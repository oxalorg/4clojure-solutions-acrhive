[{"problem":25,"code":"(fn find-odds [seq]\n  (filter odd? seq))","user":"5a99d28ee4b0d174b936c7b3"},{"code":"(fn [s] (filter #(not= 0 (mod % 2)) s))","problem":25,"user":"4e7d5eb8535db169f9c796d6"},{"problem":25,"code":"filter (fn [a] (= (mod a 2) 1))","user":"546b833ce4b00cfc9eacc16b"},{"code":"remove #(zero?(mod % 2))","problem":25,"user":"505e3b57e4b011187b721f39"},{"code":"(fn toto [x] (filter odd? x))","problem":25,"user":"511ba290e4b00c2a1fa7ff70"},{"problem":25,"code":"filter #(= 1 (mod % 2))\n\n; (fn [ desc ] (reduce #(if (= 1 (mod %2 2)) (conj %1 %2) (do %1)) [] desc))","user":"53c39a9ae4b00fb29b22127d"},{"problem":25,"code":"#(filter (fn [n] (> (mod n 2) 0)) %)","user":"586bd340e4b01531a375e966"},{"problem":25,"code":"(fn [s]\n  (keep #(if (odd? %) %) s))","user":"54b5ce67e4b05787c3b163ac"},{"code":"(fn[v] (for [k v :when (odd? k)] k))","problem":25,"user":"53347274e4b0656e627bfd6b"},{"problem":25,"code":"#(filter (fn [el] (-> el (mod 2) zero? not)) %)","user":"5de68f83e4b0986d99407f6c"},{"code":"(fn [l]\n  (filter odd? l)\n)","problem":25,"user":"506ec408e4b09350ab4199f1"},{"problem":25,"code":"#(filter (fn[x]\n           (= (rem x 2) 1))\n         %)","user":"5cded022e4b0a17bb84e2af7"},{"problem":25,"code":"(fn[x] (reduce (fn[l y] (if (= (mod y 2) 0) l (conj l y) )) [] x))","user":"59300b0ee4b072a2710fcfd3"},{"problem":25,"code":"(fn [x] (filter #(> (mod % 2) 0) x ) )","user":"5955625fe4b066ee0a44af2f"},{"problem":25,"code":"(fn [s]\n    (filter #(= (mod % 2) 1) s)\n    )","user":"58ec1e63e4b056aecfd47d54"},{"code":"filter #(= (mod % 2) 1)","problem":25,"user":"4ded611f535d08e6dec9fe0d"},{"problem":25,"code":"(fn [coll] (filter (fn [n] (= (rem n 2) 1)) coll))","user":"563bb1fde4b0bfe05bf11829"},{"code":"filter (fn [x] (=(rem x 2)1))","problem":25,"user":"51eee2f1e4b0871fa145d991"},{"problem":25,"code":"#(filter odd? %)\n;;\n;;(fn [x] (filter odd? x))\n;;\n;;(fn [x] (filter #(= (mod % 2) 1) x))\n;;\n;;(defn isOdd? [x] (= (mod x 2) 1))\n;;(fn [x] (filter isOdd? x))","user":"5dc0ca73e4b0e59a23173d82"},{"code":"(fn [xs]\n  (filter #(odd? %) xs))","problem":25,"user":"4fbc0011e4b081705acca2f0"},{"code":"(fn [coll] \n          (keep #(if (odd? %) %) coll ))","problem":25,"user":"536581e4e4b0243289761e6d"},{"code":"#(filter  (fn [op] (not= op nil))\n          (map  (fn [entry] (if (= (mod entry 2) 1)\n                              entry\n                            )\n                )\n          %1\n          )\n)","problem":25,"user":"4fa7de4ce4b081705acca1c9"},{"problem":25,"code":"(fn myfun [coll]\n  (filter odd? coll))","user":"55079e55e4b021ccfedb96aa"},{"problem":25,"code":"(fn [x] (filter #(if (zero? (mod % 2)) false true) x))","user":"554f7ef2e4b00713264bd9a1"},{"code":"(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      acc\n      (let [head (first c), tail (rest c)]\n        (if (odd? head)\n          (recur tail (conj acc head))\n          (recur tail acc))))))","problem":25,"user":"50a83794e4b054305ba5a831"},{"code":"(fn [l] \n  (filter #(not= (mod % 2) 0) l))","problem":25,"user":"4f036c50535dcb61093f6aba"},{"problem":25,"code":"(fn [s] (filter #(not (even? %)) s))","user":"572ad0fde4b0f4d77e651244"},{"problem":25,"code":"(fn myodd [x]\n  (filter #(= 1 (mod % 2)) x))","user":"56548fd3e4b0f9d632dd8485"},{"code":"#(for [s % :when (odd? s)] s)","problem":25,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn allodd [x]\n  (if (empty? x) '()\n      (if (= 1 (mod (first x) 2)) (cons (first x) (allodd (rest x))) (allodd (rest x)))\n))","problem":25,"user":"50909368e4b084db37c1e074"},{"problem":25,"code":"(fn odd-numbers\n  ([sq] (odd-numbers sq []))\n  ([sq acc]\n    (if (= 0 (count sq))\n      (sort acc)\n      (if (= 0 (mod (first sq) 2))\n        (odd-numbers (rest sq) acc)\n        (odd-numbers (rest sq) (cons (first sq) acc))))))","user":"5512c935e4b055c2f668d4b8"},{"code":";filter #(not= 0 (mod % 2))\r\n\r\n#(filter odd? %)","problem":25,"user":"4f07c8c3535dcb61093f6c2d"},{"code":"(fn [s] (remove #(zero? (mod % 2)) s))","problem":25,"user":"51435753e4b0c172af7558d5"},{"code":"(fn find-odd [ls]\n  (if (empty? ls)\n    '()\n    (let [fs (first ls)\n          rs (rest ls)]\n      (if (odd? fs)\n        (cons fs (find-odd rs))\n        (find-odd rs)))))","problem":25,"user":"521a4ff5e4b0c4ef0be83004"},{"code":"(fn [x]\n  (loop [col x acc ()]\n  (if (empty? col) \n     (reverse acc) \n     (recur (rest col) (if (odd? (first col))\n                       (conj acc (first col)) \n                       acc)))))","problem":25,"user":"5252ed18e4b0541d1855b8d9"},{"problem":25,"code":"(fn [l] \n\t(filter \n\t\t#(= (mod % 2) 1)\n\t\tl\n\t) \n)","user":"56058d64e4b08b23635d3169"},{"problem":25,"code":"filter(fn[x](= 1 (rem x 2)))","user":"6001460ce4b074f607df6611"},{"problem":25,"code":"filter (fn [n] (-> n even? not))","user":"54ca05a6e4b057c6fda3a24e"},{"problem":25,"code":"(fn[seq]\n  (filter \n   #(odd? %1)\n   seq))","user":"550309b9e4b086ebe8a79c65"},{"code":"(fn myodd [x]\r\n  (if (> (count x) 0)\r\n  (if (odd? (first x)) (cons (first x) (myodd (rest x)))  (myodd (rest x))) '())\r\n\r\n )","problem":25,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":25,"code":"(fn [c] (filter (fn [x] (= 1 (mod x 2))) c))","user":"5caf9a07e4b026601754b899"},{"problem":25,"code":"(fn evens [xs]\n  (filter odd? xs))","user":"54f06aede4b024c67c0cf896"},{"problem":25,"code":"(fn [nums] (for [ x nums :when (odd? x)] x))","user":"57eec606e4b0bfb2137f5bc8"},{"code":"(partial filter #(= (rem % 2) 1))","problem":25,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":25,"code":"(fn [col] (filter #(= 1 (mod % 2)) col))","user":"5a55114ae4b05d388ecb6c37"},{"code":"(fn [xs]\n  (filter\n    #(= 1 (mod % 2))\n    xs))","problem":25,"user":"4ed6d81a535d10e5ff6f52ea"},{"problem":25,"code":"(fn [x]\r\n  (filter #(pos? (mod % 2)) x))","user":"594cb88be4b07ddc2dafae6e"},{"problem":25,"code":"(fn q25\n  [s]\n  (filter odd? s))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":25,"code":"(fn oddOnly [x]\n  (filter #(=(mod % 2)1) x)\n  )","user":"56942b5fe4b0dcc4269f411c"},{"code":"(fn [coll]\n  (reduce\n    (fn [acc i]\n      (if (= (rem i 2) 1)\n        (conj acc i)\n        acc))\n   [] coll))","problem":25,"user":"50e3cf55e4b01912b3285c45"},{"problem":25,"code":"(fn [w] (\n  filter (\n          fn [s] \n          \t(if (not (= (mod s 2) 0)) s \n              )) w       \n))","user":"5643e9f1e4b0018b46ad8c04"},{"problem":25,"code":"(fn find-odd [lst]\n  (filter #(= (rem % 2) 1) lst)\n)","user":"569e3175e4b0542e1f8d1484"},{"problem":25,"code":"(fn [coll](filter odd? coll))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn odds [s] (filter odd? (into [] s)))","problem":25,"user":"50f84d85e4b0aafb827eb1f7"},{"code":"(fn [x]\r\n  (reverse (reduce conj '() (filter odd? x))))","problem":25,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":25,"code":"(fn [s]\n   (filter odd? s))","user":"545e9cf1e4b01be26fd7467f"},{"problem":25,"code":"filter #( = 1 (mod % 2))","user":"55e88644e4b0121d4835fd95"},{"problem":25,"code":"(fn odd [x] (if (empty? x)\n             []\n              (\n               if (= (mod (first x) 2) 1 )\n               \t(cons (first x) (odd (rest x)))\n               \t(odd (rest x)))))","user":"563aa090e4b0bfe05bf11801"},{"problem":25,"code":"(fn [li] (filter #(and (= (mod % 2) 1)) li))","user":"5a45aaece4b05d388ecb6b3f"},{"problem":25,"code":"(fn [coll] \n  (filter (fn [n] (-> n (mod 2) zero? not)) coll))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"code":"keep-indexed #(if (odd? %2) %2)","problem":25,"user":"51ef48d0e4b0871fa145d9a4"},{"code":"(fn [collection] (filter #(= 1 (mod % 2)) collection))","problem":25,"user":"4f9f135be4b0dcca54ed6d34"},{"code":"(fn [x] (filter #(= 1 (mod %1 2)) x))","problem":25,"user":"4ea31da2535d7eef308072c1"},{"problem":25,"code":"(fn odd \n  [lst]\n  \n  (filter odd? lst))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":25,"code":"(fn odds [a]\n  (filter odd? a))","user":"541b41d1e4b01498b1a71a65"},{"problem":25,"code":"(fn [lst]\n  (remove #(zero? (rem % 2)) lst))","user":"5bbbce70e4b0a20761a2360f"},{"problem":25,"code":"(fn foo [x] (filter #(= 1 (mod % 2)) x))","user":"557bc06ae4b05c286339e0b8"},{"code":"#(filter (fn [x] (not (= (mod x 2) 0))) %)","problem":25,"user":"5328e449e4b09d4e7a9b550c"},{"problem":25,"code":"(fn [x] (reduce (fn [sequencia-final numero]\n            (if (odd? numero)\n              (conj sequencia-final numero)\n              sequencia-final))\n        []\n        x))","user":"55e90724e4b0121d4835fd9a"},{"problem":25,"code":"(fn [l] ( filter #(= (mod % 2) 1) l))","user":"5a135415e4b0ff51aa4b317f"},{"code":"#(filter (fn [x] (odd? x)) %)","problem":25,"user":"4ee1220b535d10e5ff6f5354"},{"code":"(fn[col] \n   (reverse (reduce #(if (odd? %2) (conj %1 %2) %1) (list) col))\n   )","problem":25,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"remove #(= (rem % 2) 0)","problem":25,"user":"50b63309e4b0a86f8358ca68"},{"problem":25,"code":"(fn [xs] (filter (fn [x] (not= 0 (mod x 2))) xs))","user":"55a3ca84e4b0acc240e3153c"},{"problem":25,"code":"#(loop [x 0 tot []]\n   (if (< x (count %))\n     (if-not (= (rem (nth (seq %) x) 2) 0)\n       (recur (+ x 1) (conj tot (nth (seq %) x)))\n       (recur (+ x 1) tot))\n     tot))","user":"59c3d1e7e4b0a024fb6ae4e5"},{"code":"(fn [numbers]\n  (for [x numbers\n    :when (odd? x)]\n    x)\n  )","problem":25,"user":"536e56dbe4b0fc7073fd6e6c"},{"problem":25,"code":"(fn [s] (filter (fn[x] (not= 0 (rem x 2))) s) )","user":"57583451e4b02ea114799304"},{"problem":25,"code":"filter #(-> %1 even? not)","user":"55e246c2e4b050e68259b431"},{"code":"(fn [coll]\n  (filter (fn [n] (not= (mod n 2) 0)) coll))","problem":25,"user":"505bd09fe4b032b709c81373"},{"code":"(fn [s] (apply list (reduce #(if (odd? %2) (conj %1 %2) %1) [] s)))","problem":25,"user":"534dd600e4b084c2834f4aaa"},{"problem":25,"code":"(fn [coll]\n\t(remove nil?\n\t\t\t\t\t(map (fn [x] (if (not= 0 (rem x 2)) x)) coll)))","user":"5d797deee4b02e6b30c93541"},{"code":"#(for[x % :when (odd? x)]x)","problem":25,"user":"51e6a311e4b0ab43cc26c21e"},{"problem":25,"code":"(fn [ns] (filter odd? ns))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":25,"code":"(fn [ls] \n  (filter #(== (mod % 2) 1) ls)\n  )","user":"60228147e4b0d5df2af22202"},{"code":"filter (comp pos? #(mod % 2))","problem":25,"user":"52cb6bb0e4b07d0d72b2734c"},{"code":"(fn oddfilter [alist] (filter #(= (rem % 2) 1) alist))","problem":25,"user":"51340abbe4b0915833951877"},{"code":"(fn [x]\n  (loop [l x r []]\n    (if (empty? l)\n      r\n      (if (= (rem (first l) 2) 1)\n        (recur (rest l) (conj r (first l)))\n        (recur (rest l) r)\n      )\n    )\n  )\n)","problem":25,"user":"4e5cac7c535d8a8b8723a2c3"},{"problem":25,"code":"#(loop [numbers % odd '() ]\n  (if (empty? numbers)\n     odd\n     (if (= (rem (last numbers) 2) 1)\n        (recur (drop-last numbers) (conj odd (last numbers)))\n        (recur (drop-last numbers) odd))))","user":"5ecda821e4b016b56eae0598"},{"code":"#(filter (fn [n] (not= 0 (mod n 2))) %)","problem":25,"user":"4e6cf61a535de274dd8d818c"},{"problem":25,"code":"(fn [sq] (filter #(odd? %1) sq))","user":"5630cff7e4b0bfe05bf11787"},{"code":"remove #(zero? (mod % 2))","problem":25,"user":"4f031a53535dcb61093f6a63"},{"code":"(fn [collection](filter odd? collection))","problem":25,"user":"52b20257e4b0c58976d9ace8"},{"problem":25,"code":"(fn [thing] (keep #(if (odd? %) %) thing))","user":"57073037e4b0b0fb43fd0689"},{"problem":25,"code":"(fn [coll] (filter #(= (mod % 2) 1) (seq coll)))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"#(filter (fn [a] (> (mod a 2) 0)) %)","problem":25,"user":"4f03bbf2535dcb61093f6b59"},{"problem":25,"code":"(fn [stuff]\n  (filter odd? stuff))","user":"5b6ba7d7e4b0c6492753e7ad"},{"problem":25,"code":"(fn blah [lis] \n  (filter #(not= (rem % 2) 0) lis)\n)","user":"54897284e4b0e286459a11e6"},{"problem":25,"code":"#(filter (fn [x] (= (mod x 2) 1 )) % )","user":"5b92f4cbe4b0c0b3ffbd4a42"},{"problem":25,"code":"(fn odds [x] (filter (fn [y] (= (mod y 2) 1)) x))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [c]\n  (loop [col c re (list )]\n    (if (empty? col)\n      (reverse re)\n      (recur \n        (rest col)\n        (if (odd? (num (first col)))\n          (conj re (num (first col)))\n          re\n          )\n        )\n      )\n    )\n  )","problem":25,"user":"4db7da66535d1e037afb2187"},{"code":"(fn [l] (filter (fn [n] (= (rem n 2) 1)) l))","problem":25,"user":"507dad44e4b03c76e5499e05"},{"problem":25,"code":"(fn [coll]\n  (remove nil? (map (fn [c]\n                      (if (odd? c)\n                        c)) coll)))","user":"5695e96ae4b0dcc4269f412c"},{"code":"(fn [coll] (let [odd-result (filter odd? coll)] (if (empty? odd-result) odd-result (seq odd-result))))","problem":25,"user":"53195519e4b08068f379ed7b"},{"problem":25,"code":"mapcat #(if (odd? %) (list %))","user":"5863eda2e4b0f14aab7c8836"},{"problem":25,"code":"(fn [s] (remove (fn [n] (== (mod n 2) 0)) s))","user":"5457e5f1e4b01be26fd74613"},{"problem":25,"code":"#(for [x % :when (not= 0 (mod x 2))] x)","user":"53da767ee4b0e771c302549e"},{"problem":25,"code":"(fn \n[s] \n  (for [n s :when (odd? n)] n)\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":25,"code":"#(for [x %\n       :when (= 1 (rem x 2))]\n       x)","user":"5ef82119e4b09b61f08553c6"},{"code":"(fn zomgodd [initial-seq]\n  (loop [seq initial-seq odds []]\n    (let [n (first seq) tail (rest seq)]\n      (if (= n nil)\n        odds\n        (if (= (mod n 2) 1)\n          (recur tail (conj odds n))\n          (recur tail odds))))))","problem":25,"user":"4e55958a535d8a8b8723a27e"},{"problem":25,"code":"#(reduce (fn [x y] (if (odd? y) (conj x y) x )) [] %)","user":"5c478ba2e4b0e06e1360a3b2"},{"problem":25,"code":"(fn [v]\n  (loop [v v, res []]\n    (if(seq v)\n      (if(odd? (first v))\n        (recur (rest v) (conj res (first v)))\n        (recur (rest v) res))\n    res)))","user":"5a786223e4b013a48d39976b"},{"code":"(fn [x]\n\t(filter\n\t\t(fn [y] (not= 0 (rem y 2 ) ) )\n\t\tx ) )","problem":25,"user":"52e8ecbbe4b09f7907dd14a0"},{"code":"#(filter (fn [e] (= 1 (mod e 2))) %)","problem":25,"user":"505b9084e4b032b709c81371"},{"problem":25,"code":"(fn [a] (filter #(not (zero? (mod % 2))) a))","user":"550b5c10e4b06e50f9beb143"},{"problem":25,"code":"(fn [a] (filter #(not= 0 (mod % 2)) a))","user":"55afa977e4b002ce9d5cbc15"},{"code":"(fn fitler-odd [lst] (filter odd? lst))","problem":25,"user":"53213810e4b09d4e7a9b54b0"},{"problem":25,"code":"(fn [x] \n  (filter odd? x) )","user":"60630af9e4b069485764ddbc"},{"problem":25,"code":"(fn [coil]\n  (loop [src coil dst '()]\n    (if (empty? src)\n      (reverse dst)\n      (if (= 1 (mod (first src) 2))\n        (recur (rest src) (conj dst (first src)))\n        (recur (rest src) dst)))))","user":"56c55fbce4b05cc29241eea5"},{"problem":25,"code":"(fn [nums] \n  (filter \n   #(= 1 (mod % 2)\n       ) nums))","user":"58730484e4b01531a375ea26"},{"code":"(fn [input] (filter odd? input))","problem":25,"user":"5341b141e4b00652c8746ecf"},{"code":"#(for[x % :when(odd? x)]x)","problem":25,"user":"4ea683e4535d7eef308072e5"},{"problem":25,"code":"(fn [alist] (filter odd? alist))","user":"5404e61de4b0addc1aec6661"},{"problem":25,"code":"(fn [V]\n  (filter odd? V))","user":"5e6b891ee4b04a83ad7cd27a"},{"code":"(fn [e] (filter #(= 1 (mod % 2)) e))","problem":25,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":25,"code":"(fn [x] \n\t(loop [s x, r ()]\n\t\t(if (not= s ())\n\t\t\t(if (not= 0 (mod 1 (/ 2 (first s))))\n\t\t\t\t(recur (rest s) (concat r [(first s)]))\n\t\t\t\t(recur (rest s) r)\n\t\t\t)\n\t\t\tr\n\t\t)\n\t)\n)","user":"52280a26e4b0186687e23a67"},{"problem":25,"code":"filter #(not= (mod %1 2) 0)","user":"55702247e4b09a3098a5252a"},{"problem":25,"code":"; filter odd?\n#(for [x % :when (odd? x)] x)","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [a] (filter #(not= (mod % 2) 0) a))","problem":25,"user":"5314b0cae4b08068f379ed1c"},{"problem":25,"code":"reduce (fn [x y] (if (odd? y) (conj x y) x)) []","user":"5e2586afe4b05b4b01516167"},{"problem":25,"code":"(fn [s] (filter #(= (mod %1 2) 1) s))","user":"4f981f31e4b0dcca54ed6cef"},{"problem":25,"code":"(fn\n  [s]\n  (filter #(if (= 1 (mod % 2)) \n          %) s))","user":"562fb774e4b0ab312c17ebd9"},{"code":"filter #(not (integer? (/ % 2)))","problem":25,"user":"4ea09d5c535d7eef308072a9"},{"code":"(fn [sequ] \n  (filter odd? sequ)\n  )","problem":25,"user":"50fa0dcee4b07934dda8b0bb"},{"code":"(partial filter #(not= 0 (rem %1 2)))","problem":25,"user":"51434a4fe4b0c172af7558d4"},{"code":"(fn [coll] (filter #(not= 0 (rem % 2)) coll))","problem":25,"user":"5197f674e4b068aa333628f6"},{"problem":25,"code":"(fn[x](remove nil? (map #(if(odd? %) %) x)))","user":"56a28664e4b0542e1f8d14c1"},{"problem":25,"code":"#(reduce \n  (fn [acc x]\n    (if (= 1 (mod x 2))\n      (conj acc x)\n      acc))\n  []\n  %)","user":"55ec4d30e4b0121d4835fdc6"},{"problem":25,"code":"(fn odd ([x] (odd x [])) ([x o] (if (empty? x) o (recur (rest x) (if (= 1 (mod (first x) 2)) (concat o [(first x)]) o)))))","user":"54a634abe4b09f271ff37c84"},{"problem":25,"code":"#(filter (fn\n           [x]\n           (if\n             (= 1 (mod x 2))\n\t\t\t x)) %)","user":"573b8cf1e4b0cd1946bd10ad"},{"code":"(fn fun2 [x]\n (filter odd? x) \n )","problem":25,"user":"52132f8de4b0d32679a50651"},{"code":"(fn only-odd [coll]\r\n  (filter odd? coll))","problem":25,"user":"4e7e4a1f535db169f9c7970c"},{"code":"(fn [coll]\n\t(filter odd? coll))","problem":25,"user":"51205867e4b0e88f5a20c40f"},{"problem":25,"code":"(fn filterListOdd [x] (filter (fn filterElemOdd [n] (= (mod n 2) 1)) x))","user":"5f7251b9e4b02876ed9fd08a"},{"code":"(fn [s]\n  (for [x s\n        :when (= (mod x 2) 1)]\n    x))","problem":25,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn [coll] (filter #(not(= (rem % 2) 0)) coll))","problem":25,"user":"4ec9549d535d6d7199dd36fe"},{"problem":25,"code":"(fn [x] (filter (fn [n] (= 1 (mod n 2))) x))","user":"552949e5e4b0ffed3738f948"},{"problem":25,"code":"(fn [x]                                                                                                                   \n   (filter #(not (even? %)) x)                          \n)","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":25,"code":"(fn [oset]\n  (filter \n   (fn [elem] \n     (= (mod elem 2) 1)\n     ) \n   oset))","user":"557bd9a9e4b05c286339e0bc"},{"code":"(fn [l] (filter odd? l))","problem":25,"user":"4e6a48da535d8ccf87e9febe"},{"problem":25,"code":"(fn [s] \n  (loop [f (first s) r (rest s) out []]\n    (if (nil? f)\n      out\n      (recur (first r) (rest r) (if (= (mod f 2) 1)\n                                  (conj out f)\n                                  out)))))","user":"5599cc64e4b031d6649c9bb3"},{"code":"(fn getodd\n  [l]\n  (cond\n   (empty? l) []\n   (odd? (first l)) (cons (first l) (getodd (rest l)))\n   :else (getodd (rest l))))","problem":25,"user":"518c0f4ee4b0f028e99addf7"},{"problem":25,"code":"(fn [x] (filter #(= (mod % 2) 1) (vec x)))","user":"59175adde4b09b4ee5954b9a"},{"code":"(partial filter #(= (mod %  2) 1))","problem":25,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn odds [lst]\n  (cond\n    (empty? lst) '()\n    (= 0 (rem (first lst) 2)) (odds (rest lst))\n    true (conj (odds (rest lst)) (first lst))))","problem":25,"user":"4fab0c0ae4b081705acca20d"},{"code":"filter (fn [n] (not= 0 (mod n 2)))","problem":25,"user":"4e99819a535dbda64a6f6b66"},{"problem":25,"code":"(fn \n  [x]\n(filter #(= 1 (bit-and 1 %)) x))\n; filter odd? is just too easy.","user":"5cb4e764e4b026601754b929"},{"problem":25,"code":"(fn[args](remove even? args))","user":"5939b9f9e4b069cdc2982b3d"},{"problem":25,"code":"(fn odds [xs]\n  (if (empty? xs)\n    '()\n    (if (odd? (first xs))\n      (cons (first xs) (odds (rest xs)))\n      (odds (rest xs)))))","user":"5e385965e4b01d43a70e8dba"},{"problem":25,"code":"#( filter odd? %\n  )","user":"56d4d5efe4b0ea9b8538f7bd"},{"problem":25,"code":"filter odd?\n;;filter #(= 1 (rem % 2))","user":"57927841e4b0e215f87e8446"},{"code":"(fn odd-nums [col]\n  (if (empty? col) '()\n    (if (not= (mod (first col) 2) 0) \n      (conj (odd-nums (rest col)) (first col))\n      (odd-nums (rest col)))))","problem":25,"user":"500388dde4b0678c553fc43d"},{"problem":25,"code":"(fn\n  [seq]\n  (filter (fn is-odd\n  [n]\n  (= 1 (mod n 2))\n) seq)\n)","user":"5f735915e4b02876ed9fd097"},{"problem":25,"code":"(fn [col]\n    (filter odd? col))","user":"59932f49e4b0b211ea3aaaae"},{"code":"(fn [l]\n  (let [inc-odd (fn [nm ll]\n                  (if (odd? nm)\n                    (cons nm ll)\n                    ll))\n        odds (fn [l1 l2]\n               (if (empty? l1)\n                 l2\n               (recur (rest l1) (inc-odd (first l1) l2))))] (reverse (odds l ()))))","problem":25,"user":"516a9dbee4b081287f204e9c"},{"code":"#(filter (fn[x] (= (rem x 2) 1)) %)","problem":25,"user":"52cd1ed0e4b07d0d72b27377"},{"problem":25,"code":"#(filter \n  (fn [x]\n    (= 1 (rem x 2)))\n  %)","user":"52506e4ce4b0541d1855b82d"},{"problem":25,"code":"(fn [l] (filter (fn [i] (not (= (mod i 2) 0))) l))","user":"553d1997e4b0a04f792994db"},{"problem":25,"code":"(fn\n  [a]\n  (remove nil? (map #(when (not= (rem % 2) 0) %) a)))","user":"5d5502cbe4b02ba5928a680b"},{"problem":25,"code":";(fn [s] (filter #(= (mod % 2) 1) s))\n\n(fn [s] (filter #(odd? %) s))","user":"56483f45e4b0284900eef62b"},{"code":"(fn [coll] (for [item coll :when (= 1 (rem item 2))] item))","problem":25,"user":"52fa8e32e4b047fd55836ffa"},{"code":"(fn [s] (filter odd? s))","problem":25,"user":"4dd7c1da535d2dad7130b5d4"},{"problem":25,"code":"(fn [array] (filter (fn [x] (if (= (rem x 2) 1) true false)) (vec array)))","user":"5c4be0bde4b0f9f7a8770e6c"},{"code":"(fn [l] \n\t\t(filter odd? l)\n\t)","problem":25,"user":"5151aa14e4b03e678e393ad4"},{"code":"(fn [lst] (keep #(if (odd? %) %) lst))","problem":25,"user":"50a4b6a7e4b0344e360f3bb8"},{"problem":25,"code":"(fn [coll] \n  (filter #(not= (rem % 2) 0) coll))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn [coll] (filter #(= (rem % 2) 1) coll))","problem":25,"user":"4e218464535d04ed9115e816"},{"code":"(fn [coll]\n  (filter \n    #(not= (mod % 2) 0)\n    coll))","problem":25,"user":"505acd20e4b021387fb8985a"},{"code":"(fn [coll] \n    (filter #(not (zero? (mod % 2))) coll))","problem":25,"user":"4e4bf20e535dc968683fc4d9"},{"problem":25,"code":"remove (fn [x] (= (rem x 2) 0))","user":"561be724e4b064ca9f4b168c"},{"problem":25,"code":"filter #(if (= (mod %1 2) 1) true false)","user":"5dc85f8ae4b02f9375f4e1da"},{"problem":25,"code":"(fn [lst] \n  (filter odd? lst))","user":"53d2afede4b00fb29b221321"},{"problem":25,"code":"(fn [v] (filter #( = (rem % 2) 1) v))","user":"556880dae4b0c656e3ff1856"},{"code":"#(filter (fn [x] (if (odd? x) x nil)) %)","problem":25,"user":"51bc6d54e4b0fe3ecfb4645c"},{"code":"filter #(<\n  0(mod % 2))","problem":25,"user":"4f5d0f25e4b0030a34fb2b33"},{"code":"#(filter (fn [n] (< 0 (mod n 2))) %)","problem":25,"user":"4fa68ed4e4b081705acca1bb"},{"code":"(fn[l] (filter #(= (rem % 2) 1) l))","problem":25,"user":"4f28d266e4b0d6649770a01c"},{"problem":25,"code":"(fn filt [sq]\n  (let [first_element (first sq)]\n    (if-not (empty? sq)\n      (concat\n       (if (not= 0 (rem first_element 2))\n         (list first_element)\n         nil)\n       (filt (rest sq)))\n     nil\n    )\n  )\n )","user":"578acd37e4b0ebec4cfb7541"},{"problem":25,"code":"(fn myfunc\n  ([x] (myfunc x '()))\n  ([x, y] \n   (if (empty? x)\n     (reverse y)\n     (recur (rest x) \n                       (if (odd? (first x))\n                         (conj y (first x)) y )))))","user":"5a0a3473e4b0eab8c0448941"},{"problem":25,"code":"filter #(not ( = (mod % 2) 0))","user":"53c6b3cae4b00fb29b2212a0"},{"code":"(fn [ls]\n  (filter (fn [i] (not (= 0 (rem i 2)))) ls))","problem":25,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":25,"code":"(fn [sq] (filter (fn [x] (= (rem x 2) 1)) sq))","user":"54b6c24be4b0ed20f4ff6e7c"},{"code":"filter (fn [n] (odd? n))","problem":25,"user":"4f6ce1b2e4b07046d9f4efc0"},{"code":"(fn odds [x] (cond (= x []) [] (= (mod (first x) 2) 1) (cons (first x) (odds (rest x))) :else (odds (rest x))))","problem":25,"user":"528b9efee4b0239c8a67aea0"},{"problem":25,"code":"(fn [s]\n  (loop [s s\n         res []]\n    (if (seq s)\n      (if (odd? (first s))\n        (recur (rest s) (conj res (first s)))\n        (recur (rest s) res))\n      res)))","user":"56a655dbe4b0542e1f8d14eb"},{"problem":25,"code":"(fn [x]\n  (remove nil? (map #(if (odd? %) %) x)))","user":"56f1b558e4b04a395b9a049a"},{"code":"(fn [coll] \n  (for [x coll :when (= (mod x 2) 1)] x))","problem":25,"user":"5234870ee4b05e80434a505c"},{"problem":25,"code":"(fn [seq]\n  (filter #(odd? %) seq))","user":"53edb464e4b0d648e757f4c7"},{"code":"(fn only-odds [x] (filter #(if (= 0 (mod % 2)) false true) x))","problem":25,"user":"52d6889ae4b09f7907dd1361"},{"code":"filter #(pos? (mod %1 2))","problem":25,"user":"4e662d58535d8ccf87e9fe75"},{"problem":25,"code":"(fn [the-seq] (filter odd? the-seq))","user":"5c86b769e4b0c8042a70ce9b"},{"code":"(fn odds [aseq] (cond\n                 \t(empty? aseq) '()\n                 \t(= (mod (first aseq) 2) 1) (cons (first aseq) (odds (rest aseq)))\n                 \t(= (mod (first aseq) 2) 0) (odds (rest aseq))))","problem":25,"user":"51bf4560e4b013aa0d74b817"},{"problem":25,"code":"#(for [item % :when (odd? item) :let[res item]] res)","user":"5a291617e4b07f18be40aa76"},{"problem":25,"code":"(fn find-odd\n  \t[coll]\n  \t(filter (fn [x]\n              \t(= (mod x 2)\n                   1))\n            (seq coll)\n    )\n)","user":"53cfd3c5e4b00fb29b221302"},{"problem":25,"code":"(fn [col] (filter #(not= 0 (mod % 2)) col))","user":"5d89f87de4b0915913b1d3c4"},{"code":"#(filter (fn [x] (not (even? x))) %)","problem":25,"user":"502ac96de4b0614b5299611b"},{"problem":25,"code":"(fn [sequ] (\n            filter odd? sequ\n            ))","user":"59b2d51be4b0e1f4e384c902"},{"code":"(fn[x] (filter #(odd? %) x))","problem":25,"user":"4e080562535d04ed9115e7aa"},{"problem":25,"code":"#(\n  reduce (fn [coll elem]\n           (if (odd? elem)\n             (conj coll elem)\n             coll\n           )\n         ) [] %\n)","user":"54ca130ce4b057c6fda3a250"},{"problem":25,"code":"(fn filter-by-odd [seq]\n  (filter (fn [number]\n            (= 1 (mod number 2))) seq))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":25,"code":"(fn [x]\n  (filter  #(not= (mod % 2) 0) (seq x)))","user":"56ae749fe4b03c432f18735f"},{"problem":25,"code":"(partial filter #(odd? %) )","user":"56902dfae4b0dcc4269f40ea"},{"problem":25,"code":"(fn odd\n  [lst]\n  (filter #(odd? %) lst))","user":"5bbbcf9ee4b0a20761a23614"},{"problem":25,"code":"(fn odd [s] (filter (fn [i] (not (= 0 (mod i 2)))) s))","user":"579d8947e4b05b1deef9ae17"},{"problem":25,"code":"(fn odd-only\n  ([coll] (odd-only coll []))\n  ([coll acc]\n   (if (empty? coll)\n     (reverse acc)\n     (if (odd? (first coll))\n       (recur (rest coll) (cons (first coll) acc))\n       (recur (rest coll) acc)))))","user":"5c7d2cc9e4b0d597f478caa2"},{"problem":25,"code":"(fn my-odds\n    [coll]\n    (loop [odds [] remaining coll]\n      (if (empty? remaining)\n        odds\n        (let [element (first remaining)]\n          (recur (if (odd? element)\n                   (conj odds element)\n                   odds) (rest remaining))\n          )\n        )\n      )\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"code":"#(filter odd? %1)","problem":25,"user":"4def301c535d08e6dec9fe12"},{"problem":25,"code":"(fn [col] (filter #((comp not zero?) (mod % 2)) col))","user":"54ac5ad7e4b09f271ff37cd6"},{"problem":25,"code":"#(loop [l % new-l ()]\n\t(if (empty? l)\n\t\t(reverse new-l)\n\t\t(let [x (first l)] (\n\t\t\trecur (rest l) (if (odd? x) (conj new-l x) new-l\n\t\t))\t\n\t)\n))","user":"542d95f0e4b0dad94371f2b9"},{"code":"(fn filter-odd [xs] (filter (fn odd? [n] (= (mod n 2) 1)) xs))","problem":25,"user":"53028354e4b0d8b024fd372b"},{"problem":25,"code":"(fn myf [x] (filter odd? x))","user":"57016724e4b08d47c97781d6"},{"problem":25,"code":"#(filter\n  (fn [x]\n    (not= 0 (mod x 2))) %)","user":"57a1ef58e4b0c3d858beb8f3"},{"code":"(fn [x] (reverse (reduce #(if (odd? %2) (cons %2 %1) %1) '() x)))","problem":25,"user":"50e20a07e4b0ae09a0e7de78"},{"problem":25,"code":"#(reduce (fn\n           [odds elm]\n           (if (= (mod elm 2) 1)\n             (conj odds elm)\n             odds)\n           )\n         \t[]\n         \t%\n         )","user":"5984e7dee4b021a7a535fe43"},{"problem":25,"code":"#((fn odds [remaining new]\n    (if (= '() remaining)\n      new\n      (if (= (mod (first remaining) 2) 1)\n        (odds (rest remaining) (conj new (first remaining)))\n        (odds (rest remaining) new))))\n  (reverse %) '())","user":"54775b13e4b0c51c1f4d72b2"},{"code":"#(for [x % :when (odd? x)]\n    x)","problem":25,"user":"4ecb65f6535df97575fdabda"},{"problem":25,"code":"(fn [x]\n    (filter #(odd? %) x))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn find-odd [coll] \n  (filter #(not= (mod % 2) 0) coll))","problem":25,"user":"525aa499e4b0cb4875a45cf7"},{"problem":25,"code":"(fn[n] (filter #(= (mod % 2) 1) n))","user":"541df0b5e4b01498b1a71a86"},{"problem":25,"code":"(fn [lst] (for [x lst :when (odd? x)] x))","user":"577b9cfde4b0d3393e5deb16"},{"problem":25,"code":"(fn only-odd [coll] (if (empty? coll) '() (let [head (first coll) tail (rest coll)] (if (odd? head) (cons head (only-odd tail)) (only-odd tail)))))","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn find-odds [x]\n  (loop [xseq x odds '()]\n    (if (= (seq xseq) nil)\n      odds\n      (if (odd? (first xseq))\n        (recur (rest xseq) (concat odds (list (first xseq))))\n        (recur (rest xseq) odds)))))","problem":25,"user":"52c0101fe4b07a9af5792343"},{"code":"filter #(when (not (even? %)) %)","problem":25,"user":"4ea3c875535d7eef308072c9"},{"code":"(fn [coll]\n  (filter (fn [n] (= (mod n 2) 1)) coll))","problem":25,"user":"51736d4de4b00f4b6b0490d7"},{"code":"(fn [args] (\r\n                 loop [L []\r\n                       args args]\r\n                 (let [F (first args)\r\n                       N (next args)]\r\n                   (if F\r\n                   (recur (if (odd? F) (conj L F) L) N)\r\n                   L\r\n                 ))))","problem":25,"user":"4f3543eee4b0e243712b1ebd"},{"problem":25,"code":"(fn [s]\n  (filter \n    (fn [n] \n      (not \n        (= \n          (mod n 2) \n          0)))\n    s))","user":"58461304e4b089d5ab817e81"},{"code":"(partial filter (fn [n] (not= (mod n 2) 0)))","problem":25,"user":"50775a7de4b0fc74642bff60"},{"problem":25,"code":"(fn [ls] (filter #(= 1 (mod % 2)) ls))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":25,"code":";(fn [x] (filter #(not= 0 (rem %1 2)) x))\n(fn [x] (filter odd? x))","user":"5d37087ae4b01671435dbd2e"},{"problem":25,"code":"(fn [elements] (\n                filter odd? elements\n                ))","user":"58cea645e4b03c36ff7e58a6"},{"problem":25,"code":"(fn\n  [l]\n  (loop [res ()\n         l l]\n    (if (empty? l) (reverse res)\n      (if (odd? (first l))\n        (recur (cons (first l) res) (rest l))\n        (recur res (rest l))))))","user":"56df636ae4b0ca2494a095f4"},{"code":"(fn o [x] \n  (if (= x []) \n    []\n    (if (= (mod (first x) 2) 1)\n      (cons (first x) (o (rest x)))\n      (o (rest x)))))","problem":25,"user":"5110b8bae4b04c71fce993f4"},{"code":"(fn [m] (remove (fn [x] (= 0 (rem x 2))) m))","problem":25,"user":"4de6f806535d08e6dec9fdf7"},{"problem":25,"code":"(fn [lol] (filter odd? lol))","user":"593e01cde4b069cdc2982bb3"},{"code":"reduce #(if (odd? %2) (conj %1 %2) %1) []","problem":25,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn filter-odd\n  [coll]\n    (filter odd? coll))","problem":25,"user":"4e3bcccd535deb9a81d77f56"},{"problem":25,"code":"#(reduce (fn [a v] \n           (if (= 1(mod v 2))\n             (conj a v)\n             a)\n  ) [] %)","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn [y] (filter (fn [x] (= (mod x 2) 1)) y))","problem":25,"user":"4e4b911f535dc968683fc4d6"},{"problem":25,"code":"#(filter (fn [x] (pos? (mod x 2))) %)","user":"55db7e15e4b0e31453f64ae8"},{"problem":25,"code":"(fn odd-numbers [xs]\n  (for [x xs\n        :when (= 1 (mod x 2))]\n    x))","user":"5a42dbbbe4b0447ef91cc5fd"},{"code":"(fn [x] (filter (fn [item] (> (mod item 2) 0)) x))","problem":25,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":25,"code":"(fn findodd [x] (filter odd? x))","user":"5dbd86bce4b09f47823971bf"},{"code":"filter (fn [s] (= (mod s 2) 1))","problem":25,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [colls] (filter (fn [x] (= 1 (rem x 2))) colls))","problem":25,"user":"4f4b2bd4e4b03ad3f0c10c6f"},{"code":"filter (fn [x] (if (= 0 (mod x 2)) false true))","problem":25,"user":"514f72a2e4b0b449e54b8df7"},{"code":"filter (fn[x] (= (rem x 2) 1))","problem":25,"user":"4fa67030e4b081705acca1b7"},{"problem":25,"code":"(fn if-odd [s]\n  into '() (filter odd? s))","user":"5f2ab452e4b033932238a656"},{"problem":25,"code":"(fn [lst]\n  (filter #(= (type (/ % 2))\n              clojure.lang.Ratio)\n          lst))","user":"54084784e4b0addc1aec66c9"},{"problem":25,"code":"(fn [lista]\n  (filter #(= 1 (rem % 2)) lista))","user":"5be0b916e4b0ed4b8aab4c8f"},{"code":"(fn [x]\n  (->> x (map #(if (= (rem % 2) 1) % nil)) (remove #(nil? %))))","problem":25,"user":"4fc93728e4b0ee37620e1844"},{"code":"filter (fn [value] (not (= (mod value 2) 0)))","problem":25,"user":"520f46f9e4b0101e4be6fcee"},{"problem":25,"code":"(fn [input-seq] (filter #(= (mod % 2) 1) input-seq))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn myisodd [coll] (filter odd? coll))","problem":25,"user":"51aa7298e4b04e3dc0c27b28"},{"problem":25,"code":"(fn [coll] (filter (fn [x] (not= 0 (mod x 2))) coll))","user":"55c07e3ee4b01b9910ae2a24"},{"code":"(fn\n    [s]\n    (filter #(odd? %) s))","problem":25,"user":"4f4daa4ae4b03ad3f0c10cac"},{"code":"(fn [col] (filter #(= (rem % 2) 1) col))","problem":25,"user":"52662ca4e4b03e8d9a4a7124"},{"code":"(fn this [w]\r\n    (for\r\n      [x\r\n        w\r\n        :let [y x]\r\n        :when (odd? y)\r\n      ]\r\n      y\r\n    )\r\n  )","problem":25,"user":"501819efe4b02f523d7cc5eb"},{"problem":25,"code":"#(apply list (filter odd? %))","user":"5f3388ade4b0574c87022c38"},{"problem":25,"code":"(fn [list]\n  (filter (fn [n] (odd? n)) list))","user":"5756e218e4b02ea1147992e5"},{"code":"(fn [q] (remove even? q))","problem":25,"user":"532e0b20e4b019098a6f8b45"},{"code":"(fn [sq]\n  (filter #(= (mod % 2) 1) sq))","problem":25,"user":"50ccf729e4b0f7a459302aac"},{"problem":25,"code":"(fn [l] \n  (filter #(= 1 (mod % 2))\n   l\n  ) \n)","user":"5bc8afb9e4b07a9b28b100c9"},{"problem":25,"code":"(fn\n  [coll]\n  (filter odd? coll))","user":"5484143de4b0e286459a1197"},{"problem":25,"code":"(fn d [x] (for [y x :when (odd? y)] y))","user":"595eaa8fe4b066ee0a44b04b"},{"code":"(fn [x] (filter\n         (fn [y]\n           (= 1 (mod y 2))\n           ) x\n         )\n  )","problem":25,"user":"522e6c01e4b01cdb292c5f01"},{"problem":25,"code":"(fn is_odd [x]\n  (filter odd? x))","user":"57f5a5a5e4b0d3187e9008d5"},{"code":"filter (fn [x] (not (zero? (mod x 2))))","problem":25,"user":"51422945e4b0b50abeb46b2e"},{"problem":25,"code":"filter (fn [p] (odd? p))","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":25,"code":"(fn [seq]\n   (filter odd? seq))","user":"5c7d590ae4b0d597f478caaa"},{"problem":25,"code":"(fn [seq] (filter (fn [x] (= (mod x 2) 1)) seq))","user":"53bab6fae4b047364c0444fb"},{"code":"(fn [a] (filter #(= (mod % 2) 1) a))","problem":25,"user":"51ccc179e4b02254fc794879"},{"problem":25,"code":"(fn [seq]\n        (loop [seq seq\n               odd-nums []]\n          (if (empty? seq)\n            odd-nums\n            (recur (rest seq) (if (odd? (first seq))\n                                (conj odd-nums (first seq))\n                                odd-nums\n                                )))))","user":"52b065dbe4b0c58976d9acc9"},{"problem":25,"code":"(fn [coll]\n   (filter odd? coll))","user":"5462caf5e4b01be26fd746b7"},{"code":"(fn [col]\n  (filter #(= (mod % 2) 1) col))","problem":25,"user":"4e399009535deb9a81d77f3f"},{"code":"(fn [coll] (filter \n  #(not (zero? (rem % 2))) coll))","problem":25,"user":"4e53bf5e535d8a8b8723a275"},{"problem":25,"code":"(fn filter-odd [coll]\n  (filter odd? coll))","user":"53fd66a4e4b0de5c418485e3"},{"problem":25,"code":"(fn [xs] (filter #(not= (mod % 2) 0) xs))","user":"581c4ab4e4b04b46fc4b0eea"},{"code":"(fn f25 [a]\n  (loop [a a\n         b '()]\n    (if (= (vec a) [])\n      (reverse b)\n      (recur (rest a) (if (odd? (first a))\n                                (cons (first a) b)\n                                b\n                                )))))","problem":25,"user":"52c08c59e4b07a9af5792351"},{"problem":25,"code":"#(for [x %\n         :when (odd?  x)\n         ]\n     x)","user":"57124786e4b09c608db70457"},{"problem":25,"code":"(fn odd-nums [n]\n  (filter odd? n))","user":"5634995fe4b0bfe05bf117be"},{"problem":25,"code":"(fn [l] (reduce\n  #(if (= 1 (mod %2 2))\n    (conj % %2)\n     %) [] l))","user":"56ef077ae4b04a395b9a0459"},{"code":"(partial filter #((comp not =) 0 (rem % 2)))","problem":25,"user":"506b0a9ce4b0a2a5463de380"},{"code":"(fn [x] ( filter (fn [a] (= (mod a 2) 1)) x))","problem":25,"user":"51735df9e4b00f4b6b0490d6"},{"code":"(fn [list] (filter odd? list))","problem":25,"user":"4e4c1e8c535dc968683fc4db"},{"problem":25,"code":"(fn only-odd [s]\n  (cond\n   (empty? s) '()\n   (= (mod (first s) 2) 1) (conj (only-odd (rest s)) (first s))\n   :else (only-odd (rest s))))","user":"563b236ce4b0bfe05bf1180b"},{"problem":25,"code":"(fn[xs](for [x xs :when (odd? x)] x))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":25,"code":"(fn [lst] (filter #(= 1 (rem % 2)) lst))","user":"56e08e4fe4b0ca2494a0960b"},{"problem":25,"code":"(fn [col]\n  (filter #(odd? %1) col))","user":"56cb77e0e4b0ea9b8538f734"},{"code":"(fn [li] (filter #(odd? %) li))","problem":25,"user":"5226f9b8e4b04e78ff2e199b"},{"code":"(fn o [l] (filter #(if (= (rem % 2) 1) %) l))","problem":25,"user":"504e5989e4b0f6ff3350c4a4"},{"code":"(fn [li]\n (loop [li li ret []]\n   (if (= 0 (count li))\n     ret\n     (if (= 1 (mod (first li) 2))\n     (recur (rest li) (conj ret (first li)))\n     (recur (rest li) ret)  )\n    )\n   )\n  )","problem":25,"user":"513caa36e4b0b86ece9f3229"},{"code":"(fn odds [ns]\n  (cond (empty? ns) ()\n        (even? (first ns)) (odds (rest ns))\n        :else (conj (odds (rest ns)) (first ns))))","problem":25,"user":"4fc5ee4fe4b0ee37620e1804"},{"problem":25,"code":"filter (fn [i] (= (mod i 2) 1))","user":"59b1a1b2e4b0e1f4e384c8eb"},{"code":"(fn [v]\n  (filter (fn [x] (odd? x)) (seq v)))","problem":25,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"code":"(fn [coll] (filter odd? coll)  )","problem":25,"user":"51c15fe9e4b0c9c82288294c"},{"problem":25,"code":"(fn [input-list] (filter (fn [item] (= (mod item 2) 1)) input-list))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn odd [xs] (if (empty? xs) '() (if (= 1 (rem (first xs) 2)) (cons  (first xs) (odd (rest xs))) (odd (rest xs)))))","problem":25,"user":"50ef5703e4b0bdaecbb47d95"},{"code":"(fn only-odd [x]\n  (filter #(odd? %) x)\n  )","problem":25,"user":"5157d8bce4b0b0b4b87062d6"},{"problem":25,"code":"#(filter (fn [x] (zero? (mod (+ x 1) 2))) %)","user":"570005efe4b08d47c97781c4"},{"problem":25,"code":"(fn [sqnc] (filter odd? sqnc))","user":"55929e89e4b0604b3f94d58e"},{"problem":25,"code":"(fn [e] \n  (filter odd? e))","user":"5fb453d3e4b08cb800c85b44"},{"problem":25,"code":"(fn [xs](filter odd? xs))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [x]\n  (filter #(odd? %)x)\n)","problem":25,"user":"4ea3f035535d7eef308072ca"},{"code":"(fn [xs]\n    (filter odd? xs))","problem":25,"user":"50996376e4b0cae2931060b2"},{"problem":25,"code":"filter (fn[x](>(mod x 2)0))","user":"559477bce4b0c79f6e1db956"},{"problem":25,"code":"(fn [lst] (filter (fn  [v] (not (= (rem v 2 ) 0 ))) lst) )","user":"551d5cb9e4b07993ea3788e9"},{"problem":25,"code":"#(->> %\n       (filter odd?))","user":"60a52517e4b00e9e6653c459"},{"code":"(fn [xs] (filter #(= (rem % 2) 1) xs))","problem":25,"user":"4fef76ece4b0678c553fc319"},{"code":"#(filter (fn [x] (not (= 0 (mod x 2)))) %)","problem":25,"user":"5328febee4b09d4e7a9b550d"},{"problem":25,"code":"#(filter (fn [item] (< 0 (mod item 2))) %)","user":"5f97eff1e4b0715f5002d7f9"},{"problem":25,"code":"(fn[x]\n (filter odd? x)\n )","user":"58ce2a80e4b03c36ff7e589d"},{"problem":25,"code":"filter (comp not even?)","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn oddFilter [x]\n    (filter \n      (fn odd [y] \n        (= 1 (rem y 2))) \n      x))","problem":25,"user":"4fe610fde4b0e8f79898fece"},{"problem":25,"code":"#(loop [s %1 r '()]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) (if (odd? (first s))\n                        (cons (first s) r)\n                        r))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":25,"code":"(fn [seq]\n  (filter #(= 1 (rem % 2)) seq)\n  )","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn [x] (filter (fn [num] (= 1 (mod num 2))) x))","problem":25,"user":"4e836a16535db62dc21a62d6"},{"code":"(fn [as]\n  (loop [res '() s as]\n    (if s\n      (recur \n       (let [e (first s)]\n         (if (= 1 (rem e 2))\n           (concat res (list e))\n           res\n         ))\n       (next s))\n      res)))","problem":25,"user":"51b3b22ce4b0f094dd986fa7"},{"problem":25,"code":"(fn [x] (loop [s x acc '()] \n            (if (nil? (first s))\n              (reverse acc) \n              (recur (rest s) (if (= 1 (mod (first s) 2))\n                                (conj acc (first s)) \n                                acc)\n                     )\n              )\n            )\n  )","user":"5471f2fbe4b094393f72dd70"},{"problem":25,"code":"filter (fn [x] (not (== (mod x 2) 0)))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn [sqnc] (filter #(= (mod % 2) 1) sqnc))","problem":25,"user":"5116afdee4b0063b4e3e16d5"},{"code":"(fn [x] (filter #(not= 0 (rem %1 2)) x))","problem":25,"user":"51d662fce4b0154f82ab92ef"},{"code":"(fn f [x]\n  (cond\n   (= (count x) 0) '()\n   (= (count x) 1) (if (odd? (first x)) (list (first x)) '())\n   (odd? (first x)) (conj (f (rest x)) (first x))\n   true (f (rest x))))","problem":25,"user":"52d7b0ade4b09f7907dd137c"},{"problem":25,"code":"(fn oddfind\n  [arr]\n  (filter #(odd? %1) arr))","user":"5942a5a2e4b060784b3b7912"},{"code":"#(filter (fn [x] (= 1 (mod x 2))) %)","problem":25,"user":"4ecfb458535d44c135fd68bb"},{"problem":25,"code":"(fn [alist]\n          (loop [x alist accum []]\n            (if (empty? (rest x))\n              (if (odd? (first x)) (conj accum (first x)) accum)\n              (recur (rest x) (if (odd? (first x)) (conj accum (first x)) accum))\n              )\n            )\n          )","user":"5425d65ce4b01498b1a71b14"},{"problem":25,"code":"(fn \n  [things]\n  (filter odd? things))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn [seq] (filter (fn [num] (= 1 (rem num 2))) seq))","problem":25,"user":"4dddf817535d08e6dec9fdd3"},{"problem":25,"code":"(fn [lst] \n  (filter #(not= 0 (rem %1 2)) lst))","user":"59e55cc8e4b08badc2a0c555"},{"code":"filter #(not (= 0 (rem % 2)))","problem":25,"user":"52a3c66ce4b04e0c58e87c04"},{"problem":25,"code":";(fn[l] (filter #(not (even? %)) l ))\nfilter odd?","user":"558ed227e4b0277789237658"},{"code":"(fn [x] \n  (loop [a () b x] \n    (if (= (first b) nil) \n      (reverse a) \n    (recur (if (odd? (first b)) (cons (first b) a) a) (rest b)))))","problem":25,"user":"4f05adae535dcb61093f6bfd"},{"code":"#(filter (fn [n] (= 1 (mod n 2)) )%)","problem":25,"user":"522a01ade4b0590a43906ced"},{"code":"#(reverse (reduce (fn [xs x] (if (odd? x) (cons x xs) xs)) '() %))","problem":25,"user":"4ffe3349e4b0678c553fc3f0"},{"problem":25,"code":"(fn fodd [s]\n    (if (seq s)\n      (if (=(mod (first s) 2) 1)\n        (cons (first s) (fodd (rest s)))\n        (fodd (rest s)))\n      '()))","user":"573b487de4b0cd1946bd10a1"},{"code":"filter #(not (= 0(mod % 2)))","problem":25,"user":"504f204ce4b0e7ad84dbc4bd"},{"problem":25,"code":"(fn [aseq]\n  (doall (filter odd? aseq)))","user":"557e2eafe4b05c286339e0d2"},{"code":"remove #(zero? (rem % 2))","problem":25,"user":"510b704ee4b078ea71921100"},{"problem":25,"code":"(fn [x] (filter #(not= (mod % 2) 0)x))","user":"5625047fe4b00a550fc90289"},{"problem":25,"code":"(fn [x] (filter (fn [y] (not (zero? (mod y 2)))) x))","user":"5694129de4b0dcc4269f410c"},{"code":"(fn sol0025-remove\n  [coll]\n  (filter odd? coll))","problem":25,"user":"4fc6305de4b0ee37620e180b"},{"problem":25,"code":"(fn [ls] (filter #(= (mod % 2) 1) ls))","user":"503e91d4e4b06c4e0e1fa269"},{"problem":25,"code":"(fn find-odd\n  [ans s]\n  (if (empty? s)\n    (reverse ans)\n      (let [x (first s) y (rest s)]\n        (if (= (rem x 2) 0)\n          (recur ans y)\n          (recur (conj ans x) y)\n        ))\n    )\n  ) '()","user":"60617afee4b03746e80ebf6c"},{"problem":25,"code":"(fn [l]\n  (for [e l :when (= 1 (rem e 2))] e)\n)","user":"53a68c5ae4b0ef122a8689c8"},{"problem":25,"code":"#(reduce (fn  [c n] (if (odd? n) (conj c n) c)) [] %)","user":"56403765e4b08d4f616f5edc"},{"problem":25,"code":"(fn odds [coll] (filter #(not (= 0 (mod % 2))) coll))","user":"5cb62652e4b026601754b949"},{"problem":25,"code":"#(loop [x [] y %]\n   (if (= '() y) x\n     ( if (odd? (first y))\n     (recur (conj x (first y) ) (rest y))\n       (recur x (rest y)))))","user":"5e81f009e4b09a7a73c8bbaf"},{"code":"filter #(= 1 (mod % 2)) ; filter odd?","problem":25,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"code":"(fn find-odd [x]\n  (filter (fn [y] (not= 0 (mod y 2))) x))","problem":25,"user":"522452a4e4b01819a2de42d2"},{"code":"(fn find-odds [s]\n  (cond\n    (empty? s)\n      '()\n    (odd? (first s))\n      (conj (find-odds (rest s)) (first s))\n    :else\n      (find-odds (rest s))))","problem":25,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":25,"code":"(fn [lis] \n  (filter odd? lis)\n  )","user":"5c9f952ae4b048ec896c5b59"},{"code":"(fn [coll] (filter #(= (mod % 2) 1) coll))","problem":25,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [xs]\n  (loop [x xs\n         result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (if  (= (mod (first x) 2) 0) result (conj result (first x)))))))","problem":25,"user":"4e4ca885535dc968683fc4df"},{"code":"(fn [s]\n  (filter (fn [x] (= (mod x 2) 1)) s))","problem":25,"user":"500f4f2fe4b03ec779321689"},{"problem":25,"code":"(fn [list]\n  (filter \n   (fn [n] (= (mod n 2) 1)) list))","user":"5d6932e6e4b0db5d338d1609"},{"problem":25,"code":"(fn [origin-seq]\n  (concat '() \n          (filter odd? (vec origin-seq))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":25,"code":"(fn [seq]\n  (filter #(not= (mod % 2) 0) seq))","user":"56af99dfe4b061e3ca319ad5"},{"code":"filter odd?\n;#(filter odd? %)","problem":25,"user":"4fcc103fe4b0ee37620e185f"},{"problem":25,"code":"(fn [xs]\n  (filter #(= (mod %1 2) 1) xs))","user":"596296e9e4b066ee0a44b0b6"},{"problem":25,"code":"(fn [args] (filter odd? args))","user":"5632365ce4b0bfe05bf1179d"},{"problem":25,"code":"(fn [lst] (filter #(not= (rem % 2) 0) lst))","user":"5a8d1eade4b05369db4d2511"},{"code":"(fn [col]\n  (filter \n    #(= (mod % 2) 1)\n    col))","problem":25,"user":"517cc671e4b0bbbf1f12af0a"},{"code":"(fn foo [x]\n  (filter #(= 1 (mod % 2)) x)\n)","problem":25,"user":"4e932f38535dbda64a6f6b0c"},{"problem":25,"code":"(fn  [xs] (filter (fn [x] (= 1 (mod x 2))) xs))","user":"5572f74fe4b0aa18f790f3ef"},{"code":"(fn[x](filter #(= (mod % 2) 1) x))","problem":25,"user":"515919fbe4b0394f658fe229"},{"problem":25,"code":"(fn [l] (filter (fn [x] (= false (= 0 (mod x 2)))) l))","user":"58633954e4b0f14aab7c8819"},{"problem":25,"code":"(fn [items]\n      (filter #(=(mod % 2) 1) items))","user":"58d3d6a3e4b03c36ff7e592b"},{"code":"(fn [list] (reduce #(if (= 1 (rem %2 2)) (cons %2 %1) %1) '() (reverse list)))","problem":25,"user":"522afe78e4b0d34ee08e71b3"},{"problem":25,"code":"(fn [xs] (filter #(> (mod % 2) 0) xs))","user":"54305256e4b0dad94371f2d9"},{"problem":25,"code":"#(loop [od nil xs %]\n   (if (= (first xs) nil)\n     (reverse od)\n     (if (= (type 2) (type (/ (first xs) 2)))\n       (recur od (rest xs))\n       (recur (cons (first xs) od) (rest xs)))))","user":"58b989dbe4b0888cdc949ccd"},{"problem":25,"code":"(fn [s]\n (filter \n  #(not \n    (= \n     (mod % 2) 0)) s))\n;; blah blah blah","user":"5e29fb32e4b05b4b015161b2"},{"code":"(fn [col]\n  (filter odd? col)\n  )","problem":25,"user":"536827f1e4b0243289761e8a"},{"problem":25,"code":"(fn[l](filter #(= 1 (rem % 2)) l))","user":"5628a121e4b00e49c7cb47ed"},{"code":"(fn [lst] (for [x lst :when (= 1 (rem x 2))] x))","problem":25,"user":"50838c06e4b0902986d69e0f"},{"problem":25,"code":"(fn\n      [list]\n      (loop\n        [workList list\n         resultList []]\n        (if (empty? workList)\n          resultList\n          (if (= 1 (mod (first workList) 2))\n            (recur (rest workList) (conj resultList (first workList)))\n            (recur (rest workList) resultList)\n          )\n        )\n      )\n   )","user":"55f9b634e4b03cbcff9738c9"},{"code":"(fn find-odd [odd all]\n                   (if (empty? all)\n                     (reverse odd)\n                     (find-odd\n                      ;first-parameter\n                      (if (= (mod (last all) 2) 0)\n                        odd\n                        (conj odd (last all)))\n                      ;second parameter\n                      (butlast all)\n                      ))) []","problem":25,"user":"524a74b3e4b05ef8e38e64a7"},{"problem":25,"code":"filter #(->> (rem % 2) zero? not)","user":"56472c77e4b0284900eef617"},{"problem":25,"code":"(fn odd [sx] \n  (filter odd? sx))","user":"591208ede4b0163c97b36ee5"},{"code":"(fn [lista]\r\n  (filter #(not= 0 (mod % 2))\r\n          lista))","problem":25,"user":"50576483e4b001218172198b"},{"problem":25,"code":"(fn\n  [arr]\n  (filter #(> (rem % 2) 0) arr))","user":"5d2de4cde4b01671435dbca4"},{"code":"(fn [xs]\n  (filter #(not= (mod % 2) 0) xs))","problem":25,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":25,"code":"(fn [coll]\n  (filter #(not (= (mod % 2) 0)) coll))","user":"5d273ef8e4b092dab7f59c69"},{"code":"(fn odd [x]\n  (if (= x '())\n    '()\n    (if (= 1 (mod (first x) 2))\n      (conj (odd (rest x)) (first x))\n      (odd (rest x))\n      )\n    )\n  )","problem":25,"user":"52586d24e4b0cb4875a45cb0"},{"problem":25,"code":"(fn [listy]\n (filter (fn [x] (= 1 (mod x 2))) listy)\n  )","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [x] ( filter odd? x ))","problem":25,"user":"4e1203d5535d04ed9115e7cc"},{"problem":25,"code":"(fn [sequence]\n    (loop [in sequence result []]\n        (if (empty? in)\n            result\n            (recur\n                (rest in)\n                (if (= (rem (first in) 2) 1)\n                    (conj result (first in))\n                    result\n                )\n            )\n        )\n    )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":25,"code":"#(for [ x % :when (= 1 (mod x 2))] x)","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [lst] (filter odd? (list* lst)))","problem":25,"user":"504f43e9e4b0a02f9cffde64"},{"problem":25,"code":"(fn \n  [coll]\n\t(filter (fn [elem] \n             (= 1 (mod elem 2))) coll)\n  )","user":"561a9e3be4b053970a773b09"},{"code":"(fn [sq]\n  (filter (fn [x] (= 1 (mod x 2))) sq))","problem":25,"user":"5027f37be4b01614d1633ff1"},{"problem":25,"code":"(fn [seqq] (filter (fn [x] (= (rem (inc x) 2) 0)) seqq ))","user":"5bcd3c4de4b0e9689409edfa"},{"problem":25,"code":"filter #(= 1(mod % 2))","user":"57dba312e4b0bd073c202426"},{"code":"(fn [s] (filter #(== (mod % 2) 1) s))","problem":25,"user":"5123f099e4b02c3f2a072cca"},{"problem":25,"code":"(fn \n  [coll] \n  (filter #(= 1 (rem % 2)) coll))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"(fn [s] (loop [ms (seq s) mx '()] (if (= ms '()) (reverse mx) (recur (rest ms) (if (= (rem (first ms) 2) 0) mx (conj mx (first ms)))))))","problem":25,"user":"4e9629c2535dbda64a6f6b3f"},{"problem":25,"code":"(fn [xs] (filter #(< 0 (mod % 2)) xs))","user":"5b4cd94ce4b02d533a91bcb1"},{"code":"(fn [input]\n   (loop [result [] elements input]\n     (if (empty? elements)\n       result\n       (if (odd? (first elements))\n         (recur (conj result (first elements)) (rest elements))\n         (recur result (rest elements))\n         )\n       )\n     )\n     )","problem":25,"user":"5106dc1be4b01150e115ebf0"},{"code":"filter #(== 1 (mod % 2))","problem":25,"user":"4f03b3fb535dcb61093f6b52"},{"code":"(fn [col]\r\n  (filter odd? col))","problem":25,"user":"4e117dea535d04ed9115e7c9"},{"problem":25,"code":"(fn isolateOdds\n  [l]\n  (if (empty? l)\n    []\n    (concat\n      (if\n        (= (rem (first l) 2) 1)\n        [(first l)]\n        [])\n      (isolateOdds (rest l)))))","user":"5d10e07ae4b02c15ef02197f"},{"problem":25,"code":"(fn [list]\n  (lazy-seq (filter odd? list)))","user":"5f081f6de4b0cf489e8d7f5a"},{"code":"(fn [col] (filter #(= (mod % 2) 1) col))","problem":25,"user":"533f09e1e4b085b17e897d9a"},{"code":"(fn remove-even [x] (filter odd? x))","problem":25,"user":"4f54d82ae4b0a7574ea717ed"},{"problem":25,"code":"filterv #(= (mod % 2) 1)","user":"549f3f08e4b0f3d1d8e70faf"},{"code":"filter #( = (mod % 2) 1  )","problem":25,"user":"4fabc896e4b081705acca21f"},{"problem":25,"code":"(fn [e] (keep #(if (odd? %) %) e))","user":"56083383e4b046a4fc0ac00a"},{"code":"#(loop [todo (seq %) result '()]\n    (if (seq todo)\n      (if (odd? (first todo))\n        (recur (rest todo) (conj  result (first todo)))\n        (recur (rest todo) result))\n      (reverse result)))","problem":25,"user":"500e7063e4b04a05d36fcc07"},{"problem":25,"code":"(fn [my-list] (filter odd? my-list))","user":"559ed93ce4b0acc240e314e3"},{"code":"(fn [x] (keep #(if (odd? %) %) x))","problem":25,"user":"5314318ee4b08068f379ed13"},{"problem":25,"code":"(fn\n  [coll]\n  \n  (filter odd? coll))","user":"53b0ef3be4b047364c044489"},{"code":"(fn [l] (filter (fn [i] (= 1 (mod i 2))) l))","problem":25,"user":"511a31d0e4b09045b2b16941"},{"problem":25,"code":"#(loop [x % res []]   \n   (if (not= [] x)\n   (recur (rest x) (if (= 1 (rem (first x) 2)) (conj res (first x)) res))\n   res\n   ))","user":"594e3723e4b07ddc2dafaea8"},{"problem":25,"code":"(fn [lst]\n  (loop [in lst out []]\n    (cond (empty? in) out\n          :else (do\n                  (if (= (mod (first in) 2) 1) \n                    (recur (rest in) (conj out (first in))) \n                    (recur (rest in) out))))))","user":"57acee37e4b0b8559636fc94"},{"problem":25,"code":"filter (fn [x] (not= (rem x 2) 0))","user":"54e336f3e4b024c67c0cf7da"},{"problem":25,"code":"(fn my-odd-filter [s]\n  (filter #(= 1 (mod % 2)) s))","user":"56df5b74e4b0ca2494a095ed"},{"problem":25,"code":"(fn [sent]\n  (filter odd? sent))","user":"5f238a59e4b0f565ad99828d"},{"problem":25,"code":"(fn [list]\n   (filter #(odd? %) list))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":25,"code":"(fn find-odd\n  [s]\n  (filter odd? s)\n)","user":"602f56c5e4b0d5df2af22297"},{"code":"(fn [lst] (for [x lst :when (> (mod x 2) 0)] x))","problem":25,"user":"4f339c04e4b0d6649770a09c"},{"problem":25,"code":"#(keep (fn [x] \n         (if(odd? x)x)\n         )\n       %)","user":"5416aacce4b01498b1a719ff"},{"problem":25,"code":"#(loop [coll %\n        result '[]]\n   (if-not (empty? coll)\n     (let [head (first coll)]\n       (if (and (integer? head)\n                (odd? head))\n         (recur (rest coll) (conj result head))\n         (recur (rest coll) result)))\n     result))","user":"58ed0198e4b056aecfd47d72"},{"problem":25,"code":"(fn [seq]\n  (filter\n   (fn [el] (not (= 0 (mod el 2))))\n   seq))","user":"59a09b1de4b0871e7608b83a"},{"code":"(fn odd\n  [s]\n  (let [o (not (zero? (mod (first s) 2)))]\n    (if (nil? (first (rest s)))\n      (if o\n        s\n        (rest s))\n      (if o\n        (cons (first s) (odd (rest s)))\n        (odd (rest s))))))","problem":25,"user":"5263c44fe4b03e8d9a4a70b8"},{"problem":25,"code":"(fn [l]\n  (filter #(= (mod % 2) 1) l))","user":"55de6fb4e4b050e68259b3e1"},{"code":"(fn how-odd[x]\n  (if (empty? x)\n    '()\n    (if (= (mod (first x) 2) 0)\n      (how-odd (rest x))\n      (conj (how-odd (rest x)) (first x))\n    )\n  )\n)","problem":25,"user":"4ea1ecfa535d7eef308072bb"},{"problem":25,"code":"(fn oddNum [x]\n  (if (empty? x)\n    x\n    (if (= (mod (first x) 2) 1)\n       (conj (oddNum (rest x)) (first x))\n       (oddNum (rest x)))))","user":"5703d1fee4b08d47c97781fe"},{"problem":25,"code":"(fn [l] (filter #(= 1 (rem % 2)) l))","user":"57bfb321e4b05aa3c4741c83"},{"problem":25,"code":"(fn [vs] (filter odd? vs))","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":25,"code":"(fn [coll]\n  (loop [c coll\n         odds '()]\n    (if (empty? c)\n      (reverse odds)\n      (if (odd? (first c))\n        (recur (rest c) (conj odds (first c)))\n        (recur (rest c) odds)\n        )\n      )\n    )\n  )","user":"5e862cd7e4b09a7a73c8bbde"},{"code":"(fn fill-odd-seq [s]\n  (filter #(odd? %) s))","problem":25,"user":"4e6a2503535d8ccf87e9fea2"},{"problem":25,"code":"(fn [lst]\n   (loop [l lst r ()]\n      (cond\n         (empty? l) (reverse r)\n         (not (zero? (mod (first l) 2))) (recur (rest l) (cons (first l) r))\n         :else (recur (rest l) r))))","user":"5a653f80e4b0512ff01cd9b2"},{"problem":25,"code":"(fn func[l]\n  (loop [m (reverse l) acc ()]\n    (if (empty? m)\n      acc\n      (if (odd? (first m))\n        (recur (rest m) (cons (first m) acc))\n        (recur (rest m) acc)))))","user":"56039a9de4b04bb52996e1bf"},{"problem":25,"code":"(fn [x]\n  (filter #(= 1 (mod % 2)) x)\n)","user":"595ed97fe4b066ee0a44b051"},{"problem":25,"code":"(fn [coll]\n    (loop [acc '() coll coll]\n      (if (empty? coll)\n        (reverse acc)\n        (if (odd? (first coll))\n          (recur (conj acc (first coll))\n                 (rest coll))\n          (recur acc (rest coll))))))\n\n;;#(filter odd? %)","user":"529e3258e4b04e0c58e87b8d"},{"code":"(fn [ns] \r\n    (filter #(not= 0 (mod % 2)) ns))","problem":25,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [col] (filter #(= 1 (mod % 2 ) ) col))","problem":25,"user":"4ea8f887535d7eef30807300"},{"code":"#(reduce \n  (fn [odds number]\n    (if (= (mod number 2) 0)\n      odds\n      (conj odds number))) \n  \t[] %)","problem":25,"user":"53847a4ce4b06839e8705ef3"},{"code":"(fn [x] (filter (fn [y] (if-not (= 0 (mod y 2)) true nil)) x))","problem":25,"user":"52747090e4b03e8d9a4a74a5"},{"code":"filter #(= 1 (rem % 2))","problem":25,"user":"4e059278535d04ed9115e7a5"},{"problem":25,"code":"#(filter (fn [n]\n           (= 1 (mod n 2)))\n         %)","user":"5430b3b6e4b0dad94371f2db"},{"problem":25,"code":"(fn [l] (filter #(= 1 (mod % 2) ) l) )","user":"5ce45b5be4b0a17bb84e2b5b"},{"problem":25,"code":"(fn odd-nos [sequence] (filter odd? sequence))","user":"5ac37d0fe4b0e27600da7718"},{"code":"filter (comp not false? odd?)","problem":25,"user":"527188cee4b03e8d9a4a73f6"},{"problem":25,"code":"(fn oddSeq [s]\n  (flatten\n   ((fn [se oddList]\n      (if (seq se)\n        (if (odd? (first se))\n          (recur (rest se) (list oddList (first se)))\n          (recur (rest se) oddList))\n        oddList))\n   s ())))","user":"556b67c9e4b09a3098a524ed"},{"problem":25,"code":"(fn [sq] (filter (fn [x] (not= (mod x 2) 0)) sq))","user":"54636b05e4b01be26fd746c0"},{"problem":25,"code":";;filter #(= (mod % 2) 1)\nfilter odd?","user":"5edb07dde4b0c7845d86b0ed"},{"problem":25,"code":"(fn [seq]\n  (filter #(= (unchecked-remainder-int % 2) 1) seq))","user":"5601cd19e4b04bb52996e197"},{"problem":25,"code":";; (fn [coll] (filter odd? coll))\n(partial filter odd?)","user":"5b71ee18e4b047b03b20369b"},{"problem":25,"code":"reduce (fn [x y] (if (odd? y) (concat x [y]) x)) []","user":"59663e77e4b069c0a1a1979f"},{"problem":25,"code":"#(filter (fn [num] (not (zero? (mod num 2)))) %)","user":"5e41c371e4b01d43a70e8e59"},{"code":"#(for [v % :when (odd? v)] v)","problem":25,"user":"515ef58be4b02c55805ea237"},{"problem":25,"code":"(fn \n  [coll]\n    (filter #(= 1 (mod % 2))(seq coll)))","user":"56618424e4b068f2fe63dc67"},{"problem":25,"code":"(fn \n  [lst] \n  (filter odd? lst))","user":"57f81532e4b0d3187e900914"},{"problem":25,"code":"#(filter (fn [elem] (not= 0 (mod elem 2))) %)","user":"56438342e4b0018b46ad8bf4"},{"code":"(partial remove #(zero? (mod % 2)))","problem":25,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":25,"code":"#(loop [odd_list [] input_seq %1]\n    (if (empty? input_seq)\n      (reverse odd_list)\n      (if (even? (first input_seq))\n        (recur odd_list (rest input_seq))\n        (recur (cons (first input_seq) odd_list) (rest input_seq)))))","user":"5901731ae4b0438e51c2d03d"},{"problem":25,"code":"(fn [toFilter] (filter odd? toFilter))","user":"5220def1e4b0e6a83c8925b4"},{"problem":25,"code":"(fn [xs] (filter #(= (mod % 2) 1)xs) )","user":"56d137d8e4b0ea9b8538f78a"},{"problem":25,"code":"(fn [arr]\n  (loop [acc (empty arr) prod arr]\n    (if (= (first prod) nil)\n      acc\n      (if(odd? (first prod))\n              \t(recur (concat acc [(first prod)]) (rest prod))\n              \t(recur acc (rest prod))))))","user":"5dcbd629e4b02b31cc3da3bd"},{"problem":25,"code":"(fn [s]\n  (filter #(= 1 (rem % 2)) s)\n  )","user":"6074f5ede4b069485764de52"},{"code":"(fn [b]\n  (reverse \n    ((fn [r a]\n      (if (empty? a)\n        r\n        (if (= (rem (first a) 2) 1)\n          (recur (conj r (first a)) (rest a))\n          (recur r (rest a)))))\n      '()\n      b)))","problem":25,"user":"509f3bc9e4b08df8156e9e39"},{"code":"(fn [y] (remove nil? (map #(if (= (mod % 2) 1) %) y)))","problem":25,"user":"51fc44c5e4b0f1313d468a1b"},{"code":"(fn [x] ( filter #(odd? %) x))","problem":25,"user":"5254f908e4b0541d1855b9ba"},{"code":"(fn oddF [x]\n   (if (= () x) ()\n  (if (= 1 (rem (first x) 2) ) (conj (oddF (rest x))  (first x)  ) (oddF (rest x)) ) \n     )\n)","problem":25,"user":"518aec06e4b06da86c1973c2"},{"code":"filter #(= (mod % 2) 1)\n\n#_(fn [xs]\n  (loop [x xs\n         y []]\n    (if (empty? x)\n      y\n      (recur (rest x)\n             (if (= (mod (first x) 2) 1)\n               (conj y (first x))\n               y)))))","problem":25,"user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [s] \n  (filter #(not= (rem % 2) 0) s))","problem":25,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn [seq] (filter #(= (rem % 2) 1) seq))","problem":25,"user":"4f039a8b535dcb61093f6b36"},{"code":"(fn odd [x] (filter #(= 1 (mod % 2)) x))","problem":25,"user":"500cf638e4b05f7c30cfa69d"},{"code":"(fn [coll] (filter #(= 1 (mod % 2)) coll))","problem":25,"user":"4e7f7e48535db966e863cc42"},{"problem":25,"code":"(fn [coll] \n  (filter\n   \t#(= (mod % 2) 1)\n    coll))","user":"553d25bae4b0a04f792994dd"},{"problem":25,"code":"(fn [xs]\n  (filter odd? xs)\n  )","user":"55b28b57e4b01b9910ae296c"},{"problem":25,"code":"(fn [$, xs]\n  (if (= '() xs)\n    $\n    (recur \n      (concat $ (if (= (mod (first xs) 2) 1)\n                  [(first xs)]\n                  '()))\n      (rest xs)\n    )\n  )\n)\n\n'()","user":"53dbc8bee4b094d41abdfef5"},{"problem":25,"code":"(fn get_odds [collection]\n  (if (= collection [])\n    (list)\n    (if (= (mod (first collection) 2) 1)\n       (conj (get_odds (rest collection)) (first collection))\n       (get_odds (rest collection)))))","user":"58e980dfe4b056aecfd47d0b"},{"problem":25,"code":"#(filter (comp odd?) %)","user":"5e121a89e4b099d064962fe4"},{"problem":25,"code":"filter (fn [k] (odd? k))","user":"5548dacde4b0a04f79299561"},{"problem":25,"code":"(fn find_odds\n  [coll]\n  (filter (fn [x] (= (mod x 2) 1)) coll))","user":"53de4bdae4b0d874e779ae32"},{"problem":25,"code":"(fn [coll]\n  (reduce\n   (fn [result elem]\n     (if (not (zero? (mod elem 2)))\n       (conj result elem)\n       (vec result)))\n   []\n   coll))","user":"54f53d3ce4b0f2f3c5226e90"},{"problem":25,"code":"(fn [ls]\n  (for [x ls\n    :let [y x]\n    :when (odd? x)]\n    y))","user":"5d125d63e4b02c15ef021999"},{"code":"(fn [coll] (filter (fn [n] (odd? n)) coll))","problem":25,"user":"4fc4f668e4b081705acca362"},{"problem":25,"code":"(fn odds [xs] (filter #(odd? %) xs))","user":"57cf9de8e4b00451144b0503"},{"problem":25,"code":"#(reduce (fn [r x] (if (even? x) r (conj r x)))\n         []\n         %)","user":"5a1eea9be4b0ff51aa4b327b"},{"code":"(fn [coll] (filter odd? coll))","problem":25,"user":"4e03f4bd535d04ed9115e79a"},{"problem":25,"code":"#(filter (fn [x] (> (mod x 2) 0) ) %)","user":"55c5820be4b0e31453f649b0"},{"code":"(fn [xs] (filter #(= (mod %1 2) 1) xs))","problem":25,"user":"4fa78336e4b081705acca1c4"},{"problem":25,"code":"(fn oddo [x] (cond (empty? x) x\n                   (not (= 0 (mod (first x) 2)))\n                   (conj\n                       (oddo (rest x)) \n                   (first x))\n              true (oddo (rest x)) \n                    ))","user":"579b24d0e4b05b1deef9adee"},{"problem":25,"code":"(fn [seq]\n  (loop [lst seq, odds []] \n    (if (empty? lst)\n  \todds\n    (recur (rest lst)\n           (do \n             (if (odd? (first lst))\n               (conj odds (first lst))\n             odds))))))","user":"555c78abe4b0b056612e224f"},{"code":"(fn [coll] (filter #(= 1 (rem % 2)) coll))","problem":25,"user":"52fcfeeee4b047fd55837027"},{"code":"(partial filter #(== (mod %1 2) 1)\n         \n         )","problem":25,"user":"52717a1de4b03e8d9a4a73f2"},{"code":"filter  #(= (mod % 2) 1)","problem":25,"user":"4eaede1f535d7eef30807329"},{"problem":25,"code":"(fn [x] (loop [index 0 output '() currentColl x] (if (= index (count x)) (reverse output) (recur (+ 1 index) (if (= (mod (first currentColl) 2) 0) output (list* (first currentColl) output)) (rest currentColl)))))","user":"5924009ce4b072a2710fce45"},{"problem":25,"code":"#(filter (fn [integer] (odd? integer)) %)","user":"5ac51c43e4b0e27600da773b"},{"code":"(partial filter (comp not even?))","problem":25,"user":"4f614976e4b0defedf855fbb"},{"code":"(fn [s]\n  (filter (fn [v] (not (= 0 (mod v 2)))) s))","problem":25,"user":"5312452be4b08068f379ecf8"},{"problem":25,"code":"(fn odd [lst]\n  (filter odd? lst))","user":"59e12c94e4b08badc2a0c509"},{"problem":25,"code":"(fn [xs] (reduce (fn [xsi x](if (odd? x) (conj xsi x) xsi)) [] xs))","user":"56c23de0e4b05cc29241ee80"},{"code":"(partial filter #(not (= 0 (mod % 2))))","problem":25,"user":"4e2edb0e535deb9a81d77f0d"},{"problem":25,"code":"#(filter   odd? % )","user":"5f737899e4b02876ed9fd099"},{"code":"(fn odds [x] (filter (fn [y] (not (= 0 (mod y 2)))) x))","problem":25,"user":"50ff5887e4b017584cb41ccd"},{"problem":25,"code":"#( filter (fn [x] (= 1 (rem x 2))) %)","user":"58d4efbde4b03c36ff7e594e"},{"code":"(fn [list] (for [x list :when(= 1 (rem x 2))] x))","problem":25,"user":"529862dfe4b02ebb4ef75055"},{"code":"(fn [x]\n  (filter #(not (even? %1)) x))","problem":25,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn [s] (filter #(not (= 0 (rem % 2))) s))","problem":25,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"#(filter (\n  fn [itm] (if (not= (mod itm 2) 0 ) itm) \n   ) %)","problem":25,"user":"4f9a0f71e4b0dcca54ed6d04"},{"code":"(fn ! [x] (if(= (count x) 0) '() (if(=(mod (first x) 2) 1)  (cons (first x) (!(rest x)) )  (!(rest x))   ) ))","problem":25,"user":"5139c00ee4b067e25a345ebc"},{"problem":25,"code":"(fn [param]\n  (filter #(= (mod % 2) 1) param)\n)","user":"54d35746e4b0e8a36923e606"},{"problem":25,"code":"(fn [x]\n  (filter\n  \t#(odd? %)\n   \tx\n  )\n)","user":"59c72175e4b0a024fb6ae53c"},{"code":"(fn [x]\n  (filter #(odd? %) x)\n)","problem":25,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":25,"code":"(fn count-items [col] \n  (filter #(not= (mod % 2) 0) col))","user":"58daae01e4b0a4d5acaab664"},{"problem":25,"code":"(\tfn\n  [set]\n  (filter odd? set))","user":"5d615431e4b0c9e5857d5010"},{"problem":25,"code":"(fn [the-seq] (filter odd? the-seq) )","user":"5d66aea7e4b0db5d338d15ec"},{"problem":25,"code":"(fn [x] (sort (reduce (fn [x y] (if (= (rem y 2) 1) (conj x y) x)) () x)))","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn myodd [l]\n  (if (= l '())\n    '()\n    (if (not= 0 (mod (first l) 2))\n        (cons (first l) (myodd (rest l)))\n        (myodd (rest l)))))","problem":25,"user":"4ecaf637535d6d7199dd370c"},{"problem":25,"code":"(fn [lst]\n  (filter #(= 1 (mod % 2)) lst)\n )","user":"59333f35e4b072a2710fd04c"},{"code":"(fn [xs]\n  (let [odd #(= 1 (rem % 2))]\n    (filter odd xs)))","problem":25,"user":"4fef439ce4b0678c553fc313"},{"code":"(fn [ s ] \n    (filter odd? s) \n)","problem":25,"user":"4fdf750be4b05e33b9224f9c"},{"code":"#(filter (fn odd-test ([n] (= 1 (mod n 2))))\n           \n           %)","problem":25,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":25,"code":";filter #(= (mod % 2) 1)\n\nfilter odd?","user":"57533bc1e4b02ea1147992a6"},{"code":"(fn [c]\n  (filter #(odd? %) c))","problem":25,"user":"4fd0d058e4b04c3a95aa0408"},{"problem":25,"code":"#(filter \n  (fn [i] (= (mod i 2) 1)) %)","user":"578df8fee4b0ebec4cfb7574"},{"problem":25,"code":"(fn [a]\n  (filter #(= (rem %1 2) 1) a))","user":"5ca26d3be4b048ec896c5b98"},{"code":"filter (complement even?)","problem":25,"user":"51b1e924e4b02f8f128bb95b"},{"problem":25,"code":"(fn odd [x]\n  (if (empty? x)\n    '()\n    (if (odd? (first x))\n     (conj (odd (rest x)) (first x))\n     (odd (rest x))\n    )\n  )\n)","user":"53b12c76e4b047364c04448a"},{"code":"(fn [seq]\n  (filter #(= (mod % 2) 1) seq))","problem":25,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn [x] (loop [sq x odd []] (if (empty? sq) (reverse odd) (recur (rest sq) (if (= 1 (mod (first sq) 2)) (cons (first sq) odd) odd)))))","problem":25,"user":"51b77c9be4b0d906fcd71d37"},{"code":"#(filter (fn[x](odd? x)) %)","problem":25,"user":"52419ee6e4b076e5d3121f22"},{"code":"(fn odd [s] (filter odd? s))","problem":25,"user":"50ad274be4b00424fd5bf71e"},{"problem":25,"code":"(fn find-odd-numbers [col]\n  (filter odd? col))","user":"5f24671fe4b0f565ad998291"},{"code":"(fn [l]\n  (filter #(> (mod % 2) 0) l))","problem":25,"user":"4f22e667e4b0d66497709fdb"},{"problem":25,"code":"(fn [l]\n  (filter #(not= (rem % 2) 0) l))","user":"564d7434e4b0284900eef680"},{"problem":25,"code":"(fn [n]\n    (loop [n n, res '()]\n        (if (seq n)\n            (if (odd? (first n))\n                (recur (rest n) (concat res (list (first n))))\n                (recur (rest n) res))\n            res)))","user":"5a640a37e4b0512ff01cd9a2"},{"code":";#(filter odd? %)\nfilter odd?","problem":25,"user":"50d4c626e4b09cc622d65a70"},{"code":"(fn my-odd [x]\n  (loop [x x acc []]\n    (if (empty? x)\n      acc\n      (let [head (first x)]\n        (if (= 1 (mod head 2))\n          (recur\n            (rest x)\n            (conj acc head))\n          (recur (rest x) acc))))))","problem":25,"user":"535a170ae4b04ce2eb3ed2a3"},{"problem":25,"code":"reduce #(if (odd? %2) (concat %1 [%2]) %1) []","user":"5517f5c5e4b06a49daca83c7"},{"code":"(fn [x]\n  (remove\n    (fn [y] (= 0 (mod y 2)))\n    x))","problem":25,"user":"4e56cff0535d8a8b8723a285"},{"code":"(fn [x] (filter #(odd? %1) x))","problem":25,"user":"4f7b2cb5e4b06e829148e19f"},{"code":"(fn [xs] (filter #(= 1 (rem % 2)) xs))","problem":25,"user":"4e50ad74535dc968683fc4ec"},{"problem":25,"code":"(fn [ar] (filter #(= (mod % 2) 1) ar))","user":"57a2d35be4b0c3d858beb907"},{"code":"(fn [h] (filter odd? h))","problem":25,"user":"4f831dd2e4b033992c121c16"},{"problem":25,"code":"#(loop [old-sq %1 odd-sq []]\n  (prn \"old:\" old-sq \", odd-sq:\" odd-sq)\n  (if (nil? (first old-sq))\n    (identity odd-sq) ;yes\n    (recur (rest old-sq) (if (odd? (first old-sq))\n                           (concat odd-sq (take 1 old-sq))\n                           odd-sq))))","user":"5cea925ce4b0a17bb84e2bd2"},{"problem":25,"code":"(fn [items]\n  (filter\n   #(not(= 0 (mod % 2))) \n   items))","user":"5975ed26e4b01722bebd4cd0"},{"code":"(fn[m](for [x m :when (odd? x)]\n         x))","problem":25,"user":"52f3124ee4b05e3f0be25f0a"},{"code":"(fn filter-odd [list] (filter #(not= (mod % 2) 0) list ))","problem":25,"user":"5184df3ee4b02826a645f39b"},{"code":"filter (fn [y] (= 1 (mod y 2 )  ))","problem":25,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":25,"code":"(fn find-odd\n  [s]\n  (filter #(odd? %) s))","user":"597a7418e4b02382a38ad1e9"},{"code":"(partial filter (fn [n] (= (mod n 2) 1)))","problem":25,"user":"5245e25ae4b09dbe66b56176"},{"problem":25,"code":"filter (fn [a] (= (rem a 2) 1))","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [l] (filter #(= (rem % 2) 1) l ))","problem":25,"user":"52d92f13e4b09f7907dd13a2"},{"code":"(fn [lst]\n  (loop [lst lst l '()]\n    (if (empty? lst) l\n      (recur (butlast lst) (if (even? (last lst)) l (conj l (last lst))))\n             )))","problem":25,"user":"52718620e4b03e8d9a4a73f5"},{"code":"(fn myfilter [x] (filter (fn filtercheck [x] \n                           (not= 0 (mod x 2))\n                           )\n                         x)\n  )","problem":25,"user":"537a620be4b06839e8705e5f"},{"problem":25,"code":"reduce (fn [acc ele] (if (odd? ele) (conj acc ele) acc)) []","user":"561d8936e4b064ca9f4b16b2"},{"problem":25,"code":"(fn [zeq] (filter odd? zeq))","user":"5ea97df7e4b00a66d4a951c8"},{"problem":25,"code":"filter (fn [num] (= 1 (mod num 2)))","user":"5d88c6a3e4b0915913b1d3ad"},{"problem":25,"code":"(fn [_] (filter odd? _))","user":"53e1040be4b0d874e779ae4e"},{"code":"#(filter (fn [x]\n          (= 1 (rem x 2))) % )","problem":25,"user":"51a3738ce4b0e77c4ca60bf0"},{"code":"(fn [s] \n  (loop [acc [] xs s]\n    (if (empty? xs) acc \n      (recur (if (odd? (first xs)) (conj acc (first xs)) acc) (rest xs)))))","problem":25,"user":"52199105e4b0c4ef0be82ff9"},{"code":"#(filter (fn [arg] (not (even? arg))) %)","problem":25,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":25,"code":"#(->> % (filter odd?) (into[]))","user":"5f0c3da4e4b0f30dddfb5d49"},{"code":"(fn [x] (filter (fn [n] (not (even? n))) x))","problem":25,"user":"51107e6ee4b04c71fce993f2"},{"problem":25,"code":"(\n\tfn function [var] \n  \t(\n    \tfilter odd? var\n    )\n)","user":"548018e8e4b0c51c1f4d7333"},{"code":"#(filter (fn [x] (not= 0 (mod x 2))) %)","problem":25,"user":"4e6f1b7a535d5021c1a89618"},{"code":"filter (fn [x] (if (= 1 (mod x 2)) x))","problem":25,"user":"50f9776be4b0e7c80cb15a4e"},{"problem":25,"code":"filter (fn[x](= 1 (mod x 2)))","user":"572af688e4b0f4d77e651249"},{"problem":25,"code":"filter (fn [a] (= 1 (rem a 2)))","user":"5e33077be4b0650de70e2b03"},{"problem":25,"code":"#(\n  filter odd? %)","user":"5e639b4be4b0fd0acd1586a2"},{"problem":25,"code":"(fn  \n\t[inputThing]\n\n\t(loop [i 0  tmpList (into [] inputThing) rstList []]\n\t\t(if (= (count  tmpList) i)\n\t\t\trstList\n\t\t\t(do\n\t\t\t\t(println (= (rem (nth tmpList i) 2) 0))\n\t\t\t\t(if (= (rem (nth tmpList i) 2) 1)\n\t\t\t\t\t(recur (inc i) tmpList (conj rstList (nth tmpList i) ))\n\t\t\t\t\n\t\t\t\t\t(recur (inc i) tmpList rstList)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n\t)","user":"5d8b3d5be4b0915913b1d3d1"},{"code":"(fn [lst] (filter #(not (even? %)) lst))","problem":25,"user":"4ec6c878535d6d7199dd36d5"},{"code":"(fn [int-list] (filter identity (map (fn[x] (if (not (= (mod x 2) 0)) x nil)) int-list)))","problem":25,"user":"4ec12516535dfed6da9c6da7"},{"problem":25,"code":"(fn [coll] (remove #(even? %1) coll))","user":"5fc51d88e4b0ad564c76812a"},{"problem":25,"code":";; filter #(= 1 (mod % 2))\nfilter odd?","user":"56df9203e4b0ca2494a095fc"},{"problem":25,"code":"#(reverse (reduce (fn [acc x]\n                         (if (odd? x)\n                           (conj acc x)\n                           acc))\n                       '() %))","user":"56f35fafe4b046a417f92051"},{"problem":25,"code":"(fn [ls]\n  (letfn ((iter [ls1 ret]\n                (if (empty? ls1)\n                  (reverse ret)\n                  (if (odd? (first ls1))\n                    (iter (rest ls1) (conj ret (first ls1)))\n                    (iter (rest ls1) ret)))))\n    (iter ls '())))","user":"53b7850ee4b047364c0444d0"},{"code":"filter #(= (rem % 2) 1)","problem":25,"user":"4e6a4ab9535d8ccf87e9fec2"},{"code":"(fn \n  [coll]\n  (filter odd? coll)\n  )","problem":25,"user":"513dfe2ce4b0825f97f7f966"},{"code":"(fn [n]\r\n    (loop [acc '() cnt (apply vector n)]\r\n       (if (empty? cnt)\r\n            acc\r\n          (recur (if (odd? (last cnt)) (conj acc (last cnt)) acc) (pop cnt)))))","problem":25,"user":"4f9336ece4b0dcca54ed6cb7"},{"code":"(fn [x] \n  (filter #(odd? %) x))","problem":25,"user":"4e7dcdb5535db169f9c796e9"},{"code":"filter #(-> % (mod 2) zero? not)","problem":25,"user":"4ff6aea8e4b0678c553fc381"},{"problem":25,"code":"(fn filter-odd [items] \n  (filter (fn [x] (not= (rem x 2) 0)) items))","user":"5d652873e4b0db5d338d15ce"},{"problem":25,"code":"filter (fn[v](= (mod v 2) 1))","user":"55f9d870e4b03cbcff9738cc"},{"problem":25,"code":"(fn [lista]\n  (filter \n   (fn [elem] (= (mod elem 2) 1)) lista))","user":"56bb27e2e4b0f2655033594f"},{"problem":25,"code":"(fn [v] (filter (fn[x] (= (mod x 2) 1)) v))","user":"5a7ae674e4b03baeef9276d5"},{"problem":25,"code":"(fn findodd\n  [s]\n  (filter #(not= 0 (mod % 2)) s))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":25,"code":"(fn odz [x] (filter #(= (mod % 2) 1) x))","user":"55b7df63e4b01b9910ae29b3"},{"code":"filter #(=(mod % 2)1)","problem":25,"user":"4ec6cd4f535d6d7199dd36d7"},{"problem":25,"code":"(fn [c] (filter #(= (mod % 2) 1) c))","user":"53ced1d5e4b00fb29b2212f7"},{"problem":25,"code":"(fn [coll]\n  (filter #(if (> (mod % 2) 0) \n              true \n              false) coll))","user":"56407cdee4b08d4f616f5ee4"},{"code":"#( filter odd? %1)","problem":25,"user":"4ebbb6bc535dfed6da9c6d71"},{"code":"filter (fn [x] (= (mod x 2) 1))","problem":25,"user":"4e6ff01e535d5021c1a8962b"},{"problem":25,"code":"#(or (get (group-by odd? %) true) [])","user":"55ed1575e4b0121d4835fdd3"},{"problem":25,"code":"#(filter(fn[x](odd? x))%)","user":"551ed214e4b08d5046aa8a4d"},{"code":"#(for [x %\n      :when (odd? x)]\n      x)","problem":25,"user":"4fe9d647e4b0547ebccb2472"},{"problem":25,"code":"(fn [xs] (filter (fn [i] (= (mod i 2) 1)) xs))","user":"5a5800e1e4b05d388ecb6c76"},{"code":"(partial filter (fn [n] (not= (rem n 2) 0)))","problem":25,"user":"5340c4f6e4b085b17e897db0"},{"code":"(fn findodds [l] (filter #(= 1 (mod % 2)) l))","problem":25,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"(fn [x] \n  (loop [res (), y (reverse x)]\n          (cond (= y ()) res\n            (zero? (mod (first y) 2)) (recur res (rest y) )\n            :else (recur (conj res (first y)) (rest y)))))","problem":25,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [x] (filter #(= (mod % 2) 1) x))","problem":25,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":25,"code":"(fn [my-seq]\n    (filter\n        (fn [number] (not (zero? (mod number 2))))\n        my-seq))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn [coll] (for [el coll :when(odd? el)] el))","problem":25,"user":"52c00e4fe4b07a9af5792342"},{"problem":25,"code":"(fn[s] (filter #(= (mod % 2) 1) s))","user":"53d0f7bbe4b00fb29b22130e"},{"code":"(fn [v]\n\t(filter (fn [x]\n             (if (odd? x)\n               x\n               nil\n               )) v)\n)","problem":25,"user":"51215927e4b05ae5a5823c10"},{"problem":25,"code":"#(filter (fn [val] (odd? val))\n          %)","user":"57700f88e4b0979f89651597"},{"code":"(fn [x]\n  (filter #(= 1 (mod % 2)) x))","problem":25,"user":"4ff9ea75e4b0678c553fc3b3"},{"code":"filter (complement #(= (rem % 2) 0))","problem":25,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":25,"code":"(fn odd [x] (if (empty? x) x (if (= (mod (first x) 2) 1) (conj (odd (rest x)) (first x)) (odd (rest x)))))","user":"5528a8cae4b0ffed3738f940"},{"code":"(fn [l] (filter #(= (rem % 2) 1) l))","problem":25,"user":"4f82e741e4b033992c121c0d"},{"problem":25,"code":"(fn [array]\n  (filter odd? array)\n  )","user":"55240916e4b0882d96d091b6"},{"code":"filter (fn [num] (not (= (mod num 2) 0)))","problem":25,"user":"4defd021535d08e6dec9fe13"},{"problem":25,"code":"(fn [l]\n  (filter #(not (zero? (mod % 2))) l))","user":"5c6748f0e4b0fca0c16226b6"},{"code":"(fn [s]\r\n  (loop [s s, r []]\r\n    (if (= [] s)\r\n      r\r\n    (recur (rest s) \r\n      (if (odd? (first s)) \r\n        (conj r (first s))\r\n      r)))))","problem":25,"user":"4eb6d3ab535d7eef30807370"},{"code":"(fn isodd [x]\n  (if (empty? x)\n  '()\n  (if (odd? (first x))\n  (cons (first x) (isodd (rest x)))\n  (isodd (rest x)))))","problem":25,"user":"4f04256d535dcb61093f6ba7"},{"problem":25,"code":"(fn odd-numbers [lat]\n(filter odd? lat))","user":"585a9a16e4b0f14aab7c8752"},{"code":"(fn odd-numbers\n  [coll]\n  (reduce (fn [acc x] (if (odd? x) (conj acc x) acc)) [] coll))","problem":25,"user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [l] (filter (fn [x] (not (= (rem x 2) 0))) l))","problem":25,"user":"52a82661e4b0c58976d9ac29"},{"problem":25,"code":"#(filter odd? % )","user":"53bf6962e4b0c98a41f5cca2"},{"problem":25,"code":"(partial filter #(not (= (mod % 2) 0)))","user":"5c4058a2e4b08cd430848eae"},{"code":"( fn [x]\n  (filter (fn [y] (= (mod y 2) 1 )) x)\n  ); function","problem":25,"user":"504e4ac2e4b0f6ff3350c49a"},{"code":"(fn [xs] (filter #(> (rem % 2) 0) xs))","problem":25,"user":"502aaadee4b0614b52996117"},{"code":"filter (fn [x] (odd? x))","problem":25,"user":"4e010277535d04ed9115e78f"},{"problem":25,"code":"(fn [s] \n  (filter #(= (mod % 2) 1) s))","user":"5701f886e4b08d47c97781d9"},{"code":"#(->> % (filter odd?))","problem":25,"user":"4e1b8106535d04ed9115e801"},{"problem":25,"code":"(fn [coll]\n    (filter\n      (fn [value] (= (rem value 2) 1))\n      coll))","user":"579dd954e4b05b1deef9ae1b"},{"problem":25,"code":"(fn xxx [xs]\n  (filter odd? xs))","user":"59dec79ee4b01968742fed81"},{"code":"(fn [s]\n  (filter #(= 1 (mod % 2)) s))","problem":25,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"filter #(== (mod % 2) 1)","problem":25,"user":"4e89de60535d3e98b8023285"},{"code":"(fn [coll] (filter #(not= (mod %1 2) 0) coll))","problem":25,"user":"4f1872a2535d64f60314645a"},{"problem":25,"code":"(fn [coll]\n  (reverse (reduce (fn [current number] \n            (if (odd? number)\n              (cons number current)\n              current)) '() coll)))","user":"5f388489e4b0574c87022c69"},{"problem":25,"code":"(fn[x](for[y x :when(odd? y)]y))","user":"5826a843e4b051871117befd"},{"code":"(fn [coll]\n  (loop [odd '() c coll]\n    (cond (empty? c) (reverse odd)\n          (odd? (first c)) (recur (cons (first c) odd) (rest c))\n          :else (recur odd (rest c)))))","problem":25,"user":"51991a89e4b068aa333628fd"},{"code":"filter (fn [s] (= 1 (rem s 2)))","problem":25,"user":"523361d8e4b0f0b72fabf405"},{"code":"(fn [l] (filter #(odd? %) l))","problem":25,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":25,"code":"(fn [d]\n  (filter odd? d))","user":"5bcee7d9e4b0e9689409ee22"},{"code":"reduce (fn [a b] (if (= 1 (rem b 2)) (conj a b) a)) []","problem":25,"user":"4fb86dc9e4b081705acca2d8"},{"problem":25,"code":"#(for [x % :when (not (even? x))] x)","user":"5505d137e4b086ebe8a79c8c"},{"code":"(fn [coll]\n  (loop [all coll\n         e-coll nil]\n    (cond (empty? all) (reverse e-coll)\n          (= 1 (mod (first all) 2)) (recur (next all)\n                                           (cons (first all) e-coll))\n          :else (recur (next all) e-coll))))","problem":25,"user":"5346f409e4b084c2834f4a46"},{"problem":25,"code":"reduce (fn [xs x] (if (odd? x) (conj xs x) xs)) []","user":"53d6bc2fe4b0e771c302545a"},{"problem":25,"code":"(fn [l] \n  (filter \n    #(= (mod % 2) 1) \n    l))","user":"55cde24ae4b0e31453f64a23"},{"code":"(fn ([arg] (filter (fn ([x] (not (= 0 (mod x 2))))) arg)))","problem":25,"user":"4f7d065ce4b06e829148e1b9"},{"problem":25,"code":"(fn find-odd [x]\n  (filter odd? x))","user":"5a38b82ee4b001c08efc0ca5"},{"code":"reduce (fn [a b] (if (= (mod b 2) 1) (conj a b) a)) []","problem":25,"user":"5251b11be4b0541d1855b87b"},{"problem":25,"code":"(fn findodd [x]\n  (filter #(not (= (mod % 2) 0))\n          x))","user":"57614a42e4b0994c1922fb85"},{"code":"(fn odds [x] (filter odd? x))","problem":25,"user":"4f1887ef535d64f60314645b"},{"code":"(fn [x]\n  ((fn [y result]\n    (if (empty? y) \n        (reverse result)\n        (recur (rest y)\n                (if (not (even? (first y)))\n                  (conj result (first y))\n                  result))))\n    x '()))","problem":25,"user":"4e73a9dc535dff18050a9c77"},{"problem":25,"code":"(fn f[x](filter #(=(mod % 2)1)x))","user":"5b3e3c1ce4b02d533a91bbff"},{"code":";(fn [s]\n;  (filter #(= 1 (mod % 2)) s))\nfilter odd?","problem":25,"user":"534da51fe4b084c2834f4aa4"},{"problem":25,"code":"(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (if-not (zero? (mod (first s) 2))\n        (recur (rest s) (conj res (first s)))\n        (recur (rest s) res))\n      res)))","user":"5a481e05e4b05d388ecb6b64"},{"code":"(fn [lst] (filter (fn [x] (= (mod x 2) 1)) lst))","problem":25,"user":"4eb6f065535d7eef30807372"},{"problem":25,"code":"#(filter (fn[x](not= 0 (rem x 2)))%)","user":"5b044436e4b0cc2b61a3bd71"},{"problem":25,"code":"( fn [ls] (filter #(= (mod %1 2) 1) ls))","user":"5654e024e4b0f9d632dd848d"},{"problem":25,"code":"(fn [l]\n   (filter (fn [_] (= (mod _ 2) 1)) l))","user":"590b3aeae4b047aa04b199d0"},{"problem":25,"code":"(fn lstOdd\n  [lst]\n  (if (empty? lst)\n    nil\n    (loop [lst (seq lst)\n           resul ()\n           ]\n      (if (empty? lst)\n        (reverse resul)\n        (if (odd? (first lst))\n          (recur (rest lst) (cons (first lst) resul))\n          (recur (rest lst) resul)\n          )\n        )\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"problem":25,"code":"(fn [coll] (filter odd? coll )  )","user":"5ddbd202e4b0948ae9d9adb4"},{"code":"(fn [col]\n           ((fn rec [col res]\n                (if (= col ())\n                    (reverse res)\n                  (rec (rest col) (if (= (even? (first col)) true)\n                                      res\n                                    (conj res (first col)))))) col ()))","problem":25,"user":"511f656ae4b085952a83535e"},{"code":"(fn [coll] (filter #(not= 0 (mod % 2)) coll))","problem":25,"user":"50e41747e4b0463d32072489"},{"problem":25,"code":"filter  odd?","user":"56baa68ce4b0f26550335947"},{"problem":25,"code":"(fn [lst] (filter #(not= (mod % 2) 0) lst))\n\n;(fn [lst] (reverse ((fn oddFilter [lst oLst] (if (= (first lst) nil) oLst (oddFilter (rest lst) (if (= (mod (first lst) 2) 0) oLst (cons (first lst) oLst))))) lst '())))","user":"5d1cd478e4b02ea6f0fb6991"},{"code":"filter  \r\n  (fn [x] (odd? x))","problem":25,"user":"4deb6b40535d08e6dec9fe05"},{"problem":25,"code":"(fn find-odd [lst]\n  (filter odd? lst))","user":"54297fc2e4b01498b1a71b3a"},{"problem":25,"code":"(fn [ls] (filter odd? ls ))","user":"56fee925e4b08d47c97781b7"},{"problem":25,"code":"#(filter odd? (vec %))","user":"58969902e4b00487982d52a6"},{"problem":25,"code":"(fn\n  just-odds\n  [seq]\n  (filter odd? seq))","user":"5c6227fee4b0fca0c1622641"},{"code":"(partial filter #(> (bit-and % 1) 0))","problem":25,"user":"4e7c4290535db169f9c796bc"},{"code":"(fn [ a] \n  (filter odd? a))","problem":25,"user":"50b525c5e4b0c464d223d1c3"},{"problem":25,"code":"(fn [s]\n\t(filter #(= 1 (mod % 2)) s))","user":"57a2bb9be4b0c3d858beb905"},{"code":"(fn [x] (filter #(= (bit-and % 1) 1) x))","problem":25,"user":"519be011e4b0a1d87b00344e"},{"problem":25,"code":"(fn [coll] (filter #(= 1 (mod %1 2)) (apply list coll)))","user":"54aec099e4b09f271ff37cf5"},{"code":"filter (fn [x] (not= 0 (mod x  2)))","problem":25,"user":"50807940e4b01a93d3f38e44"},{"problem":25,"code":"#(reverse (reduce (fn [acc x]\n                    (if (odd? x)\n                      (conj acc x)\n                      acc))\n                  '() %))","user":"592518cde4b072a2710fce66"},{"code":"filter #(> (mod % 2) 0 )","problem":25,"user":"532aff4ae4b09d4e7a9b552f"},{"problem":25,"code":"(fn [x] \n  (filter #(not=(mod % 2)0) x))","user":"58ffaddee4b0438e51c2cffe"},{"problem":25,"code":"(fn[l](filter odd? l))","user":"5d60ea3ae4b0c9e5857d500a"},{"problem":25,"code":"(fn [s] (filter (fn [n] (= 1 (mod n 2 ))) s))","user":"56b5019ce4b0982f16b37e2c"},{"problem":25,"code":"(fn only-odd [sq]\n  (loop [sq sq odd-sq []]\n    (if (empty? sq)\n      odd-sq\n      (recur (rest sq) (if (odd? (first sq)) (conj odd-sq (first sq)) odd-sq)))))","user":"5c6314c5e4b0fca0c1622658"},{"problem":25,"code":"(fn [x] (filter (fn [i] (= (mod i 2) 1)) x))","user":"579e75fbe4b05b1deef9ae29"},{"problem":25,"code":"(fn [s] \n    (filter odd? s)\n  )","user":"5894b298e4b00487982d5261"},{"problem":25,"code":"(fn [ls]\n  (loop [ls ls\n         acc []]\n    (if (empty? ls)\n      acc\n      (recur\n       (rest ls)\n       (let [f (first ls)]\n         (if (odd? f)\n           (conj acc f)\n           acc))))))","user":"54d492dbe4b0a52adc2e2001"},{"problem":25,"code":"(fn odd-nums [s]\n  (filter #(= 1 (rem % 2)) s))","user":"5294a49be4b02ebb4ef7500f"},{"code":"filter (fn [x] (= (rem x 2) 1))","problem":25,"user":"4f11caf6535d64f603146424"},{"code":"(fn odds [x] (if (= (count x) 0)\n              ()\n              (if (= (mod (first x) 2) 0)\n                \n                (odds (rest x))        \n                 (conj (odds (rest x)) (first x))                 )))","problem":25,"user":"4e6cf521535de274dd8d818b"},{"code":"filter odd?\n;Filters out all of the even numbers, so only the odd numbers are left","problem":25,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [coll]\n  (filter #(not= (rem % 2) 0) coll))","problem":25,"user":"5264b4a9e4b03e8d9a4a70e0"},{"code":"(fn odd [s]\n  (if (not (empty? s))\n    (if (= (mod (first s) 2) 1)\n      (conj (odd (rest s)) (first s))\n      (odd (rest s))\n    )\n    s))","problem":25,"user":"53981cbce4b0b51d73faaef5"},{"problem":25,"code":"filter odd?\n;(fn [l] (filter #(= 1 (mod % 2)) l))","user":"54397533e4b032a45b86931d"},{"code":"#(filter (fn [e] (= 1 (rem e 2))) %)","problem":25,"user":"4f8ab084e4b02e764a0a5171"},{"problem":25,"code":"#(filter (fn [x] (not= 0 (rem x 2)) ) %)","user":"54cf6a32e4b018d918be98ce"},{"problem":25,"code":"(fn [x] (loop [[h & t] (into [] x) acc []] (let [nacc (if (odd? h) (conj acc h) acc)] (if (= t nil) nacc (recur t nacc)))))","user":"58152157e4b0f478707a0631"},{"problem":25,"code":"(fn my-odds [%] (filter odd? % ))","user":"53d64811e4b0e771c3025456"},{"code":"filter #( = (rem % 2) 1)","problem":25,"user":"517d1018e4b0f5e87c18f25e"},{"code":"(fn [x] (filter odd? x))\n;; reduce #(if (odd? %2) (conj %1 %2) %1) []","problem":25,"user":"51fdbf73e4b0f1313d468a51"},{"code":"(fn odd-numbers [s] (filter odd? s))","problem":25,"user":"51a57fd5e4b051b01d55f44d"},{"problem":25,"code":"(fn my-odds [lst]\n  (filter odd? lst))","user":"59dd387be4b0a0ac046f2502"},{"problem":25,"code":"(fn [x](filter #(= (mod % 2) 1) x))","user":"56d325ace4b0ea9b8538f7a9"},{"code":"filter #(-> % (mod 2) (= 1))","problem":25,"user":"513edd13e4b051389b345b39"},{"problem":25,"code":"(fn [coll] (filter #(= 1 (int (mod % 2))) coll))","user":"58740c18e4b01531a375ea49"},{"problem":25,"code":"(fn [y] (filter (fn [x] (not= (mod x 2) 0)) y))","user":"54b8fea9e4b0ed20f4ff6e9c"},{"code":"(partial filter #(= 1 (rem % 2)))","problem":25,"user":"4e842ebb535db62dc21a62df"},{"problem":25,"code":"(fn odds [sq] (filter odd? sq))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":25,"code":"(fn [i]\n  (filter odd? i))","user":"554bc026e4b0a04f79299597"},{"code":"(fn [s]\n  (filter #(if-not (= (mod % 2) 0) true) s))","problem":25,"user":"4f1473eb535d64f603146439"},{"code":"(fn [arr]\n  (filter #(= 1 (mod % 2)) arr))","problem":25,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"#(for [x % :when (= 1 (bit-and x 1))] x)","problem":25,"user":"4f0cc259535d0136e6c22310"},{"problem":25,"code":"(fn [collec] (filter odd? collec))","user":"5a634ff0e4b0512ff01cd995"},{"code":"(fn [y]\n  (reverse ((fn all-odds [numbers, odds]\n    (cond (empty? numbers) odds\n          :else (all-odds (rest numbers)\n                          (cond (= 0 (mod (first numbers) 2)) odds\n                                :else (conj odds (first numbers))))))\n   y '())))","problem":25,"user":"53407963e4b085b17e897dad"},{"code":"(fn [xs] (filter #(= 1 (mod % 2)) xs))","problem":25,"user":"4ed500bb535d10e5ff6f52d3"},{"code":"(fn odd-numbers [coll]\n  (filter #(= 1 (mod % 2)) coll))","problem":25,"user":"50e063f3e4b061dbdced7230"},{"problem":25,"code":"(fn [x]\n  (filter (fn [y] (= 1 (rem y 2))) x))","user":"593d6793e4b069cdc2982ba6"},{"problem":25,"code":"#(filter (fn [x] (not= (/ x 2) (int (/ x 2)))) %)","user":"5521c33ce4b0882d96d0919a"},{"problem":25,"code":"#(filter (fn [n](= 1 (mod n 2)) )%)","user":"5e9791cbe4b0157ca96647d2"},{"problem":25,"code":"(fn odd [s]\n  (if(empty? s)\n    (sequence '())\n    (if(= 1 (rem (first s) 2))\n      (conj (odd (rest s)) (first s))\n      (odd (rest s))))\n )","user":"5c486dece4b0e06e1360a3c0"},{"problem":25,"code":"(fn odd [l]\n  (if (empty? l)\n    '()\n    (if (odd? (first l))\n      (cons (first l) (odd (rest l)))\n    (odd (rest l)))))","user":"5ea516e1e4b00a66d4a951a6"},{"problem":25,"code":"(fn\n  [coll]\n  (filter #(not (= 0 (mod % 2))) coll))","user":"542098afe4b01498b1a71aa7"},{"code":"(fn [s]\n  (filter (fn [n] (= 1 (mod n 2))) \n          s\n  )\n)","problem":25,"user":"52c45793e4b0c2d177d620d7"},{"problem":25,"code":"(fn [lst]\n  (->> (for [i lst] (when (not (zero? (rem i 2))) i))\n       (remove nil?)))","user":"5938bca5e4b02506e01a29eb"},{"code":"(fn return-odd [collection]\n  (filter odd? collection))","problem":25,"user":"50845d3ee4b0fb8f40674bf3"},{"code":";;filter odd?\nfilter (fn [x]\n          (= (rem x 2) 1))","problem":25,"user":"50800e49e4b089ade05efbda"},{"problem":25,"code":"(fn\n  [seq]\n  (filter odd? seq))","user":"5a1f85ffe4b0ff51aa4b3284"},{"problem":25,"code":"(fn odd [sequ]\n  (filter odd? sequ))","user":"54d5343fe4b0a52adc2e200a"},{"problem":25,"code":"(fn  [collection]\n  (filter odd?  collection))","user":"57fe2d6fe4b0d3187e9009c8"},{"problem":25,"code":"filter (fn[x] (= (mod x 2) 1))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn [num-sequence]\n  (loop [s num-sequence odds []]\n    (if (= 0 (count s))\n      odds\n      (if (not= 0 (mod (first s) 2))\n        (recur (rest s) (conj odds (first s)))\n        (recur (rest s) odds)))))","problem":25,"user":"513294fce4b039bac947cbb8"},{"code":"filter #(not(even? %))","problem":25,"user":"517bc969e4b07ef0e56148d0"},{"code":"(fn odds [seq]\r\n  (filter \r\n    (fn [num] (== (mod num 2) 1))\r\n    seq))","problem":25,"user":"4e234588535d04ed9115e821"},{"code":"#(filter \n  (fn [n] \n    (= (mod n 2) 1))\n  %)","problem":25,"user":"51f01925e4b0249c592fbdfc"},{"problem":25,"code":"(fn odd [s] \n  (filter (fn [x] \n           \t(= (rem x 2) 1)) s))","user":"5d48d5d1e4b0776584bd6f12"},{"code":"filter #(not= (mod % 2) 0)\n\n; or\n; filter odd?","problem":25,"user":"513d09cbe4b0b86ece9f322e"},{"problem":25,"code":"(fn [x] (filter #(> (rem %1 2) 0) x))","user":"56ef11efe4b04a395b9a045b"},{"problem":25,"code":"(fn [xs]\n(loop [xs xs\n       odds '()]\n      (if (seq xs)\n          (recur (butlast xs) (if (not= 0 (rem (last xs) 2)) (conj odds (last xs)) odds))\n          odds)))","user":"5953053ce4b066ee0a44aeda"},{"problem":25,"code":"(fn [mylist]\n  (filter odd? mylist))","user":"553a74ede4b09218d5f44ff7"},{"problem":25,"code":"(fn [numbers] (filter #(= 1 (rem % 2)) numbers))","user":"5bcc9e7ae4b07a9b28b10114"},{"problem":25,"code":"(fn [mySequence]\n  (filter #(= (rem % 2) 1) mySequence))","user":"5e663073e4b0fd0acd1586bc"},{"code":"(fn [seq]\n  (filter #(not (= (mod % 2) 0)) seq))","problem":25,"user":"506755b3e4b03d366d7cb2bc"},{"problem":25,"code":"(fn my-odd\n  [s]\n  (filter #(odd? %) s))","user":"55ad2d97e4b03311e7b732a2"},{"code":"(fn [x] (filter (fn [y] (odd? y)) x))","problem":25,"user":"5102f4f9e4b00c483ae176fd"},{"code":"filter #(if (not= 0 (mod % 2)) %)","problem":25,"user":"5395a79be4b0b51d73faaed9"},{"problem":25,"code":"(fn this [x]\n  (cond\n   (= () x) ()\n   (= (rem (first x) 2) 1) (conj (this (rest x)) (first x))\n  :else (this (rest x))\n   )\n  )","user":"59165082e4b09b4ee5954b88"},{"code":"#( for [x %\r\n  :when (odd? x)]\r\n  x)","problem":25,"user":"4e25a0da535d04ed9115e82a"},{"problem":25,"code":"(fn  [ls]\n  (for [x ls\n    :when (odd? x)\n        ]\n    x\n    )\n)","user":"5581a6dae4b05c286339e0fe"},{"problem":25,"code":"(fn [coll]\n   (reduce (fn [coll x] \n             (if (odd? x) \n               (conj coll x)\n               coll)) [] coll))","user":"54393c3fe4b032a45b86931a"},{"code":"(fn odd-ones [l] (filter #(= 1 (mod % 2)) l))","problem":25,"user":"4e745f01535d7a570dd295b8"},{"problem":25,"code":"(fn sode [sez]\n  (cond\n   (empty? sez) '()\n   (= (mod (first sez) 2) 1) (conj (sode (rest sez)) (first sez))\n   :else (sode (rest sez))\n  )\n)","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn [s] (filter #(odd? %) s))","problem":25,"user":"4e5676b2535d8a8b8723a282"},{"problem":25,"code":"(fn [y] (filter (fn [x] (= 1 (mod x 2))) y))","user":"5a34f342e4b0ddc586f153d1"},{"problem":25,"code":"(fn [coll] (filter (fn [x] (> (mod x 2) 0)) coll))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":25,"code":"#(filter \n  (fn [x] \n    (= (mod x 2) 1)\n  )\n  %\n)","user":"5d4c83b7e4b0776584bd6f34"},{"code":"(fn [sq] (filter #(= (mod % 2) 1) sq))","problem":25,"user":"5319d9ade4b08068f379ed84"},{"code":"(fn [xs] (loop [sum [] xs xs] (if (empty? xs) sum (recur (if (odd? (first xs)) (conj sum (first xs)) sum) (rest xs)))))","problem":25,"user":"523e12bde4b09833704079a2"},{"code":"(fn [sequence]\n  (filter #(odd? %) sequence))","problem":25,"user":"50a991dce4b07e35d68b27b3"},{"code":"(fn o [l] (filter #(= 1 (mod % 2)) l))","problem":25,"user":"51448607e4b0d29bc9e5e336"},{"code":"(fn odds[coll]\n  \t(reverse\n\t(\n    \t(fn builder[old new]\n        \t(if (= '() old)\n              new\n              (if (= (mod (first old) 2) 0)\n              \t(builder (rest old) new)\n                (builder (rest old) (conj new (first old)))\n              )\n            )\n        )\n    \tcoll '()\n    )\n    )\n)","problem":25,"user":"512ec712e4b029b11c040781"},{"code":"#(filter (fn [x] (= (mod x 2) 1)) %)","problem":25,"user":"4e07eac0535d04ed9115e7a9"},{"code":"(fn odds [xs] \n  (filter #(== (mod % 2) 1) xs\n ))","problem":25,"user":"51ad20eee4b09397d510977e"},{"problem":25,"code":"filter #(not= (mod  % 2) 0)","user":"5c37110ae4b0d62ef62d9f71"},{"code":"(fn [col] (filter odd? col))","problem":25,"user":"4e7d4544535db169f9c796d0"},{"problem":25,"code":"(fn [args]\n    (filter odd? (seq args))\n    )","user":"5683fcafe4b0945ebc182aa8"},{"code":"(fn [s]\n  (filter #(= (mod % 2) 1) s))","problem":25,"user":"5175533fe4b0dea9bbfba575"},{"problem":25,"code":"(fn[l] (\n        filter (fn[x] (not= (mod x 2) 0)) l\n ))","user":"54cf977fe4b018d918be98d1"},{"problem":25,"code":"(fn [x]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (if (= (rem (first coll) 2) 1)\n                           (conj result (first coll))\n                           result)))))","user":"57344edbe4b0cd1946bd1008"},{"code":"#(filter (fn [i] (= 1 (mod i 2))) %)","problem":25,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn [s] (for [item s :when (odd? item)] item))","problem":25,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn only-odd [coll]\n  (filter #(not= 0 (rem % 2)) coll))","problem":25,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":25,"code":"(fn [coll] \n  (reduce \n   (fn [res x] \n     (if (not= 0 (rem x 2)) \n       (conj res x)\n       res\n     )\n    )\n   []\n   coll\n  )\n)","user":"5df39a6fe4b03c219ef1a36d"},{"code":"filter (fn [k] (= (mod k 2) 1))","problem":25,"user":"4f2a6169e4b0d6649770a03d"},{"code":"(partial filter #(not= 0 (mod % 2)))","problem":25,"user":"50e0e18ce4b0090303771ba9"},{"code":"(fn odds [x] \n\t\t(loop [lst x od (list)] \n\t\t\t(if (empty? lst)   \n\t\t\t\t(reverse od) \n\t\t\t\t(recur (rest lst) (if (odd? (first lst)) \n\t\t\t\t\t\t\t\t\t\t\t(conj od (first lst))\n\t\t\t\t\t\t\t\t\t\t\tod\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","problem":25,"user":"4ec3072a535dcc7ae8597d50"},{"code":"#(for [x % :when (> (mod x 2) 0)] x)","problem":25,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [seq]\n  (filter \n   (fn [item]\n     (= (mod item 2) 1))\n     seq))","problem":25,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":25,"code":"(fn [input]\n (filter odd? input ))","user":"58ffbabce4b0438e51c2d002"},{"code":"(fn [coll] (for [number coll :when (odd? number)] number))","problem":25,"user":"50c13f77e4b096f585049c3b"},{"problem":25,"code":"(fn [coll]\n  (filter\n   (fn [x]\n     (= (mod x 2) 1))\n   coll))","user":"5456e4e7e4b080a794c2c883"},{"code":"#(filter (fn [n] (= 1 (mod n 2))) %)","problem":25,"user":"4f037faf535dcb61093f6af8"},{"code":"(fn odds [coll] (filter #(not= (mod % 2) 0) coll))","problem":25,"user":"511179a2e4b03f43822243d0"},{"code":"(fn [lista] (filter (fn [n] (not  (= 0 (mod n 2)))) lista))","problem":25,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn [seq]\n  (remove even? seq)\n)","problem":25,"user":"508bf05ae4b0f17d83ea26aa"},{"code":"#(remove even? %)","problem":25,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":25,"code":"(fn [col]\n  (loop [loopcol col\n         rslt '()]\n    (if (empty? loopcol)\n      (reverse rslt)\n      (if (odd? (first loopcol))\n         (recur (rest loopcol) (conj rslt (first loopcol)))\n         (recur (rest loopcol) rslt)))))","user":"54178782e4b01498b1a71a0c"},{"code":"(fn [s]\n  (loop [s s ns '()]\n    (if (empty? s)\n      ns\n      (if (odd? (last s))\n        (recur (butlast s) (cons (last s) ns))\n        (recur (butlast s) ns)))))","problem":25,"user":"51a132cee4b0b292b01ee3ff"},{"code":"(fn [xs]\n  (filter odd? xs))","problem":25,"user":"4e36e647535deb9a81d77f36"},{"problem":25,"code":"(fn [nums] (for [x nums :when (odd? x)] x))","user":"545bc5a8e4b01be26fd74658"},{"code":"filter #(odd? % )","problem":25,"user":"4e81e93d535db62dc21a62bf"},{"problem":25,"code":"reduce (fn [acc x] (if (= (mod x 2) 0) acc (conj acc x))) []","user":"58cabf32e4b03c36ff7e583a"},{"problem":25,"code":"(fn [numbers] (filter odd? numbers))","user":"54257124e4b01498b1a71b09"},{"code":"(fn [ls] (filter #(= 1 (rem % 2)) ls))","problem":25,"user":"4ffdca56e4b0678c553fc3e9"},{"problem":25,"code":"(fn [col] (filter #(= 1 (rem % 2)) col))","user":"55f7dc24e4b06e875b46ceb3"},{"problem":25,"code":"(fn odd-nums [nums]\n  (filter (fn [x] (= (mod x 2) 1)) nums))","user":"4fd9cc7ee4b05e33b9224f3a"},{"problem":25,"code":";;keep #(if (odd? %) %)\n\nfilter odd?","user":"55d7312ee4b0e31453f64a9f"},{"problem":25,"code":"#(filter (fn [v] (= (mod v 2) 1)) %)","user":"59331397e4b072a2710fd046"},{"code":"(fn [y] (filter (fn [x] (odd? x)) y))","problem":25,"user":"4e50fb2c535dc968683fc4f1"},{"problem":25,"code":"#(filter (fn [v] (not (zero? (mod v 2)))) %)","user":"5e42602ae4b01d43a70e8e63"},{"code":"(fn [l] (filter #(not (even? %1)) l))","problem":25,"user":"51d59859e4b01da06753aa92"},{"code":"(fn fod [s] (filter odd? s))","problem":25,"user":"4e9de526535dbda64a6f6b8e"},{"problem":25,"code":"(fn [arg] (filter (fn [el] (odd? el)) arg))","user":"5e5d9e62e4b0fd0acd15866b"},{"code":"(fn odds [arg]\n  (filter #(odd? %) arg))","problem":25,"user":"4f652432e4b07046d9f4ef3d"},{"code":"(fn [x]\n    (filter #(odd? % ) x)\n)","problem":25,"user":"4e9dd9ab535dbda64a6f6b8d"},{"problem":25,"code":"(fn [s] (filter #(= 1 (mod % 2)) (seq s)))","user":"54aa373de4b09f271ff37cb6"},{"problem":25,"code":"(fn [coll] (filter (fn [item] (if (not= (mod item 2) 0) item)) coll))","user":"5fcf86c2e4b07e53c2f3f00d"},{"problem":25,"code":"#(filter (fn [n] (odd? n)) %1)","user":"589c2e3fe4b00487982d5357"},{"problem":25,"code":"#(loop [new [] old %]\n   (if (empty? old)\n     new\n     (if (odd? (first old))\n       (recur (conj new (first old)) (rest old))\n       (recur new (rest old)))))","user":"566899f4e4b04acd4f672df4"},{"problem":25,"code":"#(filter odd?(vec %))","user":"59395adfe4b02506e01a29fb"},{"problem":25,"code":"(fn f [n] (filter (fn [i] (odd? i)) n))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [x] (filter #(not= 0 (mod % 2)) x))","problem":25,"user":"4faacc04e4b081705acca201"},{"code":"(fn odds [lst] (filter odd? lst))","problem":25,"user":"4f07ad89535dcb61093f6c2a"},{"code":"(comp reverse (fn [l] (reduce #(if (odd? %2) (cons %2 %1 ) %1) '() l)))","problem":25,"user":"515ba2c2e4b0a102a3e52639"},{"code":"(fn [x] (filter #(> (mod % 2) 0) x))","problem":25,"user":"4e7e8ea5535db169f9c79719"},{"code":"(fn [xs] (filter (fn [y] (= (mod y 2) 1)) xs))","problem":25,"user":"4fb1325de4b081705acca276"},{"problem":25,"code":"#(filter (fn [ele] (= 1 (mod ele 2))) %)","user":"5ac9d3a3e4b0e27600da77d3"},{"code":"(fn find-odd-numbers [coll]\n  (filter odd? coll))","problem":25,"user":"4f159ea6535d64f603146445"},{"code":"(partial remove even?)","problem":25,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [sequence]\n  (loop [lista (seq sequence)\n         suma '()]\n    (if (not (not-empty lista)) (reverse suma)\n\t(if (odd? (first lista))\n          (recur (rest lista) (conj suma (first lista)))\n          (recur (rest lista) suma)))))","problem":25,"user":"5213348ae4b0d32679a50652"},{"problem":25,"code":"#(reverse (reduce (fn [ganj x]\n                         (if (= (rem x 2) 1)\n                           (conj ganj x)\n                           ganj))\n                       '() %))","user":"56193c6ee4b053970a773af2"},{"problem":25,"code":"(fn [sequence] (filter #(not= (mod % 2) 0) sequence))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn [coll]\n  (filter odd? coll))","problem":25,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":25,"code":"(fn [col] (filter #(not= 0 (rem % 2)) col))","user":"53dcb9b2e4b0d874e779ae23"},{"code":"filter (\n    fn [x] (not (= 0 (rem x 2)))\n)","problem":25,"user":"4ee88f29535d93acb0a66882"},{"problem":25,"code":"(fn [xs] (filter #(not (= (mod % 2) 0)) xs))","user":"56d008d9e4b0ea9b8538f776"},{"code":"#(reduce (fn [c x] (if (odd? x) (conj c x) c)) [] %)","problem":25,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":25,"code":"(fn [xs]\n  (filter (fn [x] (= 1 (mod x 2))) xs))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":25,"code":"(fn odds [coll]\n  (filter (fn [x] (= 1 (mod x 2))) coll))","user":"54b5870ae4b05787c3b163a6"},{"code":"(fn find-odd-nums [xs]\n\t(filter #(not= (mod % 2) 0) xs))","problem":25,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":25,"code":"(fn\n  [item]\n  (filter #(= (mod % 2) 1) item))","user":"5944bd7fe4b0b03edd0057b0"},{"code":"(partial filter #(== (rem % 2) 1))","problem":25,"user":"529d4f4be4b04e0c58e87b79"},{"code":"#(for [x %1 :when (odd? x)] x)","problem":25,"user":"5017f840e4b02f523d7cc5e8"},{"code":"(fn odd-numbers [s]\n  (filter odd? s))","problem":25,"user":"500d86e8e4b0ff215386cad4"},{"problem":25,"code":"(fn [sq] (filter (fn [x] (= (mod x 2) 1)) sq))","user":"5835df4ce4b089d5ab817cec"},{"problem":25,"code":"filter #(-> % even? not)","user":"5951190be4b066ee0a44aea4"},{"problem":25,"code":"#(reduce (fn [acc n]\n           (if (= 1 (mod n 2))\n             (conj acc n)\n             acc))\n         []\n         %)","user":"5daa1fc8e4b000c986472c3e"},{"code":"(fn [coll] (filter #(if (= 0 (mod % 2)) false true) coll))","problem":25,"user":"4ef0a39b535dced4c769f20d"},{"problem":25,"code":"(fn oddNumbers [numbers]\n  (filter odd? numbers)\n )","user":"53b492a5e4b047364c0444b6"},{"problem":25,"code":"(fn odds [nums] (filter #(= 1 (mod %1 2)) nums))","user":"5658b9bde4b00d315579610e"},{"code":"keep #(if (odd? %) %)","problem":25,"user":"4e975bce535dbda64a6f6b53"},{"code":"(fn [x]\n  (loop [newseq []\n         x x]\n    (if (empty? x)\n      newseq\n      (if-not (zero? (rem (first x) 2))\n        (recur (conj newseq (first x)) (rest x))\n        (recur newseq (rest x))))))","problem":25,"user":"538d464ee4b0b51d73faae69"},{"problem":25,"code":"(fn odder [coll] (if (first coll)\n                    (if  (even? (first coll))\n                      (odder (rest coll))\n                      (cons (first coll) (odder (rest coll))))\n                    (list)))","user":"5fabe67be4b08cb800c85ade"},{"problem":25,"code":"(fn odd [a]\n  (if (= a '())\n    '()\n    (if (not (= (mod (first a) 2) 0))\n      (cons (first a) (odd (rest a)))\n      (odd (rest a)))))","user":"55244734e4b0882d96d091bf"},{"code":"( fn [s] (filter odd? s))","problem":25,"user":"525d44bfe4b0cb4875a45d6d"},{"problem":25,"code":"#(filter (fn [a] (not= (mod a 2) 0)) %)","user":"5eb1e42ae4b00a66d4a95202"},{"problem":25,"code":"(fn odd [sx] (filter #(= (mod % 2) 1) sx))","user":"556de4dfe4b09a3098a5250c"},{"problem":25,"code":"(fn [s] (filter (fn [x] (= 1 (rem x 2))) s))","user":"56308326e4b073c1cf7a9be9"},{"problem":25,"code":"(fn [a]\n  (filter odd? a))","user":"5b0f066fe4b0cc2b61a3be0d"},{"problem":25,"code":"#(filter \n  (\n   fn [x] (= 1 (mod x 2))\n    ) \n  %)","user":"57ee4909e4b0bfb2137f5bb4"},{"code":"#( filter (fn [x] (odd? x)) %)","problem":25,"user":"50a3b55be4b0ceace084d494"},{"problem":25,"code":"filter #(= (= (mod % 2) 0) false)","user":"5416dce6e4b01498b1a71a04"},{"problem":25,"code":"(fn [coll] (remove even? coll))","user":"543f1765e4b032a45b86935a"},{"problem":25,"code":"(fn filter-odd\n  [s]\n  (filter odd? s))","user":"5ed09be3e4b016b56eae05b2"},{"problem":25,"code":"(fn [xs] \n  (filter #(odd? %) xs)\n  )","user":"56686edce4b04acd4f672dea"},{"code":"(fn [l] (for [x l :when (= (mod x 2) 1)] x))","problem":25,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn Odd [x]\n  (if (empty? x)\n    x\n    (if (even? (first x))\n      (Odd (rest x))\n      (cons (first x) (Odd (rest x))))))","problem":25,"user":"4f761a78e4b0fbe0118ec56c"},{"problem":25,"code":"(fn [sequen]\n  (->> sequen\n       (filter odd?)))","user":"5dcd182ae4b0b296f82db5a9"},{"code":"(fn newodd [c] (filter #(not (even? %)) c))","problem":25,"user":"4e7650c5535d324fb2983d68"},{"code":"(fn [coll]\n  (filter #(not (= (rem % 2) 0)) coll))","problem":25,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":25,"code":"#(loop [f (first %) cl (rest %)  re []]\n   (if f\n       (if (odd? f) (recur (first cl) (rest cl) (conj re f))\n        (recur (first cl) (rest cl) re))\n        re))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":25,"code":"(fn [lst]\n  (loop [fin []\n         f (first lst)\n         r (rest lst)]\n    (if (= r [])\n      (if (= (mod f 2) 1)\n        (conj fin f)\n        fin)\n      (if (= (mod f 2) 1)\n        (recur (conj fin f) (first r) (rest r))\n        (recur fin (first r) (rest r))))))","user":"57f8627ee4b0d3187e900926"},{"problem":25,"code":"(fn [coll] (filter odd? (seq coll)))","user":"5951250fe4b066ee0a44aea6"},{"code":"(fn [list] \n  (filter #(= (mod % 2) 1) list)\n)","problem":25,"user":"525d490ae4b0cb4875a45d70"},{"code":"(fn [coll]\n  (loop [coll coll odd-coll []]\n    (if (empty? coll)\n      odd-coll\n      (recur (rest coll) (if (odd? (first coll))\n        (conj odd-coll (first coll))\n        odd-coll)))))","problem":25,"user":"50843a4ae4b0c98812d0788b"},{"code":"(fn odds [_seq] (filter odd? _seq))","problem":25,"user":"52c60844e4b0c2d177d62106"},{"code":"(fn hey ([x] (hey x [])) ([x y] (if (empty? x) y (if (= (mod (first x) 2) 0) (hey (rest x) y) (hey (rest x) (concat y (list (first x))))))))","problem":25,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn odds [seq] \n    (if (empty? seq) [] \n        (let [f (first seq)] \n            (if (odd? f) \n                (cons f (odds (rest seq))) \n                (odds (rest seq))\n            ))))","problem":25,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":25,"code":"#(filter (fn [value] (= (mod value 2) 1)) %)","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":25,"code":"; Oh. This is what filter does. Except probably more efficiently\n\n(fn get-odds \n  ([o] (get-odds o []))\n  ([o odds] \n   (if(empty? o)\n     odds\n     (get-odds (drop 1 o)\n               (if(odd? (first o))\n                 (conj odds (first o))\n                 odds\n                 )\n               )\n     )\n   )\n  )","user":"5782ce69e4b0d36ec5835e9a"},{"code":"(fn foo\n  [coll]\n  (filter (fn [x] (= (mod x 2) 1)) coll))","problem":25,"user":"52fdb82ae4b047fd55837031"},{"code":"#((fn f [n lst]\n  (if (= lst '())\n    n\n    (f (if (odd? (first lst)) (conj n (first lst)) n\n           ) (rest lst))))\n   [] %)","problem":25,"user":"50ac3e4be4b071b89ef2622d"},{"code":"(fn [x] (filter odd? x ))","problem":25,"user":"4f57a153e4b0a7574ea7183a"},{"code":"(fn [x] (filter (fn [y] (= 1 (mod y 2))) x))","problem":25,"user":"4f036894535dcb61093f6aad"},{"problem":25,"code":";https://clojuredocs.org/clojure.core/odd_q, true als een getal odd is, false als een getal dat niet is\n; een example op die pagina gebruikt filter als filter voor een lijst, die is hier ook bruikbaar\n#(filter odd? %)","user":"5637bd38e4b0bfe05bf117de"},{"code":"(fn [collection] (filter odd? collection))","problem":25,"user":"4f462919e4b0d56e7bb92b94"},{"problem":25,"code":"#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (rest x) \n            (if (odd? (first x))\n              (conj y (first x))\n              y)\n            )\n     )\n   )","user":"583f23dce4b089d5ab817dc9"},{"problem":25,"code":"(fn [col]\n  (filter #(odd? %) col))","user":"57ca338de4b05aa3c4741d37"},{"problem":25,"code":"(fn odds [listname] \n   (loop [xs listname odds '()]\n     (if (seq xs)\n       (if (odd? (first xs)) (recur (drop 1 xs) (conj odds (first xs))) (recur (drop 1 xs) odds))\n       (reverse odds))))","user":"5c8aa1b5e4b048ec896c5959"},{"problem":25,"code":"(fn [seq] (filter #(= 1 (rem % 2)) seq))","user":"5746061ae4b009280f9f2b5b"},{"code":"(fn [d] (filter #(== 1 (rem % 2)) d))","problem":25,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":25,"code":"(fn \n  [haystack]\n  (loop [straw haystack\n         odds []]\n    (if (empty? straw)\n      (apply list odds)\n    (if (= 1 (mod (first straw) 2))\n      (recur (rest straw) (conj odds (first straw)))\n      (recur (rest straw) odds)\n     )\n    \t)\n ))","user":"54d0f744e4b0e8a36923e5d7"},{"problem":25,"code":"(fn odd [s]\n  (loop [in s out []]\n    (if (empty? in)\n      out\n    (if (= 1 (mod (first in) 2))\n      (recur (rest in) (conj out  (first in)))\n      (recur (rest in) out)\n             \n      )\n      )\n    )\n  )","user":"5708e8f6e4b0b0fb43fd06a4"},{"code":"(fn [coll] (filter (fn [elem] (= (rem elem 2) 1)) coll))","problem":25,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"reduce  #(if (odd? %2) (conj %1 %2) %1)  []","problem":25,"user":"516e2246e4b092a6408c5bc5"},{"code":"(fn [x]\n    (filter #(not= (rem % 2) 0) x))","problem":25,"user":"523288fee4b035af41902a88"},{"code":"(fn [the-seq]\n  (filter odd? the-seq))","problem":25,"user":"4f80a906e4b033992c121bf7"},{"problem":25,"code":"(fn [s] (loop [head (last s) tail (butlast s) l '()] \n          (if (= head nil) l (recur (last tail) (butlast tail) (if (= (mod head '2) '1) (cons head l) l))) ))","user":"53b3ea79e4b047364c0444ab"},{"problem":25,"code":"#(filter (fn [x] (= 1 (rem x 2))) %1)","user":"5cf72682e4b0b71b1d808a68"},{"problem":25,"code":"(fn [listy] (filter odd? listy))","user":"5380a27ae4b06839e8705ec4"},{"code":"(fn [xs]\n  (filter #(= 1 (rem % 2)) xs))","problem":25,"user":"5344fe13e4b084c2834f4a32"},{"problem":25,"code":"(fn [s]\n  (remove even? (sort (into () s)))\n  )","user":"577a4dc2e4b0d3393e5deaf6"},{"problem":25,"code":"(fn only-odd\n  [coll]\n  (filter odd? coll))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":25,"code":"(fn [seq'] (filter odd? seq'))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn [x] (filter #(= (bit-and % 1) 1) x))\n;#(filter odd? %)","problem":25,"user":"5327f32be4b09d4e7a9b5502"},{"problem":25,"code":"( fn [x] (filter #(not= (mod % 2) 0) x))","user":"5da4618be4b000c986472bf3"},{"code":"(fn\n  [list]\n  (filter #(= 1 (mod %1 2)) list))","problem":25,"user":"4e8a0c82535d3e98b802328d"},{"problem":25,"code":"filter #(if (= 1 (rem % 2)) %)","user":"564f128de4b0284900eef6a4"},{"code":"(fn odd0 [mm] ((fn odd1 [n m] (if (= m '()) (reverse n)  (if (= (mod (first m) 2) 0)  (odd1 n (rest m))  (odd1 (conj n (first m)) (rest m)) ))   ) '() mm))","problem":25,"user":"5150ae58e4b03e678e393abe"},{"problem":25,"code":"(fn [allNums] (filter odd? allNums))","user":"59e0f839e4b08badc2a0c502"},{"code":"#(filter \n   odd?\n   %\n )","problem":25,"user":"4eed26af535d93acb0a668bb"},{"code":"(partial filter #(not= (mod % 2) 0))","problem":25,"user":"4dd9d299535d2dad7130b5dd"},{"problem":25,"code":"#(filter (fn [x] (= (mod x 2) 1)) % )","user":"5ed8bd07e4b0c7845d86b0d8"},{"problem":25,"code":";(fn [l] (for [i (vec l) :when (odd? i)] i))\nfilter odd?","user":"59390a35e4b02506e01a29f3"},{"code":"filter (fn [a] (if (not (= (mod a 2) 0)) a))","problem":25,"user":"4e8f5dd1535d65386fec214b"},{"problem":25,"code":"; Uses a recursion sequence to loop through\n; Multi-arity - first time adds a result list\n(fn odd-even \n    ([coll] ; single arity - first run\n        (odd-even coll '()) )\n    ([coll result]  ; double arity - following runs\n        (if (first coll)\n                (if (odd? (first coll))\n                    (recur (rest coll) (conj result (first coll)))\n                    (recur (rest coll) result)\n                )\n                (reverse result)\n        )\n    )\n)","user":"57fa06c9e4b0d3187e900958"},{"problem":25,"code":"(fn odds [lst] (cond\n    \t        (empty? lst )\n\t\t  '()\n    \t        (odd? (first lst))\n                 (concat (list (first lst)) (odds (rest lst)))\n\t\t(even? (first lst))\n                 (odds (rest lst))))","user":"576afc66e4b0a07e8fc18127"},{"problem":25,"code":"(fn Find-the-odd-numbers\n  [lst]\n  (filter #(not= (mod % 2) 0) lst))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":25,"code":"(fn [coll]\n \t(filter odd? coll) \n )","user":"5de6484ce4b0986d99407f66"},{"code":"(fn a [c] (keep #(if (odd? %) %) c))","problem":25,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":25,"code":"(fn [s] (filter (fn [n] (= (mod n 2) 1)) s))","user":"5f4ebab5e4b0102c7503396a"},{"problem":25,"code":"(partial filter #(== 1 (mod % 2)))","user":"5a43347ee4b0447ef91cc603"},{"code":"(fn [v] (filter odd? v))","problem":25,"user":"4f148418535d64f60314643a"},{"code":"(fn odds [coll] (filter (fn [x] (== (rem x 2) 1)) coll))","problem":25,"user":"4ecbff2f535df97575fdabe4"},{"code":"(fn f [x]\n   (if (and (seq x))\n    (if (odd? (first x))\n     (cons \n      (first x) (f (rest x))) \n     (f (rest x)))\n    '()\n    \n   )\n )","problem":25,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":25,"code":"#(filter (fn [item] \n           (> (rem item 2) 0)) %)","user":"53342e21e4b019098a6f8b8c"},{"problem":25,"code":"(fn [lister]\n  (for [x lister\n        :when (odd? x)]\n    x))","user":"54196d63e4b01498b1a71a34"},{"code":"#(filter odd? (into [] %))","problem":25,"user":"51e649bee4b0ab43cc26c214"},{"problem":25,"code":"(fn [&s] (filter #(odd? %) &s))","user":"5a2834dfe4b07f18be40aa64"},{"code":"(fn [x] (filter (fn [a] (= 1 (rem a 2))) x))","problem":25,"user":"4f040bbf535dcb61093f6b95"},{"code":"(fn odds [xs]\n  (cond (= xs []) []\n        (= 0 \n          (mod (first xs) 2)) (odds (rest xs))\n        :else \n          (cons (first xs) \n                (odds (rest xs)))))","problem":25,"user":"4dad8d4bc9a9d6ed1799dc57"},{"problem":25,"code":"(fn [coll]\n\t(filter #(= 1 (rem % 2)) coll)\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":25,"code":"(fn odd [c]\n  (filter odd? c)\n)","user":"578151ade4b0d36ec5835e83"},{"problem":25,"code":"filter (fn [x] (if (odd? x) x))","user":"57d1c183e4b0bd073c20236e"},{"problem":25,"code":";#(filter odd? %1)\n\nfilter odd?","user":"55614155e4b0c656e3ff17c4"},{"problem":25,"code":"(fn [s] (filter #(not (zero? (rem % 2))) s))","user":"589771f9e4b00487982d52bd"},{"problem":25,"code":"(fn [lst]\n (filter odd? lst))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":25,"code":"(fn [Myodds] (for [x Myodds :when (odd? x)] x))","user":"55769940e4b05c286339e070"},{"code":"(fn find-odd [coll]\r\n  (filter odd? coll))","problem":25,"user":"4fd170fce4b04c3a95aa0411"},{"problem":25,"code":"#(filter (fn [x](odd? x)) %)","user":"54595168e4b01be26fd74628"},{"code":"(fn foo [a]\n  (filter #(= 1 (mod  % 2)) a))","problem":25,"user":"536db108e4b0fc7073fd6e61"},{"code":"(fn [xs] (filter #(= 1 (mod  % 2)) xs))","problem":25,"user":"5097ea89e4b087ccf61a7af4"},{"problem":25,"code":"(fn [x] (filter #(when (odd? %) %) x))","user":"5412b531e4b01498b1a719d7"},{"problem":25,"code":"(fn myodd [x]\n  (filter odd? x))","user":"6063c4fae4b069485764ddc0"},{"code":"#(filter (fn foo [x] (= 1 (mod x 2))) %)","problem":25,"user":"4f8b20fce4b02e764a0a5178"},{"problem":25,"code":"(fn [x] (filter #(not(= (mod % 2) 0)) x))","user":"58aa19d3e4b01a0c0b23297c"},{"problem":25,"code":"(fn [coll] (filter #(not= (mod % 2) 0) coll))","user":"5702da69e4b08d47c97781e8"},{"problem":25,"code":"#(filter (fn [n] (= 1 (mod n 2))) %1)","user":"576aea4fe4b0a07e8fc18126"},{"problem":25,"code":"(fn sample [coll]\n  (for [x coll\n         :when (odd? x)]\n    x\n    )\n  )","user":"591f2e4ae4b09b4ee5954c44"},{"code":"#(for [n %\n  :when (odd? n)]\n      n)","problem":25,"user":"4fe97adde4b0547ebccb245e"},{"problem":25,"code":"(fn find-odd-nums[x](if (empty? x)'()(if (odd? (first x))(cons (first x) (find-odd-nums (rest x)))(find-odd-nums (rest x)))))","user":"57109477e4b09c608db70435"},{"problem":25,"code":"(fn [numlist]\n  (for [n numlist\n    :when (odd? n)]\n  n))","user":"5a47423be4b05d388ecb6b52"},{"problem":25,"code":"(fn algo \n  [lst]\n  (filter odd? lst)\n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"(fn [coll]\n    (letfn [(odd? [n]\n              (= 1 (mod n 2)))]\n    (filter odd? coll)))","problem":25,"user":"51030edbe4b00c483ae17700"},{"problem":25,"code":"(fn [c] (filter (fn [x] (= (mod x 2) 1)) c))","user":"5467f222e4b00cfc9eacc132"},{"code":"x","problem":25,"user":"52e635b3e4b09f7907dd146f"},{"problem":25,"code":"(fn [x] (filter (fn [y] (not= (mod y 2) 0)) x))","user":"53c6e25ee4b00fb29b2212a4"},{"code":"(fn [l] (remove even? (seq l)))","problem":25,"user":"4ed3c9d3535d44c135fd68f7"},{"code":"(fn odds [s]\n  (filter\n    #(= 1 (mod % 2)) s))","problem":25,"user":"4f9e0000e4b0dcca54ed6d2a"},{"code":"(fn [x] (for [a x :when (odd? a)] a))","problem":25,"user":"535920b2e4b04ce2eb3ed294"},{"problem":25,"code":"(fn [s]\n  (filter #(= 1 (mod % 2) ) s))","user":"56486d47e4b0284900eef62f"},{"problem":25,"code":"(fn [lst]\n  (filter (fn [x]\n    (= (mod x 2) 1))\n    lst))","user":"570708fce4b0b0fb43fd0687"},{"code":"(fn [d] \n (loop [a (into [] d) b '() c 0]\n    (if (= c (count a))\n      b\n      (recur\n        a \n        (if (not (zero? (mod (a c) 2))) (concat b (list (a c))) b)\n        (inc c)\n      )\n    )\n  )\n)","problem":25,"user":"4e8b73e4535d65386fec2120"},{"problem":25,"code":"(fn odd\n   [list]\n   (filter #(= (mod % 2) 1) list))","user":"5dc64aafe4b02f9375f4e1c2"},{"problem":25,"code":"(fn [s]\n  (filter  odd? \n           s)\n  )","user":"5481e55ce4b0e286459a1175"},{"problem":25,"code":"(fn [x]\n   (loop [[first & rest] (seq x)  res '()]\n          (if (empty? rest)\n            (if (odd? first) (sort (conj res first)) (sort res) )\n            (recur rest (if (odd? first) (conj res first) res)) )\n          )\n   )","user":"5a0a1748e4b0eab8c0448937"},{"code":"(fn [seq] (filter (fn [x] (odd? x)) seq))","problem":25,"user":"52b3959ce4b0c58976d9ad0d"},{"code":";( filter #(= 1 (mod % 2)) [4 2 1 6] )\n\nfilter #(= 1 (mod % 2))","problem":25,"user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn [coll] (filter (fn [item] (= 1 (mod item 2))) coll))","problem":25,"user":"5113beeee4b0350614f07a85"},{"problem":25,"code":"(fn [in] (filter #(= (mod % 2) 1) in))","user":"54b2e881e4b09f271ff37d32"},{"problem":25,"code":"(fn [x]  \n\t(filter \n     #(not (zero? (bit-and % 1))) x))","user":"55ed1dc5e4b0121d4835fdd4"},{"problem":25,"code":"(fn [x]\n  (loop [list1 x list2 '()]\n    (if (empty? list1)\n      list2\n      (if (odd? (first list1))\n        (recur (rest list1) (concat list2 (list (first list1))))\n        (recur (rest list1) list2)))))","user":"5936a67de4b02506e01a2982"},{"code":"(fn myodds [xs]\n  (filter odd? xs )\n)","problem":25,"user":"4f0d6686535d0136e6c22318"},{"problem":25,"code":"(fn [sqnc] (filter (fn [x] (odd? x)) sqnc))","user":"566f3e18e4b0a866af6896e7"},{"problem":25,"code":"#(remove nil? (map (fn [a] (when (odd? a) a)) %))","user":"595a3b41e4b066ee0a44afb7"},{"problem":25,"code":"(fn [sequ] (filter (complement even?) sequ))","user":"5d038e6ee4b0cc9c915881c4"},{"problem":25,"code":"(fn [coll] \n  (loop [result [] remaining coll] \n    (if (empty? remaining) \n      result \n      (if (= 0 (mod (first remaining) 2)) \n        (recur result (rest remaining))\n        (recur (conj result (first remaining)) (rest remaining))))))","user":"56708d8ce4b0a866af6896f6"},{"problem":25,"code":"(fn get-odd\n  [xs]\n  (filter #(= 1 (rem % 2)) xs))","user":"52f3a2afe4b05e3f0be25f13"},{"problem":25,"code":"(fn [x]\n  (reduce \n    (fn [c z] \n      (if (not= (mod z 2) 0) \n        (conj c z) \n        c\n      )\n    )\n  [] x) \n)","user":"5cd1fd2fe4b0ccb0619628f8"},{"code":"(fn odds [xs]\n  (filter #(= (rem % 2) 1) xs))","problem":25,"user":"4ff2430ae4b0678c553fc336"},{"problem":25,"code":"(fn [x] \n \n  (filter #(= 1 (mod % 2) ) x)\n)","user":"55db1665e4b0e31453f64ae0"},{"problem":25,"code":"(fn odd\n  [coll]\n  (filter #(not (= 0 (mod % 2))) coll))","user":"5a346d73e4b0ddc586f153c8"},{"code":"(fn odd-numbers [seq] (filter odd? seq))","problem":25,"user":"51daa721e4b02ceefd94776f"},{"problem":25,"code":"(fn\n  [s]\n  (filter odd? s))","user":"5ec02e20e4b00a66d4a95288"},{"problem":25,"code":"(fn [s]\n  (filter #(not= 0 (mod % 2)) s))","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn findodd [s] (\n  if (= nil (first s))\n     '()\n     (if (= 1 (rem (first s) 2))\n         (cons (first s) (findodd (next s)))\n         (findodd (next s))\n     )\n))","problem":25,"user":"4f06f90a535dcb61093f6c1b"},{"code":"(fn x [v]\n  (let [value (first v)]\n    (if value\n  \t  (if (odd? value)\n        (cons value (x (rest v)))\n        (x (rest v))\n      )\n      []\n    )\n  )\n)","problem":25,"user":"50c53708e4b08ad5e08ded0e"},{"problem":25,"code":"#(filter (fn [x] (= 1(mod x 2))) %)","user":"53c126fce4b00fb29b22125b"},{"code":"(fn [x] (filter #(= 1 (mod % 2)) x))","problem":25,"user":"4de18de7535d08e6dec9fde8"},{"problem":25,"code":"(fn [s] (filter #(> (mod % 2)  0) s))","user":"5ded9f51e4b093ff7172758a"},{"code":"(fn odder[seq]\n  (filter odd? seq))","problem":25,"user":"52dced9de4b09f7907dd13d7"},{"code":"(fn [coll]\n    (filter #(= (mod % 2) 1) coll))","problem":25,"user":"4f72f71be4b07046d9f4f03d"},{"code":"#(loop [lst % acc []]\n   (if (empty? lst)\n     acc\n     (if (even? (first lst))\n       (recur (rest lst) acc)\n       (recur (rest lst) (conj acc (first lst)))\n       )\n     )\n   )","problem":25,"user":"5181cf74e4b06547fbae1159"},{"problem":25,"code":"(fn get-odd \n  [mysequence]\n  (filter odd? mysequence)\n)","user":"53fe459ae4b0de5c418485f4"},{"code":"#(filter (fn [x] (if-not (zero? (rem x 2)) x)) %)","problem":25,"user":"4e68d816535d8ccf87e9fe8e"},{"problem":25,"code":"(fn [target]\n   (loop [odd [], left-overs target]\n     (if (empty? left-overs)\n       (apply list odd)\n       (recur\n         (if (= (rem (first left-overs) 2) 1)\n           (conj odd (first left-overs))\n           odd)\n         (rest left-overs)))))","user":"5d40f41ae4b05dd059a5436d"},{"code":"(fn [xs]\n  (filter #(= 1 (mod % 2)) xs))","problem":25,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":25,"code":"(fn [coll]\n  (filter #(not= (mod % 2) 0) coll))","user":"5426a59ee4b01498b1a71b1b"},{"problem":25,"code":"#(reverse\n   (reduce\n    (fn\n      [acc elt]\n      (if (= (mod elt 2) 0)\n        acc\n        (conj acc elt)))\n    '()\n    %))","user":"58a55694e4b01a0c0b23290b"},{"code":"(fn [x](filter #(> (rem % 2) 0) x))","problem":25,"user":"504f2d4fe4b0e7ad84dbc4c6"},{"code":"(fn odd[s] (filter odd? s))","problem":25,"user":"51ba59e4e4b0fe3ecfb4642d"},{"code":"(fn [x] (if ( (group-by odd? x) true) ((group-by odd? x) true) '()))","problem":25,"user":"4fe183a0e4b0dd6cd5ce3635"},{"code":"(fn nieparzyste [seq]\n  (filter #(= (rem % 2) 1) seq))","problem":25,"user":"4ec14602535dfed6da9c6daa"},{"code":"(fn [m] (filter #(= 1 (rem % 2)) m))","problem":25,"user":"4f031639535dcb61093f6a59"},{"problem":25,"code":"(fn [m] (filter (fn [x] (= (mod x 2) 1)) m))","user":"5457767ae4b01be26fd7460c"},{"problem":25,"code":"(fn fn1 [x]\r\n  (if (not (empty? x))\r\n      (if (== (rem (first x) 2) 1)\r\n          (conj (fn1 (rest x)) (first x))\r\n          (fn1 (rest x))\r\n       ) \r\n       '()\r\n  )\r\n)","user":"55cde227e4b0e31453f64a22"},{"code":"(fn odd [coll] (filter #(not (= 0 (rem % 2))) coll))","problem":25,"user":"52033e2ce4b030ee0c5b2716"},{"code":"reduce (fn [r n] (if (odd? n) (conj r n) r)) []","problem":25,"user":"4ea84ff8535d7eef308072f7"},{"code":"(fn [c]\n  (filter #(not= (rem % 2) 0) c))","problem":25,"user":"526e0831e4b03e8d9a4a7305"},{"problem":25,"code":"(fn oos [s]\n  (cond\n   (= '() s) '()\n   (even? (first s)) (oos (rest s))\n   :else (cons (first s) (oos (rest s)))))","user":"58138439e4b0f478707a0611"},{"code":"(fn  [x]\n  (reduce (fn [acc e]\n            (if-not (= 0 (rem e 2))\n              (conj acc e)\n              acc))\n         [] x))","problem":25,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [s] (filter #(odd? %1) s))","problem":25,"user":"50facb80e4b07934dda8b0d2"},{"problem":25,"code":"(fn [v] (filter (fn [x] (= (mod x 2) 1)) v))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":25,"code":"(fn [s]\r\n  (filter odd? s))","user":"60c06c14e4b0e0fa5f1b42a1"},{"code":"(fn [x]\r\n  (filter #(odd? %) x) \r\n)","problem":25,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn [lst] (remove even? lst))","problem":25,"user":"517fcd45e4b073af738d8b4a"},{"code":"(fn [sq]\n  (filter odd? sq))","problem":25,"user":"4ec59ce4535d6d7199dd36ab"},{"problem":25,"code":"(fn myodd [coll]\n  (filter odd? coll)\n)","user":"586cf7c1e4b01531a375e986"},{"problem":25,"code":"(fn oddd [s]\n  (if (empty? s)\n    s\n    (if (= (mod (first s) 2) 1)\n      (conj (oddd (rest s)) (first s))\n      (oddd (rest s))\n    )\n  )\n)","user":"554a3303e4b0a04f79299573"},{"code":"(fn [x] (filter (fn [item]\n            (= (mod item 2) 1)\n            ) x)\n  )","problem":25,"user":"50e9ed1de4b02d54280826d5"},{"code":"(fn [xs]\n  (filter #(not (zero? (mod %1 2))) xs))","problem":25,"user":"4e6a2e83535d8ccf87e9fea7"},{"code":"(fn [x](filter #(odd? %) x))","problem":25,"user":"4eb2fe60535d7eef30807354"},{"code":"#(loop [res '(), data %1] (cond (empty? data) (reverse res)\n                                 (odd? (first data)) (recur (conj res(first data)) (rest data))\n                                       :else (recur res (rest data))))","problem":25,"user":"52f5eefbe4b09b582c12c9cb"},{"code":"#(for [a % :when (odd? a)] a)","problem":25,"user":"531488f3e4b08068f379ed16"},{"problem":25,"code":"(fn [s] (filter (fn [x] (not= (mod x 2) 0)) s))","user":"55727fb5e4b09a3098a52545"},{"code":"(fn [xs]\n  (filter odd? xs\n   \n  \n  ))","problem":25,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":25,"code":"(fn [numbers]\n  (remove nil?\n  (for [x numbers]\n    (if (= (rem x 2) 1)\n      x))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"(fn [elems] (filter odd? elems))","problem":25,"user":"4e5c3612535d8a8b8723a2be"},{"code":"#(letfn [(worker [x n]\r\n           (if (= x ())\r\n             n\r\n             (recur (rest x) (if (odd? (first x)) (conj n (first x)) n))))]\r\n   (worker % []))","problem":25,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn filter-odd [lst] (\r\n  filter odd? lst\r\n))","problem":25,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":25,"code":"(fn retaval [coll] (filter odd? coll))","user":"58f602afe4b0438e51c2cee5"},{"problem":25,"code":"(fn [coll]\n  (loop [cs coll\n         acc []]\n    (if (nil? cs)\n      acc\n      (recur (next cs) (if (odd? (first cs))\n                         (conj acc (first cs))\n                         acc)))))","user":"56557d2de4b0f9d632dd8498"},{"problem":25,"code":"#(loop \n   [input %, soln []]\n   (if (nil? input)\n     soln\n     (if (= 1 (mod (first input) 2))\n       (recur (next input) (conj soln (first input)))\n       (recur (next input) soln)\n     )\n    )\n  )","user":"5e79fcb9e4b085ba37836e08"},{"problem":25,"code":"remove (fn [x] (= (mod x 2) 0))","user":"54461393e4b032a45b8693a5"},{"problem":25,"code":"(fn odd [x] \n    (cond (= 0 (count x)) x \n          (odd? (first x)) (conj (odd (rest x)) (first x)) \n          true (odd (rest x))))","user":"54d707bde4b0a52adc2e2025"},{"code":"(fn oddnum [x]\n  (filter odd? x))","problem":25,"user":"51026750e4b00c483ae176f7"},{"problem":25,"code":"(fn [c](filter odd? c))","user":"55975569e4b031d6649c9b8e"},{"problem":25,"code":"(fn find-odd [nums]\n  (loop [remaining nums new-nums []]\n    (if (empty? remaining)\n      new-nums\n      (if (odd? (first remaining))\n        (recur (rest remaining) (conj new-nums (first remaining)))\n        (recur (rest remaining) new-nums)))))","user":"580b79e4e4b0a837a8b30d4a"},{"problem":25,"code":"#(filter (fn [x] (not= 0 (mod x 2))) %1)","user":"5cead199e4b0a17bb84e2bd4"},{"code":"(fn [xs] (filter #(odd? %) xs))","problem":25,"user":"4e667f67535d8ccf87e9fe77"},{"code":"(fn [xs]\n  ((fn impl [xs rs]\n     (if (nil? xs)\n       (reverse rs)\n       (if (odd? (first xs))\n         (impl (next xs) (cons (first xs) rs))\n         (impl (next xs) rs))))\n  xs []))","problem":25,"user":"521392bce4b0d32679a5065e"},{"code":"filter #((complement even?) (mod % 2))","problem":25,"user":"4f26d6d9e4b0d6649770a007"},{"problem":25,"code":"(fn odd [coll] (filter odd? coll))","user":"560aa7b0e4b05f002753df02"},{"code":"(fn my-find-odd [xs] \n  (filter #(not (zero? (rem % 2))) xs)\n)","problem":25,"user":"5273b883e4b03e8d9a4a748f"},{"problem":25,"code":"(fn [arg] (filter (fn [vall] (= (rem vall 2) 1)) arg))","user":"5804b491e4b0a837a8b30cac"},{"code":"filter #(not= 0 (mod % 2))","problem":25,"user":"4e6537f1535d8ccf87e9fe70"},{"problem":25,"code":"#(for [s % \n     :when (odd? s)]\ns)","user":"578fc3d2e4b0ebec4cfb759b"},{"problem":25,"code":"(fn[args] (filter odd? args))","user":"5721f13ce4b0c5bde472c0be"},{"problem":25,"code":"filter (fn[n] (odd? n))","user":"540aa29de4b0addc1aec66f1"},{"problem":25,"code":"(fn [listy] (loop [eves '() thelist listy] (if (empty? thelist) (reverse eves) (if (even? (first thelist)) (recur eves (rest thelist)) (recur (cons (first thelist) eves) (rest thelist)) ))))","user":"5695b86de4b0dcc4269f412b"},{"code":"(fn odd-nums [data]\n  (filter odd? data))","problem":25,"user":"53333e7be4b019098a6f8b7e"},{"code":"(fn [seq]\n  (filter (fn [x] (if (= (rem x 2) 0) false true)) seq)\n)","problem":25,"user":"4fc4fe59e4b081705acca36a"},{"problem":25,"code":"(fn [s]\n  (filter #(not (even? %)) s))","user":"56082adae4b046a4fc0ac008"},{"problem":25,"code":"(fn\n  [coll]\n\t(filter #(odd? %) coll))","user":"5f9c3f63e4b0715f5002d820"},{"code":"(fn odd [xs]\n  (if (empty? xs) '()\n    (if (not= (rem (first xs) 2) 0)\n      (cons (first xs) (odd (rest xs)))\n        (odd (rest xs)))))","problem":25,"user":"50ed1ce7e4b01236b1d49839"},{"code":"(fn find_odd [lst] (filter #(odd? %) lst))","problem":25,"user":"4e49fc29535dc968683fc4cb"},{"code":"(fn o [l]\n  (loop [res[] list l]\n    (if (empty? list)\n      res\n      (if (= (mod (first list)\n                  2)\n             1)\n        (recur (conj res (first list)) (rest list))\n        (recur res (rest list))\n        ))))","problem":25,"user":"516bc02ce4b005fd0cdf85c5"},{"problem":25,"code":"(fn [xs]\n  (reduce #(if (odd? %2) (conj %1 %2) %1) [] xs))","user":"5cc75ffce4b0ccb061962836"},{"problem":25,"code":"(fn [sq] \n  (filter (fn [x] (odd? x)) sq))","user":"5db16084e4b010eb3c36cd01"},{"problem":25,"code":"(fn [s] (for [i s :when (odd? i)] i))","user":"59ac757fe4b00adcf69795d3"},{"problem":25,"code":"(fn find-odd [s]\n  (filter odd? s))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"code":"#(filter (fn [x] (if (not= (mod x 2) 0) x)) %)","problem":25,"user":"4f06c6df535dcb61093f6c13"},{"problem":25,"code":"(fn [v] \n  (filter (fn [x] (= (rem x 2) 1)) v))","user":"5ec03772e4b00a66d4a95289"},{"problem":25,"code":"(fn [coll] (filter #(< 0 (mod % 2)) coll))","user":"60bf2477e4b0e0fa5f1b4291"},{"code":"(fn just-odd [coll]\n  (filter odd? coll))","problem":25,"user":"53713ed9e4b0fc7073fd6eaf"},{"problem":25,"code":"(fn [coll]\n  (for [n coll :when (odd? n)] n))","user":"5b0c0c90e4b0cc2b61a3bddd"},{"code":"(fn philm [x] (if (= (count x) 0) '()\n                       (if (= 1 (mod (first x) 2))\n                           (conj (philm (rest x)) (first x))\n                         (philm (rest x)))))","problem":25,"user":"4f524d11e4b03ad3f0c10d34"},{"code":"(fn [coll] \n  (filter odd? coll))","problem":25,"user":"4ebd4448535dfed6da9c6d8f"},{"code":"#(filter (fn [x] (zero? (mod (dec x) 2))) %)","problem":25,"user":"4ffee245e4b0678c553fc3f8"},{"problem":25,"code":"(fn [myseq]\n  (loop [oldseq (seq myseq) newseq []]\n    (if (empty? oldseq)\n      newseq\n      (let [item (first oldseq)]\n        (if (odd? item)\n          (recur (rest oldseq) (conj newseq item))\n          (recur (rest oldseq) newseq))))))","user":"56197b47e4b053970a773af8"},{"code":"(fn odds\n  ([seq] (odds seq []))\n  ([seq out]\n    (if (= (count seq) 0)\n      out\n      (if (= (mod (first seq) 2) 1)\n        (odds (next seq) (conj out (first seq)))\n        (odds (next seq) out))\n    )))","problem":25,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(fn [alist] (filter #(= 1 (mod %1 2)) alist))","problem":25,"user":"4e45b002535dc968683fc4ae"},{"problem":25,"code":"(fn [coll] \n  (filter (fn [x] (= 1 (mod x 2))) coll))","user":"5519a856e4b00ace28fe6e30"},{"problem":25,"code":"#(filter\n   odd?\n   %)","user":"56e09e01e4b0ca2494a0960c"},{"problem":25,"code":"remove #(even? %)","user":"5b5fa65fe4b0c6492753e6f6"},{"problem":25,"code":"(fn [s]\n  (remove nil? (map #(if (odd? %) %)\n         s))\n)","user":"4f29e69ae4b0d6649770a036"},{"code":"(fn findOdds [lst]\n  (filter odd? lst))","problem":25,"user":"537d4a69e4b06839e8705e8a"},{"problem":25,"code":"(fn odd-numbers\n  ([coll]\n   (odd-numbers coll '()))\n  ([coll return-list]\n   (if (empty? coll)\n     (sort return-list)\n     (let [number (first coll)]\n       (if (odd? number)\n         (recur (rest coll) (conj return-list number))\n         (recur (rest coll) return-list))))))","user":"5fdba25ae4b05ac5b16ea135"},{"problem":25,"code":"(fn [col] (filter #(not (= 0 (mod % 2))) col))","user":"551e312ce4b030e6a24d00e5"},{"code":"(fn my-odds [xs]\n  (filter #(= 1 (mod % 2)) xs))","problem":25,"user":"533ce38ce4b085b17e897d77"},{"code":"(fn filterodd [l]\n\t(reverse (loop [m l s '()]\n\t\t(let [h (first m) t (rest m)]\n\t\t(if (empty? m) s (if (= 1 (rem h 2)) (recur t (conj s h)) (recur t s)))\n\t)))\n)","problem":25,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [col]\n  (filter odd? col))","problem":25,"user":"4e7d9257535db169f9c796dd"},{"code":"(fn [seq] \n    (filter \n      (fn [x] (= 1 (mod x 2)))\n      seq))","problem":25,"user":"4f03818e535dcb61093f6b00"},{"code":"#(filter (fn [x] (if (odd? x) x nil)) %1)","problem":25,"user":"511060fae4b04c71fce993f1"},{"code":"(fn [elems]\n  (filter #(odd? %) elems))","problem":25,"user":"536f871de4b0fc7073fd6e7f"},{"problem":25,"code":"(fn filter-odds [x] (filter odd? x))","user":"57040195e4b08d47c9778202"},{"problem":25,"code":"(fn [x]\n  (filter (fn [n] (= (mod n 2) 1)) x))","user":"570dc955e4b0b0fb43fd06e0"},{"code":"(fn [s] (filter (fn [x] (odd? x)) s    ))","problem":25,"user":"5139ec21e4b067e25a345ebe"},{"problem":25,"code":"(fn custom-odd [seq]\n  (letfn [(inner-odd [seq current]\n            (if (empty? seq)\n              current\n              (recur (rest seq) (let [x (first seq)]\n                                  (if (odd? x)\n                                    (conj current x)\n                                    current)))))]\n    (inner-odd seq [])))","user":"5508b405e4b06e50f9beb110"},{"code":"(fn [l] (filter (fn [v] (not= 0 (mod v 2))) l))","problem":25,"user":"4f033aa3535dcb61093f6a7c"},{"code":"(fn [s] (filter #(= (mod % 2) 1) s))","problem":25,"user":"4de2f44f535d08e6dec9fdec"},{"problem":25,"code":"#(loop [l % a []]\n   (if (empty? l)\n     a\n   (if (odd? (first l))\n     (recur (rest l)\n            (conj a (first l)))\n     (recur (rest l)\n            a))))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":25,"code":"(fn mySum\n  [sequence]\n  (reduce \n   (fn [oddNums curr]\n     (if (odd? curr)\n       (conj oddNums curr)\n       oddNums))\n   []       \n   sequence))","user":"54e009dce4b024c67c0cf7b2"},{"code":"(fn [x] \r\n  (filter \r\n    (fn [element] (== (mod element 2) 1))\r\n    x\r\n  )\r\n)","problem":25,"user":"4df54fd9535d08e6dec9fe30"},{"problem":25,"code":"#(filter (fn [n] (not (= 0 (mod n 2)))) %)","user":"564a560ae4b0284900eef654"},{"problem":25,"code":"filter (fn [x] (if (= 1 (rem x 2)) x))","user":"5a216b30e4b0ff51aa4b32ab"},{"problem":25,"code":"(fn od? [l]\n  (filter odd? l))","user":"5761724de4b0994c1922fb89"},{"code":"(fn [coll]\n  (filter #(pos? (mod % 2)) coll))","problem":25,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"#(for [x % :when (= (mod x 2) 1)] x)","problem":25,"user":"519dbf26e4b037b32803f9bd"},{"problem":25,"code":"(fn [a]\n  (filter odd? a)\n  )","user":"5d94a878e4b0d3f9b434ad29"},{"problem":25,"code":"(fn[collection] \n\n  (loop [result '(), x collection] \n\n    (if (= x '())  \n\n       (reverse result) \n\n      ( if (= 1 (rem (first x) 2))\n\n           (recur (conj result (first x)) (rest x))(recur result (rest x)) ))))","user":"59228b00e4b026ae38521281"},{"code":"(fn [s]\n  (remove nil? \n          (map #(if (odd? %) %) s)\n   )\n)","problem":25,"user":"533e8b54e4b085b17e897d8f"},{"problem":25,"code":"#(sort (reduce conj '() (filter odd? %)))","user":"58dd21a9e4b0a4d5acaab6b3"},{"code":"(fn odds [listy]\n (filter #(not= (mod % 2)0) listy))","problem":25,"user":"53120cb5e4b08068f379ecf0"},{"code":"(partial filter #(= 1 (mod % 2)))","problem":25,"user":"4e7e032b535db169f9c796fc"},{"problem":25,"code":"filter (fn[x] (not= (rem x 2) 0))","user":"5f0a4904e4b09a3f05b71805"},{"problem":25,"code":"(fn [a] (filter #((complement =) 0 (mod %1 2)) a))","user":"53320dd1e4b019098a6f8b71"},{"problem":25,"code":"(fn odds [x] \n       (remove even? x))","user":"5654cb2de4b0f9d632dd848b"},{"problem":25,"code":"(fn [xs] (filter (fn [x] (not= 0 (rem x 2))) xs))","user":"56e37659e4b03a7c14b85a44"},{"code":"#(filter (fn [x] (odd? x)) %1)","problem":25,"user":"501adc55e4b0968d2b1d44af"},{"problem":25,"code":"(fn [l]\n  (filter odd? l)\n )","user":"5c72c2b9e4b0fca0c16227ab"},{"problem":25,"code":"#(filter (fn [s] (= (mod s 2) 1)) %)","user":"55279ff2e4b0ffed3738f931"},{"problem":25,"code":"reduce (fn [accum item] (if (= (mod item 2) 0) accum (conj accum item))) []","user":"5f184a46e4b091ba50b4dbd4"},{"problem":25,"code":"(fn filter-odds [seq] (filter odd? seq))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":25,"code":"#(filter\n  (fn [n]\n    (not\n     (zero?\n      (mod n 2))))\n  %)","user":"56ae7589e4b03c432f187360"},{"code":"filter (fn [x] (if (= 0 (rem x 2)) false true\n              \n              \n              ))","problem":25,"user":"52c911dde4b0c2d177d6213a"},{"problem":25,"code":"#(loop [s % r '()]\n\n   (if (nil? (first s))\n\n     r\n\n     (if (zero? (mod (first s) 2))\n\n       (recur (rest s) r)\n\n       (recur (rest s) (concat r (list (first s)))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":25,"code":"#(loop [x '() y %]\n   (if (empty? y)\n     (reverse x)\n     (if (odd? (first y))\n       (recur (cons (first y) x) (rest y))\n       (recur x (rest y)))))","user":"5977653be4b01722bebd4ced"},{"problem":25,"code":"filter (fn[x] (not (= (mod x 2) 0)))","user":"55f6fafbe4b06e875b46cea1"},{"problem":25,"code":"#(filter (fn [el]\n            (= (mod el 2) 1)) %)","user":"5b8aa82ee4b0c0b3ffbd49b3"},{"problem":25,"code":"#(filter (fn [x] (= (rem x 2) 1) ) %)","user":"5c21a531e4b07e362c230582"},{"problem":25,"code":"(fn [coll](->> coll (filter odd?)))","user":"5d40493ae4b05dd059a54364"},{"problem":25,"code":"(fn oddN [coll]\n  (if (empty? coll)\n    nil\n    (concat (if (odd? (first coll)) [(first coll)] []) (oddN (rest coll)))))","user":"56c0aeb8e4b060a8e693e3af"},{"code":"(fn odd [coll] (filter (fn [x] (= (mod x 2) 1)) (seq coll)))","problem":25,"user":"525cd5bee4b0cb4875a45d4b"},{"code":"(fn findodds [x] (filter odd? (seq x)))","problem":25,"user":"4eeb8f68535d93acb0a668a9"},{"problem":25,"code":"(fn [incoming-list] (filter odd? incoming-list))","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":25,"code":"#(reverse (loop [result () nseq %] (if (nil? nseq) result (recur (if (odd? (first nseq)) (conj result (first nseq)) result) (next nseq)))))","user":"5a6b8a9ae4b0512ff01cda3f"},{"problem":25,"code":"#(loop [odds '()\n        left %]\n   (if (empty? left)\n     odds\n     (if (= 1 (mod (first left) 2))\n       (recur (concat odds (list (first left))) (rest left))\n       (recur odds (rest left)))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":25,"code":"(fn odd-numbers [lat]\n  (filter odd? lat))","user":"554a2df2e4b0a04f79299572"},{"problem":25,"code":"#(for [x %\n       :when (odd? x)]\n      x)","user":"5b198eace4b03cfeda66ecbb"},{"problem":25,"code":"(fn [vs] (filter #(= 1 (rem % 2)) vs))","user":"5e41a67be4b01d43a70e8e56"},{"problem":25,"code":"(fn odds [sq]\n  (filter #(odd? %) sq))","user":"55638fe1e4b0c656e3ff17ee"},{"code":"(fn [s]\n  (for [x (seq s)\n        :when (odd? x)]\n    x))","problem":25,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn odd [x]\n  (if (empty? x)\n    []\n    (if (= (mod (first x) 2) 1)\n      (cons (first x) (odd (rest x)))\n      (odd (rest x)))))","problem":25,"user":"51f630cee4b06ff1c25c52bd"},{"problem":25,"code":"(fn odds [a] ( if(= a []) ()\n\n(if (= (mod (first a) 2) 0)\n(odds (rest a))\n(conj  (odds (rest a)) (first a) ))\n\n ) )","user":"602bca69e4b0d5df2af22267"},{"problem":25,"code":"(fn [v] \n  (remove #(== 0 (mod % 2)) v)\n)","user":"55188c5de4b06a49daca83cc"},{"code":"(fn o [x] \n  (cond (empty? x) '()\n   (not= 0 (rem (first x) 2)) (cons (first x) (o (rest x)))\n    :else (o (rest x))))","problem":25,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":25,"code":"(fn my-odd [n]\n\t(loop [acc [] x n]\n\t\t(if (empty? x)\n\t\tacc\n\t\t(recur\n         (if\n           (false?\n            ((fn is-odd? [n]\n               (if (= n 0)\n                 false\n                 (not (is-odd? (dec n))))) \n                 (first x)))\n                 acc\n           (conj acc (first x))\n           )\n                (rest x))\n          )))","user":"56caea02e4b0ea9b8538f721"},{"code":"(fn [col] (filter #(isa? clojure.lang.Ratio (class (/ % 2))) col))","problem":25,"user":"52692e3be4b03e8d9a4a71d6"},{"problem":25,"code":"(fn [i] (keep  #(if (= (rem % 2) 1) % nil) i))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":25,"code":"(fn [seq] (filter #(not (= (mod % 2) 0)) seq))","user":"5f6f8327e4b02876ed9fd075"},{"code":"(fn [seq]\n  (filter odd? seq)  \n    \n)","problem":25,"user":"4edc158b535d10e5ff6f5320"},{"problem":25,"code":"#((fn f [l s] \n(if \n(empty? l) \ns \n(f (rest l) \n(\nif (not= (mod (first l) 2) 0) \n(conj s (first l))\ns\n)\n))\n) % [])","user":"58a6bd35e4b01a0c0b232931"},{"code":"#(loop [col %1\n        acc []]\n   (cond\n    (empty? col) acc\n    (= (mod (first col) 2) 0) (recur (rest col) acc)\n    :else                     (recur (rest col) (conj acc (first col)))))","problem":25,"user":"52fc89b2e4b047fd55837019"},{"problem":25,"code":"(let [odd #(= 1 (mod % 2))]\n  #(filter odd %))","user":"5b1bde2ce4b03cfeda66ece6"},{"code":"(fn [x] (filter (fn [v] (= (mod v 2) 1)) x))","problem":25,"user":"504e685fe4b0f6ff3350c4ae"},{"code":"(fn [xs] (reduce (fn [memo item] (if (odd? item) (conj memo item) memo)) [] xs))","problem":25,"user":"509ac9cae4b050a581d3d579"},{"problem":25,"code":"(fn [list] (reverse (reduce #(if (odd? %2) (conj %1 %2) %1) '() list)))","user":"5c8adb0ae4b048ec896c595f"},{"problem":25,"code":"(fn func [input]\n  (filter #(odd? %) input))","user":"5b33050ee4b025bcb146f32d"},{"code":"(fn [aseq] (filter odd? aseq ) )","problem":25,"user":"5135a74ae4b04ac1f358dd46"},{"problem":25,"code":"#(filter (fn [x](= (even? x) false)) %)","user":"5d46969fe4b07c84aa5ae6ac"},{"problem":25,"code":"(fn [listy]\n  (filter odd? listy))","user":"59369515e4b02506e01a297e"},{"problem":25,"code":"(fn\n\t[lst]\n\t(filter odd? lst))","user":"57f81544e4b0d3187e900917"},{"problem":25,"code":"(fn \n  [seqParam]\n  (reduce (fn [outSeq value]\n            (if (not= (mod value 2) 0)\n              (conj outSeq value)\n              outSeq))\n          []\n          seqParam))","user":"5b69bf95e4b0c6492753e790"},{"problem":25,"code":"(fn [col] (filter #(not= (mod %1 2) 0) col))","user":"54f1b4e7e4b024c67c0cf8b5"},{"problem":25,"code":"(fn [seq]\n  (for [elem seq\n        :when (odd? elem)]\n    elem))","user":"56478a82e4b0284900eef61e"},{"problem":25,"code":"(fn find_odd_numbers\n  [lst]\n  (filter odd? lst))","user":"5bbbd077e4b0a20761a23615"},{"problem":25,"code":"(fn f\n  [lst]\n  (filter odd? lst))","user":"59e778aae4b0249b72820716"},{"code":"(fn [s](filter odd? s))","problem":25,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn [x] (filter (fn [y] (not (integer? (/ y 2)))) x))","problem":25,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn [xs]\n  (loop [ys xs\n         result '()]\n    (if (empty? ys)\n      result\n      (recur (rest ys) (if (odd? (first ys))\n                          (concat result (list (first ys)))\n                          result)))))","problem":25,"user":"4db653f6535d1e037afb217c"},{"problem":25,"code":"#(filter (fn my-odd? [n]\n  (= 1 (mod n 2))) %)","user":"5a1ef1abe4b0ff51aa4b327c"},{"problem":25,"code":"(fn getOdd [arr]\n    (if (= 0 (count arr))\n      '()\n      (if (odd? (first arr))\n        (conj (getOdd (rest arr)) (first arr))\n        (getOdd (rest arr))\n      )\n    )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":25,"code":"(fn [seq] (for [x seq :when (odd? x)] x))","user":"5922a513e4b026ae38521286"},{"problem":25,"code":"(fn odd [x] (filter #(not (= 0 (mod % 2))) x))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [lst] (filter #(= (mod % 2) 1) lst))","problem":25,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn odd [n] (filter odd? n))","problem":25,"user":"4e51fccf535d302ef430da6b"},{"code":"(fn [x]\n  (filter #(not= (mod % 2) 0) x))","problem":25,"user":"4f954c6be4b0dcca54ed6ccb"},{"problem":25,"code":";filter #(= (mod %1 2) 1)\nfilter odd?","user":"565370bce4b0f9d632dd8472"},{"problem":25,"code":"(fn [my-seq] (filter odd? my-seq))","user":"5a055eace4b01bb0ae8afdb1"},{"problem":25,"code":"(fn find-odds [coll]\n  (filter odd? coll))","user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn  [x] \r\n  (loop [ r nil\r\n  \t i x ]\r\n\t(if (nil? (first i))\r\n\t  (reverse r)\r\n\t  (if (odd? (first i))\t\t\r\n\t\t(recur (conj r (first i)) (rest i))\r\n\t\t(recur r (rest i))\r\n\t\t))))","problem":25,"user":"4dd67f10535d2dad7130b5c9"},{"code":"#(filter (fn [x] (not (zero? (mod x 2)))) %)","problem":25,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [s] (filter #(not= 0 (rem % 2)) s))","problem":25,"user":"529f8b2fe4b04e0c58e87bb2"},{"problem":25,"code":"(fn odd [sq]\n\n (filter (fn odd_check [n]\n\n   (not ( = (mod n 2) 0))) sq))","user":"589ad631e4b00487982d531c"},{"problem":25,"code":"(fn [x]\n  (filter #(= 1 (rem % 2)) x)\n)","user":"5776558ee4b0979f89651633"},{"code":"(fn [coll] \n  (filter #(not (= 0 (mod % 2))) coll))","problem":25,"user":"50052fd0e4b0678c553fc45d"},{"problem":25,"code":"; filter?, if %2\n(fn [coll] (filter odd? coll))","user":"5e694e8fe4b04a83ad7cd26c"},{"problem":25,"code":"(fn [xs] (loop [it (first xs) others (rest xs) ys []] (if (nil? it) ys (recur (first others) (rest others) (if (= 0 (mod it 2)) ys (conj ys it))))))","user":"57b65420e4b0fbc9809a27be"},{"problem":25,"code":"(fn\n  [init]\n  (loop [coll init\n         result '()]\n    (if(empty? coll)\n      (reverse result)\n      (if (odd? (first coll))\n        (recur (rest coll) \n               (conj result (first coll)))\n        (recur (rest coll) \n                result)))))","user":"53d6b266e4b0e771c3025459"},{"problem":25,"code":"(fn [items] (filter #(= (mod % 2) 1) items))","user":"58e8014be4b056aecfd47ce1"},{"code":"(fn [s] (filter (fn [x] (= 1 (mod x 2))) s))","problem":25,"user":"5191a9e6e4b0d428d29dc1b5"},{"problem":25,"code":"(fn [coll] (filter (fn [item] (not= 0 (mod item 2))) coll))","user":"58a413b5e4b02bd94d917f07"},{"problem":25,"code":"reduce (fn [new-map number]\n         (if (odd? number)\n           (conj new-map number)\n           new-map))\n         []","user":"5d96edeae4b0d3f9b434ad35"},{"problem":25,"code":";; Using a list comprehension\n(fn [coll]\n  (for [v coll\n        :when (odd? v)]\n     v))\n\n;; Using reduce\n;reduce (fn [acc v]\n;         (if (odd? v)\n;           (conj acc v)\n;           acc)) []","user":"5d35f997e4b01671435dbd1a"},{"problem":25,"code":"(fn f [x] \n  (reduce (fn [l e] (if (odd? e) (conj l e) l)) [] x))","user":"53c0bc5fe4b00fb29b221257"},{"problem":25,"code":"(fn\n  [lst]\n  (filter odd? lst)\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"filter #(when (ratio? (/ % 2)) %)","problem":25,"user":"4fb2b1a1e4b081705acca292"},{"problem":25,"code":"(fn \n  [xs]\n  (filter #(not= (rem % 2) 0) xs))","user":"5a16da30e4b0ff51aa4b31cc"},{"problem":25,"code":"filter #(= (mod % 2)  1)","user":"5895385fe4b00487982d5279"},{"problem":25,"code":"(fn [seq] (filter #(not= % nil) (map #(if (odd? %) % nil) seq)))","user":"57aa2b97e4b0b8559636fc66"},{"problem":25,"code":"(fn odd [sequ]\n  (loop [input sequ output '()]\n    (if (= 0 (count input))\n        (reverse output)\n        (let [z (first input)]\n          (recur (rest input) (if (= 1 (mod z 2)) (cons z output) output))\n        )\n    )\n  )\n)","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":25,"code":"(fn [x]\n  (\n   filter (fn[y]( = (mod y 2) 1\n                  )) x\n   )\n  )","user":"5499e26ae4b03163384f4707"},{"code":"filter (fn [a] (if(= 1 (mod a 2)) a nil))","problem":25,"user":"4f98c161e4b0dcca54ed6cf5"},{"code":"(fn odds [xs]\n  (if (empty? xs)\n    '()\n    (if (even? (first xs))\n      (odds (rest xs))\n      (conj (odds (rest xs)) (first xs)))))","problem":25,"user":"52ee20bbe4b05e3f0be25ec2"},{"code":"(fn [coll] \n  (remove nil? \n          (map #(if (= 1 (rem % 2)) %) coll)))","problem":25,"user":"52112be7e4b07aea8afc4f68"},{"problem":25,"code":"#(filter (fn[x](= (mod x 2) 1)) %)","user":"56b6c962e4b0982f16b37e3e"},{"problem":25,"code":"(fn get_all_odd [my_list]\n  (filter (fn [n] (= (mod n 2) 1)) my_list))","user":"54060ae8e4b0addc1aec668e"},{"problem":25,"code":"(fn [s] (filter #(not= (rem % 2) 0) s))","user":"5674f874e4b05957ce8c6144"},{"problem":25,"code":"(fn [numbers]\n  (filter #(odd? %) numbers)\n  )","user":"4ed82830535d10e5ff6f52f7"},{"problem":25,"code":"(fn [start]\n  (reverse (reduce (fn [out part] (if (odd? part) (conj out part) out)) '() start )))","user":"5f36dc06e4b0574c87022c4c"},{"problem":25,"code":"(fn [x] (filter #(> (mod % 2 ) 0) x))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":25,"code":"(fn [c]\n  (filter odd? c)\n  )","user":"58ec5e86e4b056aecfd47d5f"},{"code":"(fn [x]\n  (filter (fn [y] (not= (mod y 2) 0)) x))","problem":25,"user":"4f7ef32be4b06e829148e1d4"},{"problem":25,"code":"(fn func [x] (filter #(odd? %) x))","user":"599b457ae4b07157cc8dab1f"},{"code":"(fn [_seq] (filter odd? _seq))","problem":25,"user":"4f551054e4b0a7574ea717f5"},{"problem":25,"code":"(fn odd [collection]\n  (filter odd? collection))","user":"5712418fe4b09c608db70455"},{"problem":25,"code":"(fn [l] \n  (filter #(= 1 (mod % 2)) l)\n)","user":"5c3e7b04e4b08cd430848e83"},{"code":"filter #(odd? %)","problem":25,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":25,"code":"(fn\n  [collection]\n  (filter #(odd? %) collection))","user":"562f9f5ae4b0ab312c17ebce"},{"code":"(fn impares [coll]\n  (filter odd? coll)\n  )","problem":25,"user":"4e905ed4535d65386fec2154"},{"problem":25,"code":"(fn [ls] (filter #(> (mod % 2) 0) ls))","user":"55815973e4b05c286339e0f6"},{"problem":25,"code":"(fn odd-numbers-in-coll\n  [coll]\n  (filter #(= 1 (mod % 2)) coll))","user":"5b90f433e4b0c0b3ffbd4a14"},{"problem":25,"code":"(fn find_odd [values] ((partial filter odd?) values))","user":"5e69589de4b04a83ad7cd26d"},{"code":"(fn odd [x] (filter #(odd? %) x))","problem":25,"user":"4eb885a8535dfed6da9c6d49"},{"problem":25,"code":"(fn [coll] (for [x coll :when (> (rem x 2) 0)] x))","user":"545bdf75e4b01be26fd7465b"},{"problem":25,"code":"(fn foddnums [l] (filter #(not= (mod % 2) 0) l ) )","user":"58622733e4b0f14aab7c8803"},{"code":"#(filter (fn [x] (false? (zero? (mod x 2)))) %)","problem":25,"user":"5250b7a5e4b0541d1855b83e"},{"code":"(fn [tony]\r\n  (filter odd? tony))","problem":25,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":25,"code":"(fn [n] (filter #(= (mod % 2) 1) n))","user":"58d737cee4b03c36ff7e5982"},{"code":"(fn [s]\n  (filter #(= (mod % 2) 1) s)\n)","problem":25,"user":"52c872b6e4b0c2d177d62134"},{"problem":25,"code":"(fn [seq] \n  (keep (fn [n] \n          (when (= 1 (rem n 2)) n)) \n        seq))","user":"56c44c34e4b05cc29241ee96"},{"problem":25,"code":"(fn [l]\n   (filter \n    #(= (mod % 2) 1)\n    l))","user":"55e4487ce4b050e68259b44c"},{"code":"(fn odd-pass-filter [ls] (filter #(= (rem % 2) 1) ls))","problem":25,"user":"518df0f0e4b0c929d50502e1"},{"code":"(fn [col]\n  (filter #(not= (mod % 2) 0) col))","problem":25,"user":"53762466e4b06839e8705e1e"},{"problem":25,"code":"#(for [i %\n         :when (odd? i)]\n     i)","user":"559067ace4b0277789237670"},{"code":"(fn [x]\n  (filter (fn [y] (odd? y)) x))","problem":25,"user":"500b61b1e4b03d00572d2d81"},{"problem":25,"code":"(fn [s]\n  (loop [ls s, acc '()]\n    (if (empty? ls)\n      (reverse acc)\n      (if (= (mod (first ls) 2) 1)\n        (recur (rest ls) (conj acc (first ls)))\n        (recur (rest ls) acc)))))","user":"566096bee4b068f2fe63dc59"},{"problem":25,"code":"(fn [input] (filter #(not= 0 (mod % 2)) input))","user":"58e92d62e4b056aecfd47d05"},{"code":"(fn get-odd [coll]\n  (filter odd? coll))","problem":25,"user":"52ec1dfbe4b0705949c4444b"},{"problem":25,"code":"filter #(= (bit-and % 0x1) 1)","user":"5e0e836fe4b099d064962fa8"},{"code":"keep-indexed  #(if (odd? %2) %2)","problem":25,"user":"5098bce3e4b0cae2931060a0"},{"problem":25,"code":"#(filter (fn[x](= (rem x 2) 1)) %)","user":"55a3ef22e4b0acc240e31540"},{"problem":25,"code":"(fn odd-list\n  [x]\n  \t(filter odd? x)\n  )","user":"56cdda13e4b0ea9b8538f752"},{"code":"(fn [x]\n  (loop [x x l '()]\n    (if (empty? x)\n      (sort l)\n      (if (odd? (first x))\n        (recur (rest x) (conj l (first x)))\n        (recur (rest x) l) ))))","problem":25,"user":"51071f2ee4b05b2b4eee748e"},{"problem":25,"code":"(fn [items]\n  (remove nil?\n    (map\n      (fn [x]\n        (if-not\n          (= (rem x 2) 0)\n          x\n          nil))\n      items)))","user":"5d0859fbe4b0cc9c91588208"},{"problem":25,"code":"(fn [coll]\n  (filter #(= (mod % 2) 1) coll))","user":"561a9380e4b053970a773b07"},{"code":"(fn [s]\n  (filter (fn [x]\n            (= (mod x 2) 1)) s))","problem":25,"user":"501dd61de4b051153f3b5b7d"},{"problem":25,"code":"(fn myodd\n\t[myseq]\n\t(sort (loop\n\t\t[acc '() myrest myseq]\n\t\t(if (empty? myrest)\n\t\t\tacc\n\t\t\t(if (= 1 (rem (first myrest) 2))\n\t\t\t\t(recur (cons (first myrest) acc)  (rest myrest) )\n\t\t\t\t(recur acc (rest myrest)))\n\t\t\t))))","user":"55897fe2e4b059ccff29b205"},{"problem":25,"code":"filter (fn [n] (not (= (mod n 2) 0)))","user":"54cb3497e4b057c6fda3a272"},{"problem":25,"code":"filter #(= 1 (rem % 2) )","user":"561d44fae4b064ca9f4b16a9"},{"code":";rabble rabble... odd elements, not the odd indexed elements...\nfilter odd?","problem":25,"user":"53322cece4b019098a6f8b73"},{"problem":25,"code":"(fn [f] (filter odd? f))","user":"57dfe173e4b0bd073c20246b"},{"problem":25,"code":"(fn find-odd [ls] (filter odd? ls))","user":"5716540fe4b07c98581c3af3"},{"problem":25,"code":"(fn get-odds\n  [coll]\n  (filter odd? coll))","user":"601bb40de4b0bf4ca6b1092f"},{"problem":25,"code":"(fn [lst]\n  (loop [l lst\n         l2 nil]\n    (if (empty? l)\n      (reverse l2)\n      (if (odd? (first l))\n        (recur (rest l) (conj l2 (first l)))\n        (recur (rest l) l2)))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":25,"code":"(fn odd\n  ([list]\n   (odd list ())\n  )\n  ([list res]\n   (if (empty? list)\n     res\n     (if (= (mod (last list) 2) 0) \n       (odd (drop-last list) res)\n       (odd (drop-last list) (cons (last list) res))\n     )\n   )\n  )\n )","user":"556be3dce4b09a3098a524f7"},{"code":"#(loop [seq1 % seq2 '()] (cond (empty? seq1) (sort seq2)\n                                   (odd? (first seq1)) (recur (rest seq1) (cons (first seq1) seq2))\n                                   :else (recur (rest seq1) seq2)))","problem":25,"user":"51ecb0fee4b0bb5070431583"},{"code":"filter (fn [num] (= (rem num 2) 1))","problem":25,"user":"4f284e7ce4b0d6649770a015"},{"problem":25,"code":"(fn nums2\n  ([input-array] (nums2 input-array []))\n   ([input-array output-array]\n    (if (= (count input-array) 0)\n      output-array\n    (let [output-array\n          (if (> (rem (first input-array) 2) 0)\n            (conj output-array (first input-array))\n            output-array)]\n          (nums2 (rest input-array) output-array)\n    ))\n   )\n)","user":"5ac383b8e4b0e27600da7719"},{"code":"#(filter #'odd? %)","problem":25,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [x] (filter odd?  x))","problem":25,"user":"5177cacde4b0261ae665b877"},{"problem":25,"code":"#(remove (fn [n] (zero? (mod n 2))) %)","user":"5501a1e1e4b07d26eda61d75"},{"problem":25,"code":"#(loop [x 0 a ()] (if (= x (count (vec %)))\n                  \t  (reverse a)\n                      (recur (inc x) (if (= (rem (nth (vec %) x) 2) 1)\n                                   \t\t (conj a (nth (vec %) x))\n                                   \t\t a\n                                     )\n                      )\n                  )\n )","user":"55f68360e4b06e875b46ce93"},{"code":"(fn [arr]\n   (filter \n    (fn [x] \n      (if (zero? (bit-and x 1))\n        false;\n        true;\n        ))\n    arr))","problem":25,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":25,"code":"(fn [items] (for [x items :when (= (mod x 2) 1)] x))","user":"54336443e4b0b6b47310fcde"},{"code":"(fn[xs] (filter #(= 1 (mod % 2)) xs))","problem":25,"user":"5339cb07e4b0e30313ee6caf"},{"problem":25,"code":"(fn greet [x] (filter odd? x))","user":"5860d82de4b0f14aab7c87de"},{"code":"#(for [n % :when (= 1 (rem n 2))] n)","problem":25,"user":"51789dfae4b03d69594194d7"},{"problem":25,"code":"reduce (fn [myvector part] \n         (if (odd? part )\n           (conj myvector part)\n           myvector\n           ) ) []","user":"579be21fe4b05b1deef9adff"},{"problem":25,"code":"(fn [l]\n  (let [iter (fn [l r]\n               (if (empty? l)\n                 r\n                 (recur (next l) (if (= (mod (first l) 2) 1)\n                                   (conj r (first l))\n                                   r))))]\n    (iter l [])))","user":"60b34c5de4b0e0fa5f1b422e"},{"problem":25,"code":"(fn [lst]\n  (reduce (fn [new-list el]\n            (if (not (even? el))\n              (concat new-list (list el))\n              new-list))\n          (list)\n          lst))","user":"5625f678e4b00e49c7cb47b8"},{"problem":25,"code":"(fn f [s] (filter odd? s))","user":"5ed15e23e4b016b56eae05ba"},{"problem":25,"code":"(fn [sq] (filter #(> (mod % 2) 0) sq))","user":"5818b1a6e4b0c0e9c07b83c3"},{"code":"filter #(not (zero? (mod % 2)))","problem":25,"user":"4e80d71b535db62dc21a62b7"},{"code":"filter #(not (= 0 (mod % 2))  )","problem":25,"user":"4fb0bd28e4b081705acca26b"},{"code":"(fn [xs] (filter (fn [x] (odd? x) ) xs))","problem":25,"user":"504e0834e4b078edc5f593a5"},{"problem":25,"code":"(fn[x] ( filter odd? x\n        \n        )\n \n )","user":"56b94357e4b0f2655033592e"},{"problem":25,"code":"(fn odds [coll]\n  (filter #(= 1 (mod % 2)) coll)\n)","user":"574d0574e4b02ea114799227"},{"problem":25,"code":"(fn [seq]\n(filter odd? seq))","user":"53403f42e4b085b17e897da8"},{"code":"filter odd?","problem":25,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":25,"code":"#(or\n (seq\n  (reduce\n    (fn [ret number]\n      (if (= (mod number 2) 0)\n        ret\n        (conj ret number))\n      )\n    []\n    %))\n '())","user":"5734d751e4b0cd1946bd1018"},{"problem":25,"code":"filter (fn [x] (not= 0 (rem x 2)))","user":"5922599be4b09b4ee5954c8d"},{"problem":25,"code":"(fn [items] (if-let [odd-nums (filter odd? items)] odd-nums []))","user":"588e64ebe4b00487982d518a"},{"problem":25,"code":"(fn [x] (reduce (fn [oddlist numm] (if (odd? numm)(conj oddlist numm) oddlist)) [] x))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":25,"code":"(fn\n  [coll]\n   (filter (comp not even?) coll)\n   )","user":"53d17fdde4b00fb29b221315"},{"problem":25,"code":"(fn odds-only [sqnce]\n  (if (empty? sqnce) '()\n    (if (odd? (first sqnce))\n      (conj (odds-only (rest sqnce)) (first sqnce))\n      (odds-only (rest sqnce)))))","user":"5f2aa09ce4b033932238a655"},{"code":"filter #(pos? (rem % 2))","problem":25,"user":"4effb663535dcb61093f6a2e"},{"code":"( fn [ seq ] ( filter (fn [x] ( = ( mod x 2 ) 1 ) ) seq ))","problem":25,"user":"5026916fe4b0c969f0b056e1"},{"problem":25,"code":"#(filter (fn odd? [n] (= (mod n 2) 1)) %)","user":"5d05fdece4b0cc9c915881e8"},{"problem":25,"code":"(fn odd-only [x] (filter #(= (mod % 2) 1) x) )","user":"56304db8e4b073c1cf7a9be5"},{"problem":25,"code":"filter (fn [item] (= (mod item 2) 1))","user":"5780c2c6e4b0d36ec5835e7a"},{"code":"(fn[seq] \n    (loop [sequence seq odd '()]\n      (if (empty? sequence) (reverse odd)\n        (recur (rest sequence) \n          (if (> (mod (first sequence) 2) 0)\n            (conj odd (first sequence)) odd)))))","problem":25,"user":"507da5a7e4b03c76e5499e03"},{"problem":25,"code":"(fn [xs] (loop [r [] [y & ys] (seq xs)] (if y (recur (if (odd? y) (conj r y) r) ys) r)))","user":"55d87324e4b0e31453f64ab4"},{"code":"(fn[ll]\n   (let [ of (fn[l nl]\n                 (if (empty? l) \n                      nl \n                      (recur \n                         (rest l) \n                        (if (odd? (first l)) \n                            (conj nl (first l)) \n                            nl))))] \n          (reverse (of ll '()))))","problem":25,"user":"4e889643535d8b9bb0147ca5"},{"problem":25,"code":"(fn [my-seq]\n\n  (filter #(> (mod % 2) 0) my-seq)\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"code":"(fn [xs]\r\n    (filter #(= (mod % 2) 1) xs))","problem":25,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn fnd-odd [x]\n  (if (empty? x)\n    '()\n    (do\n      (if (== (mod (first x) 2) 1)\n        (concat (cons (first x) '()) (fnd-odd (rest x)))\n        (fnd-odd (rest x))\n    )\n  )\n)\n  )","problem":25,"user":"50edcc53e4b06330c1f87c49"},{"problem":25,"code":"#(loop[x %,i (- (count %) 1), r '()]\n   (if(< i 0) \n     r\n     (if(integer? (/ (last x) 2)) \n       (recur(butlast x)(- i 1)(and '() r))\n       (recur(butlast x)(- i 1)(cons (last x) r)))))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn [col] (filter #(odd? %) col))","problem":25,"user":"4ec6f4ee535d6d7199dd36dc"},{"problem":25,"code":"(fn [l & odds]\n  (if (nil? odds)\n  \t(recur l [])\n  \t(if (= l [])\n\t  odds\n      (if (odd? (first l))\n      \t(recur (rest l) (conj odds (first l)) )\n        (recur (rest l) odds)\n      )\n    )\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"(fn [l] (filter #(> (mod % 2) 0) l))","problem":25,"user":"4f9754d4e4b0dcca54ed6ce9"},{"code":";reduce #(if (= (mod %2 2) 1) (conj %1 %2) %1) []\n\n;filter #(= (mod %1 2) 1)\n\nfilter odd?","problem":25,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn [sequ]\n  (for [x sequ\n        :when (odd? x)]\n    x))","problem":25,"user":"52bc7ea6e4b07a9af57922f7"},{"problem":25,"code":"#(reduce (fn [acc item]\n  (if (odd? item)\n    (concat acc [item])\n    acc\n    )\n  ) [] % )","user":"51ad808ee4b09397d5109784"},{"problem":25,"code":"#(filter (fn odds [x] (= (mod x 2) 1)) %)","user":"5b329773e4b025bcb146f322"},{"problem":25,"code":"(fn odd-seq [sq] (if(empty? sq)\n                   []\n                   (if (odd? (first sq)) \n                       (cons (first sq) (odd-seq (rest sq))) \n                       (odd-seq (rest sq)))))","user":"55599ae4e4b0deb715856e3a"},{"code":"(fn [s] (remove nil? (map #(if (odd? %) %) s)))","problem":25,"user":"4de6c970535d08e6dec9fdf6"},{"code":"(fn [coll] (keep #(if (odd? %) %) coll))","problem":25,"user":"4e223bd6535d04ed9115e81c"},{"code":"(fn [x]\n  (filter odd? x))","problem":25,"user":"4e2e94bb535deb9a81d77f0c"},{"problem":25,"code":"(fn [arr] \n  (filter #(not= 0 (mod % 2)) arr))","user":"5c62f1cde4b0fca0c1622655"},{"problem":25,"code":"(fn [xs]\n  (loop [xs xs\n         result []]\n    (if (empty? xs)\n      result\n      (recur \n       (rest xs)\n       (if (odd? (first xs))\n         (conj result\n               (first xs))\n         result)))))","user":"59384ec3e4b02506e01a29c7"},{"code":"(fn odds [xs]\r\n  (filter #(odd? %) xs))","problem":25,"user":"4e123905535d04ed9115e7ce"},{"problem":25,"code":"#(filter (fn [n] (odd? n) ) %)","user":"5f60a08be4b02876ed9fcffd"},{"code":"(fn [xs]\n  (filter\n   (fn [x] (= 1 (mod x 2)))\n   xs))","problem":25,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn [l]\n  (filter #(= (bit-and 1 %1) 1) l)\n)","problem":25,"user":"504e1ddae4b0f6ff3350c466"},{"problem":25,"code":"#(reverse (reduce (fn [a b] (if (> (rem b 2) 0)(conj a b) a )) '() %))","user":"57b35772e4b0fbc9809a277c"},{"code":"(fn [se] (filter odd? se))","problem":25,"user":"4df407c3535d08e6dec9fe2e"},{"problem":25,"code":"(fn find-odd [coll]\n  (filter odd? coll))","user":"56714922e4b05957ce8c6107"},{"code":"(fn [x]\n  (filter #(odd? %) x))","problem":25,"user":"4e52777f535d302ef430da76"},{"code":"filter (fn [x]\n         (not= (mod x 2) 0))","problem":25,"user":"52f01bfbe4b05e3f0be25ed9"},{"code":"(fn [x]\n  (filter odd? x)\n)","problem":25,"user":"4e340525535deb9a81d77f27"},{"code":"(fn [list]\n  (filter #(= (rem % 2) 1) list))","problem":25,"user":"506c8116e4b0a302964c548a"},{"problem":25,"code":"(fn [item] (filter odd? item))","user":"57aa103be4b0b8559636fc64"},{"problem":25,"code":"(fn [c] \n  (filter #(not= (mod % 2) 0) \n          c))","user":"5873dbcee4b01531a375ea41"},{"problem":25,"code":"(partial filter #(= 1 (mod %1 2)))","user":"5612d91ee4b05f002753df97"},{"problem":25,"code":"(fn [s]\n  (filter #(not= 0 (rem % 2)) s))","user":"5bce439fe4b0e9689409ee17"},{"problem":25,"code":"(fn oddly [x] (filter #(odd? %) x))","user":"599389d8e4b0b211ea3aaab6"},{"code":"(fn  odds [nums]  (loop [ xs  (seq nums)\n                                    new-xs  []]\n                         (if (empty? xs) new-xs\n\t     \t                         (let  [x  (first xs)\n                             \t      is-odd ( = (mod x 2) 1)]\n                              \t\t  (if is-odd (recur (rest xs)  (conj    new-xs x))\n                                              \t\t  (recur (rest xs)  new-xs)\n                               \t\t )\n                          \t)\n                         )\n\t)\n)","problem":25,"user":"52fc9bc9e4b047fd5583701e"},{"problem":25,"code":"(fn [c] (filter #(not (= 0 (mod % 2))) c))","user":"584a44e6e4b089d5ab817ee3"},{"code":"filter #(>(mod % 2) 0)","problem":25,"user":"506ee0f4e4b09350ab4199f2"},{"problem":25,"code":"(fn [l] (filter (fn [x] (= (rem x 2) 1)) l))","user":"550065a4e4b07d26eda61d5a"},{"problem":25,"code":"filter #(not (== (mod % 2) 0))","user":"55a9e0fee4b0988bba2ad945"},{"problem":25,"code":"(fn abc\n  [L]\n  (if (empty? L)\n    ()\n    (if (odd? (first L))\n      (conj (abc (rest L)) (first L))\n      (abc (rest L))\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":25,"code":"(fn [stuff] (filter odd? stuff))","user":"5f341a4be4b0574c87022c3d"},{"problem":25,"code":"(fn find-odd [s]\n  (if (empty? s)\n    '()\n    (let [f (first s) r (rest s)]\n      (if (= (mod f 2) 0)\n        (find-odd r)\n        (cons f (find-odd r))\n      )\n    )\n  )\n)","user":"5d6f0533e4b04d129b00f2d0"},{"problem":25,"code":"(fn [ liste] \n  (filter odd? liste))","user":"57ad0950e4b0b8559636fc97"},{"problem":25,"code":"#(filter (fn [v] (not= 0 (rem v 2))) %)","user":"55adf4d7e4b03311e7b732af"},{"code":"(fn [coll] (loop [s coll result '()] \n            (if (empty? s)  (reverse result) \n              (recur (rest s) \n                     (if (odd? (first s)) (conj result (first s)) result ) ) ) ) )","problem":25,"user":"50fec710e4b0219f3bc8bd97"},{"code":"(fn [x] (filter (fn [y] (= (mod y 2) 1) ) x))","problem":25,"user":"5051e2abe4b0a561d07d8f0a"},{"problem":25,"code":"(fn [items] (filter #(= (mod %1 2) 1) items))","user":"53a7637de4b047364c044419"},{"problem":25,"code":"(fn [aSeq] (filter odd? aSeq))","user":"548018e3e4b0c51c1f4d7331"},{"code":"(fn[s](filter #(>(mod% 2)0)s))","problem":25,"user":"4dd66da7535d2dad7130b5c8"},{"problem":25,"code":"reduce (fn [arr elem] (if (odd? elem) (conj arr elem) arr)) []","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn odd-ones [s]\n  (for [x s :when (odd? x)] x))","problem":25,"user":"512da425e4b040332b905b34"},{"problem":25,"code":"(fn [ss] (filter odd? ss))","user":"555e10fee4b0a2eb076a39b4"},{"code":"(fn [x]\n  (loop [x x i []]\n    (if (empty? x)\n      i\n      (if (odd? (first x))\n        (recur (rest x) (conj i (first x)))\n        (recur (rest x) i)))))","problem":25,"user":"52cdc676e4b07d0d72b2737f"},{"problem":25,"code":"(fn [x]\n  (filter #(= (rem % 2) 1) x))","user":"564f5774e4b0284900eef6ac"},{"problem":25,"code":"#(loop [col %\n       odds_only []]\n     (if (empty? col)\n     odds_only\n     (recur  (rest col)\n            (if (not= 0 (mod (first col) 2))\n                (conj odds_only (first col))\n                odds_only))))","user":"57bf304de4b05aa3c4741c75"},{"code":"(fn odds [coll]\n  (filter odd? coll))","problem":25,"user":"5046f909e4b03b02161376b5"},{"problem":25,"code":"filter #(= (rem % 2) 1)\n\n#_(fn [x]\n  (filter #(== 1 (rem % 2))x))\n\n#_(fn foo [x]\n (loop [z x acc nil]\n (cond (empty? z) (reverse acc)\n       (== 1 (rem (first z)2))\n       (recur (rest z)(conj acc (first z)))\n       :t\n       (recur (rest z) acc))))\n\n#_(fn find-odd? [lst]\n (letfn [(helper [lst acc]\n   (cond (empty? lst) (reverse acc)\n   \n         (not(== (rem (first lst) 2)0))\n         (recur (rest lst)(cons (first lst)acc))\n   :t\n   (recur (rest lst) acc)))]\n   (helper lst ())))","user":"52faf67ce4b047fd55837005"},{"problem":25,"code":"(fn OddsOnly [lis]\n  (if (empty? lis)\n    lis\n    (if (= (mod (first lis) 2) 0)\n      (OddsOnly (rest lis))\n      (concat (list (first lis)) (OddsOnly (rest lis)))\n    )\n  )\n)","user":"5d8b2c63e4b0915913b1d3d0"},{"problem":25,"code":"(fn [args]\n  (filter #(not (even? %1)) args)\n  )","user":"5372c830e4b06d7f452d9dff"},{"problem":25,"code":"#(filter \n  odd?\n  %)","user":"5624f5a6e4b00a550fc90288"},{"problem":25,"code":"(fn oddNumbers\n  ([sequence] (oddNumbers sequence []))\n  ([sequence result]\n   (if (empty? sequence) result\n   (if (not= (mod (last sequence) 2) 0)\n     (oddNumbers (drop-last sequence) (cons (last sequence) result))\n     (oddNumbers (drop-last sequence) result)))))","user":"556c94afe4b09a3098a524fe"},{"code":"(fn odd\n  [s]\n  (filter (fn [x] (= (mod x 2) 1)) s))","problem":25,"user":"51d1ef6ee4b0d13b04db0d92"},{"problem":25,"code":"(fn [x] (remove nil? (map #(if (odd? %) %) x)))","user":"55662059e4b0c656e3ff1826"},{"problem":25,"code":"(fn [items] (filter #(not (even? %)) items))","user":"5f009162e4b0cf489e8d7f1a"},{"code":"(fn [lst] (filter odd? lst))","problem":25,"user":"4e62294c535d8ccf87e9fe5f"},{"problem":25,"code":"(fn [x]\n  (loop [oldColl x newColl '()]\n    (if (empty? oldColl)\n      (reverse newColl)\n      (recur\n        (rest oldColl)\n        (if (= (rem (first oldColl) 2) 1)\n         (cons (first oldColl) newColl )\n          newColl\n        )\n      ))))","user":"5bfc82cfe4b0bdcf453d15f0"},{"problem":25,"code":"reduce #(if(odd? %2)(conj %1 %2) %1) []","user":"56e044ade4b0ca2494a09603"},{"problem":25,"code":"(fn\n  [lst]\n\t(filter odd? lst))","user":"56df6417e4b0ca2494a095f7"},{"code":"filter (fn [x] (= 1 (rem x 2) ) )","problem":25,"user":"4ea0a7c7535d7eef308072ab"},{"problem":25,"code":"(fn [k]\n  (filter odd? k)\n  )","user":"56ecf2e6e4b04a395b9a0440"},{"code":"(fn odds\n  [x]\n    (if (empty? x) \n        '()\n        (if (odd? (first x))\n            (cons (first x) (odds (rest x)))\n            (odds (rest x))\n        )\n    ) \n)","problem":25,"user":"4f0df199535d0136e6c2231e"},{"problem":25,"code":"(fn [sequ] (filter odd? sequ))","user":"548582eee4b0e286459a11ae"},{"code":"(fn loopy \n  ([s] (loopy (rest s) \n    (if (= 1 (mod (first s) 2))\n      (conj '() (first s))\n      '())))\n  ([s o] \n    (if-not (= (first s) nil)\n      (loopy (rest s)\n        (if (= 1 (mod (first s) 2))\n          (conj o (first s))\n          o))\n      (reverse o))))","problem":25,"user":"4ed2b337535d44c135fd68de"},{"code":"; first attempt was this\n; (fn [coll] (for [x coll :when (odd? x)] x))\n; after reading solutions by wdixon and jmacias, I can shorten wdixon's like this:\n#(filter odd? %)","problem":25,"user":"536b9d8ae4b0243289761ebe"},{"code":"(fn [s]\n  (filter #(= (rem % 2) 1) s))","problem":25,"user":"52c884a2e4b0c2d177d62136"},{"code":"(fn [x] (filter (fn [val] (= 1 (mod val 2))) x))","problem":25,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":25,"code":"(fn [x] (filter (fn [m] (if (= (mod m 2) 1) true false)) x))","user":"556282d0e4b0c656e3ff17da"},{"problem":25,"code":"(fn [a]\n\t(loop [b [] i 0]\n\t\t(if (= i (count a)) b\n\t\t\t(if (= 1 (mod (get (into [] a) i) 2))\n\t\t\t\t(recur (conj b (get (into [] a) i)) (inc i))\n\t\t\t\t(recur b (inc i))))))","user":"5eea5ce7e4b029a2061bbec0"},{"problem":25,"code":"(fn [s] (filter odd? s) )","user":"5510f734e4b06e50f9beb18f"},{"problem":25,"code":"(fn [y] (filter (fn [x] (not (= (mod x 2) 0))) y))","user":"553c4614e4b09218d5f45014"},{"code":"(fn [s] (filter odd? s))\n  \n\n\n;(fn [s]\n ; (loop [sset s\n  ;       ls '()]\n   ; (if (empty? sset)\n    ;  ls\n     ; (recur (rest sset) \n      ;       ((fn [n]","problem":25,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":25,"code":"(fn [collection]\n  (filter odd? collection))","user":"548f339ee4b0e286459a1233"},{"code":"(fn [what] (filter odd? what))","problem":25,"user":"51b0436ae4b0c53cf2e68a60"},{"code":"(fn [li] (filter #(not= 0 (mod % 2)) li))","problem":25,"user":"4e2d562c535deb9a81d77f07"},{"problem":25,"code":"(fn odd-numbers \n  [lst]\n  (filter odd? lst))","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn [s] (filter #(= (rem % 2) 1) s))","problem":25,"user":"4e9be708535dbda64a6f6b79"},{"problem":25,"code":"(fn [a] (filter (fn [b] (odd? b)) a))","user":"55391182e4b09218d5f44fe6"},{"problem":25,"code":"(fn find-odd [s]\n  (letfn [(odd? [n] (= 1 (mod n 2)))]\n    (filter odd? s)))","user":"5813e208e4b0f478707a061b"},{"problem":25,"code":"(fn [t] (filter #(not (zero? (mod % 2))) t))","user":"56af842de4b061e3ca319ad2"},{"code":"filter #( = 1 (mod % 2) )","problem":25,"user":"513f400ae4b051389b345b3f"},{"problem":25,"code":"(fn [s]\n    (filter #(odd? %) s))","user":"55ac07afe4b03311e7b7328f"},{"problem":25,"code":"(fn [lista] (for [i lista \n                  :when(= 1 (rem i 2))]\n             i))","user":"5ba6d337e4b0a20761a23414"},{"code":"(fn [s] (filter (complement #(zero? (mod % 2))) s))","problem":25,"user":"4faa8de0e4b081705acca1f8"},{"problem":25,"code":"(fn[start]\n  (reverse (reduce (fn [out part]\n              (if (odd? part)\n              (conj out part)\n              out))\n  '()\n  start)))","user":"5f3a8493e4b004f08c61c527"},{"problem":25,"code":"(fn odds [ls]\n  (filter\n   (fn [x] (= (mod x 2) 1))\n   ls))","user":"60890415e4b0ae75613dceec"},{"problem":25,"code":"(fn [s]\n  (filter #(odd? %1) s))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [s] (filter (comp not zero? #(mod % 2)) s))","problem":25,"user":"4f2cdd42e4b0d6649770a055"},{"problem":25,"code":"(fn [s]\n   (for [item s\n         :when (= 1 (mod item 2))]\n     item\n   )\n)","user":"58d5c245e4b03c36ff7e5964"},{"code":"(fn [sq] (filter #(not= (mod % 2) 0) sq))","problem":25,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":25,"code":"(fn [sq] (for [x sq :when (= 1 (rem x 2))] x ))","user":"56b6a50ae4b0982f16b37e3c"},{"code":";#(filter #(odd %) %)\n\n(fn [x] (filter #(odd? %) x))","problem":25,"user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":25,"code":"(fn [seq]\n  (filter #(> (mod %1 2) 0) seq))","user":"58bef424e4b021aa9917eccb"},{"problem":25,"code":"(fn Impar [x] (filter odd? (into [] x)))","user":"5b69baf9e4b0c6492753e78f"},{"code":"(partial \n (fn foo [res s1] \n   (if \n     (= s1 '()) \n     \n     (reverse res)\n     (\n      if \n\t  (= (rem (first s1) 2) 1)\n\t  (foo (conj res (first s1)) (rest s1))\n\t  (foo res (rest s1))\n\t  \n  )))\n '()\n )","problem":25,"user":"51a0e0b7e4b0b292b01ee3fb"},{"problem":25,"code":"#(filter(fn [x] (if (= (mod x 2) 1) x)) %)","user":"55cb4e11e4b0e31453f64a02"},{"code":"(fn find-odds [x]\n  (filter odd? x)\n)","problem":25,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [col] (filter #(= 1 (rem % 2)) col  ))","problem":25,"user":"504f0c08e4b0e7ad84dbc4b1"},{"code":"(fn odd [xs]\n  (filter (fn [x] (= (mod x 2) 1)) xs))","problem":25,"user":"5097cd83e4b00ad8bab4e974"},{"code":"(fn blah [coll] (remove even? coll))","problem":25,"user":"4fedec00e4b0d2a5fc2962eb"},{"problem":25,"code":"(fn [coll]\n  (->> coll\n       (filter odd?)))","user":"5e157910e4b0a047bd49f701"},{"problem":25,"code":"#(reduce (fn [accum x] (if (= (mod x 2) 0) accum (conj accum x))) [] %)","user":"5764cc01e4b0994c1922fc05"},{"problem":25,"code":"(fn onlyodd [s] (filter #(= (mod % 2) 1) s))","user":"563758e3e4b0bfe05bf117d5"},{"problem":25,"code":"(fn [x] \n  (filter #(not= 0 (rem % 2)) x))","user":"5ec9c395e4b08d0ec38692f7"},{"code":"(partial filter #(= (mod % 2) 1))","problem":25,"user":"4e2110c7535d04ed9115e813"},{"problem":25,"code":"(fn pick-odd\n  [sequ]\n  (loop [sequ sequ oddsequ []]\n    (if (empty? sequ)\n      oddsequ\n      (if (not (integer? (/ (first sequ) 2)))\n        (recur (rest sequ) (conj oddsequ (first sequ)))\n        (recur (rest sequ) oddsequ)\n      )\n    )\n  )\n)","user":"5c8b6c64e4b048ec896c596f"},{"problem":25,"code":"(fn [coll] (filter #(= (mod %1 2) 1) coll))","user":"5593f481e4b0c79f6e1db946"},{"code":"filter  #(not (even? %))","problem":25,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":25,"code":"(partial filter #(not (zero? (bit-and 1 %))))","user":"595d4996e4b066ee0a44b01d"},{"code":"(fn simpleOdds [x]\n  (if (not (empty? x))\n    (if (= 1 (mod (first x) 2))\n      (cons (first x) (simpleOdds (rest x)))\n      (simpleOdds (rest x))\n    )\n    '()\n  ))","problem":25,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn [xs] (filter (fn [x] (odd? x)) xs))","problem":25,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":25,"code":"(fn odds [sq] (filter #(odd? %) sq))","user":"5609d328e4b05f002753deee"},{"code":"(fn [l] (filter #(not (zero? (mod % 2))) l))","problem":25,"user":"53227243e4b09d4e7a9b54c1"},{"problem":25,"code":"(fn find-odd [seq]\n  (filter odd? seq))","user":"5faece16e4b08cb800c85b02"},{"problem":25,"code":"(fn odd-numbers [indx]\n  (filter odd? indx))","user":"58884cc6e4b0f1effa3b770e"},{"problem":25,"code":"reduce (fn [acc x] (if (= (rem x 2) 1) (conj acc x) acc)) []","user":"54ef4a1de4b024c67c0cf882"},{"code":"keep #(when (odd? %) %)","problem":25,"user":"4ec3c4a0535dcc7ae8597d5a"},{"code":"(fn [s] (filter #(pos? (mod % 2)) s))","problem":25,"user":"4f2b0951e4b0d6649770a045"},{"problem":25,"code":"#(filter\todd? %)","user":"59780ee5e4b01722bebd4d01"},{"problem":25,"code":"(fn odds\n  [lst]\n  (filter odd? lst))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn [x] (filter (fn [n] (= 1(mod n 2))) x))","problem":25,"user":"4e0bb9fb535d04ed9115e7b2"},{"code":"(fn get-odds [s]\n (for [x s :when (odd? x)] x))","problem":25,"user":"536c35c3e4b0fc7073fd6e3a"},{"problem":25,"code":"(fn [sequ] (filter #(= (mod % 2) 1) sequ))","user":"5a53f2aae4b05d388ecb6c1e"},{"code":"filter (fn [x] (> (mod x 2) 0))","problem":25,"user":"4f519831e4b03ad3f0c10d28"},{"problem":25,"code":"remove (set [0 2 4 6 8])","user":"5551f712e4b0deb715856df0"},{"code":"(fn [lst]\n  (filter odd? lst)\n  )","problem":25,"user":"51f7fbf7e4b06ff1c25c52e0"},{"problem":25,"code":"#(loop [remlist % result ()]\n   (if (empty? remlist)\n     (reverse result)\n   \t\t(if (odd? (first remlist))\n          (recur (rest remlist) (conj result (first remlist)))\n          (recur (rest remlist) result)\n          )\n     )\n   )","user":"558d43f1e4b0277789237640"},{"code":"(fn findodd [L]\n  (let [_findodd (fn _findodd [Q O]\n    (if (= (first Q) nil)\n      O\n      (_findodd\n       (rest Q)\n       (if\n         (= (mod (first Q) 2) 0)\n         O\n        (cons (first Q) O)))))]\n  (reverse (_findodd L '()))))","problem":25,"user":"51f67858e4b06ff1c25c52c5"},{"problem":25,"code":"filter #(not= 0 (mod % 2))\n; filter odd?","user":"5e3071abe4b05b4b01516213"},{"code":"(fn[x] (filter (fn[y](= 1 (mod y 2))) x))","problem":25,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [collection] (loop [ result [] stuff collection] (if stuff (recur (if (not= 0 (rem (first stuff) 2)) (conj result (first stuff)) result) (next stuff))result)))","problem":25,"user":"4f54204ce4b0a7574ea717d9"},{"problem":25,"code":"(fn [x] (filter #(not= 0(rem %1 2))x))","user":"5f059b97e4b0cf489e8d7f48"},{"code":"(fn odds[all]\n\t(filter #(= (mod % 2) 1) all))","problem":25,"user":"51a89081e4b08d8ec191b814"},{"code":"(fn find-odd [seq] (filter #(odd? %) seq))","problem":25,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":25,"code":"(fn [z] (filter odd? (list* z)))","user":"53ecaf1ce4b0d648e757f4b4"},{"problem":25,"code":"(fn odds [s] \n  (if (empty? s) \n    s \n    (if (odd? (first s)) \n      (cons \n       (first s) \n       (odds (rest s))\n      )\n      (odds (rest s))\n    )\n  )\n)","user":"55229495e4b0882d96d091a4"},{"code":"#(filter (fn [c] (= 1 (mod c 2))) %)","problem":25,"user":"52d8633ee4b09f7907dd1393"},{"problem":25,"code":"filter (fn [n] (if-not (= (mod n 2) 0) n))","user":"5f3b54c0e4b004f08c61c53b"},{"problem":25,"code":"reduce (fn [s v](if (odd? v) (conj s v) s )) []","user":"54ef4a1ee4b024c67c0cf883"},{"problem":25,"code":"(fn [x] (filter odd? x) )","user":"544e5ecae4b0e39780006984"},{"code":"(fn [c] (filter #(> (rem % 2) 0) c))","problem":25,"user":"4fefd624e4b0678c553fc31b"},{"problem":25,"code":"(fn o [n]\n  (filter odd? n))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn foo [l] (filter #(= 1 (rem % 2)) l))","problem":25,"user":"4e71705e535d5021c1a89649"},{"code":"(fn [a] (filter (fn [b] (= 1 (mod b 2))) a))","problem":25,"user":"4e74e119535d7a570dd295bc"},{"problem":25,"code":"(fn [ls]\n  (filter #(odd? %) ls))","user":"58db7b81e4b0a4d5acaab680"},{"code":"(fn only-odd [a-seq]\n    (filter #(= 1 (rem % 2)) a-seq)\n )","problem":25,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [s]\n (filter #(odd? %) s))","problem":25,"user":"50af3393e4b0a40c9cfb08d7"},{"code":"(fn [s]\n    (filter #(> (rem % 2) 0) s))","problem":25,"user":"4eb593e6535d7eef30807368"},{"code":"(fn [xs]\n  (filter #(not= 0 (mod % 2))\n \txs))","problem":25,"user":"517bf28de4b07ef0e56148d5"},{"problem":25,"code":"#(loop [counter (count %) odds []]\n   (if (true? (= counter 0)) odds\n     (recur (- counter 1) (if (odd? (nth (seq %) (- (count %) counter))) (concat odds [(nth (seq %) (- (count %) counter))]) odds))))","user":"558378dce4b05c286339e115"},{"code":"(fn oddlist [lst]\n  (fn odd? [number]\n  (cond\n    (= 0 (mod number 2)) false\n    :else true))\n  (cond\n   (empty? lst) ()\n   :else (cond \n          (odd? (first lst)) (conj \n                             (oddlist (rest lst)) \n                             (first lst))\n          :else (oddlist (rest lst)))))","problem":25,"user":"4fe89055e4b07c9f6fd12c47"},{"code":"filter #(not(= 0 (mod % 2)))","problem":25,"user":"4edd4b77535d10e5ff6f5328"},{"code":"filter #(if-not (zero? (rem % 2)) %)","problem":25,"user":"509b1204e4b0412cdea6eb1d"},{"problem":25,"code":"#(filter (fn [el] (odd? el)) %)","user":"55041b5ee4b086ebe8a79c78"},{"problem":25,"code":"filter (fn [x] (if (= 0 (mod x 2))\n                  false\n                  true))","user":"58a3ba31e4b02bd94d917eff"},{"code":"(fn oddnum [col]\n  (filter #(not= (mod % 2) 0) col))","problem":25,"user":"51d328f8e4b099f3b6acddfb"},{"problem":25,"code":"(fn [coll] (filter (fn [x] (odd? x)) coll))","user":"54d109a4e4b0e8a36923e5da"},{"code":"(fn [lst]\n  (filter (fn [item]\n    (if (= (mod item 2) 1)\n      true\n      false))\n    lst))","problem":25,"user":"4ff30a84e4b0678c553fc344"},{"problem":25,"code":"(fn [s] (filter #(not= 0 (rem % 2))  s))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":25,"code":"(fn odd-numbers [elements] (filter odd? elements))","user":"57e15244e4b0bfb2137f5a70"},{"code":"(fn [x] \n  (filter #(== (mod % 2) 1) x))","problem":25,"user":"4fe8b85be4b07c9f6fd12c77"},{"code":"#(filter (fn [x] (= 1 (rem x 2))) (seq %))","problem":25,"user":"52454e2be4b08ba2393080e9"},{"code":"(fn [xs] (filter #(= (mod % 2) 1) xs))","problem":25,"user":"4e273301535deb9a81d77ef7"},{"problem":25,"code":";(fn odd-seq [coll]\n;  (loop [coll coll\n;         odd-coll ()]\n;   (if (= () coll)\n;      odd-coll\n;      (if (= 1 (rem (last coll) 2))\n;        (recur (take (dec (count coll)) coll) (cons (last coll) odd-coll))\n;        (recur (take (dec (count coll)) coll) odd-coll)))))\n    \n(fn odd-seq [coll] (filter odd? coll))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":25,"code":"(fn [x]\n  (filter \n   (fn [y] (not (= (mod y 2) 0)))\n   x))","user":"5a29ee57e4b09cafd31c7f2b"},{"problem":25,"code":"(fn [s]\n  (filter #(= (mod % 2) 1) (seq s))\n)","user":"5cd67eb2e4b0ccb061962943"},{"code":"(fn [l] (filter #(=(rem % 2) 1) l))","problem":25,"user":"506f5d68e4b082ae7d1032c7"},{"problem":25,"code":"(fn find-odd\n  [input]\n  (reduce\n   (fn [new-seq element] (if (= (mod element 2) 1) (conj new-seq element) new-seq))\n   []\n   input))","user":"5ac6099ee4b0e27600da7757"},{"problem":25,"code":"(fn odds [sqnc]\n  (if (seq sqnc)\n    (if (odd? (first sqnc)) \n      (cons (first sqnc) \n            (odds (rest sqnc)) )\n      (odds (rest sqnc))\n    )\n    sqnc\n  )\n)","user":"58acce0ae4b0005cfeb1a754"},{"problem":25,"code":"#(filter (fn [n]\n           (= (mod n 2) 1)) %)","user":"5eeeaf56e4b07c55ae4a0514"},{"code":"(fn oddseq-inner [x] \n  (if (nil? x)\n    '()\n    (if (odd? (first x))\n          (cons (first x) (oddseq-inner (next x)))\n          (oddseq-inner (next x)))))","problem":25,"user":"522ff396e4b032bbe3424172"},{"problem":25,"code":";;(fn [xs] (filter odd? xs))\n(partial filter odd?)","user":"55150524e4b055c2f668d4d9"},{"code":"#(if-let [sq (filter odd? %)] sq)","problem":25,"user":"500fbfabe4b0c8af2eae4184"},{"problem":25,"code":"(fn [coll]\n  (for [x coll\n        :let [y x]\n        :when (odd? y)]\n    y)\n  )","user":"5cd07885e4b0ccb0619628d4"},{"problem":25,"code":"#(loop [s % odd []]\n   (if\n     (empty? s) odd\n     (let [f (first s) r (rest s)]\n       (if\n         (odd? f) (recur r (conj odd f))\n         (recur r odd)\n         )\n       )\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"problem":25,"code":"(fn odd [lst]\n  (filter #(not= (mod % 2) 0) lst))","user":"56446954e4b0284900eef5f4"},{"problem":25,"code":"(fn [coll]\n  (filter #(= (mod % 2) 1) coll)\n  )","user":"559f06bae4b0acc240e314e6"},{"code":"(fn [seqs]\n  (for [n seqs :when (not= 0 (mod n 2))]\n    n\n    )\n  )","problem":25,"user":"52837636e4b0239c8a67adb6"},{"problem":25,"code":"filter #(if (= (mod %1 2) 1)\n          true\n          false)","user":"59fcc31fe4b01bb0ae8afcef"},{"problem":25,"code":"filter #(=(rem % 2)1)","user":"54730420e4b094393f72dd7c"},{"problem":25,"code":"(fn odds [coll] (filter #(not (even? %)) coll))","user":"5b1d61b3e4b03cfeda66ecfe"},{"code":"(fn impar [x] (filter odd? x))","problem":25,"user":"4e8a0741535d3e98b802328b"},{"problem":25,"code":"(fn [array] (filter odd? array))","user":"576d6266e4b0979f89651563"},{"code":"#(remove (fn [x] (= 0 (mod x 2))) %)","problem":25,"user":"50ef1429e4b083781cf16b12"},{"code":"(fn odds [s] (filter #(= 1 (rem % 2)) s))","problem":25,"user":"4ea4fe1f535d7eef308072cf"},{"problem":25,"code":"reduce #(if (= 1 (mod %2 2)) (conj % %2) %) []","user":"5af31955e4b0cc2b61a3bc7a"},{"code":"(partial filter odd?)","problem":25,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":";#(filter odd? %)\r\n(fn [x] (filter odd? x))","problem":25,"user":"4de27757535d08e6dec9fdea"},{"problem":25,"code":"; (fn [coll]\n;   (filter #(odd? %) coll))\n\nfilter odd?","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":25,"code":"(fn [lst]\n  (filter #(= 1 (mod % 2)) lst))","user":"5fb082cfe4b08cb800c85b14"},{"problem":25,"code":"(fn [seq_](\n          reverse (loop [x '() y seq_](\n                              if (= (count y) 0)\n                              x\n                              (if (= (mod (first y) 2) 1)\n                                (recur (conj x (first y)) (rest y))\n                                (recur x (rest y)))))))","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"problem":25,"code":";;#(filterv odd? %)\nfilter #(= (rem % 2) 1)","user":"60461117e4b02d28681c77bf"},{"code":"filter #(=(rem % 2) 1 )","problem":25,"user":"5124619ae4b02c3f2a072ccd"},{"problem":25,"code":"(fn [coll] \n   (filter (fn [x] (= 1 (rem x 2))) coll))","user":"562d15a6e4b0a45d2ff83019"},{"problem":25,"code":"#(filter (fn [item] (= (mod item 2) 1)) %1)","user":"54bad977e4b0ed20f4ff6eb9"},{"problem":25,"code":"(fn odd \n  [my-seq]\n  (filter odd? my-seq))","user":"55acd080e4b03311e7b73298"},{"problem":25,"code":"(fn bfg [x]\n  ( filter odd? x))","user":"60b5ecffe4b0e0fa5f1b4241"},{"code":"(fn odds [xs] (filter odd? xs))","problem":25,"user":"512c0000e4b03a42b6300231"},{"problem":25,"code":"(fn [ls] \n  (filter #(= (rem % 2) 1)\tls))","user":"5d9a49c4e4b0d3f9b434ad45"},{"code":"(fn [x]\n  (keep #(if (odd? %) %) x))","problem":25,"user":"51ce3cd0e4b0e42293a22553"},{"problem":25,"code":"(fn ! [list] (if (= list ()) () (concat (if (odd? (first list)) (take 1 list) ()) (! (rest list)))))","user":"546fa7a7e4b00cfc9eacc1b1"},{"problem":25,"code":"(fn odd_numbers\n  [col]\n  (filter (fn [x] (odd? x)) col))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn [coll] (reduce (fn \n                     ([result x]\n                      (if (= (mod x 2) 0)\n                       result\n                       (conj result x))))\n                   []\n                   coll))","problem":25,"user":"527634d1e4b03e8d9a4a74d6"},{"code":"(fn [seq] (for [s seq :when (odd? s)] s))","problem":25,"user":"5238ca2de4b0d705d026eef6"},{"problem":25,"code":"(fn [x]\n  (loop [rest-list x odd-list []]\n    (if (empty? rest-list)\n      odd-list\n    (recur (rest rest-list) \n           (if (= (mod (first rest-list) 2) 1)\n             (conj odd-list (first rest-list))\n             odd-list)))))","user":"58136dcfe4b0f478707a0610"},{"code":"filter #(not= 0 (mod %1 2))","problem":25,"user":"4ec5b713535d6d7199dd36b2"},{"problem":25,"code":"(fn odds [lst] \n  (filter #(= 1 (rem % 2)) lst))","user":"5c250772e4b07e362c2305aa"},{"problem":25,"code":"(fn odds\n  ([col] (odds col []))\n  ([col acc]\n   (if (empty? col)\n     acc\n     (recur (rest col)\n            (if-not (= 0 (mod (first col) 2))\n              (conj acc (first col))\n              acc)))))","user":"56e7afd8e4b02e7e935eb6d9"},{"code":"#(for[x % :when (= 1 (rem x 2))] x)","problem":25,"user":"517e25c6e4b0329b27fa9f51"},{"code":"(fn[s] (filter #(odd? %) s))","problem":25,"user":"501948b3e4b0b6630b101db5"},{"code":"(fn [l] (filter #(= (mod % 2) 1) l))","problem":25,"user":"4fea6f3fe4b0140c20fb9c05"},{"problem":25,"code":"(fn [x]\n  (filter \n   (fn [n] (= (mod n 2)  1)) x))","user":"55855f00e4b001b0851d750b"},{"code":"(fn [l] (filter (fn [x] (if (= 1 x) true (= 1 (rem x 2)))) l))","problem":25,"user":"4f03c039535dcb61093f6b5e"},{"code":"(fn [xs] (filter #(> (mod %1 2) 0) xs))","problem":25,"user":"5200606be4b0b679c4e0e406"},{"code":"(fn [coll] \n  (remove nil? \n          (map (fn [el] \n                 (if (= (rem el 2) 1) el)\n                 ) coll)\n          )\n  )","problem":25,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":25,"code":"(fn find-odd\n  ([x] (find-odd x []))\n  ([x new-coll] (if (empty? x) new-coll (if (= 0 (rem (first x) 2))\n                                          (find-odd (rest x) new-coll)\n                                          (find-odd (rest x) (conj new-coll (first x)))\n                                          )\n                  )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"#(filter (fn [a] (odd? a)) %)","problem":25,"user":"4f017593535dcb61093f6a36"},{"problem":25,"code":"#(filter (fn [n] (== (rem n 2) 1)) %)","user":"55c20bd0e4b0e31453f64972"},{"problem":25,"code":"#(for [x %\n      :when (odd? x)]\n  x)","user":"59da2569e4b0ef0a1e9b5c62"},{"code":"reduce (fn [l i] (if (= (rem i 2) 1) (conj l i) l)) []","problem":25,"user":"537d366de4b06839e8705e87"},{"problem":25,"code":"(fn [sequence] (filter (fn [x] (odd? x)) sequence))","user":"5e51a268e4b027a2e10ac0d1"},{"problem":25,"code":"(fn odds [x]\n  (filter #(= (mod % 2) 1) x))","user":"5958a0c8e4b066ee0a44af8c"},{"code":"(fn [s] (filter (fn [n] (= 1 (mod n 2))) s))","problem":25,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":25,"code":";(fn [& args]\n  ;(map odd? args)\n;  (filter [odd? args])\n;  )\n\n\n#(filter odd? %)","user":"5785de43e4b0ebec4cfb74e5"},{"code":"(fn [n] (filter #(= 1 (mod % 2)) n))","problem":25,"user":"52dbfc6be4b09f7907dd13c8"},{"code":"#(filter (fn [a](= (rem a 2) 1)) %)","problem":25,"user":"524c72dce4b09eba1c022407"},{"problem":25,"code":"(fn [seqs]\n  (filter odd? seqs))","user":"5c64248be4b0fca0c1622671"},{"problem":25,"code":"filter (comp not zero? #(bit-and % 1))","user":"58409e47e4b089d5ab817dee"},{"problem":25,"code":"(fn [sec] (filter #(odd? %) sec))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":25,"code":"(fn \n  [s]\n  (filter #(odd? %) s))","user":"55c734a5e4b0e31453f649cb"},{"problem":25,"code":"(partial filter odd? )","user":"5603c31fe4b04bb52996e1c1"},{"problem":25,"code":"(fn [v]\n  (reduce\n   (fn [odds number]\n     (if (odd? number)\n       (conj odds number)\n       odds))\n   []\n   v))","user":"54dd4121e4b024c67c0cf793"},{"problem":25,"code":"(fn od [x]\n  (filter odd? x))","user":"5bd6e161e4b0ed4b8aab4baf"},{"code":"(fn delete_evens [x]\n  (remove even? x))","problem":25,"user":"534c1321e4b084c2834f4a89"},{"problem":25,"code":"(fn [x] (filter (fn [z] (= (rem z 2) 1)) x))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":25,"code":"(fn [coll] (for [x coll :when (odd? x)]x))","user":"58b2fe10e4b0ebc645576d17"},{"problem":25,"code":"#(filter (fn [s] (not (zero? (mod s 2)))) %)","user":"556086a2e4b0c656e3ff17c1"},{"code":"filter #(not (= 0 (mod % 2)))","problem":25,"user":"4efde788535d3d302ff962fa"},{"problem":25,"code":"(fn [arr]\n  (filter odd? arr))","user":"58d9772de4b0a4d5acaab63c"},{"code":"(fn [lst] \n  (filter #(= 1 (mod % 2)) lst))","problem":25,"user":"526866d1e4b03e8d9a4a71a1"},{"code":"(fn [c] (\n  filter odd? c))","problem":25,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [coll]\n  (for [a coll :when (odd? a)] a)\n  )","problem":25,"user":"5228f870e4b0186687e23a98"},{"code":"#(for [x %  :when (odd? x)] x)","problem":25,"user":"4ffb61a1e4b0678c553fc3d1"},{"code":"(fn odd-only [seq] (filter odd? seq))","problem":25,"user":"4ec670bc535d6d7199dd36cf"},{"problem":25,"code":"(fn [x](filter(fn[odd](not(=(mod odd 2)0)))x))","user":"55b62d2fe4b01b9910ae298f"},{"code":"#(filter (fn [x] (== (mod x 2) 1) )%)","problem":25,"user":"52823129e4b0757a1b171452"},{"code":"filter #( = 1 (mod %1 2))","problem":25,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"code":"#(loop [x (sequence %) out '()] (if (= (count x) 0) out (recur (rest x) (if (odd? (first x)) (concat out [(first x)]) out))))","problem":25,"user":"4f75f498e4b0fbe0118ec567"},{"code":"#(for [i % :when (= 1 (mod i 2))] i)","problem":25,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [ls]\n  (filter #(not= (mod % 2) 0) ls))","problem":25,"user":"4e5c538c535d8a8b8723a2c0"},{"problem":25,"code":"(fn [coll]\n  (for [x coll :when (odd? x)]  x))","user":"5e52f245e4b027a2e10ac0e1"},{"code":"(fn [var] (filter odd? var))","problem":25,"user":"51f98843e4b09be9c177e54e"},{"code":"#(filter (fn [a] (= 1 (rem a 2))) %)","problem":25,"user":"4ef57a7f535dced4c769f246"},{"problem":25,"code":"(fn[%](remove even? %))","user":"58eff21ae4b056aecfd47dd9"},{"code":"(fn [set]\r\n    ((fn [set result]\r\n      (if (empty? set)\r\n        result\r\n        (if (= (mod (first set) 2) 0)\r\n          (recur (rest set) result)\r\n            (recur (rest set) (conj result (first set)))\r\n        )\r\n      )\r\n    ) set []\r\n    )\r\n  )","problem":25,"user":"4dd6fa3a535d2dad7130b5ce"},{"code":"#(filter (fn [i] (= (mod i 2) 1)) %)","problem":25,"user":"5377a23ce4b06839e8705e39"},{"problem":25,"code":"(partial filter (fn [nm] (= 1 (mod nm 2))))","user":"5846e925e4b089d5ab817e9d"},{"problem":25,"code":"filter (fn [x] (not (= 0 (mod x 2))))","user":"5731c1fce4b0cd1946bd0fc7"},{"code":"(fn odds [x] \n  (if (empty? x) \n    '()\n    \n    (let [y (first x)]\n      (if (= 0 (rem y 2)) (odds (rest x)) (conj (odds (rest x)) y))\n      )\n    \n    )\n  )","problem":25,"user":"524ac536e4b09eba1c0223a1"},{"code":"(fn [lst]\n  (filter (fn [x] (not= (mod x 2) 0)) lst))","problem":25,"user":"52a6ed15e4b0c58976d9ac0a"},{"code":"(fn [lista]\n    (letfn [(odds [lista listaOdds]\n              (cond\n                (= '() lista) (reverse listaOdds)\n                (= 0 (mod (first lista) 2)) (odds (rest lista) listaOdds)\n                :else (odds (rest lista) (cons (first lista) listaOdds) )\n                )\n              )\n            ]\n      (odds lista '())\n      )\n    )","problem":25,"user":"5058afbbe4b06522596eba81"},{"problem":25,"code":"#(filter (fn [a] (= 1 (mod a 2))) %)","user":"5a40235fe4b0447ef91cc5c6"},{"problem":25,"code":"(fn [s]\n  (filter #(not= (rem % 2) 0) s))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":25,"code":"(fn [xs]\n  (filter\n   (fn [x] (= 1 (mod x 2))) xs))","user":"562108d0e4b064ca9f4b16e9"},{"code":"#(for [x % :when (= 1 (bit-and 1 x))] x)","problem":25,"user":"51f0ade4e4b0274c496158d9"},{"problem":25,"code":"(fn[x]\n  (reverse (reduce #(if (odd? %2) (conj %1 %2) %1) () x)))","user":"5de4f858e4b0948ae9d9ae09"},{"problem":25,"code":"(fn ff [l]\n  (filter #(odd? %) l))","user":"5f30296fe4b0574c87022c22"},{"problem":25,"code":"(fn [any-seq]\n  (filter #(= (rem % 2) 1) any-seq))","user":"60948c3ae4b00e9e6653c3e7"},{"code":"(fn odds [lst]\n (cond\n  (empty? lst) lst\n  (= (mod (first lst) 2) 1) (cons (first lst) (odds (rest lst)))\n  (= (mod (first lst) 2) 0) (odds (rest lst))\n  ))","problem":25,"user":"535a80b1e4b04ce2eb3ed2a7"},{"problem":25,"code":"#(loop[in %, out ()]\n   (if (nil? in)\n     (reverse out)\n     (recur (next in) (if (odd? (first in)) (cons (first in) out) out))))","user":"56d36e7ae4b0ea9b8538f7ad"},{"problem":25,"code":"(fn [se] (filter (fn [x] (= (mod x 2) 1)) se))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":25,"code":"#(reduce (fn [x y] \n           (if (= (mod y 2) 1) \n                  (conj x y)\n             \t\tx)) \n         '() (reverse %))","user":"57da5fc4e4b0bd073c20240f"},{"problem":25,"code":"#( filter odd? % )","user":"56098003e4b0053d1b86c7e0"},{"code":"#(filter (fn [x] (== (mod x 2) 1)) %)","problem":25,"user":"533cebf1e4b085b17e897d78"},{"problem":25,"code":"(fn [s]\n (filter #(not= (rem % 2) 0) s))","user":"5b5b4176e4b0c6492753e6ac"},{"problem":25,"code":";; #25\n(fn [coll]\n  (filter (fn [element] (odd? element)) coll))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [seq]\n    (filter odd? seq))","problem":25,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn [thelist]\n  (loop [oddnumber [] restoflist thelist]\n    (if (empty? restoflist)\n      oddnumber\n      (recur \n       (if (odd? (first restoflist))\n         (conj oddnumber (first restoflist))\n         oddnumber\n         )\n       (rest restoflist))\n      )\n    )\n  )","problem":25,"user":"52cc7c40e4b07d0d72b27364"},{"problem":25,"code":"(fn [input-list] (filter #(odd? %) input-list))","user":"585ad75be4b0f14aab7c8756"},{"problem":25,"code":"(fn [args]\n  (filter odd? args))","user":"54f36b36e4b050824f58f5c2"},{"problem":25,"code":"filter #(= (rem % 2 ) 1)","user":"546a65fce4b00cfc9eacc153"},{"code":"(fn [coll]\n  (sort\n   (reduce (fn [coll item] (if (odd? item) (conj coll item) coll))\n           '()\n           coll)))","problem":25,"user":"532b930be4b09d4e7a9b5534"},{"code":"(fn o [l]\n  ((fn i [l e]\n      (if (empty? l)\n        e\n      (if (odd? (first l))\n         (i (rest l) (conj e (first l) ) )\n      (recur (rest l) e) ) ) ) l []) )","problem":25,"user":"530c15f7e4b02e82168697d6"},{"code":"(fn [l] (filter #((comp not even?) %) l))","problem":25,"user":"52265e41e4b04e78ff2e1981"},{"problem":25,"code":"(fn [list]\n  (for [x list\n        :when (odd? x)]\n    x))","user":"54d87b54e4b0a52adc2e2038"},{"code":"(partial\n  filter #(= (rem % 2) 1) \n)","problem":25,"user":"51c80dd0e4b07ef393169e4a"},{"code":"filter #(=(mod % 2) 1)","problem":25,"user":"4e6279e3535d8ccf87e9fe60"},{"problem":25,"code":"(fn [x] (remove #(= (mod % 2) 0) x))","user":"5f96fa49e4b0715f5002d7e9"},{"problem":25,"code":"(fn[xs](filter (fn[x](not (= (mod x 2) 0))) xs))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":25,"code":"(fn [a] (filter (fn [x] (not (even? x))) a))","user":"5744723ae4b009280f9f2b3a"},{"problem":25,"code":"(fn [s] (filter #(= (rem %1 2) 1) s))","user":"565f8fd2e4b068f2fe63dc41"},{"code":"(fn [coll]\n  (for [x coll\n     \t:let [y x]\n     \t:when (odd? y)]\n     y))","problem":25,"user":"513953f1e4b0a5db03d727e2"},{"problem":25,"code":"(fn [coll]\n  (filter odd? coll)\n  )","user":"53f2370ee4b0742d9025b0e7"},{"code":"(fn odds [list]\n  (cond\n   (empty? list) '()\n   (odd? (first list)) (cons (first list) (odds (rest list)))\n   :else (odds (rest list))\n   )\n  )","problem":25,"user":"5252cbe7e4b0541d1855b8d2"},{"code":";filter odd?\nremove even?","problem":25,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn [numbers]\n  (filter odd? numbers)\n)","problem":25,"user":"4e8e5cc8535d65386fec2142"},{"problem":25,"code":"(fn [ls] \n  (filter #(= (rem % 2) 1) ls))","user":"56db8fbde4b0ea9b8538f80c"},{"problem":25,"code":"#(reduce (fn [acc e]\n           (if (= 0 (mod e 2))\n             acc\n             (conj acc e)))\n         []\n         %)","user":"52a803cee4b0c58976d9ac26"},{"problem":25,"code":"(fn oddk [coll] (filter odd? coll))","user":"5ae7691ae4b0837691e92caa"},{"code":"filter (fn [x](=(mod x 2) 1))","problem":25,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn [nums]\n  (filter odd? nums))","problem":25,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":25,"code":"(fn[n] (filter (fn[n] (= (rem n 2) 1)) n))","user":"55950c5fe4b0c79f6e1db95e"},{"problem":25,"code":"(fn odd-only [l]\n  (filter #(= (mod % 2) 1) l)\n)","user":"54c82b27e4b045293a27f645"},{"problem":25,"code":"(fn [seq] \n  (filter \n   (fn [x] (not (zero? (mod x 2)))) seq))","user":"5b4611fde4b02d533a91bc5c"},{"problem":25,"code":"(fn\n  [l]\n  (filter (fn [x](= (mod x 2) 1)) l))","user":"55923ef7e4b0604b3f94d58a"},{"code":"(fn [coll] (filter #(not (even? %)) coll))","problem":25,"user":"4dadba4dc9a9d6ed3899dc57"},{"problem":25,"code":"(fn f [l] (filter odd? l))","user":"595930f6e4b066ee0a44af9c"},{"problem":25,"code":"(fn f [x]\n  (filter (fn [x] (not= (mod x 2) 0)) x))\n\n;(fn f [x]\n;  (loop [x x\n;         y ()]\n;    (if (= x ())\n;      y\n;      (if (= (mod (first x) 2) 0)\n;        (recur (rest x) y)\n;        (recur (rest x) (concat y [(first x)]))))))","user":"57152731e4b07c98581c3ad0"},{"problem":25,"code":"(fn [se]\n  (filter #(= 1 (mod % 2)) se))","user":"565ddeb9e4b068f2fe63dc2c"},{"code":"#(filter (fn [num] (odd? num)) %)","problem":25,"user":"52c2d900e4b07a9af5792382"},{"problem":25,"code":"#(filter (fn [num] (not= (mod num 2) 0)) %)","user":"55d22ecce4b0e31453f64a55"},{"code":";; using filter would be too easy :)\n(fn filter-odd [s]\n  (loop [sq s res []]\n    (if (empty? sq)\n      res\n      (if (odd? (first sq))\n        (recur (rest sq) (conj res (first sq)))\n        (recur (rest sq) res)))))","problem":25,"user":"4fcd1bbde4b065de69964ca4"},{"problem":25,"code":"(fn impares [x]\n  (if (= x '())\n    '()\n    (if (= (- (/ (float (first x)) 2) (int (/ (first x) 2)) ) 0.5)\n      (conj (impares (rest x)) (first x))\n      (impares (rest x))\n    )\n  )\n)","user":"56d09e8ee4b0ea9b8538f782"},{"problem":25,"code":"(fn [arg] (filter odd? arg))","user":"56018dd4e4b04bb52996e18f"},{"problem":25,"code":"(fn [lst]\n  (loop [x lst acc []]\n    (cond\n     (empty? x) acc\n     (odd? (first x)) (recur (rest x) (conj acc (first x)))\n     :else (recur (rest x) acc))))","user":"57a7f7d8e4b0a96607956218"},{"code":"(fn Rem-Even [input]\n  (remove even? input))","problem":25,"user":"537cf454e4b06839e8705e82"},{"problem":25,"code":"(fn odds [xs] (filter (fn odd? [x] (not= (mod x 2) 0)) xs))","user":"58c623dbe4b021aa9917ed4b"},{"problem":25,"code":"(fn [X] (remove even? X))","user":"4e1e89a2535d04ed9115e809"},{"code":"#(for [x %\n             :let [y x]\n             :when (odd? y)]\n         y)","problem":25,"user":"50a8bb65e4b0deba384a58bd"},{"problem":25,"code":"(fn [s]\n  (remove nil? (map #(if (odd? %) %) s)))","user":"54a6cdc3e4b09f271ff37c8c"},{"code":"(fn [x]\n  (filter #(== (mod % 2) 1) x))","problem":25,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":25,"code":"(fn \n  [coll] \n  (filter odd? coll))","user":"54e4e14ce4b024c67c0cf7f1"},{"problem":25,"code":"(fn [lst] (reduce (fn [acc, nxt] (if (odd? nxt) (conj acc nxt) acc)) [] lst))","user":"5694290fe4b0dcc4269f4110"},{"problem":25,"code":"#(for [x %1\n       :when (odd? x)]\n   x)","user":"5a4b3abde4b05d388ecb6b81"},{"problem":25,"code":"(fn\n   [l]\n     (loop [lst l r ()]\n       (if (nil? (first lst))\n         (reverse  r)\n         (if (= 1 (rem (first lst) 2))\n             (recur (rest lst) (conj r (first lst)))\n             (recur (rest lst) r)))))","user":"54a43230e4b09f271ff37c6e"},{"problem":25,"code":"(\n fn[x] \n  (filter #(= (mod % 2) 1 ) x)\n)","user":"54651ef5e4b01be26fd746d5"},{"problem":25,"code":"(fn [x] (filter #(< 0 (rem %1 2)) x))","user":"55b705fce4b01b9910ae29a0"},{"code":"(fn [nums] (filter odd? nums))","problem":25,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn [n] (filter odd? n))","problem":25,"user":"500e9d2fe4b00fff93030f9a"},{"problem":25,"code":"#(\n  reduce \n  (fn [acc new] \n    (if (odd? new) \n      (concat acc [new]) acc)\n  ) \n\t[] % \n)","user":"5e88a676e4b0cb016954630a"},{"code":"(fn [x] \n  (filter #(= (mod % 2) 1) x))","problem":25,"user":"51750cd4e4b07031762f2ee5"},{"problem":25,"code":"(fn find-odd [col] (filter #(not= 0 (rem % 2)) col))","user":"5c2e2b4fe4b0d62ef62d9f01"},{"problem":25,"code":"(fn [coll] \n  (filter (fn [x] (not (= 0 (mod x 2)))) coll))","user":"5da306a3e4b000c986472be7"},{"problem":25,"code":"(fn my-odds [coll]\n  (for [item coll :let [o item] :when (odd? o)] o))","user":"52fe2dffe4b047fd55837036"},{"problem":25,"code":"#(filter (fn[x]\n\t(= (mod x 2) 1)\n) %)","user":"5bab93d5e4b0a20761a2347f"},{"code":"(fn [list]\n  (filter odd? list))","problem":25,"user":"4fea1f9ee4b0547ebccb248b"},{"code":"(fn [xs]\n  (filter #(not= 0 (mod % 2)) xs))","problem":25,"user":"52a779fce4b0c58976d9ac1a"},{"problem":25,"code":"(fn [n]\n  (filter odd? n))","user":"5a9cdec0e4b0d174b936c7e1"},{"code":"(fn oddonly [items]\n  (cond\n    (empty? items) '()\n    (= 1 (mod (first items) 2))\n    (cons  (first items) (oddonly (rest items)))\n    :else (oddonly (rest items))\n    )\n )","problem":25,"user":"502be4fae4b08f5602f232eb"},{"problem":25,"code":"(fn [x] \n  (loop [y x z '()] \n    (if (== 0 (count y))\n        (reverse z)\n        (let [f (first y)] \n          (if (odd? f) \n            (recur (rest y) (conj z f))\n            (recur (rest y) z)\n            ))  \n    )\n  )\n)","user":"526f670ce4b03e8d9a4a7365"},{"problem":25,"code":"(fn  [arg1]\n      (loop [index 0 retList '()]\n            (if (>= index (count (into [] arg1) ))\n              (reverse retList)\n              (if (= 1 (rem (nth (into [] arg1)  index) 2))\n                (recur (inc index) (conj retList (nth (into [] arg1)  index)))\n                (recur (inc index) retList)))))","user":"5cb6256ce4b026601754b947"},{"code":"(fn findOdd [x] (filter odd? x))","problem":25,"user":"52da25b0e4b09f7907dd13b4"},{"code":"(fn [l]\n  (filter odd? l))","problem":25,"user":"4ec3b393535dcc7ae8597d59"},{"code":"(fn [x] (filter (fn [num] (not= (mod num 2) 0)) x))","problem":25,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":25,"code":"(fn my-find [xs]\n  (filter odd? xs))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [coll]\n  (remove even? coll))","problem":25,"user":"4ff72b8ce4b0678c553fc38b"},{"problem":25,"code":"(fn odd [s]\n  (filter #(= 1 (mod %1 2)) s))","user":"561d506ee4b064ca9f4b16aa"},{"code":"(fn [x] (filter #(not (= 0 (mod % 2))) x))","problem":25,"user":"5242d5c3e4b076204b44fa95"},{"problem":25,"code":"(fn [aSeq] (remove #(zero? (mod % 2)) aSeq))","user":"592dbbd5e4b072a2710fcf7f"},{"problem":25,"code":"(fn [x] (filter #(not= 0 (rem % 2)) x))","user":"5d80789ee4b0915913b1d36a"},{"problem":25,"code":"#(filter \n  (fn [x] \n    (= (mod x 2) 1)) %)","user":"578559a2e4b0ebec4cfb74da"},{"problem":25,"code":"(fn [ns]\n  (filter (fn [x] (= (mod x 2) 1))\n          ns))","user":"54d21e6de4b0e8a36923e5ee"},{"problem":25,"code":"(fn odds [coll] (filter #(odd? %) coll))","user":"58800fd4e4b0f1effa3b7606"},{"problem":25,"code":"(fn odd-filter [number-sequence] \n  (filter \n   \t#(= (mod %1 2) 1) \n   \tnumber-sequence))","user":"5645a7d6e4b0284900eef608"},{"problem":25,"code":"(fn odds\n  [coll]\n  (for [x coll\n    :when (odd? x)]\n    x\n    ))","user":"5d5950c1e4b02ba5928a6827"},{"problem":25,"code":"(fn [arr]\n  (filter (fn [x] (odd? x)) arr))","user":"55c06feee4b01b9910ae2a23"},{"problem":25,"code":"(fn [sequence] (filter odd? sequence))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn od [s]\n  (filter (fn [e] (odd? e)) s))","problem":25,"user":"5207d70ae4b03bd50ef54675"},{"code":"(fn [x] (loop [look x odd '()] (if (empty? look) odd (if (= 1 (mod (last look) 2)) (recur (drop-last look) (conj odd (last look))) (recur (drop-last look) odd)))))","problem":25,"user":"53012382e4b0d8b024fd3718"},{"problem":25,"code":"(fn [input](filter odd? input))","user":"553093bee4b076ab5578f817"},{"code":"(fn [ls] (filter odd? ls))","problem":25,"user":"4dd62278535d2dad7130b5c7"},{"problem":25,"code":"(fn [coll]\n  (for [x coll\n        :when (odd? x)]\n      x))\n\n\n;; or filter odd?","user":"567a3112e4b05957ce8c6196"},{"code":"(fn [lst] (filter (fn [n] (= 1 (mod n 2))) lst))","problem":25,"user":"5256a1d4e4b0541d1855ba29"},{"problem":25,"code":"(fn[n]\n  (loop [given n acc []]\n    (if (empty? given)\n      acc\n    (if (odd? (first given))\n      (recur (drop 1 given) (conj acc (first given)))\n      (recur (drop 1 given) acc)))))","user":"5668aad0e4b04acd4f672df5"},{"code":"#(for [x %, :when (odd? x)] x)","problem":25,"user":"4f7f9665e4b033992c121bea"},{"code":"filter #(not (zero? (rem % 2)))","problem":25,"user":"4ec18451535dfed6da9c6db0"},{"problem":25,"code":"(fn get-odd [s]\n  (cond\n   (empty? s) '()\n   (odd? (first s)) (cons (first s) (get-odd (rest s)))\n   :else (get-odd (rest s))))","user":"5e18c885e4b0dc95940084fc"},{"problem":25,"code":"(fn [lst]\n  (filter odd? (seq lst)))","user":"57f8104ce4b0d3187e900910"},{"problem":25,"code":"#(for [x %\n       :when (= 1 (rem x 2))]\n   x)","user":"54b10d08e4b09f271ff37d18"},{"problem":25,"code":"(fn [coll] (filter (fn [x] (not (= (mod x 2) 0))) coll))","user":"535134bbe4b084c2834f4ae2"},{"code":"(fn strange [x] (if (= (count x) 0) [] (if (= (mod (first x) 2) 1) (cons (first x) (strange (rest x))) (strange (rest x)))))","problem":25,"user":"4e1e7f88535d04ed9115e808"},{"problem":25,"code":"(fn [coolec] (filter odd? coolec))","user":"5523f23ce4b0882d96d091b3"},{"problem":25,"code":"(fn [s] (filter #(> (rem %1 2) 0) s))","user":"5989e080e4b021a7a535fed6"},{"problem":25,"code":"(fn sum_up [coll] ( ->> coll (filter odd?)))","user":"56c9d136e4b0ed865f9758e2"},{"problem":25,"code":"#(loop [lst (reverse %)\n        acc []]\n   (if (empty? lst)\n     (into '() acc)\n     (let [n (first lst)]\n       (if (not (= (rem n 2) 0))\n       \t(recur (rest lst) (conj acc n))\n        (recur (rest lst) acc)))))","user":"5e066185e4b0978307768fa4"},{"problem":25,"code":"(fn  [se]\n  (filter odd? se))","user":"56a257e7e4b0542e1f8d14bb"},{"code":"(fn [x]\n  (filter odd? x ))","problem":25,"user":"529bd5dfe4b04e0c58e87b51"},{"problem":25,"code":"(fn [s] \n  (filter \n   #(not= 0 (rem % 2))\n   s))","user":"57958dace4b0e215f87e8484"},{"problem":25,"code":"(fn [x] \n  (let [nums (reverse (into () x))] \n    (filter odd? nums)))","user":"55842bd7e4b05c286339e11c"},{"problem":25,"code":"(fn find-the-odd-numbers-solution\n  [collection] ;; update args as needed\n  ;; Write a function which returns only the odd numbers from a sequence.\n  (for [x collection :when (not= (rem x 2) 0)] x))","user":"58445c3ce4b089d5ab817e49"},{"code":"(fn [s] (filter (fn [x] (odd? x)) s))","problem":25,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn hoge [x]\n   (if (= (count x) 0) x\n    (if (= (mod (first x) 2) 1) (conj (hoge (rest x)) (first x))\n                                (hoge (rest x)))))","problem":25,"user":"4e2e6460535deb9a81d77f0b"},{"problem":25,"code":"(fn [lst] (filter #(pos? (rem % 2)) lst))","user":"579fc29fe4b0264b925669ff"},{"problem":25,"code":"#(filter (fn [item] (= (mod item 2) 1)) %)","user":"5797748ce4b039eba2ecb0fb"},{"code":"(fn\n  [xs]\n  (for [x xs :when (odd? x)] x))","problem":25,"user":"529dd5a4e4b04e0c58e87b82"},{"problem":25,"code":"(fn [x] (for [l x :when (= 1 (rem l 2))] l))","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn filterodd [sequ] (filter odd? sequ))","problem":25,"user":"50057f23e4b0678c553fc466"},{"problem":25,"code":"(fn odds [xs] \n  (if (empty? xs)\n    xs\n    (if (odd? (first xs)) \n      (conj (odds (rest xs)) (first xs))\n      (odds (rest xs)))))","user":"54d03026e4b018d918be98de"},{"code":"(fn [x] (\n  (fn myOdds [y z]\n     (if (= (count y) 0)\n        z\n        (myOdds\n          (rest y)\n          (if (= (mod (first y) 2) 1)\n            (conj z (first y))\n            z\n          )\n        )\n     )\n  ) x []\n))","problem":25,"user":"4f16d6ed535d64f60314644f"},{"problem":25,"code":"filter (complement #(zero? (rem % 2)))","user":"56aca340e4b03c432f187349"},{"code":"(fn [lst]\n  (filter odd? lst))","problem":25,"user":"4f122bfe535d64f603146426"},{"code":"(fn [x] (remove nil? ( map #(if ( = (mod % 2) 0) nil % ) x )))\n;; I really need to learn the base functions...","problem":25,"user":"536a52f1e4b0243289761eac"},{"problem":25,"code":"(fn [seq] (filter odd? (vec seq)))","user":"5bc352abe4b07a9b28b10041"},{"problem":25,"code":"(fn [data] (filter #(not= nil %) (for [each data] (cond (not= 0 (rem each 2)) each))))","user":"56940617e4b0dcc4269f410b"},{"code":"(fn [ls] (filter #(odd? %) ls))","problem":25,"user":"4f03ba9c535dcb61093f6b58"},{"problem":25,"code":"(fn [x] (filter #(not (= (rem % 2) 0)) x))","user":"5c0a5061e4b0bdcf453d1703"},{"problem":25,"code":"(fn [x] (filter #(not (= (mod %1 2) 0)) x))","user":"54e2a5f7e4b024c67c0cf7d1"},{"problem":25,"code":"(fn [s]\n  \t(filter #(= (rem % 2) 1) s)\n  )","user":"59858cdbe4b021a7a535fe66"},{"problem":25,"code":"(fn odd2 [x]\n  (filter odd? x))","user":"57027310e4b08d47c97781e2"},{"problem":25,"code":"(fn odds\n  [coll]\n  (filter #(= (mod % 2) 1)\n          coll))","user":"565d8dcfe4b068f2fe63dc26"},{"code":"#(for [x %\n       :when (odd? x)\n       ] x)","problem":25,"user":"51db8244e4b0e067a9bbadc7"},{"code":"(partial filter (fn [x] (not= 0 (mod x 2))))","problem":25,"user":"4e51c67a535d302ef430da6a"},{"problem":25,"code":"filter #(= 1 (mod % 2 ))","user":"540479e7e4b0addc1aec665a"},{"code":"#(filter (fn [elem] (odd? elem)) %)","problem":25,"user":"52a229e0e4b04e0c58e87be9"},{"code":"(fn [x] (filter #(not= 0 (rem % 2)) x ))","problem":25,"user":"4e8f630a535d65386fec214d"},{"problem":25,"code":"(fn [coll]\n            (filter \n             #(= (mod % 2) 1)\n             (seq coll)))","user":"55f48d1be4b06e875b46ce7b"},{"problem":25,"code":"(fn evens\n  [items] \n  (filter #(odd? %) items))","user":"562e2c5ce4b0a45d2ff83024"},{"problem":25,"code":"filter #(-> (mod % 2) (= 1))","user":"60898748e4b0ae75613dcef3"},{"problem":25,"code":"#(filter (fn [x]  (= 1 (mod x 2))) %)","user":"5b465b8be4b02d533a91bc65"},{"code":"#(for [x % :when (= 1 (mod x 2))] x)","problem":25,"user":"4ff673b3e4b0678c553fc37d"},{"problem":25,"code":"(fn [l]   \n  (filter #(not (= (mod % 2) 0)) l))","user":"5dc80f78e4b02f9375f4e1d5"},{"problem":25,"code":"(fn odds [s]\n  (filter \n   #(= 1 (mod % 2)) \n   s)\n)","user":"542e8011e4b0dad94371f2c4"},{"code":"(fn build-odd [lst]\n  (cond (empty? lst) ()\n        (= 1 (mod (first lst) 2)) (cons (first lst) (build-odd (rest lst)))\n        :else (build-odd (rest lst))))","problem":25,"user":"52fe3a9de4b047fd55837039"},{"code":"(fn [li] (filter odd? li))","problem":25,"user":"521f0106e4b0e6c71e0c0bc4"},{"problem":25,"code":"(fn [xs] \n  (filter #(= 1 (rem % 2))\n          xs))","user":"6026d2cae4b0d5df2af22232"},{"problem":25,"code":"(fn my-odd [s]\n  (if (empty? s)\n    '()\n    (if (odd? (first s))\n      (conj (my-odd (rest s)) (first s))\n      (my-odd (rest s))\n    )\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"code":"(fn[l](filter #(=(mod % 2)1) l))","problem":25,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn odds\n\t[some-seq]\n  \t(filter odd? some-seq))","problem":25,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn [xs]\n  (for [x xs :when (odd? x)]\n    x\n    )\n  )","problem":25,"user":"531cd41ee4b08068f379eda9"},{"problem":25,"code":"filter #(not= (rem %1 2) 0)","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn odds [x] \n  (if \n    (empty? x) \n      x\n      (if\n        (odd? (first x))\n          (cons (first x) (odds (rest x)))\n          (odds (rest x))\n      )\n  )\n)","problem":25,"user":"4e283bae535deb9a81d77efb"},{"problem":25,"code":"(fn [xs]\n\t(filter #(odd? %) xs))","user":"571d80c7e4b0145328a7627e"},{"code":"#(filter (fn[x](not (even? x))) %)","problem":25,"user":"52419e78e4b076e5d3121f21"},{"problem":25,"code":"(fn odd-out [coll] \n  (filter #(not= (mod % 2) 0) coll))","user":"555176e5e4b0deb715856deb"},{"code":"#(filter (fn [x] (= (rem x 2) 1)) %)","problem":25,"user":"4e78c208535db95036265722"},{"problem":25,"code":"(fn [arg] (filter #(= 1 (mod % 2)) arg))","user":"58cc204ce4b03c36ff7e5860"},{"problem":25,"code":"(fn [xs]\n  (filter\n   (fn [x]\n     (odd? x))\n   xs))","user":"568c4bc8e4b0dcc4269f40b2"},{"problem":25,"code":"(fn [lst]\n  (for [x lst\n        :when (= 1 (rem x 2))]\n        x))","user":"53dfe311e4b0d874e779ae47"},{"problem":25,"code":"#(filter  odd? %)","user":"54c8eb61e4b045293a27f658"},{"code":"filter  #(= 1 (rem % 2 ))","problem":25,"user":"50f8862de4b0aafb827eb203"},{"code":"(fn [l] \n  (filter #(= (rem % 2) 1) l))","problem":25,"user":"533ee560e4b085b17e897d98"},{"problem":25,"code":"#(->> % (filter (fn [x] (not= (mod x 2) 0))))","user":"5501de12e4b07d26eda61d7b"},{"code":"(fn odds [coll] (reverse (reduce (fn [coll x] (if(= 1 (mod x 2)) (cons x coll) coll)) '() (seq coll))))","problem":25,"user":"4e8aef69535d65386fec2114"},{"code":"(fn [x] (filter (fn [y] (if (= 1 (mod y 2)) y)) x))","problem":25,"user":"50b35486e4b03ea88043356a"},{"problem":25,"code":"#(filter (fn [v] (not ( = 0 (mod v 2)))) %)","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn testa [l] (filter #(not= (mod % 2)0) l))","problem":25,"user":"4f74a617e4b044e54cd9a905"},{"problem":25,"code":"(fn [coll] \n    (filter \n        #(not= (rem % 2) 0) coll))","user":"565fe434e4b068f2fe63dc45"},{"problem":25,"code":"(fn [x]\n    (filter odd? x))","user":"5e95873ae4b0fbed045a380a"},{"problem":25,"code":"(fn ods\n  ([x]\n   (if (empty? x)\n     '()\n     (ods (drop-last x)\n          (if (odd? (last x))\n            (cons (last x) '())\n            '()))))\n  ([x y]\n   (if (empty? x)\n     y\n     (ods (drop-last x)\n          (if (odd? (last x))\n            (cons (last x) y)\n            y)))))","user":"5b847d39e4b047b03b2037c1"},{"problem":25,"code":"(fn [l]\n  (loop [result [] list (reverse l)]\n    (if (empty? list)\n      result\n      (recur \n       (if (= (mod (first list) 2) 1)\n         (cons (first list) result)\n         result)\n       (rest list)))))","user":"577629abe4b0979f8965162e"},{"problem":25,"code":"(fn [l] (filter (fn[x] (not= (mod x 2) 0)) l))","user":"5af20ce0e4b0cc2b61a3bc69"},{"code":"(fn foo [x] (if  (empty? x) '() (if (= (rem (first x) 2) 1) (conj  (foo (rest x)) (first x)) (foo (rest x)))))","problem":25,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":25,"code":"(fn [c] (filter (fn [x] (not (= (rem x 2) 0))) c))","user":"57f7c74ee4b0d3187e900902"},{"code":"(fn [in-seq]\n  (filter #(= (mod % 2) 1) in-seq))","problem":25,"user":"535d2e21e4b04ce2eb3ed2bd"},{"code":"#(remove nil? (map (fn [x] (if(= (rem x 2) 1) x)) %))","problem":25,"user":"511a98d7e4b0c87c59c96707"},{"code":"(fn [ns]\n  (filter odd? ns))","problem":25,"user":"53576356e4b04ce2eb3ed27a"},{"code":"reduce (fn [a b] (if (= 1 (bit-and b 1)) (concat a (list b)) a)) '()","problem":25,"user":"517d4ba3e4b0f5e87c18f261"},{"code":"(partial filter (fn [x] (odd? x)))","problem":25,"user":"4eab1a08535d7eef30807311"},{"problem":25,"code":"(fn [col]\n   (filter #(odd? %) col)\n   )","user":"5cdd7157e4b05ee0cb31175b"},{"problem":25,"code":"(fn [s] (filter #(= (rem % 2) 1) (seq s)))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":25,"code":"(fn my-odd\n  [l]\n  (if (empty? l)\n    l\n    (if (zero? (mod (first l) 2))\n      (my-odd (rest l))\n      (conj (my-odd (rest l)) (first l)))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":25,"code":"(fn [A] (for [x A :let[y x] :when (odd? y)] y))","user":"601bdcb3e4b0bf4ca6b10930"},{"code":"filter (fn [x] (not= (mod x 2) 0))","problem":25,"user":"4e8d5edd535d65386fec2134"},{"problem":25,"code":"(fn [l] (filter (fn [x] (odd? x)) l))","user":"56050f06e4b08b23635d3161"},{"code":"#(filter (fn [x] (> (mod x 2) 0)) %)","problem":25,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":25,"code":"(fn [y] (filter #(not= 0 (rem %1 2)) y))","user":"59f4d0e0e4b0966464fe6ab9"},{"problem":25,"code":"filter #(if (> (mod % 2) 0) %)","user":"5c73a944e4b0fca0c16227b8"},{"code":"(fn [coll]\n  (filter (fn [x] (= (rem x 2) 1)) coll))","problem":25,"user":"530c4903e4b02e82168697da"},{"code":"#(filter (fn [x] (= 1 (bit-and x 1))) %)","problem":25,"user":"4fccd906e4b0ee37620e186c"},{"problem":25,"code":"#(filter (fn  [x] (not= (mod x 2) 0)) %)","user":"561eb644e4b064ca9f4b16c6"},{"problem":25,"code":"(fn [in] (filter odd? in))","user":"5600591de4b04bb52996e166"},{"problem":25,"code":"(fn filter-odd [in]\n  (filter odd? in))","user":"5845720de4b089d5ab817e68"},{"code":"(fn [xs] (filter (fn [x] (= (mod x 2) 1)) xs))","problem":25,"user":"504f87e0e4b0a02f9cffde91"},{"problem":25,"code":"(fn [coll]\n  (reverse (reduce (fn [new-coll element]\n                     (if (not (integer? (/ element 2)))\n                       (conj new-coll element)\n                       new-coll))\n                   '()\n                   coll)))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"filter #(not(zero? (mod % 2)))","problem":25,"user":"4fd308e8e4b04c3a95aa042a"},{"problem":25,"code":"(fn odds [xs] (filter #(not= 0 (mod % 2)) xs))","user":"5ea806d5e4b00a66d4a951b9"},{"problem":25,"code":"(fn [y] (remove nil? (map (fn [item] (if (= 1 (mod item 2)) item nil)) y)))","user":"56152a26e4b05f002753dfc1"},{"code":"(fn odd-only [x]\n  (filter odd? x))","problem":25,"user":"525805bbe4b0cb4875a45ca1"},{"problem":25,"code":"#(loop [arr % odds []]\n          (if\n            (empty? arr)\n            odds\n            (if\n              (= (mod (first arr) 2) 1)\n              (recur (rest arr) (conj odds (first arr)))\n              (recur (rest arr) odds))))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn [l]\n  (filter #(= 1 (rem % 2)) l)\n  )","problem":25,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn [c] (filter odd? c))","problem":25,"user":"4e690d86535d8ccf87e9fe96"},{"problem":25,"code":"(fn [in] \n  (filter \n   (fn [x] (= (rem x 2) 1)) \n   in\n  )\n)","user":"58711e7be4b01531a375e9f9"},{"problem":25,"code":"(fn find-odd[x]\n  (let [b '()]\n    (remove nil?\n            (for [i x]\n              (if (odd? i) i)))))","user":"5018878ce4b029375d2a5056"},{"code":"(fn [c] (filter #((complement nil?) %) (map #(when (odd? %) %) c)))","problem":25,"user":"5318594ee4b08068f379ed6d"},{"problem":25,"code":"(fn [somelist] (for [i somelist :when (odd? i)] i))","user":"5643b67ae4b0018b46ad8bfe"},{"problem":25,"code":"(fn [v] (reduce #(if (odd? %2) (conj %1 %2) %1) [] v))","user":"55031638e4b086ebe8a79c67"},{"problem":25,"code":"(fn [mylist] (filter #(= (mod % 2) 1) mylist))","user":"56e078e7e4b0ca2494a09609"},{"code":"(fn [x] (filter (fn [n] (odd? n)) x))","problem":25,"user":"51b70902e4b04fc00976d47b"},{"problem":25,"code":"(fn [xs]\n  (reverse\n    ((fn [ys odds]\n       (if (empty? ys)\n         odds\n         (recur (rest ys)\n                (if (= (rem (first ys) 2) 0)\n                  odds\n                  (conj odds (first ys))))))\n     xs '())))","user":"56be350ce4b0f26550335981"},{"code":"(fn odds [s]\n  (if (empty? s) '()\n    (if (odd? (first s)) (cons (first s) (odds (rest s)))\n      (odds (rest s)))))","problem":25,"user":"504e48ace4b0f6ff3350c498"},{"problem":25,"code":"(fn find-odd [coll]\n  (loop [[first & rest] (reverse coll)\n         result '()]\n    (if (nil? first)\n      result\n      (recur rest (if (odd? first)\n                    (conj result first)\n                    result)\n             )\n      )\n    )\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":"(fn [s]\n  (filter odd? s))","problem":25,"user":"4e50c894535dc968683fc4ee"},{"problem":25,"code":"(fn [x] (\n  filter odd? x))","user":"5f9f744fe4b0715f5002d841"},{"problem":25,"code":"(fn [list] \n  (filter (fn [x] (= (mod x 2) 1)) list))","user":"5f0ccff2e4b0f30dddfb5d4f"},{"problem":25,"code":"#(reverse(loop [inseq % outseq '()]\n  (if (nil? inseq)\n      outseq\n      (recur (next inseq)\n       (if (= 0 \n         (mod (first inseq) 2))\n        outseq\n        (cons (first inseq) outseq)) ) ) ))","user":"5762fcfde4b0994c1922fbb3"},{"problem":25,"code":"#(-> (filter odd? %))","user":"5911aa1de4b0163c97b36ed8"},{"code":"(fn impares[x]\r\n (filter #(= 1 (mod % 2))x)\r\n)","problem":25,"user":"4eb7ff08535d7eef30807379"},{"problem":25,"code":"#(filter (fn [e] (not (= (rem e 2) 0))) %)","user":"52aaabf7e4b0c58976d9ac68"},{"problem":25,"code":"(fn [alist] \n  (filter \n   #(= 1 (rem % 2))\n  alist))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":25,"code":"(fn [l]\n  (filter (fn [v]\n              (= (mod v 2) 1)\t\n           ) \n          l)\n  )","user":"5ebb4751e4b00a66d4a95262"},{"problem":25,"code":"(fn getodds [s] (if (seq s)\n      (concat \n\t\t\t(if (odd? (first s)) \n\t\t\t\t[(first s)]\n\t\t\t\t'()\n\t\t\t)  \n\t\t\t(getodds (rest s)) \n      []\n\t  )\n  )\n)","user":"592018d2e4b09b4ee5954c55"},{"problem":25,"code":"(fn [seq]\n  (reverse (reduce (fn [out-list num]\n              (if ((complement =) (mod num 2) 0)\n                (conj out-list num)\n                out-list))\n            '()\n            (vec seq))))","user":"5f15a50fe4b091ba50b4dbbc"},{"code":"(fn [coll] (filter #(not(= 0 (mod % 2))) coll))","problem":25,"user":"52c7399be4b0c2d177d6211f"},{"code":"(fn is-odd [x] (filter odd? x))","problem":25,"user":"52d4f23be4b09f7907dd1337"},{"code":"(fn [seq] (filter #(= 1 (mod % 2)) seq))","problem":25,"user":"4e2f9e71535deb9a81d77f11"},{"problem":25,"code":"reduce (fn [nl e] (if (= 1 (mod e 2)) (conj nl e) nl)) []","user":"5a23c4b0e4b0ff51aa4b32de"},{"problem":25,"code":"#(loop [se %, result []]\n  (if (empty? se) \n   \tresult\n\t(recur (rest se) \n\t\t(if (odd? (first se))\n    \t\t(conj result (first se))\n    \t\tresult))))","user":"56d63c71e4b0ea9b8538f7cb"},{"problem":25,"code":"(fn [son]\n  (filter odd? son))","user":"579816abe4b039eba2ecb10d"},{"code":"(fn [col] (filter #(< 0 (mod % 2)) col))","problem":25,"user":"51e05dfae4b01188f0627543"},{"problem":25,"code":"(fn odds [x] (filter #(= (rem % 2) 1) x))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn [S] \n  (for [i S\n    :when (not= 0 (rem i 2))] i))","problem":25,"user":"4fda016ae4b05e33b9224f42"},{"problem":25,"code":"(fn [x]\n  (filter\n    #(= (rem % 2) 1)\n    x))","user":"5f3ddc71e4b004f08c61c551"},{"code":"(fn [l] (filter (comp not even?) l))","problem":25,"user":"504e3afae4b0f6ff3350c488"},{"problem":25,"code":"(fn odd [sq]\n  (filter (fn [x] (= 1 (mod x 2))) sq))","user":"5e33e399e4b0650de70e2b11"},{"problem":25,"code":"(fn f [c] (filter odd? c))","user":"566a0845e4b04acd4f672e05"},{"problem":25,"code":"(fn [c] (filter #(= 1 (mod % 2)) c))","user":"593c71cbe4b069cdc2982b90"},{"code":"#(filter (fn[x](not= (mod x 2) 0)) %)","problem":25,"user":"529da890e4b04e0c58e87b7e"},{"problem":25,"code":"(fn [xs] (filter #(not (= 0 (mod % 2))) xs))","user":"5856980de4b0f14aab7c86f7"},{"code":"(fn [coll] (filter #(not= (rem % 2) 0) coll))","problem":25,"user":"52b84ad7e4b07a9af57922af"},{"problem":25,"code":"(fn [x]\n            (loop [q x ret []]\n              (if (first q)\n                (if (not= 0 (rem (first q) 2))\n                  (recur (rest q) (conj ret (first q)))\n                  (recur (rest q) ret))\n                ret)\n              ))","user":"60740c42e4b069485764de43"},{"problem":25,"code":"(fn find-odds[collec]\n  (filter odd? collec))","user":"555c7517e4b0b056612e224e"},{"problem":25,"code":"#(filterv odd? %)","user":"56815e2fe4b0945ebc182a84"},{"code":"(fn f25b [se] (filter #(not (= (mod % 2) 0)) se))","problem":25,"user":"52bf0116e4b07a9af5792328"},{"code":"(fn impares [coll]\r\n  (#(filter odd? %) coll))","problem":25,"user":"4df0f863535d08e6dec9fe19"},{"code":"(fn [s]\r\n    (filter (fn [i] (= 1 (mod i 2))) s))","problem":25,"user":"4f934325e4b0dcca54ed6cb8"},{"code":"(fn [my-list] (filter (fn [arg] (= 1 (mod arg 2))) my-list) )","problem":25,"user":"4f2965ffe4b0d6649770a029"},{"problem":25,"code":";;filter #(= 1 (rem % 2))\n;;filter #(-> %\n;;            (rem 2)\n;;            (= 1))\nfilter odd?","user":"5dbac8ebe4b010eb3c36cd62"},{"code":"(fn find-odds [s]\n  (if (not (empty? s))\n    (if \n      (odd? (first s)) (cons (first s) (find-odds (rest s)))\n      (find-odds (rest s)))\n    '()))","problem":25,"user":"4f8c50f9e4b02e764a0a5195"},{"problem":25,"code":"(fn [m] (filter odd? m))","user":"59346d29e4b072a2710fd077"},{"problem":25,"code":"(fn [x] (filter (complement even?) x))","user":"538c4e52e4b0b51d73faae59"},{"problem":25,"code":"(fn [mylist] (filter (fn [x] (= 1 (mod x 2))) mylist))","user":"5439c3cee4b032a45b869323"},{"problem":25,"code":"#(for [x % :when (odd? x)] x )","user":"53ed1cb8e4b0d648e757f4be"},{"code":"(fn getodd [x]\n  (if (empty? x)\n    '()\n  (if (odd? (first x))\n    (cons (first x) (getodd (rest x)))\n    (getodd (rest x)))))","problem":25,"user":"4fb4e279e4b081705acca2b3"},{"code":"(fn [seq] (filter odd? seq))","problem":25,"user":"4df1e213535d08e6dec9fe20"},{"problem":25,"code":"#(loop [odds ()\n        col %]\n   (if (next col)\n     (if (odd? (first col))\n       (recur (conj odds (first col)) (next col))\n       (recur odds (next col)))\n     (if (odd? (last col))\n       (reverse (conj odds (last col)))\n       (reverse odds))))","user":"4ec549e1535d6d7199dd3691"},{"code":"(fn [x]\n  (filter #(not (= (mod % 2) 0)) x))","problem":25,"user":"4fea8741e4b0140c20fb9c09"},{"problem":25,"code":"(fn odd-numbers\n  [some-sequence]\n  (filter #(not= (mod % 2) 0) some-sequence))","user":"5c9a638fe4b048ec896c5aae"},{"code":"filter #(> (mod % 2) 0)","problem":25,"user":"4e7e1483535db169f9c79702"},{"code":"filter #(=(rem % 2) 1)","problem":25,"user":"500690e4e4b0678c553fc488"},{"problem":25,"code":"filter #(if (= 0 (rem %1 2)) false true)","user":"57ecc16fe4b0bfb2137f5b83"},{"code":"#(filter (fn [item] (not (zero? (rem item 2)))) %)","problem":25,"user":"4e93600b535dbda64a6f6b0e"},{"problem":25,"code":"(fn [x]\n      (reduce (fn [result partial]\n                (if (= (rem partial 2) 1)\n                  (conj result partial)\n                  result\n                  )\n                ) [] x)\n      \n      )","user":"544fb010e4b0e39780006997"},{"problem":25,"code":"(fn fon[s]\n  (if (seq s) \n   (if\n     (odd? (first s))\n     (cons (first s) (fon (next s)) )\n     (fon (next s))\n     )\n    '()\n    )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [x]\r\n( filter #(= (mod % 2) 1) x)\r\n)","problem":25,"user":"4f00c74f535dcb61093f6a31"},{"problem":25,"code":"(fn [col]\n (filter #(= 1 (rem %1 2)) col))","user":"54580586e4b01be26fd74616"},{"problem":25,"code":"(fn [l]\n  (for [x l\n             :let [y x]\n             :when (odd? y)]\n         y))","user":"54b2c888e4b09f271ff37d2e"},{"code":"(fn [x] \n  (filter \n    #(contains? (set `(1 3 5)) %) x))","problem":25,"user":"4ebe066a535dfed6da9c6d91"},{"problem":25,"code":"(fn [Karte] \n\t(loop [Liste Karte\n\t\tResult nil]\n\t\t(if (empty? Liste)\n\t\t\t(reverse Result)\n\t\t\t(recur (rest Liste) \n\t\t\t\t(if (odd? (first Liste))\n\t\t\t\t(conj Result (first Liste))\n\t\t\t\tResult)))))","user":"5b35de7be4b02d533a91bb97"},{"problem":25,"code":"(fn odds [lst] (filter #(odd? %) lst))","user":"5e978fe5e4b0157ca96647d1"},{"code":"(fn odd_only [se] (filter odd? se))","problem":25,"user":"53901605e4b0b51d73faae95"},{"code":"#(filter odd? (seq %))","problem":25,"user":"51d22261e4b0d13b04db0d95"},{"problem":25,"code":"(fn [seqs]\n  (filter #(odd? %) seqs))","user":"531571ece4b08068f379ed27"},{"code":"(fn my-odd [sqs] (filter #(odd? %) sqs))","problem":25,"user":"4ef2eb4d535dced4c769f226"},{"code":"(fn [x] (filter #(= (rem % 2) 1) x))","problem":25,"user":"4ea08b30535d7eef308072a5"},{"code":"(fn [p] (filter odd? p))","problem":25,"user":"52474ec2e4b05ef8e38e6361"},{"code":"(fn [s]\n  (filter odd? s)\n)","problem":25,"user":"51eb3aace4b0f1f103a0d159"},{"problem":25,"code":"(fn mf\n  ([sq]\n   (mf sq '()))\n  ([sq res]\n    (if (seq sq)\n      (mf (rest sq) (if (odd? (first sq)) (conj res (first sq)) res))\n      (reverse res))))","user":"57237a02e4b0c5bde472c0e5"},{"problem":25,"code":"(fn [col] \n  (filter #(= 1 (rem % 2)) col))","user":"558bb38fe4b0277789237631"},{"code":"(fn [coll] (filter (fn [x] (not= (mod x 2) 0)) coll))","problem":25,"user":"514066e3e4b076604f1aa553"},{"problem":25,"code":"(fn filter-odd [unfiltered-list]\n  (filter odd? unfiltered-list))","user":"5788a541e4b0ebec4cfb7520"},{"problem":25,"code":"(fn odds [s] (filter #(= (mod %1 2) 1) s))","user":"55293c48e4b0ffed3738f946"},{"code":"(fn [x] (filter #(not(even? %))  x))","problem":25,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":25,"code":"(fn impar\n  [seq]\n  (if (empty? seq)\n    '()\n    (if (odd? (first seq))\n      (conj (impar (rest seq)) (first seq))\n      (impar (rest seq)))))","user":"53cd66dee4b00fb29b2212e2"},{"code":"#(for [x %\n       :when (odd? x)]\n   x)","problem":25,"user":"53536386e4b084c2834f4afe"},{"problem":25,"code":"filter #(==(mod % 2) 1)","user":"57752a2de4b0979f89651613"},{"code":"(fn crp [s]\n  (println s)\n  (if (< (count s) 1)\n    []\n    (if (odd? (first s))\n      (cons (first s) (crp (rest s)))\n      (crp (rest s))\n      )\n    )\n  )","problem":25,"user":"4f2004a1535d64f6031464a7"},{"problem":25,"code":"(fn [seq] (filter (fn [x] (= 1 (mod x 2))) seq ))","user":"595041e8e4b066ee0a44ae90"},{"code":"(fn [coll]\n  (loop [coll coll odds ()]\n    (if (empty? coll)\n      (reverse odds)\n      (recur (rest coll)\n             (if (odd? (first coll))\n               (cons (first coll) odds)\n               odds)))))","problem":25,"user":"5369a4b1e4b0243289761e9f"},{"code":"(fn even-one-out [x]\n  (if (= x '())\n    '()\n    (if (= 1 (mod (first x) 2))\n      (conj (even-one-out (rest x)) (first x))\n      (even-one-out (rest x))\n    )\n  )\n)","problem":25,"user":"4fa7ef54e4b081705acca1ca"},{"code":"filter #(= 1 (mod % 2) )","problem":25,"user":"5230d490e4b0035e815da396"},{"problem":25,"code":";;(fn [x] (filter odd? x))\n#(filter odd? %)","user":"580517d4e4b0a837a8b30cb9"},{"code":"filter #(-> % (rem 2) (= 1))","problem":25,"user":"502a9fdee4b095a7adb898b4"},{"problem":25,"code":"(fn [sequence] (filter #(not= (rem % 2) 0) sequence))","user":"5a47ce68e4b05d388ecb6b5d"},{"problem":25,"code":"(fn get-odd [obj]\n  (for [x obj :when (odd? x)] x))","user":"552689cfe4b0ffed3738f91e"},{"code":"(fn [x] (filter (complement #(= (mod % 2) 0)) x))","problem":25,"user":"4ec2f1d9535dcc7ae8597d4d"},{"code":"(fn odd [seq]\n  (filter #(not (even? %)) seq))","problem":25,"user":"519a5880e4b022efe2b3ba93"},{"problem":25,"code":"(fn FindAllOdd\n  ([collection]\n   (FindAllOdd collection '()))\n  ([collection oddCollection]\n    (if (empty? collection)\n      (reverse oddCollection)\n      (if (= 0 (mod (first collection) 2))\n        (FindAllOdd (rest collection) oddCollection)\n        (FindAllOdd (rest collection) (conj oddCollection (first collection))))) \n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":25,"code":"filter (fn [x] (not (zero? (rem x 2))))","user":"554efd47e4b00713264bd99b"},{"problem":25,"code":"(fn addOdd [x] \n  (loop [a x\n         result []]\n    (if (> (count a) 0)\n      (if (odd? (first a))\n        (recur (rest a) (conj result (first a)))\n        (recur (rest a) result))\n      result)))","user":"56a3c89ae4b0542e1f8d14cf"},{"code":"(fn [list]\n  (loop [l list ret '()]\n    (if (= (count l) 0)\n      (reverse ret)\n      (if (odd? (first l))\n        (recur\n          (rest l)\n          (cons (first l) ret)\n        )\n        (recur\n          (rest l)\n          ret\n        )\n      )\n    )\n  )\n)","problem":25,"user":"4fc8f671e4b0ee37620e1840"},{"code":"remove even?","problem":25,"user":"4e43b0d9535dc968683fc4a3"},{"problem":25,"code":"filter #(-> (mod % 2) zero? not)","user":"55f6fe09e4b06e875b46cea2"},{"code":"filter #(zero? (mod (inc %) 2))","problem":25,"user":"510db6cde4b078ea71921145"},{"code":"(fn my-add [data]\n  (filter #(odd? %) data))","problem":25,"user":"4f840766e4b033992c121c27"},{"problem":25,"code":"(fn filt [l]\n  (if (empty? l)\n    '()\n    (if (= 0 (mod (first l) 2))\n      (filt (rest l))\n      (cons (first l) (filt (rest l)))\n    )\n  )\n)","user":"54eb3a9ee4b024c67c0cf846"},{"code":"#(filter (fn [v] (odd? v)) %)","problem":25,"user":"539c64cde4b0b51d73faaf2a"},{"code":"(fn only-odd [s] (filter #(odd? %) s))","problem":25,"user":"51ab7a68e4b04e3dc0c27b35"},{"code":"(partial filter #(== 1 (rem % 2)))","problem":25,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn find-odd [l]\n  (filter #(not= (mod % 2) 0) l))","problem":25,"user":"52d7412ce4b09f7907dd1371"},{"problem":25,"code":"(fn [x] ( filter odd? x))","user":"590d0b3fe4b047aa04b199f9"},{"problem":25,"code":"(fn onlyodd ([l] (onlyodd l '())) ([l newlist] (if (= l '()) newlist (if (odd? (first l)) (cons (first l) (onlyodd (rest l) newlist)) (onlyodd (rest l) newlist) ))))","user":"5c704f94e4b0fca0c162277d"},{"problem":25,"code":"(fn [s]\n  (loop [rs s, as []]\n    (if (seq rs)\n      (recur (next rs) (if (odd? (first rs)) (conj as (first rs)) as))\n      as)))","user":"537e4432e4b06839e8705e9f"},{"code":"(fn [seq] (filter #(=(rem % 2) 1) seq))","problem":25,"user":"5003bb77e4b0678c553fc442"},{"problem":25,"code":"(fn [vec] (filter odd? vec))","user":"5addadfce4b0837691e92c13"},{"code":"(fn [lst] (filter #(odd? %) lst))","problem":25,"user":"4f0379ef535dcb61093f6ae7"},{"code":"(fn[x](for[some x :when (= (mod some 2) 1)] some))","problem":25,"user":"5302d79ce4b0d8b024fd3736"},{"problem":25,"code":"#(loop [s % r []]\n      (if (empty? s)\n        r\n        (recur (rest s) (if (odd? (first s)) (conj r (first s)) r ))))","user":"5763818ae4b0994c1922fbc7"},{"problem":25,"code":"(fn get-odd [seq]\n  (filter odd? seq))","user":"52f8db41e4b047fd55836fdc"},{"problem":25,"code":"(fn [s]\n  (remove even? s))","user":"55c4cd8de4b0e31453f649a4"},{"code":"(fn odds [x] ( if (empty? x) '() (if (= (mod (first x) 2) 1) (conj (odds (rest x)) (first x)) (odds (rest x))) ))","problem":25,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn f [x]\n   (if (empty? x)\n     ()\n     (#(if (odd? (first x))\n         (conj % (first x))\n         %)\n       (f (rest x)))))","problem":25,"user":"522e4baae4b01cdb292c5f00"},{"code":"(fn myodds [x]\n  (if (empty? x)\n    '()\n    (if (odd? (first x))\n      (conj (myodds (rest x)) (first x))\n      (myodds (rest x)))))","problem":25,"user":"4f0369a2535dcb61093f6ab0"},{"code":"(fn [seq-to-filter] (filter odd? seq-to-filter))","problem":25,"user":"5137fb22e4b0a5db03d727d3"},{"code":"filter #(  = 1 (mod % 2))","problem":25,"user":"4eb2a89d535d7eef3080734c"},{"problem":25,"code":"(fn t [x]\n  (cond\n   (empty? x) '()\n   (odd? (first x)) (conj (t (rest x)) (first x))\n   :else (t (rest x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [sq]\n  (filter #(odd? %) sq))","problem":25,"user":"5144e89be4b021a5ff8301f9"},{"problem":25,"code":"(fn [sq] (filter (fn [i] (odd? i)) sq))","user":"571a282ae4b07c98581c3b46"},{"problem":25,"code":"(fn [listo] (filter #(odd? %) listo))","user":"575aa61ae4b02ea11479934e"},{"problem":25,"code":"(fn [xs] \n  (filter #(= 1 (mod % 2)) xs))","user":"551ee974e4b08d5046aa8a50"},{"problem":25,"code":"#(filter (fn [x] (if (= (rem x 2) 1) true false)) %)","user":"5ad6d0c9e4b0ea6055cfac11"},{"problem":25,"code":"filter (fn [number] (odd? number))","user":"59259efbe4b072a2710fce79"},{"code":"(fn [coll] (filter (fn [x] (= (mod x 2) 1)) coll))","problem":25,"user":"539cacbde4b0b51d73faaf2f"},{"code":"(fn count-odd [x]\n  (filter odd? x)\n  )","problem":25,"user":"500a214de4b03d00572d2d74"},{"problem":25,"code":"#(filter (fn [x] (-> (mod x 2) (= 0) (not))) %)","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":25,"code":"(fn find-odd [input-list] \n  (cond (empty? input-list) '()\n        (= (mod (first input-list) 2) 1)\n       \t(cons (first input-list) (find-odd (rest input-list)))\n        true (find-odd (rest input-list))))","user":"5c547943e4b0fb8c5ffd9a0a"},{"code":"(fn [seq]\n  (filter #(= (rem % 2) 1) seq))","problem":25,"user":"4f7a9416e4b06e829148e19b"},{"problem":25,"code":"(fn [items]\n  (filter \n     (fn [n] (= 1 (mod n 2)))\n      items\n   )\n)","user":"57c3c7e6e4b05aa3c4741cc4"},{"problem":25,"code":"(fn [l] \n  (filter \n   (fn [i] (= 1 (mod i 2)))l))","user":"5486e317e4b0e286459a11c0"},{"problem":25,"code":"(fn odds-only [xs]\n  (filter odd? xs))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn [data] (filter odd? data))","problem":25,"user":"501d0321e4b066e56b9d0b1d"},{"code":"filter (fn [n] (= (mod n 2) 1) )","problem":25,"user":"51780bfce4b0f89a8f53839c"},{"code":"filter (fn [s] (not (= (rem s 2) 0)))","problem":25,"user":"4e967c4a535dbda64a6f6b47"},{"code":"(fn [seq]\n  (filter odd? seq))","problem":25,"user":"4ea1bc93535d7eef308072b9"},{"problem":25,"code":"#(for [ x % :when (odd? x)] x)","user":"5972fcf6e4b01722bebd4c92"},{"problem":25,"code":"(fn [s] \n      (reverse \n       (reduce \n        (fn [l e] (if \n                   (= 1 (rem e 2))\n                   (conj l e) l))\n        ()\n        s)))","user":"5e4beca9e4b0889a8790a560"},{"code":"(fn [coll]\n  (remove nil? (map \n    (fn [n]\n      (if-not (= (rem n 2) 0) n))\n    coll)))","problem":25,"user":"4ff695f8e4b0678c553fc380"},{"problem":25,"code":"(fn [x]\n  (loop [input x\n         result []]\n    (if (empty? input)\n      (reverse result)\n      (recur (rest input)\n             (if (= (mod (first input) 2) 0)\n               result\n               (cons (first input) result))\n             ))))","user":"55c4cda5e4b0e31453f649a5"},{"code":"(fn myfx [x]\r\n  (let [isodd?   (fn [y] (  <  0 ( mod y 2) ))]  \r\n  (filter isodd?  x)))","problem":25,"user":"4dfb7b81535d04ed9115e77d"},{"code":"#(for [item % :when (odd? item)] item)","problem":25,"user":"531d34cfe4b08068f379edac"},{"code":"(fn purify [x]\n  (filter #(== (mod % 2) 1) x))","problem":25,"user":"532727bae4b09d4e7a9b54fa"},{"problem":25,"code":"(fn a[x]\n  (filter #(= (rem % 2) 1)\n   x\n   )\n )","user":"54283a7ae4b01498b1a71b2f"},{"problem":25,"code":"(fn get-odd\n  [x]\n  (filter (complement even?) x))","user":"56ebfb93e4b04a395b9a042e"},{"code":"(fn [s]\n  (filter\n    (fn [x] (= 1 (rem x 2)))\n    s\n  )\n)","problem":25,"user":"4ffb3c50e4b0678c553fc3c8"},{"problem":25,"code":"(fn [x] \n  (filter \n  \t(fn [y] \n      (not \n       \t(= (mod y 2) 0)\n      )\n     )\n    x\n  )\n)","user":"55d564ece4b0e31453f64a85"},{"problem":25,"code":"(fn [x] (filter #(= (rem % 2) 1) x) )","user":"5433d3ebe4b0b6b47310fce4"},{"code":"(fn [sequen]\n  ( (fn [remaining acc]\n       (let [tail (rest remaining)\n             head (first remaining)]\n         (cond \n          (nil? head) (reverse  acc)\n          (odd? head) (recur tail (conj acc head))\n          :else (recur tail acc)))) sequen '()))","problem":25,"user":"4fafd067e4b081705acca259"},{"problem":25,"code":"(fn only-odd [s] (if (empty? s) '() (if (odd? (first s)) (conj (only-odd (rest s)) (first s)) (only-odd (rest s)))))","user":"57d5ac4de4b0bd073c2023bc"},{"code":"(fn[x]\n    (filter odd? x))","problem":25,"user":"4ea5ba92535d7eef308072d9"},{"code":"(fn f [x]\n  (filter #(= 1 (mod % 2)) x)\n  )","problem":25,"user":"50fb5e61e4b0d10d794c19e8"},{"code":"(fn [x] (filter #(= 1 (rem % 2)) x))","problem":25,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn __ [x]\r\n  (filter #(not= (mod % 2) 0) x))","problem":25,"user":"4fe9b372e4b0547ebccb246b"},{"problem":25,"code":"(fn [x]\n  (filter\n   #(=\n     (mod % 2)\n     1\n    )\n   x\n  )\n )","user":"5dcdb5cbe4b0b296f82db5b2"},{"code":"(fn odd-numbers [lst]\n  (filter odd? lst))","problem":25,"user":"4fc52278e4b081705acca37c"},{"code":"(fn [x] (filter #(not= (rem % 2) 0) x))","problem":25,"user":"4f616892e4b0defedf855fbf"},{"code":"filter #(> (mod % 2 ) 0)","problem":25,"user":"525d417ee4b0cb4875a45d68"},{"code":"(fn [xs] (filter (fn [x] (= 1\r\n                            (mod x 2))) xs))","problem":25,"user":"502d30b1e4b013c13c6a99f0"},{"problem":25,"code":"(fn fodd [lst]\n  (filter (fn [n] (= 1 (mod n 2))) lst)\n  )","user":"550fd845e4b06e50f9beb17c"},{"problem":25,"code":"#(for [i % :when(odd? i)] i)","user":"5c805d45e4b0c8042a70ce13"},{"code":"(fn odd-number [x]\n  (filter odd? x))","problem":25,"user":"4fc8b012e4b0ee37620e1838"},{"problem":25,"code":"filter #(if (= (rem % 2) 1) true false)","user":"55f7a03de4b06e875b46ceae"},{"problem":25,"code":"(fn[li](filter odd? li))","user":"5627444fe4b00e49c7cb47cd"},{"problem":25,"code":"#(remove nil? (map (fn [x] (if (odd? x) x)) %))","user":"5ed5148ee4b016b56eae05d1"},{"code":"#(loop [s % r []]    \n   (if (= nil (first s))\n     r\n     (if (= 0 (mod (first s) 2))     \n       (recur (rest s) r )            \n       (recur (rest s) (conj r (first s))))))","problem":25,"user":"538cc422e4b0b51d73faae63"},{"problem":25,"code":"#(filter (fn [x] (= (mod x 2) 1)) %1)","user":"5a222c17e4b0ff51aa4b32c1"},{"problem":25,"code":"(fn [vals]\n  (filter #(not= (/ % 2) (int (/ % 2))) vals))","user":"5e13a6b7e4b099d064963001"},{"code":"(fn my-odd2 [x] (if (>= 0 (count x))\n                      '()\n                      (if (nil? ((fn get-odd [y] (if (= 1 (mod y 2))\n                                      y\n                                      )) (first x)))\n                       (my-odd2 (rest x))\n                       (conj (my-odd2 (rest x)) ((fn get-odd2 [y] (if (= 1 (mod y 2))\n                                                                   y\n                                                                   )) (first x))))))","problem":25,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [col] \n  (filter #(= (mod % 2) 1) col))","problem":25,"user":"532a111ee4b09d4e7a9b5520"},{"problem":25,"code":"(fn find-the-odd-numbers [xs]\n  (filter odd? xs))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [aseq] (for [n aseq :when (odd? n)] n))","problem":25,"user":"4f048f67535dcb61093f6bd3"},{"problem":25,"code":"(fn odds [lon]\n  (cond\n   (empty? lon) []\n   (odd? (first lon)) (cons (first lon) (odds (rest lon)))\n   :else (odds (rest lon))))","user":"5f8a7bafe4b0715f5002d749"},{"code":"#(filter (fn[x] (= (mod x 2) 1)) %)","problem":25,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":25,"code":"reduce (fn[x y] (if (not= (mod y 2) 0) (conj x   y)  x ))  []","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":25,"code":"#(reduce\n  (fn [acc, x]\n    (if (even? x)\n      acc\n      (conj acc x))) [] %)","user":"5cec049ce4b0a17bb84e2bef"},{"code":"(fn oddels [s]\n  (if (= nil (first s))\n      []\n      (if (= 1 (rem (first s) 2))\n        (cons (first s) (oddels (rest s)))\n        (oddels (rest s)))))","problem":25,"user":"50b06b3ae4b009df37c708b9"},{"code":"(fn fx [x] (\n  filter odd? x\n))","problem":25,"user":"50202d1ae4b0cb6ebc0a42f3"},{"code":"(partial\n  filter (fn[n] (= 1 (mod n 2)))\n)","problem":25,"user":"4e8b1fa2535d65386fec2118"},{"problem":25,"code":"#(filter (fn [n] (not= (mod n 2) 0)) %)","user":"5e7b41f2e4b085ba37836e12"},{"code":"#(for [x % :when (= 1 (rem x 2))] x)","problem":25,"user":"52bcf698e4b07a9af57922fe"},{"problem":25,"code":"(fn [xs] (remove nil? (map #(if (odd? %) %) xs)))","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":25,"code":"(fn [givenlist] (filter odd? givenlist))","user":"56bff105e4b060a8e693e3a4"},{"problem":25,"code":"(fn [lst] (remove nil? (map #(if (odd? %) %) lst)))","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn odds [x]\n  (if (empty? x)\n    '()\n  (if (= (mod (first x) 2) 1)\n    (conj (odds (rest x)) (first x))\n  (odds (rest x)))))","problem":25,"user":"4fd24729e4b04c3a95aa041e"},{"code":"(fn [coll] (filter #(not (zero? (mod % 2))) coll))","problem":25,"user":"5078dedae4b08327cd804a5d"},{"code":"(fn [col] (filter #(not= (mod % 2) 0) col))","problem":25,"user":"50cf1f88e4b0e61f11ddcd8a"},{"problem":25,"code":"(fn odds [s] (filter odd? s))","user":"55efbb2ae4b066087aa9453c"},{"problem":25,"code":"(fn [s]\n  (filter #(not= (mod % 2) 0) s))","user":"54e90803e4b024c67c0cf82f"},{"code":"(fn [x]\n  \t(filter #(not (= 0 (mod % 2))) x)\n  )","problem":25,"user":"51ab734ee4b04e3dc0c27b34"},{"problem":25,"code":"#(for [e %1\n   :when (odd? e)]\n   e)","user":"5766bab8e4b0a07e8fc180b1"},{"code":"(fn [x]\n  (for [y x\n    :when (odd? y)]\n  y))","problem":25,"user":"4f4c4fdde4b03ad3f0c10c8b"},{"problem":25,"code":"(fn [xs] \n  (filter (fn [x] \n    (if (= 1 (mod x 2))\n      x\n    )) xs\n  )\n)","user":"5c3de434e4b0d62ef62d9fb8"},{"problem":25,"code":"(fn my-odd \n  ([l]\n   (reverse (my-odd (into [] l) []))) \n  ([l r] \n   (if (= l []) \n     r \n     (if (odd? (first l)) \n       (recur (rest l) (cons (first l) r)) \n       (recur (rest l) r)))))","user":"55e87696e4b0121d4835fd93"},{"code":"(fn [s] (filter (fn [v] (odd? v)) s))","problem":25,"user":"4ebca352535dfed6da9c6d88"},{"problem":25,"code":"(fn[numbers](filter odd? numbers))","user":"54ef7568e4b024c67c0cf885"},{"code":"(partial filter #(odd? %))","problem":25,"user":"4e03d6ef535d04ed9115e797"},{"problem":25,"code":"#(filter (fn [elm] (= (mod elm 2) 1)) %1)","user":"586f1af2e4b01531a375e9bb"},{"problem":25,"code":"(fn [l]\n  (filter (fn [x] (= 1 (mod x 2))) l))","user":"56a1227fe4b0542e1f8d14ac"},{"problem":25,"code":"reduce #(if(= (mod %2 2) 1) (conj %1 %2) %1) []","user":"5550929ee4b00713264bd9aa"},{"problem":25,"code":"filter (fn [val] (not (= (mod val 2) 0)))","user":"5796e0afe4b039eba2ecb0f0"},{"problem":25,"code":"(fn find-odds [xs]\n  (filter #(= 1 (mod % 2)) xs))","user":"59f7f55de4b0ca45a743a313"},{"problem":25,"code":"(fn odd [lst]\n  (if (= (count lst) 0)\n    []\n    (let [f (first lst)]\n      (if (= (mod f 2) 1)\n        (cons f (odd (rest lst)))\n        (odd (rest lst))))))","user":"503777a4e4b0af0658af77ac"},{"problem":25,"code":"(fn [o i] \n  (if (= i ())\n    o\n    (recur\n     (if (even? (first i))\n             o\n             (conj o (first i)))\n\n     (rest i)))) []","user":"55c0a40be4b01b9910ae2a26"},{"problem":25,"code":"#(filter (fn [n]\n           (not (= (mod n 2) 0)))%)","user":"5ba28f36e4b0a20761a233c4"},{"problem":25,"code":"(fn odd \n    ([l]\n        (odd l [])\n    )\n    ([l odd-list]\n        (if (= l [])\n            odd-list\n            (if (= (mod (first l) 2) 1)\n                (odd (rest l) (conj odd-list (first l)))\n                (odd (rest l) odd-list)\n            )\n        )\n    )\n)","user":"5531c9c0e4b076ab5578f82a"},{"problem":25,"code":"(fn odd [seq] (filter odd? seq))","user":"57476b5fe4b009280f9f2b74"},{"problem":25,"code":"(fn odder [x] (reduce (fn [x, y] (if (odd? y)(conj x y)(vec x))) [] x))","user":"5c14ce29e4b01240ff5671b6"},{"code":"(fn [sq] (filter #(= 1 (rem % 2)) sq))","problem":25,"user":"51c76864e4b07ef393169e3f"},{"problem":25,"code":"(fn [s]\n  (loop [s s, odds []]\n    (if (empty? s)\n      odds\n      (if (= (rem (first s) 2) 1)\n        (recur (rest s) (reverse (cons (first s) (reverse odds))))\n        (recur (rest s) odds)))))","user":"5897c71ee4b00487982d52c7"},{"code":"(fn only-odd [mylist]\r\n    (filter odd? mylist))","problem":25,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":25,"code":"(fn filter-odd\n  [seq]\n  (filter odd? seq))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":25,"code":"(fn\n  [col]\n  (filter (fn\n            [x]\n            (not= (mod x 2) 0)) col))","user":"55a7e096e4b0988bba2ad934"},{"code":"(fn [s] (filter #(> (mod % 2) 0) (vec s)))","problem":25,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":25,"code":"#(filter (fn [n] (= (rem n 2) 1)) %)","user":"5e7bb000e4b085ba37836e1d"},{"problem":25,"code":"(fn [items] (filter #(odd? %) items))","user":"5dcc4b4ae4b02b31cc3da3c6"},{"code":"(fn odds[x](loop[z '() lst x]\n                  (if-not(empty? lst)\n                    (if (odd? (last lst))\n                      (recur (cons (last lst) z)(butlast lst))\n                      (recur z (butlast lst)))\n                    z)))","problem":25,"user":"533078b5e4b019098a6f8b5c"},{"problem":25,"code":"#(filter (fn [num*] (odd? num*)) %)","user":"58bc3202e4b0888cdc949d0b"},{"problem":25,"code":"(fn [coll]\n  (filter (fn [el] (odd? el)) coll))","user":"5fb544f6e4b08cb800c85b4e"},{"code":"(let [is-odd (fn [x] (= (mod x 2) 1))]\n\t#(filter is-odd %))","problem":25,"user":"519b231ee4b0ac1b7dced6a2"},{"problem":25,"code":"#(loop [s %, rets '()] \n  (if (empty? s) (reverse rets) (recur (rest s)\n  (if (odd? (first s)) (conj rets (first s)) rets))))","user":"575d63e9e4b02ea114799382"},{"problem":25,"code":";;(remove nil? (map #(if (odd? %) % nil) input_list))\nremove even?","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":25,"code":"(fn [coll] (reduce #(if (not(even? %2)) (conj %1 %2) %1) [] coll))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [s]\n    (filter odd? s)\n    )","problem":25,"user":"4fa792ebe4b081705acca1c5"},{"problem":25,"code":"(fn findodd [x] (if (empty? x) '() (if (= 0 (mod (first x) 2))  (findodd(rest x)) (concat(list (first x)) (findodd(rest x))))))","user":"55e1029ae4b050e68259b418"},{"code":"(fn get-odds [x] (filter #(= (mod % 2) 1) x))","problem":25,"user":"527c2ac9e4b03e8d9a4a75b7"},{"problem":25,"code":"(fn [x](filter #(not= 0 (rem %1 2))x))","user":"5cfa344de4b0cc9c9158813c"},{"code":"(fn __ [l] (filter odd? l))","problem":25,"user":"4f9f854be4b0dcca54ed6d38"},{"code":"(fn [s] (filter (fn [n] (= 1 (rem n 2))) s))","problem":25,"user":"4f7774a6e4b0fbe0118ec57f"},{"code":"(fn [x] (\n  filter (fn [y] (= (rem y 2) 1)) x\n  )\n)","problem":25,"user":"4f0d1cf3535d0136e6c22314"},{"problem":25,"code":"(fn [x] (reverse (reduce (fn [a b] (if (odd? b) (conj a b) a)) '() x)))","user":"58c3af4de4b021aa9917ed1b"},{"problem":25,"code":"(fn mfl [s] (filter #(= 1 (rem % 2)) s))","user":"5a487d9ce4b05d388ecb6b67"},{"problem":25,"code":"filter ( fn [x] (= (mod x 2) 1) )","user":"541d2594e4b01498b1a71a7c"},{"problem":25,"code":"(fn [list] (filter #(odd? %) list))","user":"5e491182e4b043cd24807a46"},{"problem":25,"code":"(fn [x] (filter #(not= 0 (mod %1 2)) x))","user":"5d1a92d6e4b0902706380e11"},{"code":"(fn [x]\r\n\t(filter odd? x))","problem":25,"user":"510a6bece4b06956752d35af"},{"problem":25,"code":"(fn[lst] (filter #(> (rem % 2) 0) lst))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn\n  [numbers]\n  (filter odd? numbers)\n)","problem":25,"user":"53951c75e4b0b51d73faaed4"},{"problem":25,"code":"(fn [x]\n  (loop [ret [] numbers (vec x)]\n    (if (empty? numbers)\n      ret\n      (recur (if (odd? (first numbers))\n          (conj ret (first numbers))\n          ret\n        ) (rest numbers))\n    )\n  )\n)","user":"5d62da51e4b0c9e5857d5020"},{"problem":25,"code":"(fn [items](filter #(not (= 0 (rem % 2))) items))","user":"5d363543e4b01671435dbd20"},{"problem":25,"code":"(fn [coll]\n  (filter\n   odd? coll))","user":"53b14dfce4b047364c04448d"},{"code":"#(filter odd? %)","problem":25,"user":"4dd29ede535dae65d5c462da"},{"code":"(fn odds [s]\n  (filter #(= (mod % 2) 1) s))","problem":25,"user":"4f038484535dcb61093f6b07"},{"code":"(fn [sseq] (filter #(not= 0 (rem % 2)) sseq))","problem":25,"user":"4eee3e6a535d93acb0a668c3"},{"problem":25,"code":"(fn [coll]\n  (loop [remaining coll, found []]\n    (if (= remaining [])\n      found\n      (if (= (mod (first remaining) 2) 1)\n        (recur (rest remaining) (conj found (first remaining)))\n        (recur (rest remaining) found)))))","user":"54a1d047e4b09f271ff37c4f"},{"code":"#(filter (fn [n] (= (mod n 2) 1)) %)","problem":25,"user":"4e951f44535dbda64a6f6b30"},{"problem":25,"code":"(fn [c] (->\n            (reduce (fn [coll val]\n                      (if (not (= 0 (rem val 2)))\n                        (conj coll val)\n                        coll))\n                      () c)\n              (reverse)))","user":"5281fd54e4b0757a1b17144b"},{"problem":25,"code":"#(filter (fn [x] (= (rem x 2) 1)) %1)","user":"53768217e4b06839e8705e26"},{"problem":25,"code":"filter #(not= 0(rem % 2))","user":"568df47fe4b0dcc4269f40cb"},{"problem":25,"code":"(fn impar [x] (filter odd? (vec x)))","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"code":"(fn odd [x]\n  (if (= x [])\n    x\n    (if (= 1 (rem (first x) 2))\n      (cons (first x) (odd (rest x)))\n      (odd (rest x)))))","problem":25,"user":"51a671d4e4b0740bfd1afd21"},{"code":"(fn [s] (remove even? s))","problem":25,"user":"50e448bae4b0463d3207248d"},{"code":"(fn [a-seq]\n  (filter odd? a-seq))","problem":25,"user":"50febf94e4b075812dd6dfb3"},{"code":"(fn [my-seq] \n              (remove even? my-seq))","problem":25,"user":"52b66d98e4b0c58976d9ad46"},{"problem":25,"code":"(partial filter odd?) ;; #(= (mod % 2) 1)","user":"5c1b82bce4b01240ff567211"},{"problem":25,"code":"filter (fn odd? [x] (= 1 (mod x 2)))","user":"53acca34e4b047364c044460"},{"code":"filter  #(when (> (rem % 2) 0) %)","problem":25,"user":"4f33afb7e4b0d6649770a09f"},{"problem":25,"code":"(fn [input-seq]\n  (filter odd? input-seq)\n)","user":"5a4cbba1e4b05d388ecb6b98"},{"code":"(fn [coll] (filter #(odd? %1) coll))","problem":25,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":25,"code":"(fn odd [array]\n(let [is-odd? (fn [e]   (= (rem e 2) 1) )]\n(filter is-odd? array)))","user":"5b3a1c3ce4b02d533a91bbbd"},{"problem":25,"code":"(fn find-odds [seq]\n  (filter (fn [ele] (= (rem ele 2) 1)) seq))","user":"5c196dc3e4b01240ff5671fa"},{"problem":25,"code":"keep #(if (odd? %)%)","user":"580d7e53e4b0849f6811b73e"},{"problem":25,"code":"filter (fn [x]\n         (odd? x))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":25,"code":"(fn\n  [inarray] \n  (filter \n    (fn [x] (= (rem x 2) 1))\n    inarray))","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"(fn tf [l] (filter #(not= (mod % 2) 0) l))","problem":25,"user":"51469a3ae4b04ef915e3731b"},{"code":"(fn [l] \n  (filter odd? l))","problem":25,"user":"517a7f20e4b01aacecbecbee"},{"code":"(fn odds [s]\r\n  (if (= s '())\r\n    s\r\n    (if (= (rem (first s) 2) 1)\r\n      (cons (first s) (odds (rest s)))\r\n      (odds (rest s)))))","problem":25,"user":"4fc50441e4b081705acca36f"},{"problem":25,"code":"(fn my-odds [ls] (if (empty? ls) '()\n         \t\t  (if (odd? (first ls))\n        \t\t     (cons (first ls) (my-odds (rest ls)))\n                    (my-odds (rest ls)))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"code":"(fn [lst] (filter #(not= 0 (mod % 2)) lst))","problem":25,"user":"4fae4c11e4b081705acca248"},{"code":"#(filter odd? %)\n;;this fail not sure why\n;;(fn [x] (reduce (fn [acc el] ( if (odd? el) (conj  acc el))) [] x))","problem":25,"user":"5307e4ece4b02e82168697a9"},{"problem":25,"code":"(fn\n  [lst]\n  (filter odd? lst))","user":"56df6498e4b0ca2494a095f8"},{"problem":25,"code":"(fn [xs] (filter (fn [x] (not (zero? (mod x 2)))) xs))","user":"60cebbd3e4b0e0fa5f1b4334"},{"problem":25,"code":"(fn seq-odd [s]\n  (filter #(not= 0 (rem %1 2)) s))","user":"59ece650e4b0249b72820795"},{"problem":25,"code":"reduce #(if (odd? %2) (conj % %2) %) []","user":"535ca812e4b04ce2eb3ed2b7"},{"problem":25,"code":"(fn odd-only\n  [coll]\n  (filter \n   \t#(= 1 (mod % 2))\n   \tcoll))","user":"55dfac5fe4b050e68259b3f9"},{"problem":25,"code":"(fn [coll] (filter odd? coll) )","user":"5c31517de4b0d62ef62d9f28"},{"code":"(fn [li] (filter (fn [x] (if (= (mod x 2) 0) false true)) li))","problem":25,"user":"52d51024e4b09f7907dd1339"},{"problem":25,"code":"(fn [seqn] (filter #(not= 0 (mod %1 2)) seqn))","user":"5c8cfff8e4b048ec896c5996"},{"problem":25,"code":"(fn [s]\n  (filter #(= 1 (mod % 2)) s)\n  )","user":"55d8db41e4b0e31453f64abf"},{"problem":25,"code":"(fn \n  [xs] \n  (filter (fn [x] (= 1 (mod x 2))) xs))","user":"5c58736be4b01df32ab73247"},{"problem":25,"code":"(fn [s]\n  (filter #(= (mod % 2) 1) s)\n  )","user":"54c6e78ae4b045293a27f634"},{"problem":25,"code":"(fn get-odds [coll] \n  (remove even? coll))","user":"56cb3a61e4b0ea9b8538f726"},{"problem":25,"code":"(fn [l] (filter #(= 0 (mod (+ % 1) 2)) l))","user":"56156feee4b05f002753dfc5"},{"code":"(fn [s] (filter #(== 1 (rem % 2)) s))","problem":25,"user":"4f569218e4b0a7574ea71826"},{"problem":25,"code":"(fn [x] reduce (filter odd? x))","user":"54fe57f6e4b07d26eda61d42"},{"code":"(fn[x]\n  (filter #(odd? %)  x)  \n)","problem":25,"user":"4ee02256535d10e5ff6f534e"},{"problem":25,"code":"(fn [coll] (filter (fn [elem] (odd? elem)) coll))","user":"5da8e170e4b000c986472c29"},{"code":"(fn f [x] \n  (cond (= () x) () \n        (odd? (first x)) (cons (first x) (f (rest x)))\n        :else (f (rest x))))","problem":25,"user":"50d5c19ce4b0159555a1fc61"},{"problem":25,"code":"(fn [a]\n  (filter \n   (fn [n] (= 1 (rem n 2)))\n   a))","user":"547d62f0e4b0c51c1f4d72f1"},{"code":"#(filter odd?  %)","problem":25,"user":"4eb01df4535d7eef30807337"},{"code":"(fn [x] (filter #(= (mod % 2) 1) x)\n)","problem":25,"user":"4e7d3a80535db169f9c796ce"},{"code":"(partial remove (comp zero? #(mod % 2)))","problem":25,"user":"4eea4840535d93acb0a6689b"},{"problem":25,"code":"(fn [x] (loop [s x o []]   \n                              (if (nil? s)\n                                    o\n                                  (do\n                                      (let [n (first s)]\n                                        (recur \n                                          (next s) \n                                          (if (odd? n) \n                                            (conj o n) \n                                            o)\n                                        )\n                                      )\n                                  )\n                               )\n             )\n    )","user":"558b494ce4b0277789237629"},{"code":"(fn [xs] (filter (fn [a] (= 1 (rem a 2))) xs))","problem":25,"user":"50478418e4b0371827a27bc3"},{"problem":25,"code":"#(filter \n   (fn [x] \n     (= (mod x 2) 1)\n   )\n   %)","user":"570f41f8e4b0b0fb43fd0702"},{"problem":25,"code":"(fn [li]\n  (loop [currl li, newl []]\n    (if (empty? currl)\n      newl\n      (if (= (mod (first currl) 2) 1)\n        (recur (rest currl) (conj newl (first currl)))\n      \t(recur (rest currl) newl)\n       )\n      )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"code":"(fn [elements]\n  (filter odd? elements)\n)","problem":25,"user":"535943b3e4b04ce2eb3ed295"},{"code":"(fn [seq]\n (filter #(> (mod % 2) 0) seq)\n)","problem":25,"user":"4e6daa22535d5021c1a895ef"},{"problem":25,"code":"#(filter (fn [x] (not (nil? x))) (map (fn [x] (if (odd? x) x)) %) )","user":"546be022e4b00cfc9eacc171"},{"code":"(fn [c]\n  (filter odd? c))","problem":25,"user":"50608ea0e4b07251188e4456"},{"code":"(fn [x] (filter odd? (seq x)))","problem":25,"user":"4df247b8535d08e6dec9fe25"},{"problem":25,"code":"(fn [s] (reduce #(if (odd? %2) (conj %1 %2) %1) [] s))","user":"598229d6e4b021a7a535fdfb"},{"problem":25,"code":"filter #(= (mod % 2.0) 1.0)","user":"5223b9cee4b01819a2de42b5"},{"code":"filter #(= 1(rem%1 2))","problem":25,"user":"4e3b6bff535deb9a81d77f52"},{"problem":25,"code":"(fn myodds [collec] \n\t(if (empty? collec)\n\t  []\n\t  (if (= 1 (rem (first collec) 2))\n\t    (concat (list (first collec)) (myodds (rest collec)))\n\t    (myodds (rest collec)))))","user":"57af36eae4b0fbc9809a272e"},{"problem":25,"code":"(fn [sq] \n  (filter #(= (mod % 2) 1) sq))","user":"574e7be7e4b02ea114799242"},{"problem":25,"code":"(fn [seq]\n        (filter #(odd? %) seq))","user":"5e317676e4b05b4b01516229"},{"problem":25,"code":"#(filter \n  (fn [x] (= 1 (mod x 2))) \n  %1)","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn [x]\n  (filter #(= (mod %1 2) 1) x))","problem":25,"user":"534941d1e4b084c2834f4a60"},{"problem":25,"code":"(fn odd-only\n  [seq]\n  (filter odd? seq))","user":"5f3103aee4b0574c87022c24"},{"problem":25,"code":"(fn my-odd\n  [lst]\n  (remove even? lst))","user":"57f8153de4b0d3187e900916"},{"problem":25,"code":"(fn [list] (for [x list\n      :when (odd? x)]\n  x))","user":"5bb3c9a8e4b0a20761a2352f"},{"problem":25,"code":"(fn pippo [coll] (filter (fn [x] (not (zero? (mod x 2)))) coll))","user":"5bc6ef7ce4b07a9b28b1009f"},{"problem":25,"code":"(fn [l]\n  (filter (fn [x] (odd? x)) l)\n  )","user":"5e1561b1e4b0a047bd49f700"},{"code":"(fn [sx] (filter #(= (rem % 2) 1) sx))","problem":25,"user":"511a0374e4b06c8af011181a"},{"problem":25,"code":"(fn [values] \n  (filter #(not= 0 (mod % 2)) values))","user":"5f012a2ee4b0cf489e8d7f1e"},{"code":"#(for [x % :when (odd? x)] x)","problem":25,"user":"4e18ed7a535d04ed9115e7f6"},{"problem":25,"code":"(fn my-odd-filter\n  [coll]\n  (filter odd? coll))","user":"5e00752fe4b0a607a9a45d24"},{"problem":25,"code":"(fn [ L ]\n  (loop\n    [ \n      First (first L)\n      Rest (rest L)\n      Ret '()\n    ]\n    \n    (if First\n      (recur (first Rest) (rest Rest) \n         (if (zero? (rem First 2))\n         \tRet\n            (conj Ret First)\n         )\n      )\n      (reverse Ret)\n    )    \n  )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"#(for [x %1 :when (not= (rem x 2) 0)] x)","problem":25,"user":"4fcc70b3e4b0ee37620e1862"},{"code":"(fn odds[numbers](filter odd? numbers))","problem":25,"user":"4e723bcb535d5021c1a8965c"},{"code":"#(filter (fn [x] \n           (= 1 (mod x 2)))\n         %)","problem":25,"user":"51ccc92ce4b02254fc79487a"},{"problem":25,"code":"(fn [x](filter #(not (even? %)) x))","user":"5d1ef23ee4b02ea6f0fb69bb"},{"code":"#(flatten(map(fn[x](if(= 1(mod x 2))x[]))%))","problem":25,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":25,"code":"filter (fn [n] (= (rem n 2) 1))","user":"5c678b6ee4b0fca0c16226bc"},{"problem":25,"code":"(fn [lst]\n   (filter odd? lst))","user":"57f81524e4b0d3187e900913"},{"problem":25,"code":"filter (fn [x] (not(zero? (mod x 2) )))","user":"57986b76e4b039eba2ecb116"},{"problem":25,"code":"(fn [items]\n  (filter odd? items))","user":"574e069fe4b02ea11479923d"},{"problem":25,"code":"#(filter odd?(to-array %))","user":"56a7c7c8e4b07966d5a8a061"},{"code":"filter #(if-not (= (rem % 2) 0) %)","problem":25,"user":"4f33a668e4b0d6649770a09d"},{"problem":25,"code":"(fn odd-numbers [pcoll]\n  (for [x pcoll :when(odd? x)]\n    x))","user":"552bd5c2e4b0ffed3738f969"},{"problem":25,"code":"filter \todd?","user":"54213a8fe4b01498b1a71aaf"},{"code":"(fn [coll]\n  (filter \n    (fn [item] \n      (if (> (mod item 2) 0) item)\n  ) coll))","problem":25,"user":"50503117e4b0a02f9cffdeb5"},{"problem":25,"code":"(fn find-odds [col] (filter #(odd? %) col))","user":"57410964e4b05c31a32c085f"},{"problem":25,"code":"(fn\n  [nums]\n  (filter odd? nums))","user":"5a9567bae4b0d174b936c752"},{"code":"(fn [x] (filter #(not (= (mod % 2) 0)) x))","problem":25,"user":"4f88942be4b033992c121c6a"},{"code":"(fn [list] (filter (fn [x] (= 1 (mod x 2))) list))","problem":25,"user":"502d3912e4b0d96a44ab2030"},{"code":"(fn [coll]\n  \"Write a function which returns only the odd numbers from a sequence.\"\n  (filter odd? coll))","problem":25,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":25,"code":"(fn odd [brojevi] (filter odd? brojevi))","user":"54aef4d0e4b09f271ff37cfe"},{"code":"(fn [xs] (filter (fn [x] (= 1 (mod x 2))) xs))","problem":25,"user":"4e641bfd535d8ccf87e9fe67"},{"code":"(fn [l] (filter #(= 1 (mod % 2)) l))","problem":25,"user":"4edd9d79535d10e5ff6f532b"},{"problem":25,"code":"(fn \n  [data]\n  (for [x data :when (odd? x)] x))","user":"55ad2379e4b03311e7b732a1"},{"code":"(fn only-odd [seq] (filter odd? seq))","problem":25,"user":"4ed92fd6535d10e5ff6f5300"},{"problem":25,"code":"(fn [nums]\n    (filter\n        (fn [num]\n            (= 1 (mod num 2)))\n            nums))","user":"585669d6e4b0f14aab7c86f3"},{"code":"(fn [a] (filter (fn [x] (= 1 (rem x 2))) a))","problem":25,"user":"4e6a2855535d8ccf87e9fea3"},{"problem":25,"code":"(fn [v] (filter #(= (mod % 2) 1) v))","user":"57a499dae4b0a966079561e6"},{"problem":25,"code":"(fn [x] (remove nil? (for [i x] (if (odd? i) i))))","user":"55079757e4b021ccfedb96a9"},{"problem":25,"code":"(fn [coll]\n    (filter #(= (rem % 2) 1) coll))","user":"5337bdfee4b0e30313ee6c8c"},{"code":"(fn o[c] (filter #(odd? %) c))","problem":25,"user":"51012ebde4b0bef64c30e267"},{"problem":25,"code":";  #(loop[c % odd_list nil]\n ;         (if (empty? c)(reverse odd_list)\n  ;            (if(odd? (first c)) (recur (rest c) (cons (first c) odd_list))\n   ;                    (recur (rest c) odd_list))))\n\n  #(filter odd? %)","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn\r\n  [coll]\r\n\t(filter (fn [x] (= 1 (mod x 2))) coll))","problem":25,"user":"4edbae0d535d10e5ff6f531c"},{"problem":25,"code":"(fn\n  [elems]\n  (filter odd? elems))","user":"53de7484e4b0d874e779ae35"},{"code":"(fn [list] (filter #(not= 0  (rem % 2)) list))","problem":25,"user":"4dd9514a535d2dad7130b5dc"},{"problem":25,"code":"filter odd?\n\n;;(fn [x] (filter odd? x))","user":"5ac6f7f7e4b0e27600da777a"},{"problem":25,"code":"(fn [y] (for [x y\n            :when (= 1 (rem x 2))]\n        x))","user":"594b3459e4b07ddc2dafae23"},{"problem":25,"code":"(fn \n\t[nums]\n\t(filter #(= 1 (mod % 2)) nums))","user":"59b62f8de4b05c620303ca1f"},{"code":"(fn impair [liste] \n  (\n    if (empty? liste)\n    ()\n    (if (= (rem (first liste) 2) 0)\n      (impair (rest liste))\n      (cons (first liste) (impair (rest liste)))\n    )\n  )\n)","problem":25,"user":"4f84400de4b033992c121c2e"},{"problem":25,"code":"filter #(if-not (even? %) %)","user":"546a6fd8e4b00cfc9eacc158"},{"code":"filter #(not (even? %))","problem":25,"user":"4f6fd95fe4b07046d9f4efee"},{"problem":25,"code":"filter #(not (even? %))\n\n;filter odd?","user":"55b42706e4b01b9910ae297b"},{"problem":25,"code":"(fn odd [l]\n  (if (empty? l) '()\n    (if (= 1 (mod (first l) 2))\n      (conj (odd (rest l)) (first l))\n      (odd (rest l)))))","user":"5d41f428e4b05dd059a5437b"},{"problem":25,"code":"(fn [sq] (filter #(= 1 (mod % 2)) sq))","user":"54ae541ae4b09f271ff37cef"},{"problem":25,"code":"(partial remove #(even? %))","user":"556f2009e4b09a3098a52519"},{"problem":25,"code":"(fn [x] (filter #(odd? (rem %1 2)) x))","user":"55ae383fe4b03311e7b732b7"},{"problem":25,"code":"(fn[n] (filter #(= 1 (rem % 2)) n))","user":"572d41e6e4b0cd1946bd0f6d"},{"problem":25,"code":"(fn [vals] (filter (fn [x] (= (rem x 2) 1)) vals))","user":"532902f8e4b09d4e7a9b550e"},{"problem":25,"code":"(fn oddi\n  ([col] (oddi col [] ))\n  ([col od] (if (seq col) (oddi (rest col)(if (= 0 (mod (first col) 2)) od (conj od (first col)) )) od) ))","user":"58dd2c02e4b0a4d5acaab6b8"},{"code":"#(for [x % :when (= (rem x 2) 1)] x)","problem":25,"user":"5153b1bce4b0252ac4b16639"},{"problem":25,"code":"filter #(if (odd? %)%)","user":"563f0fdae4b08d4f616f5ece"},{"code":"(fn [arg]\n  (loop [li arg\n         res arg]\n    (if (empty? li)\n      res\n      (let [one (first li)\n            two (rest li)]\n        (if (= 0 (mod one 2))\n          (recur two (remove #{one} res))\n          (recur two res))))))","problem":25,"user":"537881a4e4b06839e8705e46"},{"code":"#(for [n % :when (odd? n)] n)","problem":25,"user":"5032a96ae4b0e78df07b0932"},{"code":"(fn [list] (filter #'odd? list))","problem":25,"user":"4e68fe94535d8ccf87e9fe94"},{"problem":25,"code":"(fn [a] (reduce #(if (odd? %2) (conj %1 %2) %1) [] a))","user":"57e0447ae4b0bd073c202475"},{"problem":25,"code":"(fn [list] (filter #(= 1 (mod % 2)) list))","user":"545f7b09e4b01be26fd74689"},{"code":"(fn temp\n  ([l] (temp l []))\n  ([l r] \n    (let [x (first l) y (next l) z (if (odd? x) (conj r x) r)]\n      (if y (recur y z) z)\n    )\n  )\n)","problem":25,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn [ar] (filter odd? ar))","problem":25,"user":"50c9ece0e4b0a409464667d8"},{"code":"(fn odds [l] (if (= '() l)\n               l\n               (if (= 1 (mod (first l) 2))\n                 (cons (first l) (odds (rest l)))\n                 (odds (rest l)))))","problem":25,"user":"4f49c002e4b0d56e7bb92bfd"},{"code":"(fn [v]\n  (filter odd? v))","problem":25,"user":"5028bce0e4b01614d1633ffb"},{"problem":25,"code":"(fn odd [x] (filterv odd? x))","user":"582f63e5e4b051871117bfef"},{"problem":25,"code":"#(filter (fn [x] (== 1 (mod x 2))) %)","user":"57299c57e4b0c6e51e0d2b1e"},{"code":"filter #(if-not (even? %) true false)","problem":25,"user":"4ee2baa8535d10e5ff6f536b"},{"problem":25,"code":"(fn [s] (filter (fn [n] (not= (mod n 2) 0)) s))","user":"5ee2b376e4b029a2061bbe81"},{"problem":25,"code":"(fn [ls] (filter #(not (zero? (rem % 2))) ls))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"filter #(< 0 (mod % 2))","problem":25,"user":"503b5a64e4b07a1917cc34dc"},{"code":"(fn[p]\r\n      (filter identity(map\r\n      (fn [a b]\r\n        (if a b ))\r\n\r\n      (map ratio? (map / p (cycle [2])))\r\n       p\r\n    ))\r\n    )","problem":25,"user":"4e8da0bf535d65386fec2138"},{"problem":25,"code":"#(filter (fn [x] (not= 0 (mod x 2))) %)\n;; my first solution was this: (filter odd? %)","user":"5bcdbfbde4b0e9689409ee04"},{"problem":25,"code":";#(filter odd? %)\n#(filter (fn [x] (= 1 (rem x 2))) %)","user":"5fd6f12be4b05ac5b16ea110"},{"problem":25,"code":"remove #(= 0 (rem % 2))","user":"5454a7f9e4b0e397800069d8"},{"code":"(fn r\n  [s]\n  (if (empty? s)\n    '()\n    (if (= 1 (rem (first s) 2))\n      (cons (first s) (r (rest s)))\n      (concat '() (r (rest s))))))","problem":25,"user":"52c45ac8e4b0c2d177d620d9"},{"code":"(partial filter (fn [x] (= 1 (mod x 2))))","problem":25,"user":"504e48f3e4b0f6ff3350c499"},{"problem":25,"code":"(fn [l]\n  (filter\n   (fn [x]\n     (= (mod x 2) 1)) l))","user":"551c6bcee4b07993ea3788df"},{"code":"(fn only-odd\n  [lst]\n    (filter odd? lst))","problem":25,"user":"4e7a479b535db169f9c796aa"},{"code":"(fn [list] \n  (reduce \n    (fn [result, item] \n      (if (odd? item) \n        (conj result item) \n        result)) \n    [] \n    list))","problem":25,"user":"4f03396d535dcb61093f6a7b"},{"problem":25,"code":"mapcat (fn [x] (if (= 1 (mod x 2)) (list x) nil))","user":"55c40a8de4b0e31453f64993"},{"code":"(fn [s]\n  (filter #(odd? %) s))","problem":25,"user":"4efb92ce535dced4c769f27a"},{"problem":25,"code":"(fn a [coll]\n  (filter #(not (= (mod % 2) 0)) coll))","user":"605b319de4b079a07f8593f7"},{"code":"(fn [ls]\n  (filter #(not (even? %)) ls))","problem":25,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":25,"code":"(fn [someList]\n  (reduce\n    (fn [newList someNum]\n      (if (= (mod someNum 2) 1)\n        (conj newList someNum )\n        newList\n      )\n    )\n    []\n    someList\n  )\n)","user":"5972198ee4b01722bebd4c7d"},{"code":"(fn odds [x] (filter #(= (mod % 2) 1) x))","problem":25,"user":"4f84f6c3e4b033992c121c3d"},{"problem":25,"code":"(fn [collections]\n  (filter odd? collections))","user":"5dba063ee4b010eb3c36cd5c"},{"problem":25,"code":"(fn [col] \n (loop [col-ev ()\n        rst (seq col)]\n  (if (or \n       (= () rst) \n       (= nil rst)) (reverse col-ev) \n      (do\n       (if \n        (not (= (mod (first rst) 2) 0))   (recur (conj col-ev (first rst)) (rest rst)) (recur col-ev (rest rst)))))))","user":"5f055b2de4b0cf489e8d7f43"},{"problem":25,"code":"(fn [seq] (for [x seq :when (not (= 0 (mod x 2)))] x))","user":"54dc9ba1e4b024c67c0cf785"},{"code":"filter (fn [t] (= (bit-and t 1) 1 ))","problem":25,"user":"4ea85846535d7eef308072f9"},{"problem":25,"code":"(fn\n  [arr]\n  (filter #(= 1 (mod % 2)) arr))","user":"56451201e4b0284900eef600"},{"problem":25,"code":"(fn [coll]\n  (filter odd? (apply list coll)))","user":"5877a553e4b01531a375eaa5"},{"code":"(fn find-odds[l]\n  (if (empty? l)\n    []\n    (concat \n      (if \n        (#(= 1 (mod % 2)) (first l)) \n        (vector (first l)) \n        []\n      )\n      (find-odds (rest l))\n    )\n  )\n)","problem":25,"user":"530b8ce1e4b02e82168697cd"},{"code":"(fn odds [x]\n  (filter odd? x))","problem":25,"user":"51b73a91e4b0d906fcd71d33"},{"code":"filter #(zero? (mod (+ 1 %1) 2))","problem":25,"user":"53480973e4b084c2834f4a52"},{"problem":25,"code":"reduce (fn [x y] (if (= (mod y 2) 0) x (conj x y))) []","user":"5d517784e4b0776584bd6f60"},{"problem":25,"code":"(fn [s] (filter (fn [item] (= 1 (mod item 2))) s))","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"#(filter (fn [x] (not= (rem x 2) 0)) %1)","problem":25,"user":"518637c9e4b0da5a5be3bac8"},{"code":"(fn  [collection]\n  (filter odd? collection))","problem":25,"user":"516081e7e4b009fba0926e28"},{"problem":25,"code":"(fn odd-only [col]\n  (filter odd? col))","user":"56f57481e4b046a417f92072"},{"code":"(fn odd [x] (filter odd? x))","problem":25,"user":"4e6fee9e535d5021c1a8962a"},{"code":"(fn [l] (filter #(= (rem % 2) 1) l) )","problem":25,"user":"51729002e4b044b2ef48a850"},{"problem":25,"code":"(fn [sq]\n  (filter #(= 1 (mod % 2)) sq))","user":"54973b58e4b0b312c081ff70"},{"problem":25,"code":"filter (comp not zero? #(mod % 2))","user":"5443cb97e4b032a45b86938a"},{"code":"(fn [data] (filter #(= 1 (mod % 2)) data))","problem":25,"user":"4fd6e70fe4b0dab7d829f379"},{"problem":25,"code":"(fn only-odd-numbers [seq]\n  (cond (empty? seq) seq\n        (odd? (first seq)) (cons (first seq) (only-odd-numbers (rest seq)))\n        :else (only-odd-numbers (rest seq))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"code":"filter #(= 1 (rem %1 2))","problem":25,"user":"4f1b9c11535d64f60314647c"},{"problem":25,"code":"(fn [s]\n     (filter odd? s))","user":"594ea2a4e4b07ddc2dafaeb6"},{"code":"(fn [xs]\n   (filter #(odd? (mod % 2)) xs))","problem":25,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [x] (filter #(odd? %) x))","problem":25,"user":"4e39c710535deb9a81d77f45"},{"problem":25,"code":"(fn [c]\n  (loop [coll c res []]\n    (if (empty? coll)\n  \tres\n  \t(let [curr (first coll)]\n      (recur (rest coll) (if (odd? curr) (conj res curr) res))\n     )\n   )\n  )\n  \n)","user":"602cc4d4e4b0d5df2af22274"},{"problem":25,"code":"#(loop [s % os []]\n   (if (empty? s)\n     os\n     (if (= (mod (first s) 2) 1)\n       (recur (next s) (conj os (first s)))\n       (recur (next s) os))))","user":"5605b5e9e4b08b23635d316e"},{"code":"filter (fn [n] (= 1 (mod n 2)))","problem":25,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":25,"code":"(fn [inseq] (filter #(= (rem % 2) 1) inseq))","user":"58795fd5e4b01531a375eace"},{"problem":25,"code":"(fn [se] (filter (fn [x] (odd? x)) se))","user":"589dd2cce4b02bd94d917e48"},{"code":"filter (fn [a] (= 1 (mod a 2)))","problem":25,"user":"4eb01582535d7eef30807335"},{"problem":25,"code":"(fn [lis] (filter odd? lis))","user":"54f3b50de4b050824f58f5c9"},{"problem":25,"code":"filter #(pos?(rem % 2))","user":"567b4641e4b05957ce8c61a5"},{"problem":25,"code":"filter #(ratio? (/ % 2))","user":"5b13763be4b0cc2b61a3be4f"},{"problem":25,"code":"(fn myF [aList]\n \t;(for [item (seq [aList]) :when (odd? aList)]\n    ; item)\n  (filter odd? aList)\n  )","user":"56dd0179e4b0ea9b8538f826"},{"code":"(fn\n  [coll]\n  (filter #(odd? %) coll))","problem":25,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":25,"code":"(fn[coll](\n\tfilter odd? coll\n          ))","user":"592b7269e4b072a2710fcf3f"},{"code":"(fn [numbers]\n  (filter #(= 1 (rem % 2)) \n          numbers))","problem":25,"user":"525a643be4b0cb4875a45cf1"},{"code":"#(for [x %\n       :when (odd? x)]\n   x\n)","problem":25,"user":"52eaeb88e4b0705949c44436"},{"code":"(fn [coll] (filter #(> (mod % 2) 0) coll))","problem":25,"user":"5398d89ae4b0b51d73faaf01"},{"code":"(fn odds [seq]\n  (filter odd? seq))","problem":25,"user":"4f7250cce4b07046d9f4f02a"},{"problem":25,"code":"(fn [coll]\n  (for [x coll\n        :when (odd? x)] x))","user":"5c839a4de4b0c8042a70ce53"},{"problem":25,"code":"reduce (fn [r x] (if (even? x) r (conj r x)))\n         []","user":"5b86462de4b047b03b2037df"},{"code":"(fn odd* [x] (filter odd? x))","problem":25,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn ! [d] \n           (filter odd? d))","problem":25,"user":"50b09833e4b009df37c708bd"},{"problem":25,"code":"filter (fn [item] (= 1 (mod item 2)))","user":"56153b39e4b05f002753dfc4"},{"problem":25,"code":"reduce (fn [val num] (if (odd? num) (conj val num) val)) []","user":"557e6b73e4b05c286339e0d6"},{"code":"(partial filter (fn [x] (= 1 (rem x 2))))","problem":25,"user":"4daea889edd6309eace4d15b"},{"problem":25,"code":"(fn [ll]\n  (reverse (loop [ll ll\n         oddll '()]\n    (if (= '() ll)\n      oddll\n      (recur (rest ll) (if (odd? (first ll))\n                         (conj oddll (first ll) )\n                         oddll))))))","user":"54297741e4b01498b1a71b39"},{"code":"(fn impar [vet]\n  (filter (fn [x] (= (mod x 2) 1)) (vec vet) )\n)","problem":25,"user":"528a1068e4b0239c8a67ae6f"},{"code":"#(letfn [(oddseq [coll result]\n            (if (empty? coll)\n             (reverse result)\n             (recur (rest coll) (if  (odd? (first coll)) (cons (first coll) result) result))\n            )\n          )]\n  (oddseq % `()))","problem":25,"user":"4df11fb2535d08e6dec9fe1a"},{"problem":25,"code":"(fn get-odds [s] (filter #(odd? %) s) )","user":"567f2bc6e4b0feffd0d18ebb"},{"problem":25,"code":"(fn [x]\n  (filter #(not= (mod % 2) 0) x)\n)","user":"577aacf2e4b0d3393e5deb03"},{"code":"(fn find-odd [c]\n  (filter #(not= (mod % 2) 0) c))","problem":25,"user":"4fff00ede4b0678c553fc3fc"},{"problem":25,"code":"(fn filter-odd [s] \n  (filter odd? s))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [x]\n\t(filter odd? x))","problem":25,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":25,"code":"(partial filter #(not(= 0 (mod %1 2))))","user":"556238bce4b0c656e3ff17d3"},{"code":"filter #(> (mod %1 2) 0)","problem":25,"user":"506afdafe4b0a2a5463de37e"},{"problem":25,"code":"(fn filter-odd [x]\n  (filter #(if (= (mod % 2) 1)\n               true\n               false) x))","user":"562e05e0e4b0a45d2ff83023"},{"code":"(fn [x]\n   (filter odd? x)\n)","problem":25,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"filter #(= 1 (mod % 2))","problem":25,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [l]\n  (let [odd? (fn [n] (= 1 (mod n 2)))]\n    (filter odd? l)))","problem":25,"user":"531cbf46e4b08068f379eda6"},{"problem":25,"code":"(fn [coll]\n  (for [x coll\n        :when (odd? x)]\n    x\n    ))","user":"565d6d34e4b068f2fe63dc23"},{"problem":25,"code":"(fn [lst]\n  (loop [aseq (seq lst) odds '()]\n    (if (empty? aseq)\n      (reverse odds)\n      (if (odd? (first aseq))\n        (recur (rest aseq) (cons (first aseq) odds))\n        (recur (rest aseq) odds)))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"problem":25,"code":"(fn [x] (filter (fn [y] (integer? (/ (+ y 1) 2))) x))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":25,"code":"(fn [ls] \n  (filter #(= (mod % 2) 1) ls))","user":"573c57ace4b0cd1946bd10c0"},{"problem":25,"code":"#(keep (fn [x] (if (odd? x) x)) %)","user":"571f341de4b0145328a762a0"},{"code":"(fn odd-numbers \n  ([sec] (odd-numbers sec '()))\n  ([sec result] \n     (if (empty? sec)\n       (reverse result)\n       (if (= (mod (first sec) 2 ) 0)\n         (recur (rest sec) result)\n         (recur (rest sec) (conj result (first sec)))))))","problem":25,"user":"51f297a3e4b0210f90e74552"},{"problem":25,"code":"#(remove nil? (map (fn [x] (if (= (mod x 2) 1) x)) %))","user":"566caad9e4b0a866af6896c0"},{"problem":25,"code":"filter (fn [i] (odd? i))","user":"53dac21ae4b0e771c30254a8"},{"code":"(fn odds [l] \n    (concat (if (= (mod (first l) 2) 0)\n                '()\n                (list (first l)) )\n            (if (empty? (rest l)) \n                '()\n                (odds (rest l)))\n))","problem":25,"user":"4e234e72535d04ed9115e822"},{"problem":25,"code":"(fn [l] (let [r (atom [])] (doseq [i l] (if (odd? i) (swap! r conj i) ))@r))","user":"5d974b1de4b0d3f9b434ad36"},{"code":"(fn [xs] (filter #(not= 0 (mod % 2)) xs))","problem":25,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":25,"code":"(fn odd\n\t[arr]\n\t(filter #(= (mod %1 2 ) 1) arr))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [s] (remove #(= 0 (mod % 2)) s))","problem":25,"user":"506b40ade4b0eda3100c0905"},{"code":"filter (fn [num] (== 1 (mod num 2)))","problem":25,"user":"507516d0e4b054001656acda"},{"code":"(fn [xs] \n  (for [x xs\n    :when (odd? x)]\n    x\n    )\n  )","problem":25,"user":"5360e12ce4b0243289761e3a"},{"code":"filter (fn [x] (= (bit-and x 1) 1))","problem":25,"user":"4ee98f99535d93acb0a6688f"},{"problem":25,"code":"filter #(not= 0 (mod % 2))\n\n; Wow\n;\n; filter odd?","user":"5eccc5c2e4b016b56eae058f"},{"problem":25,"code":"(fn [n] (filter #(odd? %) n))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn[l]\r\n  (sort\r\n\t (loop [arr l,narr (list)]\r\n\t    (if (nil? arr)\r\n\t\tnarr\r\n\t\t(recur (next arr) (if (even? (first arr))\r\n\t\t\t\t      narr\r\n\t\t\t\t      (conj narr (first arr))))))))","problem":25,"user":"4ef2d6c5535dced4c769f222"},{"problem":25,"code":"filter #{1 3 5}","user":"5948117be4b07ddc2dafadae"},{"problem":25,"code":"(fn [y] (filter (fn [x] (not (even? x))) y))","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn [x]\r\n (filter (fn [x](= (mod x 2) 1)) x) \r\n)","problem":25,"user":"4ff5a42ae4b0678c553fc36c"},{"code":"(fn [sec] (filter #(= 1 (rem %1 2)) sec))","problem":25,"user":"5266db2be4b03e8d9a4a714a"},{"problem":25,"code":"(fn [x]\n  (let [z \n  (for [y x]\n    (if (= (rem y 2) 1)\n      y))]\n    (remove nil? z)))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":25,"code":"reduce (fn [a x] (if (odd? x) (conj a x) a)) []","user":"558d6beae4b0277789237643"},{"problem":25,"code":"(fn odd-elements [seqn]\n\t(filter odd? seqn))","user":"5683e0c6e4b0945ebc182aa3"},{"problem":25,"code":"(fn odd [num]\n  (filter odd? num))","user":"5846ae22e4b089d5ab817e99"},{"code":"(fn [l] (filter #(not= 0 (mod % 2)) l))","problem":25,"user":"51113eb8e4b09ff0d31c7ca9"},{"code":"(fn [l] (reduce (fn [a b] (if (even? b) a (conj a b))) [] l))","problem":25,"user":"4e89ddf9535d3e98b8023284"},{"code":"(fn [elts] (filter odd? elts))","problem":25,"user":"50fd9fd4e4b033b9c38d78d0"},{"problem":25,"code":"(fn[coll] (\n\tloop [my-coll coll, result-coll []] (\n\t\tif (empty? my-coll) result-coll\n\t\t(recur \n         \t(rest my-coll) (\n                            if (odd? (first my-coll)) (conj result-coll (first my-coll)) result-coll\n         \t\t\t\t\t)\n         )                                         \n)\t\n))","user":"547f3434e4b0c51c1f4d7319"},{"problem":25,"code":"(fn [lst] (for [k lst :when (odd? k)] k))","user":"5f08d0c5e4b0cf489e8d7f62"},{"code":"(fn [sq] (filter odd? sq))","problem":25,"user":"4f60ed88e4b0defedf855fb2"},{"code":"filter #(bit-test % 0)","problem":25,"user":"4f891abde4b033992c121c77"},{"problem":25,"code":"(fn r [l]\n      ((fn rec [l acc]\n         (cond\n           (= l '())\n             (reverse acc)\n           (= (mod (first l) 2) 1)\n             (rec (rest l) (conj acc (first l)))\n           :else\n             (rec (rest l) acc))) l '()))","user":"601004d6e4b074f607df66b2"},{"problem":25,"code":"(fn [nums] (filter #(not= 0 (mod % 2)) nums))","user":"58a5822fe4b01a0c0b232913"},{"problem":25,"code":"filter #(not(= (mod % 2) 0))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn get_odds [x]\n  (filter odd? x))","problem":25,"user":"51361c16e4b04ac1f358dd4b"},{"problem":25,"code":"(fn [s] (filter  #(not= 0 (mod % 2)) s))","user":"4fffa422e4b0678c553fc404"},{"code":"(fn find-odds [numbers]\n  (filter odd? numbers))","problem":25,"user":"52b71bd2e4b0c58976d9ad4d"},{"code":"(fn [s]\n  (loop [s s\n         odds []]\n    (if (seq s)\n      (if (odd? (first s))\n        (recur (rest s) (conj odds (first s)))\n        (recur (rest s) odds))\n      odds)))","problem":25,"user":"511a5328e4b09045b2b16946"},{"code":"filter (fn [x] (= 1 (rem x 2)))","problem":25,"user":"4eeaf88f535d93acb0a668a3"},{"problem":25,"code":"#(filter (fn [a] (not (zero? (mod a 2)))) %1)","user":"5a1c07c1e4b0ff51aa4b3232"},{"code":"(fn [coll]\r\n  (loop [x coll y '()]\r\n    (if (empty? x)\r\n     (reverse y)\r\n    (recur (rest x) (if (odd? (first x))(conj y (first x)) y)\r\n   ))))","problem":25,"user":"507e5cf8e4b085af06e3afd1"},{"code":"(fn f [s]\n  (filter odd? s))","problem":25,"user":"5151d574e4b03e678e393ae0"},{"problem":25,"code":"(fn [x]\n\n (filter #(= (mod % 2) 1) x) \n\n );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"code":"#(filter (fn [x]\n           (not= (mod x 2) 0)) %)","problem":25,"user":"4fc5dfabe4b0ee37620e1800"},{"problem":25,"code":"(fn only-odd [numseq]\n  (filter #(= (bit-and % 1) 1) numseq))","user":"5779556de4b0979f8965166e"},{"code":"#(filter (fn [x] (= 1 (rem x 2))) %)","problem":25,"user":"4e28120f535deb9a81d77efa"},{"problem":25,"code":"(fn [input] (loop [in input\n                   out [] ]\n              (if (= nil (first in))\n                out\n                (recur (rest in) (if (odd? (first in))\n                                   (conj out (first in))\n                                   out)))))","user":"579aff09e4b05b1deef9ade7"},{"problem":25,"code":"(fn [col]\n  (for [v col :when (odd? v)] v)\n)","user":"5843b231e4b089d5ab817e3d"},{"problem":25,"code":"(fn odds-of\n  [seq]\n  (reduce (fn\n    [acc current]\n    (let\n      [remainder (rem current 2)]\n      (if (= 0 remainder)\n        acc\n        (concat acc [current]))))\n     '() seq))","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn [x]\n  (loop [lst x output nil]\n    (if (not (empty? lst))\n      (if (= (rem (first lst) 2) 0)\n        (recur (rest lst) output)\n        (recur (rest lst) (cons (first lst) (seq output))))\n      (reverse output))))","problem":25,"user":"5008b795e4b0144d4f561e3e"},{"problem":25,"code":"(partial keep #(if (odd? %) %))","user":"602d5eade4b0d5df2af22279"},{"problem":25,"code":"(fn f\n  [seq]\n  (filter \n   (fn \n     [x] \n     (not \n      (= (mod x 2) 0))\n     ) seq))","user":"5ea67a5ae4b00a66d4a951ae"},{"code":"#(remove even? %1)","problem":25,"user":"50378996e4b0af0658af77ae"},{"code":"(fn [s]\n  (filter (fn [item] (not= (rem item 2) 0)) s))","problem":25,"user":"4f70183ee4b07046d9f4eff3"},{"problem":25,"code":"(fn [a] \n    (filter (fn [x] (not= x nil))\n          (map (fn [x] (cond\n               (= (mod x 2) 1) x :else nil)) a)))","user":"5c02c9a8e4b0bdcf453d1667"},{"code":"filter (fn [num](= 1 (rem num 2)))","problem":25,"user":"4e3df106535deb9a81d77f58"},{"code":"(fn odds [x] \n  (if (empty? x) \n    ()\n    (if (odd? (first x)) \n      (cons (first x) (odds (rest x)))\n      (odds (rest x)))))","problem":25,"user":"528f1057e4b0239c8a67aeec"},{"problem":25,"code":"(fn [nums] (filter odd? nums) )","user":"5471f090e4b094393f72dd6e"},{"code":"remove #(= 0 (mod % 2))","problem":25,"user":"4f0341bb535dcb61093f6a81"},{"code":"(fn [seqn]\n  (loop [seqn seqn acc []]\n    (if-let [n (first seqn)]\n      (if (= (mod n 2) 1)\n        (recur (rest seqn) (conj acc n))\n        (recur (rest seqn) acc))\n      acc)))","problem":25,"user":"4e8944b6535d4ef0aa30db98"},{"problem":25,"code":"(fn [mylist] (filter odd? mylist))","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":25,"code":"(fn [input] (keep #(if (odd? %1) %1) input))","user":"5669eb9ae4b04acd4f672e02"},{"problem":25,"code":"(fn findOdd [x] (if (seq x) \n                  (if (odd? (first x)) \n                       (conj (findOdd (drop 1 x))(first x))\n                    \t(findOdd (drop 1 x))\n                   )\n                  ()\n                 )\n  )","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn [s]\n  (for [x s :when (odd? x)] x))","problem":25,"user":"4f604bdee4b0defedf855fa7"},{"problem":25,"code":"(fn [s] \n  (filter (fn [x] (if (= 0 (mod x 2)) false true)) s))","user":"563a3cc2e4b0bfe05bf117fa"},{"code":"(fn [v] (filter (fn [n] (not (even? n))) v))","problem":25,"user":"507330e6e4b0e3170b5a8698"},{"code":"(fn [seqq] (filter odd? seqq))","problem":25,"user":"50211a53e4b0ef1d2d4433b9"},{"problem":25,"code":"(fn odd-select [list]\n  (if (= 0 (count list)) '()\n    (if (even? (first list)) (odd-select (rest list))\n      (conj (odd-select (rest list)) (first list)))))","user":"55dca3a5e4b050e68259b3b5"},{"problem":25,"code":"(fn s [x] (filter odd? x))","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn odd [x]\n  (filter (fn [y] (= 1 (mod y 2))) x))","problem":25,"user":"4f0399c4535dcb61093f6b34"},{"problem":25,"code":";;filter (fn [x] (= (mod x 2) 1))\n\nfilter #(= (mod % 2) 1)","user":"54d0ceb5e4b0e8a36923e5d1"},{"problem":25,"code":"#(for [x %\n   :when (odd? x)]\n   x)","user":"53d1ba22e4b00fb29b221317"},{"problem":25,"code":"(fn myodd [x] (filter odd? x))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":25,"code":"(fn [xs]\n  (filter\n   #(= 1 (mod % 2))\n   xs)\n)","user":"5682d5b4e4b0945ebc182a95"},{"problem":25,"code":"(fn [s]\n  (filter\n   (fn [a] (= (mod a 2) 1))\n   s))","user":"565233f2e4b0f9d632dd8461"},{"problem":25,"code":"(fn [x] (filter odd? x ) )","user":"53fbf9bce4b0de5c41848586"},{"code":"(partial filter (fn [a] (== (rem a 2) 1)))","problem":25,"user":"505885c4e4b06522596eba7b"},{"problem":25,"code":"(fn [coll]\n  (reduce #(if (odd? %2) (conj %1 %2) %1) [] coll )\n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"problem":25,"code":"(fn odd [x] \n  (filter (fn [n] (= 1 (mod n 2))) x))","user":"54610355e4b01be26fd74696"},{"problem":25,"code":"(fn aux [l]\n  (filter #(= (mod % 2) 1) l))","user":"574f1c24e4b02ea114799255"},{"code":"(fn [s]\n  (filter\n    (fn [num] (if (= (mod num 2) 1) true false))\n    s))","problem":25,"user":"4e6f7178535d5021c1a8961c"},{"code":"(fn [foo]\n  (filter #(odd? %) foo))","problem":25,"user":"4eddc5f4535d10e5ff6f532c"},{"code":"(fn jodds [lst]\n  (if (empty? lst)\n    '()\n    (if (=  1 (rem (first lst) 2))\n      (conj (jodds (rest lst)) (first lst))\n      (jodds (rest lst)))))","problem":25,"user":"534ff8a6e4b084c2834f4ad1"},{"problem":25,"code":"(fn [x] (filter (fn [f] (= 1 (mod f 2))) x))","user":"5568749ae4b0c656e3ff1854"},{"code":"(fn [col] (filter odd?  col))","problem":25,"user":"515bed3be4b0388ca8ca1525"},{"code":"filter #{1 3 5 7 9}","problem":25,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":25,"code":"(fn [coll] (remove #(zero? (mod % 2)) coll))","user":"5f04eb97e4b0cf489e8d7f3e"},{"problem":25,"code":"(fn odd [s]\r\n  (filter #(= 1 (mod % 2)) s))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [l] (filter (fn [x] (= 1 (mod x 2))) (seq l)))","problem":25,"user":"530d85dee4b08068f379eca8"},{"problem":25,"code":"(fn [s]\n   (filter\n    (fn [x]\n      (not (= (mod x 2) 0)))\n      s))","user":"516e3626e4b0284f4b26df81"},{"code":"(fn [x] (filter (fn [x] (= 1 (mod x 2))) x))","problem":25,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn [x] \n  (filter \n   #(= 1 (mod % 2))\n   x))","problem":25,"user":"5393653be4b0b51d73faaebc"},{"code":"(fn oddfilt [x]\n  (filter odd? x))","problem":25,"user":"50fc3589e4b0d10d794c19f3"},{"problem":25,"code":"(fn [lst] (filter #(odd? %) (seq lst)))","user":"533c2605e4b0e30313ee6cd7"},{"problem":25,"code":"(fn [vect] (filter odd? vect))","user":"555c5e04e4b0b056612e224b"},{"problem":25,"code":"(fn filter-odd [coll]\n  (if (empty? coll) '()\n    (let [elem (first coll)]\n      (if (= (mod elem 2) 1)\n        (conj (filter-odd (rest coll)) elem)\n        (filter-odd (rest coll))))))","user":"5777cffae4b0979f89651651"},{"code":"(fn [coll]\n  (reduce (fn [v1 v2]\n            (if (= (mod v2 2) 0)\n              v1\n              (conj v1 v2))) [] coll))","problem":25,"user":"52c1566fe4b07a9af5792364"},{"problem":25,"code":"filter #(= (even? %) false)","user":"5662a5eee4b0e91d5f5c564b"},{"code":"#(reduce (fn [x y](if (odd? y) (conj x y) x)) [] %)","problem":25,"user":"50e008d1e4b061dbdced722a"},{"problem":25,"code":"filter #(if (= 1 (mod % 2)) %)","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"filter #(> (rem % 2.0) 0)","problem":25,"user":"531eef0be4b08068f379edbd"},{"problem":25,"code":"#(reduce\n           (fn [l,y]\n             (if (= 1 (rem y 2))\n               (conj l y)\n               l\n               )\n             )\n           [] %)","user":"55d42f78e4b0e31453f64a73"},{"problem":25,"code":"(fn get-odds [sequ]\n  (filter odd? sequ))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":25,"code":"(fn [xs] (filter #(odd? %1) xs))","user":"5563b88be4b0c656e3ff17f5"},{"code":"(fn [x] (loop [s x r '()] (if (empty? s) (reverse r) (recur (drop 1 s) (if (= (rem (first s) 2) 0) r (cons (first s) r))))))","problem":25,"user":"523bc0e6e4b07becd5be21f9"},{"code":"filter (fn [x](= (mod x 2) 1))","problem":25,"user":"51cdec45e4b0e42293a2254f"},{"problem":25,"code":"; (fn jodd? [l]\n;  (cond\n;    (empty? l) '()\n;    (even? (first l)) (jodd? (rest l))\n;    :else (cons (first l) (jodd? (rest l)))))\n#(filter odd? %)","user":"5d83b9aae4b0915913b1d386"},{"code":"(fn [x] (filter #(not(= (rem % 2) 0)) x))","problem":25,"user":"4ef60a02535dced4c769f24b"},{"code":"(fn [seq]\n  (filter (fn [x] (not= 0 (mod x 2)) ) seq)\n)","problem":25,"user":"52fba50ce4b047fd5583700d"},{"problem":25,"code":"(fn f [col]\n  (filter odd? col))","user":"575fbe58e4b08062f99a4e87"},{"problem":25,"code":";(fn [coll] (filter odd? coll))\n#(filter odd? %1)","user":"5487eb1de4b0e286459a11ca"},{"problem":25,"code":"(fn odd [x] (cond\n             (= x '())'()\n             (= (mod (first x) 2) 1)(conj (odd (rest x)) (first x))\n             :else (odd (rest x))))","user":"5cb79c51e4b026601754b970"},{"code":"(fn [l] (for [i l :when (odd? i)] i))","problem":25,"user":"4e351b47535deb9a81d77f2b"},{"problem":25,"code":"filter (fn [x] (when (odd? x) x))","user":"545db6e3e4b01be26fd74675"},{"problem":25,"code":"(fn find-odds [x] (filter odd? x))","user":"545188ebe4b0e397800069b2"},{"problem":25,"code":"(fn [lst] (filter (fn [n] (= (mod n 2) 1)) lst))","user":"57902cd8e4b0ebec4cfb75a6"},{"code":"(fn [lst]\n  (filter #(not (zero? (rem % 2))) lst))","problem":25,"user":"4e510260535dc968683fc4f2"},{"code":"filter (fn [x] (= 1 (mod x 2)))","problem":25,"user":"4dd865e1535d2dad7130b5d7"},{"problem":25,"code":"filter (fn [num]\n            (= (mod num 2) 1))","user":"5a47e8ade4b05d388ecb6b5f"},{"code":"(fn pd [x] (filter odd? x))","problem":25,"user":"522e8451e4b01cdb292c5f06"},{"problem":25,"code":"(fn foo [s]  \n (if (not= 0 \n      (rem (first s) 2))\n  (if (next s) \n   (conj (foo (next s)) (first s))\n   s)\n  (if (next s) \n   (foo (next s))\n   ())\n ) \n)","user":"559e7848e4b08a52bd4f97d4"},{"problem":25,"code":"(fn [xs] \n    (for [x xs :when (odd? x)] x))","user":"5911eb44e4b0163c97b36ee1"},{"problem":25,"code":"(fn ood[l] (filter odd? l))","user":"5550e966e4b00713264bd9b3"},{"problem":25,"code":"(fn [a-seq] (filter #(not= 0 (mod % 2)) a-seq))","user":"5abc5a09e4b073f1774426e9"},{"problem":25,"code":"(fn [xs]\n  (filter #(odd? %) xs)\n  )","user":"55aa8276e4b0988bba2ad94e"},{"problem":25,"code":"(fn [s] \n  (filter #(not (even? %)) s))","user":"567af6e2e4b05957ce8c61a0"},{"code":"(fn [l] (filter (fn [x] (not= 0 (mod x 2))) l))","problem":25,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":25,"code":"#(filter (fn [v] (= (mod v 2) 1)) %1)","user":"54dcbc6ee4b024c67c0cf787"},{"code":"(fn [numbers]\n  (loop [remaining numbers result (empty numbers)]\n    (if (empty? remaining)\n        (reverse result)\n        (do            \n            (recur\n                (rest remaining)\n                (if (= (mod (first remaining) 2) 0)\n                    result\n                    (cons (first remaining) result)\n                )\n            )\n        )\n    )\n  )\n)","problem":25,"user":"512088a3e4b0aab57de66d4f"},{"problem":25,"code":"(fn [coll] (filter (fn [x] (= 1 (mod x 2))) coll))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn [s]\n  (filter (fn [x]\n         (odd? x)) s))","problem":25,"user":"516095c9e4b009fba0926e29"},{"problem":25,"code":"(fn [s]\n  (filter (fn [item] (odd? item)) s))","user":"53cc5c88e4b00fb29b2212d8"},{"problem":25,"code":"(fn [s] (filterv #(= (mod % 2) 1) s))","user":"5e850761e4b09a7a73c8bbcf"},{"code":"filter #(= 1 (bit-and % 1))","problem":25,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [l]\n  (filter #(not (= (mod % 2) 0)) l))","problem":25,"user":"5313a2bfe4b08068f379ed0b"},{"code":"#(filter\n  (fn [el] (odd? el)) %)","problem":25,"user":"4f61be97e4b0defedf855fc5"},{"problem":25,"code":"(fn [s] (filter (fn [e] (odd? e)) s))","user":"540efe2ee4b0addc1aec6724"},{"problem":25,"code":"(fn[x]\n(filter #(not= 0(rem % 2)) x))","user":"53e32cf7e4b036ad0777e3fd"},{"code":"(fn [items]\n  (filter #(= (mod % 2) 1) items))","problem":25,"user":"511720eae4b0063b4e3e16da"},{"code":"(fn [values]\n  (filter (complement zero?) \n          (map #(if (odd? %)\n          %\n          0)values)))","problem":25,"user":"52daf558e4b09f7907dd13c1"},{"code":"(fn odds [x]\n  (if (not (= (count x) 0))\n    (if (= (mod (first x) 2) 1)\n      (cons (first x) (odds (rest x)))\n      (odds (rest x)))\n    '()))","problem":25,"user":"52cefb7ee4b07d0d72b27397"},{"problem":25,"code":"(fn [arr] (filter #(= 1 (mod % 2)) arr))","user":"5ce67c36e4b0a17bb84e2b88"},{"code":"remove (fn [x] (not (odd? x)))","problem":25,"user":"4e4c64a1535dc968683fc4dd"},{"code":"(fn [x] (filter (fn [y] (not= (mod y 2) 0))  x )\n                )","problem":25,"user":"510ce3cbe4b078ea71921127"},{"problem":25,"code":"(fn g[x] (filter odd? x))","user":"54ca582be4b057c6fda3a259"},{"code":"(fn [collection]\n  (filter (fn [x]\n     (odd? x))\n        collection))","problem":25,"user":"520a9897e4b01da9d47a99e1"},{"code":"(fn [c]\n    (filter #(= (rem % 2) 1) c))","problem":25,"user":"4eeff8fc535d305ff5cb7f24"},{"problem":25,"code":"(fn [coll]\n   (filter #(= 1 (rem % 2)) coll))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn filter-even [x]\n  (filter odd? x))","problem":25,"user":"4eb7b049535d7eef30807377"},{"code":"(fn odd-elems [xs]\n     ( loop [accum '() s xs]\n     (if (not-empty s)  \n       (if (= (rem (last s) 2) 1)\n         (recur (cons (last s) accum) (drop-last s))\n         (recur accum (drop-last s)))\n       accum)))","problem":25,"user":"4f065217535dcb61093f6c0c"},{"problem":25,"code":"(fn lisodd [x] \n    (cond\n      (nil? (first x)) '()\n      (== (mod (first x) 2) 1) (concat \n        (list (first x)) (lisodd (rest x)))\n      :else (lisodd (rest x))\n    )\n  )","user":"5e1d01b5e4b0dc9594008542"},{"problem":25,"code":"(fn [l]\n(filter #(= (mod % 2) 1) l)\n)","user":"5b8ec146e4b0c0b3ffbd49f0"},{"code":"reduce (fn [a b] (if (odd? b) (conj a b) a)) []","problem":25,"user":"51b6f4f9e4b04fc00976d479"},{"problem":25,"code":"(fn find-odds [input]\n  (filter\n    (fn [x] (= 1 (mod x 2)))\n    input))","user":"55fb5b89e4b0f488688e0662"},{"problem":25,"code":"(letfn [(is-odd [x] (= (rem x 2) 1))]\n\t(partial filter is-odd))","user":"5b236e55e4b08b1df1c36759"},{"code":"(fn odds\n  [s]\n  (filter odd? s))","problem":25,"user":"528e25b9e4b0239c8a67aed5"},{"problem":25,"code":"(fn [n]\n   (filter #(= (mod % 2) 1) n)\n   )","user":"5dd90651e4b0948ae9d9ad97"},{"code":"#(filter (fn [n] (odd? n)) %)","problem":25,"user":"4e42f930535dc968683fc49f"},{"problem":25,"code":"(fn [values]\n  (filter odd? values))","user":"57759a45e4b0979f89651622"},{"problem":25,"code":";;filter (fn [x] (> (mod x 2) 0))\nfilter #(> (mod % 2) 0)","user":"55e01f4ee4b050e68259b406"},{"problem":25,"code":"#(reduce (fn [odds numb]\n           (if (= 1 (mod numb 2))\n             (conj odds numb) \n             odds))\n           '()\n           (reverse %))","user":"57e6ed35e4b0bfb2137f5af5"},{"problem":25,"code":"#(for [x %\n       :when (odd? x)]\n       x)","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":25,"code":"(fn [x] \n  (filter (fn [x] (= 1 (mod x 2))) x))","user":"54377355e4b032a45b869305"},{"code":"(fn [l] (filter #(not= (rem % 2) 0) l))","problem":25,"user":"4f137034535d64f603146430"},{"problem":25,"code":"#(filter (fn [number] (= 1 (rem number 2))) %)","user":"5ed08785e4b016b56eae05b1"},{"code":"(fn [arr] (filter odd? arr))","problem":25,"user":"5162757ee4b03cfa3774b3fe"},{"problem":25,"code":"(fn [col] (filter  #(= 1 (mod % 2)) col))","user":"562807dfe4b00e49c7cb47dd"},{"code":"(fn [col]\n  \n  (filter odd? col)\n  \n  )","problem":25,"user":"518d1b5be4b070277754617b"},{"code":"filter #(if (= (mod % 2) 1) true false)","problem":25,"user":"522f988be4b032bbe3424168"},{"code":"(fn r [x] (remove #(even? %) x))","problem":25,"user":"51ab1da1e4b04e3dc0c27b30"},{"problem":25,"code":"(fn odd-seq [x] (filter odd? x))","user":"5c4217e2e4b08cd430848ed2"},{"problem":25,"code":"filter #(= (mod % 2)1)","user":"54e19a26e4b024c67c0cf7c6"},{"problem":25,"code":"(fn [x] (loop [r '() a x] (if(empty? a) r (recur (if(odd? (first a))(reverse (conj (reverse r) (first a))) r) (drop 1 a)))))","user":"5cfff788e4b0cc9c91588196"},{"problem":25,"code":"(fn get_odds [l]\n  (loop [left l odds '()]\n    (if (empty? left)\n        (reverse odds)\n      (recur (rest left) (let [n (first left)] (if (= (mod n 2) 1) (conj odds n) odds))))))","user":"58fb87efe4b0438e51c2cf7b"},{"code":"(fn [x]\n  (filter #(not= 0 (mod % 2)) x))","problem":25,"user":"4f0e0aee535d0136e6c22320"},{"code":"filter #(= (bit-and % 1) 1)","problem":25,"user":"4edc0c16535d10e5ff6f531f"},{"code":"(fn myfn [v] (filter #(if (= (rem % 2) 1) true false) v))","problem":25,"user":"4f566178e4b0a7574ea71820"},{"problem":25,"code":"(fn [inputSeq]\n   (loop [ curSeq inputSeq\n          resultList '()]\n     (if (nil? curSeq)\n       (sort resultList)\n       (if (= (mod (first curSeq) 2) 0)\n         (recur (next curSeq) resultList)\n         (recur (next curSeq) (conj resultList (first curSeq)))\n       )\n     )\n   )\n )","user":"5cf7215ce4b0b71b1d808a67"},{"problem":25,"code":"(fn odd-filter \n    ([l odds] (if (empty? l) odds (odd-filter (rest l) (if (= (rem (first l) 2) 1) (concat odds [(first l)]) odds))))\n    ([l] (odd-filter l ())))","user":"5d5b06a9e4b02ba5928a683a"},{"problem":25,"code":"(fn\n  [x]\n  (filter (fn [x] (= 1 (rem x 2))) x))","user":"5e18bd30e4b0dc95940084fa"},{"code":"(fn [list] \n  (filter #(= (mod % 2) 1) list))","problem":25,"user":"4f77eb86e4b0fbe0118ec585"},{"code":"(fn [items] (filter (fn [x] (odd? x)) items))","problem":25,"user":"50dee6bbe4b061dbdced721e"},{"problem":25,"code":"(fn [y] \n  (filter \n   (fn [x] (= 1 (mod x 2)))\n     y)\n  )","user":"5f419985e4b0955706451fab"},{"problem":25,"code":"filter #(not= (mod % 2)0)","user":"5e4ba8e8e4b0889a8790a55a"},{"problem":25,"code":";; NOTE: odd? is a builtin function\nfilter #(not= (mod % 2) 0)","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":25,"code":"(fn oddN\n  [lst]\n  (filter odd? lst))","user":"57f81534e4b0d3187e900915"},{"problem":25,"code":"(fn [x] \n  (filter #(=\n            1\n            (mod % 2)) x))","user":"55912230e4b027778923767a"},{"problem":25,"code":";;#(filter (fn [num] (= 1 (rem num 2))) %)\n#(filter odd? %)","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":25,"code":"#(filter odd? %\n          )","user":"5d94fdf9e4b0d3f9b434ad2b"},{"code":"(fn odd1 [x] (filter #(odd? %) x))","problem":25,"user":"516e9d9be4b06aac486e5b2b"},{"code":"(fn[x](filter odd? x))","problem":25,"user":"50b4a37ee4b0c464d223d1bb"},{"problem":25,"code":"#(filter (fn [e] (not= (rem e 2) 0)) %1)","user":"5d3b340fe4b01671435dbd63"},{"code":"(fn [lst] (filter #(not(zero? (mod % 2))) lst))","problem":25,"user":"512655b7e4b05d10e3e39603"},{"problem":25,"code":"reduce (fn\n          [col el]\n          (if (= (rem el 2) 1)\n            (conj col el)\n            col))\n        []","user":"5bdb82d8e4b0ed4b8aab4c1d"},{"code":"(fn [x] \n  (filter odd? x))","problem":25,"user":"4e920f44535dbda64a6f6afd"},{"problem":25,"code":"(fn [elements]\n  (loop [results []\n         values (into [] elements)]\n    (if(empty? values)\n      results\n      (let[[head & tail] values]\n        (if(= (mod head 2) 1)\n          (recur (conj results head) tail)\n          (recur results tail))))))","user":"53f50c03e4b0db01ade6f9ca"},{"code":"#(filter (fn [a] (= (rem a 2) 1)) %)","problem":25,"user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [s] (filter #(not= (mod % 2) 0) s))","problem":25,"user":"4e58ef07535d8a8b8723a299"},{"code":"(fn [seq]\n  (letfn [(odd2 [seq acc]\n            (if (= seq '()) (reverse acc) (odd2 (rest seq) (if (= (mod (first seq) 2) 1) (conj acc (first seq)) acc))))]\n    (odd2 seq '())))","problem":25,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [xs] (filter #(== 1 (mod % 2)) xs))","problem":25,"user":"50e317a9e4b056122d085d01"},{"code":"#(for [s (seq %) :when (odd? s)] s)","problem":25,"user":"4ff78679e4b0678c553fc392"},{"problem":25,"code":"filter #(when (= 1 (rem % 2)) true)","user":"57042a94e4b0b0fb43fd0660"},{"code":"(fn [x]\r\n    (filter #(== (mod % 2) 1) x))","problem":25,"user":"4de08793535d08e6dec9fde2"},{"problem":25,"code":"(fn f [x]\n  (filter\n    #(= (mod % 2) 1)\n    x\n  )\n)","user":"5bf8b5a5e4b0bdcf453d15bb"},{"code":"#(remove (fn [x] (= 0 (mod x 2))) %1)","problem":25,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn get_odds [col] \n  (cond\n    (empty? col) '()\n  (not (= (mod (first col) 2) 0)) (cons (first col) (get_odds (rest col)))\n  :else (get_odds (rest col))))","problem":25,"user":"505dee52e4b0b06147a37273"},{"problem":25,"code":"(fn iter [xs]\n\t(cond (empty? xs) '()\n\t\t(odd? (first xs)) (conj (iter (rest xs)) (first xs))\n\t\ttrue (iter (rest xs))))","user":"5583888ae4b05c286339e117"},{"problem":25,"code":"(fn [lat]\n(filter odd? lat))","user":"59368efbe4b02506e01a297d"},{"problem":25,"code":"(fn [coll]\n  (loop [proc-coll coll\n         acc '[]]\n    (cond (empty? proc-coll) acc\n          (odd? (first proc-coll)) (recur (rest proc-coll) (conj acc (first proc-coll)))\n          :else (recur (rest proc-coll) acc))))","user":"53cb30f0e4b00fb29b2212d0"},{"problem":25,"code":"(fn [the-seq]\n  (filter #(= 1 (mod %1 2))\n          the-seq))","user":"5c26c9b3e4b07e362c2305c5"},{"problem":25,"code":";filter odd?\n#(filter odd? %)","user":"5822e082e4b04b46fc4b0fa9"},{"code":"filter #(not (= (rem % 2) 0))","problem":25,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":25,"code":"(fn find-odd [x]\n  (filter #(= 1 (mod % 2)) x))","user":"542c026ae4b0dad94371f29a"},{"problem":25,"code":"(fn -odds\n  ([l] \n   (-odds l '()))\n  ([l acc]\n   (let [-head (first l) \n         -tail (rest l)]\n     (if (= -head nil)\n       (reverse acc)\n       (if (= (rem -head 2) 0)\n         (-odds -tail acc)\n         (-odds -tail (cons -head acc))\n         )\n       )\n     ))\n  )","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [x] (for[el x :when (odd? el)] el))","problem":25,"user":"4f35e662e4b0e243712b1ec6"},{"problem":25,"code":"(fn [lst]\n        (filter odd? lst))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn [coll] (filter (complement #(= 0 (mod % 2))) coll))","problem":25,"user":"4e75edfe535d7a570dd295c7"},{"code":"#(loop [out () in %]\n    (if (empty? in)\n        out\n        (recur (if (odd? (last in)) (cons (last in) out) out)(butlast in))))","problem":25,"user":"528f0106e4b0239c8a67aeeb"},{"code":"(fn get-odd [coll]\n  (loop [my-coll (seq coll)\n         odds '()]\n    (if (first my-coll)\n      (if (> (rem (first my-coll) 2) 0)\n        (recur (next my-coll) (conj odds (first my-coll)))\n        (recur (next my-coll) odds))\n      (reverse odds))))","problem":25,"user":"4e4e5b91535dc968683fc4e5"},{"code":"(fn [x] (filter (fn [e] (= 1 (bit-and e 1))) x))","problem":25,"user":"4fb03cf4e4b081705acca262"},{"problem":25,"code":"(fn odd-numbers\n  [lst]\n  (filter odd? lst))","user":"5e95013fe4b0fbed045a3800"},{"problem":25,"code":"(fn [xs] \n  (filter odd? xs))","user":"55295b5de4b0ffed3738f949"},{"problem":25,"code":"(fn [ts] (filter #(odd? %) ts))","user":"591770dae4b09b4ee5954b9c"},{"problem":25,"code":"(fn odds [s]\n  (if (empty? s) \n    '()\n  \t(if (odd? (first s)) (conj (odds (rest s)) (first s)) (odds (rest s)))))","user":"5762bf13e4b0994c1922fbae"},{"problem":25,"code":"(fn [sequ] (filter #(odd? %) sequ))","user":"5509bf71e4b06e50f9beb122"},{"code":"(fn [s] (filter #(= 1 (rem % 2)) s))","problem":25,"user":"4e8b98fc535d65386fec2124"},{"code":"#(remove (fn [x] (= (mod x 2) 0)) %)","problem":25,"user":"52101fcde4b080a8d9b9d635"},{"code":";;(fn take-odds [x]\n;;  (take 5\n;;    (for [i x\n;;      :when (= 1 (mod i 2))]\n;;  i)))\n#(filter odd? %)","problem":25,"user":"503267a6e4b0e78df07b092d"},{"problem":25,"code":"(fn\n   [lst]\n   (for [lst lst\n         :when (odd? lst)\n         :let [nlst lst]] nlst))","user":"5d6e4d1ee4b04d129b00f2c4"},{"problem":25,"code":"#(sort\n  (reduce\n    (fn [result number]\n      (if (odd? number)\n        (conj result number)\n        result))\n    ()\n    %))","user":"53d3abeae4b00fb29b22132c"},{"problem":25,"code":"(fn sm-odd [x] (if (first x) \n                 \n                 (if (= (mod (first x) 2) 1) \n                   (concat (list (first x)) (sm-odd (rest x))) \n                   (sm-odd (rest x))\n                   ) \n                 \n                 \n                 '()\n                 \n                 \n                 ) )","user":"5575aae2e4b05c286339e065"},{"code":"(fn [col]\n  (filter (fn [n] (= (mod n 2) 1)) col))","problem":25,"user":"4df9c598535d04ed9115e77a"},{"problem":25,"code":"(fn sum [s] (loop \n               [vals s accum []] \n               ( if (= vals ()) \n                 accum \n                 (let [thisVal (first vals) resList (if (= 0 (mod thisVal 2)) accum (conj accum thisVal))]\n                   (recur (rest vals) resList)\n                   \n                   )\n                 )\n               )\n   )","user":"574ec787e4b02ea114799249"},{"problem":25,"code":"(fn [x] \n    (loop [l x\n         r []]\n    (if (empty? l) (reverse r)\n    (recur (rest l)\n           (if (odd?(first l)) \n             \t(cons (first l) r) \n             \tr)))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":25,"code":"(fn [a] \n    (filter  odd? a)\n  )","user":"5c94cbb1e4b048ec896c5a3d"},{"code":"(fn foreclojure-odds\n  [l]\n  (reverse (reduce (fn [accum x] (if (odd? x) (conj accum x) accum)) '() l)))","problem":25,"user":"501f36dde4b0cb6ebc0a42e4"},{"problem":25,"code":"(fn [xs] (filter (fn [x] (not (zero? (rem x 2)))) xs))","user":"58d2bfc8e4b03c36ff7e5909"},{"problem":25,"code":"(fn[lst]\n  (for [i lst :when (odd? i)]i))","user":"59dd387ae4b0a0ac046f2501"},{"problem":25,"code":"filter (fn [x] (if (not (= 0 (mod x 2))) true false))","user":"53b05a36e4b047364c044481"},{"code":"(fn myodd[coll](filter odd? coll))","problem":25,"user":"52cbf89ee4b07d0d72b27354"},{"code":"filter #(= 1 (bit-and 1 %))","problem":25,"user":"4fad9da0e4b081705acca23c"},{"problem":25,"code":"(fn [arg] (filter (fn [x] (= (mod x 2) 1)) arg))","user":"561a4c60e4b053970a773b06"},{"problem":25,"code":"#(filter odd? %\n   )","user":"59e0e1c6e4b08badc2a0c4fc"},{"problem":25,"code":"reduce (fn [others thing]\n         (if (> (mod thing 2) 0)\n           (conj others thing)\n           others)) []","user":"53b15e65e4b047364c04448e"},{"problem":25,"code":"(fn oddnums [coll]\n  (for [value coll :when (odd? value)] value))","user":"55268e8de4b0ffed3738f91f"},{"problem":25,"code":"#(loop [lst %\n        odds '()]\n   (if (empty? lst)\n     (reverse odds)\n     (recur (rest lst)\n            (let [item (first lst)]\n              (if (odd? item)\n                (cons item odds)\n                odds)))))","user":"56f413b2e4b046a417f9205a"},{"code":"(fn[coll] (filter odd? coll))","problem":25,"user":"518c1079e4b0f028e99addf8"},{"problem":25,"code":"(fn fo [seqs]\n        (cond (empty? seqs) '()\n              (odd? (first seqs))\n               (conj (fo (rest seqs)) (first seqs))\n              :else\n              (fo (rest seqs))))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":25,"code":"(fn odd\n  ([x] \n   (odd x []))\n  ([x r]\n   (if (empty? x)\n     r\n     (if (= (mod (first x) 2) 0)\n       (odd (rest x) r)\n       (odd (rest x) (conj r (first x)))\n       )\n    )\n   )\n  )","user":"556cd549e4b09a3098a52503"},{"code":"(fn [x] (filter (fn [a] (= (mod a 2) 1)) x))","problem":25,"user":"4fc503bfe4b081705acca36e"},{"code":"(fn [elems] (filter #(= 1 (mod % 2)) elems))","problem":25,"user":"4e03b010535d04ed9115e794"},{"problem":25,"code":"(fn odds [coll] (filter odd? coll))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":25,"code":"(fn [x] (filter (fn [i] (= 1 (mod i 2))) x))","user":"545ef0a5e4b01be26fd74684"},{"problem":25,"code":"(fn filter-odd [x] (filter #(odd? %) x))","user":"5d52bf29e4b0776584bd6f69"},{"problem":25,"code":"(fn [v] (for [x v :when (not= 0 (rem x 2))] x))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":25,"code":"filter #(= 1(rem % 2))","user":"54cf0986e4b018d918be98c7"},{"problem":25,"code":"(fn[coll] (filter #(odd? %) coll))","user":"5a55c713e4b05d388ecb6c43"},{"problem":25,"code":"(fn [ns] (filter #(= (mod % 2) 1) ns))","user":"546d41bde4b00cfc9eacc18c"},{"problem":25,"code":"(fn [xs]\n\t(loop [ls xs\n           result []]\n       (cond (empty? ls) result\n             (not= (mod (first ls) 2) 0) (recur (rest ls) (conj result (first ls)))\n             :else (recur (rest ls) result))))","user":"53f7f1dde4b0de5c41848567"},{"code":"filter #(not (= (mod % 2) 0))","problem":25,"user":"4f1d5dd0535d64f60314648b"},{"code":"#(flatten (for [i % :when (odd? i)]\n              (list i)))","problem":25,"user":"51155b55e4b0ce5098ee73bc"},{"problem":25,"code":"filter #(not ( = (rem % 2) 0))","user":"585d40afe4b0f14aab7c8798"},{"code":"(fn [x]\r\n(filter odd? x))","problem":25,"user":"4eb951f5535dfed6da9c6d4f"},{"problem":25,"code":"reduce\n    (fn [acc n]\n      (if (= (mod n 2) 1)\n        (into acc [n])\n\n         acc\n        )\n      )\n    []","user":"57addf3ae4b0b8559636fca4"},{"code":"(fn [lst] (reduce (fn [acc x] (cond (odd? x) (conj acc x) true acc)) '[] lst))","problem":25,"user":"52c17e42e4b07a9af5792367"},{"code":"(fn [coll] (filter #(odd? %) coll))","problem":25,"user":"4df168bd535d08e6dec9fe1d"},{"problem":25,"code":"(fn odds [x]\n  (if (= x []) [] \n  (if (= 1 (mod (first x) 2))\n    (cons (first x) (odds (rest x)))\n    (odds (rest x))\n    )\n  )\n)","user":"546146d6e4b01be26fd7469c"},{"problem":25,"code":";#(filter odd? %)\n(fn [find-odd-num] (filter odd? find-odd-num))","user":"5a1679d9e4b0ff51aa4b31ca"},{"problem":25,"code":"(fn is-odd [s]\n  (filter odd? s))","user":"5db826b4e4b010eb3c36cd47"},{"problem":25,"code":"#(reverse (reduce (fn [acc x] (if (odd? x) (conj acc x) acc)) '() %))","user":"59358f74e4b04f87174def52"},{"problem":25,"code":"(fn list [x] (for [x2 x :when (odd? x2)] x2 ))","user":"57750460e4b0979f8965160c"},{"problem":25,"code":"#(for [x % :when (odd? x)]\n   x)","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn[c](filter #(odd? %) c))","problem":25,"user":"528cc69fe4b0239c8a67aeb7"},{"code":"#(filter (comp not even?) %)","problem":25,"user":"4e1248b1535d04ed9115e7cf"},{"problem":25,"code":"(fn odd [coll]\n  (if (empty? coll)\n    coll\n    (flatten (remove nil? (conj (odd (drop 1 coll)) (if-not (= (mod (first coll) 2) 0) (take 1 coll) nil))))))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"code":"#(flatten \n  (map \n    (fn [x]\n        (if (odd? x)\n          x\n          '()\n        )\n    )\n    %\n  )\n)","problem":25,"user":"4e8b73f1535d65386fec2121"},{"code":"(fn [coll]\n  (filter #(= 1 (mod % 2)) coll))","problem":25,"user":"4f035bfd535dcb61093f6a8f"},{"code":"(fn [s] (filter #(= 1 (mod % 2)) s))","problem":25,"user":"4e7e6b51535db169f9c79712"},{"code":"(fn ood [coll] (filter odd? coll))","problem":25,"user":"50afdfc0e4b0c3f5ed5c29a6"},{"problem":25,"code":"(fn odds [coll] (filter #(= (mod % 2) 1) coll))","user":"5ceca436e4b0a17bb84e2bf8"},{"problem":25,"code":"(comp (partial filter odd?))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":25,"code":"(fn [x] (filter identity (map (fn [y] (if (= (mod y 2) 1)\n               y))x)))","user":"56eaf8f1e4b04a395b9a0419"},{"problem":25,"code":"(fn [coll]\n  (filter #(not= (mod % 2) 0)\n          coll)\n)","user":"549e5f1ee4b0f3d1d8e70f9f"},{"problem":25,"code":"(fn [c]\n  (remove \n    (fn [x] \n      (= 0 (mod x 2)))\n    c))","user":"53d60f57e4b0e771c3025451"},{"code":"(fn odd-get [lat]\r\n  (filter odd? lat))","problem":25,"user":"4ddb339c535d02782fcbe9f9"},{"problem":25,"code":"(fn[n](filter odd? n))","user":"55ec8b25e4b0121d4835fdc9"},{"code":"(fn filterOdd[s]\n  (if (= 1 (mod (first s) 2))\n    (if (= () (rest s))\n      (cons (first s) [])\n      (cons (first s) (filterOdd (rest s)))\n      )\n    (if (= () (rest s))\n      []\n      (filterOdd (rest s))\n      )\n    \n    )\n  )","problem":25,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn odd-numbers [x]\n  (filter odd? x))","problem":25,"user":"52725040e4b03e8d9a4a7427"},{"problem":25,"code":"(fn [in]\n  (filter #(= (rem % 2) 1) in))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn [coll]\n  (filter odd?\n          coll))","problem":25,"user":"52b94e26e4b07a9af57922b9"},{"code":"(fn my-filter [lst]\n  (if (empty? lst)\n    '()\n  (if (odd? (first lst))\n    (cons (first lst) (my-filter (rest lst)))\n    (my-filter (rest lst)))))","problem":25,"user":"5347870be4b084c2834f4a4b"},{"code":"reduce (fn [s, i] (if (odd? i) (conj s i) s)) []","problem":25,"user":"4f29e66fe4b0d6649770a035"},{"code":"#(for [x %\n\t:when (odd? x)] x)","problem":25,"user":"52a144b0e4b04e0c58e87bd6"},{"code":"(fn [list] (filter (fn [x] (= (mod x 2) 1)) list))","problem":25,"user":"51aee76ce4b09397d5109796"},{"code":"(fn sol [l]\n    (loop [l   l \n           res []]\n      (if (seq l)\n        (if (odd? (first l))\n          (recur (rest l) (conj res (first l)))\n          (recur (rest l) res))\n        res)))","problem":25,"user":"5374cbf4e4b06d7f452d9e29"},{"code":"(fn [s] (filter (fn [x] (= (mod x 2) 1)) s))","problem":25,"user":"4e6a6af5535d8ccf87e9fedf"},{"code":"(fn [l] (filter #(not= (mod % 2) 0) l))","problem":25,"user":"50c64471e4b00bb60fe0c51d"},{"code":"filter #(not (= (unchecked-remainder-int % 2) 0))","problem":25,"user":"5221c0cae4b0e6a83c8925e1"},{"code":"(fn [coll] \n   (filter #(= 1 (mod % 2)) \n                   coll))","problem":25,"user":"50de11b2e4b061dbdced7217"},{"problem":25,"code":"(fn [Xs] (filter odd? Xs))","user":"5e60a0cae4b0fd0acd158689"},{"problem":25,"code":"(fn [list] (filter #(= 1 (rem % 2)) list))","user":"54ee1c5be4b024c67c0cf86e"},{"problem":25,"code":"(fn  [lst] (filter odd? lst))","user":"57fc08d8e4b0d3187e900988"},{"problem":25,"code":"filter #(= (type (/ % 2)) (type 1/2))","user":"53f49dfae4b0db01ade6f9c2"},{"code":"#(\n  (fn odd [src, dest]\n    (if (= (first src) nil)\n      dest\n      (if (= 1 (mod (first src) 2))\n        (odd (rest src) (conj dest (first src)))\n        (odd (rest src) dest)\n       )\n     )\n   )\n  %, []\n)","problem":25,"user":"52463059e4b09dbe66b56198"},{"problem":25,"code":"(fn return-odds\n  [my-seq]\n  (filter #(odd? %1) my-seq))","user":"548f19a8e4b0e286459a1231"},{"problem":25,"code":"(fn p25 [l] (filter #(= (mod % 2) 1) l))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":25,"code":"(fn [myseq] \n  (filter (fn [x] (= (mod x 2) 1)) myseq))","user":"576aa367e4b0a07e8fc1811e"},{"problem":25,"code":"(fn filterOdd [lst] (filter odd? lst))","user":"59e0111ae4b08badc2a0c4e4"},{"code":"#(filter (fn [x] (> (rem x 2) 0)) %)","problem":25,"user":"52d954cae4b09f7907dd13a5"},{"code":"(fn [s] (filter (fn [n] (= (mod n 2) 1) ) s))","problem":25,"user":"4efcc0ce535de96065cf507f"},{"problem":25,"code":"(fn [coll]\n  (filter #(= 1 (rem % 2)) coll))","user":"4ff6018de4b0678c553fc373"},{"code":"(fn odd [s]\n    (if (empty? s)\n      s\n      (if (= 1 (mod (first s) 2))\n        (concat (list (first s)) (odd (rest s)))\n        (odd (rest s))\n      )\n    )\n)","problem":25,"user":"4f6b1457e4b07046d9f4efa6"},{"problem":25,"code":"#(filter (fn [e] (not= (mod e 2) 0)) %)","user":"5587cd86e4b059ccff29b1e6"},{"code":"(fn [s]\n  (filter #(not (zero? (mod % 2))) s))","problem":25,"user":"525947f1e4b0cb4875a45cd8"},{"code":"(fn [lst] \n  (filter (fn [x] \n   (odd? x)) lst)\n  \n)","problem":25,"user":"4f00e9c7535dcb61093f6a33"},{"problem":25,"code":"(fn [s] (filter (fn [x] (> (mod x 2) 0)) s))","user":"551ebcd7e4b08d5046aa8a4a"},{"code":"#(filter (fn [n] (pos? (rem n 2))) %)","problem":25,"user":"5356d00ee4b04ce2eb3ed26f"},{"code":"(fn [s] \n  (filter \n  \t(fn [el] (= (mod el 2) 1)) \n   \ts\n  )\n)","problem":25,"user":"52c10ad2e4b07a9af579235c"},{"problem":25,"code":"(fn [x]\n  (filter #(= 1 (mod % 2))\n          x))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":25,"code":"#(filter \n  (fn [x] (= 1 (mod x 2)))\n \t%  \n  )","user":"53e902a5e4b036ad0777e491"},{"problem":25,"code":"filter (fn [x] \n          (= 1 (mod x 2)))","user":"51c5c9c9e4b03a28d42333ba"},{"problem":25,"code":"(fn [lst]\n    (filter odd? lst))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"filter #(= (mod % 2 ) 1)","problem":25,"user":"501fcd59e4b0cb6ebc0a42ec"},{"problem":25,"code":"(fn\n  [x]\n  (filter #(= 1 (mod % 2)) x))","user":"54e79094e4b024c67c0cf818"},{"problem":25,"code":"(fn [lst] (filter #(odd? %) lst) )","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [coll]\n  (loop [coll coll, odds []]\n    (if (empty? coll)\n      odds\n      (let [x (first coll)]\n        (if (odd? x)\n          (recur (rest coll) (conj odds x))\n          (recur (rest coll) odds))))))","problem":25,"user":"51dc80b7e4b09c47a74ce10f"},{"problem":25,"code":"(fn [elements]\n  (filter #(not= 0 (mod % 2)) elements))","user":"5e9f3c2ce4b00a66d4a9517f"},{"code":"(fn [x] (filter #(not= (mod % 2) 0) x))","problem":25,"user":"4e521d7a535d302ef430da6e"},{"problem":25,"code":"(fn [coll] (filter #(not (zero? (rem % 2))) coll))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn rueckw [cc] (filter odd? cc))","problem":25,"user":"4fe4614ee4b0e8f79898feb3"},{"code":"filter #(= (rem %1 2) 1)","problem":25,"user":"4f1427f8535d64f603146435"},{"problem":25,"code":"(fn odd_numbers\n  ;\"Returns only the odd numbers from a sequence.\"\n  [lst]\n  (filter odd? lst))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn \n  [coll] \n  (filter #(odd? %) coll))","problem":25,"user":"5391ab43e4b0b51d73faaea6"},{"code":"(partial filter #(> (rem % 2) 0))","problem":25,"user":"5356100be4b04ce2eb3ed262"},{"problem":25,"code":"(fn [s] (loop [s s\n                c '()]\n           (if (first s)\n             (if (= 1 (rem (first s) 2))\n               (recur (rest s) (conj c (first s)))\n               (recur (rest s) c))\n             (reverse c))))","user":"5a6b15e9e4b0512ff01cda32"},{"problem":25,"code":"(fn odd [xs] (filter odd? xs))","user":"5da4fc6be4b000c986472bff"},{"problem":25,"code":"remove #(= (mod % 2) 0)","user":"5955158be4b066ee0a44af1e"},{"problem":25,"code":"(fn [c] (filter (fn [n] (= (mod n 2) 1)) c))","user":"5d0af5cbe4b0cc9c91588228"},{"code":"(fn od [x] (keep #(if (odd? %) %) x))","problem":25,"user":"4f1f8fae535d64f6031464a3"},{"problem":25,"code":"(fn [the-list]\n  (filter #(= (mod % 2) 1 ) the-list))","user":"58fb381ae4b0438e51c2cf71"},{"code":"keep #(if(odd? %) %)","problem":25,"user":"5294b190e4b02ebb4ef75011"},{"problem":25,"code":"(fn [coll]\n  (filter (fn [x] (odd? x)) coll)\n )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":25,"code":"(fn [xs] (remove #(zero? (mod % 2)) xs))","user":"53dadf1de4b0e771c30254ad"},{"problem":25,"code":"#(filter (\n          fn[x](=(rem x 2) 1) \n          ) %)","user":"54f4a457e4b0f2f3c5226e83"},{"problem":25,"code":"(fn odds_only [coll] (filter odd? coll))","user":"5f03550ce4b0cf489e8d7f33"},{"code":"(fn [l]\r\n  (filter odd? l)\r\n)","problem":25,"user":"4e6e10d8535d5021c1a895fd"},{"problem":25,"code":"#(filter (fn [x](= 1 (mod x 2))) %)","user":"56efb3a3e4b04a395b9a0463"},{"code":"filter #(= (mod % 2) 1 )","problem":25,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":25,"code":"(fn get-odd\n  ([seq]\n    (get-odd () seq))\n  ([finished seq]\n   (if (empty? seq)\n     (reverse finished)\n     (if (= (mod (first seq) 2) 0)\n       (get-odd finished (rest seq))\n       (get-odd (conj finished (first seq)) (rest seq))))))","user":"59fe5612e4b01bb0ae8afd0c"},{"code":"(fn [coll] (filter (fn [i] (= 1 (mod i 2))) coll))","problem":25,"user":"4f26c3b5e4b0d6649770a005"},{"problem":25,"code":"(fn odds [x] (filter (fn [element] (= 1 (mod element 2))) x))","user":"573c813be4b0cd1946bd10c5"},{"problem":25,"code":"(fn odds\n  [col]\n  (filter odd? col))","user":"5c55f6eee4b0fb8c5ffd9a2d"},{"problem":25,"code":"; (fn [coll] (let [even #(= 0 (mod 2 %))] (filter even coll)))\n; why is this not working? :o\n; (partial filter #(= 0 %))\n; (partial filter #(= 0 (mod % 2)))\n; duuuh, odd! :D\n\n; this one works\n(partial filter #(= 1 (mod % 2)))\n\n; and the first one as well, once odd\n; (fn [coll] (let [even #(= 1 (mod % 2))] (filter even coll)))\n\n; also notice the less haskelish notation! eg coll instead of xs...","user":"58aa8083e4b01a0c0b232985"},{"problem":25,"code":"(fn oddNum [s]\n  (filter odd? s))","user":"5efdb9bae4b0cf489e8d7f02"},{"problem":25,"code":"(fn [xs] (vec (filter odd? xs)))","user":"5e0b6375e4b099d064962f7b"},{"problem":25,"code":"(fn [ls] (filter #(not= (mod % 2) 0) ls))","user":"55cbd29be4b0e31453f64a0a"},{"code":"(fn odd? [s] (filter #(= 1 (rem % 2)) s))","problem":25,"user":"524e5e74e4b0541d1855b7d8"},{"problem":25,"code":"(fn odd-list [coll]\n    (loop [coll coll\n           result '()]\n      (if (seq coll)\n        (recur (rest coll)\n               (if (odd? (first coll))\n                             (conj result (first coll) )\n                             result))\n         (reverse result) )))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"#((fn [out l] (if (seq l) (if (odd? (first l) )  (recur (conj out (first l)) (rest l)) (recur out (rest l))) (reverse out) )) '()  (vec %))","problem":25,"user":"4fa9da14e4b081705acca1e7"},{"problem":25,"code":"(fn [x] \n    (remove nil? (map \n        (fn [i] \n            (if (odd? i) i) )\n        x)))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":25,"code":"(fn [lis]\n (filter #(odd? %) lis)\n )","user":"5d604682e4b0c9e5857d5007"},{"problem":25,"code":"(fn filterOdd\n  [xs]\n  (filter #(= 1 (mod % 2)) xs))","user":"55355397e4b09218d5f44fae"},{"problem":25,"code":"(fn [start-sq]\n  (loop [sq start-sq rem []]\n    (println sq rem)\n    (if (empty? sq)\n      rem\n      (if (odd? (first sq))\n        (recur (rest sq) (conj rem (first sq)))\n        (recur (rest sq) rem)))))","user":"58ca613de4b021aa9917edb7"},{"problem":25,"code":"#(->> %\n     seq\n     (filter odd?))","user":"5d6b0fc1e4b04d129b00f2a1"},{"problem":25,"code":"; returns a sequence of all the odd numbers in the input sequence.\n(fn getodds [sqn]\n  (if (= sqn [])\n    ;then make new set\n    '()\n    ;else, is the first element odd?\n    (if (= 1 (mod (first sqn) 2))\n      ;yes, so conj it\n      (conj (getodds (rest sqn)) (first sqn))\n      ;else, skip it\n      (getodds (rest sqn))\n    )\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn odds [lst]\n  ((fn odds_rec [lst ret]\n    (if (first lst)\n      (if (odd? (first lst))\n        (odds_rec (rest lst) (conj ret (first lst)))\n        (odds_rec (rest lst) ret))\n      ret))\n  lst []))","problem":25,"user":"52586dc4e4b0cb4875a45cb1"},{"problem":25,"code":"(fn [input-list]\n\t(filter #(not= 0 (rem % 2)) input-list)\n  )","user":"5909b3f8e4b047aa04b199a4"},{"code":"(fn [data] \n  (filter #(= 1 (mod % 2)) data))","problem":25,"user":"4eb1dd39535d7eef30807345"},{"problem":25,"code":"(fn [s]\n  \t(filter odd? s))","user":"5b7412a4e4b047b03b2036bb"},{"problem":25,"code":"(fn [input]\n  (loop [i input\n    result '()]\n    (prn (first i))\n    (if (nil? (first i)) (into '() result)\n     (recur (rest i) (if (odd? (first i)) (cons (first i) result) result)))))","user":"57d174ede4b0bd073c20236c"},{"problem":25,"code":"(partial filter (fn [x] (not (= 0 (mod x 2)))))","user":"5b1ff078e4b03cfeda66ed2a"},{"problem":25,"code":"(fn findOdd [seq]\n  (filter #(odd? %)  seq)\n  )","user":"5aa11b37e4b0d174b936c840"},{"problem":25,"code":"#(into [] (filter odd? %1))","user":"5da07698e4b000c986472bd3"},{"code":"(fn odds[x] (filter odd? x))","problem":25,"user":"535197f2e4b084c2834f4ae4"},{"code":"(fn [c] (filter (fn [el] (= (mod el 2) 1)) c))","problem":25,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn noodd [seq] (filter #(not= (mod % 2) 0) seq))","problem":25,"user":"4ebe8d65535dfed6da9c6d96"},{"code":"(fn oddseq [seq] (if (empty? seq) '() (if (odd? (first seq)) (conj (oddseq (rest seq)) (first seq)) (oddseq (rest seq)))))","problem":25,"user":"511d5d8ee4b022853b0e07a3"},{"problem":25,"code":"filter (comp #(not= % 0)\n             #(mod  % 2))","user":"5d4b2155e4b0776584bd6f28"},{"code":"filter #(> (rem % 2) 0)","problem":25,"user":"4dbb6302535d1e037afb21b5"},{"problem":25,"code":"filter #(not (= (mod %1 2) 0))","user":"54513516e4b0e397800069af"},{"problem":25,"code":"(fn [inseq]\n  (let [odd? #(= 1 (mod % 2))]\n    (filter odd? inseq)))","user":"53703287e4b0fc7073fd6e8f"},{"problem":25,"code":"(fn [numbers]\n  (loop [numbers numbers\n         result '()]\n    (if (= 0 (count numbers))\n      result\n      (if(odd? (last numbers))\n        (recur (butlast numbers) (conj result (last numbers)))\n        (recur (butlast numbers) result)\n        ))))","user":"53c69ebce4b00fb29b22129c"},{"problem":25,"code":"#(for [n %\n   :when (= 1 (rem n 2))]\n   n)","user":"5911c8e1e4b0163c97b36edc"},{"problem":25,"code":"#(filter (fn ([n] (= (rem n 2) 1))) %)","user":"5c50de36e4b0fb8c5ffd99bc"},{"problem":25,"code":"(fn [x]\n      (loop [elem (into [] x) \n             final-elem '()]\n        (if (empty? elem)\n          (sort final-elem)\n          (let [[part & remaining] elem]\n            (if (= 1 (mod part 2))\n              (recur remaining (conj final-elem part))\n              (recur remaining final-elem))))))","user":"55744472e4b0aa18f790f402"},{"problem":25,"code":"#(reduce (fn [p n] (if (odd? n) (conj p n) p)) [] %)","user":"5734147fe4b0cd1946bd1003"},{"problem":25,"code":"(fn [s] \n   (filter #(= 1 (mod % 2)) s)\n   )","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn [col] (filter #(not (zero? (mod % 2))) col))","problem":25,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [s]\n  (loop [rem (seq s), acc (vector)]\n    (cond (empty? rem) acc\n          :else (let [f (first rem), r (rest rem)]\n                  (if (= 0 (mod f 2))\n                    (recur (rest rem) acc)\n                    (recur (rest rem) (conj acc f)))))))","problem":25,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn odd-numbers [numbers] (for [x numbers \n                                  :when (odd? x)]\n                              x))","problem":25,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"problem":25,"code":"(fn [xs](filter #(= (mod % 2) 1) xs))","user":"56fff6a4e4b08d47c97781c3"},{"problem":25,"code":"(fn [l] (reduce conj [] (filter odd? l) ))","user":"550b5a53e4b06e50f9beb142"},{"code":"(fn getodds [x] (\n  if (empty? x)\n    []\n    (if (= 1 (mod (first x) 2))\n      (concat (list (first x)) (getodds (rest x)))\n      (concat [] (getodds (rest x)))\n    )\n))","problem":25,"user":"504f3aede4b0a02f9cffde5d"},{"problem":25,"code":"(fn [lst] (for [x lst :when (= 1 (mod x 2))] x))","user":"5a527c16e4b05d388ecb6bff"},{"code":"(fn [data]\n  (filter odd? data))","problem":25,"user":"5229f4a3e4b0590a43906cea"},{"code":"(fn [coll]\n  (filter  (fn [n](= 1 (mod n 2))) coll))","problem":25,"user":"4ffb529be4b0678c553fc3cd"},{"problem":25,"code":"(fn[coll]\n  (filter #(= 1 (mod % 2)) coll))","user":"5472cba1e4b094393f72dd7a"},{"code":"filter #( = 1 (rem % 2))","problem":25,"user":"52f426fce4b05e3f0be25f1e"},{"problem":25,"code":"(fn [lst] (filter #(> (mod % 2) 0) lst))","user":"574ef311e4b02ea11479924d"},{"problem":25,"code":"(fn [seq]\n  (filter #(= (mod % 2) 1) seq)\n  )","user":"5ccaed31e4b0ccb061962877"},{"code":"#(filter odd? %  )","problem":25,"user":"5006b46fe4b0678c553fc48b"},{"problem":25,"code":"(fn \n          [coll]\n          (loop [list coll  acc []]\n            (if (empty? list)\n              acc\n              (let [ head (first list)\n                     tail (rest list) ]\n                (if (odd? head)\n                  (recur tail (conj acc head))\n                  (recur tail acc)\n                  )\n                )\n              )\n            ))","user":"553a1475e4b09218d5f44fef"},{"problem":25,"code":"(fn only-odd\n  [coll]\n  (loop [[x & xs :as coll] (seq coll) acc []]\n    (if coll\n      (recur xs (if (odd? x) (conj acc x) acc))\n      acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":25,"code":"(fn [input]\n  (filter odd? input)\n  )","user":"573c4d9be4b0cd1946bd10bf"},{"problem":25,"code":"(fn [numbers]\n  (reduce #(if ((fn [n] (= 1 (mod n 2))) %2)\n             (concat %1 (list %2))\n             %1)\n          '()\n          numbers))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn [coll]\n    (loop [result [] coll coll]\n      (if (seq coll)\n        (let [x (first coll)]\n          (if (= (mod x 2) 1)\n            (recur (conj result x) (rest coll))\n            (recur result (rest coll))))\n        result)))","problem":25,"user":"4e5be681535d8a8b8723a2bc"},{"code":"(fn t [x] (filter (fn [y] (if (== 0 (mod y 2)) false true)) x))","problem":25,"user":"4f8dbae2e4b02e764a0a51b3"},{"code":"(fn [items] (filter odd? items))","problem":25,"user":"4e7d2686535db169f9c796c9"},{"code":"(fn [v] (filter #(not (= (rem % 2) 0)) v))","problem":25,"user":"4e31c695535deb9a81d77f20"},{"code":"(fn [coll]\n  (filter #(odd? %) coll))","problem":25,"user":"4e46ac46535dc968683fc4b5"},{"problem":25,"code":"(fn [x] (loop [res [] v x] (if-not(first v) res (recur (if-not(even? (first v))(conj res (first v)) res) (rest v)))))","user":"5fa9fd9be4b0fa27300f3df5"},{"problem":25,"code":"#(filter odd?(seq %))","user":"53ada652e4b047364c04446d"},{"problem":25,"code":"filter #(if (odd? %1) %1)","user":"520a796be4b01da9d47a99dc"},{"problem":25,"code":"(fn o\n  [lst]\n  (filter odd? lst))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn\n  ([x] ((fn [s o]\n         (if (= s '()) (sort o)\n           ;Else\n           (recur (rest s) (if (odd? (first s)) (cons (first s) o) o)))) x '())))","problem":25,"user":"4e30da02535deb9a81d77f17"},{"problem":25,"code":"(fn [theSequence] (filter odd? theSequence))","user":"548026d8e4b0e286459a1155"},{"problem":25,"code":"(fn [s] (filter #(= 1 (mod % 2 )) s))","user":"5647ffdae4b0284900eef626"},{"code":"(fn odd [x]\n  (filter #(= 1 (mod %1 2)) x))","problem":25,"user":"537cd1dce4b06839e8705e7e"},{"code":"#(loop [col %1, z []] (if (empty? col) z (recur (rest col) (if (= 0 (mod (first col) 2)) z (conj z (first col))))))","problem":25,"user":"50d4c940e4b09cc622d65a71"},{"code":"reduce (fn [acc item] (if (odd? item) (conj acc item) acc)) []","problem":25,"user":"532ecd44e4b019098a6f8b49"},{"problem":25,"code":"(fn [s] \n  (filter \n   #(not (= (mod % 2) 0) ) s))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [x] ((fn [x acc] (if (empty? x) acc (recur (rest x) (if (odd? (first x)) (conj acc (first x)) acc)))) x '[]))","problem":25,"user":"4e8c9f2e535d65386fec212b"},{"problem":25,"code":"(fn [coll] (filter #(not (= (mod % 2) 0)) coll))","user":"541c5718e4b01498b1a71a74"},{"problem":25,"code":"(fn [list] (filter odd? list ))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":25,"code":"(fn evens [xs]\n    ((fn evens' [xs' es]\n          (if (= 0 (count xs'))\n                  es\n                  (if (= 1 (mod (first xs') 2))\n                            (evens' (rest xs') (conj es (first xs')))\n                            (evens' (rest xs') es)))) xs []))","user":"54b9a5b3e4b0ed20f4ff6eaf"},{"problem":25,"code":"#(filter (fn [item]\n  (odd? item)) %)","user":"60282169e4b0d5df2af22240"},{"code":"(fn [seq] \n  (filter #(when (odd? %) %) seq)\n  )","problem":25,"user":"524fafb3e4b0541d1855b817"},{"problem":25,"code":"(fn only-odds [sqce] (filter odd? sqce))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":25,"code":"(fn myOdds [x]\n  ((fn xodds [x y] \n     (if (empty? x)\n       y\n       (if (odd? (first x))\n         (xodds (rest x) (conj y (first x)))\n         (xodds (rest x) y)\n         )\n       )\n     ) x []\n   )\n)","user":"556ddbeae4b09a3098a5250a"},{"code":"(fn l [xs]\n  (\n    if (seq xs)    \n    (\n      if (odd? (first xs))\n      (conj (l (rest xs)) (first xs))\n      (l (rest xs))\n    )\n    '()\n  )\n)","problem":25,"user":"4f8da0e2e4b02e764a0a51b1"},{"problem":25,"code":"(fn [seq]\n  (for [x seq\n        :when (odd? x)]\n    x))","user":"5c195cb2e4b01240ff5671f7"},{"problem":25,"code":"(fn [data]\n  (loop [data data\n         acc []]\n    (if (empty? data)\n      acc\n      (recur (rest data) (if (> (mod (first data) 2) 0)\n                    (conj acc (first data))\n                    acc)))))","user":"55c461d3e4b0e31453f64999"},{"code":"(fn [l] \n  (for [x l :when (= (rem x 2) 1)] x))","problem":25,"user":"4eb92051535dfed6da9c6d4c"},{"problem":25,"code":"(fn dummy-name [in]\n  (filter odd? in)\n  )","user":"5b107263e4b0cc2b61a3be22"},{"problem":25,"code":"(fn \n  [seq]\n  (filter odd? seq))","user":"5d78d680e4b02e6b30c9353c"},{"problem":25,"code":"(fn [v] (for [e v :when (odd? e)] e))","user":"55e1bb20e4b050e68259b41f"},{"code":"filter #(not= (mod % 2) 0)","problem":25,"user":"4e6b998a535d8ccf87e9ff1c"},{"code":"(fn [l] (filter #(= (mod % 2) 1) l ))","problem":25,"user":"4e5206ec535d302ef430da6c"},{"code":"filter (fn [n] (= (mod n 2) 1))","problem":25,"user":"4ef1ee67535dced4c769f219"},{"problem":25,"code":"#(filter (fn [x] (not (= (rem x 2) 0))) %)","user":"587c48cce4b01531a375eb16"},{"problem":25,"code":"(fn [coll] \n  (filter #(> (rem % 2) 0) coll)\n)","user":"58d6caf5e4b03c36ff7e5975"},{"code":"(partial filter #(== (mod % 2) 1))","problem":25,"user":"4ef8d47c535dced4c769f261"},{"problem":25,"code":"(fn positives\n  [lst]\n  (remove even? lst))","user":"59e68254e4b0249b728206fc"},{"code":"(fn o[s](\n    filter \n    #(= 1 (rem % 2))\n    s\n  )\n)","problem":25,"user":"50512f61e4b0b30bd8f4f83f"},{"problem":25,"code":"(fn\n  [numbers]\n  (filter #(not= 0 (mod %1 2)) numbers))","user":"5e47e1eee4b043cd24807a35"},{"problem":25,"code":"(fn [coll]\n    (filter odd? coll))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":25,"code":"(fn find-odd [a]\n  (remove even? a))","user":"5cab0766e4b048ec896c5c45"},{"problem":25,"code":"#(filter\n  (fn [x] (= 1 (mod x 2)))\n  %)","user":"55a2b008e4b0acc240e31526"},{"problem":25,"code":"(fn [s]\n  (filter\n    #(= 1 (mod % 2))\n    s))","user":"5392500ae4b0b51d73faaeaf"},{"problem":25,"code":"reduce #(if (odd? %2)\n           (do (conj %1 %2))\n           (do %1)) []","user":"5ccda634e4b0ccb0619628a9"},{"code":"(fn [coll] (filter #(not (zero? (mod %1 2))) coll ))","problem":25,"user":"4f037bb5535dcb61093f6aec"},{"code":"(fn f [coll] (filter odd? coll))","problem":25,"user":"50ec69e0e4b04edc3377704a"},{"problem":25,"code":"(fn [x]\n\t(reverse (reduce\n\t\t(fn [y z]\n\t\t\t(if (= (mod z 2) 1)\n\t\t\t\t(conj y z)\n\t\t\t\ty))\n\t\t'() x)))","user":"59affcdee4b0e1f4e384c8c2"},{"code":"(fn [s] (loop [s s r '()] (if (empty? s) (reverse r) (if (odd? (first s)) (recur (rest s) (conj r (first s))) (recur (rest s) r)))))","problem":25,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":25,"code":"filter #(not (= 0 (mod  % 2)))","user":"566e5a03e4b0a866af6896d8"},{"problem":25,"code":"(fn [y] (filter odd? y))","user":"55c819b4e4b0e31453f649dc"},{"code":"(fn [xs] (filter odd? xs))","problem":25,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn odds [xs]\n  (if (empty? xs)\n    xs\n    (let [x (first xs) ys (rest xs)]\n      (if (odd? x)\n        (cons x (odds ys))\n        (odds ys)))))","problem":25,"user":"51c20b14e4b0d204dbe2ca1b"},{"code":"(fn[coll] (filter #(not (= (rem % 2) 0)) coll))","problem":25,"user":"4f294dffe4b0d6649770a024"},{"problem":25,"code":"filter odd?\n;;#(filter (fn [a] (= (mod a 2) 1)) %)","user":"5bb919e1e4b0a20761a235ca"},{"code":"#(filter (fn [x] (not (even? x))) %1)","problem":25,"user":"4ee8092f535d93acb0a66875"},{"code":"(fn [c] (filter #(> (mod % 2) 0) c))","problem":25,"user":"4e1f60a6535d04ed9115e80b"},{"problem":25,"code":"(fn\n  [in-list]\n  (filter odd? in-list))","user":"5c9419fae4b048ec896c5a2b"},{"problem":25,"code":"filter (fn [q] (> (mod q 2) 0) )","user":"59c243bae4b0a024fb6ae4aa"},{"problem":25,"code":"filter\n(fn [x] (not (= (rem x 2) 0)))","user":"568b781be4b0dcc4269f40a5"},{"problem":25,"code":"filterv odd?","user":"55a09645e4b0acc240e314fe"},{"code":"#( filter odd? (seq %))","problem":25,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":25,"code":"#(filter (fn [x] (not= 0 (rem x 2))) %)","user":"57289d7ee4b0c5bde472c15d"},{"code":"(fn myodd [the-list]\n  (filter odd? the-list)\n)","problem":25,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":25,"code":"(fn only-odd\n  ([xs] (only-odd xs []))\n  ([xs acc]\n   (if (= xs ())\n     acc\n     (if (not= 0 (mod (first xs) 2))\n       (only-odd (rest xs) (conj acc (first xs)))\n       (only-odd (rest xs) acc)))))","user":"595c3782e4b066ee0a44aff2"},{"problem":25,"code":"(fn just-odds [xs]\n  (filter (fn [x] (= (mod x 2) 1)) xs))","user":"59ee2284e4b0966464fe6a0f"},{"code":"(fn [c] (filter #(not= (mod % 2) 0) c))","problem":25,"user":"503e4138e4b06c4e0e1fa263"},{"code":"(fn [v] (filter #(odd? %) v))","problem":25,"user":"538d7e2ee4b0b51d73faae70"},{"problem":25,"code":"(fn [coll]\n  (loop [c coll\n         r []]\n    (if (empty? c)\n      r\n      (let [f (first c)]\n        (recur (rest c) (if (odd? f) (conj r f) r))))))","user":"4f6a90f4e4b07046d9f4ef9d"},{"problem":25,"code":"(fn [my-seq]\n    (loop [m (list) v my-seq]\n      (if (empty? v)\n        (reverse m)\n        (if (odd? (first v))\n          (recur (conj m (first v)) (rest v))\n          (recur m (rest v))))))","user":"54cbd6bae4b057c6fda3a282"},{"problem":25,"code":"filter (fn [x] (if (not= (mod x 2) 0) x))","user":"55f05015e4b06e875b46ce22"},{"problem":25,"code":"(fn my-filter [coll]  (filter #(= (mod % 2) 1) coll))","user":"5a79ce7fe4b03baeef9276c8"},{"problem":25,"code":"(fn[list]\n(filter \n(fn[x] (=(mod x 2) 1)\n\t)\nlist\n\t)\n\t)","user":"55256426e4b0ffed3738f905"},{"code":"(fn [y] (for [x (seq y) :when (> (rem x 2) 0)] x))","problem":25,"user":"4f031883535dcb61093f6a5e"},{"problem":25,"code":"filter odd?\n;#(reduce (fn [coll x] (if (= 1 (rem x 2)) (conj coll x) coll)) [] %)","user":"5cfee28de4b0cc9c91588185"},{"problem":25,"code":"(fn [l]\n  (loop [li l el '()]\n    (if (empty? li)\n      (sort el)\n      (recur (rest li) (if (odd? (first li)) (conj el (first li)) el)))))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn hoho [x](filter #(odd? %) x))","problem":25,"user":"4e18c553535d04ed9115e7f4"},{"code":"(fn [seq] (filter #(odd? %) seq))","problem":25,"user":"4efd98fa535de96065cf5086"},{"problem":25,"code":"(fn filter-even [x] (filter #(odd? %) x))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn [lst] (filter (fn[x] (= (mod x 2) 1)) lst))","problem":25,"user":"4e6eff83535d5021c1a89615"},{"problem":25,"code":"(fn [xs] (filter #(not (zero? (mod % 2))) xs))","user":"59279a89e4b072a2710fced3"},{"problem":25,"code":"(fn [xs]\n  (loop [result ()\n         xs (seq xs)]\n    (if (empty? xs)\n      (reverse result)\n      (recur (let [x (first xs)]\n               (if (odd? x)\n                 (conj result x)\n                 result))\n             (rest xs)))))","user":"554b8b78e4b0a04f7929958d"},{"code":"(fn foo [list]\n  (filter #(= 1 (mod % 2)) list))","problem":25,"user":"505cc50ce4b0e6aca564be00"},{"code":"filter #( = (mod %1 2) 1 )","problem":25,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":25,"code":";(fn [coll]\n;  (filter odd? coll))\n#(filter odd? %)","user":"55b7f263e4b01b9910ae29b4"},{"problem":25,"code":"(fn [xs]\n  (reduce (fn [acc x]\n            (if (odd? x)\n              (conj acc x)\n              acc))\n          []\n          xs))","user":"5d11618de4b02c15ef021985"},{"code":"filter #(= (mod %1 2) 1)","problem":25,"user":"4eda77c0535d10e5ff6f530d"},{"problem":25,"code":"#(filter (fn [a] (= (mod (- a 1) 2) 0)) %)","user":"4f6de600e4b07046d9f4efd1"},{"code":"(fn  [valor]\n  (loop [lista (seq valor)\n\t\t\tres ()\n          ]\n      (if (seq lista)\n\t\t(if (odd? (first lista))\n          (let [dato (first lista)]\n    \t  \t (recur   (next lista) (conj res dato))\n          )\n            (recur (next lista) res)\n         )\n\t(sort res)\n      )\n     )\n  )","problem":25,"user":"50255bafe4b0b0b8afb15aa8"},{"problem":25,"code":"(fn huj [x] (if (empty? x) () (if (odd? (first x)) (cons (first x) (huj (rest x))) (huj (rest x)))))","user":"544e1794e4b0e39780006980"},{"problem":25,"code":"(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more\n             (if (odd? r)\n               (conj acc r)\n               acc))\n      (reverse acc))))","user":"5c718e6ce4b0fca0c1622796"},{"code":"(fn [x] \n  ((fn odd0 [s t]\n    (cond (empty? t) s\n          (= 1 (rem (first t) 2)) (odd0 (conj s (first t)) (rest t))\n          :else (odd0 s (rest t))))\n   '() (reverse x)))","problem":25,"user":"5099283ce4b0cae2931060af"},{"code":"(fn [x](\r\n  filter odd? x))","problem":25,"user":"4ee17ecc535d10e5ff6f535a"},{"problem":25,"code":"(fn odds\n  ([col] (odds col []))\n  ([col acc] (if (empty? col) acc (recur (rest col) (if (odd? (first col)) (conj acc (first col)) acc)))))","user":"59022c89e4b0438e51c2d052"},{"code":"#(filter \n  (fn [x] \n    (if (odd? x) x nil))\n  %1)","problem":25,"user":"53864493e4b06839e8705f10"},{"problem":25,"code":"(fn [n]\n  (remove even? n))","user":"5a99b844e4b0d174b936c7ab"},{"problem":25,"code":"#(for [index %1 :when (odd? index)] index)","user":"55532d03e4b0deb715856dfd"},{"problem":25,"code":"(fn findOdd [args] \n  (\n    filter (fn [x] (= 1 (mod x 2) ) ) args\n  )\n)","user":"5df28320e4b03c219ef1a35c"},{"code":"(fn [x](filter odd? x))","problem":25,"user":"4e13c44a535d04ed9115e7db"},{"problem":25,"code":"(fn [xs]\n  (reduce (fn [m x] (if (= (mod x 2) 1) (conj m x) m)) [] xs))","user":"5681fe64e4b0945ebc182a88"},{"problem":25,"code":"(fn [coll]\n  (let [x (seq coll)]\n    (filter odd? x)))","user":"54271c6de4b01498b1a71b20"},{"problem":25,"code":"(fn [seq] (for [x seq :when (= 1 (rem x 2))] x))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn find-odd-num [sequ]\n  (filter #(odd? %) sequ))","problem":25,"user":"5202c9b6e4b030ee0c5b2701"},{"problem":25,"code":"(fn [x] (filter #(not= 0 ( rem %1 2)) x))","user":"5c32ea85e4b0d62ef62d9f3e"},{"problem":25,"code":"(fn [xs] (filter (fn [x] (= (rem x 2) 1)) xs))","user":"5e6b9955e4b04a83ad7cd27b"},{"problem":25,"code":"(fn [coll] (loop [coll coll odd-numbers []]\n             (if (empty? coll) odd-numbers\n               (recur (rest coll) (if (odd? (first coll)) (conj odd-numbers (first coll))\n                                    odd-numbers)            \n             )\n           )\n))","user":"56885c32e4b0dcc4269f4068"},{"problem":25,"code":"#(reduce conj [] (filter odd? %))","user":"585ea250e4b0f14aab7c87ba"},{"problem":25,"code":"(fn my-filter [s]\n  (cond (empty? s) []\n        (odd? (first s)) (cons (first s) (my-filter (rest s)))\n        :else (my-filter (rest s))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":25,"code":"(fn [l] (filter #(not (= (mod % 2) 0)) l))","user":"568b20e9e4b0dcc4269f40a1"},{"code":"(fn [l]\n  (filter \n    (fn [e]\n      (= (mod e 2) 1)) l))","problem":25,"user":"522a1248e4b0590a43906cf3"},{"code":"(fn keep-odd [xs]\r\n    (if (empty? xs)\r\n        '()\r\n        (if (odd? (first xs))\r\n            (cons (first xs)\r\n                  (keep-odd (rest xs)))\r\n            (keep-odd (rest xs)))))","problem":25,"user":"4dda2c1b535d02782fcbe9ef"},{"problem":25,"code":"(fn my-odd [coll]\n  (loop [c (reverse coll)\n         res '()]\n    (cond\n      (empty? c) res\n      :else (recur (rest c) (if (odd? (first c)) (conj res (first c)) res))\n      )\n    )\n  )","user":"60471241e4b02d28681c77c9"},{"problem":25,"code":"filter (fn [x]  (= 1 (mod x 2)))","user":"54453f83e4b032a45b86939a"},{"problem":25,"code":"(fn odd [list]\n  (if (< 1 (count list))\n    (if (odd? (first list))\n      (concat [(first list)] (odd (rest list)))\n      (odd (rest list)))\n    (if (and (= (count list) 1) (odd? (first list)))\n      [(first list)]\n      [])))","user":"5a39e36ce4b001c08efc0cbc"},{"problem":25,"code":"filter (fn [el]\n         (odd? el))","user":"5512aca6e4b055c2f668d4b4"},{"problem":25,"code":"(let [odd #(= (rem % 2) 1)] #(filter odd %))","user":"5446c89ce4b032a45b8693b5"},{"problem":25,"code":"#(filter (fn odd? [n] (= 1 (mod n 2))) %)","user":"580f9585e4b0f478707a05b5"},{"problem":25,"code":"(fn [lst]\n  (filter #(pos? (rem % 2)) lst))","user":"5b58d012e4b02d533a91bd71"},{"problem":25,"code":"(fn [c] \n  (let [f (fn [c res]\n            (if (first c) \n              (recur (rest c) (if (odd? (first c))\n                                (cons (first c) res) \n                                res ))\n              res))](reverse(f c '())))\n  )","user":"5a7460a0e4b0512ff01cdaaf"},{"code":"(fn [x] \n  (filter #(= 1 (rem % 2))   x))","problem":25,"user":"504f0036e4b0e7ad84dbc4aa"},{"code":"filter #(< 0 (rem % 2))","problem":25,"user":"4fab0b6be4b081705acca20c"},{"code":"(fn [l] (\n  filter (fn [x] (not (nil? x))) \n  (map (fn [x] (if (= (mod x 2) 1) x nil) ) l)\n))","problem":25,"user":"4e6cf2be535de274dd8d818a"},{"problem":25,"code":"(fn [xs]\n  (->> xs (filter odd?)))","user":"57382719e4b0cd1946bd1055"},{"problem":25,"code":"( partial filter odd? )","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":25,"code":"(fn [x]\n  (loop [x x ret ()]\n    (if (empty? x)\n      (reverse ret)\n      (if (odd? (first x))\n        (recur (rest x) (cons (first x) ret))\n        (recur (rest x) ret)))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [lst] (filter #(= 1 (mod % 2)) lst))","problem":25,"user":"4ee673cf535d93acb0a66860"},{"problem":25,"code":"filter #(not(= 0 (rem % 2)))","user":"5e731c7fe4b085ba37836dcd"},{"code":"(fn impar[x]\n  ( filter\n    #(= 1 (rem % 2))\n    x\n  )\n)","problem":25,"user":"4e94accb535dbda64a6f6b20"},{"code":"#(for [x % :when (odd? x) ] x  )","problem":25,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn odd [col]\n   (cond\n    (empty? col) []\n    (not= 0 (rem (first col) 2)) (cons (first col) (odd (rest col)))\n    :else (odd (rest col))\n    ))","problem":25,"user":"4f5f2665e4b0030a34fb2b5d"},{"code":"(fn [inlist] (filter #(= (mod % 2) 1) inlist))","problem":25,"user":"4fc50bcbe4b081705acca375"},{"problem":25,"code":"(fn [x]\n  (filter (fn [y] (if (= (rem y 2) 1) true false)) x))","user":"58bd219be4b0888cdc949d29"},{"code":"(fn [x] (for [y x :when (odd? y)] y))","problem":25,"user":"4f036732535dcb61093f6aaa"},{"problem":25,"code":"(fn [se]\n   (filter odd? se))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":25,"code":"(fn [v]\n  (filter odd? v)\n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":25,"code":"(fn flt [x] (filter (fn [y] (= (mod y 2) 1)) x))","user":"563b559ee4b0bfe05bf1180d"},{"problem":25,"code":"(fn [s]\n  (reduce (fn [result item] \n    (if (not (= (mod item 2) 0 )  )   \n      (concat result [item] ) \n      result\n    )     \n  ) () s ) \n)","user":"564633a1e4b0284900eef60f"},{"problem":25,"code":"(fn\n  [collection]\n  (filter odd? collection))","user":"530148f6e4b0d8b024fd371b"},{"code":"(partial filter #(> (rem % 2) 0 ))","problem":25,"user":"5002ad40e4b0678c553fc42b"},{"code":"(fn [x] (filter #(not= (mod % 2) 0) (seq x)))","problem":25,"user":"4f037d9e535dcb61093f6af2"},{"problem":25,"code":"reduce (fn [acc n] (if (even? n) acc (conj acc n))) []","user":"57915ba4e4b0ebec4cfb75ba"},{"code":"(fn f [x] (\n  if (= 0 (count x))\n    []\n    (concat\n      (\n        if (= 1 (mod (first x) 2))\n          [(first x)]\n          nil\n      )\n      (f (rest x))\n    )\n))","problem":25,"user":"4f73054fe4b07046d9f4f03e"},{"problem":25,"code":"(fn [seq] (filter #(odd? (rem % 2)) seq))","user":"555bd27ae4b0b056612e2244"},{"code":"keep #(if (odd? %1) %1)","problem":25,"user":"5029faf6e4b023940c84aa46"},{"code":"(fn foo [s] (if (empty? s) '() (when (not (empty? s)) (if (odd? (first s)) (cons (first s) (foo (rest s))) (foo (rest s))))))","problem":25,"user":"50f9c7fde4b0e7c80cb15a52"},{"code":"(fn tste [x]\n  (loop [aux x lista []]\n  (if(empty? aux)\n   lista\n   (if(= 1 (mod (first aux) 2))\n       (recur (rest aux) (conj lista (first aux)))\n       (recur (rest aux) lista )\n   )\n  )\n  )\n)","problem":25,"user":"4e94aab8535dbda64a6f6b1f"},{"problem":25,"code":"filter (fn [e] (= (mod e 2) 1))","user":"6065755ee4b069485764ddcc"},{"problem":25,"code":"(fn [values]\n  (filter #(= (rem % 2) 1) values))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":25,"code":"(fn odds [s]\n  (let [odds_int (fn odds_rec [s, o]\n    (if (empty? s)\n      o\n      (if (= 0 (mod (first s) 2))\n        (odds_rec (drop 1 s) o)\n        (odds_rec (drop 1 s) (concat o (take 1 s)))\n      )\n    )\n  )]\n (odds_int s '()))\n)","user":"554756b8e4b0a04f79299549"},{"code":"(fn odds [aSeq] (filter #(not= (mod %1 2) 0) aSeq))","problem":25,"user":"4f299ad8e4b0d6649770a02c"},{"problem":25,"code":"(fn odd-nums [numbers]\n  (filter odd? numbers))","user":"5d6e5ec6e4b04d129b00f2c7"},{"problem":25,"code":"(fn [xs]\n  (loop [result ()\n         xs (seq xs)]\n    (if (empty? xs)\n      (reverse result)\n      (recur (let [x (first xs)] (if (odd? x) (conj result x) result))\n             (rest xs)))))","user":"55ba4a78e4b01b9910ae29cf"},{"code":"(fn [lst]\n  (filter #(== 1 (mod % 2)) lst))","problem":25,"user":"527a5b84e4b03e8d9a4a7558"},{"problem":25,"code":"#(filter (fn [num] (not(=(mod num 2) 0)) ) %)","user":"5b7d1dc1e4b047b03b20373f"},{"problem":25,"code":"(fn odd-numbers [xs]\n  (filter odd? xs))","user":"548018d1e4b0c51c1f4d7326"},{"problem":25,"code":"#(filter (fn check-odd [n] (= 1 (mod n 2))) %)","user":"54797964e4b0c51c1f4d72c6"},{"problem":25,"code":"(fn [s]\n  (filter odd? s)\n  )","user":"562fd7f6e4b0ab312c17ebe0"},{"problem":25,"code":"(fn [seq] (filter odd? seq) )","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn[tab](filter odd? tab))","problem":25,"user":"52e807b3e4b09f7907dd1490"},{"code":"(fn [al] (filter #(= 1 (mod % 2)) al))","problem":25,"user":"4fb4d4ede4b081705acca2b1"},{"problem":25,"code":"(fn [s] (filter #(> (mod % 2) 0) s))","user":"5662d47fe4b0e91d5f5c564d"},{"problem":25,"code":"(fn tmp [x] (if (empty? x) '() (if (odd? (first x)) (cons (first x) (tmp (rest x))) (tmp (rest x)))))","user":"55adf65fe4b03311e7b732b0"},{"problem":25,"code":"(fn\n  [arrIn]\n  (filter #(= 1 (mod % 2)) arrIn))","user":"5e1b0140e4b0dc959400851c"},{"problem":25,"code":"(fn [s]\n (filter \n  (fn [e]\n    (odd? e))\n  s))","user":"545801f6e4b01be26fd74615"},{"problem":25,"code":"(fn [s]\n  (loop [s (seq s)\n         v []]\n  (if s\n    (recur (next s)\n           (if (= (rem (first s) 2) 1) (conj v (first s)) v))\n    (if (seq v) (seq v) '()))))","user":"5703cbbee4b08d47c97781fb"},{"code":"(fn ! [ln]\n  (let [e (first ln) li (rest ln)]\n  (cond\n    (empty? ln) ln\n    (odd? e) (cons e (! li))\n    :else (! li))))","problem":25,"user":"4eb04346535d7eef3080733a"},{"problem":25,"code":"(fn [x]\n  (filter #(pos? (mod % 2)) x))","user":"572c198fe4b0cd1946bd0f49"},{"code":"#(filter (fn [x] (if (= (mod x 2) 1) true false)) %)","problem":25,"user":"5279096ce4b03e8d9a4a752d"},{"problem":25,"code":"(fn [seq]\n      (filter odd? seq))","user":"54fce8bde4b07d26eda61d30"},{"problem":25,"code":"(fn\n   [full]\n   (filter #(= 1 (mod % 2)) full))","user":"548efcb6e4b0e286459a122a"},{"problem":25,"code":"(fn this-problemM8 [lst]\n (filter odd? lst) )","user":"59deba46e4b01968742fed7f"},{"code":"(fn [data]\n   (let [data (into [] data)]\n  (filter odd? data)))","problem":25,"user":"52151220e4b0961f15ac4da7"},{"code":"(fn[x] (filter odd? (seq x)))","problem":25,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":25,"code":"#(into '() (reverse (filter (fn [a] (= (rem a 2) 1)) %)))","user":"57a5bdc4e4b0a966079561fd"},{"problem":25,"code":"(fn oddsandends\n  [a]\n  (filter #(> (rem % 2) 0) a))","user":"59076082e4b047aa04b19956"},{"problem":25,"code":"(fn return-odds [coll] (filter odd? coll) )","user":"60d655c7e4b0d60f5ea6f7e8"},{"problem":25,"code":"#(loop [col %\n        res []]\n   (if (empty? col)\n     res\n     (recur (rest col)\n            (if (= 0 (mod (first col) 2))\n              res\n              (conj res (first col))))))","user":"542ce413e4b0dad94371f2ae"},{"problem":25,"code":"#(filter (fn[x] (not= (mod x 2) 0)) %)","user":"5521a5a9e4b0882d96d09197"},{"code":"filter #(zero? (rem (inc %) 2))","problem":25,"user":"51585807e4b0a069fd272c75"},{"problem":25,"code":";;filter (fn[x] (> (mod x 2) 0))\nfilter #(> (mod % 2) 0)","user":"55429859e4b0a04f7929951f"},{"problem":25,"code":"reduce #(if(= 1 (mod %2 2))(conj %1 %2) %1) []","user":"5b210749e4b03cfeda66ed48"},{"problem":25,"code":"filter odd?\n; filter #(= 1 (rem %  2))","user":"560dfa8de4b05f002753df46"},{"problem":25,"code":"(fn [x]\n  (keep\n   #(if (odd? %) %)\n   x))","user":"54ef51bde4b024c67c0cf884"},{"code":"filter (comp #(not= % 0) #(mod % 2))","problem":25,"user":"52709265e4b03e8d9a4a73b2"},{"problem":25,"code":"#(filter (fn [a] (= (mod a 2) 1)) %)","user":"549ea7e0e4b0f3d1d8e70fa3"},{"code":"filter (fn [aa] (odd? aa))","problem":25,"user":"4ecf571b535d44c135fd68b6"},{"code":"(fn getOdd [x] (if (= x '()) '() (if (= (mod (first x) 2) 1) \n(conj (getOdd (rest x)) (first x)) (getOdd (rest x)))))","problem":25,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"problem":25,"code":"(fn odds [seq] (filter odd? seq))","user":"56889672e4b0dcc4269f406c"},{"problem":25,"code":"(fn [x] \n  (sort (reduce (fn [x y]\n                  (println x y)\n            (if (odd? y) (conj x y) x))\n          '()\n          x)))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":25,"code":"(fn [li]\n  ((fn [li acc]\n     (if (empty? li)\n       acc\n       (let [h (first li)]\n         (let [acc (if (odd? h) (conj acc h) acc)]\n           (recur (rest li) acc))))) li []))","user":"5c96f3dde4b048ec896c5a67"},{"problem":25,"code":"(fn odd [c] (filter #(not= (mod  % 2) 0) c))","user":"59c1c169e4b0a024fb6ae492"},{"problem":25,"code":"(fn find-odds\n  ([aseq] (find-odds aseq []))\n  ([aseq result]\n   (if (empty? aseq)\n     result\n     (let [num (first aseq)]\n       (if (odd? num)\n         (find-odds (rest aseq) (conj result num))\n         (find-odds (rest aseq) result))))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"code":"(fn[c]\r\n  (filter\r\n    #(= 1 (rem % 2))\r\n    c))","problem":25,"user":"4e59f717535d8a8b8723a2a6"},{"problem":25,"code":"filter (fn [nu] (= (mod nu 2) 1))","user":"5e23ca7fe4b05b4b01516144"},{"problem":25,"code":"(fn [list]\n\t(reverse (loop [result [] sub_list list]\n\t\t(if (empty? sub_list)\n\t\t\t\t\tresult\n\t\t\t\t\t(if (odd? (first sub_list))\n\t\t\t\t\t\t(recur (cons (first sub_list) result) (rest sub_list))\n\t\t\t\t\t\t(recur result (rest sub_list)))\n))))","user":"5954cea2e4b066ee0a44af0a"},{"problem":25,"code":"(fn\n  [n]\n  (filter odd? n))","user":"58fe8b36e4b0438e51c2cfd9"},{"code":"(fn filterodd [x] (filter odd? x))","problem":25,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [c] (filter #(odd? %) c))","problem":25,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [x] (let [evens (filter even? x) odds (filter odd? x)] odds))","problem":25,"user":"4fd6028ce4b0d4de60cee37b"},{"problem":25,"code":"(fn find-odds\n  [my-sequence]\n  (filter #(= 1 (mod % 2))\n          my-sequence))","user":"568aa458e4b0dcc4269f4092"},{"code":"(fn [sequence]\n  (filter odd? sequence))","problem":25,"user":"4f17df72535d64f603146458"},{"problem":25,"code":"(fn filterOdd\n  [collection]\n  (filter odd? collection))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":25,"code":"(fn [x]\n  (loop [v (vec x)\n         res []]\n    (cond (empty? v) res\n          (odd? (first v)) (recur (rest v) (into res (vector (first v))))\n          :else (recur (rest v) res))))","user":"587f8393e4b0f1effa3b75f2"},{"problem":25,"code":"(fn recursive-odd [x & y] \n  (if \n    (empty? x) \n    (reverse (first y)) \n    (recursive-odd (rest x) (if \t\n\t\t\t\t\t\t\t (odd? (first x)) \n                       \t\t (if \n                              y \n                              (conj (first y) (first x)) \n                              (list (first x))) \n                             (first y)))))","user":"577feed1e4b0d36ec5835e71"},{"code":"(fn [l] \n  (filter #(= (mod % 2) 1) l)\n)","problem":25,"user":"4f461e57e4b0d56e7bb92b92"},{"code":"(fn [v] (filter #(not (even? %1)) v))","problem":25,"user":"521d709ae4b050d5da0427ef"},{"problem":25,"code":"(fn my_filter \n  ([l] (my_filter l nil))\n  ([l acc] (cond \n             (empty? l) (reverse acc)\n             (= (mod (first l) 2) 0) (my_filter (rest l) acc)\n             true (my_filter (rest l) (conj acc (first l)))\n            )\n   )\n)","user":"59e61973e4b08badc2a0c567"},{"code":"(fn [list] \n  (reduce \n    #(if (even? %2) \n      %1\n      (conj %1 %2)) [] list))","problem":25,"user":"50112acee4b0d82cfac69f4c"},{"problem":25,"code":"(fn find-odds [l]\n  (if (empty? l)\n    '()\n    (if (= (mod (first l) 2) 1)\n      (conj (find-odds (rest l)) (first l))\n      (find-odds (rest l)))))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":25,"code":"(fn\n  [s]\n  (filter #(odd? %) s))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn foo\n  ([x]\n    (if (= x [])\n      []\n      (if (= 0 (rem (first x) 2))\n        (foo (rest x))\n        (cons (first x) (foo (rest x)))\n))))","problem":25,"user":"4f611e0ee4b0defedf855fb8"},{"problem":25,"code":"(fn oddnum [s]\n  (filter (fn [x] (not= (mod x 2) 0)) s))","user":"55c2a159e4b0e31453f6497e"},{"code":"(fn my-odd [lst]\n        (if (seq lst)\n            (concat (if (odd? (first lst))\n                      [(first lst)]\n                      [])\n                  (my-odd (rest lst)))\n            []))","problem":25,"user":"4fb591aee4b081705acca2c0"},{"problem":25,"code":"(fn [x]\n  (filter\n  \t(fn [y]\n  \t\t(= 1 (mod y 2))\n\t)\n\tx\n  )\n)","user":"5838d5ede4b089d5ab817d32"},{"problem":25,"code":"#(loop [coll %\n        result []]\n   (if (empty? coll)\n     \tresult\n     \t(if (odd? (first coll))\n          \t(recur (rest coll) (conj result (first coll)))\n          \t(recur (rest coll) result))))","user":"55f344afe4b06e875b46ce5a"},{"problem":25,"code":"(fn [my-list] (filter #(= 1 (rem % 2)) my-list))","user":"5b6b3809e4b0c6492753e7a5"},{"problem":25,"code":"(fn [ms] (filter #(= (mod % 2) 1) ms))","user":"56483562e4b0284900eef629"},{"code":"(fn odds [coll]\n  (if (empty? coll) '()\n    (if (not= 0 (rem (first coll) 2))\n      (conj (odds (rest coll)) (first coll))\n      (odds (rest coll))\n    )\n  )\n)","problem":25,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":25,"code":";filter #(= 1 (rem % 2))\nfilter odd?","user":"53838b9ee4b06839e8705ee1"},{"problem":25,"code":"filter \n (fn[x]\n  (odd? x))","user":"563cce5be4b0bfe05bf1183f"},{"code":"(fn [seq] (filter (fn [x] (= (rem x 2.0) 1)) seq))","problem":25,"user":"4e0febe6535d04ed9115e7be"},{"code":"(fn odd [myseq]\n  (if (= (count myseq) 0)\n    '()\n    (if (= (mod (first myseq) 2) 1)\n      (conj (odd (rest myseq)) (first myseq) )\n      (odd (rest myseq))\n    )\n  )\n)","problem":25,"user":"50d3317ee4b049d4ed5650da"},{"code":"filter (fn[x] (odd? x))","problem":25,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":25,"code":"(fn odd\n  [seq]\n  (remove nil? (map (fn [x] (if (odd? x) x)) seq)))","user":"5c7dad57e4b0d597f478caba"},{"code":"(fn [x] (filter #(not (zero? (mod % 2))) x))","problem":25,"user":"52f021c1e4b05e3f0be25edb"},{"problem":25,"code":"(fn [l]\n  (filter #(= 1 (mod % 2)) l))","user":"5405fdcce4b0addc1aec6683"},{"problem":25,"code":"(fn odd [x]\n  (filter odd? x))","user":"56244b3ae4b0b951f963fc22"},{"problem":25,"code":"(fn\n     [collection]\n     (loop [coll collection odd-coll []]\n       (if (empty? coll)\n         odd-coll\n         (recur (rest coll)\n                (if (odd? (first coll))\n                  (conj odd-coll (first coll))\n                  odd-coll\n                  )\n                )\n         )\n       )\n     )","user":"5aefd746e4b0cc2b61a3bc3d"},{"problem":25,"code":"(fn [s] (loop [s s\n               r []]\n          (if (empty? s) r (recur (rest s) (if (odd? (first s)) (conj r (first s)) r)))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn [x]\r\n  (\r\n    filter\r\n    #(\r\n      odd? %\r\n    ) x\r\n  )\r\n)","problem":25,"user":"4eb9af9f535dfed6da9c6d59"},{"problem":25,"code":"(fn [coll]\n  (for [i coll\n        :when (not (even? i))]\n    i)\n  )","user":"5ee4b2e6e4b029a2061bbe90"},{"problem":25,"code":"(fn [xs]\n  (filter #(= 1 (mod % 2))\n          xs))","user":"525890f7e4b0cb4875a45cb5"},{"problem":25,"code":"(fn [mylist] (filter #(not (= (mod % 2) 0 )) mylist))","user":"5549394fe4b0a04f79299565"},{"code":"#(filter (fn [x] (if (= 1 (rem x 2)) x)) %)","problem":25,"user":"4e68ed35535d8ccf87e9fe92"},{"code":"(fn \n  [coll]\n  (filter odd? coll))","problem":25,"user":"4f5760c3e4b0a7574ea71837"},{"code":"(fn odd [l]\n  (filter #(= 1 (mod %1 2)) l))","problem":25,"user":"505024a4e4b0a02f9cffdeb4"},{"problem":25,"code":"(fn\n  [x]\n  (filter odd? x))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":25,"code":"(fn odd_num \n  [x]\n  (filter odd? x))","user":"5b98f174e4b0c0b3ffbd4ac1"},{"problem":25,"code":"(fn func [list] (filter #(odd? %) list))","user":"572a3d8ce4b0f4d77e651231"},{"code":"(fn [sequence] (\n  filter odd? sequence))","problem":25,"user":"4e570b60535d8a8b8723a286"},{"code":"(fn odds [x]\n  (for [y x\n        :when (= (rem y 2) 1)]\n    y\n    )\n  )","problem":25,"user":"50fb084ee4b0d10d794c19dd"},{"problem":25,"code":"(fn [numbers] (filter (fn [number] (= (mod number 2) 1)) numbers))","user":"5cc8aa84e4b0ccb061962850"},{"code":"(fn [x]\n  (filter\n   (fn [y]\n   (= (mod y 2) 1)\n   )  \n  x)\n)","problem":25,"user":"52824143e4b0757a1b171453"},{"code":"(fn [list]\n  (loop [out '() in list]\n  (if (empty? in)\n      (reverse out)\n      (recur (if (odd? (first in))\n                 (cons (first in) out)\n                 out)\n             (rest in)))))","problem":25,"user":"50456747e4b01f6c9a8b236c"},{"problem":25,"code":"(fn oddNum\n  [l]\n  (if (empty? l)\n    (empty '(1))\n    (if (= 1 (mod (first l) 2))\n      (conj (oddNum (rest l)) (first l) )\n      (oddNum (rest l))\n    )\n  )\n)","user":"5d123c75e4b02c15ef021997"},{"code":"(fn [ coll ]\n  (filter (fn [ n ]\n            (if (not (= 0 (mod n 2)))\n              n\n              )) \n          coll))","problem":25,"user":"4f1f1a9d535d64f60314649d"},{"problem":25,"code":"(fn [x] (filter #(not (= 0 (rem % 2))) x))","user":"57006957e4b08d47c97781c8"},{"problem":25,"code":"#(\n  loop [s % r []]\n  (\n   if (= s '())\n   r\n   (\n    recur \n    (rest s) \n    (\n     if (= 0 (mod (first s) 2))\n     r\n     (conj r (first s))\n    )\n   )\n  )\n )","user":"56f97711e4b07572ad1a88b2"},{"code":"(fn [coll] (for [x coll :when (odd? x)] x))","problem":25,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":25,"code":"(fn findOddNos1\n  [sequence]\n  (filter (comp not even?) sequence))","user":"557e9d17e4b05c286339e0d8"},{"problem":25,"code":"#(reduce (fn [a v]\n          (if (= 1 (rem v 2))\n                   (conj a v)\n                   a))\n          [] %)","user":"6079e2dfe4b0a637ed780366"},{"problem":25,"code":"(fn [input] (loop [_list input output ()] (if (empty? _list) (reverse output) (recur (rest _list) (if (= 1 (mod (first _list) 2)) (conj output (first _list)) output)))))","user":"53b9a779e4b047364c0444eb"},{"code":"remove #(= (rem %1 2) 0)","problem":25,"user":"52976262e4b02ebb4ef75041"},{"problem":25,"code":"(fn [numbers] (for [x numbers :when (odd? x)] x))","user":"551bdefde4b07993ea3788d7"},{"problem":25,"code":"(fn[sequence]\n (filter odd? sequence)\n  )","user":"564c7501e4b0284900eef671"},{"problem":25,"code":"(fn [search-list]\n(loop [lst search-list odd-list []]\n\t(println lst odd-list)\n\t(if (empty? lst)\n\t\todd-list\n\t\t(recur (rest lst) (if (odd? (first lst))\n\t\t\t(conj odd-list (first lst))\n\t\t\todd-list))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":25,"code":"(fn [cc]\n  (filter #(= 1 (mod % 2 )) cc))","user":"561a1af6e4b053970a773b02"},{"problem":25,"code":"(fn [arr]\n  (for [x arr :when (odd? x)] x))","user":"5e7f62cce4b085ba37836e3b"},{"problem":25,"code":"(fn [lista] (filter odd? lista))","user":"5954eef0e4b066ee0a44af17"},{"problem":25,"code":"#(reduce (fn [x y]\n          (if (not (= (mod y 2) 0))\n            (conj x y)\n            x))\n  []\n  %)","user":"588bf237e4b05c141a25608d"},{"code":"#(filter odd?%)","problem":25,"user":"4eb07be3535d7eef3080733b"},{"problem":25,"code":"(fn [x] (filter (fn [y] (if (= (mod y 2) 1) true false)) x))","user":"505a0a15e4b03d2efce48c5a"},{"code":"(fn [s](\n        reduce (fn [new x](\n          if (odd? x)(concat new (list x))(concat nil new)\n        )) \"\" s\n        ))","problem":25,"user":"515d221ee4b00901442db1d8"},{"problem":25,"code":"(fn foo [l] (if (= l '())\r\n                '()\r\n                (let [e (first l)\r\n                      r (foo (rest l))]\r\n                  (if (odd? e)\r\n                    (conj r e)\r\n                    r))))","user":"57a9b2dbe4b0a96607956233"},{"problem":25,"code":"(fn[col] (filter odd? col))","user":"53e2381ce4b036ad0777e3ee"},{"code":"(fn odds [sq] (if (empty? sq) sq (if (= (rem (first sq) 2) 1) (cons (first sq) (odds (rest sq))) (odds (rest sq)))))","problem":25,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"filter #(= 1 (rem % 2)) #_ odd?","problem":25,"user":"4fc52d79e4b081705acca386"},{"problem":25,"code":"(fn [x] (filter #(if (= 0 (mod % 2)) false true) x))","user":"54f1773be4b024c67c0cf8b2"},{"problem":25,"code":"(fn [col]\n  (filter\n   #(= (mod % 2) 1)\n   col))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"problem":25,"code":"(fn [x] \n  \n  (filter \n   (fn [y] (= 1 (mod y 2))) \n   x)\n  )","user":"54c7b7c5e4b045293a27f63f"},{"problem":25,"code":"(fn [x]\n  (filter #(if (= (mod % 2) 1) true false) x))","user":"5459f13be4b01be26fd74631"},{"code":"#(filter (fn [x] (not= (mod x 2) 0)) %)","problem":25,"user":"4e50ee51535dc968683fc4f0"},{"problem":25,"code":"(fn rec [li] (if (empty? li) '() (if (odd? (first li)) (cons (first li) (rec (rest li))) (rec (rest li)))))","user":"5b20134de4b03cfeda66ed2d"},{"problem":25,"code":"(fn [coll] (filter #(not (== (mod % 2) 0)) coll))","user":"55fda077e4b07755b13145fb"},{"problem":25,"code":"(fn [x]\n  (loop [r x s []]\n    (if (empty? r) s \n      (recur (rest r)\n        (if (odd? (first r))\n          (conj s (first r))\n          s\n        )\n      )\n    )\n  )\n)","user":"5437d022e4b032a45b869309"},{"problem":25,"code":"(fn isitodd\n                     [t]\n                     (filter odd? t))","user":"55fb04e0e4b0f488688e0657"},{"code":"#(remove (fn [x] (= (rem x 2) 0)) %)","problem":25,"user":"4e53d441535d8a8b8723a276"},{"problem":25,"code":"#(filter (fn [x] (if (= 1 (mod x 2)) true false)) %)","user":"5866df28e4b0f14aab7c886d"},{"problem":25,"code":"(fn [x] (sort (into () (filter odd? x))))","user":"5797bb57e4b039eba2ecb104"},{"code":"(fn odd [x]\n  (filter \n    (fn foo [y] (= (mod y 2) 1))\n    x\n  )\n)","problem":25,"user":"4f03101e535dcb61093f6a53"},{"problem":25,"code":"filter (fn [x] (zero? (bit-and-not 1 x)))","user":"548f7bf1e4b0e286459a123b"},{"problem":25,"code":";filter #(= 1 (mod % 2))\nfilter odd?","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"#( filter odd? %)","problem":25,"user":"52361d84e4b05f3be1c7c8e5"},{"problem":25,"code":"#(filter (fn [n] (not (zero? (rem n 2)))) %)","user":"5af61443e4b0cc2b61a3bcb1"},{"problem":25,"code":"(fn [coll]\n   (for [c coll\n         :when (odd? c)]\n     c))","user":"56c60b36e4b05cc29241eead"},{"problem":25,"code":"(fn[coll]\n  (filter odd? coll))","user":"5c115097e4b01240ff567172"},{"code":"(fn odds [coll]\n  (filter #(not (even? %)) coll))","problem":25,"user":"527a69cee4b03e8d9a4a755d"},{"problem":25,"code":"(fn get-odd-numbers [lst] (for [x lst :when (= true (odd? x))] x))","user":"58e90258e4b056aecfd47cfd"},{"code":"filter #'odd?","problem":25,"user":"4e6a73d0535d8ccf87e9fee7"},{"code":"#(filter (fn [n] (= (mod n 2) 1 )) %)","problem":25,"user":"51bc1d76e4b0fe3ecfb46450"},{"problem":25,"code":"(fn [in] (filter #(= 1 (mod % 2)) in))","user":"5ff88607e4b06df49cee14a6"},{"problem":25,"code":"(fn [col] \n  (reverse (reduce (fn [acc elem]\n            (if (odd? elem)\n              (conj acc elem)\n              acc)) \n          '() col)))","user":"5b757b39e4b047b03b2036cd"},{"problem":25,"code":"(fn [arg]\n  (filter #(= (rem % 2) 1) arg))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"problem":25,"code":"(fn [lat]\n  (filter odd? lat))","user":"54ad9927e4b09f271ff37ce5"},{"problem":25,"code":"(fn [coll] (reduce #(if (= 1 (rem %2 2)) (conj %1 %2) %1) [] coll))","user":"56a69451e4b0542e1f8d14ec"},{"code":"(fn [list] ( filter odd? list ) )","problem":25,"user":"4fe899a6e4b07c9f6fd12c54"},{"problem":25,"code":"(fn nimpar [x]\n  (filter odd? x))","user":"562eafbce4b0ab312c17ebbe"},{"problem":25,"code":"(fn [x] (filterv odd? x))","user":"53a7bc10e4b047364c044420"},{"problem":25,"code":"(fn [nums]\n  (remove even? nums))","user":"54cb39eee4b057c6fda3a274"},{"code":"(fn [input]\n  (filter (fn [i] (odd? i))\n          input))","problem":25,"user":"5232d104e4b035af41902a96"},{"code":"(fn ! [x] (if (empty? x) '() (if (= 1 (rem (first x) 2))   (concat  (list (first x))  (! (rest x)) )    (! (rest x))   )   )  )","problem":25,"user":"52faec2ee4b047fd55837004"},{"problem":25,"code":"(fn odd [sq] (if (empty? sq)\n                 sq\n                 (if (= (mod (first sq) 2) 0)\n                     (odd (rest sq))\n                     (conj (odd (rest sq)) (first sq))\n                 )\n             )\n)","user":"56b36283e4b0982f16b37e18"},{"problem":25,"code":"(fn\n  [theSeq]\n  (filter #(not= (rem % 2) 0) theSeq))","user":"573de63fe4b05c31a32c081c"},{"code":"#(reverse (reduce \n  (fn [l item] \n  (if (odd? item) (cons item l) l)) '() %))","problem":25,"user":"5226ab21e4b04e78ff2e198a"},{"problem":25,"code":"(fn [seqq] \n  (filter #(odd? %) seqq))","user":"6088395de4b0ae75613dcee2"},{"problem":25,"code":"(fn filter-odd [sq] \n  (filter odd? sq))","user":"59b7120fe4b05c620303ca3b"},{"problem":25,"code":"filter #((comp not =) (mod % 2) 0)","user":"5700ec08e4b08d47c97781cd"},{"code":"(fn [x] (filter #(> (rem % 2) 0) x))","problem":25,"user":"4e75500f535d7a570dd295c1"},{"problem":25,"code":"(fn odd [s] \n  (filter #(= 1 (mod % 2)) s))","user":"57fe840ae4b0d3187e9009d3"},{"code":"(fn [x] (for [y x :when (= 1 (mod y 2))] y))","problem":25,"user":"4f803577e4b033992c121bf0"},{"problem":25,"code":"(fn [li] (filter odd? li) )","user":"55a21be1e4b0acc240e3151e"},{"code":"#(for [n %1 :when (odd? n)] n)","problem":25,"user":"527416ebe4b03e8d9a4a749d"},{"problem":25,"code":"(fn\n  [x]\n  (loop [i 0 x x seq []]\n      (if (not-empty x)\n        (do\n\n          (if (odd? (first x))\n            (do\n              (println (first x))\n              (recur (inc i) (rest x) (conj seq (first x)) )\n              )\n            (recur (inc i) (rest x) seq )\n             )\n          )\n\n        seq)\n      )\n  )","user":"5c8bc8b4e4b048ec896c5978"},{"problem":25,"code":"(fn [ns] \n  (filter #(= (mod % 2) 1) ns))","user":"566cf904e4b0a866af6896c5"},{"code":"filter #(odd? %1)","problem":25,"user":"4e4ad154535dc968683fc4d1"},{"problem":25,"code":";;reduce it\n(fn [coll] \n  (filter #(not= 0 (mod % 2)) coll))\n\n;;long way\n#_(fn odd-job \n  ([odds [head tail]]\n   (if head\n     (if (not= 0 (mod head 2))\n       (odd-job (cons odds head) tail)\n       (odd-job odds tail))\n     odds))\n  ([coll]\n   (odd-job (list) (seq coll))))","user":"5c534431e4b0fb8c5ffd99f2"},{"problem":25,"code":"(fn [sq] (filter (fn [x] (= 1 (mod x 2))) sq))","user":"5273bae1e4b03e8d9a4a7490"},{"code":"#(filter (fn [n] (= 1 (rem n 2))) %)","problem":25,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn[s] (filter odd? s))","problem":25,"user":"4ec64981535d6d7199dd36c7"},{"code":"mapcat #(when (odd? %) [%])","problem":25,"user":"5149f383e4b0829bd132edb2"},{"problem":25,"code":"(fn [c] (filter #(= 1 (rem % 2)) c))","user":"54f14538e4b024c67c0cf8ae"},{"problem":25,"code":"(fn [elems]\n  (filter odd? elems))","user":"5267c74be4b03e8d9a4a7183"},{"problem":25,"code":"(fn [x] (filter (fn [x] (if (not (= (mod x 2) 0) ) x)) x\n                              \n         )\n  \n                       \n                       \n                       )","user":"5650ac8be4b0284900eef6c2"},{"problem":25,"code":"(fn [a] (filter (fn [x] (odd? x)) a ))","user":"5f0890ffe4b0cf489e8d7f61"},{"code":"filter (fn [x] (not= (unchecked-remainder x 2) 0))","problem":25,"user":"4f28eb85e4b0d6649770a01d"},{"code":"#(for [i % :when (odd? i)] i)","problem":25,"user":"4f6543cae4b07046d9f4ef41"},{"code":"(fn [x] (filter #(== (mod % 2) 1) x))","problem":25,"user":"51a87d28e4b08d8ec191b811"},{"code":"(fn [sq] (filter #(odd? %) sq))","problem":25,"user":"4e725d20535d5021c1a8965e"},{"problem":25,"code":"(fn [l] \n  (filter \n    (fn [x] (== 1 (mod x 2)))\n    l\n  )\n)","user":"55a59ebae4b0acc240e3154d"},{"code":"(fn [lat]\n    (filter odd? lat))","problem":25,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"filter (fn [x] (not= 0 (mod x 2)))","problem":25,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":25,"code":"(fn [xs] (for [x xs :when (odd? x)] x))\n\n;filter odd?","user":"5f6c331ae4b02876ed9fd054"},{"problem":25,"code":"(fn go-go\n   [seqn]\n   (if (nil? (first seqn))\n     []\n     (if (= 0 (mod (first seqn) 2))\n       (go-go (rest seqn))\n       (cons (first seqn)\n             (go-go (rest seqn))))))","user":"5ed6e0eee4b016b56eae05e4"},{"code":"#( for [ x % :when (odd? x) ] x )","problem":25,"user":"4ee11d37535d10e5ff6f5353"},{"code":"filter #(pos? (mod % 2))","problem":25,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"(fn [col]\n  (filter \n   (fn [x] (not (even? x))) col))","problem":25,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn impares [x]\n  (filter odd? x))","problem":25,"user":"4db51ce0535d87e67b28fe06"},{"problem":25,"code":"filter (fn [n] (not= (rem n 2)  0))","user":"5e4fae60e4b027a2e10ac0b9"},{"problem":25,"code":"(fn [x]\n  (filter (fn [y]\n            (= (rem y 2) 1))\n          x))","user":"6001ea38e4b074f607df662a"},{"problem":25,"code":"#(filter (fn [item] (odd? item)) %)","user":"576584c1e4b0994c1922fc0e"},{"problem":25,"code":"(fn [x] (filter odd? x))\n\n\n;;; hay una funcion llamada odd?","user":"6075c214e4b069485764de5b"},{"code":"(fn [coll] \n  (filter #(= (mod % 2) 1) coll))","problem":25,"user":"504ec46de4b069badc5a33c8"},{"code":"(fn [lst] (filter #(= (rem % 2) 1) lst))","problem":25,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [lst] (filter (fn [x] (= 1 (rem x 2))) lst))","problem":25,"user":"4ee271e2535d10e5ff6f5369"},{"problem":25,"code":"(fn [coleccion] (filter #(not (even? %)) coleccion))","user":"599f7a7ee4b0871e7608b81e"},{"code":"filter #( odd? % )","problem":25,"user":"50b9e36ae4b04934c218a4aa"},{"code":"(fn find-odd [list]\n  (filter odd? list))","problem":25,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":25,"code":";#(filter (fn [x] (not (zero? (rem x 2)))) %)\nfilter odd?","user":"533923fde4b0e30313ee6ca4"},{"code":"(fn [se]\n\t(for [x se :when (odd? x)] \n      x  \n    )  \n)","problem":25,"user":"51dc0ed1e4b09c47a74ce105"},{"code":"(fn[list]\n  (loop [coll list newcoll (vector)]\n    (if (or (nil? coll) (empty? coll))\n      newcoll\n      (if (odd? (first coll))\n        (recur (next coll) (conj newcoll (first coll)))\n        (recur (next coll) newcoll)\n        ))))","problem":25,"user":"524e9918e4b0541d1855b7e6"},{"problem":25,"code":"(fn [lst]\n  (filter #(not= 0 (rem % 2)) lst)\n)","user":"5a984657e4b0d174b936c78a"},{"problem":25,"code":"(fn [xs] \n  (filter \n   #(not= 0 (mod % 2)) \n   xs))","user":"56946d43e4b0dcc4269f411e"},{"code":"(fn justodds[s] (filter odd? s))","problem":25,"user":"4f03bd9d535dcb61093f6b5b"},{"problem":25,"code":"(partial filter (fn [x] (= (mod x 2) 1)))","user":"541475afe4b01498b1a719eb"},{"problem":25,"code":"(fn oddnums [sq]\n  (cond\n    (empty? sq) '()\n    (not= (mod (first sq) 2) 0) (conj (oddnums (rest sq)) (first sq))\n    :else (oddnums (rest sq))\n  )\n)","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn findOdd [x]\r\n  (if (= (first x) nil)\r\n    '()\r\n    (if (zero? (rem (first x) 2))\r\n      (findOdd (rest x))\r\n      (concat (list (first x)) (findOdd (rest x))))))","problem":25,"user":"50206641e4b0cb6ebc0a42f5"},{"problem":25,"code":"(fn find-odd-numbers\n  [col]\n  (filter #(not (= 0 (mod % 2))) col))","user":"60bf7458e4b0e0fa5f1b4296"},{"code":"#(loop [l %, r ()]\n  (if (empty? l) r\n    (recur\n      (rest l)\n      (if (even? (first l)) r\n        (concat r (list (first l)))))))","problem":25,"user":"4e57afc5535d8a8b8723a288"},{"problem":25,"code":"#(filter (fn [val] (= (mod val 2) 1)) %)","user":"5baa5f53e4b0a20761a23459"},{"problem":25,"code":"(fn [collection]\n     (filter #(not= (mod % 2) 0) collection))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":25,"code":"(fn [x] (filter odd? \n                x) )","user":"56cd67c1e4b0ea9b8538f74a"},{"problem":25,"code":"(fn [n] (filter #(not (zero? (mod % 2))) n))","user":"57b5dc52e4b0fbc9809a27b3"},{"code":"(fn [theSeq] (filter #(odd? %) theSeq))","problem":25,"user":"4f1c2336535d64f60314647f"},{"code":"(fn [l] (filter #(not (= 0 (mod % 2))) l))","problem":25,"user":"5364697ce4b0243289761e62"},{"code":"(fn [elems]\n  (loop [xs elems result []]\n      (if (empty? xs)\n        result\n        (recur (rest xs) (if (even? (first xs))\n                                    result\n                                    (conj result (first xs)))))))","problem":25,"user":"50294c28e4b0b33e9bf6fdef"},{"code":"(fn [coll1] (loop [result () coll2 coll1] (if (= () coll2) (sort result) (if (odd? (first coll2)) \n                                                   (recur (conj result (first coll2)) (drop 1 coll2)) \n                                                   (recur result (drop 1 coll2))))))","problem":25,"user":"513ca934e4b0b86ece9f3228"},{"problem":25,"code":"#(for [n %\n       :when (odd? n)]\n   n)","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":25,"code":"(fn find-odd\n  [coll]\n  (if (empty? coll)\n    '()\n    (if (= (mod (first coll) 2) 1)\n      (conj (find-odd (rest coll)) (first coll))\n      (find-odd (rest coll)))))","user":"55ee7977e4b0121d4835fdee"},{"problem":25,"code":"(fn oddball [numbers] (filter odd? numbers))","user":"56c0756de4b060a8e693e3a9"},{"code":"(fn getOdds [x]\n  (if (= 0 (count x))\n    ()\n    (if (= 0 (mod (first x) 2))\n          (getOdds (rest x))\n          (conj (getOdds (rest x))(first x))\n    )\n  )\n)","problem":25,"user":"524ed632e4b0541d1855b7f2"},{"problem":25,"code":"(fn [lst]\n  (filter (fn [v] (not (= (rem v 2) 0))) lst))","user":"5522a795e4b0882d96d091a7"},{"code":"(fn [s]\n  (filter #(= (mod %1 2) 1) s))","problem":25,"user":"4fcbc18ae4b0ee37620e185c"},{"problem":25,"code":"filter (fn [e] (> (mod e 2) 0))","user":"57a775bbe4b0a96607956214"},{"problem":25,"code":"#(filter (fn [number] (= (mod number 2) 1)) %)","user":"55941019e4b0c79f6e1db94b"},{"code":"(fn [seq] (filter #(= (mod % 2) 1) seq))","problem":25,"user":"536eb396e4b0fc7073fd6e74"},{"problem":25,"code":"filter (fn [i] (== 1 (mod i 2)))","user":"573e2d54e4b05c31a32c0824"},{"code":"(fn [x] (filter (fn [y] (= 1 (rem y 2))) x))","problem":25,"user":"4e3000c8535deb9a81d77f13"},{"problem":25,"code":"#(filter (fn [x]\n           (odd? x)) %)","user":"5883584ae4b0f1effa3b7674"},{"problem":25,"code":"reduce #(if (not= (rem %2 2) 0) (conj %1 %2) %1) []","user":"5c4ab449e4b0f9f7a8770e57"},{"code":"(fn [list] (filter (fn [n] (= (rem n 2) 1)) list))","problem":25,"user":"4e75334b535d7a570dd295be"},{"problem":25,"code":"#(filter (complement (fn [number] (= 0 (mod number 2)))) %)","user":"5abbb524e4b073f1774426da"},{"problem":25,"code":"filter (fn [a] (= 1 (mod a 2 ) ) )","user":"548018efe4b0c51c1f4d7335"},{"problem":25,"code":"(fn [lat]\n      (filter odd? lat))","user":"5d6e5b53e4b04d129b00f2c6"},{"code":"(fn [li] \n (filter \n    (fn [x] (= (mod x 2) 1)) \n  li)\n )","problem":25,"user":"5394265ee4b0b51d73faaec6"},{"problem":25,"code":"(fn odd\n  [a]\n  (loop [xs a\n         acc []]\n    (if (empty? xs)\n      acc\n      (recur (rest xs)\n             (if (odd? (first xs))\n               (conj acc (first xs))\n               acc)))))","user":"545cfbb0e4b01be26fd74669"},{"problem":25,"code":"#(for [o % :when (not (zero? (rem o 2)))] o)","user":"5dbf0281e4b0e59a23173d75"},{"problem":25,"code":"(fn [s] \n  \n  (filter odd? s)\n  \n  )","user":"515d414be4b00901442db1db"},{"code":"(fn [seq] (filter (fn [x] (= 1 (mod x 2))) seq))","problem":25,"user":"4fcac003e4b0ee37620e1855"},{"code":"(fn [l]\n  (filter #(odd? %) l))","problem":25,"user":"4f8d340be4b02e764a0a51a8"},{"code":"filter #(if (odd? %) %)","problem":25,"user":"52342722e4b07e3ee2be83c0"},{"problem":25,"code":"(fn [coll] \n  (filter \n   (fn [x] \n     (= 1 (mod x 2))) \n   coll))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":25,"code":"(fn [in]\n  (filter #(= 1 (mod % 2)) in))","user":"56dbe1f4e4b0ea9b8538f813"},{"code":"(fn [sequencia] \n  (filter odd? sequencia)\n)","problem":25,"user":"527c040be4b03e8d9a4a75a7"},{"problem":25,"code":"(fn odd-nums [s]\n  \t(loop [c (count s) \n           i 1 \n           x s\n               out []]\n      (do (println i)\n      (cond \n        (= i (inc c)) (lazy-seq out)\n        (= (mod (first x) 2) 1) (recur c (inc i) (rest x) (conj out (first x)))\n        :else (recur c (inc i) (rest x) out)\n      ))\n    )\n)","user":"579d1567e4b05b1deef9ae12"},{"code":"filter #(odd? %)\n;#(for [x %1 :when (odd? x)] x)","problem":25,"user":"52f3568fe4b05e3f0be25f0e"},{"problem":25,"code":"#(filter (fn [elt] (= (rem elt 2) 1)) %)","user":"5688e403e4b0dcc4269f4072"},{"code":"(fn [x] (filter #(not (even? %)) x))","problem":25,"user":"51d381b5e4b099f3b6acde01"},{"code":"(fn [n] (filter #(not= (mod % 2) 0) n))","problem":25,"user":"5239aab3e4b0d705d026ef1c"},{"problem":25,"code":";;(fn [x] (filter #(not= 0 (rem %1 2)) x))\n;; or \n \n(fn [x] (filter odd? x))","user":"5891bddce4b00487982d5201"},{"problem":25,"code":"(fn tester [coll] (filter #(= 1 (mod % 2)) coll))","user":"5461a711e4b01be26fd746a4"},{"problem":25,"code":";reduce (fn [x y] (if (= (rem y 2) 1) (conj x y) x) ) []\nfilter odd?","user":"590a7dbfe4b047aa04b199bc"},{"problem":25,"code":"(fn here [x] (filter odd? x))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":25,"code":"(fn odds [sq]\n  (loop [r [] s sq]\n    (println r s)\n    (if (empty? s)\n      r\n      (recur\n       (let [v (first s)]\n         (if (= (rem v 2) 1)\n           (conj r v)\n           r\n         )\n       )\n       (rest s)\n      )\n     )\n   )\n )","user":"5675f2f4e4b05957ce8c6153"},{"code":"(fn [coll] \r\n  (filter #(= (bit-and % 1) 1) coll))","problem":25,"user":"4e131443535d04ed9115e7d3"},{"problem":25,"code":"(fn [coll]\n  (filter #(not (integer? (/ % 2))) coll))","user":"5ee738dee4b029a2061bbea2"},{"code":"(fn [nums]\n  (filter #(= 1 (mod % 2)) nums))","problem":25,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [items]   \n    (filter #(= (mod % 2) 1) items))","problem":25,"user":"4fd9d162e4b05e33b9224f3c"},{"code":"(fn [s] \n  (for [x s :when (= (mod x 2) 1)] x))","problem":25,"user":"5057852ce4b0012181721992"},{"problem":25,"code":"#(reduce (fn [s i] (if (odd? i) (conj s i) s)) [] %)","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [xs]\n  (filter #(= (mod % 2) 1) xs))","problem":25,"user":"4e6f0075535d5021c1a89616"},{"code":"filter (fn [i] (not (= 0 (mod i 2))))","problem":25,"user":"4edffe54535d10e5ff6f5347"},{"problem":25,"code":"(fn\n  [seq]\n  (filter odd? seq)\n  )","user":"5736b126e4b0cd1946bd1037"},{"problem":25,"code":"(fn [odd-even-sequence] (filter odd? odd-even-sequence))","user":"5bc9fb3be4b07a9b28b100e3"},{"problem":25,"code":"(fn [x ] (remove #(= 0 (mod % 2)) x ))","user":"58447708e4b089d5ab817e4b"},{"code":"(fn [xs] \n  (filter #(not (zero? (mod % 2))) xs))","problem":25,"user":"504f5804e4b0a02f9cffde72"},{"code":"filter #(not (zero? (mod %1 2)))","problem":25,"user":"50720885e4b0e3170b5a8689"},{"code":"(fn odds [x]\n  (if (= (count x) 0)\n    '()\n    (if (= (mod (first x) 2) 1)\n      (conj (odds (rest x)) (first x))\n      (odds (rest x))\n)))","problem":25,"user":"4ea365e2535d7eef308072c5"},{"code":";; Initial answer - filters out all of the elements that give a 1 when asked to mod by 2.\n;; filter #(= 1 (mod % 2))\n;;\n;; new answer: I didn't realize there was an (odd?) function :)\n\nfilter odd?","problem":25,"user":"50955676e4b087f34d351ab1"},{"code":"(fn[list] (filter odd? list))","problem":25,"user":"4e525840535d302ef430da72"},{"code":"filter #(= 1 (mod %1 2))","problem":25,"user":"4eb0a757535d7eef3080733d"},{"problem":25,"code":"(fn my-odd [xs]\n  (filter (fn [x] (= (mod x 2) 1)) xs))","user":"5b12043ee4b0cc2b61a3be3c"},{"problem":25,"code":"(fn [s] (filter (fn [x] (not (= (mod x 2) 0))) s))","user":"6029c861e4b0d5df2af22257"},{"problem":25,"code":"(fn [s]\n  (filter\n  #(= (mod %1 2) 1) s))","user":"574803a1e4b009280f9f2b7d"},{"code":"(fn [se] (filter #(= (mod % 2) 1) se))","problem":25,"user":"4e72175d535d5021c1a89658"},{"code":"(fn [a] (filter odd? a))","problem":25,"user":"4e10a14d535d04ed9115e7c1"},{"problem":25,"code":"#(filter \n  (fn odd [nb] (not= 0 (mod nb 2))) \n  %\n)","user":"5d79165ae4b02e6b30c9353e"},{"problem":25,"code":"(fn [xs] \n  (filter \n   (fn [x] (> (mod x 2) 0))\n   xs))","user":"5581747fe4b05c286339e0fa"},{"problem":25,"code":"(fn odds\n  [x]\n  (filter odd? x))","user":"5a9f005be4b0d174b936c810"},{"problem":25,"code":"(fn [array]\n    (remove even? array))","user":"5bf47554e4b0b326c961d891"},{"problem":25,"code":"(fn [numbers] (filter #(not (= (mod % 2) 0)) numbers))","user":"5851b51be4b0b7285a6f4e99"},{"code":"(fn odds [x] (if (seq x) (if (= 1 (mod (first x) 2)) (conj (odds (rest x)) (first x)) (odds (rest x))) '()))","problem":25,"user":"53388e2de4b0e30313ee6c9c"},{"code":"(fn [s]\n  (filter #(= 1 (rem % 2)) s))","problem":25,"user":"5256627ce4b0541d1855ba1a"},{"code":"(partial \n    (fn filtr [the-filter, the-seq]\n        (if (empty? the-seq)\n            []\n            (let [[head & tail] (vec the-seq)]\n                (if (the-filter head)\n                    (cons head (filtr the-filter tail))\n                    (filtr the-filter tail)))))\n    (fn [x] (= (mod x 2) 1)))","problem":25,"user":"529ca7dae4b04e0c58e87b67"},{"code":"(fn [input] (for [x (vec input) :when (odd? x)] x))","problem":25,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [inlist] (filter #(= 1 (mod % 2)) inlist))","problem":25,"user":"4f0a5653535d0136e6c222f5"},{"code":"(fn odds [x] (filter #(= 1 (mod % 2)) x))","problem":25,"user":"4ffb59f6e4b0678c553fc3cf"},{"problem":25,"code":"(fn [initial-list]\n\t(loop [slist initial-list nar []]\n\t\t(if (= nil (first slist))\n\t\t\tnar\n\t\t\t(recur (rest slist) \n\t\t\t\t(if (= 0 (mod (first slist) 2))\n\t\t\t\t\tnar \n\t\t\t\t\t(conj nar (first slist)))))))","user":"58b985e0e4b0888cdc949ccc"},{"problem":25,"code":"(fn[s]\n   (filter odd? s))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":25,"code":"(fn getodds [c]\n  (->> c (filter #(odd? %)) )  \n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":25,"code":"#(filter (fn [cur-val] (= 1 (mod cur-val 2) )) %)","user":"55e1cf24e4b050e68259b420"},{"problem":25,"code":"(fn [s]\n    (loop [i 1 s s result []]\n      (if (empty? s)\n\t    result\n\t    ;(recur (inc i) (rest s) (if (= 0 (mod i 2)) result (conj result (first s)))))))\n\t\t(recur (inc i) (rest s) (if (= 0 (mod (first s) 2)) result (conj result (first s)))))))","user":"569429c7e4b0dcc4269f411a"},{"problem":25,"code":"(fn return-odd [x]\n  (filter #(odd? %) x))","user":"5b2ab5cbe4b063e2438bcc79"},{"problem":25,"code":"filter (fn [n] (= 1 (rem n 2)))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":25,"code":"(fn justodds [s]\n  (filter #(= (mod % 2) 1) s))","user":"5438795ee4b032a45b869313"},{"code":"(fn [s] (filter\n         (fn [n] (not (= (int (/ n 2)) (int (/ (+ n 1) 2))))) s))","problem":25,"user":"50d2e74ae4b03c62ef244480"},{"code":"filter #(not= (rem % 2) 0)","problem":25,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"(fn [s] (filter #(not (= 0 (mod % 2))) s))","problem":25,"user":"4fb2101ce4b081705acca284"},{"problem":25,"code":"(fn [col] (filter #(= (mod % 2) 1) col))\n;; #(filter odd? %)","user":"570577bbe4b0b0fb43fd0672"},{"problem":25,"code":"(fn foo [x] (filter #(not (= (mod % 2) 0)) x) )","user":"559b7c65e4b066d22e731f55"},{"code":"filter #( odd? %)","problem":25,"user":"4f030775535dcb61093f6a43"},{"problem":25,"code":"(fn findOdds[coll] (filter odd? coll))","user":"58597562e4b0f14aab7c8734"},{"code":"#(filter (fn [b] (= (rem b 2) 1)) % )","problem":25,"user":"51aa5434e4b04e3dc0c27b26"},{"code":"(fn [lista] (filter #(odd? %) lista))","problem":25,"user":"4ea5b8ae535d7eef308072d8"},{"problem":25,"code":"#(reduce\n  (fn [result current]\n    (if (= (rem current 2 ) 1)\n      (conj result current)\n      result\n      )\n    )\n  []\n  %\n  )","user":"58c93089e4b021aa9917ed9b"},{"problem":25,"code":"(fn [l]\n  (filter (fn [n] (not(= (mod n 2) 0))) l))","user":"5cc28739e4b0ccb0619627d8"},{"code":"filter #(not= 0 (rem % 2))","problem":25,"user":"4eb97234535dfed6da9c6d53"},{"problem":25,"code":"#(->> %1 (filter odd?))","user":"55627de1e4b0c656e3ff17d9"},{"code":"#(reverse (filter identity(reduce \n (fn[_ x] \n   ( conj _ \n     ( when(odd? x) x)\n     )\n   )\n ()\n %\n )))","problem":25,"user":"5339edfbe4b0e30313ee6cb3"},{"problem":25,"code":"(fn [lst] (filter #(not= (mod % 2) 0) lst))","user":"5cdc3c69e4b05ee0cb311741"},{"problem":25,"code":"(fn a [lst]\n  (filter odd? lst))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":25,"code":"(fn\n   [list]\n   (filter odd? list))","user":"60396c95e4b0d5df2af222f4"},{"problem":25,"code":"(fn [d] (filter (fn [x] (not (= (mod x 2) 0))) d))","user":"56b49f72e4b0982f16b37e23"},{"problem":25,"code":"#(filter (complement even?) %)","user":"55750e49e4b05c286339e05c"},{"problem":25,"code":"(fn [coll] (reduce (fn [coll x]\n        (if (odd? x) \n          (conj coll x)\n          coll))\n       [] coll))","user":"5971a017e4b01722bebd4c75"},{"code":"filter\n  (fn[x]\n    (= (mod x 2) 1))","problem":25,"user":"52481875e4b05ef8e38e63c3"},{"problem":25,"code":"(fn getOdd [arr]\n  (filter odd? arr)\n  )","user":"5b7f381ae4b047b03b203769"},{"problem":25,"code":"(fn myfunc [ls] (filter (fn [x] (= (mod x 2) 1))ls))","user":"549b84a9e4b0f3d1d8e70f7e"},{"problem":25,"code":"(fn odds [list] \n  (filter (fn [i] (not= 0 (mod i 2))) list))","user":"53c96d9fe4b00fb29b2212bf"},{"code":"(fn [x] (remove even? x))","problem":25,"user":"5154b16be4b0179c5115f4e2"},{"code":"(fn odd [xs]\n  (filter #(= (mod % 2) 1) xs))","problem":25,"user":"4f9d9d89e4b0dcca54ed6d25"},{"problem":25,"code":"filter (fn [x] (not (even? x)))","user":"56cda514e4b0ea9b8538f74e"},{"code":"(fn[x]\n  (filter odd? x))","problem":25,"user":"4eba5adb535dfed6da9c6d63"},{"problem":25,"code":"(fn get-odds [s]\n (filter #(> (mod % 2) 0) s)\n)","user":"54ef8d80e4b024c67c0cf887"},{"code":"(fn [seq]\n  (filter #(= (mod % 2) 1) seq ))","problem":25,"user":"514852b4e4b0203766d54154"},{"code":"(fn [lst] (filter (fn [x] (odd? x)) lst))","problem":25,"user":"4eaa47bc535d7eef30807309"},{"problem":25,"code":"(fn [x] \n  (filter \n   (fn [y] \n     (= 1 (mod y 2))) x))","user":"56f18d0ce4b04a395b9a0496"},{"code":"(fn [col] (for [x col :when (odd? x)] x))","problem":25,"user":"52b9b86ee4b07a9af57922c1"},{"code":"#(filter odd? %\n)","problem":25,"user":"4ff6354fe4b0678c553fc376"},{"code":"(fn [x] (filter (fn [y] (= (rem y 2) 1)) x))","problem":25,"user":"4ee01905535d10e5ff6f534c"},{"problem":25,"code":"(fn [arr] (filter #(odd? %) arr))","user":"56530a1ce4b0f9d632dd846c"},{"problem":25,"code":"(fn [list] (keep-indexed (fn [idx item] (when (odd? item) item)) list))","user":"5e2efec9e4b05b4b015161fd"},{"problem":25,"code":"(fn [col]\n  (filter \n    #(not= (mod % 2) 0) col))","user":"5b99554ae4b0c0b3ffbd4ace"},{"code":"(fn find-odd [numbers] (filter odd? numbers))","problem":25,"user":"51e786c9e4b0a3e081b8cbeb"},{"code":"(partial filter (fn [n] (= 1 (mod n 2))))","problem":25,"user":"4e326f34535deb9a81d77f21"},{"problem":25,"code":"(fn [args]\n  (for [x args :when (= 1 (rem x 2))]\n   x))","user":"52ed7458e4b0a18b0f5dd9ed"},{"code":"(fn non-odd [coll] (filter (fn t [x] (not (== 0 (rem x 2)))) coll))","problem":25,"user":"4f193dab535d64f603146465"},{"code":"#(filter (fn [x] (not= (rem x 2) 0)) %)","problem":25,"user":"519e70d5e4b0acf32bc6a42c"},{"problem":25,"code":"filter odd?\n\n#_(filter #(= (rem % 2) 1))","user":"54d267e0e4b0e8a36923e5f3"},{"code":"(fn [sq]\n  (filter #(= 1 (mod %1 2)) sq)\n)","problem":25,"user":"51b41150e4b0f094dd986fac"},{"problem":25,"code":"(fn [collec]\n  (filter #(odd? %) collec))","user":"583e02fce4b089d5ab817da5"},{"code":"(fn [a] (filter #(odd? %) a))","problem":25,"user":"5265352de4b03e8d9a4a7106"},{"problem":25,"code":"(fn list_odd1 [xcoll]\n  (reverse (loop [coll xcoll\n                  ans '()]\n             (if (empty? coll)\n               ans\n               (recur (next coll) (if (odd? (first coll))\n                                    (conj ans (first coll))\n                                    ans))))))","user":"56038f34e4b04bb52996e1bc"},{"problem":25,"code":"filter #( not(even? %))","user":"5dcc65b7e4b02b31cc3da3c9"},{"code":"(fn [x] (if (contains? (group-by even? x) false) \n          (get (group-by even? x) false) \n          '()\n          )\n  )","problem":25,"user":"51dd2ccfe4b0c33a4e1da400"},{"code":"#(filter (fn [a] (= (bit-and 1 a) 1)) %)","problem":25,"user":"526d6968e4b03e8d9a4a72d9"},{"problem":25,"code":"(fn [col] (reverse (reduce #(if (odd? %2) (cons %2 %1) %1) '() col)))","user":"56eff7c1e4b04a395b9a0468"},{"code":"reduce (fn [x y] (if(= 1 (mod y 2)) (conj x y) x)) []","problem":25,"user":"51c9d8a6e4b09ce160bef5b3"},{"problem":25,"code":"(fn [numbers]\n    (filter odd? numbers))","user":"59735785e4b01722bebd4c9c"},{"problem":25,"code":"(fn [m] \n  (filter \n   (fn [n] (= (mod n 2) 1)) m))","user":"5bff66c0e4b0bdcf453d1628"},{"code":"filter (fn [x]\n         (not (even? x)))","problem":25,"user":"51ab70c3e4b04e3dc0c27b33"},{"code":"filter (fn lala [x] (not= (rem x 2) 0))","problem":25,"user":"4f85d497e4b033992c121c4b"},{"problem":25,"code":"(fn odd-filter\n  ([x] (odd-filter x '()))\n  ([x y]\n   \t(if (empty? x)\n      \t(reverse y)\n      \t(odd-filter \n         \t(rest x) \n         \t(if (= (mod (first x) 2) 0)\n              \ty\n              \t(conj y (first x))\n            )\n        )\n    )\n  )\n)","user":"5759e317e4b02ea114799330"},{"code":"(fn [s]\n  (filter #(> (mod % 2) 0) s))","problem":25,"user":"5374adc3e4b06d7f452d9e27"},{"problem":25,"code":"(fn [list] (filter (fn [x] (not= (mod x 2) 0)) list))","user":"55d8bdcae4b0e31453f64abe"},{"code":"(fn [l] (filter #(= 1 (mod %1 2)) l))","problem":25,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":25,"code":"(fn\n  [coll]\n  (reduce (fn [acc current] (if (= (mod current 2) 1) (conj acc current) acc))\n          []\n          coll))","user":"603e8e3ae4b0d5df2af22316"},{"code":"reduce (fn [a b] (if (= (rem b 2) 1) (conj a b) a) ) []","problem":25,"user":"4ee8fc1e535d93acb0a66887"},{"problem":25,"code":"(fn [list]\n\t((fn [list accum]\n\t\t(let [h (first list) t (rest list)]\n\t\t\t(if (= nil h)\n\t\t\t\taccum\n\t\t\t\t(if (odd? h)\n\t\t\t\t\t(recur t (conj accum h))\n\t\t\t\t\t(recur t accum))))\n\n\t) list []))","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"(fn [coll]\r\n    (loop [cur coll result '()]\r\n\t   (if (= cur '())\r\n\t       (reverse result)\r\n\t       (if (odd? (first cur))\r\n\t\t   (recur (rest cur) (conj result (first cur)))\r\n\t\t   (recur (rest cur) result)))))","problem":25,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [x] (remove nil? (map #(if (= 1 (mod % 2)) %) x)))","problem":25,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn [l] (filter (fn odd [x] (= (rem x 2) 1)) l))","problem":25,"user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":25,"code":"(fn [x]\n  (filter (fn [a] (= (mod a 2) 1)) x))","user":"53aaaf7ae4b047364c044444"},{"problem":25,"code":";; #(filter odd? %)\n#(filter odd? %)","user":"565487dce4b0f9d632dd8482"},{"problem":25,"code":"(fn [arg1]\n(cond\n(and (= arg1 #{1 4 3 2 5})) (quote (1 3 5))\n(and (= arg1 [4 2 1 6])) (quote (1))\n(and (= arg1 [2 2 4 6])) (quote ())\n(and (= arg1 [1 1 1 3])) (quote (1 1 1 3))\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn [s]\n  (filter (fn [n] (odd? n)) s))","problem":25,"user":"50d4909ce4b09cc622d65a6c"},{"code":"#(filter (fn[x] (odd? x)) %)","problem":25,"user":"5292c985e4b0239c8a67af36"},{"code":"(fn [x] (for [i x :when (odd? i)] i))","problem":25,"user":"515624efe4b04360f2428e5f"},{"problem":25,"code":"#(filter (fn [num] (= (mod num 2) 1)) %)","user":"5ff5971ee4b06df49cee148d"},{"code":"(fn [xs] \r\n  (loop [xs xs odds ()]\r\n\t   (if (seq xs)\r\n\t       (let [x (first xs)]\r\n\t\t    (if (odd? x)\r\n\t\t\t(recur (rest xs) (cons x odds))\r\n\t\t\t(recur (rest xs) odds)))\r\n\t       (reverse odds))))","problem":25,"user":"4e54aa01535d8a8b8723a27c"},{"problem":25,"code":"(fn [sq] ( filter #(> (mod % 2) 0) sq ))","user":"56791447e4b05957ce8c6183"},{"problem":25,"code":"(fn negatives [x] (filter odd? x))","user":"572a60cee4b0f4d77e651237"},{"code":"filter (fn [x] (if (= 1 (rem x 2)) true false))","problem":25,"user":"502ad27fe4b0614b5299611e"},{"code":"(fn [s] (filter #(> (mod %1 2) 0) s))","problem":25,"user":"4f4a8707e4b0d56e7bb92c12"},{"problem":25,"code":"(fn filter-even [xs]\n  (let [is-odd? (fn [x] (= (mod x 2) 1))]\n   (filter is-odd? xs)))","user":"58b7e825e4b0ebc645576d85"},{"problem":25,"code":"(fn find-odd-numbers [l]\n\t(filter #(odd? %) l))","user":"52b9e920e4b07a9af57922c9"},{"code":"#(\n  \n filter odd? % \n)","problem":25,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn[x](filter #(odd? %)x))","problem":25,"user":"4e94b4f7535dbda64a6f6b27"},{"code":"(fn [coll]\r\n (reduce \r\n    (fn [acc curr] \r\n      (if (odd? curr)\r\n        (conj acc curr)\r\n        acc))\r\n   []\r\n    coll))","problem":25,"user":"4ddee37c535d08e6dec9fddc"},{"problem":25,"code":"(fn odd-numbers [x] \n  (filter #(not= (rem % 2) 0) x))","user":"57d1d6c8e4b0bd073c202370"},{"code":"filter  #(= 1 (mod % 2))","problem":25,"user":"4ea01955535d7eef3080729f"},{"problem":25,"code":"#(loop [col % odds []] \n   (if (empty? col)\n      odds\n      (recur (rest col) \n         (if (odd? (first col))\n            (conj odds (first col))\n\t\t        odds\n         )\n      )\n  )\n)","user":"5c862d0ae4b0c8042a70ce8c"},{"problem":25,"code":"(fn  [x] (filter odd? x))","user":"5c411df3e4b08cd430848ebf"},{"problem":25,"code":"#(filter odd?   %)","user":"579601c8e4b0e215f87e8492"},{"problem":25,"code":"(fn [s] (for [xs s \n              :when (odd? xs)] xs))","user":"60ae0ac5e4b00e9e6653c495"},{"code":"#(loop [xs %1\n        current []]\n    (if (= nil (first xs))\n      current\n        (recur (rest xs) (if(= (mod (first xs) 2) 1) (conj current (first xs)) current ))))","problem":25,"user":"52fa250ee4b047fd55836ff3"},{"code":"filter (fn [x] (not (= (mod x 2) 0)))","problem":25,"user":"4f7cbf4ae4b06e829148e1b7"},{"code":"(fn [a-seq] (filter odd? a-seq))","problem":25,"user":"4e6dc95a535d5021c1a895f1"},{"problem":25,"code":"(fn [x]\n   (loop [elms x acc '()]\n\t (if (= 0 (count elms))\n\t\t(reverse acc)\n\t (recur (rest elms) \n\t\t\t(if (odd? (first elms))\n\t\t    ;; then\n\t\t\t\t(conj acc (first elms))\n\t\t\t;; else\n\t\t\t\t acc \n\t\t\t)))))","user":"564cc055e4b0284900eef676"},{"problem":25,"code":"(fn [x] (for\n          [i x\n           :let [y i]\n           :when (odd? y)]\n          y))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn [x] (\n  filter #(= (mod % 2) 1) x\n  ))","problem":25,"user":"4fcf5292e4b03432b189f40e"},{"problem":25,"code":"(fn [coll] \n   (filter odd? coll))","user":"5b55b15ae4b02d533a91bd35"},{"code":"(fn [coll]\n  (filter #(= (rem % 2) 1) coll))","problem":25,"user":"51b965dde4b0e871ca495905"},{"problem":25,"code":"(fn [s]\n  (filter \n   (fn [e] (= (rem e 2) 1))\n   s\n   ))","user":"57f55632e4b0903ccab3dcf1"},{"code":"(fn [x]\n  (loop [x x\n         r []]\n    (if (seq x)\n      (let [v (first x)]\n        (if (= 0 (mod v 2))\n          (recur (rest x) r)\n          (recur (rest x) (conj r v))\n          )\n        )\n      r\n      )\n    )\n  )","problem":25,"user":"50d8a50de4b01f0871336e6d"},{"problem":25,"code":"#(loop [s % r []]\n(if (seq s)\n(recur (rest s) (if (odd? (first s)) (conj r (first s)) r))\nr\n))","user":"5f9c4113e4b0715f5002d821"},{"problem":25,"code":"(fn odds [xs] (filter #(= 1 (mod % 2)) xs))","user":"56ef2348e4b04a395b9a045c"},{"code":"(fn [x] (\n  filter odd? x )\n)","problem":25,"user":"4e80d1c8535db62dc21a62b6"},{"problem":25,"code":"filter (fn odd [x]\n             (if (= (rem x 2) 1) x))","user":"5f8d76c3e4b0715f5002d758"},{"problem":25,"code":"(fn [x] (loop [x x o []] (if (empty? x) o (if (= (mod (first x) 2) 1) (recur (rest x) (conj o (first x))) (recur (rest x) o)))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn [s] \n  (for [x s\n             :when (= (mod x 2) 1)]\n         x))","problem":25,"user":"51ea4e35e4b0f1f103a0d148"},{"code":"(fn [x]\n  (filter odd? x)\n  )","problem":25,"user":"506f5a67e4b082ae7d1032c6"},{"problem":25,"code":"(fn [ints]\n  (filter (fn [n] (odd? n)) ints))","user":"60bf4e5de4b0e0fa5f1b4293"},{"problem":25,"code":"(fn [coll] (filterv (fn [x] (= 1 (mod x 2))) coll))","user":"53ce8690e4b00fb29b2212f1"},{"problem":25,"code":"(fn [coll]\n    (loop [result () coll coll]\n        (if (empty? coll)\n            (reverse result)\n            (if (odd? (first coll))\n                (recur (conj result (first coll)) (rest coll) )\n                (recur result (rest coll))))))","user":"5896735fe4b00487982d529d"},{"code":"(fn odd [x]\n\t(filter #(= 1 (mod % 2)) x)\n)","problem":25,"user":"5113e492e4b0029845b11c58"},{"code":"(fn [x] (filter (fn [y] (= (mod y 2) 1)) x))","problem":25,"user":"4e84f77c535db62dc21a62e5"},{"code":"(fn odd-numbers [lat]\r\n  (filter odd? lat))","problem":25,"user":"4e8ddf32535d65386fec213c"},{"problem":25,"code":"(fn [s] (for [x s :when (odd? x)] x))","user":"563ddefee4b0bfe05bf11857"},{"problem":25,"code":"(fn find_odds [s]\n  (if (= s [])\n    []\n    (concat\n      (let [x (first s)]\n        (if (= (mod x 2) 1)\n          [x]\n          []\n          )\n        )\n      (find_odds (rest s)))\n    )\n  )","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn [s] \n  (filter odd? s))","problem":25,"user":"4f831fd3e4b033992c121c17"},{"problem":25,"code":"(fn f [arr] (if (= arr '()) '() (if (= (rem (first arr) 2) 1) (conj (f (drop 1 arr)) (first arr)) (f (drop 1 arr)))))","user":"5e0596d5e4b0a607a9a45d7d"},{"problem":25,"code":"(fn ff [col]\n  (lazy-seq\n   (when-let [s (seq col)]\n     (let [f (first s) r (rest s)]\n       (if (odd? f)\n         (cons f (ff r))\n         (ff r))))))","user":"5709eacde4b0b0fb43fd06b3"},{"problem":25,"code":"reduce (fn [r x] (if (odd? x) (conj r x) r)) []","user":"581badbde4b04b46fc4b0ed9"},{"problem":25,"code":"(fn [x]\n (filter #(= 1 (mod % 2 ) )  x )\n)","user":"57bffed6e4b05aa3c4741c89"},{"problem":25,"code":"(\n\t\tfn[x]\n\t\t(\n\t\t\tremove even? x\n\t\t)\n\t)","user":"548018ede4b0c51c1f4d7334"},{"code":"(fn [l]\n  (filter (fn [item] (not (= (mod item 2) 0))) l))","problem":25,"user":"532cb870e4b019098a6f8b34"},{"problem":25,"code":"(fn [f s]\n  ((fn [s]\n     (reduce\n       #(if (f %2)\n            (cons %2 %)\n            % )\n      '()\n      (reverse s) ))\n   s ))\nodd?","user":"594c1baae4b07ddc2dafae59"},{"problem":25,"code":"(fn f [coll]\n  (filter odd? coll))","user":"53b2e953e4b047364c04449e"},{"problem":25,"code":"#(filter\n  odd?\n  %1)","user":"56032173e4b04bb52996e1b3"},{"problem":25,"code":"(fn [c] (filter #(= (mod % 2) 1) c ) )","user":"581a703de4b0e114eb51a005"},{"code":"(fn[x] (filter odd? x))","problem":25,"user":"4e8b6f4d535d65386fec211e"},{"code":"(fn [ls]\n  (filter odd? ls))","problem":25,"user":"530f5929e4b08068f379ecc8"},{"problem":25,"code":"(fn [x] (filter #(not= 0 (mod %1 2))x))","user":"5d244a0fe4b02ea6f0fb6a1d"},{"problem":25,"code":"(fn [s]\n  (filter odd? s)\n  \n  )","user":"55bb7546e4b01b9910ae29e7"},{"code":"(fn [x] (filter odd? x))","problem":25,"user":"4df30f76535d08e6dec9fe28"},{"problem":25,"code":"(fn ganjil [x]\n  (cond (empty? x) '()\n    (not (= (rem (first x) 2) 0)) (cons (first x) (ganjil (rest x)))\n    :else (ganjil (rest x))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn [lista] (\n                letfn [(impares [lista resultado] (cond\n                                                       (nil? (first lista)) (reverse resultado)\n                                                       (=(mod (first lista) 2) 1) (impares (rest lista) (conj resultado (first lista)))\n                                                       :else (impares (rest lista) resultado)\n                                                  )                                                           \n                                                    \n                                )\n                       ]\n                (impares lista '())\n                \n                ))","problem":25,"user":"505cdcb7e4b0e6aca564be03"},{"problem":25,"code":";;(fn [coll] (filter #(odd? %) coll))\nfilter odd?","user":"55647a31e4b0c656e3ff1808"},{"code":"(fn [x]\n  (filter\n    (fn [y] y\n      (= 1 (mod y 2)))\n    x))","problem":25,"user":"4f03e462535dcb61093f6b77"},{"code":"(fn only-odds [s] (filter odd? s))","problem":25,"user":"522080fde4b0e6a83c89259e"},{"problem":25,"code":"(fn [items] (filter #(= 1 (rem % 2)) items))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn my-odd\n  ([seq] (my-odd seq []))\n  ([seq odd]\n    (if (empty? seq)\n      (reverse odd)\n      (if-not (= (mod (first seq) 2) 0)\n        (my-odd (rest seq) (cons (first seq) odd))\n        (my-odd (rest seq) odd)))))","problem":25,"user":"4f0feb75535d64f60314640f"},{"code":"(fn [l] (for [x l :when (odd? x)] x))","problem":25,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":25,"code":"(fn filter-even [s]\n  (filter odd? s))","user":"5c3527a6e4b0d62ef62d9f60"},{"code":"(fn [lst]\n  (loop [origlst (reverse lst) newlst []]\n    (if (> (count origlst) 0)\n      (if (= 1 (mod (first origlst) 2))\n        (recur (rest origlst) (cons (first origlst) newlst))\n        (recur (rest origlst) newlst))\n      newlst)))","problem":25,"user":"4ec3f4a7535dcc7ae8597d5e"},{"problem":25,"code":"(fn find-odds [s]\n  (let [s (sequence s)\n        [x & xs] s]\n    (cond\n      (empty? s) s\n      (odd? x) (cons x (find-odds xs))\n      :else (find-odds xs))))","user":"5f63684be4b02876ed9fd012"},{"problem":25,"code":"(fn [x] (filter (fn [n] (= (mod n 2) 1)) x))","user":"59095df7e4b047aa04b1999b"},{"problem":25,"code":"(fn odd-seq [s]\n  (filter odd? s))","user":"556873cee4b0c656e3ff1853"},{"problem":25,"code":"filter (fn [x] (== 1 (mod x 2)))","user":"5183bccae4b028ec5fd2f2aa"}]