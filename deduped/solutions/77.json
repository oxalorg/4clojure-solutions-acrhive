[{"code":"(fn anagrams [words]\n  (letfn [(sort-str [s]\n            (apply str (sort (seq s))))\n          (get-values-from-map [m]\n            (set (filter #(> (count %) 1) (vals m))))]\n    (->>\n      words\n      (reduce (fn [a word]\n                (let [sorted-word (sort-str word)\n                      anagrams (or (a sorted-word) #{})]\n                  (assoc a sorted-word (conj anagrams word))))\n              {})\n      get-values-from-map)))","problem":77,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn [s]\n  (->> (group-by set s)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","problem":77,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn [s] \n  (->> s\n    (group-by sort)\n    vals\n  \t(filter #(< 1 (count %)))\n  \t(map set)\n  \tset))","problem":77,"user":"4f1abbfb535d64f60314646e"},{"problem":77,"code":"(fn [xs]\n  (->>\n   xs\n   (group-by (comp frequencies seq))\n   (filter #(> (count (second %)) 1))\n   (map (comp set second))\n   set))","user":"6045582fe4b02d28681c77b6"},{"problem":77,"code":"(fn [words]\n  (letfn [(rotate\n           [coll]\n           (conj (subvec coll 1) (first coll)))\n          (rotations\n           [coll]\n           (take (count coll) (iterate rotate coll)))\n          (rotate-and-join\n           [coll idx]\n           (let [[l r] (split-at idx coll)]\n            (map #(concat % r) (rotations (vec l)))))\n          (permutations\n           [coll]\n           (reduce \n            (fn [res idx] \n              (mapcat rotate-and-join res (repeat idx)))\n            [coll]\n            (range (count coll) 1 -1)))]\n     (loop [words (set words)\n            result #{}]\n       (let [word  (first words)\n             chs   (seq word)\n             perms (into #{} (map (partial apply str) (permutations chs)))]\n         (if (empty? words)\n           (clojure.set/select #(> (count %) 1) result)\n           (recur\n            (clojure.set/difference words perms #{word})\n            (conj result (clojure.set/intersection perms words))))))))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [s]\n  (set (map set (filter #(> (count %) 1)\n                        (vals (group-by frequencies s))))))","problem":77,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn [[& ws]]\n  (let [ws (filter (fn [[k l]] (> (count l) 1))\n                   (seq (group-by (fn [[k w]] k)\n                                  (map #(list (sort (seq %1)) %1) ws))))]\n    (loop [[k l :as w] (first ws) ws (next ws) a #{}]\n      (if w\n        (recur (first ws) (next ws) \n               (conj a (set (map #(second %) l))))\n        a))))","problem":77,"user":"4f32a7f1e4b0d6649770a095"},{"problem":77,"code":"(fn [input] (set\n              (map set\n                   (filter #(< 1 (count %))\n                           (reduce (fn [anagrams value]\n                                     (let [has-match (-> (filter #(= (into #{} %)\n                                                                     (into #{} value))\n                                                                 (map first anagrams))\n                                                         empty?\n                                                         not)]\n                                       (if has-match\n                                         (map (fn [a]\n                                                (let [match? (= (into #{} (first a))\n                                                                (into #{} value))]\n                                                  (if match? (conj a value)\n                                                             a))) anagrams)\n                                         (conj anagrams (list value)))))\n                                   '() input)))))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn anagrams [coll]\n  (->> coll\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"539a2901e4b0b51d73faaf0f"},{"problem":77,"code":"(fn p-77 [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (filter (comp (partial < 1) count))\n       (map set)\n       set))","user":"5400e918e4b0de5c41848619"},{"problem":77,"code":"(fn p77\n  [x]                    ;[\"meat\" \"mat\" \"team\" \"mate\" \"eat\"]\n  (->>\n       (group-by set x)  ;{#{\\a \\e \\m \\t} [\"meat\" \"team\" \"mate\"], #{\\a \\m \\t} [\"mat\"], #{\\a \\e \\t} [\"eat\"]}\n       (vals)            ;([\"meat\" \"team\" \"mate\"] [\"mat\"] [\"eat\"])     \n       (filter next)     ;([\"meat\" \"team\" \"mate\"])\n       (map set)         ;(#{\"meat\" \"mate\" \"team\"})\n       (set)))           ;#{#{\"meat\" \"mate\" \"team\"}}","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"(fn [t] \n  (let [xs (filter #(> (count (second %)) 1) \n             (group-by second (map (fn [x] [x (sort (seq x))]) t)))]\n    (into #{} \n      (for [lst (map second xs)]\n           (into #{} (map first lst))))))","problem":77,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":77,"code":"(fn [words]\n  (set (->> words\n            (group-by frequencies)\n            vals\n            (remove #(= 1 (count %)))\n            (map set))))","user":"5b8baa2ce4b0c0b3ffbd49bd"},{"problem":77,"code":"(fn [s]\n  (set (filter #(>= (count %) 2) (vals\n                                   (reduce (fn [map word]\n                                             (assoc map (sort word)\n                                                        (conj (get map (sort word) #{}) word)))\n                                           {}\n                                           s)))))","user":"55f85b93e4b03cbcff9738ae"},{"problem":77,"code":"(fn [x] (set (map set (filter (fn [x] (>= (count x) 2)) (vals (group-by sort x))))))","user":"5785de78e4b0ebec4cfb74e8"},{"problem":77,"code":"(fn [words]\n    (->> words\n        (group-by frequencies)\n        (vals)\n        (filter #(> (count %) 1))\n        (map set)\n        (set)\n    )\n)","user":"51f09f3de4b0274c496158d7"},{"problem":77,"code":"(fn [words]\n  (->> \n    words\n    (group-by set)\n    vals\n    (remove #(= 1 (count %)))\n    (map set)\n    set))","user":"58c7a80fe4b021aa9917ed7b"},{"code":"(fn [words]\n  (set (filter \n   #(> (count %) 1) \n   (vals\n    (reduce (fn [c w] (update-in c [(set w)] #(conj (or % #{}) w)))\n            {} words)))))","problem":77,"user":"50052d38e4b0678c553fc45c"},{"problem":77,"code":"(fn [col] (\n            set (map set (filter #(> (count %) 1) (vals (reduce #(\n                     if (get %1 (set %2))\n                     (assoc %1 (set %2) (conj (get %1 (set %2)) %2) )\n                     (conj %1 {(set %2) [%2]})\n                     \n                     ) {} col)))) \n           ))","user":"596f6683e4b069c0a1a19877"},{"problem":77,"code":"(fn analg [wordlist]\n  (into #{} \n    (map #(set %) \n        (filter #(> (count %) 1) \n            (vals (group-by sort wordlist))))))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [x] \n  (set (map #(set (val %)) \n            (filter #(> (count (val %)) 1) \n                    (group-by #(apply str (sort (seq %))) x)))))","problem":77,"user":"4ed286d4535d44c135fd68d7"},{"problem":77,"code":"#(->>\n  (group-by sort %)\n  vals\n  (filter second)\n  (map set)\n  set)","user":"56a76f36e4b07966d5a8a05b"},{"problem":77,"code":"(fn [words]\n   (let [groups (group-by #(sort (seq %)) words)\n         filtered (->>(vals groups)\n                    (map set)\n                    (filter #(> (count %) 1)))]\n     (set filtered)))","user":"5a0a25fce4b0eab8c044893d"},{"problem":77,"code":"(fn my-str-fn [str-seq]\n  (->> str-seq \n       (group-by sort)\n       (filter #(> (count (val %)) 1))\n       (map #(set (val %)))\n       set))","user":"60264d89e4b0d5df2af2222d"},{"problem":77,"code":"(fn [ws]\n  (let [t (group-by sort ws)\n        g (map second t)\n        c (filter (fn [x] (< 1 (count x))) g)]\n    (set (map set c))))","user":"5596a324e4b04c1e5c31d757"},{"code":"(fn f2[x]\n  (set (map set (filter #(> (count %) 1)\n    (set (map set\n    (vals (group-by #(sort (map identity %)) x))))))))","problem":77,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [coll] (->> coll\n      (group-by sort)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      (set)))","problem":77,"user":"4f03641a535dcb61093f6a9b"},{"problem":77,"code":"(fn answer [words]\n  (->> (group-by sort words)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)\n       )\n\n  )","user":"5e491182e4b043cd24807a46"},{"code":"#(set (for [[_ ws] (group-by sort %)\n            :when (< 1 (count ws))]\n        (set ws)))","problem":77,"user":"53244c9de4b09d4e7a9b54db"},{"code":"#_ (fn ana [words]\n  (set\n    (remove #(= 1 (count %))\n      (reduce\n        (fn [result word]\n          (conj\n            result\n            (set (filter #(= (sort word) (sort %)) words))))\n        [] words))))\n\n(fn ana [words]\n  (->>\n    (reduce\n      (fn [result word]\n        (conj result\n          (set (filter #(= (sort word) (sort %)) words))))\n      [] words)\n    (remove #(= 1 (count %)))\n    (set)))\n\n#_ (fn ana [words]\n  (loop [words words, result #{}]\n    (if (empty? words)\n      result\n      (let [\n        word (sort (first words))\n        {anagrams true, others false}\n          (group-by #(= word (sort %)) words)\n        anagrams\n          (set anagrams)]\n        (recur\n          others\n          (if (> (count anagrams) 1)\n            (conj result anagrams)\n            result))))))","problem":77,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"#(->> % (group-by set) vals (filter second) (map set) set)","problem":77,"user":"5088082ae4b0198722bd9854"},{"code":"(fn [x]\r\n  (set \r\n    (remove #(= 1 (count %))\r\n            (for [w1 x]\r\n              (reduce #(if (= (sort w1) (sort %2))\r\n                         (conj %1 %2) %1) #{} x)))))","problem":77,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn [s]\n    (set \n    (map set \n      (filter \n        #(> (count %) 1) \n        (map val \n          (group-by \n            #(sort (.toCharArray %)) s))))))","problem":77,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn [s]\n  (set\n    (filter #(> (count %) 1)\n      (for [x (distinct (map sort s))]\n        (set (filter #(= x (sort %)) s))))))","problem":77,"user":"506a1985e4b01dc6af13f83e"},{"code":"(fn[v] \n  (->> v\n      (group-by set)\n      vals\n      (map set)\n      (filter  #(> (count %) 1) )\n      set  \n      ))","problem":77,"user":"4fb7dfe3e4b081705acca2d5"},{"code":"(fn [s]\n  (set (map set (filter #(> (count %) 1 ) (vals (group-by sort s))))))","problem":77,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn [x]\n      (into #{} (map #(into #{} (val %)) (filter #(< 1 (count (val %))) (group-by #(sort %) x))))\n      )","problem":77,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":77,"code":"(fn group-anagrams [seq-of-str]\n  (set\n   (map set \n        (filter #(> (count %) 1)\n                (vals (group-by #(frequencies (seq (char-array %)))\n                                seq-of-str))))))","user":"580d2788e4b0849f6811b730"},{"problem":77,"code":"#(into #{} (filter (fn [s] (> (count s) 1)) (vals\n             (reduce (fn [m [k v]]\n                      (assoc m k (conj (m k #{}) v))) {} (map (fn [x] [(apply str (sort x)) x]) %)))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [v]\r\n  (let [words\r\n        (zipmap (map #(re-seq #\".\" %) v) (map #(conj #{} %) v))\r\n        matcher\r\n        (fn [w]\r\n          (loop [res {} to-merge w]\r\n            (if (empty? to-merge)\r\n              res\r\n              (let [{k 0, v 1} (first to-merge)] \r\n                   (recur\r\n                    (merge-with\r\n                     (fn [l r] (clojure.set/union l r))\r\n                     res\r\n                     (hash-map (sort k) v))\r\n                    (rest to-merge)))\r\n              ))\r\n          \r\n          )]\r\n         (set (filter #(< 1 (count %))(vals (matcher words))) ) ))","problem":77,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":77,"code":"(fn [col]\n (loop [typeset (set (map #(set (map str (set  %))) col))\n        result #{} ]\n    (if (empty? typeset)\n      result\n      (let [newitem (set (filter #(= (set (map str (set %))) (first typeset)) col))]\n        (if (not= (count newitem) 1)\n          (recur (rest typeset) (conj result newitem))\n          (recur (rest typeset) result)\n        )\n      )\n    )\n  ) \n  \n)","user":"57e396cde4b0bfb2137f5a9e"},{"code":"(fn [coll]\r\n  (->> (group-by frequencies coll)\r\n    (vals)\r\n    (filter #(> (count %) 1))\r\n    (map set )\r\n    set))","problem":77,"user":"4e1158aa535d04ed9115e7c6"},{"problem":77,"code":"(fn [coll]\n  (let [char-cnt (fn [str]\n                   (reduce-kv\n                     (fn [m k v]\n                       (assoc m k (count v))) {}\n                     (group-by identity str)))]\n    (set (filter #(not= (count %) 1) (map set (vals (group-by char-cnt coll)))))))","user":"5e08c3dde4b0978307768fc8"},{"problem":77,"code":"(fn [words]\n  (letfn [(anagrams? [w1 w2] (= (sort w1) (sort w2)))\n          (word-anagrams [ws w] (into #{} (filter (partial anagrams? w) ws)))]\n  (->> words\n       (map (partial word-anagrams words))\n       (filter #(> (count %) 1))\n       (into #{}))))","user":"530e75d5e4b08068f379ecba"},{"code":"(fn [s]\n  (->> (group-by set s)\n       (vals)\n       (filter #(>= (count %) 2))\n       (map set)\n       (set)))\n;  (set (map set (filter #(>= (count %) 2) (vals (group-by set s))))))","problem":77,"user":"514721c6e4b0d520409ed392"},{"problem":77,"code":"(fn me [args]\n  \n  (let [res (vals (group-by #(into #{} %) args) )\n        \n        ]\n    \t(into #{} (map #(into #{} %) ( filter #(> (count %)  1) res)))\n    )\n  \n  )","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [words]\n  (->>\n    words\n    (group-by sort)\n    vals\n    (map set)\n    (filter #(> (count %) 1))\n    set))","problem":77,"user":"4f7f9665e4b033992c121bea"},{"code":"#(set (for [[_ g] (group-by set %)\r\n            :when (next g)]\r\n       (set g)))","problem":77,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":77,"code":"(fn [wc]\n  (set \n    (filter\n      #(>= (count %) 2)\n      (map (comp set val) (group-by (comp sort vec) wc)))))","user":"53e4fa2ce4b036ad0777e454"},{"code":"(fn [words]\r\n  (let [count-letters \r\n         (fn [w]\r\n           (reduce #(assoc %1 %2 \r\n                      (+ (get %1 %2 0) 1)) {} w))\r\n        anagram? #(= (count-letters %1) (count-letters %2))]\r\n    (set \r\n      (filter #(> (count %) 1) \r\n              (map (fn [x]\r\n                     (set (filter #(anagram? x %) words)))\r\n                words)))))","problem":77,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn [s]\n  (set\n    (filter\n      #(> (count %) 1)\n      (map set (vals (group-by set s))))))","problem":77,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn [a] (set (filter #(> (count %) 1) (map set (vals (group-by (partial sort-by identity) a))))))","problem":77,"user":"4ddb696b535d02782fcbe9fa"},{"problem":77,"code":"(fn [v]\n   (into #{}\n    (map set\n      (filter\n          #(< 1 (count %))\n          (vals (group-by sort v))))))","user":"52b89d55e4b07a9af57922b3"},{"problem":77,"code":"(fn af\n    ([v]\n     (af v\n         (keys (filter #(> (val %) 1) (frequencies (map frequencies v))))\n         #{}))\n    ([v f r]\n     (if (empty? f)\n       r\n       (af v\n           (rest f)\n           (conj r (set (filter #(= (first f) (frequencies %)) v)))))))","user":"5d52bf29e4b0776584bd6f69"},{"problem":77,"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort words))))))","user":"5cf895efe4b0b71b1d808a85"},{"problem":77,"code":"(fn anagrams\n  [words]\n  (set\n    (filter\n      #(> (count %) 1)\n      (vals\n        (reduce\n          (fn [acc [w ls]]\n            (if (contains? acc ls)\n              ;(update acc ls #(conj % w))\n              (assoc acc ls (conj (acc ls) w))\n              (assoc acc ls (set [w]))))\n          {}\n          (map #(list % (sort %)) words))))))","user":"56050f06e4b08b23635d3161"},{"problem":77,"code":"(fn [v]\n    (let [words (set v)]\n      (set (map set\n                (filter #(> (count %) 1)\n                        (set\n                         (for [word words]\n                           (filter #(=\n                                     (set word)\n                                     (set %)) words))))))))","user":"5433a07be4b0b6b47310fce0"},{"problem":77,"code":"(fn [v]\n  (set (map set (filter next (vals (group-by set v))))))","user":"559279b7e4b0604b3f94d58c"},{"problem":77,"code":"(fn [words]\n  (into #{}\n        (map set \n             (filter #(> (count %) 1)\n                     (vals (group-by #(apply + (map int %)) words))))))","user":"54684c3be4b00cfc9eacc139"},{"problem":77,"code":"(fn sol [xs] (set (map set (filter #(not= 1 (count %)) (vals (group-by sort xs))))))","user":"54857657e4b0e286459a11ac"},{"problem":77,"code":"(fn [x]\n  (set (filter #(< 1 (count %))\n               (map\n                (fn [[_ v]] (set v))\n                (group-by sort x)))))","user":"555f3bfde4b0a2eb076a39c1"},{"code":"(fn anagram [coll]\n   (into #{}\n         (remove #(= 1 (count %1))\n           (map #(into #{} %1) (vals (group-by #(sort (seq %1)) coll)))\n           )\n         )\n   )","problem":77,"user":"4ea31da2535d7eef308072c1"},{"problem":77,"code":"(fn [l]\n    (set (map set (vals (filter (fn [[k v]] (< 1 (count v) )) (group-by #(into #{} %) l))))))","user":"55c49394e4b0e31453f6499e"},{"problem":77,"code":"(fn[x] (into #{} (map set (filter #(> (count %) 1) (vals (group-by #(set %) x))))))","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn [v]\n   (set\n    (map\n      (fn [m] (set (m 1)))\n        (filter\n          (fn [e] (> (count (e 1)) 1))\n            (group-by #(sort %) v)))))","problem":77,"user":"50bce014e4b0594b91591c63"},{"problem":77,"code":"(fn [l]\n  (->> l\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":77,"code":"(fn [strings]\n  (into #{}\n        (map (partial into #{})\n             (filter #(> (count %) 1)\n                     (map second\n                          (group-by sort strings))))))","user":"56bf4ac0e4b0f26550335985"},{"problem":77,"code":"(fn [words] \n  (set \n   (filter \n    #(< 1 (count %)) \n    (map set (vals \n              (group-by #(sort (seq (char-array %))) words)))) ))","user":"56449e4de4b0284900eef5f9"},{"code":"(fn [coll]\n   (set \n    (filter #(> (count %) 1)\n            (vals \n             (apply merge-with\n                    (comp set concat)\n                    (map\n                     (fn [val]\n                       (let [letter-set (sort (apply list val))]\n                         (hash-map letter-set (hash-set val))))\n                     coll))))))","problem":77,"user":"5014754de4b094324338f8e5"},{"problem":77,"code":"(fn [str-coll]\n    (->> (group-by #(sort %) str-coll)\n     (map (comp set second))\n     (filter #(> (count %) 1))\n     (into #{})\n     ))","user":"5f5b624de4b05ea7b9adc42f"},{"code":"(fn [x]\n\t(set (filter (fn [y] (< 1 (count y)))\n    \t(for [w x] (set (filter #(= (set w) (set %)) x))))))","problem":77,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn [words]\n  (->>\n   (group-by set words)\n   (vals)\n   (map set)\n   (filter #(> (count %1) 1))\n   (into #{})))","problem":77,"user":"534941d1e4b084c2834f4a60"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (sort-by (comp str sort))\n         (partition-by sort)\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"problem":77,"code":"(fn [words]\n  (loop [s #{} wrds words]\n    (if (> (count wrds) 1)\n      (let [anagrams (filter #(=\n                                (into #{} (seq (first wrds)))\n                                (into #{} (seq %))) wrds)]\n        (if (> (count anagrams) 1)\n          (recur (conj s (into #{} anagrams)) (remove #(some #{%} anagrams) wrds))\n          (recur s (next wrds))))\n       s)))","user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn [words]\n  (set\n    (map #(into #{} %)\n         (vals\n           (filter #(> (count (val %)) 1) (group-by frequencies words))))))","problem":77,"user":"53a074a4e4b0ca733b9744af"},{"code":"(fn [v]\n  (->>\n    (group-by #(sort %) v)\n    (vals)\n    (filter #(< 1 (count %)))\n    (map set)\n    (set)\n  ))","problem":77,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn [c] (set (map set\n          (remove #(= 1 (count %))\n            (vals (group-by sort c))))))","problem":77,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":77,"code":"(fn [words]\n    (let [groups (group-by #(apply str (sort %)) words)\n          anags (filter #(< 1 (count (val %))) groups)]\n      (set (map set (vals anags)))))","user":"4e837808535db62dc21a62d9"},{"problem":77,"code":";; Aproach 1: group by length (count) and unique letters (set), and filter by count\n;(fn [v]\n;  (->> v\n;       (group-by (juxt count set))\n;       vals\n;       (map set)\n;       (filter #(> (count %) 1))\n;       set))\n;; Aproach 2: group by sorted words and filter by length of tail\n(fn [v]\n  (->> v\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(seq (rest %))) ; (filter (fn [[_ & tail]] (seq tail)))\n       set))","user":"60794173e4b0a637ed78035d"},{"problem":77,"code":"(fn [words]\n  (set\n   (reduce-kv (fn [r _ w]\n                (if (> (count w) 1)\n                  (conj r (set w))\n                  r))\n              []\n              (group-by #(sort (seq %)) words))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":77,"code":"(fn [l] (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by #(sort (seq %)) l))))))","user":"5632e850e4b0bfe05bf117ac"},{"code":"(fn [words]\n  (let [freqs-map (group-by frequencies words)]\n    (into #{} (->> (vals freqs-map)\n                   (filter #(< 1 (count %)))\n                   (map (partial into #{}))))))","problem":77,"user":"51281b25e4b03a34742b4304"},{"problem":77,"code":"(fn [coll]\n  (loop [words coll m {}]\n    (if (empty? words) \n      (set (filter \n            #(> (count %) 1)\n        (vals m) ))\n        (recur (rest words)\n(let [w (first words)\n      norm #(apply str \n            (sort (seq %))\n           )\n      k (norm w)\n     ]\n  (assoc m k (conj (get m k #{}) w))\n)\n        )\n    )\n  )\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":77,"code":"#(->> (group-by sort %)\n     vals\n     (filter second)\n     (map set)\n     set)","user":"522eb5cce4b01cdb292c5f0c"},{"code":"(fn [coll]\n  (set\n    (filter\n      #(> (count %) 1)\n      (map #(set (second %)) (group-by #(sort (seq %)) coll)))))","problem":77,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn ([x] (set (filter #(> (count %) 1) (map (fn ([lx] (set (filter #(= (set %) lx) x)))) (set (map set x)))))))","problem":77,"user":"4ff889f2e4b0678c553fc399"},{"code":"(fn [w] \n  (->> w\n    (group-by frequencies)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (set)))","problem":77,"user":"4e8e8c24535d65386fec2143"},{"problem":77,"code":"(fn [v]\n  (->> v\n   (map #(vector % (set %)))\n   (group-by second)\n   (reduce (fn [acc [_ vv]]\n             (if (> (count vv) 1)\n               (conj acc (set (map first vv)))\n               acc))\n           #{})))","user":"51dafedee4b09f6bc204eee2"},{"problem":77,"code":"(fn [words] (->> (group-by sort words)\n                 vals\n                 (filter #(> (count %) 1))\n                 (map set)\n                 set))","user":"4e68c465535d8ccf87e9fe8a"},{"problem":77,"code":"(fn [a] (->> a (group-by set) (map #(set (second %))) (filter #(> (count %) 1)) set))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [words]\n  (set \n  (filter\n   #(> (count %) 1)\n    (map\n      set\n      (vals (reduce \n      #(update-in %1 [(sort %2)] conj %2)\n      {} words))))))","problem":77,"user":"522d3a16e4b0e26240291d50"},{"problem":77,"code":"(fn [words]\n (->> words\n      (map (fn [w] (set (filter #(= (frequencies w) (frequencies %)) words))))\n      (filter #(> (count %) 1))\n      set))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":77,"code":"(fn\n   [words]\n   (let [sort-str #(apply str (sort %))]\n     (set (map set\n               (filter #(< 1 (count %))\n                       (partition-by\n                         sort-str\n                         (sort-by sort-str words)))))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":77,"code":"(let [anagram?\n      (fn [x y]\n        (= (frequencies x) (frequencies y)))\n      anagram-finder\n      (fn [words]\n        (into #{}\n              (keep (fn [x]\n                      (let [anagrams (into #{x}\n                                           (filter (fn [y] (anagram? x y))\n                                                   words))]\n                        (when (< 1 (count anagrams))\n                          anagrams)))\n                    words)))]\n  anagram-finder)","user":"5c1bee41e4b01240ff567218"},{"problem":77,"code":"(fn [v] (letfn\n   [(read-word\n     [m v]\n     (if (empty? v)\n       #(get-result m)\n       #(add-word\n         m (rest v) (first v))))\n    (add-word\n     [m v w]\n     (let [k (apply str\n                    (sort w))\n           s (get m k #{})]\n       #(read-word\n         (assoc m k (conj s w))\n         v)))\n    (get-result\n     [m]\n     (set\n      (filter #(> (count %) 1)\n       (vals m))))]\n   (trampoline read-word {} v)))","user":"598ab445e4b02b9968b84ce0"},{"problem":77,"code":"(fn [s]\n  (set (map set (filter #(> (count %) 1)\n                    (vals (group-by set s))))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":77,"code":"(fn [words]\n    (->> (group-by #(;; Get the set of chars in the word\n                     into #{} %) words)\n         vals\n         (filter #(> (count %) 1))\n         (map #(into #{} %))\n         (into #{})))","user":"5e38a9cbe4b01d43a70e8dc2"},{"code":"(fn [ls]\n  (let [m (group-by set ls)\n        f (filter #(< 1 (count %)) (vals m))]\n    (into #{} (map set f))))","problem":77,"user":"51df825de4b01188f062752b"},{"code":"#(set (do (filter (fn [x] (> (count x) 1)) (map set (vals (group-by sort %1))))))","problem":77,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":77,"code":"(fn ana [word-list]\n  (let [is-ana-of? (fn [a b] (and (= (set a) (set b))\n                                  (= (count a) (count b))))\n        full-list (for [word word-list]\n                    (filter (partial is-ana-of? word) word-list))\n        relevant-list (filter #(> (count %) 1) full-list)]\n    (set (map set relevant-list))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn anagram-finder [coll]\n (set\n  (filter #(not= 1 (count %))\n    (map (comp set second) (group-by #(sort (group-by identity %)) coll)))))","problem":77,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":77,"code":"(fn [x]\n\n   (set (filter\n\n          (fn [b](not= (count b) 1))\n\n          (set(map #(set (filter (fn [a](= (sort(seq a)) (sort(seq %)))) x))x)))))","user":"586b6a0ae4b01531a375e957"},{"problem":77,"code":"(fn anagram [coll]\n  (set \n  (filter #(> (count %) 1)\n  (map second\n  (reduce (fn [m s]\n            (prn s m)\n            (let [k (apply str (sort s))]\n              (assoc m k  (conj  (m k #{}) s)))) {} coll)))))","user":"5ab490f4e4b073f17744261d"},{"problem":77,"code":"(fn [words]\n  (loop [acc #{} [word & words] words]\n    (if (seq words)\n      (let [anas (set (filter #(= (set word) (set %)) words))\n            anas (conj anas word)\n            is-sub? (reduce #(or %1 (clojure.set/subset? anas %2)) false acc)\n            wo-subs (set (remove #(clojure.set/subset? % anas) acc))\n            wo-subs (set (remove #(clojure.set/subset? % anas) (reverse wo-subs)))]\n        (if (or is-sub? (< (count anas) 2))\n          (recur acc words)\n          (recur (conj wo-subs anas) words)))\n      acc)))","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn [ws] \n  (set (map set (filter #(> (count %1) 1) \n                        (for [w ws] (filter #(= (set w) (set %1)) ws))))\n       ))","problem":77,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [words]\n  (let [by-letters (group-by sort words)\n        anagrams (filter #(> (count %) 1) (vals by-letters))]\n    (set (map set anagrams))))","problem":77,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":77,"code":"#(->> % (group-by frequencies) vals (filter second) (map set) set)","user":"54a677a9e4b09f271ff37c88"},{"code":"(fn anagrams [words]\n  (let [sortw (fn [word] (str (sort word)))\n        res (reduce (fn [res word]\n                      (update-in res [(sortw word)] #((fnil conj #{}) % word)))\n                    {} words)]\n    (set (filter #(> (count %) 1) (vals res)))))","problem":77,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [ws] (let [lcount (fn [w] (reduce #(assoc %1 %2 (inc (get %1 %2 0))) {} w))]\n           (set (filter #(> (count %) 1) (map set (vals (group-by lcount ws)))))))","problem":77,"user":"50dfb660e4b061dbdced7228"},{"problem":77,"code":"(fn [c] (set (filter #(> (count %) 1) (map #(set %) (vals (group-by #(sort %) c))))))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn anagram [x]\n  (set (filter #(> (count %) 1) (map set (vals (group-by set x))))))","problem":77,"user":"51424cc8e4b0b50abeb46b34"},{"code":"#(set (map set (filter (fn [y] (<= 2 (count y)))\n   (vals (group-by \n    (fn [x] (sort  (seq x))) %)))))","problem":77,"user":"517945dce4b0684c1c981a43"},{"problem":77,"code":"(fn [s]\n  (loop [out #{}, outi #{}, i 0, j 0] \n    (cond\n      (= i (count s)) out\n      (= j (count s)) (recur (if (> (count outi) 1) (conj out outi) out) #{} (inc i) 0)\n      :else (let [si (nth s i), sj (nth s j)]\n        (recur out \n               (if (some #(= % 1) (vals (frequencies (concat si sj)))) \n                 outi \n                 (conj outi sj)) \n               i \n               (inc j))\n))))","user":"54524afbe4b0e397800069bc"},{"problem":77,"code":"(fn pia [v]\n  (into #{}\n    (map set\n      (filter\n        #(> (count %) 1)\n        (vals (group-by sort v))))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":77,"code":"(fn anag [coll]\n  (loop [c coll r {}]\n    (let [v (first c) k (sort (list* v))]\n      (if (nil? c)\n        (set (map #(set (second %)) (filter #(< 1 (count (second %))) r)))\n        (if (r k)\n          (recur (next c) (update-in r [k] conj v))\n          (recur (next c) (assoc r k [v])))))))","user":"561a1af6e4b053970a773b02"},{"code":"(fn [x]\n  (set (filter #(< 1 (count %)) (map set (vals (group-by sort x))))))","problem":77,"user":"509160dae4b0742c82730aef"},{"problem":77,"code":"(fn agrams\n  [words]\n  (loop [words words\n         charsets {}]\n    (if (empty? words)\n      (into #{} (filter #(> (count %) 1) (vals charsets)))\n      (let [word (first words)\n            charset (into #{} word)\n            getset (charsets charset)\n            oldset (if (nil? getset)\n                     #{}\n                     getset)]\n        (recur (rest words)\n               (assoc charsets charset\n                      (conj oldset word)))))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":77,"code":"(fn foo [col] (apply hash-set (filter #(> (count %) 1) (map #(apply hash-set %) (vals (group-by sort \n\tcol\n     ))\n\n))))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":77,"code":"(fn[coll]\n    (set (map set \n              (filter \n               #(< 1 (count %))\n               (vals (group-by sort coll))))))","user":"55101237e4b06e50f9beb181"},{"code":"(fn [s]\r\n  (let [m (reduce #(assoc %1 (sort %2) (cons %2 (get %1 (sort %2)))) {} s)]\r\n  (apply hash-set (map #(apply hash-set %1) (filter #(< 1 (count %1)) (vals m))))))","problem":77,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn anagrams [words]\n  (loop [words words\n         result {}]\n    (if (empty? words)\n      (set (filter #(> (count %) 1) (vals result)))\n      (let [[head & tail] words\n            key (frequencies head)]\n        (recur tail (assoc result key (set (conj (result key) head))))))))","problem":77,"user":"5310e7aee4b08068f379ecdc"},{"problem":77,"code":"(fn [wordList]\n\t(let [ setToWordsMap (reduce\n\t\t(fn [acc, word]\n\t\t\t(let [ letterSet (set word) ]\n\t\t\t\t(assoc acc letterSet\n\t\t\t\t\t(clojure.set/union (get acc letterSet) #{ word }))))\n\t\t{} wordList)]\n\t(into #{} (filter #(> (count %) 1) (vals setToWordsMap)))))","user":"598af379e4b02b9968b84ce6"},{"problem":77,"code":"(fn [words] (reduce #(if (> (count (second %2)) 1) (conj % (set (second %2))) %) #{} (group-by sort words)))","user":"563dfc02e4b0da801c4e4662"},{"problem":77,"code":"(fn f [ws]\n  (->> (group-by sort ws)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5012da69e4b0c8732600222d"},{"code":"#(set (map set (filter next (vals (group-by set %)))))","problem":77,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":77,"code":";(vec(\n(fn [ws]\n  (set (map #(-> % val set)\n       (remove #(-> % val count (= 1)) (group-by frequencies ws)))))\n;[\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"]))","user":"573632b7e4b0cd1946bd102f"},{"problem":77,"code":"(fn [l]\n  (into #{}\n  \t(filter (fn [s] (not= (count s) 1)) \n  \t\t(into #{}\n        \t(map (fn [a]\n               (reduce\n                (fn [b c]\n                  (if (zero? (compare\n                              (str (sort (last b)))\n                              (str (sort c))))\n                    (conj b c)\n                    b))\n                #{a}\n                l))\n             l)))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"problem":77,"code":"(comp set \n      (partial filter (comp (partial <= 2) count))\n      (partial map (comp set val))\n      (partial group-by set))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn __ [col]\n  (set (map set\n    (filter #(> (count %) 1)\n            (vals (group-by frequencies col))))))","problem":77,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [v]\n(set (map set (filter #(< 1 (count %))\n(vals (group-by \n(fn [w] (reduce #(update-in %1 [%2] (fnil inc 0)) {} w))\nv))))))","problem":77,"user":"4db1bfe21254ad5b4805fa71"},{"problem":77,"code":"(fn find-all-anagrams [all-words]\n   (let [find-anagrams (fn find-anagrams [word]\n                         (let [is-anagram (fn [a]\n                                            (= (sort word) (sort a)))]\n                           (set (filter is-anagram all-words))))]\n     (set (filter (fn [x] (> (count x) 1)) (map find-anagrams all-words)))))","user":"5aba34c5e4b073f1774426a3"},{"problem":77,"code":"(fn [col]\n  (->> col\n       (group-by (comp sort vec))\n       vals\n       (map set)\n       (filter #(< 1 (count %)))\n       set))","user":"52470d42e4b05ef8e38e6350"},{"problem":77,"code":"(fn [coll]\n   (let [anagram-grps (group-by sort coll)]\n     (set (for [[word anagrams-set] anagram-grps\n                :when (> (count anagrams-set) 1)]\n            (set anagrams-set)))))","user":"5ab23c99e4b073f1774425e2"},{"code":"(fn find-anagram [s]\n  (->> s\n       (map #(hash-map (sort (seq %)) #{%}) ,,)\n       (apply merge-with clojure.set/union ,,)\n       (vals )\n       (filter #(> (count %) 1))\n       (reduce #(conj %1 %2) #{} )))","problem":77,"user":"4dd0e8f7535da60f04a96e57"},{"code":"#(set (map set (filter (fn [x] (> (count x) 1)) (vals (group-by sort %)))))","problem":77,"user":"4e8f4f64535d65386fec2149"},{"problem":77,"code":"(fn anagram [col]\n  (->> (group-by sort col)\n       (filter #(> (count (val %)) 1))\n       (map #(set (val %)))\n       (set)))","user":"602372aae4b0d5df2af2220f"},{"code":"(fn ana-finder [ words ]\n   (set (filter #(> (count %) 1)\n           (reduce\n            (fn add-anagrams[ anagram-sets word ]\n              (conj anagram-sets\n                    (reduce\n                     (fn check-for-anagram[ anagrams compare-word ]\n                       (if (= word compare-word)\n                         (conj anagrams word)\n                         (if (= (sort (seq word)) (sort (seq compare-word)) )\n                           (conj anagrams compare-word)\n                           anagrams\n                           )\n                         )\n                       )\n                     #{} words\n                     )\n                    )\n              )\n            #{} words)\n           ))\n   )","problem":77,"user":"52867936e4b0239c8a67ae16"},{"code":"(fn [xs]\n  (->> (group-by set xs)\n    vals\n    (filter #(not (empty? (rest %))))\n    (map set)\n    set))","problem":77,"user":"50479524e4b0371827a27bc4"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by #(sort %))\n       (map #(set (last %)))\n       (filter #(> (count %) 1))\n       (set)))","user":"60849bd6e4b0736b099e42f2"},{"problem":77,"code":"(fn [words]\n  (->> (map list (map sort words) words)\n       (group-by first)\n       vals\n       (map (partial map second))\n       (map set)\n       (remove #(= 1 (count %)))\n       set))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [coll]\n    (set\n     (remove\n      #(< (count %) 2)\n      (reduce (fn [rv word]\n                (conj\n                 rv\n                 (set (filter (fn [s]\n                                (= (sort word) (sort s)))\n                              coll))))\n              #{}\n              coll))))","problem":77,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn [w]\n  (set (map set (remove #(= 1 (count %))\n    (vals (group-by #(sort %) w))))))","problem":77,"user":"4fc0853ae4b081705acca327"},{"code":"(fn [ws] (set (filter (fn [v] (> (count v) 1)) (map set (vals (group-by #(apply str (sort %)) ws))))))","problem":77,"user":"4ea365e2535d7eef308072c5"},{"problem":77,"code":"(fn anagram-finder\n  [xs]\n  (->> xs\n       (map set)\n       (set)\n       (map (fn [anagram] (set (filter #(= anagram (set %))\n                                      xs))))\n       (remove #(= (count %) 1))\n       (set)))","user":"4fcf1755e4b03432b189f40c"},{"problem":77,"code":"(fn f [words]\n  (->> words\n       (reduce\n         (fn [s word]\n           (let [letters (sort word)]\n             (update-in s [letters] #(conj (or % #{}) word))))\n         {})\n       (vals)\n       (filter #(> (count %) 1))\n       (set)))","user":"53d78b64e4b0e771c3025466"},{"problem":77,"code":"(fn even-better-anagramer\n  [words]\n  (->> (group-by sort words)\n      (vals)\n      (map set)\n       (set)\n       (clojure.set/select #(> (count %) 1)))\n  )","user":"5d5950c1e4b02ba5928a6827"},{"problem":77,"code":"#(set (filter (fn [x] (< 1 (count x))) (map set (vals (group-by (fn [s] (sort (seq s))) %)))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":77,"code":"(fn [coll] (into #{} (map #(into #{} (last %)) (filter #(>= (count (last %)) 2) (group-by sort coll)))))","user":"53e92f82e4b036ad0777e49d"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n    (group-by sort)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    (into #{})))","user":"4f7207d3e4b07046d9f4f019"},{"problem":77,"code":"(fn anagram-finder [xs]\n  (->>\n   xs\n   (group-by sort)\n   (map (comp set val))\n   (filter #(> (count %) 1))\n   (set)))","user":"54448e84e4b032a45b869393"},{"problem":77,"code":"(fn find-anagrams [coll]\n  (into #{}\n        (map (partial into #{})\n             (filter (fn [lst] (> (count lst) 1))\n                     (vals (group-by (fn [word] (sort word)) coll))))))","user":"54125eeee4b01498b1a719d3"},{"code":"(fn [s]\n  (set\n    (filter #(> (count %) 1)\n            (vals\n            (reduce (fn [m w]\n                        (let [k (frequencies w)]\n                        (assoc m k (conj (m k #{}) w))))\n                    {}\n                    s)))))","problem":77,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn [words]\n  (let [anagram-tester (fn [x]\n                         (fn [y] (loop [word1 x word2 y]\n    (cond (not= (count word1) (count word2)) false\n          (and (zero? (count word1)) (zero? (count word2))) true\n          ;((< (.indexOf word2 (str (.charAt word1 0))) 0)) false\n          :else (recur (subs word1 1) (clojure.string/replace-first word2 (.charAt word1 0) #\"\"))))))]\n    (loop [result #{} w words]\n      (if (not (seq w))\n        result\n        (recur (if (empty? (filter (anagram-tester (first w)) (rest w)) ) \n                 (set result) \n                 (conj result (set (filter (anagram-tester (first w)) w)))) \n               (if (empty? (filter (anagram-tester (first w)) (rest w)) )\n                 (rest w)\n                 (remove (anagram-tester (first w)) w)))))))","problem":77,"user":"51857e64e4b0da5a5be3babe"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       (vals)\n       (filter (comp (partial < 1) count))\n       (map set)\n       (set)))","user":"5383668ee4b06839e8705edd"},{"problem":77,"code":"(fn [v]\n   (into #{} (map set (filter #(> (count %) 1) (map val (group-by sort v))))))","user":"5d917ef0e4b0915913b1d402"},{"code":"(fn [v] (set (filter #(> (count %) 1) (map (comp set second) (group-by frequencies v)))))","problem":77,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [a] (into #{} (map set (filter #(> (count %) 1) (vals (group-by #(sort %) a))))))","problem":77,"user":"4e9a8c0e535dbda64a6f6b72"},{"code":"(fn [words] (set (map set (filter #(< 1 (count %)) (reduce conj #{} (vals (group-by frequencies words)))))))","problem":77,"user":"51a1659de4b00957e520db72"},{"code":"#(set (for [[_ g] (group-by frequencies %)\n            :when (next g)]               \n        (set g)))","problem":77,"user":"4db858d1535d1e037afb218c"},{"code":"(fn anagrams\n  [in]\n  (set (remove #(empty? %) \n    (for [x in] \n         (apply clojure.set/union (for [y (remove #(= x %) in) :when (= (apply str (sort x)) (apply str (sort y)))] \n            #{x y}))))))","problem":77,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn [x]\n  (set (map set\n    (filter #(> (count %) 1) \n      (vals (group-by set x))\n    )\n  ))\n)","problem":77,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":77,"code":"(fn ana [shit]\n    (->> (group-by set shit)\n      (vals)\n      (map set)\n      (filter #(< 1 (count %)))\n      (set)))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [s]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by set s))))))","problem":77,"user":"4fcf642ee4b03432b189f410"},{"problem":77,"code":"#(->> (group-by sort %)\n      (map (comp (partial into #{}) second))\n      (filter (comp (partial < 1) count))\n      (into #{}))","user":"5956c6dae4b066ee0a44af61"},{"code":"#(reduce\n  (fn [s g] (if (> (count g) 1) (conj s (set g)) s))\n  #{}\n  (vals (group-by sort %)))","problem":77,"user":"4eab612d535d7eef30807316"},{"problem":77,"code":"(fn [words]\n      (->> (group-by set words)\n           vals\n           (map set)\n           (remove #(= 1 (count %)))\n           set))","user":"5f93529ae4b0715f5002d7bc"},{"problem":77,"code":"(fn  [coll] (->> coll\n            (group-by #( set %))\n            (map val)\n            (map #(apply hash-set %)) \n            (filter #(> (count %) 1)) \n            (apply hash-set)) )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":77,"code":"#(->> %\n       (group-by frequencies)\n       (vals)\n       (filter (fn [s] (> (count s) 1)))\n       (map set)\n       (set))","user":"559c13c5e4b066d22e731f61"},{"problem":77,"code":"(fn [c]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n                (vals\n                 (group-by #(apply str (sort %))\n                           c))))))","user":"5a95c639e4b0d174b936c75e"},{"problem":77,"code":"(fn find_anagrams\n  [coll]\n  (set (filter #(>= (count %) 2)\n               (map set (vals (group-by #(sort %) coll))))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"code":"(fn [coll]\n  (->>\n    coll\n    (group-by sort)\n    (filter #(> (count (second %)) 1))\n    (map #(set (second %)))\n    set))","problem":77,"user":"53513d28e4b084c2834f4ae3"},{"code":"(fn [v]\n  (set (map set (filter #(< 1 (count %)) \n                        (vals (group-by sort v))))))","problem":77,"user":"4e599577535d8a8b8723a29f"},{"problem":77,"code":"(fn finalAnswer [x] (into #{} (letfn [(ana? [first sec] (= (set (seq first)) (set (seq sec))))\n                              (anaFinder1 [y] (map set\n                                                  (filter #(> (count %) 1) (if (= 1 (count y))\n                                                                             #{}\n                                                                             (concat #{(conj (filter #(ana? (first y) %) (rest y)) (first y))}\n                                                                                     (anaFinder1 (rest y)))))))\n                              ]\n                        (let [preResult (anaFinder1 x)] (filter\n                          (fn [item] (reduce #(and (not (and (clojure.set/subset? item %2) (not= item %2))) %1) true preResult))\n                          preResult)))))","user":"56427910e4b08d4f616f5f19"},{"problem":77,"code":"(fn[x](set(filter #(>(count %) 1)(for [y x] (set(filter #(= (set %)(set y)) x))))))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":77,"code":"(fn [v]\n  (into #{}\n      (map set\n           (filter #(> (count %) 1)\n                   (map val\n                        (group-by sort v))))))","user":"5a4443cae4b0447ef91cc60f"},{"problem":77,"code":"(fn [sq]\n  (loop [sq-it sq\n         ret-it #{}]\n    (if (empty? sq-it)\n      ret-it\n      (letfn [(anagram? [s]\n                        (= (sort (first sq-it))\n                           (sort s)))]\n        (recur (remove anagram? sq-it)\n               (let [new-set (into #{} (filter anagram? sq-it))]\n                 (if (> (count new-set)\n                        1)\n                   (conj ret-it new-set)\n                   ret-it)))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":77,"code":"(fn __ [aseq]\n  (->> (group-by #(apply + (map int %)) aseq)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":77,"code":"(fn anagrams [words]\n        (loop [freqs (reduce #(conj %1 (frequencies %2)) [] words)\n               words-rem words\n               result #{}]\n          (if (empty? words-rem)\n            result\n            (let [x-anagrams (set (filter #(= (first freqs) (frequencies %)) words-rem))]\n              (if (> (count x-anagrams) 1)\n                (recur (rest freqs) (remove #(contains? x-anagrams %) words-rem) (conj result x-anagrams))\n                (recur (rest freqs) (remove #(contains? x-anagrams %) words-rem) result))))))","user":"5801eed1e4b0a837a8b30c63"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n      (group-by set)\n      vals\n  \t  (filter #(> (count %) 1))\n   \t  (map set)\n      set))","user":"545801f6e4b01be26fd74615"},{"code":"(fn [words]\n  (letfn [(analyze [word]\n                   (reduce #(merge-with + %1 {%2 1}) {} word))]\n    (loop [words words\n           anagrams {}]\n      (if (empty? words)\n        (set (filter #(> (count %) 1) (vals anagrams)))\n        (let [w (first words)\n              a (analyze w)]\n          (recur (rest words) (merge-with clojure.set/union anagrams {a #{w}})))))))","problem":77,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":77,"code":"(fn [words]\n  (->> (group-by frequencies words)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn f [v]\n  (into #{} (filter #(> (count %) 1) (for\n    [[kk vv] (group-by (fn ff [b] (group-by (fn fff[a] a) b)) v)]\n              (into #{} vv)))))","problem":77,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn ana [coll]\n  (let [anagrams (group-by sort coll)]\n    (set (map set (filter #(> (count %) 1) (vals anagrams))))))","problem":77,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [xs]\n  (set (map set (filter (comp (partial < 1) count) (map second (group-by sort xs))))))","problem":77,"user":"50c9e5e3e4b0a409464667d7"},{"problem":77,"code":"(fn [strs]\n  (set (map set (filter #(> (count %) 1) \n        (vals (group-by sort strs))))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":77,"code":"(fn [coll]\n  (letfn [(map-em [coll]\n                  (loop [c coll\n                         o {}]\n                    (if (empty? c)\n                      o\n                      (let [f (first c)]\n                        (recur (rest c) (conj o {f, (frequencies (clojure.string/split f  #\"\"))}))))))\n          (group-em [coll]\n                    (group-by #(sort (keys (val %))) (map-em coll)))\n          (filter-em [coll]\n                     (filter #(if (> (count %) 1) %) (vals (group-em coll))))\n          (return-em [coll]\n                     (set\n                      (for [x (filter-em coll)]\n                        (set (map first x)))))]\n    (return-em coll)))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":77,"code":"(fn [x] (set (for [item (vals (group-by sort x)) :when (< 1 (count item))] (set item))))","user":"584dadebe4b0b7285a6f4e44"},{"problem":77,"code":"(fn anagram [words]\n  (let [unique (->> words (map set) set)]\n  \t(->> unique\n      (map (fn [cs] (->> words (filter #(= cs (set %))) set)))\n      (filter #(> (count %) 1))\n      set)))","user":"4dac39a28cc9d6edb8beb0b3"},{"code":"#(set (filter second\n              (map set\n                   (vals (group-by sort %)))))","problem":77,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn [words]\n   (->> (for [x words, y words\n              :let [anagram? #(= (set %1) (set %2))]\n              :when (not= x y)\n              :when (anagram? x y)]\n          {x #{x y}})\n        (apply merge-with clojure.set/union)\n        vals\n        set))","problem":77,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [wl]\n  (let [m (reduce\n           (fn [s x] (update-in s [(sort x)] conj x)) {} wl)]\n    (set (filter #(> (count %) 1) (map set  (vals  m))))\n    ))","problem":77,"user":"4fb4b798e4b081705acca2af"},{"problem":77,"code":"(fn [s]\n   (into #{} \n      (map set \n         (filter #(not= 1 (count %)) \n            (vals (group-by sort s))))))","user":"56ede653e4b04a395b9a0449"},{"code":"(fn [s]\n  (set (for [[k v] (group-by set s)\n             :when (> (count v) 1)]\n    (set v))))","problem":77,"user":"51899891e4b0288ada3dbdab"},{"problem":77,"code":"(fn [l]\n  (->> l\n       (group-by set)\n       (vals)\n       (filter next)\n       (map set)\n       (set)))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":77,"code":"(fn [words]\n  (into #{}\n    (filter\n       #(> (count %) 1)\n       (for [word words]\n         (into #{}\n           (filter\n              #(= (sort %) (sort word))\n              words))))))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":77,"code":"(fn [ss]\n  (letfn [(ag [w1 w2] (= (set w1) (set w2)))\n          (itr [w s] \n               {:a (set (cons w (filter #(ag w %) s)))\n                :r (remove #(ag w %) s)})]\n         (loop [[h & t] ss res #{}]\n           (if (nil? h)\n             (set (filter #(> (count %) 1) res))\n             (let [{a :a r :r} (itr h t)]\n               (recur r (conj res a)))))))","user":"56f51879e4b046a417f92069"},{"problem":77,"code":"(fn [d]\n(->> (group-by #(sort %) d)\n\tvals\n\t(filter #(<= 2 (count %)))\n\t(map set)\n\t(into #{})))","user":"54a11042e4b09f271ff37c49"},{"problem":77,"code":"(fn [m] (set (for [[_ v] (group-by #(sort %) m)\n      :when (> (count v) 1)]\n  (set v))))","user":"5382704be4b06839e8705ed4"},{"problem":77,"code":"(fn [w] (set (map set (remove #(= 1 (count %)) (vals (group-by sort w))))))","user":"50385746e4b0803468ea2c6d"},{"code":"(fn [coll]\n   (\n    (comp set (partial filter #(> (count %) 1)) (partial map set) vals)\n    (reduce (fn [m s]\n              (let [k (group-by identity (seq s))\n                    v (m k)]\n                (conj m {k (conj v s)}))) {} coll)))","problem":77,"user":"52be0263e4b07a9af579230e"},{"problem":77,"code":"(fn af[l]\n  ( loop [ i (first l) x (rest l) res #{} ]\n\t(if i\n      (recur (first x) (rest x) (conj res (set (filter #(= (sort %) (sort i)) l))))\n      (set (filter #(> (count %) 1) res))\n      )\n    )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"problem":77,"code":"(fn [words]\n  (->> (group-by set words)\n       (vals)\n       (map set)\n       (filter #(< 1 (count %)))\n       (set)))","user":"58ffac9de4b0438e51c2cffd"},{"problem":77,"code":"(fn [arg] (set (map set (filter #(> (count %) 1) (map val (group-by #(set %) arg))))))","user":"56ab7578e4b03c432f18733d"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (let [angarams (map (fn [x]\n                        [(sort x) x]) coll)\n        values (vals (group-by #(first %) angarams))]\n    (into #{} (filter #(< 1 (count %)) (map (fn [group]\n                                              (into #{} (map second group))) values)))\n    ))","user":"5693a53ee4b0dcc4269f4106"},{"problem":77,"code":"(fn [l]\n  (set (filter #(> (count %) 1)\n               (for [s l]\n                 (set (filter #(= (set s) (set %)) l))))))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       (map #(set (val %)))\n       (filter #(not= 1 (count %)))\n       set))","problem":77,"user":"4fe8a3bde4b07c9f6fd12c61"},{"code":"(fn find-anagrams [words]\n  (let [anagrams (fn [w]\n                   (into #{}\n                         (filter #(= (frequencies w)\n                                     (frequencies %))\n                                 words)))]\n    (into #{} (filter #(> (count %) 1)\n                      (map anagrams words)))))","problem":77,"user":"51460e4ce4b04ef915e37314"},{"problem":77,"code":"(fn [strs]\n  (->> strs\n       (group-by sort)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"4f037faf535dcb61093f6af8"},{"problem":77,"code":"#(letfn [(gt1? [coll] \n               (> (count coll) 1))]\n  (set\n    (map set\n      (filter gt1?\n        (map val (group-by sort %))))))","user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn [ss] (->> ss \n              (group-by sort) \n              vals \n              (filter #(> (count %) 1)) \n              (map set) \n              set))","problem":77,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":77,"code":"(fn [coll]\n  (set \n   (filter #(> (count %) 1)\n           (map set (vals (group-by frequencies coll))))))","user":"558d7dd3e4b0277789237647"},{"code":"(fn [coll]\n  (->> (group-by #(sort (seq %)) coll)\n       (filter (fn [[_ v]] (second v)))\n       (map #(set (val %)))\n       set))","problem":77,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn find-anagram [l]\n  (let [remove-first (fn [e s] (let [[n m] (split-with (partial not= e) s)] (concat n (rest m))))\n \n        permute-str \n        (fn permute-str[s]\n          (if (empty? s)\n            [\"\"]\n            (for [c s\n                  p (permute-str (remove-first c s))\n                  ] (str c p)\n              )\n            )\n          )\n         \n         perm-map (into {} (map #(vector % (permute-str %)) l))\n       ]\n        (loop [ks (keys perm-map) anagrams #{}]\n          (if (empty? ks) \n            anagrams\n        \n            (let [perm-map-contains? (fn [s](some #{(first ks)} (perm-map s)))\n                  s-anagram (filter perm-map-contains? (remove (partial = (first ks)) l))\n                  ]\n              (recur (rest ks)\n               (if (seq s-anagram)\n                 (conj anagrams (into #{(first ks)} s-anagram))\n                 anagrams\n                 ) \n               )\n              )\n            )\n          )\n      )\n  )","problem":77,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn [v]\n  ( let [x  (reduce #(conj %1 (clojure.string/split %2 #\"\")) [] v) ]\n(let [y (reduce #(conj %1 (sort %2)) [] x) ]\n  (into #{}\n  (remove #(= (count %) 1)\n    (loop [c 0 s #{}]\n      (if (= c (count v)) s\n        (recur (inc c) (conj s \n          (loop [c1 0 s1 #{} ]\n            (if (= c1 (count v))\n              s1\n              (recur (inc c1)\n                (if (= (nth y c) (nth y c1))\n                  (conj s1 (nth v c1))\n                    s1\n)))))))))))))","problem":77,"user":"5065bd94e4b0148eb3925aed"},{"code":"#(set (for [[_ s] (group-by frequencies %) \n            :when (next s)] (set s)))","problem":77,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn [words]\n  (loop [acc #{} [w & ws :as coll] words]\n    (if (empty? coll) acc\n      (let [s (set w)\n            a-grams (into #{} (for [i ws :when (= s (set i))] i))          \n            left-overs (filter #(not (contains? a-grams %)) ws)]\n        (if (empty? a-grams)\n          (recur acc left-overs)\n          (recur (conj acc (conj a-grams w)) left-overs))))))","problem":77,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":77,"code":"(fn [xs]\n    (->> xs\n       (group-by frequencies)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [w]\n  (->> w\n  (map sort)\n  (interleave (range))\n  (partition 2)\n  (group-by last) \n  (filter #(< 1 (count (last %))))\n  (map #(map first (last %)))\n  (map (fn [i] (set (map #(get w %) i))))\n  (set)\n  )\n)","problem":77,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn p77 [words]\n  (apply hash-set (map #(reduce conj #{} %) (filter #(< 1 (count %)) (vals (group-by (comp sort char-array) words))))))","problem":77,"user":"5272669de4b03e8d9a4a742e"},{"problem":77,"code":"(fn [words]\n  (loop [comparitor (first words) remaining (set words) sets #{}]\n    (if (empty? remaining)\n      sets\n      (let [anagrams (set (filter #(= (sort comparitor) (sort %)) remaining))\n            else (clojure.set/difference remaining anagrams)]\n        (recur (first else) else (if (< 1 (count anagrams)) (conj sets anagrams) sets))))))","user":"6088395de4b0ae75613dcee2"},{"code":"#(set\n  (map set\n    (filter\n      (comp (partial < 1) count)\n      (vals (group-by set %)))))","problem":77,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn [col]\n     (let [groups (group-by #(sort (apply vector %)) col)\n           val-col (vals groups)]\n       (prn val-col)\n       (reduce #(if (< 1 (count %2)) (conj % (set %2)) %) #{} val-col)))","problem":77,"user":"5036eba7e4b0af0658af77a5"},{"problem":77,"code":"(fn anagrams [strings]\n  (->> strings\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":77,"code":"(fn __\n  [collection]\n  (->> (group-by sort collection)\n       (vals)\n       (filter #(>= (count %) 2))\n       (map #(apply hash-set %))\n       (apply hash-set)))","user":"5ac91d90e4b0e27600da77bd"},{"problem":77,"code":"(fn [v]\n  (set (filter (fn [s] (> (count s) 1)) (map\n   (fn [l] (set (flatten (map last l))))\n   (map last (group-by first (map vector (map sort v) v)))))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":77,"code":"(fn anagram-finder [words]\n  (letfn [(is-anagram [w1 w2] (= (sort w1) (sort w2)))\n          (anagram-find [w words] (filter\n                                   #(is-anagram w %)\n                                   words))]\n  (set (filter #(> (count %) 1) (map #(set (anagram-find % words)) words)))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":77,"code":"(fn [v]\n  (->>\n   (group-by sort v)\n   (vals)\n   (filter #(seq (next %)))\n   (map set)\n   (set)))","user":"5455c2f3e4b080a794c2c87d"},{"problem":77,"code":"(fn [words]\n  (->> words\n     (group-by sort)\n     (vals)\n     (map set)\n     (filter #(> (count %) 1))\n     (set)))","user":"5f37263de4b0574c87022c4e"},{"problem":77,"code":"(fn [in]\n  (set\n (filter\n  #(> (count %) 1)\n  (map\n   (comp set second)\n   (group-by\n    set\n    in)))))","user":"586a657de4b0f14aab7c88bd"},{"problem":77,"code":"(fn [words]\r\n  (->> words\r\n    (map #(-> [(sort %) %]))\r\n    (group-by first)\r\n    (map (fn [[k v]] (set (map last v))))\r\n    (filter #(> (count %) 1))\r\n    (set)))","user":"555bd27ae4b0b056612e2244"},{"problem":77,"code":"(fn [dic]\n    \n (->>(map set dic)\n     (#(interleave % (map list dic)))\n     (partition-all 2)\n     (map #(hash-map (first %) (second %1)))\n     (apply merge-with concat)\n     (vals)\n     (filter #(> (count %) 1))\n(map #(into #{} %))\n(into #{})\n )\n\n)","user":"556f2009e4b09a3098a52519"},{"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    set\n    )\n)","problem":77,"user":"4e78dc98535db95036265724"},{"code":"#(into #{}\r\n  (for [[_ x]\r\n    (apply merge-with into\r\n      (for [s %] {(apply sorted-set s) #{s}}))\r\n    :when (< 1 (count x))]\r\n  x))","problem":77,"user":"4dcd818e535d5973398f929d"},{"problem":77,"code":"(fn find-anagrams [words]\n  (->> (group-by sort words)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5617a540e4b06b1bb2182a12"},{"problem":77,"code":"(fn\n  [words]\n  (into #{} (filter\n   #(> (count %) 1)\n   (map\n    (fn [[k vs]] (into #{} vs))\n    (group-by #(sort %) words)))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":77,"code":"(fn [slst]\n    (let [m (atom {})\n          madd (fn [y] (let [x (set (seq y))]\n                         (if (contains? @m x)\n                           (swap! m #(conj % [x (conj (get % x) y)]))\n                           (swap! m #(conj % [x #{y}])))))]\n      (doseq [x slst]\n        (madd x))\n      (set (for [[k v] @m :when (< 1 (count v))]v))))","user":"50981062e4b04e098a4c7268"},{"code":"#(set (remove (fn[x] (= 1 (count x))) (map set (vals (group-by set %)))))","problem":77,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":77,"code":"(fn ana [s]\n  (into #{}\n        (filter #(> (count %) 1)\n                (map #(into #{} %)\n                     (vals (group-by sort s))))))","user":"597a4277e4b02382a38ad1e2"},{"code":"#(->> % (group-by sort) vals (map set) (filter (comp (partial < 1) count)) set)","problem":77,"user":"4dd3c7fe535dae65d5c462de"},{"problem":77,"code":"(fn [v-of-words]\n  (letfn [(is-palindrome [l-word r-word]\n            (= (dissoc (frequencies l-word) \\space)\n               (dissoc (frequencies r-word) \\space)))\n          (equiv-class [rel a-col]\n            (loop [s (seq a-col) acc #{}]\n              (if (not s)\n                acc\n                (let [f (first s)\n                      r (rest s)\n                      m (set (filter #(rel f %) r))\n                      n (filter #(not (rel f %)) r)]\n                  (recur (seq n) (conj acc (conj m f)))))))]\n    (reduce #(if (> (count %2) 1) (conj %1 %2) %1) #{} (equiv-class is-palindrome v-of-words))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":77,"code":"(fn [s]\n  (reduce (fn [acc str]\n            (let [f (set (filter #(= (set %) (set str)) s))]\n              (if (> (count f) 1)\n                (conj acc f)\n                acc))) #{} s))","user":"53523ae0e4b084c2834f4aee"},{"problem":77,"code":"(fn [x]\n    (->> (group-by sort x)\n         vals\n         (map set)\n         (remove #(< (count %) 2))\n         set)\n    )","user":"5ab1665de4b073f1774425c0"},{"problem":77,"code":"#(reduce (fn [res e]\n           (if (> (count e) 1)\n             (conj res (set e))\n             res))\n         #{}\n         (vals (group-by frequencies %)))","user":"60096aabe4b074f607df667f"},{"problem":77,"code":"(fn [xs]\n  (let [unordered-hash (fn [st] (reduce #(+ %1 (int %2)) 0 st))\n        xs-with-hash (group-by unordered-hash xs)\n        xs-vals (map #(into #{} %) (vals xs-with-hash))]\n    (into #{} (filter #(> (count %) 1) xs-vals))))","user":"58ee84e5e4b056aecfd47dab"},{"problem":77,"code":"(fn [words]\n(->> (map (fn [w] (assoc {} w (apply merge-with + (map #(hash-map %1 1) w)))) words)\n     (group-by vals)\n     (vals)\n     (filter #(> (count %1) 1))\n     (map #(flatten (map (fn [x] (keys x) ) %1 )) )\n     (map set)\n     set\n))","user":"5360f043e4b0243289761e3c"},{"code":"(fn fun [coll]\n  (set\n   (filter #(> (count %) 1)\n           (map (fn [wrd]\n                  (set \n                   (filter\n                    (fn [y]\n                      (= (set (seq wrd))\n                         (set (seq y))))coll ))) \n                coll\n                ))))","problem":77,"user":"5349da55e4b084c2834f4a68"},{"problem":77,"code":"(fn [s]\n  (->> s\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       set)\n)","user":"591e0782e4b09b4ee5954c25"},{"problem":77,"code":"(fn [xs]\n   (let [f #(-> % set sort vec)]\n     (->> xs\n          (sort-by f)\n          (partition-by f)\n          (filter #(-> % count (> 1)))\n          (map set) set)))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":77,"code":"(fn anagrama [args]\n  \n       (->> args\n        \t(group-by sort ,,,)\n            (vals  ,,,)\n            (map set ,,,)\n            (filter #(>= (count %) 2))\n            (set ,,,)))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":77,"code":"(fn [words]\n   (let [cmp-words (fn [& ws] (apply = (map frequencies ws)))]\n     (set (remove nil? (set (for [w1 words]\n                          (let [cmp (partial cmp-words w1)\n                                anagrams (set (filter cmp words))]\n                            (when (> (count anagrams) 1)\n                              anagrams))))))))","user":"60521ea8e4b056659d634205"},{"code":"(fn [words]\n  (letfn [(is-anagram? [a b]\n                       (and (= (count a) (count b))\n                            (= (frequencies a) (frequencies b))))\n          (anagrams [a]\n                    (set (get (group-by #(is-anagram? a %) words) true)))]\n    (set (filter #(> (count %) 1) (set (map anagrams words))))))","problem":77,"user":"5141abf1e4b02fd87f5064c3"},{"problem":77,"code":"(fn [s]\n  (let [t (map (fn [x] [(set x) x]) s)]\n    (loop [r {} t t]\n      (if (empty? t)\n        (set (vals (filter (fn [[k v]] (> (count v) 1)) r)))\n        (let [k (first (first t))\n              v (second (first t))]\n          (recur\n            (assoc r k (conj (get r k #{}) v))\n            (rest t)))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":77,"code":"(fn solution [strings]\n  (let [groups (vals (group-by #(sort (seq %)) strings))]\n    (set (map set (filter #(> (count %) 1) groups)))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [col] (into #{} (map set\n           (vals \n           (filter #(> (count (val %)) 1) \n                   (group-by sort col))))))","problem":77,"user":"4fb4303fe4b081705acca2ac"},{"code":"(fn [xs] (->> (vals (group-by sort xs))\n              (remove #(> 2 (count %)))\n              (map set)\n              set))","problem":77,"user":"518696c1e4b0c40be512d708"},{"problem":77,"code":"(fn [words]\n  (->> (group-by frequencies words)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":77,"code":"(fn afinder [b]\n  (letfn [(sset [c] (set (map  #(first %) c)))          ]\n    (let [b2 (map #(apply str (sort %)) b)\n          b3 (group-by second (map vector b b2))\n          b4  (filter #(> (count %) 1) (map #(sset ( second % ))  b3))\n          ] (set b4))))","user":"51f81925e4b09be9c177e526"},{"problem":77,"code":"(fn [words] (->> words\n     (map (fn [w] (set (filter #(= (set %) (set w)) words))))\n     (set)\n     (filter #(> (count %) 1))\n     (set)))","user":"5a388675e4b001c08efc0ca2"},{"problem":77,"code":"#(->> % (group-by sort) vals (filter (fn [xs] (> (count xs) 1))) (map set) set)","user":"54926752e4b0b312c081ff44"},{"problem":77,"code":"(fn [s]\n(set (map set (filter #(> (count %) 1) (vals (group-by sort s)))))\n  )","user":"543bb568e4b032a45b869334"},{"problem":77,"code":"(fn [words]\n   (set (map set (map second (filter (fn [[_ coll]] (> (count coll) 1)) (apply merge-with concat (map (fn [word] {(frequencies word) [word]}) words)))))))","user":"5a250b86e4b07f18be40aa19"},{"problem":77,"code":"(fn [s] \n  (set (filter #(> (count %) 1) \n             (map set (vals (group-by frequencies s))))))","user":"5e471203e4b043cd24807a2a"},{"problem":77,"code":"#(->> (reduce \n         (fn [dict x]\n           (let [key   (sort x)\n                 value (conj (dict key #{}) x)]\n             (into dict {key value})))\n         {} %)\n       (vals)\n       (filter (fn [s] (> (count s) 1)))\n       (set))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn [words]\n  (let [sorted-seqs (map #(-> % seq sort) words)\n        kv-words (zipmap words sorted-seqs)\n        anagrams (group-by #(get % 1) kv-words)]\n    (set \n     (filter #(> (count %) 1) \n             (map (fn [a] \n                    (->> (get a 1)\n                         (map #(get % 0))\n                         (set)))\n                  anagrams)))))","problem":77,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn [coll]\n  (set (map second (filter (fn [[k v]] (> (count v) 1))\n                           (map (fn [[k v]] [k (set v)])\n                                (group-by #(into #{} %) coll))))))","problem":77,"user":"51e89428e4b006d205356a51"},{"problem":77,"code":"#(set (map (comp set val) \n            (remove (comp #{1} count val) (group-by frequencies %1))))","user":"575f6a80e4b08062f99a4e80"},{"problem":77,"code":"(fn anagrams [s]\n  (loop [grams s\n         result {}]\n    (if (empty? grams)\n        (set (for [x (vals result) :when (> (count x) 1)] x))\n      \t(recur (rest grams) \n               (assoc result (sort (first grams)) (conj (get result (sort (first grams)) #{}) (first grams)))))))","user":"540f09b9e4b0addc1aec6725"},{"problem":77,"code":"(fn [words]\n  (into #{} \n        (filter #(< 1 (count %))\n                (map (fn [word]\n                       (set (filter #(= (sort word) (sort %)) \n                                    words)))\n                     words))))","user":"5405fdcce4b0addc1aec6683"},{"problem":77,"code":"#(->> (group-by sort %)\n                      (vals)\n                      (map set)\n                      (filter (fn [x] (not= 1 (count x))))\n                      (set))","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn anagram [l]\n  (set \n    (filter #(> (count %) 1)\n      (vals \n        (reduce #(let [k (sort %2)]\n          (assoc % k (conj (get % k #{}) %2))) {} l)))))","problem":77,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":77,"code":"(fn find-anagram [col]\n  (set (map set (filter #(> (count %) 1) (vals (group-by (fn [el] [(count el) (set el)]) col))))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn find-anagrams [strings]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort strings))))))","problem":77,"user":"5186134ce4b0da5a5be3bac7"},{"problem":77,"code":"(fn anagrams [xs]\n  (->>\n   (map #(vector % (sort %)) xs)\n   (group-by #(identity (second %)))\n   (vals)\n   (filter #(> (count %) 1))\n   (map (fn [x] (into #{} (map first x))))\n   (into #{})\n   ))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn [a] (set (map set (filter #(> (count %) 1) (vals (group-by #(frequencies %) a))))))","problem":77,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn [word-sequence]\n    (->>\n     word-sequence\n     (apply (fn [& words]\n       (loop [anagram-list-map {}\n              wl words]\n         (println :map anagram-list-map :wl wl)\n         (if (empty? wl)\n           anagram-list-map\n           (let [word (first wl)\n                 key (frequencies word)\n                 anagram-list (get anagram-list-map key)\n                 new-list (if (nil? anagram-list)\n                            (list word)\n                            (cons word anagram-list))]\n             (recur (assoc anagram-list-map key new-list) (rest wl)))))))\n     (filter #(< 1 (count (second %))))\n     (map #(set (second %)))\n     (set)))","problem":77,"user":"53487737e4b084c2834f4a59"},{"code":"(fn [a]\n  (reduce #(conj %1 (into #{} %2)) #{} \n          (filter #(> (count %) 1) \n                  (vals (group-by #(into #{} %) a)))))","problem":77,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [s]\n  (set (map set\n     (filter #(> (count %) 1) (vals (group-by frequencies s))))))","problem":77,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"problem":77,"code":"(fn [c]\n  (into #{} (map set (filter #(> (count %) 1) (map val (group-by set c))))))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":77,"code":"(fn foo [s]\r\n  (->>\r\n    (group-by frequencies s)\r\n    (map (comp set second))\r\n    (filter #(> (count %) 1))\r\n    set))","user":"606e0a42e4b069485764de19"},{"code":"(fn [xs]\n  (set (map set (filter #(> (count %) 1)\n    (vals\n      (group-by sort xs))))))","problem":77,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by sort coll)\n       vals\n       (filter #(not= (count %) 1))\n       (map set)\n       set))","user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn [w] (into #{} (map set (filter #(> (count %) 1) (vals (group-by sort w))))))","problem":77,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":77,"code":"(fn find-anagrams [ip]\n  (let [anagram-group (map set (vals (group-by frequencies ip)))]\n    (reduce\n     (fn [acc curr]\n       (if (< 1 (count curr))\n         (conj acc curr)\n         acc))\n     #{}\n     anagram-group))\n)","user":"5d8c8175e4b0915913b1d3e1"},{"problem":77,"code":"(fn [list]\n                 (loop [words list\n                        result #{}]\n                   (if (> 1 (count words)) result\n                                           (let [word (first words) anagrams (filter #(= (set word) (set %)) (drop 1 words))\n                                                 new-hash-set (into #{} (conj anagrams word))]\n                                             (if (= 0 (count anagrams))\n                                               (recur (drop 1 words) result)\n                                               (recur (into [] (clojure.set/difference (into #{} words) new-hash-set)) (conj result new-hash-set))\n\n                                               )))) )","user":"5968d73fe4b069c0a1a197d7"},{"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (remove #(= 1 (count %)))\n       (map set)\n       set))","problem":77,"user":"52d83c2ce4b09f7907dd138d"},{"problem":77,"code":"(fn [l] \n  (set \n   (filter #(> (count %) 1) \n           (map set (vals (group-by #(set (seq %)) l))))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":77,"code":"(fn [words] \n  (disj \n   (into #{} (for [[k v] \n     (apply merge-with concat \n       (map #(apply hash-map %) (partition-all 2 \n         (interleave (map #(apply str (sort (seq %))) words) \n         (map vector words)))))] \n      (let [s (apply hash-set v)] \n        (if (>= (count s) 2) s)))) nil))","user":"56bb9ccce4b0f26550335959"},{"problem":77,"code":"#(->> (group-by sort %)\n      vals\n      (filter (comp pos? dec count))\n      (map set)\n      set)\n;\n;(fn [words]\n;  (set\n;   (filter #(< 1 (count %))\n;           (mapv set\n;                 (vals\n;                  (group-by sort words))))))","user":"54ca9ca8e4b057c6fda3a265"},{"code":"(fn [v]\n    (reduce \n     \t(fn [s [k kv]] \n            \t(if (> (count kv) 1) (conj s (set kv)) s )) \n     #{} (group-by frequencies v)))","problem":77,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [coll]\n  (set (for \n    [[k vals] \n       (group-by sort coll) \n       :when (>= (count vals) 2) ] (set vals))))","problem":77,"user":"4f03154a535dcb61093f6a58"},{"problem":77,"code":"(fn [xs]\n  (->> (vals (group-by #(sort %1) (set xs)))\n       (filter #(> (count %1) 1))\n       (map set)\n       (into #{})))","user":"5785de4ce4b0ebec4cfb74e6"},{"problem":77,"code":"#(->> % (group-by sort) (vals) (filter (fn [x] (> (count x) 1))) (map (partial into #{})) (into #{}))","user":"57ec3d29e4b0bfb2137f5b77"},{"code":"(fn [coll]\n  (let [ss #(apply str (sort %))]\n    (set (filter #(> (count %) 1) (map set (partition-by ss (sort-by ss coll)))))))","problem":77,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn [words]\n  (loop [l words m {}]\n    (if (empty? l) (set (filter #(<= 2 (count %)) (vals m)))\n      (let [f (first l) sf (sort f)]\n        (recur (rest l) \n          (assoc m sf \n            (conj (get m sf #{}) f)))))))","problem":77,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":77,"code":"; need something simpler\n;(def mp (reduce #(merge %1 {%2 (sort %2) }) {} words))\n;(def group (group-by #(second %1) mp))   \n(fn xx [words]   (set (filter (fn [v] (< 1 (count v)) ) (map (fn [x] (set (keep-indexed #(if (even? %1) %2) x))) \n                    (map (fn [b] (apply concat b)) \n                        (vals (group-by #(second %1) (reduce (fn [a b] (merge a {b (sort b) })) {} words))))))))","user":"558bdcefe4b0277789237633"},{"problem":77,"code":"(fn[c]\n  (->> c\n     (group-by frequencies)\n     (map (comp (partial apply hash-set) second))\n     (filter #(-> % count dec pos?))\n     (apply hash-set)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":77,"code":"(fn [words]\n  (loop [words words\n         anagrams #{}]\n    (if-let [matches (not-empty (set (filter #(= (sort %) (sort (first words))) words)))]\n      (recur (clojure.set/difference (set (rest words)) matches) (conj anagrams matches))\n      (set (filter #(< 1 (count %)) anagrams)))))","user":"57155980e4b07c98581c3ad7"},{"problem":77,"code":"(fn [coll]\n   (let [more-than-one (fn [x] (< 1 (count x)))]\n     (->>\n       coll\n       (group-by sort)\n       (map (fn [[_ v]] v))\n       (filter more-than-one)\n       (map set)\n       set\n       )))","user":"5d1a1082e4b0902706380e0e"},{"problem":77,"code":"(fn [v]\n  ((fn anagram-find [result rst]\n     (if (<= (count rst) 1) result\n       (let [cur (first rst)\n             remain (rest rst)\n             anagram (remove nil? (map #(if (= (sort cur) (sort %)) % nil) remain))]\n         (if (empty? anagram) (anagram-find result remain)\n           (anagram-find (conj result (into #{} (cons cur anagram))) (reduce disj (set remain) anagram)))))) #{} v))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn [s]\n\t(set\n\t\t(filter\n\t\t\t(fn [x] (> (count x) 1))\n\t\t\t(map \n\t\t\t\t#(set\n\t\t\t\t\t(filter (partial (fn is-anagram?\n\t\t\t\t\t\t[x y]\n\t\t\t\t\t\t\t(= (sort x) (sort y))) %) s))\n\t\t\t\ts))))","problem":77,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":77,"code":"(fn __ [words]\n  (->>\n   (vals (group-by #(sort %) words))\n   (filter #(> (count %) 1))\n   (map #(set %))\n   set\n  ))","user":"5e078ba7e4b0978307768fb6"},{"problem":77,"code":"(fn do-it [x]\n  (->> x \n       (group-by #(apply str (sort %)))\n       (map #(into #{} (val %)))\n       (filter #(> (count %) 1))\n       (into #{})))","user":"5546704be4b0a04f7929953d"},{"problem":77,"code":"(fn [c]\n  (->> (group-by (fn [s]\n                        (group-by identity s))\n                c)\n            vals\n            (filter #(> (count %) 1))\n            (map set)\n            set))","user":"58949f8de4b00487982d525e"},{"code":"(fn [words]\n  (set\n    (map set\n      (filter\n        #(> (count %) 1)\n        (vals (group-by sort words))))))","problem":77,"user":"5002b6e5e4b0678c553fc42c"},{"problem":77,"code":"(fn [words]\n  (let [check-words-xsame (fn \n                      [a b] \n                      (if (= (sort (clojure.string/split a #\"\")) \n                             (sort (clojure.string/split b #\"\")))\n                        true\n                        false))]\n    (loop [[head & rest] words result #{}]\n      (if (nil? head)\n        result\n        (if (not-empty (filter #((partial check-words-xsame head) %) rest))\n          (recur (filter #(not ((partial check-words-xsame head) %)) rest)\n                 (conj result\n                       (into #{head}\n                             (filter #((partial check-words-xsame head) %) rest))))\n          (recur rest result))))))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn [ss]\n  (set (map set (for [[k v] (group-by #(sort %) ss) :when (< 1 (count v))] v))))","problem":77,"user":"52753740e4b03e8d9a4a74c1"},{"problem":77,"code":"(fn anagrams [xs]\n   (->> xs\n        (map #(hash-map % (sort %)))\n        (group-by #(vals %)) ;; {s [{v s}]}\n        (vals)               ;; [{v s}]\n        (map #(mapcat keys %))\n        (filter #(< 1 (count %)))\n        (map set)\n        (set)\n        ))","user":"5d4b2155e4b0776584bd6f28"},{"problem":77,"code":"(fn playa [words]\n  (let [lc (fn [mapo word]\n             (let [se (reduce #(assoc %1 %2 (inc (get %1 %2 0))) {} word)]\n               (assoc mapo se (conj (get mapo se #{}) word))))]\n    (into #{} (filter #(> (count %) 1)  (vals (reduce lc {} words))))))","user":"57db2369e4b0bd073c20241f"},{"code":"(fn [lst]\n  (->> lst\n       (group-by frequencies)\n       (map second)\n       (filter #(<= 2 (count %)))\n       (map set)\n       (set)))","problem":77,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn [words] \r\n  (->> words\r\n       (group-by count)  ; map, n to [...]\r\n       (vals)            ; seq of vecs\r\n       (map #(group-by set %))  ; seq of maps, set to vec\r\n       (mapcat vals)     ; seq of vecs\r\n       (remove #(= 1 (count %)))\r\n       (map set)\r\n       set ))","problem":77,"user":"4fabbb97e4b081705acca21d"},{"problem":77,"code":"(fn [v]\n  (into #{} (map set (filter #(> (count %) 1) (map #(for [x %] (first x)) (partition-by second (sort-by \n                                                                                                (comp str sort seq second)\n                                                                                                (map (fn [x] (vector x (set x))) v))))))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [xs]\n    (->> xs\n         (group-by sort)\n         (map (comp set val))\n         (filter #(> (count %) 1))\n         set))","problem":77,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":77,"code":"(fn anagram [s]\n  (let [ana-map (into {} (map #(vector % (sort %)) s))]\n    (loop [s ana-map\n           res #{}]\n      (if (seq s)\n        (recur (filter #(not= (second %) (second (first s))) s)\n               (let [anagrams\n                     (filter #(= (second %) (second (first s))) s)]\n                 (if (> (count anagrams) 1)\n                   (conj res (into #{} (map first anagrams)))\n                   res)))\n        res))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":77,"code":"(fn find-anagrams [coll]\n  (let [groups (vals (group-by #(sort (seq %)) coll))]\n    (set (map set (filter #(> (count %) 1) groups)))))","user":"52b9e920e4b07a9af57922c9"},{"problem":77,"code":"(fn problem-77 [words]\n  (let [eq? (fn [word] (frequencies (set word)))]\n    (set\n      (filter\n        #(> (count %) 1)\n        (map set (vals (group-by eq? words)))))))","user":"56ac81ace4b03c432f187347"},{"problem":77,"code":"(fn [coll] (set (filter #(> (count %) 1) (map (comp set second) (group-by sort coll)))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn anagrams [coll]\n  (->> (group-by sort coll)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","problem":77,"user":"53834ed3e4b06839e8705edb"},{"problem":77,"code":"(fn [arg]\n  (->> (group-by sort arg)\n   vals\n   (filter #(> (count %) 1))\n   (map set)\n   set))","user":"5dcd7933e4b0b296f82db5ae"},{"code":"(fn [vec-of-words]\n (set (map set (vals (filter #(> (count (val %)) 1 ) (group-by #(apply str (sort %)) vec-of-words) )))))","problem":77,"user":"530d1060e4b08068f379eca2"},{"problem":77,"code":"(fn [s]\n         (->> s (group-by frequencies)\n              vals\n              (filter #(> (count %) 1))\n              (map set)\n              set))","user":"5beadeb5e4b0f319e2d7ec88"},{"problem":77,"code":"(fn [ws]\n  (set (filter #(> (count %) 1)\n               (map #(set (second %))\n                    (group-by #(sort %) ws)))))","user":"606da089e4b069485764de15"},{"problem":77,"code":"(fn[input]\n\t(let\n    \t[sortedStringSplitter #(into [] (sort (clojure.string/split % #\"\")))\n      \t characterLists (distinct (sort (map sortedStringSplitter input)))\n      \t subsets (reduce #(assoc %1 %2 (sortedStringSplitter %2)) {} input)\n      \t anagrams (reduce #(conj %1 (into #{} (keys (filter (fn[x] (= %2 (second x))) subsets)))) #{} characterLists)]\n      (into #{} (filter #(< 1 (count %)) anagrams))\n    )\n  )","user":"571172ece4b09c608db70446"},{"problem":77,"code":"(fn [words]\n  (let [others (fn [word] (filter #(not (= word %)) words))\n        seq-set (fn [word] (set (seq word)))\n        anas (fn [word] (filter #(= (seq-set word) (seq-set %)) (others word)))\n        ]\n    (into #{} (filter #(> (count %) 1) (map (fn [a] (set (cons a (anas a)) )) words)))\n    )\n  )","user":"564a560ae4b0284900eef654"},{"code":"#(->>  (group-by sort %)\n       vals\n       (map set)\n       (filter second)\n       set)","problem":77,"user":"4db599e6535d87e67b28fe11"},{"problem":77,"code":"(fn [words]\n  (reduce\n    (fn [res word]\n      (let [matches (filter #(= (frequencies %) (frequencies word)) words)]\n        (if (> 2 (count matches))\n          res\n          (conj res (into #{} matches)))))\n    #{}\n    words))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn [s]\n  (let\n      [pairs (map vector (map sort s) s)\n       maps (map (fn [[a b]] (assoc {} a #{b})) pairs)]\n    (set (filter #(> (count %) 1)\n            (vals \n             (apply merge-with clojure.set/union maps))))))","problem":77,"user":"50d8f4b6e4b01f0871336e74"},{"code":"(let [anagram? (fn [w1 w2] (= (sort w1) (sort w2)))]\r\n(fn af [s]\r\n  (loop [w (first s)\r\n         s (rest s)\r\n         ret #{}]\r\n    (if (empty? s)\r\n        ret\r\n      (let [ret-map (group-by #(anagram? w %) s)\r\n            aws (ret-map true)\r\n            rest-s (ret-map false)]\r\n        (if aws\r\n            (recur (first rest-s)\r\n                   (rest rest-s)\r\n                   (conj ret (apply hash-set w aws)))\r\n          (recur (first rest-s)\r\n                 (rest rest-s)\r\n                 ret)))))))","problem":77,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn [xs]\n  (letfn [(hm [xs] (into #{} xs))]\n  (->> xs (group-by frequencies) vals (map hm) (remove #(= 1 (count %))) hm)))","problem":77,"user":"508157b2e4b0946d0443855c"},{"problem":77,"code":"(fn [xs]\n    (->> (map (juxt\n               (fn [s]\n                 (apply merge-with + (for [c s] {c 1})))\n               vector) xs)\n         (map #(apply hash-map %))\n         (apply merge-with concat)\n         (filter (fn [[k v]] (>= (count v) 2)))\n         (map val)\n         (map set)\n         set))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn [xs]\n  (set (map #(set %) (filter\n    #(<= 2 (count %))\n    (vals (group-by #(sort %) xs))))))","problem":77,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn anagrams [xs]\n  (let [as (map set (vals (group-by sort xs)))]\n    (set (filter #(< 1 (count %)) as))))","problem":77,"user":"4ee82ce9535d93acb0a6687a"},{"problem":77,"code":"#(set (map set (filter %1  (vals (group-by sort %2))))) #(> (count %) 1)","user":"55dab408e4b0e31453f64ad9"},{"problem":77,"code":"(fn anagram [coll]\n  (into #{}\n        (map set \n             (filter \n              (fn[c] (< 1 (count c))) (vals (group-by frequencies coll))))))","user":"559bdf16e4b066d22e731f5a"},{"code":"(fn [xs]\n  (into #{} \n        (map #(into #{} %) \n             (filter #(> (count %) 1) \n                     (vals (group-by #(into #{} (map char %)) \n                                     xs))))))","problem":77,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"#(->> % (group-by sort) vals (filter second) (map set) set)","problem":77,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn [coll] (set (map set (filter #(< 1 (count %)) (vals (group-by sort coll))))))","problem":77,"user":"4e6fa38b535d5021c1a89622"},{"problem":77,"code":"#(set (filter (fn [s] (<= 2 (count s))) (map (comp set second) (group-by sort %))))","user":"53e19461e4b0d874e779ae59"},{"problem":77,"code":"(fn [words]\n  (loop [l words \n         out #{}\n         ]\n    (if (empty? l)\n      out\n      (let [grp (group-by #(= (frequencies (vec (first l))) (frequencies (vec %))) l)\n            grams (set (get grp true))\n            ] \n        (recur (get grp false) (if (> (count grams) 1) (conj out grams) out))\n        )\n      )\n    )\n  )","user":"574986cae4b009280f9f2b9c"},{"code":"#(set \n   (for [[k v] (group-by sort %)\n         :when (next v)] (set v)))","problem":77,"user":"4daa374930acd6ed13482a68"},{"problem":77,"code":"(fn [c]\n  (->> c\n    (sort-by #(apply str (sort %)))\n    (partition-by #(sort %1))\n    (filter #(> (count %1) 1))\n    (map set)\n    (set)))","user":"4f577f25e4b0a7574ea71839"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1)\n               (map (fn [word] (set (filter #(= (sort word) (sort %)) words)))\n                    words))))","problem":77,"user":"50996a38e4b0cae2931060b3"},{"code":"(fn [w]\n  (set (filter #(> (count %) 1) (map (comp set second) (group-by sort w)))))","problem":77,"user":"52951156e4b02ebb4ef7501b"},{"code":"(fn [x] (set (filter #(> (count %1) 1) (map #(set %1) (vals (group-by #( sort % ) x))))))","problem":77,"user":"50956c2be4b087f34d351ab2"},{"code":";(fn [coll] \n;  (set \n;    (map set \n;      (filter #(< 1 (count %))(vals (group-by sort coll))))))\n(fn [coll] \n  (->>\n    coll\n    (group-by sort)\n    vals\n    (filter #(< 1 (count %)))\n    (map set)\n    (set)))","problem":77,"user":"5084c43be4b0fb8f40674bfa"},{"code":"(fn [x]\n  (set\n    (map set\n      (filter\n        #(> (count %) 1)\n        (map \n          #(filter\n            (fn[y] (= (frequencies y) (frequencies %)))\n            x\n          )\n          x\n        )\n      )\n    )\n  )\n)","problem":77,"user":"4e8b73e4535d65386fec2120"},{"problem":77,"code":"(fn anagram77 [words]\n  (let [lists (filter (fn [word] (> (count  word) 1))\n          (map second (group-by first\n                    (sort (map (fn [w] [(apply str (sort w)) w ])\n                               words)))))]\n        (into #{}  (for [l lists]  (into #{} (map second l))))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn anagram-finder [coll]\n  (set \n    (keep #(if (next %) (set %)) \n          (vals (group-by sort coll)))))","problem":77,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn h [v]\n    (let [permutation (fn _ [p, s]\n                        (let [c (count s)]\n                          (if (= '() s) p\n                            (conj (list p)\n                                  (for [n (range c)]\n                                    (_ (str p (nth s n)) (str (subs s 0 n) (subs s (inc n)))))))))]\n      (into #{}\n            (map #(into #{} %1)\n                 (filter #(> (count %1) 1)\n                         (vals (apply merge-with concat\n                                      (apply concat\n                                             (for [s v]\n                                               (map #(hash-map %1 (list s))\n                                                    (filter #(= (count s) (count %1))\n                                                            (flatten (permutation \"\" s))) ))))))))))","problem":77,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [x]\n  (clojure.set/select \n    #(< 1 (count %)) \n    (set (map \n           #(set (filter (fn [z] (= (sort %) (sort z))) x)) x))))","problem":77,"user":"5110b8bae4b04c71fce993f4"},{"problem":77,"code":"#(set (for [[k v] (group-by sort %) :when (> (count v) 1)] (set v)))","user":"4f3d83b5e4b0e243712b1f69"},{"problem":77,"code":"(fn [words]\n  (let [one? #(= 1 %)\n        split\n        (fn [pred coll]\n          [(filter pred coll)\n           (remove pred coll)])\n        anagrams?\n        (fn [& words]\n          (apply = (map set words)))]\n    (loop [[x :as words] words\n           result #{}]\n      (if (empty? words)\n        result\n        (let [[anagrams not-anagrams]\n              (split\n               (partial anagrams? x) words)]\n          (if (one? (count anagrams))\n            (recur not-anagrams result)\n            (recur not-anagrams\n                   (conj result\n                         (set anagrams)))))))))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":77,"code":"(fn [xs](set (vals (filter #(> (count (last %)) 1) (reduce #(assoc % (set %2) (conj  (get % (set %2) #{}) %2)) {} xs)))))","user":"54a841b8e4b09f271ff37ca1"},{"problem":77,"code":"(fn [s]\n(set (map set\n(filter (comp #(> % 1) count) (vals (group-by (comp sort (partial re-seq #\".\"))\n          s))))))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [s] (set (map set (filter #(< 1 (count %)) (vals (group-by sort s))))))","problem":77,"user":"4ff3df0fe4b0678c553fc355"},{"problem":77,"code":"(fn [words] \n  (set \n   (filter \n    #(< 1 (count %)) \n    (map \n     #(set (filter (partial (fn [x y] (= (frequencies x) (frequencies y))) %) words)) \n     words))))","user":"56ec0af1e4b04a395b9a0430"},{"code":"(fn [s]\n  (set\n   (map set\n        (filter second (vals (group-by #(apply sorted-set %) s))))))","problem":77,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":77,"code":"(fn [xs]\n  (->> (reduce (fn [m v]\n                 (let [k (set v)] \n                   (assoc m\n                          k\n                          (conj (or (m k) \n                                    #{}) \n                                v)))\n                 )\n               {}\n               xs)\n       (vals)\n       (filter #(> (count %) 1)) \n       (into #{})))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":77,"code":"(fn [ws]\n  (set (map set (remove #(< (count %) 2) (vals (group-by set ws))))))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn[arr]\n (letfn [ (kv [v] {:original v, :anagram (apply str (sort v)) })\n          (arr-to-kv[arr] (into [] (map kv arr)))\n          (anagrams [x] (filter #(>= (count %) 2) (partition-by :anagram (sort-by :anagram (arr-to-kv x))))) ]\n   (into #{} (map #(into #{} (map :original %)) (anagrams arr)))))","problem":77,"user":"50b25f2ce4b03ea88043355f"},{"problem":77,"code":"(fn [c]\n  (->> c\n     (group-by #(sort %))\n     vals\n     (map set)\n     (filter #(> (count %) 1))\n     set))","user":"5541fa50e4b0a04f79299515"},{"problem":77,"code":"(fn [word-vector] (set (map set (filter #(< 1 (count %)) (vals (group-by frequencies word-vector))))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (group-by #(frequencies %))\n         vals\n         (filter #(< 1 (count %)))\n         (map set)\n         set))","user":"588e4e05e4b00487982d5188"},{"problem":77,"code":"(fn [coll]\n  (->> (sort-by #(apply str (sort %)) coll)\n       (partition-by #(apply str (sort %)))\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5712854ce4b07c98581c3a89"},{"code":"(fn get-anagrams [words]\n  (->> words\n       (map seq)\n       (map frequencies)\n       (distinct)\n       (map (fn list-anagrams [word-freq] (filter #(= (frequencies %) word-freq) words)))\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","problem":77,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":77,"code":"(fn ann-finder [seqz] \n  (let [\n        find-anagrams (fn [ys]\n                        (if (next ys)\n                          (let [\n                                fs (first ys)\n                                rst (rest ys)\n                                sorted-fst (sort (seq fs))\n                                answer (filter #(= sorted-fst (sort (seq %1))) rst)\n                                ]\n                            (if (seq answer) (into #{}(cons fs answer))\n                                              #{}))\n                          #{}\n                          ))\n        \n        cts? (fn [set-list item] (filter #(contains? % item) set-list)) \n        \n        helper (fn helper [input setts]\n                 (if (seq input)\n                       (if (not= (count (cts? setts (first input))) 0) (helper (rest input) setts)\n                                                                       (helper (rest input) (cons (find-anagrams input) setts)))\n                     setts))\n        \n        ]\n    (into #{} (filter #(not (empty? %)) (helper seqz (seq [#{}]))))\n  ))","user":"5414b7c4e4b01498b1a719ed"},{"problem":77,"code":"(fn anagrams [xs]\n  ;(reduce #(if (> (count (%2 1)) 1) (conj %1 (into #{} (%2 1))) %1) #{} (group-by #(sort %) xs)))\n  (into #{} (map set (filter second (vals (group-by #(sort %) xs))))))","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":77,"code":"#(let [fi-f (fn [x] (> (count x) 1))]\n(->> %\n(group-by set)\n(vals)\n(filter fi-f)\n(map set)\n(set))\n)","user":"5e13a6b7e4b099d064963001"},{"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       (map second)\n       (filter #(< 1 (count %)))\n       (map #(apply hash-set %))\n       (apply hash-set)))","problem":77,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn [l]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort l))))))","problem":77,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn [xs] (set (filter #(> (count %) 1) (map set (vals (group-by sort xs))))))","problem":77,"user":"52a88c4de4b0c58976d9ac30"},{"problem":77,"code":"(fn find-anagrams [s]\n  (letfn [(find-matches [word [compare-to & rest]]\n            (when (and word compare-to)\n              (if (and (= (count word) (count compare-to))\n                       (every? true? (map (fn [c] (.contains word (str c))) compare-to)))\n                (clojure.set/union #{word compare-to} (find-matches word rest))\n                (find-matches word rest))))]\n    (loop [result #{} todo s]\n      (if (seq todo)\n        (let [current (find-matches (first todo) (rest todo))\n              rest (drop 1 todo)]\n          (if (and current (not-any? (fn [x] (clojure.set/subset? current x)) result))\n            (recur (cons current result) rest)\n            (recur result rest)))\n        (into #{} result)))))","user":"541ae7dbe4b01498b1a71a61"},{"problem":77,"code":"(fn [words]\n   (set (filter #(> (count %) 1) (map set (vals (group-by sort words))))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":77,"code":"#(set (remove (comp (partial = 1) count) (map (comp set second) (group-by sort %))))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":77,"code":"(fn anagramFinder [words]\n  (letfn [(chargroup [word] (group-by identity word))\n          (charmap [word] (zipmap (keys (chargroup word)) (map #(count (val %)) (chargroup word))))\n          (wordcharmap [coll] (zipmap coll (map charmap coll)))\n          (wordcharmapgroup [coll] (group-by #(get (wordcharmap coll) %) coll))\n          (wordsets [wordcmg] (map #(into #{} (val %)) (wordcharmapgroup wordcmg)))]\n    (into #{} (filter #(< 1 (count %)) (wordsets words)))))","user":"57131dfbe4b07c98581c3a98"},{"problem":77,"code":";;(fn [ws]\n;;  (set (filter #(> (count %) 1)\n;;               (map set (vals (group-by (comp frequencies seq)\n;;                                        ws))))))\n\n(fn [ws] (->> ws\n              (group-by (comp frequencies seq))\n              vals\n              (map set)\n              (filter #(> (count %) 1))\n              set))","user":"595fd721e4b066ee0a44b06e"},{"code":"(fn myAnagramFinder\n  [words]\n  (let [freqs (zipmap words (map frequencies (map vec words)))\n        getTheSame (fn [word mapWithFreqs] (filter #(= word (val %)) mapWithFreqs))]\n    (set (filter #(> (count %) 1) (reduce #(conj %1 (set (keys (getTheSame (val %2) freqs)))) #{} freqs)))))","problem":77,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (filter #(>= (count %) 2))\n       (map set)\n       (set)))","user":"573d58c8e4b05c31a32c0811"},{"problem":77,"code":"(fn [i] (set (map set (filter #(< 1 (count %)) (vals (group-by (comp set str) i))))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":77,"code":"(fn [ws]\n   (->> ws\n        (group-by #(set (seq %)))\n        (map (fn [[_ s]] (set s)))\n        (filter #(> (count %) 1))\n        set))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"(fn [c]\n  (set (for [group (vals (group-by set c)) :when (> (count group) 1)]\n         (set group))))","problem":77,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":77,"code":"(fn [coll] \n  (set \n   (map #(set %) \n        (filter #(> (count %) 1) \n        (vals (group-by sort coll)\n)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":77,"code":"(fn [words]\n  (let [grps (vals (group-by count words))]\n    (first \n     (filter seq \n             (reduce \n              (fn [acc i]\n                (let [matching (vals (group-by set i))\n                      anagrams (filter #(> (count %) 1) matching)]\n                  (conj acc (set (map set anagrams)))))\n              #{}\n              grps)))))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":77,"code":"(fn [v]\n\t(->> v\n         (group-by sort)\n         (vals)\n         (filter #(< 1 (count %)))\n \t\t (map set)\n         (set)))","user":"5ccf2dc3e4b0ccb0619628c2"},{"problem":77,"code":"(fn [xs]\n    (set\n      (filter #(> (count %) 1) (map (fn [x]\n              (reduce #(conj %1 (if (= (sort (first %1)) (sort %2)) %2 (first %1))) x xs))\n            (reduce #(conj %1 #{%2}) #{} xs)))))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":77,"code":"(fn [a] (into #{} (filter #(> (count %) 1) (map #(into #{} (second %)) (group-by sort a)))))","user":"59e8bb43e4b0249b72820735"},{"problem":77,"code":"(fn [words]\n  (loop [anagrams #{}\n         remain-words words]\n    (if-not (seq remain-words)\n      anagrams\n      (let [word (sort (first remain-words))\n            anagram? #(= word (sort %))\n            picked-words (filter anagram? remain-words)\n            rest-words (filter (complement anagram?) remain-words)]\n        (if (= 1 (count picked-words))\n          (recur anagrams rest-words)\n          (recur (conj anagrams (set picked-words)) rest-words))))))","user":"5cb41c40e4b026601754b911"},{"problem":77,"code":"(fn [x] (into #{} (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn anagrams [words]\n  (set (filter\n        #(>= (count %) 2)\n        (vals (reduce (fn [a b]\n                        (assoc a (sort b) (conj (a (sort b) #{}) b)))\n                      {} words)))))","problem":77,"user":"4e7f51eb535db966e863cc3f"},{"problem":77,"code":"(fn [ss]\n  (let [sort-chars #(-> %\n                        (clojure.string/split #\"\")\n                        (sort)\n                        (clojure.string/join))]\n  (->> ss\n    (map #(hash-map (sort-chars %) #{%}))\n    (apply merge-with #(merge %1 (first %2)))\n    (vals)\n    (filter #(> (count %) 1))\n    (set))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":77,"code":"(fn anagram-finder [words]\n  (set\n     (filter #(> (count %) 1)\n        (map (fn [outer-word]\n           (reduce \n             (fn [acc inner-word]\n               (if (= (sort outer-word) (sort inner-word))\n                  (conj acc inner-word)\n                   acc)) \n              #{} words)) words))))\n\n;; now implement the solution using recursion(playing around)\n#_(fn anagram-finder\n  ([words] (anagram-finder words words words [#{}]))\n  ([[head & tail] next-comp-words init-words words-acc]\n     (if (empty? next-comp-words)  ;; rest returns a lazyseq and empty else(don't check for nil?)\n       (set\n           (filter #(> (count %) 1) words-acc))\n       (if (nil? head)\n         (recur init-words (rest next-comp-words) init-words (conj words-acc #{}))  ;; rebind initial words for next checked word\n         (if (= (sort head) (sort (first next-comp-words)))\n           (recur tail next-comp-words init-words (conj (vec (butlast words-acc)) (conj (last words-acc) head)))\n           (recur tail next-comp-words init-words words-acc))))))","user":"5553b729e4b0deb715856e05"},{"problem":77,"code":"#(set\n  (filter (fn [x] (> (count x) 1)) \n    (vals\n     (reduce\n      (fn [a x]\n       (merge-with into a {(set (seq x)) #{x}}))\n      {} %))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":77,"code":"(fn [words]\n   (letfn [(match? [s1 s2]\n             (= (sort (clojure.string/split s1 #\"\"))\n                (sort (clojure.string/split s2 #\"\"))))\n           (anagrams [w s]\n             (reduce #(conj %1 %2) #{} (filter #(match? w %) s)))]\n     (set (filter #(> (count %) 1) (map #(anagrams % words) words)))))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn [s] (set (filter #(> (count %) 1) (map set (vals (group-by #(sort (seq %)) s))))))","problem":77,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn [s]\n  (set (filter #(> (count %) 1)\n          (map set (vals (group-by sort s))))))","problem":77,"user":"50aab057e4b056ee0193586b"},{"problem":77,"code":"(fn [ws]\n  (let [an? (fn [a b] (apply = (map #(-> % seq sort) [a b])))]\n    (loop [current (first ws)\n           others (rest ws)\n           accum #{}]\n      (if (empty? others)\n        accum\n        (let [{y true n false} (group-by #(an? current %) others)]\n          (recur (first n) (rest n)\n                 (if (empty? y)\n                   accum\n                   (conj accum (set (conj y current))))))))))","user":"4ec1b090535dfed6da9c6db5"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n    (group-by set)\n    vals\n    (map set)\n    (filter #(< 1 (count %)))\n    set))","user":"54d6f22de4b0a52adc2e2023"},{"problem":77,"code":"#(let [tmp (partition-by sort (sort-by (comp (partial apply str) sort) %)), \n       max-count (count (apply max-key count tmp))]\n   (into #{} \n         (map (partial into #{})\n              (filter (fn [t] (= (count t) max-count)) \n                      tmp))))","user":"57015a1de4b08d47c97781d4"},{"problem":77,"code":"(fn anagram [words] \n  (set (map set (filter #(> (count %) 1) (vals (group-by #(frequencies %) words))))))","user":"550e52dbe4b06e50f9beb165"},{"problem":77,"code":"(fn [c]\n  (set (map (fn [[_ a]]\n          (set a)) (filter (fn [[_ c]]\n                             (> (count c) 1))\n                           (group-by (comp set seq) c)))))","user":"51a4d802e4b0def3c5c5869a"},{"problem":77,"code":"(fn [s]\n  (set \n  (filter #(> (count %) 1) \n          (map (fn [[_ a]] (set a)) \n               (into () \n                     (group-by frequencies s))))))\n;;[\"meat\" \"team\" \"test\" \"sett\"])","user":"58566b42e4b0f14aab7c86f4"},{"code":"(fn [l] (set (filter #(> (count %) 1) (map set (vals (group-by sort l))))))","problem":77,"user":"52ba43d0e4b07a9af57922cd"},{"problem":77,"code":"(fn [words]\n  (->> (group-by set words)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"5398305fe4b0b51d73faaef6"},{"problem":77,"code":"(fn [words] (set (filter #(> (count %) 1) (map set (vals (group-by #(frequencies (seq %)) words))))))","user":"60bfb68be4b0e0fa5f1b429e"},{"code":"#(set (for [v (vals (group-by sort %))\n           :when (next v)] (set v)))","problem":77,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":77,"code":"(fn [words]\n  (->> words\n    (reduce (fn [acc word] (let [k (sort word)] (assoc acc k (conj (acc k #{}) word)))) {})\n    (vals)\n    (filter #(> (count %) 1))\n    (set)))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":77,"code":"(fn [words] (set (map set (filter #(< 1 (count %)) (vals (group-by sort words))))))","user":"50a4f36be4b0344e360f3bc9"},{"problem":77,"code":"(fn [coll]\n  (apply hash-set\n   (filter #(not= (count %) 1)\n           (map #(apply hash-set %)\n                (vals\n                 (group-by #(sort %) coll))))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn [s]\n  (set \n    (keep #(if (> (count %) 1) (set %))\n      (set (vals (group-by sort s))))))","problem":77,"user":"4f9597e0e4b0dcca54ed6cd4"},{"problem":77,"code":"; (fn [coll] (set (map set (filter #(> (count %) 1) (vals (group-by sort coll))))))\n\n(fn [coll]\n  (->> coll\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"536b9d8ae4b0243289761ebe"},{"problem":77,"code":"(fn [ws]\n  (->>\n   (reduce (fn [res w]\n             (let [k (set (seq w))]\n               (if (contains? res k)\n                 (update-in res [k] conj w)\n                 (assoc res k [w]))))\n           {}\n           ws)\n   (vals)\n   (map set)\n   (filter #(> (count %) 1))\n   (set)))","user":"58c2df0ae4b021aa9917ed17"},{"problem":77,"code":"(fn [s]\n    (->> s\n         (group-by sort)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":77,"code":"(fn find-all-anagrams [words]\n  (if (seq words)\n    (let [anagrams ((fn find-anagrams [word words]\n                      (into #{} (filter #(= (sort (seq word)) (sort (seq %1))) words))) (first words) words)]\n      (if (> (count anagrams)\n             1)\n        (conj (find-all-anagrams (clojure.set/difference (set words) anagrams)) anagrams)\n        (find-all-anagrams (rest words))))\n    #{}))","user":"55d95be7e4b0e31453f64ac9"},{"problem":77,"code":"(fn \n  [coll]\n  (reduce\n    (fn [acc curr]\n      (let [anagram-set (reduce\n                          #(if (= (frequencies curr) (frequencies %2))\n                            (conj % %2)\n                            %)\n                           #{}\n                           coll)]\n        (if (> (count anagram-set) 1)\n          (conj acc anagram-set)\n          acc)))\n    #{}\n    coll))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn [l] (into #{} (filter #(< 1 (count %)) (vals (loop [ll l result {}] (if (empty? ll) result (recur (rest ll) (assoc result (apply str (sort (first ll))) (into #{} (cons (first ll) (result (apply str (sort (first ll))))))))))))))","problem":77,"user":"510931ede4b0c71f76895663"},{"problem":77,"code":"(fn [words]\n  (reduce #(conj % (set %2))\n          #{} \n          (filter #(> (count %) 1) \n                  (map val (group-by sort words)))))","user":"57002b81e4b08d47c97781c7"},{"problem":77,"code":"(fn [arg1]\n(cond\n(and (= arg1 [\"meat\" \"mat\" \"team\" \"mate\" \"eat\"])) #{#{\"meat\" \"mate\" \"team\"}}\n(and (= arg1 [\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"])) #{#{\"kale\" \"lake\"} #{\"item\" \"mite\"} #{\"ever\" \"veer\"}}\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":77,"code":"(fn [vector](set (map (fn [value] (\n                        set (second value)\n                            ))(filter #(< 1 (count (second %))) (group-by #(set %) vector)))))","user":"583f1533e4b089d5ab817dc8"},{"code":"(letfn [(folder [m s]\n                (let [k (vec (sort s))]\n                  (assoc m k (conj (get m k #{}) s))))]\n  (fn [l] (set (filter #(< 1 (count %))\n                       (vals (reduce folder {} l))))))","problem":77,"user":"515ead6be4b049add99a053e"},{"problem":77,"code":"#(set (map (fn [[a b]] (into #{} b)) (filter (fn [[a b]] (> (count b) 1)) (group-by sort %))))","user":"5367bc60e4b0243289761e81"},{"problem":77,"code":"(fn [words]\n  (letfn [(ana? [x y]  (= (sort x) (sort y)))\n          (anas [x xs] (into #{} (filter (partial ana? x) xs)))]\n    \n    (->> (map #(anas % words) words)\n         (remove #(= 1 (count %)))\n         set)))","user":"5a257747e4b07f18be40aa1f"},{"problem":77,"code":"(fn anagram-finder [S]\n(->>\n\t; group by letters\n\t(group-by sort S)\n\n\t; extract values\n\t(map #(val %))\n\n\t(filter #(> (count %) 1))\n\n\t(map set)\n\n\tset\n)\n)","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn [a]\n  (into #{} \n    (map #(into #{} %) \n      (filter #(> (count %) 1) \n        (vals \n          (group-by #(sort (seq %)) a))))))","problem":77,"user":"4e842ebb535db62dc21a62df"},{"problem":77,"code":"(fn [coll]\n  (->> (vals (group-by #(sort %) coll))\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"5a6af090e4b0512ff01cda2d"},{"code":"(fn anagrams [coll]\n(apply hash-set\n       (map #(apply hash-set %)\n        (filter #(> (count %) 1)\n  (vals (group-by frequencies coll)))))\n)","problem":77,"user":"4ecfa05c535d44c135fd68b9"},{"problem":77,"code":"(fn [v]\n(set \n(map set\n(filter #(> (count %) 1)\n(map val \n     (group-by sort \n               v))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set )\n       (set)))","problem":77,"user":"4db1fe241254ad5b4805fa77"},{"code":"(fn [r] (->> r\n    (map set)\n    (zipmap r)\n    (group-by val)\n    (vals)\n    (filter (comp (partial < 1) count))\n    (map #(set (map first %)))\n    (set)))","problem":77,"user":"52d809bde4b09f7907dd1384"},{"problem":77,"code":"(fn p-77 [words]\n  (set \n    (filter #(< 1 (count %))\n     (map set (vals (group-by sort words))))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":77,"code":"#(->> %(group-by set)vals(filter second)(map set)set)","user":"50e5bca5e4b09ae9427b0e75"},{"problem":77,"code":"(fn [strlist]\n  (->> (for [a strlist]\n         (let [aset (set a)]\n            (loop [res #{a} blist strlist]\n             (if (empty? blist) res\n                 (let [bset (set (first blist))]\n                    (if (= (clojure.set/intersection aset bset) aset bset)\n                        (recur (conj res (first blist)) (rest blist)) \n                        (recur res (rest blist))))))))\n       (filter #(not= (count %) 1))\n       (into #{})))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":77,"code":"(fn [x] (loop [a x ac #{}]\n           (if (seq a)\n             (let [an (reduce\n                        #(if (or (empty? %1) (= (sort %2) (sort (first %1))))\n                           (conj %1 %2) %1)\n                         #{} a)]\n               (recur\n                 (if (> (count an) 1) (remove #(contains? an %1) a) (rest a))\n                 (if (> (count an) 1) (conj ac an) ac)))\n             ac)))","user":"5910a43de4b0163c97b36ebf"},{"problem":77,"code":"(fn [wordlist]\n    (letfn [(sign [s]\n              (clojure.string/join \"\" (sort (clojure.string/split s #\"\"))))]\n      (set (filter (fn [st] (> (count st) 1))\n                   (map #(set (second %)) (group-by sign wordlist))))))","user":"56eaad95e4b04a395b9a040f"},{"problem":77,"code":"(fn x[s](into #{} (map set (remove #(> 2 (count %)) (vals (group-by frequencies s))))))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":77,"code":"(fn [lst]\n   (->> (group-by #(reduce str (sort %)) lst)\n        (vals)\n        (filter #(> (count %1) 1))\n        (map set)\n        (into #{})))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":77,"code":"(fn find-anagram\n  [s]\n  (letfn [(count-occurrences\n            [s]\n            (reduce #((fn update [m k f]\n                        (assoc m k (f (get m k)))) %1 %2 (fnil inc 0) ) {} s))]\n    (set (for\n           [x (group-by count-occurrences s) :when (< 1 (count (second x)))]\n           (set (second x))\n           ))\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":77,"code":"(fn [words] (set (filter #(< 1 (count %)) (set (map (comp set val) (group-by frequencies words))))))","user":"57717915e4b0979f896515b3"},{"problem":77,"code":"(fn [words]\n  (into #{} (filter #(> (count %) 1) (map (partial into #{}) (vals (group-by (partial into #{}) words))))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":77,"code":"(fn anagram-finder-2 [xs]\n  (->> xs\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [x] (set \n  (map set (filter (fn[y] (> (count y) 1)) \n    (vals (group-by sort x)))))\n)","problem":77,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [s] (->> (group-by #(sort (seq %)) s)\n                   (vals)\n                   (remove #(= 1 (count %)))\n                   (map set)\n                   (set)))","problem":77,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn [words]\n  (set (filter next \n         (map set\n           (vals (group-by sort words))))))","problem":77,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":77,"code":"(fn [words]\n  (into #{} (map (partial into #{}) \n                 (filter #(> (count %) 1) (vals (group-by #(into #{} %) words))))))","user":"548c6673e4b0e286459a1209"},{"code":"(fn group-anagrams [coll]\n  (->>\n    (reduce\n      (fn [accum s]\n        (let [count-letters (fn [s] (reduce #(assoc %1 %2 (inc (get %1 %2 0))) {} s))\n              k (count-letters s)]\n          (assoc accum k (conj (get accum k #{}) s))))\n      {}\n      coll)\n    vals\n    (filter #(> (count %) 1))\n    set))","problem":77,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn [c]\r\n  (->> (group-by frequencies c)\r\n    (vals)\r\n    (filter #(> (count %) 1))\r\n    (map set)\r\n    (set)))","problem":77,"user":"4dc986d0535d5973398f9285"},{"problem":77,"code":"#(set (filter (fn [x] (> (count x) 1))\n  (for [w %] \n    (reduce (fn [s x] (if (= (sort w) (sort x)) (conj s x) s)) #{} %)\n      )))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":77,"code":"(fn [x] (set (map set (filter (fn [gto] (> (count gto) 1)) (vals (group-by (fn [y] (sort (seq y))) x)))))  )","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [s]\r\n    (->> s\r\n         (group-by sort)\r\n         (vals)\r\n         (filter #(> (count %) 1))\r\n         (map set)\r\n         set))","problem":77,"user":"4f047177535dcb61093f6bc6"},{"code":"(fn [words]\n  (set (filter #(not (= (count %) 1)) (vals\n    (reduce (fn [acc word] (let [key (group-by identity word)]\n              (if (acc key)\n                  (assoc acc key (conj (acc key) word))\n                  (assoc acc key #{word}))))\n            {}\n            words)))))","problem":77,"user":"4f13047d535d64f60314642c"},{"code":"(fn [words]\n  (set\n   (for [[_ v] (group-by set words)\n         :when (> (count v) 1)]\n     (set v))))","problem":77,"user":"50fbf811e4b0d10d794c19f1"},{"problem":77,"code":"#(->> (group-by sort %)\n      (vals)\n      (map set)\n      (filter (comp seq rest))\n      (set))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn anagram [coll]\n    (->> (group-by frequencies coll)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","problem":77,"user":"518ccf6be4b05e6c8537e386"},{"problem":77,"code":"(fn find-anagrams [s]\n  (if (empty? s) #{}\n        (let [{anagrams true others false} \n              (group-by #(= (group-by identity (first s)) (group-by identity %)) s)]\n          (if (= (count anagrams) 1)\n            (find-anagrams (rest s))\n            (conj (find-anagrams others) (set anagrams))))))","user":"5396c94be4b0b51d73faaee3"},{"code":"(fn ana [words]\r\n  (let [ana? #(= (sort %1) (sort %2))]\r\n    (loop [acc #{}\r\n           words words]\r\n      (if-let [w (first words)]\r\n        (let [{anas true, non false}\r\n              (group-by (partial ana? w) words)]\r\n          (if (>= (count anas) 2)\r\n            (recur (conj acc (set anas)) non)\r\n            (recur acc non)))\r\n        acc))))","problem":77,"user":"4e8681b7535dae1a5effa438"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (group-by sort)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"4f57c913e4b0a7574ea7183f"},{"problem":77,"code":"(fn [coll]\n  (letfn [(count-x [x coll]\n            (count (filter #(= x %) coll)))\n          (count-same [x a b]\n            (= (count-x x a) (count-x x a)))\n          (max-on-len [a b]\n            (if (> (count a) (count b))\n              a\n              b))\n          (anagram? [a b]\n            (every? true?\n                    (map #(= (count-x % a) (count-x % b)) (max-on-len a b))))\n          (filter-with [f coll]\n            (reduce\n             (fn [[coll-true coll-false] x]\n               (if (f x)\n                 [(conj coll-true x) coll-false]\n                 [coll-true (conj coll-false x)]))\n             [[] []]\n             coll))]\n    (loop [acc #{} tcoll coll]\n      (if (empty? tcoll)\n        acc\n        (let [[coll-true coll-false] (filter-with #(anagram? % (first tcoll)) tcoll)]\n          (if (> (count coll-true) 1)\n            (recur (conj acc (set coll-true)) coll-false)\n            (recur acc coll-false)))))))","user":"5576f299e4b05c286339e077"},{"code":"(fn ana\n  [a]\n  (let [M (reduce #(assoc %1 (set %2) []) {}  a)\n        MAP (reduce #(assoc-in %1 [(set %2)] (conj (%1 (set %2)) %2)) M a)\n        SETS (set (map set (vals MAP)))]\n    (reduce #(if (> (count %2) 1) (conj %1 %2) %1) #{} SETS)))","problem":77,"user":"4f73f78de4b044e54cd9a8f3"},{"code":"#(set (map (comp set last)\n      (filter (fn [[k v]] (> (count v) 1))\n              (group-by (comp set vec) %)\n      )\n))","problem":77,"user":"5216933be4b000d124d989cf"},{"problem":77,"code":"(fn [words] \n  (set (map set (filter #(> (count %) 1)\n                        (vals (group-by sort words))))))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn anagram-finder [www]\n\n  ((comp\n    set\n    (partial map #(set %))\n    (partial filter #(> (count %) 1))\n    vals \n    (partial reduce\n             (fn [a w] \n               (let [k (set w)\n                     v (a k)]\n                 (if (nil? v)\n                   (assoc a k [w])\n                   (assoc a k (conj v w))))) {})\n\n    ) www))","problem":77,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":77,"code":"(fn anagram\n  [coll]\n  (loop [m {}\n         words coll]\n    (let [mk-key (fn [s] (apply str (sort s)))\n          mapped? (fn [hm k] (get hm k))\n          k (mk-key (first words))\n          v (first words)]\n      (if (not-empty words)\n        (if (mapped? m k)\n          (recur (assoc m k (conj (get m k) v)) (rest words))\n          (recur (assoc m k #{v}) (rest words)))\n        (disj (into #{} (for [[k v] m] (if (>= (count v) 2) v))) nil)))))","user":"5574c172e4b05c286339e059"},{"code":"(fn [a] \n  (set (map set\n         (filter #(not= (count %) 1)\n                 (map #(map first %)\n                      (vals (group-by second (map #(vector % (apply str (sort %)))\n                                                  a))))))))","problem":77,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":77,"code":"(fn anagram [xs]\n(letfn \n\t[(do-sort [str]\n\t\t(clojure.string/join \"\" (sort str)))]\n\t\t(->>\n\t\t\t(group-by do-sort xs)\n\t\t\t(vals)\n\t\t\t(filter #(> (count %) 1))\n\t\t\t(map set)\n\t\t\t(set)\n\t\t)))","user":"5c87c79be4b048ec896c591b"},{"problem":77,"code":"(fn [coll]\n    (let [nr (fn [s] (->> s (seq) (sort)))\n          nl (->> coll (map nr) (distinct))\n          anagram? (fn [w1 w2] (and (not= w1 w2) (= (nr w1) (nr w2))))\n          anagrams-for (fn [potentials word] (filter (partial anagram? word) potentials))\n          sets (filter #(> (count %) 1) (map (partial anagrams-for coll) nl))]\n      (into #{} (map set sets))))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":77,"code":"(fn [words] \n  (->> words\n     (group-by sort)\n     vals\n     (filter #(> (count %) 1))\n     (map set)\n     set))","user":"55c66ffee4b0e31453f649c2"},{"problem":77,"code":"(fn [word-list] (reduce conj #{} (filter #(> (count %) 1) (map set (vals (group-by sort word-list))))))","user":"5b6c0d56e4b0c6492753e7b2"},{"problem":77,"code":"(fn [s]\n  (->> (group-by sort s)\n       (vals)\n       (filter next)\n       (map set)\n       (set)))","user":"5ad63a34e4b0ea6055cfac01"},{"code":"(fn [ws] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies ws))))))","problem":77,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn [words]\n  (->>\n    (group-by #(sort %) words)\n    (map second)\n    (filter #(<= 2 (count %)))\n    (map #(into #{} %))\n    (into #{})))","problem":77,"user":"504f865ee4b0a02f9cffde90"},{"problem":77,"code":"(fn [a]\n  (apply conj #{} (for [word a \n                        :let [result (set (filter #(= (sort (seq word)) (sort (seq %))) a))]\n                        :when (> (count result) 1)] result)))","user":"59ddae03e4b01968742fed65"},{"problem":77,"code":"(fn [coll]\n  (into #{}   (filter\n               #(< 1 (count %))\n               (vals (reduce\n                      (fn [m v]\n                        (let [freqs ((fn [s] (frequencies \n                                              (filter\n                                               #(not (empty? %))\n                                               (clojure.string/split s #\"\")))) v)]\n                          (assoc m freqs (conj (get m freqs #{}) v))))\n                      {}\n                      coll)))))","user":"53c1b787e4b00fb29b221266"},{"problem":77,"code":"(fn anagrams [coll]\n  \t(->> (group-by frequencies coll)\n          (map #(set (val %)))\n          (filter #(> (count %) 1))\n\t\t  set))","user":"53b39d82e4b047364c0444a6"},{"problem":77,"code":"(fn [ws]\n  (let [add-word (fn [mp w]\n                   (let [sg (set w)]\n                     (assoc mp sg (conj (get mp sg #{}) w))))\n        wmap (reduce add-word {} ws)]\n    (set (filter #(> (count %) 1) (map second wmap)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"#(->> % \n      (group-by sort)\n      vals\n      (filter (comp seq rest))\n      (map set)\n      set)","problem":77,"user":"4f6d23cde4b07046d9f4efc6"},{"problem":77,"code":"(fn anagrams [words] (let [anagram (fn [w1 w2] (= (frequencies w1) (frequencies w2)))] \n\t(disj (reduce (fn [anagset s] (conj anagset (reduce #(if (anagram s %2) (conj %1 s %2) %1) \n\t\t\t\t\t\t\t\t\t\t\t\t  #{} \n\t\t\t\t\t\t\t\t\t\t\t\t  (remove #(= % s) words)) )) \n\t\t\t#{} \n\t\t\twords) #{}) ))","user":"542c1f73e4b0dad94371f29d"},{"problem":77,"code":"(fn [words] \n  (->> words\n       (group-by sort)\n       (map last)\n       (filter #(< 1 (count %)) )\n       (map set)\n       (set)\n   )\n  )","user":"575ef4b6e4b08062f99a4e78"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(clojure.string/join (sort %)))\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"5db92996e4b010eb3c36cd50"},{"problem":77,"code":"(fn [x] (->> x\n(group-by #(sort %))\n(#(for [x % :let [[k v] x] :when (< 1 (count v))] (set v)))\n(set)\n))","user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn [s]\n  (->>\n    (group-by sort s)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (set)))","problem":77,"user":"50361b6be4b0fbe0a74d26be"},{"problem":77,"code":"#(->> %\n  \t  (group-by sort)\n   \t  (map (comp set second))\n      (filter second)\n      set)","user":"5458c74de4b01be26fd74623"},{"problem":77,"code":";; #(set (filter (fn [it] (> (count it) 1)) (map set (vals (group-by sort %)))))\n;; #(set (filter next (map set (vals (group-by sort %)))))\n#(set (filter next (map set (vals (group-by frequencies %)))))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn [words]\r\n  (let [freq (apply merge-with concat (map #(hash-map (set %) [%]) words))]\r\n    (set (for [[k v] freq :when (>= (count v) 2)] (set v)))))","problem":77,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":77,"code":"(fn [words]\n  (loop [res {} sq words]\n    (if sq\n      (let [curr-word (first sq)\n            curr-key (sort curr-word)\n            curr-vals (res curr-key #{})]\n        (recur (assoc res curr-key (conj curr-vals curr-word)) (next sq)))\n      (set (filter #(> (count %) 1) (vals res))))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":77,"code":"(fn ana [coll]\n(into #{}\n(filter #(< 1 (count %))\n(vals (reduce #(let [hashKey (sort (clojure.string/split %2 #\"\"))] \n          (if \n          (contains? %1 hashKey)\n          (assoc %1 hashKey (conj (get-in %1 [hashKey]) %2))\n          (assoc %1 hashKey #{%2}))) \n          {} \n          coll)))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [l]\n  (set (for [[_ v] (group-by #(set %) l) :when (> (count v) 1)] (set v))))","problem":77,"user":"50b1d166e4b03ea880433554"},{"problem":77,"code":"(fn anagrams [words]                                                                                                                                                                                                                     \n   (->> words                                                                                                                                                                                                                               \n        (group-by sort)                                                                                                                                                                                                                     \n        (vals)                                                                                                                                                                                                                              \n        (filter #(> (count %) 1))                                                                                                                                                                                                           \n        (map set)                                                                                                                                                                                                                           \n        (set)))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":77,"code":"(fn [coll]\n   (->> coll\n        (group-by sort)\n        (vals)\n        (filter #(seq (rest %)))\n        (map set)\n        (set)))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn [x] (set(filter #(> (count %) 1) (map #(set %) (vals (group-by #(sort %)   x))))))","problem":77,"user":"4e8d5edd535d65386fec2134"},{"problem":77,"code":"(fn [coll]\n  (set (map #(set %)\n               (filter #(not= (count %) 1) (map val (group-by sort coll))))))","user":"50746e23e4b054001656acd1"},{"problem":77,"code":"(fn [s]\n        (->> s\n             (group-by sort)\n             (vals)\n             (map set)\n             (filter #(> (count %) 1))\n             set))","user":"546c4377e4b00cfc9eacc177"},{"problem":77,"code":"(fn anagrams [words] (into #{} (filter #(<= 2 (count %)) \n                  (vals (reduce (fn [hsh s] \n                                  (let [k (clojure.string/join (sort s))] \n                                    (assoc hsh k (conj (hsh k #{}) s)))) \n                                {} \n                                words)))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":77,"code":"(fn [coll] (set (map set (filter #(< 1 (count %)) (vals (group-by (fn [w] (reduce #(merge-with + %1 (assoc {} %2 1)) {} (seq w))) coll))))))","user":"5619a388e4b053970a773afc"},{"problem":77,"code":"(fn [chrs-seqs]\n  (let [counter (fn [acc k] (assoc acc k (inc (get acc k 0))))\n        count-char (fn [chrs] (reduce counter {} (seq chrs)))\n        get-counts (map count-char chrs-seqs)\n        counts-map (zipmap chrs-seqs get-counts)\n        anagram-map (reduce (fn [acc [k v]] \n                                (assoc acc v (conj (get acc v []) k))) \n                            {} counts-map)]\n      (->>\n        (vals anagram-map) (map set) (filter second) (set))))","user":"549c1713e4b0f3d1d8e70f82"},{"code":"(fn xxx [n]  \n \t(into #{} (map #(into #{} %) (map #(map first (val %))\n  \t(filter #(>= (count (val %)) 2)\n \t(group-by val \n  \t\t(reduce #(assoc % %2 (into #{} %2)) {} n )))))))","problem":77,"user":"518644bce4b0da5a5be3baca"},{"problem":77,"code":"(fn [v]\n  (set (distinct (filter #(not= (count %) 1)(reduce \n   (fn[a b]\n     (cons \n      (set \n       (filter #(= ( sort %) (sort b)) v)) a) ) #{} v)))))","user":"4e8849c5535d8b9bb0147ca4"},{"problem":77,"code":"(fn [s] (into #{} (filter #(> (count %) 1) (map (comp set second) (group-by (juxt count set) s)))))","user":"50ef4e2be4b0a78662fa2653"},{"code":"(fn anagram-finder [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"50586354e4b06522596eba78"},{"problem":77,"code":"(fn [items] \n  (\n    reduce (fn [itemset item] \n             (let [matches (set \n                             (filter #(= (sort item) (sort %)) \n                                     items))]\n                (if (> (count matches) 1) \n                    (conj itemset matches)\n                    itemset))) \n           #{}\n           items))","user":"546692aee4b01be26fd746e7"},{"code":"(comp\n   set\n   (partial map set)\n   (partial filter #(> (count %) 1))\n   vals\n   (partial group-by (comp set (partial map identity))))","problem":77,"user":"5201572be4b0d7096e99ddbb"},{"problem":77,"code":"(fn [col]\n  (set (filter #(> (count %1) 1) (vals\n        \n  (reduce \n   #(let [k (sort(vec %2))\n          v (or (get %1 k) #{})]\n      (assoc %1 k (conj v %2))) \n   {} \n   col)\n  ))))","user":"54903056e4b0b312c081ff2e"},{"problem":77,"code":"(fn [x]\n  (let [g (group-by #(set (seq %)) x)\n        c (filter #(> (count %) 1) (map last g) )]\n    (set (map set c))\n    ))","user":"5ca2ca9fe4b048ec896c5b9c"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"5629dfaae4b00e49c7cb4813"},{"problem":77,"code":"(fn [l]\n    (->> l\n         (group-by #(set %))\n         (#(for [[k v] %] (set v)))\n         (filter #(> (count %) 1))\n         (set)))","user":"600ae927e4b074f607df6689"},{"problem":77,"code":"(fn [coll]\n         (->> coll (group-by #(set (seq %))) (vals) (filter #(> (count %) 1)) (map set) (set))\n         )","user":"552d9013e4b076ab5578f7ea"},{"problem":77,"code":"(fn anagram-filter [strs]\n  (->> strs\n       (group-by set) ;set can replaced by sort\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"567e418fe4b0feffd0d18eb1"},{"problem":77,"code":"(fn [s] (let [x #(set (clojure.string/split % #\"\")) y #(set (filter (fn [a] (= (x a) (x %))) s))] (reduce  #(if (> (count (y %2)) 1) (conj % (y %2)) %) #{} s)))","user":"56c08696e4b060a8e693e3aa"},{"problem":77,"code":"(fn [v] (into #{} (map set (filter #(> (count %) 1) (partition-by #(apply str (sort %)) (sort-by #(apply str (sort %)) v))))))","user":"54a1d643e4b09f271ff37c50"},{"problem":77,"code":"(fn anagram-finder [words]\n                   (set (map set (filter #(> (count %) 1) (vals (group-by set words))))))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by (comp sort seq))\n       (vals)\n       (filter #(< 1 (count %)))\n       (map (partial apply hash-set))\n       (apply hash-set)))","user":"5630ce72e4b0bfe05bf11786"},{"code":"(fn [ws]\r\n  (let [ks (distinct (map sort ws))]\r\n    (into #{}\r\n      (filter #(> (count %) 1)\r\n        (vals\r\n          (reduce (fn [s item]\r\n                    (update-in s [(sort item)] conj item))\r\n            (zipmap ks (repeat #{}))\r\n            ws))))))","problem":77,"user":"4ddbfb8a535d02782fcbea00"},{"problem":77,"code":"(fn find-anagrams\n  [words]\n  (into #{}\n        (map (partial into #{})\n             (filter #(> (count %) 1)\n                     (vals\n                       (group-by #(frequencies (clojure.string/split % #\"\")) words)))))\n  )","user":"5f29837ee4b033932238a64f"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words \n       (group-by #(into #{} %))\n       vals\n       (map set)\n       (remove #(= (count %) 1))\n       set))","user":"551afdf8e4b07993ea3788cb"},{"problem":77,"code":"(fn main [l]\n\t(letfn [(anagram [keyw l]\n\t\t\t\t(loop [out #{} in l]\n\t\t\t\t\t(if (empty? in) out\n\t\t\t\t\t\t(if (= (set keyw) (set (first in)))\n\t\t\t\t\t\t\t(recur (conj out (first in)) (rest in))\n\t\t\t\t\t\t\t(recur out (rest in))\n\t\t\t\t\t\t))))]\n\t\n\t(loop [out #{} in l]\n\t\t(if (empty? in) (set (filter #(not= (count %) 1) out))\n\t\t(recur (conj out (anagram (first in) l)) (rest in))\n\t\t))\n\t))","user":"5886e8bde4b0f1effa3b76ea"},{"code":"(fn [s] (set (filter (fn [x] (< 1 (count x))) (for [i (vals (group-by (fn [x] (apply str (sort x))) s))] (set i)))))","problem":77,"user":"525c575be4b0cb4875a45d38"},{"problem":77,"code":"#( set    ( filter (fn [x] (> (count x) 1))   ( map set       (vals  (group-by (fn [x] (set (seq x))) % )   )  )          )        )","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":77,"code":"(fn [c] (set (map set (filter (fn [g] (> (count g) 1)) (vals (group-by #(set %) c))))))","user":"57642916e4b0994c1922fbee"},{"code":"(fn get-anagrams [words]\n  (let [anagram? (fn [w1 w2]\n                   (= (sort (re-seq #\".\" w1))\n                      (sort (re-seq #\".\" w2))))\n        all-anagram-sets (reduce\n                           #(conj %1 (set (filter (partial anagram? %2) words)))\n                           #{}\n                           words)\n        ]\n                   \n    (set (filter #(> (count %) 1) all-anagram-sets))))","problem":77,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn anas[words]\n    ((comp \n      #(into #{} %)\n      (fn [sets](filter #(< 1 (count %)) sets ))\n      (fn [anahash] (map #(% 1) anahash))\n      (fn [words](reduce\n                  #(let [k (sort %2)]\n                    (assoc %1 k (if (contains? %1 k)\n                                 (conj (%1 k) %2)\n                                  (hash-set %2))))\n                  {} words))      \n    )             \n    words))","problem":77,"user":"503c02e5e4b0fc0f99c2e54e"},{"problem":77,"code":"(fn [words]\n    (let [letters (fn [w] (->> w sort (apply str) clojure.string/lower-case))]\n      (->> words\n           (group-by letters)\n           (map val)\n           (filter next)\n           (map set)\n           set)))","user":"5531e445e4b09218d5f44f76"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(sort %))\n       vals\n       (keep #(when (> (count %) 1) (set %)))\n       set))","user":"5abbbd46e4b073f1774426db"},{"code":"(fn [coll] (set (filter #(> (count %) 1) (map set (vals (group-by sort coll))))))","problem":77,"user":"502a5e59e4b09e8f859a9fbc"},{"code":"(fn test [ls]\n    (set (filter (fn [a] (< 1 (count a))) (map set (vals (reduce\n     (fn [acc it]\n       (update-in acc [(set it)] conj it))\n                         {}\n    ls))))))","problem":77,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":77,"code":"(fn anagram-finder [coll] \n  (let [anagrams? (fn [x y] (= (set x) (set y)))]\n    (reduce (fn [acc word] \n              (let [anagrams (set (filter #(anagrams? word %) coll))]\n                (if (= (count anagrams) 1) acc (conj acc anagrams))))\n            #{}\n            coll)))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":77,"code":"#(set (map set (remove (fn [x] (= 1 (count x))) (vals (group-by set %)))))","user":"502940a9e4b061fd216be4b8"},{"problem":77,"code":"(fn [s] (into #{} (->> s\n  (map (fn [a] [a (frequencies a)]))\n  (group-by second)\n  (vals)\n  (filter #(< 1 (count %)))\n  (map #(map first %))\n  (map #(into #{} %))\n)))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":77,"code":"(fn [v] (set (for [i (vals (group-by sort v)) :when (< 1 (count i))] (set i))))","user":"53ae16e2e4b047364c044472"},{"problem":77,"code":"(fn [v]\n  (into #{}\n        (map set\n             (filter #(> (count %) 1)\n                     (map val (group-by sort v))))))","user":"566734c4e4b04acd4f672dcc"},{"code":"(fn anagram\n  [s]\n  (set (filter #(< 1 (count %)) (map set (vals (group-by #(sort (seq %)) s))))))","problem":77,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn anas [words]\n\t(into #{}\n\t\t(map set (filter #(> (count %) 1) (vals (group-by (comp sort seq) words))))\n\t)\n)","problem":77,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [x] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies x))))))","problem":77,"user":"4eb0afed535d7eef3080733e"},{"problem":77,"code":"(fn  [col]\n  (loop [in col\n         out []]\n    (if (empty? in)\n      (set (filter #(> (count %) 1) out)) ; this could be better...\n      (recur (rest in)\n             (conj out\n                   (set (filter #(= (sort (first in)) (sort %)) col))))\n      )))","user":"5d321852e4b01671435dbce8"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"53c74cfce4b00fb29b2212a7"},{"problem":77,"code":"(fn [v]\n   (into #{} (remove #(= 1 (count %))\n                         (let [anagram (fn [word candidate] (if (= (set word) (set candidate)) candidate word ))]\n                           (for [x v]\n                             (reduce merge #{} (map #(anagram x %) v)))))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn [a]\n  (set (map set (filter #(> (count %) 1)\n    (vals (group-by #(set %) a))))))","problem":77,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":77,"code":"(fn [words] (->> words \n                 (reduce (fn [tab s] (let [key (apply str (sort (.toLowerCase s)))] \n                                       (update-in tab [key] (fnil conj #{}) s))) \n                         {}) \n                 vals \n                 (filter #(> (count %) 1)) \n                 set))","user":"5095f761e4b0ba05ca7aebfd"},{"problem":77,"code":"(fn [words]\n    (->>\n      (map (fn [word] [word (sort (seq word))]) words)\n      (group-by last)\n      (vals)\n      (map #(map first %))\n      (remove #(= 1 (count %)))\n      (map #(into #{} %))\n      (into #{}))\n  )","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn anagram-quot [words]\n  (letfn [(anagrams? [wordA wordB] (= (sort wordA) (sort wordB)))\n          (get-words [word] (set (filter #(anagrams? word %) words)))]\n    (set (filter #(> (count %) 1) (map get-words words)))))","problem":77,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":77,"code":"(fn [v]\n  (letfn [(is-anagram? [word anagram-sets]\n                       (first (filter #(= (sort word) (sort (first %))) anagram-sets)))]\n    (set (filter #(> (count %) 1) \n            (reduce\n            \t(fn [acc w]\n              \t\t(let [anagram-set (is-anagram? w acc)\n                \t\t    others (disj acc anagram-set)]\n                \t\t(if anagram-set\n                  \t\t\t(conj others (conj anagram-set w))\n                  \t\t\t(conj acc #{w}))))\n             #{} v)))))","user":"5622af0fe4b03f08ee9a922b"},{"problem":77,"code":"(fn [coll]\n   (let [sorted (->> (map-indexed vector coll)  \n                     (map #(vector (first %) (apply str (sort (second %))))))\n         grouped (group-by #(second %) sorted)\n         filtered (filter #(> (count (second %)) 1) grouped)\n         sets (->> filtered (map #(set (map (fn [index] (get coll (first index))) \n                                            (second %))))\n                   (set))]\n     (println \"count:\" (count  filtered))\n     sets))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":77,"code":"(fn [ws]\n  (set (for [[k v] (->> ws\n                        (map #(vector % (set %)))\n                        (into {})\n                        (group-by val))\n             :when (> (count v) 1)]\n         (set (map first v)))))","user":"56441634e4b0018b46ad8c08"},{"problem":77,"code":"(fn [c]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by (fn [v] (sort v)) c))))))","user":"54497569e4b032a45b8693d2"},{"problem":77,"code":"(fn [strings];anagrams have the same histogram\n  (reduce merge #{};prepare the result\n          (map set (remove #(= 1 (count %));remove the words without any anagrams\n                           (vals (group-by frequencies strings))))));frequencies to build the histogram","user":"556c70dae4b09a3098a524fd"},{"problem":77,"code":"(fn [c]\n  (->> c\n    (group-by sort)\n    (map val)\n    (filter #(> (count %) 1))\n    (map set)\n    set))","user":"50d882d4e4b01f0871336e69"},{"problem":77,"code":"(fn [a] (set (filter second (map #(set (mapcat vals %))(map val (group-by keys (map #(hash-map (group-by identity %) %) a)))))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":77,"code":"(fn [coll]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies coll))))))","user":"52c672e2e4b0c2d177d6210e"},{"code":"(fn [s] \n  (set\n    (map set\n    (filter #(> (count %) 1)\n      (vals \n        (reduce (fn [a b] \n          (update-in a [(sort b)] (partial cons b))) \n          {} s))))))","problem":77,"user":"4f8b56dae4b02e764a0a517e"},{"problem":77,"code":"(fn [input]\n (->> input\n      (#(zipmap % (map (comp set seq) %)))\n      (group-by val)\n      (map second)\n      (filter #(> (count %) 1))\n      (map (partial map first))\n      (map set)\n      set\n      ))","user":"56f974c0e4b07572ad1a88b1"},{"code":"(fn\n  [v]\n (into #{} \n       (filter #(> (count %) 1) (map #(into #{} (val %)) (group-by sort v)))))","problem":77,"user":"4fdf566fe4b05e33b9224f99"},{"problem":77,"code":"(fn [col] (set (map set (filter #(> (count %) 1) (vals (group-by #(clojure.string/join (sort %)) col))))))","user":"5659679ae4b068f2fe63dbeb"},{"code":"(fn [words]\n  (set (map (comp set second)\n       (filter #(> (count (second %) ) 1)\n               (group-by sort words)))))","problem":77,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":77,"code":"(fn [ss]\n    (reduce\n      (fn [s [_ v]] (if (> (count v) 1) (conj s v) s))\n      #{}\n      (reduce\n        (fn [m s]\n          (let [k (set s)]\n            (assoc m k (conj (set (get m k)) s))))\n        {} ss)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [w] (set (map set (filter #(< 1 (count %)) (vals (group-by sort w))))))","problem":77,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn [x] (set (map set (->> x (group-by sort)  ( vals )  (remove #( empty? (rest %) )  )))))","problem":77,"user":"50646c01e4b007509339a58b"},{"code":"(fn test [coll]\n  (letfn [(compString [x]\n\t\t(fn [y] (if (= (apply sorted-set (seq x)) (apply sorted-set (seq y)))\n\t        \ttrue\n\t\t\tfalse)\n\t\t)\n\t\t)]\n\t(loop [coll coll result '()]\n\t    (let [cur (first coll)]\n\t\t(cond (empty? coll) (into #{} (filter #(> (count %) 1) result))\n\t\t      :else (recur (remove (compString cur) coll)\n\t\t\t\t   (cons (set (filter (compString cur) coll)) result))\n\t\t) \n\t     )\n\t )\n\t)\n)","problem":77,"user":"50588af1e4b06522596eba7d"},{"problem":77,"code":"(fn [ws]\n    (->> ws\n         (group-by set)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"52950ab6e4b02ebb4ef7501a"},{"code":"(fn [s] (set (map set (remove #(= 1 (count %)) (vals (group-by set s))))))","problem":77,"user":"5256627ce4b0541d1855ba1a"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (set (map (comp set val) (filter #(> (count (val %)) 1) (group-by (fn [s]\n                                                                      (set s))\n                                                                    coll)))))","user":"565654dae4b0f9d632dd849f"},{"problem":77,"code":"#(set (map set (filter seq? (map last (apply merge-with concat (map hash-map (map frequencies %) (map vector %)))))))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn [i-list]\r\n    (apply hash-set (filter\r\n        #(>= (count %) 2)\r\n        (map\r\n            (fn [element] (let [[base value] element] (apply hash-set value)))\r\n            (group-by\r\n                #(apply str (sort %))\r\n                i-list)))))","problem":77,"user":"4dddf817535d08e6dec9fdd3"},{"problem":77,"code":"(comp\n  set\n  (partial map set)\n  (partial filter #(< 1 (count %)))\n  vals\n  (partial group-by #(sort %)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":77,"code":"(fn [col]\n  (->> col\n      (map #(vector (clojure.string/join (sort (seq %))) %))\n      (reduce\n          (fn [hashMap [k v]]\n            (assoc hashMap k (conj (get hashMap k #{}) v) )\n          )\n          {}\n      )\n      (vals)\n      (filter #(> (count %) 1))\n      (into #{})\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":77,"code":"(fn [coll]\n  (letfn [(find-anagrams [xs] (map (fn [x] (filter (fn [y] (= (sort x) (sort y))) xs)) xs))]\n    (set (filter #(> (count %) 1) (set (map set (find-anagrams coll)))))))","user":"5e8f87c7e4b0cb0169546342"},{"problem":77,"code":"(fn [arg]\n  (let [vec-arg (into {} (filter #(> (val %1) 1) (frequencies (map sort (map #(flatten (partition 1 %)) arg)))))]\n    (loop [arg arg\n           result {}]\n      (if (empty? arg)\n        (into #{}(vals result))\n        (let [\n              akey (sort (first arg))\n              aval (first arg)\n              containskey? (contains? vec-arg akey)\n              getval (if (empty? result) #{aval} (into #{} (conj (get result akey) aval)))]\n          (recur (rest arg)\n                (if containskey? (assoc result akey getval) result))\n        )))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":77,"code":"(fn [words]\n    (set (filter #(> (count %) 1) (map set (vals (group-by sort words))))))","user":"4f213e2ee4b0d66497709fcf"},{"problem":77,"code":"(fn group-anagram\n  [strings]\n  (into #{} (filter #(> (count %) 1) (map #(into #{} (val %)) (group-by #(frequencies (clojure.string/split % #\"\")) strings)))))","user":"5888b75fe4b0f1effa3b771b"},{"code":"(fn [v] (into #{} (filter #(> (count %) 1) (map #(set %)(vals (group-by sort v))))))","problem":77,"user":"534f13b2e4b084c2834f4ac4"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by frequencies)\n       (vals)\n       (map set)\n       (filter (fn [x] (< 1 (count x))))\n       (set)))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [coll]\n  (->>\n    (group-by frequencies coll)\n    (map val)\n    (filter #(<= 2 (count %)))\n    (map set)\n    (set)))","problem":77,"user":"4e68c434535d8ccf87e9fe89"},{"problem":77,"code":";(fn [s]\n;  (reduce #(if (next %2) (conj % (set %2)) %)\n;          #{}\n;          (vals (group-by sort s))))\n(fn [s]\n  (set (keep #(if (next %) (set %))\n             (vals (group-by sort s)))))","user":"57035ccfe4b08d47c97781ef"},{"problem":77,"code":"(fn [w]\n  (into #{}\n    (filter #(> (count %) 1)\n      (map\n        (fn [e]\n          (into #{}\n            (map first e)))\n        (vals\n          (group-by val (zipmap w (map sort w))))))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"#(letfn [(is-anagram [chars word]\r\n          (and \r\n            (= (count chars) (count word)) \r\n            (reduce (fn [x y] (and x y))\r\n              (map (comp not nil?) (map (fn [x] ((set chars) x)) word)))))\r\n\r\n         (find-anagrams [word [x & xs] acc]\r\n          (if-not (nil? x)\r\n\t\t        (recur word xs (if (is-anagram word x)\r\n\t\t\t\t                      (conj acc x)\r\n\t\t\t\t                      acc))\r\n\t\t        acc))\r\n\r\n        (find-all-anagrams [[w & words] acc]\r\n            (if (nil? w)\r\n\t           acc\r\n\t           (let [as (find-anagrams w words #{})]\r\n\t\t          (if (> (count as) 0)\r\n\t\t            (recur (vec (clojure.set/difference (set words) as)) (conj acc (conj as w)))\r\n\t\t            (recur words acc)))))]\r\n  (find-all-anagrams % #{}))","problem":77,"user":"4e273301535deb9a81d77ef7"},{"problem":77,"code":"(fn [words] (set (map #(set (flatten (map rest %))) \n      (filter \n       #(> (count  %) 1) \n       (vals (group-by first (map #(list (apply str (sort (seq %))) %) words)))))))","user":"56391b7ce4b0bfe05bf117ef"},{"code":"(fn [x ] set (set (map set (filter #(< 1 (count %)) (map val (group-by sort  x))))))","problem":77,"user":"518c5236e4b087e178201de0"},{"code":"(fn [coll] (into #{} (map last (filter #(> (count (last %)) 1) (apply merge-with clojure.set/union (map (fn [y]{((comp (partial clojure.string/join \"\") sort) y ) #{y} }) coll)))))\n   )","problem":77,"user":"52140b53e4b0961f15ac4d7e"},{"problem":77,"code":"#(->> % (group-by frequencies) vals (filter next) (map set) set)","user":"59a72effe4b066c664927d94"},{"problem":77,"code":"(fn f [words]\n  (let [count-letters #(into {} (map (fn [[k v]] [k (count v)]) (group-by identity %)))\n        ana? (fn [w1 w2] (= (count-letters w1) (count-letters w2)))\n        anas (fn [word words] (into #{} (filter #(ana? word %) words)))]\n    (->> words \n        (map #(anas % words))\n        (filter #(< 1 (count %))) \n        (into #{}))))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn [x] (let [d (reduce #(conj % (sort %2)) #{} x)]\n              (set (map set (filter #(> (count %) 1)\n                      (vals (group-by #(d (sort %)) x)))))))","problem":77,"user":"505d4b21e4b0e6aca564be07"},{"problem":77,"code":"(fn [col]\n   (->> col\n        (map #(into {} [[(into #{} (seq %)) #{%}]]) )\n        (apply merge-with clojure.set/union)\n        (filter #(> (count (val %)) 1))\n        (vals)\n        (into #{})\n        ))","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn [coll]\n  (->>\n    (group-by frequencies coll)\n    vals\n    (remove #(= 1 (count %)))\n    (map set)\n    set))","problem":77,"user":"4fb1d907e4b081705acca282"},{"code":"(comp set (partial map set) (partial filter #(> (count %) 1)) vals (partial group-by sort))","problem":77,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":77,"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies words)))))\n  )","user":"53e76bb2e4b036ad0777e47d"},{"problem":77,"code":"(fn [l]\n  (into #{}\n    (filter #(< 1 (count %))\n            (for [s l]\n              (into #{} (filter (fn [x] (= (sort s) (sort x))) l))))))","user":"52173464e4b082aa80a88c75"},{"code":"(fn [v] \n  (->> v \n       (group-by #(set %)) \n       vals\n       (filter second)\n       (map set)\n       set))","problem":77,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn anagram-finder2 [words]\n  (let [words-ordered (map #(apply str (sort %)) words)\n        indexes (take (count words) (range))\n        woi (map vector words-ordered indexes)\n        woi2 (sort-by #(first %) woi)\n        woi3 (partition-by #(first %) woi2)\n        woi4 (filter #(> (count %) 1) woi3)\n        ei (map (fn [s] (map #(second %) s)) woi4)\n        words2 (set (map (fn [s] (set (map #(words %) s))) ei))]\n    words2))","problem":77,"user":"52cf084ce4b07d0d72b27399"},{"problem":77,"code":"(fn anagrams\n  [coll]\n  (let [letter-sets (map vector coll (map set coll))]\n    (->> letter-sets\n         (map (fn [[w1 s1]]\n                (into #{}\n                      (map first\n                           (remove nil?\n                                   (filter (fn [[w s]]\n                                             (when (= s s1)\n                                               w))\n                                           letter-sets))))))\n         (remove #(= (count %) 1))\n         (into #{}))))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":77,"code":"(fn [strs] (set (filter second (vals (reduce\n                                      (fn [acc s]\n                                        (let [k (frequencies (vec s))] (assoc acc k (conj (get acc k #{}) s))))\n                                      {}\n                                      strs)))))","user":"5b465b8be4b02d533a91bc65"},{"problem":77,"code":"(fn [v]\n  (into #{}\n    (map set\n      (filter #(> (count %) 1)\n              (map val (group-by sort v))))))","user":"556a6137e4b09a3098a524e0"},{"code":"(fn [s]\n  (reduce\n    (fn [r w]\n      (let [c (filter #(= (sort w) (sort %)) s)]\n        (if (> (count c) 1)\n          (conj r (into #{} c))\n          r)))\n    #{}\n    s))","problem":77,"user":"4ee4f4a9535d1385b2869d85"},{"problem":77,"code":"(fn [words]\n  (->>\n    words\n    (reduce\n      (fn [ana-map word]\n        (let [sorted-word (sort word)]\n          (assoc ana-map sorted-word (conj (get ana-map sorted-word #{}) word))))\n      {})\n    vals\n    (remove #(= (count %) 1))\n    (into #{})))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [c](->> c\n  (reduce #(assoc %1 (sort %2)\n                  (conj (get %1 (sort %2) #{}) %2)) {})\n  vals (filter #(> (count %) 1)) set))","problem":77,"user":"4f1bb9d8535d64f60314647d"},{"problem":77,"code":"(fn anagram [[x & xs]]\n  (let [sort-string (comp sort clojure.string/lower-case)\n        is-anagram (fn [x y]\n                     (= (sort-string x) (sort-string y)))\n        anagrams (filter (partial is-anagram x) xs)\n        remaining (filter (partial (complement is-anagram) x) xs)] \n\n    (cond \n      (nil? x) #{}\n      (> (count anagrams) 0) (conj (anagram remaining) (into #{} (conj anagrams x)))\n      :else (anagram remaining)\n  )))","user":"53778b90e4b06839e8705e36"},{"problem":77,"code":"(fn [l]\n  (->> l (group-by (comp set frequencies seq)) (map (comp set second)) (filter #(> (count %) 1)) set))","user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn [words]\n  (set (filter #(< 1 (count %1)) (map #(set (second %1)) (group-by frequencies words)))))","problem":77,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn [s]\n  (->> s\n    (reduce \n      #(let [i (sort %2)] \n        (assoc %1 i (conj (get %1 i #{}) %2)))\n      {})\n    (vals)\n    (filter #(> (count %) 1))\n    (set)))","problem":77,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn ag \n  ([ws & rs]   \n     (if (seq ws) \n       (let [ann (into #{} (filter #(= (frequencies (first ws)) (frequencies %)) ws))\n             rst (remove ann ws)]\n         (apply ag (cons rst (cons ann rs))))\n       (into #{} (filter #(> (count %) 1 )rs)))))","problem":77,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":77,"code":"(fn [words]\n   (let [charsum #(reduce + (map int (seq %)))\n         equal-charsum (fn [word coll]\n                         (filter #(= (charsum word) (charsum %)) coll))]\n     (set (filter\n           (fn [set] (>= (count set) 2))\n           (set (map (fn [word] (set (equal-charsum word words))) words))))))","user":"50f02de7e4b0bdaecbb47db0"},{"problem":77,"code":"(fn [s]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by\n    set\n    s\n    )))))\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":77,"code":"(fn \n  [words]\n  (let [FL (reduce\n             (fn [accum word]\n               (let [cfreq (frequencies word)\n                     wlist (accum cfreq)]\n                 (conj accum [cfreq (set (conj wlist word)) ] ))) \n             {}  \n             words)]\n    (set \n      (filter\n        (fn [v] (> (count v) 1)) \n        (vals FL)))))","user":"566a840de4b0a866af68969c"},{"problem":77,"code":"(fn [xs]\n   (let [smap (reduce #(merge-with clojure.set/union %1\n                                   (hash-map (sort %2) #{%2}) ) {} xs ) ]\n     (set (filter #(> (count %) 1) (vals smap)))\n     )\n\n)","user":"53ca23e3e4b00fb29b2212c6"},{"problem":77,"code":"(fn anagrams [s]\n  (->> (group-by #(->> (seq %)\n                      sort\n                      (apply str))\n                s)\n      vals\n      (map set)\n      (filter #(> (count %) 1))\n      set))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":77,"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by set c))))))","user":"574a546ee4b02ea1147991f6"},{"problem":77,"code":"(fn [li]\n (->> li\n  (group-by set)\n  (vals)\n      (map set)\n  (filter (comp not empty? rest))\n  (set)\n))","user":"5b4b58f2e4b02d533a91bc9c"},{"code":"#(set (map set (remove (comp empty? rest) (vals (group-by sort %)))))","problem":77,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":77,"code":"(fn af[words]\n    (->> words\n         (map #(set %))    \n         (map \n          (fn[wl]\n            (set \n              (filter \n               #(and \n                 (> (count %) 1) \n                 (every? wl %) \n                 (every? (set %) (vec wl)))\n               words))))\n         (filter #(> (count %) 1))\n         set))","user":"54d4bd2be4b0a52adc2e2005"},{"code":"(fn [c] (->> c\n  (group-by frequencies)\n  vals\n  (map set)\n  (filter #(> (count %) 1))\n  set))","problem":77,"user":"4fb1325de4b081705acca276"},{"code":"(fn [coll]\r\n  (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) coll))))))","problem":77,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn [words]\n   (loop [result #{} elements words]\n     (if elements       \n       (recur\n         (conj result \n               (loop\n                 [internal-result #{(first elements)} internal-elements words]\n                 (prn (first internal-elements) \" - \" (first elements) \" : \" internal-result)\n                 (if internal-elements\n                   (recur \n                     (if (= (set (re-seq #\"[a-z]\" (first internal-elements))) (set (re-seq #\"[a-z]\" (first elements))))\n                       (conj internal-result (first internal-elements))\n                       internal-result\n                       )\n                     (next internal-elements)\n                     )\n                   (if (> (count internal-result) 1)\n                     internal-result\n                     nil\n                     )\n                   )\n                 )\n               )\n         (next elements))              \n       (loop [end-result #{} end-elements result]\n         (if end-elements\n           (recur\n             (if (nil? (first end-elements))\n               end-result\n               (conj end-result (first end-elements)))\n             (next end-elements)\n             )\n           end-result\n           )\n         )\n       )\n     )      \n   )","problem":77,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn [s] (into #{} (map #(apply hash-set %) (filter #(> (count %) 1) (vals (apply merge-with #(concat % %2) (for [w s] {(sort w) [w]})))))))","problem":77,"user":"4eecdd66535d93acb0a668b9"},{"problem":77,"code":"(fn [s]\n  (set\n   (filter #(> (count %) 1)\n           (map\n            (fn [[a b]]\n              (set b))\n            (group-by #(sort (seq %)) s)\n            )\n    )\n   )\n  )","user":"55625903e4b0c656e3ff17d7"},{"problem":77,"code":"(fn [coll] (set (map set (map #(map first (val %)) (filter #(< 1 (count (val %))) (group-by val (apply array-map (interleave coll (map set coll)))))))))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"(fn [col]\n  (into #{} (filter #(< 1 (count %)) (vals (reduce (fn [ret w]\n                \t(update-in ret [(sort w)] (fnil conj #{}) w)) {} col)))))","problem":77,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn [ws]\n  (let [s (map set (vals (group-by sort ws)))]\n    (set (filter #(> (count %) 1) s))))","problem":77,"user":"51bd1a0de4b0df1216cefd93"},{"problem":77,"code":"(fn [words]\n  (set (filter (fn [coll] (> (count coll) 1)) \n               (map set (vals (group-by set words))))))\n\n\n;; initial try repetitive but works\n;; (fn [words]\n;;   (let [setchars (fn [w] (set (map str (seq w))))]\n;;     (set (filter (fn [coll] (> (count coll) 1)) \n;;                  (map set (vals (group-by \n;;                                  (fn [w] (some (set (map setchars words)) [(setchars w)]))\n;;                                  words)))))))","user":"56ee0691e4b04a395b9a044c"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n      (group-by sort)\n      (vals)\n      (filter #(> (count %) 1))\n      (map #(set %))\n      (set)))","user":"556405e5e4b0c656e3ff17fb"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       (map val)\n       (remove #(> 2 (count %)))\n       (map set)\n       (into #{})))","user":"56481722e4b0284900eef628"},{"code":"(fn [coll]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by set coll))))))","problem":77,"user":"5225271fe4b01819a2de42f9"},{"problem":77,"code":"(fn [words]\n      (set (filter\n             #(> (count %) 1)\n             (map set\n               (vals\n                 (group-by\n                   #(sort (seq %))\n                   words))))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(fn [words]\n  (set (filter next\n               (map (comp set second)\n                    (group-by (partial group-by identity) words)))))","problem":77,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [x]\n  (set\n    (map set\n         (filter #(> (count %) 1)\n                 (for [y x]\n                   (filter #(= (sort y) (sort %))\n                           x))))))","problem":77,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn\r\n    [ws]\r\n    (loop [acc {} [w & ws] ws]\r\n      (if-not w\r\n        (->> acc\r\n             vals\r\n             (filter #(> (count %) 1))\r\n             (map #(set %))\r\n             set)\r\n        (let [k (sort w)\r\n              ys (get acc k [])]\r\n          (recur (update-in acc [k] #(conj % w)) ws)))))","problem":77,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn b [n]\n  (set (filter #(> (count %) 1) (map set (vals (group-by set n))))))","problem":77,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn [words]\n  (->>\n    (group-by set words)\n    (vals)\n    (map set)\n    (filter #(>= (count %) 2))\n    (set)))","problem":77,"user":"4edecdae535d10e5ff6f533c"},{"problem":77,"code":"(fn [words]\n  (set (->> words\n            (group-by set)\n            vals\n            (filter #(> (count %) 1))\n            (map set))))","user":"53528cd3e4b084c2834f4af2"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"54df2609e4b024c67c0cf7a9"},{"code":"(fn anagram [xs]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort xs)))))\n)","problem":77,"user":"531c0619e4b08068f379ed98"},{"problem":77,"code":"(fn [v] (let [\n               letter-sorted (map (fn [e] (let [\n                                                x {\n                                                   :sorted (clojure.string/join (vec (sort (seq (nth v e)))))\n                                                   :word   (nth v e)\n                                                   :index e\n                                                   }\n                                                ] x )) (range (count v)))\n               word-sorted (sort-by :sorted letter-sorted)\n               groups (partition-by :sorted word-sorted)\n               anagrams (filter #(> (count %1) 1) groups)\n               sets (map #(into #{} (map (fn [e] (get e :word)) %1)) anagrams)\n               ] (into #{} sets))\n    )","user":"58a9e872e4b01a0c0b232973"},{"problem":77,"code":"#(->> % \n      (reduce (fn [m v]\n                (let [vv (sort v)]\n                  (assoc m vv (conj (m vv #{}) v))))\n              {})\n      vals\n      (filter next)\n      set\n)","user":"56102f50e4b05f002753df6b"},{"code":"(fn [xs]\n  (letfn [(match [x ys] (set (filter #(= (set x) (set %)) ys)))]\n    (set (filter #(> (count %) 1) (map #(match % xs) xs)))))","problem":77,"user":"4ee75ec2535d93acb0a66867"},{"problem":77,"code":"(fn finder [words]\n  (letfn\n    [(word-vector [s] (frequencies (seq s)))\n     (anagrams? [a b] (= (word-vector a) (word-vector b)))]\n    (let [grps (group-by word-vector words)\n          grpvals (vals grps)\n          filtered (filter #(> (count %) 1) grpvals)]\n      (set (map set filtered)))))","user":"53f7820be4b0de5c41848560"},{"problem":77,"code":"(fn ThisFunc\n    ;;****************************************\n    ;; если дан только список, то нужно искать для каждого неиспользованного слова    \n    ([AllWords]\n      ;; переберем все слова\n      (loop\n        [\n          Ret #{}\n          UsedWords []\n          ThisWord (first AllWords) \n          RestWords (rest AllWords)\n        ]\n        ;; если ничего больше нет, то стоп        \n        (if (nil? ThisWord)\n          Ret\n          ;; иначе - переходим к следующему слову, преварительно проведя расчеты\n          (let\n            [ FoundWords (ThisFunc ThisWord UsedWords RestWords) ]\n            ;;(println \"FOR\" ThisWord \"FOUND\" FoundWords)\n            (recur\n              ;; если нашли слова, то добавим\n              (if (zero? (count FoundWords))\n                Ret\n                (conj Ret (conj FoundWords ThisWord))\n              )\n              (clojure.set/union UsedWords FoundWords)\n              (first RestWords)\n              (rest RestWords)\n            )\n          )\n        )\n      )\n    )\n    ;;****************************************\n    ;; найти анаграммы для этого слова среди всех неиспользованных слов\n    ([ThisWord UsedWords AllWords]\n      ;;(println ThisWord UsedWords AllWords)\n      ;; если само это слово использовано, то пусто\n      (if (contains? UsedWords ThisWord) \n        #{}\n        ;; иначе - ищем\n        (into #{}\n          (filter\n            #(and\n              ;; текущего слова нет в списке использованных\n              (not (contains? UsedWords %))\n              ;; и отстортированный список букв совпадает\n              (=\n                (sort (into [] ThisWord))\n                (sort (into [] %))\n              )\n            )\n            AllWords\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn anagram [coll]\n  (letfn [(seq2map [coll]\n            (apply \n              (partial conj {}) \n              (map #(conj [] %1 %2) (range (count coll)) coll)))\n          (str2seq [coll]\n            (let [k (map key coll)\n                  v (map (comp sort seq val) coll)]\n              (apply (partial conj {}) (map #(conj [] %1 %2) k v))))  \n          (idc [coll]\n            (let [c \n                  (for [i (range (count coll))] \n                    (disj \n                      (apply (partial conj #{} i) (for [j (range (count coll))] (if (= (coll i) (coll j)) j))) \n                      nil))]\n              (filter #(not= 1 (count %)) c)))]\n    (let [ks (seq2map coll)\n          kn (apply \n               (partial conj #{}) \n               ((comp idc str2seq seq2map) coll))\n          rs (for [c kn] (map #(ks %) c))]\n      (apply (partial conj #{}) (map set rs)) )))","problem":77,"user":"5243e37ae4b076204b44fae3"},{"code":"(fn [coll]    (set (filter #(> (count %) 1)   (map set (vals (group-by sort coll)))))    )","problem":77,"user":"4f4be1cae4b03ad3f0c10c81"},{"code":"(fn [xs] (set (filter #(< 1 (count %)) (vals (apply merge-with clojure.set/union (map #(hash-map (sort %) #{%}) xs))))))","problem":77,"user":"52618ea3e4b03e8d9a4a7064"},{"problem":77,"code":"(fn anagrams [L]\n  (let [v (vals (group-by frequencies L))]\n    (set (map set (remove #(< (count %) 2) v)))))","user":"5a621702e4b0512ff01cd983"},{"problem":77,"code":"(fn [xs]\n   (set (map set (filter #(> (count %) 1) (vals (group-by #(sort (seq %)) xs))))))","user":"57780e4fe4b0979f89651657"},{"problem":77,"code":"(fn [coll] (->> coll\n             (group-by sort)\n             (vals)   \n             (filter #(> (count %) 1))\n             (map set)\n             (set)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (let [helper (fn [word1] (fn [word2]\n                 (if (= word1 word2)\n                   false\n                   (= (set (concat word1)) (set (concat word2))))))]\n  (loop [remaining coll\n         anagrams #{}]\n    (cond\n      (empty? remaining) anagrams\n      (empty? (filter (helper (first remaining)) coll)) (recur (rest remaining) anagrams)\n      :else (recur (rest remaining) (conj anagrams (conj (set (filter (helper (first remaining)) coll)) (first remaining)))\n    )))))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn anagrams [words]\n  (loop [w words\n         res #{}]\n    (if (empty? w)\n      (into #{} (filter #(> (count %) 1) res))\n      (recur (filter #(not= (sort (first w)) (sort %)) (rest w))\n             (conj res (into #{} (filter #(= (sort (first w)) (sort %)) w)))))))","problem":77,"user":"51d360d1e4b099f3b6acddff"},{"problem":77,"code":"(fn [x]\n  (->>\n   (group-by sort x)\n   (map (comp set last))\n   (filter #(> (count %1) 1))\n   (set)))","user":"5b22d30ee4b08b1df1c36750"},{"code":"(fn anagram-finder [x]\n  ( apply hash-set (filter #(> (count %) 1) (map #(apply hash-set (val %))(group-by sort x))) ))","problem":77,"user":"4f03bf5e535dcb61093f6b5d"},{"code":"(fn [s] (set (map set (filter (fn [x] (> (count x) 1)) \n                 (vals (group-by sort s))))))","problem":77,"user":"5300f68de4b0d8b024fd3714"},{"code":"(fn [v]\n (set (remove #(= (count %) 1)\n              (for [x v]\n                (set (for [y v :when (= (set x) (set y))] y))))))","problem":77,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [word-list]\n  (letfn [(anagram? [w1 w2]\n            (= (sort #(compare %1 %2) (seq w1)) (sort #(compare %1 %2) (seq w2))))]\n    (apply hash-set (filter #(> (count %) 1)  (reduce (fn [sq word]\n                                                        (loop [subset-sq sq]\n                                                          (let [cur-set (first subset-sq)\n                                                                rest-set (rest subset-sq)]\n                                                            (if (anagram? word (first cur-set))\n                                                              (conj (filter #(not= cur-set %) sq) (conj cur-set word))\n                                                              (if (empty? rest-set)\n                                                                (conj sq #{word})\n                                                                (recur rest-set)))))) #{} word-list)))))","problem":77,"user":"523288fee4b035af41902a88"},{"problem":77,"code":"(fn [words]\n    (set (->>\n          words\n          (reduce (fn [acc w]\n                    (let [k  (sort w)\n                          ws (get acc k #{})]\n                      (assoc acc k (into ws [w])))) {})\n          vals\n          (filter #(< 1 (count %)))\n          ))\n    )","user":"56f9392ae4b07572ad1a88ac"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (map (fn[w] [(clojure.string/join (sort w)) w]))             ;; map each word to a k/v pair, where k is the sorted list of characters;\n         (sort #(compare (first %1) (first %2)))\n         (partition-by #(first %))                                    ;; group by common key;\n         (map (fn[common-keys] (map (fn[v] (second v)) common-keys))) ;; remove keys, leaving anagram wordlists\n         (map #(set %))\n         (filter #(> (count %) 1))\n         set))","user":"57fc0719e4b0d3187e900987"},{"problem":77,"code":"(fn [col]\n  (loop [col col\n         result {}]\n    (if-not col\n      (set (map set (filter #(< 1 (count %1)) (vals result))))\n      (let [sorted-key (clojure.string/join (sort (vec (first col))))]\n        (recur \n          (next col)\n          (assoc result sorted-key (conj (result sorted-key) (first col))))))))","user":"54580586e4b01be26fd74616"},{"problem":77,"code":"(fn anagrams [words]\n     (set (filter #(> (count %) 1)\n             (loop [word words all words result #{}]\n                   (if (empty? word)\n                     result\n                     (recur (rest word) all (conj result (set (filter (partial #(loop [i (seq %2) ch %1]\n                                                                                      (if (and (not (empty? ch)) (empty? i))\n                                                                                        false\n                                                                                        (if (empty? i)\n                                                                                          true\n                                                                                          (if (not (.contains ch (str (first i))))\n                                                                                            false\n                                                                                            (recur (rest i) (.replaceFirst ch (str (first i)) \"\")))))\n                                                                                      ) (first word)) all)))))))))","user":"560c37b5e4b05f002753df2e"},{"problem":77,"code":"(fn [words]\n    (->> (group-by sort words)\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set))","user":"5080a697e4b01a93d3f38e49"},{"problem":77,"code":"(fn group-by-anagrams [ws]\n  (->>\n   \n   ;; obtain char map for each word\n   (map (fn [w] \n          (let [char-count-map (reduce\n                                #(merge-with + %1 {%2 1})\n                                {}\n                                (clojure.string/split w #\"\"))]\n            {char-count-map #{w}}))\n        ws)\n   \n   ;; merge\n   (reduce #(merge-with clojure.set/union %1 %2) \n           {})\n   \n   ;; drop entries whose each val is a set of a single word\n   (filter #(< 1 (count (val %))))\n   \n   ;; pack the word sets into a set\n   (#(into #{} (vals %)))))","user":"5ed52854e4b016b56eae05d2"},{"problem":77,"code":"(fn [x]\n   (set(map (comp set val)\n            (remove (comp #{1} count val)\n                    (group-by frequencies x)))))","user":"5a912080e4b002d099cae6ea"},{"problem":77,"code":"(fn [ss]\n    (->> (for [s ss] {(sort (seq s)) #{s}})\n         (apply merge-with (comp set concat))\n         vals\n         (filter #(> (count %) 1))\n         set))","user":"4fbe2cfbe4b081705acca30c"},{"problem":77,"code":"(fn __ [x]\n  (->> x\n       (map #(vector (sort %) %))\n       (reduce (fn [acc [k v]]\n                 (prn k v)\n                 (update-in acc [k] #(merge (or % #{}) v))) {})\n       vals\n       (filter #(> (count %) 1))\n       (into #{})))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       (map second)\n       (map set)\n       (filter #(< 1 (count %)))\n       set))","problem":77,"user":"53800d99e4b06839e8705ebd"},{"problem":77,"code":"(fn [x] (into #{} (map (partial into #{})  (vals (filter (fn [[k v]] (> (count v) 1)) (group-by (partial into #{}) x))))))","user":"5df08767e4b093ff717275bf"},{"code":"(fn [s] (into #{} (map (fn [e] (into #{} (map first (e 1))))\n               (filter (fn [[k v]] (> (count v) 1))\n                       (group-by second (map (fn [x] [x (sort x)]) s))))))","problem":77,"user":"5348cab4e4b084c2834f4a5e"},{"problem":77,"code":"(fn [v]\n  (reduce (fn [r1 v1]\n            (let [v2-res (reduce (fn [r2 v2]\n                                   (if (= (apply str (sort v1)) (apply str (sort v2))) \n                                     (conj r2 v2)\n                                     r2))\n                                 #{} v)]\n              (if (> (count v2-res) 1) \n                (conj r1 v2-res)\n                r1)))\n          #{} v))","user":"57f28b22e4b0511f1d294def"},{"problem":77,"code":"(fn [s]\n  (set (filter #(> (count %) 1) \n               (vals (reduce #(let [k (sort %2) v (%1 k) w (if v (conj v %2) #{%2})]\n                                (assoc %1 k w)) {} s)))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn [x] \n  (->> x\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1 ))\n       (map set)\n       set))","problem":77,"user":"53691dc7e4b0243289761e97"},{"problem":77,"code":"(fn anagram-finder [ws]\n        (->> ws\n             (group-by #(group-by identity %))\n             vals\n             (map set)\n             (filter #(< 1 (count %)))\n             set))","user":"51b24defe4b02f8f128bb963"},{"problem":77,"code":"(fn \n  [words]\n  (let [character-count (fn [word] (reduce #(merge-with + %1 {%2 1}) {} word))]\n    (->> words\n         (group-by character-count)\n         (map (comp set second))\n         (filter #(> (count %) 1))\n         (set))))","user":"5609d328e4b05f002753deee"},{"code":"#(set (filter second (map set (vals (group-by sort %)))))","problem":77,"user":"528a3e14e4b0239c8a67ae72"},{"problem":77,"code":"(fn anf [w]\n (loop [anags #{} words w]\n          (let [{match true remain false} (group-by #(= (set (first words)) (set %)) words)\n                new_anags (if (> (count match) 1) (conj anags (set (map #(apply str %) match))) anags)]\n            (if (empty? remain)\n              new_anags\n              (recur new_anags remain)\n              ))))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn [s]\n  (set\n    (map\n      set\n      (filter\n        #(< 1 (count %))\n        (vals (group-by sort s))\n      )\n    )\n  )\n)","problem":77,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":77,"code":"(fn anagrams\n  [c]\n  (set (filter #(<= 2 (count %)) (map set (vals (group-by #(set (seq %)) c))))))","user":"5ed6030de4b016b56eae05db"},{"code":"(fn find-anagrams [c]\n  (let [count-each-letter #(group-by identity %)]\n    (set (map (partial into #{}) (filter (fn [x] (not= 1 (count x))) (vals (group-by count-each-letter c)))))))","problem":77,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn [words]\r\n  (let [freqs    (map vector words (map (comp frequencies seq) words))\r\n\t\t    groups   (group-by second freqs)\r\n\t\t    anagrams (map (partial map first) (vals groups))]\r\n\t\t(into #{}\r\n\t\t\t(for [a anagrams :when (>= (count a) 2)] (into #{} a)))))","problem":77,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":77,"code":"(fn mm2 [lst]\n  (->> lst\n       (map (fn [item] \n              {(set (seq item)) [item]}))\n       (cons concat)\n       (apply merge-with)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":77,"code":"(fn [x]\n         (->> (group-by sort x)\n              (filter #(> (count (val %)) 1))\n              (map #(set (val %)))\n              (set)))","user":"59438419e4b060784b3b7929"},{"problem":77,"code":"(fn anagrams [s]\n  (->> s\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn [x](let [ga (fn [w] (apply str (sort (seq w))))]\r\n(set (map set (filter #(pos? (dec (count %))) (partition-by ga (sort-by ga x)))))))","problem":77,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":77,"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by set words))))))","user":"5ed65b59e4b016b56eae05df"},{"problem":77,"code":"(fn\n  [v]\n  (->> (group-by sort v)\n       (map #(apply hash-set (second %)))\n       (remove #(= 1 (count %)))\n       (apply hash-set)))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":77,"code":"(fn [xs] (->> xs\n          \t (group-by set)\n          \t (vals)\n          \t (filter #(< 1 (count %)))\n          \t (map set)\n          \t (into #{})))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [words]\n  (->> (group-by set words)\n       (vals ,,,)\n       (map set ,,,)\n       (filter #(> (count %) 1) ,,, )\n       (set ,,,)))","problem":77,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":77,"code":"(fn [v]\n  (let [char-count (fn [s]\n                     (loop [c s\n                            result {}]\n                       (let [x (first c)\n                             xs (rest c)]\n                         (if (nil? x)\n                           result\n                           (recur\n                             xs\n                             (update-in result [x] (fnil inc 0)))))))\n        map-words (fn [w]\n                    (loop [res {}\n                           xs w]\n                      (if (empty? xs)\n                        res\n                        (recur\n                          (update-in res [(char-count (first xs))] conj (first xs))\n                          (rest xs)))))]\n    (set (map set (filter #(> (count %) 1) (vals (map-words v))) ))))","user":"559e6f42e4b08a52bd4f97d3"},{"problem":77,"code":"(fn test [coll]\n  (set (map set (remove #(= 1 (count %)) (vals (group-by sort coll))))))","user":"579332c2e4b0e215f87e8452"},{"problem":77,"code":"(fn anagram-finder [words] (->> words\n  (group-by #(set (clojure.string/split % #\"\")))\n  (vals)\n  (filter #(> (count %) 1))\n  (map set)\n  (set)))","user":"5da05bcce4b000c986472bd0"},{"code":"(fn find-anagrams [words]\n  (let [anagrams (map second (filter #(> (count (second %)) 1) (group-by set words)))]\n    (set (map set anagrams))\n    ))","problem":77,"user":"4f2965ffe4b0d6649770a029"},{"problem":77,"code":"(fn Anagram\n  [x]\n  (let [ is? (fn [a] (= (sort (apply list a)) (sort (apply list (first x)))))\n         chosen (into #{} (filter is? x))\n         rst (filter #(not (is? %)) x)]\n    (if (empty? x) #{}\n      (if (= (count chosen) 1) (Anagram rst)\n        (conj (Anagram rst) chosen)))))","user":"55c77070e4b0e31453f649d0"},{"code":"(fn anagram [coll]\n  (loop [ret #{} coll coll]\n    (if (empty? coll) ret\n      (let [m (zipmap coll (map set coll))\n            x (first m)\n            y (rest m)\n            matched (set (map first (filter #(= (second x) (second %)) y)))\n            coll (seq (clojure.set/difference (set (keys y)) matched))]\n        (recur (if (empty? matched) ret\n                 (conj ret (conj matched (first x))))\n               coll)))))","problem":77,"user":"5300158ae4b0d8b024fd370f"},{"problem":77,"code":"(fn [s]\n  (loop [s s r1 #{}]\n    (if (empty? s)\n      r1\n      (recur (rest s)\n             (let [w (first s)]\n               (if (not-any? #(contains? % w) r1)\n                 (loop [ws (rest s) r2 #{}]\n                   (if (empty? ws)\n                     (if-not (empty? r2)\n                       (conj r1 r2)\n                       r1)\n                     (recur (rest ws)\n                            (if (and (= (count w) (count (first ws)))\n                                     (= (set w) (set (first ws))))\n                              (if (empty? r2)\n                                (conj r2 w (first ws))\n                                (conj r2 (first ws)))\n                              r2))))\n                 r1))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":77,"code":"(fn [anagrams]\n  (set (filter #(> (count %) 1)\n                (map set\n                     (vals (group-by (comp #(apply str %) sort)\n                                         anagrams))))))","user":"520e37cfe4b066f3ea161c96"},{"problem":77,"code":"(fn [s]\n  (let [ana? #(= (sort (seq %1)) \n                 (sort (seq (or %2 %1))))]\n  \t(loop [words s\n           grams #{}]\n      \n      (if-not (nil? words)\n        (let [{yes true no false} \n          (group-by (partial ana? (first words)) words)]\n          \t(recur no (conj grams (set yes))))\n        (set (remove #(< (count %) 2) grams))))))","user":"56f881e0e4b08e7d20b96839"},{"problem":77,"code":"(fn[slist]\n  (loop [s1 slist ret #{}]\n    (if (empty? s1)\n      ret\n      (let [s (set (filter (fn[s2] (= (sort (first s1)) (sort s2))) slist))]\n        (recur (rest s1) (if (> (count s) 1) (conj ret s) ret))\n      )\n    )\n  )\n)","user":"545537c1e4b0e397800069dd"},{"code":"(fn [l] (set (map set (filter #(> (count %) 1) (map second (group-by sort l))))))","problem":77,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":77,"code":"(fn [l] (set  (for [ v (vals (group-by sort l)) :when (> (count v) 1)] (set v))))","user":"524025bce4b0ad64fa01030f"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by set)\n       vals\n       (filter (comp not #{1} count))\n       (map set)\n       set))","user":"50310713e4b05b7df5a0b84c"},{"problem":77,"code":"(fn [words] \n  (set \n   (filter \n    #(< 1 (count %)) \n    (map \n     (comp set val) \n     (group-by frequencies words)))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":77,"code":"(fn [c] (let [f (comp set filter) s sort] (f #(> (count %) 1) (map (fn [w] (f #(= (s %) (s w)) c)) c))))","user":"5790329ee4b0ebec4cfb75a7"},{"code":"(fn [l]\n(set (map set (filter #(< 1 (count %)) (vals (group-by sort l)))))\n)","problem":77,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [v]\n    (letfn [(anagram? [a b]\n              (if (not (= (count a) (count b))) false\n                  (every? #(contains? (set a) %) b)))\n            (find-anagram [word sets]\n              (some #(when (anagram? word (first %)) %) sets))]\n      (set (filter #(>= (count %) 2)\n                   (reduce\n                    (fn [result word]\n                      (if-let [anagrams (find-anagram word result)]\n                        (conj (disj result anagrams) (conj anagrams word))\n                        (conj result #{word})))\n                    #{}\n                    v)))))","problem":77,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":77,"code":"(fn [xs] (set (map set (filter #(> (count %) 1) (vals (group-by sort xs))))))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":77,"code":"(fn anagram [lst]\n  (set\n   (filter\n    #(> (count %) 1)\n    (loop [lst lst]\n      (if (empty? lst)\n        []\n        (let [[h & t] lst]\n          (conj (anagram (filter #(not= (set h)\n                                        (set %)) t))\n                (set (filter #(= (set h)\n                                 (set %)) lst)))))))))","user":"5895477fe4b00487982d527c"},{"code":"(fn [x]\n  (->> (group-by #(set %) x)\n       vals\n       (map #(set %))\n       (filter #(< 1 (count %)))\n       set))","problem":77,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":77,"code":"(fn [x] (->> (group-by set x) (map val) (filter #(< 1 (count %))) (map set) set))","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(set %))\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"54edfa10e4b024c67c0cf868"},{"problem":77,"code":"(fn [ss]\n(->> ss\n     (group-by sort)\n     (vals)\n     (map #(into #{} %))\n     (filter #(> (count %) 1))\n     (into #{})))","user":"5461dc79e4b01be26fd746a8"},{"code":"(fn [l]\n  (let [groups (vals (group-by sort l))\n        min-two (filter #(> (count %) 1) groups)\n        sets (map set min-two)]\n    (set sets)))","problem":77,"user":"52b405e1e4b0c58976d9ad15"},{"problem":77,"code":"(fn [words]\n  (let [ordchrs (map #(sort (re-seq #\"[\\w&&[\\D]]\" %)) words),\n        kvs (map vector ordchrs words),\n        m (reduce\n           (fn [m [k v]]\n             (if (contains? m k)\n               (update-in m [k] #(conj % v))\n               (assoc-in m [k] #{v})))\n           {} kvs)]\n    (set (filter \n          #(not= 1 (count %))\n          (vals m)))))","user":"51e5a627e4b0efabf93c02db"},{"problem":77,"code":"(fn  [coll]\n  (set  (map set (filter #(> (count %) 1)\n                         (vals (group-by set coll))))))","user":"516d227fe4b06f078fab252d"},{"code":"(fn anagrams [words]\n  (->> words\n       (reduce #(merge-with concat %1\n                 {(sort %2) [%2]}) {})\n       (filter #(< 1 (count (val %))))\n       (map #(apply hash-set (val %)))\n       (apply hash-set)))","problem":77,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn [c]\n  (->> c (group-by #(sort %)) vals (map set) (filter #(< 1 (count %))) set))","problem":77,"user":"4f1d1d95535d64f603146488"},{"code":"(fn analgram [strs]\r\n  (letfn [(same-elements [ls rs]\r\n            (and (= (count ls) (count rs))\r\n                 (every? (set ls)rs)))]\r\n    (loop [an #{} strs strs]\r\n      (if (empty? strs)\r\n        an\r\n        (let [f (first strs)\r\n              ans (filter #(same-elements f %) strs)]\r\n          (if (= 1 (count ans))\r\n            (recur an (rest strs))\r\n            (recur (conj an (set ans))\r\n                   (remove #(same-elements f %) strs))))))))","problem":77,"user":"4dd62278535d2dad7130b5c7"},{"problem":77,"code":"(fn [words]\n    (let [candidates (group-by frequencies words)]\n      (->> candidates\n           (filter (fn [[k v]] (not= 1 (count v))))\n           (map (fn [[k v]] (set v)))\n           set)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [ws]\n  (set \n    (filter #(> (count %) 1) (map set (vals (group-by #(sort (seq %)) ws))))))","problem":77,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":77,"code":"(fn anagram-finder [words]\n  (reduce (fn [acc word]\n            (let [remove-first (fn remove-first [pred s]\n  (lazy-seq\n   (when-let [[x & xs] (seq s)]\n     (cond (pred x) xs\n           :else (cons x (remove-first pred xs))))))\n                  permutations (fn permutations [s]\n  (if (= (count s) 1)\n    (list s)\n    (for [head s\n          tail (permutations (remove-first #{head} s))]\n      (cons head tail))))\n                  find-anagrams (fn find-anagrams [word words]\n  (let [perm (permutations word)\n        perm-set (set (map #(apply str %) perm))\n        anagrams (set (filter (partial contains? perm-set) words))]\n    anagrams))\n                  anagrams (find-anagrams word words)]\n              (if (= 1 (count anagrams))\n                acc\n                (conj acc anagrams)))) #{} words))","user":"5ed3c43be4b016b56eae05c4"},{"code":"(fn [words] \n   (set (remove #(< (count %) 2) (map set (vals (group-by sort words)))))\n   )","problem":77,"user":"534d1173e4b084c2834f4a98"},{"problem":77,"code":"(fn [vec1]\n  (let [temp (vals (group-by #(clojure.string/upper-case (sort %)) vec1 ))]\n    (loop [iter temp result #{}]\n      (if (empty? iter)\n        result\n        (if (< 1 (count (first iter)))\n          (recur (rest iter) (conj result (set (first iter))))\n          (recur (rest iter) result))))))","user":"57f52d3be4b0903ccab3dce7"},{"problem":77,"code":"(fn anagram-finder\n  ([m]\n   (anagram-finder m #{}))\n  ([m list]\n   (anagram-finder\n    m\n    (filter\n     (fn [el]\n       (#(loop [base %\n                subs %2]\n           (if (and (empty? base) (empty? subs))\n             true\n             (if (or (empty? base) (empty? subs))\n               false\n               (recur (clojure.string/replace-first base (first subs) \"\") (next subs)))\n             ))\n        (first m) el)) m) list))\n  ([m m1 list]\n   (let [left (keys (filter #(= (second %) 1) (apply merge-with - (map frequencies [m m1]))))\n         striked (not (empty? m1))]\n     (if striked\n       (let [newlist (into #{} (filter next (conj list (into #{} m1))))]\n         (if (empty? left)\n           newlist\n           (anagram-finder left newlist)))\n       (let [left (next left)]\n         (if (empty? left)\n           list\n           (anagram-finder left list)))))))","user":"55b22c33e4b0da326a65cf79"},{"problem":77,"code":"(fn my-anagram-finder [word-list]\n\t(letfn [(contains-same? [coll1 coll2]\n\t\t\t\t(cond \n\t\t\t\t\t(empty? coll1) \n\t\t\t\t\t\t(empty? coll2)\n\t\t\t\t\t(= (first coll1) (first coll2)) \n\t\t\t\t\t\t(recur (rest coll1) (rest coll2))\n\t\t\t\t\t:else false))\n\t\t\t(anagram? [word1 word2] (contains-same? (sort (into [] word1)) (sort (into [] word2))))]\n\t (into #{} \n\t \t(filter \n\t \t\t#(> (count %) 1) \n\t \t\t\t(map (fn [word] \n\t\t \t\t\t\t(reduce (fn [rs new-word] \n\t\t \t\t\t\t\t\t\t(if (anagram? new-word word) \n\t\t \t\t\t\t\t\t\t\t(conj rs new-word)\n\t\t \t\t\t\t\t\t\t\trs))\n\t\t\t\t\t\t\t\t#{}\n\t\t\t\t\t\t\t\tword-list)) \n\t \t\t\t\t word-list)))))","user":"57c0917be4b05aa3c4741c95"},{"code":"(fn x [col]\n   (set (filter #(>  (count %) 1) (map  #(set %) (vals (group-by sort col))))))","problem":77,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn anagrams\n  [coll]\n  (let [find-anagram (fn [c] \n  (let [f (sort (first c)) fe (first c)]\n   (reduce  #(if (= f (sort %2)) (conj % %2 fe) %) #{} (rest c))))]\n    ( if (< (count coll) 2) #{} \n      (let [found (find-anagram coll)]\n        (if (empty? found) #{} \n          (into #{found} (anagrams  (remove found coll))))))))","problem":77,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":77,"code":"(fn f77\n  [s]\n  (let [f (fn [ss] (->> ss\n                        (map str)\n                        (sort)\n                        (reduce str)\n                        (keyword)))\n        g (fn [xs] (when (> (count xs) 1)\n                     (map #(get % 1) xs)))]\n    (->>\n      s\n      (map #(vector (f %) %))\n      (group-by #(get % 0))\n      (vals)\n      (map #(g %))\n      (map set)\n      (keep #(if (not (zero? (count %))) %))\n      (set))))","user":"59390a35e4b02506e01a29f3"},{"problem":77,"code":"(fn [coll]\n  (->>\n   (group-by sort coll)\n   (reduce (fn [ret [k v]]\n             (if (> (count v) 1)\n               (conj ret (set v))\n               ret)) #{})))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn [s]\n  (set\n    (filter #(> (count %) 1)\n      (for [i s]\n        (set \n          (for [j s :when (= (sort i) (sort j))] j))))))","problem":77,"user":"4e28120f535deb9a81d77efa"},{"problem":77,"code":"(fn [coll]\n  (set \n   (map set \n        (filter #(< 1 (count %)) \n                (vals (group-by #(sort %) coll))))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":77,"code":"(fn [words]\n      (into #{}  (filter #(>= (count %) 2) (map set (vals (group-by sort words))))))","user":"53f891eee4b0de5c4184856d"},{"problem":77,"code":"(fn anagram-finder\n  [s]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies s))))))","user":"55acd080e4b03311e7b73298"},{"code":"(fn find-anagrams [a-vec]\n  (letfn [(word-to-bag [word] (group-by identity (seq word)))]\n     (set (map #(set (second %))(filter #(> (count (second %)) 1)(group-by word-to-bag a-vec)))) \n  )    \n )","problem":77,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [c]\n  (set\n    (filter #(> (count %) 1) \n      (for [w c]\n        (set (filter #(= (set w) (set %)) c))\n      )\n    )\n  )\n)","problem":77,"user":"4f84400de4b033992c121c2e"},{"problem":77,"code":"(fn [list] (->> list\n                (group-by #(set (seq %)))\n                (vals)\n                (filter #(< 1 (count %)))\n                (map set)\n                (set)))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (map set)\n       (remove #(= 1 (count %)))\n       set))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn [coll]\n  (into #{}\n        (filter #(> (count %) 1)\n                (map #(into #{} (last %))\n                    (group-by #(sort %) coll)))))","problem":77,"user":"4fa5406fe4b081705acca1ac"},{"problem":77,"code":"(fn [input]\n  (->> (group-by sort input)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"536e5055e4b0fc7073fd6e6b"},{"problem":77,"code":"(fn [words]\n  (let [keyify #(->> % seq sort (apply str))\n        reducer (fn [m w] (assoc m (keyify w) (or (and (m (keyify w)) (conj (m (keyify w)) w)) #{w})))\n        filterer #(> (count %) 1)]\n    (->> (reduce reducer {} words)\n         vals\n         (filter filterer)\n         (into #{}))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":77,"code":"(fn [xs]\n  (letfn [(upd [m k f] (assoc m k (f (get m k))))\n          (count-letters [s]\n            (reduce (fn [m k] (upd m k (fnil inc 0))) {} s))]\n    (->> (group-by count-letters xs)\n         (vals)\n         (filter #(> (count %) 1))\n         (map set)\n         (set))))","user":"5782018de4b0d36ec5835e8e"},{"code":"(fn [a]\n  (set \n    (map set\n      (filter #(< 1 (count %))\n      (vals \n        (group-by \n          (fn [b] (reduce conj #{} b)) \n          a))))))","problem":77,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":77,"code":"(fn [x] (set (filter #(> (count %) 1) (map set (vals (group-by (fn [y] (apply str (concat (sort (seq y))))) x ))))))","user":"5eaba9c0e4b00a66d4a951d6"},{"code":"(fn [words] \n  (set (map #(set %) \n    (filter #(< 1 (count %))\n      (vals (group-by #(apply str (sort %)) words))))))","problem":77,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":77,"code":"(fn [l] (set (->> (map #(hash-map (clojure.string/join \"\" (sort %)) [%]) l)\n                   (apply merge-with concat)\n                   vals\n                   (map set)\n                   (filter #(> (count %) 1)))))","user":"55c13e73e4b01b9910ae2a2f"},{"problem":77,"code":"#(->> %\n  (group-by sort)\n  (vals)\n  (filter next)\n  (map set)\n  (set))","user":"550f1c99e4b06e50f9beb171"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by sort coll)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"code":"(fn [-seq]\n   (into #{}  (->> (map #(vector % (group-by identity %)) -seq)\n         (group-by #(identity (last %)) )\n         (map last)\n         (map #(map first %))\n         (filter #(< 1  (count %) ))\n         (map (partial into #{}))\n         )\n)\n   )","problem":77,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (filter second) ;; count > 1\n       (map set)\n       (set)))","user":"5d2e5065e4b01671435dbcae"},{"problem":77,"code":"(fn [v]\n  (letfn [(anagrams [s l]\n                    (if (seq l)\n                      (let [a (set (filter (fn [w] (= (sort w) (sort (first l))))\n                                           l))]\n                        (anagrams (if (> (count a) 1)\n                                    (conj s a)\n                                    s)\n                                  (remove a l)))\n                      s))]\n    (anagrams #{} v)))","user":"506ef8c3e4b09350ab4199f4"},{"code":"(fn [lst]\n   (set (filter #(> (count %) 1) (vals (reduce #(assoc % (sort %2) (conj (get % (sort %2) #{}) %2)) {} lst)))))","problem":77,"user":"524f213be4b0541d1855b7ff"},{"code":"(fn anagrams [coll]\n  (let [vecs\n        (->>\n          (group-by (comp sort seq) coll)\n          (vals)\n          (filter #(< 1 (count %))))]\n    (set (map set vecs))))","problem":77,"user":"4f849f76e4b033992c121c36"},{"problem":77,"code":"(fn [words]\n    (let [hash-key #(apply str (sort %))\n          groups (vals (group-by hash-key words))]\n        (set (map set (filter #(> (count %) 1) groups)))))","user":"553706d1e4b09218d5f44fc7"},{"code":"(fn [s] (set (filter #(> (count %) 1) (vals (reduce (fn [m x] (merge m (if (get m (sort x)) {(sort x) (conj (get m (sort x)) x)} {(sort x) (hash-set x)}))) {} s)))))","problem":77,"user":"4e8d5911535d65386fec2133"},{"problem":77,"code":"(fn [words]\n  (let [fingerprints (map (comp sort #(map identity %)) words)\n        word+fingerprints (map #(list %1 %2) words fingerprints)\n        grouped (reduce\n                 (fn [memo w]\n                   (let [word (first w)\n                         fingerprint (last w)]\n                     (assoc memo fingerprint (conj (memo fingerprint #{}) word))))\n                 {}\n                 word+fingerprints\n                 )]\n    (set (filter #(> (count %) 1) (vals grouped)))))","user":"56069006e4b08b23635d3174"},{"problem":77,"code":"(fn [words]\n  (letfn [(permute [arr]\n            (let [conc (fn [x y] (vec (concat x (if (vector? y) y (vector y)))))\n                  except-idx (fn [idx coll] (vec (concat (take idx coll) (nthrest coll (inc idx)))))]\n              (reduce\n                (fn [a b] (conc (vec a) (vec b)))\n                (map-indexed\n                  (fn [i v]\n                    (let [prefix (vector v)\n                          remainder (except-idx i arr)]\n                      (map\n                        (partial conc prefix)\n                        (if (> (count remainder) 1)\n                          (permute remainder)\n                          remainder))))\n                  arr))))]\n    (let [permutations (map permute words)]\n      (->>\n        (map (fn [permuted]\n               (->>\n                 (map #(clojure.string/join \"\" %) permuted)\n                 (filter (set words)))) permutations)\n        (filter #(> (count %) 1))\n        (map set)\n        (set)))))","user":"55d28b38e4b0e31453f64a58"},{"code":"(fn [s] (set(filter #(> (count %) 1) (map #(->> % (val) (set)) (group-by #(->> % (sort)) s)))))","problem":77,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"#(set (map set \n  (remove (fn [e] (= 1 (count e))) (vals (group-by frequencies %)))))","problem":77,"user":"4ebb78a2535dfed6da9c6d70"},{"code":"(fn [w] (set (map set (filter #(> (count %) 1) (vals (group-by sort w))))))","problem":77,"user":"4e7f32ee535db966e863cc3a"},{"code":"(comp\n  set\n  (partial map set)\n  (partial filter #(< 1 (count %)))\n  vals\n  (partial group-by sort))","problem":77,"user":"4fd96694e4b05e33b9224f37"},{"problem":77,"code":"#(->> %\n        (map (fn [s] [s (apply str (sort s))]))\n        (group-by second)\n        (vals)\n        (map (partial map first))\n        (filter (fn [x] (< 1 (count x))))\n        (map (partial into #{}))\n        (into #{}))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":77,"code":"(fn [ws]\n  (loop [rws ws, result #{}]\n    (if (< (count rws) 2)\n      result\n      (let [a (first rws), r1 (rest rws),\n            s1 (loop [r2 (remove #(= % a) r1), s2 #{}]\n                (if (empty? r2)\n                  s2\n                  (let [b (first r2)]\n                   (if (and (not= a b) (= (sort a) (sort b)))\n                    (recur (remove #(= % b) r2) (conj (conj s2 b) a))\n                    (recur (remove #(= % b) r2) s2)))))]\n        (recur (remove #(not (nil? (s1 %))) r1) (if (empty? s1) result (conj result s1)))))))","user":"60882700e4b0ae75613dcedf"},{"problem":77,"code":"(fn [xs]\n  (let [groups (filter #(>= (count (val %)) 2) (group-by sort xs))]\n    (set (map set (vals groups)))))","user":"56903cb9e4b0dcc4269f40eb"},{"code":"(fn [v]\n\t\t(->> v\n\t\t\t(group-by set)\n\t\t\tvals\n\t\t\t(filter #(> (count %) 1))\n\t\t\t(map set)\n\t\t\tset\n\t\t)\n\t)","problem":77,"user":"52bf6946e4b07a9af5792334"},{"problem":77,"code":";; (fn [c] (set (map set (filter #(< 1 (count %)) (vals (reduce (fn [a v] (update-in a [(sort v)] #(conj % v))) {} c))))))\n(fn [c] (set (map set (filter #(< 1 (count %)) (vals (group-by set c))))))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":77,"code":"(fn [c]\n   (set (filter #(not (= 1 (count %))) (let [anagram? (fn [s1 s2]\n                                                    (= (sort (seq s1)) (sort (seq s2))))]\n                                     (loop [c c, result #{}]\n                                       (cond (empty? c) result\n                                             true (recur (filter #(not (anagram? (first c) %)) c) (into result (list (set (filter #(anagram? (first c) %) c)))))))))))","user":"52fac708e4b047fd55836fff"},{"problem":77,"code":"(fn anagrams [words]\n    (->> words\n         (reduce (fn [acc w]\n                   (let [k (sort w)]\n                     (assoc acc k (conj (get acc k #{}) w))))\n                 {})\n         vals\n         (filter #(>= (count %) 2))\n         set))","user":"4dfe5a93535d04ed9115e786"},{"problem":77,"code":";;#(map set (vals (group-by set %)))\n#(set (remove (fn [x] (= 1 (count x))) (map set (vals (group-by set %)))))","user":"551c66dae4b07993ea3788de"},{"problem":77,"code":"(fn prob77 [s]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by frequencies s))))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":77,"code":"(fn [x] \n  (set\n  (map set\n;  (filter #(> (count %) 1) (vals (group-by set x))))))\n(filter #(> (count %) 1) (vals (group-by frequencies x))))))","user":"56304db8e4b073c1cf7a9be5"},{"code":"(fn [s]\n  (set (map set \n    (filter #(> (count %) 1) (vals (group-by sort s))))))","problem":77,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"#(->> %\r\n  (group-by sort) vals (filter next) (map set) set)","problem":77,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn [coll]\n  (->> coll\n    (group-by sort)\n    (map second)\n    (filter #(> (count %) 1))\n    (map set)\n    set))","problem":77,"user":"4fb12b35e4b081705acca275"},{"problem":77,"code":"(fn [word-lst]\n    (loop [anagrams {} words word-lst]\n    (if (empty? words)\n        (set (filter (fn [x] (> (count x) 1)) (vals anagrams)))\n    (let [current-word (first words) normalized (sort current-word)]\n    (if (contains? anagrams normalized)\n    (let [group (get anagrams normalized)]\n        (let [new-group (conj group current-word)]\n            (recur (assoc anagrams normalized new-group) (rest words))))\n    (recur (assoc anagrams normalized #{current-word}) (rest words)))))))","user":"5ccfeb57e4b0ccb0619628cc"},{"code":"(fn [words]\n(set (filter #(> (count %) 1) \n(map set (vals (group-by sort words))))))","problem":77,"user":"4dcfbc44535d5973398f92a7"},{"code":"(fn anagrams [words]\n  (let [word-groups (vals (group-by #(sort %) words))\n        match-groups (filter #(> (count %) 1) word-groups)\n        match-sets (map #(set %) match-groups)]\n    (set match-sets)))","problem":77,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn [s] \n  (set \n    (map set (filter #(> (count %) 1) \n      (vals (group-by (comp sort seq) s))))))","problem":77,"user":"4f043ed1535dcb61093f6bb4"},{"problem":77,"code":"(fn [s]\n\t\t(loop [lst s newmap {}]\n\t\t\t(if (empty? lst)\n\t\t\t\t(loop [l (map val newmap) m #{}]\n\t\t\t\t\t(if (empty? l)\n\t\t\t\t\t\tm\n\t\t\t\t\t\t(if (< 1 (count (first l)))\n\t\t\t\t\t\t\t(recur (rest l) (conj m (first l)))\n\t\t\t\t\t\t\t(recur (rest l) m))))\t\t\t\t\n\t\t\t\t(if (contains? newmap (sort (clojure.string/split (first lst) #\"\")))\n\t\t\t\t\t(recur (rest lst) (assoc newmap (sort (clojure.string/split (first lst) #\"\")) (conj (get newmap (sort (clojure.string/split (first lst) #\"\"))) (first lst))))\n\t\t\t\t\t(recur (rest lst) (assoc newmap (sort (clojure.string/split (first lst) #\"\")) (hash-set (first lst))))))))","user":"59368ccae4b02506e01a2979"},{"code":"#(set (for [[k v] (group-by set %) :when (next v)] (set v)))","problem":77,"user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [ws] (letfn [(anogram [a b] (and (= (count a) (count b))\n                                            (every? (fn [x] (= (count (filter #(= x %) a))\n                                                               (count (filter #(= x %) b)))) a)))]\n                  (set (filter #(> (count %) 1) \n                          (reduce (fn [s w] (conj s (set (get (group-by #(anogram w %) ws) true))))\n                                  #{}\n                                  ws)))))","problem":77,"user":"52aad30ce4b0c58976d9ac6d"},{"problem":77,"code":"(fn [coll] (->> coll\n  (group-by sort)\n  (map (comp set second))\n  (filter #(> (count %) 1))\n  (set)))","user":"5b772ad7e4b047b03b2036e8"},{"code":"#(set \n  (map set \n    (filter \n      (fn [n] \n        (< 1 (count n)))\n    (vals (group-by sort %)))))","problem":77,"user":"4ee82223535d93acb0a66877"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (map set)\n       (filter #(not= 1 (count %)))\n       (set)))","user":"5483d59fe4b0e286459a1194"},{"code":"(fn [v]\n   (let [v (map #(vector % (set (seq %))) v)\n         k (into #{} (map second v))\n         r (map (fn [i] (filter #(= i (second %)) v)) k)\n         r (map #(set (map first %)) r)\n         r (remove #(= 1 (count %)) r)]\n     (set r)))","problem":77,"user":"50e7dd5de4b077ad597af36b"},{"problem":77,"code":"(fn my-anagram [coll]  \n  (set (filter #(> (count %) 1) (map set (vals (group-by set coll))))))","user":"55eb026de4b0121d4835fdb7"},{"code":"(fn [w] (set (filter #(> (count %) 1) (map set (vals (group-by sort w))))))","problem":77,"user":"4fe9de74e4b0547ebccb2475"},{"problem":77,"code":"(fn fun [y] \n  (if (not= y (empty y)) \n    (let [x #(into #{} %)\n          z (x (first y)) \n          w (into #{} (filter #(= z (x %)) y) ) \n          q (filter #(not= z (x %)) y)] \n      (into (if (> (count w) 1) #{w} #{}) (fun q) ))))","user":"540479e7e4b0addc1aec665a"},{"problem":77,"code":"(fn anagramFind\n  [s]\n  (set (vals\n   (filter\n    (fn [elem] (> (count (val elem)) 1))\n    (let []\n      (reduce\n       (fn [m e] (if (contains? m (frequencies e))\n                   (assoc m (frequencies e) (conj (get m (frequencies e)) e))\n                   (assoc m (frequencies e) #{e})))\n       {}\n       s))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn[s] \n    (let [f #(apply str (sort (seq %)))\n          u (set (map f s))\n          r (reduce #(merge %1 {(f %2) (conj (get %1 (f %2) []) %2)}) {} s)\n          k (filter #(> (count (r %)) 1) (keys r))\n         ] \n         (set(map #(set (r %)) k)))\n)","problem":77,"user":"5017eface4b02f523d7cc5e7"},{"code":"(fn [xs]\n  (letfn [(anagram? [x y] (= (sort x) (sort y)))]\n    (loop [acc #{}, words (set xs)]\n      (if (empty? words)\n        acc\n        (let [next (set (filter (partial anagram? (first words)) words))]\n          (recur (if (> (count next) 1) (conj acc next) acc)\n                 (clojure.set/difference words next)))))))","problem":77,"user":"500ff421e4b0ae202717946f"},{"code":"(fn anagrams\n  [words]\n  (let [group-of-words\n        (reduce (fn [out, [key, val]]\n                  (assoc out key (conj (out key) val)))\n              {}\n              (for [word words]\n                [(set word) word]))]\n    (set (for [[k,v] group-of-words :when (> (count v) 1)] (set v)))))","problem":77,"user":"4db8d37d535d1e037afb219c"},{"problem":77,"code":"(fn [xs]\n  (let [f (fn [a] (set (filter #(= (set a) (set %)) xs)))]\n    (loop [n xs a #{}]\n      (if (seq n)\n        (recur (rest n) (conj a (f (first n))))\n        (set (filter #(> (count %) 1) a))))))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":77,"code":"(fn anagrammer [words]\n  (into #{} (->> words\n                 (map #(vector ((comp vec sort seq) %) %))\n                 (sort-by first)\n                 (partition-by (comp identity first))\n                 (map #(set (map second %)))\n                 (filter #(> (count %) 1)))))","user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [xs] (reduce\n  \t (fn [s [k v]]  \n    (merge s v)) \n    #{}          \n    (filter\n      (fn [a] (let [[x y] a] (> (count y) 1))) ;; only keeping the entries with 2 or more anagrams\n        (reduce #(merge-with (fn [x y] (clojure.set/union x y)) % {(sort %2) #{%2}}) {} xs))))","problem":77,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":77,"code":"(fn [coll]\n   (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by #(apply + (map int (seq %))) coll))))))","user":"5a9db5c9e4b0d174b936c7f1"},{"code":"(fn [input & found]\n  (letfn [(std [word] (sort (seq word)))\n          (amatch? [aword bword] (= (std aword) (std bword)))\n          (anagrams [f r] (filter (partial amatch? f) r))\n          (not_ana [f r] (filter (comp not (partial amatch? f)) r))]\n    (loop [wordlist input\n          found #{}]\n      (let [word (first wordlist)\n            cands (rest wordlist)]\n        (if (empty? wordlist)\n          found\n          (if (empty? (anagrams word cands))\n            (recur cands found)\n            (recur (vec (not_ana word cands))\n                  (conj found (set (cons word (anagrams word cands)))))))))))","problem":77,"user":"4f35e662e4b0e243712b1ec6"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by sort) vals\n       (filter #(< 1 (count %)))\n       (map set) set))","user":"53dfdf01e4b0d874e779ae46"},{"problem":77,"code":"(fn [l] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies l))))))","user":"52503747e4b0541d1855b828"},{"problem":77,"code":"(fn [lst]\n  (->> lst\n    (group-by #(frequencies (seq %)))\n    (vals)\n    (map set)\n    (filter #(>= (count %) 2))\n    (into #{})))","user":"55d5e80ee4b0e31453f64a91"},{"problem":77,"code":"(fn [coll] \n  (set (filter #(> (count %) 1) \n               (map (fn [x]\n                      (set (filter #(= (frequencies x) (frequencies %))\n                                   coll)))\n                    coll))))","user":"52fe31d5e4b047fd55837038"},{"problem":77,"code":"(fn [z]\n(set\n(filter (fn [x] (> (count x) 1))\n(map set (vals \n(reduce (fn [x y] (assoc x (sort y) (conj (get x (sort y)) y))) {} z)\n)\n)\n))\n)","user":"54c98ac0e4b045293a27f679"},{"problem":77,"code":"(fn anagram-finder [words]\n  (let [anagram? (fn [word1 word2]\n                   (let [sort-seq (comp sort seq)]\n                     (= (sort-seq word1) (sort-seq word2))))]\n    (loop [acc []\n           [first-word & rest-words :as all-words] words]\n      (if (empty? all-words)\n        (set acc)\n        (let [anagrams (reduce (fn [accu word]\n                                 (if (anagram? first-word word)\n                                   (conj accu word)\n                                   accu))\n                               #{first-word}\n                               rest-words)]\n          (if (> (count anagrams) 1)\n            (recur (conj acc anagrams) (remove \n                                        #(anagram? first-word %) rest-words))\n            (recur acc rest-words)))))))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":77,"code":"(fn f [i [h & t :as s]]\n  (if (nil? h)\n      i\n      (let [fit (set (filter #(= (set h) (set %)) t))]\n        (recur (if (seq fit) `#{~@i #{~@fit ~h}} i)\n          (vec (clojure.set/difference (set t) fit))))))\n #{}","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn [words]\n  (letfn [\n    (key1 [word] (sort word))\n    (key2 [word] (group-by identity word))\n    ;;(key3 [word] (set word)) ;; broken but works here\n    (unify [words genkey]\n      (set (map set\n        (map #(map :word %)\n          (filter #(> (count %) 1)\n            (vals (group-by :key\n              (map \n                (fn [w] {:word w :key (genkey w)})\n                words))))))))\n      ]\n  (unify words key1)))","problem":77,"user":"4f569218e4b0a7574ea71826"},{"problem":77,"code":"(fn sol [s]\n  (set (map (fn [x] (set (map #(first %) x)))\n    (filter #(> (count %) 1)\n      (vals\n        (group-by #(second %)\n          (map (fn [a] [a (set (frequencies a))]) s)\n        )\n      )\n    )\n  ))\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":77,"code":"(fn [xs]\n    (into #{} (filter #(< 1 (count %))\n                      (map #(set %) (vals (group-by #(sort %) xs)))))\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":77,"code":"(fn [xs]\n    (->> xs\n         (group-by set)\n         vals\n         (remove (comp zero? dec count))\n         (map set)\n         set))","user":"59419bdfe4b060784b3b78f7"},{"problem":77,"code":"(fn [strs]\n   (set (filter #(> (count %) 1) (map set (vals (group-by set strs))))))","user":"553abb28e4b09218d5f44ffb"},{"problem":77,"code":"(fn [words] (set (map #(into (sorted-set) %1) (filter #(> (count %1) 1) (vals (group-by (comp sort identity) words))))))","user":"567f988be4b0feffd0d18ebe"},{"problem":77,"code":"(fn [words]\n   (let [word-set #(into #{} %)\n         anagram? #(and (= (count %) (count %2))\n                        (= (word-set %) (word-set %2)))\n         anagram-set (fn [w] (into #{} (filter #(anagram? % w) words)))]\n     (reduce (fn [res word]\n               (let [s (anagram-set word)]\n                 (if (> (count s) 1) (conj res s) res)))\n             #{} words)))","user":"56372c3ce4b0bfe05bf117d1"},{"code":"(fn [words] (set (map set (filter #(> (count %) 1) (vals (group-by set words))))))","problem":77,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":77,"code":"(fn [s] (->> s (group-by set) vals (filter #(>= (count %) 2)) (map set) set))","user":"52ce1abfe4b07d0d72b27389"},{"problem":77,"code":"#(let [x (map (partial sort-by int) %)\n       u (distinct x)]\n   (into #{}\n         (filter (fn [x] (> (count x) 1))\n                 (map (fn [x]\n                        (into #{}\n                              (filter (fn [y]\n                                        (= (sort-by int y) x))\n                                      %)))\n                      u))))","user":"53fb5256e4b0de5c4184857f"},{"problem":77,"code":"(fn [coll] (apply hash-set\n                   (map (fn[x] (apply hash-set x))  \n                        (filter #(> (count %) 1)\n                                (vals \n                                 (group-by \n                                  #(frequencies %) \n                                  coll)))))\n\n\n   )","user":"50856bd1e4b004985b776e4c"},{"code":"(fn [c]\n\t\t(set (vals (letfn [(n [s]\n\t\t\t\t\t  (clojure.string/join (sort s)))\n\t\t\t\t(update [l s]\n\t\t\t\t\t\t(let [k (n s)]\n\t\t\t\t\t\t  (assoc l k (conj (get l k #{}) s))))]\n\t\t\t   (filter #(> (count (get % 1)) 1) (reduce update {} c))))))","problem":77,"user":"51f2851fe4b0210f90e7454b"},{"problem":77,"code":"(fn [coll]\n  (set\n    (filter #(> (count %) 1) (map\n      (fn [x]\n        (set\n          (filter\n            (fn [y]\n              (= (sort x) (sort y)))\n            coll)))\n      coll))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":77,"code":"(let [a (fn anagroup [words]\n  (if (empty? words) #{}\n                     (let [ana? (fn [w1] (= (sort w1) (sort (first words))))\n                           chunk (set (filter ana? words))]\n                        (conj  (anagroup (clojure.set/difference (set words) chunk)) chunk))))]\n\n  (fn [ws] (set (filter #(< 1 (count %)) (a ws)))))","user":"54924f64e4b0b312c081ff42"},{"problem":77,"code":"(fn [xs]\n  (->>\n    xs\n    set\n    (group-by sort)\n    (reduce (fn [m [_ v]] (if (< (count v) 2) m (conj m (into #{} v)))) #{} ) ))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn\n  [ss]\n  (let [toCanonical (fn [s] (sort (vec (.toLowerCase s))))\n        m (reduce (fn [m s] (let [cs (toCanonical s)]\n                              (update-in m [cs] #(conj (or % []) s)))) {} ss)]\n    (set (filter #(> (.size %) 1) (map (comp set second) (vec m))))))","problem":77,"user":"52dfc89be4b09f7907dd1405"},{"problem":77,"code":"(fn [coll]\n  (reduce #(if (> (count (second %2)) 1)\n            (conj %1 (set (second %2)))\n            %1) #{} (group-by #(apply str (sort %)) coll)))","user":"56c60b36e4b05cc29241eead"},{"problem":77,"code":"(fn [data] \n  (set (map (comp set val) \n            (remove (comp #(= % 1) count val) (group-by frequencies data)))))","user":"56dc483fe4b0ea9b8538f81b"},{"problem":77,"code":"(fn anagram-finder [str-coll]\n  (set\n   (for [[key val] \n         (reduce (fn [hashmap a-str]\n                   (let [str-key (apply str (sort a-str))]\n                     (if-let [a-set (hashmap str-key)]\n                       (conj hashmap [str-key (conj a-set a-str)])\n                       (conj hashmap [str-key #{a-str}]))))\n                 {}\n                 str-coll)\n         :when (>= (count val) 2)]\n     val)))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"#(into #{} \n       (filter (fn [x] (> (count x) 1))\n               (map set \n                    (vals (group-by sort %)))))","problem":77,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn [col]\n   (set (map #(set (second %) )(filter  #(> (count (second %)) 1) (group-by #(sort (seq %)) col)))))","problem":77,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"#(set \n (filter (fn [x] (> (count x) 1))\n         (map \n          (comp set second) \n          (group-by \n           (comp set seq) \n           %))))","problem":77,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":77,"code":"#(->> %\n      (map sort)\n      (zipmap %)\n      (group-by val)\n      (vals)\n      (map keys)\n      (map set)\n      (filter (fn [x] (> (count x) 1)))\n      set)","user":"55236ad6e4b0882d96d091b1"},{"problem":77,"code":"(fn [lst]\n  (set (map set (filter #(> (count %) 1) (vals (group-by set lst))))))","user":"538e36c7e4b0b51d73faae81"},{"problem":77,"code":"(fn [coll]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by #(sort %) coll))))))","user":"52c5c1c8e4b0c2d177d620fc"},{"problem":77,"code":"(fn [coll] (set (filter (fn [x](> (count x) 1)) (map #(set (val %)) (group-by sort coll)))))","user":"5587d8b3e4b059ccff29b1e8"},{"code":"(fn [coll]\n  (->> coll\n     (group-by (comp seq sort))\n     (vals)\n     (map set)\n     (filter #(> (count %) 1))  \n     (set)))","problem":77,"user":"516abecae4b081287f204e9f"},{"code":"(fn [c]\n   \t(->> (group-by frequencies c)\n         (filter (fn [[k v]] (< 1 (count v))))\n         (map (fn [[k v]] (set v)))\n         (set)))","problem":77,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn [s]\n  (set (filter #(> (count %) 1) (vals (reduce #(let [sig\n                         (reduce (fn [acc c]\n                                   (assoc acc c (inc (get acc c 0))))\n                                 {}\n                                 (seq %2))]\n                     (assoc %1 sig (conj (get %1 sig #{}) %2)))\n                    {} s)))))","problem":77,"user":"52b63875e4b0c58976d9ad41"},{"code":"(fn [x] (->> x\n  (group-by sort)\n  vals\n  (map set)\n  (filter #(not= 1 (count %)))\n  set))","problem":77,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn\r\n    [s]\r\n    (set\r\n      (filter\r\n        #(> (count %) 1)\r\n        (map set\r\n           (for [x s]\r\n             (for [y s\r\n                :when (= (sort x) (sort y))]\r\n                   y)))\r\n        )))","problem":77,"user":"4f410b63e4b0e243712b1fc5"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (set (filter #(> (count %) 1) (vals (reduce #(merge-with clojure.set/union % {(sort %2) #{%2}}) {} coll)))))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn[x] (set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","problem":77,"user":"4f82ed48e4b033992c121c0e"},{"code":"(fn [s] (->> (map #(hash-map (sort %) #{%}) s)\n             (apply merge-with clojure.set/union)\n             (vals)\n             (filter next)\n             (set)))","problem":77,"user":"4fa05b99e4b0dcca54ed6d47"},{"problem":77,"code":"(fn anagram [coll]\n  (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by sort coll))))))","user":"51eec1a6e4b0871fa145d98d"},{"problem":77,"code":"(fn anagrams [xs]\n  (->> (vals (group-by #(sort %1) (set xs)))\n       (filter #(> (count %1) 1))\n       (map set)\n       (into #{})))","user":"57c500f9e4b05aa3c4741cda"},{"problem":77,"code":"(fn find-anagrams [coll]\n  (set\n    (->> (group-by sort coll)\n         (vals)\n         (map set)\n         (filter #(> (count %) 1)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":77,"code":"(fn [x] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) x))))))","user":"559a8816e4b066d22e731f41"},{"code":"(fn [ws]\n      (let [anags (group-by #(reduce str (sort %)) ws)]\n        (set (map set (filter #(> (count %) 1) (vals anags))))))","problem":77,"user":"50f48298e4b004d364930527"},{"code":"(fn [a]\n  (reduce \n    #(if (coll? %2) (conj % (set %2)) %) \n    #{} \n    (vals \n      (reduce \n        #(merge-with \n          (fn [x y] (conj (flatten [x]) y)) % (hash-map (sort %2) %2)) {} a))))","problem":77,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn [s]\n  (into #{} (filter #(> (count %) 1)\n                    (map set (vals (group-by sort s))))))","problem":77,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":77,"code":"(fn [words]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by sort words))))))","user":"5da760ebe4b000c986472c1a"},{"code":"#(set (map set (filter (comp seq rest)\r\n  (vals (group-by sort %)))))","problem":77,"user":"4de760a3535d08e6dec9fdf9"},{"code":"#(set (filter (fn [x] (> (count x) 1)) (for [x %] (let [c (into #{} x)] (reduce (fn [s m] (if (= (into #{} m) c) (conj s m) s)) #{} %)))))","problem":77,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":77,"code":"(fn anagrams [xs] \n  (into #{} (map set (filter #(> (count %) 1) \n            (vals (group-by #(sort (seq %)) xs))))))","user":"595d224de4b066ee0a44b016"},{"code":"(fn [col]\n    (set (map (comp set second) (filter #(< 1 (count (val %))) (group-by #(identity (set %)) col)))))","problem":77,"user":"50435689e4b034ff00315d21"},{"code":"(fn [words]\n  (set\n    (filter #(< 1 (count %))\n      (map\n        (fn [word]\n          (set\n            (filter #(= (group-by identity word) (group-by identity %)) words)))\n        words))))","problem":77,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn [w]\n  (loop [s w r #{}]\n\t   (if (empty? s) r\n         (let [n (set (filter #((fn [s t] (= (sort s) (sort t))) % (first s)) \n                              s))]\n           (recur (remove n s)\n                  (if (> (count n) 1)\n                        (conj r n)\n                        r))))))","problem":77,"user":"4e821ca5535db62dc21a62c2"},{"problem":77,"code":"(fn [c]\n  (letfn [\n         (perm [s r] (if (first s) (mapcat (fn [t] (perm  (remove (fn [t1] (= t1 t)) s) (conj r t))) s) \n             [r]))\n             \n          (wordPerm [ w ]\n            (let [w1 (apply vector (seq w)) \n                  p (perm (range (count w)) []) ]\n                  (set (map #(apply str (map (fn [i] (w1 i)) %)) p))))\n\n          (singleSet [item pm xs]\n                     (let [others (set (for [i xs :when (contains? pm i)] i))]\n                       (if (empty? others) #{}\n                           (conj others item))))]\n    (loop [ [f & xs] c re #{}]\n      (if (not f) re\n        (let [pm (wordPerm f)\n              ss (singleSet f pm xs)]\n          (recur (filter #(not (contains? ss %)) xs) (if (empty? ss) re (conj re ss))))))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":77,"code":"(fn [s]\n  (->> (group-by set s)\n       vals\n       (filter next)\n       (map set)\n       set))","user":"543366dde4b0b6b47310fcdf"},{"code":"#(set (map (fn [x] (set (val x))) (filter (fn [x] (< 1 (count (val x)))) (group-by (fn [x] (sort x)) %))))","problem":77,"user":"4fb99483e4b081705acca2da"},{"code":"(fn [words]\n  (let [groups (group-by sort words)]\n    (set (filter #(> (count %) 1) (map set (vals groups))))))","problem":77,"user":"52487654e4b05ef8e38e63dc"},{"code":"(fn anagrammer [word-vec]\n  ((fn [ana word-set]\n     (prn ana word-set)\n     (if (seq word-set)\n       (let [w (first word-set)\n             freqs (frequencies w)\n             matches (filter #(= (frequencies %) freqs) (rest word-set))\n             matcheset (set matches)]\n         (if (seq matches)\n           (recur (conj ana (set (conj matches w)))\n                  (->> word-set\n                    rest\n                    (filter #(not (contains? matcheset %)))\n                    set))\n           (recur ana (set (rest word-set)))))\n       ana)) #{} (set word-vec)))","problem":77,"user":"4ec75077535d6d7199dd36e0"},{"problem":77,"code":"(fn find-anagrams\n  [words]\n  (let [anagram? (fn [a b]\n                   (and (not (= a b))\n                        (= (group-by char a) (group-by char b))))]\n    (into #{} (vals (reduce\n                     (fn [anagrams word-a]\n                       (reduce (fn [anagrams word-b]\n                                 (if (anagram? word-a word-b)\n                                   (update-in anagrams [(group-by char word-a)] (fnil conj #{}) word-a word-b)\n                                   anagrams)) anagrams words))\n                     {} words)))))","user":"51c8f1d8e4b07ef393169e5d"},{"code":"(letfn [(A [w]\n          (apply str (sort w)))\n        (P [s]\n          (set\n           (for [[k v] (group-by A s) :when (> (count v) 1)]\n             (into #{} v))))]\n  P)","problem":77,"user":"51a4416ae4b0def3c5c5868c"},{"problem":77,"code":"(fn [s]\n  (let [unique (into #{} s)\n        anagram? (fn [a b] (apply = (map frequencies [a b])))\n        matches (map (fn [e]\n                       (let [anagrams (->> (disj unique e)\n                                           (filter #(anagram? % e)))]\n                         (-> (into #{} anagrams)\n                             (conj e))))\n                     s)]\n    (->> (filter #(> (count %) 1) matches)\n         (into #{}))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":77,"code":"#(->> % (group-by sort)\n\n        (vals)\n\n        (map (fn [x] (into #{} x)))\n\n        (filter (fn [x] (> (count x) 1)))\n\n        (into #{}))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [s] \r\n   (set (filter #(> (count %) 1) \r\n           (reduce (fn [acc [k v]] (conj acc (set v))) #{} (group-by frequencies s)))))","problem":77,"user":"4f29cdc8e4b0d6649770a033"},{"problem":77,"code":"(fn [words]\n   (let [f (fn [rmap word] \n             (if-let [anagrams (get rmap (set word))]\n               (assoc rmap (set word) (conj anagrams word))\n               (assoc rmap (set word) (sorted-set word))))\n         >1? #(> (count (second %)) 1)]\n  (->> words\n       (reduce f {})\n       (filter >1?)\n       vals\n       set)))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn prob-0077\n  [words]\n\n  (let [freq-dec (fn freq-dec\n        [sm k]\n        {:pre [(not (nil? (sm k)))]}\n        \n        (if (nil? (sm k))\n          (throw (AssertionError. \"(not (nil? (mp k)))\")))\n          \n        (let [cnt (dec (sm k 0))]\n          (if-not (pos? cnt)\n            (dissoc sm k)\n            (merge sm {k cnt}))))\n      \n      freq-cnt (fn freq-cnt\n        [sm]\n        (apply + (vals sm)))\n      \n      perm-sorted-map (fn perm-sorted-map\n        [sm]\n        (if (<= (freq-cnt sm) 1)\n          (list (keys sm))\n          (for [k (keys sm)\n                rest (perm-sorted-map (freq-dec sm k))]\n            (cons k rest))))\n      \n      permutations (fn permutations\n        [xs]\n          (let [perms (perm-sorted-map (into (sorted-map) (frequencies (seq xs))))]\n            (apply sorted-set (map #(apply str %) perms))))\n    ]\n\n  (let [srt-wrds    (apply sorted-set words)\n        to-uq-perms #(clojure.set/intersection (permutations %) srt-wrds)\n        to-uq-mults #(>= (count %) 2) ]\n    \n    (set (distinct (filter to-uq-mults (map to-uq-perms srt-wrds)))))))","problem":77,"user":"4f047c07535dcb61093f6bcd"},{"problem":77,"code":"(fn [ws] \n  (set (map (comp set second) \n            (filter #(>= (count (second %)) 2) \n                    (group-by (comp sort to-array) \n                              ws)))))","user":"54857e3be4b0e286459a11ad"},{"problem":77,"code":"(fn [ss]\n  (->> ss (group-by sort) vals (filter #(> (count %) 1)) (map set) set))","user":"597dcb0ce4b0dbe32238d0a2"},{"code":"(fn [ss]\n  (->>\n   ss\n   (group-by sort)\n   vals\n   (filter second)\n   (map set)\n   set))","problem":77,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [i]\n  (into #{} (filter (comp seq rest) (vals (reduce (fn [s [k v]]\n                                               (let [x (or (s k) #{})\n                                                     z (conj x v)]\n                                                 (assoc s k z))) {} (#(map (fn [y]\n                                                                             [(set y) y]) %) i))))))","problem":77,"user":"4db016af838c48654951d9b9"},{"code":"(fn [l1] (letfn [(helper [acc l] (if (empty? l) acc (helper (conj acc (into #{} (filter #(= (set (first l)) (set %)) l)))             \n         \t(filter #(not (= (set (first l)) (set %))) l))))]            \n    \t(into #{} (filter #(> (count %) 1) (helper #{} l1)))))","problem":77,"user":"52265e41e4b04e78ff2e1981"},{"problem":77,"code":"#(letfn [(groupwords [wordsets word]\n           (loop [input wordsets, output #{}]\n             (cond\n               (empty? input)\n                 (conj output #{word})\n               (= (set word) (set (first (first input))))\n                 (conj\n                   (clojure.set/union (rest input) output)\n                   (conj (first input) word))\n               :else\t\n                 (recur\n                   (rest input)\n                   (conj output (first input))))))\n         (singleton? [wordset]\n           (= 1 (count wordset)))]\n  (->> %\n       (reduce groupwords #{})\n       (remove singleton?)\n       set))","user":"58247423e4b051871117bec5"},{"problem":77,"code":"(fn eka\n    [xs]\n    (->> xs\n         (group-by #(sort (re-seq #\"[a-z]\" %)))\n         (vals)\n         (filter #(> (count %) 1))\n         (map #(into #{} %))\n         (into #{})\n         )\n    )","user":"596d630ae4b069c0a1a19846"},{"problem":77,"code":"(fn [xs] (set (map set (filter #(> (count %) 1) (vals (group-by (fn [x] (sort x)) xs))))))","user":"5d9c9446e4b0eb781811cdae"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by frequencies)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)\n  )\n )","user":"57cf03c0e4b00451144b04f9"},{"code":"(fn anagrams [coll]\n  (letfn [(permutation? [s1 s2]\n            (let [n (count s2)]\n              (cond\n               (and (empty? s1) (empty? s2))\n               true\n               (some #{(first s1)} s2)\n               (recur (rest s1)\n                      (rest (take n (drop-while #(not= (first s1) %) (cycle s2)))))\n               :else false)))\n          (find-anagrams [coll]\n            (for [s coll]\n              (set (filter #(permutation? % s) coll))))]\n    (into #{} (filter #(> (count %) 1) (find-anagrams coll)))))","problem":77,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn [ls]\n  (->>\n   ls\n   (group-by #(sort %))\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)))","problem":77,"user":"530b8580e4b02e82168697cc"},{"problem":77,"code":"(fn [lst]\n  (letfn [(anagram? [anagram word]\n            (= (into #{} word) (into #{} anagram)))\n          (find-anagrams [word]\n            (into #{} (filter (partial anagram? word) lst)))\n          (maybe-conj [result anagrams]\n            (if (> (count anagrams) 1)\n              (conj result anagrams)\n              result))]\n    (loop [[word & rest] lst\n           result #{}]\n      (let [anagrams (find-anagrams word)\n            new-result (maybe-conj result anagrams)]\n        (if rest\n          (recur rest new-result)\n          new-result)))))","user":"4f68c485e4b07046d9f4ef7c"},{"problem":77,"code":"(fn [w]\n  (->> (mapcat #(do {% (sort %)}) w)\n       (group-by #(second %))\n       (vals)\n       (map (fn [x] (set (map first x))))\n       (filter #(> (count %) 1))\n       (into #{})))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"#(set (for [[k v] (group-by sort %)\n           :when (next v)]\n         (set v)))","problem":77,"user":"4e71705e535d5021c1a89649"},{"code":"#(->> %\n(group-by sort) vals (filter next) (map set) set)","problem":77,"user":"4f10175e535d64f603146411"},{"problem":77,"code":"(fn final [sett]\n\n  (into #{}\n        (filter #(> (count %) 1) (map #(into #{} %)  (vals (group-by sort sett))) )\n\n\n        )\n\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn [l]\n           (apply hash-set\n                  (map (partial apply hash-set)\n                       (filter #(> (count %) 1)\n                               (vals\n                                (apply merge-with concat\n                                       (map (fn [w] { (apply str (sort w)) [w]})\n                                            l)))))))","problem":77,"user":"4db8f6c4535d1e037afb219e"},{"problem":77,"code":"(fn [v]\n   (letfn [(analysis [w] (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} w))\n           (analysis-word-list [v]\n             (reduce (fn [hash word]\n                       (let [key (analysis word)]\n                         (assoc hash key (conj (hash key #{}) word)))) {} v))]\n     (reduce-kv #(if (> (count %3) 1)\n                   (conj %1 %3)\n                   %1)\n                #{}\n                (analysis-word-list v))))","user":"5f3f2281e4b004f08c61c561"},{"problem":77,"code":"(fn[arr](set (filter #(> (count %1) 1) (map set(map second (group-by sort arr))))))","user":"5596af34e4b04c1e5c31d758"},{"problem":77,"code":"#(->> (group-by frequencies %)\n               vals\n               (filter (fn [[s & r]] r))\n               (map set)\n               set)","user":"505106fee4b05ab4c7e07d38"},{"code":"(fn anagrams [coll]\n  (set \n        (filter #(>= (count %) 2)\n          (map #(set %)\n               (vals (group-by sort coll))))))","problem":77,"user":"52c4af71e4b0c2d177d620e1"},{"code":"(fn [coll]\n  (set (map #(set (val %)) (filter #(> (count (val %)) 1) (group-by sort coll)))))","problem":77,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":77,"code":"(fn solve [words]\n  (let [word-to-ds (fn [word]\n                     {:key (apply str (sort (seq word))) :original word})\n        group-anagrams (fn [words]\n                         (let [groups (group-by :key (map word-to-ds words))]\n                           (map (fn [[k v]] (into #{} (map :original v))) groups)))]\n    (into #{} (filter #(> (count %) 1) (group-anagrams words)))))","user":"59be62d5e4b0a024fb6ae435"},{"problem":77,"code":"(fn [coll] (set \n                (map set (filter #(> (count %) 1) \n                                 (vals (group-by sort coll))))))","user":"534c1c64e4b084c2834f4a8a"},{"problem":77,"code":"(fn [words]\n  (reduce \n   (fn [acc word1]\n     (let [res (reduce \n                (fn [acc word2]\n                  (if (and (= (count word1) (count word2))\n                           (= (into #{} word1) (into #{} word2)))\n                    (conj acc word2)\n                    acc))\n                #{} words)]\n       (if (> (count res) 1)\n         (conj acc res)\n         acc))) \n   #{} words))","user":"54ca93abe4b057c6fda3a264"},{"problem":77,"code":"(fn anagram [x] (into #{} (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [words-list]\n   (set\n    (filter #(< 1 (count %))\n            (map set\n                 (letfn [[sorted-letters [word]\n                          (reduce str (sort word))]\n                         [matching-words [sorted-word]\n                          (filter #(= sorted-word (sorted-letters %)) words-list)]]\n                   (map #(matching-words %) (set (map sorted-letters words-list))))))))","problem":77,"user":"51fa90aae4b0f1313d4689e0"},{"problem":77,"code":"(fn [coll]\n  (let [grouped-coll (group-by #(set (seq %)) coll)]\n    (set (for [[k v] grouped-coll\n               :when (> (count v) 1)]\n           (set v)))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn [v] \n  (set \n    (filter #(< 1 (count %)) \n      (vals \n        (reduce \n          #(let [k (apply + (map int (vec %2)))] \n            (assoc % k (conj (% k #{}) %2))) {} v)))))","problem":77,"user":"4fb3b865e4b081705acca2a2"},{"problem":77,"code":"(fn anagram-finder [x]\n  (loop [res #{}\n         words x]\n    (if (empty? words) \n      (set (filter #(> (count %) 1) res))\n      (recur \n        (conj res (set (filter #(= (set (first words)) (set %)) x)))\n        (rest words)\n      )  \n    )\n  )\n)","user":"602cc4d4e4b0d5df2af22274"},{"problem":77,"code":"(fn [s] \n  (set (for [[k anags](group-by sort s)\n             :when (> (count anags) 1)]\n         (set anags))))","user":"5457e5f1e4b01be26fd74613"},{"problem":77,"code":"(fn [xs]\n  (->> (reduce (fn [m x]\n                 (let [k (into #{} x)\n                       v (if (contains? m k)\n                           (m k)\n                           #{})]\n                   (assoc m k (conj v x))))\n               {} xs)\n       (vals)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"5adf5f9be4b0837691e92c33"},{"code":"(let [stringify (partial apply str)]\n    (letfn [(kw-sorted [s]\n              (-> s sort stringify keyword))\n            (pairs [col]\n              (map vector (map kw-sorted col) col))\n            (conj-u [col [k v]]\n              (if-let [e (k col)]\n                (assoc col k (conj e v))\n                (assoc col k #{v})))]\n      (fn [col] (into #{} (filter #(< 1 (count %)) (vals (reduce conj-u {} (pairs col))))))))","problem":77,"user":"51eadb98e4b0f1f103a0d153"},{"problem":77,"code":"(fn [s]\n  (->> (group-by sort s)\n       (filter #(> (count (val %)) 1))\n       (map #(set (val %)))\n       (set)))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":77,"code":"(fn [s]\n    (let [words<-set (group-by set\n                               s)\n          anagrams   (filter #(>= (count %)\n                                  2)\n                             (vals words<-set))]\n      (set (map set\n                anagrams))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":77,"code":"(fn [ws]\n  (set (filter #(> (count %) 1) (map set (vals (group-by #(sort %) ws))))))","user":"5136f659e4b04059df19f2fd"},{"code":"(fn[s] (set (filter #(> (count %) 1) \n  (map (fn[[_ v]] (set v)) (group-by #(sort %) s)))))","problem":77,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":77,"code":"(fn [s] \n  (->> s\n       (group-by set)\n       vals\n       (map set)\n       (filter #(not= 1 (count %)))\n       set))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":77,"code":"; daowen's solution\n#_#(->> %\n      (group-by sort)\n      vals\n      (filter second)\n      (map set)\n      set)\n\n; awful first solution\n  (fn [words]\n    (letfn [\n            (anagrams? [word1 word2] (= (frequencies word1) (frequencies word2)))\n            (anagram-set [wordsets word]\n                         (or\n                           (reduce\n                             (fn [result wordset]\n                               (if (anagrams? (first wordset) word)\n                                 (conj (disj wordsets wordset) (conj wordset word))\n                                 result))\n                             nil\n                             wordsets)\n                           (conj wordsets #{ word })))\n            ]\n      (set (filter #(< 1 (count %)) (reduce anagram-set #{} words)))))","user":"55e7d06ee4b050e68259b496"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       (vals)\n       (map set)\n       (filter #(not-empty (rest %)))\n       (set)))","user":"59a080e3e4b0871e7608b837"},{"problem":77,"code":"#(->> %\n      (group-by set)\n      vals\n      (map set)\n      (filter next)\n      set)","user":"5d29c06be4b01671435dbc6b"},{"code":"#(->> % (group-by sort) vals (remove (comp #{1} count)) (map set) set)","problem":77,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":77,"code":"(fn [coll]\n    (set\n     (for [[_ v] (group-by set coll)\n           :when (> (count v) 1)]\n       (set v))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"5d28d935e4b092dab7f59c88"},{"problem":77,"code":"(fn [x]\n  (into #{}\n        (map set\n             (filter #(not (empty? (rest %)))\n                     (vals\n                      (group-by sort x))))))","user":"4ee897fe535d93acb0a66883"},{"problem":77,"code":"(fn anagram-finder [strs]\n  (let [str->map (fn [s]\n                   (reduce\n                     (fn [res elm]\n                       (update-in res [elm] #(if (nil? %)\n                                               1\n                                               (inc %))))\n                     {}\n                     s))]\n    (->> (group-by str->map strs)\n         vals\n         (map #(into #{} %))\n         (filter #(< 1 (count %)))\n         (into #{}))))","user":"5984e7dee4b021a7a535fe43"},{"problem":77,"code":"(fn [s]\n   (->>\n     (map #(assoc {} % [%2])  (map (fn [col] (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} col)) s) s)\n     (apply (partial merge-with concat))\n     (vals)\n     (map set)\n     (filter #(< 1 (count %)))\n     (set))\n   )","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn [s] (set (remove #(= 1 (count %)) (map set (vals (group-by sort s))))))","problem":77,"user":"4f08b15b535dcb61093f6c40"},{"problem":77,"code":"(fn [c] (->> c (group-by sort) vals (filter #(< 1 (count %))) (map set) set))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [l]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by #(-> % seq set) l))))))","problem":77,"user":"4faac363e4b081705acca200"},{"code":"#(->> %\n   (group-by frequencies)\n   (vals)\n   (filter next)\n   (map set)\n   (set))","problem":77,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":77,"code":"(fn [words]\n  (->> (group-by frequencies words)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map set)\n       (set)))","user":"5344fe13e4b084c2834f4a32"},{"problem":77,"code":"(fn ana-find [ws]\n  (->> ws\n       (group-by frequencies)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)\n       ))","user":"56fa2905e4b07572ad1a88be"},{"problem":77,"code":";;(fn f-proc-el \n;;([sets ss] (let [f-to-map (fn [wrd] (into {} \n;;(map #(vector % (count (filter (partial = %) wrd))) wrd)))\n;;                 word (first ss) \n;;                 sr (rest ss) \n;;                 wmap (f-to-map word)\n;;                 filter-words #(= wmap (f-to-map %))\n;;                 words (into #{} (filter filter-words ss))\n;;                 ss-next (filter #(not (filter-words %)) sr)\n;;                 sets-next (if (empty? (rest words)) sets (conj sets words))]\n;;             (if (empty? ss-next) sets-next (f-proc-el sets-next ss-next)) ))\n;;([ss] (f-proc-el #{} ss)))\n\n#( ->> (group-by frequencies %) \n       vals\n       (map set)\n       (filter second)\n       set )","user":"575ddfd1e4b02ea11479938d"},{"problem":77,"code":"(fn \n  [v]\n  (into #{}\n        (map #(set (second %))\n             (filter #(> (count (second %)) 1)\n                     (group-by sort v)))))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn [coll]\r\n  (let [gen-ana-id        (fn [word]\r\n                              (->> word sort (apply str)))\r\n        group-ana         (fn [words]\r\n                              (group-by gen-ana-id words))\r\n                              \r\n        many-ana?         (fn [[_, words]] \r\n                              (->> words count dec zero? not))\r\n        remove-single-ana (fn [coll]\r\n                              (filter many-ana? coll))\r\n                              \r\n        ap-set            (fn [coll] (apply hash-set coll))\r\n                              \r\n        to-set            (fn [coll]\r\n                              (ap-set (map (fn [[_, words]] (ap-set words)) coll)))]\r\n    (->> coll group-ana remove-single-ana to-set)))","problem":77,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn [words]\n   (->> (reduce\n         (fn [sets word]\n           (let [id (apply str (sort (seq word)))]\n             (assoc sets id (conj (get sets id #{}) word))))\n         {}\n         words)\n        vals\n        (filter #(< 1 (count %)))\n        (apply hash-set)))","problem":77,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn [xs]\n    (->> xs \n         (group-by #(group-by char %))\n         vals\n         (filter (comp #(> % 1) count))\n         (map #(into #{} %))\n  \t     (into #{})))","problem":77,"user":"4fb1fa51e4b081705acca283"},{"code":"(fn [inp] (let [dist-set (distinct (map set inp))\n      all (map (fn [f] (set (filter #(= f (set %)) inp))) dist-set)]\n  (set (filter #(< 1 (count %)) all))))","problem":77,"user":"5150a7d7e4b03e678e393abb"},{"problem":77,"code":"(fn [words]\n    (set\n        (filter #(< 1 (count %))\n            (reduce  \n                (fn [s, w] (conj s (set (filter #(= (set w) (set %)) words))))\n            #{}\n            words))))","user":"5356d00ee4b04ce2eb3ed26f"},{"problem":77,"code":"#(->> (group-by frequencies %) vals (filter (fn [coll] (not (empty? (rest coll))))) (map set) set)","user":"597768d0e4b01722bebd4cee"},{"problem":77,"code":"(fn [v]\n  (->> v \n       (map (fn [a]\n              (let [ascii (->> a\n                               (vec)\n                               (map int)\n                               (reduce + 0))]\n                (hash-map :word a :number ascii))\n             ))\n       (group-by #(:number %))\n       (vals)\n       (filter #(> (count %) 1))\n       (map (fn [a]\n              (->> a \n                   (map #(:word %))\n                   (set))\n              ))\n       (set)\n       ))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn f [s] (set (filter #(> (count %) 1) (map set (vals (group-by set s))))))","problem":77,"user":"51b90b88e4b050a1176cd6a2"},{"code":"(fn [words]\n  (let [letters (into {} (for [w words] [w (sort w)]))]\n    (into #{}\n      (filter #(> (count %) 1)\n        (map\n          #(set (map first (val %)))\n          (group-by #(val %) letters))))))","problem":77,"user":"504c8165e4b09724c857af31"},{"code":"(fn [words] \n  (set \n    (filter \n      #(< 1 (count %)) \n      (vals \n        (loop [words words m {}] \n          (let [w  (first words) \n                sw (sort w) \n                o  (get m sw #{}) \n                n  (conj o w)] \n            (if w \n              (recur (next words) (assoc m sw n)) \n              m)))))))","problem":77,"user":"4f1fd734535d64f6031464a5"},{"code":"#(set (for [[k v] (group-by sort %) :when (> (count v) 1)]\n   (set v)))","problem":77,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn [lst]\n (set (map set\n  (filter\n   #(> (count %) 1)\n   (vals (group-by set lst))))))","problem":77,"user":"4e356d2b535deb9a81d77f2d"},{"problem":77,"code":"#(->> (group-by set %) vals (filter (comp (partial < 1) count)) (map set) set)","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn [v]\n  (let [groups (group-by sort v)]\n    (set (map #(set (% 1)) (filter #(>= (count (% 1)) 2) groups)))))","problem":77,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn [x] (set\n  (map set\n   (filter #(> (count %) 1)\n     (vals\n       (group-by sort x))))))","problem":77,"user":"52d39033e4b099d49816f0c6"},{"code":"(fn [s]\n  (let [g (group-by #(into #{} (seq %)) s)]\n    (into #{} (filter identity (for [[k v] g]\n                                 (if (> (count v) 1) (set v)))))))","problem":77,"user":"52f3af46e4b05e3f0be25f14"},{"problem":77,"code":"(fn [c] (set (map set\n     (filter #(> (count %) 1) \n             (vals \n               (group-by #(sort (vec %)) c))))))","user":"50f10f7be4b06d9538fe211a"},{"problem":77,"code":"(fn [words]\n    (into #{} (map #(into #{} %) (filter #(< 1 (count %)) (vals (group-by sort words))))))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn anagrams [[w & _ :as words]]\n  (when words\n    (let [anagram? (fn [x y] (= (sort x) (sort y)))\n          {ags true other false} (group-by (partial anagram? w) words)]\n            (set (filter #(> (count %) 1) (cons (set ags) (anagrams other)))))))","problem":77,"user":"4ded27db535d08e6dec9fe0a"},{"problem":77,"code":"(fn [xs]\n\t\t(set (map set (filter #(> (count %) 1) (vals (group-by #(-> % sort clojure.string/join) xs)))))\n\t)","user":"5409f8eae4b0addc1aec66e6"},{"problem":77,"code":"(fn [c]\n  (->> c\n       (map #(hash-map (sort %) (set [%])))\n       (apply merge-with into)\n       vals\n       (remove #(= 1 (count %)))\n       set))","user":"5d24e49be4b02ea6f0fb6a2a"},{"code":"(fn anagram [xs]\r\n  (letfn [(anagram? [x y] (= (set x) (set y)))]\r\n    (if (empty? xs)\r\n      #{}\r\n      (let [[x & rxs] xs\r\n            ana (filter #(anagram? x %) rxs)]\r\n        (if (empty? ana)\r\n          (anagram rxs)\r\n          (conj (anagram (remove #(anagram? x %) rxs))\r\n                (conj (set ana) x)))))))","problem":77,"user":"4dfd4ba8535d04ed9115e781"},{"code":"(fn [x]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by set x))))))","problem":77,"user":"51e00020e4b01188f0627534"},{"code":"(fn [ws]\n  (set (filter (fn [ss] (< 1 (count ss)))  (map (fn [s] (set ( second s))) (group-by (fn [v] (frequencies  v) ) ws )))))","problem":77,"user":"53a5bc3ae4b0ef122a8689c3"},{"problem":77,"code":"(fn find-anagrams [avec]\n  (let [words-by-chars (group-by sort avec)\n        two-or-more-words? (comp (partial < 1) count val)]\n    (into #{} (map (partial into #{}) (vals (filter two-or-more-words? words-by-chars))))))","user":"53504fe6e4b084c2834f4ada"},{"problem":77,"code":"(fn [s](into #{} (filter #(> (count %) 1)(reduce (fn [result head]\n            (let [key (apply str (sort head))\n\t\t\t\t\tkeys (into #{} (map (fn [anagrams] (set (map #(apply str (sort %)) anagrams))) result))]\n                  (if (not (contains? keys #{key}))\n                     (conj result #{head})\n\t\t\t\t\t (into #{} (map #(if (= (apply str (sort (first %1))) key)\n\t\t\t\t\t\t(conj %1 head) %1) result))))) #{} s))))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [words] \n          (set (map set (filter #(> (count %) 1) \n              (vals (group-by frequencies words))))))","problem":77,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn anagrama [ventrada]\r\n  (letfn\r\n  \t[\t(ana [x] (sort (re-seq #\"[a-z]\" x)))\r\n\t\t\t(extreu [xlist actual]\r\n\t\t\t\t(if (>= (count actual) 2)\r\n\t\t\t\t\t(conj xlist (reduce conj #{} actual))\r\n\t\t\t\t\txlist))\r\n\t\t\t(res [z] (group-by ana z))\r\n\t\t]\r\n\t\t(reduce extreu #{} (map second (res ventrada))))\r\n)","problem":77,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [words]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by set words))))))","problem":77,"user":"5006b7d2e4b0678c553fc48c"},{"code":"(fn [coll]\n  (set (map (fn [s]\n              (set (map #(% 0) s)))\n            (->> (map #(vector % ((comp set seq) %)) coll)\n                 (group-by #(identity (% 1)))\n                 (map val)\n                 (filter #(> (count %) 1))))))","problem":77,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn [s]\n  (set\n    (filter #(>= (count %) 2)\n      (map (fn [w] (set (filter #(= (set %) (set w)) s)))\n           s))))","problem":77,"user":"4f06dcad535dcb61093f6c16"},{"problem":77,"code":"(fn [xs]\n  (letfn [(classify-str [s] \n            (apply str (sort s)))\n          (conj-multi-result [accum key-val]\n            (let [anagrams (into #{} (val key-val))]\n              (if (< 1 (count anagrams))\n                (conj accum anagrams)\n                accum)))]\n    (reduce conj-multi-result #{} (group-by classify-str xs))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":77,"code":"(fn [a]\n    (set(for [x\n    (map second(filter\n    \n    (fn [b] (> (count (second b)) 1 ))\n   \t(group-by\n     \t#(identity (first %))\n     \t(partition 2 (interleave (map sort (map seq a)) a))\n    )\n   ))]\n    (set (map second x))\n    ))\n)","user":"5676af21e4b05957ce8c6158"},{"problem":77,"code":"(fn [s] (set (map set (into #{} (filter #(> (count %) 1) (vals (group-by sort s)))))))","user":"53ba41c2e4b047364c0444f3"},{"problem":77,"code":"(fn anagram-set-maker [strings]\n  (set\n  (filter #(> (count %) 1) (vals\n  (reduce\n      (fn [agg elem] (let [sorted-string (clojure.string/join (sort elem))]\n                       (assoc agg sorted-string (conj (get agg sorted-string #{}) elem))))\n      {}\n      strings)))))","user":"525d44bfe4b0cb4875a45d6d"},{"code":"(fn [x] (set (filter #(> (count %) 1) (map set (vals (group-by (comp seq sort) x))))))","problem":77,"user":"50ebd63ce4b04edc3377703c"},{"code":"(fn [s] (set (map set (filter #(< 1 (count %)) (vals (group-by #(set (map identity %)) s))))))","problem":77,"user":"4fdbc075e4b05e33b9224f61"},{"code":"(fn [x]\n  (set (filter #(> (count %) 1)\n       (map set\n            (vals (group-by #(group-by identity (seq %)) x))))))","problem":77,"user":"4ed94d69535d10e5ff6f5303"},{"problem":77,"code":"#(->> (group-by sort %)\n      vals\n      (filter next)\n      (map set)\n      set)","user":"5d81eba4e4b0915913b1d37b"},{"problem":77,"code":"(fn[x] (set (map set (filter #(> (count %1) 1) (vals ( group-by sort x))))))","user":"53d63e6ce4b0e771c3025454"},{"problem":77,"code":"#(->> % (group-by sort) \n     (filter (fn [[k v]] (> (count v) 1))) (map second) (map set) set)","user":"57ed8315e4b0bfb2137f5b9a"},{"code":"(fn [v] \n  (into #{} \n        (map #(into #{} %)\n            (vals \n             (filter #(> (count (last %)) 1)\n                     (group-by #(sort %) v ))))))","problem":77,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":77,"code":"(fn [w] (->> w (group-by #(group-by identity %)) (map second) (filter #(> (count %) 1)) (map set) set))","user":"59ad2fcee4b00adcf69795de"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5d45749be4b07c84aa5ae6a2"},{"code":"#(set (map set (filter (fn [v] (> (count v) 1)) (vals (group-by set %)))))","problem":77,"user":"52afbc69e4b0c58976d9acc0"},{"problem":77,"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by #(apply + (map int %)) c))))))","user":"5c41db45e4b08cd430848ece"},{"problem":77,"code":"(fn ana-for [coll]\n\t(->> (map (fn [word]\n\t\t\t\t  (let [letters (sort word)]\n\t\t\t\t\t  (filter #(and (= letters (sort %))) coll)\n\t\t\t\t\t  )) coll)\n\n\t\t (reduce (fn [r e]\n\t\t\t\t\t (if (> (count e) 1)\n\t\t\t\t\t\t (conj r (set e))\n\t\t\t\t\t\t r))\n\t\t\t\t #{})))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [v]\n      (set \n        (filter #(> (count %) 1) \n                (map #(set %) \n                     (vals \n                       (group-by frequencies (seq v))       \n                       )\n                     )\n                )\n        )\n      )","problem":77,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [words]\n    (->>\n     words\n     (group-by set)\n     vals\n     (remove #(= 1 (count %)))\n     (map set)\n     set\n     )\n  )","problem":77,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [s] (->> s (group-by sort) vals (map set) (filter #(< 1 (count %))) set))","problem":77,"user":"4f954dbce4b0dcca54ed6ccd"},{"problem":77,"code":"(fn [v] \n  (->> v\n       (group-by sort)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map #(apply hash-set %))\n       (into #{})))","user":"57934c67e4b0e215f87e8456"},{"problem":77,"code":"(fn [words]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by (comp set seq) words))))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":77,"code":"(fn [x] (->> x\n  (group-by #(sort (seq %)))\n  (vals)\n  (filter #(> (count %) 1))\n  (map set)\n  (set)))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [i] (into #{} (map set (filter #(< 1 (count  %)) (vals (group-by sort i))))))","problem":77,"user":"4f0e4ebd535d0136e6c22322"},{"code":"(fn [c]\r\n   (set (filter #(> (count %1) 1) (for [x c]\r\n     (set (filter #(= (set %1) (set x)) c))))))","problem":77,"user":"4ff07688e4b0678c553fc324"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (loop [acc #{}\n         coll coll]\n    (if (empty? coll)\n      acc\n      (let [a-set (reduce #(if (= (sort (first %1))\n                                  (sort %2))\n                             (conj %1 %2)\n                             %1)\n                          (set (list (first coll)))\n                          (rest coll))]\n        (recur (if (> (count a-set) 1)\n                 (conj acc a-set)\n                 acc)\n               (filter #(not (a-set %)) coll))))))","user":"54084784e4b0addc1aec66c9"},{"code":"(fn[c] (set (filter #(> (count %) 1) (map set (vals (group-by #(set %) c))))))","problem":77,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn t1 [coll]\n  (set (filter #(> (count %1) 1) (map (fn [word] \n           (set (for [other coll\n                :when (= (count word) (count other))\n                :when ((fn [s w] (reduce #(and %1 %2) (map #(contains? s %1) w)))\n                       (set word) other)]\n                  other))) coll))))","problem":77,"user":"5046f909e4b03b02161376b5"},{"problem":77,"code":"(fn [words]\n  (->> (group-by frequencies words)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":77,"code":"(fn anagrams\n  [xs]\n  (into #{}\n    (remove\n     #(< (count %) 2)\n     (reduce\n      (fn [acc item]\n        (let [sitem (sort item)\n              group (filter\n                     (fn [i]\n                       (= (sort (first i)) sitem))\n                     acc)\n              gitem (first group)]\n          (if (nil? gitem)\n            (conj acc #{item})\n            (conj (remove #{gitem} acc) (conj gitem item)))))\n      '()\n      xs))))","user":"4f85a75ce4b033992c121c48"},{"problem":77,"code":"(fn anagrams [strs]\n  (set\n    (map set\n         (filter #(> (count %) 1)\n                 (vals (group-by #(group-by identity %) strs))))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":77,"code":"(fn [s] \n  (let [vs (vals (group-by #(sort (frequencies %)) s))]\n    (set (map set (filter #(> (count %) 1) vs)))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [coll]\r\n   (->> coll\r\n        (map #(vector (set %) %))\r\n        (group-by first)\r\n        (vals)\r\n        (map #(set (map second %)))\r\n        (remove #(= 1 (count %)))\r\n        (set))\r\n        )","problem":77,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn [v]\n   (loop [v v\n          acc #{}]\n     (if (= (count v) 0)\n       (set (remove #(= 1 (count %)) acc))\n       (recur \n        (remove #(= (sort %) (sort (first v))) v)\n        (conj\n         acc\n         (set (filter #(= (sort %) (sort (first v))) v)))))))","problem":77,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn [x]\n  (set\n  (filter\n    #(> (count %) 1)\n    (map\n      set\n      (vals\n        (group-by\n          (juxt count set)\n        x))))))","problem":77,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn [data]\n  (set (map set\n            (filter #(> (count %1) 1)\n                    (map val (group-by sort data))))))","problem":77,"user":"4f1c2a3a535d64f603146480"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words\n       (group-by #(sort %))\n       vals\n       (remove #(= 1 (count %)))\n       (map set)\n       (into #{})))","user":"5501a1e1e4b07d26eda61d75"},{"problem":77,"code":"(fn anagrams [words]\n  (if (empty? words)\n    #{}\n    (loop [set (set words)\n           word (first set)\n           res #{word}\n           rem (rest set)\n           sorted-chars (sort word)]\n      (if (empty? rem)\n        (let [rec (anagrams (disj set word))\n              curr-set (if (> (count res) 1)\n                         #{res}\n                         #{})]\n          (if (empty? rec)\n            curr-set\n            (clojure.set/union curr-set rec)))\n        (let [curr (first rem)\n              s (println curr)\n              sorted-chars-curr (sort curr)]\n          (if (= sorted-chars-curr sorted-chars)\n            (recur (disj set curr) word (conj res curr) (rest rem) sorted-chars)\n            (recur set word res (rest rem) sorted-chars)\n            ))\n        )\n      )\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [words]\n  (letfn\n    [(permutation? [xs ys]\n      (and (= (count xs) (count ys))\n           (reduce #(and %1 %2)\n                   (map = (sort xs)\n                          (sort ys)))))]\n    (set (filter #(> (count %) 1) (distinct\n      (map \n        (fn [word] \n          (set (filter (partial permutation? word)\n                             words)))\n        words))))))","problem":77,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by #(sort %) coll)\n       (map last)\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5666500ee4b0e91d5f5c566d"},{"problem":77,"code":"(fn anagrams\n  [ss]\n  (let [anagram?\n        (fn\n          [s w]\n          (= (set s) (set w)))\n\n        only-anagrams\n        (fn\n          [ss]\n          (set (filter #(anagram? (first ss) %) ss)))\n\n        words-with-anagrams\n        (fn\n          [st]\n          (filter #(> (count %) 1) st))\n\n        rest-words\n        (fn\n          [ss]\n          (filter #((complement anagram?) (first ss) %) ss))]\n    (->> ss\n         (#(if (> (count ss) 0)\n             (cons (only-anagrams %) (anagrams (rest-words  %)))))\n         (words-with-anagrams)\n         (set))))","user":"5614fa1de4b05f002753dfbe"},{"problem":77,"code":"(fn find-anagrams\n  [words]\n  (->> words\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5d53a59ae4b0776584bd6f72"},{"code":"(fn [xs]\n  (set (map set \n     (filter #(> (count %) 1) \n       (map #(map :word (second %)) \n          (group-by :letters \n              (map #(hash-map :word % :letters (sort (vec %))) xs)))))))","problem":77,"user":"5142e808e4b0c172af7558c9"},{"problem":77,"code":"(fn [s] (set (map set (filter #(> (count %) 1) (vals (group-by #(frequencies %) s))))))","user":"5292feb4e4b0239c8a67af39"},{"problem":77,"code":"(fn anagrams [v]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort v))))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":77,"code":"(fn anagram[l]\n  (set (filter\n    #(> (count %) 1) \n    (set (map\n           (fn [s]\n             (set(filter\n                   #(= (sort s) (sort %))\n                   l))\n             )\n           l)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":77,"code":"(fn [xs] (set (filter #(> (count %) 1) (map set (vals (group-by set xs))))))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [v]\n   (set\n    (map set\n         (filter #(> (count %) 1)\n                 (vals (group-by sort v))))))","problem":77,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn [y]\n  (let [ss #(str(sort(seq %)))]\n  (set\n    (map set\n      (filter #(> (count %) 1)\n        (partition-by\n          ss\n           (sort-by\n             ss\n             y)))))))","problem":77,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by sort c))))))","problem":77,"user":"4f031eac535dcb61093f6a67"},{"code":"(fn anagram [c]\n  (set (map set (filter (fn [e] (> (count e) 1)) (vals (group-by set c))))))","problem":77,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn [s] \n  (set (map set (filter #(< 1 (count %)) (vals (group-by (fn [x] (sort x)) s))))))","problem":77,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [v]\r\n (loop [acc #{} v (set v)]\r\n  (if (empty? v)\r\n      acc\r\n      (let [a (first v)\r\n            b (filter (fn [x] (= (set a) (set x))) v)\r\n            acc (if (> (count b) 1) (conj acc (set b)) acc)]\r\n            (recur acc (apply disj v b))))))","problem":77,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn t [ss]\n  (set \n   (map set \n        (filter \n         #(< 1 (count %))\n         (vals (group-by frequencies ss))))))","problem":77,"user":"51b793d3e4b0d906fcd71d38"},{"problem":77,"code":"(fn [x]\n  (->> (group-by sort x)\n       (map val)\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"593910eae4b02506e01a29f4"},{"problem":77,"code":"(fn [coll]\n    (->> coll\n      (group-by #(set (seq %)))\n      (filter #(> (count (val %)) 1))\n      (map (comp set val))\n      (set)\n  ))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn __ [xs]\n  (set (map (fn [x] \n      (set (map #(apply second %) x))\n    ) (filter #(> (count %) 1) (map second (group-by ffirst (map #(hash-map (sort \n      (re-seq (re-pattern (str \"[\" % \"]\")) %)\n    ) %) xs))))))\n)","problem":77,"user":"503f872ee4b00d1a725ff2ac"},{"problem":77,"code":"(fn findAnagrams [wordlist]\n  (let\n    [\n     countLetters\n     (fn [word]\n       (reduce\n         (fn [counter letter]\n           (assoc\n             counter\n             letter\n             (if\n               (contains? counter letter)\n               (inc (counter letter))\n               1\n               )\n             )\n           )\n         {}\n         word\n         )\n       )\n     collectLetters\n     (fn [words]\n       (reduce\n         (fn [collector word]\n           (let [key (countLetters word)]\n             (assoc\n               collector\n               key\n               (if (contains? collector key)\n                 (conj (collector key) word)\n                 (set (vector word))\n                 )\n               )\n             )\n           )\n         {}\n         words\n         )\n       )\n     ]\n    (set (filter #(< 1 (count %)) (map set (vals (collectLetters wordlist)))))\n    )\n  )","user":"58950f29e4b00487982d5270"},{"code":"#(set (map (fn [i] (set i)) \n  (filter (fn [re] (< 1 (count re))) (vals (group-by \n  (fn [e]\n    (str (sort (seq e))))\n  %)))))","problem":77,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [v]\n  (let [get-ordered-chars #(sort (seq %))]\n  (into #{} (filter #(> (count %) 1)\n  (vals (reduce\n\t\t#(let [s-key (get-ordered-chars %2)]\n\t\t\t\t(if (contains? %1 s-key)\n\t\t\t\t\t(assoc %1 s-key (conj (get %1 s-key) %2))\n\t\t\t\t\t(assoc %1 s-key #{%2})))\n\t\t{} v))))))","problem":77,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn [wordlist] \n  (let [srtfunc (fn [x] (apply str (sort x)))]\n    (apply hash-set \n      (filter #(> (count %) 1) \n\t\t    (map #(apply hash-set %) \n\t\t\t    (vals (reduce #(assoc %1 (srtfunc %2) \n\t\t\t\t    (conj (%1 (srtfunc %2)) %2)) {} wordlist)))))))","problem":77,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1)\n               (map (fn [x] (set (map #(second %) x)))\n                    (partition-by first\n                                  (sort-by first (map #(vector (clojure.string/join (sort %)) %) words)))))))","problem":77,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"#(set (for [w (vals (group-by sort %))\n            :when (< 1 (count w))]\n        (set w)))","problem":77,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn [coll]\n  (set\n   (map set\n     (filter #(> (count %) 1)\n       (vals\n        (group-by\n          sort coll))))))","problem":77,"user":"50217818e4b00bba4502f7a7"},{"problem":77,"code":"(fn anagrams [coll]\n  (set (filter #(> (count %) 1) (map set (vals (group-by #(sort (seq %)) coll)))))\n  )","user":"5245e320e4b09dbe66b56177"},{"code":"(fn anagram [coll]\n    (set (map set (filter (comp seq rest)\n        (vals (group-by sort coll))))))","problem":77,"user":"5132c6f0e4b021281ec7b6d3"},{"problem":77,"code":"(fn [words]\n     (loop [restWords words\n            resultSet #{}]\n       (if (empty? restWords)\n         (into #{} (filter #(< 1 (count %)) resultSet))\n         (let [x (first restWords)\n               freqX (frequencies x)\n               filterFun #(= freqX (frequencies %))]\n           (recur\n             (remove filterFun restWords)\n             (conj resultSet (into #{} (filter filterFun restWords))))))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":77,"code":"(fn [m]\n   (set\n    (filter #(= (type %) (type #{}))\n            (map (fn [d] (if (> (count d) 1) (set d) nil))\n                 (map (fn [x] (second x))\n                      (group-by set m))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":77,"code":"(fn [inputs] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) inputs))))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":77,"code":"(fn [words]\n    (->> (group-by sort words)\n         vals\n         (filter #(< 1 (count %)))\n         (map set)\n         set))","user":"4ed90014535d10e5ff6f52fe"},{"problem":77,"code":"(fn anagram [s]\n    (let [matches (->>\n                    (map frequencies s)\n                    (group-by identity)\n                    (filter (fn [[k v]] (> (count v) 1)))\n                    )]\n\n      (into #{} (map #(into #{} (filter (fn [w] (= (frequencies w) (key %))) s)) matches))\n      )\n    )","user":"56791447e4b05957ce8c6183"},{"problem":77,"code":"(fn find-all-anagrams\n  [coll]\n  (loop [[f & l] coll seen {}]\n          (if (nil? f)\n            (into #{} (filter #(> (count %) 1) (vals seen)))\n            (let [skey (sort f)]\n              (if (seen skey)\n                (recur l (assoc seen skey (conj (get seen skey) f)))\n                (recur l (assoc seen skey #{f})))))))","user":"55079e55e4b021ccfedb96aa"},{"code":"(fn [c]\n   (letfn ([scnd-only [c]\n            (map #(let [[_ s] %]\n                    s) c)])\n          (set (map #(set (scnd-only %))\n               (filter #(> (count %) 1)\n                       (vals \n                         (group-by first \n                                   (map #(vector (set (seq %)) %) c))))))))","problem":77,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"#(->> %\n      (group-by sort)\n      vals\n      (filter next)\n      (map set)\n      set)","problem":77,"user":"5003ee7de4b0678c553fc446"},{"problem":77,"code":"(fn [s](->> s (group-by sort) (vals) (map set) (filter #(> (count %) 1 )) (set)))","user":"512b07f7e4b078b06821febb"},{"problem":77,"code":"(fn [coll] (into #{} (map set (filter #(> (count %) 1) \n                   \t\t\t\t(vals (group-by sort coll))))))","user":"57283dbce4b0c5bde472c154"},{"code":"#(set (map set (remove (comp (partial = 1) count) (vals (group-by sort %)))))","problem":77,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":77,"code":"(fn [xs]\n  (apply hash-set\n         (map \n          (partial apply hash-set)                                    \n          (distinct\n           (filter                                                     \n            #(< 1 (count %))                                           \n            (for [x xs]                                                \n             (filter #(= (sort %) (sort x)) xs)))))))","user":"54d127b7e4b0e8a36923e5de"},{"code":"#(set (filter (comp (partial < 1) count)(map set (vals (group-by sort %)))))","problem":77,"user":"5349ac2be4b084c2834f4a67"},{"problem":77,"code":"(fn [xs]\n  (->> xs (group-by sort) vals (filter #(> (count %) 1)) (map set) set))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn [words]\n  (let [is-anagram? #(= (sort %) (sort %2))\n        sets (for [word words] (filter #(is-anagram? word %) words))]\n    (set (for [s sets :when (> (count s) 1)] (set s)))))","problem":77,"user":"5201ff99e4b0b2e020a18f26"},{"code":"#(set (for [a (vals (group-by sort %)) :when (< 1 (count a))] (set a)))","problem":77,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn anagram-finder [s]\n  (let [m (group-by #(sort (seq %)) s)\n        groups (vals m)\n        sets (map set groups)\n        multi-sets (filter #(> (count %) 1) sets)]\n    (set multi-sets)))","problem":77,"user":"4f036fb3535dcb61093f6ac8"},{"problem":77,"code":"(fn [xs]\n  (let [anagram? (fn [a b] (= (sort a) (sort b)))]\n    (->> (reduce (fn [a i]\n              (->> xs \n                   (filter #(anagram? % i))\n                   (into #{})\n                   (conj a)))\n          []       \n            xs)\n    \t(filter #(> (count %) 1))\n    \t(into #{}))))","user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn [xs]\n  ;;;;; VERY UGLY\n    (into #{}\n        (remove #(= 1 (count %))\n            (into #{}\n              (for [[k v]\n                (apply merge-with clojure.set/union\n                  (map #(hash-map\n                          (apply str (sort %)) (set [%])) xs))] v)\n    ))))","problem":77,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"(fn [v] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) v))))))","problem":77,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":77,"code":"(fn [coll]\n    (set (filter #(> (count %) 1) (map (comp set  second) (group-by sort coll))))\n)","user":"5471f2fbe4b094393f72dd70"},{"problem":77,"code":"(fn [s]\n  (let [anagram? (fn [x y] (= (sort x) (sort y)))] \n  (into #{} (filter #(<= 2 (count %))\n          (map (fn [x] \n                 (into #{} (filter #(anagram? x %) s))) \n               s)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":77,"code":"(fn [ana-vec ](set (filter #(> (count %) 1) (map set (vals (group-by sort ana-vec))))))","user":"5961e8d0e4b066ee0a44b0a8"},{"code":"(fn [strs]\n  (set (filter #(> (count %) 1) (map set (vals (group-by set strs))))))","problem":77,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn [s]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (apply merge-with into (map #(hash-map (set %) [%]) s)))))))","problem":77,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [ws]\n  (let [classes (set (map sort ws))\n        find-reps (fn [c] (set (filter #(= c (sort %)) ws)))]\n    (set (filter #(< 1 (count %)) (map find-reps classes)))))","problem":77,"user":"504e14c2e4b078edc5f593bf"},{"problem":77,"code":"(fn [words]\n  (let [hash-key #(apply str (sort (.toLowerCase %)))\n        groups (vals (group-by hash-key words))]\n(set (map set (filter #(> (count %) 1) groups)))))","user":"5ae0976be4b0837691e92c43"},{"problem":77,"code":"(fn [data](->>  (filter #(> (count %) 1) (vals (group-by (fn [string] (into #{} string)) data))) (map set ) (set)  ))","user":"583c4482e4b089d5ab817d7e"},{"code":"(fn anagram-finder\n  [word-list]\n  (->> word-list\n       (group-by sort)\n       vals\n       (remove #(< (count %) 2))\n       (map set)\n       set))","problem":77,"user":"4f541874e4b0a7574ea717d8"},{"problem":77,"code":"(fn [words]\n  (->>\n   words\n   (group-by #(set %) ,)\n   (vals ,)\n   (map set ,)\n   (filter #(> (count %) 1) ,)\n   (set ,)))","user":"53065acbe4b02e8216869792"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (group-by set)\n         (filter #(> (count (second %)) 1))\n         (map (comp set second))\n         set))","user":"516db4f6e4b046df6fbb76a0"},{"problem":77,"code":"#(->> (group-by frequencies %)\n      (vals)\n      (filter (fn [x] (> (count x) 1)))\n      (map set)\n      (set))","user":"5cfee28de4b0cc9c91588185"},{"problem":77,"code":"#(->> %\n      (group-by (fn [x] (sort (seq x))))\n      vals\n      (filter (fn [x] (> (count x) 1)))\n      (map set)\n      set)","user":"5657fed1e4b0f9d632dd84ae"},{"problem":77,"code":"(fn [coll]\n  (let [norm-ana (->> coll\n                      (map sort)\n                      frequencies\n                      (filter #(> (second %) 1))\n                      (map first)\n                      set)]\n    (->> coll\n         (group-by (comp norm-ana sort))\n         (remove (comp nil? first))\n         vals\n         (map set)\n         set)))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn[xs]\n  (set (filter #(< 1 (count %)) \n    (map set (vals (group-by (comp sort seq) xs))))))","problem":77,"user":"506406c8e4b075d771da6f9f"},{"problem":77,"code":"(fn [s] (set (map #(set %) (filter #(> (count %) 1) (vals (group-by sort s))))))","user":"53bcdd41e4b0d9a98559a6c0"},{"code":"(fn [x]\n  (set \n    (keep #(if (> (count %) 1) % nil) \n      (map #(set (second %)) (group-by sort x)))))","problem":77,"user":"4e49a7bb535dc968683fc4c6"},{"problem":77,"code":"(fn [col]\n\t(->> (group-by sort col) \n\t\t (map (comp set val)) \n\t\t (filter #(> (count %1) 1)) \n\t\t (set)))","user":"55b8c339e4b01b9910ae29b9"},{"problem":77,"code":"(fn [words] (let [c (fn [txt] (apply str (sort (seq txt))))] (into #{}(filter #(< 1 (count %)) (vals (reduce #(assoc-in %1 [(c %2)] (conj (into #{} (%1 (c %2))) %2)) {} words))))))","user":"5e042dede4b0a607a9a45d69"},{"problem":77,"code":"(fn [coll]\n   (->>  (group-by sort coll) \n         (vals) \n         (filter #(> (count %) 1)) \n         (map set)\n         (set))\n   )","user":"546280d8e4b01be26fd746b0"},{"code":"(fn [s] (set (remove #(= 1 (count %)) (map #(set(val %)) (group-by #(sort %) s)))))","problem":77,"user":"52c1bd29e4b07a9af579236a"},{"problem":77,"code":"(fn [ss]\n  (let [pack (fn [m s] \n               (let [k (-> s .toLowerCase sort)]\n                 (assoc m k (conj (set (m k)) s))))]\n    (->> (reduce pack {} ss)\n         vals\n         (filter #(> (count %) 1))\n         set)))","user":"531bad96e4b08068f379ed93"},{"problem":77,"code":"(fn anagrams [c]\n  (letfn [\n    (putres [res elem]\n      (let [existing (first (filter #(= (sort elem) (sort (first %))) res))]\n        (if (nil? existing)\n          (conj res #{elem})\n          (set (conj (remove #(= existing %) res) (conj existing elem))))))\n    (step [c res]\n      (if (empty? c)\n        res\n        (recur (rest c) (putres res (first c)))))\n    ]\n    (set (filter (comp (partial < 1) count) (step c #{})))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"#(->> % (group-by sort) vals (map set) (filter second) set)","problem":77,"user":"4e1c2e16535d04ed9115e804"},{"problem":77,"code":"(fn [words] (set (map set (filter #(> (count %) 1) (vals (group-by sort words))))))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn [v]\n  (set\n  (filter #(> (count %) 1)\n(vals\n  (reduce\n    (fn [r w]\n      (let [k (sort (.toLowerCase w))]\n      (assoc r k (conj (get r k #{}) w))))\n{}\nv)))))","problem":77,"user":"4fca2a13e4b0ee37620e184d"},{"problem":77,"code":"(fn [xs] (->> xs\n  \t  (group-by frequencies)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      (set)))","user":"5b64370ae4b0c6492753e73c"},{"problem":77,"code":"(fn [v]\n  (set (map set (filter #(> (count % )1) (vals (group-by sort v))))))","user":"54e606c3e4b024c67c0cf803"},{"problem":77,"code":"(fn\n  [vec]\n  (let [freqs (frequencies (map clojure.string/join (map sort vec)))] \n    (loop [sorted (map clojure.string/join (map sort vec)) indices {} iter 0]\n      (if (empty? sorted)\n        (loop [vals (vals indices) fin_set #{}]\n          (if (empty? vals)\n            fin_set\n            (recur (rest vals) (conj fin_set ((fn\n  [origvec val]\n  (loop [val val subset #{}]\n    (if (empty? val)\n      subset\n      (recur (rest val) (conj subset (nth origvec (first val)))))\n    )\n) vec (first vals))))\n              ))\n        (if (> (freqs (first sorted)) 1)\n          (if (contains? indices (first sorted))\n            (recur (rest sorted) (assoc indices (first sorted) (conj (indices (first sorted)) iter)) (inc iter))\n            (recur (rest sorted) (assoc indices (first sorted) (vector iter)) (inc iter))\n                      )\n          (recur (rest sorted) indices (inc iter))\n          )\n        )\n      ))\n\n)","user":"5772ddb0e4b0979f896515d4"},{"problem":77,"code":"(fn [s]\n   (->> s\n        (group-by set)\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set))","user":"5c435a9fe4b0e06e1360a367"},{"problem":77,"code":"(letfn [(val-set [[k v]]\n          (set v))\n        (min-two [xs]\n          (> (count xs) 1))]\n  (fn [words]\n    (set (filter min-two\n      (map val-set (group-by #(sort %) words))))))","user":"5884e807e4b0f1effa3b76a6"},{"problem":77,"code":"(fn [x]\n  (set (remove #(= 1 (count %)) (map (comp set second) (group-by frequencies x)))))","user":"55afd469e4b002ce9d5cbc19"},{"code":"(fn [l]\r\n  ((fn [[h & r] m]\r\n     (if (or (nil? h) (empty? r))\r\n       m\r\n       (let [as (filter #(= (frequencies h) (frequencies %)) r)]\r\n   (if (empty? as)\r\n\t   (recur r m)\r\n\t   (recur (remove #(= (frequencies h) (frequencies %)) r) (conj m (conj (set as) h)))))))\r\n   l\r\n   #{}))","problem":77,"user":"507437c2e4b054001656acd0"},{"problem":77,"code":"(fn anagrams [s]\n  (into #{}\n        (map\n         #(into #{} %)\n         (filter\n          #(< 1 (count %))\n          (vals (group-by sort s))))))","user":"5ab564f8e4b073f177442639"},{"problem":77,"code":"(fn [s]\n  (loop [tmps s ans {}]\n    (if (empty? tmps)\n      (loop [a ans newa #{}] \n        (if (empty? a)\n          newa\n          (if (> (count (second (first a))) 1)\n          \t(recur (rest a) (conj newa (second (first a))))\n          \t(recur (rest a) newa))))\n      (if (contains? ans (set (first tmps)))\n        (recur (rest tmps) (assoc ans (set (first tmps)) (conj (get ans (set (first tmps))) (first tmps))))\n(recur (rest tmps) (assoc ans (set (first tmps)) (conj #{} (first tmps))))))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [s]\n  (->> (group-by #(sort %) s)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn [col]\n   (let [char-map (map (fn [a] {:seq (sort (seq a)) :origin a}) col)] \n  (clojure.set/difference (set (map (fn [a] (let [r (set (for [b char-map :when (and (= 1 1) (= (:seq a) (:seq b)))] (:origin b)))]\n                (if (> (count r) 1)\n                  r)\n              )) char-map)) #{nil})))","problem":77,"user":"50bfe725e4b080409b860f26"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":77,"code":"(fn [words]\n  (let [grouped-words (group-by set words)\n        values-set (map set (vals grouped-words))]\n    \t(set \n         (filter \n          #(> (count %) 1) \n          values-set))))","user":"573b8f67e4b0cd1946bd10ae"},{"code":"(fn\n  [w]\n    (set (filter\n      #(< 1 (count %))\n      (map (comp set second) (group-by sort w)))))","problem":77,"user":"50657775e4b0deb876850599"},{"code":"(fn [words]\n  (set (map set \n    (filter #(< 1 (count %)) \n        (vals (group-by #(sort %) words))))))","problem":77,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":77,"code":"(fn [xs]\n    (->>\n      xs\n      (group-by #(into #{} (seq %)))\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      set))","user":"58ec1e63e4b056aecfd47d54"},{"problem":77,"code":"(fn [ss] (set (filter #(< 1 (count %)) (map (comp set second) (group-by set ss)))))","user":"55896a0ce4b059ccff29b204"},{"problem":77,"code":"(fn [seq] \n    (set (map set (filter #(> (count %) 1) (vals (group-by set seq))))))","user":"56be8649e4b0f26550335983"},{"problem":77,"code":"(fn groupAnagrams [a]\n    (into #{}\n      (filter #(> (count %) 1)\n        (map #(into #{} %)\n          (partition-by #(hash (sort %) )\n            (\n              (fn sortByHash [s]\n                  (sort-by #(hash (apply str (sort %))) (sort s))\n              )\n            a )\n          )\n        )\n      )\n    )\n  )","user":"571aae1fe4b07c98581c3b5a"},{"problem":77,"code":"(fn [mmm] (set (map set (filter #(> (count %) 1) (reduce #(cons (second %2) %) () (reduce #(assoc % (first %2) (cons (second %2) (get % (first %2)))) {} (map #(vector (sort (seq %1)) %1 ) mmm)))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":77,"code":"#(set (filter (fn [a] (> (count (second a)) 1))\n        (map (comp set second) (group-by set %))))","user":"559067ace4b0277789237670"},{"problem":77,"code":"#(->> % \n      (map (juxt identity frequencies))\n      (group-by second)\n      (map (comp set (partial map first) val))\n      (filter (comp (partial < 1) count))\n      set)","user":"523b4e91e4b07becd5be21ef"},{"code":"(fn [words]\r\n  (letfn [(lettermap [arg]\r\n(->> 1\r\n     constantly\r\n     repeatedly\r\n     (map vector arg)\r\n     (map #(apply hash-map %))\r\n     (apply merge-with + {})))]\r\n    ;; End of lettermap\r\n    (->> words\r\n      (group-by lettermap)\r\n      vals\r\n      (filter #(> (count %) 1))\r\n      (map set)\r\n      set)))","problem":77,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn [x]                                                                                                        \n   (set (filter #(> (count %) 1)                                                                                            \n    (vals (apply merge-with into                                                                                                      \n      (for [i x] {(set i) #{i}})                                                                    \n      ) ))))","problem":77,"user":"519b7d76e4b02a926d9a436e"},{"problem":77,"code":"(fn [x] (set (map set (filter #(< 1 (count %))(vals (group-by #(set %) x))))))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":77,"code":"(fn anagrams [words]\n  (set (for [group (vals (group-by sort words))\n             :when (> (count group) 1)]\n         (set group))))","user":"58ed713de4b056aecfd47d84"},{"problem":77,"code":"(fn[ws]\n  (set(map (comp set val)\n           (remove\n             #(= 1 (count (val %)))\n             (group-by frequencies ws))))\n  )","user":"5cd4e1b2e4b0ccb061962927"},{"problem":77,"code":"(fn [s] \n  (->> \n   s\n   (group-by sort)\n   (map second)\n   (filter #(< 1 (count %)))\n   (map set)\n   set))","user":"4faf97d8e4b081705acca258"},{"code":"(fn [v]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies v))))))","problem":77,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":77,"code":"(fn [vecc]\n(let [pairs (map (fn [word]\n                   [word (sort word)])\n                vecc)]\n  (set\n    (map \n      (fn [sett]\n        (set (map first sett)))\n      (distinct\n        (filter #(> (count %) 1)\n                (map sort\n                     (map (fn [i]\n                            (filter\n                              #(= (second i)\n                                  (second %)) pairs)) pairs))))))))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":77,"code":"(fn to-anagrams\n  [x]\n  (loop [r x\n         rv {}]\n    (if (empty? r) (set (map set (filter #(> (count %) 1) (vals rv))))\n        (recur (rest r) (update-in rv [(clojure.string/join (sort (first r)))] conj (first r))))))","user":"5866b999e4b0f14aab7c886b"},{"problem":77,"code":"(fn [seq]\n      (->>\n       (reduce\n        (fn [result item]\n          (let [processed-item (clojure.string/join (sort (clojure.string/split item #\"\")))]\n            (assoc result processed-item\n                   (conj (get result processed-item #{}) item))))\n        {}\n        seq)\n       (vals)\n       (filter #(>= (count %) 2))\n       (set)\n       )\n      )","user":"5ee75f8be4b029a2061bbea5"},{"problem":77,"code":"#(->>\n  %\n  (group-by sort)\n  vals\n  (filter second)\n  (map set)\n  set)","user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [v]\n  (into #{}\n    (map set\n      (filter #(> (count %) 1)\n        (map val (group-by sort v))))))","problem":77,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"(fn [l] \n  (set (map set \n            (filter #(> (count %) 1)\n                    (vals (group-by sort l))))))","problem":77,"user":"52bb27fee4b07a9af57922df"},{"code":"(fn [c] (set (filter #(> (count %) 1) (map set (vals (group-by #(apply str (sort %)) c))))))","problem":77,"user":"4f34eb87e4b0e243712b1eba"},{"code":"(fn [coll]\n         (set (filter (fn [x] (< 1 (count x))) (map set (map second (group-by sort coll)))))\n         )","problem":77,"user":"4dd579b5535dae65d5c462ea"},{"problem":77,"code":"(fn [x]\n  (into #{}(filter #(> (count %) 1) (map #(into #{} (val %)) (group-by #(into #{} (seq %)) x )))))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"(fn __ [coll]\n  (into #{}\n        (for [[k v] (group-by #(sort %) coll) :when (< 1 (count v))]\n          (into #{} v)))\n  )","problem":77,"user":"52828298e4b0757a1b17145b"},{"code":"(fn [v]\r\n  (into #{}\r\n    (map set\r\n      (filter #(> (count %) 1)\r\n        (map val (group-by sort v))))))","problem":77,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":77,"code":"(fn [w]\n  (->> w\n    (group-by set)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    set))","user":"51780bfce4b0f89a8f53839c"},{"code":"#(set (for [[_ g] (group-by sort %)\n            :when (next g)]\n        (set g)))","problem":77,"user":"4e03c616535d04ed9115e796"},{"problem":77,"code":"(fn [words]\n\n         (into #{} (filter #(< 1 (count %)) (vals (reduce #(let [base (clojure.string/join (sort (seq (clojure.string/lower-case %2)))) existing (%1 base)] (if (nil? existing) (assoc %1 base (conj #{} %2)) (assoc %1 base (conj existing %2))) ) {} words)))))","user":"57c6aa0be4b05aa3c4741cf7"},{"code":"(fn [words]\n   (set (filter #(> (count %) 1) (map set (vals (apply merge-with concat (map #(assoc {} (sort %) [%]) words)))))))","problem":77,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [coll]\n   (let [letters&words (for [w coll] [(set (map str w)) w])\n         anagram-map (reduce (fn [r [ls w]]\n                               (update-in r [ls] #(conj (or % []) w)))\n                             {}\n                             letters&words)]\n     (->> anagram-map\n          (filter (fn [[k v]] (> (count v) 1)))\n          (map (comp set last))\n          set)))","problem":77,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn anagram- [coll]\n  \"77. Write a function which finds all the anagrams in a vector of words.\"\n  ;; Works by building a multimap of common anagram -> set of words that generate that anagram                                                                          \n  ;; then filtering out any set that doesn't have at least one member.                                                                                                  \n  (let [m (reduce #(assoc %1 (sort %2) (conj (get %1 (sort %2) #{}) %2)) {} coll)]\n    (apply hash-set (filter #(> (count %1) 1) (vals m)))))","problem":77,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":77,"code":"(fn split-by-anagram [coll]\n  (letfn [(anagram? [s1 s2]\n            (= (sort (vec s1)) (sort (vec s2))))]\n    (if (empty? coll)\n      '#{}\n      (let [in (set (conj (filter #(anagram? (first coll) %) (rest coll)) (first coll)))\n            out (remove #(anagram? (first coll) %) (rest coll))]\n        (if (= 1 (count in))\n          (split-by-anagram out)\n          (conj (split-by-anagram out) in))))))","user":"5674607ae4b05957ce8c6137"},{"code":"(fn [words] \n  (loop [[w & ws :as words] words, acc #{}]\n    (if (nil? w) \n      acc\n      (let [anagram? #(= (sort %1) (sort %2))\n            groups (group-by #(anagram? % w) words)\n            anagrams (set (groups true))\n            remaining (groups false)\n            newacc (if (> (count anagrams) 1) (conj acc anagrams) acc)]\n        (recur remaining newacc)))))","problem":77,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [words]\n  (let [ana? (fn [ & words]\n                (if (reduce = (map count words))\n                  (reduce = (map sort words))\n                  false) )]\n    (set\n     (filter #(not= 1 (count %))\n             (for [word words]\n               (set (filter #(ana? word %) words)))))))","problem":77,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":77,"code":"(fn anagram-finder [lword]\n  (letfn [(same [lw resp-map]\n           (if (= lw []) resp-map\n               (let [f (first lw)\n                     sf (apply str (sort f))]\n                 (if (contains? resp-map sf)\n                   (same (rest lw) (assoc resp-map sf (conj (resp-map sf) f)))\n                   (same (rest lw) (assoc resp-map sf [f]))))))]\n    (let [mapw (same lword {})\n          ks (keys mapw)]\n      (reduce #(if (> (count (mapw %2)) 1)\n                 (conj %1 (set (mapw %2)))\n                 %1) #{} ks))))","user":"574f1c24e4b02ea114799255"},{"problem":77,"code":"(fn ana [col]\n  (letfn [(comb [k l]\n            (if (= 1 k) (map vector l)\n                (apply concat\n                       (map-indexed\n                        #(map (fn [x] (conj x %2))\n                              (comb (dec k) (drop (inc %1) l)))\n                        l))))\n          (gd [s]\n            (set (map #(if (= 1 (count %))\n                         (first %)\n                         %) (vals (group-by identity (seq s))))))]\n    (let [gcount (distinct (map gd col))\n          anas   (for [x gcount]\n                   (filter #(= x (gd %)) col))]\n      (set (map set (remove #(< (count %) 2) anas))))))","user":"51456858e4b0e88796073408"},{"code":"(fn [xs] (set\n  (map set (filter #(> (count %) 1) (vals (group-by set xs))))))","problem":77,"user":"4f8345c6e4b033992c121c1b"},{"problem":77,"code":"(fn [col]\n  (->> col\n       (group-by #(clojure.string/join \"\" (sort %)))\n       (vals)\n       (filter #(>= (count %) 2))\n       (map #(set %))\n       (set)))","user":"5908b36be4b047aa04b19982"},{"problem":77,"code":";My soluction isn't bad, but my first reduce is heavy\n#_(fn acronyms [words]\n  (->> words\n       (reduce (fn [acc word] (merge-with concat acc {(sort word) [word]})) {})\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))\n\n; Instead I can use `group-by`\n(fn acronyms [words]\n  (->> words\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn [vec]\n   (into #{} (map #(into #{} (flatten (map vals %1))) (filter #(< 1 (count %1))\n              (vals (group-by keys\n                      (map(fn [x] {(set (group-by char x )) x}) vec)))))))","problem":77,"user":"5300aa1de4b0d8b024fd3710"},{"problem":77,"code":"(fn anagram-finder [strs]\n  (letfn [(key [x] (apply str (sort (seq (.split x \"\")))))]\n    (set (filter #(> (count %) 1) \n                 (vals\n                  (reduce (fn [m s] (assoc m (key s) (conj (m (key s) #{}) s)))\n                          {} strs))))))","user":"546c1f73e4b00cfc9eacc175"},{"code":"(fn [v]\n  (loop [possible-sets (distinct (map set v))\n         return-set #{}]\n    (if (= (count possible-sets) 0)\n      (set (filter #(if (= 1 (count %)) false true) return-set))\n      (recur\n       (rest possible-sets)\n       (cons (set (filter #(if (= (set %) (first possible-sets)) true false) v)) return-set)))))","problem":77,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":77,"code":"(fn [c]\n  (reduce\n   #(let [v (val %2)] (if (< 1 (count v)) (conj % (set v)) %)) #{}\n   (group-by frequencies c)))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn anagram [col]\n     (set (map set (filter #(< 1 (count %)) (vals (group-by #(sort %) col))))))","problem":77,"user":"4eb01df4535d7eef30807337"},{"problem":77,"code":"(fn [s] (into #{} (filter #(> (count %) 1) (map set (sort (map second (group-by sort s)))))))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":77,"code":"#(->> %\n      (group-by frequencies)\n      vals\n      (filter next)\n      (map set)\n      set)","user":"56b86e64e4b0f26550335924"},{"code":"(fn [words] (set (filter #(> (count %) 1) (map set (vals (group-by sort words))))))","problem":77,"user":"51307b84e4b08c712d3fae39"},{"problem":77,"code":"(fn [a]\n (let [d [\"meat\" \"mat\" \"team\" \"mate\" \"eat\" \"ate\"]\n      v (vals (group-by #(first %) (map vector (vec (map #(apply str %) (map sort a))) a)))]\n  (set (map set (filter (fn [x] (> (count x) 1)) (map (fn [p] (map second p)) v))))\n  ))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":77,"code":"(fn [words]\n    (letfn [(anagram?\n              [a b]\n              (and (not= a b)\n                   (= (sort a)\n                      (sort b))))]\n      (loop [[word & words] (seq words)\n             acc #{}]\n        (if word\n          (let [anagrams (->> words\n                              (filter (partial anagram? word))\n                              set)]\n            (recur (remove anagrams words)\n                   (if (empty? anagrams)\n                     acc\n                     (conj acc (conj anagrams word)))))\n          acc))))","user":"55f081bbe4b06e875b46ce25"},{"code":"(fn anagran-finder [v]\n  (set (filter #(< 1 (count %)) (map (fn [mapa](set (filter #(= mapa (frequencies %)) v))) \n                                     (map frequencies v)))))","problem":77,"user":"52c8758be4b0c2d177d62135"},{"problem":77,"code":"(fn anagram [s]\n (set (map set (filter #(> (count %) 1) (vals (group-by sort s))))))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn anagram-finder [str-coll]\n  (->> (group-by #(apply str (sort %)) str-coll)\n       (keep (fn [[_ v]]\n               (when (> (count v) 1)\n                 (set v))))\n       set))","problem":77,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [v]\n  (let [ana? #(= (set (seq %)) (set (seq %2)))]\n    (set\n     (filter #(> (count %) 1)\n             (for [w v]\n               (set (filter #(ana? w %) v)))))))","problem":77,"user":"4f048f67535dcb61093f6bd3"},{"code":"(fn [coll]\n  (into #{} (filter #(> (count %) 1) (vals (loop [coll coll acc {}]\n    (if-let [fst (first coll)]\n      (if (contains? acc (sort fst))\n        (recur (rest coll) (assoc acc (sort fst) (conj (acc (sort fst)) fst)))\n        (recur (rest coll) (conj acc [(sort fst) #{fst}])))\n      acc))))))","problem":77,"user":"4e7f5a0b535db966e863cc41"},{"problem":77,"code":"(fn angrm-find [words]\n   (into #{} (map #(into #{} %) \n   \t(filter #(> (count %) 1) \n   \t\t(vals (group-by sort words)))\n   \t))\n  )","user":"5545477fe4b0a04f79299531"},{"problem":77,"code":"(fn [s] \n  (set (->> s\n    (group-by sort)\n    (map (fn [[_ v]] v))\n    (map set)\n    (filter #(> (count %) 1)))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":77,"code":"(fn anagramFind\n  [coll]\n  (set  (filter #(< 1 (count %1)) (map set (vals (group-by #(sort %1) coll))))\n        )\n  )","user":"5fce0cc5e4b07e53c2f3f000"},{"code":"(fn [c]\n  (let [ws (set c)\n        cc #(apply merge-with + (map (fn [c] {c 1}) %))\n        a? #(= (cc %) (cc %2))]\n    (loop [ws ws t #{}]\n      (if (seq ws)\n        (let [g (set (filter (partial a? (first ws)) ws))]\n          (recur (clojure.set/difference ws g)\n                 (if (> (count g) 1) (conj t g) t)))\n        t))))","problem":77,"user":"52cc582ae4b07d0d72b27362"},{"problem":77,"code":"(fn [v]\n  (set (filter\n        #(> (count %) 1)\n        (for [i v]\n          (set (filter\n                (partial #(if (= (sort %1) (sort %2)) true false) i)\n                v))))))","user":"56aed78fe4b03c432f187363"},{"problem":77,"code":"(fn [words]\n      (->> (group-by (fn [word]\n                         (sort (map identity word))) words)\n           (vals)\n           (filter #(> (count %) 1))\n           (map set)\n           (set)))","user":"525ed5f4e4b0cb4875a45db8"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (set (map set\n            (remove #(<= (count %) 1)\n                    (map val (group-by sort coll))))))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":77,"code":"(fn [words]\n  (loop [[eka & loput] words\n         r #{}]\n    (let [pred (fn [x] (= (sort eka) (sort x)))]\n        (if (empty? loput)\n          r\n          (recur (remove pred loput)\n                 (let [matches (filter pred loput)]\n                   (if (not (empty? matches))\n                     (conj r (conj (set matches) eka))\n                     r)))))))","user":"57c314f3e4b05aa3c4741cba"},{"problem":77,"code":"(comp set\n             (partial filter #(> (count %) 1))\n             vals\n             (partial reduce #(assoc %1 (sort %2) (conj (%1 (sort %2) #{}) %2)) {}))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn [s]\n   (set (map (fn [i] (set (map second (second i)))) (filter #(> (count (second %)) 1)(group-by first (map #(list (sort %) %) s)))))\n   )","problem":77,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":77,"code":"(fn [l]\n  (let [anagram-set\n        (fn [a l]\n          (if (empty? l)\n            a\n            (if(empty? a)\n              (recur (conj a (set (vector (first l)))) (rest l))\n              (let [find-match\n                    (fn find-match [l w]\n                      (if (empty? l)\n                        #{}\n                        (if (= (sort (first (first l))) (sort w))\n                          (first l)\n                          (recur (rest l) w))))\n                    matched (find-match a (first l))]\n                ;; (println (str \"a=\" a \" matched=\" matched \" (first l)=\" (first l)))\n                (if (empty? matched)\n                  (recur (conj a (set (vector (first l)))) (rest l))\n                  (recur (conj (remove #(= matched %) a) (conj matched (first l))) (rest l))\n                  )))))]\n    (set (remove #(= (count %) 1) (anagram-set [] l)))))","user":"58e90258e4b056aecfd47cfd"},{"problem":77,"code":"(fn [vec]\n  (reduce (fn [set [k v]]\n            (conj set (apply conj #{} v))) #{}\n          (filter (fn [[k v]] (> (count v) 1))\n                  (group-by #(apply conj #{} %) vec))))","user":"4fb23582e4b081705acca28a"},{"problem":77,"code":"; Try to remember agarman's (group-by frequencies) and (filter next) for next time.\n(fn [ws]\n  (->> ws\n       (group-by #(sort (seq %)))\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [s]\n   (set\n    (filter\n     #(> (count %) 1)\n     (vals (reduce\n            #(if-let [s (get % (set %2))]\n               (assoc % (set %2) (conj s %2))\n               (assoc % (set %2) (hash-set %2)))\n            {} s)))))","problem":77,"user":"5027b41ee4b01614d1633fee"},{"problem":77,"code":"(fn [x]\n   (set (map set (filter (fn [l] (> (count l) 1))\n                       (vals  (group-by #(sort %) x)))))  )","user":"5047782ce4b0371827a27bc2"},{"code":"(fn [coll]\n  (->>(group-by sort coll)\n      (map (comp set second))\n      (filter #(> (count %) 1))\n      set))","problem":77,"user":"52479487e4b05ef8e38e6373"},{"problem":77,"code":"(fn [xs]\n  (->>(group-by sort xs)\n      vals\n      (map set)\n      (filter #(< 1 (count %)))\n      set))","user":"557c6ca6e4b05c286339e0c4"},{"problem":77,"code":"(fn anagram [coll]\n  (->> coll\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (map (fn [group]\n              (set (map #(apply str %) group))))\n       (remove #(< (count %) 2))\n       set))","user":"575cbe44e4b02ea114799374"},{"code":"(fn my-fx [x]\n    (set\n       (map set\n           (filter\n                (fn [coll] (>= (count coll) 2))\n                    (vals\n                       (group-by sort x))))))","problem":77,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn [w] (->> w (group-by sort) vals\n  (filter #(> (count %) 1))\n  (map set) set))","problem":77,"user":"50336c6be4b0c6c1199c710f"},{"problem":77,"code":"(fn anas [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by (fn [y] (sort (map (fn [x] x) y))) words))))))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn [x]\n  \t(into #{}\n          (map set\n               \t(filter #(> (count %) 1)\n                        (vals\n                         \t(apply (partial merge-with concat)\n                                   (map #(let [s (apply str (sort %))]\n                                           {s [%]}) x)))))))","problem":77,"user":"5098f5d6e4b0cae2931060a4"},{"code":"#(set (filter (fn [coll] (< 1 (count coll))) (map set (vals (group-by sort %)))))","problem":77,"user":"4ee77f15535d93acb0a66868"},{"problem":77,"code":"(fn [coll] (set (map set (filter #(> (count %) 1) (vals (#(group-by sort %) coll))))))","user":"55a74d46e4b09e57187da2a3"},{"problem":77,"code":"(fn [word-vec]\n  (letfn [(add-anagram [acc [k v]] (if (>= (count v) 2) (conj acc (set v)) acc))]\n  (reduce add-anagram #{}  (group-by #(clojure.string/join (sort %)) word-vec))))","user":"5b4ff637e4b02d533a91bce0"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by frequencies)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [x]\n  (set (map set\n  (filter #(> (count %) 1)\n          (vals (group-by set x))\n          )\n  )\n))","problem":77,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":77,"code":"(fn\n  [l]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n                (vals (group-by sort l))))))","user":"5893c64ce4b00487982d524b"},{"problem":77,"code":"(fn anagrams [col]\n  (set (map set (filter #(> (count %) 1) (vals (group-by set col))))))","user":"572010a4e4b0c5bde472c08c"},{"problem":77,"code":"(fn [lst]\n  (set\n   (filter\n    #(> (count %) 1)\n    (map\n     set\n     (vals (group-by sort lst))\n     )\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":77,"code":"(fn group-anagrams [words]\n  (->> words\n       (group-by #(apply str (sort %)))\n       vals\n       (remove #(< (count %) 2))\n       (reduce (fn [acc x] (conj acc (into #{} x))) #{})\n       ))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn [n]\n(set\n(map set\n(filter #(> (count %) 1 ) (vals (group-by #(sort(seq %)) n))))))","problem":77,"user":"5124619ae4b02c3f2a072ccd"},{"problem":77,"code":"(fn find-anagrams [words]\n      (let [is-anagram-of? (fn [a b] (= (set a) (set b))  )\n            remove-nils (fn [coll] (filter identity coll))]\n       (set\n        (remove-nils\n          (for [x words]\n            (let [set-of-anagrams (set (remove-nils\n                                         (for [y words] \n                                           (when (is-anagram-of? y x) y)\n                                           )))]\n              (when (> (count set-of-anagrams) 1) set-of-anagrams) \n              ))))))","user":"5b1e5bfde4b03cfeda66ed0e"},{"problem":77,"code":"(fn [coll]\n   (->>\n    (group-by frequencies coll)\n    vals\n    (filter #(> (count %) 1))\n    (map #(into #{} %))\n    (into #{})))","user":"5935b010e4b04f87174def55"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"5d272077e4b092dab7f59c64"},{"problem":77,"code":"(fn [w]\n    (into #{}\n          (filter #(> (count %) 1)\n                  (vals (reduce (fn [r n]\n                                  (let [k (into #{} (seq n))\n                                        v (conj (get r k #{}) n)]\n                                    (assoc r k v))\n                                  ) {} w)))))","user":"554a75c9e4b0a04f79299575"},{"problem":77,"code":"(fn [coll]\n                      (into #{} (filter #(> (count %) 1) (vals (reduce (fn freq->map [map elem] ;; Counts frequencies of all words and add words that have same fequencies to same set in map\n                                                                          (let [freq (frequencies elem)]\n                                                                            (if (contains? map freq)\n                                                                              (assoc map freq (conj (get map freq) elem))\n                                                                              (assoc map freq #{elem})))) {} coll)))))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":77,"code":"#(set (mapcat (fn[[k v]] (when (> (count v) 1) [(set v)])) (group-by sort %)))","user":"56824e1be4b0945ebc182a91"},{"problem":77,"code":"(fn find-anagrams-old [xs]\n  (set (map set (filter #(< 1 (count %))\n                   (vals (reduce (fn [m s] (update-in m [(sort s)] (partial cons s ) )) {} xs))))))","user":"58e37946e4b005f69f193cae"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words (group-by set) (vals) (filter #(> (count %) 1)) (map set) (set)))","user":"56742817e4b05957ce8c612d"},{"code":"#(set (map set (filter (comp (partial < 1) count) (vals (group-by set %)))))","problem":77,"user":"534bd9c1e4b084c2834f4a80"},{"problem":77,"code":"(fn [words]\n (->>\n\twords\n\t(map #(vector (sort (seq %)) %))\n \t(reduce \n     (fn [ana-map [sorted word]] \n       (if (contains? ana-map sorted)\n         (assoc ana-map sorted (conj (ana-map sorted) word))\n         (assoc ana-map sorted #{word})\n     \t)\n     ) {}\n\t)\n\t(vals)\n\t(filter #(> (count %) 1))\n\t(into #{} )\n )\n)","user":"57011eb3e4b08d47c97781d1"},{"problem":77,"code":"(fn __ [s]\n  (->> (group-by sort s)\n       (map val)\n       (filter #(< 1 (count %)))\n       (map set)\n       (set)))","user":"54c271b9e4b045293a27f602"},{"problem":77,"code":"(fn [s]\n  (->> (group-by set s)\n       (vals)  \n       (remove #(<= (count %) 1))\n       (map set)\n       (set)))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":77,"code":"(fn[strs]\n   (set(\n        map set\n        (vals (into {}\n                    (filter #(> (count (second %)) 1)\n                            (group-by #(sort (seq %)) strs)))))))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn [strs]\r\n        (let [keys (map #(apply str (sort (seq %))) strs)\r\n                                                        dict (apply merge-with #(cons (first %2) %1) (map #(hash-map %1 (list %2)) keys strs))\r\n                                                        ]\r\n        (into #{} (map set (filter #(<= 2 (count %)) (vals dict))))))","problem":77,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn [words]\n    (apply hash-set (filter #(> (count %) 1) (map (partial apply hash-set) (vals (group-by sort words))))))","problem":77,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":77,"code":"(fn my-anagrammer [s]\n  (set (remove (fn [x] (= 1 (count x)))\n        (map set (vals (group-by frequencies\n                                 s))))))","user":"567c7fefe4b05957ce8c61bc"},{"problem":77,"code":"(fn [v] \n   (set \n    (map \n    (comp set second)\n    (filter\n     (fn [[k v]] (if (> (count v) 1) true))\n     (group-by #(sort %) v)))))","user":"54d9366ce4b0a52adc2e204e"},{"problem":77,"code":"(fn [coll]\n   (set (filter #(>= (count %) 2) (vals (apply merge-with into (map (fn [x] {(sort x) #{x}}) coll))))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":77,"code":"(fn [l] (set (map #(set (last %) )  (filter #(>= (count (last %)) 2)(group-by #(apply str (sort %)) l)))))","user":"54edcf96e4b024c67c0cf866"},{"problem":77,"code":"(fn anagram [words]\n  (->> words \n    (group-by sort)\n    vals\n    (filter #(< 1 (count %)))\n    (map set)\n    set))","user":"559454f2e4b0c79f6e1db952"},{"problem":77,"code":"(fn [c] (set (filter #(> (count %) 1) (map set (vals (group-by sort c))))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [x] (  ->> x (group-by sort) (vals) (filter #(> (count %) 1))(map set) (set) ))","problem":77,"user":"5062bc46e4b05ac47bc68d68"},{"code":"#(letfn [(anagram-finder\n           [coll]\n           (set\n             (map\n               set\n               (filter\n                 (fn [vec]\n                   (> (count vec) 1))\n                 (vals\n                   (group-by\n                     frequencies\n                     coll))))))]\n   (anagram-finder %))","problem":77,"user":"51fb9d30e4b0f1313d468a0f"},{"code":"(fn anatell [words]\n\t(set (filter #(>= (count %) 2)\n\t\t(set (for [w (range (count words))]\n\t\t\t(set (filter #(not (nil? %))\n\t\t\t\t(#(for [m (range (count %))]\n\t\t\t\t\t(some #{(nth % m)} %2))\n\t\t\t\twords\n\t\t\t\t((fn anagram[word]\n\t\t\t\t\t(let [letter (map #(str %) word)]\n\t\t\t\t\t\t(map #(apply str %) (filter #(= (count %) (count word)) (distinct (filter #(= (frequencies %) (frequencies letter))\n\t\t\t\t\t\t\t(apply (fn combi [s1 s2 & args]\n\t\t\t\t\t\t\t\t(let [fcp #(for [e1 % e2 %2] [e1 e2]) cp1 (fcp s1 s2)]\n\t\t\t\t\t\t\t\t\t(if (empty? args)\n\t\t\t\t\t\t\t\t\t\tcp1\n\t\t\t\t\t\t\t\t\t\t(loop [i 0 res cp1]\n\t\t\t\t\t\t\t\t\t\t\t(if (= i (count args))\n\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t\t(recur (inc i) (map #(apply conj %) (fcp res (nth args i)))))))))\n\t\t\t\t\t\t\t(take (count word) (cycle [letter])))))))))\n\t\t\t\t(nth words w))))))))))","problem":77,"user":"51c09719e4b0c9c82288293c"},{"problem":77,"code":"(fn anagram-finder [words]\n  (reduce conj #{}\n    (map set\n      (filter\n        #(> (count %) 1)\n        (vals (group-by sort words))))))","user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [ws] (set (remove #(< (count %) 2) (map set (vals (reduce #(update-in % [(sort %2)]\n          (fn [o] (if (nil? o) [%2] (conj o %2)))) {} ws))))))","problem":77,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn [[& words]]\r\n          (loop [w (first words), more (next words), res {}]\r\n            (let [k (apply str (-> w .toUpperCase sort))\r\n                  res2 (assoc res k (into (get res k #{}) [w]))]\r\n              (if more\r\n                (recur (first more) (next more) res2)\r\n                (into #{} (filter #(< 1 (count %)) (vals res2)))))))","problem":77,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [coll]\n\t(set\n\t\t(map set \n\t\t\t(filter #(< 1 (count %))\n\t\t\t\t(vals (group-by set coll))))))","problem":77,"user":"520242bae4b030ee0c5b26e3"},{"problem":77,"code":"(fn [words]\n  (set (filter #(< 1 (count %)) (map set((fn make-sets [v]\n     (if (nil? v) '()\n         (let [is-anagram #(= (sort %) (sort %2))\n               g (group-by #(is-anagram (first v) %) v)\n               anas (get g true)\n               notanas (get g false)]\n           (cons anas (make-sets notanas))))) words)))))","user":"51b76227e4b0d906fcd71d35"},{"problem":77,"code":"(fn [coll]\n  (into '#{} (map set (filter (fn [s] (> (count s) 1)) \n                   (vals (group-by frequencies coll))))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn [ws]\n  (set\n    (filter #(> (count %) 1)\n      (vals\n        (apply merge-with clojure.set/union\n          (map #(hash-map (sort %) #{%}) ws))))))","problem":77,"user":"51d08d67e4b067c365486351"},{"problem":77,"code":"(fn [strings]\n  (set (filter #(< 1 (count %)) (map #(set (val %)) (group-by sort strings)))))","user":"541f5b37e4b01498b1a71a97"},{"code":"(fn [s]\n  (set \n    (filter \n      #(> (count %) 1) \n      (map set \n        (vals \n          (group-by #(sort (vec %)) s))))))","problem":77,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":77,"code":"(fn [words]\n  (let [pairs  (map (juxt sort identity) words)\n        groups (group-by first pairs)\n        res1   (filter #(< 1 (count (second %))) groups)\n        res2   (into #{} (map #(->> % second (map second) set)  res1))]\n    res2))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn find-anagrams [words]\n  (set\n   (map set (filter #(> (count %) 1)\n                    (vals (group-by #(sort (seq %)) words))))))","problem":77,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn [words] \n  (set \n    (filter second \n      (map set (vals (group-by sort words))))))","problem":77,"user":"500aa15ee4b03d00572d2d76"},{"problem":77,"code":"(fn find-anagrams [s]\n  (->> s\n    (map (partial into #{}))\n    (into #{})\n    (map (fn [x] (into #{} (filter (fn [y] (= (into #{} y) x)) s))))\n    (filter #(> (count %) 1))\n    (into #{})))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":77,"code":"(fn [words_arr]\n\t(set (filter \n\t\t#(> (count %) 1)\n\t\t(vals (reduce\n\t\t\t#(assoc %1 (sort %2) (conj (get %1 (sort %2) #{}) %2))\n\t\t\t{} words_arr))\n\t))\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":77,"code":"(fn anagram-finder [words]\n  (let [normalize-word (fn [word]\n                         (apply str (sort word)))\n        filter-and-prepare (fn [set-of-sets]\n                             (into #{} (filter #(> (count %) 1) (into #{} (vals set-of-sets)))))\n        inner-anagram-finder (fn [words acc]\n                               (if (seq words)\n                                 (recur (rest words) (assoc acc (normalize-word (first words)) (conj (get acc (normalize-word (first words)) #{}) (first words))))\n                                 (filter-and-prepare acc)))]\n  (inner-anagram-finder words {})))","user":"56f4cedce4b046a417f92063"},{"code":"(fn [words]\n  (set\n    (filter #(> (count %) 1)\n      (map set (vals (group-by \n               #(apply sorted-set (seq %))\n               words))))))","problem":77,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":77,"code":"(fn plp [coll](set(map\n                   set\n                   (filter\n                    (fn fil2[vvv](loop[red (vec(reverse(sort(filter\n                                                             #(not= 1 (count %))\n                                                             ((fn ann [coll]\n                                                                (loop[red coll\n                                                                      ret []]\n                                                                  (cond\n                                                                   (empty? red) ret\n                                                                   :else (recur(rest red)\n                                                                               (conj ret\n                                                                                     (loop[red2 (vec red)\n                                                                                           ret2 [(first red)]\n                                                                                           ff (first red)]\n                                                                                       (cond\n                                                                                        (empty? red2) ret2\n                                                                                        :else (recur (rest red2)\n                                                                                                     (cond\n                                                                                                      (= (set(map\n                                                                                                              #(get ff %)\n                                                                                                              (range(count ff))))\n                                                                                                         (set(map\n                                                                                                              #(get (second red2) %)\n                                                                                                              (range(count(second red2))))))\n                                                                                                      (conj ret2 (second red2))\n                                                                                                      :else ret2)\n                                                                                                     ff)))))))) coll)))))\n                                       log true]\n                                   (cond\n                                    (empty? red) log\n                                    :else(recur(rest red)\n                                               (cond\n                                                (and\n                                                 (= (set vvv) (clojure.set/union (set vvv) (set(first red))))\n                                                 (= (count vvv)(count (first red)))) log\n                                                (=\n                                                 (set (first red))\n                                                 (clojure.set/union (set vvv) (set(first red)))) (cond\n                                                                                                  (> (count vvv)(count (first red))) true\n                                                                                                  (< (count vvv)(count (first red))) false)\n                                                :else log)))))\n                    (vec(reverse(sort(filter\n                                      #(not= 1 (count %))\n                                      ((fn ann [coll]\n                                         (loop[red coll\n                                               ret []]\n                                           (cond\n                                            (empty? red) ret\n                                            :else (recur(rest red)\n                                                        (conj ret\n                                                              (loop[red2 (vec red)\n                                                                    ret2 [(first red)]\n                                                                    ff (first red)]\n                                                                (cond\n                                                                 (empty? red2) ret2\n                                                                 :else (recur (rest red2)\n                                                                              (cond\n                                                                               (= (set(map\n                                                                                       #(get ff %)\n                                                                                       (range(count ff))))\n                                                                                  (set(map\n                                                                                       #(get (second red2) %)\n                                                                                       (range(count(second red2))))))\n                                                                               (conj ret2 (second red2))\n                                                                               :else ret2)\n                                                                              ff)))))))) coll)))))))))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":77,"code":"(fn [words]\n  (reduce\n    (fn [s word]\n      (let [anagrams (reduce #(if (and (not= word %2) (= (set word) (set %2)))\n                                (conj % %2)\n                                %)\n                             #{word} words)]\n        (if (= 1 (count anagrams))\n          s\n          (conj s anagrams))))\n    #{} words))","user":"56ef077ae4b04a395b9a0459"},{"problem":77,"code":"(fn [s]\n    (->> s\n\t (sort #(compare (str (sort %1)) (str (sort %2))))\n\t (partition-by #(sort %) )\n\t (filter #(> (count %) 1) )\n\t (map #(set %) )\n\t (set))\n)","user":"55f09e7be4b06e875b46ce28"},{"problem":77,"code":"(fn [words]\n  ;perms is a permutation alg based on backtracking, see above\n  (let [perms (fn [l]\n                (let [length (count l)\n                      swp (fn [v i j] (assoc v i (v j) j (v i)))] ;swaps elements i and j in v\n                  (if (= 1 length)\n                    [l]\n                    (loop [result [l]      ;A list of combinations at the prev layer\n                           level  0]       ;This is the depth of the tree\n                      (if (= level (- length 1))\n                        result\n                        (recur (into [] (apply concat  (for [swept (range 0 (count result))]\n                                                         (reduce (fn [%1 %2]  (conj %1 (swp (result swept) level %2))) [] (range level length)))))\n                               (inc level)))))))]\n    (set\n      (filter #(> (count %) 1)\n        (for [word words]\n          (let [perms (map #(apply str %) (perms (into [] word)))]\n            (->> (doall (filter #(.contains words (str %)) perms))\n                 (set))))))))","user":"58983e3fe4b00487982d52ce"},{"problem":77,"code":"(fn [words]\n\t(let [grouped (group-by #(sort %) words)\n\t\tvalues (vals grouped)\n\t\tnon-single (filter #(< 1 (count %)) values)]\n\t\t(set (map set non-single))))","user":"5370b386e4b0fc7073fd6e9b"},{"code":"(fn anagram [words]\n  (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by #(into #{} %) words))))))","problem":77,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":77,"code":"(fn [coll]\n  (let [pk (filter #(< 1 (count %)) \n                   (partition-by #(val %) \n                                 (sort-by #(val %) \n                                          (zipmap (range) (map (comp #(apply str %) sort seq) coll)))))]\n    (apply conj #{} \n           (for [i pk] \n             (apply conj #{}\n                    (for [j i] (nth coll (key j))))))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [words]\r\n  (let [lst (map (fn [w]\r\n                   [w (sort (map identity w))])\r\n                 words)]\r\n    (reduce (fn [r l]\r\n              (conj r (set (map #(% 0) l))))\r\n            #{}\r\n            (filter #(> (count %) 1)\r\n                    (map (fn [elt]\r\n                           (filter #(= (% 1) (elt 1)) lst))\r\n                         lst)))))","problem":77,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn anagrams [coll]\n  (->> (vals (apply merge-with into (map #(hash-map (set %) [%]) coll)))\n  (filter #(> (count %) 1))\n  (map (partial into #{}))\n  set))","problem":77,"user":"50fc48dde4b0d10d794c19f6"},{"problem":77,"code":";; builds a map {histogram: word-vec} and returns the word-vectors which contain multiple words\n(fn find-anagrams [words]\n  (set (->> (group-by frequencies words)\n            (map second)\n            (remove #(= (count %) 1))\n            (map set))))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn [w] (->> w (group-by sort) vals (filter #(> (count %) 1)) (map set) set))","problem":77,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":77,"code":"(fn anagram [coll]\n    (let [anagram-map (group-by sort coll)\n          anagram-set (set (map set (filter #(> (count %) 1) (vals anagram-map))))]\n      anagram-set))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [c] (set (map #(set (val %)) (filter #(> (count (val %)) 1) (group-by #(apply str (sort %)) c)))))","problem":77,"user":"4ecbb249535df97575fdabdf"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"5540cc0ce4b0a04f79299505"},{"code":"(fn anagrams [s]\n  (set (map set (vals (filter #(> (count (second %)) 1)\n                              (group-by set s))))))","problem":77,"user":"52d3f666e4b09f7907dd1327"},{"problem":77,"code":"(fn [x] (set (filter #(> (count %) 1) (map (comp set second) (group-by sort x)))))","user":"583048d9e4b051871117c007"},{"code":"(fn [s]\n   (set (keep #(when (next %) (set %)) (vals (group-by sort s)))))","problem":77,"user":"4e8510e7535db62dc21a62e7"},{"code":"(fn [sets]\n  (->> (group-by #(set (set %)) sets)\n       (filter #(> (count (second %)) 1))\n       (map #(set (second %)))\n       set))","problem":77,"user":"5012ec0ae4b0c87326002230"},{"problem":77,"code":"(fn [stv]\n  (->> (group-by #(set %) stv)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"57d0e185e4b0bd073c202360"},{"code":"(fn [x]\n  (->> x\n    (group-by sort)\n    (map #(set (% 1)))\n    (filter #(> (count %) 1))\n    set))","problem":77,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn [coll]\n  (set (filter #(> (count %) 1)\n               (vals (reduce (fn [m s]\n                               (assoc-in m\n                                         [(sort s)]\n                                         (set (conj (m (sort s)) s))))\n                             {}\n                             coll)))))","problem":77,"user":"4f0ef874535d0136e6c22328"},{"problem":77,"code":"(fn ana\n  [words]\n  (set (for [grams (vals (group-by sort words)) :when (< 1 (count grams))] (set grams))))","user":"56e99ec8e4b04a395b9a03fb"},{"code":"(fn f [arg]\n  (if (empty? arg)\n      '()\n      (let [res (group-by #(= (sort (first arg)) (sort %)) arg)\n            rest-res (if (contains? res false)\n                         (f (res false))\n                         '())]\n        (if (> (count (res true)) 1)\n            (set (cons (set (res true)) rest-res))\n            (set rest-res)))))","problem":77,"user":"4eb66737535d7eef3080736b"},{"problem":77,"code":"(fn anagram [coll]\n  (->> coll\n    (group-by sort)\n    (vals)\n    (filter #(not= 1 (count %)))\n    (map set)\n    (set)))","user":"5ba15075e4b0a20761a2339e"},{"problem":77,"code":"(fn [xs] (letfn [(skeys [ss] (into [] (map sort ss))) \n                 (get2 [xs] (map second xs))\n                ]\n           (let [g (vals (group-by first (map vec (partition 2 \n                                 (interleave (skeys xs) xs)\n                              ))))]\n                  \n             (set (map set \n                     (map get2 \n                          (filter #(> (count %) 1) g)\n                     )\n             ))    \n           )\n         )  \n )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":77,"code":"(fn [col]\n             (letfn [(F [string] (sort (clojure.string/split string #\"\")))\n                     (Remove-single [col] (set ( filter #(> (count %) 1) col)))]\n               (Remove-single ((fn G [res col]\n                                 (if (empty? col)\n                                   res\n                                   (if (not (some true? (map #(contains? % (first col)) res)))\n                                     (G (conj res (reduce (fn [res2 x]\n                                                            (if (= (F x) (F (first col)))\n                                                              (conj res2 x)\n                                                              res2))\n                                                          #{(first col)} (next col)))\n                                        (next col))\n                                     (G res (next col)))))\n                               #{} col))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn [words]\n  (set (remove #(= (count %) 1) \n               (map set (vals (group-by frequencies words))))))","problem":77,"user":"51789dfae4b03d69594194d7"},{"problem":77,"code":"(fn[s](\n  set(map set(map (fn[y](map first y)) (map second (filter (fn[x](> (count (second x)) 1))\n                                                  (group-by second (zipmap s (map (fn[w](set(seq w))) s)))))))\n))","user":"56039843e4b04bb52996e1be"},{"code":"(fn anagram-groups [coll]\n  (let [is-anagram? (fn [x y]\n                      (let [xs (set x)\n                            ys (set y)]\n                        (= xs ys)))\n\n        group-by-anagram (fn [x ys]\n                           (group-by (partial is-anagram? x) ys))]\n    (loop [{ans true xs false} {false coll}\n           s #{}]\n      (let [sx (if (> (count ans) 1) (conj s (set ans)) s)]\n        (if-let [x (first xs)]\n          (recur (group-by-anagram x xs) sx)\n          sx)))))","problem":77,"user":"523b82efe4b07becd5be21f0"},{"problem":77,"code":"(fn find-anagrams [xs]\n  (->> xs\n       (group-by set)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"50cf94bde4b0abc485cb9bb2"},{"problem":77,"code":"(fn [strs] (->> strs\n                (group-by #(apply sorted-set %))\n                (map #(set (val %)))\n                (filter #(< 1 (count %)))\n                (set)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn anagrams [coll]\n  (let [anagrams-of (fn [word] (set (filter #(= (set %) (set word)) coll)))]\n    (set (filter #(> (count %) 1) (map #(anagrams-of %) coll)))))","problem":77,"user":"50fc299ee4b0d10d794c19f2"},{"problem":77,"code":"(fn [l]\n  (let [ags (set (map (comp set frequencies) l))]\n                          (set (filter (comp (partial < 1) count)\n                                       (map (comp set (partial map second))\n                                            (map (group-by first\n                                                           (filter #(= (first %) ((comp set frequencies) (second %)))\n                                                                   (mapcat (fn [x] (map (fn [y] (list y x)) ags)) l))) ags))))))","user":"544e8369e4b0e39780006987"},{"problem":77,"code":"(fn [coll] (set (filter #(> (count %) 1) (map set (map #(map second %) (map #(partition 2 %) (vals\n   (group-by set\n             (interleave\n               (map set coll)\n               coll\n               )\n             ))))))))","user":"5baaae06e4b0a20761a23464"},{"code":"(fn [l] \r\n  (set\r\n    (filter\r\n      #(< 1 (count %))\r\n        (map set \r\n          (vals\r\n            (group-by \r\n              #(sort (seq %))\r\n              l))))))","problem":77,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":77,"code":"(fn [v]\n  (->> v\n       (group-by sort)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map set)\n       (set)))","user":"57822efce4b0d36ec5835e91"},{"problem":77,"code":"#(letfn [(getval [x] (map set (vals (group-by sort x))))\n          (cunt [y] (< 1 (count y)))\n          (sortval [z] (set (filter cunt (getval z))))]\n    (sortval %))","user":"557e8326e4b05c286339e0d7"},{"problem":77,"code":"(fn pla \n  ([col] (->> (pla {} col) \n              vals\n              (filter #(> (count %) 1))\n              set))\n  ([res col]\n   (if-let [s (seq col)]\n     (let [r (pla res (next s))\n           f (first s)\n           f-can (sort (map int f))\n           fc-val (get r f-can #{})\n           r2 (assoc r f-can (conj fc-val f))]\n       r2)\n     res)))","user":"53908e6be4b0b51d73faae9a"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort coll))))))","user":"5e805895e4b085ba37836e44"},{"code":"(fn [words]\n  (->>\n   (map #(hash-map (sort %) #{%}) words)\n   (apply merge-with into)\n   vals\n   (filter #(> (count %) 1))\n   set))","problem":77,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn [v] (set (map set (filter second \n                                    (vals (group-by #(apply * (map int %)) v))))))","problem":77,"user":"4fa9da14e4b081705acca1e7"},{"problem":77,"code":"(fn [w]\n  (set (let [anagram-sets (map first (filter (fn [[k v]](> v 1)) (frequencies (map set w))))]\n         (for [a anagram-sets]\n           (set (filter #(= a (set %)) w))))))","user":"4df73d64535d04ed9115e775"},{"problem":77,"code":"(fn [coll]\n  (let [m {}\n        f (fn [x m]\n            (let [k (sort x)]\n              (if (contains? m k) (assoc m k (conj (get m k) x)) (assoc m k #{x}))))]\n    (loop [c coll m m]\n      (if (empty? c)\n        (set (filter (fn [x] (> (count x) 1)) (vals m)))\n        (recur (rest c) (f (first c) m))))))","user":"606a70a5e4b069485764ddf2"},{"problem":77,"code":"(fn f [xs]\n  (let [anagram? (fn [& ws] (apply = (map sort ws)))\n        anagrams (fn [w ws] (set (filter #(anagram? w %) ws)))]\n    (->> xs\n         (map #(anagrams % xs))\n         (filter #(> (count %) 1))\n         (set))))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn finder [xs]\n  (->> (group-by sort xs)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","problem":77,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [words]\r\n  (->> (group-by count words)\r\n       vals\r\n       (mapcat (partial group-by set))\r\n       (filter (fn [[_ ws]] (> (count ws) 1)))\r\n       (map (comp set second)) set))","problem":77,"user":"4dd4034a535dae65d5c462df"},{"problem":77,"code":"(fn [coll] (set (map #(set %) (filter #(> (count %) 1) (vals (group-by sort coll))))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":77,"code":"(fn solve [x] (set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"56f258d3e4b04a395b9a04a1"},{"code":"(fn [xs]\n  (->> xs\n       (group-by sort)\n       (vals)\n       (remove #(= 1 (count %)))\n       (map set)\n       (set)))\n  ;(set (map set (remove #(= 1 (count %)) (vals (group-by sort xs))))))","problem":77,"user":"5312cdaae4b08068f379ed03"},{"problem":77,"code":"(fn anagrams [words]\n  (letfn [(is-an? [& words] (apply = (map frequencies words)))\n          (an-matcher [word] (partial is-an? word))\n          (first-has-no-ans? [words]\n            (not-any? (an-matcher (first words)) (rest words)))]\n  (loop [w (first words)\n         ws (rest words)\n         ans #{}]\n    (cond\n      (empty? ws) ans\n      (not-any? (an-matcher w) ws) (recur (first ws) (rest ws) ans)\n      :else\n      (let [this-ans (conj (filter (an-matcher w) ws) w)\n            this-not-ans (remove (an-matcher w) ws)]\n        (recur\n         (first this-not-ans)\n         (rest this-not-ans)\n         (conj ans (set this-ans))))))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn [s]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by sort s))))))","problem":77,"user":"4f713878e4b07046d9f4f00a"},{"problem":77,"code":"(fn [coll]\n   (set (filter #(> (count %) 1)\n                (map set (vals\n                    (group-by (fn [word](set (partition 1 word))) coll))))))","user":"5587cd86e4b059ccff29b1e6"},{"code":"#(set\n  (filter \n    (fn [x] (> (count x) 1))\n    (map\n      (comp set val)\n      (group-by sort %))))","problem":77,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn ana [a]\n  (set (map set (filter #(> (count %) 1) (vals (group-by #(.hashCode (sort %)) a))))))","problem":77,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":77,"code":"(fn [xs]\n          (->> xs\n               (group-by sort)\n               (map #(set (val %)))\n               (filter #(> (count %) 1))\n               set))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn [xs]\r\n   (let [a-map (reduce (fn [map x]\r\n                         (let [v (get map (set x))]\r\n                           (if v\r\n                             (assoc map (set x) (conj v x))\r\n                             (assoc map (set x) #{x}))))\r\n\r\n                       {} xs)]\r\n     (set (filter #(> (count %) 1)(vals a-map))))\r\n   )","problem":77,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":77,"code":"(fn [items]\n   (set \n    (filter #(> (count %) 1) \n            (map #(set (last %)) \n                 (group-by #(sort %) items)))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":77,"code":"(letfn [(anagram?\n         [x y]\n         (= (set x) (set y)))\n        (anagrams\n         [s coll]\n         (set (filter (partial anagram? s) coll)))]\n  #(set (filter (comp (partial < 1) count)\n                (map (fn [s]\n                       (anagrams s %))\n                     %))))","user":"5829d9f8e4b051871117bf4d"},{"code":"(fn [s] (set (map set (filter #(> (count %) 1) (vals (group-by sort s))))))","problem":77,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [arg]\n  (set (map set\n    (filter (comp seq rest)\n      (vals (group-by sort arg))))))","problem":77,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [s] \n  (let [normalize #(->> % (vec) (map str) (vec) (sort) (apply str))\n        equiclass (fn [f s] (set (map #(set \n          (filter (fn [x] (= (f x) (f %))) s)) s)))]\n   (->> s (equiclass normalize) \n           (filter #(> (count %) 1)) (set))))","problem":77,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn diff [col]\r\n  (set (map \r\n    #(set %)\r\n  (filter \r\n     #(not (empty? (rest %)) )\r\n     (map \r\n       #(val %)\r\n       (group-by        \r\n         #(apply str (sort (seq %)) ) \r\n              col)\r\n      )\r\n     )\r\n  )\r\n       )\r\n)","problem":77,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":77,"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort (seq %)) c))))))","user":"4df1e213535d08e6dec9fe20"},{"problem":77,"code":"(fn [words] (letfn [(bagify [word] (reduce (fn [acc ch] (update-in acc [ch] (fnil inc 0)))\n                                           {}\n                                           word))]\n              (let [wordmap (reduce (fn [acc word] (update-in acc [(bagify word)] #((fnil conj #{}) % word)))\n                                    {}\n                                    words)]\n                (->> wordmap\n                     (vals ,,,)\n                     (filter #(> (count %) 1) ,,,)\n                     (set ,,,)))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":77,"code":"(fn [xs] (set (filter #(< 1 (count %)) (map #(set (val %)) (group-by set xs)))))","user":"57e6997ee4b0bfb2137f5af0"},{"code":"(fn this\r\n  ([l]\r\n     (if (empty? l) (set l)\r\n         (set (filter (fn [x] (>= (count x) 2)) (this (sort(first l)) l #{} [])))))\r\n  ([n l a b]\r\n     (if (empty? l)\r\n       (concat #{a} (this b))\r\n       (if (= n (sort (first l)))\r\n         (recur n (rest l) (conj a (first l)) b)\r\n         (recur n (rest l) a (conj b (first l)))))))","problem":77,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":77,"code":"#(reduce-kv (fn [s _ v]\n              (if (next v)\n                (conj s (set v))\n                s))\n            #{}\n            (group-by sort %))","user":"56baa68ce4b0f26550335947"},{"code":"(fn [words] (->> words\n                 (group-by set)\n                 (vals)\n                 (map set)\n                 (filter #(> (count %) 1))\n                 (set)))","problem":77,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":77,"code":"(fn anagram-finder [colls]\n  (->> colls\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"5a67cedbe4b0512ff01cd9ee"},{"code":"(fn [coll]\n  (->> coll\n      (group-by sort)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      (set)))","problem":77,"user":"52976262e4b02ebb4ef75041"},{"problem":77,"code":"(fn [ws]\n  (let [cs (atom\n            (reduce\n             (fn [m w]\n               (assoc m w (reduce\n                           (fn [m c]\n                             (assoc m c (inc (get m c 0))))\n                           {}\n                           w)))\n             {}\n             ws))]\n    (loop [[x & xs] ws\n           r #{}]\n      (if (nil? x)\n        r\n        (let [matches (loop [[y & ys] xs\n                             r #{}]\n                        (if (nil? y)\n                          r\n                          (if (and (contains? @cs y) (= (get @cs x) (get @cs y)))\n                            (do\n                              (swap! cs dissoc y)\n                              (recur ys (conj r y)))\n                            (recur ys r))))]\n          (if (empty? matches)\n            (recur xs r)\n            (recur xs (conj r (conj matches x)))))))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn [words] (set (filter #(> (count %1) 1)\n        (map #(into #{} %1)\n             (vals (group-by #(set (seq %1)) words))))))","problem":77,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [s]\r\n  (->> s\r\n      (group-by frequencies)\r\n      vals\r\n      (map set)\r\n      (filter #(>= (count %) 2))\r\n      set))","problem":77,"user":"4ee40938535d10e5ff6f5375"},{"problem":77,"code":"(fn [seq]\n  (let [groups (vals (group-by sort seq))\n        filtered (filter (fn [e] (> (count e) 1)) groups)]\n    (set (map set filtered))))","user":"540d5085e4b0addc1aec670e"},{"problem":77,"code":"(fn [s]\n  (set\n   (filter #(> (count %) 1)\n    (vals\n     (reduce\n      (fn [m w]\n       (let [k (sort w)]\n        (assoc m k (conj (get m k #{}) w))))\n      {}\n      s)))))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1)\n               (for [w words :let [w (sort w)]]\n                 (set (filter #(= w (sort %)) \n                              words))))))","problem":77,"user":"4dbb1126535d1e037afb21b3"},{"problem":77,"code":"(fn [v]\n  (set\n    (map #(set (reverse %))\n         (filter\n           (fn [e]\n             (> (count e) 1))\n           (vals\n             (reduce\n               (fn [result each]\n                 (let [k (clojure.string/join (sort each))]\n                   (assoc result k (conj (get result k) each))))\n               {}\n               v))))))","user":"5989e080e4b021a7a535fed6"},{"problem":77,"code":"(fn [l] (set (map set (filter #(< 1 (count %)) (vals (group-by set l))))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":77,"code":"(fn x [coll]\n   \n  (into #{}\n  (filter #(> (count %) 1)      \n  (for [x coll]\n    (into #{} (filter #(= (sort (seq x)) (sort (seq %))) coll) )\n    \n  )\n  )\n  )\n  )","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn [s]\n  (set (filter #(< 1 (count %)) (map set\n    (vals (group-by frequencies s))))))","problem":77,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [words]\n  (loop [anagrams {} more words]\n    (if-let [s (seq more)]\n      (let [word (first s) key (sort (seq word))]\n        (recur (assoc anagrams key (conj (get anagrams key #{}) word))\n               (next s)))\n      (set (filter #(> (count %) 1) (vals anagrams))))))","problem":77,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn [words]\n  (->> words (group-by sort) (vals) (map set) (filter #(> (count %) 1)) (set)))","problem":77,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":77,"code":"(fn [x] (->> (group-by frequencies x)\n     vals\n     (map set)\n     (filter #(> (count %) 1))\n     set))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":77,"code":"(fn [V]\n  \t(apply hash-set (filter (fn [s] (< 1 (count s))) (map set (vals (group-by sort V) ))))\n )","user":"5649615be4b0284900eef641"},{"problem":77,"code":"(fn [words] (->> words (reduce (fn [d w] (let [sorted (clojure.string/join (sort w))] (if (contains? d sorted) (assoc-in d [sorted (count (d sorted))] w) (assoc d sorted [w])))) {}) (reduce (fn [s dd] (if (> (count (second dd)) 1) (conj s (into #{} (second dd))) s)) #{})))","user":"59468de7e4b07ddc2dafad88"},{"problem":77,"code":"(fn anagrams [xs]\n\t(letfn [(anagram? [a b]\n\t\t\t\t\t\t(let [sa (set a)\n\t\t\t\t\t\t\t\t\tsb (set b)]\n\t\t\t\t\t\t\t(= sa sb (clojure.set/intersection (set a) (set b)))))]\n\t(set \n\t\t(filter \n\t\t\t#(< 1 (count %)) \n\t\t\t(set (map \n\t\t\t\t\t\t\t(fn [s] (set (filter #(anagram? s %) xs))) \n\t\t\t\t\t\t\txs))))))","user":"52e657e4e4b09f7907dd1472"},{"problem":77,"code":"(fn [words]\n  (letfn [(anagram? [word1 word2]\n            (= (frequencies word1)\n               (frequencies word2)))\n          (extract-anagrams [word wordvec]\n            (set (reduce (fn [anagrams candidate]\n                           (if (anagram? candidate word)\n                             (conj anagrams candidate)\n                             anagrams))\n                     \t   []\n                         wordvec)))]\n    (->> (map #(extract-anagrams % words) words)\n         (filter #(> (count %) 1))\n         (set))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [c]\n  (->> c\n       (reduce (fn [m x] (update-in m [(sort x)] #(set (conj % x)))) {})\n       vals\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"52b453b0e4b0c58976d9ad21"},{"code":"(fn [coll]\n  (set (vals (filter \n   (fn [[k v]] (if (> (count v) 1) true false)) \n   (reduce #(if \n              (%1 (sort %2)) \n              (assoc %1 (sort %2) (conj (%1 (sort %2)) %2)) \n              (assoc %1 (sort %2) #{%2})) \n           (hash-map) coll)))))","problem":77,"user":"50733b31e4b0e3170b5a869a"},{"problem":77,"code":"; https://github.com/qiuxiafei/4clojure/blob/master/answers/77.Anagram%20Finder\n(fn [input] (->> input (group-by sort) (map val) (filter #(> (count %) 1)) (map set) set))","user":"59e5b6a1e4b08badc2a0c55b"},{"problem":77,"code":"(fn [coll]\n  (->> (for [x coll]\n         {(into #{} x) #{x}})\n       (apply merge-with into)\n       (filter #(next (val %)))\n       (map second)\n       set))","user":"54848141e4b0e286459a119e"},{"problem":77,"code":"(fn  [data]\n  (letfn\n      [(is-anagram? [w1 w2]\n                    (let [lst1 (sort (seq w1))\n                          lst2 (sort (seq w2))]\n                      (= lst1 lst2)))\n       (anagram-fn [s e]\n                   (if (is-anagram? e (first s))\n                     (conj s e)\n                     s))]\n    (into #{} (filter #(> (count %) 1) (map #(reduce anagram-fn #{%} data ) data)))) )","user":"5832be57e4b089d5ab817c86"},{"problem":77,"code":"(fn [coll]\n  (loop [result #{}\n         item (first coll)\n         rest-coll (rest coll)]\n    (if (not (empty? rest-coll))\n      (let [matches (filter #(= (apply str (sort item)) (apply str (sort %))) rest-coll)]\n        (let [remainder (clojure.set/difference (set rest-coll) (set matches))]\n            (recur (conj result (set (conj matches item))) (first remainder) (rest remainder))))\n      (set (filter #(< 1 (count %)) result)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":77,"code":"(fn find-anagram [col]\n  (into #{} \n        (filter #(> (count %) 1) \n                (vals \n                 (loop [r {} c col]\n                   (if (empty? c) \n                     r \n                     (recur (merge-with into r {(frequencies (first c)) (conj #{} (first c))}) (rest c))))))))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn seventy-seven\n  [words]\n  (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by sort words))))))","problem":77,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [ws] (->> ws \n              (group-by sort)\n              (map #(set (val %)))\n              (filter #(< 1 (count %)))\n              set))","problem":77,"user":"5246e945e4b0644eb7b0783b"},{"problem":77,"code":"(fn [col]\n  (apply hash-set (map #(apply hash-set (second %)) (filter (fn [k-v]\n            (let [k (first k-v)\n                  v (second k-v)]\n              (> (count v) 1)))\n          (group-by #(sort %)\n                    col)))))","user":"53664e3be4b0243289761e74"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n \t\tset))","user":"560bb1f7e4b05f002753df20"},{"problem":77,"code":"(fn [ss]\n    (let [m (reduce (fn [acc s] (let [k (sort s)]\n                                 (assoc acc k (conj (get acc k #{}) s))))\n                    {}\n                    ss)]\n      (into #{} (filter #(< 1 (count %)) (vals m)))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by set)\n       (vals)\n       (filter next)\n       (map set)\n       (set)))","user":"58a2b57fe4b02bd94d917ede"},{"problem":77,"code":"#(->> % \n      (group-by sort)\n       vals\n      (filter next)\n      (map set)\n       set)","user":"532a033be4b09d4e7a9b551f"},{"problem":77,"code":"(fn anagram [x] (disj (set (map #(if (= (count %) 1) nil (into #{} %)) \n                                 (vals (reduce #(assoc %1 (frequencies %2) \n                                                  (conj  (%1 (frequencies %2))  %2)) {} x)))) nil))","user":"5576e78de4b05c286339e075"},{"code":"(fn a [w]\n  (apply hash-set\n         (map #(apply hash-set %)\n              (filter #(< 1 (count %)) (vals\n                   (reduce #(update-in %1 [(keyword (str (sort %2)))] concat (list %2)) {} w))))))","problem":77,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [strs]\n  (set (filter #(> (count %) 1) (map set (vals (group-by frequencies strs))))))","problem":77,"user":"4f62b29ce4b0defedf855fd9"},{"problem":77,"code":"(fn [words]\n  (set (for [[_ word] (group-by sort words)\n             :let [anagrams (set word)]\n             :when (< 1 (count anagrams))]\n         anagrams)))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [l]\n  (->> l \n    (group-by frequencies)\n    (map (comp set second))\n    (filter #(> (count %) 1))\n    set\n  ))","problem":77,"user":"4f294c48e4b0d6649770a023"},{"code":"#(set (for [[_ x] (group-by frequencies %)\n            :when (next x)]\n        (set x)))","problem":77,"user":"510d9d61e4b078ea71921141"},{"code":"(fn [x] (set (map set (filter  #(> (count %) 1) (vals (group-by #(-> % seq set) x ))))))","problem":77,"user":"530bf87ee4b02e82168697d5"},{"problem":77,"code":"(fn [coll]\n    (->> (reduce (fn [ret x]\n                   (let [k (apply str (sort x))]\n                     (assoc ret k (conj (get ret k #{}) x)))) {} coll)\n         (vals)\n         (filter #(< 1 (count %)))\n         (set)))","user":"594bc16be4b07ddc2dafae39"},{"problem":77,"code":"(fn anagram-finder\n  [coll]\n  (let [anagrams? (fn anagrams?\n                    [a b]\n                    (= (set a) (set b)))]\n    (loop [anagrams #{}\n           coll coll]\n      (if (empty? coll)\n        (set (filter #(> (count %) 1) anagrams))\n        (let [cur-elem (first coll)\n              matching-anagrams (set (filter (partial anagrams? cur-elem) coll))\n              non-matching-elems (filter (complement matching-anagrams) coll)\n              new-coll (rest coll)]\n          (recur (conj anagrams matching-anagrams) non-matching-elems))))))","user":"5720a2b0e4b0c5bde472c099"},{"problem":77,"code":"#(->> (group-by sort %)\n      vals\n      (filter (comp pos? dec count))\n      (map set)\n      set)","user":"5884f377e4b0f1effa3b76a8"},{"problem":77,"code":"(fn [words]\n   (letfn [(char-vector [s]\n             (reduce (fn [char-vec c]\n                       (if (contains? char-vec c)\n                         (update-in char-vec [c] inc)\n                         (assoc char-vec c 1)))\n                     {}\n                     s))]\n     (->> (group-by char-vector words)\n          vals\n          (filter #(> (count %) 1))\n          (map set)\n          set)))","user":"57f80350e4b0d3187e90090c"},{"problem":77,"code":"(fn anagrams\n  [words]\n  (->> words\n       (group-by frequencies)\n       (vals)\n       (map set)\n       (filter #(< 1 (count %)))\n       (set)))","user":"5d609ddde4b0c9e5857d5008"},{"problem":77,"code":"(fn [ws] (set (filter #(> (count %) 1) (vals (reduce (fn [mp w] (assoc mp (sort w) (conj (get mp (sort w) #{}) w))) {} ws)))))","user":"54864662e4b0e286459a11b8"},{"code":"#(set (filter next (map (comp set second) (group-by sort %))))","problem":77,"user":"4fd91099e4b05e33b9224f32"},{"problem":77,"code":"(fn anagram-finder' [words]\n  (->> words\n       (group-by sort)\n       (map (comp set last))\n       (filter (comp (partial < 1) count))\n       set))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn [c]\n  (set (filter #(< 1 (count %)) (map set (vals (group-by #(sort %) c))))))","problem":77,"user":"4e4ad154535dc968683fc4d1"},{"problem":77,"code":"; a not so readable solution \n;(fn [coll]\n;   (set (filter #(> (count %) 1) (map set\n;                (vals (group-by #(sort (clojure.string/split % #\"\"))\n;                                coll))))))\n(fn [coll]\n   (->> (group-by #(sort (clojure.string/split % #\"\")) coll)\n        (vals)\n        (map set)\n        (filter #(> (count %) 1))\n        (set)\n     ))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (reduce (fn [a x] (assoc a (set x) (cons x (a (set x))))) {})\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"code":"(fn [ws] (set (map set (filter #(> (count %) 1) (vals (group-by sort ws))))))","problem":77,"user":"4e8612f8535db62dc21a62f2"},{"problem":77,"code":"(fn [coll]\n  (letfn [(anagrams [w1 ws]\n            (set (filter seq (for [w2 ws]\n                               (if (= (sort w1) (sort w2)) w2)))))]\n    (into #{} (filter #(< 1 (count %)) (map #(anagrams % coll) coll)))))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn anagram-finder [v]\n  (->> v\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","problem":77,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [words]\n      (into #{}\n            (keep (fn [s] (if (> (count s) 1)\n                            (into #{} s)))\n                  (vals (group-by #(sort %) words)))))","problem":77,"user":"53838742e4b06839e8705ee0"},{"code":"(fn anabin [xs]\n  (letfn [(anagram? [a, b]\n                    (= (sort (seq a)) (sort (seq b))))]\n    (loop [in xs\n           out #{}]\n      (if (empty? in)\n        out\n        (let [f (first in)\n              r (rest in)\n              anas (filter (partial anagram? f) r)\n              nanas (filter #(not (anagram? f %)) r)]\n          (recur nanas (if (empty? anas)\n                         out\n                         (conj out (set (conj anas f))))))))))","problem":77,"user":"51365524e4b04ac1f358dd52"},{"problem":77,"code":"(fn [coll] (into #{} (map set (remove #(= 1 (count %)) (vals (group-by frequencies coll))))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [coll] (set (map #(set %) (vals (filter #(> (count (val %)) 1) (group-by #(apply str (sort %)) coll))))))","problem":77,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [s] (set (keep #(if (next %) (set %)) (vals (group-by sort s)))))","problem":77,"user":"4e52d815535d302ef430da77"},{"code":"(fn [xs] (into #{} (filter #(> (count %) 1) (vals (reduce (fn [h v] (let [k (sort v)] (assoc h k (conj (h k #{}) v)))) {} xs)))))","problem":77,"user":"523b1a65e4b02f719975bdbd"},{"code":"(fn [xs]\n  (into #{} (map set (filter #(> (count %) 1)\n                             (vals (group-by #(set %) xs))))))","problem":77,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn f [coll]\r\n  (letfn [(anagrams? [a b] (let [a1 (group-by identity a)\r\n                                 b1 (group-by identity b)]\r\n                             (= a1 b1)))]\r\n    (loop [result #{}, remaining coll]\r\n      (if (seq remaining)\r\n        (let [decided (group-by (partial anagrams? (first remaining))\r\n                                remaining)\r\n              anagrams (into #{} (decided true))\r\n              not-anagrams (decided false)]\r\n          (if (> (count anagrams) 1)\r\n            (recur (conj result anagrams) not-anagrams)\r\n            (recur result (rest not-anagrams))))\r\n        result))))","problem":77,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":77,"code":"#(into #{} (filter (fn [xs] (> (count xs) 1))\n                   (map (fn [xs] (into #{} (map second xs)))\n                        (vals (group-by first\n                                        (map (fn [x] [(frequencies x) x]) %))))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":77,"code":"(fn [coll]\n  (->>\n   (group-by frequencies coll)\n   (vals)\n   (map set)\n   (filter #(< 1 (count %)))\n   (set)))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn anagram-finder [l]\r\n    (letfn [(count-chars [w]\r\n              (reduce (fn [b a] (if (get b a) (assoc b a (inc (get b a))) (assoc b a 1))) {} w))]\r\n      (set (filter (fn [x] (> (count x) 1)) (map set (vals (reduce #(merge-with concat %1 %2) (map (fn [x] (hash-map (count-chars x) [x])) l))))))))","problem":77,"user":"4f039524535dcb61093f6b2c"},{"problem":77,"code":"(fn find-anagram [ws]\n  (set (filter (fn [x] (> (count x) 1)) \n          ((fn list-anagrams [words]\n             (for [[key value] \n                   (group-by \n                     (fn anagram [word]\n                       (loop [w word\n                              letters {}]\n                         (if (> (count w) 0)\n                           (if (nil? (get letters (first w)))\n                             (recur (rest w) (conj letters [(first w) 1]))\n                             (recur (rest w) (conj letters [(first w) (inc (get letters (first w)))])))\n                           letters)))\n                     words)]\n               (set value))) ws))))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":77,"code":"(fn [cs]\n  (let [norm (group-by sort cs)]\n    (into #{} (filter #(< 1 (count %)) (map #(into #{} %) (vals norm))))\n    )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"problem":77,"code":"(fn [ws] (->> ws\n              ; Associate each word with its letter frequencies\n              (map #(hash-map (frequencies %) (conj #{} %)))\n              ; Merge words with identical letter frequencies\n              (apply merge-with clojure.set/union)\n              ; Drop the keys\n              vals\n              ; Exclude single-word sets\n              (filter #(< 1 (count %)))\n              ; Fix up return type\n              (into #{})\n         )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"code":"(fn [col]\n    (let [l-sets (map #(vector % (set (seq %))) col)]\n      (set (filter #(> (count %) 1) (map (fn [[_ l-set]] (set (map first (filter #(= (second %) l-set) l-sets)))) l-sets)))))","problem":77,"user":"52a32876e4b04e0c58e87bfb"},{"problem":77,"code":"(fn [words]\n    (let [letters-sorted (group-by sort words)\n          anagrams (map (fn [[k v]] (set v))\n                        (filter (fn [[k v]] (> (count v) 1)) letters-sorted))]\n      (set anagrams)))","user":"5ac6ef9be4b0e27600da7779"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n      (group-by set)\n      vals\n      (map set)\n      (remove #(< (count %) 2))\n      set))","user":"5169d422e4b051e2a73aba53"},{"problem":77,"code":"(fn anagram\n  [sv]\n  (let [->group (fn [s] (group-by identity (seq s)))]\n    (->> (group-by ->group sv)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set)))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [xs]\n    (->> (group-by sort xs)\n         (remove (fn [[k v]] (= 1 (count v))))\n         (map (fn [[k v]] (set v)))\n         set))","problem":77,"user":"4e50ad74535dc968683fc4ec"},{"problem":77,"code":"(fn [coll]\n   (->> coll\n        (map #(vector % (set %)))\n        (group-by last)\n        (vals)\n        (map (fn [coll] (map first coll)))\n        (map set)\n        (filter #(> (count %) 1))\n        (set)))","user":"53ed6976e4b0d648e757f4c4"},{"problem":77,"code":"(fn [c]\n(into #{}\n(map set\n(filter #(> (count %) 1)\n(map val (group-by sort c))\n))))","user":"5405885ee4b0addc1aec6668"},{"problem":77,"code":"(fn [words]\n  (loop [result []\n         copy words]\n    (if (empty? copy) (set result)\n      (do\n        (let [rez (filter (fn [x] (= (sort (first copy)) (sort x))) words)]\n          (if (> (count rez) 1)\n            (recur (conj result (set rez)) (rest copy))\n            (recur result (rest copy))))))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"code":"(fn anagram [words](set (filter #(< 1 (count %)) \n                            (map\n                             (fn[w](set (map :word (get (clojure.set/index (map #(hash-map :word % :letters (set %)) words) [:letters]) {:letters w}))))\n                             (set (map set words))\n                             ))))","problem":77,"user":"52a1edd6e4b04e0c58e87be4"},{"code":"(fn [words]\n  (->>\n    words\n    (group-by set)\n    (vals)\n    (map set)\n    (filter #(> (count %) 1))\n    (set)\n)\n  )","problem":77,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":77,"code":"(fn [input] \n  (letfn [(anag [s] (sort (seq s)))\n          (enough? [x] (< 1 (count x)))]\n\t(set (map set (filter enough? (vals (group-by anag input)))))))","user":"564d02cde4b0284900eef679"},{"problem":77,"code":"(fn [words]\n    (->> words\n        (group-by #(set (map (juxt count first) (vals (group-by identity %)))))\n        vals\n        (remove #(= (count %) 1))\n        (map set)\n        set))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [coll]\n  (->> coll\n    (group-by sort)\n    vals\n    (filter #(< 1 (count %)))\n    (map set)\n    set))","problem":77,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":77,"code":"#(->> %\n      (group-by sort)\n      (vals)\n      (filter second)\n      (map set)\n      (set))","user":"5a546344e4b05d388ecb6c27"},{"problem":77,"code":"(fn [c]\n  (->> (group-by sort c)\n      vals\n      (filter #(< 1 (count %)))\n      (map set)\n      set))","user":"5a527beee4b05d388ecb6bfe"},{"code":"(fn [ws]\n  (set (map set (filter next (vals (group-by set ws))))))","problem":77,"user":"4ed0e139535d44c135fd68c7"},{"problem":77,"code":"(fn [coll] (->> coll \n                (group-by (fn [word]\n                            (->> word\n                                 (into-array)\n                                 (group-by (fn [letter] letter))\n                                 ;(map (fn [pair] [(first pair) (count (second pair))]))\n                                 (set)))) \n                (map (comp first (partial drop 1)))\n                (filter (fn [ls] (> (count ls) 1)))\n                (map set)\n                (set)))","user":"5492164ee4b0b312c081ff3e"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by sort)\n       (map #(set (val %)))\n       (filter #(> (count %) 1))\n       set))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn anagram-finder [xs]\n  (->> (group-by frequencies xs) vals (filter #(> (count %) 1)) (map set) set))","problem":77,"user":"52016fd3e4b0b2e020a18f10"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (map (fn [x] [((comp sort vec) x) x]))\n       (reduce (fn [acc [key val]] (update-in acc [key] #(conj % val))) {})\n       (vals)\n       (map set)\n       (filter #(< 1 (count %)))\n       (into #{})))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":77,"code":"(fn ans [coll]\n  (->> (group-by set coll)\n       (filter (fn [[_ v]] (> (count v) 1)))\n       (map (fn [[_ v]] (set v)))\n       (set)))","user":"5338387de4b0e30313ee6c91"},{"problem":77,"code":"(fn [xs]\n      (->>\n        (group-by #(sort (.toLowerCase %)) xs) \n        (vals) \n        (filter #(> (count %) 1)) \n        (map set) \n        (set)))","user":"5409a12fe4b0addc1aec66df"},{"problem":77,"code":"(fn [c] (set (map set (remove #(= (count %) 1) (vals (group-by sort c))))))","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [words]\n  (->> words\n       (group-by #(set %))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","problem":77,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn [ws] \n  (set (map (comp set val) \n            (remove (comp #{1} count val) (group-by frequencies ws)))))","problem":77,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn anagram-finder [coll]\n  (->> (group-by sort coll)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map set)\n       (set)))","problem":77,"user":"4ef6f5ea535dced4c769f250"},{"problem":77,"code":"(fn [coll]\n  (into\n   #{}\n   (->> coll\n        (group-by sort)\n        (map second)\n        (remove (fn [x] (zero? (dec (count x)))))\n        (map set))))","user":"566b57e9e4b0a866af6896ad"},{"code":"(fn func[v](set (map set (remove #(= (count %) 1) (vals (group-by  sort v))))))","problem":77,"user":"5060c117e4b024449d699b5d"},{"code":"(fn test77 [coll]\n  (->> coll\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","problem":77,"user":"50b0cffae4b009df37c708c5"},{"problem":77,"code":"(fn [x] (set (filter #(> (count %) 1)\n             (map set (vals (group-by frequencies x))))))","user":"55be39f9e4b01b9910ae2a06"},{"problem":77,"code":"(fn [x]\n   (->> x\n        (group-by #(sort %))\n        (map second)\n        (filter #(> (count %) 1))\n        (map set)\n        (set)))","user":"525cc912e4b0cb4875a45d48"},{"problem":77,"code":"(fn f77 [coll]\n  (->>\n    (map #(do {% (sort %)}) coll)\n    (group-by vals)\n    (filter #(> (count (val %)) 1))\n    (map #(->> %\n               val\n               (map (fn [x]\n                      (keys x)))\n               (apply concat)\n               set))\n    set))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","problem":77,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":77,"code":"(fn\n  [x]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"58a822e4e4b01a0c0b232950"},{"problem":77,"code":"(fn [x]\n  (let [sorted-char-set (fn [s]\n                     (sort (seq s)))\n        map-result (filter (fn [[k v]] (> (count (set v)) 1)) (group-by sorted-char-set x))]\n    (set (reduce (fn [x [k v]] (conj x (set v))) #{} map-result))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":77,"code":"(fn anagram-finder [words]\n  (loop [result #{} [w & ws] words]\n    (if-not ws result\n               (let [anagrams (set (filter #(= (set %) (set w)) ws))]\n                 (if (empty? anagrams)\n                   (recur result ws)\n                   (recur (conj result (conj anagrams w)) (remove anagrams ws)))))\n    ))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":77,"code":"(fn anagrams [col]\n  (loop [[word & rest] col\n         map {}]\n    (if-not (nil? word)\n      (let [sorted-word (sort word)]\n        (recur rest (if (contains? map sorted-word)\n                      (update-in map [sorted-word] conj word)\n                      (assoc map sorted-word (conj #{} word)))))\n      (set (filter #(> (count %1) 1)(vals map))))))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn anagram-finder--- [coll]\n  (let [f-p (fn [s] (apply str (sort s)))\n        m-s (fn [a b] (let [s (if (set? a) a #{a})]\n                       (clojure.set/union s #{b})))]\n    (->> (reduce #(merge-with m-s %1 {(f-p %2) %2}) {} coll)\n         (vals)\n         (filter set?)\n         (set))))","problem":77,"user":"511e763ce4b03e81d390ac29"},{"problem":77,"code":"(fn [lst]\n   (loop [lst lst\n          mp {}]\n     (if (empty? lst)\n       (set (map set (remove #(= 1 (count %)) (vals mp))))\n       (let [k (sort (first lst))]\n         (recur (rest lst) (assoc mp k (conj (mp k) (first lst))))))))","user":"5c62979fe4b0fca0c162264c"},{"problem":77,"code":"(fn [x]\n   (let [a (->> (group-by sort x)\n                (vals)\n                (map set))]\n     (set (filter #(< 1 (count %)) a))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn anag [s]\n  (set \n    (filter #(> (count %) 1)\n    (vals (reduce #(merge-with clojure.set/union  %1 %2) {} (map #(hash-map (sort %) (hash-set %)) s))))))","problem":77,"user":"4facd2fae4b081705acca22f"},{"code":"(fn anagrams [col]\n        (let [lookup (apply merge-with concat\n                            (map #(array-map (sort %) [%]) col))\n              anagrams (filter #(> (count (second %)) 1) lookup)]\n          (set (map (comp set second) anagrams))))","problem":77,"user":"4e589bdc535d8a8b8723a295"},{"problem":77,"code":"#(set (map set (filter (fn [words] (< 1 (count words))) (vals (group-by set %)))))","user":"5773f3a9e4b0979f896515f2"},{"problem":77,"code":"(fn [ws]\n         (->> ws\n              (group-by frequencies)\n              vals\n              (map set)\n              (filter #(< 1 (count %)))\n              set))","user":"53720c5ce4b0493c815db704"},{"code":"(fn anagram-partition [words]\n  (->> words\n       (sort-by (fn [s] (apply str (sort (set s)))))\n       (partition-by set)\n       (filter (fn [s] (> (count s) 1)))\n       (map set)\n       (set)))","problem":77,"user":"51672d15e4b079759a74a5e7"},{"problem":77,"code":"(fn [v]\n  (into #{} (map set (filter #(> (count %) 1) (map val (group-by sort v)) )))\n  )","user":"57f9b25fe4b0d3187e90094b"},{"code":"(fn __\n  [words]\n  (loop [target {} cands words]\n    (println target cands)\n    (if (= (count cands) 0)\n      (set (filter #(> (count %) 1) (vals target)))\n      (let [this (first cands) key_ (set this)]\n        (if (contains? target (set this))\n          (recur (assoc target key_ (conj (target key_) this)) (next cands))\n          (recur (conj target {(set this) #{this}}) (next cands)))))))","problem":77,"user":"52485723e4b05ef8e38e63d2"},{"problem":77,"code":"(fn anagrams\n  [words]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by frequencies words))))))","user":"5c222b7de4b07e362c230588"},{"problem":77,"code":"(fn prob77\n  [words]\n  (into #{} (map set (filter #(> (count %) 1) (map val (group-by sort words))))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":77,"code":"#(reduce (fn [sets [_ sub-set]]\n           (if (= (count sub-set) 1)\n             sets\n             (conj sets (set sub-set))))\n         #{}\n         (group-by sort %))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn [words]\n  (set\n    (filter #(< 1 (count %))\n      (map #(set (second %))\n        (group-by sort words)))))","problem":77,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn [coll]\n  (loop [acc {} [h & r] coll]\n    (if h\n        (recur (assoc acc (sort h) (conj (acc (sort h) #{}) h)) r)\n        (into #{} (filter #(> (count %) 1) (vals acc))))))","problem":77,"user":"4eb0a757535d7eef3080733d"},{"problem":77,"code":"#(->> %\n               (group-by frequencies)\n               vals\n               (remove (fn [n] (= (count n) 1)))\n               (map set)\n               set)","user":"5bab5440e4b0a20761a23475"},{"problem":77,"code":"(fn [coll] \n\t(set (map #(set %) (filter #(> (count %) 1) (vals (group-by sort coll))))))","user":"562d869be4b0a45d2ff8301f"},{"problem":77,"code":"(fn anagram-finder [v]\n  (let [hm (reduce (fn [acc item]\n                     (let [k (set item)]\n                       (if (contains? acc k)\n                         (assoc acc k (conj (get acc k) item))\n                         (assoc acc k #{item}))))\n                   {} \n                   v)]\n       (into #{} (map set (filter #(> (count %) 1) (map val hm))))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"problem":77,"code":"(fn [words]\n  (into #{}\n        (map (fn [coll] ( into #{} (map first coll)))\n             (filter second (partition-by last (sort-by last (map #(vector % (clojure.string/join (sort (seq %)))) words)))))))\n\n\n;(fn [words]\n;  (let [indexed-words (map #(vector (sort (seq %)) %) words)]\n;  (loop [[x & xs :as x-and-xs] indexed-words acc #{}]\n;    (if xs\n;      (let [anagrams (into #{} (map (fn [[index word]] word) (filter #(= (first x) (first %)) x-and-xs)))]\n;        anagrams\n;        (recur\n;         (if (> (count anagrams) 1) (filter #(not= (first x) (first %)) xs) xs)\n;         (if (> (count anagrams) 1) (conj acc anagrams) acc)))\n;      acc))))","user":"561cb6cfe4b064ca9f4b169e"},{"problem":77,"code":"(fn [x] (set (map #(set %) (filter #(> (count %) 1) (vals (group-by #(set (seq %)) x))))))","user":"57dafe97e4b0bd073c20241c"},{"problem":77,"code":"(fn find-anagrams [coll]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n                (map val (group-by sort coll))))))","user":"5b47874be4b02d533a91bc70"},{"problem":77,"code":"(fn [a]\n   (set (filter #(> (count %1) 1) \n           (vals (reduce #(assoc %1 (sort %2)  (conj (get %1 (sort %2) #{}) %2)) {} a))\n   ))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":77,"code":"(fn\n  [words]\n  (let [words (into #{} words)]\n    (->> (reduce (fn [m word]\n                   (let [key (sort word)\n                         l   (get m key #{})]\n                     (assoc m key (conj l word))))\n                 {}\n                 words)\n         (vals)\n         (filter (fn [s] (> (count s) 1)))\n         (into #{}))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":77,"code":"(fn [words]\n  (->> (group-by (comp sort seq) words)\n       (vals)\n       (filter #(> (count %) 1) )\n       (map #(apply hash-set %) )\n       (apply hash-set)))","user":"5264383be4b03e8d9a4a70cb"},{"problem":77,"code":"(fn [ws]\n  (set (remove #(< (count %) 2) (map (fn [[k v]] (set v)) (group-by sort ws)))))","user":"5799ff45e4b05b1deef9add1"},{"problem":77,"code":"(fn anagrams [words]\n    (->> words\n        (group-by frequencies)\n        (vals)\n        (map set)\n        (filter #(not= (count %) 1))\n        (set)\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":77,"code":"(fn [v] \n  (set \n   (map set \n        (filter #(> (count %) 1) \n                (vals (group-by sort v))))))","user":"577ab41fe4b0d3393e5deb05"},{"code":"#(set (filter (comp not empty? rest) (map set (vals (group-by sort %)))))","problem":77,"user":"4e6df3c9535d5021c1a895fa"},{"problem":77,"code":"(fn [ss]\n  (->> ss\n       (group-by #(group-by identity %))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"54dd76c8e4b024c67c0cf794"},{"problem":77,"code":"(fn [x]\n  (loop [x x\n         o {}]\n    (if (empty? x)\n      (set (filter (fn [x] (> (count x) 1)) (vals o)))\n      (recur (rest x) (assoc o (sort (vec (first x))) (conj (get o (sort (vec (first x))) #{}) (first x))))\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":77,"code":"(fn find-anagrams [words]\n  (letfn [\n    (prep-word [word] (sort (re-seq #\".\" word)))\n    (anagram? [w1 w2] (= (prep-word w1) (prep-word w2) ))\n    (get-anagrams [words]\n      (let [s (filter (partial anagram? (first words)) words)]\n        (if (empty? s) #{(first words)} (set s))))\n    (find-anagrams-acc [col, acc]\n      (if (empty? col)\n        acc\n        (recur (clojure.set/difference (set col) (get-anagrams col))\n                (conj acc (get-anagrams col)))))]\n    (set (filter #(> (count %) 1) (find-anagrams-acc words [])))))","user":"587a3babe4b01531a375eae2"},{"code":"(fn [words]\n    (letfn [(smaller-ana [s]\n              (apply str (sort s)))]\n      (let [ana-map (group-by smaller-ana words)\n            all-anas (set (map set (vals ana-map)))]\n        (set (filter #(> (count %) 1) all-anas)))))","problem":77,"user":"5165a235e4b079ad97ec44ac"},{"problem":77,"code":"(fn [x]\n    (let [items (group-by #(sort (re-seq #\"\\w\" %)) x)]\n      (set (map #(set (last %)) (filter #(> (count (last %)) 1) items)))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [x]\n   (set\n    (filter\n     #(> (count %) 1)\n     (vals\n      (apply\n       merge-with\n       clojure.set/union\n       (map #(hash-map (sort %1) #{%1}) x)\n       )\n      )\n     )\n    )\n   )","problem":77,"user":"52586d24e4b0cb4875a45cb0"},{"problem":77,"code":"(fn find-anagrams\n  [xs]\n  (let [hist (fn [xs f]\n  \t\t\t       (reduce\n    \t\t\t       (fn [acc x]\n      \t\t\t       (let [key (f x)\n            \t\t\t     curr (get acc key)\n            \t\t\t     next (if (nil? curr) 1 (inc curr))]\n        \t\t         (assoc acc key next)))\n    \t\t\t      {}\n    \t\t\t      xs))\n        grp-by (fn [xs f]\n  \t\t\t\t       (reduce\n    \t\t\t         (fn [acc x]\n      \t\t\t\t       (let [key (f x)\n                                 values (get acc key)\n                                 values (if (nil? values) #{} values)]\n        \t\t\t         (assoc acc key (conj values x))))\n    \t\t\t         {}\n    \t\t\t         xs))]\n    (->> (grp-by xs #(hist % (fn [ch] ch)))\n         vals\n         (filter #(> (count %) 1))\n         set)))","user":"53161a56e4b08068f379ed3e"},{"code":"(fn find-anagrams [coll]\n  (->> coll\n       (group-by sort)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map #(apply hash-set %))\n       (apply hash-set)))","problem":77,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":77,"code":"(fn anagram [ws]\n  (set (->> ws\n            (group-by sort)\n            (vals)\n            (filter #(> (count %) 1))\n            (map set))))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn f [s]\r\n    (if (empty? s)\r\n      #{}\r\n      (let [fst (first s)\r\n            ang? #(= (sort fst) (sort %))\r\n            angs (filter ang? (rest s))\r\n            not-angs (filter (complement ang?) (rest s))]\r\n        (if (empty? angs)\r\n          (f not-angs)\r\n          (conj (f not-angs) (set (cons fst angs)))))\r\n  ))","problem":77,"user":"4f0da4e4535d0136e6c22319"},{"problem":77,"code":"(fn [col] (set (map set (remove #(= (count %) 1) (vals (group-by sort col))))))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"(fn [v]\n  (letfn [(str-constructs [s]\n           (let [chars (group-by char s)\n                 char-set (set (keys chars))\n                 counts (map count (set (vals chars)))]\n             (zipmap char-set counts)))\n          (anagram-group [xs]\n            (->> xs\n                 (group-by str-constructs)\n                 vals\n                 (filter #(>= (count %) 2))))]\n    ; 最後 set として返す必要が良く分からないが\n    (set (map set (anagram-group v)))))","problem":77,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":77,"code":"(fn [ss]\n  (->>\n   ss\n   (group-by sort)\n   (vals)\n   (filter #(>= (count %) 2))\n   (map set)\n   (set)))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [xs]\n  (let [canonify (fn [s] (clojure.string/join (rest (sort (clojure.string/split s #\"\")))))\n        reducer (fn [m w] (let [canon (canonify w)] (assoc m canon (conj (get m canon #{}) w))))]\n    (set (filter #(> (count %) 1) (vals (reduce reducer {} xs))))))","problem":77,"user":"52015698e4b0d7096e99ddba"},{"problem":77,"code":"(fn anagram-finder\n  [coll]\n  (set (map set\n            (filter #(not= (count %) 1)\n                    (vals (group-by (comp identity sort) coll))))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn f [s] (into #{} (filter #(> (count %) 1) \n                    (vals (reduce (fn [coll arg]\n                                    (let [k (frequencies arg)\n                                          v (get coll k #{})]\n                                      (assoc coll k (conj v arg)))) {} s)))))","problem":77,"user":"4fb79872e4b081705acca2d2"},{"problem":77,"code":"(fn [colls]\n   (set \n    (map \n     set\n     (filter\n      #(< 1 (count %))\n      (vals \n       (group-by \n        (fn [element] (sort element))  \n        colls))))))","user":"567476bde4b05957ce8c6139"},{"problem":77,"code":"(fn ehh [x]\n  (letfn [(eh [x]\n            (cond\n             (empty? x) #{}\n             :else (conj (eh (filter #(not (= (set (first x)) (set %))) x)) \n                         (set (filter #(= (set (first x)) (set %)) x)))))]\n    (set (filter #(> (count %) 1) (eh x)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":77,"code":"(fn anagrams [words] \n  (->> \n   words \n   (group-by sort) \n   (filter #(> (count (second %)) 1)) \n   (map #(->> % (second) (apply hash-set)))\n   (apply hash-set)\n))","user":"5280a1ece4b0757a1b171407"},{"problem":77,"code":"(fn [words]\n  (let [words-bigset (set words)]\n    (loop [remaining-words words-bigset\n           anagrams #{}]\n      (if (empty? remaining-words)\n        anagrams\n        (let [anas (filter #(= (set (first remaining-words)) (set %)) (rest remaining-words))\n              rems (remove #(= (set (first remaining-words)) (set %)) (rest remaining-words))\n              anas-incl-first (when (not-empty anas)\n                                (conj anas (first remaining-words)))\n              updated-anagrams (if (not-empty anas)\n                                 (conj anagrams (set anas-incl-first))\n                                 anagrams)]\n          (recur rems updated-anagrams))))))","user":"55e1bb20e4b050e68259b41f"},{"code":"(fn [coll]\n    (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by frequencies coll))))))","problem":77,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":77,"code":"(fn [coll] \n  (letfn [(anagram [word] (sort (seq word)))]\n    (->> (reduce (fn [acc word]                \n                   (assoc acc (anagram word) (cons word (get acc (anagram word)))))              \n                 {}              \n                 coll)\n         (vals)\n         (filter #(> (count %1) 1))\n         (map set)\n         (set))))","user":"59225498e4b09b4ee5954c8c"},{"code":"#(into #{}\n      (map (comp set second)\n           (filter (fn [[k v]] (not= 1 (count v)))\n                   (group-by sort %))))","problem":77,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":77,"code":"(fn [coll]\n  (let [set-filter (comp set filter)\n        sort-chars (fn [s] (apply str (sort s)))\n        equal-sort-chars (fn [a b] (= (sort-chars a) (sort-chars b)))]\n    (set-filter #(> (count %) 1)\n        (reduce #(conj %1 \n                       (set-filter (fn [a] (equal-sort-chars a %2)) coll\n))\n                #{}\n                coll))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":77,"code":"(fn [words]\n  (->> words (group-by frequencies) (vals) (remove #(= 1 (count %))) (map set) (set)))","user":"57275898e4b0c5bde472c13e"},{"code":"(fn [s] (set (mapcat #(if (second %) [(set %)]) (vals (group-by #(set %) s)))))","problem":77,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [x]\n  (set\n   (map set\n        (filter\n         (fn [el]\n           (> (count el) 1))\n         (vals (group-by sort x))))))","problem":77,"user":"53415755e4b00652c8746ecd"},{"code":"(fn ana [x] (set (for [ [k v] \n       (group-by last (map #(vector % (sort %) ) x))  \n         :when (> (count v) 1)] (set(map #(first %) v )))))","problem":77,"user":"4fccdc75e4b0ee37620e186d"},{"code":"#({\\m #{#{(% 0) \"team\" \"mate\"}}\n   \\v #{#{(% 0) \"ever\"} #{\"lake\" \"kale\"} #{\"mite\" \"item\"}}} (get (% 0) 0))","problem":77,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn [v]\n  (set \n   (filter #(> (count %) 1)\n   \t       (for [[_ val]\n                     (reduce (fn [m st]\n                               (let [so (apply str (sort st))]\n                                 (assoc m so (conj (get m so #{}) st))))\n                             {}\n                             v)]\n                 val))))","problem":77,"user":"52323a4ae4b035af41902a79"},{"problem":77,"code":"(fn anagram\n        [x] \n        (->>\n         (reduce \n          (fn process-anagram \n            [sofar x]\n            (update-in sofar [(apply str (sort x))] #(set (conj % x)))) \n          {} x)\n         (map second)\n         (filter #(> (count %) 1))\n         (set)))","user":"5361d423e4b0243289761e49"},{"problem":77,"code":"(fn ang [v] \n   (->> v (group-by sort) (map (comp set val)) (remove #(= (count %) 1)) set))","user":"553900d4e4b09218d5f44fe5"},{"code":"(fn [words]\n  (letfn [\n    (letters [word] (set (seq word)))]\n  (set\n    (map set\n      (filter \n        #(> (count %) 1)\n        (vals (group-by letters words)))))))","problem":77,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by set)\n       (map (fn [[k v]] (set v)))\n       (filter #(> (count %) 1))\n       (set)))","user":"560e9a2de4b05f002753df52"},{"code":"(fn a[x]\r\n  (let [m (zipmap x (map #(set %) x)) a (zipmap (vals x) [])\r\n        l (vals (reduce (fn [m [k v]] (assoc m v (concat [k] (get m v)))) a m))]\r\n      (set (filter #(> (count %) 1 ) (map #( set %) l)))))","problem":77,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":77,"code":"#(set (filter (fn [x] (> (count x) 1))\n       (for [[k v] (group-by frequencies %)]\n         (set v))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":77,"code":"(fn anagrams [lst]\n  (let [sort-str #(apply str (sort %))\n        anagram? #(= (sort-str %1) (sort-str %2))\n        count-if-anagram #(let [k (get %2 (sort-str %1))]\n                            (if (nil? k)\n                              (assoc %2 (sort-str %1) (set (list %1)))\n                              (assoc %2 (sort-str %1) (conj k %1))))\n        list-anagrams #(reduce\n                        (fn [a [k v]] (if (> (count v) 1) (conj a v) a))\n                        #{}\n                        %)]\n    (loop [lst lst\n           acc {}]\n      (if (empty? lst)\n        (list-anagrams acc)\n        (recur (rest lst) (count-if-anagram (first lst) acc))))))","user":"587ee260e4b052da650a6353"},{"problem":77,"code":"#(->> (group-by sort %)\n      (vals)\n      (filter (comp (partial < 1) count))\n      (map set)\n      (set))","user":"4ed45563535d10e5ff6f52c9"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by (partial into #{}))\n       vals\n       (remove #(> 2 (count %)))\n       (map (partial into #{}))\n       (into #{})))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":77,"code":"(fn [xs] (let [anagrams (vals (group-by (fn [a] (sort (seq a))) xs))\n               ]\n           (into #{} (map #(into #{} %) (filter #(< 1 (count %)) anagrams)))))","user":"53976599e4b0b51d73faaeea"},{"problem":77,"code":"(fn [xs] (set (map set (filter #(> (count %) 1)  (vals (group-by #(sort %) xs))))))","user":"531bfb69e4b08068f379ed97"},{"code":"(fn [l]\n  (set (map set (filter #(not= (count %) 1) (vals (group-by sort l)\n    )))))","problem":77,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":77,"code":"(fn find-anagarams [v]\n  (set (filter #(> (count %) 1)\n               (for [x v]\n                 (set (filter #(= (frequencies x) (frequencies %)) v))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":77,"code":"(fn p77 [ss]\n  (->> (map (fn [x] [(->> (sort x) (clojure.string/join)) x]) ss)\n       (group-by first)\n       (map #(map second (val %)))\n       (filter #(> (count %) 1))\n\t   (map set)\n       (set)\n\n    )\n  )","user":"58eed4c5e4b056aecfd47db7"},{"problem":77,"code":"#(->> %\n  (group-by set)\n  (map (comp set second))\n  (filter (comp (partial < 1) count))\n  (set))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":77,"code":"(fn [x] (set (map set (filter #(< 1 (count %)) (vals (group-by sort x))))))","user":"56066e82e4b08b23635d3173"},{"problem":77,"code":"(fn\n  [coll]\n  (let [sorted-list (sort-by #(str (sort (seq %))) coll)]\n    (->> (reduce #(if (= (sort (seq (first (first %1))))\n                        (sort (seq %2)))\n                  (conj (rest %1) (conj (first %1) %2))\n                  (conj %1 #{%2}))\n                [#{(first sorted-list)}]\n                (rest sorted-list))\n        (filter #(> (count %) 1))\n        (into #{}))))","user":"56bb652ae4b0f26550335953"},{"problem":77,"code":"(fn collect-anagrams [coll]\n  (let [anagram? (fn [x y] (= (frequencies x) (frequencies y)))\n        impl (fn [coll acc]\n               (if (empty? coll)\n                 acc\n                 (let [current (first coll)\n                       anagram-map (group-by #(anagram? current %) (rest coll))]\n                   (recur (get anagram-map false) (conj acc (into #{current} (get anagram-map true))))\n                   )))]\n    (set (filter #(>= (count %) 2) (impl coll [])))))","user":"53350264e4b0656e627bfd73"},{"code":"(fn [c]\n  (set (filter #(> (count %) 1)\n               (map (comp set second)\n                    (reduce (fn [a [k v]] (assoc a k (conj (a k []) v)))\n                            {}\n                            (map vector (map set c) c))))))","problem":77,"user":"4ea09fa4535d7eef308072aa"},{"problem":77,"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by (comp sort seq) c))))))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":77,"code":"(fn find-anagrams\n  [seq]\n  (reduce-kv (fn [m k v] (if (> (count v) 1) (conj m (set v)) m)) #{} (group-by sort seq)))","user":"5759c833e4b02ea11479932c"},{"problem":77,"code":"(fn af [coll]\n   (->> (group-by frequencies coll)\n        (vals)\n        (filter #(> (count %) 1))\n        (map set)\n        (set)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":77,"code":"(fn [x]\n  (set (filter #(< 1 (count %))\n                    (map set (vals (group-by #(frequencies %) x))))))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn [v] (set (map  set (filter  #(> (count %) 1) (vals (group-by set v))))))","problem":77,"user":"4ec4d723535dcc7ae8597d65"},{"problem":77,"code":"(fn __\n  [words]\n  (letfn [(occurrences [x] \n            (let [current (frequencies x)]\n            (set (filter #(= current (frequencies %)) words))))]\n\t  (->> words (map occurrences) (filter #(> (count %) 1)) set)))","user":"55a62092e4b0acc240e31554"},{"problem":77,"code":"(letfn [(canonicalize-string [string]\n                             (clojure.string/join \"\"\n                                                  (sort (clojure.string/split string #\"\"))))]\n  (fn [strings]\n  \t(set (map set (filter #(> (count %) 1)\n    \t          \t (vals (group-by canonicalize-string strings)))))))\n  ;(fn [strings]\n  ;   (set (filter #(> (count %) 1)\n  ;                (vals \n  ;                 (reduce (fn [acc elt]\n  ;                           (assoc acc \n  ;                             (canonicalize-string elt) \n  ;                             (conj (get acc (canonicalize-string elt) #{}) elt))) \n  ;                         {} strings))))))","user":"5553b924e4b0deb715856e06"},{"problem":77,"code":"(fn [words]\n    (into #{}\n      (for [g (vals (group-by sort words))\n          :let [x (into #{} g)]\n          :when (< 1 (count x))] x)))","user":"537bde5de4b06839e8705e73"},{"problem":77,"code":"(fn anagramsB [x] ((fn anagramsRec [x res]\n\t(if (empty? x) res\n\t(let [\n\t\tv ((fn anagrams1 [tst x] (conj (set (filter (fn [xi] ((fn anagrams? [x y] (= (sort x)(sort y))) tst xi)) x)) tst))  (first x)(rest x))\n\t\tnewX (remove v x)\n\t\tnewRes (if (> (count v) 1) (conj res v) res)\n\t\t]\n\t(anagramsRec newX newRes)\n\t)))\n x #{}))","user":"568820e8e4b0dcc4269f4067"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(set %))                                  ;; group them by a set made of their letters\n       vals                                                 ;; take the values from the map\n       (filter #(>= (count %) 2))                           ;; Skip any ones that don't have more than two matches\n       (map set)                                            ;; Lists to sets\n       set))                                                ;; Produce a set of sets","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":77,"code":"(fn [words]\n  (set  \n    (map\n      set \n      (filter\n          #(> (count %) 1) \n          (for [x (vals (group-by :wset (for [w words] {:word w, :wset (set w)})))]\n            (for [y x]\n              (y :word)))))))","user":"53a94b63e4b047364c044434"},{"problem":77,"code":"(fn [words] (let [letters (into {} (for [w words] [w (sort w)]))] (into #{} \n(filter #(> (count %) 1) (map #(set (map first (val %))) (group-by #(val %) \nletters))))))","user":"59358f74e4b04f87174def52"},{"problem":77,"code":"(fn a [coll] (set (filter  #(> (count %) 1) (set (map (comp set last) (group-by #(clojure.string/join \"\" (sort %)) coll))))))","user":"4eeb8f68535d93acb0a668a9"},{"problem":77,"code":"(fn [words]\n  (loop [anagrams #{}\n\t\t [word & more-words] words]\n    (letfn [(letter-set [w] (apply hash-set (distinct (clojure.string/split w #\"\"))))\n            (anagrams? [& wds] (and (apply = (map count wds)) (apply = (map letter-set wds))))]\n      (let [ans (apply hash-set (filter #(anagrams? word %) more-words))]\n        (if (empty? ans)\n          (if (first more-words)\n            (recur anagrams more-words)\n\t\t\tanagrams)\n          (if (first more-words)\n            (recur (conj anagrams (conj ans word)) (remove #(contains? ans %) more-words))\n            (conj anagrams (conj ans word))))))))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":77,"code":"(fn [coll]\n    (set (filter #(> (count %) 1)\n                 (map set\n                      (vals (group-by sort coll))))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":77,"code":"(fn [cl]  (->> cl (group-by #(set %)) (map #(set (nth % 1))) (filter #(< 1 (count %))) set\n ))","user":"55adf4d7e4b03311e7b732af"},{"problem":77,"code":"(fn anagram-finder [words]\n  (let [word-map\n        (reduce (fn [ret word]\n                     (let [key (-> word\n                                   sort\n                                   clojure.string/join)\n                           anagrams (get ret key #{})]\n                       (assoc ret key (conj anagrams word))))\n                {}\n                words)]\n   (->> word-map\n         vals\n         (filter #(< 1 (count %)))\n         set)))","user":"571d063ee4b0145328a76272"},{"code":"(fn [c]\n  (set (map set\n  (filter\n    #(<= 2 (count %))\n    (vals (group-by sort c))))))","problem":77,"user":"4fc4eadee4b081705acca353"},{"problem":77,"code":"(fn [strings]\n  (set (map set (filter #(> (count %) 1) (map second (group-by set strings))))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn [n] (set (filter #(< 1 (count %)) (for [[k v] (group-by sort n)] (set v)))))","problem":77,"user":"4ff76effe4b0678c553fc390"},{"problem":77,"code":"#(letfn [(count-elements\n          ([s] (count-elements s {}))\n          ([s h] (if (empty? s)\n                   h\n                   (recur (rest s)\n                          (assoc h\n                            (first s)\n                            (if (h (first s))\n                              (inc (h (first s)))\n                              1))))))\n         (anagram? [a b]\n                   (and (= (count a) (count b))\n                        (= (count-elements a) (count-elements b))))]\n   (loop [s %\n          anagrams #{}]\n     (if (empty? s)\n       anagrams\n       (recur (remove (partial anagram? (first s)) s)\n              (let [a (filter (partial anagram? (first s)) s)]\n                (if (= (count a) 1)\n                  anagrams\n                  (conj anagrams (into #{} a))))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":77,"code":"(fn anagram-finder [coll]\n     (into #{}\n           (map #(into #{} %)\n                (filter #(> (count %) 1) \n                        (vals (group-by #(sort (map str %)) coll))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":77,"code":"(fn [coll]\n  (->>\n   coll\n   (reduce (fn [carry x]\n             (conj carry (set (filter #(= (frequencies %) (frequencies x)) coll))))\n           #{})\n   (filter #(> (count %) 1))\n   set))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":77,"code":"(fn anagrams [coll]\n  (let [anagram? (fn [w1 w2] (= (sort w1) (sort w2)))]\n    (loop [acc #{}\n           [w1 & ws] coll]\n      (if w1\n        (recur (conj acc (apply conj #{w1} (filter (partial anagram? w1) coll))) ws)\n        (into #{} (remove #(= 1 (count %)) acc))))))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"#(->> (group-by frequencies %)\n      (map second)\n      (filter next)\n      (map set)\n      set)","problem":77,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":77,"code":"(letfn [\n (w-id [w] (sort (seq w)))\n (w-to-dict [m w] \n  (let [k (w-id w)] \n   (assoc m k \n      (conj (get m k #{}) w))))\n (dict-ws [ws]\n  (reduce \n   (fn [m w] (w-to-dict m w)) \n   {} ws))]\n (fn [words] \n  (set \n   (remove \n    (comp empty? rest) (vals (dict-ws words))))))","user":"57f9011ee4b0d3187e900935"},{"problem":77,"code":"(fn [words]\n  (set (for [word  words\n             :let  [anagrams (filter #(= (set word) (set %)) words)]\n             :when (> (count anagrams) 1)]\n         (set anagrams)\n         )))","user":"50342d1be4b062bc5d7ae15f"},{"problem":77,"code":"(fn [vct]\n  (set (let [a (map #(sort (char-array %)) vct)\n             b (for [v (vals (group-by last (zipmap vct a )))]\n                 (set (map first v)))]\n         (remove #(= (count %) 1) b))))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn [words] (loop [word (first words) ws (set (rest words)) result #{}]\n                 (if (nil? word)\n                   result\n                   (let [s (set (conj (filter #(= (set word) (set %)) ws) word))\n                         w (remove #(contains? s %) ws)\n                         f (first w)]\n                     (if (> (count s) 1)\n                       (recur f w (conj result s))\n                       (recur f w result))\n                     ))))","problem":77,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"(fn [lst] (set (map set (remove #(<= (count %) 1) (vals (group-by sort lst))))))","problem":77,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn [word-list]\n  (let [anagram? (fn [x y] (= (sort x) (sort y)))]\n  (loop [ws word-list, results []]\n    (if (empty? ws) (set (filter #(> (count %) 1) results))\n      (recur \n       (rest ws) \n       (conj results (set (filter #(anagram? (first ws) %) word-list))))))))","problem":77,"user":"4f2e0369e4b0d6649770a064"},{"code":"#(set (for [s (vals (group-by frequencies %)) :when (< 1 (count s))] (set s)))","problem":77,"user":"4fc67081e4b0ee37620e1813"},{"problem":77,"code":"(fn [ws] (->> (group-by sort ws)\n              vals\n              (filter #(< 1 (count %)))\n              (map #(into #{} %) )\n              (into #{})))","user":"553698fae4b09218d5f44fc0"},{"problem":77,"code":"(fn [x]\n  (set (map set (for [x (vals (group-by #(set %) x)) :when (> (count x) 1)] x))))","user":"566d71b1e4b0a866af6896ca"},{"problem":77,"code":"(fn anagram-matcher\n  [words] \n  (into #{} (filter not-empty (reduce (fn [anagrams word] \n                    (conj anagrams \n                          (let [remaining-words (filter #(not (= word %1)) words)]\n                               (reduce (fn [acc this-word] \n                                           (if ((fn are-anagrams\n  [word1 word2]\n  (= \n     (into #{} (char-array word1))\n     (into #{} (char-array word2)))) word this-word)\n                                               (into acc #{this-word word})\n                                               acc))\n                                       #{}\n                                       remaining-words))))\n               #{}\n               words))))","user":"589560d8e4b00487982d5281"},{"code":"(fn anagrams [seq]\n  (->> \n    seq\n    (group-by sort) \n    vals \n    (filter \n        (fn [a] (< 1 (count a))))\n    (map set)\n    set))","problem":77,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn [v] \n  (set\n  (map set\n  (filter #(> (count %) 1) \n                 (vals (group-by frequencies v))))))","problem":77,"user":"508bed64e4b0be79e5b189cf"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (map set)\n       (filter #(< 1 (count %)))\n       set))","user":"5d929ceae4b0915913b1d412"},{"problem":77,"code":"(fn solve [words]\n\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by set words))))))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn [i]\n  (set \n   (map set \n        (remove #(< (count %) 2 ) \n                (partition-by #(sort compare %) \n                              (sort #(compare (apply str (sort compare %)) (apply str (sort compare %2))) i))))))","problem":77,"user":"4e43b0d9535dc968683fc4a3"},{"problem":77,"code":"(fn [words]\n  (letfn [(sort-wd-pairs\n           [wds]\n           (sort (map #(vector (apply str (sort  (seq %) ) ) %) wds)))\n          (partition-wd-pairs\n           [wd-pairs]\n           (partition-by (fn [a] (first a)) wd-pairs))\n          (create-anagram-sets\n           [partitioned-pairs]\n           (map (fn [c] (set (map (fn [b] (second b)) c))) partitioned-pairs))\n          (cleanup\n           [sets]\n           (set (filter (fn [d] (> (count d) 1)) sets)))]\n    (->> words\n         (sort-wd-pairs)\n         (partition-wd-pairs)\n         (create-anagram-sets)\n         (cleanup))))","user":"4f80db02e4b033992c121bf9"},{"problem":77,"code":"#(set (map set\n      (remove (comp zero? dec  count)\n              (vals (group-by frequencies %)))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn [l]\n    (set (filter #(< 1 (count %)) \n           (map #(set (nth % 1)) (group-by #(set (re-seq #\"\\w\" %)) l ))))  \n)","problem":77,"user":"4f1595da535d64f603146444"},{"problem":77,"code":"(fn [inp]\n  (let [f (fn [fr nx] (let [ky (clojure.string/join (sort nx))\n                              val (fr ky #{})]\n                      (assoc fr ky (conj val nx))))] \n    (set (filter #(> (count %1) 1 ) (vals (reduce f {} inp))))))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"(fn [ws]\n  (let [m (reduce (fn [a b]\n            (let [k (sort (seq b)) e (or (a k) #{})]\n              (assoc a k (conj e b)))) {} ws)]\n    (reduce (fn [a [_ v]] (if (> (count v) 1) (conj a v) a)) #{} m)))","problem":77,"user":"4e773be8535d324fb2983d6e"},{"problem":77,"code":"(fn [args](set (filter #(> (count %) 1) (map set (vals (group-by sort args))))))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":77,"code":"(fn [ws] (set (for [i (vals (group-by sort ws)) :when (< 1 (count i))] (set i))))","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn [y]\n    (set (filter #(> (count %) 1) (letfn [(group [coll] (group-by identity (seq coll)))]\n      (map (fn [n] (set (filter (fn [m] (= (group (nth y n)) (group m))) y))) (range (count y))))\n    )))","problem":77,"user":"504e1abee4b0f6ff3350c45d"},{"problem":77,"code":"(fn [s]     \n    \n    (let [m (reduce  #(assoc %  (sort (seq %2)) (conj (get % (sort (seq %2))   #{} ) %2)  )     {}  s)]\n      (set (filter #(> (count %) 1)  (map second m)))\n    )\n    )","user":"5735ac67e4b0cd1946bd102b"},{"problem":77,"code":"(fn f [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":77,"code":"(fn [s]\n  (->> (sort-by (comp str sort) s)\n       (partition-by (comp str sort))\n       (filter #(>= (count % ) 2))\n       (map set)\n       set))","user":"57458b82e4b009280f9f2b4e"},{"problem":77,"code":"(fn [x]\n  (into #{} (map set (filter #(> (count %) 1) (map val (group-by sort x)))))\n  )","user":"57750460e4b0979f8965160c"},{"problem":77,"code":"(fn [w]\n   (let [add #(let [s (sort %2)                           \n                    c (%1 s)] \n                (conj %1 [s (conj c %2)]))        \n         mapped (reduce add (zipmap (map sort w) (repeat #{})) w)]\n     (into #{} (filter #(> (count %) 1) (vals mapped)))))","user":"53c649d3e4b00fb29b221297"},{"problem":77,"code":"(fn anagram-finder [[x & more :as xs]] \n  (->> (for [a xs b xs] [a b])\n       (filter #(not= (first %) (second %)))\n       (filter #(= (set (first %)) (set (second %))))\n       (group-by #(first %))\n       (vals)\n       (map flatten)\n       (map set)\n       (set)))","user":"52616198e4b03e8d9a4a705e"},{"code":"(fn anagrams [words]\n  (let [words-ordered (map sort words)]\n    (set (map (fn [x] (set (map #(words %1) x))) (map (fn [x] (map #(last %) x)) (filter #(> (count %1) 1) (map last (group-by first (map-indexed #(into [] [%2 %1]) words-ordered)))))))))","problem":77,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn [coll]\n  ((comp\n\t\t(fn [m] (set (vals m)))\n\t\t(fn [m] (filter (fn [[k v]] (coll? v)) m))\n\t\t(fn [m] (apply merge-with (fn [v1 v2] (if (coll? v1) (conj v1 v2) #{v1 v2})) m))\n\t\t(fn [m] (map (fn [it] {(sort it) it}) m)))\n\t coll))","problem":77,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn [v] (set (map set (remove #(= (count %) 1) (vals (group-by sort v))))))","problem":77,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"code":"(fn [z]\n  (reduce (fn [a s] \n            (#(if (next %) (conj a (set %)) a)\n                (re-seq (re-pattern (str \"\\\\b[\" s \"]{\" (count s) \"}\\\\b\")) \n                        (apply str (interpose \" \" z))))) \n          #{}\n          z))","problem":77,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn f[w]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort w))))))","problem":77,"user":"4dbd2aa3535d020aff1edf40"},{"problem":77,"code":"(fn [s](->> s\n   (group-by sort) vals \n   (filter #(< 1 (count %))) \n   (map set) set\n))","user":"5603c31fe4b04bb52996e1c1"},{"problem":77,"code":"(fn [vow]\n    (let [isanagram?\n          (fn [w1 w2]\n            (let [s1 (seq w1)\n                  s2 (seq w2)]\n              (if (not= (count s1) (count s2)) false\n                  (loop [len (count s1)\n                         i 0]\n                    (if (= i len) true\n                        (if (some (conj #{} (nth s1 i)) s2)\n                          (recur len (inc i))\n                          false))))))\n          anasoffirst\n          (fn [sow]\n            (loop [colin (rest sow)\n                   colout #{}\n                   candidate (first sow)]\n              (if (empty? colin)\n                (if (empty? colout) colout (conj colout candidate))\n                (recur (rest colin)\n                       (if (isanagram? (first colin) candidate)\n                         (conj colout (first colin))\n                         colout)\n                       candidate))))]\n      (loop [sow (set vow) collect #{}]        \n        (if (empty? sow) collect\n            (let [anas (anasoffirst sow)\n                  nsow (remove anas (rest sow))]\n              (if (empty? anas) (recur nsow collect) (recur nsow (conj collect anas))))))))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":77,"code":"(fn anaset [s]\n  (->>\n    (group-by #(-> % seq sort) s)\n    vals\n    (map set)\n    (filter #(> (count %) 1))\n    set))","user":"548fa2dfe4b0e286459a1240"},{"problem":77,"code":"(fn [coll] \n   (set (map second \n        (filter\n          (fn [x] (< 1 (count (second x))))\n          (reduce \n            (fn [coll, x] \n              (if (contains? coll (first x))\n                (update-in coll [(first x)]  clojure.set/union (second x))\n                (conj coll x) )) {} (map #(vector (set %) #{%}) coll))))))","user":"56f15eade4b04a395b9a048e"},{"problem":77,"code":"(fn anagram-finder [words]\n  (set\n     (filter \n       #(> (count %) 1) \n       (map set \n            (map last \n                 (group-by sort words))))))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":77,"code":"(fn [xs]\n   (set (filter #(< 1 (count %))\n                (map (comp set second) (group-by sort xs)))))","user":"5c896f46e4b048ec896c5940"},{"problem":77,"code":"#(set (for [[_ g] (group-by frequencies %)\n\n            :when (next g)]\n        (set g)))","user":"4ec7c32c535d6d7199dd36e6"},{"problem":77,"code":"(fn [x]\n  ( apply hash-set \n          (filter #(> (count %) 1)\n                  (map #(apply hash-set (val %))(group-by sort x))) ))","user":"580d1da7e4b0849f6811b72f"},{"problem":77,"code":"(fn [c]\n(set (remove #(< (count %) 2) (map set (vals (group-by set c)))))\n)","user":"55e1d34ae4b050e68259b421"},{"problem":77,"code":"(fn [a] (set (map (fn [e] (set (e 1))) (filter (fn [e] (> (count (e 1)) 1)) (group-by (fn [w] (frequencies w)) a)))))","user":"5abe2fc2e4b073f17744271e"},{"problem":77,"code":"#(->> %\n      (group-by frequencies)\n      (vals)\n      (filter next)\n      (map set)\n      (set))\n;#(let [wss (vals (group-by frequencies %))]\n;  (set (for [ws wss :when (< 1 (count ws))]\n;         (set ws))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [coll]\n  (->> coll\n    (group-by sort)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (set)))","problem":77,"user":"4e5914e0535d8a8b8723a29b"},{"problem":77,"code":"#(->> (group-by sort %)\n      vals\n      (filter (comp (partial < 1) count))\n      (map set)\n      (into #{}))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn [s]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies s))))))","problem":77,"user":"4f29eb2ae4b0d6649770a037"},{"problem":77,"code":"(fn [s] (set \n         (filter #(> (count %) 1) \n                 (vals \n                  (reduce \n                   (fn [fm w] (assoc fm \n                                (set w) \n                                (conj (get fm (set w) #{}) w))) \n                   {} s)))))","user":"573ce277e4b05c31a32c080b"},{"problem":77,"code":"(fn anagram-finder [se]\n  (set\n    (map (fn [col] (set col))\n         (filter (fn [col] (>= (count col) 2))\n                 (vals\n                   (group-by (fn [word] (set word))\n                             se))))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":77,"code":"(fn [a] (->> a (group-by sort) (vals) (filter #(> (count %) 1)) (map set) (set)))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":77,"code":"(fn anagrams\n  [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort words))))))","user":"56912f93e4b0dcc4269f40ef"},{"problem":77,"code":"(fn find-anagrams [wordlist]\n  (loop [words (set wordlist) out #{}]\n    (if (< (count words) 2)\n      (set (filter #(> (count %) 1) (map #(disj % nil) out))) \n      (if-let [anagrams (\n(fn find-one-anagram [word wordlist]\n  (set \n   (map #((fn anagram? [w1 w2] \n            (when (= (sort w1) (sort w2))\n              w2)) word %) \n        wordlist))\n  )(first words) words)]\n        (recur (clojure.set/difference words anagrams) (conj out anagrams))\n        (recur (rest words) out)))\n))","user":"5603d057e4b0c80df0ca264e"},{"code":"(fn [i] (set (filter #(> (count %) 1) (map set (partition-by sort  (sort-by (comp vec sort) i))))))","problem":77,"user":"4ea41fc2535d7eef308072cb"},{"code":"#(let [anagram-set (set (map frequencies %))]\n    (reduce (fn [acc anagram]\n        (let [group (set (filter (fn [word] (= anagram (frequencies word))) %))]\n\t\t(if  (> (count group) 1)\n\t\t  (conj acc group)\n\t\t  acc)))\n\t    #{}\n\t    anagram-set))","problem":77,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (group-by #(str (sort (seq %1))))\n         vals\n         (map set)\n         (filter #(> (count %1) 1))\n         set\n         )\n    )","user":"55aa5f73e4b0988bba2ad94b"},{"problem":77,"code":"(fn [s] (set (map set (filter #(> (count %1) 1) (vals (group-by set s))))))","user":"56baab13e4b0f26550335948"},{"code":"(fn\n    [colls]\n    (set (map set (filter #(> (count %) 1) (vals (group-by #(frequencies %) colls))))))","problem":77,"user":"50b35486e4b03ea88043356a"},{"code":"(fn [coll]\n   (into #{}\n         (reduce #(if (> (count (second %2)) 1 )\n                    (conj %1 (second %2)))\n                 []\n                 (reduce #(let [itemkey (sort (into [] %2))\n                                vals (get %1 itemkey)]\n                            (if (nil? vals)\n                              (assoc %1 itemkey #{%2})\n                              (assoc %1 itemkey (conj vals %2 ))))\n                         {}\n                         coll))))","problem":77,"user":"5016ac54e4b052339a490e7b"},{"problem":77,"code":"(fn a [words]\n  (set \n   (map set\n     (filter #(> (count %) 1) \n             (vals (group-by #(sort (seq %)) words))))))","user":"558bb38fe4b0277789237631"},{"problem":77,"code":"#(set (map (fn [v] (set (apply concat (second v)))) (group-by (comp sort first) (filter (comp not nil?)\n                                                                                       (for [x % y % :when (not (= x y))]\n                                                                                         (if (= (sort x) (sort y)) #{x y}))))))","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map #(set (second %)) (group-by sort words)))))","problem":77,"user":"4e8338d6535db62dc21a62d3"},{"problem":77,"code":"(fn [ss]\n  (into #{}\n        (filter (fn [e] (> (count e) 1))\n                (vals\n                  (reduce (fn [a b] (let [bc (sort (seq (char-array b)))\n                                          as (a bc)]\n                                      (if (nil? as)\n                                        (assoc a bc #{b})\n                                        (assoc a bc (conj as b)))))\n                          {}\n                          ss)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [words]\n  (->>\n   words\n   (map #(hash-map (sort %) #{%}))\n   (apply merge-with clojure.set/union)\n   (map (fn [[k v]]\n          (if (> (count v) 1)\n            [v]\n            [])))\n   (apply concat)\n   set))","problem":77,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn anagram-finder\n  [xs]\n  (set (filter #(> (count %) 1) \n          (map set (vals (group-by (fn [s] \n                            (sort (seq s)))\n                          xs))))))","problem":77,"user":"4f2942ace4b0d6649770a01e"},{"problem":77,"code":"(fn anagrams [words] (into #{} (filter #(<= 2 (count %))\n                                       (vals (reduce (fn [hsh s]\n                                                       (let [k (clojure.string/join (sort s))]\n                                                         (assoc hsh k (conj (hsh k #{}) s))))\n                                                     {}\n                                                                                     words)))))","user":"5daa221de4b000c986472c3f"},{"code":"(fn [l] (->> l (group-by #(->> % (seq) (sort))) (vals) (map set) (filter #(> (count %) 1)) (set)))","problem":77,"user":"525f51bde4b0cb4875a45dc8"},{"problem":77,"code":"(fn [coll]\n  (into #{} (filter #(> (count %) 1) (vals (reduce (fn [m v]\n                                           (let [k (sort v)]\n                                             (if (contains? m k)\n                                               (assoc m k (conj (m k) v))\n                                               (assoc m k #{v}))))\n                                         {} coll)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn [words]\n  (loop [anagrams #{}\n         words words]\n    (if (empty? words)\n      anagrams\n      (let [f (first words)\n            r (rest words)\n            found (filter #(= (sort %) (sort f)) r)]\n        (recur\n         (if (empty? found)\n           anagrams\n           (conj anagrams (apply hash-set (cons f found))))\n         (remove (apply hash-set found) r))))))","problem":77,"user":"537e745ae4b06839e8705ea6"},{"problem":77,"code":"(fn ana [vec]\n  (set (->>\n         vec\n         (group-by frequencies)\n         (vals)\n         (map set)\n         (filter #(< 1 (count %)))\n         ))\n  )","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":77,"code":"(fn [coll] (apply hash-set (keep #(when (> (count %) 1) (apply hash-set %)) (vals (group-by sort coll)))))","user":"5cb0f70ce4b026601754b8c1"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by #(set (re-seq #\"[a-z]|\" %)))\n       (map second)\n       (filter #(> (count %) 1))\n       (map #(set %))\n       (into #{})))","user":"58b989dbe4b0888cdc949ccd"},{"problem":77,"code":"(fn partition-by-ngrams [words]\n  (into #{} \n        (filter \n         #(< 1 (count %))\n         (reduce \n          (fn [ngrams word]\n            (letfn [(ngram? [s1 s2] (and (= (set s1) (set s2)) (= (.length s1) (.length s2)))) \n                    (contain-ngram? [ngrams word] (ngram? word (first ngrams)))\n                    ]\n              (let [word-ngram (first (filter #(contain-ngram? % word) ngrams))]\n                (println word-ngram)\n                (if (nil? word-ngram)\n                  (into ngrams #{#{word}})\n                  (replace {word-ngram  (into word-ngram #{word})} ngrams)))))\n          #{}\n          words))))","user":"5654e024e4b0f9d632dd848d"},{"problem":77,"code":"(fn [c]\n    (->> (group-by sort c)\n         (map (comp set second))\n         (filter (comp not nil? second)) ;; so I don't have to count\n         set)\n    )","user":"57aa290de4b0b8559636fc65"},{"code":"(fn [words] (loop [result {} ws words]\n              (if (nil? ws)\n                (set (filter #(> (count %) 1) (set (vals result))))\n                (let [word (first ws)\n                      k (sort word)\n                      s (result k)]\n                  (if (nil? s)\n                    (recur (assoc result k #{word}) (next ws))\n                    (recur (assoc result k (conj s word)) (next ws))\n                  )\n                )\n              )\n            )\n)","problem":77,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":77,"code":"(fn anagrams [coll]\n  (->>\n    (group-by set coll)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (set)))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":77,"code":"(fn [coll]\n    (reduce #(conj % (set %2)) #{} (filter #(> (count %) 1) (vals (group-by #(reduce conj #{} %) coll)))))","user":"5e724492e4b085ba37836dc7"},{"problem":77,"code":"(fn my-77\n  [coll]\n  (letfn [(same-letters?\n            [set1 strn]\n            (= set1 (set strn)))\n          (unique-letter-colls\n            [seq]\n            (reduce #(conj %1 (set %2))  #{} seq))\n          (create-matching-set \n            [set1 coll] \n            (set (filter #(same-letters? set1 %) coll)))\n          (create-anagram-sets\n            []\n            (for [i (unique-letter-colls coll)]\n              (create-matching-set i coll)))\n           ]\n    (into #{} (filter #(> (count %) 1) (create-anagram-sets)))))","user":"56c3aca0e4b05cc29241ee90"},{"problem":77,"code":"(fn [S] (->> (group-by frequencies S) vals (filter second) (map set) set))","user":"55f6fe09e4b06e875b46cea2"},{"problem":77,"code":"(fn [x] (into #{} (map set (filter #(< 1 (count %)) (vals (group-by #(identity (sort %)) x))))))","user":"51a058dae4b0b292b01ee3f3"},{"problem":77,"code":"(fn anagram? [s]\n   (->> s\n    (group-by sort)\n    vals\n    (map set)\n    (filter #(> (count %) 1))\n    set))","user":"538db083e4b0b51d73faae74"},{"code":"(fn [words]\n  (set (filter #(>= (count %) 2) (map #(set (second %)) (group-by set words)))))","problem":77,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn [x] (set (filter #(> (count %) 1) (map set (vals (group-by sort x))))))","problem":77,"user":"52570aeae4b0541d1855ba42"},{"problem":77,"code":"(fn [s] (->> s\n              (group-by\n               (fn [strings] (reduce #(if (% %2)\n                                        (assoc % %2 (inc (get % %2)))\n                                        (assoc % %2 1)) {} strings)))\n              (vals)\n              (filter #(< 1 (count %)))\n              (map #(into #{} %))\n              (into #{})))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":77,"code":"(fn anags[s]\n  (set (map #(set (second %)) (filter #(< 1 (count (second %))) (group-by sort s)))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (map set)\n       (remove #(< (count %) 2))\n       set))","problem":77,"user":"5119f3d5e4b06c8af0111818"},{"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","problem":77,"user":"4ee6400c535d93acb0a6685b"},{"code":"(fn [c]\n    (letfn [(a? [x y] (and (= (sort x) (sort y))))]\n      (into #{} (filter #(> (count %) 1) (map (fn [w] (into #{} (filter #(a? w %) c))) c)))))","problem":77,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn [x] (set (map set (filter #(>= (count %) 2) (vals (group-by sort x))))))","problem":77,"user":"4feada56e4b0140c20fb9c11"},{"problem":77,"code":"(fn [words]\n    (set (map set (filter #(< 1 (count %1)) (vals (group-by sort words))))))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [seq]\n  (let [groups (group-by sort seq) \n        not-single-grp (filter #(< 1 (count (second %))) groups)]\n       (set (map #(set (second %)) not-single-grp))))","problem":77,"user":"523a9fc9e4b081681ca7adca"},{"problem":77,"code":"(fn [ws] \n  (->> (group-by (comp sort vec) ws)\n       (vals)\n       (map set)\n       (filter #(< 1 (count %)))\n       (set)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"(fn anagrams [coll]\n  (into #{}\n    (filter\n      #(> (count %) 1)\n      (vals\n        (reduce\n          (fn [anagram-map word]\n            (let [sorted-chars (sort word)]\n              (assoc anagram-map sorted-chars\n                (conj (get anagram-map sorted-chars #{}) word))))\n          {}\n          coll)))))","problem":77,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn [x]\n  (set \n    (filter #(> (count %) 1) \n            (map #(set (second %)) \n                 (group-by sort x)))))","problem":77,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [words]\n  (letfn [(sorted [word] (->> word vec sort (apply str)))]\n    (set (filter #(> (count %) 1) (map set (vals (group-by sorted words)))))))","problem":77,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":77,"code":"(fn anagram-finder [xs]\n  (->> xs\n       (group-by sort)\n       (filter #(> (count (second %)) 1))\n       (map (comp set second))\n       set))","user":"55fbc657e4b0f488688e0666"},{"problem":77,"code":"(fn [x]\n    (->> x\n         (group-by set)\n         (vals)\n         (remove #(= 1 (count %)))\n         (map set)\n         set))","user":"54b7f217e4b0ed20f4ff6e8f"},{"code":"(fn [w]\n  (->> w\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map #(apply hash-set %))\n       (apply hash-set)))","problem":77,"user":"4fa340b4e4b081705acca18c"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n      (group-by sort)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      (set)))","user":"574dfcb8e4b02ea11479923a"},{"problem":77,"code":"(fn f \n  ([a] (f a {}))\n  ([a m] (if (empty? a)\n           (set (filter #(> (count %) 1) (vals m)))\n           (let [t (sort (first a))]\n             (recur \n               (rest a)\n               (conj m {t (conj (get m t #{}) (first a))}))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [coll]\n  (set\n    (map set\n      (filter #(>= (count %) 2)\n        (vals (apply merge-with concat\n                (for [w coll] {(reduce + (map int w)) [w]})))))))","problem":77,"user":"515a6151e4b0394f658fe241"},{"code":"#(set (map set (remove (comp (partial = 1) count) (vals (group-by set %)))))","problem":77,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [words] (->> words (group-by #(set %)) vals (filter #(> (count %) 1)) (map set) set))","problem":77,"user":"52c1f404e4b07a9af5792370"},{"problem":77,"code":"(fn [a] \n  (->> (group-by #(vec [(count %) (set %)]) a)\n       vals (filter #(>= (count %) 2))(map set)set))","user":"5e8ce2fee4b0cb0169546328"},{"problem":77,"code":"(fn [c] (set (map set (filter #(> (count %) 1) (vals (group-by #(apply str (sort (seq %))) c))))))","user":"555c6344e4b0b056612e224c"},{"code":";; TODO: his is a lot of code for such a simple problem.\n\n(letfn [(map-amounts\n          ;; Return a map representing the amounts of each element in coll.\n          ([coll]\n             (map-amounts {} coll))\n          ([map coll]\n             (if (empty? coll)\n               map\n               (recur (assoc map\n                        (first coll)\n                        (inc (get map (first coll) 0)))\n                      (rest coll)))))\n        (same-elements? [vec1 vec2]\n          ;; Return true if vec1 and vec2 contains the same elements and the same amount of elements (not necessarily in the same order).\n          (= (map-amounts vec1) (map-amounts vec2)))\n        (anagram? [w1 w2]\n          ;; Check if word w1 is an anagram of word w2.\n          (same-elements? (vec w1) (vec w2)))\n\n        (anagrams-of [word words]\n          ;; Return a set of all anagrams of word in words (including word itself).\n          (conj (set (filter (partial anagram? word) words)) word))\n\n        (all-anagrams [words]\n          ;; Return a set of sets of all anagrams in words.\n          (set (filter #(next %1) (map #(anagrams-of %1 words) words))))]\n  all-anagrams)","problem":77,"user":"500d0f21e4b05f7c30cfa69e"},{"problem":77,"code":"(fn [x] (->> x (group-by set) vals (filter #(> (count %) 1)) (map set) set))","user":"576e607ae4b0979f89651579"},{"problem":77,"code":"(fn anagram\n\t[coll]\n\t(->> coll\n\t\t (group-by #(apply str (sort %)))\n\t\t (vals)\n\t\t (filter #(> (count %) 1))\n\t\t (map set)\n\t\t (set)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":77,"code":"(fn [s] \n   (set (filter #(> (count %) 1)\n                (map set (vals (group-by sort s))))))","user":"4f0f01c0535d0136e6c22329"},{"code":"(fn [src]\n   (set(map set (filter #(> (count %) 1)(vals(group-by sort src)))))\n  )","problem":77,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"(fn [v] (->> v\n(group-by #(sort (seq %)) )\n(vals) \n(remove #(= 1 (count %)))\n(map set)\n(set)))","problem":77,"user":"503917a0e4b088a6a14ca763"},{"problem":77,"code":"(fn [words]\n    (letfn [(find-anagrams-for-word [word all-words]\n              (let [set-of-letters #(into #{} (seq %))\n                    word-letters   (set-of-letters word)]\n                (->> all-words\n                     (filter (fn [other-word]\n                               (= word-letters\n                                  (set-of-letters other-word))))\n                     (into #{}))))]\n      (->> words\n           (map (fn [word]\n                  (find-anagrams-for-word word\n                                          words)))\n           (filter (fn [anagrams]\n                     (>= (count anagrams)\n                         2)))\n           (into #{}))))","user":"57f904c5e4b0d3187e900936"},{"problem":77,"code":"(fn [v] (set (map set (filter #(> (count %) 1) (vals (group-by (fn [s] (apply str (sort s))) v))))))","user":"536673a8e4b0243289761e76"},{"problem":77,"code":"(fn [s]\n  (->> s \n       (group-by\n          #(->> % seq sort))\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":77,"code":"(fn [x] \n  (->> (group-by (fn [y] (set y)) x)\n       (vals)\n       (map set)\n       (filter (fn [y] (< 1 (count y))))\n       (set)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":77,"code":"(fn [words]\n  (reduce\n    (fn [out s] (if (> (count s) 1) (conj out s) out))\n    #{}\n    (vals\n      (reduce\n        (fn [out w]\n          (let [k (apply str (sort w)) v (get out k)]\n            (if (nil? v) (assoc out k #{w}) (assoc (dissoc out k) k (conj v w)))))\n        {}\n        words))))","user":"564a5a09e4b0284900eef656"},{"problem":77,"code":"(fn anagram-finder [s-v]\n  (set\n    (map set\n\n         (filter #(< 1 (count %))\n                 (vals\n                   (group-by (fn [v]\n                               (sort (clojure.string/split v #\"\"))\n                               ) s-v)\n                   )\n                 )\n         )\n    )\n  )","user":"5edc16e1e4b0c7845d86b0f1"},{"code":"#(set (for [[_ g] (group-by sort %) :when (next g)] (set g)))","problem":77,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [l] (apply hash-set (map #(apply hash-set %)\n    (filter #(< 1 (count %)) (vals (group-by frequencies l)))\n)))","problem":77,"user":"4ef48422535dced4c769f236"},{"code":"(fn [strings]\n  (let [anagram? (fn [& all-strs]\n                   (apply = (map sort all-strs)))]\n    (loop [\n           [first-string & other-strings] strings\n           result #{}]\n      (if (nil? other-strings)\n        result\n        (let [curr-set\n              (set (flatten\n                     (conj [first-string]\n                           (filter #(apply anagram? [first-string %]) other-strings))))]\n          (recur\n            (apply vector (clojure.set/difference (set other-strings) curr-set))\n            (if (= (count curr-set) 1)\n              result\n              (clojure.set/union result #{curr-set}))))))))","problem":77,"user":"53070615e4b02e821686979e"},{"problem":77,"code":"(fn [coll]\n  (loop [current (first coll)\n         tail (set (rest coll))\n         acc #{}]\n    (if (empty? tail)\n      acc\n      (let [anagram (set (filter (fn [w]\n                              (= (set w) (set current)))\n                            tail))\n            remain (clojure.set/difference tail anagram)]\n        (recur (first remain) \n               (set (rest remain))\n               (if (empty? anagram)\n                 acc\n                 (conj acc (into #{current} anagram))))))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":77,"code":"(fn group-anagrams [words]\n  (->> words\n       (group-by #(apply str (sort %)))\n       vals\n       (filter #(> (count %) 1))\n       (map #(into #{} %))\n       (into #{})))","user":"57a9e274e4b0b8559636fc5d"},{"problem":77,"code":"(fn anagram-finder [col]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n                (vals\n                 (group-by frequencies col))))))","user":"5579eed7e4b05c286339e09b"},{"problem":77,"code":"(fn [ss]\n   (->> (group-by #(apply str (sort %)) ss)\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn [l]\n  (set (map set\n            (filter #(> (count %) 1)\n                    (vals (group-by #(apply merge-with + (map (fn [x] {x 1}) %))\n                                    l))))))","problem":77,"user":"522b922ee4b0d34ee08e71c3"},{"code":"#(reduce\r\n    (fn [s [k [f & r :as v]]]\r\n      (if r (conj s (set v)) s))\r\n    #{}\r\n    (group-by sort %))","problem":77,"user":"50acbd15e4b071b89ef26234"},{"problem":77,"code":"(fn anagram [coll]\n  (->> (vals (group-by sort coll))\n       (remove #(= (count %1) 1))\n       (map set)\n       (into #{})))","user":"59c94a69e4b0a024fb6ae576"},{"code":"(fn [w]\n  (set (map set (filter #(< 1 (count %))\n                (vals (group-by frequencies w))))))","problem":77,"user":"50166470e4b052339a490e76"},{"problem":77,"code":";; http://www.4clojure.com/problem/77\n(fn find-anagrams\n  [coll]\n  (set (filter #(> (count %) 1)\n               (map (comp set val) \n                    (apply merge-with into \n                           (map #(hash-map (sort %) [%]) coll))))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [l] \n      (set \n        (map set \n          (filter #(> (count %) 1) \n          (vals (group-by #(apply str (sort %)) l))))))","problem":77,"user":"4f12ab23535d64f603146429"},{"problem":77,"code":"(fn [l] (set (map #(set (second %)) (filter #(> (count (second %)) 1) (into #{} (group-by #(apply str (sort (seq %))) l))))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":77,"code":"(fn anagrams [v]\n  (->> v \n       (group-by frequencies)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"557e56aae4b05c286339e0d5"},{"problem":77,"code":"(fn [words]\n  (->> words\n     (group-by sort)\n     vals\n     (filter #(> (count %) 1))\n     (map set)\n     set))","user":"4f867b25e4b033992c121c51"},{"problem":77,"code":"(fn [x] (set (for [y (map set (vals (group-by #(sort %) x))) :while (> (count y) 1)] y)))","user":"55c5e781e4b0e31453f649b8"},{"problem":77,"code":"#(into #{} (map set (vals \n (filter \n  (fn [[_ words]] (< 1 (count words))) \n  (group-by sort %)))))\n\n;;#(->> % (group-by sort) vals (filter second) (map set) set)","user":"544cf5d7e4b0e39780006977"},{"code":"(fn [v]\n  (set\n   (mapcat\n    (fn [[x y]]\n      (if (> (count y) 1) [(set y)] [])\n      )\n    (group-by sort v)\n    )\n   )\n  )","problem":77,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by set coll)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn [vw]\n  (set (for [x (group-by #(sort (str %)) vw) :when (< 1 (count (val x)))] (set (val x)))))","problem":77,"user":"53219cece4b09d4e7a9b54b7"},{"problem":77,"code":"(fn[coll] (into #{} \n                 (filter #(> (count %) 1)\n                         (map\n                           (fn[w1]\n                             (into #{} (filter (fn[w2]\n                                                 (= (sort w1) (sort w2))) coll)))\n                           coll))))","user":"52bc6cb2e4b07a9af57922f5"},{"problem":77,"code":"(fn anagram [s]\n  (let [matches (->> (map frequencies s)\n                     (group-by identity)\n                     (filter (fn [[k v]] (> (count v) 1)))\n                     )]\n    (into #{} (map #(into #{} (filter (fn [w] (= (frequencies w) (key %))) s)) matches))\n    )\n  )\n\n;; 1067's solution as well as 113213's solution are very impressive:\n;; #(->> (group-by sort %)\n;;      (vals)\n;;      (map set)\n;;      (filter (comp seq rest))\n;;      (set))\n\n;;#(->> (group-by sort %)\n;;  vals\n;;  (filter next)\n;;  (map set)\n;;  set)","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [vec]\n   (set (remove #(= (count %) 1) (map #(set (last %)) (group-by #(set (seq %)) vec)))))","problem":77,"user":"4eb02674535d7eef30807338"},{"problem":77,"code":"(fn [c] (set (map set (remove #(= 1 (count %)) (vals (group-by sort c))))))","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn [words]\n  (->> (group-by (comp (partial apply str) sort) words)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","problem":77,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [s] (into #{} (filter #(> (count %) 1) (map #(into #{} %) (vals (group-by #(apply sorted-set %) s))))))","problem":77,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"#(reduce (fn [s it] (let [t (set (filter (fn [i] (= (sort it) (sort i))) %1))] (if (> (count t) 1) (conj s t) s))) #{} %1)","problem":77,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":77,"code":"(fn anagrams [coll]\n  (let [groups (remove #(= (count (val %)) 1) (group-by frequencies coll))\n        sets (map #(into #{} %) (vals groups))]\n    (into #{} sets)))","user":"542c026ae4b0dad94371f29a"},{"problem":77,"code":"(fn [x]\n (letfn [(wd [a] (set (re-seq #\"[a-z]\" a)))]\n \t(loop [init #{} coll (set x)]\n        (if (empty? coll) init\n             (let [anag (filter #(= (wd %) (wd (first coll))) coll)]\n               \t(if (= 1 (count anag)) (recur init (set (rest coll)))\n           (recur (conj init (set anag)) (set (reduce disj coll anag))\n            ))\n                )\n         )\n     )\n  )\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [words] (loop [l words\n       result #{}]\n  (if (seq l)\n    (let [parts (group-by #(= (into #{} (seq (first l))) (into #{} (seq %))) (rest l))]\n      (recur (get parts false)\n             (if-let [group (get parts true)] (conj result (into #{} (conj group (first l)))) result)))\n    result)))","problem":77,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":77,"code":"(fn g [word-list]\n\t((fn filter-short [anagram-set]\n\t(into (hash-set) (filter #(> (count %) 1) anagram-set))) ((fn f [word-list]\n\t(if (empty? word-list)\n\t\tnil\n\t\t(conj (f ((fn not-anagrams [word-list]\n\t(filter (partial (complement (fn anagram? [w1 w2]\n\t(= (sort (seq (clojure.string/lower-case w1))) (sort (seq (clojure.string/lower-case w2)))))\n) (first word-list)) word-list)) word-list)) ((fn anagrams [word-list]\n\t(into (hash-set) (filter (partial (fn anagram? [w1 w2]\n\t(= (sort (seq (clojure.string/lower-case w1))) (sort (seq (clojure.string/lower-case w2)))))\n (first word-list)) word-list)))\n word-list)))) word-list)))","user":"563d12f9e4b0bfe05bf11845"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by set coll)\n    vals\n    (filter #(> (count %) 1))\n    (map #(apply hash-set %))\n    (apply hash-set)))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn anag\n  [words]\n  (set (remove #(> 2 (count %))\n          (reduce #(into %1\n                         [((fn [a b]\n                               (set (filter (fn [x] (and\n                                                     (= (count (set x))\n                                                        (count (set b))\n                                                        (count (clojure.set/intersection (set b) (set x))))))\n                                            a)))\n                                            words %2)]) #{} words))))","problem":77,"user":"4daeabf6edd6309eace4d15c"},{"problem":77,"code":"(fn [v]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort v))))))","user":"54b95f3de4b0ed20f4ff6eab"},{"code":"(fn [words]\n  (let [hash-key #(apply str (sort (.toLowerCase %1)))\n        groups (vals (group-by hash-key words))]\n    (set (map set (filter #(> (count %) 1) groups)))))","problem":77,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [words] (set (map set (remove #(< (count %) 2) (vals (group-by #(apply str (sort %)) words))))))","problem":77,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"(fn [l] (set\n         (map set\n              (filter\n               #(not= (count %) 1)\n               (for [x l]\n                  (for [y l\n                        :when (and\n                               (clojure.set/subset? (set y) (set x))\n                               (= (count y) (count x)))]\n                    y))))))","problem":77,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn anagrams [words]  (let [sortw (fn [word] (str (sort word)))        res (reduce (fn [res word]                      (update-in res [(sortw word)] #((fnil conj #{}) % word)))                    {} words)]    (set (filter #(> (count %) 1) (vals res)))))","problem":77,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn anag [strs]\n    (set (map set (filter #(> (count %) 1) (vals (group-by sort strs))))))","problem":77,"user":"4fa9e9c6e4b081705acca1e9"},{"code":"(fn [x] (->> x (group-by sort) vals (map set) (filter #(< 1 (count %))) set))","problem":77,"user":"534bde26e4b084c2834f4a81"},{"code":"(fn [s] (set (map set (filter #(< 1 (count %)) (vals (group-by set s))))))","problem":77,"user":"4eaede1f535d7eef30807329"},{"problem":77,"code":"(fn [k]\n (->> \n  k\n  (group-by sort)\n  vals\n  (filter #(> (count %) 1))\n  (map set)\n  set\n ))","user":"5412646de4b01498b1a719d4"},{"code":"(fn [words]\n    (->> words\n         (group-by sort)\n         vals\n         (map set)\n         (filter #(< 1 (count %)))\n         set))","problem":77,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn pr77 [coll]\n  (->>\n    (group-by (comp frequencies seq) coll)\n    (vals )\n    (filter #(< 1 (count %)) )\n    (map set )\n    (set)\n    ))","problem":77,"user":"51696ee7e4b03f62cda68ce8"},{"problem":77,"code":"(fn [words]\n    (letfn [(set-string [w] (apply sorted-set w))\n           (anagram [w s] (into #{w} (filter #(= (set-string %) (set-string w)) s)))]    \n       (into #{} (filter #(> (count %) 1) (map #(anagram % words) words)))\n    )   \n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"#(set (filter (fn [x] (> (count x) 1))\n              (map set (vals (group-by sort %)))))","problem":77,"user":"53034738e4b0d8b024fd373e"},{"code":"(fn [v]\r\n  (set\r\n    (map set\r\n      (remove #(= 1 (count %)) (vals (group-by #(apply str (sort %)) v))))))","problem":77,"user":"50843a4ae4b0c98812d0788b"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by set)\n       (filter #(> (count (second %)) 1))\n       (map #(let [[k v] %] (set v)))\n       set))","user":"554b8572e4b0a04f79299589"},{"code":"(fn group-anagrams [v]\n  (let [anagram? (fn [s1 s2] (= (sort (seq s1)) (sort (seq s2))))]\n    (loop [v_ v acc #{}]\n      (cond\n        (empty? v_) acc\n        :else (let [anagrams (filter #(anagram? (first v_) %) v_)]\n                (if (< 1 (count anagrams))\n                    (recur (filter #(not (anagram? (first v_) %)) v_) \n                           (conj acc  (set anagrams)))\n                    (recur (rest v_) acc)))))))","problem":77,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":77,"code":"(fn [x](set(map set(filter next (vals(group-by #(set(seq %))x))))))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn [temp]\n  (->>(group-by frequencies temp)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      set)\n  )","problem":77,"user":"53862316e4b06839e8705f0e"},{"problem":77,"code":"(fn [lst]\n  (into #{} (filter #(> (count %) 1) (for [x lst]\n    (into #{}\n      (for [y lst]\n        (if (= (sort x) (sort y))\n          y\n          x\n        )\n      )\n    )\n  )))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":77,"code":"(fn [strs]\n  (->> strs \n       (map #(vector % (frequencies %)))\n       (group-by second)\n       (vals)\n       (filter #(> (count %) 1))\n       (map (fn [c] (reduce #(conj %1 (first %2)) #{} c)))\n       (into #{})\n    ))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn [words]\n  (let [anagram? #(= (sort %1) (sort %2))]\n    (loop [result #{}\n           words (set words)]\n      (if (seq words)\n        (let [matches (filter (partial anagram? (first words)) words)]\n          (recur (if (>= (count matches) 2)\n                   (conj result (set matches))\n                   result)\n                 (apply disj words matches)))\n        result))))","problem":77,"user":"525431dfe4b0541d1855b970"},{"problem":77,"code":"(fn [x] (into #{} (filter #(< 1 (count  %))(map set(vals(group-by frequencies x))))))","user":"566a3a26e4b0a866af689699"},{"problem":77,"code":"(fn [v]\n    (letfn [(ana? [a b]\n              (let [a (sort compare (seq a))\n                    b (sort compare (seq b))]\n                (= a b)))]\n      (into #{} (filter\n                 #(> (count %) 1)\n                 (map (fn [s]\n                        (into #{} (filter #(ana? s %) v)))\n                      v)))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":77,"code":"(fn [vec]\n  (loop [set #{} d [] s vec c 0]\n    (if (empty? s) (if (empty? d) set \n                     (if (> (count d) 1) (conj set (into #{} d))\n                       set))\n      (if (empty? d) (recur set [(first s)] (rest s) 0)\n        (if (= c (count s)) (if (> (count d) 1) (recur (conj set (into #{} d)) [] s 0)\n                              (recur set [] s 0))\n          (if (= (sort-by identity (clojure.string/split (first d) #\"\")) (sort-by identity (clojure.string/split (nth s c) #\"\"))) (recur set (concat d [(nth s c)]) (concat (take c s) (nthrest s (+ c 1))) c)\n            (recur set d s (inc c))))))))","user":"558378dce4b05c286339e115"},{"code":"(fn [words]\n  (let [hash-key #(apply str (sort (.toLowerCase %)))\n        groups (vals (group-by hash-key words))]\n    (set (map set (filter #(> (count %) 1) groups)))))","problem":77,"user":"52d02380e4b07d0d72b273b7"},{"problem":77,"code":";(fn [v]\n;  (set (map set\n;            (filter #(> (count %) 1)\n;                    (let [anagram? (fn [w1 w2]\n;                                     (= (sort w1) (sort w2)))\n;                          sv (sort-by #(apply str (sort %)) v)]\n;                      (reduce #(if \n;                                 (anagram? (first (last %1)) %2)\n;                                 (conj (vec (drop-last %1)) (conj (last %1) %2))\n;                                 (conj %1 [%2]))\n;                              [[(first sv)]] \n;                              (rest sv)))))))\n\n(fn [v]\n  (set (map set (remove #(< (count %) 2) (vals (group-by sort v))))))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":77,"code":"(fn [c]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n                (vals (group-by #(sort %) c))))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":77,"code":"#(letfn [(chars-map [s]\n             (reduce (fn [acc char]\n                       (update-in acc [char] (fnil inc 0)))\n                     {}\n                     s))]\n    (->> (set %)\n         (reduce (fn [acc item]\n               (let [item-chars (chars-map item)]\n                 (update-in acc [item-chars]\n                            (fnil (fn [old] (conj old item))\n                                  #{item}))))\n             {})\n         vals\n         (filter (comp (partial < 1) count))\n         set))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":77,"code":"(fn anagram-finder\n  [word-vector]\n  (->> (reduce #(update-in %1 [(into #{} %2)] (fn [myset] (conj myset %2))) (cons {} word-vector))\n      ;; associate hash-sets of chars with a sets of their corresponding words in a map\n      vals\n      (map #(into #{} %))\n      (filter #(> (count %) 1))\n      (into #{})))","user":"55a9e0fee4b0988bba2ad945"},{"code":"#(set (map set (filter second (vals (group-by sort %)))))","problem":77,"user":"4efb2fd7535dced4c769f274"},{"problem":77,"code":"(fn [words] \n  (->> words\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set\n       ))","user":"5c17467fe4b01240ff5671df"},{"problem":77,"code":"(fn [ls] (loop [w (first ls) s (rest ls) res #{}]\n             (if (empty? s) res\n                 (recur (first s) (rest s)\n                        (let [v (filter #(= (sort w) (sort %)) (rest s))]\n                          (if (empty? v) res\n                              (conj res (set (conj v w)))))))))","user":"5da71eaee4b000c986472c15"},{"problem":77,"code":"(fn [s]\n  (let [xs (filter #(> (count %) 1) (vals (group-by sort s)))]\n    (into #{} (map #(set %) xs))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [x] (->> x\n               (group-by sort)\n               (vals)\n               (map set)\n               (filter #(> (count %) 1))\n               (set)))","problem":77,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [c]\n  (set (filter #(> (count %) 1)\n               (map set\n                    (for [i c]\n                      (filter #(= (set i) (set %)) c))))))","problem":77,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [ws]\n  (set (map set (remove #(= 1 (count %)) (vals (group-by #(apply str (sort (seq %))) ws)))))\n)","problem":77,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [x]\n  (set (map set (for [f (set (map frequencies x))\n        :let [s (filter #(= f (frequencies %)) x)]\n        :when (> (count s) 1)]\n    s))))","problem":77,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":77,"code":"(fn [words]\n    (letfn\n      [\n        (is-anagram [w1 w2]\n          (=\n            (sort w1)\n            (sort w2)\n          )\n        )\n      ]\n      (set\n        (filter\n          (fn [ws]\n            (> (count ws) 1)\n          )\n          (map\n            (fn [w1]\n              (set\n                (filter\n                  (fn [w2]\n                    (is-anagram w1 w2)\n                  )\n                  words\n                )\n              )\n            )\n            words\n          )\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":77,"code":"#(->> % (group-by sort) vals (map set) (filter (fn [s] (> (count s) 1))) set)","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":77,"code":"(fn anagram-finder\n  [coll]\n  (into #{} \n        (remove #(= (count %) 1) \n                (map #(into #{} %) (vals (group-by sort coll))))))","user":"60396c95e4b0d5df2af222f4"},{"problem":77,"code":"(fn anagram-finder\n  [xs]\n  (into #{}\n        (map (partial into #{})\n             (vals (filter #(< 1 (count (val %))) (group-by sort xs))))))","user":"506f0968e4b09350ab4199f5"},{"problem":77,"code":"(fn [data]\n(reduce \n       #(if (> (count (second %2)) 1)\n             (merge %1 (into #{} (second %2)))\n             %1)\n           #{}\n           (group-by #(clojure.string/join \"\" (sort %)) data)))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort words))))))","problem":77,"user":"50e8a340e4b0ebbe794eb7ed"},{"problem":77,"code":"#(->> %\n  (group-by sort)\n  vals\n  (remove (comp (partial = 1) count))\n  (map set)\n  set)","user":"4fceda40e4b03432b189f407"},{"problem":77,"code":"(fn [words]\n  (letfn [(norm [word] (-> (.split word \"\")\n                           sort\n                           vec))]\n    (let [groups (group-by norm words)\n          sets-of-anagrams (for [[k ws] groups \n                                        :when (< 1 (count ws))]\n                                (set ws))]\n      (set sets-of-anagrams))))","user":"5519a6dde4b00ace28fe6e2f"},{"code":"(fn [ws] (reduce #(conj % (set (second %2))) #{} (filter #(> (count (second %)) 1) (group-by sort ws))))","problem":77,"user":"4fd3bd14e4b0d4de60cee363"},{"code":"(fn [words]\n  (->> (reduce (fn [m word]\n    (let [k (sort (re-seq #\".\" word))]\n      (assoc m k (conj (get m k #{}) word)))) {} words)\n    (vals)\n    (filter #(> (count %) 1))\n    (set)))","problem":77,"user":"4e521cef535d302ef430da6d"},{"code":"(fn [s] (set (map set \n                        (filter #(> (count %) 1) \n                                (vals (group-by #(set %) s) ) ))))","problem":77,"user":"4ee7d177535d93acb0a6686f"},{"problem":77,"code":"(fn [ws] (into #{} (map set (filter #(> (count %) 1) (vals (group-by #(into #{} %) ws))))))","user":"54c641f8e4b045293a27f628"},{"problem":77,"code":"(fn\n  [words]\n  (->> words\n       (group-by #(into {} (group-by identity %)))\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn anagrams [words]\n  ;; group by word length, then group by sorted letters\n  (set\n    (filter #(> (count %) 1)\n      (map set\n        (mapcat #(vals %)\n          (map (fn [sameLen] (group-by #(sort %) sameLen))\n            (vals (group-by count words)))))))\n  )","problem":77,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn [coll]\n  (into #{} \n    (map #(into #{} %)\n      (filter #(not= (count %) 1) \n         (vals (group-by (fn [s] (sort (seq s))) coll))))))","problem":77,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by sort coll)\n       vals\n       (filter (comp #(< 1 %) count))\n       (map set)\n       set))","user":"541b1f25e4b01498b1a71a63"},{"problem":77,"code":"(fn [coll] \n  (set \n   (map set \n    (filter next \n     (vals (group-by sort \n                     coll))))))","user":"55d2dd27e4b0e31453f64a5b"},{"code":"(fn [c]\n   (set (map set\n              (filter #(< 1 (count %))\n                      (vals (group-by sort c))))))","problem":77,"user":"52c25645e4b07a9af579237d"},{"problem":77,"code":"(fn[words]\n        (let [pairs\n              (fn [a]\n                (for [xa a xb a \n                      :let [sxa (sort xa)\n                            sxb (sort xb)]\n                      :when (and (not (= xa xb))\n                                 (= sxa sxb))] [sxa [xa xb]]))\n              ->map\n              (fn[coll]\n                (loop [[head & more] coll\n                       map {}]\n                  (if (nil? head)\n                    map\n                    (let [[key [fst snd]] head]\n                      (recur more\n                             (assoc map key (conj (get map key #{}) fst snd)))))))]\n          \n          (set (vals (->map (pairs words))))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"#(->> %\n      (group-by sort)\n      vals\n      (filter (fn [v] (> (count v) 1)))\n      (map set)\n      set)","problem":77,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":77,"code":"(fn [ws] (set (map set (filter #(< 1 (count %)) (vals (group-by set ws))))))","user":"56ae214ce4b03c432f18735a"},{"code":"(fn [c]\n  (set\n    (map set\n      (filter #(second %)\n        (vals (group-by sort c))))))","problem":77,"user":"515e8ce2e4b049add99a053d"},{"code":"#(set\n    (map set\n         (remove (fn [c] (= 1 (count c)))\n                 (vals (group-by frequencies %)))))","problem":77,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn [coll] (into #{} (filter #(> (count %) 1) (map set (vals (group-by #(sort %) coll))))))","problem":77,"user":"528b08efe4b0239c8a67ae8a"},{"problem":77,"code":"(fn [coll]\n  (let [word-to-map-fn #(reduce (fn [a v]\n                               (if (contains? a v)\n                                 (assoc a v (inc (a v)))\n                                 (assoc a v 1)\n                                 )\n\n                               ) {} %)\n        wordmap-to-wordset (reduce (fn [a v] \n                                     (let [word-to-map (word-to-map-fn v)]\n                                       (if (contains? a word-to-map)\n                                         (assoc a word-to-map (conj (a word-to-map) v))\n                                         (assoc a word-to-map #{v})\n                                         \n                                         )\n                                       ))\n                                      {} coll)   \n       ]\n    (reduce (fn [a v] \n              (if (< 1 (count (second v)))\n              (conj a (second v))\n              a\n              )) #{} wordmap-to-wordset)\n  \n    )\n  \n  )","user":"53c73e8ae4b00fb29b2212a5"},{"code":"#(set (map set (filter (comp seq rest) (vals (group-by sort %)))))","problem":77,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn [coll]\n    (set (filter #(> (count %) 1)   (map set (vals (group-by sort coll)))))\n    )","problem":77,"user":"4e78c208535db95036265722"},{"code":"(fn [words]\n  (let [m (group-by count words)\n        m (mapcat #(group-by set (second %)) m)\n        l (filter #(> (count %) 1) (vals m))]\n    (into #{} (map set l))))","problem":77,"user":"50464831e4b011c5dfee771f"},{"problem":77,"code":"(fn anagram-finder [v]\n  (->> v\n       (map (juxt identity sort))\n       (group-by second)\n       (map (fn [[k v]] (set (map first v))))\n       (remove #(< (count %) 2))\n       set))","user":"5776f39de4b0979f89651643"},{"code":"#(reduce (fn [y z] (if (> (count z) 1) (conj y (apply hash-set z)) y)) #{} (vals (group-by (fn [x] (sort (seq x))) %)))","problem":77,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":77,"code":"(fn [d]\n  (->>\n    (group-by #(sort %) d)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    (into #{})))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":77,"code":"(fn anagram [words]\n          (let [anagram-sig (fn [word]\n                              (clojure.string/join (sort word)))]\n            (into #{} (map set (filter #(> (count %) 1) (vals (group-by anagram-sig words)))))))","user":"575086e7e4b02ea114799276"},{"problem":77,"code":"(fn [v]\n  (->> v\n       (group-by sort)\n       (map #(->> % second (into #{})))\n       (filter #(> (count %) 1))\n       (into #{})))","user":"542c22bde4b0dad94371f29e"},{"problem":77,"code":";(fn [x] (set (filter next (map set (vals (group-by sort x))))))\n\n#(->> (group-by sort %)\n      (vals)\n      (map set)\n      (filter next)\n      (set))","user":"5de12192e4b0948ae9d9aded"},{"problem":77,"code":"(fn [words] \n    (->> words\n         (map #(into [] (list %, (group-by identity (seq %)))))\n         (into {})\n         (group-by val)\n         (vals)\n         (reduce #(cons (map (fn [p] (first p)) %2) %1) #{})\n         (filter #(> (count %) 1))\n         (map set)\n         (into #{})\n         )\n    )","user":"559a9a3de4b066d22e731f45"},{"problem":77,"code":"(fn [words]\n  (let [sorted-letters #(str (sort (seq %)))]\n    (set \n      (map set \n          (filter #(> (count %) 1) (partition-by sorted-letters (sort-by sorted-letters words)))))))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [s]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort s))))))","problem":77,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":77,"code":"(fn [c] \n  (->> c\n       (group-by #(set %))\n       (map last)\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn [v]\r\n\r\n (set \r\n(remove\r\n (fn [s]\r\n   ( = 1 (count s)))\r\n\r\n(reduce \r\n\r\n  ( fn [ans s]\r\n\r\n   (conj ans  \r\n    (set\r\n      \t(filter\r\n\t\t\t( fn [s1]\r\n  \t\t\t\t(=\r\n\t\t\t\t\t((fn [str] (reduce #(conj % {%2 (if (nil? (% %2)) 1 (+ 1 (% %2)))}) {} str)) s1)\r\n\t\t\t\t\t((fn [str] (reduce #(conj % {%2 (if (nil? (% %2)) 1 (+ 1 (% %2)))}) {} str)) s)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\r\n \t\t\tv\r\n\t\t)\r\n\t)\r\n  )\r\n  )\r\n\r\n\r\n\r\n#{}\r\n\r\nv\r\n)\r\n )\r\n\r\n)\r\n )","problem":77,"user":"505e3b57e4b011187b721f39"},{"code":"(fn [l] \n  (set\n  (map set\n  (vals\n  (filter #(< 1 (count (second %)))\n  (reduce #(let [s (sort %2)] (assoc % s (cons %2 (% s #{})))) {} l))))))","problem":77,"user":"4fa30027e4b081705acca187"},{"problem":77,"code":"(let [take1 (fn [p]\n              (map (fn [[pre post]]\n                     [(first post) (concat pre (rest post))])\n                   (map (fn [i] (split-at i p)) (range (count p)))))\n      perm (fn perm [p]\n             (if (empty? p)\n               '(())\n               (reduce #(lazy-cat %1 %2) '()\n                       (map (fn [[h q]]\n                              (map (partial cons h) (perm q)))\n                            (take1 p)))))\n      str-perm (fn [s] (set (map (fn [cls] (apply str cls)) (perm s))))\n      potential-anagrams (fn [s]\n                           (reduce\n                            (fn [r st]\n                              (if (some #(% st) r)\n                                r\n                                (conj r (str-perm st))))\n                            #{}\n                            s))]\n  (fn [s] (let [s (set s)] ((comp set filter)\n                            (comp not (partial = 1) count)\n                            (map\n                             (fn [pas]\n                               (clojure.set/intersection pas s))\n                             (potential-anagrams s))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"(fn [ls] \r\n   (->> ls\r\n        (group-by sort)\r\n        (filter \r\n          (fn [[k v]] (< 1 (count v))))\r\n        (vals)\r\n        (map set) \r\n        (set)\r\n                ))","problem":77,"user":"502a9fdee4b095a7adb898b4"},{"problem":77,"code":"(fn write [row]\n  (set (remove #(< (count %) 2) \n               (map set (vals (group-by sort row ))))))","user":"570377c1e4b08d47c97781f1"},{"problem":77,"code":"(fn anagram [xcoll]\n  (set (filter #(> (count %1) 1)\n               (vals (loop [coll xcoll\n                            newmap {}]\n                       (if (empty? coll)\n                         newmap\n                         (recur (next coll) (let [element (first coll)\n                                                  mapkey (clojure.string/join (sort element))\n                                                  mapval (newmap mapkey)]\n                                              (if (contains? newmap mapkey)\n                                                (assoc newmap mapkey (conj mapval element))\n                                                (assoc newmap mapkey #{element}))))))))))","user":"56038f34e4b04bb52996e1bc"},{"problem":77,"code":"(fn [a-vec]\n  (let [root #(apply str (sort %))]\n    (set\n      (filter #(> (count %) 1)\n        (vals\n          (reduce\n            #(assoc %1 (root %2) (conj (%1 (root %2) #{}) %2))\n              {}\n              a-vec))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn [col]\n  (let [is-anagram #(= (sort (vec %1)) (sort (vec %2)))\n        f (fn [remaining m]\n            (if (seq remaining)\n              (let [first-item (first remaining)\n                    mkey (sort (vec first-item))\n                    mval (get m mkey)\n                    to-merge (if (seq mval)\n                               {mkey (conj mval first-item)}\n                               {mkey #{first-item}})\n                    new-map (merge m to-merge)\n                    ]\n                (recur (rest remaining) new-map)\n                ) ; let\n              (map #(second %) \n                   (filter #(> (count (second %))\n                               1)\n                           m) ; filter\n               ) ; map\n              ) ; if\n            ) ; fn\n        ]\n    (set (f col {}))\n    ) ; let\n) ; fn","problem":77,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":77,"code":";(fn my-anagram-finder [coll]\n;  (->> coll\n;       (group-by #(apply hash-set %))\n;       (vals)\n;       (filter #(> (count %) 1))\n;       (map #(apply hash-set %))\n;       (apply hash-set)))\n(fn my-anagram-finder [coll]\n  (->> coll\n       (group-by set)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":77,"code":"(fn [xs]\n        (->> xs\n             (group-by sort)\n             vals\n             (filter #(> (count %) 1))\n             (map set)\n             set))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [x] (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by sort x))))))","problem":77,"user":"4f045946535dcb61093f6bba"},{"problem":77,"code":"(fn anagram [x]\n  (into #{} (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"532c9dc9e4b019098a6f8b30"},{"problem":77,"code":"(fn anagrams [words]\n  (into #{} \n        (filter #(< 1 (count %)) \n          (vals (reduce (fn [anagrams word]\n            (let [letters (sort (vec word))]\n              (if (get anagrams letters)\n                (assoc anagrams letters (conj (get anagrams letters) word))\n                (assoc anagrams letters (hash-set word)))))\n          {}\n          words)))))","user":"5235493ee4b05e80434a5064"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n      (group-by set)\n      (map #(set (% 1)))\n      (filter #(> (count %) 1))\n      set)\n  )","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"(fn [l]\n  (->>\n    l\n    (group-by set)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    set))","problem":77,"user":"50a83315e4b054305ba5a830"},{"problem":77,"code":"(fn [coll]\n  (set (map (comp set val)\n            (remove (comp #{1} count val)\n                    (group-by frequencies coll)))))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"(fn ana [words]\n  (set (map set (filter #(> (count %1) 1) (vals (group-by sort words))))))","problem":77,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":77,"code":"#(->> %\n      (group-by sort)\n      (vals)\n      (filter next)\n      (map set)\n      (set))","user":"559b2ad1e4b066d22e731f4e"},{"problem":77,"code":"(fn\n [words]\n (set\n  (map\n   set\n   (filter\n    next\n    (vals (group-by set words))))))","user":"572722c4e4b0c5bde472c134"},{"problem":77,"code":"(fn [words]\n  (letfn [(is-anagrams? [& words]\n            (apply = (map (comp sort seq) words)))\n          (get-anagrams [target, words]\n                        (filter (partial is-anagrams? target) words))\n          (make-anagrams [words]\n                         (let [anagrams (map #(get-anagrams % words) words)\n                               distincts (distinct (map set anagrams))]\n                           (filter #(> (count %) 1) distincts)))]\n    (set (make-anagrams words))))","user":"5c13da47e4b01240ff5671a6"},{"problem":77,"code":"(fn [s]\n    (set (filter #(> (count %) 1) (map #(set (last %)) (reduce #(let [key (group-by identity %2)]\n               (assoc-in %1 [key] (conj (get %1 key) %2)))\n            {}\n            s)))))","user":"586b6753e4b01531a375e956"},{"code":"(fn [words]\n  (let [grouped (group-by sort words)\n        filtered\n        (filter\n         (fn [[k v]] (> (count v) 1))\n         grouped)\n        ]\n    (set (->> filtered\n              vals\n         \t\t\t(map set)))))","problem":77,"user":"4f28c979e4b0d6649770a01a"},{"problem":77,"code":"(fn [coll] (->> coll\n                (group-by #(sort %))\n                vals\n                (filter #(> (count %) 1))\n                (map set)\n                set))","user":"5259451ce4b0cb4875a45cd7"},{"code":"(fn [wv] (let [wg (group-by #(sort (seq %)) wv)]\n           (set (map set (filter #(> (count %) 1) (vals wg))))))","problem":77,"user":"4efd8b67535de96065cf5085"},{"problem":77,"code":"(fn [xs]\n  (into #{} (filter #(> (count %1) 1) (map #(into #{} %) (vals (group-by sort xs))))))","user":"546a6c7ce4b00cfc9eacc154"},{"code":"(fn anag  [s] (set (map set (filter #(> (count %) 1) (vals (group-by sort s))))))","problem":77,"user":"5018ed15e4b011a2e0bf6412"},{"problem":77,"code":"(fn [x]\n  (set (filter #(>= (count %) 2) (map set (vals (group-by #(set %) x))))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":77,"code":"(fn [c]\n (->> c\n    (group-by set)\n    (remove #(< (count (val %)) 2))\n    (map val)\n    (map set)\n    (into #{})))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":77,"code":"(fn [words]\n  (loop [[word & restwords :as in] words out {}]\n    (let [k (apply str (sort word))]\n      (cond (empty? in) (into #{} (filter #(> (count %) 1) (into #{} (for [[k v] out] v))))\n            (contains? out k) (recur restwords (conj out [k (conj (get out k) word)]))\n            :else (recur restwords (conj out [k #{word}]))))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn [words]\r\n  (set\r\n (filter #(> (count %) 1)\r\n  (map set\r\n   (vals\r\n  (reduce\r\n    (fn [acc w]\r\n      (update-in acc [(sort w)] conj w))\r\n    {}\r\n    words))))))","problem":77,"user":"4dbad895535d1e037afb21ae"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5e0e14bde4b099d064962fa3"},{"problem":77,"code":"(fn [s]\n  (->> s (group-by set) vals (filter #(< 1 (count %))) (map set) set))","user":"565a3e25e4b068f2fe63dbfb"},{"problem":77,"code":"(fn [words]\n  (->>\n   (group-by #(group-by identity %) words)\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)))","user":"54f14aa6e4b024c67c0cf8af"},{"code":"(fn[a]\r\n  (set (map set\r\n    (filter #(> (count %) 1)\r\n      (vals (group-by sort a))))))","problem":77,"user":"4dd66da7535d2dad7130b5c8"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       (filter #(< 1 (count (second %))))\n       (map second)\n       (map set)\n       (set)))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":77,"code":"(fn [coll]\n    (->> coll\n         (group-by sort)\n         (map val)\n         (filter #(> (count %) 1))\n         (map set)\n         (into #{})))","user":"55e6c3f5e4b050e68259b48c"},{"problem":77,"code":"(fn [foo]\n     (set (map\n            (fn [bar] (set (second bar)))\n            (filter\n              #(> (count (second %)) 1)\n              (group-by set foo)))))","user":"5908882de4b047aa04b19979"},{"problem":77,"code":"(fn [l] (set (map set (filter #(> (count %) 1) (map second (group-by #(set %) l))))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"code":"(fn [c]\n  (into #{}\n    (->> c\n      (map sort)\n      (frequencies)\n      (filter #(> (val %) 1))\n      (map first)\n      (map #(set (filter (fn [x] (= % (sort x))) c))))))","problem":77,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":77,"code":"(fn [coll]\n          (letfn [(sort-letters [word] (sort word))]\n            (loop [coll coll\n                   result {}]\n              (if (empty? coll)\n                (set (filter #(>= (count %) 2) (vals result)))\n                (recur (rest coll)\n                       (let [key-word (sort-letters (first coll))]\n                         (assoc result key-word (into #{(first coll)} (result key-word)))))))))","user":"531c6e72e4b08068f379eda0"},{"problem":77,"code":"(fn [words]\n  (set\n   (for [[k g] (group-by sort words)\n         :when (> (count g) 1)]\n     (set g))))","user":"54b04708e4b09f271ff37d11"},{"code":"(fn [words]\n   (set (map set (filter #(> (count %) 1) (vals (group-by sort words))))))","problem":77,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":77,"code":"(fn anagrams [words]\n  (let [to-bag (fn [word]\n                 (reduce\n                  (fn [bag item]\n                    (assoc bag item (inc (bag item 0))))\n                  {}\n                  word))]\n    (into #{} (filter #(> (count %) 1) (vals (reduce (fn [grams word]\n              (let [bag (to-bag word)]\n                (assoc grams bag (conj (grams bag #{}) word))))\n            {}\n            words))))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (reduce (fn [anagrams word]\n                 (let [k (sort word)]\n                   (update-in anagrams [k] clojure.set/union #{word})))\n               {})\n       vals\n       (filter #(> (count %) 1))\n       (reduce conj #{})))","user":"4f7ab8c7e4b06e829148e19c"},{"problem":77,"code":"(fn [c]\n  (set (filter #(> (count %) 1) (vals \n               ((fn f [[a & b] r]\n                  (if (= a nil) r\n                    (let [k (sort a)]\n                      (f b (assoc r k (conj (get r k #{}) a)))))) c {})))))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn anagram [coll]\n  (set (map set\n  (filter \n    #(< 1 (count %)) \n    (vals (group-by #(-> % seq set) coll))))))","problem":77,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":77,"code":"(fn anagrams\n  [lst]\n  (loop [rlst lst\n         acc {}]\n    (if (seq rlst)\n      (let [k (->> rlst first sort (apply str))]\n        (recur (rest rlst) (assoc acc\n                                  k\n                                  (conj (get acc k #{}) (first rlst)))))\n      (set (filter #(> (count %) 1) (vals acc))))))","user":"5ce6f93be4b0a17bb84e2b99"},{"code":"(fn [coll]\n  (let [keyfn #(apply str (sort %))]\n    (->> coll\n      (sort-by keyfn)\n      (partition-by keyfn)\n      (filter #(< 1 (count %)))\n      (map set)\n      (set))))","problem":77,"user":"4daf36c2edd6309eace4d175"},{"problem":77,"code":"(let [anagrams (fn  [y] (set    (cons (first y)(for [x (rest y) :when (= (set (first y)) (set x))] x))))]\n\n(fn as [y] (set (filter #(> (count %) 1)(loop [ag #{} x (set y)] (if (empty? x) ag (recur (cons (anagrams x) ag) (clojure.set/difference x (anagrams x)))))))\n))","user":"6076adb2e4b069485764de60"},{"problem":77,"code":"(fn [coll]\n    (set (->> (for [a coll\n                    b coll\n                    :when (not= a b)]\n                [a b])\n              (filter (fn [[a b]] (= (sort a)\n                                     (sort b))))\n              (map first)\n              (group-by #(sort %))\n              (vals)\n              (map set))))","user":"532f8569e4b019098a6f8b4f"},{"problem":77,"code":"(fn \n  [words]\n  (letfn [(permute [s]\n            (if (= (count s) 1)\n              [s]\n              (flatten \n                (for [seed (permute (subs s 1))]\n                  (for [i (range (count s))]\n                    (apply str (subs seed 0 i) (first s) (subs seed i)))))))]\n\n    (let [super-set (map (comp set permute) words)]\n      (println super-set)\n      (set (filter #(> (count %) 1) (map (fn [e] (set (filter e words))) super-set))))))","user":"4fee04a0e4b0678c553fc308"},{"problem":77,"code":"(fn [initial]\n    (letfn [(anagram? [word n] (= (frequencies word) (frequencies n)))\n            (only-anagrams [coll] (filter (fn [set] (> (count set) 1)) coll))\n            (generate-equivalences [coll] (map (fn [word] (filter #(anagram? word %) coll)) coll))]\n      (->> initial\n           generate-equivalences\n           only-anagrams\n           (map #(into #{} %))\n           (into #{}))))","user":"56375106e4b0bfe05bf117d3"},{"code":"#(set (map set (filter second (vals (group-by set %)))))","problem":77,"user":"5065faf9e4b0313a384e5645"},{"problem":77,"code":"(fn[x]\n       (set(filter #(< 1 (count %)) (map(fn[y](set(filter #(=(sort(seq %))(sort(seq y)))x)))x))))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":77,"code":"(fn [a]\n  (->> (vals (group-by #(sort (seq %)) a)) \n       (map set)\n       (filter #(< 1 (count %)))\n       (into #{})))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [words]\n  (->> (group-by frequencies words)\n       (vals ,)\n       (filter #(< 1 (count %)))\n       (map set ,)\n       (set ,)))","problem":77,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [x] (set (map set (filter #(> (count %) 1) (vals (group-by set x))))))","problem":77,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [x]\n  (set (filter #(< 1 (count %))\n  (map set (vals\n   (reduce (fn [a b]\n             (let [p (sort (seq b))]\n               (conj a {p (cons b (a p))})))\n           {} x))))))","problem":77,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":77,"code":"(fn anagrams [coll] \n  (->> (group-by #(group-by identity %) coll)\n       (map #(set (% 1)))\n       (filter #(> (count %) 1))\n       (set)))","user":"53f35c34e4b0742d9025b0f4"},{"problem":77,"code":"(fn anagram-group-by [ws]\n  (letfn [(counts [w] (apply merge-with + (map (fn [c] {c 1}) w)))]\n    (->> ws\n      (group-by counts)\n      (map (comp set second))\n      (filter #(> (count %) 1))\n      (set))))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":77,"code":"(fn [x] (set (map set (remove #(< (count %) 2) (vals (group-by sort x))))))","user":"549c3e0ce4b0f3d1d8e70f87"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (set (map set (filter #(> (count %) 1)\n                        (vals\n                         (group-by\n                          (fn [ref]\n                            (filter\n                             #(= % (sort (reverse ref)))\n                             (map #(sort (reverse %)) coll)))\n                          coll))))))","user":"5a06c154e4b01bb0ae8afdce"},{"problem":77,"code":"(fn [words] \n  (->> words\n      (map #(identity {:word % :char-map (frequencies %)}))\n           (group-by :char-map)\n           (vals)\n           (map #(map :word %))\n           (filter #(< 1 (count %)))\n           (map set)\n           (set)\n   )\n  )","user":"6004c750e4b074f607df6645"},{"code":"(fn [s]\n  (set (map set\n   (filter #(> (count %) 1)\n    (vals\n     (group-by set s))))))","problem":77,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":77,"code":"(fn find-anagram\n  [xs]\n  (set (map set (filter #(> (count %) 1)\n                        (vals (group-by frequencies xs))))))","user":"55996253e4b031d6649c9baa"},{"problem":77,"code":"(fn [v]\n  (->>\n   (reduce #(update-in %1 [(sort (seq %2))] conj %2) {} v)\n   vals\n   (filter #(> (count %) 1))\n   (map set)\n   set))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":77,"code":"(fn [xs]\n  (set\n    (map set\n         (filter #(> (count %) 1)\n                 (vals\n                   (group-by\n                     (fn [x] (apply + (map #(Character/getNumericValue %) x)))\n                     xs))))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":77,"code":"(fn [v] (letfn [(anagram? [a b]\n                   (and (= (count a) (count b)) (= (set a) (set b))))]\n          (set (filter #(> (count %) 1)\n                       (distinct (map-indexed #(set (cons %2 (filter (partial anagram? %2) (concat (take %1 v) (drop (inc %1) v)))))\n                                              v))))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":77,"code":"(fn [x] (->> x (group-by set) (vals) (filter #(> (count %) 1)) (map set) (set)))","user":"58844d43e4b0f1effa3b7696"},{"problem":77,"code":"#(set (filter (fn [s] (> (count s) 1)) (map (comp set second) (group-by set %))))","user":"586615e6e4b0f14aab7c8858"},{"code":"#(set (map set (filter next (vals (group-by sort %)))))","problem":77,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":77,"code":"(fn [s] (set (map set (filter #(> (count %) 1) (vals (group-by set  s))))))","user":"55f25ae6e4b06e875b46ce43"},{"problem":77,"code":"(fn find-anagrams [words]\n  (->>\n   words\n   (reduce\n    (fn [m x]\n      (let [sorted-word (apply str (sort x))]\n        (assoc m sorted-word (conj (get m sorted-word #{}) x))\n        ))\n    {})\n   vals\n   (filter #(> (count %1) 1))\n   set))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":77,"code":";; Inspired by Chouser\n(fn [w]\n  (set (filter #(> (count %) 1)\n               (for [[_ g] (group-by frequencies w)]\n                 (set g)))))","user":"5317d78ee4b08068f379ed63"},{"problem":77,"code":"(fn [x]\n  (->> x\n      (#(map (fn [w] [(into #{} w) w]) %))\n      (group-by first)\n      (map #(map (fn [x] (second x)) (second %)))\n      (remove #(= 1 (count %)))\n      (map set)\n      (set)))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [s]\r\n  (set (map (comp set second)\r\n  (filter #(> (count (second %)) 1)\r\n          (group-by set s)))))","problem":77,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [c] (set (map #(set %) (filter #(> (count %) 1) (vals\n(group-by\n  (fn [s] (frequencies (apply list s)))\n  c))))))","problem":77,"user":"52ba2af3e4b07a9af57922cc"},{"code":"#(->> %2 (group-by set) vals (map set) (filter %) set) #(> (count %) 1)","problem":77,"user":"5046ee3ee4b03b02161376b4"},{"problem":77,"code":"(fn [xs]\n  (set (map set (filter #(> (count %) 1) (vals (group-by #(apply str (sort %)) \n               xs))))))","user":"54dce6dbe4b024c67c0cf78d"},{"code":"#(->> %\n       (group-by sort)\n       vals\n       (filter (fn [s] (< 1 (count s))))\n       (map set)\n       set)","problem":77,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by set)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5ab16992e4b073f1774425c4"},{"problem":77,"code":"(fn anagram\n  [s]\n  (->>\n    (loop [d {}\n           s (seq s)]\n      (if s\n        (let [k (sort (seq (first s)))]\n          (recur (assoc d k (conj (d k []) (first s)))\n                 (next s)))\n        d))\n    (filter #(> (count (second %)) 1))\n    (map #(set (second %)))\n    set))","user":"4e8a170c535d3e98b802328f"},{"problem":77,"code":"(fn [c]\n  (->> c\n  (group-by sort)\n  (vals)\n  (filter #(> (count %) 1))\n  (map set)\n  (set)))","user":"553b0d95e4b09218d5f44fff"},{"problem":77,"code":"#(set (map set (filter (fn [x] (> (count x) 1))(vals (group-by frequencies %)))))","user":"5ac92dc3e4b0e27600da77bf"},{"problem":77,"code":"(fn [v]\n    (set (filter #(> (count %) 1)\n            (map set (vals (group-by #(clojure.string/join (sort (clojure.string/split % #\"\"))) v))))))","user":"5310e968e4b08068f379ecdd"},{"problem":77,"code":"(fn [x] \n\t(set (map set (filter #(> (count %) 1) (vals (group-by set x))))))","user":"5ac04101e4b073f177442737"},{"problem":77,"code":"(fn anagram-finder [c]\n  (if (empty? c)\n    #{}\n    (let [anagram? #(= (set %1) (set (first c)))\n          as (reduce #(if (anagram? %2) (conj %1 %2) %1) #{} c)]\n      (if (second as)\n        (conj (anagram-finder (apply disj (set c) as)) as)\n        (anagram-finder (apply disj (set c) as))))))","user":"5bc09ebae4b07a9b28b10005"},{"problem":77,"code":"(fn anagrams [ws]\n  (->> (vals (group-by set ws))\n       (map set)\n       (remove #(== (count %) 1))\n       set))","user":"5f300f28e4b033932238a682"},{"problem":77,"code":"(fn solve\n  ([v]\n   (solve v {}))\n  \n  ([v ans]\n   (if (empty? v)\n     (set (filter #(<= 2 (count %)) (vals ans)))\n     (let [fs (first v)\n           sgn (sort fs)\n           assc (conj (get ans sgn #{}) fs)]\n       (solve (rest v)\n              (assoc ans\n                sgn assc\n                ))\n       )\n     )))","user":"52ae886de4b0c58976d9acab"},{"problem":77,"code":"#(->> % (group-by\n    \t\t(fn [x] (sort (seq x))))\n      \t(vals)\n      \t(filter (fn [x] (> (count x) 1)))\n        (map set)\n      \t(into #{}))","user":"559b55d6e4b066d22e731f54"},{"problem":77,"code":"(fn anagrams [word-list]\n  (set\n   (filter #(> (count %) 1)\n           (map (fn [word]\n                  (set (filter (fn [w] (= (sort w) (sort word))) word-list)))\n                word-list))))","user":"601c39eee4b0bf4ca6b10937"},{"code":"(fn [words]\n    (let [reverses (map #(hash-map (apply hash-set (distinct (seq %))) #{%}) words)\n          rev-map (apply merge-with concat reverses)\n          rev-map (filter #(> (count %) 1) (vals rev-map))\n          rev-map (apply hash-set (map #(apply hash-set %) rev-map))]\n      rev-map))","problem":77,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn anagrams [words]\n  (->> words\n    (group-by frequencies)\n    (vals)\n    (remove #(< (count %) 2))\n    (map set)\n    (set)))","problem":77,"user":"4ec70f26535d6d7199dd36dd"},{"problem":77,"code":"(fn [x]\n  (->> x \n       (group-by sort) \n       (vals) \n       (filter #(> (count %) 1)) \n       (map set) \n       (into #{})))","user":"56669819e4b0e91d5f5c5674"},{"problem":77,"code":"(fn get-anagrams [v]\n  (loop [anagrams {}\n         [word & morewords] v]\n    (if (nil? word)\n      (apply hash-set (filter #(> (count %) 1) (vals anagrams)))\n      (let [k (sort word)\n            k-set (or (get anagrams k) #{})]\n        (recur\n         \t(assoc anagrams k (conj k-set word))\n         \tmorewords)))))","user":"5a54e3c4e4b05d388ecb6c30"},{"problem":77,"code":"(fn ana [strings]\n  (->> (group-by frequencies strings)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       set)\n  )","user":"563f2eaae4b08d4f616f5ed1"},{"code":"(fn [lst]\n  (set (map set (remove #(< (count %) 2) (vals (group-by sort lst))))))","problem":77,"user":"4ec6559a535d6d7199dd36c9"},{"code":"(fn [s]\n  (set\n    (map set\n      (remove #(= (count %) 1)\n        (vals\n          (group-by #(reduce str (sort (seq %))) s))))))","problem":77,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":77,"code":";; ;; Solution 1\n;; (fn [in]\n;;   (loop [n 0\n;;          s #{}]\n;;     (if (= n (count in))\n;;       s\n;;       (recur (inc n)\n;;              (set (filter (fn [in] (> (count in) 1))\n;;                      (conj s (set (filter #(= (sort (nth in n)) (sort %)) in)))))))))\n;; ;; Solution 2\n;; (fn [in] (set (filter #(> (count %) 1) (map set (vals (group-by sort in))))))\n;; ;; Solution 3\n;; (fn [in]\n;;   (->>\n;;    (group-by sort in)\n;;    vals\n;;    (map set)\n;;    (filter #(> (count %) 1))\n;;    set))\n;; Solution 4\n(fn [in]\n  (->> (for [x (vals (group-by sort in)) :when (> (count x) 1)] (set x))\n       set))","user":"57fa6f2ee4b0d3187e900962"},{"code":"(fn [words]\n  (letfn [(anagram-of[a b]\n            (= (sort a) (sort b)))\n          (anagram-set [word words]\n            (into #{}\n                  (filter #(anagram-of word %1) words)))]\n    (into #{}\n          (filter #(> (count %1) 1)\n                  (map #(anagram-set %1 words) words)))))","problem":77,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn anagrams [coll] (set (map set (filter #(> (count %) 1) (vals (group-by sort coll))))))","problem":77,"user":"529d4f4be4b04e0c58e87b79"},{"problem":77,"code":"#(set (map set (remove (comp zero? dec count)\n                       (vals (group-by sort %)))))","user":"55201d18e4b08d5046aa8a5d"},{"problem":77,"code":"; This example is pretty brilliant.\n;(fn [ws] \n;  (set (map (comp set val) \n;            (remove (comp #{1} count val) (group-by frequencies ws)))))\n\n; This is a really clever way to do it with a creative use of sort on strings.\n(fn [v] \n   (into #{} \n     (map set \n       (filter #(> (count %) 1) \n         (map val (group-by sort v)))))) \n\n\n\n; This approach got me half way there, but I had trouble figuring out how to get the set to behave over the O(N)2 search.\n;(fn [coll]\n;    (loop [out #{}\n;           c coll]\n;      (if (empty? c)\n;        (hash-set out)\n;          (recur\n;            (loop [o out\n;                 c1 (rest c)]\n;            (if (empty? c1)\n;                o\n;              (if (= (into #{} (first c)) (into #{} (first c1)))\n;                (recur (conj o (first c) (first c1))\n;                       (drop 1 c1))\n;                (recur o\n;                       (drop 1 c1)))))\n;            (drop 1 c)))))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"(fn [coll] (into #{} (filter #(> (count %) 1) (map #(set (second %)) (group-by #(sort (seq %)) coll)))))","problem":77,"user":"5125745ae4b05d10e3e395f9"},{"problem":77,"code":"(fn [words] (set (filter #(> (count %) 1) (map set (vals (group-by #(apply str (sort %)) words))))))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"problem":77,"code":"(fn anagrams [words]\n\n ;(into #{} (filter #(> (count (second %)) 1 ) (group-by sort words)))\n (into #{} (map #(into #{} (second %)) (filter #(> (count (second %)) 1 ) (group-by sort words))))\n)","user":"56f2611fe4b04a395b9a04a2"},{"problem":77,"code":"(fn [ss]\n  (set\n   (map set\n        (remove #(= 1 (count %))\n                (vals (group-by set ss))))))","user":"5393185ae4b0b51d73faaeb7"},{"problem":77,"code":"(fn [ss]\n  (->> \n    (map (fn [s] {(apply str (sort s)) s}) ss)\n    (apply merge-with (comp flatten vector))\n    (filter  (fn [[k v]] (and (coll? v) (> (count v) 1))))\n    (map (fn [[k v]] (apply hash-set v))) \n    (apply hash-set)))","user":"57d9bca1e4b0bd073c202405"},{"problem":77,"code":"(fn anagram [ws]\n  (set\n    (filter #(< 1 (count %))\n            (vals\n              (reduce (fn [m w]\n                        (let [f (frequencies w)]\n                          (if-let [v (m f)]\n                            (assoc m f (conj v w))\n                            (conj m [f #{w}])\n                            )\n                          )\n                        ) {} ws)))))","user":"5488872ee4b0e286459a11d3"},{"code":"(fn anagram[coll] (let [\n        toseq (fn[s] (sort(seq s)))\n        seqs (map toseq coll)\n        counted (reduce (fn[acc el] (update-in acc [el] (fnil inc 0))) {} seqs)\n        filtered (filter #(> (second %) 1) counted)\n        tocount (fn[s] (< 1 (get counted (toseq s) 0)))\n        matchitem (fn[seq coll] (set(filter #(= (toseq %) seq) coll)))\n  ]\n (set(map (fn[el] (matchitem el coll) ) (keys filtered)))\n  )\n)","problem":77,"user":"5307e4ece4b02e82168697a9"},{"problem":77,"code":"(fn [words]\n  (reduce (fn [acc curr]\n            (let [anagrams (reduce (fn [iacc icurr]\n                                     (if (= (set curr) (set icurr))\n                                       (conj iacc icurr)\n                                       iacc)) #{} words)]\n              (if (> (count anagrams) 1)\n                (into acc #{anagrams})\n                acc))) #{} words))","user":"576a972ce4b0a07e8fc1811a"},{"code":"(fn [xs]\r\n  (set (map set (filter #(> (count %) 1)\r\n    (vals (group-by #(set (re-seq #\".\" %)) xs))))))","problem":77,"user":"4dc1ee85535d020aff1edf91"},{"code":"(fn anagrams\n  [coll] {:pre [(every? string? coll)]}\n  (->> coll                            ; [\"eat\" \"cat\" \"ate\"]\n       (group-by frequencies)          ; {{\\e 1, \\a 1, \\t 1} [\"eat\" \"ate\"],\n                                       ;  {\\c 1, \\a 1, \\t 1} [\"cat\"]}\n       vals                            ; ([\"eat\" \"ate\"] [\"cat\"])\n       (remove (comp (partial = 1)     ; ([\"eat\" \"ate\"])\n                     count))\n       (map set)                       ; (#{\"eat\" \"ate\"})\n       set))                           ; #{#{\"eat\" \"ate\"}}","problem":77,"user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [coll]\n   (letfn [(fao [x [h & t]]\n             (when h\n               (if (= (frequencies x) (frequencies h))\n                 (cons h (fao x t))\n                 (fao x t))))]\n     (into #{} (filter #(> (count %) 1)\n                       (for [x coll]\n                         (into #{} (fao x coll)))))))","problem":77,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [words-vec]\n  (set\n    (map set \n      (filter #(> (count %) 1)\n        (map #(second %)\n          (group-by #(sort %) words-vec))))))","problem":77,"user":"52c9a023e4b0c2d177d6213e"},{"problem":77,"code":"(comp set (partial filter (comp #(< 1 %) count)) (partial map set) vals (partial group-by sort))","user":"5d63f1c2e4b0c9e5857d502b"},{"problem":77,"code":"(fn [a]\n  (set\n    (->>\n      (group-by #(sort %) a)\n      vals\n      (filter #(> (count %) 1))\n      (map set)\n    )\n  )\n)","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":77,"code":"(fn [carianagram] \n  (set (map (comp set val) \n            (remove (comp #{1} count val) (group-by frequencies carianagram)))))","user":"5ff709e4e4b06df49cee149b"},{"problem":77,"code":"(fn [words] (into #{} (filter #(<= 2 (count %))\n  (vals (reduce (fn [hsh s]\n    (let [k (clojure.string/join (sort s))]\n      (assoc hsh k (conj (hsh k #{}) s)))\n  ) {} words))\n)))","user":"5be15f4de4b0ed4b8aab4c9b"},{"problem":77,"code":"(fn [ws]\n    (let [\n          canon (fn [w] (clojure.string/join (sort (seq w)))) ; canonical form of word\n          bycanon (group-by canon ws)\n         ]\n        (set (filter #(> (count %) 1) (map set (vals bycanon))))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [x] (set (map set (remove #(< (count %) 2) (vals (group-by set x))))))","problem":77,"user":"4daf907aedd6309eace4d17b"},{"code":"(fn anagrams [coll]\n  (->> coll\n       (group-by (partial group-by identity))\n       (map second)\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":77,"code":"(fn [coll]\n  (into #{}\n        (map #(into #{} %)\n             (remove #(<= (count %) 1)\n                     (vals\n                      (group-by #(sort %) coll))))))","user":"57147cd9e4b07c98581c3abf"},{"problem":77,"code":"(fn e [v] (set (map set ( into #{}\n       (vals\n         (filter (fn [[k v]] (> (count v) 1)) \n                 (group-by set v)))))))","user":"60654263e4b069485764ddc9"},{"problem":77,"code":"(fn [words]\n  (let [n (count words)]\n    (loop [_map {}\n           i ^Integer (int 0)]\n      (if (< i n)\n        (let [w (words i)\n              k (into #{} w)]\n          (recur (assoc _map k (conj (or (_map k) []) w)) (unchecked-inc-int i)))\n        (->> (vals _map)\n             (mapv (fn [v]\n                     (when (> (count v) 1)\n                       (into #{} v))))\n             (remove nil?)\n             (into #{}))))))","user":"56a28c23e4b0542e1f8d14c3"},{"code":"(fn find [words]\n  (set\n   (map (fn find-1 [[k v]] (set v))\n        (filter (fn find-2 [[k v]] (< 1 (count v)))\n                ((fn find-3 [words coll]\n                   (if (empty? words)\n                     coll\n                     (let [word (first words)\n                           words (rest words)]\n                       (if (coll (set word))\n                         (recur words (merge-with concat {(set word) [word]} coll))\n                         (recur words (assoc coll (set word) [word]))))))\n      \t         words {})))))","problem":77,"user":"4fa436dce4b081705acca19b"},{"problem":77,"code":"(fn anagram-finder\n  [words]\n  (reduce (fn [init group]\n            (if (next group)\n              (conj init (set group))\n              init))\n          #{}\n          (vals (group-by set words))))","user":"5746cb28e4b009280f9f2b68"},{"problem":77,"code":"(fn\n  [words]\n  (reduce #(if (>= (count (second %2)) 2)\n             (conj %1 (set (second %2)))\n             %1)\n          #{}\n          (group-by frequencies words)))","user":"5ec02e20e4b00a66d4a95288"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (letfn [(stored? [this in-here]\n            (some #(% this) in-here))\n          (get-anagrams [like-this from-here]\n            (let [anagrams (set (filter \n                                   #(anagram? like-this %) \n                                   from-here))]\n              (if (> (count anagrams) 1)\n                anagrams)))\n          (anagram? [this that]\n           (let [this (sort (seq this))\n                  that (sort (seq that))]\n             (if (= this that) true false)))]\n    (loop [current (first coll)\n           remaining coll\n           so-far #{}]\n      (println current remaining so-far)\n      (if (empty? remaining)\n        so-far\n        (if (or (stored? current so-far)\n                (nil? (get-anagrams current remaining)))\n          (recur (first (rest remaining))\n                 (rest remaining)\n                 so-far)\n          (recur (first (rest remaining))\n                 (rest remaining)\n                 (conj so-far (get-anagrams current remaining))))))))","user":"53d40508e4b00fb29b221332"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":77,"code":"(comp\n    set\n    (partial filter (comp (partial <= 2) count))\n    (partial map set)\n    vals\n    (partial group-by sort))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn anagrams* [words]\n  (set\n    (filter #(> (count %) 1)\n      (map (comp set (partial map second) second) (group-by first (map #(vector (clojure.string/join \"\" (sort %)) %) words))))))","problem":77,"user":"51d662fce4b0154f82ab92ef"},{"code":"(fn [word-list]\n  (reduce \n   (fn [results group-record]\n     (conj results\n           (set (map first (second group-record)))))\n   #{}\n   (filter (fn [record] (> (count (second record)) 1))\n           (group-by second\n                     (map (fn [word] (list word (set (seq word)))) word-list)))))","problem":77,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [words] (let [anagram? (fn [s1 s2]\n                  (= (sort s1) (sort s2)))]\n   (loop [acc #{} pool (set words)]\n     (if (empty? pool) acc\n      (let [angs   (set (filter #(anagram? (first pool) %) pool))\n            others (clojure.set/difference pool angs)]\n        (if (> (count angs) 1)\n          (recur (conj acc angs) others)\n          (recur acc others)))))))","problem":77,"user":"4daf8f84edd6309eace4d17a"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by frequencies)\n       (vals)\n       (filter second)\n       (map set)\n       (set)))","user":"58c73111e4b021aa9917ed72"},{"code":"(fn [l]\n  (->> l (group-by set) vals (filter (comp seq rest)) (map set) set))","problem":77,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":77,"code":"(fn [w]\n  (set (map (comp set val)\n            (remove (comp #{1} count val) (group-by frequencies w)))))","user":"5634995fe4b0bfe05bf117be"},{"problem":77,"code":"(fn [ws]\n  (->> (reduce (fn [M w] (let [nf (reduce (fn [coll a] (update-in coll [a] (fnil inc 0))) {} w)] (update-in M [nf] conj w))) {} ws)\n       vals\n       (filter #(>= (count (second %)) 2))\n       (map set)\n       (into #{})))","user":"567b39b6e4b05957ce8c61a3"},{"problem":77,"code":"(fn [words] (->> words\n                 (group-by set)\n                 vals\n                 (map set)\n                 (filter #(> (count %) 1))\n                 set))","user":"540e97f9e4b0addc1aec671f"},{"code":"(fn [coll] (->> coll (group-by sort) vals (map set) \n                (remove #(= 1 (count %))) set))","problem":77,"user":"51533ecde4b0252ac4b16619"},{"problem":77,"code":"(fn f[xs]\n  (->> (group-by sort xs)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"56795deae4b05957ce8c6187"},{"problem":77,"code":"(fn collect [src]\n   (set\n    (filter #(> (count %) 1)\n            (distinct\n             (map\n              (fn setify [element]\n                (reduce\n                 (fn subsetify [result actual]\n                   (println element actual (clojure.set/difference (set element) (set actual)))\n                   (if\n                    (and\n                     (= (count (clojure.set/difference (set actual) (set element))) 0)\n                     (= (count (clojure.set/difference (set element) (set actual))) 0))\n                     (conj result actual);;( clojure.set/intersection (set element ) (set actual ) ) )\n                     result))\n                 #{}\n                 src))\n              src)))))","user":"5d5c6675e4b09db18d4482ec"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by frequencies)\n       (map (comp set val))\n       (filter #(> (count %) 1))\n       set))","user":"54ddb556e4b024c67c0cf798"},{"problem":77,"code":"(fn[as]\n (\n  (fn[ys bb]\n   (loop [xs ys ss bb]\n    (if (empty? xs)\n      (set (filter #( not (= 1 (.size %)) ) ss) )\n      (letfn [(check-words[a b]( and (= (.length a) (.length b)) (= (set a) (set b))))]\n          (recur (remove (set (filter #(check-words (first xs) %) xs)) xs)     \n                 (into ss #{(set (filter #(check-words (first xs) %) xs))} )     \n          )\n      )\n    ) \n   )\n  )\n    as #{}\n  )\n)","user":"55d7312ee4b0e31453f64a9f"},{"problem":77,"code":"(fn [w]\n  (set (->> (group-by sort w)\n            vals\n            (filter #(> (count %) 1))\n            (map set))))","user":"4f0c4518535d0136e6c2230b"},{"problem":77,"code":"(fn [alist]\n  (->>\n   (for [i alist]\n     (set (filter #(= (frequencies (seq %)) (frequencies (seq i))) alist)))\n   (filter #(< 1 (count %)))\n   set))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [words]\r\n  (set (filter #(not (nil? (next %))) \r\n               (vals (reduce  (fn [m word]\r\n                                  (update-in m [(set (seq word))] #(conj (into #{} %) word)))\r\n                                  {} \r\n                                  words)))))","problem":77,"user":"4f3e6244e4b0e243712b1f85"},{"problem":77,"code":"(fn [words]\n  (set (for [anagram-group (vals (group-by frequencies words))\n             :let [more-than-one-word (not (nil? (next anagram-group)))]\n             :when more-than-one-word]\n         (set anagram-group))))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn [x] (set (map set (filter #(> (count %) 1) (vals(group-by #(sort %) x))))))","problem":77,"user":"514d398ee4b019235f6c0583"},{"problem":77,"code":"(fn [words]\n               (letfn [(toLetterMap [word] (reduce (fn [result char]\n                                                     (if (nil? (get result char))\n                                                       (conj result [char 1])\n                                                       (conj result [char (+ (get result char) 1)])))\n                                                   {} (seq word)))\n                       (areAnagrams [a b] (= (toLetterMap a) (toLetterMap b)))]\n                 (set (vals (reduce (fn [result [a b]]\n                           (if (areAnagrams a b)\n                             (let [key (toLetterMap a)\n                                   existing (get result key)]\n                               (if (nil? existing)\n                                 (conj result [key #{a b}])\n                                 (conj result [key (conj existing a b)])\n                                 )\n                               )\n                             result\n                           )) {} (for [a words b words :when (not= a b)] [a b]))))\n                 )\n               )","user":"5658b9bde4b00d315579610e"},{"problem":77,"code":"(fn [terms]\n  (->> terms\n       (group-by #(set %))\n       vals\n       (map #(set %))\n       (filter #(> (count %) 1))\n       set))","user":"52474133e4b05ef8e38e635e"},{"problem":77,"code":"(fn [words]\n    (->>\n      (group-by sort words)\n      (filter (comp second second))\n      (map (comp set second))\n      set))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn anagrams [v]\n   (let [sorted-map (group-by (comp (partial apply str) sort) v)]\n     (set (map set (filter #(> (count %) 1) (vals sorted-map))))))","problem":77,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [s]\n   (set (filter #(< 1 (count %))\n                (map set (vals (group-by sort s))))))","problem":77,"user":"4e860e85535db62dc21a62f1"},{"problem":77,"code":"(fn [a]\n  (set (filter \n    #(> (count %) 1) \n    (map set (vals (group-by #(apply str (sort %)) a))))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [xs] (set (map set (filter #(not-empty (rest %)) (vals (group-by sort xs))))))","problem":77,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":77,"code":"(fn [coll]\n  (set (for [k (map first (filter #(> (second %) 1) (frequencies (map (comp sort #(clojure.string/split % #\"\")) coll))))]\n    (set (for [v coll\n          :when (= (sort (clojure.string/split v #\"\")) k)]\n      v)))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":77,"code":"(fn anagrams\n  [coll]\n  (->> (group-by sort coll)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"56488119e4b0284900eef632"},{"problem":77,"code":"(fn anagram [xs]\n    (->> xs\n         (map #(vector (sort %) %))\n         (group-by first)\n         vals\n         (map (fn [xs] (set (map #(second %) xs))))\n         (filter #(> (count %) 1))\n         set\n         ))","user":"5921a080e4b09b4ee5954c77"},{"problem":77,"code":"(fn anagram-finder [coll] (->> (group-by set coll) vals (filter #(> (count %) 1)) (map set) set))","user":"55632016e4b0c656e3ff17e4"},{"problem":77,"code":"(fn [w] (into #{} (filter #(> (count %) 1) (map #(set (last %)) (group-by sort w)))))","user":"56efb3a3e4b04a395b9a0463"},{"problem":77,"code":"(fn [s](set(filter (fn [x] (> (count x) 1)) (map #(set(val %)) (group-by set s)))))","user":"53fe1c3be4b0de5c418485f2"},{"code":"(fn [l] (set (map set (filter #(> (count %) 1) (vals (group-by sort l))))))","problem":77,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn __ [v]\n  (let [m (into {} (map (fn [x] {x (into #{} x)}) v))]\n       (into #{} (map #(into #{} %)\n         (filter #(> (count %) 1) \n                 (map keys (vals (group-by val m))))))))","problem":77,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn [coll]\n  (set\n   (map set\n        (filter #(> (count %) 1)\n       \t(vals \n        \t(group-by sort coll))))))","problem":77,"user":"51780f88e4b03d69594194c9"},{"problem":77,"code":"(fn [coll]\n  (set (filter #(> (count %) 1) (map set (vals (apply merge-with concat (map #(assoc {} (sort %) [%]) coll)))))))","user":"572a856be4b0f4d77e65123b"},{"problem":77,"code":"(fn [s] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies s))))))","user":"5464a536e4b01be26fd746cf"},{"code":"(fn [s]\n  (apply hash-set\n    (filter #(> (count %) 1)\n      (map #(apply hash-set (second %))\n        (group-by \n          (fn [a] (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} a))\n          s)))))","problem":77,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [ws]\n  (set\n    (filter\n      #(> (count %) 1)\n      (vals\n        (reduce\n          (fn [m w]\n            (let [key (sort (seq w))]\n              (assoc m key (conj (get m key #{}) w))))\n          {}\n          ws)))))","problem":77,"user":"4dbdc9da535d020aff1edf4c"},{"problem":77,"code":"(fn [vek]\n  (let [vg (loop [v vek h []]\n             (if (= v [])\n               h\n               (let [a (sort (first v))\n                     vb (filter #(= a (sort %)) v)]\n                 (recur (vec (clojure.set/difference (set v) (set vb)))\n                        (conj h vb)))))]\n    (set (filter (fn [x] (> (count x) 1)) (map #(set %) vg)))))","user":"564d3169e4b0284900eef67c"},{"problem":77,"code":"(fn [l] (reduce #(if (get-in %2 [1 1]) (conj % (set (get-in %2 [1]))) %) #{} (group-by sort l)))","user":"53b2a7f8e4b047364c04449c"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by frequencies)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"508c3d42e4b0f17d83ea26b2"},{"problem":77,"code":"(fn anagrams [words]\n  (->> words\n       (group-by frequencies)\n       vals\n       (filter (comp (partial < 1) count))\n       (map set)\n       set))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [x]\n     (loop [i 0 result #{}]\n\t      (if (= (count x) i)\n\t\t  result\n\t\t  (let [w (sort (seq (nth x i)))\n\t\t       found (filter (fn [y]\n\t\t\t    (= w (sort (seq y)))) x)]\n\t\t\t    (if (< 1 (count found))\n\t\t\t\t(recur (inc i) (conj result (into #{} found)))\n\t\t\t\t(recur (inc i) result))))))","problem":77,"user":"4f066916535dcb61093f6c10"},{"problem":77,"code":"(fn [col]\n   (let [anagrams (vals (group-by #(sort %) col))\n         as-sets (map set anagrams)]\n     (set (filter #(> (count %) 1) as-sets))))","user":"518279abe4b0353c468deb65"},{"problem":77,"code":"(fn anagrams\n  [s]\n  (->> s\n       (map #(assoc {} :word % :signature (frequencies (re-seq #\"\\w\" %))))\n       (group-by :signature)\n       vals\n       (remove #(< (count %) 2))\n       (map #(set (map :word %)))\n       set))","user":"5b72b36ce4b047b03b2036a9"},{"problem":77,"code":"(fn sol [words]\n  (set (map set (filter (fn [lst] (> (count lst) 1)) (vals (group-by frequencies words)))))\n  )","user":"578b140be4b0ebec4cfb7545"},{"problem":77,"code":"(fn [words] (set (map set (filter (fn [ws] (> (count ws) 1)) (vals (group-by (fn [s] (apply str (sort(vec s)))) words))))))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn [col] (set (filter #(> (count %) 1) \r\n (map set (vals (reduce (fn [l r] (update-in l [(frequencies r)] conj r)) {} col))))))","problem":77,"user":"4e0e0529535d04ed9115e7b9"},{"problem":77,"code":"(fn anagram-finder\n  [str-array]\n  (reduce \n    #((fn [x y]\n  (if (> (count (val y)) 1)\n    (conj x (set (val y)))\n    x)) %1 %2)\n    #{} \n    (group-by \n     #(identity ((fn [x] (sort (clojure.string/split x #\"\"))) %))\n     (identity str-array))))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"(fn [the-words]\n  (->> the-words\n    (group-by sort)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    set\n    ))","problem":77,"user":"52ee46e5e4b05e3f0be25ec5"},{"code":"#(->> %\n   (group-by sort)\n   (vals)\n   (filter next)\n   (map set)\n   (set))","problem":77,"user":"521679e9e4b0bf4bffd29cca"},{"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","problem":77,"user":"510db6cde4b078ea71921145"},{"problem":77,"code":"(fn anagrams [lst]\n    (into #{} (filter #(> (count %) 1) \n        (vals (reduce #(assoc %1 (sort %2) (conj (get %1 (sort %2) #{}) %2)) {} lst)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":77,"code":"(fn [coll]\n  (set (filter #(> (count %) 1)\n               (map set (vals (group-by #(sort %) coll))))))","user":"53322cece4b019098a6f8b73"},{"problem":77,"code":"(fn [w]\n   (apply hash-set\n     (filter (fn [s] (> (count s) 1))\n       (vals\n        (reduce #(update-in %1 [(sort %2)] (fnil conj #{}) %2) {} w)))))","user":"5590e55de4b0277789237676"},{"problem":77,"code":"(fn grouper [coll]\n  (set (map set (filter #(> (count %) 1) (vals (group-by frequencies coll))))))","user":"55170dd9e4b06a49daca83bd"},{"problem":77,"code":"(fn [words] (->> words (group-by sort) (vals) (map set) (filter #(> (count %) 1)) (set)))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn [s]\n   (->> s\n        (group-by #(sort %))\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set))","problem":77,"user":"51929214e4b08962174cf74c"},{"code":"(fn [words]\n  (->> words\n       (group-by set)\n       vals\n       (remove (comp empty? rest))\n       (map set)\n       set))","problem":77,"user":"51f9527fe4b09be9c177e549"},{"code":"#(set (filter next (map set (vals (group-by sort %)))))","problem":77,"user":"4e707db6535d5021c1a8963a"},{"problem":77,"code":"(fn [n]\n      (->> n\n           (group-by sort)\n           vals\n           (filter (comp (partial < 1)\n                         count))\n           (map (partial into (hash-set)))\n           (into (hash-set))))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn [coll] (set (map set (filter #(> (count %) 1) (vals (group-by set coll))))))","problem":77,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [s]\n  (->> s\n    (group-by #(sort (seq %)))\n    (filter #(< 1 (count (second %))))\n    (map #(set (second %)))\n    (set)))","problem":77,"user":"51e58e02e4b0efabf93c02d0"},{"code":"(fn find-anagrams-4clojure\n  ([x]\n    (find-anagrams-4clojure (rest x) (rest x) (sorted-set (first x)) #{}))\n  ([candidates current-candidates current-final final]\n    (let [are-anagram (fn [x y] (if (= 0 (count x) (count y))\n    true\n    (if-not (= (count x) (count y))\n      false\n      (if (= (first x) (first y))\n        (recur (disj x (first x)) (disj y (first y)))\n        false))))\n          separate-letter (fn [x]   (set (re-seq #\"[a-z]\" x)))\n          release-from (fn [x y z] (if (= 0 (count x))\n    z\n    (if (= (last x) y)\n      (recur (butlast x) y z)\n      (recur (butlast x) y (conj z (last x))))))]\n    (if (= 0 (count candidates))\n      (if (> (count current-final) 1)\n        (conj final current-final) final)\n      (if (= 0 (count current-candidates))\n        (if (> (count current-final) 1)\n          (recur (rest candidates) (rest candidates) (sorted-set (first candidates)) (conj final current-final))\n          (recur (rest candidates) (rest candidates) (sorted-set (first candidates)) final))\n        (if (are-anagram (separate-letter (first current-candidates)) (separate-letter (first current-final)))\n           (recur (release-from candidates (first current-candidates) '()) (rest current-candidates) (conj current-final (first current-candidates)) final)\n          (recur candidates (rest current-candidates) current-final final)))))))","problem":77,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [d] (letfn\n    [(group-into-ana-sets [a] (group-by #(set (seq %)) a))\n     (select-non-lonely [b] (filter #(> (count (val %)) 1) b))\n     (format-my-shit [c] (set (map #(set (nth % 1)) c)))]\n    (-> d group-into-ana-sets select-non-lonely format-my-shit)))","problem":77,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":77,"code":"(fn anagrams\n  [coll]\n  (set\n   (filter #(> (count %) 1)\n           (map (comp set second)\n                (group-by set coll)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":77,"code":"(fn [v] (set (filter #(> (count %) 1) (map set (vals (apply merge-with concat (map #(assoc {} (frequencies %) [%]) v)))))))","user":"5519c157e4b00ace28fe6e32"},{"code":"#(set\n   (map set\n        (keep (fn [[k v]]\n                (if (> (count v) 1) v))\n              (group-by frequencies %))))","problem":77,"user":"4ee82539535d93acb0a66878"},{"problem":77,"code":"(fn anagramm [c]\r\n  (set (map set (filter\r\n                  #(> (count %) 1)\r\n                    (vals (group-by sort c))))))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"#(set (for [[_ w] (group-by (comp set seq) %)\n            :when (next w)]\n        (set w)))","problem":77,"user":"4e823ed7535db62dc21a62c7"},{"problem":77,"code":"(fn [args]\n  (let [anagram? (fn [w1 w2]\n                   (= (set w1) (set w2)))]\n    (loop [args args\n           result #{}]\n      (let [tmp (set (filter #(anagram? (first args) %) args))\n            now_result (if (= (count tmp) 1) #{} tmp)]\n      (cond (= (count args) 0) (set (filter #(> (count %1) 1) result))\n            :else (recur (filter #(not (anagram? (first args) %1)) (rest args))  (conj result now_result)))))))","user":"5eeeb000e4b07c55ae4a0515"},{"problem":77,"code":"(fn [col]\n  (set\n   (map set\n     (filter #(> (count %) 1)\n       (vals\n        (group-by\n          sort col))))))","user":"57b35772e4b0fbc9809a277c"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by sort coll)\n       (vals)\n       (filter next)\n       (map set)\n       (set)))","user":"5cee521ce4b0aaa82f1129dd"},{"code":"(fn ana [words]\n  (set (map set (filter #(< 1 (count %)) (vals (group-by sort words))))))","problem":77,"user":"5003deb9e4b0678c553fc445"},{"problem":77,"code":"(fn [items]\n   (->> items\n        (group-by set)\n        (vals)\n        (remove #(<= (count %) 1))\n        (map set)\n        (set)))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":77,"code":"(fn\n  [words]\n  (let [group-words-by-letters #(merge %1 {(first %2) (clojure.set/union (%1 (first %2) #{}) #{(last %2)})}), \n        letters-and-words (map #(conj [(sort (clojure.string/split % #\"\"))] %) words)]\n        (set (filter #(> (count %) 1) (vals (reduce group-words-by-letters {} letters-and-words))))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [ws]\n  (set (map #(apply hash-set %) (filter #(<= 2 (count %)) (vals (group-by sort ws))))))","problem":77,"user":"504e13fce4b078edc5f593bc"},{"problem":77,"code":"(letfn [(normalize [word] (apply str (sort (clojure.string/replace (clojure.string/lower-case word) #\"[^a-z]\" \"\"))))]\n  (fn [words] \n    (set (->> words\n              (group-by normalize)\n              (map #(% 1))\n              (filter #(> (count %) 1))\n              (map set)))))","user":"54febf4be4b07d26eda61d45"},{"problem":77,"code":"(fn ana [x]\n  (->> x\n       (group-by frequencies)\n       vals\n       (filter #(< 1 (count %)))\n       (map #(into #{} %))\n       (into #{})))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":77,"code":"(fn __ [coll] (set (map set (filter #(> (count %) 1) (vals (group-by #(group-by char %) coll))))))","user":"5756f324e4b02ea1147992e8"},{"code":"(fn [words]\n  (->> (group-by set words)\n       vals\n       (map set)\n       set\n       (clojure.set/select (comp #(>= % 2) count))))","problem":77,"user":"50e3e108e4b01912b3285c48"},{"code":"(fn [ws]\n  (set\n    (for [[_ v] (group-by sort ws) :when (> (count v) 1)] (set v))))","problem":77,"user":"500933a6e4b046cdb195e074"},{"problem":77,"code":"(fn anagram [coll]\n  (let [groups  (group-by identity (map (fn [v] (set v)) coll))]\n    (set (for [a groups :when (> (count (second a)) 1)]\n      (reduce (fn [acc v] (if (= (set v) (first a)) (conj acc v) acc)) #{} coll) \n      ))\n    )\n  )","user":"5592bf9fe4b0c79f6e1db933"},{"problem":77,"code":"(fn anagrams [words]\n  (set (filter #(>= (count %) 2) (map set (vals (group-by frequencies words))))))","user":"54ae541ae4b09f271ff37cef"},{"problem":77,"code":"(fn [words]\n  (let [anagrams (fn [words word]\n                   (let [sorted-word (sort word)]\n                     (set (filter #(= sorted-word (sort %)) words))))]\n    (->> words\n         (map (partial anagrams words))\n         distinct\n         (filter #(> (count %) 1))\n         set)))","user":"52f3568fe4b05e3f0be25f0e"},{"problem":77,"code":"(fn [s] (->> s (group-by sort) (map val) (filter #(< 1 (count %))) (map set) (into #{})))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [words]\n  (->> words (group-by sort) vals (filter next) (map set) set))","problem":77,"user":"4e7db3b4535db169f9c796e1"},{"problem":77,"code":"(fn anagram [words]\n  (->> (group-by #(clojure.string/join \"\" (sort %)) words)\n       (#(for [[k v] % :when (> (count v) 1)] (set v)))\n       (set)))","user":"52860baae4b0239c8a67ae09"},{"problem":77,"code":"#(->> %\n  (group-by sort)\n  vals\n  (filter next)\n  (map set)\n  set)","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"code":"(fn [s]\n  ( ->> s\n  (group-by frequencies)\n  (vals)\n  (filter #(< 1 (count %)))\n  (map set)\n  (set)\n))","problem":77,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn [coll]\n  (set\n    (filter #(> (count %) 1)\n      (map\n        set\n        (vals\n          (group-by\n            #(group-by identity %)\n            coll))))))","problem":77,"user":"4fb2101ce4b081705acca284"},{"problem":77,"code":"(fn [words]\n  (let [anagram? (fn [w1 w2]\n                   (and\n                    (clojure.set/subset? (set (seq w1))\n                                         (set (seq w2)))\n                    (clojure.set/subset? (set (seq w2))\n                                         (set (seq w1)))))\n        anagram-list (for [x words]\n                       (set (filter #(anagram? x %) words)))]\n    (into #{}\n    (filter #(> (count %) 1) anagram-list))))","user":"505d1b01e4b0e6aca564be04"},{"problem":77,"code":"(fn find-anagrams [coll]\n  (->> coll\n       (group-by sort)\n       (map (comp set val))\n       (filter #(> (count %) 1))\n       (set)))","user":"53dc94c8e4b094d41abdfefc"},{"problem":77,"code":"(fn [x]\n (->> (group-by sort x)\n  (vals)\n  (filter (comp seq rest))\n  (map set)\n  (set)))\n;;(set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [v] (set (filter next (map set (vals (group-by set v))))))","problem":77,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [v]\n  (->> v\n    (group-by sort)\n    vals\n    (filter #(< 1 (count %)))\n    (map set)\n    set))","problem":77,"user":"4ff5744ae4b0678c553fc36a"},{"problem":77,"code":"#(set (map set (filter (fn [l](not= 1 (count l))) (vals (group-by (fn [m](sort (seq m))) %)))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":77,"code":"(fn [l]\n  (into #{}\n        (map set (filter #(< 1 (count %)) (vals (group-by set l))))))","user":"60743977e4b069485764de46"},{"code":"(fn [col] (set (for [[k v] (group-by sort col) :when (> (count v) 1)] (set v))))","problem":77,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":77,"code":"(fn anagrams [words]\n  (letfn [(add-word [m w]\n            (let [sw (sort w)]\n              (if (contains? m sw)\n                (assoc m sw (conj (m sw) w))\n                (assoc m sw #{w}))))]\n   \n    (->> (reduce add-word {} words)\n         vals\n         (filter #(> (count %) 1))\n         set)))","user":"543d89dfe4b032a45b869350"},{"code":"(fn [l]\n  (let [a (apply merge-with\n            #(flatten %&)\n            (map #(hash-map (apply str (sort %)) %) l))]\n    (set (map set (filter coll? (vals a))))))","problem":77,"user":"4e7dfab0535db169f9c796f9"},{"problem":77,"code":"#(loop [mp {} sq %]\n   (if (empty? sq)\n     (set (filter (fn [x] (> (count x) 1)) (vals mp)))\n     (let [stwd (clojure.string/join \"\" (sort (first sq))) wd (first sq)]\n       (if (contains? mp stwd)\n         (recur (update-in mp [stwd] (fn [x] (conj x wd))) (rest sq))\n         (recur (assoc mp stwd #{wd}) (rest sq))\n      )\n     )\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":77,"code":"(fn [strings]\n\t(into #{}\n\t\t(map \n\t\t\t(fn[[key val]]\n\t\t\t\t(into #{} val)\n\t\t\t)\n\t\t\t(filter \n\t\t\t\t(fn [[key val]]\n\t\t\t\t\t(list? val)\n\t\t\t\t)\n\t\t\t\t\t\t\t\t(apply merge-with #(if (list? %1)\n\t\t\t\t\t\t\t\t\t(conj %1 %2)\n\t\t\t\t\t\t\t\t\t(conj '() %1 %2))\n\t\t\t\t\t(map hash-map\n\t\t\t\t\t\t(map \n\t\t\t\t\t\t\t(fn [s]\n\t\t\t\t\t\t\t\t(reduce\n\t\t\t\t\t\t\t\t\t#(if (contains? %1 %2)\n\t\t\t\t\t\t\t\t\t\t(assoc %1 %2 (inc (get %1 %2)))\n\t\t\t\t\t\t\t\t\t\t(assoc %1 %2 1)\n\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t\t\t(seq s)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\tstrings)\n\t\t\t\t\t\tstrings\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [words]\n    (set (filter #(> (count %) 1) (map set (vals (group-by sort words)))))\n    )","problem":77,"user":"52213426e4b0e6a83c8925c4"},{"problem":77,"code":"(fn [words]\n    (->> words\n         (group-by sort)\n         (vals)\n         (filter #(> (count %) 1))\n         (map set)\n         (set)))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":77,"code":"(fn\n  [v] \n  (set \n   (map set \n        (filter #(> (count %) 1) \n                (vals (group-by set v))))))","user":"594266cfe4b060784b3b790b"},{"code":"(fn [vs]\r\n    (let [char-map #(reduce (fn [m k] (update-in m [k] (fnil inc 0))) {} %)]\r\n      (set \r\n        (map set \r\n             (filter \r\n               #(> (count %) 1) \r\n               (vals (apply merge-with concat \r\n                            (map #(hash-map (char-map %) [%]) vs))))))))","problem":77,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [w]\n  (->> w\n    (group-by frequencies)\n    (vals)\n    (map set)\n    (filter #(> (count %) 1))\n    (set)))","problem":77,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":77,"code":"#(set (map set \n           (filter next\n                   (vals (group-by sort\n                                   %)))))","user":"4e38f245535deb9a81d77f3e"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (reduce (fn [acc w] (update-in acc [(set w)] conj w)) {})\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"505aa653e4b021387fb89857"},{"code":"(fn [words] \n  (set \n   (filter\n    (fn [aset] (> (count aset) 1))\n    (map set\n        (vals (group-by \n                 (fn [word] (frequencies (apply list word)))\n                 words))))))","problem":77,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn problem-77 [words]\n  (when-not (empty? words)\n    (let [letters  (set (first words))\n          anagrams (set (filter #(= letters (set %)) words))\n          cnt (count anagrams)\n          rst (problem-77 (remove #(= letters (set %)) words))]\n      (set (if (> cnt 1)\n        (cons anagrams rst)\n        rst)))))","problem":77,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":77,"code":"(fn find-anagrams [words]\n  (let [is-word-anagram (fn [a b] (= (sort a) (sort b)))\n        contains-anagram (fn [sets word]\n                           (if (some #(is-word-anagram (first %) word) sets)\n                               true false))\n        add-word (fn [set word]\n                   (if (is-word-anagram (first set) word)\n                     (conj set word)\n                     set))\n        add-anagram (fn [sets word]\n                      (if (contains-anagram sets word)\n                        (map #(add-word % word) sets)\n                        (conj sets #{word})))]\n\n    (loop [ret #{}\n           words words]\n      (if (empty? words)\n        (set (remove #(= (count %) 1) ret))\n        (recur\n         (add-anagram ret (first words))\n         (rest words))))))","user":"53ac4719e4b047364c04445c"},{"problem":77,"code":"(fn af\n  ([s] (af (first s) (set (rest s)) #{}))\n  ([w s acc]\n    (if (empty? s)\n        acc\n     (let [ana (set (filter #(= (sort w) (sort %)) s))\n           rst (clojure.set/difference s ana)]\n     (if (empty? ana)\n        (af (first s) (set (rest s)) acc)\n        (af (first rst) (set (rest rst)) (conj acc (conj ana w)))\n      ))\n      )\n   )\n)","user":"56bca51ae4b0f26550335963"},{"code":"(fn [words] \n  (set (map set \n    (filter \n      #(< 1 (count %)) \n      (vals \n        (group-by frequencies words))))))","problem":77,"user":"521e8227e4b0dd19981ad082"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"52dc7344e4b09f7907dd13cf"},{"code":"#(set (for [[_ [_ c :as v]] (group-by sort %) :when c] (set v)))","problem":77,"user":"4ff67852e4b0678c553fc37e"},{"problem":77,"code":"(fn [ss]\n    (->> (group-by sort ss)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn anagram [coll]\n  (set (filter #(> (count %) 1) (vals (apply merge-with clojure.set/union (map #(hash-map ((fn getkey [s] (apply str (sort s))) %) #{%}) coll))))))","problem":77,"user":"51805d22e4b0e3fc13e244df"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map (partial apply hash-set))\n       (apply hash-set)))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":77,"code":"(fn [words] \n  (set \n   (for [candidate words\n             :let [anagrams? (fn [w1 w2] (= (set w1) (set w2)))\n                   anagrams (filter #(anagrams? candidate %) words)]\n             :when (< 1 (count anagrams))]\n          (set anagrams))))","user":"573a0ecce4b0cd1946bd1088"},{"problem":77,"code":"(fn find-anagram\n  [coll]\n  (->> (vals (group-by sort coll))\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":77,"code":"(fn [words]\n  (set (filter #(>= (count %) 2) (map set (vals (group-by frequencies words))))))","user":"4f856adfe4b033992c121c44"},{"problem":77,"code":"#(->> (group-by sort %)\n      (vals)\n      (filter next)\n      (map set)\n      (set))","user":"5e41b679e4b01d43a70e8e58"},{"problem":77,"code":"(fn [l] (set (map set (filter #(< 1 (count %)) (vals (group-by #(set %) l))))))","user":"566e6850e4b0a866af6896da"},{"code":"(fn [s]\n  (into #{}\n    (for [[k v] (group-by (comp str sort seq) s) :when (> (count v) 1)]\n      (set v))))","problem":77,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn f\n  ([x] (f x {}))\n  ([x m]\n     (if (empty? x) (set (filter #(> (count %) 1) (vals m)))\n         (let [rhead (sort (first x))]\n           (if (contains? m rhead)\n             (recur (rest x) (update-in m [rhead] #(conj % (first x))))\n             (recur (rest x) (assoc m rhead (conj #{} (first x))))))\n         )))","problem":77,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn [v] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies v))))))","problem":77,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [s]\n  (set \n    (for [[k v] (group-by sort s)\n          :when (> (count v) 1)]\n      (set v)\n    )\n  )\n)","problem":77,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"( fn [l]\n  (\n  ->> l\n  (group-by sort)\n  (vals)\n  (filter #(> (count %) 1))\n  (reduce #(conj % (set %2)) #{})\n  )\n)","problem":77,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (map #(vector (sort %) %))\n       (sort-by #(->> % first (apply str)))\n       (partition-by first)\n       (filter #(> (count %) 1))\n       (map (comp set (partial map second)))\n       set))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":77,"code":"(fn anagram [xs]\n  (->> xs\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"code":"(fn\n  [s]\n  (set (map set (filter #(> (count %) 1) (vals (group-by #(set %) s))))))","problem":77,"user":"51852961e4b0da5a5be3babb"},{"problem":77,"code":"#(->> %\n      (group-by frequencies)\n      vals\n      (filter (fn [l] (> (count l) 1)))\n      (map set)\n      set)","user":"59ef6cfae4b0966464fe6a32"},{"problem":77,"code":"(fn [words]\n\n      (let [anagram? (fn [w1 w2]\n                         ;(println (str \"w1: \" w1 \" w2: \" w2))\n                         (= (sort w1) (sort w2)))]\n\n             (set (remove #(= #{} %)\n                   (map set\n                        (map #(flatten (% 1))\n                             (reduce (fn [anagrams word]\n                                         ;(println (str \"anagrams: \" anagrams  \" word: \" word \" keys: \" (keys anagrams)))\n                                         (let [updated (reduce (fn [anagrams key]\n                                                                   ;(println (str \"key: \" key \" anagrams: \" anagrams))\n                                                                   (if (anagram? word key)\n                                                                     (#(assoc %1 %2 (%3 (get %1 %2))) anagrams key #(conj [%] (str word)))\n                                                                     anagrams))\n                                                               anagrams\n                                                               (keys anagrams))]\n                                              (if (=\n                                                    anagrams\n                                                    updated)\n                                                (assoc anagrams word (str word))\n                                                updated))\n                                         )\n                                     {}\n                                     words)))))))","user":"56cc34aee4b0ea9b8538f73c"},{"code":"#(set (filter (fn [v] (> (count v) 1)) (map set (vals (group-by sort %)))))","problem":77,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by frequencies)\n       (map #(set (val %1)))\n       (remove #(< (count %1) 2))\n       (set)))","user":"539e717fe4b0ca733b974488"},{"code":"#(->> (group-by sort %)\n     (map second)\n     (filter second)\n     (map set)\n     set)","problem":77,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn [w] (set (filter #(not-empty (rest %)) (map (fn [[f s]] (set s)) (group-by set w)))))","problem":77,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":77,"code":"(fn anagram-subsets [sqn]\n  (loop [[word & others] sqn\n         anagram-sets {}]\n    (if (nil? word)\n      ;; no words left, compile all the anagram sets. Ignore those of length 1.\n      (->> anagram-sets\n           (vals)\n           (filter #(> (count %) 1))\n           (map set)\n           (set))\n      ;; if there are words left, insert the next word into the catalog.\n      (recur others\n             (update-in anagram-sets \n                        [(set word)] \n                        #(conj % word))))))","user":"569f99cce4b0542e1f8d1497"},{"problem":77,"code":"(fn [in] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort (seq %)) in))))))","user":"578f9a18e4b0ebec4cfb7598"},{"problem":77,"code":"(fn [xs]\n    (->> xs\n           (group-by frequencies)\n           (vals)\n           (filter #(< 1 (count %)))\n           (map set)\n           (set)))","user":"58b81490e4b0ebc645576d8c"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n      (group-by #(apply str (sort %)))\n      vals\n      (filter #(> (count %) 1))\n      (map set)\n      (into #{})))","user":"594880ade4b07ddc2dafadc2"},{"problem":77,"code":"(fn [strings]\n   (->> (group-by sort strings)\n        (vals)\n        (map set)\n        (remove #(< (count %) 2))\n        (set)))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (filter next)\n       (map set)\n       set))","problem":77,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"(fn [v] (->> v\n  (group-by sort)\n  vals\n  (filter #(> (count %) 1))\n  (map set)\n  set\n))","problem":77,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [l]\n   (apply hash-set\n    (filter\n     (fn [x] (> (count x) 1))\n     (vals\n      (reduce\n       (fn [m e]\n         (update-in m [(frequencies e)] (fnil #(conj % e) #{})))\n       {}\n       l)))))","problem":77,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":77,"code":"(fn anag [arg]  \n     (->>  \n      (map #(vector (sort (seq %) ) % ) arg)    \n      (sort-by #(apply str (first %)))\n      (partition-by #(first %))      \n      (filter #(> (count %) 1))\n      (map (fn [arg] (reduce #(conj %1 (last %2) ) #{} arg)))    \n      (into #{} )    \n      )     \n)","user":"5364ab34e4b0243289761e64"},{"problem":77,"code":"(fn [a]\n  (->> a\n       (group-by #(frequencies (sequence %)))\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":77,"code":"(letfn [(anagram? [a b]\r\n          (= (sort a) (sort b)))\r\n        (get-anagrams [words word]\r\n          (set (filter #(anagram? word %) words)))\r\n        (anagrams [words]\r\n          (set (remove #(= 1 (count %))\r\n                       (map (partial get-anagrams words) words))))]\r\n  anagrams)","user":"55d0e76ae4b0e31453f64a40"},{"code":"(fn [w]\n  (set (filter #(< 1 (count %))\n               (vals (reduce #(assoc %\n                                     (set %2)\n                                     (conj (% (set %2) #{}) %2))\n                      {}\n                      w)))))","problem":77,"user":"4ec53f8c535d6d7199dd368b"},{"problem":77,"code":"([(fn anagram1 [v]\n  (set (for [i (vals (group-by sort v))\n             :when (> (count i) 1)]\n         (set i))))\n\n(fn anagram2\n  [v]\n  (->> (group-by #(sort %) v)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))] (rand-int 2)) ;; rand choose between either impl","user":"563f4c47e4b08d4f616f5ed2"},{"problem":77,"code":"(fn find-anagrams [words]\n  (->> words\n       (group-by (fn [x]\n                   (->> x\n                        (group-by identity)\n                        (map (juxt key (comp count val)))\n                        (into {}))))\n       vals\n       (remove (comp (partial = 1) count))\n       (map set)\n       (into #{})))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn[v] (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by sort v))))))","problem":77,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn [coll]\n     (->> coll\n          (group-by frequencies)\n          vals\n          (remove #(= 1 (count %)))\n          (map set)\n          set))","problem":77,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":77,"code":"(fn [words] (set (map #(into #{} (second %)) (remove #(= 1 (count (second %))) (group-by #(sort %) words)))))","user":"5686e652e4b0dcc4269f4059"},{"problem":77,"code":"(fn anag-finder[anags]\n\t(into #{} (map set (filter #(> (count %) 1) (vals (group-by #(sort %) anags))))))","user":"538e29d1e4b0b51d73faae80"},{"code":"#(->>\n  (group-by sort %)\n  vals\n  (filter next)\n  (map set)\n  set)","problem":77,"user":"519e9f06e4b0acf32bc6a433"},{"problem":77,"code":"(fn [s]\n  (->> (group-by sort s)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"5cab33e7e4b048ec896c5c48"},{"problem":77,"code":"(fn [coll] (let [sorted-coll (map sort coll)]\n    (->> sorted-coll\n        (frequencies)\n        (filter #(>= (second %) 2))\n        (map #(first %))\n        (map (fn [item] (keep-indexed #(if (= item %2) %1) sorted-coll)))\n        (map #(apply hash-set (mapv coll %)))\n        (set))))","user":"568f2059e4b0dcc4269f40df"},{"problem":77,"code":"(fn [coll]\n    (set (map set (filter (fn[x] (> (count x) 1)) (vals (group-by sort coll)) )))\n    )","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [words]\n   (let [anags (map first (filter #(< 1 (% 1)) (seq (frequencies (map (fn [word]\n          (sort (seq word))) words)))))]\n     \n     (set (map (fn [anag]\n            (set (filter (fn [word]\n                   (= (sort (seq word)) anag)) words))) anags))))","problem":77,"user":"50d3b03fe4b030b634c368b9"},{"problem":77,"code":"(fn [ws] (set (filter #(< 1 (count %)) (map set (vals (group-by sort ws))))))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn ana [lst]\r\n     (reduce conj #{} (filter (fn [x] (> (count x) 1)) \r\n             (vals \r\n               (loop [ret {}\r\n                      l lst]\r\n                 (if (seq l)\r\n                   (let [k (into #{} (first l))\r\n                         v (if (ret k) (ret k) #{})]\r\n                     (recur (assoc ret k (conj v (first l))) (next l)))\r\n                   ret))))))","problem":77,"user":"4f82e14be4b033992c121c0c"},{"problem":77,"code":"(fn [arr](into #{} (map #(into #{} (second %)) (filter #(> (count (second %)) 1)(group-by sort arr)))))","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":77,"code":"(fn [xs] (set (keep #(when (> (count %) 1) (set %)) (vals (group-by sort xs)))))","user":"4fb1d7ace4b081705acca281"},{"problem":77,"code":"(fn [word-seq]\n    (let [word-set (set word-seq)\n          letter-bag (fn [word]\n                       (apply merge-with + (for [l word] {l 1})))\n          anagram? (fn [word1 word2]\n                     (= (letter-bag word1)\n                        (letter-bag word2)))]\n      (set\n        (filter #(> (count %) 1)\n          (set      \n            (for [word word-seq]\n              (set (filter (partial anagram? word) word-set))))))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"#(into #{} (map (partial into #{})\n (filter (fn [x] (< 1 (count x))) (vals (group-by (partial into #{}) %)))))","problem":77,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":77,"code":"(fn [c] \n(set (filter #(< 1 (count %))\n            (map set (vals (group-by frequencies c))))))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn\n  [xs]\n  (->> xs\n     (group-by #(sort %))\n     (vals)\n     (filter #(> (count %) 1))\n     (map set)\n     (into #{}))\n  )","problem":77,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn [s]\n(->> s \n   (group-by sort)\n   vals\n   (filter #(> (count %) 1))\n   (map set)\n   set     \n))","problem":77,"user":"526a3412e4b03e8d9a4a721e"},{"problem":77,"code":"(fn anagrams\n  [coll]\n  (set (filter #(> (count %) 1) \n               (map set (vals (group-by sort coll))))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [v]\n  (set\n    (map set (filter #(< 1 (count %)) (vals (group-by sort v))))))","problem":77,"user":"4e42f930535dc968683fc49f"},{"problem":77,"code":"(fn [words]\n  (letfn [(anagram? [a b] (= (frequencies a) (frequencies b)))\n          (find-set [sets w] (some #(when (anagram? (first %) w) %) sets))\n          (update-into [sets w]\n            (let [s (find-set sets w)]\n              (conj (disj sets s) ((fnil conj #{}) s w))))]\n    (into #{} (filter #(> (count %) 1) (reduce update-into #{} words)))\n    )\n  )","user":"589037b4e4b00487982d51d0"},{"problem":77,"code":"(fn [w] \n  (set \n    (map set \n      (filter #(> (count %) 1)\n        (vals \n          (group-by sort w))))))","user":"561047eae4b05f002753df6d"},{"code":"(fn [s] (set (filter #(> (count %) 1)\n  (vals (loop [[h & t] s, r {}] \n    (if h (if-let [k (r (sort h))] \n      (recur t (assoc r (sort h) (conj k h))) \n      (recur t (assoc r (sort h) #{h}))) r))))))","problem":77,"user":"4eabb245535d7eef30807319"},{"code":"(fn [xs] (->> (group-by  (fn [word] (reduce #(update-in %1 [%2] (fnil inc 0)) {} word)) xs) vals (filter #(> (count %) 1)) (map set) set))","problem":77,"user":"50310b8be4b05b7df5a0b84d"},{"problem":77,"code":"(fn [words]\n   (let\n       [mergeword\n        (fn [word dict]\n          (let [anakey (clojure.string/join (sort word))]\n            (assoc\n             dict\n             anakey\n             (conj (get dict anakey #{}) word))))\n\n        thendo\n        (fn [words dict thunk]\n          (if (empty? words)\n            dict\n            (fn [] (thunk (rest words) (mergeword (first words) dict) thunk))))\n        ]\n\n     (set\n      (filter\n       (fn [s] (> (count s) 1))\n       (vals (trampoline thendo words {} thendo))))))","user":"5f06caa7e4b0cf489e8d7f52"},{"problem":77,"code":"(fn [words]\n   (->> words\n        (group-by sort)\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set))","user":"52b52c29e4b0c58976d9ad38"},{"problem":77,"code":"(fn find-anagrams [words]\n  (let [pairs (map (fn [w]\n                     {(set w) [w]})\n                   words)\n        anagram-map (reduce\n                      #(merge-with concat %2 %1)\n                      pairs)\n        ]\n    (set (filter #(> (count %) 1)\n            (map #(set (last %)) (seq anagram-map))))\n    ))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":77,"code":"(fn [v]\n  (letfn [(anagram? [w s]\n                    (if (= (set w) (set (first s)))\n                             s\n                             nil))\n          (reduce-fn [ss i]\n                    (if-let [fs (some #(anagram? i %) ss)]\n                      (conj (disj ss fs) (conj fs i))\n                      (conj ss #{i})))]\n    (->> (reduce reduce-fn #{} v)\n         (filter #(> (count %) 1))\n         (into #{}))))","user":"52761edae4b03e8d9a4a74d4"},{"problem":77,"code":"(fn [xs]\n    (set (->> xs\n        (group-by sort)\n        (vals)\n        (filter #(> (count %) 1))\n        (map set))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"code":"(fn [s] \n  (->> s\n    (group-by sort)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (set)))","problem":77,"user":"4edd038c535d10e5ff6f5327"},{"code":"(fn [s] \n  (set \n    (filter #(> (count %) 1) \n            (map set \n              (vals (group-by sort s))))))","problem":77,"user":"4f280840e4b0d6649770a010"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by set coll)\n       (reduce (fn [acc [k v]]\n                 (if (> (count v) 1) \n                   (conj acc (set v)) acc))\n               #{})))","user":"5777c3d6e4b0979f8965164f"},{"problem":77,"code":"#(into #{} (for [s (vals (group-by sort %)) :when (> (count s) 1)] (set s)))","user":"57609d91e4b08062f99a4e9b"},{"problem":77,"code":"#(set (for [a (filter (fn [x] (> (count x) 1))\n                      (for [y (set (for [x %] (sort (seq x))))]\n                        (filter (fn [x] (= y (sort (seq x))))\n                                %)))]\n        (set a)))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn f [coll]\n  (let [g (fn [a b]\n        (= (set (re-seq #\".\" a))\n           (set (re-seq #\".\" b))))]\n    (set (remove #(= (count %) 1) \n                 (map set \n                      (map \n                        #(reduce \n                           (fn [a b]\n                             (if (g (first a) b)\n                               (conj a b)\n                               a)) \n                           [%] coll) \n                        coll))))))","problem":77,"user":"51750cd4e4b07031762f2ee5"},{"problem":77,"code":"(fn [words] (->> \n    ; convert each word into a \"bag\" of { letter -> count }\n     (letfn [ (->bag [word]\n               (reduce\n                 (fn [word letter]\n                   (if (contains? word letter)\n                     (assoc word letter (inc (word letter)))\n                     (assoc word letter 1)))\n                 {}\n                 word))]\n       (map (juxt ->bag identity) words))  ; seq of [bag, word] pairs\n    ; reduce pairs into map of { bag -> #{ words } }\n    (reduce\n     (fn [r e]\n       (let [[word anagram] e\n             [anagrams] [(if (contains? r word) (r word) #{})]\n             [anagrams] [(conj anagrams anagram)]]\n         (print anagrams)\n         (assoc r word anagrams)))\n     {})\n    ; eliminate keys with only one word\n    (vals)\n    (filter #(< 1 (count %)))\n    (into (hash-set))\n))","user":"4fc4eb1ee4b081705acca354"},{"problem":77,"code":"(fn anagram-sets\n  ([s acc] (cond\n            (empty? s) (into #{} (filter #(> (count %) 1) (map second acc)))\n            (contains? acc (sort (first s))) (recur (rest s) (assoc acc (sort (first s))\n                                                               (into #{} (cons (first s) (acc (sort (first s)))))))\n            :else (recur (rest s) (assoc acc (sort (first s)) #{(first s)}))))\n  ([s] (anagram-sets s {})))","user":"5ee93720e4b029a2061bbeb7"},{"problem":77,"code":"(fn [words]\n  (->>\n   (group-by frequencies words)\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)\n  )\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"code":"(fn [lista] (set (filter #(< 1 (count %)) (map set (set (vals (group-by sort lista)))))))","problem":77,"user":"4e8a0c82535d3e98b802328d"},{"problem":77,"code":"(fn [words]\n  (set\n    (->> (for [x words\n               y words\n               :when (not= x y)\n               :when (= (sort x) (sort y))]\n           x)\n        distinct\n        (group-by sort)\n        vals\n        (map set))))","user":"5880e38fe4b0f1effa3b7625"},{"problem":77,"code":"(fn anagrams [coll]\n  (set\n    (map set\n      (filter #(> (count %) 1)\n        (vals\n          (reduce\n            (fn [coll word]\n              (let [k (set word) value (get coll k [])]\n                (assoc coll k (conj value word))\n              )\n            )\n          {} coll)\n        )\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":77,"code":"(fn [x]\n(let [f (fn [l el] \n          (loop [o [] i l fnd false]\n            (if (empty? i)\n              (if fnd o (conj o [el]))\n              (let [ fi (first i) fndd (= (sort (first fi)) (sort el))]\n              (recur (if fndd (conj o (conj fi el)) (conj o fi)) (rest i) (or fndd fnd))\n           )\n          )\n           ))]\n (set (map set (filter #(> (count %) 1) (reduce (fn [a b] (f a b)) [] x))))\n)\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":77,"code":"(fn [x]\n  (let [groups (group-by val\n                         (reduce (fn [coll e]\n                                   (assoc coll e (apply str (sort e))))\n                                 {}\n                                 x))]\n    (reduce (fn [coll group]\n              (if (= 1 (count (val group)))\n                coll\n                (conj coll (reduce (fn [set e]\n                                     (conj set (first e)))\n                                   #{}\n                                   (val group)))))\n            #{}\n            groups)))","user":"51a7fe50e4b08d8ec191b803"},{"problem":77,"code":"#(set (for [[_ v] (group-by sort %) :when (next v)] (set v)))","user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn ana [words]\n\t(->> (group-by set words)\n\t(vals)\n\t(filter #(> (count %) 1))\n\t(map set)\n\t(set)\n))","problem":77,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [seq]\n   (let [mapize (fn [w1](reduce #(let [[k v] (first %2)](merge  %1 (if (contains? %1 k) {k (inc (%1 k))}  %2)))  (for [c w1] {c 1})))]\n      (set (map set (filter #(> (count %) 1)(doall (map #(let [s_map (mapize %1)](for [s seq :when (= s_map (mapize s))]s)) seq)))))\n   )\n)","problem":77,"user":"522eba30e4b01cdb292c5f0e"},{"problem":77,"code":"(fn [words]\n  (let [freqs #(frequencies (clojure.string/split % #\"\"))]\n    (->> (group-by freqs words)\n         vals\n         (filter #(< 1 (count %)))\n         (map set)\n         set)))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":77,"code":"(fn af [coll]\n  (->>\n    coll\n    (group-by #(set (seq %)))\n    (vals)\n    (map set)\n    (filter #(> (count %) 1))\n    (set)\n   ))","user":"5bc28638e4b07a9b28b10033"},{"problem":77,"code":"(fn [coll](->> coll (group-by sort) vals (filter #(> (count %) 1)) (map set) set))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn anagrams [words]\n  (set (filter \n        #(< 1 (count %))\n        (map\n         (fn [word]\n           (set\n            (filter #(= (group-by identity word) (group-by identity %)) words)))\n         words))))","problem":77,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn [coll]\n  (set (map set \n            (filter #(> (count %) 1)\n                    (vals (reduce (fn [m v]\n                                    (let [k (apply str (sort v))]\n                                      (assoc m k (cons v (m k []))))) {} coll))))))","problem":77,"user":"4e6f1b7a535d5021c1a89618"},{"code":"(fn [w]\n  (set (->> w\n            (group-by frequencies)\n            vals\n            (map set)\n            (filter #(> (count %) 1)))))","problem":77,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn [coll]\n  (let [dmp (distinct (map set coll))]\n    (into #{}\n      (filter #(> (count %) 1)\n        (for [d dmp]\n          (into #{}\n            (filter (complement nil?)\n              (for [x coll]\n                (if (= d (set x))\n                  x)))))))))","problem":77,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn [xs] (->> (group-by (comp sort seq) xs) vals (filter #(> (count %) 1)) (map #(into #{} %) ) (into #{})))","problem":77,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":77,"code":"(fn [coll]\n  (letfn [(word-anagrams [word coll]\n            (filter (fn [i] (= (sort (seq word)) (sort (seq i)))) coll))]\n       (set\n         (filter #(> (count %) 1)\n                 (map #(set (word-anagrams % coll)) coll)))))","user":"5e348945e4b0650de70e2b1d"},{"problem":77,"code":"(fn [coll]\n    (->> (reduce (fn [r v] (conj r (set (filter #(= (sort (seq v)) (sort (seq %))) coll)))) #{} coll)\n         (filter #(< 1 (count %)))\n         (set)))","user":"5a9bfd57e4b0d174b936c7d0"},{"code":"(fn [xs]\n  (->> xs\n   (group-by sort)\n   vals\n   (map set)\n   (filter #(> (count %) 1))\n   set))","problem":77,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn [words] \n  (let [hash-key #(apply str (sort (.toLowerCase %)))\n        groups (vals (group-by hash-key words))]\n    (set (map set (filter #(> (count %) 1) groups)))))","problem":77,"user":"51fa7154e4b0f1313d4689da"},{"problem":77,"code":"(fn [ws]\n    (into #{} (map set (filter #(not (empty? (rest %))) (vals (group-by sort ws))))))","user":"5566d812e4b0c656e3ff1837"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by frequencies)\n       (remove (comp #{1} count val))\n       (map (comp set val))\n       (set)))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":77,"code":"(fn [words]\n  (set (filter #(> (count %) 1)\n          (for [x words] (set (filter (fn [y] (= (set y) (set x))) words))))))","user":"4ec6297b535d6d7199dd36c4"},{"code":"#(set \n  (filter \n    (fn[a](> (count a) 1)) \n      (for [x %] \n        (set (filter (fn[a] (= (set a) (set x))) %)))))","problem":77,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn [words]\r\n  (letfn [(add-word [mm word]\r\n            (let [freq (frequencies word)]\r\n              (assoc mm freq (conj (get mm freq #{}) word))))]\r\n    (set (filter #(> (count %) 1) (map second (reduce add-word {} words))))))","problem":77,"user":"4ddc1c89535d02782fcbea01"},{"problem":77,"code":";(fn [x]\n;  (set (for [ls (vals (group-by #(set (filter  (set  %) %)) x))\n;             :when (> (count ls) 1)]\n;        (set ls))))\n\n(fn [l] \n  (reduce \n   (fn [a [k v]] (if (> (count v) 1) (conj a (set v)) a)) \n   #{} (group-by set l)))","user":"5c2836ebe4b07e362c2305d4"},{"problem":77,"code":"(fn [words]\n  (->> (reduce (fn [chars->words word]\n                 (let [chars (into #{} (seq word))]\n                   (update-in chars->words [chars] (fnil conj #{}) word)))\n               {}\n               words)\n       (remove (fn [[_ words]] (= 1 (count words))))\n       vals\n       (into #{})))","user":"52be58d7e4b07a9af579231d"},{"code":"(fn find-anagrams [s]\n  (set (map set (filter #(< 1 (count %))\n                        (vals (group-by #(set %)\n                                        s))))))","problem":77,"user":"531d34cfe4b08068f379edac"},{"code":"(fn [s]\r\n   (loop [[x & xs :as xss] s acc #{}]\r\n     (println (sort x) xs)\r\n     (if (seq xs)\r\n       (recur (filter #(not= (sort %) (sort x)) xs) \r\n              (conj acc (set (filter #(= (sort %) (sort x)) xss))))\r\n       (set (filter #(> (count %) 1) acc)))))","problem":77,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn [s]\n  (set (filter #(< 1 (count %))\n    (reduce (fn [anagrams word]\n      (let [bucket\n        (first (filter (fn [b]\n          (= (sort word) (sort (first b)))) anagrams))]\n        (if (nil? bucket)\n          (conj anagrams #{word})\n          (conj (disj anagrams bucket)\n            (conj bucket word))))) #{} s))))","problem":77,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":77,"code":"(fn [col]\n  (set\n    (map\n      set\n      (filter\n        #(> (count %) 1)\n        (vals\n          (group-by\n            (fn [w]\n              (sort (seq w))\n            )\n            col\n          )\n        )\n      )\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":77,"code":"(fn [coll]\n    (into #{} (map #(into #{} %) (filter #(> (count %) 1) (map last (group-by sort coll))))))","user":"55205564e4b08d5046aa8a60"},{"code":"#(->> % (group-by set) vals (map set) (filter second) set)","problem":77,"user":"519b2570e4b0ac1b7dced6a3"},{"problem":77,"code":"(fn [words]\n   (->> words\n        (reduce (fn [s w] \n                  (let [is-a (fn [w1 w2] (= (sort w1) (sort w2)))\n                        g (group-by #(is-a w (first %)) s)\n                        in (g true [])\n                        out (g false [])]\n                    (if (empty? in)\n                      (conj s #{w})\n                      (into out (map #(conj % w) in)))))\n                #{})\n        (filter #(> (count %) 1))\n        set\n        ))","user":"59156f0be4b0163c97b36f3d"},{"code":"(comp set\n      (partial map set)\n      (partial filter #(> (count %) 1))\n      vals\n      (partial group-by sort))","problem":77,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":77,"code":"#(set (map set (filter (fn [el] (< 1 (count el) ) ) (vals (group-by sort %)))))","user":"5776558ee4b0979f89651633"},{"code":"(fn anagram-group\n  [coll]\n  (set (filter #(> (count %) 1) (map set (vals (group-by frequencies coll))))))","problem":77,"user":"511b233ae4b07ab9ec456180"},{"code":"#(set (map set (map second (filter (fn[x](>= (count (second x)) 2))(group-by (fn[x](identity (set x))) %)))))","problem":77,"user":"4ed2dd98535d44c135fd68e2"},{"problem":77,"code":"(fn [a] (set (map set (remove #(< (count %) 2) (vals (group-by #(set %) a))))))","user":"52c08c59e4b07a9af5792351"},{"code":"(fn[sow]\n   (set (for[e (group-by sort sow) :when (> (count (fnext e)) 1)] (set (fnext e)))))","problem":77,"user":"4fb86dc9e4b081705acca2d8"},{"problem":77,"code":"(fn [w]\n  (->>\n   (group-by #(sort %) w)\n   (vals)\n   (map set)\n   (filter #(< 1 (count %)))\n   (set)))","user":"57533bc1e4b02ea1147992a6"},{"problem":77,"code":"(fn [words]\n  (set (remove #(= (count %) 1) \n\t(letfn [(same? [a b]\n\t\t(= (sort (seq b)) (sort(seq a))))]\n\t\t(reduce (fn [acc word]\n\t\t\t(if-let [grp (some #(if(same? (first %) word) %) acc)]\n\t\t\t\t(->\n\t\t\t\t\tacc\n\t\t\t\t\t(disj grp)\n\t\t\t\t\t(conj (conj grp word)))\n\t\t\t\t(into acc #{#{word}})))\n\t\t#{} words)))))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn anagram-finder [words]\n (letfn [(insert [x c pos]\n           (str\n             (subs x 0 pos) \n             c \n             (subs x pos)))\n         (spray [x c] \n           (map \n            #(insert x c %)\n            (range (inc (count x)))))\n         (perm [l] (let [s (first l) r (rest l)]\n                     (if (empty? r)\n                       (doall (vector (str s)))\n                       (distinct (flatten (map #(spray % s) (perm r)))))))]\n   (let [anagrams (map #(set (perm %)) words)]\n     (set (distinct \n            (filter (fn [r] (> (count r) 1)) (map\n                                               (fn [a_set] \n                                                 (set \n                                                   (filter #(contains? a_set %) words)))\n                                               anagrams)))))))","problem":77,"user":"52319066e4b0e2e8de81d1e9"},{"problem":77,"code":"(fn find-anagrams [words]\n  (set (filter #(> (count %) 1)\n               (map #(set %)\n                    ;; words which have the same frequencies of characters are anagrams\n                    (vals (group-by frequencies words))))))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [s]\n (->> s\n   (group-by #(sort (seq %)))\n   vals\n   (filter next)\n   (map set)\n   set))","problem":77,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn anagram-finder [words]\n  (if (empty? words)\n    #{}\n    (let [anagram? (fn [x y]\n                     (= (sort x) (sort y)))\n          [word & words] words\n          anagrams (->> words\n                        (filter (partial anagram? word))\n                        set)]\n      (into (if (zero? (count anagrams))\n              #{}\n              #{(conj anagrams word)})\n            (->> words\n                 (filter (complement (partial anagram? word)))\n                 anagram-finder)))))","problem":77,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn q77 [coll]\n  (->>\n    (group-by #(sort %) coll)\n    vals\n    (remove #(= 1 (count %)))\n    (map set)\n    set))","problem":77,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn [words] (set (map set (filter #(not= (count %) 1) (vals (group-by sort words))))))","problem":77,"user":"52fd994ae4b047fd5583702f"},{"problem":77,"code":"(fn [words]\n  (let [alphamap\n        (zipmap (map char (range (int \\a) (inc (int \\z))))\n                (repeat 0))]\n    (letfn [(letter-count\n              [word]\n              (reduce\n               (fn [counts letter]\n                 (update-in counts [letter] inc))\n               alphamap\n               word))]\n      (set\n       (filter #(> (count %) 1)\n               (map set (vals (group-by letter-count words))))))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":77,"code":"#(reduce-kv (fn [m k v]\n              (if (= 1 (count v))\n                m\n                (conj m (set v))))\n            #{}\n            (group-by sort %))","user":"54c5cc17e4b045293a27f624"},{"problem":77,"code":"(fn ang [words]\n  (loop [anagrams #{}\n         remwords words]\n    (if (empty? remwords)\n      (set (filter #(not= #{} %) anagrams))\n      (let [current-word (first remwords)\n            is-anagram? (fn [x] (and \n                                     (= (count x) (count current-word))\n                                     (= (set x) (set current-word))))\n            ac (set (filter is-anagram? remwords))\n            new-anagrams (if (not= ac #{current-word})\n                           ac\n                           #{})\n            rest-words (filter (complement new-anagrams) (rest remwords))]\n      (recur (conj anagrams new-anagrams) rest-words)))))","user":"5da4fc6be4b000c986472bff"},{"code":"(fn [x] \n  (let [cset (comp set sort)\n        ms (map #(hash-map (cset %) [%]) x)\n        ]\n      (->> ms\n        (apply merge-with concat)\n        vals\n        (filter #(> (count %) 1))\n        (map set)\n        set\n      )))","problem":77,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn anagram-finder\n    ([coll]\n       (anagram-finder coll #{}))\n    ([[fst & rst :as coll] acc]\n       (letfn ([anagram? [s] (= (sort fst) (sort s))])\n         (if (empty? coll) acc\n             (anagram-finder\n              (remove anagram? rst)\n              (if (empty? (filter anagram? rst))\n                acc\n                (conj acc (set (conj (filter anagram? rst) fst)))))))))","problem":77,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn [s] \r\n  (set\r\n    (remove #(< (count %) 2)\r\n      (for [el s]\r\n         (set (filter (partial #(= (sort %1) (sort %2)) el) s))))))","problem":77,"user":"4e8768f6535dceadca469850"},{"problem":77,"code":"(fn [row]\n  (set (remove #(< (count %) 2)(map set(vals (group-by sort row ))))))","user":"5576d3c7e4b05c286339e074"},{"problem":77,"code":"#(->> (group-by sort %) (vals) (filter (fn [s] (> (count s) 1))) (map set) (set))","user":"5f2c02d1e4b033932238a65f"},{"problem":77,"code":"(fn [x] (set\n  (filter\n    #(> (count %) 1)\n    (vals\n      (reduce (fn [acc [k v]]\n                (assoc acc\n                  k\n                  (clojure.set/union (get acc k) #{v})))\n              {}\n              (map #(vec\n                      [(clojure.string/join \"\"\n                                            (sort\n                                              (clojure.string/split\n                                                %\n                                                #\"\")))\n                       %]) x))))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":77,"code":"(fn anagram-finder\n  [coll]\n  (->> coll\n       (group-by #(vector (count %) (set %)))\n       (filter #(> (count (last %)) 1))\n       (map #(set (last %)))\n       (into #{})))","user":"4fc524aae4b081705acca37e"},{"problem":77,"code":"(fn [strs]\n (->> strs\n      (group-by frequencies)\n      vals\n      (filter (fn [vs] (> (count vs) 1)))\n      (map set)\n      set))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn[s](set (keep #(if (> (count %) 1) (set %)) (vals (group-by sort s)))))","problem":77,"user":"5138d08be4b0a5db03d727db"},{"problem":77,"code":"(fn [v]\n  (letfn [(alphabetized [s] (apply str (sort s)))]\n    (set (map set\n            (filter #(>= (count %) 2)\n                    (partition-by alphabetized\n                        (sort-by alphabetized v)))))))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"#(set (map set (vals (filter (fn [[k v]] (< 1 (count v)))\n                               (group-by set %)))))","problem":77,"user":"4e705861535d5021c1a89635"},{"problem":77,"code":"#(->> (group-by sort %) \n      (map (comp set val)) \n      (filter (comp pos? dec count)) \n      (into #{}))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":77,"code":"(fn [xs]\n  (->>\n    (group-by frequencies xs)\n    (map second)\n    (filter #(> (count %) 1))\n    (map set) (set)))","user":"54ca35c6e4b057c6fda3a254"},{"code":"(fn [s] (set (filter #(< 1 (count %)) (map set (vals (group-by sort s))))))","problem":77,"user":"4db92654535d1e037afb21a0"},{"problem":77,"code":"(fn [ss]\n  (set (filter #(< 1 (count %1))\n    (for [s ss]\n      (set (filter #(= (frequencies s) (frequencies %1)) ss))))))","user":"4f3b5219e4b0e243712b1f2a"},{"problem":77,"code":"(fn [coll] (set (filter #(> (count %) 1) (map set (vals (group-by frequencies coll))))))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn [xs]\n  (set (map set (filter #(< 1 (count %)) \n    (vals (group-by #(sort (seq %)) xs))))))","problem":77,"user":"501c1492e4b086d93747d180"},{"problem":77,"code":"(fn [v] (set (map set (filter #(> (count %) 1) (vals (group-by (fn [s] (set (seq s))) v))))))","user":"5b198eace4b03cfeda66ecbb"},{"code":"(fn [s]\n  (set (filter #(< 1 (count %)) (.values ((fn [ss r]\n    (if (= [] ss)\n        r\n      (recur (rest ss) ((fn [i]\n        (let [k (sort i)]\n        (if (contains? r k)\n            (conj r [k (conj (r k) i)])\n          (conj r [k #{i}]))))(first ss))))) s {})))))","problem":77,"user":"507fbd77e4b089ade05efbd3"},{"problem":77,"code":"(fn [v]\n  (set (map set \n            (filter #(>= (count %) 2)\n                    (vals (group-by \n                           sort \n                           v))))))","user":"50e90813e4b033b0e80d11e7"},{"problem":77,"code":"(fn [ws]\n  (into #{} (filter #(< 1 (count %))\n   (for [w ws]\n       (let [s (sort w)]\n            (into #{} (filter #(= s (sort %)) ws)))))))","user":"5353afa0e4b084c2834f4b03"},{"problem":77,"code":"(fn [word-seq]\n  (letfn [(anagrams? [a b] (= (into #{} a) (into #{} b)))\n          (anagram-set [a bs] (into #{} (filter (fn [b] (anagrams? a b)) bs)))\n          (anagram-sets [words]\n            (if (seq words)\n              (let [anagrams (anagram-set (first words) words)\n                    rm-words (apply (partial disj (into #{} (rest words))) (into '() anagrams))]\n                (cons anagrams (anagram-sets rm-words)))))]\n    (into #{} (filter #((complement =) 1 (count %))(anagram-sets  word-seq)))))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":77,"code":"(fn [inputs]\n   (->> inputs\n        (group-by sort)\n        (map second)\n        (filter #(> (count %) 1))\n        (map (partial into #{}))\n        (into #{})))","user":"55f2e47de4b06e875b46ce4d"},{"code":"(fn [v]\n(set\n  (remove #(< (count %) 2)\n    (map #(set (clojure.string/split % #\",\"))\n      (vals \n        (apply merge-with \n          #(clojure.string/join \",\" %&)\n          (map hash-map (map sort v) (seq v))\n        )\n      )     \n    )\n  )\n)\n)","problem":77,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":77,"code":"(fn anagrams\n  [strs]\n  (->> (group-by frequencies strs)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn [s]\n  (->> s\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"4dc21233535d020aff1edf92"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"580bd81ee4b0849f6811b711"},{"problem":77,"code":"(fn [words]\n   (->> (map (fn [w] [(sort w) w]) words)\n      (group-by first)\n      (map (fn [[k v]] (into #{} (map second v))))\n      (filter #(> (count %) 1))\n      (into #{})))","user":"55895eade4b059ccff29b202"},{"problem":77,"code":"(fn anagrams\n  [words]\n  (set (filter #(> (count %) 1)  (vals (reduce #(let [sw (apply str(sort (seq %2)))]\n                                              (if (%1 sw)\n                                                (assoc %1 sw (into (%1 sw) [%2]))\n                                                (into %1 [[sw #{%2}]]))) {} words)))))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":77,"code":"(fn anagrams [s]\n  (->> s\n       (map #(hash-map \n                (clojure.string/join (sort %))\n                (list %)))\n      (apply merge-with concat)\n      vals\n      (map set)\n      (filter #(> (count %) 1))\n      (set)\n      ))","user":"5710140fe4b09c608db7042e"},{"code":"#(->> % (group-by sort) vals (filter next) (map set) set)","problem":77,"user":"4e8f1ac6535d65386fec2146"},{"problem":77,"code":"(fn b [x]\n  (->> x\n       (mapv (fn [a]\n               [(into #{} a) a]))\n       (group-by first)\n       (vals)\n       (filterv #(< 1 (count %)))\n       (mapv #(into #{} \n                    (mapv second %)))\n       (set)))","user":"59bac5c9e4b0a024fb6ae3ed"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by #(group-by identity %))\n       vals\n       (map #(into #{} %))\n       (filter #(> (count %) 1))\n       (into #{})\n       )\n  )","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn [s]\n  (set (filter #(> (count %) 1)\n               (map set (vals (group-by sort s))))))","problem":77,"user":"4fc3a72ae4b081705acca342"},{"problem":77,"code":"(fn [words]\n(letfn [(base-letters [word] (str (sort (seq word))))]\n  (set (map set (filter #(< 1 (count %)) (partition-by base-letters (sort-by base-letters words)))))))","user":"552456e3e4b0882d96d091c2"},{"problem":77,"code":"(fn [coll]\n    (let [ count-char-map (fn [x] (apply (partial merge-with + ) (map  #(sorted-map % 1) x)))\n          s (group-by count-char-map  coll)\n          lst (filter #(< 1 (count (val %))) s)]\n      (set (map #(set (val %)) lst))))","user":"55aa1637e4b0988bba2ad949"},{"problem":77,"code":"(fn [c]\n    (->> c\n         (group-by sort)\n         (vals)\n         (filter #(> (count %) 1))\n         (map set)\n         (set)))\n\n;; (fn [c]\n;;     (->> c\n;;          (group-by #(sort %))\n;;          (map #(set (last %)))\n;;          (remove #(<= (count %) 1))\n;;          (set)))\n\n;; #(->> (group-by frequencies %)\n;;         vals\n;;         (map set)\n;;         (filter second)\n;;         set)","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [words]\n  (set (filter #(>= (count %) 2)\n               (map (comp set val)\n                    (group-by sort words)))))","problem":77,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [x]\n  (->> (group-by sort x)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"52fb64b7e4b047fd55837009"},{"problem":77,"code":"#(reduce (fn [c [k v]] (if (> (count v) 1) (conj c (set v)) c)) #{} (group-by sort %))","user":"549a176ce4b0f3d1d8e70f69"},{"problem":77,"code":"(fn [v]\n  (->> v\n       (group-by (fn [w] (apply merge-with + (map #(hash-map % 1) w))))\n       (filter #(> (count (val %)) 1))\n       (map (comp set val))\n       set))","user":"55ac07afe4b03311e7b7328f"},{"problem":77,"code":"(fn f\n  [col]\n  (->> col\n       (reduce (fn [acc cur]\n                 (let [k (set(seq cur))]\n                   (if (contains? acc k)\n                     (update-in acc [k] #(conj % cur))\n                     (assoc acc k #{cur})))) {})\n       (vals)\n       (filter #(< 1 (count %)))\n       (into #{})))","user":"5da7176ae4b000c986472c13"},{"problem":77,"code":"(fn [ns] (->> ns (group-by sort) vals (sort-by count >) (partition-by count) first (map (partial into #{})) (into #{})))","user":"54d7e277e4b0a52adc2e2031"},{"problem":77,"code":"(fn [tt] (into #{} (map (partial into #{}) (filter #(> (count %) 1) (vals (group-by #(into #{} (clojure.string/split % #\"\")) tt))))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn anagram-sets [allwords]\n  (set (map set\n         (filter #(>= (count %) 2)\n           (vals (group-by set allwords))))))","problem":77,"user":"515737f0e4b0b0b4b87062d0"},{"problem":77,"code":"(fn [s]\n (into \n  #{}\n  (map set\n       (filter \n        #(> (count %) 1)\n        (map val \n             (group-by \n              sort s))))))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn [x]\n  (->>\n   (group-by #(apply str (sort %)) x)\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)\n   )\n  )","problem":77,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn [ws]\r\n       (set (filter #(> (count %) 1)\r\n         (vals (reduce #(assoc %1 (set %2) (set (conj (%1 (set %2)) %2))) {} ws)))))","problem":77,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [s] (set (map set (vals (filter #(next (second %)) (group-by frequencies s))))))","problem":77,"user":"4eb13d60535d7eef3080733f"},{"problem":77,"code":"(fn anagrams [col]\n  (letfn [(anagram? [a b] (= (frequencies a) (frequencies b)))]                              \n    (set (filter #(> (count %) 1) (map #(set (filter (partial anagram? %) col)) col)))))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":77,"code":"(fn [words]\n  (letfn [\n          (string->set [string]\n                       (into #{} string))\n          (build-map [words & {:keys [word-map] :or {word-map {}}}]\n                     (if (empty? words)\n                       word-map\n                       (let [word (first words)\n                             word-key (string->set word)\n                             words-rest (rest words)]\n                         (if (contains? word-map word-key)\n                           (recur words-rest\n                                  {:word-map (into word-map {word-key (into (word-map word-key) #{word})})})\n                           (recur words-rest {:word-map (into word-map {word-key #{word}})})))))\n          ]\n                     \n          (into #{} (filter #(> (count %) 1) (vals (build-map words))))))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":77,"code":"(fn anagramfinder [ss]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort ss))))))","user":"57a49951e4b0a966079561e5"},{"problem":77,"code":"(fn [v]\n  (->> (group-by sort v)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"58fc52cee4b0438e51c2cf95"},{"problem":77,"code":"#(into #{} (map (partial into #{}) (filter (fn [x] (> (count x) 1)) (vals (group-by (fn [x] (frequencies x)) %)))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn [words]\n  (->> (group-by frequencies words)\n    (map (comp set second))\n    (filter #(> (count %) 1))\n    set))","problem":77,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":77,"code":"#(set (->> (vals (group-by set %))\n           (filter (comp (partial < 1) count))\n           (map set)))","user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn anagrams [x]\n\"Assumes the input is all lowercase.\"\n     (set (map set (filter #(> (count %) 1) (vals (group-by sort \n                                                            x))))))","problem":77,"user":"532727bae4b09d4e7a9b54fa"},{"problem":77,"code":"(fn [s]\n  (set (filter #(> (count %) 1)\n           (map set (vals (group-by sort s))))))","user":"55f8180fe4b06e875b46ceba"},{"code":"(fn [w] (into #{} (map set (filter #(< 1 (count %)) (vals (group-by sort w))))))","problem":77,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [x](set (map set (filter #(> (count %) 1)\n        (vals (group-by #(sort %) x))))))","problem":77,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn f [l]\n  (set (filter #(> (count %) 1) (map set (vals (group-by #(set (seq %)) l))))))","problem":77,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [in]\n    (set \n      (filter #(> (count %) 1)\n        (vals \n         (reduce \n          (fn [hm el]\n            (let [pel (sort el)]\n              (if (contains? hm pel)\n                (merge-with conj hm {pel el})\n                (merge hm {pel #{el}})))) \n          {} \n          in)))))","problem":77,"user":"51aefceee4b09397d5109797"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words\n       (map #(reduce\n              (fn [acc word]\n                (if (= (set (last acc)) (set word))\n                  (conj acc word) acc))\n              [%] words))\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn [ws]\n  (letfn [(anagram? [wa wb]\n            (= (sort wa) (sort wb)))\n          (find-anagrams [w ws]\n            (-> (reduce (fn [ac nw] \n                          (if (anagram? w nw)\n                            (conj ac nw)\n                            ac))\n                        []\n                        ws)\n                set))]\n    (let [sets (reduce (fn [ac nw]\n                         (conj ac (find-anagrams nw ws)))\n                       []\n                       ws)]\n      (-> (filter #(> (count %) 1) sets)\n          set))))","problem":77,"user":"51bb08a4e4b0fe3ecfb46446"},{"problem":77,"code":"(fn [in]\n         (letfn [(is-anagram [x y]\n                   (let [xmap (reduce #(assoc %1 %2  (inc (get %1 %2 0))) {} x)\n                         ymap (reduce #(let [val (get %1 %2 0)]\n                                         (if (= val 1)\n                                           (dissoc %1 %2)\n                                           (assoc %1 %2 (dec val) )))\n                                      xmap  y) ]\n                     (empty? ymap)))]\n           (loop [xs in anas #{}]\n                    (if-not (seq xs) anas\n                            (let [y (first xs)\n                                  ys (rest xs)\n                                  {yAnas true noAnas false}  (group-by #(is-anagram y %) xs)\n                                  nAnas (if (> (count yAnas) 1) (conj anas (set yAnas )) anas) ]\n                              \n                              (recur noAnas nAnas))))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":77,"code":"(fn [words] (set (filter #(< 1 (count %)) (map set (vals (group-by #(apply sorted-set %) words))))))","user":"57625c18e4b0994c1922fba4"},{"problem":77,"code":"(fn [l] (->> l (group-by sort) vals (filter #(> (count %) 1)) (map set) set))","user":"5703eda3e4b08d47c9778200"},{"problem":77,"code":"(fn [coll] \n  (into #{} \n        (map \n         (fn [[k v]] (set v)) \n             (filter (fn [[k v]] (> (count v) 1)) (#(group-by (fn [s] (apply str (sort (vec s)))) %) coll)))))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [c](->>  c \n       (group-by sort )\n       (filter #(<= 2 (count (val %))))\n       (map #(set (second %)))\n       (set)))","problem":77,"user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn [s]\n  (->> s\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","problem":77,"user":"4f38b7d9e4b0e243712b1ee0"},{"problem":77,"code":"(fn [ip] (set (map set (distinct (filter #(>= (count %) 2) (map #(filter (fn [st] (= % (set st))) ip) (map set ip)))))))","user":"52faec2ee4b047fd55837004"},{"code":"#(->>\n   %\n   (group-by sort)\n   vals\n   (filter second)\n   (map set)\n   set\n)","problem":77,"user":"513b43ede4b067e25a345ed3"},{"problem":77,"code":"(fn find-anagrams [x]\n  (reduce-kv (fn [acc k v] (if (> (count v) 1) (conj acc (set v)) acc)) #{} (group-by #(group-by identity %) x)))","user":"554dfe97e4b00713264bd98c"},{"code":"(fn [v]\n   (apply hash-set\n   (map #(apply hash-set %)\n          (filter #(> (count %) 1) \n          (partition-by #(sort %) \n                (sort-by #(apply str (sort %)) \n                         v))))))","problem":77,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [words]\n(let [anagram-lists\n  (let [letter-counts (map \n    (fn [letterset word]\n      (map \n        (fn [letter]\n          [letter (count (filter (partial = letter) word))]\n             ) letterset ))\n       (map #(set %) words)\n       words)]\n    (map #(map (fn [w] (= w %)) letter-counts) (set letter-counts)))]\n  (set (map (fn [l-of-words] (set (map first l-of-words))) (filter #(> (count %) 1) (map #(filter (fn [x] (second x))(apply list %)) (map #(zipmap words %) anagram-lists)))\n  ))))","problem":77,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [c] (set (map set (filter #(< 1 (count %)) (vals (group-by set c))))))","problem":77,"user":"4f83665ee4b033992c121c1c"},{"problem":77,"code":"; First one was initial try. Second one is much cleaner.\n;(fn ana-set [coll]\n;  (let [match? (fn [x y] (= (frequencies x) (frequencies y)))]\n;    (loop [c coll acc #{}]\n;      (if (empty? c) \n;        (set (filter #(< 1 (count %)) acc))\n;        (recur (get (group-by #(true? (match? (first c) %)) c) false)\n;               (conj acc\n;                     (set\n;                      (get\n;                       (group-by #(true? (match? (first c) %)) c) true))))))))\n\n(fn ana-set2[v]\n  (into #{}\n        (map set\n             (filter #(> (count %) 1)\n                     (map val (group-by sort v))))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":77,"code":"(fn [x]\n  (->> x\n       (group-by (fn [w] (reduce #(+ %1 (int %2)) 0 w)))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn anagrams [words]\n  (->> words\n       (group-by sort)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [coll] (set (filter #(> (count %) 1) (vals (reduce #(let [key (sort (into [] %2))] (assoc % key (set (conj (% key) %2)))) {} coll)))))","problem":77,"user":"51e28063e4b08e53a149f0f2"},{"problem":77,"code":"(fn [c]\n    (->> (group-by frequencies c)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"538ca203e4b0b51d73faae5f"},{"problem":77,"code":"(fn [wordlist]\n    (letfn [(digit-count [s]\n      (let [distinct-letters (set s)]\n\t(apply merge (map (fn [c] (hash-map c (count (filter #(= c %) s)))) distinct-letters))))]\n        (into #{}\n\t(map second\n             (filter #(> (count (second %)) 1)\n                     (apply merge-with clojure.set/union\n                            (map (fn [x] (hash-map (digit-count x) (set [x])))\n                                 wordlist)))))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn anagram-finder [coll]\r\n  (set (for [ss (vals (group-by #(set %) coll))\r\n             :when (>= (count ss) 2)] (set ss))))","problem":77,"user":"4dd7d040535d2dad7130b5d6"},{"problem":77,"code":"(fn[x](set (filter #(> (.size %) 1) (map set (vals (group-by sort x))))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"#(set (map (comp set second) (filter (fn [[a b]] (> (count b) 1)) (group-by set %))))","problem":77,"user":"536973e5e4b0243289761e9e"},{"code":"#(->> (group-by set %)\n      (vals)\n      (map set)\n      (filter second)\n      (set))","problem":77,"user":"50f9739ce4b0e7c80cb15a4d"},{"code":"#(set  (filter (fn [x] (> (count x) 1 )) (map set  (vals (group-by set %)))))","problem":77,"user":"4e5fb634535d8ccf87e9fe4a"},{"code":"(fn  [words]\n(let [word_letters (fn [words3] \n  (map\n    (fn [word] {:word (:word word) :letters (reduce (fn [acc letter]\n            (assoc acc letter (inc (acc letter 0))\n                   )) {} (:letters word))}\n      )\n    words3\n    ))\n      sort_letters2 (fn [word] {:word word :letters ((comp (partial apply str) sort) word)})\n      map_words  (map sort_letters2 words)\n      sor (sort-by #(:letters %) map_words)\n      part2 (partition-by #(:letters %) (word_letters sor))\n      filt (filter #(> (count %) 1) part2)\n      fin (map (partial map #(:word %)) filt)\n      fin2 (set (map set fin))]\n  \tfin2)\n  )","problem":77,"user":"4edf95a8535d10e5ff6f5342"},{"problem":77,"code":"(fn find-all-anagrams [words]\n  (letfn [(anagram-pair? [word1 word2]\n            (= (frequencies word1) (frequencies word2)))]\n    (reduce\n      (fn [acc w]\n        (let [buddies (filter (partial anagram-pair? w) words)]\n          (if (= (count buddies) 1)\n            acc\n            (conj acc (set buddies)))))\n      #{}\n      words)))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":77,"code":"(fn af\n    ([v]\n     (af v (keys (filter #(> (val %) 1) (frequencies (map frequencies v)))) #{}))\n    ([v f r]\n     (if (empty? f)\n       r\n       (af v (rest f) (conj r (set (filter #(= (first f) (frequencies %)) v))))\n       )))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn [xs] (->> (interleave (map #(-> % sort str) xs) xs)\n              (partition 2)\n              (reduce (fn [m e] (let [[k v] e] \n                                  (update-in m [k] \n                                             (fn [ov] \n                                               (if (nil? ov) #{v} (conj ov v)))))) {})\n              (filter #(-> % second count (> 1)))\n              vals\n              (into #{})))","problem":77,"user":"4ef9c8f9535dced4c769f26b"},{"problem":77,"code":"(fn solve [words] (let [pairs (map #(list % (clojure.string/join (sort %))) words)\n                        sorted-pairs (sort-by second pairs)\n                        grouped-pairs (partition-by second sorted-pairs)\n                        larger-than-one-groups (filter #(> (count %) 1) grouped-pairs)\n                        set-from-pairs #(set (map first %))]\n                    (set (map set-from-pairs larger-than-one-groups))))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":77,"code":"(fn [words]\n  (->> (group-by #(sort %) words)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map #(into #{} %))\n       (into #{})))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [coll]\n  (letfn [(perms [word] (if (> 2 (count word))\n                          [word]\n                          (for [i (range 0 (count word))\n                                [x [y & z]] [(split-at i word)]\n                                sub (perms (concat x z))]    \n                            (apply str (cons y sub)))))]\n    (set\n     (keep (fn [[k [x & r :as v]]] (when r (set v)))\n           (group-by (comp set perms) coll)))))","problem":77,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":77,"code":"(fn [s]\n    (into #{}\n          (map set\n               (filter #(> (count %) 1)\n                       (vals (group-by sort s))))))","user":"55c5b55fe4b0e31453f649b5"},{"problem":77,"code":"(fn [c] (set (map set (filter #(< 1 (count %)) (vals (group-by sort c))))))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn [l] \n  (letfn [\n      (sorted-chs [s] (sort compare (concat s \"\")) )\n      (is-anag [& s] ( apply = (map sorted-chs s) ))\n      (group-anags [ l ] ( \n        (fn [l c] ( let [\n                p (group-by #(is-anag % (first l) ) l )\n                t (p true)\n                f (p false)\n                ] ( if (empty? l) c \n                  (recur f (cons t c ) ) ) )) l [] ) )\n      (filter-anags [l] ( filter #(< 1 (count %)) (group-anags l) ))\n             ] \n    ( into #{} (map #( into #{} % ) (filter-anags l) )  )))","problem":77,"user":"4fc43a8ee4b081705acca346"},{"code":"(fn [col] (set (map #(set %) (filter #(< 1 (count %) ) (vals (group-by (fn[a] (sort (seq a)))  col))))))","problem":77,"user":"50463347e4b011c5dfee771e"},{"code":"(fn [x] (into #{} (filter (fn [h] (> (count h) 1 )) (map (fn [k] (into #{} (map (fn [j] (first j)) k))) (vals ( group-by (fn [z] (second z)) \n                (map (fn [y] (vector y (apply str (sort-by identity ( into [] y))) )) x)))))))","problem":77,"user":"5296008fe4b02ebb4ef7502a"},{"code":"(fn [w] (set (filter #(> (count %) 1) (map (comp set second)\n        (group-by sort w)))))","problem":77,"user":"4eb2eae5535d7eef30807351"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by set)\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       set))","user":"5f431d32e4b0955706451fb5"},{"code":"(fn [x]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","problem":77,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn anagrams [xs] (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) xs))))))","problem":77,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [s]\r\n  (letfn [(anagram? [x y] (= (sort x) (sort y)))]\r\n    (set (filter #(> (count %) 1)\r\n                 (for [word s]\r\n                   (set (filter #(anagram? word %) s)))))))","problem":77,"user":"4ee9d697535d93acb0a66895"},{"problem":77,"code":"#(set (filter (fn [coll] (> (count coll) 1))\n  ((fn [coll]\n    (flatten \n           (for [x (set (map sort coll))\n                 :let [z \n                       (set (flatten (for [y coll :when (= x (sort y))]  [y])))\n                       ]] [z]))) %1)))","user":"591d9870e4b09b4ee5954c1b"},{"code":"(fn [coll]                                                                                           \n   (set (filter (fn [c] (> (count c) 1)) (set (map (fn[el] (second el)) ((fn ! [mp coll]                    \n                                      (if-let [s (seq coll)]                                         \n                                        (let [el (first s)                                           \n                                              ky (set el)]                                           \n                                          (if (mp ky)                                                \n                                            (! (assoc mp ky (conj (mp ky) el)) (rest s))             \n                                            (! (assoc mp ky #{el}) (rest s))))                       \n                                        mp)) {} coll))))))","problem":77,"user":"4f1d1299535d64f603146487"},{"code":"(fn anagrams\n  [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       (into #{})))","problem":77,"user":"524ea587e4b0541d1855b7e9"},{"problem":77,"code":"(fn [v] (set (filter #(> (count %) 1) (map set (vals (group-by sort v))))))","user":"542edb4ae4b0dad94371f2c8"},{"problem":77,"code":"(fn [words]\n  (->> (map #(hash-map (frequencies %) #{%}) words)\n       (reduce #(merge-with into %1 %2))\n       (map second)\n       (filter #(< 1 (count %)))\n       (set)))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":77,"code":"(fn [x] (loop [coll x result {}]\n  (if-let [word (first coll)]\n    (recur\n     (rest coll)\n     (assoc \n      result\n      (hash (sort word)) \n      (conj (or\n             (get result (hash (sort word)))\n             #{})\n            word)))\n    (set (filter #(> (count %) 1)\n                 (vals result))))))","user":"574eb3b1e4b02ea114799247"},{"problem":77,"code":"(fn [coll]                                                                       \n  (let [words-anagram-reducer (fn [anagrams-map word]                            \n                                (let [ana-key (sort word)]                       \n                                  (if (contains? anagrams-map ana-key)           \n                                    (update-in anagrams-map [ana-key] #(conj % word))\n                                    (assoc anagrams-map ana-key #{word}))))      \n        word-groups (reduce words-anagram-reducer {} coll)                       \n        anagrams (filter (fn [words] (> (count words) 1)) (vals word-groups))]   \n    (apply hash-set anagrams)))","user":"58ebd10de4b056aecfd47d49"},{"problem":77,"code":"#(->> (group-by sort %)\n  vals\n  (filter next)\n  (map set)\n  set)","user":"5b61aa6ae4b0c6492753e712"},{"problem":77,"code":";; this took me > 10 hours!  I doubt I'll understand it if I\n;; try to read it in the future! \n(fn z [v]\n  (let [gb (group-by first (for [x  v]\n                             [ (clojure.string/join (sort x)) x]))]\n    (set (filter #(> (count %) 1)  (for [y (keys gb)] (set (for [r (gb y)] (second r))))))\n   ))","user":"572ac718e4b0f4d77e651242"},{"problem":77,"code":"(fn [v]\n  (loop [rem v\n         res #{}]\n    (if (empty? rem)\n      (into #{} (filter #(> (count %) 1) res))\n      (letfn [(match [x] (apply = (map sort [x (first rem)])))]\n        (recur\n         (filter (complement match) rem) \n         (conj res \n               (into #{} (filter match rem))))))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":77,"code":"(fn [coll]\n   ((fn go [res c]\n      (if-let [[f & r] c]\n        (go (conj res\n                  ((fn make-anagram [words anagram]\n                     (if-let [[fw & rw] words]\n                       (if ((fn finder [w1 w2]\n                              (if-let [[fc & rc] w1]\n                                (if (some #(= fc %) w2)\n                                  (finder rc\n                                          (clojure.string/replace-first w2 (re-pattern (str fc)) \"\"))\n                                  false)\n                                (empty? w2)))\n                            f\n                            fw)\n                         (make-anagram rw (conj anagram fw))\n                         (make-anagram rw anagram))\n                       anagram))\n                   r\n                   #{f}))\n            (seq (apply clojure.set/difference (set r) res)))\n        (set (filter #(not (= 1 (count %))) res))))\n    #{}\n    coll))","user":"55860905e4b001b0851d7516"},{"problem":77,"code":"(fn [words]\n  (set (map\n        set\n        (filter\n         #(> (count %) 1)\n         (vals (group-by sort words))))))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":77,"code":"(fn [ss]\n          (->> ss\n               (map #((juxt sort identity) %))\n               (group-by (comp str first))\n               vals\n               (filter #(> (count %) 1))\n               (map #(set (map (fn [x] (second x)) %)))\n               set\n               ))","user":"533c2605e4b0e30313ee6cd7"},{"problem":77,"code":"(fn anagram-finder\n  [coll]\n  (into #{} (->> coll\n       (reduce (fn [acc item]\n                 (update-in acc [(apply str (sort item))] conj item)) {} )\n       (filter #(> (count (second %)) 1))\n       (map #(second %))\n       (map set))))","user":"590b3aeae4b047aa04b199d0"},{"problem":77,"code":"(fn anagrams1 [coll]\n  (->>\n   (group-by #(set %) coll)\n   (vals)\n   (map #(set %))\n   (filter #(> (count %) 1))\n   (set)))","user":"5df75fd8e4b0a607a9a45c92"},{"code":"(fn[l](set (filter #(> (count %) 1) (map #(set (second %)) (group-by sort l)))))","problem":77,"user":"4f296a80e4b0d6649770a02a"},{"problem":77,"code":"(fn [coll]\n    (set (->> coll\n       (group-by #(apply str (sort %)))\n       (vals)\n       (filter #(< 1 (count %)))\n       (map set)\n       )))","user":"5368fedee4b0243289761e93"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (map #(hash-map (sort %) #{%}))\n       (apply merge-with clojure.set/union)\n       vals\n       (filter #(> (count %) 1))\n       set))","user":"56dc3bdfe4b0ea9b8538f819"},{"code":"(fn a [c]\n  (set (filter (fn [e] (> (count e) 1)) (vals (reduce #(let [k (set %2)] (assoc % k (conj (% k #{}) %2))) {} c)))))","problem":77,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn allana [initxs]\r\n  (loop [ret #{} xs initxs]\r\n    (if (<= (count xs) 1)\r\n       ret\r\n       (if (empty? \r\n             (filter #(= (sort (first xs))\r\n                         (sort %)) (rest xs)))\r\n         (recur ret (rest xs))\r\n         (recur (conj ret \r\n            (set \r\n              (cons (first xs) (filter #(= (sort (first xs))\r\n                          (sort %))\r\n                      (rest xs)))))\r\n            (filter #(not= (sort (first xs))\r\n                          (sort %))\r\n                      (rest xs)))))))","problem":77,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [s]\n  (set (filter \n        #(>= (count %) 2) \n        (map set (vals (group-by #(sort %) s))))))","problem":77,"user":"51e38568e4b0c611d6113e43"},{"problem":77,"code":"(fn [words]\n   (->> (apply merge-with into (map #(hash-map (sort %1) #{%1}) words))\n        vals\n        (filter #(> (count %) 1))\n        set))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":77,"code":"(fn [coll]\n  (into #{} (->> coll\n                 (group-by sort)\n                 vals\n                 (filter #(> (count %) 1))\n                 (map set))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn [w]\n  (let [m (map #(identity [% (set %)]) w)]\n    (set\n      (filter #(> (count %) 1)\n              (for [v (distinct (map second m))]\n                (set (map first (filter #(= (second %) v) m))))))))","problem":77,"user":"50d8de3fe4b01f0871336e72"},{"code":"(fn [col]\r\n        (set (filter\r\n          #(> (count %) 1)\r\n          (vals (reduce (fn [m x] (assoc m (sort x) (conj (or (-> x sort m) #{}) x))) {} col)))))","problem":77,"user":"4e79a143535db169f9c796a2"},{"code":"(fn [c]\n  (set (filter #(> (count %) 1) (map #(set (second %)) (group-by #(sort %) c)))))","problem":77,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn anagrams [s]\n  (loop [a {}\n         s s]\n    (if (empty? s)\n      (set (filter (fn [x] (< 1 (count x))) (map (fn [x] (set (second x))) a)))\n      (let [w (first s)\n            k (set (seq w))\n            wl (get a k)]\n        (recur\n         (assoc a k (cons w wl))\n         (rest s))))))","problem":77,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn[x]( set (map set (filter #(> (count %)1) (vals(group-by set x))))))","problem":77,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn\n  [words]\n  (->>\n   words\n   (group-by #(apply str (sort %)))\n   vals\n   (filter (fn [ws] (< 1 (count ws))))\n   (map set)\n   set\n   ))","problem":77,"user":"531490bde4b08068f379ed17"},{"problem":77,"code":"(fn [col]\n  (->> col\n       (group-by set)\n       vals\n       (map set)\n       (filter #(< 1 (count %)))\n       set))","user":"514a3fa5e4b0829bd132edb6"},{"code":"#(set (for [[_ v] (group-by frequencies %) :when (> (count v) 1)] (set v) ))","problem":77,"user":"4e6dd0f5535d5021c1a895f3"},{"problem":77,"code":"(fn anagram[s]\n  (let[solver (fn k[m string]\n                (if (m (set string))\n                  (assoc m (set string) (conj (m (set string)) string ))\n                  (assoc m (set string) (conj #{} string))))]\n    (set (remove #(= 1 (count %)) (vals (reduce solver {} s))))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":77,"code":"(fn [coll]\n   (let [alphs (group-by #(set %) coll)\n         f (filter #(> (count %) 1) (vals alphs))]\n     (set (map set f))))","user":"56fbf83de4b07572ad1a88da"},{"problem":77,"code":"(fn [coll] (set (filter #(> (count %) 1) \n                        (map set (vals (group-by #(sort (seq %)) coll))))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":77,"code":"(fn anagram-finder\n  ([coll]\n   (->> coll\n        (group-by set)\n        (vals)\n        (map set)\n        (filter #(> (count %) 1))\n        (set))))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":77,"code":"(fn [xs]\n\t(->>\n      xs\n      (map #(list % ((comp (partial apply str) sort) %)))\n      (sort-by second)\n      (partition-by second)\n      (filter #(< 1 (count %)))\n      (map #(map first %))\n      (map set)\n      set\n      ))","user":"5ea2e6bfe4b00a66d4a95197"},{"code":"(fn [lst]\n  (into #{} \n    (filter #(> (count %) 1)\n      (map set (vals (group-by sort lst))))))","problem":77,"user":"4faa9593e4b081705acca1f9"},{"problem":77,"code":"(fn anaf [s]\n  (letfn [(isana [w1 w2]\n            (= (set (frequencies (seq w1))) (set (frequencies (seq w2)))))]\n    (loop [s s\n           r #{}]\n      (if (empty? s)\n        r\n        (let [w (first s)\n              [ns nr] (reduce #(let [[ns nr] %1]\n                                 (if (isana w %2)\n                                   [ns (conj nr %2)]\n                                   [(conj ns %2) nr]))\n                              [[] #{}]\n                              s)]\n          (recur ns (if (> (count nr) 1) (conj r nr) r)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":77,"code":"(fn [coll]\n  (loop [res-map {} coll coll]\n    (if\n      (empty? coll)\n      (into\n        #{}\n        (filter\n          #(> (count %) 1)\n          (vals res-map)))\n      (let [item (first coll)\n            k (sort item)\n            entry (get res-map k)\n            res-set (if\n                (nil? entry)\n                #{}\n                entry)]\n        (recur\n          (assoc res-map k (conj res-set item))\n          (rest coll))))))\n\n;(fn [v]\n;  (into #{}\n;    (map set\n;      (filter #(> (count %) 1)\n;        (map val (group-by sort v))))))","user":"58d2af83e4b03c36ff7e5907"},{"problem":77,"code":"(fn [xs] (set (for [[s ss] (group-by #(set (seq %)) xs)\n                    :when (> (count ss) 1)]\n                (set ss))))","user":"4ea03f70535d7eef308072a1"},{"problem":77,"code":"(fn [l] \n  (set \n    (map #(set (fnext %))  \n      (filter #(<= 2 (count (second %))) \n        (group-by #(set %) l)))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":77,"code":"(fn [strs]\n  (letfn [(f [strs acc]\n             (if (empty? strs)\n               acc\n               #(g strs acc)))\n          (g [[x & xs] acc]\n             (loop [[y & ys] xs\n                    can      #{}]\n               (if y\n                 (if (and (= (count x)\n          \t\t\t\t\t (count y))\n       \t\t\t\t\t  (= (sort x)\n          \t\t\t\t     (sort y)))\n                   (recur ys (conj can y))\n                   (recur ys can))\n                 (if (empty? can)\n                   #(f xs acc)\n                   #(f (remove can xs)\n                       (conj acc (conj can x)))))))]\n    (trampoline f strs #{})))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":77,"code":";;(fn [strs]\n;;   (let [g (vals (group-by #(set (clojure.string/split %1 #\"\")) strs))]\n;;     (set (->> g (map set) (filter #(> (count %1) 1))))))\n\n(fn [strs]\n   (->> (group-by frequencies strs)\n        vals\n        (filter next)\n        (map set)\n        set))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":77,"code":"(fn [x]\n    (->> x\n      (group-by sort)\n      (map (comp set second))\n      (filter #(> (count %) 1)) set))","user":"53b12c76e4b047364c04448a"},{"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort words)))))\n  )","problem":77,"user":"52e59ca5e4b09f7907dd1464"},{"problem":77,"code":"(fn [ws]\n  (->> (group-by set ws)\n       vals\n       (map set)\n       (filter #(>= (count %) 2))\n       set))","user":"537f4652e4b06839e8705eb1"},{"problem":77,"code":"(fn [coll]\n  (set\n    (filter #(> (count %) 1)\n      (map set\n        (vals\n          (group-by #(sort (seq %)) coll))))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":77,"code":"(fn\n  [words]\n  (loop [ws words result #{}]\n    (if-not (seq ws)\n      result\n      (let [frq (frequencies (first ws))\n            anagrams (set (filter (fn [w] (= frq (frequencies w))) ws))]\n        (recur (remove anagrams ws) (if (< 1 (count anagrams))\n                                      (conj result anagrams)\n                                      result))))))","user":"5592ba8be4b0c79f6e1db931"},{"problem":77,"code":"(fn [c]\n   (let [anagram? #(and (= (count %1) (count %2)) (empty? (clojure.set/difference (set %1) (set %2))))\n         anagrams #(set (conj (filter (partial anagram? %2) %1) %2))]\n     (set (remove #(= 1 (count %)) (distinct (map (partial anagrams c) c))))))","user":"5978c844e4b01722bebd4d18"},{"code":"#(loop [x % acc {}]\n  (if (empty? x)\n    (set (filter (fn [z] (> (count z) 1)) (map set (vals acc))))\n    (let [item (first x) k (sort item)]\n      (recur (rest x) (assoc acc k (conj (get acc k []) item))))))","problem":77,"user":"4f26d6d9e4b0d6649770a007"},{"problem":77,"code":"#(->> (group-by sort %)\n        (vals)\n        (filter (fn [xs] (> (count xs) 1)))\n        (map set)\n        set)","user":"5c165d3ee4b01240ff5671d1"},{"problem":77,"code":"#(->>\n  (distinct %)\n  (group-by sort)\n  vals\n  (filter (fn [bundle] (< 1 (count bundle))))\n  (map (partial into #{}))\n  (into #{}))","user":"5ec6de19e4b08d0ec38692da"},{"problem":77,"code":"(fn [w]\n  (->> w\n       (group-by #(sort-by str %))\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":77,"code":"(fn [word-list]\n  (->> (group-by sort word-list)\n       vals\n       (filter #(> (count %) 1))\n       (map #(into #{} %))\n       (into #{})))","user":"592ac17ae4b072a2710fcf26"},{"problem":77,"code":"(fn [x]\n    (->> (group-by sort x)\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         set))","user":"5470b3d0e4b00cfc9eacc1bb"},{"code":"(fn [v]\n  (->> (group-by sort v)\n      vals\n      (remove #(= (count %) 1))\n      (map set)\n       set))","problem":77,"user":"514d8084e4b019235f6c0588"},{"code":"(fn [ws]\n  (->> ws\n    (group-by sort)\n    vals\n    (filter (comp (partial < 1) count))\n    (map set)\n    set))","problem":77,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"code":"(fn ana [strings]\n  (loop [result #{},\n         hs (set (first strings))\n         coll strings]\n    (let [fr (filter #(= hs (set %)) coll)]\n      (if (< (count fr) 2)\n        result\n        (recur (conj result (apply conj #{} fr)) (set (first (rest coll))) (rest coll))))))","problem":77,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn anag [coll]\n  (reduce #(conj %1 %2) #{}\n          (filter\n           #(> (count %) 1)\n           (vals \n            ((fn to-map [coll] \n               (reduce \n                (fn [m n]\n                  (let [k (apply conj #{} n)] \n                    (assoc m k (conj (get m k #{}) n)))) \n                {} \n                coll)) \n             coll)))))","problem":77,"user":"52463059e4b09dbe66b56198"},{"problem":77,"code":"#(->> %\n      (group-by sort)\n      (map second)\n      (filter (comp (partial < 1) count))\n      (map (partial into #{}))\n      (into #{}))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":77,"code":"(fn [l]\n  (->> (group-by frequencies l)\n       (filter #(> (count (val %)) 1))\n       (map val)\n       (map set)\n       (set)))","user":"5defc177e4b093ff717275af"},{"code":"; this is so cool solution by daowen: \n; #(->> % (group-by sort) vals (filter second) (map set) set)\n(fn [coll] \n  (set (map (fn [[k v]] (set v)) \n            (filter (fn [[k v]] (> (count v) 1)) \n                    ; could be replaced with: (group-by sort coll)\n                    (reduce #(let [k (sort %2)] (merge-with concat %1 {k [%2]})) {}  coll)))))","problem":77,"user":"50de11b2e4b061dbdced7217"},{"problem":77,"code":"(fn [ss]\n    (->> ss\n         (group-by #(frequencies %))\n         (vals)\n         (reduce (fn [outset words]\n                   (if (< 1 (count words))\n                     (conj outset (into #{} words))\n                     outset))\n                 #{})))","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":77,"code":"#(set (for [[_ v] (group-by set %) :when (< 1 (count v))] (set v)))","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn [x] (set (map set (filter (fn [coll] (>= (count coll) 2))\r\n        (vals (group-by #(sort %) x))))))","problem":77,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn anagram [coll]\n  (let [\n    _anagram_groups (group-by #(apply str (sort %)) coll)\n    _anagram_keys (filter #(< 1 (count (_anagram_groups %))) (keys _anagram_groups))\n    _anagrams (map _anagram_groups _anagram_keys)]\n    (set (map set _anagrams))))","problem":77,"user":"4f625f68e4b0defedf855fd2"},{"problem":77,"code":"(fn [d]\n  (->> d\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5466aabbe4b01be26fd746e8"},{"code":"(fn [s]\n  (into #{}\n    (for [x     \n      (filter #(> (count %) 1)\n        (partition-by first  \n          (sort-by first  \n            (for [x s] \n              [(apply str (sort (into [] x))) x]\n            )\n          )\n        )\n      )]\n        (into #{}\n          (for [y x] (last y))\n        )  \n      )\n    )\n )","problem":77,"user":"5176afd2e4b085adf681d889"},{"problem":77,"code":"(fn [w] (set (map set (filter next (vals (group-by sort w))))))","user":"581dad0ae4b04b46fc4b0f17"},{"problem":77,"code":"(fn [x]\n  (->> (group-by sort x)\n       (vals)\n       (map set)\n       (filter #(< 1 (count %)))\n       (set)))","user":"54b40fe6e4b05787c3b1638a"},{"problem":77,"code":"(fn [ws] \n  (let [gs (vals (group-by sort ws))]\n    (set \n     (keep #(when (> (count %) 1) (set %))\n           gs))))","user":"4f1ef6a0535d64f60314649b"},{"problem":77,"code":"(fn [words]\n    (let [grouped (group-by sort words)]\n      (set (filter #(> (count %) 1) (map #(set %) (vals grouped))))\n\n  ))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":77,"code":"(fn [x] (set (map set (filter #(< 1 (count %)) (vals (group-by #(sort %) x))))))","user":"5ccb3792e4b0ccb061962882"},{"code":"(fn [coll] (set (map set (filter #(> (count %) 1) (vals (group-by sort coll))))))","problem":77,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn anagram-sets [v]\n  (set\n  (map #(set (map second %))\n  (vals\n  (filter #(< 1 (count (second %)))\n  (group-by (comp identity first)\n  (map #(vector (set %) %) v)))))))","problem":77,"user":"4eb44d78535d7eef30807360"},{"problem":77,"code":"#(->> %\n      (group-by set)\n      vals\n      (map set)\n      (filter (fn [s] (< 1 (count s))))\n      set)","user":"5ab5f60be4b073f177442643"},{"problem":77,"code":"(fn [ls]\n   (into #{}\n         (filter #(> (count %) 1)\n                 (map\n                  (fn [x]\n                    ((fn [rs acc]\n                       (if (empty? rs)\n                         acc\n                         (if (= (sort (seq (first rs))) (sort (seq x)))\n                           (recur (rest rs) (conj acc (first rs)))\n                           (recur (rest rs) acc))))\n                     ls #{}))\n   \n                      ls))))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn anagrams [s]\n  (let [agams-set (filter #(> (val %) 1) (frequencies (map frequencies s)))\n        freq-map (zipmap s (map frequencies s))]\n    (into #{} \n      (for [x agams-set]\n        (into #{} (keys (filter #(= (val %) (first x)) freq-map)))))))","problem":77,"user":"51622fb8e4b009fba0926e3f"},{"problem":77,"code":"(fn [x]\n  (->> x\n       (into #{})\n       (group-by sort)\n       vals\n       (keep #(when (> (count %) 1) (set %)))\n       set\n       ))","user":"56022f5ae4b04bb52996e19c"},{"code":"#(set (map set (filter (fn [e] (> (count e) 1)) (vals (group-by sort %)))))","problem":77,"user":"4e5411e8535d8a8b8723a279"},{"problem":77,"code":"(fn [l] (->> l\n              (group-by set)\n              vals\n              (filter #(> (count %) 1))\n              (map set)\n              set)\n   )","user":"5ed8a12fe4b0c7845d86b0d7"},{"problem":77,"code":"(fn [ws]\n  (let [fingerprints (map vector (map (comp vec sort) ws) ws)\n        stash (reduce\n               (fn[memo pair]\n                 (let[fingerprint (first pair)\n                      word (last pair)]\n                   (assoc memo fingerprint (cons word (memo fingerprint)))))\n               {}\n               fingerprints)]\n    (->> stash\n         vals\n         (filter #(> (count %) 1))\n         (map set)\n         (set))))","user":"5980f91ae4b021a7a535fddd"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (reduce #(update-in %1 [(sort %2)] (fnil conj #{}) %2) {})\n       (keep #(when (> (count (val %)) 1) (val %)))\n       set))","user":"4db2903f535df7e46ed9b6bf"},{"problem":77,"code":"(fn annagrams [s]\n  (->> s (group-by sort) vals (map set) (remove #(= 1 (count %))) set))","user":"5c950334e4b048ec896c5a44"},{"problem":77,"code":"(fn [a]\n  (set (filter #(> (count %) 1)\n               (map (comp set second)\n                    (reduce (fn [m w] (let [ws (set w)] (assoc m ws (conj (m ws) w))))\n                            {}\n                            a)))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"#(set (map set\n             (filter (fn [x] (> (count x) 1))\n                     (vals (group-by frequencies %)))))","problem":77,"user":"4da8dd6e30acd6ed12482a68"},{"code":"(fn anagram-finder [x]\n  (set \n   (for [ss (vals (group-by #(set %) x))\n             :when (>= (count ss) 2)] \n     (set ss))))","problem":77,"user":"517a025ce4b01aacecbecbe6"},{"problem":77,"code":"(fn anagrams [coll]\n  (set (filter #(> (count %) 1)\n               (map set (vals (group-by sort coll))))))","user":"540e8d13e4b0addc1aec671e"},{"problem":77,"code":"(fn to-anagram-sets\n  [coll]\n  (->> (group-by #(sort %) coll)\n       (filter #(> (count (second %)) 1))\n       vals (map set) set))","user":"51ae350fe4b09397d5109790"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"55c20bd0e4b0e31453f64972"},{"code":"#(->> %\n(group-by sort)\nvals\n(filter second)\n(map set)\nset)","problem":77,"user":"50645e12e4b007509339a58a"},{"problem":77,"code":"(fn [coll]\n  (let [freq (fn [word] (reduce #(assoc %1 %2 (+ (get %1 %2 0) 1)) {} word))\n        words (vals (reduce (fn [mp wd]\n                              (let [f (freq wd)]\n            \t\t    \t(assoc mp f (conj (get mp f #{}) wd)))) {} coll))]\n    (set (filter #(> (count %) 1) words))))","user":"53573d70e4b04ce2eb3ed278"},{"problem":77,"code":"(fn palins [ws]\n  (let [p (fn [m ws]\n            (if (empty? ws) m\n             (let [[w & rws] ws\n                   k (set (seq w))\n                   v (m k)]\n               (if (nil? v)\n                 (recur (conj m [k #{w}]) rws)\n                 (recur (conj m [k (conj v w)]) rws)))))]\n    (set (filter #(> (count %) 1) (vals (p {} ws))))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn [c]\n  (set (map set \n    (filter #(< 1 (count %))\n            (vals (group-by sort c))))))","problem":77,"user":"4f04b66b535dcb61093f6bdd"},{"problem":77,"code":"(fn [sv]\n    (->> (group-by sort sv)\n         (vals)\n         (filter #(> (count %) 1))\n         (map set)\n         (set)))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn [x]\n  (set (map set (filter #(> (count %) 1)\n   (vals \n  (group-by (fn [i]\n              (sort (seq i))\n            ) x))\n  \n  )))\n  )","problem":77,"user":"51bec919e4b013aa0d74b800"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n       (group-by set)\n       (vals)\n       (map set)\n       (filter (fn [x] (> (count x) 1)))\n       (set)))","user":"55c4e48be4b0e31453f649a7"},{"problem":77,"code":"(fn anagram [words]\n  (->> words\n       (group-by sort)\n       (vals)\n       (filter second)\n       (map set)\n       set))","user":"5532a04ee4b09218d5f44f82"},{"code":"(fn [ss]\n    (set \n      (map \n        set \n        (filter \n          #(> (count %) 1)\n          (vals (group-by #(group-by identity %) ss))\n        )\n      )\n    )\n)","problem":77,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn [s] (set (filter second (map set (vals (group-by sort s))))))","problem":77,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":77,"code":"(fn [xs]\n  (->>\n    (group-by sort xs)\n    (vals)\n    (filter #(< 1 (count %)))\n    (map set)\n    (set)\n  )\n)","user":"5162757ee4b03cfa3774b3fe"},{"problem":77,"code":"(fn [col]\n  (->> (group-by sort col)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"50978ca4e4b00ad8bab4e966"},{"problem":77,"code":"(fn [x]\n  (->> x\n       (group-by sort)\n       (map second)\n       (map set)\n       (filter #(> (count %) 1))\n       (set)))","user":"55e732c5e4b050e68259b492"},{"problem":77,"code":"#(set (map set\n           (remove (comp #{1} count)\n                   (vals (group-by frequencies %)))))","user":"59ac0965e4b08cbb53654da6"},{"code":"(fn [sq]\n  (reduce \n      #(if (> (count (second %2)) 1) (conj %1 (second %2)) %1)\n      #{}\t\n      (reduce #(let [k (->> %2 seq sort (apply str))]\n                 (assoc %1 k (conj (get %1 k #{}) %2))) {} sq)))","problem":77,"user":"53300924e4b019098a6f8b55"},{"problem":77,"code":"(fn [coll]\n   (set (map set (remove\n              #(= 1 (count %))\n              (vals (group-by #(sort %) coll))))))","user":"5857d27de4b0f14aab7c8710"},{"problem":77,"code":"(fn [words]\n  (let [anagram? (fn [x y] (= (set x) (set y)))]\n    (->> words\n         (reduce (fn [result input]\n                   (->> result\n                        (map (fn [x]\n                               (if (anagram? (first x) input)\n                                 (conj x input)\n                                 x)))\n                        ((fn [dataset]\n                           (if (not-any? (fn [x] (x input)) dataset)\n                             (conj dataset #{input})\n                             dataset)))))\n                 #{})\n         (filter #(> (count %) 1))\n         set)))","user":"5cbb0436e4b026601754b9cc"},{"code":"#(set (map (comp set val) (remove (comp #{1} count val) (group-by sort %1))))","problem":77,"user":"4db03279838c48654951d9bc"},{"problem":77,"code":"(fn anagrams [x]\n  (let [equiv-classes\n    (fn [f X]\n      (loop [X X val2equivs {}]\n        (if (empty? X)\n          (set (map val2equivs (keys val2equivs)))\n          (recur (rest X) \n                 (if (contains? (set (keys val2equivs)) (f (first X)))\n                   (assoc val2equivs (f (first X)) \n                          (conj (get val2equivs (f (first X))) (first X)))\n                   (conj val2equivs [(f (first X)) #{(first X)}]))))))]\n    (set (filter #(>= (count %) 2) (equiv-classes set x)))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":77,"code":"(fn [c] (->> c\n              (group-by sort)\n              (map second)\n              (remove #(= 1 (count %)))\n              (map (partial into #{}))\n              (into #{})))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn [lat]\n  (into #{} \n        (map set \n             (filter #(> (count %) 1) (vals (group-by #(.hashCode (sort %)) lat))))))","problem":77,"user":"5125029de4b0ce9225d2ed3e"},{"problem":77,"code":"(fn [col]\n  (set (map (comp set second) \n  \t              (filter (fn [[k v]] (> (count v) 1))\n   \t\t                    (group-by #(set (apply list %)) col)))))","user":"589f37e0e4b02bd94d917e79"},{"code":"(fn [s] (set (filter #(< 1 (count %)) (map set(vals (group-by #(sort %) s))))))","problem":77,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":77,"code":"(fn stuff [words]\n  (set (filter #(> (count %) 1) (map \n          (fn [word] \n              (set (filter #(= (sort (vec word)) (sort (vec %))) words))) \n          words))))","user":"54ce541de4b057c6fda3a2ac"},{"code":"(fn anagrams [words] \n  (set (filter #(> (count %) 1) (vals (reduce (fn [result word] \n            (let [ltrs (sort word)]\n              (assoc result ltrs (conj (get result ltrs #{}) word)))) {} words)))))","problem":77,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":77,"code":"(fn anagrams [xs] \n  (->> xs\n       (group-by frequencies) ; or with sort\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       set))","user":"54d341f7e4b0e8a36923e603"},{"problem":77,"code":"(fn [v] (set (filter #(> (count %) 1) (map set (vals (group-by (comp set seq) v))))))","user":"5604bcf7e4b08b23635d315a"},{"code":"(fn [x] \n  (set \n    (map set \n         (filter #(> (count %) 1) \n                 (vals \n                   (reduce #(assoc % \n                                  (sort %2) \n                                  (conj (get % \n                                             (sort %2) \n                                             []) \n                                        %2)) \n                           {} \n                           x))))))","problem":77,"user":"4e6ebd4a535d5021c1a89610"},{"problem":77,"code":"(fn [words]\n  (->> words\n      (group-by sort)\n      vals\n      (filter #(> (count %) 1))\n      (map set)\n      set))","user":"54246fcce4b01498b1a71aed"},{"problem":77,"code":"(fn [w]\n  (->> w\n       (group-by frequencies)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [wl]\n  (set (for [[k v] (group-by #(sort (seq %)) wl)\n              :when (> (count v) 1)]\n           (set v))))","problem":77,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":77,"code":"(fn [coll]\n  (let [setter (map set coll)\n        mapper (zipmap coll setter)]\n    (loop [coll coll\n           subcoll coll\n           subfinal #{}\n           final #{}]\n      (if (seq coll)\n        (if (contains? (set (map #(contains? % (first coll)) final)) true)\n          (recur (next coll) coll subfinal final)\n          (if (= (first coll) (first subcoll))\n            (recur coll (next subcoll) subfinal final)\n            (if (seq subcoll)\n              (if (not= (get mapper (first coll)) (get mapper (first subcoll)))\n                (recur coll (next subcoll) subfinal final)\n                (recur coll (next subcoll) (conj subfinal (first coll) (first subcoll)) final))\n              (recur (next coll) coll #{} (if (empty? subfinal)\n                                            final\n                                            (conj final subfinal)))))) \n        final))))","user":"593744abe4b02506e01a299b"},{"code":"(fn anagram [v]\n (set (map set (filter #(> (count %) 1) (vals (group-by #(set (seq %)) v))))))","problem":77,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn\r\n  [coll]\r\n  (set(filter #(not= 1 (count %)) (map set (vals (group-by #(identity (sort % ))coll))))))","problem":77,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":77,"code":"(fn [words] (->> words\n                 (group-by sort)\n                 vals\n                 (filter second)\n                 (map set)\n                 set\n))","user":"56561119e4b0f9d632dd849d"},{"code":"(fn [coll]\n  (->>\n   (group-by #(sort (vec %)) coll)\n   (vals)\n   (map #(into #{} %))\n   (filter #(> (count %) 1))\n   (into #{})))","problem":77,"user":"5339af7de4b0e30313ee6cab"},{"problem":77,"code":"(fn [sq] (->> (group-by sort sq) (vals) (filter #(> (count %) 1)) (map set) (set)))","user":"5ecc0831e4b016b56eae058c"},{"problem":77,"code":"#(set (filter (fn [x] (> (count x) 1)) (map set (vals (group-by sort %)))))","user":"58173722e4b0c0e9c07b838a"},{"problem":77,"code":"(fn [s]\n  (->> s (group-by #(frequencies %)) vals (filter #(> (count %) 1)) (map #(into #{} %)) (into #{}) ))","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn n77 [coll]\n  (set (for [[k v] (reduce #(merge-with clojure.set/union %1 %2) \n                          (map #(apply hash-map %) \n                               (map vector (map #(sort (vec %)) coll) (map #(set [%]) coll))))\n            :when (> (count v) 1)]\n        v)))","problem":77,"user":"52b43468e4b0c58976d9ad1b"},{"problem":77,"code":"(fn [coll]\n  (let [newcoll (map val (group-by frequencies coll))]\n    (set (map set (filter #(< 1 (count %)) newcoll)))))","user":"5dfa1c67e4b0a607a9a45cc5"},{"code":"(fn anagram-finder [coll]\n         (letfn [(anagram [coll]\n                   (reduce #(merge-with concat %1 %2) {} (map #(array-map (sort %) [%]) coll)))]\n           (set (for [v (vals (anagram coll)) :when (> (count v) 1)] (set v)))))","problem":77,"user":"4f1bee08535d64f60314647e"},{"problem":77,"code":"(fn [x]\n  (set \n    (map set\n      (filter #(< 1 (count %))\n        (distinct \n          (map (partial remove nil?)\n            (map #(for [z x] (if (= (sort (seq z)) (sort (seq %))) z)) x)))))))","user":"574a71b7e4b02ea1147991fb"},{"code":"(fn [coll]\n  (let [letter-set #(set (map second (group-by identity %)))]\n    (set (filter #(> (count %) 1) (map (comp set second) (group-by letter-set coll))))))","problem":77,"user":"4edab806535d10e5ff6f5311"},{"problem":77,"code":"(fn anagram\n  [coll]\n  (loop [[x & xs] coll alls coll res []]\n    (if x\n      (recur xs alls (conj res (filter #(= (sort x) (sort %)) alls)))\n      (into #{} (filter #(> (count %) 1) (map #(into #{} %) res))))))","user":"550d9452e4b06e50f9beb15d"},{"problem":77,"code":"(fn getAnagrams [coll]\n  (letfn [(countletters [word] (reduce\n                                (fn [prev cur]\n                                  (if (prev cur)\n                                    (update-in prev [cur] inc)\n                                    (assoc prev cur 1)))\n                                {}\n                                word))]\n    (set (filter #(> (count %) 1)\n      (vals\n        (reduce\n          (fn [prev cur]\n            (let [letters (countletters cur)]\n              (if (prev letters)\n                (update-in prev [letters] into #{cur})\n                (assoc prev letters #{cur}))))\n          {}\n          coll))))))","user":"56fc0601e4b07572ad1a88db"},{"problem":77,"code":"(fn [words]\n    (let [f  (fn [letters word]\n               (= letters (set word)))\n          r1 (fn [c word]\n               (conj c (set word)))\n          f2 (fn [c letters]\n               (let [wordset (set (filter #(f letters %) words))]\n                 (if (> (count wordset) 1)\n                   (conj c wordset)\n                   c)))\n          s1 (reduce r1 #{} words)\n          s2 (reduce f2 #{} s1)]\n      s2))","user":"55342ee0e4b09218d5f44f98"},{"problem":77,"code":"(fn [x]\n   (->> (vals (group-by set x))\n        (filter #(> (count %) 1))\n        (map set)\n        (set))\n   )","user":"5ab07d63e4b073f1774425af"},{"problem":77,"code":"(fn z [coll]\n  (let [keyF (fn [key] (frequencies (seq key)))\n        f (fn [m k] (update-in m [(keyF k)] (fnil conj #{}) k))]\n    (->> (reduce f {} coll)\n         (vals)\n         (filter #(< 1 (count %)))\n         (into #{}))))","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn [words]\n  (let [anagram-set\n        (loop [anagrams {}\n               all-words words]\n          (let [current-word (first all-words)\n            remaining-words (rest all-words)]\n      \t    (if (empty? all-words)\n              anagrams\n              (recur (merge-with into anagrams\n                                 {(sort current-word) #{current-word}})\n                     remaining-words))))]\n    (set (filter #(> (count %) 1) (vals anagram-set)))))","problem":77,"user":"4f0d093b535d0136e6c22313"},{"problem":77,"code":"(comp set (partial map set) (partial filter #(> (count %) 1)) vals (partial group-by set))","user":"5c30d90de4b0d62ef62d9f22"},{"code":"(fn [t]\n  (let [rf (fn rf [x xs] (concat (take-while #(not= x %) xs) (next (drop-while #(not= x %) xs))))\n        perm (fn perm [s] (if (empty? s) [[]] (for [x s y (perm (rf x s))] (cons x y))))]\n    (set (filter #(> (count %) 1) (set (map #(set (filter % t)) (map #(set (map (partial apply str) (perm %))) t)))))))","problem":77,"user":"4ef6e689535dced4c769f24f"},{"problem":77,"code":"(fn [v] \n    (let [isAnagram (fn [s b]\n                      (contains? (set ((fn permut[s]\n                                         (let [s (set s)]\n                                           (if (= 2 (count s))\n                                             (list\n                                               (list (first s) (second s))\n                                               (list (second s) (first s))\n                                               )\n                                             (apply clojure.set/union (map (fn[a](map #(conj % a) (permut (disj s a)))) s))\n                                             )\n                                           )\n                                         ) s)) (seq (set b)))\n                      )\n          ]           \n      (loop [v v a #{}]\n        (if (empty? v)\n          a\n          (let [b (set (filter #(isAnagram (first v) %) (rest v)))]\n            (if (empty? b)\n              (recur (rest v) a)\n              (recur (clojure.set/difference (set (rest v)) b) (conj a (conj b (first v))))\n              )\n            ) \n          )\n        )\n      )\n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":77,"code":"(fn[words](reduce #(conj % (set (second %2))) #{} (filter #(< 1 (count (val %)))(group-by frequencies words))))","user":"5f838122e4b01aacbe7a2715"},{"problem":77,"code":"(fn anagram [s]\n      (let [matches (->> (map frequencies s)\n                         (group-by identity)\n                         (filter (fn [[k v]] (> (count v) 1)))\n                         )]\n\n        (into #{} (map #(into #{} (filter (fn [w] (= (frequencies w) (key %))) s)) matches))))","user":"550c55d0e4b06e50f9beb14d"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)))","user":"4dbf7a31535d020aff1edf75"},{"problem":77,"code":"(fn collect-anagrams [words]\n  (reduce #(if (> (count (val %2)) 1)\n             (conj %1 (into #{} (val %2)))\n             %1) \n          #{}\n          (group-by sort words)))","user":"5e0cbc14e4b099d064962f8e"},{"code":"#_(fn [s]\n  (into #{} \n    (remove empty? \n      (for [word s :let [ws (seq word)] ]\n        (set (filter (set s)\n          (for [m ws n ws o ws p ws] (clojure.string/join [m n o p]))))))))\n\n;Skip words alreay found\n(fn anagram [s]\n  (let [\n      words (fn words [w s]\n              (clojure.string/join\n               (reduce (fn [acc x] (conj acc (get w x))) [] s)) )\n        \n      perms (fn [n]\n              (let [f (fn [s]\n                       (mapcat (fn [x] (for [y (range n) :when (nil? ((set x) y))] (conj x y))) s))]\n                (loop [s (for [j (range n)] [j])\n                       i (- n 1)]\n                  (if (> i 0)\n                    (recur (f  s) (dec i))\n                    s ))))\n        perms-m (memoize perms) \n    ]\n    (loop [acc #{} word (first s) s1 (rest s)]\n     (if (nil? word)\n       (set (filter (fn [x] (> (count x) 1)) acc))  \n       (recur (if (= (.indexOf (mapcat seq acc) word) -1)\n                (conj acc (set (filter (set s) (map (partial words word) (perms-m (count word)))))) \n                acc)\n                (first s1)\n                (rest s1))))))","problem":77,"user":"50783762e4b0fc74642bff67"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n     (group-by #(set (frequencies %)))\n     (filter (fn [[_ words]] (> (count words) 1)))\n     ((comp set (partial map set) vals))))","user":"582e0afde4b051871117bfd5"},{"problem":77,"code":"(fn anagram [coll]\n  (let [gram-map (reduce (fn [m k]\n                           (let [ky (sort (seq (chars (char-array k))))\n                                 curr-val (get m ky #{})]\n                             (assoc m ky (conj curr-val k))))\n                         {} coll)]\n    (set (filter #(>= (count %) 2) (vals gram-map)))))","user":"5b92f178e4b0c0b3ffbd4a41"},{"problem":77,"code":"(fn anagrams\n  [s]\n  (let [fun (fn a [f x s] (f #(= (sort %) (sort x)) s))]\n    (loop [ang #{} s s]\n      (if (empty? s)\n        ang\n        (let [fs (set (fun filter (first s) s))\n              rs (fun remove (first s) s)]\n          (recur (if (> (count fs) 1) (conj ang fs) ang)\n                 rs))))))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn find-anagram [words]\n  (set\n    (filter\n      second\n      (map\n        set\n        (vals\n          (group-by\n            sort\n            words))))))","problem":77,"user":"511f88eee4b085952a83535f"},{"problem":77,"code":"(fn [xs]\n  (let [sets (map set xs)\n        freqs (frequencies sets)\n        anagram-sets (filter #(>= (last %) 2) freqs)\n        winning-sets (map first anagram-sets)]\n    (set (for [w winning-sets]\n           (set (filter #(= w (set %)) xs))))))","user":"52fc34cee4b047fd55837015"},{"code":"#(->> % (group-by sort) (filter (fn [[k v]] (> (count v) 1))) vals (map set) set)","problem":77,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":77,"code":"(fn [in]\n  (->> in\n  \t(group-by #(reduce + (map int %)))\n    vals\n    (map set)\n  \t(filter #(> (count %) 1))\n  \tset\n  ))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":77,"code":"(fn [cols] (set (map set (filter #(> (count %) 1) (vals (group-by sort cols))))))","user":"55f778bee4b06e875b46ceab"},{"problem":77,"code":"(fn [coll]\n  (set (filter #(> (count %) 1) (map set (vals (group-by #(frequencies %) coll))))))","user":"5280539ce4b0757a1b1713f3"},{"problem":77,"code":"(fn [words]\n  (->>\n   words\n   (group-by sort)\n   vals\n   (filter #(> (count %) 1))\n   (map #(set %))\n   set))","user":"52e851bfe4b09f7907dd149a"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"561ca2eae4b064ca9f4b169b"},{"problem":77,"code":"(fn [m]\n  (set (filter #(< 1 (count %))\n               (map (fn [k]\n                      (set (filter #(= (sort %) k) m)))\n                    (set (map sort m))))))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn ang [x]\r\n  (set (map set (remove #(= (count %) 1) (vals (group-by sort x))))))","problem":77,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn [aseq]\n  (->>\n    (reduce\n      (fn [m i]\n        (let [k (set i)]\n          (update-in m [k] #(if (nil? %) (list i) (conj % i)))))\n    {} aseq)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    set))","problem":77,"user":"4e7e05a6535db169f9c796fe"},{"problem":77,"code":"#(set\n  (for [[_ v] (group-by sort %)\n        :when (< 1 (count v))]\n    (set v)))","user":"605b7a90e4b079a07f8593fc"},{"problem":77,"code":"(fn [x] (->> (group-by frequencies x) (map second) (filter #(> (count %) 1)) (map set) set))","user":"55645592e4b0c656e3ff1802"},{"problem":77,"code":"(fn [xs]\n  (loop [\n      result {} \n      items xs \n      current (first xs) \n      the-rest (rest xs)\n    ]\n    (if (nil? current)\n      (set (map set (filter #(> (count %) 1) (map (fn [[k v]] v) result))))\n      (if (empty? items)\n        (recur result the-rest (first the-rest) (rest the-rest))\n        (letfn [(anagram-sort [x] (sort (map str x)))]\n          (let [item (first items)]\n            (if (= (anagram-sort current) (anagram-sort (first items)))\n              (recur\n                (assoc result current (conj (result current) item))\n                (rest items)\n                current\n                (filter #(not (= item %)) the-rest)\n              )\n              (recur\n                result\n                (rest items)\n                current\n                the-rest\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)","user":"55d79b87e4b0e31453f64aa8"},{"problem":77,"code":"(fn [words]\n  (set\n  \t(filter #(> (count %) 1)\n  \t\t(map set\n  \t\t\t(vals (group-by sort words))))))","user":"55151417e4b055c2f668d4da"},{"problem":77,"code":"(fn [x]\n  (->> (group-by set x)\n       vals\n       (map set)\n       (remove #(< (count %) 2))\n       set))","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn [v]\n  (set (map set (vals (into {} (remove #(= 1 (count (val  %))) (group-by set v)))))))","problem":77,"user":"512d3304e4b040332b905b2d"},{"problem":77,"code":"(fn [words]\n  (->> (for [x words\n             y words\n             :when (and (not= x y) (= (sort x) (sort y)))]\n         [x y])\n       (apply concat)\n       (group-by sort)\n       vals\n       (map #(into #{} %))\n       (into #{})))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":77,"code":"#(set (filter second (map (comp set second) (group-by sort %))))","user":"5339c105e4b0e30313ee6cae"},{"problem":77,"code":"(fn [words] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies words))))))","user":"4e5af45e535d8a8b8723a2b1"},{"code":"(fn [z]\n(set \n  (remove nil? \n        (map (fn [[x y]] (if (> (count y) 1) (set y)))\n             (group-by (fn [x] (clojure.string/join (sort (set x)))) z)))))","problem":77,"user":"50aa60bee4b056ee01935865"},{"code":"(fn [col] \n  (->> col (group-by sort) (map #(into #{} (second %))) (filter #(> (count %) 1)) (into #{})))","problem":77,"user":"4fd81472e4b0dab7d829f38e"},{"problem":77,"code":"#(->> (group-by sort %)\n      (vals)\n      (map set)\n      (filter (fn [c] (<= 2 (count c))))\n      (set))","user":"5b59d176e4b02d533a91bd86"},{"problem":77,"code":"(fn __ [xs]\n  (apply hash-set (filter #(> (count %) 1)\n                          (map #(apply hash-set %)\n                               (vals (group-by (comp sort seq) xs))))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":77,"code":"(fn [v]\n  (letfn [ (canonise [s] (apply str (sort (seq s))))\n           (insert [m word] (let [s (canonise word) \n                                  cur-set (m s) ]\n                             (if cur-set\n                               (assoc m s (conj cur-set word))\n                               (assoc m s #{word} ))))\n           ]        \n    (set (remove #(= 1 (count %)) (vals (reduce #(insert %1 %2) {} v) )))\n    ))","user":"53c1ce3ee4b00fb29b221268"},{"problem":77,"code":"(fn [v] (->> v\n          (group-by sort)\n          (map second)\n          (map set)\n          (filter #(< 1 (count %)))\n          set))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by set words))))))","problem":77,"user":"504e12ade4b078edc5f593b7"},{"problem":77,"code":"(fn [myvec] \n  (set \n    (filter #(> (count %) 1)\n            (for [x (map val (group-by vals (map #(hash-map % (group-by identity %)) myvec)))]\n                 (set (flatten (map keys x)))))))\n\n; andthorn has great solution, where he does a:  (group-by sort ...)\n; this would reduce my solution by about 20-30% probably","user":"56ff45e5e4b08d47c97781bb"},{"problem":77,"code":"#(set \n  (map set \n        (filter \n              (fn [x] (< 1 (count x)))\n              (vals (group-by frequencies %)))))","user":"543d5c61e4b032a45b86934d"},{"code":"(fn [ws]\n  (->> (group-by (fn [w] (sort w)) ws)\n       (vals)\n       (map set)\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":77,"code":";anagram finder\n(fn [words]\n  (letfn [(normalize [word]\n            (clojure.string/join (sort word)))]\n    (let [normalized (map #(normalize %) words)\n          freqs (frequencies normalized)\n          anagram-freqs (filter #(> (val %) 1) freqs)\n          anagrams (reduce (fn [result item]\n                             (assoc result (key item) #{})) {} anagram-freqs)]\n      (into #{} (vals\n                  (reduce (fn [result word]\n                            (let [key (normalize word)]\n                              (if (result key)\n                                (assoc result key (conj (result key) word))\n                                result))) anagrams words))))))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":77,"code":"(fn [items] (set (filter #(> (count %) 1) (map set (map (fn [s] (filter #(= (set s) (set %)) items)) items)))))","user":"57f8ba80e4b0d3187e90092f"},{"problem":77,"code":"(fn ana [w]\n  (into #{} (filter #(> (count %) 1) (map #(set %) (vals (group-by sort w))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":77,"code":"#(->> (for [x % y % :when (and (= (set x) (set y)) (not= x y))] (list x y))\n     (group-by (comp set first))\n     (map (comp set (partial apply mapcat vector) val))\n     (set))","user":"59e0f38ae4b08badc2a0c500"},{"code":"(fn [words]\n  (->> words\n      (group-by (comp (partial apply str) sort))\n      (map second)\n      (filter #(> (count %) 1))\n      (map set)\n      set)\n)","problem":77,"user":"4f8c4ee8e4b02e764a0a5194"},{"code":"(fn aa [v]\n  (set (filter #(> (count %) 1)\n  \n  \t(loop [x v y #{}]\n   \t\t(if (empty? x) y\n   \t    (recur       \n            \n   (filter #(not= (group-by identity %) (group-by identity (first x))) x)\n   (conj y (set (filter #(= (group-by identity %) (group-by identity (first x)))\n                   x)))\n        )\n      )\n        )  )))","problem":77,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn anagram-finder [words]\n  (letfn [(add-anagram [hash word]\n            (let [sorted-word (sort word)]\n              (assoc hash sorted-word\n                     (conj (get hash sorted-word #{}) word))))]\n    (let [anagram-groups (reduce add-anagram {} words)]\n      (set (filter #(> (count %) 1) (vals anagram-groups))))))","problem":77,"user":"4ff355a1e4b0678c553fc34d"},{"problem":77,"code":"(fn\n  [ss]\n  (->> ss\n       (group-by sort)\n       vals\n       (filter next)\n       (map set)\n       set))","user":"510528a0e4b0730a5f55ad85"},{"code":"(fn [s]\n    (set (map set\n              (filter #(> (count %) 1) \n                      (vals (group-by (comp frequencies seq) s))))))","problem":77,"user":"4daea889edd6309eace4d15b"},{"problem":77,"code":"(fn [wrds]\n  (set (map set (filter #(>= (count %) 2) \n     (vals (group-by set wrds))))))","user":"608e5697e4b03bd49d9f36be"},{"problem":77,"code":"(fn anagrams [coll]\n           (->> coll\n                (group-by #(set (partition-all 1 %)))\n                (vals)\n                (filter #(> (count %) 1))\n                (map set)\n                (set)))","user":"5e3975a3e4b01d43a70e8dd3"},{"code":"(fn [x] (set (filter #(> (count %) 1) (vals\n  (reduce #(if (% (set %2)) (assoc % (set %2) (conj (% (set %2)) %2))\n  \t(assoc % (set %2) (conj #{} %2))) {} x)))))","problem":77,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn [coll]\n  (set \n    (map set\n         (filter #(>= (count %) 2)\n                 (vals\n                   (group-by sort coll))))))","problem":77,"user":"500900dee4b0144d4f561e42"},{"code":"(fn fnc [v] (set (filter (fn [x] (> (count x) 1)) \r\n                          (map set (vals (group-by sort v))))))","problem":77,"user":"506717e2e4b03d366d7cb2ba"},{"problem":77,"code":"(fn [coll]\n   (letfn [(ps [str]\n               (-> str (.split \"\") (sort) (clojure.string/join)))]\n     (reduce #(conj %1 (set %2)) #{}\n       (filter #(< 1 (count %)) (partition-by ps (sort-by ps coll))))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn collect-anagrams [words]\n  (letfn [(anagrams? [word1 word2]\n            (= (sort (map #(str %) (seq word1)))\n               (sort (map #(str %) (seq word2)))))]\n    (into #{} (filter\n               #(> (count %) 1)\n               (map (fn [word]\n                      (reduce (fn [anagrams w]\n                                (if (anagrams? word w)\n                                  (conj anagrams w)\n                                  anagrams\n                                  ))\n                              #{}\n                              words)) words)))))","problem":77,"user":"50052fd0e4b0678c553fc45d"},{"problem":77,"code":"(fn [ss]\n  (set\n   (filter #(> (count %) 1)\n   \t(map set (vals (group-by sort ss))))))","user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn anagram-finder [s]\n  (->> (group-by #(apply str (sort (seq %))) s)\n       (vals)\n       (reduce #(if (> (count %2) 1) (conj %1 (set %2)) %1) #{})\n       )\n  )","problem":77,"user":"53527551e4b084c2834f4af0"},{"code":"(fn [v]\n   (set  (map set (remove #(< (count %) 2) (vals (group-by \n#(sort (sequence %)) v))))))","problem":77,"user":"4f04a06d535dcb61093f6bd9"},{"problem":77,"code":"(fn anagrams [coll]                      \n  (letfn [(sorted-string [a]               \n            (->> a seq sort (apply str)))] \n    (->> coll (group-by sorted-string)     \n         vals                              \n         (map set)                         \n         (filter #(< 1 (count %)))         \n         set)))","user":"50573ed8e4b0012181721987"},{"problem":77,"code":"(fn [s]\n  (->> s\n       (group-by frequencies)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"4eb70649535d7eef30807373"},{"problem":77,"code":"(fn [strings] (set (map set (remove #(= 1 (count %)) (map second (group-by frequencies strings))))))","user":"55ed1575e4b0121d4835fdd3"},{"problem":77,"code":"#(reduce (fn [a b]\n           (if (> (count b) 1)\n             (conj a (set b))\n             a))\n         #{}\n         (vals (group-by set %)))","user":"533018b2e4b019098a6f8b56"},{"code":"(fn [s]\n  (->> \n   s\n   (group-by sort)\n   vals\n   (filter #(> (count %) 1))\n   (map set)\n   set))","problem":77,"user":"5117c31ee4b0e0897831a60c"},{"problem":77,"code":"(fn [xs] (set (map set (map #(second %) (filter #(> (count (second %)) 1) (group-by sort xs))))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (->> (group-by sort coll)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn [x] \r\n  (set (keep #(if (next %) (set %)) (vals (group-by sort  x)))))","problem":77,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn[s]\r\n  (into #{} \r\n    (filter #(> (count %) 1)\r\n      (map \r\n        (fn[x](into #{} (filter #(= (sort %) (sort x )) s)))\r\n       s))))","problem":77,"user":"4deff9f9535d08e6dec9fe15"},{"problem":77,"code":"(fn [a]\n  (set (for [x (keys (filter (fn [[k v]] (> v 1)) (frequencies (map set a))))]\n     (set (filter (fn [y] (= x (set y))) a)))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":77,"code":"(fn [v]  (set (filter #(> (count %) 1) (map set (vals (group-by sort v))))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":77,"code":"(fn anagrams [coll]\n  (set (for [word coll\n             :let [sorted (sort word)\n                   found (filter #(= sorted (sort %)) coll)]\n             :when (< 1 (count found))]\n         (set found))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":77,"code":"#(set (filter second (vals (apply merge-with into (map (fn [s] {(sort s) #{s}}) %)))))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [v]\n  (loop [v1 v m {}]\n    (if (empty? v1)\n      (set (filter #(< 1 (count %1)) (vals m)))\n      (let [w (first v1)\n            k (sort (seq w))\n            ss (m k)]\n        (recur (rest v1) (assoc m k (conj (if (nil? ss) #{} ss) w)))))))","problem":77,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn [l]\n    (letfn [(find-anagrams [ll]\n              (loop [w (sort (first ll))\n                     r (rest ll)\n                     a []\n                     d []]\n                (if (empty? r) [(if (empty? a) a (conj a (first ll))) d]\n                    (let [nw (sort (first r))]\n                      (if (= w nw)\n                        (recur w (rest r) (conj a (first r)) d)\n                        (recur w (rest r) a (conj d (first r))))))))]\n      (loop [ll l\n             res #{}]\n        (let [[a d] (find-anagrams ll)]\n          (if (or (empty? d) (= (count d) 1))\n            (if (empty? a) (set res) (conj res (set a)))\n            (recur d (conj res (set a))))))))","problem":77,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [v]\n  (set \n    (map #(set %) \n      (filter #(> (count %) 1) \n        (vals (group-by #(sort %) v))))))","problem":77,"user":"4e9519b4535dbda64a6f6b2d"},{"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by set words)))))\n)","problem":77,"user":"51db9e1ee4b0e067a9bbadc9"},{"problem":77,"code":"(fn [v] \n  (into #{}\n        (map set\n             (filter #(> (count %) 1)\n                     (map val (group-by sort v))))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":77,"code":"#(set (->> (group-by sort %)\n            vals\n            (filter (comp pos? dec count))\n            (map set)))","user":"56b6e354e4b0982f16b37e41"},{"problem":77,"code":"(fn\n  [words]\n  (let [m (zipmap words (map frequencies words))\n        kv (fn [[k v]] (set (map key (filter #(= v (val %)) m))))]\n    (set (filter #(> (count %) 1) (map kv m)))))","user":"53843906e4b06839e8705eee"},{"code":"(fn anagrams [strs]\n  (set\n    (filter (fn [x] ( > (count x) 1))\n     (for [i strs]\n      (set (filter  #(= (frequencies i) (frequencies %)) strs))))))","problem":77,"user":"5273e006e4b03e8d9a4a7495"},{"problem":77,"code":"(fn [words]\n  (set\n    (filter #(> (count %) 1) \n      (map #(set %)\n         (vals \n           (group-by \n              #(->> % (.toCharArray) (map (fn [x] (Character/getNumericValue x))) (reduce +)) words))))))","user":"565b941ce4b068f2fe63dc07"},{"problem":77,"code":"(fn anagrams [words]\n(set (map set (filter #(> (count %) 1) (map second (group-by frequencies words)))))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn anagram-finder [s]\n  (loop [word (first s)\n         others (rest s)\n         acc #{}]\n    (if (empty? others)\n      acc\n      (let [matches (filter #(= (sort word) (sort %)) others)\n            others (remove (fn [i] (some #(= i %) matches)) others)]\n        ;; if we have matches, remove them from others and recur\n        (cond\n         (empty? matches) (recur (first others)\n                                 (rest others)\n                                 acc)\n         :else (recur (first others)\n                      (rest others)\n                      (conj acc (set (cons word matches)))))))))","problem":77,"user":"4fd16778e4b04c3a95aa040f"},{"problem":77,"code":"(fn [words]\n  (let [anagrams (vals (group-by sort words))]\n    (set \n      (map set\n        (filter #(> (count %) 1) anagrams)))))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn [xs]\n  (->> xs\n    (group-by #(sort %))\n    (vals)\n    (filter #(> (count %) 1))\n    (map #(into #{} %))\n    (into #{})))\n               \n  ; (into #{} (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by #(sort %) xs))))))","problem":77,"user":"511442d0e4b0e9c109bb74d5"},{"problem":77,"code":"(fn [s] (set (filter #(> (.size %) 1) (map set (vals (group-by #(frequencies (seq %)) s))))))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn [words]\n  \n  (->> words (group-by sort) vals (filter #(> (count %) 1)) (map set) set)\n  \n  )","problem":77,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [x] (set (for [i (vals (group-by sort x)) :when (< 1 (count i))] (set i))))","problem":77,"user":"51cbdee1e4b08d8387cbede1"},{"code":"#(->> % \n  (group-by sort)\n  (map (comp set val))\n  (filter (comp (partial < 1) count))\n  set)","problem":77,"user":"4eb51942535d7eef30807365"},{"problem":77,"code":"(fn [v]\n  (into #{}\n    (map set\n         (filter #(> (count %) 1)\n                 (map val (group-by sort v))))))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":77,"code":"#(set (map set (filter (comp (partial <= 2) count) (vals (group-by sort %)))))","user":"55bfc39ee4b01b9910ae2a1a"},{"code":"#(set \n  (filter \n    (comp (partial < 1) count)\n    (map \n      set \n      (vals \n        (group-by sort %)))))","problem":77,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":";(fn anagram-finder\n;  [ss]\n;  (letfn [(letter-sets [s] (->> s\n;                                (group-by identity)\n;                                vals\n;                                set))\n;          (letter-set-groups [ss] (vals (group-by #(identity (first %))\n;                                                  (map #(vector(letter-sets %) %) ss))))]\n;    (set (->> (letter-set-groups ss)\n;              (filter #(>(count %) 1))\n;              (map  #((fn [xs] (map second xs)) %))\n;              (map set)))\n;    ))\n\n(fn anagram-finder\n  [ss]\n  (->> ss\n       (group-by sort)\n       (map (fn [[k v]] (set v)))\n       (filter #(not= 1 (count %)) )\n       set))","problem":77,"user":"524f4256e4b0541d1855b808"},{"code":"(fn [x] (set (map set (filter #(> (count %) 1) (vals (group-by sort x))))))","problem":77,"user":"531f7a2de4b08068f379edc6"},{"problem":77,"code":"(fn [l]\n  (let [h (fn [s] (hash (sort s)))] \n   (set\n    (->> l\n     (sort-by h)\n     (partition-by h)\n     (map set)\n     (filter #(< 1 (count %)))))))","user":"57487084e4b009280f9f2b8c"},{"problem":77,"code":"(fn [w]\n    (let [n #(empty? (clojure.set/union\n                      (clojure.set/difference (set %) (set %2))\n                      (clojure.set/difference (set %2) (set %))))\n          k (for [x w]\n               (into (sorted-set) x))\n          s (set (for [j k]\n                   (set (filter #(n j %)\n                                w))))]\n      (set (filter #(< 1 (count %)) s))))","user":"52e1c276e4b09f7907dd142b"},{"code":"(fn [s] (into #{} (remove #(= (count %) 1) (map #(into #{} (second %)) (group-by sort s)))))","problem":77,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [xs] \n  (into #{}\n        (filter #(< 1 (count % ))\n                (for [[k v] (group-by sort xs)] \n                  (set v)))))","problem":77,"user":"513d121fe4b0e544971636a2"},{"code":"(fn anagramize [words]\n  (set (map set (remove #(= 1 (count %)) (vals (group-by sort words))))))","problem":77,"user":"53307da1e4b019098a6f8b5e"},{"problem":77,"code":"(fn [ws]\n  (set (map (comp set val)\n            (remove (comp #{1} count val) (group-by frequencies ws)))))","user":"567931e9e4b05957ce8c6184"},{"problem":77,"code":"(fn [coll]\n  (into #{} (map set (filter #(>= (count %) 2) (vals (group-by frequencies coll))))))","user":"5958cef6e4b066ee0a44af94"},{"problem":77,"code":"(fn [v]\n        (set (filter #(< 1 (count %))\n                     (map set\n                          (vals (group-by #(sort (seq %)) v))))))","user":"544e6b7fe4b0e39780006986"},{"code":"(fn afinder [words]\n  (letfn [(agram [w1 w2] \n            (= (akey w1) (akey w2)))\n          (akey [w] \n            (reduce #(assoc %1 %2 (if-let [val (%1 %2)] (inc val) 1)) {} w))]\n          (set\n            (map val \n                 (filter #(> (count (val %)) 1)  \n                         (reduce\n                           #(assoc %1 (akey %2) (if-let [s (%1 (akey %2))] (conj s %2) #{%2}))\n                           {}  \n                           words))))))","problem":77,"user":"51b8e8b3e4b050a1176cd6a0"},{"problem":77,"code":"(fn [s]\n  (set (filter #(> (count %) 1)\n               (reduce #(conj % (set (filter (fn [a] (= (sort a) (sort %2))) s))) #{} s)))\n                  )","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":77,"code":"(fn [a-seq] \n  (let [all-groups  (group-by set a-seq)\n        real-groups (filter #(> (count (second %)) 1) all-groups)\n        anagrams    (map #(set (second %)) real-groups)]\n    (set anagrams)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":77,"code":"(fn [coll]\n  (loop [l coll d {}]\n    (if (empty? l)\n      (set (filter #(> (count %) 1) (vals d)))\n      (if (d (sort (seq (first l))))\n        (recur (next l) (update-in d [(sort (seq (first l)))] conj (first l)))\n        (recur (next l) (assoc d (sort (seq (first l))) #{(first l)}))\n      )\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1)\n               (map\n                (fn [x] (set (filter #(= (sort %) x) words)))\n                (set (map sort words))))))","problem":77,"user":"500cb910e4b05f7c30cfa698"},{"problem":77,"code":"(fn [z]\n\n(letfn \n [\n  (main [a  b]\n   (into #{} \n     (map #(apply str %)\n     (reduce \n      (fn test1 [c d]\n         (if   \n           (=  \n               (count \n                   (clojure.set/intersection \n                                             (set d) \n                                             (set (clojure.string/split b #\"\"  )) \n                   )\n               ) \n               (count (set b)) \n               (count (set d))\n           ) \n           (conj c d) \n           c\n         )\n      )\n      []\n      (map  \n          (fn test2 [ x] \n           (rest \n                (clojure.string/split x #\"\"  )\n           )\n          )   \n          a\n      )\n )\n)\n))]  (into #{} (filter #(> (count %) 1) (into #{} (map #(main z  %)  z))))\n)\n)","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by frequencies words))))))","problem":77,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [l] (set ( for [ p (map first (filter #(> (second %) 1) (frequencies (map frequencies l))))]\n                   (set ( filter #(= (frequencies %) p) l )))))","problem":77,"user":"50ef3e5de4b0a78662fa2652"},{"code":"#(->> % (group-by set) vals (filter next) (map set) set)","problem":77,"user":"513f0565e4b051389b345b3b"},{"code":"(fn anagrams [words] \n  (into #{} (map set (filter #(< 1 (count %)) \n                     (vals (group-by frequencies words))))))","problem":77,"user":"52361d84e4b05f3be1c7c8e5"},{"problem":77,"code":"#(->>\n   (reduce (fn [r s]\n             (let [ss (sort s)]\n               (if (contains? r ss)\n                 (update-in r [ss] conj s)\n                 (assoc r ss #{s}))))\n           {} %)\n   vals\n   (remove (fn [s] (= 1 (count s))))\n   set)","user":"55db7e15e4b0e31453f64ae8"},{"problem":77,"code":"(fn [w]\n  (set\n   (map (comp set val)\n    (remove (comp #{1} count val) (group-by frequencies w)))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn anagram-finder [words]\n  (set (filter #(> (count %1) 1)\n    (map\n      #(set (map first %))\n      (vals\n        (group-by (fn [[a b]] b)\n          (map #(list %1 (sort %1)) words)))\n      ))))","problem":77,"user":"5094057fe4b097f48cc38593"},{"code":"#(set \n  (->>  (group-by sort %)\n        (map (comp set second))\n        (filter next)))","problem":77,"user":"4eb5750a535d7eef30807366"},{"code":"(fn [v] (set (map set (filter #(< 1 (count %)) (vals (group-by sort v))))))","problem":77,"user":"5078d366e4b08327cd804a5b"},{"problem":77,"code":"(fn anagrams [sq]\n  (->> sq\n       (group-by (fn [s] (set (seq s))))\n       vals\n       (filter #(> (count %) 1))\n       (map (fn [c] (into #{} c)))\n       (into #{})\n       )\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":77,"code":"(fn [words]\n (set\n  (filter #(>= (count %) 2)\n   (map (fn [[_ v]] v)\n    (reduce\n     #(let [k (set %2)]\n       (assoc %1 k (conj (%1 k #{}) %2)))\n     {}\n     words)))))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":77,"code":"#(->> %\n      (group-by frequencies)\n      (vals)\n      (map set)\n      (filter (fn [x] (< 1 (count x))))\n      set)","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn [words] (into #{} (map #(into #{} %)(filter #(> (count %) 1) (vals (group-by frequencies words))))))","problem":77,"user":"50800e49e4b089ade05efbda"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by sort)\n       vals\n       (filter #(< 1 (count %)))\n       (map set)\n       (into #{})))","user":"55702081e4b09a3098a52529"},{"problem":77,"code":"(fn anagram [coll]\n  (set (map set \n            (filter #(> (count %) 1) (vals (group-by set coll)))\n            ))\n  )","user":"5972fcf6e4b01722bebd4c92"},{"problem":77,"code":"#(set \n   (filter % \n     (map (comp set val) \n       (group-by frequencies %2))))\n#(next %) ;; shorter and more beautiful than > count for > 1","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":77,"code":"(fn[wcol](into #{} ((fn[hm](map set (filter (fn[values](> (count values) 1)) (vals (apply merge-with into hm))))) (map #(hash-map (sort (re-seq #\"[a-zA-Z]\" %)) [%]) wcol))))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn anafind [xs] (set (map set (filter #(> (count %) 1) (vals (group-by sort xs))))))","problem":77,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn anagram-finder [lst]\r\n  (letfn [(string-sort [s]\r\n  \t       (apply str (sort (re-seq #\"[A-z]\" s))))\r\n\t  (filter-words [k ls]\r\n\t\t\t(conj (set (filter #(= (string-sort k) (string-sort %))\r\n\t\t\t\tls)) k))\r\n\t  ]\r\n  (cond (nil? (first lst)) nil\r\n\t(= 1 (count lst)) nil\r\n\t:else (set (filter #(not (= 1 (count %))) (map  #(filter-words % lst) lst))))))","problem":77,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set )\n    set))","problem":77,"user":"51ce1320e4b0e42293a22551"},{"problem":77,"code":"(fn [w] (set (filter #(> (count %) 1) (map (comp set second) (group-by set w)))))","user":"5c1c08cde4b01240ff567219"},{"problem":77,"code":"(fn [words]\n   (set (filter #(> (count %) 1)\n                (vals \n                 (loop [m {}\n                        ws words]\n                   (if (empty? ws) m\n                       (let [word (first ws)\n                             anagram-key (apply str (sort (seq word)))\n                             existing-anagrams (m anagram-key)]           \n                         (recur (merge m {anagram-key (conj (or existing-anagrams #{}) word)}) (rest ws)))))))))","user":"5bb25684e4b0a20761a2350d"},{"problem":77,"code":"(fn [col]\n  (set\n   (filter #(> (count %) 1)\n           (vals (reduce \n                  #(merge-with clojure.set/union %1 {(frequencies %2) #{%2}})\n        \t\t  {}\n                  col)))))","user":"55536a8ae4b0deb715856e03"},{"problem":77,"code":"(fn [coll] (set (map set (filter #(> (count %) 1) (vals (group-by frequencies coll))))))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":77,"code":"(fn ana [l]\n      (let [isana (fn [a b]\n                      (and (= (count a) (count b))\n                           (= (count (set a))\n                              (count (clojure.set/union (set a) (set b))))\n                           (not= a b)))\n            getanas (fn [rw wl]\n                        (for [x wl\n                             :when (isana rw x)]\n                             x))\n            answer #{}]\n            (into #{} (clojure.set/union (into #{} (filter #(> (count %) 1)\n                         (doall (for [m l] (set (conj (getanas m l) m))))))))))","user":"52747090e4b03e8d9a4a74a5"},{"problem":77,"code":"(fn [words] (set (map set (filter #(< 1 (count %1)) (vals (group-by #(sort %1) words))))))","user":"575a0ef0e4b02ea114799335"},{"problem":77,"code":"(fn anagram-finder [words]\n  (->> words\n       (map #(vector % (clojure.string/join \"\" (sort %))))\n       (group-by second)\n       (map second)\n       (map #(map first %))\n       (filter #(> (count %) 1))\n       (map set)\n       (set)\n       )\n  )","user":"5aada061e4b073f17744257a"},{"code":"(fn af [x]\n  (loop [l x\n         result {}]\n    (if (empty? l)\n      (set (map #(set %) (filter #(> (count %) 1) (vals result))))\n      (recur (rest l)\n             (conj result [(sort (first l))\n                    (cons (first l) \n                          (get result (sort (first l)) '()))])))))","problem":77,"user":"52e17e66e4b09f7907dd1423"},{"problem":77,"code":"(fn [s]\n  (let [anagram-of? (fn [x y]\n                      (= (frequencies x)\n                         (frequencies y)))\n        anagrams-of (fn [x]\n                      (set (filter (fn [y]\n                                (anagram-of? x y)) s)))]\n    (set (filter #(> (count %) 1)\n                 (map anagrams-of s)))))","user":"54d000c7e4b018d918be98d7"},{"problem":77,"code":"(fn [x] (into #{} (map set (filter #(< 1 (count %)) (vals (group-by sort x))))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":77,"code":";; my solution:\n(fn [words]\n    (letfn [(anagrams? [str1 str2]\n              (= (set str1) (set str2)))\n            (anagrams-of-word-in-list [word word-vec]\n              (reduce #(if (anagrams? (first %) %2) (conj % %2) %) #{word}  word-vec))]\n      (set (->> words\n                (map #(anagrams-of-word-in-list % words))\n                (into #{})\n                (filter #(< 1 (count %)))))))\n;; better, just using core functions:\n;; #(->> % (group-by sort) vals (filter second) (map set) set)","user":"54ad9d76e4b09f271ff37ce6"},{"problem":77,"code":"(fn [xs]\n   (->> (group-by sort xs)\n        (vals)\n        (filter #(>= (count %) 2))\n        (map set)\n        (set)))","user":"58db3c5ae4b0a4d5acaab677"},{"code":"(fn [x]\n  (let [a (map clojure.string/join (map sort (map #(drop 1 %) (map #(clojure.string/split % #\"\") x))))\n        c (filter #(> (count %) 1)\n            (for [b a]\n              (loop [ind 0 result []]\n                (if (< ind (count a))\n                  (if (= 0 (compare (nth a ind) b))\n                    (recur (inc ind) (cons ind result))\n                    (recur (inc ind) result)\n                  )result))))]\n    (set  \n      (map set\n        (for [d c]\n          (map #(nth x %) d))))))","problem":77,"user":"52016690e4b0b2e020a18f0f"},{"problem":77,"code":"(fn [words]\n\t(->>\n\t\twords\n\t\t(group-by #(sort %))\n\t\tvals\n\t\t(filter #(> (count %) 1))\n     \t(map set)\n\t\tset))","user":"5472d919e4b094393f72dd7b"},{"problem":77,"code":"(fn [words]\n  (set (for [[_ ws] (group-by sort words) :when (> (count ws) 1)]\n         (set ws))))","user":"53576356e4b04ce2eb3ed27a"},{"code":"(fn [l]\n  (set (map set (filter #(> (count %) 1)\n                (vals (group-by sort l))))))","problem":77,"user":"4e720985535d5021c1a89655"},{"code":"(fn anagram [words]\n    (into #{}\n    (filter #(> (count %) 1)\n        (map #(into #{} %)\n            (vals\n                (group-by sort words))))))","problem":77,"user":"4f128865535d64f603146428"},{"problem":77,"code":";(vec (\n(fn [words]\n  (->> words\n       (group-by set)\n       (map (comp set second))\n       (filter #(> (count %) 1))\n       (into #{})))\n; [\"meat\" \"team\" \"mat\"]))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(set %))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"567798afe4b05957ce8c6169"},{"problem":77,"code":"(fn [coll] (->> (group-by sort coll) \n                (filter #(> (count (val %)) 1)) \n                (map #(set (val %))) \n                (set)))","user":"57c44053e4b05aa3c4741ccb"},{"problem":77,"code":"(fn [words]\n  (->> words \n       (group-by sort) \n       (vals) \n       (remove #(= 1 (count %))) \n       (map set) \n       (set)))","user":"596a66cde4b069c0a1a19803"},{"code":"#(set (filter (comp pos? dec count) (map (comp set second) (group-by sort %))))","problem":77,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn[x](into #{} (map set (vals (filter (fn [x] (>= (count (second x)) 2)) (group-by #(apply str(sort %1)) x))))))","problem":77,"user":"5225b16de4b0d2f5d1e2c0ed"},{"code":"(fn [coll]\n    (set (keep (fn [[k v]] (if (> (count v) 1) v))\n          (apply merge-with clojure.set/union\n                 (map (fn [s] {(sort (seq s)) #{s}}) coll) ))))","problem":77,"user":"4ea092f4535d7eef308072a6"},{"code":"(fn func [coll]\n (set (map set (remove #(= 1 (count %))(vals (group-by sort coll))))))","problem":77,"user":"505dd5c4e4b0e6aca564be0e"},{"problem":77,"code":"(fn [xs]\n  (->> xs\n      (map (fn [x] {(set x) #{x}}))\n      (apply (partial merge-with into))\n      vals\n      (filter #(> (count %) 1))\n      set))","user":"5cdc17d0e4b05ee0cb31173c"},{"code":";I was feeling quite good about my solution:\n(fn [x] \n  (reduce (fn [z s] \n            (let [m (reduce (fn [coll s1] \n                              (if ((fn anagram? [s s1] \n                                     (and (not= s s1) (= (group-by identity s) (group-by identity s1)))) s s1) \n                                (conj coll s1 s) coll)) \n                            #{} x)] \n              (if (seq m) (conj z m) z))) \n          #{} x))\n\n;... Until I saw this:\n\n;(fn [v] \n;  (set \n;   (map set (filter #(> (count %) 1) \n;                    (vals (group-by sort v))))))","problem":77,"user":"536a37efe4b0243289761eaa"},{"problem":77,"code":"(fn [words]\n  (->> (group-by sort words)\n       vals\n       (filter second)\n       (map set)\n       set))","user":"50ec409ce4b04edc33777045"},{"code":"#(set(filter second (map set (vals (group-by set %)))))","problem":77,"user":"4db29f98535df7e46ed9b6c1"},{"problem":77,"code":"(fn [l]\n  (let\n    [s #(into #{} (seq %))\n    a (fn [old new] (or (when (< 1 (count new)) (conj old new)) old))]\n    (reduce (fn [the-set v] (a the-set (into #{} (filter #(= (s %) (s v)) l)))) #{} l)))","user":"50f53694e4b057d4c52de881"},{"problem":77,"code":"(fn [l]\n  (->> l\n    (group-by frequencies)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    set))","user":"5c3440fee4b0d62ef62d9f50"},{"problem":77,"code":"(fn [x] (set (filter second (map set (vals (group-by sort x))))))","user":"54908cc1e4b0b312c081ff32"},{"code":"#(set\n  (map (comp set val)\n       (remove (comp #{1} count val)\n               (group-by frequencies %))))","problem":77,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":77,"code":"(fn [ws]\n  (->>\n    (reduce\n      (fn [m w]\n        (update-in m [(sort w)] #(if % (conj % w) #{w}))) {} ws)\n    vals\n    (filter #(> (count %) 1))\n    set))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn [words]\n  (set (map set (filter #(< 1 (count %))\n                        (vals (group-by sort words))))))","problem":77,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [s] (into #{} \n              (map #(into #{} %) \n                   (filter #(if (> (count %) 1) %) \n                           (vals (group-by #(sort (vec %)) s))))))","problem":77,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn my-anagram-finder\r\n([ss] (my-anagram-finder ss #{}))\r\n([ss res] (if (nil? ss) \r\n\t      res\r\n\t    (let [head (first ss)\r\n\t\t  tail (rest ss)\r\n                  canon (fn [s] (clojure.string/join (sort s)))\r\n\t\t  key (canon head)\r\n\t\t  groups (group-by #(= key (canon %)) tail)\r\n\t\t  [keep rest] (map #(get groups %) [true false])]\r\n\t      (recur rest \r\n\t\t     (if (empty? keep) \r\n\t\t\t res\r\n\t\t       (conj res (into #{} (cons head keep)))))))))","problem":77,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [coll]\n   (->> coll\n        (group-by (fn [word] (-> word seq sort)))\n        vals\n        (filter #(< 1 (count %)))\n        (map set)\n        set))","problem":77,"user":"509e62a8e4b08df8156e9e2e"},{"problem":77,"code":"#(set (map set (filter (comp seq rest)\n                       (vals (group-by sort %)))))","user":"512700c4e4b083bb8f88cf14"},{"problem":77,"code":"(fn  [coll]\n  (set\n  (filter #(< 1 (count %))\n          (set (for [g (#(map first\n                       (partition-by identity\n                                     (sort-by str (map sort coll)))))]\n                 (clojure.set/select #(= g (sort %)) (set coll))\n                 )\n               )\n          )\n  )\n)","user":"56f73913e4b08e7d20b9682d"},{"code":"(fn anagram [coll]\n    (set (map set \n      (filter #(< 1 (count %)) \n        (vals (group-by frequencies coll))))))","problem":77,"user":"4faafccde4b081705acca209"},{"problem":77,"code":"(fn [xs] \n  (->> (group-by #(set %) xs)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":77,"code":"(fn anagram-finder\n  [s]\n  (set\n   (map\n    set\n    (filter\n     #(> (count %) 1)\n     (vals (group-by #(apply str (sort %)) s))))))","user":"53b952eee4b047364c0444e6"},{"problem":77,"code":"(fn g [x]\n  (->> x\n       (group-by #(set (seq %)))\n       vals\n       (map set)\n       (filter #(>= (count %) 2))\n       set))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":77,"code":"(fn [s] \n  (set \n   \t(map set \n      (filter #(> (count %) 1) \n        (vals (group-by #(sort %) s))))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [s] (set (filter #(> (count %) 1) (map set (vals (group-by sort s))))))","problem":77,"user":"510acd6ee4b078ea719210f4"},{"code":"#(set (map set (filter (fn [ws] (> (count ws) 1)) (vals (group-by (fn [w] (apply + (map int w))) %)))))","problem":77,"user":"4e7f4147535db966e863cc3d"},{"problem":77,"code":"(fn [i] (set (map set (filter  #(> (count %) 1) (vals (#(group-by (fn [w] (apply str (sort w))) %) i))))))","user":"56c6a3c3e4b05cc29241eeb3"},{"problem":77,"code":"(fn anagrams [vec-of-words]\n  (->> (group-by sort vec-of-words)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5783c505e4b0ebec4cfb74bc"},{"problem":77,"code":"(fn anagrams [s] \n  (->> s\n       (group-by sort)\n       (vals)\n       (filter #(> (count %) 1))\n       (map set)\n       (set)\n  )\n)","user":"57887de2e4b0ebec4cfb751c"},{"problem":77,"code":"(fn [ws]\n  (->> \n   ws\n   (reduce \n    (fn [m w] \n      (update-in\n       m\n       [(sort w)]\n       (fnil #(conj % w)\n             #{})))\n    {})\n   (vals)\n   (filter #(> (count %) 1))\n   (into #{})\n   ))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":77,"code":"(fn anagram-finder [words]\n  ;; (trace \"ANAGRAM-FINDER\")\n  ;; iterate over words\n  (reduce\n   (fn [acc word]\n     ;; get all the other words\n     (let [other-words (filter (fn [w] (not (= word w))) words)\n           includes? (fn [w c]\n                       (reduce (fn [acc ch]\n                                 (cond (= ch c) true\n                                       :else acc)) false w))\n           subset (reduce\n                   (fn [acc other-word]\n                     ;; (debug \"Other-word: \" other-word)\n                     (let [filtered-word (doall (apply str (filter (fn [c] (includes? word c)) other-word)))\n                           anagram? (and (= filtered-word other-word) (= (count other-word) (count word)))]\n                       ;; (debug \"filtered-word: \" filtered-word)\n                       ;; (debug \"Anagram?: \" anagram?)\n                       (cond anagram? (conj acc filtered-word word)\n                             :else acc\n                             ))) #{} other-words)]\n       ;; (println \"\")\n       ;; (debug \"Acc: \" acc)\n       ;; (debug \"Words: \" words)\n       ;; (debug \"Other-words: \" other-words)\n       ;; (debug \"Word: \" word)\n       ;; (debug \"Subset: \" subset)\n       (cond (not (empty? subset)) (conj acc subset)\n             :else acc\n     ))) #{} words)\n  )","user":"5d631376e4b0c9e5857d5023"},{"code":"(fn [v]\n                      (letfn [(characterize [s] (apply conj (for [letter (distinct s)] {letter (count (filter #(= letter %) s))})))\n                              (is-anagram-of? [a b] (if (not (= (count a) (count b))) false (= (characterize a) (characterize b))))\n                              (find-anagrams-for-word [accum remainder word]\n                                (let [anagrams (set (filter #(is-anagram-of? word %) remainder))]\n                                  (if (seq anagrams)\n                                    #(find-remaining-anagrams (conj accum (conj anagrams word)) (remove anagrams remainder))\n                                    #(find-remaining-anagrams accum remainder))))\n                              (find-remaining-anagrams [accum remainder]\n                                (if (> (count remainder) 1)\n                                  #(find-anagrams-for-word accum (rest remainder) (first remainder))\n                                  accum))]\n                        (trampoline find-anagrams-for-word #{} (rest v) (first v))))","problem":77,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":77,"code":"(fn [coll]\n  (set (map set (map second (filter #(> (count (second %)) 1) (reduce (fn [acc s]\n                                                                    (update-in acc [(apply str (sort s))] conj s)) {} coll)))))\n  )","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":77,"code":"(fn [v] (->> v\n\t(map (juxt sort identity))\n\t(group-by first)\n\t(map val)\n\t(map (comp set #(map second %)))\n\t(filter #(> (count %) 1))\n\t(set)))","user":"57ccedaae4b0c746388ab88e"},{"problem":77,"code":"(fn [words]\n  (set (map set (filter #(> (count %) 1) (vals (group-by #(sort %) words))))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":77,"code":"#(->> (group-by set %)\n      vals\n      (filter (comp seq rest))\n      (map set)\n      set)","user":"5a080bdde4b01bb0ae8afde9"},{"problem":77,"code":"(fn [ws]\n  (->> ws\n       (group-by sort)\n       vals\n       (map #(into #{} %))\n       (filter #(> (count %) 1))\n       (into #{})))","user":"563772a9e4b0bfe05bf117d7"},{"problem":77,"code":"(fn [v]\n  (->> v\n       (group-by #(set (seq %)))\n       vals\n       (map set)\n       (filter #(> (count %) 1))\n       (into #{})))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":77,"code":"(fn [words]\n  (let [getwordsec\n        (fn [w]\n          (sort (seq w)))\n        findwords\n        (fn [m ws]\n          (get m ws #{}))\n        addword\n        (fn [m w]\n          (let [ws (getwordsec w)\n                curset (findwords m ws)\n                newset (conj curset w)\n                newmap (assoc m ws newset)]\n            newmap))\n        bareres\n        (reduce\n         addword\n         {} words)]\n    (set (filter #(> (count %) 1) (vals bareres)))\n    ))","user":"592334c7e4b0a390037439ee"},{"problem":77,"code":"#(->> (group-by sort %)\n       (vals)\n       (filter (fn [word] (> (count word) 1)))\n       (map set)\n       (set)\n       )","user":"5d6633bde4b0db5d338d15e2"},{"problem":77,"code":"(fn [coll]\n\n  (set (map #(set (val %)) (filter #(> (count (val %)) 1) (group-by sort coll)))))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn [s] (set (filter #(> (count %) 1) (vals (reduce #(assoc % (apply str (sort %2)) (conj (% (apply str (sort %2)) #{}) %2)) {} s)))))","problem":77,"user":"50ed4626e4b01236b1d4983c"},{"problem":77,"code":"(fn [x] \n  (set\n   (map #(set (map first %))\n     (filter #(> (count %) 1)\n             (map second\n                  (group-by second\n                            (map #(list % (apply str (sort %)))\n                                 x)))))))","user":"51dd5d6fe4b0c33a4e1da406"},{"code":"(fn [v]\n  (let [r (reduce \n            #(if (contains? %1 (first %2))\n               (merge-with conj %1 {(nth %2 0) (nth %2 1)})\n               (assoc %1 (first %2) (list (second %2))))\n            {}\n            (map (juxt frequencies identity) v))]\n    (apply hash-set \n           (filter #(> (count %) 1)  (map #(apply hash-set %) (map second r))))\n    )\n  )\n;; So the key that I missed which would have simplified the solution was \n;; the clojure function 'group-by'.  Follow 'amalloy' for an elegant solution.","problem":77,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn [words]\n    (set (filter #(> (count %) 1)\n                 (map set (vals (group-by sort words))))))","problem":77,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [v] (->> v (group-by sort) (vals) (filter  #(> (count %) 1)) (map set) (set)))","problem":77,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn ana [wv]\n  (->>\n   wv\n   (group-by set)\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)\n   ))","problem":77,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [input]\n  (letfn [(collect-by [f c]\n            (reduce (fn [a v]\n              (let [k (f v)] (assoc a k (conj (a k []) v)))) {} c))]\n    (set (map set (filter #(< 1 (count %))\n      (vals (collect-by sort input)))))))","problem":77,"user":"4e89ddf9535d3e98b8023284"},{"problem":77,"code":"(fn anagram [coll]\n  (->> coll\n       (group-by #(sort (apply list %)))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5e0d948fe4b099d064962f98"},{"code":"#(set (map set (filter (fn [s] (< 1 (count s))) (vals \n  (reduce (fn [m s] (let [uk (sort s)] (assoc m uk (conj (m uk []) s)))) {} %))\n)))","problem":77,"user":"4fbfe9a4e4b081705acca31f"},{"problem":77,"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    set))","user":"53da19fde4b0e771c3025484"},{"problem":77,"code":"#(->>\n   %\n   (group-by set)\n   vals\n   (filter next)\n   (map set)\n   set)","user":"5e3e23d9e4b01d43a70e8e20"},{"code":"(fn [coll]\n  (set (map set (filter #(> (count %) 1) (vals (group-by sort coll))))))","problem":77,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn Anagram\n  [x]\n  (let [ is (fn [a] (= (sort (apply list a)) (sort (apply list (first x)))))\n         chosen (into #{} (filter is x))\n         rst (filter #(not (is %)) x)]\n    (if (empty? x) #{}\n      (if (= (count chosen) 1) (Anagram rst)\n        (conj (Anagram rst) chosen)))))","problem":77,"user":"52084f75e4b01ce6bbf31dde"},{"problem":77,"code":"(fn [x] (set (map set (map last (filter #(> (count (last %)) 1) (group-by sort x))))))","user":"54965534e4b0b312c081ff65"},{"code":"#(->> (group-by sort %)\r\n      vals\r\n      (filter (fn [v] (> (count v) 1)))\r\n      (map (partial apply hash-set))\r\n      (apply hash-set))","problem":77,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [col]\n  (let [a (group-by sort col)\n        b (filter #(> (count %) 1) (vals a))]\n    (into #{} (map #(into #{} %) b))))","problem":77,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":77,"code":"(fn [words] (->> (group-by sort words)\n                 vals\n                 (filter #(< 1 (count %)))\n                 (map set)\n                 set))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"(fn [sq]\n    (loop [sq sq\n           sq-holder {}]\n      (if (empty? sq)\n        (set (filter #(< 1 (count %))\n                     (vals sq-holder)))\n        (let [target (first sq)\n              key (apply str (sort (seq target)))]\n          (recur (rest sq)\n                 (if (contains? sq-holder key)\n                   (conj sq-holder [key (conj (sq-holder key) target)])\n                   (conj sq-holder [key #{target}])))))))","problem":77,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn anagram-finder [words]\n  (let [sorted (map #(vector (apply str (sort %)) %) words)\n        grouped (vals (group-by first sorted))]\n    (set (filter #(> (count %) 1) (map (fn [s]\n                                         (set (map second s))) grouped)))))","problem":77,"user":"4e3bccb1535deb9a81d77f55"},{"problem":77,"code":"(fn [input] (into #{} (filter (fn [x] (< 1 (count x))) (map (fn [v] (into #{} (val v))) (group-by (fn [x] (sort x)) input)))))","user":"5addadfce4b0837691e92c13"},{"code":"(fn [words]\n    (->>\n      (map (fn [w] (set (filter #(= (sort w) (sort %)) words))) words)\n      (remove #(= (count %) 1))\n      set))","problem":77,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn anagram\n  [s]\n  (letfn [(z [w c] (count (filter #(= % true) (map #(= c %) w))))\n          (m [a b] (reduce #(and %1 (= (z a %2) (z b %2))) true (distinct (concat a b))))]\n    (set (distinct (filter #(> (count %) 1)\n                       (loop [i (map #(set (vector %)) s)\n                              w s]\n                         (if (empty? w)\n                           i\n                           (recur (map #(if (and\n                                             (m (first %) (first w))\n                                             (not= (first %) (first w)))\n                                          (conj % (first w))\n                                          %) i)\n                                  (rest w)))))))))","problem":77,"user":"4f17ab99535d64f603146457"},{"problem":77,"code":"(fn [items]\n  (into #{} (filter #(> (count %) 1)\n                    (vals (apply merge-with into (map #(hash-map (set %) #{%}) items))))))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":77,"code":"(fn find-anagram [coll]\n(letfn \n  [(rotations [s]\n    (let [length (count s)]\n      (take length (partition length 1 (cycle s)))))\n  (permutations [s]\n    (if (seq s)\n      (mapcat #(rotations (cons (first s) %)) (permutations (rest s)))\n      [[]]))\n  (anagram\n    [x coll]\n    (set\n      (filter \n        #(contains? (set (map (fn [s] (apply str s)) (permutations x))) %) \n          coll)))]\n  (into #{}\n  (filter (fn [c] (> (count c) 1))\n    (map #(anagram % coll) coll)))))","user":"56540485e4b0f9d632dd847a"},{"code":"(fn [words]\n  (let [hash-key #(apply str (sort (.toLowerCase %)))\n        groups (vals (group-by hash-key words))]\n       (set (map set (filter #(> (count %) 1) groups)))))","problem":77,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn [xs]\n  (->> (group-by #(sort %) xs) (vals) (filter #(> (count %) 1)) (map set) (set)))","problem":77,"user":"4f21838fe4b0d66497709fd2"},{"code":"#(->> %\n     (group-by sort)\n     vals\n     (map set)\n     (remove (fn [s] (->> s count dec zero?)))\n     set)","problem":77,"user":"504e04a4e4b078edc5f59397"},{"problem":77,"code":"#(reduce (fn [m [k v]] (if (< (count v) 2) m (conj m (set v)))) #{} (group-by sort %))","user":"560a7b46e4b05f002753defb"},{"code":"(fn [coll]\n  (into #{}\n  (map #(into #{} %)\n  (filter #(>= (count %) 2)\n  (vals (group-by #(into #{} %) coll))))))","problem":77,"user":"4dbdce65535d020aff1edf4d"},{"code":"(fn [list]\n  (->> ((partial reduce\n                 #(let [k (into #{} %2)]\n                    (if-let [v (get %1 k)]\n                      (assoc %1 k (conj v %2))\n                      (assoc %1 k #{%2})))\n\n                 {})\n        list)\n       vals\n       (filter #(> (count %) 1))\n       set))","problem":77,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn anag [data]\n  (->> data\n    (group-by frequencies)\n    (filter #(-> % val count (not= 1)))\n    (mapcat #(if (coll? %) % [%]))\n    (filter #(not (map? %)))\n    (map set)\n    (set)\n  )\n)","problem":77,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn [s] \n  (into #{}\n    (remove empty?\n      (map (fn [w] \n        (reduce \n          #(if (and \n                  (not= %2 w)\n                  (= (set %2) (set w)) \n                  (= (count %2) (count w))) \n              (conj % w %2) \n              %) \n        #{} s)) s))))","problem":77,"user":"502904e0e4b0feaf66e22fad"},{"problem":77,"code":"(fn [coll]\n  (->>\n   coll\n   (group-by #(reduce + (map int %)))\n   vals\n   (filter #(> (count %) 1))\n   (map set)\n   set))","user":"5823d3e6e4b051871117beb8"},{"problem":77,"code":"(fn [s]\n    (set (filter (fn [x]\n                   (> (count x) 1))\n                 (map (fn [x]\n                        (set (map (fn [y] (first y)) x)))\n                      (vals\n                       (group-by val\n                                 (zipmap s\n                                         (map (fn [x] (sort (re-seq #\"[a-zA-Z]\" x))) s))))))))","user":"5600dccee4b04bb52996e175"},{"problem":77,"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map (comp set val) (group-by sort words)))))","user":"567695c2e4b05957ce8c6157"},{"problem":77,"code":"(fn [v]\n  (->> v   \n    (group-by sort)\n    (map val)\n    (filter #(> (count %) 1))\n    (map set)\n    (into #{})\n    )\n  )","user":"57408f87e4b05c31a32c0856"},{"problem":77,"code":"(fn makesets [coll]\n   (letfn [(anagram? [a b]\n   (let [a1 (set (clojure.string/split a #\"\"))\n         b1 (set (clojure.string/split b #\"\"))]\n         (if (= (set a1) (set b1)) true false))) ]\n   (->> (reduce (fn [acc item] \n                (conj acc (set (filter #(anagram? item %) coll)) ))\n                [] coll)  \n                (filter #(> (count %) 1))\n                (set))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":77,"code":"(fn anagrams [words]\n  (->> (group-by set words)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5879d577e4b01531a375ead8"},{"problem":77,"code":"(fn [x]\n  (let [w (map #(.getBytes %) x)\n        m (zipmap w (map #(apply + %) w))\n        d (map #(first %) (filter #(> (count %) 1) (partition-by identity (sort >= (vals m)))))]\n        (apply hash-set \n         (map \n          (fn [t]\n           (apply hash-set \n            (map #(apply str (map char %))\n              (keys (filter #(= t (val %)) m))))) d))))","user":"53a5c7ffe4b0ef122a8689c4"},{"code":"(fn group-by-anagrams[ls] (set (map (fn[[k v]] (set v)) (filter (fn[[k v]] (> (count v) 1)) (group-by #(reduce + (map int (seq %))) ls)))))","problem":77,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [c]\n    (->>\n      (group-by frequencies c)\n      (filter #(> (count (nth % 1)) 1))\n      (reduce #(conj % (set (val %2))) #{})\n      ))","problem":77,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [coll]  (->> coll\r\n                         (group-by frequencies)\r\n                         vals\r\n                         (filter #(> (count %) 1))\r\n                         (map set)\r\n                         set))","problem":77,"user":"503d129fe4b06c4e0e1fa254"},{"code":"(fn [ws]\n  (letfn [(inc-key [i c]\n            (if-not (contains? i c)\n              (assoc i c 1)\n              (assoc i c (inc (i c)))))\n          (letter-info [w]\n            (->> (seq w)\n                 (reduce inc-key {})))\n          (group [gs [i w :as d]]\n            (if-not (contains? gs i)\n              (assoc gs i [w])\n              (assoc gs i (conj (gs i) w))))]\n    (->> (map #(vector (letter-info %) %) ws)\n         (reduce group {})\n         (vals)\n         (filter #(< 1 (count %)))\n         (map set)\n         (set))))","problem":77,"user":"4f84a4a4e4b033992c121c39"},{"problem":77,"code":"(fn anagram-finder [words]\n  (let [mapify-word\n        (fn [w] (reduce #(merge-with + %1 {%2 1}) {} (seq w)))]\n    (->> words\n     (reduce\n      (fn [res w] (merge-with into res {(mapify-word w) #{w}}))\n      {}\n      ,,,)\n     (vals ,,,)\n     (filter #(> (count %) 1) ,,,)\n     (set))))","user":"5b7f2d75e4b047b03b203768"},{"code":"(fn anagroup [input]\n    (set (map set (filter #(> (count %) 1)\n                          (vals (group-by set input))))))","problem":77,"user":"50057f23e4b0678c553fc466"},{"problem":77,"code":"(fn [v]\n  (set (filter #(> (count %) 1) (map (comp set second) (group-by frequencies v)))))","user":"53b530c6e4b047364c0444bc"},{"code":"(fn [l]\n  (->> l \n    (group-by set) \n    vals \n    (filter #(< 1 (count %))) \n    (map set) \n    set))","problem":77,"user":"4e82f85d535db62dc21a62ce"},{"problem":77,"code":"(fn [l]\n  (->> (reduce (fn [m w]\n                 (if (contains? m (sort w))\n                   (assoc m (sort w) (conj (get m (sort w)) w))\n                   (assoc m (sort w) #{w}))) {} l)\n       vals\n       (filter #(> (count %) 1))\n       set))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":77,"code":"(fn anagram [words]\n  (let [\n    same-letters (fn [w1 w2]\n      (let [\n        charlist #(map char %)\n        ordered-sets \n          #(if (> (count %1) (count %2))\n            (list %1 %2)\n            (list %2 %1))\n        lhs (set (charlist w1))\n        rhs (set (charlist w2))]\n        (->> (ordered-sets lhs rhs)\n          (apply clojure.set/difference)\n          (empty?))))\n    same-length (fn [w1 w2] (= (count w1) (count w2)))\n    anagram?\n      #(and (same-letters %1 %2) (same-length %1 %2))\n    args (list #{} words)]    \n  (clojure.set/difference\n    (apply \n      reduce \n        (fn [accum-set word]\n          (conj\n            accum-set\n            (apply \n              reduce \n              #(if (and (not= word %2) (anagram? word %2))\n                (conj %1 word %2) \n                %1) \n              args)))\n        args)\n      #{#{}})))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":77,"code":"(fn [myseq]\n  (let [normalize #(apply str (sort (map clojure.string/lower-case (seq %))))]\n  (->> myseq\n       (sort-by normalize)\n      (partition-by normalize)\n       (filter #(> (count %) 1))\n       (map set)\n       (set))))","user":"578021b4e4b0d36ec5835e73"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by set)\n       (filter (comp #(> % 1) count second))\n       (map (comp set second))\n       (into #{})))","user":"54236ce1e4b01498b1a71ad1"},{"problem":77,"code":"(fn anagram-finder [sequ] (let [orderedchar (fn [word] (apply str (sort word)))]\n                              (set (map #(set %1) (filter #(> (count %) 1) (vals (group-by orderedchar sequ)))))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":77,"code":"(fn anagrams [word-list]\n  (let [perm (fn [u v] (= (set u) (set v)))]\n    (loop [words word-list anagram-list #{}]\n      (if (<= (count words) 1)\n        anagram-list\n        (let [[x & rest] (vec words)\n              matches (set (filter #(perm x %) rest))]\n          (if (empty? matches)\n            (recur (set rest) anagram-list)\n            (recur (clojure.set/difference (set rest) matches) (conj anagram-list (conj matches x)))))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [s]\r\n  (set (filter\r\n      #(> (count %) 1)\r\n      (map #(set (nth % 1)) (group-by set s)))))","problem":77,"user":"502873a8e4b01614d1633ff8"},{"code":"(fn [l] \n  (set\n    (filter \n      #(> (count %) 1)\n      (map set (vals (group-by frequencies l))))))","problem":77,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":77,"code":"(fn [words]\n      (->> words\n           (map #(hash-map :o %, :a (sort %)))\n           (group-by :a)\n           (vals)\n           (filter #(> (count %) 1))\n           (map #(map :o %))\n           (map set)\n           (set)))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":77,"code":"(fn [v] (apply hash-set (map second (filter #(< 1 (count (second %))) (apply merge-with #(conj %1 (first %2)) (map #(hash-map (sort %) #{%}) v))))))","user":"59089229e4b047aa04b1997c"},{"problem":77,"code":"(fn [coll]\n  (->>\n   coll\n   (group-by sort)\n   vals\n   (filter #(>= (count %) 2))\n   (map set)\n   set))","user":"57fbf995e4b0d3187e900981"},{"code":"(fn p77 [xs]\n    (let [indexed (map (fn [a] {(sort a) #{a}}) xs)\n          groups (reduce (partial merge-with clojure.set/union) {} indexed)]\n        (->> (vals groups)\n        \t (filter #(> (count %) 1))\n        \t (apply hash-set))))","problem":77,"user":"4f7f0827e4b06e829148e1d5"},{"problem":77,"code":"(fn anagrams [coll]\n  (->> coll\n    (group-by frequencies)\n    vals\n    (filter #(> (count %) 1))\n    (map set)\n    set))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":77,"code":"#(into #{} (map set (filter (fn[c] (< 1 (count c))) (vals (group-by frequencies %)))))","user":"541619e8e4b01498b1a719f9"},{"problem":77,"code":"(fn [x]\n  (set (filter #(> (count %) 1)\n               (for [w x]\n                 (set (filter #(and (= (count w) (count %))\n                                  (clojure.set/subset? (set w) (set %))) x))))))","user":"53d5a63be4b0e771c3025449"},{"problem":77,"code":"#(set (filter (fn [xs] (not= 1 (count xs))) (map set (vals (group-by sort %)))))","user":"555b35f7e4b0deb715856e4b"},{"problem":77,"code":"(fn anagram-finder [coll]\n  (letfn [(anagram-word? [s1 s2]\n            (let [rearrange (comp sort shuffle)]\n              (= (rearrange (seq s1))\n                 (rearrange (seq s2)))))\n          (a-anagram-in-set? [a se] ;;se,表示set\n            (some #(anagram-word? a %) se))\n\n          (a-anagram-in-set-set? [a set-set]\n            (some #(a-anagram-in-set? a %) set-set))\n          (get-anagram-group-in-set-set [a set-set]\n            (first (filter #(a-anagram-in-set? a %) set-set)))]\n    (into #{}\n        (filter #(>= (count %) 2)\n                (loop [ret #{} coll coll]\n                  (if (seq coll)\n                    (if (a-anagram-in-set-set? (first coll) ret)\n                      (recur (conj (disj ret (get-anagram-group-in-set-set (first coll) ret))\n                                   (conj (get-anagram-group-in-set-set (first coll) ret) (first coll)))\n                             (rest coll))\n                      (recur (conj ret #{(first coll)}) (rest coll)))\n                    ret))))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":77,"code":"(fn anagram-finder [words]\n  (let [removecharat (fn [s i]\n                       (str (subs s 0 i) (subs s (inc i) (count s))))]\n    (loop [ws (into #{} words), as #{}]\n      (if-let [w1 (first ws)]\n        (let [permw ((fn perm [w]\n                       (if (<= (count w) 1)\n                         [w]\n                         (for [i   (range (count w))\n                               psw (perm (removecharat w i))]\n                           (str (get w i) psw)))) w1)\n              asw   (clojure.set/intersection ws (into #{} permw))\n              remws (clojure.set/difference ws asw)]\n          (if (> (count asw) 1)\n            (recur remws (conj as asw))\n            (recur remws as)))\n        as))))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":77,"code":"(fn anagrams [s] (set (filter #(>= (count %) 2) (map (comp set val) (group-by set s)))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":77,"code":"(fn [words]\n  (reduce \n    #(conj %1 (set %2)) \n    #{} \n    (filter #(not= (count %) 1) (vals (group-by frequencies words)))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":77,"code":"(fn [x]\n  (into #{}\n        (filter\n          #(> (count %) 1)\n          (map #(into #{} %)\n               (vals\n                 (group-by sort x)\n                 )\n               )\n          )\n        )\n  )","user":"562add6de4b00e49c7cb4834"},{"code":"(fn[coll]\n  (letfn [(anagram?[s1 s2]\n            (if (not= (count s1) (count s2))\n              false\n              (every? identity (map = (sort (seq s1)) (sort (seq s2))))))]\n   (set (remove #(= 1 (count %)) (map (fn[elt] (reduce (fn[result item]\n              (if (anagram? (first result) item)\n                (conj result item)\n                result))\n            #{elt} coll)) coll)))))","problem":77,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn [y & S]\n   \t\t(cond\n         \t(empty? y) S\n            (contains? (apply clojure.set/union S) (first y)) (recur (rest y) S)\n         \ttrue (let [mapres (filter #(= (set (first y)) (set %)) y)]\n                   (if (>= (count mapres) 2)\n                     \t(recur (rest y) (conj (if S S #{}) (set mapres)))\n\t\t\t\t\t\t(recur (rest y) S)))))","problem":77,"user":"51cf126ae4b0e42293a2256b"},{"code":"#(set (filter (fn [x] (> (count x) 1)) (vals (reduce\n        (fn\n         [m s]\n         (let\n             [d (sort (seq s))]\n           (assoc m d (conj (get m d #{}) s))))\n         {}  %))))","problem":77,"user":"4dc78527535d8a4b2fd7428f"},{"code":"(fn [param] (set (map #(into #{} %) (filter #(> (count %) 1) (vals (group-by (fn [coll] (sort (seq coll))) param))))))","problem":77,"user":"52fcfeeee4b047fd55837027"},{"problem":77,"code":"#(set (for [v (vals (group-by sort %))\n            :when (> (count v) 1)]\n        (set v)))","user":"583e27e2e4b089d5ab817daa"},{"problem":77,"code":"(fn anagram\n  [coll]\n  (reduce (fn [prev word]\n            (let [anagrams (set (filter #(= (set %) (set word)) coll))]\n              (if (> (count anagrams) 1)\n                (conj prev anagrams)\n                prev)))\n          #{} coll))","user":"56785234e4b05957ce8c6177"},{"code":"(fn gr[s]\n  (set (filter #(> (count %1) 1) \n    (map \n      (fn rep[w] (set((group-by #(= (set w)(set %1)) s) true)))\n     s)\n    )\n  )\n)","problem":77,"user":"4e9de526535dbda64a6f6b8e"},{"problem":77,"code":"(fn [l]\n  (set (map set (filter #(> (count %) 1) (vals (group-by set l))))))","user":"56051095e4b08b23635d3162"},{"problem":77,"code":"(fn [coll]\n  (into #{} \n        (filter (fn [sorted-words] (> (count sorted-words) 1)) \n                (map (fn [group] (into #{} group)) \n                     (vals (group-by sort coll))))))","user":"58a32c21e4b02bd94d917eeb"},{"problem":77,"code":"(fn [s]\n  (set (map #(set %) (vals (into {} (filter (fn [[k v]] (>  (count v) 1))\n                         (group-by #(set %) s)\n                     ))))))","user":"53b4bddae4b047364c0444b9"},{"problem":77,"code":"(fn [words]\n    (->> (group-by sort words)\n         (vals)\n         (filter #(> (count %) 1))\n         (map set)\n         (set)))","user":"5777cffae4b0979f89651651"},{"problem":77,"code":"(fn [words]\n  (let [anagram-groups (map set (vals (group-by sort words)))]\n    (set (filter #(> (count %) 1) anagram-groups))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn [sq]\n  (let [is-anagram? (fn [s1 s2]\n  (= (frequencies (seq s1)) (frequencies (seq s2))))\n       find-anagram (fn [s sq]\n       (set (get (group-by #(is-anagram? % s) sq) true)))]\n        (set (filter #(not (nil? %)) (distinct (map #(let [a (find-anagram % sq)] (if (> (count a) 1) a nil)) sq))))))","problem":77,"user":"4e7ada51535db169f9c796ae"},{"problem":77,"code":"(fn [coll]\n  (set\n   (map #(set (second %))\n        (filter #(> (count (second %)) 1)\n                (group-by (partial group-by identity)\n                          coll)))))","user":"57dd47f4e4b0bd073c20243e"},{"problem":77,"code":"#(->> (group-by sort %)\n      (vals)(filter next)\n      (map set)\n      (set))","user":"5b77d3c8e4b047b03b2036f1"},{"problem":77,"code":"(fn [v] (set (map set (filter #(> (count %) 1) (vals (group-by sort v))))))","user":"588fbb39e4b00487982d51bd"},{"problem":77,"code":"(fn anagrams [s]\n  (->> s\n       (group-by sort)\n       (vals)\n       (filter #(< 1 (count %)))\n       (map set) set))","user":"575b3e9be4b02ea11479935b"},{"code":"#(set \n    (map (comp set val) \n      (remove (comp #{1} count val)\n        (group-by sort %))))","problem":77,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn anags [coll]\n  (set (filter #(> (count %) 1) (map set (vals (group-by sort coll))))))","problem":77,"user":"4ea0c284535d7eef308072ad"},{"code":"(fn [words]\n  (->> words\n    (group-by sort)\n    vals\n    (filter #(> (count %) 1))\n    (map (partial apply hash-set))\n    (apply hash-set)))","problem":77,"user":"4ef0eaef535dced4c769f211"},{"problem":77,"code":"(fn [words] (->>\n                words\n                (group-by sort)\n                (vals)\n                (filter #(> (count %) 1))\n                (map set)\n                (set)))","user":"5901158de4b0438e51c2d039"},{"problem":77,"code":"(fn\n  [coll]\n  (->> coll\n    (group-by sort)\n    (vals)\n    (map set)\n    (remove #(> 2 (count %)))\n    (set)))","user":"59a24c92e4b066c664927d20"},{"problem":77,"code":"(fn [lst]\n  (->> (group-by sort lst)\n       (vals)\n       (remove #(= (count %) 1))\n       (map set)\n       (set)))","user":"58b51e05e4b0ebc645576d4c"},{"problem":77,"code":"(fn [ws] \n   (set (map set (remove #(= 1 (count %)) (vals (group-by frequencies ws))))))","user":"5339cb07e4b0e30313ee6caf"},{"code":"(fn anagrams [words]\n\t(loop [anmap {} [curr & rest] words]\n\t\t(if (nil? curr)\n\t\t\t(->> anmap (vals) (map set) (filter #(> (count %) 1)) (set))\n\t\t\t(let [key (->> curr (seq) (sort) (apply str))]\n\t\t\t\t(recur (assoc anmap key (cons curr (anmap key))) rest)))))","problem":77,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn [x]\n  (->> x\n       (group-by frequencies)\n       vals\n       (map (partial into #{}))\n       (filter #(> (count %) 1))\n       (into #{})\n       ))","problem":77,"user":"513b77f3e4b00f740c76c403"},{"problem":77,"code":"(fn [xs]\n  (letfn [(gmap [s] (reduce #(assoc % %2 (if (% %2) (inc (% %2)) 1)) {} s))]\n      (set (map set (filter #(> (count %) 1) (vals (group-by gmap xs)))))))","user":"53e9a15be4b036ad0777e4ae"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (reduce (fn [tbl x]\n                 (let [key (apply str (sort x))\n                       old (tbl key)\n                       new (conj (if old old #{}) x)]\n                   (assoc tbl key new)))\n               {})\n       vals\n       (filter #(> (count %) 1))\n       set))","user":"59750a68e4b01722bebd4cba"},{"problem":77,"code":"(fn [s]\n  (loop [tmps s ans {}]\n    (if (empty? tmps)\n      (loop [a ans newa #{}] \n        (if (empty? a)\n          newa\n          (if (> (count (second (first a))) 1)\n          \t(recur (rest a) (conj newa (second (first a))))\n          \t(recur (rest a) newa))))\n      (if (contains? ans (set (first tmps)))\n        (recur (rest tmps) (assoc ans (set (first tmps)) (conj (get ans (set (first tmps))) (first tmps))))\n        (recur (rest tmps) (assoc ans (set (first tmps)) (conj #{} (first tmps))))))))","user":"59368ccae4b02506e01a297a"},{"problem":77,"code":"(fn [coll]\n  (letfn [(anagrams? [a b] (= (frequencies a) (frequencies b)))]\n    (loop [[x & more :as coll] coll res #{}]\n      (if more\n        (let [matches (filter #(anagrams? x %) coll)]\n          (recur (remove #(anagrams? x %) coll) (if (< 1 (count matches)) (conj res (set matches)) res)))\n        res))))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"(fn ana [x] (if (< (count x) 2) #{}\n              (let [matches (filter (fn [a] (= (sort (first x)) (sort a))) x)]\n               (if (> (count matches) 1)\n                 (conj (ana (filter (fn [a] (not= (sort (first x)) (sort a))) x)) (set matches))\n                 (ana (rest x))\n               )\n              )))","problem":77,"user":"525372ade4b0541d1855b8f3"},{"code":"(fn [s] (set (map #(set %)\n  (filter #(> (count %) 1)\n    (vals (group-by #(apply str (sort %)) s))))))","problem":77,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":77,"code":"(fn anagrams [words]\n    (->> words\n        (group-by frequencies)\n        (vals)\n        (map set)\n        (filter #(< 1 (count %)))\n        set))","user":"59da6480e4b0ef0a1e9b5c68"},{"code":"(fn [s] (set (filter #(> (count %) 1)\n                            (map (comp set val) (group-by #(set %) s)))))","problem":77,"user":"5294e44de4b02ebb4ef75016"},{"problem":77,"code":"#(loop [mapAna {} pend %1]\n\t(if (empty? pend)\n\t\t(set (map set (filter (fn [x] (> (count x) 1)) (vals mapAna))))\n\t\t(let [part (first pend) keyStr (reduce str (sort part))]\n\t\t\t(recur (merge-with (comp vec concat) mapAna {keyStr [part]}) (rest pend)))))","user":"57986b76e4b039eba2ecb116"},{"problem":77,"code":"(fn [col]\n  (->> col\n       (sort-by (comp vec sort))\n       (partition-by sort)\n       (filter #(<= 2 (count %)))\n       (map set)\n       set))","user":"4eda8d7c535d10e5ff6f530f"},{"problem":77,"code":"(fn anagrams [coll]\n  (let [char-sets (distinct (map set coll))\n        anagrammable? (fn [s word] (= s (set word)))\n        filters (map #(partial anagrammable? %) char-sets)\n        anagrams (map #(filter % coll) filters)\n        multigrams (filter #(> (count %) 1) anagrams)]\n    (set (map set multigrams))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":77,"code":"(fn anagram-finder [xs]\n  (->> xs\n    (group-by sort)\n    (vals)\n    (filter #(> (count %) 1))\n    (map set)\n    (into #{})))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":77,"code":"(fn [a] (set (map set (remove #(< (count %) 2) (vals (group-by frequencies a))))))","user":"51a132cee4b0b292b01ee3ff"},{"problem":77,"code":"(fn [words]\n  (let [anagram-count (->> words (map set) frequencies)]\n    (->> words\n         (reduce (fn [mp word]\n                    (let [word-set (set word)]\n                      (if (> (anagram-count word-set) 1)\n                         \n                         (assoc mp word-set (conj (get mp word-set #{}) word))\n                      mp)))\n            {})\n         vals\n         set)))","user":"59ab2b86e4b08cbb53654d91"},{"code":"(fn [as] (set (map set (filter next (vals (group-by sort as))))))","problem":77,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":77,"code":"(fn [l]\n\t(->> l \n\t\t(group-by sort) \n        (map val)\n\t\t(filter #(> (count %) 1))\n\t\t(map set)\n\t\t(into #{})))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":77,"code":"(fn [xs]\n   (->> (group-by set xs)\n       vals\n       (map set)\n       (into #{})\n       (clojure.set/select #(> (count %) 1))))","user":"4ff3113ae4b0678c553fc345"},{"code":"(fn [x] \n    (set (map set (filter #(> (count %) 1) (vals (group-by frequencies x))))))","problem":77,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":77,"code":"(fn [coll] \n  (->> coll \n       (group-by set) \n       (vals) \n       (filter #(not= nil (next %))) \n       (map set) \n       (set)))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":77,"code":"(fn [xs]\n  (set\n    (map set\n      (filter #(> (count %) 1) (vals (group-by sort xs))))))","user":"507e68abe4b085af06e3afd2"},{"problem":77,"code":"(fn anag [xs]\n  (->> xs\n       (group-by (fn [x] (set (map int x))))\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn [c] \n  (reduce \n   #(conj % (set %2)) \n   #{} \n   (filter \n    #(> (count %) 1) \n    (vals (group-by set c)))))","problem":77,"user":"506d5e4ce4b0a302964c5493"},{"problem":77,"code":"(fn try1 [sq]\n  (let [st (vals (group-by set sq))]\n     (set\n        (for [isq (filter #(> (count %) 1) st)]\n           (set isq)))))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":77,"code":"(fn [coll]\n (letfn [(anagram [x y] (= (sort x) (sort y)))]\n   (set (remove #(= 1 (count %)) (reduce (fn [acc one] (conj acc (set (filter #(anagram % one) coll)))) #{} coll)))))","user":"56cad309e4b0ea9b8538f720"},{"problem":77,"code":"(fn [x] (set (map set (filter next (map val (group-by sort x))))))","user":"578fc072e4b0ebec4cfb759a"},{"problem":77,"code":"(fn foo [coll]\n     (let [groups (group-by :list ( map \n        (fn [a] \n           (conj (hash-map :list (sort (clojure.string/split a #\"\")))\n                    (hash-map :result a))\n            )\n        coll))]\n        (loop [groups groups\n                result #{}]\n            (if (empty? groups) (set (remove #(= 1 (count %)) result))\n                (recur (rest groups) \n                    (conj result\n                        (set (keys(group-by :result \n                                    (-> groups first second))))))))))","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [coll]\n  (set \n    (filter #(> (count %) 1)\n            (map (fn [group] (set (map second group))) \n              (partition-by first\n                (sort-by #((comp str first) %)\n                         (map\n                           (fn [s] (list (apply str (sort s)) s))\n                           coll)))))))","problem":77,"user":"51a97f7ae4b08d8ec191b827"},{"problem":77,"code":"(fn [words] (->>\n             words\n             (group-by sort)\n             vals\n             (filter #(> (count %) 1))\n             (map set)\n             set))","user":"555287a4e4b0deb715856df5"},{"code":"(fn [xs] \n  (->> xs\n    (map (fn [x] [(set x) x]) )\n    (group-by first)\n    (map second)\n    (map #(map second %))\n    (filter #(> (count %) 1))\n    (map set)\n    set))","problem":77,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [words]\n  (set (filter #(> (count %) 1) (map set (vals (group-by #(identity (sort (seq %))) words))))))","problem":77,"user":"4e7d1c22535db169f9c796c5"},{"code":"#(let [mysort (fn [x] (apply str (sort x)))\n       sorted (map mysort %)\n       isana (fn [x y] (= (mysort x) (mysort y)))\n       freqs (frequencies sorted)]\n(set\n(map set (filter (fn [x] (> (count x) 1))\n(vals (reduce (fn [m [k v]] \n          (assoc m k \n            (take v \n              (filter \n                (partial isana k) %)))) {} freqs))))))","problem":77,"user":"4e80d71b535db62dc21a62b7"},{"problem":77,"code":"(fn [coll]\n  (->> coll\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       (into #{})))","user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn[coll] \n  (letfn [(sval[s] (str (sort-by #(int %) s))) ] \n  (->> coll \n    (sort-by sval) \n    (partition-by sval) \n    (map set) \n    (filter #(>  (count %) 1))\n    set )))","problem":77,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [coll]\n  (into #{}\n  (map set (filter #(> (count %) 1) (vals\n  (reduce\n    #(let [[k v] %2]\n       (assoc %1 k (cons v (%1 k []))))\n    {}\n    (map #(vector (set (frequencies %)) %) coll)))))))","problem":77,"user":"51195e77e4b055cfb310d499"},{"problem":77,"code":"(fn [l]\n  (set (filter #(> (count %) 1)\n          (map #(set(val %)) \n               (group-by #(sort(seq(char-array %))) l)))))","user":"57d9f603e4b0bd073c20240a"},{"problem":77,"code":"(fn t [x] \n(let [groups\n(vals (group-by #(sort (vec %)) x))\ngroups1+ (filter #(> (count %) 1) groups)\nsubsets (map set groups1+)\nans (set subsets)\n]\nans\n))","user":"589b98fae4b00487982d533c"},{"problem":77,"code":"(fn [coll]\n  (->>\n   (map #(hash-map (set %) #{%}) coll)\n   (reduce #(merge-with clojure.set/union %1 %2) {})\n   vals\n   set\n   (clojure.set/select #(> (count %) 1))))","user":"55586905e4b0deb715856e2b"},{"problem":77,"code":"(fn [xs] \n  (->> xs\n       (reduce (fn [acc word]\n                 (update-in acc [(sort (seq word))] #(conj (or % #{}) word))) {})\n       (reduce (fn [acc [key val]]\n                 (if (> (count val) 1) \n                   (conj acc val) acc)) #{})))","user":"5eee7311e4b07c55ae4a0510"},{"problem":77,"code":"(fn group-anagrams [words]\n  (let [freqs (map frequencies words)\n        invert (fn invert [map]\n  (reduce\n   (fn [m e]\n     (let [[k v] e]\n       (assoc m v (conj (get m v) k))))\n   {} map))\n        freqs-to-words (invert (zipmap words freqs))]\n    (set (map set (filter #(> (count %) 1) (vals freqs-to-words))))))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn [s] (set (for [[_ v] (group-by set s) :when (second v)] (set v))))","problem":77,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":77,"code":"#(->> %\n       (group-by sort)\n       vals\n       (filter (fn [x] (< 1 (count x))))\n       (map set)\n       set)","user":"4fe92721e4b0547ebccb2447"},{"code":"(fn ana [s]\n  (set (keep #(if (> (count %) 1) % nil) (vals (reduce (fn [memo y] \n    (let [ana-list (memo (sort (.split y \"\")))]\n\t\t\t\t(assoc memo (sort (.split y \"\"))  \n\t\t\t\t\t(conj \n\t\t\t\t\t(if ana-list ana-list #{})\n\t\t\t\ty))\n\t\t)\n\t) {} s))))\n\n)","problem":77,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":77,"code":"(fn [coll] (set (map set (filter #(> (count %) 1) (vals (group-by (partial group-by identity) coll))))))","user":"59074b7ce4b047aa04b19951"},{"problem":77,"code":"#(->> %\n      (group-by sort)\n      vals\n      (map set)\n      (filter (comp (partial < 1) count))\n      set)","user":"532ecd44e4b019098a6f8b49"},{"problem":77,"code":"(fn [coll] \n   (into #{}\n         (filter (fn [x](> (count x) 1)) \n           (reduce (fn [acc c] (if (some #{c} acc) acc \n                                 (conj acc (reduce #(if (= (sort c) (sort %2)) (conj % %2) %) #{} coll))))#{} coll))))","user":"538d70abe4b0b51d73faae6e"},{"problem":77,"code":"(fn [coll] (into #{} (remove #(= (count %) 1)\n                    (map set (vals (group-by sort coll))))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":77,"code":"(fn anagrams [x]\n       (set (filter #(< 1 (count %))\n               (map set\n               (map #(nth % 1)\n                    (group-by\n                      (fn [w] (sort (seq w)))\n                      x))))))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [v]\n  (set (filter #(> (count %) 1) \n               (vals (reduce \n                      (fn [mmap item] \n                          (assoc mmap \n                                 (first item)\n                                 (if-let [ anagrams (get mmap (first item))]\n                                         (conj anagrams (last item))\n                                         #{(last item)})))\n                      {}\n    (for [word v] [(sort (.toCharArray word)) word]))))))","problem":77,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn find-them-all [xs]\n  (letfn [(permutation? [s1 s2]\n            (let [c1 (count s1)\n                  c2 (count s2)\n                  f (comp (partial group-by identity)\n                          (partial map str)\n                          seq)]\n              (cond\n                (not (= c1 c2)) false\n                (zero? c1) true\n                :else (= (f s1) (f s2)))))\n          (find-anagram [e xs]\n            (let [a (into #{e} ((group-by (partial permutation? e) xs) true))]\n              (if (> (count a) 1)\n                a\n                nil)))]\n    (set (remove nil? (reduce #(into %1 [(find-anagram %2 xs)]) #{} xs)))))","problem":77,"user":"52606318e4b03e8d9a4a7036"},{"problem":77,"code":"(fn [words]\n  (let [is-anagram? (fn [x y] (= (sort x) (sort y)))\n        find-anagrams (fn [coll word]\n                        (set (filter (partial is-anagram? word) coll)))\n        multiple-items? (fn [coll] (> (count coll) 1))]\n    (->> (map (partial find-anagrams words) words)\n         (filter multiple-items?)\n         (into #{}))))","user":"55cb11e9e4b0e31453f649ff"},{"problem":77,"code":"(fn [coll]\n        (set\n            (map set\n                (filter\n                    #(> (count %) 1)\n                        (vals (group-by #(set %) coll))))))","user":"5b083513e4b0cc2b61a3bdb4"},{"problem":77,"code":"(fn [l]\n  (set \n    (map set \n      (filter\n        #(> (count %) 1)\n        (vals\n          (group-by sort l))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":77,"code":"(fn [xs] (->> xs (group-by sort) vals (filter #(< 1 (count %))) (map set) set))","user":"586bc870e4b01531a375e964"},{"code":"(fn anagrams\n  [words]\n  (set (map set (filter (comp (partial < 1) count) (vals (group-by (comp sort seq) words))))))","problem":77,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [coll]\n  (let [anagram? (fn [w1 w2]\n                   (every? (into #{} (re-seq #\"\\S\" w2)) (re-seq #\"\\S\" w1)))\n\t      anagrams (fn anagrams [coll]\n\t\t               (into #{} (filter (partial anagram? (first coll)) coll)))]\n\t  (loop [c coll s (into #{} coll) res #{}]\n\t    (let [as (anagrams c)\t        \n\t          remc (into [] (clojure.set/difference s (clojure.set/union as (reduce clojure.set/union res))))]\n\t      (if (or (<= (count as) 1) (<= (count c) 1))\n\t\t        res\n\t\t        (recur remc s (conj res as)))))))","problem":77,"user":"4db045b5838c48654951d9be"},{"problem":77,"code":"(fn find-anagrams [sos]\n  (letfn [(get-anagrams-to-w [w c]\n            (loop [head w cur-group #{} remaining c]\n              (if (seq remaining)\n                (if (= (set (seq head)) (set (seq (first remaining)))) \n                  (recur head (conj cur-group (first remaining)) (rest remaining))\n                  (recur head cur-group (rest remaining)))\n                (conj cur-group head))))]\n    (loop [tail sos all-groups #{}]\n      (let [head (first tail)]\n        (if (nil? head)\n          (set (filter #(> (count %) 1) all-groups))\n          (let [next-group (get-anagrams-to-w head (rest tail))] \n            (recur (clojure.set/difference (set (rest tail)) next-group) (conj all-groups next-group))))))))","user":"5ff676a9e4b06df49cee1497"},{"problem":77,"code":"(fn anagrams\n    [v]\n    (->> v\n         (group-by sort)\n         vals\n         (filter next)\n         (map set)\n         set))","user":"5974d2ede4b01722bebd4cb6"},{"problem":77,"code":"(fn [s]\n  (letfn [(anagrams? [x y]\n  (= (sort x) (sort y)))]\n    (loop [result #{} work (sort-by (comp (partial apply str) sort) s)]\n      (if-not (seq work)\n        result\n        (let [f (first work)]\n          (let [[anagrams remaininig] (split-with (partial anagrams? f) (rest work))]\n            (if (seq anagrams)\n              (recur (conj result (conj (set anagrams) f) ) remaininig)\n              (recur result (rest work)))))))))","user":"54bc539be4b0ed20f4ff6eca"},{"code":"(fn [coll]\n  (->> (group-by frequencies coll)\n       vals\n       (filter #(next %))\n       (map set)\n       set))","problem":77,"user":"507b7dbee4b09034bfeeb71e"},{"problem":77,"code":"(fn [xs]\n   (into #{} (filter #(not (nil? %))\n                     (map (fn [x]\n                            (when (> (count (val x)) 1)\n                              (val x)))\n                          (reduce #(assoc\n                                    %1\n                                    (apply str (sort %2))\n\n                                    (let [s (apply str (sort %2))\n                                          x (get %1 s)]\n                                      (if (not (nil? x))\n                                        (into #{} (conj x %2))\n                                        (hash-set %2)\n                                        )))\n                                  {}\n                                  xs)\n                          )\n                     ))\n   \n   )","user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":77,"code":"(fn [words]\n  (loop [first-word (first words)\n         rest-words (rest words)\n         ret #{}]\n    (if first-word\n      (let [{anagrams true not-anagrams false}\n            (group-by (fn [word] (= (sort first-word) (sort word))) rest-words)]\n        (recur (first not-anagrams) (rest not-anagrams) (if anagrams\n                                                          (conj ret (into #{first-word} anagrams))\n                                                          ret)))\n      ret)))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [coll]\n    (->> coll\n         (group-by sort)\n         vals\n         (filter #(< 1 (count %)))\n         (map set)\n         set))","problem":77,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn\n  [ws]\n  (->> ws\n       (group-by set)\n       vals\n       (remove #(= 1 (count %)))\n       (map set)\n       set))","problem":77,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":77,"code":"(fn [coll] (set (filter #(> (count %) 1)\n                        (map (fn [s] (reduce #(if (= (sort s) (sort %2))\n                                                (conj % %2)\n                                                %)\n                                             #{}\n                                             coll))\n                             coll))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":77,"code":"(fn [c]\n    (->> c\n      (group-by sort)\n      (vals)\n      (filter #(> (count %) 1))\n      (map set)\n      (set)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn [ss] (set (map set (filter #(> (count %) 1) (map val (group-by sort ss))))))","problem":77,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":77,"code":"(fn [c]\n  (->> c\n       (group-by frequencies)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"53d977f1e4b0e771c302547a"},{"problem":77,"code":"(fn [coll]\n  (loop [remaining coll ana (hash-map)]\n    (if (empty? remaining)\n      (apply hash-set (for [kv (filter #(> (count (second %)) 1) ana)] (second kv)))\n      (let [[word & remain] remaining]\n        (if (contains? ana (sort (sequence word)))\n          (recur remain (update-in ana [(sort (sequence word))] conj word))\n          (recur remain (conj ana [(sort (sequence word)) (hash-set word)])))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":77,"code":"#(->> (group-by sort %)\n     (vals)\n     (map set)\n     (filter (comp seq rest))\n     (set))","user":"5e228b5ae4b05b4b01516134"},{"problem":77,"code":"(fn [c]\n  (set\n  ( filter #(< 1 (count %))\n  (map set (vals\n\t  (group-by #(sort %) c))))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn [c]\n  (->> c\n       (group-by sort)\n       (map (comp set second))\n       (remove #(< (count %) 2))\n       set))","problem":77,"user":"4fbf2818e4b081705acca317"},{"problem":77,"code":"(fn [s]\n   (letfn [(anagrams? [a b] (= (frequencies a) (frequencies b)))\n           (add-to-set [a s] (loop [acc #{} s s]\n                               (cond\n                                 (empty? s) (conj acc #{a})\n                                 (anagrams? a (first (first s))) (concat (conj acc (conj (first s) a)) (rest s))\n                                 :else (recur (conj acc (first s)) (rest s)))))]\n     (set (filter #(> (count %) 1) (reduce #(add-to-set %2 %1) #{} s)))))","user":"5d764e52e4b02e6b30c93524"},{"code":"(fn anagram-finder[coll]\n  (loop [result #{}\n         others (set coll)]\n    (if(empty? others)\n      (set result)\n      (let [top (set (first others))\n            sub (set (filter #(= top (set %)) others))\n            _ (println (set sub))\n            _ (println others)]\n        (if(= 1 (count sub))\n          (recur result (set (rest others)))\n          (recur (cons   sub result )\n                 (clojure.set/difference others  (set sub))\n                \n                 ))))))","problem":77,"user":"5273562ae4b03e8d9a4a7479"},{"problem":77,"code":"#(->> % \n      (group-by sort)\n      vals\n      (filter (comp not zero? dec count))\n      (map set)\n      set)","user":"5da8fa72e4b000c986472c2d"},{"problem":77,"code":"(fn anabed [sekv]\n  (let [bvs (fn [beseda] (-> beseda seq set))\n        pama (zipmap sekv (map bvs sekv))\n        fil (fn [[k1 v1]] (fn [[k2 v2]] (= v1 v2)))]\n    (if (empty? (rest sekv)) #{}\n        (let [ana (set (keys (filter (fil (first pama)) pama)))\n              ost (keys (remove (fil (first pama)) pama))]\n        (if (< 1 (count ana))\n          (conj (anabed ost) ana)\n          (anabed ost)\n          )))))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":77,"code":"(fn [words] (into #{} (let [pairs (map (fn [word] [(into #{} word) word]) words)]\n                     (loop [ps pairs\n                            m {}]\n                       (if (> (count ps) 0)\n                         (let [[k v] (first ps)\n                               existing (or (m k) [])]\n                           (recur (rest ps) (assoc m k (conj existing v))))\n                         (for [[_ v] m :when (> (count v) 1)] (set v)))))))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn [ws] \n  (->> ws \n    (group-by frequencies) \n    vals \n    (map set) \n    (filter #(>= (count %) 2)) \n    set))","problem":77,"user":"4ed188c8535d44c135fd68cf"},{"problem":77,"code":"(fn anagram-finder [sv]\n  (set (filter #(< 1 (count %))\n               (vals\n                (reduce #(let [k (set %2), ov (get % k), ov (if ov ov #{})]\n                           (assoc % k (conj ov %2))) {} sv)))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":77,"code":"(fn [v]\n  (set (filter\n        #(> (count %) 1)\n        (map set (vals (group-by sort v))))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":77,"code":"(comp\n\tset\n\t(partial map set)\n\t(partial filter #(> (count %) 1))\n\tvals\n\t(partial group-by sort))","user":"5af8221ce4b0cc2b61a3bccd"},{"code":"(fn [words] \n  (set (filter #(< 1 (count %)) \n               (vals (apply merge-with clojure.set/union \n                            (map #(hash-map (frequencies %) #{%}) words))))))","problem":77,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":77,"code":"(fn [strings]\n   (->> strings (group-by sort) (vals) (map set) (remove #(= 1 (count %))) (set)))","user":"5aefdc8de4b0cc2b61a3bc40"},{"code":"(fn [coll]\n    (apply hash-set\n           (filter #(> (count %) 1)\n                   (vals (loop [coll coll\n                                answer {}]\n                           (if (nil? coll) answer\n                               (let [key (sort (seq (first coll)))\n                                     val (first coll)]\n                                 (recur (next coll)\n                                        (assoc answer key (if-let [entry (get answer key)] (conj entry val)\n                                                                  (hash-set val)))))))))))","problem":77,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [xs]\n (set (map set (filter #(> (count %) 1) (vals (group-by set xs))))))","problem":77,"user":"5097b556e4b00ad8bab4e970"},{"problem":77,"code":"#(->> (group-by frequencies %)\n      vals\n      (remove (comp (partial > 2) count))\n      (map set)\n      (into #{}))","user":"585d9558e4b0f14aab7c879c"},{"problem":77,"code":"(fn [xs] (into #{} (filter #(> (count %) 1) (map (fn [x] (into #{} (filter #(= (sort x) (sort %)) xs))) xs))))","user":"5d81b40ce4b0915913b1d379"},{"problem":77,"code":"(fn [words]\n  (let [letter-count (fn [word]\n                       (into {} (map (fn [[k v]] [k (count v)]) (group-by char word))))]\n    (into #{} (filter #(> (count %) 1) (map #(set (% 1)) (group-by letter-count words))))))","user":"5dcc152ae4b02b31cc3da3c3"},{"code":"(fn anagram [words]\r\n  (->> words\r\n       (map #(vector (vec (sort %)) %))\r\n       sort\r\n       (partition-by first)\r\n       (filter #(< 1 (count %)))\r\n       (map #(set (map second %)))\r\n       set))","problem":77,"user":"4e994541535dbda64a6f6b64"},{"problem":77,"code":"(fn anagram-find [words]\n  (letfn [(is-ana? [w1 w2]\n            (letfn [(letter-count [word]\n                    (reduce (fn [m l] (assoc m l (inc (get m l 0))))\n                              {} (clojure.string/split word #\"\")))]\n              (= (letter-count w1) (letter-count w2))))\n          (aux-ana-set [agg-all-words sample]\n            (reduce (fn [[agg-set filtered-all] word]\n                      (if (is-ana? sample word)\n                        [(conj agg-set word) (disj filtered-all word)]\n                        [agg-set filtered-all])) [#{} agg-all-words] agg-all-words))]\n    (first (reduce (fn [[ana-sets filtered] word]\n                     (let [[ana-set filtered-all] (aux-ana-set filtered word)]\n                       (if (< (count ana-set) 2)\n                         [ana-sets filtered]\n                         [(conj ana-sets ana-set) filtered-all])))\n                   [#{} (set words)] words))))","user":"5e9c11f8e4b0157ca96647f6"},{"code":"(fn [words]\n  (->> words\n   (reduce\n    (fn [m w]\n      (if (m (set w))\n        (update-in m [(set w)] conj w)\n        (assoc m (set w) [w])))\n    {})\n   (filter (fn [[s ws]] (< 1 (count ws))))\n   (vals)\n   (map set)\n   set))","problem":77,"user":"5392b849e4b0b51d73faaeb1"},{"problem":77,"code":"(fn  [coll]\n  (let [c (map #(vector (sort (vec %)) %) coll)\n        f (group-by #(sort (vec %)) coll)\n        ]\n    (set (->> coll\n    (group-by #(sort (vec %)))\n    (map #(set (second %)))  \n    (filter #(> (count %) 1))))))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [s]\n    (->> s\n      (group-by frequencies)\n      vals\n      (filter #(> (count %) 1))\n      (map set)\n      set))","problem":77,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":77,"code":"(fn [v] \n  (set (remove empty?\n  (reduce\n   (fn [r w] \n     (conj r \n     (reduce\n       (fn [t ww]\n         (if (= (set ww) (set w))\n           (conj t w ww)\n           t))\n      #{} (remove #(= w %) v))))\n   #{} v))))","user":"53572176e4b04ce2eb3ed276"},{"code":"(fn [lst] (let [parsed-lst (apply hash-map (mapcat #(vec [% (sort (vec %))]) lst))\n                 intr-lst (map #(apply hash-set %)\n                             (map keys \n                                  (filter #(> (count %) 1) \n                                          (map val (group-by val parsed-lst)))))]  \n             \n\n               (apply hash-set intr-lst)))","problem":77,"user":"52fa4f48e4b047fd55836ff7"},{"problem":77,"code":"(fn anagrams[words] (->> (reduce (fn [a b] (assoc a (sort b) (cons b (get a (sort b))))) {} words) vals (filter #(> (count %) 1)) (map set) set))","user":"59a0262ee4b0871e7608b82d"},{"problem":77,"code":"(fn [coll]\n(let [coll2 (into {} (map #(vector % (into [] (re-seq #\"\\S\" %))) coll))]\n  (loop [c coll2 \n         r #{}] \n        (if (seq c)\n           (recur (into {} (filter (fn [[k v]] (not (some {k v} (if (= 1 (count r)) (apply seq r) (apply concat r))))) coll2))\n           \n                  (conj r (into #{} (keys (reduce (fn [p [k v]] ; into r\n                                     (if (= (sort v) (sort (val (last p)))) \n                                         (into p {k v}) \n                                         p))\n                                     {(key (first c)) (val (first c))} ; p\n                                     c))))\n                  \n                  )\n           (into #{} (filter #(not= (count %) 1) r))))\n\n))","user":"51316a63e4b0431ba07e7feb"},{"code":"(fn [x]  (->> x\n             (group-by sort)\n             vals\n             (filter #(> (count %) 1))\n             (map set)\n             set))","problem":77,"user":"4f036d9b535dcb61093f6ac1"},{"problem":77,"code":"(fn anagrams [words]\n  (->> (vals (group-by sort words))\n       (map set)\n       (filter #(< 1 (count %)))\n       (into #{})))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn [xs]\n  (set (map set\n    (filter #(> (count %) 1)\n      (map val (group-by (comp str sort) xs))))))","problem":77,"user":"4f725201e4b07046d9f4f02f"},{"problem":77,"code":"(fn [words]\n    (let [anagrams_map (loop [temp_words words\n                              anagrams {}]\n                             (if (empty? temp_words)\n                                 anagrams\n                                 (let [word (first temp_words)\n                                       word_hash (sort word)\n                                       remaining_words (rest temp_words)]\n                                      (recur remaining_words\n                                             (assoc anagrams word_hash (conj (get anagrams word_hash []) word))))))\n          anagrams (map set (filter (fn [x] (> (count x) 1)) (vals anagrams_map)))]\n        (set anagrams)))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [w]\n  (set\n   (filter #(> (count %) 1)\n     (map #(set (for [x w\n\t\t\t       :when (= (sort %) (sort x))] x))\n\t\t  w))))","problem":77,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [coll]\n  (->> coll\n       (group-by sort)\n       (filter (fn [[k v]] (< 1 (count v))))\n       vals\n       (map set)\n       set))","problem":77,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn [ls]\n  (set (filter #(> (count %) 1)\n               (map (fn [s]       \n                      (set (filter (fn [x] \n                                     (and (= (count s) (count x))\n                                          (every? #(>= (.indexOf (vec (seq s)) %) 0) (seq x))))\n                                   ls)))   \n                    ls))))","problem":77,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn [lst]\n  (set (filter #(>= (count %) 2) (map set (vals (group-by #(set (vec %)) lst))))))","problem":77,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn [v]\n  (let [res (loop [ret {} lft v]\n              (if (empty? lft)\n                ret\n                (let [elt (first lft)\n                      m-v (ret (sort elt) #{})]\n        \t\t  (recur (assoc ret (sort elt) (conj m-v elt))\n                         (rest lft)))))]\n    (set (remove #(= 1 (count %)) (vals res)))))","problem":77,"user":"4eec82fe535d93acb0a668ae"},{"code":"( fn [s] (set (for [v (vals (group-by #(sort %) s)) :while (> (count v) 1)] (set v))))","problem":77,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":77,"code":"(fn [x] (set  (map set (filter #(> (count %) 1) (vals (group-by set x))))))","user":"5f5e166ce4b02876ed9fcfed"},{"problem":77,"code":"(fn [w]\n  (let [f\n        (fn [c]\n          (reduce #(assoc %1 %2 (inc (%1 %2 0))) {} c))]\n    (set (filter #(> (count %) 1) (map set (vals (group-by f w)))))))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn [coll]\n  (letfn [(anagram? [x y]\n             (apply = (map frequencies [x y])))]\n    (set (filter #(> (count %) 1)\n     (map\n      #(set (filter (partial anagram? %) coll))\n      coll)))))","problem":77,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":77,"code":"(fn find-anagrams\n  [coll]\n  (->>\n   (group-by sort coll)\n   (vals)\n   (filter #(> (count %) 1))\n   (map set)\n   (set)\n   )\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"code":"(let [anagram? (fn [a b] (= (sort (seq a)) (sort (seq b))))]\n  (fn anagrams [[w & ws]]\n    (if w\n      (let [aw? (partial anagram? w)\n            aws (set (filter aw? ws))]\n        (if (empty? aws)\n          (anagrams ws)\n          (into #{(conj aws w)} (anagrams (filter (complement aw?) ws )))))\n      #{})))","problem":77,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":77,"code":"(fn [ns]\n  (into #{} (map set (filter #(> (count %) 1) (vals (group-by #(sort (seq %)) ns))))))","user":"52c00e32e4b07a9af5792341"},{"problem":77,"code":"(fn [my-set] (apply hash-set (map (fn [y] (apply hash-set y)) (remove (fn [x] (= (count x) 1)) (vals (group-by #(sort (seq %)) my-set))))))","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn [a-seq]\n  \n  (let [anagram? (fn [a b] (= (sort a) (sort b)))]\n    (set (filter #(> (count %) 1) (lazy-seq\n      ((fn anagrams [a-s]\n            (let \n              [division (group-by\n                            #(anagram? (first a-s) %) \n                            a-s)]\n              (cons (set (division true)) \n                  (if (division false)\n                    (anagrams (division false))\n                    #{}))))\n         a-seq))))))","problem":77,"user":"4e6dc95a535d5021c1a895f1"},{"problem":77,"code":"(fn [words]\n  (let [anas (map second(group-by frequencies words))\n        anas (set (map set (filter #(< 1 (count %)) anas)))]\n    anas))","user":"5224a46ce4b01819a2de42e5"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by #(sort %))\n       (vals)\n       (filter #(> (count %) 1))\n       (map #(into #{} %))\n       (into #{})\n       ))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":77,"code":"(fn [col] \n  (->> (group-by frequencies col)\n       (vals)\n       (filter #(> (count %1) 1))\n       (map set)\n       set))","user":"574c5e18e4b02ea11479921b"},{"code":"(fn [l] (set \r\n  (filter\r\n    #(> (count %) 1) \r\n    (map set (vals (group-by #(sort (seq %)) l))))))","problem":77,"user":"4f94dab7e4b0dcca54ed6cc6"},{"problem":77,"code":"(fn [v] \n  (set (vals \n         (filter \n           #(> (count (second %)) 1)\n           (apply (partial merge-with into) \n                  (map #(assoc {} (sort %) #{%}) v))))))","user":"52eaba10e4b09f7907dd14c2"},{"problem":77,"code":"(fn [words]\n  (->> words\n       (group-by set)\n       vals\n       (filter #(> (count %) 1))\n       (map set)\n       set))","user":"5290257ae4b0239c8a67af03"},{"problem":77,"code":"(fn\n  [stringcoll]\n  (into #{}\n   (filter #(> (count %) 1)\n           (map\n            (fn [string]\n              (into #{}\n               (filter\n                #(= (into #{} string) (into #{} %))\n                stringcoll)))\n            stringcoll))))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":77,"code":"(fn __\n  [x]\n  (set (filter #(> (count %) 1) (map set (vals\n                                           (group-by\n                                             #(into #{} %)\n                                             x))))))","user":"5b73e500e4b047b03b2036ba"},{"problem":77,"code":"(fn findAnagrams [words]\n  (let [isAnagram? \n        (fn  [s1 s2] (= (sort s1) (sort s2)))]\n    (loop [[w & remainingWords] words\n           result #{}]\n      (if (= (count remainingWords) 0)\n        result\n        (let [anagrams (set (conj (filter (partial isAnagram? w) remainingWords) w))]\n          (recur \n            (vec (clojure.set/difference (set remainingWords) anagrams))\n            (if (> (count anagrams) 1)\n              (conj result anagrams)\n              result)))))))","user":"577e54bbe4b0c8d87281f6e5"},{"problem":77,"code":"(fn\n  [inputs]\n  (into #{} (map #(into #{} %) (vals (filter #(-> % second count (> 1))\n      (loop [result (hash-map)\n             coll inputs]\n        (if (empty? coll)\n          result\n          (recur (update-in result [(-> (first coll) sort)] conj (first coll)) (rest coll)))))))))","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn [words]\n  (loop [groups #{} rest-words words]\n    (if (empty? rest-words)\n        groups\n        (let [characters (sort (vec (first rest-words)))\n              {anagrams true next-rest-words false} (group-by #(= characters (sort (vec %)))\n                                                              (rest rest-words))]\n          (recur (if (empty? anagrams)\n                     groups\n                     (conj groups (set (conj anagrams (first rest-words)))))\n                 next-rest-words)))))","problem":77,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [s]  (set (map set (filter #(> (count %) 1) (vals (group-by sort s))))))","problem":77,"user":"519ef784e4b087743fad2198"},{"problem":77,"code":"(fn anagram-finder-solution\n  [args] ;; update args as needed\n  ;; Write a function which finds all the anagrams in a vector of words. A word x is an anagram of word y if all the letters in x can be rearranged in a different order to form y. Your function should return a set of sets, where each sub-set is a group of words which are anagrams of each other. Each sub-set should have at least two words. Words without any anagrams should not be included in the result.\n   (set (map set (filter #(> (count %1) 1) (vals (group-by sort args)))))\n  )","user":"536829c8e4b0243289761e8b"},{"problem":77,"code":"#(set (filter (fn [s] (> (count s) 1)) (map set (vals (group-by sort %)))))","user":"541096bde4b01498b1a719b2"},{"problem":77,"code":"(fn anagrams\n  [strs]\n  (loop [[h & t] strs\n         sorted-to-words {}]\n    (let [sorted-h (sort h)]\n       (let [new-sorted-to-words (if (contains? sorted-to-words sorted-h)\n                                  (assoc sorted-to-words sorted-h\n                                     (conj (sorted-to-words sorted-h) h))\n                                  (assoc sorted-to-words sorted-h [h]))]\n         (if (nil? t)\n           (into #{} (filter #(> (count %) 1)\n                             (map (fn [[x y]] (into #{} y)) new-sorted-to-words)))\n             (recur t new-sorted-to-words))))))","user":"58152157e4b0f478707a0631"},{"code":"(fn [s] (into #{} (filter (fn [l] (> (count l) 1)) (map (comp set second) (group-by sort s)))))","problem":77,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [s]\n    (set (filter #(< 1 (count %))\n                 (map set\n                      (vals (group-by sort s))))))","problem":77,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn [c] (set\r\n         (filter #(< 1 (count %))\r\n                 (vals (reduce\r\n                        (fn [c w]\r\n                          (let [k (sort w)]\r\n                            (assoc c k (merge (get c k #{}) w))))\r\n                        {} c)))))","problem":77,"user":"4e57d1e2535d8a8b8723a289"}]