[{"problem":32,"code":"(fn duplicate [x]                                 \n   (reduce #(conj % %2 %2) [] x)                                                                            \n)","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":32,"code":"#(reduce (fn [acc nxt] (concat acc [nxt, nxt])) [] %1)","user":"5694290fe4b0dcc4269f4110"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [x y] (conj x y y)) [] xs))","user":"551ee974e4b08d5046aa8a50"},{"code":"(fn dupl [s]\n  (if (empty? s)\n    '()\n    (conj (dupl (rest s)) (first s) (first s))))","problem":32,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [x]\n\t(loop [out '() x (seq x)]\n\t\t(if (= (count x) 0)\n\t\t\t(reverse out)\n\t\t\t(recur (conj (conj out (first x)) (first x)) (rest x)))))","problem":32,"user":"51757af0e4b085adf681d873"},{"code":"#(reverse (loop [coll % r ()] (if (seq coll) (recur (rest coll) (cons (first coll) (cons (first coll) r))) r)))","problem":32,"user":"51ab1da1e4b04e3dc0c27b30"},{"problem":32,"code":"(fn a[sq]\n  (interleave sq sq))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":32,"code":"(fn dupe [coll]\n  (loop [coll coll\n         acc ()]\n    (if (empty? coll)\n      (reverse acc)\n      (recur (rest coll) (into acc (list (first coll) (first coll)))))))","user":"5a346d73e4b0ddc586f153c8"},{"problem":32,"code":"reduce (fn [x y] (into x [y y])) []","user":"59a8a4dce4b0bcf4e9a43af7"},{"code":"(fn dbl [r s] \n  (if (> (.size s) 1)\n    (cons (first s) (cons (first s) (dbl r (rest s))))\n    (cons (first s) (cons (first s) r))))\n'()","problem":32,"user":"4e8b98fc535d65386fec2124"},{"code":"#(loop [x % result []]\n     (if (nil? (first x))\n\t       result\n\t       (recur (rest x) (conj (conj result (first x)) (first x)))))","problem":32,"user":"4f066916535dcb61093f6c10"},{"problem":32,"code":";mapcat #(list % %)\n\n#(interleave % %)","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":32,"code":"(fn dup [coll] (if (empty? coll)\n                 coll\n                 (cons (first coll) (cons (first coll) (dup (rest coll))))))","user":"5759cd46e4b02ea11479932e"},{"problem":32,"code":"(fn dup[seqi]\n   (loop [elem seqi res '()]\n    (if (seq elem)\n    \t(recur (rest elem) (cons (first elem) (cons (first elem) res)))\n    (reverse res))))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":32,"code":"(fn [v] (apply concat (map (fn [x] [x x]) v)))","user":"58a9e872e4b01a0c0b232973"},{"problem":32,"code":"(fn [coil]\n  (loop [src coil dst '()]\n    (if (empty? src)\n      (reverse dst)\n      (recur (rest src) (conj (conj dst (first src)) (first src))))))","user":"56c55fbce4b05cc29241eea5"},{"code":"(fn duplicate [l]\n   (if\n     (empty? l)\n     l\n     (cons\n      (first l)\n      (cons\n       (first l)\n       (duplicate\n        (rest l))))))","problem":32,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":32,"code":"(fn [x]\n   (loop [result []\n          [f & others] x]\n     (if (nil? f)\n       result\n       (recur (conj result f f) others))\n     ))","user":"55ad2379e4b03311e7b732a1"},{"code":"#(apply concat (map (fn [a] [a a]) %))","problem":32,"user":"4fb1d7ace4b081705acca281"},{"code":"(fn [col] (mapcat #(list % %) col))","problem":32,"user":"4ec79f99535d6d7199dd36e4"},{"problem":32,"code":"reduce #(conj %1 %2 %2)\n       []","user":"60ab1536e4b00e9e6653c47e"},{"problem":32,"code":"(fn f [arr] \n  (if (empty? arr)\n    '()\n    (concat (#(list % %) (first arr))\n            (f (rest arr)))))","user":"57501c83e4b02ea11479926b"},{"problem":32,"code":"#(reduce (fn [a b ] (conj a b b) ) [] %)","user":"572ac718e4b0f4d77e651242"},{"problem":32,"code":"(fn [[& args]]\n     (reduce #(conj %1 %2 %2) [] args))","user":"56c04bd3e4b060a8e693e3a6"},{"code":"(fn [x] (reduce (fn [y [x1 x2]] (cons x1 (cons x2 y))) (map #(repeat 2 %) (reverse x))))","problem":32,"user":"50a2e3fbe4b029e8bace3629"},{"problem":32,"code":"#(loop [coll %\n        out []]\n   (if (empty? coll)\n     out\n     (recur (rest coll) (conj out (first coll) (first coll)))))","user":"59902fede4b0fcebec4de86d"},{"code":"#(sort (into (into () %) %))","problem":32,"user":"50733b31e4b0e3170b5a869a"},{"problem":32,"code":"(fn thirty-two [x]\n  (mapcat #(repeat 2 %) x))","user":"57607706e4b08062f99a4e97"},{"problem":32,"code":"(fn [xs] \n  (reduce \n   (fn [acc x] \n     (conj acc x x))\n   [] xs))","user":"598debf0e4b02b9968b84d2e"},{"problem":32,"code":"(fn [ls] (reduce (fn [acc x] (concat acc (list x) (list x))) '() ls))","user":"546d41bde4b00cfc9eacc18c"},{"problem":32,"code":"(fn[s] (mapcat #(vector % %) s))","user":"54d4ba98e4b0a52adc2e2004"},{"problem":32,"code":"#(mapcat vector %1 %1)","user":"5606a4ace4b08b23635d3175"},{"problem":32,"code":"(fn \n  [col]\n  (loop [c (reverse col) res (list)]\n\t\t(if (first c)\n\t\t\t(recur (rest c) (conj res (first c) (first c)))\n\t\t\tres)))","user":"590620e1e4b047aa04b1992c"},{"problem":32,"code":"(fn double-elements\n   [seq-to-double]\n  (if (empty? seq-to-double)\n    nil\n    (cons (first seq-to-double)\n          (cons (first seq-to-double)\n                (double-elements (rest seq-to-double))))))","user":"5a9829e5e4b0d174b936c788"},{"problem":32,"code":"#(reduce (fn [n number]\n          (concat n (take 2 (repeat number)))) (list) %1)","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":32,"code":"(fn [coll]\n  (seq\n   (reduce\n    (fn [v e]\n      (conj (conj v e) e))\n    [] coll)))","user":"595930f6e4b066ee0a44af9c"},{"problem":32,"code":"(fn [m] (reduce (fn [sq i] (conj (conj sq i) i)) '[] m))","user":"56019662e4b04bb52996e190"},{"problem":32,"code":"(fn dup3 [coll]\n  (interleave coll coll))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs\n         reps 0\n         acc nil]\n    (if (empty? xs)\n      (reverse acc)\n      (if (< reps 2)\n        (recur xs (inc reps) (cons (first xs) acc))\n        (recur (rest xs) 0 acc)))))","user":"5b673832e4b0c6492753e760"},{"problem":32,"code":"reduce (fn [acc it] (conj (conj acc it) it)) []","user":"5cbdc591e4b026601754ba00"},{"code":"#(reduce (fn [col item] (conj col item item )) [] %)","problem":32,"user":"5016ac54e4b052339a490e7b"},{"code":"(fn fun [xs]\n(reduce #(conj %1 %2 %2) [] xs))","problem":32,"user":"5349da55e4b084c2834f4a68"},{"problem":32,"code":"(fn [col] (reverse(reduce (fn[acc nex] (conj (conj acc nex) nex)) '() col )))","user":"52149e21e4b0961f15ac4d94"},{"problem":32,"code":"(fn [coll]\n  (reduce #(conj (conj %1 %2) %2) [] coll))","user":"564da567e4b0284900eef682"},{"code":"(fn [s] (apply concat (map #(repeat 2 %) s)))","problem":32,"user":"4ed2b337535d44c135fd68de"},{"problem":32,"code":"(fn foo [coll] (apply concat (map vector coll coll)))","user":"59f4c42ce4b0966464fe6ab6"},{"code":"(fn dup [lst]\n  (cond\n   (empty? lst) nil\n   true (cons (first lst) (cons (first lst) (dup (rest lst))))))","problem":32,"user":"52091d57e4b0e152394d76f0"},{"code":"(fn [v] (reduce #(conj %1 %2 %2) [] v))","problem":32,"user":"4f030af7535dcb61093f6a49"},{"problem":32,"code":"(fn f [s] \n  (sort (apply concat (repeat 2 s))))","user":"5ed15e23e4b016b56eae05ba"},{"problem":32,"code":"reduce (fn [coll x] (into coll [x x])) []","user":"58a6806ee4b01a0c0b23292f"},{"code":"(fn [s]\n    (loop [duplicated '() l s]\n      (if (empty? l)\n        (reverse duplicated)\n        (recur (conj duplicated (first l) (first l)) (rest l))\n          )))","problem":32,"user":"4e7e8684535db169f9c79717"},{"problem":32,"code":"(fn [params] (sort (concat params params)))","user":"5b7ed20fe4b047b03b203760"},{"problem":32,"code":"(fn [arr] (reduce (fn [new-map val] (conj (conj new-map val) val)) [] arr))","user":"5bc352abe4b07a9b28b10041"},{"problem":32,"code":"(fn [coll]\n  (letfn [(f* [acc el]\n              (conj acc el el))]\n    (reduce f* [] coll)))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn\n  [seq]\n  (apply concat (map (fn [a] [a a]) seq)))","problem":32,"user":"53334cb2e4b019098a6f8b81"},{"problem":32,"code":"; (fn [coll]\n;  (reduce\n;    #(conj (conj %1 %2) %2)\n;    []\n;    coll))\n\n; (fn [coll]\n;  (reduce #(conj %1 %2 %2) [] coll))\n\nreduce #(conj %1 %2 %2) []","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":32,"code":"(fn repeat_sequence\n  [lst]\n  (loop [lst lst\n         result ()]\n    (if (= (first lst) nil) result\n      (recur (rest lst) (concat result (repeat 2 (first lst)))))))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn [seq]\n  (apply concat\n   (map #(vector % %)\n        seq)))","problem":32,"user":"516ff477e4b034fe8eaf70f3"},{"problem":32,"code":"(fn [s] \n  (mapcat\n    #(repeat 2 %)\n    s))","user":"504f9ae1e4b0a02f9cffde9c"},{"code":"#(mapcat identity (for [x %] [x x]))","problem":32,"user":"4f038ed6535dcb61093f6b24"},{"code":"(fn doublearg [col]\n    ((fn doublearg* [i out col]\n    (if (== i (count col))\n        out\n        (doublearg*\n            (inc i)\n            (concat out (take 2 (repeat (col i))))\n            col))) 0 () col))","problem":32,"user":"4fc2e302e4b081705acca33a"},{"problem":32,"code":"#(mapcat(fn[x](repeat 2 x))%)","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":32,"code":"#(for [e % x [e e]] x)","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [x] ( sort( concat x x)))","problem":32,"user":"4f57a153e4b0a7574ea7183a"},{"code":"(fn [xs] (reverse (reduce (fn [a x] (cons x (cons x a))) [] xs)))","problem":32,"user":"503d129fe4b06c4e0e1fa254"},{"problem":32,"code":"#_(fn [s] (reduce into [] (map #(do [% %]) s)))\nmapcat #(do [ % %])","user":"5b250773e4b063e2438bcc21"},{"problem":32,"code":"(fn [DupSec]\n    (reverse (reduce #(conj %1 %2 %2) '() DupSec)))","user":"5a99b766e4b0d174b936c7a8"},{"code":"(fn dup[x] (mapcat #(repeat 2 %) x))","problem":32,"user":"538de891e4b0b51d73faae78"},{"problem":32,"code":"(fn duplicateSequence\n  [list]\n  (mapcat #(repeat 2 %) list))","user":"59dd3930e4b0a0ac046f2504"},{"problem":32,"code":"(fn [inseq] (reduce concat (map #(list %1 %1) inseq)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [xs]\n   (reduce (fn [a b] (conj (conj a b) b)) [] xs)\n  )","problem":32,"user":"534d1173e4b084c2834f4a98"},{"problem":32,"code":"(fn [coll]\n  (reduce\n    (fn [r x]\n      (conj r x x))\n    []\n    coll\n  ))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [x]  (reduce #(into % (repeat 2 %2)) [] x))","problem":32,"user":"52105865e4b080a8d9b9d639"},{"problem":32,"code":"#((fn [seq double](if(empty? seq) double (recur (rest seq) (concat double [(first seq) (first seq)])))) % '())","user":"5cb47a0fe4b026601754b91b"},{"problem":32,"code":"(fn test [seqq]\n  (interleave seqq seqq))","user":"579332c2e4b0e215f87e8452"},{"problem":32,"code":"(fn dup \n  ([x] (dup x []))\n  ([x o] (\n        if (empty? x)\n        o\n        (dup (rest x) (conj (conj o (first x)) (first x)))\n        ))\n   )","user":"5b081ff2e4b0cc2b61a3bdb3"},{"problem":32,"code":"(fn [a] (apply concat (map #(repeat 2 %) a)))","user":"5d323149e4b01671435dbce9"},{"problem":32,"code":"(fn [x]\n  (reverse\n   (reduce #(into %1 (take 2 (repeat %2)))\n           '()\n           x)))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":32,"code":"(fn foo [lst]\n  (if (empty? lst)\n    lst\n    (let [[x & xs] lst]\n      (conj (conj (foo xs) x) x))))","user":"600ae927e4b074f607df6689"},{"code":"(fn [a]\n  (reduce #(conj (conj %1 %2) %2) '[] a))","problem":32,"user":"5374adc3e4b06d7f452d9e27"},{"problem":32,"code":"reduce #(apply conj %1 (list %2 %2)) []","user":"59251947e4b072a2710fce69"},{"code":"(fn [coll]\r\n  (loop [acc []\r\n         coll coll]\r\n    (if (empty? coll)\r\n      acc\r\n      (recur (conj acc (first coll) (first coll))\r\n             (rest coll)))))","problem":32,"user":"4e22b78b535d04ed9115e81e"},{"code":"(fn f [l] (if (not (seq l)) '() (cons (first l) (cons (first l) (f (rest l))))))","problem":32,"user":"53638ed2e4b0243289761e5b"},{"code":"reduce #(concat % (repeat 2 %2)) '()","problem":32,"user":"527dc2aee4b0757a1b17138d"},{"problem":32,"code":"(fn f [arr] \n\n  (loop [ans [] subArr arr]\n    (if (> (count subArr) 0)\n      (recur (conj ans (first subArr) (first subArr)) (rest subArr))\n      ans\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"code":"(fn [x]\n   (mapcat #(vector % % ) x))","problem":32,"user":"4f616892e4b0defedf855fbf"},{"problem":32,"code":"#(reduce (fn [coll e] (conj coll e e)) [] %)","user":"528c381ce4b0239c8a67aeb2"},{"code":"reduce #(conj(conj %1 %2), %2) []","problem":32,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [n]\n   (apply concat (map (fn [elem] [elem elem]) n)))","problem":32,"user":"529c6995e4b04e0c58e87b61"},{"code":"mapcat #(lazy-seq [% %])","problem":32,"user":"50d3ec8be4b030b634c368bb"},{"problem":32,"code":"(fn [values]\n  (reduce\n   #(concat %1 (repeat 2 %2))\n   []\n   values))","user":"5463c824e4b01be26fd746c5"},{"code":"#(reduce (fn [i e] (conj i e e)) [] %)","problem":32,"user":"52de249ae4b09f7907dd13ed"},{"problem":32,"code":"#(apply interleave (repeat 2 %))\n\n;golf:\n;#(interleave % %)","user":"54d341f7e4b0e8a36923e603"},{"problem":32,"code":"(fn [s]\n    (mapcat #(repeat 2 %) s))","user":"57985f98e4b039eba2ecb114"},{"code":"(fn dup [n]\n  (if (empty? n)\n    n\n  (let [x (first n) tl (rest n)]\n    (conj (dup tl) x x))))","problem":32,"user":"51c20b14e4b0d204dbe2ca1b"},{"problem":32,"code":"(fn [col] (sort (into col col)))","user":"5656e039e4b0f9d632dd84a3"},{"problem":32,"code":"(fn [xs]\n  (apply concat\n         (map #(repeat 2 %) xs)))","user":"5ffc18cae4b074f607df65f1"},{"code":"(fn [s] (mapcat #(repeat 2 (identity %)) s))","problem":32,"user":"4f282da7e4b0d6649770a013"},{"problem":32,"code":"(fn foo [c]\n (\n (fn bar [c accum]\n   (if-let [s (seq c)]\n     (let [x (first s)]\n       (recur (rest s) (concat accum [x x])))\n     accum))\n c []))","user":"581a703de4b0e114eb51a005"},{"problem":32,"code":"(fn [arr] (apply concat (map #(repeat 2 %) arr)))","user":"563c6ebae4b0bfe05bf11834"},{"code":"(fn duplicate [lst]\n  (if (empty? lst)\n    lst\n    (conj (duplicate (rest lst)) (first lst) (first lst))))","problem":32,"user":"4ff9cfd6e4b0678c553fc3af"},{"code":"#(reduce concat (for [item %] [item item]))","problem":32,"user":"514721c6e4b0d520409ed392"},{"problem":32,"code":"(fn [seq]\n  (apply concat (for [x seq] (repeat 2 x))))","user":"5f081f6de4b0cf489e8d7f5a"},{"code":"(fn [x]\n  (loop [s x r '()]\n    (if (empty? s) r\n      (recur (rest s) (concat r (list (first s) (first s)))))))","problem":32,"user":"523bc0e6e4b07becd5be21f9"},{"problem":32,"code":"(fn dup [x] (reverse (reduce (fn [acc b] (cons b (cons b acc)) ) '() x) ) )","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn dup [s]\n  (if (empty? s) s\n    (let [head (first s)]\n      (concat [head head] (dup (rest s))))))","problem":32,"user":"5119f3d5e4b06c8af0111818"},{"problem":32,"code":"#(reduce (fn [a v] (conj a v v)) [] %)","user":"57122b20e4b09c608db70451"},{"code":"(fn doubler [x] \n  (if (empty? x)\n    '()\n    (cons (first x) \n          (cons (first x)\n                (doubler (rest x))))))","problem":32,"user":"5294c95fe4b02ebb4ef75013"},{"problem":32,"code":"(fn [s] (loop [left-to-process s final-sequence '()]\n            (if (empty? left-to-process)\n              final-sequence\n              (recur (rest left-to-process) (concat final-sequence [(first left-to-process) (first left-to-process)]))\n              )\n            )          \n          )","user":"55c5261ee4b0e31453f649ae"},{"problem":32,"code":"(fn dup [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      (reverse b)\n      (recur (rest a)(conj b (first a)(first a))))))","user":"57f814fbe4b0d3187e900911"},{"problem":32,"code":"(fn [coll]\n  (reduce #(conj %1 %2 %2) '() (reverse coll)))","user":"56e4991fe4b03a7c14b85a4f"},{"problem":32,"code":"(fn [l] (apply concat (map #(conj [] % %) l)))","user":"558b41fce4b0277789237628"},{"problem":32,"code":"(fn\n  [s]\n  (reduce (fn [result item] (conj result item item)) [] s))","user":"5693383fe4b0dcc4269f4100"},{"problem":32,"code":"(fn [old & neww]\n  (if (empty? old)\n    (reverse neww)\n    (recur (rest old)\n      (conj (conj neww (first old) ) (first old) )\n    )\n  )      \n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":32,"code":"#(mapcat (fn [x] (concat [] [x x])) %)","user":"591ac8ece4b09b4ee5954bdd"},{"code":"(fn [list]\n  (loop [acc '() x list]\n    (if (nil? (first x))\n      (reverse acc)\n      (recur (conj acc (first x) (first x)) (rest x)))))","problem":32,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":32,"code":"(fn dub [x]\n  (let [twice #(list % %)]\n    (reduce concat (map twice x))   \n    )\n)","user":"54b050cee4b09f271ff37d13"},{"problem":32,"code":"(fn [xs] (let [dup (fn [xs] (mapcat (fn [x] [x x]) xs))] (dup xs)))","user":"568c4bc8e4b0dcc4269f40b2"},{"code":"(fn [x] (reduce (fn [y z] (conj y z z)) [] x))","problem":32,"user":"51e28063e4b08e53a149f0f2"},{"problem":32,"code":"(fn\n  [seq]\n  (reverse (reduce\n   \t(fn \n      [acc curr]\n      (conj acc curr curr)\n      )\n   \t'()\n   \tseq)))","user":"594be2cae4b07ddc2dafae48"},{"problem":32,"code":"(fn [lst] (for [pair (for [x lst] [x x]) element pair] element))","user":"56367c51e4b0bfe05bf117cd"},{"code":"(fn [col]\n        (interleave col col)\n      )","problem":32,"user":"536827f1e4b0243289761e8a"},{"problem":32,"code":"(fn [coll]\n (loop [coll coll duplicated []]\n   (if (empty? coll)\n     (apply list duplicated)\n     (recur (rest coll) (into duplicated [(first coll) (first coll)]))\n     )\n   )\n  \n )","user":"5de6484ce4b0986d99407f66"},{"code":"(fn   [col]\n  (loop [retval [] c col]\n    (if (empty? c)\n      retval\n      (recur (conj retval (first c) (first c)) (rest c)))))","problem":32,"user":"4e539f7e535d8a8b8723a272"},{"problem":32,"code":"(letfn [(dup [xs]\n  (if (empty? xs)\n    xs\n    (let [y (first xs) ys (rest xs)]\n      (lazy-seq (cons y (cons y (dup ys)))))))] dup)","user":"577a74f7e4b0d3393e5deafa"},{"problem":32,"code":"#(reduce (fn [acc item]\n           (conj acc item item))\n         []\n         %)","user":"5e62c405e4b0fd0acd15869b"},{"problem":32,"code":"#(mapcat \n  (fn [x] (concat (identity x) (identity x))) \n  \t(partition-by identity %))","user":"5448616be4b032a45b8693c9"},{"code":"#(loop [curList %1\r\n       retList '()]\r\n      (if (empty? curList)\r\n        retList\r\n        (recur (rest curList) (concat (concat retList (list (first curList))) (list (first curList))))))","problem":32,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn [coll] (loop [final []\n                  remain coll]\n             (if (empty? remain)\n               (seq final)\n               (recur (conj (conj final (first remain)) (first remain)) (next remain)))))","problem":32,"user":"507a33dee4b08327cd804a68"},{"problem":32,"code":"#(loop [elems % res '()]\n   (if (empty? elems)\n     res\n     (recur (butlast elems) (let [le (last elems)] (conj res le le)))))","user":"54302691e4b0dad94371f2d7"},{"problem":32,"code":"reduce (fn [a x] (into a [x x])) []","user":"566669d8e4b0e91d5f5c566f"},{"problem":32,"code":"(fn f [s]\n(let [f*\n(fn [acc s*]\n(conj acc s* s*))]\n(reduce f* [] s)))","user":"54852ad0e4b0e286459a11a7"},{"problem":32,"code":"(let [conj2 #(conj (conj %1 %2) %2)\n      dupe #(reverse (reduce conj2 '() %1))]\n   dupe)","user":"565b7902e4b068f2fe63dc04"},{"problem":32,"code":"(fn my-replicate [input]\n  (for [x input\n        y (repeat 2 1)]\n    x))","user":"561bb8dbe4b064ca9f4b1686"},{"problem":32,"code":"(fn [x] (mapcat vector x x))","user":"55e20059e4b050e68259b427"},{"problem":32,"code":"#(sort(reduce conj % %))","user":"6059d9c8e4b07e92fa001ad0"},{"problem":32,"code":"(fn dup-elements [coll]\n  (interleave coll coll))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":32,"code":"(fn [col]\n  (apply concat (map (fn [x] (replicate 2 x)) col)))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"#(reduce (fn[coll x] (conj coll x x)) [] %)","problem":32,"user":"4ff2f0a9e4b0678c553fc341"},{"problem":32,"code":"(fn f [s]\n  (sort-by identity (into s s)))","user":"54ce3790e4b057c6fda3a2ab"},{"problem":32,"code":"(fn [s] (reduce (fn [res el]\n                  (conj res el el))\n                [] s))","user":"5b7ec039e4b047b03b20375d"},{"problem":32,"code":"(fn[coll] (reduce #(conj %1 %2 %2) [] coll))","user":"55b8d186e4b01b9910ae29ba"},{"code":"(fn [x & acc]\n  (if (empty? x) acc\n      (recur (rest x) (concat acc [(first x) (first x)]))))","problem":32,"user":"4f343e60e4b0e243712b1eb5"},{"problem":32,"code":"(fn [aseq] (reduce #(conj %1 %2 %2) [] aseq))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"#(reduce (fn[p x] (conj (conj p x) x)) [] %)","problem":32,"user":"520aaac2e4b01da9d47a99e6"},{"code":"#(reduce into [] (map (fn [x] [x x]) %))","problem":32,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn [s]\n    (seq (reduce (fn [accum v]\n                   (conj (conj accum v) v))\n           []\n           s)))","problem":32,"user":"501f36dde4b0cb6ebc0a42e4"},{"problem":32,"code":"#(reverse (reduce (fn [base diff] (into base (repeat 2 diff))) nil %))","user":"52e5f810e4b09f7907dd1468"},{"code":"#(loop [in %\n        out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj (conj out (first in)) (first in)))))","problem":32,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn f32 [a]\n  (apply concat (map #(list % %) a)))","problem":32,"user":"52c08c59e4b07a9af5792351"},{"problem":32,"code":"(fn duplicate-sequence [s]\n  (reverse\n  (loop [result nil\n         input s]\n    (if\n      (empty? input)\n      result\n      (recur (concat (list (first input) (first input)) result) (rest input))\n      )\n    )\n  ))","user":"563b9acbe4b0bfe05bf11827"},{"code":"(fn [sq]\n  ((fn [sq r]\n    (if (empty? sq)\n      r\n      (recur (rest sq) (concat r [(first sq) (first sq)]))))\n   sq []))","problem":32,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"#(mapcat (partial conj ()) %1 %1)","problem":32,"user":"513fbe89e4b00f13ea1bd894"},{"problem":32,"code":"(fn [xs]\n  (reduce concat\n          (map #(repeat 2 %) xs)))","user":"5907a736e4b047aa04b1995e"},{"code":"(fn dupl [x]\n  (if (= x [])\n    []\n    (conj (dupl (reverse (rest (reverse x)))) (last x) (last x))))","problem":32,"user":"50013694e4b0678c553fc417"},{"problem":32,"code":"(fn  [coll]\n  (reduce into (empty coll) (map #(repeat 2 %) coll)))","user":"60a7d174e4b00e9e6653c469"},{"problem":32,"code":"(fn dup [l]\n  (let [x (first l)\n        xs (rest l)]\n  (cond (nil? x) '()\n        :otherwise (cons x (cons x (dup xs))))))","user":"5717ad6fe4b07c98581c3b14"},{"code":"reduce (fn [x y] (conj (conj x y) y)) []","problem":32,"user":"4f8ac2bde4b02e764a0a5172"},{"code":"#(loop [lst % ret '[]]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (conj ret (first lst) (first lst)))))","problem":32,"user":"51000111e4b00d7ad4cab15e"},{"problem":32,"code":"(fn [sequence] (mapcat #(identity [% %]) sequence))","user":"562d15a6e4b0a45d2ff83019"},{"problem":32,"code":"#(apply concat (map (fn [n] (repeat 2 n)) %))","user":"53fe1b42e4b0de5c418485f1"},{"problem":32,"code":"; Works on simple sequences, but not nested sequences\n;(flatten (map #(list % %) [1 2 3]))\n;(fn [coll] (flatten (map list coll coll)))\n\n;(defn duplicate [coll] (list coll coll))\n;#(flatten (map duplicate %))\n \n;General solution\nmapcat #(list % %)\n;mapcat #(vector % %)","user":"5487eb1de4b0e286459a11ca"},{"problem":32,"code":"#(reduce (fn [coll c] (cons c (cons c coll))) () (reverse %))","user":"5ad37785e4b0ea6055cfabc5"},{"code":"(fn [x]\n    (apply list (reduce (fn [a b] (conj a b b)) [] x))\n    )","problem":32,"user":"528ce039e4b0239c8a67aebc"},{"problem":32,"code":"(fn dup [list] (mapcat (partial repeat 2) list))","user":"5d21b91ee4b02ea6f0fb69e9"},{"problem":32,"code":"(fn [col] (mapcat (fn [e] [e e]) col))","user":"5455a6d3e4b0e397800069e2"},{"code":"(fn [v] (interleave v v))","problem":32,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":32,"code":"(fn dups [x]\n  (if (empty? x)\n    x\n    (cons (first x) \n          (cons (first x)\n                (dups (rest x))))))","user":"5e18c885e4b0dc95940084fc"},{"problem":32,"code":"#(apply concat\n         (map\n          (fn [x] [x x])\n          %))","user":"524379a4e4b076204b44fac0"},{"problem":32,"code":"(fn [col]\n    (apply concat (map (fn [x] [x x]) col))\n    )","user":"59932f49e4b0b211ea3aaaae"},{"problem":32,"code":"(fn duplicate [x] (reduce concat [] (map #(vector % %) x)))","user":"542c1f73e4b0dad94371f29d"},{"problem":32,"code":"(fn [x]\n  (apply concat \n   (map #(list % %) x)\n  ))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":32,"code":"(fn [coll]\n  (loop [in coll\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out (list (first in)) (list (first in)))))))","user":"57a310b4e4b0c3d858beb90c"},{"problem":32,"code":"(fn [xs] (reduce (fn [acc x] (concat acc (take 2 (repeat x)))) [] xs))","user":"5c3f37fce4b08cd430848e91"},{"problem":32,"code":"(fn [col] \n\t\t(mapcat \n    \t\t#(list %1 %1) \n    \t\tcol\n    \t)\n)","user":"5027bbe3e4b01614d1633fef"},{"problem":32,"code":"(fn [xs]\n    (reduce #(conj %1 %2 %2) [] xs))","user":"5920c191e4b09b4ee5954c61"},{"problem":32,"code":"(fn [x]\n  (loop [lst x new-list ()]\n    (if (empty? lst ) (reverse new-list)\n      (recur (rest lst) (conj (conj new-list (first lst) ) (first lst) )))))","user":"563130e4e4b0bfe05bf1178d"},{"problem":32,"code":";;#(reduce concat (map (take 2 (repeat %)) %))\n\n(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))","user":"5cccac42e4b0ccb06196289d"},{"problem":32,"code":"(fn [s] (reduce #(conj %1 %2 %2) [] s) )","user":"5b72b36ce4b047b03b2036a9"},{"problem":32,"code":"(fn duplicate-values [x] (reduce #(concat %1 [%2 %2]) [] x))","user":"591addcee4b09b4ee5954be1"},{"problem":32,"code":"(fn dupe [[first & rest]]\n  (if (nil? first)\n    '()\n    (cons first (cons first (dupe rest)))))","user":"57131a8ee4b07c98581c3a97"},{"problem":32,"code":"(fn abc [x] (sort (reduce into (repeat 2 x))))","user":"5b3ca9c9e4b02d533a91bbe3"},{"problem":32,"code":"reduce (fn [coll elm]\n         (conj coll elm elm)) []","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":32,"code":"(fn [x] (apply concat (map (fn [y] (concat y y) ) (partition-by identity x))))","user":"54180369e4b01498b1a71a13"},{"problem":32,"code":"(fn [in] (sort (into in (for [x in] x))))","user":"543b9f8ce4b032a45b869332"},{"code":"(fn dup [s] \n (loop [s s a []]\n   (if (empty? s) a \n   (recur (rest s) (conj a (first s) (first s))))))","problem":32,"user":"4e7e55ab535db169f9c79711"},{"problem":32,"code":"(fn [coll] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll))\n  )","user":"54413696e4b032a45b86936b"},{"problem":32,"code":"(fn [s] \n  (mapcat #(take 2 (repeat %)) s)\n  )","user":"5c4ad616e4b0f9f7a8770e5a"},{"code":"(fn  [x] (reduce (fn [a b] (conj a b b)) [] x))","problem":32,"user":"5106c803e4b01150e115ebee"},{"problem":32,"code":"mapcat #( vector % % )","user":"57487084e4b009280f9f2b8c"},{"problem":32,"code":"(fn [s]\n   (let [acc []]\n    (reverse (reduce #(conj %1 %2 %2) '() s))))","user":"56cbb352e4b0ea9b8538f738"},{"problem":32,"code":"(fn [s]\n  (reverse (reduce #(conj (conj %1 %2) %2) '() s)))","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":32,"code":"#(reduce\n  (fn [a x]\n    (conj a x x))\n    []\n    %)","user":"56050f06e4b08b23635d3161"},{"code":"#(list* (reduce (fn [res x] (conj (conj res x) x)) [] %))","problem":32,"user":"4f2ef48be4b0d6649770a06c"},{"code":"(fn [coll] (reduce #(cons %2 (cons %2 %1)) () (reverse coll)))","problem":32,"user":"52cc85abe4b07d0d72b27367"},{"code":"(fn [x]\r\n  (reduce into []\r\n    (for [i x]\r\n      (list i i))))","problem":32,"user":"508453abe4b0c98812d07891"},{"code":"(fn [s]\n  (loop [s s result []]\n    (if (seq s)\n      (recur (next s) (conj result (first s) (first s)))\n    result)))","problem":32,"user":"4e410033535dc968683fc49c"},{"problem":32,"code":"(fn dup_items [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (dup_items (rest x))))))","user":"54651982e4b01be26fd746d4"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll\n         result []]\n    (if-let [hd (first c)]\n      (recur (rest c) (concat result [hd hd]))\n      result)))","user":"5ad4c3d2e4b0ea6055cfabe1"},{"problem":32,"code":"(fn [s]\n  (apply concat (map #(identity [%1 %1]) s)))","user":"5535d34be4b09218d5f44fb0"},{"code":"(fn dupl [items]\n  (if (empty? items)\n    ()\n    (let [f (first items) r (rest items)]\n      (concat [f f] (dupl r)))))","problem":32,"user":"4f0d093b535d0136e6c22313"},{"code":"(fn f [x] (let [x (seq x)](when x (cons (first x) (cons (first x) (f (rest x)))))))","problem":32,"user":"523ed522e4b057c4b7cd0a78"},{"code":"reduce (fn [res x] (conj res x x)) []","problem":32,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":32,"code":"(fn [lst]\n    (loop\n      [[f & r] lst, acc []]\n      (if\n        (nil? f)\n        acc\n        (recur r (conj acc f f)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn dble ([s] (dble s ()))\n  ([s f]              \n  (let [i (first s) m (rest s)]\n    (cond\n    (empty? m) (conj f i i)\n    :else (conj (dble m f) i i)))))","problem":32,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":32,"code":"(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (conj acc r r))\n      (reverse acc))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":32,"code":"(fn p32 [l]\n  (mapcat (fn [val] `(~val ~val)) l))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":32,"code":"(fn [coll] (reduce (fn [coll item] (concat coll (list item item))) '() coll))","user":"53065acbe4b02e8216869792"},{"problem":32,"code":"(fn [xs] (reduce (fn [i d] (concat i [d d])) () xs))","user":"56686edce4b04acd4f672dea"},{"problem":32,"code":"(fn [col]\n  (->> col\n       (reduce (fn [accum nxt]\n                 (conj accum nxt nxt))\n               [])))","user":"50738138e4b054001656acc9"},{"problem":32,"code":"(fn duplicate [coll]\n  (if (empty? coll)\n    nil\n    (cons (first coll) (cons (first coll) (duplicate (rest coll))))))","user":"54125eeee4b01498b1a719d3"},{"problem":32,"code":"(fn q32 [input]\n  (->> (for [x input] [x x]) (apply concat)))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":32,"code":"(fn [l]\n  (loop [l l result '()]\n    (if (empty? l)\n      result\n      (recur (rest l) (concat result [(first l) (first l)] )))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [lst]\n  (loop [lst lst acc []]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (apply conj acc (repeat 2 (first lst))))\n      )\n    )\n  )","problem":32,"user":"4ec6c878535d6d7199dd36d5"},{"problem":32,"code":"(fn [s] \n     (reduce concat (for [x s]\n\t    \t\t(list x x))))","user":"54468fd3e4b032a45b8693b2"},{"problem":32,"code":"(fn [args]\n    (sort (concat args args)))","user":"53882352e4b0640c7a9a5898"},{"problem":32,"code":"(fn [x] (reduce (fn [agg y] (conj agg y y)) [] x))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":32,"code":"(fn [s]\n  (loop [result []\n         s s]\n    (if (empty? s)\n      result\n      (recur (conj (conj result (first s)) (first s)) (rest s)))))","user":"531c6e72e4b08068f379eda0"},{"problem":32,"code":"(fn [coll]\n  (let [coll1 coll]\n    (interleave coll coll1)))","user":"567ea403e4b0feffd0d18eb5"},{"code":"(fn [xs]\n  (mapcat #(concat % %) (partition-all 1 xs)))","problem":32,"user":"51ef31dfe4b0871fa145d9a0"},{"problem":32,"code":"(fn [li](apply concat (for [x li] (list x x))))","user":"553fe819e4b0a04f792994fc"},{"problem":32,"code":"(fn [sqnc]\n  (reverse \n   (loop [old-sqnc sqnc\n          new-sqnc nil]\n     (if (empty? old-sqnc)\n       new-sqnc\n       (let [item (first old-sqnc)]\n         (recur (rest old-sqnc)\n                (cons item (cons item new-sqnc))))))))","user":"566f3e18e4b0a866af6896e7"},{"problem":32,"code":"reduce (fn [acc elm] (conj acc elm elm)) []","user":"5694a50fe4b0dcc4269f4121"},{"code":"(fn [x] (reduce (fn [y z] (conj (conj y z) z)) [] x))","problem":32,"user":"4f34eb87e4b0e243712b1eba"},{"problem":32,"code":"#(apply concat (map (fn [x] (seq [x x])) %))","user":"52824143e4b0757a1b171453"},{"problem":32,"code":"(fn my-dup [col] (reduce into [] (map (fn [x] [x x]) col)))","user":"5d80f328e4b0915913b1d372"},{"problem":32,"code":"(partial mapcat #(conj [] % %))","user":"5a21d34ce4b0ff51aa4b32b9"},{"problem":32,"code":"(fn [coll] \n  (loop [[head & tail]  coll\n         result  \t\t[]]\n   \t(if (not (nil? head))\n      (recur tail (conj result head head))\n      result)))","user":"53ac0e52e4b047364c044457"},{"code":"(fn [seq]\n  (interleave seq seq))","problem":32,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn [x] \n  (reduce #(concat %1 %2) \n      (map (partial repeat 2 ) x)))","problem":32,"user":"5047bbd1e4b0ec70b3ef8d90"},{"problem":32,"code":"(fn dupl [coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (first coll)\n            (cons (first coll) (dupl (rest coll)))))))","user":"5776e21de4b0979f89651642"},{"problem":32,"code":"(fn [x] (mapcat #(identity %) (for [e x] `(~e ~e))))","user":"5515649fe4b055c2f668d4e3"},{"code":"(fn [coll](mapcat #(repeat 2 %) coll))","problem":32,"user":"4e739e13535dff18050a9c76"},{"problem":32,"code":"(fn t\n  [[x & args]]\n  (if (empty? args)\n      (list x x)\n  (cons x (cons x (t args)))))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"(fn [lst] (mapcat #(list % %) lst))","problem":32,"user":"4ee528fb535d1385b2869d87"},{"problem":32,"code":"#(let [result (for [y %] (repeat 2 y))] (apply concat result))","user":"58e90258e4b056aecfd47cfd"},{"problem":32,"code":"(fn \n  [coll]\n  (reduce (fn [duped el]\n    (cons el (cons el duped)))\n  '()\n  (reverse coll)))","user":"548db64ce4b0e286459a121c"},{"code":"(fn double [x]\n  (if (= x '())\n    '()\n    (conj (double (rest x)) (first x) (first x))\n  )\n)","problem":32,"user":"4fa7ef54e4b081705acca1ca"},{"code":"(fn [xs]\n  (reduce concat (for [x xs] [x x])))","problem":32,"user":"52d660eae4b09f7907dd1356"},{"problem":32,"code":"(fn [listy] (reduce (fn [a x] (concat a [x x])) () listy))","user":"5af8752fe4b0cc2b61a3bcd3"},{"problem":32,"code":"(fn st [x]\n  (if (empty? (rest x))\n    (list (first x) (first x))\n    (conj (st (rest x)) (first x) (first x))))","user":"543be8f0e4b032a45b869337"},{"problem":32,"code":"(fn [s]\n  (->> s\n       (reduce (fn [agg e] (conj agg e e)) [])\n       seq))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn dup [ lst ]\n  (if (empty? lst) '()\n    (let [ fst (first lst)]\n      (cons fst (cons fst (dup (rest lst)))))))","problem":32,"user":"4e356d2b535deb9a81d77f2d"},{"problem":32,"code":"(fn [l] (mapcat #(list %1 %1) l))","user":"54857657e4b0e286459a11ac"},{"problem":32,"code":"(fn tester [x]\n    (sort (concat x x)))","user":"5ccc9078e4b0ccb061962899"},{"problem":32,"code":"(fn [x]\n     (mapcat #(repeat 2 %) x)\n    )","user":"5f77890ae4b02876ed9fd0b9"},{"problem":32,"code":"(fn [seqs] \n  (let [out ()]\n  \t(apply concat (map #(conj out % %) seqs))))","user":"53fdbe0fe4b0de5c418485e9"},{"problem":32,"code":"(fn dupe [a-seq] (reduce #(conj (conj %1 %2) %2) [] a-seq))","user":"51d46747e4b013d740b70de3"},{"problem":32,"code":"(fn duplicate-seq [list]\n  (mapcat identity\n    (for [item list]\n      [item item])))","user":"575683aee4b02ea1147992dc"},{"code":"(fn dup-coll [xs]\r\n  (mapcat (fn [x] (seq (list x x)))\r\n          xs))","problem":32,"user":"4e7dfd48535db169f9c796fa"},{"problem":32,"code":"#(apply concat (map (fn [x] (take 2 (repeat x))) %1))","user":"4fe98e07e4b0547ebccb2464"},{"code":"(fn dup [l]\n  (if (empty? l)\n    l\n    (concat (list (first l) (first l)) (dup (rest l)))))","problem":32,"user":"5368a275e4b0243289761e8f"},{"code":"(fn [xs] (reverse (reduce #(cons %2 (cons %2 %)) () xs )))","problem":32,"user":"51897709e4b0288ada3dbdaa"},{"problem":32,"code":"#(mapcat identity (for [x %] (vector x x)))","user":"5dce0151e4b0b296f82db5b5"},{"problem":32,"code":"(fn dup [coll]\n  (if (nil? coll)\n    coll\n    (concat (list (first coll)\n                  (first coll))\n            (dup (next coll)))))","user":"577b4440e4b0d3393e5deb0f"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (mapcat (partial repeat 2))\n       (into (empty coll))))","user":"5629dfaae4b00e49c7cb4813"},{"problem":32,"code":"(fn dup [xs]\n  (mapcat (fn[x] [x x]) xs))","user":"4dd76bf9535d2dad7130b5d1"},{"problem":32,"code":"#(reduce (fn f [a b] (conj a b b)) [] %)","user":"55df2752e4b050e68259b3ed"},{"problem":32,"code":"(fn x [l]\n  (cond\n   \t(empty? l) l\n   \t:else (cons (first l)(cons (first l) (x (rest l))))\n   ))","user":"56df6351e4b0ca2494a095f3"},{"problem":32,"code":"(fn doubleup [[first & rest]] (when first (cons first (cons first (lazy-seq (doubleup rest))))))","user":"53d28800e4b00fb29b22131e"},{"code":";reduce #(conj %1 %2 %2) []\n\n#(interleave % %)","problem":32,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn  [seq]\n    (loop [coll seq\n           accum [] ]\n      (if (empty? coll)\n        accum\n        ( recur (rest coll)(concat accum (vector (first coll)(first coll))) )\n      )\n    )\n  )","problem":32,"user":"52dced9de4b09f7907dd13d7"},{"code":"(fn [xs] (interleave xs xs))","problem":32,"user":"4daf36c2edd6309eace4d175"},{"code":"#(for[x % y [1 2]] x)","problem":32,"user":"51623490e4b009fba0926e42"},{"problem":32,"code":"(fn [x] (sort (apply conj x x)))","user":"5713f874e4b07c98581c3ab1"},{"code":"(fn [lst] (reduce concat (map #(list %1 %1) lst)))","problem":32,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn [ls]\n  (reverse\n    (reduce\n      (fn [acc obj]\n        (conj acc obj obj))\n      '()\n      ls)))","problem":32,"user":"50f1dedbe4b0897c4366dcd8"},{"code":"(fn [x] (seq (reduce\n (fn [col y]\n   (conj col y y))\n '[]\n x)))","problem":32,"user":"51547920e4b084ca81ee2e1c"},{"code":"(fn dup [x]\n  (if (not(empty? x))\n    (conj\n      (conj (dup (rest x)) (first x))\n      (first x)\n        )))","problem":32,"user":"4f566178e4b0a7574ea71820"},{"problem":32,"code":"(fn [c] (reduce #(conj (conj %1 %2) %2) [] c))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":32,"code":"(fn [sec] (let [inter (fn [sec1 sec2]\n              (let [pair (fn [x y] (vector x y))]\n                (mapcat #(pair %1 %2) sec1 sec2)))]\n  (inter sec sec)))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":32,"code":"#(reverse(reduce (fn [a b] (conj a b b)) '() %))","user":"57da5fc4e4b0bd073c20240f"},{"problem":32,"code":"(fn [lst]\n  (apply concat (for [x lst] [x x])))","user":"5b58d012e4b02d533a91bd71"},{"problem":32,"code":"reduce \n  #(conj (vec %1) %2 %2)\n  []","user":"55c3149de4b0e31453f64987"},{"problem":32,"code":"(fn [c]\n  (loop [[head & tail] c\n          s '()]\n    (if (= head nil)\n      (reverse s)\n      (recur tail (conj s head head)))))","user":"5701f886e4b08d47c97781d9"},{"code":"(fn [s]\n  (loop [s s a ()]\n    (if (empty? s) (reverse a) (recur (rest s) (cons (first s) (cons (first s) a))))))","problem":32,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(partial reduce #(conj %1 %2 %2) [])","problem":32,"user":"4e6fa38b535d5021c1a89622"},{"problem":32,"code":"(fn dup [l]\n  (if (empty? l) '()\n    (let [x (first l)] (concat [x x] (dup (rest l))))))","user":"5d41f428e4b05dd059a5437b"},{"problem":32,"code":"(fn  [lst] (reverse (reduce  (fn [acc elem] (cons  elem (cons elem acc))) \n                     '() \n                     lst)))","user":"5f1328dee4b091ba50b4dbb1"},{"problem":32,"code":"(fn [coll] (reduce #(conj %1 %2 %2) [] coll\n                   )\n  )","user":"56a69451e4b0542e1f8d14ec"},{"problem":32,"code":"(fn [c] (reduce #(concat %1 [%2 %2] ) [] c))","user":"55a31c66e4b0acc240e31530"},{"problem":32,"code":"(fn dup [sequ]\n  (loop [s sequ du []]\n    (if (empty? s)\n      (seq du)\n      (recur (rest s) (conj du (first s) (first s)) ) ) ) )","user":"5c7d5a0ce4b0d597f478caab"},{"problem":32,"code":"#(reduce (fn [a x] (conj a x x)) [] %)","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":32,"code":"(fn [input]\n  (loop [in input\n          out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n        (conj out (first in) (first in))))))","user":"5574c172e4b05c286339e059"},{"problem":32,"code":"(fn m [x]\n  (mapcat (fn [y] (list y y))x))","user":"5cc28739e4b0ccb0619627d8"},{"code":"(fn [arr] (sort (concat arr arr)))","problem":32,"user":"52a5d1f3e4b0c58976d9abf1"},{"problem":32,"code":"(fn [x] (apply concat (map vector x x)))","user":"54570c87e4b080a794c2c887"},{"problem":32,"code":"(fn dup [lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst) (reverse result)\n                     (recur (next lst) (cons (first lst)(cons (first lst)result))))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn [x]\n (reverse (reduce into (map #(take 2(repeat %))x))))","problem":32,"user":"507e5cf8e4b085af06e3afd1"},{"problem":32,"code":"#(reduce concat '() (map (fn [args] (let [newseq []] (conj newseq args args))) %))","user":"57a99d3fe4b0a96607956231"},{"problem":32,"code":"(fn [x]\n  (reduce\n\t(fn [acc b]\n      (concat acc [b b]))\n   []\n   x))","user":"5b7f2d75e4b047b03b203768"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll result []]\n    (if-let [head (first coll)]\n      (recur (rest coll) (conj (conj result head) head))\n      result)))","user":"566b57e9e4b0a866af6896ad"},{"code":"(fn [v] (reduce #(conj %1 %2 %2) [] v) )","problem":32,"user":"531f0a26e4b08068f379edbf"},{"code":"(fn [x]\n  (sort (concat x x)))","problem":32,"user":"5028bce0e4b01614d1633ffb"},{"code":"(let [double-cons (fn [tail head] (cons head (cons head tail)))]\n  (fn [l] (reverse (reduce double-cons (empty l) l))))","problem":32,"user":"52692e3be4b03e8d9a4a71d6"},{"code":"#(mapcat (partial repeat 2) %1)","problem":32,"user":"4fad33e8e4b081705acca236"},{"problem":32,"code":"(fn [x]  (reduce #(conj %1 %2 %2) [] x))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"#(reduce (fn [acc x] (concat acc [x] [x])) [] %)","problem":32,"user":"52452225e4b0d8acf9ed6ae6"},{"code":"mapcat (fn [x] (vector x x))","problem":32,"user":"525873e8e4b0cb4875a45cb2"},{"code":"(fn doubleCons [seq]\n  (let [one (first seq)]\n  (if (empty? seq)\n    nil\n    (cons one (cons one (doubleCons (rest seq)))))))","problem":32,"user":"4f761a78e4b0fbe0118ec56c"},{"problem":32,"code":"(fn dup\n    [args]\n    (loop [ result '()\n            data   args]\n      (if (empty? data)\n        (reverse result)\n        (let  [ head  (first  data)\n                tail  (rest   data)]\n            (recur  (cons head (cons head result))\n                    tail))))\n   )","user":"55ee84c0e4b0121d4835fdf0"},{"problem":32,"code":"(fn [v]\n  (for[x v\n       y (range 2)]\n    x))","user":"5b198eace4b03cfeda66ecbb"},{"problem":32,"code":"(fn[l](mapcat #(list % %)l))","user":"5505d137e4b086ebe8a79c8c"},{"problem":32,"code":"(fn [x] (mapcat (fn [a b] [a b]) x x))","user":"58bc6a88e4b0888cdc949d16"},{"problem":32,"code":"(fn [tseq] \n  (loop [remain tseq result []]\n    (if (empty? remain)\n       result\n       (recur (drop 1 remain) (conj result (first remain) (first remain))))))","user":"56351709e4b0bfe05bf117c2"},{"problem":32,"code":"(fn [s] (mapcat #(list %1 %1 ) s))","user":"560b483ee4b05f002753df16"},{"code":"(fn[x] (interleave x x))","problem":32,"user":"52810225e4b0757a1b171418"},{"problem":32,"code":"(fn [sequence]\n    (reduce concat (map #(take 2 (repeat %)) sequence)))","user":"5e71b6e7e4b085ba37836dbe"},{"code":"(fn [s]\n  (reduce\n   (fn [acc e] (conj acc e e))\n   []\n   s))","problem":32,"user":"521ed5b4e4b0e6c71e0c0bc0"},{"code":"(fn [coll]\r\n  (apply concat\r\n    (map (fn [x] (list x x)) coll)))","problem":32,"user":"4ff2ee54e4b0678c553fc340"},{"problem":32,"code":"(fn [s] ((fn [s r] (if (empty? s) (reverse r) (recur (rest s) (cons (first s) (cons (first s) r))))) (apply list s) nil))","user":"58fdd7b7e4b0438e51c2cfc0"},{"problem":32,"code":"(fn [col] (mapcat (fn [item] (repeat 2 item) ) col))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn [seq] (reduce (fn [l [a b]] (conj l a b)) (map (fn [x] [x x]) seq)))","problem":32,"user":"4f16ef8a535d64f603146451"},{"code":"#(reduce concat [] (map (fn [x] (repeat 2 x)) %))","problem":32,"user":"4ee40938535d10e5ff6f5375"},{"problem":32,"code":";reduce #(concat %1 [%2 %2]) []\n\n;mapcat #(list % %)\n\n;#(interleave % %)\n\nreduce #(conj %1 %2 %2) []","user":"53838b9ee4b06839e8705ee1"},{"problem":32,"code":"#(reduce (fn [t k] (conj t k k)) '() (reverse %))","user":"543823f1e4b032a45b869311"},{"problem":32,"code":"(fn [s]\n  ((fn [acc s]\n    (if (empty? s)\n      acc\n      (recur (concat acc (list (first s) (first s))) (rest s))))\n   '() s))","user":"54d87b54e4b0a52adc2e2038"},{"problem":32,"code":"(fn [s] \n  (reduce (fn [r v]\n            (into r [v v])) [] s))","user":"574e7be7e4b02ea114799242"},{"problem":32,"code":"(fn [xs] (apply concat (map #(vector % %) xs)))","user":"54d03026e4b018d918be98de"},{"problem":32,"code":"(fn [s]\n(reduce\n  (fn [xs x] (conj xs x x))\n  []\n  s))","user":"5eccbce6e4b016b56eae058e"},{"problem":32,"code":"(fn [i] (apply concat (map #(take 2 (repeat %)) i)))","user":"57dd651ee4b0bd073c202441"},{"code":"(fn [a-seq] (apply concat (map (partial repeat 2) a-seq)))","problem":32,"user":"52d885afe4b09f7907dd1398"},{"problem":32,"code":"(fn [sqn]\n  (apply concat (map #(list % %) sqn)))","user":"5cf895efe4b0b71b1d808a85"},{"problem":32,"code":"(fn ans-32 [arr]\n  (reduce concat (map #(conj [] % %) arr)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":32,"code":"(fn [sq] (reduce (fn [acc, e] (conj acc e e) ) [] sq))","user":"54b66089e4b05787c3b163ba"},{"problem":32,"code":"(fn [s]\n  (if (empty? s)\n    '()\n    (loop [fst (first s)\n           rst (rest s)\n           result []]\n      (if (empty? rst)\n        (conj result fst fst)\n        (recur (first rst) (rest rst) (conj result fst fst))))))","user":"56ee0691e4b04a395b9a044c"},{"problem":32,"code":"(fn [coll]\n  (let [f* (fn [acc v] (conj acc v v))]\n    (reduce f* [] coll)))","user":"5954edcbe4b066ee0a44af15"},{"problem":32,"code":"(fn [xs] (reduce #(apply conj %1 (list %2 %2)) [] xs))","user":"5d6537fce4b0db5d338d15cf"},{"code":"(comp \n  (partial apply concat)\n  (partial map #(list % %))\n)","problem":32,"user":"53979a87e4b0b51d73faaef0"},{"problem":32,"code":"(fn [in] (reverse (reduce (fn [x y] (conj x y y)) '() in)))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":32,"code":"(fn [coll] (loop [c coll r []] (if (empty? c) r (recur (rest c) (conj (conj r (first c)) (first c))))))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn dupe [x] (if (empty? x) '()\n  (conj (dupe (rest x)) (first x) (first x))))","problem":32,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":32,"code":"(fn \n  [s]\n   (mapcat #(list % %) s))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":32,"code":"#( sort (concat % %) )","user":"5602842de4b04bb52996e1a1"},{"problem":32,"code":"(fn [x]\n  (loop [coll x,\n         accumulator []]\n    (if (empty? coll)\n      accumulator\n      (recur (rest coll) (conj (conj accumulator (first coll)) (first coll)))\n    )\n   )\n)","user":"543496e1e4b0b6b47310fcf2"},{"problem":32,"code":"(fn [x]\n    (loop [coll     x\n           new-coll []]\n          (let [element (first coll)]\n            (if (nil? element)\n              (seq new-coll)\n              (recur (rest coll) (conj new-coll element element))))))","user":"548ce2dbe4b0e286459a1212"},{"problem":32,"code":"(fn [x] (->> x (map #(list % %)) (apply concat)))","user":"560434cfe4b0c80df0ca2658"},{"code":"#(reduce (fn [l e] (conj l e e)) [] %)","problem":32,"user":"4e7e93f5535db169f9c7971a"},{"problem":32,"code":"(fn [n]\n  (interleave n n))","user":"5a99b844e4b0d174b936c7ab"},{"code":"(fn double-element [coll]\n   (when-let [[x & xs] (not-empty coll)]\n     (conj (double-element xs) x x )))","problem":32,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":32,"code":"(fn [l]\n  (interleave l l))","user":"5703cb87e4b08d47c97781f9"},{"code":"(fn [col] (sort (concat col col)))","problem":32,"user":"53286389e4b09d4e7a9b5504"},{"problem":32,"code":"( fn [in] (sort (loop [result '() x 0   num (count in)] (if (= num x) result (recur (conj result (nth in x) (nth in x)) (inc x)   num)))))","user":"548698b4e4b0e286459a11bd"},{"code":"#(loop [f (first %)\n        r (rest %)\n        l %]\n      (if (not (= f nil))\n        (do (recur (first r) (rest r) (conj l f)))\n        (sort l)))","problem":32,"user":"4e9e7ce3535dbda64a6f6b98"},{"code":"(let\n    [f (fn f [a, b] (conj a b b))]\n    (fn [x]\n      (reduce f [] x))\n    )","problem":32,"user":"52cdc676e4b07d0d72b2737f"},{"problem":32,"code":"(fn [col]\n    (mapcat identity (map #(concat % %) (partition 1 col)))\n)","user":"5524f21fe4b0882d96d091c7"},{"problem":32,"code":"(fn [col]\n  (reduce\n   (fn [acc e]\n     (concat acc (repeat 2 e)))\n   '()\n   col))","user":"540d5085e4b0addc1aec670e"},{"problem":32,"code":"(fn [seq]\n  (mapcat vector seq seq))","user":"5f63d933e4b02876ed9fd018"},{"code":"reduce (fn [col val] (conj col val val)) []","problem":32,"user":"4fb01e53e4b081705acca260"},{"code":"(partial reduce #(conj (conj %1 %2) %2) [])","problem":32,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn dup[s]\n  (if (nil? s)\n    '()\n    (cons (first s) (cons (first s) (dup (next s))))))","problem":32,"user":"4e50c894535dc968683fc4ee"},{"problem":32,"code":"(fn [s]\n  (loop [xs s result []]\n    (if (empty? xs)\n      result\n      (recur (next xs) (conj result (first xs) (first xs))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":32,"code":"(fn duplicate [x]\n  (mapcat #(repeat 2 %) x))","user":"5852801ee4b0b7285a6f4eb1"},{"problem":32,"code":"(fn\n    [s]\n    (reduce #(conj %1 %2 %2) [] s))","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":32,"code":"(fn [s] \n  (reduce (fn [acc e] (conj acc e e)) [] s)\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"code":"(fn dup-seq [lst]\n  (apply concat (map #(vec [% %]) lst)))","problem":32,"user":"50763574e4b0a894bb95bf3d"},{"problem":32,"code":"(fn [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))","user":"5785de4ce4b0ebec4cfb74e6"},{"code":"(fn dobla [x]\n  (if (= (count x) 1)\n     (list (first x) (first x))    \n     (cons (first x) (cons (first x) \n          (dobla (next x))))))","problem":32,"user":"4f04a06d535dcb61093f6bd9"},{"problem":32,"code":"(fn [ps]\n  (reverse (reduce into (map #(list % %) ps))))","user":"58969420e4b00487982d52a4"},{"code":"(fn [coll] (reduce (fn [x y] (concat x [y y])) '() coll))","problem":32,"user":"4e6e97ca535d5021c1a8960c"},{"problem":32,"code":"(fn dup [x] ( reduce (fn [init,y] (conj (conj init y) y )) [] x ))","user":"55d35a01e4b0e31453f64a63"},{"problem":32,"code":"(fn [lis]\n  (loop [asd lis, result lis]\n    (if(empty? asd)\n      (sort result)\n      (recur (rest asd) (cons (first asd) result)))))","user":"5191a763e4b0d428d29dc1b4"},{"problem":32,"code":"(fn [x] (reduce (fn [memo a] (conj memo a a)) [] x))","user":"55d44af5e4b0e31453f64a74"},{"problem":32,"code":"#(reduce (fn [acc val] (concat acc (list val val))) '() (seq %))","user":"5fdbde92e4b05ac5b16ea137"},{"problem":32,"code":"(fn duplicate [x] \n  (if (= x []) '() \n    (let [h (first x)]\n      (concat (list h h) (duplicate (rest x))))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))","problem":32,"user":"51ce1320e4b0e42293a22551"},{"problem":32,"code":"#(->> %\n      (replicate 2)\n      (apply interleave))","user":"60aecd73e4b00e9e6653c49a"},{"problem":32,"code":"(fn [x] (reduce (fn [acc y] (conj acc y y)) [] x))","user":"56946d43e4b0dcc4269f411e"},{"problem":32,"code":"(fn me [val]\n  (if-not (seq val)\n    '()\n    (cons (first val) (cons (first val) (me (rest val))))))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn duplicate\n  [xs]\n  (lazy-seq (when (seq xs) (cons (first xs) (cons (first xs) (duplicate (rest xs)))))))","problem":32,"user":"53028354e4b0d8b024fd372b"},{"code":"#(reduce into (for [x %] [x x]))","problem":32,"user":"51843616e4b02826a645f398"},{"problem":32,"code":"(fn [coll]\n  (let [one (reduce #(conj %1 (repeat 2 %2)) [] coll)\n        two (mapcat identity one )]\n    two))","user":"57227f10e4b0c5bde472c0cd"},{"problem":32,"code":"(fn duplicate\n  ([s] (duplicate s nil))\n  ([s f]\n   (if (not (empty? s))\n     (let [curr-val (first s)]\n       (recur (rest s) (conj f curr-val curr-val)))\n     (reverse f))))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn [l] (reduce #(into %1 [%2 %2]) '[] l))","problem":32,"user":"4f8ab084e4b02e764a0a5171"},{"problem":32,"code":"(fn duplicate\n  [coll]\n  (if (empty? coll)\n    '()\n    (concat (list (first coll) (first coll)) (duplicate (rest coll)))))","user":"545d881de4b01be26fd7466f"},{"code":"(fn duplicate [s]\n  (let [head (first s) tail (rest s)]\n    (cond \n     (empty? tail) (list head head)\n     :else (concat (list head head) (duplicate tail)))))","problem":32,"user":"525aa499e4b0cb4875a45cf7"},{"problem":32,"code":"(fn duppy [v]\n  (mapcat list v v))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":32,"code":"#(reduce (fn [acc cur] (conj (conj acc cur) cur)) [] %)","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [x]\n  (reduce (fn [acc e]\n            (conj acc e e))\n          [] x))","problem":32,"user":"52d6664be4b09f7907dd1359"},{"problem":32,"code":"(fn [coll]\n   (reduce #(conj (conj %1 %2) %2) [] coll))","user":"56c60b36e4b05cc29241eead"},{"problem":32,"code":"(fn dupl [xs] (mapcat #(list % %) xs))","user":"5776903ee4b0979f8965163b"},{"problem":32,"code":"(fn [x] (reverse (reduce #(conj % %2 %2) () x)))","user":"6078ce29e4b0a637ed78035a"},{"code":"(fn duplicate [sq]\r\n  (reverse\r\n    (reduce (fn [coll x]\r\n              (if (empty? coll)\r\n                (list x x)\r\n                (cons x (cons x coll))))\r\n            []\r\n            sq)))","problem":32,"user":"4f71db68e4b07046d9f4f015"},{"code":"(fn [x] (mapcat #(repeat 2 %) x))","problem":32,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":32,"code":"#(reduce (fn [a b] (concat a (list b b)))\n         nil\n         %)","user":"568e1871e4b0dcc4269f40cc"},{"problem":32,"code":"(fn dup [xs]\n  (if (not (seq xs)) []\n      (lazy-seq (cons (first xs)\n                  (cons (first xs)\n                    (dup (rest xs)))))))","user":"51e24905e4b01e519814642e"},{"code":"(fn [lst]\n  (loop [ovec lst nvec '() counter 0]\n    (if (= counter (count ovec))\n       nvec\n       (recur ovec (concat (concat nvec (list (ovec counter))) (list (ovec counter))) (inc counter))\n     )\n  )\n)","problem":32,"user":"4e8b73e4535d65386fec2120"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc el]\n            (conj acc el el))\n          []\n          s))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [lst]\n\t(apply concat (map #(repeat 2 %) lst)))","problem":32,"user":"537d4a69e4b06839e8705e8a"},{"code":"(fn duseq [lst]\n  (loop [lst,lst res,[]]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (conj res (first lst) (first lst))))))","problem":32,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":32,"code":"(fn duplicate-seq\n  [aseq]\n  (reduce\n    (fn [out x] (conj out x x)) []  aseq))","user":"5d110abee4b02c15ef021983"},{"problem":32,"code":"#((comp reverse reduce) (fn [x1 x2] \n                          (conj x1 x2 x2)) '() %1)","user":"5fb3a096e4b08cb800c85b35"},{"code":"(fn [x]\n  (mapcat (fn [y] \n     (list y y) ) \n  x )\n)","problem":32,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn [x] (mapcat #(into % %) (partition 1 x)))","problem":32,"user":"510ec1bce4b07438aa321461"},{"problem":32,"code":"(fn dupl [x] \n  (if (> (count x) 0)\n    (concat [(first x) (first x)] (dupl (rest x)))\n    x\n   )\n )","user":"548018e3e4b0c51c1f4d7330"},{"code":"#(reverse \r\n  (reduce \r\n    (fn [a b] \r\n      (cons b (cons b a)))\r\n  () %))","problem":32,"user":"4ef2da4f535dced4c769f224"},{"problem":32,"code":"(fn duplicate [x] \n   (loop [c x r '()]\n      (if (empty? c)\n         (reverse r)\n         (recur (rest c) (conj (conj r (first c)) (first c)))\n         )\n                          \n))","user":"562eeba2e4b0ab312c17ebc1"},{"problem":32,"code":"#(reduce (fn [acc e] (concat acc [e e])) [] %)","user":"52a803cee4b0c58976d9ac26"},{"problem":32,"code":"(fn [s]\n  (loop [r s\n        ret []]\n    (if (empty? r)\n      (apply list ret)\n      (recur \n        (rest r) \n        (apply conj ret (repeat 2 (first r)))\n      )\n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"problem":32,"code":"(fn thirtytwo [seq]\n  (apply concat\n         (#(map (fn [x]\n                 (list x x))\n               %) seq)))","user":"5dbf6016e4b0e59a23173d79"},{"code":"(fn [s]\n  (mapcat #(repeat 2 %) s)\n  )","problem":32,"user":"5029f263e4b023940c84aa45"},{"code":"(fn [L] (mapcat (fn [x] [x x]) L))","problem":32,"user":"52bf936ee4b07a9af579233b"},{"problem":32,"code":"(fn [s] (->> s (map #(list % %)) (apply concat)))","user":"54d412e2e4b0a52adc2e1ffe"},{"problem":32,"code":"reduce\n    #(conj %1 %2 %2)\n    []","user":"57ae3345e4b0fbc9809a271e"},{"problem":32,"code":"(fn [seq] (reduce concat (map #(take 2 (repeat %)) seq)))","user":"5919d209e4b09b4ee5954bcc"},{"problem":32,"code":"(fn duplicate [coll]\n\t(interleave coll coll)\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":32,"code":"reduce #(concat %1 [%2 %2] ) []","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [a] (mapcat #(list % %) a))","problem":32,"user":"4e0359e8535d04ed9115e792"},{"problem":32,"code":"(fn [с]\n  (reduce #(conj %1 %2 %2) [] с))","user":"545f737ce4b01be26fd74688"},{"problem":32,"code":"#(reduce\n (fn [acc, val]\n  (conj (conj acc val) val)\n )\n []\n %\n)","user":"5c0d0537e4b0bdcf453d173d"},{"problem":32,"code":";;(fn duplicate\n;;  [collection]\n;;  (reduce (fn [c val]\n;;            (conj c val val)) [] collection))\nreduce #(conj %1 %2 %2) []","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [coll]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() (seq coll))))","problem":32,"user":"513fb358e4b00f13ea1bd893"},{"problem":32,"code":"reduce (fn [acc elem]\n             (concat acc [elem elem])) '()","user":"576a42e6e4b0a07e8fc1810e"},{"code":";(fn [s] (reduce #(conj %1 %2 %2) [] s))\n#(interleave % %)","problem":32,"user":"4eb2e6ca535d7eef3080734f"},{"problem":32,"code":"(fn [items]\n (mapcat #(repeat 2 %) items)\n)","user":"5fe876ade4b05ac5b16ea195"},{"problem":32,"code":"(fn [x] \n  (loop [x x z []]\n    (if (empty? x) z\n      (recur (rest x) (conj z (first x) (first x))))))","user":"5839f079e4b089d5ab817d48"},{"code":"(fn dup [l]\n  (reduce\n   (fn [res el] (conj res el el))\n   []\n   l))","problem":32,"user":"50c13f77e4b096f585049c3b"},{"problem":32,"code":"(fn [a-seq]\n  (let [r (fn [acc e]\n              (concat acc (repeat 2 e)))]\n    (reduce r [] a-seq)))","user":"53fd0a22e4b0de5c418485e1"},{"problem":32,"code":"(fn [col]\n  (mapcat #(vector %1 %2) col col))","user":"5d13af73e4b0902706380dbe"},{"problem":32,"code":"(fn [x]\n    (let [iter (fn [seq new-seq]\n                 (let [a (first seq)\n                       b (rest seq)]\n                   (if (empty? seq)\n                     new-seq\n                     (recur b (conj new-seq a a)))))]\n      (reverse (iter x '()))))","user":"55d29fb6e4b0e31453f64a59"},{"code":"(fn f [seq]\n  (if (= (first seq) nil)\n    nil\n    (cons (first seq) (cons (first seq) (f (rest seq))))\n  )\n)","problem":32,"user":"4f039a8b535dcb61093f6b36"},{"code":"(fn zp [x] (cond (empty? x) [] :else (concat [(first x)(first x)] (zp (rest x)))))","problem":32,"user":"52153bdde4b0961f15ac4daa"},{"problem":32,"code":"(fn dup-seq [coll]\n  (reverse\n   (reduce (fn [ret x]\n             (conj (conj ret x) x))\n           '() coll)))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":32,"code":"(fn dup [coll]\n  (reduce concat (map #(repeat 2 %) coll)))","user":"53d70f3be4b0e771c302545f"},{"problem":32,"code":"(fn f[x] (if (= 0 (count x)) () (cons (first x) (cons (first x) (f (rest x))))))","user":"54283a7ae4b01498b1a71b2f"},{"problem":32,"code":"#(mapcat (fn [x]  [x x])  %)","user":"5785de43e4b0ebec4cfb74e5"},{"problem":32,"code":"#(loop [coll % results '()]\n   (if (empty? coll)\n     results\n     (let [[head & tail] coll]\n       (recur tail (concat results [head head])))))","user":"55e2f502e4b050e68259b43c"},{"code":"(fn dup [s]\n  (apply concat (map #(list % %) s)))","problem":32,"user":"4f2b0951e4b0d6649770a045"},{"problem":32,"code":"(fn [l]\n  (mapcat (fn [a] [a a]) l))","user":"5fe5a64de4b05ac5b16ea187"},{"problem":32,"code":"(fn duplicate-sequence [s] (let [v []] \n                               ((fn duplicate [k,s] (if (= s '()) \n                                                         k \n                                                         (duplicate (conj k (first s) (first s)) (rest s)))) v s)))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":32,"code":"#(reduce (\n         fn [l r] (into l (repeat 2 r)))\n         []\n         %)","user":"5ecf4ee4e4b016b56eae05a6"},{"problem":32,"code":"(comp \n (partial reduce #(conj %1 %2 %2) '()) \n reverse)","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":32,"code":"(fn [l]\n    (reduce concat (map (fn [x] [x x]) l))\n  )","user":"53a68c5ae4b0ef122a8689c8"},{"problem":32,"code":"(fn [lst] (reduce (fn [acc ele] (into acc (list ele ele))) [] lst))","user":"5f9567cce4b0715f5002d7c7"},{"code":"#(mapcat (fn [c] (list c c)) %)","problem":32,"user":"5035503de4b0ed9c821488f8"},{"code":"(partial mapcat (juxt identity identity))","problem":32,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":32,"code":"; first-attempt:\n;(fn cope [coll] \n;  (if (empty? coll) \n;    [] \n;    (cons (first coll) (cons (first coll) (cope (rest coll))))))\n\n#(interleave % %)","user":"550d9452e4b06e50f9beb15d"},{"code":"(fn [x] (let [vec1 x\n              vec2 x]\n          (seq (interleave vec1 vec2))))","problem":32,"user":"51bf0ccee4b013aa0d74b811"},{"problem":32,"code":"(fn dd\n  ([l] (dd l []))\n  ([l res] \n        (if (empty? l)\n          res\n          (dd (rest l) (into  res (repeat 2 (first l)) )))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":32,"code":"#(for [n % _ [1 2]] n)","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":32,"code":"#(reduce into (map (fn [a] [a a] ) % ))","user":"5517331ae4b06a49daca83c0"},{"problem":32,"code":"(fn [data] (sort (concat data data)))","user":"5a4ec4f0e4b05d388ecb6bc2"},{"problem":32,"code":"#(apply concat (map (fn [e] [e e]) %))","user":"54194782e4b01498b1a71a29"},{"code":"#(loop [n 0 acc '()]\n    (if (= (count %) n)\n      acc\n      (recur (inc n) (concat acc (list (nth % n) (nth % n))))))","problem":32,"user":"4f038567535dcb61093f6b0c"},{"problem":32,"code":"(fn [se] (mapcat (fn [s] (repeat 2 s)) se))","user":"593c653de4b069cdc2982b8f"},{"problem":32,"code":"reduce #(concat %1 (take 2 (cycle (list %2)))) ()","user":"5d83b9aae4b0915913b1d386"},{"problem":32,"code":"(fn [x] (reduce #(-> %1 (conj %2) (conj %2)) [] x))","user":"5812eb8fe4b0f478707a0602"},{"problem":32,"code":"(fn duplicate-seq [l]\n  (reduce concat (map #(repeat 2 %) l)))","user":"52b9e920e4b07a9af57922c9"},{"problem":32,"code":"#(loop [l %\n        acc '()]\n   (if (empty? l)\n     (reverse acc)\n     (recur (rest l) (conj acc (first l) (first l)))))","user":"5f7603a8e4b02876ed9fd0ad"},{"code":"(fn dup [coll]\n  (if-not (seq coll)\n    nil\n    (concat (repeat 2 (first coll)) (dup (rest coll)))))","problem":32,"user":"4ee8b9c9535d93acb0a66884"},{"problem":32,"code":"(fn duplicate-seq [input]\n  (->> input\n       (map #(list %, %))\n       (reduce concat)))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"#(reduce concat (map (fn [x] (list x x)) %))\n;reduce #(conj %1 %2 %2) []","problem":32,"user":"533b9cace4b0e30313ee6cd1"},{"problem":32,"code":"(fn [s]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))","user":"53b85932e4b047364c0444db"},{"problem":32,"code":"mapcat #(take 2 (iterate identity %))","user":"562d869be4b0a45d2ff8301f"},{"problem":32,"code":"(fn\n  [s]\n  (loop [se s dup nil]\n    (if (empty? se)\n      (reverse dup)\n      (recur (rest se) (cons (first se) (cons (first se) dup))))))","user":"581b4d3be4b04b46fc4b0ec6"},{"problem":32,"code":"(fn [xs]\n     (interleave xs xs))","user":"5f6580e7e4b02876ed9fd023"},{"problem":32,"code":"#((fn dupitInt[acc, x]\n     (if (empty? x)\n       (seq acc)\n       (dupitInt\n        (conj (conj (vec acc) (first x)) (first x))\n        (rest x))))\n\n  '() %)","user":"595ed97fe4b066ee0a44b051"},{"problem":32,"code":"mapcat (fn [v] [v v])","user":"57acb156e4b0b8559636fc8d"},{"problem":32,"code":"(fn [l] (reduce #(conj %1 %2 %2) '() (reverse l)))","user":"5b59d176e4b02d533a91bd86"},{"problem":32,"code":"(fn [lst ](reverse (reduce #(conj %1 %2 %2) '()  (seq lst))))","user":"5f558a76e4b0a0bc16850a84"},{"code":"(fn prob32 [solved remaining]\n  (if (= (count remaining) 0)\n    solved\n    ( prob32 (conj solved (first remaining) ( first remaining)) (rest remaining)))) []","problem":32,"user":"512f06c5e4b0762be4c7aad7"},{"code":"; interleave solution based on immo's solution\n#(interleave % %)\n\n; original solution\n;(fn dup\n;  [s]\n;    (reverse\n;      (reduce \n;        #(cons %2 (cons %2 %1))\n;        '() s)))","problem":32,"user":"4fea7594e4b0140c20fb9c06"},{"problem":32,"code":"(fn duplicate_elems [lst]\n   (apply concat (map \n    (fn [elem] (list elem elem))\n    lst)))","user":"60a7c55be4b00e9e6653c468"},{"problem":32,"code":"#(loop [ds '[]\n        col %]\n   (if (next col)\n     (recur (conj ds (first col) (first col)) (next col))\n     (conj ds (first col) (first col))))","user":"4ec549e1535d6d7199dd3691"},{"code":"#(reverse (reduce (fn [a x] (conj (conj a x) x)) () %))","problem":32,"user":"4eee5c7f535d93acb0a668c6"},{"code":"(fn [seq] (loop [ll seq, result nil]\r\n           (if (empty? ll)\r\n                result\r\n                (recur (rest ll) (concat result (list (first ll) (first ll)))))))","problem":32,"user":"4fd0cb0ee4b04c3a95aa0407"},{"problem":32,"code":"(fn [x] (reduce #(apply conj %1 (list %2 %2)) [] x))","user":"57c500f9e4b05aa3c4741cda"},{"problem":32,"code":"#((comp sort concat) % %)","user":"5e8f87c7e4b0cb0169546342"},{"code":"(fn [seq]\n    (reverse (reduce (fn [col ele]\n                       (conj col ele ele))\n                     '() seq)))","problem":32,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn [coll] (mapcat #(repeat 2 %) coll))","problem":32,"user":"4e6daa22535d5021c1a895ef"},{"problem":32,"code":"(fn [v] (loop [x () y v] (if (empty? y) x (recur (let [n (last y)] (conj x n n)) (butlast y)))))","user":"56bdda49e4b0f26550335977"},{"code":"mapcat (fn [x](repeat 2 x))","problem":32,"user":"4de6f806535d08e6dec9fdf7"},{"problem":32,"code":"(fn [l] (apply concat (map (fn[x] [x x]) l)))","user":"53e76728e4b036ad0777e47c"},{"code":"#(reverse (reduce (fn [val a](conj val a a)) (list) %1))","problem":32,"user":"4fd15334e4b04c3a95aa040d"},{"problem":32,"code":"(fn [s]\n    (letfn [(dpsq [s result]\n              (if (seq s)\n                (let [f (first s)]\n                  (recur (rest s) (conj result f f)))\n                result))]\n      (dpsq s [])))","user":"55ac07afe4b03311e7b7328f"},{"problem":32,"code":"(fn my-double [xs] (if (empty? xs) xs (concat (list (first xs) (first xs)) (my-double (rest xs)))))","user":"6028365be4b0d5df2af22242"},{"problem":32,"code":"(fn duplicate\n  [param]\n  (if (empty? (rest param))\n    (list (first param) (first param))\n    (conj (duplicate (rest param)) (first param) (first param))))","user":"55dfac5fe4b050e68259b3f9"},{"code":"(fn [list]\r\n  \t(list* (reduce #(conj %1 %2 %2) [] list)))","problem":32,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn  [seq]\n  (loop [s seq\n         res []]\n    (let [res (conj res (first s) (first s))\n          tail (next s)]\n      (if-not tail\n      res\n      (recur tail res)))))","problem":32,"user":"516081e7e4b009fba0926e28"},{"problem":32,"code":"(fn [XS]\n\t(let [func (fn iter [xs seq]\n\t\t(if (empty? xs)\n\t\t\tseq\n\t\t\t(iter (rest xs) (conj (conj seq (first xs)) (first xs)))))]\n\t(reverse (func XS '()))))","user":"5583888ae4b05c286339e117"},{"problem":32,"code":"mapcat ( partial repeat 2)","user":"5e70c16de4b085ba37836dae"},{"problem":32,"code":"(fn [xs]\n  ((fn [lst acc]\n    (if (empty? lst)\n      acc\n      (recur (rest lst)\n             (concat acc\n                     (list (first lst)\n                           (first lst))))))\n   xs '()))","user":"5edfb1e5e4b0c7845d86b107"},{"code":"mapcat (fn [o] (list o o))","problem":32,"user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn [xs]\n    (mapcat #(list % %) xs))","problem":32,"user":"526302eee4b03e8d9a4a70a2"},{"problem":32,"code":"reduce (fn [acc el]\n         (-> acc\n             (conj el)\n             (conj el)\n         )) []","user":"5a8fd113e4b05369db4d2542"},{"problem":32,"code":"(fn [sq] (reverse (reduce (fn [acc v] (conj (conj acc v) v)) '() sq)))","user":"53307a23e4b019098a6f8b5d"},{"problem":32,"code":"(fn\n  [coll]\n  \n  (loop [dest [] src coll]\n    (if (empty? src)\n      dest\n      (recur\n       (let [x (first src)]\n         (into dest [x x]))\n       (rest src)))))","user":"5a5be4a6e4b0512ff01cd910"},{"problem":32,"code":"#(loop [items % result []]\n   (if (empty? items)\n     result\n     (let [f (first items)]\n       (recur (rest items) (conj (conj result f) f))\n       )\n     )\n   )","user":"569ef93de4b0542e1f8d148b"},{"code":"(fn [ls] (reduce (fn [xs x] (cons x (cons x xs))) '() (reverse ls)))","problem":32,"user":"4f00d948535dcb61093f6a32"},{"problem":32,"code":"(fn [xs] (reduce #(conj %1 %2 %2) (empty xs) xs))","user":"553638bae4b09218d5f44fba"},{"code":"(fn [x]\n  ((fn [y result]\n    (if (empty? y)\n        result\n        (recur (butlast y) (conj (conj result (last y)) \n(last y)))))\n  x '()))","problem":32,"user":"4e73a9dc535dff18050a9c77"},{"problem":32,"code":"(fn [x] (reduce #(conj (conj % %2) %2) () (reverse x)))","user":"58e9d9eee4b056aecfd47d10"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(vector % %) xs))","user":"5426a59ee4b01498b1a71b1b"},{"problem":32,"code":"(fn [input] \n   (loop [in input out []]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (conj out (first in) (first in))\n              )\n       )\n     )\n   )","user":"569425b6e4b0dcc4269f410e"},{"problem":32,"code":"(fn [xs]\n  (loop [rxs xs result []]\n    (if (empty? rxs)\n      result\n      (recur (rest rxs) (conj result (first rxs) (first rxs))))))","user":"550212c0e4b07d26eda61d80"},{"code":"(letfn [(dup [coll] \n             (when-let [s (seq coll)]\n             (lazy-seq (let [fst (first s)] \n                        (cons fst (cons fst (dup (next s)) )) ))))] dup)","problem":32,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [arg]\n  (reverse (reduce #(conj %1 %2 %2) '() arg)))","problem":32,"user":"4e08fb7a535d04ed9115e7ac"},{"code":"(fn dup [coll]\n  (loop [[x & xs] coll\n         res []]\n    (if (nil? x)\n      res\n      (recur xs\n             (conj res x x)))))","problem":32,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn [coll]\n  (loop [c coll acc '()]\n    (cond (empty? c) (reverse acc)\n          :else (recur (rest c) (cons (first c) (cons (first c) acc))))))","problem":32,"user":"515c6132e4b069911535cf0d"},{"problem":32,"code":"reduce (fn [sequ x] (conj (conj sequ x) x)) []","user":"4f24c859e4b0d66497709fef"},{"problem":32,"code":"(fn [s] (reverse (reduce #(into %1 (list %2 %2)) '() s)))","user":"54b5ce67e4b05787c3b163ac"},{"code":"(fn [lst] (reduce #(conj (vec %) %2 %2) [] lst))","problem":32,"user":"506929ffe4b01dc6af13f82b"},{"problem":32,"code":"(partial reduce (fn [acc x] (conj acc x x)) [])","user":"54c83824e4b045293a27f649"},{"code":"(fn duplicate [x]\r\n (loop [lista x resultado []]\r\n (if (empty? lista)\r\n   resultado\r\n   (recur (rest lista) (conj resultado (first lista) (first lista)))\r\n )  \r\n)\r\n)","problem":32,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn [xs](mapcat vector xs xs))","problem":32,"user":"4efcac3a535de96065cf507e"},{"problem":32,"code":"(fn [x]\n  (reverse(loop [i 0 s '()] \n    (if-not (< i (count x)) s \n      (recur (+ i 1) (conj (conj s (nth x i)) (nth x i)) ) )\n) ) )","user":"514504c2e4b021a5ff8301fc"},{"problem":32,"code":"#(loop [y % z []]\n\t(if (empty? y)\n      z\n      (recur (rest y) (conj z (first y) (first y)))))","user":"583f23dce4b089d5ab817dc9"},{"problem":32,"code":"(fn mac [para]\n (mapcat #(list % %) para)\n)","user":"5bc2df19e4b07a9b28b10038"},{"problem":32,"code":"#(-> (concat % %) sort)","user":"5b7aaa3ce4b047b03b203716"},{"problem":32,"code":"(fn dup [s]\n        (loop [s s\n               rslt []\n               i 0]\n          (if (= (count s)  i)\n            rslt\n            (recur s (conj (conj rslt (get s i)) (get s i)) (+ i 1)))))","user":"59301509e4b072a2710fcfd6"},{"problem":32,"code":"reduce (fn [all x] (conj (conj all x) x)) []","user":"5833a6d8e4b089d5ab817ca2"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll\n         r []]\n    (if (empty? c) (reverse (into '() r))\n       (recur (rest c) (into r (take 2 (repeat (first c))))))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"(fn dupseq [init-xs]\r\n  (loop [ys [], xs init-xs]\r\n  (if (empty? xs)\r\n    ys\r\n    (recur (conj ys (first xs) (first xs)) (rest xs)))))","problem":32,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [col] (apply concat (map #(repeat 2 %1) col)))","problem":32,"user":"512b7a05e4b04d059cf1fd14"},{"problem":32,"code":"(fn dup [s]\n  (mapcat #(repeat 2 %1) s))","user":"5958a0c8e4b066ee0a44af8c"},{"code":"(fn [sequence]\n  (let [dupe (fn dupe [so-far to-go]\n              (if (empty? to-go)\n                so-far\n                (dupe (conj so-far (first to-go) (first to-go))\n                      (rest to-go))))]\n  (dupe [] sequence)))","problem":32,"user":"4e42f930535dc968683fc49f"},{"problem":32,"code":"#((fn [res xs]\n  (if (empty? xs)\n    res\n    (recur (cons (last xs) (cons (last xs) res)) (butlast xs))))\n ()\n %)","user":"579fa28fe4b0264b925669fb"},{"problem":32,"code":"mapcat #(list  % %)","user":"56903cb9e4b0dcc4269f40eb"},{"problem":32,"code":"(fn [s] (mapcat (fn [e] [e e])s))","user":"55660248e4b0c656e3ff1824"},{"code":"(fn [coll] (reduce #(conj (conj %1 %2) %2) [] coll))","problem":32,"user":"509c7949e4b085ae113522b0"},{"problem":32,"code":"(fn [sequence]\n  (loop [in sequence result []]\n    (let [head (first in)]\n      (if (empty? in)\n        result\n        (recur (rest in) (conj result head head))\n      )\n    )\n  )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"code":"(fn [elems]\n  (mapcat #(repeat 2 %) elems))","problem":32,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [xs]  (reduce (fn [x1 x2] (cons x2 (cons x2 x1))) '() (reverse xs)))","problem":32,"user":"4e86d3cf535dceadca46984c"},{"problem":32,"code":"#(mapcat (fn [s] (repeat 2 s)) %)","user":"550c55d0e4b06e50f9beb14d"},{"code":"(comp\n #(reverse\n   (reduce (fn [a b]\n             (conj a b b))\n           '() %)))","problem":32,"user":"4f6c6d69e4b07046d9f4efba"},{"problem":32,"code":"(partial mapcat #(-> [% %]))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn  ! [s]\n  (if (empty? s)\n    nil\n    (cons (first s)(cons (first s) (! (rest s))))\n  )\n)","problem":32,"user":"51db8244e4b0e067a9bbadc7"},{"problem":32,"code":"(fn [arr]\n  (mapcat #(list % %) arr))","user":"59636b6de4b066ee0a44b0c6"},{"code":"(fn my-duplicate\n  ([[x & xrest]]\n     (my-duplicate [x x] xrest))\n  ([coll [x & xrest]]\n     (if (nil? xrest)\n       (conj coll x x)\n       (recur (conj coll x x) xrest))))","problem":32,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":32,"code":"(fn [a]\n  (let [n (count a)]\n   (map\n    #(nth a (quot % 2))\n    (range (* 2 n))\n   )))","user":"5744723ae4b009280f9f2b3a"},{"problem":32,"code":"#(sort(into % (identity %)))","user":"5c784248e4b0fca0c162281f"},{"problem":32,"code":"#(mapcat (fn [n]\n           [n n]) \n         %)","user":"5ed08785e4b016b56eae05b1"},{"problem":32,"code":"(fn a [b]\n\t(take (* (count b) 2) \n\t\t((fn c \n\t\t\t[d](if(<= d (count b))(into [] (cons (get b (- d 1)) (into [] (cons (get b (- d 1)) (c (+ d 1))))))[])\n\t\t) 1)\n\t)\n)","user":"5710e574e4b09c608db7043b"},{"code":"(fn [v]\n  (loop [doubled (list) r v]\n    (if-not (seq r)\n      (reverse doubled)\n      (recur (cons (first r) (cons (first r) doubled)) (rest r)))))","problem":32,"user":"507bb3ece4b09034bfeeb720"},{"code":"(partial (fn [n s]\n           (reduce #(concat %1\n                            (vector %2 %2)) n s))\n         [])","problem":32,"user":"4e6ebd4a535d5021c1a89610"},{"problem":32,"code":"(fn sm-dup [x]\n  \n  (if (= 0 (count x))\n    '()\n    (let [a (first x) b (rest x)] (concat (list a a) (sm-dup b)))\n    )\n  \n  \n)","user":"5575aae2e4b05c286339e065"},{"problem":32,"code":"(fn [c]\n       (mapcat (fn [a b] [a b]) c c))","user":"551e6526e4b030e6a24d00e8"},{"code":"(fn ! [x] (if(= x '()) '() (cons (first x) (cons (first x) (!(rest x))))))","problem":32,"user":"5139c00ee4b067e25a345ebc"},{"problem":32,"code":"(fn [x]\n  (loop [acc '()\n         [head & tail :as coll] x]\n    (cond\n      (empty? coll) (reverse acc)\n      (not= nil head) (recur (conj acc head head) tail)\n      )))","user":"5881335ce4b0f1effa3b762e"},{"code":"(fn [s] (reduce #(into% [%2 %2]) [] s))","problem":32,"user":"5261aebbe4b03e8d9a4a7066"},{"problem":32,"code":"#(reverse (reduce (fn [newseq item] (conj (conj newseq item) item)) '() %))","user":"54fa60dfe4b0cf870d934704"},{"problem":32,"code":"(fn [x]\n  (apply list (reduce #(conj %1 %2 %2) [] x)))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":32,"code":"(fn [xs] \n  (loop [xs (reverse xs) acc '()] \n    (if (not-empty xs) (let [x (first xs)] (recur (rest xs) (cons x (cons x acc)))) acc)))","user":"56d5bc66e4b0ea9b8538f7c2"},{"problem":32,"code":"#(loop [in % out []]\n   (if (empty? in)\n     (seq out)\n     (recur (rest in) (conj out (first in) (first in)))))","user":"56dbe1f4e4b0ea9b8538f813"},{"problem":32,"code":"(fn [sq] \n  (mapcat #(repeat 2 %)sq)\n  )","user":"60461a61e4b02d28681c77c1"},{"code":"#(reverse\n  (loop [todo % acc ()]\n        (if (empty? todo) acc\n            (let [[head & tail] todo]\n                 (recur tail\n                       (cons head (cons head acc)))))))","problem":32,"user":"4fa6d532e4b081705acca1be"},{"problem":32,"code":"(fn [arg]\n  (reduce #(concat %1 (list %2 %2)) '() arg))","user":"5733459ce4b0cd1946bd0fec"},{"problem":32,"code":"(fn [seq] \n  (mapcat (fn [x] (list x x)) seq))","user":"53e30fcae4b036ad0777e3fc"},{"problem":32,"code":"mapcat #( repeat 2 % )","user":"577412c6e4b0979f896515f6"},{"problem":32,"code":"(fn dupli [[x & xs]]\n  (if (nil? xs) (cons x (cons x '()))\n    (cons x (cons x (dupli xs)))))","user":"5f67c2f8e4b02876ed9fd039"},{"problem":32,"code":"(fn [seq] (reverse (reduce #(conj %1 %2 %2) '() seq)))","user":"57ca338de4b05aa3c4741d37"},{"problem":32,"code":"reduce (fn [a x] (into a (list x x))) []","user":"558d6beae4b0277789237643"},{"code":"reduce (fn [xs x] (concat xs (list x x))) ()","problem":32,"user":"52b2a819e4b0c58976d9acf1"},{"problem":32,"code":"(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s)\n  \n  \n  )","user":"55f8fd70e4b03cbcff9738bc"},{"problem":32,"code":"(fn foo [x]\n  (if (empty? x) nil\n    (conj (foo (rest x)) (first x) (first x))))","user":"5760715de4b08062f99a4e96"},{"code":"#(apply concat (for [a %] [a a]))","problem":32,"user":"4e80d71b535db62dc21a62b7"},{"problem":32,"code":"(fn dupe [s] \n  (if (empty? s) s \n    (conj (dupe (rest s)) (first s) (first s))))","user":"5e9683f1e4b0157ca96647c7"},{"problem":32,"code":"(fn pack [sequ]\n  (loop [[x & y] sequ out '()]\n    (if (nil? x) \n      (reverse out)\n      (recur y (cons x (cons x out))))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [cc] (reduce (fn [c e] (-> c (conj e) (conj e))) () (reverse cc)))","problem":32,"user":"50d242c0e4b06ad58337ed0f"},{"code":"(partial mapcat (fn [x] [x x]))","problem":32,"user":"4fa4ef2ee4b081705acca1a9"},{"code":";(fn [l] (mapcat #(take 2 (repeat (first %))) (partition-by (fn [x] (rand)) l)))\n;mapcat #(list % %)\n#(interleave % %)","problem":32,"user":"52df232fe4b09f7907dd13fc"},{"code":"(fn foo [coll] \n  (if (empty? coll) '()\n    ( concat (list (first coll)) (list (first coll)) (foo (rest coll)) ) ))","problem":32,"user":"5078300de4b0fc74642bff66"},{"code":"(fn [xs]\n  (loop [xs xs ys '()]\n    (if (empty? xs)\n      ys\n      (recur (butlast xs) (list* (last xs) (last xs) ys)))))","problem":32,"user":"4dbe04b2535d020aff1edf56"},{"problem":32,"code":"(partial mapcat (fn [e] [e e]))","user":"548c6673e4b0e286459a1209"},{"code":"(fn [vctr] (loop [cnt 0 nwvct nil]\n  (if (= cnt (count vctr)) (reverse nwvct)\n  (do (recur (inc cnt) (conj (conj nwvct (get vctr cnt)) (get vctr cnt))))\n  )))","problem":32,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":32,"code":"(fn [x]\n  (loop [s x\n         res []]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res (first s) (first s))))))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":32,"code":"(fn [coll]\n   (interleave coll coll))","user":"54aec099e4b09f271ff37cf5"},{"code":"#(mapcat (fn [v ] (repeat 2 v)) %)","problem":32,"user":"4def301c535d08e6dec9fe12"},{"problem":32,"code":"(fn dup\n  [arg]\n  (seq (reduce (fn [rez arg]\n                  (into rez (repeat 2 arg)))\n                [] arg)))","user":"597af3f7e4b02382a38ad1f0"},{"code":"(fn [coll] (reduce into (for [x coll] [x x])))","problem":32,"user":"534e1f56e4b084c2834f4aae"},{"problem":32,"code":"(fn [x]\n  (loop [x x dub []]\n    (if (empty? x)\n      dub\n    (recur (rest x) (conj dub (nth x 0) (nth x 0)))))\n  )","user":"5694292ee4b0dcc4269f4113"},{"problem":32,"code":"(fn [xs]\n    (reverse\n      (reduce #(concat (list %2 %2) %1)\n              '()\n              xs)))","user":"56bcc2b2e4b0f26550335965"},{"code":"#(reduce (fn [accum x] (conj (conj accum x) x)) [] %)","problem":32,"user":"4fb57e06e4b081705acca2bf"},{"problem":32,"code":"#((fn duplicate [seq res] \n  (if (= (first seq) nil) \n    res \n    (duplicate (rest seq) (conj (conj res (first seq)) (first seq))))) % [])","user":"56ffeafee4b08d47c97781c2"},{"problem":32,"code":"(fn f1 [lst]\n  (reduce concat (map (fn [e] (repeat 2 e)) lst)))","user":"5803ba6de4b0a837a8b30c95"},{"problem":32,"code":"(fn [coll] (reduce #(concat %1 (list %2 %2)) () coll))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":32,"code":"(fn dup [seq]\n  (loop [s seq\n         acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (vec (conj acc (first s) (first s)))))))","user":"5b59c2bde4b02d533a91bd80"},{"problem":32,"code":"(fn [xs]\n  (loop [res '() x xs]\n    (if (empty? x)\n      res\n      (recur (concat res [(first x) (first x)]) (next x)))))","user":"553b87abe4b09218d5f45003"},{"code":"#(reverse (reduce (fn [acc x] (conj acc x x)) '() %))","problem":32,"user":"4f73536ee4b07046d9f4f044"},{"problem":32,"code":"mapcat #(vector %%)","user":"56478a82e4b0284900eef61e"},{"problem":32,"code":"(fn [s] (reduce #(conj (conj %1 %2) %2)  [] s))","user":"5d078e2de4b0cc9c915881fa"},{"code":"(fn [y] (mapcat (fn [x] [x x]) y))","problem":32,"user":"4f7e07f4e4b06e829148e1c9"},{"code":"mapcat #(vector % %)","problem":32,"user":"4daa374930acd6ed13482a68"},{"problem":32,"code":"#(sort(take (* 2 (count %)) (cycle %)))\n;(take (* 2 (count %))    cycle","user":"5822e082e4b04b46fc4b0fa9"},{"code":"(fn [ coll ]\n  (reduce (fn [l r] (-> l (conj r) (conj r))) [] coll)\n)","problem":32,"user":"50959df3e4b087f34d351ab4"},{"problem":32,"code":"#(reduce (fn [s e] (conj s e e )) [] %)","user":"6086abade4b0736b099e42ff"},{"code":"(fn [c] (reverse (reduce #(cons %2 (cons %2 %1)) '() c)))","problem":32,"user":"4e84a7dd535db62dc21a62e2"},{"problem":32,"code":"(fn [x]\n  (loop [f (first x) r (rest x) d '()]\n    (if (empty? r)\n     (reverse (conj d f f))\n     (recur\n      (first r)\n      (rest r)\n      (conj d f f)))))","user":"5da9d89ae4b000c986472c3b"},{"problem":32,"code":"(fn [s]\n  (->> s\n       (map (comp (partial take 2) repeat))\n       (reduce (partial apply conj) '())\n       (reverse)))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":32,"code":"(fn problem32 [col]\n\t(reverse (reduce (fn [acc item] (into acc (list item item))) '() col)))","user":"5006474ce4b0678c553fc481"},{"code":"reduce #(concat %  (list %2 %2)) ()","problem":32,"user":"5124619ae4b02c3f2a072ccd"},{"code":"reduce #(concat % (repeat 2 %2)) []","problem":32,"user":"525a643be4b0cb4875a45cf1"},{"problem":32,"code":"#(->> %\n      (map (fn [e] [e e]))\n      (reduce concat []))","user":"5e546e20e4b027a2e10ac0eb"},{"problem":32,"code":"(fn [x] \n  (->> x\n       (map (fn [i] [i i]))\n       (apply concat)))","user":"57614948e4b0994c1922fb83"},{"code":"mapcat (partial repeat 2)","problem":32,"user":"4e3996b0535deb9a81d77f41"},{"code":"(fn [col] (apply concat (map #(conj '() % %) col)))","problem":32,"user":"51a3c9cde4b0e77c4ca60bf9"},{"code":"(fn [c] (sort (concat c c)))","problem":32,"user":"51071f2ee4b05b2b4eee748e"},{"problem":32,"code":"#(reduce concat (map (fn [x] (take 2 (repeat x))) %))","user":"56684356e4b04acd4f672de4"},{"code":"(fn [xs] (apply concat (map  #(repeat 2 %) xs)))","problem":32,"user":"4e641bfd535d8ccf87e9fe67"},{"problem":32,"code":"#(loop [x % y '()]\n   (if (empty? x) y\n       (recur (rest x) (concat y [(first x) (first x)]))))","user":"59fea630e4b01bb0ae8afd10"},{"problem":32,"code":"(fn [x] \n   (seq \n     (reduce \n       (fn [arr elem] \n         (conj arr elem elem)) \n       [] x)))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"mapcat #(vector %1 %1)","problem":32,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [x]\n  ((fn dup [acc x]\n    (if (empty? x)\n      acc\n      (recur (concat acc (list (first x) (first x))) (rest x))\n    )\n  ) [] x)\n)","problem":32,"user":"5303a027e4b0d8b024fd3745"},{"problem":32,"code":"#(apply concat (map (fn[x] (conj [] x x)) %))","user":"55357ab5e4b09218d5f44faf"},{"problem":32,"code":"(fn doubleit [nesto] (mapcat #(if (sequential? %) % [%]) (for [x nesto] [x x])))","user":"4f035fbe535dcb61093f6a92"},{"problem":32,"code":"(fn f [l]\n(apply concat (map #(list % %) l)))","user":"54296802e4b01498b1a71b38"},{"problem":32,"code":"(fn [col]\n  (reverse (reduce (fn [acc val] (conj acc val val)) () col)))","user":"55f1f0d1e4b06e875b46ce3b"},{"problem":32,"code":"(fn dupele [l]\n  (cond\n   (= [] l) ()\n   :else\n   (conj (dupele (rest l)) (first l) (first l))))","user":"602049b8e4b0bf4ca6b10961"},{"problem":32,"code":"(fn f [s] \n  (let [f* \n        (fn [acc s*] \n          (conj acc s* s*))] \n    (reduce f* [] s)))","user":"56942923e4b0dcc4269f4112"},{"problem":32,"code":"reduce (fn [x,y] (concat x [y,y])) []","user":"5933b736e4b072a2710fd05d"},{"problem":32,"code":"(fn dup [coll]\n (mapcat #(conj () % %) coll))","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":32,"code":"#(reduce (fn[x y] (conj x y y)) [] %)","user":"571172ece4b09c608db70446"},{"problem":32,"code":"#(reduce (fn [result e]\n            (into result (repeat 2 e)))\n          []\n          %)","user":"5d1be50ce4b02ea6f0fb6986"},{"problem":32,"code":"(fn dup [x]\n  (cond\n    (= () x) x\n    :else (conj (conj (dup (rest x)) (first x)) (first x))\n  )\n)","user":"58f92297e4b0438e51c2cf43"},{"code":"#(mapcat (fn [a] (repeat 2 a)) %)","problem":32,"user":"4e68be01535d8ccf87e9fe88"},{"problem":32,"code":"(fn [arr]\n  (loop [a arr acc []]\n    (if (empty? a)\n      acc\n      (recur (rest a) (conj acc (first a) (first a))))))","user":"58408643e4b089d5ab817deb"},{"problem":32,"code":"#(reduce (fn [initial arg] (conj initial arg arg)) [] %)","user":"55b5fc18e4b01b9910ae298d"},{"code":"#(reduce \n  (fn [e1 e2] \n    ( conj e1 e2 e2)) '[] %)","problem":32,"user":"5364ab34e4b0243289761e64"},{"problem":32,"code":"#(reduce concat (map (fn [element] (repeat 2 element)) %1))","user":"5589a941e4b059ccff29b207"},{"problem":32,"code":"(fn duplicate-seq\n  [input]\n  (interleave input input))","user":"5ac6099ee4b0e27600da7757"},{"code":"(fn [coll]\n    ( apply concat ( map (fn [i] (vector i i)) coll))\n    )","problem":32,"user":"51d9eb05e4b02ceefd947755"},{"code":"#(reverse (reduce (fn [r i] (cons i (cons i r))) [] %))","problem":32,"user":"4dbecb06535d020aff1edf6a"},{"code":"(fn [xs] (mapcat #(take 2 (repeat %)) xs))","problem":32,"user":"509eeb3be4b08df8156e9e37"},{"code":"(partial reduce (fn[x y] (conj x y y)) [] )","problem":32,"user":"52d36f60e4b099d49816f0c2"},{"problem":32,"code":"(fn [coll] \n  (loop [remaining coll acc []] \n    (if (empty? remaining) acc \n      (recur (rest remaining) (conj acc (first remaining) (first remaining))))))","user":"57a774e4e4b0a96607956213"},{"problem":32,"code":"(fn [x] (reverse (reduce #(conj (conj %1 %2) %2 ) '() x)))","user":"54d4b3a7e4b0a52adc2e2003"},{"code":"(fn [x] (reverse (reduce #(conj (conj % %2) %2) () x)))","problem":32,"user":"50e111f7e4b084616e11c663"},{"problem":32,"code":"#(reduce (fn [result ele] (into result [ele ele]))\n         []\n         %)","user":"562268dce4b03f08ee9a9224"},{"problem":32,"code":"(fn dupl\n  [coll]\n  (reduce #(concat %1 (list %2 %2)) nil coll))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":32,"code":"(fn d [l] (if (empty? l) l (conj (d (rest l)) (first l)(first l))))","user":"55ec1c4ce4b0121d4835fdc4"},{"problem":32,"code":"(fn [x] (apply concat (map (fn [e] [e e]) x)))","user":"5a1dd5b4e4b0ff51aa4b3260"},{"code":"(fn [inList] (reduce #(conj %1 %2 %2) '() (reverse inList)) )","problem":32,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [x] (loop [result [], x x]\n\t(if (empty? x)\n\t\tresult\n\t\t(recur (conj result (first x) (first x)) (rest x))\n\t)))","problem":32,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":32,"code":"#(reduce into [] (for [x %1] [x x]))","user":"5398123ee4b0b51d73faaef3"},{"code":"(fn [s]\n   (reverse\n   (reduce (fn [l x] (conj (conj l x) x))\n           '()\n           s)))","problem":32,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":32,"code":"#(reduce (fn [a x]\n           (conj (conj a x) x)) (empty %1)\n         %1)","user":"5e5f83a2e4b0fd0acd15867b"},{"problem":32,"code":"(fn [s] (mapcat (fn [el] (list el el)) s))","user":"5d1231dde4b02c15ef021995"},{"problem":32,"code":"(fn [xs]\n  ((fn dupelem [xs ys]\n     (if (empty? xs)\n       (reverse ys)\n       \n       (dupelem (rest xs) (conj (conj ys (first xs)) (first xs))))) xs '()))","user":"5e394c33e4b01d43a70e8dd1"},{"problem":32,"code":"(fn duplicate [seqn]\n  (reduce #(conj (conj %1 %2) %2) [] seqn))","user":"5f8d76c3e4b0715f5002d758"},{"problem":32,"code":"(fn this [x]\n  (cond\n   (= x ()) ()\n   :else (conj (this (rest x)) (first x) (first x))\n   )\n  )","user":"59165082e4b09b4ee5954b88"},{"problem":32,"code":"(fn [s] (mapcat #(repeat 2 %)s) )","user":"567d75ebe4b05957ce8c61c9"},{"code":"(fn [s] (mapcat #(list % %) s ))","problem":32,"user":"5071e520e4b0e3170b5a8683"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc v] (conj acc v v)) [] s))","user":"54dce62be4b024c67c0cf78b"},{"problem":32,"code":"mapcat (fn[v] (list v v))","user":"4fe9cc68e4b0547ebccb2470"},{"code":"(fn my-dup \n    ([icoll] (my-dup icoll '()))\n    ([icoll ocoll] \n            (cond \n             (empty? icoll) (reverse ocoll)\n             :else (recur (rest icoll) (conj ocoll (first icoll) (first icoll))))))","problem":32,"user":"4eee3e6a535d93acb0a668c3"},{"problem":32,"code":"(fn replicate [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))","user":"55e64c1ee4b050e68259b486"},{"problem":32,"code":"(partial mapcat #(do [% %]))","user":"5cd26163e4b0ccb0619628fe"},{"code":"#(for [x % y [1 2]] x)","problem":32,"user":"4e588e84535d8a8b8723a294"},{"code":"(fn [i] (apply concat (map (fn [x] [x x]) i)))","problem":32,"user":"50b64b55e4b0a86f8358ca6b"},{"code":"(fn [l] \n  (reduce (fn [x y] (concat x y)) (map (fn [x] \n       (list x x) \n  ) l))\n)","problem":32,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":32,"code":"(fn [x] (sort(into x x)))","user":"53d3856fe4b00fb29b22132b"},{"code":"#(mapcat (fn [n] (repeat 2 n)) %)","problem":32,"user":"4e99819a535dbda64a6f6b66"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc x] (conj acc x x)) [] coll))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":32,"code":"#(reduce into [] (map (partial repeat 2) %))","user":"57a13745e4b0c3d858beb8e3"},{"problem":32,"code":"#(loop [coll % answer []]\n   (if (empty? coll)\n    answer\n    (recur\n     (rest coll)\n     (conj (conj answer (first coll)) (first coll))\n    )\n   )\n  )","user":"560fe558e4b05f002753df63"},{"code":"(fn [& xs] (apply mapcat #(list % %) xs))","problem":32,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":32,"code":"(fn[y] (loop [hi [] x y]\n          (if (empty?  x)hi\n            (recur (conj hi ( first x)( first x)) (rest x) ))))","user":"53ada652e4b047364c04446d"},{"problem":32,"code":"; (fn dup [xs] (if (seq xs) (let [f (first xs)] (cons f (cons f (dup (rest xs))))) xs))\n(fn [xs] (mapcat #(repeat 2 %) xs))","user":"52ea764ee4b09f7907dd14be"},{"problem":32,"code":"(fn [in] (reduce concat (map #(take 2 (repeat 2 %)) in)))","user":"5a94a38ce4b0d174b936c73e"},{"problem":32,"code":"(fn [coll]\n  (loop [[x & more] coll\n         acc []]\n    (if x\n      (recur more (conj (conj acc x) x))\n      (apply list acc))))","user":"580a0783e4b0a837a8b30d2c"},{"problem":32,"code":"#(reduce (fn [acc x] (-> acc (conj x) (conj x))) [] %)","user":"5a4993c0e4b05d388ecb6b71"},{"code":"(fn [seq]\n  (loop [seq seq result []]\n    (if (empty? seq)\n        result\n        (recur (rest seq) (conj result (first seq) (first seq))))))","problem":32,"user":"4f017b4e535dcb61093f6a37"},{"problem":32,"code":"#(loop [acc '() [x & xs] %]\n   (if (nil? x) acc\n     (recur (concat acc (list x x)) xs)))","user":"5310e968e4b08068f379ecdd"},{"code":"reduce \n#(conj (conj %1 %2) %2)\n[]\n#_(fn [xs]\n  (loop [[x & y] xs\n         acc []]\n    (if-not x\n      acc\n      (recur y\n             (conj (conj acc\n                         x)\n                   x)))))","problem":32,"user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [x]\n  (sort (into (map identity x) x)))","problem":32,"user":"4f4c8faae4b03ad3f0c10c93"},{"problem":32,"code":"(fn dup [xs]\n   (if (seq xs)\n     (cons (first xs)\n           (cons (first xs) (dup (rest xs))))\n     nil))","user":"505223fae4b0a561d07d8f17"},{"code":"mapcat (fn [x]\n        (repeat 2 x))","problem":32,"user":"52f01bfbe4b05e3f0be25ed9"},{"code":"(fn dup [coll]\r\n  (if (empty? coll)\r\n    ()\r\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))","problem":32,"user":"4fbb9d80e4b081705acca2ea"},{"problem":32,"code":"(fn [m] (mapcat #( list % %) m))","user":"53194ba3e4b08068f379ed7a"},{"problem":32,"code":"#(reduce (fn [x y] (concat x (repeat 2 y))) '() %)","user":"5e0cbc14e4b099d064962f8e"},{"problem":32,"code":"(fn [s]\n  (reduce #(concat %1 (list %2 %2))\n          '()\n          s))","user":"57d57f65e4b0bd073c2023b3"},{"problem":32,"code":"(fn dup [s] (reduce #(conj (conj %1 %2) %2) [] s))","user":"57e56da8e4b0bfb2137f5ad6"},{"code":"(fn [l]\n  (apply concat (map #(list % %) l)))","problem":32,"user":"4f0364d5535dcb61093f6a9e"},{"code":"(fn [c] (reduce into (map #(identity [%1 %1]) c)))","problem":32,"user":"50b24a2fe4b03ea88043355c"},{"code":"(let [dup #(repeat 2 %)]\n(fn [x] (reverse (reduce into () (map dup x)))))","problem":32,"user":"4e697e41535d8ccf87e9fe9c"},{"problem":32,"code":"#(loop [lst % current nil]                                       \n   (if (empty? lst)                                               \n     current                                                      \n     (recur (rest lst)                                            \n            (concat current [(first lst) (first lst)]))))","user":"570b421ee4b0b0fb43fd06be"},{"problem":32,"code":"(fn dupl [l] (mapcat #(repeat 2 %1) l))","user":"548c8115e4b0e286459a120c"},{"code":"(fn [xs] (mapcat #(seq [%1 %1]) xs))","problem":32,"user":"4e9c66e2535dbda64a6f6b7f"},{"code":"(fn [coll]\n  (loop [res () sc coll]\n    (if (nil? (seq sc))\n      (reverse res)\n      (recur (conj res (first sc) (first sc)) (rest sc)))))","problem":32,"user":"4e7bc07c535db169f9c796b9"},{"problem":32,"code":"; reduce #(concat %1 [%2 %2]) []\n#(interleave % %)","user":"5f81de6ce4b0c071e6c840f5"},{"problem":32,"code":"(fn f [s] (if \n\t\t\t(empty? (rest s))\n\t\t\t(concat s s)\n\t\t\t(concat (list (first s) (first s)) (f (rest s)))\n\t\t)\n)","user":"553b90c8e4b09218d5f45005"},{"problem":32,"code":"(fn\n  [lst]\n  (mapcat #(take 2 (repeat %)) lst))","user":"5aa2f1dee4b0d174b936c865"},{"problem":32,"code":"reduce (fn [xs x] (concat xs [x x])) '()","user":"5f5e7158e4b02876ed9fcff0"},{"code":"(fn duplicate [coll]\n  (if (seq coll)\n    (let [head (first coll)]\n      (conj (duplicate (rest coll)) head head))\n    ()))","problem":32,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":32,"code":"(fn [coll] \n  (loop [elem coll res []]\n        (let [e (first elem)]\n    (if (not (empty? elem))\n      (recur (rest elem) (concat res  (list e e)))\n      res))))","user":"57936970e4b0e215f87e8458"},{"code":"(fn dup [s]\n  (if (seq s)\n    (cons (first s) (cons (first s) (dup (rest s))))))","problem":32,"user":"4f036d18535dcb61093f6abe"},{"problem":32,"code":"(fn [lst] (reduce #(concat %1 (repeat 2 %2)) () lst))","user":"56d8a63fe4b0ea9b8538f7e8"},{"code":"#(loop [r '() coll %] \n  (if (empty? coll) r \n    (recur (concat  r (take 1 coll) (take 1 coll)) \n(drop 1 coll))))","problem":32,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":32,"code":"(comp #(apply concat %) (partial map (fn [x] [x x])))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":32,"code":"reduce (fn[a b](conj a  b b)) []","user":"6045e761e4b02d28681c77bb"},{"problem":32,"code":"(fn duplicate [x]\n  (reduce concat (map #(take 2 (repeat %)) x)))","user":"58171a9ae4b0c0e9c07b8387"},{"code":"#(reduce \n   into\n   (for [x %]\n     [x x]))","problem":32,"user":"51944aaae4b0142f60b4aedc"},{"code":"#(loop [coll % rst []]\n  (if (empty? coll)\n    rst\n    (recur (rest coll) (concat rst (repeat 2 (first coll))))))","problem":32,"user":"50399468e4b088a6a14ca768"},{"problem":32,"code":"#(reduce (fn [m x] (concat m (list x x))) '() %)","user":"551589cee4b055c2f668d4e9"},{"problem":32,"code":"(fn [l]\n   (reverse ((fn dup-aux [l i ldup]\n      (if (= i (count l))\n       ldup\n       (dup-aux l (inc i) (conj (conj ldup (nth l i)) (nth l i)))))\n   l 0 '())))","user":"54651faee4b01be26fd746d6"},{"code":"(fn [col]\n  (reduce #(conj %1 %2 %2) [] col))","problem":32,"user":"4e89f9e5535d3e98b8023289"},{"problem":32,"code":"#(reduce (fn [result, el] (conj result el el)) [] %)","user":"5658b9bde4b00d315579610e"},{"code":"(fn \n  [s]\n  (sort (concat s s)))","problem":32,"user":"53951c75e4b0b51d73faaed4"},{"problem":32,"code":"(fn duplicate-sequence\n  [sequence]\n  (reduce #(conj(conj %1 %2) %2) [] sequence))","user":"5db1e852e4b010eb3c36cd0a"},{"problem":32,"code":"(fn[_seq](reverse(reduce (fn[result head]\n\t\t\t\t\t(conj (conj result head) head)) '() _seq)))","user":"5954eef0e4b066ee0a44af17"},{"problem":32,"code":"(fn [x]\n \t(loop [coll x acc []]\n      \n     (if (empty? coll)\n       \tacc\n       (let [curr (first coll)]\n        (recur (rest coll) (conj (conj acc curr) curr))  \n        )\n       )\n      \n    )\n  )","user":"602cc4d4e4b0d5df2af22274"},{"problem":32,"code":"(fn [l] (mapcat #(-> [% %]) l))","user":"56521a26e4b0f9d632dd845f"},{"code":"(fn duplist [l]\n  (interleave l l))","problem":32,"user":"51baff1be4b0fe3ecfb46443"},{"problem":32,"code":"(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n        (recur (rest s) (conj res (first s) (first s)))\n      (reverse (into '() res)))))","user":"5a805f7ee4b00b71e582a04d"},{"code":"#(apply concat (for [x %1] (list x x)))","problem":32,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":32,"code":"#(mapcat list %1 %1)","user":"593fcb0ce4b069cdc2982bea"},{"problem":32,"code":"(fn [sq] \n  (reverse (reduce #(conj %1 %2 %2) () sq)))","user":"5711ca24e4b09c608db7044b"},{"problem":32,"code":"(fn [s] (reduce #(concat %1 (repeat 2 %2)) [] s))","user":"54febf4be4b07d26eda61d45"},{"problem":32,"code":"(fn[sequ] (reverse (reduce (fn [acc x] (cons x (cons x acc))) '() sequ)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":32,"code":"(fn [coll] (mapcat #(list % %) coll))\n\n; #(interleave % %) \n; remember that interleave takes colls, so what this does here is\n; (fn [coll] (interleave coll coll))","user":"560dfa8de4b05f002753df46"},{"problem":32,"code":"(fn [x] (vec (mapcat #(conj nil % %) x)))","user":"56a7be01e4b07966d5a8a05e"},{"problem":32,"code":"reduce #(do (concat %1 [%2 %2])) []","user":"5d73530ce4b02e6b30c93514"},{"problem":32,"code":"(fn [y] (apply concat (map (fn [x] (repeat 2 x)) y)))","user":"59f192e0e4b0966464fe6a5e"},{"code":"(fn dupe-seq [seqn]\n  (cond\n    (empty? seqn) '()\n    :else (cons (first seqn) (cons (first seqn) (dupe-seq (rest seqn))))))","problem":32,"user":"50d2f044e4b03c62ef244483"},{"problem":32,"code":"#(reduce (fn [acc item] (into acc [item item])) [] % )","user":"5bec37e2e4b0f319e2d7ec96"},{"problem":32,"code":"(fn duplicator [seqn] \n  (reduce\n    (fn\n      [f s]\n      (conj f s s)\n    )\n    []\n    seqn\n  )  \n)","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":32,"code":"(fn [coll]\n  (reduce\n   (fn [acc n]\n     (conj acc n n)) [] coll))","user":"5603c784e4b04bb52996e1c2"},{"problem":32,"code":"(fn duper\n  [input]\n  (loop [xs input ys []]\n    (if (empty? xs)\n    ys\n    (recur (rest xs) (conj ys (first xs) (first xs))))))","user":"53de4bdae4b0d874e779ae32"},{"problem":32,"code":"#(reduce (fn [lst e] (conj (conj lst e) e)) [] %)","user":"54eee3a3e4b024c67c0cf879"},{"problem":32,"code":"(fn [llist]\n   (reduce (fn [acc x] (conj acc x x)) [] llist))","user":"5cfabf53e4b0cc9c91588148"},{"problem":32,"code":"(fn dup-seq [xs] (apply concat (map #(list % %) xs)) )","user":"53c126fce4b00fb29b22125b"},{"code":"(fn [s]\n    (let [pairs (for [a s]\n                  [a a])]\n      (reduce concat pairs)))","problem":32,"user":"50bf6f93e4b0ffd967a66cbf"},{"problem":32,"code":"(fn [s]\n  (reduce #(concat %1 (list %2 %2)) (empty s) s))","user":"57958dace4b0e215f87e8484"},{"code":"(fn dupvals [x]\n  (if (= 1 (count x)) (cons (first x) x)\n  (conj (dupvals (rest x)) (first x) (first x))))","problem":32,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":32,"code":"(fn [se] (reduce (fn [x y] (conj (conj x y) y)) [] se))","user":"5fbf6fe7e4b0ad6fc3476147"},{"code":"(fn [coll]\n  (loop [result [], coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj (conj result (first coll)) (first coll)) (rest coll)))))","problem":32,"user":"4edab806535d10e5ff6f5311"},{"problem":32,"code":"(fn mdup [sq]\n  (if (empty? sq)\n    '()\n    (conj (mdup (rest sq))\n          (first sq)\n          (first sq))))","user":"56a2777be4b0542e1f8d14bf"},{"code":"(fn [a]\n  (loop [resultado []\n         lista a]\n    (if (empty? lista)\n      resultado\n      (let [v (first lista)]\n        (recur (conj resultado v v) (rest lista))))))","problem":32,"user":"52bdd135e4b07a9af579230a"},{"problem":32,"code":"#(loop [col % out []]\n        (if (> (count col) 0) (recur (rest col) (conj out (first col) (first col)))\n                         out)\n        )","user":"5a9db513e4b0d174b936c7f0"},{"problem":32,"code":"; mapcat #(repeat 2 %)\nmapcat (fn [x]\n  (repeat 2 x))","user":"55b7f263e4b01b9910ae29b4"},{"problem":32,"code":"(fn [col]\n  (reduce \n    (fn [result item] \n      (conj result item item)) \n    () \n    (reverse col)))","user":"579dd954e4b05b1deef9ae1b"},{"problem":32,"code":"(fn [coll]\n  (loop [tail coll\n         dups []\n         i 0]\n    (if (empty? tail)\n      dups\n      (if (< i 2)\n        (recur tail\n               (conj dups (first tail))\n               (inc i))\n        (recur (rest tail)\n               dups\n               0))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":32,"code":"#(reduce (fn [coll next] (conj coll next next)) [] %)","user":"59908f3fe4b0866487ed0d50"},{"problem":32,"code":"(fn [items] (reverse (reduce #(conj %  %2 %2) '() items)))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [xs]\r\n  (seq \r\n    (reduce (fn [acc x] \r\n             (conj acc x x))\r\n            []\r\n            xs)))","problem":32,"user":"4dea9406535d08e6dec9fe01"},{"code":"(fn duplicate [coll]\n  (mapcat (fn [x] (repeat 2 x)) coll))","problem":32,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":32,"code":"(fn [x]\n  (loop [x   x \n         acc '()] \n    (if (empty? x) \n      (reverse acc) \n      (recur (next x) (conj acc (first x) (first x))))))","user":"55bb6a19e4b01b9910ae29e5"},{"problem":32,"code":"(fn [xs] (apply concat (map (fn [x] [x x])  xs)))","user":"594be1cce4b07ddc2dafae47"},{"problem":32,"code":";#(apply concat (map (fn [x] (list x x)) %))\n#(mapcat (fn [x] (list x x)) %)","user":"5af19233e4b0cc2b61a3bc5f"},{"problem":32,"code":"#(mapcat identity (map (fn [x] (list x x)) %))","user":"5d7d17ece4b02e6b30c93558"},{"code":"(fn dup [x] (if (empty? x) '() (concat (list (first x)) (list (first\nx)) (dup (rest x)))))","problem":32,"user":"52474ec2e4b05ef8e38e6361"},{"code":"reduce   (fn [x y] (conj x  y y)) []","problem":32,"user":"518644bce4b0da5a5be3baca"},{"problem":32,"code":"(fn [elements] (apply concat (reduce (fn [x y] (conj x (repeat 2 y))) [] elements)))","user":"5a6170fde4b0512ff01cd975"},{"problem":32,"code":"(fn [s]\n    (loop [s s\n           o []\n           ]\n        (if-not (seq s)\n            o\n            (recur (rest s) (into o (repeat 2 (first s))))\n         )))","user":"5fafa44ee4b08cb800c85b0e"},{"code":"(fn [y] (reduce concat (map (fn [x] [x x]) y)))","problem":32,"user":"505caadfe4b0bcb5664c3d3e"},{"code":"(fn dup [alist]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() alist))\n)","problem":32,"user":"4e6a79ca535d8ccf87e9feeb"},{"code":"(fn dup-seq [mylist]\r\n    (seq (loop [l mylist final '[]]\r\n           (if (empty? l) final\r\n               (recur (rest l) (conj (conj final (first l)) (first l)))))))","problem":32,"user":"4f039524535dcb61093f6b2c"},{"problem":32,"code":"#(loop [c 0 result []] (if  (= (count %) c) (seq result) (recur (inc c) (conj result (nth % c) (nth % c)))))","user":"556cb481e4b09a3098a52501"},{"code":"(fn [x]\r\n   (letfn [(dup [acc e]\r\n                (cons e (cons e acc)))]\r\n          (reverse (reduce dup () x))))","problem":32,"user":"4fc8b012e4b0ee37620e1838"},{"code":"(fn [ s ]   (interleave s s) )","problem":32,"user":"4fdf750be4b05e33b9224f9c"},{"problem":32,"code":"#(reverse (reduce (fn[x y](conj (conj x y) y)) () %))","user":"55129667e4b06e50f9beb1ac"},{"code":"; (fn [xs] (reduce concat (map #(list % %) xs)))\n\n(fn [xs] (mapcat #(list % %) xs))","problem":32,"user":"5312cdaae4b08068f379ed03"},{"problem":32,"code":"(fn\n  [coll]\n  (mapcat vector coll coll))","user":"58a413b5e4b02bd94d917f07"},{"problem":32,"code":"(fn [collec] (reduce #( concat %1 %2) '() (map #(repeat 2 %) collec)))","user":"5a634ff0e4b0512ff01cd995"},{"code":"(fn [x]\n  (apply concat (map #(repeat 2 %) x)))","problem":32,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":32,"code":"(fn duple [seqs]\n        (if (empty? seqs) '()\n            (concat (list (first seqs) (first seqs)) (duple (rest seqs)))\n            )\n        )","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn myf [x] \n  (if (= 0 (count x))\n  '()\n  (conj (myf (rest x)) (first x) (first x))\n  )\n)","problem":32,"user":"506b437de4b0eda3100c0906"},{"code":"mapcat #(list (identity %) (identity %))","problem":32,"user":"4ec7def0535d6d7199dd36e9"},{"code":"(fn dup [s]\n  (if (nil? s) \n      '()\n      (conj (dup (next s))\n            (first s) (first s))))","problem":32,"user":"4e444c11535dc968683fc4a9"},{"code":"(fn dup [x] (interleave x x))","problem":32,"user":"4ded582d535d08e6dec9fe0c"},{"problem":32,"code":"(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (conj res (first s) (first s)))\n      res)))","user":"5a481e05e4b05d388ecb6b64"},{"problem":32,"code":"(fn [s]\n  (->> s\n       (map #(repeat 2 %))\n       (apply concat)))","user":"5f597522e4b0a0bc16850a9e"},{"code":"(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))","problem":32,"user":"4fbcbd50e4b081705acca2f9"},{"problem":32,"code":"(fn [xs]\n  (reduce concat\n          (map (fn [a] [a a]) xs))\n  )","user":"50f89404e4b0aafb827eb204"},{"code":"(fn f32 [x] (loop [ret '() a x]                                                                                                                             \n                (cond                                                                                                                                         \n                 (empty? a) (sort ret)                                                                                                                        \n                 :e (recur (conj ret (first a) (first a)) (rest a))                                                                                           \n                 )                                                                                                                                            \n                ))","problem":32,"user":"4eea1a41535d93acb0a66899"},{"problem":32,"code":"(fn [x]\n  (loop [i 0 s '()]\n    (if (= i (count x))\n      (reverse s)\n      (recur (inc i) (into s (list (nth x i) (nth x i)))))))","user":"55aaa36fe4b0988bba2ad94f"},{"code":"(fn [s]\n        (loop [f (first s) r (rest s) x '()]\n          (if (empty? r) (reverse (cons f (cons f x)))\n            (recur (first r) (rest r) (cons f (cons f x)))))\n      )","problem":32,"user":"5029fccee4b023940c84aa47"},{"problem":32,"code":"(fn [x] (reverse (reduce (fn [acc val] (cons val (cons val acc))) () x)))","user":"5f6cb2a5e4b02876ed9fd057"},{"problem":32,"code":"(fn [initial-seq]\n    (interleave initial-seq initial-seq)\n    )","user":"5fe75ecfe4b05ac5b16ea18d"},{"code":"(fn [s] (reduce concat () (map #(list % %) s)))","problem":32,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":32,"code":"#(reduce (fn [acc el] (concat acc [el] [el])) [] %)","user":"585c450fe4b0f14aab7c8782"},{"problem":32,"code":";; reduce #(conj %1 %2 %2) []\n#(interleave % %)","user":"6020365ae4b0bf4ca6b10960"},{"code":"(fn [s]\n  (apply concat (map (partial repeat 2) s)))","problem":32,"user":"5139ff96e4b067e25a345ec1"},{"code":"(fn [s]\n  (reduce\n   (fn [l a]\n     (conj (conj l a) a))\n   [] s))","problem":32,"user":"4f3656d1e4b0e243712b1ec9"},{"problem":32,"code":"#(reduce (fn [v e] (conj v e e)) [] %)","user":"5fba5692e4b03f550f448230"},{"code":"(fn [array] (reduce #(conj %1 %2 %2) [] array))","problem":32,"user":"50feb0e1e4b03cd852b4e851"},{"problem":32,"code":"(let [xample '(8 6 5 )\n      ]\n(fn [x] (mapcat #(list % %) x))\n   )","user":"5610d39de4b05f002753df75"},{"problem":32,"code":"(fn my-dbl [lst]\n  (if (empty? lst)\n    '()\n    (concat (repeat 2 (first lst)) (my-dbl (rest lst)))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"code":"(fn rep [l] (cond (= l []) [] :else (concat (replicate 2 (first l)) (rep (rest l)))))","problem":32,"user":"528b9efee4b0239c8a67aea0"},{"problem":32,"code":"(fn [l] \n    (loop [x l y nil]\n          (if (empty? x)\n              (reverse y)\n              (recur (rest x) (cons (first x) (cons (first x) y))))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":32,"code":"(fn [lis]\n   (->\n    (filter\n     (let [f1 (complement sequential?)\n           f2 #(if (vector? %)\n                 (if (vector? (first %)) false true)\n                 false ) ]\n       ;;f1是一维的数据,f2是二维的数据\n       (if (vector? (first lis)) f2 f1)\n       ;;\n       )\n     (rest (tree-seq sequential? seq (repeat 2 lis)))\n     ) (sort) )\n   )","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":32,"code":"#(reduce (fn [result x] (cons x (cons x result))) '() (reverse %))","user":"540997ede4b0addc1aec66dd"},{"code":"(fn [items] (mapcat #(vector % %) items))","problem":32,"user":"52efc98de4b05e3f0be25ed2"},{"code":"#(letfn [(dup [x] (list x x))] (mapcat dup %))","problem":32,"user":"5202cfe7e4b030ee0c5b2702"},{"problem":32,"code":"(fn dup [l]\n  (if (= (count l) 0)\n    '()\n    (conj\n     (dup (rest l))\n     (first l)\n     (first l))))","user":"598ab445e4b02b9968b84ce0"},{"code":"#(loop [newcol '() cur 0] (if (< cur (count %)) (recur (concat (concat newcol [(nth % cur)]) [(nth % cur)]) (inc cur) ) newcol))","problem":32,"user":"51c9fe91e4b09ce160bef5b6"},{"code":";(fn dou [x]\n;  (if (= (count x) 0) '() (conj (dou (rest x)) (first x) (first x) )\n;  )\n;)\n(fn [x] (mapcat #(list % %) x))","problem":32,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [val] \n  (reverse (loop [val val result '()]\n    (if (empty? val)\n      result\n      (recur (rest val) (let [x (first val)] (conj (conj result x) x))))))\n  )","problem":32,"user":"521b481de4b0c4ef0be83037"},{"problem":32,"code":"reduce (fn [acc, x] (conj (conj acc x) x)) []","user":"56e02c1ce4b0ca2494a09602"},{"problem":32,"code":"(fn duplicate [lst]\n  (mapcat #(repeat 2 %) lst))","user":"59e12c94e4b08badc2a0c509"},{"problem":32,"code":"(fn [x] (reverse (reduce clojure.set/union (map #(list % %) x))))","user":"5312807fe4b08068f379ecfc"},{"code":"(fn [coll]\n  (apply concat (map #(do [%1 %1]) coll)))","problem":32,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":32,"code":"(fn d [s] (if (nil? s) () (conj (d (next s)) (first s) (first s))))","user":"587c59d1e4b01531a375eb17"},{"code":"#(reverse (reduce (fn [acc elm] (conj acc elm elm)) '() %))","problem":32,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":32,"code":"(fn[x](apply concat (map #(take 2 (repeat %)) x)))","user":"5e1ec8c0e4b0dc9594008561"},{"problem":32,"code":"(fn p32[a]\n  (mapcat #( repeat 2 %1 ) a))","user":"548f3ed8e4b0e286459a1236"},{"code":"(fn dup [lst]\n  (if (empty? lst)\n    []\n    (let [e (first lst)]\n      (concat [e e] (dup (rest lst))))))","problem":32,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":32,"code":"#(mapcat\n    (fn [x] [x x])\n     %)","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn [coll] (reduce \n             #(cons %2 (cons %2 %1))\n             nil\n             (reverse coll)))","problem":32,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn [x]\n  (let [dupx (map #(conj [] % %) x)]\n    (reduce #(conj % (first %2) (second %2)) []  dupx)))","problem":32,"user":"4fab943ee4b081705acca219"},{"code":"(fn double [x] (reduce #(conj %1 %2 %2) [] x))","problem":32,"user":"51b0fc95e4b0c53cf2e68a72"},{"code":"#(reduce (fn[x y] (concat x [y] [y])) (concat [[]] %1))","problem":32,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [vs] (reverse (reduce #(cons %2 (cons %2 %1)) [] vs)))","problem":32,"user":"4fdf566fe4b05e33b9224f99"},{"problem":32,"code":"(fn [lst]\n  (reduce (fn [acc v]\n            (conj acc v v))\n          []\n          lst))","user":"572722c4e4b0c5bde472c134"},{"problem":32,"code":"(fn [liste] (reverse \n    (loop [rliste liste result ()]\n\t    (if (empty? rliste)\n        result\n        (recur (rest rliste) (conj result (first rliste) (first rliste)))\n      )\n    )\n    ))","user":"556f2009e4b09a3098a52519"},{"code":"#(reduce (fn [x y] (into x [y y])) [] %)","problem":32,"user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) [] coll)))","problem":32,"user":"4ed3c783535d44c135fd68f6"},{"problem":32,"code":"(fn [c] (mapcat #(vector % %)  c))","user":"5e453725e4b01d43a70e8e93"},{"code":"#(apply concat (map (partial repeat 2) %1))","problem":32,"user":"4fb4099be4b081705acca2a9"},{"problem":32,"code":"(fn duplicate\n  [collection]\n  (interleave collection collection))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":32,"code":"mapcat #(into [] (repeat 2 %))","user":"56cad309e4b0ea9b8538f720"},{"code":"#(mapcat vector % %)","problem":32,"user":"4e5914e0535d8a8b8723a29b"},{"problem":32,"code":";; mapcat #(vector % %)\n#(interleave % %)","user":"54249bcce4b01498b1a71afb"},{"problem":32,"code":"#(reduce  (fn [a b] (conj a b b))[] %)","user":"5e9b7aefe4b0157ca96647f1"},{"code":"(fn [x]\n  (loop [nova [] ant x]\n    (if(empty? ant)\n    nova\n    (recur (conj nova (first ant) (first ant)) (rest ant))\n    )\n  )\n)","problem":32,"user":"4e94a9e7535dbda64a6f6b1d"},{"code":"(fn [xs]\r\n          (reduce (fn [a b] (conj (conj a b) b))\r\n                  []\r\n                  xs))","problem":32,"user":"4f07ad89535dcb61093f6c2a"},{"code":"(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))","problem":32,"user":"518a59b3e4b02bf06f6bbb4b"},{"code":"#(sort (into % %))","problem":32,"user":"4e1248b1535d04ed9115e7cf"},{"problem":32,"code":"(fn [z] (reduce #(conj %1 %2 %2) [] z))","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":32,"code":"(fn [original-seq]\n  (loop [new-seq [] rest-seq original-seq]\n  (println new-seq rest-seq)\n  (if (empty? rest-seq)\n    new-seq\n    (recur (conj new-seq (first rest-seq) (first rest-seq)) (rest rest-seq)))\n)\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"(fn [coll] (mapcat #(identity [% %]) coll))","problem":32,"user":"4e79ff2a535db169f9c796a9"},{"problem":32,"code":"(fn\n  [se]\n  (sort\n    (concat\n      se\n      se)))","user":"586a657de4b0f14aab7c88bd"},{"problem":32,"code":"(fn f [lst]\n  (if (empty? lst)\n    nil\n    (cons (first lst) (cons (first lst) (f (rest lst))))))","user":"5c62979fe4b0fca0c162264c"},{"problem":32,"code":";(fn [xs] (reduce (fn [res x] (conj res x x)) [] xs))\n\n(fn [xs] (reduce #(conj %1 %2 %2) [] xs))","user":"55150524e4b055c2f668d4d9"},{"code":"#(interleave%%)","problem":32,"user":"4e7eff9e535db966e863cc38"},{"problem":32,"code":"(fn [x] (apply concat (for [y x] [y y]\n                        )))","user":"5265337fe4b03e8d9a4a7104"},{"code":"reduce (fn[acc,e](conj acc e e)) []","problem":32,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [x & duped]\n  (if (empty? x) (reverse duped)\n    (recur (rest x) (cons (first x) (cons (first x) duped)))))","problem":32,"user":"5306e4b4e4b02e821686979d"},{"code":"reduce (fn [acc x] (conj (conj acc x) x)) []","problem":32,"user":"4e7a5395535db169f9c796ab"},{"code":"(fn [x]\r\n  (loop [s x r []]\r\n    (if (empty? s) r\r\n    (recur (rest s) (conj r (first s) (first s))))))","problem":32,"user":"4deff9f9535d08e6dec9fe15"},{"problem":32,"code":"(fn [coll] (loop [coll coll, acc '()] (if (empty? coll) (reverse acc) (recur (rest coll) (conj (conj acc (first coll)) (first coll)) \n                                                                             ) ; recur\n                                        ) ; if\n             ) ; loop\n  ) ; fn","user":"4e268c6e535deb9a81d77ef4"},{"code":"(fn dup [seq]\n        (if (empty? seq)\n            ()\n          (let [f (list (first seq))]\n            (concat f f (dup (rest seq))))))","problem":32,"user":"52aa524fe4b0c58976d9ac64"},{"problem":32,"code":"(fn [a x] (if-let [l (last x)] (recur (conj (conj a l) l) (butlast x)) a)) '()","user":"54bc575ce4b0ed20f4ff6ecb"},{"code":"(fn me [xs]\n  (if (= (next xs) nil)\n    (list (first xs) (first xs))\n    (concat (list (first xs) (first xs)) (me (rest xs)))))","problem":32,"user":"51ef66a7e4b0871fa145d9a5"},{"problem":32,"code":"reduce \n\t(fn [myvector part]\n    \t(conj (conj myvector part) part)\n    )\n\t[]","user":"579be21fe4b05b1deef9adff"},{"problem":32,"code":"(fn duplicate [x]\n  (reduce #(conj %1 %2 %2) [] x))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn cpy [x]\r\n  (loop [falta x sol []]\r\n    (if-not (empty? falta)\r\n      (recur (rest falta) (conj sol (first falta) (first falta)))\r\n      (seq sol)\r\n    )\r\n  )\r\n)","problem":32,"user":"4e94a900535dbda64a6f6b18"},{"problem":32,"code":"(fn [input-seq]\n  (reduce (fn [return-seq item]\n            (conj (conj return-seq item) item))\n    []\n    input-seq))","user":"5eecd339e4b07c55ae4a0507"},{"code":"(fn [x] (reverse (reduce #(conj % %2 %2) '() x)))","problem":32,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn[x](mapcat #(seq [% %])x) )","problem":32,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [xs]\n  (loop [i (count xs) re xs ne []]\n    (if (> i 0)\n      (recur (dec i) (drop 1 re) (conj ne\n        (first re) (first re)))\n      ne)))","problem":32,"user":"50611456e4b0dc10a69545a5"},{"problem":32,"code":"#(loop [n 0 s % d []]\n   (if (= n (count %)) d\n     (recur (inc n) (rest s) (concat d [(first s) (first s)]))))","user":"558378dce4b05c286339e115"},{"code":"(fn[s] (reverse (reduce (fn[acc,t]( conj acc t t ) )  '() s) ))","problem":32,"user":"513f53c6e4b051389b345b40"},{"problem":32,"code":"(comp reverse (partial reduce #(cons %2 (cons %2 %1)) '()))","user":"575f2529e4b08062f99a4e7a"},{"problem":32,"code":"(fn [col] (mapcat identity (map #(repeat 2 %) col)))","user":"5766fbb7e4b0a07e8fc180b6"},{"code":"(fn dup-elements [s]\n  (let [[fst & rst] s]\n    (if (empty? s)\n      s\n      (cons fst (cons fst (dup-elements rst))))))","problem":32,"user":"509e8da7e4b08df8156e9e2f"},{"code":"reduce (fn [s x] (conj s x x)) []","problem":32,"user":"512f2d17e4b0762be4c7aad8"},{"code":"(fn [c] (into (empty c) (interleave c c)))","problem":32,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn duplicate\n  ([x] (duplicate '() x))\n  ([aux x] (if (empty? x) aux\n             (recur (concat aux [(first x) (first x)]) (rest x)))))","problem":32,"user":"53a2ec2be4b0f1fc74538830"},{"code":"(fn [x]\r\n   (mapcat #(list % %) x)\r\n   )","problem":32,"user":"510a6bece4b06956752d35af"},{"code":"(fn [s] (apply concat (map #(list % %) s)))","problem":32,"user":"4df20dda535d08e6dec9fe23"},{"code":"(fn [s]\n  ((fn _dup [s a]\n     (let [[h & r] s]\n       (if (nil? h) a\n           (_dup r (concat a [h h]))\n           ))) s []))","problem":32,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":32,"code":"(fn [a]\n  (sort (concat a a)))","user":"55634f38e4b0c656e3ff17e8"},{"problem":32,"code":"#(reduce concat '() (map (partial repeat 2) %))","user":"5243233fe4b076204b44faac"},{"problem":32,"code":"(fn group-up\n         ([L] (group-up L []))\n         ([remaining grouped]\n          (let [next-char (first remaining)\n                right (rest remaining)]\n            (if (= remaining (empty remaining))\n              grouped\n              (group-up right (conj grouped next-char next-char))))))","user":"556238bce4b0c656e3ff17d3"},{"code":"(fn[s]\n  (apply interleave (repeat 2 s)))","problem":32,"user":"4ec64981535d6d7199dd36c7"},{"problem":32,"code":"(fn duplicate [seq]\n  (sort (concat seq seq)))","user":"5a932f63e4b0d174b936c71b"},{"problem":32,"code":"(fn [it]\r\n (loop [here it\r\n       there []]\r\n   (if (empty? here)\r\n     there\r\n     (let [this (first here)]\r\n     (recur\r\n      (rest here) \r\n      (conj there this this))))))","user":"4ddc5d0a535d02782fcbea05"},{"code":"(fn dup[x] (if (empty? x)  x (conj (dup (rest x)) (first x) (first x)  )))","problem":32,"user":"4e080562535d04ed9115e7aa"},{"problem":32,"code":"(fn dup [xs]\n  (mapcat (fn [x] [x x]) xs))","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn [l]\n  (reverse (reduce (fn [a b] (cons b (cons  b a ))) '() l)))","problem":32,"user":"4df9c598535d04ed9115e77a"},{"code":"#(reduce concat (map (fn [x] (list x x)) %))","problem":32,"user":"4f04165d535dcb61093f6b9c"},{"code":"(fn f [x]\n  (reduce \n    (fn [a e] (conj a e e))\n    []\n    x\n  )\n)","problem":32,"user":"516ed04ee4b06aac486e5b30"},{"code":"(fn foo [s]\n  (if (empty? s)\n    ()\n    (conj (foo (rest s)) (first s) (first s)))\n  )","problem":32,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":32,"code":"(fn [l]\n  (loop [[car & cdr] l\n         dupes []]\n    (if (empty? cdr)\n        (conj dupes car car)\n        (recur cdr (conj dupes car car)))))","user":"5f0b8243e4b0f30dddfb5d45"},{"problem":32,"code":"(fn duplicate [values] (reduce (fn [a b] (-> (conj a b) (conj b) )) [] values))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":32,"code":"(fn [s] (reduce concat (map (fn [x] (seq [x x])) s)) )","user":"540904a7e4b0addc1aec66d2"},{"code":"(fn[x] (sort (concat x x)))","problem":32,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":32,"code":"(fn [s] (->> s\n    (partition-by identity)\n    (mapcat #(repeat 2 %))\n    (reduce concat)))","user":"5ca622f3e4b048ec896c5be0"},{"problem":32,"code":"(fn [x]\n  (loop [in x out '()]\n  (if (empty? in)\n    (reverse (apply concat out))\n    (recur (rest in)\n    \t(conj\n         \tout\n         \t(let [z (first in)]\n              (list z z))\n        )\n    )\n  )\n  )\n)","user":"577bfef9e4b0d3393e5deb2d"},{"code":"#(reduce concat (map (fn [x] [x x]) %1))","problem":32,"user":"504f2efae4b0e7ad84dbc4c9"},{"problem":32,"code":"(fn [lst]\n  (reduce #(concat %1 (repeat 2 %2)) [] lst))","user":"5e668d87e4b0e171e1033681"},{"problem":32,"code":"(fn dup [arr]\n  (mapcat (fn [i] [i i]) arr))","user":"5889dc13e4b0f1effa3b774a"},{"problem":32,"code":"(fn sk-duplicate [l]\n  (interleave l l))","user":"51d42f44e4b013d740b70ddb"},{"problem":32,"code":"(fn [input-seq]\n  (loop [full-seq input-seq\n         new-seq input-seq]\n    (let [current-elem (first full-seq)]\n      (if (empty? full-seq)\n        (sort new-seq)\n        (recur (rest full-seq) (conj new-seq current-elem))))))","user":"53b05a36e4b047364c044481"},{"problem":32,"code":"(fn [v] (reduce (fn [acc item] (conj acc item item)) (empty v) v))","user":"5604bcf7e4b08b23635d315a"},{"problem":32,"code":"#(sort (apply concat (take 2 (repeat %))))","user":"55f27bf9e4b06e875b46ce45"},{"code":"(fn [sq] (mapcat #(repeat 2 %1) sq))","problem":32,"user":"4dcc3281535d5973398f9291"},{"code":"#(for [a % b [a a]] b)","problem":32,"user":"4f244f26e4b0d66497709fea"},{"code":"#(loop [col % ret []]  (if (empty? col) ret (recur (rest col) (conj ret (first col) (first col)  ))))","problem":32,"user":"50463347e4b011c5dfee771e"},{"code":";(fn [col1] (reduce concat (map #(take 2 (repeat %)) col1)))\n#(interleave % %)","problem":32,"user":"514d2c7ee4b019235f6c0582"},{"code":"#(reduce (fn [k s] (conj k s s)) [] %)","problem":32,"user":"51f55bdae4b0abb92f97f9d0"},{"problem":32,"code":"(fn d [xs]\n  (if (seq xs)\n    (cons (first xs)\n          (cons (first xs)\n                (d (rest xs))))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":32,"code":"(fn  duplicate [coll]\n\t(interleave coll coll))","user":"5bb4baace4b0a20761a23552"},{"code":"(fn __ [l]\n  (if (empty? l)\n    (list)\n    (conj (conj (__ (rest l))\n                       (first l))\n                 (first l))))","problem":32,"user":"51e6a2bce4b0ab43cc26c21d"},{"problem":32,"code":"(fn\n  [xs]\n  (reverse (reduce (fn [acc n] (conj (conj acc n) n)) '() xs)))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn dup-seq [xs]\n  (reduce concat () (map #(list %1 %1) xs))\n)","problem":32,"user":"4fb710f4e4b081705acca2cd"},{"problem":32,"code":"(fn [s]\n  (mapcat vector s s))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [s]\n(reduce concat (map (fn [x] [x x]) s)) )","problem":32,"user":"50a173e4e4b08df8156e9e68"},{"problem":32,"code":"(fn [xs]\n  (mapcat (partial repeat 2) xs))","user":"5952d75ce4b066ee0a44aed4"},{"problem":32,"code":"mapcat #(conj (vector %) %)","user":"587a3babe4b01531a375eae2"},{"code":"(fn [xs]\n  (reduce #(conj % %2 %2) [] xs))","problem":32,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":32,"code":"(partial\n reduce\n  (fn [acc x]\n    (into acc [x x]))\n  [])","user":"5e0b6375e4b099d064962f7b"},{"problem":32,"code":"#(reverse (reduce (fn [s, v] (conj (conj s v) v)) '() %))","user":"55dd91c9e4b050e68259b3ca"},{"problem":32,"code":"(fn duplicate-each\n  [input]\n  (into []\n        (mapcat #(list % %) input)))","user":"4fc524aae4b081705acca37e"},{"problem":32,"code":"(fn [x]\n      (loop [s x acc '()]\n        (if (nil? (first s))\n              (reverse acc)\n              (recur (rest s) (conj acc (first s) (first s)))\n          )\n        )\n      )","user":"5471f2fbe4b094393f72dd70"},{"problem":32,"code":"(fn tset [x]\n  (mapcat (fn [e] (list e e) ) x)\n)","user":"56f18d0ce4b04a395b9a0496"},{"problem":32,"code":"#(loop [[head & tail] %\n        i 0\n        result []]\n   (if-not head\n     result\n     (if (= 2 i)\n       (recur tail 0 result)\n       (recur (cons head tail) (inc i) (conj result head)) ))\n   )","user":"598085e6e4b021a7a535fdd3"},{"problem":32,"code":"(fn [input]\n  (loop [inp input result []]\n    (let [[head & tail] inp]\n      (if (empty? inp)\n        result\n        (recur tail (conj result head head))))))","user":"57c176abe4b05aa3c4741ca2"},{"problem":32,"code":"reduce (fn magic\n         [curr elem]\n         (let [aa (conj curr elem)]\n           (conj aa elem))) []","user":"595bc925e4b066ee0a44afe2"},{"code":"(fn f [v] (when-let [[h & t] v] (cons h (cons h (f t)))))","problem":32,"user":"4e6a4038535d8ccf87e9feb5"},{"problem":32,"code":"#((fn [x y] (if (empty? x) y (recur (rest x) (concat y [(first x) (first x)])))) % [])","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [x]\n (interleave x (not-empty x)) \n)","problem":32,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [x] ((fn [coll] (mapcat  #(if (sequential? %) % [%]) coll)) (map (fn[y] [y y ]) x)))","problem":32,"user":"52737333e4b03e8d9a4a747f"},{"problem":32,"code":"#(apply concat \n    (for [x %]\n  \t\t[x x]))","user":"5db19599e4b010eb3c36cd05"},{"problem":32,"code":"(fn [n]\n  (loop [i 0 v []]\n    (if (< i (count n))\n      (recur  (inc i) (conj v (nth n i) (nth n i)))\n      v)))","user":"5ac9da95e4b0e27600da77d4"},{"problem":32,"code":"(fn dbl [xs] (let [x (first xs)] (if x (lazy-seq (list* x x (dbl (rest xs)))))))","user":"5bc20634e4b07a9b28b10022"},{"problem":32,"code":"(fn dup [s]\n    (if (empty? s)\n      '()\n      (cons (first s)\n            (cons (first s) (dup (rest s))))))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":32,"code":"(fn [xs]\n  (reverse\n  (reduce\n   (fn [ys x]\n     (conj ys x x)\n   )\n   '()\n   xs\n  ))\n)","user":"5aac468ae4b073f17744256b"},{"problem":32,"code":"(fn [in] (mapcat \n            (fn [a] (list a  a))  in ))","user":"5c94cbb1e4b048ec896c5a3d"},{"code":"#(sort (reduce conj % %))","problem":32,"user":"4fe8d1b5e4b0547ebccb2425"},{"code":"#(loop [coll %1\n           res []]\n      (if (empty? coll)\n        res\n        (recur\n          (rest coll)\n          (conj res (first coll) (first coll)))))","problem":32,"user":"50e8cac5e4b0ebbe794eb7ef"},{"code":"(fn dupp [x] \n  \t(loop [n (- (count x) 1) y []]\n      (if (>= n 0) \n        (recur (dec n) (cons (nth x n) (cons (nth x n) y)))\n      y)))","problem":32,"user":"53504a7de4b084c2834f4ad9"},{"code":"(fn dup [[x & ll]]\n    (cond\n        (empty? ll) (list x x)\n        :else (cons x (cons x (dup ll)))\n    ))","problem":32,"user":"4fbdcb87e4b081705acca30a"},{"code":"(fn [col]\n  (reduce\n\t (fn [cur val]\n\t     (conj cur val val))\n\t ()\n\t (reverse col)))","problem":32,"user":"4ecb1641535d6d7199dd370e"},{"problem":32,"code":"(fn [s]\n  (seq (reduce #(conj %1 %2 %2) [] s)))","user":"5adcc688e4b0837691e92c05"},{"problem":32,"code":"(fn dupseq [xs]\n  (apply concat (map (partial replicate 2) xs)))","user":"598601f9e4b021a7a535fe79"},{"code":"mapcat (fn [x] (cons x (cons x nil)))","problem":32,"user":"4fb7b80ae4b081705acca2d4"},{"problem":32,"code":"(fn\n  [s]\n  (reduce (fn [r i]\n            (concat r (repeat 2 i)))\n          []\n          s))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":32,"code":"(fn my-duplicater\n   [coll]\n   (mapcat (fn [x] [x x]) coll))","user":"567c7fefe4b05957ce8c61bc"},{"problem":32,"code":"(fn [coll]\n   (loop [coll coll\n          coll-acc []]\n     (if (empty? coll)\n       (seq coll-acc)\n       (recur (rest coll) (conj coll-acc (first coll) (first coll))))))","user":"5e724492e4b085ba37836dc7"},{"code":"(fn[x] (reduce concat (map #(list %1 %1) x)))","problem":32,"user":"52ff6ea0e4b0d8b024fd3707"},{"problem":32,"code":"(fn [seq]\n   (reduce\n     (fn [acc curr]\n       (conj acc curr curr))\n     []\n     seq))","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn [list](reduce (fn [x elem]\n                    (conj (conj x elem) elem)) [] list))","problem":32,"user":"4fb86dc9e4b081705acca2d8"},{"problem":32,"code":"(fn [xs]\n  (loop [in xs\n         out nil]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out (list (first in) (first in)))))))","user":"5ad3d730e4b0ea6055cfabc8"},{"problem":32,"code":"(fn [coll]\n  (reduce concat\n   (map (fn [x] (cons x (list x))) coll)))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"#(for [x %1 y [1 2]] x)","problem":32,"user":"5012036ce4b0a040369c12f4"},{"problem":32,"code":"#(reduce (fn [ret curr]\n           (conj ret curr curr)) [] %)","user":"5883584ae4b0f1effa3b7674"},{"problem":32,"code":"(fn [xs]\n  (->> xs\n\t  (map (fn [x] [x x]))\n      (reduce concat)))","user":"51bb08a4e4b0fe3ecfb46446"},{"code":"(fn [q]\n  (into [] (for [x q y [0 1]] x)))","problem":32,"user":"517d1018e4b0f5e87c18f25e"},{"problem":32,"code":"(fn [coll] (loop [rcoll [] lcoll coll]\n               (if (empty? lcoll)\n                rcoll\n                (recur (conj rcoll (first lcoll) (first lcoll)) (rest lcoll)))))","user":"5d363543e4b01671435dbd20"},{"problem":32,"code":"(fn [input]\n    (loop [[c & cs] input  result []]\n      (if (nil? c)\n        result\n        (recur cs (conj result c c)))))","user":"5cd4c3dae4b0ccb061962925"},{"code":"#(reduce (fn [s t] (conj (conj s t) t)) [] %)","problem":32,"user":"53820087e4b06839e8705ecf"},{"problem":32,"code":"(fn dupe\n  ([lst] (dupe lst '()))\n  ([lst dupes] (if (= '() lst)\n                 dupes\n                 (dupe (rest lst) (concat dupes (list (first lst) (first lst)))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":32,"code":"(fn [col] (\n           reduce #(conj %1 %2 %2) [] col\n           \n           \n           ))","user":"53b0750fe4b047364c044483"},{"problem":32,"code":"#(apply concat (map (fn [x] (seq [x x])) % ))","user":"536829c8e4b0243289761e8b"},{"code":"(fn dup [seq]\n  (reduce (fn [vec e] (apply conj vec (repeat 2 e))) [] seq))","problem":32,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":32,"code":"(fn dupl [lst]\n  (if (empty? lst)\n    nil\n    (concat (repeat 2 (first lst)) (dupl (rest lst)))))","user":"586c5a34e4b01531a375e97a"},{"problem":32,"code":"#(->> %\n       (repeat)\n       (take 2)\n       (apply interleave))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn [in-coll]                                                                                                                                                \n  ((fn d [coll s]                                                                                                                                                      \n     (if (seq coll)                                                                                                                                                    \n       (lazy-seq                                                                                                                                                       \n         (if s                                                                                                                                                         \n           (cons (first coll) (d coll false))                                                                                                                          \n           (cons (first coll) (d (rest coll) true))))))                                                                                                                \n     in-coll true))","problem":32,"user":"4ec75077535d6d7199dd36e0"},{"problem":32,"code":"mapcat (fn [e] (list e e))","user":"5abe2fc2e4b073f17744271e"},{"problem":32,"code":"(fn my-dup\n  [lst]\n  (mapcat #(list % %) lst) )","user":"59dd387be4b0a0ac046f2502"},{"problem":32,"code":"(fn [v] (mapcat identity (map (fn [e] (list e e)) v)))","user":"5465712ee4b01be26fd746dc"},{"problem":32,"code":"#(sort (reduce into '() (take 2 (iterate identity %))))","user":"53d8da61e4b0e771c3025471"},{"problem":32,"code":"(fn [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))","user":"563f4c47e4b08d4f616f5ed2"},{"code":"(fn dbl[s] \n  (loop [source s target []]\n    (if (< (count target) (* 2 (count s)))\n      (recur (rest source) (conj target (first source) (first source)))\n      target)\n   ))","problem":32,"user":"50e448bae4b0463d3207248d"},{"code":"(fn [s]\n  (loop [acc [] xs s]\n    (if (empty? xs) acc\n      (recur (concat acc (repeat 2 (first xs))) (rest xs)))))","problem":32,"user":"52199105e4b0c4ef0be82ff9"},{"problem":32,"code":"(fn [coll]\n  (reduce #(concat %1 (list %2 %2)) () coll))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"#(reverse (reduce \n  (fn [list elem]\n    (cons elem (cons elem list)))\n  '()\n  %))","problem":32,"user":"4f28eb85e4b0d6649770a01d"},{"problem":32,"code":"(fn duplicate [coll] (reduce #(conj %1 %2 %2) [] coll))","user":"53dc94c8e4b094d41abdfefc"},{"problem":32,"code":"(fn dup [seqq] (if (empty? seqq) '() (cons (first seqq) (cons (first seqq) (dup (rest seqq))))))","user":"5a18f868e4b0ff51aa4b31f7"},{"problem":32,"code":"reduce (fn [r x] (concat r (repeat 2 x))) []","user":"60cb4008e4b0e0fa5f1b4316"},{"problem":32,"code":"(fn [x]\n  (reduce\n    (fn [a b]\n      (concat a [b b]))\n    []\n    x))","user":"5b21ad60e4b03cfeda66ed54"},{"problem":32,"code":"(fn [coll] \n  (loop [x coll y []]\n    (if x\n      (recur (next x) (concat y [(first x) (first x)]))\n      y)))","user":"5df08767e4b093ff717275bf"},{"problem":32,"code":"(fn [inputSeq]\n   (loop [ curSeq inputSeq\n           resVec [] ]\n     (if (nil? curSeq)\n       (seq resVec)\n       (do\n         (recur (next curSeq) (conj (conj resVec (first curSeq)) (first curSeq)))\n       )\n     )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [memo item] (conj memo item item))\n          []\n          x))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn repeat-first [nums] \n         (if (first nums)\n                   (concat (repeat 2 (first nums))\n                         (repeat-first (rest nums)))\n                   (list)))","problem":32,"user":"53a26cede4b0f1fc7453882a"},{"problem":32,"code":"(fn [x] (sort(take (* 2 (count x)) (cycle x))))","user":"583d669ee4b089d5ab817d9a"},{"code":"(partial mapcat #(vector % %))","problem":32,"user":"4df669d4535d08e6dec9fe35"},{"problem":32,"code":"(fn [coll]\n  (apply concat \n    (map #(list % %) coll)))","user":"57220050e4b0c5bde472c0c1"},{"problem":32,"code":"#(loop [rlist % alist '()]\n  (if (empty? rlist)\n    (reverse alist)\n    (recur (rest rlist) (conj alist (first rlist) (first rlist)))\n   )\n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":32,"code":"(fn doble [arr]\n  (if (empty? arr) []\n    (conj (conj (doble (drop-last arr)) (last arr)) (last arr))))","user":"5e42b688e4b01d43a70e8e6b"},{"problem":32,"code":"(fn [xs]\n   (loop [result '()\n          l xs]\n     (if (empty? l)\n       (reverse result)\n       (recur (conj result (first l) (first l)) (rest l)))))\n\n;; Or #(interleave % %)","user":"4f213e2ee4b0d66497709fcf"},{"code":"(fn [xs] (apply concat (map #(list % %) xs)))","problem":32,"user":"4f5030a9e4b03ad3f0c10cfd"},{"code":"(fn [coll] (interleave coll coll) )","problem":32,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":32,"code":"#(reduce concat (map (juxt identity identity) %))","user":"55f95de6e4b03cbcff9738c1"},{"problem":32,"code":"(fn duble [x] (if (empty? x) nil (cons (first x) (cons (first x) (duble (rest x))))))","user":"59078134e4b047aa04b1995c"},{"code":"#(mapcat (fn[x] [x x]) %)","problem":32,"user":"511c91ace4b00c2a1fa7ff7a"},{"code":"(fn [x]\n  (loop [y x, tmp (first y), res ()]\n    (cond (= y ()) (reverse res)\n          :else (recur (rest y) (first (rest y)) (conj res tmp tmp)))))","problem":32,"user":"4e49a7bb535dc968683fc4c6"},{"problem":32,"code":"#(reduce (fn [x y] (conj (conj x y) y)) [] %)","user":"5d63b06be4b0c9e5857d5025"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [v y] (concat v [y y])) [] x))","user":"500e6ddee4b04a05d36fcc06"},{"code":"(fn [y] (apply concat (map (fn [x] (list x x)) y)))","problem":32,"user":"52eee533e4b05e3f0be25ecb"},{"code":"(fn [x] (sort (into (into '() x) x)))","problem":32,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn [c] (reverse (reduce #(conj % %2 %2) '() c)))","problem":32,"user":"533b36c0e4b0e30313ee6ccb"},{"problem":32,"code":";; mapcat #(list % %)\n\n;; mapcat #(vector % %)\n\nmapcat #(vector % %)","user":"57fe7d7ce4b0d3187e9009d0"},{"problem":32,"code":"(fn [input]\n    (reduce #(conj %1 %2 %2)\n            []\n            input))","user":"54508859e4b0e397800069a3"},{"problem":32,"code":"(fn [items]\n  (let [a2 (atom [])]\n    (doseq [item items]\n      (swap! a2 #(conj %1 item))\n      (swap! a2 #(conj %1 item)))\n    @a2))","user":"5669eb9ae4b04acd4f672e02"},{"code":"mapcat (fn [j] (take 2 (cycle [j])))","problem":32,"user":"4f7fc9a1e4b033992c121bee"},{"code":"(fn [a] (apply concat (map (fn [x] (cons x (cons x []))) a)))","problem":32,"user":"50f9776be4b0e7c80cb15a4e"},{"problem":32,"code":"(fn [sq] (->> sq\n              (reduce (fn [result s]\n                        (conj result s s)) [])))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn [s] (loop [ss s r []] (if (empty? ss) r (recur (next ss) (conj (conj r (first ss)) (first ss))))))","problem":32,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":32,"code":"(fn [l]\n    (reduce #(concat %1 %2) (map #(vector % %) l)))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn dbl [c]\n    (if (empty? c)\n        c\n        (concat (repeat 2 (first c)) (dbl(rest c)))))","problem":32,"user":"513a2f23e4b067e25a345ec6"},{"problem":32,"code":"(fn dup [coll]\n  (let [x (first coll) y (next coll)]\n    (concat (repeat 2 x)\n            (if (not= nil y)\n              (dup y)))))","user":"542c026ae4b0dad94371f29a"},{"problem":32,"code":"(fn dup [x] (if (empty? x) nil (concat (list (first x) (first x)) (dup (rest x)))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":32,"code":"(fn dup-seq\n  ([x] (dup-seq x '()))\n  ([x y]\n   (if-not (nil? x)\n     (dup-seq (next x) (conj y (first x) (first x)))\n     (reverse y))))","user":"551c594de4b07993ea3788dc"},{"problem":32,"code":"(fn [arg]\n  (for [a arg\n        b (range 2)]\n    a))","user":"5cc092d1e4b0ccb061962790"},{"problem":32,"code":"(fn caps [entry] \n  (when (first entry)\n    \n    (concat (list (first entry) (first entry)) (caps (rest entry)) )\n    )\n)","user":"53f12b77e4b0742d9025b0da"},{"problem":32,"code":"(fn ! [s]\n\t(if (empty? s) (empty s)\n       (let [f (first s) r (rest s)]\n       \t\t(cons f (cons f (! r)))\n         )\n      )\n  )","user":"54c271b9e4b045293a27f602"},{"code":"#(reduce concat (map list % %))","problem":32,"user":"4e46e48b535dc968683fc4b7"},{"problem":32,"code":"(fn dupp\n  [lst]\n  (mapcat #(concat (list %) (list %)) lst))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(partial mapcat #(take 2 (repeat %)))","problem":32,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":32,"code":"(fn [l] (loop [r [] l l] (if (empty? l) r (recur (conj r (first l) (first l)) (rest l)))))","user":"5995f8ade4b0b211ea3aaae9"},{"code":"(fn double-coll [coll]\n  (if (empty? coll)\n    ()\n    (into (double-coll (rest coll)) (list (first coll) (first coll)))))","problem":32,"user":"51e595a6e4b0efabf93c02d8"},{"problem":32,"code":"(fn duplicate-seq [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":32,"code":"(fn [s] (reverse (reduce #(into %1 %2) (map #(repeat 2 %) s))))","user":"56742817e4b05957ce8c612d"},{"problem":32,"code":"(fn dup-map [s]\n  (let [x (first s)]\n    (if (nil? x)\n      '()\n      (concat [x x] (dup-map (rest s))))))","user":"551747e0e4b06a49daca83c1"},{"problem":32,"code":"#(reduce (fn[m v] (concat m (repeat 2 v))) '() %)","user":"560152dee4b04bb52996e186"},{"code":"#(reduce (fn [coll i] (conj coll i i)) [] %)","problem":32,"user":"526c2340e4b03e8d9a4a7281"},{"problem":32,"code":"mapcat (fn[z][z z] )","user":"58c1b4f5e4b021aa9917ed01"},{"problem":32,"code":";(fn [x]\n;  (reduce concat []\n;  (map #(conj % (first %)) (partition 1 x))))\n#(interleave % %)","user":"56949fc5e4b0dcc4269f4120"},{"code":"(partial reduce #(concat %1 [%2 %2]) [])","problem":32,"user":"534bde26e4b084c2834f4a81"},{"code":"(fn [x]\r\n(loop [[y & more] x\r\n        z []]\r\n(if (nil? y) z\r\n (recur more (concat z [y y]))\r\n )))","problem":32,"user":"4ea09441535d7eef308072a7"},{"problem":32,"code":"(fn [s] (mapcat (fn [el] [el el]) s))","user":"5545eebee4b0a04f79299539"},{"problem":32,"code":"(fn [col]\n  (loop [el col res []]\n    (if (seq el)\n      (recur (rest el) (apply (partial conj res) (->> el first constantly (repeatedly 2))))\n      res)))","user":"57c7cef5e4b05aa3c4741d0d"},{"code":"#(reduce (fn [a b] (conj (conj a b) b)) [] %)","problem":32,"user":"4f3ae998e4b0e243712b1f1f"},{"problem":32,"code":"#(loop [arr %\n        out ()]\n   (if (empty? arr)\n     out\n     (recur (next arr) (concat out [(first arr) (first arr)]))\n     )\n  )","user":"56814cbce4b0945ebc182a81"},{"problem":32,"code":"reduce #(concat %1 (list %2) (list %2)) ()","user":"596f6683e4b069c0a1a19877"},{"problem":32,"code":"(fn\n  [s]\n  (loop [s s r ()]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) (cons (first s) (cons (first s) r))))))","user":"56df632ce4b0ca2494a095f2"},{"problem":32,"code":"(fn [my-seq] (apply concat (map #(conj () % %) my-seq)))","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":32,"code":"(fn [L]\n    (loop [Ret '() First (first L) Rest (rest L) ]\n      (if (nil? First)\n        (reverse Ret)\n        (recur \n          (conj Ret First First)\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"#(mapcat (fn [el] (repeat 2 el)) %)","problem":32,"user":"4e7e33a3535db169f9c79708"},{"problem":32,"code":"(fn duplicate [coll]\n  (reduce #(apply conj %1 [%2 %2]) [] coll))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn myFunc [col]\n  (reduce\n  (fn conjo [x y] (conj (conj x y ) y))  [] col  ))","problem":32,"user":"51427a8be4b0b50abeb46b37"},{"problem":32,"code":"(fn duplicate\n  ([gseq]\n   (duplicate gseq '()))\n  ([gseq res]\n   (if (empty? gseq)\n     (reverse res)\n     (duplicate (rest gseq) (conj res (first gseq) (first gseq)))\n     ))\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":32,"code":"(fn [coll]\n      (reduce\n       #(conj %1 %2 %2)\n       '()\n       (reverse coll)))","user":"58db48a5e4b0a4d5acaab679"},{"code":"(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      acc\n      (let [h (first c), t (rest c)]\n        (recur t (conj acc h h))))))","problem":32,"user":"50a83794e4b054305ba5a831"},{"code":"#(loop [col %1\n        acc []]\n   (cond\n    (empty? col) acc\n    :else (recur (rest col) (conj acc (first col) (first col)))))","problem":32,"user":"52fc89b2e4b047fd55837019"},{"problem":32,"code":"mapcat (fn [ele] (list ele ele))","user":"60096aabe4b074f607df667f"},{"problem":32,"code":"(fn my-dupe \n    ([seq] (my-dupe seq ()))\n    ([seq collection]\n        (cond\n            (empty? seq) (into () collection)\n            :else \n                (my-dupe (rest seq)\n                        (conj collection\n                           (first seq)\n                           (first seq))))))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":32,"code":"#(loop [l % ret '[]]\n       (if (nil? l)\n         ret\n         (recur (next l) (conj ret (first l) (first l)))))","user":"5386f784e4b06839e8705f17"},{"problem":32,"code":"#(apply concat\n\t(map (fn [x] (repeat 2 x)) %1))","user":"5ed70b97e4b016b56eae05e6"},{"problem":32,"code":"(fn [v]\n  (->> v\n      (repeat 2)\n      (apply interleave)))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":32,"code":"(fn [input]\n   (loop [duplicate '() inputs input]\n     (if (empty? inputs)\n       duplicate\n     (recur\n       (conj (conj duplicate (last inputs)) (last inputs))\n       (drop-last inputs)))))","user":"5d40f41ae4b05dd059a5436d"},{"problem":32,"code":"(fn dup [sq]\n  (let [sq (seq sq)]\n    (mapcat #(repeat 2 %) sq)\n    ))","user":"60436423e4b02d28681c77a3"},{"problem":32,"code":"reduce (fn [m i] (conj m i i)) []","user":"5b274fd1e4b063e2438bcc3b"},{"problem":32,"code":"(partial reduce (fn [acc val] (conj acc val val)) [])","user":"594783bee4b07ddc2dafada1"},{"code":"(partial reduce (fn [a b] (conj a b b)) [] )","problem":32,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [a] (apply concat (map (fn [x] (list x x)) a)))","problem":32,"user":"4e2164ff535d04ed9115e815"},{"problem":32,"code":"#(sort (concat (identity %) %))","user":"56163cc1e4b06b1bb21829ff"},{"code":"(partial reduce #(concat %1 (repeat 2 %2)) ())","problem":32,"user":"4fef4379e4b0678c553fc312"},{"code":"(fn [x] (apply concat (map (fn [y] (list y y)) x)))","problem":32,"user":"50ce09e6e4b0ffc302be4bc6"},{"problem":32,"code":"(fn [input]\n  (loop [in input\n         out []] \n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out \n                   (first in)\n                   (first in))))))","user":"55d70b8fe4b0e31453f64a9c"},{"code":"(fn dupseq [coll]\n   (if (= (count coll) 1)\n     (lazy-seq [(first coll) (first coll)])\n     (lazy-seq\n      (cons\n       (first coll)\n       (cons (first coll)\n             (lazy-seq (dupseq (rest coll))))))))","problem":32,"user":"52cc582ae4b07d0d72b27362"},{"problem":32,"code":"(fn [vs]\n  (interleave vs vs))","user":"53684a2fe4b0243289761e8c"},{"problem":32,"code":"(fn [l] (apply concat  (map #(do [% %]) l)))","user":"58731176e4b01531a375ea2a"},{"code":"(fn [xs] (apply concat (map (fn [x] [x x]) xs)))","problem":32,"user":"52baea85e4b07a9af57922d9"},{"problem":32,"code":"#(reverse (reduce (fn[x y](conj x y y)) () %))","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"problem":32,"code":"#(->> %\n      (map (fn [x] [x x]))\n      (apply concat))","user":"5c664b87e4b0fca0c16226a5"},{"problem":32,"code":"(fn [sq] (loop [xs sq\n                acc []]\n           (if-let [x (first xs)]\n             (recur (rest xs) (conj acc x x))\n             acc)))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":32,"code":"#(loop [new [] c 0] \n   (if (>= c (count %))\n     new\n     (recur (conj new (nth % c) (nth % c)) (inc c))))","user":"541c1e46e4b01498b1a71a70"},{"problem":32,"code":"#(->> (for [x %]\n         [x x])\n      (apply concat))","user":"5a36e788e4b0ddc586f153ec"},{"problem":32,"code":"#(reduce (fn\n            [new-arr arr]\n            (conj new-arr arr arr))\n          []\n\t\t  %)","user":"576d6266e4b0979f89651563"},{"problem":32,"code":"(fn [input]\n  (let [f (fn duplicate-seq [input result]\n\t  (if (empty? input)\n\t\t  result\n\t\t  (let [head (first input)\n\t\t        tail (rest input)\n\t\t        res (conj result head)]\n\t\t    (recur tail (conj res head)))))]\n  (f input [])))","user":"531dc21be4b08068f379edb1"},{"code":"(fn thing [xs]\n  (if (empty? xs) '() (cons (first xs) (cons (first xs) (thing (rest xs))))))","problem":32,"user":"4ec07699535dfed6da9c6da2"},{"code":"#(reduce (fn [acc item] (into acc (repeat 2 item))) [] %)","problem":32,"user":"5245fbbbe4b09dbe66b56183"},{"problem":32,"code":"(fn [list] (reduce (fn [a b] (conj a b b)) [] list))","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"(fn [coll] \n  (reverse \n    (reduce #(conj % %2 %2) () coll)))","problem":32,"user":"524e6b68e4b0541d1855b7db"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [prev nxt]\n            (conj (conj prev nxt) nxt))\n          []\n          coll))","user":"5835cb06e4b089d5ab817cea"},{"problem":32,"code":"#(mapcat (fn [ele] (repeat 2 ele)) %)","user":"5c706232e4b0fca0c162277e"},{"problem":32,"code":"(fn [mlist] (reduce (fn [coll vall] (conj (conj coll vall) vall)) [] mlist) )","user":"5804b491e4b0a837a8b30cac"},{"problem":32,"code":"(fn [X] (apply concat (map #(list % %) X)))","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"(fn dupelem [s]\n  (reduce (fn [res x]\n    (conj res x x)) [] s))","problem":32,"user":"4f50cadce4b03ad3f0c10d0f"},{"problem":32,"code":"(fn [arr] (loop [[car & cdr] arr r []] (if (nil? car) r (recur cdr (conj (conj r car) car)))))","user":"53320dd1e4b019098a6f8b71"},{"problem":32,"code":"(fn f [s]\n      (let [f*\n            (fn [acc s*]\n              (conj acc s* s*))]\n        (reduce f* [] s)))","user":"5d4c4de9e4b0776584bd6f2f"},{"problem":32,"code":"(fn dup-each-item [xs] (reduce #(apply conj %1 (list %2 %2)) [] xs))","user":"592518e8e4b072a2710fce67"},{"code":"( fn [noo](reverse (reduce #(cons %2 (cons %2 %1)) '() noo)))","problem":32,"user":"51bcf091e4b0df1216cefd91"},{"problem":32,"code":"(fn [s] (loop [in s, out []]\n            (if (empty? in)\n              out\n              (recur (rest in) (conj (conj out (first in)) (first in))))))","user":"54a70484e4b09f271ff37c91"},{"problem":32,"code":"reduce (fn [coll x] (conj (conj coll x) x) ) []","user":"53ac4c6fe4b047364c04445d"},{"problem":32,"code":"(fn gduplicate \n  [j]\n  (loop [[x & xs] j res []] \n    (if x\n      (recur xs (conj (conj res x) x))\n      res)))","user":"54070647e4b0addc1aec66b2"},{"problem":32,"code":"(fn [x]\n  (list* (reduce (fn [r e]\n                   (conj r  e e))\n                 []\n                 x)))","user":"56038f34e4b04bb52996e1bc"},{"problem":32,"code":"(fn [s] \n  (reduce #(conj %1 %2 %2) [] s)\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":32,"code":"(fn [input] (reverse\n             (reduce\n              (fn [r x]\n               (cons x (cons x r))\n               ) nil input)))","user":"5fa12616e4b0715f5002d84f"},{"code":"#(loop [nl [] l %] \n   (if-not l \n     nl \n     (recur (conj nl (first l) (first l)) (next l))))","problem":32,"user":"5117c31ee4b0e0897831a60c"},{"problem":32,"code":"#(apply concat (map (fn [x] `(~x ~x)) %))","user":"53b9bb15e4b047364c0444ed"},{"problem":32,"code":"(fn [seq] (loop [head (first seq) tail (rest seq) new-seq []]\n            (if (nil? head)\n              new-seq\n              (recur (first tail) (rest tail) (conj (conj new-seq head) head)))))","user":"55457b73e4b0a04f79299536"},{"problem":32,"code":";;#(interleave % %)\nmapcat #(list % %)","user":"580d7bdae4b0849f6811b73c"},{"problem":32,"code":"(fn ! [x] (and (seq x) (conj (! (rest x)) (first x) (first x))\n                   ))","user":"548f7bf1e4b0e286459a123b"},{"problem":32,"code":"#(reduce concat '() (map (fn [e] (list e e)) %))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":32,"code":"(fn [coll]\n  (mapcat (fn [x] (take 2 (cycle [x]))) coll))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":32,"code":"(fn dup \n  [xs] \n  (if (empty? xs)\n    '()\n    (conj (dup (rest xs)) (first xs) (first xs))))","user":"58d2b7b3e4b03c36ff7e5908"},{"problem":32,"code":"(fn [x] (apply concat (map (fn [y] [ y y ]) x)))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":32,"code":"(fn [c]\n  (sort (concat c c)))","user":"54a80855e4b09f271ff37c9e"},{"problem":32,"code":"(fn [x]\n  (loop [x x result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (conj result (first x) (first x))))))","user":"5694129de4b0dcc4269f410c"},{"problem":32,"code":"(fn [seq]\n  (reduce #(concat %2 %1) (reverse (map (fn [x] [x x]) seq))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn [s] (letfn [(dup-recur \n           ([values result]\n              (if (nil? values) \n                result \n                (let [current (first values)]\n                  #(dup-recur values (conj result current) current))))\n           ([values result current]\n              #(dup-recur (next values) (conj result current))))]\n    (seq (trampoline dup-recur s []))))","problem":32,"user":"52990271e4b02ebb4ef7506d"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj (conj res (first coll)) (first coll))))))","user":"54b31445e4b09f271ff37d35"},{"code":"( fn   [seq] (apply concat ( map (fn [x]  ( take 2 ( cycle ( list x )  ) )  ) seq ) ) )","problem":32,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn [s]\n  (loop [s s\n         result '()]\n    (if (empty? s)\n      result\n      (recur (rest s) (concat result (take 2 (repeat (first s))))))))","problem":32,"user":"504dffe2e4b078edc5f5938b"},{"problem":32,"code":"(fn [seq]\n\t (reduce (fn [res a] (into res [a a])) [] seq))","user":"5c87c79be4b048ec896c591b"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(conj [] % %) xs))","user":"5829d9f8e4b051871117bf4d"},{"code":";; yikebocai's solution to Duplicate a Sequence\n;; https://4clojure.com/problem/32\n\n(fn [s] \n  (let [sq (map #(take 2 (repeat %)) s)]\n    (reduce concat sq)))","problem":32,"user":"5022292ee4b0846bc458ae46"},{"problem":32,"code":"(fn\n  [seq]\n  (reduce (fn [acc x] (conj (conj acc x) x)) [] seq))","user":"5a9567bae4b0d174b936c752"},{"problem":32,"code":"#(loop [lista '() i 0] \n       (if (= i (count %)) \n         (reverse lista)\n         (recur (cons (.get (seq %) i) (cons (.get (seq %) i) lista)) (inc i))\n       )\n     )","user":"5451eb12e4b0e397800069b8"},{"problem":32,"code":"#(mapcat (fn [s] (repeat 2 s)) % )","user":"5141a8f2e4b02fd87f5064c1"},{"problem":32,"code":"(fn [c] (apply concat (map #(repeat 2 %) c)))","user":"56441634e4b0018b46ad8c08"},{"problem":32,"code":"(fn [x]\n  (reduce\n   (fn [op-seq curr-x]\n     (conj op-seq curr-x curr-x)\n   )          \n   []\n   x)\n)","user":"5d8c8175e4b0915913b1d3e1"},{"code":"(fn ! [x]\n  (if (empty? x)\n    (empty x)\n    (let [f (first x)]\n      (cons f (cons f (! (rest x)))))))","problem":32,"user":"4f0324d2535dcb61093f6a69"},{"problem":32,"code":"reduce (fn [duplicate x] (conj duplicate x x)) []","user":"591326f2e4b0163c97b36efc"},{"problem":32,"code":"(fn [coll] (apply concat (mapv #(vec [% %]) coll)))","user":"568d4742e4b0dcc4269f40c2"},{"code":"(fn [l] (reduce concat (map (fn [x] (list x x)) l)))","problem":32,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":32,"code":"#(reverse (reduce (fn [a b] (conj a b b)) '() %))","user":"59c7c2cde4b0a024fb6ae54b"},{"code":"(fn [x] (sort (apply conj x  x)))","problem":32,"user":"4eb8979b535dfed6da9c6d4a"},{"problem":32,"code":"(fn[y](reduce #(conj %1 %2 %2) [] y))","user":"605f92bae4b03746e80ebf62"},{"code":"(fn [l] (for [x (range 0 (* 2 (count l)))] (l (quot x 2)) ))","problem":32,"user":"4ed1f84f535d44c135fd68d3"},{"problem":32,"code":"(fn \n  [aseq]\n  (loop [[head & remaining] aseq\n         new-seq []]\n    (if (nil? head)\n      new-seq\n      (recur remaining (into new-seq (repeat 2 head))))))","user":"557e2eafe4b05c286339e0d2"},{"problem":32,"code":"(fn [input]\n  (loop [in input out []]\n    (if (empty? in)\n      out\n      (let [head (first in)\n           body (rest in)]\n        (recur body (conj out head head))))))","user":"57af6cf4e4b0fbc9809a2735"},{"code":"(fn [s]\n  (reduce concat (map #(repeat 2 %) s)))","problem":32,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"problem":32,"code":"#(reverse (reduce (fn [col x] (cons x (cons x col))) () %))","user":"4fec0824e4b0681fd128dc9c"},{"code":"(fn [data] (mapcat #(list % %) data))","problem":32,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":32,"code":"(fn duplicate [a-seq]\n  (let [duplicateer (fn [t-seq] (split-with #(= (first t-seq) %) t-seq))\n        [x y] (duplicateer a-seq)\n        dup (fn [ls] (apply concat (repeat 2 ls)))]\n    (if (empty? a-seq) '() (concat (dup x) (duplicate y)))))","user":"5877a553e4b01531a375eaa5"},{"problem":32,"code":"(fn[s v](if (empty? v) s (recur (conj s (first v) (first v)) (rest v)))) []","user":"561cad18e4b064ca9f4b169d"},{"problem":32,"code":"(fn [s]\n  (for [x s y (range 2)] x))","user":"56c9970ce4b0ed865f9758de"},{"problem":32,"code":"reduce (fn [coll x] (let [coll (conj coll x)] (conj coll x))) []","user":"5609816ee4b0053d1b86c7e1"},{"problem":32,"code":"(fn\n  [s]\n  (interleave s s))","user":"5ec02e20e4b00a66d4a95288"},{"problem":32,"code":"#( interleave % % )","user":"556880dae4b0c656e3ff1856"},{"problem":32,"code":"(fn [s]\n   (interleave s s)\n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":32,"code":"(fn [x] \n(reverse (reduce \n          (fn [result item]\n          (conj result item item))\n        '() x)))","user":"568a13eae4b0dcc4269f4089"},{"problem":32,"code":"(fn [xs] (seq (reduce #(conj (conj % %2) %2) [] xs)))","user":"52a0f9c4e4b04e0c58e87bd0"},{"problem":32,"code":"(fn[seqn](mapcat #(repeat 2 %) seqn))","user":"5dcace6be4b02b31cc3da3b1"},{"problem":32,"code":"(fn dup-elems [[x & xs]]\n  (concat [x x] (when (seq xs) (dup-elems xs))))","user":"59ee6801e4b0966464fe6a1f"},{"problem":32,"code":"(fn [v] (apply concat (map #(vector % %) v)))","user":"5a2cfa85e4b09cafd31c7f61"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc e] (-> acc (conj e) (conj e))) [] s))","user":"5a0b9fc0e4b04bbd27e6d992"},{"problem":32,"code":"(fn dup-seq [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))","user":"58ee9b14e4b056aecfd47db0"},{"problem":32,"code":"(fn [l] (reduce #(concat %1 (vector %2 %2)) [] l))","user":"558df2ebe4b0277789237649"},{"problem":32,"code":"(fn [coll] (seq (reduce #(conj %1 %2 %2) [] coll)))","user":"5c24671be4b07e362c2305a1"},{"problem":32,"code":"(fn [x]\n  (loop [items x result []]\n  \t(if (empty? items) result\n            (let [first-item (first items)]\n              (recur (rest items) (into result [first-item first-item]))))))","user":"596aaeefe4b069c0a1a19808"},{"code":"#(reverse (reduce (fn [acc x] (conj acc x x)) () %))","problem":32,"user":"522b922ee4b0d34ee08e71c3"},{"problem":32,"code":"(fn [x]\n  (sort (clojure.set/union x x)))","user":"55263009e4b0ffed3738f916"},{"code":"(fn [c] (mapcat vector c c))","problem":32,"user":"4ea09fa4535d7eef308072aa"},{"problem":32,"code":"(fn [x]\n  (loop [x x\n        xs []]\n    (if (empty? x) \n      (seq xs)\n      (recur \n       (rest x)\n       (conj xs (first x) (first x))))))","user":"5c34f7efe4b0d62ef62d9f5b"},{"problem":32,"code":"(fn repeat-twice [col] (reduce #(concat %1 (repeat 2 %2))  []  col))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":32,"code":"#(seq (reduce (fn [acc item] (-> acc (conj item) (conj item))) [] %))","user":"59358f74e4b04f87174def52"},{"code":"(fn [lst]\n  (reduce #(concat %1 (repeat 2 %2)) () lst))","problem":32,"user":"4ffe4d43e4b0678c553fc3f1"},{"code":"reduce (fn [l,i] (conj l i i)) []","problem":32,"user":"531d53dbe4b08068f379edae"},{"problem":32,"code":"#(sort(apply concat (list % %)))","user":"5de65feee4b0986d99407f68"},{"code":"#(for [x % y \"ab\"] x)","problem":32,"user":"527818f7e4b03e8d9a4a7519"},{"code":"(fn [x] (apply concat (map #(list % %) x)))","problem":32,"user":"4e593dac535d8a8b8723a29c"},{"problem":32,"code":"(fn dup [l] \n  (if (empty? l)\n    l\n    (let [f (first l)\n          r (dup (rest l))]\n      (concat (list f f ) r)\n    )\n  )\n)","user":"5720fc08e4b0c5bde472c0a3"},{"problem":32,"code":"(fn rep [x] (apply concat (map #(repeat 2 %) x)))","user":"529c722de4b04e0c58e87b63"},{"problem":32,"code":"(fn db [x] \n  (mapcat (fn [y] (list y  y)) x)\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":32,"code":"(fn [x] (->> x\n                 (map #(list % %))\n                 (reduce concat '())))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn [coll]\n  (loop [acc [] c coll]\n        (let [p (first c)]\n            (if (nil? p)\n                acc\n                (recur (conj acc p p) (rest c))))))","problem":32,"user":"508c3d42e4b0f17d83ea26b2"},{"code":"(fn [coll]\n  (loop [coll coll\n    new-col '()]\n    (if (empty? coll)\n      new-col\n      (recur (rest coll) \n        (concat new-col (list (first coll) (first coll)))))))","problem":32,"user":"50c32086e4b00e537d00253d"},{"code":";;(fn[y] (flatten (map (fn[x] (list x x)) y)))\n\n(fn F [x]\n(if (empty? x)                                    \n'()                                               \n(cons (first x) (cons (first x) (F (rest x))))\n))","problem":32,"user":"4fc7b079e4b0ee37620e1827"},{"problem":32,"code":"(fn [s]\n  (->> s\n       (map #(list % %))\n       (reduce into)\n       (reverse)))","user":"6090e617e4b03bd49d9f36ce"},{"problem":32,"code":"(fn [inputStream] (let [duped (map (fn [x]  (list x x))\n                  inputStream\n                  )]\n(reduce concat '() duped)\n))","user":"51fea7d7e4b0f1313d468a74"},{"problem":32,"code":"(fn [x] (reverse (loop [output '() index 0] (if (>= index (count x)) output (recur (list* (nth x index) (nth x index) output) (+ 1 index))))))","user":"5924009ce4b072a2710fce45"},{"problem":32,"code":"(fn [x] (mapcat (fn [e] [e e]) x))","user":"60329afce4b0d5df2af222b8"},{"problem":32,"code":"#(reduce (fn [out, value] (conj out value value)) [] %1)","user":"60622c6ee4b03746e80ebf72"},{"code":"(fn f [x]\n  (lazy-seq\n    (when (seq x)\n      (cons (first x) (cons (first x) (f (next x)))))))","problem":32,"user":"4e71cc2e535d5021c1a89652"},{"code":"#(loop [ input %1 counter (count %1) accum [] ]\n   (if (= counter 0) accum \n     (recur (rest input) (dec counter) (concat accum (repeat 2 (first input)  ) ) ) ) )","problem":32,"user":"52da7ae5e4b09f7907dd13b8"},{"problem":32,"code":"(fn [x]\n  (reduce\n     #(conj %1 %2 %2)\n     []\n     x))","user":"56532ff4e4b0f9d632dd846e"},{"problem":32,"code":";;#(mapcat list % %)\nreduce #(conj %1 %2 %2) []","user":"55647a31e4b0c656e3ff1808"},{"code":"mapcat #(conj nil % %)","problem":32,"user":"5098bcfee4b0cae2931060a1"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [result item]\n            (concat result [item item]))\n          [] coll))","user":"5eb1a80ce4b00a66d4a951ff"},{"code":"reduce #(into % [%2 %2]) []","problem":32,"user":"4e994541535dbda64a6f6b64"},{"problem":32,"code":"(fn [a] (reduce into [] (map #(list % %) a)))","user":"5d3ae729e4b01671435dbd5d"},{"problem":32,"code":"(fn [k]\n  (apply concat\n         (for [x k] [x x])))","user":"595eaa8fe4b066ee0a44b04b"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc cur]\n            (into acc [cur cur]))\n          []\n          coll))","user":"58e45a2ce4b056aecfd47c69"},{"problem":32,"code":"(fn [x]\n  (reverse\n   (reduce (fn [a b] (cons b (cons b a))) '() x)))","user":"57c92bdbe4b05aa3c4741d27"},{"code":"(fn [x] (reduce (fn [a x] (concat a (list x x))) '() x))","problem":32,"user":"504f3f13e4b0a02f9cffde60"},{"problem":32,"code":"(fn [arg]\n  (loop [arg (reverse arg) dupl '()]\n    (if (empty? arg) \n      dupl\n      (recur (next arg) (cons (first arg) (cons (first arg) dupl))))))","user":"54e10605e4b024c67c0cf7bf"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [agg x] (conj agg x x)) [] x)\n  )","user":"5cd1fd2fe4b0ccb0619628f8"},{"problem":32,"code":"(fn [coll] (apply concat (map #(vector % %) coll) ))","user":"52a90056e4b0c58976d9ac39"},{"problem":32,"code":"#(loop [remain % result []]\n   (if (empty? remain)\n     result\n     (recur (next remain) (conj (conj result (first remain)) (first remain)))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn dup [xs] \n  (if (empty? xs)\n    xs\n    (let [x (first xs)]\n      (concat (list x x) (dup (rest xs))))))","problem":32,"user":"52deb735e4b09f7907dd13f7"},{"problem":32,"code":"(fn [myseq]\n  (loop [return_list [] index 0]\n    (if (< index (count myseq))\n      (recur (conj return_list (nth myseq index) (nth myseq index)) (inc index))\n      (seq return_list))))","user":"53d977f1e4b0e771c302547a"},{"problem":32,"code":"(fn [x] (sort (take (* 2 (count x)) (cycle x))))","user":"5886e8bde4b0f1effa3b76ea"},{"code":"#(reverse\n  (reduce \n    (fn [n m] (conj (conj n m) m))\n    '()\n    %1\n  )\n)","problem":32,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":32,"code":"( fn [y x] (apply concat (for [x x] (conj y x x)))) ()","user":"5953949be4b066ee0a44aeea"},{"problem":32,"code":"(fn duplicate-elements [coll]\n    (mapcat #(vector % %) coll))","user":"4dfe5a93535d04ed9115e786"},{"problem":32,"code":"(fn [x] (apply concat (map #(repeat (* 2 (count %)) (first %)) (partition-by list x))))","user":"54227fc6e4b01498b1a71ac0"},{"problem":32,"code":"(fn [xs]\n    (reduce #(concat %1 (repeat 2 %2)) [] xs))","user":"50a3e2eae4b0ceace084d49a"},{"problem":32,"code":"(fn duplicate \n    [coll]\n    (reverse (reduce \n              (fn agg [res el] (conj res el el))\n              '() \n              coll)))","user":"568bd448e4b0dcc4269f40a9"},{"code":"#(concat (interleave % %))","problem":32,"user":"4fa5ddfde4b081705acca1b1"},{"code":"(fn [x]\n  (loop [l x r []]\n    (if (empty? l)\n      r\n      (recur (rest l) (conj r (first l) (first l)))\n    )\n  )\n)","problem":32,"user":"4e5cac7c535d8a8b8723a2c3"},{"code":"(fn dupl [coll] (if (empty? coll) [] (into (vec (repeat 2 (first coll))) (dupl (rest coll)))))","problem":32,"user":"525947f1e4b0cb4875a45cd8"},{"code":"(fn foo [x]\n  (if (empty? x)\n    '()\n    (conj (foo (rest x)) (first x) (first x))))","problem":32,"user":"4eb66737535d7eef3080736b"},{"code":"(fn [x](reduce concat (map #(list % %) x)))","problem":32,"user":"503c02e5e4b0fc0f99c2e54e"},{"code":"#(for [x % n (range 2)] x)","problem":32,"user":"4fcd155de4b065de69964ca3"},{"code":"(fn [x]\n  (mapcat (fn [x] [x x]) x))","problem":32,"user":"4e9e4515535dbda64a6f6b95"},{"code":"(fn dup [x] (apply concat (map (fn d [y] [y y]) x)))","problem":32,"user":"52b7a904e4b0c58976d9ad51"},{"code":"#(reduce (fn [s i] (conj (conj s i) i)) [] %1)","problem":32,"user":"53029281e4b0d8b024fd372e"},{"code":"(fn dup [coll]\n  (if (nil? coll)\n    ()\n    (cons (first coll)\n      (cons (first coll)\n        (dup (next coll))))))","problem":32,"user":"4ed9fe5f535d10e5ff6f5308"},{"problem":32,"code":"(fn [x] (apply concat (map #((fn [& y] (concat y)) % %) x)))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"code":"(fn [coll]\r\n   (loop [f (first coll)\r\n          r (rest coll)\r\n  \t  result []]\r\n      (if (nil? f)\r\n\t    result\r\n\t\t(recur (first r) (rest r) (conj result f f)))))","problem":32,"user":"4f60ed88e4b0defedf855fb2"},{"problem":32,"code":"(fn [col]\n  (mapcat #(take 2 (repeat %)) col ))","user":"55ec879ae4b0121d4835fdc8"},{"code":"(fn [xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))","problem":32,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":32,"code":"(fn [s]\n  (loop [r () s s]\n    (if (empty? s)\n      (reverse r)\n      (recur (conj r (first s) (first s)) (rest s)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [coll] (reduce concat (map #(vector % %) coll)))","problem":32,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":32,"code":"(fn p32 [xs]\n  (if (empty? xs)\n    nil\n    (concat (list (first xs) (first xs)) (p32 (rest xs)))))","user":"57fe836ee4b0d3187e9009d2"},{"problem":32,"code":"(fn [coll] \n  (seq (reduce (fn [x y] (conj x y y)) [] coll)))","user":"5d03944de4b0cc9c915881c5"},{"code":"#(loop [col % c ()]\n  (if (empty? col)\n    (reverse c)\n  (recur (rest col)\n  (cons (first col) (cons (first col) c)))))","problem":32,"user":"4e2f377a535deb9a81d77f10"},{"problem":32,"code":"(fn\n  [s]\n  (apply concat \n         (reverse \n          (reduce #(conj %1 (repeat 2 %2)) '() s))))","user":"5a6f2942e4b0512ff01cda78"},{"problem":32,"code":"(fn dup [lst] (reverse (reduce (fn [o n] (conj o n n)) '() lst)))","user":"551d5cb9e4b07993ea3788e9"},{"code":"#(loop [acc []\r\n        s %]\r\n        (if (empty? s)\r\n           acc\r\n           (recur (conj (conj acc (first s)) \r\n                        (first s))\r\n                  (rest s))))","problem":32,"user":"4e07eac0535d04ed9115e7a9"},{"code":"(fn [X]\n  (loop [collec X result []]\n    (if (> (count collec) 0)\n      (recur (rest collec) (conj (conj result (first collec)) (first collec)))\n      (seq result)\n    )\n  )\n)","problem":32,"user":"4f031883535dcb61093f6a5e"},{"code":"#(interleave %  %)","problem":32,"user":"4f9ff06ce4b0dcca54ed6d41"},{"code":"(fn [singles] \n  (let [x1 singles x2 singles]\n    (interleave x1 x2)\n   )\n  )","problem":32,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":32,"code":"(fn dupe \n    ([coll] (dupe coll []))\n    ([coll my-coll]\n        (if (empty? coll)\n            my-coll                      \n            (dupe (rest coll)  \n                  (conj my-coll (first coll) (first coll))))))","user":"6033f8e9e4b0d5df2af222c6"},{"code":"(fn dup [l]\n  (if (empty? l)\n  '()\n  (conj (dup (rest l)) (first l) (first l))))","problem":32,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":32,"code":"(fn [to-dupe]\n      (apply concat (map (fn [i] [i i]) to-dupe)))","user":"547b9cdce4b0c51c1f4d72da"},{"code":"(fn dupe [coll]\n    (cond\n      (= (count coll) 1)\n      (concat coll coll)\n      :else\n      (let [[h & more] coll]\n        (concat [h h] (dupe more)))))","problem":32,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":32,"code":"(fn [things] (reduce (fn [acc el] (conj acc el el)) [] things)\n  )","user":"55ddb3f4e4b050e68259b3cd"},{"code":"(fn [x]\n  (reduce concat (map (fn [item] (list item item)) x))\n  )","problem":32,"user":"4f3e05a8e4b0e243712b1f79"},{"code":"#(loop [c %1 acc () ] (if (empty? c) (reverse acc) (recur (rest c) (cons (first c) (cons (first c) acc)))))","problem":32,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":32,"code":"(fn [to-dupe]\n\t(loop [remain to-dupe\n           to-return []]\n      (if (= (count remain) 1)\n        (concat to-return [(first remain) (first remain)])\n        (recur (rest remain) (concat to-return [(first remain) (first remain)])))))","user":"59595f85e4b066ee0a44afa1"},{"problem":32,"code":"(fn [v] (reduce #(conj %1 %2 %2) [] v))\n; this is much nicer:\n; #(interleave % %)","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn [xs] (mapcat  #(list  %1 %1) xs))","problem":32,"user":"4f037bb5535dcb61093f6aec"},{"problem":32,"code":"reduce #(sort (conj %1 %2 %2)) '()","user":"56f4b753e4b046a417f92061"},{"code":"(fn [sq] (apply concat (map (fn [i] [i i]) sq)))","problem":32,"user":"4eadc217535d7eef30807321"},{"code":"#(mapcat (fn f [n] [n n]) %)","problem":32,"user":"5007c7c7e4b0b17c647f5226"},{"code":"(fn [coll] (reduce concat (map #(conj [%] %) coll)))","problem":32,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":32,"code":"(fn [x] (apply concat (map #(take 2 (cycle [%])) x)))","user":"57ef7393e4b0bfb2137f5bd6"},{"problem":32,"code":"(fn [x]\n  (reverse\n  (loop [in x\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) (cons (first in) out)))))))","user":"594bd637e4b07ddc2dafae41"},{"problem":32,"code":"#(reduce (fn [c _] (concat c (list _) (list _))) '() %)","user":"549d36c6e4b0f3d1d8e70f94"},{"code":"reduce (fn [l x] (concat l (list x x))) ()","problem":32,"user":"51f59607e4b0abb92f97f9d5"},{"problem":32,"code":"(fn [x] (apply concat(map #(vector % %) x)))","user":"5d6523ace4b0db5d338d15cd"},{"problem":32,"code":"(fn \n  [x]\n  (mapcat #(list % %) (seq x)))","user":"55640c62e4b0c656e3ff17fd"},{"problem":32,"code":"(fn [a]\n     ((fn [x y]\n          (println y)\n          (if (empty? x)\n              (into () (reverse y))\n              (recur (drop 1 x) (into (into [] y) (list (first x) (first x)))))\n      ) a ()))","user":"58dadf46e4b0a4d5acaab66b"},{"problem":32,"code":"#((fn f [l r]\n  (if (empty? l)\n    (reverse r)\n    (recur (rest l) (cons (first l) (cons (first l) r))))) % '())","user":"54c611d1e4b045293a27f627"},{"code":"(fn [li] \n  (reduce concat \n   (map \n    (fn duplicate [e] (list e e))\n    li)))","problem":32,"user":"538c3424e4b0b51d73faae58"},{"problem":32,"code":"(fn [coll]\n  (mapcat #(repeat 2 %)\n          coll))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":32,"code":"(fn dup\n  [coll]\n  (when (seq coll)\n    (concat [(first coll) (first coll)] (dup (rest coll)))))","user":"53e57ba2e4b036ad0777e45c"},{"problem":32,"code":"(fn dup [x] \n  (if (empty? x) \n    x\n    (conj (dup (rest x)) (first x) (first x))\n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"code":"(fn [xs] (mapcat #(list %1 %1) xs))","problem":32,"user":"4fa6a491e4b081705acca1bc"},{"problem":32,"code":"(fn [inp]\n  (->> inp\n       (map #(list % %))\n       (apply concat)))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn [s]\n  (reduce\n   (fn [os a]\n     (conj os a a)\n     )\n   []\n   s\n   )\n  )","problem":32,"user":"504e90bae4b069badc5a33b8"},{"problem":32,"code":"(fn [lat] (reduce concat (map #(repeat 2 %) lat)))","user":"566888e4e4b04acd4f672ded"},{"problem":32,"code":"(fn [seq] (reduce (fn [acc item] (conj (conj acc item) item)) [] seq))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":32,"code":"(fn [x]  (mapcat #(list % %) x))","user":"5b20134de4b03cfeda66ed2d"},{"problem":32,"code":"#(sort (list* (into % %)))","user":"5b754f8ee4b047b03b2036c9"},{"code":"(fn [s]\n  (loop [xs s acc []]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))","problem":32,"user":"4ef1ee67535dced4c769f219"},{"problem":32,"code":"(fn dupe [input]\n  (loop [in input\n         out []\n         redo true]\n    (if (empty? in)\n      out\n      (if redo\n        (recur in (conj out (first in)) (not redo))\n        (recur (rest in) (conj out (first in)) (not redo))))))","user":"58f4fa7ee4b0438e51c2cecb"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll\n         res []]\n    (cond (empty? coll)\n          res\n          ;\n          :else (recur (rest coll) (conj (conj res (first coll)) (first coll)))\n          )))","user":"5c3f29d4e4b08cd430848e8f"},{"problem":32,"code":"#(reduce into[] (map list % %))","user":"5515b68de4b055c2f668d4ef"},{"problem":32,"code":"(fn [x] (mapcat (fn [n] [n n]) x))","user":"5141e978e4b0b50abeb46b20"},{"problem":32,"code":"(fn [c] (reduce #(conj % %2 %2) [] c))","user":"53f78944e4b0de5c41848561"},{"problem":32,"code":"(fn duplicate-a-sequence [xs]\n  (apply concat (map #(list % %) xs)))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [arg] (reduce concat (map #(identity [% %]) arg)))","problem":32,"user":"4f7683dae4b0fbe0118ec56f"},{"problem":32,"code":"(fn dup\n  [s]\n  (if (empty? s)\n    '()\n    (let [f (first s)]\n      (conj (dup (rest s))\n            f\n            f))))","user":"5438795ee4b032a45b869313"},{"problem":32,"code":"(fn [lst] (mapcat #(repeat 2 %) lst))","user":"56df62b3e4b0ca2494a095ef"},{"problem":32,"code":"(fn\n  [x]\n  (seq\n   (reduce\n    (fn [result entry]\n      (conj result entry entry))\n    []\n    x)))","user":"5ec7d7f2e4b08d0ec38692e1"},{"code":"(fn [x] (mapcat #(vec [%1 %1]) x))","problem":32,"user":"4ea41fc2535d7eef308072cb"},{"problem":32,"code":"(fn [c] (reduce #(concat %1 [%2 %2]) [] c))","user":"51f38193e4b0fca5e8b48226"},{"code":"(fn dup-seq [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))","problem":32,"user":"4e8ddf32535d65386fec213c"},{"code":"#(loop [orig-list % res-list '()]\n  (if \n    (empty? orig-list) \n     res-list\n    (recur (next orig-list) (concat res-list (repeat 2 (first orig-list))))\n  )\n )","problem":32,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"reduce #( conj % %2 %2 ) [ ]","problem":32,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":32,"code":"(fn [x] (mapcat (fn [y] [y y] ) x))","user":"533a2f7be4b0e30313ee6cb8"},{"code":"#(seq (sort (apply conj % (map identity %))))","problem":32,"user":"504e2333e4b0f6ff3350c46c"},{"code":"(fn dupeeach [sq]\n  (reduce #(conj (conj %1 %2) %2) [] sq))","problem":32,"user":"515737f0e4b0b0b4b87062d0"},{"problem":32,"code":"(fn dup\n  ([vec] (dup vec []))\n  ([vec newV]\n   (if (empty? vec) newV\n                    (dup (next vec) (conj newV (first vec) (first vec))))\n   )\n  )","user":"5e77ece9e4b085ba37836df3"},{"problem":32,"code":"(fn [s]\n  ((fn r[x y]\n     (if (empty? x)\n       y\n       (r (rest x)\n          (conj \n           (conj y (first x))\n           (first x))))) s []))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn dupe [[x & xs :as all]] (if (empty? all) [] (concat [x x] (dupe xs))))","problem":32,"user":"50723bbae4b0e3170b5a868b"},{"code":"(fn [x]\n  (loop [lst x ret []]\n    (if (empty? lst) ret\n(recur (rest lst) (conj ret (first lst) (first lst) )))))","problem":32,"user":"4fdf5403e4b05e33b9224f98"},{"problem":32,"code":"#(apply concat (for [i %] (repeat 2 i)))","user":"5979cd36e4b02382a38ad1d8"},{"code":"(fn [v] (apply concat (for [e v] [e e])))","problem":32,"user":"521d709ae4b050d5da0427ef"},{"problem":32,"code":"#(apply concat (map (fn[x] (list x x)) %))","user":"57b59d77e4b0fbc9809a27ae"},{"problem":32,"code":"(fn [coll] (reduce (fn [c v] (conj (conj c v) v)) [] coll))","user":"53573d70e4b04ce2eb3ed278"},{"problem":32,"code":"(fn f32\n  [s]\n  (interleave s s))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":32,"code":"(fn [x] (reverse (reduce (fn [a b] (conj (conj a b) b)) nil x)))","user":"53d00195e4b00fb29b221305"},{"code":"(fn [x] (sort ( concat x x ) ) )","problem":32,"user":"521257c5e4b06aa6d1666ba3"},{"problem":32,"code":"#(loop [x % y []] (if (= (count x) 0) y (recur (rest x) (conj y (first x) (first x)))))","user":"5799ff45e4b05b1deef9add1"},{"code":"#(apply concat (map (fn [x] [x x]) %1))","problem":32,"user":"4fabb1dce4b081705acca21a"},{"problem":32,"code":"(fn\n  [aseq]\n  (loop [lseq aseq el (first lseq) acc []]\n    (if (empty? lseq)\n      acc\n      (recur\n        (rest lseq)\n        (first (rest lseq))\n        (into acc (repeat 2 el))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":32,"code":"(fn d [s]\n  (reverse\n   (loop [res nil sq s]\n     (if (empty? sq)\n       res\n       (recur\n        (conj (conj res (first sq)) (first sq))\n        (rest sq)\n       )\n     )\n   )\n  )\n)","user":"56b36283e4b0982f16b37e18"},{"problem":32,"code":"(fn [lst] (mapcat (fn [x] (repeat 2 x)) lst))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn [x] (apply concat (#(map vector % %) x)))","problem":32,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn [l] (mapcat #(list % %) l))","problem":32,"user":"4fde492be4b05e33b9224f8a"},{"problem":32,"code":"(fn [in-seq] (interleave in-seq in-seq))","user":"571d9669e4b0145328a7627f"},{"problem":32,"code":"(fn duped [coll]\n  (mapcat (fn [x] (list x x)) coll))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":32,"code":"(fn [someseq] (mapcat #(repeat 2 %) someseq))","user":"56bff105e4b060a8e693e3a4"},{"problem":32,"code":"(fn [seq] (sort (into seq seq)))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"problem":32,"code":"(fn prob32\n  [coll]\n  (mapcat #(list % %) coll))","user":"5d2e5065e4b01671435dbcae"},{"problem":32,"code":"(fn my-dup\n  ([x] (let [[f & r] x]\n         (if (empty? x)\n           []\n           (cons f (cons f (my-dup r)))\n           )\n   )\n   )\n  )","user":"5959c72ae4b066ee0a44afac"},{"code":"#(-> % (concat %) sort)","problem":32,"user":"4f1427f8535d64f603146435"},{"problem":32,"code":"(fn out [seq]\n  (let [filler (fn this [seq acc]\n                 (cond\n                   (= (count seq) 0) acc\n                   :else (this (rest seq) (conj acc (first seq) (first seq)))\n                   ))]\n    (filler seq []))\n  )","user":"56530a1ce4b0f9d632dd846c"},{"problem":32,"code":"#(apply concat (map (fn [x] (conj [x] x)) %))","user":"59566d1de4b066ee0a44af54"},{"problem":32,"code":"reduce (fn [acc curr] (concat acc [curr curr])) []","user":"5b82eec6e4b047b03b2037a4"},{"problem":32,"code":"(fn duplicate [coll] \n  (if (empty? coll)\n    coll\n    (concat \n     (list (first coll) \n     (first coll))\n     (duplicate (rest coll)))))","user":"5e471203e4b043cd24807a2a"},{"code":"(fn dup[seq]\n  (mapcat #(list % %) seq))","problem":32,"user":"525d490ae4b0cb4875a45d70"},{"code":"(fn[a-seq]\n  (mapcat (fn[a](repeat 2 a)) a-seq))","problem":32,"user":"4e58bcd4535d8a8b8723a296"},{"problem":32,"code":"; (fn [s] (flatten (map #(list % %) s)))\n\n(fn [s] (interleave s s))","user":"5ec0de29e4b00a66d4a9528e"},{"code":"#(apply concat (for [x %1] [x x]))","problem":32,"user":"4f31ad57e4b0d6649770a089"},{"code":"#(reverse (reduce (fn[r x] (cons x (cons x r)) ) '() %))","problem":32,"user":"51f79238e4b06ff1c25c52d7"},{"problem":32,"code":"(fn f [xs] (mapcat #(vector % %) xs))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn [l]\n  (reduce (fn [ll elem]\n            (conj ll elem elem)) [] l))","problem":32,"user":"52277ab9e4b0186687e23a4f"},{"code":"(fn [lst]\n  (mapcat #(list % %) lst))","problem":32,"user":"4fba7d1ee4b081705acca2e0"},{"problem":32,"code":"(fn [arg] (apply concat (map #(repeat 2 %) arg)))","user":"57d93437e4b0bd073c2023f9"},{"problem":32,"code":";; #(interleave % %)\n\n;; (fn [c]\n;;    (mapcat #(list % %) c))\n\n(fn [c]\n    (reverse (reduce #(conj %1 %2 %2) '() c)))","user":"591ad160e4b09b4ee5954bdf"},{"problem":32,"code":"reduce (fn [c x] (concat c [x x])) []","user":"58aa3f02e4b01a0c0b23297d"},{"problem":32,"code":"#(for [x %1\n       dupl [x x]]\n   dupl)","user":"6026737ee4b0d5df2af2222f"},{"problem":32,"code":"(fn dup [s] (mapcat (fn [x] [x x]) s))","user":"5461dc79e4b01be26fd746a8"},{"code":"(fn [coll] (loop [c coll a []] (if (empty? c) a (recur (rest c) (conj (conj a (first c)) (first c))))))","problem":32,"user":"52b43468e4b0c58976d9ad1b"},{"problem":32,"code":"(fn fc32 [l]\n  (if (empty? l) '()\n    (cons (first l) (cons (first l) (fc32 (rest l))))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":32,"code":"(fn dupe2 [input_seq]\n  (let [tmp (for [x (seq input_seq)] [x x])]\n    (println tmp)\n    (loop [result [] t tmp]\n      (if (nil? (first t))\n        result\n        (recur (concat result (first t) ) (rest t))))))","user":"524a7c1ae4b05ef8e38e64ac"},{"problem":32,"code":"(fn problem-32 [coll]\n  (cond\n    (or (nil? coll) (empty? coll)) '()\n    :else (cons (first coll) (cons (first coll) (problem-32 (rest coll))))))","user":"5a786f6be4b013a48d39976e"},{"problem":32,"code":"(fn\n  [input]\n  (loop [coll input\n         result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (conj result (first coll) (first coll))))\n   ))","user":"54021f13e4b0df28a13c62cc"},{"code":"(fn duplicate [seq]\n  (reverse (reduce #(cons %2 (cons %2 %1)) (sequence nil) seq)))","problem":32,"user":"50651de3e4b0b1b6c8b1d85f"},{"code":"#(mapcat (fn [x] (vector x x)) %)","problem":32,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":32,"code":"(fn dup [ls] (if (empty? ls)\n           '()\n           (cons (first ls) (cons (first ls) (dup (rest ls))))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"code":"(fn [s] (reduce #(cons %2 (cons %2 %1)) () (reverse s)))","problem":32,"user":"52474de3e4b05ef8e38e6360"},{"code":"#(interleave % %1)","problem":32,"user":"532631e1e4b09d4e7a9b54ea"},{"code":"(fn dupe[coll](\r\n    if (empty? coll) ()  \r\n  (concat (list (first coll) (first coll))\r\n  (dupe (rest coll)))))","problem":32,"user":"4dbed096535d020aff1edf6b"},{"problem":32,"code":"#(reduce (fn [l, v] (conj l v v)) [] %)","user":"525636dfe4b0541d1855ba0d"},{"problem":32,"code":"(fn [col] (reduce concat (map #(repeat 2 %) col)))","user":"556f35fee4b09a3098a5251a"},{"problem":32,"code":"(fn [lst]\n  (reduce concat (map #(take 2 (repeat %)) lst)))","user":"560a7775e4b05f002753defa"},{"problem":32,"code":"#(loop [y % x []]\n     (if (= (count y) 0)\n           \t(seq x)\n           \t(recur (next y) (conj x (first y) (first y)) )))","user":"552712e7e4b0ffed3738f92a"},{"code":"(fn [seq]\n     (reverse (reduce (fn [su y] (conj (conj su y) y )) nil seq)))","problem":32,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn [li]\r\n\r\n  (loop [li li ret []] \r\n    (if (= 0 (count li))\r\n        ret   \r\n        (recur (rest li) (conj (conj ret (first li)) (first li)))     \r\n    )\r\n  )\r\n)","problem":32,"user":"513caa36e4b0b86ece9f3229"},{"code":"(fn [a] (reduce #(concat %1 [%2 %2]) [] a))","problem":32,"user":"4f0eeff3535d0136e6c22327"},{"problem":32,"code":"(fn [coll]\n   (reduce (fn [inicial number]\n             (conj inicial number number))\n           []\n           coll))","user":"58a34442e4b02bd94d917ef2"},{"code":"#(apply mapcat list (repeat 2 %))","problem":32,"user":"4f608f0ee4b0defedf855faa"},{"code":"(fn [s]\n          (mapcat (fn [x] (list x x)) s))","problem":32,"user":"52c6f6dee4b0c2d177d62118"},{"code":"(fn \n  ([ret col]\n  (if \n    (= '() col) ret\n    (recur (conj ret (first col) (first col))\n(rest col))))\n  ) []","problem":32,"user":"50bfe725e4b080409b860f26"},{"code":"#(for [x % y [0 1]] x)","problem":32,"user":"52016fd3e4b0b2e020a18f10"},{"code":"#(loop [ coll []  int %]\n       (if (empty? int) coll\n           (recur (conj coll (first int) (first int))  (rest int)\n)))","problem":32,"user":"517945dce4b0684c1c981a43"},{"code":"(fn x [l]\n  (cond\n    (nil? l) ()\n    (= l ()) ()\n    :else \n      (conj \n        (conj\n          (x (rest l))\n          (first l))\n        (first l))\n  )\n)","problem":32,"user":"4fd153cee4b04c3a95aa040e"},{"problem":32,"code":"(fn duplicate\n  ([l] (duplicate l []))\n  ([l resp]\n   (if (= l [])\n     resp\n     (let [f (first l)]\n       (duplicate (rest l) (conj resp f f))))))","user":"574f1c24e4b02ea114799255"},{"code":"(fn [s]\n  (loop [s s r []]\n    (if (not (seq s))\n      r\n      (recur (rest s) (conj r (first s) (first s))))))","problem":32,"user":"4dbdc9da535d020aff1edf4c"},{"problem":32,"code":"(fn dupe [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","user":"5e155173e4b0a047bd49f6fd"},{"problem":32,"code":"#(for [i % j [0 0]] i)","user":"54344721e4b0b6b47310fcea"},{"problem":32,"code":"(fn double-list [the-seq]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() the-seq )))","user":"5645a7d6e4b0284900eef608"},{"problem":32,"code":"(fn [ls]\n\t (apply concat (for [x (seq ls)] [x x])))","user":"5d125d63e4b02c15ef021999"},{"problem":32,"code":"#((comp interleave) %1 %1)","user":"5a2a5239e4b09cafd31c7f30"},{"problem":32,"code":"(fn dupl [a] (\nif (not (= 0 (count a)))\n  (\n  if ( = 1 (count a))\n    (conj '() (first a) (first a))\n    (conj (dupl (rest a)) (first a) (first a) )\n  )\n))","user":"602bca69e4b0d5df2af22267"},{"problem":32,"code":"#(seq (reduce (fn [a b]\n           (conj a b b)) [] %))","user":"59fd069ae4b01bb0ae8afcf4"},{"problem":32,"code":"(fn dupli [s] (if (empty? s) '() (let [fs (first s)] (cons fs (cons fs (dupli (rest s)))))))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn dup-seq [a-seq]\n   (reverse (reduce #(conj %1 (first %2) (second %2))  () (map #(list % %) a-seq)))     \n)","problem":32,"user":"52763696e4b03e8d9a4a74d7"},{"code":"#(apply concat (for [x %] [x x]))","problem":32,"user":"4ea57300535d7eef308072d5"},{"code":"#(loop [x % z []] (if (empty? x) z (recur (rest x) (conj z (first x) (first x)))))","problem":32,"user":"52e48632e4b09f7907dd1450"},{"code":"(fn [s]\n  (reduce \n   (fn [x y]\n     (conj x y y)) [] s))","problem":32,"user":"512eb723e4b0b740abc5982b"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs\n         ys nil]\n    (if (empty? xs)\n      (reverse ys)\n      (recur (rest xs) (cons (first xs) (cons (first xs) ys))))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":32,"code":"(fn [s]\n  (reduce \n   (fn [a v]\n     (conj (conj a v) v)\n   )\n   []\n   s\n  )\n)","user":"577aacf2e4b0d3393e5deb03"},{"problem":32,"code":"(fn myduplicate\n  [myseq]\n  (reduce concat\n          (map #(list % %) myseq)))","user":"55897fe2e4b059ccff29b205"},{"problem":32,"code":"(fn [c] (mapcat #(identity [%1 %1]) c))","user":"600cb742e4b074f607df6696"},{"problem":32,"code":"#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj out (first in) (first in)))))","user":"564a5a09e4b0284900eef656"},{"problem":32,"code":"(fn dbl [coll]\n  (if (seq coll)\n     (let [x (first coll) xs (next coll)]\n       (lazy-cat (list x x) (dbl xs)))))","user":"5bc833a5e4b07a9b28b100bb"},{"code":"(fn [input]\n\t\t(interleave input input))","problem":32,"user":"51205867e4b0e88f5a20c40f"},{"problem":32,"code":"(fn [xx] (apply concat (#(map (fn [x] (list x x)) %)xx) ))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":32,"code":"reduce (fn [acc i] (into acc [i i])) []","user":"5b210749e4b03cfeda66ed48"},{"problem":32,"code":"(fn [c]\n  (reduce\n   (fn [a b]\n     (concat a (list b) (list b))) () c))","user":"5829bc55e4b051871117bf49"},{"code":"(fn [s] (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))","problem":32,"user":"4ef89fb0535dced4c769f260"},{"problem":32,"code":"(fn dup \n  ([data]\n   \t(dup data []))\n  ([data res]\n   \t(loop [d data r res]\n      (if (empty? d)\n        \tr\n        \t(recur (rest d) (conj r (first d) (first d)))))))","user":"5b11449ce4b0cc2b61a3be2d"},{"code":"(fn [x]\n  (loop [a x res [] n (count x)]\n    (if (zero? n)\n      (seq res)\n      (recur (rest a) (conj res (first a) (first a)) (dec n)))))","problem":32,"user":"4f040bbf535dcb61093f6b95"},{"problem":32,"code":"(fn [a-seq]\n  (loop [output [] remaining a-seq]\n    (if (empty? remaining) output\n      (recur\n        (conj output (first remaining) (first remaining))\n        (rest remaining)))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn dupes [s]\n  (interleave s s))","problem":32,"user":"4ec34578535dcc7ae8597d51"},{"code":"(fn [l] \n  (reverse\n   (reduce\n    (fn [xs x] (conj xs x x))\n    '()\n    l)))","problem":32,"user":"52218b29e4b0e6a83c8925da"},{"code":"(fn dup [v] (interleave v v))","problem":32,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [x]\n  (apply concat (map (fn [y] [y y]) x))\n)","problem":32,"user":"4fe610fde4b0e8f79898fece"},{"problem":32,"code":"#(reduce (fn [val i] (conj (conj val i) i)) [] %)","user":"52d68ed2e4b09f7907dd1362"},{"problem":32,"code":"(fn duplicate-sequence [input]\n  (reduce (fn [col ele] (apply conj col ele)) (map #(apply vector (repeat 2 %)) input)))","user":"5c196dc3e4b01240ff5671fa"},{"code":"(fn [x]\n  (loop [x x r []]\n    (if (empty? x) r (recur (rest x) \n      (concat r [(first x) (first x)])))))","problem":32,"user":"4dd29ede535dae65d5c462da"},{"code":"(fn duplicate [s]\n  (if (empty? s)\n    s\n    (cons (first s) (cons (first s) (duplicate (rest s))))))","problem":32,"user":"52ec1dfbe4b0705949c4444b"},{"problem":32,"code":"(fn [foo]\n  (mapcat identity (map #(concat % %) (partition-by identity foo)))\n  )","user":"595d0897e4b066ee0a44b00f"},{"problem":32,"code":"(fn [x] (reduce (fn [coll curr] (conj coll curr curr)) [] x))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":32,"code":"(fn [l] (apply concat (map #(list %1 %1) l)))","user":"55e87696e4b0121d4835fd93"},{"problem":32,"code":"(fn duplicate [seq]\n  (interleave seq seq))","user":"58ed713de4b056aecfd47d84"},{"problem":32,"code":"(fn [x] (interleave x x) )","user":"5dab11cde4b000c986472c45"},{"problem":32,"code":"(fn [x] (reduce concat nil (map #(list % %) x)))","user":"5bc09ebae4b07a9b28b10005"},{"problem":32,"code":"(fn [input]\n  (loop [in input\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out\n                   (first in) (first in))))))","user":"55db1696e4b0e31453f64ae1"},{"code":"(fn [coll]\n  (mapcat #(take 2 (repeat %)) coll))","problem":32,"user":"532c9dc9e4b019098a6f8b30"},{"code":"(fn [xs]\n  (reduce concat (map #(repeat 2 %) xs)))","problem":32,"user":"50e19748e4b0ec0e353386e5"},{"code":"(fn [xs] (reduce #(concat %1 [%2 %2]) [] xs))","problem":32,"user":"502d387fe4b0d96a44ab202f"},{"problem":32,"code":"#(reduce (fn [x y]\n           (concat x [y y]))\n         []\n         %)","user":"53aef31ce4b047364c04447b"},{"code":"(fn duplicate [coll]\r\n  (reduce #(concat %1 %2)\r\n    (map\r\n      #(repeat 2 %1)\r\n      coll )))","problem":32,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn [data]\n  (mapcat #(list % %) data))","problem":32,"user":"4eb1dd39535d7eef30807345"},{"code":"reduce #(concat %1 [%2] [%2]) []","problem":32,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"code":"(fn dup [coll] \r\n  (lazy-seq \r\n    (when-let [s (seq coll)] \r\n      (cons (first s) (cons (first s) (dup (rest s)))))))","problem":32,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"#(interleave % %)\n;(fn [x]\n;  (reduce #(concat %1 (list %2 %2)) '() x))","problem":32,"user":"4f82ed48e4b033992c121c0e"},{"code":"(fn dup-mapcat [coll]\n  (mapcat (partial repeat 2) coll))","problem":32,"user":"4fc6305de4b0ee37620e180b"},{"problem":32,"code":"(fn [x] \n;  (loop [l x\n ;        point []]\n  ;  (if (not (empty? l))\n   ; (recur (rest l) (conj point (first l) (first l) )) point)\n    ;       ))\n  (reduce #(conj %1 %2 %2) [] x))","user":"593744abe4b02506e01a299b"},{"code":"(fn duplicate[s]\r\n  (reverse (\r\n    (fn [s c]\r\n    (if (empty? s)\r\n\t\tc\r\n\t\t(recur \r\n      (drop-last s) \r\n      (conj (conj c (last s)) (last s)))\r\n      )\r\n    ) (reverse s) ()\r\n  ))\r\n)","problem":32,"user":"4e7650c5535d324fb2983d68"},{"code":"#(reduce concat (map (fn [e] (list e e)) %))","problem":32,"user":"4f1bee08535d64f60314647e"},{"problem":32,"code":"#(reduce (fn [c i] (conj (conj c i) i)) '[] %)","user":"560aed59e4b05f002753df11"},{"problem":32,"code":"(fn fun [x] (if (empty? x) nil (conj (fun (rest x)) (first x) (first x))))","user":"560ff632e4b05f002753df66"},{"problem":32,"code":"#(-> (into % %) sort)","user":"5638d2d1e4b0bfe05bf117eb"},{"problem":32,"code":"(fn [coll] (\n    reduce (fn [acc curr] (conj acc curr curr)) [] coll\n))","user":"5d40493ae4b05dd059a54364"},{"problem":32,"code":";reduce #(into %1 [%2 %2]) []\n#(interleave % %)","user":"59f590ade4b0966464fe6ac1"},{"code":"#(reduce (fn [l n] (conj l n n)) [] %)","problem":32,"user":"51ec9114e4b069f463c22ccd"},{"problem":32,"code":"#(loop [col % rt []]\n   (if(empty? col)\n     rt\n     (recur (rest col) (conj rt (first col) (first col)))\n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"code":"#(sort (concat %1 %1))","problem":32,"user":"4f0cd1c9535d0136e6c22311"},{"problem":32,"code":"(fn [s] (reverse (reduce #(conj % %2 %2) '() s)))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [s] (reverse (reduce #(conj %1 %2 %2) () s)))","problem":32,"user":"539b5fcee4b0b51d73faaf1e"},{"problem":32,"code":"(fn \n  [x]\n  (loop [coll x out []]\n    (cond (empty? coll) out\n          :else (recur (rest coll) (conj (conj out (first coll)) (first coll))))))","user":"57acee37e4b0b8559636fc94"},{"code":"(fn[s](->> s(map #(conj [%]%))(mapcat identity)))","problem":32,"user":"530cb5b8e4b02e82168697e0"},{"problem":32,"code":"(partial reduce (fn [r e] (conj r e e)) [])","user":"57bc50c7e4b05aa3c4741c40"},{"problem":32,"code":"(fn \n [x]\n  (reverse (reduce (fn [x y]\n            (conj (conj x y) y))\n          (list)\n          x)))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":32,"code":"(fn [list]\n  (reverse\n   (reduce \n    (fn [acc curr] \n      (conj acc curr curr))\n    '() \n    list)))","user":"565418cde4b0f9d632dd847c"},{"code":"(fn [coll]\r\n  (apply concat (map #(list % %) coll))\r\n)","problem":32,"user":"4e1ec17a535d04ed9115e80a"},{"code":"(fn [s] (mapcat identity (map #(list % %) s)))","problem":32,"user":"4eff81ca535dcb61093f6a2d"},{"problem":32,"code":"#(for [col % i [0 1]] col)","user":"569f33c7e4b0542e1f8d148f"},{"code":"reduce (fn [acc val]\n         (conj (conj acc val) val))\n       []","problem":32,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":32,"code":"(fn duplicate\n    [coll]\n    (reduce (fn [processed current]\n              (conj processed current current)\n              )\n            []\n            coll)\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"problem":32,"code":"#(reduce (fn [m e](conj m e e)) [] %)","user":"5562f08ae4b0c656e3ff17df"},{"code":"(fn [s]\n  (loop [r []\n         x s]\n    (if (empty? x)\n      (seq r)\n      (recur (conj r (first x) (first x)) (rest x)))))","problem":32,"user":"532df9c5e4b019098a6f8b42"},{"code":"#((fn dup [coll]\n  (when-let [[h & t] (seq coll)]\n\t\t(concat (list h h) (dup t)))) %)","problem":32,"user":"4ee91d00535d93acb0a6688b"},{"code":"#(apply concat (map (fn [x] (repeat 2 x)) %))","problem":32,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn ! [lst]\n     (into \n      [(first lst) (first lst)]\n      (if (> (count lst) 1) (! (rest lst)) [])\n      ))","problem":32,"user":"50d6d7eee4b0159555a1fc76"},{"code":"(fn baf [c] (if (= (count c) 0) '() (conj (conj (baf (drop 1 c)) (first c)) (first c))))","problem":32,"user":"5127ca90e4b03a34742b42ff"},{"problem":32,"code":"#(reverse (reduce (fn [res e] (conj res e e)) '() %))","user":"5749ce09e4b009280f9f2ba0"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(repeat 2 %) xs)\n )","user":"55aa8276e4b0988bba2ad94e"},{"problem":32,"code":"(fn [ls]\n  (reduce #(conj %1 %2 %2) [] ls)\n  )","user":"60228147e4b0d5df2af22202"},{"code":"(fn dup [coll]\n  (if-let [f (first coll)]\n    (cons f (cons f (dup (rest coll))))))","problem":32,"user":"4e8c1d97535d65386fec2127"},{"problem":32,"code":"reduce (fn [acc val]\n         (conj acc val val)) []","user":"567abc97e4b05957ce8c619d"},{"problem":32,"code":"(fn [x] \n  (reverse(reduce \n    (fn [my-list elem] (conj my-list elem elem))\n    ()\n    x\n  ) )\n)","user":"5d7faa52e4b0915913b1d365"},{"problem":32,"code":"reduce (fn [acc item] (apply list (conj (vec acc) item item))) []","user":"5cf9bfd9e4b0cc9c91588131"},{"code":"(fn [s] \n  (loop \n    [accu '()\n     r s] \n    (if (empty? r) \n      (reverse accu) \n      (recur (cons (first r) (cons (first r) accu)) (rest r)))))","problem":32,"user":"4e82c062535db62dc21a62cc"},{"problem":32,"code":"#(for [e % i (range 2)] e )","user":"55641bcfe4b0c656e3ff17ff"},{"code":"(fn [x] (mapcat #(conj (conj [] %) %) x))","problem":32,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn dup [s]\n  (if-let [[x & xs] (seq s)]\n    (conj (dup xs) x x)\n    '()))","problem":32,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":32,"code":"(fn dup [x]\n  (if (empty? x)\n    x\n    (cons (first x) (cons (first x) (dup (rest x))))))","user":"55a35ef4e4b0acc240e31535"},{"problem":32,"code":"(fn [col]\n    ((fn _duplicate [col ret]\n      (if (empty? col) ret\n      (let [nret (into (list (first col) (first col)) (reverse ret))]\n        (_duplicate (rest col) nret)\n      )\n      )\n      ) col '())\n    )","user":"54ec7f52e4b024c67c0cf853"},{"code":"(fn [s]\n  (loop [original s, result []]\n    (if (seq original)\n      (recur\n        (rest original)\n        (concat result (repeat 2 (first original))))\n    result)))","problem":32,"user":"50b29029e4b03ea880433563"},{"code":"(fn [arg]\n  (loop [coll arg result ()]\n    (if (empty? coll) result\n        (recur (rest coll) (concat result (list (first coll) (first coll)))))))","problem":32,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":32,"code":"(fn dup\n  ([xs] (dup xs '()))\n  ([xs acc]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (concat acc (list (first xs)) (list (first xs))))))\n)","user":"5b9da7fbe4b0c0b3ffbd4b3f"},{"code":"(fn dbl [[f & n]]\n  (if (empty? n)\n    [f f]\n  \t(concat [f f] (dbl n))))","problem":32,"user":"53908e6be4b0b51d73faae9a"},{"problem":32,"code":"#(loop [x % result []]\n    (if (empty? x) result (recur (rest x) (conj (conj result (first x)) (first x)))))","user":"575e71a2e4b0846ea39baf26"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc item]\n            (into acc (repeat 2 item)))\n          []\n          s))","user":"5ed875abe4b016b56eae05f2"},{"code":"(fn [col] (reduce concat ((fn [col] (map #(repeat 2 %) col)) col)))","problem":32,"user":"5339af7de4b0e30313ee6cab"},{"problem":32,"code":"#(apply concat (for [e %] (list e e)))","user":"5aac01d3e4b073f177442567"},{"code":"(fn [xs]\n  (apply concat (map #(list % %) xs)))","problem":32,"user":"4ee67d74535d93acb0a66861"},{"problem":32,"code":"(fn [x] \n  (apply concat \n         (map #(repeat 2 %) x)))","user":"5ac04101e4b073f177442737"},{"problem":32,"code":"(fn foo [x]\n\n    (if (> (count x) 0)\n        \n           \n     (conj (conj (foo (rest  x)   ) (first x) ) (first x))  \n     \n     \n     \n     \n        \n    )\n    )","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"#(reduce\n     (\n       fn[acc val] (conj (conj acc val) val)\n       )\n     [] %\n     )","problem":32,"user":"528f82d8e4b0239c8a67aef4"},{"code":"(fn [x] \n  (loop [l x nl '()]\n    (cond\n      (empty? l) nl\n      :else (recur (rest l) (concat nl [(first l)] [(first l)])))))","problem":32,"user":"4e920f44535dbda64a6f6afd"},{"code":"(fn [s] (mapcat #(take 2 (repeat %)) s))","problem":32,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [arr]\n  (reduce (fn [x y] (concat x [y y])) '() arr))","problem":32,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"#(mapcat (fn [a] (list a a)) %)","problem":32,"user":"4dad76588e77d6ed63f12a44"},{"problem":32,"code":"(fn [s] (seq (reduce #(conj %1 %2 %2) [] s)))","user":"55f9c245e4b03cbcff9738ca"},{"problem":32,"code":"(fn duplicate [l]\n  (if (empty? l)\n    l\n    (concat (list (first l) (first l)) (duplicate (rest l)))))","user":"55e4487ce4b050e68259b44c"},{"problem":32,"code":"(fn [args]\n  (mapcat #(vector % %) args))","user":"543a8256e4b032a45b869327"},{"code":"(fn [s]\n  (loop [sx s, res ()]\n    (if (seq sx)\n        (recur (rest sx) (cons (first sx) (cons (first sx) res)))\n        (reverse res))))","problem":32,"user":"4ed2a31c535d44c135fd68db"},{"problem":32,"code":"(fn [coll] (reduce (fn [list val] (conj list val val)) [] coll ))","user":"537bca8be4b06839e8705e71"},{"code":"(fn [input] (mapcat #(list % %) input))","problem":32,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"#(mapcat\n  (fn lol [x] [x x])\n  %)","problem":32,"user":"4f8db862e4b02e764a0a51b2"},{"problem":32,"code":"(fn[x](interleave x x))","user":"6001460ce4b074f607df6611"},{"problem":32,"code":"#_(fn [coll]\n  (reduce (fn [acc item]\n            (conj acc item item))\n          []\n          coll))\n\n(fn [coll]\n  (interleave coll coll))","user":"5d6f063de4b04d129b00f2d1"},{"problem":32,"code":"(fn doub [x]\r\n  (loop [[f & r] x\r\n         res []]\r\n    (if (nil? f)\r\n      res\r\n      (recur r (conj res f f)))))","user":"546e1142e4b00cfc9eacc199"},{"code":"mapcat #(repeat 2 %)\n\n; #(mapcat (juxt identity identity) %)\n\n; (partial reduce #(conj % %2 %2) [])\n\n; #(interleave % %)","problem":32,"user":"503f4759e4b00d1a725ff2a9"},{"problem":32,"code":"#(loop [ss % r '[]]\n     (if (empty?  ss)\n      r\n      (recur (rest ss) (conj r (first ss) (first ss)))))","user":"56a1fce9e4b0542e1f8d14b7"},{"problem":32,"code":"#(sort (concat % (into '() %)))","user":"581829cce4b0c0e9c07b83a9"},{"code":"(fn [coll] (mapcat (fn [x] [x x]) coll))","problem":32,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":32,"code":"reduce #(conj  %1 %2 %2) []","user":"58e7229fe4b056aecfd47cc4"},{"code":"(partial \n (fn [acc l] \n   (if (empty? l) (reverse acc) \n     (recur (conj (conj acc (first l)) (first l)) (rest l)))) '())","problem":32,"user":"5273e006e4b03e8d9a4a7495"},{"problem":32,"code":"#(reduce (fn [col x] (conj col x x)) [] %)","user":"5913fde8e4b0163c97b36f13"},{"problem":32,"code":"(fn [xs] (->(concat xs xs) sort))","user":"55e3924ae4b050e68259b445"},{"problem":32,"code":";#(mapcat (fn [x] [x x]) %)\n#(interleave % %)","user":"564b495de4b0284900eef667"},{"code":"(fn dupem [s] (reverse (\n      (fn dupem2 [i o] \n         (if (= (first i) nil)\n             o\n             (let [\n                    fi (first i)\n                  ]\n                  (dupem2 (rest i) (cons fi (cons fi o)))\n             )\n         )\n      )\n      s []\n   ))\n)","problem":32,"user":"4ec17677535dfed6da9c6dad"},{"problem":32,"code":"mapcat #(into [] [% %])","user":"540d7dd1e4b0addc1aec6713"},{"problem":32,"code":"(fn [myseq]\n  (reduce (fn [acc next-value] (conj (conj acc next-value) next-value)) [] myseq))","user":"60726211e4b069485764de36"},{"problem":32,"code":"(fn [elements] \n  (let [size (count elements)]\n    (loop [x 0\n           res []]\n      (if (= x size)\n        res\n        (recur (inc x) (concat res [(nth elements x) (nth elements x)]))))\n    )\n  )","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":32,"code":"(fn [a-seq]\n                               (loop [l a-seq acc '()]\n                                 (if (empty? l)\n                                   (reverse acc)\n                                   (recur (rest l) (conj (conj acc (first l)) (first l))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":32,"code":"(fn [my-seq](apply concat (map (partial repeat 2) my-seq)))","user":"5fc61b45e4b06010e5ea651a"},{"code":"(fn d [l]\n  (if (empty? l) \n    []\n    (cons (first l) (cons (first l) (d (rest l))))\n  )\n)","problem":32,"user":"4ebbffbd535dfed6da9c6d79"},{"problem":32,"code":"#(apply concat (for [x %] (conj [x] x)))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn f\r\n  ([s]\r\n    (f s []))\r\n  ([s acc]\r\n    (if (next s)\r\n      (recur (next s) (conj (conj acc (first s)) (first s)))\r\n      (conj (conj acc (first s)) (first s)))))","problem":32,"user":"4e21c139535d04ed9115e819"},{"code":"reduce #(conj %1 %2 %2) []","problem":32,"user":"4e6472b7535d8ccf87e9fe6c"},{"code":"(fn [coll]\r\n    (reverse (reduce (fn [t e] (conj t e e)) nil coll)))","problem":32,"user":"4f149e0f535d64f60314643d"},{"code":"(fn duplicate [x] (reduce (fn [b c] (concat b c)) '() (map (fn [a] (list a a)) x)))","problem":32,"user":"4ec12516535dfed6da9c6da7"},{"problem":32,"code":"(fn seq-double [sequence]\n    (loop [sequence sequence, res []]\n         (if-not (empty? sequence)\n              (recur (rest sequence) (conj res (first sequence) (first sequence)))\n               res)))","user":"587bead1e4b01531a375eb0d"},{"problem":32,"code":"#(sort ((fn [inc-array] (concat inc-array inc-array)) %))","user":"56040e58e4b0c80df0ca2654"},{"problem":32,"code":"(fn [s] (reduce #(concat % [%2 %2]) '() s))","user":"5c59b836e4b01df32ab73263"},{"problem":32,"code":"(fn [sq] (reverse (reduce (fn [nsq curr] (into (into nsq (list curr)) (list curr))) '() sq)))","user":"5c76577ae4b0fca0c16227ea"},{"problem":32,"code":"(fn [xs]\n    (loop [xs xs ys []]\n      (if (empty? xs)\n        ys\n        (recur (rest xs) (conj ys (first xs) (first xs)))\n        )))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [args] (apply concat (map #(repeat 2 %) args)))","problem":32,"user":"4f072644535dcb61093f6c20"},{"problem":32,"code":"(fn [c] (reverse (reduce (fn [a i] (conj a i i)) '() c)))","user":"54bc69a7e4b0ed20f4ff6ecf"},{"code":"(fn dob-seq [x]\n  (if (not (empty? x))\n    (let [fx (first x), rx (rest x)]\n      (cons fx (cons fx (dob-seq rx))))\n      '()))","problem":32,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":32,"code":"#(sort(take (* 2 (count %)) (cycle %)))","user":"580d7e53e4b0849f6811b73e"},{"problem":32,"code":"(fn [origlist] \n   (loop [inlist (seq origlist) outlist '()]\n     (if (empty? inlist)\n       (reverse outlist)\n       (let [a (first inlist)]\n         (recur (rest inlist) (conj outlist a a))))))","user":"56197b47e4b053970a773af8"},{"code":"(fn [s] (reverse (reduce #(cons %2 (cons %2 %)) [] s)))","problem":32,"user":"522e6c01e4b01cdb292c5f01"},{"code":"(partial mapcat (partial replicate 2))","problem":32,"user":"4e8681b7535dae1a5effa438"},{"problem":32,"code":"(fn dup-items\n  ([s] (dup-items s '()))\n  ([s result] \n   (if (= s nil)\n     (reverse result)\n     (recur (next s) (conj result (first s) (first s))))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":32,"code":"(fn f [s] (if (empty? s) '() (conj (f (rest s)) (first s) (first s))))","user":"5e373c08e4b0650de70e2b41"},{"code":"(fn [coll] (reduce concat (map #(repeat 2 %) coll)))","problem":32,"user":"4f2a7174e4b0d6649770a03e"},{"problem":32,"code":"(fn [seq] (mapcat #(repeat 2 %) seq))","user":"4ed3b4a7535d44c135fd68f5"},{"problem":32,"code":"(fn [xs]\n  (->> xs\n   (map #(list % %))\n   (reduce concat)))","user":"5e0e14bde4b099d064962fa3"},{"problem":32,"code":"#(apply concat (map (fn [y] (take 2 (repeat y))) %1))","user":"5bfada5ee4b0bdcf453d15d2"},{"code":"(fn [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))","problem":32,"user":"518a8c4be4b0df82f5685903"},{"problem":32,"code":"reduce #(into %1 (take 2 (repeat %2))) []","user":"54c72b19e4b045293a27f636"},{"code":"(fn duplicate [lst]\n  (mapcat #(list % %) lst))","problem":32,"user":"4fc52278e4b081705acca37c"},{"problem":32,"code":"(fn [l] (reduce (fn [a b] (conj a b b)) '() (reverse l)))","user":"574986cae4b009280f9f2b9c"},{"code":"reduce (fn [v x] (conj v x x)) []","problem":32,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [sq] (apply concat (map (fn [x] (list x x)) sq)))","problem":32,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":32,"code":"(fn [coll] (mapcat (fn [a] [a a]) coll))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [c] (mapcat #(vector % %) c))","problem":32,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [p] (mapcat #(list % %) p))","problem":32,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":32,"code":"#(seq (reduce (fn [x y] (-> x (conj y) (conj y))) [] %))","user":"582589b2e4b051871117bedd"},{"problem":32,"code":"(fn [l] (->> l (mapcat #(list % %))))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":32,"code":"(fn [coll]\n  (let [aux-coll (reverse coll)]\n    (reduce (fn [acc item]              \n              (let [aux-acc (conj acc item)]\n                (conj aux-acc item)))\n            '()\n            aux-coll)))","user":"60cebbd3e4b0e0fa5f1b4334"},{"code":"#(sort(concat % %))","problem":32,"user":"535944d6e4b04ce2eb3ed296"},{"problem":32,"code":"(fn [s] (mapcat (fn [e] (list e e)) s))","user":"5c7ef3f3e4b0d597f478cad7"},{"code":"(fn [s] (reduce (fn [d, x] (concat d [x x])) [] s))","problem":32,"user":"50fc9c08e4b0d10d794c19f9"},{"problem":32,"code":"(fn [a] (reduce concat (map (fn [x] (list x x)) a)))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":32,"code":"(fn dup_seq \n    ([s]\n        (dup_seq [] s))\n    ([r_seq s]\n        (if (< 0 (count s))\n            (dup_seq (conj r_seq (first s) (first s)) (rest s))\n            r_seq)))","user":"56058d64e4b08b23635d3169"},{"code":"(fn [xs]\n  (mapcat (fn [x] [x x]) xs))","problem":32,"user":"4feff3b6e4b0678c553fc31e"},{"problem":32,"code":"(fn duplicate-a-sequence [xs]\n  (mapcat #(repeat 2 %) xs))","user":"518b8561e4b0f028e99addef"},{"problem":32,"code":"(fn [v] (apply concat (map #(repeat 2 %) v)))","user":"5646bb8fe4b0284900eef614"},{"problem":32,"code":"(fn [i]\n  (reduce #(conj %1 %2 %2) [] i))","user":"57a2bb9be4b0c3d858beb905"},{"problem":32,"code":"reduce (fn [a x] (conj a x x)) []","user":"5329b493e4b09d4e7a9b5515"},{"problem":32,"code":"(fn [in] (mapcat #(->[% %]) in))","user":"563e7a33e4b0da801c4e466d"},{"problem":32,"code":"#(loop [out '()\n        coll %]\n   (if (empty? coll)\n     out\n     (recur (concat out (list (first coll) (first coll))) (rest coll))))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn my-duplicate\n  [input]\n  (mapcat #(vector % %) input))","problem":32,"user":"5300b750e4b0d8b024fd3711"},{"problem":32,"code":"(fn\n  [s]\n  (interleave s s)\n )","user":"6074f5ede4b069485764de52"},{"code":"(fn [xs] \n  (loop [cur-seq xs new-seq []] \n    (if (empty? cur-seq) \n      new-seq \n      (recur \n        (rest cur-seq) \n        (conj new-seq (first cur-seq) (first cur-seq))))))","problem":32,"user":"4ddabc33535d02782fcbe9f5"},{"problem":32,"code":"#(apply concat (map (fn [el] (list el el)) %))","user":"5a7ff79ce4b00b71e582a046"},{"code":"#(reduce (fn [m a] (concat m (list a a))) '() %)","problem":32,"user":"5185e17ee4b0da5a5be3bac5"},{"code":"(fn [x]\n  (let [y '()]\n    (apply concat y (map #(list % %) x))))","problem":32,"user":"5012aefce4b0c8732600222a"},{"problem":32,"code":"(fn [l]\n  (reduce (fn [a b]\n            (conj a b b))\n          [] l))","user":"5978305be4b01722bebd4d03"},{"problem":32,"code":"(fn [x]\n  ( mapcat #(repeat 2 % ) x))","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":32,"code":"#(mapcat (fn [v] [v v]) %)","user":"56f881e0e4b08e7d20b96839"},{"code":"#(apply concat (map (partial repeat 2) %))","problem":32,"user":"4e50b67b535dc968683fc4ed"},{"problem":32,"code":"#(reduce (fn [result, target] (conj result target target)) '() (reverse %))","user":"57a5f1e3e4b0a96607956200"},{"code":"#(loop [xs %, r []]\n   (if (empty? xs)\n     r\n     (recur (rest xs) (conj r (first xs) (first xs)))\n    )\n  )","problem":32,"user":"5136f659e4b04059df19f2fd"},{"problem":32,"code":"#(apply concat (for [d %] [d d]))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":32,"code":"#(loop [i 0 out [] sequ %1]\n        (if (= i (count %1))\n            out\n            (recur\n              (inc i)\n              (concat out (repeat 2 (sequ i)))\n              sequ)))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn dup\n  [[head & more]]\n    (if head\n      (concat [head head] (dup more))\n      '()))","problem":32,"user":"4e6ac7a8535d8ccf87e9ff03"},{"problem":32,"code":"(fn [s]\n  (loop [rem s acc []]\n    (if (empty? rem)\n      acc\n      (recur (rest rem) (conj acc (first rem) (first rem))))))","user":"58ca613de4b021aa9917edb7"},{"problem":32,"code":"(fn [col] \n  (reduce \n    #(conj %1 %2 %2)\n    []\n    col\n   )\n  )","user":"5bafd5c8e4b0a20761a234dd"},{"problem":32,"code":"(fn f [l] (if (empty? l) l (concat (list (first l) (first l)) (f (rest l)))))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"code":"(fn [n]\n  (reduce \n   (fn [xs, x] (concat xs [x,x])) [] n))","problem":32,"user":"507c4829e4b0a19f8e876e57"},{"problem":32,"code":"(fn [s]\n  (loop [i (first s) r (rest s) result []]\n    (if (empty? r)\n      (conj (conj result i) i)\n      (recur (first r) (rest r) (conj (conj result i) i)))))","user":"4e72a717535d5021c1a89665"},{"problem":32,"code":"(fn [x] (sort (apply concat (repeat 2 x))))","user":"5758e39be4b02ea114799313"},{"code":"(fn replicate-seq\n  [coll]\n  (mapcat #(repeat 2 %) coll))","problem":32,"user":"51937eb3e4b04df54c098022"},{"code":"#(reduce (fn [c x] (conj c x x)) [] %)","problem":32,"user":"50d86fe2e4b01f0871336e67"},{"problem":32,"code":"#(reduce (fn [a c] (into a (list c c))) [] %)","user":"5810b899e4b0f478707a05d8"},{"problem":32,"code":"(fn [sq]\n  (reduce (fn [ls x]\n            (conj ls x x))\n          '()\n          (reverse sq)))","user":"55f73078e4b06e875b46cea4"},{"problem":32,"code":"(fn duplicator\n  ([coll] (duplicator coll []))\n  ([coll newColl] (if (empty? coll)\n                    newColl\n                    (duplicator (rest coll) (conj newColl (first coll) (first coll)))\n                   )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":32,"code":"(fn duplicate-arr\n  ([arg] (apply concat (map #(list % %) arg))))","user":"5e88a676e4b0cb016954630a"},{"problem":32,"code":"(fn duplicate-sequence [ls] (apply concat (map #(list % %) ls)))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn [xs]\n    (loop [[x & xs] xs acc []]\n      (if (empty? xs)\n        (conj acc x x)\n        (recur xs (conj acc x x)))))","problem":32,"user":"4e9fd521535d7eef3080729a"},{"problem":32,"code":"(fn [x] (interleave x x ))","user":"5578ba3ae4b05c286339e08c"},{"code":"(fn myDup \n    ([x y]\n        (if\n            (empty? x)\n                y\n            (myDup (rest x) (concat y [(first x) (first x)]))))\n    ([x] (myDup x [])))","problem":32,"user":"4f03b3fb535dcb61093f6b52"},{"code":"(fn [x] (reduce (fn [l y] (conj (conj l y) y)) [] x))","problem":32,"user":"535920b2e4b04ce2eb3ed294"},{"problem":32,"code":"(fn dup [x]\n  (apply concat (map \n            (fn [s] \n              [s s])\n            x)))","user":"53dfb864e4b0d874e779ae43"},{"problem":32,"code":"(fn [c] (reduce (fn [a b] (conj a b b)) [] c))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn dup [s]\n  (loop [a s\n         b ()]\n    (if (empty? a)\n      (reverse b)\n      (recur (rest a) (conj b (first a) (first a))))))","problem":32,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [l] (interleave l l))","problem":32,"user":"4e6e10d8535d5021c1a895fd"},{"problem":32,"code":"#(reduce concat (for [x %] (repeat 2 x)))","user":"59cdea74e4b0ef0a1e9b5b47"},{"problem":32,"code":"(fn dupl [coll]\n  (reduce (fn [acc x] (conj (conj acc x) x)) [] coll))","user":"54100c73e4b01498b1a7199e"},{"code":"#(reduce into (map (fn [x] [x x]) %))","problem":32,"user":"5032b398e4b00c0952a257eb"},{"problem":32,"code":"(fn [a] (reduce #(conj %1 %2 %2) [] a))","user":"532f8569e4b019098a6f8b4f"},{"code":"#(loop [toProcess %\n        acc []]\n   (let [current (first toProcess)\n         nextToProcess (next toProcess)]\n     (cond\n      (empty? toProcess) (seq acc)\n      :else (recur nextToProcess (conj acc current current))\n      )\n    )\n   )","problem":32,"user":"51d67516e4b0154f82ab92f0"},{"problem":32,"code":"(fn [col]\n  (reduce concat (map #(take 2 (repeat %)) col)))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":32,"code":"(fn [coll] (seq (reduce (fn [partial val] (conj (conj partial val) val)) [] coll)))","user":"5bc6ef7ce4b07a9b28b1009f"},{"code":"(fn [x]\n  (apply concat (map #(repeat 2 %) x))\n  )","problem":32,"user":"51bec919e4b013aa0d74b800"},{"problem":32,"code":"(fn [x] (mapcat (fn [y] (list y y)) x))","user":"51eda45ce4b0bb507043159b"},{"code":"(fn [s]\n  (reduce into (map #(vec (list %1 %1)) s )))","problem":32,"user":"4f29eb2ae4b0d6649770a037"},{"problem":32,"code":"(fn [sec] (reduce concat (map #(take 2 (repeat %)) sec)))","user":"607f3336e4b05857a65e7747"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(replicate 2 %) xs)\n   )","user":"5996b419e4b07157cc8daab5"},{"code":"mapcat (fn[x][x x])","problem":32,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [x] \n  (mapcat #(list % %) x))","problem":32,"user":"4f82e14be4b033992c121c0c"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll, v []]\n    (if (seq coll)\n      (recur (rest coll) (conj (conj v (first coll)) (first coll)))\n      (seq v))))","user":"5e76274ce4b085ba37836deb"},{"code":"(fn  [seqz] \n  ((fn [seqz acc]\n     (let [head (first seqz)\n           tail (rest seqz)]\n       (if (nil? head)\n         (reverse acc)\n         (recur tail (conj acc head head))\n         )\n       )\n     ) seqz '())\n  )","problem":32,"user":"4fafd067e4b081705acca259"},{"problem":32,"code":"(fn dup [x] (if (empty? x) () (conj (dup (rest x)) (first x) (first x))))","user":"591e9813e4b09b4ee5954c36"},{"problem":32,"code":"(fn [c] (loop [x c\n               y nil]\n          (if (nil? (first x))\n            (reverse y)\n            (recur (rest x) (conj y (first x) (first x))))))","user":"5753b6c6e4b02ea1147992af"},{"problem":32,"code":"(fn \n  [xs] \n  (reduce #(conj % %2 %2) [] xs))","user":"54d267e0e4b0e8a36923e5f3"},{"problem":32,"code":"#(->> % \n      (map (fn [x] [x x]))\n      (apply concat))","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":32,"code":"(fn [x] (reduce concat '() (map #(repeat 2 %) x)))","user":"56992162e4b0542e1f8d143c"},{"code":"(fn [col] (apply concat (map #(list % %) col)))","problem":32,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [coll] (sort (into [] (concat coll coll))))","problem":32,"user":"51dd55dae4b0c33a4e1da404"},{"code":"(fn [x]\n  (reduce into\n    (map #(vector % %) x)))","problem":32,"user":"4e9be708535dbda64a6f6b79"},{"problem":32,"code":"(fn dupl[input] \n  (reduce \n    (fn[l ll]\n      (concat l ll))\n    ()\n    (map #(list % %) input)))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [lst]\n     (letfn [(double-it [lst1 lst2]\n               (if (empty? lst1)\n                 lst2\n                 (double-it (rest lst1)\n                            (list* (first lst1) (first lst1) lst2))))]\n       (reverse (double-it lst []))))","problem":32,"user":"4eb6f065535d7eef30807372"},{"code":"(fn [coll]\n  (reduce #(concat % [%2 %2]) [] coll))","problem":32,"user":"51ca82e9e4b08b1cbd0d9488"},{"code":"(fn duplicate [coll]\r\n  (mapcat #(list % %) coll))","problem":32,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":32,"code":"(fn [c] (reduce  (fn[e1 e2] (conj (conj e1 e2) e2)) [] c))","user":"55809cb9e4b05c286339e0ef"},{"code":"#(reduce (fn [col _] (conj col _ _)) [] %)","problem":32,"user":"50f53694e4b057d4c52de881"},{"problem":32,"code":"(fn [s] \n  (mapcat identity \n    (map (fn [x] (cons x (cons x '()))) s)\n  )\n)","user":"5c832691e4b0c8042a70ce48"},{"problem":32,"code":"(fn [sq] (reduce concat (map (fn [x] (conj [] x x)) sq)))","user":"5447e08ce4b032a45b8693c3"},{"code":"(fn [args] \n  (reduce #(conj %1 %2 %2) [] args))","problem":32,"user":"4f71f782e4b07046d9f4f018"},{"code":"#(reduce (fn [r i] (conj r i i)) [] %)","problem":32,"user":"527b8881e4b03e8d9a4a758e"},{"code":"(fn [list](reverse (reduce (fn[elist, duplist](cons duplist (cons duplist elist))) '() list)))","problem":32,"user":"4fd0b0bde4b04c3a95aa0406"},{"code":"(fn [s]         (reduce #(conj % %2 %2) [] s))","problem":32,"user":"5055899de4b0ce54f56f03fd"},{"problem":32,"code":"(fn [i] (reduce #(concat % (list %2 %2)) () i))","user":"58cbdc3be4b03c36ff7e5856"},{"problem":32,"code":"(fn [arg]\n  (seq (reduce #(concat %1 [%2 %2]) [] arg)))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"problem":32,"code":"#(reduce (fn [x y] (conj x y y ) ) [] %)","user":"5da98129e4b000c986472c33"},{"problem":32,"code":"(fn [l] (sort (into l l)))","user":"5f480a68e4b0102c75033938"},{"code":"(fn [s]\n  (loop [r [] c s]\n    (if (seq c)\n      (recur (conj r (first c) (first c)) (rest c))\n      r)))","problem":32,"user":"4e7e4d5c535db169f9c7970f"},{"problem":32,"code":"(fn [x] (apply concat (map #(take 2 (repeat %)) x)))","user":"54eca495e4b024c67c0cf855"},{"problem":32,"code":"(fn dup\n  [input]\n  (reduce #(conj %1 %2 %2) [] input))","user":"5cb39440e4b026601754b903"},{"problem":32,"code":"(fn [xs] (reduce\n          concat\n          []\n          (map (fn [x] [x x]) xs)\n          )\n  )","user":"5a55114ae4b05d388ecb6c37"},{"problem":32,"code":"(fn [coll]\n    (reduce #(conj %1 %2 %2)\n            []\n            coll))","user":"5ac7f980e4b0e27600da779f"},{"code":"(partial\n\t(fn bar [res s]\n\t\t\t(if (= s '()) \n\t\t\t\t(reverse res)\n\t\t\t\t(bar (conj res (first s) (first s)) (rest s))\n\t\t\t)\n\t)\n\t'()\n)","problem":32,"user":"51a0e0b7e4b0b292b01ee3fb"},{"code":"(fn cp\r\n  [coll]\r\n\t(reduce (fn [x y](conj x y y)) [] coll))","problem":32,"user":"4edbae0d535d10e5ff6f531c"},{"problem":32,"code":"(fn [lst]\n  (reverse (reduce #(conj %1 %2 %2) '() lst)))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":32,"code":"(fn duplicate [coll]\n  (if  (empty? coll) coll\n       (conj (duplicate(rest coll)) (first coll)(first coll))\n       )\n  )","user":"55a65872e4b09e57187da299"},{"problem":32,"code":"#(reduce (fn [acc v] (conj acc v v)) [] %)","user":"55c20bd0e4b0e31453f64972"},{"problem":32,"code":"(fn [coll]\n  (reduce\n   (fn [ret v] (conj (conj ret v) v))\n   [] coll))","user":"555ee545e4b0a2eb076a39bd"},{"code":"x","problem":32,"user":"52e635b3e4b09f7907dd146f"},{"problem":32,"code":"(fn [x] (reduce concat (map (fn [y] [y y]) x)))","user":"6089bc95e4b0ae75613dcef5"},{"code":"(fn dup-els [s]\n  (when (seq s) (let [[f & r] s] (cons f (cons f (dup-els r)))))\n  )","problem":32,"user":"506ab9bae4b05d3b7762c74c"},{"problem":32,"code":"(fn [s]\n  (reduce \n   #(concat %1 (list %2 %2))\n   []\n   s))","user":"53c1ce3ee4b00fb29b221268"},{"problem":32,"code":"(fn [coll] (mapcat #(cons % [%]) coll))","user":"5462dc5ae4b01be26fd746b9"},{"code":"(fn [l] (reverse (reduce #(conj %1 %2 %2) nil l)))","problem":32,"user":"4faac363e4b081705acca200"},{"problem":32,"code":"(comp (partial reduce concat) (partial map (partial repeat 2)))","user":"5468033ee4b00cfc9eacc133"},{"code":"(fn dup [s]\r\n  (if (empty? s)\r\n    s\r\n    (conj (dup (rest s)) (first s) (first s))))","problem":32,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":32,"code":"(fn dupit [coll]\n  (if (empty? coll)\n    coll\n    (let [car (first coll)\n          cdr (rest coll)]\n      (conj (dupit cdr) car car))))","user":"51a0370ae4b0b292b01ee3ef"},{"code":"(fn dup [xs]\n  (apply concat\n    (for [x xs]\n         [x x])))","problem":32,"user":"508157b2e4b0946d0443855c"},{"problem":32,"code":"(fn fnx [xs]\n  (if (= [] xs) []\n  (concat [(first xs) (first xs)] (fnx (rest xs)))))","user":"599d49a7e4b0871e7608b7f4"},{"problem":32,"code":"mapcat #(conj '() % %)","user":"53f1c05ee4b0742d9025b0e1"},{"code":"#(reduce\n    (fn [val x] (concat val (list x x)))\n    '() %)","problem":32,"user":"4f0381db535dcb61093f6b02"},{"problem":32,"code":"(fn dup [x]\n  ((fn a [x li]\n    (if (empty? x)\n      li\n      (a (butlast x) (conj (conj li (last x))(last x))\n    )))\n    x '())\n)","user":"55034bf0e4b086ebe8a79c6d"},{"problem":32,"code":"(fn [coll]\n     (loop [x coll\n            result '()]\n       (if (empty? x)\n         result\n         (recur (next x)\n                (concat result (repeat 2 (first x)))))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":32,"code":"(fn  [x]\n  (reduce (fn [acc ele] (conj acc ele ele)) [] x))","user":"56cdda13e4b0ea9b8538f752"},{"code":"(fn [col](apply concat (map #(list % %) col)))","problem":32,"user":"513de0e6e4b0825f97f7f965"},{"problem":32,"code":"(fn dup-seq [u]\n  (loop [i (- (count u) 1)\n         x '()]\n    (if (= i -1)\n      x\n      (recur (- i 1)\n             (conj x (nth u i) (nth u i))))))","user":"5018878ce4b029375d2a5056"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc val] (-> acc (conj val) (conj val))) [] coll))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":32,"code":"(fn dupli [x]\n  \n  (loop [i 0 result []]\n    (if (< i (count x))\n      (let [qq (get x i)\n               oput (repeat 2 qq)\n                rst (concat result oput)]\n               (recur (inc i) rst ))\n      result)))","user":"5b98f174e4b0c0b3ffbd4ac1"},{"problem":32,"code":"#(reduce (fn [acc next] (conj acc next next)) [] %)","user":"57155980e4b07c98581c3ad7"},{"problem":32,"code":"(fn [xs]\n   (loop [[x & xx] xs s []]\n     (let [ss (conj (conj s x) x)]\n       (if (empty? xx)\n         ss\n         (recur xx ss)))))","user":"57f85b36e4b0d3187e900924"},{"code":"(fn dup [coll]\n  (loop [res '(), curr coll]\n    (if (empty? curr)\n      res\n      (recur (concat res [(first curr) (first curr)]), (rest curr)))))","problem":32,"user":"4ecbff2f535df97575fdabe4"},{"code":"#(loop [coll % rs []]\n  (if (seq coll)\n    (recur (rest coll) (conj rs (first coll) (first coll)))\n    rs))","problem":32,"user":"4f504739e4b03ad3f0c10d00"},{"problem":32,"code":"(fn dup\n  [xs]\n  (reduce \n    (fn [acc cur] (apply conj acc (repeat 2 cur))) \n    [] \n    xs))","user":"5e4fae60e4b027a2e10ac0b9"},{"problem":32,"code":"(fn [coll] (apply concat (map vector coll coll)))","user":"50ab395de4b0f65d68208508"},{"problem":32,"code":"(fn re\n  [coll]\n  (loop [c coll\n         new []]\n    (if (empty? c)\n      new\n      (let [f (first c)]\n        (recur (rest c) (conj new f f))))))","user":"55bd87ede4b01b9910ae29fe"},{"problem":32,"code":"(fn dupe-each-element [coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [head (first s)\n           tail (rest s)]\n       (cons head (cons head (dupe-each-element tail)))))))","user":"5899c54de4b00487982d52fa"},{"code":"#(apply concat (map (fn [e] (repeat 2 e)) %))","problem":32,"user":"505b9084e4b032b709c81371"},{"problem":32,"code":"(fn\n   [xs]\n   (loop [xs xs acc []]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (conj acc (first xs) (first xs))))))","user":"551a21ece4b091ff45eda993"},{"problem":32,"code":"(fn dupes [col] (reduce #(conj (conj %1 %2) %2) [] col))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":32,"code":"(fn [myseq]\n  (reverse (reduce\n            (fn [ a b ]\n              (println (str \"a: \" a))\n              (println (str \"b: \" b))\n              (cons b (cons b a))\n              )\n            (list)\n            (seq myseq))))","user":"5ff82adae4b06df49cee14a4"},{"problem":32,"code":"#(reduce (fn [dup elm] (conj dup elm elm)) [] %)","user":"59f9c111e4b0ca45a743a349"},{"code":"#(loop [c % a []]\n  (if (empty? c) a \n                (recur (next c) (conj (conj a (first c)) (first c)))))","problem":32,"user":"4e6acc33535d8ccf87e9ff05"},{"problem":32,"code":"(fn [x]\n  (reduce #(into %1 [%2 %2])[] x)\n  )","user":"5984b9f3e4b021a7a535fe33"},{"code":"#(mapcat (fn [x] (list x x)) %1)","problem":32,"user":"50555c06e4b0ce54f56f03fa"},{"problem":32,"code":"#(loop [fseq % res []]\n   (if (= (count fseq) 0)\n     res\n     (recur (rest fseq) (concat res (concat (take 1 fseq) (take 1 fseq))))))","user":"5ab170c2e4b073f1774425cb"},{"code":"#(for [x % i '(1 2)] x)","problem":32,"user":"5177f89ae4b0f89a8f53839a"},{"problem":32,"code":"(fn [t] (loop [target t  \n               a []\n               ] \n          (cond\n           (empty? target) a\n           :else \n           (recur \n            (rest target) \n            (conj a (first target) (first target))))))","user":"56af842de4b061e3ca319ad2"},{"code":"(fn [x]\n  (reduce #(into % %2) []\n          (map (fn [j k] (vector j k)) x x)))","problem":32,"user":"534e4a29e4b084c2834f4ab0"},{"problem":32,"code":"(fn dup_sequence\n  [coll]\n  (apply concat (map #(repeat 2 %1) coll))\n)","user":"5b7163f8e4b047b03b203695"},{"code":"(fn [v] (->> v (concat v) sort))","problem":32,"user":"51f98843e4b09be9c177e54e"},{"problem":32,"code":"#(mapcat (fn [s] [s s]) %)","user":"5484fab9e4b0e286459a11a6"},{"code":"(fn [s]\n  (loop [s_ s ret '()]\n    (if s_\n      (let [a (first s_)]\n        (recur (next s_) (conj ret a a)))\n      (into '() ret))))","problem":32,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn dup [x]\n     (if (empty? x)\n       nil\n       (concat\n         [(first x) (first x)]\n         (dup (next x)))))","problem":32,"user":"503efe01e4b06c4e0e1fa26f"},{"problem":32,"code":"(fn dup [x]\n  (reduce #(conj %1 %2 %2) [] x))","user":"55f7ebeae4b06e875b46ceb7"},{"problem":32,"code":"#(reduce (fn [ss v] (conj ss v v)) [] %)","user":"609a4ac8e4b00e9e6653c40a"},{"problem":32,"code":"(fn dup-sequence [xs]\n  (letfn [(combine-dup [xs x]\n            (cons x (cons x xs)))]\n  (reverse (reduce combine-dup '() xs))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":32,"code":"#(reduce (fn [seq x] (conj seq x x)) [] %)","user":"57f6e666e4b0d3187e9008f2"},{"problem":32,"code":"#(sort (mapcat sort (take 2 (repeat %))))","user":"54630cdae4b01be26fd746bb"},{"problem":32,"code":"(fn [s]\n  ((fn [r [a & b]]\n     (println \"r:\" r \"a:\" a \"b:\" b)\n     (if (nil? a)\n       (reverse r)\n       (recur (cons a (cons a r)) b)))\n   '() s))","user":"5e178fbee4b00200644e3d57"},{"problem":32,"code":"(fn [xs]\n  (loop [[head & tail :as ys] (reverse xs) result '()]\n    (if (empty? ys) result\n      (recur tail (cons head (cons head result))))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn [lst]\n (mapcat (fn [x] [x x]) lst))","problem":32,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":32,"code":"(fn [n]\n  (->\n    (reduce #(conj %1 %2 %2) () n)\n    (sort)))","user":"5da8e170e4b000c986472c29"},{"problem":32,"code":"(fn duplicate [xs] (if (empty? xs) xs (let [f (first xs) fs (rest xs)] (cons f (cons f (duplicate fs))))))","user":"60b616e1e4b0e0fa5f1b4243"},{"problem":32,"code":"(fn [x] (mapcat identity (map #(conj [] % %) x )))","user":"582c986ee4b051871117bf9b"},{"problem":32,"code":"(fn dupl [l] (reduce #(conj %1 %2 %2) [] l))","user":"5d1e19c4e4b02ea6f0fb69af"},{"problem":32,"code":"(fn duplicate\n [s]\n (reduce (fn double-conj\n            [coll x]\n            (-> coll\n                (conj x)\n                (conj x))) [] s))","user":"5add1fede4b0837691e92c0a"},{"problem":32,"code":"(fn [input-seq]\n  (loop [dup [] left input-seq]\n   (if (empty? left)\n     dup\n     (recur (into dup [(first left) (first left)] ) (rest left)))))","user":"560d4994e4b05f002753df3c"},{"problem":32,"code":"(fn repetir\n  [lst]\n  (loop\n    [lst lst\n     result ()]\n    (if (empty? lst)\n      (reverse result)\n      (recur (rest lst) (cons (first lst) (cons (first lst) result))))))","user":"5a9f005be4b0d174b936c810"},{"code":"(fn [data]  (apply concat (map #(take 2 (repeat %)) data)))","problem":32,"user":"50dcb2f4e4b02e6ac9592c91"},{"problem":32,"code":"(fn dup[[fst & rst]]\n\t(if (empty? rst)\n\t  (list fst fst)\n\t  (concat (list fst fst) (dup rst)  )))","user":"54fae43ae4b0cf870d934708"},{"code":"(fn [x]\n(reverse (reduce #(conj %1 %2 %2) '() x)))","problem":32,"user":"50d4593ee4b09cc622d65a68"},{"code":"(fn [c] (mapcat #(list % %) c))","problem":32,"user":"4e111538535d04ed9115e7c3"},{"problem":32,"code":"mapcat (fn [xs] [xs xs])","user":"549dd591e4b0f3d1d8e70f98"},{"problem":32,"code":"(fn dup [sequence]\n  (loop [result (vector) sequence sequence]\n    (if (empty? sequence)\n      result\n      (recur (conj result (first sequence) (first sequence)) (rest sequence)))))","user":"57465526e4b009280f9f2b61"},{"problem":32,"code":"(fn dup [l]\n  (if (empty? l) (list)\n  \t(cons (first l) (cons (first l) (dup (rest l))))))","user":"56393681e4b0bfe05bf117f2"},{"problem":32,"code":"(fn ad [vector1]\n  (apply concat (map #(repeat 2 %) vector1)))","user":"59636ec9e4b066ee0a44b0c8"},{"problem":32,"code":"(fn [x] (mapcat #(take 2 (repeat %)) x))","user":"531c7bdde4b08068f379eda2"},{"problem":32,"code":"(fn [a]\n  (letfn [(dup-me [b acc] \n                  (if (seq b) (recur (rest b) (conj acc (first b) (first b)))\n                    acc))]\n    (dup-me a [])))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [l] (apply concat \n  (map (fn[i] (list i i)) l)))","problem":32,"user":"4f8b05d2e4b02e764a0a5176"},{"code":"#(\n(fn dup [x acc]\n  (if\n    (empty? x) \n    (reverse acc)\n    (dup (rest x) (cons (first x) (cons (first x) acc)))\n    )\n  )\n  % '())","problem":32,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [s]\n  (loop [items s acc []]\n    (if (empty? items)\n      acc\n      (let [[hd & tl] items]\n        (recur tl (conj (conj acc hd) hd))))))","problem":32,"user":"4ea4fe1f535d7eef308072cf"},{"problem":32,"code":"#(reduce concat (map (partial repeat 2) %1))","user":"4f03e60d535dcb61093f6b7a"},{"problem":32,"code":"#(\n  reduce (fn [coll item]\n  (concat coll [item item])) [] %1)","user":"55f4ebffe4b06e875b46ce81"},{"code":"(fn [col]\n  (loop [c (seq col) acc ()]\n\t\t\t  (if (nil? c)\n\t\t\t      (reverse acc)\n            (recur (next c) \n\t\t\t\t      (concat (repeat 2 (first c)) acc)))))","problem":32,"user":"50a6b5e8e4b0aa96157e262a"},{"code":"mapcat #(-> [% %])","problem":32,"user":"4dada913c9a9d6ed2d99dc57"},{"code":"(fn [coll]\r\n   (sort (clojure.set/union coll coll)))","problem":32,"user":"4e028764535d04ed9115e790"},{"problem":32,"code":"(fn [v]\n   (let [res ((fn [u accum]\n                (if (seq u)\n                  (recur\n                   (rest u)\n                   (conj\n                    (conj accum (first u))\n                    (first u)))\n                  accum)\n                )\n              v [])]\n     res))","user":"53b14289e4b047364c04448b"},{"problem":32,"code":"(fn d[s] (mapcat  #(if (sequential? %) % [%]) (map (fn [x] (list x x)) s)))","user":"58622733e4b0f14aab7c8803"},{"code":"(fn [x]\n  (apply concat\n    (map #(list % %) x)))","problem":32,"user":"4df1e213535d08e6dec9fe20"},{"problem":32,"code":"(fn dupseq [sq]\n  (reverse (reduce #(concat (list %2 %2) %1) [] sq)))","user":"57aa053fe4b0b8559636fc61"},{"code":"(fn\n   [coll]\n   (apply concat (map #(repeat 2 %) coll))\n   \n   )","problem":32,"user":"4ff58b05e4b0678c553fc36b"},{"problem":32,"code":"(fn [c] (let [rc (reverse c)] (reduce #(conj %1 %2 %2) '() rc)))","user":"546692aee4b01be26fd746e7"},{"problem":32,"code":"(fn [x]\n  (loop [tmp x result []]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)(conj result (first tmp) (first tmp)))\n      )\n    \n    )\n  \n  )","user":"57750460e4b0979f8965160c"},{"problem":32,"code":"#(reduce (fn [accum x]\n           (concat accum [x x]))\n         []\n         %)","user":"5b5d255de4b0c6492753e6c8"},{"problem":32,"code":"(fn duplicate-seq\n  [xs]\n  (apply concat (map #(list % %) xs)))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"#(reduce (fn [a b] (concat a [b b])) '() %)","problem":32,"user":"4ea7999e535d7eef308072ee"},{"problem":32,"code":"(fn [s] (loop [tmp s new ()]\n          (if (empty? tmp)\n            (reverse new)\n           (recur (rest tmp) (conj (conj new (first tmp)) (first tmp)))))\n )","user":"59368ccae4b02506e01a2979"},{"problem":32,"code":"(fn [coll]\n  (reduce #(concat %1 (repeat 2 %2)) '() coll))","user":"5630fd6fe4b0bfe05bf1178b"},{"problem":32,"code":"(fn [col]\n  (reverse (reduce #(into %1 [%2 %2]) '() col)))","user":"579c7db7e4b05b1deef9ae0a"},{"problem":32,"code":"(fn [s] (apply concat (map (partial repeat 2) s )))","user":"5a79ce7fe4b03baeef9276c8"},{"problem":32,"code":"(fn duplicate [lst]\n  (loop [x lst accum []]\n    (if (empty? x)\n      accum\n      (recur (rest x) (conj accum (first x) (first x))\n             ))))","user":"56cf80f9e4b0ea9b8538f76a"},{"problem":32,"code":"(fn [x] (loop [x x o []] (if (empty? x) o (recur (rest x) (concat o [(first x) (first x)])))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":32,"code":"(fn [coll]\n   (reduce #(conj %1 %2 %2) (vector) coll))","user":"55b54ecbe4b01b9910ae2987"},{"code":"mapcat (fn [x] [x x])","problem":32,"user":"4dfe65a1535d04ed9115e787"},{"problem":32,"code":"(fn [x] (into [] (sort (reduce conj x x))))","user":"546be022e4b00cfc9eacc171"},{"problem":32,"code":"(fn dup\n  [data]\n  (loop [result [] source data]\n    (if (empty? source)\n      result\n      (recur (conj (conj result (first source)) (first source)) (rest source)))))","user":"5746cb28e4b009280f9f2b68"},{"problem":32,"code":"(fn [sq]\n  (apply concat (map #(repeat 2 %) sq)))","user":"5f6b35c3e4b02876ed9fd04d"},{"problem":32,"code":"#(loop [s %, r []]\n\t(if (empty? s)\n\t\tr\n\t\t(recur (rest s)\n\t\t\t\t(conj (conj r (first s)) (first s)))))","user":"568cea39e4b0dcc4269f40bc"},{"problem":32,"code":"#(for [x % _ [1 2]] x)","user":"58e66350e4b056aecfd47cb2"},{"code":"(fn myfun [v]\n  (cond (empty? v) '()\n     :else (conj (conj (myfun (rest v)) (first v)) (first v))\n  )\n)","problem":32,"user":"531902b1e4b08068f379ed77"},{"problem":32,"code":"(fn[xs](reduce (fn[accum,x] (conj (conj accum x) x)) [], xs) )","user":"57e3d30be4b0bfb2137f5aab"},{"problem":32,"code":"(fn [seq]\n   (mapcat #(vector % %) seq))","user":"529a3c37e4b02ebb4ef75094"},{"code":"(fn [x]\n  (seq\n    (reduce #(conj (conj %1 %2) %2) [] x)))","problem":32,"user":"526143b7e4b03e8d9a4a705a"},{"code":"(fn f [x]\n  (reverse  (reduce #(cons %2 (cons %2 %1)) '() x)))","problem":32,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn rec [ls]\r\n  (lazy-seq\r\n    (if (empty? ls) ()\r\n      (concat\r\n        (repeat 2 (first ls))\r\n        (rec (rest ls))))))","problem":32,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [x] (mapcat identity (map (fn [x] `(~x ~x)) x)))","problem":32,"user":"531490bde4b08068f379ed17"},{"problem":32,"code":"(fn [data]\n  (sort (concat data data)))","user":"57b19fa1e4b0fbc9809a2754"},{"code":"(fn [xs] (mapcat (fn [e] [e e]) xs))","problem":32,"user":"50e09313e4b061dbdced7233"},{"code":"#(reverse \n    (reduce \n      (fn [l i]\n        (conj l i i))\n      '() %))","problem":32,"user":"4e83b1af535db62dc21a62dc"},{"code":"(fn dup2\n  [coll]\n  (if-let [x (first coll)]\n    (concat [x x] (dup2 (rest coll)))\n    nil))","problem":32,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"#(seq (reduce (fn [xs x] (conj xs x x)) [] %))","problem":32,"user":"504e2600e4b0f6ff3350c46f"},{"code":"(fn foo [x] (apply concat (map #(list % % ) x)))","problem":32,"user":"52cc92e9e4b07d0d72b27368"},{"problem":32,"code":"(fn [coll]\n  (->>\n    (reduce (fn [a b]  (conj (conj a b) b) )\n\n            '()\n            coll)\n    (reverse)\n       )\n  )","user":"5a71c89ee4b0512ff01cda93"},{"problem":32,"code":"(fn[n] (mapcat (fn[n] (list n n)) n))","user":"55950c5fe4b0c79f6e1db95e"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [result x]\n            (conj result x x)) [] coll))","user":"56d3bc2de4b0ea9b8538f7b0"},{"problem":32,"code":"(fn [lst]\n  (reduce\n    (fn [new-lst el]\n      (concat new-lst (list el el)))\n    (list)\n    lst))","user":"5625f678e4b00e49c7cb47b8"},{"problem":32,"code":"(fn [values] (apply concat (map (fn [v] (list v v)) values)))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":32,"code":"#(loop [v % r []] (if (empty? v) r (recur (rest v) (conj (conj r (first v)) (first v)))))","user":"5614ebc5e4b05f002753dfbc"},{"code":"(fn [l] \n  (reduce into [] (map  #(repeat 2 %) l)))","problem":32,"user":"531c7f0de4b08068f379eda4"},{"problem":32,"code":"(fn[s] (reduce concat (map #(repeat 2 %) s)))","user":"599362a3e4b0b211ea3aaab2"},{"problem":32,"code":"(fn [xs]\n    (loop [acc [] ys xs]\n       (if (empty? ys)\n            acc\n            (\n              recur  (concat acc (vector (first ys) (first ys)) )\n                     (rest ys)\n            )\n)))","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [x] (reduce (fn [coll e] (conj coll e e)) '() (reverse x)))","problem":32,"user":"522bf20ee4b0d34ee08e71c7"},{"code":"(fn [xs]\n  (loop [xs xs out []]\n    (if (empty? xs)\n      out\n      (recur (rest xs) (conj out (first xs) (first xs))))))","problem":32,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [coll] (apply concat (map #(vector % %) coll)))","problem":32,"user":"4fa85ae4e4b081705acca1d3"},{"problem":32,"code":"reduce (fn [res it] (conj res it it)) []","user":"55b77c7ce4b01b9910ae29a3"},{"problem":32,"code":"#(loop [lst % dlst '()]\n    (if (empty? lst)\n      dlst\n      (do (println lst)\n          (recur (pop lst) (conj dlst (peek lst) (peek lst))))))","user":"5688d6a8e4b0dcc4269f4071"},{"code":"(fn duplicate [s]\n  (apply concat\n   (map #(list % %) s)))","problem":32,"user":"5364697ce4b0243289761e62"},{"problem":32,"code":"(fn [s]\n    (loop [items s res '()]\n        (if (seq items)\n            (recur (rest items) (concat res [(first items) (first items)]))\n            res\n        )\n    )\n)","user":"54996971e4b0b312c081ff8d"},{"problem":32,"code":"(fn foo [s]\n(if (> (count s) 0)\n(concat [(first s) (first s)] (foo (rest s)))\ns\n)\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":32,"code":"(fn [seq] (reverse(reduce (fn [a s] (conj a s s)) nil seq)))","user":"53623eaee4b0243289761e4f"},{"code":"(fn [s] (mapcat #(list % %) s))","problem":32,"user":"4daf907aedd6309eace4d17b"},{"problem":32,"code":"(fn [li]\n  (loop [l li\n         r nil]\n    (if (empty? l)\n      (reverse r)\n      (recur (rest l) (conj r (first l) (first l))))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":32,"code":"(fn [xs]\n   (->>\n     xs\n     (reduce #(concat %1 (repeat 2 %2)) '())))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":32,"code":"(fn duplicate [num]\n  (reduce concat (map #(take 2 (repeat %)) num)))","user":"5634995fe4b0bfe05bf117be"},{"code":"(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))","problem":32,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [coll]\n  (reduce\n    #(into %1 (apply list (repeat 2 %2)))\n    ()\n    (reverse coll)))","problem":32,"user":"4f036c4b535dcb61093f6ab9"},{"code":"(fn replicate-seq [coll]\n  (mapcat #(repeat 2 %) coll))","problem":32,"user":"5322d364e4b09d4e7a9b54c6"},{"code":"(fn [s] \n  (reduce #(concat %1 (repeat 2 %2)) [] s))","problem":32,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"code":"#(reduce\n  (fn [coll el] (conj coll el el))\n  (vector)\n  %)","problem":32,"user":"4f7e33a6e4b06e829148e1cb"},{"problem":32,"code":"(fn outer [[h & r]]\n  (when (not (nil? h))\n    (lazy-seq (cons h (cons h (outer r))))))","user":"5c219c0fe4b07e362c230581"},{"problem":32,"code":"(fn duplicate-a-seq [coll]\n  (apply concat\n         (map #(list % %) coll)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":32,"code":"(fn [coll] (apply concat (map #(seq [% %]) coll)))","user":"57aa2b97e4b0b8559636fc66"},{"problem":32,"code":"#(mapcat (fn[c][c c]) %)","user":"596e4c5be4b069c0a1a19864"},{"problem":32,"code":"(fn duplicate [x]\n  (if (empty? x)\n    x\n    (concat (list (first x)\n                  (first x))\n            (duplicate (rest x)))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":32,"code":"(fn [x]\n  (loop [a  x\n         r '()]\n    (if (empty? a)\n      r\n      (recur (butlast a) (into r (repeat 2 (last a) )))\n    )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":32,"code":"; Write a function which duplicates each element of a sequence.\n; test not run\n;\n; (= (__ [1 2 3]) '(1 1 2 2 3 3))\n; (= (__ [:a :a :b :b]) '(:a :a :a :a :b :b :b :b))\n; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))\n; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))\n\n#(loop [td %\n        res []]\n        (if (empty? td)\n          res\n          (recur (rest td) (->> (first td) (repeat) (take 2) (concat res)))))","user":"57f253a3e4b0511f1d294dea"},{"problem":32,"code":"(fn [s]\n  (apply concat (map (fn [e] [e e]) s)))","user":"5aba04dce4b073f17744269e"},{"code":"(fn f [x]\r\n   (if (nil? (next x))\r\n      (cons (first x) x)\r\n      (cons (first x)(cons (first x) (f (rest x))))\r\n   )\r\n)","problem":32,"user":"4f4aa932e4b0d56e7bb92c14"},{"problem":32,"code":"(fn dupli [items]\n  (loop [acc (list)\n         [curr & rest-items] items]\n    (if (nil? curr)\n      (reverse acc)\n      (recur \n       (conj acc curr curr)\n       rest-items))))","user":"55bbfd60e4b01b9910ae29ed"},{"code":"(fn [xs]\n  (loop [res [] lst (seq xs)]\n    (if lst\n      (recur \n        (conj (conj res (first lst)) (first lst))\n        (next lst))\n      res\n      )))","problem":32,"user":"4ee8092f535d93acb0a66875"},{"code":"#(loop [el (first %)\n        rst (rest %)\n        res []]\n   (if (nil? el)\n     res\n     (recur (first rst) (rest rst) (conj res el el))))","problem":32,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn [coll]\n  (loop [xs coll lst '()]\n    (if (seq xs)\n      (let [end (last xs)]\n        (recur (pop xs) (conj (conj lst end) end)))\n      lst\n    )\n  )  \n)","problem":32,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [l] (reduce concat (map (partial repeat 2) l)))","problem":32,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":32,"code":"(fn duplicate [seq]\n\t(if (empty? seq) seq\n\t\t(concat (list (first seq) (first seq)) (duplicate (rest seq)))))","user":"55fcaccfe4b0f488688e0679"},{"problem":32,"code":";(fn dup      ; sa milicarudic, ali je vise coll, a manje seq\n;  [arg]\n;  (seq (reduce (fn [rez arg]\n;                  (into rez (repeat 2 arg)))\n;                [] arg)))\n\n(fn [coll]     ; https://github.com/ptrv/4clojure-solutions/blob/master/solutions.clj\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))","user":"5839efeae4b089d5ab817d47"},{"problem":32,"code":"(fn duplicate [target] \n   (if (empty? target) '() (conj (duplicate (rest target)) (first target) (first target))))","user":"586a663ce4b0f14aab7c88be"},{"problem":32,"code":"(fn [sq] (->> sq (map #(vector % %)) (apply concat)))","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":32,"code":"#(reverse (reduce (fn [res v] (cons v (cons v res))) '() %))","user":"5ec03772e4b00a66d4a95289"},{"code":"#(mapcat (partial repeat 2)%)","problem":32,"user":"51a34135e4b0ab315a23ba63"},{"problem":32,"code":"(fn [coll]\n  (reverse\n    (loop [[x & xs :as all] (seq coll)\n           result '()]\n      (if all\n        (recur xs (cons x (cons x result)))\n        result\n      )\n    )\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"problem":32,"code":"#(loop[result [] coll %]\n   (if (empty? coll) (reverse result)\n     (recur (cons (first coll) (cons (first coll) result)) (rest coll))))\n   \n   \n;(fn [coll]\n;  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn [coll] (apply concat (map #(take 2 (cycle (list %))) coll)))","problem":32,"user":"50481532e4b0ec70b3ef8d96"},{"problem":32,"code":"#(reduce (fn [acc v] \n \t\t(conj acc v v))\n        [] \n        %)","user":"53da059be4b0e771c302547e"},{"code":"#(loop [ l1 % l2 '() ] \n   (if (empty? l1) \n     (reverse l2) \n     (recur (rest l1) (conj (conj l2 (first l1)) (first l1)))))","problem":32,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":32,"code":"reduce (fn [container value] (conj container value value)) []","user":"589037b4e4b00487982d51d0"},{"problem":32,"code":"(fn [xs] (mapcat (fn [x y] [x y]) xs xs))","user":"5823c717e4b051871117beb2"},{"code":"(fn replicate-sequence\n  [x]\n  (apply concat (map (fn [y] [y y]) x))\n  )","problem":32,"user":"51f549c4e4b0abb92f97f9cb"},{"code":";mapcat #(do [% %])\n\n#(interleave % %)","problem":32,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn [xs] \n  (mapcat #(repeat 2 %) xs))","problem":32,"user":"53504436e4b084c2834f4ad7"},{"code":"#(loop [list % new-list []]\n    (if (empty? list)\n      new-list\n      (recur (rest list) (conj new-list (first list) (first list)))))","problem":32,"user":"53838742e4b06839e8705ee0"},{"code":"(fn [coll]\n  (reduce #(conj % %2 %2) [] coll))","problem":32,"user":"4fc8769be4b0ee37620e1833"},{"problem":32,"code":"#(reduce\n  (fn [acc item]\n    (into acc (repeat 2 item)))\n    []\n    %)","user":"60b7ef35e4b0e0fa5f1b4254"},{"problem":32,"code":"(fn [coll]\n      (loop [result []   items (seq coll)]\n        (if (zero? (count items))\n          result\n          (let [\n            head    (first items)\n            others  (next items)\n          ]\n            (recur (conj result head head) others )))))","user":"532f7e12e4b019098a6f8b4e"},{"problem":32,"code":"(fn DuplicateSequence [seq]\n  (loop [out nil\n         in seq]\n    (if (empty? in)\n      out\n      (recur (concat out \n                     (repeat 2 (first in)))\n             (rest in)))))","user":"53b88e6ee4b047364c0444de"},{"problem":32,"code":"(fn [l] (reduce #(cons %2 (cons %2 %1)) () (reverse l)))","user":"559a9a3de4b066d22e731f45"},{"problem":32,"code":"(fn replicator [myseq]\n  (apply concat(map (partial repeat 2) myseq)))","user":"5f5f2eafe4b02876ed9fcff5"},{"problem":32,"code":"(fn [sequence]\n                 (reduce\n                  (fn [m i] (conj (conj m i) i))\n                  [] \n                  sequence))","user":"597f8a4be4b0dbe32238d0c0"},{"problem":32,"code":"(fn [seq] (loop [prefix seq dup '()] (if (empty? prefix) dup (recur (butlast prefix) (conj dup (last prefix) (last prefix))))))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn[x ](reduce concat (map #(repeat 2 %1) x)))","problem":32,"user":"4dfb7b81535d04ed9115e77d"},{"problem":32,"code":"(fn rec [l] (if (nil? l)\n              nil\n              (cons (first l) \n                    (cons (first l) \n                          (rec (next l))))))","user":"55adcc8fe4b03311e7b732ab"},{"code":"(fn[x] (reverse (reduce into () (map #(list % %) x))))","problem":32,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [coll] (reverse (reduce #(concat (repeat 2 %2) %1) '() coll)))","problem":32,"user":"52a3a7ebe4b04e0c58e87c02"},{"problem":32,"code":"reduce (fn a [m b] (conj m b b)) []","user":"55ac16a0e4b03311e7b73291"},{"code":"mapcat (fn[x] [x x])","problem":32,"user":"52ac2db3e4b0c58976d9ac82"},{"code":"(fn [seqn]\n  (reduce concat (map #(vector % %) seqn)))","problem":32,"user":"53889587e4b0640c7a9a589e"},{"problem":32,"code":"(fn dupli [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (dupli (rest xs))))))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":32,"code":"(fn [col]\n  (apply concat (map #(seq [% %]) col)))","user":"565b371fe4b068f2fe63dbff"},{"code":"mapcat #(list%%)","problem":32,"user":"4e14b925535d04ed9115e7df"},{"code":"#(reduce concat\n  (for [x %]\n    [x x]))","problem":32,"user":"51642237e4b003cf19fdde31"},{"code":"(fn [col] (reduce (fn [acc cur] (conj acc cur cur)) [] col))","problem":32,"user":"50a935b9e4b0a9a42786e8de"},{"problem":32,"code":"(fn dupler [c]\n  (interleave c c)\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"problem":32,"code":"(fn [col]\n  (reduce concat (map (partial repeat 2) col)))","user":"51fa90aae4b0f1313d4689e0"},{"problem":32,"code":"(fn dup [s]\n  (loop [in s\n         out '()]\n    (if (empty? in) (reverse out)\n        (recur (rest in) (conj out (first in) (first in))))))","user":"55f8180fe4b06e875b46ceba"},{"code":"#(apply interleave ((fn [x] [x x]) %))","problem":32,"user":"4e8768f6535dceadca469850"},{"problem":32,"code":"#(sort(clojure.set/union % %))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"(fn [x] (apply concat (map #(conj [] % %) x)))","problem":32,"user":"503539dee4b0ed9c821488f6"},{"problem":32,"code":"#(loop [col %\n         result '()]\n       (if (empty? col)\n          (reverse result)\n           (recur (rest col)\n                  (conj result (first col) (first col)))))","user":"57bf304de4b05aa3c4741c75"},{"problem":32,"code":"(fn [coll] (reduce concat(map #(list % %) coll)))","user":"5446158ce4b032a45b8693a6"},{"code":"reduce (fn [l r] (concat l [r r])) ()","problem":32,"user":"4e0e0529535d04ed9115e7b9"},{"problem":32,"code":"(fn dup [x]\n  (reduce concat (map #(take 2 (repeat %)) x)))","user":"55885edae4b059ccff29b1f6"},{"problem":32,"code":"(fn dup \n  [lst]\n  (mapcat #(repeat 2 %) lst)\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":32,"code":"(fn [a]\n  (apply concat\n         (map (juxt identity identity)\n              a\n              )))","user":"58273e82e4b051871117bf1b"},{"problem":32,"code":"#(reduce (fn [val x] (conj (conj val x) x)) [] %)","user":"5cc7342be4b0ccb061962830"},{"problem":32,"code":"(fn [s] (reduce (fn [a e] (conj a e e)) [] s))","user":"579e75fbe4b05b1deef9ae29"},{"code":"(fn [c] (\n  (fn myDup [data result]\n    (if (= (count data) 0)\n      result\n      (myDup\n        (rest data)\n        (conj result (first data) (first data))\n      )\n    )\n  ) c []\n))","problem":32,"user":"4f16d6ed535d64f60314644f"},{"problem":32,"code":"(partial mapcat\n         (partial repeat 2))","user":"521d064fe4b0c4ef0be830a8"},{"problem":32,"code":"(fn[x](sort(into x (for[y x]y))))","user":"5826a843e4b051871117befd"},{"code":"(fn dupl [in]\n   (if (empty? in)\n     '()\n     (conj (dupl (rest in)) (first in) (first in))))","problem":32,"user":"51684318e4b03f62cda68cd6"},{"problem":32,"code":"mapcat (fn [coll]  (list coll coll))","user":"5ac37d0fe4b0e27600da7718"},{"problem":32,"code":"(fn [coll]\n  (loop [[c & more :as all] coll\n         acc []]\n  \t(if all\n      (recur more (conj acc c c))\n      (seq acc)\n    )\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"problem":32,"code":"#(loop [xs % rs []]\n   (if (empty? xs)\n     rs\n     (recur (rest xs) (conj rs (first xs) (first xs)))))","user":"58cfbd7ae4b03c36ff7e58ba"},{"code":"(fn [lst] (reverse ( #( if (empty? %1) %2 (recur (rest %1) (conj (conj %2 (first %1)) (first %1)))) lst '())))","problem":32,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn [coll] (seq (reduce #(concat %1 (repeat 2 %2)) [] coll)))","problem":32,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":32,"code":"(fn [seqns] (mapcat #(repeat 2 %) seqns))","user":"5c6e7cc1e4b0fca0c1622752"},{"problem":32,"code":"(fn [col]\n  (interleave col col))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [seq] \n  (letfn [(dc [tseq acc] (if (empty? tseq) \n                                  acc\n                                  (dc (rest tseq) (conj (conj acc (first tseq)) (first tseq))))          \n            )]\n    (dc seq [])\n    ))","problem":32,"user":"5226f9b8e4b04e78ff2e199b"},{"code":";#(reduce (fn [coll1 x] (conj coll1 x x)) [] %)\n#(interleave % %)","problem":32,"user":"4f18677d535d64f603146459"},{"code":"(fn f [s]\n  (let [[kar & remainder] s]\n    (if (empty? s)\n      s\n      (cons kar (cons kar (f remainder)))\n    )\n  )\n)","problem":32,"user":"5043a536e4b034ff00315d24"},{"problem":32,"code":"#(seq (reduce (fn [a x] (conj a x x)) [] %))","user":"57efb389e4b0bfb2137f5bdb"},{"problem":32,"code":"(fn\n  [x]\n  (reduce #(conj %1 %2 %2) [] x))","user":"55842bd7e4b05c286339e11c"},{"problem":32,"code":"(fn [x] (reduce #(conj %1 %2 %2) () (reverse x)))","user":"5965eb8de4b069c0a1a19796"},{"code":"(fn [xs]\n  (reduce (fn [acc x] (conj acc x x)) [] xs))","problem":32,"user":"521e4f22e4b0dd19981ad079"},{"problem":32,"code":"reduce (fn [a x] (concat a [x x])) []","user":"4f0366b0535dcb61093f6aa9"},{"problem":32,"code":"(fn [s]\n    (mapcat #(list % %) s))","user":"58fff18be4b0438e51c2d00c"},{"code":"(fn duplicate [coll]\r\n  (reverse\r\n   (reduce (fn [acc nxt]\r\n             (cons nxt (cons nxt acc)))\r\n           '()\r\n           coll)))","problem":32,"user":"4e7e4a1f535db169f9c7970c"},{"code":"(fn dup [s]\n  (if (empty? s)\n    ()\n    (cons (first s) (cons (first s) (dup (rest s))))))","problem":32,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":32,"code":"#(mapcat (fn [x] (concat [x] [x])) %)","user":"51ad808ee4b09397d5109784"},{"problem":32,"code":"#(loop \n                    [item % result []] \n                  (if (= (next item) nil) \n                    (concat result (take 2 (repeat (first item)))) \n                    (recur (rest item) (concat result (take 2 (repeat (first item)))))))","user":"5f27cc7fe4b033932238a646"},{"code":"(fn [s]\n  (apply concat (map vector s s)))","problem":32,"user":"4f107e0e535d64f60314641c"},{"problem":32,"code":"(fn[vct]\n  \t(loop [v vct new-v []]\n      (if (empty? v)\n        \tnew-v\n        \t(recur (rest v) (conj new-v (first v) (first v))))))","user":"56483f45e4b0284900eef62b"},{"problem":32,"code":"(fn [xs] (loop [xs xs s []] (if (empty? xs) s (let [f (first xs)] (recur (rest xs) (conj s f f))))))","user":"59203996e4b09b4ee5954c5b"},{"problem":32,"code":"(fn duplicate [a-seq]\n  (->> a-seq\n       (map #(list % %))\n       (reduce concat)))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [l]\n  (reduce (fn [result element]\n             (concat (take 2 (repeat element)) result))\n             '()\n             (reverse l)))","problem":32,"user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [xs] (reduce (fn [acc x] (cons x (cons x acc))) '() (reverse xs)))","problem":32,"user":"51553ea7e4b06c5f6a1490a2"},{"problem":32,"code":"#(reduce (fn [col e]\n            (conj col e e)\n            ) [] %)","user":"55b0d315e4b002ce9d5cbc26"},{"problem":32,"code":"(fn [coll]\n  (reverse (loop [acc '()\n                  from coll]\n             (if (empty? from) acc\n               (let [x (first from)]\n                 (recur (into acc (list x x)) (rest from)))))))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn dupseq [[x & xs :as l]]\n                  (if-not (empty? l)\n                    (cons x (cons x (dupseq xs)))))","problem":32,"user":"4e71705e535d5021c1a89649"},{"problem":32,"code":"(fn [col]\n  (loop [c col ret []]\n    (if (empty? c)\n      ret\n      (recur (rest c) (conj (conj ret (first c)) (first c))))))","user":"501fe6fae4b0cb6ebc0a42ef"},{"code":"#(mapcat identity (map vector %1 %1))","problem":32,"user":"535778dee4b04ce2eb3ed27d"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [s x]\n            (conj s x x)\n          )\n      \t  [] s\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":32,"code":"(fn [coll] (reduce #(concat %1 [%2 %2]) (empty coll) coll))","user":"56c3aca0e4b05cc29241ee90"},{"problem":32,"code":"(fn f [x]\n  (if (empty? x)\n    x\n    (let [fst (first x)]\n      (conj (conj (f (rest x)) fst) fst))))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn [c]\n  (apply concat (map #(list % %) c)))","problem":32,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn [e] (mapcat #(take 2 (repeat %)) e))","problem":32,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [in-sequence] (for [s in-sequence i (range 2)] s))","problem":32,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":32,"code":"(fn [seqn]\n  (loop [i 0\n         ret []]\n    (if (= (nth seqn i nil) nil)\n      (identity ret)\n      (recur (inc i) (conj (conj ret (nth seqn i)) (nth seqn i)))\n    )\n    \n  )  \n)","user":"588b4bd0e4b05c141a25607a"},{"code":"(fn [s]\n  ((fn iter [s-in s-out]\n    (if (empty? s-in)\n      s-out\n      (iter (rest s-in) (conj s-out (first s-in) (first s-in)))))\n  s []))","problem":32,"user":"4fe8e771e4b0547ebccb2431"},{"code":"#(loop [b '() r %] (if (empty? r) b (recur (concat b [(first r) (first r)]) (rest r))))","problem":32,"user":"539cb777e4b0b51d73faaf30"},{"problem":32,"code":"(fn f [xs] (if (empty? xs) '() (cons (first xs) (cons (first xs) (f (rest xs))))))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":32,"code":"(fn [a-seq] (reduce #(conj %1 %2 %2) [] a-seq))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":32,"code":"(fn [elements]\n   (loop [sequence elements\n          new-sequence '()]\n     (if (empty? sequence)\n       (reverse new-sequence)\n       (do\n         (recur (rest sequence) (->> new-sequence\n                                     (cons (first sequence))\n                                     (cons (first sequence))))))))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [l] \n  (mapcat #(repeat 2 %) l))","problem":32,"user":"4ff5744ae4b0678c553fc36a"},{"code":"#(apply concat (for [n %] [n n]))","problem":32,"user":"51040eb2e4b0432126ba9bb4"},{"problem":32,"code":"reduce #(conj %1 %2 %2 ) []","user":"5d29c06be4b01671435dbc6b"},{"problem":32,"code":"(fn [X] (sort (concat X X)))","user":"55769940e4b05c286339e070"},{"problem":32,"code":"#(apply concat (for [c %] [c c]))","user":"55989c25e4b031d6649c9b9b"},{"problem":32,"code":"#(sort (into [] (concat % %)))","user":"59bdf0eae4b0a024fb6ae42e"},{"code":"(fn [s]\n\t(reduce\n\t\t(fn [r e]\n\t\t\t(cons e (cons e r))) [] (reverse s)))","problem":32,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":32,"code":"(fn [coll]\n (loop [result [] input coll]\n    (if (nil? (seq input))\n    result\n    (recur (conj result (first input) (first input)) (rest input))\n)))","user":"55f2c898e4b06e875b46ce4b"},{"problem":32,"code":"(fn d [[a & l]]\n  (if (nil? a) l\n    (list* a a (d l))))","user":"5a68826ee4b0512ff01cd9f8"},{"code":"(fn [coll]\r\n  (apply concat (map #(vector %1 %2) coll coll)))","problem":32,"user":"4fdc067fe4b05e33b9224f69"},{"problem":32,"code":"#(reduce (fn [l e] (conj (conj l e) e)) [] %)","user":"5e958767e4b0fbed045a380b"},{"problem":32,"code":"(fn duplicate [coll]\n  (interleave coll coll))","user":"57b758f4e4b0fbc9809a27cf"},{"code":"(fn [x] (reverse (reduce into (map #(list %1 %2) x x))))","problem":32,"user":"50517ebfe4b0a561d07d8f06"},{"problem":32,"code":"(fn [arg] (reverse (reduce #(conj %1 %2 %2) '() arg)))","user":"569bfc43e4b0542e1f8d145c"},{"code":"#(for [x %\n       y (repeat 2 x)]\n   y)","problem":32,"user":"5160195ae4b0e2be8aa20be3"},{"problem":32,"code":"(fn [s]\n  (apply concat (for [e s]\n                 [e e])))","user":"60a39b80e4b00e9e6653c450"},{"problem":32,"code":"mapcat #(conj (list %) %)","user":"5a2185c6e4b0ff51aa4b32b1"},{"code":"#(sort(apply concat(repeat 2 %)))","problem":32,"user":"50291679e4b0b6c928ad6200"},{"code":"(fn [s]\n  (reduce (fn [result e]\n            (conj result e e))\n          []\n          s))","problem":32,"user":"50b67515e4b08fb537db98f3"},{"problem":32,"code":"(fn [input-seq] (reduce (fn [acc item] (conj (vec (conj acc item)) item)) '() input-seq))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn [s]\n  (reduce #(conj %1 %2 %2)\n    [] s)\n)","problem":32,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn dup [xs] (if (empty? xs) xs (let [x (first xs)] (concat [x x] (dup (rest xs))))))","problem":32,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn pn [x]\n  (if (first x)\n  (cons (first x) (cons (first x) (pn (rest x))))\n  '()))","problem":32,"user":"4eb0afed535d7eef3080733e"},{"problem":32,"code":"(fn [col] (reduce #(concat %1 %2) (map #(list %1 %1) col)))","user":"5793931ee4b0e215f87e845c"},{"code":"(fn [xs]\n    (mapcat (fn [x] [x x]) xs))","problem":32,"user":"506b0a9ce4b0a2a5463de380"},{"problem":32,"code":"(fn dup [los]\n  (loop [index 0\n         result '()]\n    (if (>= index (count los))\n      (reverse result)\n      (recur (inc index) (conj (conj result (nth los index)) (nth los index))))))","user":"5761724de4b0994c1922fb89"},{"problem":32,"code":"(fn dup [[hd & tl :as xs]] (if xs\n                           (conj (dup tl) hd hd)\n                           nil))","user":"58a47197e4b01a0c0b2328f9"},{"problem":32,"code":"#(reduce (fn [dups el] (conj (conj dups el) el)) [] %)","user":"588fd085e4b00487982d51c0"},{"problem":32,"code":"(fn [args]\n   (reduce (fn [x y] (println x) (if (nil? x)\n                                   (concat [] [y y])\n                                   (concat x [y y]))) nil args))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn [foo] (reverse (reduce into (map #(repeat 2 %) foo))))","problem":32,"user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":32,"code":"(fn [x] (reduce (fn [seq i]\n            (concat seq [i i])) [] x))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn [coll] (apply concat (map #(repeat 2 %) coll)))","problem":32,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn[xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))","problem":32,"user":"5196749be4b04c0af7ff3c20"},{"problem":32,"code":"(fn [s] (reduce (fn [prev el] (conj prev el el)) '[] s))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn cpy [l] \n  (if (empty? l)\n    l\n  (cons (first l) (cons (first l) (cpy (rest l))))\n  )\n  )","problem":32,"user":"4e78c208535db95036265722"},{"problem":32,"code":"(fn [s] (apply list (mapcat (fn [x] (list x x))s)))","user":"5ce867fce4b0a17bb84e2baf"},{"problem":32,"code":"(fn [a]\n  (loop [res [] i 0]\n    (if (< i (count a))\n      (recur (conj res (nth a i) (nth a i)) (inc i) )\n      res\n      )\n    )\n  )","user":"53f152bce4b0742d9025b0dc"},{"problem":32,"code":"reduce (fn [acc itm]\n         (conj acc itm itm)\n         ) []","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":32,"code":"#(reduce (fn [r x]\n           (conj r x x)) [] %)","user":"567a3112e4b05957ce8c6196"},{"problem":32,"code":"reduce  #(conj %1 %2 %2) []","user":"55e1d34ae4b050e68259b421"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc item]\n          (conj acc item item))\n          []\n          coll))","user":"57abf68ce4b0b8559636fc7f"},{"code":"(fn dup [s]\n  (if (empty? s) \n    s\n   (cons (first s) (cons (first s) (dup (rest s))))))","problem":32,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":32,"code":"(fn [x]\n    (mapcat identity (map #(list % %) x)))","user":"5b269cf3e4b063e2438bcc35"},{"problem":32,"code":"#(reduce (fn [a b] (concat a [b b])) (concat [[(first %) (first %)]] (rest %)))","user":"553c05b7e4b09218d5f45011"},{"code":"(fn dupe [xs]\n   (if (empty? xs)\n     '()\n   (cons (first xs) (cons (first xs) (dupe (rest xs))))))","problem":32,"user":"51d1db6ce4b0d13b04db0d90"},{"problem":32,"code":"(fn [coll] (mapcat #(vec [% %]) coll))","user":"54e3bd3fe4b024c67c0cf7e0"},{"problem":32,"code":"(fn [x]\n  (apply concat\n         (for [i x]\n           (repeat 2 i))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":32,"code":"#(apply concat (map (fn [el] (concat el el)) (partition-by identity %)))","user":"5537f30fe4b09218d5f44fd8"},{"problem":32,"code":"(fn duplicate [coll]\n  (loop [[x & xs :as coll] coll\n         result []]\n    (if (empty? coll)\n      result\n      (recur xs (conj result x x)))))","user":"555b6e82e4b0deb715856e51"},{"problem":32,"code":"(fn duplicate-sequence\n  [s]\n  (reduce into [] (map (partial repeat 2) s)))","user":"59234753e4b0a390037439ef"},{"problem":32,"code":"(fn dup [inlist] (if (empty? inlist) (list) (cons (first inlist) (cons (first inlist) (dup (rest inlist))))))","user":"5658d775e4b00d3155796114"},{"problem":32,"code":"(fn[x] (reduce concat (map #(take 2 (repeat %)) x)))","user":"53e1040be4b0d874e779ae4e"},{"problem":32,"code":"reduce #(conj %1 %2 %2)[]","user":"5481be5fe4b0e286459a1172"},{"problem":32,"code":"(fn inps [xs]\n  (loop [a xs\n         output []]\n    (if (> (count a) 0)\n      (recur (rest a) (conj output (first a) (first a)))\n      output\n      )\n    )\n  )","user":"53b685e0e4b047364c0444c7"},{"problem":32,"code":"(fn dup\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst) (cons (first lst) (dup (rest lst))))))","user":"59e8fef3e4b0249b72820743"},{"problem":32,"code":"(fn [s]\n    (loop [[x & r :as xs] s, out []]\n        (if (empty? xs) out (recur r (conj (conj out x) x)))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":32,"code":"(fn [x]  (mapcat #(list % %) x ))","user":"58ac513fe4b0005cfeb1a746"},{"code":"(fn [coll] (reduce concat [] (map #(list % %) coll)))","problem":32,"user":"4fa39b3ee4b081705acca191"},{"code":"(fn [lst]\n  (apply concat (map (partial repeat 2) lst)))","problem":32,"user":"4f58d92fe4b0a7574ea71858"},{"problem":32,"code":"reduce (fn [acc a & b] (reverse (conj (conj (reverse acc) a) a))) '()","user":"5a78cd9ee4b013a48d399777"},{"code":"(fn dup [xs]\n  (if (empty? xs)\n    xs\n    (let [f (first xs)]\n      (cons f (cons f (dup (rest xs)))))))","problem":32,"user":"532b9075e4b09d4e7a9b5533"},{"problem":32,"code":"reduce #(conj %1 %2 %2) [];;#(apply concat (map (fn[x] (repeat 2 x)) %))","user":"555da2c4e4b0a2eb076a39ae"},{"problem":32,"code":"(fn [coll]\n  (apply concat\n  \t(map\n     #(vector % %)\n   \t  coll)))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [c] (mapcat #(repeat 2 %) c))","problem":32,"user":"4e6e3aac535d5021c1a89603"},{"problem":32,"code":"(fn [sx]\n  (loop [sx sx v []]\n    (if (empty? sx)\n      (seq v)\n      (recur (rest sx) (conj v (first sx) (first sx))))))","user":"584278e1e4b089d5ab817e19"},{"code":"(fn dup [x] (\n                if (empty? x) x (conj (dup (rest x)) (first x) (first x))\n))","problem":32,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn [x]\n  (interleave x x)\n  )","problem":32,"user":"50f4894be4b004d364930528"},{"problem":32,"code":"(fn [xs] (reverse (reduce (fn [acc y] (conj acc y y)) '() xs)))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [ss e]\n            (concat ss (list e e)))\n          '()\n          s))","user":"5195fadee4b04c0af7ff3c11"},{"problem":32,"code":"#(apply concat (map (fn [el] [el el]) %))","user":"55ea0dc3e4b0121d4835fda9"},{"code":"(fn f [x] (interleave x x))","problem":32,"user":"50ef3e5de4b0a78662fa2652"},{"problem":32,"code":"(fn [s] \n  (reverse\n   (reduce (fn [n e] (conj (conj n e) e))\n                ()\n                s)))","user":"5e4beca9e4b0889a8790a560"},{"code":"(fn [y] (apply concat (map (fn[x] [x x]) y)))","problem":32,"user":"4fbd12a5e4b081705acca2fd"},{"problem":32,"code":"(fn [x]  (reduce concat (map (fn [item] (list item item) ) x)))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":32,"code":"#(reduce (fn [c n] (conj c n n)) [] %)","user":"53cb321fe4b00fb29b2212d1"},{"code":"(fn [col] (apply concat (map vector col col)))","problem":32,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [x]\n  (loop [x x\n         result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (conj (conj result (first x)) (first x))))))","problem":32,"user":"538d464ee4b0b51d73faae69"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [x y] (conj x y y)) '() coll)))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn foo [x] \n   (interleave x x)\n)","problem":32,"user":"4ec3072a535dcc7ae8597d50"},{"code":"(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))","problem":32,"user":"4f03f197535dcb61093f6b84"},{"problem":32,"code":"(fn [inp]\n  (mapcat identity (map #(vector % %) inp)))","user":"534e60c2e4b084c2834f4ab2"},{"problem":32,"code":"#(reverse (into () (reduce (fn\n                                [acc el]\n                                (conj (conj acc el) el))\n                              [] %1)))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"problem":32,"code":"(fn[coll](\n          sort (concat coll coll)\n          ))","user":"592b7269e4b072a2710fcf3f"},{"problem":32,"code":"(fn my-double [v]\n  (loop [xs v z []]\n    (if (empty? xs)\n      z\n      (let [[x & rxs] xs]\n        (recur rxs (conj (conj z x) x))))))","user":"54a31fdae4b09f271ff37c64"},{"problem":32,"code":"(fn [x](apply concat (map #(repeat 2 %) x)))","user":"5dcbd629e4b02b31cc3da3bd"},{"code":"(fn [coll] (reverse (reduce #(conj %1 %2 %2) '() coll)))","problem":32,"user":"4ea11921535d7eef308072af"},{"code":"(fn [xs]\n  (mapcat #(vec [% %]) xs))","problem":32,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":32,"code":"(fn dupl [coll]\n  (reduce (fn [x y] (concat x y)) (map #(-> [% %]) coll))\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":32,"code":";;(fn [coll]\n;;  (reduce #(concat %1 (take 2 (repeat %2))) '() coll))\n#(interleave % %)","user":"59944e73e4b0b211ea3aaac2"},{"problem":32,"code":"(fn [input] (apply concat (map #(repeat 2 %) input)))","user":"58b997afe4b0888cdc949cd1"},{"problem":32,"code":"(fn blah [x] (when (not (= x '())) (conj (blah (rest x)) (first x) (first x))))","user":"53aaaf7ae4b047364c044444"},{"problem":32,"code":"(fn [coll]\n  (reduce\n   #(conj %1 %2 %2)\n   []\n   coll))","user":"543f1765e4b032a45b86935a"},{"problem":32,"code":"(fn [s] (  reduce #( conj %1 %2 %2 ) [] s ))","user":"5d9e7971e4b000c986472bc1"},{"problem":32,"code":"(fn [seqn]\n                  (loop [seqn seqn\n                         ans []]\n                    (if (= 0 (count seqn))\n                      ans\n                      (recur (rest seqn) (concat ans [(first seqn) (first seqn)])))))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn [ xs ]\r\n  (reduce concat (map #(repeat 2 %) xs ) )\r\n)","problem":32,"user":"4e81e93d535db62dc21a62bf"},{"code":"(fn dup [seq]\r\n  (if (empty? seq)\r\n      '()\r\n      (cons (first seq)\r\n            (cons (first seq)\r\n                  (dup (rest seq))))))","problem":32,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":32,"code":"(fn dup [lst]\n  (if (empty? lst) '()\n    (cons (first lst) (cons (first lst) (dup (rest lst))))))","user":"58ef0b8ce4b056aecfd47dbf"},{"problem":32,"code":"(fn [s]\n    (mapcat #(list % %) s)\n    )","user":"58ec1e63e4b056aecfd47d54"},{"problem":32,"code":"(fn dup [coll]\n  (when-let [elem (first coll)]\n    (lazy-seq (cons elem (cons elem (dup (next coll)))))))","user":"6062e1bde4b03746e80ebf75"},{"code":"(fn [coll]\n  (mapcat identity\n    (map #(list % %) coll)))","problem":32,"user":"4fdb881ee4b05e33b9224f5e"},{"code":"(partial reduce #(conj % %2 %2) [])","problem":32,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn [sequens] (reverse (reduce #(cons %2 (cons %2 %1)) '() sequens)))","problem":32,"user":"52a28e1ce4b04e0c58e87bf0"},{"code":"(fn [xs]\r\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))","problem":32,"user":"4e8b73f1535d65386fec2121"},{"code":"(fn dupp [ls]  \n  \n(letfn [(dup [l,acc]\n  (if (empty? l)\n      acc\n      (dup (rest l) (conj acc (first l) (first l)) )\n   )\n  )]   \n\n (dup ls []))\n)","problem":32,"user":"5180dc04e4b06b8caf33fa01"},{"problem":32,"code":";;(fn duplicate-seq[duplicated-seq start-seq] \n;;  (if (empty? start-seq)\n;;    duplicated-seq\n;;    (duplicate-seq \n;;     (conj duplicated-seq (first start-seq)(first start-seq));jak to zrobić bez dublowania? :(\n;;     (rest start-seq))))\n;;(vector)\n\nreduce #(conj %1 %2 %2) []","user":"55429859e4b0a04f7929951f"},{"problem":32,"code":"(fn duplicate [a-sequence]\n  (reverse (reduce (fn [duplicated-sequence element]\n                     (cons element (cons element duplicated-sequence)))\n                  nil a-sequence)))","user":"56e48302e4b03a7c14b85a4e"},{"problem":32,"code":"(fn [x]\n   (reduce\n    #(conj %1 %2 %2) [] x))","user":"56012cd7e4b04bb52996e17d"},{"problem":32,"code":"(fn [m] (mapcat (fn [x] (repeat 2 x)) m))","user":"564a985be4b0284900eef65c"},{"problem":32,"code":"(fn [coll] (mapcat (fn [x] (list x x)) coll))","user":"54b402dce4b05787c3b16388"},{"problem":32,"code":"(fn [l]\n  (loop [l l, ret []]\n    (if (empty? l)\n      ret\n      (recur (rest l) (conj ret (first l) (first l))))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":32,"code":"(fn [in]\n   (reduce (fn [acc x] (into acc [x x])) [] in))","user":"5429986ce4b01498b1a71b3b"},{"problem":32,"code":"(partial (fn [output [head & tail]]\n           (if (nil? head)\n             (into '() output)\n             (recur (cons head (cons head output)) tail))) '())","user":"58db362be4b0a4d5acaab675"},{"problem":32,"code":"(fn [xs](mapcat list xs xs))","user":"55597b84e4b0deb715856e36"},{"problem":32,"code":"(fn [x] (mapcat #(replicate 2 %) x))","user":"55ce2b6de4b0e31453f64a26"},{"problem":32,"code":"(fn [x] (reduce (fn [acc e] (into acc [e e])) [] (vec x)))","user":"5b445421e4b02d533a91bc40"},{"problem":32,"code":"(fn [list] \n  (reduce (fn [result x] (conj result x x)) [] list))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":32,"code":"(fn\n  [x]\n  (reduce #(conj %1 %2 %2) [] x)\n  )","user":"56de78fde4b0ea9b8538f83c"},{"problem":32,"code":"(fn d [x & [dd]]\n  (if (empty? x)\n    (reverse dd)\n    (d (rest x) (conj dd (first x) (first x)))))","user":"5540fe42e4b0a04f7929950a"},{"problem":32,"code":"(fn [l] (apply concat (map (fn [a] `(~a ~a)) l)))","user":"59075e3be4b047aa04b19955"},{"problem":32,"code":"(fn dup-seq [s]\n  (cond\n    (nil? (seq s)) s\n    :else (let [[x xs] [(first s) (rest s)]] \n            (cons x (cons x (dup-seq xs))))))","user":"5f63684be4b02876ed9fd012"},{"problem":32,"code":"#(apply concat (for [item %] [item item]))","user":"56f006f4e4b04a395b9a046a"},{"problem":32,"code":"#(loop [coll % acc nil]\n   (if (empty? coll)\n     acc\n     (let [elt (last coll)]\n       (recur (butlast coll) (conj acc elt elt)))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn [x]\n  (mapcat #(list %1 %1) x))","problem":32,"user":"51f82769e4b09be9c177e527"},{"problem":32,"code":"(fn [lst]\n  (loop [xs lst\n         res nil]\n    (if (empty? xs)\n      (reverse res)\n      (recur (rest xs) \n             (cons (first xs) (cons (first xs) res))))))","user":"5516a874e4b06a49daca83b5"},{"problem":32,"code":"reduce #(into %1 (list %2 %2)) []","user":"59ac0965e4b08cbb53654da6"},{"code":"(fn [seq] (mapcat (fn [x] (list x x)) seq))","problem":32,"user":"4f03818e535dcb61093f6b00"},{"problem":32,"code":"(fn duplicator [xs]\n  (reduce (fn [result x]\n              (conj result x x))\n          []\n          xs)\n  )","user":"59e0f839e4b08badc2a0c502"},{"problem":32,"code":"(fn [coll]\n  (loop\n    [i 0\n     s '()]\n    (if (= i (count coll))\n      (reverse s)\n      (recur (inc i) (conj (conj s (nth coll i)) (nth coll i))))))","user":"51a4d802e4b0def3c5c5869a"},{"problem":32,"code":"#(reduce (fn [x y]\n          (conj x y y)) [] %)","user":"541735b3e4b01498b1a71a07"},{"code":"(fn [l]\n  (apply concat (map #(repeat 2 %) l)))","problem":32,"user":"4f7e29dde4b06e829148e1ca"},{"problem":32,"code":"(fn dup_sequence\n  ;duplicates each element of a sequence\"\n  [lst]\n  (loop [lst lst\n         result ()]\n    (if (= (first lst) nil) result\n      (recur (rest lst) (concat result (repeat 2 (first lst)))))))","user":"5bbbcecee4b0a20761a23611"},{"problem":32,"code":"(fn [x] (loop [consume x return '()] (if (empty? consume) (reverse return) (recur (rest consume) (cons (first consume) (cons (first consume) return))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn duplicate\n  [coll]\n    (mapcat list coll coll))","problem":32,"user":"4e3bcccd535deb9a81d77f56"},{"problem":32,"code":"(fn [xs]\n   (reduce\n   #(conj %1 %2 %2)\n   '()\n   (reverse xs)))","user":"5624f5a6e4b00a550fc90288"},{"code":"(fn dpl [sq]\n  (if (empty? sq)\n    nil\n    (let [f (first sq)]\n      (cons f (cons f (dpl (rest sq)))))))","problem":32,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn [s] (loop [doubled (map (fn [x] [x x]) s)\n               acc []]\n                 (if (empty? doubled)\n                    acc\n                    (recur (rest doubled) (concat acc (first doubled))))))","problem":32,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":32,"code":"(fn [c]\n  (mapcat (fn [x] [x x]) c))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":32,"code":"(\n\tfn function [var] \n  \t(\n     interleave var var\n     )\n)","user":"548018e8e4b0c51c1f4d7333"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc itm] (concat acc itm)) () (map (fn [itm] (list itm itm)) coll)))","user":"593e4b1fe4b069cdc2982bbb"},{"code":"(fn [col]\n  (loop [c col\n         r '()]\n    (if (empty? c)\n      r\n      (recur (pop c) (conj r (peek c) (peek c))))))","problem":32,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn\n  [sq]\n  (interleave sq sq))","problem":32,"user":"52e44a22e4b09f7907dd144e"},{"code":"(fn [coll]\n  (loop [x coll\n         out []\n         c 0]\n    (if (= (count x) c) out\n      (let [z (get x c)]\n         (recur x (conj (conj out z) z) (inc c))))))","problem":32,"user":"505aa653e4b021387fb89857"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc item] (conj acc item item)) [] coll) \n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"problem":32,"code":"(fn [s]\n  (reduce\n    (fn [s x]\n      (concat s (list x x)))\n    '() s))","user":"5ac91d90e4b0e27600da77bd"},{"problem":32,"code":"(fn f32 [l]\n     (if (> (count l) 0)\n       (conj (f32 (rest l))  (first l) (first l))))","user":"5d9edc21e4b000c986472bc6"},{"code":"(fn [x]\n  (loop \n    [coll () orig x]\n    (if (empty? orig)\n      (reverse coll)\n      (recur (cons (first orig) (cons (first orig) coll)) (rest orig))\n      )\n    )\n  )","problem":32,"user":"51377188e4b04059df19f303"},{"problem":32,"code":"#(reduce (fn [ac x] (conj ac x x)) [] %)","user":"57a5da5ee4b0a966079561fe"},{"problem":32,"code":"(fn [ll]\n (loop [mylist (seq ll) result []]\n   (if (= mylist ())\n     (seq result)\n     (recur (rest mylist) (conj result (first mylist) (first mylist)))\n   )\n )     \n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":32,"code":"(fn inter[s](when (seq s) (concat [(first s) (first s)] (inter (rest s)))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":32,"code":"(fn [seq]\n  (mapcat (fn [a b] [a b]) seq seq))","user":"5984e7dee4b021a7a535fe43"},{"problem":32,"code":"#(reduce (fn[coll v](apply conj coll [v v])) [] %)","user":"555c6344e4b0b056612e224c"},{"problem":32,"code":"#(reduce (fn [res el] (conj res el el)) [] %)","user":"59d9dcfbe4b0ef0a1e9b5c5d"},{"problem":32,"code":"(fn dup [coll]\n  (if (empty? coll) \n    coll \n    (cons (first coll) (cons (first coll) (dup (rest coll))))))","user":"56cb3a61e4b0ea9b8538f726"},{"code":"(fn [L] (reduce concat \n  (map (fn [x] (list x x)) L)))","problem":32,"user":"50afa883e4b0c3f5ed5c29a2"},{"problem":32,"code":"(fn d [s]\n\t(if (empty? s)\n      '()\n      (cons (first s) (cons (first s) (d (rest s))))))","user":"56eb3f9de4b04a395b9a0420"},{"code":"(fn [x] (reduce concat (map #(list % %) x)))","problem":32,"user":"4e059278535d04ed9115e7a5"},{"problem":32,"code":"(fn [col](reduce concat (map #(take 2 (repeat %)) col)))","user":"5885a608e4b0f1effa3b76bc"},{"problem":32,"code":"#(loop \n   [l %, r []] \n   (if (empty? l) r (recur (rest l) (conj r (first l) (first l))))\n)","user":"543a68d3e4b032a45b869326"},{"problem":32,"code":"(fn [lst] (apply concat (map (fn [x] (list x x)) lst)))","user":"56791447e4b05957ce8c6183"},{"problem":32,"code":"(fn [llist]\n  (reduce (fn [acc x] (conj acc x x)) [] llist))","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":32,"code":"(fn [coll] (reduce #(concat %1 (repeat 2 %2)) '() coll))","user":"5417bc50e4b01498b1a71a0f"},{"code":"(fn [coll]\n  (mapcat (fn [x] [x x]) coll))","problem":32,"user":"4f1c2a3a535d64f603146480"},{"problem":32,"code":"(fn [coll]\n  (seq (reduce (fn [result val]\n            (conj result val val)) [] coll)))","user":"54df838de4b024c67c0cf7ae"},{"code":"(fn [sq]\n  (loop [r [] s sq]\n    (if (first s)\n      (recur (cons (first s) (cons (first s) r)) (next s))\n      (reverse r))))","problem":32,"user":"53219cece4b09d4e7a9b54b7"},{"problem":32,"code":"(fn dup' [xs]\n (if (empty? xs)\n   nil\n   (conj (dup' (rest xs)) (first xs) (first xs))))","user":"579563ffe4b0e215f87e847e"},{"problem":32,"code":"(fn duplicate [s]\n  (if (empty? s) \n   nil\n   (cons (first s) (cons (first s) (duplicate (rest s))))))","user":"57501de0e4b02ea11479926c"},{"problem":32,"code":"(fn duplicate-seq [c]\n  (let [s (seq c)]\n    (when s\n      (concat (repeat 2 (first s)) (duplicate-seq (rest s))))))","user":"54d000c7e4b018d918be98d7"},{"problem":32,"code":"(fn [col] (mapcat #(conj (conj '() %1) %1) col))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn [s] (mapcat identity\n            (map (fn [x] (cons x (cons x '()))) s)))","problem":32,"user":"527b856fe4b03e8d9a4a758d"},{"problem":32,"code":"(fn [li] (reduce concat () (map #(list % %) li)))","user":"5e7374ace4b085ba37836dd0"},{"code":"(fn [x] \n  (loop [out () a (first x) b (next x)]\n    (if (nil? b)\n      (concat out (list a a))\n      (recur (concat out (list a a)) (first b) (next b) )\n)))","problem":32,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn [s]\n  (loop [s s acc []]\n    (if (empty? s)\n      \tacc\n      \t(recur (rest s) (conj acc (first s) (first s)))\n      )))","problem":32,"user":"53886d2fe4b0640c7a9a589d"},{"problem":32,"code":"(fn [lst] \n  (mapcat #(list % %) lst))","user":"5f8330b8e4b01aacbe7a270f"},{"problem":32,"code":"#(let [x %] (interleave x x))","user":"54d753ebe4b0a52adc2e2029"},{"problem":32,"code":"(fn doubler [xs]\n  (#(reduce (fn foo [lst item] (concat lst [item item])) '() xs)))","user":"546113ffe4b01be26fd74699"},{"code":"(fn [col]\n  (loop [inputcol (reverse col) outputcol ()]\n    (if (empty? inputcol)\n      outputcol\n      (recur (rest inputcol) (conj (conj outputcol (first inputcol)) (first inputcol))))))","problem":32,"user":"51026750e4b00c483ae176f7"},{"problem":32,"code":"(fn dupelcate [coll]\n  (loop [orig coll ret []]\n    (if (empty? orig)\n      ret\n      (recur (rest orig) (conj (conj ret (first orig)) (first orig))))))","user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn [v]\n  (reverse \n    (reduce (fn [acc, t]\n              (conj acc t t)) () v)))","problem":32,"user":"4edffe54535d10e5ff6f5347"},{"code":"(fn foo[x] (when (> (count x) 0) (conj (foo (rest x)) (first x) (first x))))","problem":32,"user":"522f39a8e4b032bbe3424159"},{"code":"(fn [l] \n  (apply concat (map #(list % %) l)))","problem":32,"user":"51a4416ae4b0def3c5c5868c"},{"problem":32,"code":"#(reverse (reduce (fn [y x] (conj (conj y x) x)) () %))","user":"57b35772e4b0fbc9809a277c"},{"problem":32,"code":"(fn [ls]\n\t(loop [x ls\n           out []]\n    \t(if (seq x)\n        \t;do something\n          \t(recur (rest x) (conj out (first x) (first x)))\n        \tout\n        )\n    )\n)","user":"57d031d6e4b0bd073c202354"},{"problem":32,"code":"(fn [coll] (reduce into (map (fn [item] (vector item item)) coll)))","user":"588f500ae4b00487982d51a4"},{"code":"#(reduce (fn [v item] (concat v (list item item))) '() %)","problem":32,"user":"4fe1a734e4b0dd6cd5ce3637"},{"code":"(fn [in-seq] \n  (loop [local-seq in-seq result []]\n    (if (empty? local-seq) result\n      (recur (rest local-seq) \n        (conj result (first local-seq) (first local-seq))))))","problem":32,"user":"4ef4ab95535dced4c769f23b"},{"problem":32,"code":"(fn \n  [seq]\n  (reduce (fn [final-parts part]\n              (into final-parts [part part]))\n          [] \n          seq))","user":"602f56c5e4b0d5df2af22297"},{"code":"(fn [seq] (reduce #(conj %1 %2 %2) [] seq))","problem":32,"user":"5234f716e4b05e80434a505f"},{"problem":32,"code":"(fn duplicate-seq\n  [coll]\n  (reduce (fn [acc ele] (concat acc [ele ele]))\n          ()\n          coll)\n  )","user":"5f29837ee4b033932238a64f"},{"code":"(fn [x]\n  (apply concat (map #(list % %)\n                     x)))","problem":32,"user":"52890634e4b0239c8a67ae5e"},{"problem":32,"code":"(fn [sq]\n  (reduce (fn [my-coll elem] (conj (conj my-coll elem) elem)) [] sq)\n  )","user":"5c7d590ae4b0d597f478caaa"},{"code":"(fn f [xs]\n  (if (empty? xs)\n       nil\n       (conj (conj (f (rest xs)) (first xs)) (first xs))))","problem":32,"user":"5097ea89e4b087ccf61a7af4"},{"problem":32,"code":"(fn [s] (apply concat (map (fn [e] [e e]) s)))","user":"57f80350e4b0d3187e90090c"},{"code":"(fn f [x] \n  (if (first x)       \n    (cons (first x) (cons (first x) (f (rest x)))))\n  )","problem":32,"user":"503c90aae4b06c4e0e1fa24b"},{"code":"(fn [elems]\n  (loop [input elems results []]\n    (if (empty? input)\n      results\n      (recur (rest input) (conj (conj results (first input)) (first input))))))","problem":32,"user":"4ee52c44535d1385b2869d88"},{"problem":32,"code":"(fn [sq]\n  (reduce (fn [res ele]\n            (conj (conj res ele) ele))\n          []\n          sq))","user":"5d64013ce4b0c9e5857d502d"},{"code":"#(loop [[h & t] %, res '()]\n  (if h \n(recur t (conj res h h)) (reverse res)))","problem":32,"user":"4eabb245535d7eef30807319"},{"code":"(fn dup [x]\n  (if (empty? x)\n    '()\n    (let [y (first x)]\n      (cons y (cons y (dup (rest x)))))))","problem":32,"user":"5110b8bae4b04c71fce993f4"},{"code":"(fn  [lst]\n  (loop [rm (seq lst), acc (vector)]\n    (cond (empty? rm) (seq acc)\n          :else (recur (rest rm) (conj acc (first rm) (first rm))))))","problem":32,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [xs] (reduce (fn [x y] (conj x y y)) [] xs))","problem":32,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":32,"code":"(fn duplicate \n  [lst]\n  (reduce concat (map #(take 2 (repeat %)) lst)))","user":"59e68254e4b0249b728206fc"},{"problem":32,"code":"(fn duplicate-elements [seq]\n  (loop [idx 0\n         result []]\n    (if (>= idx (count seq))\n      result\n      (let [current (nth seq idx)\n            new-result (conj result current current)\n            next-idx (+ idx 1)]\n        (recur next-idx new-result)))))","user":"58ac01f7e4b0005cfeb1a73b"},{"code":"reduce #(concat %1 (list %2 %2)) ()","problem":32,"user":"536973e5e4b0243289761e9e"},{"problem":32,"code":"(fn aaa[coll](let[a (fn b[coll ret](cond\n                                       (empty? coll) ret\n                                       :else (b (rest coll) (conj ret (repeat 2 (first coll))))))]\n                 (apply concat(a coll []))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn dupseq [sofar x]\n  (if (empty? x)\n    sofar\n    (recur\n     (conj (conj sofar (first x)) (first x))\n     (rest x)\n    )\n   )\n) []","problem":32,"user":"531cd41ee4b08068f379eda9"},{"code":"(fn [s] (for [x s y [x x]] y))","problem":32,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn [lst] (reduce #(concat %1 (list %2 %2)) () lst))","problem":32,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn\n  [c]\n  (mapcat #(repeat 2 %) c))","problem":32,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":32,"code":"(fn [seq]\n  (let [duplicator (fn [coll n]\n                     (loop [c coll n n]\n                       (if (= n 0)\n                         c\n                         (recur (conj c (first c)) (dec n)))))]\n    (loop [s seq i 0 r ()]\n      (if (empty? s)\n        (reverse (duplicator r i))\n        (if (= i 0)\n          (recur (rest s) (inc i) (conj r (first s)))\n          (if (= (first r) (first s))\n            (recur (rest s) (inc i) (conj r (first s)))\n            (recur (rest s) 1 (conj (duplicator r i) (first s)))))))))","user":"55151417e4b055c2f668d4da"},{"problem":32,"code":"#(loop [ l %1 l2 []] (let [f (first l)] (if (= (count l) 0) l2 (recur (rest l) (concat l2 (list f f))))))","user":"53b2a7f8e4b047364c04449c"},{"problem":32,"code":"(fn [ary]\n    (reduce (fn [lst el] (concat lst [el el])) '() ary))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"#(reduce concat (for [l %] (repeat 2 l)))","problem":32,"user":"531619c1e4b08068f379ed3d"},{"code":"(fn [x] (interleave x x))","problem":32,"user":"4e47f4f3535dc968683fc4bb"},{"problem":32,"code":"(fn [sq]\n    (reduce (fn [result item]\n              (conj result item item)\n              )\n            []\n            sq\n            )\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":32,"code":"(fn [l] (reverse (reduce #(conj (conj %1 %2) %2) '() l)))","user":"556086a2e4b0c656e3ff17c1"},{"problem":32,"code":"(fn duplicate-seq [coll]\n  (if (empty? coll)\n    coll\n    (cons (first coll) (cons (first coll) (duplicate-seq (rest coll))))))","user":"55b69e37e4b01b9910ae2999"},{"code":"(fn dup [v] \n  (if (empty? v)\n    '()\n    (conj (conj (dup (rest v)) (first v)) (first v))\n  )\n)","problem":32,"user":"4f84400de4b033992c121c2e"},{"problem":32,"code":"#(reduce (fn [coll n] (concat coll (list n n))) () %)","user":"60471241e4b02d28681c77c9"},{"problem":32,"code":"(fn  f1 [x] ( if (not (empty? x)) (cons (first x) (cons (first x) (f1 (rest x))))))","user":"53b293d3e4b047364c04449b"},{"code":"(fn [lst]\n  (apply concat\n         (for [x lst]\n           (list x x))))","problem":32,"user":"50d5c19ce4b0159555a1fc61"},{"code":"#(reduce (fn [x y] (concat x [y y])) [] %)","problem":32,"user":"52606318e4b03e8d9a4a7036"},{"problem":32,"code":"(fn [x]\n  (apply concat (for [i x]\n    [i i])))","user":"55912230e4b027778923767a"},{"problem":32,"code":"(fn doubled\n  [l]\n  (if (empty? l)\n    '()\n    (cons (first l) \n          (cons (first l) \n                (doubled (rest l))))))","user":"56e8ef93e4b04a395b9a03f4"},{"code":"(fn duplica [xs]\n  (mapcat #(list % %) xs))","problem":32,"user":"4db51ce0535d87e67b28fe06"},{"problem":32,"code":"(fn [input]\n    (loop [step input result ()]\n       (if (empty? step)\n          (reverse result)\n          (recur (rest step)\n                 (cons (first step)\n                       (cons (first step) result)))\n       )\n    )\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn [s]\n  (mapcat #(list % %) s))","problem":32,"user":"4e75edfe535d7a570dd295c7"},{"problem":32,"code":"#(sort(into % %))","user":"55e84475e4b0121d4835fd8b"},{"problem":32,"code":"(fn [x]\n  (apply concat (map #(into [] [% %]) x)))","user":"54051338e4b0addc1aec6662"},{"code":"#(apply concat (for [x %]  [x x]))","problem":32,"user":"52e683c0e4b09f7907dd1477"},{"problem":32,"code":"#(mapcat (fn [x] (seq [x x])) %)","user":"55965515e4b0c79f6e1db978"},{"problem":32,"code":"(fn [ls] (reduce #(conj %1 %2 %2) [] ls))","user":"53751c5ee4b06839e8705e11"},{"problem":32,"code":"(fn\n  [coll]\n  (mapcat #(repeat 2 %) coll))","user":"56c21eafe4b05cc29241ee7e"},{"problem":32,"code":"(fn[inp] (reduce concat (map #(take 2 (repeat %)) inp)))","user":"57a6f585e4b0a9660795620e"},{"problem":32,"code":"(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) () xs)))","user":"54cec2a9e4b018d918be98c1"},{"code":"(fn [seq] (apply concat (map #(list % %) seq)))","problem":32,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":32,"code":"(fn [x] (sort (reduce conj x x)))","user":"58a0fd0be4b02bd94d917ea4"},{"problem":32,"code":"#(loop [lis % res []]\n   (if (seq lis)\n     (recur (rest lis) (into res (let [f (first lis)] [f f])))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":32,"code":"(fn dup [l]\n  (mapcat (fn [x] (repeat 2 x)) l)\n)","user":"54c82b27e4b045293a27f645"},{"problem":32,"code":"(fn [x] (reduce concat (map #(list %1 %2) x x)))","user":"56449e4de4b0284900eef5f9"},{"problem":32,"code":"reduce (fn [x y] (concat x (repeat 2 y))) []","user":"578b140be4b0ebec4cfb7545"},{"problem":32,"code":"reduce (fn [result nv] (conj result nv nv)) []","user":"56cc34aee4b0ea9b8538f73c"},{"code":"(fn [x]\n  (loop [i 0 out []]\n    (if (== i (count x))\n      out\n      (recur (inc i) (conj out (nth x i) (nth x i))))))","problem":32,"user":"4e955b95535dbda64a6f6b33"},{"code":";; Used some internet searches to figure this one\n;; out.  Worth it.  Learned a lot about sequence\n;; operators.\n(fn duplicate-sequence-items[seq]\n  \"Duplicate each item of a sequence\"\n  (reduce concat (map #(take 2 (repeat %)) seq)))","problem":32,"user":"4f831fd3e4b033992c121c17"},{"problem":32,"code":"reduce (fn [acc x] (conj acc x x) ) []","user":"57513f88e4b02ea114799283"},{"problem":32,"code":"(fn [x]\n    \n(reduce\n  (fn [res elem] (concat res ( concat elem elem) )  )\n  []\n  (partition 1  x )\n )\n \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":32,"code":"(fn [s]\n  (loop\n    [coll s\n     result ()]\n    (if\n      (empty? coll)\n      (reverse result)\n      (recur (rest coll) (conj result (first coll) (first coll)))\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"problem":32,"code":"#(reduce (fn [r x] (concat r (list x x))) '() %)","user":"55344b75e4b09218d5f44f99"},{"problem":32,"code":"#(into '() (reverse (interleave (take-nth 1 %) (take-nth 1 %))))","user":"568384b4e4b0945ebc182a9a"},{"problem":32,"code":"#(reduce (fn [res, this] (conj res this this)) [] %1)","user":"53e15371e4b0d874e779ae54"},{"code":"(fn [x]\n  (reverse (reduce #(conj (conj % %2) %2) \n           () x)))","problem":32,"user":"4ff505c8e4b0678c553fc364"},{"problem":32,"code":"(fn\n  [coll]\n  (reverse\n   (reduce #(apply conj %1 (take 2 (repeat %2))) '() coll)))","user":"574eb3b1e4b02ea114799247"},{"code":"(fn dup [x] (if (seq x) (concat (take 1 x) (take 1 x) (dup (rest x)))))","problem":32,"user":"53388e2de4b0e30313ee6c9c"},{"problem":32,"code":"(fn [in]\n  (loop [in in\n         out ()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out\n                   (repeat 2 (first in)))))))","user":"56b2300ce4b0982f16b37dff"},{"problem":32,"code":"(fn dup [x]\n  (if (empty? x) '()\n    (conj (dup (rest x)) (first x) (first x))))","user":"569f99cce4b0542e1f8d1497"},{"problem":32,"code":"(fn dup3[x]\n  (loop [res []\n         tail x]\n    (if (empty? tail)\n      res\n    (recur (conj res (first tail) (first tail)) (rest tail)))))","user":"5bf50e76e4b0b326c961d8a0"},{"code":"(fn dup [coll]\r\n  (if (empty? coll)\r\n    (list)\r\n    (conj (dup (rest coll)) (first coll) (first coll))))","problem":32,"user":"4facff22e4b081705acca230"},{"problem":32,"code":"(fn dup\n  ([col] (dup col '()))\n  ([col acc]\n   (if (empty? col)\n     acc\n     (recur (butlast col) (conj acc (last col) (last col))))))","user":"5d92b543e4b0915913b1d414"},{"problem":32,"code":"(fn [col]\n  (loop [source col output []]\n    (if (empty? source)\n      output\n      (recur (rest source) (conj (conj output (first source)) (first source)))\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"problem":32,"code":"(fn dup [seq]\n  (if (= 1 (count seq))\n    (cons (first seq) seq)\n    (cons (first seq) (cons (first seq) (dup (rest seq))))))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":32,"code":"(fn duplicate-seq [sq]\n  (loop [sq sq res []]\n    (if (empty? sq)\n      res\n      (recur (rest sq) (conj res (first sq) (first sq))))))","user":"5c6314c5e4b0fca0c1622658"},{"problem":32,"code":"(fn [args] (apply list (reduce (fn [acc, x] (into acc [x x])) [] args)))","user":"5eeb03dde4b029a2061bbeca"},{"problem":32,"code":"(fn foo [x] (if (empty? x) '() (conj (foo (rest x)) (first x) (first x))))","user":"54078851e4b0addc1aec66bd"},{"code":"(fn [coll] \n  (mapcat #(repeat 2 %) coll))","problem":32,"user":"4f137034535d64f603146430"},{"code":"(fn [x] (apply concat (map (fn [x] (repeat 2 x)) x)))","problem":32,"user":"4ee88f29535d93acb0a66882"},{"problem":32,"code":"#(reduce (fn [r x] (conj r x x)) [] %)","user":"5a984616e4b0d174b936c789"},{"problem":32,"code":"(fn f [seq] (apply concat (map #(list % %) seq)))","user":"5681afaae4b0945ebc182a87"},{"problem":32,"code":"(fn [s]\n  (mapcat (fn [_] [_ _]) s))","user":"5264502be4b03e8d9a4a70cf"},{"problem":32,"code":"(fn [l]\n  (let [rl (reverse l)]\n    (loop [in rl out '()]\n      (if (empty? in)\n        out\n        (recur (rest in)\n               (conj (conj out (first in)) (first in)))))))","user":"545c2d07e4b01be26fd7465c"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc e] (into acc [e e]))\n            []\n            coll))","user":"52d38c51e4b099d49816f0c5"},{"problem":32,"code":"(fn dup [coll] (reduce concat(map #(take 2 (repeat %)) coll)))","user":"583f2e4de4b089d5ab817dcb"},{"problem":32,"code":"(fn [c] (->> c (mapcat #(repeat 2 %)) concat))","user":"5c87d2cbe4b048ec896c591c"},{"code":"(fn [input] (reduce #(concat %1 [%2 %2]) [] input))","problem":32,"user":"52154514e4b02f6d8ea676c0"},{"problem":32,"code":"(fn [coll]\n  (mapcat (fn [l] (repeat 2 l)) coll))","user":"5f388489e4b0574c87022c69"},{"problem":32,"code":"#(mapcat (fn [x] (conj [] x x)) %)","user":"53a442a6e4b0b62ce300572d"},{"problem":32,"code":"#(reduce (fn [list item] (conj list item item)) [] %)","user":"553024c3e4b076ab5578f80d"},{"problem":32,"code":"(fn dup[l]\n  (reduce concat (map (fn [x y] [x y]) l l))  \n)","user":"579d1567e4b05b1deef9ae12"},{"problem":32,"code":"(fn [x]\n      (reduce (fn [acc v]\n                (conj (conj acc v) v)) [] x))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":32,"code":"(fn [s] (mapcat #(seq [% %]) s))","user":"54fd5e2de4b07d26eda61d33"},{"problem":32,"code":"(fn doubler [x]\n  (loop [x x acc ()]\n    (if (empty? x)\n      acc\n      (recur (rest x) (concat acc `(~(first x) ~(first x)))))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn [lst]\n  (loop [inlist lst outlist []]\n    (if (empty? inlist)\n      outlist\n      (recur \n        (rest inlist) \n        (concat outlist [(first inlist) (first inlist)])))))","problem":32,"user":"5060d137e4b0dc10a69545a0"},{"problem":32,"code":"#(reduce (fn [res i] (concat res (repeat 2 i))) () %)","user":"5e5f8a07e4b0fd0acd15867c"},{"code":"(fn[x] (apply concat (map #(list %1 %1) x)))","problem":32,"user":"53806e5be4b06839e8705ec1"},{"problem":32,"code":"#(sort(take (* 2 (count %))(cycle %)))","user":"5a853662e4b00b71e582a09e"},{"problem":32,"code":"reduce (fn[r x] (concat r (list x x) )) '()","user":"577e54bbe4b0c8d87281f6e5"},{"problem":32,"code":"(fn [n]\n   (sort (concat n n))\n   )","user":"6093b56ce4b00e9e6653c3e0"},{"problem":32,"code":"(fn [coleccion]\n  (reverse (reduce (fn [col-ini elemento]\n                     (conj col-ini elemento elemento)) '() coleccion)))","user":"599f7a7ee4b0871e7608b81e"},{"code":"(fn [s] (mapcat (partial repeat 2) s))","problem":32,"user":"504e9f5ce4b069badc5a33bd"},{"problem":32,"code":"#(reverse (reduce (fn [x y] (conj x y y)) '() %))","user":"550ccedfe4b06e50f9beb158"},{"problem":32,"code":"(fn [l]\n  (apply concat \n   (map #(vector %1 %1) l)))","user":"5d439775e4b07c84aa5ae696"},{"problem":32,"code":"(fn example [s]\n  (let \n    [x (first s)\n     xs (rest s)]\n    (cond\n     (empty? s) '()\n     :else (cons x (cons x (example xs))))))","user":"5689fd03e4b0dcc4269f4088"},{"problem":32,"code":"(fn [x]\n  (loop [arr x\n         new []]\n    (if-not (first arr)\n      new\n      (recur (next arr) (conj new (first arr) (first arr)))\n      )\n    )\n  )","user":"5b3e35bde4b02d533a91bbfa"},{"code":"mapcat #(list % %)","problem":32,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"mapcat #(list %%)","problem":32,"user":"4e931ebb535dbda64a6f6b08"},{"code":"(fn dup [coll]\n  (when-let [[f & r] (seq coll)]\n    ;;if r is nil return f\n    ;;else add double f to dup(r)\n    (concat (list f f) (dup r))\n    ))","problem":32,"user":"4f82f1b9e4b033992c121c0f"},{"code":"(fn [seq] (mapcat (partial repeat 2) seq))","problem":32,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn x [coll]  \n  (interleave coll coll))","problem":32,"user":"4e80d1c8535db62dc21a62b6"},{"problem":32,"code":"(fn duplicate-seq [inc-list] (reduce concat [] (map (fn [elem] (seq [elem, elem])) inc-list)))","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":32,"code":"(fn twiceEach [x] (mapcat #(repeat 2 %) x))","user":"5547793be4b0a04f7929954c"},{"problem":32,"code":"(fn duplicate [lst]\n  (loop [lst lst\n         n (first lst)\n         nuevo ()]\n       (if (empty? lst)\n      \t(reverse nuevo)\n      \t(recur (rest lst)\n         \t   (first (rest lst))\n               (concat (list n) (list n) nuevo)))))","user":"57f8151ce4b0d3187e900912"},{"problem":32,"code":"(fn [s] (into '() (reverse (reduce (fn [l i] (conj l i i)) [] s))))","user":"59419bdfe4b060784b3b78f7"},{"code":"(comp (partial reduce #(into %1 [%2 %2]) []))","problem":32,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":32,"code":"(partial reduce #(concat %1 (list %2 %2)) [])","user":"579e15a6e4b05b1deef9ae20"},{"problem":32,"code":"(fn [xs]\n  (if-not (seq xs)\n    (sequence nil)\n    (seq (reduce #(conj %1 %2 %2) [] xs))))","user":"5d47fa13e4b07c84aa5ae6b6"},{"code":"(fn [coll] (mapcat #(list %  %) coll))","problem":32,"user":"508147cde4b0a20aab17b93a"},{"problem":32,"code":"#(->> %\n      (map (juxt identity identity))\n      (mapcat identity))","user":"5a9181c5e4b002d099cae6f6"},{"code":"(fn [x] (mapcat #(vector % %) x))","problem":32,"user":"4e6a5f5c535d8ccf87e9fed6"},{"problem":32,"code":"(fn [coll]\n  (apply interleave (repeat 2 coll)))","user":"605a876be4b000d535e6f53c"},{"code":"(fn duphead [s] \n  (if-not (= s ())\n    (concat (list (first s) (first s)) (duphead (rest s)))\n    ()\n  ))","problem":32,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn dup [s]\n  (lazy-seq\n    (when (seq s)\n      (cons (first s) (cons (first s) (dup (rest s)))))))","problem":32,"user":"4f28c979e4b0d6649770a01a"},{"problem":32,"code":"(fn [dataz] \n  (reduce concat (map #(list %1 %1) dataz)))","user":"56ef11efe4b04a395b9a045b"},{"code":"(fn [seq]\n  (apply concat (map #(repeat 2 %) seq)))","problem":32,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn [coll]\n\t(reduce (fn[value coll](conj (conj value coll) coll)) [] coll))","problem":32,"user":"4e723bcb535d5021c1a8965c"},{"code":"#(reduce (fn [x y] (conj x y y)) [] % )","problem":32,"user":"4f3c0c0fe4b0e243712b1f3d"},{"problem":32,"code":"reduce (fn [l i] (conj (conj l i) i)) []","user":"589e22fae4b02bd94d917e56"},{"problem":32,"code":"(fn duplicateX [x] (mapcat identity (map #(repeat 2 %) x)))","user":"568820e8e4b0dcc4269f4067"},{"problem":32,"code":"(fn dup-elements\n  [some-seq]\n  (reverse (into () (reduce\n    (fn\n      [new-seq item]\n      (conj new-seq item item))\n    []\n    some-seq))))","user":"5a35d515e4b0ddc586f153e1"},{"problem":32,"code":"#(let [x % y (identity x)] (sort (concat x y)))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":32,"code":"(fn[lst] (loop [res '()\n                 lst lst]\n              (if (empty? lst)\n                  (reverse res)\n                  (recur (cons (first lst) (cons (first lst) res)) (rest lst)))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":32,"code":"(fn my-dup [xs]\n  (vec (mapcat (fn [x] [x x]) xs)))","user":"59f7f55de4b0ca45a743a313"},{"problem":32,"code":"(fn [lst]\n  (reduce #(conj %1 %2 %2) '() (reverse lst)))","user":"55f344afe4b06e875b46ce5a"},{"code":"(fn [x] (apply concat (map #(repeat 2 %) x)))","problem":32,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":32,"code":"#(apply concat ((fn [coll] \n  (map (fn [x] [x x]) coll)) %))","user":"5a1c3c11e4b0ff51aa4b323d"},{"code":"(fn [x] (reduce #(apply conj %1 %2) (map #(vector % %) x)))","problem":32,"user":"519291c1e4b08962174cf74b"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [v x]\n            (conj v x x))\n          []\n          coll))","user":"56a79eb0e4b07966d5a8a05d"},{"problem":32,"code":"(fn dup [[x & xs]]\n  (if-not x\n    []\n    (concat [x x]  (dup xs))))","user":"5bcddaeee4b0e9689409ee07"},{"code":"(fn [s]\n  (mapcat #(take 2 (repeat %)) s))","problem":32,"user":"4e70c0b1535d5021c1a89640"},{"code":"#(loop [input % output [] ]\r\n  \t(if (= (count input) 0) \r\n\t\t\toutput\r\n\t\t\t(recur (rest input) ( conj ( conj output (first input)) (first input))) ))","problem":32,"user":"4f00c74f535dcb61093f6a31"},{"problem":32,"code":"#(reduce into (reverse (for [x %] (repeat 2 x ) ) ) )","user":"56405959e4b08d4f616f5ee1"},{"problem":32,"code":"(fn lstDuplicate\n  [lst]\n  (loop[lst (seq lst)\n        resul ()]\n    (if (empty? lst)\n      (reverse resul)\n      (recur (rest lst) (conj resul (first lst) (first lst)))\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"code":"(fn [coll]\n  (reduce (fn [a x]\n            (conj a x x)\n            )\n          []\n          coll))","problem":32,"user":"52b94e26e4b07a9af57922b9"},{"problem":32,"code":"reduce #(apply conj %1 (vector %2 %2)) []","user":"5a3e6642e4b0447ef91cc5b3"},{"problem":32,"code":"(fn [s]\n  (reduce\n    (fn [c e]\n      (conj c e e)) [] s))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [l] (reduce concat (map (fn [e] [e e]) l)))","problem":32,"user":"53712c03e4b0fc7073fd6ea9"},{"code":"(partial mapcat #(list % %))","problem":32,"user":"4eae5fe4535d7eef30807325"},{"problem":32,"code":"(fn [x] (mapcat (fn [i] (list i i)) x))","user":"53e91473e4b036ad0777e495"},{"code":"(fn [l] (apply concat (map #(list % %) l)))","problem":32,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":32,"code":"#(mapcat (fn [a b] (vector a b)) % %)","user":"5ea970d1e4b00a66d4a951c6"},{"problem":32,"code":"#(reduce (fn [a x] (-> a (conj x) (conj x))) [] %)","user":"606a70a5e4b069485764ddf2"},{"problem":32,"code":"reduce (fn [c, i] (conj c i i)) []","user":"53d5e45ae4b0e771c302544e"},{"code":"(fn dup [s]\n  (if(empty? s) '()\n    (concat (list (first s) (first s)) (dup (rest s)))))","problem":32,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn [x]\n  (reduce #(concat %1 (repeat 2 %2)) '() x))","problem":32,"user":"4f8aa2f9e4b02e764a0a516f"},{"problem":32,"code":"(fn problem-32 [a-seq]\n  (let [helper (fn [a-seq res]\n                 (cond\n                  (empty? a-seq) res\n                  :else (recur \n                         (rest a-seq) \n                         (conj res (first a-seq) (first a-seq)))))]\n    (helper a-seq [])))","user":"51d26b0ae4b0d13b04db0d97"},{"problem":32,"code":"(fn [x] (sort(apply concat(#(repeat 2 %) x))))","user":"5d1b59abe4b02ea6f0fb697e"},{"problem":32,"code":"(fn [s]\n  (apply concat (map list s s)))","user":"5e856736e4b09a7a73c8bbd2"},{"problem":32,"code":"(fn  [arg1]\n      (mapcat list arg1 arg1))","user":"5cb6256ce4b026601754b947"},{"code":"(fn [coll] (mapcat #(vector %1 %2) coll coll))","problem":32,"user":"4eb955da535dfed6da9c6d50"},{"code":"(fn dupdup\n    ([single_list]\n      (cond\n        (empty? single_list) '()\n        :else\n        (\n          (fn duponce [item target]\n            (cons item (cons item target))          \n          )\n          (first single_list) (dupdup (rest single_list))\n        )\n      )\n    )\n  )","problem":32,"user":"502be4fae4b08f5602f232eb"},{"code":"mapcat #(vec [% %])","problem":32,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn duplicate [x] (if (empty? x) [] (concat (list (first x)) (list (first x)) (duplicate (rest x)))))","problem":32,"user":"52e17e66e4b09f7907dd1423"},{"problem":32,"code":"(fn dup\n  ([lst] (reverse (dup lst ())))\n  \n   ([lst reslst]\n   (if (empty? lst)\n     reslst\n     ( dup (rest lst) (cons (first lst) (cons (first lst) reslst)) )\n     )\n   )\n )","user":"550fd845e4b06e50f9beb17c"},{"problem":32,"code":"(fn dup [l]\n  (if (= (count l) 1)\n    (concat l l)\n    (concat (list (first l) (first l)) (dup (rest l)))\n  )\n)","user":"600777a3e4b074f607df6667"},{"code":"#(for [x % y (range 2)] x)","problem":32,"user":"51e3cf8ee4b0efabf93c02a3"},{"problem":32,"code":"#(reduce (fn [memo elem] (concat memo (repeat 2 elem))) '() %)","user":"58bbcbc8e4b0888cdc949d00"},{"problem":32,"code":"(fn dup [x] (apply concat (for [v  x] [v v])))","user":"55f04526e4b06e875b46ce20"},{"problem":32,"code":"(fn [s]\n    (apply concat (map #(repeat 2 %) s)))","user":"5686640ae4b0dcc4269f4050"},{"problem":32,"code":"(fn dup\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (dup (rest lst))))))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [l] \n  (loop [l1 l\n         res '()]\n    (if (nil? (first l1)) res\n      (recur (rest l1) (concat res [(first l1) (first l1)])))))","problem":32,"user":"533ee560e4b085b17e897d98"},{"code":"(fn rep [x] (if (empty? x) '() (concat (list (first x) (first x)) (rep (rest x)))))","problem":32,"user":"525cc137e4b0cb4875a45d46"},{"problem":32,"code":"(fn[x] (reduce #(conj (conj %1 %2) %2) '()  (reverse x )))","user":"54651ef5e4b01be26fd746d5"},{"problem":32,"code":"(fn [coll]\n  (sort (into coll coll)))","user":"5ec91154e4b08d0ec38692ed"},{"code":"(fn duplicate-items [s]\n  (when (seq s)\n    (concat (list (first s) (first s)) (duplicate-items (rest s)))))","problem":32,"user":"5310e7aee4b08068f379ecdc"},{"problem":32,"code":"(fn [x]\n  (reduce #(conj %1 %2 %2)\n          []\n          x)\n  )","user":"55fd0d19e4b0f488688e067a"},{"problem":32,"code":"#(loop [lst %\n        ret '()]\n   (if (empty? lst)\n     (reverse ret)\n     (recur (rest lst)\n            (conj ret (first lst) (first lst)))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":32,"code":"reduce (fn [acc v] (concat acc (repeat 2 v))) []","user":"5e6cfc25e4b04a83ad7cd28e"},{"code":"(fn [x] (reduce into (map #(vector % %) x)))","problem":32,"user":"4f2d5f5de4b0d6649770a05a"},{"code":";#(sort (concat % %)) ;fullösning\r\n\r\n;(fn [xs]\r\n;  (loop [xs xs\r\n;         nyxs '()]\r\n;    (if (empty? xs)\r\n;      (reverse nyxs)\r\n;      (recur (rest xs) (conj nyxs (first xs) (first xs))))))\r\n\r\n#(interleave % %)","problem":32,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":32,"code":"(fn dup [x]\r\n  (if\r\n    (empty? x)\r\n    '()\r\n    (cons (first x) (cons (first x) (dup (rest x))))))","user":"55244734e4b0882d96d091bf"},{"problem":32,"code":"(fn[l] (mapcat (partial repeat 2) l))","user":"5bb33124e4b0a20761a2351c"},{"problem":32,"code":"( fn [xs] (mapcat #( repeat 2 %1) xs))","user":"53d63e6ce4b0e771c3025454"},{"problem":32,"code":"(fn [c] (reduce (fn [coll e] (conj coll e e)) [] c))","user":"5971a017e4b01722bebd4c75"},{"problem":32,"code":"(fn [x]\n  (loop [y x result []]\n    (if (empty? y) result\n      (recur (rest y) (conj (conj result (first y)) (first y))))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":32,"code":"(fn [mylist]\n  (reduce (fn [a b] (conj a b b)) '[] mylist))","user":"553a74ede4b09218d5f44ff7"},{"code":"(fn d [s] (when-let [f (first s)] (lazy-cat [f f] (d (rest s)))))","problem":32,"user":"4faa8de0e4b081705acca1f8"},{"code":"(fn dupeseq [sequ]\n    (apply concat (for [a sequ] [a a])))","problem":32,"user":"50057f23e4b0678c553fc466"},{"problem":32,"code":"#(interleave % %)\n\n;(seq (reduce (fn [acc item]\n; (-> acc (conj item) (conj item) )\n; ))","user":"592c2f3ee4b072a2710fcf53"},{"problem":32,"code":"reduce (fn [m x] (-> m (conj x) (conj x))) []","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":32,"code":"(fn [list] ( apply concat  (for [x list]\n                                (repeat 2 x)\n                                )) )","user":"5ff99e57e4b06df49cee14b0"},{"problem":32,"code":"#(reduce concat (map (fn [s] (take 2 (repeat s))) %))","user":"58617a1fe4b0f14aab7c87f0"},{"code":"(fn dupl [xs]\n  (if (empty? xs)\n    '()\n    (conj (dupl (rest xs)) (first xs) (first xs))))","problem":32,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":32,"code":"(fn dup [[x & xs]]\n  (if (empty? xs)\n    [x x]\n    (concat [x x] (dup xs))))","user":"55eb1410e4b0121d4835fdb8"},{"problem":32,"code":"(fn duplicate [lst]\n  \"Duplicate elements of  a list\"\n  (mapcat #(repeat 2 %) lst))","user":"5d614059e4b0c9e5857d500e"},{"problem":32,"code":"#(reverse ( reduce (fn [a b] (conj (conj a b) b)) () %))","user":"56747b46e4b05957ce8c613b"},{"code":"(fn [lst] (reverse (reduce #(cons %2 (cons %2 %1)) '() lst)))","problem":32,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn philm [x] (if (empty? x) ()\n                     (conj (philm (rest x)) (first x) (first x))))","problem":32,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":32,"code":"(fn dupeSeq [s] (if (empty? s) nil (concat (list (first s) (first s)) (dupeSeq (rest s)))))","user":"573c813be4b0cd1946bd10c5"},{"problem":32,"code":"(fn duplicator [sq]\n  (reduce\n    (fn [f s]\n      (concat f (list s s)))\n    '() sq))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"(fn duplicate [s] \n  (apply concat (map #(list %1 %1) s)))","problem":32,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":32,"code":"(fn [xs] (reduce (fn [xs, x] (conj (conj xs x) x)) [] xs))","user":"57006957e4b08d47c97781c8"},{"problem":32,"code":"(fn [coll]\n  (reverse \n   (reduce \n    #(cons %2 (cons %2 %1))\n     '() coll)))","user":"568b781be4b0dcc4269f40a5"},{"problem":32,"code":"(fn [s] (reduce #(concat %1 [%2 %2]) '() s))","user":"5d0e311de4b0cc9c91588251"},{"problem":32,"code":"(fn dup [sq] (mapcat #(list %1 %1) sq))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [col]\n  (mapcat #(vec [% %]) col))","problem":32,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":32,"code":"(fn\n  ([sq]\n   (loop [lst sq acc []]\n     (if (empty? lst)\n       acc\n       (recur (rest lst) (into acc [(first lst) (first lst)]))))))","user":"580fb8e0e4b0f478707a05bc"},{"code":"(partial mapcat (partial repeat 2))","problem":32,"user":"4e5b192e535d8a8b8723a2b3"},{"code":"(fn [coll]\n  \t(apply concat (map #(list % %) coll)))","problem":32,"user":"4e6a63fd535d8ccf87e9feda"},{"problem":32,"code":"(fn dup[lis]\n  (if (empty? lis) nil\n    (cons (first lis)\n       (cons (first lis)\n          (dup (rest lis))))))","user":"5627444fe4b00e49c7cb47cd"},{"code":"(fn [lst] (reduce (fn [result n] (conj result n n)) [] (vec lst)))","problem":32,"user":"5256a1d4e4b0541d1855ba29"},{"code":"reduce (fn [acc x] (concat acc [x x])) []","problem":32,"user":"5216933be4b000d124d989cf"},{"problem":32,"code":"#(interleave % %)\n;reduce #(conj %1 %2 %2) []","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":32,"code":"(fn [i] (interleave i i))","user":"51319a53e4b06942423563c8"},{"problem":32,"code":"(fn [s]\n   (loop [result []\n          remainder s]\n     (if (empty? remainder)\n       result\n       (recur (conj (conj result (first remainder)) (first remainder)) (rest remainder)))))","user":"572b73d0e4b0cd1946bd0f3a"},{"problem":32,"code":"(fn [c] (mapcat (fn [s] (list s s)) c))","user":"5d0af5cbe4b0cc9c91588228"},{"problem":32,"code":"(fn [xs] (reduce\n          (fn [acc x] (conj acc x x))\n          []\n          xs))","user":"59cc8d8de4b0a024fb6ae5d5"},{"code":"(fn [x] (for [y (range 0 (* 2 (count x))) :let [z (nth x (quot y 2))]] z))","problem":32,"user":"4eb0175b535d7eef30807336"},{"problem":32,"code":"(fn duplicator [xs]\n  (reduce (fn [acc x]\n            (concat acc [x x]))\n          []\n          xs))","user":"5db0d470e4b0f8c104ccfc9e"},{"code":"#(let [my-flatten (fn my-flatten [v] \n                    (if (empty? v)\n                        []\n                        (cons (first (first v)) \n                              (cons (second (first v)) \n                                    (my-flatten (rest v))))))] \n  (my-flatten (for [x %] [x x])))","problem":32,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn [s]\n  (reverse (reduce #(conj %1 %2 %2) '() s)))","problem":32,"user":"511c44fde4b00c2a1fa7ff77"},{"code":"(fn dupl[v]\n  (reduce  #(conj (conj %1 %2) %2) [] v\n))","problem":32,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn [S]\n  (apply concat (for [i S] \n    (repeat 2 i))))","problem":32,"user":"4fda016ae4b05e33b9224f42"},{"code":"(fn [x]\n  (apply concat (map (fn [r] (list r r)) x)))","problem":32,"user":"51effd77e4b0249c592fbdf3"},{"code":"#(loop [xs % ret '()]\n   (if-not (first xs)\n     (reverse ret)\n     (let [x (first xs)]\n       (recur (rest xs) (cons x (cons x ret))))))","problem":32,"user":"508e2584e4b0f17d83ea26c9"},{"code":"(fn [seq] (interleave seq seq))","problem":32,"user":"5003bb77e4b0678c553fc442"},{"problem":32,"code":"(partial reduce (fn [acc el] (conj (conj acc el) el)) [])","user":"5ab5f60be4b073f177442643"},{"problem":32,"code":"(fn [x] \n  (reverse\n   (reduce #(do (conj (conj %1 %2) %2)) () x)))","user":"55e856bae4b0121d4835fd8d"},{"code":"(fn [s] (mapcat #(do [% %]) s))","problem":32,"user":"4ed7e37a535d10e5ff6f52f4"},{"problem":32,"code":"reduce (fn [acc x] (concat acc (list x x))) '()","user":"598a4ff7e4b02b9968b84cda"},{"problem":32,"code":"(fn dupseq [x]\n  (loop [coll x\n         result '()]\n    (if (empty? coll)\n      (reverse result)\n      (recur (rest coll) (conj result (first coll) (first coll))))))","user":"55a12cb1e4b0acc240e3150d"},{"problem":32,"code":"mapcat (fn [value] [value value])","user":"5c0eb93ce4b01240ff567146"},{"problem":32,"code":"(fn [s]\n  (reverse (reduce (fn [a x] (conj a x x)) '() s)))","user":"5c0e58bfe4b01240ff567140"},{"code":"(fn [x] (loop [args x result []] (if (seq args) (recur (rest args) (conj (conj result (first args)) (first args))) result)))","problem":32,"user":"52d6590ee4b09f7907dd1352"},{"code":"(fn [x]\n    (loop [todo x\n           res []]\n      (if (empty? todo)\n        res\n        (let [f (first todo)\n              r (next todo)]\n          (recur r (conj res f f))))))","problem":32,"user":"5165a235e4b079ad97ec44ac"},{"problem":32,"code":"(fn [xs] (mapcat #(identity [% %]) xs))","user":"5e486cb0e4b043cd24807a3e"},{"problem":32,"code":"(fn [tl]\n  (loop [res [] ll tl]\n    (if (empty? ll)\n      res\n      (recur (conj res (first ll) (first ll)) (next ll))\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":32,"code":"(partial mapcat \n         (partial repeat 2))","user":"5af8221ce4b0cc2b61a3bccd"},{"code":"(fn[s](reverse(reduce #(cons%2(cons%2%1))'()s)))","problem":32,"user":"5017eface4b02f523d7cc5e7"},{"code":"(fn [seq]\n   (reduce concat (map #(repeat 2 %) seq)))","problem":32,"user":"4eb7b049535d7eef30807377"},{"code":"(fn [xs]\n  (reduce concat (map #(list % %) xs)))","problem":32,"user":"51834acde4b028ec5fd2f29a"},{"problem":32,"code":"(fn f [c] (if (empty? c) '() (cons (first c) (lazy-seq (cons (first c) (f (rest c)))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":32,"code":"reduce (fn [s v] (conj (conj s v) v)) []","user":"55f1d5dfe4b06e875b46ce38"},{"problem":32,"code":"(fn [coll]\n   (reduce (fn [acc item]\n             (conj acc item item))\n           [] coll))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn [xs] (apply concat (map #(repeat 2 %) xs)))","problem":32,"user":"5208495ce4b0c1501ba9e6da"},{"code":"mapcat (fn [element] (repeat 2 element))","problem":32,"user":"4f4662f9e4b0d56e7bb92b9d"},{"problem":32,"code":"(fn [l]\n  (loop [lst l ret []]\n    (cond\n      (empty? lst) ret\n      :else (let [head (first lst)]\n              (recur (rest lst) (conj ret head head))))))","user":"5fb8fe30e4b03f550f448223"},{"problem":32,"code":"(fn dupseq [elms]\n  \"returns sequence with each element duplicated\"\n  (apply concat (map #(list % %) elms))\n  )","user":"5d828b7ee4b0915913b1d382"},{"problem":32,"code":"(fn [s] (reduce (fn [a, b] (concat a [b b])) [] s))","user":"5675f2f4e4b05957ce8c6153"},{"code":"#(for [x %, y [x x]] y)","problem":32,"user":"4db1f7d223724b71670a9c07"},{"code":"(fn [t] (->> t (reduce (fn [x y] (conj x y y)) '()) reverse))","problem":32,"user":"5162757ee4b03cfa3774b3fe"},{"problem":32,"code":"(fn dup [x]\n  (reduce #(concat %1 (list %2 %2)) '() x))","user":"564066dee4b08d4f616f5ee2"},{"problem":32,"code":"(fn dupes [[x & args]] (if (empty? args) (list x x) (cons x (cons x (dupes args)))))","user":"52d74c2de4b09f7907dd1373"},{"code":"(fn [q] (interleave q q))","problem":32,"user":"532e0b20e4b019098a6f8b45"},{"problem":32,"code":"(fn [col]\n  (loop [res '() lst col]\n    (if (empty? lst)\n      res\n      (let [[x & remaining] lst]\n        (recur (concat res (list x x)) remaining)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [s] (apply concat (map (fn [i] [i i]) s)))","problem":32,"user":"4f5694cae4b0a7574ea71827"},{"code":"(fn [s]\n  (apply concat (for [x s] (list x x))))","problem":32,"user":"506b18c8e4b0a2a5463de383"},{"problem":32,"code":"(fn [src-list] (mapcat identity (map #(list %1 %1) src-list)))\n\n\n\n\n;(loop [doubled-elements []\n;       elements-left %]\n;   (if (empty? elements-left)\n;   \tdoubled-elements\n;    (let [[element & remaining] elements-left]\n;      doubled-elements (concat doubled-elements [element element])\n;      (recur doubled-elements remaining))))","user":"52dc55e2e4b09f7907dd13cd"},{"problem":32,"code":"(comp\n  reverse\n  (partial (fn [accum [c & cs]]\n             (if (empty? cs)\n               (cons c (cons c accum))\n               (recur (cons c (cons c accum)) cs)))\n           ()))","user":"573d27b4e4b05c31a32c080f"},{"code":"(fn dup [seq]\n  (if (empty? seq) '()\n      (let [item (first seq)\n            subsoln (dup (rest seq))]\n        (cons item (cons item subsoln)))))","problem":32,"user":"4f70afb8e4b07046d9f4effb"},{"problem":32,"code":"(fn [coll]\n                 (->>\n                   (repeat 2 coll)\n                   (apply interleave)\n                   ))","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [input] (interleave input input))","problem":32,"user":"4dddf817535d08e6dec9fdd3"},{"code":"(fn ! [a-seq]\n  (if (empty? a-seq)\n    '()\n    (conj (! (rest a-seq)) (first a-seq) (first a-seq))))","problem":32,"user":"5235493ee4b05e80434a5064"},{"code":"(fn [x] (loop [s (map #(repeat 2 %) x) r '()]\n             (if (empty? s)\n               r\n               (recur (rest s) (concat r (first s))))))","problem":32,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":32,"code":"(fn [l] (reduce (fn [l x] (concat l (list x x))) '() l))","user":"5bf313e8e4b0a6d31fed2188"},{"code":"#(mapcat (fn rep [a] (repeat 2 a)) %)","problem":32,"user":"5119ef37e4b06c8af0111817"},{"code":"#(reduce concat (map (fn [x] [x x]) %))","problem":32,"user":"4e2edb0e535deb9a81d77f0d"},{"code":"(fn dup[[x & xs]] (if (empty? xs) [x x] (cons x (cons x (dup xs)))))","problem":32,"user":"52f10094e4b05e3f0be25ee8"},{"problem":32,"code":"(fn dupl [seq]\n    (if (empty? seq) \n      '()\n      (cons (first seq) (cons (first seq) (dupl (rest seq))))))","user":"55e3e7a8e4b050e68259b44a"},{"code":"(fn [x]\n  (let [[k & m] x]\n    (if (coll? k)\n      (sort (into (into [] (vec (repeat 2 k))) (vec (repeat 2 (into [] (flatten m))))))\n      (sort (flatten (vector (repeat 2 k) (repeat 2 m)))))))","problem":32,"user":"531016d0e4b08068f379ecd1"},{"problem":32,"code":"(fn duplicate [data]\n  (loop [[head & tail :as data] data\n                         acc []]\n    (if-not (empty? data)\n      (recur tail (conj (conj acc head)  head))\n      acc\n    )\n  )\n)","user":"55c461d3e4b0e31453f64999"},{"code":"(fn [x]\n  (loop [l x\n        s []\n        y (first l)]\n      (if (seq l)\n        (recur (rest l) (conj s y y) (first (rest l)))\n        s)))","problem":32,"user":"4fc93728e4b0ee37620e1844"},{"code":";(fn f [[x & y]] \n;  (if (nil? y) \n;    [x x] \n;    (into [x x] (f y))))\n\n#(interleave % %)","problem":32,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":32,"code":"(fn [s]\n  (loop [ss s r '()]\n    (if (not-empty ss)\n      (recur (rest ss) (conj r (first ss) (first ss)))\n      (reverse r))))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":32,"code":"(fn [se] (loop [accum (vector)\n                se se]\n           (if (empty? se)\n             accum\n             (let [q (first se)]\n               (recur (conj accum q q) (rest se))))))","user":"554d386ee4b0a04f792995b8"},{"problem":32,"code":"(fn dup [li]\n  (cond (empty? li) '()\n    :else \n    (let [el (first li)]\n      (cons el (cons el (dup (rest li)))))))","user":"5786c182e4b0ebec4cfb74fd"},{"code":"(fn [coll] (mapcat #(vector (identity %) (identity %)) coll))","problem":32,"user":"4e3bcca9535deb9a81d77f54"},{"problem":32,"code":"(fn [ns] (apply concat (map #(list % %) ns)))","user":"553dd883e4b0a04f792994e6"},{"problem":32,"code":"(fn [xs]\n  (loop [result [] xs xs]\n    (if (empty? xs)\n      result\n      (recur\n       (concat result [(first xs) (first xs)])\n       (rest xs)))))","user":"54c8d4a8e4b045293a27f654"},{"problem":32,"code":"(fn f [x]\n   (let [e (first x)]\n     (if (= 1 (count x))\n       (conj '() e e)\n       (conj (f (rest x)) e e))))","user":"5cacc9e0e4b026601754b862"},{"problem":32,"code":"(fn [s] \n  (reduce\n  \t(fn [a c] (conj (conj a c) c))\n  \t[]\n  \ts))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"problem":32,"code":"(fn [a] (apply concat(map #(repeat 2 %) a)))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":32,"code":"(fn [x] (apply concat (map #(identity [% %]) x)))","user":"569d095fe4b0542e1f8d1470"},{"problem":32,"code":"(fn [a]\n  (reduce #(conj (conj %1 %2) %2) [] a))","user":"54159032e4b01498b1a719f5"},{"code":"#(loop [seq %\n         acc '()]\n    (if (empty? seq)\n      (reverse acc)\n      (let [next (first seq)]\n        (recur (rest seq) (cons next (cons next acc))))))","problem":32,"user":"533d2ea5e4b085b17e897d7a"},{"code":"(fn dbl-seq [s] (if (empty? s) nil (lazy-seq (cons (first s) (cons (first s) (dbl-seq (next s)))))))","problem":32,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":32,"code":"(fn [l] (reduce #(concat %1 [%2 %2]) [] l))","user":"5367bc60e4b0243289761e81"},{"problem":32,"code":"(fn [arg]\n  (loop [col arg\n         out '()]\n    \t(if (= (count col) 0)\n          out\n          (recur (pop col) (conj (conj out (last col)) (last col)) )\n         \n         )\n    \n    )\n  \n  )","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":32,"code":"reduce (fn [col e] (conj col e e)) []","user":"55e59b67e4b050e68259b46f"},{"problem":32,"code":"(fn [col] \n    (reduce \n      #(conj %1 %2 %2)\n      [] col))","user":"574c5e18e4b02ea11479921b"},{"problem":32,"code":"(fn [listy]\n  (reduce concat (map #(take 2 (repeat %)) listy)))","user":"5380a27ae4b06839e8705ec4"},{"problem":32,"code":"#(reduce (fn [ls a]\n          (conj ls a a))\n        []\n        %)","user":"605f5c69e4b03746e80ebf5e"},{"code":"#(let [f (fn [xs self]\n  (if(empty? xs) '()\n    (conj (self(rest xs)self) (first xs) (first xs))))]\n  (f % f))","problem":32,"user":"4eaf08ce535d7eef3080732d"},{"problem":32,"code":"(fn dup [x]\n   (when-not (empty? x)\n     (->> (rest x)\n           (dup)\n           (cons (first x))\n           (cons (first x)))))","user":"5576d3c7e4b05c286339e074"},{"problem":32,"code":"(fn [coll]\n  (loop [[x & xs] coll acc '()]\n    (if xs\n      (recur xs (conj acc x x))\n      (reverse (conj acc x x)))))","user":"561cb6cfe4b064ca9f4b169e"},{"problem":32,"code":"(fn [x]\n   (mapcat list x x))","user":"59385840e4b02506e01a29c9"},{"code":"#(apply concat (map (fn [a] (list a a)) %))","problem":32,"user":"537e745ae4b06839e8705ea6"},{"problem":32,"code":"(fn mef [[x & xs]] (if (empty? xs) (list x x) (concat (list x x) (mef xs))))","user":"563747e9e4b0bfe05bf117d2"},{"problem":32,"code":"(fn [in]\n  (loop [remaining (seq in)\n         acc (vector)\n         fst (first remaining)]\n    (if (empty? remaining)\n      acc\n      (recur (rest remaining) (into acc [fst fst]) (second remaining)))))","user":"51a7bf26e4b0da5f497bde8c"},{"code":"(fn dup [s] (sort (concat s s)))","problem":32,"user":"4eb80264535d7eef3080737a"},{"problem":32,"code":"(fn [coll]\n    (mapcat list coll coll)\n    )","user":"500d3160e4b05f7c30cfa6a1"},{"problem":32,"code":"reduce #(concat % [%2] [%2]) '()","user":"5cf5775ce4b087f62be35a98"},{"problem":32,"code":"#(reduce (fn [acc v](conj acc v v) ) [] %)","user":"5b6473eee4b0c6492753e73f"},{"problem":32,"code":"(fn [in] \n  (loop [s in res '()]\n    (if (empty? s)\n      (reverse res)\n      (recur (rest s) (conj res (first s) (first s))))))","user":"5600591de4b04bb52996e166"},{"problem":32,"code":"(fn [x]\n   ( mapcat #(conj % (first %)) (partition-all 1 x)))","user":"608ee2f7e4b03bd49d9f36c1"},{"problem":32,"code":"(fn [a] (mapcat #(conj () % %) a))","user":"597fa3fbe4b021a7a535fdbf"},{"code":"#((fn duplicate [result remainder] \n    (if (empty? remainder)\n        result\n        (recur (conj result \n          (first remainder) (first remainder))\n                (rest remainder)))) [] %)","problem":32,"user":"4e4870d1535dc968683fc4bc"},{"problem":32,"code":"(fn [xs]\n  (loop [xss xs\n         acc []]\n    (if (empty? xss)\n      acc\n      (let [x (first xss)]\n       (recur\n        (rest xss)\n        (conj acc x x))))))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"(comp reverse (fn [l] (reduce #(cons %2 (cons %2 %1)) '() l)))","problem":32,"user":"515ba2c2e4b0a102a3e52639"},{"code":"reduce #(concat % [%2 %2]) []","problem":32,"user":"4e2b1d48535deb9a81d77f03"},{"problem":32,"code":"(fn [x]\n  (loop [v x\n         r '()]\n    (if (empty? v)\n      (reverse r)\n      (recur (rest v) (cons (first v) (cons (first v) r)))\n    )\n  )\n)","user":"55252392e4b0882d96d091cc"},{"problem":32,"code":"(fn [s] (reduce (fn [x y] (concat x [y y])) [] s))","user":"54f97e22e4b01ecee9d8883a"},{"code":"(fn [input]\n  (loop [s input a '()]\n    (if (empty? s)\n      (reverse a)\n      (recur (rest s) (cons (first s) (cons (first s) a))))))","problem":32,"user":"5341b141e4b00652c8746ecf"},{"problem":32,"code":"(fn [y] ((fn [x] (mapcat #(repeat 2 %) x)) y))","user":"570eeb66e4b0b0fb43fd06fa"},{"problem":32,"code":"(fn [args] (reduce #(conj %1 %2 %2) [] args))","user":"551535cee4b055c2f668d4df"},{"code":"(fn [l] (apply concat (#(for [x %] [x x]) l)))","problem":32,"user":"538243f3e4b06839e8705ed1"},{"code":"(fn [xs]\n  (reverse (reduce #(conj (conj % %2) %2) '() xs)))","problem":32,"user":"4fb1325de4b081705acca276"},{"code":"(fn [coll]\n  (loop [old-lst coll\n         dup-lst '()]\n    (if (empty? old-lst)\n        (reverse dup-lst)\n        (recur (rest old-lst)\n                (conj dup-lst\n                  (first old-lst)\n                  (first old-lst))))))","problem":32,"user":"4f035bfd535dcb61093f6a8f"},{"problem":32,"code":"(fn dup [coll]\n  (mapcat identity(map #(repeat 2 %) coll)))","user":"5c411df3e4b08cd430848ebf"},{"code":"(fn [l] (loop [ist l result []] (if (empty? ist) result (recur (rest ist) (conj result (first ist) (first ist))))))","problem":32,"user":"5314318ee4b08068f379ed13"},{"problem":32,"code":"reduce (fn [acc item]\n             (concat acc (cons item (list item)))) '()","user":"53214efbe4b09d4e7a9b54b2"},{"problem":32,"code":"(fn [x]\n  (apply concat (map #(repeat 2 %) x) ))","user":"56990b68e4b0542e1f8d143a"},{"problem":32,"code":"(fn f [x] \n  (if (empty? x) \n    '()\n    \n    (concat \n      (list (first x) (first x))\n      (f (rest x))\n    )\n  )\n  )","user":"5ab1665de4b073f1774425c0"},{"problem":32,"code":"#((comp sort into) % %)","user":"53571732e4b04ce2eb3ed275"},{"problem":32,"code":"(fn [lis] (reverse (reduce #(cons %2 (cons %2 %1)) [] lis)))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn [col] (apply concat (map #(repeat 2 %) col)))","problem":32,"user":"517e5a91e4b0329b27fa9f55"},{"code":"(fn d [x]\n  (if (= (count x) 1) \n      (conj x (first x))\n      (conj (d (rest x)) (first x) (first x))\n  )\n)","problem":32,"user":"4e39c710535deb9a81d77f45"},{"code":"(fn ft\n  ([x] (ft '() (reverse x)))\n  ([col x]\n     (if (empty? x) col\n         (recur (conj col (first x) (first x)) (rest x)) )\n     )\n  )","problem":32,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":32,"code":"(fn dup\n   ([xs] (dup xs []))\n   ([[x & xs] ret]\n    (if (not x)\n      ret\n      (recur xs (conj ret x x)))))","user":"554b7056e4b0a04f79299583"},{"code":"#(reduce (fn[x, y] (conj x y y)) [] %1)","problem":32,"user":"50054b5ce4b0678c553fc45f"},{"code":"reduce (fn [acc ele]\n         (conj acc ele ele)) []","problem":32,"user":"53862316e4b06839e8705f0e"},{"problem":32,"code":"(fn [coll]\n   (mapcat #(conj [] % %) coll)\n)","user":"53ef3adfe4b0742d9025b0c9"},{"problem":32,"code":"(fn [xs] (reverse  (reduce #(conj %1 %2 %2) '() xs)))","user":"548cd813e4b0e286459a1211"},{"code":"#(letfn [(worker [x n]\r\n           (if (empty? x)\r\n             n\r\n             (recur (rest x) (conj (conj n (first x)) (first x)))))]\r\n   (worker % []))","problem":32,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [a]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() a)\n   ))","problem":32,"user":"4ddb696b535d02782fcbe9fa"},{"problem":32,"code":"(fn [s] (sort (concat s s)))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":32,"code":"(fn [s]\n   (reduce #(concat %1 [%2 %2]) () s))","user":"5b2689e3e4b063e2438bcc33"},{"problem":32,"code":"(fn [arr] (mapcat (fn [x] [x x]) arr))","user":"59636b43e4b066ee0a44b0c4"},{"problem":32,"code":"(fn [z] (lazy-seq (loop [x 0 q []] (if(< x (count z)) (recur (inc x) (conj q (get z x) (get z x))) q))))","user":"561be724e4b064ca9f4b168c"},{"code":"(fn [xs] (mapcat (fn [x] (list x x)) xs))","problem":32,"user":"516385cee4b055933a9ca02d"},{"code":"(fn dup [x]\n  (if (nil? x)\n    '()\n    (concat (cons (first x) (cons (first x) '())) (dup (next x)))))","problem":32,"user":"522ff396e4b032bbe3424172"},{"problem":32,"code":"(fn [input]\n  (loop [[first & rest] input\n        new (empty input)]\n    (if (nil? first)\n      new\n      (recur rest (conj new first first)))))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn [thing] \n   (reduce (fn [blah hah] (concat blah (list hah hah))) '() thing))","problem":32,"user":"4fbd6210e4b081705acca303"},{"problem":32,"code":"(fn [a] (mapcat identity (map #(repeat 2 %) a)))","user":"5b857411e4b047b03b2037ce"},{"problem":32,"code":";mapcat #(vector % %)\n\n#(interleave % %)","user":"53abed65e4b047364c044455"},{"code":"(fn [l] (reduce #(conj %1 %2 %2) [] l))","problem":32,"user":"4dbf0cd2535d020aff1edf72"},{"problem":32,"code":"#(seq (reduce (fn [c i] (conj (conj c i) i)) [] %))","user":"560c2e7ce4b05f002753df2b"},{"code":"(fn double [list]\n     (reduce concat (map (fn [x] (concat [x] [x])) list)))","problem":32,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":32,"code":"(fn [x](mapcat #(list % %) x))","user":"566a3a26e4b0a866af689699"},{"problem":32,"code":"(fn [x] (reverse (reduce (fn [y, z] (conj (conj y z) z) ) `() x )))","user":"54b331dbe4b09f271ff37d37"},{"problem":32,"code":"(fn [x]\n  (loop [lst x\n         result ()]\n    (if (empty? lst)\n        (reverse result)\n        (recur (rest lst)\n               (cons (first lst)\n                     (cons (first lst) result))))))","user":"57210e8ee4b0c5bde472c0a8"},{"problem":32,"code":"(partial reduce (fn [xs x] (conj (conj xs x) x)) [])","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn [s] \n    (reduce \n      (fn [a b] (conj (conj a b) b)) [] s\n))","problem":32,"user":"4f31519ae4b0d6649770a086"},{"problem":32,"code":"(fn [s] \n        (apply concat (map #(vector % %) s))\n         )","user":"5f58db95e4b0a0bc16850a9a"},{"code":"#(loop [input % result ()]\n    (if (empty? input)\n      (reverse result)\n      (recur (rest input) (cons (first input) (cons (first input) result)))))","problem":32,"user":"4e6a368e535d8ccf87e9feae"},{"code":"(fn duplicate2 [x] (if (< 0 (count x))\n                       (conj (duplicate2 (rest x)) (first x) (first x))\n                          '()))","problem":32,"user":"5296aa9be4b02ebb4ef75034"},{"problem":32,"code":"(fn [x]\n  (apply concat (map vector x x)))","user":"53fb4e9ae4b0de5c4184857e"},{"code":"(fn dupl\n  [coll]\n  (mapcat (fn [a] (list a a)) coll)\n  )","problem":32,"user":"5228f870e4b0186687e23a98"},{"code":"#(reduce concat [] (map (fn [x] [x x]) %))","problem":32,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"#(\n  (fn dupl [source dest] \n    (if-let [f (first source)] (dupl (next source) (conj dest f f) ) dest)\n  ) % [])","problem":32,"user":"52b9c5e8e4b07a9af57922c2"},{"code":"#(->> % (mapcat (fn [x] [x x])))","problem":32,"user":"51095588e4b0e34872b3efa5"},{"code":"#(->> % (concat %) sort)","problem":32,"user":"4e5e391c535d8a8b8723a2d0"},{"problem":32,"code":"(letfn [(f [acc xs]\n           (if (empty? xs) acc\n             (recur (conj acc (first xs) (first xs)) (rest xs))))]\n  (partial f []))","user":"554b9c3ee4b0a04f79299594"},{"code":"#(sort (take (* (count %) 2) (cycle  %)))","problem":32,"user":"4ef2eb4d535dced4c769f226"},{"code":"(fn [z] (reduce concat [] (for [x z] [x x])))","problem":32,"user":"5099283ce4b0cae2931060af"},{"problem":32,"code":"(fn\n [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","user":"603e8e3ae4b0d5df2af22316"},{"problem":32,"code":"(fn [coll]\n  (if (empty? coll)\n    '()\n    (loop [sq coll acc []]\n      (if (seq sq)\n        (recur (rest sq) (conj acc (first sq) (first sq)))\n        (seq acc)))))","user":"59a31c55e4b066c664927d34"},{"problem":32,"code":"(fn dup-list [ls]\n  (mapcat (fn [it]\n            [it it])\n          ls))","user":"554bc026e4b0a04f79299597"},{"problem":32,"code":"(fn duplicate [others]\n   (reduce concat (map #(take 2 (repeat %)) others)))","user":"53ac1992e4b047364c04445a"},{"code":"#(mapcat (fn [y] [y y]) %)","problem":32,"user":"507ef25ce4b0f753b6f9788e"},{"problem":32,"code":"(fn [%] (mapcat #(repeat 2 %) %))","user":"54802bd1e4b0e286459a1157"},{"code":"(fn duplicate [col]  ;Duplicate a Sequence\n  (reduce \n    #(conj %1 %2 %2)\n    []\n    col))","problem":32,"user":"526ee63de4b03e8d9a4a733f"},{"problem":32,"code":"(fn [a] (apply concat (map vector a a)))","user":"546b833ce4b00cfc9eacc16b"},{"code":"#(mapcat (fn[a] (conj nil a  a) ) %)","problem":32,"user":"5360e12ce4b0243289761e3a"},{"code":"(fn[x](reduce (fn[a n] (conj a n n)) [] x))","problem":32,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [s] (reduce (fn [acc x] (conj acc x x)) [] s))","problem":32,"user":"531ba143e4b08068f379ed91"},{"code":"(fn [a] (reduce #(concat %1 (list %2 %2)) () a))","problem":32,"user":"50921f9ae4b09a7d0b586de1"},{"code":"(fn [l] (reduce concat (map #(list % %) l)))","problem":32,"user":"4dbdc898535d020aff1edf4a"},{"code":"(fn [x] (reduce #(concat %1 %2) (map #(repeat 2 %) x)))","problem":32,"user":"514a13cee4b0829bd132edb4"},{"problem":32,"code":"#(reduce\n  (fn [acc value]\n    (conj acc value value))\n  []\n  %)","user":"5ffee617e4b074f607df6605"},{"problem":32,"code":"(fn duplicate [arg] (loop [x (first arg)\n                              rest-seq (rest arg)\n                              result '()]\n                        (if (nil? x) \n                          (reverse result)\n                          (recur (first rest-seq)(rest rest-seq)(conj result x x)))))","user":"5e790f6be4b085ba37836e01"},{"code":"(fn dup [the-list]\n\t(if (= 0 (count the-list))\n\t\t'()\n\t\t(cons (first the-list) (cons (first the-list) (dup (rest the-list))))\n\t)\n)","problem":32,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":32,"code":"reduce (fn [c i] (conj c i i)) []","user":"59c8ffe6e4b0a024fb6ae56c"},{"problem":32,"code":"(fn duplicate [coll]\n  (reduce #(conj %1 %2 %2) [] coll)\n  )","user":"5aada061e4b073f17744257a"},{"problem":32,"code":"(fn dup\n  [list]\n  (reduce #(conj %1 %2 %2) [] list))","user":"556be3dce4b09a3098a524f7"},{"problem":32,"code":"#(reduce \n   (fn [fin num]\n       (conj fin num num)\n   ) [] %\n)","user":"5ac92dc3e4b0e27600da77bf"},{"problem":32,"code":"(fn [y] (mapcat (fn [x] (vector x x)) y))","user":"59637028e4b066ee0a44b0ca"},{"problem":32,"code":"(fn [s] (reduce #(concat %1 (repeat 2 %2)) () s))","user":"54fdaeace4b07d26eda61d39"},{"code":"(fn dup [l]\n  (cond\n   (empty? l) '()\n   :else (cons (first l) (cons (first l) (dup (rest l)) ))\n   )\n  )","problem":32,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn [lst]\n  (mapcat (fn [x] [x x]) lst))","problem":32,"user":"4f032cb1535dcb61093f6a70"},{"code":"(fn doop [xs]\n  (if (empty? xs)\n    nil\n    (let [y (first xs)]\n      (conj (conj (doop (rest xs)) y) y))))","problem":32,"user":"52e41c22e4b09f7907dd144b"},{"code":"(fn [xs]\n  (mapcat #(repeat 2 %) xs))","problem":32,"user":"4ed6238d535d10e5ff6f52de"},{"code":"(fn [x] (mapcat #(list %1 %2) x x))","problem":32,"user":"4ec2f1d9535dcc7ae8597d4d"},{"problem":32,"code":"(fn [xs] (reduce concat (map #(list % %) xs)))","user":"54f90537e4b01ecee9d88833"},{"problem":32,"code":"(fn [r v]\n  (if (= (count v) 0)\n    (reverse r)\n    (recur (cons (first v) (cons (first v) r)) (rest v))))\n[]","user":"564dc062e4b0284900eef68c"},{"problem":32,"code":"(fn [input] (loop [in input out nil] (if (empty? in) (reverse out) (recur (rest in) (cons (first in) (cons (first in) out))))))","user":"5bd297fee4b0e9689409ee63"},{"problem":32,"code":"#(reduce (fn [prev,cur] (concat prev (list cur cur))) '() %)","user":"53f9fe41e4b0de5c41848575"},{"problem":32,"code":"(fn [arg] \n  (mapcat (fn [x] (list x x))\n        arg))","user":"57c7fa03e4b05aa3c4741d12"},{"problem":32,"code":"(fn [coll]\n  (loop [coll (reverse coll)\n         result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (cons (first coll) (cons (first coll) result))))))","user":"53eaa804e4b036ad0777e4ea"},{"code":"(fn [s] (loop [xs s a []]\n  (if (empty? xs)\n    a\n    (let [r (rest xs) x (first xs)]\n      (recur\n        r\n        (into a [x x]))))))","problem":32,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":32,"code":"#((fn [myseq]\n(loop [[n & numbers] myseq,\n       result []]\n\n  (let [result (conj result n n)]\n    (if (empty? numbers)\n      result   ; we're done\n      (recur numbers result))))) %)","user":"590f283de4b047aa04b19a35"},{"code":"(fn [xs] \n  (mapcat (fn [x] [x x]) xs))","problem":32,"user":"514677dce4b04ef915e3731a"},{"code":"(fn [s] (mapcat #(list %1 %2) s s))","problem":32,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":32,"code":"(partial mapcat (fn [n] [n n]))","user":"59279a89e4b072a2710fced3"},{"problem":32,"code":"(fn [c]\n  (mapcat #(list % %) c))","user":"5478c4fee4b0c51c1f4d72c0"},{"code":"(fn [x] (reduce concat (map (fn [y] (list y y)) x)))","problem":32,"user":"4e1e7f88535d04ed9115e808"},{"problem":32,"code":"(fn dup\n  [x]\n  (mapcat #(repeat 2 %) x))","user":"5ac741d6e4b0e27600da777d"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll\n         acc []]\n    (if (empty? c)\n      acc\n      (recur (rest c) (conj acc (first c) (first c))))))","user":"556a6137e4b09a3098a524e0"},{"code":"mapcat #(repeat 2 %1)","problem":32,"user":"50dade7be4b02e6ac9592c70"},{"code":"(fn [s]\n  (apply concat (for [i s]\n    [i i])))","problem":32,"user":"4f942227e4b0dcca54ed6cbe"},{"code":"#(loop [l % ans []]\n  (if (empty? l)\n    ans\n    (recur (rest l) (into ans (list (first l) (first l))))\n  )\n)","problem":32,"user":"51f09f3de4b0274c496158d7"},{"problem":32,"code":"(fn [coll] (interleave coll coll )  )","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":32,"code":"#(sort (apply concat (repeat 2 %)))","user":"57fe68e2e4b0d3187e9009ce"},{"code":"(fn [my-seq]\n   (reverse (reduce #(conj %1 %2 %2) '() my-seq)))","problem":32,"user":"4ede0511535d10e5ff6f5330"},{"problem":32,"code":"(fn dupl [x] (lazy-seq (when-let [s (seq x)] (cons (first s) (cons (first s) (dupl (rest s)))))))","user":"574ed2f7e4b02ea11479924a"},{"problem":32,"code":"(fn kek [x]\n  (if (empty? x) ()\n    (cons (first x) (cons (first x) (kek (rest x))))))","user":"5d132412e4b02c15ef0219a6"},{"code":"reduce (fn [result new-el] (conj result new-el new-el)) []","problem":32,"user":"5221c0cae4b0e6a83c8925e1"},{"problem":32,"code":"(fn [x] \n   (reduce concat\n           (map #(repeat 2 %) x)))","user":"55dfacb7e4b050e68259b3fc"},{"problem":32,"code":"(fn dup [s]\n  (when-let [i (first s)]\n    (concat [i i] (dup (rest s)))))","user":"5b61279ce4b0c6492753e70e"},{"code":"(fn duplicator [seq1]\n  (apply concat (for [x seq1] [x x])))","problem":32,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":32,"code":"(fn abc\n  [L]\n  (if (= (count L) 1)\n    (concat L L)\n    (concat (list (first L)) (list (first L)) (abc (rest L)))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":32,"code":"(fn dup [ls]\n  (cond (empty? ls) '()\n        :else (concat (list (first ls) (first ls)) (dup (rest ls)))))","user":"5716540fe4b07c98581c3af3"},{"problem":32,"code":"(fn [seq] (mapcat (fn [x] [x x]) seq))","user":"5589e88ae4b0277789237610"},{"problem":32,"code":"#(sort (reduce into (repeat 2 %)))","user":"58173722e4b0c0e9c07b838a"},{"problem":32,"code":"(fn [a] (reduce #(conj % %2 %2) '() (reverse a)))","user":"5f686436e4b02876ed9fd03c"},{"problem":32,"code":"reduce (fn [coll item] (concat coll [item item])) []","user":"544cf5d7e4b0e39780006977"},{"problem":32,"code":"(fn duplicate\n  [coll]\n  (reduce (fn\n            [acc current]\n            (concat acc [current current])\n)\n          '() coll))","user":"5a429e40e4b0447ef91cc5f9"},{"problem":32,"code":"(fn [coll]\n  (reduce concat (map #(list % %) coll)))","user":"5c5d2e90e4b01df32ab732af"},{"problem":32,"code":"(fn [coll]\n    (interleave \n     (for [x coll] x) \n     (for [x coll] x)))","user":"5c9da580e4b048ec896c5b12"},{"problem":32,"code":"(fn\n  [seq]\n  (loop [seq seq list '()]\n    (if (= nil (first seq))\n      (reverse list)\n      (recur (rest seq) (conj list (first seq) (first seq)))\n     )\n    ))","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [xs] (reduce #(concat %1 (list %2 %2)) '() xs))","problem":32,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"#(reduce (fn [coll x]\n          (concat coll (repeat 2 x)))\n        (empty %)\n        %)","problem":32,"user":"52ab6de1e4b0c58976d9ac78"},{"code":"(fn [col] (reduce #(conj (conj %1 %2) %2) [] col))","problem":32,"user":"4f77b68de4b0fbe0118ec581"},{"code":"(fn m [coll]\n  (mapcat #(list % %) coll))","problem":32,"user":"52828298e4b0757a1b17145b"},{"problem":32,"code":"(fn [items]\n  (loop [i 0 coll '()]\n        (if (= i (count items))\n          (reverse coll)\n          (recur (inc i) (into coll (repeat 2 (nth items i)))))))","user":"56020b3fe4b04bb52996e19b"},{"problem":32,"code":"#(for [pair (for [i %] [i i]) element pair] element)","user":"5684e200e4b04eec3ec5cfc4"},{"code":"(fn dup [x]\n  (if (empty? x) x\n      (cons (first x) (cons (first x) (dup (rest x))))))","problem":32,"user":"50588af1e4b06522596eba7d"},{"problem":32,"code":"(fn dupSeq [[x & xs]]\n  (if x\n    (cons x (cons x (dupSeq xs)))))","user":"585e7c60e4b0f14aab7c87b3"},{"code":"(fn [x]\n  (reduce  concat ()\n    (map #(repeat 2 %) x)\n  ) \n)","problem":32,"user":"4f0df199535d0136e6c2231e"},{"code":"(fn f [xs]\n  (when (not-empty xs)\n    (cons (first xs)\n          (cons (first xs)\n                (f (rest xs))))))","problem":32,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":32,"code":"(fn duplicate [s]\n  (reduce (fn [result v] (conj result v v)) [] s))","user":"563f1493e4b08d4f616f5ecf"},{"problem":32,"code":"(fn [c]( mapcat #(repeat 2 %) c))","user":"564348e1e4b08d4f616f5f26"},{"code":"(fn [x] (mapcat #(seq [% %]) x))","problem":32,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":32,"code":"(fn [s]\n  (loop [a s ans []]\n    (if (empty? a)\n      ans\n      (recur (rest a) (conj ans (first a) (first a))))))","user":"5a962c09e4b0d174b936c765"},{"problem":32,"code":"(fn [s]\n  (apply concat (map (fn [x] [x x]) s)))","user":"55495318e4b0a04f79299566"},{"problem":32,"code":"#(reduce (fn [x y] (concat x (repeat 2 y))) [] %)","user":"5a16da30e4b0ff51aa4b31cc"},{"problem":32,"code":"(fn [in]\n  (loop [xs in \n         acc []]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))","user":"578606d2e4b0ebec4cfb74ec"},{"code":"(fn [x] (reduce concat (map (fn [x] [x x]) x)))","problem":32,"user":"526bd542e4b03e8d9a4a7274"},{"problem":32,"code":"(fn [s]\n    (reduce (fn [acc x]\n              (concat acc [x x]))\n            '()\n            s))","user":"5549ff9ae4b0a04f7929956e"},{"code":"(fn [s]\n  (reduce #(concat %1 (list %2 %2)) '() s))","problem":32,"user":"504ec46de4b069badc5a33c8"},{"problem":32,"code":";(fn [coll] (reduce concat (map #(concat [%] [%]) coll)))\n#(interleave % %)","user":"562f2985e4b0ab312c17ebc5"},{"problem":32,"code":"(fn [input] (mapcat #(repeat 2 %) input))","user":"56004deee4b04bb52996e164"},{"code":"(fn [xs]\n  (mapcat #(cons % (cons % '())) xs))","problem":32,"user":"52ce5056e4b07d0d72b2738f"},{"code":"reduce #(conj % %2 %2 ) []","problem":32,"user":"52ae886de4b0c58976d9acab"},{"code":"(fn foo\n  ([list] (foo list []))\n  ([list nlist]\n    (if (empty? list)\n      nlist\n      (foo \n        (rest list) \n        (conj (conj nlist (first list)) (first list))))))","problem":32,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn dup [x]\n  (cond   (empty? x) '()\n\t\t\ttrue (cons (first x) (cons (first x) (dup (rest x))))))","problem":32,"user":"4e5fda32535d8ccf87e9fe4e"},{"problem":32,"code":"#(reduce (fn [xs x] (conj (conj xs x) x)) [] %)","user":"552a672de4b0ffed3738f954"},{"problem":32,"code":"(fn lazy-duplicate [coll]\n  \"shorter: (interleave coll coll)\"\n  (when-let [f (first coll)]\n    (concat (vector f f) (lazy-seq (lazy-duplicate (rest coll))))))","user":"5fd2e391e4b07e53c2f3f049"},{"problem":32,"code":"#(reduce concat(map (fn[e](repeat 2 e)) %))","user":"538d70abe4b0b51d73faae6e"},{"problem":32,"code":"(fn [x]\n  (->> x\n       (repeat)\n       (take 2)\n       (#(interleave (first %)(second %)))))","user":"4feded14e4b0d2a5fc2962ec"},{"code":"(fn my-dup [seq]\n  (if (empty? seq) seq\n      (conj (my-dup (rest seq)) (first seq) (first seq))))","problem":32,"user":"4e342671535deb9a81d77f29"},{"problem":32,"code":"(fn generateSeq\n  [inputseq]\n  (loop [seq1 inputseq\n         seq2 inputseq\n         flag 1\n         result []]\n    (if (> flag (count inputseq))\n      (reverse (into '() result)) \n      (recur (next seq1) (next seq2) (inc flag) (conj result (first seq1) (first seq2))))))","user":"54411506e4b032a45b869369"},{"code":"(fn duplicate [xs]\n  (reduce #(conj (conj %1 %2) %2) [] xs))","problem":32,"user":"517bf28de4b07ef0e56148d5"},{"problem":32,"code":"#(reduce (fn [arg1 arg2] (conj arg1 arg2 arg2)) [] %)","user":"54b2ec84e4b09f271ff37d33"},{"problem":32,"code":"#(mapcat (fn [item] (list item item)) %)","user":"5d9c9446e4b0eb781811cdae"},{"code":"reduce #(concat %1 (list %2 %2)) nil","problem":32,"user":"523f1245e4b01c266ffa7f95"},{"problem":32,"code":"(fn dup [x] (reduce #(-> %1 (conj %2) (conj %2)) [] x))","user":"5e69589de4b04a83ad7cd26d"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [duplicate-coll x] (into duplicate-coll [x x])) '() coll)))","user":"55c0f842e4b01b9910ae2a2b"},{"problem":32,"code":"(fn[s] (reduce concat (map (partial repeat 2) s)))","user":"58d96bdce4b0a4d5acaab638"},{"problem":32,"code":"(fn [x] (reduce \n         #(conj (conj %1 %2) %2)\n         [] \n         x) \n  )","user":"58c93089e4b021aa9917ed9b"},{"problem":32,"code":"(fn [s]\n  (loop [a s\n         b '()]\n    (if-not (zero? (count a))\n      (recur (rest a) (conj b (first a) (first a)))\n      (reverse b)\n      )\n    )\n  )","user":"595a3b41e4b066ee0a44afb7"},{"code":"(fn [s]\r\n   (loop [r (seq s) acc '()]\r\n     (if (nil? (seq r))\r\n       (reverse acc)\r\n       (let [f (first r)]\r\n         (recur (rest r) (conj (conj acc f) f))))))","problem":32,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn doubler [sq] (mapcat #(seq [% %]) sq))","problem":32,"user":"4fc4f347e4b081705acca35d"},{"problem":32,"code":"(fn duplicate [s] (apply concat (map #(list % %) s)))","user":"5654e024e4b0f9d632dd848d"},{"problem":32,"code":"(fn [in] (reverse (reduce #(conj %1 %2 %2) '() in)))","user":"54010363e4b0de5c4184861d"},{"problem":32,"code":"(fn [l]\n  (reduce #(conj (conj %1 %2) %2)\n          []\n          l))","user":"57280b92e4b0c5bde472c14e"},{"code":"#(for [x % y [x x]] y)","problem":32,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [input-sequence]\n    ((fn [remaining output]\n       (if (empty? remaining)\n         output\n         (recur (rest remaining) (conj output (first remaining) (first remaining)))))\n       (reverse input-sequence) '()))","problem":32,"user":"4ee9c8d0535d93acb0a66892"},{"code":"#(loop [CONSUME '() PRODUCE %]\n  (if (empty? PRODUCE)\n    CONSUME\n    (recur (concat CONSUME (list (first PRODUCE) (first PRODUCE))) (rest PRODUCE))))","problem":32,"user":"505a2f3be4b03d2efce48c5b"},{"code":"(fn [coll] \n  (reduce (fn [r x] (concat r \n                            (list x) \n                            (list x)))\n          '() coll)\n  )","problem":32,"user":"5092f940e4b097f48cc3857b"},{"problem":32,"code":"reduce (fn [acc elem] (conj acc elem elem)) []","user":"5e34348be4b0650de70e2b16"},{"code":"(fn [ls] (apply concat (map #(list % %) ls)))","problem":32,"user":"4f62b29ce4b0defedf855fd9"},{"problem":32,"code":"(fn [L]\n  (reverse (reduce (fn [r x] (cons x (cons x r))) '() L)))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":32,"code":"(fn dup[x] (if (empty? x) x (cons (first x) (cons (first x) (dup (rest x)))) ))","user":"548485f5e4b0e286459a119f"},{"code":"(fn [coll]\n  (reverse (reduce \n   (fn [out in]\n     (cons in (cons in out))) '() coll)))","problem":32,"user":"4f74271ae4b044e54cd9a8f6"},{"code":"(fn [x] (mapcat #(list %1 %1) x))","problem":32,"user":"510d530de4b078ea71921133"},{"problem":32,"code":"(fn [coll]\n  (loop [result [] coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll) (first coll)) (rest coll)))))","user":"5b13f482e4b0cc2b61a3be58"},{"code":"(fn [seq]\n  (loop [current seq doubled '()]\n    (if (= 0 (count current))\n      (reverse doubled)\n      (recur (drop 1 current) (conj (conj doubled (first current)) (first current))))))","problem":32,"user":"52b94f15e4b07a9af57922ba"},{"problem":32,"code":"(fn [col]\n  (apply concat (map #(list % %) col)))","user":"571e5c9ee4b0145328a76290"},{"problem":32,"code":"(fn a [x]\n  (if (empty? x)\n    '()\n    (concat (list (first x) (first x)) (a (rest x)))\n  )\n)","user":"58fe40afe4b0438e51c2cfca"},{"code":"(fn [coll] (reduce #(conj (conj %1 %2) %2) '() (reverse coll)))","problem":32,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":32,"code":"(fn [xs] \n   (reduce #(conj (conj %1 %2) %2) [] xs))","user":"5ce05561e4b0a17bb84e2b08"},{"code":"(fn [s] (apply concat (map #(replicate 2 %) s)))","problem":32,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":32,"code":"(fn \n  [x]\n  (loop [var x\n         acum '()]\n    (if (empty? var)\n      acum\n      (let [[x1 & extra] var]\n        (recur extra (concat acum [x1 x1]))))))","user":"540621d3e4b0addc1aec6695"},{"problem":32,"code":"(fn replic [lst]\n  (sort (reduce concat (repeat 2 lst))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":32,"code":"mapcat (fn DuplicateASequence [lst] \n         [lst lst])","user":"607508f3e4b069485764de54"},{"code":"#(mapcat(partial take 2) (map repeat %))","problem":32,"user":"4f9970b3e4b0dcca54ed6cfd"},{"code":"(fn [x] (loop [se x res []] (if (= () se) (list* res) (recur (rest se)(conj (conj res (first se)) (first se))))))","problem":32,"user":"51a7f74be4b08d8ec191b802"},{"problem":32,"code":"(fn [coll]\n\t(mapcat #(list % %) coll))","user":"59503c5de4b066ee0a44ae8e"},{"problem":32,"code":"(fn [v] (loop [r v c []] (let [f (first r)] (if (nil? f) c (recur (rest r) (conj c f f))))))","user":"56013467e4b04bb52996e17f"},{"problem":32,"code":"(fn [a] (reverse (reduce #(conj %1 %2 %2) '() a)))","user":"56d6c18ee4b0ea9b8538f7d1"},{"problem":32,"code":"(fn [col] (apply concat (map #(vector % %) col)))","user":"5baba1ece4b0a20761a23482"},{"problem":32,"code":"(fn [x] (loop [v (reverse x), result '()] (if (empty? v) result (recur (rest v) (into result (list (first v) (first v)))))))","user":"5756efc3e4b02ea1147992e6"},{"problem":32,"code":"(fn [arr] (reduce (fn [a b] (conj (conj a b) b)) [] arr))","user":"5eb4927fe4b00a66d4a95221"},{"problem":32,"code":"(fn [sq]\n  (reduce #(conj %1 %2 %2)\n          []\n          sq))","user":"579816abe4b039eba2ecb10d"},{"problem":32,"code":"(fn [s] (into () (reduce (fn [r i] (conj r i i)) () s)))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":32,"code":"(fn dupseq\n\t[arr]\n\t(reduce concat (map (fn [x] [x x]) arr)))","user":"5545477fe4b0a04f79299531"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (reduce #(conj %1 %2 %2) '())\n        reverse))","user":"559468cbe4b0c79f6e1db954"},{"code":"(fn [s]\n  (apply concat (map (fn [e] [e e]) s))\n)","problem":32,"user":"4ffb3c50e4b0678c553fc3c8"},{"code":"(fn a [[x & s :as all]] (if (empty? all) all (cons x (cons x (a s)))))","problem":32,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [seq]\n(loop [s seq\n       result []]\n       (if (empty? s)\n         result\n        (recur (rest s) (conj result (first s) (first s))))))","problem":32,"user":"4ed0d65f535d44c135fd68c6"},{"problem":32,"code":"(fn meh [x]\n  (reduce (fn [new-list item]\n            (conj new-list item item))\n          []\n          x))","user":"5e6834e0e4b04793f195eaf9"},{"code":"(fn [s]\n  (loop [s s ds []]\n    (if (empty? s)\n      ds\n      (recur (rest s) (conj (conj ds (first s)) (first s))))))","problem":32,"user":"50843a4ae4b0c98812d0788b"},{"problem":32,"code":"(fn [col]\n           (reduce (fn [result x]\n                     (concat result [x x]))\n                   '() col))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn [coll]\n  (loop [[x & xs] coll acc []]\n    (if (empty? xs)\n      (conj acc x x)\n      (recur xs (conj acc x x)))))","problem":32,"user":"52129363e4b0d32679a50640"},{"code":"(fn [elements]\n  (mapcat #(repeat 2 %) elements)\n)","problem":32,"user":"4e8e5cc8535d65386fec2142"},{"problem":32,"code":"(fn dup-seq\n  [xs]\n  (reduce concat (map #(repeat 2 %) xs)))","user":"5b73e500e4b047b03b2036ba"},{"problem":32,"code":"(fn [s]\n    (loop [r [] v s ]\n        (if (seq v)\n            (recur (conj r (first v) (first v)) (rest v))\n            (seq r))))","user":"55975569e4b031d6649c9b8e"},{"problem":32,"code":"(fn dup [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))","user":"5493ccbbe4b0b312c081ff50"},{"code":"mapcat #(cons % (list %))","problem":32,"user":"5301157ae4b0d8b024fd3717"},{"problem":32,"code":"(fn f\n  [lst]\n  (->> lst\n       (map (partial repeat 2))\n       (apply concat)))","user":"5a798ac5e4b03baeef9276c0"},{"code":"#(reduce concat (map list %  %))","problem":32,"user":"5300aa1de4b0d8b024fd3710"},{"problem":32,"code":"(fn [lst]\n  (loop [in lst\n         out []]\n    (if (empty? in)\n      out\n      (let [head (first in)]\n        (recur (rest in) (conj out head head))))))","user":"55fb1c77e4b0f488688e065c"},{"problem":32,"code":"(fn [item] (mapcat #(repeat 2 %) item))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"code":"#( mapcat list %% )","problem":32,"user":"4fbb7010e4b081705acca2e7"},{"problem":32,"code":"(fn [s]\n  (reduce #(conj (conj %1 %2) %2)\n          []\n          s))","user":"5a37b6dbe4b001c08efc0c88"},{"code":"#(loop [v '()\n         b %]\n    (if (empty? b)\n      (reverse v)\n      (recur (conj (conj v (first b)) (first b))\n             (rest b))))","problem":32,"user":"4fecd35fe4b0681fd128dcab"},{"code":"(fn\n  [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))","problem":32,"user":"52f32c24e4b05e3f0be25f0d"},{"code":"(fn duper [sequ]\n  (let [s (seq sequ)]\n    (lazy-seq\n      (loop [f (first s)\n             r (rest s)\n             result (list)]\n        (println \"f: \"f\" r: \"r\" result: \"result)\n        (if (empty? r)\n          (reverse (concat (repeat 2 f) result))\n          (recur\n            (first r)\n            (rest r)\n            (concat (repeat 2 f) result)))))))","problem":32,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":32,"code":"(fn duplicate [x] (if (<= (count x) 1)\n                    (list (first x) (first x))\n                    (concat (list (first x) (first x)) (duplicate (rest x)))))","user":"6093cc08e4b00e9e6653c3e1"},{"code":"#(reduce (fn [r e] (conj r e e)) [] %)","problem":32,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":32,"code":"#(apply concat ( for  [ x %] [x x]))","user":"5661b0a9e4b068f2fe63dc6f"},{"code":"(fn [l]\n\t(mapcat #(list %, %) l))","problem":32,"user":"522a1248e4b0590a43906cf3"},{"problem":32,"code":"#(reverse (reduce\n    (fn f [xs x]\n      `(~x ~x ~@xs))\n    '()\n    %))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn dodup [st] \n     (reverse (reduce #(conj (conj %1 %2) %2)  \n           '() \n         st)))","problem":32,"user":"4e9de526535dbda64a6f6b8e"},{"problem":32,"code":"#(->> %\n      (concat %)\n      (sort))","user":"56a44067e4b0542e1f8d14da"},{"code":"(fn [s]\r\n  (reverse (reduce #(cons %2 (cons %2 %1)) nil s)))","problem":32,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn dup-sequence [xs]\n    (when-first [x xs]\n        (conj (dup-sequence (rest xs)) x x)))","problem":32,"user":"4f0660ee535dcb61093f6c0d"},{"problem":32,"code":"(fn [x](apply concat (map #(conj '() % %) x)))","user":"53d0d7a9e4b00fb29b22130c"},{"problem":32,"code":"(fn [coll] (apply concat (map (fn [x] (list x x)) coll)))","user":"5b421edce4b02d533a91bc2c"},{"problem":32,"code":"(fn [ls]\n  (reduce #(conj % %2 %2) (empty ls) ls))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":32,"code":"(fn dup-elem [s]\n  (apply concat (map (partial repeat 2) s)))","user":"5c3527a6e4b0d62ef62d9f60"},{"code":"(fn [x]\n  (reduce concat (map (fn [y]\n                        (take 2 (repeat y)))\n                        x)))","problem":32,"user":"5188c487e4b0bdff0e072d55"},{"problem":32,"code":"(fn [n] (reduce concat (map #(list % %) n)))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"problem":32,"code":"(fn rep [x] (mapcat #(repeat 2 %) x))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":32,"code":"(fn [r] (reduce #(conj %1 %2 %2) [] r))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":32,"code":"(fn [lst] \n     (interleave lst lst))","user":"5294a49be4b02ebb4ef7500f"},{"code":"#(reduce (fn [coll val] (reverse (conj (reverse coll) val val))) '() %)","problem":32,"user":"4fc5273ce4b081705acca37f"},{"problem":32,"code":"#(reduce (fn [a x] (conj (conj a x) x) ) '() (reverse  %) )","user":"55158345e4b055c2f668d4e8"},{"problem":32,"code":"(fn [x] (mapcat (fn [y] (take 2 (repeat y))) x))","user":"5a21c3f9e4b0ff51aa4b32b7"},{"code":"(fn  [s]\n  (reverse (reduce (fn [res i]\n            (conj  res i i)\n            ) '() (seq s)))\n  )","problem":32,"user":"5348236ee4b084c2834f4a54"},{"problem":32,"code":"(fn [s]\n  (reverse\n  (reduce\n   (fn [acc e]\n     (conj acc e e))\n   nil\n   s))\n )\n ;[1 4])","user":"5b38d2f3e4b02d533a91bbaf"},{"problem":32,"code":"mapcat (fn[z](conj [z] z))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":32,"code":"#(mapcat (fn [i] (list i i)) %)","user":"5b284375e4b063e2438bcc53"},{"problem":32,"code":"(fn [l]\n  (reduce\n   #(conj %1 %2 %2) '()\n   (reverse l)))","user":"56ae7589e4b03c432f187360"},{"code":"#(sort (concat % %))","problem":32,"user":"4e6b07dd535d8ccf87e9ff0a"},{"code":"#(loop [i % res []]\n   (if (empty? i)\n     res\n     (recur (rest i) (conj res (first i) (first i)))\n     )\n   )","problem":32,"user":"51064b76e4b01150e115ebe4"},{"problem":32,"code":"(fn [x]\n  (reduce\n   (fn [y z] (concat y [z z]))\n   (empty x)\n   x))","user":"57458b82e4b009280f9f2b4e"},{"code":"(fn dup\n  ([s] (dup s []))\n  ([s acc]\n    (if (empty? s)\n      acc\n      (dup (rest s) (conj (conj acc (first s)) (first s)))\n    )\n  )\n)","problem":32,"user":"4fff00ede4b0678c553fc3fc"},{"problem":32,"code":"(fn [coll] (mapcat (fn [x] (repeat 2 x)) coll))","user":"567874f3e4b05957ce8c617c"},{"problem":32,"code":"#(loop [x % col nil] (if (empty? x) col (recur (rest x) (concat col (repeat 2 (first x))))))","user":"4e4aaf49535dc968683fc4ce"},{"code":"reduce #(concat %1 (list %2 %2)) '()","problem":32,"user":"4dd5e2cc535dae65d5c462ec"},{"problem":32,"code":"#(reduce concat  (for [x %] [x x]))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":32,"code":"(fn [coll]\n  (apply concat (map list coll coll)))","user":"57942207e4b0e215f87e8469"},{"code":"(fn [x] (apply concat\n          (map (fn [y] [y y]) x)))","problem":32,"user":"500cb910e4b05f7c30cfa698"},{"problem":32,"code":"(partial reduce\n         (fn [memo el] (-> memo (conj el) (conj el)))\n         [])","user":"59fa241ee4b0ca45a743a358"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc item] (conj acc item item)) [] coll))","user":"5e84b48ee4b09a7a73c8bbc8"},{"problem":32,"code":"(fn [x] (apply concat (map #(vector %1 %1) x)))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [s] \n  (loop [s1 (vec s) s2 []]\n    (if (empty? s1)\n      (apply list s2)\n      (recur (rest s1) (conj s2 (first s1) (first s1)))\n    )))","problem":32,"user":"53069e16e4b02e8216869798"},{"code":"(fn [x] (reduce concat (map #(repeat 2 %) x)))","problem":32,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn add_duplicates [x]\n                 (loop [o_list x n_list [] count (.length x)]\n                       (if (= count 0) n_list\n                           (recur (rest o_list) (conj (conj n_list (first o_list)) (first o_list)) (dec count)))))","problem":32,"user":"524a74b3e4b05ef8e38e64a7"},{"code":"(fn [coll] (reduce concat (map #(list % %) coll)))","problem":32,"user":"4e7d2448535db169f9c796c8"},{"problem":32,"code":"(fn [coll] (sort (mapcat #(identity %) [coll coll])))","user":"58e5180ae4b056aecfd47c82"},{"code":"#(loop [data %1, res []] (cond (not (seq data)) res\n\t\t\t\t     :else (recur (rest data) (into res [(first data) (first data)]))))","problem":32,"user":"52f5eefbe4b09b582c12c9cb"},{"code":"(fn [xs]\n  (reduce #(concat %1 [%2 %2]) [] xs ))","problem":32,"user":"50e4ff72e4b049a987753897"},{"code":"(fn [x] (seq (reduce #(conj %1 %2 %2) [] x)))","problem":32,"user":"52319066e4b0e2e8de81d1e9"},{"problem":32,"code":"#(reduce (fn [s x] (cons x (cons x s))) '() (reverse %))","user":"5dee144ae4b093ff71727591"},{"code":"(fn [coll] \n  (reduce #(conj %1 %2 %2) [] coll))","problem":32,"user":"5025b93ce4b0c969f0b056df"},{"problem":32,"code":"(fn [col] (mapcat #(repeat 2 %) col))","user":"532cb870e4b019098a6f8b34"},{"code":"(fn [xs] (reduce #(concat %1 (list %2 %2)) () xs))","problem":32,"user":"53403110e4b085b17e897da6"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc x] (concat acc (list x x))) `() coll))","user":"57434103e4b0c285004e8a9e"},{"code":"(fn[x] (loop[in x ans '()]\n(if (empty? in) (reverse ans)\n(recur (rest in) (conj (conj ans (first in))  (first in)))\n))\n)","problem":32,"user":"4fe1279fe4b0dd6cd5ce3630"},{"code":"(fn [x]\n  (loop [curr_x x, result []]\n    (if (empty? curr_x)\n      result\n      (let [fc (first curr_x)]\n        (recur (next curr_x) (conj result fc fc))))))","problem":32,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":32,"code":"(fn [c] (seq (reduce #(conj %1 %2 %2) [] c)))","user":"56e4427ce4b03a7c14b85a4c"},{"problem":32,"code":"reduce(fn [coll x] (concat coll (repeat 2 x))) '()","user":"582a6a85e4b051871117bf5d"},{"code":"#(interleave %1 %1)","problem":32,"user":"4e4ad154535dc968683fc4d1"},{"problem":32,"code":"(fn duplicate [lst]\n  (cond\n    (empty? lst) nil\n    :else (cons (first lst)(cons (first lst) (duplicate (rest lst))))))","user":"534f8c9ae4b084c2834f4acd"},{"problem":32,"code":"(fn [coll]\n  (apply concat (apply map list (repeat 2 coll))))","user":"545bd22fe4b01be26fd7465a"},{"code":"#(reduce (fn [x y] (conj x y y)) [] %)","problem":32,"user":"4efec33f535dcb61093f6a2a"},{"problem":32,"code":"(fn [s]\n  (->> (map (partial repeat 2) s) (apply concat)))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":32,"code":"(fn [vectr] (mapcat #(vector % %) vectr))","user":"5ca1f8a1e4b048ec896c5b8c"},{"problem":32,"code":"mapcat #(conj [] % % )","user":"571e819ae4b0145328a76294"},{"problem":32,"code":"(fn [x] (reduce (fn [m,v] (cons v (cons v m))) '() (reverse x)))","user":"54b972bbe4b0ed20f4ff6ead"},{"code":"(partial mapcat #(repeat 2 %))","problem":32,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"mapcat #(identity [% %])","problem":32,"user":"4ea1b9e4535d7eef308072b8"},{"problem":32,"code":"#(mapcat (fn[el] [el el]) %)","user":"561d7246e4b064ca9f4b16b1"},{"code":"(fn [x]\r\n  (loop [[a & b] x, r []]\r\n\t   (if (seq b)\r\n\t       (recur b (conj (conj r a) a))\r\n\t       (seq (conj (conj r a) a)))))","problem":32,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn hop [xs] \n  (if (empty? xs)\n    xs\n    (lazy-seq \n      (concat (list (first xs) (first xs) )\n              (hop (rest xs))))))","problem":32,"user":"4e4fbd0c535dc968683fc4e9"},{"code":"(fn [coll] (reverse (reduce ( fn [a b] (conj a b b) ) '() coll)))","problem":32,"user":"4f659386e4b07046d9f4ef44"},{"code":"#(apply concat\n        (for [x %1]\n           (list x x)))","problem":32,"user":"4db6d993535d1e037afb2180"},{"problem":32,"code":"#(mapcat  (fn [x] [x x]) %)","user":"507ff90fe4b089ade05efbd9"},{"code":"(fn [xs] (reduce concat (map #(repeat 2 %) xs)))","problem":32,"user":"4ef8d47c535dced4c769f261"},{"problem":32,"code":"(partial reduce (fn [acc val] (concat acc (repeat 2 val))) [])","user":"5ed3c43be4b016b56eae05c4"},{"problem":32,"code":"(fn [t]\n  (reduce (fn [v a] (into v [a a])) [] t))","user":"501b1efee4b0b12d9c5f4d82"},{"code":"(fn [lst]\n  (interleave lst lst))","problem":32,"user":"4e964f4a535dbda64a6f6b42"},{"code":"(fn [s]\n (reduce #(conj %1 %2 %2)  [] s)\n)","problem":32,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn dup [l]\n  (if (empty? l) '()\n      (cons (first l)\n            (cons (first l) (dup (rest l))))))","problem":32,"user":"4e2d84bf535deb9a81d77f09"},{"problem":32,"code":"(fn [l]\n  (reverse (reduce (fn [s x] (conj (conj s x) x)) '() l)))","user":"59708e38e4b01722bebd4c65"},{"code":"(fn [x] \n  (apply concat \n    (map #(repeat 2 %) x)\n  )\n)","problem":32,"user":"510cda21e4b078ea71921126"},{"code":"#(concat (interleave %1 %1))","problem":32,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [xs] (apply concat (map vector xs xs)))","problem":32,"user":"4f03641a535dcb61093f6a9b"},{"problem":32,"code":"#(reduce concat (for [a %] [a a]))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":32,"code":"reduce (fn [a b] (concat a [b b])) []","user":"5f6b5d83e4b02876ed9fd050"},{"problem":32,"code":"#(reduce (fn [accum x] (conj accum x x)) [] %)","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn [coll]\n  (reduce #(concat %1 (vector %2 %2))\n          [] coll))","problem":32,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":32,"code":"#(reduce (fn [c el] (concat c [el el])) [] %)","user":"586b93eae4b01531a375e95b"},{"problem":32,"code":"(fn f [[x & xs :as l]] \n  (if (empty? l)\n    '()\n    (conj (f xs) x x)))","user":"5e98e338e4b0157ca96647db"},{"code":"(fn [c]\n  (reduce #(concat % (list %2 %2)) '() c))","problem":32,"user":"4eac5bc1535d7eef3080731b"},{"problem":32,"code":"#(loop [it %\n         result []]\n    (let [head (first it)]\n      (if (nil? head)\n        result\n        (recur (rest it) (conj result head head)))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":32,"code":"(partial mapcat #(vec [% %]))","user":"50aa777fe4b056ee01935866"},{"code":"#(reverse (reduce (fn fx[acc x] (conj acc x x) ) '() %))","problem":32,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":32,"code":"(fn [sq]\n  (mapcat #(repeat 2 %) sq))","user":"540c54a7e4b0addc1aec6700"},{"problem":32,"code":"#(loop [old-seq % new-seq []]\n   (if (empty? old-seq)\n     new-seq\n     (let [[fr & rst] old-seq\n           new (conj new-seq fr fr)]  \n     (recur rst new))))","user":"5cb3a8c3e4b026601754b904"},{"problem":32,"code":"(fn [list]\n  (loop [l list\n         result ()]\n    (if (empty? l)\n      result\n      (recur (rest l) (concat result [(first l)] [(first l)]))\n)))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn dupl [s]\n  (when (seq s)\n    (let [s0 (first s)]\n      (->> (rest s)\n           (dupl)\n           (cons s0)\n           (cons s0)))))","problem":32,"user":"523b10dfe4b02f719975bdb8"},{"problem":32,"code":"(fn [ob]\n             (let [len (count ob)]\n               (loop [ret () index 0]\n                 (if (= index len)\n                   (reverse ret)\n                   (let [item (nth ob index)]\n                     (recur (conj ret item item) (+ index 1)))))))","user":"56305383e4b073c1cf7a9be6"},{"code":"(fn [s]\n  (reduce concat (map (partial repeat 2) s)))","problem":32,"user":"52140b53e4b0961f15ac4d7e"},{"problem":32,"code":"(fn replic\n  [lst]\n  (if (empty? lst)\n    lst\n    (if (zero? 2)\n      ()\n      (loop [result ()\n             i      0]\n        (if (= (count lst) i)\n          result\n          (recur (concat result (repeat 2 (nth lst i)))\n                 (inc i)))))))","user":"5c7dad57e4b0d597f478caba"},{"problem":32,"code":"#(sort (mapcat identity [% %]))","user":"59135c11e4b0163c97b36f02"},{"code":"(fn [a]\n  (reduce\n    into [] (map #(list % %) a)))","problem":32,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [n] (interleave n n))","problem":32,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":32,"code":"(fn [s] \n  (reduce \n    #(conj %1 %2 %2)\n    []\n    s))","user":"5591b61ee4b0604b3f94d580"},{"code":"(fn [s] (interleave s s))","problem":32,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":32,"code":"(fn dup [coll]\n  (reduce (fn [res x]\n            (let [single (conj res x)]\n            (conj single x)))\n        []\n        coll))","user":"54d90b36e4b0a52adc2e2049"},{"code":"reduce #(concat % [%2 %2]) '()","problem":32,"user":"53396c03e4b0e30313ee6ca7"},{"code":"(fn [x]\n  (loop [x x\n         acc []]\n   (if (empty? x)\n        acc\n  (recur (rest x) \n  (conj (conj acc (first x)) (first x))))))","problem":32,"user":"4fe72924e4b0e8f79898fedb"},{"code":"(fn foo \n  ([x] (foo x []))\n  ([x y] \n   (if (=(count x) 0)\n    y\n   (foo (rest x) (conj y (first x) (first x)))\n    )\n  )\n)","problem":32,"user":"5191045ee4b0f8ef0be96bf3"},{"code":"#(loop [newlist '(), oldlist %1]\n    (if (= (count oldlist) 0)\n      (vec newlist)\n      (recur (concat newlist (take 1 oldlist) (take 1 oldlist)) (rest oldlist))))","problem":32,"user":"4ec5b713535d6d7199dd36b2"},{"problem":32,"code":"reduce (fn [coll x] (concat coll (repeat 2 x))) '()","user":"582290b5e4b04b46fc4b0fa0"},{"problem":32,"code":"(fn duo [lst]\n  (mapcat #(repeat 2 %) lst))","user":"5c7d5463e4b0d597f478caa9"},{"problem":32,"code":"(fn\n  [s]\n  (reduce (fn [acc x]\n            (into acc (repeat 2 x)))\n          []\n          s))","user":"58543a59e4b07779d46863f5"},{"code":"(fn [data] (mapcat #(vector % %) data))","problem":32,"user":"509fe759e4b08df8156e9e43"},{"code":"(fn duplicate [lst]\n    (reduce \n        (fn [acc ele] \n            (conj acc ele ele)\n        ) [] lst\n    )\n)","problem":32,"user":"52c17e42e4b07a9af5792367"},{"problem":32,"code":"reduce (fn [e n] (conj e n n)) []","user":"54df3c94e4b024c67c0cf7aa"},{"problem":32,"code":"#(reduce (fn [seq x] (concat seq [x x])) [] %)","user":"595b7c12e4b066ee0a44afda"},{"problem":32,"code":"(fn [coll] \n    (->>\n    coll\n    (reduce #(conj %1 %2 %2) [])\n    )\n  )","user":"5bc28638e4b07a9b28b10033"},{"code":"(fn [input]\n    (loop [i input dst []]\n        (if (empty? i) dst\n            (recur (rest i) (conj dst (first i) (first i)))\n            )\n        )\n    )","problem":32,"user":"539755d9e4b0b51d73faaee8"},{"problem":32,"code":"(fn elongate [x] (interleave x x))","user":"545188ebe4b0e397800069b2"},{"problem":32,"code":"(fn [col]\n    (loop [result (vector)\n           todup col]\n      (let [[f & r] todup\n            nextcol (conj (conj result f) f)]\n        (if (empty? r)\n          nextcol\n          (recur nextcol r)))))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn [x] (reverse (reduce #(conj %1 %2 %2) '() x)))","problem":32,"user":"508c33ece4b0f17d83ea26b1"},{"problem":32,"code":"(fn dup [coll] \n  (if (empty? coll) \n    []\n    (let [x (first coll)] (concat [x x] (dup (rest coll))))))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":32,"code":"(fn dup [xs] (if (empty? xs)\n               ()\n               (cons (first xs) (cons (first xs) (dup (rest xs))))))","user":"53c051a5e4b0c98a41f5ccae"},{"problem":32,"code":";;mapcat #(list % %)\n;;reduce #(conj %1 %2 %2) []\n#(interleave % %)","user":"5edb07dde4b0c7845d86b0ed"},{"code":"#(reduce (fn [acc, x] (conj acc x x)) [] %)","problem":32,"user":"524717a9e4b05ef8e38e6352"},{"code":"(fn [x]\n  ((fn dupelts [coll]\n    (if-let [[f & r] (seq coll)]\n(cons f (cons f (dupelts r)))\n())) x))","problem":32,"user":"4e6a4950535d8ccf87e9febf"},{"problem":32,"code":"(fn duplicate\n  [a-seq]\n  (reduce\n   (fn [result next-el]\n     (concat result (list next-el next-el)))\n   '()\n   a-seq))","user":"580d2788e4b0849f6811b730"},{"problem":32,"code":"(fn db [coll] (if (seq coll)\n                (cons (first coll) (cons (first coll) (db (rest coll))))\n                nil))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":32,"code":"(fn r [x] (if (empty? x) '() (cons (first x) (cons (first x) (r (rest x))))))","user":"5776b47ce4b0979f8965163d"},{"code":"(fn [x] (apply concat (map #(conj [] % %) x)))\n; note: (apply concat) converts each list item in concat to an argument to concat)\n; e.g > (apply concat [[1][2]])\n;(1 2)\n;> (concat [1] [2])\n; (1 2)","problem":32,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn [xs] (reduce (fn [acc x] (into acc [x x])) [] xs))","problem":32,"user":"52e55e16e4b09f7907dd1460"},{"code":"(fn [x] (apply concat (map #(list %1 %1) x)))","problem":32,"user":"51622fb8e4b009fba0926e3f"},{"problem":32,"code":"(fn my-replicate \n  [s]\n  (loop [e s\n         res []]\n    (if (nil? (first e))\n      res\n      (recur (rest e) (concat res (repeat 2 (first e))))                                                                                           \n      )\n    )\n  )","user":"571b900ae4b07c98581c3b69"},{"code":"mapcat #(repeat 2 (identity %))","problem":32,"user":"4f1af7e4535d64f603146471"},{"code":"#(sort (clojure.set/union % %))","problem":32,"user":"52dbfe84e4b09f7907dd13c9"},{"problem":32,"code":"(fn doubler [c] (mapcat (fn [e] (list e e)) c))","user":"5474d1f4e4b0c51c1f4d728c"},{"code":"#(reduce concat (for [n %] [n n]))","problem":32,"user":"5065dd94e4b0313a384e5643"},{"code":"(fn [coll] (apply concat (map list coll coll)))","problem":32,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":32,"code":"mapcat #(repeat 2 %)\n;mapcat #(list % %)","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":32,"code":"(fn [x]\n      (reduce (fn [coll a]\n                (conj (conj coll a) a)) '() (reverse x)))","user":"5df94f73e4b0a607a9a45cb6"},{"code":"(partial reduce (fn [c e] (conj c e e)) [])","problem":32,"user":"51c73959e4b07ef393169e3e"},{"code":"(fn [x] \n    (apply concat\n      (map #(vector % %) x)\n    )\n)","problem":32,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"(fn mydouble [x]\n   (if (empty? x)\n     nil\n     (cons (first x) (cons (first x) (mydouble (rest x))))))","problem":32,"user":"51f13b80e4b06a20a2523f38"},{"problem":32,"code":"(fn [col]\n  (reduce #(conj %1 %2 %2)\n          []\n          col))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"reduce #( conj (conj %1 %2) %2 ) []","problem":32,"user":"4f030775535dcb61093f6a43"},{"code":"(fn d [c]\n  (when (seq c)\n    (concat (take 2 (repeat (first c)))\n            (lazy-seq (d (rest c))))))","problem":32,"user":"50377d53e4b0af0658af77ad"},{"code":"(fn [a] (apply concat (for [c (range (count a))] (for [d (range 2)] (nth a c)))))","problem":32,"user":"53874820e4b06839e8705f1b"},{"code":"(fn [coll] (reduce #(conj % %2 %2) [] coll))","problem":32,"user":"52c61564e4b0c2d177d62109"},{"code":"(fn [list] (interleave list list))","problem":32,"user":"4edd9d79535d10e5ff6f532b"},{"problem":32,"code":"(fn [x] (mapcat identity (map #(repeat 2 %) x)))","user":"56719c3ce4b05957ce8c610c"},{"problem":32,"code":"mapcat (fn [n] [n n])","user":"55249337e4b0882d96d091c3"},{"problem":32,"code":"mapcat (fn[x] (vector x x))","user":"4fabbd3ee4b081705acca21e"},{"problem":32,"code":"(fn [l]\n  (apply list (reduce #(conj %1 %2 %2) [] l)))","user":"5f3f2281e4b004f08c61c561"},{"problem":32,"code":"#(reduce (fn [a b] (conj a b b)) '() (reverse %))","user":"55330d7fe4b09218d5f44f88"},{"problem":32,"code":"#(loop [x %1 y '()]\n                         (if (empty? x)\n                           (reverse y)\n                           (recur (rest x) (conj y (first x) (first x)))\n                           )\n                         )","user":"5cf72682e4b0b71b1d808a68"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [accum next-item]\n            (conj accum next-item next-item)) [] coll))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn duplicate-ns [coll]\n  (interleave coll coll))","problem":32,"user":"5383668ee4b06839e8705edd"},{"problem":32,"code":"#(reverse (reduce\n               (fn [foo bar] (conj foo bar bar)  )\n               ()\n               %) )","user":"5908882de4b047aa04b19979"},{"code":"#(reverse (reduce (fn [a b] (cons b (cons b a))) () %))","problem":32,"user":"51592b81e4b0394f658fe22c"},{"problem":32,"code":"(fn eh [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (eh (rest x))))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":32,"code":"(fn dup\n  [input]\n  (reverse \n   (reduce\n    (fn \n     [output item]\n     (conj output item item))\n    '() \n    input)))","user":"5bc4f266e4b07a9b28b10066"},{"code":"#(map (fn [a] a) (loop [x (first %) xs (next %) res []]\n   (if (empty? xs) (conj (conj res x) x) (recur (first xs) (next xs) (conj (conj res x) x)))))","problem":32,"user":"52161db6e4b0bf4bffd29cb8"},{"code":"(fn dupl [c]\n  (let [[x & xs] c]\n    (if (empty? c)\n      x\n      (conj (dupl xs) x x))))","problem":32,"user":"5225a0f5e4b01819a2de430e"},{"problem":32,"code":"(fn [x] (reverse (reduce into (map #(list % %) x))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [l] (mapcat #(repeat 2 %) l))","problem":32,"user":"4f04f847535dcb61093f6beb"},{"problem":32,"code":"#(reduce (fn [a b] (concat a [b b])) [] %)","user":"58c3af4de4b021aa9917ed1b"},{"problem":32,"code":"(fn [l] (mapcat identity (map #(repeat 2 %) l)))","user":"57b6cc7ce4b0fbc9809a27c4"},{"problem":32,"code":"(fn [s]\n   (reduce (fn [acc e] (conj acc e e)) [] s))","user":"56936547e4b0dcc4269f4101"},{"problem":32,"code":"#(reduce (fn [coll item]\n          (conj coll item item)\n          ) [] %)","user":"5c1229d5e4b01240ff567188"},{"code":"(fn [seq] (mapcat #(list % %) seq))","problem":32,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":32,"code":"#( interleave % %)","user":"5a14a48fe4b0ff51aa4b31a1"},{"code":"(fn [coll]\n  (apply concat (map #(list % %) coll)))","problem":32,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [x] (reduce concat (map #(list % % ) x)))","problem":32,"user":"4e8da0bf535d65386fec2138"},{"problem":32,"code":"(fn dup [seq]\n  (if (empty? seq) seq\n  (concat (repeat 2 (first seq))\n          (dup (rest seq)))))","user":"5606d71ce4b08b23635d317a"},{"code":"(fn [x]\n  (interleave x x) )","problem":32,"user":"4e333091535deb9a81d77f25"},{"code":"(fn dbl[lst]\n  (if-let [[x & xs] (seq lst)]\n    (concat [x x] (dbl xs))\n    ()\n  )\n)","problem":32,"user":"536234a5e4b0243289761e4d"},{"code":"(fn [x] (mapcat #(list % %) x))","problem":32,"user":"4df7278a535d04ed9115e774"},{"code":"(fn [s]\n  (for [v s i [1 2]]\n    v))","problem":32,"user":"50901b2ee4b0ea685a20f774"},{"problem":32,"code":"(fn [s]\n   (reduce concat (map #(repeat 2 %) s))\n  )","user":"5d6fae1ee4b04d129b00f2d4"},{"code":"#(loop [col % c ()]\r\n  (if (empty? col)\r\n    (reverse c)\r\n  (recur (rest col) \r\n  (cons (first col) (cons (first col) c)))))","problem":32,"user":"4db6ce85535d1e037afb217f"},{"problem":32,"code":"(fn [seq] (apply concat (map (fn [x] (repeat 2 x)) seq)))","user":"5ee6d30ce4b029a2061bbe9c"},{"problem":32,"code":"(fn [x]\n  (loop [cur x acc '()]\n    (if (= (count cur) 0)\n      acc\n      (recur (rest cur) (concat (concat acc (list (first cur))) (list (first cur))))\n    )\n  )\n)","user":"5c3f6322e4b08cd430848e97"},{"problem":32,"code":"#(mapcat (fn [x & xs] (into '() [x x])) %)","user":"56ebfb93e4b04a395b9a042e"},{"problem":32,"code":"(fn duplicateElements [c] \n  (reduce (fn [r x] \n            (if (nil? x) \n              r \n              (conj r x x)\n            )\n          )\n          []\n          c\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":32,"code":"(fn\n  [s]\n  (reduce\n   (fn [p c] (conj p c c))\n   []\n   s\n   ))","user":"57f55632e4b0903ccab3dcf1"},{"code":"#(reduce (fn[c x](conj c x x)) '() (reverse %))","problem":32,"user":"5153b1bce4b0252ac4b16639"},{"problem":32,"code":"(fn [l] (apply concat (map #(seq (list % %)) l)))","user":"53a0ab8ce4b0ca733b9744b3"},{"problem":32,"code":"(fn duplicate\n  [s] (if (empty? s)\n        '()\n        (conj (duplicate (rest s)) (first s) (first s))))","user":"6096d37be4b00e9e6653c3f0"},{"problem":32,"code":"(fn dub [lst]\n  (mapcat list lst lst))","user":"5895477fe4b00487982d527c"},{"code":"(fn dcons [col]\n  (lazy-seq\n    (if-let [fel (first col)]\n      (into [fel fel] (dcons (rest col))))))","problem":32,"user":"4f61be97e4b0defedf855fc5"},{"problem":32,"code":"(fn func [coll] (mapcat (fn [x] [x x]) coll))","user":"5e805895e4b085ba37836e44"},{"code":"(fn dup [x] (if (= (next x) nil)\n  \t(list (first x) (first x))\n\t\t(concat (list (first x) (first x)) (dup (next x)))))","problem":32,"user":"4f048f67535dcb61093f6bd3"},{"problem":32,"code":"(fn [xs] (apply concat (map #(vector % %) xs)) )","user":"5921a080e4b09b4ee5954c77"},{"problem":32,"code":"(fn [col] (reduce #(concat %1 [%2 %2]) [] col))","user":"586c6462e4b01531a375e97b"},{"code":"(fn [a-list]\n       (sort (concat a-list a-list)))","problem":32,"user":"4eae2f9e535d7eef30807324"},{"code":"#( loop [acc [] list %] \n    ( if (empty? list) acc\n       (recur (conj acc (first list) (first list)) (rest list))\n    )\n  )","problem":32,"user":"52cbe910e4b07d0d72b27353"},{"code":"(fn [x]\n  (loop [dupes [] x x]\n    (if (not (empty? x))\n      (recur (conj dupes (first x) (first x)) (rest x))\n      dupes)))","problem":32,"user":"51a2569ee4b00957e520db7d"},{"code":"(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))","problem":32,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [col]\n  (loop [c col acc '()]\n    (if (= (last c) nil)\n      acc\n      (recur (rest c) (concat acc [(first c) (first c)])))))","problem":32,"user":"5163a7bbe4b055933a9ca02f"},{"problem":32,"code":"#(sort (apply concat (reduce (fn [a e] (conj a (repeat 2 e))) '() %)))","user":"5d5502cbe4b02ba5928a680b"},{"code":"(fn [l]\n  (apply concat (map (fn [x] [x x]) l)))","problem":32,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":32,"code":"(fn [a] (reduce concat (map vector a a)))","user":"550b5c10e4b06e50f9beb143"},{"code":"(fn [x] (reverse (reduce into (map list x (seq x)))) )","problem":32,"user":"5254f908e4b0541d1855b9ba"},{"code":"(fn [s] (reduce concat (map (partial repeat 2) s)))","problem":32,"user":"504e108ce4b078edc5f593b3"},{"problem":32,"code":"(fn [s]\n  (reduce\n    #(conj (conj %1 %2) %2)\n    []\n    s))","user":"556159fae4b0c656e3ff17c7"},{"problem":32,"code":"#_\n(fn dup [x]\n  (if (empty? x)\n    ()\n    (conj\n     (conj (dup (rest x))\n           (first x))\n     (first x))))\n\n(fn [coll]\n    (interleave coll coll))","user":"529e3258e4b04e0c58e87b8d"},{"problem":32,"code":"(fn [seq]\n  (loop [origin-seq seq\n         target-seq []]\n    (if (empty? origin-seq)\n      (concat '() target-seq)\n      (let [head (first origin-seq)\n            body (rest origin-seq)]\n        (recur body\n               (conj target-seq head head))))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn dup [x] (cond \n  ( = x ()) () \n  :else (conj (  conj(  dup(rest x)) (first x) )    (first x))\n  ))","problem":32,"user":"4f6e1c40e4b07046d9f4efd4"},{"problem":32,"code":"(fn [xs] (reduce #(concat % (repeat 2 %2)) '() xs))","user":"5de48f92e4b0948ae9d9ae07"},{"problem":32,"code":"(fn dupl [col]\n  (loop [c col\n         result []]\n    (prn c)\n    (prn result)\n    (if (empty? c)\n      result\n      (recur (rest c) (conj (conj result (first c))  (first c))\n             )\n      )\n    ))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":32,"code":"mapcat \n  #(list % %)","user":"5a9cdec0e4b0d174b936c7e1"},{"problem":32,"code":"(fn [sq] (mapcat #(repeat 2 %) sq))","user":"55ede35ce4b0121d4835fde1"},{"problem":32,"code":"(fn [lst]\n  (loop [lst lst\n         acc '()]\n    (if (empty? lst)\n      (reverse acc)\n      (recur (rest lst)\n             (concat (list (first lst) (first lst)) acc)))))","user":"54084784e4b0addc1aec66c9"},{"problem":32,"code":"reduce (fn [a b] (conj (conj a b) b)) []","user":"569c40cee4b0542e1f8d1462"},{"problem":32,"code":"(fn [xs] (mapcat #(repeat 2 %1) xs))","user":"58327a08e4b089d5ab817c7c"},{"code":"reduce (fn[x,y](conj (conj x y) y)) []","problem":32,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"#(mapcat (fn [x] [x x]) %)","problem":32,"user":"4ddbfb8a535d02782fcbea00"},{"problem":32,"code":"#(interleave % %)\n\n;mapcat #(list % %)\n\n;mapcat (fn [n] [n n])","user":"572830e6e4b0c5bde472c152"},{"problem":32,"code":"(fn duplikat [x]\n  (if (empty? x)\n    '()\n    (conj (duplikat (rest x)) (first x) (first x))))","user":"593f9bbce4b069cdc2982be4"},{"code":"(fn dupe\n  [coll]\n  (when-let [s (seq coll)]\n    (cons (first s) (cons (first s) (dupe (rest coll))))))","problem":32,"user":"50fc48dde4b0d10d794c19f6"},{"problem":32,"code":"(fn [seqy] (apply concat (map #(vector % %) seqy)))","user":"58bc3202e4b0888cdc949d0b"},{"problem":32,"code":"(fn duplicate[coll]\n     (apply concat (map #(repeat 2 %) coll))\n     )","user":"55240916e4b0882d96d091b6"},{"code":"(fn [initial-coll]\n  (reverse\n    (reduce \n      (fn [coll val]\n        (conj coll val val))\n      '()\n      initial-coll)))","problem":32,"user":"5014754de4b094324338f8e5"},{"problem":32,"code":"#(mapcat (fn f [x] [x x]) %)","user":"57dbcc28e4b0bd073c202429"},{"code":"(fn [xs]\n  (apply concat (map list xs xs)))","problem":32,"user":"521679e9e4b0bf4bffd29cca"},{"problem":32,"code":"(fn [lst]\n          (let [l (reverse lst)]\n            ((fn [l acc]\n               (if (empty? l)\n                 acc\n                 (recur (rest l) (cons (first l) (cons (first l) acc))))) l '()))\n          )","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn [ls] (reduce (fn [acc y] (concat acc [y y])) [] ls))","problem":32,"user":"4e89de60535d3e98b8023285"},{"problem":32,"code":"(fn\n   [LIST]\n   (apply concat (into [] (map (fn [x] [x x]) LIST))))","user":"53d6b266e4b0e771c3025459"},{"problem":32,"code":"(fn duplicate [xs] \n    (interleave xs xs)\n)","user":"546ddf95e4b00cfc9eacc195"},{"problem":32,"code":"#(reduce \n  (fn [col el] (conj col el el))\n  [] \n  %)","user":"5843b231e4b089d5ab817e3d"},{"problem":32,"code":"(fn [c]\n  (sort (reduce conj c c)))","user":"57061d20e4b0b0fb43fd0679"},{"problem":32,"code":"(fn dupe [x]\n  (reduce\n   (fn [col elm]\n     (concat col (list elm elm)))\n   '() x))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":32,"code":"#(reduce (partial apply conj) (mapv (fn [a] [a a]) %))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":32,"code":"(fn [x]  (mapcat #(vector % %) x))","user":"57126104e4b09c608db70458"},{"problem":32,"code":"reduce (fn [m k] (conj m k k)) []","user":"5a5894d9e4b05d388ecb6c81"},{"code":"mapcat (fn [a] (list a a))","problem":32,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn duplicate-seq-elem [xs]\n  (mapcat #(repeat 2 %) xs))","problem":32,"user":"517a025ce4b01aacecbecbe6"},{"problem":32,"code":"(fn [list]\n  (reduce \n    (fn [nlist elem]\n      (conj nlist elem elem))\n    [] list)\n)","user":"5b59b89be4b02d533a91bd7d"},{"code":"(fn[coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))","problem":32,"user":"518c1079e4b0f028e99addf8"},{"code":"(fn [x]\n    (apply concat \n        (map \n            (fn [e] (take 2 (repeat e)))\n            x)))","problem":32,"user":"4f85ef29e4b033992c121c4d"},{"problem":32,"code":"(fn dup [s] (if (seq s)\n              (cons (first s) (cons (first s) (dup (rest s))))\n              '()))","user":"5ee93720e4b029a2061bbeb7"},{"problem":32,"code":"(fn\n  [coll]\n  (interleave coll coll))","user":"526c669be4b03e8d9a4a728f"},{"problem":32,"code":"(fn [xs]\n  (seq\n    (reduce \n     (fn [acc x] (conj acc x x))\n     []\n     xs)))","user":"526e1bd0e4b03e8d9a4a730b"},{"code":"(fn [n] (loop [x n y (apply vector nil)] (if (empty? x) (reverse y) (recur (pop x) \n(conj (conj y (last x)) (last x))))))","problem":32,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":32,"code":"#(reduce concat (map (fn [a] [a a]) %))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn duplicate-members [coll]\n  (loop [coll coll, result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll)\n             (apply conj result (repeat 2 (first coll)))))))","problem":32,"user":"4fae4c11e4b081705acca248"},{"problem":32,"code":"(fn\n  [coll]\n  (reduce (fn [cum x]\n            (into cum x))\n          []\n          (map #(repeat 2 %) coll)))","user":"5d7b90ede4b02e6b30c93552"},{"problem":32,"code":"(fn [x]\n  (loop [i 0 l '()]\n    (if (= i (count x))\n      (reverse l)\n      (recur (inc i) (into l (repeat 2 (get x i)))))\n      ))","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn dup\n  [xs]\n  (if (not-empty xs)\n    (cons (first xs)\n      (cons (first xs)\n        (dup (rest xs))))))","problem":32,"user":"4fab1ea1e4b081705acca210"},{"code":"(fn dupps [lst]\n   (cond (empty? lst) ()\n         :else (cons (first lst)\n                     (cons (first lst)\n                           (dupps (rest lst))))))","problem":32,"user":"52fe3a9de4b047fd55837039"},{"code":"(fn [lst] (reduce #(concat %1 (repeat 2 %2)) '() lst))","problem":32,"user":"50868795e4b004985b776e5e"},{"problem":32,"code":"(fn [x]\n  (loop [coll x new []]\n    (if (empty? coll)\n      new\n      (recur (rest coll) (conj new (first coll)(first coll))))))","user":"5a9482b7e4b0d174b936c737"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s)\n    '()\n    (cons (first s)\n          (cons (first s)\n                (dup (rest s))))))","user":"54d26316e4b0e8a36923e5f2"},{"problem":32,"code":"(fn [seq] (reduce #(concat %1 (repeat 2 %2)) [] seq))","user":"554dff83e4b00713264bd98d"},{"problem":32,"code":"(fn [a]\n  (reduce (fn [x y]\n            (concat x (list y y)))\n          '()\n          a)\n  )","user":"58775496e4b01531a375ea9a"},{"problem":32,"code":"#(reduce (fn [s i] (conj s i i)) [] %)","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":32,"code":"(fn [a]\n  (loop [i 0 b []]\n    (if (< i (count a))\n      (recur (inc i) (conj b (a i) (a i)))\n      b)))","user":"55058a4fe4b086ebe8a79c89"},{"problem":32,"code":"(fn  [s]                                                                                \n        (loop [x s res []]                                                                         \n          (if (> (count x)0 )                                                                      \n            (recur (rest x) (conj res (first x) (first x)))                                        \n            res)))","user":"5423dc6ae4b01498b1a71ad5"},{"code":"(fn duplicate\n  [some-seq]\n  (reverse \n   (reduce \n    (fn [acc e]\n     (cons e (cons e acc)))   \n    [] some-seq)))","problem":32,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn [seq]\n  (loop [s seq r []]\n    (if (empty? s) r\n        (recur (rest s) (conj r (first s) (first s))))))","problem":32,"user":"4ea1bc93535d7eef308072b9"},{"code":"(fn [list] (apply concat (for [x list] [x x])))","problem":32,"user":"5394162be4b0b51d73faaec5"},{"code":"(fn [xs] ((fn [n] (apply interleave (take n (repeat xs)))) 2))","problem":32,"user":"503be1f0e4b0fc0f99c2e549"},{"problem":32,"code":"(fn [x]\n  (loop [res [] arg x]\n    (if (empty? arg)\n      res\n      (recur (conj res (first arg) (first arg)) (rest arg)))))","user":"5ddd134ae4b0948ae9d9adc0"},{"problem":32,"code":"(fn [s] (loop [ret [] i 0] (if (= i (count s)) ret (recur (conj ret (nth s i) (nth s i)) (+ i 1)))))","user":"59468de7e4b07ddc2dafad88"},{"problem":32,"code":"; (defn re [in]\n;   (if (empty? in)\n;     '()\n;     (cons (first in) (cons (first in) (re (rest in))))))\n#(interleave % %)","user":"57fa6f2ee4b0d3187e900962"},{"problem":32,"code":"(fn expand[lst]\n  (reduce concat (map repeat (repeat (count lst) 2 ) lst)))","user":"57fc08d8e4b0d3187e900988"},{"code":"(fn [x] \n     (reverse\n     \t(reduce\n         (fn [ a i ] (cons i (cons i a))) (empty list) x\n         )\n      )\n     )","problem":32,"user":"51e1c176e4b06a68e693eafb"},{"code":"reduce (fn [s el] (conj s el el)) []","problem":32,"user":"5060c117e4b024449d699b5d"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (map #(list % %))\n       (apply concat)))","user":"56f9982ce4b07572ad1a88b8"},{"problem":32,"code":"(fn duplicateASeq\n  [arg]\n  (loop [[first & rest] arg\n         result '()]\n    (if (nil? first)\n      (reverse result)\n      (do (println first rest)\n          (recur rest (conj result first first)))\n      ))\n    )","user":"57c731ede4b05aa3c4741d00"},{"code":"(fn [x] \n  (loop [s x ret '()]\n(if (next s)\n(recur (next s) (conj ret (first s) (first s)))\n(reverse(conj ret (first s) (first s))))))","problem":32,"user":"4eb27fad535d7eef3080734a"},{"problem":32,"code":"(fn duplicate [in]\n  (reduce concat (map #(take 2 (repeat %)) in)))","user":"5bc7c3aee4b07a9b28b100b2"},{"problem":32,"code":"#(mapcat (fn [input](repeat 2 input)) %1)","user":"5c582e7be4b0fb8c5ffd9a55"},{"problem":32,"code":"(fn duplicate-items\n  [coll]\n  (reduce\n    (fn [final-coll value]\n      (into final-coll [value value]))\n    [] coll))","user":"5890799be4b00487982d51d6"},{"problem":32,"code":"(fn [x] (sort (into () (clojure.set/union x x))))","user":"5797bb57e4b039eba2ecb104"},{"code":"(fn fart [s]\n  (cond\n   (empty? (rest s))\n   (list (first s) (first s))\n   :else\n   (concat (list (first s) (first s)) (fart (rest s)))))","problem":32,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":32,"code":"(fn [x] \n\n(reduce concat (map #(repeat 2 %) x))\n        \n)","user":"53f4c3d6e4b0db01ade6f9c5"},{"problem":32,"code":"#(reverse (reduce (fn [acc xx] (conj acc xx xx)) '() %))","user":"5f419985e4b0955706451fab"},{"code":"(fn [x]\n\t(apply concat (map #(repeat 2 %) x)))","problem":32,"user":"50b63309e4b0a86f8358ca68"},{"code":"#(mapcat (partial replicate 2) %)","problem":32,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn dup [s]\n  (interleave s s))","problem":32,"user":"4f611127e4b0defedf855fb4"},{"problem":32,"code":"#(mapcat (fn [coll] (repeat 2 coll)) %)","user":"55d85ac9e4b0e31453f64ab2"},{"problem":32,"code":"(fn [x]\n  (apply concat (map (partial repeat 2) x)))","user":"55c68089e4b0e31453f649c4"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [new-coll x]\n            (sort (conj new-coll x x)))\n          '()\n          coll))","user":"573de63fe4b05c31a32c081c"},{"problem":32,"code":"(fn [s] (reduce (fn [r x] (conj (conj r x) x)) [] s))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":32,"code":"#(reduce (fn \n           [acc new-value]\n           (concat acc [new-value new-value])) (empty %) %)","user":"5491bebbe4b0b312c081ff3c"},{"problem":32,"code":";reduce #(concat % [%2 %2]) []\n;reduce #(conj % %2 %2) []\n#(interleave % %)","user":"5a544eeee4b05d388ecb6c24"},{"problem":32,"code":"#(reduce into (map (fn [item] [item item]) %))","user":"568f2059e4b0dcc4269f40df"},{"problem":32,"code":"(fn\n  [s]\n  (mapcat identity\n          (for [x s]\n            (take 2 (iterate identity x)))))","user":"529f9bf2e4b04e0c58e87bb4"},{"code":"(fn [s]\n  (mapcat #(repeat 2 %) s))","problem":32,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [ls]\n  (->>\n   ls \n   (reduce (fn [acc i] (conj acc i i)) '())\n   (reverse)))","problem":32,"user":"529e2383e4b04e0c58e87b8b"},{"code":"(fn mult [xs]\n;if it's empty, we're at the end of the list\n  (if (empty? xs)\n    nil\n  ;otherwise add the first element to the list\n    (conj (mult (rest xs)) (first xs) (first xs))))","problem":32,"user":"50ed1ce7e4b01236b1d49839"},{"problem":32,"code":"(fn [x] (apply list (reduce #(conj %1 %2 %2) [] x)))","user":"598ff38ce4b0fcebec4de869"},{"problem":32,"code":"(fn [x] \n  (loop [in x out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (concat out (repeat 2 (first in))) ))))","user":"55b705fce4b01b9910ae29a0"},{"problem":32,"code":"#(loop [col %\n                   rr []]\n             (if (> (count col) 0)\n               (let [item (first col)]\n                 (recur (rest col)\n                        (conj (conj rr item) item)))\n               rr))","user":"5383c054e4b06839e8705ee8"},{"problem":32,"code":"(fn [s]\n  (reduce concat (map (fn [x] [x x]) s)))","user":"564583f0e4b0284900eef607"},{"code":"(fn [seq]\n  (apply concat\n    (map #(list % %) seq)))","problem":32,"user":"4e4ae5aa535dc968683fc4d2"},{"problem":32,"code":"reduce (fn [r x] (conj (conj r x) x)) []","user":"5b19593ae4b03cfeda66ecb8"},{"code":"#(reduce (partial apply conj) (for [x %] [x x]))","problem":32,"user":"4e25176e535d04ed9115e829"},{"problem":32,"code":"reduce #(concat %1 [%2 %2]) nil","user":"5721dfc3e4b0c5bde472c0bb"},{"problem":32,"code":"(fn [x] (loop [accum () a-seq x]\n           (if (empty? a-seq)  (reverse accum)\n             (let [y (first a-seq) ] \n               (recur (conj accum y y) (rest a-seq))))))","user":"52fdbf3ae4b047fd55837032"},{"problem":32,"code":"(fn [list]\n  (mapcat (partial repeat 2) list))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":32,"code":"(fn dup\n  [coll]\n  (if (empty? coll)\n    '()\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))","user":"57476b5fe4b009280f9f2b74"},{"code":"(fn [coll]\n    (reverse (reduce #(conj %1 %2 %2) '() coll)))","problem":32,"user":"5317d78ee4b08068f379ed63"},{"problem":32,"code":"(fn [coll]\n   (reduce (fn [acc, v] (concat acc [v v])) [] coll)\n   )","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":32,"code":"(fn [d s]\n  (if (= s nil)\n    d\n    (recur (conj d (first s) (first s) ) (next s))\n  )\n) []","user":"5b5b0bb9e4b0c6492753e6a5"},{"code":"(fn [x] (mapcat #(identity %&) x x))","problem":32,"user":"5089ebfee4b03217b26a539f"},{"code":"#(apply concat (map (partial replicate 2) %))","problem":32,"user":"504f57c7e4b0a02f9cffde71"},{"problem":32,"code":"(fn [lst]\n  (if (empty? lst)\n    ()\n    (mapcat #(repeat 2 %) lst)\n    )\n   )","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":32,"code":"(comp (partial reduce concat) (partial map #(list % %)))","user":"5b507222e4b02d533a91bce7"},{"problem":32,"code":"(fn duplicate-seq\n  [sq]\n  (reduce ;;let's use reduce to EXPAND the sequence.\n    (fn [dup-seq cur-item]\n      (concat dup-seq [cur-item cur-item])) ;;yep thats right\n    []\n    sq)) ;;life doesnt make sense anymore","user":"59863a26e4b021a7a535fe87"},{"problem":32,"code":"(fn [input]\n   (loop [s '() is input]\n     (if (not (empty? is))\n       (recur (conj (conj s (first is)) (first is)) (rest is))\n       (reverse s))))","user":"5901731ae4b0438e51c2d03d"},{"code":"(fn [lst] (reduce (fn [a b] (concat a b)) \n    (apply vector (map #(vector % %) lst))))","problem":32,"user":"4eed6b32535d93acb0a668bc"},{"code":"(fn [xs]\n  (loop [my-vec [] x xs]\n    (if x\n      (recur \n        (conj (conj my-vec (first x)) (first x))\n        (next x))\n      my-vec)))","problem":32,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":32,"code":"(fn dup [xs] \n  (if (empty? xs) \n     nil\n    (conj \n      (conj (dup (rest xs))              \n        (first xs)) \n      (first xs))\n ))","user":"57ed8315e4b0bfb2137f5b9a"},{"code":"(fn dupseq\n  ([col] (dupseq col []))\n  ([col newcol]\n    (if (empty? col)\n        (seq newcol)\n        (let [e (first col) rcol (conj (conj newcol e) e)]\n            (recur (rest col) rcol)))))","problem":32,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn[s]\n  (reduce\n    (fn [result, ix]\n      (conj result ix ix)\n      ) [] s\n    )\n  )","problem":32,"user":"51b5a6e0e4b0f094dd986fce"},{"code":"(fn dupe [xs]\n   (reduce #(concat %1 (list %2 %2))\n      (list) xs))","problem":32,"user":"4ff2430ae4b0678c553fc336"},{"problem":32,"code":"(fn dupe [[x & xs]]\n  (cond\n   (nil? x) nil\n   :else (concat (seq [x x]) (dupe xs))\n  )\n)","user":"56433d34e4b08d4f616f5f23"},{"problem":32,"code":"#(reduce (fn [dseq elem]\n            (concat dseq [elem elem]))\n          [] %)","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":32,"code":"#(-> %\n     (interleave %))","user":"5c06f6e3e4b0bdcf453d16bb"},{"code":"(fn [col] (loop \n             [\n              mcol col, \n              newv []] \n             (if (seq mcol)\n               (recur \n                 (rest mcol) \n                 (conj newv (first mcol) (first mcol)))\n               newv)))","problem":32,"user":"4f7cbf4ae4b06e829148e1b7"},{"code":"#(mapcat vec (map vector % %))","problem":32,"user":"5013193ae4b0f26a0e3320ab"},{"problem":32,"code":"(fn zip\n  ([x] (zip x x))\n  ([x y] \n   (cond \n    (or (empty? x) (empty? y)) '()\n    :else (conj (conj (zip (rest x) (rest y)) (first y)) (first x)))))","user":"5aa5951ae4b0d174b936c899"},{"problem":32,"code":"(fn duplicateme [x] (loop [\n                           returnme () \n                           remains x ]\n                        \n                      (if (empty? remains) \n                        (reverse returnme)\n                        (recur (conj (conj returnme (first remains)) (first remains)) (drop 1 remains))\n  )\n  ) \n)","user":"542baf7ce4b0dad94371f291"},{"code":"(fn [col] (mapcat (fn [a] [a a]) col))","problem":32,"user":"4fc7db47e4b0ee37620e182a"},{"code":"(fn [xs]\n  (reverse\n    (reduce #(cons %2 (cons %2 %1)) \n'()\nxs)))","problem":32,"user":"504f5804e4b0a02f9cffde72"},{"problem":32,"code":"(fn [y x] (if (empty? x) (reverse y) (recur (conj y (first x) (first x)) (rest x)))) '()","user":"554d01a8e4b0a04f792995b3"},{"problem":32,"code":"(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (cons f (cons f (cmprs r)))))","user":"54ecd7dde4b024c67c0cf85c"},{"problem":32,"code":"#(reduce (fn [l i] (concat l [i i])) '() %)","user":"4ecf5ee1535d44c135fd68b7"},{"code":"(fn poo [[x & xs]] \n  (if (= xs nil)\n    [x x]\n    (cons x (cons x (poo xs)))))","problem":32,"user":"4f70183ee4b07046d9f4eff3"},{"code":"#((fn [x] (reduce concat x)) (for [x % :let [y [x x]]] y))","problem":32,"user":"5017f840e4b02f523d7cc5e8"},{"problem":32,"code":"(fn duplicate [c]\n  (let [step (fn [c]\n               (when-let [s (seq c)] (let [fs (first s)]\n                 (concat (list fs fs) (duplicate (rest s))))))]\n    (lazy-seq (step c))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":32,"code":"(fn [xs]\n  (reduce #(conj %1 %2 %2) () (reverse xs)))","user":"5b62764ae4b0c6492753e725"},{"code":"(fn dupes [x]\n  (if (= 0 (count x))\n    '()\n    (cons (first x) (cons (first x) (dupes (rest x))))\n  )\n)","problem":32,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":32,"code":"(fn [x]\n  (reduce #(apply conj %1 (list %2 %2)) [] x))","user":"608711b1e4b0736b099e4303"},{"problem":32,"code":"( fn dupl\n  [ x ]\n  ( if ( empty? x ) '()\n    ( let [ built ( dupl ( rest x ) ) ]\n      ( conj ( conj built ( first x ) ) ( first x ) )\n    )\n  )\n)","user":"57561529e4b02ea1147992d3"},{"problem":32,"code":"#(loop [x % result []]\n   (if (empty? x)\n     result\n     (recur (rest x) (conj result (first x) (first x)))))","user":"5964c614e4b069c0a1a19770"},{"code":"(fn [s]\n  (mapcat #(identity [% %]) s))","problem":32,"user":"5175533fe4b0dea9bbfba575"},{"problem":32,"code":"#(reduce \n  (fn [a b]\n     (concat (concat a [b])[b])\n  ) '() %)","user":"5e79fcb9e4b085ba37836e08"},{"problem":32,"code":"; mapcat #(list % %)\n\n#(mapcat (fn [a][a a]) %)","user":"565487dce4b0f9d632dd8482"},{"problem":32,"code":"(fn\n  [a-seq]\n  (interleave a-seq a-seq))","user":"55e1bb20e4b050e68259b41f"},{"problem":32,"code":"(fn [as] (\n          reduce (fn [xs y] (conj (conj xs y) y)) nil (reverse as)\n          ))","user":"58334d18e4b089d5ab817c97"},{"code":"(fn \n  [coll]\n    (reduce #(conj % %2 %2) [] coll))","problem":32,"user":"4fee04a0e4b0678c553fc308"},{"problem":32,"code":"(fn [coll] \n  (reverse (reduce (fn [accum elem] (conj accum elem elem)) '() coll))\n  )","user":"53ed6976e4b0d648e757f4c4"},{"code":"#(reverse (reduce (fn [coll elem] (conj (conj coll elem) elem)) '() %))","problem":32,"user":"51b8e0dce4b050a1176cd69f"},{"code":"#(mapcat (fn [x] (repeat 2 x )) %)","problem":32,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":32,"code":"(fn dup\n  [[x & xs :as xst]]\n  (cond\n   (empty? xst) '()\n   :else (cons x (cons x (dup xs)))))","user":"5f317ae4e4b0574c87022c2a"},{"problem":32,"code":"; (fn [xs] (sort (into xs xs )))\nreduce #(conj %1 %2 %2) []","user":"59ee2284e4b0966464fe6a0f"},{"code":"(fn dupse [coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let[fs (first s)]\n        (cons fs\n              (cons fs (dupse (rest s))))))))","problem":32,"user":"4f7b3d53e4b06e829148e1a0"},{"code":"(fn [coll] (reduce concat (map list coll coll)))","problem":32,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":32,"code":"reduce (fn [dup x] (concat dup [x x])) []","user":"58c66990e4b021aa9917ed53"},{"code":"(fn duplo [l]\n  (if (empty? l)()\n    (conj (duplo (rest l)) (first l) (first l))))","problem":32,"user":"4eca7a87535d6d7199dd3705"},{"code":"#((fn [x] (mapcat list x x)) %)","problem":32,"user":"4fbef9a6e4b081705acca316"},{"code":"#(apply concat (map vector % %))","problem":32,"user":"4fe8e719e4b0547ebccb2430"},{"problem":32,"code":"#(reduce (fn [t x] (into t [x x])) [] %)","user":"5f8e865fe4b0715f5002d76d"},{"problem":32,"code":"#(mapcat (fn [e] (repeat 2 e)) %)","user":"569f4dabe4b0542e1f8d1491"},{"problem":32,"code":"(fn [col]\n   (mapcat #(list % %) col))","user":"506cc221e4b0a302964c548f"},{"problem":32,"code":"(fn [x] (apply concat (map #(conj '() % %) x)))","user":"594bdadce4b07ddc2dafae43"},{"code":"(fn [z] (reverse (concat (reduce (fn [x y] (conj x y y)) '() z))))","problem":32,"user":"4f15de56535d64f603146448"},{"problem":32,"code":"(fn [x]\n  (apply concat (map #(take 2 (repeat %)) x)))","user":"5550dad4e4b00713264bd9b0"},{"code":"(fn dup [s]\n  (when-let [[f & r] (seq s)]\n    (cons f (cons f (dup r)))))","problem":32,"user":"4edfd846535d10e5ff6f5345"},{"code":"(fn [coll] (reverse (reduce (fn [result item] (cons item (cons item result))) '() coll)))","problem":32,"user":"4e8aef69535d65386fec2114"},{"problem":32,"code":"(fn duplicate\n  [lst]\n  (mapcat #(list % %) lst))","user":"5e95013fe4b0fbed045a3800"},{"code":"(\n  fn doub[ s ](\n     \n    reverse(  reduce #( cons %2 ( cons %2 %1 ) ) '() s)  \n  )\t\n)","problem":32,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn dup [xs]\n  ((fn impl [xs out-xs]\n     (if (empty? xs)\n       out-xs\n       (recur (drop-last xs) (conj out-xs (last xs) (last xs)))))\n   xs '()))","problem":32,"user":"4f085a31535dcb61093f6c35"},{"code":"(fn [lst]\n  (reverse\n   (reduce (fn [memo aval]\n             (cons aval (cons aval memo))) '() lst)))","problem":32,"user":"51c76864e4b07ef393169e3f"},{"code":"(fn [l] (for [val l index [0 1]] val))","problem":32,"user":"4e351b47535deb9a81d77f2b"},{"code":"(fn dup [seq] (reduce (fn [acc e] (conj (conj acc e) e)) [] seq))","problem":32,"user":"4f13047d535d64f60314642c"},{"problem":32,"code":"(fn [v] (apply concat  (map #(list % %) v)))","user":"56102f50e4b05f002753df6b"},{"code":"reduce (fn dup [current-list item] (conj current-list item item)) []","problem":32,"user":"52e980b3e4b09f7907dd14af"},{"problem":32,"code":"(fn\n  [coll]\n  (apply concat (map #(repeat 2 %) coll)))","user":"54eb22a0e4b024c67c0cf845"},{"code":"(fn\n  [x]\n  (apply concat (map #(take 2 (repeat %)) x)))","problem":32,"user":"4ea8570f535d7eef308072f8"},{"problem":32,"code":"(fn dupl-recur\n  ([input-coll] (dupl-recur input-coll []))\n  ([input-coll output-coll] (if (empty? input-coll) output-coll (dupl-recur (rest input-coll) (let [the-first (first input-coll)] (conj (conj output-coll the-first) the-first)))))\n)","user":"57b356c2e4b0fbc9809a277b"},{"problem":32,"code":"(fn dup [x] (when (not (empty? x)) (conj (dup (rest x)) (first x) (first x))))","user":"55249f64e4b0882d96d091c6"},{"problem":32,"code":"(fn self [s]\n  (if (not (empty? s))\n    (concat (repeat 2 (first s)) (self (rest s)))))","user":"58a5a099e4b01a0c0b232918"},{"problem":32,"code":"(fn [xs] (mapcat identity (map #(take 2 (repeat %)) xs)))","user":"57995ac1e4b05b1deef9adbf"},{"problem":32,"code":"(fn dup-seq [lat]\n  (mapcat #(take 2 (repeat %)) lat))","user":"5845c8f6e4b089d5ab817e77"},{"code":"(fn foo [s] (if (not (empty? (rest s))) (cons (first s) (cons (first s) (foo (rest s)))) (cons (first s) s)))","problem":32,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":32,"code":"(fn xduplicate [x]                                                            \n  (loop [ elms (seq x) acc '() ]                                                \n    (if (= 0 (count elms))                                                      \n      ;; then                                                                   \n      acc                                                                       \n      ;; else                                                                   \n      (recur (rest elms)                                                        \n             (concat acc (conj '() (first elms) (first elms))                   \n        )))))","user":"564cc055e4b0284900eef676"},{"problem":32,"code":"#(let [f (fn dup [col]\n           (if (empty? col) \n             col \n             (let [h (first col) r (rest col)] \n               (concat [h h] (dup r)))))]\n           (f %))","user":"524a9556e4b05ef8e38e64b1"},{"problem":32,"code":"(fn [v] (mapcat #(vector % %) v))","user":"5463c452e4b01be26fd746c4"},{"problem":32,"code":"#(mapcat (partial repeat 2) %)\n\n;(fn [coll] (mapcat #(-> [% %]) coll))","user":"5c13da47e4b01240ff5671a6"},{"problem":32,"code":"(fn dup [x]\n  (loop [a x\n         result []]\n    (if (> (count a) 0)\n      (recur (rest a) (conj result (first a) (first a)))\n      result)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":32,"code":"reduce (fn[acc, next] `(~@acc ~next ~next)) []","user":"54a841b8e4b09f271ff37ca1"},{"problem":32,"code":"(fn [coll]\n\t(reduce #(conj %1 %2 %2) [] coll)  \n)","user":"5991d2fae4b0866487ed0d68"},{"problem":32,"code":"(fn duplicate \n  [x]\n  (loop [y x new_seq '()]\n    (if (empty? y)\n      (reverse new_seq)\n      (recur (rest y) (conj new_seq (first y) (first y))))))","user":"54091b82e4b0addc1aec66d5"},{"code":"#(loop [acc '() l %]\n       (if (empty? l)\n           acc\n         (recur (reverse (cons (first l) (cons (first l) (reverse acc))))\n                (rest l))))","problem":32,"user":"4e43c91f535dc968683fc4a5"},{"problem":32,"code":"#(apply concat (map (fn [input](repeat 2 input)) %))","user":"5617b1c0e4b06b1bb2182a13"},{"code":"(fn [a] \n  (reverse \n    (reduce into \n      (map #(list % %) a))))","problem":32,"user":"4fea1f9ee4b0547ebccb248b"},{"code":"(fn dup\r\n  ([lst res]\r\n    (if (= [] lst)\r\n      res\r\n      (let [x (first lst)]\r\n        (dup (rest lst) (conj res x x)))))\r\n  ([lst]\r\n    (dup lst [])))","problem":32,"user":"4e49fc29535dc968683fc4cb"},{"problem":32,"code":"(fn [lst]\n  (loop [lst lst\n         aux ()]\n    (if (empty? lst)\n      (reverse aux)\n      (recur (rest lst) (conj aux (first lst) (first lst))))))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":32,"code":"reduce (fn [x y] (concat x [y y])) '()","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"(fn bla2\n  ([x] (bla2 x [] 0))\n  ([x y z]\n       (if (< z (count x))\n         (bla2 x (conj (conj y (nth x z)) (nth x z)) (+ z 1))\n         y))\n\n)","problem":32,"user":"4ff6ed6ae4b0678c553fc384"},{"problem":32,"code":"(fn duplicate [ls]\n  (if (empty? ls)\n    '()\n    (conj (duplicate (rest ls)) (first ls) (first ls))))","user":"53d87449e4b0e771c302546d"},{"problem":32,"code":"(fn [col]\n (cond (vector? (first col))\n        (for [pairs (partition 2\n                               (flatten\n                                (take 2\n                                      (for [each col]\n                                        (repeat 2 each)))))]\n          (into [] pairs))\n        :else\n               (sort (flatten (repeat 2 col)))))","user":"56940617e4b0dcc4269f410b"},{"problem":32,"code":"(fn [s] (loop[h (first s) t (rest s) r ()] \n          (if (= h nil) (reverse r) (recur (first t) (rest t) (cons h (cons h r)) )) ))","user":"53b3ea79e4b047364c0444ab"},{"code":"#(reduce (fn [a b] (concat a (list b b))) nil %)","problem":32,"user":"4e53bf5e535d8a8b8723a275"},{"problem":32,"code":"(fn [things]\n  (reduce (fn\n            [acc cur]\n            (conj (conj acc cur) cur))\n          '()\n          (reverse things)))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":32,"code":"(fn dupseq\n  [xs]\n  (loop [act xs\n    dupedseq []]\n    (if (empty? act)\n    dupedseq\n    (let [[x & remaining] act]\n      (recur remaining\n        (into dupedseq\n          [x x]))))))","user":"5d68bfd0e4b0db5d338d1602"},{"problem":32,"code":"(fn [s]\n  (let [dd_ (fn [s a]\n              (loop [si s ai a]\n                (if (empty? si) (reverse ai) (recur (rest si) (concat (list (first si) (first si)) ai)))))]\n    (dd_ s [])))","user":"5762bf13e4b0994c1922fbae"},{"problem":32,"code":"#(for [v % _ (range 2)] v)","user":"55adf4d7e4b03311e7b732af"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s)\n    '()\n  \t(concat [(first s) (first s)] (dup (rest s)))))","user":"59733c91e4b01722bebd4c9b"},{"problem":32,"code":"(fn dup [s] (apply concat (map #(list % %) s)))","user":"58d737cee4b03c36ff7e5982"},{"problem":32,"code":"#(->> (concat % %)\n      sort)","user":"55f2b42be4b06e875b46ce4a"},{"problem":32,"code":"(fn [s] (reduce concat (map #(repeat 2 %) s)))","user":"5d6f0533e4b04d129b00f2d0"},{"code":"(fn [s] (apply concat (for [e s] [e e])))","problem":32,"user":"4f03ebf7535dcb61093f6b7f"},{"code":"mapcat #( cons % [%])","problem":32,"user":"4f065217535dcb61093f6c0c"},{"problem":32,"code":"(let\n    [\n      duplicateList (fn x [s builder]\n                      (if (not(empty? s))\n                        (x (butlast s) (cons (last s) (cons (last s) builder)))\n                        builder)\n                      )\n     \n    ]\n    (fn [s] (duplicateList s '()))\n  )","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":32,"code":"(fn dupl [x] (if (empty? x) '() (cons (first x) (cons (first x) (dupl (rest x))))))","user":"558466fce4b04192f3441eee"},{"problem":32,"code":"(fn [xs]\n   (loop [xs xs\n          s '()]\n      (cond\n        (empty? xs) (reverse s)\n        :else (recur (rest xs) (conj s (first xs) (first xs)) ))))","user":"5a8bc2a1e4b05369db4d24ef"},{"problem":32,"code":"(fn [xs] (mapcat #(vector % %) xs))","user":"5668dcc6e4b04acd4f672df8"},{"code":"(fn [s]\n  (reverse \n   (reduce \n    (fn [acc b] (into acc (list b b))) \n    '() \n    s)))","problem":32,"user":"50ff5887e4b017584cb41ccd"},{"problem":32,"code":"#(apply concat  (map (fn [num] (repeat 2 num)) %))","user":"54ccf9d5e4b057c6fda3a295"},{"code":"(fn [f]\n  (loop [s f ret []]\n    (if (empty? s)\n      (reverse ret)\n      (recur (rest s) (cons (first s) (cons (first s) ret))))))","problem":32,"user":"4ee251e9535d10e5ff6f5365"},{"problem":32,"code":"(fn [c] \n  (interleave c c)\n  )","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"mapcat (fn [x] (list x x))","problem":32,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn f [x] (reduce #(conj % %2 %2) [] x))","problem":32,"user":"4f547d2ce4b0a7574ea717e3"},{"problem":32,"code":"#(reverse\n  (reduce \n    (fn [acc in] \n      (conj (conj acc in) in)\n    )\n    '()\n  %\n   )\n )","user":"5710140fe4b09c608db7042e"},{"problem":32,"code":"(fn [x] (mapcat (fn [el] [el el]) x))","user":"52d6d490e4b09f7907dd1369"},{"problem":32,"code":"#(loop [input % result ()]\n   (if (empty? input) (reverse result)\n     (recur (rest input) (conj result (first input) (first input)))))","user":"58cd4949e4b03c36ff7e5886"},{"problem":32,"code":"#(loop [l1 % l2 '() ]\n  (cond \n    (empty? l1) (reverse l2)\n    :else (recur (rest l1) (concat [(first l1)(first l1)] l2))))","user":"55c2367ee4b0e31453f64978"},{"code":"(fn [coll]\r\n  (loop [x (first coll) tail (next coll) acc '()]\r\n    (if (nil? x)\r\n      acc\r\n      (recur (first tail) (next tail) (concat acc (repeat 2 x))))))","problem":32,"user":"4e6a6b83535d8ccf87e9fee0"},{"problem":32,"code":"mapcat (fn [x] (list x x ))","user":"55c40a8de4b0e31453f64993"},{"problem":32,"code":";#(reduce (fn [result el] (concat result [el el])) [] %)\n#(interleave % %)","user":"59837909e4b021a7a535fe16"},{"problem":32,"code":"(fn [xs]\n   (interleave xs xs))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn [x]\n  (loop [doublelist [] restoflist x]\n    (if (empty? restoflist)\n      doublelist\n      (recur (conj doublelist (first restoflist) (first restoflist)) (rest restoflist))\n      )\n    )\n  )","problem":32,"user":"52cc7c40e4b07d0d72b27364"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc item] (conj acc item item)) [] s))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"problem":32,"code":"(fn [a]\n  (reduce #(conj %1 %2 %2) [] a))","user":"57a4f5cae4b0a966079561f0"},{"problem":32,"code":"(fn [x] (reduce #(into % [%2 %2]) [] x))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"problem":32,"code":"(fn doubler [coll]\n  (mapcat #(repeat 2 %) coll))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"(partial \n  (fn [out coll]\n    (if (= '() coll)\n      (reverse out)\n      (recur (conj out (first coll) (first coll))\n             (rest coll))))\n  '())","problem":32,"user":"4eec82fe535d93acb0a668ae"},{"problem":32,"code":"(fn[x] (sort (into [] (concat x x ))))","user":"556ff948e4b09a3098a52527"},{"problem":32,"code":"(fn [xs] (reverse (reduce (fn [o el] (conj o el el)) () xs)))","user":"56e1f9a6e4b03a7c14b85a2d"},{"problem":32,"code":"(fn [s]\n  (reduce #(concat % (repeat 2 %2)) [] s))","user":"6023a3abe4b0d5df2af22212"},{"problem":32,"code":"(fn dup [members] (\n                if (= members '())\n\t\t\t\t\t'()\n                   \t(cons (first members) (cons (first members) (dup (rest members))))\n                      \n                   \n                   )\n  )","user":"5471f090e4b094393f72dd6e"},{"code":"(fn [x] \r\n    (interleave x x))","problem":32,"user":"4e370a04535deb9a81d77f37"},{"problem":32,"code":"#(reduce (fn[s e](conj s e e))[]%)","user":"560d491ae4b05f002753df3b"},{"problem":32,"code":"(fn duplicate-sequence\n  [s]\n  (apply concat [] (map #(identity [% %]) s)))","user":"5673881fe4b05957ce8c6120"},{"code":"(fn [in](reverse (reduce (fn [a b] (cons b (cons b a))) '() in)))","problem":32,"user":"4e773be8535d324fb2983d6e"},{"problem":32,"code":"(fn [xs] (reduce #(into %1 (repeat 2 %2)) [] xs))","user":"560e9a2de4b05f002753df52"},{"code":"(fn dup\n    ([n]\n        (dup n '()))\n    ([n acc]\n        (if  (empty? n)   acc\n             (recur (butlast n) (conj acc (last n) (last n))))))","problem":32,"user":"4e51fccf535d302ef430da6b"},{"code":"(fn [lst] (interleave lst lst))","problem":32,"user":"4ec6559a535d6d7199dd36c9"},{"problem":32,"code":"#((fn dupl [x,y] (\n                  if (= (count x) y) \n                      x \n                      (dupl (concat (rest x) (repeat 2 (first x))) (+ y 2))\n                  ))\n  % 0)","user":"548b7db8e4b0e286459a11fd"},{"problem":32,"code":"#(reduce (fn [items x] (conj items x x)) [] %1)","user":"57df9f60e4b0bd073c202467"},{"problem":32,"code":"#(mapcat (juxt identity identity)%)","user":"5aa8e841e4b0d174b936c8d5"},{"code":"(fn dupSeq [x]\n  \t(mapcat #(conj '() %1 %1) x)\n)","problem":32,"user":"5113e492e4b0029845b11c58"},{"problem":32,"code":"(fn [x] (reduce concat (map #(vector % %) x)))","user":"53fc4abae4b0de5c4184859b"},{"problem":32,"code":"(fn[x] (apply concat (map #(repeat 2 %) x)))","user":"52c8a814e4b0c2d177d62138"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll) (first coll))))))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":32,"code":"(fn [c]\n  (let [l ()]\n    (apply concat (map #(conj l % %) c))))","user":"55228c3ce4b0882d96d091a2"},{"problem":32,"code":"(partial reduce (fn [acc d]\n  (conj acc d d)) [])","user":"5b38d771e4b02d533a91bbb0"},{"problem":32,"code":"(fn dup [l] \n   (if (= (count l) 0) () \n     (concat (list (first l)) \n            (list (first l)) (dup (rest l)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":32,"code":"(fn [lis]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() lis)))","user":"607dd962e4b03d835a6eaed2"},{"code":"(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))","problem":32,"user":"4f1abbfb535d64f60314646e"},{"code":"reduce (fn [a b] (conj a b b)) []","problem":32,"user":"4fefd624e4b0678c553fc31b"},{"problem":32,"code":"(fn [lst] \n  (loop [j 0 res '()]\n    (if (< j (count lst))\n    (recur (inc j) (conj res (nth lst j) (nth lst j)))\n    (reverse res))))","user":"53dfe311e4b0d874e779ae47"},{"problem":32,"code":"(fn f [s] (if (empty? s) s (let [fs (first s) rs (rest s)] (cons fs (cons fs (f rs))))))","user":"54d95ce8e4b024c67c0cf74a"},{"code":"(fn dupe [[x & xs]]\n  (if (empty? xs)\n    (list x x)\n    (concat (list x x) (dupe xs))))","problem":32,"user":"50fe2420e4b03cd852b4e84a"},{"problem":32,"code":"(fn duplicate-sequence [s]\n  (loop [s s, acc []]\n    (if (empty? s)\n      acc\n      (recur (next s) (conj acc (first s) (first s))))))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":32,"code":"(fn [s]\n  (seq \n\t  (reduce (fn [new-s x]\n    \t        (conj (conj new-s x) x))\n              []\n              s)))","user":"57f7c74ee4b0d3187e900902"},{"code":"(comp (partial reduce (fn [acc i] (conj acc i i)) []))","problem":32,"user":"4fc588bee4b0ee37620e17fa"},{"problem":32,"code":"#(mapcat identity (map (fn [v] (repeat 2 v)) %))","user":"57202eb7e4b0c5bde472c090"},{"problem":32,"code":"(fn [x]\n  (loop [new-list [] cnt 0]\n    (if (= (count new-list) (* (count x) 2))\n      new-list\n      (recur (conj new-list (nth x cnt) (nth x cnt)) (inc cnt)))))","user":"5756e218e4b02ea1147992e5"},{"problem":32,"code":"(fn doub [xs] \n   (if (empty? xs)\n     nil\n     (cons (first xs) (cons (first xs) (doub (rest xs))))))","user":"56c26880e4b05cc29241ee81"},{"code":"(fn [s]\n  (reduce\n    #(apply conj %1 %2)\n    (map (fn [i] [i i]) s)))","problem":32,"user":"4ea67906535d7eef308072e4"},{"problem":32,"code":"(fn my-dup [coll]\n  (interleave coll coll))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn [n] (apply concat (map #(repeat 2 %1) n)))","problem":32,"user":"52ecd34ee4b0705949c44457"},{"problem":32,"code":"(fn [x] (\n         reduce \n         #(conj %1 %2 %2)\n         []\n         x\n         )\n  )","user":"57762befe4b0979f8965162f"},{"problem":32,"code":"(fn [coll]\n  (reverse\n    (loop [c coll accum nil]\n      (if (empty? c) accum\n        (let [head (first c)]\n          (recur (rest c) (concat (list head head) accum)))))))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":32,"code":"(fn dbl [x] (apply concat (map (fn [x] [x x])x)))","user":"545d5c3be4b01be26fd7466d"},{"problem":32,"code":"(fn dupseq\n  [coll]\n  (cond\n    (empty? coll) '()\n      :else (concat (repeat 2 (first coll)) (dupseq (rest coll)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"#(reduce (fn [ys x] (conj ys x x)) [] %)","problem":32,"user":"4e513758535dc968683fc4f3"},{"problem":32,"code":"(fn [x]\n  (loop [res [],x1 (seq x)]\n    (let [hd (first x1),tail (rest x1)]\n      (if (empty? x1) res\n        (recur (concat res [hd hd]) tail)))))","user":"55486ee6e4b0a04f7929955a"},{"problem":32,"code":"(fn double-duplicate\n  [seq]\n  (if (empty? seq)\n    []\n    (let [[first & rest] seq]\n      (concat (list first first) (double-duplicate rest)))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"code":"mapcat #( list % %)","problem":32,"user":"4e9fde3c535d7eef3080729b"},{"problem":32,"code":"reduce #(conj (conj % %2) %2) (vec [])","user":"4f05c087535dcb61093f6c00"},{"problem":32,"code":"#(loop[a 0 x []]\n  \t(if(< a (count %))\n\t\t(recur (inc a)(conj(conj x (nth % a))(nth % a)))\n    \tx   \n  \t) \n)","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn dup [input]\n    (if(empty? input) \n        '()\n        (conj (dup (rest input)) (first input) (first input)))\n)","problem":32,"user":"51d1111ce4b067c36548635f"},{"problem":32,"code":"#(reduce into [] (map (fn [v] (into v v)) (partition-by identity %)))\n\n; Learned the following\n;\n; #(interleave % %)\n; #(sort (into % %))\n; reduce #(conj %1 %2 %2) []","user":"5eccc5c2e4b016b56eae058f"},{"code":"(fn [coll] (reduce into (map #(vector % %) coll)))","problem":32,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":32,"code":"reduce (fn[x y] (conj x y y)) []","user":"53ed2fafe4b0d648e757f4c1"},{"problem":32,"code":"#(loop [x % r []]\n         (if (empty? x) r\n             (recur (rest x) (conj r (first x) (first x)) )))","user":"579ea15ee4b05b1deef9ae2a"},{"code":"reduce (fn[acc, x] (concat acc (list x x)  ))[]","problem":32,"user":"4ffd92e7e4b0678c553fc3e3"},{"code":"(fn duplicateseq [x]\n  (reduce\n    (fn [y z]\n      (conj y z z))\n    '()\n    (reverse x)))","problem":32,"user":"52dad8bde4b09f7907dd13be"},{"problem":32,"code":"(fn kaka [l]\n    (if (seq l)\n      (conj (conj (kaka (rest l)) (first l) ) (first l))\n      '()))","user":"56b1fc92e4b0982f16b37dfc"},{"problem":32,"code":"(fn [coll]\n   (mapcat identity \n           (map (fn [x] (repeat 2 x)) coll)))","user":"55ec1048e4b0121d4835fdc3"},{"code":"(fn [s]\n  (loop [s s\n         ds []]\n    (if s\n      (recur (next s) (conj ds (first s) (first s)))\n      ds)))","problem":32,"user":"51460e4ce4b04ef915e37314"},{"problem":32,"code":"(fn\n  [sequence]\n  (interleave sequence sequence)\n)","user":"5c493046e4b0e06e1360a3cb"},{"code":"(fn [x] \n  (loop [x (reverse x) result ()]\n    (if (empty? x) result\n      (recur \n        (rest x) \n        (conj result (first x) (first x))))))","problem":32,"user":"4dadc6f2c9a9d6ed4099dc57"},{"problem":32,"code":"#(reduce (fn [c n] (conj (conj c n) n) ) [] %)","user":"5dcfdf23e4b0948ae9d9ad43"},{"problem":32,"code":"(fn [zeq] (loop [ll zeq nl []] (if (empty? ll) nl (recur (rest ll) (conj (conj nl (first ll)) (first ll))  ))))","user":"5ea97df7e4b00a66d4a951c8"},{"problem":32,"code":"(fn [in]\n  (reduce (fn [x y] (conj (conj x y) y))\n          []\n          in))","user":"56c12aa2e4b0839206b9d682"},{"code":"(fn [coll] \n   (reverse (reduce #(conj (conj % %2) %2) '() coll)))","problem":32,"user":"4feddf2ee4b0198f34b063be"},{"problem":32,"code":"(fn dupp [l]\n  (if (empty? l)\n    '()\n    (let [f (first l)]\n      (cons f (cons f (dupp (rest l)))))))","user":"551c6bcee4b07993ea3788df"},{"problem":32,"code":"(fn [xs] (reduce (fn [acc, x] (conj (conj acc x) x)) [] xs))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":32,"code":"(fn [x] \n (reverse (reduce #(conj (conj % %2) %2) '() x))\n  )","user":"5e85b853e4b09a7a73c8bbd5"},{"problem":32,"code":"reduce \n  (fn [ret elem] \n    (conj (conj ret elem) elem))\n  []","user":"56ca2f25e4b0ea9b8538f716"},{"code":"(fn f [x] (if (empty? x) x (conj (f (rest x)) (first x) (first x)    ) ))","problem":32,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn [l ]\n  (loop [res '() l (reverse l)]\n    (if (empty? l)\n      res\n      (let [n (first l)]\n        (recur (conj res n n) (rest l))))))","problem":32,"user":"53527ce8e4b084c2834f4af1"},{"problem":32,"code":"(fn D [s] (if (empty? s) s (conj  (D (rest s)) (first s) (first s))))","user":"4e8b5cb8535d65386fec211b"},{"code":"#(reduce (fn [a e] (conj a e e)) [] %)","problem":32,"user":"4fc3a72ae4b081705acca342"},{"code":"(fn [theSeq] \n  (reverse ((fn compress [theSeq newSeq]\n\t\t(if (empty? theSeq)\n\t\t\tnewSeq\n\t\t\t(compress (rest theSeq) (cons (first theSeq) (cons (first theSeq) newSeq))))) theSeq '())))","problem":32,"user":"4f1c2336535d64f60314647f"},{"problem":32,"code":"(fn [myseq] \n  (apply concat (map #(list % %) myseq)))","user":"576aa367e4b0a07e8fc1811e"},{"problem":32,"code":"(fn [x] (reduce (fn [a b] (conj a b b)) [] x))","user":"587c48cce4b01531a375eb16"},{"code":"(fn [s]\n  (apply concat \n         (map #(list % %) s)))","problem":32,"user":"4f91fd31e4b0dcca54ed6ca8"},{"problem":32,"code":"(fn ms\n             ([lis]\n              (ms lis [])\n              )\n             ([lis res]\n              (if (empty? lis)\n                res\n                (ms (rest lis) (conj res (first lis) (first lis)))\n                )\n              ))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":32,"code":"(fn my-dup [my-seq] (reduce concat (map #(take 2 (repeat %)) my-seq)))","user":"548f19a8e4b0e286459a1231"},{"problem":32,"code":"(partial reduce (fn [dup item] (concat dup (list item item))) '())","user":"55f014ebe4b06e875b46ce1b"},{"problem":32,"code":"#(apply concat (for [i %] [i i]))","user":"53fb4843e4b0de5c4184857d"},{"problem":32,"code":"(fn [seqn] (reduce (fn [s, i] (conj s i i)) [] seqn))","user":"5519c157e4b00ace28fe6e32"},{"problem":32,"code":"(fn [x]\n       (mapcat #(repeat 2 %) x))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":32,"code":"(fn [l] (reduce (fn [a b] (concat a [b b])) [] l))","user":"5526ecc4e4b0ffed3738f928"},{"code":"#(reduce (fn [coll x]\n  (conj (conj coll x) x)) [] %)","problem":32,"user":"4e6f1b7a535d5021c1a89618"},{"problem":32,"code":"(fn [elements]\n  (apply concat (map (fn [x] [x x]) elements)))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":32,"code":"(fn [xs]\n  (reverse (reduce (fn [col x] \n                     (-> col\n                         (conj x)\n                         (conj x))) \n                   '() \n                   xs)))","user":"55507a1ae4b00713264bd9a7"},{"code":"(fn [coll](apply concat (map #(repeat 2 %) coll)))","problem":32,"user":"52161028e4b0bf4bffd29cb4"},{"problem":32,"code":"(fn dupe-twice [s]\n  (apply concat (for [val s] [val val])))","user":"4e6fe3a6535d5021c1a89629"},{"problem":32,"code":"#(reverse (reduce (fn [x y] (cons y (cons y x))) '() %))","user":"5613a96ae4b05f002753dfa4"},{"problem":32,"code":"#(reduce (fn [acc item] (conj acc item item))\n         []\n         %)","user":"5ef8e9e0e4b09b61f08553cb"},{"code":"reduce #(apply conj %1 [%2 %2]) []","problem":32,"user":"4f12ab23535d64f603146429"},{"problem":32,"code":"#(apply concat (map (fn [a] [a a])\n               %))","user":"5c26c9b3e4b07e362c2305c5"},{"problem":32,"code":"(fn [xs]\n\t(reduce #(concat %1 (repeat 2 %2)) [] xs))","user":"54c74a78e4b045293a27f637"},{"problem":32,"code":"(fn [x] \n  (loop [ e x\n          res '() ]\n    (if (empty? (rest e))\n      (reverse (conj res (first e) (first e)))\n      (recur (rest e) (conj res (first e) (first e))))))","user":"57e572b5e4b0bfb2137f5ad7"},{"code":"(fn d[s]\n  (if (= 1 (count s))\n     (list (first s) (first s))\n     (concat (list (first s) (first s)) \n          (d (rest s)))))","problem":32,"user":"4e842ebb535db62dc21a62df"},{"problem":32,"code":"#(loop [in (reverse %)\n       res '()]\n  (if (empty? in)\n    res\n    (recur (rest in) (conj res (first in) (first in)))))","user":"5a059b33e4b01bb0ae8afdb5"},{"problem":32,"code":"(partial mapcat #(list % %) )","user":"4f0554aa535dcb61093f6bf5"},{"code":"(fn dup ([x] (when (>= (count x) 1)\n   (cons (first x) (cons (first x) (dup (rest x)))) \n   )))","problem":32,"user":"4e6cf521535de274dd8d818b"},{"problem":32,"code":"(fn [x]\n  (apply concat (map (fn [e] [e e]) x)))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn [lista] (loop [temp lista acc '()] (if (empty? temp) (reverse acc) (recur (rest temp) (let [element (first temp)] (conj (conj acc element) element))))))","problem":32,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn mydouble\n  [col]\n  (loop [col col\n         r '()]\n    (let [elem (first col)]\n      (if elem\n        (recur (rest col) (conj (conj r elem) elem))\n        (reverse r)))))\n\n;; ;-(\n;; mapcat #(list % %)","problem":32,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":32,"code":"#(mapcat (fn [x] (vector  x x)) %)","user":"56785234e4b05957ce8c6177"},{"problem":32,"code":"(fn [s] (apply concat (map (partial repeat 2) s)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":32,"code":"(fn [coll] (mapcat #(conj '() % %) coll))","user":"58934052e4b00487982d523a"},{"code":"(fn [s] (mapcat (fn [x] [x x]) s))","problem":32,"user":"4ed188c8535d44c135fd68cf"},{"code":"#(reduce (fn [coll x] (conj coll x x)) [] %)","problem":32,"user":"531ccb1fe4b08068f379eda7"},{"problem":32,"code":"(fn [x] (reduce concat (map #(do [% %]) x)))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn [lst] (apply concat (map #(list % %) lst)))","problem":32,"user":"52c25645e4b07a9af579237d"},{"code":"(fn [s] (reduce #(conj %1 %2 %2) [] s))","problem":32,"user":"50b4383fe4b001349b2f4abf"},{"code":"(fn duplicate-seq [xs]\n  (cond (empty? xs) '()\n        true (conj (duplicate-seq (rest xs)) (first xs) (first xs))))","problem":32,"user":"4ef6f5ea535dced4c769f250"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (seq)\n       (reduce \n         #(conj (conj %1 %2) %2)\n         '())\n       (reverse)\n       )\n  )","user":"553f70cae4b0a04f792994f8"},{"problem":32,"code":"#(reduce\n  (fn [r n]\n    (conj r n n)\n    )\n  []\n  %)","user":"577ab41fe4b0d3393e5deb05"},{"problem":32,"code":"(fn number32 [xs]\n  (mapcat identity  (map #(list % %) xs)))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn dub [xs] (reduce #(conj %1 %2 %2) '[] xs))","problem":32,"user":"523b82efe4b07becd5be21f0"},{"problem":32,"code":"#(apply concat (map (fn _ [x] [x x]) %))","user":"5aba34c5e4b073f1774426a3"},{"code":"#(reduce\n     (fn [ss s]\n       (conj ss s s))\n     [] %)","problem":32,"user":"516e2246e4b092a6408c5bc5"},{"problem":32,"code":"#(reduce (fn [a b] (conj (conj a b)b)) [] %)","user":"5fec4f5ee4b05ac5b16ea1bf"},{"code":"(fn [coll]\n           (apply concat (map #(repeat 2 %) coll)))","problem":32,"user":"4f3cd535e4b0e243712b1f56"},{"problem":32,"code":"(fn [s] (reduce concat (map #(take 2 (repeat %)) s)))","user":"54edc818e4b024c67c0cf865"},{"code":"#(reverse (reduce (fn [s x] (\n      cons x (cons x s)\n   )) '() %))","problem":32,"user":"52e295fae4b09f7907dd1437"},{"problem":32,"code":"(fn [s]\n  (reduce\n   (fn [s v]\n     (conj s v v))\n   [] s))","user":"58333b19e4b089d5ab817c94"},{"problem":32,"code":"(fn [x](sort(concat x x)))","user":"591c2f4ee4b09b4ee5954bfc"},{"problem":32,"code":"(fn dup [xs]\n  (when-let [f (first xs)]\n    (cons f (cons f (dup (next xs))))))","user":"5488872ee4b0e286459a11d3"},{"problem":32,"code":"(fn [x]\n    (loop [y '()\n         \tz (seq x)]\n      (if (= z '())\n        y\n          (recur (concat y [(first z)] [(first z)]) (rest z))\n       )\n     )\n )","user":"5e265173e4b05b4b01516175"},{"problem":32,"code":"(fn dup\n  [lst]\n  \n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (dup (rest lst))))))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":32,"code":"(fn [s] (reduce (fn [acc e] (into acc [e e])) [] s))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":32,"code":"(fn [myseq] (reduce concat (map #(list % %) myseq)))","user":"55076bf6e4b021ccfedb96a6"},{"problem":32,"code":"(fn [arr] (apply concat (map #(list % %) arr)))","user":"57ccedaae4b0c746388ab88e"},{"problem":32,"code":"(comp (partial reduce concat nil) (partial map (partial replicate 2)))","user":"506f0968e4b09350ab4199f5"},{"problem":32,"code":"#(interleave % %)\n\n;(defn dup-sequence [x]\n;  (if (= x []) ()\n;     (flatten (reverse (conj (conj (conj () (first x)) (first x)) (dup-sequence (rest x)))))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":32,"code":"(fn [x]\n  (apply concat (map (fn [y] (conj [y] y)) x))\n)","user":"5be15f4de4b0ed4b8aab4c9b"},{"problem":32,"code":"(fn\n  [lst]\n  (->> (map (fn [item] (conj () item item)) lst)\n       (reduce concat)))","user":"56df6498e4b0ca2494a095f8"},{"problem":32,"code":"reduce (fn [a v] (concat a (repeat 2 (identity v)))) ()","user":"55ead489e4b0121d4835fdb6"},{"problem":32,"code":"; mapcat #(list % %)\n\nmapcat #(repeat 2 %)","user":"53e9dce1e4b036ad0777e4bc"},{"problem":32,"code":"(fn dupes [coll]\n  (let [f (first coll)\n        r (rest coll)]\n    (cond\n     (empty? coll) nil\n     :else (concat (cons f(cons f '())) (dupes r)))))","user":"559f06bae4b0acc240e314e6"},{"problem":32,"code":"(fn [arr] (apply concat (map #(vector % %) arr)))","user":"55dd7f72e4b050e68259b3c4"},{"problem":32,"code":"#(reduce (fn [l v] (concat l [v v])) [] %)","user":"5749ab6ae4b009280f9f2b9f"},{"problem":32,"code":"mapcat #(repeatedly 2 (fn [] %))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":32,"code":"#(reverse\n  (reduce \n   (fn [mylist item]\n     (conj mylist item item)\n     ) () % \n   )\n  )","user":"53f3b216e4b0742d9025b0f8"},{"problem":32,"code":"#(for [a %\n        b [1 2]]\n    a \n    )","user":"5a1bec89e4b0ff51aa4b322f"},{"problem":32,"code":"(fn [v] \n  (loop [in v out []]\n    (if (empty? in)\n      (reverse out)\n     (recur (rest in) (cons (first in) (cons (first in) out))))))","user":"51be00cae4b0ff155d51d2b8"},{"problem":32,"code":"(fn [in]\n  (into () (reduce #(conj %1 %2 %2) '()  in))\n  )","user":"546b24a0e4b00cfc9eacc166"},{"code":"(fn [x] (sort (concat x x)))","problem":32,"user":"4f2f7e87e4b0d6649770a06f"},{"problem":32,"code":"(fn [x] (reduce into (map #(vec [% %]) x)))","user":"5546704be4b0a04f7929953d"},{"problem":32,"code":"(fn\n  [input-array]\n  \t(reduce (fn [array element] (conj (conj array element) element)) [] input-array))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":32,"code":"(fn [collx]\n(letfn [(dup [coll]\n  (if (seq coll)\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))]\n  (dup collx)))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":32,"code":"(fn [x] (mapcat identity (map (fn [j] [j j]) x)))","user":"51515a19e4b03e678e393acc"},{"code":"(fn dup [[x & xs]]\n  (if x (concat [x x] (dup xs))\n         []))","problem":32,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":32,"code":"(fn [col]\n  (reduce\n   (fn [prev cur]\n      (concat prev [cur] [cur]))\n   []\n   col))","user":"5a144fd8e4b0ff51aa4b319a"},{"problem":32,"code":"(fn dupe-seq-elems [xs]\n  (let [l (first xs), r (next xs)]\n    (concat \n      [l, l]\n      (when (seq r)\n        (dupe-seq-elems r)))))","user":"55ecaee4e4b0121d4835fdcd"},{"code":"(fn [coll]\n  (reduce into []\n         (for [x coll]\n           (repeat 2 x))))","problem":32,"user":"51ab734ee4b04e3dc0c27b34"},{"problem":32,"code":"(fn \n  [coll]\n  (mapcat #(repeat 2 %) coll))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":32,"code":"(fn [c]\n(loop [coll c acc [] ]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (conj acc (first coll) (first coll) ) ))))","user":"54bb9730e4b0ed20f4ff6ebf"},{"code":"(fn dup\n  ([x] (dup [] x))\n  ([x y] (if (empty? y)\n           x\n           (dup (conj x (first y) (first y) ) (rest y)))))","problem":32,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"#(reduce into (reverse (map (fn [x] (list x x))%)))","problem":32,"user":"4f4a34b2e4b0d56e7bb92c09"},{"code":"(fn f [s]\n  (if-let [[x & xs] (seq s)]\n    (conj (f xs) x x)\n    '()))","problem":32,"user":"504ffb8fe4b0a02f9cffdeae"},{"code":"(fn f [x] (cond (empty? x) x :default (cons (first x) (cons (first x) (f (rest x))))))","problem":32,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"(fn [col] (mapcat #(identity [% %]) col))","problem":32,"user":"52c1bd29e4b07a9af579236a"},{"problem":32,"code":"(fn [x] (sort (take (* 2 (count x)) (cycle x))))\n\n;(fn [coll] (sort (concat coll coll)))","user":"57c44053e4b05aa3c4741ccb"},{"problem":32,"code":"(fn [seqs]\n  (mapcat #(repeat 2 %) seqs))","user":"5db9a6c3e4b010eb3c36cd56"},{"problem":32,"code":"(fn [coll]\n  (mapcat (fn [x] (vector x x)) coll))","user":"5da306a3e4b000c986472be7"},{"problem":32,"code":"(fn dup [s] (if (seq s)\n              (lazy-seq (cons (first s) (cons (first s) (dup (rest s)))))\n              nil))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [se]\n    (loop [lst '()\n           cur (first se)\n           rst (rest se)]\n      (cond\n       (nil? cur) (reverse lst)\n       :else (recur (conj lst cur cur) (first rst) (rest rst)))))","problem":32,"user":"4f038b62535dcb61093f6b1c"},{"code":"(fn [wo] (apply concat (map #(list % %) wo)))","problem":32,"user":"4f62ef0ce4b0defedf855fdc"},{"problem":32,"code":"(fn [x]\n    (->> x\n         (map #(vector % %))\n         (mapcat identity)))","user":"58447708e4b089d5ab817e4b"},{"problem":32,"code":"#(reduce (fn [res elt] (conj res elt elt)) [] %)","user":"55eaca20e4b0121d4835fdb4"},{"problem":32,"code":"(fn dupli\n  [inputs]\n  (if (empty? inputs)\n    inputs\n    (conj (dupli (rest inputs)) (first inputs) (first inputs))\n    )\n  )","user":"5688873ae4b0dcc4269f406b"},{"problem":32,"code":"(fn duplicate [col] (if (= col nil) [] (concat [(first col) (first col)] (duplicate (next col)))))","user":"55204412e4b08d5046aa8a5f"},{"code":"(fn [s] (reverse (reduce (fn [s e] (conj (conj s e) e)) '() s)))","problem":32,"user":"526f9715e4b03e8d9a4a7372"},{"code":"(fn [col]\n  (loop [col1 col fcol []]\n    (if (empty? col1)\n        fcol\n        (recur (rest col1) (conj fcol (first col1) (first col1))\n  ))))","problem":32,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [sq]\n   (mapcat #(list % %) sq))","problem":32,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn hoge [x]\n  (if (= (count x) 1) (list (first x) (first x))\n      (cons (first x) (cons (first x) (hoge (rest x))))))","problem":32,"user":"4e2e6460535deb9a81d77f0b"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [result item] (conj result item item)) [] coll))","user":"56822f37e4b0945ebc182a8d"},{"problem":32,"code":"(fn [origlist]\n   (loop [inlist origlist outlist '[]]\n     (if (= 0 (count inlist))\n       (into '() outlist)\n       (let [a (first inlist)]\n         (recur (rest inlist) (cons a (cons a outlist)))))))","user":"58803ed9e4b0f1effa3b760f"},{"problem":32,"code":"reduce \n                                    (fn [col element] \n                                        (conj col element element)) []","user":"5957cc41e4b066ee0a44af76"},{"problem":32,"code":"#(sort (reduce (fn [acc v] (into acc (repeat 2 v))) '() %))","user":"589714cbe4b00487982d52b1"},{"problem":32,"code":"(fn [x] (mapcat (fn [x] (list x x)) x))","user":"56084e91e4b046a4fc0ac00f"},{"code":"#(sort (into [] (concat %1 %1)))","problem":32,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":32,"code":"(fn [coll]\n  (apply concat (map #(replicate 2 %) coll)))","user":"5695e96ae4b0dcc4269f412c"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [acc cur] (apply conj acc (repeat 2 cur)))\n          '()\n          (reverse xs)))","user":"5da7176ae4b000c986472c13"},{"code":"(fn dup [l] \n\t\t(if (> (count l) 1)\n\t  \t\t(concat [(first l) (first l)] (dup (rest l)))\n\t\t\t[(first l) (first l)]\n\t\t))","problem":32,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [array](\n  mapcat #( repeat 2 %) array\n))","problem":32,"user":"4f542fd9e4b0a7574ea717db"},{"problem":32,"code":"(fn\n    [-s]\n    (loop [s -s new []]\n          (if (empty? s)\n              new\n              (recur (rest s) (concat new (repeat 2 (first s)))))))","user":"57e3f709e4b0bfb2137f5aaf"},{"code":"(fn [s]\n    (loop [s s\n           cur []]\n      (if (empty? s)\n        cur\n        (recur (rest s) (conj cur (first s) (first s))))))","problem":32,"user":"4ef9b021535dced4c769f269"},{"code":"(fn [ls]\r\n  (loop [x ls\r\n       y []]\r\n  (if (empty? x)\r\n  y\r\n  (recur (rest x) (conj y (first x)(first x))))))","problem":32,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"#(loop [in % seq []]\n  (if (= in '())\n  seq\n  (recur (rest in)\n    (conj (conj seq (first in)) (first in)))))","problem":32,"user":"4faec810e4b081705acca24e"},{"problem":32,"code":"(fn [x]\n   (apply concat (map (fn [v] (list v v)) x)))","user":"5d73fb31e4b02e6b30c93516"},{"problem":32,"code":"(fn [x] (reduce #(concat %1 ((juxt identity identity) %2)) '() x))","user":"5cb0f70ce4b026601754b8c1"},{"code":"(fn [s] (mapcat #(list %1 %1) s))","problem":32,"user":"4f4e978ae4b03ad3f0c10ccb"},{"problem":32,"code":"#(reverse (loop [s1 % s2 nil]\n   (if (empty? s1) s2 (recur (rest s1) (cons (first s1) (cons (first s1) s2))))))","user":"592bb806e4b072a2710fcf46"},{"problem":32,"code":"(fn [xs] \n  (mapcat (partial repeat 2) xs))","user":"5e41a67be4b01d43a70e8e56"},{"problem":32,"code":"(fn duplicate-each [x]\n  (cond\n   (empty? x) nil\n   :else (conj (duplicate-each (rest x)) (first x) (first x))))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":32,"code":"(fn [col]\n  (->> col\n       (repeat 2)\n       (apply concat)\n       (sort)))","user":"53ec14b9e4b036ad0777e500"},{"problem":32,"code":"#(sort (let [lst %] (concat lst %)))","user":"56f73913e4b08e7d20b9682d"},{"problem":32,"code":"(fn [input] (loop [in input\n                   out [] ]\n              (if (nil? (first in))\n                out\n                (recur (rest in) (conj (conj out (first in)) (first in))))))","user":"579aff09e4b05b1deef9ade7"},{"problem":32,"code":"(fn doubleseq [sq] \n  (if \n    (empty? sq)\n    '()\n    (if\n      (empty? (rest sq)) \n      (repeat 2 (first sq))\n      (concat (repeat 2 (first sq)) (doubleseq (rest sq))))\n    ) \n  )","user":"53342a1ce4b019098a6f8b8b"},{"problem":32,"code":"(fn [coll] (apply concat (map (fn [x] [x x]) coll)))","user":"5a61bf79e4b0512ff01cd97b"},{"code":"(fn duplicate-seq [seq]\n  (letfn [(duplicate [target]\n  (conj () target target))]\n\n    (if (= (count seq) 1)\n      (duplicate (first seq))\n      (reverse (into (duplicate (first seq)) (duplicate-seq (rest seq)))))))","problem":32,"user":"51177fbce4b0e0897831a60b"},{"problem":32,"code":"#(reduce (fn [x y] do (conj x y y)) [] %)","user":"57a14414e4b0c3d858beb8e4"},{"problem":32,"code":"(fn [coll]\n  (reduce into \n   (reverse \n    (map (partial repeat 2) coll))))","user":"565b941ce4b068f2fe63dc07"},{"code":"#(reduce (fn [v i] (conj (conj v i) i)) [] %)","problem":32,"user":"4f3e6244e4b0e243712b1f85"},{"problem":32,"code":"(fn dup [xs] \n  (if (empty? xs)\n    xs \n    (cons (first xs) (cons (first xs) (dup (rest xs))))))","user":"548cd637e4b0e286459a1210"},{"problem":32,"code":"#(loop [a % c ()]\n\t(if (empty? a)\n\t\tc\n\t\t(recur (rest a) (concat c (list (first a)) (list (first a))))\n\t)\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"problem":32,"code":"(fn duplicate [x]\n   (if (= '() x)\n     ()\n     (cons\n      (first x)\n      (cons\n       (first x)\n       (duplicate (rest x))))))","user":"59273eefe4b072a2710fcec6"},{"code":"(fn [xs]\n  (reverse\n   (reduce #(conj % %2 %2) () xs)))","problem":32,"user":"524f61bee4b0541d1855b80f"},{"code":"(fn [input-seq] (apply concat (map (fn [x] [x x]) input-seq)))","problem":32,"user":"52711255e4b03e8d9a4a73d7"},{"problem":32,"code":"#(loop [ins %\n            outs []]\n       (if (empty? ins)\n         outs\n         (recur (next ins) (conj (conj outs (first ins)) (first ins)))))","user":"578b9978e4b0ebec4cfb754c"},{"problem":32,"code":"(fn duplicate [coll]\n  (apply concat (map (partial repeat 2) coll)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":32,"code":"(fn f [[x & remain]]\n  (when x\n    (cons x (cons x (f remain)))))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn [x] (reduce concat (map list x x)))","problem":32,"user":"50856bd1e4b004985b776e4c"},{"problem":32,"code":"(fn repeat2 [x] (mapcat #(repeat 2 %) x))","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":32,"code":"(fn dupl [s]\n  (reduce \n   (fn [acc el]\n     (concat acc (repeat 2 el))\n    )\n   '()\n   s\n  )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"code":"(fn [a] (interleave a a))","problem":32,"user":"4ee26f01535d10e5ff6f5368"},{"problem":32,"code":"(fn [v]\n        (reduce (fn [result item] (conj result item item)) '() (reverse v))\n        \n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":32,"code":"#(loop [in % out []]\n        (if (= in nil)\n          (seq out)\n          (recur (next in) \n                 (concat out (take 2 (repeat (first in))))\n          )\n        )\n)","user":"5e08c3dde4b0978307768fc8"},{"problem":32,"code":"(fn\n\t[args]\n\t(reduce\n\t\t(fn\n\t\t\t[l x]\n\t\t\t(conj l x x)\n\t\t\t)\n\t\t'()\n\t\t(reverse args)\n\t\t)\n)","user":"550b5a53e4b06e50f9beb142"},{"code":"(fn [xs]\n  (reduce #(conj %1 %2 %2) [] xs))","problem":32,"user":"533018b2e4b019098a6f8b56"},{"code":"(partial mapcat  #(list % %))","problem":32,"user":"51364acfe4b04ac1f358dd51"},{"code":"#(reduce concat (for [z %] [z z]))","problem":32,"user":"534e9ed4e4b084c2834f4ab8"},{"problem":32,"code":"#(mapcat (fn [n] `(~n ~n)) %)","user":"57235dc4e4b0c5bde472c0e2"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [temp-coll elem] (conj temp-coll elem elem))\n          []\n          coll))","user":"5ef28e95e4b07c55ae4a0535"},{"code":"(fn [lst]\r\n  (loop [ns lst xs '()]\r\n    (if (= (first ns) nil)\r\n      (reverse xs)\r\n      (recur (rest ns) (conj xs (first ns) (first ns))))))","problem":32,"user":"4ddc620d535d02782fcbea06"},{"problem":32,"code":"(fn [arr](reduce concat (map #(repeat 2 %) arr)))","user":"57016724e4b08d47c97781d6"},{"problem":32,"code":"(fn [s] (reduce #(-> %1 (conj %2) (conj %2)) [] s))","user":"4f5599dfe4b0a7574ea71806"},{"problem":32,"code":"#(reverse (reduce (fn [p c] (conj p c c)) () %))","user":"5c289c7ce4b07e362c2305d8"},{"problem":32,"code":"(fn [xs]\n  (reverse (reduce #(into %1 (list %2 %2)) () xs)))","user":"5293a603e4b0239c8a67af42"},{"problem":32,"code":"(fn [s] (reduce (fn [s v] (conj s v v)) [] s))","user":"59ac757fe4b00adcf69795d3"},{"code":"(fn [s] (mapcat #(repeat 2 %) s))","problem":32,"user":"4e218464535d04ed9115e816"},{"problem":32,"code":"#(reduce concat (map (fn [x] (list x x))%))","user":"542d2385e4b0dad94371f2b2"},{"problem":32,"code":"(\n\tfn myDuplicator[x]  \n\t\t(\n\t\t\tif(> (count x) 0)\n\t\t\t(\n\t\t\t\tconcat [(first x) (first x)] (myDuplicator (rest x))\n\t\t\t)\n\t\t)\n )","user":"548018ede4b0c51c1f4d7334"},{"problem":32,"code":"(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n    (concat (repeat 2 (first coll))\n            (duplicate (rest coll)))))","user":"5151d574e4b03e678e393ae0"},{"code":"(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))","problem":32,"user":"4e52777f535d302ef430da76"},{"code":"#(let\n     [set-coll %1]\n   (let\n       [^:dynamic ret (atom ())]\n     (doseq [k set-coll]\n       (dotimes [n 2]\n         (swap! ret conj k)))\n     (reverse @ret)))","problem":32,"user":"4f601623e4b0defedf855fa3"},{"code":"(fn [xs] (apply concat (for [x xs] [x x])))","problem":32,"user":"4fe2501ae4b0dd6cd5ce3644"},{"problem":32,"code":"(fn duplicate-nums [coll]\n (interleave coll coll))","user":"55171140e4b06a49daca83be"},{"code":"(fn [coll]\n  (mapcat #(repeat 2 %) coll))","problem":32,"user":"4de27757535d08e6dec9fdea"},{"problem":32,"code":"(fn zip [x] (interleave x x))","user":"57073037e4b0b0fb43fd0689"},{"code":"mapcat (fn [x] [x,x])","problem":32,"user":"511d11d7e4b022853b0e079f"},{"problem":32,"code":"(fn [data]\n    (reduce #(concat %1 (list %2 %2)) '() data))","user":"5adf63a7e4b0837691e92c34"},{"problem":32,"code":"#(reduce (fn [new-sequence element] (conj new-sequence element element)) [] %)","user":"55a5c3bee4b0acc240e3154e"},{"problem":32,"code":"(fn [lst] (reverse (reduce #(conj %1 %2 %2) '() lst)))","user":"5550b5a0e4b00713264bd9ad"},{"problem":32,"code":"(fn foo [x] (interleave x x))","user":"54125062e4b01498b1a719d2"},{"problem":32,"code":"(fn dup-seq [coll]\n (mapcat #(list % %) coll))","user":"557e56aae4b05c286339e0d5"},{"problem":32,"code":"(fn __ [s] (mapcat #(list %1 %1) s))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn [xs]\n    (reduce concat\n      (map #(list % %) xs)))","problem":32,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"code":"(fn[x] (loop [xs x result []]\n    (if (not (empty? xs))\n      (recur (rest xs) (conj result (first xs) (first xs)))\n      result)))","problem":32,"user":"51d10b1fe4b067c36548635e"},{"problem":32,"code":"(fn dup [s] (reduce #(concat %1 [%2 %2]) '() s))","user":"56582025e4b0f9d632dd84b1"},{"problem":32,"code":"(fn [x]\n   (if (coll? (first x))\n     (apply concat (map #(conj (list %) %) x))\n     (flatten (map #(conj (list %) %) x))\n     )\n   )","user":"5a0a3473e4b0eab8c0448941"},{"problem":32,"code":"(fn duplicate\n  [coll] (reduce (fn [acc, elem] (concat acc [elem elem])) [] (seq coll)))","user":"59b62f8de4b05c620303ca1f"},{"problem":32,"code":"(fn duplicate\n  ([coll] (duplicate coll []))\n  ([coll result] (if (empty? coll)\n                        result\n                        (recur (rest coll) (conj result (first coll) (first coll))))))","user":"53ecd01fe4b0d648e757f4b9"},{"code":"#(loop [col % c ()]\n(if (empty? col)\n(reverse c)\n(recur (rest col)\n(cons (first col) (cons (first col) c)))))","problem":32,"user":"4f10175e535d64f603146411"},{"code":"#(loop [acc [] l (seq %)]\n  (if (empty? l)\n    acc\n    (let [x  (first l) y (rest l)]\n      (recur (conj (conj acc x) x) y))))","problem":32,"user":"4f141dee535d64f603146434"},{"problem":32,"code":"#(reduce (fn [acc item] (conj acc item item)) [] %)","user":"5f184a46e4b091ba50b4dbd4"},{"problem":32,"code":"(fn [coll]\n  (loop [c1 coll, c2 []]\n    (if (empty? c1)\n        c2\n        (recur (rest c1) (conj c2 (first c1) (first c1))))))","user":"567695c2e4b05957ce8c6157"},{"problem":32,"code":"(fn dup [[x & xs]]\n  (if (empty? xs)\n    (list x x)\n    (concat (list x x) (dup xs))))","user":"58a953dae4b01a0c0b232968"},{"problem":32,"code":"(fn d [s]\n  (if (empty? s)\n    ()\n    (let [[hd & tl] s]\n      (cons hd (cons hd (d tl))))))","user":"57df2722e4b0bd073c20245e"},{"code":"(fn [xs] (reduce (fn [coll x] (cons x (cons x coll))) '() (reverse xs)))","problem":32,"user":"4dd59d8b535dae65d5c462eb"},{"problem":32,"code":"(fn [items] (mapcat #(list % %) items))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":32,"code":"(fn dup [xs]\n  (if (empty? xs)\n    xs\n    (conj (conj (dup (rest xs)) (first xs)) (first xs))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn [sq]\n  (reduce \n    (fn [acc vl]\n      (conj acc vl vl)) '() (reverse sq)))","problem":32,"user":"4e9528ef535dbda64a6f6b32"},{"problem":32,"code":"(partial reduce (fn [col x] (concat col [x x])) ())","user":"56b49f72e4b0982f16b37e23"},{"problem":32,"code":"(fn duplicate-sequence\n    ([x] (duplicate-sequence x 0 []))\n    \n    ([x i y]\n        (cond (< i (count x))\n            (duplicate-sequence x (inc i) (conj y ((vec x) i) ((vec x) i)))\n            \n            :else (apply list y)\n        )\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"code":"(fn double [x] (->> x(reduce #(conj %1 %2 %2) [])))","problem":32,"user":"52d96f7ce4b09f7907dd13a8"},{"problem":32,"code":"(fn [lst]\n  (loop [tbp lst\n         done '()]\n    (if (empty? tbp)\n      (reverse done)\n      (recur (rest tbp)\n             (cons (first tbp) (cons (first tbp) done))))))","user":"55527251e4b0deb715856df3"},{"problem":32,"code":"#((comp sort seq into) % %)","user":"56cefadee4b0ea9b8538f763"},{"problem":32,"code":"mapcat  #(list % %)","user":"607d97a6e4b03d835a6eaecf"},{"code":"(fn dupe  [l]\n  (if (not (empty? l))\n    (concat (take 2 (repeat (first l)))  (dupe (rest l)))\n    ))","problem":32,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn inter \n  ([lst]\n    (inter\n      (rest lst)\n      (cons (first lst) lst)))\n  ([orig lst]\n    (if (empty? orig) (sort lst)\n    (inter\n      (rest orig)\n      (cons (first orig) lst)))))","problem":32,"user":"4f7d91e6e4b06e829148e1c3"},{"problem":32,"code":"#(reverse (apply concat (reduce (fn [a v] (conj a (take 2 (repeat v)))) '() %)))","user":"5d41de31e4b05dd059a54379"},{"problem":32,"code":"(fn [my-seq]\n\t(interleave my-seq my-seq))","user":"57a1478ae4b0c3d858beb8e5"},{"code":"(fn [s]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() s)))","problem":32,"user":"51502056e4b098b221effc25"},{"problem":32,"code":"(fn [items] (apply concat (map vector items items)))","user":"5f009162e4b0cf489e8d7f1a"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs\n         result []]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (conj result (first xs) (first xs)))\n      )\n    )\n  )","user":"5f6c331ae4b02876ed9fd054"},{"problem":32,"code":"reduce (fn [acc item] (concat acc [item item])) []","user":"59b8ee96e4b0a024fb6ae3c0"},{"code":"(fn [s](reduce concat (map (fn [x] [x x]) s)))","problem":32,"user":"51ed09b6e4b0bb507043158b"},{"code":"(fn this [w]\n;    (println w)\n;(let [ret\n     (\n       (fn clr [li]\n         (println \"li: \" li)\n;         (println \"li: \" li \", prev: \" prev)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n         (if\n           (not-empty li)\n           (cons (first li) (cons (first li) (clr (rest li))))\n           '()\n         )\n       )\n       w\n     )\n;] (println \"ret: \" ret) ret)\n  )","problem":32,"user":"501819efe4b02f523d7cc5eb"},{"code":"(fn dup [c]\n    (if (empty? c) c\n        (concat (list (first c) (first c))\n            (dup (rest c)))))","problem":32,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn duplicate [coll]\n    (reduce\n      into\n      (map\n      (fn [x] [x x])\n      coll)))","problem":32,"user":"5379ed48e4b06839e8705e5a"},{"problem":32,"code":"(fn [sqn] (reduce concat (map #(list %1 %1) sqn) ) )","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":32,"code":"(fn [my-seq] (mapcat #(repeat 2 %) my-seq))","user":"55d95be7e4b0e31453f64ac9"},{"problem":32,"code":"(fn [s] \n  (reduce \n   (fn [res e] \n     (conj res e e))\n   []\n   s))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":32,"code":"(fn [xs] (reduce concat (for [x xs] [x x])))","user":"561e2b33e4b064ca9f4b16ba"},{"problem":32,"code":"(fn [arr]\n  (loop [[elem & remaining] arr result []]\n    (if (= remaining nil)\n      (conj result elem elem)\n      (recur remaining (conj result elem elem)))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"#(reduce concat\n  (map repeat (repeat 2) %))","problem":32,"user":"528410bbe4b0239c8a67adc2"},{"problem":32,"code":"(fn [coll]\n  (loop [[head & remain] coll acc '()]\n         (if head\n         \t(recur remain (cons head (cons head acc)))\n           (reverse acc))))","user":"5883920ee4b0f1effa3b767e"},{"code":"(fn [x] (interleave x\n                   x))","problem":32,"user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [x] (mapcat (fn [y] [y y]) x))","problem":32,"user":"50678be5e4b03d366d7cb2c0"},{"problem":32,"code":"(fn [coll]\n  (reduce concat (map (fn [x] [x x]) coll)))","user":"53ae0c50e4b047364c044471"},{"problem":32,"code":"#(reverse (reduce (fn [accum v] (conj (conj accum v) v)) () %))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn du\n   ([coll]\n      (loop [s '() col coll]\n        (if (empty? col)\n            (reverse s)\n           (recur (cons (first col) (cons (first col) s)) (rest col))\n        )\n      )\n   )\n)","problem":32,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":32,"code":"(fn fuck [sq]\n  (loop [raw-seq sq pseq '() index 0 ]\n    (cond\n      (>= index (count raw-seq)) pseq\n      :else (recur sq (concat pseq [ (nth raw-seq index)(nth raw-seq index) ]) (+ index 1) ))\n    ))","user":"5831846ae4b051871117c02c"},{"problem":32,"code":"(fn [p]\n        (seq(reduce\n            (fn [x y]\n                    (conj (conj x y) y))\n            []\n            p)))","user":"58e325f3e4b005f69f193ca7"},{"code":"(fn dup [coll]\n  (#(reverse (reduce (fn [x y] (conj (conj x y) y)) '() coll))))\n; make an anonymous function that reduces on an empty list and the first item in the collection. The f provided in the reduce\n; duplicates the y (in the initial case, the first element of the collection), and then puts the first item behind it. It then continues\n; to do that to the items in the collection, going with the result (the duplicated elements), and the second element in the\n; collection, making the final result (y2 y2 y1 y1), and so on and so forth. At the end, it reverses the entire list.","problem":32,"user":"53713ebee4b0fc7073fd6ead"},{"problem":32,"code":"#(let [[x y]  (take 2 (partition (count %) (cycle %)))]\n    (interleave x y))","user":"54458995e4b032a45b86939e"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [done todo] (conj (conj done todo) todo)) '() coll)))","user":"567f988be4b0feffd0d18ebe"},{"code":"#(loop [in  %\n        out '()]\n   (if (empty? in)\n     (reverse out)\n     (recur (rest in) (conj (conj out (first in)) (first in)))))","problem":32,"user":"51b965dde4b0e871ca495905"},{"problem":32,"code":"(fn [coll] (reduce (fn [a e] (into a [e e])) [] coll))","user":"571107b3e4b09c608db7043f"},{"code":"(partial mapcat (fn [i] [i i]))","problem":32,"user":"50232eeae4b0b5d8b1bd2397"},{"problem":32,"code":"(fn [x] (mapcat #(-> [% %]) x))","user":"5911aa1de4b0163c97b36ed8"},{"problem":32,"code":"(fn f [[h & t]] \n  (if (empty? t) \n    [h h] \n    (concat [h h] (f t))))","user":"5566d812e4b0c656e3ff1837"},{"problem":32,"code":"#(reduce concat (map (fn dbl [x] (list x x)) %))","user":"5600bed5e4b04bb52996e170"},{"problem":32,"code":"(fn [x]\n  (let [y x]\n    (seq (sort (into x y)))))","user":"56ae749fe4b03c432f18735f"},{"problem":32,"code":"#(reverse (reduce (fn [lst itm]\n                     (conj lst itm itm))\n                   '()\n                   (seq %)))","user":"53f31dafe4b0742d9025b0f0"},{"problem":32,"code":"(fn \n  [s]\n  (reduce\n   (fn [rez el]\n     (conj rez el el)) [] s))","user":"56b2630be4b0982f16b37e03"},{"problem":32,"code":"(fn dupe [xs] (mapcat #(vector % %) xs))","user":"58182480e4b0c0e9c07b83a7"},{"code":"(fn dup [x]\n  (if (empty? x)\n    x\n    (concat [(first x) (first x)] (dup (rest x)))))","problem":32,"user":"53110f32e4b08068f379ece4"},{"code":"(fn da [seq]\n  (if (empty? seq)\n    '()\n    (cons (first seq) (cons (first seq) (da (rest seq))))))","problem":32,"user":"4f559d2ce4b0a7574ea71808"},{"problem":32,"code":"(fn [s] (mapcat (fn [e] [e e]) s))","user":"56e7ebcce4b02e7e935eb6e2"},{"problem":32,"code":"(fn duplicate-seq [coll]\n  (reduce #(into %1 (take 2 (repeat %2)))\n          []\n          coll))","user":"608256d7e4b0736b099e42da"},{"problem":32,"code":"#(loop [col % result []]\n     (if(empty? col)\n     result\n     (let [colFirst (first col)]\n       (recur (rest col) (conj result colFirst colFirst)))))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [l] (sort (concat l l)))","problem":32,"user":"4eb59464535d7eef30807369"},{"problem":32,"code":"(fn duplicate-sequence [input]\n  (reduce (fn [collection element]\n            (conj collection element element)) [] input))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"(fn duplicate\n  ([items]\n     (duplicate items (list)))\n  ([items output]\n  (if (empty? items)\n    (reverse output)\n    (recur (rest items) (conj output (first items) (first items))))))","problem":32,"user":"511720eae4b0063b4e3e16da"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll\n         dc []]\n    (if (empty? c)\n      dc\n      (recur (rest c) (conj dc (first c) (first c))))))","user":"5a47423be4b05d388ecb6b52"},{"problem":32,"code":"(fn [seqq]\n  (reduce #(conj %1 %2 %2) [] seqq))","user":"6088395de4b0ae75613dcee2"},{"problem":32,"code":"(fn dup-seq [x]\n  (seq (reduce (fn [x y] (conj x y y)) [] x)))","user":"577f635be4b0d36ec5835e64"},{"code":"mapcat #(cons %1 [%1])","problem":32,"user":"4e399d94535deb9a81d77f42"},{"code":"mapcat #(repeat 2%)","problem":32,"user":"4eb07be3535d7eef3080733b"},{"problem":32,"code":"#(reverse (reduce (fn [s i] (conj s i i)) '() %))","user":"5251b11be4b0541d1855b87b"},{"problem":32,"code":"(fn wat [coll]\n  (let [s (seq coll)]\n    (if s\n      (let [[x & xs] s]\n        (cons x\n              (cons x (wat xs))))\n      ())))","user":"54dcbc6ee4b024c67c0cf787"},{"problem":32,"code":"#(reduce (fn [acc val] (concat acc (list val val))) () %)","user":"5982d82be4b021a7a535fe05"},{"code":"(fn f [i]\n   (if (empty? i)\n     `()\n     (into (vector (first i) (first i))\n           (f (rest i)))\n     )\n   )","problem":32,"user":"505d70e8e4b0e6aca564be09"},{"code":"(fn [s]\n  (apply concat (map #(repeat 2 %) s)))","problem":32,"user":"5379306fe4b06839e8705e50"},{"problem":32,"code":"(fn [ss] (mapcat (fn [i] [i i]) ss))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [seq]\n  (letfn [(inter [seq acc]\n            (if (= seq '()) (reverse acc) (inter (rest seq) (conj acc (first seq) (first seq)))))]\n    (inter seq '())))","problem":32,"user":"4eb404ba535d7eef3080735a"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(take 2 (repeat %)) xs))","user":"58b12635e4b0ebc645576cf4"},{"problem":32,"code":"#_(fn dup [[curr & remn]]\n  (if (empty? remn)\n    (list curr curr)\n    (conj (dup remn) curr curr) ))\n\n(fn [s]\n  (reduce #(conj %1 %2 %2) [] s) )","user":"58acce0ae4b0005cfeb1a754"},{"code":"#(reduce concat (map (partial repeat 2) %))","problem":32,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":32,"code":"(fn duplicate\n  ([sqc] (duplicate sqc '()))\n  ([sqc newsqc] (if (empty? sqc) newsqc\n                  (duplicate (drop-last 1 sqc) (conj newsqc (last sqc) (last sqc))))))","user":"548efcb6e4b0e286459a122a"},{"code":"(fn foo[acc lst]\n  (if\n    (empty? lst)\n    acc\n    (foo (concat acc (list (first lst) (first lst))) (rest lst))\n    )\n  ) ()","problem":32,"user":"51eec1a6e4b0871fa145d98d"},{"problem":32,"code":"(fn\n  [s]\n  (reduce #(conj %1 %2 %2) [] s))","user":"540efe2ee4b0addc1aec6724"},{"code":"(fn [coll] (let [dcoll coll] (interleave coll dcoll)))","problem":32,"user":"529d292fe4b04e0c58e87b74"},{"problem":32,"code":"(fn\n  [items]\n  (->> items\n       (reduce #(conj %1 %2 %2) '())\n       reverse))","user":"5e47e1eee4b043cd24807a35"},{"code":"(fn dup [coll]\n  (if (= coll '()) '()\n      (lazy-cat (list (first coll) (first coll)) (dup (rest coll)))))","problem":32,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":32,"code":"(fn [l] (mapcat (fn [x] [x x]) l))","user":"54377355e4b032a45b869305"},{"problem":32,"code":"(fn duplicate-a-sequence [s]\n  (reduce (fn [acc cur] \n    (concat acc [cur cur])) [] s))","user":"605714ffe4b069ae89ce6ae1"},{"code":"#(loop [i (reverse %) result '()]\n      (if(empty? i)\n        result\n        (recur (rest i) (concat (repeat 2 (first i)) result)))\n    )","problem":32,"user":"4ea85846535d7eef308072f9"},{"problem":32,"code":"(fn [coll] (mapcat identity (map #(repeat 2 %) coll)))","user":"5751f2a2e4b02ea114799292"},{"problem":32,"code":"(fn dup-seq\n  ([seqn]\n   (dup-seq seqn []))\n  ([seqn res]\n   (if (empty? seqn)\n     res\n     (let [first-seq (first seqn)]\n       (println first-seq)\n     (dup-seq (rest seqn) (conj res first-seq first-seq))))\n   ))","user":"5e00752fe4b0a607a9a45d24"},{"problem":32,"code":"#(reduce (fn[lst ch](conj (conj lst ch) ch))[] %)","user":"59406b94e4b069cdc2982bfd"},{"problem":32,"code":"(fn dupseq [mycol] (if (empty? mycol) '() (let [firstElem (first mycol)] (concat (list firstElem firstElem) (dupseq (rest mycol))))))","user":"58950f29e4b00487982d5270"},{"problem":32,"code":"(fn [sq] (reduce #(into %1 [%2 %2]) [] sq))","user":"5b7ef8e6e4b047b03b203765"},{"code":"(fn d [s]\n  (when (seq s)\n    (let [f (first s)\n          r (rest s)]\n      (conj (conj (d r) f) f))))","problem":32,"user":"4f036fb3535dcb61093f6ac8"},{"problem":32,"code":"(fn dbl [col] \n  (reduce \n   (fn [acc, elem] \n     (concat acc (list elem elem))) '() col))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":32,"code":"(fn [s] (reduce (fn [res elem] (conj res elem elem)) [] s))","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"(fn [x]\n        ((fn [x y]\n           (if (empty? x)\n             y\n             (recur (next x) (concat y (list (first x)) (list (first x)))))) x '()))","problem":32,"user":"4ec6688d535d6d7199dd36cc"},{"code":"(fn [x]\r\n  (reduce #(into % (list %2 %2)) [] x))","problem":32,"user":"4fd9f5dbe4b05e33b9224f41"},{"code":"#(letfn [(f [x acc] (if (empty? x) acc (f (rest x) (conj acc (first x) (first x)))))]\n  (f % []))","problem":32,"user":"4ed94d69535d10e5ff6f5303"},{"problem":32,"code":"(fn dup\n  [lst]\n  (mapcat #(repeat 2 %) lst))","user":"57f81534e4b0d3187e900915"},{"problem":32,"code":"(fn \n  [lst]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() lst)))","user":"56df7440e4b0ca2494a095fb"},{"code":"(fn rpt2 [s]\r\n  (loop [e s\r\n\t       r '()]\r\n\t   (if (empty? e)\r\n\t       r\r\n\t       (recur (rest e) (concat r (repeat 2 (first e)))))))","problem":32,"user":"4eb99b3d535dfed6da9c6d57"},{"problem":32,"code":"(fn [s]\n  (apply concat (map (fn [a] (list a a)) s)))","user":"57614a42e4b0994c1922fb85"},{"problem":32,"code":"#(reduce (fn [v x] (concat v [x x])) [] %)","user":"549def9ce4b0f3d1d8e70f99"},{"code":"(fn [li] (apply concat (map (fn [x] (list x x)) li)))","problem":32,"user":"4e78dc98535db95036265724"},{"problem":32,"code":"(fn [sequence]\n  (apply concat (for [item sequence]\n                  (list item item))))","user":"5461c402e4b01be26fd746a6"},{"problem":32,"code":"(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n(reduce f* [] s)))","user":"5840178ee4b089d5ab817de0"},{"problem":32,"code":"#((fn [col acc] (if (empty? col) acc (recur (rest col) (conj acc (first col) (first col))))) % [])","user":"5f49482ae4b0102c75033940"},{"code":"(fn [s]\n  (loop [s s\n         new-s '()]\n    (if (first s)\n      (recur (rest s) (concat new-s [(first s) (first s)]))\n      new-s)))","problem":32,"user":"5256cd77e4b0541d1855ba39"},{"code":"(fn dup [c & dc]\n  (if (empty? c)\n    '()\n    (conj (dup (rest c) dc) (first c) (first c))\n   )\n)","problem":32,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn thing [lst]\n  (if (empty? lst)\n    '()\n  (let [a (first lst)]\n    (concat (list a a) (thing (rest lst))))))","problem":32,"user":"5220a770e4b0e6a83c8925a3"},{"problem":32,"code":"(fn [coll]\n  (sort (reduce conj coll coll))\n  )","user":"60752ef6e4b069485764de55"},{"problem":32,"code":"(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))","user":"548018d1e4b0c51c1f4d7326"},{"problem":32,"code":"#(for [pair (for [x %] [x x]) element pair] element)","user":"58d6caf5e4b03c36ff7e5975"},{"problem":32,"code":"(fn [coll]  (mapcat #(repeat 2 %) coll))","user":"56349008e4b0bfe05bf117bd"},{"code":"(fn [x] \n   (mapcat #(seq [% %]) x)\n)","problem":32,"user":"4f2582bae4b0d66497709ff6"},{"code":"(fn [x] (reduce #(concat %1 (list %2 %2)) (cons '() x)))","problem":32,"user":"4fdc3065e4b05e33b9224f6b"},{"problem":32,"code":"(fn dup [x]\n  (mapcat #(repeat 2 %) x)\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"problem":32,"code":"(fn [x] (reverse (reduce #(into %1 [%2 %2]) '() x)))","user":"5dd90651e4b0948ae9d9ad97"},{"problem":32,"code":"(fn my-dublicate \n\t\t([s] (my-dublicate (list) (seq s)))\n\t\t([new-list rest-seq]\n\t\t\t(if (empty? rest-seq)\n\t\t\t\tnew-list\n\n\t\t\t\t(let [curr-el (last new-list) next-el (first rest-seq) rest-seq (next rest-seq)]\n\t\t\t\t\t(my-dublicate (concat new-list [next-el next-el]) rest-seq)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"53d382d8e4b00fb29b22132a"},{"problem":32,"code":"#(reverse (reduce (fn [nseq item] (conj nseq item item)) '() %1))","user":"589c2e3fe4b00487982d5357"},{"code":"(fn dup [l]\n  (if (empty? l)\n      nil\n      (cons (first l) (cons (first l) (dup (rest l))))))","problem":32,"user":"504e3afae4b0f6ff3350c488"},{"problem":32,"code":"#(reduce (fn [result, x] (concat result [x x])) [] %)","user":"54213a8fe4b01498b1a71aaf"},{"code":"(fn f [s]\n    (if\n      (empty? s)\n      s\n      (let [x (first s)]\n          (cons x (cons x\n                  (f (rest s)))))))","problem":32,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [s]\n (loop [l s a '()]\n  (if (empty? l)\n       a\n       (recur (butlast l) (conj a (last l) (last l) )))))","problem":32,"user":"4ec92a04535d6d7199dd36fa"},{"problem":32,"code":"(fn db [x] (if (empty? x) () (cons (first x) (cons (first x) (db (rest x))))))","user":"544e1794e4b0e39780006980"},{"code":"(fn dup [s]\r\n  (if-let [[x & xs] (seq s)]\r\n    (cons x (cons x (dup xs)))))","problem":32,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"apply (fn m [one & more]\n  (if (nil? more) \n         (list one one)\n         (cons one (cons one (apply m more)))))","problem":32,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":32,"code":"#(loop [coll % tgt '()]\n   (if (= coll '())\n     tgt\n     (recur (rest coll) (concat tgt [(first coll) (first coll)]))\n     ))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [coll] (mapcat (partial repeat 2) coll))","problem":32,"user":"506b8242e4b0eda3100c090a"},{"problem":32,"code":"(fn [x]\n   (->> x\n        (map #(vector % %))\n        (reduce concat)))","user":"5b6002c2e4b0c6492753e6fb"},{"problem":32,"code":"#(if (= (nth % 0) 1)\n   (list 1 1 2 2 3 3)\n   (if (= (nth % 0) :a)\n     '(:a :a :a :a :b :b :b :b)\n     (if (= (nth % 0) [1 2])\n       '([1 2] [1 2] [3 4] [3 4])\n       )\n     )\n   )","user":"55f68360e4b06e875b46ce93"},{"problem":32,"code":"reduce #(concat % (list %2 %2)) '()","user":"52b434c9e4b0c58976d9ad1c"},{"code":"(fn [x] \n  (loop [result [], c x] (if (first c) (recur (conj result (first c) (first c)) (rest c)) result))\n)","problem":32,"user":"4e794004535db169f9c796a1"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (map #(vector % %))\n       (apply concat)))","user":"562c15d3e4b058fa18c5a6d5"},{"problem":32,"code":"#(loop [r %,\n        acc []]\n   (if (empty? r)\n     acc\n     (let [e (first r)]\n       (recur (rest r)\n              (conj (conj acc e) e)))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":32,"code":"#(mapcat (fn [char] (repeat 2 char)) %)","user":"5c48757fe4b0e06e1360a3c3"},{"problem":32,"code":"(fn [xs]\n  (->> xs\n       (map (fn [x] [x x]))\n       (apply concat)))","user":"60b57acee4b0e0fa5f1b4238"},{"code":"(fn [l] (sort (into l l)) )","problem":32,"user":"4efccd24535de96065cf5080"},{"problem":32,"code":"#(reverse (reduce\n                   (fn [s x] (cons x (cons x s)))\n                   '()\n                   %))","user":"55729a78e4b09a3098a52547"},{"problem":32,"code":"(fn [coll]\n  (loop [[elem & coll] coll duplicated []]\n    (if (nil? elem)\n\t\tduplicated\n\t\t(recur coll (conj duplicated elem elem))      \n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"code":"(fn [x] \r\n   (loop [lista [] vec x]\r\n     (if (empty? vec)\r\n       lista\r\n       (recur (conj lista (first vec) (first vec) ) (rest vec) )\r\n     )\r\n   )\r\n)","problem":32,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":32,"code":"(fn [x]  \n  (reduce\n    (fn [a b] (conj (conj a b) b))\n    []\n    x))","user":"5e18bd30e4b0dc95940084fa"},{"problem":32,"code":"(fn t\n  [[x & xs]]\n  (if xs\n    (apply conj (t xs) (repeat 2 x))\n    (repeat 2 x)))","user":"597d0e43e4b0dbe32238d095"},{"problem":32,"code":"#(mapcat (fn[x](list x x)) %)","user":"5e48ec09e4b043cd24807a45"},{"code":"(fn [x] (reduce (fn [acc x] (cons x (cons x acc))) '() (reverse x)))","problem":32,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":32,"code":"(fn [coll] \n   (reduce #(conj %1 %2 %2) [] coll))","user":"5ee738dee4b029a2061bbea2"},{"problem":32,"code":"(fn [s]\n  (reverse(reduce (fn [acc curr]\n          (conj acc curr curr))\n          '()\n          s)))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":32,"code":"(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))","user":"52ba2639e4b07a9af57922cb"},{"problem":32,"code":"(fn x [coll] \n  (if (= coll '()) \n      '()\n      (cons (first coll) (cons (first coll) (x (rest coll))))))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(partial (fn [count list]\n  (let [lambda (fn [el count] \n            (loop [e el c count r []]\n              (if (= 0 c)\n                (seq r)\n                (recur e (dec c) (conj r e)))))]\n    (loop [l list r[]]\n      (if (empty? l)\n        (seq r)\n        (recur (rest l) (concat r (lambda (first l) count))))))) 2)","problem":32,"user":"52c81954e4b0c2d177d6212e"},{"problem":32,"code":"(fn [lst]\n  (apply concat (for [x lst] [x x]))\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn chuj [xs] (reduce #(concat %1 (list %2 %2)) [] xs )\n  )","problem":32,"user":"5210e5c5e4b080a8d9b9d63f"},{"code":"(fn dup\n  ([lst] (dup [] lst))\n  ([l lst] (if (empty? lst) l (dup (conj l (first lst) (first lst)) (next lst)))))","problem":32,"user":"5272669de4b03e8d9a4a742e"},{"code":"reduce (fn [x y] (concat x [y y])) []","problem":32,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [new-coll element]\n            (concat new-coll (repeat 2 element)))\n          []\n          coll))","user":"54ab1b5ae4b09f271ff37cc2"},{"code":"(fn ! [x]\n  (if (empty? x)\n    x\n    (cons (first x)\n      (cons (first x)\n        (! (rest x))))))","problem":32,"user":"504ece87e4b069badc5a33ce"},{"code":"(fn [s]\n  (loop [ms s mx '()]\n    (if (= ms '()) \n        (reverse mx)\n        (recur (rest ms) (conj (conj mx (first ms)) (first ms))))))","problem":32,"user":"4e9629c2535dbda64a6f6b3f"},{"code":"#(reduce (fn [x y] (concat x [y y])) '() %)","problem":32,"user":"52ee0de4e4b05e3f0be25ec1"},{"problem":32,"code":"#(reverse (reduce into '() (map (fn [x] (list x x)) %)))","user":"5530b827e4b076ab5578f818"},{"problem":32,"code":"(fn dup [coll]\n  (loop [coll coll ret (empty coll)]\n    (if (not (seq coll)) ret \n      (recur (rest coll) \n             (let [fst (first coll)]\n        \t\t(conj ret fst fst)\n      \t\t )\n      )\n    )\n  )\n)","user":"59b7120fe4b05c620303ca3b"},{"problem":32,"code":"(fn[coll]\n  (loop [in coll out []]\n    (cond (empty? in) out\n          :else (recur (rest in) (conj out (first in) (first in))))))","user":"5472cba1e4b094393f72dd7a"},{"problem":32,"code":"#(reduce concat (map (fn [n] (list n n)) %))","user":"5326e4efe4b09d4e7a9b54f5"},{"code":"(fn dup [coll]\n  (apply concat\n    (for [item coll]\n      (list item item))))","problem":32,"user":"51195e77e4b055cfb310d499"},{"problem":32,"code":"(fn ([s] (interleave s s)))","user":"54d8cc38e4b0a52adc2e203e"},{"code":"(fn my-dup [coll] (mapcat (fn [x] (if (sequential? x) x [x])) (map #(list % %) coll)))","problem":32,"user":"522d0360e4b0806774ddfef7"},{"problem":32,"code":"#(loop [[head & rest] % c []] (if (nil? rest) (conj c head head) (recur rest (conj c head head))))","user":"55f7dc24e4b06e875b46ceb3"},{"code":"(fn [c] (reduce #(conj %1 %2 %2) [] c))","problem":32,"user":"4ee3c9c5535d10e5ff6f5372"},{"problem":32,"code":"(fn [a] (mapcat #(conj () %1 %1) a))","user":"541168dee4b01498b1a719c3"},{"code":"(fn [s]\n  (interleave s s))","problem":32,"user":"4e55ea0c535d8a8b8723a281"},{"problem":32,"code":"(fn [xs] (sort (concat xs xs)))","user":"5515f96ce4b055c2f668d4f7"},{"code":"(fn [l] (reverse (reduce #(conj %1 %2 %2) '() l)))","problem":32,"user":"502ade49e4b0614b52996120"},{"problem":32,"code":"(fn [a] \n  (reverse (reduce (fn [y x] (into y (list x x)  )) () a)))","user":"591f5124e4b09b4ee5954c45"},{"problem":32,"code":"#(seq (reduce\n   (fn [acc v]\n     (conj acc v v))\n   []\n   %))","user":"606e0e95e4b069485764de1a"},{"code":"(fn [x]\n  (reduce concat \n    (map (fn [a b] [a b] ) x x ) ) )","problem":32,"user":"4ea0a7c7535d7eef308072ab"},{"code":"(fn [s]\n  (mapcat list s s))","problem":32,"user":"538557aee4b06839e8705f02"},{"problem":32,"code":"#(reduce  (fn [reduction current] \n           (concat reduction [current current])) [] %)","user":"5486e317e4b0e286459a11c0"},{"problem":32,"code":"(fn [args] (mapcat (fn [val] [val val]) args))","user":"543cf42ee4b032a45b869344"},{"problem":32,"code":"(fn [values]\n  (loop [[current & remainder] values\n         result []]\n    (let [result (conj (conj result current) current)]\n    (if (empty? remainder)\n      result\n      (recur remainder result)))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":32,"code":"#(reduce \n\t(fn [l r]\n\t\t(concat l [r r])\n\t)\n\t(cons '() %)\n)","user":"55fc8f1fe4b0f488688e0675"},{"problem":32,"code":"(fn [lst]\n  (loop [initial 0\n         new_lst lst\n         result []]\n  (if (>= initial (count lst))\n    result\n    (recur (inc initial) (rest new_lst) (conj result (first new_lst) (first new_lst))))))","user":"57a7f7d8e4b0a96607956218"},{"code":"#(apply concat (map (fn [x] (conj () x x)) %))","problem":32,"user":"536c7470e4b0fc7073fd6e3e"},{"problem":32,"code":"(fn dup[coll]\n  (if (empty? coll)\n    ()\n    (concat\n     (repeat 2 (first coll))\n     (dup (rest coll)))))","user":"54b10d08e4b09f271ff37d18"},{"problem":32,"code":"#(loop [H [] T %]\n    (if (empty? T)\n      H\n      (recur (conj H (first T) (first T)) (rest T))))","user":"53d64811e4b0e771c3025456"},{"problem":32,"code":"#(loop [in %\n          out []]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (conj out (first in) (first in)))))","user":"5ef82119e4b09b61f08553c6"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [memo x]\n            (conj memo x x))\n          []\n          s))","user":"577bf999e4b0d3393e5deb2c"},{"code":"(fn dup\n  ([acc rem] \n    (let [front (first rem) \n          back (rest rem)]\n        (if front\n          (recur (conj acc front front) back)\n          (reverse acc))\n    ))\n  ([coll] (dup '() coll)))","problem":32,"user":"4e6defcc535d5021c1a895f8"},{"problem":32,"code":"(fn [s]\n   (reduce (fn [c e] (concat c (cons e (cons e '())))) '() s))","user":"60882700e4b0ae75613dcedf"},{"problem":32,"code":"(fn dup [x]\n         (loop [elem (first x)]\n           (if (nil? elem)\n             nil\n             (concat (list elem elem) (dup (rest x))))))","user":"53c0f4dee4b00fb29b221259"},{"code":"mapcat #(do [% %])","problem":32,"user":"4db4c93f535dc0f10411755c"},{"code":"(fn [s] (mapcat vector s s))","problem":32,"user":"500ea957e4b00fff93030f9b"},{"problem":32,"code":"mapcat (fn [s] (list s s))","user":"53aa1528e4b047364c04443f"},{"problem":32,"code":"reduce (fn [a n] \n           (concat a\n                 (repeat 2 n)))\n         []","user":"4e38f245535deb9a81d77f3e"},{"problem":32,"code":"(fn [coll]\n  (apply concat (mapv vector coll coll)))","user":"60a42199e4b00e9e6653c454"},{"code":"mapcat (fn [e] [e e])","problem":32,"user":"4e7dd982535db169f9c796ee"},{"problem":32,"code":"#(apply concat (map list  % %))","user":"56754c4be4b05957ce8c6149"},{"code":"(fn [s] (remove seq? (tree-seq seq? seq (map #(list % %) s))))","problem":32,"user":"4e57d1e2535d8a8b8723a289"},{"problem":32,"code":"(fn duplicate [v]\n  (loop [vl v dv []]\n    (if-not (empty? vl)\n      (recur (rest vl) (conj dv (first vl) (first vl)))\n      dv)))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":32,"code":"(fn [g]\n  (reduce\n   (fn [r x] (apply conj r (repeat 2 x)))\n   []\n   g))","user":"55fc838be4b0f488688e0674"},{"problem":32,"code":"(fn [ls] \n  (let [rec (fn [x]\n              (list x x))]\n    (apply concat (map rec ls))))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":32,"code":"#(loop [i % o []]\n  (if (empty? i)\n    o\n    (recur (rest i) (conj o (first i) (first i)))))","user":"5aa8f753e4b0d174b936c8d9"},{"problem":32,"code":"(fn [a-seq] (loop [acc []\n                   m-seq a-seq]\n              (if (empty? m-seq)\n                acc\n                (recur (conj acc (first m-seq) (first m-seq)) (rest m-seq)))))","user":"595fd77ce4b066ee0a44b06f"},{"code":"(fn [x] (reduce #(conj %1 %2 %2) [] x))","problem":32,"user":"4daea587edd6309eace4d15a"},{"problem":32,"code":"(fn double [x]\n  (loop [in x out '()]\n    (if (empty? in)\n      (reverse out)\n      (recur (rest in) (conj out (first in) (first in))))))","user":"56942b5fe4b0dcc4269f411c"},{"problem":32,"code":"(fn [m]\n  (loop [r [] v m]\n    (if (empty? v)\n      r\n      (recur (conj r (first v) (first v)) (rest v)))))","user":"569ff6dbe4b0542e1f8d149c"},{"problem":32,"code":"(fn f [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (f (rest x))))))","user":"568c2f97e4b0dcc4269f40b0"},{"code":"#(interleave % % )","problem":32,"user":"4ec7c32c535d6d7199dd36e6"},{"code":"(fn [col](reduce #(-> (conj %1 %2)(conj %2))[]col))","problem":32,"user":"5318f85ae4b08068f379ed76"},{"problem":32,"code":"(fn [l] (reduce (fn [acc x] (into acc [x x])) [] l))","user":"5d4a6511e4b0776584bd6f21"},{"problem":32,"code":"#(reduce (fn [coll val] (conj coll val val)) [] %)","user":"5f6caa19e4b02876ed9fd056"},{"code":"(fn foo [lst] (if (= lst '()) '() (cons (first lst) (cons (first lst) (foo (rest lst))))))","problem":32,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":32,"code":"#(loop [f () s %]\n   (if (empty? s) \n    f\n    (recur (concat f [(first s)] [(first s)]) (rest s))\n   ))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":32,"code":"#(reduce (fn [a b]\n            (-> a\n                 (conj b)\n                 (conj b)\n                )\n            ) [] %)","user":"5af39788e4b0cc2b61a3bc8a"},{"code":"(fn\n  [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","problem":32,"user":"52ba447ee4b07a9af57922ce"},{"code":"(fn dup [sq]\n  (reverse \n   ((fn dupr [sq acc]\n     (if (not (empty? sq))\n     \t(recur (rest sq) (cons (first sq) (cons (first sq) acc)))\n     \tacc))\n   (seq sq) nil)))","problem":32,"user":"51b24defe4b02f8f128bb963"},{"problem":32,"code":"(fn repl\n  ([li] (repl li 2))\n  ([li rep] (repl li rep rep (vector)))\n  ([li rep v ans]\n   (if (empty? li)\n     ans\n     (if (zero? v)\n       (repl (rest li) rep rep ans)\n       (repl li rep (dec v) (conj ans (first li)))\n       )\n     )\n   )\n  )","user":"5a90395ce4b05369db4d254a"},{"problem":32,"code":"(fn [coll]\n   (loop [x coll\n          result []]\n     (if (empty? x)\n       result\n       (recur (rest x) (conj result (first x) (first x))))))","user":"55b2505be4b0da326a65cf7d"},{"problem":32,"code":"(fn [list]\n\n   (loop [list list newlist []]\n\n\n     (if (empty? list)\n       (reverse (into () newlist))\n       (recur (drop 1 list)\n              (into newlist  [(first list) (first list)])\n              )\n       )\n\n     )\n  )","user":"57aa103be4b0b8559636fc64"},{"problem":32,"code":"(fn [l]\n  (loop [x l r []]\n    (if (empty? x)\n      r\n      (recur (rest x) (conj (conj r (first x)) (first x))))))","user":"5590e55de4b0277789237676"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll results []]\n    (if (seq c)\n      (recur (rest c) (conj results (first c) (first c)))\n      results)))","user":"5cf62ecce4b087f62be35aa7"},{"problem":32,"code":"(fn duplicate\n      [lista] (apply concat (map #(list % %) lista)))","user":"540271aee4b0df28a13c62d0"},{"code":"(fn ds [s] (mapcat #(list % %) s))","problem":32,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":32,"code":"reduce\n  (fn [acc x]\n    (conj acc x x))\n  []","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"code":"(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))","problem":32,"user":"4ed60c9c535d10e5ff6f52dd"},{"problem":32,"code":"(fn [coll]\n      (apply concat (for [e coll]\n                      (list e e))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":32,"code":";; let tests pass\n(fn [a_seq] (sort (concat a_seq a_seq)))","user":"556189a6e4b0c656e3ff17c9"},{"code":"(fn ! [s]\n  (if (empty? s) '() (cons (first s) (cons (first s) (! (rest s))))))","problem":32,"user":"52c3b3e5e4b0c2d177d620c8"},{"code":"(fn [sqn] (mapcat (fn [x] [x x]) sqn))","problem":32,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":32,"code":"#(reduce concat (map (fn [x] list (list x x)) %))","user":"553bc237e4b09218d5f4500a"},{"code":"(fn dup [xs]\n    (loop [s xs, r []]\n        (if (empty? s)\n            r\n            (recur (rest s) (conj r (first s) (first s))))))","problem":32,"user":"4f128865535d64f603146428"},{"problem":32,"code":"#(sort (seq (into % %)))","user":"55278187e4b0ffed3738f92d"},{"problem":32,"code":"(fn [arg]\n  (reduce\n    #(conj %1 %2 %2)\n    [] arg))","user":"60a52517e4b00e9e6653c459"},{"problem":32,"code":"(fn primer [collection]\n (\n   (fn duplicate [origCollection newCollection]\n   ( if (= 0 (count origCollection)) \n    newCollection\n    (let [\n      value (first origCollection)\n      double-value (repeat 2 value)\n      updated (concat newCollection double-value)\n      ]\n      (duplicate (rest origCollection) updated)\n      ))\n    ) \n  collection [])\n)","user":"5dcc651de4b02b31cc3da3c8"},{"problem":32,"code":"(fn [arg] \n  (reverse \n   (reduce \n    (fn [arg1 arg2] (conj (conj arg1 arg2) arg2) ) \n    () arg\n    ) \n           )\n  )","user":"5ae71f14e4b0837691e92ca7"},{"code":"#(reverse\n  (reduce (fn [lst elt] (cons elt (cons elt lst)))\n          '()\n          %))","problem":32,"user":"504e1fdde4b0f6ff3350c468"},{"code":"#(mapcat identity (map (fn [x] [x x]) % ))","problem":32,"user":"531541a0e4b08068f379ed25"},{"problem":32,"code":"(fn duplicate-sequence [s] \n  (apply concat (for [x s] [x x])))","user":"5e731c7fe4b085ba37836dcd"},{"problem":32,"code":"(fn [l] (reduce concat (map #(take 2 (repeat %)) l)))","user":"55382517e4b09218d5f44fdc"},{"problem":32,"code":"(fn \n  [seqn]\n  (loop [acc []\n         _seqn seqn]\n    (if (empty? _seqn)\n      acc\n      (let [x (first _seqn)]\n        (recur (conj (conj acc x) x) (rest _seqn))\n        ))))","user":"5854580ce4b07779d46863f9"},{"code":"(fn [dat]\n  (reduce #(conj %1 %2 %2)\n          []\n          dat))","problem":32,"user":"52bbe6e1e4b07a9af57922ef"},{"code":"(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) [] x)))","problem":32,"user":"514f6679e4b0b449e54b8df5"},{"problem":32,"code":"(fn [c]\n  (apply \n   concat\n   (map \n    #(vector % %) \n    c)))","user":"53de7484e4b0d874e779ae35"},{"problem":32,"code":"(fn [coll]\n(apply concat\n  (for [e coll]\n     (list e e))))","user":"5167e8ace4b0c5a4140a309a"},{"problem":32,"code":"(fn [ve] \n  (reduce #(conj %1 %2 %2) [] ve))","user":"59331397e4b072a2710fd046"},{"problem":32,"code":"(fn f [p] (mapcat #(repeat 2 %) p))","user":"557bd432e4b05c286339e0bb"},{"problem":32,"code":"(fn [list]   (mapcat (fn [n] [n n]) list ))","user":"5b6f72ede4b0c6492753e7dc"},{"code":"(fn [aseq] \n  (reverse \n  (reduce \n     (fn [coll value] (conj coll value value ) )\n       '() aseq )\n   )\n)","problem":32,"user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn dup [s]\n  (if (= s [])\n    []\n    (concat [(first s) (first s)] (dup (rest s)))))","problem":32,"user":"5100d7dbe4b04f1d96d946df"},{"code":"#(mapcat (fn [elem] (list elem elem)) %)","problem":32,"user":"4e580746535d8a8b8723a28c"},{"problem":32,"code":"(fn [sequence]\n  ((fn inner [result rest1]\n     (if (not (empty? rest1))\n       (inner (conj result (first rest1) (first rest1))\n              (rest rest1))\n       (reverse result)))\n   '() sequence))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [l]\r\n    (loop [curr l acc []]\r\n        (if (empty? curr) acc\r\n                        (recur (rest curr) (conj acc (first curr) (first curr))) )))","problem":32,"user":"523dd963e4b06956f8342ca1"},{"problem":32,"code":"(fn s-dup [s] (apply concat (for [x s] (list x x))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":32,"code":"reduce #(conj %1 %2 %2) []\n; #(interleave %1 %1)","user":"55b8c339e4b01b9910ae29b9"},{"problem":32,"code":"(fn f [a] (interleave a a))","user":"55280930e4b0ffed3738f93b"},{"problem":32,"code":"(fn\n    [arr]\n    ((fn\n      [res arr]\n      (if (empty? arr)\n        res\n        (recur\n          (concat\n            res\n            (list (first arr))\n            (list (first arr)))\n          (rest arr))))\n      []\n      arr))","user":"555f4bade4b0a2eb076a39c2"},{"code":"(fn [seqn]\n  (loop [seqn seqn acc []]\n    (if-let [x (first seqn)]\n      (recur (rest seqn) (conj acc x x))\n      acc)))","problem":32,"user":"4e8944b6535d4ef0aa30db98"},{"code":"(fn [xs]\n  (reduce #(concat %1 (list %2 %2))\n          '()\n          xs))","problem":32,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":32,"code":"#(reduce (fn repeater [col,x] (concat col (repeatedly 2 (constantly x)))) '() %)","user":"5dfb267ee4b0a607a9a45cd4"},{"problem":32,"code":"(fn\n  [l]\n  (mapcat #(list % %) l))","user":"5a3b5cfde4b001c08efc0cd4"},{"code":"(fn [seq]\n  (reduce into (map #(vector % %) seq)))","problem":32,"user":"4f71347ae4b07046d9f4f009"},{"code":"(fn  [a] (reverse (reduce #(conj %1 %2 %2) '() a)))","problem":32,"user":"515ff4b9e4b0e2be8aa20bd9"},{"code":"(fn [seq]\n  (loop [result '()\n         cur seq]\n    (if (empty? cur) (reverse result)\n     (recur (cons (first cur) \n       (cons (first cur) result))\n         (rest cur)))))","problem":32,"user":"4e4bf20e535dc968683fc4d9"},{"code":"(fn f [lst]\n  (reduce concat \n       (map (partial repeat 2) lst)))","problem":32,"user":"51750cd4e4b07031762f2ee5"},{"problem":32,"code":"(fn [seq] (mapcat\n           #(list % %)\n           seq))","user":"5ee75f8be4b029a2061bbea5"},{"problem":32,"code":"(fn rep [s]  (reduce concat (map #(repeat 2 %) s)))","user":"58840023e4b0f1effa3b768b"},{"problem":32,"code":"#(->> %\n  (map (fn [x] [x x]))\n  (apply concat)\n  )","user":"5b118b7be4b0cc2b61a3be34"},{"code":"(fn dup [items]\n  (if (empty? items)\n    '()\n\t(conj (dup (rest items)) (first items) (first items))))","problem":32,"user":"510cd1dde4b078ea71921124"},{"problem":32,"code":"(fn [col]\n  (loop [col col acc '()]\n    (if (empty? col)\n      acc\n      (recur (rest col)\n             (concat acc\n                  \t(repeat 2 (first col)))))))","user":"587b8bdee4b01531a375eaff"},{"problem":32,"code":"#(mapcat (fn [x] (repeat 2 x)) %1)","user":"5509a176e4b06e50f9beb119"},{"problem":32,"code":"(fn dup [s]\n  (let [rfn (fn [acc x] (conj acc x x))]\n  (reduce rfn [] s)))","user":"52ee46e5e4b05e3f0be25ec5"},{"code":"(comp (partial apply concat) (partial map #(list % %)))","problem":32,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn[x] (mapcat (fn[y] (list y y)) x))","problem":32,"user":"4e70ef6f535d5021c1a89644"},{"code":"#(loop [x %, rlt (seq %)]\n   (if (empty? x)\n     (sort rlt)\n     (recur (rest x) (conj rlt (first x)))))\n\n;;interleave\n\n;;mapcat","problem":32,"user":"4fa7de4ce4b081705acca1c9"},{"code":"(fn [s] (reduce (fn [acc val] (conj (conj acc val) val)) [] s))","problem":32,"user":"53480973e4b084c2834f4a52"},{"code":"(fn dup1p[a] \n  (\n    (fn inn [a1 seqq] \n      (if (= (count a1) 0) \n        seqq \n        (let [g (take (- (count a1) 1) a1)] \n          (inn g (conj (conj seqq (last a1)) (last a1))))\n)\n) a (list) ))","problem":32,"user":"506f5d68e4b082ae7d1032c7"},{"code":"#(loop [coll %\n        ncoll []] (if (empty? coll)\n                    ncoll\n                    (let [elem (first coll)\n                        tail (rest coll)] (recur tail (concat ncoll [elem elem])))))","problem":32,"user":"539f3397e4b0ca733b974496"},{"problem":32,"code":"(fn [x] (loop [sq x acc []] (if (empty? sq) acc (recur (rest sq) (conj (conj acc (first sq)) (first sq))))))","user":"57a22c85e4b0c3d858beb8f6"},{"code":"(fn dup [xs] (if (empty? xs) nil (conj (dup (rest xs)) (first xs) (first xs))))","problem":32,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":32,"code":"(fn [listy] (reverse (reduce (fn [a b] (conj a b b)) (list) listy)))","user":"5da71a00e4b000c986472c14"},{"problem":32,"code":"(fn [x]\n   (let [val1 (repeat 2 x)\n         val2 (sort (concat (first val1) (second val1)))]\n     val2))","user":"5b754a5ae4b047b03b2036c8"},{"code":"(fn [arg]\n  (reverse (reduce #(conj (conj %1 %2) %2) '() arg)))","problem":32,"user":"52bc7ea6e4b07a9af57922f7"},{"code":"#(reverse (reduce (fn [accum x] (conj accum x x)) '() %))","problem":32,"user":"522600cfe4b0f4c7e20d29c8"},{"problem":32,"code":"(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) [] xs)))","user":"53dfbc75e4b0d874e779ae44"},{"problem":32,"code":"(fn dupes [s] (\n                 loop [new [] old s]\n                  ( if (empty? old)\n                    new\n                    (recur (conj new (first old) (first old)) (rest old))\n                   )\n))","user":"52c70127e4b0c2d177d6211a"},{"code":"(fn [s]\n  ((fn [lst acc]\n     (if (empty? lst)\n       (reverse acc)\n       (recur (rest lst) (conj (conj acc (first lst)) (first lst)))))\n   s nil))","problem":32,"user":"50119c07e4b028e9d38b393f"},{"code":"#(apply concat (map (fn [x] (list x x)) %))","problem":32,"user":"4e6e3a1e535d5021c1a89602"},{"problem":32,"code":"(fn [xs] (reduce concat (map #(take 2 (repeat %)) xs)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":32,"code":"#(reduce (fn [acc e] (conj acc e e)) [] %)","user":"56f7ecdfe4b08e7d20b96834"},{"problem":32,"code":"(fn [coll] (let [new-coll (empty coll)] (reduce #(conj % %2 %2) new-coll coll)))","user":"5b43cbb0e4b02d533a91bc3a"},{"problem":32,"code":"(fn [l]\n  (loop [li l el ()]\n    (if (empty? li)\n      el\n      (recur (butlast li) (conj el (last li) (last li))))))","user":"52979551e4b02ebb4ef75043"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [a b] (seq (conj (conj (vec a) b) b))) nil s))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"problem":32,"code":"(fn das [coll]\n  (mapcat #(vector % %) coll))","user":"5475d755e4b0c51c1f4d72a0"},{"problem":32,"code":"reduce #(concat %1 [%2 %2]) ()","user":"568a743ee4b0dcc4269f408e"},{"code":"(fn [l] (mapcat (fn [elem] [elem elem]) l))","problem":32,"user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [l]\n  (reduce\n   (fn [l i]\n       (conj (conj l i) i) ) [] l ) )","problem":32,"user":"530c15f7e4b02e82168697d6"},{"problem":32,"code":"(fn [x] (reduce (fn [coll item] (conj (conj coll item) item))  [] x))","user":"5441f5e8e4b032a45b869375"},{"code":"(fn prod [args] (if\n                  (empty? args) []\n                  (cons (first args) (cons (first args) (prod (rest args))))))","problem":32,"user":"4fd8544be4b0dab7d829f390"},{"code":"#(reduce (fn [a b] (concat a (list b b))) () %)","problem":32,"user":"4f039f14535dcb61093f6b3e"},{"problem":32,"code":"(fn f [col]\n(reverse (loop [out-col (empty col) in-col col ]\n  (let [x (first in-col)]\n  (if (empty? in-col) out-col (recur (cons x (cons x out-col)) (rest in-col))))\n\n)))","user":"547b4ec6e4b0c51c1f4d72d5"},{"problem":32,"code":"#(mapcat (fn [s] (repeat 2 s))%)","user":"606ff56ce4b069485764de21"},{"code":"(fn [xs]\n    (reduce #(concat %1 [%2 %2]) [] xs))","problem":32,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":32,"code":"(fn [coll] (reduce \n            (fn [acc e] (conj acc e e))\n            (empty coll) \n            coll))","user":"5665ef78e4b0e91d5f5c5664"},{"code":"#((fn dup [s acc]\n     (if (empty? s)\n       (reverse acc)\n       (dup (rest s) (list* (first s) (first s) acc)))) % nil)","problem":32,"user":"4ff355a1e4b0678c553fc34d"},{"problem":32,"code":"#(reduce (fn [col el] (apply (partial conj col) (repeat 2 el))) [] %)","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn [x] \n  (apply concat (map (fn [a] [a a]) x))\n  )","problem":32,"user":"52420e2fe4b076e5d3121f48"},{"problem":32,"code":"#(loop [s '()\n                      x %]\n                 (if (empty? x) s\n                     (recur \n                      (concat s (list (first x) (first x)))\n                      (rest x))))","user":"591770dae4b09b4ee5954b9c"},{"problem":32,"code":"(fn [s] (reduce (fn [a b] (conj a b b)) [] s))","user":"559e7848e4b08a52bd4f97d4"},{"code":"(fn [x] (reverse (\n  (fn ap [x res] (\n    if (= x '())\n       res\n        (ap (rest x) (conj res (first x) (first x)))\n    )) x '()\n  )))","problem":32,"user":"4fcf5292e4b03432b189f40e"},{"problem":32,"code":"(fn [x] (reduce concat [] (map #(vector % %) x)))","user":"5d2ca236e4b01671435dbc94"},{"problem":32,"code":"#(reduce (fn dup [acc el] (conj acc el el)) [] %)","user":"56f9392ae4b07572ad1a88ac"},{"problem":32,"code":"(fn my-duplicate [coll]\n    (if (empty? coll) [] \n       (into  [ (first coll) (first coll) ] (my-duplicate (rest coll)) )\n      )\n  \n   )","user":"573940e3e4b0cd1946bd106b"},{"problem":32,"code":"(fn[xs](reduce (fn[r x](conj(conj r x)x)) [] xs))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn duplicate [coll]\n  (reduce #(conj %1 %2 %2) \n          [] \n          coll))","problem":32,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn [sek] (loop [lista nil i 0]\r\n    (cond\r\n      (= (count sek) i) (reverse lista)\r\n      :else (recur (conj lista (nth sek i) (nth sek i)) (inc i))\r\n)))","problem":32,"user":"4e218470535d04ed9115e817"},{"code":"(fn [xs]\n  (apply concat\n         (map #(list % %) xs)))","problem":32,"user":"4ee2da14535d10e5ff6f536c"},{"problem":32,"code":"(fn [c] (reduce (fn [s x] (conj s x x)) [] c))","user":"5b5e7953e4b0c6492753e6d9"},{"code":"(partial reduce (fn [a e] (conj a e e)) [])","problem":32,"user":"4f4afb1fe4b0d56e7bb92c21"},{"problem":32,"code":"#(let [y %1 x %1]\n   (sort (into y x)))","user":"5c813b27e4b0c8042a70ce22"},{"code":"(fn [x] \n  (apply concat (map #(vector % %) x)) )","problem":32,"user":"4e74e119535d7a570dd295bc"},{"problem":32,"code":"(fn duplicate-seq [seq]\n  (reduce concat (map (fn [el] [el el]) seq)))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [xs] (reduce #(conj %1 %2 %2) [] xs))","problem":32,"user":"4fb65f2fe4b081705acca2c7"},{"code":"#(apply concat (for [k %] (list k k)))","problem":32,"user":"508d8ab2e4b0f17d83ea26be"},{"problem":32,"code":"(fn [coll] (mapcat list coll coll))","user":"5a5dbe9de4b0512ff01cd92b"},{"problem":32,"code":"#(seq (reduce (fn [y x] (conj (conj y x) x)) (conj (seq %) [])))","user":"5d6691cee4b0db5d338d15e9"},{"problem":32,"code":"(fn [ls] (reduce concat (map #(list % %) ls)))","user":"53b8b37be4b047364c0444e1"},{"problem":32,"code":"(fn [lst] (mapcat #(vec [% %]) lst))","user":"57b60e46e4b0fbc9809a27b6"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [result [a b]] (conj result a b)) [] (map #(vector %1 %2) s s)))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn [s]\n((fn [r acc]\n  (if (not (seq r)) acc (recur (rest r) (conj acc (first r) (first r))))) s []))","problem":32,"user":"4fa1183fe4b0dcca54ed6d57"},{"problem":32,"code":"(fn [coll] (reduce (fn [z v] (conj z v v)) [] coll))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":32,"code":"(fn \n  [lst]\n  (mapcat #(repeat 2 % ) lst))","user":"57f81569e4b0d3187e900919"},{"code":"(fn [sec]\n  (loop [sec sec\n         result '()]\n    (if (empty? sec)\n      (reverse result)\n      (recur (rest sec)\n             (concat (list (first sec) (first sec)) result)))))","problem":32,"user":"51f297a3e4b0210f90e74552"},{"problem":32,"code":"(fn [x]\n  (mapcat identity\n  \t(\n  \t\tmap (fn [elem] [elem elem]) x\n  \t)\n  )\n)","user":"5559b443e4b0deb715856e3c"},{"problem":32,"code":"#(mapcat (fn [x] [x x]) %)\n;; #(interleave % %) is also pretty great","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":32,"code":"#(reduce (fn [acc x] \n           (-> acc\n               (conj x)\n               (conj x))) [] %)","user":"5e4471e1e4b01d43a70e8e85"},{"code":"(fn dupl ([s] \r\n (reduce #( concat %1 [%2 %2]) []  s)))","problem":32,"user":"4db135081254ad5b4805fa67"},{"code":"#(loop [f % e '()] (if (empty? f) (reverse e) (recur (rest f) (conj e (first f) (first f)))))","problem":32,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":32,"code":"(fn [arg1]\n(cond\n(and (= arg1 [1 2 3])) (quote (1 1 2 2 3 3))\n(and (= arg1 [:a :a :b :b])) (quote (:a :a :a :a :b :b :b :b))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"#(reduce (fn [t e] (conj (conj t e) e)) [] %)","problem":32,"user":"50588ff1e4b06522596eba7e"},{"problem":32,"code":"(fn dubl [x]\n\t\t(cond\n\t\t\t(nil? (first x)) nil\n\t\t\t:else \n\t\t\t  (concat\n\t\t\t    (list (first x) (first x))\n\t\t\t    (dubl (rest x))\n\t\t\t  )\n\t\t)\n\t)","user":"5e1d01b5e4b0dc9594008542"},{"code":"(fn dupl [s]\n    (mapcat #(vector % %) s))","problem":32,"user":"4ed15f60535d44c135fd68cd"},{"problem":32,"code":"(fn [seq] (reduce  #(conj %1 %2 %2) [] seq))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":32,"code":"(fn doop [x]\n  (mapcat identity (map #(cons (first %) %) (partition-all 1 x))))","user":"56c6490de4b05cc29241eeaf"},{"problem":32,"code":"(fn [v] (loop [[x & xs] v, result []]\n                    (if (nil? x) result \n                        (recur xs (conj result x x) ) )))","user":"55edc088e4b0121d4835fde0"},{"problem":32,"code":"(fn duplicate [coll]\n  (reduce concat (map #(repeat 2 %) coll)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn dupe [x] \n  (if (empty? x) '()\n  (concat (list (first x) (first x)) (dupe (rest x)))))","problem":32,"user":"4f036d6e535dcb61093f6ac0"},{"problem":32,"code":"(comp (partial reduce #(conj %1 %2 %2) '()) reverse)","user":"5835bc73e4b089d5ab817ce9"},{"problem":32,"code":"(fn [col] (apply concat (map (fn [x] (list x x)) col)))","user":"547c2c6ce4b0c51c1f4d72e3"},{"problem":32,"code":"(fn dupliciraj [sekv]\n  (if (empty? sekv) '()\n      (conj (conj (dupliciraj (rest sekv)) (first sekv)) (first sekv)))\n)","user":"584d99c5e4b0b7285a6f4e42"},{"problem":32,"code":"(fn [l] \n  (apply concat \n   (map \n    (fn [e] [e e]) l)))","user":"53ad2bbbe4b047364c044464"},{"code":"#(apply concat (map (fn [n] (list n n)) %))","problem":32,"user":"50aca92ee4b071b89ef26232"},{"problem":32,"code":"(fn [x] (apply concat (for [n x]\n              [n n])))","user":"566bd453e4b0a866af6896b7"},{"code":"(fn [aseq]\n  (loop [lista (seq aseq)\n         lista-dup '()]\n    (if (not (not-empty lista))\n      (reverse lista-dup)\n      (recur (rest lista) (cons (first lista) (cons (first lista) lista-dup)  )))))","problem":32,"user":"5213348ae4b0d32679a50652"},{"code":"(fn [coll] (mapcat #(list %1 %1) coll))","problem":32,"user":"52976262e4b02ebb4ef75041"},{"problem":32,"code":"(fn [col]\n   (mapcat #(replicate 2 %) col))","user":"5db98f39e4b010eb3c36cd53"},{"code":"(fn dup [x]\n  (loop [x x ret '()]\n    (if (empty? x) ret\n      (recur (take (dec (count x)) x) (cons (last x) (cons (last x) ret))))))","problem":32,"user":"531c57ace4b08068f379ed9b"},{"code":"(fn [x]\n   (apply concat (map #(list % %) x))\n  )","problem":32,"user":"513b43ede4b067e25a345ed3"},{"problem":32,"code":"(fn dupl [coll] \n  (if (empty? coll)\n    '()\n    (let [elem (first coll)]\n      (conj (dupl (rest coll)) elem elem))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [l] (mapcat #(repeat  2 %) l))","problem":32,"user":"52d83c2ce4b09f7907dd138d"},{"code":"(fn [s]\n  (reduce concat\n          []\n          (map #(vector % %) s)))","problem":32,"user":"4f39c08ae4b0e243712b1efb"},{"problem":32,"code":"(fn d [[first & rest]]\n\t(cond\n\t\t(nil? first) '()\n\t\t:else (conj (conj (d rest) first) first)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":32,"code":"(fn [lst]\n  (reduce (fn [acc x]\n              (-> acc\n                  (conj x)\n                  (conj x)))\n            []\n            lst))","user":"5484c3b2e4b0e286459a11a2"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs\n         acc []]\n    (cond\n     (empty? xs) acc\n     :else (recur (rest xs) (conj (conj acc (first xs)) (first xs))))))","user":"51c116d4e4b0c9c822882942"},{"code":"(fn [s] (reduce (fn [a b] (conj (conj a b) b)) [] s))","problem":32,"user":"515e38ace4b049add99a0538"},{"code":"(fn [xs] (reduce #(into % [%2 %2]) [] xs))","problem":32,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":32,"code":"#(reduce (fn [acc item]\n                (-> acc \n                    (conj item)\n                    (conj item)))\n              [] %\n              )","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"problem":32,"code":"#(reduce concat (map (fn [n] (take 2 (repeat n))) %))","user":"56d47528e4b0ea9b8538f7b7"},{"problem":32,"code":"#(->> %1\n      (map (fn [x] (list x x)))\n      (apply concat))","user":"55627de1e4b0c656e3ff17d9"},{"problem":32,"code":"(fn fun1 [myList]\n  (cond\n   (empty? myList) '()\n   :else (apply conj (fun1 (rest myList)) (list (first myList) (first myList)))\n   ))","user":"5da20e73e4b000c986472be1"},{"problem":32,"code":"(fn [s] (mapcat (fn [x] (repeat 2 x)) s))","user":"562add6de4b00e49c7cb4834"},{"problem":32,"code":"(comp reverse\n        (partial reduce\n                 (comp #(conj % (first %)) conj)\n                 '()))","user":"5f2d6bc4e4b033932238a66e"},{"code":"(fn [coll]\n  (loop [coll coll tmp []]\n    (if (empty? coll)\n      (seq tmp)\n      (recur (rest coll) (conj tmp (first coll) (first coll))))))","problem":32,"user":"4e88feef535d8b9bb0147ca8"},{"code":"(fn [s] (mapcat #(list %1 %1) s) )","problem":32,"user":"5142e808e4b0c172af7558c9"},{"problem":32,"code":"(fn _ [ l ]\n    (if-let [[ x & xs ] l]\n      (concat [x x] (_ xs))\n      ))","user":"5433a07be4b0b6b47310fce0"},{"problem":32,"code":"(fn duplicate [collection]\n  (if (not (= collection []))\n    (concat\n      (list (first collection) (first collection))\n      (duplicate (rest collection)))))","user":"58e980dfe4b056aecfd47d0b"},{"problem":32,"code":"(fn [x] (loop [new-list [] \n               og-list x]\n          (if (empty? og-list)\n            new-list \n            (recur (conj new-list (first og-list) (first og-list)) (rest og-list))\n            )))","user":"5bb3c9a8e4b0a20761a2352f"},{"problem":32,"code":"(fn [coll]\n\t(apply concat (map #(vector % % ) coll)))","user":"556204c2e4b0c656e3ff17d2"},{"problem":32,"code":"(fn [arg]\n  (apply concat (map #(repeat 2 %) arg)))","user":"5691ef12e4b0dcc4269f40f8"},{"problem":32,"code":"reduce #(conj %1 %2 %2) []\n\n;#(mapcat (fn [a] (list a a)) %)\n\n;#(interleave % %)\n\n;#(sort (concat % %))\n\n;(fn [v] (reduce #(conj %1 %2 %2) [] v))","user":"58299e03e4b051871117bf46"},{"problem":32,"code":"#(mapcat identity (map (juxt identity identity) %))","user":"56fe665be4b08d47c97781af"},{"code":"reduce (fn [acc i] (concat acc `(~i ~i))) []","problem":32,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"code":"(fn [coll]\n  (interleave coll coll))","problem":32,"user":"4e4b4564535dc968683fc4d3"},{"code":"(fn [x] (interleave x x)\n  )","problem":32,"user":"534c734de4b084c2834f4a93"},{"code":"(fn dupl [coll]                                                                                                                              \n                     (when (seq coll)                                                                                                                           \n                       (cons (first coll)                                                                                                                       \n                             (cons (first coll)                                                                                                                 \n                                   (dupl (rest coll))))))","problem":32,"user":"4e4be570535dc968683fc4d8"},{"problem":32,"code":"reduce #(concat %1 (repeat 2 %2)) '()","user":"57addf3ae4b0b8559636fca4"},{"code":"(fn [s] (mapcat identity (map #(repeat 2 %) s)))","problem":32,"user":"520c9489e4b0b022ef140c98"},{"problem":32,"code":"(fn [col] (mapcat #(vector % %) col))","user":"5f0e8312e4b0f30dddfb5d5b"},{"problem":32,"code":"(fn [values]\n  (loop [values values result []]\n    (if (empty? values)\n      result\n      (let [item (first values)] \n        (recur (rest values) (conj result item item))))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [col] (interleave col col))","problem":32,"user":"4f032977535dcb61093f6a6c"},{"problem":32,"code":"#(apply concat (map (fn [n] [n n]) %))","user":"540d0087e4b0addc1aec670b"},{"code":"#(loop [s %\n\t      ret []]\n\t (if-let [f (first s)]\n\t   (recur (rest s) (conj (conj ret f) f ))\n\t   ret))","problem":32,"user":"4f05872b535dcb61093f6bf8"},{"code":"(fn duplicate [coll]\n  (loop [coll coll, acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll) (first coll))))))","problem":32,"user":"4f159ea6535d64f603146445"},{"code":"(fn [s] (apply concat (for [x s] [x x])))","problem":32,"user":"4ef2a142535dced4c769f21e"},{"code":"(fn [xs] (apply concat (for [x xs] (repeat 2 x))))","problem":32,"user":"50b9d991e4b04934c218a4a9"},{"problem":32,"code":"#(reverse\n  (reduce\n   (fn[output input]\n     (concat (take 2 (repeat input)) output))\n   '() %))","user":"51671557e4b013fc800656c4"},{"code":"(fn dupl [[f & r]]\n    (if (nil? f) '()\n        (cons f (cons f (dupl r)))))","problem":32,"user":"53300924e4b019098a6f8b55"},{"problem":32,"code":"(fn [x]\n  (reduce #(conj %1 %2 %2)\n          []\n          x))","user":"5ed80d50e4b016b56eae05eb"},{"problem":32,"code":"#(mapcat (fn [n] (repeat 2 n) ) %)","user":"5c31517de4b0d62ef62d9f28"},{"problem":32,"code":"(fn [x] (reduce #(concat % (repeat 2 %2)) [] x))","user":"5787ce76e4b0ebec4cfb750e"},{"problem":32,"code":"(fn dup1 [col] (reduce #(conj %1 %2 %2) [] col))","user":"55632016e4b0c656e3ff17e4"},{"code":"(fn [s] (apply concat (map #(vector % %) s)))","problem":32,"user":"53498f88e4b084c2834f4a64"},{"code":"(fn dupl [sequ] \n  (let [f (first sequ) r (rest sequ)]\n  (if (= sequ '()) '()\n  (cons f (cons f (dupl r))))))","problem":32,"user":"5239caa6e4b0d705d026ef27"},{"problem":32,"code":"(fn [sequence]\n  (interleave sequence sequence)\n  )","user":"5a47ce68e4b05d388ecb6b5d"},{"problem":32,"code":"(fn [coll] (mapcat (juxt identity identity) coll))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":32,"code":"#(loop [out [] in %] (if (empty? in) out (let [i (first in) ] (recur (into out [i i]) (rest in)))))","user":"57f9e0bce4b0d3187e900956"},{"code":"(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","problem":32,"user":"4ed7b617535d10e5ff6f52f3"},{"problem":32,"code":"(fn [coll]\n    (loop [result () coll coll]\n        (if (empty? coll)\n            (reverse result)\n            (recur (conj result (first coll) (first coll)) (rest coll)))))","user":"5896735fe4b00487982d529d"},{"problem":32,"code":"#(reduce (fn [acc v]\n           (conj acc v v))\n         []\n         %)","user":"597f8984e4b0dbe32238d0bf"},{"code":"#(reduce (fn [l r] (apply conj l [r r])) [] %)","problem":32,"user":"5287f34ee4b0239c8a67ae43"},{"problem":32,"code":"(fn f [seq]\n  (if (not (empty? seq))\n    (concat (list\n             (first seq)\n             (first seq))\n            (f (rest seq)))))","user":"589f37e0e4b02bd94d917e79"},{"problem":32,"code":"mapcat #(take 2 (cycle [%]))","user":"55ad59cde4b03311e7b732a7"},{"problem":32,"code":"(fn dup-1 [coll]\n  (reverse (reduce (fn [t v]\n            (concat (list v v) t)) () coll)))","user":"58edaa3be4b056aecfd47d89"},{"code":"#( reduce (fn [acc v] (conj (conj acc v) v) ) [] %)","problem":32,"user":"4e6f8431535d5021c1a8961e"},{"problem":32,"code":"(fn duplicate-once [elements]\n  (if (empty? elements)\n    '()\n    (conj (duplicate-once (rest elements)) (first elements) (first elements))))","user":"5dc4719ae4b02f9375f4e1b5"},{"code":"(fn mydup [lt]\r\n    (apply concat (map #(list % %) lt)))","problem":32,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":32,"code":"(fn [seqnc]\n  (mapcat #(list % %) seqnc))","user":"50a00725e4b08df8156e9e46"},{"problem":32,"code":"(fn\n  [lst]\n  (mapcat (fn [a]\n            (repeat 2 a))\n          lst))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":32,"code":"(fn [coll]\n  (reduce\n   (fn [l el]\n     (into l (take 2 (repeat el))))\n   []\n   coll))","user":"5c15537ae4b01240ff5671bf"},{"code":"mapcat #(seq [%1 %1])","problem":32,"user":"51d59859e4b01da06753aa92"},{"problem":32,"code":"(fn foo [x]\n  (loop [in x,\n         out []]\n    (if (empty? in)\n      (seq out)\n      (recur (rest in)\n             (conj (conj out (first in)) (first in))\n             ))))","user":"58cff8b0e4b03c36ff7e58c0"},{"code":"(fn [s]\n  (reduce (fn [xs x]\n            (cons x (cons x xs)))\n          '()\n          (reverse s)))","problem":32,"user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn [sq] \n   (mapcat list sq sq))","problem":32,"user":"4f17df72535d64f603146458"},{"code":"(fn duplicate [x] \n  (if (seq x) \n  (into \n    (duplicate (rest x)) \n    (conj (conj '() (first x)) (first x)))\n  () )\n)","problem":32,"user":"4e8d5edd535d65386fec2134"},{"code":"reduce (fn [res y] ( concat res [y] [y] )) []","problem":32,"user":"51cec7b1e4b0e42293a2255b"},{"problem":32,"code":"(fn duplicate-sequence [xs]\n  (apply concat (map #(repeat 2 %) xs)))","user":"56efc9fde4b04a395b9a0464"},{"problem":32,"code":"(fn duplicate [[element & rest-ele]]\n  (let [collection (list element element)] (if (empty? rest-ele)\n    collection\n    (concat collection (duplicate rest-ele)))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":32,"code":"(fn\n  [s]\n  (mapcat #(vector % %) s))","user":"556e3b73e4b09a3098a52514"},{"code":"(fn dbl [xs]\n  (mapcat (fn [x] [x x]) xs))","problem":32,"user":"51ac6360e4b09397d510976c"},{"problem":32,"code":"(fn [a] (loop [src a res []] (if (empty? src) (seq res) (recur (rest src) (conj res (first src) (first src))))))","user":"5e0d1947e4b099d064962f92"},{"code":"(fn f [x] (if (empty? x) [] (concat (list (first x)(first x)) (f (rest x))) )  )","problem":32,"user":"4fe9cea4e4b0547ebccb2471"},{"code":"(fn [sequence]\n  (sort (concat sequence sequence)))","problem":32,"user":"4f74fe77e4b0fbe0118ec552"},{"problem":32,"code":"(fn dublicate\n   [args]\n   (loop [lst args ret '()]\n     (if (not (empty? lst))\n       (recur (rest lst) (conj ret (first lst) (first lst)))\n       (reverse ret))))","user":"5b86462de4b047b03b2037df"},{"problem":32,"code":"(fn duplicate [xs]\n  (if (empty? xs) xs\n        (cons (first xs) (cons (first xs) (duplicate (rest xs))))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":32,"code":"(fn [n]\n(sort (take (* 2 (count n)) (cycle n))))","user":"558053b1e4b05c286339e0e9"},{"problem":32,"code":"(fn dupe\n  [s]\n  (reduce\n   (fn [acc e]\n     (concat acc [e e]))\n   []\n   s))","user":"5bab49bbe4b0a20761a23474"},{"code":"(fn [coll]\n  (mapcat #(repeat 2 %1) coll))","problem":32,"user":"4e40529b535dc968683fc49a"},{"problem":32,"code":"#(interleave % %)\n;mapcat #(list % %)","user":"5e357507e4b0650de70e2b2a"},{"problem":32,"code":"#(seq (reduce (fn [acc item]                                                         \n                     (-> acc                                                              \n                         (conj item)                                                      \n                         (conj item)))                                                    \n                  [] %))","user":"57f52d3be4b0903ccab3dce7"},{"problem":32,"code":"#(reduce (fn [col el] (conj col el el)) [] %)","user":"5f0a4904e4b09a3f05b71805"},{"code":"(fn dupe[xs] (reduce concat (map (partial repeat 2) xs)))","problem":32,"user":"525b12b1e4b0cb4875a45d04"},{"problem":32,"code":"(fn duplicate [l]\n  (let [la (= 1 (count l))\n        v (first l)]\n    (if la (list v v) (conj (duplicate (rest l)) v v))))","user":"586e47dee4b01531a375e9a9"},{"problem":32,"code":"(fn [xs] (for [x xs k (range 2)] x))","user":"57015a1de4b08d47c97781d4"},{"problem":32,"code":"#(loop [xs %, res []]\n   (if (seq xs)\n     (recur (rest xs) (into res (repeat 2 (first xs))))\n     res))","user":"54995298e4b0b312c081ff8b"},{"problem":32,"code":"(fn [coll] (loop [coll coll acc []] (if (empty? coll) acc (recur (rest coll) (conj (conj acc (first coll)) (first coll))))))","user":"54886239e4b0e286459a11d0"},{"problem":32,"code":"(fn [coll] (apply concat (map (fn [a b] (list a b)) coll coll)))","user":"571c2babe4b07c98581c3b73"},{"code":"(partial mapcat #(when-not (nil? %) [% %]))","problem":32,"user":"50afdf00e4b0c3f5ed5c29a5"},{"code":"(fn [s] (reduce #(conj %1 %2 %2) '[] s))","problem":32,"user":"51caca2ae4b068dadb8f2226"},{"problem":32,"code":"(fn [rst]\n  (loop [i (first rst)\n         others (rest rst)\n         dup-seq []]\n    (if (= (count others) 0)\n      (conj dup-seq i i)\n      (recur (first others) (rest others) (conj dup-seq i i)))))","user":"599ed08fe4b0871e7608b812"},{"problem":32,"code":"#(loop [s %\n         result []]\n    (if (next s)\n      (recur (rest s) (conj (conj result (first s)) (first s)))\n      (conj (conj result (first s)) (first s))))","user":"502ea967e4b06efe12e8cc76"},{"problem":32,"code":"(fn [coll] (sort (concat coll coll)))","user":"5baaae06e4b0a20761a23464"},{"problem":32,"code":"(fn duplicate-seq [sequence]\n  (apply concat (for [s sequence]\n                  [s s])))","user":"5fada7cce4b08cb800c85af5"},{"problem":32,"code":"(fn [xs]\n  (apply concat (map #(repeat 2 %) xs)))","user":"57a49951e4b0a966079561e5"},{"code":"(fn [l]\n  (loop [[hd & body] l ret []]\n    (if (nil? hd)\n      ret\n      (recur body (conj ret hd hd)))))","problem":32,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn dubl [inseq] (apply concat (map #(repeat 2 %) inseq)))","problem":32,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":32,"code":"reduce (fn [coll, elem]\n         (conj coll elem elem))\n        []","user":"54848141e4b0e286459a119e"},{"code":"(fn [xs] (apply concat (map #(take 2 (repeat %)) xs)))","problem":32,"user":"4e4ea0f6535dc968683fc4e6"},{"code":"(fn duplicate [nums]\n  (loop [li '()\n         x nums\n         dup_num 0]\n    (if (= x nil)\n      (reverse li)\n      (if (< 1 dup_num)\n        (recur li (next x) 0)\n        (recur (conj li (first x)) x (inc dup_num))))))","problem":32,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":32,"code":"(fn duplicate-seq [a-seq]\n        (reduce #(conj %1 %2 %2) [] a-seq))","user":"57ca95f2e4b05aa3c4741d3b"},{"code":"(fn dupl [seq]\n  (if (empty? seq)\n    ()\n    (cons (first seq) \n          (cons (first seq) (dupl (rest seq))))))","problem":32,"user":"503e6047e4b06c4e0e1fa266"},{"problem":32,"code":"(fn [col]\n  (loop [res []\n         n 0]\n    (if (= n (count col))\n      res\n      (recur (conj res (nth col n) (nth col n))\n             (inc n)))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn dup [s]\n  (reduce (fn [c e]  (conj c e e) ) [] s))","problem":32,"user":"5101192ae4b0bef64c30e266"},{"problem":32,"code":"reduce (fn [acc, val] (conj(conj acc val) val))[]","user":"5776558ee4b0979f89651633"},{"code":"#(seq (reduce (fn [v f] (do (conj (conj v f) f))) [] %))","problem":32,"user":"50e008d1e4b061dbdced722a"},{"code":"#(loop [out [] in %]\n  (if (empty? in) (reverse out)\n    (recur (cons (first in) (cons (first in) out)) (rest in))))","problem":32,"user":"4ea00469535d7eef3080729d"},{"problem":32,"code":"(fn [sequ] (reduce #(concat  %1 [%2 %2]) [] sequ))","user":"567476bde4b05957ce8c6139"},{"code":"#(reduce concat (for [x %] [x x]))","problem":32,"user":"4e6b04ae535d8ccf87e9ff09"},{"problem":32,"code":"(fn dup [s] \n  (let [f (first s) r (rest s)]\n\t(if (= r ())\n      (list f f)\n      (conj (conj (dup r) f) f))))","user":"5d81c244e4b0915913b1d37a"},{"problem":32,"code":"(fn f [coll]\n  (loop [acc nil\n         [x & xs] coll]\n    (if-not x\n      (reverse acc)\n      (recur (cons x (cons x acc))\n             xs))))","user":"5777c3d6e4b0979f8965164f"},{"problem":32,"code":"(fn dupseq [[x & xs :as l]]\n  (if (empty? l) nil\n  \t(conj (dupseq xs) x x)))","user":"5396c94be4b0b51d73faaee3"},{"code":"reduce #(-> %1 (conj %2) (conj %2) ) []","problem":32,"user":"4e952463535dbda64a6f6b31"},{"problem":32,"code":"(fn foo [[fst & rst]] (concat (list fst fst) (if (empty? rst) nil (foo rst))))","user":"5747e22ce4b009280f9f2b7c"},{"code":"(fn rep [l]\n  (if (empty? (rest l))\n  (cons (first l) (cons (first l) '()))\n  (cons (first l) (cons (first l) (rep (rest l))))))","problem":32,"user":"4e568873535d8a8b8723a283"},{"code":"(fn [n] (  reverse (loop [cnt 0 acc []] (if (= cnt (count n))             acc\n          (recur (inc cnt) (cons (nth n cnt) (cons (nth n cnt) acc)))))))","problem":32,"user":"4f32135ae4b0d6649770a08e"},{"problem":32,"code":"(fn [clxn] \n  (mapcat \n    (fn [i] \n      [i i])\n      ;;(map (fn [_] i) (range 2))) \n  clxn))","user":"56e4a6c1e4b03a7c14b85a51"},{"code":"(fn dup [[x & xs]]\n   (if (nil? x) []\n   `(~x ~x ~@(dup xs))))","problem":32,"user":"4fe8d862e4b0547ebccb2428"},{"problem":32,"code":"(fn dup [s] \n  (if (nil? s) \n    '()\n    (conj (dup (next s)) (first s) (first s))))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":32,"code":";;reduce #(conj %1 %2 %2) []\nmapcat #(list % %)","user":"5891bddce4b00487982d5201"},{"code":"(fn duplicate-seq [items]\n  (when-let [[f & r] (seq items)]\n    (conj (duplicate-seq r) f f)))","problem":32,"user":"4f81fcbfe4b033992c121c03"},{"problem":32,"code":"(fn [x]\n  (apply concat\n         (map #(repeat 2 %)\n           x)))","user":"5e3c6687e4b01d43a70e8e04"},{"problem":32,"code":"(fn [x] (reduce concat (map (fn [el] (repeat 2 el)) x)))","user":"58dbbdb3e4b0a4d5acaab687"},{"problem":32,"code":"(fn duplicate[userList] (if (empty? userList)\n                                 []\n                                 (reduce conj (duplicate (drop-last userList)) (repeat 2 (last userList)))))","user":"556bbaaee4b09a3098a524f0"},{"problem":32,"code":"(fn pack\n  [lst]\n  (into [] (mapcat #(list % %) lst)))","user":"59e778aae4b0249b72820716"},{"problem":32,"code":"(fn [x] (reduce (fn [c i] (conj c i i)) [] x))","user":"54257124e4b01498b1a71b09"},{"problem":32,"code":"(fn duplicate [coll]\n   ((fn dup_inner [coll acc]\n      (if (empty? coll)\n      acc\n      (recur (next coll) (conj acc (first coll) (first coll)))))\n    coll []))","user":"55f04940e4b06e875b46ce21"},{"code":"(fn [a] (apply concat (map #(list % %) a)))","problem":32,"user":"4e662d58535d8ccf87e9fe75"},{"problem":32,"code":"(fn [lst] (reduce #(conj % %2 %2) [] lst))","user":"56e08e4fe4b0ca2494a0960b"},{"problem":32,"code":"(fn dup\n  ([x y]\n   (cond (empty? x) (seq y)\n         :else (recur (rest x) (conj (conj y (first x)) (first x)))))\n  ([x]\n   (dup x [])))","user":"58a3ba31e4b02bd94d917eff"},{"problem":32,"code":"(fn [xs] (reduce #(conj %1 %2 %2) (vector) xs))","user":"570eeca5e4b0b0fb43fd06fb"},{"problem":32,"code":"(fn [x]\n  (loop [s x\n         result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (conj result (first s) (first s))))))","user":"5a23cabce4b0ff51aa4b32df"},{"code":"#(into '() (reduce (fn [acc v] (cons v (cons v acc))) '() %))","problem":32,"user":"50eebf46e4b06330c1f87c61"},{"code":"reduce (fn [state x] (conj state x x)) []","problem":32,"user":"52cc4fd6e4b07d0d72b27360"},{"problem":32,"code":"(fn [c]\n  (mapcat #(vector % %) c))","user":"55fbf6cae4b0f488688e066c"},{"problem":32,"code":"#(loop [dup (first %)\n        theRest (rest %)\n        ret []]\n   (if (not (nil? dup))\n     (recur (first theRest)\n            (rest theRest)\n            (conj (conj ret dup) dup))\n     ret))","user":"539f4e9ee4b0ca733b974498"},{"problem":32,"code":"(fn [coll]\n  (loop [c coll, res []]\n    (if (empty? c)\n      res\n      (recur (rest c) (conj res (first c) (first c))))))","user":"5e9f38cce4b00a66d4a9517e"},{"code":"(fn f [datas]\n  ((fn [data rs]\n    (if (empty? data) rs\n      (recur (rest data) \n        (conj (conj rs (first data)) (first data) \n          )))) (reverse datas) '()))","problem":32,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn dup [s]\n  (if\n    (empty? s) '()\n    (conj \n      (dup (rest s)) (first s) (first s))))","problem":32,"user":"504e48ace4b0f6ff3350c498"},{"problem":32,"code":"(fn [s]\n  (sort (reduce conj s s)))","user":"5cada3b8e4b026601754b872"},{"code":"(fn dup\n  ([s] (dup s [])) \n  ([s r] (let[f (first s) n (next s) r (conj r f f)]\n      (if n (recur n r) r)\n    ))\n)","problem":32,"user":"4e44358f535dc968683fc4a8"},{"problem":32,"code":"(fn duplicator \n  ([args]\n   (duplicator args args []))\n  ([args clone dupped]\n   (if (empty? args)\n     dupped\n     (duplicator (rest args) (rest clone) (conj dupped (first args) (first clone))))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":32,"code":"(fn f [[x & xs]]\n  (if (nil? xs)\n    [x x]\n    (into [x x] (f xs))))","user":"56483562e4b0284900eef629"},{"code":"(fn [x] \r\n       (reduce #(conj %1 %2 %2) [] x))","problem":32,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [l] (reduce concat ( map #(repeat 2 %) l )))","problem":32,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":32,"code":"(fn [z] \n  (reduce \n   (fn [x y] (conj (conj x y) y))\n   [] \n   z))","user":"5628f33ce4b00e49c7cb47f3"},{"code":"#(for [x % _ (range 2)]  x)","problem":32,"user":"4ee3afde535d10e5ff6f5370"},{"problem":32,"code":"(fn x\n  [liste]\n  (loop [restant liste, traite '()]\n    (if (empty? restant)\n      (reverse traite)\n      (let [[head & tail] restant]\n        (recur\n         tail\n         (conj (conj traite head) head)\n         )\n        )\n      )\n    )\n  )","user":"54410a71e4b032a45b869367"},{"problem":32,"code":"reduce (fn [res x] (conj (conj res x) x)) []","user":"55f5b657e4b06e875b46ce8c"},{"code":"#(interleave % %)\n;#(mapcat list % %)","problem":32,"user":"53a074a4e4b0ca733b9744af"},{"problem":32,"code":"#(loop [i 0 out '()]\n    (if (= i (count %))\n      (reverse out)\n      (recur (inc i) (conj out (nth % i) (nth % i)))))","user":"5470cb10e4b094393f72dd65"},{"code":"reduce (fn [acc v] (conj acc v v)) []","problem":32,"user":"50c9ece0e4b0a409464667d8"},{"code":"(fn [sq] (mapcat #(list % %) sq))","problem":32,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn[x](apply concat ((fn[x]( for[some x] [some some])) x) ))","problem":32,"user":"5302d79ce4b0d8b024fd3736"},{"code":"(fn [s] (reduce concat (map #(list % %) s)))","problem":32,"user":"4ff889f2e4b0678c553fc399"},{"code":"#(sort(apply conj %1 %1))","problem":32,"user":"52117ea7e4b07aea8afc4f70"},{"problem":32,"code":"(fn [x]\n  (loop [sq x result []]\n    (if (empty? sq)\n    result\n    (recur (rest sq)\n           (concat result (conj (conj [] (first sq)) (first sq)))))))","user":"5db16084e4b010eb3c36cd01"},{"problem":32,"code":"(fn [s]\n            (interleave s s))","user":"54c3747de4b045293a27f60e"},{"problem":32,"code":"(fn [xs] \n  (apply concat (map #(repeat 2 %) xs)))","user":"6026d2cae4b0d5df2af22232"},{"problem":32,"code":"(fn [x] (reverse (reduce #(conj (conj %1 %2) %2) '() x)))","user":"549cd548e4b0f3d1d8e70f91"},{"problem":32,"code":"(fn [array]\n  (reduce #(conj (conj % %2) %2) [] array))","user":"57c2d66ae4b05aa3c4741cb9"},{"code":"#(sort (apply list (apply conj % %)))","problem":32,"user":"50270618e4b01614d1633feb"},{"problem":32,"code":"(fn [a] (mapcat (fn [a] [a a]) a))","user":"4f721e9ee4b07046d9f4f01e"},{"problem":32,"code":"(fn [coll]\n  (mapcat identity \n          (map (partial repeat 2) coll)))","user":"548ff2d5e4b0b312c081ff2b"},{"code":"(fn [lst]\n  (apply concat (map (fn [i] (list i i)) lst)))","problem":32,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [coll]\n (reduce concat (map (partial repeat 2) coll)))","problem":32,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn [coll] (mapcat #(list % %) coll))","problem":32,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn [f] (#(interleave f f)))","problem":32,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn dup [x]\n       (if (empty? x)\n         x\n         (let [head (first x)] (conj (dup (rest x)) head head))))","problem":32,"user":"50b61e7ae4b0e3a8b79a9a68"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [acc x]\n            (concat acc [x] [x]))\n          []\n          coll))","user":"554bd33ce4b0a04f7929959a"},{"problem":32,"code":"(fn [sequ]\n    (sort (concat sequ sequ)))","user":"570006f1e4b08d47c97781c5"},{"problem":32,"code":"(fn duplicate-element\n  [x]\n  (sort (into x x)))","user":"5d9c8a85e4b0eb781811cdad"},{"problem":32,"code":"#(reduce \n  (fn [a b] (conj a b b)) [] %)","user":"4fc77f5ae4b0ee37620e1821"},{"code":"reduce (fn [l v] (concat l (list v v))) '()","problem":32,"user":"50589113e4b06522596eba7f"},{"problem":32,"code":"(fn [s] (reverse (reduce (fn [new-coll x] (conj (conj new-coll x) x)) '() s)))","user":"59be62d5e4b0a024fb6ae435"},{"problem":32,"code":"(fn dupe [inseq] \n    (reduce #(concat %1 [%2] [%2]) [] inseq))","user":"54f09599e4b024c67c0cf89d"},{"problem":32,"code":"(fn [coll] (mapcat #(replicate 2 %) coll))","user":"555d4421e4b0a2eb076a39a8"},{"code":"(fn [coll]\n  (loop [remain coll acc []]\n    (if (empty? remain)\n      acc\n      (recur (rest remain) (conj acc (first remain) (first remain))))))","problem":32,"user":"50e3cf55e4b01912b3285c45"},{"problem":32,"code":"(fn [seq-to-double]\n  (loop [[head & tail] seq-to-double\n         seq-doubled []]\n    (let [result (conj seq-doubled head head)]\n      (if (empty? tail)\n        result\n        (recur tail result)))))","user":"567bf820e4b05957ce8c61ad"},{"problem":32,"code":"(fn [s]\n  (loop [x (first s) xs (next s) res []]\n    (if-not x\n      res\n      (recur (first xs) (next xs) (conj res x x)))))","user":"589f2cefe4b02bd94d917e75"},{"problem":32,"code":"(fn dup-all [in]\n\t(loop [[x1 & xrest :as X] in, out []]\n\t\t(if (seq X) \n\t\t\t(recur xrest (conj out x1 x1)) \n\t\t\tout)))","user":"564d02cde4b0284900eef679"},{"problem":32,"code":"(fn [lst] (reduce #(apply conj %1 (list %2 %2)) [] lst))","user":"59e8cd8be4b0249b72820739"},{"code":"(fn dup [[first & rest]]\n  (if (nil? rest)\n    (cons first (cons first ()))\n    (concat (cons first (cons first ())) (dup rest))\n    )\n  \n  )","problem":32,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn dup [s]\n  (reduce #(cons %2 (cons %2 %1)) '() (reverse s)))","problem":32,"user":"51085be5e4b00aa5c85a1024"},{"code":"(fn [s]\n  (loop\n    [result '()\n     [h & rest :as remaining] s]\n    (if (empty? remaining)\n      result\n      (recur (concat result [h h]) rest))))","problem":32,"user":"4e6f578c535d5021c1a8961b"},{"problem":32,"code":"(fn [xs]\n  (loop [elems xs\n         res []]\n    (if-not (empty? elems)\n      (recur (rest elems) (into res [(first elems) (first elems)]))\n      res)))","user":"52fe31d5e4b047fd55837038"},{"problem":32,"code":";;reduce #(conj (conj % %2) %2) []\n;;reduce #(conj % %2 %2) []\n;;#(interleave % %)\n;;#(mapcat list % %)\n;;mapcat #(list % %)\nmapcat (fn [x] [x x]) ;;mapcat #([% %])  -- is bad","user":"57ba55c1e4b0fbc9809a2801"},{"problem":32,"code":"#(reverse ( reduce ( fn revred [ res a ] ( conj res a a ) ) '() %) )","user":"5d5c6675e4b09db18d4482ec"},{"code":"(fn [x]\n  (mapcat #(vector % %) x))","problem":32,"user":"4f541874e4b0a7574ea717d8"},{"problem":32,"code":"reduce (fn [ret elem] (conj (conj ret elem) elem)) []","user":"5db7376fe4b010eb3c36cd43"},{"problem":32,"code":"#(reduce (fn [acc curr] (into acc [curr curr])) [] %)","user":"5e67ab18e4b0e171e103368a"},{"code":"(fn [c]\n  (reduce concat (map (fn [x] [x x]) c))\n)","problem":32,"user":"52ecb1efe4b0705949c44454"},{"problem":32,"code":"#(mapcat (fn [item]\n           (take 2 (repeat item)))\n         %1)","user":"59a3f3dce4b066c664927d48"},{"problem":32,"code":"(fn [c] \n  (loop [a c\n         r []]\n    (if (empty? a)\n      r\n      (recur (rest a)(conj (conj r (first a)) (first a))))))","user":"5ab9fe71e4b073f17744269d"},{"code":"(fn [col]\n  (mapcat #(repeat 2 %) col))","problem":32,"user":"4e7e8485535db169f9c79716"},{"problem":32,"code":";; interleave is easier\n(fn my-duplicate [l]\n      (reduce (fn [accum item] (conj accum item item)) [] l))","user":"539f9f79e4b0ca733b97449e"},{"problem":32,"code":"#(reverse (reduce (fn [x y] (cons y (cons y x))) [] %))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn [x] (reduce (fn [r a] (conj r a a)) [] x))","problem":32,"user":"52808897e4b0757a1b171404"},{"problem":32,"code":"(fn [a] (loop [input a output '()] (if (empty? input) (reverse output) \n                                     (recur (rest input) (cons (first input) (cons (first input) output))))))","user":"5cf8864be4b0b71b1d808a84"},{"code":"(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)) )","problem":32,"user":"5242d5c3e4b076204b44fa95"},{"code":"(fn dup [s]\n  (reduce concat (map #(list %1 %1) s)))","problem":32,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [x]\n  (loop [coll x answer []]\n    (if (empty? coll) answer\n      (recur\n        (rest coll)\n        (conj answer (first coll) (first coll))\n      )\n    )\n  )\n)","problem":32,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":32,"code":"(fn [t] (into () (reduce (fn [acc x] (cons x (cons x acc))) '() t)))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":32,"code":"(fn [coll] (apply concat (map (fn [x] (list x x)) coll) ))","user":"54cb3497e4b057c6fda3a272"},{"problem":32,"code":"(fn [arg]\n   (reverse (loop [a 0 result '() coll arg]\n              (if (= a (count arg))\n                result\n                (recur (inc a) (conj (conj result (first coll)) (first coll)) (rest coll))\n                )\n              ))\n   )","user":"5002c798e4b0678c553fc42d"},{"problem":32,"code":"(fn [x](reverse( reduce #(into %1 [%2 %2]) '() x)))","user":"56ae4c21e4b03c432f18735c"},{"problem":32,"code":"(fn [x]\n  (apply concat\n    (for [y x]\n      (concat [y] [y]))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"#(vec (sort (concat % %)))","problem":32,"user":"52be23dbe4b07a9af5792316"},{"code":"(fn d [xs]\n  (if (empty? (rest xs))\n        [(first xs) (first xs)]\n        (lazy-cat [(first xs) (first xs)]\n                  (d (rest xs)))))","problem":32,"user":"4f7250cce4b07046d9f4f02a"},{"problem":32,"code":"(fn [coll] (apply concat (map (fn [eachElement] (conj '() eachElement eachElement)) coll)))","user":"5a63f8bae4b0512ff01cd99f"},{"code":"reduce (fn [ret arg] (conj ret arg arg)) []","problem":32,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn [s]\n  (loop [[part & parts] s acc []]\n    (if (nil? part) acc (recur parts (concat acc [part part])))))","problem":32,"user":"4e7f7e48535db966e863cc42"},{"problem":32,"code":"(fn [x]\n  (reduce\n   #(do\n      (conj %1 %2 %2))\n   '[]\n   x))","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn duplicate-seq [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))","problem":32,"user":"51ac7e9be4b09397d510976f"},{"code":"#(apply concat (map (fn dup [x] (list x x)) %))","problem":32,"user":"50982769e4b04e098a4c726a"},{"problem":32,"code":"reduce  #(conj (conj % %2) %2 ) []","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn dup-seq [seq]\n  (cond\n    (empty? seq) '()\n    :else\n      (cons (first seq) \n        (cons (first seq) \n          (dup-seq (rest seq))))))","problem":32,"user":"4fd16778e4b04c3a95aa040f"},{"problem":32,"code":"#(reduce (fn [memo, e] (conj memo e e)) [] %)","user":"58136679e4b0f478707a060d"},{"code":"(fn [x] (loop [to []\r\n               from x] \r\n  (if (= 0 (count from)) (into '() (reverse to)) \r\n  (recur (conj (conj to (first from)) (first from)) (rest from)))))","problem":32,"user":"4ff78679e4b0678c553fc392"},{"problem":32,"code":"(fn [s]\n                     (loop [s (seq s)\n                            out []]\n                       (if (empty? s)\n                         out\n                         (recur (rest s) (conj out (first s) (first s))))))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn [coll] (apply concat (map #(list % %) coll)))","problem":32,"user":"50fe2b87e4b03cd852b4e84b"},{"problem":32,"code":"(fn double-seq [[x & xs :as all]]\n (if (empty? all)\n   '()\n   (conj (double-seq xs) x x)))","user":"56339e23e4b0bfe05bf117b1"},{"problem":32,"code":"(fn dupe [coll] (\n                 apply concat (map (fn [x] (list x x) ) coll)\n                 )\n  )","user":"5da975b9e4b000c986472c32"},{"problem":32,"code":"(fn [v] (apply concat (map #(list %1 %1) v)))","user":"57a499dae4b0a966079561e6"},{"problem":32,"code":"(fn t1 [x] \n  (when (seq x)\n  (cons (first x) (cons (first x) (t1 (rest x))) )\n    )\n  \n)","user":"518665cde4b0da5a5be3bad2"},{"problem":32,"code":"(fn foo [in] (if (empty? in) '() (conj (foo (rest in)) (first in) (first in)) ))","user":"5bbaf02fe4b0a20761a235f4"},{"problem":32,"code":"(fn foo\n     [coll] (if (empty? coll) () (let [head (first coll)] (conj (foo (rest coll)) head head))))","user":"5509bec5e4b06e50f9beb121"},{"problem":32,"code":"(fn [x] ((fn doble [nseq, left]\n            (\n              if (empty? left)\n              nseq\n              (let [a (first left) b (rest left)]\n                (doble (concat nseq (seq [a a])) b)))) [] x))","user":"5be909bae4b0f319e2d7ec6d"},{"code":"(fn duplicate[s]\n (loop [res()\n  \tlst (seq s)\n        indice 0\n        ]\n\t(if (< indice (count  s))\n\t\t(let [dato (first lst)\n              ]\n    \t  (recur (conj (conj res dato) dato) (next lst) (inc indice))\n         )\n      (sort res)\n     )\n\n  )\n\n  )","problem":32,"user":"50255bafe4b0b0b8afb15aa8"},{"code":"(fn dup\n        ([vs] (dup vs []))\n        ([vs acc]\n           (if (empty? vs)\n             (apply list acc)\n             (let [fst (first vs)]\n               (dup (rest vs) (conj acc fst fst))))))","problem":32,"user":"52c58561e4b0c2d177d620f8"},{"code":"#(reduce into '() (map (fn [x] [x x]) (reverse %)))","problem":32,"user":"532686e6e4b09d4e7a9b54ef"},{"problem":32,"code":"(fn duplicate [arg] (mapcat #(list % %) arg))","user":"55f330dde4b06e875b46ce56"},{"problem":32,"code":"(fn\n      [l]\n      (sort (take (* 2 (count l)) (cycle l)))\n      )","user":"5683b67ce4b0945ebc182a9f"},{"code":"#(reduce concat (map (fn [x] (repeat 2 x)) %))","problem":32,"user":"537881a4e4b06839e8705e46"},{"code":"(fn [lst] (apply concat [] (for [x lst] [x x])))","problem":32,"user":"4f36f5f2e4b0e243712b1ece"},{"problem":32,"code":"(fn [coll]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))","user":"5df75fd8e4b0a607a9a45c92"},{"problem":32,"code":"#(mapcat (fn[x](vector x x)) %)","user":"5306bceee4b02e821686979b"},{"problem":32,"code":"(fn [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))","user":"5c891afde4b048ec896c5935"},{"code":"(fn anon [x]\n  (cond\n    (empty? x) []\n    true (into [(first x)] (into [(first x)] (anon (rest x))))))","problem":32,"user":"503cc8cae4b06c4e0e1fa251"},{"code":"(fn [x] (reduce concat (map #(take 2 (repeat %)) x )))","problem":32,"user":"52614bc1e4b03e8d9a4a705c"},{"code":"#(mapcat (fn [x] (repeat 2 x)) %)","problem":32,"user":"5121cccee4b05ae5a5823c12"},{"problem":32,"code":"(fn [s] (reduce (fn [s1 s2] (concat s1 s2)) '()  (map #(replicate 2 %) s)))","user":"5a86ad84e4b05369db4d249c"},{"code":"#(reverse (reduce (fn [l a] (conj (conj l a) a)) '() %))","problem":32,"user":"515828b8e4b0a069fd272c71"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s)\n    s\n    (let [[x & y] s]\n      (cons x (cons x (dup y))))))","user":"597a4277e4b02382a38ad1e2"},{"problem":32,"code":"(fn [sq] (mapcat (fn [x] (list x x)) sq))","user":"5e6ff368e4b04a83ad7cd2a8"},{"problem":32,"code":"#(loop [s %1 result []]\n       (if (empty? s)\n         result\n         (recur (rest s) (conj result (first s) (first s)))))","user":"5763818ae4b0994c1922fbc7"},{"problem":32,"code":"(fn duplicate [s]\n  (->>\n    s\n    (reduce\n      (fn [acc curr]\n        (conj acc curr curr))\n      [])\n    seq))","user":"5d0eed51e4b0cc9c91588262"},{"problem":32,"code":"(fn sk-dup [l]\n  (interleave l l))","user":"5884f377e4b0f1effa3b76a8"},{"problem":32,"code":"(fn [coll]\n  (sort (apply concat (list* (repeat 2 coll)))))","user":"5f8e2a08e4b0715f5002d767"},{"problem":32,"code":"#(reduce (fn [res x] (conj res x x)) [] %)","user":"5e85d0bde4b09a7a73c8bbd6"},{"code":"(fn hey [a-list] \n  (reduce  \n   #(conj (conj % %2) %2)\n   ()\n   (reverse a-list)\n   )\n)","problem":32,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":32,"code":"(fn [s] (apply concat (map (fn [n] [n,n]) s)))","user":"565233f2e4b0f9d632dd8461"},{"problem":32,"code":"(fn my [x]\n  (if (empty? x)\n    '()\n    (conj (my (rest x)) (first x) (first x))\n  )\n)","user":"54982522e4b0b312c081ff7c"},{"problem":32,"code":"(fn [v]\n  (loop [v v\n         ret []]\n    (if (empty? v)\n      ret\n      (recur (rest v)\n             (let [val (first v)]\n               (conj (conj ret val) val))))))","user":"607b04e5e4b0a637ed780373"},{"problem":32,"code":"(fn [s] (\n  loop [xs s result []] (\n    if (empty? xs)\n      result\n      (recur (rest xs) (conj result (first xs) (first xs)))\n  )\n))","user":"5df175bce4b03c219ef1a34d"},{"problem":32,"code":"(fn       [s]\t\t(reduce           (fn [a b] (conj (conj a b) b))      [ ]       s))","user":"561d506ee4b064ca9f4b16aa"},{"code":"#(loop [initial-sequ %\n         final-sequ '()]\n    (if (empty? initial-sequ)\n      final-sequ\n      (let [cur-sequ (first initial-sequ)]\n        (recur (rest initial-sequ) (concat final-sequ [cur-sequ cur-sequ])))))","problem":32,"user":"523288fee4b035af41902a88"},{"problem":32,"code":"(fn [s]\n(reduce (fn [acc item]\n          (conj acc item item))\n         []\n        s))","user":"5829d588e4b051871117bf4a"},{"code":"mapcat #( vector % %)","problem":32,"user":"518c26e6e4b0f028e99addfa"},{"code":"(fn [coll] (apply concat (map #(repeat 2%) coll)))","problem":32,"user":"518f9e14e4b08646f171ca07"},{"problem":32,"code":"(fn dup [s]\n    (if (not-empty s)\n      (let [f (first s) r (rest s)]\n        (concat (list f f) (dup r))\n        )\n      s\n      )\n     )","user":"5fc241c1e4b0edf42a5593d1"},{"problem":32,"code":"(fn [sequenceA]\n  (loop [rem_seq sequenceA result '()]\n    (if (empty? rem_seq)\n      (reverse result)\n      (recur\n        (rest rem_seq)\n        (cons (first rem_seq) (cons (first rem_seq) result))\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":32,"code":"(fn [arr]\n  (loop [c arr, ret []]\n    (if (empty? c) ret\n      (recur (rest c)\n             (conj\n              (conj ret (first c))\n              (first c))))))","user":"58d9772de4b0a4d5acaab63c"},{"problem":32,"code":"(fn\n  [col]\n  (mapcat #(repeat 2 %) col))","user":"595ebf46e4b066ee0a44b04f"},{"code":"(fn [coll] (reduce #(conj %1 %2 %2) [] coll))","problem":32,"user":"4e8dc25f535d65386fec213a"},{"problem":32,"code":"(fn [coll]\n   (reduce (fn [result num]\n             (conj (conj result num) num)) []  coll))","user":"5e16fd78e4b0a047bd49f726"},{"problem":32,"code":";; #(flatten (map (fn [x] (list x x)) %))\n\n#((fn [ls] (reduce (fn [acc, i] (concat acc [i i] )) '() ls)) %)","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":32,"code":"(fn [l] (mapcat (fn [n] (repeat 2 n)) l))","user":"550111d3e4b07d26eda61d6f"},{"problem":32,"code":";(fn [x]\n;  (loop [acc ()\n;         xs x]\n;    (if (empty? xs)\n;      (reverse acc)\n;      (recur (conj acc (first xs) (first xs))\n;             (rest xs)))))\n\n;#(loop [acc () \n;        [x & xs] %]\n;   (if (nil? x)\n;     (reverse acc)\n;     (recur (conj acc x x) xs)))\n\n;mapcat #(list % %)\n\n#(interleave % %)","user":"5f6a583ae4b02876ed9fd046"},{"problem":32,"code":"#(mapcat identity (map vector % %))","user":"55eb6644e4b0121d4835fdbb"},{"problem":32,"code":"(fn [x] \n  (mapcat #(vector % %) x))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn [list] (mapcat #(repeat 2 %) list))","problem":32,"user":"5080a697e4b01a93d3f38e49"},{"problem":32,"code":"(fn duplicate ([l] (if (= (count l) 0) () (concat [(first l) (first l)] (duplicate (rest l))))))","user":"534aa5d3e4b084c2834f4a6b"},{"code":"#(mapcat seq (for [x % :let [y (list x x)]] y))","problem":32,"user":"5241fe85e4b076e5d3121f42"},{"problem":32,"code":"(fn duplicate-sequence\n  [col]\n  (mapcat identity(map #(take 2 (repeat %)) col)))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":32,"code":"(fn [coll] (\n\t(fn [remaining acc]\n\t\t(if (empty? remaining)\n\t\t\tacc\n\t\t\t(let [x (first remaining) r (rest remaining)]\n\t\t\t\t(recur r (concat acc (list x x)))))) coll '()))","user":"598af379e4b02b9968b84ce6"},{"code":"(fn duplicate [orig]\n  (loop [orig orig rs '()]\n    (if (nil? (first orig))\n      (reverse rs)\n      (recur (rest orig) (conj (conj rs (first orig)) (first orig))))))","problem":32,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":32,"code":"#(loop[data %1\n       res []]\n  (if (empty? data)\n    (seq res)\n    (recur\n      (rest data)\n      (into res [(first data) (first data)])\n    )  \n  )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":32,"code":"(fn [v]\n  (mapcat #(repeat 2 %) v))","user":"57d4f225e4b0bd073c2023a6"},{"problem":32,"code":"reduce (fn [s x]\n             (if (nil? x)\n               (into (list) (reverse s))\n               (conj (conj s x) x))) []","user":"5a912080e4b002d099cae6ea"},{"problem":32,"code":"reduce #(conj %1 %2 %2)\n        []","user":"57a9eddae4b0b8559636fc5f"},{"problem":32,"code":"#(reduce (fn [result input]\n\t\t\t(conj result input input)) [] %)","user":"555521a5e4b0deb715856e12"},{"problem":32,"code":"(fn dup [l]\n  (if (empty? l)\n    l\n    (let [f (first l)]\n      (concat (list f f) (dup (rest l))))))","user":"55670a05e4b0c656e3ff1838"},{"code":"(fn d [s]\n  (cond\n    (empty? s) '()\n    true (->> s (rest) (d) (cons (first s)) (cons (first s)))))","problem":32,"user":"4fff72b6e4b0678c553fc400"},{"problem":32,"code":"reduce (fn [coll item]\n         (concat coll [item item])) []","user":"542725fce4b01498b1a71b22"},{"problem":32,"code":"#(reduce (fn [xs x] (concat xs (repeat 2 x))) '() %)","user":"5d68fc2fe4b0db5d338d1606"},{"problem":32,"code":"(fn dup [s]\n  (sort (take (* 2 (count s)) (cycle s))))","user":"53bc10f5e4b047364c04450d"},{"problem":32,"code":"(fn [x]\n    (loop [[head & rest :as list] x dups []]\n      (if (empty? list)\n        dups\n        (recur rest (conj (conj dups head) head)))))","user":"58f00639e4b056aecfd47ddc"},{"code":"reduce #(conj %1 %2 %2) `[]","problem":32,"user":"4ff50604e4b0678c553fc365"},{"problem":32,"code":"(fn [x] (sort(into x x)) )","user":"5a075e73e4b01bb0ae8afdd9"},{"code":"(fn [xs]\n  (reverse \n  (reduce #(cons %2 (cons %2 %1))\n          '()\n          xs\n)))","problem":32,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":32,"code":"(fn [toRep] (reduce concat (map #(take 2 (iterate (fn [x] x) %)) toRep)))","user":"53ff8c31e4b0de5c41848603"},{"problem":32,"code":";; (mapcat f & colls) returns the result of applying concat to the result of applying\n;; map to f and colls.  Thus function f should return a collection.\n#(mapcat (fn [e] [e e]) %)","user":"5d0eda66e4b0cc9c9158825f"},{"problem":32,"code":"(fn [xs]\n    (reduce (partial apply conj) [] (map #(list % %) xs)))","user":"53c3397be4b00fb29b221279"},{"code":"(partial \n   (fn [result l]\n     (if (nil? (first l))\n       result\n       (let [newresult (concat result (list (first l) (first l)))]\n         (recur newresult (rest l))))\n     ) '())","problem":32,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":32,"code":"reduce (fn [ss s]\n         (concat ss `(~s ~s))) '()","user":"5605b5e9e4b08b23635d316e"},{"code":"mapcat (juxt identity identity)","problem":32,"user":"4e82f85d535db62dc21a62ce"},{"problem":32,"code":"(fn dup\n  [s]\n  (loop [[hd & tl] s ans []]\n    (if (nil? hd)\n      ans\n      (recur tl (conj (conj ans hd) hd))\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":32,"code":"(fn [l]\n  (mapcat #(list % %) l))","user":"54a1f494e4b09f271ff37c52"},{"problem":32,"code":"#(-> ;; foldl beauty\n  (reduce (fn [acc x]\n              (concat (list x x) acc)) '() %1)\n   reverse)","user":"55e246c2e4b050e68259b431"},{"code":"(fn [xs] (reduce (fn [c n] (conj c n n)) [] xs))","problem":32,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"#(reduce into (map vector % %))","problem":32,"user":"51422945e4b0b50abeb46b2e"},{"code":"#(loop [res '() a % b %]\n  (if (empty? a)\n    (reverse res)\n    (recur (cons (first b) (cons (first a) res)) (drop 1 a) (drop 1 b))))","problem":32,"user":"4e71a12c535d5021c1a8964f"},{"problem":32,"code":"(fn [coll] (reverse\n            (reduce (fn [acc x]\n                      (conj (conj acc x) x))\n                    '()\n                    coll)))","user":"5622af0fe4b03f08ee9a922b"},{"problem":32,"code":"(fn [s] (reduce concat (into [] (map (fn [x] [x x]) s))))","user":"57c0393be4b05aa3c4741c90"},{"problem":32,"code":"(fn [x] (mapcat #(list (identity %) (identity %)) x) )","user":"54db33f1e4b024c67c0cf75d"},{"code":"(fn [sq]\n  (loop\n    [t []\n     s sq]\n    (let [f (first s)]\n      (if (= nil f)\n        t\n        (recur\n         (conj (conj t f) f)\n         (rest s))))))","problem":32,"user":"530d85dee4b08068f379eca8"},{"code":"(fn [l] \n  (reduce \n    (fn [val next] (conj val next next))\n    []\n    l))","problem":32,"user":"4f4175ffe4b0d7d3c9f3fce8"},{"problem":32,"code":"#(let [a (atom '())] \n  (doseq [e %] \n    (swap! a conj e e)) \n  (reverse @a))","user":"54139cd4e4b01498b1a719e3"},{"problem":32,"code":"(fn [sq]\n  (loop [sq-it sq\n         ret-it (empty sq)]\n    (if (empty? sq-it)\n      ret-it\n      (recur (rest sq-it)\n             (concat ret-it (take 2 (repeat (first sq-it))))))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn dup [x] (reduce concat (map #(list % %) x)))","problem":32,"user":"4f461e57e4b0d56e7bb92b92"},{"problem":32,"code":"(fn [x]\n      (reduce (fn [r y]\n                (concat r [y y])\n                )\n              \n              \n     [] x ))","user":"554b2151e4b0a04f79299580"},{"code":"(fn [l] (reverse (reduce #(cons %2 (cons %2 %1)) '() l)))","problem":32,"user":"4f0b0834535d0136e6c222fe"},{"problem":32,"code":"( fn \n  [col]\n  (sort (reduce conj (reverse col) col ))\n  \n)","user":"516d227fe4b06f078fab252d"},{"code":"(fn foo [s] (interleave s s))","problem":32,"user":"4facd2fae4b081705acca22f"},{"problem":32,"code":"(fn [x]\n    ( reverse (reduce #(conj %1 %2 %2) '() x)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":32,"code":"(fn dup [x]\n        (if (empty? x)\n          x\n          (conj (dup (rest x)) (first x) (first x))\n          ) \n       \n       )","user":"5654cb2de4b0f9d632dd848b"},{"problem":32,"code":"(fn [s] (reverse (reduce #(apply (partial conj %1) (list %2 %2)) '() s)))","user":"58f273d9e4b08e1cf3471d01"},{"problem":32,"code":"mapcat (fn [i] [i i])","user":"56aed78fe4b03c432f187363"},{"problem":32,"code":"(fn stutter [xs]\n  (let [y (first xs), ys (rest xs)]\n    (cond\n     (empty? ys) (list y y)\n     :else (concat (list y y) (stutter ys)))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":32,"code":"#(loop [i 0 acc []] (if (>= i (count %)) acc (recur (+ 1 i) (concat acc [(nth % i) (nth % i)]))))","user":"5dd44256e4b0948ae9d9ad69"},{"problem":32,"code":"(fn dup [[head & tail]]\n  (if head\n    (cons head (cons head (dup tail)))\n    '()))","user":"542cb77ae4b0dad94371f2aa"},{"problem":32,"code":"(fn [x] (loop [r x result '()] (if (empty? r) result (recur  (rest r) (concat result (list (first r) (first r)))))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn f32 [x]\n  (interleave x x))","problem":32,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":32,"code":"#(reduce (fn [s v]\n           (apply conj s (list v v)))\n         []\n         %)","user":"56b18445e4b0982f16b37dee"},{"problem":32,"code":"#(reverse(reduce (fn[acc e](conj acc e e)) () % ))","user":"5a80ad4be4b00b71e582a058"},{"problem":32,"code":"(fn double-vision [x]\n  (if (empty? x)\n    '()\n    (let [val (first x)]\n    \t(cons val (cons val (double-vision (rest x)))))))","user":"537f8e7be4b06839e8705eb8"},{"problem":32,"code":"(fn [sq]\n  (apply concat (map (fn [x] (take 2 (repeat x))) sq)))","user":"53d2afede4b00fb29b221321"},{"problem":32,"code":"(fn func\n  ([x l]\n   (if (empty? x) (reverse l)\n     (let [f (first x) r (rest x)]\n       (func r (cons f (cons f l))))))\n  ([x]\n   (func x (set '()))))","user":"5b679bf9e4b0c6492753e769"},{"code":"(fn dbl [coll] (reduce #(conj (conj %1 %2) %2) [] coll))","problem":32,"user":"4ef57a7f535dced4c769f246"},{"problem":32,"code":"(fn duplicate-a-seq [xs] (reduce (fn [acc x] (conj acc x x)) [] xs))","user":"56255e2de4b00a550fc90297"},{"code":"(fn [x]\n  (loop [v x acc []]\n  (if (empty? v) \n      (reverse acc)\n      (recur (rest v) (concat (list (first v) (first v)) acc)))))","problem":32,"user":"5080d6e3e4b01a93d3f38e4b"},{"problem":32,"code":"(fn [x] (reduce concat (map (fn [elem] (list elem elem)) x)))","user":"57b167afe4b0fbc9809a2752"},{"problem":32,"code":"#(reduce \n    (fn [nlst v]\n      (conj nlst v v))\n    [] %)","user":"57d9f603e4b0bd073c20240a"},{"problem":32,"code":"(fn [x]\n   ((fn dupseq [a b]\n      (if (empty? a)\n        b\n        (dupseq (rest a) (conj  (conj b (first a)) (first a)))\n        )) x []))","user":"5f06d26ae4b0cf489e8d7f53"},{"problem":32,"code":"(fn[x] \n  (apply interleave \n    (#(repeat 2 %) x)))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":32,"code":"(fn [coll] \n  (reduce (fn [acc val] \n            (conj (conj acc val) val)) [] coll))","user":"5b2d1c1de4b025bcb146f2c0"},{"problem":32,"code":"#(apply concat (map (fn [e] (list e e)) %))","user":"5ec6de19e4b08d0ec38692da"},{"code":"#(reduce (fn [acc x] (conj acc x x)) () (reverse %))","problem":32,"user":"4f038499535dcb61093f6b09"},{"code":"(fn [my-seq]\n  (reduce concat (map (fn [x] [x x]) my-seq)))","problem":32,"user":"51508efce4b0c51f0585bbb4"},{"code":"#(mapcat (fn [k] (take 2 (cycle [k]))) %)","problem":32,"user":"51583ee4e4b0a069fd272c72"},{"problem":32,"code":"(fn [s]\n   (reverse (reduce (fn [r e] (conj r e e))\n           '()\n           s)))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":32,"code":"#(loop [[head & tail] %\n        acc []]\n   (if (nil? head)\n     acc\n     (recur tail (conj acc head head))\n   )\n)","user":"53f7820be4b0de5c41848560"},{"problem":32,"code":"reduce (fn [xs x] (concat xs (cons x (cons x ())))) ()","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [coll]\n  (reverse (reduce #(conj %1 %2 %2) '() coll)))","problem":32,"user":"506755b3e4b03d366d7cb2bc"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s) nil\n  (conj (conj (dup (rest s)) (first s)) (first s))))","user":"54e6762be4b024c67c0cf809"},{"problem":32,"code":"(fn duplicate-sequence\n          [sequence]\n          (->> sequence\n               (map (fn [x] [x x]))\n               (mapcat identity)\n               ))","user":"5c36d110e4b0d62ef62d9f6a"},{"problem":32,"code":"(fn dup-elts [x]\n  (if (= (count x) 0)\n    x\n    (cons (first x) (cons (first x) (dup-elts (rest x))))))","user":"576000fce4b08062f99a4e8b"},{"code":"mapcat #(conj () % %)","problem":32,"user":"5250a9abe4b0541d1855b83b"},{"problem":32,"code":"(fn [x]\n  (reduce concat (map #(repeat 2 %) x)))","user":"57f81549e4b0d3187e900918"},{"problem":32,"code":"(fn dup [in]\n  (apply concat (map #(repeat 2 %) in))\n  )","user":"5820924ee4b04b46fc4b0f58"},{"code":"#(mapcat (fn [x] (list x x)) % )","problem":32,"user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [x]\n  (reverse (reduce\n    (fn [x y]\n      (cons y (cons y x))\n    )\n    '()\n    x\n  ))\n)","problem":32,"user":"4fc8f671e4b0ee37620e1840"},{"problem":32,"code":"(fn du [xs] (reduce concat (map vector xs xs)))","user":"5d321852e4b01671435dbce8"},{"code":"(fn [colls] (mapcat #(list % %) colls)  )","problem":32,"user":"52a9406de4b0c58976d9ac43"},{"code":"(fn dup [coll] (mapcat #(list % %) coll))","problem":32,"user":"5209cb44e4b0e152394d7702"},{"problem":32,"code":"(fn [s]\n  (loop [old-seq s new-seq []]\n    (if (empty? old-seq)\n      new-seq\n      (recur (rest old-seq) (conj (conj new-seq (first old-seq)) (first old-seq)))\n      )))","user":"5903f0cde4b022d14a2aafb9"},{"code":"; ist mapcat lazy ? -> klären\n(fn myduplicate [x] \n  (if (sequential? x)\n    (mapcat #(list % %) x) \n    (list x x)))","problem":32,"user":"4e131443535d04ed9115e7d3"},{"code":"(fn [c] (apply concat (map #(list % %) c)))","problem":32,"user":"4ff8a89de4b0678c553fc39d"},{"problem":32,"code":"(fn [x] (mapcat (fn [y] (take 2 (repeat y))) x))\n;(fn [x] (reduce (fn [acc x] (concat acc [x x])) '() x))","user":"5923554ee4b0a390037439f2"},{"code":"(fn [coll]\n  (mapcat #(list % %) coll))","problem":32,"user":"4eb25069535d7eef30807348"},{"problem":32,"code":"(fn [n] (reduce #(conj %1 %2 %2) [] n))","user":"57b35a19e4b0fbc9809a277d"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [m e]\n            (conj m e e))\n          []\n          s))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"#(reduce concat (map (fn [x] [x,x]) %))","problem":32,"user":"50352431e4b0a84c1d88f620"},{"problem":32,"code":"(fn [v]\n  (reduce #(conj %1 %2 %2) [] v))","user":"55f2d4ede4b06e875b46ce4c"},{"problem":32,"code":"(fn foo [x]\n\t\t\t\t(if (empty? x)\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t\t\t\t(first x)\n\t\t\t\t\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(first x)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(foo (next x))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n)","user":"575dda55e4b02ea11479938c"},{"problem":32,"code":"(fn [x] (apply concat (map (partial repeat 2) x)))","user":"54a01870e4b0f3d1d8e70fb4"},{"problem":32,"code":"reduce (fn [xs x] (into xs [x x])) []","user":"5b6c0d56e4b0c6492753e7b2"},{"problem":32,"code":"reduce \n  (fn [a b] \n    (conj a b b))\n  []","user":"57fbd83ee4b0d3187e90097b"},{"problem":32,"code":"#(reduce (fn [a i] (into a (take 2 (repeat i)))) [] %)\n; #(interleave % %)","user":"53a2a259e4b0f1fc7453882c"},{"problem":32,"code":"(fn [n] (reverse (reduce #(conj %1 %2 %2) '() n)))","user":"550345fee4b086ebe8a79c6c"},{"problem":32,"code":"(fn [xs]\n  (reduce\n   (fn [s t]\n     (-> s (conj t) (conj t)))\n   [] xs))","user":"559141b1e4b0604b3f94d576"},{"problem":32,"code":"#(reduce\n  (fn [coll x] (conj coll x x))\n  []\n  %)","user":"5b500215e4b02d533a91bce2"},{"problem":32,"code":"reduce (fn [xs x] (conj (conj xs x) x) ) []","user":"53ca23e3e4b00fb29b2212c6"},{"problem":32,"code":"(fn [items] (reverse (reduce (fn [x y] (cons y (cons y x))) () items)))","user":"554f817ce4b00713264bd9a2"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(list (identity %) (identity %))  xs))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn [x]\n  ((fn hlp [in out]\n    (if (empty? in)\n      out\n      (let [fx (first in)]\n        (hlp (rest in) (conj out fx fx)))))\n    (reverse x) ()))","problem":32,"user":"4f047902535dcb61093f6bcc"},{"problem":32,"code":"reduce (fn [x y] (concat x (concat (list y) (list y)))) '()","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn duplica [x]\n  (loop [vec (reverse x), saida []]\n    (if (empty? vec)\n     saida \n     (recur (rest vec) (cons (first vec) (cons  (first vec) saida))))))","problem":32,"user":"4eb2f89a535d7eef30807353"},{"code":"(fn [c] (interleave c c))","problem":32,"user":"4e7f32ee535db966e863cc3a"},{"problem":32,"code":"(fn [sq] (reduce into (map #(seq [% %]) (reverse sq))))","user":"5a388675e4b001c08efc0ca2"},{"problem":32,"code":"#(reduce concat (map (fn [i] (list i i)) %))","user":"5875daaee4b01531a375ea74"},{"code":"(fn [coll]\n  (reverse\n   (loop [xs coll\n          newcoll '()]\n     (cond\n      (empty? xs) newcoll\n      :else (recur (rest xs) (cons (first xs)\n                                   (cons (first xs)\n                                         newcoll)))))))","problem":32,"user":"520693e1e4b0bf4f1882c829"},{"code":"#(mapcat (fn [e] [e e]) %)","problem":32,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn [coll]\n  (loop [res [] s coll]\n    (let [a (first s)]\n      (if (nil? a)\n       res\n      (recur (conj (conj res a) a) (rest s))))))","problem":32,"user":"5031eb3be4b000fc67a99a84"},{"code":"#(mapcat (fn [a] [a a]) %)","problem":32,"user":"4fd81472e4b0dab7d829f38e"},{"code":"(fn duplicate-list ([lst] (duplicate-list lst '()))\n  ([lst acc]\n    (let [fst (first lst) tmp (rest lst)]\n      (if (= lst '()) (reverse acc)\n        (recur tmp (conj (conj acc fst) fst))))))","problem":32,"user":"4edfb618535d10e5ff6f5343"},{"problem":32,"code":"#(reduce (fn [r x] (conj (conj r x)x)) [] %)","user":"5650082fe4b0284900eef6b7"},{"problem":32,"code":"(fn [l]\n  (mapcat (fn [x] [x x]) l))","user":"5bd93897e4b0ed4b8aab4bee"},{"problem":32,"code":"(fn [s] (reduce #( conj %1 %2 %2) [] s))","user":"58d28c70e4b03c36ff7e5901"},{"code":"(fn [coll] (mapcat #(vector % %) coll))","problem":32,"user":"4e31a15c535deb9a81d77f1e"},{"problem":32,"code":"(fn dup [x]\n      (apply concat (map #(list % %) x)))","user":"5acd1a43e4b0e27600da7823"},{"code":"#(reduce concat '() (map list %1 %1))","problem":32,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":32,"code":"(fn dup-seq\n  [s]\n  (mapcat (fn [x] [x x]) s))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn dup-seq [coll]\r\n  (loop [coll coll\r\n         result []]\r\n    (if (empty? coll)\r\n      result\r\n      (recur (rest coll) (conj result (first coll) (first coll))))))","problem":32,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":32,"code":"(fn [col] (reverse(reduce #(conj %1 %2 %2) '() col)))","user":"54d22860e4b0e8a36923e5ef"},{"code":"(fn [simple]\n   (loop [result [] elements simple]\n     (if (empty? elements)\n       result\n       (recur (conj (conj result (first elements)) (first elements)) (rest elements))\n       )\n   ) \n   )","problem":32,"user":"5106dc1be4b01150e115ebf0"},{"problem":32,"code":"(fn [thing]\n  (loop [stuff thing ret '()]\n    (if (empty? stuff)\n      ret\n      (recur (rest stuff) (concat ret [(first stuff) (first stuff)])))))","user":"5751fda4e4b02ea114799295"},{"problem":32,"code":"(fn [xs]\n  (mapcat (fn[val]\n         (let[a val b val] (list a b)) ) xs))","user":"54dce6dbe4b024c67c0cf78d"},{"code":"(fn [xs] (apply concat (mapv (partial repeat 2) xs)))","problem":32,"user":"52713288e4b03e8d9a4a73e7"},{"problem":32,"code":"(fn [xs]\n (mapcat #(repeat 2 %1) xs))","user":"55295b5de4b0ffed3738f949"},{"problem":32,"code":"(fn [numbers]\n   (apply concat (map #(list %1 %1) numbers)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"reduce (fn[x y] (conj (conj x y ) y)) []","problem":32,"user":"518c5236e4b087e178201de0"},{"code":"(fn [x]\n  (apply concat (map #(list % %) x)))","problem":32,"user":"50d04a92e4b00b15ecee975a"},{"problem":32,"code":"#(reduce \n    (fn [m x] (conj m x x)) [] %)","user":"4df73d64535d04ed9115e775"},{"code":"(fn [v] (mapcat #(conj [%] %) v))","problem":32,"user":"5093ca51e4b097f48cc38585"},{"problem":32,"code":"(fn\n  [xs]\n  (sort (concat xs xs)))","user":"55e732c5e4b050e68259b492"},{"code":"reduce #(conj %1 %2 %2)  []","problem":32,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":32,"code":"(fn [xs] (seq (reduce #(conj %1 %2 %2) [] xs)))","user":"603f6623e4b0d5df2af2231f"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [t v] (conj t v v)) [] xs))","user":"54dce62fe4b024c67c0cf78c"},{"problem":32,"code":"(fn [l] (reduce concat (map #(repeat 2 %) l)))","user":"55d1a721e4b0e31453f64a47"},{"code":"(fn d \n  ([y] (d y [])) \n  ([y a] \n    (if y \n      (let [[x & xs] y] \n        (d xs (conj a x x))) \n      a)))","problem":32,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn interc[s] (if (= (count s) 1) (cons (first s) s) (cons (first s) (cons (first s) (interc (rest s))))))","problem":32,"user":"4f148418535d64f60314643a"},{"code":"(fn dup-seq [seq]\n  (mapcat (fn [x] [x x]) seq))","problem":32,"user":"4db8d37d535d1e037afb219c"},{"problem":32,"code":"#(reverse (reduce (fn [s n] (conj s n n)) '() %))","user":"5cb41c40e4b026601754b911"},{"problem":32,"code":"#(reverse (reduce (fn [acc e] (cons e(cons e acc))) [] %))","user":"5897dda4e4b00487982d52c8"},{"problem":32,"code":"(fn [coll]\n   (loop [source coll sink '[]]\n     (if (empty? source)\n       sink\n       (recur (rest source) (conj (conj sink (first source)) (first source))))))","user":"542769f8e4b01498b1a71b24"},{"problem":32,"code":"(fn foo [x] (if (empty? x)\n                []\n                (cons (first x) (cons (first x) (foo (rest x))))\n              ))","user":"5520974be4b08d5046aa8a63"},{"problem":32,"code":"(fn [formal]\n  (loop [input formal\n         output ()]\n    (if (empty? input)\n      output\n      (recur (rest input) (concat output (list (first input)) (list (first input))))\n             )))","user":"5a2185a4e4b0ff51aa4b32b0"},{"problem":32,"code":"(fn [vct]\n  (let [in (rseq vct)]\n    (reduce (fn [acc a] (conj acc a a)) '() in)\n    ))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":32,"code":"(fn r [x] (reduce concat (map #(take 2 (repeat %)) x)))","user":"58d1fe17e4b03c36ff7e58f5"},{"code":"(fn [coll]\n  (reduce (fn [acc curr]\n            (conj acc curr curr))\n          []\n          coll))","problem":32,"user":"53695439e4b0243289761e9a"},{"code":"(fn [l]\n  ((fn [res todo]\n      (if (= (count todo) 0)\n        res\n        (recur \n          (concat res [(first todo) (first todo)])\n          (rest todo)\n        )\n      )\n  ) [] l)\n)","problem":32,"user":"506ec408e4b09350ab4199f1"},{"code":"(fn [x]\n  (apply concat \n   (map #(vector % %) x)\n   )\n )","problem":32,"user":"4edf95a8535d10e5ff6f5342"},{"problem":32,"code":"(fn [elements] (mapcat #(list % %) elements))","user":"5d09dffbe4b0cc9c9158821c"},{"problem":32,"code":"#(loop [input %\n        output []]\n   (if (= 0 (count input))\n     (seq output)\n     (recur (next input) (conj output (first input) (first input)))\n     )\n   )","user":"5739fa01e4b0cd1946bd1082"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [res x]\n            (concat res (list x x)))\n          '() coll))","user":"5675cdf1e4b05957ce8c614d"},{"problem":32,"code":"(fn dup [coll]\n  (if (empty? coll) coll\n  (let [f (first coll)]\n    (cons f (cons f (dup (rest coll)))))))","user":"544b9df2e4b0e39780006968"},{"problem":32,"code":"(fn [a] (reduce concat (map #(repeat 2 %) a)))","user":"5657fc1ae4b0f9d632dd84ad"},{"problem":32,"code":"(partial reduce \n         (fn [l e]\n           (conj (conj l e) e))\n         [])","user":"56051095e4b08b23635d3162"},{"problem":32,"code":"(fn [s]                                                                                                                                                                                                   \n  (interleave s s))","user":"53403f42e4b085b17e897da8"},{"code":"(fn [seq]\n  (reverse (reduce #(conj %1 %2 %2) () seq))\n)","problem":32,"user":"4e7e05a6535db169f9c796fe"},{"problem":32,"code":"(fn [seq]\n   (loop [s seq\n          ret []]\n     (if s\n       (recur (next s) (into ret [(first s) (first s)]))\n       ret)))","user":"542b764ae4b0dad94371f28d"},{"problem":32,"code":"reduce #(-> %1 (conj %2) (conj %2)) []","user":"57395f32e4b0cd1946bd1070"},{"problem":32,"code":"(fn [sq]\n  (reduce (fn [s elem] (concat s (repeat 2 elem))) [] sq))","user":"58681bf0e4b0f14aab7c888a"},{"problem":32,"code":"(fn [seq1]\n  (reduce\n    (fn [result input ]\n       (concat result (take 2 (repeat input)))\n      )\n    []\n    seq1\n    )\n  )","user":"59228b00e4b026ae38521281"},{"problem":32,"code":"(fn Duplicate-a-Sequence\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (Duplicate-a-Sequence (rest lst))))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":32,"code":"(fn [items] (mapcat #(take 2 (repeat %)) items))","user":"59e48db0e4b08badc2a0c53e"},{"code":"(fn duplicate [seq]\n  (interleave seq seq)\n)","problem":32,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"(fn [x] (reduce into (map #(vec (repeat 2 %) ) x)))","problem":32,"user":"516c3472e4b06f078fab251c"},{"problem":32,"code":"#(reduce into (map (fn [y](conj (vector y) y)) %1))","user":"57d60d83e4b0bd073c2023c2"},{"problem":32,"code":"#(loop [in % out '()] (if (empty? in) (reverse out) (recur (rest in) (conj out (first in) (first in)))))","user":"55a31e3fe4b0acc240e31531"},{"problem":32,"code":"(fn dup [input] (reduce #(concat %1 [%2 %2]) [] input))","user":"5f309144e4b0574c87022c23"},{"code":"(fn [s]\n  (reduce into (map (fn [el] [el el]) s)))","problem":32,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":32,"code":"(fn [seqn]\n\t(loop [src seqn dupl []]\n\t\t(if (= 0 (count src))\n\t\t\tdupl\n\t\t\t(recur (rest src) (concat dupl (take 2 (repeat (first src)))))\n\t\t)))","user":"58b985e0e4b0888cdc949ccc"},{"problem":32,"code":"(fn [v] (apply concat (map #(list % %) v)))","user":"530e75d5e4b08068f379ecba"},{"problem":32,"code":"(fn [x] (reduce (fn [r v] (conj (conj r v) v)) [] x))","user":"55d9f941e4b0e31453f64ad0"},{"problem":32,"code":"#(loop [r [] s %]\n(if (empty? s) r\n(recur (concat r [(first s) (first s)]) (rest s)))\n)","user":"5f9c4113e4b0715f5002d821"},{"problem":32,"code":"(fn [l] (apply concat (map (fn dbl [x] (list x x)) l)))","user":"537a620be4b06839e8705e5f"},{"problem":32,"code":"(fn [s]\n  (loop [x s y '()]\n    (if (empty? x)\n      (reverse y)\n      (recur (rest x) (cons (first x) (cons (first x) y))))))","user":"551b8e2ae4b07993ea3788d3"},{"code":"(fn rp [coll]\n        (reduce (fn [a b]\n                  (conj a b b)\n                  ) [] coll))","problem":32,"user":"536581e4e4b0243289761e6d"},{"code":"(fn [col]\r\n  (reverse\r\n  (reduce \r\n    #(cons %2 (cons %2  %1))\r\n    '()\r\n    col\r\n  )\r\n)\r\n)","problem":32,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":32,"code":"(fn [x]\n  (loop [cx x, nx []]\n    (if (empty? cx)\n      nx\n      (recur (rest cx) (conj (conj nx (first cx)) (first cx)))\n      )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"problem":32,"code":"(partial reduce\n               (fn [ss e] (conj (conj ss e) e))\n               [])","user":"5679a4d0e4b05957ce8c618d"},{"problem":32,"code":"#(reverse (reduce (fn[x, y] (conj (conj x y) y)) '() %))","user":"57ea79d9e4b0bfb2137f5b4f"},{"code":"#(apply list (reduce (fn [l x] (conj l x x)) [] %))","problem":32,"user":"4e68ed35535d8ccf87e9fe92"},{"problem":32,"code":"(fn [my-list] (sort(concat my-list my-list)))","user":"5fa2735de4b0f0ebd91b77ee"},{"code":"(fn [coll]\n  (mapcat list coll coll))","problem":32,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":32,"code":"(fn [param] (apply concat (map #(repeat 2 %) param)))","user":"5f08d0c5e4b0cf489e8d7f62"},{"code":"(fn [xs] (mapcat #(list % %) xs))","problem":32,"user":"4e21c0c7535d04ed9115e818"},{"code":"(fn dup [coll]\n  (apply concat (map #(repeat 2 %) coll)))","problem":32,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn [s] (loop [s s r '()]\n          (if (seq s)\n            (recur (rest s) (concat r [(first s) \n                                       (first s)]))\n                                    \n            r)\n          )\n  )","problem":32,"user":"4fa340b4e4b081705acca18c"},{"problem":32,"code":"#(reduce concat (map vector % %))","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn [xs] (reduce concat\n                 (map (fn [x]\n                        (list x x)\n                      )\n                      xs\n                 )\n         )\n)","problem":32,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [xs] (->> xs\n  (map #(list % %))\n  (apply concat)))","problem":32,"user":"507a396be4b08327cd804a69"},{"problem":32,"code":"(fn duplicate-sequence [original]\n  (loop [current original results []]\n    (if (empty? current)\n      results\n      (recur (rest current) (conj results (first current) (first current)))\n      )))","user":"585ad75be4b0f14aab7c8756"},{"code":"(fn [l] (mapcat  #(if (sequential? %) % [%]) (map #(conj [] % %) l)))","problem":32,"user":"52c49401e4b0c2d177d620de"},{"code":"#(reduce (fn [s v] (conj s v v)) [] %)","problem":32,"user":"50fbf811e4b0d10d794c19f1"},{"problem":32,"code":"(fn DuplicateSeq\n  [collection]\n  (reduce #(concat %1 (list %2 %2)) '() collection))","user":"5e16b820e4b0a047bd49f71f"},{"code":"(fn[v]\n  (loop [ans [] w v]\n    (if (empty? w)\n      ans \n      (recur \n        (conj (conj ans (first w))\n              (first w))\n        (next w)))))","problem":32,"user":"52196842e4b0890f2f822bfa"},{"problem":32,"code":"(fn [xs](reverse (reduce #(cons %2 (cons %2 %1 )) [] xs)))","user":"56fd058be4b08d47c97781a1"},{"problem":32,"code":"(fn [vals]\n  (loop [remaining vals\n         duped []]\n    (if (empty? remaining)\n      duped\n      (recur (rest remaining) (conj duped (first remaining) (first remaining))))))","user":"55183a11e4b06a49daca83ca"},{"problem":32,"code":"#(reduce (fn [acc _] (concat acc (repeat 2 _))) () %)","user":"59f043d0e4b0966464fe6a3d"},{"problem":32,"code":"reduce (fn [lst x]  \n         (conj lst x x)) '[]","user":"542b0592e4b0dad94371f286"},{"code":"(fn [coll] (mapcat #(repeat 2 %1) coll))","problem":32,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [items]\r\n  (apply concat (map (fn [x] (list x x)) items)))","problem":32,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))\r\n\r\n;(fn dupseq [n]\r\n;  (if (empty? n) '()\r\n;    (cons (first n) (cons (first n) (dupseq (rest n))))))","problem":32,"user":"4ddb339c535d02782fcbe9f9"},{"problem":32,"code":"(fn duplicate [s] (reduce (fn [vals v] (conj vals v v)) [] s))","user":"5b58b271e4b02d533a91bd6e"},{"code":"(fn [lst]\n  (loop [l lst result []]\n    (if (empty? l)\n      result\n      (recur (next l) (conj result (first l) (first l))))))","problem":32,"user":"4fd7f892e4b0dab7d829f38d"},{"code":"(fn f [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (lazy-seq (f (rest xs)))))))","problem":32,"user":"504f865ee4b0a02f9cffde90"},{"problem":32,"code":"reduce #(concat % (list %2 %2)) []","user":"53abf519e4b047364c044456"},{"problem":32,"code":"(fn double-entry [coll]\n(reduce (fn [c v]\n(into c [v v]) )\n(empty coll) coll\n)\n)","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":32,"code":"(fn [coll] (mapcat #(vector %1 %1) coll))","user":"5e5c425ae4b0fd0acd158662"},{"problem":32,"code":"(fn [s] (mapcat (fn [x] (conj [] x x)) s))","user":"5ff88607e4b06df49cee14a6"},{"problem":32,"code":"(fn [seq]\n    (reduce (fn [acc v]\n              (conj acc v v)) [] seq))","user":"603ae21de4b0d5df2af222fb"},{"problem":32,"code":"#(apply concat (for [curr-x %] \n  (repeat 2 curr-x)))","user":"5d68e60be4b0db5d338d1603"},{"problem":32,"code":"#(sort (reduce concat (repeat 2 %)))","user":"5feb6850e4b05ac5b16ea1b8"},{"code":"(fn [x] \r\n  (loop [A '() x x]\r\n      (if (empty? x) (reverse A)\r\n         (let [c (first x)]\r\n  \t(recur (cons c (cons c A))  (rest x) )\r\n\t))))","problem":32,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":32,"code":"(fn [l] (mapcat (fn [i] [i i]) l))","user":"606f005ae4b069485764de1b"},{"code":"(fn dd[s] (cond \n           (nil? (first s)) s\n           :default (concat (list (first s) (first s)) (dd (rest s)))\n           )\n  )","problem":32,"user":"4fb03cf4e4b081705acca262"},{"problem":32,"code":"(fn dupseq\n  [coll]\n  (if (not (empty? coll))\n    (lazy-seq (cons (first coll) (lazy-seq (cons (first coll) (dupseq (rest coll))))))))","user":"5ab490f4e4b073f17744261d"},{"problem":32,"code":"(fn [x]\n  (loop [re []\n         collect x]\n    (if (empty? collect)\n      re\n      (recur (conj re (first collect) (first collect)) (rest collect)))))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":32,"code":";; apply turns the vector into a list of args to concat\n(fn [arg]\n (apply concat\n  (map \n   (fn [x] [x x]) arg)))","user":"542c2de0e4b0dad94371f29f"},{"code":"#(reduce (fn [x r] (conj x r r)) [] %)","problem":32,"user":"4eb02674535d7eef30807338"},{"code":"(fn dup-seq [s]\n   (if (seq s)\n     (let [first (first s)]\n       (cons first (cons first (dup-seq (rest s)))))\n     ()))","problem":32,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":32,"code":"(fn [l]\n  (reduce \n    (fn [x y] \n      (conj x y y)\n    )\n    []\n   \tl\n  )\n)","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn f[s]\r\n  ((fn [s, r]\r\n    (if (nil? s) \r\n      r\r\n      (recur (next s) (conj r (first s) (first s)))\r\n    )\r\n  ) s [])\r\n)","problem":32,"user":"4f245d77e4b0d66497709feb"},{"problem":32,"code":"(fn [x]  \n   (mapcat #(repeat 2 %) x))","user":"552bab7fe4b0ffed3738f966"},{"code":"(fn [v] (reduce (fn [acc x] (conj (conj acc x) x)) [] v))","problem":32,"user":"4e951f2c535dbda64a6f6b2f"},{"problem":32,"code":"(fn f[x] (loop [acc [] [a & r] x] (if (nil? a) acc (recur (concat acc [a a]) r))))","user":"56d439d4e4b0ea9b8538f7b6"},{"code":"(fn [seq]\n  (mapcat (partial repeat 2) seq))","problem":32,"user":"53415755e4b00652c8746ecd"},{"code":"(fn [s] (reverse (reduce (fn [x y] (conj x y y)) '() s)))","problem":32,"user":"50aa60bee4b056ee01935865"},{"code":"#(reverse (reduce (fn [xs x] (conj xs x x)) () %))","problem":32,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn b[x]\n  (loop [xx x\n         se ()]\n     (do (println xx se)\n     (if (empty? xx)\n         (reverse se)\n     (recur (rest xx) (conj (conj se (first xx)) (first xx)))))))","problem":32,"user":"4f891abde4b033992c121c77"},{"problem":32,"code":"#(mapcat\n  (juxt identity identity)\n  %)","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":32,"code":"#(mapcat identity (map (fn[item](repeat 2 item)) %))","user":"5832be57e4b089d5ab817c86"},{"problem":32,"code":"(fn [input-vec]\n  (loop [in input-vec out ()]\n    (if (empty? in) (reverse out)\n        (recur (rest in)\n               (conj out (first in) (first in))))))","user":"5a85f55be4b05369db4d2493"},{"code":"(fn [s]\n  (loop [results '()\n        more s]\n    (if (empty? more)\n      (reverse results)\n      (recur (conj (conj results (first more)) (first more)) (next more)))))","problem":32,"user":"4efb92ce535dced4c769f27a"},{"problem":32,"code":"(fn duplicate [coll]\n  (loop [res [] c coll]\n    (if (empty? c)\n      (lazy-seq res)\n      (recur (conj res (first c) (first c)) (rest c))\n    )\n  )\n)","user":"569e3175e4b0542e1f8d1484"},{"code":"(fn [s] (loop [s s, r nil]\n  (if\n    (empty? s)\n    r\n    (recur (rest s) (concat r (list (first s) (first s)))))))","problem":32,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn [lst] (apply concat (map #(repeat 2 %) lst)))","problem":32,"user":"51558136e4b06c5f6a1490a8"},{"problem":32,"code":"(fn [s] (apply concat (map #(conj (conj [] %) %) s)))","user":"576844cde4b0a07e8fc180ce"},{"code":"(fn blah [lst]\n  (if (empty? lst)\n    '()\n    (conj (blah (rest lst)) (first lst) (first lst))))","problem":32,"user":"4fab0c0ae4b081705acca20d"},{"problem":32,"code":"(fn [s]\n  (loop [x s\n         acc []]\n    (if-not (empty? x)\n            (recur (rest x) (conj acc (first x) (first x)))\n            acc)))","user":"51316a63e4b0431ba07e7feb"},{"problem":32,"code":"(fn [x]\n  (loop [[head & tail] x ret []]\n    (if (empty? tail)\n      (conj (conj ret head) head)\n      (recur tail (conj (conj ret head) head)))\n    )\n  )","user":"54975e99e4b0b312c081ff72"},{"problem":32,"code":"(fn dup [x] \n  \t(mapcat #(list % %) x)\n    ;(apply concat (map #(list %1 %1) x))\n)","user":"5ed30cb6e4b016b56eae05c2"},{"code":"(fn [sq] (loop [e sq result []] (if (seq e) (recur (rest e) (conj result (first e) (first e))) result )))","problem":32,"user":"4efd98fa535de96065cf5086"},{"code":"(fn [x] (apply concat (map (fn [y] [y y]) x)))","problem":32,"user":"4f2de7e9e4b0d6649770a061"},{"problem":32,"code":"(fn double-seq\n  [s]\n  (seq (reduce (fn [l a] (conj l a a)) [] s))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn [s]\n  (loop\n    [s s, r []]\n    (if (empty? s)\n      (seq r)\n      (recur (rest s) (conj r (first s) (first s))))))","problem":32,"user":"4f856adfe4b033992c121c44"},{"problem":32,"code":";#(interleave % %)\n#(mapcat (fn [i] (repeat 2 i)) %)","user":"59e5b6a1e4b08badc2a0c55b"},{"code":"(fn [coll] (reduce into [] (for [i coll] [i i])))","problem":32,"user":"4fdbc075e4b05e33b9224f61"},{"code":"(fn dup [coll]\n  (reduce (fn [a b]\n            (conj a b b)) nil (reverse coll)))","problem":32,"user":"51736d4de4b00f4b6b0490d7"},{"problem":32,"code":"#(mapcat  (partial repeat 2 ) %)","user":"598588f2e4b021a7a535fe65"},{"code":"(fn [s]\n  (loop [out [] s s]\n    (if (empty? s) out\n      (recur (conj out (first s) (first s)) (rest s)))))","problem":32,"user":"51c342e9e4b0851ac09658f3"},{"problem":32,"code":"#(loop [coll %\n        res []]\n   (let [elem (first coll)]\n     (if (nil? elem)\n       res\n       (recur (rest coll) (conj res elem elem)))))","user":"540e97f9e4b0addc1aec671f"},{"problem":32,"code":"(fn [xs] (reduce (fn [acc item] (concat acc [item item])) [] xs))","user":"5a8e9fb5e4b05369db4d2529"},{"code":"(fn duplicate\n  ([target] (duplicate target []))\n  ([target acc]\n   (if (empty? target)\n     acc\n     (duplicate (rest target) (conj acc (first target)\n                                    (first target))))))","problem":32,"user":"512a7c70e4b0ff5c4bc1f99d"},{"code":"(fn [s]\n  (apply concat (map #(vector % %) s)))","problem":32,"user":"51197750e4b057cba170bc99"},{"problem":32,"code":"#(reverse (reduce (fn [result current] (conj result current current)) '() %))","user":"5989ee61e4b021a7a535fed7"},{"code":"(fn [x]\n  (apply concat (map (fn [y] (list y y)) x))\n)","problem":32,"user":"52624348e4b03e8d9a4a707e"},{"code":"(fn [s]\n  (apply concat (map #(conj '() % %) s)))","problem":32,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":32,"code":"(fn dup\n  [sqc]\n  (if (seq sqc)\n    (concat [(first sqc) (first sqc)] (dup (rest sqc)))\n    '()))","user":"5a6a32b6e4b0512ff01cda22"},{"code":"(fn dupli [sq]\n (reverse\n  (reduce #(cons %2 (cons %2 %1)) '() sq)))","problem":32,"user":"4e2d562c535deb9a81d77f07"},{"code":"mapcat (fn [x] (seq [x x]))","problem":32,"user":"512339fce4b03b44edbed434"},{"problem":32,"code":"(fn [xs]\n\t(loop [ys xs res []]\n      (if (empty? ys) res\n\t\t(recur (rest ys) (conj res (first ys) (first ys)))\n     ))\n  )","user":"54f73502e4b01ecee9d88817"},{"code":"mapcat (fn [arg] [arg arg])","problem":32,"user":"4e70a7c1535d5021c1a8963c"},{"problem":32,"code":"(fn [a]  (mapcat #(list % %) a))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn a [s]\n  (apply concat (for [x s] [x x])))","problem":32,"user":"4f03fb59535dcb61093f6b89"},{"code":"(fn dup [s]\n  (if (= s '())\n    '()\n    (cons (first s) (cons (first s) (dup (rest s))))))","problem":32,"user":"51803613e4b04f45bde7d8fd"},{"code":"#(seq (reduce (fn [acc x] (conj acc x x)) [] %))","problem":32,"user":"4fe8da4de4b0547ebccb2429"},{"problem":32,"code":"(fn [seq]\n    (loop [duplicated []\n           to_do seq]\n      (if (empty? to_do)\n        duplicated\n        (recur (conj duplicated (first to_do) (first to_do)) (rest to_do)))) \n    )","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [coll]\n  (loop [result []\n         [f & fs] coll]\n    (if (nil? f)\n      result\n      (recur (conj result f f) fs))))","problem":32,"user":"50ed3c6be4b01236b1d4983b"},{"problem":32,"code":"(fn [l] (reduce concat [] (map (fn [i] [i i]) l)))","user":"563249dee4b0bfe05bf1179f"},{"code":"#(reduce (fn [a b] (conj a b b)) [] %)","problem":32,"user":"4f038017535dcb61093f6afa"},{"code":"(fn [x]\n\t(reduce (fn [a b](conj (conj a b) b)) (cons [(first x) (first x)] (rest x))))","problem":32,"user":"51794ec2e4b0684c1c981a45"},{"problem":32,"code":"(fn [elements]\n  (let [duplicate-element (fn [e] (take 2 (repeat e)))]\n    (apply concat (map duplicate-element elements))))","user":"541cf6dfe4b01498b1a71a7a"},{"code":"#(reduce into (map (fn[x] [x x]) %))","problem":32,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"(fn [s] (apply concat (map (fn [x] [x x]) s)))","problem":32,"user":"513bb7a6e4b04402f587b77d"},{"code":"(fn [c]\n  (loop [xe c, result []]\n    (if (seq xe)\n      (recur (rest xe) (conj (conj result (first xe)) (first xe)))\n      result)))","problem":32,"user":"4dcc2435535d5973398f9290"},{"problem":32,"code":"(fn [s]\n    (loop [s s\n           acc '()]\n      (cond\n        (empty? s) (reverse acc)\n        :else (recur (rest s) (cons (first s) (cons (first s) acc))))))","user":"5600dccee4b04bb52996e175"},{"problem":32,"code":"#(reduce (fn [v i] (into v [i i])) [] %)","user":"57a9e274e4b0b8559636fc5d"},{"code":"(fn double [s]\r\n     (if (seq s)\r\n\t       (conj (double (rest s)) (first s) (first s))))","problem":32,"user":"4de623ef535d08e6dec9fdf4"},{"code":"(fn [s]\n  (mapcat #(vector % %) s))","problem":32,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":32,"code":"#(loop [i % o '()]\n   (if (first i)\n     (recur (rest i) (conj o (first i) (first i)))\n     (reverse o)))","user":"5e85163be4b09a7a73c8bbd0"},{"problem":32,"code":"(fn dup [col] (apply concat (map #(repeat 2 %) (seq col))))","user":"56252effe4b00a550fc90294"},{"code":"(fn [s]\n  (apply concat (map #(list % %) s)))","problem":32,"user":"4ff304f4e4b0678c553fc343"},{"problem":32,"code":"(fn [aseq] (mapcat (fn [x] (conj '() x x)) aseq) )","user":"59163ee1e4b09b4ee5954b85"},{"problem":32,"code":"(fn [li] (reduce #(conj %1 %2 %2) [] li ))","user":"546c1b2ce4b00cfc9eacc174"},{"code":"(fn [coll]\n           (reduce #(conj %1 %2 %2)\n                   []\n                   coll))","problem":32,"user":"4e3bccb1535deb9a81d77f55"},{"problem":32,"code":"(fn [x]\n  (reduce concat (map #(list % %) x)))","user":"5845720de4b089d5ab817e68"},{"problem":32,"code":"(fn\n  [rcd]\n  (reduce \n    #(reduce conj %1 %2)\n    []\n    (map #(list %1 %2) rcd rcd)))","user":"55a0d79fe4b0acc240e31502"},{"problem":32,"code":"(fn dupe [m]\n  (reduce (fn [r v] (apply conj r v))\n    (map #(vec [% %]) m)))","user":"5b9bcba8e4b0c0b3ffbd4b07"},{"problem":32,"code":"(fn duplicate [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))","user":"58dcb8cde4b0a4d5acaab6a7"},{"code":"(fn [a] (reduce #(conj (conj %1 %2) %2) [] a))","problem":32,"user":"50e3ddd4e4b01912b3285c47"},{"problem":32,"code":"#(reduce \n (fn [res el] (into res (repeat 2 el)))\n [] %)","user":"5f3ee0d9e4b004f08c61c55c"},{"problem":32,"code":"(fn [coll] \n  (loop [[x & xs :as coll] coll\n         acc []]\n    (if (empty? coll) acc (recur xs (conj acc x x)))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn dup [[x & rest]] (when x (cons x (cons x (dup rest)))))","problem":32,"user":"500159b3e4b0678c553fc419"},{"problem":32,"code":"(fn duplicate-a-sequence-solution\n  [coll] ;; update args as needed\n  (mapcat #(vector % %) coll))","user":"50c113bee4b096f585049c37"},{"problem":32,"code":"(fn\n  [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (recur (rest i) (conj res (first i) (first i))))))","user":"60046db8e4b074f607df6642"},{"code":"(fn [coll] (reduce #(concat %1 [%2 %2]) [] coll))","problem":32,"user":"4ef0a39b535dced4c769f20d"},{"problem":32,"code":"#(apply concat (map (fn [a b] (list a b)) % %))","user":"5602f72fe4b04bb52996e1ae"},{"problem":32,"code":"(fn [s]\n  (loop [lista s\n         result (list)]\n    (let [e (first lista)]\n      (if e\n        (recur (rest lista) (concat result (list  e e)))\n        result)) \n    ))","user":"54530382e4b0e397800069cc"},{"code":"#(mapcat (juxt identity identity) %)","problem":32,"user":"521c6a1ae4b0c4ef0be83083"},{"problem":32,"code":"#(seq (reduce (fn [r x] \n                (-> r (conj x) (conj x)))\n              [] %))","user":"56c3afdde4b05cc29241ee91"},{"code":"(fn [x]\n  (mapcat #(list % %) x))","problem":32,"user":"4f90e238e4b0dcca54ed6c94"},{"code":"reduce (fn [x y] (concat x (repeat 2 y))) '()","problem":32,"user":"4f2acb29e4b0d6649770a040"},{"code":"(fn [s]\n  (interleave s s)\n)","problem":32,"user":"4f63777be4b0defedf855fe4"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [c v]\n            (conj c v v))\n          [] x))","user":"5d6042f2e4b0c9e5857d5006"},{"problem":32,"code":"#(loop [lst % lstfinale []]\n                          (if (empty? lst)\n                          lstfinale\n                          (let [[nombre & reste] lst\n                            lstfinale (conj lstfinale nombre nombre)]\n                           (recur reste lstfinale))))","user":"5495b2dee4b0b312c081ff5f"},{"problem":32,"code":"(fn make-duplicates\n  [input-list]\n  (loop [remaining-items input-list\n         final-list []]\n    (if (empty? remaining-items)\n      final-list\n      (recur (rest remaining-items) (conj final-list (first remaining-items) (first remaining-items)))\n   \n  )))","user":"5545f713e4b0a04f7929953a"},{"problem":32,"code":"#(reduce\n       (fn [out in]\n         (conj out in in))\n       []\n       %)","user":"5564c113e4b0c656e3ff180d"},{"code":"(fn myfn [s1]\n\t(reduce\n    \t(fn [x y]\n        \t(conj (conj x y) y)\n        )\n    \t[] s1\n    )\n)","problem":32,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":32,"code":"(fn [x]\n  (apply concat (map #(vector % %) x)))","user":"5ca04cc3e4b048ec896c5b69"},{"problem":32,"code":"(fn [s]\n    (loop [s s result []]\n\t\t(if (empty? s)\n\t    \tresult\t\n\t\t\t(recur (rest s) (conj (conj result (first s)) (first s))))))","user":"569429c7e4b0dcc4269f411a"},{"problem":32,"code":"(fn [s]\n  (loop [s1 s acc '()]\n    (if (empty? s1)\n      acc\n      (recur (rest s1) (concat acc (list (first s1) (first s1)))))))","user":"53bab6fae4b047364c0444fb"},{"code":"(fn double-seq [x]\n  (if (empty? x)\n    []\n    (concat \n      [(first x) (first x)]\n      (double-seq (rest x)))))","problem":32,"user":"4f20c040e4b0d66497709fcb"},{"problem":32,"code":"(fn dupl\r\n  [c]\r\n  (reduce #(concat % (list %2 %2)) '() c))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":32,"code":"(fn dup\n  [l]\n  (loop [l l out [] dupe true]\n    (cond (empty? l) out\n          dupe (recur l (conj out (first l)) false)\n         :else (recur (rest l) (conj out (first l)) true))))","user":"551afdf8e4b07993ea3788cb"},{"problem":32,"code":"(fn duplicate32\n    [l]\n    (if (= (count l) 1)\n      (list (first l) (first l))\n      (lazy-cat (list (first l)) (list (first l)) (duplicate32 (rest l)))))","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":32,"code":"(fn [r] (reduce concat '() (map (fn [a] [a a]) r)))","user":"54638c8fe4b01be26fd746c2"},{"code":"(fn [xs]\n  (loop [l xs r []]\n    (if (empty? l)\n      r\n      (recur (rest l) (concat r [(first l) (first l)])))))","problem":32,"user":"52b9c62ce4b07a9af57922c3"},{"code":"#(sort (take (* 2 (count %)) (cycle %)))","problem":32,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":32,"code":"(\n    fn [coll]\n    (\n      loop [coll coll, result []]\n      (\n        if (empty? coll) result\n        (recur (rest coll) (concat result  (list (first coll) (first coll))))\n        )\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":32,"code":"(fn [ls] (interleave ls ls))","user":"55df5feae4b050e68259b3f1"},{"problem":32,"code":"#(mapcat (fn [e] [e e]) %1)","user":"50a635bbe4b0aa96157e2621"},{"problem":32,"code":"#(seq (reduce (fn [x y] (conj x y y)) [] %1))","user":"5f7ac592e4b02876ed9fd0d2"},{"problem":32,"code":";; first pass\n;(fn [xs] (apply concat (map #(list % %) xs)))\n\n;; zen\n#(interleave % %)","user":"554bced1e4b0a04f79299599"},{"problem":32,"code":"(fn [coll]\n  (loop [acc '() rem coll]\n    (if (nil? (seq rem)) acc\n        (recur (concat acc [(first rem) (first rem)])\n              (rest rem)))))","user":"5d126728e4b02c15ef02199a"},{"problem":32,"code":"#(loop[lst %\n        res '()]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (concat res (list (first lst) (first lst))))))","user":"56acfee5e4b03c432f18734f"},{"code":"(fn [x] \r\n  (reverse (reduce \r\n\t\t(fn [r l] \r\n\t\t\t(conj r l l)\r\n\t\t)\r\n\t\t'() \r\n\t\tx\r\n\t))\r\n)","problem":32,"user":"4dd579b5535dae65d5c462ea"},{"problem":32,"code":"(fn [x]\n (reduce #(conj %1 %2 %2) [] x))","user":"53a511aae4b0b62ce3005735"},{"code":"#(loop [i %, z []] (if (empty? i) z (recur (rest i) (conj (conj z (first i)) (first i)))))","problem":32,"user":"50d4c940e4b09cc622d65a71"},{"problem":32,"code":"#(reverse (reduce (fn [t v] (conj t v v)) '() %))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":32,"code":"(fn [coll]\n  (reduce\n   (fn [coll x]\n     (concat coll [x x]))\n   []\n   coll))","user":"5f663bc0e4b02876ed9fd02d"},{"problem":32,"code":";; #(interleave % %)\nreduce #(conj %1 %2 %2) []","user":"56df9203e4b0ca2494a095fc"},{"problem":32,"code":"(fn [lst] (reduce concat (map (fn [x] (repeat 2 x)) lst)))","user":"59e18b9be4b08badc2a0c50f"},{"problem":32,"code":"mapcat (fn [s] [s s])","user":"58b06b7ce4b0ebc645576cdc"},{"problem":32,"code":"(fn [s]\n  (seq (reduce (fn [acc cur]\n            \t(conj acc cur cur))\n               []\n               s)))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":32,"code":"(comp (partial reduce concat '()) map) #(list % %)","user":"59a2ba97e4b066c664927d2c"},{"problem":32,"code":"(fn [c] (sort (into c c)))","user":"5800ab1ee4b0a837a8b30c41"},{"problem":32,"code":"reduce\n(fn [r x]\n  (conj r x x)\n  ) []","user":"5c01ba2ce4b0bdcf453d1656"},{"problem":32,"code":"reduce (fn [acc v] (concat acc [v v])) (seq [])","user":"5eedfc62e4b07c55ae4a050e"},{"problem":32,"code":"(fn\n  [seq]\n  (reverse (reduce\n    (fn\n      [acc item]\n      (cons item (cons item acc))) () seq)))","user":"5e16006be4b0a047bd49f711"},{"problem":32,"code":"(fn [input] (reduce (fn [a b] (conj (conj a b) b)) '() (reverse input)))","user":"5cc1f975e4b0ccb0619627c8"},{"code":"(fn[coll] (interleave coll coll))","problem":32,"user":"4e95a440535dbda64a6f6b37"},{"problem":32,"code":"(fn duplicate-sequence\n  [coll]\n  (->> (map (fn [x] [x x]) coll)\n       (apply concat '())))","user":"547bf82de4b0c51c1f4d72e1"},{"code":"#(mapcat list % %)","problem":32,"user":"4e6dd51b535d5021c1a895f6"},{"code":"#(reduce (fn [ls el]\n           (into ls [el el]))\n         [] %)","problem":32,"user":"5390952be4b0b51d73faae9c"},{"problem":32,"code":"(fn dupe\n  [coll]\n  (apply concat (map list coll coll))\n)","user":"5c75a30ee4b0fca0c16227df"},{"problem":32,"code":"#(reduce (fn [out item] (conj (conj out item) item)) [] %)","user":"5582dfb6e4b05c286339e10d"},{"code":"#(apply concat (map (fn [x] (vector x x)) %))","problem":32,"user":"50ed5d1be4b06330c1f87c37"},{"problem":32,"code":"(fn dup [s]\n  (reduce (fn [s1 s2](conj s1 s2 s2)) [] s))","user":"5c486dece4b0e06e1360a3c0"},{"problem":32,"code":"(fn [x]\n  (apply concat\n         (map #(list % %) x)))","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn f [nl ol]\r\n  (if (empty? ol)\r\n    nl\r\n    (let [x (first ol)]\r\n      (recur (conj nl x x) (rest ol)))\r\n    )) []","problem":32,"user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn dup\n  ([x] (dup x '()))\n  ([x sofar]\n    (if (empty? x)\n      sofar\n      (dup (drop-last x) (cons (last x) (cons (last x) sofar))))))","problem":32,"user":"4e84f77c535db62dc21a62e5"},{"code":"(fn [s] (mapcat #(vector % %) s))","problem":32,"user":"4eb9d8f8535dfed6da9c6d61"},{"problem":32,"code":"#(reduce (fn [a b] (apply (partial conj a) (repeat 2 b))) [] %)","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn dupl [x]\n(apply concat (map #(list % %) x)))","problem":32,"user":"4f04256d535dcb61093f6ba7"},{"problem":32,"code":"(fn [coll]\n   (loop [collection coll \n          newcoll []]\n     (if (empty? collection)\n       newcoll\n       (recur (rest collection) (conj (conj newcoll (first collection)) (first collection)))\n       )))","user":"570577bbe4b0b0fb43fd0672"},{"problem":32,"code":"(fn dup[l] \n  (apply concat (map #(list % %) l)))","user":"5471f0f3e4b094393f72dd6f"},{"code":"reduce (fn [cur next] (conj cur next next)) []","problem":32,"user":"50c4ff23e4b0210b849018b8"},{"problem":32,"code":"(fn [sq]\n           (let [aux\n                 (fn [[head & tail] acc]\n                   (cond \n                    (nil? head)\n                    acc\n\n                    :else\n                    (recur tail (conj acc head head))))]\n             (aux sq [])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":32,"code":"(fn duplicate [coll] (interleave coll coll))","user":"56b3b12ee4b0982f16b37e1c"},{"code":"(fn [s] (mapcat (fn [a] [a a]) s))","problem":32,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":32,"code":"(fn [n]\n  (loop [oldData n newData '()]\n    (if (empty? oldData)\n      newData\n      (recur\n        (rest oldData) (concat newData [(nth oldData 0) (nth oldData 0)]) ))))","user":"6040f595e4b0d5df2af2232f"},{"problem":32,"code":"(fn [xs]\n  (letfn [(helper [input result]\n                  (if (empty? input)\n                    result\n                    (helper (rest input) (concat (list (first input)) (list (first input)) result))))]\n    (reverse (seq (helper xs [])))))","user":"5be58beae4b0ed4b8aab4d14"},{"problem":32,"code":"#(loop [sq % dp []]\n   (if (empty? sq)\n     (apply list dp)\n     (let [el (first sq)]\n       (recur (rest sq) (conj (conj dp el) el))\n     )\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":32,"code":"#(reduce concat (for [x %1] [x x]))","user":"54b2d392e4b09f271ff37d2f"},{"problem":32,"code":"#(reverse (reduce (fn [c v] (conj (conj c v) v)) '() %))","user":"57c314f3e4b05aa3c4741cba"},{"problem":32,"code":"(fn [in]\n  (reduce \n   #(conj %1 %2 %2)\n   []\n   in))","user":"54903056e4b0b312c081ff2e"},{"problem":32,"code":"(fn [l] (apply concat (map #(vector % %) l)))","user":"53dcf474e4b0d874e779ae25"},{"problem":32,"code":"reduce (fn [c e] (conj c e e)) []","user":"553698fae4b09218d5f44fc0"},{"code":"(fn [l] (reduce concat [] (map #(list % %) l)))","problem":32,"user":"4e720985535d5021c1a89655"},{"code":"(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))","problem":32,"user":"51ba59e4e4b0fe3ecfb4642d"},{"code":"#(mapcat (fn [e] (list e e)) %)","problem":32,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn[x](let[y x](sort(into x y))))","problem":32,"user":"52840004e4b0239c8a67adc1"},{"code":"(fn f [[x & more]]\r\n  (if (not x)\r\n    []\r\n    (cons x (cons x (f more)))))","problem":32,"user":"4e113a81535d04ed9115e7c5"},{"code":";; #(reverse (reduce (fn [m x] (conj m x x)) () %))\n;; #(mapcat (fn [x] (list x x)) %)\nmapcat (fn [x] (list x x))","problem":32,"user":"533696b9e4b0e30313ee6c7c"},{"problem":32,"code":"(fn x [y] (let [a (fn [acc b] (conj acc b b))] (reduce a [] y)))","user":"5b0f2862e4b0cc2b61a3be0f"},{"problem":32,"code":"(fn dup-seq\n  [params]\n  \"http://www.4clojure.com/problem/32\"\n  (reduce (fn [prev curr]\n            (conj prev curr curr))\n          []\n          params))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":32,"code":"#(mapcat (fn [nn] (list nn nn)) %)","user":"5853582fe4b0b7285a6f4ec5"},{"problem":32,"code":"(fn [l] (reverse (reduce (fn [nl x] (conj nl x x)) () l)))","user":"55ecac8ee4b0121d4835fdcc"},{"problem":32,"code":"(fn [x]\n  (reverse (reduce #(conj %1 %2 %2) () x)))","user":"5de4f858e4b0948ae9d9ae09"},{"problem":32,"code":"(fn [n] (apply concat (map #(conj [] % %) n)))","user":"5629de63e4b00e49c7cb4812"},{"code":"(fn [x] (mapcat (fn [x] [x x]) x))","problem":32,"user":"5112bbdde4b0350614f07a7c"},{"problem":32,"code":"(fn [sequence]\n  (reduce (fn [acc x] (into acc [x x])) [] sequence))","user":"5d28b684e4b092dab7f59c83"},{"problem":32,"code":"#(reduce (fn [x y] (concat x (list y y))) [] %)","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn [seeq]\n  (reverse\n    (loop [curr-seeq seeq,\n           ret-seeq '()]\n      (if (empty? curr-seeq) ret-seeq\n          (let [el (first curr-seeq)]\n            (recur (rest curr-seeq)\n                   (cons el (cons el ret-seeq))))))))","problem":32,"user":"4e0febe6535d04ed9115e7be"},{"code":"(fn [collection] (reduce #(conj (conj %1 %2) %2) [] collection))","problem":32,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn d [col]\n    (cond (empty? col) col\n          :elth (concat (list (first col) (first col)) (d (rest col)))))","problem":32,"user":"53858594e4b06839e8705f05"},{"code":"(fn dup [arg]\n  (loop [col arg\n    \t res '()]\n    (if (empty? col) (reverse res)\n      (recur (rest col)\n             (conj res (first col) (first col))))))","problem":32,"user":"51cbaf14e4b08d8387cbedda"},{"problem":32,"code":"(fn [x] (loop [res [] rest x] (if (empty? rest) res (recur (conj res (first rest) (first rest)) (next rest)))))","user":"55a02d8ae4b0acc240e314f2"},{"problem":32,"code":"(fn a [s] (when (seq s) (cons (first s) (cons (first s) (a (rest s))))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":32,"code":"reduce (fn [acc, x] (conj acc x x)) []","user":"59c22fbae4b0a024fb6ae4a3"},{"problem":32,"code":"(fn \n    ([x & y]\n        (if (empty? x) (reverse y)\n              (recur (rest x) \n                   (conj y (first x) (first x))\n              \n              )\n        )\n    )\n)","user":"5a6afb1de4b0512ff01cda2f"},{"problem":32,"code":"#(let\n     [x %]\n     (sort (reduce conj x x))\n     )","user":"59551e04e4b066ee0a44af20"},{"problem":32,"code":"(fn [x] (seq (mapcat (fn [n] [n n]) x)))","user":"54c4e7cde4b045293a27f620"},{"problem":32,"code":"(fn [s]\n  (reduce #(into %1 (repeat 2 %2)) [] s))","user":"56c2c342e4b05cc29241ee85"},{"code":"mapcat #(conj [] % %)","problem":32,"user":"4ecbb249535df97575fdabdf"},{"code":"(fn dupli [x]\n  (let [f (first x) nxt (next x)]\n    (concat\n      [f][f]\n      (when (coll? nxt)\n        (dupli nxt)))))","problem":32,"user":"4ff5a525e4b0678c553fc36d"},{"problem":32,"code":"#((fn dup [s r]\n    (if (seq s)\n      (dup (rest s) (conj r (first s) (first s)))\n      r\n    )\n  )\n  % []\n)","user":"567b9ff7e4b05957ce8c61a9"},{"problem":32,"code":"(fn [x]\n  (loop [li x\n         acc []]\n      (if-not li acc (let [f (first li)\n                           l (next li)]\n                          (recur l (conj (conj acc f) f))))\n    ))","user":"55deeface4b050e68259b3ea"},{"problem":32,"code":"#(loop [x % res []]  (if(not=[] x)  (recur  (rest x)  (conj (conj res (first x)) (first x))) res  ))","user":"594e3723e4b07ddc2dafaea8"},{"problem":32,"code":"(fn [ar] (apply concat (for [i ar] [i i])))","user":"55e6809ee4b050e68259b48a"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs acc [] ]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))","user":"55f90d76e4b03cbcff9738bd"},{"problem":32,"code":"(fn dupe [[f & r]] (lazy-seq (cons f (cons f (if r (dupe r))))))","user":"56baa68ce4b0f26550335947"},{"problem":32,"code":"#(reverse (reduce into '() (map (partial replicate 2) %)))","user":"55e06f82e4b050e68259b40d"},{"code":"(fn [parts] (mapcat #(repeat 2 %) parts))","problem":32,"user":"4df0524e535d08e6dec9fe17"},{"problem":32,"code":"(fn duplicate [lst]\n  (mapcat (fn [x]\n              (repeat 2 x)) lst)\n  )","user":"5f84f110e4b0375e81f54e79"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (let [f (first coll)]\n      \t(recur (rest coll) (conj (conj res f) f))))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn [xs] (reduce #(conj % %2 %2) [] xs))","problem":32,"user":"500ff421e4b0ae202717946f"},{"problem":32,"code":"#(reduce (fn [previous new] (into previous (repeat 2 new))) [] %)","user":"5f6e5c58e4b02876ed9fd067"},{"problem":32,"code":"#(reduce concat (for [e %] [e e]))","user":"53b1db8ee4b047364c044495"},{"problem":32,"code":"(fn [myseq]\n  (apply concat (map #(vector % %) myseq)))","user":"5455510fe4b0e397800069df"},{"code":";(fn cnt[ sss ]\n;   (mapcat #(cons %1 [%1]) sss))\n#(apply interleave (repeat 2 %))","problem":32,"user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn dup [x] (if (seq x) (concat [(first x) (first x)] (dup (rest x))) '()))","problem":32,"user":"532c0507e4b09d4e7a9b553c"},{"problem":32,"code":"(fn [x] (reduce (fn [a b] (->> a (cons b) (cons b))) [] (reverse x)))","user":"5cf6522be4b0b71b1d808a58"},{"problem":32,"code":"(fn duplicate-a-sequence [xs]\n  (when-let [[head & tail] xs]\n    (conj (duplicate-a-sequence tail) head head)))","user":"58a58c50e4b01a0c0b232914"},{"code":"(fn [col] (reverse (reduce #(cons %2 (cons %2 %1)) '() col)))","problem":32,"user":"5390110de4b0b51d73faae94"},{"problem":32,"code":"(fn [v] (mapcat #(repeat 2 %) v))","user":"5739c2fee4b0cd1946bd107a"},{"problem":32,"code":"(fn [x] (apply concat (map #(do [% %]) x)))","user":"5006c169e4b0678c553fc48d"},{"code":"#(apply interleave (repeat 2 %))","problem":32,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":32,"code":"(fn f1 [s]\n\t\t\t(reduce #(conj %1 %2 %2) [] s))","user":"54ff6084e4b07d26eda61d50"},{"code":"(fn dup [xs]\n  (if (nil? xs)\n    '()\n    (concat (dup (butlast xs)) (list (last xs) (last xs)))))","problem":32,"user":"52a779fce4b0c58976d9ac1a"},{"code":"(fn [l]\n  (apply concat (map #(list % %) l)\n  )\n)","problem":32,"user":"53a36fd7e4b0f1fc74538834"},{"problem":32,"code":"(fn [in]\n    (-> (reduce\n       (fn [x y]\n         (conj x y y))\n       '()\n       in)\n      (reverse)))","user":"5ae47c1de4b0837691e92c81"},{"problem":32,"code":"(fn dupSeq [s]\n  (\n   let [\n        foldF (fn [acc elem] (\n        \tcons elem (cons elem acc)\n        ))\n       ]\n   \t(\n       reverse (reduce foldF [] s)\n    )\n  )\n)","user":"5183bccae4b028ec5fd2f2aa"},{"code":"(fn myduplicate [l]\n  (apply concat (map (fn [x] (list x x)) l)\n  )\n)","problem":32,"user":"4e6cf2be535de274dd8d818a"},{"problem":32,"code":"reduce (fn [a b] (concat a (list b b))) ()","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn blah\n  [li]\n  (interleave li li))","problem":32,"user":"53383c74e4b0e30313ee6c92"},{"code":"#(let [u %] (sort (reduce conj u %)))","problem":32,"user":"4e1fe800535d04ed9115e811"},{"problem":32,"code":"(fn duplicateSeq [sequ]\n  (interleave sequ sequ))","user":"5e83a273e4b09a7a73c8bbbb"},{"problem":32,"code":"(fn [s] (reduce #(concat %1 (repeat 2 %2)) '() s))","user":"54c05fd7e4b0ed20f4ff6f12"},{"code":"(fn dup [xs]\r\n  (if (empty? xs)\r\n    xs\r\n    (conj (dup (rest xs)) (first xs) (first xs))))","problem":32,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn duplicate [coll]\n  (if (empty? coll)\n    coll\n      (concat [(first coll) (first coll)] (duplicate (rest coll)))\n            ))","problem":32,"user":"534bfa81e4b084c2834f4a87"},{"problem":32,"code":"(fn dup [coll]\n  (when-let [s (seq coll)]\n    (cons (first s) (cons (first s) (dup (rest s))))))","user":"58896e5ce4b0f1effa3b773e"},{"problem":32,"code":"(fn [lst]\n  (mapcat #(repeat 2 %) lst))","user":"59dfd369e4b08badc2a0c4dd"},{"code":"(fn [xs] (apply concat (map #(list %1 %1) xs)))","problem":32,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"(fn [se]\n  (apply concat (map (fn [x] [x x]) se)))","problem":32,"user":"534941d1e4b084c2834f4a60"},{"problem":32,"code":"(fn [xs]\n  (loop [new [] old xs]\n    (if (empty? old) \n      new\n      (recur (conj new (first old) (first old)) (rest old))\n      )))","user":"5d88d820e4b0915913b1d3b1"},{"problem":32,"code":"(fn [s]\n  (->> s\n       (map (partial repeat 2))\n       (reduce into '())\n       (reverse)))","user":"60919828e4b00e9e6653c3d8"},{"problem":32,"code":"(fn dupe [x]\n\t(if (> (count x) 0) (conj (conj (dupe (next x)) (first x)) (first x))\n\t'())\n\t)","user":"542da97ae4b0dad94371f2ba"},{"problem":32,"code":"#((fn [s res]\n    (if (empty? s)\n      res\n      (let [e (first s)]\n        (recur (rest s) (concat res (list e e)))))) % '())","user":"5713c575e4b07c98581c3aab"},{"code":"(fn [n] (\n         mapcat #(list % %) n))","problem":32,"user":"52394c03e4b0d705d026ef09"},{"problem":32,"code":"(fn [initial-x]\n      (loop [x-prime (empty initial-x) x initial-x]\n        ;(println (str x-prime \", \" x))\n        (let [a (first x)]\n          (if (empty? x)\n            x-prime\n            (recur (conj x-prime a a) (rest x))\n            )\n          )\n        )\n      )","user":"561bf12ce4b064ca9f4b168e"},{"code":"(fn dupe [coll]\n  (if (empty? coll)\n  '()\n  (let [[x & xs] coll]\n    (concat (list x x) (dupe xs))\n    )\n  ))","problem":32,"user":"52127ee4e4b0d32679a5063c"},{"code":"(fn [s]\n  (loop [l s\n         result '()]\n    (cond\n     (empty? l) (reverse result)\n     :else (recur (rest l)\n                  (into result (list (first l) (first l)))))))","problem":32,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":32,"code":"(fn [args] (reduce (fn [doubled arg] (concat doubled (list arg arg))) [] args))","user":"5e7fb908e4b085ba37836e3f"},{"problem":32,"code":"(fn sum [x] (loop [col x res '()] (if (empty? col) (reverse res) (recur (rest col) (cons (first col) (cons (first col) res))))))","user":"52457931e4b08ba239308107"},{"problem":32,"code":"(fn [coll]\n     (seq (reduce (fn [new-coll x] (conj new-coll x x)) [] coll)))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn [s] \n  (loop [s s acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s) (first s))))))","problem":32,"user":"4f26d6d9e4b0d6649770a007"},{"problem":32,"code":"(fn dup\n  [x]\n  (reduce\n    (fn [result nextElement]\n      (conj (conj result nextElement) nextElement)\n      ) [] x)\n  )","user":"5c24c654e4b07e362c2305a7"},{"code":"(fn [col] \n \t(reduce concat '() (map #(vector % %2) col col)))","problem":32,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [s]\n  (reverse (loop [result () cnt (count s) i 0]\n     (if (= i  cnt) result\n         (recur (merge (merge result (nth s i)) (nth s i)) cnt (inc i))\n     )\n  ) )\n)","problem":32,"user":"518aec06e4b06da86c1973c2"},{"problem":32,"code":"reduce (fn [e1 e2] (conj (conj e1 e2) e2)) []","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":32,"code":"(fn duplicate [alist]\n  (reduce\n   concat\n   (map\n    #(vector % %)\n    alist)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":32,"code":"#(->> \n    % \n    (map (fn [x] [x x])) \n    (mapcat identity))","user":"57597fade4b02ea11479931d"},{"problem":32,"code":"(fn [coll]\n  (for [x coll y (repeat 2 x)]\n    y))","user":"575aa21de4b02ea114799348"},{"code":"(fn duplica[x]\r\n  (reduce concat\r\n    (map \r\n      #(take 2 (repeat %)\r\n    ) x)\r\n  )\r\n)","problem":32,"user":"4eb7ff08535d7eef30807379"},{"problem":32,"code":"(fn g ([[x & rest]] (if x (conj (g rest) x x))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":32,"code":"(fn [coll]\n  (mapcat #(conj nil % %) coll))","user":"5146f343e4b04ef915e3731e"},{"code":"#(letfn [(dbl [r] (if (= '() r) '()\n    (cons (first r) (cons (first r) (dbl (rest r))))))]\n  (dbl %))","problem":32,"user":"50b668dde4b08fb537db98f2"},{"problem":32,"code":";; #32\n(fn [coll]\n  (loop [current []\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      current\n      (let [curr (first remaining-coll)]\n        (recur (conj current curr curr) (rest remaining-coll))))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":32,"code":"(fn [vals] (reduce (fn [acc val] (concat acc [val val])) [] vals))","user":"53161a56e4b08068f379ed3e"},{"code":"(fn [l] (apply concat (for [x l] [x x])))","problem":32,"user":"524e79c1e4b0541d1855b7e0"},{"code":"(fn [coll]\n  (reduce concat\n          (map #(list % %) coll)))","problem":32,"user":"52d51535e4b09f7907dd133a"},{"code":"(fn [s]\n\t(interleave s s))","problem":32,"user":"51662183e4b05e5ef6a5e807"},{"problem":32,"code":"(fn dup [[x & xs :as coll]]\n  (if (empty? coll) []\n      (concat [x x] (dup xs))))","user":"54b07c1ee4b09f271ff37d16"},{"problem":32,"code":"#(->> %\n       (map (partial repeat 2))\n       (reduce concat '()))","user":"577829f9e4b0979f8965165a"},{"code":"(fn [c] \n  (reverse (reduce #(conj (conj %1 %2) %2) \n                   '() c)))","problem":32,"user":"501fa1aee4b0cb6ebc0a42eb"},{"problem":32,"code":"(fn mrg\n  ([in] (mrg in ()))\n  ([in out] \n    (if (empty? in) \n      (reverse out) \n      (mrg (rest in) (cons (first in) (cons (first in) out)))\n    )\n  )\n)","user":"550e52dbe4b06e50f9beb165"},{"code":"#(apply concat (map (fn [b] (list b b)) %))","problem":32,"user":"4ec42c11535dcc7ae8597d5f"},{"problem":32,"code":"(fn [x] (reduce \n  \t\t\t(fn [lista, i] (conj (conj lista i) i)) \n  \t\t\t[]\n  \t\t\tx)\n)","user":"5926c254e4b072a2710fceb8"},{"problem":32,"code":"#(mapcat (fn dup [i] (repeat 2  i)) %)","user":"6033c42ce4b0d5df2af222c3"},{"code":"(fn dup [x]\n  (if (empty? x)\n    '()\n    (conj (dup (rest x)) (first x) (first x))))","problem":32,"user":"533431e4e4b019098a6f8b8d"},{"problem":32,"code":"(fn [s]\n  (loop [result [] r s]\n    (if (empty? r)\n      result\n      (let [x (first r)]\n        (recur (conj result x x) (rest r))\n        )\n     )\n    )\n)","user":"57d7c894e4b0bd073c2023de"},{"code":"(fn a [coll] (mapcat #(list % %) coll))","problem":32,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn [lst] (mapcat #(into [] [% %]) lst))","problem":32,"user":"52f7ac81e4b047fd55836fc6"},{"problem":32,"code":"#(seq\n   (loop [x %\n          result []]\n     (if (seq x)\n       (recur (rest x) (conj result (first x) (first x)))\n       result)))","user":"5bc82994e4b07a9b28b100b9"},{"problem":32,"code":"(fn\n  [items]\n  (mapcat #(list % %) items))","user":"5c6227fee4b0fca0c1622641"},{"problem":32,"code":"(fn [col] (-> (reduce #(conj %1 %2 %2) '() col)\n              reverse))","user":"5e066185e4b0978307768fa4"},{"problem":32,"code":"(fn dupel [coll]\n  (if (empty? coll) '() (list* (first coll) (first coll) (dupel (rest coll)))))","user":"554a270fe4b0a04f79299570"},{"code":"(fn [coll]\n  (loop [v coll newlist '()]\n    (if (empty? v)\n      (sort newlist)\n      (recur (rest v) (cons (first v) (cons (first v) newlist))))))","problem":32,"user":"52c672e2e4b0c2d177d6210e"},{"problem":32,"code":";;(fn [seql] (apply concat (map #(repeat 2 %) seql)))\n\n(fn [seql]\n  (reduce #(concat %1 (repeat 2 %2)) '() seql))","user":"589ac5a2e4b00487982d5318"},{"problem":32,"code":"(fn [item]\n  (reduce concat (map #(take 2 (repeat %)) item)))","user":"5437eca1e4b032a45b86930d"},{"problem":32,"code":"(fn [col]\n   (into [] (for [x col y (range 2)] x)))","user":"5e078ba7e4b0978307768fb6"},{"code":"#(apply concat (map (fn[x] [x x]) %))","problem":32,"user":"5240e8ebe4b0ad64fa010349"},{"code":"#(sort (into %1 %1))","problem":32,"user":"512318b6e4b03b44edbed433"},{"problem":32,"code":"(fn [x] (apply concat (for [el x] [el el])))","user":"54a96a15e4b09f271ff37cad"},{"problem":32,"code":"(fn [w] (reduce (fn [x y] (conj x y y)) [] w))","user":"54cf0986e4b018d918be98c7"},{"problem":32,"code":"reduce #( concat %1 ( list %2 %2) ) '()","user":"54fc7d89e4b07d26eda61d2b"},{"problem":32,"code":"#(loop [v % r[]]\n   (if (empty? v)\n     r\n     (recur (rest v) (conj r (first v) (first v)))))","user":"56815e2fe4b0945ebc182a84"},{"problem":32,"code":"(fn [coll] \n   (reduce (fn [m x] (into m [x x])) [] coll))","user":"54393c3fe4b032a45b86931a"},{"code":"(fn\n[lst]\n  (reverse (reduce\n    (fn\n      [l element]\n      (conj (conj l element) element)\n    )\n    '()\n    lst\n  ))\n)","problem":32,"user":"530c462ae4b02e82168697d9"},{"code":"#(reduce (fn [acc elem] (conj (conj  acc elem) elem)) [] %)","problem":32,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn dup [s]\n  (if (= () s)\n\t ()\n     (cons (first s) (cons (first s) (dup (rest s))))\n\t)\n)","problem":32,"user":"4faacc04e4b081705acca201"},{"problem":32,"code":"#(mapcat identity (map (fn [x] [x x]) %))","user":"523630eee4b05f3be1c7c8e8"},{"code":"(fn my-duplicate [coll]\n  (reverse (reduce (fn [a b] (cons b (cons b a)))\n                   nil coll)))","problem":32,"user":"4e7f51eb535db966e863cc3f"},{"problem":32,"code":"(fn [n]\n  (loop [[h & r] n, acc '()]\n    (if (nil? h)\n      (reverse acc)\n      (recur r (conj (conj acc h) h)))    \n    ))","user":"554884d4e4b0a04f7929955c"},{"code":"(fn [x]\n  (loop [path (seq x)\n         result []]\n    (if-let [p (first path)]\n      (recur (next path) (concat result [(first path) (first path)]))\n      result)))","problem":32,"user":"531e5c81e4b08068f379edba"},{"problem":32,"code":"(fn [s] \n  (reduce #(into %1 (take 2 (repeat %2))) [] s))","user":"5054d243e4b0b1b9d1860eb5"},{"code":"#(loop [in % out []] \n   (if (empty? in) \n     (reverse out)\n     (recur (rest in) (cons (first in) (cons (first in) out)))))","problem":32,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":32,"code":"(fn [x] (reduce #(concat %1 %2 %2) nil (partition-by identity x)))","user":"55b0ecb7e4b002ce9d5cbc27"},{"problem":32,"code":"#(mapcat (fn f1 [n] [n n]) %)","user":"56014f55e4b04bb52996e184"},{"problem":32,"code":"(fn [c]\n  (reduce #(conj %1 %2 %2)\n          []\n          c))","user":"557c6ca6e4b05c286339e0c4"},{"problem":32,"code":"(fn [x] (loop [i x res[]]  (if(empty? i) res  (recur (rest i) (conj res (first i) (first i))))))","user":"55382530e4b09218d5f44fdd"},{"problem":32,"code":"(fn duplicateList [list]\n  (mapcat (partial repeat 2) list))","user":"58631579e4b0f14aab7c8817"},{"code":"(fn [coll]\n  (reverse\n    (reduce (fn [acc x] (cons x (cons x acc))) [] coll)))","problem":32,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn [s] (reduce #(conj % %2 %2) [] s))","problem":32,"user":"503a234de4b088a6a14ca76d"},{"problem":32,"code":"(fn dup [lst]\n  (if\n    (empty? lst)\n    lst\n    (cons (first lst) (cons (first lst) (dup (rest lst))))\n    )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn [ xs ]\n  (loop [in xs\n         out [] ]\n    (if (empty? in)\n      out\n      (recur \n       \t(rest in)\n       \t(concat out [ (first in) (first in) ] ) ))))","problem":32,"user":"4f03653f535dcb61093f6aa1"},{"code":"(fn [x] (reduce concat (map (partial repeat 2) x)))","problem":32,"user":"530ccb1de4b08068f379ec99"},{"code":"(fn [s] (reduce #(concat % (list %2 %2)) () s))","problem":32,"user":"5175616ae4b0dea9bbfba576"},{"problem":32,"code":"(fn [s] (reduce #(conj (conj %1 %2) %2) (empty s) s))","user":"5292feb4e4b0239c8a67af39"},{"code":"reduce #(concat %1 [%2 %2]) '()","problem":32,"user":"4f03822f535dcb61093f6b03"},{"problem":32,"code":"(fn dub [l]\n  (loop [r l         \n         res '()]\n    (if (empty? r)\n      (reverse res)    \n      (recur (rest r) (conj res (first r) (first r))))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":32,"code":"(fn f [xs] (if (empty? xs) xs (conj (f (rest xs)) (first xs) (first xs))))","user":"54c641f8e4b045293a27f628"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc e] (conj acc e e)) [] s)\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":32,"code":"(fn func [xs]\n  (if (= 1 (count xs))\n    (seq (list (first xs) (first xs)))\n    (concat (seq (list (first xs) (first xs))) (func (rest xs)))))","user":"525890f7e4b0cb4875a45cb5"},{"code":"(fn [x] (reverse (reduce #(apply conj %1 %2 ) (map #(list  % % ) x ))))","problem":32,"user":"50956c2be4b087f34d351ab2"},{"problem":32,"code":"(fn [l]\n  (seq (reduce #(concat %1 (repeat 2 %2)) [] l)))","user":"5c3e5227e4b08cd430848e80"},{"code":"(fn [x](reduce #(conj (conj % %2) %2) [] x))","problem":32,"user":"50646c01e4b007509339a58b"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [a n] (conj (conj a n) n))\n          []\n          s\n          )\n)","user":"57c3c7e6e4b05aa3c4741cc4"},{"problem":32,"code":"(fn f [xs]\n  (let [x (first xs) r (rest xs)]\n\t(cond\n     (empty? r) [x x]\n     :else (cons x (cons x (f r))))\n    )\n  )","user":"60486e8ae4b02d28681c77db"},{"problem":32,"code":"(fn [s] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() s))\n  )","user":"5a7f77fae4b00b71e582a041"},{"problem":32,"code":"(fn [value]\n  (mapcat #(take 2 (repeat %)) value))","user":"600d9808e4b074f607df669c"},{"code":"(fn [input] (reduce #(conj (conj % %2) %2) [] input))","problem":32,"user":"4fb266a5e4b081705acca28c"},{"problem":32,"code":"(fn dup \n  [input]\n  (if (empty? input)\n    input\n    (conj (dup (drop 1 input)) (first input) (first input))))","user":"55ee7977e4b0121d4835fdee"},{"problem":32,"code":"mapcat #([[% %]]0)","user":"55dab408e4b0e31453f64ad9"},{"code":"(fn [x]\n  (reverse \n    (reduce \n      #(apply conj %1 %2) '() (map #(repeat 2 %) x))))","problem":32,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":32,"code":"(fn [input] (reverse (loop [acc '()\n                   rem- input]\n              (if-not (empty? rem-)\n                (recur (into acc (repeat 2 (first rem-))) (next rem-))\n                acc))))","user":"54e79094e4b024c67c0cf818"},{"problem":32,"code":"reduce　(fn [n s] (conj (conj n s) s)) []","user":"57908d94e4b0ebec4cfb75ac"},{"code":"(fn [s]\n  (apply concat (map #(vector %%) s)))","problem":32,"user":"52745629e4b03e8d9a4a74a0"},{"code":"(fn [x] (reverse (reduce (fn [a y] (conj a y y)) () x)))","problem":32,"user":"4f40f055e4b0e243712b1fc2"},{"code":"#(apply concat (map (fn [i] (list i i)) %))","problem":32,"user":"510ee996e4b07438aa321462"},{"problem":32,"code":"(fn [arr]\n  (loop [h (first arr) t (rest arr) res '()]\n    (if (nil? h)\n      (reverse res)\n      (recur (first t) (rest t) (cons h (cons h res))))))","user":"58354124e4b089d5ab817cd6"},{"problem":32,"code":"(fn [lat] (reduce concat (map #(take 2 (repeat %)) lat)))","user":"55aa1637e4b0988bba2ad949"},{"problem":32,"code":"(fn\n  [[& params]]\n  (loop [ans '() rest-params params]\n    (if (empty? rest-params)\n      (reverse ans)\n      (let [head (first rest-params)]\n       (recur (conj ans head head) (rest rest-params))))))","user":"556ff203e4b09a3098a52526"},{"code":"(fn [xs] (seq (reduce #(conj % %2 %2) [] xs)))","problem":32,"user":"4fca4c37e4b0ee37620e184f"},{"code":"#(reverse (reduce (fn [a b]\n           (conj a b b)) () %))","problem":32,"user":"51f2ab8be4b0210f90e74554"},{"problem":32,"code":"(fn [seq]\n    (apply concat (map #(vector % %) seq)))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn [x]\n  (loop [aggr [] coll x]\n    (if (empty? coll)\n      aggr\n      (recur (conj aggr \n                   (first coll) \n                   (first coll)) \n             (rest coll)))))","problem":32,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn dup[x]\n  (if (= (count x) 1) (conj x (first x))\n  (conj (dup (rest x)) (first x) (first x)))\n)","problem":32,"user":"4ea365e2535d7eef308072c5"},{"problem":32,"code":"(fn [s]\n   (loop [new  []\n          remaining s]\n     (if (empty? remaining)\n       new\n       (recur\n         (conj new (first remaining) (first remaining) )\n         (rest remaining)))))","user":"53d10553e4b00fb29b22130f"},{"code":"#(mapcat (fn [i] [i i]) %)","problem":32,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn [x] (reverse  (reduce #(conj (conj %1 %2) %2) '() x)))","problem":32,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":32,"code":"(fn dup-coll [coll]\n  (let [x coll y coll]\n    (interleave x y)))","user":"4fb85651e4b081705acca2d7"},{"code":"(fn duplicate [seq]\n  (if (empty? seq)\n    '()\n    (cons (first seq) (cons (first seq) (duplicate (rest seq))))))","problem":32,"user":"4f0a2ed1535d0136e6c222f3"},{"problem":32,"code":"(fn [xs]\n  (let [iterate (fn iterate [acc ys]\n                  (if (empty? ys)\n                    (reverse acc)\n                    (let [x (first ys)]\n                      (recur (cons x (cons x acc)) (rest ys)))))]\n    (iterate (list) xs)))","user":"587100d6e4b01531a375e9f0"},{"problem":32,"code":"(fn duplicate-seq [lst]\n  (mapcat #(repeat 2 %) lst))","user":"57f8153de4b0d3187e900916"},{"problem":32,"code":"(fn [x]\n  (reverse (reduce (fn [c x] (into c [x x])) '() x)))","user":"58852909e4b0f1effa3b76af"},{"problem":32,"code":"(fn [col] \n  (reduce \n   (fn [x y] (concat x y)) \n   (for [x col \n         :let [y (repeat 2 x)]] \n     y)))","user":"55b1d0b5e4b0da326a65cf73"},{"code":"(fn [x] (reduce concat (map #(take 2 (repeat %1)) x )))","problem":32,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"(fn [s]\n  (loop [src s result []]\n    (if (empty? src)\n      result\n      (recur (rest src) (conj result (first src) (first src))))))","problem":32,"user":"504db141e4b021508a333965"},{"problem":32,"code":"(fn [y] (reverse (reduce #(cons %2 (cons %2 %1)) '() y)))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [x] (reduce #(into %1 (take 2 (repeat %2))) [] x))","problem":32,"user":"50a5f72fe4b0aa96157e2611"},{"problem":32,"code":"(fn [x]\n    (loop [out [] i 0]\n          (if (= (count x) i) out\n              (recur (concat out (repeat 2 (x i))) (inc i)))))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn dup-seq [s]\n  (if (empty? s)\n    '()\n    (let [h (first s)]\n      (cons h (cons h (dup-seq (rest s)))))))","problem":32,"user":"5027f37be4b01614d1633ff1"},{"code":"#(mapcat (fn[x] (list x x)) %)","problem":32,"user":"522454f4e4b01819a2de42d3"},{"problem":32,"code":"#(reduce (fn [rv e] (conj rv e e)) [] %)","user":"52fa250ee4b047fd55836ff3"},{"problem":32,"code":"(fn duplicate\n  [s]\n  (reduce #(conj %1 %2 %2) '() (reverse s)))","user":"5f6adf5ee4b02876ed9fd049"},{"problem":32,"code":";#(replace % [0 0 1 1 2 2..])\n; stolen soution #(interleave % %)\n#(replace % (sort (flatten (cons (range (count %)) (range (count %))))))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn fn29 [coll]\n  (apply concat (for [a coll] (repeat 2 a))))","problem":32,"user":"5042bb9ae4b034ff00315d16"},{"problem":32,"code":"(fn [coll]\n  (loop [result [] x coll]\n    (if (empty? x)\n      (seq result)\n      (recur (conj (conj result (first x)) (first x)) (rest x)))))","user":"54dbe183e4b024c67c0cf778"},{"problem":32,"code":"(fn [coll] (apply concat (map #(into [] [% %]) coll)))","user":"57147cd9e4b07c98581c3abf"},{"code":"(fn duplica [s]\n  (cond\n   (empty? s) nil\n   :else (cons (first s) (cons (first s) (duplica (next s))))))","problem":32,"user":"52c8758be4b0c2d177d62135"},{"problem":32,"code":"(fn [xs] (apply concat (map #(cons % (cons % nil)) xs)))","user":"5488537be4b0e286459a11cf"},{"problem":32,"code":"#(\n    loop [a % res []] (\n                  if (empty? a)\n                  res\n                  (do\n                    (recur (rest a) (conj res (first a) (first a)))))\n    )","user":"59f58103e4b0966464fe6ac0"},{"problem":32,"code":"(partial reduce (fn [x y] (conj x y y)) [])","user":"53f592b7e4b0db01ade6f9d0"},{"problem":32,"code":"#(reduce (fn [coll x] (conj (conj coll x) x)) [] %)","user":"5afb3426e4b0cc2b61a3bcf5"},{"code":"(fn [s](reduce #(conj % %2 %2)  [] s))","problem":32,"user":"536046a9e4b063bf7a5f8fe1"},{"problem":32,"code":"(fn [s] (mapcat identity (map (fn [x] [x x]) s)))","user":"59e8c89de4b0249b72820737"},{"problem":32,"code":"#(reduce (fn [accum item]\n           (concat accum (repeat 2 item)))\n         []\n         %)","user":"58740c18e4b01531a375ea49"},{"code":"#(loop [x % n []]\n   (if (empty? x)\n   n\n   (recur (rest x) (conj n (first x) (first x)))))","problem":32,"user":"5356dcbee4b04ce2eb3ed270"},{"problem":32,"code":"(fn [a] (reduce concat [] (map #(list % %) a)))","user":"4eb171d7535d7eef30807340"},{"problem":32,"code":"(fn\n  [x]\n  (loop [coll x\n         res []]\n    (if (empty? coll)\n      res\n    (recur (rest coll) (conj res (first coll) (first coll)))\n    )\n    )\n  )","user":"5c6cb3bfe4b0fca0c1622730"},{"code":"reduce (fn [acc el] (conj acc el el)) []","problem":32,"user":"531792d9e4b08068f379ed5e"},{"code":"(fn dup-seq\n  ([chain] (dup-seq chain []))\n  ([chain result]\n    (if (empty? chain)\n        result\n        (dup-seq (rest chain)\n                 (concat result\n                   (replicate 2 (first chain)))))))","problem":32,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":32,"code":"(fn dup [seq]\n    (cons (first seq)\n      (cons (first seq)\n        (if (= '() (rest seq))\n          '()\n          (dup (rest seq))))))","user":"54c9e00be4b045293a27f683"},{"problem":32,"code":"(fn [coll]\n  (interleave coll (seq coll))\n  )","user":"5d590500e4b02ba5928a6824"},{"code":"(fn [a]\n  (interleave a a) \n)","problem":32,"user":"4e352362535deb9a81d77f2c"},{"code":"(fn [v] (reduce #(cons %2 (cons %2 %)) '() (reverse v)))","problem":32,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":32,"code":"; (fn [s] (reverse (reduce #(conj (conj %1 %2) %2) nil s)))\n#(mapcat list % %)","user":"561c0278e4b064ca9f4b1691"},{"code":"(fn [x]\n  (reverse (reduce (fn [a b] (conj a b b)) '() x)))","problem":32,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":32,"code":"(fn [s]\n (reverse (reduce #(conj %1 %2 %2) '() s)))","user":"566a0845e4b04acd4f672e05"},{"problem":32,"code":"(fn [x] (reduce (fn [x y] (conj (conj x y) y)) [] x))","user":"5ec66326e4b08d0ec38692d5"},{"problem":32,"code":"reduce #( conj %1 %2 %2 ) []","user":"60c4e5dfe4b0e0fa5f1b42cd"},{"problem":32,"code":"#(reduce (fn [acc cur] (concat acc [cur cur])) [] %)","user":"59021fede4b0438e51c2d04d"},{"problem":32,"code":"(fn myDuplicate\n  [sequence]\n  (apply concat (map (partial repeat 2) sequence)))","user":"557e9d17e4b05c286339e0d8"},{"problem":32,"code":"(fn dup [s] (mapcat #(vector % %) s))","user":"53b39d82e4b047364c0444a6"},{"code":"#(reduce \n  (fn [sequ number]\n    (conj sequ number number)) \n  \t[] %)","problem":32,"user":"53847a4ce4b06839e8705ef3"},{"problem":32,"code":"(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":32,"code":"#(loop[n (- (count %) 1), r '()]\n   (if(< n 0)\n     r\n     (recur(dec n)(cons (nth % n) (cons (nth % n) r)))))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn dup [items] (reduce #(conj %1 %2 %2) [] items))","problem":32,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":32,"code":"(fn [x] (reduce #(concat %1 [%2 %2]) [] x))","user":"55b24240e4b0da326a65cf7b"},{"problem":32,"code":"(fn dupe [s]\n  (mapcat (fn [n] (repeat 2 n)) s))","user":"55ad2d97e4b03311e7b732a2"},{"code":"(fn dup [listy]\n  (if (empty? listy)\n    []\n  \t(cons (first listy) (cons (first listy) (dup (rest listy)) ))))","problem":32,"user":"51b89503e4b050a1176cd69a"},{"problem":32,"code":"(fn dd [z] (apply concat\n     (for [x z] [x x] )\n  ))","user":"58335c22e4b089d5ab817c9a"},{"problem":32,"code":"#(reduce (fn [acc cur] (concat acc [cur cur])) '() %)","user":"565131b3e4b0f29ec07d2e88"},{"problem":32,"code":"#(loop [x %\n         res []]\n   (if (empty? x)\n     res\n     (recur (rest x) (conj res (first x) (first x)))))","user":"586b1482e4b0f14aab7c88cf"},{"code":"#(reduce (fn [x,y] (conj x y y) ) [] %)","problem":32,"user":"4fbd292fe4b081705acca300"},{"problem":32,"code":"(fn [coll] (reverse (reduce #(conj (conj %1 %2) %2) '() coll)))","user":"54eea988e4b024c67c0cf875"},{"problem":32,"code":"(fn a [lst]\n  (if (vector? (first lst))\n      (for [i (partition 2 (flatten (for [i lst] (list i i))))] (vector (first i)(second i)))\n  (flatten (for [i lst] (list i i)))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":32,"code":"; problem with this problem?  test 3 == test 4 ?\n\n(fn [coll] (mapcat #(for [x [1 2]] %) coll))","user":"5535e822e4b09218d5f44fb2"},{"problem":32,"code":"(fn [c](reduce #(conj %1 %2 %2) [] c))","user":"56347285e4b0bfe05bf117bc"},{"problem":32,"code":"(fn\n  [x]\n   (reduce into [] (for [i x]\n    [i i])))","user":"549ffeade4b0f3d1d8e70fb2"},{"problem":32,"code":"(fn [x] (apply concat (map #(take 2(repeat %)) x)))","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn [seq] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() seq)))","problem":32,"user":"4e2f9e71535deb9a81d77f11"},{"code":"#(for [e %, n (range 2)] e)","problem":32,"user":"5133af1de4b0d7a043de8cf2"},{"code":"#(reduce (fn[acc x] (conj acc x x)) [] %)","problem":32,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn [coll]\n  (reverse\n   (reduce #(conj % %2 %2) '() coll)))","problem":32,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":32,"code":"(fn [start]\n(sort(concat start start))\n)","user":"5f3a8493e4b004f08c61c527"},{"code":"#(loop [myseq %\n        result []]\n   (if (empty? myseq)\n     result\n     (recur (rest myseq) (conj result (first myseq) (first myseq)))\n   ))","problem":32,"user":"531d34cfe4b08068f379edac"},{"problem":32,"code":"(fn duplicate-seq [coll]\n  (apply concat\n    (for [x coll\n          :let [y (list x x)]]\n      y\n      ))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":"(fn [x] (reduce #(conj (conj %1 %2) %2) (empty x) x))","problem":32,"user":"50981062e4b04e098a4c7268"},{"problem":32,"code":"(fn [coll] (apply concat (map #(take 2 (repeat %)) coll)))","user":"60654263e4b069485764ddc9"},{"problem":32,"code":"#(loop [a % b []] (if (first a)\n                   (recur (rest a) (conj b (first a) (first a)))\n                   b\n                   )\n  )","user":"575d5831e4b02ea114799381"},{"problem":32,"code":"(fn [l]\n  (loop [[e & more :as lst] l\n         acc []]\n    (if (empty? lst)\n      acc\n      (recur more (conj acc e e)))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":32,"code":"(fn duplicate \n\t[coll]\n\t(lazy-seq\n\t\t(when-let [s (seq coll)]\n\t\t\t(concat (list (first s) (first s)) \n\t\t\t\t(duplicate (rest s))\n\t\t\t)\n\t\t)\n\t)\n)","user":"55e46caae4b050e68259b451"},{"code":"(fn [x]\r\n   (loop [s x \r\n          r ()]\r\n     (if (empty? s)\r\n       (reverse r)\r\n       (recur (rest s) \r\n              (conj r (first s) (first s))))))","problem":32,"user":"4ff07688e4b0678c553fc324"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [coll item] (cons item (cons item coll))) '() coll)))","user":"55ec4558e4b0121d4835fdc5"},{"problem":32,"code":"(fn dup-elems [col]\n  (mapcat #(vector % %) col))","user":"60606490e4b03746e80ebf67"},{"code":"(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))","problem":32,"user":"4f2c593ee4b0d6649770a053"},{"problem":32,"code":"(fn [items]\n   (reduce (fn [duplicated item] (concat duplicated [item item])) () items ))","user":"53ff602fe4b0de5c418485ff"},{"problem":32,"code":"(fn func [s]\n  (loop [s s res []]\n    (if (empty? s) res (recur (rest s) (conj res (first s) (first s))))))","user":"55f95782e4b03cbcff9738bf"},{"problem":32,"code":"(fn [x]\n  (loop [duplicate-list []\n         destruct-list x]\n    (if (not-empty destruct-list)\n    (recur (conj (conj duplicate-list (first destruct-list)) (first destruct-list)) (rest destruct-list))\n    duplicate-list)))","user":"56491d05e4b0284900eef63a"},{"problem":32,"code":"(fn [xs] (reduce (fn [a x] (conj a x x)) [] xs))","user":"4fc4e9b5e4b081705acca352"},{"problem":32,"code":"(fn dupe [xs]\n  (if (empty? xs)\n    '()\n    (conj (dupe (rest xs)) (first xs) (first xs))))","user":"5888f271e4b0f1effa3b7726"},{"problem":32,"code":"#(reduce (fn [a, e] (conj a e e)) [] %)","user":"54b17a49e4b09f271ff37d1e"},{"code":"(fn [x] (seq (reduce #(conj (conj %1 %2) %2) '[] (vec x))))","problem":32,"user":"4f2aff4de4b0d6649770a044"},{"problem":32,"code":"(fn [x]\n    (loop [rez []\n           cnt 0]\n      (if (>= cnt (count x))\n               rez\n               (recur (conj rez\n                              (nth x cnt)\n                              (nth x cnt)\n                              ) (inc cnt)))))","user":"5d301c95e4b01671435dbcca"},{"code":"(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))","problem":32,"user":"4de2f44f535d08e6dec9fdec"},{"problem":32,"code":"reduce #(concat %1 (repeat 2 %2)) []","user":"53ce0a29e4b00fb29b2212eb"},{"code":"(fn f [x]\n  (if (seq x)\n    (conj (f (seq (rest x))) (first x) (first x))\n    '()))","problem":32,"user":"4f0f9df7535d0136e6c22342"},{"code":"#(interleave % %)","problem":32,"user":"4dd61f98535d2dad7130b5c6"},{"problem":32,"code":"(fn [s]\n    (reduce #(concat %1 [%2 %2]) [] s))","user":"586b6753e4b01531a375e956"},{"code":"(fn[x](reverse (reduce #(cons %2 (cons %2 %)) '() x)))","problem":32,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [s] (reverse (reduce #(conj (conj %1 %2) %2) '() s)))","problem":32,"user":"4f280840e4b0d6649770a010"},{"problem":32,"code":"#(reduce (fn [c e] (into c [e e])) [] %)","user":"56e2dbf4e4b03a7c14b85a3b"},{"code":"(fn [lista] (reduce concat (map #(repeat 2 %) lista)))","problem":32,"user":"52facaeae4b047fd55837000"},{"code":"mapcat (fn [a] `(~a ~a))","problem":32,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn dupseq [sq]\n  (apply concat (map #(repeat 2 %) sq)))","problem":32,"user":"515f2a85e4b0595cf3d1da44"},{"problem":32,"code":"(fn [lst] (apply concat (map \n    (fn [x]\n      (list x x)\n      )              \n           lst                     \n                         )))","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":32,"code":"(fn [coll] (seq (reduce\n   #(into %1 [%2 %2])\n   []\n   coll\n)))","user":"55916764e4b0604b3f94d57b"},{"problem":32,"code":"(fn [coll]\n   (sort (concat coll coll)))","user":"54a1d047e4b09f271ff37c4f"},{"code":"(fn [coll] (loop [s coll result '()] \n             (if (empty? s) (reverse result) \n               (recur (rest s) \n                      (conj (conj result (first s)) (first s) ) ) ) ) )","problem":32,"user":"50fec710e4b0219f3bc8bd97"},{"problem":32,"code":"(fn [xxx](reduce #(concat %1 [%2 %2]) [] xxx))","user":"55f01316e4b06e875b46ce1a"},{"code":"#(loop [acc '() left %]\n    (if (empty? left)\n      acc\n      (let [n (first left)]\n        (recur (concat acc (list n n)) (rest left)))))","problem":32,"user":"4f9b3532e4b0dcca54ed6d13"},{"problem":32,"code":"(fn f [lst]\n  (let [f*\n        (fn [acc lst*]\n          (conj acc lst* lst*))]\n(reduce f* [] lst)))","user":"59e55cc8e4b08badc2a0c555"},{"problem":32,"code":"(fn [coll]\n    (apply concat (map (partial repeat 2) coll)))","user":"4fb41dace4b081705acca2aa"},{"problem":32,"code":"(fn [s] (reduce concat (map #(vector % %) s)))","user":"5e3071abe4b05b4b01516213"},{"problem":32,"code":"#(for [x %\n       y [x x]]\n  y)","user":"56a9ea17e4b07966d5a8a07c"},{"code":"(fn [col]\n  (reduce\n    (fn [all new]\n      (conj all new new))\n    []\n    col))","problem":32,"user":"51aee76ce4b09397d5109796"},{"code":"mapcat (fn [i] (list i i))","problem":32,"user":"4f0e4ebd535d0136e6c22322"},{"code":"#(reduce (fn [coll elem] \n            (concat coll [elem elem])) () %)","problem":32,"user":"53778b90e4b06839e8705e36"},{"problem":32,"code":"(fn [x] (mapcat (fn [c] [c c]) x))","user":"530a6cbae4b02e82168697be"},{"code":"(fn [xs] (mapcat #(replicate 2 %) xs))","problem":32,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":32,"code":"(fn f\n  [l]\n  (if (empty? l)\n    []\n    (concat (vector (first l)) (vector (first l)) (f(rest l)))))","user":"59390a35e4b02506e01a29f3"},{"problem":32,"code":"(fn double-seq\n  [s]\n  (if (empty? s)\n    ()\n    (let [sh (first s)]      \n      (cons sh (cons sh (double-seq (rest s)))))))","user":"550ff2a3e4b06e50f9beb17f"},{"problem":32,"code":"(fn [s]\n  (loop [s s\n         acc '()]\n    (if (empty? s)\n      (reverse acc)\n      (recur (rest s) (cons (first s) (cons (first s) acc)))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"code":"(fn duplicate-sequence [xs]\n\t(reverse (reduce (fn [acc x] (conj acc x x)) '() xs)))","problem":32,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":32,"code":"#(reduce (fn [r x](conj r x x)) [] %)","user":"53d5a63be4b0e771c3025449"},{"problem":32,"code":"#(sort (apply merge % %))","user":"54f15cb8e4b024c67c0cf8b1"},{"problem":32,"code":"(fn [input]\n\n  (loop [sequence (seq input) \n\n         result []]\n\n    (if (= 0 (count sequence))\n\n      result\n\n      (recur (rest sequence) (conj result (first sequence) (first sequence))))))","user":"59c5093ce4b0a024fb6ae50c"},{"code":"(fn [xs]\n  (loop [result nil  l xs]\n    (if (not (seq l))\n      result\n      (recur (cons (last l) (cons (last l) result)) (butlast l) ))))","problem":32,"user":"51857e64e4b0da5a5be3babe"},{"problem":32,"code":"reduce (fn [col el] (conj col el el)) []","user":"5956c6dae4b066ee0a44af61"},{"code":"(fn [col] (mapcat vector col col))","problem":32,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":32,"code":"(fn [s]\n        (->> s\n             (map (fn [x] [x x]))\n             (apply concat)))","user":"546c4377e4b00cfc9eacc177"},{"problem":32,"code":"(fn [y]\n  (reduce (fn [d item] (concat d [item item])) [] y)\n)","user":"56152a26e4b05f002753dfc1"},{"problem":32,"code":"(fn  [x]\n (reduce (fn [newstring y]\n           (conj newstring y y))\n          [] x))","user":"58e6a2c5e4b056aecfd47cba"},{"problem":32,"code":"reduce (fn [contain a] (concat contain (list a a))) []","user":"58809253e4b0f1effa3b7618"},{"code":"(fn dup [in]\n  (mapcat #(vector %1 %2) in in)\n)","problem":32,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn [col] (reduce #(conj %1 %2 %2) [] col))","problem":32,"user":"4daedd1eedd6309eace4d164"},{"problem":32,"code":"(fn r [s] (cond (empty? s) s :else (cons (first s) (cons (first s) (r (rest s))))))","user":"556766c1e4b0c656e3ff1840"},{"code":"(fn [l] (reverse (reduce #(conj % %2 %2) '() l)))","problem":32,"user":"502cff22e4b0b2ab8d5c7e72"},{"code":"#(reverse (loop [i (dec (count %)) result []]\n  (if (= i -1)\n    result\n    (recur (dec i) \n           (conj (conj result (nth % i)) (nth % i) ) \n    )\n  )\n) )","problem":32,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn foo [xxs]\n\n    (if (empty? xxs)\n      nil\n\n      (let [x (first xxs)\n            xs (rest xxs)]\n\n      (cons x (cons x (foo (rest xxs))))\n        )\n\n      )\n\n    )","problem":32,"user":"535aba96e4b04ce2eb3ed2a8"},{"code":";(fn [coll]\n;  (loop [c coll\n;         acc '()]\n;    (if (empty? c)\n;      (reverse acc)\n;      (recur (rest c) (conj acc (first c) (first c))))))\n\n#(interleave % %)","problem":32,"user":"528b01a0e4b0239c8a67ae89"},{"problem":32,"code":"(fn dup [[head & tail]]\n  (if (nil? head)\n    '()\n  \t(concat (list head head) (dup tail))))","user":"568c92c6e4b0dcc4269f40b8"},{"problem":32,"code":"#(loop [acc '[]\n        remainder %]\n   (if (empty? remainder)\n     acc\n     (recur (concat acc (list (first remainder) (first remainder))) (rest remainder))))","user":"5fb082cfe4b08cb800c85b14"},{"code":"(fn [l] (reduce #(conj %1 %2 %2) (cons [] l)))","problem":32,"user":"52d66152e4b09f7907dd1357"},{"problem":32,"code":"(fn [x] (apply list (apply concat (map #(list % %) x))))","user":"572ee822e4b0cd1946bd0f91"},{"code":"(fn [a] (reverse (reduce #(cons %2 (cons %2 %1)) () a)))","problem":32,"user":"510b704ee4b078ea71921100"},{"problem":32,"code":"(fn my-dup [s]\n\t(reverse (reduce #(cons %2 (cons %2 %1)) '() s))\n)","user":"57a9db97e4b0b8559636fc5b"},{"code":"(fn [xs]\n  (apply concat\n   (map (fn [x] (list x x)) xs)))","problem":32,"user":"519b231ee4b0ac1b7dced6a2"},{"code":"(fn [x] (mapcat (partial repeat 2) x))","problem":32,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":32,"code":"(fn [col]\n  (loop [col col, result []]\n    (if (empty? col)\n      result\n      (recur (rest col) (concat result [(first col) (first col)] )))))","user":"5d0859fbe4b0cc9c91588208"},{"problem":32,"code":"(fn [seq] (apply concat (map #(vec [% %]) seq)))","user":"53e3e353e4b036ad0777e406"},{"code":"(fn [x] (reverse (reduce (fn [mem v] (cons v (cons v mem))) (cons '() x))))","problem":32,"user":"50a4b6a7e4b0344e360f3bb8"},{"code":"#(reduce \n   (fn [acc x] \n     (concat acc (list x x)))\n   () %)","problem":32,"user":"5141abf1e4b02fd87f5064c3"},{"problem":32,"code":"(fn [a]\n  (apply concat\n    (for [x a]\n      (list x x)\n    )\n  )\n)","user":"54468ebfe4b032a45b8693b1"},{"problem":32,"code":"#(loop [seqq %\n              res []]\n         (if (empty? seqq)\n             res\n             (recur (rest seqq) (conj res (first seqq) (first seqq)) )\n              ))","user":"60bfb68be4b0e0fa5f1b429e"},{"problem":32,"code":"(fn [ls] \n  (mapcat #(repeat 2 %) ls))","user":"56bb81ebe4b0f26550335957"},{"problem":32,"code":"#(reduce (fn [f n] (conj (conj f n) n)) [] %)","user":"5553b729e4b0deb715856e05"},{"code":"(fn dup [[x & xs]]\n  (if (nil? x)\n    []\n    (concat [x x] (dup xs))))","problem":32,"user":"536254a5e4b0243289761e50"},{"problem":32,"code":"(fn [s](loop [x [], y s](if (empty? y) x (recur (into x (take 2 (repeat (first y)))) (rest y)))))","user":"560331dee4b04bb52996e1b5"},{"problem":32,"code":"(fn [s] \n  (interleave s s)\n )","user":"55b3e8aee4b01b9910ae2977"},{"problem":32,"code":"#(reverse (into '() (interleave % %)))","user":"55c1eb52e4b0e31453f64970"},{"code":"(fn [seq]\n    (reduce concat\n            (map (fn [x]\n                   (list x x))\n                 seq)))","problem":32,"user":"4ea3c875535d7eef308072c9"},{"code":"#(apply concat (for [x %] (list x x)))","problem":32,"user":"52570aeae4b0541d1855ba42"},{"code":"(fn [x](interleave x x))","problem":32,"user":"4eeb8f68535d93acb0a668a9"},{"code":"(fn dup [[x & xs]]\r\n  (cond\r\n    (empty? xs) (cons x (cons x '()))\r\n    :else (cons x (cons x (dup xs)))))","problem":32,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":32,"code":"(fn \n  [lst]\n  (mapcat #(cons % (list %)) lst))","user":"5e9636fee4b0fbed045a3816"},{"problem":32,"code":"(fn [xs]\n  (interleave xs xs))","user":"5188c249e4b0bdff0e072d54"},{"problem":32,"code":"(fn foo [x] (let [item (first x)] (if (empty? x) nil\n          (cons item (cons item (foo (rest x)))))))","user":"5742d82ae4b05c31a32c0881"},{"problem":32,"code":"(fn [c]\n  (if (empty? c)\n    []\n    (apply concat [] (map (fn [e] [e e]) c))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":32,"code":"reduce (fn [coll x] (conj coll x x)) []","user":"54d0cedde4b0e8a36923e5d2"},{"code":"(fn dupe [coll]\n  (->> coll\n    (map (fn [x] [x x]))\n    (mapcat identity)))","problem":32,"user":"4f07bc41535dcb61093f6c2c"},{"problem":32,"code":"#(seq (reduce (fn [acc item]                                                         \n                     (-> acc                                                              \n                         (conj item)                                                      \n                         (conj item)))                                                    \n                   [] %))","user":"5410499de4b01498b1a719a6"},{"problem":32,"code":"#(reduce (fn [acc el] (conj acc el el)) [] %)","user":"564faadce4b0284900eef6b2"},{"problem":32,"code":"reduce (fn [newSeq elem] (conj newSeq elem elem)) []","user":"5d662fb5e4b0db5d338d15e1"},{"code":"#(loop [result [] data %1]\n    (if(empty? data)\n    \t(reverse result)\n    (recur \n     (cons (first data)(cons (first data) result))\n     (rest data))\n    ))","problem":32,"user":"4ef87ea7535dced4c769f25f"},{"code":"reduce (fn [cl x] (into cl (repeat 2 x))) []","problem":32,"user":"50c7431ae4b00bb60fe0c531"},{"problem":32,"code":"(fn [s]\n(apply concat (map #(list % %) s)))","user":"56bb652ae4b0f26550335953"},{"problem":32,"code":"(fn duplicate-each [my-seq]\n  (reduce #(conj (conj %1 %2) %2) [] my-seq))","user":"56889672e4b0dcc4269f406c"},{"problem":32,"code":"(fn [l] (mapcat list l l))","user":"5800edaae4b0a837a8b30c48"},{"problem":32,"code":"#(reverse (reduce (fn [l x] (conj l x x)) '() %))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"#(mapcat (fn [x] (list x x)) %)","problem":32,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn\n      [coll]\n      (reduce concat (map #(take 2 (repeat %)) coll)))","problem":32,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":32,"code":"(fn\n  [s]\n  (reduce\n   (fn [acc x]\n     (-> (conj acc x)\n         (conj x)))\n   []\n   s))","user":"59b93cd7e4b0a024fb6ae3c7"},{"code":"(comp reverse (partial reduce #(conj (conj %1 %2) %2) '()))","problem":32,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"#(loop [x % acc []]\n    (if (nil? (seq x))\n      (seq acc)\n      (recur (rest x) (conj (conj acc (first x)) (first x)))))","problem":32,"user":"519dbf26e4b037b32803f9bd"},{"problem":32,"code":"(fn duplicate-seq\n  [seq]\n  (loop [res seq\n         remaining seq]\n    (if (empty? remaining)\n      (sort res)\n      (recur (conj res (first remaining)) (rest remaining)))))","user":"5deeb6fde4b093ff7172759f"},{"problem":32,"code":"reduce (fn [c v] (concat c (list v v)) ) '()","user":"54c779bee4b045293a27f63b"},{"code":"(fn [s]\n  (reduce #(concat %1 [%2 %2]) '() s))","problem":32,"user":"501284d9e4b030d97e4db710"},{"problem":32,"code":"(fn [xs]\n  (mapcat #(list % %) xs))","user":"54ca35c6e4b057c6fda3a254"},{"problem":32,"code":"(fn [x]\n  (let [mappedX (map #(conj '() % %) x)]\n    (reduce concat mappedX)))","user":"58a216e8e4b02bd94d917ed1"},{"problem":32,"code":"(fn [xs]\n  (apply list  (reduce (fn [r x] (conj r x x))\n                 []\n                 xs)))","user":"53b42472e4b047364c0444b2"},{"problem":32,"code":"#(interleave % %)\n;(fn [xs]\n;  (reduce concat\n;          '()\n;          (map #(repeat 2 %) xs)))","user":"57233cc8e4b0c5bde472c0e1"},{"problem":32,"code":"(fn [a] (reverse (reduce #(conj (conj %1 (first %2)) (last %2)) (map #(list %1 %1) a))))","user":"5576e78de4b05c286339e075"},{"problem":32,"code":"mapcat #(sequence [% %])","user":"5be182eae4b0ed4b8aab4c9d"},{"problem":32,"code":"#(mapcat (fn [a] [a, a]) %)","user":"542c56aae4b0dad94371f2a4"},{"code":"(fn [li] (interleave li li))","problem":32,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":32,"code":"(fn [coll]\n  (mapcat identity (for [x coll] (repeat 2 x))))","user":"5c9419fae4b048ec896c5a2b"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [ys x] \n            (conj ys x x))\n          [] xs))","user":"5655d811e4b0f9d632dd849a"},{"problem":32,"code":"(letfn [(f [[x & xs :as xss]]\n           (if (seq xss)\n             (into (f xs) [x x])\n             '()))]\n  f)","user":"540470dae4b0addc1aec6658"},{"code":"#(apply concat (for [x %] (conj () x x)))","problem":32,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [coll]\n  (mapcat\n   #(list % %)\n   coll))","problem":32,"user":"52d5bee0e4b09f7907dd1344"},{"code":"#( loop [x 0,y %,z (count %)]\n      (if (== x z)\n           (subvec y z)\n           (recur (inc x)\n                       (conj y (nth y x) (nth y x))\n                         z)))","problem":32,"user":"51c4690fe4b06b70b3e207e1"},{"problem":32,"code":"(fn [x] (->> x (map #(vec (conj nil % %))) (reduce #(conj %1 (nth %2 0) (nth %2 1)))))","user":"56f5e6d5e4b046a417f92079"},{"code":"reduce (fn [memo, c] (concat memo (list c c))) '()","problem":32,"user":"4e89ddf9535d3e98b8023284"},{"problem":32,"code":"#(apply concat (map vector %1 %1))","user":"56824e1be4b0945ebc182a91"},{"problem":32,"code":"(fn\n [coll]\n (loop [x (first coll)\n        xs (rest coll)\n        result []]\n   (if (= nil x)\n     result\n     (let [a (conj result x)\n           b (conj a x)\n           head (first xs)\n           tail (rest xs)]\n       (recur head tail b)))))","user":"59d77634e4b0ef0a1e9b5c34"},{"problem":32,"code":"(fn [s] (mapcat #(identity (list % %)) s))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn dup [s] (sort-by identity( mapcat identity (take 2(repeat s)))))","problem":32,"user":"5363f11be4b0243289761e5f"},{"problem":32,"code":"(fn dup-seq\n    [s]\n    (interleave s s))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn [xs] (reverse (loop [xxs xs acc nil]\n  (if (empty? xxs) acc\n      (recur (rest xxs) (conj acc (first xxs) (first xxs)))))))","problem":32,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn [x] (apply interleave (repeat 2 x)))","problem":32,"user":"513e9aa0e4b02b2a3d8235c4"},{"code":"(fn dup\r\n      ([s] (if (empty? s)\r\n               nil\r\n               (cons (first s) (dup (rest s) (first s)))))\r\n      ([s n] (cons n (dup s)))\r\n      )","problem":32,"user":"4f3543eee4b0e243712b1ebd"},{"code":"#(loop [result [] in % f (first %)]\n   (if (empty? in)\n     result\n     (recur (concat result (list f f)) (rest in) (first (rest in)))\n     )\n   )","problem":32,"user":"528f4462e4b0239c8a67aef0"},{"problem":32,"code":"(fn [sq] \n  (loop [hed  sq rv '()]\n    (if (empty? hed)\n      rv\n      (recur (drop-last hed) (conj (conj rv (last hed)) (last hed)) ))))","user":"55022275e4b07d26eda61d81"},{"problem":32,"code":"(fn [a-list] (reduce #(concat %1 (repeat 2 %2)) [] a-list))","user":"5978b4c9e4b01722bebd4d13"},{"problem":32,"code":"(fn dupe [col]\n  (if (empty? col)\n    col\n    (cons (first col) (cons (first col) (dupe (rest col))))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn [s] (reduce (fn [acc x] (concat acc [x x])) [] s))","problem":32,"user":"4ea092f4535d7eef308072a6"},{"problem":32,"code":"(fn [n]\n  (reduce concat (map #(take 2 (repeat %)) n)))","user":"562a58e8e4b00e49c7cb4822"},{"code":"(fn [coll]\n  (reverse\n    (reduce #(conj %1 %2 %2) () coll)))","problem":32,"user":"50b0cffae4b009df37c708c5"},{"problem":32,"code":"#(sort (reduce (fn [acc x] (conj acc x x)) () %1))","user":"58b80ec1e4b0ebc645576d89"},{"problem":32,"code":"#(mapcat (fn [item]\n           (repeat 2 item))\n         %)","user":"59ed823ee4b0249b728207a1"},{"problem":32,"code":"#(->> % (map (fn [x] [x x])) (apply concat))","user":"55b39523e4b01b9910ae2973"},{"code":"reduce (fn [a e] (conj a e e)) []","problem":32,"user":"4ed2b168535d44c135fd68dd"},{"problem":32,"code":"(fn [col]\n (apply interleave [col col]))","user":"54f5aa4ce4b0f2f3c5226e94"},{"code":"(fn [x] (apply concat (map #(vector % %) x)))","problem":32,"user":"4dd9d299535d2dad7130b5dd"},{"code":"#(reduce (fn [acc cur] (concat acc (list cur cur))) '() %)","problem":32,"user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn dupe[sequence]\n  (mapcat #(list % %) sequence))","problem":32,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"mapcat #(replicate 2 %1)","problem":32,"user":"514d398ee4b019235f6c0583"},{"code":"(fn [xs]\n  (letfn [(dup [l]\n            (if (empty? l)\n              '()\n              (conj (dup (rest l)) (first l) (first l))))]\n    (dup xs)))","problem":32,"user":"4e667f67535d8ccf87e9fe77"},{"problem":32,"code":"(fn [e] (mapcat #(conj () % %) e))","user":"57047768e4b0b0fb43fd0664"},{"code":"(fn[x](mapcat #(repeat 2 %)x))","problem":32,"user":"4daf29b1edd6309eace4d172"},{"problem":32,"code":"(fn [arr] (interleave arr arr))","user":"556f443be4b09a3098a5251e"},{"problem":32,"code":"(fn [xs]\n  (->> xs\n       (map vector xs)\n       (apply concat)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn [coll]\n  (mapcat (fn [elem] [elem elem]) coll))","problem":32,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":32,"code":"(fn [col]\n\t(apply concat (map #(repeat 2 %) col)))","user":"5d05d005e4b0cc9c915881e6"},{"problem":32,"code":"(fn [s]\n  (loop [rem s\n         acc '()]\n    (if (empty? rem)\n      acc\n      (let [el (first rem)]\n        (recur (rest rem) (concat acc (list el el)))))))","user":"5498e155e4b0b312c081ff86"},{"problem":32,"code":"(fn d-dup [s] (if (empty? s) [] (into [(first s) (first s)] (d-dup (rest s)))))","user":"54750ca3e4b0c51c1f4d7294"},{"problem":32,"code":"(fn [args] \n\t(loop [Sammlung args\n\t\tResult nil]\n\t\t(if (empty? Sammlung)\n\t\t\t(reverse Result)\n\t\t\t(recur (rest Sammlung) \n\t\t\t\t(conj Result (first Sammlung) (first Sammlung))))))","user":"5b35de7be4b02d533a91bb97"},{"problem":32,"code":"(fn[a-list] (interleave a-list a-list))","user":"54f296efe4b024c67c0cf8c8"},{"problem":32,"code":"(fn dup [x]\n  (loop [result [], new-vec x]\n    (if (empty? new-vec)\n      result\n      (recur (conj (conj result (first new-vec)) (first new-vec)) (rest new-vec)) )))","user":"57040195e4b08d47c9778202"},{"problem":32,"code":"(fn dupseq\n  ([out in]\n   (if (empty? in)\n     out\n     (dupseq (concat out [(first in) (first in)]) (rest in))))\n  ([in]\n   (dupseq [] in))\n)","user":"54b2e881e4b09f271ff37d32"},{"problem":32,"code":"(fn gandain [x]\n  (if (empty? x)\n    '()\n    (conj (gandain (rest x)) (first x) (first x))))","user":"593910eae4b02506e01a29f4"},{"code":"(fn [coll]\n  (loop [c coll r []]\n    (if (= [] c) \n      r\n      (recur (rest c) \n        (conj (conj r (first c)) (first c))))))","problem":32,"user":"4f043bbd535dcb61093f6bb2"},{"problem":32,"code":"(fn [a] \n    (reduce \n      #(conj %1 %2 %2) \n      [] \n      a))","user":"58455b05e4b089d5ab817e65"},{"problem":32,"code":"#(->> (map (fn [x] (repeat 2 x)) %)\n      (apply concat))","user":"5711b532e4b09c608db70449"},{"code":"#(mapcat (fn [n] [n n]) %)","problem":32,"user":"4f8dc9dce4b02e764a0a51b6"},{"problem":32,"code":"(fn duplicate \n  ([s]\n   (if (empty? s) '()\n       (duplicate s '())))\n  ([s res]\n   (if (empty? s) (reverse res)\n       (duplicate (rest s) (into res (list (first s) (first s)))))))","user":"57af41bce4b0fbc9809a2731"},{"problem":32,"code":"(fn [coll]\n  \"A function which duplicates each element of a sequence\"\n  (into () (reduce #(conj (conj %1 %2) %2) () coll))\n  )","user":"5ee4b2e6e4b029a2061bbe90"},{"code":"(fn [nums] (mapcat #(repeat 2 %) nums))","problem":32,"user":"51e05dfae4b01188f0627543"},{"code":"(fn [x] (reduce #(concat %1 [%2 %2]) '() x))","problem":32,"user":"50df6dd0e4b061dbdced7225"},{"problem":32,"code":"#(apply concat (map (fn [x] (vector x x)) %1))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":32,"code":"(fn duplicateElements\n  [collection]\n  \"Returns a function which contains two of each element in the given\n  collection, in the same order.\"\n  (mapcat #(conj '() % %) collection))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn [xs] (apply concat (map #(vec [% %]) xs)))","problem":32,"user":"4dfd4ba8535d04ed9115e781"},{"code":"(fn doublre[x]\n  (loop [work x\n         result ()\n         cur (last x)\n         ]\n    (if (not= work [])\n      (recur (pop work) \n             (conj result cur cur)\n             (last (pop work)) ;;i dislike this\n       )\n      ;else\n      result\n      )\n    )\n  )","problem":32,"user":"50fb084ee4b0d10d794c19dd"},{"problem":32,"code":"#(for [x % y (take 2 (repeat x))] y)","user":"54684c3be4b00cfc9eacc139"},{"problem":32,"code":"(fn [l] (-> l\n            (concat l)\n            (sort)\n        ))","user":"58b54852e4b0ebc645576d52"},{"problem":32,"code":"(fn\n  [inp]\n  \n  (loop [val inp\n         outp '()]\n    \n    (if (empty? val)\n      (into '()  outp) \n\n      (recur (rest val)\n             (cons (first val) (cons (first val) outp ) )\n             )\n      \n      ) \n    )  \n  )","user":"56b7c32ee4b0982f16b37e48"},{"problem":32,"code":"(fn foo [xs] (apply concat (map (fn [y] [y y]) xs)))","user":"53e8c684e4b036ad0777e48b"},{"problem":32,"code":"(fn f [lst]\n\t((fn [res l]\n \t (if (empty? l)\n       (reverse res)\n       (recur (conj res (first l) (first l)) (rest l)))) '() lst))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":32,"code":"(fn [items] (reduce #(conj %1 %2 %2) [] items))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":32,"code":"(fn [list] (reduce (fn [x y] (conj x y y)) [] list))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn [the-seq]\n\n(reverse (reduce (fn [contenedor item]\n           (conj (conj contenedor item) item)\n           ) '() the-seq))\n   )","problem":32,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"reduce (fn [item acc] (conj item acc acc)) []","problem":32,"user":"4f29cdc8e4b0d6649770a033"},{"problem":32,"code":"(fn [c] (mapcat #(->[% %]) c))","user":"4e6b8ac8535d8ccf87e9ff19"},{"problem":32,"code":"#(reduce (fn [a x] (reverse (cons x (cons x (reverse a))))) '() %)","user":"51bd78c3e4b0ff155d51d2b0"},{"code":"(fn duplicate-members [s]\n  (let [this (first s)\n        remaining (next s)]\n    (if (not (seq remaining))\n      [this this]\n      (lazy-seq \n        (concat\n          [this this]\n          (duplicate-members remaining))))))","problem":32,"user":"4e584256535d8a8b8723a28e"},{"problem":32,"code":"(fn dup [xs & {:keys [dub] :or {dub '()}}] (if (empty? xs) dub (dup (pop xs) :dub (cons (peek xs) (cons (peek xs) dub)))))","user":"583a360de4b089d5ab817d4f"},{"problem":32,"code":"(fn [vect]\n  (reduce\n    (fn [v el]\n      (cons el (cons el v))\n    )\n    '()\n    (reverse (vec vect))\n  )\n)","user":"5726adf8e4b0c5bde472c12b"},{"code":"(fn [list]\n  (loop [res [] list list]\n    (if (empty? list)\n      res\n      (recur (conj res (first list) (first list)) (rest list)))))","problem":32,"user":"522f988be4b032bbe3424168"},{"problem":32,"code":"(fn [x] (loop [remaining x out []] (if (empty? remaining) out (recur (rest remaining) (conj out (first remaining) (first remaining))))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":32,"code":"(fn  [xs] (reduce #(conj %1 %2 %2) [] xs))","user":"5beadeb5e4b0f319e2d7ec88"},{"problem":32,"code":"(fn [coll] (apply concat (map #(concat [% %]) coll)))","user":"54361d92e4b032a45b8692f7"},{"problem":32,"code":"#(mapcat (fn [ele] (conj [ele] ele)) %)","user":"5e259d05e4b05b4b01516169"},{"problem":32,"code":"(fn [arr] (loop [_arr arr\n                 result []]\n            (if (empty? _arr)\n              (reverse (apply concat result))\n              (recur (rest _arr) (cons (repeat 2 (first _arr)) result)))))","user":"5b611666e4b0c6492753e70d"},{"code":"(fn duplicate-a-sequence3 [coll] (if (empty? coll) \n                                     '() \n                                    (let [f (first coll)] (conj (duplicate-a-sequence3 (rest coll)) f f))))","problem":32,"user":"52c00e4fe4b07a9af5792342"},{"code":"(fn [xs] (reduce (fn [acc l] (concat acc l)) '() (map #(list % %) xs)))","problem":32,"user":"4ddbd934535d02782fcbe9fc"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc val] (into acc [val val])) [] coll))","user":"58c7131be4b021aa9917ed6d"},{"problem":32,"code":"(fn [x] (sequence (reduce (fn [ys y] (conj ys y y)) [] x)))","user":"582835cbe4b051871117bf30"},{"code":"(fn dup-seq [[f & r :as S]]\n  (if (seq S)\n    (cons f (cons f (dup-seq r)))\n    '()))","problem":32,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn [xs] (reduce (fn [accum, x] (conj accum x x)) [] xs))","problem":32,"user":"52ab51c4e4b0c58976d9ac73"},{"code":"(fn dup [s]\n  (if (empty? s)\ns\n(conj (dup (rest s)) (first s) (first s))\n))","problem":32,"user":"4fcebce4e4b03432b189f404"},{"problem":32,"code":"#(reduce concat(map vector % %))","user":"53c0bc5fe4b00fb29b221257"},{"problem":32,"code":"(fn [lista]\n   (mapcat (fn [elementoLista] (repeat 2 elementoLista)) lista))","user":"59e63a2ce4b08badc2a0c569"},{"code":"(fn [y] (reduce concat (map (fn [x] (list x x)) y)))","problem":32,"user":"504e8e48e4b069badc5a33b3"},{"problem":32,"code":";(fn [x] (reverse (reduce (fn [acc el] (conj acc el el)) '() x)))\n(fn [x] (interleave x x))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":32,"code":"reduce (fn [xs c] \n         (conj xs c c))\n\t\t[]","user":"5c387c51e4b0d62ef62d9f83"},{"code":"(fn v [l] (if (= (count l) 1) (cons (first l) l) (cons (first l)(cons (first l) (v (rest l))))))","problem":32,"user":"510931ede4b0c71f76895663"},{"problem":32,"code":"(fn [x] (loop [data x result ()]\n          (if-not (first data)\n            (reverse result)\n            (recur (rest data) (concat (repeat 2 (first data)) result)))))","user":"567f034be4b0feffd0d18eba"},{"problem":32,"code":"(fn [xs] (mapcat vector xs xs))","user":"5c6448d6e4b0fca0c1622674"},{"code":"(fn [s] (mapcat identity\n    (map (fn [x] (cons x (cons x '()))) s)))","problem":32,"user":"504e685fe4b0f6ff3350c4ae"},{"code":"(fn dup-each [lst]\n  (if (empty? lst)\n    '()\n    (cons (first lst) (cons (first lst) (dup-each (rest lst))))))","problem":32,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":32,"code":"(fn [s]\n  (loop [coll []\n         remaining s]\n    (if (empty? remaining)\n      coll\n      (let [val (first remaining)]\n        (recur (conj coll val val) (rest remaining))\n        ))))","user":"545b0275e4b01be26fd74648"},{"problem":32,"code":"(fn duplicate [x] (apply concat (map #(cons % (list %)) x)))","user":"53b12c76e4b047364c04448a"},{"code":"(fn derp [sequence]\n  (loop [my-col '()\n         their-seq sequence]\n    (if (empty? their-seq)\n      (reverse my-col)\n      (recur\n        (conj my-col (first their-seq) (first their-seq))\n        (rest their-seq)))))","problem":32,"user":"4f5576c2e4b0a7574ea71801"},{"code":"(fn this [v]\n  (if (= (count v) 0)\n    '()\n    (conj (conj (this (rest v))\n                (first v)\n           )\n     (first v))))","problem":32,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":32,"code":"(fn double-seq\n  [col]\n  (->> col\n       (map vector col)\n       (apply concat)))","user":"5ff454a1e4b05ac5b16ea20d"},{"code":"(fn double [s]\n  (if (empty? s)\n    '()\n    (cons (first s) (cons (first s) (double (rest s))))))","problem":32,"user":"4ff3e771e4b0678c553fc356"},{"problem":32,"code":"(fn dup [coll]\n  (loop [in coll\n         out '()]\n    (if (empty? in)\n      (reverse out)\n      (recur\n       (rest in)\n       (conj out (first in) (first in))))))","user":"5ae7691ae4b0837691e92caa"},{"code":"reduce (fn [xs x] (conj xs x x)) []","problem":32,"user":"51db1abae4b094966a2cd685"},{"problem":32,"code":"(fn a [x] \n  (reverse \n   (reduce #(cons %2 (cons %2 %1)) '() x)\n  )\n)","user":"54c6619ae4b045293a27f62b"},{"problem":32,"code":"(fn [sq] (interleave sq sq))","user":"54b83ae9e4b0ed20f4ff6e95"},{"problem":32,"code":"(fn [input]\n  (loop [i input\n         o (list)]\n    (if (empty? i)\n      o\n      (let [f (last i)]\n        (recur (butlast i) (-> o (conj f) (conj f)))))))","user":"54cbd6bae4b057c6fda3a282"},{"problem":32,"code":"#(reduce (fn [v new] (conj v new new)) [] %)","user":"5c10e7a2e4b01240ff56716b"},{"problem":32,"code":"(fn duplicate-sequence\n  [seq]\n  (reverse (reduce (fn [res el] (conj res el el)) '() seq)))","user":"57a6ad79e4b0a9660795620b"},{"problem":32,"code":"#(reduce (fn [x y]\n              (conj x y y)) [] %)","user":"5bc64843e4b07a9b28b10091"},{"problem":32,"code":"#(reduce\n  (fn [k x]\n    (conj k x x))\n  [] %)","user":"56e6d049e4b02e7e935eb6cd"},{"problem":32,"code":"(fn [coll] (reverse(reduce #(cons %2 (cons %2 %1)) '() coll)))","user":"5526383ee4b0ffed3738f917"},{"problem":32,"code":"#(apply concat (map (fn [e] (list e e))%))","user":"6037e468e4b0d5df2af222e8"},{"problem":32,"code":"(fn [x]\n  (reverse (reduce (fn [acc n] \n            (conj (conj acc n) n)) \n          '() x)))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":32,"code":"(fn [x] \n\t(reverse(reduce #(cons %2 (cons %2 %1)) '() x))\n)","user":"55b60518e4b01b9910ae298e"},{"problem":32,"code":"(fn [y] (mapcat (fn [x] (repeat 2 x)) y))","user":"5509b434e4b06e50f9beb11e"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [r y]\n          (conj (conj r y) y)) [] x))","user":"56171eade4b06b1bb2182a0c"},{"problem":32,"code":"(fn [v]\n  (reduce concat (map #(vector % %) v)))","user":"5b2a559be4b063e2438bcc74"},{"code":"(fn [coll]\n    (mapcat #(list % %) coll))","problem":32,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [coll]\n  \"Duplicates each element of a sequence\"\n  (loop [acc [] c coll]\n    (let [p (first c)]\n      (if (nil? p)\n    acc\n    (recur (conj acc p p) (rest c))))))","problem":32,"user":"52342722e4b07e3ee2be83c0"},{"problem":32,"code":"#(reduce (fn [acc x] (into acc (repeat 2 x))) [] %)","user":"5cf935f4e4b0b71b1d808a8f"},{"problem":32,"code":"#(->> % reverse (reduce (fn [a e] (->> a (cons e) (cons e))) nil))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":32,"code":"(fn [se]\n    (apply concat\n    (map \n         (fn [x] [x x]) se)\n    )\n)","user":"5e23ca7fe4b05b4b01516144"},{"code":"(fn [lista]\n    (letfn [\n            (duplicar [lista1 contador lista2]\n                     (\n                      cond\n                          (= '() lista1) (reverse lista2)\n                          (= 0 contador) (duplicar (rest lista1) 2 lista2)\n                          :default (duplicar lista1 (- contador 1) (cons (first lista1) lista2 ))\n                       )\n              )\n           ]\n           (duplicar lista 2 '())\n      )\n\n  )","problem":32,"user":"5058afbbe4b06522596eba81"},{"code":"(fn [ x ] (mapcat #(list % %) x))","problem":32,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn dupe [s]\n     (let [x  (first s)\n           xs (rest s)]\n       (if (empty? s)\n         []\n         (concat [x x] (dupe xs)))))","problem":32,"user":"4e5676b2535d8a8b8723a282"},{"code":"(fn [S] (reduce concat (map #(repeat 2 %1) S )))","problem":32,"user":"4eef1164535d305ff5cb7f19"},{"problem":32,"code":"(fn [sequen]\n  (->> sequen\n       (mapcat #(vector % %))))","user":"5422c959e4b01498b1a71ac7"},{"code":"(fn [s]\n  (sort (concat s s)))","problem":32,"user":"524ab5f2e4b09eba1c02239d"},{"code":"(fn [seq] \r\n  (reduce #(conj %1 %2 %2) [] seq))","problem":32,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":32,"code":"#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (rest x) (conj y (first x) (first x)))))","user":"570362ece4b08d47c97781f0"},{"problem":32,"code":"(fn [a-seq]\n  (reduce (fn [acc x]\n            (conj acc x x))\n          []\n          a-seq))","user":"574e84e0e4b02ea114799243"},{"problem":32,"code":"#(seq (mapcat (fn [x] (cons x (cons x '()))) %))","user":"56d902c3e4b0ea9b8538f7ed"},{"problem":32,"code":"(fn duplicate-seq [seq]\n  (if (empty? seq)\n    []\n    (cons (first seq) (cons (first seq) (duplicate-seq (rest seq))))))","user":"55fb5b89e4b0f488688e0662"},{"problem":32,"code":"(fn [s]\n    (mapcat #(vector % %) s))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":32,"code":"(fn duplicate [x]\n  (mapcat #(repeat 2%) x)\n  )","user":"5ac74b34e4b0e27600da777f"},{"problem":32,"code":"#(reduce \n   (fn [r n] \n     (conj (conj r n) n)\n     )\n   '[] %\n   )","user":"5d5b2678e4b06a698e928ee2"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s) nil\n    (conj (dup (rest s)) (first s) (first s))))","user":"567debb5e4b05957ce8c61ce"},{"code":"(fn dup [s]\n  (loop [source s\n         dest []]\n    (if (empty? source)\n      dest\n      (recur (rest source) (conj dest (first source) (first source))))))","problem":32,"user":"53710c09e4b0fc7073fd6ea5"},{"code":"(fn [xs] (reduce #(conj %1 %2 %2) (cons [] xs)))","problem":32,"user":"5050b107e4b063148f524126"},{"problem":32,"code":"#(reduce (fn [acc i] (conj acc i i))\n          [] %)","user":"5508a292e4b06e50f9beb10f"},{"code":"(fn dup-coll [coll]\n  (loop [single coll double '()]\n    (if (empty? single)\n      (reverse double)\n      (recur (rest single)\n             (cons\n              (first single)\n              (cons (first single) double)))\n      )\n    )\n  )","problem":32,"user":"4ebc64db535dfed6da9c6d82"},{"code":"(fn ! [x]\n  (if (empty? x)\n    '()\n    (let [y (first x) z (! (rest x))]\n      (concat [y y] z))))","problem":32,"user":"52faec2ee4b047fd55837004"},{"problem":32,"code":"(fn [x] (mapcat (fn [i] (vector i i)) x))","user":"549a1fede4b0f3d1d8e70f6a"},{"code":"(fn [coll] (reverse (reduce #(conj %1 %2 %2) () coll)))","problem":32,"user":"4f031eac535dcb61093f6a67"},{"problem":32,"code":"(fn duplicate-sequence\n  [coll]\n  (let [result []]\n    (seq (reduce #(into %1 ((fn [x] [x x]) %2)) result coll))))","user":"57d174ede4b0bd073c20236c"},{"problem":32,"code":"(fn dup [l]\n  (mapcat (fn [x] [x x]) l))","user":"56069006e4b08b23635d3174"},{"code":"(partial \n (fn [acc coll]\n   (if (nil? coll)\n     (reverse acc)\n     (recur (conj acc (first coll) (first coll)) (next coll))\n   )\n ) '()\n)","problem":32,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn[x]\n  (mapcat (partial repeat 2) x))","problem":32,"user":"500b61b1e4b03d00572d2d81"},{"problem":32,"code":"(fn [q] (reduce (fn [acc s](conj acc s s)) [] q))","user":"571edeeae4b0145328a7629b"},{"code":"(fn [x] (reduce #(concat %1 (repeat 2 %2)) '() x))","problem":32,"user":"4fa0b333e4b0dcca54ed6d50"},{"problem":32,"code":"(fn [s](apply concat (#(map list % %) s)))","user":"608335a4e4b0736b099e42e3"},{"code":"(fn [lst]\n          (loop [l lst\n                 acc '()]\n            (if (empty? l) (reverse acc)\n                (recur (rest l) (conj acc (first l) (first l))))))","problem":32,"user":"4eaa47bc535d7eef30807309"},{"problem":32,"code":"(fn \n  [lst] \n  (interleave lst lst))","user":"57f81532e4b0d3187e900914"},{"code":"(fn [coll] \n  (mapcat (fn [x] (list x x)) coll))","problem":32,"user":"527c166de4b03e8d9a4a75b3"},{"problem":32,"code":"(fn [sq]\n   (let [dup (fn [s acc]\n               (if (empty? s) (reverse acc)\n                 (recur (rest s) (cons (first s) (cons (first s) acc)))))]\n     (dup sq '())))","user":"57780e4fe4b0979f89651657"},{"code":"(fn [l] (reduce (fn [x y] (conj x y y)) [] l))","problem":32,"user":"504e7b88e4b069badc5a33ad"},{"problem":32,"code":"(comp reverse (fn [v] \n  (loop [s v l '()]\n    (if (empty? (rest s))\n      (conj l (first s) (first s))\n      (recur (rest s)  (conj l (first s) (first s)))))))","user":"5fa2b45ce4b0f0ebd91b77f5"},{"problem":32,"code":"(fn [x]\n  (loop [coll x\n         acc []]    \n   (if (empty? coll)\n     acc\n     (recur (rest coll) (conj acc (first coll) (first coll)))\n   )\n  )\n)","user":"5877e40ee4b01531a375eaab"},{"code":"(fn [x] (mapcat (fn [y] (repeat 2 y)) x))","problem":32,"user":"4e3000c8535deb9a81d77f13"},{"problem":32,"code":"(fn dup-seq\n  [coll]\n  (apply concat (map (partial repeat 2) coll)))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [lst]\n  (reduce #(cons %2 (cons %2 %1))\n          nil\n          (reverse lst)))","problem":32,"user":"531bad96e4b08068f379ed93"},{"problem":32,"code":"(fn duplicate-seq [s]\n\t(reduce (fn [l e]\n              (concat l (repeat 2 e)))\n            []\n            s))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"(fn dupl [col]\n  (if (empty? col)\n    '()\n    (let [current (first col)]\n      (conj (conj (dupl (rest col)) current) current))))","problem":32,"user":"4ea01955535d7eef3080729f"},{"problem":32,"code":"(fn [s]\n  (loop [remaining s, dup true, result (vec '())]\n    (if (empty? remaining)\n      (seq result)\n      (if (true? dup)\n        (recur remaining false (conj result (first remaining)))\n        (recur (rest remaining) true (conj result (first remaining)))))))","user":"55597fcce4b0deb715856e37"},{"problem":32,"code":"(fn [coll] (reduce into [] (map #(vector % %) coll)))","user":"5d887d27e4b0915913b1d3a8"},{"problem":32,"code":"(fn duplicate-each [col] \n  (apply concat (for [el col] [el el])))","user":"58c5a08be4b021aa9917ed40"},{"problem":32,"code":"mapcat #(conj [] %1 %1)","user":"553093bee4b076ab5578f817"},{"problem":32,"code":"(partial mapcat (fn [x] (list x x)))","user":"551e8627e4b08d5046aa8a45"},{"code":"reduce (fn [accum val] (sort (conj accum val val))) ()","problem":32,"user":"4f51697ae4b03ad3f0c10d22"},{"code":"#(let [x %] (mapcat list x x))","problem":32,"user":"52a3c66ce4b04e0c58e87c04"},{"problem":32,"code":"(fn try2\n  [coll]\n  (loop [cont 0 new-col []]\n    (if (< cont (count coll))\n      (recur (inc cont) (conj (conj new-col (coll cont)) (coll cont)))\n      new-col)))","user":"5adbbf89e4b0837691e92bf4"},{"code":"(fn [s] (apply concat (map vector s s) ) )","problem":32,"user":"53852e84e4b06839e8705efd"},{"code":"(fn dupl [coll]\n    (interleave (seq coll) (seq coll))\n  )","problem":32,"user":"531843c1e4b08068f379ed6c"},{"problem":32,"code":"(fn [l] \n  (loop [in l result l]\n  \t(if (empty? in)\n     \t(sort result)\n \t\t(recur (rest in) (conj result (first in))))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"problem":32,"code":"(fn [y] (loop [x (seq y) z '()]\n          (if (empty? x)\n            (reverse z)\n            (recur\n             (rest x)\n             (conj (conj z (first x)) (first x))\n          )\n            ))\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"problem":32,"code":"#(loop [items %1 acc []]\n   (if (= 0 (count items)) acc\n     (recur (rest items) (conj acc (first items) (first items)))))","user":"58a31ecee4b02bd94d917ee7"},{"problem":32,"code":"(fn [coll] (mapcat #(identity [%1 %1]) coll))","user":"60b5fa96e4b0e0fa5f1b4242"},{"code":"(partial reduce (fn [a b] (conj a b b)) [])","problem":32,"user":"519e70d5e4b0acf32bc6a42c"},{"problem":32,"code":"(fn [res arr] (if (empty? arr) (list* res) (recur (conj res (first arr) (first arr)) (rest arr)))) []","user":"5b5f2566e4b0c6492753e6e9"},{"problem":32,"code":"(fn [s] (reverse (reduce (fn [r x] (conj (conj r x) x)) () s)))","user":"5a0ba67be4b04bbd27e6d997"},{"code":"(fn x [s]\n  (if (empty? s)\n    '()\n    (cons\n     (first s)\n     (cons\n      (first s)\n      (lazy-seq (x (rest s)))))))","problem":32,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"#(apply interleave (replicate 2 %))","problem":32,"user":"514b66f4e4b0bd81940b86cb"},{"problem":32,"code":"(fn [arr]\n  (mapcat #(repeat 2 %) arr))","user":"5bcdb877e4b0e9689409ee02"},{"problem":32,"code":"(fn [coll]\n  (reverse\n(reduce #(cons %2 (cons %2 %1)) '() coll)))","user":"57e016dce4b0bd073c202470"},{"problem":32,"code":"#(reduce (fn [col el]\n          (concat col (repeat 2 el)))\n        '()\n        %)","user":"5cc7073de4b0ccb06196282e"},{"code":"(fn [x] (apply concat (map #(vec [% %]) x)))","problem":32,"user":"4e6ed7e4535d5021c1a89613"},{"problem":32,"code":"(fn dup [seq] \n           (if (empty? seq)\n             seq\n             (concat (list (first seq) (first seq)) (dup (rest seq)))))","user":"5a813b90e4b00b71e582a065"},{"problem":32,"code":"(fn dup [l] \n   (-> l\n   \t((fn d [coll acc] \n      (cond \n        (empty? coll) acc\n        :else (d (rest coll) (conj acc (first coll) (first coll))))) '())\n   \t(reverse)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":32,"code":"#(->> % (mapcat (partial repeat 2)))","user":"59738d98e4b01722bebd4ca1"},{"problem":32,"code":"(fn\n  [coll]\n  (loop [coll coll \n         acc '()]\n    (if (= 0 (count coll)) acc\n      (recur (drop-last coll) (conj (conj acc (last coll)) (last coll))))))","user":"53cbe808e4b00fb29b2212d4"},{"problem":32,"code":"(fn [x]\n  (loop [in x\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj (conj out (first in)) (first in))))))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn ! [coll]\n(when-let [s (seq coll)]\n  (concat (cons (first s) (list (first s)))  (! (rest s)))))","problem":32,"user":"4f1d1299535d64f603146487"},{"code":"(fn dup-list [coll]                                                           \n  (when-let [[f & r] (seq coll)]                                                \n    (cons f (cons f (dup-list r)))))","problem":32,"user":"4f625f68e4b0defedf855fd2"},{"problem":32,"code":"(fn dup [coll] (reduce #(conj %1 %2 %2) [] coll))","user":"578d459ee4b0ebec4cfb7567"},{"problem":32,"code":"(fn dup-seq [coll]\n  (interleave coll coll))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":32,"code":"(fn [coll] (mapcat #(conj (conj '() %) %) coll))","user":"5382b433e4b06839e8705ed7"},{"problem":32,"code":"#(loop [in % out []]\n   (let [x (first in) xs (rest in)]\n   (if (empty? in)\n     (seq out) \n     (recur xs (conj (conj out x) x)))))","user":"5895385fe4b00487982d5279"},{"problem":32,"code":"#(loop [s %1 r []]\n   (if (= s ())\n     r\n     (recur \n      (drop 1 s) \n      (conj r \n            (first s) \n            (first s)))))","user":"545ded41e4b01be26fd74678"},{"code":"(fn [m]\n  ((fn iter [l m]\n    (if (= (count m) 0)\n      l\n      (iter (conj l (first m) (first m)) (rest m)))) [] m))","problem":32,"user":"517531c6e4b07031762f2eea"},{"problem":32,"code":"(fn [col]\n   (reduce #(concat %1 [%2 %2]) [] col))","user":"60537cd1e4b04c8f2157d152"},{"problem":32,"code":"(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n  \t(let [[head & tail] coll]\n    \t(cons head (cons head (duplicate tail))))))","user":"5bc8e91ee4b07a9b28b100ce"},{"problem":32,"code":"(fn [x] (reduce concat (map (fn[y] (vector y y)) x)))","user":"53ad28ede4b047364c044462"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [rs y] (concat rs [y y])) '() xs))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn [values] (sort(into values values)))","problem":32,"user":"50621cbde4b0341461c88951"},{"problem":32,"code":"#(mapcat (fn [x] `(~x ~x)) %)","user":"5cce7de4e4b0ccb0619628b7"},{"code":"(fn [coll]\n  \"32. Write a function which duplicates each element of a sequence.\"\n  (mapcat (fn [x] [x x]) coll))","problem":32,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":32,"code":"(fn my-dupl [xs] \n    (loop [xs xs acc []]\n      (if (empty? xs) acc\n      (recur (rest xs) (conj (conj acc (first xs) ) (first xs)))\n      )))","user":"5f82cfcce4b0c071e6c840fb"},{"problem":32,"code":"(fn me [coll]\n  (if \n    (empty? coll)\n    coll\n    (conj (me (rest coll)) (first coll) (first coll))))","user":"55f03fb5e4b06e875b46ce1f"},{"code":"(fn dup [sq] (let [[fst & rst] sq]\n           (when fst\n             (cons fst (cons fst (dup rst))))))","problem":32,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":32,"code":"(fn duplicate\n  ([col] (duplicate col []))\n  ([col dup]\n   (if (empty? col)\n     dup\n   (duplicate (rest col) (conj dup (first col) (first col))))))","user":"5d06499ae4b0cc9c915881ec"},{"code":"(fn [x] (reduce concat [] (map #(vec [% %]) x)))","problem":32,"user":"521249f5e4b06aa6d1666ba2"},{"code":"(fn replic\n  [sq]\n  (apply concat (map #(repeat 2 %) sq)))","problem":32,"user":"504e12ade4b078edc5f593b7"},{"problem":32,"code":"(fn [li] (apply concat (map #(list % %) li)))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [xs]\n  (mapcat #(identity [%1 %1]) xs))","problem":32,"user":"4e6a2e83535d8ccf87e9fea7"},{"problem":32,"code":"reduce (fn [itog ss] (conj itog ss ss)) []","user":"5f27f180e4b033932238a648"},{"problem":32,"code":"#(loop [[element & other] % result nil]\n  (if (nil? element)\n    result\n    (recur other (concat result [element element]))))","user":"55d354e0e4b0e31453f64a62"},{"problem":32,"code":"(fn [x]\n   (mapcat concat (map #(let [y %] [y y]) x))\n   )","user":"5c665311e4b0fca0c16226a7"},{"code":"#(loop [x % y %]\r\n  (if (empty? y)\r\n\t(sort x)\r\n\t(recur (conj x (first y)) (rest y))))","problem":32,"user":"5018eb4ee4b011a2e0bf6411"},{"problem":32,"code":"(fn [coll]\n  (->> coll\n       (concat coll)\n       (sort)))","user":"57eb2576e4b0bfb2137f5b5c"},{"problem":32,"code":";(fn dup [s]\n;  (if (empty? s) '()\n;  (cons (first s) (cons (first s) (dup(rest s))))))\n\n;#(mapcat list % %)\n\n#(interleave % %)","user":"55e1fc42e4b050e68259b424"},{"code":"mapcat #(list % % )","problem":32,"user":"4f83ee95e4b033992c121c26"},{"problem":32,"code":"(fn[s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (conj (conj res (first s)) (first s)))\n    res)))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn [s]\n    (reduce #(conj %1 %2 %2) [] s))","problem":32,"user":"53489329e4b084c2834f4a5b"},{"problem":32,"code":"(fn myfn [x]\n  (reverse (reduce\n    (fn [a y]\n      (conj a y y))\n    () x)))","user":"56b280e3e4b0982f16b37e06"},{"code":"(fn [x] (reduce #(conj % %2 %2) [] x))","problem":32,"user":"50baa66be4b03e68e4411c94"},{"code":"(fn dup [seq]\n   (mapcat (fn [val] (conj '() val val)) seq)\n  )","problem":32,"user":"511d4a52e4b022853b0e07a1"},{"problem":32,"code":"(fn my-duplicate\n  [l]\n  (if (empty? l)\n    (empty l)\n    (conj (my-duplicate (rest l)) (first l) (first l))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":32,"code":"mapcat (partial replicate 2)","user":"5703a557e4b08d47c97781f4"},{"code":"(fn\n    [s]\n    (interleave s s))","problem":32,"user":"52a7634ae4b0c58976d9ac16"},{"problem":32,"code":"reduce (fn [r v] (conj r v v)) []","user":"554d04bbe4b0a04f792995b4"},{"problem":32,"code":";#(mapcat list % %)\n;#(apply interleave (repeat 2 %))\n;;#(mapcat (partial repeat 2) %)\n#(interleave % %)","user":"57ee42c4e4b0bfb2137f5bb1"},{"code":"(fn dup [xs] (mapcat #(vec [%1 %1]) xs))","problem":32,"user":"52bf8e35e4b07a9af579233a"},{"code":"(fn duplicate [x]\n     \"Adds a copy of each element of the sequence.\"\n     (interleave x x))","problem":32,"user":"532727bae4b09d4e7a9b54fa"},{"problem":32,"code":"mapcat (fn [x] (replicate 2 x))","user":"5addadfce4b0837691e92c13"},{"code":"(fn [xs] (mapcat #(repeat 2 %) xs))","problem":32,"user":"504e13fce4b078edc5f593bc"},{"problem":32,"code":"(fn duplicate [xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))","user":"54aec1b6e4b09f271ff37cf6"},{"problem":32,"code":"(fn [list] (interleave list list)) ;-- https://clojuredocs.org/clojure.core/interleave","user":"548018cde4b0c51c1f4d7325"},{"problem":32,"code":"#(apply concat (map (fn[el] (vector el el)) %))","user":"575ddfd1e4b02ea11479938d"},{"problem":32,"code":"(fn Duplicate-a-sequence\n  [coll]\n  (sort (take (* 2 (count coll))(cycle coll))))","user":"608c270ae4b03bd49d9f36b3"},{"problem":32,"code":"(fn [xs]  (apply concat (reduce conj [] (map (fn [x] [x x]) xs))))","user":"5d84545ee4b0915913b1d38b"},{"code":"(fn duplicate [x]\n  (loop [orig x\n         new []]\n    (cond (empty? orig) (into '() new)\n          :else (recur (rest orig) (cons (first orig) (cons (first orig) new))))))","problem":32,"user":"5383ee9ee4b06839e8705eeb"},{"code":"reduce (fn [acc i] (conj acc i i)) []","problem":32,"user":"51b6f4f9e4b04fc00976d479"},{"code":"(fn [x] (for [i x j '(1 2)] i))","problem":32,"user":"52f9ce6de4b047fd55836ff0"},{"problem":32,"code":"#(reverse (loop [result '()\n       input %]\n   (if (empty? input) result\n     (recur (conj (conj result (first input)) (first input)) (rest input)))))","user":"56671a4de4b04acd4f672dca"},{"code":"(fn [col]\n  (reduce concat (map (fn [a] (list a a)) col)))","problem":32,"user":"51f8e057e4b09be9c177e53d"},{"problem":32,"code":"(fn duplicate [xs]\n  (if (empty? xs)\n    xs\n    (conj (duplicate (rest xs)) (first xs) (first xs))))","user":"54fd93bbe4b07d26eda61d36"},{"problem":32,"code":"#(reduce \n  (fn [a i]\n    (apply conj a (repeat 2 i)))\n  [] %)","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"reduce (fn [x y] (conj x y y)) '[]","problem":32,"user":"4f748b54e4b044e54cd9a8fa"},{"code":"(fn f [x]\n  (cond\n   (= (count x) 0) '()\n   (= (count x) 1) (list (first x) (first x))\n   true (conj (conj (f (rest x)) (first x)) (first x))))","problem":32,"user":"52d7b0ade4b09f7907dd137c"},{"code":"#(mapcat (fn [v] (take 2 (repeat v))) %)","problem":32,"user":"4ee868be535d93acb0a6687d"},{"problem":32,"code":"(fn duplicate-sequence [x]\n   (sort (reduce #(conj (conj %1 %2) %2) '() x)))","user":"5e595637e4b027a2e10ac10e"},{"problem":32,"code":"#(loop [result [] remaining %]\n   (if (empty? remaining) result\n     (let [value (first remaining)]\n       (recur (conj result value value) (rest remaining)))))","user":"57168db0e4b07c98581c3afc"},{"code":"(fn [s] (reduce (fn [mem e] (conj mem e e)) [] s))","problem":32,"user":"5207d70ae4b03bd50ef54675"},{"problem":32,"code":"reduce (fn [m l]  (conj m l l) ) []","user":"5587d8b3e4b059ccff29b1e8"},{"problem":32,"code":"(fn [list] (reduce #( -> (conj %1 %2 %2)) [] list))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":32,"code":"reduce\n  (fn [c i]\n    (conj c i i))\n  []","user":"5ebff55de4b00a66d4a95286"},{"problem":32,"code":"(fn dup [l]\n  (cond\n   (seq l) (cons (first l)\n                 (cons (first l)\n                       (dup (rest l))))\n   :else '()))","user":"54383fd6e4b032a45b869312"},{"code":"#(loop[lst % nst nil]\n   (if (nil? lst) nst\n     (recur (next lst) (concat (concat nst (list (first lst))) (list (first lst))))))","problem":32,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":32,"code":"#(reduce (fn [r l] (cons l (cons l r)))\n         '()\n         (reverse %))","user":"59b71b4fe4b05c620303ca3d"},{"problem":32,"code":"(fn [coll]\n  (mapcat (fn [v] (list v v)) coll))","user":"55074092e4b021ccfedb96a4"},{"problem":32,"code":"(fn [coll]\n  (apply concat\n         (map (partial repeat 2) coll)))","user":"5ffd3422e4b074f607df65f7"},{"problem":32,"code":"(fn [lst] (reduce concat (map #(list % %) lst)))","user":"5bbbce0ee4b0a20761a2360d"},{"code":"(fn [xs]\n  (sort (take (* 2 (count xs)) (cycle xs))))","problem":32,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn dup [coll]\n  (if (empty? coll)\n    '()\n    (let [f (first coll)]\n      (conj (dup (rest coll)) f f))))","problem":32,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":32,"code":"(fn dup [l] (\n                reduce (fn [a b] (conj a b b) ) [] l\n                       ))","user":"5afc115de4b0cc2b61a3bcff"},{"code":"#(loop [s (reverse %) e '() c false]\r\n  (if (empty? s) e \r\n    (recur \r\n      (if c (rest s) s)\r\n      (conj e (first s)) \r\n      (not c))))","problem":32,"user":"4dee4a9c535d08e6dec9fe11"},{"code":"#(loop [col %1 result ()]\n         (if (empty? col)\n           result\n           (recur (rest col) (concat  result (list (first col)(first col))))))","problem":32,"user":"518ccf6be4b05e6c8537e386"},{"problem":32,"code":"(fn [v]\n   (reduce #(conj %1 %2 %2) [] v))","user":"53fcd574e4b0de5c418485d9"},{"problem":32,"code":"#(reverse (reduce (fn [v t](conj v t t)) '() %))","user":"552f6e8ee4b076ab5578f802"},{"problem":32,"code":"(fn dupli [in]\n  (let [f (first in)\n        n (next in)]\n    (if n\n      (cons f (cons f (dupli n)))\n      (cons f [f]))))","user":"5b107263e4b0cc2b61a3be22"},{"problem":32,"code":"#(mapcat\n   (fn [x]\n     (list x x))\n      % )","user":"594c1baae4b07ddc2dafae59"},{"problem":32,"code":"(fn [xs] \n  (reduce #(concat %1 [%2] [%2]) [] xs)\n)","user":"570d0548e4b0b0fb43fd06d2"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc n] (conj acc n n)) [] coll))","user":"5d4f21f3e4b0776584bd6f4e"},{"problem":32,"code":"#(loop [[head & tail] %\n        res []]\n   (if (empty? tail)\n     (conj (conj res head) head)\n     (recur tail (conj (conj res head) head))))","user":"542ce413e4b0dad94371f2ae"},{"problem":32,"code":"(fn [arg]\n  (reverse (reduce (fn [col el]\n                    (conj col el el)) '() arg)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [coll] (sort(concat coll coll)))","problem":32,"user":"5227dc28e4b0186687e23a5b"},{"problem":32,"code":"(fn [col] (apply concat (map (fn [a] [a a]) col)))","user":"54580586e4b01be26fd74616"},{"code":"reduce\n#(conj (conj % %2) %2)\n[]","problem":32,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":32,"code":"(fn [xs]\n  (loop [acc [] ys xs]\n    (if (empty? ys) acc\n      (let [y (first ys)]\n        (recur (conj acc y y) (rest ys))))))","user":"5a03652ae4b01bb0ae8afd83"},{"problem":32,"code":"(fn duplicate\n  [xs]\n  (apply concat (map (fn [x] (list x x)) xs)))","user":"5c222b7de4b07e362c230588"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll\n         dupe-coll []]\n    (if (seq coll)\n      (recur (rest coll)\n             (conj (conj dupe-coll (first coll)) (first coll)))\n      dupe-coll)))","user":"583e02fce4b089d5ab817da5"},{"code":"#(reduce (fn [accum x]\n          (conj (conj accum x) x))\n        [] %)","problem":32,"user":"52fbc44be4b047fd55837010"},{"problem":32,"code":"#(reduce (fn [c e](concat c (list e e))) '() %)","user":"546280d8e4b01be26fd746b0"},{"problem":32,"code":"(fn [m] (loop [a m b []] (if-not (empty? a) (recur (rest a) (conj b (first a) (first a))) b)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":32,"code":"(fn [x]\n  (seq\n  \t(reduce\n     (fn [r i]\n       (conj r i i))\n     [] x)))","user":"5873dd1ce4b01531a375ea42"},{"code":"(fn dupe [[s & rest]]\n  (lazy-seq (concat [s s] (when rest (dupe rest)))))","problem":32,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [xs] (reduce concat [] (map #(vector % %) xs)))","problem":32,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":32,"code":"(fn duplicateseq\n [myseq]\n  (apply concat (map (fn duplicateseq\n         [element]\n         [element element]) myseq)\n  )\n)","user":"53fe459ae4b0de5c418485f4"},{"code":"#(for [x % i [0 1]] x)","problem":32,"user":"4ee82539535d93acb0a66878"},{"problem":32,"code":"(fn [a-coll]\n  (->> a-coll\n       (map (fn [elt] [elt elt]))\n       (apply concat)))","user":"5688e403e4b0dcc4269f4072"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [res item]\n            (conj res item item))\n          []\n          coll))","user":"541df619e4b01498b1a71a87"},{"code":"(fn duplicate [lst]\r\n  (loop [inp (reverse lst) acc ()]\r\n    (if (empty? inp)\r\n      acc\r\n      (recur (rest inp) (apply conj acc (list (first inp) (first inp)))))))","problem":32,"user":"4f629697e4b0defedf855fd6"},{"code":"(fn dup [lst] (if (empty? lst) '() (let [h (first lst) t (dup (rest lst))] (concat (list h h) t))))","problem":32,"user":"4fbbb6ede4b081705acca2ed"},{"problem":32,"code":"(fn [xs]\n  (-> (loop [items xs\n             result '()]\n        (if (empty? items)\n          result\n          (recur (rest items) (conj result (first items) (first items)))))\n      reverse))","user":"55c2b95de4b0e31453f64980"},{"problem":32,"code":"(fn [sequence] (interleave sequence sequence))","user":"5e6df58ee4b04a83ad7cd297"},{"problem":32,"code":"(fn [s] (mapcat #(identity [% %]) s))","user":"56f51879e4b046a417f92069"},{"code":"reduce #(conj (conj % %2) %2) []","problem":32,"user":"4f062d4a535dcb61093f6c08"},{"problem":32,"code":"(fn [x] (reduce (fn [l y] (conj l y y)) [] x))","user":"55d42f78e4b0e31453f64a73"},{"problem":32,"code":"(fn [x] \n  (loop [items x\n         result []]\n    (if (empty? items)\n      result\n      (recur (rest items)\n             (conj result (first items) (first items))))))","user":"593870e6e4b02506e01a29d6"},{"problem":32,"code":"(fn [c] (reduce concat (map #(take 2 (repeat %)) c)))","user":"51e8736ae4b006d205356a4f"},{"problem":32,"code":"#(reduce (fn [acc v] (into acc [v v])) [] %)","user":"54133900e4b01498b1a719de"},{"code":"(fn dup [coll]\n  (reduce (fn [a b] (concat a b)) (map (fn [x] (list x x)) coll)))","problem":32,"user":"4ecdb0bb535d23f036227709"},{"code":"(fn dupseq [s]\n  (if (empty? s)\n    s\n    (cons (first s) \n      (cons (first s)\n        (dupseq (rest s))))))","problem":32,"user":"4f03d4dc535dcb61093f6b6e"},{"code":"#(loop [result []\n\t\tremaining %]\n\t\t(let [[current & rest] remaining]\n\t\t\t(if (nil? current)\n\t\t\t\tresult\n\t\t\t\t(recur (conj result current current) rest))))","problem":32,"user":"528147b6e4b0757a1b171425"},{"problem":32,"code":"#(reverse (reduce (fn\n                     [acc n]\n                     (conj acc n n))\n                   '()\n                   %))","user":"59aad3d4e4b08cbb53654d88"},{"problem":32,"code":"(fn duplicate \n  [ls]\n  (reduce (fn [ls x]\n            (conj (conj ls x) x ))\n            []\n            ls))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":32,"code":"(fn dups [lst] (reverse(reduce\n                    (fn [res ll] (into res (list ll ll)))\n                    ()\n                    lst)))","user":"5bfc2068e4b0bdcf453d15e4"},{"code":"(fn [lll] (reduce (fn [lst x] (conj (conj lst x) x)) [] lll))","problem":32,"user":"5131c922e4b06942423563c9"},{"code":"(fn [l] (reduce #(conj % %2 %2) [] l))","problem":32,"user":"53034738e4b0d8b024fd373e"},{"problem":32,"code":"(fn duplicate\n  [coll]\n  (if (empty? coll)\n    '()\n    (conj (duplicate (rest coll)) (first coll) (first coll))))","user":"572db6d5e4b0cd1946bd0f78"},{"problem":32,"code":"#(reduce (fn [s v] (into s [v v])) [] %)","user":"60057cd4e4b074f607df664a"},{"code":"(fn ! [l]\n  (cond\n   (empty? l) []\n   :else (cons (first l) (cons (first l) (! (rest l))))))","problem":32,"user":"5164d97ee4b003cf19fdde43"},{"code":"(fn [l] (loop [result ()\n               now l]\n          (if (empty? now)\n            (reverse result)\n            (recur (cons (first now) (cons (first now) result))\n                   (rest now)))))","problem":32,"user":"52f304b4e4b05e3f0be25f07"},{"problem":32,"code":"(fn [y](mapcat (fn [x] (repeat 2 (identity x))) y))","user":"5b5b4176e4b0c6492753e6ac"},{"problem":32,"code":"(fn [l]\n            (let [r (atom [])]\n              (doseq [i l]\n                (swap! r conj i i)\n                )\n              @r)\n            )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":32,"code":"(fn [input]\n  (apply concat (map #(do [% %]) input)))","user":"54513516e4b0e397800069af"},{"problem":32,"code":"(fn [s]\n   (reduce (fn [r item]\n             (conj (conj r item) item)\n             ) (vector) s))","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn dupit [x] (if (empty? x) () (lazy-cat (list (first x) (first x)) (dupit (rest x)))))","problem":32,"user":"525f51bde4b0cb4875a45dc8"},{"problem":32,"code":"(fn [coll] (reverse(reduce into (list )(map (fn [x] (take 2 (cycle x))) (partition 1 coll)))))","user":"58bdb36fe4b0888cdc949d35"},{"code":"(fn dupeseq [x]\n  (cond\n   (nil? x) '()\n   :else (cons (first x)\n               (cons  (first x)\n               (dupeseq (next x))))))","problem":32,"user":"4eb2c45e535d7eef3080734d"},{"problem":32,"code":"#(sort (reduce into [% %]))","user":"510d2a99e4b078ea71921130"},{"problem":32,"code":"(fn [sq] \n  (reduce (fn [accum el] \n            (concat accum (take 2 (iterate identity el)))) \n          [] \n          sq))","user":"55b527cbe4b01b9910ae2985"},{"problem":32,"code":"(fn [col]\n  (apply concat (map #(repeat 2 %) col))\n)","user":"5581a6dae4b05c286339e0fe"},{"problem":32,"code":"(fn [x] \n  (reduce \n   (fn [a b] \n     (conj \n      (conj a b) \n      b)) \n   [] x))","user":"603e29d4e4b0d5df2af22310"},{"problem":32,"code":"#(sort (reduce into '() (for [i %\n     :let [out (repeat 2 i)]]\n     out)))","user":"57e8d443e4b0bfb2137f5b1a"},{"code":"(fn duplicate [[v & vs :as d]]\n  (when (not (empty? d))\n    (cons v (cons v (duplicate vs)))))","problem":32,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"problem":32,"code":"(fn dup [coll]\n  (reduce #(apply conj %1 (list %2 %2)) [] coll))","user":"58e63de2e4b056aecfd47cad"},{"problem":32,"code":"(fn [lst] (mapcat (fn [_] (list _ _)) lst))","user":"6074df6fe4b069485764de4b"},{"code":"#(reduce (fn [r v] (conj r v v)) '() (reverse %))","problem":32,"user":"500cc693e4b05f7c30cfa69a"},{"code":"(fn dupl [l]\n  (if (empty? l) l \n    (reduce conj (dupl (rest l)) (take 2 (repeat (first l)\n)))))","problem":32,"user":"4f2a6169e4b0d6649770a03d"},{"code":"(fn [m] (let [m (sort (reduce conj m m))] (for [i m] i)))","problem":32,"user":"50a69e8ce4b0aa96157e2626"},{"code":"(fn duplicate [s]\n  (if (empty? s)\n    s\n    (let [car (first s)]\n      (concat (list car car) (duplicate (rest s))))))","problem":32,"user":"4fc50441e4b081705acca36f"},{"code":"(fn [col] \n  (mapcat #(vector %1 %1) col))","problem":32,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":32,"code":"#(->> % (map (fn [x] (list x x))) (apply concat))","user":"55a19e19e4b0acc240e31515"},{"problem":32,"code":"#(mapcat (fn [el] [el el]) %)","user":"5bcf0b1be4b0e9689409ee24"},{"code":"(fn [data] (loop [d data\n                  x []]\n             (if (empty? d)\n               x\n               (recur (rest d) (apply conj x [(first d) (first d)])))))","problem":32,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":32,"code":"(fn [seq] \n  (reduce \n   (fn [new-col element] (conj (conj new-col element) element)) \n   [] \n   seq))","user":"570cd242e4b0b0fb43fd06ce"},{"problem":32,"code":"#(apply concat (map (fn [x] (list x x)) %1))","user":"554d48d3e4b00713264bd988"},{"problem":32,"code":"(fn [x] (loop [res [] coll x] (if (empty? coll) res (let [frst (first coll)] (recur (conj (conj res frst) frst) (rest coll)))) ))","user":"5ab07d63e4b073f1774425af"},{"problem":32,"code":"(fn [lst] (reduce (fn [base x] (conj base x x)) [] lst))","user":"5461873de4b01be26fd746a3"},{"code":"(fn [sequence] (apply concat (map #(list % %) sequence)))","problem":32,"user":"52d9aaa1e4b09f7907dd13ae"},{"code":"(fn [c] (reduce (fn [acc e] (concat acc [e e])) '() c))","problem":32,"user":"4daed74dedd6309eace4d163"},{"problem":32,"code":"(fn [s] (loop[s s\n              ret '()]\n          (if (first s)\n            (recur (rest s) (conj (conj ret (first s)) (first s)))\n            (reverse ret))))","user":"5a6b15e9e4b0512ff01cda32"},{"problem":32,"code":"(fn [z] (reverse (reduce (fn [x y] (cons y (cons y x))) () z)))","user":"52bba119e4b07a9af57922ea"},{"code":"(fn [l] (reduce into [] (map #(do [%1 %2]) l l)))","problem":32,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":32,"code":"reduce (fn [r x] (conj r x x))  []","user":"5794fd7be4b0e215f87e8476"},{"problem":32,"code":"(fn [c] (reduce #(into % [%2 %2]) (empty c) c))","user":"5339b53fe4b0e30313ee6cac"},{"problem":32,"code":"#(reduce (fn [xs n] (concat xs (repeat 2 n))) [] %)","user":"5b759ca8e4b047b03b2036d0"},{"problem":32,"code":"(fn [coll]\n   (mapcat #(repeat 2 %) coll))","user":"5ce36e02e4b0a17bb84e2b3e"},{"problem":32,"code":"(fn [x] (reverse (reduce #(into % (repeat 2 %2)) '() x)) )","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn [s] (apply concat (map (fn [a] [a a]) s)))","problem":32,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"#(loop [x %\n        y ()]\n   (if (empty? x)\n     (reverse y)\n     (recur (rest x) (conj y (first x) (first x)))))","problem":32,"user":"52f685eae4b047fd55836fb8"},{"problem":32,"code":"(fn dup [s]\n  (apply concat\n  \t(map #(list % %) s)))","user":"5e98e8a9e4b0157ca96647dc"},{"problem":32,"code":"(fn [s]\n  (reverse (reduce #(conj % %2 %2) '() s)))","user":"55a62092e4b0acc240e31554"},{"problem":32,"code":"#(reduce (fn \n            [new old] \n            (conj new old old)) \n          [] \n          %)","user":"578bbd3ee4b0ebec4cfb754e"},{"problem":32,"code":"reduce #(concat (concat %1 [%2]) [%2]) []","user":"578e535de4b0ebec4cfb7580"},{"problem":32,"code":"#(reverse (reduce (fn [res e] (conj (conj res e) e)) '() %))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":32,"code":"(partial mapcat (fn [x] (take 2 (repeat x))))","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn [seq] (mapcat #(vec [% %]) seq))","problem":32,"user":"4eb97234535dfed6da9c6d53"},{"problem":32,"code":"(fn [x] (sort (into x x)))","user":"5ecf55dae4b016b56eae05a8"},{"code":"reduce (fn [r e] (conj (conj r e) e)) []","problem":32,"user":"4f070ce6535dcb61093f6c1e"},{"problem":32,"code":"(fn [sq] (apply concat (map #(conj % (first %)) (map vector sq))))","user":"55f7c873e4b06e875b46ceb0"},{"code":"(fn [x]\n  (mapcat #(repeat 2 %) x))","problem":32,"user":"52393e16e4b0d705d026ef06"},{"problem":32,"code":"(fn [l]\n  (loop [l l rv []]\n    (if (empty? l)\n      rv\n      (recur (rest l) (conj rv (first l) (first l))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":32,"code":"(fn [coll] (reduce #(conj (conj %1 %2) %2)  [] coll))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":32,"code":"reduce (fn [col e] (concat col (list e e))) '()","user":"6065755ee4b069485764ddcc"},{"problem":32,"code":"(fn [lst]\n  (mapcat identity (map #(list % %) lst)))","user":"542789efe4b01498b1a71b25"},{"code":"#(mapcat (fn [elt] [elt elt]) %)","problem":32,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn dup\r\n  [l]\r\n  (apply concat (map #(list % %) l)))","problem":32,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn [xs] \n  (interleave xs xs))","problem":32,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn [s] (apply concat (map (fn [x] (list x x)) s)))","problem":32,"user":"535197f2e4b084c2834f4ae4"},{"problem":32,"code":"mapcat (fn [x] `(~x ~x))","user":"60460824e4b02d28681c77bc"},{"code":"(fn [l] (reduce (fn [dl x] (conj dl x x)) [] l))","problem":32,"user":"51411e3be4b05ca1a0b379f3"},{"code":"(fn[c] (apply concat (map #(list % %) c)))","problem":32,"user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [seq]\n    (loop [s seq r []]\n      (if (empty? s)\n        r\n        (recur (rest s) (concat r [(first s) (first s)])))))","problem":32,"user":"4e360072535deb9a81d77f30"},{"code":"(fn [x]\n  (apply concat (map #(cons %(cons % nil)) x)))","problem":32,"user":"5338387de4b0e30313ee6c91"},{"problem":32,"code":"(fn [c] (mapcat (partial repeat 2) c))","user":"56bf78dae4b0f26550335989"},{"problem":32,"code":"reduce (fn [l v] (conj l v v)) []","user":"5ef5ee81e4b07c55ae4a054a"},{"code":"(fn solution [s]\n  (reduce #(concat %1 [%2 %2]) [] s)\n)","problem":32,"user":"52b49aebe4b0c58976d9ad2b"},{"code":"(fn f [l]\n  (if (empty? l)\n    '()\n    (let [x (first l)]\n      (cons x (cons x (f (rest l)))))))","problem":32,"user":"521b73f5e4b0c4ef0be83043"},{"code":"(fn[l] (apply concat (map (fn[n] [n n]) l)))","problem":32,"user":"4f28d266e4b0d6649770a01c"},{"problem":32,"code":"(fn [s] ( apply concat (map #(repeat 2 %) s)))","user":"558bdcefe4b0277789237633"},{"code":"(fn [x]\n  (loop [newlist []\n         x x]\n    (if (empty? x)\n      newlist\n      (recur (into newlist (take 2 (repeat (first x)))) (rest x)))))","problem":32,"user":"50bd13dee4b0594b91591c65"},{"problem":32,"code":"(fn [coll](reduce #(conj %1 %2 %2) [] coll))","user":"5be589f9e4b0ed4b8aab4d13"},{"problem":32,"code":"(fn [x] \n  (mapcat #(repeat 2 %) x))","user":"540e33dde4b0addc1aec671a"},{"problem":32,"code":"(fn [col]\n   (apply concat (map #(conj [] %1 %1) col)))","user":"541f89a5e4b01498b1a71a99"},{"problem":32,"code":"#(mapcat (fn [lst] (repeat 2 lst)) %)","user":"580558cde4b0a837a8b30cc4"},{"problem":32,"code":"(fn [as]\n  (apply concat (map (fn [x] [x x]) as)))","user":"52f8b86de4b047fd55836fdb"},{"code":"(let [lift-singleton first]\n  (fn double-everything [coll]\n    (mapcat #(conj % (lift-singleton %))\n            (partition 1 coll))))","problem":32,"user":"4efa3d4b535dced4c769f270"},{"problem":32,"code":"(fn [coll] (reduce #(concat %1 [%2 %2]) '() coll))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":32,"code":"#(loop [[n & remaining] % final []]\n    (let [final (conj (conj final n) n)]\n    (if (empty? remaining)\n      final\n      (recur remaining final))))","user":"57e929c0e4b0bfb2137f5b21"},{"problem":32,"code":"#(reverse\n  (reduce (fn [x y] (conj x y y)) '() %))","user":"609e9b64e4b00e9e6653c426"},{"code":"mapcat #(seq [% %])","problem":32,"user":"504e3aaae4b0f6ff3350c487"},{"problem":32,"code":"( fn dup [s] (reduce (fn double [lst item] (conj lst item item)) [] s ))","user":"600b385ce4b074f607df668d"},{"code":"(fn dup[s]\n  (if (empty? s)\n    s\n    (let [x (first s)]\n      (cons x (cons x (dup (rest s)))))))","problem":32,"user":"504e24e2e4b0f6ff3350c46d"},{"problem":32,"code":"(fn [list]\n  (loop [[h & t] list\n         accum []]\n    (let [new-accum (conj accum h h)]\n      (if (nil? t)\n          (into () (reverse new-accum))\n          (recur t new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":32,"code":"#(loop [acc [] li %] (if (empty? li) acc (recur (concat acc (list (first li) (first li))) (rest li)  )))","user":"54972b0ee4b0b312c081ff6e"},{"problem":32,"code":"(fn [coll] (reduce (fn [acc val] (concat acc (list val val))) [] coll))","user":"52384eb1e4b0fae3832e99fa"},{"code":"(fn [lst]\n  (letfn [(rec [lst acc]\n               (if (empty? lst)\n                 acc\n                 (rec (rest lst) (cons (first lst)\n                                       (cons (first lst) acc)))))]\n    (reverse (rec lst '()))))","problem":32,"user":"51e0198ee4b01188f0627539"},{"problem":32,"code":"(fn [x]\n\t(interleave x x)\n)","user":"598d746ae4b02b9968b84d23"},{"code":"(fn [s] (loop [r [] l s]\n                 (if (= (count l) 1) (conj r (first l) (first l)) (recur (conj r (first l) (first l)) (rest l)))))","problem":32,"user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":32,"code":"(fn\n  [in-seq]\n  (reduce (fn [accum curr-elt] (into accum [curr-elt curr-elt])) [] in-seq)\n  )","user":"52229374e4b0e6a83c892600"},{"problem":32,"code":"(fn [xs] (mapcat #(cons % (list %)) xs))","user":"578df8fee4b0ebec4cfb7574"},{"code":"reduce #(concat %1 (concat [%2] [%2])) ()","problem":32,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":32,"code":"(fn [initial-sequence]  \n  (loop [sq initial-sequence res '()]     \n    (if (empty? sq)   \n      res \n      (recur (butlast sq) (conj res (last sq) (last sq))))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":32,"code":"#(apply concat (reduce (fn [x y] (conj x (take 2 (repeat y))) ) [] % ))","user":"557e6b73e4b05c286339e0d6"},{"code":"#(letfn [(dup [xs]\r\n          (if (= xs [])\r\n              []\r\n\t            (let [x (first xs)]\r\n\t\t          (concat (list x x) (dup (rest xs))))))]\r\n  (dup %))","problem":32,"user":"4e273301535deb9a81d77ef7"},{"code":"#(interleave  % %)","problem":32,"user":"4fc45c07e4b081705acca349"},{"problem":32,"code":"(fn [xs] (reduce concat (map (partial repeat 2) xs)))","user":"590cc457e4b047aa04b199f4"},{"problem":32,"code":"#(reduce (fn [x y] (concat x [y y])) [] %1)","user":"54246d6de4b01498b1a71aec"},{"code":"(fn [ls] (reduce #(conj (conj %1 %2) %2) [] ls))","problem":32,"user":"4ef60a02535dced4c769f24b"},{"problem":32,"code":"(fn duplicate [s]\n    (reduce concat (map (fn [x] (take 2 (repeat x))) s)))","user":"567b62fce4b05957ce8c61a6"},{"code":"(fn [col]\n  (loop [c col v []]\n    (if (empty? c)\n      v\n      (recur (rest c) (conj v (first c)(first c)))\n      )\n    )\n  )","problem":32,"user":"4db7da66535d1e037afb2187"},{"problem":32,"code":"(fn dup [coll]\n  (when-not (empty? coll)\n   (conj (dup (rest coll))\n         (first coll)\n         (first coll))))","user":"585aad0be4b0f14aab7c8753"},{"problem":32,"code":"(fn dup\n  [sq]\n  (reduce #(conj %1 %2 %2) [] sq))","user":"588e4e05e4b00487982d5188"},{"problem":32,"code":"(fn\n  [se]\n  (apply concat (map (fn [x] [x x]) se)))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"(fn [coll]\n  (->> coll (mapcat (fn [v] [v v]))))","problem":32,"user":"4f2cdd42e4b0d6649770a055"},{"problem":32,"code":"reduce #(apply conj %1 (repeat 2 %2)) []","user":"5632e850e4b0bfe05bf117ac"},{"problem":32,"code":"#(for [x % y '(1 2)] x)","user":"5f3567d6e4b0574c87022c44"},{"code":"(fn [collection] \n  (reverse (reduce (fn [x y] (cons y (cons y x))) '() collection)))","problem":32,"user":"52616198e4b03e8d9a4a705e"},{"code":"reduce (fn [acc x] (conj acc x x)) []","problem":32,"user":"4e7f5a0b535db966e863cc41"},{"problem":32,"code":"#(reverse(reduce (fn [col elem]\n   (into col (repeat 2 elem))\n)\n '() %))","user":"5beebdb7e4b0a6d31fed2132"},{"problem":32,"code":"(fn [sq] (mapcat (fn [a] [a a]) sq))\n\n;; (fn [sq] (reduce (fn [coll a] (conj coll a a)) [] sq))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":32,"code":"#(sort (into '() (reduce conj % %)))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":32,"code":"(fn [l] (mapcat (partial repeat 2) l))","user":"5c9adfebe4b048ec896c5ab9"},{"problem":32,"code":"(fn [x] (mapcat  #(vector % %) x))","user":"560bf666e4b05f002753df24"},{"problem":32,"code":"#(loop [result []\n        coll   %]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll) (first coll)) (rest coll))))","user":"595c02a9e4b066ee0a44afeb"},{"problem":32,"code":"#(seq (reduce (fn [acc item]\n                (-> acc\n                    (conj item)\n                    (conj item)))\n              [] %))","user":"592518cde4b072a2710fce66"},{"code":"(fn [args] (interleave args args))","problem":32,"user":"4ea5ba92535d7eef308072d9"},{"problem":32,"code":"(fn \n   [in]\n   (reduce \n     (fn \n       [acc, x]\n       (reduce conj acc \n               (repeat 2 x))) \n     [] \n     in\n     ))","user":"5856cdd6e4b0f14aab7c86fa"},{"problem":32,"code":"(fn check [x & [y]]\n   (if (= (last x) nil)\n     (do y)\n     (do (check (butlast x) (conj (conj y (last x)) (last x)))))\n )","user":"580014d7e4b0a837a8b30c32"},{"problem":32,"code":"(fn[v] (reduce #(conj %1 %2 %2) [] v))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn [x]\n  (loop [x x\n         v '()]\n    (if (nil? (first x))\n      v\n      (recur (rest x)\n             (concat v (repeat 2 (first x)))))))","problem":32,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [coll] (reduce #(conj (conj %1 %2) %2) '[] coll))","problem":32,"user":"51b213c2e4b02f8f128bb962"},{"code":"(fn [x]\n    (loop [s (reverse x) acc '()]\n      (if (empty? s) acc\n          (recur (rest s)\n                 (conj acc (first s) (first s)))))\n    )","problem":32,"user":"4f16213f535d64f603146449"},{"code":"(fn [c] (mapcat #(vector %1 %1) c))","problem":32,"user":"4f038355535dcb61093f6b04"},{"problem":32,"code":"(fn [col] \n  (mapcat #(list % %) col))","user":"5ea6fe98e4b00a66d4a951b2"},{"problem":32,"code":"(fn\n  [s]\n  (mapcat #(identity [% %]) s))","user":"60036736e4b074f607df663b"},{"problem":32,"code":"#(reduce (fn [acc el] (concat acc (list el el))) '() %)","user":"5a68f374e4b0512ff01cda05"},{"code":"(fn [coll]\r\n  (mapcat #(repeat 2 %) coll))","problem":32,"user":"4dd4f0a8535dae65d5c462e4"},{"code":"(fn [l]\r\n  (loop [collected [] r l]\r\n    (if (= r []) collected\r\n        (recur (conj collected\r\n                     (first r)\r\n                     (first r))\r\n               (rest r))\r\n)))","problem":32,"user":"4db883e1535d1e037afb2198"},{"problem":32,"code":"(fn [x]\n  (sort (reduce #(cons %2 %1) x x)))","user":"57fc5e42e4b0d3187e900997"},{"problem":32,"code":"(fn [input]\n  (reduce #(conj (conj %1 %2) %2) [] input))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":32,"code":"(fn duplicate [collection]\n  (reduce (fn [accumulator current]\n         (conj accumulator current current)) [] collection))","user":"5df0f338e4b093ff717275c6"},{"problem":32,"code":"(fn [lst] (mapcat (fn [e] (list e e)) lst))","user":"5a663a32e4b0512ff01cd9c2"},{"problem":32,"code":"reduce (fn [a e] \n  (concat a (list e e))\n         ) '()","user":"554c0adde4b0a04f7929959e"},{"code":"(fn [coll] \n  (cond \n   (= 2 (count coll)) (let [[x y] coll] (list x x y y)) \n   (= 3 (count coll)) (let [[x y z] coll] (list x x y y z z)) \n   (= 4 (count coll)) (let [[x y z a] coll] (list x x y y z z a a))))","problem":32,"user":"51430fb2e4b0c172af7558ce"},{"code":"(fn[x](mapcat #(list%%)x))","problem":32,"user":"4dd66da7535d2dad7130b5c8"},{"problem":32,"code":"#(reduce concat (map (fn [c] (repeat 2 c)) %))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":32,"code":"reduce (fn [coll item] (conj coll item item)) []","user":"56fa972be4b07572ad1a88c2"},{"code":"(fn f [x]\r\n  (mapcat #(list % %) x))","problem":32,"user":"4eaed3a7535d7eef30807328"},{"code":"(fn dup [lst] \r\n  (let [a (first lst)] \r\n    (when a (cons a (cons a (dup (rest lst)))))))","problem":32,"user":"4ec18451535dfed6da9c6db0"},{"code":"#(sort (apply conj % %))","problem":32,"user":"5034a14de4b062bc5d7ae165"},{"code":"(fn dupl [tomb]\n  (if (empty? tomb)\n    '()\n    (conj (dupl (rest tomb)) (first tomb) (first tomb))\n   )\n)","problem":32,"user":"50d3317ee4b049d4ed5650da"},{"problem":32,"code":"#(reverse (reduce (fn [ls x] (cons x (cons x ls))) () %))","user":"5d98f616e4b0d3f9b434ad3c"},{"problem":32,"code":"(fn [a] (reverse (reduce #(conj  %1 %2 %2) '() a)))","user":"500e3238e4b068062f6e8d8f"},{"problem":32,"code":"(fn [w] (reverse (reduce (fn [y z] (reduce conj y z)) (first (apply conj (conj [[]] (map (fn [y] (list y y)) w)))))))","user":"5f313d01e4b0574c87022c28"},{"problem":32,"code":"(fn dup-seq\n  [xs]\n  (loop [ orig xs new []]\n\n    (if-not (empty? orig)\n      (recur (rest orig) (conj (conj new (first orig) ) (first orig)))\n      new)))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":32,"code":"(fn doubles[lst] ( if (empty? lst) '() \n                  \n                     (cons (first lst) (cons (first lst)(doubles (rest lst))))))","user":"55a21f1ce4b0acc240e3151f"},{"code":"#(apply concat (map list % %))","problem":32,"user":"5106bc8ae4b01150e115ebec"},{"problem":32,"code":"#(mapcat ( fn [x] (repeat 2 x)) %)","user":"5ee66158e4b029a2061bbe98"},{"problem":32,"code":"(fn [input]\n  (loop [remaining input\n         ans []]\n    (if (empty? remaining)\n      ans\n      (let [el (first remaining)\n            remain (rest remaining)]\n        (recur remain (conj ans el el))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":32,"code":"(fn [coll] (reduce #(into %1 (list %2 %2)) [] coll))","user":"5abbb524e4b073f1774426da"},{"code":"(fn dupli\n  [coll]\n  (loop [s coll result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (concat result (repeat 2 (first s)))))))","problem":32,"user":"5046f909e4b03b02161376b5"},{"problem":32,"code":"(fn [c] (apply concat \n (map #(list %1 %1) c)\n ))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":32,"code":"#(loop [collected [] arr %] (if (empty? arr) collected (recur  (concat collected (repeat 2 (first arr)))  (rest arr))))","user":"57986b76e4b039eba2ecb116"},{"problem":32,"code":"(fn duplicate [S]\n  (reduce (fn [s x] (-> s (conj x) (conj x))) [] S))","user":"56f53962e4b046a417f9206c"},{"code":"#(loop [ result [] coll %]\n   (if (nil? coll) result\n     (recur (apply conj result (repeat 2 (first coll))) (next coll))))","problem":32,"user":"522eba30e4b01cdb292c5f0e"},{"problem":32,"code":"(fn [coll]\n \t (loop \n       [i 0\n         s '()]\n    \t(if (= i (count coll))\n           (reverse s)\n           (recur (inc i) (conj (conj s (nth coll i)) (nth coll i))))))","user":"53b182a5e4b047364c044491"},{"problem":32,"code":"(fn [s]\n  (loop [old s new '()]\n    (if (empty? old) new\n      (recur (rest old) (concat new (list (first old)\n                                          (first old)))))))","user":"60264d89e4b0d5df2af2222d"},{"problem":32,"code":"(fn [values] (loop [new [] \n       old values]\n  (if (empty? old)\n    new\n    (recur (conj new (first old) (first old)) (rest old)))))","user":"5d517784e4b0776584bd6f60"},{"code":"(fn [coll]\n  (apply concat (map #(repeat 2 %) coll))\n  )","problem":32,"user":"526698c9e4b03e8d9a4a7144"},{"problem":32,"code":"reduce\n  (fn [acc value]\n    (concat acc [value value]))\n  []","user":"5b265183e4b063e2438bcc31"},{"problem":32,"code":"(fn dup-item [coll]\n  (reduce (fn [acc item] (concat acc [item, item])) '() coll))","user":"5c8cfff8e4b048ec896c5996"},{"problem":32,"code":"(fn[mySeq] (for [x mySeq y (range 2)] x ))","user":"55757e81e4b05c286339e063"},{"code":"#(loop [x % y []] (if-not (empty? x)\n             (recur (rest x) (conj y (first x) (first x)))\n                    y))","problem":32,"user":"5105ed16e4b01150e115ebe2"},{"problem":32,"code":"reduce #(into %1 (repeat 2 %2)) []","user":"596a66cde4b069c0a1a19803"},{"code":"(fn [x]\r\n  (loop [sequ x acc []]\r\n    (if (empty? sequ)\r\n      (seq acc)\r\n      (recur (rest sequ) (conj acc (first sequ) (first sequ))))  ))","problem":32,"user":"4e14090d535d04ed9115e7dc"},{"problem":32,"code":"(fn [x] (apply concat (for [e x] (repeat 2 e))))","user":"57b9bfdae4b0fbc9809a27f5"},{"problem":32,"code":"(fn [col] (mapcat (fn [a] [a a] ) col))","user":"564a560ae4b0284900eef654"},{"problem":32,"code":"mapcat #(repeat 2 % )","user":"534b57bbe4b084c2834f4a78"},{"problem":32,"code":"(fn [x] \n  (reverse (reduce \n             (fn [v e] (conj v e e)) '() x)))","user":"59096794e4b047aa04b1999e"},{"problem":32,"code":"(fn [s]\n  (loop [items s\n         result []]\n    (let [first-item (first items)]\n      (if (seq items)\n        (recur (rest items) (conj result first-item first-item))\n        result))))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":32,"code":"(fn \n  [x] \n  (interleave\n   x\n   x))","user":"55b3c03ee4b01b9910ae2975"},{"code":"reduce (fn [acc e] (conj (conj acc e) e)) []","problem":32,"user":"4de165f3535d08e6dec9fde6"},{"problem":32,"code":"#_(fn [s] (mapcat #(vector % %) s))\n\nreduce\n(fn [acc e]\n  (conj acc e e))\n[]\n\n;; more elegant solution would be:\n;; #(interleave % %)","user":"59a080e3e4b0871e7608b837"},{"code":"(fn n [l]\n  (if (empty? l) nil\n    (cons (first l) (cons (first l) (n (rest l))))))","problem":32,"user":"4ffb59f6e4b0678c553fc3cf"},{"code":"(fn dup [s]\n  (reduce (fn [x1 x2] (concat x1 x2)) [] (map (fn [x1] (concat [x1 x1])) s)))","problem":32,"user":"525cc6c4e4b0cb4875a45d47"},{"code":"reduce #(conj (conj %1 %2) %2) []","problem":32,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn [s]\n  (reduce\n    (fn [t s]\n      (conj t s s))\n    []\n    s))","problem":32,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))","problem":32,"user":"4ea68edb535d7eef308072e6"},{"problem":32,"code":"#(interleave % %)\n;(fn [ls] (mapcat #(vector % %) ls))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn[x](apply concat (map #(vector % %2) x x)))","problem":32,"user":"4fb23582e4b081705acca28a"},{"problem":32,"code":"(fn[l]\n  (loop [l (apply list l) nl []]\n    (if (empty? l)\n      (apply list nl)\n      (let [value (peek l)]\n        (recur (pop l) (conj (conj nl value) value))\n        )         \n      )\n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":32,"code":"(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll)\n  \n  )","user":"583667c7e4b089d5ab817cfb"},{"problem":32,"code":";#(sort (into % %))\n\n;#(reduce concat (for [x %] (list x x)))\n\n#(interleave % %)","user":"555e9dbfe4b0a2eb076a39bc"},{"problem":32,"code":"(fn\n  [l]\n  (mapcat #(repeat 2 %) l))","user":"56df636ae4b0ca2494a095f4"},{"code":"(fn [x] \n  (loop [s x, r []]\n    (if (= s [])\n      r\n      (recur (rest s) (into r (repeat 2 (first s)))))))","problem":32,"user":"4eb6d3ab535d7eef30807370"},{"problem":32,"code":"#(apply concat (map (juxt identity identity) %))","user":"544e8369e4b0e39780006987"},{"problem":32,"code":"; second\n#(interleave % %)\n\n; first:\n; mapcat #(list % %)","user":"55e7d06ee4b050e68259b496"},{"problem":32,"code":"(fn [coll]\n  (loop [org coll\n         result []]\n    (if (empty? org)\n      result\n      (recur (rest org) (conj result (first org) (first org))))))","user":"5f6e576ae4b02876ed9fd066"},{"problem":32,"code":"(fn [elems] \n  ((comp #(reduce concat %) \n         #(map (fn [x] [x x]) %))\n  elems))","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":32,"code":"(fn [col] ((fn dup [oldC newC] (if (= (first oldC) nil) newC (dup (rest oldC) (cons (first oldC) (cons (first oldC) newC))))) (reverse col) '()))","user":"5d1cd478e4b02ea6f0fb6991"},{"code":"(fn [col] flatten (mapcat #(list % %) col))","problem":32,"user":"507a08e4e4b08327cd804a67"},{"problem":32,"code":"(fn [theSeq]\n  (reduce \n    (fn [results element] \n      (cons element (cons element results ) )\n    )\n    () (reverse theSeq)\n  )\n)","user":"57f904c5e4b0d3187e900936"},{"problem":32,"code":"(fn [coll]\n  (apply concat\n    (for [v coll]\n      (list v v))))","user":"5169d422e4b051e2a73aba53"},{"problem":32,"code":"#(loop [x % y '[]]\n    (if (empty? x)\n      y\n      (recur (rest x) (concat y (vector (first x) (first x))))))","user":"5977653be4b01722bebd4ced"},{"code":"(fn duplicate [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (duplicate (rest xs))))))","problem":32,"user":"4e691c79535d8ccf87e9fe97"},{"problem":32,"code":"(fn [x] (apply concat (map (fn [z] (list z z)) x) ) )","user":"53fdc4b8e4b0de5c418485ea"},{"problem":32,"code":"(fn [args] (reverse\n  (loop [l args\n         result '()]\n    (if (empty? l)\n      result\n      (recur (rest l)\n             (conj\n               (conj result (first l))\n               (first l)))))))","user":"5530baa5e4b076ab5578f81a"},{"problem":32,"code":"(fn [i] (apply concat (map #(list % %) i)))","user":"5ef4fca7e4b07c55ae4a0546"},{"code":"(fn dup [[a & b]]\n  (if (nil? a)\n    '()\n    (conj (dup b) a  a) ))","problem":32,"user":"53120cb5e4b08068f379ecf0"},{"problem":32,"code":"(fn [sq]\n  (reduce #(conj (conj %1 %2) %2) [] sq))","user":"5fb453d3e4b08cb800c85b44"},{"problem":32,"code":"(fn [coll]\n  (loop [coll coll\n         acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (recur \n       (rest coll) \n       (concat acc (list (first coll) (first coll)))))))","user":"58f3c18ee4b0438e51c2cead"},{"problem":32,"code":"reduce (fn [list a] (conj (conj list a) a)) []","user":"58cf8f97e4b03c36ff7e58b7"},{"problem":32,"code":"#(reduce (fn [container x] (conj (conj container x) x)) [] %)","user":"55ef9c9de4b066087aa94537"},{"problem":32,"code":"(fn dub[col](apply concat (map #(conj [%] %) col)))","user":"5565d5e4e4b0c656e3ff181f"},{"code":"(fn f [[v & r]] (cons v (cons v (if r (f r)))))","problem":32,"user":"4edb4c7c535d10e5ff6f5318"},{"problem":32,"code":"mapcat #(concat (take 2 (repeat %)))","user":"52c634b1e4b0c2d177d6210a"},{"code":"(fn dup [l]\n  (if (empty? l) '()\n      (cons (first l) (cons (first l) (dup (rest l))))))","problem":32,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":32,"code":"(fn [coll] (reduce #(into %1 [%2 %2]) [] coll))","user":"5d0beecee4b0cc9c91588239"},{"problem":32,"code":"reduce (fn [acc s] (conj acc s s)) []","user":"604ccb9fe4b0b7ec0ac60ac1"},{"code":"reduce #(conj %1 %2 %2) '[]","problem":32,"user":"50ba5113e4b03e68e4411c7d"},{"problem":32,"code":"(fn dup [x]\n    (when-not (empty? x)\n      (->> (rest x)\n           (dup)\n           (cons (first x))\n           (cons (first x)))))","user":"57027310e4b08d47c97781e2"},{"code":"(fn dubl [lst]\n  (mapcat #(list % %) lst)\n  )","problem":32,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(comp #(reduce concat %1) #(map (fn [x] [x x]) %))","problem":32,"user":"504ffa26e4b0a02f9cffdead"},{"code":"#(apply concat (map (fn [x] [x x])  %))","problem":32,"user":"52485723e4b05ef8e38e63d2"},{"problem":32,"code":"(fn [s] ( seq (reduce (fn [acc, n] (conj acc n n )) [] s)))","user":"582dc562e4b051871117bfcb"},{"code":"(fn dbl [c]\n  (when (not (empty? c))\n    (let [x (first c)]\n      (concat [x x] (dbl (rest c))))))","problem":32,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn dupl-seq\n    [s]\n    (reduce #(conj %1 %2 %2) [] s))","problem":32,"user":"4e7263a1535d5021c1a8965f"},{"problem":32,"code":"(fn dble [x] \n  (cond\n    (= 0 (count x)) '()\n    :else (conj (dble (rest x)) (first x) (first x))\n          ))","user":"5374f931e4b06d7f452d9e2d"},{"problem":32,"code":"(fn func [x] (reverse (reduce #(conj %1 %2 %2) '() x)))","user":"56cef5e8e4b0ea9b8538f762"},{"code":"(fn [coll]\n  (mapcat #(vector % %) coll))","problem":32,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn [xs]\n  (apply concat (map #(list % %) xs))\n  )","problem":32,"user":"4faf897be4b081705acca257"},{"code":"(fn _ [s]\r\n  (if (empty? s)\r\n    '()\r\n  (conj (_ (rest s)) (first s) (first s))\r\n  )\r\n)","problem":32,"user":"4fa719c0e4b081705acca1bf"},{"problem":32,"code":"#(reduce (fn\n            [acc curr]\n            (into acc (conj (list curr) curr))\n            ) [] %)","user":"5db861bce4b010eb3c36cd4b"},{"problem":32,"code":"(fn\n   [list]\n   (sort (reduce conj (into '() list) list)))","user":"60396c95e4b0d5df2af222f4"},{"problem":32,"code":"(fn [seq]\n  (reduce (fn [out-vec elem]\n            (into out-vec [elem elem]))\n          []\n          seq))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":32,"code":"(fn [coll] (reduce (fn [l x] (concat l [x x])) [] coll))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":32,"code":"#(reverse (reduce (fn [source e] (conj source e e)) '() %))","user":"56b3146ae4b0982f16b37e0f"},{"problem":32,"code":"(fn duplicateSeq [s]\n  (reduce\n   (fn duplicateReduce [acc curr]\n     (concat acc [curr curr]))\n   []\n   s))","user":"5f7251b9e4b02876ed9fd08a"},{"problem":32,"code":"#(into ()\n       (for [x (reverse %)\n             y (range 2)]\n         x))","user":"59c42426e4b0a024fb6ae4f5"},{"code":"(fn [xs]\n  (apply concat (map (fn [x] [x x]) xs)))","problem":32,"user":"4e4c238f535dc968683fc4dc"},{"problem":32,"code":"#(reduce (fn [xs x] (concat xs [x, x])) [] %)","user":"5d123457e4b02c15ef021996"},{"problem":32,"code":"(fn [xs] (reduce concat (map (fn [x] (repeat 2 x)) xs)))","user":"5b333626e4b025bcb146f32f"},{"problem":32,"code":"(comp (partial apply concat) (partial map (partial repeat 2)))","user":"5761a772e4b0994c1922fb95"},{"code":"(fn dup [lst]\r\n  (if (seq lst)\r\n    (lazy-seq (concat (repeatedly 2 (constantly (first lst))) (dup (rest lst))))))","problem":32,"user":"4dda5d07535d02782fcbe9f2"},{"code":"#(apply interleave (take 2 (repeat %)))","problem":32,"user":"500ec491e4b00fff93030f9e"},{"code":"(fn [a-seq] (mapcat #(list % %) a-seq))","problem":32,"user":"4e6dc95a535d5021c1a895f1"},{"problem":32,"code":"(fn [lst] (apply concat (reduce (fn [start r] (conj start (repeat 2 r))) [] lst)))","user":"5f45211ae4b0955706451fbc"},{"code":"(fn [coll]\n      (reduce (fn [r i] (conj r i i)) [] coll))","problem":32,"user":"52090567e4b0e152394d76ed"},{"code":"(fn make [x] \n  (if (empty? x)\n    '()\n    (concat (cons (first x) '()) (cons (first x) '()) (make (rest x)) )\n  )\n)","problem":32,"user":"50edcc53e4b06330c1f87c49"},{"code":"(fn doubleach [xs]\n  (cond\n   (empty? xs) '()\n   :else (conj (conj (doubleach (rest xs)) (first xs)) (first xs))))","problem":32,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn f [xs] \n  (if (nil? (first xs))\n    '()\n    (conj (f (rest xs)) (first xs) (first xs))))","problem":32,"user":"4e71920f535d5021c1a8964e"},{"code":"(fn [coll] (mapcat (fn[w] (vector w w)) coll))","problem":32,"user":"50a4cbbee4b0344e360f3bc2"},{"problem":32,"code":"(fn dup\n  [[x & tail]]\n  (concat\n   [x x]\n   (if (nil? tail) [] (dup tail))))","user":"56451201e4b0284900eef600"},{"code":"(fn [x]\n  (seq (reduce #(conj %1 %2 %2) [] x)))","problem":32,"user":"52c1566fe4b07a9af5792364"},{"code":"(fn [x] (loop [m x  r []] \n  \t\t       (if (empty? m) r\n\t\t\t\t   (recur (rest m) (conj r (first m) (first m))))))","problem":32,"user":"4ea4e98a535d7eef308072ce"},{"code":"(fn [xs]\n  (reverse\n  (loop [remain xs result ()]\n    (if (empty? remain)\n      result\n      (recur\n        (rest remain)\n        (conj result (first remain) (first remain)))))))","problem":32,"user":"4f0388e8535dcb61093f6b17"},{"problem":32,"code":"(fn [xs]\n  (reduce #(conj (conj %1 %2) %2) [] xs))","user":"5f1c0447e4b0f565ad99825c"},{"code":"(fn r [x] \n  (let [h (first x) t (rest x)]\n    (if (not (empty? t)) \n      (concat (list h h) (r t))\n      (list h h)\n    )\n  )\n)","problem":32,"user":"4ee67364535d93acb0a6685f"},{"code":"#(loop [x % y []]\n  (if (zero? (count x))\n      y\n      (recur (rest x) (conj y (first x) (first x)))))","problem":32,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [acc x] (conj acc x x)) [] s))","user":"55c58c0be4b0e31453f649b3"},{"code":"(fn fobar [s]\n  (if (= s '()) '() (let [f (first s)\n        \t \t\t      r (rest s)]\n                      (conj (conj (fobar r) f) f))))","problem":32,"user":"5102ef6be4b00c483ae176fc"},{"problem":32,"code":"#(reduce (fn [res n]\n           (conj res n n)\n         )\n         []\n         %1)","user":"5d07989ee4b0cc9c915881fb"},{"problem":32,"code":"(fn dup-seq [coll]\n  (reduce #(conj %1 %2 %2) [] coll))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn [s] \n  (mapcat #(repeat 2 %) s))","problem":32,"user":"5244a10de4b0d8acf9ed6ab3"},{"code":"(fn [coll] \n  (reduce concat \n          (map #(repeat 2 %1) coll)))","problem":32,"user":"5372eaf2e4b06d7f452d9e03"},{"problem":32,"code":"(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n     (recur (rest i) (conj res (first i) (first i))))\n  ))","user":"5bd999cce4b0ed4b8aab4bf4"},{"problem":32,"code":"(fn [l]\n  (reduce (fn [x y] (conj x y y)) [] l))","user":"5a1ef970e4b0ff51aa4b327d"},{"code":"(fn dup [coll]\n   (reduce concat [] \n    (map #(list % %) coll)))","problem":32,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":32,"code":"(fn [in] (mapcat identity (map #(list % %) in)))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":32,"code":"(fn [s]\n  (loop [result []\n         se s]\n    (if (empty? se)\n      result\n      (recur (conj result (first se) (first se)) (rest se)))))","user":"55fe997be4b00f4cabc57653"},{"problem":32,"code":"#(reduce concat (map (fn [x y] [x y]) % %))","user":"541404c2e4b01498b1a719e7"},{"problem":32,"code":"(fn [x]\n    (mapcat #(vector % %) x))","user":"57a1ef58e4b0c3d858beb8f3"},{"code":"(\n fn dup [col]\n  (reduce #(conj %1 %2 %2) [] col))","problem":32,"user":"5322d370e4b09d4e7a9b54c7"},{"code":"mapcat #(replicate 2 %)","problem":32,"user":"4efb0ae1535dced4c769f273"},{"problem":32,"code":"#(mapcat (fn [a] (list a a)) %1)","user":"564054a9e4b08d4f616f5edf"},{"code":"(fn dup [l]\n   (reverse (reduce (fn [acc e]\n                      (cons e (cons e acc)))\n                    '()\n                    l)))","problem":32,"user":"4fc8ce6ce4b0ee37620e183c"},{"code":"(fn [coll]\n  (reverse (reduce into (map #(list % %) coll))))","problem":32,"user":"50e90813e4b033b0e80d11e7"},{"problem":32,"code":"#(loop [counter 0\n        coll2 '()]\n   (if (= (count %) (count coll2))\n     (sort (concat % coll2))\n     (recur (inc counter)\n            (cons (nth % counter) coll2))))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":32,"code":"(fn woo [a] \r\n  (reverse (reduce \r\n            #(conj %1 %2 %2)\r\n             ()(seq a))))","user":"55af7e21e4b03311e7b732cc"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [agg now] (into agg [now now])) [] xs))","user":"57717915e4b0979f896515b3"},{"code":"(fn [s]\n  (interleave s s)\n  )","problem":32,"user":"53863845e4b06839e8705f0f"},{"problem":32,"code":"(fn duplicate\n   ([s]\n    (let [first-elem (first s)]\n      (if (nil? first-elem)\n        s\n        (cons first-elem (cons first-elem (duplicate (rest s))))))))","user":"552d487ee4b076ab5578f7e4"},{"problem":32,"code":"reduce\n   #(conj (vec %1) %2 %2)\n   []","user":"58db097fe4b0a4d5acaab66f"},{"code":"mapcat (fn [el] (repeat 2 el))","problem":32,"user":"4fc5eb7fe4b0ee37620e1803"},{"code":"(fn dup [s] (reverse (reduce (fn [sq x] (conj (conj sq x) x)) '() s)))","problem":32,"user":"51d381b5e4b099f3b6acde01"},{"code":"(fn dup [x]\n  (if (= x '())\n    '()\n    (cons (first x) (cons (first x) (dup (rest x))))\n    )\n  )","problem":32,"user":"52586d24e4b0cb4875a45cb0"},{"problem":32,"code":"#(reduce (fn [res,item] (conj res item item)) [] %)","user":"583c4482e4b089d5ab817d7e"},{"problem":32,"code":"reduce (fn [sum x] (conj sum x x)) []","user":"5233564ae4b0f0b72fabf403"},{"problem":32,"code":"(fn [coll]\n  (reduce #(conj %1 %2 %2) []  coll))","user":"58ebae90e4b056aecfd47d44"},{"problem":32,"code":"(fn [arr] (reduce concat (map #(repeat 2 %) arr)))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":32,"code":"(fn [x] (reduce #(conj %1 %2 %2) [] (seq x)))","user":"54f4a457e4b0f2f3c5226e83"},{"code":"(fn [arg]\r\n    (loop [res [] coll arg]\r\n        (if (not (empty? coll))\r\n            (recur\r\n                (conj (conj res (first coll)) (first coll))\r\n                (next coll))\r\n            res)))","problem":32,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [coll]\n  (apply concat\n    (map (partial repeat 2) coll)))","problem":32,"user":"5336ca32e4b0e30313ee6c80"},{"code":"#(loop [c % d []] (if (empty? c) d (recur (rest c) (conj d (first c) (first c)))))","problem":32,"user":"4f99bf3ee4b0dcca54ed6d01"},{"problem":32,"code":"(fn [xs] (reduce (fn [acc x] (conj (conj acc x) x)) [] xs))","user":"5cf4094be4b0aaa82f112a35"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [a, b] (conj a b b)) [] x)\n  )","user":"5822b578e4b04b46fc4b0fa4"},{"problem":32,"code":"#(for [x %\n       y (range 2)]\n   x)","user":"5e2f73e5e4b05b4b01516204"},{"problem":32,"code":"(fn sdsu-dup [x]\n  (if (= (count x) 1)\n    [(first x) (first x)]\n    (cons (first x) (cons (first x) (sdsu-dup (rest x))))))","user":"556cd549e4b09a3098a52503"},{"problem":32,"code":"(fn [x] (reduce #(into %1 (repeat 2 %2)) () (reverse x)))","user":"54055aa9e4b0addc1aec6665"},{"problem":32,"code":"(fn ff [s]  \n     (let [f (first s)\n           r (rest s)]\n        (if (nil? f) \n          '()\n          (conj (conj (ff r) f ) f))\n     ))","user":"542a7c9be4b01498b1a71b41"},{"problem":32,"code":"(fn [xs]\n    (reduce concat (map #(list % %) xs))\n)","user":"5d4c83b7e4b0776584bd6f34"},{"problem":32,"code":"(fn dupe [coll]\n           (when-let [s (seq coll)]\n             (lazy-seq (cons (first s) (lazy-seq (cons (first s) (dupe (rest s))))))))","user":"5bb25684e4b0a20761a2350d"},{"code":"#(loop [head (first %), tail (rest %), out []]\n    (if (empty? tail)\n      (conj out head head)\n      (recur (first tail) (rest tail) (conj out head head)) ))","problem":32,"user":"4ec5c81f535d6d7199dd36b6"},{"problem":32,"code":"#(apply concat (map (fn [e] `(~e ~e)) %))","user":"55d0e76ae4b0e31453f64a40"},{"problem":32,"code":"#(apply concat (map (fn f[x] (repeat 2 x)) %))","user":"5416aacce4b01498b1a719ff"},{"problem":32,"code":"(fn my-duplicate\n  [s]\n  (interleave s s))","user":"5f4eb036e4b0102c75033969"},{"problem":32,"code":"#(->> %\n                   (reduce (fn [result item]\n                             (conj result item item)) []))","user":"5e491182e4b043cd24807a46"},{"problem":32,"code":"(fn dup [l]\n  (if (empty? l)\n    '()\n    (conj (dup (rest l)) (first l) (first l))))","user":"5a1e93bee4b0ff51aa4b3270"},{"code":"#(mapcat (partial repeat 2) %)","problem":32,"user":"4e8e8c24535d65386fec2143"},{"problem":32,"code":"(fn dup-seq [seq-val]\n  (reverse (loop [seq-iter seq-val\n    \tfinal '()]\n    (if (empty? seq-iter)\n      \tfinal\n      \t(recur (rest seq-iter)\n               (conj (conj final (first seq-iter)) (first seq-iter) ))))))","user":"56f57481e4b046a417f92072"},{"problem":32,"code":"(fn f [x]\n  (loop [s x, res '()]\n    (if (seq s)\n      (recur (rest s) (conj res (first s) (first s)))\n      (reverse res))))","user":"593d6793e4b069cdc2982ba6"},{"problem":32,"code":"(fn [coll] (seq (reduce (fn [v x] (conj (conj v x) x)) [] coll)))","user":"5744d088e4b009280f9f2b41"},{"problem":32,"code":"#(for [x1 % x2 [1 1]] x1)","user":"5deab1b2e4b0986d99407f9f"},{"code":"(fn [coll] (interleave coll coll))","problem":32,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"(fn [s] (reduce (fn [s a] (concat s [a a])) [] s))","problem":32,"user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn [x] (reduce #(conj % %2 %2) () (reverse x)))","problem":32,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":32,"code":"reduce (fn [acc curr] (concat acc (list curr curr))) []","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":32,"code":"(fn dup [sq]\n  (let [twice (fn [n] [n n])]\n    (apply concat (map twice sq))))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [d] (reverse (reduce #(conj %1 %2 %2) '() d)))","problem":32,"user":"515d6281e4b00901442db1dc"},{"problem":32,"code":"(fn\n   [coll]\n   (reduce\n     (fn\n       [result ele] (apply conj result [ele ele]))\n     [] coll)\n   )","user":"60631c2ee4b069485764ddbd"},{"problem":32,"code":"(fn [y] (mapcat (fn [x]  [x x]   )  y) )","user":"57bffed6e4b05aa3c4741c89"},{"code":"(fn g [coll] (mapcat #(list % %2) coll coll))","problem":32,"user":"538c9144e4b0b51d73faae5d"},{"problem":32,"code":"#(sort compare (concat % %))","user":"563cdfdfe4b0bfe05bf11840"},{"code":"#(apply concat (map (fn[a] [a a]) %))","problem":32,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn [x]\n  ((fn rdu [se res]\n    (if (not (empty? se))\n        (let [fe (first se)]\n             (recur (rest se)\n                    (concat res\n                            (list fe)\n                            (list fe))))\n        res))\n   x '()))","problem":32,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn \n  ([s] (interleave s s)))","problem":32,"user":"4e30da02535deb9a81d77f17"},{"code":"(fn [coll] \n   (mapcat #(repeat 2 %) coll))","problem":32,"user":"507a9b29e4b08327cd804a6e"},{"code":"mapcat #(repeat 2 %)","problem":32,"user":"4e1158aa535d04ed9115e7c6"},{"code":"(fn dup [coll]\n  (when-let [s (seq coll)]\n    (let [x (first s)]\n      (cons x (cons x (dup (rest s)))))))","problem":32,"user":"539a2901e4b0b51d73faaf0f"},{"problem":32,"code":"(fn [n]\n  (sort (into n n)))","user":"5391bc62e4b0b51d73faaea7"},{"code":"(fn mydup [s] \n  (if (empty? s)\n    '()\n    (cons (first s) (cons (first s) (mydup (rest s))))))","problem":32,"user":"4ecaf637535d6d7199dd370c"},{"code":"mapcat #(conj [%] %)","problem":32,"user":"4e55b3dc535d8a8b8723a27f"},{"problem":32,"code":"(fn [args]\n    (mapcat (fn [x] [x x]) args)\n    )","user":"5683fcafe4b0945ebc182aa8"},{"code":"mapcat #(take 2 (repeat %))","problem":32,"user":"5229211be4b04c906c9c6a63"},{"problem":32,"code":"(fn dup [s]\n  (if (empty? s)\n    []\n    (let [h (first s)]\n      (cons h (cons h (dup (rest s)))))))","user":"52860baae4b0239c8a67ae09"},{"problem":32,"code":"#(reverse (reduce (fn [acc elt] (cons elt (cons elt acc))) '() %))","user":"5553b924e4b0deb715856e06"},{"problem":32,"code":"(fn [coll]\n  (loop [to-consume coll\n         to-create '()]\n    (if (empty? to-consume)\n      (reverse to-create)\n      (recur (rest to-consume) (conj to-create \n                                     (first to-consume)\n                                     (first to-consume))))))","user":"557775a3e4b05c286339e084"},{"code":"#(reduce (fn [lst x] (concat lst [x x])) [] %)","problem":32,"user":"52fa4f48e4b047fd55836ff7"},{"problem":32,"code":"(fn [coll] \n  (interleave coll coll))","user":"53576356e4b04ce2eb3ed27a"},{"problem":32,"code":"(fn [xs]\n\n    (reverse \n     (reduce\n      (fn [res x]\n        (cons x (cons x res)))\n      []\n      xs)))","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":32,"code":"(fn [s] (apply concat (map #(conj nil % %) s)))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":32,"code":"#(reduce (fn [p n] (concat p [n n])) [] %)","user":"522724bde4b04e78ff2e19aa"},{"code":"(fn duper [i]\n  (if (seq i) \n    (concat [(first i) (first i)] (duper (rest i)))\n    i))","problem":32,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn [sq] (reduce #(conj % %2 %2) [] sq))","problem":32,"user":"51f9527fe4b09be9c177e549"},{"problem":32,"code":"(fn [sequ]\n(loop [s sequ a []] \n  (if (= 0 (count s)) \n    a \n    (recur \n     (rest s) \n     (conj a (first s) (first s)))\n    )\n  ))","user":"540b4c4de4b0addc1aec66f6"},{"problem":32,"code":"(fn [c]\n  (reduce\n   \t(fn [acc e]\n      (conj acc e e))\n   \t[]\n   \tc))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":32,"code":"(fn my-dup [sq] \n  (if (empty? sq)\n    '()\n    (cons (first sq) (cons (first sq) (my-dup (rest sq)) ) )\n    )\n  )","user":"580f9585e4b0f478707a05b5"},{"code":"mapcat #(list %1 %1)","problem":32,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":32,"code":"#(loop [acc '()\n        coll %]\n   (if-let [f (first coll)]\n     (recur (concat acc (list f f)) (rest coll))\n     acc\n     )\n   )","user":"5245e320e4b09dbe66b56177"},{"problem":32,"code":"(fn [l] (reduce #(conj (conj %1 %2) %2 ) [] l))","user":"5c4ab449e4b0f9f7a8770e57"},{"code":"(comp reverse (partial reduce #(cons %2 (cons %2 %)) []))","problem":32,"user":"4ef0a39b535dced4c769f20c"},{"problem":32,"code":"(fn dupliate [x]\n  (let [duplicate*\n        (fn [acc x*]\n          (conj acc x* x*))]\n    (reduce duplicate* [] x)))","user":"5694284de4b0dcc4269f410f"},{"problem":32,"code":"(fn duplicate [coll]\n  (if (nil? coll)\n    nil\n    (let [[c & cs] coll]\n      (conj (duplicate cs) c c))))","user":"56557d2de4b0f9d632dd8498"},{"code":"(fn dup [[x & y]] (if (nil? y) [x x] (concat [x x] (dup y))))","problem":32,"user":"4fea08a9e4b0547ebccb2484"},{"problem":32,"code":"(fn [x] (apply concat (apply map vector [x x])))","user":"560d2b53e4b05f002753df37"},{"problem":32,"code":"(fn f [x] (mapcat identity (map vector x x)))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [x]\n  (loop [in x out '()]\n    (if (seq in)\n      (recur (rest in) (conj out (first in)(first in)))\n      (reverse out))))","problem":32,"user":"4fc34787e4b081705acca33e"},{"code":"(fn d\n  [l]\n  (cond\n   (empty? l) '()\n   :else (cons (first l) (cons (first l) (d (rest l))))))","problem":32,"user":"518c0f4ee4b0f028e99addf7"},{"problem":32,"code":"#(apply concat (for [x %1][x x]))","user":"544ac9b5e4b0e39780006959"},{"code":"(fn [a] (mapcat #(list % %) (seq a) ))","problem":32,"user":"4f00e9c7535dcb61093f6a33"},{"problem":32,"code":"#(loop [acc () sq %] (if (empty? sq) acc (recur (concat acc (repeat 2 (first sq))) (rest sq))))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":32,"code":"(fn [x]\n  (reduce (fn [result element]\n            (conj (conj result element)\n                  element))\n          []\n          x))","user":"574ef99ae4b02ea114799250"},{"problem":32,"code":"reduce (fn [a b] (concat a [b b])) '()","user":"5a9e3698e4b0d174b936c7fc"},{"problem":32,"code":"(fn [x]\n  (loop [e x\n         res []]\n    (if e\n      (recur (next e) (apply conj res (repeat 2 (first e))))\n      res)))","user":"5ec21ef0e4b00a66d4a95299"},{"problem":32,"code":"(fn [x]\n  (->> x\n       (map #(repeat 2 %))\n       (apply concat)))","user":"593dde1be4b069cdc2982baf"},{"code":"#(apply concat (for [x %] (repeat 2 x)))","problem":32,"user":"4fc559eae4b0ee37620e17f3"},{"problem":32,"code":"#(loop [acc [] col %]\n   (if (empty? col)\n     acc\n     (recur (conj acc (first col) (first col)) (rest col))))","user":"567cef8ce4b05957ce8c61c1"},{"problem":32,"code":"(fn [seq] (sort (concat seq  seq)))","user":"5d8044f6e4b0915913b1d368"},{"problem":32,"code":"(fn duplicate\n  [s]\n  (reverse (reduce (fn [acc v]\n                     (conj (conj acc v) v))\n                   ()\n                   s)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":32,"code":"#(mapcat (fn dupper[val] [val val]) %)","user":"564b1ff8e4b0284900eef663"},{"problem":32,"code":"(fn [seq]\r\n  (apply concat (map #(repeat 2 %) seq)))","user":"555bd27ae4b0b056612e2244"},{"problem":32,"code":"(fn foo [x] (let [y (first x)] (if (= (count x) 1) (list y y) (conj (conj (foo (rest x)) y) y))))","user":"57b8b008e4b0fbc9809a27e6"},{"code":"(fn [x] (reduce interleave (replicate 2 (seq x))))","problem":32,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":32,"code":"(fn [coll] (mapcat #(concat (repeat 2 %)) coll))","user":"55088bb3e4b06e50f9beb10c"},{"problem":32,"code":"(fn [coll]\n  (loop [result []\n         coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj (conj result (first coll)) (first coll)) (rest coll)))))","user":"54f03f8ce4b024c67c0cf891"},{"code":"(fn d [xs] \n  (if (empty? xs) ()\n    (let [x (first xs)]\n      (cons x (cons x (d (rest xs)))))))","problem":32,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"#(reduce (fn [s x] (conj s x x)) [] %)","problem":32,"user":"4f97d8f3e4b0dcca54ed6ced"},{"problem":32,"code":"#(reverse \n  (reduce \n    (fn [initial a]\n      (cons a (cons a initial)))\n    '() \n   \t%))","user":"5989e080e4b021a7a535fed6"},{"code":"(fn [s]\r\n  (letfn [(dd [in lst]\r\n            (if (empty? in)\r\n              lst\r\n              (recur (rest in) (concat lst (concat (list (first in)) (list (first in)))))))]\r\n    (dd s '())))","problem":32,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [c]\n  (interleave c c))","problem":32,"user":"502a5fa4e4b09e8f859a9fbd"},{"code":"(fn [l]\n  (apply concat\n    (map (fn [e] [e e]) l)))","problem":32,"user":"50435852e4b034ff00315d22"},{"problem":32,"code":"(fn doub [elements]\n  (loop [new-elements [],\n         elements elements]\n    (if (empty? elements)\n      new-elements\n      (recur (apply conj new-elements (repeat 2 (first elements))) (next elements)))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"( fn [l] (reduce concat (map #(list % %) l) ) )","problem":32,"user":"4fc43a8ee4b081705acca346"},{"code":"(fn [s] (reduce (fn [a b] (concat a [b b])) [] s))","problem":32,"user":"51c9a705e4b09ce160bef5ab"},{"problem":32,"code":"(fn [c]\n  (loop [coll c\n         dup c]\n    (if (empty? coll)\n      (sort dup)\n      (recur (rest coll) (conj dup (first coll))))))","user":"57291a39e4b0c6e51e0d2b14"},{"code":"(partial reduce \n (fn [acc el]\n   (conj acc el el))\n [])","problem":32,"user":"50cd0fd5e4b0f7a459302aad"},{"problem":32,"code":"#(reduce (fn [acc elt] (conj acc elt elt)) [] %)","user":"58a55694e4b01a0c0b23290b"},{"problem":32,"code":"(fn [s] (mapcat #(list\t % %) s))","user":"55623feae4b0c656e3ff17d4"},{"problem":32,"code":"(fn dup [ls]\n  (let [[x & xs] ls]\n  (if x\n    (concat [x x] (dup xs)))))","user":"57915ba4e4b0ebec4cfb75ba"},{"problem":32,"code":"#(loop [s % ss [] i 0]\n   (if (contains? s i)   \n    (recur s (conj ss (nth s i) (nth s i)) (inc i))\n    ss\n   )\n)","user":"54897284e4b0e286459a11e6"},{"problem":32,"code":"(fn [seq] (reduce #(conj % %2 %2) [] seq))","user":"57002b81e4b08d47c97781c7"},{"problem":32,"code":"(fn [col]\n (reduce #(conj %1 %2 %2) [] col))","user":"53b7c21ae4b047364c0444d4"},{"problem":32,"code":"(fn [xs]\n  (reduce (fn [coll el] (-> coll (conj el) (conj el))) [] xs))","user":"5032748ae4b0e78df07b092f"},{"code":"(fn dup [lst] (\r\n  if (nil? lst)\r\n  []\r\n  (cons (first lst) (cons (first lst) (dup (next lst))))\r\n))","problem":32,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":32,"code":"(fn [x] (loop [a x b []] (let [h (first a)] (if (empty? a) b (recur (rest a) (conj b h h))))))","user":"5651de3ee4b0f9d632dd845b"},{"code":"(fn [y] (reduce concat (map #(repeat 2 %) y)))","problem":32,"user":"4f089f1a535dcb61093f6c3c"},{"problem":32,"code":"(fn [args]\n   (reverse (reduce #(conj %1 %2 %2) '() args)))","user":"5576961be4b05c286339e06f"},{"problem":32,"code":"#(loop [x %  c '()]  (if (first x) (recur (next x) (conj c (first x) (first x))) (reverse c)))","user":"551daeb9e4b030e6a24d00df"},{"problem":32,"code":"(fn dup [xs]\n  (if (empty? xs)\n    nil\n    (cons (first xs) (cons (first xs) (dup (rest xs))))))","user":"569ce7e6e4b0542e1f8d146d"},{"problem":32,"code":"(fn [collection]\n  (reduce (fn [acc val] (conj (conj acc val) val)) [] collection))","user":"5d42c88ae4b05dd059a5437e"},{"problem":32,"code":"(fn [seq] (loop [acc [] counter 0]\n    (if (< counter (count seq))\n    (recur\n      (conj acc (nth seq counter) (nth seq counter)) (inc counter))\n      acc\n      )))","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn [x] (loop[myNL '() myL x](if(not= (first myL) nil)\n                               (recur\n                                (concat myNL (repeat 2 (first myL)))\n                                (rest myL)\n                                )\n                               myNL\n                               )\n          )\n  )","problem":32,"user":"5177cacde4b0261ae665b877"},{"problem":32,"code":"(fn [col] (apply list (reduce #(conj %1 %2 %2) [] col)))","user":"55afa977e4b002ce9d5cbc15"},{"code":"(fn [xs] (apply concat (map (fn [x] (list x x)) xs)))","problem":32,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn dup-seq [s]\n  (#(reverse (reduce (fn [a x] (conj (conj a x) x)) () s))))","problem":32,"user":"5300c383e4b0d8b024fd3712"},{"problem":32,"code":"(fn [lis]\n  (mapcat vector lis lis))","user":"59636b49e4b066ee0a44b0c5"},{"problem":32,"code":"#(seq (loop [sq %, ret []] (if (empty? sq) ret (recur (rest sq) (conj ret (first sq) (first sq))))))","user":"55fc07d3e4b0f488688e066e"},{"problem":32,"code":"#(reverse (reduce (fn [res it] (conj res it it)) `() %))","user":"590b3aeae4b047aa04b199d0"},{"problem":32,"code":"(fn dup\n  [myseq]\n  (loop [tmpseq myseq result []]\n    (if (empty? tmpseq) result\n                        (let [a (first tmpseq)]\n                          (recur (rest tmpseq) (conj result a a))))\n    ))","user":"5a4cbba1e4b05d388ecb6b98"},{"problem":32,"code":";(fn [s] (apply concat (map (fn [x] [x x]) s))) \n\n(fn [s] (->> s\n             (map (fn [x] [x x]))\n             (apply concat)))","user":"55096255e4b06e50f9beb116"},{"problem":32,"code":"(fn dup [coll]\n  (if (seq coll)\n    (cons (first coll) (cons (first coll) (dup (rest coll))))\n    coll))","user":"5370d152e4b0fc7073fd6e9d"},{"code":"(fn ! [s]\n  (if (empty? s)\n    (list )\n    (concat (list (first s) (first s)) (! (rest s)))))","problem":32,"user":"523361d8e4b0f0b72fabf405"},{"problem":32,"code":"(fn dup \n  [s] \n  (reduce (fn [s* x] (conj (conj s* x) x)) [] s)\n)","user":"55acd080e4b03311e7b73298"},{"problem":32,"code":"(fn dupdup [s]\n  (if (empty? (rest s))\n    (list (first s) (first s))\n    (concat (list (first s) (first s)) (dupdup (rest s)))))","user":"562e05e0e4b0a45d2ff83023"},{"problem":32,"code":"#_(fn dup [coll]\n  (if (empty? coll)\n    '()\n\n (let [x (first coll) ]  \n  (cons x (cons x (dup (rest coll))))\n\n)   ) )\n\n(fn dup [coll]\n  (if (empty? coll)\n    '()\n    (let [x (first coll)]  \n      (cons x (cons x (dup (rest coll)))))))","user":"58aa8083e4b01a0c0b232985"},{"problem":32,"code":"(fn [x]\n  (loop [r [] c 0 n (count x)]\n    (if (= c n) \n      r\n      (let [e (nth x c)]\n        (recur (concat r [e e]) (inc c) n)\n      )\n      )\n    )\n)","user":"54a677a9e4b09f271ff37c88"},{"problem":32,"code":"(fn [s] (interleave (seq s) s))","user":"53b952eee4b047364c0444e6"},{"code":"(fn f [l]\n  (let [a (first l) b (next l)]\n    (concat [a] [a] (when b (f b)))))","problem":32,"user":"4e8a880b535d65386fec210d"},{"code":"(fn dup [xs] \n  (if (empty? xs)\n    '()\n    (list* (first xs) (first xs) (dup (rest xs)))))","problem":32,"user":"4f3cc2fbe4b0e243712b1f55"},{"problem":32,"code":"#(sort (apply conj %1 %1))","user":"50f02de7e4b0bdaecbb47db0"},{"problem":32,"code":"#(reverse (reduce (fn [res y] (conj (conj res y) y)) '() %))","user":"5cc77807e4b0ccb061962838"},{"problem":32,"code":"(fn [x] (sort #(< (.indexOf x %1) (.indexOf x %2)) (concat x x)))","user":"56e227a8e4b03a7c14b85a31"},{"problem":32,"code":"reduce #(concat %1 (list %2 %2)) []","user":"53f035c2e4b0742d9025b0d2"},{"problem":32,"code":"#(mapcat \n    (partial \n      repeat \n      2) %)","user":"54dc84ede4b024c67c0cf784"},{"problem":32,"code":"(fn [col]\n  (let [result []]\n    (apply concat (map\n     #(conj result % %)\n     col))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn duplicate-items [li]\n  (mapcat #(list % %) li))","problem":32,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":32,"code":"#(reduce (fn [a v]\n          (conj (conj a v) v))\n        []\n        %)","user":"5eb1e42ae4b00a66d4a95202"},{"code":"(fn [s] (reverse (reduce #(conj % %2 %2) () s)))","problem":32,"user":"4f4f1b84e4b03ad3f0c10cda"},{"code":"(fn [s]\n  (reduce #(conj %1 %2 %2) '() (reverse s)))","problem":32,"user":"4f036894535dcb61093f6aad"},{"problem":32,"code":"(fn [coll] \n  (reduce \n   (fn [a b] (conj a b b)) [] coll))","user":"54980edae4b0b312c081ff79"},{"code":"(fn [s]\n  (loop [ret [] s s]\n    (if (empty? s)\n      ret\n      (recur (conj (conj ret (first s)) (first s)) (rest s)))))","problem":32,"user":"4fb4f42ae4b081705acca2b4"},{"problem":32,"code":"(fn  [col]\n  (apply concat (for [c col] (list c c))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn dup-seq [coll] \n  (mapcat #(list % %) coll))","problem":32,"user":"4faafccde4b081705acca209"},{"problem":32,"code":"(fn dupe [input] \n  (reduce \n    #(conj %1 %2 %2) \n    []\n    input))","user":"5a0ef454e4b04bbd27e6d9fa"},{"code":"(fn [a-seq] (reduce #(concat %1 %2) (map #(list % %) a-seq)))","problem":32,"user":"4fda8f57e4b05e33b9224f4e"},{"code":"(fn duplicate [sq]\n  (if (empty? sq)\n  \tsq\n  \t(let [fst (first sq)\n    \t  tail (next sq)]\n      (cons fst\n            (cons fst (duplicate tail)))\n      )\n    ))","problem":32,"user":"5315ec83e4b08068f379ed39"},{"code":"(fn [s] \n  (interleave s s))","problem":32,"user":"4f1e4ab5535d64f603146496"},{"problem":32,"code":"(fn [x]\n  (reverse (reduce #(into %1 [%2 %2]) () x)))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":32,"code":"(fn [inputSeq] (loop [result []\n                      values inputSeq]\n                 (if (empty? values)\n                   result\n                   (let [firstValue (first values)]\n                     (recur (conj (conj result firstValue) firstValue) (rest values))))))","user":"540c288ae4b0addc1aec66ff"},{"problem":32,"code":"(fn duplicaW [x] (conj (into [] (cons (first x) (reduce into [] (partition 2 1 x)))) (last x))  )","user":"5b69baf9e4b0c6492753e78f"},{"problem":32,"code":"(fn [xs] \n  (apply concat (mapv (partial repeat 2) xs)))","user":"55d87324e4b0e31453f64ab4"},{"code":"(fn [ys]\n  (loop [xs [], ys ys]\n    (if (empty? ys) xs\n      (recur (conj xs (first ys) (first ys)) (rest ys)))))","problem":32,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn [x] (mapcat list x x))","problem":32,"user":"510b5596e4b078ea719210fd"},{"problem":32,"code":"#(reverse ((fn foo [list]\r\n             (loop [r '()\r\n                    l list]\r\n               (if-let [e (first l)]\r\n                 (recur (conj r e e) (rest l))\r\n                 r))) %))","user":"57a9b2dbe4b0a96607956233"},{"code":"#(loop [accum []\n         xs %1]\n         (if (empty? xs)\n           accum\n           (recur (conj accum (first xs) (first xs))\n                  (rest xs))))","problem":32,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":32,"code":"(fn double-seq\n  [xs]\n  (apply concat (map #(repeat 2 %) xs)))","user":"59ea07c9e4b0249b72820756"},{"problem":32,"code":"#(interleave % %\n             )","user":"5652dd89e4b0f9d632dd8469"},{"code":"#(reverse (reduce (fn [memo a] (cons a (cons a memo))) '() %))","problem":32,"user":"4f9a0064e4b0dcca54ed6d03"},{"problem":32,"code":"(fn [coll]\n  (reduce (fn [result elem]\n            (concat result (repeat 2 elem)))\n          []\n          coll))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":32,"code":"#(sort (into '() (into % %)))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":32,"code":"(fn [l]\n  (let [t (transient [])]\n    (doseq [v l]\n      (conj! t v)\n      (conj! t v))\n    (persistent! t))\n  )","user":"558843dae4b059ccff29b1f3"},{"code":"(fn [col] (apply concat (map #(cons % (cons % [])) col)))","problem":32,"user":"53347274e4b0656e627bfd6b"},{"problem":32,"code":"(fn [s] (mapcat #(vec [% %]) s))","user":"548d6b75e4b0e286459a1216"},{"problem":32,"code":"(fn du [l]\n  (if-let [h (first l)]\n    (into [h h] (du (rest l)))\n    []))","user":"53b42b9ce4b047364c0444b3"},{"code":"(fn duplicate [xs]\n  (loop [xs' xs acc '()]\n    (if (empty? xs') (reverse acc)\n        (recur (rest xs') (cons (first xs') (cons (first xs') acc))))))","problem":32,"user":"53287dace4b09d4e7a9b5507"},{"problem":32,"code":"(fn dupseq\n  ([s] (dupseq s []))\n  ([s acc]\n   (if (seq s) \n     (recur (rest s) (conj (conj acc (first s)) (first s)))\n     acc)))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":32,"code":"(fn [s]\n  (mapcat #(take 2 (repeat %)) s)\n)","user":"5d8a3f3ee4b0915913b1d3c9"},{"code":"reduce #(concat %1 (list %2) (list %2)) '()","problem":32,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":32,"code":"(fn [x]\n  (loop [src x dest []]\n    (if (nil? (first src))\n      dest\n      (recur (rest src) (conj dest (first src) (first src))))))","user":"563e022be4b0da801c4e4664"},{"code":"(fn [y]\n  (reduce \n    (fn [val x]\n      (conj val x x))\n      []\n      y))","problem":32,"user":"4e80e0f2535db62dc21a62b8"},{"code":"(fn foo [coll] \n  (if (empty? coll) '()\n  (concat (list (first coll) (first coll)) (foo (rest coll))))\n)","problem":32,"user":"4e7f3891535db966e863cc3b"},{"problem":32,"code":"(fn [x] \n  (interleave x x))","user":"5492164ee4b0b312c081ff3e"},{"problem":32,"code":"(fn duplicate [x]\n  (apply concat (for [a x] (list a a))))","user":"5688a01be4b0dcc4269f406d"},{"problem":32,"code":"#(reduce concat (map (fn [a] (identity [a a])) %))","user":"59449aa2e4b0b03edd0057ad"},{"problem":32,"code":"reduce #(concat % (list %2 %2)) ()","user":"5865c8f0e4b0f14aab7c884e"},{"code":"(fn dup [x]\n  (loop [aux x lista []]\n     (if(empty? aux)\n        lista\n        (recur (rest aux) (conj lista (first aux) (first aux) ))\n     )\n  )\n)","problem":32,"user":"4e94aab8535dbda64a6f6b1f"},{"problem":32,"code":"(fn [l] (apply concat\n                   (map #(repeat 2 %) l)))","user":"55009d17e4b07d26eda61d5d"},{"code":"(fn [l] \n  (reduce \n     (fn [newList elem] (concat newList (list elem elem)))\n     []\n     l))","problem":32,"user":"51f6af4fe4b06ff1c25c52ce"},{"problem":32,"code":"#(apply concat (for [x %\n      :let [y x\n            z x]]\n  [y z]))","user":"5e348945e4b0650de70e2b1d"},{"problem":32,"code":"(fn duplicate [xs]\n  (if\n    (empty? xs) []\n    (concat [(first xs) (first xs)] (duplicate (rest xs)))))","user":"6045582fe4b02d28681c77b6"},{"problem":32,"code":"(fn [s] (loop [s s\n               result []]\n          (if (empty? s)\n            result\n            (let [my-first (first s)]\n              \t(recur (rest s) (conj result my-first my-first) )))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))","problem":32,"user":"51227a00e4b068a9582e656b"},{"code":"reduce (fn [result x] (concat (concat result [x]) [x]))  '()","problem":32,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":32,"code":"(fn [l](reduce concat '() (map (fn [e] (list e e)) l)))","user":"595e20e2e4b066ee0a44b037"},{"problem":32,"code":"(fn [x] (reduce (fn [coll x] (conj coll x x)) [] x))","user":"5c1bee41e4b01240ff567218"},{"problem":32,"code":"(fn dupe [s]\n    (interleave s s))","user":"5974d2ede4b01722bebd4cb6"},{"problem":32,"code":"(fn\n  [coll]\n  (seq (reduce\n        (fn\n          [coll item]\n          (conj coll item item))\n        [] coll)))","user":"557c647ce4b05c286339e0c3"},{"code":"(fn fun9 [x]\n  (letfn [(concat2 [x y]\n  (if-not (empty? y) (let [t (concat x (first y))] (concat2 t (rest y))) x)\n)]\n  (let [t (for [i x] [i i])]\n        (concat2 (first t) (rest t))\n        )   \n))","problem":32,"user":"52132f8de4b0d32679a50651"},{"problem":32,"code":"(fn duplicate [col]\n    (reverse (reduce #(conj (conj %1 %2) %2) '() col)))","user":"59aeff12e4b0e1f4e384c8af"},{"code":"#(reduce (fn [ lst new ] (cons (second new) (cons (first new) lst))) (reverse (map (fn [ x ] (list x x)) %)))","problem":32,"user":"52286b19e4b0186687e23a7e"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [acc x] (conj acc x x)) () coll)))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":32,"code":"(fn [x]  (reverse ((fn [x y] (if (empty? x) y (recur (rest x) (conj y  (first x) (first x))))) x '())) )","user":"55818b0ee4b05c286339e0fb"},{"problem":32,"code":"(fn[c](mapcat #(vector % %) c))","user":"5e29cb4ce4b05b4b015161ae"},{"code":"mapcat #(concat [%] [%])","problem":32,"user":"4e70ed07535d5021c1a89643"},{"problem":32,"code":"#(reduce (fn [new-arr v]\n           (concat new-arr [v v]))\n         []\n         %)","user":"545bc5a8e4b01be26fd74658"},{"code":"(fn dup [l]\n  (if (= 0 (count l))\n    '()\n    (conj (dup (rest l)) (first l) (first l))))","problem":32,"user":"52d92f13e4b09f7907dd13a2"},{"problem":32,"code":"(fn [x] \n  (reverse \n   (reduce #(conj % %2 %2) '() x)))","user":"57485efee4b009280f9f2b8a"},{"problem":32,"code":"(partial mapcat (fn [a] [a a]))","user":"55aa7c5ce4b0988bba2ad94d"},{"code":"(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))","problem":32,"user":"4ea9b80c535d7eef30807306"},{"problem":32,"code":"(fn [coll] (reduce (fn [new-coll elem] (conj new-coll elem elem)) [] coll))","user":"5720a2b0e4b0c5bde472c099"},{"problem":32,"code":"(fn dup\n  [coll]\n  (apply concat (map #(vector % %) coll)))","user":"59f44189e4b0966464fe6aab"},{"problem":32,"code":"#(reverse (reduce (fn [acc x]\n                    (cons x (cons x acc)))\n                  '()\n                  %))","user":"5712a404e4b07c98581c3a8d"},{"code":"(fn dup \n  ([someseq] (dup someseq []))\n  ([someseq result] \n    (if (empty? someseq)\n      result\n      (dup (rest someseq) (into result (repeat 2 (first someseq)))))))","problem":32,"user":"4daea889edd6309eace4d15b"},{"code":"(fn t[l] (\n    if (= 1 (count l)) \n    (list (first l) (first l))\n    (concat\n        (list (first l) (first l))\n        (t (rest l))\n    )\n))","problem":32,"user":"4f03c039535dcb61093f6b5e"},{"problem":32,"code":"(fn [s] \n  (loop [xs s\n         ys []]\n    (if (empty? xs)\n      ys\n      (let [x (first xs)]\n        (recur (rest xs) (conj (conj ys x) x))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":32,"code":"(fn [x] (reduce #(conj (conj % %2) %2) [] x))","user":"5d0aab50e4b0cc9c91588220"},{"code":"(fn [items]\n  (reduce concat (map #(take 2 (repeat %)) items)))","problem":32,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn [s]\n  (mapcat (fn [x] [x x]) s))","problem":32,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":32,"code":"(fn __ ([x] (__ x '()))\n  ([l1 l2] (if (empty? l1) (reverse l2) (__ (rest l1) (conj l2 (first l1) (first l1))))))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":32,"code":"(fn [arr] (loop [[h & t] arr result []] (let [aux (conj (conj result h) h)] (if (empty? t) aux (recur t aux)))))","user":"5469e7cce4b00cfc9eacc14c"},{"code":"(fn [seq] (loop [input seq output []]\n            (if (= (count input) 0) \n              output \n              (recur (rest input) (conj output (first input) (first input))))))","problem":32,"user":"520f46f9e4b0101e4be6fcee"},{"code":"(fn dup [xs]\n  (let [my-dup \n         (fn adup [xs acc]\n           (cond (= xs []) acc\n                 :else (adup (rest xs) \n                             (cons (first xs)\n                                   (cons (first xs) acc))))\n           )]\n    (reverse (my-dup xs []))))","problem":32,"user":"4dad8d4bc9a9d6ed1799dc57"},{"code":"#(->> % (interleave %))","problem":32,"user":"52c60945e4b0c2d177d62108"},{"problem":32,"code":"#(reverse (reduce (fn [y x] (conj y x x)) () %))","user":"546af00de4b00cfc9eacc163"},{"problem":32,"code":"(fn [mylist]\n  (let [f (fn [l s] (conj l s s))]\n        \n     (reduce f [] mylist)   \n        ))","user":"5c0e3f86e4b01240ff56713d"},{"code":"#(apply concat (map (fn [x] [x x]) %))","problem":32,"user":"4ead6418535d7eef3080731f"},{"problem":32,"code":"(fn dupler[seqq]\n  (when seqq\n    (cons (first seqq) (cons (first seqq) (dupler (next seqq))))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":32,"code":"#(reduce (fn [acc x] (concat acc (repeat 2 x))) '() %)","user":"5e860270e4b09a7a73c8bbdb"},{"code":"mapcat (fn [a] [a a])","problem":32,"user":"4ed97da1535d10e5ff6f5306"},{"problem":32,"code":"#(reduce (fn [acc n] (concat acc [n n])) [] %)","user":"569f7bc2e4b0542e1f8d1494"},{"problem":32,"code":"#(seq (reduce (fn [x y] (into x (repeat 2 y))) [] %))","user":"569fc70ee4b0542e1f8d1499"},{"problem":32,"code":"(fn dup [x]\n  (cond\n    (empty? x) x\n    true       (concat [(first x)] [(first x)] (dup (rest x)))\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":32,"code":"(fn duplicate [l]\n  (loop [nl '()\n         i (dec (count l))] ;; in reverse\n    (if (>= i 0)\n      (recur (cons (nth l i) (cons (nth l i) nl)) (dec i))\n      nl)))","user":"55845fb6e4b04192f3441eed"},{"problem":32,"code":"(fn [s]\n  (loop [r (rest s)\n         acc (conj () (first s) (first s))]\n    (if (empty? r)\n      (reverse acc)\n      (recur (rest r) (conj acc (first r) (first r))))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"reduce #(into %1 [%2 %2]) []","problem":32,"user":"4e8a460e535d65386fec2109"},{"code":"(fn duplicate [l]\n  (if (empty? l)\n    '()\n    (concat (list (first l) (first l)) (duplicate (rest l)))))","problem":32,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"(fn [coll]\r\n    (loop [c coll r '()]\r\n\t   (if (empty? c)\r\n\t       r\r\n\t       (recur (drop-last c)\r\n\t\t      (conj r (last c) (last c))))))","problem":32,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn [coll] (loop [result coll i (count coll) j 0] \n                 (if (= (* 2 (count coll)) (count result)) \n                   (sort (into () result)) \n                   (recur (assoc result i (get coll j)) (inc i) (inc j)))))","problem":32,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn [col]\n  \n  (reduce (fn [array elm]\n          \t(conj (conj array elm) elm)) \n          [] col))","problem":32,"user":"518d1b5be4b070277754617b"},{"code":"(fn [ll]\n  (let [pl (map #(lazy-seq [% %]) ll)]\n    (reduce #(concat %1 %2) (first pl) (rest pl))))","problem":32,"user":"4fec550de4b0681fd128dca6"},{"problem":32,"code":"(fn\n  [l]\n  (apply concat (map vector l l)))","user":"55a5e2f7e4b0acc240e31550"},{"problem":32,"code":"(fn duplicate-seq [some-seq]\n  (reduce (fn dup [emp-seq a-char]\n  (conj (conj emp-seq a-char)  a-char)) [] some-seq))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"#(apply concat (map (fn [x] [x x]) (seq %)))","problem":32,"user":"536bc59fe4b0243289761ec3"},{"code":"reduce #(conj % %2 %2) []","problem":32,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [coll]\r\n (reverse\r\n  (reduce\r\n   (fn [col val]\r\n    (cons val (cons val col)))\r\n  []\r\n  coll)))","problem":32,"user":"4ddee37c535d08e6dec9fddc"},{"problem":32,"code":"(fn [xs]\n  (loop [xs xs res []]\n    (if (seq xs)\n      (let [x (first xs)]\n      \t(recur (rest xs) (conj res x x)))\n      res)\n    )\n  )","user":"589771f9e4b00487982d52bd"},{"code":"(fn dup-seq [coll]\n  (mapcat #(repeat 2 %) coll)\n  )","problem":32,"user":"510a3cd4e4b06956752d35ad"},{"code":"(fn dup [x] (if (empty? x) '() (cons (first x) (cons (first x) (dup (rest x))))))","problem":32,"user":"4f8b20fce4b02e764a0a5178"},{"problem":32,"code":"(fn [s] (loop [s s\n               ss []]\n          (if (empty? s) ss\n            (recur (rest s)\n                   (conj ss (first s) (first s)\n                         )\n            )\n          )\n         )\n)","user":"5c5732c8e4b0fb8c5ffd9a3f"},{"code":"(fn dup [in]\n  (loop [in-seq in, out-seq []]\n    (if (= (first in-seq) nil)\n        out-seq\n      (recur (rest in-seq) (conj out-seq (first in-seq) (first in-seq) ))\n      )\n    )\n  )","problem":32,"user":"52463059e4b09dbe66b56198"},{"problem":32,"code":"(fn dup [l] (reduce into (map #(into [%] [%]) l)))","user":"5c936567e4b048ec896c5a1b"},{"problem":32,"code":"reduce (fn [f xs]\n          (conj f xs xs)) []","user":"5ed4b1e8e4b016b56eae05ce"},{"problem":32,"code":"(fn [x]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (concat result (repeat 2 (first coll)))))))","user":"57344edbe4b0cd1946bd1008"},{"code":"(fn [sq]\n  (reduce (fn [m l] (conj (conj m l) l)) (empty sq) sq))","problem":32,"user":"52c2ff59e4b07a9af5792389"},{"problem":32,"code":"(fn [s]\n  (->> s\n       reverse\n       (reduce #(conj (conj %1 %2) %2) '() )\n  )\n )","user":"55e8a85be4b0121d4835fd98"},{"problem":32,"code":"(fn [lst] (reduce concat (map (fn [n] (repeat 2 n)) lst)))","user":"5c59b1d3e4b01df32ab73261"},{"code":"#(reduce (fn [x y] (conj x y y)) '() (reverse %))","problem":32,"user":"5150a7d7e4b03e678e393abb"},{"problem":32,"code":"(fn [inp]\n  (loop [res []\n         inp inp]\n    (if (empty? inp)\n      res\n      (let [next-el (first inp)]\n        (recur\n         (conj res next-el next-el)\n         (rest inp))))))","user":"592334c7e4b0a390037439ee"},{"problem":32,"code":"(fn dbl [coll](mapcat #(repeat 2 %) coll))","user":"57ee9ffbe4b0bfb2137f5bc2"},{"problem":32,"code":"(fn duplicate-each [coll]\n  (mapcat #(list % %) coll))","user":"56ba1406e4b0f2655033593c"},{"problem":32,"code":"#(apply mapcat vector (repeat 2 %))","user":"56193c6ee4b053970a773af2"},{"code":"#(reduce (fn [a b] (concat a (list b b))) '() %)","problem":32,"user":"4fea24e0e4b0547ebccb248d"},{"problem":32,"code":"(fn [xs]\n   (loop [xs xs, ys ()]\n     (if (seq xs)\n       (recur (rest xs) (cons (first xs) (cons (first xs) ys)))\n       (reverse ys))))","user":"5069d8c5e4b01dc6af13f838"},{"code":"(partial reduce (fn [a e] (conj (conj a e) e)) [])","problem":32,"user":"5392b849e4b0b51d73faaeb1"},{"problem":32,"code":"(fn [s] (seq (reduce (fn [acc x] (conj acc x x)) [] s)))","user":"5ee7b49de4b029a2061bbea6"},{"problem":32,"code":"(fn [s]\n  (reduce\n    (fn [a b]\n      (concat a (list b b))\n    )\n    '()\n    s\n  )\n)","user":"55bb7546e4b01b9910ae29e7"},{"code":"#(loop [x % y []]\n\t(if (empty? x) y\n\t(let [z (first x)]\n\t(recur (rest x) (conj y z z)))))","problem":32,"user":"52b79d8ee4b0c58976d9ad50"},{"problem":32,"code":"(fn [seq-var] (\n  apply concat (map #(list % %) seq-var)\n))","user":"5b3189e5e4b025bcb146f308"},{"code":"(fn [col] (reduce concat (map #(list % %) col)))","problem":32,"user":"4fb2f9b2e4b081705acca294"},{"problem":32,"code":"(fn duplicate\n  [coll]\n  (apply mapcat list (repeat 2 coll)))","user":"56481722e4b0284900eef628"},{"problem":32,"code":"reduce (fn [a e] (conj (conj a e) e)) []","user":"577202d2e4b0979f896515c0"},{"code":"(fn dup* [s]\n  (if (or (nil? s) (= () s)) s\n      (cons (first s) (cons (first s) (dup* (rest s))))))","problem":32,"user":"507db411e4b03c76e5499e06"},{"problem":32,"code":"(fn\n  [coll]\n  (loop [elems coll\n         duped []]\n    (if (empty? elems)\n      duped\n      (recur (rest elems) (conj duped (first elems) (first elems))))))","user":"5ac35d00e4b0e27600da7712"},{"code":"(fn dup-seq [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))","problem":32,"user":"51d1875be4b0cfcf579466c0"},{"code":"(fn [coll]\n  (loop [my-seq '() s coll]\n    (if (empty? s)\n      (reverse my-seq)\n      (recur (cons (first s) (cons (first s) my-seq)) (rest s)))))","problem":32,"user":"51991a89e4b068aa333628fd"},{"code":"(fn[squ]\n  (loop [sq squ\n         repeated []]\n    (if (empty? sq)\n      repeated\n      (recur (rest sq) (conj repeated (first sq) (first sq))))))","problem":32,"user":"4f6236abe4b0defedf855fcd"},{"code":"(fn duplicate\r\n        ([coll] (duplicate coll []))\r\n        ([coll coll2] \r\n          (if (empty? coll)\r\n            coll2\r\n            (duplicate (rest coll) (conj (conj coll2 (first coll)) (first coll))))))","problem":32,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [xs & dups]\r\n  (let [dups (if (nil? dups) () (first dups))]\r\n    (if (nil? (first xs))\r\n      (reverse dups)\r\n      (recur (next xs) (list (concat (repeat 2 (first xs)) dups))))))","problem":32,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":32,"code":"#(apply concat (map (fn [x] (conj (conj '() x) x)) %))","user":"511036c5e4b04c71fce993ee"},{"code":"(fn[a](sort(concat a a)))","problem":32,"user":"52fd8de1e4b047fd5583702e"},{"code":"(fn [x]\n  (interleave x x))","problem":32,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"(fn [xs]\n  (mapcat (fn [x] (list x x)) xs))","problem":32,"user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [s] (reduce concat (map #(seq [% %]) s)))","problem":32,"user":"51aa5434e4b04e3dc0c27b26"},{"code":"(fn [coll]\n  (apply concat (map #(vector % %) coll)))","problem":32,"user":"4e521cef535d302ef430da6d"},{"problem":32,"code":"#( reduce concat (map list % %   ) )","user":"55cc56bee4b0e31453f64a0f"},{"problem":32,"code":"(fn [s]\n  (let [[x y z v] (map #(repeat 2 %) s)]\n  (concat x y z v)))","user":"5cd06cfbe4b0ccb0619628d2"},{"problem":32,"code":"mapcat #(identity [%1 %1])","user":"57ce3fede4b0c746388ab8a6"},{"code":"(fn [x] (reduce concat () (map #(list % %) x)))","problem":32,"user":"4dad86e0c9a9d6ed0f99dc57"},{"code":"(fn [lst] (reduce (fn [xs x] (conj xs x x)) [] lst))","problem":32,"user":"527ccaf4e4b0757a1b17136d"},{"problem":32,"code":"reduce (fn [final_seq element]\n         (concat final_seq (list element element))) []","user":"53f50c03e4b0db01ade6f9ca"},{"problem":32,"code":"#(apply concat (map (fn [itm] (conj (list itm) itm)) %))","user":"5ddd3cbee4b0948ae9d9adc3"},{"problem":32,"code":"(fn dup\n  [x]\n  (mapcat #(identity [% %]) x))","user":"5401aefbe4b0df28a13c62c7"},{"problem":32,"code":"(fn dbl [coll]\n  (if (empty? coll)\n  \t[]\n  \t(conj (dbl (butlast coll)) (last coll) (last coll))))","user":"5cf863c4e4b0b71b1d808a80"},{"code":"(fn [coll]\n  (loop [coll coll dup ()]\n    (if (empty? coll)\n      (reverse dup)\n      (recur (rest coll)\n             (cons (first coll) (cons (first coll) dup))))))","problem":32,"user":"5369a4b1e4b0243289761e9f"},{"problem":32,"code":"(fn peu [x] (if (empty? x) x (conj (peu (rest x)) (first x) (first x))))","user":"53fc8424e4b0de5c418485b3"},{"code":"reduce #(concat %1 (repeat 2 %2)) ()","problem":32,"user":"517dc49be4b0fcc7c5d37d38"},{"problem":32,"code":"(fn [a] (sort (concat a a)))","user":"5a42d6a8e4b0447ef91cc5fb"},{"problem":32,"code":";#(flatten (for [i %] (repeat 2 i)))\nreduce #(conj %1 %2 %2) []","user":"56629a7de4b0e91d5f5c5649"},{"code":"(fn [s]\n  (apply concat\n    (map #(concat % %) (partition-by identity s))))","problem":32,"user":"50b4b70de4b0c464d223d1bc"},{"problem":32,"code":"(fn duplicate [l] (if (empty? l) '() (cons (first l) (cons (first l) (duplicate (rest l)))) ))","user":"56b5019ce4b0982f16b37e2c"},{"code":"(fn dup [x]\r\n  (reduce (fn [accum y]\r\n              (conj accum y y)\r\n              )\r\n            []\r\n            x)\r\n  )","problem":32,"user":"50a85af1e4b054305ba5a833"},{"problem":32,"code":"reduce (fn [x y]\n         (conj x y y))\n  []","user":"557f748ae4b05c286339e0df"},{"problem":32,"code":"(fn [s] (apply concat (map (fn [a] [a a]) s) ))","user":"59a5b3f4e4b066c664927d69"},{"problem":32,"code":"(fn [x]\n   (mapcat #(list % %) x))","user":"5ea444b7e4b00a66d4a951a0"},{"code":"#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (concat out [(first in) (first in)]))))","problem":32,"user":"52f07ccee4b05e3f0be25edf"},{"problem":32,"code":"(fn [elements]\n  (reduce (fn [acc x]\n    (concat acc (list x x)))\n    ()\n    elements))","user":"5d4320fde4b07c84aa5ae690"},{"code":"(fn duplicate[c]\r\n  (mapcat (fn[x] [x x] )c)\r\n  )","problem":32,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"#(apply interleave (into [] (repeat 2 %)))","problem":32,"user":"52baf490e4b07a9af57922db"},{"problem":32,"code":"(fn [arg]\n  (loop [[first & rest] arg\n         result []]\n    (if first\n      (recur rest (conj result first first))\n      result)))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":32,"code":"#(interleave %%)","user":"55f2fdc3e4b06e875b46ce51"},{"code":"(fn [x] (reduce into [] (map #(list % %) x)))","problem":32,"user":"523eb110e4b057c4b7cd0a67"},{"problem":32,"code":"(fn [c] (reduce (fn [coll v] (conj coll v v)) [] c))","user":"52b065dbe4b0c58976d9acc9"},{"problem":32,"code":"(fn fs\n  [xs]\n  (loop [ys xs\n         res '()]\n    (if (empty? ys)\n      (sort (apply conj res res))\n      (recur (rest ys) (conj res (first ys))))))","user":"542d5fa9e4b0dad94371f2b5"},{"code":"(fn [xx] (let [yy xx] (interleave xx yy)))","problem":32,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":32,"code":"(fn [s]\n  (reverse (reduce into (map #(repeat 2 %) s)))\n )","user":"53bd6fcfe4b0d9a98559a6d0"},{"code":"(fn [seq0] (loop [acc '() seq seq0]\n(if (empty? seq) (reverse acc) (recur (conj acc (first seq) (first seq)) (rest seq)))))","problem":32,"user":"508e9ed8e4b0996e1a8a53bf"},{"problem":32,"code":"(fn duplicate [seq]\n  (reduce (fn conj2 [a b]  (conj(conj a b) b))\n          '() (reverse seq)))","user":"5804d5afe4b0a837a8b30cad"},{"code":"(fn [s] (mapcat (fn [x] (list x x)) s))","problem":32,"user":"51a8b576e4b08d8ec191b81a"},{"problem":32,"code":"#(mapcat \n  (fn[x]\n    (repeat 2 x)) \n  %)","user":"57ab41dde4b0b8559636fc79"},{"code":"#(mapcat (fn [a b] [a b]) % %)","problem":32,"user":"52f3ee17e4b05e3f0be25f19"},{"problem":32,"code":"(fn [coll]\n  (loop [[head & tail] coll\n         accum []]\n    (let [retval (concat accum [head head])]\n      (if (empty? tail)\n        retval\n        (recur tail retval)\n      )\n    )\n  )\n)","user":"59073e0fe4b047aa04b19950"},{"code":"#(reverse (reduce into () (map (partial repeat 2) %)))","problem":32,"user":"5142ea50e4b0c172af7558ca"},{"problem":32,"code":"#(reduce (fn [o l] (into o (repeat 2 l))) [] %)","user":"59ddae03e4b01968742fed65"},{"problem":32,"code":"(fn dup-seq [lat]\n(reduce concat (map #(take 2 (repeat %)) lat)))","user":"595e1ba7e4b066ee0a44b036"},{"code":"(fn [xs]\n  (loop [xs xs ys []]\n    (if (empty? xs) ys\n      (recur (rest xs) (conj ys (first xs) (first xs))))))","problem":32,"user":"526f2e16e4b03e8d9a4a7353"},{"code":"(fn [xs]\r\n  (reduce concat (map (fn [x] (list x x)) xs)))","problem":32,"user":"5052ab7ee4b0a561d07d8f20"},{"problem":32,"code":"(partial reduce #(concat % [%2 %2]) ())","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":32,"code":"(fn duplicate-seq\n  [coll]\n  (loop [in coll\n         out ()]\n    (if (empty? in)\n      (reverse out)\n      (recur (rest in) (cons (first in) (cons (first in) out))))))","user":"5c92105ce4b048ec896c59f7"},{"code":"#(apply concat (map (fn [a] (vector a a)) %))","problem":32,"user":"503f923fe4b00d1a725ff2ad"},{"problem":32,"code":"(fn [l]\n  (mapcat identity (for [x l] [x x])))","user":"54570d08e4b080a794c2c888"},{"problem":32,"code":"(fn duplicate [s]\n  (mapcat #(list % %) s)\n  )","user":"59f78b49e4b0ca45a743a30e"},{"problem":32,"code":"(fn\n\t[coll]\n\t(sort (reduce conj\n\t\t(map (fn [x] x) coll)\n\t\tcoll))\n\t)","user":"5d797deee4b02e6b30c93541"},{"problem":32,"code":"(fn [x] (reduce concat (map (fn [z] (take 2 (cycle (list z)))) x)))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":32,"code":"(fn [lst]\n   (loop [lst lst\n          aux ()]\n     (if (empty? lst)\n       (reverse aux)\n       (recur (rest lst) (conj aux (first lst) (first lst))))))","user":"57f81524e4b0d3187e900913"},{"problem":32,"code":"(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n    (conj (duplicate (rest coll)) (first coll) (first coll))\n    )\n  )","user":"5c3fab3de4b08cd430848e9e"},{"code":"(fn [x] (reverse ( reduce (fn [y z] (concat [z z] y)) '() x ) ) )","problem":32,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"(fn [s] \n  (loop [r s acc []]\n \t(if (empty? r)\n      (reverse acc)\n      (recur (rest r) (cons (first r) (cons (first r) acc)))\n      )\n  )\n)","problem":32,"user":"52ba43d0e4b07a9af57922cd"},{"code":"; (fn [xs] (reduce #(concat %1 (list %2 %2)) '() xs))\n(fn [xs] (reduce #(concat %1 (take 2 (repeat %2))) '() xs))","problem":32,"user":"4ffb38e8e4b0678c553fc3c6"},{"code":"(fn dup [x]                                                                 \n   (if (empty? x)                                                            \n     []                                                                      \n     (cons (first x) (cons (first x) (dup (rest x))))))","problem":32,"user":"516282c3e4b0e6d3c4734711"},{"problem":32,"code":"(fn [lst]\n  (mapcat (fn [a] (repeat 2 a)) lst)\n)","user":"5a984657e4b0d174b936c78a"},{"code":"(fn [lst]\n  (loop [org lst acc '()]\n           (if (empty? org) (reverse acc)\n (recur (rest org) (conj (conj acc (first org)) (first org))))))","problem":32,"user":"4e7dbe0c535db169f9c796e3"},{"problem":32,"code":"(fn dup-seq [s] \n  (mapcat #(list % %) s))","user":"5bcf95ace4b0e9689409ee2e"},{"problem":32,"code":"#(reduce (fn [x y] (concat x (repeat 2 y))) '() %1)","user":"57783873e4b0979f8965165c"},{"problem":32,"code":"(fn [[& inputs]] (reduce (fn [x y] (conj (conj x y) y)) [] inputs))","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"reduce #(concat %1 [%2 %2]) []","problem":32,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn [s] (sort (take (* 2 (count s)) (cycle s))))","problem":32,"user":"525c575be4b0cb4875a45d38"},{"code":"(fn [in]\n  (loop [out () qu in]\n    (if (empty? qu)\n      (reverse out)\n      (recur (cons (first qu) (cons (first qu) out)) (rest qu)))))","problem":32,"user":"536eb396e4b0fc7073fd6e74"},{"problem":32,"code":"(fn [in]\n (apply list\n  (reduce #(conj %1 %2 %2) [] in)))","user":"510608ebe4b01150e115ebe3"},{"code":"(fn [i] (reduce concat (map (fn [j] [j j]) i)))","problem":32,"user":"5238ca2de4b0d705d026eef6"},{"problem":32,"code":"(fn [s] (reduce #(conj %1 %2 %2)\n          []\n          s))","user":"531bf76fe4b08068f379ed96"},{"problem":32,"code":"(fn [xs]\n  (reverse (reduce (fn [accumulator value]\n             (conj accumulator value value))\n           () xs)))","user":"5e392de0e4b01d43a70e8dcb"},{"problem":32,"code":"(fn [x] (sort(concat x x)))","user":"5b1619e4e4b0cc2b61a3be77"},{"problem":32,"code":"#(loop [res [] ens %]\n   (if (empty? ens)\n     (into () (into () res))\n     (recur (conj (conj res (first ens)) (first ens)) (rest ens))\n   )\n)","user":"55acb648e4b03311e7b73296"},{"problem":32,"code":"(fn [collection]\n  (loop [result []\n         tempCollection collection]\n    (let [tail (rest tempCollection)\n          item0 (first tempCollection)\n          newResult (conj (conj result item0) item0)]\n      (if (empty? tempCollection)\n        result\n      (recur newResult tail)))))","user":"548f339ee4b0e286459a1233"},{"problem":32,"code":"(fn [s]\n  (reduce (fn [a b] (concat a (list b b))) '() s))","user":"563d12f9e4b0bfe05bf11845"},{"problem":32,"code":"(fn [coll] (loop [[x & xs] coll acc []] (if x (recur xs (conj (conj acc x) x)) acc)))","user":"56edf2dde4b04a395b9a044b"},{"problem":32,"code":"(fn\n      [seq]\n      (loop [s seq r '()]\n        (cond\n          (empty? s) (reverse r) \n          :else (recur (rest s) (conj r (first s) (first s)))\n          )\n        )\n      )","user":"52ade380e4b0c58976d9ac9b"},{"code":"(fn [xs] (mapcat (fn [x] [x x]) xs))","problem":32,"user":"4e6a3985535d8ccf87e9feb1"},{"code":"(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))","problem":32,"user":"51d662fce4b0154f82ab92ef"},{"problem":32,"code":"(comp (partial reduce into) (partial map (fn [x] [x x])))","user":"54cbe00ee4b057c6fda3a285"},{"problem":32,"code":"#(sort ( concat % %))","user":"5710c24be4b09c608db70439"},{"problem":32,"code":"(fn [colls]\n   (mapcat #(repeat 2 %) colls))","user":"5ebb4751e4b00a66d4a95262"},{"code":"(fn [s] (reduce  (fn [x y] (conj x y y)) '[] s))","problem":32,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"(fn [arg] (loop [x arg r []] (if-not x r (recur (next x) (concat r (repeat 2 (first x)))))))","problem":32,"user":"53512b55e4b084c2834f4ae0"},{"code":"mapcat (fn [x] (repeat 2 x))","problem":32,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":32,"code":"(partial mapcat #(list %1 %1))","user":"4e435681535dc968683fc4a1"},{"problem":32,"code":"(fn [coll] (reverse (reduce (fn [acc x] (concat [x x] acc)) '() coll)))","user":"545b486ae4b01be26fd7464f"},{"code":"(fn [sq] \n  (mapcat #(repeat 2 %) sq))","problem":32,"user":"50e35b2de4b094329ae7f4bb"},{"problem":32,"code":"#(seq (reduce (fn [c v] (conj (conj c v) v)) [] %))","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn f [x] (mapcat (fn [y] [y y]) x))","problem":32,"user":"500e7063e4b04a05d36fcc07"},{"problem":32,"code":"(fn dup [coll]\n           (loop [c coll\n                  d ()]\n             (if\n              (empty? c)\n               (reverse d)\n               (recur (rest c) \n                     (into d (concat (take 1 c)(take 1 c))\n                       )\n               )\n               )\n             ))","user":"5b9d3913e4b0c0b3ffbd4b37"},{"problem":32,"code":"(fn [col]\n  (mapcat #(vector % %) col))","user":"56c427bbe4b05cc29241ee94"},{"problem":32,"code":"(fn [s]\n  \"duplicate elements of a sequence\"\n  (loop [sq s\n         result []]\n    (if (seq sq)\n      (recur (rest sq) (conj result (first sq) (first sq)))\n             result)))","user":"56fc9a2de4b08d47c977819b"},{"problem":32,"code":"#(reverse (reduce (fn [ans x] (cons x (cons x ans))) [] %))","user":"57c815ade4b05aa3c4741d14"},{"problem":32,"code":"(fn duplicate [coll]\n  (apply concat (map #(vector % %) coll)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":32,"code":"(fn [s] (reduce (fn [acc item] (concat acc (list item item))) '() s))","user":"5d2f5ba5e4b01671435dbcbf"},{"problem":32,"code":"#(reduce (fn [acc x] (conj acc x x)) [] %)","user":"5446c89ce4b032a45b8693b5"},{"problem":32,"code":"reduce (fn [xs x] ( concat xs (cons x (cons x ())))) ()","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn [xs]\n  (mapcat (fn [el] [el el]) xs))","problem":32,"user":"50bd6033e4b0594b91591c66"},{"problem":32,"code":"(fn double-elements [a-seq]\n   (if (empty? a-seq)\n      '()\n      (conj (conj (double-elements (rest a-seq)) (first a-seq)) (first a-seq))\n  )\n)","user":"55c387e4e4b0e31453f6498b"},{"problem":32,"code":"(fn [lista] (reduce #(concat %1 [%2 %2]) '() lista))","user":"5bcc9e7ae4b07a9b28b10114"},{"problem":32,"code":"#(apply concat (for [x %] (take 2 (repeat x))))","user":"5e13a6b7e4b099d064963001"},{"problem":32,"code":"#(reduce concat \n         (map (fn [x] (take 2 (repeat x))) %))","user":"5962af8ce4b066ee0a44b0b8"},{"problem":32,"code":"(fn [s]\n  (reduce concat [] (map #(vector %1 %1) s)))","user":"570794d8e4b0b0fb43fd068b"},{"code":"(fn [xs]\n  ((fn impl [xs rs]\n    (if (empty? xs)\n      (reverse rs)\n      (impl (next xs) (cons (first xs) (cons (first xs) rs)))))\n   xs []))","problem":32,"user":"521392bce4b0d32679a5065e"},{"code":"(fn [xs]\n  (reduce (fn [ys y] (conj ys y y))\n          []\n          xs))","problem":32,"user":"511442d0e4b0e9c109bb74d5"},{"problem":32,"code":"(fn [coll]\n  (apply concat \n   (map list coll coll)))","user":"59225498e4b09b4ee5954c8c"},{"code":"#(loop [acc [], remaining %]\n  (if (empty? remaining)\n    acc\n    (recur (conj acc (first remaining) (first remaining))\n           (rest remaining))))","problem":32,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":32,"code":"(fn dup-sort [seqq] (for [i seqq j [1 2]] i))","user":"5e380e72e4b01d43a70e8db0"},{"problem":32,"code":"(fn [coll]\n    (reduce (fn [a v]\n              (conj a v v)) [] coll))","user":"5ff8ead1e4b06df49cee14ab"},{"problem":32,"code":"(fn [xs]\n  (apply concat\n    (map #(vector % %) xs)))","user":"54448e84e4b032a45b869393"},{"code":"(fn dups [x]\n  (if (empty? x) '()\n   (let [h (first x)\n         t (rest x)]\n     (conj (dups t) h h))))","problem":32,"user":"52d6889ae4b09f7907dd1361"},{"problem":32,"code":"(fn [x] (reverse (loop [acc '()\n               h (first x)\n               r (rest x)]\n          (if (nil? h)\n            acc\n            (recur (into acc (list h h)) (first r) (rest r))))))","user":"53663e82e4b0243289761e73"},{"code":"#(reverse (reduce (fn [s x] (conj s x x)) '() %))","problem":32,"user":"527513d8e4b03e8d9a4a74bd"},{"problem":32,"code":"(fn dup-eles\n  ([xs]\n   (dup-eles xs []))\n  ([xs acc]\n   (if (seq xs)\n     (dup-eles (rest xs) (concat acc [(first xs) (first xs)]))\n     acc)))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn jdup\n  [lst]\n  (if (empty? lst)\n    '()\n    (conj (jdup (rest lst)) (first lst) (first lst))))","problem":32,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [x] (apply interleave (take 2 (repeat x))))","problem":32,"user":"4f0514b4535dcb61093f6bf0"},{"code":"#(reduce (fn [x y] (concat x (repeat 2 y) )) [] %)","problem":32,"user":"4faf2f4ce4b081705acca251"},{"problem":32,"code":"(fn [c] (apply concat (map #(list %1 %1) c)))","user":"5498c4cfe4b0b312c081ff85"},{"problem":32,"code":"#( loop [ x % res [] ] ( if (empty? x) res ( recur ( rest x ) ( conj ( conj res (first x)) (first x)) ) ) )","user":"5b3aa98be4b02d533a91bbca"},{"problem":32,"code":"(fn dupe [x & [y]]\n  (if y\n    (if (= (first x) nil)\n      y\n      (dupe (rest x) (conj y (first x) (first x)))\n      )\n    \n    (dupe x [])\n    )\n  )","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn dup-seq [coll]\n  (reduce (fn [l x]\n      (conj l x x))\n\t  []\n          coll))","problem":32,"user":"4e4bd94b535dc968683fc4d7"},{"problem":32,"code":"(fn [x]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))","user":"5142154ce4b0b50abeb46b2b"},{"problem":32,"code":"(fn [a] (seq (reduce #(into %1 [%2 %2]) [] a)))","user":"5655e056e4b0f9d632dd849b"},{"problem":32,"code":";(fn duplicate [coll]\n;  (mapcat \n;    (fn [x] [x x])\n;    coll))\n\n#(interleave % %)","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"(fn duplicate [coll]\r\n  (reduce concat (map #(repeat 2 %) coll) ))","problem":32,"user":"502ac868e4b0614b5299611a"},{"code":"(fn [s]\n  (loop [ls s result []]\n    (let [element (first ls)]\n      (if (= [] ls)\n        result\n        (recur (rest ls) (conj (conj result element) element))))))","problem":32,"user":"4e117dea535d04ed9115e7c9"},{"problem":32,"code":"(fn [l] (apply concat (map vector l l)))","user":"54431b6ee4b032a45b869385"},{"problem":32,"code":"reduce (fn [coll x] (concat coll (vector x x))) []","user":"4fe8b1d9e4b07c9f6fd12c71"},{"problem":32,"code":"(fn [a] (reduce #(conj %1 %2 %2) '() (reverse a)))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"#(reverse (reduce (fn [x y] (conj (conj x y) y)) nil %))","problem":32,"user":"519964cbe4b0aa09cbc0b849"},{"problem":32,"code":"(fn duplicate [x]\n   (if (empty? (rest x))\n     (conj (list) (first x) (first x))\n     (conj (duplicate (rest x)) (first x) (first x))\n     )\n  )","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn dup [[h & t]]\n  (cons h\n    (cons h\n      (when (seq t)\n        (dup t)))))","problem":32,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"reduce #(-> % (conj %2) (conj %2)) []","problem":32,"user":"4eb5750a535d7eef30807366"},{"code":"reduce (fn [acc, i] \n         (concat acc [i i])) '()","problem":32,"user":"52d2e2a9e4b099d49816f0b8"},{"problem":32,"code":"(fn [xs]  (mapcat #(conj [%] %) xs))","user":"50a8bb65e4b0deba384a58bd"},{"code":"(fn f ([x] (f x []))\n      ([x v]\n        (if-not (empty? x) (recur (rest x) (conj v (first x) (first x)))\n                           (reverse (reduce conj '() v)))))","problem":32,"user":"51eadb98e4b0f1f103a0d153"},{"code":"(fn [coll] (mapcat #(conj (empty coll) %1 %1) coll))","problem":32,"user":"52f69565e4b047fd55836fb9"},{"code":"#(reduce (fn [acc x] (conj (conj acc x) x)) [] %)","problem":32,"user":"53736f65e4b06d7f452d9e0f"},{"problem":32,"code":"(fn [S]\n   (reduce (fn [lst x] (concat lst (list x x))) () S)\n)","user":"5649615be4b0284900eef641"},{"code":"(fn [coll]\r\n  (apply concat (map #(list % %) coll)))","problem":32,"user":"4df407c3535d08e6dec9fe2e"},{"problem":32,"code":"(fn [arg1] (reverse (reduce #(conj (conj % %2) %2) '() arg1)))","user":"5720ba36e4b0c5bde472c09c"},{"problem":32,"code":"#(loop [a % r [] ]\n    (if-let [e (first a)] \n      (recur (rest a) (concat r [e e]))\n      r))","user":"54b45938e4b05787c3b1638f"},{"code":"(fn[col] (mapcat #(vector % %) col))","problem":32,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":32,"code":"#(mapcat identity (for [me-list %] [me-list me-list]))","user":"5de8648de4b0986d99407f7c"},{"problem":32,"code":"(fn dup-each [coll]\n  (loop [acc [], in coll]\n    (if (zero? (count in))\n      acc\n      (recur (conj acc (first in) (first in)) (rest in)))))","user":"58bc08fee4b0888cdc949d08"},{"problem":32,"code":"(fn [x](reverse (reduce #(cons %2 (cons %2 %1)) '() x)))","user":"54bfc203e4b0ed20f4ff6f08"},{"code":"(fn ! [c] (if (empty? c) '() (conj (! (rest c)) (first c) (first c))))","problem":32,"user":"4f88f57ae4b033992c121c73"},{"problem":32,"code":"(fn dup [s] (apply concat (map #(repeat 2 %) s)))","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn ([coll] \r\n(loop [coll coll newcoll ()]\r\n  (if (empty? coll)\r\n    (reverse newcoll)\r\n    (recur (rest coll) (conj newcoll (first coll)(first coll)))))))","problem":32,"user":"4de8fb73535d08e6dec9fdff"},{"problem":32,"code":"(fn d[a] (if (not-empty a)(cons (first a) (cons (first a) (d (rest a)))) []))","user":"59e8bb43e4b0249b72820735"},{"problem":32,"code":"(fn [s] (reverse (\n         reduce (fn [ss i] (\n                            cons i (cons i ss))) '() s)))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":32,"code":"(fn[coll]\n   (loop [result []  xs coll]\n     (if (empty? xs)\n        result\n        (let [x (first xs)]\n          (recur (conj (conj result x) x) (rest xs))))))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":32,"code":"(fn dup [coll]\n  (reduce concat (for [x coll] (list x x))))","user":"5decd4fde4b093ff7172757b"},{"problem":32,"code":"(fn[collection] ( reverse ( reduce (fn[coll n ] (conj coll n n) ) () collection)  ))","user":"5cf53196e4b087f62be35a94"},{"code":"(fn[l] \n  (reduce #(conj %1 %2 %2) '[] l))","problem":32,"user":"52b405e1e4b0c58976d9ad15"},{"problem":32,"code":"(fn [i] (loop\n  [x 0 coll i  col (empty coll)]\n  (if (= x (count coll))\n    (reverse col)\n    (recur\n      (inc x)\n      coll\n      (cons (get coll x) (cons (get coll x) col ) )))))","user":"598d0dc3e4b02b9968b84d18"},{"code":"(fn [xs]\n  (apply concat\n    (for [x xs]\n      [x x])))","problem":32,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":32,"code":"(fn [my-seq]\n  (loop [x my-seq\n         rtn-ele []]\n    (if (empty? x)\n      (apply list rtn-ele)\n      (recur (rest x) (conj rtn-ele (first x) (first x)))\n      )\n    )\n  )","user":"5b97c521e4b0c0b3ffbd4a9a"},{"problem":32,"code":"(fn [x] (reduce #(conj %1 %2 %2) [] x))\n;#(interleave % %)","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [s]\n  (mapcat\n    (fn [x] [x x])\n    s))","problem":32,"user":"50427899e4b0add3005c0fc2"},{"code":"reduce (fn [x y] (conj x y y)) []","problem":32,"user":"52433e0fe4b076204b44fab3"},{"problem":32,"code":"(fn [in]\n  (loop [leftover in\n         result []]\n    (if (empty? leftover)\n      result\n      (let [[head & tail] leftover]\n        (recur tail (conj result head head))))))","user":"5189bf9ee4b0288ada3dbdaf"},{"problem":32,"code":"(fn [inarray ] (reduce (fn [assoc row] (conj (conj assoc row) row) )  [] inarray))","user":"53c6c9dfe4b00fb29b2212a1"},{"problem":32,"code":"(fn [coll] (reduce (fn [a, b] (conj (conj a b) b)) [] coll))","user":"5a9ac061e4b0d174b936c7c1"},{"problem":32,"code":"reduce (fn [acc xs] (conj acc xs xs)) []","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn dup\n  [a]\n  (apply concat (map vector a a)))","problem":32,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [x]\n  (loop [i x retval '()]\n    (if (seq i)\n      (recur (rest i)\n             (conj (conj retval (first i)) (first i)))\n      (reverse retval)\n      )))","problem":32,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"problem":32,"code":"(fn [listy]\n  (loop [tmpl listy newl '()]\n    (if (empty? tmpl)\n      (reverse newl)\n      (recur (rest tmpl) (conj newl (first tmpl) (first tmpl))))))","user":"59369515e4b02506e01a297e"},{"problem":32,"code":"(fn [s] (mapcat #(vector %1 %1) s))","user":"55f081bbe4b06e875b46ce25"},{"problem":32,"code":"#(reduce (fn [default each] (conj (conj default each) each)) [] %)","user":"57606cfde4b08062f99a4e95"},{"code":"(fn wtf [ar]\n  #_=>   #_=> (loop [remaining ar\n  #_=>   #_=> final []]\n  #_=>   #_=> (if (empty? remaining)\n  #_=>   #_=> final\n  #_=>   #_=> (let [[part & watev] remaining\n  #_=> final (conj final part part)]\n  #_=> (recur watev final)))))","problem":32,"user":"5279cb1ae4b03e8d9a4a753f"},{"code":"reduce (fn [a n] (concat a `(~n ~n))) ()","problem":32,"user":"4dd52e29535dae65d5c462e5"},{"code":"#(interleave (seq %) (seq %))","problem":32,"user":"4e8dbab3535d65386fec2139"},{"code":"(fn dup [input] (reduce concat (map (fn [x] [x x]) input)))","problem":32,"user":"536db108e4b0fc7073fd6e61"},{"code":"(fn [lst] (reduce #(conj (conj % %2) %2) [] lst))","problem":32,"user":"508bed64e4b0be79e5b189cf"},{"problem":32,"code":"(fn list-replicate [list]\n  (mapcat (partial repeat 2) list))","user":"582625d3e4b051871117bef2"},{"code":"(fn dup[x]\n  (loop [stuff x\n        retval '()]\n      (if (empty? stuff)\n        (reverse retval)\n        (recur\n          (rest stuff)\n          (cons (first stuff) (cons (first stuff) retval))))))","problem":32,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":32,"code":"(fn [x]\n  (apply concat (map list x x)))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":32,"code":"(fn rl [x] (if (empty? x) x (let [a (rl (rest x))] (cons (first x) (cons (first x) a)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [ls] (->> ls (reduce #(conj %1 %2 %2) ()) (reverse)))","problem":32,"user":"4f03ba9c535dcb61093f6b58"},{"problem":32,"code":"(fn func [l] (if (empty? l) [] (cons (first l) (cons (first l) (func (rest l))))))","user":"56cb483ee4b0ea9b8538f72d"},{"problem":32,"code":"(fn \n  [x]\n  (reverse (reduce #(conj %1 %2 %2) '() x)))","user":"58976bfde4b00487982d52bc"},{"problem":32,"code":"#(reverse (reduce (fn [col value] (conj (conj col value) value)) '() %))","user":"5c481764e4b0e06e1360a3ba"},{"code":"(fn \n  [x]\n  (interleave x x))","problem":32,"user":"4ea95e56535d7eef30807302"},{"problem":32,"code":"(fn dup [items] (\n    if (nil? (first items)) '() (\n  \tconcat [(first items)] [(first items)] (dup (rest items))\n    )\n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":32,"code":"(fn [x] (apply concat (map list x x)))","user":"56897739e4b0dcc4269f407d"},{"problem":32,"code":"(fn [xs] (for [x xs\n               y [x x]]\n           y))","user":"4ea03f70535d7eef308072a1"}]