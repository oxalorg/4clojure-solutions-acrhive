[{"problem":90,"code":"(fn [s1 s2]\n    (set (for [x (seq s1) y (seq s2)] [x y])))","user":"57fc0719e4b0d3187e900987"},{"problem":90,"code":"(fn [setA setB]\n  (into #{}\n        (for [a setA\n              b setB]\n          [a b])))","user":"5640eb50e4b08d4f616f5eec"},{"problem":90,"code":"(fn \n  [a b]\n  (reduce conj #{} (for [x a y b]\n    [x y])))","user":"56b1ab17e4b0982f16b37df1"},{"problem":90,"code":"(fn [F S]\n  (set \n  \t(for [First F Second S] [First Second])\n  )\n )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":90,"code":"(fn [set1 set2] (set (for [ x set1 y set2] [x y])))","user":"54e4edcae4b024c67c0cf7f3"},{"problem":90,"code":"(fn [sx sy] (into #{} (mapcat (fn [x] (map #(conj (vector x) %) sy)) sx)))","user":"57e2e1bde4b0bfb2137f5a8f"},{"problem":90,"code":"(fn [a b]\n   (set (for [x a, y b]\n      [x y])))","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn cartesian-product [coll-1 coll-2] (into #{} (mapcat #(map (partial vector %) coll-2) coll-1)))","problem":90,"user":"52485f02e4b05ef8e38e63d3"},{"problem":90,"code":"#(set (for [s1 %1 s2 %2] (vector s1 s2)))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn [s1 s2] (set\n              (mapcat\n                (fn [x1] (map (fn [x2] (vector x1 x2)) s2))\n                s1)))","problem":90,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn[s1,s2] (set (for [x s1, y s2] [x y])))","problem":90,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":90,"code":"(fn [s1 s2] \n  (into #{} (for [x s1 y s2] [x y])))","user":"57d1a0e6e4b0bd073c20236d"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat (fn [a_elem] (map (fn [b_elem] [a_elem b_elem]) b))\n        a)))","user":"4f213e2ee4b0d66497709fcf"},{"problem":90,"code":"#(set (for [x % y %2]\n           [x y]))","user":"539f4e9ee4b0ca733b974498"},{"problem":90,"code":"(fn [xs ys]\n   (let [cp (atom #{})]\n     (doseq [x xs]\n       (doseq [y ys]\n         (reset! cp (conj @cp [x y]))))\n     @cp))","user":"603f6623e4b0d5df2af2231f"},{"problem":90,"code":"(fn [x y]\n  (set\n  (for [a x b y]\n    [a b])))","user":"54903056e4b0b312c081ff2e"},{"code":"#(set (for [x %1\n       y %2]\n   (vector x y)))","problem":90,"user":"51000111e4b00d7ad4cab15e"},{"problem":90,"code":"(fn F [xs ys]\n  (set\n    (reduce concat\n      (for [x xs]\n        (map #(vector x %) ys)))))","user":"4f856adfe4b033992c121c44"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat (fn [s] (map #(conj [%] s) s1)) s2)))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":90,"code":"(fn [a b]\n  (set (for [i a j b] (vector i j))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":90,"code":"(fn cartesian [lst1 lst2]\n  (set(for [a lst1 b lst2] [a b])))","user":"59e12c94e4b08badc2a0c509"},{"problem":90,"code":"(fn [x y] (set (mapcat #(map (fn [z] (vector z %)) x) y)))","user":"573ce277e4b05c31a32c080b"},{"problem":90,"code":"(fn cartesian-product\n  [coll1 coll2]\n  (into #{} (for [x coll1 y coll2] [x y])))","user":"5eec1001e4b07c55ae4a0502"},{"problem":90,"code":"(fn [s1 s2] (set (apply concat (map #(map (partial vector %) s2) s1))))","user":"538ca203e4b0b51d73faae5f"},{"problem":90,"code":"(fn [a b] (set (for [ x a y b ] [x y])))","user":"55a21f1ce4b0acc240e3151f"},{"code":"(fn [xs ys] (set (for [y ys x xs] [x y])))","problem":90,"user":"53403110e4b085b17e897da6"},{"code":"#(set\n  (for [x (seq %1) y (seq %2)]\n   [x y]\n    )\n  )","problem":90,"user":"5298d3f4e4b02ebb4ef75068"},{"code":"(fn cp \n  ([s1 s2] (cp s1 s2 #{}))\n  ([s1 s2 result]\n    (if (empty? s1)\n        (set result)\n        (recur (rest s1) s2 (concat result \n                              (map (partial vector (first s1)) s2))))))","problem":90,"user":"4fbb9d80e4b081705acca2ea"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1 y s2]\n              [x y])))","user":"52d38c51e4b099d49816f0c5"},{"problem":90,"code":"(fn [ka le] (set (for [k ka l le] [k l])))","user":"5485b402e4b0e286459a11b0"},{"problem":90,"code":"(fn prod [a b]\n  (set\n    (for [x a\n           y b]\n        [x y]\n    )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":90,"code":"(fn [x y]\n (set (for [x x y y]  [x y])))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"#(set (for [n %1 m %2] [n m]))","problem":90,"user":"4e9519b4535dbda64a6f6b2d"},{"code":"(fn [a1 a2]\n      (set (for [i a1\n             j a2]\n         [i j])))","problem":90,"user":"4fa3c137e4b081705acca193"},{"code":"(fn [a b] (set (mapcat (fn [x] (map #(vector x %) b)) a)))","problem":90,"user":"5102ac9de4b00c483ae176fa"},{"problem":90,"code":"(fn [set1 set2]\n     (set (mapcat (fn [v]\n                    (map #(vector v %) set2)) set1)))","user":"5f810e97e4b0c071e6c840ed"},{"code":"(fn [a b] (set (for [aa a bb b] [aa bb])))","problem":90,"user":"5106bc8ae4b01150e115ebec"},{"code":"#(set (for [x %1\n              y %2]\n          [x y]))","problem":90,"user":"525d490ae4b0cb4875a45d70"},{"problem":90,"code":"(fn cartesian-product\n  [s1 s2]\n  (set (mapcat (fn [x] (map #(vec ((partial list x) %)) s2)) s1)))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn cartesian[c1 c2]\r\n  (into #{} (concat (mapcat (fn[x] (map (fn[y] [x y]) c2)) c1))))","problem":90,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"(fn [a b] (apply hash-set (mapcat #(map (partial vector %) b) a)))","problem":90,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn [A B]\n  (set (for [x A y B]\n          [x y])))","problem":90,"user":"4ff304f4e4b0678c553fc343"},{"code":"#(set (for [x1 %1 x2 %2] [x1 x2]))","problem":90,"user":"4f569a3ce4b0a7574ea71828"},{"problem":90,"code":"(fn [x y]\n    (loop [s_x x xy #{}]\n          (if (empty? s_x)\n              xy\n              (recur (rest s_x) (let [e_x (first s_x)]\n                                     (loop [s_y y s_xy xy]\n                                           (if (empty? s_y)\n                                               s_xy\n                                               (recur (rest s_y) (conj s_xy [e_x (first s_y)])))))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"#(set (for[x (seq %1) y (seq %2)] [x y]))","problem":90,"user":"52bbd09ee4b07a9af57922ee"},{"problem":90,"code":"(fn [s1 s2]\n    (set (for [x s1, y s2]\n      [x y])))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":90,"code":"(fn [a b]\n  (set (apply concat (for [e a] (for [f b] [e f])))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"(fn [x y]\n  (set (apply concat (map #(map (partial vector %) y) x))))","problem":90,"user":"4ead2841535d7eef3080731e"},{"problem":90,"code":"(fn [seta setb]\n  (set \n   (for \n     [a seta\n      b setb]\n    [a b])))","user":"5da4fc6be4b000c986472bff"},{"problem":90,"code":"(fn cross [coll1 coll2]\n  (set (apply concat (map (fn [e]\n         (map vector (repeat e) (reverse coll2))) (reverse coll1)))))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":90,"code":"(fn [s1 s2] \n  (set \n     (for [x s1\n        y s2]\n    \t[x y])))","user":"532686e6e4b09d4e7a9b54ef"},{"code":"(fn foo\n       [x y]\n       (set\n         (map\n         vector\n         (flatten (map (fn [ix] (repeat (count y) ix)) x))\n         (flatten (repeat (count x) (seq y))))))","problem":90,"user":"51b5a6e0e4b0f094dd986fce"},{"code":"(fn prod [s1 s2]\n   (into #{} (for [a s1 b s2] [a b])))","problem":90,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":90,"code":"(fn [a b] (set (mapcat #(map (partial vector %) b) a)))","user":"56b2573ce4b0982f16b37e02"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} \n        (for [x s1\n              y s2]\n          [x y])))","user":"559622cee4b0c79f6e1db975"},{"problem":90,"code":"(fn [s1 s2]\n  (set (mapcat #(map (fn [x] (vector % x)) s2) s1)))","user":"5c8860bce4b048ec896c5928"},{"problem":90,"code":"(fn [seta setb]\n  (set (for [a seta b setb]\n         [a b])))","user":"53576356e4b04ce2eb3ed27a"},{"problem":90,"code":"(fn [a b]\n  (loop [burn a out []]\n    (if (empty? burn)\n      (set out)\n      (recur (rest burn) (into out (map #(vector (first burn) %) b))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":90,"code":"#(into #{} (for [x %1 y %2][x y]))","user":"5790e62ae4b0ebec4cfb75b0"},{"problem":90,"code":"(fn [z z2] \n  (set (for [x z y z2]\n  [x y])))","user":"56f4cedce4b046a417f92063"},{"problem":90,"code":"(fn cartesian-product [a b]\n  \t(reduce (fn [coll x] (reduce #(conj %1 [x %2]) coll b)) #{} a)\n  )","user":"602cc4d4e4b0d5df2af22274"},{"code":"(fn [s1 s2]\n  (loop [outer (seq s1), inner (seq s2), prod ()]\n    (if (empty? outer)\n      (set prod)\n      (if (empty? inner)\n        (recur (rest outer) (seq s2) prod)\n        (recur \n          outer \n          (rest inner) \n          (conj prod [(first outer) (first inner)]))))))","problem":90,"user":"4ea4fe1f535d7eef308072cf"},{"code":"#(set (for [x (vec %) y (vec %2)] (vector x y)))","problem":90,"user":"52ce8648e4b07d0d72b27390"},{"problem":90,"code":"(fn [u v]\n  (set (reduce \n        (fn [a x] \n          (concat a \n                  (map #(vector x %) v))) \n          [] u)))","user":"541ef7e2e4b01498b1a71a92"},{"problem":90,"code":"(fn [x y]\n        (loop [a x b y r #{}]\n                (cond\n                        (empty? a) (set (sort r))\n                        (empty? b) (recur (rest a) y r)\n                        (= true) (recur a (rest b) (cons [(first a) (first b)] r))\n\n                )\n        )\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":90,"code":"(fn [s1 s2]\n    (set\n      (for [i s1 j s2] [i j])\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y])))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [s1 s2]\n  (set (mapcat (fn [x] (map #(vector x %) s2)) s1)))","problem":90,"user":"5300158ae4b0d8b024fd370f"},{"problem":90,"code":"(fn [x y] (into #{} (mapcat (fn [n] (map (fn [m] (vector n m)) y)) x)))","user":"581e76dfe4b04b46fc4b0f29"},{"code":"(fn cartesian\n  [coll1 coll2]\n  (set (for [x coll1 y coll2]\n    (vector x y)))\n)","problem":90,"user":"52527192e4b0541d1855b8af"},{"problem":90,"code":"#(into #{} (for [x %1 y %2]  [x y]))","user":"55896a0ce4b059ccff29b204"},{"problem":90,"code":"(fn cpr [xs ys]\n  (set (apply concat (for [x xs] (for [y ys] [x y])))))","user":"560ae540e4b05f002753df0d"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat (fn [n] (map #(vector n %) b)) a)))","user":"541ddadbe4b01498b1a71a84"},{"problem":90,"code":"(fn cart-prod [coll1 coll2]\n\t(set (for [c1 coll1 c2 coll2] \n           [c1 c2])))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [f s1 s s2] [f s])))","user":"53b05a36e4b047364c044481"},{"problem":90,"code":"(fn [set-a set-b]\n  (set (for [x set-a y set-b]\n    [x y]\n  ))\n)","user":"51f09f3de4b0274c496158d7"},{"code":"(fn [s1 s2]\n  (set (mapcat #(map (fn [x] [% x]) s2) s1)\n  ))","problem":90,"user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [a b] (apply hash-set (for [x a y b] [x y])))","problem":90,"user":"4ea365e2535d7eef308072c5"},{"problem":90,"code":"(fn [s1 s2]\n    (let [items (for [i1 s1\n                      i2 s2]\n                  [i1 i2])]\n      (into #{} items)))","user":"54d90b36e4b0a52adc2e2049"},{"code":"(fn [s1 s2] (set (for [v1 s1, v2 s2] [v1 v2])))","problem":90,"user":"5220909fe4b0e6a83c89259f"},{"problem":90,"code":"(fn ok\n  [itemI itemII]\n  (into #{} (for [x itemI\n                  y itemII]\n              [x y])))","user":"5df0f338e4b093ff717275c6"},{"code":"(fn [a b] (set (mapcat #(map (partial list %) b) a)))","problem":90,"user":"4e80e0f2535db62dc21a62b8"},{"problem":90,"code":"(fn [l1 l2]\n  (into #{} \n     (mapcat \n       (fn [i] (for [j l2] (vector i j))) l1)))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":90,"code":"#(set  (for [x %1\n             y %2]\n          [x y]))","user":"59f15e20e4b0966464fe6a5a"},{"problem":90,"code":"(fn [a b]\n  (set\n   (mapcat \n     (fn [x] \n       (partition 2 (interleave (repeat x) b)))\n     a)\n  \t)\n  )","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":90,"code":"(fn [set1 set2]\n   (reduce\n    (fn [acc1 e1]\n      (reduce\n       (fn [acc2 e2]\n         (conj acc2 [e1 e2]))\n       acc1\n       set2))\n    #{}\n    set1))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"#(apply hash-set (for [a %1, b %2]\n                      [a b]))","problem":90,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":90,"code":"(fn  [x y]\n  (into #{}\n    (for [a x b y]\n      [a b])))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [set-a set-b] (set (for [a set-a b set-b] [a b])))","problem":90,"user":"530bf87ee4b02e82168697d5"},{"code":"#(set (for [a % b %2]\n    [a b]))","problem":90,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [x s1 y s2] (vector x y))))","user":"5271605ae4b03e8d9a4a73ed"},{"problem":90,"code":"(fn [s1 s2]\n  (set (reduce (fn [s x] (clojure.set/union s (map #(vector % x) s1))) #{} s2)))","user":"570459a9e4b0b0fb43fd0662"},{"problem":90,"code":"(fn [set1 set2]\n  (loop [xs set1\n         result #{}]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (clojure.set/union result (set (map (fn [b] [(first xs) b]) set2)))))))","user":"5524120fe4b0882d96d091b7"},{"problem":90,"code":"(fn[c1 c2]\n\t(set \n     (for [x c1\n\t  \ty c2\n\t  \t:let [z [x y]]]\n\t  \tz)))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [s t] (set (reduce into (map (fn [x] (map #(vector x %) t)) s))))","problem":90,"user":"50464831e4b011c5dfee771f"},{"code":"(fn cartesian-product [set1 set2]\n  (set (for [s1 set1\n       s2 set2]\n       \t [s1 s2])))","problem":90,"user":"4e4bd94b535dc968683fc4d7"},{"problem":90,"code":"#(->> (map (fn [a] (map (fn [b] [b a]) %1)) %2) flatten (partition 2) set)","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn [set-1 set-2]\n  (apply hash-set (for [x set-1 y set-2] [x y])))","problem":90,"user":"50ed3c6be4b01236b1d4983b"},{"problem":90,"code":"(fn cartesian-prod-of-set\n  [set1 set2]\n  (set\n    (for [x set1\n          y set2]\n      [x y])))","user":"5a61bf79e4b0512ff01cd97b"},{"code":"(fn [s1 s2]\n  (reduce \n    #(set (concat % (zipmap s1 (repeat %2))))\n    #{} s2))","problem":90,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (into #{} (for [x1 s1 x2 s2]\n              [x1 x2])))","user":"5693a53ee4b0dcc4269f4106"},{"problem":90,"code":"(fn [x y]\n       (let [subf (fn [a b] (map #(vector a %) b))]\n         (set (mapcat #(subf % y) x))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":90,"code":"(fn [x y]\n  (into #{} (mapcat (fn [a]\n                      (map (fn [b]\n                             [a b]) y)) x)))","user":"5756e218e4b02ea1147992e5"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n    (for [i1 s1 i2 s2]\n      (vector i1 i2))))","user":"5813e208e4b0f478707a061b"},{"code":"(fn cp [s1 s2] (set (mapcat #(map vector s1 (repeat %)) s2)))","problem":90,"user":"511026b1e4b04c71fce993ec"},{"problem":90,"code":"(fn carte [x y] (set (for [a x b y] [a b])))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn [set1 set2]\n  (into #{}\n  (apply concat\n  (for [a set1]\n    (for [b set2]\n      [a b])))))","problem":90,"user":"4dbdce65535d020aff1edf4d"},{"code":"(fn [s1 s2]\n  (reduce \n    (fn [acc e1]\n      (reduce\n        (fn [acc e2] (conj acc [e1 e2]))\n        acc s2))\n   #{} s1))","problem":90,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (set (for [x xs y ys]\n         [x y])))","user":"518b8561e4b0f028e99addef"},{"code":"(fn [xs ys]\n (into #{} ((fn cartesian [xs ys]\n  ;; NOTE: This inner function works for arbitrary sets, even infinite ones.\n  ;; It returns a lazy seq rather than a set.\n  ;; For an explanation, see: https://mulk.eu/j/126\n  (let [skip (gensym)]\n    (letfn [(reverse-prefices [items]\n              (reductions conj nil items))\n            (pad [items]\n              (lazy-cat items (repeat skip)))\n            (skip? [x]\n              (identical? skip x))]\n      (let [xpres (rest (reverse-prefices (pad xs)))\n            ypres (map reverse (rest (reverse-prefices (pad ys))))]\n        (apply concat\n               (take-while          ;deal with the finite case\n                seq\n                (map (fn [xprefix yprefix]\n                       (filter (fn [pair] (not (some skip? pair)))\n                               (map vector xprefix yprefix)))\n                     xpres\n                     ypres))))))) xs ys)))","problem":90,"user":"4e8338d6535db62dc21a62d3"},{"problem":90,"code":"(fn [a b] (into #{} (for [a a b b] [a b])))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn [set1 set2]\n  (loop [el1 (first set1)\n         rest1 (rest set1)\n         res #{}]\n    (let [li1 (take (count set2) (repeat el1))\n          partial_res (for [[k v] (zipmap set2 li1)]\n                            [v k])]\n      (if (empty? rest1)\n        (set (concat res partial_res))\n        (recur (first rest1) (rest rest1) (concat res partial_res))))))","problem":90,"user":"537881a4e4b06839e8705e46"},{"code":"(fn [xs vs] (set (mapcat #(map (partial vector %) vs) xs)))","problem":90,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":90,"code":"(fn [xs ys]\n  (reduce #(into %1 (map (fn [x] [x %2]) xs)) #{} ys))","user":"55316b8ae4b076ab5578f825"},{"problem":90,"code":"#(reduce (fn x [acc e] (into acc (map (fn [a] (vector e a)) %2))) #{} %1)","user":"5761513fe4b0994c1922fb87"},{"problem":90,"code":"#(set(for [ x % y %2] [x y]))","user":"57ee41eae4b0bfb2137f5bb0"},{"code":"#(set (mapcat (fn [x] (map (fn [y] (vector x y)) %2)) %))","problem":90,"user":"4f045946535dcb61093f6bba"},{"code":"(fn [x y]\n  ((fn [elements]\n  (loop [ret #{}\n         elems elements]\n    (if (empty? elems)\n      ret\n      (recur (clojure.set/union ret (first elems)) (rest elems))))) (map (fn [z] ((fn [x elements]\n  (loop [ret #{}\n         elems elements]\n    (if (empty? elems)\n      (set ret)\n      (recur (conj ret [x (first elems)]) (rest elems)))))\n z y)) x)))","problem":90,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":90,"code":"(fn [a b] (->> (reduce #(concat % (map (partial list %2) b)) [] a) (into #{})))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (apply concat (map (fn [x] (map (fn [y] [x y]) coll2)) coll1))))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":90,"code":"(fn [a b]\n        (into #{} (for [xa a xb b] [xa xb])))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":90,"code":"(fn [x y] (into #{} (for [xi x yi y] [xi yi])))","user":"518ba795e4b0f028e99addf0"},{"problem":90,"code":"(fn [x y]\n    (set(for [lst1 x\n          lst2 y]\n        [lst1 lst2])))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"#(set \n  (reduce concat \n  \t(for [i %1\n    \t  j %2]\n    \t#{[i j]})))","problem":90,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn [x y]\n  (set (mapcat (fn [x1]\n         (map (fn [y1] [x1 y1]) y)) x)))","problem":90,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n        (for [s1 set2\n              s2 set1]\n          [s2 s1])))","user":"524ab5f2e4b09eba1c02239d"},{"code":"#(apply hash-set (for [c1 %1 c2 %2]  [c1 c2]))","problem":90,"user":"51852961e4b0da5a5be3babb"},{"code":"(fn [coll1 coll2] (set (for [x coll1 y coll2] [x y])))","problem":90,"user":"506b8242e4b0eda3100c090a"},{"problem":90,"code":"(fn [a b] (reduce into #{} (map #(mapv cons a (repeat [%])) b)))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn prod* [a b]\r\n    (set (for [x a y b]\r\n      [x y])))","problem":90,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn [set-1 set-2]\n  (-> (for [i set-1 j set-2] [i j])\n      (set)))","problem":90,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":90,"code":"(fn [coll1 coll2] (set (for [eka coll1, toka coll2] [eka toka])))","user":"5ce52271e4b0a17bb84e2b69"},{"code":"(fn [a b] (set (for [x a\n                     y b]\n                  [x y])))","problem":90,"user":"5152bc4ee4b001f44f99bfef"},{"code":"(fn [s1 s2]\n  (into #{} (for [x s1 y s2] [x y])))","problem":90,"user":"4ec3b393535dcc7ae8597d59"},{"problem":90,"code":"#(set\n  (for [x %1\n       y %2]\n   [x y]))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":90,"code":"#(apply hash-set (for [x %1, y %2] [x y]))","user":"56c3aca0e4b05cc29241ee90"},{"problem":90,"code":"(fn [s1 s2] (set (apply concat (map (fn [x] (map #(conj [x] %) (seq s2))) (seq s1)))))","user":"59921901e4b0866487ed0d71"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n        (for [s1 s1\n              s2 s2]\n          [s1 s2]\n          )\n        )\n  )","user":"55ba70f9e4b01b9910ae29d4"},{"problem":90,"code":"(fn [as bs] \n   (set (for [a as b bs]\n     [a b])))","user":"5776f39de4b0979f89651643"},{"code":"(fn [coll1 coll2]\n  ((fn [coll1 result]\n    (if (empty? coll1)\n      result\n      (recur (rest coll1) \n          ((fn [elem coll2 result]\n            (if (empty? coll2)\n              result\n              (recur elem (rest coll2) (conj result \n                                    [elem (first coll2)]))))\n            (first coll1) coll2 result))))\n  coll1 #{}))","problem":90,"user":"4e73a9dc535dff18050a9c77"},{"problem":90,"code":"(fn[ x y]\n  (into #{} (reduce concat\n  \t(map \n      (fn[a] \n        (map (fn[b][b a]) x)\n      )\n      y\n    )\n  ))\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [s1 s2] \n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4fb01e53e4b081705acca260"},{"code":"(fn [col1 col2]\n  (into #{}  (for [x col1\n         y col2]\n     [x y])))","problem":90,"user":"4daedd1eedd6309eace4d164"},{"problem":90,"code":"(fn [a b]\n  (reduce\n   (fn [aAcc aVal]\n     (reduce (fn [bAcc bVal] (conj bAcc [aVal bVal])) aAcc b))\n   #{}\n   a))","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":90,"code":"#(set (for [x %1\n                     y %2]\n            [x y]))","user":"54a11042e4b09f271ff37c49"},{"problem":90,"code":"(fn cartesian [a b] (set (for [my-x (vec a) my-y (vec b)] [my-x my-y])))","user":"5f96fa49e4b0715f5002d7e9"},{"problem":90,"code":"(fn \n  [s1 s2]\n  (set (mapcat (fn [s1-item] (map #(into [] [s1-item %]) s2)) s1)))","user":"529735cbe4b02ebb4ef7503c"},{"code":"#(set (for [i %1 j %2] (vector i j)))","problem":90,"user":"52593207e4b0cb4875a45cd3"},{"problem":90,"code":"(fn [a b]\n   (set (reduce (fn  [acc ai]\n             (let [mast (map #(vector ai %) b)]\n               (vec (concat acc mast)))) \n           [] a)))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":90,"code":"(fn cartesian-product [origx origy]\n  (loop [x origx y origy result #{}]\n    (if (empty? x)\n      result\n      (if (empty? y)\n        (recur (rest x) origy result)\n        (let [xval (first x) yval (first y)]\n          (recur x (rest y) (conj result [xval yval])))))))","user":"5d0859fbe4b0cc9c91588208"},{"code":"(fn cart [set-1 set-2]\n  (if (seq set-1)\n    (set (into (map #(vector (first set-1) %) set-2)\n          (cart (rest set-1) set-2)))\n    #{}))","problem":90,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn [xs ys]\n  (set\n   (for [x xs\n        y ys]\n    [x y])))","problem":90,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat (fn [c]\n                 (map (fn [d] [c d]) b)) a)))","user":"5c558070e4b0fb8c5ffd9a1e"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a\n             y b]\n         [x y])))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"(fn [sa sb]\n  (set (for [a sa, b sb] [a b])))","problem":90,"user":"4f62b29ce4b0defedf855fd9"},{"problem":90,"code":"(fn cart-prod [a-set b-set] \n  (set (for [a a-set\n       \t\t b b-set]\n    \t[a b])))","user":"53de622ce4b0d874e779ae34"},{"code":"(fn cartesian-product [sa sb]\n  (set (doall (for [a sa b sb]\n                   [a b]))))","problem":90,"user":"4e7f51eb535db966e863cc3f"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce\n   (fn [x y] (apply conj x y))\n   #{}\n   (map (fn [e1] (map #(vector e1 %) s2)) s1)))","user":"55933c7ae4b0c79f6e1db938"},{"problem":90,"code":"(fn [coll1 coll2]\n   (set                    \n     (for [x coll1 \n           y coll2]  \n        [x y])))","user":"5db19599e4b010eb3c36cd05"},{"problem":90,"code":"(fn cartesian\n  [s1 s2]\n  (into #{} (for [x s1\n                  y s2]\n              [x y])))","user":"54c3747de4b045293a27f60e"},{"problem":90,"code":"(fn [xs ys]\n  (reduce \n          (fn [acc x]\n            (into acc (reduce\n                    (fn [acc y]\n                      (into acc (set [[x y]])))\n              #{}\n              ys)))\n    #{}\n    xs))","user":"56483562e4b0284900eef629"},{"code":"(fn [l1 l2]\n  (set (apply concat (for [i1 l1] (for [i2 l2]\n    [i1 i2] \n  ))))\n)","problem":90,"user":"4ea57300535d7eef308072d5"},{"code":"#(set (for [x %1\n                y %2]\n            [x y]))","problem":90,"user":"502ade49e4b0614b52996120"},{"problem":90,"code":"#(set (for [x %\n              y %2]\n          [x y]))","user":"4ec3650f535dcc7ae8597d56"},{"code":"#(set (for [x %1\n       y %2]\n  [x y]))","problem":90,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn[x,y](set (for [i x\n                        j y]\n                    [i j])))","problem":90,"user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn [s1 s2] (set (for [e1 s1 e2 s2] (vector e1 e2))))","problem":90,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [s1 s2]\n  (set (mapcat  (fn [x] (map #(vector x %) s2 )) s1)))","problem":90,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":90,"code":"(fn [l r] (set (mapcat identity (map (fn [a] (map #(do [a %]) r)) l))))","user":"592334c7e4b0a390037439ee"},{"code":"(fn [s1 s2]\n  (apply hash-set (for [e1 s1 e2 s2] [e1 e2])))","problem":90,"user":"4eec82fe535d93acb0a668ae"},{"problem":90,"code":"(fn[x y](set(for[n x s y][n s])))","user":"6085edade4b0736b099e42fc"},{"code":"#(into #{} (for [a1 %1 a2 %2] [a1 a2]))","problem":90,"user":"50335235e4b0c6c1199c710b"},{"problem":90,"code":"(fn cart-prod\n  [s1 s2]\n  (let [cart-step (fn [x] (map #(vector x %) s2))]\n    (into #{} (apply concat (map cart-step s1)))))","user":"5545477fe4b0a04f79299531"},{"problem":90,"code":"(fn [s1 s2] (into #{} (apply concat (map #((fn [sq el] (map (fn [v] (vector el v)) sq)) s2 %) s1))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn [x y]\n  (set (mapcat (fn [i] (map #(list % i) x)) y)))","problem":90,"user":"52379c46e4b0fae3832e99db"},{"code":"(fn [x y] (set (for [a x b y]\n  (vector a b))))","problem":90,"user":"4fba77fae4b081705acca2df"},{"code":"(fn cartesian-product [set1 set2]\n  (reduce #(into %1 (map vector set1 (repeat (count set1) %2))) #{} set2))","problem":90,"user":"511e763ce4b03e81d390ac29"},{"problem":90,"code":"(fn [s1 s2] ; bettern one: #(set (for [a % b %2] [a b]))\n  (reduce (fn[m x] (reduce #(conj % [x %2]) m s2)) #{} s1))","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":90,"code":"(fn cartes[s1 s2]\n  (set\n   (for[i s1\n       j s2]\n    [i j])))","user":"57bd960fe4b05aa3c4741c52"},{"problem":90,"code":"(fn [set1 set2] (set (mapcat\n                             (fn [x] (map (fn [y] [x y]) set2))\n                             set1)))","user":"52cbe5dfe4b07d0d72b27352"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (set\n   (for [x xs\n         y ys]\n     (vector x y))))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"#(into #{}\n  (for [x1 %1 \n        x2 %2]\n    [x1 x2]\n  )\n)","problem":90,"user":"518e6966e4b051adb72789ec"},{"code":"(fn cartesian-product [lst mst]\r\n  (loop [ls (seq lst) ms (seq mst) res (set [])]\r\n    (cond (nil? (first ls)) (set res)\r\n    (nil? (first ms)) (recur (rest ls) mst res)\r\n\t  :else (recur ls (rest ms) (conj res [(first ls), (first ms)])))))","problem":90,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn [set1 set2]\n  (set (for [x set1 y set2] [x y])))","problem":90,"user":"4e42f930535dc968683fc49f"},{"problem":90,"code":"(fn [s_1 s_2]\n  (set (for [x s_1 y s_2] [x y])))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":90,"code":"(fn [a b] (set (for [x a y b]\n                 (vector x y))))","user":"599342efe4b0b211ea3aaab0"},{"problem":90,"code":"(fn eep [a b]\n  (set (take (* (count a) (count b)) (partition 2 (mapcat #(interleave (repeat (count b) %) b) a)))))","user":"602d5eade4b0d5df2af22279"},{"problem":90,"code":"#(set (for [x %1\n            y %2]\n          [x y]))","user":"52f53589e4b05e3f0be25f2c"},{"problem":90,"code":"(fn [xcoll ycoll] (set (mapcat #(zipmap xcoll (repeat %)) ycoll)))","user":"54caaa48e4b057c6fda3a267"},{"code":"(fn f [x y] (if (empty? x) () (set (concat (map #(vector (first x) % ) y ) (f (rest x) y) ))))","problem":90,"user":"5349ac2be4b084c2834f4a67"},{"problem":90,"code":"(fn f [x y](if (> (count x) 0) (into #{} (concat ( (fn [x y] (reduce #(conj %1 [x %2]) #{} y)) (first x) y) (f (rest x) y))) #{} ) )","user":"54a7efdee4b09f271ff37c9d"},{"problem":90,"code":"#(apply clojure.set/union (for [x %\n                                y %2]\n                            #{[x y]}))","user":"56193c6ee4b053970a773af2"},{"code":"(comp set #(for [x %1 y %2] [x y]))","problem":90,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(fn [s1 s2]\n  (set (reduce (fn [sum s1next]\n    (clojure.set/union sum (map (fn [s2next] [s1next s2next]) s2))) #{} s1)))","problem":90,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [p s1\n             q s2]\n         [p q])))","user":"557e56aae4b05c286339e0d5"},{"problem":90,"code":"(fn [xs ys]\n  (apply sorted-set\n         (for [A xs\n               B ys\n               :let [product [A B]]\n               ] product)))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"problem":90,"code":"(fn funouter [s1 s2]\n    (apply clojure.set/union (map set \n         (map (fn fun1 [x] \n                  (map (fn fun2 [y] [x y]) \n                       s2)) s1))))","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn [x y] (into #{} (for [x x y y] [x y])))","problem":90,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":90,"code":"(fn [a b]\n      (set (for [x a, y b] [x y]))\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":90,"code":"#(set\n  (for [e1 %1, e2 %2]\n   [e1 e2]))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":90,"code":"(fn [set1 set2]\n  (loop [col set1\n         result #{}]\n    (if (empty? col)\n      result\n      (recur (rest col)\n             (into result (map #(vector (first col) %) set2))))))","user":"521ceb02e4b0c4ef0be830a5"},{"problem":90,"code":"(fn [set-a, set-b]\n  (set (for [a set-a b set-b] (vector a b))\n       )\n  )","user":"5776558ee4b0979f89651633"},{"code":";Inspired solution\n#(set (for [a %1 \n       \t\tb %2]\n    \t[a b]))\n\n;Original solution\n;#(set (mapcat (fn [x] (take (* (count %1) (count %2))\n;                    (partition 2\n;                               (interleave \n;                                \t(repeat x) \n;                                \t%2))))\n;     %1))","problem":90,"user":"5213dbc3e4b0961f15ac4d74"},{"problem":90,"code":"#(into #{}\n      (for [x %\n            y %2]\n        [x y]))","user":"5508a292e4b06e50f9beb10f"},{"code":"(fn [s1 s2] (set (for [x s1 y s2] [x y])))","problem":90,"user":"4daf8f84edd6309eace4d17a"},{"code":"(fn\n  [set1 set2]\n  (set (for [x (vec set1) y (vec set2)] [x y])))","problem":90,"user":"52b94f15e4b07a9af57922ba"},{"problem":90,"code":"(fn [s0 s1]\n  (set (for [a s0 b s1]\n    [a b])))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":90,"code":"(fn [s1 s2] (into #{} (mapcat (fn [i1] (mapcat (fn [i2] #{[i1 i2]}) s2)) s1)))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"#(set (for [ax % bx %2] [ax bx]))","problem":90,"user":"4f71ba6ee4b07046d9f4f012"},{"problem":90,"code":"(fn cartesian-product [A B]\n  (set (for [a A b B] [a b])))","user":"53703287e4b0fc7073fd6e8f"},{"problem":90,"code":"(fn [x y]\n  (letfn [(cartesian-prod [s1 s2]\n            (when-not (empty? s2)\n              (concat\n               (map #(vector % (first s2)) s1)\n               (cartesian-prod s1 (rest s2)))\n              )\n            )]\n    (set (cartesian-prod x y))\n    )\n  )","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":90,"code":"(fn [x y] (reduce(fn [s el1] (clojure.set/union s (reduce (fn [ss el2] (conj ss [el1 el2])) #{} y))) #{} x))","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn cp[s1 s2]\n  (reduce \n        (fn[acc,i] \n          (reduce (fn[a,it] (conj a [i it])) acc s2)          \n        )  \n         #{} \n        s1\n   ))","problem":90,"user":"513f53c6e4b051389b345b40"},{"problem":90,"code":"(fn [a b]\n  (reduce clojure.set/union \n          (map (fn [t]\n                 (loop [res #{} v b]\n                   (if (empty? v)\n                     res\n                     (recur (conj res [t (first v)]) (rest v)))))\n               a)))","user":"5188c249e4b0bdff0e072d54"},{"code":"(fn [x1 x2] (set (for [i1 x1 i2 x2] [i1 i2])))","problem":90,"user":"51cbdee1e4b08d8387cbede1"},{"problem":90,"code":"(fn[a b](set(for[x (range(count a)) y (range(count b))][(nth (vec a) x) (nth (vec b) y)])))","user":"56039843e4b04bb52996e1be"},{"code":"#(set(for[a% b%2][a b]))","problem":90,"user":"4dad8fe9c9a9d6ed1899dc57"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n  (for [e1 s1\n        e2 s2]\n  [e1 e2])))","user":"57db2369e4b0bd073c20241f"},{"problem":90,"code":"(fn [aces hearts] (reduce (fn [mm ace] (into mm (reduce (fn [m heart] (conj m (vector ace heart))) #{} hearts))) #{} aces))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":90,"code":"(fn [x y] (set (for [a (vec x) b (vec y)] [a b])))\n\n\n\n; This worked in some cases. But I think it is programmed more like a side effect.\n;(fn [a b]\n;   (for [x a\n;         y b]\n;     (conj [] x  y)))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":90,"code":"(fn [a b]\n    (set\n      (for [a (vec a) b (vec b)]\n        [a b])))","user":"59dfd369e4b08badc2a0c4dd"},{"code":"(fn [s1 s2]\n   (set (for [x s1, y s2] [x y])))","problem":90,"user":"523bd9c0e4b07becd5be2201"},{"problem":90,"code":"; (fn [set1 set2]\n;   (set\n;    (for [x1 set1\n;          x2 set2]\n;      [x1 x2])))\n\n#(set(for [x1 %1 x2 %2] [x1 x2]))","user":"5d83b9aae4b0915913b1d386"},{"problem":90,"code":"(fn cartesian-product [set1 set2]\n  (set (for [x set1, y set2] (vector x y))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":90,"code":"(fn [set1 set2]\n             (set (mapcat #(for [x set1 y #{%}]\n                             [x y]) set2)))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn [a b]\n  (set\n    (for [x a y b]\n      [x y])))","problem":90,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [as bs] (set(for [a as b bs] [a b])))","problem":90,"user":"4f25c4c4e4b0d66497709ffc"},{"problem":90,"code":"(fn [xs ys] \n   (into #{} \n       (mapcat (fn [x] (map (fn [y] (vec (conj (list x) y))) xs)) ys)))","user":"54d5fbe9e4b0a52adc2e2014"},{"problem":90,"code":"(fn cx\n  [xs ys] (into #{} (mapcat (fn [x] (map #(vector x %) ys)) xs)))","user":"54ab502fe4b09f271ff37cc4"},{"problem":90,"code":"(fn\n  [set1 set2]\n  (set (mapcat (fn [ele]\n                 (map #(vector % ele) set1))\n            set2)))","user":"5c706232e4b0fca0c162277e"},{"problem":90,"code":"(fn cartesian\n  [x y]\n  (into #{} (for [x-el x\n                  y-el y]\n             [x-el y-el])))","user":"55a5e2f7e4b0acc240e31550"},{"code":"(fn m [a b]\n  (into #{}\n        (for [x a y b]\n          [x y])))","problem":90,"user":"52828298e4b0757a1b17145b"},{"code":"#(set (for [x (seq %1) y %2] [x y]))","problem":90,"user":"5131d817e4b06942423563ca"},{"problem":90,"code":"#(set (for [i1 %1\n       i2 %2]\n   [i1 i2]))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":90,"code":"(fn [s1 s2]\n\n  (into #{} (for [s1 s1\n                  s2 s2]\n              [s1 s2]\n              ))\n\n  )","user":"550c55d0e4b06e50f9beb14d"},{"code":"#(into #{} (for [x %1\n       y %2]\n         [x y]))","problem":90,"user":"4faec810e4b081705acca24e"},{"problem":90,"code":"#(set (for [ x %1 y %2 ] (vector x y)))","user":"57887de2e4b0ebec4cfb751c"},{"problem":90,"code":"#(loop [firstv %1 secondv %2 resv #{}]\n     (if (= 1 (count firstv))\n       (if (= 1 (count secondv))\n         (into resv {(first firstv) (first secondv)})\n         (recur %1 (drop 1 secondv) (into resv {(first firstv) (first secondv)}))\n         )\n       (recur (drop 1 firstv) secondv (into resv {(first firstv) (first secondv)}))\n       )\n     )","user":"5968d73fe4b069c0a1a197d7"},{"code":"(fn [xs ys]\n  (into #{}\n  (for [x xs\n        y ys]\n        [x y])))","problem":90,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"(fn cartesian\n  ([a b] (cartesian a b []))\n  ([a b result]\n    (if (empty? a) (into #{} (partition 2 (flatten result)))\n      (recur (rest a)\n              b\n              (conj result\n                (map (fn [e]\n                      (vector (first a) e))\n                     b))))))","problem":90,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":90,"code":"(fn [x y]\n  (reduce into #{}\n          (for [a x] (for [b y]\n              [a b]))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs\n        y ys]\n    [x y])))","user":"54008b88e4b0de5c4184860d"},{"problem":90,"code":"(fn cart-prod [s1 s2]\n  (into #{}\n        (for [a s1\n              b s2]\n          [a b])))","user":"601c39eee4b0bf4ca6b10937"},{"code":"#(set (for [x %1\n       y %2]\n   [x y]))","problem":90,"user":"52afbc69e4b0c58976d9acc0"},{"problem":90,"code":"#(set (for [a %1 b %2]\n         [a b]))","user":"5964f9b0e4b069c0a1a19778"},{"problem":90,"code":"(fn [set-a set-b]\n  (loop [vec-a (vec set-a)\n         vec-b (vec set-b)\n         cart-prod #{}]\n    (if (empty? vec-a)\n      cart-prod\n      (if (empty? vec-b)\n        (recur (rest vec-a)\n               (vec set-b)\n               cart-prod)\n        (recur vec-a\n               (rest vec-b)\n               (conj cart-prod (vector (first vec-a) (first vec-b))))\n       )\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"problem":90,"code":"(fn [set1 set2] (set (for [x (apply sorted-set set1) y (apply sorted-set set2)] [x y])))","user":"54c8ac49e4b045293a27f64e"},{"problem":90,"code":"(fn cartesian-product [a b]\n  (into #{} (for [elt-a a\n                  elt-b b]\n               [elt-a elt-b])))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn [s1 s2]\n  (set (for [a s1 b s2]\n    [a b]))\n)","problem":90,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [i1 s1\n                  i2 s2]\n              [i1 i2])))","user":"577f0b0ee4b0c8d87281f6f3"},{"problem":90,"code":"(fn [arg1 arg2] (set (mapcat #(map vector arg1 (repeat %1)) arg2)))","user":"5804b491e4b0a837a8b30cac"},{"problem":90,"code":"(fn [s1 s2]\n   (into #{} (for [x s1 y s2] [x y] )))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":90,"code":"(fn cart\n  ([l r] (cart l r '()))\n  ([l r res] (if (empty? l)\n               (apply hash-set res)\n               (cart (rest l) r (concat res (map (fn [x] [(first l) x]) r))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [i1 s1 i2 s2]\n    [i1 i2])))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn [%1 %2] (set (for [fst %1 snd %2] [fst snd])))","problem":90,"user":"4fa2fa5ee4b081705acca186"},{"problem":90,"code":"#(into #{} (for [x %1 y %2]\n   (list x y)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn [lst1 lst2]\n  ((fn [l1 l2 res]\n     (if (empty? l2) res\n       (if (empty? l1)\n         (recur lst1 (rest l2) res)\n         (recur (rest l1) l2 (conj res (vector (first l1) (first l2)))))))\n   lst1 lst2 #{}))","problem":90,"user":"51da631be4b02ceefd947766"},{"problem":90,"code":"(fn [a b]\n  (set\n   (reduce (fn [m a]\n            (concat m (map #(list a %) b)))\n           []\n           a)))","user":"54dbcbbde4b024c67c0cf774"},{"problem":90,"code":"(fn [m1 m2]\n  (reduce (fn [coll i]\n            (into coll (map #(vector i %) m2))) #{} m1))\n\n;;could have used for","user":"5c665311e4b0fca0c16226a7"},{"code":"(fn [x y]\r\n  (loop [acc #{}\r\n        source x]\r\n    (if (empty? source)\r\n          acc\r\n          (recur\r\n            (reduce #(conj % [(first source) %2]) acc y)\r\n             (rest source)))))","problem":90,"user":"4f0365fc535dcb61093f6aa4"},{"problem":90,"code":"(fn [set-a set-b]\n  (reduce \n   (fn [coll e]\n     (into coll (map #(vector % e) set-a)))\n   #{}\n   set-b))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":90,"code":"(letfn [(pairs [x ys] (map #(vector x %) ys))]\n  #(reduce (fn [acc e] (into acc (pairs e %2))) #{} %1))","user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn [s1 s2]\n   (set (mapcat #(map (partial vector %) s2) s1)))","problem":90,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [x y] (reduce (fn [acc a] (reduce (fn [acc2 a2] (conj acc2 [a2 a])) acc x)) #{} y))","problem":90,"user":"4e89de60535d3e98b8023285"},{"code":"(fn cartesian [s1 s2]\r\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4e50c894535dc968683fc4ee"},{"code":"#(apply conj #{} (for [x %1 y %2] [x y]))","problem":90,"user":"4dda44f2535d02782fcbe9f1"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n     (set (for [a s1 b s2] [a b])))","user":"558bdcefe4b0277789237633"},{"problem":90,"code":"(fn cartesian-product [xs1 xs2]\n  (set (for [x1 xs1 x2 xs2] [x1 x2])))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn  [c1 c2] (set (for [x c1 y c2] [x y])))","problem":90,"user":"4ec4d723535dcc7ae8597d65"},{"problem":90,"code":"(fn [xs ys]\n  (reduce (fn [zs y] (apply conj zs (map (fn [x] [x y]) xs)))\n          #{}\n          ys))","user":"4ff24a1ae4b0678c553fc337"},{"problem":90,"code":"(fn [x y]\n  (into #{}\n  (for [a x\n        b y]\n    [a b])))","user":"5ab9fe71e4b073f17744269d"},{"code":"#(set(for [a %1 \n      b  %2]\n  [a b]))","problem":90,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":90,"code":"(fn [a b] (into #{} (for [i a, j b] [i j])))","user":"5a99b83fe4b0d174b936c7aa"},{"problem":90,"code":"(fn [x y]\n  (into #{}\n        (for [m1 x\n              m2 y\n              :let [product [m1 m2]]]\n              product)))","user":"5bb948f5e4b0a20761a235d5"},{"code":"(fn [a b]\n  (set (for [x a y b] [x y]))\n)","problem":90,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"#(set (for [a %1, b %2] (vector a b)))","problem":90,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":90,"code":"(fn [a b]\n  (->> (for [x a, y b]\n         [x y])\n       set))","user":"54848141e4b0e286459a119e"},{"code":"(fn [x y] (into #{} (for [a x b y] (vector a b))))","problem":90,"user":"51e28063e4b08e53a149f0f2"},{"problem":90,"code":"(fn ans-90 [set1 set2]\n  (apply hash-set (for [x set1 y set2] [x y])))","user":"608fac60e4b03bd49d9f36c7"},{"code":"(fn [s1 s2] (into #{} (mapcat (fn[a_] (map #(vector a_ %) s2)) s1)))","problem":90,"user":"4fad77a6e4b081705acca23a"},{"problem":90,"code":"(fn cartesian-product [a b]\n  (into #{} (map vector (sort (flatten (repeat (count b) (into [] a))))\n        (flatten (repeat (count a) (into [] b))))))","user":"605a876be4b000d535e6f53c"},{"problem":90,"code":"(fn [a b]\n  (into #{} (reduce concat\n    (map (fn [x]\n           (map\n            (fn [y] [x y])\n              b))\n         a))))","user":"53aaaf7ae4b047364c044444"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x1 s1, x2 s2] [x1 x2])))","user":"54c271b9e4b045293a27f602"},{"problem":90,"code":"(fn [left, right] \n(reduce \n\t(fn [ool nl] (into ool (map #(vector nl %1) right)))\n\t#{}\n\tleft))","user":"57c99a45e4b05aa3c4741d31"},{"problem":90,"code":"#(set (for [coll1 %1 coll2 %2] [coll1 coll2]))","user":"5e9683f1e4b0157ca96647c7"},{"code":"(fn [set-a set-b]\n  (into #{} (for [a set-a\n        b set-b]\n    [a b])))","problem":90,"user":"510591dde4b06d28cacc92eb"},{"problem":90,"code":"(fn[x y](loop[c1 x r #{}]\n          (if (empty? c1)\n            r\n            (recur\n              (disj c1 (first c1))\n              (clojure.set/union r\n(loop[c2 y r #{}]\n    (if (empty? c2)\n        r\n        (recur\n           (disj c2 (first c2))\n           (conj r [(first c1) (first c2)])\n))))\n))))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":90,"code":"(fn\n  [x y]\n  (into #{} (for [i x\n         j y]\n     [i j])))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":90,"code":"(fn [A B]\n  (set (for [a A\n             b B]\n         [a b])))","user":"4f0f7339535d0136e6c2233e"},{"problem":90,"code":"(fn \n  [s1 s2]\n  (->\n   (for [x (sort s1) y (sort s2)] [x y])\n   set))","user":"5aa098fae4b0d174b936c82e"},{"problem":90,"code":"(fn [col1 col2] (set (mapcat (fn [e] (map #(vector % e) col1)) col2)))","user":"54af6fb0e4b09f271ff37d08"},{"problem":90,"code":"(fn carthesian-product [set1 set2]\n  (reduce (fn [res e] \n            (apply conj res (map #(vector % e) set1))) \n          #{} \n          set2)\n  )","user":"56f188e9e4b04a395b9a0494"},{"code":"(fn [s r]\n  (set (mapcat\n        (fn [x] (map (fn [y] [x y]) r))\n        s)))","problem":90,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn foo [coll1 coll2]\n\t(->>(mapv\n\t\t  (fn bar [val]\n\t\t    (map\n\t\t     #(vector val %)\n\t\t     coll2))\n\t\t  coll1)\n\t    (flatten)\n\t    (partition 2)\n\t    (mapv\n\t     #(into [] %))\n\t    (set)))","problem":90,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"(fn [a b] (set (mapcat #(map vector (repeat %) b) a)))","problem":90,"user":"4fb2101ce4b081705acca284"},{"problem":90,"code":"(fn [sq1 sq2] (set (for [x sq1 y sq2] [x y])))","user":"5a527c16e4b05d388ecb6bff"},{"problem":90,"code":"#(into #{} (for [i1 %1 i2 %2]  [i1 i2]))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [colx coly] (set (for [x colx y coly] (vector x y))))","problem":90,"user":"531c0619e4b08068f379ed98"},{"code":"#(set (reduce concat (map \r\n                          (fn [e] (map (fn [f] [e f]) %2))\r\n                          %)))","problem":90,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":90,"code":"(fn peu [x y] (set (if (empty? x) '() (concat (map #(vector (first x) %) y) (peu (rest x) y)))))","user":"53fc8424e4b0de5c418485b3"},{"problem":90,"code":"(fn [cards signs]\n  (set (reduce (fn [res el]\n            (apply conj res (map #(conj () el %) cards)))\n          []\n          signs)))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [s1 s2]\n  (let [map-on-permutations (fn[f a b]\n      (apply concat (map (fn [x] (map #(f % x) a)) b)))]\n    (into #{} (map-on-permutations vector s1 s2))))","problem":90,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn j-cartesian\n  [set1 set2]\n  (loop [final #{} x set1 y set2]\n    (if (empty? x)\n      final\n      (if (empty? y)\n        (recur final (rest x) set2)\n        (recur (conj final [(first x) (first y)]) x (rest y))))))","problem":90,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [a b] \n     \n     (set (for [i a j b]\n        [i j]\n      ))\n  )","problem":90,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [c1 c2]\n  (set (mapcat (fn [c] (map #(vector c %) c2)) c1)))","problem":90,"user":"4ec60dc4535d6d7199dd36c0"},{"problem":90,"code":"(fn func [set1 set2]\n  (set (for [a set1\n             b set2]\n         [a b])))","user":"5e805895e4b085ba37836e44"},{"problem":90,"code":"(fn [coll1 coll2]\n   (set (for [c1 coll1\n          c2 coll2]\n      [c1 c2]))\n   )","user":"5ebc7c13e4b00a66d4a95267"},{"problem":90,"code":"(fn [set1 set2] (loop [s1 set1 s2 set2 result #{}]\n                   (if (empty? s1)\n                     result\n                     (if (empty? s2)\n                       (recur (rest s1) set2 result)\n                       (recur s1 (rest s2) (conj result (conj [] (first s1) (first s2)))\n                              )))))","user":"606d75f5e4b069485764de13"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [item1 set1\n             item2 set2]\n         [item1 item2])))","user":"5424c523e4b01498b1a71b03"},{"problem":90,"code":"(fn [a b]\n   (set (mapcat \n     #(map (fn [c] (vector % c)) b)\n     a)\n   ))","user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [a b]\n  (into #{} (mapcat (fn [xa]\n    (map (fn [xb]\n      (vector xa xb)) b)) a)))","problem":90,"user":"4ee63d8d535d93acb0a66859"},{"problem":90,"code":"(fn [a b]\n   (set (for [x a y b]\n         [x y])))","user":"5135a74ae4b04ac1f358dd46"},{"problem":90,"code":"(fn cartesian [ranks colors]\n  (set\n   (for [rank ranks\n         color colors]\n     (vector rank color))))","user":"56326995e4b0bfe05bf117a3"},{"problem":90,"code":"(fn [coll1 coll2]\n   (reduce (fn [result x]\n             (into result (map #(conj [] %2 %1) (repeat (count coll1) x) coll1))) #{} coll2))","user":"5e16fd78e4b0a047bd49f726"},{"problem":90,"code":"(fn cartesian [a b]\n  (set (for [a a b b] [a b])))","user":"580d2788e4b0849f6811b730"},{"problem":90,"code":"#(set (for [x %1 y %2]\n \t[x y] \n ))","user":"57440f77e4b0c285004e8ab5"},{"code":"(fn [& colls] \n  (set\n    (reduce     \n      #(for [x %1 y %2] [x y]) colls)))","problem":90,"user":"504f3fa3e4b0a02f9cffde62"},{"code":"(fn [coll1 coll2]\n  (set (for [a coll1 b coll2] [a b])))","problem":90,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"#(apply hash-set (for [x % y %2] [x y]))","problem":90,"user":"4f3ca5a6e4b0e243712b1f53"},{"problem":90,"code":"(fn [a b] (into #{} (for [c a d b] [c d])))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [a b]\n  (set\n   (for [a a b b]\n     [a b]\n     )\n   )\n  )","problem":90,"user":"52e59ca5e4b09f7907dd1464"},{"problem":90,"code":"#(set (for [x %1 z %2] [x z]))","user":"5b754f8ee4b047b03b2036c9"},{"problem":90,"code":"(fn cartesian [s1 s2] (into #{} (mapcat (fn [e] (map (fn [z] [z e]) s1)) s2)))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn cartesian [set1 set2]\n  (set\n    (for [x set1\n         y set2]\n      [x y])))","problem":90,"user":"526ee63de4b03e8d9a4a733f"},{"problem":90,"code":"(fn [coll1 coll2]\n        (set(for [s coll1\n              s2 coll2]\n            (reverse(list s2 s))\n            )))","user":"5f737899e4b02876ed9fd099"},{"code":"(fn cp [a b]\n  (if (empty? a) #{} (clojure.set/union\n     ((fn um [c] (if (empty? c) #{} (clojure.set/union #{[(first a) (first c)]} (um (rest c))))) b)\n      (cp (rest a) b))))","problem":90,"user":"4f8b20fce4b02e764a0a5178"},{"problem":90,"code":"(fn [s1 s2]\n        (set \n            (reduce\n                (fn [acc nxt]\n                    (concat \n                        acc \n                        (reduce\n                            #(conj %1 [nxt, %2])\n                            []\n                            s2))) \n                #{}\n                s1)))","user":"5694290fe4b0dcc4269f4110"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [x set1 \n             y set2] \n         [x y])))","user":"560ae7e6e4b05f002753df0e"},{"problem":90,"code":"(fn\n  [v1 v2]\n  (into #{} (mapcat #(reduce (fn [accum curr] (conj accum (vector % curr))) [] v2) v1)))","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":90,"code":"(fn cart-prod [x y]\n  (into #{}\n  (mapcat \n   (fn [x1] \n     (map #(list x1 %) \n             y)) \n   x)))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":90,"code":"(fn [x y] (set (partition 2 (flatten (map #(concat (interpose % x) (list %)) y)))))","user":"567e6d24e4b0feffd0d18eb4"},{"problem":90,"code":"(fn cartesian-product\n  [s1 s2]\n  (into #{} (for [x s1\n                  y s2]\n              [x y])))","user":"5484c3b2e4b0e286459a11a2"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [new-set x]\n            (into new-set (map #(vector x %) s2)))\n          #{}\n          s1))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn [as bs] \n  (set (for [a as b bs] [a b])))","problem":90,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn [aa bb] (set (partition 2 (flatten (map (fn [b] (map #(list % b) aa)) bb)))))","problem":90,"user":"4eadc217535d7eef30807321"},{"problem":90,"code":"(fn [a b]\n  (reduce conj #{} (for [a a b b] [a b])))","user":"55d1ec3ee4b0e31453f64a4c"},{"code":"(fn [a b]\n    (set (apply concat (map (fn [x] (map (fn [y]  [x y]) b)) a))))","problem":90,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [x y] \n\t(set (mapcat  (fn [m] (map  (fn [s] [m s])  y) )   x )))","problem":90,"user":"518644bce4b0da5a5be3baca"},{"problem":90,"code":"#(set\n  (for [x %1\n        y %2]\n    (vector x y))\n  \n  )","user":"608ee2f7e4b03bd49d9f36c1"},{"problem":90,"code":"(fn [a b]\n  (reduce (fn [acc c] (into acc (reduce #(conj %1 (vector c %2)) [] b)))\n          #{}\n          a))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn [s1 s2]\n  (->> s1\n    (mapcat (fn [y]\n      (map (fn [x] [y x]) s2)))\n    (apply hash-set)))","problem":90,"user":"50657775e4b0deb876850599"},{"problem":90,"code":"(fn cart [x y] (set  (for [s1 x  s2 y][s1 s2])))","user":"54e5dc08e4b024c67c0cf800"},{"code":"(fn [a b]\n  (set\n    (for [x a\n          y b]\n          [x y])))","problem":90,"user":"4db6ce85535d1e037afb217f"},{"code":"#(set (apply concat (for [x %1] (for [y %2] (vector x y)))))","problem":90,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":90,"code":"(fn [xs ys]\n  (->>\n  (for [x xs y ys] [x y])\n  set)\n)","user":"596e2a70e4b069c0a1a19861"},{"code":"(fn [set1 set2]\n  (apply hash-set (for [x set1 y set2] [x y])))","problem":90,"user":"4daf36c2edd6309eace4d175"},{"problem":90,"code":"(fn [l1 l2]\n  (set\n   (for [x l1 y l2]\n    [x y])))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":90,"code":"(fn\n  [a b]\n  (let [t (fn [a b]\n                   (map #(vector a %) b))]\n    (set (loop [result []\n                a a]\n                   (if (= (count a) 0)\n                     result\n                     (recur (concat result (t (first a) b)) (rest a)))\n                   \n                     \n           ))))","user":"53ac4719e4b047364c04445c"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [x set1 y set2]\n   [x y])))","user":"5835df4ce4b089d5ab817cec"},{"code":"(fn [x y]\n  (set (for [x x\n        y y]\n    [x y])))","problem":90,"user":"504e2333e4b0f6ff3350c46c"},{"problem":90,"code":"(fn [set-1 set-2]\n  (set (for [x set-1\n             y set-2]\n         [x y])))","user":"574ef99ae4b02ea114799250"},{"code":"(fn [s1 s2]\n  (set (mapcat #(map (partial vector %1) s2) s1)))","problem":90,"user":"4eeaf88f535d93acb0a668a3"},{"problem":90,"code":"(fn\n  [xs ys]\n  (into #{}\n        (for [x xs\n        \t  y ys]\n    \t  [x y])))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [a1 s1 a2 s2] [a1 a2])))","user":"54c23252e4b045293a27f5fc"},{"problem":90,"code":"(fn [x y]\n   (set (for [a x b y]\n     [a b])\n   ))","user":"59473563e4b07ddc2dafad97"},{"problem":90,"code":"(fn \n  [xs ys]\n  (set (mapcat #(map (partial cons %) (map list ys)) xs )))","user":"557e9d17e4b05c286339e0d8"},{"problem":90,"code":"(fn [s1 s2]\n   (set (for [x s1, y s2]\n      [x y])))","user":"5073e7fde4b054001656accb"},{"problem":90,"code":"#(set (for [x1 %1, x2 %2] (vector x1 x2)))","user":"5776385fe4b0979f89651632"},{"code":"(fn [xs ys]\n    (apply hash-set (for [x xs y ys] [x y])))","problem":90,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":90,"code":"(fn cart-prod--reduce\n  [& [s1 & more :as sets]] {:pre [(every? set? sets)]}\n  (set (reduce (fn [s1 s2] (for [x s1, y s2] (conj x y)))\n               (map vector s1)\n               more)))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [kk yy] (set (for [x kk y yy]\n  (vector x y))  )\n)","problem":90,"user":"515919fbe4b0394f658fe229"},{"problem":90,"code":"(fn [x y] \n  (set (mapcat #(partition 2 (interleave x (repeat %))) y))\n  )","user":"591ac8ece4b09b4ee5954bdd"},{"problem":90,"code":"(fn cart-prod\n  [left right]\n  (let [vright (into [] right)]\n    (loop [[h & t] (into [] left)\n           accum []]\n      (let [new-accum (into accum (map #(conj [] h %) vright))]\n        (if (nil? t)\n          (into #{} new-accum)\n            (recur t new-accum))))))","user":"58152157e4b0f478707a0631"},{"problem":90,"code":"(fn [xs ys] ( into #{} (for [x xs y ys] \n               [x y])))","user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [xs1 xs2]\n  (into #{} (for [x1 xs1 x2 xs2]\n    [x1 x2])))","problem":90,"user":"4ff505c8e4b0678c553fc364"},{"problem":90,"code":"(fn [as bs]\n  (into #{} (for [a as b bs] [a b])))","user":"512e31e9e4b0b740abc59823"},{"problem":90,"code":"(fn c [xs ys]\n  (set\n  (for [x xs y ys]\n    [x y])))","user":"53b42472e4b047364c0444b2"},{"problem":90,"code":"#(into #{} (for [a %1\n          b %2]\n   [a b]))","user":"5520d6b8e4b08d5046aa8a65"},{"problem":90,"code":"(fn cart [x y]\n  (if (= 0 (count x))\n    #{}\n    (let [x (into '() x)\n          y (into '() y)]\n      (set (concat (set (map #(vector (first x) %) y))\n              (cart (rest x) y))))))","user":"525cc912e4b0cb4875a45d48"},{"code":"(fn [a b]\n  (set (for [x a y b]\n         [x y])))","problem":90,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":90,"code":"(fn [xs ys]\n   (set (for [x xs y ys]\n          [x y])))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn cartesian-product\n  [set1 set2]\n  (into #{} (for [y set2 x set1]\n    (vector x y))))","problem":90,"user":"4ec1b80c535dfed6da9c6db6"},{"problem":90,"code":"#(set (for [a % b %2][a b]))","user":"54d0e6c5e4b0e8a36923e5d4"},{"code":"(fn cartesian-product [x y]\n  (set (for [x x y y] [x y])))","problem":90,"user":"5346f409e4b084c2834f4a46"},{"code":"(fn [xs ys] (set (for [x xs y ys] [x y])))","problem":90,"user":"4dfd4ba8535d04ed9115e781"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (mapcat #(loop [newset [] oldset s2]\n                      (if (empty? oldset)\n                        newset\n                        (recur (conj newset (vector % (last oldset))) (butlast oldset))\n                        )) \n                   s1)))","user":"57a13745e4b0c3d858beb8e3"},{"problem":90,"code":"(fn [a b]\n  (->> (for [item-a a\n             item-b b]\n         [item-a item-b])\n       (into #{})))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":90,"code":"(fn [x y]\n(set\n (for [i x \n      j y]\n [i j]\n) ) \n)","user":"580d1da7e4b0849f6811b72f"},{"code":"(fn [a b]\n  (set \n    (for [c a d b] \n      [c d])))","problem":90,"user":"4e49badd535dc968683fc4c9"},{"problem":90,"code":"(fn [s1 s2] (set (for [a s1\n                       b s2]\n                   [a b])))","user":"4ea03f70535d7eef308072a1"},{"problem":90,"code":"(fn [s1 s2] (into #{} (#(for [x %1 y %2] [x y]) s1 s2)))","user":"590b055ae4b047aa04b199c9"},{"problem":90,"code":"(fn cartesian-product\n  [set-a set-b]\n  (into #{} (for [x set-a\n        y set-b]\n    (conj [] x y))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":90,"code":"(fn [s1 s2]\n   (into #{} (for [s1 s1\n                   s2 s2]\n               [s1 s2])))","user":"55c5b55fe4b0e31453f649b5"},{"problem":90,"code":"(fn mm[a-set b-set]\n  (set (reduce (fn [res v]\n                 (concat res (map #(vector % v) a-set)))\n               '() b-set)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn cartesian-prod [a b]\r\n    (set (for [x a, y b] (vector x y))))","problem":90,"user":"4f039524535dcb61093f6b2c"},{"code":"#(set (partition 2 (interleave (mapcat (partial repeat (count %2)) %1) (apply concat (repeat (count %1) %2)))))","problem":90,"user":"5201572be4b0d7096e99ddbb"},{"problem":90,"code":"(fn [a b]\n    (into #{} (mapcat (fn [v] (map (partial vector v) b)) a)))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":90,"code":"(fn [xs ys] \n  (into \n   #{} \n   (for [x xs\n        y ys]\n    (vector x y))))","user":"55a1ba5ee4b0acc240e31517"},{"problem":90,"code":"(comp set #(for [e1 %2 e2 %1] (vector e2 e1)))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":90,"code":"(fn [s t] (set (mapcat (fn [x] (map #(vector % x) s)) t)))","user":"5689fd03e4b0dcc4269f4088"},{"problem":90,"code":"#(set (for[a % b %2] [a b]))","user":"5ea7b04de4b00a66d4a951b6"},{"problem":90,"code":";;(fn [s1 s2] (set (mapcat (fn [x] (map (fn [y] (vector x y)) s2)) s1)))\n;;\n(fn [s1 s2] (set (for [x s1 y s2] [x y])))","user":"54bad522e4b0ed20f4ff6eb8"},{"problem":90,"code":"(fn [s1 s2] \n  (set (for [a s1\n        b s2]\n    [a b])))","user":"5dbe63bde4b09f47823971c7"},{"problem":90,"code":"(fn cartesian [set-a set-b]\n  (into #{} (for [elem-a set-a elem-b set-b]\n              [elem-a elem-b])))","user":"57f81045e4b0d3187e90090f"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1\n        y s2]\n    [x y])))","user":"54b64fbbe4b05787c3b163b8"},{"problem":90,"code":"(fn [xs ys] (into (hash-set) (mapcat (fn [x] (map (partial vector x) ys)) xs)))","user":"5c30d90de4b0d62ef62d9f22"},{"problem":90,"code":"(fn [x y] (set (reduce concat (map (fn [z] (map (fn [w] (conj (into [] (list w)) z)) x) ) y))))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn mycart                  \n  [s1 s2]                     \n  (into #{} (for [s s1        \n                  t s2 ]      \n              [s t]           \n              ))              \n  )","problem":90,"user":"50573ed8e4b0012181721987"},{"code":"(fn [x y]\n  (set (for [a x b y]\n    [a b]\n    )))","problem":90,"user":"4de52c87535d08e6dec9fdf0"},{"code":"(fn [s1 s2] (set (for [a1 s1 a2 s2] [a1 a2])))","problem":90,"user":"4e6e10d8535d5021c1a895fd"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a\n        y b]\n    [x y])))","user":"55c652dde4b0e31453f649bd"},{"problem":90,"code":"(fn [a b] (let [result (transient #{})] (do (doseq [x a, y b] (conj! result [x y]) ) (persistent! result)   ))  )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":90,"code":"#(into #{} (for [x %1 y %2 :let [out [x y]]] out))","user":"53e4b5a3e4b036ad0777e44b"},{"problem":90,"code":"(fn [g h] \n\t(set\n\t\t((fn d [m e f]\n\t\t\t(when (< m (count(into [] e)))\n\t\t\t\t((fn a [n b c] \n\t\t\t\t\t(if (< n (count c))\n\t\t\t\t\t\t(into [] (cons (vector b (get c n)) (into [] (a (+ n 1) b c))))\n\t\t\t\t\t\t;;[]\n\t\t\t\t\t\t(if (< m (count (into [] e)))\n\t\t\t\t\t\t\t(d (+ m 1) g h)\n\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) 0 (get (into [] e) m) (into [] f))\n\t\t\t)\n\t\t) 0 g h)\n\t)\n)","user":"5710e574e4b09c608db7043b"},{"problem":90,"code":"#(set (for [x (vec %1) y (vec %2)]\n\t[x y]))","user":"56349008e4b0bfe05bf117bd"},{"code":"(fn [A B] (set (mapcat\r\n  (fn [a] (map #(vector a %) B)) A)))","problem":90,"user":"4db1bfe21254ad5b4805fa71"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [x a y b][x y])))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":90,"code":"(fn [left right]\n  (->> (for [a left\n             b right]\n         [a b])\n       (set)))","user":"5412ef7ee4b01498b1a719da"},{"problem":90,"code":"(fn [s1 s2] (into #{} (mapcat (fn [e] (map #(vector e %) s2)) s1)))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":90,"code":"#(set (for [i %1 j %2]\n         [i j]))","user":"5921a080e4b09b4ee5954c77"},{"code":"#(set (for [x %1 y %2] (vector x y)))\n\n;(fn [set1 set2]\n;  (reduce into #{}\n;    (map (fn [a]\n;      (map #(vector a %1) set2)) set1)))","problem":90,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn [xs1 xs2]\n  (set\n    (for [x xs1 y xs2]\n         [x y])))","problem":90,"user":"5041b3c0e4b06d8231e4facf"},{"problem":90,"code":"(fn\n  [x y]\n  (set (for [a x b y] [a b])))","user":"5c0e58bfe4b01240ff567140"},{"code":"#(into #{} (for [x %2 y %1] [y, x]))","problem":90,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":90,"code":"(fn [set1 set2] (reduce (fn [a, b] (into a (map #(vector % b) set1))) #{} set2))","user":"587ee260e4b052da650a6353"},{"code":"(fn [a b]\n  (set (for [x (seq a) y (seq b)] [ x y ])))","problem":90,"user":"4f504739e4b03ad3f0c10d00"},{"problem":90,"code":"(fn cp [xs ys]\n  (set\n   (for [x xs y ys]\n     (vector x y))))","user":"56069006e4b08b23635d3174"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x1 s1 x2 s2]\n    [x1 x2])))","user":"53e76728e4b036ad0777e47c"},{"code":"(fn cart [v1 v2] \n  (set (for [k1 v1\n        k2 v2]\n        [k1 k2])))","problem":90,"user":"5018ed15e4b011a2e0bf6412"},{"problem":90,"code":"#(set (for[x %1, y %2] [x y]))","user":"56c08696e4b060a8e693e3aa"},{"problem":90,"code":";cartesian product\n(fn [a b]\n  (loop [base a\n         iterating b\n         result []]\n    (if (empty? base)\n      (set result)\n      (let [current (map (fn [v] [(first base) v]) iterating)]\n        (recur (rest base) iterating (concat result current))))))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":90,"code":"#(into #{} (for [face %\n       suite %2]\n       [face, suite]))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [s1 s1 s2 s2] [s1 s2])))","user":"5fb68f09e4b08cb800c85b58"},{"code":"#(into #{} (apply concat (for [x %1] (for [y %2] [x y]))))","problem":90,"user":"4f49e869e4b0d56e7bb92c02"},{"code":"#(into #{} (for [u % v %2] [u v]))","problem":90,"user":"4e5867d1535d8a8b8723a291"},{"code":"#(set(for [x %1 y %2][x y]))","problem":90,"user":"4ed2dd98535d44c135fd68e2"},{"problem":90,"code":"(fn cross [s1 s2]\n  (into #{} (mapcat #(partition-all 2 2 (interleave (repeat %) s2)) s1)))","user":"57763002e4b0979f89651631"},{"problem":90,"code":"(fn [a b] (set (for [x a\n             y b]\n         [x y])))","user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":90,"code":"(fn [R S] (set (for [r R s S] [r s])))","user":"55f6fe09e4b06e875b46cea2"},{"code":"#(set (for [a %\n        b %2]\n   [a b]))","problem":90,"user":"4ff4bed0e4b0678c553fc35f"},{"problem":90,"code":"(fn [set1 set2]\n  (set (apply concat (map (fn [set1-el]\n         (map #(vector set1-el %) set2)) set1))))","user":"5486e317e4b0e286459a11c0"},{"problem":90,"code":"(fn [cards, suits] (set (for [card cards suit suits]\n         [card suit])))","user":"536829c8e4b0243289761e8b"},{"problem":90,"code":";#(set (for [x %1 y %2] [x y]))\n(fn f [a b] \n   (set (mapcat \n      #(partition 2 (interleave % b) )\n      (map \n        #(take (count b) (repeat %)) \n        a))) )","user":"570eeb66e4b0b0fb43fd06fa"},{"problem":90,"code":"(fn cart [s t]\n  (set\n  (for [x s y t]\n    [x y]\n  )\n))","user":"5c0d0537e4b0bdcf453d173d"},{"code":"#(set(for[x %1 y %2][x y]))","problem":90,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(fn [a b]\n  (into #{} (for [x a y b] [x y])))","problem":90,"user":"4dd0e8f7535da60f04a96e57"},{"problem":90,"code":"(fn [coll1 coll2]\n   (let [result\n         (for [x coll1\n               y coll2]\n           [x y])]\n     (println result)\n     (set result))\n   )","user":"5fb544f6e4b08cb800c85b4e"},{"problem":90,"code":"#(set(for [n %1 s %2] [n s]))","user":"53ae0c50e4b047364c044471"},{"code":"(fn __ [a b]\n  (set (apply concat (for [x b]\n    (for [y a]\n      [y x])))))","problem":90,"user":"4ec9549d535d6d7199dd36fe"},{"problem":90,"code":"(fn[s1 s2] (into #{} (for [x s1 y s2] (vector x y))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":90,"code":"(fn [col_1 col_2] (set (for [x col_1 y col_2] (vector x y))))","user":"588f500ae4b00487982d51a4"},{"code":"(fn carpo [c1 c2]\n  (set (for [x c1 y c2]\n           (conj [x] y))))","problem":90,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":90,"code":"(fn cartesian [a b]\n  (reduce (fn [xs x] (reduce (fn [ys y] (conj ys [x y])) xs b)) #{} a))","user":"5661e09ae4b068f2fe63dc70"},{"code":"(fn [xs ys]                                                                                                                                                                                                                                                                    \n    (let [ppa (fn [y xxs res] (if (empty? xxs) res                                                                                                                                                                                                                               \n                              (recur y (rest xxs) (concat res [(list (first xxs) y)]))))]                                                                                                                                                                                       \n        (set (reduce concat (map #(ppa % xs '()) ys)))))","problem":90,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"(fn [a b]\n  (set\n   (for [c a, d b]\n     [c d])))","problem":90,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [xs ys]\r\n  (set (mapcat (fn [x]\r\n    (map (fn [y] [x y]) ys)) xs)))","problem":90,"user":"4dbec446535d020aff1edf68"},{"problem":90,"code":"(fn [col1 col2]\n  (into #{}\n        (for [x col1\n              y col2]\n          [x y])))","user":"57481f1fe4b009280f9f2b82"},{"problem":90,"code":"#(set (for [i %1\n      j %2]\n  (list i j)))","user":"534bfc71e4b084c2834f4a88"},{"code":"(fn\n  [a b]\n  (set (for [x a\n             y b]\n         [x y])))","problem":90,"user":"511b233ae4b07ab9ec456180"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (set (for [x1 s1 x2 s2] [x1 x2])))","user":"5634995fe4b0bfe05bf117be"},{"code":"(fn cartesian-product [a b]                                                                                                                  \r\n    (set (for [x a, y b]                                                                                                                      \r\n           [x y])))","problem":90,"user":"4f149e0f535d64f60314643d"},{"problem":90,"code":"(fn my-concat [coll1 coll2]\n   (into #{} (map vector \n       (apply interleave (repeat (count coll2) coll1))\n       (apply concat (repeat (count coll1) coll2)))))","user":"536e5055e4b0fc7073fd6e6b"},{"problem":90,"code":"(fn [coll-1 coll-2]  \n\t(->\n\t\t(for [item-1 coll-1 item-2 coll-2 \n\t      :let [res [item-1 item-2]]]\n\t  res)\n\t\t(set )))","user":"583c4482e4b089d5ab817d7e"},{"code":"#(set (for [r % s %2] [r s]))","problem":90,"user":"4fb3b865e4b081705acca2a2"},{"problem":90,"code":"(fn [set1 set2]\n   (loop [s1 (into [] set1) s2 (into [] set2) d #{}]\n     (if (= 0 (count s1)) d\n       (if (= 0 (count s2)) (recur (rest s1) (into [] set2) d)\n         (recur s1 (rest s2) (conj d [(first s1) (first s2)]))))))","user":"558378dce4b05c286339e115"},{"problem":90,"code":"(fn test\n  [first second]\n  (set\n    (for [x first y second]\n      (vector x y))))","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn [a b] (set (for [c a d b] [c d])))","problem":90,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn [l1 l2] (set (for [x l1 y l2] [x y])))","problem":90,"user":"515896f2e4b059418b97f0a8"},{"problem":90,"code":"#(set (for [x %\n        y %2]\n    [x y]))","user":"603ae21de4b0d5df2af222fb"},{"problem":90,"code":"(fn [xs ys]\n  (let [acc #{}]  \n    (reduce (fn [t v] \n              (reduce (fn [st sv] (conj st (conj [] v sv))) t ys)) acc xs)))","user":"54dce62fe4b024c67c0cf78c"},{"problem":90,"code":"(fn [y z]\n  (set (mapcat (fn [x] (map #(conj x %) z)) (map vector y))))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn [card suite] (set (mapcat (fn [a] (map (fn [b]  (vec [a b])) suite)) card)))","problem":90,"user":"4dbbdf86535d3f4042261ece"},{"code":"(fn [& args] \n(into #{}   \n      (for [pier (first args)\n            sec (second args)]\n             [pier sec]\n   \n   )))","problem":90,"user":"51227a00e4b068a9582e656b"},{"problem":90,"code":"(fn [a b]\n (set \n  (for [x a\n       y b]\n   [x y])))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn cartesian [x y]\n  (when (seq y)\n    (set (concat (map #(vector % (first y)) x) (cartesian x (rest y))))))","problem":90,"user":"51f82769e4b09be9c177e527"},{"problem":90,"code":"#(set (for [x %1\n          y %2]\n      [x y]))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn [a b] \n  (reduce \n   \t#(into %1 (map (partial vector %2) b)) \n   \t#{} \n   \ta))","problem":90,"user":"50bfd849e4b042992946c649"},{"problem":90,"code":"(fn [set1 set2]\n  (let [cart1 (fn [a b] (map #(vector a %) b))]\n    (set (mapcat #(cart1 % set2) set1))))","user":"5bf1b957e4b0a6d31fed216f"},{"problem":90,"code":"(fn [a b] \n  (set \n   (for [x a y b] [x y]\n   )\n  )\n)","user":"55e8a85be4b0121d4835fd98"},{"problem":90,"code":"(fn [l1 l2](into #{} (for [x1 l1\n                  x2 l2]\n             [x1 x2])))","user":"5c0e3f86e4b01240ff56713d"},{"problem":90,"code":"(fn [a b] (reduce #(clojure.set/union %1 (reduce (fn [x y] (conj x [y %2])) #{} a)) #{} b))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":90,"code":"(fn cartesian-product\n  [s r]\n  (reduce into #{} (map (fn [x] (map #(conj [%] x) s)) r)))","user":"55acd080e4b03311e7b73298"},{"code":";; i think the answer should be:\n;; #(into #{} for [x %1 y %2] [x y]))\n#(into #{} (for [x (sort %1) y (if (%2 \"♠\") [\"♠\" \"♥\" \"♦\" \"♣\"] %2)] [x y]))","problem":90,"user":"4f1c9652535d64f603146483"},{"problem":90,"code":";;{(a,b) | a e A, b e B}\n(fn [A B]\n  (set (for [a A b B]\n         [a b])))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":90,"code":"; FIRST TRY:\n;(fn \n;  [s1 s2] \n;  (reduce\n;    (fn [r x]\n;      (reduce\n;        (fn [r y] (conj r [x y]))\n;        r\n;        s2))\n;      #{}\n;      s1))\n\n; TIL about `for`\n#(set (for [a %1 b %2] [a b]))","user":"5465febde4b01be26fd746e1"},{"problem":90,"code":";Elegant solution\n(fn [a b] (set (for [x a y b] [x y])))\n;(fn [x y]\n;  (into #{} (partition 2 (interleave (reduce #(into %1 (repeat (count y) %2)) [] x) (cycle  y)))))","user":"5835bc73e4b089d5ab817ce9"},{"problem":90,"code":"(fn [x y] (cond (> (count x) (count y))\n                 (loop [op '() c2 y]\n                       (if (empty? c2)\n                       (set (partition 2 (flatten op)))\n                       (recur (cons (interleave x (repeat (count x) (first c2))) op)\n                              (next c2))))\n                 :else\n                 (loop [op '() c2 x]\n                       (if (empty? c2)\n                       (set (partition 2 (flatten op)))\n                       (recur (cons (interleave (repeat (count y) (first c2)) y) op)\n                              (next c2))))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn [a b] (set (for [x a y b] [x y] )))","problem":90,"user":"50463347e4b011c5dfee771e"},{"problem":90,"code":"(fn [s1 s2]\n    (into #{} (for [e1 s1\n                    e2 s2]\n                [e1 e2])))","user":"5f02f365e4b0cf489e8d7f2c"},{"code":"(fn [xs ys]\n  (set \n   (for [x xs, y ys] [x y])))","problem":90,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn [a b]\n  (set (for [i a j b]\n  (vector i j))))","problem":90,"user":"4facd2fae4b081705acca22f"},{"code":"(fn f [a b]\n  (set (for [i a j b]\n         [i j])))","problem":90,"user":"51750cd4e4b07031762f2ee5"},{"problem":90,"code":"#(->> (for [s1 %1\n             s2 %2]\n         [s1 s2])\n       (into #{}))","user":"5e491182e4b043cd24807a46"},{"problem":90,"code":"(fn answer-90 [x y]\n (set (for [list_1 x\n        list_2 y]\n    (list list_1 list_2)))\n\n\n    )","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn cartesian-product [set1 set2]\n  (set\n   (for [x set1\n         y set2]\n     [x y])))","problem":90,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":90,"code":"#(set (for [face %1 suite %2] [face suite]))","user":"54f26266e4b024c67c0cf8c5"},{"problem":90,"code":"(fn [a b]\n    (reduce\n      (fn [l ai]\n        (apply conj l (reduce #(conj %1 [ai %2]) [] b)))\n      #{} a))","user":"553abb28e4b09218d5f44ffb"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1, y s2] [x y])))","user":"53a0ab8ce4b0ca733b9744b3"},{"problem":90,"code":"(fn [c1 c2] (set (reduce concat (map (fn [cc1] (map (partial vector cc1) c2)) c1))))","user":"536b9d8ae4b0243289761ebe"},{"code":"(fn [x y] (set (mapcat #(map (fn [z] [% z]) y) x)))","problem":90,"user":"510c123be4b078ea7192110e"},{"code":"(fn                                                                                            \n  [set1 set2]                                                                                                         \n  (loop [s set1                                                                                                       \n         ret-v #{}]                                                                                                  \n    (if (empty? s)                                                                                                    \n      (set ret-v)                                                                                                           \n      (recur (rest s) (concat ret-v (map #(vector (first s) %) set2))))))","problem":90,"user":"523288fee4b035af41902a88"},{"code":"#(set (for [x %1 y %2 ] [x y]))","problem":90,"user":"4e86d3cf535dceadca46984c"},{"code":"(fn [s1 s2] (set (for [x s1  y s2] [x y])))","problem":90,"user":"52117ea7e4b07aea8afc4f70"},{"problem":90,"code":"(fn p90[x y]\n  (set (apply concat (map (fn[i]\n         (map (fn[j] [j i]) x)) y))))","user":"52ab61f5e4b0c58976d9ac75"},{"problem":90,"code":"(fn [set1 set2] (set (for [x1 set1 x2 set2] [x1 x2])))","user":"56942939e4b0dcc4269f4114"},{"problem":90,"code":"#(set (for [x %1\n            y %2] \n        [x y]))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":90,"code":"#(into #{} (for [m %1 n %2] (vector m n)))","user":"58a953dae4b01a0c0b232968"},{"problem":90,"code":"(fn [x y] (reduce #(into %1 (map (partial vector %2) y)) #{} x))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":90,"code":"(fn cartes\n  [v1 v2]\n  (set (for [x v1 y v2] [x y])))","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":90,"code":"(fn [l r] (into #{} (mapcat #(map vector l (repeat %)) r)))","user":"585d9558e4b0f14aab7c879c"},{"problem":90,"code":"(fn [s1 s2] \n  (set (mapcat #(map list s1 (repeat %)) s2)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":90,"code":"(fn [a b]\n  (set (reduce clojure.set/union #{} (map (fn [s] (map #(vector s %1) b)) a))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":90,"code":"(fn [l1 l2]\n  (set\n   (for [x l1\n         y l2]\n     [x y])))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":90,"code":"(fn [sx sy]\n (into #{}\n  (for [x sx, y sy]\n   [x y])))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn [x y]\n  (set \n   (mapcat \n    (fn [z] (map #(list % z) x))\n    y)))","problem":90,"user":"53468f6ce4b084c2834f4a3f"},{"problem":90,"code":"(fn foo [x y]\n  (set (for [a x b y] [a b])))","user":"5b58d012e4b02d533a91bd71"},{"code":"(fn [a b] \n (reduce\n    (fn [x y] \n      (into x (reduce #(conj %1 [y %2]) [] b)))\n    #{}\n     a))","problem":90,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":90,"code":"(fn [s1 s2] (set (for [x1 s1 y1 s2] [x1 y1] )))","user":"6076adb2e4b069485764de60"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x1 s1, x2 s2] [x1 x2])))","user":"51b920bfe4b0e871ca4958f9"},{"problem":90,"code":"(fn [xs ys] (into #{} (mapcat #(map conj (repeat [%]) ys) xs)))","user":"56532ff4e4b0f9d632dd846e"},{"code":"(fn [a b](set (for [x a y b] [x y])))","problem":90,"user":"50d86fe2e4b01f0871336e67"},{"problem":90,"code":"(fn\n  [x y]\n  (set (for\n    [a x b y]\n    [a b])))","user":"56a44067e4b0542e1f8d14da"},{"code":"#(set (partition 2 \n        (flatten (\n          map (fn [x] \n                (map (fn [y] [x y]) %2)) \n              %1))))","problem":90,"user":"4f567cdbe4b0a7574ea71824"},{"problem":90,"code":"(fn solution90\n  [s1 s2]\n  (into (hash-set) (for [x1 s1\n        x2 s2]\n    [x1 x2])) )","user":"595bc925e4b066ee0a44afe2"},{"problem":90,"code":"#(set \n    (for [a %1 b %2]\n      [a b]\n    )\n)","user":"5564c113e4b0c656e3ff180d"},{"code":"(fn [s1 s2]\n  (reduce (fn [s,e] (reduce #(conj %1 [e %2]) s s2)) #{} s1))","problem":90,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn b [m mm] (loop [n m nn mm e #{}] (if (empty? n) e (if (empty? nn) (recur (next n) mm e)(recur  n (next nn) (conj e (vector (first n) (first nn))))))))","problem":90,"user":"4fe97adde4b0547ebccb245e"},{"problem":90,"code":"(fn cartesian [left right]\n  (set (for [x left y right] [x y])))","user":"5d80f328e4b0915913b1d372"},{"problem":90,"code":"#(set (for [x %1 \n      y %2]\n  [x y]))","user":"55b08677e4b002ce9d5cbc23"},{"code":"(fn [s1 s2] (set (for [i s1 j s2] [i j])))","problem":90,"user":"4e8f4f64535d65386fec2149"},{"problem":90,"code":"#(reduce conj #{} (for [a %1 b %2] [a b]))","user":"531792d9e4b08068f379ed5e"},{"problem":90,"code":"(fn c [m n] (set (mapcat (fn [x] (map (fn [y] [y x]) m)) n)))","user":"4eeb8f68535d93acb0a668a9"},{"problem":90,"code":"(fn [set1 set2] (into (sorted-set) \n  (for [x set1 y set2]\n    (vector x y)\n   )\n  )\n )","user":"556f2009e4b09a3098a52519"},{"code":"(fn [s1 s2] \n  (set (for \n    [x s1 y s2] \n    [x y])))","problem":90,"user":"4e920f44535dbda64a6f6afd"},{"code":"#(set (partition 2 (interleave \n  (apply concat (repeat (count %2) %1))\n  (apply interleave (repeat (count %1) %2)))))","problem":90,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn outer-join [x y]\n  (set (reduce concat (map (fn [a] \n    (map (fn [b]\n      (vector a b)\n    ) y)\n  ) x)))\n)","problem":90,"user":"50588af1e4b06522596eba7d"},{"problem":90,"code":"(fn [set1 set2]\n  (loop [lis1 set1, lis2 set2, final #{}]\n    (if (empty? lis1)\n      final\n      (if (empty? lis2)\n        (recur (rest lis1) set2 final)\n        (recur lis1 (rest lis2) (conj final (vector (first lis1) (first lis2))))))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [xs ys]\n  (into #{} (mapcat \n    (fn [x]\n      (map #(vector x %) ys))\n       xs)))","problem":90,"user":"50217818e4b00bba4502f7a7"},{"problem":90,"code":"(fn t [k v] (apply clojure.set/union (map #(reduce (fn [cur_set v] (conj cur_set (vector % v))) #{} v) k)))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn[a b]\n  (set (for[aa a bb b]\n    [aa bb]\n    )))","problem":90,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [a b] \n  (reduce clojure.set/union \n    (map (fn [e] (apply hash-set (map #(vector e %) b))) a)))","problem":90,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":90,"code":"(fn [faces signs]\n    \n    (into #{}\n    (apply concat\n    (map (fn [f] (map (fn [s] [f s]) signs)) faces)    \n           )\n          )\n           \n  )","user":"57f28b22e4b0511f1d294def"},{"problem":90,"code":"(fn [x y]\n   (set (mapcat (fn [xi]\n                  (map (fn [yi]\n                           [xi yi])\n                       y))\n             x)))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":90,"code":"(fn cp [xs1 xs2]\n  (set (for [x1 xs1 x2 xs2] [x1 x2])))","user":"607dd962e4b03d835a6eaed2"},{"problem":90,"code":"#( set (for [\n              fel %1 \n              sel %2] [fel sel]))","user":"5e1a3989e4b0dc9594008511"},{"code":"#(set (for [x %1 y %2]\n        [x y]))","problem":90,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [s1 s2]\n  (set (for [v1 s1\n             v2 s2] [v1 v2])))","problem":90,"user":"4fa340b4e4b081705acca18c"},{"problem":90,"code":"#(into #{} (for [x %1 y %2] (cons x [y])))","user":"5632e850e4b0bfe05bf117ac"},{"code":"#(set (for [x %1 y%2] [x y]))","problem":90,"user":"4f343e60e4b0e243712b1eb5"},{"problem":90,"code":"(fn dkej [x y] (set (for [x1 x y1 y] [x1 y1])))","user":"598d22b1e4b02b9968b84d1a"},{"code":"(fn [s1 s2]\n  (set \n    (for [s1i s1\n        s2i s2]\n        \n    [s1i s2i])))","problem":90,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn product [xs ys]\n  (let [>>= (fn [xs f]\n    (apply concat (map f xs)))]\n  (set (>>= xs #(for [y ys] [% y])))))","problem":90,"user":"4e691c79535d8ccf87e9fe97"},{"problem":90,"code":"#(set (partition 2 (flatten\n     (reduce \n     (fn [a b] (conj (conj a (interpose b %1)) b)\n       )\n       \n      [] %2))))","user":"57b35772e4b0fbc9809a277c"},{"problem":90,"code":"(fn [xs ys]\n  (set\n  (for [x xs\n        y ys]\n    [x y])))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [a set1 b set2] [a b])))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":90,"code":"(fn [x y]\n  (loop [x (into [] x) y (into [] y) new []]\n    (if (empty? x)\n      (into #{} new)\n      (recur (rest x) y (loop [x (nth x 0) y y new new]\n                          (if (empty? y)\n                            new\n                            (recur x (rest y) (conj new [x (nth y 0)]))\n                            )\n                          )\n             )\n      )\n    )\n  )","user":"5694292ee4b0dcc4269f4113"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [k s1 v s2] (vector k v))))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn cart [one two]\r\n     (into #{}\r\n           (for [i one\r\n                 x two]\r\n             [i x])))","problem":90,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn [x y] (-> (mapcat #(map (partial vector %) y) x) set))","problem":90,"user":"510acd6ee4b078ea719210f4"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [s1 set1\n             s2 set2]\n         [s1 s2])))","user":"56b6e354e4b0982f16b37e41"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{} (for [a set1 b set2] [a b])))","user":"57dd47f4e4b0bd073c20243e"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n  (for [i a j b]\n      [i j])))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat #(map list s1 (repeat %)) s2)))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":90,"code":"(fn \n  [lst lst2]\n  (into #{}\n        (for [x lst y lst2] \n          (vector x y))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":90,"code":"(fn [X Y]\n  (into #{} (mapcat (fn [x] (map (fn [y] (vector x y)) Y)) X)))","user":"56449e4de4b0284900eef5f9"},{"problem":90,"code":"#(into #{} (for [x %1\n                 y %2]\n   [x y]))","user":"55647a31e4b0c656e3ff1808"},{"problem":90,"code":"#(loop[s1 %1 s2 %2 result #{}]\n   (if (empty? s1) (set result)\n     (if(empty? s2) (recur (rest s1) %2 result)\n       (recur s1 (rest s2) (cons [(first s1) (first s2)] result)))))\n\n\n;(fn[x y]\n;  (set (partition 2 (mapcat #(interleave (repeat %) y) x))))\n\n\n\n;#(set (reduce concat (map (fn [a] (map (fn [b] (list a b)) %2)) %1)))\n\n\n;#(set (for [x %1 y %2]\n;         [x y]))","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn [X Y]\r\n (set (mapcat #(partition 2\r\n    \t     \t(interleave X\r\n    \t\t  \t\t   \t    (repeat (count X) \r\n                            \t\t%)))\r\n              Y)))","problem":90,"user":"50576483e4b001218172198b"},{"problem":90,"code":"(fn [x y]\n  (set (for [m x n y]\n         [m n])))","user":"52c672e2e4b0c2d177d6210e"},{"problem":90,"code":"(fn [f s] (into #{}(for [h f t s] [h t])))","user":"6030855de4b0d5df2af222a6"},{"problem":90,"code":"(fn [f s]\n  (set (for [x f y s] [x y])))","user":"543823f1e4b032a45b869311"},{"problem":90,"code":"#(set(for [x %1 y %2]\n     [x y]))","user":"5a912080e4b002d099cae6ea"},{"problem":90,"code":"(fn prod [a, b]\n  (if (empty? a)\n    #{}\n\n    (clojure.set/union (\n\n                        (fn prod2 [x, ys]\n                          (if (empty? ys)\n                            #{}\n                            (conj (prod2 x (rest ys)) [x, (first ys)])\n                            ))\n                        (first a) b)\n        (prod (rest a) b))))","user":"5eb4927fe4b00a66d4a95221"},{"problem":90,"code":"(fn [a b] \n  (set (for [x a, y b]\n    [x y])))","user":"5492164ee4b0b312c081ff3e"},{"problem":90,"code":"(fn cartesian-product [left right]\n  (into #{} (for [l left r right] [l r])))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"(fn [s1 s2] \n  (set (mapcat \n    (fn [e] (map #(identity [% e]) s1)) s2)))","problem":90,"user":"503255d0e4b0e78df07b092b"},{"problem":90,"code":"(fn [set1 set2]\n  (apply hash-set (for [x set1 y set2]\n    [x y])))","user":"5746061ae4b009280f9f2b5b"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat (fn [x] (map (fn [y] (vector x y)) ys)) xs)))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":90,"code":"(fn cartesian-product\n    [set1 set2]\n  \t;; On itere sur les deux ensembles en même temps\n    (set (for [e1 set1 e2 set2]\n         ;; On créé un vecteur des deux elements \n         [e1 e2])))","user":"587bead1e4b01531a375eb0d"},{"problem":90,"code":"(fn [x y]\n  (set (apply concat\n              (for [xx x]\n                (set (map #(vector xx %1) y))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":90,"code":"(fn [set1 set2] (letfn\n  [(card-pair [fv su] (conj [] fv su))\n   (build-pairs\n    ([s1 s2] (let\n               [first-pairings (into #{} (map #(card-pair (first s1) %) s2))]\n               (if (empty? (rest s1))\n                 first-pairings\n                 (build-pairs first-pairings (rest s1) s2))))\n    ([out s1 s2] (let\n                   [pairings (into out (map #(card-pair (first s1) %) s2))]\n                   (if (empty? (rest s1))\n                     pairings\n                     (build-pairs pairings (rest s1) s2)))))]\n   (build-pairs set1 set2)))","user":"57b356c2e4b0fbc9809a277b"},{"problem":90,"code":"(fn [a b]\n  (reduce (fn [res a-i]\n            (reduce #(conj %1 [a-i %2]) res b))\n          #{}\n          a))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn cp [s1 s2] (into #{} (mapcat (fn [left-elem] (into #{} (map #(conj '[] left-elem %) s2))) s1)))","problem":90,"user":"523b4e91e4b07becd5be21ef"},{"problem":90,"code":"(fn [x y]\n  (into #{} \n        (for [xs x\n              ys y]\n          [xs ys])))","user":"54edfa10e4b024c67c0cf868"},{"code":"(fn [s1 s2]\n  (set (for [x s1 y s2] [x y]))\n)","problem":90,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":90,"code":"(fn cross [s1 s2]\n  (reduce #(clojure.set/union %1 %2)\n          (map\n           (fn [e1]\n             (set\n              (map \n               #(vector e1 %)\n               s2)))\n           s1))\n  )","user":"545c2d07e4b01be26fd7465c"},{"problem":90,"code":"(fn [a b] \n    (into #{} \n     (reduce \n      (fn [acc a1] \n        (concat acc (map vector (repeat a1) b)))\n      []\n      a)))","user":"56e02c1ce4b0ca2494a09602"},{"problem":90,"code":"#(set (for [x %1 y %2] \t[x y]))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":90,"code":"(fn [a b]\n  (set (for [ea a\n             eb b]\n         [ea eb])))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":90,"code":"(fn [a b] (reduce (fn [ret el]\n                    (apply conj ret (map #(identity [el %1]) b)))\n                  #{} a))","user":"5b7ec039e4b047b03b20375d"},{"code":"(fn \n  [s1 s2]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn [s1 s2]\n  (reduce into #{} (map #(map vec (map (partial list %) s2)) s1)))","problem":90,"user":"5361a4f2e4b0243289761e47"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n    (for [x s1\n          y s2]\n      [x y])))","user":"51a7fe50e4b08d8ec191b803"},{"code":"(fn f [x y]\n    (set (for [b y\n          a x]\n      [a b])))","problem":90,"user":"50eafeaae4b0346a3e988cbb"},{"code":"#(set (mapcat (fn [x] (map (fn [y] [x y]) %2)) %))","problem":90,"user":"52fba50ce4b047fd5583700d"},{"problem":90,"code":"(fn [a b] (set (for [x a\n                          y b]\n                      [x y])))","user":"5ed875abe4b016b56eae05f2"},{"problem":90,"code":"(fn [x y] \n       (set (for [a x\n             b y]\n         [a b])))","user":"5654cb2de4b0f9d632dd848b"},{"problem":90,"code":"(fn [x y]\n  (set (apply concat\n         (map\n          (apply juxt (map (fn [z]\n                             #(vector z %))\n                           x))\n          y))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":90,"code":"(fn [set1 set2]\n  (set\n    (for [x set1\n          y set2]\n      (vector x y))))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":90,"code":"(fn [a b]\n   (set (for [x a\n              y b]\n          [x y]))\n\n   )","user":"53ed6976e4b0d648e757f4c4"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n   (for [x s1\n         y s2]\n     (vector x y))))","user":"5215661be4b02f6d8ea676c7"},{"code":"(fn [xs ys] \n  (into #{}\n  \t(for [x xs y ys] [x y])))","problem":90,"user":"4ea5ba92535d7eef308072d9"},{"problem":90,"code":";; (defn cartesian_product_iter [set1 set2 result]\n;;     (if (empty? set1)\n;;         (set result)\n;;         (let [new_result (clojure.set/union (map #(identity [(first set1) %]) set2) result)]\n;;             (recur (rest set1) set2 new_result))))\n;; \n;; (defn cartesian_product\n;;     [set1 set2] (cartesian_product_iter set1 set2 #{}))\n;;\n;; Slight work around for not being able to split into multiple fns\n\n\n(fn [x y]\n\t(let [cartesian_product_iter (fn [set1 set2 result]\n\t\t(if (empty? set1)\n\t\t\t(set result)\n\t\t\t(let [new_result (clojure.set/union (map #(identity [(first set1) %]) set2) result)]\n\t\t\t\t(recur (rest set1) set2 new_result))))]\n\t\t(let [cartesian_product (fn [set1 set2]\n\t\t\t(cartesian_product_iter set1 set2 #{}))]\n\t\t\t(cartesian_product x y))))","user":"57839ae9e4b0ebec4cfb74b8"},{"problem":90,"code":"(fn cp [s1 s2]\n  (reduce (fn [r s2-item]\n            (into r (map (fn [s1-item] [s1-item s2-item]) s1)))\n          #{} s2))","user":"5012da69e4b0c8732600222d"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n    (for [a a\n          b b]\n      (vector a b))))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":90,"code":"(fn zip [xs ys]\n  (letfn [(f [xs ys]\n             (if (empty? xs) nil\n               (into (map (fn [x] [(first xs) x]) ys) (f (rest xs) ys))))]\n    (set (f xs ys))))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":90,"code":"(fn [s1 s2]\n  (let [r (for [x1 s1 x2 s2]\n            [x1 x2])]\n    (into (empty s1) r))\n  )","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":90,"code":"(fn [a b]\n  (set \n   (for [x a\n         y b]\n     [x y])))","user":"53065acbe4b02e8216869792"},{"code":"(fn cart [x-coll y-coll]\n   (apply hash-set (for [x x-coll y y-coll]\n       [x y])) \n  )","problem":90,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn cp [s1 s2] (set (mapcat identity (for [x s1] (for [y s2] [x y])))))","problem":90,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"#(into #{} (for [a (seq %1) b (seq %2)] [a b]))","problem":90,"user":"5046ee3ee4b03b02161376b4"},{"problem":90,"code":"(fn cartisian-product [X Y]\n  (loop [res #{}\n         X X]\n    (if (empty? X) res\n      (recur (reduce (fn [s x] (conj s [(first X) x])) res Y) (rest X)))))","user":"531bad96e4b08068f379ed93"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n        (for [x a y b]\n          [x y]\n          )\n        )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":90,"code":"(fn [a b] \n  (into #{}\n    (for [x a\n          y b]\n      [x y])))","user":"593744abe4b02506e01a299b"},{"code":"(fn cart-prod [s1 s2]\n  (if (empty? s1) {}\n    (set (concat (map #(vector (first s1) %) s2) (cart-prod (rest s1) s2)))))","problem":90,"user":"50aab057e4b056ee0193586b"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n    (for [x set1 y set2]\n      [x y])))","user":"5922a513e4b026ae38521286"},{"code":"(fn [s1 s2]\r\n  (set (for [x s1, y s2] [x y])))","problem":90,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":90,"code":"(fn sk-for [a b]\n  (into #{} (for [aa a\n                  bb b]\n              [aa bb])))","user":"51d42f44e4b013d740b70ddb"},{"problem":90,"code":"(fn [as bs]\n  (reduce (fn [res a] (reduce #(conj %1 (vector a %2)) res bs)) #{} as))","user":"5488872ee4b0e286459a11d3"},{"problem":90,"code":"(fn [cards suits] \n  (into #{} (for [card cards \n        suit suits] \n   (into [] [card suit]))))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":90,"code":"(fn [s1 s2]\n   (reduce\n     (fn [acc el]\n       (into acc (map vec (partition 2 (interleave s1 (repeat el)))))\n       )\n     #{}\n     s2\n     ))","user":"602b90c1e4b0d5df2af22266"},{"code":"(fn [a b]\n  (set (for [x a\n       \t  y b]\n      [x y])))","problem":90,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":90,"code":"(fn [x y]                                                                                                                       \n    (set (mapcat (fn [x'] (map (fn [y'] [x' y']) y)) x)))","user":"558b50d5e4b027778923762b"},{"code":"#(apply hash-set (for [x %1 y %2] [x y]))","problem":90,"user":"4f0b2028535d0136e6c222ff"},{"code":"; first solution:\n; #(set (mapcat identity (for [x %1] (map vector (repeat x) %2))))\n\n#(set (for [x %1, y %2] [x y]))","problem":90,"user":"50b8914ce4b0cba0e598b64d"},{"problem":90,"code":"#(set \n  (for [x %1 y %2] \n    [x y]))","user":"5c787131e4b0fca0c1622825"},{"code":"(fn [& args] (set (reduce #(for [e1 %1 e2 %2] (vector e1 e2)) args)))","problem":90,"user":"50b29029e4b03ea880433563"},{"problem":90,"code":"(fn [set1 set2]\n    (set (for [a set1\n               b set2]\n           [a b])))","user":"564583f0e4b0284900eef607"},{"code":"(fn [x y]\n  (set (for [xi x yi y]\n    \t[xi yi]\n         )\n       ))","problem":90,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"(fn [x y]\n  (into #{} (for [a x, b y] [a b])))","problem":90,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys]\n         (vector x y))))","problem":90,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":90,"code":"#(set \n  (for [x %1\n        y %2]\n   [x y]))","user":"5410499de4b01498b1a719a6"},{"code":"(fn [sa sb]\n  (into #{} (for [a sa\n        b sb]\n    [a b])))","problem":90,"user":"51a97f7ae4b08d8ec191b827"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [s1 s1\n        s2 s2]\n    [s1 s2])))","user":"58852909e4b0f1effa3b76af"},{"code":"(fn [as bs]\r\n  (into #{} (for [a as b bs] [a b])))","problem":90,"user":"4dbad895535d1e037afb21ae"},{"problem":90,"code":"(fn [set1 set2]\n  (into\n    #{} (for [a set1\n              b set2]\n             [a b])))","user":"5984e7dee4b021a7a535fe43"},{"problem":90,"code":"(fn [acol bcol]\n    (into #{} \n          (for [a acol\n                b bcol]\n            [a b])))","user":"554a75c9e4b0a04f79299575"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (into #{} (mapcat (fn [e1] (map (fn [e2] [e1 e2]) s2)) s1)))","user":"5c8cfff8e4b048ec896c5996"},{"code":"#(into #{} (for [x %1 y %2] (vector x y)))","problem":90,"user":"4f066916535dcb61093f6c10"},{"code":"(comp (partial apply hash-set) #(for [p %1 q %2] [p q]))","problem":90,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"code":"(fn [a b] (apply hash-set (mapcat #(map (partial list  %) b) a)))","problem":90,"user":"4f280840e4b0d6649770a010"},{"problem":90,"code":"(fn cartesian\n  [a b]\n  (into #{}\n        (for [i a j b]\n          (vector i j))))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn [x y] (set (mapcat (fn [e] (map #(vector % e) x)) y)))","problem":90,"user":"51a3c9cde4b0e77c4ca60bf9"},{"problem":90,"code":"(fn [coll1 coll2] (set (for [x coll1 y coll2] (into [x] [y]))))","user":"568c2d96e4b0dcc4269f40af"},{"problem":90,"code":"( fn [s1 s2]\n  (into #{}\n (for [x1 s1 x2 s2]\n   [x1 x2]\n ))\n)","user":"5559b443e4b0deb715856e3c"},{"problem":90,"code":"#(set (mapcat (fn [n] (map (fn [m] [n m])  %2)) %1))","user":"5252b59de4b0541d1855b8cf"},{"code":"#(loop [frs %1 snd %2 snd-buffer %2 result #{}]\n  (cond\n    (empty? frs) result\n    (empty? snd-buffer) (recur (next frs) snd snd result)\n    true (recur frs snd (next snd-buffer) \n         (conj result [(first frs) (first snd-buffer)]))\n  )\n)","problem":90,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":90,"code":"(fn sp [x y]\n  (set (for [a x b y] [a b])))","user":"57533bc1e4b02ea1147992a6"},{"problem":90,"code":"#(into #{} (for [x %1 \n                   y %2]  \n               (vector x y)))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":90,"code":"(fn [set-a set-b]\n  (set\n   (for [a set-a\n         b set-b]\n     [a b])))","user":"4db6d993535d1e037afb2180"},{"problem":90,"code":"(fn [set1 set2] \n  (set (for [x set1 y set2] [x y]))\n)","user":"5da975b9e4b000c986472c32"},{"code":"#(into #{} (for [a % b %2] [a b]))","problem":90,"user":"4eaa96e1535d7eef3080730d"},{"problem":90,"code":"(fn [xs ys]\n   (apply hash-set (for [x xs y ys]\n     [x y])))","user":"546176e7e4b01be26fd746a2"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [ss1 s1\n         ss2 s2\n         acc #{}]\n    (if (empty? ss1)\n      acc\n      (if (empty? ss2)\n        (recur (rest ss1) s2 acc)\n        (recur ss1 (rest ss2) (conj acc [(first ss1) (first ss2)]))))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn cp [set_a set_b]\n  (set (for [x set_a\n             y set_b]\n         [x y])))","problem":90,"user":"510cd1dde4b078ea71921124"},{"problem":90,"code":"(fn[x  y] (into #{} \n          (for [ a x b y]\n               [a b]\n           )\n          ))","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [xs ys]\n   (set (for [x xs, y ys] [x y])))","problem":90,"user":"4e513758535dc968683fc4f3"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (apply concat\n                   (for [i s1]\n                     (for [j s2]\n                       [i j])))))","user":"57a0f256e4b0c3d858beb8dd"},{"code":"(fn [a b] (into #{} (for [x a y b] (vector x y) )))","problem":90,"user":"5003bb77e4b0678c553fc442"},{"problem":90,"code":"(fn f \n  [set1 set2]\n  (let [join-element (fn [s elem] (map #(vector % elem) s))]\n    (->> set2 (map (partial join-element set1)) (reduce concat) set)))","user":"55a62092e4b0acc240e31554"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat (fn [x] (map #(vector x %) ys))\n               xs)))","user":"54ca35c6e4b057c6fda3a254"},{"problem":90,"code":"(fn cart [xs ys]\n  (set (mapcat (fn [x] (map #(list x %) ys)) xs)))","user":"53e8c684e4b036ad0777e48b"},{"problem":90,"code":"#(-> (for [x %1 y %2] \n       (vector x y))\n     set)","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":90,"code":"#(set (for [x %1, y %2] [x y]) )","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn cartesianproduct [x y]\n  (set (for [a x\n        b y]\n    (vector a b))))","problem":90,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [s1 s2] \n  (into #{} (mapcat (fn [x] (map (fn [y] [x y]) s2)) s1)))","problem":90,"user":"52c25645e4b07a9af579237d"},{"code":"#(set (for [s % t %2] [s t]))","problem":90,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [xs, ys]\n  (reduce clojure.set/union\n          (map\n           (fn [x]\n             (set (map #(vector x %) ys))\n             )\n           xs\n           )\n          )\n  )","problem":90,"user":"51365524e4b04ac1f358dd52"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y])))\n;; for is too easy!\n;(fn [s1 s2]\n;  (set\n;   (mapcat (fn [x]\n;             (map (fn [y]\n;                    [x y])\n;                  s2))\n;           s1)))","user":"60794173e4b0a637ed78035d"},{"code":"#(set(for [x %1 y%2] [x y]))","problem":90,"user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [x y]\n  (loop [x x\n         result []]\n    (if (empty? x)\n      (set result)\n      (recur (rest x) (loop [y y\n             \t\t\t\t result result]\n        \t\t\t\t(if (empty? y)\n          \t\t\t\t  result\n                          (recur (rest y) (conj result [(first x) (first y)]))))))))","problem":90,"user":"538d464ee4b0b51d73faae69"},{"problem":90,"code":"(fn [x y]\n  (set (for \n    [x x\n     y y]\n   (list x y)\n    ) ) \n\n  \n  )","user":"5650ac8be4b0284900eef6c2"},{"problem":90,"code":"(fn [a, b] (set (for [x a y b] [x y])))","user":"5ed4482be4b016b56eae05ca"},{"code":"#( into #{} (for [i % j %2]  [i j]))","problem":90,"user":"4f1d1d95535d64f603146488"},{"problem":90,"code":"(fn f [x y] \n  (set \n      (mapcat\n         (fn [i] \n           (map \n             (fn [j] [i j]) y))\n         x)))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":90,"code":"#(into #{} (mapcat (fn [i] (map (fn [j] [i j]) %2 )) %1))","user":"56754c4be4b05957ce8c6149"},{"code":"#(set (apply concat (map (fn [e] (for [e2 %2] [e e2])) %)))","problem":90,"user":"4f404dcee4b0e243712b1fb0"},{"problem":90,"code":"(fn [c1 c2]\n  (set (for [item1 c1 item2 c2] \n    [item1 item2]\n    ))\n  )","user":"5510d948e4b06e50f9beb18d"},{"problem":90,"code":"(fn [xs ys] (into #{} (mapcat (fn [x] (map #(vector x %) ys)) xs)))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":90,"code":"(fn cartp [s1 s2]\n  (set (for [e1 s1\n             e2 s2]\n         [e1 e2])))","user":"5f8b06afe4b0715f5002d74a"},{"problem":90,"code":"(fn cartesian-product [x s]\n  (set (for [a x b s] (vector a b))))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":90,"code":"#(set (for  [x %1 y %2]  [x y]))","user":"563536f8e4b0bfe05bf117c5"},{"problem":90,"code":"(fn\n    [seq1 seq2]\n    \n    (loop [\n           seq1 seq1\n           seq2 seq2\n           product #{}\n    ]\n      (if (first seq1)\n        (recur (rest seq1) seq2 (into product (concat (\n                                                      map (fn [item] [(first seq1) item]) seq2\n        ))\n        )\n      )\n        product\n    )\n  )\n  )","user":"602f56c5e4b0d5df2af22297"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (for [a coll1\n        b coll2]\n         [a b])))","user":"5beda647e4b0a6d31fed2122"},{"problem":90,"code":"(fn [s1 s2] (letfn\n               [\n                (product [s e] (map (fn [x] [x e]) s))\n                (combine [x] (product s1 (nth (vec s2) x)))\n                ]\n               (reduce (fn [p e] (into p (combine e))) #{} (range (count s2)))))","user":"58a9e872e4b01a0c0b232973"},{"problem":90,"code":"(fn [a b]\n  (set\n        (for [i a\n              j b]\n          [i j])))","user":"5707abfce4b0b0fb43fd068d"},{"problem":90,"code":"(fn [s1 s2]\n  (set (apply concat\n  (for [x s1]\n    (for [y s2]\n      (vector x y))))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [c1 c2] (set (for [x c1 y c2] (vector x y))))","problem":90,"user":"4fb2f9b2e4b081705acca294"},{"code":"(fn myfn [s1 s2]\n\t( reduce (fn [x y] (reduce (fn [a b] (conj a [y b])) x s2)) #{} s1\n    )\n)","problem":90,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"#(set (for [r %1  c  %2]  [r c]))","problem":90,"user":"517945dce4b0684c1c981a43"},{"code":"(fn cartesian-product [xs ys]\n  (cond (empty? xs) '()\n        (empty? ys) '()\n        true (set (concat (map list (repeat (count ys) (first xs)) ys)\n                        (cartesian-product (rest xs) ys)))))","problem":90,"user":"4ef6f5ea535dced4c769f250"},{"problem":90,"code":"#(into #{} \n       (for [x %1 y %2]\n   \t\t[x y]))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn cartes[s1 s2] (reduce #(set (concat %1 ( (fn conjun [numb sequ] (map (fn addtovec [vec-elem] (vector numb vec-elem)) sequ)) %2 s2))) #{} s1))","problem":90,"user":"4e9de526535dbda64a6f6b8e"},{"problem":90,"code":"(fn [setA setB]\n  (let \n    [permute \n     (fn [func colA colB]\n  (mapv func\n        (cycle colA)\n        (let [countA (count colA)]\n          (reduce\n            (fn [prev item]\n              (concat prev (replicate countA item))\n              )\n            [] colB)\n          ))\n  )\n     ] \n    (set (permute (fn [a b] (vector a b)) setA setB)))\n  )","user":"58950f29e4b00487982d5270"},{"code":"(fn prod [s1 s2]\n  (let [row (fn [r s] (map #(vector % r) s))]\n    (set (apply concat (map #(row % s1) s2)))))","problem":90,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":90,"code":"(fn cartesian [s1, s2]\n  (apply hash-set\n   (apply concat\n    (for [i1 s1]\n      (for [i2 s2]\n        (vector i1 i2))))))","user":"5590e55de4b0277789237676"},{"problem":90,"code":"(fn hi [x y]\n  (set (for [a x b y] [a b])))","user":"5e663073e4b0fd0acd1586bc"},{"code":"#(set \n    (for [x %1\n          y %2]\n        [x y]))","problem":90,"user":"5014754de4b094324338f8e5"},{"problem":90,"code":"(fn [c1 c2]\n    (reduce\n     (fn [memo e1]\n       (reduce\n        (fn [memo e2] (conj memo [e1 e2]))\n        memo\n        c2))\n     #{}\n     c1))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":90,"code":"#(set (for [a (seq %1) b (seq %2)] [a b]))","user":"56bb3a4be4b0f26550335951"},{"problem":90,"code":"(fn [s1 s2]\n   (set (for [x s1\n                    y s2]\n                [x y])))","user":"5ab575f8e4b073f17744263d"},{"problem":90,"code":"(fn [xs ys] (into #{} (for [x xs, y ys] [x y])))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":90,"code":"#(into #{} (for [a % o %2] [a o]))","user":"54126d0ce4b01498b1a719d5"},{"code":"(fn cartprod [x y]\n  (set (for [xval x\n        yval y]\n    (conj '[] xval yval))))","problem":90,"user":"52d6889ae4b09f7907dd1361"},{"problem":90,"code":"(fn [s1 s2]\n  (set (mapcat (fn [e1] (map (fn [e2] [e1 e2]) s2)) s1)))","user":"5e17bb46e4b00200644e3d5a"},{"problem":90,"code":"(fn [s1 s2]\n        (set (mapcat (fn [v1] (map (fn [v2] [v1 v2]) s2)) s1)))","user":"5a250b86e4b07f18be40aa19"},{"problem":90,"code":"(fn [s1 s2]\n   (into #{} \n       (for [ss1 s1\n             ss2 s2]\n        [ss1 ss2]\n              )))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"code":"(fn [s1 s2]\n  (set\n   (for [v1 s1 v2 s2]\n     [v1 v2])))","problem":90,"user":"514721c6e4b0d520409ed392"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n   (for [set1 s1 set2 s2] [set1 set2])))","user":"559bdf16e4b066d22e731f5a"},{"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys]\n         [x y])))","problem":90,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"#(set(for [x %1, y %2] [x y]))","problem":90,"user":"4eab612d535d7eef30807316"},{"code":"(fn [a b]\r\n  (set\r\n    (for [aa a bb b] [aa bb])))","problem":90,"user":"4e02bee8535d04ed9115e791"},{"problem":90,"code":"(fn [x y]\n  (set (reduce concat (map (fn[xx] (map (fn[yy] (vector xx yy)) y)) x))))","user":"58384bc4e4b089d5ab817d27"},{"code":"(fn [set1 set2]\n  (reduce (fn [res el]\n          (into res\n                (reduce (fn [res2 el2] (conj res2 (vector el el2))) [] set2))) #{} set1))","problem":90,"user":"51cec7b1e4b0e42293a2255b"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set (for [e1 s1\n             e2 s2]\n         [e1 e2])))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":90,"code":"(fn my-function [s1 s2]\n\t(set (for [a s1 b s2] (vector a b))))","user":"57c0917be4b05aa3c4741c95"},{"problem":90,"code":"(fn [s t]\n (set (for [x s y t]\n    (vector x y))))","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn [s1 s2]\n  (set (for [e1 s1 e2 s2] [e1 e2])))","problem":90,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn [s1 s2]\n\t  (into #{} (apply concat (map (fn [x] (map #(vec (list x %)) s2)) s1))))","problem":90,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn cprod [s1 s2]\r\n  (into #{}\r\n    (mapcat (fn [a]\r\n             (map #(vector a %) s2))\r\n            s1)))","problem":90,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [a b]\n  (set (for [i a j b]\n    (vector i j))))","problem":90,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":90,"code":"(fn [s1 s2] (set (for [e1  s1, e2  s2] [e1 e2])))","user":"57aa290de4b0b8559636fc65"},{"problem":90,"code":"(fn [a b] \n  (into #{} (for [x a \n        y b]\n  [x y])))","user":"5574c172e4b05c286339e059"},{"problem":90,"code":"(fn [v1 v2] (set (for [x v1 y v2] [x y])))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":90,"code":"(fn [xs ys]\n\t(into #{} (for [y ys x xs] [x y])))","user":"536102efe4b0243289761e3e"},{"problem":90,"code":"#(set (for [x %1 y %2] (conj [] x y)))","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":90,"code":"(fn [conjunto1 conjunto2]\n  \n(set (for [x conjunto1 y conjunto2] [x y])))","user":"59e63a2ce4b08badc2a0c569"},{"code":"(fn [set1 set2] (loop [s1 (seq set1)\n                       s2 (seq set2)\n                       final []]\n                  (cond\n                   (empty? s1) (into #{} final)\n                   (empty? s2) (recur (next s1) (seq set2) final)\n                   true (recur s1 (next s2) (conj final (vec (list (first s1) (first s2))))))))","problem":90,"user":"507a33dee4b08327cd804a68"},{"problem":90,"code":"(fn cart [x y](let[f (fn [seco] (map #(vector % seco) x))](into #{}( mapcat f y))))","user":"57752a2de4b0979f89651613"},{"problem":90,"code":"(fn [x y] (set(for [xs x, ys y]\n             [xs ys])))","user":"566a3a26e4b0a866af689699"},{"code":"(fn cortes [set1 set2]\n  (apply hash-set (for [x set1 y set2] [x y]))\n  )","problem":90,"user":"4ecfa05c535d44c135fd68b9"},{"problem":90,"code":"(fn [a-seq b-seq]\n  (set (for [a a-seq\n        b b-seq]\n    [a b])))","user":"56fee4c0e4b08d47c97781b5"},{"code":"(fn \n  [map1 map2] \n  (set\n  (for \n    [x map1\n     y map2]\n    [x y]\n  )\n  )\n)","problem":90,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys]\n         (list x y))))","problem":90,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":90,"code":"(fn [a b]\n  (set\n   (for [x a y b]\n     [x y])))","user":"55c68089e4b0e31453f649c4"},{"problem":90,"code":"(fn [left right]\n   (set (for [l left r right] [l r])))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn my-cart [setA setB]\n      (set\n        (mapcat identity\n          (for [elmA (sort (vec setA))]\n            (for [elmB (sort (vec setB))]\n              [elmA elmB]\n              )\n            )\n          )\n        )\n      )","problem":90,"user":"536827f1e4b0243289761e8a"},{"problem":90,"code":"(fn cart [s1 s2]\n  (into #{} \n    (for [x s1\n        y s2]\n      [x y]      \n    )\n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"problem":90,"code":"(fn [cs rs]\n  (loop [cols cs rc []]\n    (if (empty? cols)\n      (into #{} rc)\n      (recur (rest cols)\n             (concat rc\n                   (loop [rows rs rr []]\n                     (if (empty? rows)\n                       (reverse rr)\n                       (recur (rest rows)\n                              (conj rr [(first cols) (first rows)])))))))))","user":"52979551e4b02ebb4ef75043"},{"problem":90,"code":"#( into #{} (for [x %1 y %2] [x y] ))","user":"579d9601e4b05b1deef9ae18"},{"problem":90,"code":"(fn [a b]\n   (set (for [a a b b] (vector a b)))\n   )","user":"556f443be4b09a3098a5251e"},{"problem":90,"code":"(fn f ([a b] (f (rest a) b (first a) b #{}))\n  ([a b c d r]\n   (let [e (empty? d)]\n    (if (and (empty? a) e)\n    r\n    (recur (if e (rest a) a)\n           b\n           (if e (first a) c)\n           (if e b (rest d))\n           (if e r (conj r [c (first d)]))\n           )))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"#(set (for[a %1 b %2][a b]))","problem":90,"user":"4e6cf521535de274dd8d818b"},{"code":"(fn [set1 set2]\n  (set (for [x (into '() set1) y (into '() set2)] (list x y))))","problem":90,"user":"4ff9cfd6e4b0678c553fc3af"},{"problem":90,"code":"#(set (apply concat (map (fn [x] (map (fn [y] [x y]) %2)) %)))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn[x y] (set (for [i x j y] [i j]) ))","problem":90,"user":"4e9fde3c535d7eef3080729b"},{"code":"(fn [set1 set2] \n    (loop [s1 set1 s2 set2 product #{}]\n      (if (empty? s1) (set product)\n        (recur (rest s1) s2 \n          (concat product (map #(vector (first s1) %) s2))))))","problem":90,"user":"4ef4ab95535dced4c769f23b"},{"code":"(fn [ls rs]\r\n  (set \r\n    (for [l ls\r\n          r rs]\r\n      [l r])))","problem":90,"user":"4dd62278535d2dad7130b5c7"},{"problem":90,"code":"(fn\n  [set1 set2]\n  (set (mapcat (fn [elem] (map (partial conj [] elem) set2))  set1)))","user":"5720a2b0e4b0c5bde472c099"},{"code":"(fn [c1 c2] (set (for [el1 c1, el2 c2] [el1 el2])))","problem":90,"user":"5290257ae4b0239c8a67af03"},{"problem":90,"code":"#(into #{} (mapcat (fn [x] (map (fn [y] [y x]) %1)) %2))","user":"5dc98501e4b02f9375f4e1e6"},{"code":"(fn [a b]\n    (set (for [x a y b] [x y])))","problem":90,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn [sa sb]\n   (set (for [a sa, b sb] [a b])))","problem":90,"user":"4ee26f01535d10e5ff6f5368"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat (fn [x] (map (fn [y] (list x y)) ys)) xs)))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":90,"code":"(fn [x y]\n  (set (mapcat (fn [x1] (map #(identity [x1 %]) y)) x)))","user":"5522cd9ae4b0882d96d091ab"},{"problem":90,"code":"(fn [x y]\n (set (for [ a x b y]\n    [a b])))","user":"566d71b1e4b0a866af6896ca"},{"problem":90,"code":"(fn [x y]\n  (into #{} (reduce #(clojure.set/union (map (fn [n] (vector %2 n)) y) %1) #{} x)))","user":"4ff3113ae4b0678c553fc345"},{"code":"#(set (\n   for [a %1 b %2]\n   [a b]\n   ))","problem":90,"user":"518aec06e4b06da86c1973c2"},{"problem":90,"code":"(fn cart-prod\n        [xs ys]\n        (if (empty? xs)\n          #{}\n          (clojure.set/union (into #{} (map (partial vector (first xs)) ys)) (cart-prod (rest xs) ys))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":90,"code":"(fn [a b]\n  (set (for [a a b b] (conj [] a b))))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"(fn [s1 s2]\n      (set (for [a s1 b s2]\n             [a b])))","problem":90,"user":"50f48298e4b004d364930527"},{"code":"(fn [f s]\r\n  (set (mapcat (fn [i]\r\n                 (reduce #(conj % [%2 i])\r\n                         #{}\r\n                         f))\r\n               s)))","problem":90,"user":"50608ea0e4b07251188e4456"},{"problem":90,"code":"(fn cartesian\n  [setA setB]\n  (-> \n   (for [a setA\n         b setB]\n     [a b])\n   set))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":90,"code":"(fn cartesian-prod\n  [lst1 lst2]\n  (loop [lst1 lst1\n         res  ()]\n    (if (empty? lst1)\n      (into #{} res)\n      (recur (rest lst1)\n             (concat (map #(vector (first lst1) %) lst2) res)))))","user":"5c7dad57e4b0d597f478caba"},{"problem":90,"code":"(fn cartesian\n  [n1 n2]\n  (set (for [x n1 y n2] [x y])))","user":"5e95013fe4b0fbed045a3800"},{"problem":90,"code":";#(into #{}(for [x %1 y %2][x y])) \n(fn [a b]\n  (set (for [x a y b]\n         [x y])))","user":"580d7e53e4b0849f6811b73e"},{"problem":90,"code":"(fn [a b]\n  (letfn [(pair [x]\n                (map vector\n                     (repeat (count b) x)\n                     b))]\n    (set (mapcat pair a))))","user":"55b1e9e7e4b0da326a65cf74"},{"code":"(fn [as bs] (set (mapcat (fn [a] (map #(vector a %) bs)) as)))","problem":90,"user":"5078d366e4b08327cd804a5b"},{"problem":90,"code":"(fn [x y] (into #{} (partition 2 (flatten (map #(map (fn [i] [% i])  y)  x)))))","user":"5650082fe4b0284900eef6b7"},{"problem":90,"code":"#(set (for [a %1\n        b %2]\n    [a b]))","user":"5f5e166ce4b02876ed9fcfed"},{"code":"(fn [xs-1 xs-2]\n  (let [f (fn [xs y] (map (fn [x]  [y x]) xs))]\n    (set (mapcat (partial f xs-2) xs-1))))","problem":90,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n    (for [x set1  y set2] [x y])))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":90,"code":"(fn my-cartesian-product\n  [colla collb]\n  (into #{}(for [a colla\n                 b collb]    \n             [a b])))","user":"5f4eb036e4b0102c75033969"},{"problem":90,"code":"(fn [arg1 arg2] (into #{} (for [x arg1 y arg2] [x y])))","user":"567d18c9e4b05957ce8c61c4"},{"code":"#(set (for [x % y %2]  [x y]))","problem":90,"user":"4deff9f9535d08e6dec9fe15"},{"problem":90,"code":"(fn cartesian \n  ([a-set b-set] (cartesian a-set b-set []))\n  ([a-set b-set product-set] \n   (if (empty? a-set)\n     (set product-set)\n     (recur (rest a-set) b-set (concat product-set (reduce #(conj %1 [(first a-set) %2]) [] b-set))))))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [s1 s2]\r\n    (let [x (flatten\r\n              (map\r\n                (fn [x] (interleave s1 (repeat x))) s2))]\r\n      (loop [input x\r\n             output #{}]\r\n        (if (empty? input)\r\n          output\r\n          (recur (rest (rest input))\r\n                 (conj output [(first input) (first (rest input))]))))))","problem":90,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn [xs ys]\r\n  (reduce into #{} (for [x xs] \r\n  (map #(vector x %) ys)))  \r\n  )","problem":90,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn[s t] (into #{} (for [a s b t] [a b])))","problem":90,"user":"4ec64981535d6d7199dd36c7"},{"problem":90,"code":"(fn cart [& colls]\n  (set (for [x (first colls)\n             more (last colls)]\n         (vector x more))))","user":"591f5124e4b09b4ee5954c45"},{"code":"(fn [alpha beta] (set (let [x (seq alpha) y (seq beta)] (loop [xi 0 yi 0 result []] (cond (= xi (count x)) result (= yi (count y)) (recur (inc xi) 0 result) true (recur xi (inc yi) (conj result [(nth x xi) (nth y yi)])))))))","problem":90,"user":"4e975bce535dbda64a6f6b53"},{"problem":90,"code":"(fn [x y]\n  (set(for [rank x\n        suit y]\n    [rank suit] \n  )))","user":"5bd5ede3e4b0ed4b8aab4ba3"},{"code":"(fn [b a] (into #{} (mapcat #(map vector b (repeat %)) a)))","problem":90,"user":"5175533fe4b0dea9bbfba575"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a\n        y b]\n    [x y]\n    )))","user":"60593916e4b07e92fa001acc"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (mapcat #(map (partial vector %) s2) s1)))","user":"543c5200e4b032a45b86933e"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [tmps1 s1 news #{}]\n    (if (empty? tmps1)\n      news\n      (recur (rest tmps1) (loop [tmps2 s2 tmpnews news]  \n                            (if (empty? tmps2)\n                              tmpnews\n                              (recur (rest tmps2) (conj tmpnews (concat (vector (first tmps1)) (vector (first tmps2))))))) ))))","user":"59368ccae4b02506e01a297a"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (mapcat (fn [a]\n                      (map #(vector % a)\n                           s1))\n                    s2)))","user":"559d33b3e4b0ec2b359424d9"},{"problem":90,"code":"(fn product [seq1 seq2]\n  (set (for [s1 seq1\n                  s2 seq2]\n              [s1 s2])))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn f [a b]\n\t(into #{} (apply concat (for [x a\n    :let [y (map vector (repeat (count b) x) b)]\n    ] y)))\n)","problem":90,"user":"50f4894be4b004d364930528"},{"problem":90,"code":"#(set (mapcat \n  (fn [x]\n    (map (partial vector x) %2)) %1))","user":"555883c5e4b0deb715856e2d"},{"problem":90,"code":"(fn [xs ys]\n  (loop [[x & rest-xs] (seq xs)\n         result        #{}]\n    (if (= x nil) result\n      (recur rest-xs\n             (into result (loop [[y & rest-ys] (seq ys)\n                                 single-prod   #{}]\n                            (if (= y nil) single-prod\n                              (recur rest-ys (conj single-prod [x y])))))))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":90,"code":"#(set (reduce (fn [res x]\n                 (reduce (fn [ curr t] (conj curr t)) res (map (fn [y]  [x y]) %2 ))\n                 ) #{} %1))","user":"524025bce4b0ad64fa01030f"},{"problem":90,"code":"#(set(for [a %1 b %2] (vector a b)))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":90,"code":"(fn [x y] (reduce (fn [acc e] (clojure.set/union acc (set (map #(list e %) y)))) #{} x))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":90,"code":"(fn [a b]\n  (let [repeated-a (mapcat #(repeat (count b) %) a)]\n    (set\n      (partition 2\n        (interleave repeated-a (cycle b))\n      )\n    )\n  )\n)","user":"554707bae4b0a04f79299544"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs\n      \t     y ys]\n         [x y])))","user":"4db1b3951254ad5b4805fa6f"},{"problem":90,"code":"#(set ( for [a %1, b %2] [a b]))","user":"5c17467fe4b01240ff5671df"},{"problem":90,"code":"(fn cartesian-prod [x y]\n  (into #{} (for [coll1 x\n                  coll2 y]\n              [coll1 coll2])))","user":"5ef18431e4b07c55ae4a0529"},{"problem":90,"code":"#(into #{} (for [x %1\n                 y %2]\n             [x y]))","user":"548b8a50e4b0e286459a11ff"},{"problem":90,"code":"#(set (mapcat (fn [y] (map (fn [q] [q y]) %)) %2))","user":"50d0d2dde4b00b15ecee9768"},{"problem":90,"code":"(fn [a b]\n     (into #{}\n        (for [x a y b]\n          (vector x y)\n         )\n     )\n)","user":"56195e57e4b053970a773af6"},{"problem":90,"code":"(fn[x y] (set (for [a1 x a2 y] [a1 a2])))","user":"54f296efe4b024c67c0cf8c8"},{"code":"(fn [ss ts]\n  (apply conj #{} \n         (for [s ss t ts] [s t])))","problem":90,"user":"4f849f76e4b033992c121c36"},{"code":"#(set (for [a (vec %1) b (vec %2)] [a b]))","problem":90,"user":"5032b066e4b00c0952a257ea"},{"problem":90,"code":"(fn [s1 s2]\n  (let [v1 (vec s1)\n        v2 (vec s2)]\n    (set (for [a v1 b v2] [a b]))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn [c1 c2]\n\t  (into #{}\n\t\t(for [x c1 y c2]\n\t\t  [x y])))","problem":90,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [colla collb]\n  (set (for [x colla\n        y collb]\n    [x y])))","problem":90,"user":"51181009e4b0e0897831a60f"},{"code":"#(set \n  (for [a %1\n      b %2]\n  (vector a b)))","problem":90,"user":"51cbaf14e4b08d8387cbedda"},{"problem":90,"code":"(fn cart [xs ys]\n  (set (for [x xs\n        y ys\n        :let [xy [x y]]]\n    xy)))","user":"5ed3c43be4b016b56eae05c4"},{"problem":90,"code":"(fn [x y] (set (for [ix x iy y] [ix iy])))","user":"506af7d8e4b0a2a5463de37d"},{"code":"(fn cartprod [a b] (set (for [x a y b] (vector x y))))","problem":90,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":90,"code":"#(set \n  (for \n    [x (vec %1) \n     y (vec %2)] [x y]))","user":"5aa4b961e4b0d174b936c888"},{"code":"(fn a [s1 s2]\n  (let\n    [union\n      (fn [set1 set2]\n        (if (< (count set1) (count set2))\n          (reduce conj set2 set1)\n          (reduce conj set1 set2)))]\n    (if (empty? s1)\n      #{}\n      (set (union\n        (map #(vec (list (first (vec s1)) %)) s2)\n        (a (set (rest (vec s1))) s2))))))","problem":90,"user":"4fb1325de4b081705acca276"},{"code":"(fn [a b] (set (mapcat identity (for [x a] ( for [y b] ( vector x y ) )))))","problem":90,"user":"50ef3e5de4b0a78662fa2652"},{"problem":90,"code":"(fn\n  [coll1 coll2]\n  (reduce #(into %1\n                 ((fn\n                    [x coll]\n                    (reduce (fn [carry v](conj carry [v x])) #{} coll)) %2 coll1)) #{} coll2))","user":"5c24671be4b07e362c2305a1"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [i set1 j set2] [i j])))","user":"57f81549e4b0d3187e900918"},{"code":"#(set\n  (for [x %\n        y %2]\n    [x y]))","problem":90,"user":"51ad244fe4b09397d510977f"},{"code":"#(set (mapcat (fn [a] (map (fn [b] [a b]) %2)) %1))","problem":90,"user":"4ee868be535d93acb0a6687d"},{"code":"(fn [s t]\n  (set (mapcat (apply juxt (map #(partial conj [%]) s)) t)))","problem":90,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"#(into #{} (for [x %1 y %2] [x y]))","problem":90,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":90,"code":"(fn [a b]\n  (set (apply concat\n        (map (fn [a] (map (partial vector a) b))a))))","user":"54580586e4b01be26fd74616"},{"problem":90,"code":"(fn cart [s1 s2]\n  (reduce conj #{} (for [x s1 y s2] [x y])))","user":"53e241a6e4b036ad0777e3f0"},{"problem":90,"code":"(fn [s1 s2] (reduce (fn [coll item] (into coll (map #(vector item %1) s2))) #{} s1))","user":"55306f9de4b076ab5578f814"},{"problem":90,"code":"(fn cartesian\n  [vs ss]\n  (set (mapcat (fn [v]\n         (map #(vector v %) ss)) vs)))","user":"579f89d5e4b05302be0b72ff"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [a s1 b s2]\n    [a b])))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":90,"code":"(fn\n  [x y]\n  (set (for [x1 x y1 y] [x1 y1])))","user":"55842bd7e4b05c286339e11c"},{"problem":90,"code":"(fn [c1 c2] (set (for [f c1 s c2] (vector f s))))","user":"537b1083e4b06839e8705e64"},{"code":"(fn [a b] (reduce (fn [s x] (reduce #(conj %(list x %2)) s b)) #{} a))","problem":90,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn [x y] (set (for [i x j y] [i j])))","problem":90,"user":"4e8768f6535dceadca469850"},{"problem":90,"code":"#(into #{} (for [a %1 b %2] (vector a b)))","user":"5e71f267e4b085ba37836dc1"},{"problem":90,"code":"(fn [x y](set(for[a x b y][a b])))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [result v1]\n            (reduce (fn [r v2]\n                      (conj r (vector v1 v2)))\n                    result\n                    s2))\n            #{}\n            s1))","user":"5463c824e4b01be26fd746c5"},{"problem":90,"code":"(fn [x y]\n  (set(for[a x b y]\n        [a b])\n       ))","user":"570377c1e4b08d47c97781f1"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set\n   (for [i1 s1 i2 s2][i1 i2])))","user":"59f91b99e4b0ca45a743a33a"},{"code":"(fn [col1 col2] (set (for [x col1 y col2] [x y])))","problem":90,"user":"51430fb2e4b0c172af7558ce"},{"problem":90,"code":"(fn [coll1 coll2] (set (for [c1 coll1 c2 coll2] [c1 c2])))","user":"606c87aae4b069485764de0d"},{"code":"(fn[x y] (set (mapcat (fn[x] (map (fn[y] (list x y)) y)) x)))","problem":90,"user":"4f32135ae4b0d6649770a08e"},{"code":"(fn [a b]\n\t(letfn [(f [a c] (map #(vector a %) c))]\n\t(reduce into #{} (map #(f % b) a))))","problem":90,"user":"506cad7de4b0a302964c548e"},{"code":"(fn cartesian [s1 s2]\n  (set (for [y s2 x s1] [x y])))","problem":90,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":90,"code":"(fn [set1 set2] (into #{} (reduce (fn [product set1-item] (concat product (map #(vector set1-item %) set2))) [] set1)))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b] [x y]))\n  )","user":"58eed4c5e4b056aecfd47db7"},{"code":"#(set (mapcat (fn [x] (map (fn [y] (vector x y)) %2)) %1))","problem":90,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":90,"code":"(fn cartesian-product\n  [coll1 coll2]\n     (reduce\n      (fn\n        [set1 item1]\n        (into\n         set1\n         (map\n          (fn\n            [item2]\n            [item1 item2])\n          coll2)))\n      #{}\n      coll1))","user":"51b01309e4b0c53cf2e68a57"},{"code":"#(set (for [y % x %2] [ y x]))","problem":90,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [coll1 coll2](into #{} (for [a coll1 b coll2] [a b])))","problem":90,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn cp [s1 s2]\r\n (set (for [ x s2 y s1] [y x]))\r\n)","problem":90,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [a b] \n  (apply clojure.set/union\n         (map #(set (map (partial vector %) b)) a)))","problem":90,"user":"50772e6ae4b0fc74642bff5d"},{"code":"(fn [a b]\n  (set (for [x a y b]\n    [x y])))","problem":90,"user":"4e333091535deb9a81d77f25"},{"code":"(fn [a b] (set (mapcat #(map (partial list %1) b) a)))","problem":90,"user":"504e397ee4b0f6ff3350c485"},{"problem":90,"code":"#(set (for [s1 %1\n            s2 %2]\n        [s1 s2]))\n\n;; #(into #{} (for [x %1 y %2]\n;;                [x y]))\n\n;; (fn [s1 s2]\n;;     (set (mapcat\n;;           (fn [x] (map #(list %1 x) s1))\n;;           s2)))","user":"591ad160e4b09b4ee5954bdf"},{"code":"#(apply hash-set (for [a %1 b %2] [a b]))","problem":90,"user":"5002b6e5e4b0678c553fc42c"},{"problem":90,"code":"(fn [seq1 seq2]\n  (into #{} (for [i seq1\n                  j seq2]\n              [i j] )))","user":"56bff105e4b060a8e693e3a4"},{"problem":90,"code":"(fn p90 [set1 set2] \n   (let [a (atom #{})]\n     (doseq\n       [faces set1 \n        suits set2]\n     (swap! a conj [faces suits]))\n    @a))","user":"5400e918e4b0de5c41848619"},{"code":"(fn [s1 s2]\n  (set (for [a s1 b s2] [a b])))","problem":90,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn cartesian [s1 s2] \n   (loop [acc #{} remainder s1] \n     (if \n       (empty? remainder) acc\n       (recur (apply conj acc \n                     (map (fn [el] [(first remainder) el]) s2)) (next remainder)))))","problem":90,"user":"52319066e4b0e2e8de81d1e9"},{"problem":90,"code":"(fn [x y]\n  (let [ycnt (count x)]\n    (loop [a (seq x) b (seq y) cnt ycnt result []]\n      (if (empty? b)\n        (set result)\n        (if (= cnt 1)\n          (recur (seq x) (rest b) ycnt (conj result [(first a) (first b)]))\n          (recur (rest a) b (dec cnt) (conj result [(first a) (first b)])))))))","user":"58e90258e4b056aecfd47cfd"},{"problem":90,"code":"#(apply sorted-set (mapcat (fn[x] (map (fn [y] (vector x y)) %2)) %))","user":"5461873de4b01be26fd746a3"},{"problem":90,"code":"(fn [set1 set2]\n  (letfn [\n          (aux [s1 s2 acc]\n            (if (empty? s1)\n               acc\n               (recur (rest s1) \n                      s2 \n                      (clojure.set/union \n                         (set (map #(list (first s1) %) s2)) \n                               acc\n                       )\n               )\n             )\n           )    \n    ]    \n   (aux set1 set2 #{}))\n)","user":"563cdfdfe4b0bfe05bf11840"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat (fn [x] (map (fn [y] [x y]) ys)) xs)))","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":90,"code":"(fn [a b]\n  (into #{} (apply concat (map (fn[l] (map #(vector l % ) b)) a))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [s1 s2]\n  (set\n   (for [a s1 b s2]\n     [a b])))","problem":90,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn [A B]\n  (set (for [a A b B] [a b])))","problem":90,"user":"4e28120f535deb9a81d77efa"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (fn [y] (list x y)) %2)) %))","user":"52f8b86de4b047fd55836fdb"},{"problem":90,"code":"(fn [s1 s2]\n      (into #{} (for [e1 s1\n             e2 s2]\n         [e1 e2])))","user":"53f891eee4b0de5c4184856d"},{"problem":90,"code":"(fn cap2 [A B] \n   (if (seq A)\n     (clojure.set/union (into #{} (map (fn [a b] [a b]) (cycle #{(first A)}) B))\n                        (cap2 (rest A) B))\n     #{}))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":90,"code":";(fn [s1 s2] (reduce (fn [s e1] (into s (map #(vector e1 %) s2))) #{} s1))\n#(set (for [x %1 y %2] [x y]))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn cart [x y] (set (for [a x b y] [a b])))","problem":90,"user":"4ef9b021535dced4c769f269"},{"problem":90,"code":"(fn foo [xs ys]\n  (if (empty? ys) {}\n    (into #{} (concat (map (fn [x] [x (first ys)]) xs) \n            (foo xs (rest ys))))))","user":"54133900e4b01498b1a719de"},{"code":"(fn [x y] (set (mapcat\n  #(map (partial vector %) y) x)))","problem":90,"user":"4f1052b9535d64f603146418"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n  (for [i1 s1\n        i2 s2]\n    [i1 i2])))","user":"54468fd3e4b032a45b8693b2"},{"code":"#(into #{} \n       (for [x %\n             y %2]\n         [x y]))","problem":90,"user":"529223cbe4b0239c8a67af26"},{"code":"(fn [set1 set2]\n  (set (for [i set2 j set1]\n     [j i])))","problem":90,"user":"4f85a75ce4b033992c121c48"},{"problem":90,"code":"(fn\n  [x y]\n  (set (for [a (vec x) b (vec y)] [a b])))","user":"5ac35d00e4b0e27600da7712"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [a s1 b s2] [a b])))","user":"5db7376fe4b010eb3c36cd43"},{"problem":90,"code":"#(reduce\n    (fn [new-set item]\n      (into new-set (map (fn [x] [item x]) %2)))\n    #{} %1)","user":"5c6d0e51e4b0fca0c1622735"},{"code":"(fn [s1 s2]\n  (reduce (fn [c1 x]\n    (reduce (fn [c2 y] (conj c2 [x y]))\n    c1 s2))\n  #{} s1))","problem":90,"user":"4dc1e1e4535d020aff1edf90"},{"problem":90,"code":"(fn [xs ys]\n    (set (mapcat (fn [n] (map #(vector n %1) ys)) xs))\n    )","user":"53c3397be4b00fb29b221279"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [r1 s1\n         a #{}]\n    (if-let [f1 (first r1)]\n      (recur (rest r1)\n             (loop [r2 s2\n                    a2 a]\n               (if-let [f2 (first r2)]\n                 (recur (rest r2) \n                        (conj a2 [f1 f2]))\n                 a2)))\n      a)))","user":"55995fa7e4b031d6649c9ba9"},{"problem":90,"code":"(fn [a b] (reduce #(apply conj %1 (map (fn [v] [%2 v]) b)) #{} a))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn [s1 s2] \n  (set (for [x s1 y s2] \n    (list x y))))","problem":90,"user":"4dc29a1d535d020aff1edf96"},{"problem":90,"code":"(fn cart [as bs] (set (for [a as b bs]\n                      (vector a b))))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [a b]\n  (set\n    (for [x a y b] [x y])))","problem":90,"user":"4f92884de4b0dcca54ed6caf"},{"code":"#(set (for [x %1 y %2]\n   [x y]\n))","problem":90,"user":"532cb6bbe4b019098a6f8b33"},{"problem":90,"code":"#(set (for [x ^long %1 y ^long %2] [x y]))","user":"5585aa48e4b001b0851d7510"},{"problem":90,"code":"(fn [seta setb]\n  (set (for [x seta y setb] [x y])))","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn[a b] \n    (set (reduce concat (map\n        (fn[s] (reduce (fn[x y] (conj x [s y])) '() b))\n        a\n    )))\n)","problem":90,"user":"5017eface4b02f523d7cc5e7"},{"problem":90,"code":"(fn [s1 s2]\n  (->>\n   (for [x s1\n         y s2]\n     [x y])\n   set))","user":"5a3e1243e4b0447ef91cc5ae"},{"problem":90,"code":"(fn cp [a b] \n  (set (partition 2 \n    (interleave \n      ((fn [thelist n] (mapcat #(repeat n %) (vec thelist))) a (count b)) \n      (apply concat (repeat (count a) (vec b)))))))","user":"56278266e4b00e49c7cb47d3"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [e1 xs e2 ys]\n    [e1 e2])))","user":"5e42602ae4b01d43a70e8e63"},{"code":"(fn [xs ys] (set (partition 2 (flatten (map (fn [y] (map #(list % y) xs)) ys)))))","problem":90,"user":"4ece9ca9535d23f03622770f"},{"code":"(fn my-cartesion-product\r\n  [set1 set2]\r\n  (set (mapcat (fn [x] (map #(vector x %) set2)) set1)))","problem":90,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"#(into #{} (for [i %1 j %2] [i j]))","problem":90,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [s1 s2] (set (reduce concat (map #(map (fn [a] [% a]) s2) s1))))","problem":90,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (fn [y] (vector x y)) %2)) %1))\n\n;\n; You chucklehead, you..\n;\n; #(set (for [a %1 b %2] [a b]))\n;","user":"594266cfe4b060784b3b790b"},{"code":"(fn cp [a b] \n  (set (for [x a y b]\n    [x y])))","problem":90,"user":"4e6f1b7a535d5021c1a89618"},{"code":"(fn [s1 s2]\n  (set (for [s s1 b s2]\n    [s b])))","problem":90,"user":"51696bcde4b03f62cda68ce7"},{"problem":90,"code":"(fn [coll1 coll2]\n   (into #{} (for [coll1 coll1\n                 coll2 coll2]\n             [coll1 coll2])) )","user":"5840c068e4b089d5ab817df8"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [s s1\n         result #{}]\n    (if (empty? s)\n      result\n      (recur (rest s) \n             (apply conj result (map (fn [x] (list (first s) x)) s2))))))\n\n;; better solution\n;; #(set\n;;   (for[x %1, y %2]\n;;     [x y]))","user":"56ee0691e4b04a395b9a044c"},{"code":"(fn [b1 b2] (into #{} (reduce concat '() ((fn [l1 l2] (map (fn aa [e] (map #(vector e %) l2)) l1)) b1 b2))))","problem":90,"user":"510931ede4b0c71f76895663"},{"code":"(fn crossp [l1 l2]\n  (loop [result #{}, l1 l1]\n    (if (empty? l1)\n      (set result)\n      (recur (into (map vector (repeat (first l1)) l2) result) (rest l1)))))","problem":90,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn this [xs ys]\n  (let [myflat (fn t [l]\n                 (cond (= (count l) 0) '()\n                       :else (reverse (concat (reverse (t (rest l)))\n                                              (reverse (first l))))))]\n                       \n                                      \n                                   \n  (set (myflat (for [i xs]\n                  (for [j ys]\n                  [i j]))))))","problem":90,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn [as bs] (into #{} (for [a as b bs] [a b])))","problem":90,"user":"4ed292ac535d44c135fd68d9"},{"code":"#(set (for [x %1 y %2]\n         [x y]))","problem":90,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn p90 [s1 s2]\n\t(set (mapcat\n          (fn [x] (map (fn [y] (vector x y)) s2)) s1)))","problem":90,"user":"500b61b1e4b03d00572d2d81"},{"problem":90,"code":"(fn product [seqa seqb]\n    (loop [a (seq seqa)\n           b (seq seqb)\n           ans (vector )]\n        (if (empty? a)\n          (set ans)\n          (recur (rest a) b\n                              (loop [x (first a)\n                                     s b\n                                     z ans]\n                                (if (empty? s)\n                                  z\n                                  (recur x (rest s) (conj z (vector x (first s))))\n                                  )\n                              )\n\n        )\n\n      )\n  )\n  )","user":"57cc14aae4b05aa3c4741d4a"},{"code":"(fn [s1 s2]\n  (set\n    (apply concat\n      (for [i1 s1]\n        (for [i2 s2]\n    [i1 i2])))))","problem":90,"user":"4e131443535d04ed9115e7d3"},{"code":"(fn [set1 set2] \n        (into #{} (for [a set1 b set2] \n                    (list a b))))","problem":90,"user":"4fe8da4de4b0547ebccb2429"},{"code":"(fn [a b] \n  (reduce\n   \t(fn [acc i]\n      (into acc (\n                   reduce\n                   (fn [acc2 i2]\n                     (conj acc2 [i i2])\n                   )\n                   #{}\n                   b\n                   )\n      )\n    )\n   \t#{}\n    a\n  )\n)","problem":90,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":90,"code":"(fn [xs ys]\n  (into #{}\n    (for [x xs, y ys]\n      [x y]\n      )\n    )\n  )","user":"558ee1c9e4b0277789237659"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [a s1 b s2] [a b])))","user":"56ef077ae4b04a395b9a0459"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat #(map (partial vector %) s2) s1)))","user":"5687fe58e4b0dcc4269f4065"},{"code":"(fn [s1 s2]\n  (set (for [x s1, y s2]\n    [x y])))","problem":90,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn [as bs]\n  (set (apply concat\n              (map (fn [a]\n              (map (fn [b]\n                     [a b])\n                   bs))\n            as))))","problem":90,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":90,"code":"#(set (for [x %1 y %2] (vec (list x y))))","user":"5c1aadcde4b01240ff567209"},{"problem":90,"code":"(fn [coll-1 coll-2]\n(reduce (fn [accum val]\n(apply conj accum (map (fn [map-val] [val map-val]) coll-2))\n) #{} coll-1))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":90,"code":"#(set (mapcat (apply juxt (map (fn [n] (partial conj [n])) (into [] %))) (into [] %2)))","user":"554680cbe4b0a04f7929953e"},{"problem":90,"code":"(fn [set set2]\n  (\n    loop [s set res #{}]\n    (if (empty? s)\n      res\n      (recur (rest s)\n             (loop [s2 set2 res2 res]\n               (if (empty? s2)\n                 res2\n                 (recur (rest s2) (conj res2 (vector (first s) (first s2))))\n                 )\n               )\n             )\n      )\n    )\n  )","user":"55d42f78e4b0e31453f64a73"},{"code":"(fn [coll1 coll2]\n  (set (for [x coll1, y coll2] [x y])))","problem":90,"user":"4e88feef535d8b9bb0147ca8"},{"problem":90,"code":"#(set \n  (for [x %1\n        y %2]\n    [x y]))","user":"5409a12fe4b0addc1aec66df"},{"code":"(fn [a b] (set (for [i a, j b] [i j])))","problem":90,"user":"4db8ec47535d1e037afb219d"},{"code":"(fn cp [s1 s2]\n  (set (for [e1 s1, e2 s2] [e1 e2])))","problem":90,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn [s1 s2]\n  (set \n    (for [x s1\n          y s2]\n      [x y])))","problem":90,"user":"51ae350fe4b09397d5109790"},{"code":"#(reduce (fn [result a]\n           (reduce (fn [result b] (conj result [a b])) \n                   result \n                   %2))\n         #{}\n         %)","problem":90,"user":"5189a51ae4b0288ada3dbdad"},{"code":"#(set (for [a %1, b %2] [a b]))","problem":90,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn [a b]\n  (reduce conj #{} (for [i a j b]\n          [i j])))","problem":90,"user":"4e955b95535dbda64a6f6b33"},{"problem":90,"code":"(fn cart-prod [s1 s2]\n  (if (empty? s1) #{}\n  (let [e1 (first s1)\n        es1 (rest s1)]\n    (clojure.set/union (cart-prod es1 s2)\n                       (set (map (fn [k] [e1 k]) s2))))))","user":"5f63684be4b02876ed9fd012"},{"code":"#(into #{} (for [x %1\n      y %2]\n  [x y]))","problem":90,"user":"531bfb69e4b08068f379ed97"},{"problem":90,"code":"(fn [s1 s2]\n                            (into #{} (for [e1 s1 e2 s2]\n                                        [e1 e2])))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":90,"code":"#(set (map\n          (fn [x y]\n            (vector y x))\n          (mapcat (fn [n] (repeat (count %1) n)) %2)\n          (cycle %1)))","user":"576e607ae4b0979f89651579"},{"problem":90,"code":"#(set\n  (for[x %1, y %2]\n    [x y]))","user":"556c70dae4b09a3098a524fd"},{"problem":90,"code":"(fn [xs ys]\n  (set (reduce (fn [x,y] (concat x (map #(list % y) xs))) [] ys)))","user":"5933b736e4b072a2710fd05d"},{"problem":90,"code":"(fn [a b] (reduce into #{} (map #(map (partial vector %1) b) a)))","user":"59234753e4b0a390037439ef"},{"code":"(fn [a b]\n  (set (mapcat\n   (fn [x]\n     (map #(vector x %) b)      \n   ) a)\n  ))","problem":90,"user":"4ddb696b535d02782fcbe9fa"},{"problem":90,"code":"(fn cp [xs ys]\n  (set\n    (mapcat\n      (fn [x]\n        (map\n          (fn [y] [x y])\n          ys))\n      xs)\n    ))","user":"57717915e4b0979f896515b3"},{"problem":90,"code":"(fn [set-1 set-2]\n    (set \n     (for [element-1 set-1\n          element-2 set-2]\n       [element-1 element-2])))","user":"510a3cd4e4b06956752d35ad"},{"problem":90,"code":"(fn cartesian-product [xs ys] \n  (set (for [x xs y ys] [x y])))","user":"554dfe97e4b00713264bd98c"},{"problem":90,"code":"(fn testing [c1 c2]\n  (into #{} \n        (for [x c1\n       \t\t  y c2] \n          [x y])))","user":"59503c5de4b066ee0a44ae8e"},{"problem":90,"code":"(fn [a b] (set (mapcat (fn [a1] (map (fn [b1] [a1 b1]) b)) a)))","user":"5db92996e4b010eb3c36cd50"},{"problem":90,"code":"(fn [s z] (->> (for [x s \n                  y z]\n              [x y])\n                 (into #{})))","user":"58b54852e4b0ebc645576d52"},{"problem":90,"code":"(fn [x y]\n  (set (reduce concat  \n   (map (fn[z] \n          (map (fn[i] (vector z i)) y)) x))))","user":"54ecd7dde4b024c67c0cf85c"},{"code":"(fn [x y]\n  (set (for [a x b y] [a b])))","problem":90,"user":"4f4d7b8fe4b03ad3f0c10ca9"},{"problem":90,"code":"(fn cartesan-product [set1 set2]\n    (set (for [x set1 y set2] [x y])))","user":"5ac74b34e4b0e27600da777f"},{"problem":90,"code":"#(set (for [a %1\n             b %2]\n         [a b]))","user":"566734c4e4b04acd4f672dcc"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat #(map vector (repeat %1) b) a)))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":90,"code":"(fn [setA setB]\n  (loop [remSetA setA result #{}]\n    (if (empty? remSetA)\n      (set result)\n      (recur\n        (rest remSetA)\n        (concat (map (fn [ele setBele] [ele setBele]) (repeat (first remSetA)) setB) result)\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":90,"code":"#(into #{} (for [x %1\n        y %2]\n    [x y]))","user":"53968a70e4b0b51d73faaee0"},{"code":"#(into #{} (for [y %2 x %1] [x y]))","problem":90,"user":"52fcfeeee4b047fd55837027"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [f s1\n             s s2]\n         [f s])))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":90,"code":"(fn [x y] (set (for [x0 x y0 y] [x0 y0])))","user":"5282f54be4b0239c8a67ada0"},{"problem":90,"code":"(fn [coll1 coll2] (apply hash-set (for [x coll1 y coll2] (vector x y) )))","user":"55f06183e4b06e875b46ce23"},{"problem":90,"code":"(fn cart [s1 s2]\n  (set (for [e1 s1 e2 s2]\n    [e1 e2])))","user":"4daeff24edd6309eace4d16e"},{"problem":90,"code":"(fn [X Y]\n    (set (for [x X\n               y Y]\n           [x y])))","user":"5c58736be4b01df32ab73247"},{"code":"(fn [a b]\r\n   (set (mapcat (fn [x] (map #(vec [%1 x]) a)) b))\r\n)","problem":90,"user":"510a6bece4b06956752d35af"},{"code":"(fn cartesian\n  [set1 set2]\n  (set\n    (mapcat \n      (fn [e1] \n        (map \n          (fn [e2] [e1 e2])\n          set2)) \n      set1)))","problem":90,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (into #{} (for [v1 s1\n                  v2 s2]\n              [v1 v2])))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn [a b]\n  (set\n    (for [i a j b]\n      [i j])))","problem":90,"user":"50435852e4b034ff00315d22"},{"problem":90,"code":"(fn [xs ys]\n  (into #{} (for [x xs, y ys] [x y])))","user":"5adf5f9be4b0837691e92c33"},{"code":"(fn [s1 s2]\n  (into #{}\n        (apply concat\n               (map (fn [f]\n                      (map (fn [s] [f s])\n                   \t\t   s2))\n                    s1))))","problem":90,"user":"51460e4ce4b04ef915e37314"},{"code":"(fn [s1 s2] (set (reduce concat #{} (for [e1 s1] (for [e2 s2] (vector e1 e2))))))","problem":90,"user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":90,"code":"(fn [a b] \n  (apply clojure.set/union \n         (map \n   \t\t   (fn [c] \n        \t (reduce \n          \t   (fn [r d] (conj r [c d]))\n           \t   #{}\n               b))\n           a)))","user":"4f070ce6535dcb61093f6c1e"},{"code":"(fn [s t] (set (for [x s, y t] [x y])))","problem":90,"user":"5175616ae4b0dea9bbfba576"},{"problem":90,"code":"(fn p [col1 col2]\n  (apply hash-set (for [i col1 j col2]\n    [i j])))","user":"53664e3be4b0243289761e74"},{"code":"#(set (for [x %\n      \ty %2]\n\t  [x y]))","problem":90,"user":"53034738e4b0d8b024fd373e"},{"problem":90,"code":"(fn [setA setB]\n  (set (for [a setA\n        \t b setB]\n    \t\t[a b])))","user":"593870e6e4b02506e01a29d6"},{"problem":90,"code":"(fn [c1 c2] (into #{} (mapcat (fn [c1e] (map #(vector c1e %) c2)) c1)))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":90,"code":"(fn [coll1, coll2] (into (empty coll1) (for [i1 coll1, i2 coll2] [i1 i2])))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":90,"code":"#(into #{} (for [a %1 b%2] [a b]))","user":"5591cc56e4b0604b3f94d582"},{"problem":90,"code":"#(set ( mapcat                                                                                                                                                                                 \n \t\t(fn [x]                                                                                                                                                                             \n \t  \t\t(map (fn [y] (vector x y) ) %2 ))\n \t\t\t%1))","user":"57bffed6e4b05aa3c4741c89"},{"problem":90,"code":"(fn [a b]\n    (into #{}\n      (for [x a\n            y b]\n        [x y])))","user":"57b9f35be4b0fbc9809a27f9"},{"problem":90,"code":"(fn [x y]\n  (into (sorted-set)\n        (mapcat\n         (fn [a]\n           (map (fn [b] [a b]) y)) x)))","user":"553c4614e4b09218d5f45014"},{"code":"#(set (for [x %\n       y %2]\n  [x y]))","problem":90,"user":"506617c3e4b03d366d7cb2ab"},{"problem":90,"code":"#(set (for [i (seq %1)\n            j (seq %2)]\n        (vector i j)))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn [l1 l2]\n  (set (apply concat (map\n   (fn [l1x]\n     (map\n      (fn [l2x]\n        (vector l1x l2x)\n        )\n      l2)\n     )\n   l1)\n  )))","problem":90,"user":"4f031883535dcb61093f6a5e"},{"code":"(fn [l1 l2]\n  (set (mapcat\n    (fn [e] (map #(vector e %) l2))\n    l1)))","problem":90,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":90,"code":"#(into #{} (mapcat identity (map (fn [x] (map (fn [y] [x y]) %2)) %)))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":90,"code":"(fn [l1 l2]\n  (into #{} \n        (mapcat (fn [x]\n            \t\t(map (fn [y] (list x y)) l2))\n        \t\tl1)))","user":"553527ede4b09218d5f44fab"},{"problem":90,"code":"(fn cp\n  [coll1 coll2]\n  (into #{}\n        (for [c2 coll2\n              c1 coll1]\n          [c1 c2])))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":90,"code":"(fn [xs ys]\n    (set\n     (for [x xs\n           y ys]\n       [x y])))","user":"4e6a23d0535d8ccf87e9fea0"},{"code":"(fn cartesian [xs ys]\n  (set (for [x xs, y ys]\n         [x y])))","problem":90,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":90,"code":"(fn f\n  [a b]\n  (set (for [x (vec a)\n             y (vec b)]\n         [x y])))","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":90,"code":"#(set (for [e1 %1\n            e2 %2]\n        (vector e1 e2)))","user":"5e9b7aefe4b0157ca96647f1"},{"code":"(fn [x1 x2] (set (for [x x1 y x2] [x y])))","problem":90,"user":"4f2942ace4b0d6649770a01e"},{"code":"#(set (for [ x %1 y %2] [x y]))","problem":90,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":90,"code":"(fn [s1 s2] (apply hash-set (for [x s1 y s2] [x y])))","user":"54d03026e4b018d918be98de"},{"problem":90,"code":"(fn [s1, s2] (set (for [x (seq s1) y (seq s2)] [x y])))","user":"54c9571ee4b045293a27f66b"},{"code":"(fn [la lb] (set(mapcat (fn [a] (map #(vector a %) lb)) la)))","problem":90,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn product [xs ys]\n  (into #{} (for [x xs, y ys] [x y])))","problem":90,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn [x y] (set (reduce into (for [a x] (map #(vector a %) y )))))","problem":90,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn [x y]\n  (set\n   (for [a x b y]\n     (vector a b))))","problem":90,"user":"4e781a2e535d324fb2983d74"},{"code":"(fn [a b]\n  (set (sort-by second (for [x a y b] [x y]))))","problem":90,"user":"50a5f72fe4b0aa96157e2611"},{"problem":90,"code":"(fn [xs ys] (into #{} (apply concat (map #(map (fn [y] (conj [] % y)) ys) xs))))","user":"55a19e19e4b0acc240e31515"},{"problem":90,"code":"(fn cart [coll1 coll2]\n  (set\n    (for [x  coll1 y coll2]\n      [x y] )))","user":"5cb4e764e4b026601754b929"},{"problem":90,"code":"(fn [colla collb]\n  (into #{} (for [x colla y collb]  (conj [] x y))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":90,"code":"(fn [f s] (set (for [l f r s] [l r])))","user":"552e1c98e4b076ab5578f7ee"},{"code":"#(set (for [x %\n            y %2]\n        [x y]))","problem":90,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"#(into #{} (for [x %1 y %2] (list x y)))","problem":90,"user":"50fa01bce4b07934dda8b0ba"},{"problem":90,"code":"(fn [s1 s2]  (set (for [x s1 y s2] [x y])))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 y s2 ][x y])))","user":"5cab33e7e4b048ec896c5c48"},{"code":"(fn [x y]\n  (set (for [a x b y]\n    \t[a b])))","problem":90,"user":"4e9ff8d0535d7eef3080729c"},{"problem":90,"code":"(fn cartesian [col1 col2]\n (into #{}(partition 2 (flatten  (map (fn [x] (map (fn [y] [x y]) col2)) col1 )))))","user":"551d5cb9e4b07993ea3788e9"},{"problem":90,"code":"#(into #{} (for [s1 %1 s2 %2]\n             [s1 s2]))","user":"5a9db5c9e4b0d174b936c7f1"},{"code":"(fn [xs ys] (set (apply concat (map #(map (fn [x] [% x]) ys) xs))))","problem":90,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":90,"code":"(fn [a b] (into #{} (apply concat (for [aa a] (for [bb b] [aa bb])))))","user":"58273e82e4b051871117bf1b"},{"code":"(fn [xs ys]\n;  (set (map vector (flatten (repeat (count ys) (vec xs)))\n;                   (flatten (repeat (count xs) (vec ys))))))\n  (set\n   (for [x xs\n         y ys]\n     [x y])))","problem":90,"user":"516f06dce4b06aac486e5b39"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [s1 set1 s2 set2] [s1 s2])))","user":"59e4e3cbe4b08badc2a0c54a"},{"code":"(fn [a b] (into #{} (reduce (fn [s x]\n                              (concat s (map (fn [y]\n                                               [x y])\n                                             b) ))\n                            [ ] a)))","problem":90,"user":"4f03f197535dcb61093f6b84"},{"problem":90,"code":"(fn cartesian-product [n m]\n  (set (for [i n\n             j m]\n         [i j])))","user":"5d92b543e4b0915913b1d414"},{"code":"#(set (for [x % y %2][x y]))","problem":90,"user":"4ed845a8535d10e5ff6f52f8"},{"problem":90,"code":"(fn [v1 v2]\n  (set (apply concat (for [x v1] (for [y v2] [x y])))))","user":"571077e8e4b09c608db70434"},{"code":"(fn [as bs] (into #{} (for [a as b bs]\n              (list a b)\n              )))","problem":90,"user":"534d1173e4b084c2834f4a98"},{"problem":90,"code":"(fn cp \n  [arg1 arg2]\n  (set\n  (for [x arg1\n        y arg2] \n     \t(vector x y))))","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"(fn [set1 set2] (set (mapcat\n                (fn [elem] (mapcat #(set (vector (vector elem %))) set2)) \n                set1)))","problem":90,"user":"4f2aff4de4b0d6649770a044"},{"problem":90,"code":"#(apply sorted-set (into #{}\n    (for [r %1 c %2\n        :let [m (conj (conj [] r) c)]]\n    m)))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn [l1 l2]\n  (reduce conj #{}\n  (for [e1 l1\n        e2 l2]\n    [e1 e2])))","problem":90,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn[s1 s2] (set (for[e2 s2 e1 s1] [e1 e2])))","problem":90,"user":"52e68e61e4b09f7907dd1479"},{"code":"(fn cart-prod\n  [s1 s2]\n    (into #{}\n      (for [e1 s1, e2 s2]\n        [e1 e2])))","problem":90,"user":"4f047c07535dcb61093f6bcd"},{"problem":90,"code":"(fn [setA setB]\n    (set \n      (for [x setA y setB] \n        (vector x y)\n        )))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":90,"code":"(fn [a b]\n  (set (for [i a\n             j b]\n         [i j])))","user":"545e7ab0e4b01be26fd7467c"},{"problem":90,"code":"(fn [a b]\n        (set (for [x a\n                   y b]\n               [x y])))","user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y])))","problem":90,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn cart-prod [s1 s2]\n   (set (for [x s1 y s2] [x y])))","problem":90,"user":"4ed188c8535d44c135fd68cf"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set (for [i1 s1 i2 s2]\n          [i1 i2])))","user":"53f7820be4b0de5c41848560"},{"code":"(fn [a b]\n  (set (mapcat \n         #(for [y b] [% y])\n               a)))","problem":90,"user":"5159849ce4b0394f658fe236"},{"problem":90,"code":"(fn [s1 s2]\n     (into #{} (for [x (seq s1)\n           \t\t\t y (seq s2)]\n       \t\t\t\t[x y])))","user":"517e9526e4b09104ecebe7e2"},{"problem":90,"code":"(fn [a b] (into #{} (mapcat (fn [x] (map #(list x %) b)) a)))","user":"5b421edce4b02d533a91bc2c"},{"problem":90,"code":"(fn [s1 s2]\n  (->> s2\n       (mapcat #(map vector s1 (repeat (count s1) %)))\n       (set)))","user":"58182480e4b0c0e9c07b83a7"},{"problem":90,"code":"(fn [a b] (into (hash-set) (for [x a y b] [x y])))","user":"5717d674e4b07c98581c3b1a"},{"problem":90,"code":"(fn [set1 set2] (set (for [ x set1 y set2 ] [ x y ])))","user":"598af379e4b02b9968b84ce6"},{"code":"#(set (partition 2 (mapcat (partial % %3) %2))) #(cons %2 (interpose %2 %))","problem":90,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":90,"code":"(fn [xs ys]\n  (set\n   (for [x xs y ys]\n     [x y])))","user":"58a2b57fe4b02bd94d917ede"},{"code":"#(set\n  (reduce\n    (fn [xs x]\n      (concat xs\n        (partition 2\n          (interleave (repeat (count %2) x) %2)\n        )\n      )\n    )\n    #{}\n    %1\n  )\n)","problem":90,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [xs ys] (set (for [i xs j ys] [i j])))","problem":90,"user":"5047eadde4b0ec70b3ef8d94"},{"problem":90,"code":"(fn [S1 S2] (set (for [s1 S1 s2 S2] [s1 s2])))","user":"58134ba8e4b0f478707a060b"},{"problem":90,"code":"(fn cartesian [a b]\n  (into #{} (for [x a y b] (vector x y))))","user":"5f84f110e4b0375e81f54e79"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (mapcat (fn [x1] (map (fn [x2] [x1 x2]) s2)) s1)))","user":"5553b924e4b0deb715856e06"},{"code":"(fn [x y] (set (for [i x j y](vector i j))))","problem":90,"user":"4de18de7535d08e6dec9fde8"},{"problem":90,"code":"(fn product [a b]\r\n  (if (empty? a)\r\n    '()\r\n    (set (concat\r\n      (map (fn [x] [(first a) x]) b)\r\n      (product (rest a) b)))))","user":"555bd27ae4b0b056612e2244"},{"problem":90,"code":"#(set (for [a %1 b %2] [a b] ))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":90,"code":"(fn[a b]\n  (into #{} (for [k a v b] [k v])))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [ls1 ls2] \n  (into #{} \n        (mapcat \n         ((fn [s] \n            (fn [n] (map #(vector n %) s))) ls2) \n         ls1)))","problem":90,"user":"534eecaee4b084c2834f4abf"},{"problem":90,"code":"(fn [c1 c2](set (mapcat (fn [c](reduce #(conj %1 (vector %2 c)) [] c1)) c2)))","user":"546280d8e4b01be26fd746b0"},{"problem":90,"code":"(fn\n  [a b]\n  (reduce\n   #(into %1 (map (partial vector %2) b)) #{} a))","user":"5a085dfde4b01bb0ae8afdf4"},{"code":"(fn [s1 s2]\n  (set (for [t1 s1\n             t2 s2]\n         [t1 t2])))","problem":90,"user":"536f871de4b0fc7073fd6e7f"},{"problem":90,"code":"(fn [a b] (set (map vec (partition 2 (mapcat #(interleave (repeat %) b) a)))))","user":"5578f292e4b05c286339e08f"},{"problem":90,"code":"(fn [set-a set-b]\n  (set\n   (for [x set-a\n         y set-b]\n     (vector x y))))","user":"5cb41c40e4b026601754b911"},{"code":"(fn [s1 s2]\n   (into #{} (for [s1 s1, s2 s2]\n               [s1 s2])))","problem":90,"user":"51f40975e4b0fca5e8b4822e"},{"problem":90,"code":"(fn [s1 s2]\n  \n  (into #{} (for [s1 s1\n                  s2 s2]\n              [s1 s2]\n              ))\n  )","user":"59af9061e4b0e1f4e384c8b9"},{"problem":90,"code":"(fn [m1 m2]\n    (loop [r #{} mm1 m1 mm2 m2]\n      (if (empty? mm1)\n        r\n        (if (empty? mm2)\n          (recur r (rest mm1) m2)\n          (recur (conj r [(first mm1) (first mm2)]) mm1 (rest mm2))\n        )\n      )\n    )\n  )","user":"5681afaae4b0945ebc182a87"},{"problem":90,"code":"#(set(for [x %1\n            y %2]\n        [x y]))","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":90,"code":"(fn [a b]\n  (set\n    (reduce concat\n      (map \n       (fn [n] \n         (map \n          (fn [x] \n            [n x]\n          )\n          (into-array b)     \n         )\n        )\n      (into-array a) \n     )\n   )\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n        (mapcat #(map vector s1 (repeat %)) s2)))","user":"5c03e927e4b0bdcf453d167b"},{"problem":90,"code":"(fn [xs ys]\n    (let [zs (for [x xs y ys]\n               [x y])]\n      (loop [zs zs acc #{}]\n        (if (empty? zs)\n          acc\n          (recur (rest zs) (conj acc (first zs)))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [x y]\n  (set (for [a x b y]\n         [a b])))","problem":90,"user":"52474133e4b05ef8e38e635e"},{"code":"#(set (for [i %1, j %2] [i j]))","problem":90,"user":"50f9739ce4b0e7c80cb15a4d"},{"code":"(fn product [xs ys]\r\n   (set (for [x xs\r\n              y ys]\r\n          [x y])))","problem":90,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [a s1\n             b s2] [a b])))","user":"553638bae4b09218d5f44fba"},{"problem":90,"code":"(comp set (fn [s1 s2] (for [x s1 y s2] [x y])))","user":"58fc52cee4b0438e51c2cf95"},{"problem":90,"code":"(fn [sq1 sq2]\n  (into #{}  (mapcat (fn [x](map #(vector x %) sq2)) sq1)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":90,"code":"(fn [x y] (set (mapcat #(map vector (repeat %) y) x)))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":90,"code":"#( set ( for [ x %1 y %2 ] [ x y ] ) )","user":"57561529e4b02ea1147992d3"},{"code":"(fn [x y]\n  (set (for [a x b y]\n    [a b])))","problem":90,"user":"51899891e4b0288ada3dbdab"},{"problem":90,"code":"(fn cart-prod [s1 s2]\n  (set (mapcat (fn [e1] (map (fn [e2] [e1 e2]) s2)) s1)))","user":"5537b2c7e4b09218d5f44fce"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [s1 s1\n                  s2 s2]\n                 [s1 s2])))","user":"578dc040e4b0ebec4cfb756d"},{"problem":90,"code":"(fn [a b]\n   (->> (for [i a\n              j b]\n          [i j])\n        set))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn cartesian-product [A B]\n  (letfn [(stop-condition [l] (= 0 (count l)))\n          (cartesian-iter [l1 l2 n l]\n                (cond\n                 (stop-condition l1) l\n                 (= n (count l2)) (cartesian-iter (rest l1) l2 0 l)\n                 :else (cartesian-iter l1 l2 (+ n 1) (conj l [(first l1) (nth l2 n)]))))]\n    (cartesian-iter A (into [] B) 0 #{})))\n\n; Iterating over two lists\n; If the first list is empty: stop, and return the result.\n; If iteration count is equal to the length of the second list: restart the iteration with the rest of the first list.\n; Else: take the first item of the first list and the nth (iteration count) item of the second list, \n;\tand restart the iteration with first list, the second list and an increased iteration count.","problem":90,"user":"517531c6e4b07031762f2eea"},{"problem":90,"code":"(fn [xx yy]\n  (into #{} (for [x xx\n        y yy]\n    [x y])))","user":"571543bbe4b07c98581c3ad4"},{"problem":90,"code":"(fn cartesian [x y]\n     (set (apply concat (map #(map (fn [v] (vector % v)) y) x))))","user":"587a3babe4b01531a375eae2"},{"problem":90,"code":"(fn [seq1 seq2] (set (partition-all 2 (flatten (map #(interleave seq1 (repeat %)) seq2)))))","user":"5713c575e4b07c98581c3aab"},{"problem":90,"code":"(fn cart-proj\n   [s1 s2]\n    (set (mapcat #(map vector (repeat %) s2) s1))\n   )","user":"545e9cf1e4b01be26fd7467f"},{"problem":90,"code":"(fn [a b] (loop [aa a\n                 res #{}]\n            (if (empty? aa)\n              res\n              (recur (rest aa) \n                     (clojure.set/union res \n                            (loop [bb b\n                                   rr #{} ]\n                              (if (empty? bb)\n                                rr\n                                (recur (rest bb)\n                                       (conj rr (vector (first aa) (first bb)))\n                                       )\n                                )\n                              \n                              )\n                            )\n                     )\n              )\n            )\n  )","user":"5149c2f1e4b0829bd132edb0"},{"problem":90,"code":"(fn [x y] \n   (set (mapcat (fn [z] (map #(vector z %) y)) x)))","user":"55c13e73e4b01b9910ae2a2f"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (for [x coll1\n        y coll2]\n  [x y])))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":90,"code":"(fn cartesian [a b] (apply hash-set (mapcat #(map (fn [c] (vector c %)) a) b)))","user":"5654e024e4b0f9d632dd848d"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [[f1 & r1] (into [] s1) result #{}]\n    (if (= nil f1)\n      (into #{} result)\n      (recur r1 (concat result (loop [[f2 & r2] (into [] s2) result2 []]\n                               (if (= nil f2)\n                                 result2\n                                 (recur r2 (conj result2 [f1 f2])))))))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"(fn [a b] (set (for [x a, y b] [x y])))","problem":90,"user":"4ecbb249535df97575fdabdf"},{"problem":90,"code":"(fn f90 [coll1 coll2]\n  (into #{} \n    (for [a coll1\n          b coll2]\n     (vec (concat [a] [b])))))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn [set1 set2]\r\n  (set\r\n    (for [a set1, b set2]\r\n      [a b])))","problem":90,"user":"4dac39a28cc9d6edb8beb0b3"},{"problem":90,"code":"(fn cartesian-product\n  [set1 set2]\n  (set (for [a set1\n             b set2]\n         [a b])))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn cart-prod\n          [set1 set2]\n        (set (for [x set1\n                 y set2]\n              (vector x y))))","problem":90,"user":"4fb591aee4b081705acca2c0"},{"problem":90,"code":"(fn [x y]\n  (set (for [x x\n         y y]\n     [x y])))","user":"5e860270e4b09a7a73c8bbdb"},{"code":"#(set\n (for [rank %1\n       suite %2]\n   [rank suite]))","problem":90,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [ma mb] \n   (set (for [a ma, b mb]\n     [a b]\n     )))","problem":90,"user":"50de11b2e4b061dbdced7217"},{"problem":90,"code":"(fn [a b]\n    (set (for [x a\n               y b] [x y])))","user":"532f8569e4b019098a6f8b4f"},{"problem":90,"code":"#(apply hash-set (mapcat (fn [x] (map (fn[y] [x y]) %2))  %1))","user":"50856bd1e4b004985b776e4c"},{"problem":90,"code":"#(into #{} (for [x %1\n           y %2]\n\n       [x y]\n       ))","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":90,"code":"(comp (partial into #{}) (partial apply concat) (fn [xs ys] (map #(map (fn [q] [q %]) xs) ys)))","user":"6011b89ee4b074f607df66bc"},{"problem":90,"code":"(fn cart\n  [a b]\n  (into #{} \n    (for [x a, y b] [x y])))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":90,"code":"(fn [A B]\n  (into #{} (mapcat (fn [a] (map (fn [b] [a b]) B)) A)))","user":"589037b4e4b00487982d51d0"},{"code":"#(set  (for [x %1 y %2] [x y]))","problem":90,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":90,"code":"(fn [coll0 coll1]\n  (into #{}\n        (mapcat #(map (partial vector %)\n                      coll1)\n                coll0)))","user":"580bd81ee4b0849f6811b711"},{"problem":90,"code":"#(into #{} (for [x %, y %2] [x y]))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn cartesian \n    ([x y z]\n        (if (empty? x)\n            (set z)\n        (cartesian (rest x) y (concat z (map #(list (first x) %) y)))))\n    ([x y] (cartesian x y [])))","problem":90,"user":"4f03b3fb535dcb61093f6b52"},{"problem":90,"code":"#(set (for [x %1 y %2] (list x y) ) )","user":"5c20b6abe4b07e362c230576"},{"problem":90,"code":"(fn [a b]\n  (into #{} \n        (for [x a y b](vector x y))))","user":"5f63d933e4b02876ed9fd018"},{"problem":90,"code":"(fn [set1 set2] (into #{} (mapcat #(map (fn [v] (conj [%] v)) set2) set1)))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":90,"code":"(fn [set1 set2]\n    (set (for [item1 set1\n               item2 set2]\n           (vector item1 item2))))","user":"5ac6ef9be4b0e27600da7779"},{"code":"(fn [s1 s2]\n  (set (mapcat (fn [x]\n    (map (fn [y]\n      [x y]\n    ) s2)\n  ) s1))\n)","problem":90,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":90,"code":"(fn [x y]\n  (apply hash-set\n   (for [i x, j y]\n     [i j])))","user":"5479c58de4b0c51c1f4d72c7"},{"code":"(fn [s1 s2]\n  (set (for [e1 s1\n        e2 s2]\n    [e1 e2])))","problem":90,"user":"50b668dde4b08fb537db98f2"},{"code":"#(set (for [ x %1 y %2 ] [ x y ]))","problem":90,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":90,"code":"(fn [a b] (into #{} (reduce (fn [r x] (concat r (reduce (fn [rr xx] (conj rr [x xx])) [] b))) #{} a)))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":90,"code":"#(into #{}\n  (for [x %1\n        y %2]\n  [x y]))","user":"55c66ffee4b0e31453f649c2"},{"code":"(fn [a b]\n  (set (for [ia a ib b] [ia ib])))","problem":90,"user":"5094057fe4b097f48cc38593"},{"problem":90,"code":"(fn CartesianProduct [set1 set2]\n  (set (for [x set1 y set2] \n         [x y])))","user":"607508f3e4b069485764de54"},{"code":"(fn [a b] (set (apply concat\n                     (for [a-item a]\n                       (map (fn [b-item] [a-item b-item]) b)))))","problem":90,"user":"4db86aee535d1e037afb2193"},{"code":"#(set (for [x %1\n            y %2] [x y]))","problem":90,"user":"53523ae0e4b084c2834f4aee"},{"problem":90,"code":"(fn [x y] (set ((fn [x y z] (if (empty? x) z (recur (drop 1 x) y (concat z (map #(vector (first x) %) y))))) x y #{})))","user":"55818b0ee4b05c286339e0fb"},{"problem":90,"code":"(fn [xs ys] (set (mapcat (fn [x] (map (fn [y] (vector x y)) ys)) xs)))","user":"571aad45e4b07c98581c3b59"},{"problem":90,"code":"(fn [a b]\n  (set\n   (for [x b\n        y a]\n   \t[y x])))","user":"54b31445e4b09f271ff37d35"},{"code":"(fn cartProd [u v] \n (into #{} \n  (for [x u \n        y v] [x y])\n  ))","problem":90,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [X Y] (reduce into #{} (for [x X] (for [y Y] [x y]))))","problem":90,"user":"5392b849e4b0b51d73faaeb1"},{"problem":90,"code":"(fn [s1 s2]\n  (apply conj #{}\n               (for [x s1 y s2] [x y])))","user":"58d48df8e4b03c36ff7e5941"},{"code":"(fn [a b]\n   (set (apply concat (map (fn [bb] \n          (map #(vector %1 bb) a)) b))))","problem":90,"user":"5142e808e4b0c172af7558c9"},{"code":"(fn [as bs]  (set (mapcat (fn [a] (map #(vector a %) bs)) as)))","problem":90,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn prod [s1 s2]\n  (set (for [x s1 y s2] [x y]))\n)","problem":90,"user":"4f84400de4b033992c121c2e"},{"code":"(fn cartesian [s1 s2]\n  (set (for [x s1 y s2] [x y])))\n;for every x in s1 and every y in s2, make [x y], and then make that into a set","problem":90,"user":"53713ebee4b0fc7073fd6ead"},{"code":"(fn [coll1 coll2]\n  (set (for [item1 coll1 item2 coll2] [item1 item2])))","problem":90,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [one two]\n  (into #{}\n        (apply concat \n               (map (fn [m] (map #(vector m %) two)) one))))","problem":90,"user":"528410bbe4b0239c8a67adc2"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (fn[y] [x y]) %2)) %1))","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":90,"code":"(fn [a b] (into #{} (mapcat (fn [x] (for [y b] [x y])) a)))","user":"52ea7d3ae4b09f7907dd14bf"},{"problem":90,"code":"(fn [a b] \n  (set (for [x a y b] [x y]))\n)","user":"57873017e4b0ebec4cfb7503"},{"code":"(fn [xs ys]\n  (into #{} (for [x xs\n    y ys] [x y])))","problem":90,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":90,"code":"#(reduce into #{}\n  (for [a %1 b %2\n        :let [z #{[a b]}]]\n   z))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":90,"code":"(fn [x y] (set (for [a x b y]\n                 [a b])))","user":"5a135573e4b0ff51aa4b3180"},{"problem":90,"code":"(fn [l r]\n                (let [lset (mapcat #(repeat (count r) %) l)\n                      rset (mapcat identity  (repeat (count l) r))]\n                     (set (map #(vector %1 %2) lset rset))\n            \t\t )\n            \t)","user":"54d05a9de4b0e8a36923e5c7"},{"problem":90,"code":"#(into #{} (mapcat (fn [x] (map (fn [y] (list x y)) %2)) %))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn [s1 s2]\n    (set (for [a s1 b s2] [a b])))","problem":90,"user":"53070615e4b02e821686979e"},{"code":"(fn [s1 s2] (into (sorted-set) (for [x s1 y s2] [x y])))","problem":90,"user":"4f148418535d64f60314643a"},{"problem":90,"code":"#(into #{} (for [x %1\n                y %2]\n            [x y]))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":90,"code":"(fn [s1 s2]\n    (set (for [x s1 y s2] [x y])))","user":"4f9b3532e4b0dcca54ed6d13"},{"problem":90,"code":"(fn c-prod [seta setb]\n   (into #{} \n          (for [x seta\n                y setb]\n            [x y])))","user":"54cbd6bae4b057c6fda3a282"},{"code":"(fn my-cp\n  [s1 s2]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4e7f32ee535db966e863cc3a"},{"problem":90,"code":"(fn [a b] (set (for [x a\n       y b]\n   [x y]\n   )))","user":"574ed2f7e4b02ea11479924a"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set(for [x s1 y s2]\n  [x y])))","user":"59dd387ae4b0a0ac046f2501"},{"problem":90,"code":"(fn [a b]\n  (set (for [aa a\n            bb b]\n        [aa bb])))","user":"4ed90014535d10e5ff6f52fe"},{"problem":90,"code":"(fn CarProd [coll1 coll2]\n  (into #{} (for [x coll1 y coll2]\n              [x y])))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [s1 s2]\n  (set (mapcat #(map (partial vector %) s2) s1)))","problem":90,"user":"51040eb2e4b0432126ba9bb4"},{"problem":90,"code":"(fn stuff [set1 set2]\n   (reduce (fn [acc s1item] (into acc (map (fn [s2item] [s1item s2item]) set2))) #{} set1))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":90,"code":"#(set (for [x %1\n           y %2]\n       [x y]))","user":"5462ce20e4b01be26fd746b8"},{"problem":90,"code":"(fn [x y]\n  (into #{} (reduce concat\n                    (map (fn [a]\n                          (map (fn [b]\n                                (vector a b)) y)) x))))","user":"55e84475e4b0121d4835fd8b"},{"code":"(fn cp [S1 S2]\n  (set \n    (apply concat (for [i S1]\n      (for [j S2] \n        [i j])))))","problem":90,"user":"4fda016ae4b05e33b9224f42"},{"code":"(fn [c1 c2] (set (for [x c1, y c2] [x y])))","problem":90,"user":"504d0116e4b022602c20b089"},{"problem":90,"code":"(fn cartesian [coll1 coll2]\n  (set (reduce (fn [acc x] (concat acc (map #(vector x %) coll2))) [] coll1)))","user":"5773f3a9e4b0979f896515f2"},{"code":"#(set\n      (for [x (seq %1) y (seq %2)] [x y])\n      )","problem":90,"user":"528f4462e4b0239c8a67aef0"},{"code":"#(set (for [x %2 y%] [y x]))","problem":90,"user":"519b7d76e4b02a926d9a436e"},{"code":"(fn [colla collb] (into #{} (for [x colla y collb] [x y])))","problem":90,"user":"534e1f56e4b084c2834f4aae"},{"code":"(fn prod [m n]\n    (set(for [x m y n] [x y]))\n)","problem":90,"user":"51d1111ce4b067c36548635f"},{"code":"(fn [a b]\n  (set (for [_a a _b b] [_a _b])))","problem":90,"user":"4e356d2b535deb9a81d77f2d"},{"problem":90,"code":"#(set (for [e1 %1\n            e2 %2]\n        [e1 e2]))","user":"539e717fe4b0ca733b974488"},{"problem":90,"code":"(fn f [s1 s2]\n  (into #{} (for [x1 s1 x2 s2] [x1 x2])))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn [seq1 seq2]\n   (set   \n   (for [x seq1 y seq2]\n     [x y]\n     ))\n   )","problem":90,"user":"5106dc1be4b01150e115ebf0"},{"problem":90,"code":"(fn [a b]\n  (set \n  (for [a a\n        b b]\n    [a b])))","user":"51dafedee4b09f6bc204eee2"},{"code":"(fn hey [x y]\n  (if (empty? x)\n    []\n    (set (concat ((fn in [x y] \n               (if (empty? y) []\n                   (seq (concat (list (concat (list (first x))\n                                    (list (first y))))\n                           (in x (rest y)))))) x y)\n            (hey (rest x) y)))))","problem":90,"user":"52e17e66e4b09f7907dd1423"},{"code":"#(set (for [s1 %1\n            s2 %2]\n        [s1 s2]))","problem":90,"user":"4dc21233535d020aff1edf92"},{"code":"(fn [a b]\n                         (let [combine-one (fn [nums  n] (map #(vector n %) nums))]\n                           (into #{} (mapcat (partial combine-one b) a))))","problem":90,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn boo [a b]\n  (set (reduce concat #{}\n    (map (fn [val] (map (fn [val2] [val val2]) b)) a))))","problem":90,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [a b](into #{} (apply concat (map (fn [x] (map #(conj [] % x) a)) b))))","problem":90,"user":"503539dee4b0ed9c821488f6"},{"code":"#(set( for [a % b %2] [a b]))","problem":90,"user":"512f06c5e4b0762be4c7aad7"},{"problem":90,"code":"(fn cartesian-product\n  [coll1 coll2]\n  (reduce (fn [result ele]\n            (loop [source coll2 r result]\n              (println r coll2)\n              (if (empty? source)\n                r\n                (recur (rest source) (conj r [ele (first source)])))))\n          #{}\n          coll1))","user":"5746cb28e4b009280f9f2b68"},{"problem":90,"code":"#(\n  set (for [c %1 d %2]\n  [c d]))","user":"5b3de9a7e4b02d533a91bbf4"},{"problem":90,"code":"(fn cartesian-product [set-a set-b]\n  (loop [seq-a (seq set-a)\n         seq-b (seq set-b)\n         res #{}]\n    (if (empty? seq-a)\n      res\n      (recur (next seq-a)\n             seq-b\n             (into res\n                   (map #(vector (first seq-a) %) seq-b))))))","user":"5b596d0ce4b02d533a91bd7a"},{"problem":90,"code":"(fn cart [a b] (set (for [x a y b] [x y])))","user":"5b857411e4b047b03b2037ce"},{"problem":90,"code":"(fn [set1 set2]\n    (set (apply concat (for [y set1]\n                         (for [x set2]\n                           [ y x])))))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn cartesian [s1 s2] (set (mapcat (fn [x] (map #(vector x %) s2)) s1)))","problem":90,"user":"539a2901e4b0b51d73faaf0f"},{"code":"(fn [x y]\n  (letfn [(single [x1 y1] (into #{} (map #(into [] [%1 x1]) y1)))]\n  (reduce #(into %1 (single %2 x)) #{} y)\n  ))","problem":90,"user":"51bec919e4b013aa0d74b800"},{"problem":90,"code":"#(set \n  (for [x %1 y %2] [x y])\n  )","user":"55efc44ee4b066087aa9453e"},{"problem":90,"code":"#(set( for [c %1 d %2] [c d]))","user":"57822efce4b0d36ec5835e91"},{"problem":90,"code":"(fn [x-col y-col]\n  (set (for [x x-col y y-col]\n    [x y])))","user":"5e08c3dde4b0978307768fc8"},{"code":"(fn [st1, st2]\n\t(set\n\t (for [ x (sort (#(into [] %) st1))\n\t  \t\t\ty (sort (#(into [] %) st2))]\n\t      [x y]\n\t )\n\t)\n)","problem":90,"user":"5029f263e4b023940c84aa45"},{"code":"(fn cart[col1 col2]\n  (loop [a col1, rv #{}, b col2]\n    (if (seq a)\n      (recur (rest a)\n              (concat rv (map #(vector (first a)  %) b))\n              b\n      )\n      (apply hash-set rv)\n    )\n  )\n)","problem":90,"user":"5229211be4b04c906c9c6a63"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (for [e1 coll1\n        e2 coll2]\n    (vector e1 e2))))","user":"5b2c79c6e4b025bcb146f2b7"},{"problem":90,"code":"(fn [a1 b1](set (reverse\n             (for [a a1 b b1 ][a b]) )))","user":"598d0dc3e4b02b9968b84d18"},{"problem":90,"code":"#(set(for[a %1 b %2] [a b]))","user":"598085e6e4b021a7a535fdd3"},{"problem":90,"code":"(fn [xs1 xs2]\n  (set (for [x1 (seq xs1)\n             x2 xs2]\n         [x1 x2])))","user":"57e10705e4b0bfb2137f5a6a"},{"problem":90,"code":";take in seq1 and seq2\n;iterate seq1 and make product\n;eg fist ace -> [ace hear] [ace diamond]\n\n#(set (for [x % y %2] [x y]))","user":"570794d8e4b0b0fb43fd068b"},{"code":"(fn [setx sety](set (for [x setx y sety] [x y])))","problem":90,"user":"4eda05c1535d10e5ff6f5309"},{"code":"(fn [a b] \n  (set (mapcat (fn [x] (map #(list x %) b)) a)))","problem":90,"user":"524be8e0e4b09eba1c0223f1"},{"code":"(fn [as bs] (set (mapcat (fn [a] (map #(list a %) bs)) as)))","problem":90,"user":"4ea1b9e4535d7eef308072b8"},{"problem":90,"code":"(fn [a b] \n   (set (reduce \n         (fn [ar el] (concat ar\n                       (reduce \n                         (fn [ar1 el1] (conj ar1 (vector el el1))) \n                       [] b)\n                    )\n          ) \n   #{} a))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n   (mapcat\n    (fn [e]\n      (map #(vector e %) s2))\n    s1)))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":90,"code":"(fn [sa sb] (into #{} (for [a sa b sb] (vector a b))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":90,"code":"(fn [a b]\n  (loop [a a\n         r #{}]\n    (if (seq a)\n      (recur (rest a) (apply conj r (map (partial conj [] (first a)) b)))\n      r)))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":90,"code":"(fn [coll-1 coll-2]\n  (set (for [x coll-1 y coll-2] [x y])))","user":"58ca8a1de4b03c36ff7e5835"},{"problem":90,"code":"#(set (for [s1 %1 s2 %2]\n    (conj [] s1 s2)))","user":"566e87cfe4b0a866af6896dc"},{"problem":90,"code":"(fn  [s s'] (set (for [a s a' s'] [a a'])))","user":"548f5086e4b0e286459a1239"},{"problem":90,"code":"#(set (for [x (vec %1) \n        y (vec %2)]\n        [x y]))","user":"5d8a832ce4b0915913b1d3ca"},{"problem":90,"code":"(fn [s1 s2]\n              (set (apply concat (for [x s1]\n                               (map #(vector x %) s2)))))","user":"51456858e4b0e88796073408"},{"problem":90,"code":"(fn cart [lset rset]\n  (into #{} (for [x lset y rset] [x y])))","user":"5adcc688e4b0837691e92c05"},{"problem":90,"code":"(fn [s1 s2]  (set  (map vec  (reduce concat #{} (reduce conj #{} (map (fn [y] (map (fn [x] (list x y)) s1)) s2))))))","user":"59a18264e4b0871e7608b853"},{"code":"(fn [s1 s2]\n  (set (for [i s1, j s2] [i j])))","problem":90,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn [xs ys]\n  (apply hash-set\n         (for [x xs\n               y ys]\n           [x y])))","problem":90,"user":"511442d0e4b0e9c109bb74d5"},{"problem":90,"code":"#(set (mapcat (fn[a] (map (fn[x] (vec [a x])) %2)) %1))","user":"524f3e6de4b0541d1855b805"},{"code":"(fn c [a b] (into #{} (mapcat #(map (fn [x] [x %]) a) b)))","problem":90,"user":"4e7e55ab535db169f9c79711"},{"problem":90,"code":"#(set\n  (for [x %1 ,y %2]\n   (conj [] x y)))","user":"55c77070e4b0e31453f649d0"},{"problem":90,"code":"(fn [s1 s2] (set (\n                for [x s1\n                      y s2] [x y])))","user":"5756f324e4b02ea1147992e8"},{"problem":90,"code":"(fn cartesian-product [a b]\n  (into #{}\n        (for [x a y b] (vector x y))))","user":"5f8795d4e4b020286baa5e96"},{"problem":90,"code":"(fn [xs ys] (set (apply concat (map (fn [x] (map #(vector x %) ys)) xs))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":90,"code":"(fn [numstart join]\n  (reduce\n  (fn [out part]\n    (apply conj out (map #(vector part %) join))\n  )\n  #{}\n  numstart\n  )\n)","user":"5f3a8493e4b004f08c61c527"},{"code":"(fn [a z]\n  (reduce into #{} (map (fn [[a b]] (partition 2 (interleave (repeat a) b))) (map #(vector % z) a))))","problem":90,"user":"52c42bc2e4b0c2d177d620d0"},{"code":"(fn f [a b] \n  (set \n   (mapcat \n    (fn [x] (map #(vector x %) b)) \n    a)))","problem":90,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn cart-prod [xs ys]\n  (set (for [x xs y ys] [x y])))","problem":90,"user":"523b82efe4b07becd5be21f0"},{"code":"(fn [lhs rhs] (set (apply concat (for [x lhs] (map #(into [] [x %]) rhs)))))","problem":90,"user":"52b5edd1e4b0c58976d9ad3c"},{"problem":90,"code":"(fn cartesian-product\n  [s1 s2]\n  (reduce (fn [product s1e]\n            (reduce (fn [product s2e]\n                      (conj product [s1e s2e]))\n                    product\n                    s2))\n          #{}\n          s1))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{} (for [a set1 b set2] (vec (list a b)))) )","user":"4fbfbd4fe4b081705acca31c"},{"problem":90,"code":"(fn cartesian-product\n  [s1 s2]\n  (set (for [x s1 y s2] (vector x y))))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn cartesian-product [s1 s2]\n  (apply hash-set\n         (for [x1 s1\n               x2 s2]\n           [x1 x2])))","problem":90,"user":"530578ede4b0d8b024fd3760"},{"problem":90,"code":"(fn [x y] (into #{} (mapcat #(map (partial vector %) y) x)))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":90,"code":"(fn cartesian \n  [A B]\n  (set\n  (loop [i 0 j 0 result []]\n    (if (>= i (count A))\n      result\n      (recur (if (= (inc j) (count B)) (inc i) i) (if (= (inc j) (count B)) 0 (inc j)) (conj result [(nth (vec A) i) (nth (vec B) j)]))\n    )\n  )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":90,"code":"(fn [X Y] (set (for [x (seq X) y (seq Y)] [x y])))","user":"56fa2905e4b07572ad1a88be"},{"code":"#(set (for [a % b %2] [a b]))","problem":90,"user":"4e597b2c535d8a8b8723a29d"},{"problem":90,"code":"(fn p\n  [s1 s2]\n  (set (for [s1 s1 s2 s2]\n    (vector s1 s2))))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn [ss ts]\n  (set\n   (for [s ss\n         t ts]\n     [s t])))","problem":90,"user":"519db0ede4b037b32803f9b9"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce into #{} \n          (map (partial (fn [set1 elt2] (map #(vector % elt2) set1))\n                        s1) \n               s2)))","user":"57462a4de4b009280f9f2b5d"},{"problem":90,"code":"(fn [s t]\n  (set (for [s1 s\n        t1 t]\n    [s1 t1])))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":90,"code":"(fn [set-1 set-2]\n  (into #{} (for [x set-1\n        y set-2]\n    [x y])))","user":"5d11618de4b02c15ef021985"},{"code":"(fn [x y] (set (reduce (fn [a b] (concat a (reduce #(concat %1 [(concat [b] [%2])]) [] y))) [] x)))","problem":90,"user":"5017f840e4b02f523d7cc5e8"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [tmps1 s1 new #{}]\n    (if (empty? tmps1)\n      new\n      (recur (rest tmps1) (loop [tmps2 s2 tmpnew new]\n                            (if (empty? tmps2)\n                              tmpnew\n                              (recur (rest tmps2) (conj tmpnew (concat (vector (first tmps1)) (vector (first tmps2)))))))))))","user":"59368ccae4b02506e01a2979"},{"problem":90,"code":"(fn [a b]\n  (set \n   \t(for [i a\n          j b]\n      (vector i j))))","user":"543c39e0e4b032a45b86933d"},{"problem":90,"code":"(fn [a b]\n    (into #{} \n          (mapcat (fn [x] (map #(vector x %) b)) a)))","user":"55cb11e9e4b0e31453f649ff"},{"problem":90,"code":"(fn\n  [s t]\n  (set (for [x s y t] [x y])))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":90,"code":";(fn [a b] \n;  (set \n;   (mapcat #(map (fn [y] [% y]) b) \n;           a)))\n\n#(set (for[x %1 y %2] [x y]))","user":"578f9a18e4b0ebec4cfb7598"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [x a y b]\n    [x y]\n  ))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":90,"code":"(fn [a b]\n    (set (for [x a \n          y b]\n      [x y])\n  ))","user":"5e2586afe4b05b4b01516167"},{"code":"(fn cart-prod [a b]\n  (set (for [x a y b] [x y])))","problem":90,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [a b]\n  (let\n\t\t[[sa sb] (map #(.size %) [a b])\n\t\t[va vb] (map vec [a b])\n\t\tra (apply concat (repeat sa vb))\n\t\trb (apply concat (map #(repeat sb %) va))\n\t\t]\n      (into #{} \n        (map vec \n          (partition 2 (interleave rb ra))))))","problem":90,"user":"4ef355e3535dced4c769f228"},{"problem":90,"code":"#(set \n  (for [a (vec %1) b (vec %2)] [a b])\n )","user":"5693b40ce4b0dcc4269f4107"},{"problem":90,"code":"#(set(for [x %1\n       \t  y %2]\n       \t  [x y]))","user":"5156e767e4b04360f2428e6b"},{"problem":90,"code":"(fn [a b]  (set (for [j a k b]  [j k] )))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [a b]\n  (set (for [a' a b' b] [a' b'])))","problem":90,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn foo [x y](set (for [i x j y] [i j])))","problem":90,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":90,"code":"(fn [a b] \n  (set (mapcat (fn [a-el] \n         (map (fn [b-el]\n                [a-el b-el])\n              b))\n       a)))","user":"53e30fcae4b036ad0777e3fc"},{"problem":90,"code":"(fn [c1 c2]\n    (set (for [x c1\n               y c2]\n           [x y])))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":90,"code":"(fn cart [map1 map2]\n  (loop [[first-1 & rest] (seq map1)\n         prod ()]\n    (if (nil? first-1)\n      (set prod)\n      (recur rest (into prod \n                        (loop [[first-2 & rest] (seq map2)\n                               vec []]\n                          (if (nil? first-2)\n                            vec\n                            (recur rest (conj vec [first-1 first-2])))))))))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn [x y] (into #{}(mapcat (partial #(map (partial list %2) %) y) x)))","problem":90,"user":"50b65966e4b0a86f8358ca6c"},{"problem":90,"code":"(fn [s1 s2]\n     (set (for [s1 s1 s2 s2] [s1 s2])))","user":"5954eef0e4b066ee0a44af17"},{"problem":90,"code":"(fn cart-prod [s1 s2]\n  (set (for [a s1 b s2] [a b])))","user":"58327a08e4b089d5ab817c7c"},{"problem":90,"code":";; This is a weird version of product. I recently came\n;; across Barron and Strachey’s Cartesian Product Function\n;; in haskell's functional pearls wiki. The details can be\n;; found here: https://www.brics.dk/RS/07/14/BRICS-RS-07-14.pdf\n;; Not efficient due to how clojure handles laziness, but it's\n;; interesting to step through and get a feel for.\n(letfn [(foldr [f val coll]\n           (if (empty? coll) val\n               (f (first coll) (foldr f val (rest coll)))))\n         (product [& xss]\n           (foldr\n            (fn f [xs yss]\n              (foldr\n               (fn g [x zss]\n                 (foldr\n                  (fn h [ys qss]\n                    (cons (cons x ys) qss))\n                  zss yss))\n               '() xs))\n            '(()) xss))]\n   #(set (apply product %&)))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn [s1 s2]\n  (loop [fset s1\n         sset s2\n         res #{}]\n    (if (empty? fset)\n      res\n      (recur (rest fset)\n             sset\n             (into res (map #(vector (first fset) %) sset))))))","problem":90,"user":"4e09392a535d04ed9115e7ae"},{"code":"(fn\n  [coll1 coll2]\n  (set (for [x coll1\n             y coll2]\n         [x y])))","problem":90,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":90,"code":"#(set (for [x %1 y %2] [x y]))\n\n;(fn [xs ys] (into #{} (for [x xs y ys] [x y])))","user":"55150524e4b055c2f668d4d9"},{"problem":90,"code":"#(into #{} (for [x1 % x2 %2] (vector x1 x2)))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 \n      y s2]\n   [x y])))","user":"604a3daee4b02d28681c77f2"},{"problem":90,"code":"(fn cart-prod\n  [seta setb]\n  (let [seqa (seq seta)\n        seqb (seq setb)]\n    (loop [sa seqa\n           prods #{}]\n      (if (empty? sa)\n        prods\n        (recur (rest sa)\n               (into prods\n                     (map (fn [x] [(first sa) x])\n                          seqb)))))))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn [A B]\n  (apply hash-set\n         (for [x A y B]\n           [x y])))","problem":90,"user":"527ccaf4e4b0757a1b17136d"},{"code":"(fn cart [s1 s2]\n  (into #{}\n        (mapcat\n         (fn [[x v]]\n           (map #(vector x %) v))\n         (map #(vector % (vec s2)) (vec s1))  )))","problem":90,"user":"50127fbfe4b030d97e4db70f"},{"problem":90,"code":"(fn catesian-product [set1 set2]\n  (into #{} (for [elem1 set1\n          elem2 set2]\n      [elem1 elem2])))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":90,"code":"(fn cart-product [x y]\n  (into #{} (for [a x, b y]\n    [a b])))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":90,"code":"(fn [fl sl]\n      (set (for [f fl\n             s sl]\n         [f s])))","user":"52c49401e4b0c2d177d620de"},{"problem":90,"code":"(fn cart-pro [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y])))","user":"565654dae4b0f9d632dd849f"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [s curr] (conj s curr)) #{} (for [x s1 y s2] [x y])))","user":"5c76577ae4b0fca0c16227ea"},{"code":"(fn P90 [ s1 s2 ]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"5046f909e4b03b02161376b5"},{"problem":90,"code":"(fn [firstmap secondmap ] (set (partition 2(flatten(map #(interleave (repeat %) secondmap) firstmap)))))","user":"542baf7ce4b0dad94371f291"},{"code":"(fn cartesian [set1 set2] (reduce clojure.set/union #{} \n   (map (fn [x] (set(map (fn [y] [x y]) set2))) set1)\n))","problem":90,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":90,"code":"(fn [s1 s2] (let [v1 (vec s1) v2 (vec s2)]\n                   (set (for [x1 v1 x2 v2] [x1 x2]))))","user":"565233f2e4b0f9d632dd8461"},{"problem":90,"code":"(fn [s1 s2]\n    (set (reduce #(apply conj %1 %2) (for [v s1]\n                                   (map #(vector v %1) s2))))\n\n    )","user":"54ef4a1ee4b024c67c0cf883"},{"problem":90,"code":"(fn\n   [set1 set2]\n   (set (reduce\n         (fn [result item] (concat\n                            result\n                            (map\n                             #(vector item %)\n                             set2)))\n         []\n         set1)))","user":"5e7fb908e4b085ba37836e3f"},{"problem":90,"code":"(fn dsc-prod [set1 set2]\n  (into #{}\n    (mapcat\n      (fn [s] (map #(vector %1 %2) (repeat s) (seq set2))) \n      set1\n    )\n  )\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":90,"code":"(fn[x y]\n  (set (for [x0 x\n        y0 y]\n    [x0 y0]\n         )\n       )\n  )","user":"56de78fde4b0ea9b8538f83c"},{"problem":90,"code":"(fn cart [c1 c2]\n  (into #{} (mapcat (fn [x] (map (fn [y] (list x y)) c2)) c1)))","user":"5bb5cd43e4b0a20761a23575"},{"code":"#(set (for [x %1 y %2] [x y ]))","problem":90,"user":"518c5236e4b087e178201de0"},{"code":"#(set (for [v1 %1 v2 %2] [v1 v2]))","problem":90,"user":"504e04a4e4b078edc5f59397"},{"problem":90,"code":"(fn cartesian-prod [a b] (let [size (* (count a) (count b))] (into #{} (map vector (flatten (map (partial repeat (count b)) a)) (take size (cycle b))))))","user":"55c10409e4b01b9910ae2a2c"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [a a b b] [a b])))","user":"5865c8f0e4b0f14aab7c884e"},{"code":"(fn [s1 s2] \n  (set\n      (mapcat\n        (fn [e1] \n          (map vector (repeat e1) s2))\n        s1\n      )\n))","problem":90,"user":"502952c9e4b0b33e9bf6fdf1"},{"code":"#(into #{} (reduce (fn [a b] (concat a b)) (for [x %1] (for [y %2] [x y]))))","problem":90,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"#(set (for [x %1 y %2] [x y]))","problem":90,"user":"4dad8756c9a9d6ed1099dc57"},{"problem":90,"code":"(fn [as bs]\n\t(set (for [a as b bs] [a b]))\n)","user":"53b9bb15e4b047364c0444ed"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [l1 e1]\n            (into l1 (reduce \n                      (fn [l2 e2]\n                        (conj l2 [e1 e2]))\n                      #{} s2)))\n          #{} s1))","user":"56051095e4b08b23635d3162"},{"code":"(fn [a b]                                                           \n            (set (for [x a y b]                                                 \n                      [x y])))","problem":90,"user":"4eed6b32535d93acb0a668bc"},{"problem":90,"code":"(fn cProduct [ set1 set2 ]\n  (loop [ x (vec set1) y (vec set2) iter 0 result [] ]\n    (cond \n     (empty? x) (set result)\n     (= iter (count y)) (recur (rest x) y 0 result ) \n     :else (recur x y (+ iter 1) (into result [[(first x) (get y iter) ]] ))\n     )\n    )\n  )","user":"56942b5fe4b0dcc4269f411c"},{"problem":90,"code":"(fn [s1 s2]\n      (loop [cartesian #{}\n             s s1]\n        (if (empty? s)\n          cartesian\n          (recur (into cartesian (map (fn [v] [(first s) v]) s2))\n                 (next s)))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":90,"code":"(fn cartesianproduct [seta setb]\n  (set (for [x seta y setb] [x y])))","user":"57131dfbe4b07c98581c3a98"},{"code":"(fn cart-prod [s1 s2]\n  (into #{} (for [x1 s1\n                  x2 s2]\n              [x1 x2])))","problem":90,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":90,"code":"#(apply sorted-set\n        (for [x %1 y %2]\n          (vector x y)))","user":"53b7aa6ce4b047364c0444d1"},{"problem":90,"code":"(fn [a b]\n  (let [product (for [a a b b] [a b])]\n    (into #{} product)))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn[col-1 col-2] (set (for [x col-1, y col-2] [x y])))","problem":90,"user":"50493b52e4b06e84b772a23e"},{"problem":90,"code":"(fn \n  [A B] (set (for [x A y B] [x y])))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":90,"code":"(fn [a b]\n   (->>(map\n        (fn [n]\n          (map #(vector % n) a)) b)\n       (apply concat)\n       (set)))","user":"5dab11cde4b000c986472c45"},{"problem":90,"code":"(fn [a b]\n  (set\n   (mapcat (fn [ai]\n             (map (fn [bi] [ai bi]) b))\n           a)))","user":"547584d9e4b0c51c1f4d729b"},{"problem":90,"code":"(fn cartesian [s1 s2] (set (for [e1 s1 \n                                 e2 s2] (vector e1 e2))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a\n          y b] \n      [x y])))","user":"554b8b78e4b0a04f7929958d"},{"code":"(fn [a b]\n  (set\n  (for [x a y b]\n    [x y])))","problem":90,"user":"4ee2da14535d10e5ff6f536c"},{"problem":90,"code":"(fn [a b]\n      (into #{} (for [x a \n            y b]\n        [x y])))","user":"56fbf83de4b07572ad1a88da"},{"problem":90,"code":"(fn [coll1 coll2] (into #{} (for [x coll1 y coll2] [x y])))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [x y]\r\n  (set (for [a x b y]\r\n   [a b])))","problem":90,"user":"507437c2e4b054001656acd0"},{"problem":90,"code":"#(-> [i % j %2] (for [i j]) set)","user":"52ae886de4b0c58976d9acab"},{"problem":90,"code":"(fn [x,y] (set (map #(vector %1 %2) (flatten (repeat (count y) (seq x)) )  (flatten (map #(repeat (count x) %) y) ))))","user":"567798afe4b05957ce8c6169"},{"problem":90,"code":"(fn [xs ys]\n (->>\n (mapcat\n  (fn [x] (map \n           (fn [y] [x y])\n           ys))\n  xs)\n  set))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [set1 set2]\n  (reduce\n    #(into %1 %2)\n    #{}\n    (map\n      (fn [item2]\n        (map\n          (fn [item1] [item1 item2])\n          set1))\n    set2)))","problem":90,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":90,"code":"(fn [a b] \n  (reduce (partial apply conj) #{} (map (fn [x] (map (partial vector x) b))\n       a)))","user":"533975f0e4b0e30313ee6ca9"},{"code":"(fn f [A B]\n  (set (for [a A b B] [a b])))","problem":90,"user":"4e6a6b83535d8ccf87e9fee0"},{"problem":90,"code":"#(set(for [x %1 y %2] (vector x y)))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn [a b] (set (mapcat (fn [e] (map #(vector e %) b)) a)))","problem":90,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"(fn cart [ c1 c2 ]\n  (if (empty? c1)\n    #{}\n    (into (cart (rest c1) c2) (apply map vector [(replicate (count c2) (first c1)) c2]))))","problem":90,"user":"51e1a1fae4b06a68e693eaf6"},{"code":"(fn mycartesian3 [x y] (if (< 0 (count y))\n                            (into\n                              (mycartesian3 x (rest y))\n                              ((fn infn [i j] (if (< 0 (count i))\n                                                (conj (infn (rest i) j) (vector (first i) j))\n                                              '()))  x (first y)))\n                          #{}))","problem":90,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [xs ys] (into #{} (for [x xs y ys] [x y])))","problem":90,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":90,"code":"(fn [a b] \n  (into #{}\n    (for [x (vec a)\n         y (vec b)]\n      [x y])))","user":"574c5e18e4b02ea11479921b"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n    (mapcat\n      (fn [e1]\n        (map\n          (fn [e2]\n            [e1 e2])\n          s2))\n      s1)))","user":"5881d1c2e4b0f1effa3b7644"},{"problem":90,"code":"(fn [v1 v2]\n  (set (for [x v1 y v2] [x y])))","user":"5486adf7e4b0e286459a11be"},{"problem":90,"code":"(fn cart [s1 s2] (set(for [i s1 j s2] [i j])))","user":"58b2f085e4b0ebc645576d15"},{"problem":90,"code":"#(reduce (fn [a b] (apply conj a (map (fn [c] [b c]) %2))) #{} %1)","user":"5e63ffa0e4b0fd0acd1586a6"},{"problem":90,"code":"(fn [s1 s2]\n(set\n(for [a s1 b s2]\n[a b]\n)))","user":"569adec2e4b0542e1f8d1450"},{"problem":90,"code":"(fn [set1 set2]\n  (apply hash-set\n         (for [x set1\n               y set2]\n           [x y])))","user":"5ac91d90e4b0e27600da77bd"},{"code":"#(letfn [(cartesian-product [s1 s2]\r\n  (set\r\n   (for [x s1 y s2]\r\n     [x y])))]\r\n(cartesian-product %1 %2))","problem":90,"user":"4e273301535deb9a81d77ef7"},{"problem":90,"code":"(fn cartesian-product\n  [a b]\n  (loop [result #{} remainder a]\n    (if (empty? remainder)\n      result\n    (recur (reduce #(conj %1 (vector (first remainder) %2)) result b) (rest remainder))\n    )\n    )\n  )","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn [x y] (apply hash-set (for [a x b y] [a b])))","problem":90,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"#(set (for [a %, b%2] [a b]))","problem":90,"user":"51eca2ace4b069f463c22cd0"},{"problem":90,"code":"(fn [s1 s2] (set(mapcat #(map (partial vector %) s2) s1)))","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [c1 c2]\r\n  (set (for [x c1, y c2]\r\n    [x y])))","problem":90,"user":"4de623ef535d08e6dec9fdf4"},{"code":"(fn [s1 s2]\n  (set (mapcat #(map vector (repeat %)\n                       s2)\n                    s1)))","problem":90,"user":"50acbd15e4b071b89ef26234"},{"problem":90,"code":"(fn cartprod\n  [s1 s2]\n  (set (for [i s1 j s2] [i j])))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":90,"code":"(fn [a b]\n  (let [coll (atom #{})]\n    (doseq [x a\n            y b]\n      (swap! coll \n             conj \n             (vector x y)))\n    @coll))","user":"58ef93ece4b056aecfd47dca"},{"code":"(fn [s1 s2]\n  (let [enum (fn [item coll] (->> coll (interleave (repeat item)) (partition 2)))]\n    (reduce #(into %1 (enum %2 s2))\n            #{} s1)))","problem":90,"user":"51df825de4b01188f062752b"},{"problem":90,"code":"(fn [s t] (set (for [a s b t] [a b])))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":90,"code":"(fn [x y] (set (for [i x j y] (into [] [i j]))))","user":"5233564ae4b0f0b72fabf403"},{"problem":90,"code":"(fn test26 [set1 set2]\n  (letfn [(test27 [x]\n            (map #(vector x %1) set2))]\n    (into #{} (mapcat test27 set1))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":90,"code":"(fn [c1 c2]                                                                                                                                                \n   (apply sorted-set (reduce (fn [result a]                                                                                                                 \n              (into result a))                                                                                                                              \n            '()                                                                                                                                             \n            (map (fn [n]                                                                                                                                    \n                   (map #(into [] (list n %)) c2))                                                                                                          \n                 c1))))","user":"52fac708e4b047fd55836fff"},{"code":"(fn [x y] (set (for [a x b y] (vector a b))))","problem":90,"user":"500854c4e4b028e089d3518c"},{"problem":90,"code":"(fn [xs, ys]\n  (set\n   (mapcat (fn [a] (map #(vector a %) ys))\n           xs)))","user":"569ad037e4b0542e1f8d144f"},{"problem":90,"code":"#(into #{} (for [s1 %1 s2 %2] [s1 s2]))","user":"5511fd7ee4b06e50f9beb19e"},{"problem":90,"code":"(fn [xv yv] (set (for [x xv y yv] [x y])))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":90,"code":"(fn [x y]\n            (set (for [l1 x l2 y] [l1 l2]))\n            )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":90,"code":"(fn [A B]\n  (set (for [x A\n             y B]\n         [x y])))","user":"55f73078e4b06e875b46cea4"},{"code":"#(set (map vector (apply interleave (repeat (count %2) (seq %1))) (flatten (repeat (count %1) (seq %2)))))","problem":90,"user":"53733312e4b06d7f452d9e0a"},{"code":"(fn [x1 x2] (apply hash-set (for [elt1 x1 elt2 x2] [elt1 elt2])))","problem":90,"user":"4ef7a483535dced4c769f258"},{"code":"(fn [a b] (into #{} (for [x a y b] [x y])))","problem":90,"user":"4fd8544be4b0dab7d829f390"},{"code":"#(into #{}\r\n  (for [x % y %2] [x y]))","problem":90,"user":"4dcd818e535d5973398f929d"},{"problem":90,"code":"(fn [set1 set2]\n  (set(for [x set1 \n      y set2]\n  [x y])))","user":"5a593521e4b05d388ecb6c93"},{"code":"(fn [set1, set2] \n  (loop [[h1 & t1] (seq set1), seq2 set2, res #{}]\n  (if h1 \n    (recur t1 seq2 \n      (into res (map #(conj [] h1 %1) seq2))) \nres)))","problem":90,"user":"4eabb245535d7eef30807319"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat (fn [x]\n         (map (fn [y]\n                (list x y)) b)) a)))","user":"5e2c2ebce4b05b4b015161d5"},{"code":"#(apply hash-set (for [x %1 y %2](vector x y)))","problem":90,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":90,"code":"#(set (for [n (vec %1) x (vec %2)] [n x]))","user":"5f727dd6e4b02876ed9fd090"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n    (set (for [j s2 i s1] [i j])))","user":"57f6e666e4b0d3187e9008f2"},{"problem":90,"code":"#(set \n  (for[x %1\n      y %2]\n  [x y]))","user":"57fc5e42e4b0d3187e900997"},{"problem":90,"code":"(fn\n   [s1 s2]\n   (->> s2\n        (vec)\n        (map\n          #(vec (zipmap\n               (vec s1)\n               (repeat (count s1) %))))\n        (apply concat)\n        (set)))","user":"588906a9e4b0f1effa3b772a"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 y s2] [x y]))\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (loop [set1 s1\n         set2 s2\n         acc #{}]\n    (if (empty? set1)\n      acc\n      (let [cp (map #(conj [] (first set1) %) set2)]\n        (recur (rest set1) set2 (into acc cp))))))","user":"5398d042e4b0b51d73faaf00"},{"problem":90,"code":"(fn [x y]\n  (set (for [a (vec x)\n        b (vec y)]\n    [a b])))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"code":"(fn [s1 s2]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4df407c3535d08e6dec9fe2e"},{"problem":90,"code":"(fn [xx yy]\n  (into #{}\n    (for [x xx\n          y yy]\n      [x y])))","user":"583369e6e4b089d5ab817c9c"},{"problem":90,"code":"(fn prod [s1 s2] (set (apply concat (map (fn [i] (map (fn [x] [i x]) s2)) s1))))","user":"5f313d01e4b0574c87022c28"},{"code":"(fn [y x](into #{} (reduce concat (map #(map (fn [z] [% z]) x) y))))","problem":90,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [xs ys]\n  (set\n    (mapcat\n      (fn [i] (map #(list i %) ys))\n      xs)))","problem":90,"user":"4f1b92d1535d64f60314647b"},{"code":"#(set (for [x % y %2] (vector x y)))","problem":90,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":90,"code":"(fn [a b]\n    (loop [in a\n           out [] ]\n        (if (empty? in)\n            (set out)\n            (recur (rest in) (concat out\n                (let [f1 (first in)]\n                    (reduce #(conj %1 [f1 %2]) [], b)\n                ))\n            )\n        )\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":90,"code":"(fn [s1 s2] \n   (set (for [x s1\n         y s2]\n     [x y]\n     ))\n   )","user":"6024544be4b0d5df2af2221f"},{"problem":90,"code":"(fn [a b]\n    (set \n      (for [a a\n            b b]\n      [a b])))","user":"54e606c3e4b024c67c0cf803"},{"problem":90,"code":"(fn [a b] (set (mapcat\n  #(map list (repeat %) b)\n  a)))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":90,"code":"(fn cartesianPeoduct [coll1 coll2]\n  (into #{} (for [x coll1\n                  y coll2] [x y])))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":90,"code":"(fn [a b]\n  (set(for [x a y b]\n    [x y])))","user":"59b69bbee4b05c620303ca2a"},{"problem":90,"code":"(fn cartesian [x y] \n        (into #{} (for [x (vec x) y (vec y)]\n          [x y])))","user":"58765038e4b01531a375ea7e"},{"problem":90,"code":"(fn [as bs]\n            (set(reduce concat '() (map\n              (fn[a]\n                (map\n                  (fn[b] [a b])\n                  bs)\n                ) as))\n            ))","user":"52149e21e4b0961f15ac4d94"},{"code":"(fn cart [a b]\n  (if (= a '())\n  \t#{}\n    (let [x (first a)\n          pairs (for [y b] [x y])\n          xs (rest a)]\n      (into (cart xs b) pairs))))","problem":90,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":90,"code":"(fn [s1 s2]\n  (set \n   (for [e s1, e2 s2] [e e2])))","user":"537f4652e4b06839e8705eb1"},{"problem":90,"code":"(fn [set1 set2] (set (apply concat (map (fn [item1] (map (fn [item2] [item1 item2]) set2)) set1))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":90,"code":"(fn [as bs]\n  (into #{} (apply concat (for [a as] (for [b bs] [a b])))))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":90,"code":"(fn [s1 s2]\n  (set (mapcat #(map (fn [x] [% x]) s2)\n            s1)))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn [x y] (set (mapcat #(map (fn [i] [% i]) y) x)))","problem":90,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":90,"code":"(fn [s1 s2] (set (apply concat (map (fn [i1] (map (fn [i2] [i1 i2]) s2)) s1))))","user":"55a74d46e4b09e57187da2a3"},{"problem":90,"code":"(fn [set-1 set-2]\n  (set\n   (for [item-1 set-1\n         item-2 set-2]\n     [item-1 item-2])))","user":"55344b75e4b09218d5f44f99"},{"code":"(fn cartesian [s1 s2]\r\n  (letfn [[inner-cartesian [val s2 result]\r\n           (loop [s2 s2\r\n                  result result]\r\n             (if (empty? s2)\r\n               result\r\n               (recur (rest s2) (conj result [val (first s2)]))))]]\r\n    (loop [s1 s1\r\n           result #{}]\r\n      (if (empty? s1)\r\n        result\r\n        (recur (rest s1) (inner-cartesian (first s1) s2 result))))))","problem":90,"user":"4fe54ee8e4b0e8f79898fec3"},{"code":"(fn [a b]\n  (set (reduce into [] (map #(map (fn [x] [% x]) b) a))))","problem":90,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":90,"code":"(fn [xs ys]\n (set\n  (for [x xs y ys]\n   [x y])))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"(fn cp [c1 c2]\n  (loop [s2 c2, result []]\n    (if (empty? s2)\n      (set (apply concat result))\n      (recur (rest s2) (conj result (for [x c1] [x (first s2)]))))))","problem":90,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [s1 s2]\n  (into #{} (for [x1 s1\n       x2 s2]\n    (list x1 x2))))","problem":90,"user":"4f29eb2ae4b0d6649770a037"},{"problem":90,"code":"(fn [a b] (into #{} (for [aa a bb b] [aa bb])))","user":"530b8580e4b02e82168697cc"},{"code":"(fn cartesian [x y]\n  (set (for [a x b y]\n\t[a b]\n  ))\n)","problem":90,"user":"500a214de4b03d00572d2d74"},{"problem":90,"code":";; using HOFs\n#_(fn cartesian-prod\n  [xs ys]\n  ((comp (partial apply hash-set) (partial partition 2) flatten)\n      (reduce \n         (fn [acc x] \n           (conj acc (map (fn [y] [x y]) ys)))\n         [] xs)))\n\n;; using imperative style\n(fn imperative-cart-prod\n  [xs ys] (apply hash-set (for [x xs y ys :while (not (nil? x))] [x y])))","user":"5553b729e4b0deb715856e05"},{"code":"#(set (for [x %1 y %2] (list x y)))","problem":90,"user":"4eb9353f535dfed6da9c6d4e"},{"code":"(fn [x y] (set (mapcat #(map vector (repeat (count y) %) y) x)))","problem":90,"user":"4f49108ae4b0d56e7bb92be5"},{"problem":90,"code":"(fn [col1 col2]\n  (set (for [item1 col1\n             item2 col2]\n         [item1 item2])))","user":"5579eed7e4b05c286339e09b"},{"problem":90,"code":"(fn my_prod [X Y]\n  (loop [result (), X' (seq X)]\n    (if X'\n      (recur (concat result (map #(identity [(first X'),%]) Y))\n             (next X'))\n      (apply hash-set result))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn f [m1 m2]\n  (set (partition 2 (flatten (map\n    (fn [v] (map #(vector % v) m1))\n    m2\n    ))))\n  )","problem":90,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":90,"code":"(fn [s1 s2]\n        (set (for [e1 s1\n                   e2 s2]\n               [e1 e2])))","user":"546c4377e4b00cfc9eacc177"},{"problem":90,"code":"(fn [a b] \n  (let [len (* (count a) (count b)) seqa (take len (cycle a)) seqb (sort (take len (cycle b)))] \n    (set (map vec (partition 2 (interleave seqa seqb))))\n  )\n)","user":"585481e0e4b07779d46863fe"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce \n   (fn [acc x]\n     (into acc (map (fn [i] [x i]) s2))) \n   #{} s1))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":90,"code":"#(set (for [x %1 y %2]\n       [x y]))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"#(set (let [result []] (for [x %1 y %2] (conj result x y))))","problem":90,"user":"52a62e16e4b0c58976d9abf9"},{"problem":90,"code":"(fn [set1 set2]\n  (->> (for [elem1 set1\n             elem2 set2]\n         [elem1 elem2])\n       (into #{})))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn [xs ys] \n  (reduce #(loop [res % y ys] \n             (if (empty? y) \n               res \n               (recur (set (concat res [[%2 (first y)]])) (rest y)))) \n          #{} \n          xs))","problem":90,"user":"4e71a12c535d5021c1a8964f"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{} (for [s1 set1, s2 set2]\n              (vector s1 s2))))","user":"577b4440e4b0d3393e5deb0f"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n   (for [a s1\n         b s2]\n    [a b]))\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"#(apply hash-set (for [a % b %2] [a b]))","problem":90,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":90,"code":"(fn [c1 c2] (set (mapcat (fn [i] (map (fn [j] [i j]) c2)) c1)))","user":"5dfe3928e4b0a607a9a45d04"},{"problem":90,"code":"(fn [x y] (let [pairs (for [s1 x\n                                   s2 y]\n                               [s1 s2])]\n                     (into #{} pairs)))","user":"5e3975a3e4b01d43a70e8dd3"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n      (apply concat\n             (for [x s1]\n               (map #(vector x %) s2)))))","user":"5ccc2a03e4b0ccb06196288f"},{"code":"(fn [x y]\n  (set\n   (mapcat\n    (fn[a]\n\t (map\n      (fn[b]\n       [a b]) y)) x)))","problem":90,"user":"52f818a6e4b047fd55836fcc"},{"problem":90,"code":"(fn [s1 s2]\n\t(loop [x s2 cp #{}]\n\t\t(if (empty? x)\n\t\t\tcp\n\t\t\t(recur\n\t\t\t\t(rest x)\n\t\t\t\t(clojure.set/union\n\t\t\t\t\tcp\n\t\t\t\t\t(set (map vec (partition-all 2 (interleave s1 (repeat (first x))))))))\n\t\t)\n\t)\n)","user":"5472d919e4b094393f72dd7b"},{"code":"#( set (for [x %1 y %2] [x y]))","problem":90,"user":"53691dc7e4b0243289761e97"},{"code":"#(set (for [e1 %1 e2 %2] [e1 e2]))","problem":90,"user":"4efd8b67535de96065cf5085"},{"code":"(fn cartesian-product [s1 s2] (loop [cs1 s1 cs2 s2 product #{}] (let [cs1e (empty? cs1) cs2e (empty? cs2)] (cond cs1e product (and (not cs1e) cs2e) (recur (disj cs1 (first cs1)) s2 product) :else (recur cs1 (disj cs2 (first cs2)) (conj product [(first cs1) (first cs2)]))))))","problem":90,"user":"4fae4c11e4b081705acca248"},{"problem":90,"code":"(fn [xs ys]\n  (into #{} (for [y ys x xs] [x y])))","user":"55c2b95de4b0e31453f64980"},{"problem":90,"code":"(fn [set1 set2]\n  (into (hash-set) \n    (for [s1 set1, s2 set2]\n      [s1 s2]\n    )\n  ) \n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":90,"code":"(fn[a b]\n    (set (apply concat(map(fn[x](map #(vector x %) b))a)))\n    )","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn [a b]\n  (set (for [x a y b]\n        [x y])))","problem":90,"user":"4fe88f78e4b07c9f6fd12c45"},{"problem":90,"code":"(fn [x y] \n  (set (mapcat\n    (fn [xv] \n      (map (fn [yv] [xv yv]) y)\n    ) x))\n)","user":"5374f931e4b06d7f452d9e2d"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [i s2 j s1] [j i])))","user":"556a3243e4b09a3098a524de"},{"problem":90,"code":"(fn [s1 s2]\n  (set(for [x s1 y s2]\n    [x y])))","user":"557f7c8be4b05c286339e0e0"},{"problem":90,"code":"(fn cp[xs ys]\n  (set\n    (for [x xs y ys]\n      (vector x y))))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn\n  [s1 s2]\n  (set (mapcat #(map (partial vector %) s2) s1)))","problem":90,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [s1 s2]\n  (set (for [a s1, b s2] [a b])))","problem":90,"user":"4e89f9e5535d3e98b8023289"},{"code":"(fn [sa sb]\n  (set\n    (for [a sa b sb] [a b])))","problem":90,"user":"50901b2ee4b0ea685a20f774"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set\n    (for [s1 s1 s2 s2]\n      (conj [] s1 s2))))","user":"5843b231e4b089d5ab817e3d"},{"code":"(fn [x y] \n  (loop [s #{} i 0] \n    (if (< i (count y)) \n      (recur \n       (into s \n             (map #(conj [] %1 %2) \n                  x \n                  (repeat \n                   (count x) \n                   (nth (into [] y) i)))) \n       (inc i))\n      s)))","problem":90,"user":"5022292ee4b0846bc458ae46"},{"problem":90,"code":"(fn cp [s1 s2]\n  (set (for [a s1\n        \t b s2]\n    \t\t[a b])))","user":"53b39d82e4b047364c0444a6"},{"problem":90,"code":"(fn [s1 s2]\n    (set (mapcat (fn [x]\n            (map (fn [y]\n                   (vector x y))\n                 s2))\n          s1)))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn [x y] (set (mapcat #(map vector (repeat %) %2) x (repeat y))))","problem":90,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn f [s1 s2]\r\n  (set (mapcat (fn [e2] (map #(vector % e2) s1)) s2)))","problem":90,"user":"4facff22e4b081705acca230"},{"code":"#(set(for[a%1 b%2][a b]))","problem":90,"user":"4e7eff9e535db966e863cc38"},{"code":"(fn cart[col1 col2]\n  (set (for [ x col1 y col2]\n     [x y])))","problem":90,"user":"4e7ada51535db169f9c796ae"},{"problem":90,"code":"(fn cart [a b]\n  (->> (for [x a\n             y b]\n         [x y])\n       (into #{})))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"(fn [x y] ( set (mapcat (fn [xx] (map #(vector % xx ) x)) y))  )","problem":90,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"(fn [x y]\n  (set\n    (mapcat \n      #(map (fn [z] [% z]) y)\n      x)))","problem":90,"user":"4fbe42b7e4b081705acca30f"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [i1 s1 i2 s2] [i1 i2])))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn [set1 set2]\n  (set (reduce (fn [acc e1]\n    (concat acc (map #(vector e1 %1) set2)))\n    [] set1)))","problem":90,"user":"4e521cef535d302ef430da6d"},{"problem":90,"code":"(fn combos [cards suits]\n  (apply sorted-set\n         (into #{}\n               (for [card cards\n                     suit suits]\n                 [card suit]\n                 )\n               )\n         )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":90,"code":"(fn [s t]\n    (into #{} (for [s s\n                    t t]\n                [s t])))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":90,"code":"(fn [xs ys]\n   (into #{} (for [x xs y ys] [x y])))","user":"5935b010e4b04f87174def55"},{"problem":90,"code":"(fn [A B]\n            (set (for [a A\n                  b B]\n              [a b])))","user":"5d4df658e4b0776584bd6f41"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [acc x]\n            (reduce (fn [acc y]\n                      (conj acc [x y]))\n                    acc s2))\n          #{} s1))","user":"54d9f7f1e4b024c67c0cf751"},{"code":"(fn [x y]\n  (into #{}\n  (for [i x j y]\n    [i j]\n    )))","problem":90,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":90,"code":"(fn c-product [set1 set2]\n  (letfn [(pop-s [s] \n            (disj s (first s)))\n          (c [a b]\n            (cond \n              (empty? a) #{}\n              (empty? b) (c (pop-s a) set2)\n              :else\n              (cons (vector (first a) (first b)) (c a (pop-s b)))))]\n    (set  (c set1 set2))))","user":"52eaba10e4b09f7907dd14c2"},{"code":"(fn [xs ys]\n  (set\n    (for [x xs, y ys] [x y])))","problem":90,"user":"53779a26e4b06839e8705e38"},{"code":"(fn [coll1 coll2]\n    (into #{} \n          (for [x coll1\n                  y coll2]\n            [x y]))\n  )","problem":90,"user":"52430d3ce4b076204b44faa5"},{"problem":90,"code":"(fn[x y](set(for[i x, j y][i, j])))","user":"6001460ce4b074f607df6611"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (for [x coll1\n        y coll2]\n    [x y])))","user":"571cd9dce4b0145328a76271"},{"code":"(fn [x y] ((comp set mapcat) (fn [a] (map #(vector a %) y)) x))","problem":90,"user":"50be9b4ae4b00fb48fed2ef6"},{"code":"(fn [s1 s2]\n  (into #{} (for [x s1, y s2][x y])))","problem":90,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":90,"code":"(fn [set1 set2]\n  (loop [[current1 & remainder1 :as to-process1] (seq set1)\n         [current2 & remainder2] (seq set2)\n         result ()]\n    (if (empty? to-process1)\n      (set result)\n      (recur\n       (if (empty? remainder2)\n         remainder1\n         to-process1)\n       (if (empty? remainder2)\n         (seq set2)\n         remainder2)\n       (conj result [current1 current2])))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":90,"code":"(fn [coll1 coll2] \n  (set (for [x coll1 y coll2]\n           [x y])))","user":"5a5dbe9de4b0512ff01cd92b"},{"code":"#(let [s #{}] (apply conj s (for [a %1 b %2] [a b] )))","problem":90,"user":"4e44358f535dc968683fc4a8"},{"problem":90,"code":"(fn [as bs]\n        (set (for [a as b bs] [a b])))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":90,"code":"(fn[set1 set2]\n    (set(for [x set1 y set2] [x y])))","user":"5f77d470e4b02876ed9fd0be"},{"problem":90,"code":"(fn [x y] \n  (loop [ss x re #{}]\n    (if (not (empty? ss) ) \n      \n      (recur (rest ss)(clojure.set/union re (loop [ssss y ree re]\n        (if (not (empty? ssss)) (recur (rest ssss)(conj ree [(first ss) (first ssss)]))ree)\n       ))) re\n      )\n    ) \n  )","user":"5951190be4b066ee0a44aea4"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n  \t(for [i a\n          j b]\n      [i j])))","user":"513facf5e4b00f13ea1bd892"},{"problem":90,"code":"(comp set #(for[a % b %2] [a b]))","user":"4fc4eb1ee4b081705acca354"},{"problem":90,"code":"(fn cartesian-prod [s1 s2] \n  (set (apply concat\n        (map \n         (fn [a] (map #(vector a %1) s2)) \n         s1))))","user":"55b4fa46e4b01b9910ae2983"},{"code":"#(set (for [x %1\n            y %2]\n        [x y]))","problem":90,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":90,"code":"(fn [set1 set2]\n          (into #{}\n            (for [a set1\n                  b set2]\n              [a b])))","user":"504e0136e4b078edc5f5938e"},{"code":"(fn cartesian [orig-x orig-y]\n   (loop [x orig-x y orig-y acc #{}]\n     (if (empty? x)\n       acc\n       (if (empty? y)\n         (recur (rest x) orig-y acc)\n         (recur x (rest y) (conj acc [(first x) (first y)]))))))","problem":90,"user":"4ede0511535d10e5ff6f5330"},{"code":"(fn cartesian [s1 s2]\n  (apply hash-set (for [x s1 y s2] [x y])))","problem":90,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":90,"code":"(fn [xs-1 xs-2]\n  (into #{} (for [a xs-1\n        b xs-2]\n    [a b])))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":90,"code":"(fn [rows cols]\n  (set (mapcat (fn [r] (map (fn [f] [r f]) cols)) rows)))","user":"5c9adfebe4b048ec896c5ab9"},{"code":"(fn [s1 s2] (set (mapcat (fn [el] (reduce #(conj % [%2 el]) #{} s1)) s2)))","problem":90,"user":"4fb79872e4b081705acca2d2"},{"problem":90,"code":"#(set (for [x %1\n      \t\t y %2]\n       (vector x y)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":90,"code":"(fn [s1 s2]\n  (let [r (atom #{})]\n    (loop [y (sort s2)]\n      (if (> (count y) 0)\n        (do\n          (loop [x (sort s1)]\n            (if (> (count x) 0)\n              (do\n                (reset! r (conj @r [(first x) (first y)]))\n                (recur (rest x)))))\n                (recur (rest y))))) @r))","user":"5669eb9ae4b04acd4f672e02"},{"problem":90,"code":"(fn foo [s1 s2]\n  (loop [v1 (vec s1) v2 (vec s2) ret []]\n    (cond\n      (empty? v1) (set ret)\n      :else (recur\n        (rest v1)\n        v2\n        (let [fv1 (first v1)]\n          (into ret (map #(vector fv1 %) v2)))))))","user":"5fb8fe30e4b03f550f448223"},{"problem":90,"code":"(fn __ [s1 s2]\n  (set (for [x s1 y s2] [x y])))","user":"55916764e4b0604b3f94d57b"},{"problem":90,"code":"(fn cartesian [set1 set2]\n  \"Returns the cartesian product of set1 and set2.\"\n  (set (for [s1 set1\n             s2 set2]\n         (list s1 s2))))","user":"60460824e4b02d28681c77bc"},{"problem":90,"code":"(fn cartesian\n  [set1 set2]\n  (into #{} (apply concat\n                   (map (fn [v1] (map (fn [v2] [v1 v2])\n                                      set2))\n                        set1))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn cart-prod [s1 s2]\n  (reduce conj #{} (for [a s1 b s2] [a b])))","problem":90,"user":"5119f3d5e4b06c8af0111818"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs \n        y ys]\n    [x y])))","user":"53bd476ae4b0d9a98559a6ca"},{"problem":90,"code":"(fn cp [xs ys]\n  (set (for [x xs y ys] [x y])))","user":"540e8d13e4b0addc1aec671e"},{"code":"(fn cartprod [set1 set2] ( let [prd (fn [a b] (map #(conj [] a %1) b))] (reduce  #(into %1 (prd %2 set2)) #{} set1)))","problem":90,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set (for [x s1 y s2] [x y])))","user":"57fedf07e4b0d3187e9009dc"},{"code":"(fn cartesian\n  [setx sety]\n  (let [map-closure (fn [x coll] (map #(vector x %) coll))]\n    (->> setx\n      (map #(map-closure % sety))\n      (reduce concat #{})\n      set)))","problem":90,"user":"4edfb618535d10e5ff6f5343"},{"problem":90,"code":"(fn [setA setB]\n  (set\n    (mapcat\n      (fn [a]\n        (map #(vector % a)\n             setA))\n    setB)))","user":"5a94a38ce4b0d174b936c73e"},{"problem":90,"code":"(fn [xs ys] (set (for [a ys b xs] [b a])))","user":"5920c191e4b09b4ee5954c61"},{"problem":90,"code":"(fn [a b] (set (mapcat identity (for [x a] (for [y b] [x y])))))","user":"55280930e4b0ffed3738f93b"},{"code":"(fn [xs ys] (set (for [x xs y ys] (vector x y))))","problem":90,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn [a b]\n  (reduce ((fn [c]\n    (fn [r x]\n      (into r (map (fn [y] [y x]) c)))) a) #{} b))","problem":90,"user":"4eb27fad535d7eef3080734a"},{"code":"(fn [a b]\n  (set (reduce into (map (fn [x]\n                           (map (fn [y]\n                                  (vector x y)) b)) a))))","problem":90,"user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn [a b]  (set (for [x b y a] [y x])))","problem":90,"user":"510b704ee4b078ea71921100"},{"problem":90,"code":"(fn [x y] (set (for [i x\n                 j y]\n             (vector i j))))","user":"5992dc6ae4b0866487ed0d7d"},{"problem":90,"code":"(fn [a b] (set (partition 2 (flatten (map #(interleave a (repeat (count a) %)) b)))))","user":"554f7ef2e4b00713264bd9a1"},{"problem":90,"code":"(fn [coll-1 coll-2]\n  (set (for [x coll-1\n        y coll-2]\n    [x y])))","user":"53cbe808e4b00fb29b2212d4"},{"problem":90,"code":"(fn [xs ys]\n  (into #{} (mapcat (fn [x] (map (fn [y] (list x y)) ys)) xs)))","user":"5489dd4de4b0e286459a11ef"},{"problem":90,"code":"(fn [s1 s2]\n  (set (mapcat\n   (fn [el1] (map #(vector el1 %) s2)) s1)))","user":"5e909685e4b0cb016954634d"},{"code":"(fn cart [s1 s2]\n  (let [comb (map #(vector % s1) s2)]\n    (reduce (fn [acc v]\n              (into acc (map #(vector % (first v)) (second v)))) #{} comb)))","problem":90,"user":"51502056e4b098b221effc25"},{"problem":90,"code":"#(set (mapcat \n  (fn [x] \n    (map (fn [y] (vector x y)) %2)) %1))","user":"4df73d64535d04ed9115e775"},{"problem":90,"code":"(fn [x y]\n    (set (for [prefix x suffix y] [prefix suffix])))","user":"5ae47c1de4b0837691e92c81"},{"problem":90,"code":"#(set (for [x-i %1 y-i %2] [x-i y-i]))","user":"523578efe4b0a643f2dcb74c"},{"problem":90,"code":"(fn[coll1 coll2] (into #{} (for [x coll1 y coll2] (vector x y) )))","user":"575bd5f9e4b02ea114799365"},{"problem":90,"code":"(fn cart [a b]\n  (set\n   (for [x a y b]\n     [x y])))","user":"5674607ae4b05957ce8c6137"},{"code":"#(set (for [a % b %2]\n        (vector a b)))","problem":90,"user":"5007cdb9e4b0b17c647f5227"},{"code":"#( set (for [x % y %2] [x y]))","problem":90,"user":"527b856fe4b03e8d9a4a758d"},{"code":"(fn [as bs]\n  (into #{} (for [a as\n        b bs]\n    [a b]\n    )\n  ))","problem":90,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":90,"code":"(fn [xs ys] (set (for [x xs\n                       y ys]\n                   [x y]\n                   )\n                 )\n  )","user":"55f33f0ce4b06e875b46ce59"},{"code":"(fn [cards suits] \n      (into #{} (partition 2 (flatten (for [c cards] (for [s suits] [c s]))))))","problem":90,"user":"4ff9a200e4b0678c553fc3ab"},{"problem":90,"code":"(fn [xs ys]\n   (set (mapcat (fn [x] (map (fn [y] [x y]) ys)) xs)))","user":"52cee992e4b07d0d72b27395"},{"code":"#(set (reduce (fn [v i] (apply conj v (map (fn [j] [i j]) %2))) [] %1))","problem":90,"user":"5027b41ee4b01614d1633fee"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat #(map list (repeat %) b) a)))","user":"57aa4775e4b0b8559636fc6b"},{"code":"(fn [s1 s2]\r\n  (reduce (fn [r1 e1]\r\n            (reduce (fn [r2 e2]\r\n                      (conj r2 [e1 e2]))\r\n                    r1\r\n                    s2))\r\n          #{}\r\n          s1))","problem":90,"user":"4de2f44f535d08e6dec9fdec"},{"problem":90,"code":"(fn [s s2]\n (set (map vector (mapcat #(repeat (count s2) %) s) (apply concat (repeat (count s) s2)))))","user":"5b22328ee4b03cfeda66ed5d"},{"code":"(fn [s1 s2]\n  (set\n   (for [x s1 y s2]\n     [x y])))","problem":90,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":90,"code":"#(into #{}(for [i %1 j %2 ] [i j]))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn cart [one two]\n  (set\n    (mapcat\n      (fn [i]\n        (map\n          (fn [j]\n            [i j]\n          )\n        two)\n      )\n    one)\n  )\n)","problem":90,"user":"4e3456f9535deb9a81d77f2a"},{"problem":90,"code":"#(set \n  (for [x %1\n       y %2]\n   [x y]))","user":"5e692be9e4b04a83ad7cd269"},{"problem":90,"code":"#(into #{}  (for [c1e %1\n      c2e  %2]\n  (vector c1e c2e)))","user":"59f58103e4b0966464fe6ac0"},{"problem":90,"code":"(fn [s1 s2] \n  (let [v1 (vec s1)\n        v2 (vec s2)]\n        (set (reduce \n           concat \n            (map (fn [x] \n                    (map #(conj (vector x) %) v2)) v1)))))","user":"4e526cc4535d302ef430da74"},{"problem":90,"code":"(fn [a b]\n  (apply hash-set\n    (apply concat\n      (for [x a]\n        (map #(vector x %) b)))))","user":"50e5bca5e4b09ae9427b0e75"},{"problem":90,"code":"(fn cartesian [s1 s2]\n   (set (for [m s1\n              n s2]\n     [m n])))","user":"53bd6fcfe4b0d9a98559a6d0"},{"code":"(fn cprod [xset yset]\n  (set (for [x xset y yset] (vector x y))))","problem":90,"user":"4ea092f4535d7eef308072a6"},{"problem":90,"code":"(fn cartesian [setOne, setTwo]\n  (reduce #(into %1 (map vector (repeat %2) setTwo))\n          #{}\n          setOne))","user":"59971e2de4b07157cc8daacc"},{"problem":90,"code":"(fn cartesian-product [xs ys] \n  (->> (map #(map vector xs (repeat %)) ys)\n       (apply concat)\n       (set)))","user":"52616198e4b03e8d9a4a705e"},{"problem":90,"code":"(fn pc [x y]\n  (set (apply concat\n    (map\n     \t(fn f1 [x0]\n          (map #(vector x0 %) y))\n      x))))","user":"5779556de4b0979f8965166e"},{"problem":90,"code":"(fn [a b]\n  (set (for [a1 a b1 b] [a1 b1])))","user":"4ddf597a535d08e6dec9fddf"},{"problem":90,"code":"(fn carp [s1 s2]\n  (let [n (count s2)]\n    (set (mapcat #(map vector (repeat n %) s2) s1))))","user":"52d84ea7e4b09f7907dd1390"},{"problem":90,"code":"(fn[a b] (apply hash-set (mapcat (fn[x] (map #(list x %) b)) a)))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (partial vector x) %2)) %1))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn [faces suits]\n  (let [cart-prod (fn [acc face] (into acc (map (fn [suit] [face suit]) suits)))]\n    (reduce cart-prod #{} faces)))","problem":90,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [one two]\n  (into (hash-set) (for [x one y two]\n    [x y])))","problem":90,"user":"4f31519ae4b0d6649770a086"},{"problem":90,"code":"(fn [s1 s2] (\n               set (reduce #( concat %1 (map (fn[x] (identity [x %2])) s1 )) #{} s2)\n               ))","user":"596f6683e4b069c0a1a19877"},{"problem":90,"code":"#(reduce conj #{} (for [s1 %1,\n                        s2 %2]\n                    [s1 s2]))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [a b]\n    (into #{}  (for [x a y b]\n    [x y]\n    ))\n)","problem":90,"user":"5008d149e4b0144d4f561e41"},{"code":"(fn a [c1 c2] (into #{}(for [i1 c1 i2 c2] [i1 i2])))","problem":90,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":90,"code":"(let [res (atom #{})]\n   (fn [a b]\n     (doseq [x a]\n       (doseq [z b]\n         (swap! res conj [x z])))\n     @res))","user":"5b780a8ce4b047b03b2036f6"},{"problem":90,"code":"(fn [coll1 coll2] (set (mapcat (fn [curr] (map (fn [curr2] [curr curr2]) coll2)) coll1)))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn cartesion-90 [s1 s2]\n  (set (apply concat\n              (map #(map (partial vector %) s2) s1))))","problem":90,"user":"501b1a8ee4b0b12d9c5f4d81"},{"code":"(fn [s1 s2] (into #{} (for [i s1 j s2] [i j])))","problem":90,"user":"4e22b78b535d04ed9115e81e"},{"problem":90,"code":"(fn cartesian-product\n  [set1 set2]\n  (->> (map (fn [val]\n              (map #(do [% val]) set1))\n            set2)\n       (reduce into #{})))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":90,"code":"(fn cart [vals suits]                                                                                                                                                             \n  (set                                                                                                                                                                              \n   (for [val vals                                                                                                                                                                   \n         suit suits]                                                                                                                                                                \n     [val suit])))","user":"5728d33ce4b0c6e51e0d2b12"},{"problem":90,"code":"(fn [as bs]\n  (set (for [ a as b bs]\n    [a b])))","user":"54d6f22de4b0a52adc2e2023"},{"problem":90,"code":"(fn [a b]\n  (set (apply concat (map\n             (fn [x]\n               (map #(vector x %) b)\n               )\n             a)) ))","user":"546b24a0e4b00cfc9eacc166"},{"code":"(fn [s1 s2]\n   (reduce conj #{}\n   (apply concat\n   (map (fn [x]\n          (map (fn [y] [x y])\n               s2))\n        s1))))","problem":90,"user":"50868795e4b004985b776e5e"},{"problem":90,"code":"#(set (for [a %1\n           b %2]\n       [a b]))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [set1 set2]\n  (set (for [e1 set1, e2 set2]\n         [e1 e2])))","problem":90,"user":"4de165f3535d08e6dec9fde6"},{"problem":90,"code":"(fn [st1 st2]\n  (set\n    (for [s1 st1 s2 st2]\n      [s1 s2])))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn cart [as bs] (apply hash-set (mapcat (fn [a] (map #(vector a %) bs)) as)))","problem":90,"user":"52d3f666e4b09f7907dd1327"},{"code":"#( set (for [ x %1 y %2 ] [x y] ))","problem":90,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [a b]\r\n (set (for [x a\r\n        y b]\r\n        [x y])))","problem":90,"user":"50427899e4b0add3005c0fc2"},{"problem":90,"code":"(fn cartesian-product [set-a set-b]\n  (loop [a set-a r #{}]\n    (let [i (first a)]\n      (if (empty? a) \n        r \n        (recur (disj a i) \n               (loop [b set-b r' r] \n                 (if (empty? b) \n                   r' \n                   (let [j (first b)] \n                     (recur (disj b j) (conj r' [i j]))))))))))","user":"55d29fb6e4b0e31453f64a59"},{"code":"(fn [a b]\n  (set (mapcat #(map (partial vector %) b) a)))","problem":90,"user":"503a234de4b088a6a14ca76d"},{"problem":90,"code":"(fn [u v] (into #{} (mapcat #(map (partial vector %) v) u)))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [h1 h2]\n  (loop [tmp h2\n         r #{}]\n    (if (empty? tmp)\n      \tr\n      \t(recur (rest tmp) (into r (map vector h1 (repeat (count h1) (first tmp))))\n               ))))","problem":90,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [S T] (into #{} (for [s S t T] [s t])))","problem":90,"user":"52b8af15e4b07a9af57922b5"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat #(map (fn [x] (vector % x)) s2) s1)))","user":"56baab13e4b0f26550335948"},{"code":"(fn [coll1 coll2] (set (mapcat (fn [item] (map #(vector item %) coll2)) coll1)))","problem":90,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn  [s1 s2]\n  (loop [rm1 (seq s1), rm2 (seq s2), acc #{}]\n    (cond (empty? rm2) acc\n          (empty? rm1) (recur s1 (rest rm2) acc)\n          :else (recur (rest rm1) rm2 (conj acc [(first rm1) (first rm2)])))))","problem":90,"user":"538e36c7e4b0b51d73faae81"},{"problem":90,"code":"#(set \n  (for [x (vec %1) y (vec %2)] \n    [x y]))","user":"5e9d1c75e4b0157ca9664801"},{"problem":90,"code":";;; queremos un {}\n\n(fn [x y] (set(for [x1 x\n                    y1 y] ;;; sigo sin saber si me puedo volar esta parte\n                [x1 y1]) ;;; parar cada uno pues lo metemmos.... \n              )\n  )","user":"6075c214e4b069485764de5b"},{"problem":90,"code":"(fn ([s1 s2] (into #{} (apply concat (map\n             (fn [a]\n               (map #(vec [%1 a]) s1)) s2)))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":90,"code":"#(set (for [x %\n        y %2]\n      (vector x y)))","user":"5d29c06be4b01671435dbc6b"},{"problem":90,"code":"(fn [c1 c2] (apply hash-set (for [a (reverse c1) b c2] [a b])))","user":"5d88d820e4b0915913b1d3b1"},{"code":"#(set\n   (for [x %1 y %2]\n      [x y]))","problem":90,"user":"511b810ce4b07ab9ec456182"},{"code":"#(set (for [face % suit %2] [face suit]))","problem":90,"user":"51d08d67e4b067c365486351"},{"code":"(fn crossprod[a b] (let[size ( * (count a) (count b))]\n \t(apply hash-set(map vector  (apply interleave (repeat (count b) a )) (take size (cycle b))))))\n\n\n; apply hash-set ==> set\n;","problem":90,"user":"5307e4ece4b02e82168697a9"},{"problem":90,"code":"(fn cort [x y]\n  (set\n  (partition 2\n    (flatten\n        (for [i x]\n          (for [j y]\n            [i j]))))))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":90,"code":"#(set (map vector (cycle %1) (apply interleave (repeat (count %1) %2))))","user":"561a060ee4b053970a773b01"},{"problem":90,"code":"(fn cartes\n  ([ set1 set2 ] (cartes set1 set2 #{}))\n  ([set1 set2 cart]\n   (if (empty? set1) \n     cart\n     (cartes (rest set1) set2 (into cart (map (fn [y] (conj [] (first set1) y)) set2))))))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":90,"code":"(fn cartesian [l r]\n  (set (mapcat #(map (partial vector %) r ) l)))","user":"58e37946e4b005f69f193cae"},{"code":"(fn [x y]\r\n  (->>\r\n    (map #(map list x (repeat %)) y)\r\n    (apply concat)\r\n    set))","problem":90,"user":"504e14c2e4b078edc5f593bf"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat (fn [v] (map #(vector v %) s2)) s1)))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn cart-prod [as bs]\n  (let [append-all (fn [bs a] (map vector (repeat a) bs))]\n    (set (apply concat (map (partial append-all bs) as)))))","problem":90,"user":"4f28c979e4b0d6649770a01a"},{"problem":90,"code":"(fn [xs ys]\n  (set \n   (for [x xs     \n         y ys]\n     [x y])))","user":"5d6042f2e4b0c9e5857d5006"},{"code":"#(set (for [x %1\n              y %2] [x y]))","problem":90,"user":"4e705861535d5021c1a89635"},{"problem":90,"code":"(fn p90[x y]\n  (set (for [a x b y] [a b])))","user":"59395adfe4b02506e01a29fb"},{"problem":90,"code":"(fn [coll1 coll2] (reduce (fn [acc x] (reduce (fn [acc2 y] (conj acc2 (vector x y))) acc coll2)) #{} coll1))","user":"5794fd7be4b0e215f87e8476"},{"problem":90,"code":"(fn [a b]\n  (set (for [aa a\n        bb b]\n    [aa bb])))","user":"554b2151e4b0a04f79299580"},{"code":"(fn [as bs]\n  (set (for [a as\n        b bs]\n    [a b])))","problem":90,"user":"50bc4e73e4b0594b91591c3d"},{"problem":90,"code":"(fn [x y]\n  (set (for [i x j y]\n         [i j ])))","user":"5a4443cae4b0447ef91cc60f"},{"code":"(fn [s t]\n  (reduce\n      (fn [cart s-elem]\n        (apply (partial conj cart) (map #(list s-elem %) t)))\n      #{}\n      s\n  )\n)","problem":90,"user":"51473a70e4b0d520409ed394"},{"problem":90,"code":"(fn [s1 s2]\n      (set (for [elem1 s1\n                   elem2 s2]\n               [elem1 elem2])))","user":"5587cd86e4b059ccff29b1e6"},{"code":"#(into #{} (for [a %1\r\n                 b %2]\r\n             [a b]))","problem":90,"user":"4f82ed48e4b033992c121c0e"},{"problem":90,"code":"(fn [a-col b-col]\n  (set(apply concat (map (fn [a-elem] (map #(vector a-elem %) b-col)) a-col))))","user":"5978b4c9e4b01722bebd4d13"},{"code":"#(into #{} (for [a %\r\n       b %2] \r\n  [a b]))","problem":90,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x1 s1\n        x2 s2]\n    [x1 x2])))","user":"5f3ddc71e4b004f08c61c551"},{"code":"(fn [s1 s2]\n  (reduce into #{} (map #(map (fn [el] [% el]) s2) s1)))","problem":90,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":90,"code":"(fn [a b] \n        (set (for [x a\n              y b] [x y])\n    \n))","user":"53ba41c2e4b047364c0444f3"},{"problem":90,"code":"(fn [a b]\n  (let [map1 (fn [i a] (map #(vec (list i %)) a) ) ]\n    (into #{} (apply concat (map #(into #{} (map1 % b)) a) ) )\n    )\n  )","user":"570e43d8e4b0b0fb43fd06eb"},{"code":"#(set (for [x %1 y %2][x y]))","problem":90,"user":"4dbb1126535d1e037afb21b3"},{"problem":90,"code":"(fn prod\n  [a b]\n  (set (reduce concat (map\n   (fn [each-a]\n     (map vector (repeat each-a) b)\n   )\n   a\n  )))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn\n  ([xs ys]\n   (set (mapcat (fn [y] (map (fn [x] (vector x y)) xs)) ys))))","problem":90,"user":"52727d52e4b03e8d9a4a7439"},{"code":"(fn [set1 set2] (set (for [x set1 y set2] [x y])))","problem":90,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn [as bs] (set (for [a as, b bs] [a b])))","problem":90,"user":"4ef0eaef535dced4c769f211"},{"problem":90,"code":"(fn cartesian-product [set1 set2]\n  (set (for [item1 set1 item2 set2]\n         [item1 item2])))","user":"56ac81ace4b03c432f187347"},{"code":"(fn [s1 s2]\n  (set\n    (for [x s1 y s2]\n      [x y])))","problem":90,"user":"4e52777f535d302ef430da76"},{"code":"(fn cartes [x y]\n    (set\n      (mapcat (fn [a] (map #(vector a %) y)) x)))","problem":90,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn [s1 s2] (-> (for [x1 s1 x2 s2] [x1 x2])\n                (set)))","problem":90,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce \n   (fn [acc y] (clojure.set/union acc (set (map (fn [x] [y x]) s2)))) \n   #{} \n   s1))","user":"58bc6a88e4b0888cdc949d16"},{"problem":90,"code":"(fn [set1 set2] (set (for [a set1 b set2] (vector a b))))","user":"57202eb7e4b0c5bde472c090"},{"problem":90,"code":"(fn [xs ys]\n  (let [c (* (count xs) (count ys))\n        xsp (flatten (map #(repeat (count ys) %) xs))\n        ysp (take c (cycle ys))]\n    (set (map vector xsp ysp))))","user":"5e394c33e4b01d43a70e8dd1"},{"code":"(fn [collx colly]\n  (loop [xs collx ys colly acc #{}]\n    (if (empty? xs)\n      acc\n      (if (empty? ys)\n        (recur (rest xs) colly acc)\n        (recur xs (rest ys) (conj acc [(first xs) (first ys)]))))))","problem":90,"user":"4e7f5a0b535db966e863cc41"},{"problem":90,"code":"#(set (for \n   [x %1\n    y %2]\n   [x y]))","user":"5ea2e6bfe4b00a66d4a95197"},{"problem":90,"code":"(fn cartesian-product [a b] (set (apply concat (map (fn [e] (map #(vector e %) b)) a))))","user":"542c1f73e4b0dad94371f29d"},{"problem":90,"code":"(fn [a b] (into #{} (for [ap a bp b] [ap bp])))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"#(set (for [x %, y %2] [x,y]))","problem":90,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [x y]\n    (set\n     (mapcat\n      #(map (partial vector %) y)\n      x)))","problem":90,"user":"502873a8e4b01614d1633ff8"},{"problem":90,"code":"(fn [a b]\r\n  (set (for [x a, y b] [x y])))","user":"606e0a42e4b069485764de19"},{"problem":90,"code":"(fn [l1 l2]\n  (set (for [x l1 y l2] [x y]))\n)","user":"5739cbe4e4b0cd1946bd107c"},{"code":"#(into #{} (for [x % y %2]\n             [x y]))","problem":90,"user":"52eb400ee4b0705949c4443b"},{"problem":90,"code":"#(into #{}\n       (for [x %1 y %2]\n         [x y]))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn [xs ys]\n  (into #{} (for [x xs y ys] [x y])))","problem":90,"user":"512eb1e7e4b0b740abc5982a"},{"code":"(fn cart-prod [xs ys]\n  (set (for [x xs, y ys] [x y])))","problem":90,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":90,"code":"#(set (for [s1 %1, s2 %2] [s1 s2]))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":90,"code":"(fn cartesian-product\n  [set1 set2]\n  (set (for [x set1 y set2]\n         [x y])))","user":"55996253e4b031d6649c9baa"},{"code":"(fn [x y]\n  (into #{}(for [i x, j y]  [i j])))","problem":90,"user":"5078300de4b0fc74642bff66"},{"code":"(fn [xs1 xs2]\n  (set (for [a xs1\n        b xs2]\n    [a b])))","problem":90,"user":"531490bde4b08068f379ed17"},{"problem":90,"code":"(fn [set1 set2] (into #{} (for [e1 set1 e2 set2] [e1 e2])))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":90,"code":"(fn [x y] (set (mapcat (fn [a] (map #(vector a %) y)) x)))","user":"53cd421ce4b00fb29b2212dd"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set\n   (apply concat\n  \t(for [item s1]\n    \t(for [item2 s2]\n          [item item2])))))","user":"5f6e23e6e4b02876ed9fd064"},{"code":"(fn f [x y]\n   (into #{} (mapcat #(map (partial vector %) y) x)))","problem":90,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [s1 s2]\n  (let [afn (fn [x aseq]\n\t\t\t\t\t\t\t(map #(conj [] x %) aseq))]\n\t\t(into #{} (apply concat (map (fn [x] (afn x s2)) s1)))))","problem":90,"user":"4db045b5838c48654951d9be"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set (map vec \n    (for [e1 s1\n          e2 s2]\n    (list e1 e2)))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":90,"code":"(fn [x y] (into #{} (mapcat (fn [z] (map (fn [w] [z w]) y)) x)))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn [a b]\n    (set\n      (for [x a, y b] [x y])))","problem":90,"user":"4f128865535d64f603146428"},{"code":"#(into #{} (for [x %1 y %2] [x,y]))","problem":90,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn [xs ys]\n    (into #{} (for [x xs y ys] [x y])))","problem":90,"user":"4f0d093b535d0136e6c22313"},{"code":"#(set (for [x %1 y %2] (cons x [y])))","problem":90,"user":"4fdb02aae4b05e33b9224f56"},{"problem":90,"code":"(fn cart [a b]\n  (set (mapcat (fn[a1] (map (fn [b1] [a1 b1] ) b))a)))","user":"4f4aa932e4b0d56e7bb92c14"},{"code":"(fn [s1 s2]\n  (set (for [x s1, y s2] [x y])))","problem":90,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn [X Y] (set (for [x X y Y] [x y])))","problem":90,"user":"5174ade2e4b07031762f2edf"},{"problem":90,"code":"(fn [a b] (set (for [x (vec a) y (vec b)] [x y])))","user":"6074e088e4b069485764de4d"},{"problem":90,"code":"(fn [coll1 coll2 ]\n    (set    \n      (for [x coll1 y coll2]\n        (vector x y))))","user":"56a358d0e4b0542e1f8d14c9"},{"problem":90,"code":"(fn prod [s1 s2]\n  (into #{} (for [e1 s1, e2 s2]\n              [e1, e2])))","user":"54ca93abe4b057c6fda3a264"},{"problem":90,"code":"(fn [s1 s2] (set (for [e1 s1 e2 s2] [e1 e2])))","user":"5bafd5c8e4b0a20761a234dd"},{"code":"(fn [a b] (set (for [i a j b] [i j])))","problem":90,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn[x y] (set (partition 2 (mapcat #(interleave x (repeat (count x) %)) y))))","problem":90,"user":"4ea4e98a535d7eef308072ce"},{"problem":90,"code":"(fn [x y]\n  (reduce clojure.set/union #{} \n    (for [i x]\n      (set\n       (for [j y]\n         (vector i j))))))","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":90,"code":"(fn [a b]\n    (set\n        (mapcat (fn [a-elem] (map (fn [b-elem] (conj [] a-elem b-elem))\n                                   b))\n             a)))","user":"5213348ae4b0d32679a50652"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (apply hash-set (for [x s1 y s2]\n                    [x y])))","user":"53c126fce4b00fb29b22125b"},{"code":"(fn [s1 s2]\n  (set(reduce concat\n    (map \n      (fn [elem](map #(vector elem %) s2))\n      s1)\n    )\n  )\n)","problem":90,"user":"4fcf5292e4b03432b189f40e"},{"problem":90,"code":"; Cartesian product is a mathematical operation that returns a set (or product set or simply product) from multiple sets. \n; For sets A and B, the Cartesian product A × B is the set of all ordered pairs (a, b) where a ∈ A and b ∈ B.\n\n\n;(fn [x y] (set (for [a x b y] [a b])))\n\n(fn [set1 set2]\n   (set (for [a set1\n              b set2]\n          [a b])))","user":"57c44053e4b05aa3c4741ccb"},{"problem":90,"code":"(fn cart-product\n  [s1 s2]\n  (set (apply concat (map\n                      (fn [x] (set (map (fn [y] (vector x y)) s2)))\n                      s1))))","user":"568bd448e4b0dcc4269f40a9"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1 y s2]\n    [x y])))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n   (mapcat #(for [x s2] [% x])\n           s1)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [a b](set (mapcat (fn [i] (map #(vector i %) b)) a)))","problem":90,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn xproduct [sa sb]\n        (set (doall\n            (for\n                [a (seq sa)\n                 b (seq sb)]\n                (vector a b)))))","problem":90,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn [xs ys]\n  (->> (for [x xs\n             y ys]\n         (vector x y))\n       (into #{})))","problem":90,"user":"508a2c2fe4b016a2107004a1"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (for [x coll1 y coll2] [x y])))","user":"5e12327ee4b099d064962fe5"},{"code":"#(into #{} (for [x (seq %1)\n       y (seq %2)]\n   [x y]))","problem":90,"user":"51e3a549e4b0c611d6113e47"},{"problem":90,"code":"#(set (for [x %1 y %2] [x y]))\n\n;#(set (for [[x %1]\n ;     [y %2]]\n  ;[x y]))\n\n;(fn [num shapes]\n;  (set (mapcat (fn [shape] (map #(vector % shape) num)) shapes)))","user":"572830e6e4b0c5bde472c152"},{"problem":90,"code":"(comp set (fn [s t] (mapcat (fn [i] (map (fn [j] [i j]) t)) s)))","user":"5782018de4b0d36ec5835e8e"},{"code":"(fn [a  b] (set \n\t\t(reduce concat\n\t\t\t(map\n\t\t\t\t(fn\n\t\t\t\t\t[eleA]\n\t\t\t\t\t(map\n\t\t\t\t\t\t(fn\n\t\t\t\t\t\t\t[eleB]\n\t\t\t\t\t\t\t(list eleA eleB))\n\t\t\t\t\t\tb))\n\t\t\t\ta))))","problem":90,"user":"514d7e29e4b019235f6c0587"},{"code":"#(set (for [a %, b %2] [a b]))","problem":90,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"#(set (for [m %1 n %2] [m n]))","problem":90,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn [a b]\n  (apply hash-set (for [x a y b]\n    [x y])))","problem":90,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn [set1 set2] \n  ( into #{}\n  (for [x set1 y set2] [x y])))","problem":90,"user":"4ebd4448535dfed6da9c6d8f"},{"code":"(fn carp [s1 s2]\n  (set (for [i s1 j s2]\n    [i j])))","problem":90,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":90,"code":"#(set (for [x %1\n      \t\ty %2]\n  \t\t[x y]))","user":"54194782e4b01498b1a71a29"},{"code":"(fn carte [coll1 coll2]\n  (set (for [x coll1 y coll2] [x y])))","problem":90,"user":"5220a770e4b0e6a83c8925a3"},{"code":"#(set\n (for [x % y %2]\n   [x y]))","problem":90,"user":"50b35486e4b03ea88043356a"},{"problem":90,"code":"(fn solve [a b] (set (for [x a y b] [x y])))","user":"60537cd1e4b04c8f2157d152"},{"problem":90,"code":"(fn [x y]\n    (set (mapcat (fn [e-x] (map (fn [e-y] [e-x e-y]) y)) x)))","user":"5f86a98be4b0649ffcda4caa"},{"code":"#(set (for [a  %\n       b %2]\n   [ a b]))","problem":90,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"#(apply hash-set (for [x %1 y %2 :let [z (vector x y)]] z))","problem":90,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":90,"code":"(fn [a b]\n   (set\n    (for [x a, y b]\n      [x y])))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn foo [x y]\n    (into #{} (for [i x j y]\n                [i j])))","problem":90,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"(fn cp [s1 s2]\r\n  (into #{}\r\n        (mapcat (fn [x2]\r\n                  (map (fn [x1] [x1 x2]) s1))\r\n                s2)))","problem":90,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (->> (map #(interleave (repeat %) s2) s1)\n       flatten\n       (partition 2)\n       (into #{})))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":90,"code":"#(set (apply concat (for [i %] (for [j %2] [i j]))))","user":"53976599e4b0b51d73faaeea"},{"code":"(fn [x y]\n  (set (for [k x \n             v y] \n         [k v])))","problem":90,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn [as bs]\n  (into #{}\n        (for [a as\n              b bs]\n          [a b])))","problem":90,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":90,"code":"(fn cart [coll1 coll2]\n   (set (for [x coll1 y coll2]\n          [x y])))","user":"5d6691cee4b0db5d338d15e9"},{"code":"(fn [xs ys] (set (mapcat #(map (partial vector %) ys) xs)))","problem":90,"user":"4ee3b586535d10e5ff6f5371"},{"problem":90,"code":"(fn [c1 c2] (set (for [x c1 y c2] [x y])))","user":"54f8b6f4e4b01ecee9d8882c"},{"code":"(fn [xs ys]\n  (set \n    (apply concat\n      (for [x xs]\n        (map #(vector x %) ys)))))","problem":90,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":90,"code":"(fn [faces suits]\n  (set (for [x faces y suits] [x y])))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn cartesian- [s1 s2]\n  \"90. Write a function which calculates the Cartesian product of two                                                                                                   \n  sets.\"\n  (set (mapcat (fn [s1e] (map (fn [s2e] [s1e s2e]) s2)) s1))\n  )","problem":90,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":90,"code":"(fn cart [set1 set2] (into #{} (for [x set1 y set2] [x y])))","user":"554bc64ae4b0a04f79299598"},{"code":"(fn [collA collB] (set (for [a collA b collB] [a b])))","problem":90,"user":"4ee77f15535d93acb0a66868"},{"problem":90,"code":"(fn [A B] (set (for [a A b B] [a b])))","user":"589f37e0e4b02bd94d917e79"},{"problem":90,"code":"(fn cartesian-product\n  [set1 set2]\n  (set(for\n    [s1 set1\n     s2 set2]\n    [s1 s2]\n    ))\n)","user":"560d7863e4b05f002753df40"},{"code":"#(set (for [x %1, y %2] (vector x y)))","problem":90,"user":"5060d137e4b0dc10a69545a0"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (set (apply concat (map (fn [x]\n                            (map #(vector x %) ys)) xs ))))","user":"58db097fe4b0a4d5acaab66f"},{"problem":90,"code":"(fn[s1 s2] (reduce into #{} (for [e1 s1] (for [e2 s2] [e1 e2]))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":90,"code":"#(into #{} (mapcat (fn [x] (map (juxt (constantly x) identity) %2)) %1))","user":"4fb1d7ace4b081705acca281"},{"code":"(fn [s1 s2]\n   (set (for [x1 s1 x2 s2] [x1 x2]))\n   )","problem":90,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":90,"code":"(fn s [seta setb]\n  (loop [seta seta\n         res ()]\n    (if (empty? seta)\n      (set res)\n      (recur (rest seta)\n             (concat (loop [setb setb\n                          res2 ()]\n                     (if (empty? setb)\n                       res2\n                       (recur (rest setb) (cons (vector (first seta) (first setb)) res2))))\n                   res)))))","user":"57f8104ce4b0d3187e900910"},{"code":"(fn [set1 set2]\n      (set (for [x set1\n                 y set2]\n             [x y])))","problem":90,"user":"509e62a8e4b08df8156e9e2e"},{"code":"(fn [s1 s2]\n    (reduce (fn [s e] (apply conj s (map #(conj [e] %1) s2))) #{} s1))","problem":90,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [a b] (set (mapcat #(map (fn[x] (vector % x)) b) a)))","problem":90,"user":"4da8dd6e30acd6ed12482a68"},{"code":"(fn cart \n  ([s1 s2] \n    (cart s1 s1 s2))\n  ([s1 s1a s2]\n    (cond\t\n      (empty? s1)\n        (cart s1a s1a (rest s2))\n      (empty? s2) \n        #{}\n      :else\t\n        (conj \n          (cart (rest s1) s1a  s2 )\n          (vector (first s1) (first s2) )))))","problem":90,"user":"4e8d5edd535d65386fec2134"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n    (for [aa a\n          bb b]\n      [aa bb])))","user":"5b62ff3ce4b0c6492753e72a"},{"code":"(fn [s1 s2]\n  (reduce\n    (fn [a b]\n      (into a\n        (reduce\n          #(conj %1 [b %2])\n          () s2)))\n        #{} s1))","problem":90,"user":"4e8e8c24535d65386fec2143"},{"code":"#(set (for [a %2\n            b %]\n        [b a]))","problem":90,"user":"507ef25ce4b0f753b6f9788e"},{"code":"(fn [l1 l2] (into #{} (for [a l1 b l2] [a b])))","problem":90,"user":"4dad76588e77d6ed63f12a44"},{"problem":90,"code":";; http://www.4clojure.com/problem/90\n(fn cartesian-product\n  [set-a set-b]\n  (set (for [a set-a b set-b]\n         [a b])))","user":"5c92105ce4b048ec896c59f7"},{"problem":90,"code":"(fn [c1 c2] (set (mapcat (fn [x] (map #(identity [x %]) c2)) c1)))","user":"55632016e4b0c656e3ff17e4"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (into #{} (mapcat (fn [x] (map (fn [y] [x y]) ys)) xs)))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":90,"code":"(fn cp [s1 s2]\n  ((fn cp-iter [s1 s2 result]\n    (if (= (count s1) 0) result\n      (cp-iter (rest s1) s2 (into result\n            \t\t\t\t\t            (map #(vector (first s1) %) s2)))))\n  s1 s2 #{}))","user":"57614a42e4b0994c1922fb85"},{"problem":90,"code":"#(set \n   (for [a %1\n       b %2]\n   [a b]))","user":"55216aa5e4b0882d96d09192"},{"code":"(fn [sq1 sq2] (set (for [s1 sq1 s2 sq2] [s1 s2])))","problem":90,"user":"5272669de4b03e8d9a4a742e"},{"code":"#(set (for [x % y %2] [x y]))","problem":90,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":90,"code":"(fn cartprod [coll1 coll2]\n\n  (set  (for [x coll1, y coll2]\n    [x y])\n  ))","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"#(loop [set1 %1 result #{}]\n   (if (empty? set1) result\n     (recur (rest set1) (loop [set2 %2 tmp #{}] \n                          (if (empty? set2) (into result tmp) \n                            (recur (rest set2) (conj tmp [ (first set1)  (first set2)])))\n  ))))","problem":90,"user":"510d3dc6e4b078ea71921132"},{"problem":90,"code":"(fn [s1 s2]\n   (reduce \n     (fn [arr elem]\n       (apply conj arr (set (map (fn [x] vec [elem x]) s2))))\n     #{}\n     s1))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":90,"code":"(fn [as bs]\n  (set (mapcat \n  (fn [a]  \n  (map #(into [] %)\n       (partition 2 (interleave as (repeat a)))\n    )) \n  bs  \n  )))","user":"57487084e4b009280f9f2b8c"},{"problem":90,"code":"#(set (for [a % b %2]\n   [a b]))","user":"5a8aa992e4b05369db4d24d8"},{"problem":90,"code":"(fn cartesian-product \n  [x y]\n  (set (for [a x b y] [a b])))","user":"57f8153de4b0d3187e900916"},{"problem":90,"code":"(fn [c1 c2]\n  (into #{}\n        (for [x c1\n              y c2]\n          [x y])))","user":"5032748ae4b0e78df07b092f"},{"problem":90,"code":"#(set (for [a %1 b %2]\n   [a b]))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":90,"code":"(fn [s1 s2]\n\t(loop [s1 s1 acc []]\n\t\t(if (empty? s1) (set acc)\n\t\t\t(recur (rest s1) (concat (map #(vector (first s1) %) s2) acc)))\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":90,"code":"(fn\n  [set1 set2]\n  (set (for [s1 set1 s2 set2] [s1 s2])))","user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn [s1 s2]\n   (set\n    (apply concat\n           (map\n            (fn [e1]\n              (concat (map \n                       (fn [e2] \n                         [e1 e2])\n                       s2)))\n            s1))))","problem":90,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn [xs ys]\n  (set \n   (for [x xs\n         y ys]\n     [x y])))","problem":90,"user":"51a4416ae4b0def3c5c5868c"},{"code":"(fn _ [a b] (if-not (nil? a) \n   (set (concat (map #(list (first a) %) b) \n                (_ (next a) b)))))","problem":90,"user":"4e71705e535d5021c1a89649"},{"problem":90,"code":"(fn [s1 s2]\n  (->> (for [i1 s1]\n         (for [i2 s2]\n           [i1 i2]))\n       (apply concat)\n       (set)))","user":"5461c402e4b01be26fd746a6"},{"problem":90,"code":"(fn [x y] (let [n x]\n            (reduce\n              (fn [m item]\n                (into m (map #(vector % item) n)))\n              #{}\n              y)))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":90,"code":"(fn [a b]\n      (set (apply concat (map (fn [i]\n             (map (fn [j]\n                    (vector i j)\n                    ) b))\n           a))))","user":"5e348945e4b0650de70e2b1d"},{"code":"#( into #{} (for [ x %1 y %2] [x y]  ))","problem":90,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":90,"code":"#(set (for [s11 % s22 %2] [s11 s22]))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":90,"code":"(fn [l1 l2] (set (for [a1 l1 a2 l2] [a1 a2])))","user":"5da71eaee4b000c986472c15"},{"code":"(fn [s1 s2] (set(\n  for[x (seq s1) y (seq s2)]\n    (list x y)\n)))","problem":90,"user":"4ef48422535dced4c769f236"},{"code":"(fn [s1 s2]\r\n  (apply hash-set (apply concat (map (fn [x] (map (fn [y] (vector x y)) s2)) s1))))","problem":90,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn [s1 s2] (into #{} (for [x s1 y s2] [x y])))","problem":90,"user":"502904e0e4b0feaf66e22fad"},{"code":"#(set (for [x (vec %1) y (vec %2)] [x y]))","problem":90,"user":"50ef56dfe4b0bdaecbb47d94"},{"code":"#(into #{} (for[x %1\n       y %2]\n   [x y]))","problem":90,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"(fn [s1 s2]  (set (for [i1 s1, i2 s2]\n    [i1 i2])))","problem":90,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":90,"code":"(fn [set1 set2]\n  (set\n   (for [s1 set1 s2 set2]\n     [s1 s2])))","user":"5ba5802de4b0a20761a233fd"},{"code":"(fn [a b]\n   (into #{} (for [i a j b]\n               [i j])))","problem":90,"user":"535e518ee4b04ce2eb3ed2cf"},{"problem":90,"code":"(fn [first-set second-set]\n  (set (for [x first-set y second-set] [x y])))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn [as bs]\n  (set (for [a as\n             b bs]\n         [a b])))","problem":90,"user":"52aa4a67e4b0c58976d9ac62"},{"code":"#(set(for [x % y %2] [x y]))","problem":90,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn [x y]\n  (set (for [xx x yy y]\n    [xx yy])))","problem":90,"user":"536f5900e4b0fc7073fd6e7b"},{"code":"(fn [a b]\n  (set (apply concat (for [x a]\n    (for [y b]\n      [x y])))))","problem":90,"user":"4dd9d299535d2dad7130b5dd"},{"problem":90,"code":"(fn cartesian_product\n  [a b]\n   \"function which calculates the Cartesian product of two sets\"\n  (set (for [x1 a x2 b] [x1 x2])))","user":"5bbbd077e4b0a20761a23615"},{"code":"#(set(for [a %1 b %2] [a b]))","problem":90,"user":"4ef4c1ff535dced4c769f23e"},{"problem":90,"code":"(fn [a b]\n  (set (reduce\n     (fn [t x] (apply conj t (map #(identity [x %]) b)))\n     []\n      a)))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":90,"code":"(fn cross [s1 s2] \n  (into #{} \n        (apply concat (map (fn [a] \n               (map #(vector a %1) s2)) s1))))","user":"5367bc60e4b0243289761e81"},{"problem":90,"code":"(fn [a b]\n  (set (for [a a b b]\n    [a b])))","user":"6088395de4b0ae75613dcee2"},{"code":"(fn [s1 s2]\n(set (for [x s1, y s2] [x y])))","problem":90,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn [xs ys] \n  \t(reduce (fn [s x] \n  \t\t\t\t(apply conj s (map (fn [y] [x y]) ys))) \n            #{} xs))","problem":90,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":90,"code":"(fn cartesian [a b]\n  (set (for [x a y b] [x y])))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"#(set\n(loop [x % result #{}]\n  (if (empty? x)\n    result\n    (recur (rest x) (concat result (map (fn [n] [(first x) n]) %2))))))","problem":90,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [src1 s1, src2 s2, result #{}]\n    (if (and (empty? src1) (empty? src2))\n      result\n      (recur (if (empty? src1)\n               s1\n               (rest src1))\n             (if (empty? src1) (rest src2) src2)\n             (if (or (empty? src1) (empty? src2))\n               result\n               (conj result\n                     (vector (first src1) (first src2))))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":90,"code":"(fn [xs ys]\n  (set\n        (for [x xs y ys]\n          [x y])))","user":"548fa2dfe4b0e286459a1240"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} \n        (for [i s1        \t\n              j s2]\n          [i j])))","user":"536c1531e4b0fc7073fd6e36"},{"problem":90,"code":"(fn [col1 col2]\n  (loop [c1 col1\n         c2 col2\n         r []]\n    (if (seq c1)\n      (if (seq c2)\n        (recur c1 (rest c2) (conj r [(first c1) (first c2)]))\n        (recur (rest c1) col2 r))\n      (set r))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":90,"code":"(fn [s t]\n   (reduce\n     (fn [r i]\n       (into r (map #(into [i] [%]) t)))\n     #{}\n     s))","user":"5ebff55de4b00a66d4a95286"},{"code":"(fn [mapa mapb]\n  (into #{} (mapcat (fn [a] \n         (map  (fn [b]\n                 [a b]) mapb)) mapa))\n  )","problem":90,"user":"52761edae4b03e8d9a4a74d4"},{"code":"(fn [xs ys]\n  (set (for [x xs\n    \t     y ys]\n         [x y])))","problem":90,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":90,"code":"(fn [a b] \n  (reduce into #{} \n          (map \n            (fn [x] \n              (map #(vector x %) b)) \n           a)))","user":"5243233fe4b076204b44faac"},{"code":"(fn [a b] (set (mapcat (fn [x] (map (fn [y] [x y]) b)) a)))","problem":90,"user":"51307b84e4b08c712d3fae39"},{"code":"(fn [a b]\n  (reduce conj #{}\n    (reduce concat\n      (map (fn [x] (map #(vector x %) b)) a))))","problem":90,"user":"4e720985535d5021c1a89655"},{"problem":90,"code":"(fn [x y]\n    (set (for [seq-x x\n               seq-y y]\n           [seq-x seq-y])))","user":"58472aade4b089d5ab817ea0"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{} (sort-by \n  \tfirst (set (for [x set1\n                         y set2]\n    (vector x y))))))","user":"608e5697e4b03bd49d9f36be"},{"code":"(fn [set1 set2]\r\n    (set (for [s1 set1 s2 set2] [s1 s2])))","problem":90,"user":"4dd61f98535d2dad7130b5c6"},{"problem":90,"code":"(fn [A B] (into #{} (for [a A b B] [a b])))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":90,"code":"#(set \n  (for [e1 %1\n       e2 %2] \n    [e1 e2]))","user":"57650419e4b0994c1922fc09"},{"code":"(fn [s t]\n  (set\n    (for [x s y t]\n      [x y])))","problem":90,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn [s1 s2]\n  (set (for [e1 s1 e2 s2]\n         (vector e1 e2))))","problem":90,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn cprod [a b] (set (for [x a y b] [x y])))","problem":90,"user":"538557aee4b06839e8705f02"},{"code":"#(set (for [s1 %, s2 %2] [s1 s2]))","problem":90,"user":"5339c105e4b0e30313ee6cae"},{"problem":90,"code":"(fn [s1 s2] \n  (set (for [a s1\n             b s2]\n         [a b])))","user":"53d64811e4b0e771c3025456"},{"problem":90,"code":"(fn xxx[coll1 coll2](set(for[a coll1 b coll2][a b])))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":90,"code":"(fn carts [col1 col2]\n  (let [vc1 (vec col1) vc2 (vec col2)]\n    (set \n      (reduce concat \n        (for [i vc1]\n          (map #(vector i %) vc2))))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [c1 c2] (set (mapcat #(map (partial conj [%]) c2) c1)))","problem":90,"user":"50cf21dee4b0e61f11ddcd8b"},{"code":"#(set (mapcat (fn [y] (map (fn [x] [y x]) %2)) %1))","problem":90,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn cartesian-product [x y]\r\n(set (for [a x b y] [a b])))","problem":90,"user":"4e8ddf32535d65386fec213c"},{"problem":90,"code":"#(set (for [rank %1\n            suit %2]\n        [rank suit]))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":90,"code":"(fn cp [s1 s2]\n  (into #{}\n        (apply concat (map (fn [i1] (map (fn [i2] [i1 i2]) s2) ) s1))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":90,"code":"(fn cartX [c1 c2]\n  \t(->> (for [x c1\n          y c2]\n      [x y])\n           set))","user":"57642916e4b0994c1922fbee"},{"code":"(fn [x y]\n(into #{} (for [x2 y x1 x](conj [] x1 x2)) )\n)","problem":90,"user":"4fdf5403e4b05e33b9224f98"},{"problem":90,"code":"(fn cartesian-prod [a b]\n  (set (for [x a\n             y b]\n         [x y])))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":90,"code":"(fn cartesianProduct[s1 s2]\n  (set (apply concat (map (fn [el] (map #(vec [% el]) s1)) s2))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat\n         (fn [x] (map (fn [y] [x y]) ys))\n         xs)))","user":"5b77248ae4b047b03b2036e7"},{"code":"(fn [xs ys]\n  (set\n    (for [x xs y ys]\n      [x y])))","problem":90,"user":"4dafa380edd6309eace4d17c"},{"problem":90,"code":"(fn [as bs]\n  (set\n    (for [a as b bs]\n      [a b])))","user":"53ea5851e4b036ad0777e4e4"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1 y s2]\n    [x y])))","user":"50ec409ce4b04edc33777045"},{"problem":90,"code":"(fn [a b]\n    (set (for [x a y b] (vector x y))))","user":"52b2f9cae4b0c58976d9acfb"},{"code":"(fn [a b]\n  (set (reduce concat (map (fn [x] (map #(conj [x] %) b)) a))))","problem":90,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn [a b]\n  (set\n    (for [a a b b]\n      [a b])))","problem":90,"user":"538be6afe4b0640c7a9a58c9"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (apply concat (map #(map (partial vector %) s2) s1))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [x y] (into #{} (for [a x b y] [a b])))","problem":90,"user":"52016690e4b0b2e020a18f0f"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs y ys] [x y]))\n  )","user":"5996b419e4b07157cc8daab5"},{"problem":90,"code":"(fn cart [c1 c2] (set (reduce concat (for [x c1] (for [y c2] [x y])))))","user":"550e0373e4b06e50f9beb162"},{"code":"#(apply hash-set \n  (for [x %1 y %2] [x y]))","problem":90,"user":"4ff5744ae4b0678c553fc36a"},{"code":"#(set (for [a %, b %2] (vector a b)))","problem":90,"user":"4f253a49e4b0d66497709ff3"},{"problem":90,"code":"(fn f [a b]\n  (set\n    (for [ai a, bi b]\n      [ai bi])))","user":"5777c3d6e4b0979f8965164f"},{"problem":90,"code":"(fn [x y]\n    (set (for [i x j y] [i j])))","user":"57213df6e4b0c5bde472c0ab"},{"problem":90,"code":"(fn cartesian-product [sa sb]\n  (letfn [(doa [a] (reduce #(conj % [a %2]) #{} sb))]\n    (reduce #(clojure.set/union % (doa %2)) #{} sa)))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":90,"code":"(fn [sa sb]\n  (set (for [i sa\n        j sb]\n    [i j])))","user":"606aafcfe4b069485764ddf6"},{"problem":90,"code":"(fn cartesian-product\n  [keys values]\n  (if (empty? values)\n    #{}\n    (into #{} (concat (map vector keys (repeat (count keys) (first values)))\n                      (cartesian-product keys (rest values))))))","user":"60396c95e4b0d5df2af222f4"},{"problem":90,"code":"(fn [x y] (let [a (mapcat #(repeat (count y) %) x) b (->> (vec y) (repeat (count x)) (apply concat))] \n            (set (map  vector a b ))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [s1 s2] (set (reduce concat '() (map (fn [e1] (map (fn [e2] [e1 e2]) s2)) s1))))","problem":90,"user":"4f13047d535d64f60314642c"},{"code":"(fn [a b](set(mapcat (fn [a](map (fn[b][a b]) b))a)))","problem":90,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [a b] (set (for [x a y b] [x y])))","problem":90,"user":"4e0e0529535d04ed9115e7b9"},{"problem":90,"code":"(fn cartesian-product [x y] (set (for [a x b y] [a b])))","user":"5182de5ce4b0353c468deb74"},{"problem":90,"code":";#(into #{} (for [a %1, b %2] [a b]))\n#(set (for [a %1, b %2] [a b]))","user":"5a544eeee4b05d388ecb6c24"},{"problem":90,"code":"(fn [x y] (set (\n      mapcat\n      (fn [x-element] (\n            map (fn [y-element] (vector x-element y-element)) y\n      ))\n      x\n    )\n  )\n)","user":"5a285a38e4b07f18be40aa67"},{"code":"(fn [xs ys] (set (mapcat #(map list (repeat %) ys) xs)))","problem":90,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn test [x y] \n  (reduce #(apply conj %1 %2) (map \n   (fn [a] \n     (into #{} (map #(conj [] a %) y))\n     ) x)))","problem":90,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn f [a b]\n  (set (for [x a y b]\n    [x y])))","problem":90,"user":"52091d57e4b0e152394d76f0"},{"code":"(fn [set1 set2] (set (for [ x set1 y set2 ] [x y])))","problem":90,"user":"52655949e4b03e8d9a4a710b"},{"problem":90,"code":"#(into (sorted-set)\n (for [x %1 y %2]\n   (vector x y)))","user":"53572767e4b04ce2eb3ed277"},{"code":"(fn kartX [x y]\n  (if (empty? x) #{}\n      ((fn kartY [x2 y2]\n        (if (empty? y2) (kartX (rest x) y)\n            (conj (kartY x2 (rest y2)) [(first x2) (first y2)])\n        )\n      ) x y)\n  )\n)","problem":90,"user":"52474ec2e4b05ef8e38e6361"},{"problem":90,"code":"(fn [s1 s2]\n      (set (reduce (fn [cartesian next-s1-item]\n                 (concat cartesian (map #(vector next-s1-item %) s2))) #{} s1)))","user":"57a9eddae4b0b8559636fc5f"},{"code":"#(into #{} (for [inx %1 iny %2] [inx iny]))","problem":90,"user":"51f13b80e4b06a20a2523f38"},{"problem":90,"code":"(fn  foo [ one two]\n    (if (empty? two) #{}\n        (set(concat\n              (zipmap one\n                      (take (count one ) (repeat (first two))))\n                 (foo one (rest two))          \n    )\n    )\n))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":90,"code":"#(into #{}(for [i %1 j %2] [i j]))","user":"560c37b5e4b05f002753df2e"},{"problem":90,"code":"(fn cart-prod [s1 s2] (set (for [x s1  y s2] [x y])))","user":"561814bae4b06b1bb2182a1a"},{"problem":90,"code":"(fn [s1 s2]\n    (into #{} (for [x s1\n                    y s2]\n                [x y])))","user":"54ad9d76e4b09f271ff37ce6"},{"code":"#(set (for [x % y %2]\r\n        [x y]))","problem":90,"user":"500159b3e4b0678c553fc419"},{"code":"(fn [a b]\n  (apply hash-set (for [x a y b] [x y])))","problem":90,"user":"507a08e4e4b08327cd804a67"},{"problem":90,"code":"(fn [b a]\n  (set (for [b b\n             a a]\n         [b a])))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn [a b]\n  (set (apply concat (map #(map (fn [x] [% x]) b) a))))","problem":90,"user":"52586d24e4b0cb4875a45cb0"},{"problem":90,"code":"(fn cart-prod\n  [x y]\n  (set (for [a (vec x)\n             b (vec y)]\n         [a b])))","user":"59076082e4b047aa04b19956"},{"code":"(fn [coll1 coll2] (set (mapcat #(map list (repeat %) coll2) coll1)))","problem":90,"user":"530caf86e4b02e82168697df"},{"problem":90,"code":"(fn [ a b ] (into #{} (for [ x a y b] [x y])))","user":"5510aa92e4b06e50f9beb188"},{"code":"(fn cartesian [x y]\n    (into #{} (for [xel x yel y]\n      [xel yel])))","problem":90,"user":"4f8ac2bde4b02e764a0a5172"},{"problem":90,"code":"(fn cartesian\n  [set1 set2]\n  (into #{}(for [e1 set1\n        e2 set2]\n    [e1 e2]\n    )))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [c1 c2]\n  (set (do (for [x c1\n        y c2]\n       (vector x y)))))","problem":90,"user":"536673a8e4b0243289761e76"},{"problem":90,"code":"(comp set (fn [set1 set2]\n  (for [set1-elem set1\n        set2-elem set2]\n    [set1-elem set2-elem])))","user":"55e1bb20e4b050e68259b41f"},{"problem":90,"code":"; shorter\n#(set (for [x % y %2] [x y]))\n\n; first solution\n#_#(apply conj #{} (for [x % y %2] [x y]))","user":"55e7d06ee4b050e68259b496"},{"problem":90,"code":"(fn [a b]\n  (set (for [x (vec a) n (vec b)] [x n])))","user":"5f5f2eafe4b02876ed9fcff5"},{"problem":90,"code":"(fn pairs [faces suits]\n    (set (for [x faces \n          y suits]\n          [x y]))\n    )","user":"580f9585e4b0f478707a05b5"},{"problem":90,"code":";#(into #{} (for [x %1 y %2] (vector x y)))\n#(set (for [x %1 y %2] [x y]))","user":"5582dfb6e4b05c286339e10d"},{"code":"(fn [set1 set2] (set (for [a set1 b set2] [a b])))","problem":90,"user":"53806e5be4b06839e8705ec1"},{"code":"(fn [xs ys]\n  (set (for [x xs, y ys]\n         [x y])))","problem":90,"user":"52487654e4b05ef8e38e63dc"},{"code":"#(set (apply concat (for [a %1] (for [b %2] [a b]))))","problem":90,"user":"4e823f41535db62dc21a62c8"},{"problem":90,"code":"(fn [c-a c-b]\n  (set (for [a c-a\n        b c-b]\n    [a b])))","user":"56bb652ae4b0f26550335953"},{"problem":90,"code":"(fn [x y]\n  (set\n   (for [i x j y]\n     [i j])))","user":"5705e404e4b0b0fb43fd0676"},{"problem":90,"code":"#(set (for [x %1  y %2] (vector x y)))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn cartesian-product [s t]\n  (set (for [x s y t]\n         [x y])))","problem":90,"user":"516385cee4b055933a9ca02d"},{"problem":90,"code":"#(set (for [x %1\n      y %2] (vector x y)))","user":"5c411df3e4b08cd430848ebf"},{"code":"(fn [a b] \n  (into #{}\n    (mapcat #(map (fn [x] [x %]) a) b)))","problem":90,"user":"4e498df9535dc968683fc4c4"},{"code":"#(set (for [i % j %2] (vector i j)))","problem":90,"user":"509160dae4b0742c82730aef"},{"code":"(fn foo \n  ([s1 s2] (foo s1 s2 #{}))\n  ([s1 s2 nset]\n    (if (empty? s1)\n      nset\n      (foo \n        (rest s1)\n        s2 \n        (set (concat \n          nset \n          (map (fn [x] (vector (first s1) x)) s2)))))))","problem":90,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn [a b] (set (mapcat (fn [i] (map #(vector i %) b)) a)))","problem":90,"user":"4e589bdc535d8a8b8723a295"},{"problem":90,"code":"(fn  [s1 s2]\n  (into #{} (for [x s1 y s2] [x y])))","user":"5b2689e3e4b063e2438bcc33"},{"code":"(fn [a b]\n   (set (for [x a y b] [x y])))","problem":90,"user":"4eb02674535d7eef30807338"},{"problem":90,"code":"#(reduce (fn [acc x] (into acc \n                  \n                  (for [i %1] [i x])\n                  \n                  ))\n\n#{} %2)","user":"54e51c7be4b024c67c0cf7f7"},{"problem":90,"code":"#(set \n  (for [x %\n        y %2]\n    [x y]))","user":"5e7dc2d8e4b085ba37836e2f"},{"code":"(fn [s1 s2]\r\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4dc1ee85535d020aff1edf91"},{"code":"(fn [s t]\n  (set \n    (for [x s y t] [x y])))","problem":90,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [left right] (set (mapcat (fn lop [x y] (if (empty? y) [] (cons [x (first y)] (lop x (rest y))))) left (repeat (count left) right))))","problem":90,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":90,"code":"#(set\n  (for [x %1 y %2]\n    [x y]))\n\n\n#_(fn [x y]\n  (set\n   (apply concat\n          (map (fn [e]\n                 (map #(vector % e)\n                      x))\n               y))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [a b] (set (apply concat (map (fn [x] (map (fn [y] [x y]) b)) a))))","problem":90,"user":"513bb7a6e4b04402f587b77d"},{"code":"(fn [s1 s2]\r\n  (into #{} (for [a s1 b s2] [a b])))","problem":90,"user":"4db599e6535d87e67b28fe11"},{"problem":90,"code":"(fn cart [s1 s2]\n  (set (map #(vector %1 %2) (mapcat #(repeat (count s2) %) s1) (cycle s2))\n  ))","user":"5245e320e4b09dbe66b56177"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat identity\n               (map (fn [x] (map (fn [y] [x y])\n                                          b))\n                             a))))","user":"54d000c7e4b018d918be98d7"},{"problem":90,"code":"(fn[xs ys]\n  (set (mapcat (fn[x]\n            \t(map\n                 (fn[y] [x y])\n                 ys))\n                xs)))","user":"55101237e4b06e50f9beb181"},{"problem":90,"code":"(fn [set-a set-b]\n          (loop [seta set-a setb set-b res #{}]\n            (if (empty? seta)\n              res\n              (if (empty? setb)\n                (recur (rest seta) set-b res)\n                (recur seta (rest setb) (conj res [(first seta) (first setb)]))))))","user":"5508102ee4b021ccfedb96b0"},{"problem":90,"code":"(fn cart [s1 s2]\n  (set (mapcat (fn [it]\n                 (map #(identity [it %]) s2))\n               s1)))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn [a b]\n  (set (for [a a\n        b b]\n    (vector a b))))","problem":90,"user":"4feff3b6e4b0678c553fc31e"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b][x y])))","user":"57fc08d8e4b0d3187e900988"},{"problem":90,"code":"(fn cart\n  [s1 s2]\n  (reduce\n   (fn [acc e]\n     (reduce\n      (fn [acc2 e2] (conj acc2 [e e2]))\n      acc\n      s2))\n   #{}\n   s1))","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn [s1 s2] (into #{} (reduce #(concat % (map (fn [a] (vector a %2)) s1)) #{} s2)))","problem":90,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":90,"code":"(fn [s1 s2]\n\t(into #{}\n          (for [x s1\n        y s2]\n      [x y])))","user":"5ce6f93be4b0a17bb84e2b99"},{"code":"(fn [s t]\r\n  (set (for [x s y t] [x y])))","problem":90,"user":"5050b107e4b063148f524126"},{"problem":90,"code":"(fn [set1 set2]\n  (set (loop [items1 set1 result '()]\n    (if (empty? items1)\n      result\n      (recur (rest items1)\n             (loop [items2 set2 intermediate-result result]\n               (if (empty? items2)\n                 intermediate-result\n                 (recur (rest items2) (conj intermediate-result [(first items1) (first items2)])))))))))","user":"5989ee61e4b021a7a535fed7"},{"problem":90,"code":"(fn myCartesian [set1 set2]\n  (set\n    (for [x set1\n          y set2]\n        [x y]))\n)","user":"59e0111ae4b08badc2a0c4e4"},{"problem":90,"code":"#(set (for [x %1\n           y %2]\n          [x y]))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":90,"code":"(fn cartesian-prod [s1 s2]\n  (reduce (fn [s e1] \n            (clojure.set/union s (set (map #(vector e1 %) s2))))\n          #{}\n          s1))","user":"574f1c24e4b02ea114799255"},{"code":"(fn [x y]\n  (set (partition 2 (mapcat #(interleave (repeat %) y) x))))","problem":90,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn [a b]\n   (set\n    (partition 2\n               (flatten\n                (map\n                 #(interleave (take (count b) (repeat %)) b)\n                 a)))))","problem":90,"user":"52090567e4b0e152394d76ed"},{"code":"(fn cartesian-product[setx sety](set (mapcat (fn[x](map #(vec (list x %)) sety)) setx)))","problem":90,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":90,"code":"(fn [as bs]\n    (set (mapcat (fn [a] (map (fn [b] [a b]) bs)) as)))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [s1 s2]\n  \t(into #{} (for [x1 s1, x2 s2] [x1 x2]))\n)","problem":90,"user":"5081566ce4b0946d0443855b"},{"code":"(fn [s0 s1]\n  (apply hash-set\n      (mapcat (fn l[s] (map #(vector s %) s1)) s0)))","problem":90,"user":"4df9c598535d04ed9115e77a"},{"code":"(fn [x y] (set (reduce #(concat %1 (map (fn [z] (list %2 z)) y)) [] x)))","problem":90,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn [a b] (set (for [y b x a] [x y])))","problem":90,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [x y](set (for [a x b y] [a b])))","problem":90,"user":"5143952fe4b0b4fb4ace5f38"},{"code":"#(set (for [a % \n            b %2] \n        [a b]))","problem":90,"user":"51352899e4b082aeb3a3f03b"},{"code":"(fn [x y] (into #{} (mapcat #(map vector (repeat %1) y) x)))","problem":90,"user":"5183f5d7e4b02826a645f393"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [i s1\n        j s2]\n    [i j])))","user":"5033ed65e4b062bc5d7ae15a"},{"code":"(fn [xs ys]\n  ((fn [xs ys acc]\n     (if (empty? xs) acc\n       (recur (rest xs) ys (into acc (map #(vector (first xs) %) ys)))))\n     xs ys #{}))","problem":90,"user":"508157b2e4b0946d0443855c"},{"code":"(fn [a b]\n  (set (for [x a y b] [x y])))","problem":90,"user":"4e513ecf535dc968683fc4f6"},{"problem":90,"code":"(fn [a b] (set (for [x a y b][x y])))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [a b]\n        (set (for [a-val a b-val b]\n          [a-val b-val])))","problem":90,"user":"52c200cbe4b07a9af5792372"},{"problem":90,"code":"#(set (for [x (seq %1), y (seq %2)] [x y]))","user":"55ac07afe4b03311e7b7328f"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1\n        \t\ty s2]\n              [x y])))","user":"5ebb4751e4b00a66d4a95262"},{"code":"(fn [s1 s2] \n  (set \n    (partition 2 \n      (flatten \n        (map #(conj (interpose % s2) %) s1)))))","problem":90,"user":"4ec12516535dfed6da9c6da7"},{"problem":90,"code":"(fn algo\n  \n  [set1 set2]\n  (->>\n    (for [x (vec set1) y (vec set2)] [x y])\n    (sort)\n    (sort-by last)\n    (set) \n    )\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":90,"code":"(fn [x y]\n  (reduce #(into %1 (map (fn [z] \n                           (vector %2 z)) \n                         y)) \n          #{} x))","user":"574b4f3ee4b02ea114799207"},{"code":"(fn [xs ys] (set (for [x xs, y ys] [x y])))","problem":90,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn [xs ys]\n  (set (apply concat (map #(map (fn [y] (conj [%] y)) ys) xs))))","problem":90,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn cartesian [s1 s2]\n    (if (seq s1)\n        (set (concat (map #(vector (first s1) %) s2)\n             (cartesian (rest s1) s2)))\n        nil))","problem":90,"user":"4e7263a1535d5021c1a8965f"},{"problem":90,"code":"#(set (for [x %1\n           y %2] [x y]))","user":"5bbd1876e4b07a9b28b0ff96"},{"problem":90,"code":"#(set (for [v %1 z %2] [v z]))","user":"564b1ff8e4b0284900eef663"},{"problem":90,"code":"(fn [a b] (set (for [x (seq a) y (seq b)] [x y])))","user":"5628f33ce4b00e49c7cb47f3"},{"code":"#(set (for [v % vv %2] [v vv]))","problem":90,"user":"5208a3a2e4b0301979a6c235"},{"code":"(fn [set1 set2]\n    (set\n           (for [s1 set1\n                 s2 set2]\n            [s1 s2])))","problem":90,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":90,"code":"(fn cross [x,y] \n  (if (empty? x)\n    #{}\n    (clojure.set/union \n     (set (map #(conj (vector (first x)) %) y)) \n     (cross (rest x) y)\n     )\n    )\n  )","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [coll1  coll2 ] (loop [a coll1 c #{}] (if (empty? a) c (recur (rest a) (reduce #(conj %1 [(first a) %2]) c coll2)))))","problem":90,"user":"4ea11921535d7eef308072af"},{"code":"(fn [set1 set2]\n  (set (mapcat\n        (fn [x] (map #(vec [x %]) set2))\n        set1)))","problem":90,"user":"5269c150e4b03e8d9a4a71f8"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n        (for [x set1\n              y set2]\n          [x y])))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [a b] \n  (set \n   (for [ia a, ib b] \n     [ia, ib])))","problem":90,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":90,"code":"(fn [a b]\n  (set \n   (mapcat \n    (fn [c] (map #(vector c %) b)) \n     a)))","user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":90,"code":"(fn cartesian [s1 s2]\n\t(set (mapcat (fn [p1] (map (fn [p2] (vector p1 p2)) s2)) s1)))","user":"573f3ccfe4b05c31a32c083f"},{"problem":90,"code":"(fn [xs ys]\n    (into (empty xs) (for [x xs y ys] [x y])))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":90,"code":"; (reduce into #{} (map  #(map (fn [x] (vector % x)) #{1 2}) #{1 2 3}))\n \n(fn [a b]\n  (set (for [x a y b]\n         [x y])))","user":"582c526ae4b051871117bf88"},{"problem":90,"code":"(fn cartp [a b] (set (reduce (fn [r t] (clojure.set/union r ((fn cart [x y] (map #(vector x %) y)) t b))) #{} a)))","user":"55f2b42be4b06e875b46ce4a"},{"problem":90,"code":"(fn [f s]\n   (into #{}\n         (for [x f y s]\n           [x y])))","user":"5452a300e4b0e397800069c7"},{"code":"#(into #{} (for [a %1, b %2] [a b]))","problem":90,"user":"52046600e4b0c283853240c5"},{"problem":90,"code":"#(set (for [a %1 b %2] (list a b)))","user":"557954aae4b05c286339e092"},{"problem":90,"code":"(fn [x y]\n     (into #{}\n    (map #(list %1 %2)\n   (vec (apply concat (repeat (count y) x)))\n   (vec (apply interleave (repeat (count x) y)))\n   \n         )))","user":"57af6cf4e4b0fbc9809a2735"},{"problem":90,"code":"(fn [sa sb]\n  (into #{}\n        (for [a sa\n              b sb]\n          [a b])))","user":"559057c4e4b027778923766e"},{"code":"#(into #{} (mapcat (fn [x] (map (fn [y] (vector x y)) %2)) %))","problem":90,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":90,"code":"(fn [sa sb] \n    (set \n    \n    (mapcat  \n    \n    (fn [a]    (map #(vector a %) sb )     )  \n    \n    sa) \n    \n    )\n    )","user":"5735ac67e4b0cd1946bd102b"},{"problem":90,"code":"#(set \n  (for [n % x %2] [n x]))","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn cartesian-product [s1 s2]\n  (set\n   (for [x s1\n         y s2]\n     [x y])))","problem":90,"user":"4db8d37d535d1e037afb219c"},{"problem":90,"code":"(fn [x y] \n  (set (for [a (vec x) b (vec y)]\n    [a b])))","user":"570306cae4b08d47c97781ec"},{"code":"(fn cartesian-product [s1 s2]\n  (into #{} (for [el1 s1 el2 s2] [el1 el2])))","problem":90,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [coll1 coll2]\n  (into #{} (for [x coll1 y coll2]\n    [x y])))","problem":90,"user":"50481532e4b0ec70b3ef8d96"},{"problem":90,"code":"#(set \n  (for [x %1 y %2]\n   [x y]))","user":"57fa7c93e4b0d3187e900963"},{"problem":90,"code":"#(into #{} (for [xs %1 ys %2] [xs ys]))","user":"511688d5e4b0b3e208dba05a"},{"code":"(fn [s1 s2]\n   (apply sorted-set\n         (for [s s1\n               l s2]\n           [s l])))","problem":90,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":90,"code":"(fn [xa xb] (set (for [a xa b xb] [a b])))","user":"5b59c513e4b02d533a91bd81"},{"code":"(fn [cx cy]\n  (set (partition 2 (mapcat #(interleave (repeat %) cy) cx))))","problem":90,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":90,"code":"(fn cartesian-product [c1 c2]\n  (set (for [x c1\n             y c2]\n         [x y])))","user":"57dda21be4b0bd073c202445"},{"problem":90,"code":"(fn cartesian\n  [s1 s2]\n  (->>\n    (mapcat #(interleave (repeat %) s2) s1)\n    (partition 2)\n    set))","user":"57f81534e4b0d3187e900915"},{"code":"(fn [a b] (set (for [e1 a, e2 b] [e1 e2])))","problem":90,"user":"4dadc27ec9a9d6ed3c99dc57"},{"problem":90,"code":"(fn [l r] \n  (reduce (fn [a i] (reduce #(conj % (vector i %2)) a r)) #{} l))","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn [x y]\n  (into #{}\n    (mapcat\n      (fn [a] (map (fn [b] [a b]) y))\n      x)))","problem":90,"user":"5097b556e4b00ad8bab4e970"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [x (into () s1)\n                            \t\t\t\t   y (into () s2)]\n                        \t\t\t(vector x y))))","user":"5d321852e4b01671435dbce8"},{"problem":90,"code":"(fn [a b]\n    (apply clojure.set/union (map (fn[c] (set (map #(vector c %) b))) a))\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":90,"code":"(fn kart [s1 s2]\n  (if (empty? s1) #{}\n      (set (concat (kart (rest s1) s2) (map #(conj [(first s1 )] %) s2))\n              )\n    ))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":90,"code":"(fn productX [x y] (set  (mapcat (fn[a] ((fn pairX [x a](map (fn[b] [a b]) x)) y a)) x)))","user":"568820e8e4b0dcc4269f4067"},{"problem":90,"code":";(fn [a b] ( set ( for [x a y b] [x y])))\n#( set ( for [x %1 y %2] [x y]) )","user":"555093b2e4b00713264bd9ab"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [x set1 y set2] (vector x y))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn[x y] (set (for [n x, m y] [n m])))","problem":90,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":90,"code":"(fn [x y]\n  (loop [ls1 x\n         out1 #{}]\n    (if (empty? ls1)\n      out1\n      (recur (rest ls1) \n        (loop [ls2 y\n               out2 out1]\n          (if (empty? ls2)\n            out2\n            (recur (rest ls2) (conj out2 [(first ls1) (first ls2)]))))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [s1 s2]\n  (into #{} (mapcat (fn [e1] (map #(vector e1 %) s2)) s1)))","problem":90,"user":"4e7db3b4535db169f9c796e1"},{"code":"(fn [set1 set2]\n  (set (for [x,set1 y,set2]\n\t   [x y])))","problem":90,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":90,"code":"(fn cartesian-product [set-a set-b]\n  (set\n   (for [x set-a y set-b]\n     [x y])))","user":"5a06c154e4b01bb0ae8afdce"},{"code":"(fn [s1 s2] (set (for [a s1 b s2] [a b])))","problem":90,"user":"4f46bc41e4b0d56e7bb92ba5"},{"code":"(fn [A B]\r\n  (set (for [a A, b B]\r\n    [a b])))","problem":90,"user":"4db0114d838c48654951d9b8"},{"code":"(fn [coll1 coll2] (set (mapcat (fn [x] (map (fn [y] [x y]) coll2)) coll1)))","problem":90,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"#(letfn [(worker-child [x1 l2 n]\n            (if (empty? l2)\n                n\n                (recur x1 (rest l2)\n                      (conj n [x1 (first l2)]))))\n          (worker [l1 l2 n]\n            (if (empty? l1)\n                n\n                (recur (rest l1)\n                        l2\n                        (worker-child (first l1) l2 n))))]\n  (worker %1 %2 #{}))","problem":90,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":90,"code":"#(set (for [x %1\n      y %2]\n  [x y]))","user":"5bf0aefde4b0a6d31fed215a"},{"problem":90,"code":"#(set (for [x %1 y %2]\n           [x y]))","user":"4e38f245535deb9a81d77f3e"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [s s1 res #{}]\n    (if (empty? s)\n      res\n      (recur (rest s)\n             (clojure.set/union res\n                                (set (map (fn [x] [(first s) x]) s2)))))))","user":"53322cece4b019098a6f8b73"},{"code":"(fn [x y]\n  (set (mapcat (fn [z] (map (fn [w] [z w]) y)) x)))","problem":90,"user":"4ea7999e535d7eef308072ee"},{"problem":90,"code":"(fn [ns s]\n  (set (mapcat (fn [n]\n             (map #(conj [n] %) s)) ns)))","user":"51a4d802e4b0def3c5c5869a"},{"problem":90,"code":"(fn prod\n  [a b]\n  (set (for [i a j b] [i j]))\n  )","user":"5bbbcf9ee4b0a20761a23614"},{"problem":90,"code":"(fn cartesian [coll1 coll2]\n  (set (for [x coll1 y coll2] (list x y))))","user":"53dc94c8e4b094d41abdfefc"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (set (for [x1 s1\n             x2 s2]\n         [x1 x2])))","user":"551bdefde4b07993ea3788d7"},{"problem":90,"code":"#(loop [f (first %) r (rest %) g %2 res #{}]\r\n       (if (nil? f)\r\n         res\r\n         (recur (first r) (rest r) g (apply conj res (partition 2 (interleave (repeat (count g) f) g))))))","user":"559a8816e4b066d22e731f41"},{"problem":90,"code":"#(into #{} (for [x % y%2] [x y]))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"#(set (for [x %1, y %2] [x y]))","problem":90,"user":"4dbde27c535d020aff1edf50"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n        (mapcat (fn [x] (map #(vector x %) b)) a)))","user":"5ab564f8e4b073f177442639"},{"code":"(fn[t1 t2] (into #{} (for [x t2 y t1] (vector y x))))","problem":90,"user":"4ea85846535d7eef308072f9"},{"code":"(fn [s0 s1] (set (for [x s0 y s1] [x y])))","problem":90,"user":"531488f3e4b08068f379ed16"},{"problem":90,"code":"(fn [x y] (reduce clojure.set/union (map (fn [xx] (reduce clojure.set/union (map (fn [yy] #{[xx yy]}) y))) x)))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [set1 set2]\n  (set \n   (for [a set1\n        b set2]\n        (vector a b))))","problem":90,"user":"4f80db02e4b033992c121bf9"},{"problem":90,"code":"(fn cartesian-product ([set1 set2] (cartesian-product set1 set2 #{} ))\n  ([set1 set2 xs]\n    (loop [set1 set1 \n           xs xs]\n      (if (seq set1)\n\t      (let [f1 (first set1)\n             xs (loop [set2 set2\n\t                      xs xs]\n\t                 (if (seq set2)\n\t                   (let [f2 (first set2)]\n\t                     (recur (rest set2) (into xs #{[f1 f2]})))\n\t                   xs))]\n         (recur (rest set1) xs))\n       xs))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [s s1, t s2]\n    [s t])))","user":"56f53962e4b046a417f9206c"},{"problem":90,"code":"(fn [xs ys] (set\n  (for [x xs\n        y ys]\n    (vector x y))))","user":"56b86e64e4b0f26550335924"},{"problem":90,"code":"(fn [first-coll second-coll]\n  (set (for [x first-coll y second-coll] [x y])))","user":"532902f8e4b09d4e7a9b550e"},{"problem":90,"code":"(fn [seq1 seq2]\n  (into #{} (for [x seq1 y seq2]\n    [x y])))","user":"57061d20e4b0b0fb43fd0679"},{"code":"(fn [set1 set2]\n  (set (for [val1 set1 val2 set2] [val1 val2])))","problem":90,"user":"4e7c8fd1535db169f9c796be"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1\n                  y s2]\n              [x y])))","user":"56629a7de4b0e91d5f5c5649"},{"problem":90,"code":"(fn [coll1 coll2]\n  \t(loop [[elem1 & coll1] (apply list coll1) prod #{}]\n      (if (nil? elem1)\n        prod\n        (recur coll1 (into prod (map #(vector elem1 %) coll2)))\n      )\n    )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":90,"code":"#(into #{} (for [a %1\n                     b %2]\n                 [a b]))","user":"52846deee4b0239c8a67adcf"},{"problem":90,"code":"(fn [s1 s2] (reduce (fn [accum c1]\n                      (reduce (fn [accum c2]\n                                (conj accum [c1 c2]))\n                                accum\n                                s2))\n                    #{}\n                    s1))","user":"597f8984e4b0dbe32238d0bf"},{"problem":90,"code":";;#(set (for [a %1 b %2] [a b]))\n#(into #{} (for [a  %1 b %2] [a b]))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n    (for [s1 s1 s2 s2]\n         [s1 s2])))","user":"5484143de4b0e286459a1197"},{"code":"(fn cartesian-prod [s1 s2]\n  (set (for [a s1 b s2] [a b])))","problem":90,"user":"4e95a440535dbda64a6f6b37"},{"code":"#(set (for [x %1\n        y %2]\n    [x y]))","problem":90,"user":"51f2a491e4b0210f90e74553"},{"problem":90,"code":"(fn [l1 l2]\n  (into #{}(apply concat (map (fn [a]\n                       (map (fn [b] [a b]) l2)) l1))))","user":"51b76227e4b0d906fcd71d35"},{"problem":90,"code":"(comp #(reduce clojure.set/union (map set %))\n#(map (fn [x]\n        (map (fn [y] [x y]) %2)) \n      %1))","user":"5097ea89e4b087ccf61a7af4"},{"problem":90,"code":"#( set (for [ x %1 y %2 ] [ x y ]))","user":"53d63e6ce4b0e771c3025454"},{"problem":90,"code":"#(set (for [a %\n           b %2]\n    [a b]))","user":"58391c94e4b089d5ab817d35"},{"problem":90,"code":"#(set (for [x %1\n             y %2]\n         [x y]))","user":"5a91988ae4b002d099cae6f9"},{"problem":90,"code":"(fn cartesian-product \n  [seta setb]\n  (set (for [x seta y setb] [x y])))","user":"59e68254e4b0249b728206fc"},{"problem":90,"code":"(fn [s1 s2] (apply hash-set (apply concat (map (fn [v1] (map (fn [v2] [v1 v2]) s2)) s1))))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"#(set \n  (for [x %1 y %2]\n    [x y]))","problem":90,"user":"50a7b76de4b090657f4a5cdc"},{"problem":90,"code":"#(set (loop [s %2 res []] \n       (if (empty? s) \n           res\n           (recur (rest s) \n                  (concat res (map vector % (repeat (first (into [] s)))))))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":90,"code":"(fn [set1 set2] \n  (set\n   (for [s1 set1 s2 set2] [s1 s2])))","user":"5eeeb000e4b07c55ae4a0515"},{"problem":90,"code":"#(set (for [n %1, m %2] (vector n m)))","user":"576a8d02e4b0a07e8fc18117"},{"problem":90,"code":"(fn [c1 c2]\n   (set (for [x c1 y c2] [x y])))","user":"51bd255ce4b0df1216cefd94"},{"problem":90,"code":"(fn [as bs] (set (mapcat (fn [x] (map #(vector x %) bs)) as)))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":90,"code":"(fn [xs ys]\n       (set (mapcat \n        (fn [x] \n          (map #(vector x %) ys))\n        xs)))","user":"504f5804e4b0a02f9cffde72"},{"problem":90,"code":"(fn f [xs ys] (set (mapcat #(map (partial vector %1) ys) xs)))","user":"55645592e4b0c656e3ff1802"},{"problem":90,"code":"(fn cartesian-product [x y]\n  (into #{} (for [a x b y] [a b])))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":90,"code":"(fn [x y] (set (for [first x last y] (vector first last))))","user":"57a5f1e3e4b0a96607956200"},{"code":"#(set\n   (for [x %\n         y %2]\n         [x y]))","problem":90,"user":"4f410b63e4b0e243712b1fc5"},{"problem":90,"code":"#(set (for [c1 (seq %1) c2 (seq %2)] (vector c1 c2)))","user":"533a399de4b0e30313ee6cb9"},{"code":"(fn cart [first-set second-set] \n  (set (mapcat (fn [element] (map #(conj [%] element) first-set)) second-set)))","problem":90,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce into #{}\n  \t(map (fn [s] (map #(list s %) s2)) s1)))","user":"574ff497e4b02ea114799266"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set (for [x s1 y s2] (vector x y))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn cartesian-product [& sets] (set (if (empty? sets) [[]] (mapcat #(map % (apply cartesian-product (rest sets))) (map #(partial cons %) (first sets))))))","problem":90,"user":"52f10094e4b05e3f0be25ee8"},{"problem":90,"code":"(fn [a b]\n  (set\n   (for [x (vec a)\n         y (vec b)]\n     [x y])))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"(fn [x y]\n  (set (for [i x j y] [i j])))","problem":90,"user":"5009fd0ae4b03d00572d2d70"},{"problem":90,"code":"(fn [s1 s2]\n  (set (apply concat (map (fn [el] (map #(identity [% el]) s1)) s2)))\n  )","user":"52503747e4b0541d1855b828"},{"problem":90,"code":"#(set \n  (apply concat \n         (for [x %1]\n           (for [y %2]\n               [x y]))))","user":"5712854ce4b07c98581c3a89"},{"problem":90,"code":"#(into (empty %1) (for [x %1 y %2] [x y]))","user":"53e73fe3e4b036ad0777e478"},{"problem":90,"code":"#(set (for [a (vec %1) b (vec %2) ] [a b] ))","user":"5d965c73e4b0d3f9b434ad33"},{"problem":90,"code":"#(set (for [u %1\n            v %2]\n        [u v]))","user":"55f2e47de4b06e875b46ce4d"},{"problem":90,"code":"#(into #{}\n  (for [a %1 b %2]\n   [a b]))","user":"56bca51ae4b0f26550335963"},{"code":"(fn [s1 s2] (into #{} (for [x1 s1 x2 s2] [x1 x2])))","problem":90,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":90,"code":"(fn product [& sets] \n  (set (if (empty? sets)\n      '(())\n      (for [f (first sets) r (apply product (rest sets))]\n        (cons f r)))))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (fn [y] [y x]) %)) %2))","user":"52a267c6e4b04e0c58e87bef"},{"problem":90,"code":"(fn Cartesian-Product\n  [a b]\n  (apply sorted-set (for [i a\n                          j b] [i j])))","user":"59e14ee3e4b08badc2a0c50c"},{"code":"(fn f [set1 set2]\n  (set (for [x (seq set1) y (seq set2)] [x y])))","problem":90,"user":"52bf936ee4b07a9af579233b"},{"problem":90,"code":"(fn[x y] (set (for[i x \n               j y]\n            [i j])))","user":"5a6b15e9e4b0512ff01cda32"},{"code":"(fn z [a b]\n  (set (mapcat\n        (fn [x] (map #(vector x %) b)) \n        a)\n       )\n  )","problem":90,"user":"52bb27fee4b07a9af57922df"},{"problem":90,"code":"(fn [x y] (set (for [a x b y] [a b]) ))","user":"57211a02e4b0c5bde472c0a9"},{"problem":90,"code":"(fn number90 [xs ys]\n  (set\n    (for [x xs\n          y ys]\n      [x y])))","user":"54074fc5e4b0addc1aec66b6"},{"problem":90,"code":"#(set (for [x %1\n          \ty %2]\n       [x y]))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [s1 s2]\n  (set \n   (for [x s1 y s2]\n     [x y])))","problem":90,"user":"4e6e3aac535d5021c1a89603"},{"code":"#(set (apply concat ((fn [a b] (for [f a] (for [s b] [f s]))) %1 %2)))","problem":90,"user":"51f28a64e4b0210f90e7454e"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n    (for [x a\n          y b]\n      [x y])))","user":"54012b48e4b0de5c41848620"},{"problem":90,"code":"(fn [s1 s2] \n    (set (for [i1 s1 i2 s2]\n       [i1 i2])))","user":"54fdaeace4b07d26eda61d39"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1 y s2] (vector x y))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":90,"code":"(fn [s1 s2]\n         (into #{} (for [i s1 j s2]\n                     [i j])))","user":"5beadeb5e4b0f319e2d7ec88"},{"code":"(fn cp [a b] (set (for [x a y b] [x y])))","problem":90,"user":"4e4be570535dc968683fc4d8"},{"problem":90,"code":"(fn my-cart-prod [s1 s2]\n  (set (for [v1 s1\n             v2 s2]\n         [v1 v2])))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n        (for [x a y b] (vector x y))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":90,"code":"(fn [a b] \n   (into #{} (for [a a b b] [a b])))","user":"569429c7e4b0dcc4269f411a"},{"problem":90,"code":"(fn [a b]\n  (set\n   (for [i a\n         j b]\n     [i j])))","user":"5918db70e4b09b4ee5954bbb"},{"code":"(fn [s1 s2]\n  (set (reduce #(for [x %1 y %2] [x y])  [s1 s2])))","problem":90,"user":"4ebc829e535dfed6da9c6d86"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs y ys] [x y]))\n)","user":"5b58b271e4b02d533a91bd6e"},{"problem":90,"code":"(fn [s1 s2]\n\t(let [ x (map (fn [x]\n            (map (fn [y] [x y]) s2)            \n          )\n          s1) ]\n    \t(reduce #(apply conj % %2) '#{} x)\n  \t)\n)","user":"5da20e73e4b000c986472be1"},{"problem":90,"code":"(fn [set1 set2]\n  (set(for [x1 set1\n        x2 set2]\n    [x1 x2])))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":90,"code":"(fn cp [s1 s2]\n  (apply clojure.set/union\n    (for [ei s1]\n      (set \n        (for [ej s2]\n          (vector ei ej))))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":90,"code":"(fn [a b] (set (mapcat (fn [x] (map #(vec (list % x)) a)) b)))","user":"53fcd574e4b0de5c418485d9"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b] (vector x y))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":90,"code":"#(set \n  (for [x %1 y %2]\n  \t[x y]))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":90,"code":"(fn sol [a b] (set (for [x a y b] [x y])))","user":"54857657e4b0e286459a11ac"},{"code":"(fn [x y] (set (for [x1 x y1 y] [x1 y1])))","problem":90,"user":"4f92de49e4b0dcca54ed6cb2"},{"problem":90,"code":"(fn [a b] (set(for [x (vec a) y (vec b)] [x y])))","user":"5c723f4be4b0fca0c16227a0"},{"problem":90,"code":"(fn [set1 set2]\n  (apply sorted-set (for [e1 set1\n                          e2 set2]\n                      [e1 e2])))","user":"5c718e6ce4b0fca0c1622796"},{"problem":90,"code":"(fn [a b] (set (for [x a\n                     y b] \n                 [x y])))","user":"579aff09e4b05b1deef9ade7"},{"problem":90,"code":"(fn [set1 set2] (set (reduce concat (map (fn [item] (reduce (fn[x y] (conj x [item y])) [] set2)) set1))))","user":"571172ece4b09c608db70446"},{"problem":90,"code":"(fn cart\n  [aset bset]\n  (set (for [a aset\n             b bset]\n         [a b])))","user":"5d110abee4b02c15ef021983"},{"problem":90,"code":"(fn [x y] (set (mapcat (fn [xi] (mapcat (fn [yi] [[xi yi]] ) y)) x)))","user":"5680fff3e4b0966858e4d8f6"},{"problem":90,"code":"(fn [a b]\n    (into #{} (for [x a y b] [x y])))","user":"5ab07d63e4b073f1774425af"},{"problem":90,"code":"(fn [s1 s2]\n  (->> (map #(for [symbol s2] [% symbol]) s1)\n       (apply concat)\n       (set)))","user":"5e218bb7e4b05b4b01516123"},{"problem":90,"code":"(fn [a b]\n  (into #{} (\n    for [x1 a x2 b] [x1 x2]\n  ))  \n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":90,"code":"(fn [m n] (set (mapcat #(map (fn [x] (conj (vector x) %)) m) n)))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":90,"code":"(fn cartesian-product [set1 set2]\n  (into #{} (for [x set1 y set2] [x y])))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":90,"code":"#(set (for [face %1 suit %2] [face suit]))","user":"59ac0965e4b08cbb53654da6"},{"problem":90,"code":"(fn \r\n  [s1 s2]\r\n  (set (for [e1 s1 e2 s2] [e1 e2])))","user":"56f514cee4b046a417f92068"},{"code":"(fn ! [x y] (set (reduce into (map (fn a [i] (map #(vector % i) x)) y))))","problem":90,"user":"4e8a460e535d65386fec2109"},{"problem":90,"code":"(fn [coll1 coll2]\n    (into #{} (mapcat (fn [n] (map #(vector n %) coll2)) coll1)))","user":"54094824e4b0addc1aec66da"},{"code":"(fn [s1 s2] (set (for [i1 s1 i2 s2] [i1 i2])))","problem":90,"user":"4f03ebf7535dcb61093f6b7f"},{"code":"(fn [xs ys] \n  (set (mapcat #(map (partial vector %)  ys) xs)))","problem":90,"user":"4e593dac535d8a8b8723a29c"},{"problem":90,"code":"(fn cartesian\n  [a b]\n  (set\n    (for [x a\n          y b]\n      [x y])))","user":"5f29837ee4b033932238a64f"},{"problem":90,"code":"(fn sk-loop [l1 l2]\n  (set (for [x l1\n         y l2]\n     [x y])))","user":"5884f377e4b0f1effa3b76a8"},{"problem":90,"code":"(fn cartesian-product [a b]\n  (set (for [i a\n             j b]\n         [i j])))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn my-cartesian [coll1 coll2]\n  (set (for [item1 coll1\n       item2 coll2]\n\t [item1 item2])))","problem":90,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"(fn [s1 s2] (into #{} (mapcat (fn [el] (map #(vector % el) s1)) s2)))","problem":90,"user":"4e79ff2a535db169f9c796a9"},{"code":"(fn cartesian-product [a b]\n  (set (for [x a\n             y b]\n         [x y])))","problem":90,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":90,"code":"(fn q90 [s1 s2]\n  (into #{} (for [x s1 y s2] [x y])))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":90,"code":"(fn [xs ys]\n  (loop [xs xs ys ys acc #{}]\n    (if (empty? xs) \n      acc\n      (recur (rest xs) ys (into acc (map #(vector (first xs) %) ys))))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":90,"code":"(fn cartesian-product [x y]\n    (set (map vec (partition 2 (flatten (map\n      (fn [el] (interleave x (take (count x) (cycle (list el)))))\n      y))))))","user":"5d078e2de4b0cc9c915881fa"},{"problem":90,"code":"(fn [x y](into #{} (mapcat (fn[a](map #(vector a %) y)) x)))","user":"564348e1e4b08d4f616f5f26"},{"code":"#(set\n     (for [i % j %2]\n       (vector i j)))","problem":90,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn cart [a b]\n  (set\n    (for [x a y b] [x y])))","problem":90,"user":"4f559d2ce4b0a7574ea71808"},{"problem":90,"code":"(fn \n  [a b]\n  (set (for [x a y b]\n         [x y])\n       )\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":90,"code":"(fn [x y] (into #{} (for [xx x yy y] [xx yy])))","user":"5ccb3792e4b0ccb061962882"},{"problem":90,"code":"(fn [c1 c2]\n    (into #{}\n          (apply concat\n                 (for [x c1]\n                   (for [y c2]\n                     [x y])))))","user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn cross-product [lset rset]\n  (reduce\n    (fn r [s n]\n      (apply conj s (reduce #(conj %1 [%2 n]) #{} lset)))\n    #{} \n    rset))","problem":90,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [x y]\n  (apply hash-set (for [xmem x ymem y] [xmem ymem])))","problem":90,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn f [x y]\n  (set (for [i x\n             j y]\n         [i j])))","problem":90,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn [a b]\n  (set\n    (for [x a\n          y b]\n      [x y])))","problem":90,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn [a b] (set (for [ax a bx b]  [ax bx])))","problem":90,"user":"4f63777be4b0defedf855fe4"},{"problem":90,"code":"(fn [xs ys] (into #{}\n  (for [x xs y ys] [x y])))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":90,"code":"(fn [x y]\n  (->\n  (for [a (seq x)\n        b (seq y)]\n    [a b])\n  (set)))","user":"55912230e4b027778923767a"},{"problem":90,"code":"(fn [x y] (let [x (into [] x) y (into [] y)] \n           (letfn [(iterate-once [x y] (set (map #(vector %1 %2) (repeat x) y)))\n                   (iterate-all [x y idx] (iterate-once (nth x idx) y))\n                   (add-to-set [x y acc idx] (union acc (iterate-all x y idx)))\n                   (union [x y] (clojure.set/union x y))]\n             (loop [idx 0\n                    acc #{}] \n               (if (>= idx (count x))\n                 acc\n                 (recur (inc idx) (add-to-set x y acc idx)))))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [a b]\n    (set (reduce concat (map \n        (fn [x]\n            (map vector (take (count b) (repeat x)) b)\n        ) \n        a \n    )))   \n)","problem":90,"user":"4e78dc98535db95036265724"},{"code":"(fn [x y]\n  (set (mapcat \n   (fn [elem1]\n     (map\n      (fn [elem2]\n        (vector elem1 elem2)\n        )\n      y\n      )\n     \n     )\n   x\n   \n   ))\n  )","problem":90,"user":"4edf95a8535d10e5ff6f5342"},{"code":"(fn [a b] (set (mapcat #(map vector a (repeat %)) b)))","problem":90,"user":"4e5411e8535d8a8b8723a279"},{"problem":90,"code":"(fn [a b]\n              (set (for [x a\n                         y b]\n                     [x y])))","user":"5f5358b7e4b0a0bc16850a77"},{"code":"(fn [as bs]\n  (set (for [x as, y bs] [x y])))","problem":90,"user":"506ab9bae4b05d3b7762c74c"},{"code":"#(into (empty %1) (for [a %2 b %1] [b a]))","problem":90,"user":"52fb903ee4b047fd5583700b"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set (mapcat (fn [v] (map #(vector % v) s1)) s2)))","user":"524a9556e4b05ef8e38e64b1"},{"code":"#(set (for [a %1\n            b %2]\n        [a b]))","problem":90,"user":"4daef21cedd6309eace4d169"},{"problem":90,"code":"(fn fx [s1 s2] (let [xsprod (fn [x s] (into #{} (map (fn [d] (vec [x d])) s)))]\n            (let [fxr (fn [res ss1 ss2] (if (first ss1) \n                                          (do (into res (xsprod (first ss1) ss2)) \n                                            (recur (into res (xsprod (first ss1) ss2)) (rest ss1) s2))\n                                                       res))]\n                        (fxr #{} s1 s2) )))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn x [set1 set2]\n  (set (mapcat (fn [s1] (map (fn [s2] [s1 s2]) set2)) set1)))","problem":90,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [a b]\n  (into #{} (for [x a\n                  y b]\n              [x y])))","problem":90,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn [s1 s2](set (for [x s1 y s2] [x y])))","problem":90,"user":"4fb86dc9e4b081705acca2d8"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set(for[ e1 (vec s1) e2 (vec s2)] [e1 e2]))\n            )","user":"55a65872e4b09e57187da299"},{"problem":90,"code":"(fn [s1 s2]\n    (into #{} (for [x s1 y s2] [x y])))","user":"513e8141e4b02b2a3d8235c1"},{"problem":90,"code":"(fn [xs ys]  \n     (into #{}\n       (for [x xs\n             y ys]\n         [x y])))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":90,"code":"(fn cp\n  [s1 s2]\n  (loop [[h1 & t1] (seq s1) [h2 & t2] (seq s2) ans #{}]\n    (if (nil? h1)\n      ans\n      (if (empty? t2)\n        (recur t1 (seq s2) (conj ans [h1 h2]))\n        (recur (concat [h1] t1) t2 (conj ans [h1 h2]))\n      )\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"problem":90,"code":"(fn myfun\n  [set1 set2]\n  \n  (set (mapcat\n   \t\n   \t\t#(map vector set1 (repeat (count set1) %)) set2\n\t)  )\n  )","user":"55897fe2e4b059ccff29b205"},{"problem":90,"code":"(fn cartesian [set1 set2]\n  (reduce clojure.set/union (map (partial (fn cartmult [setb x]\n         (if (= 0 (count setb)) #{} (conj (cartmult (rest setb) x) [x (first setb)]))\n       ) set2)  set1\n  ))\n)","user":"53a36fd7e4b0f1fc74538834"},{"code":"#(apply hash-set(for [x %, y %2] [x y]))","problem":90,"user":"509c03f3e4b085ae113522a8"},{"problem":90,"code":"#(->> \n   (for [x %1 y %2] [x y]) \n   (into \n    (empty %1)))","user":"4fc77f5ae4b0ee37620e1821"},{"problem":90,"code":"(fn [s1 s2] (set (for [ss1 s1 ss2 s2] [ss1 ss2])))","user":"561e2b33e4b064ca9f4b16ba"},{"code":"#(set (for [σ %1 ζ %2] [σ ζ]))","problem":90,"user":"50377d53e4b0af0658af77ad"},{"code":"; a quite elegant solution\n#(set (for [x %1 y %2] [x y]))\n;; A less elegant solution\n;(fn [A B]\n;  (set (first (conj '() (for [x A y B] [x y])))))","problem":90,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn [s1 s2]\n  (into #{}\n    (for [i s1 j s2] [i j])))","problem":90,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [a b]\n  (set (mapcat\n    #(map (partial vector %) b)\n    a)))","problem":90,"user":"4f1b0ab3535d64f603146474"},{"problem":90,"code":"(fn [x y]\n    (reduce\n      (fn [a b]\n        (reduce (fn [e r]\n                  (conj e [b r])\n                  )\n                a y\n                )\n        )\n      #{} x\n      )\n    )","user":"528ce039e4b0239c8a67aebc"},{"code":"(fn [a b]\n   (into #{} (for [x a y b]\n      [x y])))","problem":90,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{} (for [s2 set2\n        \t\t  s1 set1]\n    \t\t\t (vector s1 s2))))","user":"58ee5371e4b056aecfd47da8"},{"code":"#(set (for [a %1 b %2]\n        [a b]))","problem":90,"user":"51f9527fe4b09be9c177e549"},{"problem":90,"code":"(fn [lc rc]\n  (into #{}\n        (for [l lc\n              r rc]\n          [l r])))","user":"5a6af090e4b0512ff01cda2d"},{"problem":90,"code":"(fn [& xss]\n    (reduce (fn [xs ys] \n              (into #{} (for [x xs y ys] (conj x y))))\n            #{[]}\n            xss))","user":"55568a7de4b0deb715856e1c"},{"problem":90,"code":"(fn [x y]\n  (loop [in x\n         out #{}]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (clojure.set/union out (set (map #(vec [(first in) %]) y)))))))","user":"58cff8b0e4b03c36ff7e58c0"},{"problem":90,"code":"(fn cart-func [s1 s2]\n(set\n(reduce\n(fn [acc next]\n(let [row\n(reduce\n(fn [ac2 nxt2]\n(conj ac2 [next nxt2])\n)\n[]\ns2\n)]\n(concat acc row)\n)\n)\n#{}\ns1\n)\n)\n\n)","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":90,"code":"(fn [xs ys] \n  (set (for [y ys\n        x xs]\n    [x y]\n    )))","user":"563b9acbe4b0bfe05bf11827"},{"problem":90,"code":"(fn  cartesian-product [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y])))","user":"59971dcbe4b07157cc8daacb"},{"problem":90,"code":"(fn [s1 s2]\n    (set (for [a s1\n          b s2]\n      [a b])))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":90,"code":"(fn [set1 set2] \n  (set \n   (for [item2 (sort set2)\n         item1 (sort set1)] \n     [item1 item2])))","user":"5d84f5e6e4b0915913b1d38f"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (into (empty xs) (for [x xs, y ys] [x y])))","user":"55fb58b2e4b0f488688e0661"},{"problem":90,"code":"(fn [xs ys]\n  (set (apply concat (map (fn [x] (map #(vector x %) ys)) xs))))","user":"54c8d4a8e4b045293a27f654"},{"code":"(fn [a b]\n  (loop [rows a cols b result #{}]\n    (if (empty? rows)\n      result\n      (recur\n        (rest rows)\n        cols\n        (loop [r (first rows) c cols res result]\n          (if (empty? c)\n            res\n            (recur r (rest c) (conj res [r (first c)])))))))\n\n\n\n)","problem":90,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [x y]\n       (set (for [s1 x\n       s2 y]\n\t [s1 s2])))","problem":90,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn cort [a b]\n   (reduce (fn [s item-a]\n             (reduce (fn [s item-b]\n                       (conj s [item-a item-b])) s b)) #{} a))","problem":90,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn cart [x y]\n  (set (for [a x\n        b y]\n    [a b])))","problem":90,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"(fn [a b]\n  (set (for [a a\n        b b]\n    [a b])))","problem":90,"user":"513fab65e4b00f13ea1bd891"},{"problem":90,"code":"(fn [xs_x xs_y] (set (for [x xs_x y xs_y] [x y])))","user":"56743413e4b05957ce8c612e"},{"code":"(fn [a b]\n  (into #{} (partition 2 (mapcat #(interleave (repeat (count b) %) b) a))))","problem":90,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [s1 s2]\n  (set (for [i s1 j s2] [i j])))","problem":90,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn f [s1 s2]\n  (set (for [x2 s2\n             x1 s1]\n         [x1 x2])))","problem":90,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn [x y] (into #{} (for [e1 x e2 y] [e1 e2])))","problem":90,"user":"528b08efe4b0239c8a67ae8a"},{"problem":90,"code":"(fn f [x y] (set (mapcat #(map (fn [a] (list % a)) y) x)))","user":"5463fbbde4b01be26fd746ca"},{"code":"(fn [a b]\n   (set (apply concat\n               (map\n                (fn [s] (map\n                        (partial list s)\n                        b))\n                a))))","problem":90,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":90,"code":"(fn [set-a set-b]\n  (into #{} (for [x set-a\n        y set-b]\n    [x y])))","user":"533f09e1e4b085b17e897d9a"},{"problem":90,"code":"(fn [sq1 sq2]\n  (into #{} (for [i1 sq1 i2 sq2]\n              [i1 i2]))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":90,"code":"#(set \n  (for [a (vec %1) b (vec %2)]\n    [a b]\n    )\n  )","user":"608b3fe1e4b0adce4b61c442"},{"code":"(fn  cartestian [xs ys]\n  (set (for [x xs \n             y ys] [x y])))","problem":90,"user":"4e6defcc535d5021c1a895f8"},{"code":"#(set (mapcat (fn [x] (partition 2 (interleave (repeat (count %2) x) %2))) %))","problem":90,"user":"5216933be4b000d124d989cf"},{"code":"#(set \n  (for [s1 %1 s2 %2]\n    [s1 s2]))","problem":90,"user":"52aad30ce4b0c58976d9ac6d"},{"problem":90,"code":"(fn [set1 set2] \n  (set (for [x set1, y set2] [x y])))\n;; More elegant: \n;;   #(into #{} (for [x %1 y %2] [x y]))","user":"59c76402e4b0a024fb6ae542"},{"problem":90,"code":"(fn cartesian-product\n  ([x y] (cartesian-product x y #{}))\n  ([x y result]\n    (if (empty? x)\n      result\n      (recur (rest x) y (into result (map #(vector (first x) %1) y)))\n      )\n    )\n  )","user":"5b73e500e4b047b03b2036ba"},{"problem":90,"code":"(fn [xs ys]\n  (set\n   (mapcat (fn [y] (map #(vector % y)\n                        xs))\n           ys)))","user":"5ab16992e4b073f1774425c4"},{"code":"(fn cart [a b]\n  (set\n    (mapcat\n      #(map (partial vector %) b)\n      a)))","problem":90,"user":"523b10dfe4b02f719975bdb8"},{"problem":90,"code":"(fn [coll1 coll2]\n  (reduce (fn [acc c1] (into acc (map #(conj [] c1 %) coll2))) #{} coll1))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1\n        \ty s2]\n    \t[x y])))","user":"505d1b01e4b0e6aca564be04"},{"code":"(fn [a b] \n  (set (apply concat (map #(map (partial conj [%]) b) a))))","problem":90,"user":"504e108ce4b078edc5f593b3"},{"code":"#(set(for[x%1 y%2][x y]))","problem":90,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn [xs ys] \n  (set\n   (mapcat (fn [x] \n             (map #(list x %) ys)) xs)))","problem":90,"user":"4ec1619b535dfed6da9c6dab"},{"problem":90,"code":"(fn [p1 p2] (reduce into #{} (map (fn [n] (map #(do [% n]) p1)) p2)))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":90,"code":"#(into #{} (for [s %1 t %2] [s t]))","user":"54bec835e4b0ed20f4ff6ef7"},{"problem":90,"code":"(fn [x y]\n   (set (for [i x, j y] [i j])))","user":"54344721e4b0b6b47310fcea"},{"code":"(fn cp [a b]\n  (set (for [x a y b] (list x y))))","problem":90,"user":"4f8b56dae4b02e764a0a517e"},{"problem":90,"code":"#(into\n  (sorted-set)\n  (reverse\n   (for [a (seq %1)\n         b (seq %2)]\n     [a b])))","user":"586a657de4b0f14aab7c88bd"},{"problem":90,"code":"(fn [x y]\n  (let [prod (fn [x y] (map #(vector x %) y))]\n    (reduce into #{} (map #(prod % y) x))))","user":"55205564e4b08d5046aa8a60"},{"problem":90,"code":"(fn \n  [set1 set2]\n  \n  (set (for [a set1 b set2]\n         (vector a b) )))","user":"5772ddb0e4b0979f896515d4"},{"problem":90,"code":"(fn [x y]\n  (into #{} (mapcat #(map (fn [e] [% e]) y) x)))","user":"4f1e4ab5535d64f603146496"},{"problem":90,"code":"(fn [x y]\n(into #{} (partition 2 (flatten (map #(interleave x (into [] (repeat (count x) %))) y)))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":90,"code":"(fn [a b]\n  (reduce into #{} (for [x b]\n    (for [y a] \n      [y x]))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [a b]\n    (set (for [x a y b]\n      [x y])))","problem":90,"user":"51d9eb05e4b02ceefd947755"},{"problem":90,"code":"(fn [s1 s2]\n   (set (for [el1 s1\n              el2 s2]\n          [el1 el2])))","user":"5c896f46e4b048ec896c5940"},{"code":"#(set (for [x % y%2] [x y]))","problem":90,"user":"4e7115b3535d5021c1a89647"},{"problem":90,"code":"#(set \n   (for [i %1 j %2 :let [se #{}]] \n     [i j] \n     ))","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":90,"code":"(fn [s1 s2] (set (apply concat (map\n             (fn [i1] (map\n                       (fn [i2] (vector i1 i2))\n                       s2))\n             s1))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn [s1 s2] (set (mapcat #(map (fn [e] (vector % e)) s2) s1)))","problem":90,"user":"4f69f34fe4b07046d9f4ef90"},{"problem":90,"code":"(fn cp [x y]\n  (set\n   (for [x1 x\n         y1 y]\n     [x1 y1])))","user":"60dd865ee4b0d8b48c489db3"},{"problem":90,"code":"#(into #{} \n       (mapcat (fn [y] \n                 (map (fn [x] [x y]) \n                      %1)) \n               %2))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":90,"code":"(fn [seq1 seq2]\n  (set (reduce concat \n          (map (fn [elem]\n                 (map #(vec [elem %1]) seq2))\n               seq1))))","user":"567bf820e4b05957ce8c61ad"},{"problem":90,"code":"(fn [a b] (into (sorted-set)(mapcat (fn [x] (map #(conj [x] %) b) ) a)))","user":"5034b623e4b062bc5d7ae168"},{"problem":90,"code":"(fn[a b]\n(set (for [x a y b]\n       [x y])))","user":"5a99b844e4b0d174b936c7ab"},{"code":"(fn [s1 s2]\r\n          (set(for [x s1 y s2] [x y])))","problem":90,"user":"503b6995e4b07a1917cc34dd"},{"problem":90,"code":"(fn [a b] (set\n  (for [x a\n        y b]\n    [x y])))","user":"59e62655e4b08badc2a0c568"},{"code":"(fn cart-prod [f s]\n  (set (for [first f\n\t\t   second s]\n\t\t  [first second]\n\t))\n\n)","problem":90,"user":"4faacc04e4b081705acca201"},{"problem":90,"code":"(fn [set-one set-two]\n  (loop [current set-one\n         final #{}]\n        (if (empty? current)\n            final\n            (recur (rest current) (into final (reduce (fn [a b] (conj a [(first current) b])) [] set-two))))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":90,"code":"(fn [a b] (set (\n  mapcat #(\n    map (fn [e] [% e]) b)\n  a)))","user":"583e1558e4b089d5ab817da9"},{"code":"(fn [s1 s2]\n  (loop [result [] sq1 s1]\n    (if (first sq1)\n      (recur (reduce #(conj % [(first sq1) %2]) \n      result s2) (next sq1)) (set result))))","problem":90,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn [s1 s2] (set (apply concat (for [x s1] (map #(vector x %) s2)))))","problem":90,"user":"4eb44d78535d7eef30807360"},{"code":"#(set(for[x % y%2][x y]))","problem":90,"user":"4db016af838c48654951d9b9"},{"code":"(fn [x y] (set (reduce concat (map (fn [l] (map (fn [m] (list l m)) y)) x))))","problem":90,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"code":"#(set (for [n %1 l %2][n l]))","problem":90,"user":"4e7650c5535d324fb2983d68"},{"code":"(fn cartesian-product [set1 set2]\n   (into #{} (for[x set1 y set2]\n              [x y])))","problem":90,"user":"5273562ae4b03e8d9a4a7479"},{"problem":90,"code":"(fn cart-prod [a b]\n     (into #{} (for [x a y b] (vector x y))))","user":"569aca1ee4b0542e1f8d144d"},{"problem":90,"code":"(fn cart [x y] (loop [toMap (first x) result #{} toDo (rest x)]\n                   (if (empty? toDo)\n                     (into result (map (fn [z] (vector toMap z)) y))\n                    (recur\n                     (first toDo)\n                     (into result (map (fn [z] (vector toMap z)) y))\n                     (rest toDo)))))","user":"56427910e4b08d4f616f5f19"},{"problem":90,"code":"(fn [x y] (into #{} (for [a x b y ] [a b])))","user":"53f1c05ee4b0742d9025b0e1"},{"code":"(fn [c1 c2] (set (for [i1 c1 i2 c2] [i1 i2])))","problem":90,"user":"500e91aae4b00fff93030f99"},{"problem":90,"code":"(fn gg [s1 s2]\n  (into #{}\n        (for [x s1\n        \t  y s2]\n    \t   [x y])))","user":"55aaa36fe4b0988bba2ad94f"},{"code":"(fn cart-prod [s1 s2]\n  (set (mapcat #(map vector s1 (repeat %)) s2)))","problem":90,"user":"4faafccde4b081705acca209"},{"problem":90,"code":"(fn[X Y] (set (for [x X y Y] [x y])))","user":"5b3e3c1ce4b02d533a91bbff"},{"problem":90,"code":"#(set (for [foo %1\n               bar %2]\n           (vector foo bar)))","user":"5908882de4b047aa04b19979"},{"problem":90,"code":"(fn [a b]\n   (let [as (map (fn [x] (repeat (count b) x)) a)\n         ab (repeat (count a) b)]\n     (into #{} (apply concat\n                      (map (fn [x] (apply map vector x))\n                           (map vector as ab))))))","user":"52281e1ee4b0186687e23a69"},{"problem":90,"code":"(fn product\n  [xs ys]\n  (set (mapcat (fn [x] (map (fn [y] [x y]) ys)) xs)))","user":"5c222b7de4b07e362c230588"},{"problem":90,"code":"(fn cartesian [seta setb]\n  (set (for [x seta\n        y setb]\n    [x y])))","user":"5a388675e4b001c08efc0ca2"},{"problem":90,"code":"(fn [s1 s2] (into #{} (reduce clojure.set/union (map (fn [v1] (into #{} (map (fn [v2] [v1 v2]) s2))) s1))))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":90,"code":"(fn f [a b]\n  (into #{} (sort (for [x1 a\n      x2 b]\n  (vector x1 x2)))))","user":"5ed15e23e4b016b56eae05ba"},{"code":"(fn [s1 s2]\n  (into #{}\n    (for [x1 s1 x2 s2] \n      [x1 x2])))","problem":90,"user":"4edffe54535d10e5ff6f5347"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1\n                  y s2]\n              [x y])))","user":"5d231255e4b02ea6f0fb69fe"},{"code":"(fn [sx sy] (set (for [x sx y sy] [x y])))","problem":90,"user":"504db141e4b021508a333965"},{"problem":90,"code":"(fn [s₁ s₂] (set (for [x s₁ y s₂] [x y])))","user":"55d85ac9e4b0e31453f64ab2"},{"code":"(fn [a b] (reduce #(apply conj %1 %2) #{}\n (map (fn [x] (map (fn [y] [x y]) b))a)))","problem":90,"user":"4db883e1535d1e037afb2198"},{"code":"(fn\n  [xs ys]\n  (set (apply concat (map (fn [x] (map (fn [y] [x y]) ys)) xs))))","problem":90,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":90,"code":"(fn[a b](set (for [ax a bx b] [ax bx])))","user":"55f01316e4b06e875b46ce1a"},{"problem":90,"code":"#(set (for [x (vec %1) y (vec %2)] (vector x y)))","user":"5a534241e4b05d388ecb6c0a"},{"code":"#(apply hash-set (for[x %1 y %2][x y]))","problem":90,"user":"4ec75829535d6d7199dd36e1"},{"problem":90,"code":"(fn [a b] (into #{} (for [x a y b] (vector x y))))","user":"602372aae4b0d5df2af2220f"},{"problem":90,"code":"(fn [s1 s2]\n  (-> (for [x s1\n            y s2]\n        [x y])\n      (set)\n))","user":"60aecd73e4b00e9e6653c49a"},{"problem":90,"code":"#(set (for [a  %1 b %2] [a b]))","user":"55aa1637e4b0988bba2ad949"},{"problem":90,"code":"(fn cp [a b]\n  (reduce (fn[res x]\n            (loop [seqi b r res]\n              (if (seq seqi)\n                (recur (rest seqi) (conj r [x (first seqi)]))\n                r))) #{} a))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [A B]\n  (into #{} (for [a A b B] [a b])))","problem":90,"user":"534f13b2e4b084c2834f4ac4"},{"problem":90,"code":"(fn [s1 s2] \n  (set\n   (for [x s1 y s2]\n    [x y])\n  )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"#(set(for [a % b %2] [a b]))","problem":90,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [coll1 coll2]\n   (into #{}\n         ((fn [coll1 coll2]\n           (loop [coll coll2 rs []]\n             (if (empty? coll)\n               rs\n               (recur (rest coll)\n                      (concat rs\n                             (partition 2 \n                                        (interleave coll1 \n                                                    (repeat (first coll))))))))) \n          coll1 coll2)))","problem":90,"user":"51cacda3e4b068dadb8f2227"},{"problem":90,"code":"(fn[set1 set2] (set  (for [x set2 y set1] [y x])))","user":"55757e81e4b05c286339e063"},{"code":"(fn [l m]\n  (into #{} (mapcat (fn [a] (mapcat (fn [b] [[a b]]) m)) l)))","problem":90,"user":"50e135f4e4b084616e11c667"},{"code":"(fn [a b] (into #{} (for [k a v b] (vector k v))))","problem":90,"user":"4fadbc3fe4b081705acca23f"},{"problem":90,"code":"( fn [ a b]\n  ( set ( for [ x a y b ]\n          \t[x y])))","user":"516d227fe4b06f078fab252d"},{"code":"(fn [s1 s2]\n  (set (for [x1 s1 x2 s2] [x1 x2])\n  ))","problem":90,"user":"4fb03cf4e4b081705acca262"},{"problem":90,"code":"; study\n(fn [a b]\n  (set (for [x a y b] [x y])))","user":"59e5b6a1e4b08badc2a0c55b"},{"problem":90,"code":"(fn [as bs] (set (mapcat (fn[a] (mapcat (fn[b] (vector [a b])) bs)) as)))","user":"55dab408e4b0e31453f64ad9"},{"problem":90,"code":"(fn [rank suit] (set (for [r rank s suit] [r s])))","user":"516f5b7ee4b0ef3e37990e7e"},{"problem":90,"code":"(fn [f f1]\n  \n  (set (for [i (vec f)\n            j (vec f1)]\n        [i j]))\n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn [a b]\n  (reduce conj #{}\n  (for [i a j b]\n    [i j])))","problem":90,"user":"4e5d2dc5535d8a8b8723a2ca"},{"code":"(fn [i-col i-row]\r\n    (apply hash-set (apply concat (map\r\n        (fn [my-row]\r\n            (map\r\n                (fn [my-col]\r\n                    (vector my-col my-row))\r\n                i-col))\r\n        i-row))))","problem":90,"user":"4dddf817535d08e6dec9fdd3"},{"code":"(fn [a b]\n  (set (mapcat (fn [x] (map #(vector x %) b)) a)))","problem":90,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":90,"code":"(fn [a b] (reduce (fn [out item] (reduce #(conj %1 [item %2]) out b)) #{} a))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":90,"code":"(fn cartesian-p [a b]\n  (loop [rem a\n         res #{}]\n    (if (empty? rem)\n      res\n      (recur (rest rem) (into res (map #(vector (first rem) %) b))))))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":90,"code":"(fn a [s1 s2] (set (for [x s1 y s2] (vector x y))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"#(set (for [l (seq %1), ll (seq %2)]\n    [l ll]))","problem":90,"user":"4fc0853ae4b081705acca327"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1\n        y s2]\n    \t[x y]))\n )","user":"5649615be4b0284900eef641"},{"code":"(fn [s1 s2]\n  (apply hash-set (for [x1 s1 x2 s2]\n    [x1 x2])))","problem":90,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [s1 s2]\n    (set (for [s1e s1 \n               s2e s2 ] \n          [s1e s2e ])))","problem":90,"user":"4f030775535dcb61093f6a43"},{"problem":90,"code":"(fn [a b]\n   (apply hash-set (for [x a\n                         y b]\n                     [x y])))","user":"5f3f2281e4b004f08c61c561"},{"problem":90,"code":"(fn cart-prod [set1 set2]\n  (set (for [x set1, y set2] [x y])))","user":"5eac172fe4b00a66d4a951dd"},{"problem":90,"code":"(fn[f s](into (sorted-set) (map vec (seq (partition 2 (flatten (loop[cards f signs s res []](if(empty? cards) res (recur (rest cards) signs (conj res (map #(conj (conj [] (first cards)) %1) signs)))))))))))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys]\n   \t    [x y])))","user":"5e41a67be4b01d43a70e8e56"},{"code":"(fn [a b]\n  (set (for [x a, y b] [x y])))","problem":90,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn [a b] (into #{} (for [x1 a x2 b] [x1 x2])))","problem":90,"user":"51f7dd27e4b06ff1c25c52dc"},{"problem":90,"code":"(fn [xs ys]\n  (into #{} \n   (mapcat \n   (fn [x] (map #(vector x %) ys)) \n   xs)))","user":"559b55d6e4b066d22e731f54"},{"code":"(fn [x y] (set (for [i y j x] [j i])))","problem":90,"user":"52f9ce6de4b047fd55836ff0"},{"problem":90,"code":"(fn [l r]\n  (into\n   #{}\n   (for [i l j r]\n     [i j])))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n        (for [i s1\n        \t  j s2]\n    \t  [i j])))","user":"5573ffb5e4b0aa18f790f3fd"},{"code":"(fn [a b] (set (mapcat (fn [c] (map (fn [d] (vector d c)) a)) b)))","problem":90,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":90,"code":"(fn [q w] \n   (set (\n     \n (fn jp [a b] (if \n                (or (empty? a) (empty? b)) \n                () \n                (concat (map #(vector % (first b)) a) (jp a (rest b)) ) ))\n \n      q w)))","user":"544e1794e4b0e39780006980"},{"problem":90,"code":"(fn [xs ys]\n    (set (for [x xs\n               y ys]\n           [x y])))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n  \t(mapcat \n     (fn [x] \n       (map (fn [y] [x y]) s2)) s1)))","user":"577629abe4b0979f8965162e"},{"code":"(fn f1\n  ([a b]\n  (f1 a b #{}))\n\n  ([a b t]\n  (if (or (empty? a) (empty? b))\n    t\n    (let [a1 (first a) an (rest a)]\n      (recur an b (into t (map #(do [a1 %]) b)))))))","problem":90,"user":"50b8e9a4e4b0cba0e598b656"},{"code":"(fn [x y] (set (for [a x b y] [a b])))","problem":90,"user":"4dfe65a1535d04ed9115e787"},{"problem":90,"code":"(fn [a b] (set (for [x a y b] [x y]))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":90,"code":"(fn [b a]\n    (apply hash-set (mapcat (fn [x]\n                              (map #(vector x %1) a))\n                            b)))","user":"568227fee4b0945ebc182a8a"},{"code":"#(set (for [x %1 y %2] [x,y]))","problem":90,"user":"4f5edeb0e4b0030a34fb2b57"},{"code":"#(set (for [i % j %2] [i j]))","problem":90,"user":"4e50e2a0535dc968683fc4ef"},{"problem":90,"code":"(fn [set-1 set-2]\n  (set (for [value-1 set-1 \n             value-2 set-2]\n         [value-1 value-2])))","user":"58740c18e4b01531a375ea49"},{"code":"(fn [s1 s2]\n  (reduce (fn [s x]\n             (reduce (fn [s y]\n                        (conj s [x y])) s s2)) #{} s1))","problem":90,"user":"4ef992c8535dced4c769f268"},{"problem":90,"code":"(fn cp [a b]\n\t(set (for [x a y b] [x y])))","user":"59f043d0e4b0966464fe6a3d"},{"problem":90,"code":"(fn cart-product [xs ys]\n  (set (for [x xs y ys] [x y])))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":90,"code":"(fn [a b]\n  (loop [l '() re (seq a) ]\n    (\n      if (empty? re) (reduce clojure.set/union l)\n      (recur \n        (conj l \n          (\n            loop[li '() ri (seq b)](\n              if (empty? ri) (set li)\n              (recur \n              (conj li (list (first re) (first ri)) )\n              (rest ri) )\n            )\n          )\n        )\n        (rest re)\n      )\n    )\n  )\n)","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn [s1 s2]\n  (set (for [e1 s1\n             e2 s2]\n         [e1 e2])))","problem":90,"user":"53527551e4b084c2834f4af0"},{"problem":90,"code":"(fn f90 [x y]\n  (set (for [t1 x t2 y]\n    (vector t1 t2)))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn cp [s t]\n  (set (for [i s j t] [i j])))","problem":90,"user":"52d660eae4b09f7907dd1356"},{"code":"(fn [set1 set2]\n  (set (for [x set1, y set2] [x y])))","problem":90,"user":"500ff421e4b0ae202717946f"},{"problem":90,"code":"(fn cart [a b]\n  (into #{}\n        (apply concat\n         (map (fn [ai]\n               (map (fn [bj]\n                      [ai bj])\n                    b))\n             a))))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn cartesian-* \n   ([xs ys] (cartesian-* (vec xs) (vec ys) #{}))\n   ([[x & xs] ys prod] \n    (if (nil? x) (set prod)\n      (recur xs ys (concat prod (map #(vector x %) ys))))))","problem":90,"user":"4fe8d862e4b0547ebccb2428"},{"problem":90,"code":"(fn [x y] (loop [i 0\n                 bigV []\n                 x (vec x)\n                 y (vec y)]\n            (if (= i (count x))\n              (set bigV)\n              (recur (inc i) (concat bigV (loop [j 0\n                                    \t \tsmallV []]\n                               \t\t\t(if (= j (count y))\n                                \t \t (reverse smallV)\n                                      \t (recur (inc j) (conj  smallV [(nth x i) (nth y j)]))))) x y))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":90,"code":"(fn [a b] \n  (set\n    (apply concat \n      (for [i b]\n        (for [j a] \n          [j i])))))","user":"59e8bb43e4b0249b72820735"},{"code":"(let [sing-product (fn sing-product [x y]\n  (map #(conj [x] %) y))]\n\n(fn cart-product [x y]\n  \"4clojure.com/problem/90\"\n  (set (mapcat #(sing-product % y) x))))","problem":90,"user":"4db58ccb535d87e67b28fe10"},{"problem":90,"code":"(fn\n  [a b]\n  (reduce #(into %1 %2) #{}\n          (for [x a] (for [y b] [x y] ))\n          ))","user":"54965534e4b0b312c081ff65"},{"problem":90,"code":"#(into (sorted-set) \n      (map vector \n           (take (* (count %1) (count %2)) (cycle %1)) \n           (mapcat (partial repeat (count %1)) %2)))","user":"568f2059e4b0dcc4269f40df"},{"code":"#(set (for [i %1 j %2] [i j]))","problem":90,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn [A B]\n  (loop\n    [a (seq A)\n     b (seq B)\n     tr #{}]\n    (if (= nil (first a))\n      tr\n      (recur\n       (rest a)\n       b\n       (loop\n         [bb b\n          tr2 tr]\n         (if (= nil (first bb))\n           tr2\n           (recur\n            (rest bb)\n            (conj tr2 [(first a) (first bb)]))))))))","problem":90,"user":"530d85dee4b08068f379eca8"},{"code":"#(set (for [l %1 r %2] [l r]))","problem":90,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":90,"code":"(fn [left right]\n  (into #{} (for [x left y right] [x y])))","user":"55934bebe4b0c79f6e1db93b"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs, y ys]\n    [x y])))","user":"57275898e4b0c5bde472c13e"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 y s2] (vector x y))))","user":"56018dd4e4b04bb52996e18f"},{"problem":90,"code":"(fn [xs ys] \n(set  (for [x xs\n        y ys]\n    [x y])))","user":"5ade6bafe4b0837691e92c23"},{"problem":90,"code":"(fn foo [s1 s2]\n  (if-let [f (first s1)]\n    (into #{}\n     (concat (reduce #(conj %1 [f %2]) #{} s2) (foo (next s1) s2))\n     )\n    #{}))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":90,"code":"(comp set #(for [a %1 b %2] [a b]))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":90,"code":"(fn [s1 s2]\n     (set (mapcat #(map vector (repeat (count s2) %) s2) s1)))","user":"5ed6030de4b016b56eae05db"},{"problem":90,"code":"#(set \n  (mapcat (fn [j] \n      (map (fn \n             [i] [i j] ) %1 ))\n   %2)\n )","user":"5a778224e4b013a48d399761"},{"code":"(fn [s1 s2]\n\t(loop [cur (first s1) rst (rest s1) res #{}]\n\t\t(if (nil? cur) res\n\t\t\t(recur (first rst) (rest rst) (clojure.set/union res (loop [cur2 (first s2) rst2 (rest s2) res2 #{}]\n\t\t\t\t(if (nil? cur2) res2\n\t\t\t\t\t(recur (first rst2) (rest rst2) (conj res2 [cur cur2]))\n\t\t\t\t)\n\t\t\t)))\n\t\t)\n\t)\n)","problem":90,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":90,"code":"(fn [x y]\n  (into #{}\n        (for [xs x\n              ys y]\n          [xs ys])))","user":"4ecb1641535d6d7199dd370e"},{"code":"#(into #{} (for [x (seq %1) y (seq %2)] [x y]))","problem":90,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [x y] (set (for [e x f y] [e f])))","problem":90,"user":"4e1f9bb5535d04ed9115e80d"},{"code":"#(set (for [x %1 y %2]\n  \t\t [x y]))","problem":90,"user":"5300aa1de4b0d8b024fd3710"},{"problem":90,"code":"(fn [set1 set2]\n  (set\n   (for [item1 set1 item2 set2] [item1 item2])))","user":"57f52d3be4b0903ccab3dce7"},{"code":"(fn  [firstcoll secondcoll]\n   (reduce conj #{} (reduce (fn  [resultcoll nowelem]\n             (into resultcoll (partition 2 (#(interleave (repeat %) %2) nowelem secondcoll)))) [] firstcoll)))","problem":90,"user":"52be0263e4b07a9af579230e"},{"problem":90,"code":"(fn [a b] (set (for [x a\n                      y b]\n                  [x y])))","user":"55c5261ee4b0e31453f649ae"},{"code":"#(set( for [a %1 b %2] [a b]))","problem":90,"user":"50361b6be4b0fbe0a74d26be"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat #(map (fn [n] (vector % n)) b) a)))","user":"5a99b87ee4b0d174b936c7af"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n        (for [x s1\n              y s2]\n          [x y])))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn [s1 s2] (set (mapcat (fn [n] (map #(vector n %) s2)) s1)))","problem":90,"user":"4e6fa38b535d5021c1a89622"},{"problem":90,"code":"#(into #{} (sort-by first (for [e1 %1\n               e2 %2]\n               (list e1 e2))))","user":"5a51e029e4b05d388ecb6bf0"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (mapcat (fn [n1] (map (fn [n2] [n1 n2]) s2)) s1)))","user":"5383668ee4b06839e8705edd"},{"problem":90,"code":"(fn [l1 l2]\n  (set (mapcat (fn [el1]\n         (map (fn [el2] [el1 el2]) l2))\n       l1)))","user":"561eb82fe4b064ca9f4b16c7"},{"code":"(fn [s1 s2] (set (mapcat (fn [ix] (map (fn [jx] (conj [] ix jx)) s2)) s1) ))","problem":90,"user":"52bf0116e4b07a9af5792328"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b]\n         [x y]\n         )\n       )\n  )","user":"552d9013e4b076ab5578f7ea"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x1 s1 \n        x2 s2]\n    [x1 x2])))","user":"54e345a1e4b024c67c0cf7db"},{"problem":90,"code":"#(into #{} (for [s1elem %1 s2elem %2] [s1elem s2elem]))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [col1 col2] (set (for [i col1 v col2] [i v])))","problem":90,"user":"52fc34cee4b047fd55837015"},{"code":"(fn[a b] \n\t(let [la (count a) lb (count b)]\n\t (into #{} (apply concat (map (fn[x] (map vector (repeat lb x) (into [] b))) a)))\n\t)\n)","problem":90,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn [a b] (set (reduce concat (map \n                #(map (fn [c] (list % c)) b) \n                a\n                )\n           ))\n  )","problem":90,"user":"51aeb1f4e4b09397d5109794"},{"code":"(fn cartenian-product\n  [xs ys]\n  (set (for [x xs y ys] [x y])))","problem":90,"user":"4e50b67b535dc968683fc4ed"},{"problem":90,"code":"(fn [s1 s2] \n  (into #{}\n     (for [x s1 y s2] [x y])))\n\n;more concise\n;#(set (for [x %1 y %2] [x y]))","user":"55e01f4ee4b050e68259b406"},{"problem":90,"code":"(fn [s1 s2]\n  (set (reduce #(into %1 (map (fn [x] (vector %2 x)) s2)) '() s1)))","user":"54e6762be4b024c67c0cf809"},{"problem":90,"code":"(fn \n  [first-seq second-seq]\n  (let [ans  (for [curr-fir first-seq curr-sec second-seq]\n               (vector curr-fir curr-sec)\n               )]\n    \n    (into #{} ans)\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"code":"(fn [a b]\n    ((comp set mapcat) (fn [x] (map #(vector % x) a)) b))","problem":90,"user":"4ec74de3535d6d7199dd36df"},{"problem":90,"code":"#(set (for [x %1 \n      y %2]\n      [x y]))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":90,"code":"(fn [seta setb]\n  (set (for [x seta\n             y setb]\n         [x y])))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":90,"code":"(fn [xs ys](into #{}(for [x xs y ys][x y])))","user":"55597b84e4b0deb715856e36"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a \n        y b]\n    [x y])))","user":"56eb16d8e4b04a395b9a041d"},{"code":"#(-> (for [x %1 y %2] [x y]) set)","problem":90,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":90,"code":"(fn [s1 s2] (->> (for [e1 s1 e2 s2] [e1 e2]) (into #{})))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":90,"code":"(fn cartP\n  [a b]\n  (into #{} (for [s1 a\n                  s2 b]\n              [s1 s2])))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn product [marks ranks]\n  (set\n   (mapcat\n    #(map (fn [rank] (vector % rank))\n          ranks)\n    marks)))","problem":90,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":90,"code":"(fn [coll1 coll2] (set (apply concat (map (fn [e1] (map (fn [e2] [e1 e2]) coll2)) coll1))))","user":"59804b60e4b021a7a535fdcf"},{"problem":90,"code":"(fn [a b]\n   (reduce\n     (fn [coll x]\n       (into coll\n             (map vector (repeat (count b) x) b)))\n     #{} a))","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn [a b] (set (for [ai a bi b] [ai bi])))","problem":90,"user":"51e24a04e4b01e5198146430"},{"code":"(fn cartesian-product [as bs]\n  (set (for [a as, b bs] [a b])))","problem":90,"user":"4ef41f26535dced4c769f230"},{"problem":90,"code":"(fn [first-set second-set] (apply hash-set (mapcat (fn [item] (map #(list item %) second-set)) first-set)))","user":"5471f090e4b094393f72dd6e"},{"code":"(fn cart-prod [s1 s2]\n  (reduce (fn [accum val]\n            (into accum (map #(vec [val %]) s2)))\n          #{} s1))","problem":90,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [xs ys] (set (for [x xs\n                   y ys]\n              [x y])))","problem":90,"user":"4f03ba9c535dcb61093f6b58"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [x a, y b] [x y])))","user":"5338387de4b0e30313ee6c91"},{"problem":90,"code":"(fn cartProduct [lista1 lista2]\n  (set(for [a lista1 b lista2] [a b])))","user":"59e55cc8e4b08badc2a0c555"},{"problem":90,"code":"(fn [s1 s2]\n   (let [digit-map (fn [x s] (map #(vector x %) s))]\n     (set (mapcat #(digit-map % s2) s1))))","user":"5978c844e4b01722bebd4d18"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs y ys] (conj [] x y))))","user":"57894e30e4b0ebec4cfb752b"},{"code":"(fn [a b] (set (for [x a\n              y b]\n                [x y])))","problem":90,"user":"527ba29de4b03e8d9a4a7594"},{"problem":90,"code":"#(set (for [a (vec %1)\n            b (vec %2)]\n        [a b]))","user":"553478dce4b09218d5f44f9d"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [x a\n        y b]\n    [x y])))","user":"54c120d7e4b0ed20f4ff6f1c"},{"code":"(fn [a b] (set (mapcat (fn [c] (map #(vector % c) a)) b)))","problem":90,"user":"52d7a930e4b09f7907dd1379"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n    (mapcat (fn [x] (map #(vector % x) a)) b)   \n  )\n)","user":"5aa998c6e4b0d174b936c8e5"},{"problem":90,"code":"(fn build [x y]\n  (set\n   (for [x x\n         y y]\n     [x y])))","user":"5a9bfd57e4b0d174b936c7d0"},{"code":"(fn [A B]\n  (set (mapcat #(map (partial vector %) B) A)))","problem":90,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [c1 c2]\n  (set (for [x c1 y c2] [x y])))","problem":90,"user":"532c9dc9e4b019098a6f8b30"},{"code":"(fn [s1 s2]\n  (set\n    (map #(apply vector %1)\n      (partition 2 (flatten (map (fn [x] \n        (interleave (repeat (count s2) x) s2)) s1)))))\n)","problem":90,"user":"4ff743fde4b0678c553fc38d"},{"problem":90,"code":"(fn [a b]\n   (into #{} (for [x a y b] [x y])))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn [a b]\n  (reduce #(apply conj %1 %2)\n          #{}\n          (map (fn [x]\n                 (map #(vector % x)\n                      a))\n               b)))","problem":90,"user":"52890634e4b0239c8a67ae5e"},{"code":"(fn [s1 s2] (set (for [x (seq s1) y (seq s2)] (vector x y))))","problem":90,"user":"53219cece4b09d4e7a9b54b7"},{"problem":90,"code":"(fn [a b](reduce\n           #(reduce (fn [xs y] (conj xs (vector %2 y))) % b) #{} a))","user":"5405885ee4b0addc1aec6668"},{"problem":90,"code":"(fn [s1 s2] (set (reduce concat (map (fn [x] (map #(vector x %) s2)) s1))))","user":"5515649fe4b055c2f668d4e3"},{"code":"(fn [a b] (set (reduce #(concat % %2) (map (fn [x] (map #(vector x %) b)) a))))","problem":90,"user":"53638ed2e4b0243289761e5b"},{"problem":90,"code":"#(set (apply concat (map (fn [y] (map (fn [x] (conj [y] x)) %2)) %1)))","user":"5751f2a2e4b02ea114799292"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (->\n    (for [i1 s1, i2 s2] (vector i1 i2))\n    set))","user":"5c6227fee4b0fca0c1622641"},{"problem":90,"code":"(fn [a b](set (apply concat (map #(map (partial vector %) b) a))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":90,"code":"(fn [xs ys]\n  (into #{}\n        (for [x xs\n              y ys]\n          [x y])))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":90,"code":"(fn cartesian-product [a b]\n  (into #{}\n        (for [x a\n              y b]\n          [x y])))","user":"571c2babe4b07c98581c3b73"},{"problem":90,"code":"(comp set (fn [a b]\n  (for [x a\n        y b]\n    [x y])))","user":"54b10d08e4b09f271ff37d18"},{"problem":90,"code":"(fn f [set1 set2]\n  (loop [set1 set1 set2 set2 accum #{}]\n    (if (empty? set1) (set accum)\n        (recur (sort (rest set1)) set2 (concat accum (map #(vector (first set1) %) set2))))))","user":"554dff83e4b00713264bd98d"},{"code":"(partial \n (fn [acc i j] \n   (let [f (fn [acc a b] \n             (if (empty? b) acc \n               (recur (conj acc [a (first b)]) a (rest b))))] \n     (if (empty? i) (set acc) \n       (recur (concat acc (f #{} (first i) j)) (rest i) j)))) #{})","problem":90,"user":"5273e006e4b03e8d9a4a7495"},{"problem":90,"code":"(fn [set1 set2]\n  (set (apply concat (reduce (fn [x y] (conj x (reduce (fn [l n] (conj l [n y])) [] set1))) #{} set2))))","user":"5d03944de4b0cc9c915881c5"},{"problem":90,"code":"(fn [s1 s2]\n   (let [cs1 (apply interleave (repeat (count s2) s1))\n         cs2 (flatten (repeat (count s1) (seq s2)))]\n     (loop [res #{}\n            cs1m cs1\n            cs2m cs2]\n       (if (empty? cs1m)\n         res\n         (recur (clojure.set/union res #{[(first cs1m) (first cs2m)]})\n                (rest cs1m)\n                (rest cs2m))\n       )\n     )\n   )\n)","user":"554756b8e4b0a04f79299549"},{"problem":90,"code":"(fn [set1 set2] \n  (set (apply concat \n              (map (fn [x] \n                     (map #(vector x %) set2))\n                   set1)\n              )\n       )\n  )","user":"566e6850e4b0a866af6896da"},{"problem":90,"code":"(fn my-cart[list1 list2]\n  (set (for [a list1 b list2] [a b ])))","user":"59dd387be4b0a0ac046f2502"},{"code":"(fn [s1 s2] (set (mapcat (fn [x] (map #(vector % x) s1)) s2)))","problem":90,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [as bs]\n  (set\n   (for [a as\n         b bs]\n     [a b])))","problem":90,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"#(into #{} (for [a %1, b %2] (list a b)))","problem":90,"user":"4f038567535dcb61093f6b0c"},{"problem":90,"code":"(fn [set1 set2]\n  (set (apply concat\n         (map (fn [x] (map (fn [y] (vector x y)) set2)) set1))))","user":"57f7c74ee4b0d3187e900902"},{"problem":90,"code":"(fn cp [s1 s2] (into #{} (for [x s1 y s2] [x y])))","user":"58969076e4b00487982d52a2"},{"problem":90,"code":"(fn [x y] (reduce clojure.set/union (map (fn [z] (set (map (fn [w] [w z]) x))) y)))","user":"560ff632e4b05f002753df66"},{"code":"(fn [seta setb]\n  (set (apply concat (map \n   (fn [ea]\n     (map (fn [eb] (vector ea eb)) setb))\n   seta))))","problem":90,"user":"538c3424e4b0b51d73faae58"},{"problem":90,"code":"(fn [set-1 set-2]\n  (set\n   (for [a (vec set-1)\n         b (vec set-2)]\n    [a b])))","user":"5c86b769e4b0c8042a70ce9b"},{"problem":90,"code":"(fn cross [s1 s2]\n  (set (for [i s1\n             j s2] [i j])))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn [set1 set2]\n  (set (mapcat (fn [val] (map #(vector val %) set2)) set1)))","problem":90,"user":"4ff83003e4b0678c553fc396"},{"problem":90,"code":"(fn [set1 set2]\n   (loop [s1 set1\n          out1 #{}]\n     (println \"OUT1\" out1)\n     (if (nil? (first s1))\n       (set out1)\n       (recur (rest s1) (concat out1 (loop [s2 set2\n                                            out2 #{}]\n                                       (println \"IN\" (first s1) (first s2))\n                                       (println \"OUT2\" out2)\n                                       (if (nil? (first s2))\n                                         out2\n                                         (recur (rest s2) (conj out2 (conj '[] (first s1) (first s2)))))))))))","user":"5c337305e4b0d62ef62d9f48"},{"problem":90,"code":"(fn [x y]\n  (set \n    (for [a x b y]\n      [a b])))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn[l m](set (apply concat (map #(map (partial vector %) m) l))))","problem":90,"user":"4ddbd934535d02782fcbe9fc"},{"problem":90,"code":"(fn cart [a b]\n  (letfn [(c-elt [x] (map #(vector x %) b))]\n    (set (reduce concat (map c-elt a)))))","user":"53ff8c31e4b0de5c41848603"},{"code":"(fn [a b]\r\n  (into (sorted-set) (for [x a y b] [x y])))","problem":90,"user":"4dd52e29535dae65d5c462e5"},{"problem":90,"code":"(fn [s1, s2] (set (apply concat (map #(map vector (seq s1) (repeat %)) (seq s2)))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [x y]\n  (set (for [n1 x\n             n2 y]\n         [n1 n2])))","problem":90,"user":"51857e64e4b0da5a5be3babe"},{"problem":90,"code":"(fn [coll1 coll2] \n  (set (apply concat (map (fn [x] (map #(vector x %) coll2)) coll1))))","user":"5272645de4b03e8d9a4a742c"},{"code":"(fn [a b]\n  (set (for [x a y b]\n    [x y]\n  )))","problem":90,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn p90 [s1 s2]\n  (->> (map (fn [s1e] (map (fn [s2e] [s1e s2e]) s2)) s1)\n       (reduce concat)\n       set))","problem":90,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn [a b]\n  (set (for [x a y b]\n     [x y])))","problem":90,"user":"4f1d1299535d64f603146487"},{"code":"#(set (for [s1 %1 s2 %2] [s1 s2]))","problem":90,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":90,"code":"(fn\n  [x y]\n  (set (for [x_1 x\n        y_1 y]\n    [x_1 y_1])))","user":"54e0e911e4b024c67c0cf7bc"},{"code":"(fn [a b] (into #{} (for [s a t b] [s t])))","problem":90,"user":"51cfc616e4b0e42293a22578"},{"problem":90,"code":"(fn [a b] (set (for [animal a color b] [animal color] ) ))","user":"59551e04e4b066ee0a44af20"},{"problem":90,"code":"(fn c-p [set1 set2]\n  (set (apply concat (for [s set2\n        :let [p (map #(vector % s) set1)]]\n    p))))","user":"56504dc2e4b0284900eef6bc"},{"problem":90,"code":"(fn [c1 c2]\n  (set (for [k1 c1, k2 c2] [k1 k2])))","user":"53ca41dae4b00fb29b2212c8"},{"problem":90,"code":"(fn [set1 set2] (set (mapcat #(map (fn [x] [% x]) set2) set1)))","user":"54a80855e4b09f271ff37c9e"},{"problem":90,"code":"(fn [c1 c2]\n  (reduce (fn [acc curr]\n            (into acc (map #(identity [curr %]) c2))) #{} c1))","user":"576a972ce4b0a07e8fc1811a"},{"problem":90,"code":"(fn [c1 c2] (set (for [a c1 b c2] [a b])))","user":"55af3e6be4b03311e7b732c7"},{"problem":90,"code":"(fn [set1 set2]\n   (loop [s1 set1, res #{}]\n     (if (empty? s1)\n       res\n       (recur\n         (rest s1)\n         (apply (partial conj res) (map (fn [it] [(first s1) it]) set2)))\n       )))","user":"590b3aeae4b047aa04b199d0"},{"code":"#(set\n  (for [x % y %2]\n    [x y]))","problem":90,"user":"501284d9e4b030d97e4db710"},{"problem":90,"code":"(fn [s1 s2]\n  (set \n   (mapcat \n    #(map (partial vector %1) s2)\n    s1)))","user":"5da8fa72e4b000c986472c2d"},{"code":"(fn [A B] (set (mapcat #(map vector A (repeat %)) B)))","problem":90,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":90,"code":"(fn [a b] \n  (into #{} (mapcat (fn [i] (map (fn [j] [i j]) \n                              b)) \n                 a)))","user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":90,"code":"(fn [s1 s2]\n          (set (mapcat (fn [e1]\n                    (map #(vector e1 %) s2)) s1)))","user":"5be96111e4b0f319e2d7ec70"},{"code":"(fn [p1 p2] \n  (letfn [(expandi \n           [x y] \n           (if (empty? x) []\n             (concat (expandj (first x) y) (expandi (rest x) y))))\n          (expandj\n           [x y]\n           (if (empty? y) []\n             (concat [[x (first y)]] (expandj x (rest y))))\n           )]\n  \n  (set (expandi p1 p2))))","problem":90,"user":"52faec2ee4b047fd55837004"},{"code":"(fn [x y]\n  (set (for [i y j x] [j i])))","problem":90,"user":"5099283ce4b0cae2931060af"},{"code":"#(set (for [a %1\n            b %2]\n        (vector a b)))","problem":90,"user":"51e0198ee4b01188f0627539"},{"code":"(fn [a b] (into #{} (for [x b y a] [y x])))","problem":90,"user":"51622fb8e4b009fba0926e3f"},{"problem":90,"code":"(fn product [a b]\n  (into #{} (for [x a\n        \t\t  y b]\n    \t\t\t[x y])))","user":"53350264e4b0656e627bfd73"},{"problem":90,"code":"(fn cartesian-product\n     ([row-a row-b] (cartesian-product row-a row-b []))\n     ([row-a row-b acc] (if (empty? row-b)\n                          (set acc)\n                          (recur \n                           row-a\n                           (rest row-b)\n                           (concat acc ((fn cartesian-line [set new-element acc]\n                                          (if (empty? set)\n                                            acc\n                                            (recur \n                                             (rest set)\n                                             new-element\n                                             (conj acc [(first set) new-element])))) row-a (first row-b) []))))))","user":"560039cce4b04bb52996e162"},{"problem":90,"code":"(fn\n  [set1 set2]\n  (set (for [i set1\n        j set2\n        :let [x (vector i j)]]\n      x)))","user":"56df6498e4b0ca2494a095f8"},{"problem":90,"code":"#(into #{} (for [x %1 y%2] [x y]))","user":"57b55290e4b0fbc9809a27a9"},{"problem":90,"code":"(fn [xs1 xs2]\n   (->>\n    (map (fn [x]\n           (map #(vector x %) xs2))\n         xs1)\n    (apply concat)\n    (into #{})))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":90,"code":"(fn [a b]\n(set (for [x a y b]\n[x y])))","user":"53d86564e4b0e771c302546b"},{"problem":90,"code":"(fn [coll1 coll2]\n  (into #{} (for [x1 coll1 x2 coll2] (vector x1 x2))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"code":"(fn ka[c1 c2]\n  (into #{} (reduce\n   (fn [c e] (concat c e)) []\n   (map (fn [e1]\n\t\t (map (fn [e2] (conj [] e1 e2))\n\t\t\t  c2))\n\t   c1))))","problem":90,"user":"5101192ae4b0bef64c30e266"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs\n        y ys]\n  \t[x y])))","user":"5512cd55e4b055c2f668d4ba"},{"problem":90,"code":"#(loop [c1 0\n        c2 0\n        cpset '()]\n  (if (= c2 (count %))\n    (into (sorted-set) cpset)\n    (recur (if (= c1 (- (count %2) 1))\n             0\n             (inc c1))\n           (if (and (= (mod (+ 1 c1) (count %2)) 0) (not= c1 0))\n             (inc c2)\n             c2)\n           (conj cpset (vector (nth (sort (mapcat list %)) c2) (nth (sort (mapcat list %2)) c1))))))","user":"55eeeb81e4b0121d4835fdf7"},{"problem":90,"code":"(fn cart\n  [s1 s2]\n  (into #{} (for [elem1 s1\n         elem2 s2]\n     [elem1 elem2])))","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"#(set (for [x % y %2] [x y] ))","problem":90,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":90,"code":"#(into #{} (for [f %1 s %2] [f s]))","user":"56372798e4b0bfe05bf117d0"},{"code":"(fn [aa bb]\r\n  (set (mapcat (fn [a]\r\n         (map (fn [b] (vector a b)) bb)) aa)))","problem":90,"user":"4e773be8535d324fb2983d6e"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (into\n   #{}\n   (for [x s1\n         y s2]\n     [x y])))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":90,"code":"#(into #{} (for [a %1 b %2] (vec [a b])))","user":"53e3e353e4b036ad0777e406"},{"code":"#(set(for [c % d %2] [c d]))","problem":90,"user":"50503117e4b0a02f9cffdeb5"},{"problem":90,"code":"(fn [x y] (set (map vector (cycle x) (->> y (apply list) (map #(repeat (count x) %)) flatten))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":90,"code":"#(set (for [ x %1 y %2 ] [x y] ))","user":"56f2611fe4b04a395b9a04a2"},{"problem":90,"code":"(fn [s1 s2]\n   (set (for [a s1 b s2]\n          [a b])))","user":"558bb38fe4b0277789237631"},{"code":"(fn [xs ys]\n  (set\n    (for [x xs y ys] [x y])))","problem":90,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":90,"code":"(fn [s1 s2] (reduce\n             (fn [output s2-elem]\n               (reduce\n                #(conj % [%2 s2-elem])\n                output\n                s1))\n             #{}\n             s2))\n\n;#(set (for [x %1 y %2] [x y]))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":90,"code":"#(set (apply concat (map (fn [x] (map (fn[y] [x y]) %2)) %1)))","user":"5d764e52e4b02e6b30c93524"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [s1 s1 s3 #{}]\n    (if (empty? s1)\n      s3\n      (recur (rest s1)\n             (loop [s2 s2 s4 #{}]\n               (if (empty? s2)\n                 (into s3 s4)\n                 (recur (rest s2)\n                        (concat s4 #{[(first s1) (first s2)]}))))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn [c1 c2]\n    (into #{} (for [i2 c2 i1 c1] [i1 i2])))","problem":90,"user":"4e89e939535d3e98b8023287"},{"problem":90,"code":"(fn [A B]\n  (set (for [x A\n        y B]\n    [x y])))","user":"580a0783e4b0a837a8b30d2c"},{"problem":90,"code":"(fn cartesian [x y]\n  (loop [a x\n         resulta #{}]\n    (if (> (count a) 0)\n      (recur (rest a)\n             (loop [b y\n                    ai (first a)\n                    resultb resulta] \n                   (if (> (count b) 0)\n                     (recur (rest b) ai\n                            (conj resultb (vector ai (first b)))) \n                     resultb)))\n      resulta)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":90,"code":"(fn [a b]\n  (set \n    (apply concat \n      (for [x a]\n        (map (partial vector x) b)))))","user":"56327168e4b0bfe05bf117a5"},{"problem":90,"code":"(fn [a b] \n  (loop [s #{}, x a]\n    (if (empty? x)\n      (set s)\n      (recur (concat s (map vector (repeat (first x)) b)) (drop 1 x))\n)))","user":"54524afbe4b0e397800069bc"},{"problem":90,"code":"(fn [col1 col2] (set (for [a col1 b col2] [a b])))","user":"59874ff6e4b021a7a535fea1"},{"problem":90,"code":"#(set \n  (for [x1 %1, x2 %2] \n    [x1 x2]))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [s1 s2] (set (mapcat (fn [i] (map (fn [j] (vector i j)) s2)) s1)))","problem":90,"user":"524c7fcfe4b0752c4cb68cbd"},{"problem":90,"code":"(fn cart2\n  [s1 s2]\n  (->> s1\n       (map (fn [x] [x s2]))\n       (mapcat (fn [[x s]] (map (fn [y] [x y]) s)))\n       (set)))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":90,"code":"(fn foo [a b]\n    (loop [a a\n          acc #{}]\n        (if (empty? a)\n            acc\n            (let [x (first a)\n                  xs (rest a)]\n                (recur xs (set (concat acc (map (fn [y] (list x y)) b))))))))","user":"600ae927e4b074f607df6689"},{"problem":90,"code":"(fn cp\n  [xs ys]\n  (set (for [x xs\n             y ys]\n         [x y])))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [a b] (into #{} (for [x a, y b] [x y])))","problem":90,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":90,"code":"(fn P\n  [map1 map2]\n  ;(map #(hash-map % (first map2)) map1))\n  (if (coll? map1)\n    (set (apply concat (map #(P % map2) map1)))\n    (map #(vector map1 %) map2)))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [s1 s2]\n  (set (for [x1 s1 x2 s2] [x1 x2])))","problem":90,"user":"4f072644535dcb61093f6c20"},{"code":"(fn cart [s1 s2]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"529ce629e4b04e0c58e87b6e"},{"problem":90,"code":"(fn [as bs]\n  (set\n   (mapcat\n    (fn \n      [a]\n      (map (partial vector a)\n           bs))\n    as)))","user":"53de7484e4b0d874e779ae35"},{"problem":90,"code":"(fn                                                                                                            \n   [a b]                                                                                                                                                     \n   (set (for [x a y b]                                                                                                                                       \n          [x y])))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":90,"code":"(fn [a b]\n  (->> (for [x a y b] [x y])\n       (into #{})))","user":"54da46e5e4b024c67c0cf753"},{"problem":90,"code":"(fn [a b] (set (for [x a,y b] [x y])))","user":"515ef58be4b02c55805ea237"},{"code":"(fn [a b] (set (for [a a b b] [a b])))","problem":90,"user":"4e6dc95a535d5021c1a895f1"},{"problem":90,"code":"(fn [a b]\n   (set (for [x a\n          y b]\n      (conj [] x y))))","user":"55a372f1e4b0acc240e31537"},{"problem":90,"code":";(fn [x y]\n;\t(set (mapcat\n;\t\t\t\t(fn [a]\n;\t\t\t\t\t(map (fn [b] [a b]) y))\n;\t\t\t\tx)))\n\n#(set (for [x % y %2] [x y]))","user":"5f6a583ae4b02876ed9fd046"},{"problem":90,"code":"(fn cart \n  [s1 s2]\n  (into #{} \n        (mapcat (fn [x]\n                  (map (fn [y] \n                         (vector x y)) \n                       s2)) \n                s1)))","user":"52561295e4b0541d1855ba03"},{"problem":90,"code":"(fn [s1 s2]\n  (->> (mapcat #(interleave (repeat %) s2) s1)\n       (partition 2)\n       (map vec)\n       (set)))","user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn [a b](into #{} (for [x a y b]\n   [x y])))","problem":90,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [s1 s2] (set (apply concat (for [x s1] (for [y s2] (vector x y))))))","problem":90,"user":"4e58c019535d8a8b8723a297"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat (apply juxt (map #(partial vector %) s1)) s2)))","user":"5a536cf2e4b05d388ecb6c10"},{"problem":90,"code":"(fn [x y]\n   (set (for [xs x ys y] [xs ys])))","user":"53b12c76e4b047364c04448a"},{"code":"(fn [x y]\n\n  (set (map vector (sort (take (* (count x) (count y)) (cycle x))) (take (* (count x) (count y)) (cycle y))))\n  )","problem":90,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn [a b]\n  (into #{} (for [x a y b]\n    [x y])))","problem":90,"user":"52173464e4b082aa80a88c75"},{"problem":90,"code":"(fn f90 [coll-1 coll-2]\n  (->> (for [coll1 coll-1\n         coll2 coll-2]\n     [coll1 coll2])\n       (into #{})))","user":"57bbc9bde4b05aa3c4741c31"},{"code":"#(set(for[x % y %2] [x y]))","problem":90,"user":"52271ffee4b04e78ff2e19a9"},{"problem":90,"code":"(fn cart [s1 s2]\n  (set\n    (for [a s1\n          b s2]\n      [a b])))","user":"598858d0e4b021a7a535feb5"},{"code":"(fn [a b] \n           (set (for [x a y b]\n                 [x y])))","problem":90,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn p90\n  [a b]\n  (set\n    (for [i a, j b]\n      [i j])))","problem":90,"user":"4e7d4544535db169f9c796d0"},{"problem":90,"code":"(fn cartesian [x y]\n  (into #{} (for [a x b y]\n              [a b])))","user":"55d9743ae4b0e31453f64aca"},{"code":"#(set (for [_ % __ %2] [_ __]))","problem":90,"user":"4fc6e1a8e4b0ee37620e181d"},{"code":"(fn [set1 set2] (into #{} (for [x set1 y set2] [x y])))","problem":90,"user":"51eec1a6e4b0871fa145d98d"},{"problem":90,"code":"#(set (for [a (vec %1) b (vec  %2)] [a b]))","user":"5fd12b42e4b07e53c2f3f02f"},{"problem":90,"code":"(fn cp[as bs] \n  (->>\n   \t(map \n      (fn [a] (map #(vector a %) bs))\n      as\n    )\n    (map vec)\n    (apply concat)\n    set\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"problem":90,"code":"(fn [a b]\n  (into #{} (mapcat (fn [x] (map #(vector x %) b)) a)))","user":"562d869be4b0a45d2ff8301f"},{"problem":90,"code":"#(into #{} (for [a %1\n                  b %2]\n              [a b]))","user":"5d9e8e40e4b000c986472bc2"},{"problem":90,"code":"(fn [x y]\n    (into #{} (for [x' x y' y] [x' y'])))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn [co1 co2] (set (mapcat (fn [x] (map vector co1 (repeat x))) co2)))","problem":90,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"#(set (for [a %1  b %2]  [a b]))","problem":90,"user":"5016ac54e4b052339a490e7b"},{"problem":90,"code":"(letfn \n\t[(partial-cartisian [n s]\n  \t\t(set (map #(vector n %) s)))\n\t (full-cartisian [s1 s2 combs]\n  \t \t(if (seq s1)\n    \t(full-cartisian (rest s1 ) s2 \n      \t\t(clojure.set/union (partial-cartisian (first s1) s2) combs))\n       \t\t\tcombs))]\n  \n#(full-cartisian %1 %2 #{}))","user":"56ede653e4b04a395b9a0449"},{"code":"(fn [a b] (set (for [a1 a\n                       b1 b]\n             [a1 b1])))","problem":90,"user":"50956c2be4b087f34d351ab2"},{"problem":90,"code":"(fn [x y] (set(for[m x n y] [m n])))","user":"580d7bdae4b0849f6811b73c"},{"problem":90,"code":"#(set\n  (for [a % b %2]\n   [a b]))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn [set1 set2]  \n  (loop [s1 set1\n         fs1 (first s1)\n         r #{}]\n    (if-not s1\n            (clojure.set/union r (set (for [i set2] [fs1 i]))) \n            (recur (next s1)\n                   (first s1)\n                   (clojure.set/union r (set (for [i set2] [fs1 i])))))))","problem":90,"user":"516081e7e4b009fba0926e28"},{"problem":90,"code":"#(into #{} (for [s1 %1 s2 %2]\n   [s1 s2]))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs\n             y ys] [x y])))","user":"55702081e4b09a3098a52529"},{"problem":90,"code":"(fn cartesianProduct[set1 set2]\n  (into \n   #{}\n   (for [x set1 y set2] (vector x y))))","user":"5f8330b8e4b01aacbe7a270f"},{"problem":90,"code":"(fn [left right]\n   (set (for [x left y right]\n      [x y])))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":90,"code":"(fn [set1 set2]\n  (set (reduce (fn [product x1] (into product (map (fn [x2] [x1 x2]) set2))) [] set1))\n )","user":"5de6484ce4b0986d99407f66"},{"problem":90,"code":"(fn [as bs] \n  (into #{} \n        (for [a as b bs]\n          [a b])))","user":"5abbbd46e4b073f1774426db"},{"code":"(fn [s1 s2] \n  (loop [as1 s1 ac1 '()]\n    (if-let [e1 (first as1)]\n      (recur (rest as1)\n        (concat ac1\n          (loop [as2 s2 ac2 []]\n            (if-let  [e2 (first as2)]\n              (recur (rest as2)\n                (conj ac2 [e1 e2]))\n                  ac2))))\n                            (set ac1))))","problem":90,"user":"4dcc5aff535d5973398f9293"},{"problem":90,"code":"(fn [s1 s2] (->> (mapcat (fn [x] (zipmap s1 (repeat x))) s2)\n                        (into #{})))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b]\n         [x y])))\n\t\t \n\t\t ;; for can do cartesian product","user":"53be3ee7e4b0d9a98559a6df"},{"problem":90,"code":"(fn [a,b] (set (for [x a y b] (vector x y))))","user":"5f686436e4b02876ed9fd03c"},{"problem":90,"code":"(fn [a b]\n  (set\n   (for [x a\n         y b]\n     [x y])))","user":"540c54a7e4b0addc1aec6700"},{"code":"(fn [a b] (set (partition 2 (flatten (map (fn [x] (map #(vector x %) b)) a)))))","problem":90,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":90,"code":"(fn mult [xs ys]\n   (set (for [x xs, y ys] [x y]))\n\n  )","user":"564ecc9ee4b0284900eef6a1"},{"code":"#(set (for [a %1 b %2] (vector a b)))","problem":90,"user":"51592b81e4b0394f658fe22c"},{"code":"(fn [a b]\n  (set (for [x a\n             y b]\n    [x y])))","problem":90,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":90,"code":"(fn cprod [s1 s2]\n   (set (for [a s1, b s2] [a b])))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn cartesian-product [A B]\n  (set (for [x A\n             y B]\n         [x y])))","problem":90,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn cart\n  [a-set b-set]\n  (set (for [a a-set b b-set] [a b])))","problem":90,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs y ys]\n    [x y])\n  ))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"#(set (for [i % j %2]\n  [i j]))","problem":90,"user":"4fdbc075e4b05e33b9224f61"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce (fn [result input]\n            (apply conj result (map #(vector input %) s2)))\n          #{} s1))","user":"555521a5e4b0deb715856e12"},{"code":"(fn [a b]\n  (set (apply concat\n    (map\n      (fn [x]\n        (map (fn [y] [x y]) b))\n      a))))","problem":90,"user":"4e7e05a6535db169f9c796fe"},{"code":"(fn [a b]\n  (set (for [i a j b] [i j])))","problem":90,"user":"4f050dec535dcb61093f6bef"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [x a y b] (vector x y))))","user":"60654263e4b069485764ddc9"},{"problem":90,"code":"(fn [x y]\n    (set\n      (for [i x j y]\n        [i j]\n      )\n    )\n  )","user":"59021fede4b0438e51c2d04d"},{"problem":90,"code":"(fn [a b]\n  (set (for\n         [x a\n          y b]\n         [x y])))","user":"5db5d09be4b010eb3c36cd31"},{"code":"(fn [v1 v2] (set (for [i v1 j v2] [i j])))","problem":90,"user":"512d3304e4b040332b905b2d"},{"problem":90,"code":"(fn cart\n  [a b]\n  (set (for [x a\n             y b]\n            [x y])))","user":"5aa2f1dee4b0d174b936c865"},{"problem":90,"code":"#(loop [a %1 b %2 out #{}] (if (empty? a) out (if (empty? b) (recur (rest a) %2 out) (recur a (rest b) (conj out [(first a) (first b)])))))","user":"57f9e0bce4b0d3187e900956"},{"code":"(fn [s1 s2] (set (for [x s2 y s1] [y x])))","problem":90,"user":"4ed286d4535d44c135fd68d7"},{"code":"(fn cartesian-product [x y]\n  (set (for [a x b y] [a b])))","problem":90,"user":"516dc88ae4b046df6fbb76a1"},{"problem":90,"code":"(fn [xs ys]\n  (reduce\n   clojure.set/union\n   (map\n    #(into #{} (map vector (repeat %) ys))\n    xs\n    )\n   )\n  )","user":"58334d18e4b089d5ab817c97"},{"problem":90,"code":"(fn [a b]\n  (set\n    (for [x a\n          y b]\n       [x y])))","user":"57b19fa1e4b0fbc9809a2754"},{"code":"(fn cartprod [initxs initys]\r\n  (loop [ret #{}, xs initxs, ys initys]\r\n    (if (empty? xs)\r\n      ret\r\n      (if (empty? ys)\r\n        (recur (conj ret [(first xs) (first initys)]) (rest xs) initys)\r\n        (recur (conj ret [(first xs) (first ys)]) xs (rest ys))))))","problem":90,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [s1 s2] (set\r\n  (mapcat (fn [x] (map #(identity [% x]) s1)) s2)))","problem":90,"user":"503354c3e4b0c6c1199c710c"},{"problem":90,"code":"#(set (for [x %1 y %2] [x y]))\n;#(set (apply concat (map (fn [x] (map (fn [y] [x y]) %2)) %1)))","user":"5cfee28de4b0cc9c91588185"},{"problem":90,"code":"(fn [X Y]\n     (into #{} (for [x X y Y] [x y])))","user":"54eff2bee4b024c67c0cf88d"},{"problem":90,"code":"#(apply hash-set (for [i %1 j %2] [i j]))","user":"55d44dd6e4b0e31453f64a75"},{"problem":90,"code":";; First solution\n;(fn [xs ys] \n;  (set (mapcat \n;        (fn [y] (map #(vector %1 y) xs)) \n;        ys)))\n#(set (for [x %1 y %2] [x y]))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [xs sx]\n  (loop [xs xs\n         sx sx\n         xx (empty sx)]\n    (if (empty? xs) xx\n      (recur (rest xs) \n             sx \n             (into xx \n                   (map #(vector (first xs) %) sx))))))","problem":90,"user":"509eeb3be4b08df8156e9e37"},{"problem":90,"code":"(fn f [s1 s2]\n  (set (for [\n        x s1 \n        y s2]\n    [x y])))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [set1 set2]\r\n       (set (for [i set1\r\n             j set2]\r\n       [i j])))","problem":90,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn f [xs ys]\n  (if-let [[z & zs] (seq xs)]\n    (reduce clojure.set/union (f zs ys) (map (fn [y] #{[z y]}) ys))\n    #{}))","problem":90,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":90,"code":"(fn cartesian [xin yin]\n(set  (for [x xin\n                   y yin]\n               [x y]))\n)","user":"58a17511e4b02bd94d917eb4"},{"code":"(fn\n  [x y]\n  (set (for [s1 x\n             s2 y] [s1 s2])))","problem":90,"user":"52f3af46e4b05e3f0be25f14"},{"problem":90,"code":";;(fn [xs ys] (set (mapcat (fn [x y] [x y]) xs ys)))\n;;\n#(set (for [x %1 y %2] [x y]))","user":"595fd721e4b066ee0a44b06e"},{"problem":90,"code":"(fn getcartesian [xs1 xs2]\n  (set (for [x1 xs1 x2 xs2] [x1 x2])))","user":"592518e8e4b072a2710fce67"},{"problem":90,"code":"(fn [a b]\r\n  (set (apply concat (map #(map vector a %) (map (partial repeat (count a)) b)))))","user":"546e1142e4b00cfc9eacc199"},{"problem":90,"code":"(fn [a b]\n   (reduce\n     (fn [acc ae]\n       (reduce\n         (fn [acc be]\n           (conj acc [ae be]))\n         acc\n         b))\n     #{}\n     a))","user":"5429986ce4b01498b1a71b3b"},{"problem":90,"code":"(fn [a b] (set (reduce concat ((fn lol [x y] (if (not (empty? x)) (cons (map #(vector (first x) %1) y) (lol (rest x) y)))) a b))))","user":"58840023e4b0f1effa3b768b"},{"problem":90,"code":"(fn [x y]\n    (into #{} (for [a x b y] [a b])))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [s t]\r\n    (reduce\r\n\t      #(into %1 (map (fn [a b] [b a]) t (repeat %2))) \r\n        #{} \r\n        s))","problem":90,"user":"4e821ca5535db62dc21a62c2"},{"problem":90,"code":"(fn [lhs rhs]\n  (reduce (fn [result right]\n            (reduce (fn [result left]\n                      (conj result [left right]))\n                    result\n                    lhs))\n          #{}\n          rhs))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn cp [s1 s2]\n  (cond\n  \t(empty? s1) #{}\n  \t(empty? s2) #{}\n  \t:else (set (concat (map (fn [x] [(first s1) x]) s2) (cp (rest s1) s2)))\n))","problem":90,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"#(set (for [i % j %2][i j]))","problem":90,"user":"5102489de4b00c483ae176f6"},{"problem":90,"code":"#(set (for [a %1\n              b %2] [a b]))","user":"53613db8e4b0243289761e41"},{"problem":90,"code":"#(set (for [rank %1 color %2] [rank color]))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [x y] (apply hash-set (for [i x j y] [i j])))","problem":90,"user":"521b73f5e4b0c4ef0be83043"},{"problem":90,"code":"#(set \n      (for [x %1, y %2] [x y]))","user":"53c38b8ce4b00fb29b22127b"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (set (for [x s1 \n             y s2] \n         [x y])))","user":"58ed713de4b056aecfd47d84"},{"problem":90,"code":"#(set (reduce concat (map (fn [n] (set (map (fn [m] (vector n m)) %2))) %1)))","user":"5913fde8e4b0163c97b36f13"},{"problem":90,"code":"(fn [a b] (set (for [x a y b] (vector x y))))","user":"5169b23fe4b03f62cda68cee"},{"problem":90,"code":"(fn cartesean-product [set-a set-b]\n  (set (mapcat (fn [item-a]\n                 (map (fn [item-b]\n                        [item-a item-b])\n                      set-b))\n               set-a)))","user":"57e9a77ae4b0bfb2137f5b35"},{"code":";(fn [a b]\n; (set\n;  (mapcat\n;    (fn [x]\n;     (map #(conj [x] %) b)) a)))\n\n#(set(for [x %1 y %2] [x y]))","problem":90,"user":"52d469c8e4b09f7907dd1330"},{"problem":90,"code":"#(set (for [a %1\n            b %2]\n          [a b]))","user":"554e4d65e4b00713264bd993"},{"problem":90,"code":"(fn [set1 set2]\n     (set (mapcat (fn [sym]\n              (map #(vector sym %) set2)) set1)))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":90,"code":"(fn cartprod [s1 s2]\n  (set (mapcat #(map vector (repeat %) s2) s1)))","user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [x y] (set (mapcat (fn [x] (map #(vector x %) y)) x)))","problem":90,"user":"4f0c84ce535d0136e6c2230e"},{"problem":90,"code":"#(set\n  (for [a %1 \n        b %2]\n   [a b]))","user":"52540bcce4b0541d1855b952"},{"code":"(fn [as bs] (set (for [a as b bs] [a b])))","problem":90,"user":"4ddc1c89535d02782fcbea01"},{"problem":90,"code":"#(set\n   (for [a (vec %1) b (vec %2)] [a b]))","user":"52e087dde4b09f7907dd1412"},{"problem":90,"code":"(fn cp [set1 set2]\n  (set\n    (for [x set1\n          y set2]\n      (vector x y))))","user":"5e0d948fe4b099d064962f98"},{"problem":90,"code":"#(set (mapcat (fn [el] (partition 2 (interleave (repeat el) %2))) %))","user":"594d4c57e4b07ddc2dafae87"},{"code":"#( set (for [ x (seq %) y (seq %2) ] [x y] ))","problem":90,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":90,"code":"(fn f [s1 s2]\n  (->> (for [x s1\n             y s2]\n         [x y])\n       (set)))","user":"5493d908e4b0b312c081ff52"},{"problem":90,"code":"#(->> (for [x %1 y %2] [x y]) (into #{}))","user":"560e9a2de4b05f002753df52"},{"code":"(fn [s1 s2]\n  (set(mapcat #(map (fn[x] (vector % x)) s2) s1)))","problem":90,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":90,"code":"#(set (for [i (vec %1) j (vec %2)] [i j]))","user":"57fd7344e4b0d3187e9009b6"},{"problem":90,"code":"(fn cp\n  [s1 s2]\n  (into #{} (for [s1 s1\n        s2 s2]\n    [s1 s2]))\n  )","user":"5ac37d0fe4b0e27600da7718"},{"problem":90,"code":"(fn [a b]\n\t(let [final \n          (for [x a y b]\n  \t\t\t[x y])]\n      (set final)))","user":"5935151ee4b072a2710fd084"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 y s2] (list x y))))","user":"58186016e4b0c0e9c07b83ad"},{"code":"#(set (reduce concat \n  (map (fn [x] \n    (map (fn [y] (vector x y)) %2)) %)))","problem":90,"user":"4f067029535dcb61093f6c12"},{"problem":90,"code":"(fn [a b]\n(into #{} (for [c a d b]\n[ c d ]))\n)","user":"5505d137e4b086ebe8a79c8c"},{"code":"(fn [A, B] (into #{} (for [a A\n                           b B]\n                        [a b])))","problem":90,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn [r l] (set \n  (partition 2\n    (flatten \n      (for [x l] \n        (for [y r] \n          [y x]\n            ))))))","problem":90,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn [x y] (set (for [x x, y y] [x y])))","problem":90,"user":"519c4111e4b0a1d87b003458"},{"problem":90,"code":"#(set (for [aa %1\n            bb %2] [aa bb]))","user":"5f419985e4b0955706451fab"},{"problem":90,"code":"#(set\n  (for [x %1\n        y %2]\n    [x y]))","user":"57ffd1a9e4b0a837a8b30c2a"},{"code":"(fn [s1 s2] (set (apply concat (map (fn [c] (map (fn [b] (vector c b)) s2)) s1))))","problem":90,"user":"51f2851fe4b0210f90e7454b"},{"problem":90,"code":"#(set (for [i %1, j %2]\n   [i j]))","user":"546c1b2ce4b00cfc9eacc174"},{"code":"(fn [q pp] (set   (let [part (fn [ss e] (loop [s ss r #{}]\n     (if (empty? s) r\n       (recur (rest s) (cons [(first s) e] r)))))]\n     \n       (loop [p pp r #{}]\n         (if (empty? p) r\n           (recur (rest p) (concat r (part q (first p)))))))))","problem":90,"user":"4e8b98fc535d65386fec2124"},{"code":"#(into #{}\r\n  (reduce concat\r\n    (map\r\n      (fn [x]\r\n        (map vector (iterate identity x) %2))\r\n      %1)))","problem":90,"user":"4ee40938535d10e5ff6f5375"},{"problem":90,"code":"(fn [xs ys] (set (apply concat (map (fn [x] (map (fn [y] [x y]) ys)) xs))))","user":"5901158de4b0438e51c2d039"},{"problem":90,"code":"#(apply\n  hash-set\n  (for [x %1 y %2]\n    [x y]))","user":"5ba15075e4b0a20761a2339e"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (apply concat (map (fn [e1] (map (fn [e2] [e1 e2]) s2)) s1))))","user":"57f80350e4b0d3187e90090c"},{"problem":90,"code":"(fn [set2 set1]\n    (into #{} (mapcat (fn [x]\n                        (map #(vector % x)\n                             set2))\n                      set1)))","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [a b]\n  (reduce (fn [x y] \n            (apply conj x (map #(vector y %) b))) #{} a))","problem":90,"user":"4e74e119535d7a570dd295bc"},{"code":"(fn [c1 c2] (set (mapcat (fn [x] (map (fn [y] [x y]) c2)) c1)))","problem":90,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn cart [c1 c2]\n  (if (or (empty? c1) (empty? c2))\n    #{}\n    (set (concat (map #(vector (first c1) %) c2)\n            (cart (rest c1) c2)))))","problem":90,"user":"503e6047e4b06c4e0e1fa266"},{"problem":90,"code":"(fn cartesian* [xs ys] (set (for [x xs y ys] [x y])))","user":"4eb47bb1535d7eef30807362"},{"problem":90,"code":"#(reduce into #{} (map (partial (fn [a b] (map (partial conj [b]) a)) %2) %1))","user":"53c1b787e4b00fb29b221266"},{"problem":90,"code":"(fn [x y]\n (set (for [a x\n        b y]\n     (vector a b))))","user":"534fa9dae4b084c2834f4acf"},{"problem":90,"code":"(fn [x y]\n  (loop [acc #{}\n         coll x]\n    (if (empty? coll)\n      acc\n      (recur (into acc (map #(vec [(first coll) %]) y)) (rest coll)))))","user":"556a6137e4b09a3098a524e0"},{"problem":90,"code":"(fn cart [x y] (into #{} (apply concat (map (fn [i] (map #(vector i %)  y) )   x) ) ))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":90,"code":"(fn [A B]\n  (set (for [ a A\n         b B]\n    [a b])))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":90,"code":"(fn [m1 m2]\n (set (for [ a m1\n             b m2 ]\n        [a b])\n ))","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":90,"code":"(fn [xs ys] (set (for [x xs y ys] \n  [x y]                               \n)))","user":"5d9e7971e4b000c986472bc1"},{"code":"#(set (apply concat (for [x %] (for [y %2] [x y]))))","problem":90,"user":"4ee85476535d93acb0a6687c"},{"code":"(fn [c1 c2] (reduce clojure.set/union (map (fn [i] (reduce #(clojure.set/union %1 #{[i %2]}) #{} c2)) c1)))","problem":90,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":90,"code":"(fn [set1 set2]\n  (set \n    (for [s1 (seq set1)\n          s2 (seq set2)]\n      [s1 s2]\n    )\n )\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a, y b]\n         [x y])))","user":"5afecee2e4b0cc2b61a3bd28"},{"code":"(fn [v1 v2]\n  (set (reduce into '() (map (fn [x] (map (fn [y] [x y]) v2)) v1))))","problem":90,"user":"516282c3e4b0e6d3c4734711"},{"problem":90,"code":"(fn [A B]\n  (into #{}\n        (for [x A y B] (vector x y))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":90,"code":"(fn cart [x y]\n  (set (for [a x b y] [a b])))","user":"52ba2639e4b07a9af57922cb"},{"code":"(fn [l1 l2]\n  (let [n (* (count l1) (count l2))]\n    (into #{}\n      (map vector\n        (sort (take n (cycle l1))) (take n (cycle l2))))))","problem":90,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn [xs ys]\n  (set(for [x xs y ys] [x y])))","problem":90,"user":"4edeac6b535d10e5ff6f533a"},{"code":"(fn [a b] (set (apply concat (map (fn [x] (map #(vector x %) b)) a))))","problem":90,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":90,"code":"(fn cp [s1 s2]\n  (into #{}\n    (for [x s1 y s2]\n      [x y])))","user":"5e144bd5e4b0a047bd49f6e7"},{"problem":90,"code":"(fn [col1 col2] \n  (reduce (fn [col el] (into col (map #(vector el %) col2))) \n          #{} \n          col1))","user":"5956c6dae4b066ee0a44af61"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b]\n[x y])))","user":"59438419e4b060784b3b7929"},{"code":"(fn [q1 q2] (set (for [x1 q1\n                       x2 q2]\n                      [x1 x2])))","problem":90,"user":"5053de37e4b0b1b9d1860ea8"},{"problem":90,"code":"(fn [a b]\n  (set (mapcat (fn [n] (map (partial vector n) b)) a)))","user":"53791ab7e4b06839e8705e4d"},{"problem":90,"code":"(fn [set1 set2]\n  ;(into {} (interleave set1 set2))\n  ;(interleave set1 set2)\n  ;(println set2)\n  ;(concat set1 set2)\n  ;(apply sorted-set (filter set2 set1))\n  (set (for [x set1 y set2] [x y]))\n)","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":90,"code":"; the order of the set is undefined\n#(into #{} \n  (for [x %1\n        y %2]\n    [x y]))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":90,"code":"(fn [a b] (into #{} (for [x a\n                y b]\n            [x y])))","user":"5b198eace4b03cfeda66ecbb"},{"problem":90,"code":"#(set\n  (for [a (vec %1)\n        b (vec %2)]\n    [a b]))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":90,"code":"(fn [a b] (set(for [x a y  b] (vec(list x y)))))","user":"528b3f5ae4b0239c8a67ae93"},{"problem":90,"code":"#(into #{} (for [x % y %2] (vector x y)))","user":"528d6b10e4b0239c8a67aec3"},{"code":"(fn [a b]\n  (loop [x a\n         results (set [])]\n    (if (empty? x) results\n      (recur (rest x) (into results (map (fn [j] [(first x) j]) b))))))","problem":90,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":90,"code":"(fn [a b] (into #{} (for [n1 a n2 b] (vec (list n1 n2)))))","user":"575fec91e4b08062f99a4e89"},{"problem":90,"code":"(fn [xs ys]\n  (loop [res #{}\n         is xs]\n    (if (empty? is)\n      res\n      (recur (loop [r res js ys]\n               (if (empty? js)\n                 r\n                 (recur (conj r [(first is) (first js)]) (rest js))))\n             (rest is)))))","user":"5eee7311e4b07c55ae4a0510"},{"problem":90,"code":"(fn [s t]\n  (into #{} (for [a s b t] [a b]))\n  )","user":"52dc7344e4b09f7907dd13cf"},{"code":"#(set (concat (for [v %1 w %2] [v w])))","problem":90,"user":"521e8227e4b0dd19981ad082"},{"problem":90,"code":"(fn [s1 s2]\n     (loop [a s1 rs #{}]\n        (if (empty? a)\n          rs\n          (recur (rest a) (loop [z (first a) b s2 qs rs]\n                            (if (empty? b)\n                              qs\n                              (recur z (rest b) (conj qs [z (first b)])))))\n                 ))\n        )","user":"5763818ae4b0994c1922fbc7"},{"code":"#(into #{} (for [i %1 j %2]\n               [i j]))","problem":90,"user":"51937eb3e4b04df54c098022"},{"problem":90,"code":"(fn [xs ys] (set (for [x xs y ys]\n            \t[x y]\n            ))\n  )","user":"5aba34c5e4b073f1774426a3"},{"problem":90,"code":"(fn [xs ys]\n   (set (for [x xs y ys]\n      [x y]\n    ))\n  \n  )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn cartesian-product [s1 s2]\n    (reduce #(into %1 (map (partial vector %2) s2)) #{} s1))","problem":90,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":90,"code":"(fn test [set1 set2]\n    (set (for [a set1\n          b set2]\n      [a b]))\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":90,"code":"#(into #{} (mapcat (fn [z] (map vector (repeat (count %2) z) %2)) %))","user":"549def9ce4b0f3d1d8e70f99"},{"code":"(fn [xs ys] \n  (set\n    (for [x (seq xs) y (seq ys)] \n      [x y])))","problem":90,"user":"4f2e0369e4b0d6649770a064"},{"problem":90,"code":"(fn [s1 s2]\n  (set(for [x s1 y s2] [x y])))","user":"5ac4d1f6e4b0e27600da7735"},{"code":"#(set (mapcat (fn [m] (map (fn [n] (vector m n)) %2)) %))","problem":90,"user":"4fb99483e4b081705acca2da"},{"problem":90,"code":"(fn [cx cy]\n  (set (for [e1 cx e2 cy]\n          (list e1 e2))))","user":"60521ea8e4b056659d634205"},{"code":"(fn [set1 set2]\n  (set (apply concat (map (fn [item1] (map (fn [item2] [item1 item2]) set2)) set1))))","problem":90,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn [s1 s2]\n  (set\n    (for [a s1\n          b s2]\n      [a b])))","problem":90,"user":"5336a339e4b0e30313ee6c7d"},{"problem":90,"code":"(fn cart [x y]\n  (set (for [value x\n             suit y]\n         [value suit])))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":90,"code":"(fn [f s] (set (for [eka f toka s] [eka toka])))","user":"57c314f3e4b05aa3c4741cba"},{"problem":90,"code":"(fn cartprod [s1 s2]\n  (set (reduce\n   concat\n   (map\n    (fn [x]\n      (map\n       (fn [y] (vector x y))\n       s2\n       )\n      )\n    s1\n    )\n   )\n  )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":90,"code":"#(reduce (fn [rx x] \n(reduce (fn [ry y] (conj ry [x y])) rx %2)\n) #{} %1)","user":"5b7bc82ce4b047b03b203726"},{"problem":90,"code":"(fn [xs ys]\n  (set\n  \t(for [x xs y ys]\n  \t  [x y]\n  \t)\n  )\n)","user":"57d031d6e4b0bd073c202354"},{"problem":90,"code":"(fn [set-a set-b] (set (for [x set-a y set-b] [x y])))","user":"5227eacee4b0186687e23a5e"},{"problem":90,"code":"(fn [x y]\n  (set (for [one-x x one-y y]\n            [one-x one-y])))","user":"562c2fc2e4b058fa18c5a6d7"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [x set1\n             y set2]\n         [x y])))","user":"583e02fce4b089d5ab817da5"},{"problem":90,"code":"(\n fn  [a b]\n        (set (reduce into (map (fn [x] \n                (map #(vec (interleave #{x} #{%})) b)) a))))","user":"52457931e4b08ba239308107"},{"code":"(fn [& seqs]\n  (let [seq (vec seqs)]\n    (set (map #(vec %) (let [v-original-seqs (vec seq)\n          step\n          (fn step [v-seqs]\n            (let [increment\n                  (fn [v-seqs]\n                    (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n                      (if (= i -1) nil\n                          (if-let [rst (next (v-seqs i))]\n                            (assoc v-seqs i rst)\n                            (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n              (when v-seqs\n                (cons (map first v-seqs)\n                      (lazy-seq (step (increment v-seqs)))))))]\n      (when (every? first seqs)\n        (lazy-seq (step v-original-seqs)))))\n                             )))","problem":90,"user":"50621cbde4b0341461c88951"},{"problem":90,"code":"(fn [set1 set2] (set (mapcat (fn [x] (map (fn [y] [x y]) set2)) set1)))","user":"54f0a1f2e4b024c67c0cf8a0"},{"code":"(fn cartesian-product\n  [s1 s2]\n  (let [mapvec (fn [s v] (map #(vector % v) s))]\n    (into #{} (reduce #(concat %1 (mapvec s1 %2)) #{} s2))))","problem":90,"user":"524f4256e4b0541d1855b808"},{"problem":90,"code":"(fn [set1 set2] \n  (set (map #(vector %1 %2) (cycle set1) ((fn [ll x] (mapcat #(repeat x %) ll) ) set2 (count set1)) ))\n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":90,"code":"(fn [a b](set (for [x a y b][x y])))","user":"604f4be1e4b0b7ec0ac60ace"},{"problem":90,"code":"#(set (for [a (vec %1) b (vec %2)]\n        [a b]))","user":"5cf62ecce4b087f62be35aa7"},{"code":"(fn [xs ys]\n  (set (mapcat \n   (fn [x]\n     (mapcat (fn [y] [[y x]]) xs)) ys)))","problem":90,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn [set-a set-b] (set\n  (for [e1 set-a\n        e2 set-b]\n    [e1 e2])))","problem":90,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [s1 s2]\n  (into #{} \n        (for [x s1 y s2]\n    \t\t[x y])))","problem":90,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn cart [s1 s2]\r\n  (set (mapcat (fn [x] (map (fn [y] [x y]) s2)) s1)))","problem":90,"user":"4f697a66e4b07046d9f4ef8a"},{"problem":90,"code":"(fn [c1 c2]\n   (apply hash-set (for [x c1 y c2] [x y])))","user":"54357066e4b0b6b47310fcfd"},{"problem":90,"code":"#(set (for [\n       x %1\n       y %2     \n      ]\n       [x y]))","user":"588e4e05e4b00487982d5188"},{"problem":90,"code":"(fn cartesian-product [left right]\n  (letfn [(zip [xs current]\n            (map vector (repeat current) xs))]\n    (let [cartesian (mapcat (partial zip right) left)]\n      (into #{} cartesian ))))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"(fn [xs ys] (set (mapcat #(map (partial list %) ys) xs)))","problem":90,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":90,"code":"(fn [set1 set2]\n     (into #{}\n           (for [x set1\n                 y set2]\n             [x y]\n             )\n           ))","user":"5fd361f2e4b07e53c2f3f04e"},{"code":"(fn [x y]\n  (loop [xs x ys y result #{}]\n    (if (not (empty? xs))\n         (if (not (empty? ys))\n              (recur xs (rest ys) (conj result [(first xs) (first ys)]))\n              (recur (rest xs) y result)\n           )\n      result)))","problem":90,"user":"51d10b1fe4b067c36548635e"},{"code":"(fn [s1 s2] (reduce clojure.set/union (for [a s1 b s2] #{[a b]})))","problem":90,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":90,"code":"(fn [a b](set (mapcat (fn[x] (map #(vector x %) b)) a)))","user":"5368fedee4b0243289761e93"},{"problem":90,"code":"(fn [c1 c2]\n  (set (for [s1 c1 s2 c2]\n         [s1 s2])))","user":"60264d89e4b0d5df2af2222d"},{"problem":90,"code":"(fn [sa sb] (apply clojure.set/union (map (fn [x] (set (map #(vector % x) sa))) sb)))","user":"56304db8e4b073c1cf7a9be5"},{"problem":90,"code":"(fn [y x]\n   (set (mapcat #(map (partial conj [%])  x ) y)))","user":"5d917ef0e4b0915913b1d402"},{"code":"(fn [xset yset] (set(mapcat #(map (fn [el2] [% el2]) yset) xset)))","problem":90,"user":"530394b4e4b0d8b024fd3743"},{"problem":90,"code":"(fn solution [A B]\n  (reduce #(apply conj %1 (partition 2 (mapcat (fn [param1] (list param1 %2)) A))) #{} B))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn cartesian [xs ys] (set (for [x xs y ys] [x y])))","problem":90,"user":"4ded582d535d08e6dec9fe0c"},{"problem":90,"code":"(fn cp [s1 s2]\n (set (for [x1 s1 x2 s2]\n   (vector x1 x2))))","user":"53b85932e4b047364c0444db"},{"problem":90,"code":"(fn [c1 c2] (into #{} (for [e1 c1 e2 c2] (vector e1 e2))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":90,"code":"(fn [a b]\n  (into #{} (for [y b x a] [x y])))","user":"5958cef6e4b066ee0a44af94"},{"problem":90,"code":"#(into '#{} \n       (for [a %1 b %2]\n         [a b]))","user":"561c0278e4b064ca9f4b1691"},{"problem":90,"code":"(fn [a b]\n  (set\n    (mapcat #(map list a (repeat %)) b)))","user":"4fbe2cfbe4b081705acca30c"},{"code":"(fn [left right]\n   (apply hash-set (for [x left, y right]\n     [x y]\n     )))","problem":90,"user":"4f616892e4b0defedf855fbf"},{"problem":90,"code":"#(set(for [a % b %2]\n   [a b]))","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [rank suit](set (apply concat (map #(map (partial vector %) suit) rank))))","problem":90,"user":"4f57a153e4b0a7574ea7183a"},{"code":"(fn cartesian [a b]\n  (if (empty? b) #{} \n    (apply conj \n           (cartesian a (rest b))\n           (map #(conj [] % (first b)) a))))","problem":90,"user":"50ef311fe4b0a78662fa2651"},{"problem":90,"code":"(fn product [a b]\n  (apply hash-set\n         (for [a1 a\n               b1 b]\n           [a1 b1])))","user":"5146f343e4b04ef915e3731e"},{"problem":90,"code":"(fn [a b] (reduce #(into %1 (reduce (fn [l x] (conj l [%2 x])) [] b)) #{} a))","user":"53da3fcde4b0e771c3025497"},{"problem":90,"code":"(fn [xs ys]\n  (into (empty xs) \n    (for [x xs\n        y ys]\n    [x y])))","user":"56967bc0e4b0dcc4269f4131"},{"code":"(fn [x y] \n  (apply hash-set (for [a x b y] [a b])))","problem":90,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn cartesian [acoll bcoll]\n  (set\n  (mapcat (fn [a]\n          (map #(vector % a) acoll)) \n       bcoll)))","problem":90,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":90,"code":"#(into #{} \n   (for [x %1\n         y %2]\n     [x y]))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":90,"code":"(fn prod [set1 set2]\n  (into #{} (for [x (seq set1)\n        y (seq set2)]\n    [x y])))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":90,"code":"(fn [set1 set2]\n   (into #{} (for [s1 set1 s2 set2]\n      [s1 s2])))","user":"5bec37e2e4b0f319e2d7ec96"},{"problem":90,"code":"(let [fan #(map (partial vector %1) %2)]\n      (fn [a b] (set (mapcat #(fan % b) a))))","user":"58b997afe4b0888cdc949cd1"},{"code":"(fn [xs ys] (set (mapcat identity (for [x xs] (for [y ys] [x y])))))","problem":90,"user":"50982cc7e4b04e098a4c726c"},{"code":"(fn [as, bs] (set (for [a as, b bs] [a, b])))","problem":90,"user":"4f21838fe4b0d66497709fd2"},{"problem":90,"code":"#(set (for[x % y %2][x y]))","user":"54aa665fe4b09f271ff37cb8"},{"problem":90,"code":"(fn cartesianproduct [col1 col2]\n  (loop [xs col1\n         acc []]\n    (if (empty? xs)\n      (apply hash-set acc)\n      (recur (rest xs)  (concat acc (map #(vector (first xs) %) col2))))))","user":"544257b4e4b032a45b869379"},{"problem":90,"code":"(fn [s1 s2]\n  (set (apply concat (for [i1 s1]\n    (for [i2 s2]\n        [i1 i2]\n      ))))\n)","user":"5f58db95e4b0a0bc16850a9a"},{"code":"#(set (for [first %1 second %2]\n   [first second] ))","problem":90,"user":"52ac41fee4b0c58976d9ac85"},{"problem":90,"code":"(fn [a b]\n  (let [cc (flatten (map #(repeat (count b) %) a))\n        dd (flatten (repeat (count a) (into[] b)))]\n    (into #{}\n          (map vector cc dd))))","user":"553093bee4b076ab5578f817"},{"problem":90,"code":"(fn [xs ys]\n (set (for [x xs y ys]\n  [x y])))","user":"54dbe183e4b024c67c0cf778"},{"code":"(fn [xs ys]\n  (set\n   (for [x xs\n         y ys]\n     [x y])))","problem":90,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1\n                  y s2\n                  :let [prod [x y]]]\n              prod)))","user":"542c026ae4b0dad94371f29a"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n        (for [a1 a\n              b1 b]\n          [a1 b1])))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn cartesian [s1, s2]\n  (reduce (fn [memo, el]\n    (apply conj memo, (map (fn [el2] [el, el2]) s2))\n  ) #{} s1)\n)","problem":90,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":90,"code":"#(reduce conj #{} (for [x %1 y %2] [x y]))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"#(set\n  (for [a %1 b %2]\n    [a b]))","problem":90,"user":"4f043ed1535dcb61093f6bb4"},{"problem":90,"code":"(fn cartesian [xs ys]\n  ;; make a list of vectors out of xs\n  (let [coll (map vector xs)]\n    ;; map each value in ys to the vectors in coll\n    (into #{} (mapcat #(map conj coll (repeat %)) ys))))","user":"53dfbc75e4b0d874e779ae44"},{"problem":90,"code":"(fn [l r]\n  (into #{}\n        (reduce\n         \t(fn [s a] (into s (map #(into [] [a %]) r)))\n         \t #{}\n         \t l\n         )\n   )\n)","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn cartesian-product [s1 s2]\n  (set (for [x s1\n        y s2]\n    [x y])))","problem":90,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":90,"code":"(fn [ks vs]\n  (into #{} (for [k ks v vs]\n              [k v])))","user":"55a0d79fe4b0acc240e31502"},{"code":"#(apply hash-set (mapcat (fn [x] (map (fn [y] (vector x y)) %2)) %1))","problem":90,"user":"51ab1718e4b04e3dc0c27b2f"},{"code":"#(set (for [x %, y %2] [x y]))","problem":90,"user":"4e52d815535d302ef430da77"},{"problem":90,"code":"(fn [a b] (loop [a a o []]\n  (if (empty? a)\n    (set o)\n    (recur (rest a) (concat o (loop [b b o []]\n      (if (empty? b)\n        o\n        (recur (rest b) (conj o [(first a) (first b)])))))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":90,"code":"#(set \n  (for \n    [a (vec %1) b (vec %2)] \n    [a b]\n    )\n  )","user":"5676af21e4b05957ce8c6158"},{"code":";(fn [xs ys] (set (apply concat (map #(map (fn [x] (vector x %)) xs) ys))))\n#(set (for [x %1 y %2] [x y]))","problem":90,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":90,"code":"#(set(for [y %2 x %1] [x y]))","user":"5a8e9a7ae4b05369db4d2528"},{"code":"(fn cartesian-product\n  [set1 set2]\n  (loop [x (first set1)\n         xs (rest set1)\n         x-result #{}]\n    (let [result\n          (concat\n           x-result\n           (loop [y (first set2)\n                  ys (rest set2)\n                  y-result #{}]\n             (let [r (conj y-result [x y])]\n               (if (empty? ys)\n                 r\n                 (recur (first ys) (rest ys) r)))))]\n      (if (empty? xs)\n        (set result)\n        (recur (first xs) (rest xs) result)))))","problem":90,"user":"511720eae4b0063b4e3e16da"},{"problem":90,"code":"(fn [a b]\n  (set (reduce \n    (fn [result e] \n      (concat result \n        (reduce \n          (fn [p-result f]\n            (conj p-result (vector e f)))\n        []\n        b)))\n   []\n   a)))","user":"5989e080e4b021a7a535fed6"},{"problem":90,"code":"(fn cartesian\n  [xs ys]\n  (set (for [x xs\n             y ys]\n         [x y])))","user":"5d609ddde4b0c9e5857d5008"},{"code":"#(set (for [x %1 y %2]\n   [x y]))","problem":90,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn this [s1 s2]\n  (if (or (empty? s1) (empty? s2))\n    #{}\n   (-> #{}\n       (into (this s1 (rest s2)))\n       (into (map #(identity [% (first s2)]) s1))\n       )))","problem":90,"user":"4ec12577535dfed6da9c6da8"},{"code":"#(set (mapcat (fn [y] (map (fn [x] [x y]) %1)) %2))","problem":90,"user":"502940a9e4b061fd216be4b8"},{"code":"(fn [set1 set2]\n  (set \n  (for [x set1\n        y set2]\n    [x y])))","problem":90,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"#(set(for[x % y %2][x y]))","problem":90,"user":"530cb5b8e4b02e82168697e0"},{"problem":90,"code":"(fn [ax bx]\n  (set\n    (for [a ax\n          b bx]\n      [a b])))\n\n;; alternative, less readable:\n;;\n;; (fn [ax bx]\n;;   (set (mapcat #(map (partial list %) bx) ax)))","user":"594880ade4b07ddc2dafadc2"},{"code":"(fn cartesian [x y]\n  (into #{} (for[a x, b y] [a b])))","problem":90,"user":"531dfaf5e4b08068f379edb3"},{"problem":90,"code":"(fn [s t]\n  (set (for [a s\n             b t]\n          [a b])))","user":"54b83ae9e4b0ed20f4ff6e95"},{"code":"(fn make-list [s1 s2]\n  (set (for [x1 s1 x2 s2]\n    (vector x1 x2))))","problem":90,"user":"4f251302e4b0d66497709ff0"},{"problem":90,"code":"(fn [x y] \n  (set \n   (mapcat \n    (fn [x1] (map #(list x1 %) y))\n    x)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":90,"code":"(fn cartesian-product\n  [set-a set-b]\n  (into #{} (for [a set-a b set-b] [a b])))","user":"53161a56e4b08068f379ed3e"},{"code":"(fn [s1 s2] (set (for [e1 s1, e2 s2] [e1 e2])))","problem":90,"user":"4e994541535dbda64a6f6b64"},{"problem":90,"code":"(fn [xs ys]\n  (set\n  \t(for [x xs y ys]\n      [x y])))","user":"54485749e4b032a45b8693c7"},{"problem":90,"code":"(fn crossprod\n  [x y]\n  (set (for [i x j y] [i j]))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"code":"(fn [l r] (set (for [a l b r] (vector a b) )))","problem":90,"user":"4fd9d162e4b05e33b9224f3c"},{"code":"(fn [xs ys]\n  (set (for [a xs b ys] [a b])))","problem":90,"user":"50b9d991e4b04934c218a4a9"},{"problem":90,"code":"(fn c-product [a b]\n  (set\n    (apply concat\n           (map #(map (fn [item] [%1 item]) b)\n                a))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":90,"code":"(fn kart [xs ys]\n (loop [lhs (into '() xs) rhs (into '() ys) zs '()]\n   (if (empty? lhs)\n     (into #{}(apply concat zs))\n     (recur (rest lhs) rhs (conj zs (map #(conj [(first lhs)] % ) rhs)))\n     )\n  )\n  )","user":"5885e90de4b0f1effa3b76c5"},{"code":"#(into #{} (for [x %1\n                  y %2]\n              [x y]))","problem":90,"user":"4ef89fb0535dced4c769f260"},{"problem":90,"code":"(fn [sa sb]\n  (set (mapcat \n   (fn [e1] (map \n             (fn [e2] [e1 e2])\n             sb))\n   sa))\n)","user":"56791447e4b05957ce8c6183"},{"problem":90,"code":"(fn p [r s]\n  (into #{} (mapcat (fn [x]\n                      (map (fn [y]\n                             [x y])\n                           s))\n                    r)))","user":"597a4277e4b02382a38ad1e2"},{"problem":90,"code":"(fn  [s1 s2]\n  (set\n    (for [e1 s1, e2 s2]\n    [e1 e2])))","user":"569ce6fee4b0542e1f8d146c"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1\n             y s2]\n         [x y]\n         )))","user":"51e8736ae4b006d205356a4f"},{"code":"(fn cart\n  [s1 s2]\n  (set (map vector\n       (apply concat (map #(repeat (count s2) %) s1))\n       (cycle s2))))","problem":90,"user":"504e12ade4b078edc5f593b7"},{"code":"#(set (for [i1 %\n            i2 %2]\n        [i1 i2]))","problem":90,"user":"4ee8b9c9535d93acb0a66884"},{"code":"(fn cartesian-product [a b]\n  (set (for [x a y b] [x y])))","problem":90,"user":"4ec75077535d6d7199dd36e0"},{"problem":90,"code":"#(set \n   (for [x % \n        y %2]\n    [x y]))","user":"5893c64ce4b00487982d524b"},{"code":"(fn cartesian-product [s1 s2]\r\n  (let [acc (atom #{})]\r\n    (doseq [a s1]\r\n      (doseq [b s2]\r\n        (swap! acc conj [a b])))\r\n    @acc))","problem":90,"user":"4f629697e4b0defedf855fd6"},{"code":"(fn [seta setb]\n  (into #{} (for [a seta\n        b setb]\n    [a b])))","problem":90,"user":"50366589e4b0fbe0a74d26c3"},{"problem":90,"code":"(fn [s t]\n                         (reduce (fn [result si]\n                                   (clojure.set/union result (set (map (fn [ti]\n                                                                         [si ti])\n                                                                       t))))\n                                 #{}\n                                 s))","user":"57f904c5e4b0d3187e900936"},{"problem":90,"code":"(fn [& args]\n    (let [\n          [xs ys] args\n          result (into #{}\n                   (for [x xs\n                         y ys]\n                     [x y]))\n         ]\n      result\n    )\n  )","user":"532f7e12e4b019098a6f8b4e"},{"problem":90,"code":"(fn [s1 s2]\n   (->> (for [x (seq s1)\n              y (seq s2)]\n          (list x y))\n        (set)))","user":"5808ee16e4b0a837a8b30d16"},{"code":"(fn [a b] (set (apply concat (\r\n  map (fn [be] (\r\n\t\tmap (fn [ae] (conj [] ae be)) a\r\n\t)) b\r\n))))","problem":90,"user":"50182f53e4b02f523d7cc5ec"},{"problem":90,"code":"(fn cartesianProduct\n  [k v]\n  (#(set (for [a (vec %1) b (vec %2)] [a b]))k v))","user":"5aa00b7fe4b0d174b936c825"},{"problem":90,"code":"(fn guy [values, suites]\n  (if (= 0 (count values))\n    []\n    (into #{} (into (map #(vector (first values) %1) suites) (guy (rest values) suites)))))","user":"51fc44c5e4b0f1313d468a1b"},{"problem":90,"code":"(fn [l r]\n    (into #{} (for [l- l, r- r]\n                [l- r-])))","user":"5501a1e1e4b07d26eda61d75"},{"code":"(fn [a b]\n  (set (mapcat #(map\n                 (fn [x]\n                   (list x %)) a)\n               b)))","problem":90,"user":"509b152be4b0412cdea6eb1e"},{"code":"(fn [xs ys]\n    (set (mapcat (fn [y] (map (fn [x] [x y]) xs)) ys)))","problem":90,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"(fn [xs ys]\n    (set (for [x xs y ys]\n      [x y])))","problem":90,"user":"4e9fd521535d7eef3080729a"},{"problem":90,"code":"#(set\n   (for[x %1, y %2]\n     [x y]))","user":"56f5d0efe4b046a417f92078"},{"problem":90,"code":"(fn [a b]\n  (set \n   (for [x a\n        y b]\n    [x y])))","user":"5829d588e4b051871117bf4a"},{"code":"(fn [xs ys]\n  (set (for [x xs,  y ys]\n         [x y])))","problem":90,"user":"4efa3d4b535dced4c769f270"},{"problem":90,"code":"#(\n  set (for [ x %\n        y %2]\n  [x y]))","user":"54630cdae4b01be26fd746bb"},{"code":"(fn [a b] (let [row (fn [r m] (map #(vector m %) r))]\n                       (set (mapcat #(row b %) a))))","problem":90,"user":"52ba43d0e4b07a9af57922cd"},{"problem":90,"code":"(fn [A B] (set (for [x A \n                     y B] \n                 [x y])))","user":"539c9d7ee4b0b51d73faaf2d"},{"code":"(fn [x y]\n    (set\n      (mapcat (fn [z] (map #(vector % z) x)) y)))","problem":90,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":90,"code":";#(set (mapcat (fn [x] (map (fn [y] [x y]) %2)) %1))\n#(set (for [x %1 y %2] [x y]))","user":"560a7b46e4b05f002753defb"},{"code":"(fn [b c]\n   (set (map vector\n          (mapcat (partial repeat (count c)) b)\n          (flatten (repeat (seq c))))))","problem":90,"user":"50ccf729e4b0f7a459302aac"},{"problem":90,"code":"(fn [xs ys]\n    (set (apply concat (map (fn [x] (map #(vector x %) ys)) xs))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [a b]\n  (set \n   (apply concat\n     (for [one a]\n       (for [two b]\n         [one two])))))","problem":90,"user":"4e58ef07535d8a8b8723a299"},{"problem":90,"code":"(fn [a b] (into #{} (partition 2 (flatten (map  #((fn [x y] (interleave (repeat (count y) x) y)) % b) a)))))","user":"552456e3e4b0882d96d091c2"},{"code":"(fn [aa bb] (set (for [a aa b bb] [a b])))","problem":90,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":90,"code":"(fn [x y]\n  (set (for [x x y y]\n     [x y])))","user":"53275758e4b09d4e7a9b54fc"},{"code":"(fn [x y]\n  (let [col (for [a x b y]\n              [a b])]\n    (into #{} col)))","problem":90,"user":"531016d0e4b08068f379ecd1"},{"code":"#(set (for [x %1\n       y %2]\n      [x y]))","problem":90,"user":"4daea889edd6309eace4d15b"},{"code":"(fn cross-product [x y]\n  (letfn [(map-el [el] (map vector (repeat el) y))]\n    (set (mapcat map-el x))))","problem":90,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn [a b]\n  (into #{} \n    (apply concat\n      (for [x a]\n        (for [y b]\n          [x y])))))","problem":90,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":90,"code":"(fn [a b]\n   (into #{} (for [ai a bi b]\n              [ai bi])))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":90,"code":"(fn cartesian \n  [setA setB]\n  (loop [out #{}\n         A setA\n         B setB]\n    (if (empty? A)\n      out\n      (recur (into out (map #(conj [] (first A) %) B)) (rest A) B)\n      )\n    )\n  )","user":"560d4994e4b05f002753df3c"},{"problem":90,"code":"#(set (for [a % b %2] (conj [] a b)))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":90,"code":"(fn cartesian-2 [input1 input2]\n  (set (for [x input1 y input2] [x y])))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [s1 s2]\n  (set (apply concat\n              (map #(map (partial vector %) s2) s1))))","problem":90,"user":"4e4b4564535dc968683fc4d3"},{"problem":90,"code":"(fn [setOne setTwo]\n  (let [s (sorted-set)]\n    (into s (for [a setOne \n                  b setTwo] \n              [a b]))))","user":"53c83f94e4b00fb29b2212af"},{"problem":90,"code":"(fn [a b]\n\t(into #{} \n\t\t(for [ai a bi b]\n\t\t\t[ai bi])))","user":"56a01895e4b0542e1f8d149f"},{"code":"#(set (for [a %1 b %2] [a b]))","problem":90,"user":"4dbe9674535d020aff1edf65"},{"problem":90,"code":"(fn [as bs]\n  (set (mapcat (fn [a]\n                 (map (fn [b]\n                        (vector a b))\n                      bs))\n               as)))","user":"5895477fe4b00487982d527c"},{"code":"(fn [po pt]\n  (into #{} (for [pa po pb pt]\n    [pa pb])))","problem":90,"user":"501dfd54e4b051153f3b5b80"},{"problem":90,"code":"(fn cartesian-pro [a b]\n  (into #{}\n        (for [x a y b] (vector x y))))","user":"5e9771dee4b0157ca96647d0"},{"problem":90,"code":"(fn [x-set y-set]\n  (into #{} (for [x x-set\n                  y y-set]\n              [x y])))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn [s1 s2]\n  (loop [accu #{}\n   s1 s1\n\t s3 s2]\n    (cond (empty? s1) accu\n\t  (empty? s3) (recur accu (rest s1) s2)\n\t  true (recur (conj accu [(first s1) (first s3)]) s1 (rest s3)))))","problem":90,"user":"4e82c062535db62dc21a62cc"},{"code":"(fn [s1 s2]\n  (set (for [x s1\n        \t y s2]\n         [x y])))","problem":90,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn ww [l1 l2]\n    (if (= 1 (count l1))\n      (if (= 1 (count l2)) \n        #{[(first l1) (first l2)]}\n        (clojure.set/union #{[(first l1) (first l2)]} (ww l1 (rest l2)))\n        )\n      (clojure.set/union (ww #{(first l1)} l2) (ww (rest l1) l2))\n      )\n    )","problem":90,"user":"4f2004a1535d64f6031464a7"},{"problem":90,"code":"#(set (for [a  %1 b  %2] [a b]))","user":"575d16f8e4b02ea114799377"},{"code":"(fn [s t] (apply hash-set (for [x s y t] [x y])))","problem":90,"user":"5217c26fe4b0a4bccb16cab8"},{"problem":90,"code":"(fn carteasian\n  [set1 set2]\n  (set (for [set1 (vec set1) set2 (vec set2)] [set1 set2])))","user":"59e8fef3e4b0249b72820743"},{"code":"(fn [coll1 coll2]\n  (set\n   (partition 2\n             (flatten \n              (map (fn [v]\n         \t\t(reduce #(conj %1 (vector v %2)) [] coll2)) coll1)))))","problem":90,"user":"4e964f4a535dbda64a6f6b42"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [s11 s1 s22 s2]\n    (vector s11 s22))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":90,"code":"(fn [x y]\n    (loop [el (first x)\n           r-el (rest x)\n           res #{}]\n      (if (nil? el)\n        res\n        (recur (first r-el) (rest r-el) (into res (map #(vector el %) y))))))","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn cartesian [a b]\n  (into #{} (for [x a y b] [x y])))","problem":90,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":90,"code":"(fn [c1 c2]\n   (into #{}\n         (for [e1 c1\n               e2 c2]\n           [e1 e2])))","user":"55860905e4b001b0851d7516"},{"problem":90,"code":"(fn cart [s1 s2]\n  (set (for [a s1\n        b s2]\n    [a b])))","user":"56742817e4b05957ce8c612d"},{"code":"(fn [a b]\n     (into #{}\n     (for [x (seq a) y (seq b)]\n     (vector x y))))","problem":90,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn [a b]\n  (set (mapcat (fn [x]\n                 (map (fn [y] [x y])\n                      b))\n               a)))","problem":90,"user":"53415755e4b00652c8746ecd"},{"code":"(fn [s1 s2] (loop [result #{} coll1 (if (> (count s1) (count s2)) s1 s2) coll2 (if (> (count s1) (count s2)) s2 s1)] \n                  (if (= (count result) (* (count s1) (count s2))) \n                    result \n                    (if (> (count s1) (count s2)) \n                           (recur (clojure.set/union result (into #{} (map list (shuffle coll1) coll2))) coll1 coll2)\n                           (recur (clojure.set/union result (into #{} (partition 2(reverse (flatten (map list (shuffle coll1) coll2)))))) coll1 coll2)))))","problem":90,"user":"513ca934e4b0b86ece9f3228"},{"problem":90,"code":"(fn [x y] (set (mapcat (fn [xx] (map (fn [yy] [xx yy]) y)) x)))","user":"5e839edde4b09a7a73c8bbba"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n    (for [s1-el s1\n          s2-el s2]\n      [s1-el s2-el])))","user":"53a83c74e4b047364c044426"},{"problem":90,"code":"(fn [left right] (set (mapcat #(partition 2 (interleave (repeat %) right)) left)))","user":"5da8b8ece4b000c986472c28"},{"problem":90,"code":"#(set (for [row %1, column %2] [row column]))","user":"52382d91e4b0fae3832e99f0"},{"problem":90,"code":"(fn [s1 s2]\n  (set (apply concat (map (fn [x] (map (fn [y] [x y]) s2)) s1))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":90,"code":"(fn[a b](into #{}(for[ai a bi b][ai bi])))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"#(set (for [i %, j %2] [i j]))","problem":90,"user":"4eecdd66535d93acb0a668b9"},{"problem":90,"code":"#(set (for [s %1 t %2] [s t]))","user":"53f77b6ae4b0de5c4184855f"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat #(map (fn [x] [% x]) s2) s1)))","user":"55dbed2fe4b050e68259b3a6"},{"problem":90,"code":"(fn [s1 s2]   \n  (set (reduce (fn [s ele] (concat s (map #(-> [ele %]) s2))) [] s1)))","user":"53a739b0e4b0ef122a8689d0"},{"problem":90,"code":"(fn [a b]\n  (let [as (count a) bs (count b)]\n    (set\n     (map #(into [] %)\n          (partition-all 2\n                         (interleave\n                          (mapcat #(take bs (repeat %)) a)\n                          (take (* as bs) (cycle b))\n                          )\n                         )\n          )\n     )\n    )\n  )","user":"60752ef6e4b069485764de55"},{"problem":90,"code":"(fn [s q] (set (for [x s y q] [x y])))","user":"5659679ae4b068f2fe63dbeb"},{"code":"#(apply conj #{} (for [i % j %2] [i j]))","problem":90,"user":"52c00263e4b07a9af579233f"},{"problem":90,"code":"(fn [x y]\n  (into #{} \n        (mapcat #(map list \n                      (repeat (count y) %) \n                      y)\n                x)))","user":"542fa0dde4b0dad94371f2d2"},{"code":"#(set (for [x %2 y %] [y x]))","problem":90,"user":"4e588e84535d8a8b8723a294"},{"code":"#(set(for [x %1 y %2] [x y]))","problem":90,"user":"4f1595da535d64f603146444"},{"code":"(fn cartesian [s1 s2]\n  (set (mapcat (fn [i]\n                 (map #(vector i %) s2)) s1)))","problem":90,"user":"4e3bccb1535deb9a81d77f55"},{"problem":90,"code":";; when order matters, apply sorted-set\n#(apply sorted-set (for [x %1, y %2] [x y]))","user":"55810c73e4b05c286339e0f2"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{} (for [x s1\ty s2]\n    \t[x y])))","user":"54a627bce4b09f271ff37c83"},{"problem":90,"code":"(fn cart\n([] '())\n ([l1] (map list l1))\n ([l1 l2] \n   (set\n    (mapcat \n     (fn f[x] \n       (map\n         (fn g [y] (vector x y))\n         l2))\n     l1))))","user":"557e8326e4b05c286339e0d7"},{"problem":90,"code":"(fn get-cartesian-product [coll1 coll2]\n  (into #{}\n        (for [x coll1 y coll2]\n          [x y])))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"(fn cp [x y]\n  (reduce clojure.set/union #{}\n          (for [e1 x\n                e2 y]\n            #{[e1 e2]}))\n  )","problem":90,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn foo [xs ys] (set (for [x xs y ys] [x y])))","problem":90,"user":"525bcae9e4b0cb4875a45d30"},{"problem":90,"code":"(fn [ca cb]\n  (set (apply concat (map (fn [va] (map (fn [vb] [va vb]) cb)) ca))))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn cartesian-product [s1 s2]\n  (reduce into #{} (map (fn [e] (map #(vector e %) s2)) s1)))","problem":90,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn [x s] (set (for [s1 x, s2 s] (vector s1 s2))))","problem":90,"user":"516db4f6e4b046df6fbb76a0"},{"code":"(fn [a b] (set (mapcat #(for [y a] [y %]) b)))","problem":90,"user":"52747090e4b03e8d9a4a74a5"},{"problem":90,"code":"#(loop [sq1 %1 sq2 (apply list %2) nm 0 product []]\n   (if (empty? sq1)\n     (set product)\n     (if (= nm (- (count sq2) 1))\n       (recur (rest sq1) sq2 (rem (inc nm) (count sq2)) (conj product [(first sq1) (nth sq2 nm)]))\n       (recur sq1 sq2 (rem (inc nm) (count sq2)) (conj product [(first sq1) (nth sq2 nm)]))\n     )\n     \n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":90,"code":"(fn kartesian [a b]\n   (set (mapcat (fn [x] (zipmap a (repeat x))) b)))","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn [c1 c2] (apply hash-set (for [x c1 y c2] [x y])))","problem":90,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":90,"code":"(fn \n  [x y] \n  (into #{} \n        (for [i x \n              j y] \n          (vector i j))))","user":"59e18b9be4b08badc2a0c50f"},{"problem":90,"code":"(fn y [a b]\n(set\n    (mapcat (fn [it] ( map\n        #(vector % it) a\n    )) b) \n) \n)","user":"54edcf96e4b024c67c0cf866"},{"problem":90,"code":"(fn general-kenobi\n  [set1 set2]\n  (apply sorted-set (for [x (sort set1)\n                        y (sort set2)]\n                    [x y])))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn [s1 s2]\n  (set (reduce (fn [result i]\n                 (concat result\n                         (map #(vec (list i %)) s2)))\n               []\n               s1)))","problem":90,"user":"5310e7aee4b08068f379ecdc"},{"problem":90,"code":"(fn cartesian-product-loop [x y] (set (for [x1 x y1 y] [x1 y1])))","user":"5d45bd1de4b07c84aa5ae6a4"},{"problem":90,"code":"(fn [a b]\n  (into #{} \n        (for [x a\n        \t  y b]\n    \t\t\t[x y])))","user":"5fef4292e4b05ac5b16ea1d7"},{"code":"(fn [s1,s2] (set (lazy-seq (for [i s1 j s2] [i j]))))","problem":90,"user":"531f1e63e4b08068f379edc2"},{"problem":90,"code":"(fn [x y]\n  (into #{} \n        (for [a x\n              b y]\n    [a b])))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":90,"code":"(fn [a b] (into #{} (for [x a\n                            y b]\n                        [x y])))","user":"5683fcafe4b0945ebc182aa8"},{"problem":90,"code":"(fn [list1 list2]\n  (into #{}\n        (for [x list1\n              y list2]\n          [x y])))\n\n;;((fn [list1 list2]\n;;  (into #{}\n;;        (for [x list1\n;;        \t  y list2]\n;;    \t\t[x y]))) #{\"ace\" \"king\" \"queen\"} #{\"♠\" \"♥\" \"♦\" \"♣\"})","user":"573b8f67e4b0cd1946bd10ae"},{"problem":90,"code":"(fn [x y]\n   (set (for [a x\n              b y ]\n          [a b])))","user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":90,"code":"(fn [a b]\n  (set\n   (apply concat\n          \n  (map\n    (fn [x]\n      (map #(vector x %) b)) a))))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"#(set (for [x (seq %1) y (seq %2)] [x y]))","problem":90,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [l r]\n  (apply hash-set (for [x l y r] [x y])))","problem":90,"user":"5027fc0ce4b01614d1633ff2"},{"code":"(fn cross [seq1 seq2] (set (for [x seq1 y seq2] [x y])))","problem":90,"user":"4e3df106535deb9a81d77f58"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n   (for [x s1, y s2] [x y])))","user":"553dd883e4b0a04f792994e6"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [v1 s1 v2 s2] [v1 v2])))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [a b] \n    (set (for [x a y b]\n         [x y])))","problem":90,"user":"539ad6b7e4b0b51d73faaf18"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [c2 (sort s2)\n             c1 (sort s1)]\n         [c1 c2])))","user":"6086abade4b0736b099e42ff"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (if (and (number? s1) (number? s2))\n    (* s1 s2)\n    (set\n      (for [x s1 y s2]\n        (vector x y)\n      )\n    )\n  )\n)","user":"569e3175e4b0542e1f8d1484"},{"problem":90,"code":"(fn [xs ys]\n   (into #{} (for [y ys\n                   x xs]\n               [x y])))","user":"5e724492e4b085ba37836dc7"},{"problem":90,"code":"(fn [f s] (set (for [a f b s] [a b])))","user":"5cbdc591e4b026601754ba00"},{"problem":90,"code":"(fn [a b]\n     (reduce #(into %1 (map (fn [x] (vector x %2)) a)) #{} b)\n     )","user":"59e0f38ae4b08badc2a0c500"},{"code":"#(set (for [a % b %2] (vector a b)))","problem":90,"user":"4ec6559a535d6d7199dd36c9"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x s1\n        y s2]\n    [x y])))","user":"54246fcce4b01498b1a71aed"},{"problem":90,"code":"(fn [sa sb]\n    (letfn [(allcomb [sa sb]\n              (if (empty? sa)\n                '()\n                (concat (partition 2 (interleave (repeat (first sa)) sb))\n                        (allcomb (rest sa) sb))))]\n      (set (allcomb sa sb))))","user":"56eaad95e4b04a395b9a040f"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat #(map list (repeat %) s2) s1)))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":90,"code":"#(set (for [e1 %1 e2 %2] (vector e1 e2)))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [set1 set2]\n  (set (for [x set1 y set2]\n    [x y])))","problem":90,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [s1 s2]\n  (set\n   (reduce (fn [acc x] (concat acc\n                               (map (fn [y] [x y]) s2)))\n           []\n           s1)))","problem":90,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a\n             y b] [x y])))","user":"5eb741e4e4b00a66d4a9523b"},{"code":"(fn [s1 s2] (loop [s s2 r #{}] (if (not (seq s)) r (recur (rest s) (into r (map #(vector % (first s)) s1))))))","problem":90,"user":"5032b398e4b00c0952a257eb"},{"problem":90,"code":"(fn cart-prod[result s1 s2] (set (reverse (for [x s1  y s2] (conj result x y)) ) )) []","user":"5cf53196e4b087f62be35a94"},{"code":"(fn [xs ys]\n  (set \n   (for [x xs y ys]\n     [x y])))","problem":90,"user":"523c6451e4b07becd5be2222"},{"code":"(fn [s1 s2]\n  (set (mapcat (fn [i]\n    (map (fn [j]\n      [i j]) s2)) s1)))","problem":90,"user":"4ec34578535dcc7ae8597d51"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n        (for [e1 s1\n              e2 s2]\n          [e1 e2])))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn [coll1 coll2]\n  (let [f (fn [e c a]\n            (if (empty? c)\n              a   \n              (recur e (rest c) (conj a [e (first c)]))))]\n    (loop [c1 coll1, c2 coll2, acc #{}]\n      (if (empty? c1) \n        acc \n        (recur (rest c1) c2 (f (first c1) c2 acc))))))","problem":90,"user":"50a83794e4b054305ba5a831"},{"problem":90,"code":"(fn mxm\n  [c1 c2]\n  (set (mapcat (fn [x y]\n                 (map #(vector x %) y))\n               c1 (repeat c2))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [col1 col2]\n  (into #{} (for [x col1\n                  y col2]\n              [x y])))","problem":90,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":90,"code":"(fn cart \n  ([set1 set2] (cart set1 set2 #{}))\n  ([set1 set2 acc]\n  (if (empty? set2)\n    acc\n    (let [e (first set2)]\n      (recur set1 (rest set2)\n      (into acc (map #(vector %1 e) set1))) \n   )\n  ))\n  \n )","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn [x y] (set (reduce concat (map (fn [z] (map (fn [w] (vector z w)) y))  (into [] x)))))","problem":90,"user":"5296008fe4b02ebb4ef7502a"},{"code":"(fn [x y]\n  (set (for [w x z y]\n    [w z])))","problem":90,"user":"4e47f4f3535dc968683fc4bb"},{"problem":90,"code":"#((comp set mapcat) (fn [i] (map vector (repeat i) %2)) %1)","user":"5a18488ee4b0ff51aa4b31e5"},{"code":"(fn [col1 col2]\r\n  (apply hash-set (for [c1 col1 c2 col2] \r\n    [c1 c2])))","problem":90,"user":"4f0f01c0535d0136e6c22329"},{"code":"(fn [a b] (set (mapcat #(partition 2 (cons % (interpose % b))) a)))","problem":90,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn [a b] (into #{} (mapcat \n (fn [o] \n   (map \n    (fn [i] [o i])\n    b))\n a)))","problem":90,"user":"5150a7d7e4b03e678e393abb"},{"problem":90,"code":"#(set (for [x %1 \n        y %2]\n    [x y]) )","user":"5991eec7e4b0866487ed0d6e"},{"problem":90,"code":"(fn f [l1 l2] (into #{} (reduce concat #{} (map (fn [a] (reduce #(conj % [a %2]) #{} l2)) l1))))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":90,"code":"#(into #{}\n        (mapcat\n         (fn [x] (map (fn [y] (vector x y)) %2))\n         %1))","user":"52a9154ee4b0c58976d9ac3b"},{"code":"#(into #{} (for [x %1, y %2] [x y]))","problem":90,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":90,"code":"(fn [x y]\n  (set (for [x x y y] [x y])))","user":"53a2a259e4b0f1fc7453882c"},{"code":"(fn\n  [s1 s2]\n  (into #{} (map vec (partition 2 (interleave (mapcat #(repeat (count s2) %) s1) (take (* (count s2) (count s1)) (cycle s2)))))))","problem":90,"user":"5348cab4e4b084c2834f4a5e"},{"problem":90,"code":"(fn[s1 s2] (into #{} (mapcat #(map (partial conj [] %) s2) s1 ) ))","user":"561cad18e4b064ca9f4b169d"},{"code":"#(set (for [x % y %2 ] [x y]))","problem":90,"user":"51f81925e4b09be9c177e526"},{"code":"(fn [c1 c2]\n  (set (for [a c1\n        b c2]\n    [a b])))","problem":90,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [a b]\n  (set\n    (mapcat (fn [i] (map (fn [j] [i j]) b)) a)\n  )\n)","problem":90,"user":"4f725201e4b07046d9f4f02f"},{"problem":90,"code":"(fn [s1 s2]\n    (loop [s1_ s1 s2_ s2 r #{}]\n        (if (seq s1_)\n            (if (seq s2_)\n                (recur s1_ (rest s2_) (conj r [(first s1_) (first s2_)]))\n                (recur (rest s1_) s2 r))\n            r)))","user":"55975569e4b031d6649c9b8e"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (into #{}\n  \t(for [x1 s1 x2 s2]\n      \t\t(vector x1 x2))))","user":"54448e84e4b032a45b869393"},{"code":"(fn [a b] (set (mapcat (fn [b] (map #(vector % b) a)) b)))","problem":90,"user":"51037468e4b00c483ae17702"},{"code":"(fn f [a b]\n  (set (for [x b y a] [y x])))","problem":90,"user":"4dbd2aa3535d020aff1edf40"},{"code":"#(apply hash-set (for [s1 % s2 %2] [s1 s2]))","problem":90,"user":"50783762e4b0fc74642bff67"},{"problem":90,"code":"(fn [R S]\n  (set \n   (for [r R\n         s S]\n     [r s])))","user":"55ed5a2de4b0121d4835fdd8"},{"problem":90,"code":"(fn [x y]\n   (set (apply concat (map #(map (fn [z] (list z %)) x) y)))\n   )","user":"56066e82e4b08b23635d3173"},{"problem":90,"code":"(fn [s1 s2] (set (for [x1 s1 x2 s2] [x1 x2])))","user":"5509a23ee4b06e50f9beb11a"},{"code":"(fn cp [s1 s2]\n  (set (for [i s1 j s2] [i j])))","problem":90,"user":"51d96ad0e4b02ceefd94774f"},{"problem":90,"code":"#(set (for [card %1 suit %2] [card suit]))","user":"545801f6e4b01be26fd74615"},{"problem":90,"code":"(fn [s1 s2] (set (for [a s1, b s2] [a b])))","user":"56ca0da9e4b0ea9b8538f715"},{"problem":90,"code":"(fn [s1 s2]\n   (into #{} (reduce (fn [r e]\n              (concat r (map (partial list e) s2)))\n            []\n            s1)))","user":"55895eade4b059ccff29b202"},{"problem":90,"code":"(fn my-cart-prod [a b]\n  (->> a\n    (mapcat #(map (fn [x] [% x]) b))\n    (set)\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn pc [a b ]\r\n  (set (apply concat  (map #(map (fn [x] [%  x]) b) a))))","problem":90,"user":"4febb4dae4b0681fd128dc98"},{"problem":90,"code":"(fn cartesian\n  [m1 m2]\n  (into #{} (mapcat (fn\n                     [a]\n                     (reduce (fn\n                               [b c]\n                               (conj b (vector a c)))\n                             []\n                             m2))\n                   m1)))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":90,"code":"(fn cp [xs ys]\n    (into #{}\n      (for [ x xs y ys]\n        [x y]\n      )\n    )\n  )","user":"562add6de4b00e49c7cb4834"},{"problem":90,"code":"(fn [cards suits]\n  (set\n   (for [c cards s suits]\n    [c s])))","user":"52213426e4b0e6a83c8925c4"},{"problem":90,"code":"#(set \n  \t(for [a % b %2] [a b])\n  )","user":"56941e48e4b0dcc4269f410d"},{"code":"(fn [l1 l2]\n  (set (for [x l1 y l2]\n        [x y])))","problem":90,"user":"4ec21058535dfed6da9c6dba"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [i s1\n             j s2]\n         [i j])))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn [a b] (set (for [el-a a el-b b] [el-a el-b])))","problem":90,"user":"52244a77e4b01819a2de42d1"},{"problem":90,"code":"(fn [s t]\n  (set (for [s s t t] [s t])))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"#(into #{} (for [a (seq %) b (seq %2)]\n  [a b]))","problem":90,"user":"52d809bde4b09f7907dd1384"},{"problem":90,"code":"(fn [i1 i2] (set (sort-by first (for [x i1 y i2] [x y]))))","user":"569425b6e4b0dcc4269f410e"},{"code":"(fn [col1 col2]\n  (let [z (for [x col1 y col2] [x y])]\n    (set z)))","problem":90,"user":"50435689e4b034ff00315d21"},{"problem":90,"code":"(fn [a b]\n      (->>\n       (for [x a y b]\n         [x y])\n       set))","user":"559067ace4b0277789237670"},{"problem":90,"code":"(fn cart [set1 set2]\n    (set\n    (for [x set1\n          y set2]\n             [x y])))","user":"5202cfe7e4b030ee0c5b2702"},{"problem":90,"code":"(fn [xs ys]\n  (set (mapcat (fn [x] (map (fn [y] (vector y x)) xs)) ys)))","user":"5dd70ee3e4b0948ae9d9ad85"},{"problem":90,"code":"(fn [seq1 seq2]\n  (into #{} \n        (for [x seq1\n              y seq2]\n    \t\t[x y])))","user":"56c44c34e4b05cc29241ee96"},{"problem":90,"code":"(fn [a b]\n  (set\n\t(for [x a y b] [x y])))","user":"57f81569e4b0d3187e900919"},{"code":"#(set (for [y %2 x %] [x y]))","problem":90,"user":"4efb2fd7535dced4c769f274"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (mapcat (fn [x]\n                 (map #(vector % x) coll1)) coll2)))","user":"572a856be4b0f4d77e65123b"},{"problem":90,"code":"(fn [x,y] (set (for [a x b y] [a,b])))","user":"57f9b25fe4b0d3187e90094b"},{"problem":90,"code":"#(set \n (for [a %1 b %2]\n   [a b]))","user":"567476bde4b05957ce8c6139"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (reduce\n    (fn [acc curr]\n      (apply conj acc\n        (map\n          (fn [el]\n            [curr el])\n          s2)))\n    #{}\n    s1))","user":"5d0eed51e4b0cc9c91588262"},{"problem":90,"code":"(fn\n  [s1 s2]\n  (set (for [x s1 y s2] [x y]))\n )","user":"6074f5ede4b069485764de52"},{"problem":90,"code":"(fn cart [s1 s2] (set (for [v1 s1 v2 s2] [v1 v2])))","user":"556405e5e4b0c656e3ff17fb"},{"code":"(fn my-cart [s1 s2]\n  (set (for [x s1 y s2] [x y])))","problem":90,"user":"4efb92ce535dced4c769f27a"},{"problem":90,"code":"(fn cp[c1 c2]\n  (into #{} (mapcat (fn [a]\n         (map (fn [b]\n                [ a b])\n              c2))\n       c1)))","user":"5978305be4b01722bebd4d03"},{"problem":90,"code":"(fn [xs ys]\n  (set   (for [x xs\n       \t \t   y ys]\n    \t\t[x y])))","user":"5283a919e4b0239c8a67adbe"},{"problem":90,"code":"(fn[x y](set (for[a x b y][a b])))","user":"60195030e4b0bf4ca6b10920"},{"code":"#(set (for [i1 %1 i2 %2] [i1 i2]))","problem":90,"user":"5127e504e4b03a34742b4302"},{"problem":90,"code":"(fn [set1 set2]\n    (set (for [x set1\n               y set2]\n             [x y])\n     )\n )","user":"53ecd01fe4b0d648e757f4b9"},{"problem":90,"code":"(fn cartesian-product [s1 s2] \n    (set (apply concat (map #(for [i s2] [% i]) s1))))","user":"54f09599e4b024c67c0cf89d"},{"problem":90,"code":"(fn [a b] \n  (set (for [i a j b] [i j])))","user":"55625903e4b0c656e3ff17d7"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce ((fn [lst]\n             (fn [acc x] (set (concat acc (map (fn [i] [i x]) lst))))) s1) #{} s2))","user":"4ec6297b535d6d7199dd36c4"},{"problem":90,"code":"(fn [col1 col2]\n  (into #{}\n    (for [x col1 y col2] [x y])))","user":"56877fcbe4b0dcc4269f405e"},{"code":"(fn [c1 c2] (into #{} (for [x c1 y c2] [x y])))","problem":90,"user":"4fb266a5e4b081705acca28c"},{"code":"#(set (for [y %2 x %1] [x y]))","problem":90,"user":"4ecf42b4535d1f5ad70dba3c"},{"code":"#(set (for [a %1 b%2] [a b]))","problem":90,"user":"51d4ed02e4b013d740b70dec"},{"problem":90,"code":"(fn cart [a b]\n  (into #{}\n        (mapcat (fn blah [be] (map vector a (repeat be)) ) \n             b)))","user":"535f9a5ce4b04ce2eb3ed2de"},{"code":"#(into #{}\n       (let [x (seq %)\n       y (seq %2)]\n   (for [i (range (count x))\n         j (range (count y))]\n     [(nth x i) (nth y j)])))","problem":90,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(\n  fn sol [ coll1 coll2 ] (\n\t\tset ( for [ x coll1 , y coll2 ] [ x y ] )  \n\t)\n)","problem":90,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn [a b]\n    (set (for [x a\n               y b]\n           [x y])))","problem":90,"user":"50ef77a4e4b0bdaecbb47d99"},{"problem":90,"code":"(fn [x y] \n  (set (for [s x, t y]\n         [s t])))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn [c1 c2]\n  (set (for [x c1 y c2] (list x y))))","problem":90,"user":"5125745ae4b05d10e3e395f9"},{"problem":90,"code":"#(set (for [a %1, b %2]\n        [a b]))","user":"5d2c779be4b01671435dbc8d"},{"problem":90,"code":"#(set (for [x % y %2]\n        [x y]))","user":"543366dde4b0b6b47310fcdf"},{"problem":90,"code":"(fn cart [l1 l2]\n  (set (for [e1 l1 e2 l2]\n    [e1 e2])))","user":"56fbcc1fe4b07572ad1a88d5"},{"code":"#(into #{} (for [x % y %2] [x y]))","problem":90,"user":"4e89ff3d535d3e98b802328a"},{"problem":90,"code":"(fn cartesian \n  [a b]\n   \n  (set (for [x a \n             y b] \n         \n         [x y])))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":90,"code":"(fn [xs ys] (set (mapcat (fn [x] (map (fn [y] (vec (list x y))) ys)) (vec xs))))","user":"5447e08ce4b032a45b8693c3"},{"problem":90,"code":"(fn [x y] (set (for [x1 (reverse x) y1 (reverse y)] (vector x1 y1))))","user":"559eb160e4b0acc240e314e1"},{"problem":90,"code":"(fn [a b]\n  (reduce\n   (fn [result ae]\n     (into result \n           (map (fn [be] (vector ae be)) b)))\n   #{}\n   a))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn [s1 s2]\n  (set\n    (for [x s1, y s2]\n        [x y])))","problem":90,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn cartesian-product [a b]\n  (set\n    (mapcat\n      #(map \n        (comp (partial cons %)\n              list)\n        b)\n    a)))","problem":90,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [X Y]\n  (set (for [x X y Y] [x y])))","problem":90,"user":"4e49a7bb535dc968683fc4c6"},{"problem":90,"code":"(fn [a b] (set(for [x a y b]\n            [x y])))","user":"53b4bddae4b047364c0444b9"},{"problem":90,"code":"(fn [xs ys]\n    (letfn [(mp [xxs y]\n                (map #(vector %1 %2 ) xxs (repeat y)))]\n              (set (apply concat (map (partial mp xs) ys)))))","user":"56fd058be4b08d47c97781a1"},{"problem":90,"code":"#(set (for [a %1 b %2][a b]))","user":"5603d057e4b0c80df0ca264e"},{"problem":90,"code":"(fn [x y](set (mapcat (fn [a] (map #(vector a %) y)) x)))","user":"5a533cc0e4b05d388ecb6c09"},{"problem":90,"code":"(fn [coll1 coll2]\n  (into #{} (for [x coll1 y coll2] [x y])))","user":"575086e7e4b02ea114799276"},{"code":"(fn [s1 s2]\n  (set (reduce #(concat %1 %2) #{} \n          (for [a s1] (for [b s2] [a b])))))","problem":90,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":90,"code":"#(set(for [a %1 b %2] (list a b)))","user":"5dbb5200e4b09f47823971a9"},{"problem":90,"code":"(fn cartesian-product [xcoll ycoll]\n  (set (for [x xcoll\n             y ycoll]\n         [x y])))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn [xs ys]\n  (set (for [x xs, y ys] [x y])))","problem":90,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":90,"code":"#(set\n  (for [a %1\n        b %2]\n    [a b]))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":90,"code":"(fn fun90 [set1 set2]\n  (set (apply concat (map (fn [elt1]\n                            (map (fn [elt2]\n                                   (vector elt1 elt2))\n                                 set2))\n                          set1))))","user":"5075e374e4b09049dea827a5"},{"code":"(fn foo [x y]\n  (set \n   (for [i x\n         j y\n         :while (and x y)]\n     [i j])))","problem":90,"user":"506755b3e4b03d366d7cb2bc"},{"problem":90,"code":"(fn [a b] (set (partition 2 (mapcat #(interleave a (repeat %)) b ))))","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":90,"code":"(fn cart-prod\n  [a b]\n  (into #{} (mapcat (fn [x]\n                     (map #(vector % x) a)\n                     )b)))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn product [xs ys]\n  (set (mapcat (fn [y]\n                 (map (fn [x]\n                        (vector x y)) xs)) ys)))","problem":90,"user":"5186134ce4b0da5a5be3bac7"},{"problem":90,"code":"(fn  \n  [x y] \n  (set(apply concat\n         (for [xx x]\n           (map #(vector xx %) y)))))","user":"51c1b644e4b0d204dbe2ca12"},{"code":"(fn [a b]  (set (for [x a y b] (vector x y))))","problem":90,"user":"50981062e4b04e098a4c7268"},{"problem":90,"code":"(fn [set1 set2]\n\n  (reduce\n\n    (fn [acc lilset]\n      (\n        into acc lilset\n\n        )\n\n\n      )\n\n\n    #{}\n\n    (map\n      (fn [set1n]\n\n        (map\n\n          (fn [set2n]\n\n            [set1n set2n]\n            )\n          set2\n          )\n        )\n      set1)\n\n\n    )\n\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn cart-prod [a b]\n  (loop [res #{} x a y b]\n    (if (empty? y)\n      res\n      (recur (into res (map #(conj [] % (first y)) x)) x (rest y)))))","problem":90,"user":"4f04d312535dcb61093f6be7"},{"problem":90,"code":"(fn [a b] (into #{} (for [i a j b] [i j])))","user":"53e91473e4b036ad0777e495"},{"problem":90,"code":"(fn\n  [xs ys]\n  (loop [xs xs ys ys out #{}]\n    (cond (empty? ys) out\n          :else (recur xs (rest ys) (into out (map #(conj % (first ys)) (map vector xs)))))))","user":"57acee37e4b0b8559636fc94"},{"problem":90,"code":"(fn cartesianProduct\n  [n m]\n  (set (for [x n y m] [x y])))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n    (for [e1 a\n          e2 b]\n      [e1 e2])))","user":"5afca248e4b0cc2b61a3bd12"},{"code":"(fn [A B] (into #{} (for [x A y B] [x y])))","problem":90,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn __ [a b]\n  (set (for [aa a bb b] (vector aa bb))))","problem":90,"user":"4fa719c0e4b081705acca1bf"},{"problem":90,"code":"#(set (for[x %1 y %2][x y]))","user":"555c6344e4b0b056612e224c"},{"code":"(fn [xs ys]\n  (apply (comp set concat)\n    (for [x xs]\n      (for [y ys]\n        [x y]))))","problem":90,"user":"4e4ca885535dc968683fc4df"},{"code":"#(set (for [x %1 y %2] (vector x y)))","problem":90,"user":"4fabbb97e4b081705acca21d"},{"problem":90,"code":"(fn cartesian-product [set-a set-b]\n  (if (= 0 (count set-b))\n    []\n    (apply sorted-set\n           (concat\n              (map #(vec [% (first set-b)]) (apply sorted-set set-a))\n              (cartesian-product set-a (apply sorted-set (rest set-b)))))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":90,"code":"(fn [set1 set2] \n  (reduce (fn [coll a] \n            (apply conj coll (map vector (repeat a) set2))) \n           #{} \n           set1))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (set (mapcat\n     (fn [x] (map (fn [y] [x y]) s2))\n     s1)\n    ))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn [x y]\n   (set (for [a x\n              b y]\n          [a b])))","problem":90,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [s0 s1]\n   (apply hash-set\n     (apply concat\n       (map\n         (fn [o0] (map #(vector o0 %) s1))\n         s0))))","problem":90,"user":"50f1dedbe4b0897c4366dcd8"},{"problem":90,"code":"(fn [x y] \n  (into #{} (for [a x b y]\n    [a b])))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [e1 s1 e2 s2]\n    [e1 e2])))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":90,"code":"(fn [col1 col2] (into #{} (apply concat (map (fn [p2] (map (fn [p1] [p1 p2]) col1)) col2 ))))","user":"53347274e4b0656e627bfd6b"},{"code":"(fn [col1 col2]\n  (loop [result #{} col col1]\n    (if (empty? col)\n        result\n        (recur\n          (reduce conj result (map #(vec [ (first col) % ] ) col2)) (rest col) )\n    )\n  ))","problem":90,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"#(set( for [x %1 y %2] [x y]))","problem":90,"user":"4e61bb60535d8ccf87e9fe5c"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1 y s2] \n                   [x y])))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [xs ys]\n    (set (for [x xs\n          y ys]\n      [x y])))","problem":90,"user":"50555c06e4b0ce54f56f03fa"},{"code":"#(set (for [x % y  %2] [x y]))","problem":90,"user":"502be4fae4b08f5602f232eb"},{"code":"(fn [a b]\n  (set (for [a a b b] [a b])))","problem":90,"user":"4e6f578c535d5021c1a8961b"},{"problem":90,"code":"(fn [set1 set2] \n  (reduce \n   (fn [v s1] (into v (map #(vec [s1 %]) set2))) #{} set1)\n  )","user":"540997ede4b0addc1aec66dd"},{"problem":90,"code":"(fn cartestianProduct [s1 s2]\n  (set \n    (apply concat \n        (for [x s1]\n          (for [y s2]\n              (vector x y))))))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"(fn [x y] (apply hash-set (map #(list %1 %2) (mapcat (partial repeat (count y)) x) (cycle y))))","problem":90,"user":"514d398ee4b019235f6c0583"},{"problem":90,"code":"(fn [set-1 set-2]\n  \t(set (for [s1 set-1\n               s2 set-2]\n           [s1 s2])))","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":90,"code":"(fn [s1 s2] (into #{} (for [x s1\n                            y s2]\n             [x y])))","user":"5f8e2a08e4b0715f5002d767"},{"problem":90,"code":"(fn my-cartesian-product\n  [x y]\n  (set (mapcat\n    (fn\n      [a]\n      (map #(vector a %) y))\n    x)))","user":"5d9c8a85e4b0eb781811cdad"},{"problem":90,"code":"(fn [l1 l2]\n  (set \n   (for [x l1\n        y l2]\n    [x y])))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn cartesian [s1 s2]\n  (into #{} (reduce concat (for [first-elem s1] (map #(list first-elem %) s2)))))","problem":90,"user":"51d360d1e4b099f3b6acddff"},{"problem":90,"code":"#(apply hash-set (for [x %1 y %2] (vector x y)))","user":"5dcb1e73e4b02b31cc3da3b6"},{"problem":90,"code":"#(into #{} (for [x %1 y %2]\n   [x y]))","user":"506f0968e4b09350ab4199f5"},{"problem":90,"code":"(fn [coll1 coll2] (set (for [x coll1, y coll2] [x y])))","user":"5a95c639e4b0d174b936c75e"},{"problem":90,"code":"(fn [A B] \n  (set (for [x A\n             y B]\n         (conj [] x y))))","user":"566f0ff6e4b0a866af6896e5"},{"code":"(fn [set1 set2]\n    (set (for [a (vec set2) b (vec set1)] [b a]))\n  )","problem":90,"user":"5201ff99e4b0b2e020a18f26"},{"problem":90,"code":"(fn [s1 s2]\n   (set (for [x s1,\n              y s2]\n          [x y])))","user":"53a26cede4b0f1fc7453882a"},{"code":"(fn [s1 s2]\n    (set\n      (mapcat (fn [e] (map #(vector e %) s2))\n              s1)))","problem":90,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(fn [as bs]\n  (set \n    (for [a as b bs]\n      [a b])))","problem":90,"user":"4dbdc9da535d020aff1edf4c"},{"code":"#(set (for [x %2 y %1] [y x]))","problem":90,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":90,"code":"(fn [seq1 seq2]\n  (loop [result #{}\n         _seq1 seq1]\n    (if (empty? _seq1)\n      result\n      (recur\n       (into result (map #(identity [(first _seq1) %]) seq2))\n       (rest _seq1)))))","user":"5715b929e4b07c98581c3ae2"},{"code":"#(into #{} (for [a %1 b %2]\n  [a b]))","problem":90,"user":"4f04664a535dcb61093f6bc1"},{"problem":90,"code":"(fn [l1 l2] (set (apply concat (map #(map (fn [k] (vector % k)) l2) l1))))","user":"5d2ca236e4b01671435dbc94"},{"problem":90,"code":"(fn X [ranks suits]\n  (set (for [r ranks\n        s suits]\n    [r s])))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":90,"code":"(fn [coll1 coll2]\n  (set (reduce concat\n               (map (fn [el1]\n                      (map #(vector el1 %) coll2))\n                    coll1))))","user":"55b28b57e4b01b9910ae296c"},{"code":"(fn cart-prod [s1 s2]\n  (set (for [x s1 y s2]\n    [x y])))","problem":90,"user":"4f7e29dde4b06e829148e1ca"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n        (for [x set1 y set2]\n          [x y])))","user":"54684c3be4b00cfc9eacc139"},{"problem":90,"code":"(fn [x y] (set(for [a x b y] [a b])))","user":"5c7f7889e4b0d597f478cae0"},{"code":"#(set(for [a (vec %)\n       b (vec %2)]\n      [a b]))","problem":90,"user":"4f8386c5e4b033992c121c1d"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [e1 s1 e2 s2]\n    (list e1 e2))))","user":"54651faee4b01be26fd746d6"},{"problem":90,"code":"(fn [a b] (set (mapcat (fn [ae] (map (fn [be] [ae be]) b)) a)))","user":"554a270fe4b0a04f79299570"},{"problem":90,"code":"(fn pcart\n  [seta setb]\n  ;; step 1 : first element of seta with every setb element\n  (loop [coll seta\n        result #{}\n        counter 0]\n    (if (= counter (count seta))\n      result\n      (recur\n        (set (rest coll))\n        (into result (map vector (repeat (count setb) (first coll)) setb))\n        (inc counter)))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":90,"code":"#(apply sorted-set (for [x %1 y %2] [x y]))","user":"53a7e3b9e4b047364c044423"},{"code":"(fn [coll1 coll2] \n  (loop [result #{}\n    item (first coll1)\nitems (next coll1)]\n(if item\n(recur (into result (map (fn [i] [item i]) coll2))\n(first items)\n(next items))\nresult)))","problem":90,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn __ [m n]\n  \n  (into #{} (for [s m t n]\n   \t[s t]\n  ))\n  \n )","problem":90,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn [set1 set2] \n  (set (for [set1 set1 set2 set2] [set1 set2])))","problem":90,"user":"520f46f9e4b0101e4be6fcee"},{"problem":90,"code":"(fn cart-prod\n  [set1 set2]\n  (reduce\n   (fn [acc x]\n     (into\n      #{}\n      (concat\n       acc\n       (map (fn [y] [x y]) set2))))\n   #{}\n   set1))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":90,"code":"(fn [s1 s2]\n         (into #{} (for [a s1 b s2] [a b])) \n          )","user":"533c2605e4b0e30313ee6cd7"},{"code":"#(into #{} (apply concat (for [e1 %](for [e2 %2](vector e1 e2)))))","problem":90,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [a b]\n   (reduce #(conj %1 %2) #{} (partition 2\n   (loop [x b w #{}]\n     (if (empty? x)\n       w\n     (recur (rest x) (concat w (interleave a (repeat (count a) (first x)))))\n   )))))","problem":90,"user":"4f017593535dcb61093f6a36"},{"code":"(fn [s1 s2]\n  (set (mapcat \n         #(map (fn [a] [% a]) s2) \n         s1)))","problem":90,"user":"4e8a0d5d535d3e98b802328e"},{"problem":90,"code":"(fn [xs1 xs2]\n  (set (for [x1 xs1 x2 xs2] [x1 x2])))","user":"5785de4ce4b0ebec4cfb74e6"},{"code":"(fn\n  [a b]\n  (into #{} \n    (reduce concat \n      (map \n       (fn\n         [ae]\n  \t     (map #(vector ae %) b)) a)\n       )))","problem":90,"user":"536aa86de4b0243289761eb1"},{"code":"#(set (for [number1 (vec %1) number2 (vec %2)] [number1 number2]))","problem":90,"user":"50ee145de4b06330c1f87c53"},{"problem":90,"code":"#(reduce \n  (fn [accum x] \n    (into accum \n          (reduce \n     \t\t(fn [accum2 x2] \n              (conj accum2 [x x2]))\n           [] %2)))\n  #{} %1)","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn carty\n  [xs ys]\n  (apply hash-set (for [x xs y ys] [x y])))","problem":90,"user":"4f6bab49e4b07046d9f4efb1"},{"problem":90,"code":"(fn [xs ys]\n   (set (for [x xs\n              y ys]\n          [x y])))","user":"550b502ae4b06e50f9beb13f"},{"code":"#(set (for [x %1 y %2] [x y] ))","problem":90,"user":"4e739e13535dff18050a9c76"},{"problem":90,"code":"(fn [s1 s2] \n  (set (mapcat (fn [n]\n         (map (fn [x] \n                (vector n x)) s2)\n         ) s1)))","user":"558053b1e4b05c286339e0e9"},{"problem":90,"code":"#(loop [x #{} a % b %2] (if (empty? a) x (recur (conj x [(first a) (first b)]) (if (= (count b) 1) (rest a) a) (if (= (count b) 1) %2 (rest b)))))","user":"55c3f19de4b0e31453f64991"},{"problem":90,"code":"(fn\n  [a b]\n  (apply hash-set (for [x a y b] [x y])))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [bb aa] (set (for [a aa b bb] [b a])))","problem":90,"user":"4ff76effe4b0678c553fc390"},{"problem":90,"code":"(fn [x y]\n  (set\n   (for [i (vec x) ii (vec y)]\n     [i ii])))","user":"5c7741dce4b0fca0c1622806"},{"problem":90,"code":"(fn [x y]\n  (into #{} (for [s x t y] [s t])))","user":"5742ec91e4b05c31a32c0883"},{"problem":90,"code":"(fn cart-product [a b]\n\n  (set (for [x a y b] [x y]))\n  \n)","user":"54a7d707e4b09f271ff37c9b"},{"problem":90,"code":"(fn [s1 s2]\n   (->> (map #(map (partial vector %) s2) s1)\n        (apply concat)\n        (set))\n   )","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":90,"code":"(fn [xs ys]\n  (into #{} \n        (for [x xs y ys]\n          [x y])))","user":"50f3bd98e4b041536e2eca3a"},{"code":"(fn [s1 s2]\n   (into #{} (for [i1 s1\n          i2 s2]\n      [i1 i2]))\n   )","problem":90,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":90,"code":"(fn cartesian-product [xs ys]\n  (set (for [x xs y ys] [x y])))","user":"534056fce4b085b17e897dac"},{"problem":90,"code":"(fn [col1 col2]\n  (into #{} (for [elem1 col1 elem2 col2] [elem1 elem2])))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":90,"code":";(fn[c1 c2](set(for[x c1 y c2)] [x y]))\n#(set(for[x %1 y %2][x y]))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n  (for [i s1\n        j s2]\n    [i j])))","user":"51553ea7e4b06c5f6a1490a2"},{"problem":90,"code":"(fn[x1 x2] (into #{} (for [y1 x1 y2 x2] (conj [] y1 y2))))","user":"5596af34e4b04c1e5c31d758"},{"problem":90,"code":"(fn [x y]\n  (set (for [a x b y] [a b]))\n  )","user":"546a6c7ce4b00cfc9eacc154"},{"problem":90,"code":"(fn cartesian-product-solution2\n  [a b] ;; update args as needed\n  ;; Write a function which calculates the Cartesian product of two sets.\n  (letfn [\n          (carhelper [el] (\n                            map #(vector el %) b\n                            ))]\n    (set (mapcat carhelper a))))","user":"54df955ee4b024c67c0cf7af"},{"problem":90,"code":"( fn [c1 c2] ( set ( for [ a c1  b c2  ] (vector a b)  )  )  )","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":90,"code":"(fn [s1 s2]\n          (set (for [v1 s1\n                     v2 s2]\n                 [v1 v2])))","user":"531c6e72e4b08068f379eda0"},{"problem":90,"code":"(fn [x y]\n  (set (for [x x\n             y y]\n         [x y])))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":90,"code":"(fn [set1 set2]\n  (reduce (fn [carry x]\n            (into carry (map #(vector x %) set2)))\n          #{}\n          set1))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"#(into #{} (for [a %1 b %2] [a b]))","problem":90,"user":"4e707db6535d5021c1a8963a"},{"code":"(fn [a b]\n  (set \n    (apply concat (for [ax a]\n      (for [bx b]\n        [ax bx])))))","problem":90,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":90,"code":"(fn [set2 set1]\n  (apply hash-set (mapcat (fn [itm]\n         (map #(-> [itm %]) set1)) set2)))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":90,"code":"(fn cartesian [set1 set2]\n  (set (for [elem1 set1\n        elem2 set2] [elem1 elem2])))","user":"52b9e920e4b07a9af57922c9"},{"problem":90,"code":"#(set (for [i % j %2] [i j] ))","user":"51e1c176e4b06a68e693eafb"},{"problem":90,"code":"(fn [xs, ys] (into #{} (for [x xs, y ys] [x y])))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn cart [a b] (clojure.set/union (set (map #(vector (first a) %) b)) (if (not (empty? (rest a))) (cart (rest a) b)) #{}))","problem":90,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":90,"code":"#(set( for [x %1, y %2] [x y]))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"(fn [a b]\n   (set (for [x b \n   \t y a]  \t\n    \t     [y x])))","problem":90,"user":"515ff4b9e4b0e2be8aa20bd9"},{"problem":90,"code":"(fn cartesian-product [set-a set-b]\n  (set\n    (for [a set-a\n          b set-b]\n      [a b])))","user":"55d28b38e4b0e31453f64a58"},{"problem":90,"code":"(fn [a b]\n  (set (apply concat\n              (map (fn [x] (map #(vec [% x]) a))\n                   b))))","user":"5da760ebe4b000c986472c1a"},{"problem":90,"code":"(fn [s t] (set (for [x s y t] [x y])))","user":"4fa5c8dde4b081705acca1af"},{"problem":90,"code":"(fn cartesianProd\n  [colla collb]\n  (set(for [i colla, j collb]\n    [i j])))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn [one two] (loop [x one\n                     y two\n                     i 0\n                     j 0\n                     return #{}]\n                (if (= j (count y))\n                  return\n                  (recur x \n                         y \n                         (if (= i (dec (count x)))\n                           0 \n                           (inc i)) \n                         (if (= i (dec (count x))) \n                           (inc j) \n                           j)\n                         (conj return [(nth (seq x) i) (nth (seq y) j)])))))","problem":90,"user":"50214ffae4b0ef1d2d4433bc"},{"problem":90,"code":"(fn [a b]\n               (set (for [x a y b] [x y])))","user":"5658b9bde4b00d315579610e"},{"code":"#(into #{}\n  (for [a %1 b %2] (vector a b)))","problem":90,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn [a b]  (set (for [x a y b] [x y])))","problem":90,"user":"51a477eee4b0def3c5c58692"},{"code":"(fn [xs ys]\n  (set (for [x xs y ys] [x y])))","problem":90,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":90,"code":"(fn [coll coll2]\n  (into #{} (for [x coll y coll2]\n\t\t      [x y])))","user":"52ba447ee4b07a9af57922ce"},{"problem":90,"code":"(fn [as bs]\n          (set (for [a as b bs]\n                 [a b])))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn [set1 set2]\n  (set\n    (for [v1 set1 v2 set2] [v1 v2])))","problem":90,"user":"4ee3afde535d10e5ff6f5370"},{"code":"#(into #{} (for [i %1 j %2] (vec [i j])))","problem":90,"user":"5301157ae4b0d8b024fd3717"},{"problem":90,"code":"(fn cartesian-product\n  [s1 s2]\n  (loop [s1 s1 s2 s2 res []]\n    (if (first s2)\n      (recur s1 (rest s2) (concat res (vec (map #(vector % (first s2)) s1))))\n      (set res))))","user":"550d9452e4b06e50f9beb15d"},{"code":"#(set (for [c1 %1 c2 %2] [c1 c2]))","problem":90,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn cartesian-product [left right]\n  (set (for [x left y right] [x y])))","problem":90,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [set-b set-a] (apply hash-set (mapcat (fn [elem-a] (map #(vec (list %1 elem-a)) set-b)) set-a)))","problem":90,"user":"51b7b521e4b0d906fcd71d3a"},{"code":"(fn cartesian [as bs]\n  (set (for [b bs a as] [a b])))","problem":90,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":90,"code":"(fn f [A B]\n  (let [fB (fn [x] (map #(vector x %) B))]\n    (set (reduce concat (map #(fB %) A)))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":90,"code":"(fn [a b]\n  (reduce #(into % (map (partial vector %2) b)) #{} a))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn cart-p\r\n  [s1 s2]\r\n  (apply hash-set (apply concat (map (fn [b] (map #(vector b %) s2)) s1))))","problem":90,"user":"4f17ab99535d64f603146457"},{"problem":90,"code":"#(into #{} (for [x %1\n                 y %2]\n            [x y]))","user":"514992d2e4b0b64cbeae1848"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set\n   (for [x s1\n        y s2]\n     [x y])))","user":"571d063ee4b0145328a76272"},{"code":"(fn [a b] (set (mapcat #(map (fn [x] (vector % x)) b) a)))","problem":90,"user":"4ec07699535dfed6da9c6da2"},{"problem":90,"code":"#(set (for [v1 %1 v2 %2] [v1 v2] ))","user":"554edb85e4b00713264bd99a"},{"code":"#(set (for [x %, y %2][x y]))","problem":90,"user":"4fbef9a6e4b081705acca316"},{"code":"(fn [s s2]\n  (set (for [e s e2 s2]\n    [e e2])))","problem":90,"user":"4e599577535d8a8b8723a29f"},{"problem":90,"code":"(fn [s1 s2]\n   (into #{} (for [i s1\n         j s2]\n     [i j])\n))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":90,"code":"(fn [s1 s2]\n    (->> (map (fn [x]\n           (map (fn [y]\n                  [x y])\n                s2))\n              s1)\n         (reduce concat)\n         (set)))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":90,"code":"(fn [sequence1 sequence2]\n  (set (apply concat\n              (map (fn [x]\n                     (map #(vector x %)\n                          sequence2))\n                   sequence1))))","user":"58637f03e4b0f14aab7c881e"},{"problem":90,"code":"(fn cartProd [x y] (set (for [x1 x y1 y] [x1 y1])))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [l1 l2]\n    (set\n      (for [x l1 y l2]\n        [x y])))","problem":90,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn cart [x y]\n  (if (empty? x)\n    #{}\n    (set \n      (concat\n        (map #(vector (first x) %) y) \n        (cart (rest x) y)))))","problem":90,"user":"5012aefce4b0c8732600222a"},{"problem":90,"code":"(fn cartesian_product\n  [x y]\n  (set (for [a x b y] [a b])))","user":"57f81544e4b0d3187e900917"},{"problem":90,"code":"(fn [s1 s2] (set (mapcat identity (map (fn [i2] (map #(vec [% i2]) s1)) s2))))","user":"4f0f174c535d0136e6c22330"},{"problem":90,"code":"(fn [a b]\n  (set (for [ae a be b]\n    [ae be])))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":90,"code":"(fn [a b]\n  (set (for [v1 a v2 b]\n    [v1 v2])))","user":"57408f87e4b05c31a32c0856"},{"problem":90,"code":"(fn [xs xt] (into #{}(for [s xs t xt] [s t])))","user":"53623eaee4b0243289761e4f"},{"problem":90,"code":"#(set (for [ae %1\n            be %2]\n        [ae be]))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn cartprod [a b]\n  (set (for [x a, y b] [x y])))","problem":90,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn cp [xs ys]\n  (set (for [x xs\n        y ys]\n    [x y])))","problem":90,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"(fn [set-a set-b]\n  (into #{} (for [x set-a, y set-b] [x y])))","problem":90,"user":"4e7e4d5c535db169f9c7970f"},{"problem":90,"code":"(fn [s1 s2]\n  (reduce\n    (fn [a b]\n      (into a\n            (reduce\n              (fn [a1 b1]\n                (conj a1 [b b1]))\n              #{}\n              s2\n                )))\n    #{}\n    s1))","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [x y] (set (for [yp y xp x] [xp yp])))","problem":90,"user":"4ea9b80c535d7eef30807306"},{"problem":90,"code":"(fn\n  [a b]\n  (into '#{}\n    (for [x a\n           y b]\n         [x y])))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"problem":90,"code":"#(reduce (fn [res x] (clojure.set/union res (reduce (fn [res1 y] (conj res1 [x y])) #{} %2))) #{} %1)","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":90,"code":"(fn mfn [s1 s2]\n  (into #{} (for [x s1\n                  y s2]\n              [x y])))","user":"558843dae4b059ccff29b1f3"},{"problem":90,"code":"#(set (apply concat (for [x %1] (for [y %2] [x y]))))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [sa sb]\n  (reduce #(apply (partial conj %1) (map (fn [i] (vector i %2)\n                           )\n                         sa)) #{} sb\n   ))","problem":90,"user":"51da7e49e4b02ceefd947768"},{"problem":90,"code":"(fn [cs ss]\n  (->>\n   cs\n   (mapcat (fn [c] (map (fn [s] (list c s)) ss)))\n   (reduce conj #{})\n   )\n)","user":"5bc28638e4b07a9b28b10033"},{"problem":90,"code":"(fn [s r] (set (for [is s ir r] [is ir])))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":90,"code":"(fn [s1 s2]\n  (into #{}\n    (for [y s2 x s1]\n      [x y])))","user":"5ab276f2e4b073f1774425e6"},{"problem":90,"code":"#(apply hash-set (for [ x %1 y %2 ] [ x y ] ))","user":"55536a8ae4b0deb715856e03"},{"problem":90,"code":"#(into #{} (for [card %1 mark %2] [card mark]))","user":"5895385fe4b00487982d5279"},{"problem":90,"code":"(fn [numbers suite]\n   (set (let [vec []] (for [x numbers y suite] (into vec [x y]))))\n   )","user":"57aa103be4b0b8559636fc64"},{"code":"(fn cartesian\n  [a b]\n  (if (empty? a) #{}\n    (into (cartesian (rest a) b) (map #(conj (-> a first vector) %) b))))","problem":90,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn cart-product [s1 s2]\n  (set (for [i s1\n             j s2]\n         [i j])))","problem":90,"user":"4fd16778e4b04c3a95aa040f"},{"code":"#(set (reduce (fn [result x] (apply conj result (reduce (fn [_result y] (conj _result [x y])) result %2))) [] %1) )","problem":90,"user":"4e79a143535db169f9c796a2"},{"problem":90,"code":"(fn [x y]   (reduce   (fn [c xi]  (           reduce  (fn [r yi ]  (conj r (vector xi yi) )    )  c  y     )                   )   #{} x  )                                )","user":"5da98129e4b000c986472c33"},{"code":"(fn[s1 s2] (set (for[e1 s1 e2 s2] [e1 e2])))","problem":90,"user":"51377188e4b04059df19f303"},{"code":"#(set (for [x %1 y %2]\n  [x y]))","problem":90,"user":"4f3c772de4b0e243712b1f4c"},{"problem":90,"code":"(fn [x y]\n  (into #{} (for [s1 x s2 y] [s1 s2])))","user":"52cf1e25e4b07d0d72b2739c"},{"code":"(fn [xs ys]\n  (set \n    (for [x xs y ys]\n      [x y])))","problem":90,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":90,"code":"(fn[x y]\n\t(into #{} (mapcat\n\t  (fn [itm] (map #(vector itm %) y))\n       x)))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [a s1 b s2]\n         [a b])))","user":"5af8221ce4b0cc2b61a3bccd"},{"code":"(fn [left right]\n  (set (for [l left r right] [l r])))","problem":90,"user":"4ff6aea8e4b0678c553fc381"},{"problem":90,"code":"#(set (for [i %1\n          \tj %2]\n    \t[i j]))","user":"56acfee5e4b03c432f18734f"},{"code":"(fn [as bs]\n  (into #{}\n        (for [a as b bs]\n          [a b])))","problem":90,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn cartesian-product\n  [a b & res]\n  (let [m (first a)]\n    (if (empty? a)\n      (into #{} (apply concat res))\n      (recur (rest a) b (cons (mapcat #(assoc {} m %1) b) res)))))","problem":90,"user":"4e3bcccd535deb9a81d77f56"},{"problem":90,"code":"(fn [xs ys]\n  (set \n     (for [x xs y ys] [x y])))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn [x y] \n   (apply hash-set (mapcat #(map (fn [z] [z %]) x) y)))","problem":90,"user":"52fa4f48e4b047fd55836ff7"},{"problem":90,"code":"(fn cartprod\n  [s1 s2]\n  (into #{} (mapcat #(map vector (repeat %) s2) s1)))","user":"5609d328e4b05f002753deee"},{"problem":90,"code":"(fn [s1 s2]\n    (set\n          (for [s1 s1\n                s2 s2]\n              [s1 s2])))","user":"52faf67ce4b047fd55837005"},{"problem":90,"code":"(fn [a b]\n  (into #{} (mapcat (fn [x] (map (fn [y] (conj '() y x)) b)) a)))","user":"5694129de4b0dcc4269f410c"},{"code":"(fn [c1 c2]\n  (set (for [a c1\n             b c2]\n         [a b])))","problem":90,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [a b]\n  (set\n    (map #(into [] %)\n      (partition 2\n        (flatten\n          (map #(interleave a (repeat %)) b))))))","problem":90,"user":"507e68abe4b085af06e3afd2"},{"code":"(comp set vec #(for [x %1 y %2] [x y]))","problem":90,"user":"4e0359e8535d04ed9115e792"},{"problem":90,"code":"(fn cartesianProduct \n  [a b]\n  (into #{}\n        (for [x a y b] (vector x y))))","user":"59dd3930e4b0a0ac046f2504"},{"problem":90,"code":"(fn [s1 s2]\n  (set\n    (for [e1 s1\n          e2 s2]\n      [e1 e2])))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":90,"code":"(fn [x y]\n  (-> (for [x x y y] [x y])\n      (set)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn [as bs] (set (mapcat (fn [a] (map (fn [b] [a b]) bs)) as)))","problem":90,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn [s1 s2]\r\n  (->> s2\r\n     (mapcat #(map (fn [v1] [v1 %]) s1))\r\n     set))","problem":90,"user":"4def301c535d08e6dec9fe12"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n  (for [i a j b]\n    [i j])))","user":"54145050e4b01498b1a719ea"},{"problem":90,"code":"(fn [one two]\n  (set\n    (for [o one\n          t two]\n      [o t])))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":90,"code":"(fn [set1 set2] \n  (reduce \n    (fn [agg val] \n      (reduce #(conj %1 (vector val %2)) agg set2)) \n    #{} \n    set1 ))","user":"546692aee4b01be26fd746e7"},{"code":"(fn [s1 s2]\n  (set (for [a s1\n             b s2]\n         [a b])))","problem":90,"user":"528b01a0e4b0239c8a67ae89"},{"problem":90,"code":"#(into #{} (for [x %1\n         y %2\n      ] [x y]))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":90,"code":"(fn [s t]\n  (set (for [x s\n             y t]\n         [x y])))","user":"551ecb76e4b08d5046aa8a4c"},{"code":"(fn [a b]\n   (set (mapcat (fn [ai]\n          (map #(list ai %) b)\n          ) a)))","problem":90,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":90,"code":"(fn [ax bx]\n  (set (for [a ax\n             b bx]\n         [a b])))","user":"5c62979fe4b0fca0c162264c"},{"problem":90,"code":"(fn do-something\n  [a b]\n  (reduce (fn [m v]\n            (apply conj m\n                  (map #(vector % (second v))  (first v))))\n          #{}\n          (partition 2 (interleave (repeat (count b) a) b))))","user":"56b18445e4b0982f16b37dee"},{"code":"#(set (for [x1 % x2 %2] [x1 x2]))","problem":90,"user":"4f31ad57e4b0d6649770a089"},{"code":"(fn [s1 s2]\n  (set \n    (for [x s1 y s2]\n      [x y])))","problem":90,"user":"5028bce0e4b01614d1633ffb"},{"code":"#(into #{} (for [x % y %2] [x y] ))","problem":90,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":90,"code":"(fn [a b] (set (for [k1 a k2 b] [k1 k2])))","user":"6074e278e4b069485764de51"},{"problem":90,"code":"(fn [xs ys]\n  (set (for [x xs y ys]\n         [x y])))","user":"56abeb1fe4b03c432f187344"},{"problem":90,"code":"(fn cart [a b]\n    (set (mapcat (fn [m] (map #(vector m, %) b) ) a)))","user":"58ec1e63e4b056aecfd47d54"},{"problem":90,"code":"#(into #{} (for [x % y %2]\n   [x y]))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn [as bs]\n  (set (for [a as b bs] [a b])))","problem":90,"user":"5012ec0ae4b0c87326002230"},{"problem":90,"code":"(fn [x y] (into #{} (#(for [a %1 b %2] [a b]) x y)))","user":"5793931ee4b0e215f87e845c"},{"problem":90,"code":"(fn [s1 s2] (set (for [x s1\n                       y s2]\n                    [x y])))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":90,"code":"(fn [a b]\n  (into #{}\n        (for [x a, y b]\n          [x, y])))","user":"59750a68e4b01722bebd4cba"},{"code":"(fn [s1 s2] \n  (let [pairs (for [x s1 y s2] [x y] )]\n      (set pairs)))","problem":90,"user":"523a9fc9e4b081681ca7adca"},{"problem":90,"code":"(fn [set1 set2]\n  (reduce\n   (fn [acc e]\n     (apply conj acc (for [x set2] [e x])))\n   #{}\n   set1))","user":"540d5085e4b0addc1aec670e"},{"problem":90,"code":"(fn [set1 set2]\n  (loop [set2 set2 result #{}]\n    (cond\n      (empty? set2) result\n      :else\n      (recur (rest set2) \n             (loop [set1 set1 result result]\n               (cond\n                 (empty? set1) result\n                 :else\n                 (recur (rest set1) (conj result [(first set1) (first set2)]))))))))","user":"4eb6f065535d7eef30807372"},{"problem":90,"code":"(fn [l1 l2] (set (apply concat (map (fn [e1] (map (fn [e2] [e1 e2]) l2)) l1))))","user":"55ecac8ee4b0121d4835fdcc"},{"code":"#(into #{} (map vector (apply concat (map (partial repeat (count %2)) %1)) (cycle %2)))","problem":90,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [s1 s2] (into #{} (for [ x s1 y s2] [x y])))","problem":90,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn descart [s1 s2] (set (for [x s1, y s2] [x y])))","problem":90,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [s1 s2] \n  (set\n    (mapcat \n      (fn [x] (map #(list x %) s2))\n        s1)))","problem":90,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":90,"code":"(fn [s1 s2]\n  (set (reduce (fn [v i]\n               (concat v (map #(vector i %) s2)))\n               #{}\n               s1)))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn [xs ys]\r\n  (into #{} (for [x xs, y ys] [x y])))","problem":90,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":90,"code":"(fn do-cartesian-product [s1 s2]\n\t(loop [[n s :as all] (flatten (map #(interleave (repeat %) s2) s1))\n         v #{}]\n    (cond (empty? all)\n      v\n      :else (recur (drop 2 all) (conj v (vector n s))))))","user":"52b71bd2e4b0c58976d9ad4d"},{"problem":90,"code":"(fn cartesian \n  ; calculates the cartesian product of two sets\n  [set1 set2]\n  (set (for [x1 set1 x2 set2] [x1 x2])))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn [x y] (set (for [x x y y] (vector x y))))","problem":90,"user":"52baea85e4b07a9af57922d9"},{"code":"#(set (for [a % b %2]  [a b]))","problem":90,"user":"50d3ec8be4b030b634c368bb"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n  (into #{} (for [a s1\n                  b s2]\n              [a b])))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn [sq1 sq2] (set (apply concat (map (fn [x] (map #(vector x %) sq2)) sq1))))","problem":90,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"#(set (for [f % s %2] [f s]))","problem":90,"user":"506b016de4b0a2a5463de37f"},{"problem":90,"code":"(fn cartesian [x y]\n  (into #{}\n        (for [xs x ys y]\n          (conj [] xs ys))))","user":"5f003099e4b0cf489e8d7f17"},{"code":"(fn [x y] \n    (into #{}\n      (apply concat\n            (map #(map\n                    (fn [v] (vec (concat (list %) (list v))))\n                    y\n                  ) \n             x\n            )\n      )\n    )\n  )","problem":90,"user":"4e8b73e4535d65386fec2120"},{"problem":90,"code":"(fn ff [x y] (loop [remX x finals []]\n  (if (empty? remX)\n    (apply hash-set finals)\n    (let [fir (first remX)\n          dps (drop 1 remX)\n          ]\n      (recur dps\n             (concat finals ((fn [values] \n                               (apply vector \n                                      (map (fn [v] (vector fir v)) values))\n                               ) y) ))))))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":90,"code":"(fn matMul\n  [a b]\n  (set (mapcat #(for [i a] (list i %)) b)))","user":"5e9636fee4b0fbed045a3816"},{"problem":90,"code":"(fn [s1 s2]\n  (loop [product #{} r 0 c 0]\n    (if (>= r (count s1)) product\n      (if (>= c (count s2))\n        (recur product (inc r) 0)\n        (recur (conj product (list (nth (seq s1) r) (nth (seq s2) c))) r (inc c))))))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [coll-x coll-y]\n  (set \n    (for [x coll-x y coll-y]\n      [x y])))","problem":90,"user":"5250b7a5e4b0541d1855b83e"},{"code":"(fn [a b]\r\n  (into #{} \r\n  (for [n a\r\n\t      m b]\r\n\t  [n m])))","problem":90,"user":"504ec4d3e4b069badc5a33c9"},{"problem":90,"code":"(fn \n  [set1 set2]\n  (->>\n   (for [x set1 y set2]\n     [x y])\n   (set)))","user":"5aabd34fe4b073f177442565"},{"problem":90,"code":"(fn [a b] (set (mapcat (fn [c] (map (fn [x] [x c]) a)) b)))","user":"54d70f40e4b0a52adc2e2027"},{"problem":90,"code":"(fn cart-prod [s t]\n  (set (mapcat (fn [x] (map (fn [y] [x y]) t)) s)))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":90,"code":"#(into #{}(for [y %2 x %] [x y]))","user":"538d70abe4b0b51d73faae6e"},{"code":"(fn [c1 c2]\n  (set\n    (for [x c1 y c2]\n      [x y])))","problem":90,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":90,"code":"(fn [xs ys]\n  (loop [prod #{}\n         x xs]\n    (if (empty? x)\n      (set prod)\n      (recur (concat prod (map (fn [arg] [(first x) arg]) ys)) (rest x)))))","user":"4ea8570f535d7eef308072f8"},{"code":"(fn [one two] (set (for [o one t two] [o, t])))","problem":90,"user":"4f689a17e4b07046d9f4ef77"},{"code":"#(set (mapcat (fn [x] (map (fn [y] [x y]) %2)) %1))","problem":90,"user":"51b24defe4b02f8f128bb963"},{"code":"(fn[x y](set(for[a x b y][a b])))","problem":90,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [l1 l2] \n  (set \n    (reduce \n      (fn [res item] \n        (concat res (map #(conj [%] item) l1))) \n      #{} l2)))","problem":90,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":90,"code":"(fn [set1 set2]\n  (into #{}\n        (for [x set1 y set2]\n          (vector x y))))","user":"5f1af439e4b0f565ad998257"},{"problem":90,"code":"(fn myfunc [a b]\n( into #{} (for [x a y b] (vector x y))))","user":"5f8d76c3e4b0715f5002d758"},{"code":"(fn[col1 col2]\n  (set (for [a col1 b col2]\n     [a b]) )\n)","problem":90,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn prod [a b]\n  (set (for [i a j b] (vector i j)))\n  )","problem":90,"user":"5228f870e4b0186687e23a98"},{"problem":90,"code":"(fn [s1 s2] (set(for [x s1 y s2] [x y])))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":90,"code":"(fn [s1 s2] (set (for [k s1 v s2] [k v])))","user":"586615e6e4b0f14aab7c8858"},{"code":"#(set (for [x %1 y%2] [x y]\n   ))","problem":90,"user":"4ea31da2535d7eef308072c1"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n\t(into #{} (for [x s1 y s2] [x y])))","user":"552bd5c2e4b0ffed3738f969"},{"problem":90,"code":"(fn [set1 set2]\n           (reduce (fn [result x]\n                     (into result (reduce (fn [result2 x2]\n                                            (conj result2 [x x2]))\n                                          #{} set2)))\n                   #{} set1))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":90,"code":"(fn [s1 s2] (set (for [k s1 l s2] [k l])))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn [l1 l2]\n  (set (for [i l1 j l2] [i j])))","problem":90,"user":"4f04a06d535dcb61093f6bd9"},{"problem":90,"code":"(fn \n  [m n]\n  (set (for [r m \n             t n]\n         [r t]))\n  )","user":"57f81532e4b0d3187e900914"},{"problem":90,"code":"(fn [set1 set2]\n  (set (reduce concat (map (fn [i1] (map (fn [i2] [i1 i2]) set2)) set1)))\n  )","user":"4fecebe1e4b0681fd128dcac"},{"problem":90,"code":"#(set (for [x %1\n            y %2]\n        (list x y)))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":90,"code":"(fn [x y] (loop [result #{} j x k y]\n  (if (= (count j) 0)\n    result\n    (if (= (count k) 0)\n      (recur result (rest j) y)\n      (recur (conj result [(first j) (first k)]) j (rest k))\n  ))))","user":"55d79b87e4b0e31453f64aa8"},{"problem":90,"code":"(fn cartesian-product [a b] (set (mapcat (fn [x] (map (fn [y] [x y]) b)) a)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"#(into (empty %1) (for [a %1 b %2] [a b]))","problem":90,"user":"534efe66e4b084c2834f4ac1"},{"problem":90,"code":"#(into #{} (for [a %1 b %2] (conj [a] b)))","user":"5e042dede4b0a607a9a45d69"},{"problem":90,"code":"#(into #{} (for [x %1, y %2] (vector x y)))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":90,"code":"(fn [xs ys] \n  (set (for [x xs y ys] [x y])))","user":"5264383be4b03e8d9a4a70cb"},{"problem":90,"code":"(fn cart [a b] \n  (set (\n    reduce\n    (fn [theSet,thisA] \n      (concat \n       theSet\n       (reduce\n       \t\t(fn [innerSet, thisB] (conj innerSet [thisA thisB] ))\n            #{}\n            b\n            )\n       ))\n     #{}\n     a\n\t)\n   )\n )","user":"55d35a01e4b0e31453f64a63"},{"problem":90,"code":"(fn [s s2] (set (mapcat (fn [x] (map (fn [y] [x y]) s2)) s)))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn cartesian\n  ([x y] \n    (cartesian x y #{}))\n  ([x y z]\n    (let [create-vectors (fn [a b c]\n      (if (= 0 (count a))\n        c\n        (recur (rest a) b (conj c (vector b (first a))))))]\n    (if (= 0 (count x))\n      z\n      (recur (rest x) y (apply conj z (create-vectors y (first x) [])))))))","problem":90,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn [l r]\n  (letfn [(combine [item]\n            (map #(vector item %) r))]\n    (loop [coll [] lefts l]\n      (if (empty? lefts)\n        (set coll)\n        (recur (concat coll (combine (first lefts))) (rest lefts))))\n    ))","problem":90,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":90,"code":"#(into #{} (for [x % y %2 :let [z [x y]]] z))","user":"4e36e647535deb9a81d77f36"},{"code":"#(into #{} (mapcat identity (for [a %] (for [b %2] (vector a b)))))","problem":90,"user":"51bf4560e4b013aa0d74b817"},{"problem":90,"code":"(fn\n   [a b]\n   (set (for [x a\n              y b]\n          [x y])))","user":"5db012e3e4b0f8c104ccfc95"},{"problem":90,"code":"(fn s [x y] (set (for [a x b y] [a b])))","user":"55c5e781e4b0e31453f649b8"},{"problem":90,"code":"(fn [set1 set2]\n  (letfn [(auxi [item coll]\n                (map vector (repeat item) coll))]\n    (set (apply concat\n           (map #(auxi % set2) set1)))))","user":"59225498e4b09b4ee5954c8c"},{"problem":90,"code":"(fn [a b] (set (mapcat #(map (fn [x] (vector x %)) a) b)))","user":"58b989dbe4b0888cdc949ccd"},{"problem":90,"code":"#(set (for [x % y %2]\n   [x y]))","user":"519e70d5e4b0acf32bc6a42c"},{"problem":90,"code":"(fn cartesian-product [s1 s2]\n\t(set (for [x s1 y s2] [x y])))","user":"525d44bfe4b0cb4875a45d6d"},{"problem":90,"code":"(fn [a c]\n    (set (for [a a c c] [a c])))","user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn [a b] (set (for [x a y b] [x y]) ))","problem":90,"user":"4e6ebd4a535d5021c1a89610"},{"problem":90,"code":"(fn [s1 s2]\n  (set (for [x1 s1 x2 s2]\n     [x1 x2])))","user":"55f8180fe4b06e875b46ceba"},{"problem":90,"code":"(fn [set1 set2]\n  (set (for [s1 set1\n             s2 set2]\n         (list s1 s2))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [x y] (set(for [x1 x y1 y] (vector x1 y1))))","problem":90,"user":"4ea1ecfa535d7eef308072bb"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (set (for [i1 s1\n             i2 s2]\n         [i1 i2])))","user":"55f85b93e4b03cbcff9738ae"},{"problem":90,"code":"(fn [xs ys]\n   (into #{} (for [x (apply sorted-set xs)\n                   y (apply sorted-set ys)]\n               [x y])))","user":"5591b61ee4b0604b3f94d580"},{"problem":90,"code":"(fn [xs ys] (set (for [x (seq xs) y (seq ys)] [x y])))","user":"540470dae4b0addc1aec6658"},{"problem":90,"code":"(fn cartesian [s1 s2]\n  (into #{} (for [i1 s1 i2 s2] [i1 i2])))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(fn [a b]\n  (into #{}\n    (for [x a y b] [x y])))","problem":90,"user":"4fca2a13e4b0ee37620e184d"},{"code":"#(set (for [a %1\n       b %2]\n   [a b]))","problem":90,"user":"51780bfce4b0f89a8f53839c"},{"problem":90,"code":"(fn [xs ys] (into #{} (mapcat (fn [x] (map #(list x %) ys)) xs)))","user":"5590ebb1e4b0277789237677"},{"problem":90,"code":"(fn [m n]\n  (into #{} (for [k m v n] [k v])))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn [l1 l2] (set (for [x l1, y l2] [x y])))","problem":90,"user":"4f2f6678e4b0d6649770a06e"},{"problem":90,"code":"(fn cart\n  [x y]\n  (into #{}\n        (for [i x\n              j y]\n          [i j])))","user":"56019662e4b04bb52996e190"},{"problem":90,"code":"#(set (for [n %1 p %2] [n p]))","user":"56540485e4b0f9d632dd847a"},{"problem":90,"code":"(fn prob90 [l1 l2]\n  (loop [acc #{}\n         rows l1\n         cols l2\n         ]\n    (if (empty? rows)\n      acc\n      (let [r (first rows)]\n        (recur (into acc (map (fn [v] [r v]) cols)) (rest rows) cols)\n        ))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":90,"code":"#(set (mapcat (fn [x] (map (fn [y] (list x y)) %2)) %1))","user":"544e8369e4b0e39780006987"},{"code":"(fn crossprod  [set1 set2]\n    (set (apply concat (for [x set1] (reduce #(conj %1 [x %2]) #{} set2)))))","problem":90,"user":"50057f23e4b0678c553fc466"},{"code":"#(set (for [l % r %2] [l r]))","problem":90,"user":"50436470e4b034ff00315d23"},{"problem":90,"code":"(fn f\n  [a b]\n  (into #{} (mapcat #(map (fn [x]\n                            [% x]) b) a)))","user":"59e778aae4b0249b72820716"},{"code":"#(set (for [a %2\n            b %1]\n        [b a]))","problem":90,"user":"4fad33e8e4b081705acca236"},{"code":"(fn carp [a b]\n\n  (set (mapcat #(map (fn [i] [% i] )  b) a))\n\n  )","problem":90,"user":"4e78c208535db95036265722"},{"problem":90,"code":"(fn cartesian\n  [coll1 coll2]\n  (if (seq coll1)\n    (clojure.set/union (set (partition 2 (interleave (repeat (first coll1)) coll2)))\n              (cartesian (rest coll1) coll2))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":90,"code":"(fn [a b]\n  (set (for [x a y b]\n         [x y])))\n\t\t \n;; for can do cartesian product","user":"5950f0bfe4b066ee0a44ae9f"},{"code":"#(set (for [x %\n                   y %2] [x y]))","problem":90,"user":"52d838bee4b09f7907dd138b"},{"problem":90,"code":"(fn [thing1 thing2]\n        (set (for [a thing1\n              b thing2]\n               [a b])))","user":"54e79094e4b024c67c0cf818"},{"problem":90,"code":"(fn [s t] (set (mapcat (fn [x] (map #(vector x %) t)) s)))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":90,"code":"(fn c-prod\n  [coll-1 coll-2]\n  (into (hash-set)\n        (for [x coll-1 y coll-2]\n          [x y])))","user":"5a9829e5e4b0d174b936c788"},{"code":"(fn [x y]\n  (set (reduce into []\n               (for [a x]\n                 (map #(vector a %) y)))))","problem":90,"user":"51823a97e4b0f2adb733651e"},{"problem":90,"code":"(fn cartez [y x]\n  (set (mapcat (fn [a]\n                 (map #(vec [% a]) y)) x)))","user":"58524875e4b0b7285a6f4ead"},{"problem":90,"code":"(fn [xs ys]\n  (loop [xs xs, s #{}]\n    (if (empty? xs)\n      s\n      (let [x (first xs)\n            xys (reduce (fn [m e] (conj m [x e])) #{} ys)]\n        (recur (rest xs) (clojure.set/union s xys))))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"#(set (for [f %1 s %2] [f s]))","problem":90,"user":"4dbe19fe535d020aff1edf59"},{"problem":90,"code":"(fn\n   [coll1 coll2]\n   (set (mapcat (fn [x] (map #(vector x %) coll2)) coll1)))","user":"5c45e703e4b0e06e1360a391"},{"problem":90,"code":"(fn cartesian-product [first-args second-args]\n  (let [result (atom #{})]\n    (doseq [first-element first-args second-element second-args]\n      (swap! result conj [first-element second-element]))\n    @result))","user":"602f8400e4b0d5df2af22299"},{"problem":90,"code":"(fn [s1 s2]\n\t\"Write a function which calculates the Cartesian product of two sets.\"\n\t(into #{} (for [x s1\n\t\t\t\t\t\t\t\t\ty s2]\n\t\t\t\t\t\t\t[x y])))","user":"593c1e3be4b069cdc2982b86"},{"problem":90,"code":"(fn [x y] (into #{} (apply concat (map (fn [z] (map #(vector z %) y)) x))))","user":"511036c5e4b04c71fce993ee"},{"problem":90,"code":"(fn [s1 s2]\n  (apply hash-set (for [x s1 y s2 :let [xy (vector x y)]]\n    xy)))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":90,"code":"(fn [a b]\n    (set (apply concat (map (fn [a] (map #(list a %1) b))\n         a))))","user":"55627de1e4b0c656e3ff17d9"},{"code":"(fn [s1 s2]\n  (loop [output []\n         rs1 s1\n         rs2 s2]\n    (if (empty? rs1) (set output)\n      (if (empty? rs2) \n        (recur output (rest rs1) s2)        \n        (recur (concat output [[(first rs1) (first rs2)]]) rs1 (rest rs2))\n))))","problem":90,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn [c c2]\n    (set\n     (apply concat\n            (map #(map vector (repeat %) c2) c))))","problem":90,"user":"4e7e8684535db169f9c79717"},{"problem":90,"code":"(fn [xs ys] (apply (comp set concat) (clojure.walk/walk (fn [x] (map #(vector x %) ys)) identity xs)))","user":"5830377ee4b051871117c004"},{"code":"(fn [a b]\n  (set (mapcat #(map (fn [i] [% i]) b) a)))","problem":90,"user":"4fbcbd50e4b081705acca2f9"},{"code":"(fn myprod [lt1 lt2]\r\n    (letfn [(myprodr [lt acc]\r\n  \t     (if (empty? lt)\r\n\t\t       acc\r\n\t\t       (myprodr\r\n\t\t\t (rest lt)\r\n\t\t\t (concat acc (map #(list (first lt) %) lt2)))))]\r\n\t   (set (myprodr lt1 '()))))","problem":90,"user":"4e1b2cd9535d04ed9115e7fd"}]