[{"problem":29,"code":"(fn Get-the-Caps\n  [lst]\n  (loop [lst1 lst\n         may ()]\n    (cond\n      (empty? lst1) (apply str (reverse may))\n      (Character/isUpperCase (first lst1)) (recur (rest lst1) (cons (first lst1) may))\n      :else (recur (rest lst1) may))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":29,"code":"#(apply str(filter (fn [x] (Character/isUpperCase x))%))","user":"60845eb8e4b0736b099e42ef"},{"code":"#( clojure.string/replace % #\"[^A-Z]\" \"\" )","problem":29,"user":"52cbe910e4b07d0d72b27353"},{"code":"(fn [string] ( let [cap? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n                          ( loop [sqnc (seq string) result [] ]\n                            (if (empty? sqnc)\n                              (reduce str \"\" result)\n                              (recur (rest sqnc)\n                                (if (cap? (first sqnc)) (conj result (first sqnc)) result))))))","problem":29,"user":"4f2aff4de4b0d6649770a044"},{"problem":29,"code":"(fn [x] (->> x seq (filter #(Character/isUpperCase %)) (apply str)))","user":"55da18d5e4b0e31453f64ad1"},{"problem":29,"code":"(fn [s]\n\t(reduce (fn [m c] (if (re-matches #\"[A-Z]\" (str c)) (str m c) (str m))) \"\" s))","user":"5681fe64e4b0945ebc182a88"},{"code":"(fn [in] (clojure.string/join (re-seq #\"[A-Z]+\" in)))","problem":29,"user":"50608d4ce4b07251188e4455"},{"code":"(fn [x]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))","problem":29,"user":"515ebde3e4b01e5d11ccd0a8"},{"code":"(fn[s]\n  (apply str(filter #(. java.lang.Character isUpperCase %) s))\n)","problem":29,"user":"504e1ddae4b0f6ff3350c466"},{"problem":29,"code":"(fn only-caps [s]  (reduce str (filter #(Character/isUpperCase %1) s)))","user":"592518e8e4b072a2710fce67"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)\n       )\n  )","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":29,"code":"(fn[value]\n  (apply str (filter #(Character/isUpperCase %) value)))","user":"600d9808e4b074f607df669c"},{"code":"(fn [input] (apply str (map #(if (not= %1 %2) %1 \"\") input (clojure.string/lower-case input))))","problem":29,"user":"534d5ab7e4b084c2834f4a9c"},{"problem":29,"code":"(fn [what] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) what)))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":29,"code":"(fn[sss](apply str (filter #(Character/isUpperCase %) sss)))","user":"55f01316e4b06e875b46ce1a"},{"problem":29,"code":"(fn [str] (clojure.string/replace str #\"[^A-Z]\" \"\"))","user":"56508fe0e4b0284900eef6c1"},{"problem":29,"code":"(fn[s](->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","user":"5804d5afe4b0a837a8b30cad"},{"problem":29,"code":"(fn [x](apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x)))))","user":"5e996e76e4b0157ca96647e4"},{"code":"(fn [input]\n  (apply str (re-seq #\"[A-Z]+\" input)))","problem":29,"user":"53334cb2e4b019098a6f8b81"},{"code":"(fn filter-upper\n  [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"5073e7fde4b054001656accb"},{"problem":29,"code":"(fn [xxx](apply str (filter #(re-matches #\"[A-Z]+\" (str %)) xxx)))","user":"5e29cb4ce4b05b4b015161ae"},{"problem":29,"code":"(fn [string]\n  (->> string\n       (keep #(re-find #\"[A-Z]\" (str %)))\n       (apply str)))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn foo [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f2f6678e4b0d6649770a06e"},{"problem":29,"code":"(fn [s] \n    (apply str \n      (filter #(Character/isUpperCase %) s)))","user":"55dedb0de4b050e68259b3e8"},{"problem":29,"code":"(fn[s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"5472cba1e4b094393f72dd7a"},{"problem":29,"code":"(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (re-matches #\"[A-Z]\" (str c)))\n    s)))","user":"559141b1e4b0604b3f94d576"},{"code":"(fn [x] (->> x (filter #(Character/isUpperCase %)) clojure.string/join))","problem":29,"user":"53779a26e4b06839e8705e38"},{"problem":29,"code":"(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str\n      (filter #(contains? caps %) s))))","user":"5e98e8a9e4b0157ca96647dc"},{"problem":29,"code":"(fn get-caps\n  [s]\n  (clojure.string/join (filter #(Character/isUpperCase %1) s)))","user":"6062e1bde4b03746e80ebf75"},{"problem":29,"code":"(fn [word] (reduce str \"\" (re-seq #\"[A-Z]\" word)))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn [s]\n  \"29. Write a function which takes a string and returns a new string containing only the capital letters.\"\n  (let [cap (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (fn [c] (contains? cap c)) s))))","problem":29,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn[x] (reduce str (re-seq #\"[A-Z]*\" x)))","problem":29,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [s] (apply str (filter #(re-seq #\"[A-Z]\" (str %)) s)))","problem":29,"user":"534e9ed4e4b084c2834f4ab8"},{"problem":29,"code":"(fn\n  [str]\n  (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" %) (clojure.string/split str #\"\"))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"code":"(fn [x] (apply str (filter (fn [y] (and (not (pos? (compare \\A y))) (not (neg? (compare \\Z y))))) x)))","problem":29,"user":"4fc9cba3e4b0ee37620e1849"},{"problem":29,"code":"(fn capitalonly\n  [lettres]\n  (loop [restant lettres, capitals \"\"]\n    (if (empty? restant)\n      capitals\n        (if (not (nil? (re-matches #\"^[A-Z].*\" restant)))\n          (do (println (first restant)) (recur (subs restant 1) (str capitals (first restant))))\n          (recur (subs restant 1) capitals)\n         )\n      )\n    )\n  )","user":"54410a71e4b032a45b869367"},{"problem":29,"code":"(fn [z] (apply str (filter #(and (= (clojure.string/upper-case (str %)) (str %)) (Character/isLetter %)) z)))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":29,"code":"(fn [string-coll]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90))\n                     (seq string-coll))))","user":"53d40508e4b00fb29b221332"},{"code":"#(apply str (filter (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")  %))","problem":29,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn [x] (apply str (re-seq #\"[A-Z]+\" x )))","problem":29,"user":"502aac6ae4b0614b52996118"},{"code":"(fn f [x]\n\t(apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"50eafeaae4b0346a3e988cbb"},{"problem":29,"code":"(fn upper-only [input] (apply str (re-seq #\"[A-Z]\" input)))","user":"56f45469e4b046a417f9205c"},{"problem":29,"code":"(fn get-capitals\n  [strin]\n  (->>\n    (seq strin)\n    (map (fn [x] (if (contains? (set (map char (range 65 91))) x) x)))\n    (remove nil?)\n    (clojure.string/join \"\")))","user":"59e8fef3e4b0249b72820743"},{"problem":29,"code":"(fn [input]\n  (apply str (re-seq #\"[A-Z]\" input)))","user":"54246fcce4b01498b1a71aed"},{"problem":29,"code":"(fn [str1]\n               (apply str (filter #(Character/isUpperCase %) str1)))","user":"5d4df658e4b0776584bd6f41"},{"code":"(fn [strToCheck] (reduce str (filter #((complement nil?) (re-matches #\"[A-Z]\" (str %))) strToCheck)))","problem":29,"user":"5227eacee4b0186687e23a5e"},{"problem":29,"code":"(fn [xs]\n\t(clojure.string/join (filter #(Character/isUpperCase %) (char-array xs)) ))","user":"5da7176ae4b000c986472c13"},{"code":"(fn [str] (clojure.string/join (re-seq #\"[A-Z]\" str)))","problem":29,"user":"4f70183ee4b07046d9f4eff3"},{"problem":29,"code":"(comp (partial apply str) reverse\n       (partial\n         reduce\n         #(if (<= (int \\A) (int %2) (int \\Z))\n            (cons %2 %1)\n            %1) \"\"))","user":"56ef077ae4b04a395b9a0459"},{"problem":29,"code":"(fn get-capitals [word]\n  (reduce str (re-seq #\"[A-Z]\" word)))","user":"55b69e37e4b01b9910ae2999"},{"code":"(fn cpp [s]\n                  (apply\n                   str\n                   ((fn cpp-seq\n                     [[x & xs :as l]]\n                     (if-not (nil? x)\n                       (if (<= (int \\A) (int x) (int \\Z))\n                         (cons x (cpp-seq xs))\n                         (cpp-seq xs)))) (seq s))))","problem":29,"user":"4e71705e535d5021c1a89649"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)","problem":29,"user":"50ae22c3e4b0a40c9cfb08d0"},{"code":"#(apply str (filter (fn [x] (Character/isUpperCase x)) % ))","problem":29,"user":"524dd1c3e4b0f245900d275c"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (map char (get (group-by (fn [x] (and (<= x 91) (>= x 65))) (map int x)) true))))","user":"5785de78e4b0ebec4cfb74e8"},{"code":"(fn [w] (reduce str (re-seq #\"[A-Z]+\" w)))","problem":29,"user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn [my-string]\n    (apply str (filter #(Character/isUpperCase %) my-string)))","problem":29,"user":"4eb6f065535d7eef30807372"},{"code":"#(clojure.string/replace (clojure.string/replace (clojure.string/replace % #\"[a-z]\" \"\") #\"\\W\" \"\") #\"\\d\" \"\" )","problem":29,"user":"4f542fd9e4b0a7574ea717db"},{"problem":29,"code":"(fn caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"5508a292e4b06e50f9beb10f"},{"problem":29,"code":"(fn filterUpper\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"57ce6090e4b0c746388ab8ab"},{"code":"(fn [w]\n  (apply str (seq (map char (filter #(<= 65 % (dec (+ 65 26))) (map #(.hashCode %) (seq w))))))\n   )","problem":29,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [x] (reduce str (filter #(Character/isUpperCase %)x)))","problem":29,"user":"52737333e4b03e8d9a4a747f"},{"code":"(fn get-caps [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51f549c4e4b0abb92f97f9cb"},{"code":"(fn [string] \n  (apply str (filter (fn [c] (Character/isUpperCase c)) string)))","problem":29,"user":"4f26c3b5e4b0d6649770a005"},{"code":"(fn caps [xs] (apply str (re-seq #\"[A-Z]+\" xs)))","problem":29,"user":"50ef5703e4b0bdaecbb47d95"},{"problem":29,"code":"(fn [xs] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) xs)))","user":"5cdc17d0e4b05ee0cb31173c"},{"code":"(fn [mystr] (apply str (filter \n  #(and \n    (= (clojure.string/upper-case %1) (str %1)) \n    (not (clojure.string/blank? (str %1))))\n  (clojure.string/replace mystr #\"([^a-zA-Z])\" \"\"))\n))","problem":29,"user":"506afdafe4b0a2a5463de37e"},{"problem":29,"code":"(fn my-fun [inp-seq] (apply str (filter #(Character/isUpperCase %1) inp-seq)))","user":"571d9669e4b0145328a7627f"},{"problem":29,"code":"#(apply str (reduce\n     (fn[x y]\n     (if\n      (Character/isUpperCase   y)\n  \n     (conj x (str y))\n      (conj x (str \"\"))\n      )\n     )\n     []\n     %\n     )\n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":29,"code":"(fn \n  [coll]\n  (apply str (filter (fn filt-func\n  [x]\n      (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))\n  ) coll)))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [x] (apply str \r\n  (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4df0524e535d08e6dec9fe17"},{"problem":29,"code":"(fn [s]\n  (apply str\n  (filter (fn [c] (Character/isUpperCase c)) s))\n)","user":"57c3c7e6e4b05aa3c4741cc4"},{"problem":29,"code":"(fn [strng] (apply str (filter #(Character/isUpperCase %) strng)))","user":"53dfbc75e4b0d874e779ae44"},{"code":"(fn[x]\n(apply str (map char (filter #(and (<= % 90) (>= % 65))(map int  x)))))","problem":29,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [s] (apply str (filter (fn [c]\n                  (let [code (int c)]\n                    (and (>= code (int \\A)) (<= code (int \\Z)))))\n                s)))","problem":29,"user":"4fb4f42ae4b081705acca2b4"},{"code":"(fn [coll] (apply str (filter #(and (>= (int %) (int \\A))\n                                         (<= (int %) (int \\Z))) coll)))","problem":29,"user":"4db6d993535d1e037afb2180"},{"problem":29,"code":"(fn [x] \n\t(apply str (re-seq #\"[A-Z]\" x)))","user":"548f3ee4e4b0e286459a1237"},{"problem":29,"code":"(fn\n  [data]\n  (apply str \n   \t\t(filter \n    \t\t#(re-matches #\"[A-Z]\" (str %))\n    \t\tdata)))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn[x](apply str(filter #(<= 65(int%)90)x)\r\n))","problem":29,"user":"4dd66da7535d2dad7130b5c8"},{"problem":29,"code":"(fn [text] (apply str (filter  #(Character/isUpperCase %) text)))","user":"5d94753de4b0d3f9b434ad24"},{"code":"(fn [x](apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"4f0f03ce535d0136e6c2232a"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (set (map char (range 65 91))) %))","user":"58cd4949e4b03c36ff7e5886"},{"code":"(fn caps \n  [s] \n  (reduce str (filter #(cond\n                         (< (int %) 65) false\n                         (> (int %) 90) false\n                         :else true\n                         ) s))\n  )","problem":29,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn filter-non-caps\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))","problem":29,"user":"521b339fe4b0c4ef0be83031"},{"code":"(fn getCaps [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f96a5e8e4b0dcca54ed6cdf"},{"problem":29,"code":"#(apply str ( for [x %] (if(Character/isUpperCase x) x)))","user":"5cbd5b42e4b026601754b9f6"},{"problem":29,"code":"(fn\n  [string]\n  (reduce (fn [acc curr]\n            (if (Character/isUpperCase curr)\n              (str acc curr)\n              acc)) \"\" string))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":29,"code":"(fn [name]\n(apply str (filter #(Character/isUpperCase %)name)))","user":"59636b43e4b066ee0a44b0c4"},{"problem":29,"code":"#(.replaceAll (re-matcher #\"[^A-Z]\" %) \"\")","user":"58ba8e7ce4b0888cdc949ce8"},{"problem":29,"code":"(fn\n  [string]\n  \n  (->> string\n      (re-seq #\"[A-Z]+\")\n      (apply str)\n  )\n)","user":"5c493046e4b0e06e1360a3cb"},{"code":"(fn[x](apply str (filter #(and (< (int  %) 91) (> (int %) 64)) x)))","problem":29,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [x](.replaceAll x \"[^A-Z]\" \"\"))","problem":29,"user":"5125029de4b0ce9225d2ed3e"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" %)  (clojure.string/split s #\"\"))))","user":"5033ed65e4b062bc5d7ae15a"},{"problem":29,"code":"#(->> (re-seq #\"[A-Z]+\" %)\n\n       (apply str))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn caps [instr]\n  (clojure.string/join (filter \n    #(and (<= (int %)(int \\Z))\n        (>= (int %) (int \\A))) instr)))","problem":29,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) (char-array x))))","problem":29,"user":"51ecb0fee4b0bb5070431583"},{"problem":29,"code":"; stolen (fn [text] (apply str (filter #(Character/isUpperCase %) text)))\n#(apply str (re-seq #\"[A-Z]+\" %))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"#(clojure.string/join \"\" (re-seq  #\"[A-Z]\" %1))","problem":29,"user":"52c42bc2e4b0c2d177d620d0"},{"code":"(fn [x]\n  (let [valid (seq \"ABCDEFGHIJKLMNOPQRSTUVWYXZ\")]\n    (reduce str (filter #(some #{%} valid) x))))","problem":29,"user":"4f0e0aee535d0136e6c22320"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A))\r\n                                 (<= (int %) (int \\Z))) s)  ))","problem":29,"user":"4e14108c535d04ed9115e7dd"},{"code":"(comp (partial apply str)\n      (partial filter #(<= (int \\A)(int %)(int \\Z))))","problem":29,"user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn myMax [mystr]\n (clojure.string/join \"\"\n   (re-seq #\"[A-Z]\" mystr)\n  ))","problem":29,"user":"51427a8be4b0b50abeb46b37"},{"code":"(fn [cs]\n  (apply str (filter #(Character/isUpperCase %) cs)))","problem":29,"user":"50bd6033e4b0594b91591c66"},{"code":"#(let [f (set (map char (range (int \\A) (inc (int \\Z)))))]\n   (->> % (filter f) (reduce str)))","problem":29,"user":"4e6dd51b535d5021c1a895f6"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (apply <= (map int [\\A c \\Z]))) s)))","user":"60ddc7cbe4b0abd5a8cdd531"},{"code":"#(apply str (filter #{\\H \\L \\O \\W \\R \\D \\A \\Z} %))","problem":29,"user":"4fab31a8e4b081705acca215"},{"code":"(fn [string]\n  (reduce str (re-seq #\"[A-Z]\" string)))","problem":29,"user":"4e7d1c22535db169f9c796c5"},{"problem":29,"code":"(fn find-upper [myString]\n  (apply str (filter #(Character/isUpperCase %) myString))\n)","user":"5545f713e4b0a04f7929953a"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase (char %)) (seq x))))","problem":29,"user":"4e7e55ab535db169f9c79711"},{"problem":29,"code":"#(apply str (re-seq #\"\\p{javaUpperCase}\" %))","user":"566dd178e4b0a866af6896d1"},{"problem":29,"code":"(fn[x](clojure.string/replace x #\"[a-z1-9$#(*&!, ]\"  \"\"))","user":"5e1ec8c0e4b0dc9594008561"},{"problem":29,"code":"(fn [s] (apply str (->> s (filter #(re-matches #\"[A-Z]\" (str %))))))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":29,"code":"(fn [inputStr] (clojure.string/replace inputStr #\"[^A-Z]\" \"\"))","user":"51fea7d7e4b0f1313d468a74"},{"problem":29,"code":"(fn GetTheCaps [string] \n  (reduce str (re-seq #\"[A-Z]\" string)))","user":"607508f3e4b069485764de54"},{"problem":29,"code":"(fn [x] (clojure.string/join \n           (filter #(and \n                     (=\n                       (clojure.string/upper-case %)\n                       (.toString %))\n                     (not (=\n                                   (clojure.string/lower-case %)\n                                   (.toString %\n                                              )))) x)))","user":"56171eade4b06b1bb2182a0c"},{"code":"(fn [s] (apply str (filter\n  #(java.lang.Character/isUpperCase (char %)) s)))","problem":29,"user":"4e96557d535dbda64a6f6b43"},{"problem":29,"code":"(fn [s]\n   (clojure.string/join\n     (filter\n       #(Character/isUpperCase %)\n       s)))","user":"54dc84ede4b024c67c0cf784"},{"problem":29,"code":"(fn [string] (reduce str (filter #(Character/isUpperCase %) string)))","user":"56fbcc1fe4b07572ad1a88d5"},{"problem":29,"code":"reduce #(if (Character/isUpperCase %2)\n           (str %1 %2)\n           %1) \"\"","user":"568a743ee4b0dcc4269f408e"},{"code":"(fn [x] \n\t(clojure.string/join \"\" \n\t\t(filter \n\t\t\t#(not= \n\t\t\t\t(first (clojure.string/lower-case %))\n\t\t\t %) \n\t\tx)\n\t)\n)","problem":29,"user":"520797ebe4b03bd50ef5466d"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) (seq s))))","user":"553a43cae4b09218d5f44ff2"},{"problem":29,"code":"(fn[s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"code":"(comp (partial apply str) #(for [y (seq %) x (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") :when (= y x)] y))","problem":29,"user":"52865f41e4b0239c8a67ae15"},{"code":"(fn [st] ( apply str (filter #( Character/isUpperCase %) st)))","problem":29,"user":"4f030775535dcb61093f6a43"},{"code":"(fn [s] (apply str (filter #(not (= % (first (clojure.string/lower-case %)))) (seq s))))","problem":29,"user":"50976c84e4b00ad8bab4e961"},{"problem":29,"code":"(fn foo [s]\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))","user":"507eed82e4b06ce648bcdbfe"},{"problem":29,"code":"(fn [x]\n  (apply str\n  (filter\n   (fn [ji] (false? (= (str ji) (.toLowerCase (str ji)) )) )\n   (vec x)\n   )\n   )\n  )","user":"57e404a3e4b0bfb2137f5ab1"},{"problem":29,"code":";; Filter solution\n;;#(filter Character/isUpperCase %)\n\n;; Regex solution\n#(apply str (re-seq #\"[A-Z]+\" %))","user":"525636dfe4b0541d1855ba0d"},{"code":"(fn [text]\n  (apply str (filter #(. Character isUpperCase %) text)))","problem":29,"user":"4e342671535deb9a81d77f29"},{"code":"(fn [n] \r\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int n)))))","problem":29,"user":"4ddb339c535d02782fcbe9f9"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\" ))","user":"5f082d9ee4b0cf489e8d7f5c"},{"problem":29,"code":"(fn my-cap [lst]\n  (apply str(filter #(Character/isUpperCase %) lst)))","user":"59dd387be4b0a0ac046f2502"},{"code":"(fn [x] (apply str (filter (fn [y] (contains? (set(range 65 91)) (int y))) (seq x))))","problem":29,"user":"50cc30c5e4b0f78a8e1645bf"},{"code":"#(apply str \n  (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"50458888e4b01f6c9a8b236d"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %)\ns)))","problem":29,"user":"4e99108d535dbda64a6f6b62"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(<= 65 % 90) (map int (seq s))))))","user":"53bfd8c4e4b0c98a41f5cca8"},{"code":"(fn [s] (apply str (filter #(. Character isUpperCase  %) s)))","problem":29,"user":"4ed3c783535d44c135fd68f6"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s) )\n    )","user":"55e9842ae4b0121d4835fda1"},{"problem":29,"code":"(fn [string]\n  (apply str (filter (fn [char] (Character/isUpperCase char)) string)))","user":"57614a42e4b0994c1922fb85"},{"code":"(fn [sq]\n  (->>\n   (filter #(Character/isUpperCase %) sq)\n   (apply str)))","problem":29,"user":"53572767e4b04ce2eb3ed277"},{"code":"(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e7e3cc4535db169f9c7970a"},{"problem":29,"code":"(comp clojure.string/join #(re-seq #\"[A-Z]\" %))","user":"5ecfd429e4b016b56eae05a9"},{"problem":29,"code":"#(apply str (loop [col (vec %) rt []]\n              (println \"col:\" col)\n              (if(empty? col)\n                rt\n                (let [new-col (rest col) item (first col)] \n                  (println \"item:\" item)\n                  (recur new-col (if(not= (str item) (clojure.string/lower-case item)) (conj rt item) rt))\n                  )\n                )\n              ))","user":"5d270111e4b092dab7f59c62"},{"problem":29,"code":"(fn [x] (->> x seq (filter #(and (> (int %) 64) (< (int %) 91))) (apply str)))","user":"5112500ee4b0350614f07a72"},{"code":"(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4ef667c4535dced4c769f24c"},{"code":"(fn caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"5325cf91e4b09d4e7a9b54e8"},{"code":"(fn [s]\n  (apply str\n         (filter #(<= (int \\A) (int %) (int \\Z)) s)))","problem":29,"user":"52fb903ee4b047fd5583700b"},{"code":"#(clojure.string/join \"\" ((fn [s] (filter (fn [c] (not= c (clojure.string/lower-case c))) (clojure.string/split s #\"\"))) % ))","problem":29,"user":"4e65f9d4535d8ccf87e9fe73"},{"problem":29,"code":"(fn [x] (->>\n             (char-array x)\n             (seq)\n             (map int)\n             (filter #(and (if (>= % 65) true false) (if (<= % 90) true false)))\n             (map char)\n             (apply str)))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(not (= (str %) (clojure.string/lower-case %)))) seq)","user":"58cfb517e4b03c36ff7e58b9"},{"code":"(fn filup [s]\n  (letfn [(isupper [c]\n            (and\n              (>= (compare c \\A) 0)\n              (<= (compare c \\Z) 0)))]\n    (apply str (filter isupper s))))","problem":29,"user":"504e24e2e4b0f6ff3350c46d"},{"code":"#(apply str\n        (filter\n         (fn is-upper? [c]\n           ((set (range (int \\A) (+ 1 (int \\Z))))\n            (int c))) %))","problem":29,"user":"517bf28de4b07ef0e56148d5"},{"code":"(fn [str_val](apply str (re-seq #\"[A-Z]\" str_val)))","problem":29,"user":"4e707714535d5021c1a89638"},{"code":"(fn [word] (apply str (re-seq #\"[A-Z]+\" word)))","problem":29,"user":"5106dc1be4b01150e115ebf0"},{"problem":29,"code":"(fn caps-only [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))","user":"602abb59e4b0d5df2af2225e"},{"code":"(fn [n]\n  (apply str (filter #(. java.lang.Character isUpperCase %) n)))","problem":29,"user":"4ee82223535d93acb0a66877"},{"problem":29,"code":"#(apply str (filter (fn [cn]\n                      (< 64 (int cn) 91))\n                    %))","user":"60b1add0e4b0e0fa5f1b4227"},{"code":"(fn [s] \n   (apply str (filter #(contains? (set (map char (range 65 91))) %)\n           (seq s) )))","problem":29,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":29,"code":"(fn [x] \n  (reduce (fn [x y]\n            (if (Character/isUpperCase y)\n              (str x y)\n              x))\n          \"\"\n          x))","user":"59e4fc25e4b08badc2a0c54f"},{"code":"(fn [Str]\n  (clojure.string/replace Str #\"[0-9abcdefghijklmnopqrstuvwxyz, !.?@#$%^&*()+=]+\" \"\"))","problem":29,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":29,"code":"#(apply str (filter (fn [character] (<= 65 (int character) 91)) %))","user":"559ce276e4b0ec2b359424d7"},{"code":"(fn upper-filter [r]\r\n  (apply str \r\n   (filter \r\n\t  #(let [x % \r\n\t\t s (str x) \r\n\t\t ma (re-matches #\"[a-zA-Z]\" s)] \r\n\t     (and (not (empty? ma)) \r\n\t\t  (= s (clojure.string/upper-case s)))) \r\n\tr)))","problem":29,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":29,"code":"(fn capOnly [x] (apply str (re-seq #\"[A-Z]+\" x)))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [s] (clojure.string/join (filter \n  #(and (> (int %) 64) (< (int %) 91)) s)))","problem":29,"user":"5011e738e4b0cd3f2a5854e6"},{"problem":29,"code":"#(clojure.string/join \"\" \n                      (re-seq #\"[A-Z]+\" %))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ef9b021535dced4c769f269"},{"code":"#(apply str (filter (partial re-matches #\"[A-Z]\") (map str (seq %))))","problem":29,"user":"5130cb2ae4b08c712d3fae3b"},{"problem":29,"code":"(fn [w] (clojure.string/join \"\" (re-seq #\"[A-Z]\" w)))","user":"55b66ebce4b01b9910ae2996"},{"code":"#(.replaceAll % \"[^A-Z]+\" \"\")","problem":29,"user":"4e904d9c535d65386fec2152"},{"problem":29,"code":"(fn capitalonly [x] (apply str (filter #( and (>= (int %) (int \\A)) (<= (int %) (int \\Z)) ) x)))","user":"56304db8e4b073c1cf7a9be5"},{"code":"(fn [x]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))","problem":29,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [x] (apply str (re-seq #\"[A-Z]\"  x)))","problem":29,"user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":29,"code":"(fn [my-string] (apply str (filter #(Character/isUpperCase %) my-string)))","user":"56040e58e4b0c80df0ca2654"},{"code":"(fn [x] (reduce #(str %1 (if (and (>= (int %2) 65) (<= (int %2) 90)) %2 nil)) \"\" x))","problem":29,"user":"50df6dd0e4b061dbdced7225"},{"code":"(fn getCaps [string] (apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) (seq string))))","problem":29,"user":"50b51c06e4b0c464d223d1c1"},{"problem":29,"code":"(fn [input] (reduce str (re-seq (re-pattern \"[A-Z]+\") input)))","user":"5830377ee4b051871117c004"},{"problem":29,"code":"(fn somefunc [n] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) n)))","user":"56278266e4b00e49c7cb47d3"},{"code":"(fn [s] \n  (reduce str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4f043bbd535dcb61093f6bb2"},{"problem":29,"code":"(fn [string] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) string)))","user":"556358c6e4b0c656e3ff17ea"},{"problem":29,"code":"(fn [letters] (apply str (filter (fn [x] (Character/isUpperCase x)) letters)))","user":"56ffeafee4b08d47c97781c2"},{"problem":29,"code":"(fn [coll]\n  (apply str ((partial filter #(Character/isUpperCase %)) coll)))","user":"54e1197fe4b024c67c0cf7c0"},{"problem":29,"code":"(fn [s] \n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","user":"593870e6e4b02506e01a29d6"},{"problem":29,"code":"(fn [string]\n  (reduce str (filter #(re-find #\"[A-Z]\" %) (map str (seq string)))))","user":"56822f37e4b0945ebc182a8d"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(<= 65 (int %) 90) x)))","user":"5d9e1006e4b0eb781811cdbd"},{"problem":29,"code":"(fn \n  [strIn] \n  (reduce \n   (fn [strOut charIn] (if (re-find #\"[A-Z]\" charIn) (str strOut charIn) (str strOut))) \n   (clojure.string/split strIn #\"\")))","user":"5e1b0140e4b0dc959400851c"},{"code":"(fn [x]\n  (apply str\n      (filter\n          (fn [x]\n            (Character/isUpperCase x))\n  x)))","problem":29,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":29,"code":"(fn [x]\n  (apply str (vec (filter #(Character/isUpperCase %) x))))","user":"54af3d22e4b09f271ff37d04"},{"code":"(fn getOnlyUpperCase [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))","problem":29,"user":"525d44bfe4b0cb4875a45d6d"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))","user":"5488537be4b0e286459a11cf"},{"problem":29,"code":"(fn [l] (clojure.string/join \"\" (filter \n #(let [i (int %)]\n    (and \n     (>= i (int \\A))\n     (<= i (int \\Z)))) l)))","user":"56051095e4b08b23635d3162"},{"problem":29,"code":"(fn [arg]\n   (let [val (filter #(Character/isUpperCase %) (map #(Character. %) arg))]\n     (reduce str val)))","user":"54eff2bee4b024c67c0cf88d"},{"problem":29,"code":"(fn [st] (apply str (filter (fn [ch] (some #(= ch %) [\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z])) (char-array st))))","user":"52b89d55e4b07a9af57922b3"},{"problem":29,"code":"#( ->>\n  (re-seq #\"[A-Z]+\" % )\n  (apply str)\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":29,"code":"(fn [s]\n  (apply str (mapcat #(if (<= 65 (int %) 90)\n                        [%]) s)))","user":"591e0782e4b09b4ee5954c25"},{"problem":29,"code":"(fn xxx [strs] \n\t(clojure.string/join \n\t\t(filter \n\t\t\t#(contains? (set (map char (range 65 91))) %)\n\t\t\t(cons \"\" strs)))\n)","user":"5ac04101e4b073f177442737"},{"problem":29,"code":"(fn st [ls] (clojure.string/join (filter #(Character/isUpperCase %) ls ) ) )","user":"600b385ce4b074f607df668d"},{"problem":29,"code":"#(reduce str (re-seq (re-pattern \"\\\\p{Upper}+\") %))","user":"57a99d3fe4b0a96607956231"},{"code":"(fn [s]\n  (clojure.string/join \"\" (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) s)))","problem":29,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":29,"code":"#(reduce str \"\" (re-seq #\"[A-Z]+\" %))","user":"59ea07c9e4b0249b72820756"},{"problem":29,"code":"(fn [string] (apply str (for [x string]\n(if \n\t(and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) x)\n)))","user":"564a985be4b0284900eef65c"},{"problem":29,"code":"(comp #(apply str %) (partial filter #(Character/isUpperCase %)) vec)","user":"56b3146ae4b0982f16b37e0f"},{"code":"(fn [s] \n  (clojure.string/join \n    (filter (fn [c] (not= c (.toLowerCase c)))\n    (clojure.string/split s #\"\"))))","problem":29,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":29,"code":"(fn [s] (apply str  (re-seq #\"[A-Z]+\" s)))","user":"556282d0e4b0c656e3ff17da"},{"code":"#(apply str (filter (fn [char] (Character/isUpperCase char)) %))","problem":29,"user":"4fcd5958e4b065de69964ca7"},{"problem":29,"code":";; #29\n(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [sentence]\n  (apply str (filter #(Character/isUpperCase %) (seq sentence))))","problem":29,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn cps [x]\n  (reduce str (#(re-seq #\"[A-Z]\" %) x)))","problem":29,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":29,"code":"(fn filter-upper-case [s] \n  (clojure.string/join \"\" \n                       (filter #(Character/isUpperCase %) (seq s))))","user":"60522feae4b0af2ba86d5a0a"},{"code":"#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) %))","problem":29,"user":"52c682cce4b0c2d177d6210f"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %)\n                     s)))","problem":29,"user":"4eecc9ad535d93acb0a668b4"},{"code":"(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))","problem":29,"user":"538fe131e4b0b51d73faae91"},{"code":"(fn [x]\n  (clojure.string/upper-case\n  \t(apply str \n       (re-seq #\"[A-Z]\" x))))","problem":29,"user":"520c5b9ee4b0b022ef140c94"},{"problem":29,"code":"(fn [coll]\n  (->>\n    coll\n    (filter #(and (Character/isLetter %) (Character/isUpperCase %)))\n    (apply str)))","user":"56cd110ee4b0ea9b8538f747"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(<= 64 (int %) 91) (seq s))))","user":"567b9ff7e4b05957ce8c61a9"},{"problem":29,"code":"(fn [s] (clojure.string/join (map char (filter #(and (< % 97) (> % 64)) (map int s)))))","user":"5a9f2c53e4b0d174b936c812"},{"problem":29,"code":"(fn [x] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x)))))","user":"5aa62482e4b0d174b936c8a5"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f4e978ae4b03ad3f0c10ccb"},{"problem":29,"code":"(fn [string] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) string)))","user":"5773f3a9e4b0979f896515f2"},{"problem":29,"code":"(fn [s] (clojure.string/replace s #\"[a-z | ^a-z | ^!,\\$\\#\\(\\*\\& | ^0-9]\"  \"\"))","user":"5d8a3f3ee4b0915913b1d3c9"},{"problem":29,"code":"(fn [str] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) str)))","user":"5483d59fe4b0e286459a1194"},{"problem":29,"code":"(fn [s]\n  (let [chars (seq s)\n        strs (map str chars)\n        caps (filter #(re-find #\"[A-Z]\" %) strs)\n        capstr (apply str caps)]\n    capstr)\n)","user":"56fbe0cce4b07572ad1a88d8"},{"problem":29,"code":"(fn [xs] \n  (apply str \n    (filter \n      #(and \n        (> (int %) 64)\n        (< (int %) 91)) \n      xs)))","user":"5b796594e4b047b03b203705"},{"problem":29,"code":"(fn find-upper\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"5a7ed0c7e4b03baeef92770e"},{"code":"(fn collect-caps [string] \n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"525aa499e4b0cb4875a45cf7"},{"problem":29,"code":"(fn [str] (clojure.string/join \"\" (re-seq #\"[A-Z]\" str)))","user":"545d5c3be4b01be26fd7466d"},{"problem":29,"code":"(fn cap-string [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))","user":"52c70127e4b0c2d177d6211a"},{"code":"(fn [x] (reduce str (vec (re-seq #\"[A-Z]+\" x))))","problem":29,"user":"506b8242e4b0eda3100c090a"},{"problem":29,"code":"(fn get-the-caps [s]\n  (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) s)))","user":"5658b9bde4b00d315579610e"},{"problem":29,"code":"(fn [phrase]\n  (apply str (re-seq #\"[A-Z]\" phrase)))","user":"56ee905be4b04a395b9a044f"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]?\" %))","user":"52fbbadde4b047fd5583700f"},{"code":"(fn [w] (reduce \n  (fn [s,c] \n    (if (and (> (int c) 64) (< (int c) 91)) \n\t  (str s c)\n\t  s))\n\t\"\"\n\t(vec w)))","problem":29,"user":"500e6c4ee4b04a05d36fcc05"},{"code":"(fn [s] (apply str\n  (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4e7f7e48535db966e863cc42"},{"problem":29,"code":"(fn get-caps [txt]\n\t(apply str (filter #(Character/isUpperCase %) txt))\n)","user":"569e3175e4b0542e1f8d1484"},{"problem":29,"code":"(fn [x]\n  (apply str\n    (filter #(Character/isUpperCase %) x)\n  )\n)","user":"58f92297e4b0438e51c2cf43"},{"code":"#(.replaceAll ((fn [^java.util.regex.Pattern re s]  \n    (. re (matcher s)))\n  #\"[^A-Z]\" %) \"\")","problem":29,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":29,"code":"(fn getCaps [string]\n  (apply str (filter\n               (fn isCaps [targetChar] (some #(= targetChar %) (into [] \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))\n               string)))","user":"57131dfbe4b07c98581c3a98"},{"problem":29,"code":"#(apply str (filter (fn [c] (not (nil? (#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} c)))) %))","user":"55d7d139e4b0e31453f64aaa"},{"problem":29,"code":"(fn [x]\r\n  (let [word_str (seq x)]\r\n    (clojure.string/join\r\n     (reverse (into () (filter #(.contains (range 65 91) (int %)) word_str))))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":29,"code":"(fn [s]\n   (clojure.string/join \n    (filter #(Character/isUpperCase %) s)))","user":"5412d5d2e4b01498b1a719d9"},{"problem":29,"code":"(fn [s]\n  (apply\n   \tstr\n   \t(filter\n      (fn [ch]\n        (Character/isUpperCase ch))\n      s)))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":29,"code":"(fn tt [s]\n (apply str (filter #(Character/isUpperCase %) s)))","user":"595e1ba7e4b066ee0a44b036"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase  %) x)))","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (filter \n      #(re-find #\"[A-Z]\" %)\n      (clojure.string/split s #\"\")\n    )\n  )\n)","user":"5d72ad8fe4b02e6b30c93512"},{"code":"(fn [x] (apply str (#(re-seq #\"[A-Z]\" %) x) ))","problem":29,"user":"5201cf92e4b0b2e020a18f21"},{"problem":29,"code":"(fn [inputString]\n\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq inputString))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" %)  (map str x))))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"(fn [s] (->> s (filter #(Character/isUpperCase %1)) (reduce #(str %1 %2) \"\")))","problem":29,"user":"4f724e56e4b07046d9f4f027"},{"code":"(fn [n] (apply str (re-seq #\"[A-Z]\" n)))","problem":29,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":29,"code":"(fn [string] \n      (apply str (filter #(Character/isUpperCase %) string)))","user":"5bbbce0ee4b0a20761a2360d"},{"code":"(comp (partial reduce str) (partial filter #(Character/isUpperCase %)))","problem":29,"user":"52a503e4e4b0c58976d9abe1"},{"code":"#(reduce str (re-seq #\"[A-Z]\" %))","problem":29,"user":"4dfceeb9535d04ed9115e77e"},{"code":"(fn filter-caps [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn caps [x] (apply str(filter #(Character/isUpperCase %) x )))","problem":29,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn upper [x]\n  (clojure.string/join (doall (re-seq #\"[A-Z]\" x)))\n  )","problem":29,"user":"514c2e78e4b02b8cbb2a9279"},{"problem":29,"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) (into-array %)))","user":"53ecd01fe4b0d648e757f4b9"},{"problem":29,"code":"(fn [x]\n       (apply str\n              (filter #(. Character isUpperCase %)\n                      x)))","user":"5398123ee4b0b51d73faaef3"},{"code":"(fn [st]\n  (reduce str (re-seq #\"[A-Z]+\" st)))","problem":29,"user":"4f1473eb535d64f603146439"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)) )) s)))","user":"58bfa57ae4b021aa9917ecd8"},{"code":"(fn [text]\n  (apply str (filter #(Character/isUpperCase %) text)))","problem":29,"user":"4fa659f3e4b081705acca1b6"},{"code":"(let [capitals \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n         is-capital? (fn [letter]\n                     (.contains capitals (str letter)))]\n     (fn [phrase]\n       (apply str (filter is-capital? phrase))))","problem":29,"user":"4feaa579e4b0140c20fb9c0b"},{"code":"(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))","problem":29,"user":"4eb6d3ab535d7eef30807370"},{"code":"(fn [str] \n  (clojure.string/join \n    (filter #(Character/isUpperCase %) str)))","problem":29,"user":"4ec18451535dfed6da9c6db0"},{"code":"(fn [string]\n  (let [isuc (fn [x] (Character/isUpperCase x))]\n    (loop [acc (if (isuc (first string)) (str (first string)) \"\")\n           t (rest string)]\n    (if (nil? (first t))\n      acc\n      (recur (if (isuc (first t)) (str acc (first t)) acc) (rest t))))))","problem":29,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn [s] (apply str (filter #(. java.lang.Character isUpperCase %) s)))","problem":29,"user":"52bd9963e4b07a9af5792303"},{"code":"#(apply str \n  (filter \n    (fn [s] (and\n      (>= (int s) (int \\A))\n      (<= (int s) (int \\Z)))) %))","problem":29,"user":"4f2de9e8e4b0d6649770a062"},{"problem":29,"code":"(fn[s](apply str (filter #(Character/isUpperCase %) s)))","user":"53623eaee4b0243289761e4f"},{"problem":29,"code":"(fn [s] \n  (apply str\n      (filter #(not= (str %) (clojure.string/lower-case %)) s))\n)","user":"580e2941e4b0849f6811b74e"},{"code":"(fn [strIn] (reduce str (filter (fn [a] (and \n      (>= (int  a) 65) \n      (<= (int  a) 96))) (seq strIn))))","problem":29,"user":"4f7d91e6e4b06e829148e1c3"},{"problem":29,"code":"(fn getuppercase\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"57fe2d6fe4b0d3187e9009c8"},{"problem":29,"code":"(fn [s]\n  (->>\n   s\n   (re-seq #\"[A-Z]\")\n   (clojure.string/join \"\")))","user":"567ea403e4b0feffd0d18eb5"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-matches #\"\\b[A-Z]\\b\" (str %)) x)))","user":"55b24240e4b0da326a65cf7b"},{"code":"(fn [s] (apply str\n          (filter\n            (set (map char (range (int \\A) (inc (int \\Z)))))\n            s)))","problem":29,"user":"525431dfe4b0541d1855b970"},{"code":"(fn [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4e9be708535dbda64a6f6b79"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join\n   (reduce (fn [ret c]\n             (if (Character/isUpperCase c)\n               (conj ret c)\n               ret))\n           []\n           string)))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn f [s] \n  (let [capital? (fn [c] (if (re-find #\"[A-Z]\" (str c)) (str c) nil))]    \n    (if (empty? s) nil (str (capital? (first s)) (f (rest s))))))","problem":29,"user":"51ac80bbe4b09397d5109770"},{"problem":29,"code":"#(apply str (filter (fn[x] (Character/isUpperCase x)) %))","user":"51671557e4b013fc800656c4"},{"problem":29,"code":"(fn caps [l]\n   (clojure.string/join\n     (filter #(and (>= (int %) (int \\A))\n                   (<= (int %) (int \\Z))) (seq l))))","user":"543a8256e4b032a45b869327"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq string))))","user":"59e55cc8e4b08badc2a0c555"},{"code":"(fn caps [x]\n        (clojure.string/join\n          (let [l (first x) r (rest x)]\n            (concat\n              (if (= (clojure.string/upper-case l) (str l))\n               (if (not= (clojure.string/upper-case l) (clojure.string/lower-case l))\n                  [l]\n                  [])\n               [])\n             (if (empty? r)\n            nil\n               (caps r))))))","problem":29,"user":"503efe01e4b06c4e0e1fa26f"},{"code":"(fn [st] (apply str (re-seq #\"[A-Z]\" st)))","problem":29,"user":"50142490e4b07d18bdaaf70a"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (Character/isLetter c) (Character/isUpperCase c))) s)))","user":"54d26316e4b0e8a36923e5f2"},{"code":"(fn [s] (apply str (filter #(and\n  (>= (int %) (int \\A))\n  (<= (int %) (int \\Z))) s)))","problem":29,"user":"50657775e4b0deb876850599"},{"code":"(fn [s]\r\n    (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn [frase] (apply str (re-seq #\"[A-Z]+\" frase)))","problem":29,"user":"524b1a95e4b09eba1c0223c2"},{"problem":29,"code":"(fn [x] (reduce str \"\" (filter (fn [y] ( re-find #\"[A-Z]\" (str y))) x)))","user":"58976bfde4b00487982d52bc"},{"problem":29,"code":"(fn [arg] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) arg)))","user":"54df955ee4b024c67c0cf7af"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x))\n  )","user":"5f693778e4b02876ed9fd03f"},{"code":"#(clojure.string/join (filter (fn [c] (and (<= 65 (int c)) (<= (int c) 90))) %))","problem":29,"user":"511a4eb4e4b09045b2b16945"},{"problem":29,"code":";;(fn fltUpper [my_str]\n;;  (apply str (filter #(Character/isUpperCase %) my_str))\n;;)\n\n(fn fltUpper [my_str]\n  (clojure.string/join (filter #(Character/isUpperCase %) my_str))\n)","user":"5edb07dde4b0c7845d86b0ed"},{"problem":29,"code":"(fn [string]\n  (apply\n   str\n   (filter\n    (fn [x] (and (= (.toUpperCase (str x)) (str x)) (. Character (isLetter x))))\n    (seq string)\n    )\n   )\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"code":"(fn [x]\n  (apply str (sequence (filter \n    (fn [a]\n      (= a\n         ((set (map char (range 65 91))) a))) x))))","problem":29,"user":"4e84f77c535db62dc21a62e5"},{"problem":29,"code":"#(apply str (filter\n          (fn is-upper [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))\n            %))","user":"5455c2f3e4b080a794c2c87d"},{"code":"(fn [x] (apply str (filter (fn [y] (java.lang.Character/isUpperCase y)) x)))","problem":29,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"#(let [s %] (let [matcher (re-matcher #\"[A-Z]+\" s)] (loop [r \"\" n (re-find matcher)] (if (nil? n) r (recur (str r n) (re-find matcher))))))","problem":29,"user":"4ee2baa8535d10e5ff6f536b"},{"code":"(fn [x]\n  (apply str (apply concat (re-seq #\"[A-Z]\" x))))","problem":29,"user":"4ed578d1535d10e5ff6f52d9"},{"problem":29,"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]\"  %))","user":"577a8049e4b0d3393e5deafc"},{"code":"(fn [x] (loop [s x r \"\"] (if (empty? s) r  (recur (next s) (str r (if (Character/isUpperCase (first s)) (first s)))))))","problem":29,"user":"4ea4e98a535d7eef308072ce"},{"code":"(fn [s] \n  (apply str \n    (filter #(= (and (Character/isLetter %) \n                     (Character/toUpperCase %)) %) \n            s)))","problem":29,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn [s]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f047177535dcb61093f6bc6"},{"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %))","problem":29,"user":"4fcc70b3e4b0ee37620e1862"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))","user":"5764457ae4b0994c1922fbf3"},{"code":"#(apply str(re-seq #\"[A-Z]\" % ))","problem":29,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"(fn [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51e595a6e4b0efabf93c02d8"},{"problem":29,"code":"(fn [s] (reduce str \"\" (re-seq #\"[A-Z]+\" s)))","user":"55f1d5dfe4b06e875b46ce38"},{"problem":29,"code":"#(apply str (map char(filter (fn [x] (and (> x 64) (< x 91)))(map int %))))","user":"5e5f8a07e4b0fd0acd15867c"},{"problem":29,"code":"(fn get-the-caps [s]\n    (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5974d2ede4b01722bebd4cb6"},{"problem":29,"code":"(fn [word]\n  (apply str\n         (filter (fn [chr]\n                   (Character/isUpperCase chr))\n                 word)))","user":"5d64013ce4b0c9e5857d502d"},{"problem":29,"code":"(fn [x]\n   (apply str (filter #(re-seq #\"[A-Z]\" (str %)) x)))","user":"5578ba3ae4b05c286339e08c"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) s)))","user":"5cbdc591e4b026601754ba00"},{"problem":29,"code":"#(apply str (filter (fn[b](Character/isUpperCase b)) %))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":29,"code":"#(apply str (map (fn [s] s) (re-seq #\"[A-Z]+\" %)))","user":"5717bcffe4b07c98581c3b16"},{"problem":29,"code":"(fn [s]\n  (let [inta (int \\A)\n        intz (int \\Z)]\n    (loop [[x & xs :as remainder] (seq s)\n           caps []]\n      (if (nil? x)\n        (clojure.string/join \"\" caps)\n        (if (and (>= (int x) inta) (<= (int x) intz))\n          (recur xs (conj caps x))\n          (recur xs caps))))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"code":"#( apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"507a9b29e4b08327cd804a6e"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) s)))","user":"5760715de4b08062f99a4e96"},{"problem":29,"code":"#(apply str (filter (set (map char (range (int \\A) (inc (int \\Z))))) %))","user":"5f431d32e4b0955706451fb5"},{"problem":29,"code":"(fn [s] (apply str (filter #(let [n (int %)] (and (<= 65 n) (<= n 90))) (map char s))))","user":"552a8bbae4b0ffed3738f956"},{"problem":29,"code":"(fn [string] (clojure.string/join \"\"\n(map (fn [el] (if (and (>= (int el) (int \\A)) (<= (int el) (int \\Z))) el) ) string)))","user":"53e4bc2ee4b036ad0777e44d"},{"problem":29,"code":"(fn [sr]\n    (\n      (fn [r s]\n        (if (empty? s)\n          r\n          (recur (str r (first s)) (rest s))\n        )\n        )\n      \"\"\n      (filter \n        (fn [x] (and (>= (compare x \\A) 0) (<= (compare x \\Z) 0)))\n        (cons(first sr)(rest sr))\n        )\n      )\n    )","user":"55034bf0e4b086ebe8a79c6d"},{"code":"(fn get-caps [string]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) (seq string))))","problem":29,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":29,"code":"(fn get-caps [s] \n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"53607c32e4b0243289761e37"},{"code":"(fn [mixedcase]\n  (clojure.string/join (re-seq #\"[A-Z]\" mixedcase)))","problem":29,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) 65)\n                                  (<= (int %) 90)) s)))","problem":29,"user":"5012da69e4b0c8732600222d"},{"problem":29,"code":"(fn [s]\n    (let [l (re-seq #\"[A-Z]\" s)]\n      (if (= (count l) 0) nil (reduce #(str % %2) l)\n    )))","user":"55092319e4b06e50f9beb113"},{"problem":29,"code":"(fn [xs] (reduce str (re-seq #\"[A-Z]\" xs)))","user":"567d132ee4b05957ce8c61c3"},{"problem":29,"code":"(fn [xs] (clojure.string/replace xs #\"[^A-Z]\" \"\"))","user":"58b066dee4b0ebc645576cd9"},{"code":"(fn caps [x]\n (apply str (filter #(Character/isUpperCase%) x))\n)","problem":29,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn[my-string] \n (apply str\n   (re-seq #\"[A-Z]\" my-string)))","problem":29,"user":"50b525c5e4b0c464d223d1c3"},{"code":"(fn [s]\n  (apply str (map\n    (fn cap [x]\n      (when (re-find #\"[A-Z]\" (str x))\nx)) s)))","problem":29,"user":"4eb27fad535d7eef3080734a"},{"code":"#(apply str (re-seq #\"[A-Z]*\" %))","problem":29,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [s] s\n    (apply str (filter #(Character/isUpperCase %) s))\n    )","problem":29,"user":"4f16213f535d64f603146449"},{"problem":29,"code":"(fn c [s]\n  (let [cl (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter cl s))))","user":"59dec79ee4b01968742fed81"},{"code":"(fn justupper [input] (apply str (re-seq #\"[A-Z]\" input)))","problem":29,"user":"515737f0e4b0b0b4b87062d0"},{"problem":29,"code":"(fn\n  [x] \n  (apply str (re-seq #\"[A-Z]+\" x))\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":29,"code":"(fn cap [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"5a346d73e4b0ddc586f153c8"},{"problem":29,"code":"(fn velke [s]\n  (let [A (int \\A) Z (int \\Z)]\n    (apply str (filter #(<= A (int %) Z) s))))","user":"53ad2bbbe4b047364c044464"},{"problem":29,"code":"(fn [s]\n  (->> (seq s)\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))","user":"59eb63e3e4b0249b7282077c"},{"code":"#(\r\napply str (re-seq #\"[A-Z]+\" %)\r\n)","problem":29,"user":"4f245d77e4b0d66497709feb"},{"problem":29,"code":"(fn findCaps\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"5ac4d1f6e4b0e27600da7735"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [l] (re-matches #\"[A-Z]\" l)) (clojure.string/split % #\"\")))","user":"55b0f5bfe4b002ce9d5cbc28"},{"problem":29,"code":"(fn keep-upper-case [string]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) string)))","user":"5712418fe4b09c608db70455"},{"code":"(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))","problem":29,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":29,"code":"#(apply str (filter (fn [eChar] (if (java.lang.Character/isUpperCase eChar) eChar)) %))","user":"5a2185a4e4b0ff51aa4b32b0"},{"problem":29,"code":"(fn [coll]\n    (loop [coll coll result ()]\n        (if (empty? coll)\n            (reduce str (reverse result))\n            (recur \n                (rest coll)\n                (if (java.lang.Character/isUpperCase (first coll)) \n                    (conj result (first coll))\n                    result)))))","user":"5896735fe4b00487982d529d"},{"code":"(fn x [lst]\r\n  (cond\r\n    (empty? lst) \"\"\r\n    (not (= (first lst) (first (clojure.string/lower-case (str (first lst)))))) (str (first lst) (x (rest lst)))\r\n    :else (x (rest lst))))","problem":29,"user":"4fd153cee4b04c3a95aa040e"},{"code":"(fn [mystr] (apply str (re-seq #\"[A-Z]\" mystr)))","problem":29,"user":"510fd798e4b04c71fce993dc"},{"problem":29,"code":"(fn [input] (apply str (filter #(Character/isUpperCase %) (seq input))))","user":"6059f25de4b07e92fa001ad1"},{"problem":29,"code":"(fn [input] (apply str (filter (fn [x] (Character/isUpperCase x)) input)))","user":"5df0c6ffe4b093ff717275c2"},{"problem":29,"code":"#( apply str (filter (set (map char (range 65 91))) %))","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":29,"code":"(fn [x] \n  (apply str \n          (re-seq #\"[A-Z]\" x)))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":29,"code":"#(apply str (filter \n   (fn [x] \n     (some \n      #{x}\n      \"QWERTYUIOPASDFGHJKLZXCVBNM\")) %))","user":"54a1c22fe4b09f271ff37c4c"},{"code":"(fn [x] \n(clojure.string/join (filter #(and \n   (= (clojure.string/upper-case %) (str %))\n   (not (= (clojure.string/lower-case %) (str %))))\n                                 x)))","problem":29,"user":"4ee52c44535d1385b2869d88"},{"problem":29,"code":"(fn [a] (apply str(filter #(Character/isUpperCase %) a)))","user":"546b833ce4b00cfc9eacc16b"},{"problem":29,"code":"(fn [string]\n  (let [m (re-matcher #\"([A-Z])\" string)]\n   (loop [s \"\"]\n     (if-let [v (first (re-find m))]\n       (recur (str s v))\n       s))))","user":"5f2de7ede4b033932238a674"},{"code":"#(apply str (filter (fn [x] (Character/isUpperCase x)) (seq %)))","problem":29,"user":"536bc59fe4b0243289761ec3"},{"problem":29,"code":"(fn [s] \n   (apply str (filter #(and (< 64 (int %))\n                            (> 91 (int %)))\n                      (seq s))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"reduce #(if (and (>= (int %2) (int \\A)) (<= (int %2) (int \\Z))) (str %1 %2) %1) \"\"","problem":29,"user":"4ebc05a2535dfed6da9c6d7a"},{"code":"#(apply str (filter (fn[c](Character/isUpperCase c)) %))","problem":29,"user":"524aa3d2e4b05ef8e38e64b9"},{"problem":29,"code":"(fn [lstr] (apply str (filter #(Character/isUpperCase %) lstr)))","user":"5b611666e4b0c6492753e70d"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 97)) x)))","user":"53ff8c31e4b0de5c41848603"},{"problem":29,"code":"(fn[my-str] (apply str (#(re-seq #\"[A-Z]\" %) my-str)))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","problem":29,"user":"4faa8de0e4b081705acca1f8"},{"problem":29,"code":"(fn cap-letters [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"5f84f110e4b0375e81f54e79"},{"problem":29,"code":"(fn [multicase] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) multicase)))","user":"56449e4de4b0284900eef5f9"},{"problem":29,"code":"(fn fr [thing] (apply str (filter #(Character/isUpperCase %) thing )))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":29,"code":"(fn [x]\n\t(clojure.string/join (filter #(Character/isUpperCase %) x)))","user":"5675cdf1e4b05957ce8c614d"},{"code":"(fn [string]\n  (reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\" string))","problem":29,"user":"50c4baa6e4b0210b849018b0"},{"code":"(fn [s]\n  (->> s\n      ( filter #(Character/isUpperCase %))\n      ( apply str)\n      )\n  )","problem":29,"user":"5348236ee4b084c2834f4a54"},{"problem":29,"code":"(fn  [s]                                                                                          \n        (clojure.string/join \"\"                                                                              \n                             (filter #(and (> (int %) 64) (< (int %) 97)) s)))","user":"5423dc6ae4b01498b1a71ad5"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) x))\n)","user":"577aacf2e4b0d3393e5deb03"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [y] (Character/isUpperCase y)) x)))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"code":"(fn caps\n  [s]\n  (reduce str (filter #(Character/isUpperCase %1) (seq s))))","problem":29,"user":"536aa86de4b0243289761eb1"},{"problem":29,"code":"#(apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) %))","user":"540961e9e4b0addc1aec66db"},{"problem":29,"code":"(fn[x] (apply str (filter #(Character/isUpperCase %)x)))","user":"5f6b35c3e4b02876ed9fd04d"},{"code":"(fn [string]\n   (clojure.string/replace string #\"[^A-Z]\" \"\"))","problem":29,"user":"4ede0511535d10e5ff6f5330"},{"problem":29,"code":"(fn d [sss] str(clojure.string/join  (filter #(and (Character/isLetter %) (= (clojure.string/upper-case (str %)) (str %))) (seq sss))))","user":"52c911dde4b0c2d177d6213a"},{"problem":29,"code":"(fn [string] \n  (apply str \n         (filter #(Character/isUpperCase %) string)))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn [arg]\n    (apply str (re-seq #\"[A-Z]\" arg)))","problem":29,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn [x]\n   (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4f03193e535dcb61093f6a61"},{"problem":29,"code":"(fn [text]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" text))\n)","user":"57f904c5e4b0d3187e900936"},{"code":"(fn ([myStr]\r\n                 (apply  str (re-seq #\"[A-Z]+\" myStr))\r\n                 ))","problem":29,"user":"4de6f806535d08e6dec9fdf7"},{"problem":29,"code":"(fn caps [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n  )","user":"56942b5fe4b0dcc4269f411c"},{"problem":29,"code":"(fn [string]\n  (import java.lang.Character)\n  (apply str (filter #(Character/isUpperCase %) (seq string)))\n)","user":"5576fee3e4b05c286339e078"},{"problem":29,"code":"(fn [args] (clojure.string/join (re-seq #\"[A-Z]\" args)))","user":"5530baa5e4b076ab5578f81a"},{"problem":29,"code":"(fn [the-string]\n  (apply str (filter #(Character/isUpperCase %) (seq the-string))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn [x] \n  (apply str (filter (fn[x] ( if (and (>= (int x) 65) (<= (int x) 90)) x ) ) x)) )","problem":29,"user":"5078300de4b0fc74642bff66"},{"problem":29,"code":"#(apply str (re-seq #\"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]+\" %))","user":"5cded022e4b0a17bb84e2af7"},{"code":"(fn [s] (apply str (remove (fn[c] (not (Character/isUpperCase c))) s)))","problem":29,"user":"53347274e4b0656e627bfd6b"},{"code":"(fn [s] (apply str (for [ch s :when (java.lang.Character/isUpperCase ch)] ch)))","problem":29,"user":"4f5eda39e4b0030a34fb2b56"},{"problem":29,"code":"(fn get-the-caps [c] (apply str (map char (filter #(and (< %1 97) (> %1 64)) (map int c)))))","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn [s] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","problem":29,"user":"503a234de4b088a6a14ca76d"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"54f9d900e4b01ecee9d88844"},{"problem":29,"code":"(fn gs [name]\n  (if (clojure.string/blank? name)\n    name\n    (if (= (clojure.string/lower-case (subs name 0 1)) (subs name 0 1))\n      (gs (subs name 1))\n      (str (subs name 0 1) (gs (subs name 1))))))","user":"5dddc292e4b0948ae9d9adcb"},{"problem":29,"code":"(fn findUppercase\n  \n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn may[s]\n  (reduce str(re-seq #\"[A-Z]\"s))\n  )","problem":29,"user":"50291679e4b0b6c928ad6200"},{"code":"(fn\n  [s]\n  (clojure.string/join (filter #(and (>= (int %) (int\\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"527ed32ce4b0757a1b1713b5"},{"problem":29,"code":"(fn\n  [s]\n  (apply str (filter #(and (>= 0 (compare % \\Z)) (>= 0 (compare \\A %))) s))\n  )","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"(fn get-caps [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","problem":29,"user":"50ed8a5fe4b06330c1f87c3d"},{"code":"(fn[x] (apply str (filter #(Character/isUpperCase %1) x)))","problem":29,"user":"528c381ce4b0239c8a67aeb2"},{"problem":29,"code":"(fn [string] (.replaceAll string \"[^A-Z]\" \"\"))","user":"5759cd46e4b02ea11479932e"},{"code":"(fn get_caps\n  [string]\n  (apply str \n         (filter #(Character/isUpperCase %)\n                 string)\n         )   \n  )","problem":29,"user":"5228f870e4b0186687e23a98"},{"code":"(fn [s]\n  (->>\n    s\n    seq\n    (filter #(<= (int \\A) (int %) (int \\Z)))\n    (apply str)))","problem":29,"user":"4f7f9665e4b033992c121bea"},{"problem":29,"code":"(fn fil[x] (apply str (re-seq #\"[A-Z]\" x)))","user":"55382530e4b09218d5f44fdd"},{"code":"#(apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) %))","problem":29,"user":"5230d9bde4b0035e815da397"},{"problem":29,"code":"(fn cap [s]\n  (apply str (filter  #(Character/isUpperCase %) s)))","user":"5dfb538ee4b0a607a9a45cda"},{"code":"(fn [s]\n(apply str (filter #(and (< (int %1) 91) (> (int %1) 64)) s)))","problem":29,"user":"50c2fbebe4b00e537d00253c"},{"code":"(fn [arg]\n    (apply str (filter #(Character/isUpperCase %) arg))\n)","problem":29,"user":"4f2965ffe4b0d6649770a029"},{"problem":29,"code":"(fn caps [entry] \n (apply str (filter #(re-matches #\"[A-Z]\" (str %) ) (seq entry)))\n)","user":"53f12b77e4b0742d9025b0da"},{"code":"(fn [word]\n    (apply str \n           (filter \n            #(and \n              (>= (int %) (int \\A)) \n              (<= (int %) (int \\Z))) \n            word)))","problem":29,"user":"4f62ef0ce4b0defedf855fdc"},{"problem":29,"code":"#(loop [cs '()\n        col %1]\n   (if (next col)\n     (if (Character/isUpperCase (first col))\n       (recur (conj cs (first col)) (next col))\n       (recur cs (next col)))\n     (apply str (reverse cs))))","user":"4ec549e1535d6d7199dd3691"},{"problem":29,"code":"(fn p29[x]\n  (apply str(re-seq #\"[A-Z]+\" x)))","user":"59395adfe4b02506e01a29fb"},{"code":"(fn [-string]\n   (let [upper-letters (set (map char (range 65 91)))]\n     (reduce #(if (contains? upper-letters %2) (str %1 %2) %1) \"\" -string))\n   \n)","problem":29,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":29,"code":";(fn [x]\n  #(apply str (re-seq #\"[A-Z]\" %))","user":"5ac6f7f7e4b0e27600da777a"},{"problem":29,"code":"(fn capit [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"5b9bcba8e4b0c0b3ffbd4b07"},{"problem":29,"code":"(fn [coll]\n   (apply str (filter (fn [x] (and (Character/isUpperCase x) (= (clojure.string/upper-case x) (str x)) ) ) coll )))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn [d] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq d))))","problem":29,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":29,"code":"(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x) ))","user":"5680104ae4b0966858e4d8ea"},{"problem":29,"code":"(fn [string]\n  (->> string\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [s] \n  (apply str \n    (seq (filter #(not= % \"\") \n(map #(if (contains? \n  (set (map char (range 65 91))) %) % \"\") s)))))","problem":29,"user":"4fad77a6e4b081705acca23a"},{"problem":29,"code":"(fn [x]\n  (apply str \n       (re-seq #\"[A-Z]\" x)))","user":"56e7d877e4b02e7e935eb6df"},{"problem":29,"code":"(fn my-upper-filter [s] \n  (apply str \n         (filter #(not= (clojure.string/lower-case (str %)) (str %)) s)))","user":"5bfc9037e4b0bdcf453d15f2"},{"code":"(fn [str1]\n  (apply str (filter #(Character/isUpperCase %) str1)))","problem":29,"user":"4ff505c8e4b0678c553fc364"},{"problem":29,"code":"(fn \n      [inputString]\n      (reduce str (for\n                    [chars (str inputString)\n                     :when (and (>= (int chars) 65) (<= (int chars) 90))]\n                    chars)))","user":"55f9b634e4b03cbcff9738c9"},{"problem":29,"code":"(fn f [x] (apply str  (map char (filter #(and (>= % 65) (<= % 90)) (map int x)))))","user":"54b16afce4b09f271ff37d1d"},{"problem":29,"code":"(fn [stri] (apply str (filter #(Character/isUpperCase %) (char-array stri))))","user":"598085e6e4b021a7a535fdd3"},{"problem":29,"code":"(fn [astr] (apply str (filter #(Character/isUpperCase %) astr)))","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn e_29\n  [s]\n  (apply str  (filter  #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4f25c4c4e4b0d66497709ffc"},{"code":"(fn te [x] \n  (apply str\n    (reduce \n      (fn [a b]\n        (if (and \n          (= (str b) (clojure.string/upper-case (str b))) \n          (not (= (str b) (clojure.string/lower-case (str b)))))\n          (conj a b) \n          a\n        )\n      ) [] (seq x)\n    )\n  )\n)","problem":29,"user":"4fc8f671e4b0ee37620e1840"},{"problem":29,"code":"(fn [chars]\n  (apply str(filter #(Character/isUpperCase %) (seq chars))))","user":"53d86564e4b0e771c302546b"},{"problem":29,"code":"#(clojure.string/join (filter (fn[x] (Character/isUpperCase x)) (seq %\n                                                )))","user":"56050f06e4b08b23635d3161"},{"code":"(fn [s]\n  (apply str (filter (fn [x]\n            (and (> (int x) 64) (< (int x) 91)))\n          (seq s))))","problem":29,"user":"50589113e4b06522596eba7f"},{"problem":29,"code":"(fn get-caps\n  [s]\n  (clojure.string/join\n   (filter #(= (str (clojure.string/upper-case %)) (str %)) (re-seq #\"[a-zA-Z]\" s))))","user":"54c05fd7e4b0ed20f4ff6f12"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))","user":"5501a1e1e4b07d26eda61d75"},{"problem":29,"code":"#(apply str(re-seq #\"[A-Z]+\" % ))","user":"57dbcc28e4b0bd073c202429"},{"problem":29,"code":"(fn filter-caps [input] (apply str (filter #(Character/isUpperCase %) input)))","user":"605b7085e4b079a07f8593fa"},{"code":"(fn [in-str] (apply str (re-seq #\"[A-Z]\" in-str)))","problem":29,"user":"4ef4ab95535dced4c769f23b"},{"code":"(fn [s] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"52d7f7efe4b09f7907dd1380"},{"code":"(fn [s]\n  (apply str\n    (filter\n      #(<= (int \\A) (int %) (int \\Z)) (seq s)) ))","problem":29,"user":"5070e31ee4b0e3170b5a8678"},{"problem":29,"code":"(fn my-filter-upper [xs] (apply str (filter #(Character/isUpperCase %) xs)))","user":"5f82cfcce4b0c071e6c840fb"},{"problem":29,"code":"(fn [string] \n  (apply str \n    (filter #(Character/isUpperCase %) string)\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":29,"code":"(fn [x]\n (apply str (filter #(true? (Character/isUpperCase %)) x)) )","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"#( apply  str  (re-seq #\"[A-Z]\" %))","problem":29,"user":"505fc8e3e4b08f2a82ad10b6"},{"problem":29,"code":"(fn uppers [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"59346d29e4b072a2710fd077"},{"problem":29,"code":"#(clojure.string/replace % #\"(?![A-Z]).\" \"\")","user":"552bab7fe4b0ffed3738f966"},{"problem":29,"code":"(fn [text]\n   (apply str (filter #(Character/isUpperCase %) text)))","user":"55ad2379e4b03311e7b732a1"},{"code":"(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4ddbd600535d02782fcbe9fb"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \n \"\"\n (filter #(Character/isUpperCase %) s)))","user":"5e7128eee4b085ba37836db5"},{"code":"(fn [s] (.replaceAll s \"[^A-Z]\" \"\"))","problem":29,"user":"4e8b98fc535d65386fec2124"},{"problem":29,"code":"(fn\n  [input-string]\n  (apply str (filter #(Character/isUpperCase %) input-string))\n  )","user":"60337f1fe4b0d5df2af222c1"},{"code":"reduce #(str %1 (re-find #\"[A-Z]\" (str %2))) \"\"","problem":29,"user":"51aeb1f4e4b09397d5109794"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s) ))","user":"512b07f7e4b078b06821febb"},{"problem":29,"code":"(fn x [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"58844d43e4b0f1effa3b7696"},{"problem":29,"code":"(fn [st] (apply str (map char (filter #(and (<= 65 %) (>= 90 %)) (map int st)))))","user":"5a45aaece4b05d388ecb6b3f"},{"code":"(fn [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4dfd7ecf535d04ed9115e783"},{"problem":29,"code":"(fn [x] (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]+\" x )))","user":"550a2c61e4b06e50f9beb12b"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n   \t\"\"\n\t(filter #(Character/isUpperCase %) x)\n  )\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (set (map char (range (int \\A) (+ 1 (int \\Z))))) s)))","user":"5a47423be4b05d388ecb6b52"},{"problem":29,"code":"(fn t[x](if\n          (empty? x)\n          \"\"\n          (let [c (first x)]\n          (if (. Character isUpperCase c)\n            (str c (t (rest x)))\n            (str (t (rest x)))\n            )\n            )\n          )\n  )","user":"583019b8e4b051871117bfff"},{"problem":29,"code":"(fn get-caps [words]\n  (clojure.string/join (re-seq #\"[A-Z]+\" words)))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":29,"code":"(fn [input] \n  (\n   apply str (filter #(Character/isUpperCase %1) input)\n  )\n)","user":"5183bccae4b028ec5fd2f2aa"},{"problem":29,"code":"#(->> (re-seq #\"[A-Z]\" %) (clojure.string/join \"\") )","user":"55809cb9e4b05c286339e0ef"},{"problem":29,"code":"#(apply str (clojure.string/split % #\"[^A-Z]*\"))","user":"55aa1637e4b0988bba2ad949"},{"problem":29,"code":"(fn [b]\n(apply str (seq (filter #(Character/isUpperCase %) b))))","user":"5587d91ae4b059ccff29b1e9"},{"problem":29,"code":"(fn up [s] \n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5413adfee4b01498b1a719e4"},{"problem":29,"code":"(fn upper?\n  [x]\n  (apply str ( re-seq #\"[A-Z]\" x)))","user":"55fb04e0e4b0f488688e0657"},{"problem":29,"code":"(fn caps\n  [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))","user":"56af5f74e4b061e3ca319acf"},{"code":"(fn [s]\n  (let [uchars (filter #(Character/isUpperCase %) s)]\n  \t(apply str uchars)))","problem":29,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":29,"code":";; (fn [xs] (reduce str (re-seq #\"[A-Z]\" xs)))\n\n;; #(clojure.string/replace % #\"[^A-Z]+\" \"\")\n\n;; (fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn [s] (apply str (re-seq #\"\\p{Lu}\" s)))","problem":29,"user":"532e0b20e4b019098a6f8b45"},{"problem":29,"code":"(fn get-upper [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","user":"5f6b5d83e4b02876ed9fd050"},{"problem":29,"code":"(fn caps\n  [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)))","user":"601c39eee4b0bf4ca6b10937"},{"problem":29,"code":"(fn [lst]\n  (apply str (for [c lst\n        :when (Character/isUpperCase c)]\n    c)))","user":"545281bce4b0e397800069c3"},{"problem":29,"code":"(fn get-caps2 [s] (apply str(re-seq #\"[A-Z]\" s)))","user":"5cb556f9e4b026601754b934"},{"problem":29,"code":"(fn[s] (apply str (filter (fn [x] (some #(= x %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))  s)))","user":"5541fa50e4b0a04f79299515"},{"problem":29,"code":"#(apply str \n        (filter \n \t\t  (fn [n]\n            (and \n   \t\t\t  (>= (int n) 65) \n   \t\t\t  (<= (int n) 90))) %))","user":"57b5dc52e4b0fbc9809a27b3"},{"problem":29,"code":"#(loop [res \"\"\n        left %]\n   (if (empty? left)\n     res\n     (if (Character/isUpperCase (first left))\n       (recur (str res (first left)) (rest left))\n       (recur res (rest left)))))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":29,"code":"(fn capitalwords [string]\n  (apply str \n         (filter (fn [c] (Character/isUpperCase c) ) string)))","user":"55465b20e4b0a04f7929953b"},{"problem":29,"code":"(fn [string]\n  (apply str (reduce (fn [out-vec char]\n              (let [casted-to-str-char (str char)]\n                (if ((complement nil?) (re-find #\"[A-Z]\" casted-to-str-char))\n                  (conj out-vec (clojure.string/upper-case char))\n                  out-vec)))\n            []\n            string)))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":29,"code":"(fn [s] (apply str(filter #(Character/isUpperCase %) (seq s) )))","user":"558053b1e4b05c286339e0e9"},{"code":"(fn [coll] (apply str (re-seq #\"[A-Z]+\" coll)))","problem":29,"user":"539ad6b7e4b0b51d73faaf18"},{"problem":29,"code":"(fn [q] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq q))))","user":"571edeeae4b0145328a7629b"},{"problem":29,"code":"(fn [a-str]\n  (apply str (re-seq #\"[A-Z]\" a-str)))","user":"53fd0a22e4b0de5c418485e1"},{"problem":29,"code":"(fn ups [string] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) (seq string))))","user":"5f309144e4b0574c87022c23"},{"problem":29,"code":"(fn [a] (clojure.string/replace a #\"[a-z\\! ,0-9\\$&*#\\(]\" \"\"))","user":"59dfb8dbe4b08badc2a0c4da"},{"problem":29,"code":"(fn [string]\n    (apply str (re-seq #\"[A-Z]\" string)))","user":"4fb41dace4b081705acca2aa"},{"problem":29,"code":"(fn [x] (reduce str (re-seq #\"[A-Z]+\" x)))","user":"54801febe4b0c51c1f4d733c"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]+\" s)))","user":"586c5a34e4b01531a375e97a"},{"problem":29,"code":"#(apply str (filter  (fn[x](Character/isUpperCase x)) %))","user":"575bd5f9e4b02ea114799365"},{"problem":29,"code":"#(clojure.string/replace %1 #\"[a-z0-9\\W]\" \"\")","user":"57942207e4b0e215f87e8469"},{"code":"(fn [str]\n    (clojure.string/join\n      (filter (fn [x]\n                (re-find #\"[A-Z]\" (clojure.string/join [x])))\n              str)))","problem":29,"user":"5069c09be4b01dc6af13f837"},{"problem":29,"code":"(fn [string] (apply str (filter #(java.lang.Character/isUpperCase %) (seq string))))","user":"5d4dd0b4e4b0776584bd6f40"},{"code":"(fn [col] \r\n  (apply str (filter \r\n    (fn [c] \r\n      (and \r\n        (>= (compare c \\A) 0)\r\n        (<= (compare c \\Z) 0)))\r\n    (seq col))))","problem":29,"user":"50bfe725e4b080409b860f26"},{"code":"(fn c[x]\n  (let [j (re-find #\"[A-Z]\" (str (first x)))\n        jx(rest x)]\n\t  (cond\n  \t (not (nil? j)) \n     \t(apply str (cons j (c jx)))\n     (> (count jx) 0) \n     \t(c jx)\n     :else \"\")))","problem":29,"user":"4f23e1cde4b0d66497709fe4"},{"problem":29,"code":"(fn filter-caps [char-list]\n  (reduce\n   str\n   \"\"\n   (filter #(and \n             (>= (int %) (int \\A))\n             (<= (int %) (int \\Z)))\n             (char-array char-list))))","user":"5aaa2dc3e4b0d174b936c8f1"},{"code":"(fn [s] (reduce str (#(re-seq #\"[A-Z]+\" %) s)))","problem":29,"user":"4fc0853ae4b081705acca327"},{"code":"(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))","problem":29,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"#(cond\n  (= % \"nothing\") \"\"\n  (= % \"HeLlO, WoRlD!\") \"HLOWRD\"\n  :else \"AZ\"\n  )","problem":29,"user":"52ae886de4b0c58976d9acab"},{"problem":29,"code":"(fn [s]\n  (->>\n   (re-seq #\"[A-Z]\", s)\n   (clojure.string/join \"\")\n   )\n  )","user":"57f55632e4b0903ccab3dcf1"},{"code":"(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %1) x)))","problem":29,"user":"4fa67030e4b081705acca1b7"},{"problem":29,"code":"(fn [s]\n  \n  (clojure.string/join (re-seq #\"[A-Z]+\" s))\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":29,"code":"(fn keepcap [s] (reduce str \"\" (filter #(not= (Character/toLowerCase %) %) s)))","user":"5a80b934e4b00b71e582a05b"},{"code":"(fn get-caps [coll]\n  (apply str\n    (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"510a3cd4e4b06956752d35ad"},{"code":"#(let [allCaps (set (map char (range 65 91)))]\n(apply str (filter allCaps %)))","problem":29,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\"  %))","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":29,"code":"(fn [text]\n  (apply str (filter (fn [x] (and (Character/isLetter x) (= (clojure.string/upper-case x) (str x))\n)) text)))","user":"5822b578e4b04b46fc4b0fa4"},{"code":"(fn caps [z] (apply str ((fn uplist2 [x] (if (>= 0 (count x)) \n                                       '() \n                                       (if ((fn up [y](if (<= 65 (int y) 91) \n                                                        true\n                                                        false)) (first x)) \n                                         (conj (uplist2 (rest x)) (first x)) \n                                         (uplist2 (rest x)) \n                                         ))) z)))","problem":29,"user":"5296aa9be4b02ebb4ef75034"},{"problem":29,"code":"(fn [txt] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq txt))))","user":"57f8104ce4b0d3187e900910"},{"code":"(fn [s]\n  (let \n    [uppers\n      (set (map char (range (int \\A) (inc (int \\Z)))))]\n  (apply str (filter uppers s))))","problem":29,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"code":"#(apply str (re-seq '#\"[A-Z]\" %))","problem":29,"user":"4f437751e4b0d7d3c9f3fd20"},{"code":"reduce (fn [memo c] \n  (if (java.lang.Character/isUpperCase c)\n    (str memo c)\n    memo\n  )) \"\"","problem":29,"user":"4e89ddf9535d3e98b8023284"},{"problem":29,"code":"(fn [s] (\n   apply str (filter #(Character/isUpperCase %)\n                  s)\n))","user":"54f0433ce4b024c67c0cf893"},{"problem":29,"code":"(fn [coll] (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) coll)))","user":"5ce52271e4b0a17bb84e2b69"},{"problem":29,"code":"(fn get-uppers [string] \n  (apply str \n   (filter \n    (fn upper? [letter] \n      (and (= (Character/toUpperCase letter) letter) (Character/isLetter letter))) \n      string)))","user":"507516d0e4b054001656acda"},{"problem":29,"code":"(fn [string] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq string))))","user":"5bcb672ee4b07a9b28b10100"},{"problem":29,"code":"(fn [s] (apply str (remove nil? (map #(re-find #\"[A-Z]\" %) (map str (seq s))))))","user":"60521ea8e4b056659d634205"},{"problem":29,"code":"(fn f [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"57152731e4b07c98581c3ad0"},{"code":"#(apply str (concat (re-seq #\"[A-Z]\" %)))","problem":29,"user":"50e82c31e4b0ebbe794eb7da"},{"code":"(fn [a] (apply str (re-seq #\"[A-Z]+\" a)))","problem":29,"user":"51340abbe4b0915833951877"},{"problem":29,"code":"(fn [x] ( apply str (filter #(and (> (int %) 64) (< (int %) 91)) x )))","user":"56afb527e4b061e3ca319ad7"},{"problem":29,"code":"(fn [n] (apply str (re-seq #\"[A-Z]+\" n)))","user":"5616c78ee4b06b1bb2182a07"},{"problem":29,"code":"#(apply str (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) (seq %)))","user":"60538924e4b04c8f2157d153"},{"code":"(fn [s]\n  (apply str \n    (for [c s :when \n      (and \n        (>= (int c) (int \\A)) \n        (<= (int c) (int \\Z)))] c)))","problem":29,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [s] (apply str (filter #(. Character isUpperCase %) s) ) )","problem":29,"user":"5086ca15e4b004985b776e62"},{"code":"reduce #(do (if (Character/isUpperCase %2) (str %1 %2) %1)) \"\"","problem":29,"user":"51ca15bfe4b09ce160bef5b8"},{"problem":29,"code":"(fn [a] (apply str(filter #(Character/isUpperCase %)a)))","user":"57b8f784e4b0fbc9809a27ea"},{"code":"(fn [v] (apply str (filter #(Character/isUpperCase %) v)))","problem":29,"user":"4e31c695535deb9a81d77f20"},{"problem":29,"code":"(fn [arg] (apply str(filter #(Character/isUpperCase %) arg)))","user":"5cc092d1e4b0ccb061962790"},{"problem":29,"code":"(fn [cs]\n  (apply str (reduce \n    (fn [total ch]\n      (if (Character/isUpperCase ch)\n          (conj total ch)\n          total\n      )\n    ) [] cs\n  ))\n)","user":"59e0f839e4b08badc2a0c502"},{"code":"(fn [a] (clojure.string/replace a #\"[^A-Z]\" \"\"))","problem":29,"user":"4ff3e771e4b0678c553fc356"},{"code":"(fn [wrd]\n  (apply str (rest (conj (re-seq #\"[A-Z]+\" wrd) [] ))))","problem":29,"user":"4f98da04e4b0dcca54ed6cf7"},{"code":"(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"5298c83de4b02ebb4ef75064"},{"problem":29,"code":"(fn keepCaps [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":29,"code":"(fn [s]\n  (->> s\n  (filter #(Character/isUpperCase %))\n  (apply str)))","user":"5f597522e4b0a0bc16850a9e"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter #(= 0 (compare (str %) (clojure.string/upper-case %)))\n                 (filter #(re-matches #\"[a-zA-Z]\" (str %)) s))))","user":"57233cc8e4b0c5bde472c0e1"},{"problem":29,"code":"(fn [s]\n   (let [up (vec (re-seq #\"[a-zA-Z]\" (clojure.string/upper-case s))) \n         orig (vec (re-seq #\"[a-zA-Z]\" s))]\n     \n     (apply str (reduce (fn [acc item]\n               (let [u (get up item)\n                     o (get orig item)]\n                 (print u \"-\" o)\n                 (if (= u o) \n                   (conj acc o)\n                   acc)))\n             [] (range (count up))))))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":29,"code":"(fn [word]\n  (apply str (filter #(Character/isUpperCase %) (vec word))))","user":"55df5feae4b050e68259b3f1"},{"code":"(fn [lst]\n  (apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) lst)))","problem":29,"user":"5347870be4b084c2834f4a4b"},{"code":"(fn [st]\n  (clojure.string/replace st #\"[a-z,0-9,$#*&() !]\" \"\"))","problem":29,"user":"53415755e4b00652c8746ecd"},{"problem":29,"code":"(fn [a] (apply str (filterv #(Character/isUpperCase %) (seq a))))","user":"5e980583e4b0157ca96647d5"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (filter #(not= 0 (compare (str %) (clojure.string/lower-case (str %))))\n                 (str s))))","user":"574abbfbe4b02ea114799200"},{"problem":29,"code":"(fn cap [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )","user":"56f18d0ce4b04a395b9a0496"},{"problem":29,"code":"(fn get-the-caps [coll] (apply str (re-seq #\"[A-Z]\" coll)))","user":"573940e3e4b0cd1946bd106b"},{"code":"(comp clojure.string/join (partial re-seq #\"[A-Z]+\"))","problem":29,"user":"520f46f9e4b0101e4be6fcee"},{"problem":29,"code":"(fn [s] (->> s seq (filter #(Character/isUpperCase %)) clojure.string/join))","user":"606a70a5e4b069485764ddf2"},{"problem":29,"code":"(fn [s]\n   (apply str (re-seq #\"[A-Z]\" s)))","user":"5195fadee4b04c0af7ff3c11"},{"problem":29,"code":"(fn [s] (apply str (filter (comp #(and (> % 64) (< % 91)) int) (seq s))))","user":"52475451e4b05ef8e38e6362"},{"problem":29,"code":"#(apply str (filter (fn [s] (java.lang.Character/isUpperCase s)) (seq %)))","user":"55b77c7ce4b01b9910ae29a3"},{"problem":29,"code":"(fn capital-letters\n  [string]\n  (apply str(filter #(Character/isUpperCase %) string)))","user":"5db1e852e4b010eb3c36cd0a"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [x] (some #(= x %) \n                                     (map char (range (int \\A) (inc (int \\Z)))))) s)))","user":"590cc457e4b047aa04b199f4"},{"code":"#(apply str (re-seq #\"[A-Z]\"  %1))","problem":29,"user":"4e8de3a2535d65386fec213d"},{"problem":29,"code":"(fn [s]\n  (->> s (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))) (apply str)))","user":"5032748ae4b0e78df07b092f"},{"problem":29,"code":"(fn\n  [word]\n  (apply str\n   (remove\n    #(or\n    (< (int %) 65)\n    (> (int %) 90))\n    word)))","user":"543f1765e4b032a45b86935a"},{"problem":29,"code":"(comp #(apply str %) #(re-seq #\"[A-Z]+\" %))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn [s] \n  (clojure.string/join \n    (filter #(Character/isUpperCase %) (seq s))\n  )\n)","problem":29,"user":"508fd6bae4b0ea685a20f76b"},{"problem":29,"code":"(fn [coll]\n  (reduce (fn [a b]\n            (str (when (or (string? a) (java.lang.Character/isUpperCase a)) a)\n                 (when (java.lang.Character/isUpperCase b) b))) coll))","user":"54f03f8ce4b024c67c0cf891"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %1) x)))","user":"538f89bbe4b0b51d73faae8f"},{"problem":29,"code":"(fn [wrd] (apply str (re-seq #\"[A-Z]+\" wrd)))","user":"5953949be4b066ee0a44aeea"},{"problem":29,"code":"(fn [string]\n  (apply str (filter (set (map char (range 65 91))) string)))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"code":"(fn just-caps [x]\n  (let [uppers (reduce (fn [a b] (conj a b)) #{} (map char (range 65 91)))]\n    (apply str (filter #(contains? uppers %) x))))","problem":29,"user":"4e7f51eb535db966e863cc3f"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z!,789$#*&\\(\\ ]\" \"\")","user":"5eedfc62e4b07c55ae4a050e"},{"problem":29,"code":"#(clojure.string/replace % #\"(g?)[^A-Z]\" \"\")","user":"5787ce76e4b0ebec4cfb750e"},{"problem":29,"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]*\" s)))","user":"590253e3e4b0438e51c2d055"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" % ))","user":"5aba34c5e4b073f1774426a3"},{"problem":29,"code":"(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq x))))","user":"54e3bd3fe4b024c67c0cf7e0"},{"problem":29,"code":"(fn [string]\n(clojure.string/join \"\" (filter #(Character/isUpperCase %) string)))","user":"59e63a2ce4b08badc2a0c569"},{"code":"(fn [c] (apply str ( filter #(Character/isUpperCase %) c)))","problem":29,"user":"4fa96e80e4b081705acca1df"},{"problem":29,"code":"(fn [xs]\n  (apply str (filter (fn [c] (and\n                   (>= (int c) 65)\n                   (<= (int c) 90)))\n          xs)))","user":"574ef99ae4b02ea114799250"},{"code":"(fn only-caps [xs] (apply str (#(re-seq #\"[A-Z]\" %) xs)))","problem":29,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn just-the-caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"51177fbce4b0e0897831a60b"},{"problem":29,"code":"(fn [string] (reduce (fn [x y] (str x y)) \"\" (re-seq #\"[A-Z]+\" string)))","user":"56152a26e4b05f002753dfc1"},{"code":"(fn jn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"5195b8cce4b04c0af7ff3c08"},{"code":"(fn [s]\n  (apply str \n    (filter #(and (>= (int %) 65) (<= (int %) 90))\n            (map char s))))","problem":29,"user":"4fd0d058e4b04c3a95aa0408"},{"problem":29,"code":"(fn[x] (\n         apply str (\n              filter (fn[xs] ( and (Character/isLetter xs)\n                         (= (str xs) (clojure.string/upper-case xs))\n                         )\n                       ) x\n                     )\n         )\n   )","user":"58ec5e86e4b056aecfd47d5f"},{"problem":29,"code":"(fn\n      [s]\n(clojure.string/replace s #\"\\p{javaLowerCase}|\\p{javaWhitespace}|\\W|\\d\" \"\")       )","user":"5683b67ce4b0945ebc182a9f"},{"problem":29,"code":"(fn[mystr] (apply str (filter #(Character/isUpperCase %) mystr)))","user":"5e4375e7e4b01d43a70e8e73"},{"problem":29,"code":"(fn [s]\n  (apply str(filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))","user":"5b227f5ae4b03cfeda66ed63"},{"problem":29,"code":"(fn[s] (apply str ((fn[y] ( filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z) ) ) y)) s )))","user":"54651ef5e4b01be26fd746d5"},{"problem":29,"code":"#(loop [data %\n        res []]\n  (if (empty? data)\n    (apply str res)\n    (recur\n      (rest data)\n      (if (and\n              (<= (int \\A) (int (first data)))\n              (<= (int (first data)) (int \\Z))\n          )\n          (conj res (first data))\n          res\n      )\n    )\n  )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":29,"code":"#(apply str (filter (fn [c] (<= 65 (int c) 90)) %))","user":"5d9475e9e4b0d3f9b434ad26"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) s)))","user":"514a3fa5e4b0829bd132edb6"},{"problem":29,"code":"(fn [word]\n  (reduce (fn [acc x]\n            (if (Character/isUpperCase x)\n              (str acc x)\n              (str acc \"\")))\n          \"\"\n          word))","user":"60cebbd3e4b0e0fa5f1b4334"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (into [] x))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [s]\n    (clojure.string/join (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"4f4023d9e4b0e243712b1fa9"},{"problem":29,"code":"(fn [w] (apply str (filter (fn [c] (some #(= % c) (into #{} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))) w)))","user":"572b73d0e4b0cd1946bd0f3a"},{"code":"(fn [x] (reduce str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq x))))","problem":29,"user":"522454f4e4b01819a2de42d3"},{"problem":29,"code":"(fn\n  [s]\n  (apply str\n    (filter\n      #(and (= (str %) (clojure.string/upper-case (str %))) (Character/isLetter %))\n      s)))","user":"5ffee617e4b074f607df6605"},{"problem":29,"code":"(fn caps [s] \n  (clojure.string/join \n   (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)\n   )\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn\n   [string]\n   (apply str (re-seq #\"[A-Z]+\" string)))","problem":29,"user":"52d39acce4b099d49816f0c7"},{"code":"(fn [s] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s)))","problem":29,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"(fn [x]\r\n  (reduce str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"508453abe4b0c98812d07891"},{"problem":29,"code":"(fn [s]  \n    (-> (map #(re-matches #\"[A-Z]\" (str %)) s)\n        clojure.string/join))","user":"5a8fd113e4b05369db4d2542"},{"problem":29,"code":"(fn [string]\n  (reduce (fn [acc cur]\n            (if (Character/isUpperCase cur)\n              (str acc cur)\n              acc))\n          \"\"\n          string))","user":"58e45a2ce4b056aecfd47c69"},{"problem":29,"code":"(fn fstr [s]\n  (cond\n   (= s '()) nil\n   (Character/isUpperCase\n    (first s))\n   (str (first s) \n        (fstr (rest s)))\n   :else (fstr (rest s))))","user":"58138439e4b0f478707a0611"},{"problem":29,"code":"(fn [string]\n  (->> string\n       (re-seq #\"[A-Z]\")\n       (apply str)))","user":"5422c959e4b01498b1a71ac7"},{"code":"(fn[n] (apply str (re-seq #\"[A-Z]+\" n)))","problem":29,"user":"4f0f1599535d0136e6c2232f"},{"problem":29,"code":"(fn [s] (apply str (filter #(< 64 (int %) 91) (seq s))))","user":"57a9e274e4b0b8559636fc5d"},{"problem":29,"code":"(fn [seq] (clojure.string/join (re-seq #\"[A-Z]\" seq)))","user":"5d662fb5e4b0db5d338d15e1"},{"code":"(fn [text] (apply str (filter #(let [s (str %)] (and (= s (.toUpperCase s)) (not (= s (.toLowerCase s))))) text)))","problem":29,"user":"513a4babe4b067e25a345eca"},{"code":"(fn [s] (apply str (filter (comp (partial re-matches #\"[A-Z]\") str) (seq s))))","problem":29,"user":"4e3f595d535dc968683fc498"},{"problem":29,"code":"(fn [s]\n  (reduce str \n          (filter #(Character/isUpperCase %) \n                  s)))","user":"5891bddce4b00487982d5201"},{"code":"(fn take-upper-case [string]\n  (let [is-upper-case #(Character/isUpperCase %)]\n    (apply str (filter is-upper-case (seq string)))))","problem":29,"user":"527aba40e4b03e8d9a4a7565"},{"problem":29,"code":"(fn [s]\n  (apply str\n   (filter #(and (>= (int %) 65) (<= (int %) 90))\n  s)))","user":"54651faee4b01be26fd746d6"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(and (Character/isUpperCase %) (Character/isLetter %)) s)))","user":"59c8c9bee4b0a024fb6ae567"},{"problem":29,"code":"(fn cap-getter\n  ([string] (cap-getter string \"\") )\n  ([string newString] \n   (if (empty? string)\n     newString\n     (cap-getter (rest string) (if (re-matches #\"[A-Z]\" (str (first string)))\n                                 (str newString (first string))\n                                 newString\n                                 ) \n                 )\n     ) \n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":"(fn [s]\n    (apply str\n\t\t  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4fb57e06e4b081705acca2bf"},{"problem":29,"code":"#(apply str (filter (fn fup [x] (Character/isUpperCase x)) (seq %)))","user":"55df2752e4b050e68259b3ed"},{"problem":29,"code":"(fn [text] \n  (apply str \n         (filter #(Character/isUpperCase %) text)\n   )\n  )","user":"59b8ee96e4b0a024fb6ae3c0"},{"code":"(fn [st]\n  (apply str\n    (filter #(Character/isUpperCase %) st)))","problem":29,"user":"506929ffe4b01dc6af13f82b"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (vec x))))","user":"5a8d55a8e4b05369db4d2514"},{"problem":29,"code":"(fn [x]\n(apply str (filter #(and (= (str %) (clojure.string/upper-case %)) (not=(clojure.string/upper-case %) (clojure.string/lower-case %))) x ))\n  )","user":"55252392e4b0882d96d091cc"},{"problem":29,"code":"(fn [arg] (apply str (re-seq #\"\\p{Upper}\" arg )))","user":"567d18c9e4b05957ce8c61c4"},{"code":"#( apply str (re-seq #\"[A-Z]\" % ))","problem":29,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":29,"code":"(fn [x]\n  (loop [i 0 r \"\"]\n    (if (< i (count x))\n      (if (and  (< 64 (int (nth x i)))  (> 91 (int (nth x i))   ))\n        (recur (inc i) (str r (nth x i)))\n        (recur (inc i) r)\n        )\n      r\n\n      )))","user":"5f73000ce4b02876ed9fd094"},{"code":"(fn caps-reseq\n  [s] {:pre [(string? s)]}\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))","problem":29,"user":"4fc6305de4b0ee37620e180b"},{"problem":29,"code":"(fn [instring]\n  (clojure.string/replace instring #\"\\p{Lower}|\\W|\\d\" \"\"))","user":"55fc838be4b0f488688e0674"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] ((complement empty?) (drop-while (partial not= x) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))) %))","user":"5a5be1ece4b0512ff01cd90f"},{"problem":29,"code":"(fn filter-for-caps [s]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn [x] (apply str (filter #(. java.lang.Character isUpperCase %) x)))","problem":29,"user":"527cd633e4b0757a1b17136f"},{"problem":29,"code":"(fn [str] (clojure.string/join (filter #(Character/isUpperCase %) str)))","user":"56165702e4b06b1bb2182a02"},{"problem":29,"code":"(fn [s]\n   (clojure.string/join \"\" (filter #(Character/isUpperCase %) s))\n   )","user":"5cdd7157e4b05ee0cb31175b"},{"code":"(fn test-strings [x]\r\n  (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4f20c040e4b0d66497709fcb"},{"problem":29,"code":"(fn only-upper [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))","user":"59b7120fe4b05c620303ca3b"},{"problem":29,"code":"(fn all-caps\n  [string]\n  (apply str (re-seq #\"[A-Z]\" string)))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase  %) s)))","user":"58f273d9e4b08e1cf3471d01"},{"code":"(fn [s]\n  (apply str (map char (filter (fn [x] (and (> x 64) (< x 91)))\n                                                        (map int s)))))","problem":29,"user":"51ccc92ce4b02254fc79487a"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] (not (nil? (re-matches #\"[A-Z]\" (str x))))) (seq %)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn get-the-caps [string]\n  (apply str (filter #(Character/isUpperCase %1) (seq string))))","problem":29,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":29,"code":"(fn [s]\n  (apply str (filter\n   (fn [c] (and (>= (compare c \\A) 0)\n                (<= (compare c \\Z) 0)))\n   s)))","user":"5613c76ce4b05f002753dfa7"},{"code":"(fn [s]\n         (apply str (filter (fn [c] (Character/isUpperCase c)) s)))","problem":29,"user":"4edb314d535d10e5ff6f5317"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter  #(not (= (clojure.string/lower-case (str %)) (str %)) ) (seq x)) ))","user":"5979cd36e4b02382a38ad1d8"},{"problem":29,"code":"(fn filter-upper\n  [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))","user":"5b73e500e4b047b03b2036ba"},{"problem":29,"code":"(fn [a]\n  (clojure.string/join (filter #(Character/isUpperCase %) a)))","user":"54159032e4b01498b1a719f5"},{"problem":29,"code":"(fn [s] (let [result (re-seq #\"[A-Z]+\" s)] (apply str result)))","user":"52c2106fe4b07a9af5792374"},{"code":"(fn [s] \n           (apply \n            str\n            (remove\n             (fn [c] \n               (= (str c) (clojure.string/lower-case c)))\n             s)))","problem":29,"user":"529f5a23e4b04e0c58e87baa"},{"code":"#(apply \n\tstr \n    (for [c %\n    \t  :when (and (< 64 (int c)) (> 91 (int c)))]\n         c))","problem":29,"user":"50e3cf55e4b01912b3285c45"},{"problem":29,"code":"(fn cap\n  [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"#(apply str (filter (fn [c] \n          (and \n            (= (str c) (.toUpperCase (str c)))\n            (not= (.toLowerCase (str c)) (.toUpperCase (str c))))) %))","problem":29,"user":"4fff72b6e4b0678c553fc400"},{"code":"(fn find-caps[s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4edd4b77535d10e5ff6f5328"},{"code":"#(clojure.string/replace % #\"[^A-Z]\" \"\" )","problem":29,"user":"4ff01fa9e4b0678c553fc321"},{"problem":29,"code":"(fn [a-str] (apply str (filter #(Character/isUpperCase %) (seq a-str))))","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":29,"code":"#(loop [res [] ens (into [] %) cnt 0]\n   (if (= cnt (count ens))\n     (apply str res)\n     (if (and (Character/isLetter (first ens)) (= (clojure.string/upper-case (str (first ens))) (str (first ens))))\n       (recur (conj res (first ens)) (rest ens) (int cnt))\n       (recur  res (rest ens) (int cnt))\n     )\n   )\n)","user":"55acb648e4b03311e7b73296"},{"problem":29,"code":"(fn [xs] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) xs)))","user":"54d03026e4b018d918be98de"},{"code":"(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":29,"code":"(fn [str1]\n  (reduce #(if (Character/isUpperCase %2)\n             (str %1 %2)\n             %1\n             ) \"\" str1)\n  )","user":"5b69529be4b0c6492753e786"},{"problem":29,"code":"(fn [s] (->>  s\n       (map int)\n       (filter #(>= % 65 ))\n       (filter #(<= % 90 ))\n       (map char)\n       (apply str)))","user":"5e856736e4b09a7a73c8bbd2"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(not (= % (clojure.string/lower-case %))) (clojure.string/split s #\"\"))))","user":"5e495e3fe4b043cd24807a4f"},{"problem":29,"code":"#(apply str (re-seq  #\"[A-Z]+\" %))","user":"59e337dae4b08badc2a0c52d"},{"problem":29,"code":"(fn [S] (clojure.string/join (filter #(Character/isUpperCase %) (seq S))) )","user":"5649615be4b0284900eef641"},{"problem":29,"code":"#(->> \n   % \n   (filter (fn [c] (Character/isUpperCase c)))\n   (apply str)\n)","user":"5aad79d9e4b073f177442578"},{"problem":29,"code":"(fn [in]  (apply str (re-seq #\"[A-Z]\" in) ))","user":"5735ac67e4b0cd1946bd102b"},{"problem":29,"code":"(fn [o] \n  (apply str (filter #(Character/isUpperCase %) o)))","user":"57de9169e4b0bd073c202454"},{"code":"(fn [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [stringy]\n  (clojure.string/join (re-seq #\"[A-Z]\" stringy)))","problem":29,"user":"51b89503e4b050a1176cd69a"},{"code":"(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"503d812ce4b06c4e0e1fa258"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [param] (Character/isUpperCase param)) %))","user":"5551bddae4b0deb715856def"},{"problem":29,"code":"(fn cappy [st]\n  (let [fil (partial contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z})]\n    (apply str (filter fil (seq st)))))","user":"59708e38e4b01722bebd4c65"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase ^char %) s)))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn m[x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e6a4641535d8ccf87e9feb9"},{"code":"#(apply str (filter (fn [x] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\L \\O \\W \\R \\Z} x)) %))","problem":29,"user":"52caeb25e4b071a8d36bd3e7"},{"problem":29,"code":"(fn [input] \n  (apply str (filter #(Character/isUpperCase %) input)))","user":"591cbc30e4b09b4ee5954c08"},{"problem":29,"code":"(fn [x]\n    (apply str(filter #(java.lang.Character/isUpperCase %) x)))","user":"566e5a03e4b0a866af6896d8"},{"problem":29,"code":"(fn [s](apply str (filter #(<= 65 (int %) 90) s)))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [s] (Character/isUpperCase s)) s)))","user":"5e178fbee4b00200644e3d57"},{"code":"(fn [input]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) input)))","problem":29,"user":"5166b716e4b060c690c1f4bf"},{"problem":29,"code":"(fn get-the-caps [x]\n    (apply str (filter (fn is-caps [x]\n  (not= (str x) (clojure.string/lower-case x))) (map char x))))","user":"5852801ee4b0b7285a6f4eb1"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %))\n          s)))","user":"5c03e927e4b0bdcf453d167b"},{"problem":29,"code":"#(reduce str (filter (fn [x] (<= 65 (int x) 90)) %))","user":"57b1b8c8e4b0fbc9809a2756"},{"problem":29,"code":"(fn up [x] (apply str(filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"57752a2de4b0979f89651613"},{"code":"(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))","problem":29,"user":"5328febee4b09d4e7a9b550d"},{"problem":29,"code":"(fn [s]\n  (apply str (map char (filter #(<= 65 % 90) (map int s)))))","user":"536d24ece4b0fc7073fd6e54"},{"code":"(fn getcaps [s]\n  ((fn cc [c]\n\t\t(if (= 0 (count c)) \"\"\n\t\t\t(str (first c) (cc (rest c)))))\n\t(re-seq #\"[A-Z]\" s)))","problem":29,"user":"4f566178e4b0a7574ea71820"},{"problem":29,"code":"(fn [y]\n  (apply str \n        (filter (set (map char (range 65 91))) \n                 y)\n        ))","user":"5642b939e4b08d4f616f5f1b"},{"problem":29,"code":"(fn caps [x] (apply str (filter #(Character/isUpperCase %) (seq x))))","user":"53b12c76e4b047364c04448a"},{"code":"(fn [x]\n  (apply str\n    (filter\n      #(and\n        (<= 0 (compare \\Z %))\n        (>= 0 (compare \\A %)))\n    x)))","problem":29,"user":"4f0f174c535d0136e6c22330"},{"code":"(fn upper? [string] (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52bebdbfe4b07a9af5792326"},{"code":"(fn \n  [value]\n  (apply str (filter #(Character/isUpperCase %) value)))","problem":29,"user":"52daf558e4b09f7907dd13c1"},{"code":"(fn caps [x]\n  (apply str\n    (re-seq #\"[A-Z]\" x) \n  )\n)","problem":29,"user":"4ffbc28ce4b0678c553fc3d4"},{"code":"#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (reverse(reverse %))))","problem":29,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn [string]\n  (apply str (filter\n                #(true? (Character/isUpperCase %)) string)))","problem":29,"user":"4fc8769be4b0ee37620e1833"},{"problem":29,"code":"(fn caps [s]\n  (apply str\n         (filter (fn [c] (<= 65 (int c) 91)) s)))","user":"547f8736e4b0c51c1f4d731d"},{"problem":29,"code":"(fn [s] (apply str(filter #(Character/isUpperCase %) (seq s))))","user":"5df79420e4b0a607a9a45c9a"},{"problem":29,"code":"(fn [in] (apply str (filter #(Character/isUpperCase %) in)))","user":"54010363e4b0de5c4184861d"},{"code":"(fn [s](reduce str(re-seq #\"[A-Z]\" s)))","problem":29,"user":"505d1b01e4b0e6aca564be04"},{"problem":29,"code":"(fn [string]\n  (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]\" string)))","user":"566ca8d6e4b0a866af6896bf"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (partial re-matches #\"[A-Z]+\") (map str %)))","user":"539e79d2e4b0ca733b974489"},{"problem":29,"code":"(fn [s]\n   (apply str (filter #(not= (.toLowerCase (str %)) (str %)) s)))","user":"54393c3fe4b032a45b86931a"},{"problem":29,"code":"(fn [x] (apply str (filter #(not= (clojure.string/lower-case (str %)) (str %)) x)))","user":"5dc9ae96e4b02f9375f4e1ea"},{"code":"(fn [xs]\n  (clojure.string/join\n   (filter (fn [c] (Character/isUpperCase c)) xs)))","problem":29,"user":"5097cd83e4b00ad8bab4e974"},{"code":"(fn [s]\n  (apply str\n         (map #(first %)\n              (filter #(not= (first %) (last %))\n                      (map (fn [x y] [x y])\n                           s (.toLowerCase s))))))","problem":29,"user":"52c25645e4b07a9af579237d"},{"code":"#(->> %\n     (re-seq #\"[A-Z]\")\n     (apply str))","problem":29,"user":"52747090e4b03e8d9a4a74a5"},{"problem":29,"code":"(fn [strn] (apply str (filter #(Character/isUpperCase %) strn)))","user":"57eb38dbe4b0bfb2137f5b5e"},{"code":"(fn [coll] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) coll)))","problem":29,"user":"51dd55dae4b0c33a4e1da404"},{"problem":29,"code":"(fn\n  only-capitals\n  [s]\n  (->>\n    s\n    (filter #(Character/isUpperCase %) ,,,)\n    (reduce str \"\" ,,,)))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn getCaps2 [text]\n (apply str (re-seq #\"[A-Z]\" text)))","problem":29,"user":"4fc4f347e4b081705acca35d"},{"problem":29,"code":";(fn [s]\n;  (let [chrs (filter #(<= 65 (int %) 90) s)]\n;    (apply str chrs)))\n\n(fn [s] (apply str (filter #(<= 65 (int %) 90) s)))","user":"58c66990e4b021aa9917ed53"},{"problem":29,"code":"(fn [xs] (->> xs\n               (filter #(Character/isUpperCase %))\n               (apply str)))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":29,"code":"#(apply str (keep (fn [achar] (if (and (< (int achar) 91) (> (int achar) 64)) achar)) (seq %)))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [xs]\n  (let [ok (set (map char (range (int \\A) (+ 26 (int \\A)))))]\n    (apply str (filter #(ok %) xs))\n    )\n  )","problem":29,"user":"4f2ef48be4b0d6649770a06c"},{"problem":29,"code":"#(apply str  (re-seq #\"[A-Z]+\" %))","user":"5b19cdf2e4b03cfeda66ecbf"},{"problem":29,"code":"#(apply str (filter (fn [ch] (Character/isUpperCase ch)) %) )","user":"5832be57e4b089d5ab817c86"},{"problem":29,"code":"#(apply str (filter (fn [chr] (and (>= (int chr) 65) (<= (int chr) 90))) (seq %)))","user":"5ddd3cbee4b0948ae9d9adc3"},{"problem":29,"code":"(fn caps [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))","user":"58ac1135e4b0005cfeb1a73f"},{"problem":29,"code":"#(apply str \n        (re-seq #\"[A-Z]\" %))","user":"5a99b766e4b0d174b936c7a8"},{"problem":29,"code":"(fn [lst] \n  (reduce str \n          (re-seq #\"[A-Z]\" lst)))","user":"5c787131e4b0fca0c1622825"},{"problem":29,"code":"(fn f[s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"54ce3790e4b057c6fda3a2ab"},{"problem":29,"code":"(fn\n  [input]\n  (apply str (re-seq #\"[A-Z]\" input)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":29,"code":"#(apply str (for [ch % :when (and (> (int ch) 64) (< (int ch) 91))] ch))","user":"57b6555be4b0fbc9809a27bf"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s))) \n;matching only upper case letter and return them. \n;ignores other characters / digits","user":"59369515e4b02506e01a297e"},{"problem":29,"code":"#(->>\n  (filter (fn [x] (and (Character/isLetter x)\n                       (= (clojure.string/upper-case x) (str x)))) %)\n  (apply str))","user":"5aa098fae4b0d174b936c82e"},{"code":"(fn [s] \n  (let [upper (map char (range 65 91))\n        contains-char (fn [c] (some #(= c %) upper))]\n   (apply str (filter contains-char s))))","problem":29,"user":"4f1c2a3a535d64f603146480"},{"problem":29,"code":"#(clojure.string/join (into [] (re-seq #\"[A-Z]\" %)))","user":"5915a0a5e4b09b4ee5954b73"},{"code":"(fn [x]\n  (clojure.string/upper-case\n\t\t(apply str \n       (re-seq #\"[A-Z]\" x))))","problem":29,"user":"511060fae4b04c71fce993f1"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(< 64 (int %) 91) s)))","user":"55895eade4b059ccff29b202"},{"code":"(fn\n   [string]\n   (apply str \n          (filter #(some #{%} (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) string)))","problem":29,"user":"524da51ee4b0a16e35cf6df4"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (> 91 (int %)) (< 64 (int %))) x)))","user":"5425d454e4b01498b1a71b13"},{"code":"(fn [listo]\r\n    (apply str (for [x listo] \r\n        (when\r\n            (and\r\n                (= (str x) (clojure.string/capitalize (str x))) \r\n                (not (clojure.string/blank? (str x)))\r\n                (not (= x \\,))\r\n                (not (= x \\#))\r\n                (not (= x \\!))\r\n                (not (= x \\@))\r\n                (not (= x \\$))\r\n                (not (= x \\%))\r\n                (not (= x \\^))\r\n                (not (= x \\&))\r\n                (not (= x \\*))\r\n                (not (= x \\())\r\n                (not (and (> (int x) 47) (< (int x) 58))))\r\n            (str x)))))","problem":29,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":29,"code":"(fn [input] (clojure.string/join (filter #(= (list %) (seq (char-array (clojure.string/upper-case %)))) (filter #(Character/isLetter %) (seq input)))))","user":"60b8f098e4b0e0fa5f1b425f"},{"code":"#(apply str (filter (fn [ch] (Character/isUpperCase ch)) %))","problem":29,"user":"4fcad14ce4b0ee37620e1856"},{"problem":29,"code":"(fn [x] (->> x (filter #(Character/isUpperCase %)) (clojure.string/join \"\")))","user":"5df175bce4b03c219ef1a34d"},{"problem":29,"code":"#(->> %\n       (filter (fn [letter] (Character/isUpperCase letter)))\n       (clojure.string/join \"\"))","user":"5baa5f53e4b0a20761a23459"},{"code":"(let [cap? (fn [c] (and (>= c 65) (<= c 90)))]\n  (fn [s]\n    (apply str (filter #(cap? (int %)) s))))","problem":29,"user":"517d1018e4b0f5e87c18f25e"},{"problem":29,"code":"(fn [string]\n\t(apply str (filter #(Character/isUpperCase %) string)))","user":"55d6a2ebe4b0e31453f64a9a"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z,! $#(*&\\d]\" \"\")","user":"5c6e7cc1e4b0fca0c1622752"},{"problem":29,"code":"(fn [ss](\n           apply str \n           (filterv #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %)\n                    ss)))","user":"55aba8f4e4b03311e7b7328c"},{"problem":29,"code":"(fn get-the-caps [input]\n  (apply str (re-seq #\"[A-Z]\" input)))","user":"5dba063ee4b010eb3c36cd5c"},{"problem":29,"code":"(fn getcaps [str-arg]\n  (apply str (filter #(Character/isUpperCase %) str-arg)))","user":"557e56aae4b05c286339e0d5"},{"problem":29,"code":"(fn\n  [mystring]\n  (clojure.string/join (filter #(and (Character/isLetter %) (= % (first (clojure.string/upper-case %)))) mystring)))","user":"542098afe4b01498b1a71aa7"},{"code":"(fn [x]\n  (reduce str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4f4c8faae4b03ad3f0c10c93"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":29,"code":"(fn [s]\n  (let [caps (into #{} (map char (range (int \\A) (inc (int \\Z)) )))]\n    (apply str (filter #(caps %) (char-array s)))))","user":"553527ede4b09218d5f44fab"},{"code":"(fn f [x]\n  (apply str\n    (filter #(and (>= (int %) (int (first \"A\")))\n        (<= (int %) (int (first \"Z\")))) x)))","problem":29,"user":"4eaed3a7535d7eef30807328"},{"problem":29,"code":"#(apply str (remove (fn [x]  (= (str x) (clojure.string/lower-case x))) %))","user":"58ffbabce4b0438e51c2d002"},{"problem":29,"code":"(fn [x] (apply str \n               (reverse \n                (filter #(not= (str %) (clojure.string/lower-case %)) \n                        (into () x)))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn f [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"516ed04ee4b06aac486e5b30"},{"problem":29,"code":"(fn [string]\n (clojure.string/join (re-seq #\"[A-Z]\" string))\n  )","user":"58775496e4b01531a375ea9a"},{"problem":29,"code":"(fn [x] (apply str (#(re-seq #\"[A-Z]\" %) x)))","user":"5a533cc0e4b05d388ecb6c09"},{"problem":29,"code":"#(apply str (for [x %1 :when(java.lang.Character/isUpperCase x)] x))","user":"55efc44ee4b066087aa9453e"},{"code":"(fn uppercase-filter [word] \n         (apply str (filter #(Character/isUpperCase %) (seq word))))","problem":29,"user":"5038f8d2e4b088a6a14ca75f"},{"code":"(fn [s] \n  (apply str \n    (filter \n      #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4ed152d5535d44c135fd68cc"},{"problem":29,"code":"(fn func [str]\n  (clojure.string/join\n    (re-seq #\"[A-Z]\" str)\n    )\n  )","user":"5bba6571e4b0a20761a235e9"},{"problem":29,"code":"(fn [s] (apply str (filter #(not= (str %1)\n                                 (clojure.string/lower-case %1))\n                          (seq s))))","user":"57280b92e4b0c5bde472c14e"},{"problem":29,"code":"(fn [x]\n  (apply str\n         (filter\n          (fn [y]\n            (Character/isUpperCase y))\n          x)))","user":"58d4f44ee4b03c36ff7e594f"},{"code":"(fn [s] (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ddc620d535d02782fcbea06"},{"problem":29,"code":"(fn [x] (->> x (filter #(and (>= (int %) 65) (<= (int %) 90)))(apply str)))","user":"59135c11e4b0163c97b36f02"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (some #(= % c) (map char (range 65 91)))) s)))","user":"543bb568e4b032a45b869334"},{"code":"(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x))\n  )","problem":29,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(comp (partial apply str) (fn [x] (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) (seq x))))","problem":29,"user":"524740e7e4b05ef8e38e635d"},{"problem":29,"code":"#(apply str (remove empty? (re-seq #\"[A-Z]*\" %)))","user":"5ef18431e4b07c55ae4a0529"},{"problem":29,"code":";#(clojure.string/join \n;  (filter \n;  \t(fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) %))\n\n; (fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))\n; #(clojure.string/join (re-seq #\"[A-Z]\" %))\n; (fn [s] (reduce str (filter #(Character/isUpperCase %) s)))\n; (fn [s] (reduce str (re-seq #\"[A-Z]\" s)))\n; #(reduce str (re-seq #\"[A-Z]\" %))\n\n; (comp (partial reduce str) (partial filter #(Character/isUpperCase %)))\n; (comp (partial reduce str) #(re-seq #\"[A-Z]\" %))\n; (comp (partial reduce str) (partial re-seq #\"[A-Z]\"))\n#(->> % (re-seq #\"[A-Z]\") (reduce str))","user":"591d182ee4b09b4ee5954c10"},{"code":"(fn caps [x] \n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n)","problem":29,"user":"52c7fce9e4b0c2d177d6212a"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x ] (Character/isUpperCase x)) %))","user":"59f90e6ae4b0ca45a743a337"},{"code":"#(apply str (for [c (seq %1) :when (Character/isUpperCase c)] c))","problem":29,"user":"4ebbb6bc535dfed6da9c6d71"},{"code":"(fn [x] (apply str (filter #(some (partial = %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))","problem":29,"user":"523d02b0e4b0dbf0c3017289"},{"code":"(fn [msg] (apply str (filter #(Character/isUpperCase %) msg)))","problem":29,"user":"508b95a0e4b0be79e5b189c6"},{"code":"#(apply str (filter (fn [x] (and (<= 0 (compare \\Z x)) (>= 0 (compare \\A x)))) (seq %)))","problem":29,"user":"50c5546de4b0951b67b28c18"},{"problem":29,"code":"(fn [string] \n  (apply str (filter \n   #(<= (int \\A) (int %) (int \\Z)) \n   string)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn [s]\n\t(clojure.string/replace s #\"[^A-Z]\" \"\"))","problem":29,"user":"538c6db7e4b0b51d73faae5a"},{"problem":29,"code":"(fn [y] (clojure.string/join \"\" (filter (fn[x] (every? #(Character/isUpperCase %) x)) (clojure.string/split y #\"\"))))","user":"605f92bae4b03746e80ebf62"},{"problem":29,"code":"(fn [x]\n (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x))\n  )","user":"5d6042f2e4b0c9e5857d5006"},{"problem":29,"code":"(fn [input-string] \n         (apply str (filter #(Character/isUpperCase %) (seq input-string))))","user":"5712854ce4b07c98581c3a89"},{"problem":29,"code":"(fn [string]\n                     (let [caps (->> [\\A \\Z]\n                                     (map int)\n                                     ((fn [coll]\n                                       [(first coll) (inc (nth coll 1))]))\n                                     (apply range)\n                                     (map char))]\n                       (->> string\n                            (filter (set caps))\n                            (apply str))))","user":"5de0b844e4b0948ae9d9adea"},{"code":"(fn caps [s]\n  (apply str (seq (map char (filter #(and (>= % (int \\A)) (<= % (int \\Z))) (map int (seq s)))))))","problem":29,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"code":"(fn[x]\n  (apply str (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))","problem":29,"user":"529c6995e4b04e0c58e87b61"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))\n\n; original attempt:\n; (fn [x]\n;   (apply str (filter \n;                #(= (clojure.string/upper-case %) (str %))\n;                (seq x))))","problem":29,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":29,"code":"(fn filter-upper [s] (apply str (filter #(and (<= 0 (compare % \\A)) (>= 0 (compare % \\Z))) s)))","user":"5654e024e4b0f9d632dd848d"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(-> (re-matches #\"[A-Z]\" (str %1)) nil? not) x)))","user":"55e246c2e4b050e68259b431"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s )))","user":"54df2609e4b024c67c0cf7a9"},{"problem":29,"code":"(fn [string] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" string)))","user":"5c75a30ee4b0fca0c16227df"},{"problem":29,"code":"(fn [a]\n  (->> a\n  \t(filter #(and (> 91 (int %)) (< 64 (int %))))\n    (apply str)))","user":"5935151ee4b072a2710fd084"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(<= 65 (int %) 90) (seq s))))","user":"54497569e4b032a45b8693d2"},{"problem":29,"code":"(fn [x]                                                               \n  (loop [ ltrs (seq x) acc \"\" ]                                                 \n    (if (= 0 (count ltrs))                                                      \n      ;; then                                                                   \n      acc                                                                       \n      ;; else                                                                   \n      (recur (rest ltrs)                                                        \n        (if (Character/isUpperCase (first ltrs))                                \n          ;; then                                                               \n          (str acc (first ltrs))                                                \n          ;; else                                                               \n          acc                                                                   \n        )))))","user":"564cc055e4b0284900eef676"},{"code":"(fn ups [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))))","problem":29,"user":"52dcd378e4b09f7907dd13d6"},{"code":"(fn getcaps[thestring]\r\n  (apply str (map (fn[letter] (if-not (= (str letter) (.toLowerCase (str letter))) (str letter) )) thestring))\r\n  )","problem":29,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":29,"code":"(fn get-caps[s] \n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"5f06eaede4b0cf489e8d7f55"},{"problem":29,"code":"(fn caps\n  [cad]\n  (apply str (re-seq #\"[A-Z]\" cad)))","user":"57f81534e4b0d3187e900915"},{"problem":29,"code":"(fn [s] (reduce str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))","user":"57aa290de4b0b8559636fc65"},{"problem":29,"code":"(fn upper [x] \n   (clojure.string/replace \n   (clojure.string/join\n   (if (empty? (rest x))\n    (if (= (clojure.string/upper-case (first x)) (str (first x)))\n      (cons (first x) (rest x))\n    ) \n    (if (= (clojure.string/upper-case (first x)) (str (first x)))\n      (cons (first x) (upper (rest x)))\n      (upper (rest x))\n    ))) #\"[^A-Za-z]+\" \"\"))","user":"5400e918e4b0de5c41848619"},{"code":"#(apply str (filter (set (map char (range 65 91))) %1))","problem":29,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"code":"(fn f [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"5149c2f1e4b0829bd132edb0"},{"problem":29,"code":"(fn [v] (apply str (filter #(Character/isUpperCase %) (seq v))))","user":"5593619ae4b0c79f6e1db93c"},{"problem":29,"code":"(fn [inp] (apply str (re-seq #\"[A-Z]\" inp)))","user":"534e60c2e4b084c2834f4ab2"},{"problem":29,"code":"#(apply str (filter \n  (fn [x] (let [z (int x)]\n            (and \n             (>= z (int \\A)) \n             (<= z (int \\Z)))))\n  %))","user":"5c56e264e4b0fb8c5ffd9a39"},{"code":"(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn [st]\n  (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) st)))","problem":29,"user":"4fe8e771e4b0547ebccb2431"},{"problem":29,"code":"#(apply str \n        (re-seq #\"[A-Z]+\" %))","user":"5aa4b961e4b0d174b936c888"},{"code":"#(clojure.string/join \"\" (filter (fn [x] (Character/isUpperCase x)) %))","problem":29,"user":"50992197e4b0cae2931060ae"},{"code":"(fn [st]\n  (let [caps\n    #{\\A, \\B, \\C, \\D, \\E, \\F, \\G, \\H, \\I, \\J, \\K, \\L, \\M, \\N, \\O, \\P, \\Q, \\R, \\S, \\T, \\U, \\V, \\W, \\X, \\Y, \\Z}\n    ]\n    (apply str (filter #(contains? caps %) st))))","problem":29,"user":"50ba5084e4b03e68e4411c7c"},{"code":"(fn [s]\n    (reduce (fn [e c]\n              (if (re-find #\"[A-Z]\" (str c))\n                (str e c)\n                e)) \"\" s))","problem":29,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn [l]\n  (apply str (remove nil? \n    (map #(re-find #\"[A-Z]\" (str %)) l))))","problem":29,"user":"4f0333f6535dcb61093f6a77"},{"problem":29,"code":"(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) word)))","user":"5dde6251e4b0948ae9d9add3"},{"code":"#(apply str (filter (fn [a] ((set (map char (range 65 91))) a)) %))","problem":29,"user":"4e68be01535d8ccf87e9fe88"},{"code":"(fn [word]\n  (clojure.string/join (filter\n    #(and \n      (= (clojure.string/upper-case %) (str %))\n      (not= (clojure.string/lower-case %) (str %)))\n    (seq word))))","problem":29,"user":"4e6fe3a6535d5021c1a89629"},{"problem":29,"code":"(fn get-upper [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"5b421edce4b02d533a91bc2c"},{"problem":29,"code":"(fn get-the-caps [s] (apply str (re-seq #\"[A-Z]\" (str s))))","user":"55231800e4b0882d96d091ad"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) string)))","user":"52718620e4b03e8d9a4a73f5"},{"problem":29,"code":"(fn [seq]\n      (apply str\n             (map char\n                  (filter #(and (<= 65 %) (<= % 90))\n                          (map int seq)))))","user":"5d4c4de9e4b0776584bd6f2f"},{"problem":29,"code":"#(->> %  (re-seq #\"[A-Z]\")  (apply str) )","user":"5dd69c8ce4b0948ae9d9ad83"},{"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase %1) coll)))","problem":29,"user":"4f40ccd9e4b0e243712b1fc0"},{"problem":29,"code":"(fn [data]\n  (apply str (re-seq #\"[A-Z]\" data)))\n\n ;; (fn [data]\n ;;  (clojure.string/join\n ;;   (filter #(and (<= (int %) (int \\Z))\n ;;                 (>= (int %) (int \\A)))\n ;;           data)))","user":"557b3f29e4b05c286339e0ac"},{"problem":29,"code":"(fn caps [word]\n  (cond\n    (= (count word) 1) (cond\n                         (Character/isUpperCase (first word)) [(first word)]\n                         :else [])\n    :else (cond\n            (Character/isUpperCase (first word)) (clojure.string/join \"\" (concat [(first word)] (caps (rest word)))) \n            :else (clojure.string/join \"\" (caps (rest word))))))","user":"5a39e36ce4b001c08efc0cbc"},{"code":"(fn \n  [s]\n  (clojure.string/replace s #\"[^A-Z]*\" \"\")\n  )","problem":29,"user":"528196e2e4b0757a1b171437"},{"problem":29,"code":"(fn [string]\n    (apply str (filter (fn [letter]\n                         (and (>= (compare (str letter) \"A\") 0)\n                              (>= (compare \"Z\" (str letter)) 0)))\n                       string\n                       )))","user":"5eb1a80ce4b00a66d4a951ff"},{"code":"#(apply str (filter (fn [x] (= 2r1000000 (bit-and (int x) 2r1100000))) %))","problem":29,"user":"51dd5d6fe4b0c33a4e1da406"},{"problem":29,"code":"(fn [s] (apply str (map char (filter (fn [x] (and (<= 65 x) (<= x 90))) (map int s)))))","user":"5a221881e4b0ff51aa4b32c0"},{"code":"(fn [lst]\n\t(apply str(filter #(Character/isUpperCase %) lst))\n\t)","problem":29,"user":"537d4a69e4b06839e8705e8a"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter #(java.lang.Character/isUpperCase %)\n                 s)))","user":"544b699ce4b0e39780006964"},{"problem":29,"code":"(fn only-uppercase [some-str]\n  (clojure.string/replace some-str #\"[abcdefghijklmnopqrstuvwxyz!',.$#()*&987 ]\" \"\"))","user":"5d6e5ec6e4b04d129b00f2c7"},{"problem":29,"code":"(\n  letfn [(upper? [x] (= 0 1))]\n  (fn [x] (apply str (filter #(Character/isUpperCase %) x)))\n)","user":"53bd6ad0e4b0d9a98559a6cf"},{"problem":29,"code":"(comp clojure.string/join filter) #(Character/isUpperCase %)","user":"5e3810ffe4b01d43a70e8db1"},{"code":"(fn [x]\r\n  (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) x )))","user":"53e8cefde4b036ad0777e48d"},{"code":"(fn [s]\r\n  (clojure.string/replace s #\"[^A-Z]\" \"\")\r\n  )","problem":29,"user":"4fa719c0e4b081705acca1bf"},{"code":"#(clojure.string/join (filter \n  (fn [c] (Character/isUpperCase c))\n  (seq %)))","problem":29,"user":"4fab1ea1e4b081705acca210"},{"problem":29,"code":"(fn [xs] \n  (let [matcher (re-matcher #\"[A-Z]\" xs)] \n    (loop [match (re-find matcher) result []]\n      (if match\n        (recur (re-find matcher) (conj result match))\n        (apply str (seq result))))))","user":"52aaabf7e4b0c58976d9ac68"},{"problem":29,"code":"(fn only-caps [aString]\n  (reduce str (filter #(Character/isUpperCase %) aString)))","user":"599e3677e4b0871e7608b809"},{"problem":29,"code":"(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) s)))","user":"5d1a92d6e4b0902706380e11"},{"problem":29,"code":"#(apply str (filter (fn [e] (Character/isUpperCase e)) %))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn [s](apply str \n  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f92709de4b0dcca54ed6cad"},{"problem":29,"code":"(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))","user":"54117417e4b01498b1a719c5"},{"code":"(fn [s]\n  (apply str\n    (filter \n       #(<= (int \\A) (int %) (int \\Z))\n     s)\n))","problem":29,"user":"533ea7e8e4b085b17e897d94"},{"problem":29,"code":"#(apply str (filter (fn [ch] ((complement =) (clojure.string/lower-case ch) (str ch))) (seq %)))","user":"5dc85f8ae4b02f9375f4e1da"},{"code":"(fn la [x] (reduce str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [s]\n  (apply str \n    (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"522a1248e4b0590a43906cf3"},{"problem":29,"code":"(fn [s]\n  (apply str (map char\n         (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"566888e4e4b04acd4f672ded"},{"problem":29,"code":"(fn [xs]\n  (clojure.string/join (filter #(apply <= (map int [\\A %1 \\Z])) xs)))","user":"5f37da09e4b0574c87022c5e"},{"code":"(fn [s] \n  (apply str \n    (filter #(not (nil? %)) \n      (map #(re-find #\"[A-Z]+\" (str %)) s))))","problem":29,"user":"4f60ed88e4b0defedf855fb2"},{"problem":29,"code":"(fn [x]\n  \t(apply str (filter #(Character/isUpperCase %) x)))","user":"55ec1048e4b0121d4835fdc3"},{"problem":29,"code":"(fn [coll]\n  (apply str (filter\n              \n              #(Character/isUpperCase %) coll )))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":29,"code":"(fn\n  [n]\n  (clojure.string/join \"\"\n                       (filter #(= (clojure.string/upper-case %) %)\n                               (re-seq #\"[a-zA-Z]\" n))))","user":"5da8e170e4b000c986472c29"},{"problem":29,"code":"(fn temp\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"5a3b5cfde4b001c08efc0cd4"},{"code":"(fn [string] (reduce str (filter (fn [x] (Character/isUpperCase x)) string)))","problem":29,"user":"4f2acb29e4b0d6649770a040"},{"problem":29,"code":"(fn dropLower[x]  \n\t\t(\n\t\t\tapply str (filter #(Character/isUpperCase %) (seq x))\n\t\t))","user":"548018ede4b0c51c1f4d7334"},{"code":"#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))","problem":29,"user":"502cb310e4b0532a782a5e38"},{"code":"(fn [x] (apply str (re-seq (re-pattern \"[A-Z]+\") x)))","problem":29,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":29,"code":"(fn [text] (clojure.string/join \"\" (filter #(Character/isUpperCase %) text)))","user":"547c2c6ce4b0c51c1f4d72e3"},{"problem":29,"code":"#(->> %1\n      seq\n      (filter (fn [x] (Character/isUpperCase x)))\n      clojure.string/join)","user":"54c611d1e4b045293a27f627"},{"code":"(fn [y] (apply str (filter (fn [x] (reduce #(or % %2) (for [i (vec \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")] (= i x)))) (vec y))))","problem":29,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [S] (apply str (filter (fn [C] (Character/isUpperCase C)) (seq S))))","problem":29,"user":"4fc52d79e4b081705acca386"},{"code":"(fn v [s] (\n\napply str ( (fn [s] (\n    let [l (vec s) caps (vec \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    ]\n    (filter (\n            fn [x] (\n                > (count (filter (fn [y] (= x y)) caps)) 0\n            )\n        ) l)\n    \n)) s))\n\n)","problem":29,"user":"4f03c039535dcb61093f6b5e"},{"code":"(fn [x] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq x))))","problem":29,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"(fn [sr ]\n  (apply \n    str \n    (filter \n      #(Character/isUpperCase %) \n      (seq sr))))","problem":29,"user":"4e93600b535dbda64a6f6b0e"},{"code":"#(apply str (filter \n  (fn[c](and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))","problem":29,"user":"4ec75829535d6d7199dd36e1"},{"code":"(fn [s] (clojure.string/join \"\" (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))","problem":29,"user":"535197f2e4b084c2834f4ae4"},{"problem":29,"code":"#(apply str(filter (fn [c] (<= (int \\A) (int c) (int \\Z))) (seq %)))","user":"55ead489e4b0121d4835fdb6"},{"code":"#( clojure.string/replace %\n  ( java.util.regex.Pattern/compile \"[^A-Z]\") \"\" \n)","problem":29,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":29,"code":"(fn [s] (->> s (filter #(Character/isUpperCase %)) (clojure.string/join)))","user":"4f0d6686535d0136e6c22318"},{"code":"(fn[s](reduce str \n  (filter #(Character/isUpperCase %)s)))","problem":29,"user":"4e244ed5535d04ed9115e826"},{"problem":29,"code":"(fn ([s] (apply str (filter #(Character/isUpperCase %) (seq s)))))","user":"55ef12cfe4b0121d4835fdfc"},{"problem":29,"code":"#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTYVWXYZ\") %))","user":"5a64ce4ee4b0512ff01cd9a6"},{"code":"(fn caps [s]\n   (apply str (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"5029131ae4b0b6c928ad61ff"},{"code":"(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\"  \"\"))","problem":29,"user":"4fd7f892e4b0dab7d829f38d"},{"problem":29,"code":"(fn get-caps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )","user":"53fe459ae4b0de5c418485f4"},{"code":"(fn get-caps [x]\n  (reduce str (filter (fn upper-case? [x]\n\t(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) x))\n  )","problem":29,"user":"500a214de4b03d00572d2d74"},{"problem":29,"code":"(fn caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","user":"563f0fdae4b08d4f616f5ece"},{"problem":29,"code":"(fn [word] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) word)))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (and\n       (>=\n        (int c)\n        (int \\A))\n       (<=\n        (int c)\n        (int \\Z))))\n    s)))","problem":29,"user":"50d2fa5ce4b049d4ed5650cf"},{"code":"(fn[y] \n  (apply str \n    (filter (fn[x] \n      ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) y  )))","problem":29,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":29,"code":"(fn [n]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" n)))","user":"598d22b1e4b02b9968b84d1a"},{"problem":29,"code":"(fn del [x] (clojure.string/replace x #\"[qwertyuiopasdfghjklzxcvbnm,!$#*1234567890(& ]\" \"\") )","user":"557e8326e4b05c286339e0d7"},{"problem":29,"code":"(fn select-uppercase\n  [source-string]\n  (apply str (filter #(Character/isUpperCase %) source-string)))","user":"59863a26e4b021a7a535fe87"},{"code":"(fn [coll]\n    (reduce (fn [acc x] \n    (if (and (>= (int x) 65) (<= (int x) 90)) \n\t    (str acc x) acc)) \"\" coll))","problem":29,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn \n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st )) )","problem":29,"user":"4e6ff01e535d5021c1a8962b"},{"problem":29,"code":"(fn [merde] (->> merde (re-seq #\"[A-Z]\")(reduce str)))","user":"556f2009e4b09a3098a52519"},{"problem":29,"code":"(fn [coll] (apply str (filter #(Character/isUpperCase %) coll) ) )","user":"54df7922e4b024c67c0cf7ad"},{"code":"(fn [x](apply str (filter #(Character/isUpperCase % ) x)))","problem":29,"user":"4f4ff451e4b03ad3f0c10cf2"},{"code":"(fn [string] (apply str (filter #(<= 65 (int %) 90) string)))","problem":29,"user":"4f294c48e4b0d6649770a023"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s))\n  )","user":"54996971e4b0b312c081ff8d"},{"problem":29,"code":"#(clojure.string/join (filter (partial re-matches #\"[A-Z]\") (map str (seq %))))","user":"58e37946e4b005f69f193cae"},{"problem":29,"code":"(fn [xs]\n  (apply str (map char (filter #(and (< % 91) (> % 64)) (.getBytes xs)))))","user":"55e3e7a8e4b050e68259b44a"},{"problem":29,"code":"(fn [text] (clojure.string/join (map #(if (Character/isUpperCase %) % nil) text)))","user":"5d20677be4b02ea6f0fb69d3"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) s)))","user":"5458c74de4b01be26fd74623"},{"problem":29,"code":"#(->> % (map int) (filter (fn [x] (<= 65 x 90))) (map char) (apply str))","user":"5ece3d25e4b016b56eae059b"},{"code":"#(apply str (filter (into {} (map vector (map char (range (int \\A) (inc (int \\Z)))) (repeat 26 \"\"))) %))","problem":29,"user":"52ed1804e4b0a18b0f5dd9e6"},{"problem":29,"code":"#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %1))","user":"5f429fdfe4b0955706451faf"},{"code":"(fn [s] (apply str (filter (fn [x] (Character/isUpperCase x)) s)))","problem":29,"user":"50e9d21ce4b02d54280826cf"},{"problem":29,"code":"(fn [l] \n  (apply str (filter \n   (fn [x] (some #(= x %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") ))\n   (seq l)\n  ))\n)","user":"5821dbb9e4b04b46fc4b0f86"},{"problem":29,"code":"(fn sm-uc [x]\n(apply str (re-seq #\"[A-Z]\" x))\n)","user":"5575aae2e4b05c286339e065"},{"problem":29,"code":"(fn [text]\n    (apply str (re-seq #\"[A-Z]\" text)))","user":"5ac7f980e4b0e27600da779f"},{"problem":29,"code":"(fn [x] (let [y #(Character/isUpperCase %)] (apply str (filter y x))))","user":"549d7e16e4b0f3d1d8e70f96"},{"code":"(fn [x] \n  (apply str\n    (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4fc34787e4b081705acca33e"},{"problem":29,"code":"(fn filter-uppercase [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn [x]\n  (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) x)))","problem":29,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn [y] (apply str (doall (filter (fn [x](Character/isUpperCase x)) y))))","problem":29,"user":"4e44358f535dc968683fc4a8"},{"code":"(fn[x](clojure.string/join (filter #(not= (str(clojure.string/lower-case %)) (str %)) x)))","problem":29,"user":"52d33ac5e4b099d49816f0c0"},{"code":"(fn [s]\n  (apply str\n         (filter #(and (>= (int %) (int \\A))\n                       (<= (int %) (int \\Z))) s)))","problem":29,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn \n[in]\n  (apply str (filter #(Character/isUpperCase %) in))\n)","problem":29,"user":"530c462ae4b02e82168697d9"},{"problem":29,"code":"(fn caps [string] (apply str (filter (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) string)))","user":"5b1ff078e4b03cfeda66ed2a"},{"code":"(fn caps [s]\n  (apply str(reduce concat '() (re-seq #\"[A-Z]+\" s))))","problem":29,"user":"51b73a91e4b0d906fcd71d33"},{"problem":29,"code":"(fn [word] (reduce str (filter\n                         #(and (>= (int %) (int (first \"A\")))\n                                (<= (int %) (int (first \"Z\"))))\n                         word)))","user":"5749ce09e4b009280f9f2ba0"},{"problem":29,"code":"(fn [in] (clojure.string/join \n           (filter \n             #(not (nil? %)) \n             (map \n                #(re-matches #\"[A-Z]\" (str %)) \n                (seq in)))))","user":"56d902c3e4b0ea9b8538f7ed"},{"code":"(fn [s]\n  (apply str\n    (filter\n        #(Character/isUpperCase %)\n        s)))","problem":29,"user":"50427899e4b0add3005c0fc2"},{"code":"#(apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) %))","problem":29,"user":"4e84836a535db62dc21a62e1"},{"problem":29,"code":"(fn [instring] (apply str (re-seq #\"[A-Z]\" instring)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"#(->> % (re-seq (re-pattern \"[A-Z]\")) (apply str))","problem":29,"user":"51e3cf8ee4b0efabf93c02a3"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z0-9!@#$%^,./&*()\\ ]\" \"\")","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":29,"code":"(fn [thing] (apply str (map #(first %1) (re-seq #\"([A-Z])\" thing))))","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn [in]\n        (apply str (re-seq #\"[A-Z]\" in)) \n)","problem":29,"user":"4eeb2b3c535d93acb0a668a7"},{"code":"(fn [string]\n      (apply str ((fn [s] (filter #(and\n                                    (= (clojure.string/upper-case %) (str %))\n                                    (not (= (clojure.string/lower-case %) (str %)))) (seq s))) string)))","problem":29,"user":"4fa3c137e4b081705acca193"},{"problem":29,"code":"(fn [str-new]\n   (apply str\n          (filter #(Character/isUpperCase %) str-new)))","user":"5ab23c99e4b073f1774425e2"},{"problem":29,"code":"#(->> %\n      (filter (fn [x] (Character/isLetter x)))\n      (filter (fn [x] (Character/isUpperCase x)))\n      (clojure.string/join \"\"))","user":"5f0a65dae4b09a3f05b71806"},{"problem":29,"code":"(fn getUpper [x] (apply str (map char (filter #(and (<= (int \\A) %) (>= (int \\Z) %)) (map int x)))))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn capitals-only\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"53028354e4b0d8b024fd372b"},{"problem":29,"code":"(\n fn get-the-caps [arg]\n  (clojure.string/join \n   (filter #(Character/isUpperCase %)\n           arg)\n   )\n )","user":"5d21b91ee4b02ea6f0fb69e9"},{"code":"(fn capper [x] \n  (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"50845d3ee4b0fb8f40674bf3"},{"code":"(fn [x] (apply str (filter #(#{\\A,\\Z,\\H,\\L,\\O,\\W,\\R,\\D,\\B,\\C} %) x)))","problem":29,"user":"528f1057e4b0239c8a67aeec"},{"code":"(fn [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4ecaa5da535d6d7199dd3707"},{"problem":29,"code":"(fn findupper [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"558466fce4b04192f3441eee"},{"code":"(fn ca [x]\n  (when (not (= x '()))\n    (let [c (first x)]\n      (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)\n        (str c (ca (rest x)))\n        (ca (rest x))))))","problem":29,"user":"51a671d4e4b0740bfd1afd21"},{"problem":29,"code":"(fn [s] (apply str (re-seq #\"[A-Z]+\", s)))","user":"4e72a717535d5021c1a89665"},{"code":"#(apply str (filter (fn [a] (and \r\n  (>= (int a) (int \\A))\r\n  (<= (int a) (int \\Z)))\r\n) %))","problem":29,"user":"4def301c535d08e6dec9fe12"},{"code":"#(apply str\n   (loop [caps [], dex 0]\n     (cond\n       (= dex (count %)) caps\n       true (let [c (int (.charAt % dex))]\n              (recur (if (<= (int \\A) c (int \\Z)) (conj caps (.charAt % dex)) caps)\n                     (inc dex))))))","problem":29,"user":"5196568fe4b04c0af7ff3c1c"},{"problem":29,"code":"(fn upper [string]\n  (reduce str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (seq string))))","user":"550b4ea2e4b06e50f9beb13e"},{"code":"(fn [a] (apply str (map char (filter #(>= % 65) (filter #(<= % 90) (map int (seq a)))))))","problem":29,"user":"53874820e4b06839e8705f1b"},{"problem":29,"code":"(fn upper-string\n  [string]\n  (clojure.string/join\n    (for [result (seq string) :when (Character/isUpperCase result)]\n      (.toString result))))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [a] (apply str (filter #(Character/isUpperCase %) a)))","problem":29,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"code":"(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)) )","problem":29,"user":"519e70d5e4b0acf32bc6a42c"},{"problem":29,"code":"#(reduce str (re-seq #\"\\p{Lu}+\" %))","user":"5f1a0ca2e4b091ba50b4dbe0"},{"code":"(comp\n  clojure.string/join\n  (partial filter #(Character/isUpperCase %)))","problem":29,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91 )) x)))","problem":29,"user":"4f2c593ee4b0d6649770a053"},{"code":"(fn [item] (apply str (filter #(Character/isUpperCase %) (seq item))))","problem":29,"user":"52a52e59e4b0c58976d9abe4"},{"problem":29,"code":"(fn [a] (apply str (filter #(Character/isUpperCase %) a)) )","user":"5c94cbb1e4b048ec896c5a3d"},{"code":"(fn caps [x](\n  apply str(\n    filter #(Character/isUpperCase %) x)))","problem":29,"user":"4eb2f89a535d7eef30807353"},{"problem":29,"code":"(fn [s]\n    (apply str \n        (filter (fn [x] \n                (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))))\n            (seq s))))","user":"5ea2e6bfe4b00a66d4a95197"},{"code":"#(apply \n  str \n  (filter \n   (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) \n   (seq %)))","problem":29,"user":"51b24defe4b02f8f128bb963"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %))\n;\n;(fn [x] (apply str (filter #(some #{(int %)} (range 65 91)) x)))\n;\n;(fn[s](apply str (filter #(let [i (int %)] (and (> i 64) (< i 91)))s)))\n;\n; #(loop [matcher (re-matcher #\"[A-Z]+\" %) acc \"\"] \n;             (if-let [s (re-find matcher)]\n;                 (recur matcher (str acc s))\n;                 acc))","user":"556f35fee4b09a3098a5251a"},{"problem":29,"code":"(fn [string] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) string)))","user":"5b6f27dce4b0c6492753e7d9"},{"code":"(fn [coll] \n(apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"504e0f78e4b078edc5f593ac"},{"code":"(fn [s] \n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"51803613e4b04f45bde7d8fd"},{"code":"(fn [s]\n  (apply str\n    (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))","problem":29,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(fn [c] (apply str (re-seq #\"[A-Z]\" c)))","problem":29,"user":"4f622cafe4b0defedf855fcc"},{"problem":29,"code":"(fn get-caps [txt] \n  (apply str (filter (set (map char (range 65 91))) txt)))","user":"570940a9e4b0b0fb43fd06aa"},{"code":"#(reduce (fn [string char] (if (re-seq #\"[A-Z]\" (str char)) (str string char) string)) \"\" %)","problem":29,"user":"4f36f005e4b0e243712b1ecd"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) x) ))","problem":29,"user":"5220ef05e4b0e6a83c8925b8"},{"code":"(fn [x]\n    (clojure.string/join (re-seq #\"[A-Z]+\" x))\n    )","problem":29,"user":"528f82d8e4b0239c8a67aef4"},{"code":"#(apply str (seq (for [input % :let [curr input] :when (java.lang.Character/isUpperCase input)] input)))","problem":29,"user":"4f00c74f535dcb61093f6a31"},{"code":"(fn [coll] (apply str (map #(if (and (>= (compare % \\A) 0)\n                                     (<= (compare % \\Z) 0)) % \"\") coll)))","problem":29,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [strng] (apply str (re-seq #\"[A-Z]+\" strng)))","problem":29,"user":"4f0a2ed1535d0136e6c222f3"},{"problem":29,"code":"(fn [st]\n  (loop [s st\n         acc \"\"]\n    (if (empty? s)\n      acc\n      (if (Character/isUpperCase (first s))\n        (recur (rest s) (str acc (first s)))\n        (recur (rest s) acc)\n      ))))","user":"5f7603a8e4b02876ed9fd0ad"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))x)))","user":"597d0e43e4b0dbe32238d095"},{"problem":29,"code":"(fn get-caps\n  [string]\n  (reduce (fn [caps s] (if (re-matches #\"[A-Z]\" (str  s)) (str caps s) caps)) \"\" string))","user":"56cf9d4fe4b0ea9b8538f76c"},{"problem":29,"code":";Found in the solutions : #(apply str (re-seq #\"[A-Z]\" %))\n#(clojure.string/replace % #\"[^A-Z]\" \"\")","user":"54380631e4b032a45b86930f"},{"code":"(fn [s] (apply str (filter (fn [c] (Character/isUpperCase c)) s)))","problem":29,"user":"4fb2101ce4b081705acca284"},{"problem":29,"code":"#(apply str\n           (filter\n             (fn [x]\n               (if\n                 (= (clojure.string/lower-case x) (str x))\n                 false\n                 true))\n             %))","user":"5908882de4b047aa04b19979"},{"code":"(fn [x] (clojure.string/join \n  (clojure.string/split x #\"[^A-Z]*\")))","problem":29,"user":"5045ac21e4b01f6c9a8b2371"},{"code":"(fn [s] \r\n  (apply str \r\n    (filter \r\n      (fn [x] (and (<= 65 (int x)) (>= 90 (int x)))) s)))","problem":29,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":29,"code":"#(clojure.string/join\n  \"\"\n  (re-seq #\"[A-Z]\" %))","user":"546805d6e4b00cfc9eacc134"},{"problem":29,"code":"(fn [x]\n    (clojure.string/join\n     (re-seq #\"[A-Z]\" x)))","user":"597f8a4be4b0dbe32238d0c0"},{"problem":29,"code":"(fn [s]\n  (let [mtchr (re-matcher #\"[A-Z]\" s)]\n    (loop [mtch (re-find mtchr) res []]\n      (if-not mtch\n        (apply str res)\n        (recur (re-find mtchr) (conj res mtch))))))","user":"5adcc688e4b0837691e92c05"},{"code":"(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ecdb0bb535d23f036227709"},{"problem":29,"code":"(fn [arr] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) arr)))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))","user":"58b12635e4b0ebc645576cf4"},{"problem":29,"code":"#(clojure.string/join (filter (fn[c] (java.lang.Character/isUpperCase c)) (seq %)))","user":"5b0fe3f4e4b0cc2b61a3be14"},{"code":"#(reduce str (re-seq #\"[A-Z]+\" %1))","problem":29,"user":"4fe8da4de4b0547ebccb2429"},{"code":";(fn getCaps  \n;  [x] \n;  (apply str (map (comp str char)\n;       (filter #(and (<= (int \\A) %) \n;               (>= (int \\Z) %))\n;        (map int x))\n;  ))\n;)\n\n(fn capper [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"53736f65e4b06d7f452d9e0f"},{"problem":29,"code":"(fn \n  [input-str]\n     (apply str (re-seq #\"[A-Z]\" input-str)))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":29,"code":"(fn caps [text]\n  (apply str (->> text\n                  (filter #(Character/isLetter %))\n                  (filter #(let [x (str %)] (= x (.toUpperCase x)))))))","user":"54b07c1ee4b09f271ff37d16"},{"code":"(fn [string] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) string)))","problem":29,"user":"53217912e4b09d4e7a9b54b3"},{"code":"#(clojure.string/join (re-seq #\"[A-Z]+\" %))","problem":29,"user":"4dad76588e77d6ed63f12a44"},{"problem":29,"code":"#(clojure.string/join (filter (fn [c] (Character/isUpperCase c)) (seq %)))","user":"55041b5ee4b086ebe8a79c78"},{"code":"(fn [x] (apply str (filter (fn [x] (not= (clojure.string/lower-case x) (.toString x))) x)))","problem":29,"user":"4f7e07f4e4b06e829148e1c9"},{"problem":29,"code":"(fn upper-caps \n  [lst]\n  (apply str \n         (map char \n              (filter #(and (<= 65 %) (<= % 90)) (map int lst)))))","user":"59e68254e4b0249b728206fc"},{"code":"(fn [sq] \n  (reduce str (filter #(and (> (int %)  64) (< (int %) 91)) sq)))","problem":29,"user":"52d6120ee4b09f7907dd134c"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (java.lang.Character/isLetter %) (java.lang.Character/isUpperCase %))\n                     s))\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [s] (apply str (filter #(not= (clojure.string/lower-case (str %)) (str %)) s)))","problem":29,"user":"507a396be4b08327cd804a69"},{"problem":29,"code":"(fn [msg] (apply str (filter #(java.lang.Character/isUpperCase %) msg)))","user":"562268dce4b03f08ee9a9224"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(re-find #\"[A-Z]\" %) (map str (seq string)))))","user":"56e6d049e4b02e7e935eb6cd"},{"code":"(fn [x]\n  (apply str (for [c (char-array x)\n             :when (and\n                    (<= (int c) (int \\Z))\n                    (>= (int c) (int \\A)))]\n         c))\n)","problem":29,"user":"52a32b52e4b04e0c58e87bfc"},{"code":"(fn [s] (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) s)))","problem":29,"user":"4e9e4515535dbda64a6f6b95"},{"problem":29,"code":"(fn [in] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) in)))","user":"51301929e4b0e2531888cbde"},{"code":"(fn [X] (reduce str (filter (fn [x] (.matches (str x) \"[A-Z]\")) (vec X))))","problem":29,"user":"4f031883535dcb61093f6a5e"},{"problem":29,"code":"#(clojure.string/replace % (re-pattern \"[^A-Z]\") \"\")","user":"58dadf46e4b0a4d5acaab66b"},{"problem":29,"code":"(fn [string]\n (apply str\n   (filter (fn [c] (Character/isUpperCase c)) (seq string))))","user":"582a2d4fe4b051871117bf55"},{"problem":29,"code":"#(loop [s %, res \"\"]\n   (if (nil? s) \n     res\n     (if (= (clojure.string/lower-case (first s)) (str(first s)))\n       \t(recur (next s) res)\n          (recur (next s) (str res (first s) ))\n          \n      )\n    )\n )","user":"5e79fcb9e4b085ba37836e08"},{"problem":29,"code":"(fn [input]\n   (->> input\n        (filter #(Character/isUpperCase %))\n        (apply str)))","user":"5b6002c2e4b0c6492753e6fb"},{"code":"(fn [coll] (apply str (filter #(Character/isUpperCase %1) coll )) )","problem":29,"user":"4f659386e4b07046d9f4ef44"},{"problem":29,"code":"(partial (comp clojure.string/join re-seq) #\"[A-Z]+\")","user":"55ec04c4e4b0121d4835fdc1"},{"problem":29,"code":"(fn capital [s] (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"57e56da8e4b0bfb2137f5ad6"},{"code":"(fn get-caps[s] \n  (apply str(re-seq #\"[A-Z+]\" s)))","problem":29,"user":"5018878ce4b029375d2a5056"},{"problem":29,"code":"(fn [coll]\n  (apply str (re-seq (re-pattern #\"[A-Z]\") coll)))","user":"59503c5de4b066ee0a44ae8e"},{"problem":29,"code":"(fn get-the-caps \n ([a] (get-the-caps a []))\n ([a res] \n   (if (empty? a)\n\t   (clojure.string/join res)\n\t\t (if (java.lang.Character/isUpperCase (first a))\n\t\t  (recur (rest a) (conj res (first a)))\n\t\t\t(recur (rest a) res)))))","user":"4f6543cae4b07046d9f4ef41"},{"problem":29,"code":"(fn get-caps [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"58a5c5c2e4b01a0c0b23291b"},{"problem":29,"code":"(fn [input] (let \n              [caps \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n              (apply str (filter #(.contains caps (str %)) input))\n              ))","user":"555f728de4b0a2eb076a39c8"},{"problem":29,"code":"(fn\n  [string-val]\n  (str (clojure.string/join (filter #(Character/isUpperCase %1) string-val))))","user":"603e8e3ae4b0d5df2af22316"},{"problem":29,"code":"(fn justU [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"548fa2dfe4b0e286459a1240"},{"problem":29,"code":"(fn eh [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n)","problem":29,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":29,"code":"(fn \n  [mystr]\n  (apply str ( filter #(Character/isUpperCase %) mystr)))","user":"516d227fe4b06f078fab252d"},{"problem":29,"code":"(fn [s] (reduce str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))","user":"566e6850e4b0a866af6896da"},{"problem":29,"code":"(fn [s]\n  (apply str  \n  (keep\n   #(if (< 64 (int %) 91) %) s)))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn\n  [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"5289bba9e4b0239c8a67ae69"},{"code":"(fn [s] (apply str (filter #(and (<= (int \\A) (int %)) (<= (int %) (int \\Z))) (seq s))))","problem":29,"user":"4ea03f70535d7eef308072a1"},{"problem":29,"code":"(fn [c] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) c)))","user":"58ddac2ce4b0a4d5acaab6d6"},{"code":"(fn filter-capital [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e4b4564535dc968683fc4d3"},{"problem":29,"code":"#(clojure.string/join (filter (set (map char (range 65 91))) %))","user":"5700f1f0e4b08d47c97781ce"},{"code":"(fn [x] (apply str(re-seq #\"[A-Z]\" x)))","problem":29,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn jcaps\n  [mystr]\n  (apply str (re-seq #\"[A-Z]+\" mystr)))","problem":29,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"#(apply str (re-seq #\"[A-Z]\" % ))","problem":29,"user":"518637c9e4b0da5a5be3bac8"},{"code":"(fn [string]\n   (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"51469a3ae4b04ef915e3731b"},{"problem":29,"code":"(fn[a-string] (apply str (re-seq #\"[A-Z]\" a-string)))","user":"54f296efe4b024c67c0cf8c8"},{"code":"(fn get-caps [s]\n  (loop [e s\n         r '()]\n    (if (empty? e)\n      (apply str (concat r))\n      (if (Character/isUpperCase (first e))\n        (recur (rest e) (concat r [(first e)]))\n        (recur (rest e) r)))))","problem":29,"user":"4eb99b3d535dfed6da9c6d57"},{"code":"(fn [a] (apply str (filter #(Character/isUpperCase %) (seq a))))","problem":29,"user":"50588ff1e4b06522596eba7e"},{"code":"(fn [s] (apply str (filter \n  (fn [c] (and \n    (> (int c) 64) (< (int c) 91)))\n  s)))","problem":29,"user":"4ff4c9dae4b0678c553fc360"},{"problem":29,"code":"(fn [xs]\n(let [up (into #{} (map char (concat (range 65 91))))]\n  (apply str (filter up xs))))","user":"5488872ee4b0e286459a11d3"},{"problem":29,"code":"(fn [xs]\n   (clojure.string/join (filter #(Character/isUpperCase %) xs)))","user":"5ce05561e4b0a17bb84e2b08"},{"code":"(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) s)))","problem":29,"user":"4e641bfd535d8ccf87e9fe67"},{"problem":29,"code":"#(reduce (fn [x y] (if (and (= (clojure.string/upper-case y) (str y)) (not= (clojure.string/upper-case y) (clojure.string/lower-case y))) (str x y) (str x))) \"\" %)","user":"571172ece4b09c608db70446"},{"problem":29,"code":"(fn [string] (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))","user":"59f75327e4b0966464fe6aec"},{"problem":29,"code":"(fn strToList [s] (apply str (for [i (range 0 (count s))](let [z (.charAt s i)] (if (Character/isUpperCase z) z nil)))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [s] (apply str (filter #(not= (str %)\n                                   (.toLowerCase (str %)))\n                            s)))","problem":29,"user":"5363f11be4b0243289761e5f"},{"problem":29,"code":"#(apply str (filter (fn [a] (not= (clojure.string/lower-case a) (str a))) %))","user":"5f016f37e4b0cf489e8d7f20"},{"code":"(fn [s]\n  (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4ef0a39b535dced4c769f20c"},{"problem":29,"code":"#(apply str (filter  (fn [c] (Character/isUpperCase c)) %))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":29,"code":"(fn caps [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn [s] (apply str (filter #(. java.lang.Character isUpperCase %) (seq s))))","problem":29,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(\n            fn [s] \n                (apply str (filter \n                    #(Character/isUpperCase %)\n                    s\n                ))\n        )","problem":29,"user":"4fbdcb87e4b081705acca30a"},{"problem":29,"code":";;#(apply str (filter (fn u [c] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} c)) %))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"540e0637e4b0addc1aec6717"},{"code":"(fn [col] (apply str (filter (fn [x] (Character/isUpperCase x)) (seq col))))","problem":29,"user":"531576b4e4b08068f379ed29"},{"code":"(fn [coll] (apply str (filter #(java.lang.Character/isUpperCase %) coll)))","problem":29,"user":"4e6daa22535d5021c1a895ef"},{"code":"#(apply str (filter (fn [c](and (>= (int c) 65)(<= (int c) 90))) %))","problem":29,"user":"51b41150e4b0f094dd986fac"},{"problem":29,"code":"(fn up [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))","user":"5842d06be4b089d5ab817e22"},{"problem":29,"code":"(fn [s](apply str(re-seq #\"[A-Z]\" s)))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn only-uppers [string]\n  (->>\n   (filter #(Character/isUpperCase (int %)) string)\n   (apply str)))","problem":29,"user":"4fae4c11e4b081705acca248"},{"problem":29,"code":"(fn [x]\n(apply str (filter #(Character/isUpperCase %) x)))","user":"601bb40de4b0bf4ca6b1092f"},{"problem":29,"code":"(fn join [s] \n  (if (empty? s) \n    nil\n    (if (Character/isUpperCase (first s))\n      (str (first s) (join (rest s)))\n      (str (join (rest s))))\n  )\n )","user":"567debb5e4b05957ce8c61ce"},{"problem":29,"code":"(fn [arg] (apply str (filter #(Character/isUpperCase %) arg)))","user":"59636b37e4b066ee0a44b0c3"},{"problem":29,"code":"(fn [str] \n  (clojure.string/join (filter  #(Character/isUpperCase %)   str)))","user":"5e8c0c5be4b0cb0169546320"},{"problem":29,"code":"(fn getCaps [col] (apply str (filter #(Character/isUpperCase %) (seq col))))","user":"56f86f98e4b08e7d20b96837"},{"code":"(fn [s] (apply str(filter #(Character/isUpperCase %) s)))","problem":29,"user":"5089d52ce4b03217b26a539d"},{"problem":29,"code":"#(apply str (filter (fn [x] (some (fn [y] (= x y)) (map char (range 65 91)) )) %))","user":"56f09bf4e4b04a395b9a047f"},{"problem":29,"code":"(fn upperCase\n  [string]\n  \"Returns a string containing only the uppercase characters\n  of the given string.\"\n  (apply str (filter (fn\n            onlyUppercase\n            [character]\n            (if (#(and (> % 64) (< % 91)) (int character))\n              character\n              nil)) string)))","user":"55a9e0fee4b0988bba2ad945"},{"problem":29,"code":"(fn [x] ((partial apply str) (filter #(Character/isUpperCase %) x)))","user":"54c19050e4b0ed20f4ff6f26"},{"problem":29,"code":"(fn [lst]\n\t(apply str (filter #(Character/isUpperCase %)lst)))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":29,"code":"(fn \n  [s]\n  (reduce str (filter #(Character/isUpperCase %) s))\n  )","user":"60617afee4b03746e80ebf6c"},{"code":"(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e4ae5aa535dc968683fc4d2"},{"problem":29,"code":"(fn [str1] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) str1)))","user":"56b49f72e4b0982f16b37e23"},{"code":"(\nfn [y] (\n  apply str\n  (filter  (fn [x] (< -1 (compare x \\A) (inc (compare \\Z \\A)))) y)\n  )\n)","problem":29,"user":"4fc7b079e4b0ee37620e1827"},{"problem":29,"code":"(fn [s] \n  (reduce \n    str \n    (filter (fn [c] \n              (and (= (clojure.string/upper-case c) (str c)) (not= (clojure.string/lower-case c) (str c)))) s)))","user":"5971a017e4b01722bebd4c75"},{"problem":29,"code":"(fn [lst]\n  (apply str (map char (filter #(<= (int \\A) %1 (int \\Z)) (map int lst)))))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":29,"code":"(fn [msg] (apply str (filter #(Character/isUpperCase %) (seq msg))))","user":"564dc062e4b0284900eef68c"},{"problem":29,"code":"(fn stripcaps [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)","user":"569f99cce4b0542e1f8d1497"},{"code":"#(apply str(re-seq #\"[A-Z]*\" %))","problem":29,"user":"52eaeb88e4b0705949c44436"},{"problem":29,"code":"(fn mcaps\n  [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"540efe2ee4b0addc1aec6724"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))","user":"542769f8e4b01498b1a71b24"},{"code":"(fn [s] (apply str (filter #(#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) s)))","problem":29,"user":"4ff8a89de4b0678c553fc39d"},{"problem":29,"code":"(fn [s] (apply str (filter\n                      (fn [c]\n                        (<= (int \\A) (int c) (int \\Z)))\n                      s)))","user":"55c652dde4b0e31453f649bd"},{"code":"(fn [x] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) x)))","problem":29,"user":"519964cbe4b0aa09cbc0b849"},{"code":"(fn [x] (apply str (filter (fn [i] (<= 65 (int i) 90)) x)))","problem":29,"user":"5252f8ede4b0541d1855b8e0"},{"code":"(fn [seq] \n  (apply str (filter #(Character/isUpperCase %) seq)))","problem":29,"user":"5151d173e4b03e678e393adf"},{"problem":29,"code":"(fn [string]\n  (let [cap (map char (range 65 91))]\n    (clojure.string/join \"\"\n      (filter #(not= (.indexOf cap %) -1) string))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":29,"code":"(fn find-capital-string [args]\n  (let [result (atom [])]\n    (doseq [char-data (seq args)]\n      (when (and (>= (int char-data) 65)  (<= (int char-data) 90))\n        (swap! result conj char-data)))\n    (swap! result #(apply str %1))\n\n    @result)\n  )","user":"602f8400e4b0d5df2af22299"},{"problem":29,"code":"(fn f\t[s]\n      (clojure.string/join\n           (filter #(not= (str %) (clojure.string/lower-case %)) s)\n      )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase  %) (seq x))))","user":"56d325ace4b0ea9b8538f7a9"},{"problem":29,"code":"(fn [ori-str]\n  (reduce str (filter #(re-matches #\"[A-Z]\" %) (clojure.string/split ori-str #\"\"))))","user":"55a0d79fe4b0acc240e31502"},{"problem":29,"code":"(fn [string]\n  \n  (clojure.string/join \"\"(re-seq #\"[A-Z]\" string)))","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [s] (apply str\n  (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"50c7431ae4b00bb60fe0c531"},{"problem":29,"code":"#(clojure.string/join (filter (into #{} (map char (range 65 91))) %))","user":"563dfc02e4b0da801c4e4662"},{"problem":29,"code":"(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(fn [x]\n  (apply str\n         (filter\n          #(not (= (clojure.string/lower-case %) (str %)))\n         x)))","problem":29,"user":"5221c0cae4b0e6a83c8925e1"},{"code":"(fn [a]\n   (loop [-a a b \"ABCDEFGHIGKLMNOPQRSTUVWXYZ\" c \"\"]\n     (if (empty? -a)\n       c\n       (recur (rest -a) b (if (> (.indexOf b (str (first -a))) -1)\n                            (str c (first -a))\n                            c)))))","problem":29,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn [string] (clojure.string/join (re-seq (re-pattern \"[A-Z]\") string)))","problem":29,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn [s]\n    (apply\n       str \n       (filter\n         #(and (not(pos? (compare \\A %)))\n               (not(pos? (compare % \\Z))))\n          (seq s)\n       )\n     )\n  )","problem":29,"user":"533b36c0e4b0e30313ee6ccb"},{"problem":29,"code":"(fn [string] (apply str (re-seq #\"[A-Z]+?\" string)))","user":"5a99b83fe4b0d174b936c7aa"},{"problem":29,"code":"(fn only-capitals [s] (reduce str (filter #(Character/isUpperCase %1) s)))","user":"56252effe4b00a550fc90294"},{"code":"(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4f6845d2e4b07046d9f4ef74"},{"problem":29,"code":"(fn get-caps [s]\n  (->> s\n       (re-seq #\"[A-Z]+\")\n       clojure.string/join))","user":"57e41d99e4b0bfb2137f5ab5"},{"code":"(fn [s]\n    (clojure.string/join \n      (filter \n        #(not (= (clojure.string/lower-case (str %)) (str %)))\n        s)))","problem":29,"user":"4fab0b6be4b081705acca20c"},{"problem":29,"code":"(fn [st]\n  (->>\n   (re-seq #\"[A-Z]\" st) \n   (apply str)))","user":"5ec21ef0e4b00a66d4a95299"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]+\"\n                  s)))","user":"593fcb0ce4b069cdc2982bea"},{"problem":29,"code":"(fn [some-seq]\n  (apply str (filter\n             (fn [item]\n               (re-matches #\"[A-Z]\" (str item)))\n             some-seq)))","user":"5a35d515e4b0ddc586f153e1"},{"code":"(fn xxx [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"5163a7bbe4b055933a9ca02f"},{"problem":29,"code":"(fn h [l]\n(first(list(clojure.string/join (filter #(Character/isUpperCase %) l)))))","user":"59636ec9e4b066ee0a44b0c8"},{"problem":29,"code":"(fn [s] \n   (clojure.string/join \n     (filter #(Character/isUpperCase %) \n             (reverse (reverse s)))))","user":"56669819e4b0e91d5f5c5674"},{"code":"#(apply str (filter\n  (fn [c] (Character/isUpperCase c))\n  %))","problem":29,"user":"4fae0b85e4b081705acca245"},{"code":"(fn blah [n] \n  (apply str \n         (filter \n          #(and \n            (<= (int %) (int \\Z)) \n            (>= (int %) (int \\A))) \n          n)))","problem":29,"user":"52090654e4b0e152394d76ee"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (char-array s))))","user":"5da8b8ece4b000c986472c28"},{"code":"(fn [s]\n   (let [caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n     (apply str\n            (filter #(contains? caps %)\n             s))))","problem":29,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":29,"code":"(fn td [st] (clojure.string/replace st #\"[^A-Z]\" \"\"))","user":"553900d4e4b09218d5f44fe5"},{"problem":29,"code":"(fn [x] (apply str  (filter #(Character/isUpperCase %) x)))","user":"54aa2462e4b09f271ff37cb4"},{"code":"(fn[x]\r\n  (apply str (filter (fn[x] (and \r\n\t                 (>= (int x) (int \\A))\r\n\t                 (<= (int x) (int \\Z)))) x))\r\n)","problem":29,"user":"4ff07688e4b0678c553fc324"},{"code":"(fn [phrase] (apply str (filter #(Character/isUpperCase %) phrase)))","problem":29,"user":"516d7efde4b0fddc7b37210e"},{"problem":29,"code":"#(clojure.string/replace % #\"[ 0-9a-z!@#$%^&*',.\\(\\)]\" \"\")","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn [str]\n  (clojure.string/join\n   (re-seq #\"[A-Z]\" str)))","problem":29,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":29,"code":"(fn [s]\r\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","user":"546e1142e4b00cfc9eacc199"},{"code":"(fn caps [in]\n  (apply str (filter #(Character/isUpperCase %) in))\n)","problem":29,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":29,"code":"(fn [arr] (clojure.string/join (filter #(Character/isUpperCase %) arr)))","user":"5bc352abe4b07a9b28b10041"},{"problem":29,"code":"#(apply str (filter (fn [st] (Character/isUpperCase st)) %))","user":"57291a39e4b0c6e51e0d2b14"},{"code":"(fn [s] (apply str (filter (fn u [x] (contains? (set (map #(char (+ (int \\A) %)) (range 26))) x) )s)))","problem":29,"user":"5353afa0e4b084c2834f4b03"},{"problem":29,"code":"(fn get-caps [v]\n  (reduce str (re-seq #\"[A-Z]+\" v)))","user":"54a31fdae4b09f271ff37c64"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join \n    (filter (fn [x] (and (<= (int x) 90) (>= (int x) 65))) s)\n  )\n)","user":"5ff88607e4b06df49cee14a6"},{"code":"(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","problem":29,"user":"4f36f5f2e4b0e243712b1ece"},{"code":"(fn \n  [x]\n  (clojure.string/join \n   (re-seq #\"[A-Z]\" x))\n  )","problem":29,"user":"509fe894e4b08df8156e9e44"},{"code":"(fn [str]\n  (clojure.string/replace str #\"[^A-Z]\" \"\"))","problem":29,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":29,"code":"(fn [input] (clojure.string/join \"\" (filter #(Character/isUpperCase %) input)))","user":"56351709e4b0bfe05bf117c2"},{"code":"(fn [coll] (apply str (filter #(< 64 (int (identity %)) 91) coll)))","problem":29,"user":"52a9154ee4b0c58976d9ac3b"},{"code":"(fn [s]\n  (String.\n    (char-array\n      (filter #(Character/isUpperCase %) \n        (seq s)))))","problem":29,"user":"4f06dcad535dcb61093f6c16"},{"problem":29,"code":"#(reduce str (re-seq #\"[A-Z]\" % ))","user":"5da98129e4b000c986472c33"},{"problem":29,"code":"(fn [x] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) (seq x))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":29,"code":"(fn keep-caps [word]\n  (apply str\n   (filter\n   (fn [cha]\n     (and \n      (Character/isUpperCase cha)\n      (Character/isLetter cha)))\n   word)))","user":"53ac2d45e4b047364c04445b"},{"problem":29,"code":"(fn caps-only\n  [x] (clojure.string/join ( re-seq #\"[A-Z]+\" x)))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(comp (partial apply str)\n      (partial filter (fn [foo] (some #(= % foo) \n                                       (map char (range 65 91))))))","problem":29,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )","problem":29,"user":"4e9dd9ab535dbda64a6f6b8d"},{"code":"(fn foo [s] \n  (let [ss (seq s)]\n    (apply str\n      (filter #(Character/isUpperCase %) ss))))","problem":29,"user":"4f141dee535d64f603146434"},{"code":"#(clojure.string/join (filter (fn  [x] (Character/isUpperCase x)) %))","problem":29,"user":"52a9406de4b0c58976d9ac43"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] (not (= (str x) (clojure.string/lower-case x)))) %))","user":"54e85a7fe4b024c67c0cf823"},{"problem":29,"code":"(fn algo \n  [input]\n  (clojure.string/join (filter #(Character/isUpperCase %) input))\n  )","user":"59e56c75e4b08badc2a0c556"},{"code":"#(apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) (seq %)))","problem":29,"user":"4ec2f1d9535dcc7ae8597d4d"},{"problem":29,"code":"(fn [x] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int (reverse (into '() x)))))))","user":"53d8da61e4b0e771c3025471"},{"problem":29,"code":"(fn\n  [input]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter\n                          #(contains? caps %)\n                          input))))","user":"53de7484e4b0d874e779ae35"},{"problem":29,"code":"(fn [args]\n    (loop [s (seq args) acc \"\"]\n       (if (empty? s)\n           ;(if (empty? acc) \"nothing\" acc)\n         acc\n          (recur (rest s) \n                 (str acc (if (Character/isUpperCase (first s))  (first s) \"\") )\n                 )\n\n    ))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [s] (apply str\n\t\t      (filter #(Character/isUpperCase %) s)))","problem":29,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn [s]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","problem":29,"user":"4f7e29dde4b06e829148e1ca"},{"problem":29,"code":"(fn [x] (clojure.string/join (for [c x :when (re-matches #\"[A-Z]\" (str c))] c)))","user":"54336443e4b0b6b47310fcde"},{"code":"(let [upper (set (map char (range (int \\A) (+ (int \\Z) 1))))\n      upper? (partial contains? upper)]\n  #(apply str (filter upper? %)))","problem":29,"user":"4ef8d47c535dced4c769f261"},{"code":"(fn [s] (apply str (filter #(= Character/UPPERCASE_LETTER (Character/getType %)) (seq s))))","problem":29,"user":"50ebd63ce4b04edc3377703c"},{"problem":29,"code":"(fn upper-chars\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [x] \n  (apply str \n         (filter \n          #(and \n             (Character/isLetter %) \n             (= \n              (str %) \n              (clojure.string/upper-case %)\n             )\n            )\n          (seq x)\n         )\n   )\n)","problem":29,"user":"522404d8e4b01819a2de42c0"},{"code":"(fn [text]\n   (apply str (filter #(Character/isUpperCase %) (seq text))))","problem":29,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":29,"code":"(fn getcaps [x]\n  (reduce str (filter #(Character/isUpperCase %1) x)))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":29,"code":"#(clojure.string/replace %1 (re-pattern \"[^A-Z]\") \"\")","user":"60622c6ee4b03746e80ebf72"},{"code":"(fn [string] (apply str (filter #(Character/isUpperCase %) (seq string))))","problem":29,"user":"5041bdf3e4b06d8231e4fad0"},{"code":"(fn [s]\n  (apply str\n  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e55ea0c535d8a8b8723a281"},{"problem":29,"code":"(fn [coll]\n  (apply str\n    (filter #(Character/isUpperCase %) coll)\n  )\n)","user":"57434339e4b0c285004e8a9f"},{"code":"(fn [s]\n  (apply str\n   (filter \n     #(re-matches #\"[A-Z]\" (str %))\n     s)))","problem":29,"user":"502cff22e4b0b2ab8d5c7e72"},{"code":"#(apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"#(apply str (map char (filter (fn [c] (and (> c 64) (< c 91))) (map int %))))","problem":29,"user":"4f0ce26c535d0136e6c22312"},{"code":"(fn ! [x]\n  (apply str (re-seq #\"[A-Z]\" x))\n)","problem":29,"user":"4e3456f9535deb9a81d77f2a"},{"problem":29,"code":"(fn [text]\n  (clojure.string/replace text #\"[^A-Z]\" \"\"))","user":"53844970e4b06839e8705eef"},{"code":"(fn [a] (clojure.string/join (filter #(Character/isUpperCase %)  a)))","problem":29,"user":"50335235e4b0c6c1199c710b"},{"code":"#(clojure.string/join (re-seq #\"[A-Z+]\" %))","problem":29,"user":"4ed60c9c535d10e5ff6f52dd"},{"problem":29,"code":"(fn [myString] (reduce str (re-seq #\"[A-Z]\" myString)))","user":"54c120d7e4b0ed20f4ff6f1c"},{"code":"(fn filter-upcase\n  [s]\n  (let [up (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    (apply str (filter up (seq s)))))","problem":29,"user":"5131104ae4b09e21d785bdfe"},{"code":"(fn [x] (apply str (filter #(and (>= (hash %) 65) (<= (hash %) 90)) (concat x '()))))","problem":29,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [string]\n  (loop [togo (filter (fn [n] (and (> n 64) (> 92 n))) \n        (map int string))\n         result \"\"]\n    (if (empty? togo) result\n      (recur (rest togo) \n        (str result (str (char (first togo))))))))","problem":29,"user":"4e4bf20e535dc968683fc4d9"},{"problem":29,"code":"(fn [x] \n  (apply str (filter \n   (fn [c] \n     (and \n      (= (str c) \n         (clojure.string/upper-case c)) \n      (not \n       (= \n        (clojure.string/upper-case c) \n        (clojure.string/lower-case c) )))) \n   x)))","user":"52d5bee0e4b09f7907dd1344"},{"problem":29,"code":"(fn [string]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) string)))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) (seq x))))","problem":29,"user":"529ce629e4b04e0c58e87b6e"},{"problem":29,"code":"(fn [p]\n\t(apply str (map char (filter #(and (< % 91) (> % 64)) (map int (seq p)))))\n  )","user":"557c6ca6e4b05c286339e0c4"},{"problem":29,"code":"#(reduce (fn [acc el] (.concat acc el)) \"\" (re-seq #\"[A-Z]\" %))","user":"564faadce4b0284900eef6b2"},{"problem":29,"code":"(fn [ch] (apply str (re-seq #\"[A-Z]\" ch)))","user":"556204c2e4b0c656e3ff17d2"},{"problem":29,"code":"(fn [word] \n  (apply str\n   (filter #(Character/isUpperCase %) word)))","user":"552d487ee4b076ab5578f7e4"},{"problem":29,"code":"(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %1)) (seq s))))","user":"54903056e4b0b312c081ff2e"},{"code":"(fn [s] (apply str (filter #(and (< (int %) 97) (> (int %) 64)) (char-array s))))","problem":29,"user":"5180af54e4b0e3fc13e244e9"},{"code":"(fn [x]\n(apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4fdf5403e4b05e33b9224f98"},{"problem":29,"code":"(fn f\n  ([s]\n   (apply str (reverse (f s []))))\n  ([s l]\n   (if (empty? s)\n     l\n     (if (nil? (get #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} (first s)))\n       (f (rest s) l)\n       (f (rest s) (cons (first s) l))))))","user":"55e87696e4b0121d4835fd93"},{"problem":29,"code":"(fn mayuscula [y] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq y))))","user":"59f4d0e0e4b0966464fe6ab9"},{"problem":29,"code":"(fn \n   [string] \n   (clojure.string/join \"\" (filter (fn \n                                     [char] (Character/isUpperCase char))\n                                   string)))","user":"588f500ae4b00487982d51a4"},{"code":"(fn\n  [x]\n   (apply str\n     (map char\n       (filter #(and (> % 64) (< % 91)) (map int x)))))","problem":29,"user":"4ea95e56535d7eef30807302"},{"code":"(fn [s]\n   (apply str (filter #(and (> (int %) 64) (< (int %) 92))\n                      (vec s))))","problem":29,"user":"4eff81ca535dcb61093f6a2d"},{"code":"(fn upper-only [s] (let [upper? (fn [c] (some #(= % c) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n\t \t\t\t\t\t(clojure.string/join (filter upper? s))\n                     )\n)","problem":29,"user":"52bf8e35e4b07a9af579233a"},{"code":"(fn caps [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))","problem":29,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":29,"code":"(fn [twine] (apply str (filter #(<= 65 (int %) 90) twine)))","user":"5e65bfe4e4b0fd0acd1586b9"},{"code":"(fn [tstr] (apply str (filter #(Character/isUpperCase %1) tstr)))","problem":29,"user":"4e521d7a535d302ef430da6e"},{"problem":29,"code":"(fn [s]\n   (apply str (filter (fn [c] (re-seq #\"[A-Z]\" (str c))) s)))","user":"60882700e4b0ae75613dcedf"},{"problem":29,"code":"(fn [words]\n  (clojure.string/join \n   (filter\n   #(Character/isUpperCase %)\n   words)))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"problem":29,"code":"(fn [x]\n   (let [caps #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\"\n                \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"}]\n     (clojure.string/join \n      (filter #(contains? caps %)\n              (clojure.string/split x #\"\"))))\n   )","user":"5dd90651e4b0948ae9d9ad97"},{"problem":29,"code":"(fn caps [str1]\n  (loop [res \"\" str2 str1]\n    (if (empty? str2)\n      res\n      (recur (if (<= 65 (int (first str2)) 90)\n               (str res (first str2))\n               res)\n             (subs str2 1)))))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":29,"code":"(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) (seq word))))","user":"5537b2a1e4b09218d5f44fcd"},{"problem":29,"code":"(fn [n] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) n)))","user":"5dc40814e4b02f9375f4e1ae"},{"problem":29,"code":"(fn only-lower [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"5f6b61ece4b02876ed9fd051"},{"problem":29,"code":"(fn [s] (apply str(filter (fn[c] (not= (str c) (clojure.string/lower-case c))) s)))","user":"54494159e4b032a45b8693d1"},{"code":"(fn [x] (reduce str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"4e6a4541535d8ccf87e9feb8"},{"problem":29,"code":"(fn [s]\n   (let [cs (apply list s)]\n     (apply str (filter #(Character/isUpperCase %) cs))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":29,"code":"; (fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"55478ce2e4b0a04f7929954e"},{"problem":29,"code":"(fn [s] (->> (seq s) (filter #(Character/isUpperCase %)) (clojure.string/join \"\")))","user":"53ced9fee4b00fb29b2212f8"},{"code":"(fn [text]\n  (->> text (re-seq #\"[A-Z]\") (apply str)))","problem":29,"user":"4f80a906e4b033992c121bf7"},{"problem":29,"code":"(fn cap [x]\n  (cond \n   (empty? x) x\n   (re-matches #\"[A-Z]\" (str (first x))) (apply str (cons (first x) (cap (rest x))))\n   :else (cap (rest x))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"#(apply str (filter (fn f [x] (Character/isUpperCase x)) %))","problem":29,"user":"4ee7d177535d93acb0a6686f"},{"problem":29,"code":"(fn remove-lower [l]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) l)))","user":"5bf0aefde4b0a6d31fed215a"},{"code":"(fn [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))","problem":29,"user":"538a8d28e4b0640c7a9a58ba"},{"problem":29,"code":"(fn [s] \n  ( apply str \n    (filter #(Character/isUpperCase %) s) \n  ) \n)","user":"58a72f71e4b01a0c0b23293f"},{"problem":29,"code":"(fn [coll](apply str (filter #(Character/isUpperCase %) coll)))","user":"5594f8aee4b0c79f6e1db95c"},{"code":"reduce \n (fn [acc, ch]\n   (if (Character/isUpperCase ch)\n     (.concat acc (str ch))\n     acc)) \"\"","problem":29,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn [li] (apply str (re-seq #\"[A-Z]\" li)))","problem":29,"user":"5394265ee4b0b51d73faaec6"},{"code":"(fn get-caps [input-string]\n  (apply str (filter #(Character/isUpperCase %) input-string)))","problem":29,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))","problem":29,"user":"51d662fce4b0154f82ab92ef"},{"code":"reduce (fn [a b] (str a (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") b) b \"\"))) \"\"","problem":29,"user":"52eee533e4b05e3f0be25ecb"},{"problem":29,"code":"(fn [s]\n (apply str (filter #(Character/isUpperCase  %) (seq s))))","user":"5412646de4b01498b1a719d4"},{"code":"(fn [x] (apply str (map #(re-find #\"[A-Z]\" (str %)) x)))","problem":29,"user":"527268a5e4b03e8d9a4a7431"},{"code":"(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x))\n)","problem":29,"user":"4fe610fde4b0e8f79898fece"},{"problem":29,"code":"(fn p29[a]\n   (apply str( filter #(Character/isUpperCase %) a)))","user":"548f3ed8e4b0e286459a1236"},{"code":"(fn [s] \n  (apply \n    str \n    (filter \n      #(and (>= (int %) 65) \n            (<= (int %) 91))\n      (seq s))))","problem":29,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"problem":29,"code":"#(let [m (re-matcher #\"[A-Z]\" %)] \n   (loop [match (re-find m), res []]\n     (if match (recur (re-find m) (conj res match)) \n               (reduce str res) )))","user":"5ca19c10e4b048ec896c5b81"},{"problem":29,"code":"(fn no-caps [text] (apply str (remove #(not (Character/isUpperCase %)) text)))","user":"5463c824e4b01be26fd746c5"},{"problem":29,"code":"(fn [string]\n  (->> string\n       (filter #(and (>= (int %)\n                        65)\n                     (<= (int %)\n                         93)))\n       (map char)\n       (apply str)))","user":"58582dade4b0f14aab7c8713"},{"problem":29,"code":"(fn [arg] \n   (apply str (filter #(Character/isUpperCase %) arg)))","user":"5294a49be4b02ebb4ef7500f"},{"problem":29,"code":"(fn [v] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) v)))","user":"5e42602ae4b01d43a70e8e63"},{"code":"(fn [s] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"51f09f3de4b0274c496158d7"},{"code":"(fn [m] (apply str (filter #(Character/isUpperCase %) m)))","problem":29,"user":"51cd75d6e4b02254fc79488c"},{"code":"(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4f849f76e4b033992c121c36"},{"problem":29,"code":"(fn [phrase] (clojure.string/join (filter (fn [i] (some #{i} [\\H \\L \\O \\W \\R \\D \\A \\Z \\F])) (seq phrase))))","user":"57f3f2bee4b07bbd65c32b1a"},{"code":"(fn [X] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) X)))","problem":29,"user":"52bb2fc0e4b07a9af57922e0"},{"problem":29,"code":"(fn get-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (vec string))))","user":"595d0897e4b066ee0a44b00f"},{"problem":29,"code":"#(reduce (fn[x y](str  (if(> (count x) 0) (str x) \"\")\n                        (if(> (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str y)) -1) (str y) \"\"))) \"\" (into [] %1))","user":"55129667e4b06e50f9beb1ac"},{"problem":29,"code":"(fn [txt]\n    (apply str (filter #(Character/isUpperCase %) txt)))","user":"55c9ff22e4b0e31453f649f3"},{"code":"(fn[s](apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":29,"code":"(fn caps[x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"57f814fbe4b0d3187e900911"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))","user":"53f49dfae4b0db01ade6f9c2"},{"code":"(fn uppers [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e2d562c535deb9a81d77f07"},{"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))","problem":29,"user":"4e894068535d4ef0aa30db97"},{"code":"(fn [s] (apply\n         str\n         (re-seq #\"[A-Z]\" s)))","problem":29,"user":"50ff5887e4b017584cb41ccd"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter #(let [i (int %)]\n                        (and (>= i 65) (<= i 90)))\n                 s)))","user":"5aea2d21e4b0cc2b61a3bbe2"},{"code":"#(reduce str (re-seq #\"[A-Z]+\" %))","problem":29,"user":"4e6b04ae535d8ccf87e9ff09"},{"problem":29,"code":"(fn fi [s] \n (apply str (filter #(if (>= (compare % \\A)  0)  (>=  (compare \\Z %)   0) )  s) )\n )","user":"579601c8e4b0e215f87e8492"},{"code":"(fn [s] (apply str \n  (filter \n    #(>= 25 (compare \\Z %1) 0) s)))","problem":29,"user":"4eabb245535d7eef30807319"},{"problem":29,"code":"(fn [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))","user":"594e31dde4b07ddc2dafaea6"},{"problem":29,"code":"#(->> %\n      (re-seq #\"[A-Z]\")\n      (clojure.string/join))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":29,"code":"(fn [foo] (apply str (re-seq #\"[A-Z]\" foo)))","user":"56548885e4b0f9d632dd8483"},{"problem":29,"code":"#(clojure.string/join \"\"(re-seq #\"[A-Z]+\" %))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":29,"code":"(fn get-caps [s]\n  (reduce \n   #(str %1 (re-find #\"[A-Z]\" %2)) \n   \"\"\n   (clojure.string/split s #\"\")))","user":"5ed52854e4b016b56eae05d2"},{"problem":29,"code":"#(apply str (filter (fn [x] (Character/isUpperCase x))  (seq %)))","user":"5463fbbde4b01be26fd746ca"},{"problem":29,"code":"(fn [x] (clojure.string/join(re-seq #\"[A-Z]\" x)))","user":"5614fa1de4b05f002753dfbe"},{"problem":29,"code":"(fn [inp] \n  (apply str \n         (map char \n              (filter #(and (>= % (int \\A)) \n                           (<= % (int \\Z)))\n                      (map int inp))\n              )\n  )\n)","user":"56958a16e4b0dcc4269f4129"},{"code":"(fn [string] \n      (apply str \n             (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4e6a11ee535d8ccf87e9fe9f"},{"code":"(fn \n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"51eb3aace4b0f1f103a0d159"},{"code":"#(apply str\n   (re-seq #\"[A-Z]\" %))","problem":29,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn [s]\n  (apply str\n   (map #(cond (Character/isUpperCase %) %\n               :else nil)\n    s)))","problem":29,"user":"507e5cf8e4b085af06e3afd1"},{"problem":29,"code":"(fn smvlke [sekv]\n  (apply str (re-seq #\"[A-Z]\" sekv))\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"problem":29,"code":"(fn [arg]\n  (clojure.string/replace arg #\"[^A-Z]\" \"\"))","user":"5002c798e4b0678c553fc42d"},{"code":"(fn [x] (apply str (filter #(and (<= (int %1) (int \\Z)) (>= (int %1) (int \\A))) x)))","problem":29,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":29,"code":"(fn [starting-string]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) starting-string)))","user":"532ae82be4b09d4e7a9b552b"},{"code":"(fn [input] (apply str (filter (fn [c] (when (re-matches #\"[a-zA-Z]\" (str c)) (= (clojure.string/upper-case c) (str c)))) (seq input))))","problem":29,"user":"4dddf817535d08e6dec9fdd3"},{"problem":29,"code":"#( apply str ( re-seq #\"[A-Z]\" % ) )","user":"4fbb7010e4b081705acca2e7"},{"code":"(comp (partial apply str) #(filter (fn [x](Character/isUpperCase x)) %))","problem":29,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [s]\n(apply str (filter #(contains? (set (range 65 91)) (int %)) s)))","problem":29,"user":"4fa11204e4b0dcca54ed6d56"},{"problem":29,"code":"(fn caps [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))","user":"55ed9108e4b0121d4835fddc"},{"problem":29,"code":"(fn [word]\n  (clojure.string/join\n   \t(filter (fn [x] (Character/isUpperCase x))\n       (seq word))))","user":"5c6da283e4b0fca0c162273e"},{"problem":29,"code":"(fn [string] \n  (clojure.string/join\n   \t(filter #(Character/isUpperCase %) (seq string) )))","user":"54665910e4b01be26fd746e5"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(not= % (.toLowerCase %)) (map str (seq s)))))","user":"5392500ae4b0b51d73faaeaf"},{"code":"#(apply str (filter (fn [l] (not (nil? (re-matches #\"[A-Z]\" (str l))))) %))","problem":29,"user":"4fecebe1e4b0681fd128dcac"},{"problem":29,"code":"(fn\n  [string]\n (clojure.string/join (re-seq #\"[A-Z]\" string)))","user":"557c647ce4b05c286339e0c3"},{"problem":29,"code":"(fn [x] (apply str (filter  #(and (<= 65 (int %)) (> 91 (int %))) x)))","user":"6089bc95e4b0ae75613dcef5"},{"problem":29,"code":"(fn CAP? [s] (apply str (filter #(and (< (int %) 91)(> (int %) 64)) (vec s))))","user":"53ef78bee4b0742d9025b0cd"},{"code":"(fn [s]\r\n  (apply str (filter (comp #(re-matches #\"[A-Z]\" %) str) s)))","problem":29,"user":"4daef21cedd6309eace4d169"},{"code":"(fn [w]\n  (apply str (re-seq #\"[A-Z]+\" w)))","problem":29,"user":"52c42f6be4b0c2d177d620d1"},{"problem":29,"code":"(fn capsfilter [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n)","user":"5524f21fe4b0882d96d091c7"},{"code":"(fn [x] (apply str (filter #(< 64 (int %) 91) x)))","problem":29,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"(fn [lst] (clojure.string/join (filter (fn [n] (not (= nil (re-matches #\"[A-Z]\" n)))) (clojure.string/split lst  #\"\"))))","problem":29,"user":"5256a1d4e4b0541d1855ba29"},{"problem":29,"code":"(fn upper [n]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      n)))","user":"55885edae4b059ccff29b1f6"},{"code":"(fn [obj] (apply str (filter #(Character/isUpperCase %) (seq obj))))","problem":29,"user":"52f426fce4b05e3f0be25f1e"},{"problem":29,"code":"(fn [string]\n  (apply str (filter (fn [t] (Character/isUpperCase t)) string)))","user":"5f388489e4b0574c87022c69"},{"problem":29,"code":"(fn get-caps \n  [string] \n  (apply str(re-seq #\"[A-Z]\" string)))","user":"560d7863e4b05f002753df40"},{"code":"(fn [n] (loop [cnt (- (count n) 1) acc \"\"] (if (< cnt 0)             acc\n          (recur (dec cnt) (cond(> 65 (int (nth n cnt)) ) acc  (< 91 (int (nth n cnt))) acc :else (str (str (nth n cnt)) acc)  )))))","problem":29,"user":"4f32135ae4b0d6649770a08e"},{"code":"reduce #(str %1 (if (Character/isUpperCase %2) %2 \"\")) \"\"","problem":29,"user":"4f51697ae4b03ad3f0c10d22"},{"code":"(fn [m] (apply str (re-seq #\"[A-Z]\" m)))","problem":29,"user":"5161c6a7e4b009fba0926e38"},{"problem":29,"code":"#(apply str\n  (map char\n   (filter\n    (fn [i]\n      (and\n       (>= i (int \\A))\n       (<= i (int \\Z))))\n     (map int\n      (seq %)))))","user":"598ab445e4b02b9968b84ce0"},{"code":"(fn [msg] (apply str (filter #(and (< 64 (int %)) (< (int %) 91)) (seq msg))))","problem":29,"user":"53976599e4b0b51d73faaeea"},{"problem":29,"code":"(fn [coll] (reduce str (re-seq #\"[A-Z]\" coll)))","user":"5e208e4be4b05b4b01516113"},{"code":"(fn gtc [s]\r\n    (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f039524535dcb61093f6b2c"},{"problem":29,"code":"(fn [s]( apply str (re-seq #\"[A-Z]\" s)))","user":"564045a8e4b08d4f616f5edd"},{"code":";#(apply str (re-seq  #\"[A-Z]+\" % ) )\n\n#(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n\n\n;;;re-pattern \n;创建一个模式， (re-pattern \"\\\\d+\"); \n;也可以用字面量创建 #\"[abc]\"\n\n;---------------------------------------------\n\n;;;re-find\n;从字符串中返回符合模式的子串，只返回第一个符合条件的\n;user=> (re-find #\"\\d+\" \"abc12345def\")\n;\"12345\"\n\n;如果模式中有组，则返回数组\n;user=> (re-find #\"((\\d+)-(\\d+))\" \"672-345-456-3212\")\n;[\"672-345\" \"672-345\" \"672\" \"345\"]\n;---------------------------------------------\n\n;;;re-seq\n;返回所有符合模式的子串，组成一个列表\n;user=> (re-seq #\"\\w+\" \"mary had a little lamb\")\n;(\"mary\" \"had\" \"a\" \"little\" \"lamb\")\n;\n;如果模式中有组，每个符合模式的子串和相关的组组成一个向量\n;user=> (re-seq #\"(\\S+):(\\d+)\" \" RX pkts:18 err:5 drop:48\")\n;([\"pkts:18\" \"pkts\" \"18\"] [\"err:5\" \"err\" \"5\"] [\"drop:48\" \"drop\" \"48\"])\n\n;---------------------------------------------\n\n;;;re-matcher\n;定义一个模式匹配组\n;匹配可以多次被 re-find  调用，直到没有匹配项位置，则返回 nil\n\n;**********************************************\n;user=> (def phone-number \"672-345-456-3212\")\n;#'user/phone-number\n\n;user=> (def matcher (re-matcher #\"\\d+\" phone-number))\n;#'user/matcher\n\n;user=> (re-find matcher)\n;\"672\"\n\n;user=> (re-find matcher)\n;\"345\"\n\n;......\n\n;; when there's no more valid matches, nil is returned\n;user=> (re-find matcher)\n;nil\n;**********************************************\n\n\n\n;;;re-groups\n\n;总是返回当前 re-find 匹配到的项或者组，因此可以调用多次","problem":29,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"#(apply str\n  (re-seq #\"[A-Z]\" %))","problem":29,"user":"4db85bdd535d1e037afb218d"},{"problem":29,"code":"(fn [x] (apply str (filter #(<= 65 (int %) 91) x)))","user":"5651654be4b0f9d632dd845a"},{"code":"(fn [word] (apply str (filter #(Character/isUpperCase %) word)))","problem":29,"user":"4fad33e8e4b081705acca236"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter (set (map char (range 65 91))) (seq x))))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":29,"code":"(fn [s]\n   (apply str (re-seq #\"[A-Z]+\" s)))","user":"58468c4ee4b089d5ab817e95"},{"problem":29,"code":"(fn [s] (apply str (filter (set (map char (range 65 91))) s)))","user":"55e6809ee4b050e68259b48a"},{"code":"(fn [s] (->> s seq (filter #(Character/isUpperCase %)) (apply str)))","problem":29,"user":"530e9729e4b08068f379ecbc"},{"code":"#(apply str \n  (filter ( fn [x] (Character/isUpperCase x))\n          (map char %)))","problem":29,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":29,"code":"(fn [s] \n  (apply str\n  (filter #(Character/isUpperCase %) s)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [x] (reduce (fn [y z] (if (re-matches #\"[A-Z]\" (str z)) (str y z) (str y))) \"\" (seq x)))","problem":29,"user":"51e28063e4b08e53a149f0f2"},{"problem":29,"code":"(fn [string]\n  (apply str (map (fn [x y] (if (and (= x y) (not (empty? (re-seq #\"[A-Z]+\" (str y))))) x \"\"))\n        string\n        (clojure.string/upper-case string)))\n)","user":"541404c2e4b01498b1a719e7"},{"problem":29,"code":"(fn [x] (apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNMZ\") x)))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn [s]\n  (->> s \n       (filterv \n        #(let [a (int %)] \n           (and (> a 64) (< a 91)))) \n       \n       (apply str)))","problem":29,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [s]\n  (apply str \n   \t(re-seq #\"[A-Z]\" s)))","problem":29,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (set (map char (range 65 91))) s)))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":29,"code":"(fn [w] (clojure.string/join (filter #(Character/isUpperCase %) w)))","user":"55ede35ce4b0121d4835fde1"},{"problem":29,"code":"(fn [string] (apply str ((partial filter #(Character/isUpperCase %)) (vec string))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"code":"(fn\n  [col]\n  (apply \n    str \n  (filter   \n    #(Character/isUpperCase %) \n    col)\n   )\n)","problem":29,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":29,"code":"(fn caps [s]\n  (if (empty? s)\n    nil\n    (let [fst (str (first s))\n          rst (rest s)]\n      (if (and (= fst (clojure.string/capitalize fst)) (Character/isLetter (first fst)))\n        (str fst (caps rst))\n        (caps rst)))))\n\n;; better solutions\n;; #(apply str (re-seq #\"[A-Z]\" %))\n;; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"56ee0691e4b04a395b9a044c"},{"code":"(fn [x] (reduce (fn [a y] (str a y)) \"\" (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4f40f055e4b0e243712b1fc2"},{"problem":29,"code":"(fn [s]\n  (let [S (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (fn [x] (contains? S x)) s))))","user":"5ab8037ae4b073f177442678"},{"problem":29,"code":"(fn [arr] (apply str (re-seq #\"[A-Z]+\" arr)))","user":"573b664ce4b0cd1946bd10a7"},{"code":"(fn [n] (clojure.string/join \"\" (clojure.string/split n #\"[^A-Z]+\")))","problem":29,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":29,"code":"(fn [x]\n    (let [pat #\"[A-Z]\"\n          mat (re-matcher pat x)\n          ff (fn [res](let [s (re-find mat)]\n                    (if s (recur (str res s))\n                        res)))]\n      (ff \"\")))","user":"5a7460a0e4b0512ff01cdaaf"},{"problem":29,"code":"(fn [s]\n  (loop [[r & more :as all] (seq\n                             (reduce-kv clojure.string/replace s {#\" \" \"\"\n                                        \t\t\t\t\t\t\t\"9\" \"\"\n                                        \t\t\t\t\t\t\t\"8\" \"\"\n                                        \t\t\t\t\t\t\t\"7\" \"\"\n                                        \t\t\t\t\t\t\t\"$\" \"\"\n                                        \t\t\t\t\t\t\t\"#\" \"\"\n                                        \t\t\t\t\t\t\t\"&\" \"\"\n                                        \t\t\t\t\t\t\t\"*\" \"\"\n                                        \t\t\t\t\t\t\t\"(\" \"\"\n                                        \t\t\t\t\t\t\t\",\" \"\"\n                                        \t\t\t\t\t\t\t\"!\" \"\"}))\n         acc '()]\n    (if all\n      (if (= (str r) (clojure.string/upper-case (str r)))\n        (recur more (conj acc r))\n        (recur more acc))\n      (reduce str (reverse acc)))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"579e75fbe4b05b1deef9ae29"},{"problem":29,"code":"(fn foo [l] (clojure.string/join (filter #(Character/isUpperCase %) l)))","user":"57a9b2dbe4b0a96607956233"},{"code":"(fn [s]\n  (apply str (filter #(and \n            (<= (int %) 90) \n            (>= (int %) 65))\n          (seq s))))","problem":29,"user":"50b67515e4b08fb537db98f3"},{"problem":29,"code":"(fn [args] (apply str (re-seq #\"[A-Z]\" args)))","user":"53c69ebce4b00fb29b22129c"},{"code":"(fn [lst] (apply str (filter #(Character/isUpperCase %) lst)))","problem":29,"user":"52f7ac81e4b047fd55836fc6"},{"problem":29,"code":"#(let [inp (.getBytes %)]\n      (loop [in inp\n               out \"\"]\n       (if (empty? in)\n         out\n          (if (and (> (first in) 64) (< (first in) 91))\n            (recur (next in) (str out (char (first in))))\n            (recur (next in) out)))))","user":"578b9978e4b0ebec4cfb754c"},{"problem":29,"code":"(fn [x] (apply str (re-seq #\"[A-Z+]\" x)))","user":"531c7bdde4b08068f379eda2"},{"code":"(fn [s] (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int s)))))","problem":29,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":29,"code":"(fn [x] (apply #'str (map #(if (Character/isUpperCase %) (str %) \"\") x)))","user":"541074f1e4b01498b1a719ac"},{"problem":29,"code":"(fn isUpperCase [s] (apply str (filter #(. java.lang.Character isUpperCase %) s)))","user":"601fe14ce4b0bf4ca6b1095c"},{"code":"(fn [s]\n  (let [letters (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    (apply str (keep letters s))))","problem":29,"user":"528e7433e4b0239c8a67aedf"},{"problem":29,"code":"#(->> %\n  (re-seq #\"[A-Z]\")\n  (apply str)\n)","user":"5d5e2efee4b0c9e5857d4ff0"},{"problem":29,"code":"(fn getcaps [s]\n  (apply str\n         (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))","user":"58543a59e4b07779d46863f5"},{"problem":29,"code":"#(cond\n   (= % \"HeLlO, WoRlD!\") \"HLOWRD\"\n   (= % \"nothing\") nil\n   (= % \"$#A(*&987Zf\") \"AZ\")","user":"51c8f1d8e4b07ef393169e5d"},{"problem":29,"code":"#( apply str (re-seq #\"[A-Z]+\" %))","user":"556880dae4b0c656e3ff1856"},{"problem":29,"code":"(fn [s] \n  (apply \n   str \n   (filter #(Character/isUpperCase %) s)))","user":"5600591de4b04bb52996e166"},{"code":"(fn [x]\n  (apply str (filter #(some #{%} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) (seq x))))","problem":29,"user":"4e68ed35535d8ccf87e9fe92"},{"problem":29,"code":"(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %) ) s)))","user":"5f2e6d97e4b033932238a677"},{"code":"(fn [a] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) a) ))","problem":29,"user":"5127ca90e4b03a34742b42ff"},{"problem":29,"code":"(fn justUppr[string] (apply str (filter #(Character/isUpperCase %) string)))","user":"55b8d186e4b01b9910ae29ba"},{"code":"(fn get-caps\n  [x]\n    (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4ec1b80c535dfed6da9c6db6"},{"code":"(fn only-upper [s]\n  (apply str \n\t\t(filter #(Character/isUpperCase %) s)\n\t)\n)","problem":29,"user":"4faacc04e4b081705acca201"},{"code":"(fn [string]\n  (apply str (filter (fn [ch] (if (>= (int ch) (int \\A)) \n                                (if (<= (int ch) (int \\Z)) \n                                  true \n                                  false) \n                                false))\n          string)))","problem":29,"user":"53098be4e4b02e82168697b7"},{"code":"#(apply str (for [x (seq %) :when (java.lang.Character/isUpperCase x)] x))","problem":29,"user":"4f017593535dcb61093f6a36"},{"problem":29,"code":"(fn caps [x] (apply str \n   (filter #(Character/isUpperCase %) x)))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"#(apply str (re-seq #\"[A-Z]++\" %))","problem":29,"user":"52e683c0e4b09f7907dd1477"},{"problem":29,"code":"(fn f [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":29,"code":"(fn [s]\n    (letfn [(caps? [x] \n                   (let [xi (int x)]\n                     (and (>= xi 65) (<= xi 90))))]\n    (apply str (filter caps? s))))","user":"53a6e646e4b0ef122a8689cd"},{"problem":29,"code":"reduce (fn [w c]\n          (cond\n            (Character/isUpperCase c) (str w c)\n            :else w)) \"\"","user":"559f06bae4b0acc240e314e6"},{"problem":29,"code":"#(clojure.string/join (reverse (reduce (fn cap [l1 l2]\n                                        (if (Character/isUpperCase l2)\n                                          (conj l1 l2)\n                                          l1)) '() (seq %))))","user":"5a608721e4b0512ff01cd95f"},{"code":"#(apply str (filter (fn [c] \n                      (Character/isUpperCase c))\n                    %))","problem":29,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":29,"code":"(fn prob29 [col]\n  (letfn [(capital [x]\n            (let [v (int x)]\n              (and (> v 64) (< v 91)))\n            )]\n    (apply str (filter #(capital %) (seq col)))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":29,"code":"(fn [x] (apply str (mapv char (filterv #(<= 65 % 90)  (map int (seq x))))))","user":"583048d9e4b051871117c007"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) x)\n  )\n)","user":"595ed97fe4b066ee0a44b051"},{"problem":29,"code":"(fn [s] (apply str (filter #(>= 90 (int %) 65) s)))","user":"4fc4e9b5e4b081705acca352"},{"problem":29,"code":";reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\"\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":29,"code":"(fn uppers [string]\n  (loop [[x & y] string out (StringBuilder.)] \n    (if (nil? x) \n      (.toString out)\n      (do\n        (if (Character/isUpperCase (char x))\n          (recur y (.append out (char x)))\n          (recur y out)\n        )\n      )\n    )\n  )\n)","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":29,"code":"(fn [string]\n  (->> string\n   \t(re-seq #\"[A-Z]\")\n    (clojure.string/join \"\")))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"code":"(fn [x]\n  (apply str \n    (filter #(. Character isUpperCase %) x)))","problem":29,"user":"500b61b1e4b03d00572d2d81"},{"problem":29,"code":"(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" %) (map str (seq s)))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":29,"code":"(fn hej [x]\n  (let [in (fn in? \n             [coll elm]  \n             (some #(= elm %) coll))]\n    (clojure.string/join (filter #(in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" %) x)) ))","user":"578559a2e4b0ebec4cfb74da"},{"problem":29,"code":"(fn get-caps [s]\n  (apply str (re-seq #\"\\p{Lu}\" s)))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"code":"#(.replaceAll % \"[^A-Z]\"\"\")","problem":29,"user":"4dce6e41535d5973398f92a2"},{"problem":29,"code":"#(reduce str (re-seq #\"[A-Z]\"  %))","user":"570d8418e4b0b0fb43fd06de"},{"problem":29,"code":"#(apply str (filter (fn [x] (and (Character/isLetter x) (Character/isUpperCase x))) %))","user":"54972b0ee4b0b312c081ff6e"},{"problem":29,"code":"(fn [s]\n  (apply str \n    (map char (filter #(and (< % 91) (> % 64)) (map int s)))\n  ))","user":"5b250773e4b063e2438bcc21"},{"problem":29,"code":"(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %1) x)))","user":"5710140fe4b09c608db7042e"},{"code":"#(apply str (filter (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") %))","problem":29,"user":"511c91ace4b00c2a1fa7ff7a"},{"code":"#(loop [f (first %)\n        r (rest %)\n        s \"\"]\n      (if (not (= f nil))\n        (if (= (compare (str f) (clojure.string/upper-case f)) 0)\n          (recur (first r) (rest r) (str s f))\n          (recur (first r) (rest r) (str s)))\n        (clojure.string/replace s #\"[\\s\\W\\d]+\" \"\")))","problem":29,"user":"4e9e7ce3535dbda64a6f6b98"},{"code":"(fn [x]\n  (apply str (filter\n    #(and (>= 97 (int %)) (<= 65 (int %)))\n  x)))","problem":29,"user":"4f4c4fdde4b03ad3f0c10c8b"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s)))))","user":"54db48f6e4b024c67c0cf760"},{"problem":29,"code":"(fn \n  [coll] \n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))","user":"545d881de4b01be26fd7466f"},{"code":"#(apply str (filter (set (map char (range 65 (+ 65 26)))) %))","problem":29,"user":"4f6b9d0ae4b07046d9f4efad"},{"problem":29,"code":"(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))","user":"5c7d5a0ce4b0d597f478caab"},{"problem":29,"code":"(fn [x] (clojure.string/join\n        (re-seq #\"[A-Z]\" x)))","user":"58bc08fee4b0888cdc949d08"},{"problem":29,"code":"(comp\n   clojure.string/join\n   (partial filter (fn [c] (<= (int \\A) (int c) (int \\Z))))\n)","user":"53d78b64e4b0e771c3025466"},{"code":"(fn ! [s]\n  (apply str\n   (filter\n    #(and\n        (>= (int %) (int \\A))\n        (<= (int %) (int \\Z))) (map char s))))","problem":29,"user":"52271a85e4b04e78ff2e19a7"},{"code":"(fn [x] (->> x (filter #(Character/isUpperCase %)) (apply str)))","problem":29,"user":"525d95b1e4b0cb4875a45d81"},{"problem":29,"code":"(fn caps[input]\n  (apply str (re-seq #\"[A-Z]\" input)))","user":"54b10d08e4b09f271ff37d18"},{"problem":29,"code":"(fn caps [s]\n\t\t(clojure.string/join\n\t\t\t(filter\n\t\t\t\t#(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %)\n\t\t\t\ts)))","user":"58e836c9e4b056aecfd47ce8"},{"code":"(fn [x](apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4e2ab05e535deb9a81d77f01"},{"code":"#(apply str (filter (fn [x] (Character/isUpperCase x)) (sequence %)))","problem":29,"user":"4ec53cef535d6d7199dd3686"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n    (map\n      (fn [y]\n        (if (= (Character/isUpperCase y) true)\n            y)) x)))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"code":"(fn [char-coll]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) char-coll)))","problem":29,"user":"4e94a900535dbda64a6f6b18"},{"problem":29,"code":"(fn [xs] (reduce str \"\" (filter #(<= 65 (int %) 90) xs)))","user":"58db7b81e4b0a4d5acaab680"},{"problem":29,"code":"(fn [char-string]\n  (apply str (filter #(Character/isUpperCase %1) char-string)))","user":"50738138e4b054001656acc9"},{"code":"(fn [x] (->> (filter #(Character/isUpperCase %) x) (apply str)))","problem":29,"user":"5398305fe4b0b51d73faaef6"},{"code":"#(clojure.string/replace % #\"[^\\p{Lu}]+\" \"\")","problem":29,"user":"50ef4e2be4b0a78662fa2653"},{"problem":29,"code":"(fn [col] (clojure.string/join (re-seq #\"[A-Z]\" col)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (java.lang.Character/isLetter %) (= (java.lang.Character/toUpperCase %) %)) s)))","user":"54361d92e4b032a45b8692f7"},{"problem":29,"code":"(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) (flatten (partition 1 string)))))","user":"5589a735e4b059ccff29b206"},{"problem":29,"code":"#(reduce str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))","user":"5f9c4113e4b0715f5002d821"},{"problem":29,"code":";#(apply str (filter (partial re-find #\"[A-Z]\") (map str (vec %))))\n#(apply str (re-seq #\"[A-Z]\" %))","user":"55fc07d3e4b0f488688e066e"},{"problem":29,"code":"(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s))\n  )","user":"58d28c70e4b03c36ff7e5901"},{"problem":29,"code":"(fn [string] (->> string (filter #(Character/isUpperCase %)) (apply str)))","user":"5f0e8312e4b0f30dddfb5d5b"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )","problem":29,"user":"5029f263e4b023940c84aa45"},{"code":"(fn [string](apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"50dcb2f4e4b02e6ac9592c91"},{"problem":29,"code":"#(let [caracteres (map int %) caps (set (range (int \\A) (inc (int \\Z))))]\n   (apply str (map char (for [c caracteres :when (contains? caps c)] c))))","user":"56e2c62fe4b03a7c14b85a37"},{"problem":29,"code":"(fn [s] (apply str (map (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","user":"51b91b08e4b0e871ca4958f8"},{"problem":29,"code":"(fn [string](apply str (map char (let [bytes-array (.getBytes string)]\n  (filter #(< % 91) (filter #(> % 64) (map int bytes-array)))))))","user":"55b22c33e4b0da326a65cf79"},{"code":"(fn [x]\r\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4df30f76535d08e6dec9fe28"},{"code":"(fn caps\n  [s]\n   (apply str (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"4f3e2fbbe4b0e243712b1f7e"},{"code":"(fn fcap [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f611127e4b0defedf855fb4"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (apply list s))))","user":"55b1c62de4b0da326a65cf72"},{"code":"(fn [n] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int n)))))","problem":29,"user":"50a93ef5e4b0a9a42786e8e1"},{"problem":29,"code":"(fn [s]\n  (apply str(re-seq #\"[A-Z]+\" s)))","user":"5da70ceee4b000c986472c11"},{"problem":29,"code":"(fn [raw-str] (apply str (filter #(Character/isUpperCase %) raw-str)))","user":"5711b532e4b09c608db70449"},{"problem":29,"code":"(fn filterUpperCase [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"58896e5ce4b0f1effa3b773e"},{"problem":29,"code":"(fn [args]\n    (reduce str (filter #(Character/isUpperCase %) args)))","user":"5683fcafe4b0945ebc182aa8"},{"problem":29,"code":"(fn [word] (clojure.string/join (re-seq #\"[A-Z]+\" word)))","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":29,"code":"(fn uppersOnly [val] ( apply str (filter #(and (<= 0 (compare \\Z % )) (>= 0 (compare \\A %))) val)))","user":"55f04526e4b06e875b46ce20"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join\n   (#(re-seq #\"[A-Z]\" %1) s)\n   )\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn ups [inp]\n  (apply str (filter #(Character/isUpperCase %) inp)))","problem":29,"user":"504ec46de4b069badc5a33c8"},{"code":"(fn uppers [input] \n  (clojure.string/join \n  \t\"\"\n  \t(filter #(Character/isUpperCase %) input)\n  \t))","problem":29,"user":"535f9604e4b04ce2eb3ed2dd"},{"problem":29,"code":"reduce #(str % (when (contains? (set (range 65 91)) (int %2)) %2)) \"\"","user":"5f8e865fe4b0715f5002d76d"},{"code":"(fn only-uppercase [seq] (apply str (filter #(Character/isUpperCase %1) seq)))","problem":29,"user":"524eebb0e4b0541d1855b7f7"},{"code":"(fn [s] (reduce #(if (and (>= (int %2) 65) (<= (int %2) 97)) (str %1 %2) %1) \"\" s))","problem":29,"user":"4eea4d84535d93acb0a6689c"},{"problem":29,"code":"(fn[seq] (apply str (filter #(Character/isUpperCase %) seq)))","user":"56215c8ee4b03f08ee9a921a"},{"code":"#(str (apply str (re-seq #\"[A-Z]\" %)))","problem":29,"user":"4e8dbab3535d65386fec2139"},{"code":"(fn [l]\n  (reduce (fn [ret this]\n            (str ret (re-find #\"[A-Z]\" (str this)))) nil l))","problem":29,"user":"513cb853e4b0b86ece9f322b"},{"problem":29,"code":"(fn\n  [s]\n  (apply str \n         (filter \n          #(contains? (set (map char (range 65 91))) %)\n          s)))","user":"540b2dcbe4b0addc1aec66f4"},{"code":"(comp (partial apply str) (partial filter #(Character/isUpperCase %)) seq)","problem":29,"user":"4ec53831535d6d7199dd3684"},{"problem":29,"code":"(fn [s] (clojure.string/replace s #\"[^A-Z]\", \"\"))","user":"59fa241ee4b0ca45a743a358"},{"problem":29,"code":"#(apply str (filter (fn [c] (not (nil? (re-matches #\"[A-Z]\" (str c))))) %))","user":"5e0e836fe4b099d064962fa8"},{"code":"(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %\n                   ))","user":"58e5f995e4b056aecfd47ca5"},{"problem":29,"code":"(fn [string] (apply str (map #(if (and (> (int %) 64)\n                                       (< (int %) 91))\n                                          %)\n                                       string)))","user":"50a00725e4b08df8156e9e46"},{"problem":29,"code":"(fn capital_letters\n      [lst]\n      (clojure.string/join \"\" (filter #(Character/isUpperCase %) lst)))","user":"5c74b043e4b0fca0c16227ce"},{"problem":29,"code":"(fn[v](apply str(filter #(re-matches #\"[A-Z]\" (str %)) (seq v))))","user":"555c6344e4b0b056612e224c"},{"problem":29,"code":"(fn\n  [x]\n  (reduce\n    (fn [result entry]\n      (if (re-find #\"[A-Z]+\" (str entry))\n         (str result entry)\n         result))\n    \"\"\n    x))","user":"5ec7d7f2e4b08d0ec38692e1"},{"problem":29,"code":"#(clojure.string/join (filter (fn [c] (let [i (int c)] (and (> i 64) (< i 91)))) %))","user":"57b65c9be4b0fbc9809a27c0"},{"problem":29,"code":"(fn caps [l] \n  (apply str (filter #(Character/isUpperCase %) l)))","user":"55623feae4b0c656e3ff17d4"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)) \n)","problem":29,"user":"4e5cac7c535d8a8b8723a2c3"},{"problem":29,"code":"(fn keep-caps [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"554dfe97e4b00713264bd98c"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" s)))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":29,"code":"(fn [str-to-test] (apply str (filter #(java.lang.Character/isUpperCase %) str-to-test)))","user":"57ca95f2e4b05aa3c4741d3b"},{"code":"#(apply str (filter (fn [a] (Character/isUpperCase a)) %))","problem":29,"user":"50696bace4b01dc6af13f830"},{"code":"#(apply str (re-seq (re-pattern \"[A-Z]\") %))","problem":29,"user":"4f8c3697e4b02e764a0a518d"},{"code":"(fn [ar] \n    (apply str (re-seq #\"[A-Z]\" ar))\n)","problem":29,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":29,"code":"(fn f[x]  (apply str (filter #(Character/isUpperCase %) (seq x))) )","user":"5be79b5be4b0f319e2d7ec5a"},{"code":"#(->> (re-seq #\"[A-Z]+\" %) (apply str))","problem":29,"user":"511026b1e4b04c71fce993ec"},{"problem":29,"code":"(fn only-caps [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"551b329ae4b07993ea3788cf"},{"code":"#(->>\n  (re-seq #\"[A-Z]\" %)\n  (apply str))","problem":29,"user":"4fb1d907e4b081705acca282"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (filter (fn [x] (and (=  (str x) (str (clojure.string/upper-case x)) ) (not=  (str x) (str (clojure.string/lower-case x)) )) ) x )))","user":"5e23ca7fe4b05b4b01516144"},{"code":"(fn [x]\n  (apply str\n    (filter ( fn [c] (. Character isUpperCase c)) x)))","problem":29,"user":"4f03154a535dcb61093f6a58"},{"problem":29,"code":"(fn caps-only [string]\n  (clojure.string/join\n    (filter #(and (>= (int %) 65) (< (int %) 91)) string)))","user":"58daae01e4b0a4d5acaab664"},{"code":"(fn [s]\r\n  (apply str\r\n    \t (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50576483e4b001218172198b"},{"problem":29,"code":"(fn [xs]\n  (apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) (seq xs))))","user":"5066fa7de4b03d366d7cb2b9"},{"problem":29,"code":"(fn [s]\n(reduce str (filter #(Character/isUpperCase %) s)))","user":"534bfc71e4b084c2834f4a88"},{"problem":29,"code":"(fn [string]\n              (apply str (filter #(Character/isUpperCase %) string)))","user":"5e491182e4b043cd24807a46"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [a] (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} a)) (seq x))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":29,"code":"(fn [s] (clojure.string/replace \n  s \n  #\"[^A-Z]\" \n  \"\"))","user":"56366f73e4b0bfe05bf117cc"},{"problem":29,"code":"(fn caps [s]\n  (apply str\n   ((fn create-seq [i]\n      (if (empty? i)\n        '()\n        (if (and (< (int (first i)) 91) (> (int (first i)) 64))\n          (conj (create-seq (rest i)) (first i))\n          (create-seq (rest i))))) s)))","user":"54982522e4b0b312c081ff7c"},{"problem":29,"code":"(fn [string]\n  (let [upper? #(java.lang.Character/isUpperCase %)]\n    (->> string (filter upper?) (apply str))))","user":"56eab346e4b04a395b9a0410"},{"code":"(fn up[x](apply str(filter #(java.lang.Character/isUpperCase %) x)))","problem":29,"user":"50b2e824e4b03ea880433567"},{"problem":29,"code":"#(clojure.string/join \"\" (re-seq (re-pattern \"[A-Z]\") %))","user":"54852ad0e4b0e286459a11a7"},{"code":"(fn my-get-caps [string]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      string)))","problem":29,"user":"4fd769a1e4b0dab7d829f382"},{"code":"#(apply str (filter (fn [c] (Character/isUpperCase c))  %))","problem":29,"user":"4e3996b0535deb9a81d77f41"},{"problem":29,"code":"(fn getcaps [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"5d68fc2fe4b0db5d338d1606"},{"problem":29,"code":"(fn get-caps [x]\n  (apply str (map char(filter #(and (>= % 65) (>= 90 %)) (map int x)))))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn [y] \n  (apply str\n         (filter \n          (fn [x] (and (>= 90 (int x)) (< 61 (int x))))\n            y\n          )\n         )\n  )","problem":29,"user":"51e1c176e4b06a68e693eafb"},{"problem":29,"code":"#(apply str (filter (fn [x] (if (and (< 64 (int x)) (> 91 (int x))) true false)) %))","user":"53caddbae4b00fb29b2212cc"},{"code":"(fn [s]\n  (apply str (filter (fn [c]\n                        (let [ord (int c)]\n                          (and (< ord 97) (>= ord 65))) )\n                     s)\n         ))","problem":29,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) (seq x))))","user":"5258d2abe4b0cb4875a45cc1"},{"problem":29,"code":"(fn Caps [xs]\n  (let [s (re-seq #\"[A-Z]\" xs)]\n    (clojure.string/join s)))","user":"5776903ee4b0979f8965163b"},{"code":"(fn [saying] \n  (clojure.string/replace saying #\"([^A-Z])\" \"\") )","problem":29,"user":"4ebe81e9535dfed6da9c6d95"},{"problem":29,"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s) ))","user":"58de563fe4b0a4d5acaab6e3"},{"code":"(fn [s] \n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) \n        (vec s))))","problem":29,"user":"5063fe48e4b075d771da6f9e"},{"problem":29,"code":"(fn [_] (apply str (filter #(Character/isUpperCase %) _)))","user":"5485d2c1e4b0e286459a11b3"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase  % ) (seq x) )  ))","problem":29,"user":"50463347e4b011c5dfee771e"},{"code":"#(apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) %))","problem":29,"user":"528e510ee4b0239c8a67aeda"},{"code":"(fn filter-caps [string]\n  (reduce str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"50d2f044e4b03c62ef244483"},{"problem":29,"code":"(fn [s] (apply str  (re-seq #\"[A-Z]\" s)))","user":"56011393e4b04bb52996e178"},{"problem":29,"code":"(fn [string] (apply str (map str (filter #(Character/isUpperCase %) string))))","user":"58ebd10de4b056aecfd47d49"},{"code":"(fn [s]\n  (apply str\n  (re-seq #\"[A-Z]\" s)))","problem":29,"user":"521bf7cfe4b0c4ef0be83066"},{"problem":29,"code":"#(reduce str (filter (fn [c] (and (>= (int c) (int \\A )) (<= (int c) (int \\Z )))) %))","user":"5de6e291e4b0986d99407f72"},{"problem":29,"code":"(fn [x]\n  (loop [curr x \n         caps \"\"]\n    (if (empty? curr)\n      caps\n      (if (and (not (nil? (re-find #\"[A-Z]+\" (subs curr 0 1)))) (= (subs curr 0 1) (clojure.string/upper-case (subs curr 0 1))))\n        (recur (subs curr 1) (str caps (subs curr 0 1)))\n        (recur (subs curr 1) caps)\n      )\n    )\n  )\n)","user":"5c3f6322e4b08cd430848e97"},{"problem":29,"code":"(fn get-caps [string]\n  (->> string\n       (re-seq #\"[A-Z]+\")\n       (clojure.string/join)))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [s] \n  (apply str \n         (filter #(. Character isUpperCase %) s)))","problem":29,"user":"52fafd5ce4b047fd55837006"},{"problem":29,"code":"(fn [x]\n      (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"57c3df67e4b05aa3c4741cc5"},{"code":"(fn onlycaps [instr]\n  (apply str (re-seq #\"[A-Z]\" instr)))","problem":29,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [s]\n  (apply str\n         (filter\n           #(and\n              (>= (int %) (int \\A))\n              (<= (int %) (int \\Z)))\n           s)))","problem":29,"user":"53070615e4b02e821686979e"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter\n           #(not\n             (nil?\n               (re-matches #\"[A-Z]\" (str %))\n               )) s)))","user":"55ba70f9e4b01b9910ae29d4"},{"problem":29,"code":"(fn [obj]\n  (apply str\n         (filter #(Character/isUpperCase %) obj)))","user":"571107b3e4b09c608db7043f"},{"code":"(fn [string]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) string)))","problem":29,"user":"50e135f4e4b084616e11c667"},{"code":"#_(fn [x] (apply str (filter \n  #(Character/isUpperCase %) x)))\n\n#_#(clojure.string/replace % #\"[^A-Z]\" \"\")\n#(apply str (re-seq #\"[A-Z]*\" %))","problem":29,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn f [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"5151d574e4b03e678e393ae0"},{"code":"(fn [s] (apply str\n  (filter (fn [c] (Character/isUpperCase c)) s)))","problem":29,"user":"503de5aae4b06c4e0e1fa259"},{"code":"(fn [s] \n  (loop [s1 (seq s) s2 \"\"]\n    (if (empty? s1)\n      s2\n      (let [c (int (first s1))]\n        (if (and (>= c (int \\A)) (<= c (int \\Z)))\n          (recur (rest s1) (str s2 (char c)))\n          (recur (rest s1) s2)\n    )))))","problem":29,"user":"53069e16e4b02e8216869798"},{"code":"(fn [s] (->> s\r\n    seq\r\n    (filter #(Character/isUpperCase %))\r\n    (apply str)))","problem":29,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))","user":"57395f32e4b0cd1946bd1070"},{"problem":29,"code":"(fn filter-uppers\n  [input]\n  (let [input-seq (seq input)]\n    (apply str\n     (filter #(re-matches #\"[A-Z]\" (str %)) input-seq))))","user":"4fc524aae4b081705acca37e"},{"problem":29,"code":"(fn filter-cap [string]\n  (let [char-arr (seq string)]\n    (clojure.string/join (filter #(Character/isUpperCase %) char-arr))))","user":"5f29837ee4b033932238a64f"},{"code":"(fn [sss]\n(apply str\n(filter \n  (fn [s]  \n    (or \n      (= s \"Q\") \n      (= s \"W\")\n      (= s \"E\")\n            (= s \"R\")\n                  (= s \"T\")\n                  (= s \"Y\")\n                  (= s \"U\")\n                  (= s \"I\")\n                  (= s \"O\")\n                  (= s \"P\")\n                  (= s \"A\")\n                  (= s \"S\")\n                  (= s \"D\")\n                  (= s \"F\")\n                  (= s \"G\")\n                  (= s \"H\")\n                  (= s \"J\")\n                  (= s \"K\")\n                  (= s \"L\")\n                  (= s \"Z\")\n                  (= s \"X\")\n                  (= s \"C\")\n                  (= s \"V\")\n                  (= s \"B\")\n                  (= s \"N\")\n                  (= s \"M\")     \n          )\n    )\n         (map str (seq sss)))\n       )\n  )","problem":29,"user":"4f2004a1535d64f6031464a7"},{"code":"(fn [s] (reduce str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e8a0d5d535d3e98b802328e"},{"problem":29,"code":"(fn [s]                                                                                                                                                                                                    \n  (apply str (filter #(Character/isUpperCase %) s)))","user":"53403f42e4b085b17e897da8"},{"problem":29,"code":"(fn a [s] (reduce str (filter #(Character/isUpperCase %) s)))","user":"5527be83e4b0ffed3738f936"},{"problem":29,"code":"(fn\n    [x]\n    (clojure.string/join \"\" (filter #(Character/isUpperCase %) x))\n  )","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn [s]\n (apply str (filter #(and (< 64 (int %))\n                           (> 97 (int %))) s)))","problem":29,"user":"52247d56e4b01819a2de42db"},{"problem":29,"code":"(fn [l]\n  (apply str (keep #(if (Character/isUpperCase %) %) l))\n  )","user":"577a4dc2e4b0d3393e5deaf6"},{"problem":29,"code":"(fn [field] (apply str (re-seq #\"[A-Z]+\" field)))","user":"563afd5ae4b0bfe05bf11809"},{"problem":29,"code":"#(apply str (filter not-empty (re-seq #\"[A-Z]*\" %1)))","user":"4f847f0ee4b033992c121c33"},{"code":"(fn [x](clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"5396c9a8e4b0b51d73faaee4"},{"problem":29,"code":"(fn [coll] (clojure.string/join (filter #(Character/isUpperCase %) coll)))","user":"53e634ede4b036ad0777e470"},{"code":"(fn [s] (\n  apply str \n  (filter \n    #(Character/isUpperCase %)\n    s\n  )\n))","problem":29,"user":"4ecc147b535d23f0362276f7"},{"problem":29,"code":"(fn [s]\n  (->> (seq s)\n  \t   (filter #(Character/isUpperCase %))\n       clojure.string/join))","user":"5c6448d6e4b0fca0c1622674"},{"code":"(fn getUppers[x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"538de891e4b0b51d73faae78"},{"problem":29,"code":"(fn getcaps [x] \n  (clojure.string/join \"\"\n   (filter \n     (fn [y] \n       (and \n        (>= (int y) (int (first \"A\"))) \n        (<= (int y) (int (first \"Z\")))\n       )\n     ) \n   x)\n  )\n)","user":"58aa19d3e4b01a0c0b23297c"},{"problem":29,"code":"(fn [a] (apply str (filter (complement #(= (clojure.string/lower-case %) %)) (map str a))))","user":"53ea9871e4b036ad0777e4e9"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(<= 65 (int %) 90))\n       (apply str)))","user":"58dde189e4b0a4d5acaab6dd"},{"problem":29,"code":"(fn [coll] \n  (apply str (remove #(= % \n                   (first (clojure.string/lower-case %)))\n               coll)))","user":"554c0adde4b0a04f7929959e"},{"code":"(fn [w]\n  (apply str \n    (filter    \n       #(Character/isUpperCase %)\n       w)))","problem":29,"user":"52c1ede2e4b07a9af579236d"},{"problem":29,"code":"(fn [xs]\n  (let [dict (->> (range (int \\A) (inc (int \\Z)))\n                  (map char) (into #{}))]\n    (->> (filter #(contains? dict %) xs)\n         (apply str))))","user":"58ebae90e4b056aecfd47d44"},{"problem":29,"code":"#(reduce (fn [acc c]\n           (if-not (contains? (apply hash-set (map char (range (int \\A) (inc (int \\Z))))) c) acc (clojure.string/join [acc c]))) \"\" %)","user":"54eee3a3e4b024c67c0cf879"},{"code":"(fn [lst]\n  (apply str (filter (fn [c]\n                       (<= (int \\A) (int c) (int \\Z)))\n                     lst)))","problem":29,"user":"52e16139e4b09f7907dd141f"},{"code":"(fn[s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50431cbce4b034ff00315d1c"},{"code":"(fn [s]\n    (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"4fc588bee4b0ee37620e17fa"},{"code":"x","problem":29,"user":"52e635b3e4b09f7907dd146f"},{"problem":29,"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))\n; note the use of apply here, as str takes a number of args instead\n; of a character collection","user":"54d0f654e4b0e8a36923e5d6"},{"problem":29,"code":"(fn cap\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"550001d0e4b07d26eda61d57"},{"problem":29,"code":"#(apply str (filter (fn isUC[x] (Character/isUpperCase x)) %))","user":"5ab490f4e4b073f17744261d"},{"code":"#(apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) (seq %)))","problem":29,"user":"4f0381db535dcb61093f6b02"},{"problem":29,"code":"(fn upper\n  [s]\n  (let [is-upper? (fn [c] \n                   (let [n (int c)] \n                     (and (<= n (int \\Z)) \n                          (>= n (int \\A)))))\n        upper (filter is-upper? s)]\n        (apply str upper)))","user":"56fe665be4b08d47c97781af"},{"code":"(fn [s]\n  (apply str (filter #(some #{(int %)} (range 65 91)) s)))","problem":29,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn [s] (reduce str (keep #(if (and (>= (int %) 65) (<= (int %) 90)) %)  s)))","problem":29,"user":"50a4b6a7e4b0344e360f3bb8"},{"problem":29,"code":"(fn [s] (let [a (int \\A) z (int \\Z)] \n  (apply str (filter #(let [x (int %)] (and (<= x z) (>= x a))) s))))","user":"5da71eaee4b000c986472c15"},{"code":"(fn [x] \n  (apply str \n         (map (fn [x] (if (and (> (int x) (- (int \\A) 1)) (< (int x) (+ (int \\Z) 1))) x \"\")) x)\n  ))","problem":29,"user":"4fd1fa71e4b04c3a95aa0418"},{"code":"#(apply str (filter (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) true false)) %))","problem":29,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn [s] (apply str (filter #(<= 65 (int %) 90) (seq s))))","problem":29,"user":"52bb81d7e4b07a9af57922e8"},{"code":"#(clojure.string/join (re-seq #\"[A-Z]\" %1))","problem":29,"user":"4f85a75ce4b033992c121c48"},{"problem":29,"code":"(fn [coll]\n  (let [min (int \\A)\n            max (int \\Z)]\n    (apply str (filter\n      #(and\n        (>= (int %) min)\n        (<= (int %) max)) coll))))","user":"54d2892fe4b0e8a36923e5f7"},{"problem":29,"code":"(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )","user":"54ff6084e4b07d26eda61d50"},{"code":"#(apply str (filter (fn[i] (< 64 (int i) 91)) %))","problem":29,"user":"4ea5e32a535d7eef308072de"},{"problem":29,"code":"(fn [s] \n\t(apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","user":"55796743e4b05c286339e095"},{"problem":29,"code":"(fn [some-str]\n   (clojure.string/join \"\" (filter\n                            #(re-matches #\"[A-Z]\" %) (clojure.string/split some-str #\"\"))))","user":"5f5a57dee4b0a0bc16850aa5"},{"problem":29,"code":"(fn filterUppercase[x] (clojure.string/join (filter #(Character/isUpperCase %) x)))","user":"5c8aa1b5e4b048ec896c5959"},{"problem":29,"code":"(fn [hello] (apply str (filter (fn [ch] (Character/isUpperCase ch)) hello)))","user":"5d9475e4e4b0d3f9b434ad25"},{"problem":29,"code":"(fn [x] (apply str (filter \n         #(and \n           (<= (int \\A) (int %) (int \\Z))\n           (= (str %) (clojure.string/upper-case %)))\n         (seq x))))","user":"56c50599e4b05cc29241ee9e"},{"problem":29,"code":"(fn [x] \n  (apply str (filter (set (map char (range 65 91))) x)))","user":"5baa1b58e4b0a20761a2344e"},{"code":"(fn a [s] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSUVWXYZ\") %) s)))","problem":29,"user":"52692e3be4b03e8d9a4a71d6"},{"code":"(fn getcaps [s]\n  (reduce #(if (and %2 (> (int %2) 64) (< (int %2) 91))\n             (str % %2)\n             %) \"\" s))","problem":29,"user":"51852961e4b0da5a5be3babb"},{"code":"(fn upper [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"51d96ad0e4b02ceefd94774f"},{"problem":29,"code":"(fn u [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn [s] (apply str (re-seq #\"[A-Z]*\" s)))","problem":29,"user":"51990df9e4b068aa333628fc"},{"code":"(fn filter-upper [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4faafccde4b081705acca209"},{"problem":29,"code":"(fn [args] (apply str (filter #(Character/isUpperCase %) args)))","user":"5f3ee0d9e4b004f08c61c55c"},{"problem":29,"code":"#(clojure.string/join (filter (partial re-find #\"[A-Z]\") (map str %) ))","user":"54e51c7be4b024c67c0cf7f7"},{"code":"#(reduce str (filter (fn [x] (and (>= (int x) 65) (< (int x) 97))) %1))","problem":29,"user":"5369d072e4b0243289761ea1"},{"problem":29,"code":"(fn capitalCase\n  [s]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) s)))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":29,"code":"(fn [instr]\n  (loop [in instr out \"\"]\n    (cond (empty? in) out\n          :else (do\n                  (if (re-matches #\"[A-Z]+\"  (str (first in)))\n                    (recur (rest in) (str out (first in)))\n                    (recur (rest in) out))))))","user":"57acee37e4b0b8559636fc94"},{"problem":29,"code":"#(apply str (filter (fn [c] (or (<= (int \\A) (int c) (int \\Z)))) %))","user":"55b4c339e4b01b9910ae297f"},{"problem":29,"code":"(fn [word-string]\n  (apply str\n  \t(map char (filter #(<= 65 % 90) (map (comp int char) word-string)))\n  )\n)","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"(fn [s] (apply str (filter #(and (>= (int %1) 65)(<= (int %1) 90)) s)))","problem":29,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn [s]\n    (clojure.string/replace s #\"[^A-Z]\" \"\"))","problem":29,"user":"52cdc676e4b07d0d72b2737f"},{"code":"#(clojure.string/replace %1 #\"[^A-Z]\" \"\")","problem":29,"user":"4f3024bfe4b0d6649770a074"},{"code":"(fn [s] \r\n  (reduce str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e21c139535d04ed9115e819"},{"problem":29,"code":"#(clojure.string/join \"\"\n                      (clojure.string/split % \n                                            #\"[^A-Z]\"))","user":"5688e403e4b0dcc4269f4072"},{"problem":29,"code":"#(apply str (filter (fn [item] (and (>= (int item) (int \\A)) (<= (int item) (int \\Z)))) %))","user":"5c1229d5e4b01240ff567188"},{"problem":29,"code":"(fn getcaps [s] \n  (->> s \n     (filter #(and (>= (int %) 65) (<= (int %) 90)) ) ;A-Z\n     (apply str) )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":29,"code":"#(clojure.string/join (filter (fn [c] (not= (str c) (clojure.string/lower-case c))) %))","user":"596a66cde4b069c0a1a19803"},{"code":"(fn [x]\n  (let [y (seq x)]\n    (apply str (doall (filter #(and (>= (int %) 65) (<= (int %) 90)) y)))))","problem":29,"user":"5306e4b4e4b02e821686979d"},{"problem":29,"code":"(fn [string] \n  (.replaceAll string \"[^A-Z]\" \"\"))","user":"54edfa10e4b024c67c0cf868"},{"code":"(fn [s] \n  (apply str (filter \n    (apply hash-set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) s)))","problem":29,"user":"4e50b67b535dc968683fc4ed"},{"problem":29,"code":"(fn [s]\n  (apply str (reduce (fn [acc item]\n                       (if (Character/isUpperCase item) \n    \t\t\t\t\t(conj acc item)\n   \t\t\t\t\t    acc))\n                       \n                       [] s)))","user":"566a0845e4b04acd4f672e05"},{"problem":29,"code":"(fn [x] (apply str (re-seq (re-pattern \"[A-Z]\") x )))","user":"60630af9e4b069485764ddbc"},{"code":"(fn [s] \n  (apply str (#(re-seq #\"[A-Z]+\" %) s)))","problem":29,"user":"526866d1e4b03e8d9a4a71a1"},{"code":";(fn [x] (reduce str (map str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x))))\n(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"513b77f3e4b00f740c76c403"},{"problem":29,"code":"(fn [s] \n  (let [v (vec s)\n        upper? #(java.lang.Character/isUpperCase %)\n        fv (filter upper? v)]\n    (apply str fv)))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [s] (reduce str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4ff78679e4b0678c553fc392"},{"problem":29,"code":"(fn [s]\n         (clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [x] (and (<= (int x) (int \\Z)) (>= (int x) (int \\A)))) %))","user":"5a9db513e4b0d174b936c7f0"},{"code":"(fn [line] (clojure.string/join (re-seq #\"[A-Z]+\" line)))","problem":29,"user":"4f0a5653535d0136e6c222f5"},{"code":"(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))\n;Takes a string and filters out all the characters that aren't uppercase. It then applies the function str to it, making all the uppercase\n;letters into one string.","problem":29,"user":"53713ebee4b0fc7073fd6ead"},{"problem":29,"code":"(fn [s]\n   (apply str (filter \n               #(and (= (str (clojure.string/upper-case %)) (str %))    \n                     (not (clojure.string/blank? (str %)))\n                     (Character/isLetter %)) s)))","user":"5d41de31e4b05dd059a54379"},{"problem":29,"code":"(fn [s]\n  (->> \n   s\n   (map int)\n   (remove #(> % 90))\n   (remove #(< % 65))\n   (map char)\n   (apply str)))","user":"55d87324e4b0e31453f64ab4"},{"problem":29,"code":"(fn [sentence]\n  (reduce str (re-seq #\"[A-Z]\" sentence)))","user":"561a2940e4b053970a773b04"},{"problem":29,"code":"(fn getcaps [x]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) (seq x))))","user":"5c24c654e4b07e362c2305a7"},{"problem":29,"code":"(fn [s]\n  (apply\n   str\n   (filter #(Character/isUpperCase %) s)))","user":"5b21ad60e4b03cfeda66ed54"},{"problem":29,"code":"(fn [s](reduce str (re-seq #\"[A-Z]\" s)))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [x]\n  (clojure.string/join \"\" (filter\n    #(Character/isUpperCase %)\n    x)))","problem":29,"user":"4ee259a1535d10e5ff6f5366"},{"problem":29,"code":"(fn filter-caps-chars [chrs]\n  (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) chrs)))","user":"57e79d8ee4b0bfb2137f5afe"},{"code":"(fn [string] (->> string (re-seq #\"[A-Z]\") (apply str)))","problem":29,"user":"4fc5273ce4b081705acca37f"},{"code":"(fn [s] (let [lst \n        (apply str (filter (fn [ele]  \n                             (and  (java.lang.Character/isLetter ele) \n                             (= ele (Character/toUpperCase ele) ))\n         \n                             ) s )) ]\n\n        \t lst)     )","problem":29,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn  [x]\n  (reduce (fn [acc e]\n            (if(Character/isUpperCase e)\n              (str acc e)\n              acc))\n          \"\" x))","problem":29,"user":"52d6664be4b09f7907dd1359"},{"problem":29,"code":"(fn [string]\n  (apply str (re-seq #\"\\p{javaUpperCase}\" string)))","user":"54e4e14ce4b024c67c0cf7f1"},{"problem":29,"code":"(fn [inputSeq]\n   ;(Character/isUpperCase (nth inputSeq 1))\n   ;(count inputSeq)\n   (loop [ resStr \"\"\n           curIdx 0 ]\n    (if (= curIdx (count inputSeq))\n      resStr\n      (if (Character/isUpperCase (nth inputSeq curIdx))\n        (recur (str resStr (nth inputSeq curIdx)) (inc curIdx))\n        (recur resStr (inc curIdx))\n      )\n    )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":29,"code":"(fn only-caps [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"534b57bbe4b084c2834f4a78"},{"problem":29,"code":"#(reduce str \"\" (re-seq (re-pattern \"[A-Z]\") %))","user":"5933b736e4b072a2710fd05d"},{"code":"#(apply str ((fn [st] (filter (fn [l] (Character/isUpperCase l)) st)) %))","problem":29,"user":"50e87252e4b0ebbe794eb7e7"},{"problem":29,"code":"(fn [x] \n     (apply str (re-seq #\"[A-Z]+\" x)))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":29,"code":"(fn get-caps [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")\n  ))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn [s] (clojure.string/join(filter #(Character/isUpperCase %)s)))","problem":29,"user":"533f09e1e4b085b17e897d9a"},{"problem":29,"code":"(fn [text](clojure.string/join (re-seq #\"[A-Z]\" text)))","user":"57b3027fe4b0fbc9809a276c"},{"problem":29,"code":"(fn [xs]\n(->>\n(filter \n\n#(->\n(re-matches #\"[A-Z]\" (str %))\nnil?\nnot\n) \n \n \n xs\n \n )\n (apply str)\n ))","user":"5619a4d0e4b053970a773afd"},{"problem":29,"code":"(fn [input]\n  (reduce str \"\" (map #(when (and (>= (int %) 65) (<= (int %) 90)) %) input)))","user":"54513516e4b0e397800069af"},{"problem":29,"code":"(fn \n  [coll] \n  (apply str \n         (filter #(Character/isUpperCase %) \n                 coll)))","user":"58edaa3be4b056aecfd47d89"},{"problem":29,"code":"(fn [chars] (apply str (filter #(Character/isUpperCase %) chars)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":29,"code":"(fn [string]\n  (loop [lower (clojure.string/lower-case string) origin string result []]\n    (if (empty? lower)\n      (apply str result)\n      (recur (rest lower) (rest origin) (if (not= (first origin) (first lower))\n                            (conj result (first origin))\n                            result)))))","user":"57344edbe4b0cd1946bd1008"},{"problem":29,"code":"(fn [l] (clojure.string/join (filter #(Character/isUpperCase %) l)))","user":"56372798e4b0bfe05bf117d0"},{"problem":29,"code":"(fn [mixed] (apply str (filter #(Character/isUpperCase %) mixed)))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [s] (#(apply str (re-seq #\"[A-Z]\" s))))","problem":29,"user":"5190772de4b09156e89b2a0a"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %)  x)))","user":"60a42199e4b00e9e6653c454"},{"problem":29,"code":";(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))\n(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"5cb39440e4b026601754b903"},{"problem":29,"code":"(fn [s] (apply str \n                (reduce #(if (= %2 (re-find #\"[A-Z]\" %2)) (conj %1 %2) %1) [] \n                        (clojure.string/split s #\"\"))))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn [s]\n   (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))","problem":29,"user":"4f616892e4b0defedf855fbf"},{"problem":29,"code":"(fn [strr] \n  (apply str (filter #(Character/isUpperCase %) strr)))","user":"5f38eecce4b0574c87022c72"},{"problem":29,"code":"(fn [x] (apply str (map (fn [y] (re-find #\"[A-Z]\" (str y))) x)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %) \n )","user":"5db861bce4b010eb3c36cd4b"},{"code":"(fn [x]  (clojure.string/join (filter #(Character/isUpperCase %) x)))","problem":29,"user":"531843c1e4b08068f379ed6c"},{"problem":29,"code":"(fn get-uppers [the-string] \n  (apply str (filter #(Character/isUpperCase %)\n                     (seq the-string))))","user":"60704214e4b069485764de24"},{"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f3a979de4b0e243712b1f10"},{"problem":29,"code":"(fn __ [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))  s)))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":29,"code":"(fn [s] (apply str (map #(if (and (= %1 %2) (not= %2 %3)) %1) s (.toUpperCase s) (.toLowerCase s))))","user":"5571d6e5e4b09a3098a5253f"},{"problem":29,"code":"(fn cappsonly [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"56fa2905e4b07572ad1a88be"},{"problem":29,"code":"(fn [s]\n           (->> s\n                (filter #(Character/isUpperCase %))\n                (apply str)))","user":"550e0951e4b06e50f9beb163"},{"code":"(fn upps [a] (apply str(filter #(Character/isUpperCase %) a)))","problem":29,"user":"5097c837e4b00ad8bab4e973"},{"problem":29,"code":"(fn prob29\n  [x]\n  (->> x\n   (seq)\n   (filter #(Character/isUpperCase %))\n   (apply str)))","user":"5d2e5065e4b01671435dbcae"},{"problem":29,"code":"(fn [s] \n    (clojure.string/join\n    (filter (fn [char] (Character/isUpperCase char)) (seq s))))","user":"55cfdfc9e4b0e31453f64a35"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)) ) ) s)))","user":"5703ce0fe4b08d47c97781fd"},{"code":"(fn caps [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","problem":29,"user":"51085be5e4b00aa5c85a1024"},{"code":"(fn [s] (apply str (filter #(not= (clojure.string/lower-case %) (str %)) s)))","problem":29,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [letter] (Character/isUpperCase letter)) s)))","user":"541c1e46e4b01498b1a71a70"},{"code":"(fn [s]\n  (apply str \n        (filter #(and (< (int %) 91) (> (int %) 64)) s)\n  )\n)","problem":29,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":29,"code":"(fn [e] (clojure.string/join (filter #(Character/isUpperCase %) e)))","user":"570d4c30e4b0b0fb43fd06da"},{"code":"#(reduce \n  (fn [s ltr] \n    (if (Character/isUpperCase ltr)\n      (str s ltr)\n      s)\n    )\n  \"\" %)","problem":29,"user":"532a111ee4b09d4e7a9b5520"},{"code":"(fn[a] (apply str (map char (filter #(and (>= % (int \\A)) (<= % (int \\Z))) (map int (seq a))))))","problem":29,"user":"4fa67274e4b081705acca1b8"},{"code":"(fn caps [s]\r\n    (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4f149e0f535d64f60314643d"},{"problem":29,"code":"(fn get-capitals [string-to-parse]\n  (let [is-capital? (fn [letter]\n                      (contains? (set (map char (range 65 91))) letter))]\n    (reduce str (filter is-capital? string-to-parse))))","user":"578ce779e4b0ebec4cfb7561"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (map (fn [x] (re-matches  #\"[A-Z]\" x)) (map str (seq s)))))","user":"54290a64e4b01498b1a71b36"},{"code":"(fn [x] (apply str (map char (filter #(and (> % 64) (< % 91)) (.getBytes x)))) )","problem":29,"user":"51cc2d84e4b02254fc79486c"},{"code":"#(apply str (filter \r\n    (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [s] (apply str (\r\n  filter #(and (<= (int %) (int \\Z)) \r\n               (>= (int %) (int \\A))) \r\n         (vec s))))","problem":29,"user":"5071e520e4b0e3170b5a8683"},{"code":"#(clojure.string/join (re-seq #\"\\p{Upper}+\" %))","problem":29,"user":"4f21838fe4b0d66497709fd2"},{"problem":29,"code":"#(apply str (reduce (fn [r c]\n           (if (Character/isUpperCase c)\n             (conj r c)\n             r)) [] %))","user":"51a4d802e4b0def3c5c5869a"},{"problem":29,"code":"#(apply str ( re-seq #\"[A-Z]\" %))","user":"5a09ebf8e4b0eab8c0448932"},{"code":"(fn [s]\n  (apply str (for [x s \n                   :when (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))]\n               x)))","problem":29,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":29,"code":"(fn only-cap [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"566efb2be4b0a866af6896e2"},{"code":"#(clojure.string/join (re-seq  #\"[A-Z]\" %))","problem":29,"user":"511f88eee4b085952a83535f"},{"code":"#(clojure.string/join \n  (map first \n    (filter \n      (fn [[c d]] (not (= c d))) \n      (map (fn [a b] (list a b)) % (clojure.string/lower-case %)))))","problem":29,"user":"504e127fe4b078edc5f593b6"},{"problem":29,"code":"(fn f [s] (clojure.string/join (map #(re-matches #\"[A-Z]\" (str %)) (seq s))))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":29,"code":"(fn [old & new]\n  (if (= old \"\")\n    new\n    (do (println (clojure.string/join \" : \" [old new])) (recur (subs old 1 (count old)) \n      (if (Character/isUpperCase (first old))\n        (clojure.string/join [new (first old)] )\n        new\n      ))\n    )\n  )      \n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"(fn  [string] \n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"516081e7e4b009fba0926e28"},{"problem":29,"code":"#(clojure.string/join (filter (fn [c] (. Character (isUpperCase c))) %))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn up [input]\n  (clojure.string/join \"\" \n    (re-seq #\"[A-Z]\" input)))","problem":29,"user":"4f7c4eb7e4b06e829148e1af"},{"code":"#(reduce str (filter (set (map char (range 65 91))) %))","problem":29,"user":"4fd2789ee4b04c3a95aa0422"},{"problem":29,"code":"#(apply str (filter (fn [c] (< 64 (int c) 91)) (seq %)))","user":"58969076e4b00487982d52a2"},{"code":"reduce \n(fn [r i] \n  (if (and (>= (int i) (int \\A)) \n           (<= (int i) (int \\Z)))\n  (str r i)\n  r\n)) \"\"","problem":29,"user":"4dca56b6535d5973398f9287"},{"problem":29,"code":"#(->>\n  (re-seq #\"[A-Z]\" %)\n  (apply str)\n  )","user":"5b118b7be4b0cc2b61a3be34"},{"code":"#(condp = (first %)\n  \\H \"HLOWRD\"\n  \\n []\n  \"AZ\")","problem":29,"user":"4e6a4038535d8ccf87e9feb5"},{"problem":29,"code":"(fn[text]\n   (apply str (filter #(and\n               (<= (int %) 97)\n               (>= (int %) 63))\n            text)))","user":"53d10553e4b00fb29b22130f"},{"problem":29,"code":"(fn [col] (clojure.string/join (filter #(Character/isUpperCase %) col)))","user":"53ec14b9e4b036ad0777e500"},{"code":"(fn [s]\n  (apply str\n\t\t(map char \n\t\t\t(filter \n\t\t\t\t#(and (>= % 65) (<= % 90))\n\t\t\t\t(map int (map char s)))))\n)","problem":29,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":29,"code":"(fn capitalX [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn [x] (clojure.string/join (filter #(java.lang.Character/isUpperCase %) x)))","problem":29,"user":"4f038017535dcb61093f6afa"},{"code":"#(clojure.string/join (clojure.string/split %1 #\"[^\\p{Upper}]\"))","problem":29,"user":"51d59859e4b01da06753aa92"},{"problem":29,"code":"(fn [string]\n  (->> (seq string)\n   (filter #(Character/isUpperCase %))\n   (apply str)))","user":"54aec099e4b09f271ff37cf5"},{"code":"(fn upper [s]\n (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"536c35c3e4b0fc7073fd6e3a"},{"problem":29,"code":"(fn [a] (reduce str (remove #(cond\n                                (and (> (int %) 64) (> 91 (int %))) false\n                                :else true) a)))","user":"57b35772e4b0fbc9809a277c"},{"problem":29,"code":"(fn [string]\n  (loop\n    [[k & ks] string\n     accum []]\n    (let [new-accum (if (Character/isUpperCase k)\n                        (conj accum k)\n                        accum)]\n      (if (nil? ks)\n          (apply str new-accum)\n          (recur ks new-accum)))))","user":"58152157e4b0f478707a0631"},{"problem":29,"code":"(fn caps [s]\n  (apply str(filter (set (map char (range 65 91))) s)))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn [x]\t(apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"50f9776be4b0e7c80cb15a4e"},{"problem":29,"code":"(fn find-caps [input]\n  (apply str (re-seq #\"[A-Z]\" input)))","user":"55fb5b89e4b0f488688e0662"},{"problem":29,"code":"(fn [a] \n  (apply str (filter #(Character/isUpperCase %) a))\n)","user":"54468ebfe4b032a45b8693b1"},{"problem":29,"code":"(fn [w] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) w)))","user":"5659679ae4b068f2fe63dbeb"},{"problem":29,"code":"(fn [x]\n  (let [ret (apply str (filter (set (map char (range 65 91))) x))]\n    (if (= ret \"\")\n      nil\n      ret)))","user":"58a216e8e4b02bd94d917ed1"},{"code":"#(apply str (filter (fn [y] (java.lang.Character/isUpperCase y))  (seq %)))","problem":29,"user":"4e15c301535d04ed9115e7e5"},{"problem":29,"code":"(fn [string]\n  (reduce str \"\" (filter\n\t  (fn [ch]\n  \t\t(let [ord (int ch)]\n    \t\t(and (>= ord 65) (<= ord 90))))\n\t\t (seq string))))","user":"52fc181ce4b047fd55837013"},{"code":"(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter #(get caps %) s))))","problem":29,"user":"50b63c5ee4b0a86f8358ca69"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (>= (int %) 65)(<= (int %) 90)) x )))","user":"59deba46e4b01968742fed7f"},{"problem":29,"code":"(fn [s] \n    (apply str\n           (filter \n            #(and \n              (> (int %) 64)\n              (< (int %) 91))\n            (char-array s))))","user":"5549394fe4b0a04f79299565"},{"problem":29,"code":";;(fn [s] (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) s)))\n\n#(apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) %))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn [s] \n  (->> s\n    (filter #(re-matches #\"[A-Z]\" (str %1)))\n    (apply str)))","problem":29,"user":"4ed00953535d44c135fd68c2"},{"problem":29,"code":"(fn [s] \n  (apply str (filter #(Character/isUpperCase %) s))\n)","user":"5720fc08e4b0c5bde472c0a3"},{"problem":29,"code":"(fn [string]\n  (apply str\n    (re-seq\n      #\"[A-Z]+\"\n      string\n    )\n  )\n)","user":"5726adf8e4b0c5bde472c12b"},{"code":"(fn [lst] \n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) lst)))","problem":29,"user":"4f06f953535dcb61093f6c1c"},{"problem":29,"code":"(fn [string]\n  (apply str\n         (filter #(Character/isUpperCase %) string)\n         )\n  )","user":"60752ef6e4b069485764de55"},{"problem":29,"code":"(fn up [s]\n\t(clojure.string/replace s #\"[^\\p{javaUpperCase}]\" \"\"))","user":"54fae43ae4b0cf870d934708"},{"code":"(fn [xs]\n  (clojure.string/replace xs #\"([a-z, !-?])\" \"\"))","problem":29,"user":"521392bce4b0d32679a5065e"},{"problem":29,"code":"(fn [s]\n  (->>\n  \ts\n  \t(seq)\n  \t(filter #(Character/isUpperCase %))\n  \t(apply str)))","user":"56d2a103e4b0ea9b8538f7a3"},{"code":"(fn filter-upper [s]\n  (clojure.string/join (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"5119f3d5e4b06c8af0111818"},{"problem":29,"code":"(fn [x] (\n         apply str (\n                        filter #(\n                                 let [a (int %)] \n                                 (and (>= a (int \\A)) (<= a (int \\Z)))\n                                )\n                        x\n                        )\n         )\n  )","user":"54283a7ae4b01498b1a71b2f"},{"code":"(fn [a] (apply str (re-seq #\"[A-Z]*\" a)))","problem":29,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn [sentence] \n     (apply str \n       (filter #(Character/isUpperCase %) sentence )))","problem":29,"user":"4ff54bfbe4b0678c553fc369"},{"code":"reduce #(str % (#{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %2)) \"\"","problem":29,"user":"4f547d2ce4b0a7574ea717e3"},{"problem":29,"code":"#(clojure.string/replace % #\"[^\\p{javaUpperCase}]\" \"\")","user":"577a0dc3e4b0979f8965167b"},{"problem":29,"code":"(fn [in]\n  (apply str \n   (\n      (fn [s]\n        (filter \n         #(and (<= 0 (compare % \\A)) \n               (>= 0 (compare % \\Z))\n          )\n         (seq s)\n         )\n       ) \n      in\n    )\n))","user":"586b6d51e4b01531a375e958"},{"code":"(fn [s] (apply str (map \n  #(if (and\n    (>= (int %) (int \\A))\n    (<= (int %) (int \\Z))) % \"\")\n  (seq s))))","problem":29,"user":"4fb1d7ace4b081705acca281"},{"code":"(fn [x] \n  (apply str \n    (filter \n      #(Character/isUpperCase %) x)))","problem":29,"user":"4ebbc2dd535dfed6da9c6d73"},{"problem":29,"code":"(fn [x]\n  (reduce str (remove #(not (Character/isUpperCase %))\n        (mapcat (fn [e]\n                  e) (clojure.string/split x #\"\")))))","user":"5e978fe5e4b0157ca96647d1"},{"problem":29,"code":"(fn parser\n  [s]\n  (clojure.string/join\n    (filter #((complement =) (str %) (clojure.string/lower-case %)) s)))","user":"56ebfb93e4b04a395b9a042e"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x) )))","user":"56cd67c1e4b0ea9b8538f74a"},{"problem":29,"code":"(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)) )","user":"586c6462e4b01531a375e97b"},{"problem":29,"code":"#(apply str (filter (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))) x\n                  )) %))","user":"5543553fe4b0a04f79299523"},{"problem":29,"code":"#(clojure.string/replace % #\"[^\\p{Upper}]\" \"\")","user":"5745f616e4b009280f9f2b58"},{"problem":29,"code":"(fn caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"5f8795d4e4b020286baa5e96"},{"problem":29,"code":"#(apply str (filter (fn [x] (java.lang.Character/isUpperCase (char x))) %))","user":"540cde77e4b0addc1aec6709"},{"code":"(fn [seq] (apply str (re-seq #\"[A-Z]+\" seq)))","problem":29,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":29,"code":"(fn [x]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) x)))","user":"591f5124e4b09b4ee5954c45"},{"problem":29,"code":"(fn [list] (reduce str \"\" (filter #(Character/isUpperCase %) list)) )","user":"5abeb697e4b073f177442725"},{"code":"(comp #(apply str %) (fn[pr](filter #(contains? (set \"HLOWRDAZ\") %) pr)))","problem":29,"user":"52ce4c32e4b07d0d72b2738d"},{"code":"(fn [string]\n  (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) string)))","problem":29,"user":"4e7e8485535db169f9c79716"},{"code":"(fn filterCap [s]\n  (apply str\n         (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))","problem":29,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":29,"code":"(fn get-the-caps [s]\n  (reduce #(str %1 (if (contains? (set (map char (range 65 91))) (char %2)) %2))\n          nil s))","user":"5e0a6cf0e4b099d064962f66"},{"problem":29,"code":"(fn\n  [words]\n  (apply str (filter #(Character/isUpperCase %) (seq words)))\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn [mystr] (apply str (filter #(and (> (inc (int \\Z)) (int %)) (> (int %) (dec (int \\A)))) (seq mystr))))","problem":29,"user":"504e9011e4b069badc5a33b7"},{"problem":29,"code":"(fn re [s]\n (apply str  (map #(re-matches #\"[A-Z]\" %) (map str s) ))\n  )","user":"56349008e4b0bfe05bf117bd"},{"code":"(fn maiuscula [x]\r\n (apply str(re-seq #\"[A-Z]+\" x))\r\n)","problem":29,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn [x] (apply str (filter \n  #(and (>= (int %) (int \\A)) \n        (<= (int %) (int \\Z))) (seq x))))","problem":29,"user":"4eb02674535d7eef30807338"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (filter #(Character/isUpperCase %) s)\n         )\n  )","user":"561eb82fe4b064ca9f4b16c7"},{"problem":29,"code":"(fn [s]\n  (apply \n str \n (filter \n   (fn [l]\n     (and \n       (>= (compare l \\A) 0) \n       (<= (compare l \\Z) 0)))\n   s))  )","user":"5e0b6375e4b099d064962f7b"},{"problem":29,"code":"(fn [s] (apply str(map char(filter #(<= (int \\A) % (int \\Z))(map int s)))))","user":"589f2cefe4b02bd94d917e75"},{"problem":29,"code":"(fn cap [list]\n\t(apply str(filter #(Character/isUpperCase %) list)))","user":"556be3dce4b09a3098a524f7"},{"code":"(fn [xs]\r\n  (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4dc7e7a5535d8a4b2fd74290"},{"code":"(fn [values] (apply str (filter #(Character/isUpperCase %1) values)))","problem":29,"user":"50621cbde4b0341461c88951"},{"code":"#(get{\\H\"HLOWRD\",\\$\"AZ\"}(first%1))","problem":29,"user":"4e3b6bff535deb9a81d77f52"},{"code":"#(clojure.string/join \"\" (re-seq #\"\\p{Upper}\" %))","problem":29,"user":"4f1e4ab5535d64f603146496"},{"problem":29,"code":";(fn[x](apply str (re-seq #\"[A-Z]\" x)))\n\n(let [Regex (fn[x](re-seq #\"[A-Z]\" x))\n   StringParse (fn[x](apply str (Regex x)))]\n StringParse\n)","user":"6001460ce4b074f607df6611"},{"code":"(fn [x] (apply str (filter #(let [num-a (int %)]\n                (and (<= 65 num-a)\n                     (<= num-a 90)))\n            (seq x))))","problem":29,"user":"52890634e4b0239c8a67ae5e"},{"code":"(fn caps [x] (reduce str (re-seq #\"[A-Z]\" x) ) )","problem":29,"user":"531cd41ee4b08068f379eda9"},{"code":"(fn [s] (apply str (filter (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","problem":29,"user":"4eb01df4535d7eef30807337"},{"problem":29,"code":"(fn [param] (apply str (re-seq #\"[A-Z]+\" param)))","user":"607f3336e4b05857a65e7747"},{"code":"(fn [strng]\n    (clojure.string/join \n      (filter #(re-matches #\"[A-Z]\" (str %)) strng)))","problem":29,"user":"4fd65b2be4b0d4de60cee37e"},{"problem":29,"code":"(fn [s]\n  (reduce str\n   (re-seq #\"[A-Z]\" s)))","user":"5defc177e4b093ff717275af"},{"code":"(fn [x]\n  (reduce str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) x)))","problem":29,"user":"50da34e4e4b0f31830755b3c"},{"code":"(fn [s]\n  (reduce str (map str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s)))))","problem":29,"user":"52d7f9a8e4b09f7907dd1381"},{"code":"(fn [s]  (reduce str (filter #(and (>= (int %) 65) (< (int %) 91)) s)))","problem":29,"user":"5078dedae4b08327cd804a5d"},{"code":"#(let [ia (int \\A)\n       iz (int \\Z)\n       ur (set (map char (range ia (inc iz))))\n       ucs (filter (fn [x] (contains? ur x)) %)]\n   (clojure.string/join ucs))","problem":29,"user":"4db29f98535df7e46ed9b6c1"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))","problem":29,"user":"51d7efc3e4b0154f82ab9302"},{"code":"(comp (partial apply str)\n      (partial filter\n               #(and (Character/isLetter %)\n                     (= % (Character/toUpperCase %))))\n      seq)","problem":29,"user":"4f84a4a4e4b033992c121c39"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(contains? (set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) %) (seq s))))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn caps-only [x] (apply str (filter #(. Character isUpperCase %) x)))","problem":29,"user":"527fd663e4b0757a1b1713de"},{"code":"(comp (partial apply str)\n      (partial filter #(Character/isUpperCase %)))","problem":29,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [arr] (apply str (re-seq #\"[A-Z]\" arr)))","problem":29,"user":"5036eba7e4b0af0658af77a5"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [in] (let [c (int in)] (and (<= (int \\A) c) (>= (int \\Z) c)))) s)))","user":"51cf815de4b0e42293a22575"},{"code":"(fn onlycaps [s]\n  (apply str (for [c s] (if (Character/isUpperCase c) c \"\"))))","problem":29,"user":"4f03ebf7535dcb61093f6b7f"},{"problem":29,"code":"#(let [input %\n                upper? (fn [intCh]\n                         (and (>= intCh (int \\A)) (<= intCh (int \\Z))))]\n            (apply str (filter (fn [ch]\n                                 (when (upper? (int ch)) ch)) input)))","user":"5e3975a3e4b01d43a70e8dd3"},{"problem":29,"code":"(fn [s]\n    (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"5b8ec146e4b0c0b3ffbd49f0"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(<= 65 (int %) 90)))","user":"56327168e4b0bfe05bf117a5"},{"code":"(fn [s] (apply str  (filter #(re-find #\"[A-Z]\" (str %)) s)))","problem":29,"user":"5124619ae4b02c3f2a072ccd"},{"code":"#(reduce str (re-seq #\"[A-Z]?\" %))","problem":29,"user":"53500869e4b084c2834f4ad3"},{"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) %1))","problem":29,"user":"50e8cac5e4b0ebbe794eb7ef"},{"code":"(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) (+ 65 26))) s)))","problem":29,"user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %1) (str s))))","problem":29,"user":"50bfd849e4b042992946c649"},{"problem":29,"code":"#(loop [c 0 \n           a \"\"]\n     (if (>= c (count %))\n       a \n      (recur \n       (inc c) \n       (str \n        a \n        (if (and \n             (<= 65 (int (get % c))) \n             (>= 90 (int (get % c)))) \n          (get % c) \"\")\n        ))\n    ))","user":"55484800e4b0a04f79299558"},{"code":"(fn [src]\n  (let [matcher (re-matcher #\"[A-Z]\" src)]\n    (loop [res \"\"]\n      (let [m (re-find matcher)]\n        (if m\n          (recur (str res m))\n          res)))))","problem":29,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn [s]\r\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ddeb916535d08e6dec9fdd9"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"551a21ece4b091ff45eda993"},{"problem":29,"code":"#(loop [x % res \"\"]\n   (if (empty? x)\n     res\n     (recur (subs x 1) (str res (re-find #\"[A-Z]\" (subs x 0 1))))))","user":"5964c614e4b069c0a1a19770"},{"problem":29,"code":"(fn\n  [str2]\n  (apply str (filter #(Character/isUpperCase %) str2))\n  )","user":"5a58d8a0e4b05d388ecb6c8a"},{"code":"(fn only-c [ss]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) ss)))","problem":29,"user":"516282c3e4b0e6d3c4734711"},{"problem":29,"code":"(fn [s] \n  (apply str (filter \n   #(Character/isUpperCase %)\n   (seq s) )))","user":"58acce0ae4b0005cfeb1a754"},{"problem":29,"code":"(fn [s] (clojure.string/join (map first (re-seq #\"([A-Z])\" s))))","user":"608335a4e4b0736b099e42e3"},{"code":"(fn [s]\n  (apply str (filter \n    (fn [c] (and (> (int c) 64 ) (<  (int c) 91 )))\n  s))\n)","problem":29,"user":"4f1d1299535d64f603146487"},{"code":"(fn [s] (apply str (filter (fn [ch] (Character/isUpperCase ch)) s)))","problem":29,"user":"4f4afb1fe4b0d56e7bb92c21"},{"problem":29,"code":"(fn get-caps\n  [s]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) s)))","user":"4eda8d7c535d10e5ff6f530f"},{"code":"#(apply str\n  (filter (fn [c] (and \n                   (> (int c) 64)\n                   (< (int c) 91)))\n          %))","problem":29,"user":"4eb2d0ae535d7eef3080734e"},{"problem":29,"code":"(fn x [coll]\n (apply str\n  ((fn caps [coll]\n    (when-let [s (seq coll)]\n     (let [c (int (first s))]\n      (if (and (>= c (int \\A) ) (<= c (int \\Z)))\n       (cons (char c) (caps (rest s)))\n       (caps (rest s))))))\n     coll)))","user":"581a703de4b0e114eb51a005"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (Character/isLetter %) (= (clojure.string/upper-case %) (str %))) x)))","user":"5de7e7cae4b0986d99407f7a"},{"code":"(fn [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4e99a255535dbda64a6f6b67"},{"code":"(fn [l] (apply str (filter #( Character/isUpperCase %)  l)))","problem":29,"user":"4f5d0f25e4b0030a34fb2b33"},{"code":"(fn zz [l]\n  (if (empty? l)\n    \"\"\n    (if (and (not(= (str(first l)) (clojure.string/lower-case (first l))) )(= (str(first l)) (clojure.string/upper-case (first l))))\n      (str (str(first l)) (zz (rest l)))\n      (zz (rest l)))))","problem":29,"user":"51cdec45e4b0e42293a2254f"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"[A-Z]*\" %))","user":"5658d775e4b00d3155796114"},{"problem":29,"code":"(fn [stri]\n  (clojure.string/join (filter #(Character/isUpperCase %) stri)))","user":"573de63fe4b05c31a32c081c"},{"code":"(fn [string]\n  (apply str\n    (re-seq #\"[A-Z]\" string)))","problem":29,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":29,"code":"(fn f[cs] \n  (let [\n         fil (fn [c] (and (<= (int \\A) (int c)) (>= (int \\Z) (int c))))\n         fcs (filter fil cs)]\n    (apply str fcs)))","user":"5ba75fdfe4b0a20761a23419"},{"problem":29,"code":"(fn only-caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))","user":"54973374e4b0b312c081ff6f"},{"code":";#(apply str (re-seq #\"[A-Z]+\" %))\n(fn [col] \n  (->> col \n      (map int)\n      (filter #(and (>= % 65) (<= % 90)))\n      (map char)\n      (apply str)\n  )\n)","problem":29,"user":"4f9510b5e4b0dcca54ed6cc7"},{"problem":29,"code":"(fn [input]\n  (clojure.string/replace input #\"[a-z]|\\W|\\d\" \"\"))","user":"54570dfae4b080a794c2c889"},{"problem":29,"code":"(fn [x] (apply str (filter #(#{\\H \\L \\O \\W \\R \\D \\Z \\A} %) x)))","user":"56fd020ee4b08d47c97781a0"},{"code":"(fn [s] (reduce #(if (re-seq #\"[A-Z]\" (str %2)) (str %1 %2) %1) \"\" s))","problem":29,"user":"52474de3e4b05ef8e38e6360"},{"code":"(fn [x]\n  (apply str\n    (filter \n     #(if (>= 90 (int %))\n        (if (<= 65 (int %))\n          true))\n     x)\n  )\n)","problem":29,"user":"51efdbbee4b0249c592fbdec"},{"problem":29,"code":"(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"57040195e4b08d47c9778202"},{"code":"(fn [str1](apply str (filter #(re-matches #\"[A-Z]\" (str %)) str1)))","problem":29,"user":"5318f85ae4b08068f379ed76"},{"code":"(fn anon [x]\n  (cond\n    (= (count x) 0) \"\"\n    (and (< (int (first x)) 91) (> (int (first x)) 64)) (str (first x) (anon (rest x)))\n    true (anon (rest x))))","problem":29,"user":"503cc8cae4b06c4e0e1fa251"},{"code":"(fn [s]\n (apply str \n        (filter \n         (fn [c] (and (<= (int c) (int \\Z))\n                      (>= (int c) (int \\A))))\n         \ts )))","problem":29,"user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52ba447ee4b07a9af57922ce"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z0-9 !,($#*&]\" \"\")","user":"54458995e4b032a45b86939e"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)\n            ))","user":"56761ab1e4b05957ce8c6154"},{"code":"(fn [s] (apply str (filter #(not= (.toLowerCase (str %)) (str %)) s)))","problem":29,"user":"50b68375e4b08fb537db98f4"},{"problem":29,"code":"(fn [string]\n  (reduce str\n   (map \n    (fn [el] (str el)) \n    (filter (fn [elem] (Character/isUpperCase elem)) string))))","user":"548f339ee4b0e286459a1233"},{"code":"(fn [x] (.replaceAll x \"[^A-Z]+\" \"\"))","problem":29,"user":"4f036894535dcb61093f6aad"},{"code":"(fn [x] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))))","problem":29,"user":"50c11f5ae4b096f585049c39"},{"problem":29,"code":"(fn get-the-caps [s]\n  (->> s\n       (filter #(re-matches #\"[A-Z]\" (str %)))\n       (apply str)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":29,"code":"#(reduce (fn [acc item]\n           (if (Character/isUpperCase item)\n             (str acc item)\n             acc))\n         \"\"\n         %)","user":"5ef8e9e0e4b09b61f08553cb"},{"code":"#(apply str (filter (fn [ss] (not= ((memfn toLowerCase) (str ss)) (str ss))) %))","problem":29,"user":"4e8768f6535dceadca469850"},{"problem":29,"code":"(fn [input-str]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq input-str)))\n)","user":"605b319de4b079a07f8593f7"},{"problem":29,"code":"(fn only-caps\n  [text]\n  (clojure.string/replace text #\"[a-z0-9*&#!$,() ]\" \"\"))","user":"5d110abee4b02c15ef021983"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (seq s))))","user":"545b0275e4b01be26fd74648"},{"problem":29,"code":"(fn [x]\n  (let [upchars (into #{} (map char (range 65 (+ 65 26))))]\n    (apply str (seq (filter #(contains? upchars %) (seq x))))))","user":"57af41bce4b0fbc9809a2731"},{"problem":29,"code":"(fn fil[x] (apply str(filter #(Character/isUpperCase %) x)))","user":"558378dce4b05c286339e115"},{"problem":29,"code":"(fn [text] (apply str (re-seq #\"[A-Z]+\" text)))","user":"53b41d17e4b047364c0444b1"},{"code":"(fn [coll]\n  (apply str\n   (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51a3738ce4b0e77c4ca60bf0"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))  \n  )","user":"59165082e4b09b4ee5954b88"},{"code":"(fn [mystring] (clojure.string/join (filter #(Character/isUpperCase %) mystring)))","problem":29,"user":"4f13573a535d64f60314642e"},{"problem":29,"code":"(fn[s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"56435214e4b08d4f616f5f27"},{"problem":29,"code":"(let [my_fn \n  (fn [sss] (clojure.string/join \"\" (filter #(Character/isUpperCase %) sss)))] \n    my_fn)","user":"5f35026fe4b0574c87022c40"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %)\n                     (seq x))))","problem":29,"user":"531ccb1fe4b08068f379eda7"},{"problem":29,"code":"(fn [s] \n  (->> s (map int) (filter #(<= 65 % 90)) (map char) (apply str)))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"(fn [l]\n  (apply str\n         (filter\n          (fn [x]\n            (and\n             (<= (int \\A) (int x))\n             (>= (int \\Z) (int x))))\n          l)))","problem":29,"user":"511907a4e4b046de85f62a4d"},{"problem":29,"code":"#(loop [rtnStr \"\" i 0]\n    (if (= i (count %))\n      rtnStr\n      (recur (if (<= 65 (int (nth % i)) 90)\n             (str rtnStr (nth % i))\n             rtnStr)\n      (inc i))))","user":"57447d1ae4b009280f9f2b3b"},{"problem":29,"code":"#(apply str (filter #{ \\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} % ))","user":"5a91988ae4b002d099cae6f9"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [x] (re-matches #\"[A-Z]\" x)) (clojure.string/split % #\"\")))","user":"552456e3e4b0882d96d091c2"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\"\n                 s)))","user":"5922a513e4b026ae38521286"},{"problem":29,"code":"(fn [txt] (clojure.string/join \"\" (re-seq #\"[A-Z]\" txt)))","user":"5d9bda4fe4b0d3f9b434ad50"},{"problem":29,"code":"(fn [s] (apply \n         str (filter #(Character/isUpperCase %) s)))","user":"553dd883e4b0a04f792994e6"},{"problem":29,"code":"(fn [x]\n     (apply str (re-seq #\"[A-Z]\" x)))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":29,"code":"(fn[string]\n  (reduce (fn [new-str original]\n              \n                (if \n                  (= (clojure.string/upper-case  original) original) \n                   (str new-str original) \n                   new-str\n                )\n              \n          )\n          \"\"\n          (re-seq #\"[a-zA-Z]\" string)\n  )\n)","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":29,"code":"(fn [s]\n  (let [caps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter #(contains? caps %) s))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":29,"code":"(fn [arr] (apply str (filter (fn [x]\n                      (cond\n                       (< (int x) 65) false\n                       (> (int x) 90) false\n                       :else true))\n                       arr)))","user":"5aa15ec0e4b0d174b936c848"},{"problem":29,"code":"(fn [st] (reduce str (re-seq #\"[A-Z]\" st)))","user":"58c7131be4b021aa9917ed6d"},{"code":"(fn [x]\n    (apply str (filter \n                  #(if (> (int \\A) (int %1)) false \n                       (>= (int \\Z) (int %1)))\n                  x)))","problem":29,"user":"5183f5d7e4b02826a645f393"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) x)) ) ;#(apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"52d2b85ce4b099d49816f0af"},{"code":"(fn capi [st] (reduce str \"\" (filter #(re-matches #\"[A-Z]\" (str %1)) st)))","problem":29,"user":"4e9de526535dbda64a6f6b8e"},{"problem":29,"code":"(fn [xs]\n    (apply str (filter #(Character/isUpperCase %) xs)))","user":"58b81490e4b0ebc645576d8c"},{"problem":29,"code":"(fn [s] \n  (apply str \n         (filter #(and (>= (int %) 65) (< (int %) 97)) \n                 s)))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":29,"code":"(fn cc [s] (apply str (filter #(= (str %) (clojure.string/upper-case %)) (filter #(not (= (clojure.string/upper-case %) (clojure.string/lower-case %))) (seq s)))))","user":"5ae56da2e4b0837691e92c8f"},{"problem":29,"code":"#(apply str \n  (filter (fn iscap [c] (and (<= 65 (int c)) (<= (int c) 90))) %))","user":"5884e807e4b0f1effa3b76a6"},{"problem":29,"code":"(fn \n  [xs]\n  (reduce str \"\" (filter #(Character/isUpperCase %) xs)))","user":"5a16da30e4b0ff51aa4b31cc"},{"code":"(fn [st]\r\n  (loop [s st r \"\"]\r\n\t (if (empty? s)\r\n\t     r\r\n\t     (if (#(and (>= (int %) (int \\A))\r\n\t\t       (<= (int %) (int \\Z))) (first s))\r\n\t\t (recur (rest s) (str r (first s)))\r\n\t\t (recur (rest s) r)))))","problem":29,"user":"4e821ca5535db62dc21a62c2"},{"problem":29,"code":"(fn [xs] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) xs)))","user":"540e8d13e4b0addc1aec671e"},{"problem":29,"code":"(fn df [a] (apply str (filter #(Character/isUpperCase %) a)))","user":"5d5c6675e4b09db18d4482ec"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \n    (filter \n      #(and \n        (>= (int %) (int \\A)) \n        (<= (int %) (int \\Z)))\n      s)))","user":"566ff0a1e4b0a866af6896ec"},{"problem":29,"code":"#(apply str\n         (re-seq #\"[A-Z]+\" %))","user":"5da07d10e4b000c986472bd5"},{"code":"(fn f [x] (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) x)))","problem":29,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":29,"code":"reduce (fn [acc c] (if (Character/isUpperCase c) (str acc c) acc)) \"\"","user":"54ce6eede4b057c6fda3a2ad"},{"problem":29,"code":"#(->> % (map (fn [s] (re-matches #\"[A-Z]\" (str s)))) (filter (complement nil?)) (apply str))","user":"53ea5851e4b036ad0777e4e4"},{"problem":29,"code":"(fn [items]\n  (apply str (filter #(Character/isUpperCase %) items)))","user":"53ff602fe4b0de5c418485ff"},{"problem":29,"code":"(fn [x] (apply str(filter #(not= (str %) (clojure.string/lower-case %)) x)))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn [x] \n  (apply str\n    (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) \n     (seq x))))","problem":29,"user":"4ec7def0535d6d7199dd36e9"},{"problem":29,"code":"(fn stripper [s] (apply str(re-seq #\"[A-Z]+\" s)))","user":"59f4c42ce4b0966464fe6ab6"},{"code":"(fn [x] \n  (loop [s (.getBytes x) r \"\"]\n    (if (first s)\n      (if (and (> (first s) 64) (< (first s) 91))\n        (recur (rest s) (str r (char (first s))))\n        (recur (rest s) r))\n      r)))","problem":29,"user":"4ec8736f535d6d7199dd36f3"},{"problem":29,"code":"(fn [x]\n     (apply str (filter #(Character/isUpperCase %) x)))","user":"5f837b30e4b01aacbe7a2714"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) (seq (char-array x)))))","user":"53da3fcde4b0e771c3025497"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(re-matches #\"[A-Z]\" (str %)))\n       (apply str)))","user":"56442758e4b0018b46ad8c0a"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"\\p{Lu}+\" %))","user":"58840023e4b0f1effa3b768b"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (vec s))))","problem":29,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":29,"code":"#(apply str (filter\n              (fn [c] (let [i (int c)]\n                        (and (>= i 65) (<= i 90))))\n              %))","user":"524a9556e4b05ef8e38e64b1"},{"problem":29,"code":"(fn\n  [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn cps [x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"528b9efee4b0239c8a67aea0"},{"problem":29,"code":"(fn up [coll]\n    (reduce (fn [a v]\n              (if (Character/isUpperCase v)\n                (str a v)\n                a)) \"\" coll))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"(fn [s](apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn\n  [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"50aa60bee4b056ee01935865"},{"problem":29,"code":"#(apply str\n\t\t(filter\n\t\t\t(fn isUpper [c] \n\t\t\t\t(and\n\t\t\t\t\t(= \n\t\t\t\t\t\t(str c) \n\t\t\t\t\t\t(clojure.string/upper-case c)\n\t\t\t\t\t)\n\t\t\t\t\t(Character/isLetter c)\n\t\t\t\t) \n\t\t\t)\n\t\t\t%\n\t\t)\n\t)","user":"55fc8f1fe4b0f488688e0675"},{"code":"(fn [x]\n  (apply str (filter #(java.lang.Character/isUpperCase %) x)))","problem":29,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":29,"code":"#(clojure.string/join (filter (fn [ch] (Character/isUpperCase ch)) %))","user":"5ef9ea69e4b09b61f08553d1"},{"code":"(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" x)))","problem":29,"user":"4f5612f9e4b0a7574ea71812"},{"code":"(fn [string]\n  (clojure.string/join \n    (filter \n      #(and (>= (int %1) 65) (<= (int %1) 90))\n      string)))","problem":29,"user":"4f92884de4b0dcca54ed6caf"},{"problem":29,"code":"(fn [s]\n    (apply str (re-seq #\"[A-Z]+\" s)))","user":"5f985283e4b0715f5002d800"},{"problem":29,"code":"(fn [s]\n   (apply str (vec (re-seq #\"[A-Z]\" s))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":29,"code":"(fn [n]\n  (reduce str\n          (map char\n               (filter #(and (< % 91) (> % 63)) \n                       (map int (seq n))))))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn [s] (->> s (filter #(Character/isUpperCase %)) (apply str)))","problem":29,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":29,"code":"(fn [xs] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (seq xs))))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn caps [string]\n  \"\"\"Return uppercase letters of a parameter string\"\"\"\n  (cond\n    (empty? string) (str)\n    (re-matches #\"[A-Z]\" (str (first string))) (str (first string) (caps (rest string)))\n    :else (caps (rest string))))","problem":29,"user":"50d4dde8e4b09cc622d65a72"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [y] (contains? (set (map char (range 65 91))) y )) (.toCharArray x))))","user":"53bed4b5e4b0c98a41f5cc94"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))","user":"51441ce7e4b0b4fb4ace5f41"},{"code":"(fn [x] (\n  clojure.string/join (\n    filter #(and \n      (>= (int %) 65) \n      (<= (int %) 90)) x)))","problem":29,"user":"50352431e4b0a84c1d88f620"},{"problem":29,"code":"(fn\n   [s]\n   (reduce #(str %1 %2) \"\" (filter #(Character/isUpperCase %) (seq s)))\n   )","user":"60631c2ee4b069485764ddbd"},{"problem":29,"code":"(fn [a] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) a)))","user":"5649542fe4b0284900eef63f"},{"code":"(fn [s]\n  (. s replaceAll \"[^A-Z]\" \"\")\n)","problem":29,"user":"52fba50ce4b047fd5583700d"},{"code":"(fn [arg]\n  (reduce #(str %1 %2) \"\" (re-seq #\"[A-Z]\" arg)))","problem":29,"user":"52bc7ea6e4b07a9af57922f7"},{"code":"(fn [in]\n  (let [caps (fn [x] (and (< (int x) 91) (> (int x) 59)))]\n    (apply str (filter caps in))))","problem":29,"user":"51684318e4b03f62cda68cd6"},{"problem":29,"code":"(fn caps\n\t[string]\n\t\t(apply str (filter #(Character/isUpperCase %) (seq string))))","user":"5545477fe4b0a04f79299531"},{"problem":29,"code":"#(apply str (filter (fn [c](Character/isUpperCase c)) (seq %)))","user":"5beebdb7e4b0a6d31fed2132"},{"problem":29,"code":"(fn filter_upper [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"problem":29,"code":"(fn [x]\n  (reduce str (filter  #(Character/isUpperCase %) x)))","user":"55cb11e9e4b0e31453f649ff"},{"problem":29,"code":"(fn get-caps\n  [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"59b62f8de4b05c620303ca1f"},{"code":"(fn [x]\n  (clojure.string/join\n    (filter (fn [c] (Character/isUpperCase c)) x)))","problem":29,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":29,"code":"#(apply str (filter (set (map char (range 65 91))) (seq %)))","user":"569ef93de4b0542e1f8d148b"},{"problem":29,"code":"#(->> %\n          (seq) ; string -> seq char\n          (filter (fn [s]\n                    (and (>= (int s) (int \\A))\n                         (<= (int s) (int \\Z)))))\n          (map str)\n          (clojure.string/join))","user":"605f5c69e4b03746e80ebf5e"},{"code":"reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\"","problem":29,"user":"50a482c1e4b0344e360f3bb7"},{"code":"(fn [x] \n  (let [caps (re-seq #\"[A-Z]\" x)]\n    (when caps\n      (reduce (fn [a b] (str a b)) caps))))","problem":29,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn [as] (apply str (filter #(Character/isUpperCase %) as)))","problem":29,"user":"4fc4f68ae4b081705acca363"},{"code":"(fn  [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))","problem":29,"user":"506617fce4b03d366d7cb2ac"},{"problem":29,"code":";; The seq->str part feels hacky but works.\n#(apply str (seq\n ((fn [s] \n    (letfn \n     [(uppercase? [c] (not (= (clojure.string/lower-case c) \n                              (str c))))]\n     (filter uppercase? s)))\n    %)))","user":"5552780ce4b0deb715856df4"},{"problem":29,"code":"reduce #(str %1 (re-matches #\"[A-Z]\" (str %2))) \"\"","user":"564348e1e4b08d4f616f5f26"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [x] (and (>= (compare x \\A) 0) (<= (compare x \\Z) 0))) s)))","user":"51eda45ce4b0bb507043159b"},{"code":"(fn [s]\r\n      (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e028764535d04ed9115e790"},{"code":"(fn [s] (apply str (filter #(and (= % (Character/toUpperCase %)) (not= % (Character/toLowerCase %))) s)))","problem":29,"user":"4fb510b5e4b081705acca2b8"},{"problem":29,"code":"#(let [s (seq %) upper-filter (fn [c] (<= (int \\A) (int c) (int \\Z)))]  (reduce str (filter upper-filter s)))","user":"551e2cade4b030e6a24d00e4"},{"problem":29,"code":"(fn [li] (reduce str (map #(if  ( < (dec (int \\A)) (int %) (inc (int \\Z))) %) (seq li))))","user":"57d7ca32e4b0bd073c2023df"},{"problem":29,"code":"(fn [text] (apply str (filter #(Character/isUpperCase %) (str text))))","user":"56df62b3e4b0ca2494a095ef"},{"code":"(fn [str-in]\n  (apply str (re-seq #\"[A-Z]\" str-in)))","problem":29,"user":"4f03818e535dcb61093f6b00"},{"code":"(fn [x] (.replaceAll x \"[^A-Z]\" \"\") )","problem":29,"user":"50217818e4b00bba4502f7a7"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [s] (re-seq #\"[A-Z]\" (str s))) s)))","user":"58bf1cf8e4b021aa9917eccf"},{"problem":29,"code":"(fn apaini [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"55634f38e4b0c656e3ff17e8"},{"problem":29,"code":"(fn [col] \n  (apply\n    str\n    (filter \n      #(re-find (re-pattern \"[A-Z]\") (str %))\n      col)))","user":"57597fade4b02ea11479931d"},{"code":"#(apply str (filter (fn filt [x] (Character/isUpperCase x)) (seq %)))","problem":29,"user":"50d0b466e4b00b15ecee9764"},{"code":"(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) \nx)))","problem":29,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn[word] (apply str (re-seq #\"[A-Z]\" word)))","problem":29,"user":"4ff31e13e4b0678c553fc346"},{"code":"(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f6f777de4b07046d9f4efe5"},{"code":"(fn caps [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))","problem":29,"user":"522ff396e4b032bbe3424172"},{"problem":29,"code":"(fn  [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"5facfb48e4b08cb800c85aea"},{"problem":29,"code":"#(reduce str (filter (set \"HLOWRDAZ\") %))","user":"53abf519e4b047364c044456"},{"code":"(fn [L] (apply str (filter #(Character/isUpperCase %) L)))","problem":29,"user":"522dd30ee4b0a102974208c3"},{"code":"(fn [s]   \n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"533160a1e4b019098a6f8b68"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]*\" s)))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn [xs] (apply str (filter #(Character/isUpperCase %) (seq xs))))","problem":29,"user":"529d4f4be4b04e0c58e87b79"},{"problem":29,"code":"(fn only_upper_case [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn get-caps [text]\n  (->> text \n    (filter #(java.lang.Character/isUpperCase %)) \n    (apply str)))","problem":29,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":29,"code":"(fn [st] \n  (apply str \n   (filter \n    #(Character/isUpperCase %)\n    st)))","user":"57c7fa03e4b05aa3c4741d12"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e73a9dc535dff18050a9c77"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %)\n         x)))","user":"5dbf6016e4b0e59a23173d79"},{"problem":29,"code":"(fn [strseq]\n  (apply str (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))) (seq strseq)))\n)","user":"5e08c3dde4b0978307768fc8"},{"problem":29,"code":"(fn [s] (->> s (filter #(let [c (compare \\Z %)]\n                   (and (>= c 0)\n                        (<= c 25)))) doall (apply str)))","user":"5e066185e4b0978307768fa4"},{"code":"(fn get-cps [s]\n  (loop [result \"\" s s]\n    (if (empty? s)\n      \tresult\n      \t(if (Character/isUpperCase (first s))\n          \t(recur (str result (first s)) (next s))\n          \t(recur result (next s))\n          )\n      )\n    )\n  )","problem":29,"user":"52faff0de4b047fd55837007"},{"code":"#(apply str (re-seq #\"[A-Z+]\" %))","problem":29,"user":"4e8dc25f535d65386fec213a"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"55c734a5e4b0e31453f649cb"},{"code":"(fn [xs]\r\n  (clojure.string/join (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4e8dd6cb535d65386fec213b"},{"problem":29,"code":"(fn[string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )","user":"55240916e4b0882d96d091b6"},{"problem":29,"code":"(fn [li] (apply str (filter #(some #{%} (map char (range 65 91))) li)))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":29,"code":"#(->>\n     (re-seq #\"[A-Z]+\" %)\n     (apply str))","user":"57210e8ee4b0c5bde472c0a8"},{"problem":29,"code":"(fn  [s]\n  (loop [coll s\n         result ()]\n    (cond\n      (empty? coll) (clojure.string/replace (clojure.string/join (reverse result)) #\"[^a-zA-Z]\" \"\")\n      (= (str (first coll)) (clojure.string/upper-case (first coll))) (recur (rest coll) (conj result (first coll)))\n      :else (recur (rest coll) result)\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"problem":29,"code":"(fn [x] \n   (apply str (filter #(re-find #\"[A-Z]\" (str %)) x))\n  )","user":"51e8ee6be4b07cae92c04bfd"},{"code":"#(apply str (filter (fn [c] (contains? #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} c)) %))","problem":29,"user":"51bb970be4b0fe3ecfb4644e"},{"code":"(fn [x](apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4eeae8f0535d93acb0a668a2"},{"problem":29,"code":"(fn [input] (apply str (filter \n                    #(and \n                       (>= (compare \"a\" (str %1)) 0) \n                       (<= (compare \"A\" (str %1)) 0)\n                       ) input)))","user":"56ef11efe4b04a395b9a045b"},{"problem":29,"code":"(fn filter-caps2 [expression]\n  (apply str (filter #(Character/isUpperCase %) expression)))","user":"5c9a638fe4b048ec896c5aae"},{"code":"(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"525fffb8e4b03e8d9a4a702b"},{"code":"(fn [string] (apply str (re-seq #\"[A-Z]\" string)))","problem":29,"user":"4ec5aa1f535d6d7199dd36b0"},{"code":"(fn [char-coll]\n  (apply str (filter #(Character/isUpperCase %) char-coll)))","problem":29,"user":"4e726914535d5021c1a89661"},{"code":"(fn [x]\n\t(clojure.string/join (filter (fn [x]\n\t\t(let [num-a (int \\A)\n\t\t  num-z (int \\Z)\n\t\t  num-x (int x)]\n\t  (and (>= num-x num-a) (<= num-x num-z)))) x)))","problem":29,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn [x]\n  (->> (seq x)\n       (filter #(Character/isUpperCase %))\n       (apply str)))","problem":29,"user":"4e6a48d5535d8ccf87e9febd"},{"code":";#(apply str (filter string?\n;        (map (partial re-find #\"[A-Z]\")\n;            (map str (vec %)))))\n\n\n#(apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"51793056e4b0684c1c981a41"},{"code":"(fn uppers [s]\n  (let [upper? #(not= (clojure.string/lower-case %) %)]\n    (if (empty? s)\n      \"\"\n      (if (upper? (str (first s)))\n        (str (str (first s)) (uppers (rest s)))\n        (uppers (rest s))))))","problem":29,"user":"4f12d1b0535d64f60314642b"},{"problem":29,"code":"(fn [string] \n\t(apply str (filter #(Character/isUpperCase %) string)))","user":"54696109e4b00cfc9eacc146"},{"problem":29,"code":"(fn cap-filter [x]\n  (let [chrs (#(clojure.string/split % #\"\") x)]\n    (clojure.string/join \n     (filter #(not= (str %) (clojure.string/lower-case %)) chrs)\n    )\n  )\n)","user":"5600bed5e4b04bb52996e170"},{"code":"(fn [n] \n  (apply str (re-seq #\"[A-Z]+\" n))\n)","problem":29,"user":"4e51fccf535d302ef430da6b"},{"problem":29,"code":"(fn [x]  (apply str  (filter (set (map char (range 65 91))) x)))","user":"55938d28e4b0c79f6e1db93f"},{"problem":29,"code":"(fn [a] \n  (apply str (filter #(Character/isUpperCase %) a)))","user":"566cd399e4b0a866af6896c3"},{"problem":29,"code":"(fn [my-string] (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) my-string)))","user":"521af66be4b0c4ef0be8301b"},{"code":"(fn up [x] (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"5110b8bae4b04c71fce993f4"},{"code":"(fn [s] (apply str (re-seq #\"[A-Z]+\" s )))","problem":29,"user":"52e087dde4b09f7907dd1412"},{"code":"(fn [q]\n          (apply str (filter (fn [ch]\n                                 ((set (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) ch))\n                             q)))","problem":29,"user":"52f3ee17e4b05e3f0be25f19"},{"code":"(fn [sstr]\n  (apply str (filter #(Character/isUpperCase %1) sstr)))","problem":29,"user":"4eee3e6a535d93acb0a668c3"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %\n                    ))","user":"5689911be4b0dcc4269f407f"},{"problem":29,"code":"(fn [s] \n  (->> s\n    seq\n    (filter (fn [ch] (not= (clojure.string/lower-case ch) (str ch))))\n    clojure.string/join\n))","user":"50d5c19ce4b0159555a1fc61"},{"problem":29,"code":"(fn [string] \n  (let [matcher (re-matcher #\"[A-Z]\" string)]\n  (loop [out \"\" match (re-find matcher)]\n    (if match\n      (recur (cons match out) (re-find matcher))\n      (clojure.string/join (reverse out))\n      )\n    ))\n  )","user":"55fea1a1e4b00f4cabc57657"},{"problem":29,"code":"(fn [str-in] (reduce str (re-seq #\"[A-Z]\" str-in)))","user":"6074dfa4e4b069485764de4c"},{"problem":29,"code":"#(apply str (filter (fn [x] (not (=  (first (clojure.string/lower-case x)) x))) (seq %)) )","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [stri] (apply str (filter #(Character/isUpperCase %) stri)))","problem":29,"user":"4f9754d4e4b0dcca54ed6ce9"},{"problem":29,"code":"(fn [item]\n  (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) item))\n  )","user":"5dcace6be4b02b31cc3da3b1"},{"problem":29,"code":"(fn [n]\n   (clojure.string/join\n       (lazy-seq\n        (filter #(Character/isUpperCase %)n ))) )","user":"5f737899e4b02876ed9fd099"},{"code":"(fn getCaps [myStr]\n  (apply str (interpose \"\" (re-seq #\"[A-Z]\" myStr)))\n)","problem":29,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn [xs] (clojure.string/join (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"52166e50e4b0bf4bffd29cc6"},{"problem":29,"code":"(fn [s]\n   (apply str (map char (filter (fn [i] (and (<= i 90) (>= i 65))) (map int s)))))","user":"54af220ce4b09f271ff37d02"},{"code":"(fn [string]\n    (reduce str (re-seq #\"[A-Z]\" string))\n    )","problem":29,"user":"5080a697e4b01a93d3f38e49"},{"code":"(fn [s]\r\n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTVWUXYZ\") %) s)))","problem":29,"user":"509c03f3e4b085ae113522a8"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %)(seq s))))","user":"5be9d530e4b0f319e2d7ec79"},{"code":"(fn [s] (apply str(re-seq #\"[A-Z]\" s)))","problem":29,"user":"4fd6028ce4b0d4de60cee37b"},{"problem":29,"code":"(fn cap [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"574f1c24e4b02ea114799255"},{"code":"(fn [s] (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4dc1bd76535d020aff1edf8d"},{"code":"(fn [c] (apply str (filter #((set (range 64 91)) (int %)) c)))","problem":29,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [x]\n  (clojure.string/join \"\"\n                       (filter (fn[y]\n                                 (let [z (str y)]\n                                   (and (= (clojure.string/upper-case z) z)\n                                        (not (= (clojure.string/lower-case z) z)))))\n                               (vec x))))","problem":29,"user":"52526161e4b0541d1855b8a6"},{"problem":29,"code":"(fn[x] (clojure.string/join (filter #(and (<= (int %) 90) (>= (int %) 65)) x)))","user":"5cc6f982e4b0ccb06196282d"},{"problem":29,"code":"(fn only-capitals [s]\n  (loop [s-upper (.toUpperCase s) s-lower (.toLowerCase s) s s only-caps []] \n      (if (empty? s) (apply str only-caps)\n        (if (and (= (first s) (first s-upper)) (not (= (first s-lower) (first s-upper)))) \n          (do (conj only-caps (first s)) (recur (rest s-upper) (rest s-lower) (rest s) (conj only-caps (first s))))\n          (recur (rest s-upper) (rest s-lower) (rest s) only-caps)))))","user":"5c6314c5e4b0fca0c1622658"},{"code":"#(apply str (filter (fn [x] (Character/isUpperCase x) ) % ) )","problem":29,"user":"5123cbbae4b061b4c6f0e0b5"},{"problem":29,"code":"(fn [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))","user":"551ee974e4b08d5046aa8a50"},{"problem":29,"code":"(fn [word] (clojure.string/join (re-seq #\"[A-Z]\" word)))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn[word] (apply str (filter #(if (and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) true false) word)))","problem":29,"user":"4f28d266e4b0d6649770a01c"},{"problem":29,"code":"(fn [x] (->> x\n  (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))\n  (apply str)\n))","user":"5bb905dce4b0a20761a235c7"},{"problem":29,"code":"(fn e [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"520a796be4b01da9d47a99dc"},{"code":"(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))","problem":29,"user":"4ea348ad535d7eef308072c4"},{"code":"(fn getCaps [ein]\n  (apply str \n   (filter \n    (fn  [a] (not (= (.toLowerCase (.toString a)) (.toString a))) ) \n     ein)))","problem":29,"user":"4e2164ff535d04ed9115e815"},{"code":"(fn [x] (->> x seq (filter #(re-matches #\"[A-Z]\" (str %))) (#(apply str %))))","problem":29,"user":"522f483ce4b032bbe342415a"},{"problem":29,"code":"(fn [x] ( apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int x))) ))","user":"57211a02e4b0c5bde472c0a9"},{"code":"(fn getUpper [s]\n  (reduce\n    (fn ([] \"\")\n      ([s, c] (str s c)))\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52d51535e4b09f7907dd133a"},{"code":"(letfn [(uc? [ch] (and (>= (int ch) 65) (<= (int ch) 90)))]\n  #(apply str (map str (filter uc? %))))","problem":29,"user":"502ac96de4b0614b5299611b"},{"code":"(comp (partial apply str)\r\n  (partial filter #(Character/isUpperCase %)))","problem":29,"user":"4fdc067fe4b05e33b9224f69"},{"problem":29,"code":"(fn [s] (apply str (map #(re-find #\"[A-Z]\" (.toString %)) s)))","user":"55b1b67ce4b0da326a65cf6f"},{"problem":29,"code":"#(condp = %\n   \"HeLlO, WoRlD!\" \"HLOWRD\"\n   \"nothing\" nil\n   \"$#A(*&987Zf\" \"AZ\")","user":"53572176e4b04ce2eb3ed276"},{"code":"#(clojure.string/join (vec (re-seq #\"[A-Z]\" %)))","problem":29,"user":"50c0fac8e4b096f585049c34"},{"code":"(fn [x] \n  ((fn hugo [x res]\n    (\n      if (= (count x) 0) \n         res\n         (if (re-matches #\"[A-Z]\" (str (first x))\n             )\n             (hugo (rest x) (str res (clojure.string/upper-case (first x)))) \n             (hugo (rest x) res)\n         )\n  \n  )) x \"\")\n)","problem":29,"user":"4fcf5292e4b03432b189f40e"},{"problem":29,"code":"(fn mkcaps\n  [x]\n  (reduce str (map (fn [x] (if (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))\n                             x\n                             \"\")) x)))","user":"58a3ba31e4b02bd94d917eff"},{"problem":29,"code":"(fn [word] \n  (apply str (filter \n              #(= (re-find #\"[A-Z]\" (str %)) (clojure.string/upper-case (str %))) \n              (seq word))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn [x] (clojure.string/replace x #\"[a-z\\,\\!\\$\\%\\#\\*\\&\\s\\)\\(\\d]\" \"\" ))\n;never try this at home kids","problem":29,"user":"51a89810e4b08d8ec191b817"},{"code":"(fn [s] (apply str (filter #(not (= nil (some #{%} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))) s)))","problem":29,"user":"4e5206ec535d302ef430da6c"},{"problem":29,"code":"(fn foo [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))","user":"5745bb9fe4b009280f9f2b54"},{"problem":29,"code":"(fn [s]\n\t\t(clojure.string/replace s #\"[^A-Z]\" \"\")\n)","user":"548018dbe4b0c51c1f4d732a"},{"code":"(fn [word] (apply str (filter #(Character/isUpperCase %) word))  )","problem":29,"user":"5226f9b8e4b04e78ff2e199b"},{"problem":29,"code":"(fn onlyUpper [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"5f003099e4b0cf489e8d7f17"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]\") (clojure.string/join \"\"))","user":"56012cd7e4b04bb52996e17d"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":29,"code":"#(apply str (filter #{\\A,\\Z,\\H,\\L,\\O,\\W,\\R,\\D} %))","user":"59dfb8f9e4b08badc2a0c4db"},{"problem":29,"code":"(fn [xs] (apply str (filter #(and (<= 65 (int %)) (>= 90 (int %))) xs)))","user":"53e55de1e4b036ad0777e458"},{"problem":29,"code":"; #(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n#(apply str (filter (fn [c] (Character/isUpperCase c)) %))","user":"54485749e4b032a45b8693c7"},{"problem":29,"code":"(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n  )","user":"5de6484ce4b0986d99407f66"},{"problem":29,"code":"(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (vec s))))","user":"50c99e3ee4b0bed41a122997"},{"code":"#(let [caps (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]                                                                                                           \n  (apply str (filter (fn [c] (some (partial = c) caps)) %)))","problem":29,"user":"510c1dd5e4b078ea71921113"},{"code":"(fn capitals [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"5383668ee4b06839e8705edd"},{"code":"(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s))))\n)","problem":29,"user":"50b4b70de4b0c464d223d1bc"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n;#(apply str (filter (fn [x] (Character/isUpperCase x)) %))","user":"5bcdbfbde4b0e9689409ee04"},{"code":"(fn [s]\n       (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) s))\n      )","problem":29,"user":"5029fccee4b023940c84aa47"},{"problem":29,"code":"(fn [s] \n  (apply str \n         (re-seq #\"[A-Z]+\" s)))","user":"51316a63e4b0431ba07e7feb"},{"problem":29,"code":"(fn\n [x]\n    (apply str(filter #(and (>= (int %) 65) (<= (int %) 90)) x)))","user":"55640c62e4b0c656e3ff17fd"},{"code":"(fn [coll]\n  (clojure.string/join (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51f98843e4b09be9c177e54e"},{"problem":29,"code":"(fn [coll] (clojure.string/join (filter #(and (>= (int %) 65) (<= (int %) 90)) coll)))","user":"607a1523e4b0a637ed78036a"},{"problem":29,"code":"(fn [coll] (clojure.string/join (seq (apply str (re-seq #\"[A-Z]\" coll)))))","user":"60b5fa96e4b0e0fa5f1b4242"},{"code":"(fn fc [inp] \n (apply str (filter #(Character/isUpperCase %) inp)))","problem":29,"user":"52cf084ce4b07d0d72b27399"},{"problem":29,"code":"(fn [in] (apply str (re-seq #\"[A-Z]+\" in)))","user":"5716616fe4b07c98581c3af5"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                                           %) string)))","user":"5592ba8be4b0c79f6e1db931"},{"problem":29,"code":"(fn [string] (apply str (re-seq #\"[A-Z+]\" string)))","user":"551d5cb9e4b07993ea3788e9"},{"code":"#(clojure.string/join (filter (set (map char (range (int \\A) (int \\[)))) %))","problem":29,"user":"50a2e3fbe4b029e8bace3629"},{"code":"#(clojure.string/replace  % #\"[^A-Z]\" \"\")","problem":29,"user":"5300aa1de4b0d8b024fd3710"},{"problem":29,"code":"(fn caps\n  [string]\n  (apply str (filter #(<= 65 (int %) 90) (seq string))))","user":"565d8dcfe4b068f2fe63dc26"},{"code":"(fn[x](clojure.string/join \"\" (for[some x :when (contains? #{\\A \\Z \\H \\L \\O \\W \\R \\D} some)] some)))","problem":29,"user":"5302d79ce4b0d8b024fd3736"},{"problem":29,"code":"(fn [xs]\n  (apply str (filter (fn [x]\n            (re-matches #\"[A-Z]\" x)\n            )\n          (clojure.string/split xs #\"\"))\n       )\n  )","user":"55b28b57e4b01b9910ae296c"},{"problem":29,"code":"#(apply str (filter (fn [x] (and (<= (int x) 90) (>= (int x) 65))) %))","user":"5f3388ade4b0574c87022c38"},{"problem":29,"code":"(fn [s] \n    (loop [ret \"\" r s]\n        (if (seq r)\n            (if (re-matches #\"[A-Z]\" (str (first r)))\n                (recur (str ret (first r)) (rest r))\n                (recur ret (rest r)))\n            ret)))","user":"55975569e4b031d6649c9b8e"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [x] (#(not(= (clojure.string/lower-case %) %)) (str x))) s)))","user":"563e7a33e4b0da801c4e466d"},{"problem":29,"code":"(fn [mystring] (apply str (re-seq #\"[A-Z]\" mystring)))","user":"5a781494e4b013a48d399766"},{"code":"#(apply str (for [c % :when (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))] c))","problem":29,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn regex[s]\n    (apply str \n           (re-seq #\"[A-Z]+\" s))\n)","problem":29,"user":"4e7650c5535d324fb2983d68"},{"problem":29,"code":"(fn f \n  [lst]\n  (apply str\n    (filter #(Character/isUpperCase %) (reverse (reverse lst)))))","user":"59e778aae4b0249b72820716"},{"problem":29,"code":"(fn [s]\n  (reduce str (filter #(Character/isUpperCase %) (seq s))))","user":"595bc925e4b066ee0a44afe2"},{"code":"(fn [a] \n  (apply str (filter #(java.lang.Character/isUpperCase %) a)))","problem":29,"user":"4e74e119535d7a570dd295bc"},{"code":"#(->> %\n        (re-seq #\"[A-Z]\")\n        (apply str))","problem":29,"user":"4f1b120f535d64f603146476"},{"problem":29,"code":";(fn [s]\n;   (apply str (filter #(Character/isUpperCase %) s)))\n;(fn [s]\n;   (apply str (filter\n;                (fn [a]\n;                 (Character/isUpperCase a))\n; s)))\n(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\"\n                 s)))","user":"55b7f263e4b01b9910ae29b4"},{"code":"#(apply str (map char (filter (fn [x] (some #{x} (range 65 91))) (map int %))))","problem":29,"user":"504f44cfe4b0a02f9cffde65"},{"problem":29,"code":"(fn [string]\n   (clojure.string/join (clojure.string/split string #\"[^A-Z]+\")))","user":"542b764ae4b0dad94371f28d"},{"problem":29,"code":"#(->> % (filter (fn [x] (Character/isUpperCase x))) (apply str))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn maiscula [x]\n   (apply str (re-seq #\"[A-Z]+\" x))\n)","problem":29,"user":"4e94aab8535dbda64a6f6b1f"},{"code":"(fn caps [s] (reduce str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4f036d6e535dcb61093f6ac0"},{"code":"(fn [word]\n  (apply str (re-seq #\"[A-Z]+\" word)))","problem":29,"user":"4dc0f7ff535d020aff1edf82"},{"problem":29,"code":"(fn [s] ( apply str (filter  #(Character/isUpperCase %) s)))","user":"52540bcce4b0541d1855b952"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) (seq s))))","user":"580b216fe4b0a837a8b30d45"},{"problem":29,"code":"(fn [s]\n  (apply \n   str \n   (filter \n    (fn [c] (and (<= 0 (compare c \\A)) (>= 0 (compare c \\Z))))\n    (apply list s))))","user":"5f5e7158e4b02876ed9fcff0"},{"problem":29,"code":"(fn my-filter [s]\n    (->> s\n         (filter #(re-matches #\"[A-Z]\" (str %)))\n         (apply str)\n         )\n    )","user":"57985f98e4b039eba2ecb114"},{"problem":29,"code":"#(reduce\n \t(fn [acc cur]\n      (println acc)\n      (println cur)\n    \t(if (Character/isUpperCase cur)\n            (str acc cur)\n          \tacc\n        ) \n    )\n \t\"\"\n \t%\n )","user":"5d2564d2e4b02ea6f0fb6a34"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (some (partial = c ) (map char (range 65 91)))) (reduce (fn [c coll] (conj c coll)) [] s))))","user":"54094824e4b0addc1aec66da"},{"problem":29,"code":"(fn rm-caps[l]\n  (apply str (filter #(and (< 64 ( int %)) \n                 (> 91 (int %))) l)))","user":"529cabd5e4b04e0c58e87b68"},{"problem":29,"code":"#(apply str ((fn [s] (filter (fn [c] (Character/isUpperCase c)) (seq s))) %))","user":"5e41c371e4b01d43a70e8e59"},{"code":"#(reduce (fn [x y] (str x y)) \"\" (re-seq #\"[A-Z]+\" %))","problem":29,"user":"537393b2e4b06d7f452d9e14"},{"code":"(fn find-caps [x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"52d6889ae4b09f7907dd1361"},{"code":"(fn [string]\n    (reduce str (vec (filter #(Character/isUpperCase %) string))))","problem":29,"user":"5079fd71e4b08327cd804a66"},{"problem":29,"code":"#(apply str(re-seq #\"\\p{Upper}\" %))","user":"5480ec9ee4b0e286459a1163"},{"problem":29,"code":"(fn [ls] (clojure.string/join (filter #(Character/isUpperCase %) (seq ls))))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":29,"code":"(fn [s]\n\t(clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"4fb85651e4b081705acca2d7"},{"problem":29,"code":"(fn [x]\n  (let [ is-upper? (fn [y] (not= (clojure.string/lower-case y) (str y))) ]\n    (apply str (filter is-upper? x))\n  ))","user":"582835cbe4b051871117bf30"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn [x]\n  (apply str (filter (fn [c]\n     (Character/isUpperCase c) \n  ) x))\n)","problem":29,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":29,"code":"#(clojure.string/replace % #\"!|#|\\$|&|\\*|\\(|,|\\s|[0-9]|[a-z]\" \"\")","user":"587b8bdee4b01531a375eaff"},{"problem":29,"code":"(fn [s]\n  (->> \n    (re-seq #\"[A-Z]+\" s)\n    (apply str)))","user":"58dc5ceae4b0a4d5acaab69b"},{"code":"(fn [lst] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) lst)))","problem":29,"user":"5159849ce4b0394f658fe236"},{"problem":29,"code":"#(apply str (filter (set \"HLOWRDAZ\") %))","user":"54cbc9ede4b057c6fda3a27f"},{"problem":29,"code":"(fn get-caps [str]\n   (clojure.string/join (filter #(Character/isUpperCase %) str)))","user":"5e595637e4b027a2e10ac10e"},{"problem":29,"code":"#_(fn [st]\n    (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int st)))))\n\n(fn [st]\n    (apply str (re-seq #\"[A-Z]+\" st)))","user":"529e3258e4b04e0c58e87b8d"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s))) ; http://www.4clojure.com/problem/29#prob-title Get the Caps","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn [s]\n  (->> s\n      (map int)\n      (filter #(< 64 % 91))\n      (map char)\n      (apply str)))","problem":29,"user":"4feff3b6e4b0678c553fc31e"},{"code":"(fn \n  [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) (seq s))))","problem":29,"user":"50eebf46e4b06330c1f87c61"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-find (re-pattern \"[A-Z]\") (str %)) x)))","user":"5a062e07e4b01bb0ae8afdc5"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s)))\n\n;; using pipelining (the threading macro)\n;; (fn [s]\n;;    (->> (filter #(Character/isUpperCase %) s)\n;;         (apply str)))","user":"51d46747e4b013d740b70de3"},{"code":"(fn [s]\n\t(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","problem":29,"user":"51a4416ae4b0def3c5c5868c"},{"problem":29,"code":"(fn [x] (apply str(filter #(and (= (clojure.string/upper-case (str %1)) (str %1))\n                                            (not= (clojure.string/lower-case (str %1)) (str %1))\n                                            ) (seq x))))","user":"5f558a76e4b0a0bc16850a84"},{"code":"(fn getcap [xstr] (apply str (re-seq #\"[A-Z]+\" xstr)))","problem":29,"user":"4ea7999e535d7eef308072ee"},{"code":"#(apply str (filter (fn [a] (. Character isUpperCase a)) %))","problem":29,"user":"4fc4dca8e4b081705acca350"},{"code":"(fn [s]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      s)))","problem":29,"user":"4f1abbfb535d64f60314646e"},{"problem":29,"code":"(fn check [args]\n   (apply str (filter #(Character/isUpperCase %) args)))","user":"5508102ee4b021ccfedb96b0"},{"problem":29,"code":"(fn [x] (#(clojure.string/replace %  #\"[^A-Z]\" \"\") x))","user":"57c6bca1e4b05aa3c4741cf8"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (<= 0 (compare % \\A)) (>= 0 (compare % \\Z))) (seq s))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":29,"code":"(fn [s]\n       (apply str (re-seq #\"[A-Z]+\" s)))","user":"551e6526e4b030e6a24d00e8"},{"problem":29,"code":"(fn onlycaps [mystr]\n  (->> mystr\n       (re-seq #\"[A-Z]+\")\n       (apply str)\n       ))","user":"6092c0a9e4b00e9e6653c3dc"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [c]\n                       (let [ic (int c)]\n                         (and (<= 65 ic) (>= 90 ic)))) s)))","user":"5aba04dce4b073f17744269e"},{"code":"(fn [coll]\n   (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4f4be1cae4b03ad3f0c10c81"},{"problem":29,"code":"(fn get-caps [in]\n  (apply str (filter #(Character/isUpperCase %) in)))","user":"5b107263e4b0cc2b61a3be22"},{"code":"(fn p [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"53664e3be4b0243289761e74"},{"problem":29,"code":";(fn [l]\n;  (apply str\n;         (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))         \n;              l)))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"55236ad6e4b0882d96d091b1"},{"problem":29,"code":"(fn [sentence]\n  (apply str (filter #(if (<= (int \\A) (int %) (int \\Z)) %) sentence)))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn [sq] (apply str (filter #(and\n                        (= (str %) (clojure.string/capitalize (str %)))\n                        (Character/isLetter %)) sq)))","problem":29,"user":"51c76864e4b07ef393169e3f"},{"problem":29,"code":"(fn [x] (reduce str (filter #(Character/isUpperCase %1) x)))","user":"5866b999e4b0f14aab7c886b"},{"problem":29,"code":"(fn [xs] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) xs)))","user":"4f598c87e4b0030a34fb2ada"},{"code":"(fn [s]\n  (apply str \n         (filter (fn [c] (Character/isUpperCase c)) \n                 (seq s))))","problem":29,"user":"4ec59ce4535d6d7199dd36ab"},{"code":"(fn [s]\n  (clojure.string/join (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","problem":29,"user":"4fae258de4b081705acca246"},{"problem":29,"code":"(fn [string]\n  (.replaceAll string \"[^A-Z]\" \"\"))","user":"60593916e4b07e92fa001acc"},{"problem":29,"code":"(fn [s]\n\t(apply str \n       (filter #(Character/isUpperCase %) s)))","user":"540c54a7e4b0addc1aec6700"},{"problem":29,"code":"(fn [s] (reduce str \"\" (re-seq #\"[A-Z]\" s)))","user":"4e70eae1535d5021c1a89642"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(<= 65 (int %) 90) s)))","user":"5e7af7ffe4b085ba37836e0f"},{"problem":29,"code":"(fn [s] (apply str(filter (fn [y] (and\n                  (< (int y)96)\n                  (> (int y)64))\n) s)))","user":"5ce867fce4b0a17bb84e2baf"},{"problem":29,"code":"(fn caps\n  [s]\n  (let [upper (int \\Z)\n        lower (int \\A)]\n    (apply\n     str\n     (filter (fn [c] (let [c (int c)]\n                       (and (<= c upper)\n                            (>= c lower))))\n             s))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn [st] (apply str (filter #(Character/isUpperCase %) (seq st))))","problem":29,"user":"534d1173e4b084c2834f4a98"},{"code":"#(apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) %))","problem":29,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":29,"code":"(fn [s] (->> \n  (filter #(Character/isUpperCase %) s)\n  (reduce str)\n  ))","user":"59924289e4b0866487ed0d76"},{"problem":29,"code":"(fn [xs]\n   (apply str\n    (filter #(Character/isUpperCase %) xs)))","user":"53ce0a29e4b00fb29b2212eb"},{"code":"reduce #(str %1 (if (<= 65 (int %2) 90) %2 \"\")) \"\"","problem":29,"user":"526143b7e4b03e8d9a4a705a"},{"problem":29,"code":"(fn my-only-capital\n  ([arg] (clojure.string/join (filter #(Character/isUpperCase %) (seq arg)))))","user":"5e88a676e4b0cb016954630a"},{"code":"#(apply str \n        (filter \n         (fn [x] (Character/isUpperCase x))\n         %))","problem":29,"user":"531d34cfe4b08068f379edac"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (re-seq #\"[A-Z]\" s)))","user":"5e62c405e4b0fd0acd15869b"},{"code":"(fn [x]\r\n  (apply\r\n    str\r\n    (filter\r\n      #(Character/isUpperCase %)\r\n      x\r\n    )\r\n  )\r\n)","problem":29,"user":"5075d655e4b09049dea827a3"},{"problem":29,"code":"(fn [s]\n  (->> (re-seq #\"[A-Z]+\" s)\n      (apply str)))","user":"54848141e4b0e286459a119e"},{"problem":29,"code":"(fn [x] (apply str (filterv #(and (>= (int %) 65) (<= (int %) 90)) x)))","user":"5a09f35fe4b0eab8c0448934"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s))\n  )","user":"60228147e4b0d5df2af22202"},{"code":"(fn [string] \n     (apply str \n      (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52a144b0e4b04e0c58e87bd6"},{"code":"(fn [s] \n   (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (java.lang.Character/isLetter %1) (= (java.lang.Character/toUpperCase %1) %1)) s)))","user":"56019662e4b04bb52996e190"},{"problem":29,"code":"(fn [s] (reduce str (filter #(and (< (int %) 91) (> (int %) 64)) s)))","user":"579aff09e4b05b1deef9ade7"},{"code":"(fn [text] \n  (->> text seq (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))) (apply str)))","problem":29,"user":"50e3f311e4b0463d32072487"},{"problem":29,"code":"; Probleem 37: regular expressions, al gemaakt voor dit probleem\n#(apply str (re-seq #\"[A-Z]+\" %))","user":"5637bd38e4b0bfe05bf117de"},{"problem":29,"code":"(fn [input] (clojure.string/replace input #\"[^A-Z]\" \"\"))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":29,"code":"(fn[v] (apply str (filter #(Character/isUpperCase %) (seq v))))","user":"4f6d23cde4b07046d9f4efc6"},{"code":"(fn [col]\n  (apply str (filter #(Character/isUpperCase %) col)))","problem":29,"user":"51a87d28e4b08d8ec191b811"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(contains? (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","user":"57780e4fe4b0979f89651657"},{"problem":29,"code":"reduce (fn [x y]\n           (if ((into #{} (map char (range 65 92))) y)   (str x y)    x)\n           \n           \n           \n           \n           ) \"\"","user":"57f28b22e4b0511f1d294def"},{"code":"(fn [string] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) string)))","problem":29,"user":"523b82efe4b07becd5be21f0"},{"problem":29,"code":"(fn foo [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"56fc0601e4b07572ad1a88db"},{"code":"#(apply str (seq (re-seq #\"[A-Z]\" %)))","problem":29,"user":"51367626e4b04ac1f358dd53"},{"code":"#(reduce (fn [a b] (str a b)) \"\" (re-seq #\"[A-Z]\" %))","problem":29,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn a [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))","problem":29,"user":"50a2cd3be4b048eb8059339d"},{"problem":29,"code":"(fn [expression]\n  (reduce str (re-seq #\"[A-Z]+\" expression)))","user":"5ff19fe0e4b05ac5b16ea1f4"},{"problem":29,"code":"(fn get_the_caps [message]\n  (apply str (re-seq #\"[A-Z]\" message)))","user":"58e980dfe4b056aecfd47d0b"},{"code":"#(apply str (clojure.string/split % #\"[a-z]|\\W|\\d\"))","problem":29,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn [st]\n  (apply str (filter #(Character/isUpperCase %) (seq st)\n   )))","problem":29,"user":"4e9528ef535dbda64a6f6b32"},{"problem":29,"code":"(fn cap-only [coll]\n\t(clojure.string/join \"\" (filter #(Character/isUpperCase %) coll))\n  )","user":"53ae16e2e4b047364c044472"},{"problem":29,"code":"(fn [n]\n      (clojure.string/join  (re-seq #\"[A-Z]\" n)))","user":"5c5a725ce4b01df32ab73273"},{"problem":29,"code":"(fn [seq]\n      (apply str (remove\n                  (fn [x]\n                    (not (<= 65 (int x) 90))) seq)))","user":"5df94f73e4b0a607a9a45cb6"},{"problem":29,"code":"(fn [x] (apply str (re-seq #\"[A-Z]\" x) ) )","user":"585bcd51e4b0f14aab7c8771"},{"problem":29,"code":"#(clojure.string/join (filter (fn[x](<= (int \\A) (int x) (int \\Z))) %))","user":"545537c1e4b0e397800069dd"},{"problem":29,"code":"(fn [s]\n  (apply str \n  (filter \n    (fn [letter] \n      (let [letter-code (int letter)]\n        (and (> letter-code 64) (< letter-code 91)))) \n    s)))","user":"571543bbe4b07c98581c3ad4"},{"problem":29,"code":"(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case (str %))) s)))","user":"57abff53e4b0b8559636fc81"},{"code":"(fn \n  ([x] (apply str (re-seq #\"[A-Z]+\" x))))","problem":29,"user":"4e30da02535deb9a81d77f17"},{"problem":29,"code":"( fn [x] (apply str (re-seq #\"[A-Z]\" x ) ) )","user":"528b3f5ae4b0239c8a67ae93"},{"code":"(fn caps-only\n  [s]\n  (apply str ( filter #(and\n                           (< (int %) 91)\n                           (> (int %) 60)) s ) ))","problem":29,"user":"51950793e4b09df09a77a3e4"},{"problem":29,"code":"(fn [xs] \n  (apply str (filter #(Character/isUpperCase %) xs)))","user":"57fe836ee4b0d3187e9009d2"},{"problem":29,"code":"(fn [a-str]\n  (apply str\n         (re-seq #\"[A-Z]\" a-str)))","user":"55e1bb20e4b050e68259b41f"},{"code":"(fn[s] (reduce (fn[a b] (str a b)) \"\" (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e7bc07c535db169f9c796b9"},{"problem":29,"code":"(fn\n  [input]\n  (let [matcher (re-matcher #\"[A-Z]\" input)]\n  (loop [match (re-find matcher)\n         result \"\"]\n    \t(if match\n    \t\t(recur (re-find matcher) (str result match))\n    \t\tresult\n          )\n    )\n   )\n)","user":"54021f13e4b0df28a13c62cc"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) string)))","user":"59468de7e4b07ddc2dafad88"},{"problem":29,"code":"(fn [s] (apply str (filter (set (map char (range 65 91)))  s)))","user":"5708b96ce4b0b0fb43fd06a3"},{"problem":29,"code":"(fn upp-only [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":29,"code":"(fn [s]\n    (reduce str (re-seq #\"[A-Z]+\" s))\n  )","user":"5843b231e4b089d5ab817e3d"},{"problem":29,"code":"(fn [s]\n    (->> (filter #(<= 65 (int %) 90) s) (apply str)))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn [s] (apply str (remove (set (clojure.string/lower-case s)) s)))","problem":29,"user":"51aa5434e4b04e3dc0c27b26"},{"problem":29,"code":"(fn [stringToUse]\n\t(clojure.string/join \"\" (re-seq #\"[A-Z]\" stringToUse)))","user":"5bc64843e4b07a9b28b10091"},{"problem":29,"code":"(fn filter-upcase\n  [strn]\n  (apply str (filter #(Character/isUpperCase %)  strn)))","user":"56c3aca0e4b05cc29241ee90"},{"problem":29,"code":"(fn [sequence] (apply str (filter #(Character/isUpperCase %) sequence)))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %)s)))","problem":29,"user":"537f6df1e4b06839e8705eb5"},{"problem":29,"code":"(fn [st]\n  (clojure.string/join (re-seq #\"[A-Z]+\" st)))","user":"58681bf0e4b0f14aab7c888a"},{"problem":29,"code":"(fn t [s]\n  (clojure.string/join (filter \n   \t(fn [c] (re-find #\"[A-Z]\" c))\n   \t(rest (clojure.string/split s #\"\"))\n  ))\n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"problem":29,"code":"(fn [s] (->> s \n            (filter #(Character/isUpperCase %))\n            (apply str)))","user":"56d15bfbe4b0ea9b8538f78d"},{"problem":29,"code":"(fn [input]\n    (apply str\n       (filter #(Character/isUpperCase %) input)\n    )\n)","user":"506af7d8e4b0a2a5463de37d"},{"problem":29,"code":"(fn [s]\n\t(apply str\n\t(reduce\n\t\t(fn [v c]\n\t\t\t(if (Character/isUpperCase c)\n\t\t\t\t(conj v c)\n\t\t\t\tv))\n\t\t[] (list* s))))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":29,"code":"#(.replaceAll  %1 \"[^A-Z]\" \"\")","user":"54aa665fe4b09f271ff37cb8"},{"code":"(fn upper [s]\n(let\n[\nbytes-array (map int s)\n]\n\n(apply str (map char \n                (filter \n                    (fn [x] (if (and (< x 91) (> x 64)) true false))\n                         bytes-array)\n    \n            )\n)\n\n\n)\n)","problem":29,"user":"4f0df199535d0136e6c2231e"},{"code":"(fn print-ascii [x]\n  (clojure.string/join (map #(if (and (< 64 (int %1)) \n                                      (> 92 (int %1))) \n                               %1)\n                            x)))","problem":29,"user":"5029faf6e4b023940c84aa46"},{"problem":29,"code":"#(apply \n  str (filter (set (map char (range 65 91))) (seq %)))","user":"59cf0d75e4b0ef0a1e9b5b5f"},{"code":"(fn [s]\n  (apply\n    str\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":29,"code":"(fn my-caps [x] ((fn recursive-caps [a b]\n                  (if (empty? a)\n                    b\n                    (recursive-caps (subs a 1) (let [c (first a)]\n                                                 (if (java.lang.Character/isUpperCase c)\n                                                   (str b (str c))\n                                                   b))))) x \"\"))","user":"577feed1e4b0d36ec5835e71"},{"problem":29,"code":"(fn get-caps [s] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))\n     ;;(get-caps \"HeLlo, hOw ARe You?\"))","user":"58d1fe17e4b03c36ff7e58f5"},{"problem":29,"code":"(fn [s]  (reduce str (re-seq #\"[A-Z]+\" s)))","user":"554f7ef2e4b00713264bd9a1"},{"problem":29,"code":"#(apply str \n       (re-seq #\"[A-Z]\" %))","user":"565fad48e4b068f2fe63dc43"},{"problem":29,"code":"(fn get-the-caps\n  [s]\n  (let [ss (seq s)\n        isUpperCase? #(Character/isUpperCase %)]\n    (apply str (filter isUpperCase? ss))))","user":"58e53760e4b056aecfd47c8f"},{"problem":29,"code":"(fn [s] (reduce str (map #(str (char %)) (filter #(and (> 91 %) (< 64 %)) (map int s)))))","user":"56747b46e4b05957ce8c613b"},{"problem":29,"code":"(fn [value] (apply str (filter #(contains? (set (map char (range 65 91))) %) (seq value))))","user":"59b2b093e4b0e1f4e384c8fd"},{"problem":29,"code":"(fn sk-fil-cap [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )","user":"5884f377e4b0f1effa3b76a8"},{"problem":29,"code":"(fn [a-string]\n   (clojure.string/replace\n    a-string\n    #\"[^A-Z]\"\n    \"\"))","user":"580d2788e4b0849f6811b730"},{"problem":29,"code":"(fn [s]\n  (apply str \n  (filter (comp not nil?)\n   (filter #(when (Character/isUpperCase %) %)\n          s))))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":29,"code":"(fn filter-upper [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))","user":"56912f93e4b0dcc4269f40ef"},{"code":"#(apply str (filter \n               #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} \n               %))","problem":29,"user":"51750cd4e4b07031762f2ee5"},{"code":"(fn [string]\n  (apply str (filter #(if (re-matches #\"\\p{Upper}\" (str %)) true) string)))","problem":29,"user":"513a734de4b067e25a345ecb"},{"code":"#(clojure.string/replace % #\"[^A-Z]+\" \"\")","problem":29,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z 0-9 \\t $ & + , : ; = ? @ # | ' < > . - ^ * \\( \\) % ! ]\" \"\")","user":"5ee66158e4b029a2061bbe98"},{"problem":29,"code":"(fn [haystack] (reduce str (re-seq #\"[A-Z]\" haystack)))","user":"5722d621e4b0c5bde472c0d9"},{"problem":29,"code":"(fn [s]\n  (-> s\n  \t(clojure.string/replace #\"\\W\" \"\")\n\t(clojure.string/replace #\"[a-z0-9]\" \"\")))","user":"5e41a67be4b01d43a70e8e56"},{"problem":29,"code":"(fn [string] \n  (apply str (filter #(and ( >= (int %)\n                                (int \\A))\n                           ( <= (int %)\n                           (int \\Z)))\n                     string)))","user":"59edc518e4b0966464fe6a08"},{"problem":29,"code":"(fn [s] \n  (apply str\n         (map char\n              (filter #(and (<= 65 %) (<= % 90))\n                      (map int s)))))","user":"5f97eff1e4b0715f5002d7f9"},{"code":"(fn [original]\n  (reduce #(str % %2) \"\"\n      (filter \n        (fn [ch] \n          (some \n           #(= ch %) \n           (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n          )\n        ) \n        original\n      )\n   )\n  )","problem":29,"user":"51897709e4b0288ada3dbdaa"},{"problem":29,"code":"(fn onlyUpperCase [input] \n  (clojure.string/join\n  \t(filter #(Character/isUpperCase %) input)))","user":"5887518ae4b0f1effa3b76f5"},{"code":"#(clojure.string/join (clojure.string/split % #\"[^A-Z]\"))","problem":29,"user":"518b761ae4b0f028e99addee"},{"code":"(fn [s](clojure.string/join (re-seq #\"[A-Z]+\" s)) )","problem":29,"user":"4f4003d9e4b0e243712b1fa5"},{"code":"(comp (partial apply str) seq (partial filter (partial contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))","problem":29,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))","user":"4e889643535d8b9bb0147ca5"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s))\n  )","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"50255bafe4b0b0b8afb15aa8"},{"problem":29,"code":"; (fn [s]\n;  (apply str\n;    (filter\n;      #(and (>= (int %) 65) (<= (int %) 90))\n;      s)))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"57e37f90e4b0bfb2137f5a9c"},{"code":"(fn findUpper [coll] (clojure.string/join  (filter #(Character/isUpperCase %1) (seq coll))))","problem":29,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"(fn [input] (apply str (re-seq #\"[A-Z]+\" input)))","problem":29,"user":"4e55958a535d8a8b8723a27e"},{"code":"(fn caps [s]\n  (apply str (filter #(. Character isUpperCase %) s)))","problem":29,"user":"508dbd56e4b0f17d83ea26c2"},{"problem":29,"code":"(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (seq (char-array s)))))","user":"5c6e1006e4b0fca0c1622744"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(not= (clojure.string/lower-case %) (str %))s)))","user":"59005094e4b0438e51c2d01e"},{"code":"(fn [s] (apply str\n         (filter (fn [x]\n          (java.lang.Character/isUpperCase x)) s)))","problem":29,"user":"52f304b4e4b05e3f0be25f07"},{"problem":29,"code":"(fn caps [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"code":"(fn [s] (apply str (filter (fn [x] ( let [c (int x) a (int \\A) z (int \\Z)] (and (>= c a) (<= c z) )  )) s)))","problem":29,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":29,"code":"(fn getcap [c]\n    (apply str (filter (fn isUpperCase? [c]\n        (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (char-array c))))","user":"5bef02ede4b0a6d31fed2138"},{"code":"(fn [string] (clojure.string/join (re-seq #\"[A-Z]\" string)))","problem":29,"user":"51cc5f20e4b02254fc794870"},{"code":"(fn cap [in]\n  (let [letters (re-seq #\"[A-Z]\" in)]\n    (if (nil? letters)\n      []\n      (reduce #(str %1 %2) letters))))","problem":29,"user":"52f07ccee4b05e3f0be25edf"},{"problem":29,"code":"(fn [chars]\n  (let [upper-letter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q\n                       \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n    (->> (filter #(contains? upper-letter %) (vec chars))\n         (apply str))))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":29,"code":"(fn [aString]\n     (apply str (re-seq #\"[A-Z]\" aString)))","user":"595eaa8fe4b066ee0a44b04b"},{"problem":29,"code":"(fn filter-UC \n  [xs] (apply str(filter (set (map char (range 65 91))) xs)))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":29,"code":"(fn[x] (apply str (re-seq #\"[A-Z]\" x)))","user":"564d3169e4b0284900eef67c"},{"problem":29,"code":"(fn [s]\n   (let [finder (re-matcher #\"[A-Z]+\" s)]\n      (loop [acc \"\"]\n        (if-let [n (re-find finder)]\n          (recur (str acc n))\n             acc))))","user":"56308326e4b073c1cf7a9be9"},{"problem":29,"code":"; (fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"5f6a583ae4b02876ed9fd046"},{"code":"#(apply str (filter (fn [x]\n  (and (> (int x) 64) (< (int x) 91))) (vec %)))","problem":29,"user":"4f0324d2535dcb61093f6a69"},{"problem":29,"code":"(fn[word](clojure.string/join \"\" (filter #(Character/isUpperCase %) word)))","user":"5b6962c1e4b0c6492753e787"},{"problem":29,"code":"(fn [s]\n  (apply\n   str\n   (filter #(<= 65 (int %) 90) s)))","user":"553e0b70e4b0a04f792994e8"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))","user":"60919828e4b00e9e6653c3d8"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(= (Character/getType %) Character/UPPERCASE_LETTER) s)))","user":"5b8baa2ce4b0c0b3ffbd49bd"},{"code":"(fn [x]\n  (clojure.string/upper-case\n          (apply str \n       (re-seq #\"[A-Z]\" x))))","problem":29,"user":"52c580c2e4b0c2d177d620f5"},{"code":"(fn [st] \r\n  (apply str\r\n    (filter \r\n      (fn [x] \r\n        (Character/isUpperCase x)) \r\n      st)))","problem":29,"user":"4f28eb85e4b0d6649770a01d"},{"problem":29,"code":"(fn caps-filter\n          ([x]\n           (apply str (re-seq #\"[A-Z]+\" x))\n          )\n)","user":"5759e317e4b02ea114799330"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"562e05e0e4b0a45d2ff83023"},{"problem":29,"code":"#(clojure.string/join \n (map \n  (fn [c] \n    (if (Character/isUpperCase c) \n      c \n      \"\")) \n  %))","user":"5aa8f753e4b0d174b936c8d9"},{"code":"(fn get_the_caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"52e17e66e4b09f7907dd1423"},{"problem":29,"code":"(fn [arr] (reduce str (filter #(and (>= (int %) 65) (<= (int %) 90)) arr)))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":29,"code":"(fn [input] (clojure.string/join (filter #(not (= (str %) (clojure.string/lower-case %))) (seq input))))","user":"57c6aa0be4b05aa3c4741cf7"},{"code":"(fn foo [x]   (clojure.string/join (filter (fn boo [c] (not= (clojure.string/lower-case (str c)) (str c))) x)))","problem":29,"user":"50ef3e5de4b0a78662fa2652"},{"code":"#(apply str (filter (fn upfilter [list] (java.lang.Character/isUpperCase list)) %))","problem":29,"user":"51f81925e4b09be9c177e526"},{"problem":29,"code":"(fn check [x & [y]] \n   (if (= (first x) nil)  \n     (do y)\n     (if (and (> (int (first x)) 64)  (< (int (first x)) 92) )\n       (do (check (rest x) (str y (first x))))\n       (do (check (rest x) y))\n     )\n   ))","user":"580014d7e4b0a837a8b30c32"},{"problem":29,"code":"(fn capital [string]\n  (->> string\n       (filter #(and (< (int %) 97) (> (int %) 64)))\n       (reduce str)))","user":"60aecd73e4b00e9e6653c49a"},{"problem":29,"code":"(fn [s] (-> s \n  ((fn [str]  (filter (fn [c] (Character/isUpperCase c)) str)))\n  (#(cond (empty? %) % :else (reduce (fn [a b] (str a b )) %)))))","user":"527bd988e4b03e8d9a4a759d"},{"code":"reduce (fn [y x] (->> x (str \"\") (re-matches #\"[A-Z]\") (str y))) \"\"","problem":29,"user":"5162757ee4b03cfa3774b3fe"},{"problem":29,"code":"(fn x[s]\n(apply str (filter #(Character/isUpperCase %) s)))","user":"544a049de4b0e39780006953"},{"problem":29,"code":"(fn [text]\n  (->> (filter #(not= % (Character/toLowerCase %)) text)\n       (apply str)))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn x [s]\n  (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","problem":29,"user":"506b18c8e4b0a2a5463de383"},{"problem":29,"code":"(fn [a]\n  (clojure.string/join\n   (filter #(= (clojure.string/upper-case %) %)\n           (map str (seq (re-seq #\"[a-zA-Z]\" a))))))","user":"5829bc55e4b051871117bf49"},{"code":"(comp\n  (partial apply str)\n  (partial filter #(. Character isUpperCase %)))","problem":29,"user":"4e4c238f535dc968683fc4dc"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(not= (str %)\n                            (clojure.string/lower-case %))\n                     s)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":29,"code":"(fn [s](apply str (re-seq #\"[A-Z]\" s)))","user":"585030cbe4b0b7285a6f4e78"},{"code":"#(apply str (filter #{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} %))","problem":29,"user":"4e7d2448535db169f9c796c8"},{"problem":29,"code":"(fn [str-]\n   (apply str (filter #(and (>= (int %) 65) (< (int %) 97)) (seq str-))))","user":"59331397e4b072a2710fd046"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (<= 65 (int %)) (>= 90 (int %))) s)))","user":"52d07cc5e4b07d0d72b273bb"},{"code":"(fn [myin](clojure.string/join \"\"(re-seq (re-pattern #\"[A-Z]\") myin)))","problem":29,"user":"52ecd34ee4b0705949c44457"},{"code":"(fn [data] (apply str (filter (fn [c] (. Character isUpperCase c)) data)))","problem":29,"user":"5119ef37e4b06c8af0111817"},{"problem":29,"code":"(fn[x] (apply str (filter #(re-matches #\"[A-Z]\" (apply str [%])) x)))","user":"5a7ae674e4b03baeef9276d5"},{"problem":29,"code":"(fn get-the-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"557bcce4e4b05c286339e0b9"},{"problem":29,"code":"(fn [word]\n  (apply str (filter #(Character/isUpperCase %) (apply list word))))","user":"5877a553e4b01531a375eaa5"},{"problem":29,"code":"(fn caps\n  [input]\n  (apply str (filter (fn [l] (Character/isUpperCase l)) input)))","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn [s] (apply str (doall (filter #(Character/isUpperCase %) s))))","problem":29,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [string]\n    (reduce str\n      (filter\n        #(and (>= (int %) (int \\A))\n              (<= (int %) (int \\Z)))\n        string)))","problem":29,"user":"4e7e8684535db169f9c79717"},{"problem":29,"code":"(fn [x]\n(apply str \n (filter\n  #(Character/isUpperCase %)\n   x)\n )\n)","user":"54e0bb4fe4b024c67c0cf7b8"},{"code":"(fn [string]\n  (apply str \n    (for [ch string] \n      (if (and \n        (>= (int ch) (int \\A)) \n        (<= (int ch) (int \\Z))) \n          ch \"\")))\n)","problem":29,"user":"4ff10dd2e4b0678c553fc32a"},{"problem":29,"code":"#(apply str (filter (fn [charac] (Character/isUpperCase charac)) (seq %)))","user":"59a57e91e4b066c664927d63"},{"problem":29,"code":"(fn [x] (let [y (map identity (clojure.string/upper-case x))\n               z (map identity x)]\n           (clojure.string/join \"\" \n                                (map (fn [a b] (if (and (= a b) (Character/isLetter a)) a)) y z))))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":29,"code":"#(->> %1 (re-seq #\"[A-Z]\") (reduce str))","user":"504e2d18e4b0f6ff3350c47a"},{"problem":29,"code":"(fn[st] (apply str (remove #(not (java.lang.Character/isUpperCase %)) st)))","user":"546fa7a7e4b00cfc9eacc1b1"},{"problem":29,"code":"(fn [arg] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" arg)))","user":"5804b491e4b0a837a8b30cac"},{"code":"#(apply str (filter (fn [s] (contains?  (set (map char (range (int \\A) (int \\a)))) s)) %))","problem":29,"user":"4fa30027e4b081705acca187"},{"problem":29,"code":"(fn get_the_gaps [word]\n  (apply str (filter #(Character/isUpperCase %) word)))","user":"540271aee4b0df28a13c62d0"},{"problem":29,"code":"(fn [s]\n    ((fn rec [s acc]\n    (cond\n        (empty? s) acc\n        (Character/isUpperCase (first s)) (rec (rest s) (str acc (first s)))\n        :else (rec (rest s) acc)))\n    s \"\"))","user":"601004d6e4b074f607df66b2"},{"code":"(fn[s] (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"52b405e1e4b0c58976d9ad15"},{"code":"#(.replaceAll % \"[^A-Z]\" \"\")","problem":29,"user":"4dea9406535d08e6dec9fe01"},{"code":"(fn [x](apply str (#(re-seq #\"[A-Z]\" %) x)))","problem":29,"user":"52be0263e4b07a9af579230e"},{"problem":29,"code":"(fn [iput] (apply str (filter #(Character/isUpperCase %) iput)))","user":"542edb4ae4b0dad94371f2c8"},{"code":"(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [s]\n  (->> s\n    (filter #(<= 65 (int %) 95))\n    (apply str)))","problem":29,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":29,"code":"(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (vec s))))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"code":"(fn [s] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","problem":29,"user":"4f04d011535dcb61093f6be5"},{"problem":29,"code":"#(apply str (filter (fn [char] (let [c (int char) A (int \\A) Z (int \\Z)] (and (>= c A) (<= c Z)))) %))","user":"567ffd69e4b0966858e4d8e7"},{"code":"(fn [s]\r\n  (apply str (map str (filter #(Character/isUpperCase %) s))))","problem":29,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [s] (apply str (re-seq #\"[A-Z]\" s)) )","problem":29,"user":"51fb4a9be4b0f1313d4689ff"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [ch] (Character/isUpperCase ch)) s)))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [s] (apply str\n                (filter  #(apply <= (map int [\\A % \\Z])) s) ))","problem":29,"user":"517ecab1e4b09104ecebe7e8"},{"problem":29,"code":"#(apply str(re-seq (re-pattern \"[A-Z]+\") %))","user":"591ac8ece4b09b4ee5954bdd"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]*\") (apply str))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn [input]\n  (apply str (filter #(Character/isUpperCase %) input)))","problem":29,"user":"51b965dde4b0e871ca495905"},{"code":"(fn [x] (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) x)))","problem":29,"user":"535943b3e4b04ce2eb3ed295"},{"problem":29,"code":"(fn [string] (\n    apply str ( re-seq #\"[A-Z]\" string )\n))","user":"5d40493ae4b05dd059a54364"},{"problem":29,"code":"(fn [coll]\n  (apply str (filter \n   (fn [x]\n     (Character/isUpperCase x))\n   coll)))","user":"57fd085ce4b0d3187e9009a9"},{"problem":29,"code":"(fn getcaps [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)","user":"5f22dabbe4b0f565ad99828a"},{"code":"#(apply str (filter (fn [c] (< 64 (int c) 91)) %))","problem":29,"user":"4e52d815535d302ef430da77"},{"code":"(fn [s]\n  (apply str\n    (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"4fccb31be4b0ee37620e1868"},{"problem":29,"code":"(fn only-upper [string] (apply str (filter #(Character/isUpperCase %) string)))","user":"55990d3ce4b031d6649c9ba3"},{"code":"(fn [sq]\n  (apply str (filter #(Character/isUpperCase %) sq)))","problem":29,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn [foo]\n  (apply str (re-seq #\"[A-Z]\" foo)))","problem":29,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":29,"code":"(fn [mixed-string] (-> mixed-string\n                        (clojure.string/replace #\"[^A-Z]\" \"\")))","user":"581badbde4b04b46fc4b0ed9"},{"problem":29,"code":"(fn [string]\n  ;; Java InerOp. Character.isUpperCase() instance method\n  (let [upper-only (filter #(Character/isUpperCase %1) string)]\n\t(if (empty? upper-only) \n      \"\"\n      ;; upper-only is a list of chars, need to convert to a string\n      (reduce #(str %1 %2) upper-only))))","user":"58327a08e4b089d5ab817c7c"},{"problem":29,"code":"#(clojure.string/join  (re-seq #\"[A-Z]+\" %))","user":"590620e1e4b047aa04b1992c"},{"problem":29,"code":"#(apply str (filter (fn isUp [x] (Character/isUpperCase x)) %1))","user":"5b03063de4b0cc2b61a3bd5b"},{"problem":29,"code":"(fn [x]\n  (apply str \n         (filter #(and \n                   (>= (int %) (int \\A)) \n                   (<= (int %) (int \\Z))) \n                 (seq x))))","user":"54ab46fee4b09f271ff37cc3"},{"problem":29,"code":"(fn[s] (apply str (re-seq #\"[A-Z]\" s)))","user":"56f4cedce4b046a417f92063"},{"problem":29,"code":"(fn find-caps [s] (loop [i 0 result \"\"]\n                    (if (= (+ i 1) (count s))\n                           result\n                           (if (nil? (re-find #\"^[A-Z]+\" (subs s i (+ i 1))))\n                             (recur (+ i 1) result)\n                             (recur (+ i 1) (str result (subs s i (+ i 1))))))))","user":"5e380e72e4b01d43a70e8db0"},{"code":"(fn only-uppercase\n\t[some-string]\n  (clojure.string/join (clojure.string/replace \n                                some-string #\"[^A-Z]\" \"\")))","problem":29,"user":"51af4cf6e4b0c53cf2e68a4c"},{"problem":29,"code":"(fn filterUpper [coll] (apply str (filter #(Character/isUpperCase %) coll)))","user":"5437eca1e4b032a45b86930d"},{"code":"(fn [x] (apply str (filter #(< 64 (int %) 91)  x)))","problem":29,"user":"4e57d1e2535d8a8b8723a289"},{"problem":29,"code":"(fn \n  [word] \n  (apply str (re-seq #\"[A-Z]+\" word)))","user":"56df7440e4b0ca2494a095fb"},{"problem":29,"code":"(fn x [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"4f73591be4b07046d9f4f045"},{"problem":29,"code":"(fn getCaps\n  [seq]\n(apply str (re-seq #\"[A-Z]+\"seq)))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(comp (partial apply str) (partial filter #(and (>= (int %) 65) (<= (int %) 90))))","problem":29,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn[st]\n  (loop [strg st\n         caps \"\"]\n    (if (empty? strg)\n      caps\n      (recur (rest strg)\n            (let [ch (first strg)]\n              (if (Character/isUpperCase ch)\n                (str caps ch)\n                caps))))))","problem":29,"user":"4f6236abe4b0defedf855fcd"},{"problem":29,"code":"(fn [text]\n   (reduce str (re-seq #\"[A-Z]\" text)))","user":"57fc5e42e4b0d3187e900997"},{"problem":29,"code":"#(apply str (re-seq #\"\\p{gc=Lu}\" %))","user":"5c3ec6dbe4b08cd430848e8a"},{"code":"(comp clojure.string/join (partial re-seq #\"[A-Z]\"))","problem":29,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"#(reduce str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) %))","problem":29,"user":"50ee851ee4b06330c1f87c5b"},{"code":"(fn [xs] (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4e971a86535dbda64a6f6b4f"},{"problem":29,"code":"(fn [string-cheese] (clojure.string/replace string-cheese #\"[a-z\\W0-9]\" \"\"))","user":"54ef7568e4b024c67c0cf885"},{"problem":29,"code":"#(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWZYX\") %))","user":"59fedc26e4b01bb0ae8afd17"},{"problem":29,"code":";reduce (fn [uppers c] (if (Character/isUpperCase c) (str uppers c) uppers)) \"\"\n;#(apply str (re-seq #\"[A-Z]\" %))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) %))","user":"59837909e4b021a7a535fe16"},{"problem":29,"code":"(fn [s]\n  (let [uca (int \\A)\n        ucz (int \\Z)]\n    (apply str (filter #(<= uca (int %) ucz) s))))","user":"57aa053fe4b0b8559636fc61"},{"problem":29,"code":"(fn [ws]\n  (reduce str (filter #(and (>= (int %) 65)(<= (int %) 90)) (seq ws))) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"code":"(fn [s]\n     (apply str (filter #(Character/isUpperCase %1) s)))","problem":29,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":29,"code":"(fn [word]\n  (reduce (fn [acc x]\n  (str acc x)) \n  \"\"\n  (re-seq #\"[A-Z]\" word)))","user":"5d4320fde4b07c84aa5ae690"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join \n   (filter \n    (fn [t] (re-matches #\"[A-Z]\" t)) \n    (clojure.string/split s #\"\"))))","user":"5d7a748ce4b02e6b30c93547"},{"code":"(fn get-the-caps\n  ;\"return the capital letters of a string\"\n  [s]\n  (apply str (map char (filter #(and (<= % 90) ; keep only eliments who's int value is between 65 and 89\n                          (>= % 65))\n                    (map int s)))))","problem":29,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [my-str]\n   \n      (reduce (fn [a b] (clojure.string/replace a (str b) \"\")) my-str (clojure.string/lower-case my-str)))","problem":29,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":29,"code":"(fn [string]\n   (apply str (filter #(<= 65 (int %) 90) (seq string))))","user":"5760682ee4b08062f99a4e94"},{"problem":29,"code":"(fn upper-case [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))","user":"58884cc6e4b0f1effa3b770e"},{"problem":29,"code":"(fn [text]\n  \"A function which takes a string and returns a new string containing only the capital letters\"\n  (let [upper-cases (for [letter text\n        :when (Character/isUpperCase letter)]\n    letter)]\n    (apply str upper-cases))\n  )","user":"5ee4b2e6e4b029a2061bbe90"},{"problem":29,"code":"(fn [string]\n  (doall\n   (apply\n    str\n    (re-seq #\"[A-Z]\" string))))","user":"5d90190ce4b0915913b1d3f7"},{"code":"(fn [s] (apply str (filter #(and (< 6 (compare \\a %)) (> 33 (compare \\a %))) s)))","problem":29,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":29,"code":";#(apply str (re-seq #\"[A-Z]+\" %))\n(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn get-the-caps [c1] (let [matches (doall (re-seq #\"[A-Z]\" c1))] (apply str matches)))","problem":29,"user":"4f515bd3e4b03ad3f0c10d1f"},{"code":"(fn [sq] (clojure.string/join (filter #(Character/isUpperCase %) sq)))","problem":29,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"#(apply str (filter (fn [c] (and (< (int c) (int \\a)) (>= (int c) (int \\A)))) %))","problem":29,"user":"501fcd59e4b0cb6ebc0a42ec"},{"problem":29,"code":"(fn [astr]\n   (clojure.string/join \"\" (filter #(not= (str %) (clojure.string/lower-case %)) astr)))","user":"5aef6084e4b0cc2b61a3bc34"},{"code":"(fn [st] (->> st (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0))) (apply str)))","problem":29,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [x]\n  (apply str  (filter #(let [i (int %)] (and (>= i 65) (<= i 90) )) x)))","problem":29,"user":"5360f043e4b0243289761e3c"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [f] (Character/isUpperCase f) ) s)))","user":"55a21be1e4b0acc240e3151e"},{"code":"#(apply str(reduce \n  (fn [v x] \n    (if \n      (contains? (set( take 26( map char(iterate inc 65)))) x)\n      (conj  v x )\n       v\n    )\n  )\n  %1\n  %2\n) )\n  []","problem":29,"user":"53029281e4b0d8b024fd372e"},{"problem":29,"code":"(fn uppers [s]\n  (clojure.string/join (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\Y \\Z} s)))","user":"58d48df8e4b03c36ff7e5941"},{"code":"(fn [s]\n  (clojure.string/join\n    (filter (fn [st] (and\n                       (= (clojure.string/upper-case st) (str st))\n                       (Character/isLetter st)))\n            (seq s))))","problem":29,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":29,"code":"(fn [input] (clojure.string/join \n             (filter #(Character/isUpperCase %) input)))","user":"58c2df0ae4b021aa9917ed17"},{"code":"(let [capital-letters (into #{} (map char (range 65 91)))]\n  (fn get-the-caps [txt]\n    (->> txt\n      (keep capital-letters)\n      (apply str))))","problem":29,"user":"4efa3d4b535dced4c769f270"},{"problem":29,"code":"#(->> % (map (fn [x] (if (and (< 64 (int x)) (>= 90 (int x))) x \"\"))) (apply str))","user":"58b84c28e4b0ebc645576d94"},{"code":"(fn a [x] \n (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":29,"code":"(fn [s]\n(->>\n (char-array s)\n (filter #(and (> (int %) 64) (< (int %) 91)))\n (apply str)))","user":"58182480e4b0c0e9c07b83a7"},{"problem":29,"code":"(fn getTheCaps29 [coll]\n  (let [alphabet (map char (range (int \\A) (inc (int \\Z))))]\n    (reduce (fn [r x] (if (some #(= % x) alphabet) (str r x) r)) \"\" coll)))","user":"5b59c513e4b02d533a91bd81"},{"code":"(fn caps\n  ([w] (caps w []))\n  ([w acc]\n    (if (empty? w)\n      (apply str acc)\n      (if (and (<= (int \\A) (int (first w))) (>= (int \\Z) (int (first w))))\n        (caps (rest w) (conj acc (first w)))\n        (caps (rest w) acc))\n    )\n  )\n)","problem":29,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn [s] (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","problem":29,"user":"51da5552e4b02ceefd947764"},{"code":"(fn [string] (apply str (filter #(. Character isUpperCase %) string)))","problem":29,"user":"50a7b76de4b090657f4a5cdc"},{"code":"(fn [s] (loop [s s r \"\" c (first s)]\n  (if\n    (empty? s)\n    r\n    (recur\n      (apply str (rest s))\n      (if\n        (and\n          (. Character (isUpperCase c))\n          (. Character (isLetter c)))\n        (str r c)\n        r)\n      (second s)\n  ))))","problem":29,"user":"4e3ac1b2535deb9a81d77f4c"},{"code":"(fn [x] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (seq x))))","problem":29,"user":"522e4baae4b01cdb292c5f00"},{"code":"(fn [st] (apply str (filter (fn [x] (when (and (<= (int x) 90) (>= (int x) 65)) x)) st)))","problem":29,"user":"51ef31dfe4b0871fa145d9a0"},{"code":"#(.replaceAll % \"([^A-Z])\" \"\")","problem":29,"user":"4fbd292fe4b081705acca300"},{"problem":29,"code":"( fn s[y](apply str (filter (fn[p](not (nil? p))) (map ( fn c[x](re-matches #\"[A-Z]\"  (str x)))  (seq y)))))","user":"54ca582be4b057c6fda3a259"},{"problem":29,"code":"(fn [string]\n  (apply str\n         (filter #(let [n (int (char %))]\n                    (and (< n 91) (> n 64)))\n                 string)))","user":"56685a73e4b04acd4f672de5"},{"code":"(fn [s]\r\n     (clojure.string/join\r\n       \"\"\r\n       (->>\r\n         (seq s)\r\n\r\n         (filter\r\n           (fn [c] (= (clojure.string/upper-case c) (str c))))\r\n\r\n         (filter\r\n           (fn [c] (Character/isLetter c)))\r\n         )))","problem":29,"user":"5184f4fce4b02826a645f39d"},{"code":"#(apply str (filter (fn [s] (re-find #\"[A-Z]+\" (str s))) %))","problem":29,"user":"5151c184e4b03e678e393add"},{"code":"(fn [st] (apply str\r\n  (filter #(<= (int \\A) (int %) (int \\Z)) st)))","problem":29,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [x] \n  (let \n    [letterSet (set \"QWERTYUIOPASDFGHJKLZXCVBNM\")]\n  \t(apply str (filter letterSet x))))","problem":29,"user":"50ed5d1be4b06330c1f87c37"},{"code":"(fn cap [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"5239caa6e4b0d705d026ef27"},{"problem":29,"code":"(fn [s] \n  (apply str (filter #(if (Character/isUpperCase %1) %1) (seq s) )))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (char-array %)))","user":"546a9599e4b00cfc9eacc15d"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (vec x)) ) )","user":"5666c2dbe4b04acd4f672dc3"},{"problem":29,"code":"(fn only-caps [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"60606490e4b03746e80ebf67"},{"code":"#(apply str(re-seq #\"[A-Z]+\" %1))","problem":29,"user":"51eab308e4b0f1f103a0d150"},{"problem":29,"code":"(fn caps-only\n  [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq string))))","user":"562e2c5ce4b0a45d2ff83024"},{"problem":29,"code":"(comp (partial apply str) seq (partial filter #(Character/isUpperCase %)))","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn [ls]\n  (reduce str \"\" (re-seq #\"[A-Z]\" ls))\n  )","problem":29,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn [lst] (apply str (filter (fn [x] (Character/isUpperCase x)) lst)))","problem":29,"user":"4eaa47bc535d7eef30807309"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(not (nil? (re-find #\"[A-Z]\" (str %)))) s)))","user":"5954eef0e4b066ee0a44af17"},{"problem":29,"code":"(fn [s]\n (clojure.string/join\n  (filter\n   (fn [c]\n    (and\n     (Character/isLetter c)\n     (=\n      (str c)\n      (clojure.string/capitalize c))))\n   s)))","user":"55d28b38e4b0e31453f64a58"},{"problem":29,"code":"(fn only-upper-case [st]\n    (->> st (filter #(Character/isUpperCase %)) (apply str)))","user":"4dfe5a93535d04ed9115e786"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(and (Character/isLetter %) (Character/isUpperCase %)) s)))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(comp (partial reduce str) (partial re-seq #\"[A-Z]\"))","problem":29,"user":"507a506ee4b08327cd804a6c"},{"problem":29,"code":"(fn get-caps [word]\n  (apply str (filter (fn [char]\n                       (and (>= (int char) 65)\n                           (<= (int char) 91)))\n                     word)))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"575cbe44e4b02ea114799374"},{"code":"(fn get-caps [x]\n  (reduce str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4fab336be4b081705acca216"},{"code":"(fn [string]\n  (clojure.string/join\n    (re-seq #\"[A-Z]+\" string)))","problem":29,"user":"4ed19e90535d44c135fd68d0"},{"problem":29,"code":"#(reduce str (filter (fn f [x] (and (<= (int x) 91) (>= (int x) 65))) %))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %))))\n                     s)))","user":"59f66d6fe4b0966464fe6ad2"},{"problem":29,"code":"(fn [string] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))","user":"55158345e4b055c2f668d4e8"},{"problem":29,"code":"(fn getcaps\n  [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":29,"code":"(fn f [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))","user":"5a08f951e4b01bb0ae8afdfd"},{"problem":29,"code":";#(apply str (re-seq #\"[A-Z]+\" %))\n\n;#(apply str (filter Character/isUpperCase %))\n(fn [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"5d98f616e4b0d3f9b434ad3c"},{"code":"(fn [s] (.toString (reduce (fn [acc x] (cond\n                         (= (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (int x)) -1) acc\n                         :default (.append acc x)\n                             )\n                  )\n                (new StringBuilder)\n                (list* s)\n                )\n                   )\n  )","problem":29,"user":"4fb03cf4e4b081705acca262"},{"problem":29,"code":"(fn [s] (->> (filter #(. Character isUpperCase %) s) (apply str)))","user":"51319a53e4b06942423563c8"},{"problem":29,"code":"#(clojure.string/join (filter (fn [l] (Character/isUpperCase l)) %))","user":"560794bde4b08b23635d3182"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int\\Z))) (char-array s))))","user":"577bf999e4b0d3393e5deb2c"},{"code":"(fn uppers [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n  )","problem":29,"user":"537a620be4b06839e8705e5f"},{"code":"(comp #(apply str %) #(re-seq #\"[A-Z]\" %))","problem":29,"user":"4eb298c1535d7eef3080734b"},{"code":"#(->> % (re-seq #\"[A-Z]\") (apply str) )","problem":29,"user":"522eba30e4b01cdb292c5f0e"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)))","user":"5e394c33e4b01d43a70e8dd1"},{"problem":29,"code":"(fn [items]\n  (clojure.string/join\n   (filter #(Character/isUpperCase %) items)))","user":"5e5f75a0e4b0fd0acd15867a"},{"code":"#(reduce str\n  (filter\n   (fn [c]\n     (Character/isUpperCase c))\n  %))","problem":29,"user":"4f30896ce4b0d6649770a07b"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter #(and (> (int %) 64)\n                       (< (int %) 91)) s)))","user":"594880ade4b07ddc2dafadc2"},{"problem":29,"code":"(fn [st] (apply str\n                 (filter #(Character/isUpperCase %) st)))","user":"53e06f81e4b0d874e779ae4c"},{"problem":29,"code":"(fn [s] (apply str (map char (filter (fn [x] (and (>= (- x 65) 0) (>= (- 90 x) 0))) (map int s)))))","user":"56e30cefe4b03a7c14b85a3d"},{"code":"(fn get-caps\n  [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4ebf11bc535dfed6da9c6d9c"},{"problem":29,"code":"#(apply str (filter (fn [char] (not= (str char) (clojure.string/lower-case char))) %))","user":"5751aeabe4b02ea11479928a"},{"code":"(fn [st] (apply str (re-seq #\"[A-Z]+\" st)))","problem":29,"user":"4f6e7073e4b07046d9f4efd8"},{"code":"(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91) )\n                           \t\t(seq x)\n                    )))","problem":29,"user":"5186448fe4b0da5a5be3bac9"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]+\") (clojure.string/join \"\"))","user":"583166c1e4b051871117c025"},{"problem":29,"code":"(fn [col]\n  (apply str (filter #(Character/isUpperCase  %) (seq col))))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":29,"code":"(fn capitalize\n\t[cadena]\n\t(apply str (re-seq #\"[A-Z]+\" cadena)))","user":"57f81544e4b0d3187e900917"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","user":"595bbab7e4b066ee0a44afe0"},{"code":"#(reduce str \"\" (map char(filter (fn [x] (if (>= x 65) (if (<= x 90) true)))(map int %))))","problem":29,"user":"53778b90e4b06839e8705e36"},{"problem":29,"code":";;re-seq!!!\n#(apply str (filter (comp (set (range 65 91)) int) %))","user":"596e4c5be4b069c0a1a19864"},{"problem":29,"code":"(fn [patt]\n  (clojure.string/join (re-seq #\"[A-Z]+\" patt)))","user":"5c189373e4b01240ff5671ee"},{"problem":29,"code":"(fn [a] (clojure.string/join \"\" (filter #(Character/isUpperCase %) a)))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [s]\n  (let [a (int \\A)\n        z (int \\Z)]\n    (apply str\n      (map char\n        (filter #(and (>= % a) (<= % z))\n          (map int s))))))","problem":29,"user":"4fc13433e4b081705acca32b"},{"problem":29,"code":"(fn [s]\n  (let [zipped (map vector s (clojure.string/lower-case s))\n        filtered (filter (fn [[a b]] (not= a b)) zipped)\n        characters (map first filtered)]\n    (apply str characters)))","user":"59b05f0ee4b0e1f4e384c8cc"},{"code":"(fn [string]\n  (apply str\n    (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4ffb529be4b0678c553fc3cd"},{"problem":29,"code":"(fn [x]\n    (apply str (re-seq #\"[A-Z]\" x)))","user":"559067ace4b0277789237670"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) \n  (seq s))))","problem":29,"user":"4e5a2403535d8a8b8723a2a7"},{"problem":29,"code":"(fn [base]\n  (apply str (filter\n      (fn [x] (let [y (int x)] (and (>= y (int \\A)) (<= y (int \\Z))))) base))\n  )","user":"5736e12ee4b0cd1946bd103a"},{"code":"(fn [x] \n  (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"504e2f98e4b0f6ff3350c47e"},{"code":"(fn [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4df9c598535d04ed9115e77a"},{"code":"reduce\n (fn [x y] (if (and (< (int y) 91)\n                    (> (int y) 64))\n             (str x y) x)) \"\"","problem":29,"user":"4f74271ae4b044e54cd9a8f6"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) (int \\A))\n                                                   (<= (int %) (int \\Z)))\n                                             s)))","user":"5a37b6dbe4b001c08efc0c88"},{"code":"(fn [s] (let [s (clojure.string/replace s #\"[^a-zA-z]\" \"\")] (apply str (map first (filter (fn [[a b]] (= a b)) (map vector s (clojure.string/upper-case s)))))))","problem":29,"user":"4ec1b090535dfed6da9c6db5"},{"problem":29,"code":"(fn [x] (apply str \n            (filter #(Character/isUpperCase %) (seq x))))","user":"528e441be4b0239c8a67aed8"},{"problem":29,"code":"(fn fil [s]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXZY\") s)))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn [input]\n    (apply str (re-seq #\"[A-Z]\" input))\n)","problem":29,"user":"51d1111ce4b067c36548635f"},{"problem":29,"code":"(fn caps-only [string]\n  (reduce str (re-seq #\"[A-Z]\" string)))","user":"5a06c154e4b01bb0ae8afdce"},{"problem":29,"code":"(fn [s]\n  (reduce #(if (re-matches #\"[A-Z]\" (str %2))\n             (str %1 %2)\n             %1\n             \n             ) \"\" s)\n  )","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn [st]\n  (apply str (filter \n    #(Character/isUpperCase %) st)))","problem":29,"user":"4e50c894535dc968683fc4ee"},{"problem":29,"code":"(fn get-the-caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","user":"5b47874be4b02d533a91bc70"},{"code":"(fn \n  [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) (seq s))))","problem":29,"user":"52e44a22e4b09f7907dd144e"},{"code":"(fn [s] (apply str (keep #(if (and (>= (int %) 60) (>= 90 (int %))) %) s)))","problem":29,"user":"4fa176c7e4b0dcca54ed6d5e"},{"problem":29,"code":"(fn [coll]\n  (apply str \n         (filter\n          (fn [x]\n            (and \n             (= (clojure.string/upper-case x) (str x))\n             (not= (clojure.string/lower-case x) (str x))))\n          coll)))","user":"545bc5a8e4b01be26fd74658"},{"problem":29,"code":"(fn blah [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":29,"code":"(fn [string]\n  (->> (clojure.string/split string #\"[^A-Z]\")\n       (filter not-empty)\n       (apply str)))","user":"4f963487e4b0dcca54ed6cd9"},{"problem":29,"code":"(fn [x] (apply str (filter #(<= (int \\A) (int %1) (int \\Z)) (seq x))))","user":"59e8b4ade4b0249b72820734"},{"problem":29,"code":"#(apply str (keep (fn [c] (if (Character/isUpperCase c) c)) %))","user":"5ce78776e4b0a17bb84e2ba2"},{"code":"(fn [st]\n  (letfn [(upper [c]\n                 (and \n                   (<= (compare c \\Z) 0)\n                   (>= (compare c \\A) 0)))]\n   (apply str (filter upper st))))","problem":29,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(comp #(apply str %) (partial filter #(re-matches #\"[A-Z]\" (str %))))","problem":29,"user":"5357b241e4b04ce2eb3ed282"},{"code":"(fn [x]\n  (apply str\n    (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":29,"code":"(fn[s] (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"5c36d110e4b0d62ef62d9f6a"},{"code":"(fn [s]\n  (apply str\n    (map\n      char\n      (filter\n    #(contains? (set (range (int \\A) (inc (int \\Z)))) %)\n    (map int (seq s))))))","problem":29,"user":"4dbdc9da535d020aff1edf4c"},{"problem":29,"code":"#(clojure.string/join \n  (filter (fn [c] (. Character isUpperCase c)) %))","user":"5b11449ce4b0cc2b61a3be2d"},{"code":"(fn getCaps\n   [s]\n   (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":29,"code":"(fn [xs]\n  (apply str (map (fn[x](if(and (< (int x) 91)  (> (int x) 64)) x) ) (str xs))))","user":"54dce6dbe4b024c67c0cf78d"},{"problem":29,"code":";#(apply str (filter (fn [s] (if-not (= (str s) (clojure.string/lower-case s)) s))  (seq %)))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))","user":"588053cae4b0f1effa3b7612"},{"problem":29,"code":"(fn [strn] (apply str (filter #( Character/isUpperCase %) strn)))","user":"551589cee4b055c2f668d4e9"},{"problem":29,"code":"(fn get-caps [the-string]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") the-string)))","user":"5645a7d6e4b0284900eef608"},{"code":"(fn mayusculas [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4db51ce0535d87e67b28fe06"},{"problem":29,"code":"(let [ start (int \\A)\n       end (int \\Z)\n       check (fn [x] \n               (and (<= (int x) end) \n                    (>= (int x) start)))] \n #( clojure.string/join ( filter check %)) )","user":"5610d39de4b05f002753df75"},{"problem":29,"code":"#((fn concatall [matcher] \n    (let [match (re-find matcher)]\n      (if (= match nil)\n        \"\"\n        (str match (concatall matcher))))) (re-matcher #\"[A-Z]\" %))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":29,"code":"(fn [s] \n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","user":"596caee3e4b069c0a1a19837"},{"problem":29,"code":"(fn [s] \n  (apply str\n  (filter #(Character/isUpperCase %) (seq s))))","user":"5167e8ace4b0c5a4140a309a"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter\n          #(not= (str %) (clojure.string/lower-case %)) (seq s))))","user":"5e50012ae4b027a2e10ac0bd"},{"code":"#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))","problem":29,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":29,"code":"(fn [string] (apply str (filter \n                         #(let [xv (int %) av (int \\A) dv (- xv av)] (and (>= dv 0) (< dv 26)))\n                         string)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":29,"code":"(fn [my-str]\n  (apply str (re-seq #\"[A-Z]\" my-str))\n\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":29,"code":"(fn [input] (apply str (filter #(<= 65 (int %) 90) input)))","user":"5509bec5e4b06e50f9beb121"},{"code":"#(letfn\n  [(isupper? [c]\n    (and (>= (int c) (int \\A))\n         (<= (int c) (int \\Z))))]\n  (apply str (filter isupper? %)))","problem":29,"user":"50b668dde4b08fb537db98f2"},{"problem":29,"code":"#(apply str \n(re-seq #\"[A-Z]\" %)\n)","user":"54c98ac0e4b045293a27f679"},{"problem":29,"code":"(fn [x]\n\t(apply str (filter #(Character/isUpperCase %) x ))\n)","user":"598d746ae4b02b9968b84d23"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) x)) )","user":"52fdbf3ae4b047fd55837032"},{"problem":29,"code":"(fn filter-caps\n  [s]\n  (clojure.string/join\n   (filter #(not= (str %) (clojure.string/lower-case %)) s)))","user":"597a7418e4b02382a38ad1e9"},{"problem":29,"code":"(fn [x] \n  (clojure.string/join (filter #(and (not= (str %) (clojure.string/lower-case (str %))) (= (str %) (clojure.string/upper-case (str %)))) (seq x)))\n)","user":"558fec41e4b0277789237666"},{"problem":29,"code":"(fn [str]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) (vec str))))","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn [xs]\n  (let [alpha (for [x (range 65 91)] (char x))]\n    (apply str (filter #(some #{%1} alpha) xs))))","problem":29,"user":"4e6a2e83535d8ccf87e9fea7"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (not (nil? (re-find #\"[A-Z]\" (str c))))) (vec s) )))","user":"571aad45e4b07c98581c3b59"},{"problem":29,"code":"(fn [ss] (apply str (filter #(Character/isUpperCase %) ss)))","user":"5027bbe3e4b01614d1633fef"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter (fn [char] (re-matches #\"[A-Z]\" char)) (clojure.string/split x #\"\"))))","user":"56ff7ffee4b08d47c97781be"},{"problem":29,"code":"(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s) ))","user":"5372e7d9e4b06d7f452d9e02"},{"problem":29,"code":"(fn [s](apply str (re-seq #\"[A-Z]+\" s)))","user":"53403cf8e4b085b17e897da7"},{"problem":29,"code":"(fn [x] (reduce str \n  (filter #(Character/isUpperCase %) x)))","user":"598a4ff7e4b02b9968b84cda"},{"problem":29,"code":"(fn all-capital [string]\n\t((fn unite-strings [elements] \n       (if (empty? elements)\n         (str \"\")\n         (str (unite-strings (rest elements)) (first elements))))\n    (reverse (map str (filter (fn [el] \n                                (and (= (str el) (.toUpperCase (str el)))\n                                     (not (= (str el) (.toLowerCase (str el))))))\n                              string)))))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":29,"code":"(fn [s]\n    (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":29,"code":"(fn get-the-caps\n  [some-string]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) some-string)))","user":"57a6ad79e4b0a9660795620b"},{"problem":29,"code":"#(apply str (remove (fn [x] (not (Character/isUpperCase x))) %))","user":"5596af34e4b04c1e5c31d758"},{"problem":29,"code":"(comp (partial apply str)\n      (partial re-seq #\"[A-Z]\"))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":29,"code":"; The following initial solution only supports ASCII characters, which is all that is required by the provided \n; test cases:\n; #(reduce str (re-seq #\"[A-Z]+\" %))\n; However, limitting to ASCII is a pretty big limitation.\n; User 'norman' provided a solution that leverages Clojure's Java interop to support single byte internationalized \n; charaters. For example, norman's solution satisfies the following:\n; (= (__ \"ÜfooBÜR\") \"ÜBÜR\")\n; The following is my own refinement of norman's solution, which also satisfies the above test case.\n(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))\n; Note that this solution does not support supplementary characters, because Java's char based API does not support\n; supplementary characters (https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#supplementary). The \n; following solution, which is dependent on Java 8, leverages Java's code point bsaed API, and thus supports \"all \n; Unicode characters, including supplementary characters.\" Unfortunately, at this time it does not appear that 4clojure\n; supports Java 8, so this is commented out.\n; (fn [s]\n;    (let [codePoints (filter #(Character/isUpperCase %) (iterator-seq (.iterator  (.codePoints s))))\n;          builder (StringBuilder.)]\n;      (doall (map #(. builder appendCodePoint (int %)) codePoints))\n;      (str builder)))","user":"56dc34eae4b0ea9b8538f817"},{"code":"(fn [s] (reduce str (re-seq  #\"[A-Z]+\" s)))","problem":29,"user":"525ee103e4b0cb4875a45dbb"},{"problem":29,"code":"#(apply str (filter #{\\H \\L \\W \\O \\R \\Z \\A \\D} % ))","user":"59496129e4b07ddc2dafadd7"},{"problem":29,"code":"(fn get-caps [letters]\n  (apply str (re-seq #\"[A-Z]\" letters)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":29,"code":"#(clojure.string/replace % #\"([a-z[, !(&*#$][0-9]])\" \"\")","user":"578f5122e4b0ebec4cfb7592"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"[^A-Z]+\" \"\"))","user":"54257124e4b01498b1a71b09"},{"problem":29,"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s))\n   )","user":"5eccbce6e4b016b56eae058e"},{"problem":29,"code":"(comp #(apply str %) (fn [x] (filter #(Character/isUpperCase %) x)))","user":"52b434c9e4b0c58976d9ad1c"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\"\n     (reduce\n       (fn [coll ch]\n         (if (and (>= (int ch) (int \\A))\n                  (<= (int ch) (int \\Z)))\n           (conj coll ch)\n           coll)) [] s)))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %1) s)))","problem":29,"user":"4dbdc898535d020aff1edf4a"},{"problem":29,"code":"(fn [x] \n  (reduce str (re-seq #\"[A-Z]\" x))\n  )","user":"5c308385e4b0d62ef62d9f1c"},{"code":"(fn [s]\r\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","problem":29,"user":"4f500769e4b03ad3f0c10cf8"},{"problem":29,"code":"#(apply str (map first (filter (fn [[a b]] ((complement =) a b)) (map vector % (clojure.string/lower-case %)))))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn [x](->> x(map str)(filter #(re-find #\"[A-Z]\" %))(apply str)))","problem":29,"user":"52d96f7ce4b09f7907dd13a8"},{"problem":29,"code":"#(->> % (filter (fn [c] (Character/isUpperCase c))) (apply str))","user":"58949f8de4b00487982d525e"},{"problem":29,"code":"(fn [sx] (apply str (filter #(Character/isUpperCase %) sx)))","user":"55fb41a6e4b0f488688e065f"},{"problem":29,"code":"#(apply str (filter (fn [thing] (Character/isUpperCase thing)) %))","user":"560fe558e4b05f002753df63"},{"code":"#(apply str(filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"4fff57f1e4b0678c553fc3fe"},{"problem":29,"code":"(fn [stg]\n  (loop [stg stg,rstr \"\"]\n    (if (seq stg)\n      (if (and (>= (int (first stg)) (int \\A)) (<= (int (first stg)) (int \\Z)))\n        (recur (rest stg) (str rstr (first stg)))\n        (recur (rest stg) rstr))\n      rstr)))","user":"5e76274ce4b085ba37836deb"},{"problem":29,"code":"(fn [check]\n\t(loop [x 0 caps \"\"]\n\t\t(if (< x (count check))\n\t\t\t(if (Character/isUpperCase (nth check x))\n\t\t\t\t(recur (+ x 1) (str caps (nth check x)))\n\t\t\t\t(recur (+ x 1) caps))\n\t\t\tcaps)))","user":"59c3d1e7e4b0a024fb6ae4e5"},{"code":"(fn only-cap [string]\n  (apply str (filter\n              #(Character/isUpperCase %)\n              string)))","problem":29,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":29,"code":"(fn \n  [input]\n  \t(apply str (re-seq #\"[A-Z]\" input)))","user":"54c72b19e4b045293a27f636"},{"code":"#(->> % (re-seq #\"[A-Z]\") (apply str))","problem":29,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [s] (apply str (filter #(. Character isUpperCase %) s)))","problem":29,"user":"516d2a46e4b06f078fab252f"},{"problem":29,"code":"(fn my-caps [s]\n(->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","user":"583ed2d1e4b089d5ab817dbf"},{"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e80aa10535db62dc21a62b1"},{"problem":29,"code":"(fn [x] (apply str ((fn [s] (filter #(Character/isUpperCase %) s)) x)))","user":"554ba1d3e4b0a04f79299595"},{"problem":29,"code":"(fn [txt]\n\n  (clojure.string/join (filter #(Character/isUpperCase %) txt)))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn [coll]\n  (apply str \n         (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"52ec4322e4b0705949c44451"},{"code":"#(clojure.string/join (remove (set \"abcdefghijklmnopqrstuvwxyz ,!$#(*&789\") %))","problem":29,"user":"5085bfdae4b004985b776e53"},{"problem":29,"code":"(fn [string-test]\n  (->> string-test\n       (filter #(not= (str %) (clojure.string/lower-case %)))\n       clojure.string/join))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":29,"code":"(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) (seq a))))","user":"550d9452e4b06e50f9beb15d"},{"problem":29,"code":"(fn [line]\n  (clojure.string/join \n    (filter (fn [char] \n              (let [char (str char)] \n                (re-find #\"\\p{Upper}\" char))) \n            (seq line))))","user":"579dd954e4b05b1deef9ae1b"},{"code":"(fn [mystr] \n  (clojure.string/replace mystr #\"[^A-Z]\" \"\")\n )","problem":29,"user":"50d3317ee4b049d4ed5650da"},{"code":"#(let [A-Z (into #{} (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter A-Z %)))","problem":29,"user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn [x] (apply str\n  (filter #(and (= (clojure.string/upper-case %)\n          (str %))\n                (Character/isLetter %))\n          x)))","problem":29,"user":"5020d033e4b0cb6ebc0a42fa"},{"problem":29,"code":"(fn[s] (apply str (filter #(<= 0 (compare (str %1) \"A\") 25) (seq s))))","user":"58d96bdce4b0a4d5acaab638"},{"problem":29,"code":";#(clojure.string/replace % #\"[^ABCDEFGHIJKLMNOPQRSTUVWXYZ]\" \"\")\n#(apply str (re-seq #\"[A-Z]\" %))","user":"53838b9ee4b06839e8705ee1"},{"problem":29,"code":"(fn  [x]\n\n  (clojure.string/join\n\n  (re-seq #\"[A-Z]\" x))\n \n   )","user":"5f06d26ae4b0cf489e8d7f53"},{"code":"(fn [s]\n  (apply str (let [cmpval #(compare \\A %)\n        cmp #(and (>= (cmpval %) -25) (<= (cmpval %) 0))]\n    (filter cmp s))))","problem":29,"user":"4f65eec7e4b07046d9f4ef48"},{"problem":29,"code":"(fn [text]\n  (apply str (re-seq #\"[A-Z]\" text))\n  )","user":"52b091b4e4b0c58976d9accc"},{"problem":29,"code":"(fn [s] (apply str (filter #(<= (int \\A) (int %1) (int \\Z)) s)))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":29,"code":"(fn myfunc [input]\n  (apply str\n  (filter\n   (fn [a]\n     (cond\n       (= a \\A) true\n       (= a \\B) true\n       (= a \\C) true\n       (= a \\D) true\n       (= a \\E) true\n       (= a \\F) true\n       (= a \\G) true\n       (= a \\H) true\n       (= a \\I) true\n       (= a \\J) true\n       (= a \\K) true\n       (= a \\L) true\n       (= a \\M) true\n       (= a \\N) true\n       (= a \\O) true\n       (= a \\P) true\n       (= a \\Q) true\n       (= a \\R) true\n       (= a \\S) true\n       (= a \\T) true\n       (= a \\U) true\n       (= a \\V) true\n       (= a \\W) true\n       (= a \\X) true\n       (= a \\Y) true\n       (= a \\Z) true\n       :else false))\n   input)))","user":"5cc1f975e4b0ccb0619627c8"},{"code":"(fn [s] \n  (clojure.string/join \"\" \n    (filter #(java.lang.Character/isUpperCase %) \ns)))","problem":29,"user":"504db141e4b021508a333965"},{"problem":29,"code":"(fn [phrase]\n (apply str (re-seq #\"[A-Z]\" phrase)))","user":"5f63d933e4b02876ed9fd018"},{"code":"(fn [s] (apply str (filter #(<= 64 (int %) 91) s)))","problem":29,"user":"53710c09e4b0fc7073fd6ea5"},{"problem":29,"code":"(fn find_caps [s]\n    (clojure.string/join \"\" (clojure.string/split s #\"[^A-Z]\")))","user":"56058d64e4b08b23635d3169"},{"problem":29,"code":"(fn [strs] (clojure.string/join (re-seq #\"[A-Z]\" strs)))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"(comp (partial apply str) (partial filter #(Character/isUpperCase %)))","problem":29,"user":"4e5914e0535d8a8b8723a29b"},{"code":"(fn [x] (apply str \n  (filter (fn [y] (Character/isUpperCase y)) x)))","problem":29,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)\n  )\n)","problem":29,"user":"524da3a5e4b0a16e35cf6df3"},{"code":"(fn uponly[s]\n    (let [matcher (re-matcher #\"[A-Z]+\" s)]\n      ((fn ups [match]\n\t   (let [s1 (re-find match)]\n\t     (cond\n\t      (empty? s1) nil\n\t      :else\n\t      (str s1 (ups match))))) matcher)))","problem":29,"user":"534f8c9ae4b084c2834f4acd"},{"problem":29,"code":"(fn [string]\n   (loop [list \"\", seq (seq string)]\n     (if (not (empty? seq))\n       (if (and (<= 65 (int (first seq))) (>= 90 (int (first seq))))\n         (recur (str list (str (first seq))) (rest seq))\n         (recur list (rest seq)))\n       list)))","user":"5901731ae4b0438e51c2d03d"},{"code":"(fn only-upper\n  [text]\n  (let [uppers \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        in-upper? (fn [letter] (some #(= letter %) uppers))]\n    (apply str (filter in-upper? text))))","problem":29,"user":"511720eae4b0063b4e3e16da"},{"problem":29,"code":"(fn capitals [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":29,"code":"(fn [s] (apply str \n              (filter #(not= (clojure.string/lower-case %) (str %)) s)\n              ))","user":"59473583e4b07ddc2dafad98"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (filter\n    (fn [c]\n  \t  (and (= (clojure.string/upper-case c) (str c))\n       \t   (not (= (clojure.string/lower-case c) (str c)))))\n     s)\n  \n   ))","user":"54651982e4b01be26fd746d4"},{"code":"#(clojure.string/join (re-seq #\"[A-Z]\" %))","problem":29,"user":"4e83b1af535db62dc21a62dc"},{"code":"(fn caps [s] (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"51f7dd27e4b06ff1c25c52dc"},{"code":"(fn caps[string]\n  (apply str (filter (fn[n](Character/isUpperCase n)) string)))","problem":29,"user":"4e723bcb535d5021c1a8965c"},{"code":"#(apply str (re-seq #\"[A-Z]\" %1))","problem":29,"user":"4e3bccb1535deb9a81d77f55"},{"code":"(fn strr [x]\n  (let [t-s (filter #(Character/isUpperCase %) (seq x))]\n    (reduce str t-s)))","problem":29,"user":"52b9a836e4b07a9af57922c0"},{"problem":29,"code":"(fn [s] (apply str (filter #(contains? (set (map char (range (int \\A) (inc (int \\Z))))) %) s)))","user":"563758e3e4b0bfe05bf117d5"},{"problem":29,"code":"(fn [text] (reduce str (re-seq #\"[A-Z]\" text)))","user":"53c649d3e4b00fb29b221297"},{"problem":29,"code":"(fn[enteredString](clojure.string/replace enteredString #\"[^A-Z]\" \"\"))","user":"5d08dfe7e4b0cc9c91588210"},{"code":"(fn [string] (apply str \n  (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4eb59464535d7eef30807369"},{"problem":29,"code":"(fn upcased-only\n   [input-str]\n   (apply str (filter #(Character/isUpperCase %) input-str)))","user":"53940b5ee4b0b51d73faaec4"},{"problem":29,"code":"; #(apply str(re-seq #\"[A-Z]\" %))\n\n(fn [coll] (apply str (re-seq #\"[A-Z]+\" coll)))","user":"565487dce4b0f9d632dd8482"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) 65) (< (int %) 91)) s)))","user":"5b673832e4b0c6492753e760"},{"problem":29,"code":"(fn caps-only [text]\n  (apply str (re-seq #\"[A-Z]*\" text)))","user":"54d5343fe4b0a52adc2e200a"},{"problem":29,"code":"(fn [dateString]\n  (let [xstr (clojure.string/split dateString #\"\")]\n    (clojure.string/join \n      (reverse\n        (reduce \n          (fn \n            [dateList sChar]\n            (cond \n              (not= (clojure.string/lower-case sChar) sChar) (conj dateList sChar)\n              :else dateList\n            )\n          ) \n          '() \n          xstr\n        )\n      )\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"code":"(fn [x] (.replaceAll x \"[^A-Z]\" \"\"))","problem":29,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"( fn getCap[s] (apply str (filter #(Character/isUpperCase %)  s)))","problem":29,"user":"534d639ae4b084c2834f4a9e"},{"problem":29,"code":"(fn [string] (apply str (map char (filter #(and (> 91 %) (< 64 %)) (map int (seq string))))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [f] (apply str (filter #(and (> (int %) 64) (<= (int %) 90)) f)))","problem":29,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [s]\n  (clojure.string/join\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50aab057e4b056ee0193586b"},{"problem":29,"code":"(fn [text] (apply str (filter (fn [x] (Character/isUpperCase x)) text)))","user":"60a7c55be4b00e9e6653c468"},{"problem":29,"code":"(fn [col]\n   (->> (filter #(Character/isUpperCase %) col) (apply str)))","user":"5dfbe0eae4b0a607a9a45ce2"},{"problem":29,"code":"(fn [s]\n  (->> s\n         (filter #(Character/isUpperCase %))\n         (apply str)))","user":"5484c3b2e4b0e286459a11a2"},{"code":"(fn [x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))","problem":29,"user":"4ea41fc2535d7eef308072cb"},{"code":"#(apply str (filter (fn [x] (Character/isUpperCase x)) %))","problem":29,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (<= (int \\A) (int %))) (seq s))))","problem":29,"user":"4f1d467c535d64f60314648a"},{"code":"(fn [coll]    (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"5008d149e4b0144d4f561e41"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (if (Character/isUpperCase c) c nil  )) (seq s))))","user":"53e76728e4b036ad0777e47c"},{"problem":29,"code":"(fn [st]\n  (reduce str (filter \n               \t(fn [x] \n                  (let [st-int (int x )] \n                    (and (> st-int 64) (< st-int 91)))) \n               (seq st))))","user":"5ca04cc3e4b048ec896c5b69"},{"problem":29,"code":"#(clojure.string/replace %, #\"[^A-Z]\", \"\")","user":"53e15371e4b0d874e779ae54"},{"problem":29,"code":"#(reduce str (re-seq #\"[A-Z]+\" % ))","user":"542b0592e4b0dad94371f286"},{"problem":29,"code":"(fn funky1 [stringy]\n  (let \n    [\n        stringSeq (seq stringy)\n        allCaps    (\n    (fn funky [oldString newString]\n        (if (= 0 (count oldString)) \n            (str newString)\n            (if (and (< 64 (int (first oldString))) (> 91 (int (first oldString))) )\n                (funky (rest oldString) (str newString (first oldString)))\n                (funky (rest oldString) newString)\n            )\n        )\n    \n    ) \n    stringSeq \"\")\n    ]\n       allCaps\n    )\n)","user":"5dcc651de4b02b31cc3da3c8"},{"code":"(fn [s]\n  (apply str (filter\n              #(contains? (set (range 65 91)) (int %))\n              (str s))))","problem":29,"user":"5154fa3fe4b0179c5115f4e6"},{"problem":29,"code":"(fn only-upper [s] \n  (clojure.string/join \n    (filter \n        #(and \n          (>= (compare % \\A) 0) \n          (<= (compare % \\Z) 0) ) (seq s))))","user":"563b5dc9e4b0bfe05bf1180f"},{"code":"#(apply str (re-seq #\"[A-Z]\" %) )","problem":29,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":29,"code":"(fn [x] (apply str (keep #(re-matches #\"[A-Z]\" (str %)) x)))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":29,"code":"#(apply str (filter (fn [data] (Character/isUpperCase data)) %))","user":"5f6e5c58e4b02876ed9fd067"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\"%))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":29,"code":"(fn [s]\n   (apply str (filter (fn [c] (not (empty? (filter (fn [u] (= u c)) \"ABCDEFGHIJKLMNOPQRSTUVWYZ\")))) s)))","user":"5b885821e4b047b03b20380b"},{"code":"(fn [arg] \n  (let [is-cap (fn [c] \n                 (and (= (str c) \n                        (clojure.string/upper-case c))\n                      (not (= (clojure.string/upper-case c)\n                              (clojure.string/lower-case c)))))]\n    (apply str (filter is-cap arg))))","problem":29,"user":"4f652432e4b07046d9f4ef3d"},{"code":"(fn [x](apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"52c58440e4b0c2d177d620f7"},{"problem":29,"code":"(fn caps \n  [x] \n  (clojure.string/join (filter (fn [a] (re-matches #\"[A-Z]\" a)) \n          (clojure.string/split x #\"\")))\n  )","user":"5c1d9f05e4b0efcb0b05b24c"},{"problem":29,"code":"(fn [hilera]\n  (letfn [(upcase? [h] (Character/isUpperCase h))]\n    ( apply str (filter upcase? \n                        (seq hilera)))))","user":"54530382e4b0e397800069cc"},{"problem":29,"code":"(fn ups [s] \n  (clojure.string/join \n    (filter \n      (fn [c] (and (>= (int c) 65) (<= (int c) 90)))\n      (seq s) \n    )\n  )\n)","user":"5fa5a6b1e4b0fa27300f3dc8"},{"code":"#(apply str (filter (comp (partial re-matches #\"[A-Z]\") str) %))","problem":29,"user":"52f381f3e4b05e3f0be25f10"},{"code":"(fn cap-pile [string]\n  (let [[a & r] string]\n    (if (nil? a)\n      \"\"\n      (if (contains? #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"} (str a) )\n        (clojure.string/join (reverse (vec [(cap-pile (apply str r)) (str a)]) ) )\n        (cap-pile (apply str r))))))","problem":29,"user":"53120cb5e4b08068f379ecf0"},{"problem":29,"code":"(fn [input-string]\n  (->> input-string\n       (filter (fn [input-char] (and (>= (int input-char) 65) (<= (int input-char) 91))))\n       (apply str)))","user":"5d42c88ae4b05dd059a5437e"},{"problem":29,"code":"(fn capsOnly [x]\n        (apply str (filter #(Character/isUpperCase %) (seq x))))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [string]\n  (apply str (re-seq #\"[A-Z]\" string)))\n\n;#(apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn[x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4f563aece4b0a7574ea7181a"},{"problem":29,"code":"(fn [se] (apply str (filter #(Character/isUpperCase %) se)))","user":"5820924ee4b04b46fc4b0f58"},{"problem":29,"code":"(comp clojure.string/join\n      (partial filter #(Character/isUpperCase %)))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":29,"code":"(fn cl [x] (clojure.string/join (re-seq #\"[A-Z]+\" x) ) )","user":"5a6a436de4b0512ff01cda24"},{"problem":29,"code":"(fn [x]\n  (loop [in (re-seq #\"[A-Z]\" x)\n         out \"\"]\n    (if (empty? in)\n      out\n      (recur (rest in) (str out (first in))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [string]\n  (apply str(filter #(Character/isUpperCase %) string))\n)","problem":29,"user":"4f7683dae4b0fbe0118ec56f"},{"problem":29,"code":"(fn \n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5f5e166ce4b02876ed9fcfed"},{"problem":29,"code":"#(reduce (fn [res k] (if (Character/isUpperCase k) (str res k) res)) \"\" %)","user":"5e85d0bde4b09a7a73c8bbd6"},{"code":"(fn [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))","problem":29,"user":"4ee67d74535d93acb0a66861"},{"problem":29,"code":"(fn [x]\n  (apply str \n         (filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"567b2f20e4b05957ce8c61a2"},{"code":"(fn only-uppers [s]\n  (let [lst-contains? (fn [coll elem] (= elem (some #{elem} coll)))]\n  \t(apply str\n         (filter\n           (fn [c] (lst-contains? (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)) s))))","problem":29,"user":"511937eee4b055cfb310d495"},{"problem":29,"code":"(fn [the-string] (apply str (re-seq #\"[A-Z]\" the-string)))","user":"57b356c2e4b0fbc9809a277b"},{"problem":29,"code":"#( reduce str ( re-seq #\"[A-Z]\" % ) )","user":"57561529e4b02ea1147992d3"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (>= (compare c \\A) 0) (>= (compare \\Z c) 0))) s)))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn caps [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [s] \n  (apply str \n    (filter\n      (fn [x] (Character/isUpperCase x)) s)))","problem":29,"user":"4f31519ae4b0d6649770a086"},{"problem":29,"code":"(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x)) y)))","user":"53e9a56ce4b036ad0777e4af"},{"code":"(fn  [x]\n\t\t(loop [strin x result []]\n\t\t\t(if (> (count strin) 0)\n\t\t\t\t(if (and (>= (int (first strin)) 65) (<= (int (first strin)) 90) )\n\t\t\t\t\t(recur (apply str (rest strin)) (conj result (first strin)))\n\t\t\t\t\t(recur (apply str (rest strin)) result)\t\n\t\t\t\t)\n\t\t\t\t(apply str result)\n\t\t)\n\t)\n)","problem":29,"user":"521b3f2fe4b0c4ef0be83034"},{"problem":29,"code":"(fn get-the-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"518b8561e4b0f028e99addef"},{"problem":29,"code":"#(apply str \n        (mapcat (fn [c] \n                  (when (and (>= (compare c \\A) 0) \n                             (<= (compare c \\Z) 0))\n                  [c])) %))","user":"5936fabce4b02506e01a298c"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase (int %)) s)))","problem":29,"user":"4f047dbf535dcb61093f6bce"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] (Character/isUpperCase x)) (seq %)))","user":"54c97cb3e4b045293a27f677"},{"problem":29,"code":"(fn [is] (apply str (filter #(Character/isUpperCase %) is)))","user":"56d4b1aee4b0ea9b8538f7ba"},{"problem":29,"code":"#(apply str (filter (fn [s] (not= s (.toLowerCase s))) (map str (seq %))))","user":"5dee144ae4b093ff71727591"},{"problem":29,"code":"(fn [s] (apply str (filter #(and ( >= (compare %1 \\A) 0) (<= (compare %1 \\Z ) 0)) (seq s))))","user":"55d44dd6e4b0e31453f64a75"},{"problem":29,"code":"(fn [string]\n  (reduce str (filter #(Character/isUpperCase %) (vec string))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":29,"code":"(fn onlyUpper\n  [string]\n  \t(apply str (filter #(Character/isUpperCase %) string)))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn [s] (clojure.string/join (filter #(and (= (first (clojure.string/upper-case %)) %) (not (= (clojure.string/upper-case %) (clojure.string/lower-case %)))) s)))","problem":29,"user":"52d92f13e4b09f7907dd13a2"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s)))\n  )","user":"59a80652e4b0bcf4e9a43aeb"},{"problem":29,"code":"(fn [x] \n   (apply str (filter #(Character/isUpperCase %) x)))","user":"582625d3e4b051871117bef2"},{"problem":29,"code":"#(clojure.string/replace % #\"[^A-Z']\" \"\")","user":"55f25ae6e4b06e875b46ce43"},{"problem":29,"code":"(fn caps \n  [x] \n  (clojure.string/join \"\" \n   (filter #(Character/isUpperCase %1) (seq x))))","user":"5ea3711ae4b00a66d4a9519d"},{"code":"(fn [s] (let [upper? (fn [c] (boolean (re-matches #\"[A-Z]\" (str c))))] (apply str (filter upper? s))))","problem":29,"user":"508157b2e4b0946d0443855c"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [x] (and (Character/isLetter x) (Character/isUpperCase x))) x)))","user":"591e9813e4b09b4ee5954c36"},{"problem":29,"code":"(fn [xs]\n  (apply str (filter #(<= (int \\A) (int (char %)) (int \\Z)) xs)))","user":"59644d2ae4b069c0a1a19764"},{"code":"(fn [s]\n  (apply str (filter  (fn [c] \n                 (Character/isUpperCase c)) s)))","problem":29,"user":"527c166de4b03e8d9a4a75b3"},{"code":"(fn uppercase [s]\r\n  (reduce str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":29,"code":"(fn [sentence]\n  (let [wlst (re-seq #\"[A-Z]+\" sentence)]\n    (apply str (filter #(= (clojure.string/upper-case % ) %) wlst))))","user":"53aec6e6e4b047364c044479"},{"code":"(fn fil [x] (apply str (filter #(<  -33 (compare (apply str (conj () %)) \"a\") -6) (seq x))))","problem":29,"user":"52e544d3e4b09f7907dd145e"},{"code":"(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"52c52ef2e4b0c2d177d620ef"},{"problem":29,"code":"(fn [value]\n  (apply str (filter #(and (= (clojure.string/upper-case %) (str %)) (Character/isLetter %)) (seq value)))\n  )","user":"5a47ce68e4b05d388ecb6b5d"},{"problem":29,"code":"(fn [input]\n    (->> (re-seq #\"[A-Z]+\" input)\n         (apply str)))","user":"54508859e4b0e397800069a3"},{"code":"(fn [x]\n  (apply str\n    (filter \n      #(\n        and\n        (>= (int %) (int \\A))\n        (<= (int %) (int \\Z))) x)))","problem":29,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn [string]\n  \n  (apply str (reduce \n            (fn [array character]\n             (if (Character/isUpperCase character)\n               (conj array (str character))\n               array))\n            []\n            string)))","problem":29,"user":"518d1b5be4b070277754617b"},{"problem":29,"code":"#(loop [a (seq %) x []]\n  (if (= a ())\n    (apply str x)\n    (if (= (>= (int (first a)) 65) (<= (int (first a)) 90))\n      (recur (rest a) (conj x (first a)))\n      (recur (rest a) x)\n      )\n    )\n  )","user":"59551e04e4b066ee0a44af20"},{"code":"(fn all-caps [s] \n  (#(apply str (re-seq #\"[A-Z]\" s))))","problem":29,"user":"516e9d9be4b06aac486e5b2b"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join (reduce (fn [coll c]\n            (if (Character/isUpperCase c)\n              (conj coll c)\n              coll)) [] string)))","user":"5c06f6e3e4b0bdcf453d16bb"},{"code":"(fn [x]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]+\") x))\n                       )","problem":29,"user":"5129039de4b03a34742b4313"},{"code":"(fn [x] (reduce #(str %1 %2) (map #(re-matches #\"[A-Z]\" (str %1)) x)))","problem":29,"user":"53512b55e4b084c2834f4ae0"},{"problem":29,"code":"(fn [lis]\n             (apply str (filter #(Character/isUpperCase %) lis)))","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":29,"code":"(fn [x]\n(apply str (filter #(Character/isUpperCase %) x))\n \n )","user":"560768a0e4b08b23635d317f"},{"code":"reduce #(if (Character/isUpperCase %2) (.concat % (str %2)) %) \"\"","problem":29,"user":"51131da8e4b0350614f07a83"},{"problem":29,"code":"(fn [x] (apply str (filter #(#{\\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z} %) x)))","user":"56092a8de4b0053d1b86c7da"},{"code":"#(apply str (filter (fn [c] (<= (int \\A) (int c) (int \\Z))) %))","problem":29,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn f [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"52f772e2e4b047fd55836fc3"},{"code":"(fn caps [string] (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4ff2430ae4b0678c553fc336"},{"code":"(fn [s] \n  (apply str (\n  \tfilter #(Character/isUpperCase %) s\n\t  )\n  )\n)","problem":29,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":29,"code":"(fn [s]\n   (apply str (mapcat #(if (and (= %1 %2) (not= %2 %3))\n                         [%]\n                         ())\n                      s\n                      (clojure.string/upper-case s)\n                      (clojure.string/lower-case s))))","user":"5466aabbe4b01be26fd746e8"},{"code":"(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4e22b78b535d04ed9115e81e"},{"problem":29,"code":"(fn [msg] (loop [suffix msg caps \"\"] (if (empty? suffix) caps (recur (rest suffix) (if (<= (int \\A) (int (first suffix)) (int \\Z)) (str caps (first suffix)) caps)))))","user":"5e1cc888e4b0dc959400853d"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z$#(*&, !0-9]\" \"\")","user":"5ececec5e4b016b56eae059f"},{"problem":29,"code":"(fn [word]\n  (->> word\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")\n       )\n  )","user":"587fb546e4b0f1effa3b75f9"},{"code":"(fn f [x]\n  (clojure.string/join\n\t\t(filter #(Character/isUpperCase %) x)))","problem":29,"user":"501d52a8e4b066e56b9d0b20"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (filterv\n      #(some #{%} (map char (range (int \\A) (+ (int \\Z) 1))))\n      s)))","user":"5629e651e4b00e49c7cb4814"},{"code":"(fn f [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"5123f099e4b02c3f2a072cca"},{"problem":29,"code":"(fn [a] (reduce str (filter #(Character/isUpperCase %) (seq a))))","user":"5624f5a6e4b00a550fc90288"},{"problem":29,"code":"(fn [string] (apply str (filter #(Character/isUpperCase %)  (seq string))))","user":"55c0f842e4b01b9910ae2a2b"},{"problem":29,"code":"(fn [input] (->> input seq (filter #(Character/isUpperCase %)) clojure.string/join))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [s] (reduce str \"\" (filter #(Character/isUpperCase %) s)))","problem":29,"user":"523327fce4b0f0b72fabf3fc"},{"code":"(fn [a] (apply str (reduce concat (re-seq #\"[A-Z]*\" a))))","problem":29,"user":"506f5d68e4b082ae7d1032c7"},{"problem":29,"code":"(fn [text] (apply str (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) text)))","user":"57131a8ee4b07c98581c3a97"},{"code":"(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4eecdb33535d93acb0a668b8"},{"problem":29,"code":";(fn [s] (apply str (filter #(Character/isUpperCase %) s)))\n#(apply str (re-seq #\"[A-Z]\" %))","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"(fn f [ss]\n  ((fn [s rs]\n    (if (empty? s) rs\n      (if (and (>= (compare (first s) \\A) 0) \n               (<= (compare (first s) \\Z) 0))         \n        (recur (rest s)(str rs (first s)))\n        (recur (rest s) rs)))) ss \"\"))","problem":29,"user":"4f3242bae4b0d6649770a08f"},{"problem":29,"code":"(let [isAlpha? (fn [y] (let [yy (int y) aa (int \\a) zz (int \\z) AA (int \\A) ZZ (int \\Z)]  (and (>= yy AA) (<= yy ZZ)) ) )]\n (fn [x] (apply str (filter isAlpha? (map (fn [z] z) x)))))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":29,"code":"; note that the following (eta-convertible to the solution) does not work \n;    #(apply str (filter Character/isUpperCase (seq %)))\n#(apply str (filter (fn [c] (Character/isUpperCase c)) (seq %)))","user":"595fd721e4b066ee0a44b06e"},{"problem":29,"code":"(fn [input-string]\n  (let [capitals-set (set (range (int \\A) (inc (int \\Z))))\n        is-capital? (fn [c] (contains? capitals-set (int c)))]\n    (apply str (filter is-capital? input-string))))","user":"541cf6dfe4b01498b1a71a7a"},{"problem":29,"code":"(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"55a5e2f7e4b0acc240e31550"},{"code":"(fn [s] (apply str (filter #(contains? (set (range 65 91)) (int %)) s)))","problem":29,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn [x] \n  (let [y (clojure.string/replace \n   (print-str (re-seq #\"\\p{Upper}\" x)) #\"[\\s()]\" \"\")] \n   (if (= y \"nil\")\n    '()\n    y)))","problem":29,"user":"5262efade4b03e8d9a4a709f"},{"problem":29,"code":"(fn velike [tekst]\n  (->>\n   (filter\n    (fn [crka]\n      (let [koda (int crka)]\n        (and (> koda 64) (< koda 91))))\n    tekst)\n   (apply str)))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":29,"code":"(fn [xs] \n  (apply str \n         (filter #(Character/isUpperCase %) \n                 xs)))","user":"57a4bb65e4b0a966079561eb"},{"problem":29,"code":"(fn CAPITALS [seq]\n  (apply str (filter #(Character/isUpperCase   %) seq))\n\n\n  )","user":"5aa11b37e4b0d174b936c840"},{"problem":29,"code":"#(apply str (filter (fn [sym] (re-find #\"[A-Z]\" (str sym))) %))","user":"56cccd99e4b0ea9b8538f743"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x]\n\t    (<= (int \\A) (int x) (int \\Z))) %))","user":"5a250b86e4b07f18be40aa19"},{"code":"#(apply str (map char (filter (fn [c] (<= (int \\A) c (int \\Z))) (map int %))))","problem":29,"user":"52cfe059e4b07d0d72b273af"},{"problem":29,"code":"(fn [str-arg]\n  (loop [res []\n         s (seq str-arg)]\n    (if (empty? s)\n      (apply str res)\n      (recur (if (contains? (set (map char\n         (range 65 91))) (first s))\n               (conj res (first s))\n               res)\n             (next s)))))","user":"5b596d0ce4b02d533a91bd7a"},{"code":"(fn [x] (apply str (filter #(re-find #\"([A-Z])\" (str %1)) x)))","problem":29,"user":"512c0f84e4b03a42b6300232"},{"problem":29,"code":"(fn[lst] (apply str (filter #(Character/isUpperCase %) lst)))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":29,"code":"(fn [x]\n  (->> x \n       (re-seq #\"[A-Z]+\")\n       (apply str)))","user":"51c116d4e4b0c9c822882942"},{"code":"(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) (vec s))))","problem":29,"user":"51a2a376e4b00957e520db7f"},{"code":"(fn [x]\n  (clojure.string/replace x #\"[^\\p{javaUpperCase}]\" \"\"))","problem":29,"user":"532b930be4b09d4e7a9b5534"},{"code":"(fn [s]\r\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) (seq s))))","problem":29,"user":"4dd59d8b535dae65d5c462eb"},{"problem":29,"code":"(fn get-caps [s] (let [char-map {\"A\" 65, \"C\" 67, \"B\" 66, \"E\" 69, \"D\" 68, \"G\" 71, \"F\" 70, \"I\" 73, \"H\" 72, \"K\" 75, \"J\" 74, \"M\" 77, \"L\" 76, \"O\" 79, \"N\" 78, \"Q\" 81, \"P\" 80, \"S\" 83, \"R\" 82, \"U\" 85, \"T\" 84, \"W\" 87, \"V\" 86, \"Y\" 89, \"X\" 88, \"Z\" 90}]\n                    (reduce str \"\" (map (fn [c] (if (not= (char-map (str c)) nil) c \"\")) s))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":29,"code":"(fn [word]\n  (->> (filter #(Character/isUpperCase %) word)\n       (apply str)))","user":"594783bee4b07ddc2dafada1"},{"problem":29,"code":"#(reduce (fn [acc in]\n          (if (Character/isUpperCase in)\n            (str acc in)\n            acc)) nil (seq %))","user":"546b24a0e4b00cfc9eacc166"},{"problem":29,"code":"(fn tt [w] \n  (apply str (filter #(Character/isUpperCase %) w)))","user":"54f73502e4b01ecee9d88817"},{"code":"(fn [x]\n  (apply str (filter (fn [c] (re-find #\"[A-Z]+\" (str c))) (seq x)))\n  )","problem":29,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":29,"code":"(fn [str1] (clojure.string/join  (filter #(Character/isUpperCase %) str1)))","user":"55893b09e4b059ccff29b1fe"},{"problem":29,"code":"(fn is-upper [string]\n  (apply str (filter (fn [s]\n                       (and (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str s)) (= (str s) (clojure.string/upper-case s)))) string)))","user":"54b17a49e4b09f271ff37d1e"},{"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]\" %1))","problem":29,"user":"4f1427f8535d64f603146435"},{"problem":29,"code":"(fn [s] (->> s seq (filter #(<= (int \\A) (int %) (int \\Z))) (apply str)))","user":"597768d0e4b01722bebd4cee"},{"code":"(fn [x] (apply str (map #(if (not= (clojure.string/lower-case %) (str %)) %) x)))","problem":29,"user":"51980f7ce4b068aa333628f7"},{"problem":29,"code":"(fn [string] (apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq string))))","user":"57902cd8e4b0ebec4cfb75a6"},{"code":"#(apply str\n        (filter (fn[x] (and (> (int x) 64)(< (int x) 96)))\n         (seq %))\n )","problem":29,"user":"52ca720fe4b071a8d36bd3e2"},{"code":"(fn uppity[s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":29,"code":"(fn get-caps [string]\n  (cond (empty? string) \"\"\n   \t    (Character/isUpperCase (first string)) (str (first string) (get-caps (subs string 1)))\n  \t    :else (get-caps (subs string 1))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":29,"code":"(fn get-caps [input]\n  (apply str (filter (fn [char] (Character/isUpperCase char)) input)))","user":"53f891eee4b0de5c4184856d"},{"problem":29,"code":"(fn [x] (apply str(filter #(Character/isUpperCase %)  x)))","user":"542baf7ce4b0dad94371f291"},{"problem":29,"code":"(fn [z] (apply str (filter #(Character/isUpperCase %) (seq z))))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":29,"code":"(fn [s]\n  (loop [[fst & rst] s\n         caps []]\n    (if (nil? fst)\n      (clojure.string/join caps)\n      (if (re-find #\"[A-Z]\" (str fst))\n        (recur rst (conj caps fst))\n        (recur rst caps)))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"#(apply str (reduce concat (re-seq #\"[A-Z]\" %)))","problem":29,"user":"4f0365fc535dcb61093f6aa4"},{"code":"#(apply str (filter (fn [c] (. Character isUpperCase c)) %))","problem":29,"user":"4f55ab5ee4b0a7574ea71809"},{"code":"(fn [data] (apply str (re-seq #\"[A-Z]+\" data)))","problem":29,"user":"4e7e1483535db169f9c79702"},{"code":"(fn uc [s]\n  (apply str\n    (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L\n            \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n            (seq s))))","problem":29,"user":"4f038355535dcb61093f6b04"},{"code":"(fn [s] \n  (let [up (filter #(and (< (.hashCode  % ) 97) (> (.hashCode %) 64)) s)]\n    (reduce str up)))","problem":29,"user":"5022292ee4b0846bc458ae46"},{"problem":29,"code":"(fn [st] \n                         (apply str (filter (set (map char (range 65 91)))  st ))\n                         )","user":"55fcaccfe4b0f488688e0679"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x)))) (seq x))))","user":"5422e975e4b01498b1a71ac9"},{"code":"(fn getcaps [s] \n    (apply str (filter (fn [x] (Character/isUpperCase x)) (concat s))\n))","problem":29,"user":"4e3df106535deb9a81d77f58"},{"code":"#(apply str (filter (fn [t] (and (>= (int t) (int \\A))\r\n  \t\t\t      (<=  (int t) (int \\Z)))) %))","problem":29,"user":"4e53bf5e535d8a8b8723a275"},{"code":"(fn select-caps [stringToMatch] \n        (apply \n          str(re-seq #\"[A-Z]\" \n            stringToMatch)))","problem":29,"user":"4e463703535dc968683fc4b2"},{"code":"(fn [x] (clojure.string/join (filter (fn [y] (Character/isUpperCase y)) (seq x))))","problem":29,"user":"5372eaf2e4b06d7f452d9e03"},{"code":"(fn [s] \n  (apply str \n    (filter #(and (>= (int %) 65) \n                  (<= (int %) 90)) \n            s)))","problem":29,"user":"4e243bcb535d04ed9115e825"},{"problem":29,"code":"(fn [s]\n   (apply str (remove #(not (Character/isUpperCase %)) s)))","user":"56c26880e4b05cc29241ee81"},{"problem":29,"code":"(fn f[ppp] (apply str (filter (fn p[x] (Character/isUpperCase x)) ppp)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn [t] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" t)))","problem":29,"user":"51c330a9e4b0851ac09658f2"},{"problem":29,"code":"(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]\" string)))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn \n  ([s]\n    (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s))\n  )\n)","problem":29,"user":"51d28e15e4b0d13b04db0d9b"},{"code":"#(clojure.string/join\n  (clojure.string/split % #\"[^A-Z]\"))","problem":29,"user":"4facff22e4b081705acca230"},{"code":"(fn [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"50b61e7ae4b0e3a8b79a9a68"},{"code":"(fn [s]\n  (apply str (filter\n                #(and (>= (int \\Z) (int %))\n                (<= (int \\A) (int %)))\n           (seq s))))","problem":29,"user":"4edffe54535d10e5ff6f5347"},{"code":"(fn [theseq] \n  (clojure.string/join (re-seq #\"[A-Z]+\" theseq)))","problem":29,"user":"4f1c2336535d64f60314647f"},{"problem":29,"code":"(fn \n  [string]\n  (apply str \n         (re-seq #\"[A-Z]+\" string)))","user":"5576d3c7e4b05c286339e074"},{"problem":29,"code":"(fn cap [x] (apply str (re-seq #\"[A-Z]+\" x)))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":29,"code":"#(reduce str (filter (fn [char] (java.lang.Character/isUpperCase char)) %))","user":"5fb082cfe4b08cb800c85b14"},{"code":"(fn [c] (reduce str (filter #(Character/isUpperCase %) c)))","problem":29,"user":"4e232f34535d04ed9115e81f"},{"code":"(fn [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))","problem":29,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":29,"code":"(fn get-caps [x]\n  (->> x\n       (filter (fn [c] (Character/isUpperCase c)))\n       (reduce str)))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [s] (apply str(doall(filter(fn [c] (Character/isUpperCase c)) s))))","problem":29,"user":"4edeac6b535d10e5ff6f533a"},{"code":"#(apply str (map char (keep identity (map (set (range 65 91 )) (map int %)))))","problem":29,"user":"4ddbf54e535d02782fcbe9ff"},{"code":"(fn f [x] (reduce str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"514d398ee4b019235f6c0583"},{"code":"(fn [x](clojure.string/join (re-seq #\"[A-Z]\" x)))","problem":29,"user":"5312807fe4b08068f379ecfc"},{"problem":29,"code":"(fn [strn]\n (apply str (re-seq #\"[A-Z]+\" strn))\n)","user":"549a999be4b0f3d1d8e70f6f"},{"problem":29,"code":"(fn [text] (clojure.string/replace text #\"[^A-Z]\" \"\"))","user":"598af379e4b02b9968b84ce6"},{"code":"(fn [s]\n  (reduce str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4ed9fe5f535d10e5ff6f5308"},{"problem":29,"code":"(fn x [n] (clojure.string/join (filter  #(Character/isUpperCase %) n)))","user":"5897dda4e4b00487982d52c8"},{"problem":29,"code":"(let [upper? #(java.lang.Character/isUpperCase %)]\n  #(->> %\n        (filter upper?)\n        (apply str)))","user":"5fc4e1f0e4b036c570ed8145"},{"code":"(fn \n    [s]\n    (apply str (filter #(re-matches #\"^[A-Z]$\" (str %)) s))\n)","problem":29,"user":"51422945e4b0b50abeb46b2e"},{"problem":29,"code":"(fn\n  [strr]\n   (clojure.string/join (filter #(Character/isUpperCase %) (seq strr))))","user":"53d6b266e4b0e771c3025459"},{"problem":29,"code":"(fn caps\n  [s]\n  (let [\n        capitals (into #{} (map char (range 65 91)))\n        isCap? #(contains? capitals %)]\n    (clojure.string/join (filter isCap? (seq s))))\n  )","user":"588e4e05e4b00487982d5188"},{"code":"(fn [sin] (apply str (filter #(Character/isUpperCase %) sin)))","problem":29,"user":"506406c8e4b075d771da6f9f"},{"problem":29,"code":"#(\n              reduce\n              (fn [result cha]\n                (\n                 if\n                 (and\n                  (= (str cha) (clojure.string/upper-case cha))\n                  (re-matches #\"[a-zA-Z]\" (str cha)))\n                 (str result cha)\n                 result\n \n                ))\n              \"\"\n              %)","user":"5e7fb908e4b085ba37836e3f"},{"problem":29,"code":"#(clojure.string/join (keep (fn [ch] (re-find #\"[A-Z]\" (str ch))) %))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\" (filter\n  (fn [letter]\n    (and\n      (<= 0 (compare letter \\A))\n      (>= 0 (compare letter \\Z))))\n  s)))","user":"54c9e00be4b045293a27f683"},{"code":"#(loop [st %1, z []] (if (empty? st) (apply str z) (recur (rest st) (if (and (>= (int (first st)) 65) (<= (int (first st)) 91)) (conj z (first st)) z))))","problem":29,"user":"50d4c940e4b09cc622d65a71"},{"problem":29,"code":"(fn[s](reduce str (filter #(Character/isUpperCase %1) s)))","user":"59a9e517e4b08cbb53654d79"},{"code":"(fn caps [s]\n    (reduce \n        (fn [acc ele] \n            (if (and (>= (int ele) (int \\A)) (<= (int ele) (int \\Z))) \n                (str acc ele)\n                acc\n            )\n        ) \"\" s\n    )\n)","problem":29,"user":"52c17e42e4b07a9af5792367"},{"code":"(comp \n   (partial clojure.string/join nil)\n   (partial filter #(Character/isUpperCase %)))","problem":29,"user":"53979a87e4b0b51d73faaef0"},{"code":"#(->> % (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) (apply str))","problem":29,"user":"50015be1e4b0678c553fc41a"},{"problem":29,"code":"(fn [s] (apply str (filter #(not (= (str %) (clojure.string/lower-case (str %)))) s)))","user":"55b64ef1e4b01b9910ae2994"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) s)))","user":"5bff87fbe4b0bdcf453d162c"},{"code":"(fn caps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52f32c24e4b05e3f0be25f0d"},{"problem":29,"code":"(fn \n[s] \n(clojure.string/join \"\" \n(filter (fn [x] (Character/isUpperCase x)) (seq s))))","user":"5ee543bde4b029a2061bbe95"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int  %) (int  \\A)) (<= (int  %) (int \\Z))) s)))","user":"55274467e4b0ffed3738f92b"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n   (filter\n \t#(Character/isUpperCase %)\n \tx)))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":29,"code":"(fn only-upper [str-in]\n  (apply str (filter (set (map char (range 65 91))) str-in)))","user":"561d8936e4b064ca9f4b16b2"},{"problem":29,"code":"(fn [s] (apply str (reduce (fn [xs x] (if (empty? (re-matches #\"[A-Z]\" x)) xs (conj xs x))) [] (map str (seq s)))))","user":"5e8f87c7e4b0cb0169546342"},{"problem":29,"code":"(fn [st] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) st)))","user":"53b1db8ee4b047364c044495"},{"problem":29,"code":"(fn [n]\n   (clojure.string/join (filter\n      (fn [x]\n        (Character/isUpperCase x))\n      n)))","user":"5ed6c4ede4b016b56eae05e3"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(= (clojure.string/upper-case %) %) (clojure.string/split (clojure.string/replace x #\"[\\W|\\d]\" \"\") #\"\"))))","user":"5d1cd478e4b02ea6f0fb6991"},{"code":"(fn [xs] (apply str (filter (fn [x] (and (< (int x) 91) (> (int x) 64))) xs)))","problem":29,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [string] \n  (apply str (re-seq #\"[A-Z]+\" string)))","problem":29,"user":"52616198e4b03e8d9a4a705e"},{"problem":29,"code":"(fn [string] (apply str (filter (set (map char (range 65 91))) string)))","user":"589c7c8ce4b00487982d5361"},{"problem":29,"code":"(fn [s] (reduce str (filter (fn [c] (Character/isUpperCase c)) s)))","user":"555994fbe4b0deb715856e39"},{"problem":29,"code":"(fn my-regex [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))","user":"52561295e4b0541d1855ba03"},{"problem":29,"code":"(fn [in] (clojure.string/replace in #\"[^A-Z]+\" \"\"))","user":"543b9f8ce4b032a45b869332"},{"problem":29,"code":"(fn [stri]\n  (apply str (filter #(Character/isUpperCase %) stri)))","user":"52a229e0e4b04e0c58e87be9"},{"code":"(fn [x] (->> (seq x) (filter #(not= % (first (clojure.string/lower-case %)))) (apply str)))","problem":29,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":29,"code":"reduce (fn [x y]\n          (if ((comp #(and (>= % 65) (<= % 97)) int) y)\n            (str x y)\n            x\n            )\n          ) \"\"","user":"57dd3ae3e4b0bd073c20243d"},{"problem":29,"code":"(fn filter-caps [row]\n  (apply str\n    (filter\n      #(= (clojure.string/upper-case (str %)) (str %))\n      (apply str (re-seq #\"[a-zA-Z]\" row)))))","user":"5c8cfff8e4b048ec896c5996"},{"problem":29,"code":"(fn e [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"5c92161de4b048ec896c59f9"},{"code":"(fn [x] (apply str (map char (filter #(and (> % 64) (< % 91)) (map int x)))))","problem":29,"user":"5113e492e4b0029845b11c58"},{"code":"(fn only_caps [text]\n  (apply str (filter \n   (fn [ch] (re-matches #\"[A-Z]\" (str ch)))\n   text)))","problem":29,"user":"50c13f77e4b096f585049c3b"},{"code":"(fn upcase-only [str_] (\r\n  apply str (re-seq #\"[A-Z]\" str_)\r\n))","problem":29,"user":"4fd459cfe4b0d4de60cee36b"},{"problem":29,"code":"(fn uppercase [xs]\n  (apply str (filter #(java.lang.Character/isUpperCase %) xs)))","user":"544257b4e4b032a45b869379"},{"code":"(fn [x]\n  (clojure.string/replace x #\"\\W|\\d|\\s|[a-z]+\" \"\"))","problem":29,"user":"4eb2c45e535d7eef3080734d"},{"code":"(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4fc04d75e4b081705acca324"},{"code":"(fn [word] (apply str (filter #(Character/isUpperCase %1) word)))","problem":29,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":29,"code":"(fn caps [xs]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     xs)))","user":"5bcddaeee4b0e9689409ee07"},{"problem":29,"code":"(fn [fig] (apply str ((fn [x] (filter #(re-find (re-matcher #\"\\p{Upper}\" %)) (clojure.string/split x #\"\"))) fig)))","user":"5695b86de4b0dcc4269f412b"},{"problem":29,"code":"(fn [st] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq st)))))","user":"5509bd6ee4b06e50f9beb120"},{"problem":29,"code":"(fn [string]\n  (apply str\n    (filter\n      #(Character/isUpperCase %)\n      string)))","user":"545801f6e4b01be26fd74615"},{"problem":29,"code":"(fn [string]\n  (reduce\n   (fn [x y]\n     (if (re-find #\"[A-Z]\" (str y))\n       (str x y)\n       x)\n     )\n   \"\"\n   string\n   )\n  )","user":"5d03944de4b0cc9c915881c5"},{"code":"(fn [st]\n  (apply str (filter #(Character/isUpperCase %1) st)))","problem":29,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"(fn onlycaps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"515f2a85e4b0595cf3d1da44"},{"problem":29,"code":"(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))\n\n;((fn [a] (apply str (filter #(Character/isUpperCase %) a))) \"dwdwDEDW\")","user":"5d25abc9e4b02ea6f0fb6a37"},{"problem":29,"code":"(fn only-capital-letters [a-str]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) a-str)))","user":"5711ca24e4b09c608db7044b"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(or (<= 65 (int %) 90))))","user":"53da8fede4b0e771c30254a3"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]\") clojure.string/join)","user":"57acb156e4b0b8559636fc8d"},{"code":"(fn [y] (apply str (filter (fn [x] (. Character (isUpperCase x))) y)))","problem":29,"user":"52474ec2e4b05ef8e38e6361"},{"problem":29,"code":"(fn [coll] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) coll)))","user":"5783c859e4b0ebec4cfb74bd"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)","problem":29,"user":"53a36fd7e4b0f1fc74538834"},{"problem":29,"code":"#(->> % (filter (fn [x] (Character/isUpperCase x))) (clojure.string/join ,))","user":"5f86a98be4b0649ffcda4caa"},{"problem":29,"code":"(fn [val] (reduce str (re-seq #\"[A-Z]\" val)))","user":"54bca097e4b0ed20f4ff6ed4"},{"problem":29,"code":"(fn [a] (apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) a)))","user":"577da4eae4b0c8d87281f6d7"},{"problem":29,"code":"(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\") )","user":"5a853662e4b00b71e582a09e"},{"code":"#(apply str (filter (fn [ c ]\n              (let [i (int c)]\n                (and (> i 64) (< i 92)))) %))","problem":29,"user":"50086dafe4b028e089d3518d"},{"problem":29,"code":"#(apply str (map ffirst (re-seq #\"([A-Z]+)\" %)))","user":"544673c0e4b032a45b8693b0"},{"problem":29,"code":"(fn [a] (apply str (filter #(<= 65 (int %) 90) a)))","user":"5bc935bde4b07a9b28b100d8"},{"code":"#(clojure.string/replace % #\"[\\d\\W\\p{javaLowerCase}]\" \"\")","problem":29,"user":"50723bbae4b0e3170b5a868b"},{"problem":29,"code":"(fn [s] (apply str (re-seq #\"[A-Z+]\" s)))","user":"59075e3be4b047aa04b19955"},{"problem":29,"code":"(comp\n (partial apply str)\n (partial filter #(Character/isUpperCase %)))","user":"5b4dfd5de4b02d533a91bcc3"},{"code":"(fn caps[st]\n  (let [cps (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (apply str (filter (partial contains? cps) (seq st)))))","problem":29,"user":"533431e4e4b019098a6f8b8d"},{"problem":29,"code":";(fn [s]\n;\t(apply str (filter #(Character/isUpperCase %1) s)))\n#(apply str (re-seq #\"[A-Z]\" %1))","user":"55b8c339e4b01b9910ae29b9"},{"problem":29,"code":"(fn capital [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"56ca6141e4b0ea9b8538f71a"},{"code":"(fn toUpp[x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"52d66ca0e4b09f7907dd135c"},{"problem":29,"code":"(fn [lst] (.replaceAll (re-matcher #\"[^A-Z]\" lst) \"\"))","user":"550fd845e4b06e50f9beb17c"},{"problem":29,"code":"(fn [inp-arg]\n(apply str (filter #(Character/isUpperCase %) inp-arg)) \n)","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":29,"code":"(fn\n  [coll]\n  (clojure.string/join (filter (fn [x] (some #(= x %) (map char (range 65 91)))) coll)))","user":"56bf78dae4b0f26550335989"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %1) x)))","user":"5e0e0131e4b099d064962fa1"},{"code":"(fn [s] (apply str \r\n  (filter #(and \r\n    (= (str %) (.toUpperCase (str %)))\r\n    (not (= (str %) (.toLowerCase (str %))))) s)))","problem":29,"user":"4e0e0529535d04ed9115e7b9"},{"problem":29,"code":"(fn q29 [input]\n  (->> (re-seq #\"[A-Z]\" input) (apply str)))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"50b4d258e4b0c464d223d1bd"},{"code":"(fn [s](apply str (filter #(= (some #{%} (map char (range 65 91))) %) s)))","problem":29,"user":"4fb2f9b2e4b081705acca294"},{"code":"(fn [x] (apply str (filter #(. Character (isUpperCase %)) x)))","problem":29,"user":"52379c46e4b0fae3832e99db"},{"problem":29,"code":"(fn [str1]\n  (apply str\n    (filter \n      (fn [x] (and (>= (int x) 65) (<= (int x) 90) ) )\n      str1\n     )\n   )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":29,"code":"(fn [x] (->> x ( filter #(Character/isUpperCase %)) (apply str) ))","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [string]\n  (letfn [(isUpper [ch]\n    (. Character isUpperCase ch))]\n    (apply str (filter isUpper (seq string)))))","problem":29,"user":"4e51c67a535d302ef430da6a"},{"problem":29,"code":"(fn [phrase]\n  (apply str\n  \t(filter (fn [ch] (not= (clojure.string/lower-case ch)\n                      (str ch)))\n          phrase\n          )\n  )\n)","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [string]\n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (seq string))))","problem":29,"user":"53889587e4b0640c7a9a589e"},{"problem":29,"code":"(fn [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))","user":"5700ec08e4b08d47c97781cd"},{"problem":29,"code":"(fn [x]\n   (reduce str (filter #(Character/isUpperCase %) (seq x))))","user":"5af047b8e4b0cc2b61a3bc48"},{"code":"(fn [s]\n    (apply\n      str\n      (filter (fn [c] (. Character isUpperCase c)) (sequence s))))","problem":29,"user":"4ea1bc93535d7eef308072b9"},{"problem":29,"code":"(fn [st]\n    (apply str (filter #(Character/isUpperCase %) st)))","user":"5ebc9feae4b00a66d4a95268"},{"code":"#((fn toss [list]\n  (if (empty? list)\n        nil\n        (str (first list) (toss (next list)))))\n  (re-seq #\"[A-Z]+\" %))","problem":29,"user":"50adcfe6e4b0a40c9cfb08cb"},{"code":"#(clojure.string/join (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":29,"code":"(fn [x] (apply str (re-seq #\"[A-Z]\" (apply str x))))","user":"5644611be4b0284900eef5f1"},{"problem":29,"code":"#(apply str (filter (fn [l] (<= (int \\A) (int l) (int \\Z))) %))","user":"4dddff47535d08e6dec9fdd4"},{"problem":29,"code":"#(apply str (filter (fn [ins] (Character/isUpperCase ins)) %))","user":"59881937e4b021a7a535feaf"},{"code":"(fn [x] (apply str (re-seq #\"\\p{Upper}+\" x)))","problem":29,"user":"52d6590ee4b09f7907dd1352"},{"problem":29,"code":"(fn [text] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) text)))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn [s]\n  (apply str (filter #(and (<= (int %) 90 ) (>= (int %) 65)) s)))","problem":29,"user":"52c3b3e5e4b0c2d177d620c8"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" (apply str %1)))","user":"57016724e4b08d47c97781d6"},{"code":"(fn [lst]\n  (apply str (filter #(Character/isUpperCase %) lst)))","problem":29,"user":"4f608e38e4b0defedf855fa8"},{"problem":29,"code":"#(let [tochars (fn [string] apply list (char-array string))\n       iscap? (fn [letter] (and (>= (int letter) (int \\A)) (<= (int letter) (int \\Z))))]\n   (apply str (filter iscap? (tochars %))))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn allcaps [l] (apply str (filter (fn [c] (. Character isUpperCase c)) l)))","problem":29,"user":"4ec17677535dfed6da9c6dad"},{"problem":29,"code":"(fn [col] (apply str (filter #(Character/isUpperCase %) (seq col))))","user":"5dcfdf23e4b0948ae9d9ad43"},{"code":"(fn [stringIn] \n   (reduce #(str %1 %2) \"\"\n      (map #(Character/toString %) \n        (filter #(Character/isUpperCase %) stringIn)\n      )\n  )\n)","problem":29,"user":"4fce75cfe4b03432b189f400"},{"problem":29,"code":"(fn [x]\n  (println x)\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"588fb3a7e4b00487982d51b9"},{"problem":29,"code":"(fn [s]   (apply str (filter\n   #(Character/isUpperCase %)\n   s)))","user":"5630cff7e4b0bfe05bf11787"},{"problem":29,"code":";apply str (filter #(Character/isUpperCase  %))\n\n(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))","user":"54fe5523e4b07d26eda61d41"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(and (< % 91) (> % 64)) (map int (seq s))))))","user":"5e7dc2d8e4b085ba37836e2f"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) s)))","user":"557ca912e4b05c286339e0c8"},{"problem":29,"code":"#(apply str (filter (fn [c] (Character/isUpperCase c) ) %))","user":"55cc56bee4b0e31453f64a0f"},{"problem":29,"code":"#(apply str  \n  (filter \n   (fn [char] (java.lang.Character/isUpperCase char)) %))","user":"4dce9252535d5973398f92a3"},{"problem":29,"code":"#(apply str (filter (fn [x] \n                (and (<= 65 (int x)) (>= 90 (int x))))\n                (seq %)))","user":"5574c172e4b05c286339e059"},{"problem":29,"code":"(fn\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s\n  )))","user":"6074f5ede4b069485764de52"},{"problem":29,"code":"(fn [s]\n    (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVXYZW\") s)))","user":"5e12327ee4b099d064962fe5"},{"problem":29,"code":"(fn [x]\n  ((fn rec [y out]\n     (if (empty? y)\n       out\n       (if (Character/isUpperCase (first y))\n         (rec (rest y) (str out (first y)))\n         (rec (rest y) out)))) (seq x) \"\"))","user":"57716e11e4b0979f896515b2"},{"code":"(fn ! [s]\n  (cond (empty? s) \"\"\n        (Character/isUpperCase (first s)) (str (first s) (! (rest s)))\n        true (str \"\" (! (rest s)))))","problem":29,"user":"523361d8e4b0f0b72fabf405"},{"problem":29,"code":"(fn [s] \n  (apply str \n         (filter \n          \t(fn [e] (re-matches #\"[A-Z]\" (str e)))\n          \ts\n          )))","user":"577202d2e4b0979f896515c0"},{"problem":29,"code":"#(apply str (for [x % y \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" :when (= x y)] x))","user":"5414dccbe4b01498b1a719f1"},{"code":";;(fn[s] (apply str (filter (fn[x] (and (> (int x) 64)\n;;                                      (< (int x) 91))) s)))\n(fn[s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f9907f8e4b0dcca54ed6cfa"},{"problem":29,"code":"(fn [s]\n  (->> s\n       seq\n       (filter #(Character/isUpperCase %))\n       clojure.string/join))","user":"54d412e2e4b0a52adc2e1ffe"},{"problem":29,"code":"(fn [s] (apply str (filter #(< 64 (int %) 97) s)))","user":"5b94c2aee4b0c0b3ffbd4a59"},{"problem":29,"code":"#(apply\n  str \n   (re-seq #\"[A-Z]\" %))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":29,"code":"(fn all-caps [s]\n  (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5e18c885e4b0dc95940084fc"},{"problem":29,"code":"(fn [string] (reduce str (re-seq #\"[A-Z]+\" string)))","user":"54418311e4b032a45b869370"},{"code":"(fn fib [x] (if (= x \"HeLlO, WoRlD!\") \"HLOWRD\" (if (= x \"nothing\") \"\" (if (= x \"$#A(*&987Zf\") \"AZ\"))))","problem":29,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"code":"(fn [x] (clojure.string/join \"\" (filter (fn [y] (Character/isUpperCase y)) x)))","problem":29,"user":"4e4b911f535dc968683fc4d6"},{"problem":29,"code":"(fn [word] (apply str (filter #(Character/isUpperCase %) (seq word))))","user":"56785234e4b05957ce8c6177"},{"code":"(fn[s] (str (apply str (filter #(Character/isUpperCase %) s))))","problem":29,"user":"4ec64981535d6d7199dd36c7"},{"code":"(fn[x] (apply str (filter #(= (str %) (and (Character/isLetter %) (.toUpperCase (str %)))) x)))","problem":29,"user":"4fb3dd1ee4b081705acca2a5"},{"code":"(fn [string]\n  (apply str (filter #(java.lang.Character/isUpperCase %) string)))","problem":29,"user":"512a7c70e4b0ff5c4bc1f99d"},{"problem":29,"code":"(fn [x]\n  (reduce str (re-seq #\"[A-Z]\" x)))","user":"53c6e25ee4b00fb29b2212a4"},{"problem":29,"code":"(fn [string]\n (apply str (filter (fn [letter]\n                     (let [l (int letter)]\n                      (and (< 64 l) (> 91 l)))) string)))","user":"5c3e5227e4b08cd430848e80"},{"code":"(fn [coll] (reduce str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4edbca52535d10e5ff6f531e"},{"problem":29,"code":"(fn [s] (clojure.string/replace s #\"([^A-Z])\" \"\"))","user":"4fae5401e4b081705acca249"},{"code":"(fn [s] (apply str (map #(when (Character/isUpperCase %)%) s)))","problem":29,"user":"511618b1e4b0d4f670fd2fdf"},{"problem":29,"code":"(fn ex [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))","user":"57b3046de4b0fbc9809a276d"},{"code":"(fn [string]\r\n     (let [letters (set (map char (concat (range 65 91) (range 97 123))))]\r\n       (clojure.string/join (filter #(and (= (clojure.string/upper-case %) (str %))\r\n                   (contains? letters %))\r\n                   (seq string)))))","problem":29,"user":"4f82e14be4b033992c121c0c"},{"problem":29,"code":"(fn [input] (apply str (filter\n                  #(Character/isUpperCase %)\n                   (seq input))))","user":"55d0a3c4e4b0e31453f64a3e"},{"problem":29,"code":"(fn [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))","user":"577e42dee4b0c8d87281f6e4"},{"code":"(fn [s]\n  (apply str (filter #(< 64 (int (char %)) 91) s)))","problem":29,"user":"4ec9549d535d6d7199dd36fe"},{"problem":29,"code":"(fn [word]\n  (let [matcher (re-matcher #\"[A-Z]\" word)]\n    (loop [coll []\n           match (re-find matcher)]\n      (if match\n        (recur (conj coll match) (re-find matcher))\n        (clojure.string/join coll)))))","user":"54df838de4b024c67c0cf7ae"},{"code":"(fn caps\n  [s]\n  (let [uchars (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter uchars s))))","problem":29,"user":"504e12ade4b078edc5f593b7"},{"problem":29,"code":"(fn [s] (->> s\n             (filter #(not= (clojure.string/lower-case %) (str %)))\n             (clojure.string/join)))","user":"4f0366b0535dcb61093f6aa9"},{"problem":29,"code":"(fn [s] (apply str (filter\n           #(and\n             (>= (int %) (int \\A))\n             (<= (int %) (int \\Z)))\n         (seq s))))","user":"56f51879e4b046a417f92069"},{"problem":29,"code":"(fn get-caps [string] (clojure.string/join (map #(re-find #\"[A-Z]+\" (str %)) string)))","user":"5deeb6fde4b093ff7172759f"},{"code":"(fn [text] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (char-array text))))","problem":29,"user":"5343f3dae4b084c2834f4a23"},{"problem":29,"code":"(fn caps\n  [txt]\n  (apply str (re-seq #\"[A-Z]\" txt))\n  )","user":"5bbbcf9ee4b0a20761a23614"},{"problem":29,"code":"(fn [inputText] (apply str ((fn [inputText] (filter #(Character/isUpperCase %) inputText)) inputText)))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":29,"code":"(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )","user":"5996b419e4b07157cc8daab5"},{"code":"#(clojure.string/replace % #\"([^A-Z])\" \"\")","problem":29,"user":"52bb55e8e4b07a9af57922e3"},{"code":"#(apply str (filter (fn [x] (contains? (into #{} (map char (range 65 91))) x)) %))","problem":29,"user":"4dc78527535d8a4b2fd7428f"},{"problem":29,"code":";(fn [in]\n ;(apply str\n  ;(filter #(re-matches #\"[A-Z]\" (str %)) in)))\n\n(fn [in]\n (apply str\n  (re-seq #\"[A-Z]\" in)))","user":"510608ebe4b01150e115ebe3"},{"code":"(fn [s] (apply str\n  (filter #(re-matches #\"[A-Z]*\" (str %)) s)))","problem":29,"user":"4e967c4a535dbda64a6f6b47"},{"code":"(fn [s](apply str(re-seq #\"[A-Z]+\"s)))","problem":29,"user":"5017eface4b02f523d7cc5e7"},{"problem":29,"code":"(fn only-caps [x] (apply str (re-seq #\"[A-Z]\" x)))","user":"576000fce4b08062f99a4e8b"},{"code":"(fn [s]\n(apply str (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"4ee3afde535d10e5ff6f5370"},{"problem":29,"code":"(fn [s]\n  (->> s (filter (set (map char ((comp concat range) 65 91)))) (apply str)))","user":"58aee148e4b0ebc645576cc3"},{"code":"#(apply str (filter \n\t\t(fn[x] \n\t\t\t(if(and (> (int x) 64) (< (int x) 91) ) true false)) %1 ) )","problem":29,"user":"50b25f2ce4b03ea88043355f"},{"problem":29,"code":"(fn onlyUpperCases\n  [string]\n  (clojure.string/join (filter #(Character/isUpperCase %) (vec string))))","user":"54391a55e4b032a45b869319"},{"problem":29,"code":"(fn [in]\n  (apply  str\n          (filter\n           #(not= (clojure.string/lower-case %) (str %))\n           in)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn get-the-caps [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":29,"code":"(fn\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))","user":"554b425ce4b0a04f79299581"},{"problem":29,"code":"(fn\n  [text]\n  (clojure.string/join\n    (remove\n     (fn [x]\n       (= (str x) (clojure.string/lower-case x))\n     )\n     text)\n  )\n)","user":"555f4bade4b0a2eb076a39c2"},{"problem":29,"code":"#(apply str \n\t(reduce (fn \n\t          [a v] \n\t          (if (re-matches #\"^[A-Z]*$\" (str v))\n\t            (conj a v)\n\t            a)) \n\t        [] \n\t        (seq %)))","user":"5eb1e42ae4b00a66d4a95202"},{"code":"#(apply str (filter (fn [c](. java.lang.Character isUpperCase c)) %))","problem":29,"user":"4efb87f7535dced4c769f279"},{"code":"(fn [s]  (apply str (filter #(Character/isUpperCase %)  (seq s))))","problem":29,"user":"4f148418535d64f60314643a"},{"problem":29,"code":"(fn ans-29 [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":29,"code":"(fn [s] \n  (apply str\n    (filter #(Character/isUpperCase %) s)))","user":"559c13c5e4b066d22e731f61"},{"problem":29,"code":"(fn [value]\n  (apply str (filter #(Character/isUpperCase %) value)))","user":"57d9bca1e4b0bd073c202405"},{"problem":29,"code":"(fn uuu [st]\n  (apply str (filter #(Character/isUpperCase %) st)))","user":"5831846ae4b051871117c02c"},{"problem":29,"code":"(fn [sq] (apply str (filter #(Character/isUpperCase %) sq)))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\" (map str (filter #(and (>= 0 (compare \\A %)) (>= 0 (compare % \\Z))) s )))\n  )","user":"58d6caf5e4b03c36ff7e5975"},{"problem":29,"code":"#(clojure.string/join  (re-seq #\"[A-Z]\" %))","user":"5619b22ee4b053970a773afe"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"[^\\p{Upper}]\" \"\"))","user":"5581747fe4b05c286339e0fa"},{"code":"(fn [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))","problem":29,"user":"50901b2ee4b0ea685a20f774"},{"problem":29,"code":"#(->> %\n     (filter (fn [c] (Character/isUpperCase c)))\n     (apply str)\n     )","user":"5e44c804e4b01d43a70e8e89"},{"problem":29,"code":"(fn [string]\n  (->>\n   (filter (fn [c] c) string)\n   (filter (set (map char (range 65 91))))\n   (apply str)))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":29,"code":"(comp clojure.string/join (partial filter  #(Character/isUpperCase %)))","user":"55aa5f73e4b0988bba2ad94b"},{"code":"(fn get-caps [xs]\n  (cond (empty? xs) '()\n        true (cond (Character/isUpperCase (first xs))\n                  (apply str (cons (first xs) (get-caps (rest xs))))\n               true (apply str (get-caps (rest xs))))))","problem":29,"user":"4ef6f5ea535dced4c769f250"},{"problem":29,"code":"(fn get-caps [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n)","user":"545944a2e4b01be26fd74627"},{"problem":29,"code":"(fn filterUpp [x] (let [arr (vec x)] (let [filtered (filter #(Character/isUpperCase %) arr)] (clojure.string/join \"\" filtered))))","user":"57986b76e4b039eba2ecb116"},{"problem":29,"code":"(fn [x] (apply str  (re-seq #\"[A-Z]\" x)))","user":"5e266943e4b05b4b01516178"},{"problem":29,"code":";; Problem 29\n(fn filter-capitals [s]\n  \"Filters the capital letters from a given string\"\n  (let [uppercase-letters (set (map char (range 65 91)))]\n    (apply str (filter #(contains? uppercase-letters %) s))))","user":"5a786f6be4b013a48d39976e"},{"code":"#(rand-nth[\"HLOWRD\"[]\"AZ\"%])","problem":29,"user":"4e7eff9e535db966e863cc38"},{"problem":29,"code":"(fn [a-seq] (apply str (re-seq #\"[A-Z]\" a-seq)))","user":"595fd77ce4b066ee0a44b06f"},{"code":"(fn [x] (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) x)))","problem":29,"user":"525bcae9e4b0cb4875a45d30"},{"code":"(fn capsOnly\n    ([x y] \n        (if (empty? x)\n            (apply str y)\n            (if\n                 (and\n                     (>= (int (first x)) (int \\A))\n                     (<= (int (first x)) (int \\Z)))\n                 (capsOnly (rest x) (concat y [(first x)]))\n                 (capsOnly (rest x) y))))\n    ([x]\n        (capsOnly x [])))","problem":29,"user":"4f03b3fb535dcb61093f6b52"},{"problem":29,"code":"#(clojure.string/join\n  (filter (fn [c]\n            (if (and (>= (int c) (int \\A))\n                     (<= (int c) (int \\Z)))\n              true\n              false))\n          %))","user":"54ab951be4b09f271ff37ccc"},{"problem":29,"code":"(fn [txt]\n  (reduce (fn [r t]\n            (if (and \n                 (> (int t) 64)\n                 (< (int t) 91))\n              (str r t)\n              r))\n          \"\"\n          txt))","user":"5e172edce4b054039d6af22b"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]+\") (reduce str))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":29,"code":"(fn qq [coll]\n  (let [upper \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        f (fn [x]\n            (contains? (set upper) x))]\n    (apply str (filter f coll))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":29,"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) (char-array %)))","user":"5601a32ee4b04bb52996e193"},{"code":"(fn [x] \n(apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e580746535d8a8b8723a28c"},{"problem":29,"code":"(fn [src] (apply str (for [x (seq src) :when (re-matches #\"[A-Z]\" (str x))] x)))","user":"57dfab73e4b0bd073c202468"},{"code":"(fn [xs] (apply str (re-seq #\"[A-Z]+\" xs)))","problem":29,"user":"4dc4c869535d8a4b2fd74280"},{"problem":29,"code":"(fn find-upper\n  ([st] (find-upper st []))\n  ([st res]\n   (if (empty? st)\n       (apply str res)\n     (if (some #(= (int (first st)) %) (vec (range 65 91)))\n       (recur (rest st) (conj res (first st)))\n       (recur (rest st) res)\n       )\n     )\n   )\n )","user":"5f6adf5ee4b02876ed9fd049"},{"problem":29,"code":"(fn [x] (\n         apply str (re-seq #\"[A-Z]+\" x)\n        )\n )","user":"59f85d78e4b0ca45a743a31a"},{"code":"(fn f [coll]\n  (clojure.string/join\n   ((partial filter #(Character/isUpperCase %)) coll)))","problem":29,"user":"51d7f34fe4b0154f82ab9303"},{"code":"(fn [x]\n         (apply str (filter (fn isUpper [c]\n            (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) x)))","problem":29,"user":"4f0399c4535dcb61093f6b34"},{"problem":29,"code":"#(let [upper? (fn [c] (Character/isUpperCase c))]\n   \n   (apply str (filter upper? %))\n   )","user":"5a535572e4b05d388ecb6c0b"},{"problem":29,"code":"(fn caps-filter-2\n      [word]\n      (apply str (re-seq #\"[A-Z]+\" word)))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":29,"code":"(fn[x] \n  (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) x))\n  )","user":"543496e1e4b0b6b47310fcf2"},{"problem":29,"code":"(fn [xs]\n  (apply str (filter (fn [c] (and (>= (int c) (int \\A))\n                                  (<= (int c) (int \\Z))))\n                     xs)))","user":"5ad3d730e4b0ea6055cfabc8"},{"code":"(fn[x](apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4ecd2735535d23f036227703"},{"problem":29,"code":"(fn f [s] (apply str \n                 (filter \n                  #(not= (str %) (clojure.string/lower-case %))\n                         s)))","user":"571346c0e4b07c98581c3a9b"},{"problem":29,"code":"(fn get-the-caps [text]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" text)))","user":"5661e09ae4b068f2fe63dc70"},{"problem":29,"code":"(fn [s] (->> s (filter #(re-matches #\"[A-Z]\" (str %))) (apply str)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn only-capitals [s] \n  (let [capitals (set (range (int \\A) (inc (int \\Z))))]\n   (apply str (filter #(capitals (int %)) s))))","problem":29,"user":"5244a10de4b0d8acf9ed6ab3"},{"code":"(fn rmcaps [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s))\n)","problem":29,"user":"525cc6c4e4b0cb4875a45d47"},{"code":"(fn\r\n  [s]\r\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4fee04a0e4b0678c553fc308"},{"problem":29,"code":"(fn [s]\n  (reduce str(re-seq #\"[A-Z]+\" s))\n )","user":"5c4ad616e4b0f9f7a8770e5a"},{"problem":29,"code":"(comp clojure.string/join (partial filter #(java.lang.Character/isUpperCase %)))","user":"548ade6de4b0e286459a11f6"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) (seq s))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":29,"code":"#(apply str (for [x % :when (Character/isUpperCase x)] x))","user":"529de065e4b04e0c58e87b84"},{"code":"(fn [x]\n\t(reduce str (filter #(re-matches #\"[A-Z]\" (str %)) x)\n            )\n  )","problem":29,"user":"4edf95a8535d10e5ff6f5342"},{"problem":29,"code":"(fn a [b] (apply str (filter #(Character/isUpperCase %) b)))","user":"54e956d9e4b024c67c0cf831"},{"problem":29,"code":"(comp clojure.string/join #(re-seq #\"[A-Z]+\" %))","user":"546a6fd8e4b00cfc9eacc158"},{"code":"(fn [s]\n  (let [t (re-seq #\"[A-Z]\" s)]\n    (if (empty? t)\n      nil\n      (apply str t))))","problem":29,"user":"538e36c7e4b0b51d73faae81"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (<= (compare % \\Z) 0) (>= (compare % \\A) 0)) s)))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"#(apply str (filter (fn [x] (and (<= (int \\A) (int x)) (>= (int \\Z) (int x)))) %))","problem":29,"user":"523605d1e4b05f3be1c7c8e2"},{"code":"(fn [s] (apply str \n        (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e7e3504535db169f9c79709"},{"problem":29,"code":"(fn [word]\n  (clojure.string/replace word #\"([^A-Z])\" \"\"))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":29,"code":"(fn [arg]\n\t(apply str (filter #(Character/isUpperCase %) arg)))","user":"57d13683e4b0bd073c202368"},{"code":"(fn \n  [s]\n  (apply str\n         (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52bb4be0e4b07a9af57922e2"},{"code":"#(.replaceAll % \"[a-z|\\\\p{Punct}|\\\\s|0-9]\" \"\")","problem":29,"user":"4ecff781535d44c135fd68c1"},{"problem":29,"code":"(comp (partial reduce str) re-seq) #\"[A-Z]\"","user":"575f2529e4b08062f99a4e7a"},{"problem":29,"code":"(fn [word] \n  (apply str \n         (filter \n          #(and (> (int %) 64) \n                (< (int %) 91)) \n          word)))","user":"57485efee4b009280f9f2b8a"},{"problem":29,"code":"(fn [coll] (reduce str (filter #(Character/isUpperCase %1) coll)))","user":"542dc7c7e4b0dad94371f2bd"},{"code":"(fn [s] (apply str (filter\n                    #(and\n                      (> (int %) 64)\n                      (< (int %) 91))\n                    s)))","problem":29,"user":"52c45ac8e4b0c2d177d620d9"},{"problem":29,"code":"(fn get-caps \n  [string] \n  (apply str (filter #(Character/isUpperCase %) string)))","user":"57f8153de4b0d3187e900916"},{"code":"(fn [s] (apply str (filter (fn [c] (. Character isUpperCase c)) s)))","problem":29,"user":"50a8a04ae4b0deba384a58b9"},{"problem":29,"code":"(fn [s] (apply str (for [c s] (when (Character/isUpperCase c) c))))","user":"5d590500e4b02ba5928a6824"},{"problem":29,"code":"(fn[x](reduce str (re-seq #\"[A-Z]\" x)))","user":"54d0cedde4b0e8a36923e5d2"},{"problem":29,"code":"(fn [a] (apply str (filter\n                     #(and (Character/isLetter %) (= (clojure.string/upper-case %) (str %))) a)))","user":"6033f8e9e4b0d5df2af222c6"},{"code":"(fn [x] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))","problem":29,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [xs] (apply str (filter #(and (< 64 (int %)) (< (int %) 91)) xs)))","problem":29,"user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn [s]\n  (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) s)))","problem":29,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":29,"code":"(fn caps [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) (seq str))))","user":"5761724de4b0994c1922fb89"},{"code":"(fn [x]\n  (apply str\n  (filter\n   (fn [y]\n     (and (>= (int \\Z) (int y))\n          (<= (int \\A) (int y))))\n   x)))","problem":29,"user":"52cf5450e4b07d0d72b273a4"},{"code":"(fn a [m]\n  (apply str (reduce (fn [accum x] \n         (if (Character/isUpperCase x)\n             (conj  accum x)\n            accum\n           ))\n          []\n          m\n)\n   )\n)","problem":29,"user":"50a85af1e4b054305ba5a833"},{"code":"#(clojure.string/join \"\" (clojure.string/split % #\"[^A-Z]\"))","problem":29,"user":"504f57c7e4b0a02f9cffde71"},{"problem":29,"code":"(fn [x]\n  (apply\n   str\n   (re-seq\n    #\"[A-Z]+\" x)))","user":"5c7741dce4b0fca0c1622806"},{"code":"#(apply str (filter (fn [f] (. Character isUpperCase f)) (seq %)))","problem":29,"user":"4e836a06535db62dc21a62d5"},{"problem":29,"code":"(fn uppers [xs]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (format \"%c\" %) ) xs)))","user":"546113ffe4b01be26fd74699"},{"problem":29,"code":"(fn [y] (apply str (filter (fn [x] (Character/isUpperCase x))                                   \n                     y) \n        ))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn caps-only [s]\n  (apply str (map char \n    (filter (fn [x] (and (>= x 65) (<= x 90))) \n    (map int (seq s))))))","problem":29,"user":"4f159ea6535d64f603146445"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [x]\n                       (and (not (= (.toUpperCase (str x)) (.toLowerCase (str x)))) (= (str x) (.toUpperCase (str x))))) s)))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn [string] (apply str (#(re-seq #\"[A-Z]\" %) string)))","problem":29,"user":"4f329974e4b0d6649770a093"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (< (int %) 92) (> (int %) 64)) x)))","user":"5657fc1ae4b0f9d632dd84ad"},{"code":"(fn [s]\n  (let [filter-func (fn \n    [[orig upper lower]]\n    (and (= orig upper) (not= orig lower)))\n    letters (map (fn [& args] args) s (.toUpperCase s) (.toLowerCase s))]\n    (apply str\n      (map first\n        (filter filter-func letters)))))","problem":29,"user":"4f03d4dc535dcb61093f6b6e"},{"problem":29,"code":"(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n    (apply str)))","user":"53b685e0e4b047364c0444c7"},{"code":"(fn only-caps [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"526d6968e4b03e8d9a4a72d9"},{"problem":29,"code":"(fn [text]\n (apply str (filter\n     (fn checker [character] (some #(= (str character) (str %)) (map char (range 65 91))))\n   text)))","user":"5a6170fde4b0512ff01cd975"},{"problem":29,"code":"(fn upper [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n)","user":"5cb0f70ce4b026601754b8c1"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [l] (let [sl (str l)] (not= (clojure.string/lower-case sl) sl))) (seq s))))","user":"564c8e99e4b0284900eef674"},{"problem":29,"code":"(fn [x] \n  (apply str (re-seq #\"[A-Z]\" x)))","user":"57073037e4b0b0fb43fd0689"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"607bd80be4b0a637ed780379"},{"problem":29,"code":"(fn get-caps[s]\n  (apply str (for [c s \n        :when (Character/isUpperCase c)]\n    c))\n  )","user":"4dd76bf9535d2dad7130b5d1"},{"code":"(fn [seq]\n  (apply str\n    (filter #(< 64 (int %) 91) seq)))","problem":29,"user":"50970f51e4b00ad8bab4e950"},{"problem":29,"code":"(fn [s]\n  (->>\n   s\n   (filter #(Character/isUpperCase %))\n   (apply str)))","user":"57e10705e4b0bfb2137f5a6a"},{"code":"#(apply str(filter(fn [x](if(and(>(int x) 64)(<(int x) 91))true false))%))","problem":29,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq x)))))","user":"59fa5773e4b0ca45a743a35e"},{"code":"(fn caps [x] (apply str (filter #(and (<= (int %1) 90) (>= (int %1) 65)) x)))","problem":29,"user":"5194f482e4b05be8c43d2385"},{"problem":29,"code":"(fn [v]\n  (apply str (re-seq #\"[A-Z]\" v)))","user":"5433eecae4b0b6b47310fce6"},{"code":"(fn chk-up\r\n  [coll]\r\n\t(reduce str \"\" \r\n\t\t(map char \r\n\t\t\t(filter \r\n\t\t\t\t(fn [x]\r\n\t\t\t\t\t(if (and (<= 65 x) (<= x 90))\r\n\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\tfalse)) \r\n\t\t\t\t(seq (.getBytes coll))))))","problem":29,"user":"4edbae0d535d10e5ff6f531c"},{"problem":29,"code":"(fn [a-string]\n  (reduce (fn [acc x]\n            (if (< 64 (int x) 91)\n              (str acc x)\n              acc))\n          \"\"\n          a-string))","user":"574e84e0e4b02ea114799243"},{"code":"(fn [words] (apply str (filter #(Character/isUpperCase %) words)))","problem":29,"user":"524e6b68e4b0541d1855b7db"},{"code":"(fn takeCapitals [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s)\n    )\n  )\n)","problem":29,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":29,"code":"(fn get-capitals\n  [input]\n  (apply str (filter #(Character/isUpperCase %) (seq input))))","user":"566f7749e4b0a866af6896e9"},{"problem":29,"code":"(fn [x]\n   (clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"545e9cf1e4b01be26fd7467f"},{"problem":29,"code":"(fn getCaps\n  [string]\n  (apply str (filter #(Character/isUpperCase %) string )))","user":"59dd3930e4b0a0ac046f2504"},{"code":"(fn [s]\n  (let [CAPS (into #{} (range 65 91))]\n    (apply str (filter #(CAPS (int %)) s))))","problem":29,"user":"50bca033e4b0594b91591c5d"},{"problem":29,"code":"(fn [S]\n    (let [big-letters (set \"QWERTYUIOPASDFGHJKLZXCVBNM\") L (seq S)]\n      ;; перебираем каждый символ строки\n      (loop [Ret '() First (first L) Rest (rest L) ]\n        ;; если ничего нет, то вернем собранное\n        (if (nil? First)\n          (reduce str (reverse Ret))\n          ;; иначе - идем дальше, добавляя текущий символ, если он среди больших\n          (recur            \n            (if (zero? (count (filter #(= % First) big-letters)))\n              Ret\n              (conj Ret First)\n            )\n            (first Rest)\n            (rest Rest)\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":29,"code":"(fn caps [s] \n  (->> (seq s)\n       (map str)\n       (map #(re-find #\"[A-Z]\" %))\n       (filter (comp not nil?))\n       (apply str)))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"(fn filter-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":29,"code":"#(apply str(re-seq\t#\"[A-Z]+\"\t%))","user":"55b08677e4b002ce9d5cbc23"},{"code":"(fn [n] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") n)))","problem":29,"user":"4ef7a483535dced4c769f258"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s))\n  )\n)","user":"5d77a828e4b02e6b30c93531"},{"code":"(fn [x] (apply str (#(re-seq #\"[A-Z]\"%) x)))","problem":29,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":29,"code":"#(clojure.string/join \"\"\n                     (clojure.string/split %1 #\"[^A-Z]\"))","user":"5586b707e4b059ccff29b1d6"},{"problem":29,"code":"(fn\n ([sq]\n  (loop [lst sq acc []]\n    (if (empty? lst)\n      (apply str acc)\n      (let [fst (first lst) rst (rest lst)]\n        (if (re-find #\"[A-Z]\" (str fst))\n          (recur rst (into acc (str fst)))\n          (recur rst acc)))))))","user":"580fb8e0e4b0f478707a05bc"},{"problem":29,"code":"(fn [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq x)))\n)","user":"5f631e11e4b02876ed9fd011"},{"code":"(fn [w]\n  (reduce str (filter #(. Character isUpperCase %) w)))","problem":29,"user":"4e568873535d8a8b8723a283"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))","user":"53e57ba2e4b036ad0777e45c"},{"problem":29,"code":"(fn caps [st]\n   (apply str (filter #(Character/isUpperCase %) st)))","user":"54bcd12be4b0ed20f4ff6ed7"},{"problem":29,"code":"(fn [string](apply str (re-seq #\"[A-Z]\" string)))","user":"5822ccd0e4b04b46fc4b0fa7"},{"code":"(comp (partial apply str) (partial filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))","problem":29,"user":"4fa5ddfde4b081705acca1b1"},{"problem":29,"code":"(fn my-flatten [x] (apply str (filter #(Character/isUpperCase %) x) ) )","user":"5451eb12e4b0e397800069b8"},{"code":"(fn ! [input] \n   (str (#(if (and (> (int %) 64) (< (int %) 91)) % nil)\n         (first input))\n\n        (if (> (count input) 1) (! (rest input)) nil)))","problem":29,"user":"50d6d7eee4b0159555a1fc76"},{"code":"#(reduce str (re-seq #\"\\p{Upper}\" %))","problem":29,"user":"4ed6c738535d10e5ff6f52e9"},{"problem":29,"code":"#(apply str (filter (fn [x]\n  (<= 65 (int x) 90)) %))","user":"5a912080e4b002d099cae6ea"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (set (map char (range 65 91))) s))\n  )","user":"5cfd5a93e4b0cc9c91588168"},{"code":"(fn [s] (apply str \n  (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4e5a3891535d8a8b8723a2aa"},{"problem":29,"code":";(fn [word] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq word))))\n(fn [word] (apply str (filter #(Character/isUpperCase %) (seq word))))","user":"53ecac57e4b0d648e757f4b3"},{"problem":29,"code":"#_(fn [x] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))\n#_(fn [x]\n   (->> x\n      (map int)\n      (filter #(and\n                 (>= % 65)\n                 (<= % 90)))\n      (map char)\n      (apply str)))\n#_(fn [x]\n   (->> x\n      (filter #(and\n                 (>= (int %) 65)\n                 (<= (int %) 90)))\n      (apply str)))\n#(apply str (re-seq #\"[A-Z]\" %))","user":"5ae9b23fe4b0cc2b61a3bbd8"},{"problem":29,"code":"(fn caps [string]\n    (let [[h & t] (seq string)]\n      (cond\n       (nil? h) nil\n       (not (char? h)) (caps t)\n       (#(Character/isUpperCase %) h) (str h (caps t))\n       :else (caps t)\n      )\n    )\n  )","user":"5f85e160e4b0ad2c9bc62a43"},{"problem":29,"code":"(fn [name] (clojure.string/join (filter #(Character/isUpperCase %) name)))","user":"571eeb49e4b0145328a7629c"},{"code":"(fn [l] \n\t(reduce \n\t\t#(if \n\t\t\t(nil? \n\t\t\t\t(re-matches #\"[A-Z]\" (str \"\" %2))) \n\t\t\t%1 \n\t\t\t(str %1 %2)\n\t\t) \"\" l\n\t)\n)","problem":29,"user":"52593207e4b0cb4875a45cd3"},{"problem":29,"code":"#( apply str ( re-seq #\"[A-Z]\"  %))","user":"5cd47c26e4b0ccb06196291e"},{"problem":29,"code":"#(apply  str (re-seq #\"[A-Z]\" %))","user":"57763002e4b0979f89651631"},{"problem":29,"code":"(fn [x]\n  \n  (apply str (filter \n              \n    #(<= (int \\A) (int %) (int \\Z)) \n    x\n              \n  ))\n  \n)","user":"5b3189e5e4b025bcb146f308"},{"problem":29,"code":"(fn [col] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) col)))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"#(apply str (filter \n  (set (map char (take 26 (iterate inc (int \\A))))) %))","problem":29,"user":"4e5c4cc6535d8a8b8723a2bf"},{"code":"(fn [s]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e720985535d5021c1a89655"},{"code":"(fn [s]\n  (apply str \n  \t(filter #(re-find #\"[A-Z]\" %) (clojure.string/split s #\"\"))))","problem":29,"user":"51197750e4b057cba170bc99"},{"problem":29,"code":"(fn [s](->> s (re-seq #\"[A-Z]+\")clojure.string/join ))","user":"52c7c40be4b0c2d177d62125"},{"problem":29,"code":"(fn [x] (->> x (re-seq #\"[A-Z]+\") (apply str)))","user":"587c48cce4b01531a375eb16"},{"code":"(fn [x]\n  (loop [x x\n         result \"\"]\n    (if (empty? x)\n      result\n      (if (Character/isUpperCase (first x))\n        (recur (rest x) (str result (first x)))\n        (recur (rest x) result)))\n    ))","problem":29,"user":"538d464ee4b0b51d73faae69"},{"problem":29,"code":"(let [is-upper-case (fn [c] (and (>= (int c) 65) (<= (int c) 90)))]\n  #(apply str (filter is-upper-case %)))","user":"57a178ade4b0c3d858beb8ec"},{"code":"#(apply str(filter (fn [x] (Character/isUpperCase x)) %))","problem":29,"user":"536c7470e4b0fc7073fd6e3e"},{"code":"(fn [s] (apply str (filter #(not= % (.toLowerCase %)) (map str s))))","problem":29,"user":"4ed1f84f535d44c135fd68d3"},{"problem":29,"code":"#(clojure.string/join (re-seq (re-pattern \"[A-Z]+\") %))","user":"55f2b42be4b06e875b46ce4a"},{"code":"(fn n [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"516bc02ce4b005fd0cdf85c5"},{"problem":29,"code":"(fn get-caps [s]\n  (if (empty? s)\n    \"\"\n    (if (re-matches #\"[A-Z]\" (str (first s)))\n      (str (first s) (get-caps (rest s)))\n      (get-caps (rest s)))))","user":"54125eeee4b01498b1a719d3"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s))))\n\n; '/\\p{Lu}/u'","user":"55b7ca4ae4b01b9910ae29b1"},{"problem":29,"code":"(fn upper \n  [string]\n  (apply str (filter #(not= (str %) (clojure.string/lower-case %)) string)))","user":"55acd080e4b03311e7b73298"},{"problem":29,"code":"#(->> %\n  (re-seq #\"[A-Z]\")\n  clojure.string/join)","user":"5799b260e4b05b1deef9adc8"},{"problem":29,"code":"(fn get-caps [s]\n  (->> s (filter #(Character/isUpperCase %)) (apply str)))","user":"54008b88e4b0de5c4184860d"},{"problem":29,"code":"#(clojure.string/join (filter (fn [%](Character/isUpperCase %)) (seq %)))","user":"57fe68e2e4b0d3187e9009ce"},{"code":"(fn [x] (apply str (filter #(. Character isUpperCase %) x)))","problem":29,"user":"4f625f68e4b0defedf855fd2"},{"problem":29,"code":"#(clojure.string/join \"\"  \n  (filter\n    (fn [string]\n      (Character/isUpperCase string)\n    ) \n  %)\n)","user":"55941019e4b0c79f6e1db94b"},{"code":"(fn [lst] (apply str(filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) lst)))","problem":29,"user":"51eec1a6e4b0871fa145d98d"},{"problem":29,"code":"(fn ups [x] (apply str (filter (fn [y] (and (>= (int y) (int \\A)) (<= (int y) (int \\Z)))) x)))","user":"56f258d3e4b04a395b9a04a1"},{"problem":29,"code":"reduce (fn [res c] (if (Character/isUpperCase c) (str res c) res)) \"\"","user":"58b86162e4b0ebc645576d97"},{"problem":29,"code":"(fn [x] (clojure.string/join ((fn [s] (filter #(and (< (int %) 91)\n                                     (> (int %) 64))\n                               s)) x)))","user":"5ac0ba3ae4b073f177442745"},{"code":"(fn [s] (apply str (filter #(and (< (int %) 91) (> (int %) 64)) s)))","problem":29,"user":"524f4162e4b0541d1855b806"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %)  x) ))","problem":29,"user":"52810225e4b0757a1b171418"},{"problem":29,"code":"(fn [x] (apply str (filter #(< 64 (int %) 92) (vec x))))","user":"5547b72be4b0a04f79299550"},{"code":"(fn [word] (clojure.string/replace word #\"[^A-Z]\" \"\"))","problem":29,"user":"51aee76ce4b09397d5109796"},{"problem":29,"code":"(fn [i]\n  (apply str (filter #(Character/isUpperCase %) i)))","user":"59636b6de4b066ee0a44b0c6"},{"problem":29,"code":"(fn [st] (reduce str (filter (set (map char (range 65 91))) st)))","user":"59e18b9be4b08badc2a0c50f"},{"code":"(fn flt [x]\n\t(apply str\n   \t\t(filter #(Character/isUpperCase %) x)))","problem":29,"user":"51dd9370e4b0c33a4e1da40c"},{"problem":29,"code":"(fn upper [s]\n    (apply str (filter (fn [x] (Character/isUpperCase x)) s)))","user":"56ef0a2ee4b04a395b9a045a"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join\n    (filter \n      (fn [c] \n        (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) s)))","user":"55058a4fe4b086ebe8a79c89"},{"code":"#(apply str (re-seq  #\"\\p{Upper}\" %))","problem":29,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn [text] (clojure.string/join (filter #(Character/isUpperCase %) text)))","problem":29,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":29,"code":"(fn [xx] (apply str (filter #(Character/isUpperCase %) (seq xx))))","user":"54d37e4ce4b0e8a36923e608"},{"code":"(fn f [s] \n  (apply str \n         (filter (complement nil?) \n                 (map (partial re-find #\"[A-Z]\") \n                      (map str s)))))","problem":29,"user":"52140b53e4b0961f15ac4d7e"},{"code":"#(apply str(keep identity (for [x %] (if(true? (java.lang.Character/isUpperCase x)) x))))","problem":29,"user":"50d179c7e4b05a71a896ef56"},{"problem":29,"code":"(fn fil[x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"57bbe96be4b05aa3c4741c34"},{"problem":29,"code":"(fn[x](apply str(filter #(re-find #\"[A-Z]\" (str %)) x)))","user":"6045e761e4b02d28681c77bb"},{"problem":29,"code":"(fn [str]\n   (->>(map int str) \n       (filter #(and (<= 65 %) (>= 90 %)))\n       (map char)\n       (clojure.string/join \"\")))","user":"5db98f39e4b010eb3c36cd53"},{"problem":29,"code":"(fn [xs] (apply str (re-seq #\"[A-Z]\" xs)))","user":"56388a0fe4b0bfe05bf117e7"},{"code":"#(apply str (re-seq #\"[A-Z]+\" %1))","problem":29,"user":"4dc25124535d020aff1edf94"},{"code":"(fn [s]\r\n  (apply str \r\n    (filter #(<= (int \\A) (int %) (int \\Z)) \r\n      (seq s))))","problem":29,"user":"4ddee37c535d08e6dec9fddc"},{"problem":29,"code":"(fn filter-cap [s]\n  (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))","user":"5e30dbd5e4b05b4b0151621d"},{"problem":29,"code":"(fn [st]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" st)))","user":"57a7f7d8e4b0a96607956218"},{"problem":29,"code":"(fn caps [s]\n  (letfn [(cap? [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z))))]\n    (apply str (filter cap? s))))\n\n; Better solutions\n; #(apply str (re-seq #\"[A-Z]\" %))\n; #(clojure.string/replace % #\"[^A-Z]+\" \"\")","user":"567e418fe4b0feffd0d18eb1"},{"problem":29,"code":"#((fn [col acc] (if (empty? col) acc (let [c (first col)] (recur (rest col) (if (Character/isUpperCase c) (str acc c) acc))))) % \"\")","user":"5f49482ae4b0102c75033940"},{"code":"(partial (fn find-upper [y x]\n        (loop [a 0 y y]\n          (cond\n           (= a (count x)) y\n           (and (>= (int (nth x a)) 65) (<= (int (nth x a)) 90)) (recur (inc a) (str y (nth x a)))\n           :else (recur (inc a) y)))) \"\")","problem":29,"user":"520332f7e4b030ee0c5b2714"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [e] (. java.lang.Character isUpperCase e)) s)))","user":"5713c575e4b07c98581c3aab"},{"problem":29,"code":"(fn [s] (apply str (filter #(<= 65 (int %) 90) (char-array s))))","user":"543b5bc6e4b032a45b86932d"},{"code":"(fn [x] \r\n  (apply str (map \r\n    (fn [r] \r\n      (if (and (= (str r) (.toUpperCase (str r)))\r\n        (not (= (str r) (.toLowerCase (str r))))\r\n      ) r)\r\n    ) x)))","problem":29,"user":"4dd579b5535dae65d5c462ea"},{"code":"(fn [s] (apply str (filter #(not= (str %) (.toLowerCase (str %))) s)))","problem":29,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn only-caps [s] \r\n  (reduce str (filter #(not-empty (re-matches #\"[A-Z]\" (str %))) s))\r\n)","problem":29,"user":"4e919b43535dbda64a6f6afb"},{"problem":29,"code":"(fn [xs] (apply str (filter #(and (<= (int \\A) (int %1)) (<= (int %1) (int \\Z))) xs)))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":29,"code":"(fn extract-capitals [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"572010a4e4b0c5bde472c08c"},{"code":"#(apply str (filter \n  (fn [ch] (<= (int \\A) (int ch) (int \\Z))) %))","problem":29,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":29,"code":"(fn [a] \n  (clojure.string/join\n  (re-seq #\"[A-Z]\" a)))","user":"58273e82e4b051871117bf1b"},{"code":"(fn [x]\n  (clojure.string/join (filter #(Character/isUpperCase %) x)))","problem":29,"user":"523f1245e4b01c266ffa7f95"},{"problem":29,"code":"(fn cap-filter [cs] (apply str (filter #(Character/isUpperCase %) cs)))","user":"5716540fe4b07c98581c3af3"},{"code":"(fn is-upper [x]\n (apply str\n (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4fc2e302e4b081705acca33a"},{"problem":29,"code":"(fn [x] \n  (apply str (filter #(Character/isUpperCase       %) x)))","user":"59250d2be4b072a2710fce64"},{"problem":29,"code":"(fn [x] (reduce str(filter #(Character/isUpperCase %) x)))","user":"5911aa1de4b0163c97b36ed8"},{"code":"(fn [s] \n  (reduce str \n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4ed0e139535d44c135fd68c7"},{"problem":29,"code":"(fn [cad] \n  (apply str (filter #(and \n             (> (int %) 64) \n             (< (int %) 91)) \n       (seq cad)\n       )))","user":"57169f93e4b07c98581c3b00"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) 65)\n              (<= (int %) 90))\n        s)))","user":"5978305be4b01722bebd4d03"},{"code":"(fn fupper\n  [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50b8de6ce4b0cba0e598b652"},{"problem":29,"code":"(fn caps-only [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n  )","user":"602f56c5e4b0d5df2af22297"},{"problem":29,"code":"(fn [parts]\n(apply str (filter #(Character/isUpperCase %) parts))\n  )","user":"579be21fe4b05b1deef9adff"},{"problem":29,"code":"(fn caps [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","user":"568bd448e4b0dcc4269f40a9"},{"problem":29,"code":"(fn get-upper [string]\n  (let [in? (fn [coll elem]\n              (some #(= elem %) coll))]\n    (let [upper-list (map char (range 65 91))]\n      (apply str (filter #(in? upper-list %) string)))))","user":"56714922e4b05957ce8c6107"},{"problem":29,"code":"(fn [s] (->> (filter #(Character/isUpperCase %) s) (apply str)))","user":"54eee38ce4b024c67c0cf878"},{"code":"(fn filter-cap\n  [string]\n  (reduce str (filter #(<= (int \\A) (int %) (int \\Z)) string)))","problem":29,"user":"51937eb3e4b04df54c098022"},{"problem":29,"code":"(fn [input]\n    (->> input\n         (filter\n          #(contains?\n            (->> (range 26)\n                 (map (fn [i] (-> i (+ (int \\A)) char)))\n                 set)\n            %))\n         (apply str)\n         )\n    )","user":"58db48a5e4b0a4d5acaab679"},{"code":"(fn [word]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" word)))","problem":29,"user":"5170643ee4b004f79986ad89"},{"code":"(fn [s]\n  (apply str\n    (filter\n    \t#(and(<= (int \\A) (int %))\n                (<= (int %) (int \\Z)))\n       \ts)))","problem":29,"user":"53800d99e4b06839e8705ebd"},{"problem":29,"code":"(fn upper [string]\n         (apply str (filter #(Character/isUpperCase %) string)))","user":"5be96111e4b0f319e2d7ec70"},{"problem":29,"code":"(fn \n  [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":29,"code":"(fn [lst]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) lst)))","user":"591f05b4e4b09b4ee5954c42"},{"problem":29,"code":"(fn [s]\n   (reduce (fn [r s]\n             (if (Character/isUpperCase s)\n               (str r s)\n               (str r))) (str) s))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":29,"code":"(fn only_caps [str]\n  (-> str\n    (clojure.string/split #\"\")\n    (->> (filter #(re-matches #\"[A-Z]+\" %)))\n    (clojure.string/join)))","user":"55fb58b2e4b0f488688e0661"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (every-pred #(Character/isLetter %) #(Character/isUpperCase %)) s)))","user":"5a383581e4b001c08efc0c97"},{"problem":29,"code":"(fn [c] (clojure.string/replace c #\"[^A-Z]\" \"\"))","user":"54a854f5e4b09f271ff37ca2"},{"problem":29,"code":"(fn only-capitals [str]\n    (clojure.string/join\n        \"\"\n        (filter (fn [x] (java.lang.Character/isUpperCase x)) str)))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":29,"code":"(fn [x]\n    (apply str (seq (apply str (re-seq #\"[A-Z]\" (apply str x))))))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"#(->> %\n  (map str)\n  (filter (partial re-matches #\"[A-Z]\"))\n  (apply str))","problem":29,"user":"52b65f26e4b0c58976d9ad43"},{"code":"(fn [x] \n  (clojure.string/join (re-seq (re-pattern \"[A-Z]+\") x)))","problem":29,"user":"523eb110e4b057c4b7cd0a67"},{"problem":29,"code":"#(reduce str (filter (fn iscap [letter] (re-matches #\"[A-Z]\" letter)) (map str %)))","user":"5d79165ae4b02e6b30c9353e"},{"problem":29,"code":"#(loop [[fst & rst :as all] % res \"\"]\n    (if all\n      (if (Character/isUpperCase (.charAt (str fst) 0))\n        (recur rst (str res fst))\n        (recur rst res)\n        )res))","user":"60759e51e4b069485764de5a"},{"problem":29,"code":"(fn [s] (reduce str (filter #(some #{%} (map char (range (int \\A) (inc (int \\Z))))) (seq s))))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":29,"code":"(fn only-caps [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn b[x]\n  (let [l (.toUpperCase x)]\n    (loop [xx x\n           ll l\n           ses ()]\n        (if (empty? xx) \n          (apply str (reverse ses))\n          (recur (rest xx) (rest ll) \n               (if (and \n                     (= (first xx) (first ll)) \n                     (Character/isLetter (first xx))) \n                  (conj ses (first xx))\n                  ses))))))","problem":29,"user":"4f891abde4b033992c121c77"},{"code":"(fn f [s]\n  (clojure.string/join \n    (filter #(not= (str %) (clojure.string/lower-case %)) s)))","problem":29,"user":"50bb646de4b03e68e4411ca3"},{"code":"(fn [x]\n  (reduce str (re-seq #\"[A-Z]\" x))\n)","problem":29,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn [input] (apply str (filter #(Character/isUpperCase %) input)))","problem":29,"user":"5014754de4b094324338f8e5"},{"problem":29,"code":"(fn [xs]\n  (->> xs\n     (re-seq #\"[A-Z]\")\n     (apply str)))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":29,"code":"(fn get-the-caps\n  [string]\n  (reduce str (re-seq #\"[A-Z]+\" string)))","user":"57d174ede4b0bd073c20236c"},{"code":"(fn getup [input] (apply str (filter #(and (<= 65 (int %)) (>= 95 (int %))) input)))","problem":29,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [str] (clojure.string/join \"\" (filter (fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) str)))","problem":29,"user":"533cebf1e4b085b17e897d78"},{"problem":29,"code":"(fn [charSeq] (apply str (doall (filter #(Character/isUpperCase %) charSeq))))","user":"5455510fe4b0e397800069df"},{"code":"(fn [s]\n  (apply str\n    (filter\n      #{\\Q \\W \\E \\R \\T \\Y \\U \\I \\O \\P \\A\n        \\S \\D \\F \\G \\H \\J \\K \\L \\Z \\X \\C \\V \\B \\N \\M}\n      s)))","problem":29,"user":"50c9ece0e4b0a409464667d8"},{"code":"(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))","problem":29,"user":"4f03822f535dcb61093f6b03"},{"code":"(fn [phrase]\n                             (->> phrase\n                                  (filter #(Character/isUpperCase %))\n                                  (apply str)))","problem":29,"user":"503be880e4b0fc0f99c2e54a"},{"code":"(fn [c] (\n  (fn myCaps [y z]\n    (if (= (count y) 0)\n      z\n      (if (< -1 (compare (first y) \\A) 26)\n        (myCaps (rest y) (str z (first y)))\n        (myCaps (rest y) z)\n      )\n    )\n  ) c \"\"\n))","problem":29,"user":"4f16d6ed535d64f60314644f"},{"problem":29,"code":"(fn [cs] \n    (apply str \n        (filter \n                 #(re-matches #\"[A-Z]+\" %)\n                 (map #(str %) (seq cs ))\n        )\n    ) \n)","user":"5d4c83b7e4b0776584bd6f34"},{"problem":29,"code":"#(->> %\n      seq\n      (filter\n       (fn [x]\n        (Character/isUpperCase x)))\n      (apply str))","user":"5c63e034e4b0fca0c1622668"},{"problem":29,"code":"(fn abc [x] \n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"5b3ca9c9e4b02d533a91bbe3"},{"problem":29,"code":";;tried doing this without the regex patterns \n\n(fn [coll]\n  (let [full-seq (seq coll)\n        alphabet #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n   (apply str (filter alphabet full-seq))))","user":"53b05a36e4b047364c044481"},{"problem":29,"code":"(fn all-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))","user":"56f57481e4b046a417f92072"},{"problem":29,"code":"(fn [s]\n  (apply str (keep #(if (and (>= (int %) 65) (<= (int %) 90)) %) s))\n  )","user":"54145050e4b01498b1a719ea"},{"problem":29,"code":"(fn onlyCaps [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"55204412e4b08d5046aa8a5f"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %))\n\n;re-seq: returns matches of pattern in string. In this case it reviews the element from A to Z for any uppercase.\n;Reference: https://clojuredocs.org/clojure.core/re-seq","user":"5a99b87ee4b0d174b936c7af"},{"code":"(fn [s]\n (apply str (remove #(or (> (int \\A) (int %)) (< (int \\Z) (int %))) s))\n)","problem":29,"user":"517e25c6e4b0329b27fa9f51"},{"code":"(fn [string-in] (apply str (re-seq #\"[A-Z]+\" string-in)) )","problem":29,"user":"52cb94e5e4b07d0d72b2734e"},{"problem":29,"code":"(fn [s] (->> s (map str) (filter #(re-matches #\"[A-Z]\" %)) (clojure.string/join)))","user":"5f648ef1e4b02876ed9fd01b"},{"code":"(fn f29 [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":29,"code":"#(clojure.string/replace % #\"[^\\p{javaUpperCase}]\"  \"\")","user":"58aa3f02e4b01a0c0b23297d"},{"problem":29,"code":"(fn [str]\n    (let [caps (apply hash-set (range 65 91))]\n        (clojure.string/join (filter\n            (fn [chr] (contains? caps (int chr))) str))))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"#(apply str (filter (fn[x](re-matches #\"[A-Z]\" (str x))) %))","problem":29,"user":"4ff2f0a9e4b0678c553fc341"},{"code":"(fn [x] (reduce str (map #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} (map char x))))","problem":29,"user":"53350264e4b0656e627bfd73"},{"problem":29,"code":";;#(clojure.string/replace %  #\"[^\\p{Lu}]\" \"\")\n#(apply str (re-seq #\"\\p{Lu}\" %))","user":"58566b42e4b0f14aab7c86f4"},{"code":"(fn [x] \n     (loop [lst (re-seq #\"[A-Z]\" x)\n            ans \"\"] \n        (if (empty? lst)\n          ans\n          (recur (rest lst) (str ans (first lst))))))","problem":29,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [s]\n  (reduce str (filter \n    #(Character/isUpperCase %) s)))","problem":29,"user":"504e48ace4b0f6ff3350c498"},{"problem":29,"code":"(fn [s]\n\n  (->> s\n       (filter #(and (>= (int %) (int \\A))\n                     (<= (int %) (int \\Z))))\n       (apply str)))","user":"60436423e4b02d28681c77a3"},{"problem":29,"code":"; Orig (fn [s] (apply str (concat (re-seq #\"[A-Z]+\" s))))\n; Learned from austintaylor that concat wasn't needed.\n; As usual, _pcl's solution is so nicely simple.\n(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"5535e822e4b09218d5f44fb2"},{"problem":29,"code":"#(apply str(let [m (re-matcher #\"[A-Z]+\" %)]\n    (loop [h (re-find m)\n           r []]\n      (if-not h\n        r\n        (recur (re-find m)\n          (conj r h))))))","user":"5373451fe4b06d7f452d9e0b"},{"problem":29,"code":"(fn [s] (clojure.string/join (re-seq #\"\\p{javaUpperCase}\" s)))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":29,"code":"reduce (fn [a c] (if (Character/isUpperCase c) (str a c) a)) \"\"","user":"514992d2e4b0b64cbeae1848"},{"problem":29,"code":"(\n\tfn function [var] \n  \t(\n     \tapply str (re-seq #\"[A-Z]\" var)\n     )\n)","user":"548018e8e4b0c51c1f4d7333"},{"code":"(fn only-caps [text]\n  (clojure.string/join (re-seq #\"[A-Z]\" text))\n  )","problem":29,"user":"4ec4d723535dcc7ae8597d65"},{"code":"#(apply str\n       (map char\n         (filter (fn [x] (and (>= x 65) (<= x 90)))\n(map int %))))","problem":29,"user":"50ac81b9e4b071b89ef2622f"},{"code":"(fn [s]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) (seq s)))\n  )","problem":29,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4f26c487e4b0d6649770a006"},{"code":"(fn [string] (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4e42f930535dc968683fc49f"},{"problem":29,"code":"(fn [string]\n  (apply str\n      (filter \n        #(Character/isUpperCase %) string)))","user":"591a6c9fe4b09b4ee5954bd6"},{"problem":29,"code":"#(->> % (filter (fn [x] (apply <= (map int [\\A x \\Z])))) (apply str))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":29,"code":"#(reduce str (re-seq #\"[\\p{javaUpperCase}]+\" %))","user":"5426fb8fe4b01498b1a71b1f"},{"problem":29,"code":"(fn [x]                                                                    \n\t(clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"57a1478ae4b0c3d858beb8e5"},{"problem":29,"code":"(fn [x] (apply str (remove #(not (Character/isUpperCase %)) x)))","user":"55cae949e4b0e31453f649fe"},{"problem":29,"code":"#(apply str (filter (fn [c] (some #{c} (map char (range (int \\A) (inc (int \\Z)))))) %1))","user":"52a267c6e4b04e0c58e87bef"},{"problem":29,"code":"(fn [x] (apply str (for [l x] (when (contains? (set (map char (range 65 91))) l) l))))","user":"5886e8bde4b0f1effa3b76ea"},{"code":"(fn [s]\r\n    (apply str (for [c s :when (Character/isUpperCase c)] c)))","problem":29,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [strs]\r\n (apply str (re-seq #\"[A-Z]\" strs)))","problem":29,"user":"4e03b010535d04ed9115e794"},{"problem":29,"code":"(fn [text]\n  (clojure.string/join (filter #(Character/isUpperCase %) text)))","user":"5c48757fe4b0e06e1360a3c3"},{"problem":29,"code":"(fn get-capital-letters [word]\n  (apply str (filter #(Character/isUpperCase %) (seq word))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":29,"code":"#(->> %1\n      (re-seq #\"[A-Z]\")\n      (apply str))","user":"55627de1e4b0c656e3ff17d9"},{"code":"(fn [s]\n    (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4ec3b393535dcc7ae8597d59"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (map #(char %) (filter #(= (> 64 %) (< 91 %)) (map #(int %) (seq x))))))","user":"54258a7fe4b01498b1a71b0c"},{"problem":29,"code":"(fn [s] (apply str (map #(when (and (> 91 %) (< 63 %)) (char %)) (.getBytes s))))","user":"543be8f0e4b032a45b869337"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(not= (clojure.string/lower-case %) (str %)) (seq s)) ))","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn [s] (apply str (filter (comp (partial re-matches #\"[A-Z]\") str) s)))","problem":29,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":29,"code":"(fn get-gaps [text]\n  (apply str (flatten (re-seq #\"[A-Z]\" text))))","user":"5eac172fe4b00a66d4a951dd"},{"code":"(fn [string] \n  (apply str \n    (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4f03396d535dcb61093f6a7b"},{"code":"(fn [s]\n   (clojure.string/join\n    \"\"\n    (filter\n     (fn [a]\n       (Character/isUpperCase a))\n     (.toCharArray s)))\n   )","problem":29,"user":"52090567e4b0e152394d76ed"},{"code":"#(clojure.string/replace % #\"\\s?[a-z]?[0-9]?[,!*($#&]?\" \"\")","problem":29,"user":"50182f53e4b02f523d7cc5ec"},{"code":"(fn [x]\n     (loop [x x\n            acc []]\n       (if (empty? x)\n         (clojure.string/join \"\" acc)\n       (if (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                      (first x))\n        (recur (rest x) (conj acc (first x)))\n        (recur (rest x) acc)))))","problem":29,"user":"4fe72924e4b0e8f79898fedb"},{"problem":29,"code":"(fn onlyUpper [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (reverse (into () x)) ) )\n  )","user":"56405959e4b08d4f616f5ee1"},{"code":"(fn uppers [word] \n  (apply str (filter #(Character/isUpperCase %) word)))","problem":29,"user":"4ea4fe1f535d7eef308072cf"},{"code":"(fn [s] (reduce str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e4fbd0c535dc968683fc4e9"},{"code":"#(apply str (clojure.string/split % #\"[^A-Z]\"))","problem":29,"user":"503354c3e4b0c6c1199c710c"},{"problem":29,"code":"(let\n  [\n    isUpper (fn [c] (Character/isUpperCase c))\n  ]\n  (fn [s] (apply str (filter isUpper s)))\n)","user":"54ba8206e4b0ed20f4ff6eb6"},{"code":"(fn all-caps [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4e131443535d04ed9115e7d3"},{"problem":29,"code":"#(apply str (filter (fn [leter] (Character/isUpperCase leter)) %))","user":"5f17e3c5e4b091ba50b4dbd0"},{"problem":29,"code":"(fn get-caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"57ff7d88e4b0a837a8b30c20"},{"problem":29,"code":"(fn caps [s] (reduce (fn [acc ch] (if (and (>= (compare ch \\A) 0) (<= (compare ch \\Z) 0)) (str acc ch) acc)) \"\" s))","user":"56f9392ae4b07572ad1a88ac"},{"problem":29,"code":"(fn [v ]\n   (reduce str \"\"\n           (filter #(and\n                     (Character/isLetter  %)\n                     (= (str %)\n                             (clojure.string/upper-case  %) ))\n                   (seq v))))","user":"57bffed6e4b05aa3c4741c89"},{"problem":29,"code":"(fn [input]\n\t(apply str (filter #(Character/isUpperCase %) input)))","user":"54e3e09fe4b024c67c0cf7e4"},{"problem":29,"code":"(fn [string]\n    (reduce str (filter #(Character/isUpperCase %) (concat (apply vector string))))\n)","user":"5838d5ede4b089d5ab817d32"},{"code":"#(apply str (map first (re-seq #\"([A-Z]+)\" %)))","problem":29,"user":"50981062e4b04e098a4c7268"},{"code":"#(apply str (filter #{\\Q \\W \\E \\R \\T \\Y \\U \\I \\O \\P \\A \\S \\D \\F \\G \\H \\J \\K \\L \\Z \\X \\C \\V \\B \\N \\M} %))","problem":29,"user":"5071b614e4b0e3170b5a867d"},{"problem":29,"code":"(fn [asdf] (apply str (filter #(re-find #\"[A-Z]\" (str %)) asdf)))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [s](apply str (filter #(Character/isUpperCase  %) s)))","problem":29,"user":"51c1d159e4b0d204dbe2ca18"},{"code":"#(letfn [(f [c] (and (< (compare c \\Z) 1) (< (compare \\A c) 1)))] (apply str (filter f (seq %))))","problem":29,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":29,"code":"(fn [s] (reduce #(str %1 (if (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %2) %2 \"\")) \"\" (seq s)))","user":"537e4432e4b06839e8705e9f"},{"problem":29,"code":"(fn [s] (apply str\n         (re-seq #\"[A-Z]\" s)))","user":"55009d17e4b07d26eda61d5d"},{"code":"(fn [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))","problem":29,"user":"4eb1dd39535d7eef30807345"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"5d3e8c3de4b01671435dbd73"},{"problem":29,"code":"(fn struppr [s]\n    (cond\n      (string? s) (struppr \n        (re-seq #\"[A-Z]\" s) )\n      (nil? s) \"\"\n      (seq? s)  \n        (cond\n          (nil? (second s)) (first s)\n          :else (str (first s) (struppr (rest s)))\n        )\n           \n    )\n  )","user":"5e1d01b5e4b0dc9594008542"},{"code":"(fn upper [x]\n  (apply str (mapcat #(if (Character/isUpperCase %) [%] []) x)))","problem":29,"user":"4f065217535dcb61093f6c0c"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (< (int c) 97) (> (int c) 64))) (seq s))))","user":"548c8115e4b0e286459a120c"},{"problem":29,"code":"(fn x [s] \n  (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":29,"code":"(fn [x]\n  (apply str\n     (re-seq #\"[A-Z]\" x)\n  )\n)","user":"58d2af83e4b03c36ff7e5907"},{"problem":29,"code":"(fn [x] (\n  apply str(\n      filter #(Character/isUpperCase %) x\n      )\n  )\n)","user":"550b5a53e4b06e50f9beb142"},{"code":"(fn [x] (apply str (map  #(some #{%} '(\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z)) x)))","problem":29,"user":"51cf126ae4b0e42293a2256b"},{"code":"(fn [x] (apply str (filter  #(Character/isUpperCase %) x)))","problem":29,"user":"4e50e2a0535dc968683fc4ef"},{"problem":29,"code":"reduce (fn [x y] (str x (if (Character/isUpperCase y) y \"\")) )\"\"","user":"53053be9e4b0d8b024fd375b"},{"problem":29,"code":"(fn [stri] (clojure.string/join \"\" (map char (filter #(and (>= % 65) (<= % 90)) (map int (seq stri))))))","user":"544285dde4b032a45b869380"},{"problem":29,"code":"(fn get-caps [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n)","user":"5ac74b34e4b0e27600da777f"},{"problem":29,"code":"( fn [str]\n             (clojure.string/join (filter #(Character/isUpperCase %) str)) )","user":"5fc241c1e4b0edf42a5593d1"},{"problem":29,"code":"(fn only-uppercase [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn get-the-caps [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [strng]\n  (clojure.string/replace strng #\"[^A-Z]\" \"\"))","problem":29,"user":"4fec550de4b0681fd128dca6"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join \"\" (filter \n        (fn [ch] \n          (<= (int \\A) (int ch) (int \\Z)))\n        s)))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":29,"code":"(fn [s]\n  (->> s\n       seq\n       (filterv #(Character/isUpperCase %))\n       (apply str)))","user":"550f2333e4b06e50f9beb173"},{"problem":29,"code":"(fn [x]\n    (str (apply str (re-seq #\"[A-Z]\"   x))))","user":"593dfe60e4b069cdc2982bb1"},{"code":"#( apply str (re-seq #\"[A-Z]\" %) )","problem":29,"user":"504eb604e4b069badc5a33c4"},{"code":"(fn [st] (apply str (filter #(Character/isUpperCase %) st)))","problem":29,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn [s] (apply str (filter\n    (fn [c] (let [x (int c)] (and (> x 64) (< x 91))))\n    s)))","problem":29,"user":"504e2600e4b0f6ff3350c46f"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \n   (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A)) ) s)\n   )\n  )","user":"59a17c32e4b0871e7608b851"},{"problem":29,"code":"(fn [x] (let [C (into #{} (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    ;; build a string out of all actual matches\n    (reduce str \"\"\n            ;; as determined by expanding the string\n            ;; as a sequence, and checking whether\n            ;; each element is in the list of interest\n            (map (fn [letter] (str (some #{letter} C)))\n                 (seq x)))))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":29,"code":"(fn [x] (apply str (map char (filter #(< 64 % 97) (map int x)))))","user":"562eeba2e4b0ab312c17ebc1"},{"problem":29,"code":"(fn [word]\n  (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) word)))","user":"5df0f338e4b093ff717275c6"},{"code":"(fn [string](apply str (filter #(and (<= (int %) 90) (>= (int %) 65)) string)))","problem":29,"user":"5024076be4b09f7ee7fb4376"},{"code":"(fn find-caps [xs]\n\t(apply str (re-seq #\"\\p{Upper}\" xs)))","problem":29,"user":"52bc0dade4b07a9af57922f1"},{"problem":29,"code":"(fn [st] (clojure.string/replace st #\"[^A-Z]\" \"\"))","user":"57cc7d96e4b0c746388ab882"},{"code":"(fn [string] (apply str (re-seq #\"\\p{Upper}\" string)))","problem":29,"user":"5003deb9e4b0678c553fc445"},{"problem":29,"code":"( fn[x] ( apply str ( filter #(Character/isUpperCase %1) x )))","user":"53d63e6ce4b0e771c3025454"},{"problem":29,"code":"(fn [s] (->> (re-seq #\"[A-Z]\" s)\n             (apply str)))","user":"5fe5a64de4b05ac5b16ea187"},{"code":"#(clojure.string/replace % #\"[^A-Z]\"  \"\")","problem":29,"user":"526c6e08e4b03e8d9a4a7290"},{"problem":29,"code":"(fn letras-maiusculas [x]\n    (if (empty? x)\n        \"nothing\"\n        \n        (apply str (filter #(Character/isUpperCase %) x))\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>=(int %)(int \\A)) (<=(int %)(int \\Z)))s)))","user":"5721dfc3e4b0c5bde472c0bb"},{"problem":29,"code":"(fn  [col]\n\n  (reduce str (re-seq #\"[A-Z]\" col))\n\n\n\n  )","user":"53b0750fe4b047364c044483"},{"problem":29,"code":"(fn [x]\n  (.replaceAll x \"[^A-Z]\" \"\")\n)","user":"56195e57e4b053970a773af6"},{"code":"(fn [x] (apply str (re-seq #\"\\p{Lu}\" x)))","problem":29,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"code":"#(apply str (re-seq #\"\\p{Upper}\" %))","problem":29,"user":"4e89559c535d4ef0aa30db9a"},{"problem":29,"code":"(fn get-caps [xs]\n  (apply str (re-seq #\"[A-Z]\" xs)))","user":"56efc9fde4b04a395b9a0464"},{"code":"#(->> % (re-seq #\"[A-Z]+\") concat (apply str))","problem":29,"user":"4e8e8c24535d65386fec2143"},{"problem":29,"code":"(fn\n  [x]\n   (apply str (filter (fn [c] (Character/isUpperCase c)) x)))","user":"5c02c9a8e4b0bdcf453d1667"},{"problem":29,"code":"(fn [x] (apply str (filter (set (map char (range (int \\A) (inc (int \\Z))))) x)))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn upcaseonly [s] (apply str (filter #(re-matches (re-pattern \"[A-Z]\") (str %)) s)))","problem":29,"user":"4f0e4ebd535d0136e6c22322"},{"problem":29,"code":"(fn capitaletters\n  [x]\n  (apply str (re-seq #\"[A-Z]+\" x)))","user":"5e9771dee4b0157ca96647d0"},{"code":"(fn [aString]\n   (apply str (filter (fn [aChar] (and (<= (int aChar) 90)\n                                    (>= (int aChar) 65)))\n                                    (seq aString))))","problem":29,"user":"5379ed48e4b06839e8705e5a"},{"problem":29,"code":"#(apply str (filter (fn [x] (not (= (clojure.string/lower-case x) (str x)))) %))","user":"5b9da7fbe4b0c0b3ffbd4b3f"},{"problem":29,"code":"(fn caps\n  [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))","user":"5ac741d6e4b0e27600da777d"},{"problem":29,"code":"(fn\n  [s]\n  (apply str(filter #(Character/isUpperCase %) s)))","user":"55a7e096e4b0988bba2ad934"},{"code":"(fn [st]\r\n  (reduce str (filter (fn [c]\r\n    (and (>= (compare \\Z c) 0)\r\n\t       (<= (compare \\A c) 0))) st)))","problem":29,"user":"50478418e4b0371827a27bc3"},{"code":"(fn f [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))","problem":29,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn [x] (->> x seq (filter #(re-matches #\"[A-Z]\" (str %))) (apply str)))","problem":29,"user":"524be8e0e4b09eba1c0223f1"},{"code":"(fn[s](apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":29,"code":"(fn [s]\n   (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"5515b138e4b055c2f668d4ed"},{"problem":29,"code":"(fn [x] (->> x\n             (filter #(Character/isUpperCase %))\n             (clojure.string/join \"\")))","user":"5d41ac35e4b05dd059a54375"},{"problem":29,"code":"(fn [string] (apply str (filter (fn [x] (Character/isUpperCase x)) string)))","user":"55807091e4b05c286339e0eb"},{"code":"(fn only-upper [string](apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"5368fedee4b0243289761e93"},{"code":"(fn [s]\n  (apply str (map first (filter (fn [[x y]] (not= x y)) \n                  (map vector s (clojure.string/lower-case s))))))","problem":29,"user":"535778dee4b04ce2eb3ed27d"},{"problem":29,"code":"(fn [s]\n    (apply str\n           (map first\n                (filter #(not= (first %)\n                               (second %))\n                        (map vector\n                             s\n                             (.toLowerCase s))))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":29,"code":"(fn find-only-higher [s]\n(loop [sequencer (re-seq #\"[A-Z]\" s) new-vector []]\n  (println (str \"sequencer is \" sequencer \" and new vector is \" new-vector))\n  (if (< (count sequencer) 1)\n  (clojure.string/join new-vector)\n  (let [[part & remaining] sequencer]\n    (recur remaining \n           (if (= (clojure.string/upper-case part) (str part))\n           (conj new-vector part)\n           new-vector))))))","user":"5af865a9e4b0cc2b61a3bcd1"},{"problem":29,"code":"(fn\n  [s]\n  (apply str (filter (set (map char (range 65 91))) s)))","user":"5aa2f1dee4b0d174b936c865"},{"code":"(fn [s] (apply str  (re-seq #\"[A-Z]+\" s))\n)","problem":29,"user":"4dd0e8f7535da60f04a96e57"},{"code":"#(.replaceAll % \"[^A-Z]\", \"\")","problem":29,"user":"527ba695e4b03e8d9a4a7596"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n;; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"553beff9e4b09218d5f4500d"},{"problem":29,"code":"(fn [letters] \n  (clojure.string/join (filter #(Character/isUpperCase %) (seq letters))))","user":"51a0370ae4b0b292b01ee3ef"},{"problem":29,"code":"(fn f\n  [s]\n(apply str (map #(if (= (count (re-find #\"[A-Z]\" (str %))) 1) %) s)))","user":"547b4ec6e4b0c51c1f4d72d5"},{"code":"(fn [the-str] (apply str (filter #(Character/isUpperCase %) (seq the-str))))","problem":29,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":29,"code":"#(apply str ((fn tcap\n               [[x & xs :as xst]]\n               (let [seto (set \"HLOWRDAZ\")]\n                 (cond\n                  (empty? xst) \"\"\n                  (not= nil (seto x)) (cons x (tcap xs))\n                  :else (tcap xs)))) %))","user":"5f317ae4e4b0574c87022c2a"},{"problem":29,"code":"#(.replaceAll % \"[^A-Z]\" \"\")\n#_(clojure.string/replace % #\"[^A-Z]+\" \"\")\n\n#_(apply str (re-seq #\"[A-Z]\" %))\n\n#_(apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))\n#_(apply str (filter (set (map char (range 65 91))    ) %))\n#_(apply str (filter (fn [c] (Character/isUpperCase c)) %))\n#_(apply str (filter (fn [c] (< 64 (int c) 91)        ) %))\n\n#_(comp (partial apply str) (partial re-seq #\"[A-Z]\"))\n\n#_(comp (partial apply str)\n      (partial filter \n               (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":29,"code":"(fn wow [message]\n  (loop [[letter & other_part] message result []]\n    (cond\n      (nil? letter) (apply str result)\n      (and (>= (int letter) 65) (<= (int letter) 91)) (recur other_part (conj result letter))\n      :else (recur other_part result))))","user":"55d354e0e4b0e31453f64a62"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (filter #(and (= (clojure.string/capitalize %) (str %))\n                       (not= (clojure.string/lower-case %) (str %))) \n                 s)))","user":"5545eebee4b0a04f79299539"},{"code":"(fn [s] (reduce str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4f2a7174e4b0d6649770a03e"},{"code":"(fn [s](clojure.string/join (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52c54c84e4b0c2d177d620f0"},{"code":"(fn [s]\n  (->> (for [c s\n             :let [n (int c)]\n             :when (and (< 64 n) (> 91 n))]\n         c)\n       (apply str)))","problem":29,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":29,"code":"#(->> % (filter (fn [character] (Character/isUpperCase character))) (apply str))","user":"5293a603e4b0239c8a67af42"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %)  (seq x))))","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"problem":29,"code":"(fn xx [ss]\n      (apply str (re-seq #\"[A-Z]\" ss)))","user":"532f7e12e4b019098a6f8b4e"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\"(str %))))s)))","user":"5c73a944e4b0fca0c16227b8"},{"problem":29,"code":"(fn get-caps [word]\n  (->> word\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join )))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn [s] \r\n   (apply str (filter (fn [c] \r\n                        (and (= (str c) (clojure.string/upper-case (str c)))\r\n                        (Character/isLetter c)))\r\n               (seq s))))","problem":29,"user":"50c336dde4b00e537d002542"},{"problem":29,"code":"(fn getCaps [xs] (apply str (filter (fn [x] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)) xs)))","user":"53c051a5e4b0c98a41f5ccae"},{"problem":29,"code":"(fn take-caps [string]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))","user":"5c633df2e4b0fca0c162265c"},{"problem":29,"code":"(fn [st] (apply str (filter (fn [s] (and (Character/isUpperCase s)\n                                         (Character/isLetter s))) st)))","user":"547884d7e4b0c51c1f4d72bd"},{"code":"(fn get-caps [col]\n      (apply str\n        (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) col)\n        )\n      )","problem":29,"user":"536827f1e4b0243289761e8a"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x)\n))","problem":29,"user":"4fe183a0e4b0dd6cd5ce3635"},{"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s ) ) )","problem":29,"user":"530c15f7e4b02e82168697d6"},{"problem":29,"code":"#(clojure.string/join(re-seq #\"\\p{Upper}\" %))","user":"55dfada4e4b050e68259b3fd"},{"code":"(fn [s]\n  (clojure.string/join\n   (filter\n    (set (clojure.string/split \"ABCDEFGHIJKLMNOPQRSTUVVWXYZ\" #\"\"))\n    (clojure.string/split s #\"\")\n   )\n  )\n)","problem":29,"user":"5136f659e4b04059df19f2fd"},{"code":"(fn [string] (apply str \n  (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))\n    string)))","problem":29,"user":"4fb266a5e4b081705acca28c"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\"\n        \n        %))","user":"5a6afb1de4b0512ff01cda2f"},{"code":"(fn only-upper-case [lst]\n  (apply str (filter #(Character/isUpperCase %) \n                      lst)))","problem":29,"user":"4fc52278e4b081705acca37c"},{"code":"(fn [x] (reduce str \"\" ((fn [s]  \r\n  (filter #(\r\n    and \r\n      (= % (java.lang.Character/toUpperCase %) )\r\n      (java.lang.Character/isLetter %)\r\n    ) s )) x)))","problem":29,"user":"4dad86e0c9a9d6ed0f99dc57"},{"problem":29,"code":"(fn f [x]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"575fbe58e4b08062f99a4e87"},{"problem":29,"code":"#(reduce str(re-seq #\"[A-Z]\" %))","user":"53c0bc5fe4b00fb29b221257"},{"problem":29,"code":"#(clojure.string/replace % #\"[a-z, !&$#()*@^0-9]\" \"\")","user":"5d14daa6e4b0902706380dcb"},{"problem":29,"code":"#(apply str (for [y %\n      :when (Character/isUpperCase y)]\n    y))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn fun7 [x]\n  \n  (let [y (filter #(java.lang.Character/isUpperCase %) x)]\n      (apply str y)\n  )\n  )","problem":29,"user":"52132f8de4b0d32679a50651"},{"problem":29,"code":"(fn [s] (apply str (map str (filter (fn [c] (<= (int (.charAt \"A\" 0)) (int (.charAt (str c) 0)) (int (.charAt \"Z\" 0)))) s))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn [x] \n  (apply str \n    (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":29,"code":"(fn to-upper [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":29,"code":"(fn [x] (apply str (into [] (filter #(Character/isUpperCase %) x))))","user":"5cb11a72e4b026601754b8c6"},{"problem":29,"code":"(fn [i]\n  (reduce str (re-seq #\"[A-Z]\" i)))","user":"554bc026e4b0a04f79299597"},{"problem":29,"code":"(fn [inp] (apply str (filter (comp not nil?) (map (fn [x] (if (Character/isUpperCase x) x)) inp))))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(not (= (clojure.string/lower-case %) (str %))) x)))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":29,"code":"(fn f [s] (apply str (reverse (reduce into () (re-seq #\"[A-Z]\" s)))))","user":"57b5ed94e4b0fbc9809a27b4"},{"code":"#(reduce str (filter (fn [x] (and (>= (compare x \\A) 0) (>= (compare \\Z x) 0))) %))","problem":29,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n   (re-seq #\"[A-Z]\" x)))","user":"50eeeadae4b02c17778c91f3"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase ^char %) (seq x)) ))","user":"5afc115de4b0cc2b61a3bcff"},{"code":"(fn [c] (apply str (filter #(Character/isUpperCase %1) c)))","problem":29,"user":"4ef57a7f535dced4c769f246"},{"problem":29,"code":"(fn [s] (letfn [(uppercase? [c] (and (>= (compare c \\A) 0) (<= (compare c \\Z) 0)))] (apply str  (filter uppercase? s))))","user":"54cd651be4b057c6fda3a2a2"},{"problem":29,"code":"(fn [lst] \n  \t(apply str (filter \n    \t#(Character/isUpperCase %)\n     \t(seq lst))))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":29,"code":"(fn \n  [word] \n  (apply str\n         (filter #(Character/isUpperCase %) (seq word))))","user":"54249bcce4b01498b1a71afb"},{"code":"(fn [x] (apply str (filter #(not-empty (re-find #\"[A-Z]*\" (str %))) x)))","problem":29,"user":"4e58ef07535d8a8b8723a299"},{"problem":29,"code":"(fn [string] \n  (apply str (re-seq #\"[A-Z]\" string)))","user":"559bdf16e4b066d22e731f5a"},{"code":"(fn caps [x] (reduce str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn [st]\n  (clojure.string/join \"\"\n                       (filter #(not (= (str %) (.toLowerCase (str %))))\n                               (seq st))))","problem":29,"user":"5175616ae4b0dea9bbfba576"},{"problem":29,"code":"(fn[x] (clojure.string/join \"\" (filter #(Character/isUpperCase %) x)))","user":"5770fb2ce4b0979f896515a5"},{"problem":29,"code":"(fn extract-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn [x]\n  (let[is-upper? (fn [x] (if (and (>= (int x)(int \\A))(<= (int x)(int \\Z))) true false))]\n  (apply str (filter is-upper? x))))","problem":29,"user":"4ef43233535dced4c769f233"},{"problem":29,"code":"(fn [check]\n    (let [result (filter (fn [item] (Character/isUpperCase item)) check)]\n      (apply str result)))","user":"58a413b5e4b02bd94d917f07"},{"problem":29,"code":"(fn [str1]\n          (apply str (filter #(Character/isUpperCase %) str1)))","user":"5a8bc2a1e4b05369db4d24ef"},{"problem":29,"code":"#(reduce str (filter (fn [ch] (Character/isUpperCase ch)) %))","user":"5d7bd68ee4b02e6b30c93554"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n#_(fn cap [s] \n  (apply str (filter #(not(nil? (re-matches #\"[A-Z]\" (str %))))s)))","user":"52faf67ce4b047fd55837005"},{"code":"(fn [arg]\n  (apply str (re-seq #\"[A-Z]+\" arg))\n  )","problem":29,"user":"4db7da66535d1e037afb2187"},{"problem":29,"code":"(fn [l]\n  (apply str (filter #(re-seq #\"[A-Z]\" (str %)) l)))","user":"541df0b5e4b01498b1a71a86"},{"code":"#(reduce (fn [x y] (str x y) ) \"\" (re-seq #\"[A-Z]\" %) )","problem":29,"user":"4e6f8d36535d5021c1a89621"},{"code":"(fn test [x]\n  (if (not-empty (str (first x)))\n    (if (not= (str (first x)) (clojure.string/lower-case (first x)))\n        (str (str (first x)) (test (rest x)))\n        (str (test (rest x))))))","problem":29,"user":"502940a9e4b061fd216be4b8"},{"problem":29,"code":"(fn [s] (.toUpperCase (apply str (map first (filter #(not= (first %) (second %)) (map list (.toLowerCase s) s))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":29,"code":"(fn [string-sequence]\n\n  (clojure.string/join (filter #(re-matches #\"[A-Z]*\" %) (map str (seq string-sequence))))\n\n  \n)","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e36425c535deb9a81d77f33"},{"problem":29,"code":"(fn f [x] \n  (apply str (filter #(Character/isUpperCase %) x)))","user":"516064e5e4b009fba0926e26"},{"code":"(fn [value]\n  (clojure.string/join \"\" (map str (filter #(Character/isUpperCase %) (seq value)))))","problem":29,"user":"4f81fcbfe4b033992c121c03"},{"problem":29,"code":"(fn [params] (clojure.string/join (filter #(Character/isUpperCase %) params)))","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4e4482b3535dc968683fc4ab"},{"code":"(fn [s] (reduce str (filter #(re-matches #\"\\p{javaUpperCase}\" (str %)) s)))","problem":29,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"code":"#(apply str ( re-seq #\"[A-Z]\" % ) )","problem":29,"user":"51aa4eede4b04e3dc0c27b25"},{"code":"(fn [s]  \n  (apply str \n         (filter \n          (partial contains? (set (map char (range 65 91)))) s)))","problem":29,"user":"4df247b8535d08e6dec9fe25"},{"problem":29,"code":"(fn up\n  ([xs] (up xs []))\n  ([xs acc] (if (empty? xs) (apply str (reverse acc)) (if (Character/isUpperCase (first xs)) (up (rest xs) (concat [(first xs)] acc)) (up (rest xs) acc)) )))","user":"595fe942e4b066ee0a44b075"},{"code":"(fn [l] (apply str (re-seq #\"[A-Z]+\" l)))","problem":29,"user":"4f84400de4b033992c121c2e"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) (seq %)))","user":"5763818ae4b0994c1922fbc7"},{"problem":29,"code":"(fn [str]\n  (clojure.string/join \"\" \n                       (map\n                         #(re-matches #\"[A-Z]\" %)\n                        (clojure.string/split str #\"\"))))","user":"5ee7b49de4b029a2061bbea6"},{"problem":29,"code":"#(->> (filter (->> (range 65 91) (map char) (into #{})) %) (apply str))","user":"56aad332e4b03c432f187337"},{"problem":29,"code":"(fn [e] (apply str (re-seq #\"[A-Z]\" e)))","user":"5964f9b0e4b069c0a1a19778"},{"code":"(fn [s] (reduce str(filter (fn [c] (some #(= c %) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) s)))","problem":29,"user":"5349ac2be4b084c2834f4a67"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join \n   (re-seq #\"[A-Z]\" x)))","user":"5a593521e4b05d388ecb6c93"},{"code":"(fn [x]\n  (apply str (filter #(re-matches #\"[A-Z]+\" (str %)) x)))","problem":29,"user":"5012aefce4b0c8732600222a"},{"problem":29,"code":"(fn [st] (apply str (filter #(<= 0 (- (int %1) (int \\A)) 25) st)))","user":"544e6b7fe4b0e39780006986"},{"problem":29,"code":"(fn upper [inp] (apply str (re-seq #\"[A-Z]+\" inp)))","user":"4f035fbe535dcb61093f6a92"},{"problem":29,"code":"(fn get-cap [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"58e965b3e4b056aecfd47d08"},{"code":"(fn [mystr] (apply str (filter #(Character/isUpperCase %) mystr)))","problem":29,"user":"4f091dcd535dcb61093f6c43"},{"problem":29,"code":"(fn uperCase[x]\n  (loop [a x res \"\"]\n    (if (seq a)\n      (if (first a)\n        (if (Character/isUpperCase(first a))\n          (do (println  res)\n          (recur (rest a) (str res (first a))))\n          (recur (rest a) res)\n        ))res)))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn get-caps [s]\n  (apply str (filter (fn [c] (re-find #\"[A-Z]\" (str c))) s)))","problem":29,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":29,"code":";(fn [x] (re-seq #\"[A-Z]\") x)\n(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x) ) )","user":"5822e082e4b04b46fc4b0fa9"},{"problem":29,"code":"(fn __ [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n)","user":"593f95d8e4b069cdc2982be3"},{"code":"#(apply str (re-seq #\"[A-Z]+\" %))","problem":29,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":29,"code":"(fn [i-str] (apply str (filter #(Character/isUpperCase %) i-str )))","user":"4fc57c4ce4b0ee37620e17f6"},{"problem":29,"code":"(fn caps [input]\n  (apply str (re-seq #\"[A-Z]*\" input)))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":29,"code":"(fn [s]\n  (apply str\n     (re-seq #\"[A-Z]\" s)))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [st]\n  (apply str (re-seq #\"[A-Z]\" st)))","problem":29,"user":"4e0febe6535d04ed9115e7be"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n  )","problem":29,"user":"5231c38fe4b0e2e8de81d1f8"},{"code":"(comp #(apply str %) #(re-seq #\"[A-Z]*\" %))","problem":29,"user":"526952b8e4b03e8d9a4a71e4"},{"problem":29,"code":"(fn [s]\n\t(apply str (re-seq #\"[A-Z]\" s)) \n)","user":"58670d13e4b0f14aab7c8871"},{"code":"(fn[s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"#(apply str (let [caps? (fn [x] (and\n              (>= (compare \\Z x) 0)\n              (>= (compare x \\A) 0)))]\n  (filter caps? (seq %))))","problem":29,"user":"51642237e4b003cf19fdde31"},{"problem":29,"code":"(fn sss[texto](let[a (fn b[texto ret](apply str(cond\n                                               (empty? (vec texto)) ret\n                                               :else (b\n                                                       (apply str(rest(vec texto)))\n                                                       (cond\n                                                           (and (Character/isLetter (first(vec texto)))\n                                                                (= (str(first (vec texto))) (.toUpperCase (str(first (vec texto))))))\n                                                           (conj[](apply str(conj ret(str(first(vec texto))))))\n                                                           :else\n                                                           ret)))))]\n                  (a texto [])))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":29,"code":"(comp clojure.string/join (partial filter #(Character/isUpperCase %)))","user":"5414b7c4e4b01498b1a719ed"},{"problem":29,"code":"#(apply str (filter (fn [d] (Character/isUpperCase d)) %))","user":"4ef08bd6535dced4c769f20a"},{"problem":29,"code":"(fn[col](apply str (filter #(Character/isUpperCase %) col)))","user":"5721cd3be4b0c5bde472c0ba"},{"code":"#(apply str (filter (into #{} (seq \"HLOWRDAZ\")) (seq %)))","problem":29,"user":"4ff9a200e4b0678c553fc3ab"},{"problem":29,"code":"(fn filter-cap [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))","user":"57addbcce4b0b8559636fca3"},{"problem":29,"code":"#(->> %\n      (re-seq #\"[A-Z]\")\n      (apply str))","user":"5eb193fde4b00a66d4a951fe"},{"problem":29,"code":"(fn[s](apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))","user":"580fbaade4b0f478707a05c0"},{"problem":29,"code":"(fn [string]\n  (let [is-uppercase? (fn [c] \n                        (<= (int \\A) (int c) (int \\Z)))]\n    (->> string\n         (filter is-uppercase?)\n         (reduce str))))","user":"567abc97e4b05957ce8c619d"},{"problem":29,"code":"(fn [lst]\n  (clojure.string/join (filter #(Character/isUpperCase %1) (seq lst))))","user":"60b174f3e4b0e0fa5f1b4226"},{"code":"#(reduce str \"\" (re-seq #\"[A-Z]\" %))","problem":29,"user":"4e6093c9535d8ccf87e9fe54"},{"problem":29,"code":"(fn [s] (clojure.string/join (map #(char %) (filter #(and (>= % 65) (<= % 90))  (map #(int %) s)))))","user":"55228c3ce4b0882d96d091a2"},{"problem":29,"code":"#(clojure.string/join \"\" (re-seq (re-pattern \"[A-Z]+\") %))","user":"4fabbd3ee4b081705acca21e"},{"code":"(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"4dad51418e77d6ed55f12a44"},{"problem":29,"code":"(fn [coll]\n (letfn [(capital-letter? [x] \n          (if char? \n            (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))))]\n  (apply str (filter capital-letter? coll))\n  ))","user":"53f35c34e4b0742d9025b0f4"},{"code":"(fn [coll]\r\n   (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"50ab44b2e4b0f65d68208509"},{"problem":29,"code":"(fn[l] \n  (apply str (filter #(Character/isUpperCase %) l) ))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4de165f3535d08e6dec9fde6"},{"code":"(fn  [s]\n  ( apply str (filter #(Character/isUpperCase %) s ) ) )","problem":29,"user":"5026916fe4b0c969f0b056e1"},{"code":"#(clojure.string/join (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))","problem":29,"user":"5163b06be4b055933a9ca030"},{"code":"(fn [s]\n  (let [caps (set (map char (range 65 91)))]\n    (apply str (filter #(contains? caps %) s))))","problem":29,"user":"50afdf00e4b0c3f5ed5c29a5"},{"code":"#(apply str (re-seq #\"[A-Z]*\" %1))","problem":29,"user":"4ddc56e1535d02782fcbea04"},{"problem":29,"code":"(fn caps [xs] (apply str (filter #(<= 65 (int %) 90) xs)))","user":"559622cee4b0c79f6e1db975"},{"problem":29,"code":"#(apply str(\n           re-seq #\"[A-Z]+\" %))","user":"6085edade4b0736b099e42fc"},{"code":"(fn filter-capitals \n  [sentence]\n  (apply str \n         (filter \n          (fn [x] (and \n                   (>= (int x) (int \\A)) \n                   (<= (int x) (int \\Z)))) \n          (seq sentence))))","problem":29,"user":"4feacba7e4b0140c20fb9c0e"},{"code":"(fn [str-word]\n  (apply str\n         (filter\n          #(contains? (set (range (- (int \\A) 1) (+ (int \\Z) 1))) (int %))\n          str-word)))","problem":29,"user":"4f601623e4b0defedf855fa3"},{"problem":29,"code":"(let [caps (set (map char (range 65 91)))]\n  #(->> % (filter caps) (apply str)))","user":"53ef3adfe4b0742d9025b0c9"},{"problem":29,"code":"(fn  [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"54ef4a1de4b024c67c0cf882"},{"code":"(fn [s]\n  (apply str \n         (filter #(Character/isUpperCase %) s)))","problem":29,"user":"51d19c24e4b0cfcf579466c3"},{"problem":29,"code":"(fn cap [value] (\n  \treduce str (re-seq #\"[A-Z]\" value)               \n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":29,"code":"(fn [s]\n  (apply str (filter \n              (fn [x]\n                (<= (int \\A) (int x) (int \\Z)))\n              s)))","user":"53d60f57e4b0e771c3025451"},{"code":"(fn [s] \n  (let [capital? #(and (>= (int %) 65) (<= (int %) 90))]\n    (apply str (filter capital? s))))","problem":29,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn [l] (reduce str (re-seq #\"[A-Z]+\" l)))","problem":29,"user":"5314318ee4b08068f379ed13"},{"code":";convert to lowercase   (.toLowerCase w)\n;convert to uppercase   (.toUpperCase w)\n(fn getCps [w]\n  (loop [result \"\"       len (.length w)      i 0]\n    (if (= i len) \n        result\n\t\t(if (= (.charAt w i) (.charAt (.toLowerCase w) i))\n            (recur result len (inc i))\n       \t\t(recur (.concat result (.toUpperCase (.toString (.charAt w i)) ))   len  (inc i))\n        )\n    )\n  )\n)","problem":29,"user":"518aec06e4b06da86c1973c2"},{"problem":29,"code":"(fn caps [s]\n  (reduce (fn [cs c]\n             (if (and (>= (int c) 65) (<= (int c) 90))\n                (str cs c)\n                 cs)) \"\" s))","user":"5ab168d2e4b073f1774425c2"},{"problem":29,"code":"(fn get-caps [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"5d6691cee4b0db5d338d15e9"},{"code":"(fn capLetters [x]\n   (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4fc8b012e4b0ee37620e1838"},{"code":"#(apply str (filter (fn [c] (and (< (int c) 95) (> (int c) 64) )) %))","problem":29,"user":"4ec3d85f535dcc7ae8597d5c"},{"problem":29,"code":"(fn [b] (apply str (filter (fn x [a] (not= (.toLowerCase (str a)) (str a))) b)))","user":"5ab3db13e4b073f177442609"},{"problem":29,"code":"(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int (seq s))))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":29,"code":"#(condp = (first %)\n   \\H \"HLOWRD\"\n   \\n \"\"\n   \\$ \"AZ\")","user":"50d0d2dde4b00b15ecee9768"},{"problem":29,"code":"(fn upper-case [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"(fn [s] (apply str (filter #(java.lang.Character/isUpperCase %) (seq s))))","problem":29,"user":"4fb0a1e0e4b081705acca269"},{"problem":29,"code":"(fn [instr]\n  (reduce (fn [accstr inchar]\n            (if (Character/isUpperCase inchar)\n              (str accstr inchar)\n              accstr))\n          \"\"\n          instr))","user":"60726211e4b069485764de36"},{"code":"(fn\n  [xs]\n  (apply str\n    (filter\n      #(and (> (int %) 64) (< (int %) 91))\n      xs)))","problem":29,"user":"4f5155a3e4b03ad3f0c10d1b"},{"problem":29,"code":"(fn only-caps [x]\n  (apply str\n    (filter\n      #(not= (clojure.string/lower-case %) %)\n      (clojure.string/split x #\"\"))))","user":"6091501de4b00e9e6653c3d3"},{"code":"(fn [st]\n  (clojure.string/join \n    (filter \n      (fn [c] (let [val (int c)]\n        (and (>= val (int \\A)) (<= val (int \\Z)))))\n      st)))","problem":29,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn[x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))","problem":29,"user":"4f82ed48e4b033992c121c0e"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(re-matches #\"[A-Z]\" %1) (clojure.string/split x #\"\"))))","user":"5006c169e4b0678c553fc48d"},{"problem":29,"code":"(fn [t] (apply str (re-seq #\"[A-Z]+\" t)))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":29,"code":"#(reduce str (map str (filter (fn [x] (Character/isUpperCase x)) (into [] %))))","user":"5e839edde4b09a7a73c8bbba"},{"code":"(fn [s] (clojure.string/join (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e6a4950535d8ccf87e9febf"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) s)))","user":"4f0d5338535d0136e6c22316"},{"problem":29,"code":"(fn get-caps [s]\n\t(apply str \n\t\t(filter\n\t\t\t(fn [c]\n\t\t\t\t(#(Character/isUpperCase %) c)) s))\n\t)","user":"5a025edde4b01bb0ae8afd64"},{"code":"(fn [string] \n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4e0d5a5a535d04ed9115e7b5"},{"problem":29,"code":"(fn [x](apply str(filter #(Character/isUpperCase %) x)))","user":"55350bdae4b09218d5f44fa8"},{"code":"(fn get-uppers [lat] \n  (apply str\n     (filter #(Character/isUpperCase %) (apply list lat))))","problem":29,"user":"514cc029e4b019235f6c057c"},{"code":"(fn [coll]\n  (apply str (filter (fn [c]\n    (Character/isUpperCase c)) coll)))","problem":29,"user":"505bd09fe4b032b709c81373"},{"code":"(fn [s] (apply str (filter (fn [x] (if (empty? (re-seq #\"[A-Z]\" (str x))) false true)) s)))","problem":29,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn caps [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"5376190de4b06839e8705e1c"},{"problem":29,"code":"#(clojure.string/join\n    (filter\n      (fn [x] (not=\n        (clojure.string/lower-case x)\n        (str x)))\n      %))","user":"55b4fa46e4b01b9910ae2983"},{"code":"(fn [string]\n  (apply str\n      (filter\n        #(not= (get (clojure.string/lower-case %) 0) %)\n        string)))","problem":29,"user":"505f55d3e4b08f2a82ad10b0"},{"problem":29,"code":"(fn [s] (->>\n         s\n         (filter #(Character/isUpperCase %))\n         (apply str)))","user":"545a2da7e4b01be26fd74634"},{"code":"(fn [x] (reduce str (re-seq #\"\\p{Upper}\" x)))","problem":29,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":29,"code":"(fn [instr]\n   (apply str (reduce (fn [result curr-char]\n                        (if (Character/isUpperCase curr-char)\n                          (conj result curr-char)\n                          result)\n                        ) [] (char-array instr))))","user":"5e16fd78e4b0a047bd49f726"},{"problem":29,"code":"(fn allcaps [x]\n  (apply str\n    (filter\n      #(.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str %))\n      x)))","user":"59d9e66ae4b0ef0a1e9b5c60"},{"problem":29,"code":"(fn[st]\n (apply str \n    (filter #(Character/isUpperCase %)\n            (seq st))))","user":"5627444fe4b00e49c7cb47cd"},{"code":"(fn caps [s]\n    (when-let [[fst & rst] s]\n      (if (Character/isUpperCase fst)\n        (str fst (caps rst))\n        (caps rst))))","problem":29,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn [s] (apply str (filter #(< 64 (int %) 91) s)))","problem":29,"user":"4ee3c9c5535d10e5ff6f5372"},{"code":"(fn [s] (apply str (filter #(and (Character/isLetter %1)(not (Character/isLowerCase %1))) s)))","problem":29,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [coll] \n  (let [uppers (filter \n                    #(not (= (clojure.string/lower-case %1) (str %1))) \n                    coll)]\n    (condp = (count uppers)\n      0 nil\n      1 (str uppers)\n      (reduce #(str %1 %2) uppers))))","problem":29,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn [col] (apply str (filter #(Character/isUpperCase %) col)))","problem":29,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"#(clojure.string/replace % #\"[^A-Z]\" \"\")","problem":29,"user":"4e6e4127535d5021c1a89605"},{"code":"(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4dc1e1e4535d020aff1edf90"},{"problem":29,"code":"(fn fuc [sq] (apply str (filter #(Character/isUpperCase %) sq)))","user":"56b36283e4b0982f16b37e18"},{"code":"(fn [string]\n  (clojure.string/join \n   (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52029e5de4b030ee0c5b26fc"},{"problem":29,"code":"(fn f[x] (apply str(filter (fn up[z](Character/isUpperCase z)) x)))","user":"5d6523ace4b0db5d338d15cd"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"\\p{javaUpperCase}\" %))","user":"538d70abe4b0b51d73faae6e"},{"problem":29,"code":"(fn [^String s]\n  (apply str (filter #(. Character isUpperCase %) s))\n  )","user":"60cc2d58e4b0e0fa5f1b4323"},{"problem":29,"code":"(fn [s] (apply str (filter  #(Character/isUpperCase %) s)))","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":29,"code":"(fn [x]\n  (apply \n    str \n    (re-seq #\"[A-Z]\" x)\n    )\n  )","user":"55c3149de4b0e31453f64987"},{"code":"(fn [s] (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) (seq s))))","problem":29,"user":"50b29029e4b03ea880433563"},{"code":"(fn [myStr] (apply str (filter #(Character/isUpperCase %) myStr)))","problem":29,"user":"502b04bee4b063e52107afac"},{"problem":29,"code":"(fn my-caps\n    [s] \n    (apply str \n           (filter (fn [c] \n                     (let [cint (int c)] \n                       (and (> cint 64) (< cint 92)))\n                     ) \n                   s)\n           )\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"code":"(fn [string]\n  (->> (filter #(let [strchar (str %)]\n                  (and (= strchar (clojure.string/upper-case %))\n                       (not= strchar (clojure.string/lower-case %))))\n               string)\n       (apply str)))","problem":29,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %)\n            (seq s))))","problem":29,"user":"4f0388e8535dcb61093f6b17"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"4e4aaf49535dc968683fc4ce"},{"code":"(fn [x]\n  (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) x)))","problem":29,"user":"51f629dde4b06ff1c25c52ba"},{"problem":29,"code":"(fn [string]\n  (apply str\n         (filter (set (map char (range 65 91)))\n           string)))","user":"58637f03e4b0f14aab7c881e"},{"code":"#(loop [s % r \"\"]\n     (if (= s ())\n       r\n       (if (and (>= (int (first s)) (int \\A)) (<= (int (first s)) (int \\Z)))\n         (recur (rest s) (str r (first s)))\n         (recur (rest s) r))))","problem":29,"user":"4e6a368e535d8ccf87e9feae"},{"code":"(fn [x] (clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))","problem":29,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":29,"code":"(fn [s]\n   (reduce (fn [uppers c]\n             (if (Character/isUpperCase c)\n               (str uppers c)\n               uppers))\n           \"\"\n           s))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":29,"code":"(fn [s] (->> s (filter #(and (<= (compare % \\Z) 0) (>= (compare % \\A) 0))) (apply str)))","user":"5823c717e4b051871117beb2"},{"code":"(fn onlycaps [s] (apply str (filter #(. Character isUpperCase %) (seq s))))","problem":29,"user":"4ef355e3535dced4c769f228"},{"problem":29,"code":"(fn [s](apply str (filter #(and (>= (compare % \\A) 0) (<= (compare % \\Z) 0)) s)))","user":"5457e5f1e4b01be26fd74613"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\"  % ))","user":"542c858ae4b0dad94371f2a8"},{"problem":29,"code":"(fn [x] (clojure.string/join (map (fn [x y] (if (not (= x y)) y \"\")) (clojure.string/lower-case x) x)))","user":"55818b0ee4b05c286339e0fb"},{"problem":29,"code":"(fn \n  [strng]\n(apply str (filter #(Character/isUpperCase %) strng)))","user":"5854580ce4b07779d46863f9"},{"code":"#(apply str  (filter  (fn [x] (re-find #\"[A-Z]\" (str x)))  (seq %)))","problem":29,"user":"518644bce4b0da5a5be3baca"},{"problem":29,"code":"(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s))\n  )","user":"605b1197e4b000d535e6f548"},{"problem":29,"code":"(fn [s] (reduce #(str % %2) (conj (re-seq #\"[A-Z]\" s) \"\")))","user":"56c08696e4b060a8e693e3aa"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(. Character isUpperCase %) string)))","user":"586b93eae4b01531a375e95b"},{"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) s )))","problem":29,"user":"521e4f22e4b0dd19981ad079"},{"problem":29,"code":"(fn [coll]\n   (let [letters (clojure.string/split coll #\"\")]\n     (->> (filter #(re-matches #\"[A-Z]+\" %) letters)\n          (clojure.string/join \"\"))))","user":"5fb544f6e4b08cb800c85b4e"},{"code":"(fn [s]\n  (apply str (filter #(contains?\n    (set (map char (range 65 91))) %) (seq s))))","problem":29,"user":"505aa653e4b021387fb89857"},{"code":"(fn [x] \n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"531488f3e4b08068f379ed16"},{"problem":29,"code":"#(apply str (for [s % :when (Character/isUpperCase s)] s))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn[s] \n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn [s]\n  (apply str (filter (fn [c] (Character/isUpperCase c)) (seq s))))","problem":29,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"#(apply str (filter (fn [s] (and (>= (int s) 65) (<= (int s) 90))) %))","problem":29,"user":"4e9697bc535dbda64a6f6b48"},{"problem":29,"code":"(fn cap-filter\n  [string]\n  (clojure.string/join\n    (filter #(and (< 64 (int %)) (> 91 (int %))) (seq string))))","user":"5e14e396e4b0a047bd49f6f7"},{"problem":29,"code":"(fn caps [strng]\n  (apply str\n         (for [^char ch strng :when (Character/isUpperCase ch)]\n           ch\n           ))\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":29,"code":"(fn \n  [ args] \n  (apply str (re-seq #\"[A-Z]\"  args)))","user":"53d64811e4b0e771c3025456"},{"problem":29,"code":"(fn [arg] (apply str (filter #(java.lang.Character/isUpperCase %) arg)))","user":"54ca9311e4b057c6fda3a263"},{"problem":29,"code":"#(->> (apply list %)\n  (filter (fn [c] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c)))\n  (apply str)\n  )","user":"5e1754abe4b00200644e3d53"},{"code":"(fn [s] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"524f213be4b0541d1855b7ff"},{"problem":29,"code":"(fn f\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"56488119e4b0284900eef632"},{"problem":29,"code":"(fn [x]\n\t(apply \n     \tstr (re-seq #\"[A-Z]+\" x)))","user":"53edb840e4b0d648e757f4c9"},{"code":"(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s))\n  )","problem":29,"user":"513dfe2ce4b0825f97f7f966"},{"code":"(fn[s] (reduce str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4ec6cd4f535d6d7199dd36d7"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"[a-z0-9.,!?$#*()& ]\" \"\"))","user":"5f86f5a3e4b0649ffcda4cad"},{"code":"#(apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) (seq %)))","problem":29,"user":"4eebfd03535d93acb0a668ab"},{"problem":29,"code":"(fn [st]\n  (let [isUpperCh\n        (fn [ch]  (re-find #\"[A-Z]\" (str ch)))]\n   (apply str (filter isUpperCh st))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(fn [s] \n  (apply str ( re-seq #\"[A-Z]\" s )))","problem":29,"user":"52ebbdf7e4b0705949c44443"},{"problem":29,"code":"(fn [text]\n    (->> (char-array text)\n         (filter #(Character/isUpperCase %))\n         (clojure.string/join))\n    )","user":"567b62fce4b05957ce8c61a6"},{"code":"#(apply str\n  (for \n    [x % :when \n      (Character/isUpperCase x)] \n    x)\n)","problem":29,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":29,"code":"(fn [strng]\n    (\n      apply str (filter #(Character/isUpperCase %) strng)\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":29,"code":";; (fn [arg] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq arg))))\n(fn [arg] (apply str (re-seq #\"[A-Z]\" arg)))","user":"52c634b1e4b0c2d177d6210a"},{"code":"(fn f\n  [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4fea7594e4b0140c20fb9c06"},{"code":"(fn caps [s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4fe9231ce4b0547ebccb2445"},{"problem":29,"code":"(fn [s]\n  (let [i (map int s)\n        ri (filter #(< 64 %1 91) i)\n        rs (apply str (map char ri))]\n   rs))","user":"51a3be77e4b0e77c4ca60bf8"},{"code":"(fn [s]\n  (clojure.string/join \"\" (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"5264383be4b03e8d9a4a70cb"},{"problem":29,"code":"(fn [i] (apply str (filter #(Character/isUpperCase %) (seq i))))","user":"5790329ee4b0ebec4cfb75a7"},{"problem":29,"code":"(fn adfs [x]  (apply str (filter #(Character/isUpperCase %) x)))","user":"53bce179e4b0d9a98559a6c1"},{"problem":29,"code":"( fn [%1] (clojure.string/join \"\" (filter #(Character/isUpperCase %) %1)))","user":"5bed1e4ae4b0a6d31fed2118"},{"problem":29,"code":"(fn myfilt [s] (apply str (filter (set (map char (range 65 91)))(apply list s))))","user":"58622733e4b0f14aab7c8803"},{"code":"(fn [z] (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) z)))","problem":29,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":29,"code":"(fn [instr] (apply str (filter (fn [i] (Character/isUpperCase i)) instr)))","user":"53c6c9dfe4b00fb29b2212a1"},{"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) %) )","problem":29,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":29,"code":"(fn \n  [x]\n  (apply str\n    (filter #(Character/isUpperCase %) (char-array x))))","user":"5d615431e4b0c9e5857d5010"},{"problem":29,"code":"(fn[x](apply str (re-seq #\"[A-Z]\" x)))","user":"592dbbd5e4b072a2710fcf7f"},{"problem":29,"code":"#(clojure.string/join \n  (filter (fn [ch] (Character/isUpperCase ch)) %))","user":"54133900e4b01498b1a719de"},{"code":"(fn [x] \n  (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x)))","problem":29,"user":"520ed237e4b0101e4be6fcd9"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (filter #(and \n                    (>= (int %) 65) \n                    (<= (int %) 90)) \n                 s)))","user":"54dce62be4b024c67c0cf78b"},{"problem":29,"code":"(fn [s]\n  (let [capitals (set (map char (range 65 91)))]\n    (apply str (filter capitals s))))","user":"516c3472e4b06f078fab251c"},{"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4dbd2aa3535d020aff1edf40"},{"problem":29,"code":"(comp\n    (partial apply str)\n    (partial re-seq #\"[A-Z]\"))","user":"5f2d6bc4e4b033932238a66e"},{"problem":29,"code":"(fn [a] (clojure.string/join (filter #(Character/isUpperCase %) a)))","user":"5934a43ce4b072a2710fd07e"},{"code":"(fn [s]\n  (apply str (filter #(. Character isUpperCase %) s)))","problem":29,"user":"5173726be4b098276e74652c"},{"problem":29,"code":"(fn [palavra]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]+\" palavra)))","user":"5d797deee4b02e6b30c93541"},{"code":"(fn [s]\n  (apply str\n    (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4ee4f4a9535d1385b2869d85"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string))\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":29,"code":"(fn  get-uppers [strarg]\n  (apply str\n         (filter #(Character/isUpperCase %) strarg)))","user":"59971dcbe4b07157cc8daacb"},{"code":"(fn [s] (apply str (filter #(and (<= (.hashCode \\A) (.hashCode %))\n                                 (<= (.hashCode %) (.hashCode \\Z)))\n                    s)))","problem":29,"user":"4fdbc075e4b05e33b9224f61"},{"problem":29,"code":"(fn  upper [word]\n  (if (empty? word)\n    \"\"\n    (let [abc (set (map char (range 65 91)))]\n      (if (contains? abc (first word))\n        (str (first word) (upper (rest word)))\n        (upper (rest word))\n        )\n      )\n    )\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":29,"code":"(fn [w] (clojure.string/join (re-seq #\"[A-Z]\" w)))","user":"56e4427ce4b03a7c14b85a4c"},{"code":"#(apply str \n  (filter (fn[c] \n    (and (< 64 (int c)) (> 92 (int c)))) (seq %)))","problem":29,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s))\n)","problem":29,"user":"5002ad40e4b0678c553fc42b"},{"problem":29,"code":"(fn [a]\n  (reduce str \"\" (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq a))))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn [x]\n   (apply str(filter #(re-matches #\"[A-Z]\" (str %)) \n           (seq x)\n   ))\n  )","problem":29,"user":"50053d6ce4b0678c553fc45e"},{"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase (Character. %)) coll)))","problem":29,"user":"50d46d53e4b09cc622d65a69"},{"problem":29,"code":"(fn [text]\n  (->> text\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join)))","user":"5a9181c5e4b002d099cae6f6"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n;#(clojure.string/replace % #\"[^A-Z]\" \"\")\n;(fn [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"52f3568fe4b05e3f0be25f0e"},{"problem":29,"code":"#(clojure.string/join \"\" (filter (fn [c] (and (<= 0 (compare c \"A\")) (>= 0 (compare c \"Z\")))) (clojure.string/split % #\"\")))","user":"56e22366e4b03a7c14b85a30"},{"code":"#(clojure.string/join (vec (re-seq #\"[A-Z]\" %1)))","problem":29,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":29,"code":"(fn [x] \n  (reduce str (filter #(Character/isUpperCase %)  x)))","user":"55278187e4b0ffed3738f92d"},{"problem":29,"code":"(fn [x](clojure.string/join (re-seq #\"[A-Z]\" x) ))","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn [s]\n   (apply str (reduce #(if (Character/isUpperCase %2)\n                         (concat %1 (list %2))\n                         %1) '() s)))","problem":29,"user":"52fac708e4b047fd55836fff"},{"problem":29,"code":"(fn only-caps\n   [txt]\n   (let [coll (seq txt)]\n     (clojure.string/join\n       (filter\n         (fn [x]\n           (not (= (str (clojure.string/lower-case x))\n                   (str x)))) coll))))","user":"5d7d17ece4b02e6b30c93558"},{"code":"#(reduce str (re-seq  #\"[A-Z]\" %1))","problem":29,"user":"51c15fe9e4b0c9c82288294c"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e667f67535d8ccf87e9fe77"},{"code":"(fn\n  [c]\n    (clojure.string/join\n      (filter\n        #(and\n          (>= (int %) (int \\A))\n          (<= (int %) (int \\Z)))\n        c)))","problem":29,"user":"4f387c2ee4b0e243712b1edd"},{"code":"(fn [in]\n  (apply str\n    (filter #(java.lang.Character/isUpperCase %) (seq in))))","problem":29,"user":"4fabb1dce4b081705acca21a"},{"code":"(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) string)))","problem":29,"user":"52a360a3e4b04e0c58e87bfe"},{"problem":29,"code":"(fn [s] \n   (apply str \n          (filter #(Character/isUpperCase %) s)))","user":"549c181ce4b0f3d1d8e70f83"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) (map char x))))","user":"5be0306be4b0ed4b8aab4c7d"},{"code":"(fn[x](apply str(re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4eb7ff08535d7eef30807379"},{"problem":29,"code":"(fn [a] (loop [orig a lower (clojure.string/lower-case a) output \"\"]\n          (if (empty? orig) \n            output \n            (if (= (first orig) (first lower))\n              (recur (rest orig) (rest lower) output)\n              (recur (rest orig) (rest lower) (str output (first orig)))))))","user":"5cf8864be4b0b71b1d808a84"},{"code":"(fn [x] (apply str (map str (filter #(Character/isUpperCase %) x))))","problem":29,"user":"531792d9e4b08068f379ed5e"},{"problem":29,"code":"(fn a [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"59648ce1e4b069c0a1a19769"},{"problem":29,"code":"#(->> (map (fn [c] (if (Character/isUpperCase c) c))\n           (reverse %))\n      (remove nil?)\n      (into '())\n      (clojure.string/join \"\"))","user":"55f344afe4b06e875b46ce5a"},{"code":"(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4f15de56535d64f603146448"},{"code":"; don't follow me! I'm not good at this!\n(fn foo [x]\n\t(let [c (first x)]\n\t\t(if (= (count x) 0)\n\t\t\t\"\"\n\t\t\t(str\n\t\t\t\t(if (and (>= (compare c \\A) 0) (<= (compare c \\Z) 0)) c \"\")\n\t\t\t\t(foo(rest x))\n\t\t\t)\n\t\t)\n\t)\n)","problem":29,"user":"52cc92e9e4b07d0d72b27368"},{"code":"(fn only-upper [x] \n  (apply str\n\t\t(let [ia (int \\A) iz (int \\Z)]\n\t\t\t(filter \n\t\t\t\t#(let [ix (int %)] (and (>= ix ia) (<= ix iz))) \n\t\t\t\t(seq x)\n\t\t\t)\n\t\t)\n\t)\n)","problem":29,"user":"50bcfab0e4b0594b91591c64"},{"code":"(fn [x]\n  (apply str\n    (filter #(re-find #\"[A-Z]\" (str %)) x)))","problem":29,"user":"4e7dbe0c535db169f9c796e3"},{"problem":29,"code":"(fn [string] \n  (apply str (filter (fn [char] (Character/isUpperCase char)) string)))","user":"54835682e4b0e286459a118e"},{"problem":29,"code":"(fn uppers [ss]\n    (reduce str (filter #(Character/isUpperCase %) ss)))","user":"5f6580e7e4b02876ed9fd023"},{"problem":29,"code":"#(apply str (filter (fn [x] (Character/isUpperCase x)) (map char %)))","user":"56c77858e4b0ed865f9758c0"},{"problem":29,"code":"(fn [s](apply str(remove nil? (map (fn [c](if (Character/isUpperCase c) c nil)) s))))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":29,"code":"#(reduce str (filter (fn [el] (Character/isUpperCase el)) (seq %)))","user":"59c734e3e4b0a024fb6ae53f"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"50af3393e4b0a40c9cfb08d7"},{"problem":29,"code":"(fn [text] \n    (apply str (filter (fn [foo] (some #(= % foo) \n                                        (map char (range 65 91)))) \n                       text)))","user":"54d75e4ce4b0a52adc2e202a"},{"code":"#(apply clojure.string/join (re-seq #\"[A-Z]\" %) \"\")","problem":29,"user":"50fe2420e4b03cd852b4e84a"},{"problem":29,"code":"#(clojure.string/replace % #\"[^A-Z]*\" \"\")","user":"543bce4fe4b032a45b869335"},{"problem":29,"code":"(fn [seq]\r\n  (apply str (filter #(<= 0 (compare \\Z %) 25) seq)))","user":"555bd27ae4b0b056612e2244"},{"problem":29,"code":"(comp (partial clojure.string/join \"\") re-seq) #\"[A-Z]\"","user":"56a4ec0ee4b0542e1f8d14dd"},{"code":"(fn [s]\n  (let [caps (set \"ABCDEFGHJKLMNOPQRSTUVWXYZ\")\n        matches (filter (fn[letter] (caps letter)) (seq s))]\n    (apply str matches)\n    )\n)","problem":29,"user":"5201ff99e4b0b2e020a18f26"},{"problem":29,"code":"(fn _ [arg] (apply str (filter #(Character/isUpperCase %) arg)))","user":"539118b2e4b0b51d73faaea1"},{"problem":29,"code":"(fn [instr] (apply str (filter #(java.lang.Character/isUpperCase %) instr)))","user":"53edb628e4b0d648e757f4c8"},{"problem":29,"code":"(\n \tfn [x](\n            \tapply str (filter #(and (>= (-> % int) 65) (<= (-> % int) 90) ) \n                         x)\n           )\n )","user":"544c1b05e4b0e3978000696e"},{"problem":29,"code":"(fn [string]\n  (clojure.string/replace string #\"[^A-Z]+\" \"\"))","user":"55916764e4b0604b3f94d57b"},{"code":"#(apply str (filter (fn [x] (and (> (int x) 64) (< (int x) 91))) %))","problem":29,"user":"4ed7e37a535d10e5ff6f52f4"},{"problem":29,"code":"#(clojure.string/replace(clojure.string/replace % #\"[^a-zA-Z]\" \"\") #\"[a-z]{0,}+\" \"\")","user":"55a30e9de4b0acc240e3152f"},{"code":"(fn [target] (apply str (re-seq #\"[A-Z]+\" target)))","problem":29,"user":"4e45b002535dc968683fc4ae"},{"code":"(comp #(apply str %) (partial filter #(<= (int \\A) (int %) (int \\Z))))","problem":29,"user":"51105c7fe4b04c71fce993ef"},{"problem":29,"code":"(fn [seq]\n  (apply str (filter #(Character/isUpperCase %) seq))\n)","user":"53f7820be4b0de5c41848560"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","user":"5468d932e4b00cfc9eacc13e"},{"problem":29,"code":"(fn [s] (apply str (loop [[letter & letters] (map char s) result '()] (cond (nil? letter) result  \n                             (or (> (int letter) 90) (< (int letter) 65))\n                                       (recur letters result) \n                                                 :else (recur letters (concat result (list letter)))))))","user":"573c813be4b0cd1946bd10c5"},{"problem":29,"code":"#(apply str (filter  (set (map char (concat (range 65 91)))) %))","user":"524b827ce4b09eba1c0223d7"},{"problem":29,"code":"(fn [my-string] (clojure.string/join (filter #(Character/isUpperCase %1) (seq my-string))))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn [mystr]\n   (reduce str (filter #(and (> (int %1) 64) (< (int %1) 91)) mystr)))","problem":29,"user":"4f9f9ff5e4b0dcca54ed6d3a"},{"problem":29,"code":"(fn [s]\n  (apply str (map char (filter (fn [x] (and (> x 64) (< x 91)))\n                                (map (fn [x] (int x)) s))))\n  )","user":"5db6cc4ae4b010eb3c36cd3b"},{"problem":29,"code":"(fn ups [s]\n  (let [u (re-seq #\"[A-Z]+\" s)]\n    (reduce str u)))","user":"5c411df3e4b08cd430848ebf"},{"problem":29,"code":"(fn\n  [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))","user":"5e6df58ee4b04a83ad7cd297"},{"problem":29,"code":"(fn onlyupper [xs] (clojure.string/join (filter #(Character/isUpperCase %) xs)))","user":"56e37659e4b03a7c14b85a44"},{"problem":29,"code":"(fn upf [x]\n  (if (= x [])\n    \"\"\n    (\n     if (<= 65 (int (first x)) 90)\n       (str (first x) (upf (rest x)))\n       (upf (rest x))\n       )\n     )\n  )","user":"5c4a08c5e4b0f9f7a8770e4f"},{"problem":29,"code":"(fn [x] (reduce str \n                (re-seq #\"[A-Z]\" x)))","user":"5587d8b3e4b059ccff29b1e8"},{"problem":29,"code":"(comp (partial apply str) (partial filter (fn [c] (re-matches #\"[A-Z]\" (str c)))))","user":"56acca9ae4b03c432f18734c"},{"code":"(fn [src] \n  (let [col  (map char src)\n        fil  #(Character/isUpperCase %)\n        caps (filter fil col)]\n    (clojure.string/join caps)\n    ))","problem":29,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s )))","user":"5e7b68e8e4b085ba37836e17"},{"code":"(fn [x] (reduce str ((fn [c] (filter (fn [c2] (not= (re-find #\"[A-Z]\" (str c2)) nil)) c)) x)))","problem":29,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":29,"code":"(fn [s]\n         (apply str\n                (filter #(and (>= (int %) (int \\A))\n                              (<= (int %) (int \\Z))) s)))","user":"538d49e1e4b0b51d73faae6b"},{"problem":29,"code":"(fn [word]\n  (reduce str (filter #(Character/isUpperCase %) (seq word))))","user":"55304523e4b076ab5578f810"},{"problem":29,"code":"(fn\n \t[n]\n        (reduce str (re-seq #\"[A-Z]\" n)))","user":"57f81532e4b0d3187e900914"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n\n;#(clojure.string/replace % #\"([^A-Z])\" \"\")\n\n;(fn [s] (apply str  (filter #(Character/isUpperCase %) s)))","user":"572830e6e4b0c5bde472c152"},{"problem":29,"code":"(fn [word] (apply str (filter\n  (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq word))))","user":"58fdd7b7e4b0438e51c2cfc0"},{"problem":29,"code":"#(->> (re-seq #\"[A-Z]\" %)\n      (apply str))","user":"586b1482e4b0f14aab7c88cf"},{"problem":29,"code":"(fn [x] (apply str (apply str (filter (comp not empty?) (re-seq #\"[A-Z]*\" x)))))","user":"549b1e50e4b0f3d1d8e70f7a"},{"problem":29,"code":"#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))","user":"53f31dafe4b0742d9025b0f0"},{"problem":29,"code":"(fn foo [x]\n  (let [is_upper #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))]\n  (apply str (filter is_upper x))\n   )\n)","user":"54b050cee4b09f271ff37d13"},{"code":"(fn [words] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) (seq words))))","problem":29,"user":"50112acee4b0d82cfac69f4c"},{"code":"(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) x)))","problem":29,"user":"4f2de7e9e4b0d6649770a061"},{"problem":29,"code":"(fn get_the_caps\n   [string]\n   ;\"Function which takes a string and returns a new string containing only the capital letters\"\n  (reduce str (filter #(Character/isUpperCase %1) string)))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn [s]\n   (apply str (filter #(java.lang.Character/isUpperCase %) s))\n)","problem":29,"user":"4e6ac49d535d8ccf87e9ff01"},{"problem":29,"code":"(fn [s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"5585ff97e4b001b0851d7515"},{"problem":29,"code":"#(reduce\n   (fn [acc it]\n     (let [str* (str it)]\n       (if (re-matches #\"[A-Z]\" str*)\n         (str acc str*)\n         acc)))\n   nil\n   %)","user":"53b05a75e4b047364c044482"},{"problem":29,"code":"(fn only-uc [a] (reduce str \"\"\n\t(filter \n     \t#(and (not= (clojure.string/upper-case %) (clojure.string/lower-case %)) (= (clojure.string/upper-case %) (str %)))\n\t    a)))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn f [a] (apply str (filter \n  #(-> (re-find #\"[A-Z]+\" (str %)) nil? not)\na)))","problem":29,"user":"50aca31fe4b071b89ef26230"},{"code":"#(apply str \n       (filter \n        (set (map char (range 65 91))) %))","problem":29,"user":"504e3aaae4b0f6ff3350c487"},{"problem":29,"code":"(fn [s]\n(apply str (filter #(Character/isUpperCase %) s)))","user":"5474df6ee4b0c51c1f4d7290"},{"problem":29,"code":";#(clojure.string/join(re-seq #\"[A-Z]\" %))\n\n;#(apply str(re-seq #\"[A-Z]\" %))\n\n(fn get-caps [x] (reduce str (re-seq #\"[A-Z]+\" x)))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":29,"code":"#(apply str (filter (fn [x] (and (<= (int x) (int \\Z)) (>= (int x) (int \\A)))) (seq %)))","user":"55a0e139e4b0acc240e31504"},{"problem":29,"code":"(fn [arst] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq arst))))","user":"56d6c18ee4b0ea9b8538f7d1"},{"code":"#(clojure.string/join \"\" (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"52974f66e4b02ebb4ef75040"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [y] (not= (str y) (clojure.string/lower-case y)))\n          (seq x))))","user":"57d60d83e4b0bd073c2023c2"},{"code":"(fn  [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"50563ae2e4b0ce54f56f0405"},{"problem":29,"code":"#(reduce\n      (fn [acc e] (if (Character/isUpperCase e) (str acc e) (str acc \"\")))\n      \"\" %1)","user":"550a3fa4e4b06e50f9beb12d"},{"code":"(fn [x] \n (loop [xs (re-seq #\"[A-Z]\" x) s \"\"]\n    (if (empty? xs) s\n        (recur (rest xs) (format \"%s%s\" s (first xs))))))","problem":29,"user":"4dbe04b2535d020aff1edf56"},{"problem":29,"code":"(fn [s]  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"5ec22851e4b00a66d4a9529a"},{"code":"(fn [s]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"50b1d166e4b03ea880433554"},{"problem":29,"code":"(fn [st]\n    (apply str\n           (filter (fn [c] (<= 65 (int c) 91)) st)\n           )\n    )","user":"571a282ae4b07c98581c3b46"},{"code":"#(apply str\n    (filter\n      (fn [c] (Character/isUpperCase c))\n      %))","problem":29,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn [s]\n  (reduce str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4f03edd7535dcb61093f6b80"},{"problem":29,"code":"(fn [n]\n  (loop [word (vec n) counter 0 result \"\"]\n    (if (= counter (count word))\n      result\n      (if (.contains (vec (map char (range (int \\A) (inc (int \\Z))))) (word counter))\n            (recur word (inc counter) (str result (word counter)))\n            (recur word (inc counter) result)))))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn [string] (apply str (re-seq #\"[A-Z]+\" string)))","problem":29,"user":"4edab806535d10e5ff6f5311"},{"problem":29,"code":";(fn f [s] (identity s) (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))\n\n(fn f [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"5ed03b7fe4b016b56eae05ae"},{"problem":29,"code":"(comp #(apply str %) (fn [c] (remove (complement #(Character/isUpperCase %)) c)))","user":"55164856e4b06a49daca83b3"},{"problem":29,"code":"(fn get-caps\n  [x]\n  (clojure.string/join (re-seq #\"[A-Z]+\" x)))","user":"5d9c8a85e4b0eb781811cdad"},{"problem":29,"code":"(fn [lst]\n  (reduce str (filter #(= (str %) (str (clojure.string/upper-case %))) (seq (clojure.string/replace lst #\"[',.?! #$@&*()0-9]\" \"\")))))","user":"5f9567cce4b0715f5002d7c7"},{"code":"(fn[s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"51383346e4b0a5db03d727d4"},{"problem":29,"code":"#(clojure.string/join\n   (filter (fn [c] (Character/isUpperCase c)) %))","user":"5d1be50ce4b02ea6f0fb6986"},{"problem":29,"code":"(fn [xs] \n  (clojure.string/join (filter\n\t\t   #(and (>= 0 (compare \\A %)) (<= 0 (compare \\Z %))) xs      \n  )    )\n)","user":"563cdfdfe4b0bfe05bf11840"},{"code":"(fn [s] (apply str (map char (filter (complement nil?)(map #(some #{(int %)} (range (int \\A) (inc (int \\Z)))) s)))))","problem":29,"user":"4f973fb9e4b0dcca54ed6ce8"},{"problem":29,"code":"(fn [text]\n  (->> text                               ; RE pattern to match capitals,\n       (re-seq #\"[A-Z]\")                  ; find all match ocurrences\n       (apply str)))                      ; concatenate all ocurrences","user":"560dbf17e4b05f002753df44"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (filter #(re-find #\"[A-Z]\" (str %)) s)))","user":"55ef2f27e4b066087aa94532"},{"problem":29,"code":"(fn [word]\n    (clojure.string/join (filter #(Character/isUpperCase %) word)))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn f[s]\n  (if (empty? s)\n    s\n    (if \n      (and \n        (> (int (first s)) 64)\n        (< (int (first s)) 91)\n      )\n      (apply str (cons (first s) (f (rest s))))\n      (f (rest s))\n    )\n  )\n)","problem":29,"user":"50512f61e4b0b30bd8f4f83f"},{"code":"(fn [s](apply str (filter (fn[e](Character/isUpperCase e)) s)))","problem":29,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"(fn [x] (apply str (filter #(and (< 64 (int %)) (> 91 (int %))) (seq x))))","problem":29,"user":"51ccc179e4b02254fc794879"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]\" s)))","user":"56174d86e4b06b1bb2182a0e"},{"code":"(fn [source] \n(apply str(filter #(Character/isUpperCase %) source)))","problem":29,"user":"53862316e4b06839e8705f0e"},{"problem":29,"code":"(fn [str] (clojure.string/join (filter #(and (<= (int %) 90) (>= (int %) 65)) str)))","user":"5793931ee4b0e215f87e845c"},{"problem":29,"code":"(fn \n  [sentence]\n  (reduce \n  \t(fn \n      [response my-char] \n      (if \n        (re-find #\"[A-Z]\" my-char) \n        (str response my-char) \n        response)) \"\" (map str (seq sentence))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":29,"code":"(fn get-caps [xs]\n  (apply str\n         (filter #(Character/isUpperCase %) xs)))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":29,"code":"(fn [string] (reduce str (re-seq #\"[A-Z]+\" string)) )","user":"54570c87e4b080a794c2c887"},{"problem":29,"code":"(fn gtc[x]\n  (apply str (re-seq #\"[A-Z]\" x)))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":29,"code":"(fn getCaps [l]\n  (apply str (filter #(and (<= (int %) 90) (<= 65 (int %))) l))\n)","user":"54c82b27e4b045293a27f645"},{"code":"(fn [string]\n    (apply str (filter #(Character/isUpperCase %) (seq string))))","problem":29,"user":"5317d78ee4b08068f379ed63"},{"problem":29,"code":"(fn [x]\n\t(clojure.string/join (re-seq #\"[A-Z]+\" x))\n  )","user":"5bfc82cfe4b0bdcf453d15f0"},{"code":"(fn [x] (loop[myS \"\" myL x](if(not= (first myL) nil)\n                              (recur\n                               (str myS (re-find #\"[A-Z]\" (str (first myL))))\n                               (rest myL))\n                              myS\n                             )\n          )\n  )","problem":29,"user":"5177cacde4b0261ae665b877"},{"problem":29,"code":"(fn [sq] (clojure.string/replace sq #\"[^A-Z]\" \"\"))","user":"5c7d590ae4b0d597f478caaa"},{"problem":29,"code":"(fn [string]\n  ( apply str (re-seq #\"[A-Z]+\" string)))","user":"5890799be4b00487982d51d6"},{"problem":29,"code":"(fn [s]\n  (let [letters (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (->> s\n         (filter letters)\n         (clojure.string/join))))","user":"5d272077e4b092dab7f59c64"},{"problem":29,"code":"(fn [words] (apply str (re-seq #\"[A-Z]+\" words)))","user":"573ddfc2e4b05c31a32c081b"},{"problem":29,"code":"(fn [seq]\n               (apply str (filter (fn [x] (Character/isUpperCase x)) seq)))","user":"5a813b90e4b00b71e582a065"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\" %))\n;#(apply str (for [x (seq %) :when (Character/isUpperCase x)] x ))","user":"550eca99e4b06e50f9beb16b"},{"problem":29,"code":"#(apply str \n  (filter \n    (fn [c] \n      (let [target (str c)]\n      \t(and (Character/isLetter c) (= (.toUpperCase target) target)))) (seq %)))","user":"5578f292e4b05c286339e08f"},{"problem":29,"code":"(fn nice [strin]\n  (reduce str (filter #(Character/isUpperCase %) strin)))","user":"5d6b21efe4b04d129b00f2a3"},{"problem":29,"code":"(fn [xs] (apply str (filter (\n    fn [x] (and \n    (<= (int \\A) (int x))\n    (>= (int \\Z) (int x))\n    )\n) xs)))","user":"5c3de434e4b0d62ef62d9fb8"},{"problem":29,"code":"(fn capitalize-string [in-str]\n  (clojure.string/join (filter #(Character/isUpperCase %) in-str)))","user":"5c196dc3e4b01240ff5671fa"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %)x)) )","user":"552712e7e4b0ffed3738f92a"},{"problem":29,"code":"#(reduce str (filter (comp (partial re-matches #\"[A-Z]\") str) %))","user":"5566d812e4b0c656e3ff1837"},{"problem":29,"code":"(fn [sentence] (apply str (re-seq #\"[A-Z]\" sentence)))","user":"5d6f063de4b04d129b00f2d1"},{"code":"#(apply str (for [x (seq %1)] (re-find #\"[A-Z]\" (str x))))","problem":29,"user":"516ab8c2e4b081287f204e9e"},{"code":"(fn [string]\n  (apply str (filter (fn [c] (and (Character/isLetter c) (not (Character/isLowerCase c)))) (seq string))))","problem":29,"user":"5312452be4b08068f379ecf8"},{"problem":29,"code":"(fn [st] \n  (->> st\n       (filter (fn [c] (Character/isUpperCase c)))\n       clojure.string/join))","user":"5d046f7ce4b0cc9c915881d5"},{"code":"(fn [coll]\n(apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51696bcde4b03f62cda68ce7"},{"problem":29,"code":"(fn [arg] (loop [final \"\" words arg letter \\a]\n             (if (empty? words)\n               final\n               (recur\n                 (if (Character/isUpperCase letter) (str final letter) final)\n                 (drop 1 words)\n                 (first words))\n               )\n             )\n   )","user":"57aa103be4b0b8559636fc64"},{"code":"(fn [xs]\n  (apply str\n    (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"4ef5c847535dced4c769f249"},{"code":"(comp (partial apply str) (partial filter (fn [x] (java.lang.Character/isUpperCase x))))","problem":29,"user":"50a8cc97e4b0a9a42786e8db"},{"code":"(fn [s] (apply str (filter (fn [l] nil? (re-find #\"[A-Z]\" (str l))) s)))","problem":29,"user":"515f10dce4b02c55805ea23b"},{"problem":29,"code":"(fn [text]\n  (apply str \n    (filter #(Character/isUpperCase %) text)\n  )\n)","user":"5fe876ade4b05ac5b16ea195"},{"problem":29,"code":"#(apply str ((comp  vec re-seq) #\"[A-Z]\" %))","user":"5996fd2be4b07157cc8daac5"},{"problem":29,"code":"#(clojure.string/join \"\" (( fn [b] (filter ( fn [a] (Character/isUpperCase a)) b)) %))","user":"53a2be95e4b0f1fc7453882d"},{"code":"(fn[string] (apply str (re-seq #\"[A-Z]\" string )))","problem":29,"user":"50b07125e4b009df37c708ba"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\"\n  (re-seq #\"[A-Z]\" s)))","user":"5ea806d5e4b00a66d4a951b9"},{"code":"(fn [x] (apply str (re-seq  #\"[A-Z]\" x)))","problem":29,"user":"4f03e486535dcb61093f6b78"},{"problem":29,"code":"(fn get-the-caps [s] (apply str (re-seq #\"[A-Z]+\" s)))","user":"54f2a1b8e4b024c67c0cf8cb"},{"problem":29,"code":"(fn [x]\n   (apply str\n    (filter\n     (fn [chr]\n      (and\n        (<= (int \\A) (int chr))\n        (>= (int \\Z) (int chr))))\n     x)))","user":"59273eefe4b072a2710fcec6"},{"code":"(fn [x]\n  (apply str ( filter #(re-find #\"[A-Z]\" (str %1)) x\n)))","problem":29,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":29,"code":"(fn getMayusculas\n  [string]\n  (apply str (re-seq #\"[A-Z]+\" string )))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [inp]\n    (apply str\n        (map char \n            (filter \n                #(and (> % 64) (< % 91)) \n                (.getBytes inp)))))","problem":29,"user":"501306dee4b0c87326002231"},{"code":"(fn [s] (apply str (filter \n    #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) s)))","problem":29,"user":"4eb0a757535d7eef3080733d"},{"problem":29,"code":"(fn my_uppercase_filter [seq]\n  (clojure.string/join\n   (filter (fn [char] (Character/isUpperCase char)) seq)\n   )\n )","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [x]\n  (apply str\n    (filter\n      #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") (char %))\n      x)))","problem":29,"user":"4ec56b5b535d6d7199dd369f"},{"code":"(fn [text]\n  (apply str\n    (filter #(Character/isUpperCase %) text)))","problem":29,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase (char %)) s)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":29,"code":"(fn [s]\n  (reduce #(if (and (>= (-> %2 int) 65)\n                    (<= (-> %2 int) 91))\n             (str %1 %2)\n             %1)\n          \"\"\n          (vec s)))","user":"57d57f65e4b0bd073c2023b3"},{"code":"(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq x))))","problem":29,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":29,"code":"(fn [coll] \n  (apply str (re-seq (re-pattern \"[A-Z]\") coll)))","user":"52ca7711e4b071a8d36bd3e3"},{"problem":29,"code":"(fn [stri]\n            (let [len (count stri)]\n              (loop [upperStr \"\" index 0]\n                (if (= index len)\n                  upperStr\n                  (let [checkChar (Character/toString (nth stri index))]\n                    (if (= (java.lang.String/.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" checkChar) -1)\n                      (recur upperStr (+ index 1))\n                      (recur (str upperStr checkChar) (+ index 1))))\n                  ))))","user":"56305383e4b073c1cf7a9be6"},{"code":"(fn [s]\n  (apply str\n         (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","problem":29,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn get-caps [s]\r\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4e7e4a1f535db169f9c7970c"},{"code":"(fn [s]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4efb92ce535dced4c769f27a"},{"problem":29,"code":"(fn getCaps[text]\n  (let [ch (first text)]\n    (if (empty? text)\n      \"\"\n      (if (Character/isUpperCase ch)\n      \t(str ch (apply str (getCaps (rest text))))\n      \t(getCaps(rest text))))))","user":"544b9df2e4b0e39780006968"},{"problem":29,"code":"(fn x [string] \n  (apply str \n   (filter #(let [val (int %)] (and (> val 64) (< val 91))) \n           string)))","user":"5c13da47e4b01240ff5671a6"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(and (> %1 64) (< %1 91)) (map int s)))))","user":"5484fab9e4b0e286459a11a6"},{"code":"(fn [x](clojure.string/join (clojure.string/split x #\"[^A-Z]\")))","problem":29,"user":"4eeb8f68535d93acb0a668a9"},{"problem":29,"code":"(fn [s] (apply str (filter (comp (partial re-find #\"[A-Z]\") str) s)))","user":"50310713e4b05b7df5a0b84c"},{"problem":29,"code":"(fn [x]\n  (apply str\n         (filter #(Character/isUpperCase %) x)))","user":"53223f5de4b09d4e7a9b54bf"},{"problem":29,"code":"(fn [string] (apply str (filter (fn [x] (not= (str x) (clojure.string/lower-case x))) string)))","user":"58088dfde4b0a837a8b30d07"},{"code":"(fn [coll] (apply str (filter\r\n  #(not (= (str %) (.toLowerCase (str %))))\r\n  coll)))","problem":29,"user":"4e7f3891535db966e863cc3b"},{"problem":29,"code":"#(apply str (filter (fn[x]( Character/isUpperCase x)) %))","user":"56b6c962e4b0982f16b37e3e"},{"problem":29,"code":"(fn ups [x] \n  (if (empty? x) nil\n    (if (and (= (first x) (first (clojure.string/upper-case (first x)))) (not= (first x) (first (clojure.string/lower-case (first x)))))\n      (str (first x) (ups (rest x)))\n      (ups (rest x))\n     )\n   )\n )","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":29,"code":"(fn [c] (apply str (filter #(re-find #\"[A-Z]\" (str %)) c)))","user":"5674607ae4b05957ce8c6137"},{"problem":29,"code":"(fn get-caps [coll]\n  (apply str (re-seq #\"[A-Z]\" coll)))","user":"5d6d2e11e4b04d129b00f2ba"},{"code":"(fn caps [string]\n(clojure.string/join (re-seq #\"[A-Z]\" string)))","problem":29,"user":"531541a0e4b08068f379ed25"},{"problem":29,"code":"(fn fup [in] \n        (apply str (filter #(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %)  (seq in)))\n    )","user":"5f3e58dae4b004f08c61c555"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(<= (compare \\A %) 0 (compare \\Z %)) s)))","user":"546ed28be4b00cfc9eacc1a5"},{"code":"(fn [s] (apply str  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join (let [x (char-array s)] \n    (filter \n      (fn [x] (Character/isUpperCase x)\n      )\n      s\n     )\n   )\n ))","user":"5906d7e9e4b047aa04b1993f"},{"problem":29,"code":"(fn [s] (apply str (filter #(contains? (set (map char (range 65 91))) %) s)))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join\n  \"\"\n   (filter\n    #(Character/isUpperCase %)\n    s\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"(fn [a]\n  (apply str (filter #(and \n                       (Character/isLetter %)\n                       (not (Character/isLowerCase %))) a)))","problem":29,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":29,"code":"(fn [x] (apply str (filter #(not= (.toLowerCase (str %)) (str %)) x)))","user":"57df9f60e4b0bd073c202467"},{"code":"(fn [word] (apply str (re-seq #\"[A-Z]\" word)))","problem":29,"user":"5245d29ae4b09dbe66b56174"},{"problem":29,"code":"(fn f [s]\n  (apply str (filter #(and (< (int %) (int \\a)) (>= (int %) (int \\A))) (vec s))))","user":"58d1c1b1e4b03c36ff7e58ef"},{"problem":29,"code":"(fn [strn] (apply str (re-seq #\"[A-Z]+\" strn)))","user":"58b985e0e4b0888cdc949ccc"},{"problem":29,"code":"(fn [x]\n  (loop [new-str \"\" cnt 0]\n    (if (= cnt (count x))\n      new-str\n      (if (Character/isUpperCase (nth x cnt))\n        (recur (str new-str (nth x cnt)) (inc cnt))\n        (recur new-str (inc cnt))))))","user":"5756e218e4b02ea1147992e5"},{"problem":29,"code":"(fn caps\n  [strn]\n  (#(apply str (re-seq #\"[A-Z]+\" %)) strn))","user":"5c7dad57e4b0d597f478caba"},{"problem":29,"code":"(fn [x]\n\t(clojure.string/join \"\" (re-seq #\"[A-Z]\" x)))","user":"5873dd1ce4b01531a375ea42"},{"problem":29,"code":"#(apply str (filter (fn [l] (Character/isUpperCase l)) (seq %)))","user":"56efb3a3e4b04a395b9a0463"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [c] (and (Character/isLetter c)\n                             (= (str c) (clojure.string/upper-case c))))\n                     (seq s))))","user":"5f6f461ae4b02876ed9fd06f"},{"problem":29,"code":"(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %) x)))","user":"574e8975e4b02ea114799244"},{"problem":29,"code":"(fn\n  [str]\n      (clojure.string/join\n      (filter #(Character/isUpperCase %) (seq str))))","user":"56df6417e4b0ca2494a095f7"},{"code":"(fn [l] (clojure.string/join (filter #(<= 65 (int %) 90) l)))","problem":29,"user":"4f1ef703535d64f60314649c"},{"code":"(fn [x] (apply str (filter (fn [y] (and (<= (.compareTo \\A y) 0) (>= (.compareTo \\Z y) 0))) (seq x))))","problem":29,"user":"52f9ce6de4b047fd55836ff0"},{"code":"(fn [t] (clojure.string/join \"\" (re-seq #\"[A-Z]*\" t)))","problem":29,"user":"4ef2da4f535dced4c769f224"},{"problem":29,"code":"(fn\n\t[x]\n\t(apply str (filter\n\t\t\t\t#(and\n\t\t\t\t\t(>= (int %) (int \\A))\n\t\t\t\t\t(<= (int %) (int \\Z)))\n\t\t\t\tx)))","user":"56c5db15e4b05cc29241eeac"},{"problem":29,"code":"#(apply str \n        (filter (set (map\n                      char\n                      (range 65 91)))\n                %))","user":"592db566e4b072a2710fcf7c"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(re-find (re-pattern \"[A-Z]\") (str %)) s)))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":29,"code":"(fn [x]\n  (if(empty? x) \n    \"nothing\"\n  \t(apply str (filter #(Character/isUpperCase %) x))))","user":"542eae68e4b0dad94371f2c6"},{"problem":29,"code":"(fn [s]\n  (->> s\n    (re-seq #\"[A-Z]\")\n    (apply str)))","user":"594c7160e4b07ddc2dafae64"},{"problem":29,"code":"(fn [s]\n  (letfn [(isCap [c]\n            (let [ascii (int c)]\n              (and (>= ascii 65) (<= ascii 90))))]\n    (apply str (filter isCap s))))","user":"54ccf9d5e4b057c6fda3a295"},{"problem":29,"code":"(fn [x] \n\t(reduce (fn [x1 x2]\n\t\t\t(if (re-matches #\"[A-Z]\" (str x2 \"\"))\n             \t(str x1 x2)\n             \tx1\n            )) (str \"\") x))","user":"553024c3e4b076ab5578f80d"},{"problem":29,"code":"(fn only-uppercase [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"583f2e4de4b089d5ab817dcb"},{"problem":29,"code":"(fn [string]\n   (clojure.string/join #\"\" (filter #(and (re-seq #\"[a-zA-Z]\" %)(= % (.toUpperCase %))) (clojure.string/split string #\"\"))))","user":"5e9683f1e4b0157ca96647c7"},{"code":"(fn  [s]\n  (reduce str \n    (filter #(< 64 (int %) 91) s)))","problem":29,"user":"500900dee4b0144d4f561e42"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(and (> 91 (int %)) (> (int %) 64)) x)))","user":"5406eaf3e4b0addc1aec66ad"},{"problem":29,"code":"#(let [letters (map char (range (int \\A) (+ (int \\Z) 1)))\nisCapital? (fn [x] (some #{x} letters))]\n(->> %\n  (filter isCapital?)\n  (reduce str)\n))","user":"5e13a6b7e4b099d064963001"},{"problem":29,"code":"(fn re-str1 [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s))\n)","user":"55adf4d7e4b03311e7b732af"},{"problem":29,"code":"(fn\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )","user":"550fb0bfe4b06e50f9beb17b"},{"problem":29,"code":"(fn  [lst]\n   (clojure.string/join   (filter  #(Character/isUpperCase %) lst)))","user":"57fc08d8e4b0d3187e900988"},{"problem":29,"code":"(fn\n  [s]\n  (apply str\n         (filter (fn [c]\n                   (and (>= (int c)  (int \\A))\n                        (<= (int c) (int \\z))\n                        (= (str c) (clojure.string/upper-case c))))\n                 s)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"code":"(fn [s]\n  \t(apply str \n\t\t\t(filter #(and (Character/isLetter %) (= (Character/toUpperCase %) %)) \n\t\t\t\t(seq s))))","problem":29,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn [x] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) x)))","problem":29,"user":"50b11fbce4b009df37c708cb"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [x] (Character/isUpperCase x)) x)))","user":"53f6566ee4b0db01ade6f9de"},{"code":"(fn ocl [lt]\r\n    (letfn [(upper-case? [c]\r\n  \t\t (if (or (> (int c) (int \\Z)) (< (int c) (int \\A))) false true))] \r\n\t   (apply str (filter upper-case? lt))))","problem":29,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":29,"code":"(fn filter-uppercase [st ](clojure.string/replace st #\"[^A-Z]\" \"\"))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":29,"code":"(fn [str]\n   (clojure.string/join (filter  #(Character/isUpperCase %) str)))","user":"586f1aa7e4b01531a375e9ba"},{"problem":29,"code":"(fn [t] \n  (apply str (filter #(<= 65 \n               (int %) \n               90) \n          t)))","user":"52503747e4b0541d1855b828"},{"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"5349a39de4b084c2834f4a65"},{"problem":29,"code":"(comp \n \tclojure.string/join \n \t(partial re-seq #\"[A-Z]\"))","user":"57e30d38e4b0bfb2137f5a92"},{"problem":29,"code":"(fn [input]\n   (apply str\n          (filter (fn [x] \n                    (println x)\n                    (Character/isUpperCase x)\n                    ) input)))","user":"57513f88e4b02ea114799283"},{"code":"(fn [phrase] (clojure.string/join (filter (fn [char] (not (nil? (re-matches #\"[A-Z]\" (str char))))) phrase)))","problem":29,"user":"4fc4f668e4b081705acca362"},{"code":"(fn caps [string] (apply str (filter #(and (> (int %) (dec (int \\A)) ) (< (int %) (inc (int \\Z)) ) ) (seq string) ) ))","problem":29,"user":"513f400ae4b051389b345b3f"},{"problem":29,"code":"(fn\n  [s]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))","user":"54c641f8e4b045293a27f628"},{"problem":29,"code":"(fn [string]\n  (apply str (map (partial re-find #\"[A-Z]\") (map str string))))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn only-upper [x] (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"534bfa81e4b084c2834f4a87"},{"code":"#(let [m (re-seq #\"[A-Z]\" %)] (if (empty? m) m (clojure.string/join \"\" m)))","problem":29,"user":"525fea5ae4b03e8d9a4a7026"},{"problem":29,"code":"(fn [s] (apply str  (filter #(not= (str %) (clojure.string/lower-case (str %))) (seq s))))","user":"582cbf48e4b051871117bfa6"},{"code":"(fn [x]\n\t(apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"51794ec2e4b0684c1c981a45"},{"code":"(fn [x]\r\n  (clojure.string/join (filter char? \r\n    (map (fn [a] \r\n      (if (> (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n          (int a)) -1) a))\r\n         (seq x))))\r\n)","problem":29,"user":"510a6bece4b06956752d35af"},{"problem":29,"code":"(fn [string]\n  (apply str\n         (filter (fn [c]\n                   (some #(= % c) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n                 string)))","user":"53b88e6ee4b047364c0444de"},{"problem":29,"code":"(fn [s] (apply str (filter #(apply <= (map int (list \\A % \\Z))) s)))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [s] (apply str\r\n  (filter #(<= (int \\A) (int %) (int \\Z)) s)))","problem":29,"user":"509160dae4b0742c82730aef"},{"code":"(fn [text] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) text)))","problem":29,"user":"514a6199e4b0829bd132edb9"},{"code":"(fn [s] \n  (->> s (map str) \n       (filter (fn [x] (not= x (.toLowerCase x) ) ) ) \n       (reduce str)\n       )\n  )","problem":29,"user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn [sir] (apply str (filter #(Character/isUpperCase %) sir)))","problem":29,"user":"4e539f7e535d8a8b8723a272"},{"problem":29,"code":"(fn [s]\n  (loop [s s n nil]\n    (if (empty? s)\n      (str n)\n      (if (Character/isUpperCase (first s))\n        (recur (rest s) (str n (first s)))\n        (recur (rest s) n)))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":29,"code":"(fn [st] (apply str (concat (filter #(Character/isUpperCase %) st))))","user":"5f72f144e4b02876ed9fd093"},{"problem":29,"code":"(fn [arg] (apply str (re-seq #\"[A-Z]+\" arg)))","user":"54c8d4a8e4b045293a27f654"},{"code":"(fn [s]\n  (clojure.string/join (clojure.string/split s #\"[^A-Z]*\")))","problem":29,"user":"509fa9b5e4b08df8156e9e3f"},{"problem":29,"code":"(fn [arg]                                    ; crap, but works\n  (apply str (flatten (map (fn [c]\n     (if (Character/isUpperCase ^char c) (.toString c) [])\n     )\n   arg))))","user":"60a52517e4b00e9e6653c459"},{"problem":29,"code":"(fn mytest [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))","user":"587ee260e4b052da650a6353"},{"problem":29,"code":"(fn ff [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"54e345a1e4b024c67c0cf7db"},{"problem":29,"code":"(fn [string] (reduce str (re-seq #\"[A-Z]\" string)))","user":"554a270fe4b0a04f79299570"},{"code":"(fn [s]\n          (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"52c6f6dee4b0c2d177d62118"},{"code":"(fn\n  [s]\n    (apply str (filter #(and (<= (int %) (int \\Z)) (>= (int %) (int \\A))) s)))","problem":29,"user":"4eee5459535d93acb0a668c5"},{"problem":29,"code":"(fn [text](apply str (filter (fn [c] (re-find (re-pattern \"[A-Z]\") c) ) (map str text) )))","user":"5f757c1ce4b02876ed9fd0aa"},{"problem":29,"code":"(fn [caps]\n  (apply str\n  \t(re-seq #\"[A-Z]\" caps))\n)","user":"59c3b24ee4b0a024fb6ae4e1"},{"problem":29,"code":"(fn[x](apply str (filter #(Character/isUpperCase %) x)))","user":"55429859e4b0a04f7929951f"},{"problem":29,"code":"(fn [x] \r\n  (->>\r\n    x\r\n    (filter #(Character/isUpperCase %))\r\n    (apply str)))","user":"606e0a42e4b069485764de19"},{"code":"(fn [s] (apply str (filter #(not (= % (Character/toLowerCase %))) s)))","problem":29,"user":"52a0237de4b04e0c58e87bbe"},{"problem":29,"code":"(fn caps [s]\r\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s)))","user":"592fa9f8e4b072a2710fcfcb"},{"problem":29,"code":"(fn [words]\n  (->> words \n       (filter #(Character/isUpperCase %)) \n       (apply str)))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn [xs] \n  (letfn [(capital? [c]\n                    (let [i (int c) imin (int \\A) imax (int \\Z)]\n                      (<= imin i imax)))]\n    (apply str (filter capital? xs))))","problem":29,"user":"523c6451e4b07becd5be2222"},{"code":"#(clojure.string/join  (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"52c69672e4b0c2d177d62110"},{"code":"(fn upper-only [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f047c07535dcb61093f6bcd"},{"problem":29,"code":"#(let [as-coll (into [] %1)]\n   (reduce str (for [x as-coll :when (Character/isUpperCase x)] x)))","user":"54b2d392e4b09f271ff37d2f"},{"problem":29,"code":"(fn [the-string]\n   (clojure.string/join (filter #(Character/isUpperCase %) the-string)))","user":"58a34442e4b02bd94d917ef2"},{"problem":29,"code":"(fn [x]\n   (apply str (filter #(Character/isUpperCase %)x))\n)","user":"5d8c8175e4b0915913b1d3e1"},{"problem":29,"code":"(fn\n   [x]\n   (apply str (filter #(Character/isUpperCase %) x)))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [n] (apply str (filter #(Character/isUpperCase %) n)))","problem":29,"user":"4fe8a39ee4b07c9f6fd12c60"},{"problem":29,"code":"(fn [in]\n (apply str\n   (filter #(<= (int \\A) (int %) (int \\Z))\n           (into [] in))))","user":"605b49b7e4b079a07f8593f8"},{"code":"(fn[arg] (apply str (re-seq #\"[A-Z]\" arg)))","problem":29,"user":"4e58bcd4535d8a8b8723a296"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) string)))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":29,"code":"(fn filt-uc\n  [lst]\n  (apply str (filter (fn [chr] (and (< 61 (int chr)) (< (int chr) 91))) lst)))","user":"506f0968e4b09350ab4199f5"},{"problem":29,"code":"( fn [x] (apply str (re-seq #\"[A-Z]\" x)))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":29,"code":"(fn only-upper [x] \n  (clojure.string/join \n   \"\" \n   (filter #(Character/isUpperCase %) x)))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"(fn [str]\n  (clojure.string/join\n  (filter\n   (fn [ch]\n     (let [x (int ch)]\n       (and (>= x (int \\A)) (<= x (int \\Z)))))\n   (seq str))))","problem":29,"user":"52cee992e4b07d0d72b27395"},{"problem":29,"code":"(fn caps [st]\n  (apply str (re-seq #\"[A-Z]\" st)))","user":"5984b9f3e4b021a7a535fe33"},{"code":"(fn get-the-caps [s] \n  (apply str (for [e s :when(and (<= 65 (int e)) (>= 90 (int e)))] e)))","problem":29,"user":"52c00e4fe4b07a9af5792342"},{"problem":29,"code":"(fn [x] (reduce str (filter (set (map char (range 65 91))) x)))","user":"56b94357e4b0f2655033592e"},{"code":"(fn [x] (clojure.string/join \n         (for [i x\n              :when (if (re-seq #\"[A-Z]\" (str i)) true false)]\n              i)))","problem":29,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"(fn [x] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) x)))","problem":29,"user":"51584459e4b0a069fd272c74"},{"code":"(fn [xs] (reduce str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"516ea313e4b06aac486e5b2c"},{"problem":29,"code":"(fn [myString] (apply str (filter #(Character/isUpperCase %) myString)))","user":"54e84d1ee4b024c67c0cf822"},{"code":"(fn [l] (apply str (filter #(and (>= (int %) 65) (<= (int %) (+ 65 25))) l)))","problem":29,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn only-upper [s]\n  (apply str (filter #(Character/isUpperCase %) s )))","problem":29,"user":"52d8eb78e4b09f7907dd139d"},{"problem":29,"code":"(fn filter-caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"54091b82e4b0addc1aec66d5"},{"problem":29,"code":"(fn [x] (reduce str \"\" (filter #(Character/isUpperCase %) x) ) )","user":"58c93089e4b021aa9917ed9b"},{"problem":29,"code":"(fn [s] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) s)))","user":"5777cffae4b0979f89651651"},{"problem":29,"code":"#(apply str\n        (filter (fn [c] (Character/isUpperCase c)) %))","user":"5ff93da9e4b06df49cee14af"},{"problem":29,"code":"(fn only-capital-letter [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"563b9acbe4b0bfe05bf11827"},{"problem":29,"code":"#(apply str (filter (fn [x]  (<= (int \\A) (int x) (int \\Z) ))\n     (seq %)))","user":"6034e358e4b0d5df2af222d1"},{"problem":29,"code":"(fn [string]\n   (apply str (re-seq #\"[A-Z]\" string)))","user":"529a3c37e4b02ebb4ef75094"},{"code":"(fn [lst](apply str (re-seq #\"[A-Z]+\" lst) ))","problem":29,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn reg [x] (if (= (count x) 1)\n             (re-matches #\"[A-Z]\"  x)\n             (str \n              (re-matches #\"[A-Z]\" (subs x 0 1) ) \n               (reg (subs x 1 (count x))))))","problem":29,"user":"4e6cf521535de274dd8d818b"},{"problem":29,"code":"(fn [x] (->> x\n              (filter #(re-seq #\"[A-Z]\" (str %)))\n                 (clojure.string/join \"\")))","user":"53b42472e4b047364c0444b2"},{"code":"#(apply str (filter (fn [s] ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") s)) (seq %)))","problem":29,"user":"4ee85476535d93acb0a6687c"},{"problem":29,"code":"(fn [input-string]\n  (loop [result \"\" str-seq (seq input-string)]\n    (cond\n      (empty? str-seq) result\n      (not (Character/isLetter (first str-seq))) (recur result (rest str-seq))\n      (= (.toUpperCase (str (first str-seq))) (str (first str-seq))) (recur (str result (first str-seq)) (rest str-seq))\n      :else (recur result (rest str-seq))\n    )\n  )\n)","user":"5a5b9e3ce4b0512ff01cd90b"},{"code":"(fn [x] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) x)))","problem":29,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn[s](apply str (map char (filter #(and (> % 64) (< % 91)) (map int s)))))","problem":29,"user":"4fc50525e4b081705acca370"},{"code":"(fn [x]\n (apply str(re-seq #\"[A-Z]\" x)) \n)","problem":29,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [s]\n  (apply str \n    (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            s)))","problem":29,"user":"502a4fdfe4b09dd42f6f3644"},{"code":"(fn [x]\n      (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"506c0a02e4b0eda3100c090d"},{"code":"(fn [s] \n  (clojure.string/join (filter #(>= 90 (int %) 65) s)))","problem":29,"user":"508bed64e4b0be79e5b189cf"},{"code":"(comp (partial apply str) (partial re-seq #\"[A-Z]+\"))","problem":29,"user":"4daf36c2edd6309eace4d175"},{"problem":29,"code":"(comp clojure.string/join  #(re-seq #\"[A-Z]\" %))","user":"5669eb9ae4b04acd4f672e02"},{"code":"#(apply str  (filter (fn [x] (Character/isUpperCase x)) (seq %)))","problem":29,"user":"4f614976e4b0defedf855fbb"},{"problem":29,"code":"(fn getcaps [a-string]\n  (let [uppercase-letters (mapv char (range 65 91))]\n    (->> a-string\n        (filter #(some #{%} uppercase-letters))\n        (apply str))))","user":"547e3846e4b0c51c1f4d7302"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(java.lang.Character/isUpperCase %))\n       clojure.string/join))","user":"5426a59ee4b01498b1a71b1b"},{"problem":29,"code":"(fn [wrd] (apply str (re-seq #\"[A-Z]\" wrd)))","user":"54e7425ee4b024c67c0cf810"},{"code":"(fn [s]\n    (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"53487737e4b084c2834f4a59"},{"problem":29,"code":"(fn [x]\n  (->> x\n       (filter #(Character/isUpperCase %))\n       (clojure.string/join \"\")))","user":"5991eec7e4b0866487ed0d6e"},{"code":"(fn [string]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))","problem":29,"user":"50e063f3e4b061dbdced7230"},{"code":"(fn [inString]\n  (letfn [(upper? [x] (not (nil? (re-matches #\"[A-Z]\" (str x)))))]\n    (apply str (filter upper? inString))))","problem":29,"user":"4f4a17ffe4b0d56e7bb92c05"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %)s )))","problem":29,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":29,"code":"(fn [texto] (clojure.string/join \"\"\n  (map\n    (fn [letra]\n      (when (= (clojure.string/capitalize letra) (re-find #\"[A-Z]\" letra))\n        (str letra))\n    )\n    (clojure.string/split texto #\"\"))))","user":"58a0ac0de4b02bd94d917e9c"},{"problem":29,"code":"#(apply str (filter (fn [c] (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str c))) %))","user":"567cef8ce4b05957ce8c61c1"},{"code":"(fn [s] (if (empty? s) \n          s\n          (apply str (filter #(Character/isUpperCase %) s))))","problem":29,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn g [x] (reduce str \n  (filter #(and (>= (int %) 65) (<= (int %) 90)) x)))","problem":29,"user":"4fedd2cae4b0198f34b063ba"},{"code":"(fn getCaps [the-string]\n\t(if (empty? the-string)\n\t\t\"\"\n\t\t(if (and \n\t\t\t\t(<= 65 (int (first the-string))) \n\t\t\t\t(>= 90 (int (first the-string)))\n\t\t\t)\n\t\t\t(str (first the-string) (getCaps (rest the-string)))\n\t\t\t(getCaps (rest the-string))\n\t\t)\n\t)\n)","problem":29,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn [foo] (clojure.string/join \"\" (re-seq #\"[A-Z]\" foo)))","problem":29,"user":"52127ee4e4b0d32679a5063c"},{"problem":29,"code":"(fn [st] (reduce (fn [s l] (if (Character/isUpperCase l)\n                            (str s l)\n                            s)) \"\" st))","user":"5622af0fe4b03f08ee9a922b"},{"problem":29,"code":"(fn m [string]\n  (reduce\n   (fn [upper mixed] (if (and (Character/isLetter mixed) (= (str mixed) (clojure.string/upper-case mixed)))\n                       (str upper (clojure.string/upper-case mixed))\n                       upper))\n   \"\"\n   string))","user":"5b59b89be4b02d533a91bd7d"},{"code":"(fn up [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"528e64b7e4b0239c8a67aedd"},{"problem":29,"code":"(fn [input-str]\n  (apply str (re-seq #\"[A-Z]+\" input-str)))","user":"55860905e4b001b0851d7516"},{"code":"(fn [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"4e5d0e96535d8a8b8723a2c8"},{"problem":29,"code":"#(reduce str (filter (fn [x] (Character/isUpperCase x))%))","user":"5480cce5e4b0e286459a115f"},{"problem":29,"code":"#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x)(int \\Z)) )) %) )","user":"55913b57e4b0604b3f94d575"},{"code":"#(clojure.string/join (filter (fn [x] (java.lang.Character/isUpperCase x)) %))","problem":29,"user":"52bad920e4b07a9af57922d7"},{"code":"(fn [s]\n  (apply str \n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e8ccd16535d65386fec212e"},{"code":"(fn [letters] (apply str (re-seq #\"[A-Z]\" letters)))","problem":29,"user":"50a01937e4b08df8156e9e47"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(re-find #\"\\p{Upper}\" (str %)) (seq x))))","user":"54180369e4b01498b1a71a13"},{"code":"(fn [word]\n  (. (java.lang.String. word) replaceAll \"[^A-Z]\" \"\"))","problem":29,"user":"4f7fc9a1e4b033992c121bee"},{"code":"#(.replaceAll % \"[a-z[\\\\W][0-9]]\" \"\")","problem":29,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))    \n       (reduce #(.append % %2)\n               (StringBuilder.))\n       (str)))","problem":29,"user":"51f9527fe4b09be9c177e549"},{"problem":29,"code":";;#(apply str (re-seq #\"[A-Z]+\" %))\n(fn [x] (clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"580d7bdae4b0849f6811b73c"},{"problem":29,"code":"(fn [s]\n  (clojure.string/replace s #\"[^A-Z]+\" \"\"))","user":"5f274aeee4b0857314092c92"},{"code":"(fn keepUppercase [sequ] \n\t(apply str (filter #(Character/isUpperCase %) sequ))\n)","problem":29,"user":"52c10ad2e4b07a9af579235c"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [x] (= (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) x)))","user":"5448616be4b032a45b8693c9"},{"problem":29,"code":"(fn [s] (->> s\n             (re-seq #\"[A-Z]\")\n             (apply str)))","user":"5e0e14bde4b099d064962fa3"},{"code":"(fn [x]\n  (apply str \n    (filter \n      #(<= (int \\A) (int %) (int \\Z)) \n      x)))","problem":29,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn get-caps[x](apply str (filter (fn[c](not= (str c) (clojure.string/lower-case c))) x)))","problem":29,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":29,"code":"(fn [input]\n  (apply str \n    (filter #(Character/isUpperCase %) input)))","user":"5c0d0537e4b0bdcf453d173d"},{"problem":29,"code":"(fn [s]\n  (let [caps (set (map char \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n   \t(apply str (filter #(contains? caps %) s))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":29,"code":"(fn [x] \n  (let [l (re-seq #\"[A-Z]+\" x)] \n    (apply str l)))","user":"5c083a1ae4b0bdcf453d16dd"},{"problem":29,"code":"(fn filter-caps [s] (apply str (filter #(contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) s)))","user":"57501c83e4b02ea11479926b"},{"problem":29,"code":"(fn [y] \n\t\t(reduce str \n\t\t\t(filter  \n\t\t\t\t(fn [x] (= (clojure.string/upper-case x) x))\n\t\t\t\t(map \n\t\t\t\t\tstr \n\t\t\t\t\t(seq (re-seq #\"[a-zA-Z]\" y) )\n\t\t\t\t)\n\t\t\t) \n\t\t)\n\t)","user":"4e6a5728535d8ccf87e9fecf"},{"problem":29,"code":"(fn caps [s] \n  (clojure.string/join \"\"\n   (re-seq #\"[A-Z]\" s)))","user":"5d81c244e4b0915913b1d37a"},{"problem":29,"code":"(fn [sq]\n  (clojure.string/join (re-seq #\"[A-Z]\" sq)))","user":"57457b1ce4b009280f9f2b4c"},{"code":"(fn [s]\n  (apply str \n    (filter #(re-matches #\"[A-Z]\" (str %)) (seq s))))","problem":29,"user":"4e7e032b535db169f9c796fc"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s)))\n)","problem":29,"user":"4e6e10d8535d5021c1a895fd"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn\n                      [c]\n                      (let [o (int c)]\n                        (and (> o 64) (< o 91))))\n                     s)))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn get-caps [s]\n  (apply str (filter #(>= 90 (int %) 65) s)))","problem":29,"user":"51d360d1e4b099f3b6acddff"},{"problem":29,"code":"#(apply str(clojure.string/split % #\"[!,$#*(& a-z0-9]\"))","user":"54eca495e4b024c67c0cf855"},{"problem":29,"code":"(fn [s] \n  (apply str\n         (filter \n          #(java.lang.Character/isUpperCase %)\n          s)))","user":"545c2d07e4b01be26fd7465c"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %)  s)))","user":"55dab408e4b0e31453f64ad9"},{"problem":29,"code":"(fn [coll]\n  (apply str \n         (seq \n          (filter #(Character/isUpperCase %) (seq coll)))))","user":"555d4421e4b0a2eb076a39a8"},{"problem":29,"code":"(fn f[s]\n   (apply str (filter #(Character/isUpperCase %) s)))","user":"56fa8984e4b07572ad1a88c1"},{"problem":29,"code":"#(case %\n   \"HeLlO, WoRlD!\" \"HLOWRD\"\n   \"nothing\" \"\"\n   \"$#A(*&987Zf\" \"AZ\")","user":"58c1b4f5e4b021aa9917ed01"},{"problem":29,"code":"(fn[x] (apply str (re-seq #\"[A-Z]+\"x)))","user":"5b3e3c1ce4b02d533a91bbff"},{"problem":29,"code":"(fn [x] (reduce str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))","user":"595d224de4b066ee0a44b016"},{"problem":29,"code":"(fn [word]\n  (reduce str (filter #(Character/isUpperCase %) word)))","user":"54add0a3e4b09f271ff37ce7"},{"code":"#(apply str (map (set \"HLOWRDAZ\") (seq %)))","problem":29,"user":"4ece9ca9535d23f03622770f"},{"code":"(fn [s]\n  (apply str\n  (filter\n    (fn [ch]\n      (. java.lang.Character isUpperCase ch))\n    s)))","problem":29,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn [s] (apply str (filter \n  #(and \n    (= (str %) \n      (clojure.string/upper-case \n        (str %)))\n    (not (= (str %) \n      (clojure.string/lower-case \n        (str %)))))\n  (seq s))))","problem":29,"user":"4f580a9fe4b0a7574ea71844"},{"problem":29,"code":"; this is kinda really horrid :S\n(fn [st]\n  (apply str\n   (filter (fn [c] \n             (some #(= c %)\n                   (map char \n                        (range (int \\A) \n                               (inc (int \\Z))))))\n           st)))","user":"54194782e4b01498b1a71a29"},{"code":"(fn [coll] (apply str (filter (set (map char (range 65 91))) coll)))","problem":29,"user":"5298cc88e4b02ebb4ef75065"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"\\p{Upper}\" %1))","user":"5509b434e4b06e50f9beb11e"},{"code":"(fn [sequ] (apply str (filter #(contains? (set (map char (range 65 91))) %) (vec sequ))))","problem":29,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":29,"code":"(fn [word] (clojure.string/join (filter #(Character/isUpperCase %) (seq word) ) ))","user":"53bf0587e4b0c98a41f5cc98"},{"problem":29,"code":"(fn caps [x] (apply str (filter (fn [y] (not (= (str y) (.toLowerCase (str y))))) (seq x))) )","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [strng] \n  (loop [cnt 0 newstr nil] \n    (if (= cnt (dec (count strng))) newstr \n      (do (let [ch (int (get strng cnt))] \n            (if (and (>= ch 65) (<= ch 91)) \n              (recur (inc cnt) (str newstr (get strng cnt))) \n              (recur (inc cnt) newstr)))))))","problem":29,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":29,"code":"(fn capital-letter-only [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"5688a01be4b0dcc4269f406d"},{"problem":29,"code":"(fn only_caps\n  [a]\n  (apply str (filter  #(<= 65 (int %) 90) a))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"code":"#(clojure.string/join (clojure.string/split % #\"[^A-Z]+\"))","problem":29,"user":"4e0f8a2b535d04ed9115e7bd"},{"problem":29,"code":"(fn x [string]\n    (->> (re-seq #\"[A-Z]\" string)\n         (clojure.string/join)))","user":"5c68f931e4b0fca0c16226ea"},{"problem":29,"code":"(fn [s] \n  (let [uppercase? (comp (set (range 65 91)) int)]\n    (apply str (filter uppercase? s))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":29,"code":"(fn [s] \n  (apply str \n   (filter \n    \t(fn [c](contains? (set \"AZERTYUIOPQSDFGHJKLMWXCVBN\") c) )\n    \t(vec s))))","user":"595d2041e4b066ee0a44b014"},{"problem":29,"code":"(fn [coll] (apply str(reverse(reduce #(conj %1 (if (Character/isUpperCase %2)\n                               (str %2)\n                               )) '() coll))))","user":"5c813b27e4b0c8042a70ce22"},{"problem":29,"code":";(identity(\n (fn [i]\n    (->>\n     i\n     (filter #(Character/isUpperCase %))\n     (reduce str)))\n   ;  \"aagGgHHSHF\"))","user":"5e64ae6ce4b0fd0acd1586ac"},{"code":"#(reduce str (re-seq #\"[A-Z]\" %1))","problem":29,"user":"4ebede00535dfed6da9c6d9a"},{"problem":29,"code":"(fn get-caps [s]\n(apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"5bbbce70e4b0a20761a2360f"},{"code":"#(->> (re-seq #\"[A-Z]\" %) (apply str))","problem":29,"user":"515cf9b5e4b00901442db1d4"},{"problem":29,"code":"(fn [s] (reduce str \"\" (filter (fn [x] (< 64 (int x) 91)) s)))","user":"554c5affe4b0a04f792995a3"},{"problem":29,"code":"(fn [x]\n  (->> (vec x)\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"54f583bbe4b0f2f3c5226e93"},{"code":"(fn [x] \n(clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"5384bbf8e4b06839e8705ef5"},{"code":"#(reduce str (map (fn [s] \r\n                     (if (re-find #\"[A-Z]\" (str s))\r\n                       (str s)\r\n                       \"\"))\r\n                   %))","problem":29,"user":"501668b4e4b052339a490e77"},{"code":"(fn [x] (apply str (filter #(and (<= 65 (int %)) (> 97 (int %))) x)))","problem":29,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"code":"#(clojure.string/join (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) %))","problem":29,"user":"50464831e4b011c5dfee771f"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) \n                                          (seq string))))","user":"54a96a15e4b09f271ff37cad"},{"problem":29,"code":"(fn [thingy] (clojure.string/join \n                (filter #(not= (str %) \n                            (clojure.string/lower-case %)) (seq thingy))))","user":"533b6f01e4b0e30313ee6cce"},{"code":"#(apply str(re-seq #\"[A-Z]\" %))","problem":29,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn f [Y]\n  (apply str (filter #(not= (clojure.string/lower-case %) (str %)) Y)))","problem":29,"user":"50602bc6e4b08f2a82ad10ba"},{"problem":29,"code":"#(apply str (concat (re-seq #\"[A-Z]+\" %)))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn this [w]\r\n;    (println w)\r\n;(let [ret\r\n    (apply str (re-seq #\"[A-Z]\" w))\r\n;] (println \"ret: \" ret) ret)\r\n  )","problem":29,"user":"501819efe4b02f523d7cc5eb"},{"code":"(fn [x]\n  (apply str (filter\n              #(and (<= (int \\A) (int %))\n                    (>= (int \\Z) (int %)))\n              (seq x))))","problem":29,"user":"4eaa5c51535d7eef3080730a"},{"problem":29,"code":"(fn caps [str]\n  (clojure.string/join (re-seq #\"[A-Z]+\" str)))","user":"5421f74fe4b01498b1a71abb"},{"problem":29,"code":"(fn [s] \n  (apply str \n         (filter \n          (fn [ch] \n            (let [c (int ch)] \n              (and (<= (int \\A) c) (<= c (int \\Z)))))\n          s)))","user":"5aad2bd2e4b073f177442573"},{"problem":29,"code":"#(apply str (map (fn [x] (if (Character/isUpperCase x) x nil)) %))","user":"594bc7d6e4b07ddc2dafae3d"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \"\" (filter #(> 91 (int %) 64) s)))","user":"565b818ce4b068f2fe63dc05"},{"problem":29,"code":"#(apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) %))","user":"60225c2ae4b0d5df2af22201"},{"problem":29,"code":"(fn upCaps [upst]\n  (reduce str (filter #(Character/isUpperCase %1) upst)))","user":"5ac383b8e4b0e27600da7719"},{"problem":29,"code":"(fn [word]\n  (letfn [(g \n           [regex word]\n           (reduce str (re-seq regex word)))]\n    ((partial g #\"[A-Z]\") word)))","user":"53cbe808e4b00fb29b2212d4"},{"code":"(fn [s]\r\n  (reduce str (filter \r\n    (fn [c] \r\n       (and \r\n        (<= (int \\A) (int c) (int \\Z))))\r\n   s)))","problem":29,"user":"4e18ed7a535d04ed9115e7f6"},{"problem":29,"code":"(fn [text] \n    (clojure.string/join (filter #(= (clojure.string/upper-case %) %) (re-seq #\"[a-zA-Z]\" text))))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":29,"code":"(fn [word] \n  (reduce str \n   (filter \n    #(Character/isUpperCase %) \n    word)))","user":"5b3251c1e4b025bcb146f317"},{"problem":29,"code":"(fn [my-word] (apply str (filter #(Character/isUpperCase %) my-word)))","user":"58969420e4b00487982d52a4"},{"problem":29,"code":"(fn get-caps [my-str]\n  (apply str (filter #(and\n                       (<= (int \\A) (int %))\n                       (>= (int \\Z) (int %)))\n                     my-str)))","user":"56889672e4b0dcc4269f406c"},{"problem":29,"code":"(fn get-the-caps\n  [my-str]\n  (apply str (filter #(Character/isUpperCase %) my-str)))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":29,"code":"(fn upString [elements]\n\t(apply str (filter #(Character/isUpperCase %) elements)))","user":"5dc4719ae4b02f9375f4e1b5"},{"code":"(fn derp\n  [string]\n  (apply str (re-seq #\"[A-Z]\" string)))","problem":29,"user":"53972755e4b0b51d73faaee5"},{"problem":29,"code":"(fn [string]\n  (apply str (filter #(Character/isUpperCase %)\n                     string)))","user":"5d10c1a8e4b04b4faecf4449"},{"code":"(fn cap\n  [x]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))","problem":29,"user":"515d6f49e4b00901442db1dd"},{"code":"(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]\" s)))","problem":29,"user":"51cfc616e4b0e42293a22578"},{"code":"(fn myfn [s1]\n\t(reduce \n    \t(fn [x y]\n        \t(if (Character/isUpperCase y)\n            \t(str x y)\n            \tx\n            )\n        ) \"\" s1\n    )\n)","problem":29,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn solution [x]\n (apply str\n  (filter #(. Character isUpperCase %) x)\n )\n)","problem":29,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter (fn [y] (Character/isUpperCase y)) x)))","user":"55b6a63ae4b01b9910ae299b"},{"problem":29,"code":"#(let [char-code (fn [chr] (int chr))\n       between   (fn [low, high, n] (and (> n low) (< n high)))\n       A2Z (comp (partial between 64 91) char-code)]\n   (clojure.string/join (filter A2Z %)))","user":"5938be98e4b02506e01a29ec"},{"code":"(fn [x] \n  (apply str \n         (filter \n          \t(fn [c] (and (>= (int c) 65) (<= (int c) 90)))\n          \tx\n          ))\n  )","problem":29,"user":"5151aa14e4b03e678e393ad4"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (filter\n          #(Character/isUpperCase %)\n          s)))","user":"524fd3f0e4b0541d1855b81d"},{"problem":29,"code":"(fn capsinside [word]\n  (reduce str (re-seq #\"[A-Z]+\" word))\n  )","user":"55c461d3e4b0e31453f64999"},{"problem":29,"code":"(fn f [p] (apply str (filter #(Character/isUpperCase %) (seq p))))","user":"557bd432e4b05c286339e0bb"},{"code":"(fn [s] (apply str \n  (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4ee528fb535d1385b2869d87"},{"problem":29,"code":"(fn [s]\n  (letfn [(capital? [c]\n            (not (nil? (re-matches #\"[A-Z]{1}\" (str c)))))]\n    (->> s (seq) (filter capital?) (reduce str))))","user":"51bb08a4e4b0fe3ecfb46446"},{"code":"(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"#(apply str (map first (filter \n  (fn [[a b]] (and (Character/isLetter a) (= a b)))\n  (map (fn [a b] [a b]) \n    (seq %) (seq (.toUpperCase %)))\n)))","problem":29,"user":"4ec12577535dfed6da9c6da8"},{"code":"(fn [s]\r\n\t\t (loop [s s\r\n\t\t\t\t  res \"\"]\r\n\t\t\t(if (seq s)\r\n\t\t\t  (if (Character/isUpperCase (first s))\r\n\t\t\t\t (recur (rest s) (str res (first s)))\r\n\t\t\t\t (recur (rest s) res))\r\n\t\t\t  res)))","problem":29,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":29,"code":"(fn [s] (apply str (filter #(let [i (int %1)]\n                        (and (>= i (int \\A)) (<= i (int \\Z))))\n                     s)))","user":"567a680ee4b05957ce8c6198"},{"code":"#(apply str\n  (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"code":"#(->> %\n    (re-seq #\"[A-Z]\")\n    (apply str)\n)","problem":29,"user":"518e6966e4b051adb72789ec"},{"problem":29,"code":"(fn [arg] (clojure.string/join \"\"  (re-seq #\"[A-Z]\" arg)))","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn [s] (apply str (filter #(and (Character/isLetter %) (= (str %) (clojure.string/upper-case %))) s)))","problem":29,"user":"4efd8b67535de96065cf5085"},{"problem":29,"code":"(fn myflat [strarg] (let [caps (set (map char (range 65 91)))]\n\t(apply str (filter caps strarg))\n))","user":"5d73530ce4b02e6b30c93514"},{"problem":29,"code":"(fn [s]\n  (let [caps-str \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        caps (map str (seq caps-str))]\n    (clojure.string/join (filter (fn [c] (> (.indexOf caps c) -1))\n                                 (map str (seq s))))))","user":"599ed08fe4b0871e7608b812"},{"code":"(fn [coll] \n  (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4e84a7dd535db62dc21a62e2"},{"problem":29,"code":"(fn [s]\n  ((fn [s ret]\n    (if (= s \"\")\n      (identity ret)\n      (if (not(= ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")(first s)) nil))\n        (recur (subs s 1) (str ret (subs s 0 1)))\n        (recur (subs s 1) ret)\n      )\n    )\n  ) s \"\")\n)","user":"588b4bd0e4b05c141a25607a"},{"code":"(fn\n  [str]\n    (clojure.string/replace str #\"[^A-Z]+\" \"\"))","problem":29,"user":"4eddc5f4535d10e5ff6f532c"},{"code":"(fn [s] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %))  s)))","problem":29,"user":"51789dfae4b03d69594194d7"},{"code":"(fn [s]\n  (clojure.string/join (filter (fn [c] (Character/isUpperCase c)) s)))","problem":29,"user":"5225271fe4b01819a2de42f9"},{"problem":29,"code":"(fn [xs] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") xs)) )","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":29,"code":"(fn caps_only [l]\n  (clojure.string/join\n   (filter #(not= (clojure.string/lower-case (str %)) (str %))\n           l)))","user":"55e4487ce4b050e68259b44c"},{"problem":29,"code":"(fn flt [l]\n  (let [m (re-matcher #\"[A-Z]\" l)]\n    (loop [match (re-find m),\n           res []]\n      (if match\n        (recur (re-find m) (conj res match))\n        (reduce str res)))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"(fn [s] \n  (apply \n    str \n    (filter (fn [x] (and (< (int x) 92) (> (int x) 64))) \n    s)))","problem":29,"user":"4f1fd734535d64f6031464a5"},{"problem":29,"code":"(fn caps [x] (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"5ce708b7e4b0a17bb84e2b9b"},{"problem":29,"code":"(fn [string]\n  (let [capital-letters (reduce #(assoc %1 %2 true) {} [\\A \\B \\C \\D \n                                                        \\E \\F \\G \\H \n                                                        \\I \\J \\K \\L \n                                                        \\M \\N \\O \\P \n                                                        \\Q \\R \\S \\T \n                                                        \\U \\V \\W \\X \n                                                        \\Y \\Z])]\n    (apply str (filter #(get capital-letters % false) string))))","user":"55e274b4e4b050e68259b436"},{"code":"(fn filter-caps [coll]\n  (apply str\n    (filter\n      #(contains?\n        (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) coll)))","problem":29,"user":"4f856248e4b033992c121c43"},{"problem":29,"code":"(fn justCap [col] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq col))))","user":"56eff7c1e4b04a395b9a0468"},{"code":"(fn u [s] (if (= 0 (count s)) \"\" (if (Character/isUpperCase (first s)) (str (first s) (u (rest s))) (u (rest s)) )) )","problem":29,"user":"510931ede4b0c71f76895663"},{"problem":29,"code":"#(apply str (map char (filter (fn [c] (and (<= (int \\A) c) (<= c (int \\Z)))) (map int (seq %)))))","user":"545ddac3e4b01be26fd74676"},{"problem":29,"code":"(fn [col]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) col)))","user":"5243e37ae4b076204b44fae3"},{"problem":29,"code":"(fn [s]\n  (let [f (fn [c]\n            (and\n             (>= (.compareTo c \"A\") 0)\n             (<= (.compareTo c \"Z\") 0)))]\n    (clojure.string/join (filter f (clojure.string/split s #\"\")))))","user":"5c50048ae4b0f9f7a8770eb9"},{"problem":29,"code":"(fn just-capital [string]\n  (apply str (re-seq #\"[A-Z]+\" string)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":29,"code":"(fn [input] (apply str (for [x input\n         :let [y (identity x)]\n         :when (#(Character/isUpperCase %) x)]\n     y)))","user":"5ff99e57e4b06df49cee14b0"},{"code":"(comp (partial apply str) \n       (partial filter #(<= (int \\A) (int %) (int \\Z))))","problem":29,"user":"4fe8d862e4b0547ebccb2428"},{"problem":29,"code":"(fn capit [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"5b113f20e4b0cc2b61a3be2c"},{"code":"(fn caps[s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"50a0d1e4e4b08df8156e9e51"},{"code":"(fn [l] \n  (apply str (filter #(Character/isUpperCase %) l)))","problem":29,"user":"52753740e4b03e8d9a4a74c1"},{"problem":29,"code":"(fn get-caps\n  [input]\n  (apply str (filter #(Character/isUpperCase %) input)))","user":"5ac6099ee4b0e27600da7757"},{"problem":29,"code":"(fn [ring] \n  (apply str (filter #(.contains \"ABCDEFGHIJKLMNOPQRSTUVQWXYZ\" (str %1)) ring))\n)","user":"55c7c4dfe4b0e31453f649d7"},{"problem":29,"code":"(fn [entry-string]\n  (reduce str (map str (map char (filter \n                                     (fn [x] \n                                       (and (< 64 x) (> 91 x)))\n                                     (map int (vec (char-array entry-string))))))))","user":"58ed2e21e4b056aecfd47d7a"},{"code":"(fn ([s] (apply str (filter #(not (=\n  (str %)\n  (clojure.string/lower-case %))) s))))","problem":29,"user":"4ff889f2e4b0678c553fc399"},{"code":"(fn [n] (loop [cnt \"\" acc (apply vector n)] (if (empty? acc) \r\n(if (= cnt \"\") nil (apply str (reverse cnt))) (recur  (if (= (= (str \r\n(clojure.string/upper-case (last acc))) (str (last acc))) (= (str \r\n(clojure.string/lower-case (last acc))) (str (last acc)))) cnt (if (= (str \r\n(clojure.string/upper-case (last acc))) (str (last acc))) (str \r\ncnt (str (last acc))) cnt)) (pop acc)))))","problem":29,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":29,"code":"(fn get-caps [s]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) (seq s))))","user":"577154ffe4b0979f896515b1"},{"code":"(fn [l] (apply str (remove #(re-matches #\"[^A-Z]\" (str %)) l)))","problem":29,"user":"50573ed8e4b0012181721987"},{"code":"(fn [string] (apply str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) string)))","problem":29,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":29,"code":"(fn [s]\n      (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))","user":"5eb1c786e4b00a66d4a95201"},{"problem":29,"code":"(fn [s] (apply str (filter #(<= 65 (int %) 90)  s)))","user":"574986cae4b009280f9f2b9c"},{"code":"(fn [s]\n  (->>\n   s\n   (seq)\n   (filter (fn [c] (Character/isUpperCase c)))\n   (apply str)))","problem":29,"user":"529e2383e4b04e0c58e87b8b"},{"code":"(fn upcase-only [l]\n  (apply str (filter #(Character/isUpperCase %) l)))","problem":29,"user":"4db8d37d535d1e037afb219c"},{"problem":29,"code":"(fn a [b] (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq b))))","user":"5b0f2862e4b0cc2b61a3be0f"},{"code":"(fn [s] (clojure.string/join (clojure.string/split s #\"[^A-Z]\")))","problem":29,"user":"51631002e4b017b283c712c1"},{"problem":29,"code":"(fn [x]\n  (reduce str (filter #(Character/isUpperCase %) (seq x))))","user":"596b5f27e4b069c0a1a19813"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"([^A-Z]+)\" \"\"))","user":"575683aee4b02ea1147992dc"},{"problem":29,"code":"(fn getCaps\n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [a] \n  (apply str \n    (filter \n      (fn [b] \n        (< -1 (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"(str b)))\n      ) \n      (seq a)\n    ))\n)","problem":29,"user":"50949602e4b04e5742806c4e"},{"problem":29,"code":"(fn [input] (clojure.string/join (filter #(Character/isUpperCase %) input)))","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn [s] \n     (reduce str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4f89bd1be4b033992c121c7d"},{"code":"(fn caps [x]\n  (apply\n    str\n    (filter\n      #(let [d (- (int %) (int \\A))]\n          (and (>= d 0) (<= d 25))) (seq x))))","problem":29,"user":"504ece87e4b069badc5a33ce"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) s)))","user":"55316b8ae4b076ab5578f825"},{"problem":29,"code":"#(apply str (filter (fn [x] (Character/isUpperCase (char x))) (seq %)))","user":"594266cfe4b060784b3b790b"},{"problem":29,"code":"(fn [sentence] (apply str (filter #(Character/isUpperCase %) sentence)))","user":"55d79b87e4b0e31453f64aa8"},{"problem":29,"code":"(fn caps-only [mixed-string]\n  (apply str (filter #(Character/isUpperCase %) mixed-string))  )","user":"54de7948e4b024c67c0cf7a4"},{"code":"reduce (fn [a n] (if (Character/isUpperCase n) (str a n) a)) \"\"","problem":29,"user":"4dd52e29535dae65d5c462e5"},{"problem":29,"code":"(fn only-caps [x]\n  (clojure.string/join (filter #(Character/isUpperCase %) x)))\n;; note: `apply str` would also work instead of `join`","user":"5fb68f09e4b08cb800c85b58"},{"code":"#(->> (re-seq #\"[A-Z]+\" %)\n      (apply str))","problem":29,"user":"510d9d61e4b078ea71921141"},{"problem":29,"code":"(fn [x] (apply str (concat (re-seq #\"[A-Z]+\" x))))","user":"570eeb66e4b0b0fb43fd06fa"},{"problem":29,"code":"(fn [xs]\n    (apply str\n           (filter #(let [char-int (char %)]\n                      (and\n                       (>= (int %) (int \\A))\n                       (<= (int %) (int \\Z))))\n                   xs)))","user":"5920c191e4b09b4ee5954c61"},{"problem":29,"code":"(fn [s] (apply str(filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"55ad59cde4b03311e7b732a7"},{"problem":29,"code":"(fn [sss] (apply str (filter #(Character/isUpperCase %) sss)))","user":"5a24735fe4b07f18be40aa11"},{"problem":29,"code":"(fn [mix]\n\t(apply str (filter #(Character/isUpperCase %) mix)))","user":"59595f85e4b066ee0a44afa1"},{"problem":29,"code":"(fn [s]\n        (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"5e317676e4b05b4b01516229"},{"code":"(fn foo [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"51789599e4b03d69594194d6"},{"code":"(fn [x] \n  (apply str (filter #(Character/isUpperCase %) (vec x))))","problem":29,"user":"4f8320e9e4b033992c121c18"},{"problem":29,"code":"(fn [lst]\n  (apply str (filter #(Character/isUpperCase %) (seq lst)))\n  )","user":"57f81045e4b0d3187e90090f"},{"problem":29,"code":"(fn ups\n  [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))","user":"56edf2dde4b04a395b9a044b"},{"problem":29,"code":"(fn [s] (apply \n         str (filter #(Character/isUpperCase %1) s)))","user":"53fc63dce4b0de5c4184859f"},{"problem":29,"code":"(fn [x] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) x)))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":29,"code":"(fn [s]\n  \n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","user":"53b530c6e4b047364c0444bc"},{"code":"(fn f [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e4ea0f6535dc968683fc4e6"},{"code":"(fn [coll] (clojure.string/join\r\n                       (filter\r\n                         (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)) (= x (java.lang.Character/toUpperCase x))))\r\n                         coll)))","problem":29,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":29,"code":"(fn \n  [^String s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":29,"code":"(fn [s] (apply str (re-seq #\"[A-Z]+\"s)))","user":"5e4ba8e8e4b0889a8790a55a"},{"problem":29,"code":"(fn caps [x & [y]]\n  (if y\n       (if (= (count x) 0)\n         y\n         (if (Character/isUpperCase (first x))\n           (caps (rest x) (str y (first x)))\n           (caps (rest x) y)\n           \n           )) \n       (caps x \"\")))","user":"5632abbee4b0bfe05bf117a7"},{"problem":29,"code":"(fn [someseq]\n    (apply str (filter #(Character/isUpperCase %) someseq)))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn up [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"52bf0116e4b07a9af5792328"},{"problem":29,"code":"#(->> %\n       (re-seq #\"[A-Z]\")\n       (apply str))","user":"5f4314e0e4b0955706451fb4"},{"code":"(fn [s]\n  (apply str\n    (filter\n      #(not=\n        (clojure.string/lower-case %)\n        (str %))\n      s)))","problem":29,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [cs] (apply str (filter #(Character/isUpperCase %) cs)))","problem":29,"user":"5213d7aae4b0961f15ac4d72"},{"problem":29,"code":"(fn [in] (apply str (re-seq #\"[A-Z]\" in)))","user":"53c6a2fde4b00fb29b22129d"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (re-seq #\"[A-Z]\" s )))","user":"6045582fe4b02d28681c77b6"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (re-seq #\"[A-Z]+\" s)))","user":"55469eede4b0a04f79299542"},{"code":"#(apply str (re-seq #\"\\p{Lu}\" %))","problem":29,"user":"5102489de4b00c483ae176f6"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\" %1) )","user":"5589a941e4b059ccff29b207"},{"code":"(fn [txt] (apply str (filter #(re-find #\"[A-Z]\" (str %)) txt)))","problem":29,"user":"51db27dbe4b094966a2cd688"},{"problem":29,"code":"(fn [sequence] \n  (apply str (filter #(Character/isUpperCase %) sequence))\n)","user":"56448dc1e4b0284900eef5f6"},{"code":"#(apply str (filter \n  (fn [x]  (. java.lang.Character (isUpperCase x))) \n    %))","problem":29,"user":"4ee7d113535d93acb0a6686e"},{"code":"(fn onlyMaj\n  [string]\n  (apply\n    str\n    (filter\n      (fn toto [x]\n        (and\n          (<= 65 (int x))\n          (>= 90 (int x))))\n    (seq string))))","problem":29,"user":"50d8de3fe4b01f0871336e72"},{"problem":29,"code":"(fn [s] (clojure.string/join\n         (filter\n          #(re-matches #\"[A-Z]\" (str %))\n          (seq s))))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn [xs] \n  (apply str (filter \n    #(and (>= (int %1) (int \\A)) \n          (<= (int %1) (int \\Z))) xs)))","problem":29,"user":"4fa6a491e4b081705acca1bc"},{"problem":29,"code":"(partial reduce #(if (Character/isUpperCase %2) (str %1 %2) %1) \"\")","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn [s]\r\n  (apply str (filter (fn [c]\r\n    (let [c (int c)]\r\n      (and (>= c 65) (<= c 90)))) s)))","problem":29,"user":"4fc8d905e4b0ee37620e183d"},{"problem":29,"code":"(fn caps [x] (clojure.string/replace x #\"[^A-Z]+\" \"\"))","user":"54bfc203e4b0ed20f4ff6f08"},{"code":"(comp\n (partial apply str)\n (partial map char) \n (partial filter #(and\n                  (<= % (int \\Z)) \n                  (>= % (int \\A))))\n (partial map int))","problem":29,"user":"527236d4e4b03e8d9a4a741f"},{"problem":29,"code":"(fn [sentence]\n  (apply str (filter #(and (Character/isUpperCase %) (Character/isLetter %)) sentence)))","user":"5f3ab5ece4b004f08c61c52a"},{"code":"(fn [aword] (clojure.string/join \"\" (re-seq #\"[A-Z]\"  aword )))","problem":29,"user":"5213348ae4b0d32679a50652"},{"problem":29,"code":"(fn [strs]\n  (->> strs\n       (filter #(Character/isLetter %))\n       (filter #(= % (Character/toUpperCase %)))\n       (apply str)))","user":"566e87cfe4b0a866af6896dc"},{"problem":29,"code":"(fn [s] (let [upper (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n          (apply str (filter #(contains? upper %) s))))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"problem":29,"code":"#(apply str (filter (fn [s] (Character/isUpperCase s)) %))","user":"5417385fe4b01498b1a71a08"},{"code":"( fn [s]\n   (apply str ( map #(if (= %1 %2) (if (contains? (set (seq \"ABCDEFGHIJKLMNOPQRSTUWXYZ\")) %1) %1)) (clojure.string/upper-case s) s)))","problem":29,"user":"5291ede5e4b0239c8a67af1e"},{"code":"#(apply str (re-seq #\"[A-Z]\"  %))","problem":29,"user":"51cbaf14e4b08d8387cbedda"},{"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     s)))","problem":29,"user":"50119c07e4b028e9d38b393f"},{"code":"(fn [s]\n  (apply str\n    (filter (fn [c]\n      (not (= (str c)\n          (clojure.string/lower-case (str c))))) s)))","problem":29,"user":"4ff355a1e4b0678c553fc34d"},{"problem":29,"code":"(fn [x] \n  (clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"57995ac1e4b05b1deef9adbf"},{"code":"(fn get-caps [s]\n  (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"50763574e4b0a894bb95bf3d"},{"problem":29,"code":"(fn get-the-caps [s]\n  (clojure.string/join\n    (filter\n      (fn [c]\n        (and\n          (not= (clojure.string/upper-case c) (clojure.string/lower-case c))\n          (= (clojure.string/upper-case c) (str c))\n          )\n        )\n      s\n      )\n    )\n\n  )","user":"55bb7546e4b01b9910ae29e7"},{"problem":29,"code":"(fn [x](clojure.string/join (filter #(Character/isUpperCase %) x)))","user":"575ab695e4b02ea114799350"},{"problem":29,"code":"(fn [s] (reduce str (filter #(Character/isUpperCase %) s) )  )","user":"58db362be4b0a4d5acaab675"},{"problem":29,"code":"(fn [str]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) str)))","user":"59156f0be4b0163c97b36f3d"},{"problem":29,"code":"(fn [var]\n(apply str\n       (filter #(Character/isUpperCase %)\n        (seq var))))","user":"54775b13e4b0c51c1f4d72b2"},{"code":"#(clojure.string/join (re-seq #\"\\p{Upper}\" %))","problem":29,"user":"519c4111e4b0a1d87b003458"},{"problem":29,"code":"(fn [s]\n  (let [is-cap #(not (or (neg? (compare % \\A)) (neg? (compare \\Z %))))]\n    (apply str (filter is-cap s))))","user":"5d8b4960e4b0915913b1d3d3"},{"code":"(fn [string] (clojure.string/replace string #\"[^A-Z]\" \"\"))","problem":29,"user":"52808559e4b0757a1b171403"},{"problem":29,"code":"#(reduce (fn [acc, cur] (if (Character/isUpperCase cur) (str acc cur) acc)) \"\" (seq %))","user":"555883c5e4b0deb715856e2d"},{"problem":29,"code":"(fn filter-cap [word] (apply str (filter #(Character/isUpperCase %) word)))","user":"551bdefde4b07993ea3788d7"},{"problem":29,"code":";;filter #(re-matches #\"^[A-Z]\" (seq (char-array %)))\n\n\n(fn [s] (apply str (re-seq #\"[A-Z]\" s)))\n\n;seq (char-array \n ;;(seq (char-array \"asdf\"))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"problem":29,"code":"(fn [s]\n  (->> s\n       char-array\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":29,"code":"(fn [coll] (apply str (filterv #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) coll)))","user":"602c30e3e4b0d5df2af2226f"},{"code":"(fn removeUpper [txt] (apply str(filter #(Character/isUpperCase %) txt)))","problem":29,"user":"4ff92cd2e4b0678c553fc3a5"},{"problem":29,"code":"#(apply str \n       (filter (into #{} \n                      (map char (range 65 91))) \n                %))","user":"52d9e126e4b09f7907dd13b1"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [y] (re-matches #\"[A-Z]\" (str y))) x)))","user":"58a822e4e4b01a0c0b232950"},{"problem":29,"code":"(fn [s]\n (apply str\n   (filter\n     #(Character/isUpperCase %)\n     (seq s)\n)))","user":"598debf0e4b02b9968b84d2e"},{"problem":29,"code":"(fn func [s]\n  (let [start (int \\A) end (int \\Z)]\n    (apply str (filter #(and (>= (int %) start) (<= (int %) end)) (seq s)))))","user":"55f95782e4b03cbcff9738bf"},{"code":"(fn teste [text]\n  (apply str (re-seq #\"[A-Z]+\" text)))","problem":29,"user":"52091d57e4b0e152394d76f0"},{"code":"#(clojure.string/join (filter (complement (fn [c] (= (str c) (clojure.string/lower-case c)))) %))","problem":29,"user":"52e59ca5e4b09f7907dd1464"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #((complement nil?) (re-find #\"[A-Z]\" (str %))) s)))","user":"5fa52497e4b0fa27300f3dbf"},{"code":"(fn [cs] (apply str (remove #(= (clojure.string/lower-case %) (str %)) cs)))","problem":29,"user":"4fef481ce4b0678c553fc314"},{"problem":29,"code":"#(reduce str (for [a %]\n               (if-not (= (str a) (clojure.string/lower-case a))\n                 a)))","user":"59b554cee4b05c620303ca0f"},{"code":"(fn [str] \n  (reduce #(format \"%s%s\" %1 %2) (conj (re-seq #\"[A-Z]+\" str) \"\")))","problem":29,"user":"51392535e4b0a5db03d727e1"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s) )))","problem":29,"user":"51607eb0e4b009fba0926e27"},{"problem":29,"code":"(fn [text]\n  \t(reduce #(str % %2) \"\"\n            (doall (filter #(Character/isUpperCase %) text))))","user":"532f8569e4b019098a6f8b4f"},{"code":"#(apply str (map (fn [a b] (if (not (= a b)) b \"\")) (.toLowerCase %) %))","problem":29,"user":"4f0664bd535dcb61093f6c0f"},{"problem":29,"code":"(fn[s]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int s)))))","user":"58376b71e4b089d5ab817d18"},{"problem":29,"code":"(fn cap [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))","user":"59638fc5e4b066ee0a44b0cd"},{"problem":29,"code":"(fn mac [para]\n  (clojure.string/join  \"\" (re-seq #\"[A-Z]\" para))\n)","user":"5bc2df19e4b07a9b28b10038"},{"problem":29,"code":"(fn [x] (clojure.string/replace x #\"[a-z, !$&0-9#()\\*]\" \"\"))","user":"57cc14aae4b05aa3c4741d4a"},{"problem":29,"code":"(fn [x]\n  (clojure.string/join\n   \"\"\n   (re-seq\n    #\"[A-Z]*\"\n    x)))","user":"59639142e4b066ee0a44b0ce"},{"problem":29,"code":"(fn upperCase [s]\n  (reduce str\n          (filter\n            #(contains?\n               #{\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"k\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"} %)\n            (map str (seq s)))\n          )\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"code":"(fn [x] \n  (apply str \n    (filter #(Character/isUpperCase %) x)) )","problem":29,"user":"4f1ae082535d64f603146470"},{"code":"(fn [s]\n  (let [mapping (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n    (clojure.string/join (filter #(not (nil? (mapping %))) s))))","problem":29,"user":"504e0517e4b078edc5f5939a"},{"code":"(fn [xs] (apply str (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") xs)))","problem":29,"user":"5177f89ae4b0f89a8f53839a"},{"problem":29,"code":"#(apply str (filter (fn [a] (and (<= (int a) (int \\Z))\n                                     (>= (int a) (int \\A))))\n                        (vec %)))","user":"57d93437e4b0bd073c2023f9"},{"code":"(fn [s]\n  (reduce str (filter \n               (fn [x] (re-find #\"[A-Z]\" x))\n               \t(clojure.string/split s #\"\"))))","problem":29,"user":"51661e9ce4b05e5ef6a5e806"},{"problem":29,"code":"(fn [str1]\n   (apply str (filter #(Character/isUpperCase %) (seq str1)))\n  \n  )","user":"545e5805e4b01be26fd74679"},{"code":"#(apply str (filter (set (map char (range 65 91))) %))","problem":29,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [s]\r\n  (apply str\r\n    (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4df1e213535d08e6dec9fe20"},{"problem":29,"code":"(fn caps [s] (apply str (re-seq  #\"[A-Z]\" s)))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn [s]\r\n    (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn v [x] (apply str \n\t(filter #(and (>= (int %) 65) (<= (int %) 90)) (seq x))              \n              ))","problem":29,"user":"5105ed16e4b01150e115ebe2"},{"problem":29,"code":"(fn [n] (->> n seq (map str) (filter #(re-matches #\"[A-Z]\" %)) (apply str)))","user":"5761a772e4b0994c1922fb95"},{"code":"(fn [string] (clojure.string/join \"\" (concat (re-seq #\"[A-Z]\" string))))","problem":29,"user":"52b94f15e4b07a9af57922ba"},{"code":"(fn [col]\n  (clojure.string/replace col #\"[^A-Z]\" \"\"))","problem":29,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))\n\n;#(apply str (re-seq #\"[A-Z]+\" %))","problem":29,"user":"53a074a4e4b0ca733b9744af"},{"problem":29,"code":"(fn [string]\n    (apply str (filter (fn [c] (and (> (int c) 64) (< (int c) 91))) (seq string)) ))","user":"563a79e5e4b0bfe05bf117fe"},{"problem":29,"code":"(fn [x] \n  (apply str \n          (filter #(Character/isUpperCase %) \n                  x)))","user":"5579d60ce4b05c286339e099"},{"problem":29,"code":"(fn [x] (apply str (filter #(re-find #\"[A-Z]+\" (str %)) x)))","user":"5453b522e4b0e397800069d0"},{"code":"#(clojure.string/replace %  #\"[^A-Z]\" \"\")","problem":29,"user":"515f0a39e4b02c55805ea23a"},{"problem":29,"code":"(fn\n  [xs]\n  (->>\n   xs\n   (filter #(Character/isUpperCase %))\n   (apply str)))","user":"5abc5a09e4b073f1774426e9"},{"problem":29,"code":"(fn [sentence]\n  (clojure.string/replace sentence #\"[^A-Z]\" \"\"))","user":"55f1f0d1e4b06e875b46ce3b"},{"problem":29,"code":"(fn [y] (apply str (mapcat clojure.string/upper-case (filter (fn [x] (Character/isUpperCase x)) y))))","user":"5bf0b940e4b0a6d31fed215c"},{"code":"#(apply str (apply concat (re-seq #\"[A-Z]+\" %)))","problem":29,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":29,"code":"(fn getUppers [st](reduce (fn [buffer ch] (if (#(Character/isUpperCase %) ch) (str buffer ch) buffer)) \"\" st))","user":"59406b94e4b069cdc2982bfd"},{"problem":29,"code":"(fn [s] (apply str (filter #(Character/isUpperCase %1) (seq s))))","user":"53e66df9e4b036ad0777e472"},{"code":"(fn [mystr]\n  (apply str (re-seq #\"[A-Z]+\" mystr))\n)","problem":29,"user":"501b212ee4b0b12d9c5f4d83"},{"code":"(fn only-lower [s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4f05ea25535dcb61093f6c02"},{"problem":29,"code":"(fn capitals [MyString] \n  (apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                     (seq MyString))))","user":"55769940e4b05c286339e070"},{"code":"(fn [word] \n    (apply str (filter (fn [c] (. Character (isUpperCase c))) word))\n  )","problem":29,"user":"4e653558535d8ccf87e9fe6f"},{"problem":29,"code":"(fn [x] (apply str (filter #(contains? (set (map char (range 65 91))) %) x )))","user":"56d439d4e4b0ea9b8538f7b6"},{"code":"(fn [s]\n  (apply str (filter #(java.lang.Character/isUpperCase %) s)))","problem":29,"user":"4e8c1d97535d65386fec2127"},{"code":"(fn filt\n  [s]\n  (apply str (filter (fn [c]  (and  (>=  (int c)  (int \\A))  (<= (int c) (int \\Z) ) ) )  s)))","problem":29,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn caps-only [input]\n  (clojure.string/join (re-seq #\"[A-Z]\" input))\n)","problem":29,"user":"4fb710f4e4b081705acca2cd"},{"problem":29,"code":"(fn [target] \n  (apply str \n         (filter #(re-find #\"[A-Z]\" (str %)) target)\n         )\n  )","user":"5ab5f60be4b073f177442643"},{"problem":29,"code":"(fn [x] (apply str (map char (filter #(and (> 91 %) (< 64 %)) (map int x)))))","user":"567f034be4b0feffd0d18eba"},{"problem":29,"code":"(fn [s] (apply str (filter #(= % (.toUpperCase %)) (re-seq #\"[a-zA-Z]\" s))))","user":"55c508f0e4b0e31453f649ac"},{"problem":29,"code":"(fn f [x] (apply str (re-seq #\"[A-Z]+\" x)))","user":"5548c46be4b0a04f79299560"},{"problem":29,"code":"#(apply str (filter (fn [a] (if (and (< (int a) 91) (> (int a) 64)) true false)) %))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":29,"code":"(fn [xs] \n  (apply \n   str (filter #(Character/isUpperCase %) xs)))","user":"578df8fee4b0ebec4cfb7574"},{"code":"(fn [x] (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))","problem":29,"user":"50733b31e4b0e3170b5a869a"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (compare (str %) \"A\") 0) (>= 0 (compare (str %) \"Z\"))) s)))","user":"52cda980e4b07d0d72b2737b"},{"problem":29,"code":"(fn phlat [xs]\n  (clojure.string/join (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) xs)))","user":"5be9ad9be4b0f319e2d7ec76"},{"code":"(fn [xs]\n  (apply str (filter #(Character/isUpperCase %) (seq xs))))","problem":29,"user":"50e09313e4b061dbdced7233"},{"problem":29,"code":"(fn [text] (clojure.string/join \"\" (re-seq #\"[A-Z]\" text)))","user":"5a59a76fe4b05d388ecb6c98"},{"code":"(fn hoge [x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e2e6460535deb9a81d77f0b"},{"code":"(fn[a] (apply str (filter #(Character/isUpperCase %1)  a)))","problem":29,"user":"4db6e850535d1e037afb2182"},{"code":"#(apply str (filter (fn [ch] (and (>= (compare ch \\A) 0) (<= (compare ch \\Z) 0))) %))","problem":29,"user":"4eeccfc0535d93acb0a668b5"},{"code":"(fn [s]\n   (reduce str\n           (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"(fn [x] \n  (apply str (filter (fn [a] (true? (Character/isUpperCase a))) x)))","problem":29,"user":"4ec42c11535dcc7ae8597d5f"},{"code":"(fn [input] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) input)))","problem":29,"user":"525a643be4b0cb4875a45cf1"},{"problem":29,"code":"(fn [s] \n  (->>\n   (seq s)\n   (filter #(re-matches #\"[A-Z]\" (str %)))\n   (reduce str)\n   )\n  )","user":"5bc28638e4b07a9b28b10033"},{"problem":29,"code":"(fn [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":29,"code":"(fn [s] (reduce str (filter #(not (empty? %)) (re-seq #\"[A-Z]*\" s))))","user":"56f3e77ee4b046a417f92058"},{"problem":29,"code":"(fn [strr] (clojure.string/join (filter #(Character/isUpperCase %) strr)))","user":"56b33058e4b0982f16b37e12"},{"problem":29,"code":"(let [letters (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n  #(apply str (filter letters %)))","user":"5d929ceae4b0915913b1d412"},{"problem":29,"code":"(fn [col] (apply str (filter (fn [element] (Character/isUpperCase element)) col)))","user":"6031926ae4b0d5df2af222ac"},{"code":"(fn [s] (apply str (map char (filter #(and (<= % (int \\Z)) (>= % (int \\A))) (map int s)))))","problem":29,"user":"514767ace4b0541f4bec05cb"},{"code":"(fn [string]\n  (apply str \n    (filter #(java.lang.Character/isUpperCase %) string)))","problem":29,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"code":"(fn [x] (apply str (filter #(re-find #\"[A-Z]\" (str %)) (seq x))))","problem":29,"user":"52bef782e4b07a9af5792327"},{"code":"(fn [strng] (apply str (filter #(Character/isUpperCase %) (seq strng))))","problem":29,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn [s]\n    (let [list (map char (range 65 91))\n          inboth (fn [x y]\n                   (for [a x b y :when (= a b)]\n                     a))]\n      (clojure.string/join (inboth s list))))","problem":29,"user":"50bf6f93e4b0ffd967a66cbf"},{"code":"(fn [val]\n  (apply str\n     (filter #(Character/isUpperCase %) val)))","problem":29,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"problem":29,"code":"(fn [x] (reduce str (#(re-seq #\"[A-Z]\" %1) x)))","user":"519c5a08e4b0a1d87b00345b"},{"problem":29,"code":"(fn [s] (->>\n  s\n  (filter #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %))))\n  (apply str)\n  ))","user":"5fe85417e4b05ac5b16ea194"},{"code":"(fn [s] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))","problem":29,"user":"4ec6357a535d6d7199dd36c5"},{"code":"#(apply str (re-seq  #\"[A-Z]\" %))","problem":29,"user":"4fe97adde4b0547ebccb245e"},{"problem":29,"code":"#(->>% (filter (fn [x] (Character/isUpperCase x))) (apply str))","user":"55357ab5e4b09218d5f44faf"},{"problem":29,"code":"(fn [coll] (apply str (re-seq #\"\\p{Upper}+\" coll ))  )","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":29,"code":"(fn [str] (->> str (filter #(Character/isUpperCase %)) clojure.string/join))","user":"565de2c6e4b068f2fe63dc2d"},{"problem":29,"code":"(fn\n  [s]\n  (loop [in (into [] s) out []]\n    (if (empty? in) (clojure.string/join \"\" out)\n      (if (and (> (int (first in)) 64) (< (int (first in)) 91))\n        (recur (rest in) (conj out (first in)))\n        (recur (rest in) out)))))","user":"52420e2fe4b076e5d3121f48"},{"problem":29,"code":"(fn [st]\n  (apply str (filter #(Character/isUpperCase %) st)))","user":"56433d34e4b08d4f616f5f23"},{"code":"(fn [s] (clojure.string/replace s #\"[^A-Z]\" \"\"))","problem":29,"user":"4ec6559a535d6d7199dd36c9"},{"problem":29,"code":"#(clojure.string/join(re-seq #\"[A-Z]\" %))","user":"57a2328ae4b0c3d858beb8f8"},{"problem":29,"code":"(fn only-capital\n  [s]\n  (reduce str \"\" (filter #(and (> (int %) 64) (< (int %) 91)) s)))","user":"57d0cd58e4b0bd073c20235e"},{"code":"#(clojure.string/join \"\" (for [x (seq (map identity %))]\n  (str (re-find (re-pattern #\"[A-Z]\") (str x)))))","problem":29,"user":"517e12e3e4b0fcc7c5d37d3c"},{"problem":29,"code":"(fn [items](apply str (filter #(and (>= (int \\Z) (int %1)) (<= (int \\A) (int %1))) (seq items))))","user":"57ce3fede4b0c746388ab8a6"},{"problem":29,"code":"(fn up [s]\n  (if (empty? s) \"\"\n    (if (Character/isUpperCase (first s))\n      (str (first s) (up (rest s)))\n      (up (rest s)))))","user":"5d41f428e4b05dd059a5437b"},{"code":";#(reduce (fn [x y] (if (= y (clojure.string/upper-case y)) (concat x [y]) x)) \"\" %)\n#(.replaceAll % \"[^A-Z]\" \"\")","problem":29,"user":"51cec7b1e4b0e42293a2255b"},{"problem":29,"code":"(fn [i] (apply str (re-seq #\"[A-Z]\" i)))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"code":"(fn [w] (apply str (filter #(Character/isUpperCase %) w)))","problem":29,"user":"5018ed15e4b011a2e0bf6412"},{"code":"#(apply str (filter (fn [r] (and (= (str r) (clojure.string/upper-case r)) (not= (clojure.string/upper-case r) (clojure.string/lower-case r)) )) %))","problem":29,"user":"531d53dbe4b08068f379edae"},{"code":"(fn getcaps [astr] (let [achar (first astr),\n                         caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z},\n                         therest (rest astr)]\n                     (cond\n                      (empty? astr) \"\"\n                      (nil? (caps achar)) (getcaps therest)\n                      :else (str achar (getcaps therest)))))","problem":29,"user":"51bf4560e4b013aa0d74b817"},{"code":"(fn my-cap [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4f04d312535dcb61093f6be7"},{"code":"(fn ups [s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"5232d047e4b035af41902a95"},{"problem":29,"code":"(fn [s]\n  (apply str \n         (re-seq #\"[A-Z]\" s)))","user":"595e8728e4b066ee0a44b047"},{"problem":29,"code":"#(clojure.string/join \"\" ( map char ( filter (fn [x] (cond (>= x 65) (<= x 90))) (map int %))))","user":"55645592e4b0c656e3ff1802"},{"problem":29,"code":"(fn [input]\n\t(->> input\n\t\t(filter #(contains? (set (range 65 91)) (int %)))\n\t\t(clojure.string/join)))","user":"531dc21be4b08068f379edb1"},{"code":"(fn [word]\n  (reduce str (filter (fn [c] (Character/isUpperCase c)) word)))","problem":29,"user":"4e6e7018535d5021c1a8960b"},{"problem":29,"code":"#( reduce str (filter (fn[a] (Character/isUpperCase a)) %))","user":"5505d137e4b086ebe8a79c8c"},{"problem":29,"code":"(fn [s]\n  (let [upper-case-p #(not= (str %) (clojure.string/lower-case %))]\n    (apply str (filter upper-case-p s))))","user":"55527251e4b0deb715856df3"},{"problem":29,"code":"(fn capials [x] \n  (if (= x []) \"\"\n   (let [i (first x)]\n     (if (and (>= (compare i \\A) 0) (<= (compare i \\Z) 0))\n       (str i (capials (rest x)))\n       (capials (rest x))))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":29,"code":"(fn [s] (apply str \n           (filter #(some (partial = %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n           s)))","user":"55bedd93e4b01b9910ae2a0d"},{"code":"(fn [s]\n  (apply str (filter #(re-find #\"[A-Z]\" \n                               (str %))\n                     s)))","problem":29,"user":"526fc549e4b03e8d9a4a7380"},{"problem":29,"code":"(fn func3 [phrase]\n  (apply str (for [character phrase\n                   :when (= (re-matches #\"[A-Z]\" (str character)) (str character))]\n               (str character))))","user":"5d517784e4b0776584bd6f60"},{"problem":29,"code":"#(reduce str (re-seq  #\"\\p{Upper}\" %))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":29,"code":"(fn [word ] (clojure.string/join (for [c word :when (and (char? c) (Character/isUpperCase c))] c)))","user":"556405e5e4b0c656e3ff17fb"},{"problem":29,"code":"(fn [s]\n\t(apply str (filter #(Character/isUpperCase %) s))\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":29,"code":"(fn uc [string]\n  (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq string))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":29,"code":"(fn [s] (clojure.string/replace s #\"[^A-Z]+\" \"\"))","user":"54c271b9e4b045293a27f602"},{"problem":29,"code":"(fn [s] (apply str (filter #(let [x (int %)] (and (>= x 65) (<= x 90))) s)))","user":"54b448f2e4b05787c3b1638e"},{"code":"(fn [s] (->> s (filter #(Character/isUpperCase %)) \n  clojure.string/join))","problem":29,"user":"502d387fe4b0d96a44ab202f"},{"problem":29,"code":"(fn take-upper-case [some-string]\n  (apply str (re-seq #\"[A-Z]+\" some-string))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":29,"code":"(fn only-upper [x]\n  (loop [x x\n         y ()]\n    (cond (empty? x)                          (apply str y)\n          (. Character isUpperCase (first x)) (apply str (concat y (list (first x)) (only-upper (rest x))))\n          :else                               (apply str (only-upper (rest x))))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"code":"#(clojure.string/join (re-seq #\"[A-Z]\" % ))","problem":29,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn [list] (apply str (filter #(Character/isUpperCase %) list)))","problem":29,"user":"4fa39b3ee4b081705acca191"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(Character/isUpperCase %))\n       clojure.string/join))","user":"5922f8a9e4b026ae3852128f"},{"code":";#(apply str (re-seq #\"[A-Z]\" %))\n\n#(reduce str (re-seq #\"[A-Z]\" %))","problem":29,"user":"528f4462e4b0239c8a67aef0"},{"problem":29,"code":"(fn get-the-caps [st]\n  (reduce str \n         (let [low-st (.toLowerCase st)]\n           (for [i (range (count st))\n                 :when (not= (nth st i) (nth low-st i))]\n             (nth st i)))))","user":"5e21c933e4b05b4b01516128"},{"code":"(fn [s] (apply str (map char (filter #(and (>= % 65) (<= % 97)) (map int s)))))","problem":29,"user":"51e0198ee4b01188f0627539"},{"problem":29,"code":";(fn [x] (apply str (re-seq #\"[A-Z]+\" x)))\n;#(reduce str (re-seq #\"[A-Z]\" %))\n#(apply str(re-seq #\"[A-Z]\" %))","user":"580d7e53e4b0849f6811b73e"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"5757ba87e4b02ea1147992f9"},{"code":"(fn [x] (apply str (filter (fn [y] (<= 65 (int y) 90)) (seq x))))","problem":29,"user":"52b79d8ee4b0c58976d9ad50"},{"problem":29,"code":"(fn [x]  (apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) x)))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":29,"code":"(fn [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))","user":"53a7637de4b047364c044419"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (and (>= (int c) 65) (<= (int c) 90))) s)))","user":"51e24905e4b01e519814642e"},{"problem":29,"code":"(fn f\n  [s]\n  (apply str (seq (re-seq #\"[A-Z]\" s))))","user":"59390a35e4b02506e01a29f3"},{"problem":29,"code":"(fn filter-capital\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn [string]\n   (apply str (filter (fn [l] (Character/isUpperCase l)) string)))","problem":29,"user":"51736d4de4b00f4b6b0490d7"},{"code":"(fn [s] (apply str(re-seq #\"[A-Z]*\" s)))","problem":29,"user":"4e78c2ba535db95036265723"},{"problem":29,"code":"(fn [pattern]\n  (reduce str (re-seq #\"[A-Z]+\" pattern)))","user":"5c0eb93ce4b01240ff567146"},{"code":"(fn [s]  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"5106c803e4b01150e115ebee"},{"problem":29,"code":"#(apply str (filter (fn[input](Character/isUpperCase input)) (seq %)))","user":"553093bee4b076ab5578f817"},{"problem":29,"code":"#(apply str (filter (fn isCapital [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))","user":"5743e316e4b0c285004e8ab3"},{"problem":29,"code":"( fn [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"548ef1dee4b0e286459a1229"},{"problem":29,"code":"(fn [in]\n  (clojure.string/join (filter #(Character/isUpperCase %) in)))","user":"5ae47c1de4b0837691e92c81"},{"problem":29,"code":"#(reduce (fn [l x] (if (Character/isUpperCase x) (str l x) l)) \"\" %)","user":"55d42f78e4b0e31453f64a73"},{"code":"#(apply str (filter \n  (fn [c] \n    (Character/isUpperCase c))\n  %))","problem":29,"user":"4ecc8dea535d23f0362276fd"},{"code":"(fn [seq] (apply str (filter #(and (> (int %) 64) (< (int %) 91)) seq)))","problem":29,"user":"508e9ed8e4b0996e1a8a53bf"},{"problem":29,"code":"(fn f [x] (clojure.string/join (filter #(Character/isUpperCase %) x)))","user":"54893618e4b0e286459a11e0"},{"problem":29,"code":"(fn [s] (reduce str (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) s)))","user":"5afa3590e4b0cc2b61a3bcea"},{"problem":29,"code":"(fn [st]\n  (clojure.string/join (filter (comp (partial re-find #\"[A-Z]\") str) st)))","user":"509ecefde4b08df8156e9e35"},{"problem":29,"code":"(fn [vv] (apply str\n               (filter #(Character/isUpperCase %) vv)))","user":"5646bb8fe4b0284900eef614"},{"problem":29,"code":"(fn[a](apply str (filter #(Character/isUpperCase %) a)))","user":"552800d7e4b0ffed3738f93a"},{"code":"#(.replaceAll %1 \"[^A-Z]\" \"\")","problem":29,"user":"514cfa27e4b019235f6c057d"},{"code":";(fn filter-upper-case\n;  [string]\n;  (apply str (filter #(Character/isUpperCase %) string)))\n#(apply str (re-seq #\"[A-Z]\" %))","problem":29,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn upp [tst] (reduce str (re-seq #\"[A-Z]+\" tst)))","problem":29,"user":"4edfb618535d10e5ff6f5343"},{"problem":29,"code":"(fn [s]\n  (let [upper? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n    (apply str (filter upper? s))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":29,"code":"#(reduce (fn [a s] (str a s)) \"\" (re-seq #\"[A-Z]\" %))","user":"59638af5e4b066ee0a44b0cc"},{"problem":29,"code":"(fn [s]\n (clojure.string/join (filter #(Character/isUpperCase %) s)))","user":"5c09e555e4b0bdcf453d16fd"},{"problem":29,"code":"(fn cap [x] \n\t(if (empty? x) \"\" \t\n  (if \n      (< -1 (.indexOf (seq \"ABCDEFGHIJKLMNOPQRSTUVMWXYZ\") (first x)) )\n      (apply str (first x) (cap (rest x)))\n      (cap (rest x))\n    )\n      )\n)","user":"553b8fdbe4b09218d5f45004"},{"code":"(fn [x]\n  (apply str (filter (fn [x] (< 64 (int x) 91)) x)))","problem":29,"user":"4e955b95535dbda64a6f6b33"},{"problem":29,"code":"(fn [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))","user":"55183a11e4b06a49daca83ca"},{"code":"(fn\n  [s]\n    (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"4e6ac7a8535d8ccf87e9ff03"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [c] (not (nil? (some #{c} (vec \"QWERTYUIOPLKJHGFDSAZXCVBNM\"))) )) s)))","user":"59908f3fe4b0866487ed0d50"},{"problem":29,"code":"#(clojure.string/join\n    (filter\n      (fn [x]\n        (Character/isUpperCase x))\n      %))","user":"55f48d1be4b06e875b46ce7b"},{"code":"(fn all-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"511d6a01e4b022853b0e07a5"},{"problem":29,"code":"(fn cap [x] (apply str (filter #(re-find #\"[A-Z]\"(str %)) x)))","user":"54630cdae4b01be26fd746bb"},{"code":"(fn [s]\r\n  \t(apply str (clojure.string/split s #\"[^A-Z]\")))","problem":29,"user":"4f041af6535dcb61093f6ba3"},{"problem":29,"code":"(fn [inp]\n  (->> inp\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))","user":"542c22bde4b0dad94371f29e"},{"code":"#(apply str (filter (fn [x] (<= (int \\A) (int x) (int \\Z))) %))","problem":29,"user":"4e837808535db62dc21a62d9"},{"code":"(fn [s] \n  (let [ALPHA (set (apply str (map char (range 65 91))))]\n    (apply str \n      (filter ALPHA s))))","problem":29,"user":"4ec34578535dcc7ae8597d51"},{"problem":29,"code":"(fn [xs]  (clojure.string/join ( filter #(<= (int \\A) (int %1) (int \\Z)) xs) ))","user":"56743413e4b05957ce8c612e"},{"problem":29,"code":"(fn [string]\n\t(clojure.string/join (re-seq #\"[A-Z]\" string)))","user":"5486e317e4b0e286459a11c0"},{"problem":29,"code":"(fn\n  [string]\n  (apply str (filter \n               #(some #{%} [\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z]) \n               (seq string))))","user":"59077d7be4b047aa04b1995b"},{"problem":29,"code":"; this one was a nightmare\n\n(fn [string]\n   (let [string-as-chars (seq string)\n         uppercase-chars (map char (range 65 91))]\n   (apply str\n     (filter\n       (fn [c] (some #(= c %) uppercase-chars))\n       string-as-chars))))","user":"570577bbe4b0b0fb43fd0672"},{"code":"(fn [txt] (apply str (remove #(not (Character/isUpperCase %)) txt)))","problem":29,"user":"50cf94bde4b0abc485cb9bb2"},{"problem":29,"code":"(fn a [s] (apply str (filter #(let [x (apply str [%])] (not= x (clojure.string/lower-case x))) s)))","user":"5e03fd15e4b0a607a9a45d66"},{"problem":29,"code":"#(apply str (re-seq #\"\\p{Upper}\" %1))","user":"60c4e5dfe4b0e0fa5f1b42cd"},{"code":"(fn f [x] (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"500e7063e4b04a05d36fcc07"},{"problem":29,"code":"(fn caps [sequence] (apply str (re-seq #\"[A-Z]+\" sequence)))","user":"5ac37d0fe4b0e27600da7718"},{"code":"(fn [coll] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) coll)))","problem":29,"user":"4e778d36535d324fb2983d71"},{"problem":29,"code":"(fn\n  [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))","user":"5f735915e4b02876ed9fd097"},{"problem":29,"code":"(fn [s] (reduce str (for [c s :when (Character/isUpperCase c)] c)))","user":"563ddefee4b0bfe05bf11857"},{"code":"(fn [s]\n  (apply str (re-seq #\"[A-Z]+\" s))\n  )","problem":29,"user":"512339fce4b03b44edbed434"},{"code":"(fn only-caps [s] (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"513dca07e4b0825f97f7f962"},{"problem":29,"code":"(fn [s] ((partial reduce str) (filter #(Character/isUpperCase %) s)))","user":"555e7210e4b0a2eb076a39b9"},{"problem":29,"code":"(fn [input]\n  (apply str \n  \t(filter\n              #(Character/isUpperCase %)\n              input)\n  )\n  )","user":"56004deee4b04bb52996e164"},{"problem":29,"code":"(fn [x] \n  (apply str \n     (filter \n          (fn [x] \n            (let [ascii (int x)]\n                 (and (> ascii 64) (< ascii 91))\n              )\n            )\n      x) ))","user":"5626447fe4b00e49c7cb47bd"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter (fn [c] (re-matches #\"[A-Z]\" (str c))) s)))","user":"5d6f0533e4b04d129b00f2d0"},{"problem":29,"code":"(fn[s](clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":29,"code":"(fn [string]\n  (apply str (re-seq #\"[A-Z]+\" string))\n)","user":"5e09fd26e4b099d064962f60"},{"code":"(fn [ins]\n  (reduce str\n    (filter #(Character/isUpperCase %) ins)))","problem":29,"user":"4db85c8e535d1e037afb218f"},{"problem":29,"code":"(fn [x](apply str (filter \n               #(and (>= 0 (compare \\A %1)) (<= 0 (compare \\Z %1))) \n               x)))","user":"5c784248e4b0fca0c162281f"},{"code":"(fn [in]\n   (clojure.string/join \n    (filter #(Character/isUpperCase %) (seq in))\n    )\n  )","problem":29,"user":"52463059e4b09dbe66b56198"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join \n   (filter #(re-matches #\"[A-Z]\" (str %))\n           (seq s))))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":29,"code":"(fn [string] (apply str (map #(if (re-find #\"[A-Z]\" (str %)) (str %) \"\") string)))","user":"5582dfb6e4b05c286339e10d"},{"code":"(fn [x]\n  (apply str\n    (map char\n      (filter #(and (< % 91) (> % 64))\n        (map int x)))))","problem":29,"user":"4ffb59f6e4b0678c553fc3cf"},{"code":"#(apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))\n;(apply str (filter #(Character/isUpperCase %) data))","problem":29,"user":"509fe759e4b08df8156e9e43"},{"code":"#(apply str (filter (fn [ch] (and (>= (int ch) 65) (<= (int ch) 90))) %))","problem":29,"user":"52aad30ce4b0c58976d9ac6d"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]+\" x))\n)","problem":29,"user":"4ea3f035535d7eef308072ca"},{"problem":29,"code":"(fn [arg]\n  (apply str (filter #(Character/isUpperCase %) arg)))","user":"5691ef12e4b0dcc4269f40f8"},{"code":"(fn [x] \n  (apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"4e52777f535d302ef430da76"},{"problem":29,"code":"(fn [input] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) input)))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter (fn [c] (and (= (str c) (clojure.string/upper-case c)) (not= (str c) (clojure.string/lower-case c)) ) ) (seq x))))","user":"5528a8cae4b0ffed3738f940"},{"code":"(fn [s] (apply str (filter #(let [c (int %)] (and (>= c (int \\A)) (<= c (int \\Z)))) s)))","problem":29,"user":"4dee4a9c535d08e6dec9fe11"},{"problem":29,"code":"(fn [input-str] (->> (filter #(Character/isUpperCase %) input-str)\n                        (apply str)))","user":"55df1985e4b050e68259b3eb"},{"problem":29,"code":"(fn\n  [string]\n  (clojure.string/join \"\" (re-seq #\"[A-Z]\" string)))","user":"582bd5fae4b051871117bf7b"},{"problem":29,"code":"(fn [sq]\n  (apply str (map char\n    (filter\n        #(and (>= % 65)\n              (<= % 90))\n        (map int (seq sq))))))","user":"574e7be7e4b02ea114799242"},{"problem":29,"code":"(fn [a] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) (seq a))))","user":"55ec879ae4b0121d4835fdc8"},{"problem":29,"code":"#(reduce str %1 (re-seq #\"[A-Z]\" %2)) \"\"","user":"58dbfb24e4b0a4d5acaab690"},{"code":"(fn [ s ] ( apply str (filter #(re-matches #\"[A-Z]\" (str %)) (apply list s) ) ) )","problem":29,"user":"4fc43a8ee4b081705acca346"},{"problem":29,"code":"(fn caps-only [str]\n\t(clojure.string/join (filter #(Character/isUpperCase  %) (seq str))))","user":"5c87c79be4b048ec896c591b"},{"code":"(fn [s]\r\n  (apply str \r\n         (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4de2f44f535d08e6dec9fdec"},{"problem":29,"code":"(fn isUpper [x]\n      (clojure.string/join \"\"\n       (filter #(Character/isUpperCase %) x)))","user":"5a2e638be4b09cafd31c7f7a"},{"code":"(fn [s] (reduce str \"\" (filter #(< 64 (int %) 97) s)))","problem":29,"user":"523b10dfe4b02f719975bdb8"},{"problem":29,"code":"(fn [X] (apply str (filter #(Character/isUpperCase %) X)))","user":"569c07b9e4b0542e1f8d145d"},{"problem":29,"code":"(fn [s] \n\t(apply str \n\t\t(filter \n\t\t\t#(and \n\t\t\t\t(>= (int %) (int \\A))\n\t\t\t\t(<= (int %) (int \\Z))) s)))","user":"53a94b63e4b047364c044434"},{"code":"(fn [x](apply str (re-seq #\"[A-Z]\" x) ))","problem":29,"user":"4f9a0f71e4b0dcca54ed6d04"},{"problem":29,"code":"#(clojure.string/join (clojure.string/split % #\"[^A-Z]\" ))","user":"5fabe67be4b08cb800c85ade"},{"code":"#(apply str (filter (fn [c] (java.lang.Character/isUpperCase c)) (seq %)))","problem":29,"user":"4e95f5a5535dbda64a6f6b3b"},{"problem":29,"code":"(fn sk-capital [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"51d42f44e4b013d740b70ddb"},{"code":"(fn [coll]\n \t\t (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"51fc9251e4b0f1313d468a27"},{"problem":29,"code":"(fn [s]\n  (reduce str\n          (filter (fn [c]\n                    (Character/isUpperCase c))\n                  s)))","user":"607b04e5e4b0a637ed780373"},{"code":"(fn [x] \n    (apply\n      str\n      (re-seq\n        #\"[A-Z]\"\n        x)))","problem":29,"user":"4f944f60e4b0dcca54ed6cc2"},{"problem":29,"code":"(fn [s] (reduce str \"\" (filter #(java.lang.Character/isUpperCase %)s)))","user":"589e22fae4b02bd94d917e56"},{"code":"(fn capsonly [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [x] (apply str (remove #(or (< (int %) 65) (> (int %) 90)) x)))","problem":29,"user":"4f11dea7535d64f603146425"},{"problem":29,"code":"(fn [x]\n(apply str (re-seq #\"[A-Z]\" x)))","user":"53a7771ee4b047364c04441b"},{"problem":29,"code":"(fn my-upcase-filter [s]\n  (clojure.string/join\n    (filter (complement nil?)\n      (for [ch s]\n        (if (java.lang.Character/isUpperCase ch)\n          ch\n          nil)))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn getCaps [s]\n  (apply str (filter #(and\n            (>= (int %) (int \\A))\n            (<= (int %) (int \\Z))) s)))","problem":29,"user":"4fb804f7e4b081705acca2d6"},{"problem":29,"code":"(fn [s]\n  (reduce str ((fn [i]\n                 (re-seq #\"[A-Z]+\" i)) s)))","user":"54a80855e4b09f271ff37c9e"},{"code":"(fn [a] (apply str (filter \n    #(and \n       (> (int %) 64 )\n       (< (int %) 91 )\n       )\n   (seq a)))\n  )","problem":29,"user":"510b704ee4b078ea71921100"},{"problem":29,"code":"(fn p29 [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":29,"code":"(comp (partial apply str)  (partial  filter (fn  [x] (let [c (int x)]\n          (and (> c 64) (> 91 c))))))","user":"5d917ef0e4b0915913b1d402"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) (int \\A))\n                           (<= (int %) (int \\Z)))\n                     (seq s))))","user":"598601f9e4b021a7a535fe79"},{"code":"(fn uppers-only [x]\n   (clojure.string/join (filter #(Character/isUpperCase %) x)))","problem":29,"user":"51811d5ee4b06547fbae113c"},{"problem":29,"code":"#(apply str (reduce (fn [capital c] \n                         (println capital)\n                          (if (Character/isUpperCase c)\n                            (conj capital c)\n                            capital)) '[] %))","user":"569d3f9ae4b0542e1f8d147a"},{"code":"(fn [input] (apply str (re-seq #\"[A-Z]\" input)))","problem":29,"user":"52fc34cee4b047fd55837015"},{"problem":29,"code":"(fn caps [s] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","user":"6033c42ce4b0d5df2af222c3"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (into [] s))))","user":"5457767ae4b01be26fd7460c"},{"problem":29,"code":"(fn upper-case [phrase] (apply str (filter #(Character/isUpperCase %) phrase)))","user":"5d321852e4b01671435dbce8"},{"code":"#(\n  loop [caps \"\"\n        resto %]\n      (if (empty? resto)\n          caps\n          (let [c (str (first resto))] \n           (if (and (= (clojure.string/upper-case c) c) (not= (clojure.string/lower-case c) c))\n             (recur (str caps c) (rest resto))\n             (recur caps (rest resto))))))","problem":29,"user":"52bdd135e4b07a9af579230a"},{"problem":29,"code":"(fn [xs]\n  (reduce str (re-seq #\"[A-Z]\" xs))\n  )","user":"5f727be9e4b02876ed9fd08d"},{"problem":29,"code":"#(reduce str (re-seq #\"[A-Z]+\"  %))","user":"547e6fd2e4b0c51c1f4d730b"},{"problem":29,"code":"(fn [s] (apply str (filter #(contains? (set (map char (range 65 91))) %) (vec s))))","user":"56af842de4b061e3ca319ad2"},{"problem":29,"code":"(fn\n  [string]\n  (clojure.string/join (re-seq #\"[A-Z]\" string)))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn upper [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"5264b4a9e4b03e8d9a4a70e0"},{"code":"#(reduce (fn [x y]\r\n          (if (Character/isUpperCase y)\r\n            (str x y)\r\n            x)) \"\" %)","problem":29,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [coll]\r\n  (apply str (filter #(Character/isUpperCase %) coll)))","problem":29,"user":"4dd4f0a8535dae65d5c462e4"},{"code":"(fn\n  [string]\n  (apply str \n         (#(filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %) string)))","problem":29,"user":"50eb4c32e4b0346a3e988cbf"},{"code":"(fn [s] (apply str (map char (filter (fn [x] (and (>= x 65) (<= x 90))) (map int (seq s))))))","problem":29,"user":"51757af0e4b085adf681d873"},{"problem":29,"code":"(fn [x] (reduce str (filter #(and (> (int %) 64) (< (int %) 91)) x)))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":29,"code":"#(apply str (map char (filter (fn [x] (> 91 x 64)) (map int %))))","user":"54349368e4b0b6b47310fcf1"},{"problem":29,"code":"(fn [v] (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) v)))","user":"55074092e4b021ccfedb96a4"},{"problem":29,"code":"(fn [coll]\n (apply str (filter #(some #{%} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") coll))\n)","user":"56c72507e4b0ed865f9758b7"},{"code":"(fn fil-str [line]\r\n  (apply str (filter #(Character/isUpperCase %) (seq line))))","problem":29,"user":"4f17ab99535d64f603146457"},{"code":"(fn [v] (apply str (filter #(Character/isUpperCase %) v) ))","problem":29,"user":"538d7e2ee4b0b51d73faae70"},{"problem":29,"code":"(fn [s] (apply str (map char (filter #(and (<= (int \\A) %) (<= % (int\n\\Z))) (map int s)))))","user":"4e1e89a2535d04ed9115e809"},{"problem":29,"code":"(fn fn29 [s]\n   (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s))\n)","problem":29,"user":"4f082ad1535dcb61093f6c32"},{"code":"(fn only-caps [a-str]\n    (apply str (filter #(Character/isUpperCase %) a-str)) \n )","problem":29,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [phrase]\n  (apply str (filter #(Character/isUpperCase %) phrase)))","problem":29,"user":"51a89081e4b08d8ec191b814"},{"code":"#(clojure.string/join (re-seq #\"[A-Z]\" %) )","problem":29,"user":"531bfb69e4b08068f379ed97"},{"problem":29,"code":"(fn [s]\n  (apply str (reverse (into () (map str (filter #(Character/isUpperCase %) s))))))","user":"5bab8c06e4b0a20761a2347e"},{"code":"#(apply str (re-seq #\"[A-Z]+\" %) )","problem":29,"user":"4e952463535dbda64a6f6b31"},{"problem":29,"code":"(fn [s] (apply str \n               \t(filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))","user":"51515a19e4b03e678e393acc"},{"problem":29,"code":"(fn [target]\n  (clojure.string/replace target #\"[^A-Z]\"  \"\"))","user":"5570a388e4b09a3098a5252f"},{"code":"#(clojure.string/join (filter (fn [^char c](Character/isUpperCase c)) %))","problem":29,"user":"4eaf08ce535d7eef3080732d"},{"code":"(fn f [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52b0323ee4b0c58976d9acc6"},{"problem":29,"code":"(fn [a] \n (reduce str (filter #(Character/isUpperCase %) a)))","user":"5875f2c5e4b01531a375ea77"},{"code":"(comp (partial apply str)\n      (partial re-seq #\"\\p{Upper}+\"))","problem":29,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":29,"code":"(fn [chars]\n    (apply str\n     (filter (fn [c] (< 64 (int c) 91)) chars))\n     )","user":"55955c0be4b0c79f6e1db967"},{"problem":29,"code":"(fn caps\n  [aseq]\n  (clojure.string/join (re-seq #\"[A-Z]\" aseq)))","user":"54ba8076e4b0ed20f4ff6eb5"},{"problem":29,"code":"(fn [word] (apply str (filter #(<= (int \\A) (int %) (+ (int \\Z) 1)) word)))","user":"57873017e4b0ebec4cfb7503"},{"code":"(fn [s]\n  (apply str (filter \n   #(and (< 64 (int %)) (> 91 (int %))) (seq s))))","problem":29,"user":"50ccf729e4b0f7a459302aac"},{"problem":29,"code":"(fn [mystr] (apply str (re-seq #\"[A-Z]+\" mystr)))","user":"58950f29e4b00487982d5270"},{"problem":29,"code":"(fn [theString] (reduce str (filter #(Character/isUpperCase %) theString)))","user":"554bc64ae4b0a04f79299598"},{"code":"(fn [s]\n  (apply str\n    (filter #(let [n (int %)] (and (>= n (int \\A)) (<= n (int \\Z)))) s)))","problem":29,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":29,"code":"(fn getc [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"56f15eade4b04a395b9a048e"},{"code":"(comp (partial apply str) #(filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"52ce5056e4b07d0d72b2738f"},{"problem":29,"code":"(fn[x] (apply str(filter #(Character/isUpperCase %) x)))","user":"52149e21e4b0961f15ac4d94"},{"code":"#(apply str (re-seq #\"[A-Z]+\" %))\n; (fn [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn xx   \n   [chas]\n    (let [chs (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")]\n      (apply str (filter  #(contains? chs %) chas))))","problem":29,"user":"50b0804de4b009df37c708bb"},{"problem":29,"code":"(fn  [x]\n (apply str (reduce (fn [newstring y] (if (contains? (set (map char (range (int \\A) (inc (int \\Z))))) y)\n                            (conj newstring y) newstring)) [] x)))","user":"58e6a2c5e4b056aecfd47cba"},{"code":"(fn only-caps [xs]\n    (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"5186134ce4b0da5a5be3bac7"},{"problem":29,"code":"(fn get-caps [cadena]\n  (reduce str (filter #(Character/isUpperCase %) cadena)))","user":"599f7a7ee4b0871e7608b81e"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %1) (int \\A)) (<= (int %1) (int \\Z))) (seq s))))","user":"56824e1be4b0945ebc182a91"},{"problem":29,"code":"#(clojure.string/join (filter (fn [^Character c] (Character/isUpperCase c)) %))","user":"5c395c65e4b0d62ef62d9f8a"},{"code":"(fn filter-caps [s]\n  (apply str (filter #(re-find #\"[A-Z]\" (str %)) s)))","problem":29,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":29,"code":"(fn [xs]\n (apply str (filter #(Character/isUpperCase %)  xs)))","user":"546176e7e4b01be26fd746a2"},{"problem":29,"code":"(fn [x] (reduce str (filter #(and (= (str %) (clojure.string/upper-case (str %)) ) (Character/isLetter %)) x)))","user":"575e71a2e4b0846ea39baf26"},{"problem":29,"code":"(fn get-caps [string] \n     (apply str (re-seq  #\"[A-Z]\" string)))","user":"56ede653e4b04a395b9a0449"},{"code":"#(apply str (filter (fn [x] (<= 65 (int x) 90)) %))","problem":29,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn [x]\n\n  (clojure.string/join \"\" (filter (fn [z]\n            (if (= (clojure.string/lower-case z) (clojure.string/upper-case z) )\n              false\n              (= z (clojure.string/upper-case z) )\n              )\n            ) (seq  (map #(str %) x)))\n   )\n  )","problem":29,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":29,"code":"#(clojure.string/join (filter (fn [x] (not= (clojure.string/lower-case (str x)) (str x))) (seq %)))","user":"5fdbde92e4b05ac5b16ea137"},{"code":"(fn [a-string] (apply str (filter #(not= (str %) (.toLowerCase (str %))) a-string \n)))","problem":29,"user":"4e6dc95a535d5021c1a895f1"},{"problem":29,"code":"(fn [s] (reduce str (filter #(some (hash-set %) (map char (range (int \\A) (inc (int \\Z))))) s)))","user":"53e4b5a3e4b036ad0777e44b"},{"problem":29,"code":"(fn [x]\n  (apply str\n   (filter\n    (fn [y]\n      (.contains (into [] \"QWERTYUIOPASDFGHJKLZXCVBNM\") y))\n    x)))","user":"5f313d01e4b0574c87022c28"},{"problem":29,"code":"(fn [string]\n    (apply str \n        (filter #(<= (int \\A) (int %) (int \\Z)) (seq string))))","user":"5b62764ae4b0c6492753e725"},{"code":"(fn [input-str]\n  (loop [my-seq (re-seq #\"[A-Z]+\" input-str) my-str \"\"]\n    (if (empty? my-seq)\n      my-str\n      (recur (rest my-seq) (str my-str (first my-seq))))))","problem":29,"user":"51991a89e4b068aa333628fd"},{"problem":29,"code":"(fn [ x ]\n\n(apply str (filter #(Character/isUpperCase %) x ) )\n  \n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn [s] \n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)))","problem":29,"user":"521b481de4b0c4ef0be83037"},{"code":"(fn [s] (\n         apply\n         str\n         (filter #(Character/isUpperCase %) s)\n         ) \n  )","problem":29,"user":"5272d528e4b03e8d9a4a7454"},{"problem":29,"code":"(fn [x] (apply str (filter #(<= 65 (int %) 90) x)))","user":"53cf88c9e4b00fb29b2212fe"},{"problem":29,"code":"(fn caps [s] (apply str (for [t s\n      :let [c t]\n      :when (and (> 91 (int t)) (< 64 (int t))) ] c)))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":29,"code":"(fn [x] (->(str x)\n   (clojure.string/replace #\"[^\\p{Upper}]\" \"\")))","user":"5924009ce4b072a2710fce45"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (map str (filter #(Character/isUpperCase %) x))))","user":"5f27cc7fe4b033932238a646"},{"code":"(comp (partial apply str) (partial re-seq #\"[A-Z]\"))","problem":29,"user":"4e9660ec535dbda64a6f6b44"},{"code":"#(apply str (re-seq #\"[\\p{Upper}]\" %))","problem":29,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":29,"code":"(fn [s] (apply str  (filter #(and (= (str  %) (clojure.string/upper-case %))\n                                      (not= (str %) (clojure.string/lower-case %))\n                                      ) s)))","user":"5646dff3e4b0284900eef615"},{"code":"(fn caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f50cadce4b03ad3f0c10d0f"},{"problem":29,"code":"(fn [coll] (apply str (filter #(not= (str %) (clojure.string/lower-case %)) coll)))","user":"5daa0d56e4b000c986472c3c"},{"code":"(fn\n  [s]\n  (apply str\n         (->> (seq s)\n              (filter #(= (str %) (.toUpperCase (str %))))\n              (filter #(and\n                        (> (int %) 64)\n                        (< (int %) 122))))))","problem":29,"user":"4ff58b05e4b0678c553fc36b"},{"code":"(fn [arg]\n  (reduce str (filter #(Character/isUpperCase %) arg)))","problem":29,"user":"4eb7b049535d7eef30807377"},{"problem":29,"code":"(fn [a] (.replaceAll a \"[^A-Z]\" \"\"))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn [text] (apply str (filter #(Character/isUpperCase %) text)))","problem":29,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"4f0348b4535dcb61093f6a84"},{"problem":29,"code":"(fn getcaps [s] (apply str (filter \n                              (fn upper? [x] (not (= (str x) (clojure.string/lower-case x)))) \n                              s)))","user":"5bcf95ace4b0e9689409ee2e"},{"code":"#(apply str (filter (fn [s] (re-find #\"[A-Z]\" (str s)))  (seq %)))","problem":29,"user":"4ebc829e535dfed6da9c6d86"},{"problem":29,"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]{1}\" %))","user":"5573a505e4b0aa18f790f3fa"},{"problem":29,"code":"(fn [s] (apply str\n          (filter \n           (fn [c] (let [c (int c)\n                         a (int \\A)\n                         z (int \\Z)]\n                     (and (>= c a) (<= c z))))\n           (map identity s))))","user":"56cf115de4b0ea9b8538f765"},{"code":"#(apply str (filter (fn [c] (Character/isUpperCase c)) %))","problem":29,"user":"4e1582f0535d04ed9115e7e4"},{"code":"(fn [col]\n  (apply str (filter #(Character/isUpperCase %) (seq col))))","problem":29,"user":"527dc2aee4b0757a1b17138d"},{"problem":29,"code":"(fn [coll] (apply str (map #(re-find #\"[A-Z]\" (str %)) coll)))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":29,"code":"(fn [ch] (clojure.string/join \"\" (filter #(Character/isUpperCase %) ch)))","user":"560d24a2e4b05f002753df34"},{"code":"(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4f0364d5535dcb61093f6a9e"},{"code":"#(->> %\n         (map int)\n(filter (fn [x] (<= 65 x 90)))\n         (map char)\n         (apply str))","problem":29,"user":"51f2b8f1e4b0210f90e74556"},{"code":"#(apply str \n  (filter \n    (fn [l] \n      (boolean \n        (and \n          (>= (int l) 65) \n          (<= (int l) 90)\n        )\n      )\n    ) \n    (seq %)\n  )\n)","problem":29,"user":"4edfd846535d10e5ff6f5345"},{"code":"(fn [x] (reduce str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":29,"code":"(fn [x] \n    (apply str\n      (filter \n        (fn [y] (and (>= (int y) 65) (<= (int y) 90))) \n        (seq x)\n      )\n    )\n  )","user":"5d7faa52e4b0915913b1d365"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(java.lang.Character/isUpperCase %)))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [s] (apply str (re-seq (re-pattern \"[A-Z]\") s)))","problem":29,"user":"4ec5a6ee535d6d7199dd36ae"},{"code":"#(apply str(re-seq #\"[A-Z]+\" %))","problem":29,"user":"4e3bcca9535deb9a81d77f54"},{"problem":29,"code":"(fn [my-string]\n  (apply str (filter #(Character/isUpperCase %) my-string)))","user":"5e724492e4b085ba37836dc7"},{"code":"(fn [string-to-filter]\r\n  (apply str (for [ch string-to-filter :when (java.lang.Character/isUpperCase ch)] ch)))","problem":29,"user":"4e7dfd48535db169f9c796fa"},{"problem":29,"code":";(fn [s] (apply str (map #(clojure.string/replace % #\"[^A-Z]\" \"\") s)))\n#(apply str (re-seq #\"[A-Z]\" %1))","user":"5f9f032fe4b0715f5002d839"},{"code":"(fn [s]\n  (apply str (filter #(and (>= (compare % \\A) 0) (>= (compare \\Z %) 0))  s)))","problem":29,"user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [x]\n  (apply str (filter #((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %) x)))","problem":29,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":29,"code":"(fn [strr] (apply str (filter #(Character/isUpperCase %)  strr)))","user":"5eb4e4abe4b00a66d4a95222"},{"problem":29,"code":"#(apply str(filter (set (map char (range 65 91))) %))","user":"5410499de4b01498b1a719a6"},{"code":"(fn [x]\n  (let [us (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str (filter us x))))","problem":29,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn [xs] (apply str (filter #(Character/isUpperCase %1) xs)))","problem":29,"user":"519b231ee4b0ac1b7dced6a2"},{"code":"(fn [x]\n  ((fn b [y z] (cond (empty? y) (apply str z)\n                       (Character/isUpperCase (first y)) (b (rest y) (conj z (first y)))\n                       :else (b (rest y) z)))\n   x []\n))","problem":29,"user":"5099283ce4b0cae2931060af"},{"problem":29,"code":"(fn [palabra] (\nclojure.string/join (clojure.string/split palabra #\"[^A-Z]\")\n  ))","user":"56f73913e4b08e7d20b9682d"},{"problem":29,"code":"(fn foo [word] (apply str (filter (fn foo [ch] (and (>= (int \\Z) (int ch)) (<= (int \\A) (int ch)))) word)))","user":"6028365be4b0d5df2af22242"},{"code":"(fn [s]\n    (let [Ai (int \\A)\n          Zi (int \\Z)]\n      (reduce\n        (fn [accum x]\n          (let [ix (int x)]\n            (if (and (<= Ai ix) (>= Zi ix))\n              (str accum x)\n              accum)))\n        \"\" s)))","problem":29,"user":"501f36dde4b0cb6ebc0a42e4"},{"code":"#(reduce str ((fn [re] (re-seq #\"[A-Z]\" re)) %))","problem":29,"user":"4f61c3cfe4b0defedf855fc6"},{"code":"(fn [s] (clojure.string/join \"\" (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"50d04a92e4b00b15ecee975a"},{"code":"(fn [s]\n  (->> s\n    (filter #(Character/isUpperCase %))\n    (apply str)))","problem":29,"user":"4e521cef535d302ef430da6d"},{"problem":29,"code":"(fn [xs]\n    (->> xs\n         (filter (fn [c] (re-matches #\"[A-Z]\" (str c))))\n         (apply str)))","user":"5c3a896be4b0d62ef62d9f94"},{"problem":29,"code":"(fn [string] \n  (apply str (filter #(Character/isUpperCase %) (seq string))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":29,"code":"(fn [s] (apply str (filter #(<= (int \\A) (int %) (int \\Z)) (seq s))))","user":"54165291e4b01498b1a719fb"},{"problem":29,"code":"(fn caps [stg]\n  (reduce str (re-seq #\"[A-Z]+\" stg)))","user":"6020365ae4b0bf4ca6b10960"},{"problem":29,"code":"(fn[s](clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"5bb58390e4b0a20761a2356d"},{"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll))\n  )","problem":29,"user":"502be4fae4b08f5602f232eb"},{"problem":29,"code":"(fn chrs\n  [x]\n  (apply str (filter #(Character/isUpperCase %) x)))","user":"5401aefbe4b0df28a13c62c7"},{"code":"#(apply str (re-seq (re-pattern \"[A-Z]+\") %))","problem":29,"user":"4ea2ddf1535d7eef308072bf"},{"problem":29,"code":"(fn [inp]\n  (apply str\n       (filter\n        #(Character/isUpperCase %)\n        (seq inp))))","user":"592334c7e4b0a390037439ee"},{"code":"(fn [s] (apply str (filter #(and (>=  (int %) (int \\A)) (<=  (int %) (int \\Z))) s)))","problem":29,"user":"4f280840e4b0d6649770a010"},{"problem":29,"code":"(fn [s] (apply str (filter #(re-find #\"[A-Z]\" %) (map str (seq s)))))","user":"57a5da5ee4b0a966079561fe"},{"problem":29,"code":"(fn xe [x]\n  (clojure.string/join (remove (fn [y] (= (clojure.string/lower-case y) (str y))) x)))","user":"542c2de0e4b0dad94371f29f"},{"problem":29,"code":"#(clojure.string/replace % #\"[^ABCDEFGHIJKLMNOPQRSTUVWXYZ]\" \"\")","user":"5cae5247e4b026601754b884"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(not= (str %) (clojure.string/lower-case %))))","user":"57a8eba2e4b0a96607956225"},{"problem":29,"code":"(fn only-caps [a-str] (apply str (re-seq #\"[A-Z]+\" a-str)))","user":"545188ebe4b0e397800069b2"},{"code":"(fn [s] (apply str (let [ss (seq s)] (filter #(Character/isUpperCase %) ss))))","problem":29,"user":"51365524e4b04ac1f358dd52"},{"problem":29,"code":"(fn\n  [string]\n  (loop [[head & tail] (seq string)\n         new-string \"\"]\n    (if (nil? head)\n      new-string\n      (recur tail (if (and (>= (int head) 65) (<= (int head) 90))\n                    (clojure.string/join [new-string head])\n                    new-string)))))","user":"5f9c3f63e4b0715f5002d820"},{"problem":29,"code":"(fn get-caps\n  [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (apply str)))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":29,"code":"(fn [input] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %)) input)))","user":"55989c25e4b031d6649c9b9b"},{"code":"(fn re [s] (apply str(filter \n         #(and (<= (int %) (int \\Z)) (<= (int \\A) (int %)))\n         s))\n  )","problem":29,"user":"51037468e4b00c483ae17702"},{"problem":29,"code":"(fn\n  [string]\n    (apply\n      str\n      (filter \n        (fn\n          [letter]\n          (Character/isUpperCase letter))\n     (char-array string))))","user":"586a657de4b0f14aab7c88bd"},{"problem":29,"code":"(fn [word] (apply str \n                  (filter #(re-matches #\"[A-Z]\" (str %))\n                          (seq word)\n                   )\n             )\n  )","user":"57d588a5e4b0bd073c2023b6"},{"problem":29,"code":"(fn [x]\n    (apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) x)))","user":"5ec66326e4b08d0ec38692d5"},{"problem":29,"code":"(fn [coll] (clojure.string/join \"\" (filter #(Character/isUpperCase %) coll)))","user":"5b13f482e4b0cc2b61a3be58"},{"problem":29,"code":"(fn caps [s]\n  (reduce str (filter #(Character/isUpperCase %1) s)))","user":"5efdb9bae4b0cf489e8d7f02"},{"problem":29,"code":"(fn [in] (clojure.string/join (filter #(Character/isUpperCase %) in)))","user":"56b35565e4b0982f16b37e16"},{"problem":29,"code":"(fn [input]\n  (loop [letters (seq input) result \"\"]\n    (if (empty? letters) result\n        (let [letter (first letters)\n              next-result (if (Character/isUpperCase letter) (str result letter) result)]\n          (recur (rest letters) next-result)))))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn uppers [string]\n  (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) string))\n  )","problem":29,"user":"4f299ad8e4b0d6649770a02c"},{"code":"(fn gcaps [s]\n  (apply str (filter\n              #(and\n                (<= (int \\A) (int %1))\n                (<= (int %1) (int \\Z)))\n              s))\n  )","problem":29,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [s] (apply str (filter #(and (> 1 (.compareTo \\A %)) (< -1 (.compareTo \\Z %))) s)))","problem":29,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn [s] (apply str (filter #(apply <= (map int [\\A % \\Z])) s)))","problem":29,"user":"4e7e93f5535db169f9c7971a"},{"code":"(fn capital [s]\n  (if (empty? s)\n    (str s)\n    (if (Character/isUpperCase (first s))\n      (str (first s) (capital (subs s 1)))\n      (capital (subs s 1)))))","problem":29,"user":"4fc50441e4b081705acca36f"},{"problem":29,"code":"#(reduce (fn [acc v]\n           (if (Character/isUpperCase v)\n             (str acc v)\n             acc)) \"\" %)","user":"5a6bf911e4b0512ff01cda4c"},{"problem":29,"code":"#(apply str (map (into #{} \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":29,"code":"(fn getCaps\n  [s]\n  (->> s\n       (seq)\n       (map #(if (and (= (clojure.string/upper-case %) (str %)) (java.lang.Character/isLetter %)) %))\n       (clojure.string/join)))","user":"5e9636fee4b0fbed045a3816"},{"problem":29,"code":"(fn caps-only\n  [x]\n  (apply str (re-seq #\"[A-Z]\" x)))","user":"5f3103aee4b0574c87022c24"},{"problem":29,"code":"(fn [oldstring]  (apply str (re-seq #\"[A-Z]\" oldstring)))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn [seq]\n (apply str (filter #(Character/isUpperCase %) seq))\n   )","problem":29,"user":"52dced9de4b09f7907dd13d7"},{"code":"(fn [s] (apply str (map #(if(Character/isUpperCase %) %) s)))","problem":29,"user":"4fdf566fe4b05e33b9224f99"},{"problem":29,"code":"(comp (partial apply str)(partial filter #(Character/isUpperCase %)))","user":"60b616e1e4b0e0fa5f1b4243"},{"problem":29,"code":"#(apply str (filter (partial contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}) %))","user":"5e909685e4b0cb016954634d"},{"code":"#(apply str (filter \n  #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %))","problem":29,"user":"4ebbffbd535dfed6da9c6d79"},{"code":"(fn [x] (clojure.string/join (filter #(Character/isUpperCase %) (seq x)) ))","problem":29,"user":"512318b6e4b03b44edbed433"},{"code":"#(apply str\n\t       (loop [s %\n\t\t      ret []]\n\t\t (if-let [f (first s)]\n\t\t   (if (and (<= 65 (int f))\n\t\t\t    (>= 90 (int f)))\n\t\t     (recur (rest s) (conj ret f))\n\t\t     (recur (rest s) ret))\n\t\t   ret)))","problem":29,"user":"4f05872b535dcb61093f6bf8"},{"code":"(fn [s] (apply str (filter #(not (= (.indexOf \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str%)) -1)) s)))","problem":29,"user":"510967aae4b07c05fdf6dc0f"},{"problem":29,"code":"#(let [m (re-matcher #\"[A-Z]\" %)] (loop [match (re-find m), res []] (if match (recur (re-find m) (conj res match)) (reduce str res) )))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":29,"code":"(fn [s] (reduce str (filter #(re-matches #\"[A-Z]\" %) (map str s))))","user":"56fa972be4b07572ad1a88c2"},{"problem":29,"code":"(fn myfn [x]\n  (apply str (filter #(not (= (first (clojure.string/lower-case %)) %)) x)))","user":"56b280e3e4b0982f16b37e06"},{"problem":29,"code":"(fn [coll] \n  (apply str (filter #(contains? (set (map char (range 65 91))) %) coll)))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"(fn [s] \n   (clojure.string/replace s #\"[^A-Z]\" \"\")\n )","problem":29,"user":"50e448bae4b0463d3207248d"},{"code":"(fn [s] (let [valid (range 65 91)\n              is-in? (fn [x coll] (some (partial = x) coll))]\n          (loop [final []\n                 remain s]\n            (cond\n             (empty? remain) (reduce str final)\n             (is-in? (int (first remain)) valid) (recur (conj final (first remain)) (next remain))\n             true (recur final (next remain))))))","problem":29,"user":"507a33dee4b08327cd804a68"},{"code":"(fn [xs] (apply str (filter (fn [x] (Character/isUpperCase x)) xs)))","problem":29,"user":"4dad8d4bc9a9d6ed1799dc57"},{"problem":29,"code":"(fn f [x]\n  (apply str (filter (fn [c]\n          (Character/isUpperCase c))  (seq x))))","user":"546ff701e4b00cfc9eacc1b3"},{"code":";(fn [string]\n;  (let [upper-case-letters (set (map char (range 65 91)))]\n;    (clojure.string/join \"\" (filter upper-case-letters string))))\n(fn [string]\n    (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"534da51fe4b084c2834f4aa4"},{"problem":29,"code":"(fn [string]\n  (apply str\n         (filter #(and (= % (clojure.string/upper-case %))\n                   \t    (not= % (clojure.string/lower-case %)))\n          \t     (clojure.string/split string #\"\"))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn [what]\n    (let [uppers \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        filtered (filter (fn [char] (some #(= char %) uppers)) (seq what))]\n    (apply str filtered)))","problem":29,"user":"504e2011e4b0f6ff3350c469"},{"problem":29,"code":";#(apply str (re-seq #\"[A-Z]\" %))\n#((comp (partial apply str) (partial re-seq #\"[A-Z]\")) %)","user":"5fb3a096e4b08cb800c85b35"},{"code":"#(apply str  (re-seq #\"[A-Z]\" %))","problem":29,"user":"4ea5e794535d7eef308072df"},{"code":"(fn [input]\n  (clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq input))))","problem":29,"user":"5341b141e4b00652c8746ecf"},{"problem":29,"code":"#(->> % (re-seq #\"[A-Z]\") (clojure.string/join))","user":"59cdea74e4b0ef0a1e9b5b47"},{"problem":29,"code":"(fn [string]\n  (let [filtered (filter #(Character/isUpperCase %) (seq string))\n        ^StringBuilder string-builder (StringBuilder.)\n        new-string (reduce (fn [l r] (.append l r)) string-builder filtered)]\n    (.toString new-string)))","user":"587100d6e4b01531a375e9f0"},{"problem":29,"code":"(fn [n] (apply str (map char (filter #(<= (int \\A) % (int \\Z)) (map int (seq n))))))","user":"530ec8d4e4b08068f379ecc2"},{"code":"(fn[s] (apply str (remove #(or (< (int %) (int \\A)) (> (int %) (int \\Z))) s)))","problem":29,"user":"4f99ae4ae4b0dcca54ed6d00"},{"problem":29,"code":"(fn uppers [s]\n  (reduce str \"\"\n   (filter #(if (not= (.toLowerCase (str %)) (str %)) true false) s)))","user":"56f53962e4b046a417f9206c"},{"problem":29,"code":"#( clojure.string/join \"\" (filter (set( map char (range  65 (+ 65 26)))) %  ))","user":"5b819312e4b047b03b20378d"},{"problem":29,"code":"(fn\n  [s]\n  (clojure.string/join\n   (filter #(and (>= (int %) 65) (<= (int %) 90)) s)))","user":"5f5df0bfe4b02876ed9fcfeb"},{"problem":29,"code":"(fn [word] (apply str (filter \n                       #(re-matches #\"[A-Z]\" (str %))  \n                      (seq word))))","user":"5463c452e4b01be26fd746c4"},{"code":"(fn caps [s]\n  (if (empty? s) \n    \"\"\n    (let [f (first s)]\n      (if (and (Character/isLetter f) \n               (Character/isUpperCase f))\n        (str f (caps (rest s)))\n        (caps (rest s))))))","problem":29,"user":"503e6047e4b06c4e0e1fa266"},{"problem":29,"code":"(fn uppers [mstr]\n  (reduce str \n          (filter #(and (<= (int %1) (int \\Z))\n                        (>= (int %1) (int \\A)))\n                  mstr)))","user":"589c2e3fe4b00487982d5357"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (> (int %) 64) (< (int %) 91)) s)))","user":"52ed7458e4b0a18b0f5dd9ed"},{"code":"(fn just-caps [string]\n  (apply str (filter #(Character/isUpperCase %) (seq string))))","problem":29,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn [pal]\n  (apply str (filter #(Character/isUpperCase %) \n                     pal\n\n             )\n  )\n )","problem":29,"user":"50254e70e4b0b0b8afb15aa7"},{"code":"(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      (apply str acc)\n      (let [h (first c), t (rest c)]\n        (if (Character/isUpperCase h)\n          (recur t (conj acc h))\n          (recur t acc))))))","problem":29,"user":"50a83794e4b054305ba5a831"},{"code":"(fn [s] (->>\n  s\n  (filter #(Character/isUpperCase %))\n  (apply str)))","problem":29,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn only-caps [string] (apply str (filter #(Character/isUpperCase %) string)))","problem":29,"user":"5213cd45e4b0a98dd8fc4bd6"},{"code":"(fn [chaine]\n  (apply str (filter #(Character/isUpperCase %) chaine)))","problem":29,"user":"51126a28e4b0350614f07a74"},{"code":"(fn [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))","problem":29,"user":"501c1492e4b086d93747d180"},{"problem":29,"code":"#(apply str \n        (filter\n         (fn [char]\n           (Character/isUpperCase char))\n         %))","user":"55344b75e4b09218d5f44f99"},{"problem":29,"code":"(fn [x] (reduce str (filter (fn [y] (Character/isUpperCase y)) x)))","user":"56798d83e4b05957ce8c618b"},{"problem":29,"code":"(fn [s] \n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"546d41bde4b00cfc9eacc18c"},{"problem":29,"code":"(fn [in] (reduce str (re-seq #\"[A-Z]\" in)))","user":"5918db70e4b09b4ee5954bbb"},{"problem":29,"code":"(fn [string]\n (->> string (filter #(Character/isUpperCase %)) (apply str)))","user":"5dcbe1d7e4b02b31cc3da3bf"},{"problem":29,"code":"#(reduce (fn [res v]\n          (let [upper-case-chars  (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n                upper? (fn [c] (contains? upper-case-chars c))]\n            (if (upper? v)\n              (str res v)\n              res))) \"\" %)","user":"560ee566e4b05f002753df57"},{"problem":29,"code":"(fn [x] (->> x\n             (filter #(Character/isUpperCase %))\n             (reduce str)))","user":"593dde1be4b069cdc2982baf"},{"code":"(fn CAPS [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\"))","problem":29,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":29,"code":"#(apply str\n(\n  re-seq #\"[A-Z]\" %\n         ))","user":"5688d6a8e4b0dcc4269f4071"},{"problem":29,"code":"(fn [s] (apply str (for [c s :when (Character/isUpperCase c)] c)))","user":"5cab33e7e4b048ec896c5c48"},{"code":"(fn [s] \n    (apply str(filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) (seq s))))","problem":29,"user":"511dada0e4b0a5c68a34840c"},{"code":"(fn [text] (reduce str (remove #(or (< (int %) (int \\A) ) (> (int %) (int \\Z))) (seq text))))","problem":29,"user":"538c9144e4b0b51d73faae5d"},{"code":"(fn [xs]\n    (apply str (re-seq #\"[A-Z]\" xs)))","problem":29,"user":"526302eee4b03e8d9a4a70a2"},{"problem":29,"code":"(fn [word] \n  (apply str \n    (filter #(not= (clojure.string/lower-case %) %) (clojure.string/split word #\"\"))))","user":"55c6fd60e4b0e31453f649c9"},{"code":"(fn only-caps [xs]\n  (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"51ac6360e4b09397d510976c"},{"code":"(fn [s]\n  (apply str (map first (filter (fn [[c1 c2]] (not= c1 c2)) (map vector s (clojure.string/lower-case s))))))","problem":29,"user":"4f06f90a535dcb61093f6c1b"},{"problem":29,"code":"(fn caps [s]\n  (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) s))\n)","user":"5e189cc8e4b0dc95940084f7"},{"code":"(fn cap [s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"50c95c4fe4b0bed41a12298f"},{"problem":29,"code":"(fn get-the-caps [text]\n  (apply str (filter #(Character/isUpperCase %) text))\n)","user":"5a99d28ee4b0d174b936c7b3"},{"problem":29,"code":"(fn [str]\n    (clojure.string/replace str #\"[^A-Z]\" \"\"))","user":"58ed0198e4b056aecfd47d72"},{"problem":29,"code":"reduce  #(if (Character/isUpperCase %2 ) (str %1 %2) %1) \"\"","user":"551daeb9e4b030e6a24d00df"},{"problem":29,"code":"(fn [a-string]\n  (clojure.string/join \"\"\n        (re-seq #\"[A-Z]\" a-string)))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn [coll]\r\n  (apply str \r\n    (filter #(Character/isUpperCase %) coll)\r\n  )\r\n)","problem":29,"user":"4e570f47535d8a8b8723a287"},{"problem":29,"code":"(fn caps \n  [n] \n  (clojure.string/join \"\" \n                       (filter #(Character/isUpperCase %1) (seq n))))","user":"5e95013fe4b0fbed045a3800"},{"problem":29,"code":"(fn [seq] (apply str (filter #(Character/isUpperCase %) seq)))","user":"542ce413e4b0dad94371f2ae"},{"code":"(fn uppers [x] (apply str (filter #(. java.lang.Character isUpperCase %) x)))","problem":29,"user":"4e765170535d324fb2983d69"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter (fn [s]\n                 (<= 65 (int s) 90))\n                 s)))","user":"603d5f2ae4b0d5df2af2230c"},{"code":";(fn [x] (apply str(filter #(Character/isUpperCase %) x)))\n\n#(apply str(re-seq #\"[A-Z]+\" %))","problem":29,"user":"5213d81de4b0961f15ac4d73"},{"problem":29,"code":"#(apply str (filter (fn [x] (= (str (clojure.string/capitalize x)) (str x))) (seq (clojure.string/replace %1 #\"[^a-zA-Z\\\\\\\\s]\" \"\"))))","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase%) x)))","problem":29,"user":"4f6010e7e4b0defedf855fa1"},{"code":"(fn [str]\n   (clojure.string/join\n    (filter\n     #(Character/isUpperCase %)\n     str)))","problem":29,"user":"522d0360e4b0806774ddfef7"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(and (> (int %) 64) (< (int %) 91)) s)))","user":"5e976fa8e4b0157ca96647cf"},{"problem":29,"code":"(fn [xs] (apply str (vec (filter #(and (>= (int %) 65) (<= (int %) 90)) xs))))","user":"5509a23ee4b06e50f9beb11a"},{"code":"(fn pow [x] (apply str (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"50edcc53e4b06330c1f87c49"},{"problem":29,"code":"(fn onlyup [x] (apply str (remove nil? (map #(if (= (str (clojure.string/lower-case %)) (str %)) nil (str %)) x))))","user":"5cb62652e4b026601754b949"},{"problem":29,"code":"(fn [sigh] (clojure.string/join  (filter #(Character/isUpperCase %) sigh)))","user":"587e43d2e4b052da650a633f"},{"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]+\" %))","problem":29,"user":"4fb591aee4b081705acca2c0"},{"problem":29,"code":"(fn [s] (\napply str (filter #(<= (int \\A) (int %) (int \\Z)) s)\n))","user":"602bca69e4b0d5df2af22267"},{"code":"(fn upper-only [x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"504f2efae4b0e7ad84dbc4c9"},{"problem":29,"code":"#(apply str (filter (fn[c] (re-find #\"[A-Z]\" (str c))) %))","user":"57b59d77e4b0fbc9809a27ae"},{"code":"(fn [str]\n  (clojure.string/join (filter (fn [x] (Character/isUpperCase x)) str)))","problem":29,"user":"535aba96e4b04ce2eb3ed2a8"},{"code":"(fn[s] (apply str (filter #(and (> 91 (int %)) (< 64 (int %))) s)))","problem":29,"user":"513f53c6e4b051389b345b40"},{"problem":29,"code":"(fn f [s]\n\t(clojure.string/join \"\" (filter #(Character/isUpperCase %) (seq s))))","user":"5face7fce4b08cb800c85ae9"},{"problem":29,"code":"(fn [s]\n  \"extract and return only capital letters from input string\"\n  (apply str (re-seq #\"[A-Z]\" s)))","user":"56fc9a2de4b08d47c977819b"},{"problem":29,"code":"(fn [test-str] (apply str (filter #(Character/isUpperCase %) test-str)))","user":"585d9558e4b0f14aab7c879c"},{"problem":29,"code":"(fn [the-str]\n  (apply str (filter (fn [x] (Character/isUpperCase x)) the-str)))","user":"5c86b769e4b0c8042a70ce9b"},{"code":"(fn f [x]\n  (apply str (filter #(Character/isUpperCase %) (seq x)))\n)","problem":29,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":29,"code":"(fn just-the-caps\n  [col]\n  (clojure.string/join (filter #(Character/isUpperCase %) col)))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":29,"code":"(fn [string]\n  \n  (apply str (re-seq #\"[A-Z]\" string))\n  \n  )","user":"5b97c521e4b0c0b3ffbd4a9a"},{"problem":29,"code":"(fn [a]\n  (clojure.string/join\n  \t(filter #(Character/isUpperCase %) a))\n  )","user":"5be15f4de4b0ed4b8aab4c9b"},{"problem":29,"code":";#(->> % seq (filter (partial re-matches #\"[A-Z]\")) (apply str))\n#(->> % seq (filter (fn [c] (Character/isUpperCase c))) (apply str))","user":"5d9e7971e4b000c986472bc1"},{"problem":29,"code":"(fn [strin]\n   (apply str(filter #(Character/isUpperCase %) strin)))","user":"5cfabf53e4b0cc9c91588148"},{"code":"(fn capital [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4f0f40d3535d0136e6c2233b"},{"code":"(fn [x] (apply str( re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e932523535dbda64a6f6b09"},{"problem":29,"code":"#(-> #\"[A-Z]\" (re-seq %) clojure.string/join)","user":"56814cbce4b0945ebc182a81"},{"problem":29,"code":"(fn [s]\n\t(apply str\n\t\t(filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))\n\t\t(seq s))))","user":"56082adae4b046a4fc0ac008"},{"code":"reduce #(str%1(if(Character/isUpperCase%2)%2))\"\"","problem":29,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn f [x] (str (apply str (filter (fn [c] (Character/isUpperCase c)) (vec x)))))","problem":29,"user":"5216933be4b000d124d989cf"},{"problem":29,"code":"(fn filter-caps [e] (clojure.string/join \"\" (filter #(Character/isUpperCase %) e)))","user":"56a80d8fe4b07966d5a8a06a"},{"problem":29,"code":"(fn upper-case-from\n  [s] \n  (apply str (filter #(Character/isUpperCase %) s)))","user":"5a429e40e4b0447ef91cc5f9"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) s)))","user":"602cc4d4e4b0d5df2af22274"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(and (>= (int %) 65) (<= (int %) 90)) (seq s))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":29,"code":"(fn keep-caps [s]\n  (apply str \n         (re-seq #\"[A-Z]\" s)))","user":"573a0ecce4b0cd1946bd1088"},{"problem":29,"code":"(fn [string] (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int string)))))","user":"58cb7525e4b03c36ff7e584a"},{"code":"(fn [a]\n  (apply str (re-seq #\"[A-Z]+\" a)))","problem":29,"user":"5374adc3e4b06d7f452d9e27"},{"problem":29,"code":"(fn [str]\n  (clojure.string/join (filter #(Character/isUpperCase %) str)))","user":"521ceb02e4b0c4ef0be830a5"},{"code":"(fn[sq](apply str (filter #(Character/isUpperCase %) (seq sq))))","problem":29,"user":"4ff5a525e4b0678c553fc36d"},{"problem":29,"code":"(fn get-caps\n  [params]\n  \"http://www.4clojure.com/problem/29\"\n  (reduce str (re-seq #\"[A-Z]+\" params)))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":29,"code":"(fn [x] \n    (apply str \n     (filter #(Character/isUpperCase %) x)\n     ))","user":"554b2151e4b0a04f79299580"},{"problem":29,"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %) (vec s))))","user":"55a31c66e4b0acc240e31530"},{"problem":29,"code":"#(apply str (apply concat (re-seq #\"[A-Z]\" %)))","user":"58335c22e4b089d5ab817c9a"},{"problem":29,"code":"(fn ff [str]\n  (let [s (seq str)\n        max (int \\Z)\n        min (int \\A)]\n    (clojure.string/join (filter\n                           #(let [n (int %)]\n                             (and (>= n min) (<= n max)))\n                           s))))","user":"56b1ab17e4b0982f16b37df1"},{"code":"(fn[coll](apply str (filter (fn[char](Character/isUpperCase char)) coll ) ))","problem":29,"user":"4f8e984ee4b0d4e659cdde68"},{"problem":29,"code":"(fn asd [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"5a214798e4b0ff51aa4b32aa"},{"code":"(fn ([string]\r\n      (apply str  (re-seq  #\"[A-Z]+\" string))\r\n       \r\n       ))","problem":29,"user":"4de8fb73535d08e6dec9fdff"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter (fn [c] (<= (int \\A) (int c) (int \\Z))))\n       (apply str)))","user":"604a30c6e4b02d28681c77f0"},{"code":"(fn caps [str]\n  (clojure.string/join (re-seq #\"[A-Z]+\" str))\n)","problem":29,"user":"50e496e8e4b0cb9ec68fbca0"},{"code":"#(apply str (for [x % :when (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))] x))","problem":29,"user":"5153b1bce4b0252ac4b16639"},{"problem":29,"code":"#(let [matcher (re-matcher #\"[A-Z]+\" %)]\n   (loop [a (re-find matcher) ret \"\"]\n     (if (nil? a)\n       ret\n       (recur (re-find matcher) (str ret a)))))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn [elem]\n   (reduce str (filter #(Character/isUpperCase %) elem)))","problem":29,"user":"536be48ee4b0fc7073fd6e31"},{"problem":29,"code":"(fn [s]\n  (apply #'str\n         (filter #(java.lang.Character/isUpperCase %) s)))","user":"57377ae8e4b0cd1946bd1046"},{"code":"(fn [b] (apply str (filter (fn [a] (Character/isUpperCase a)) b)))","problem":29,"user":"4ff8aa3fe4b0678c553fc39e"},{"problem":29,"code":"(fn my-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"54aec1b6e4b09f271ff37cf6"},{"problem":29,"code":"(fn [s]\n  (->> (seq s)\n       (filter #(Character/isUpperCase ^Character %))\n       (reduce conj [])\n       (apply str)))","user":"574c3d4ee4b02ea11479921a"},{"problem":29,"code":"(fn [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","user":"54058af3e4b0addc1aec6669"},{"code":"(fn [coll]\n  (apply str\n    (re-seq #\"[A-Z]+\" coll)))","problem":29,"user":"4e40529b535dc968683fc49a"},{"problem":29,"code":"reduce #(if(java.lang.Character/isUpperCase %2) (str %1 %2) %1) \"\"","user":"53cff414e4b00fb29b221304"},{"problem":29,"code":"#(apply str (map second (re-seq #\"([A-Z])\" %)))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":29,"code":"#( apply str (for [x (seq %) :when (and (< 64 (int x)) (> 91 (int x)))] x))","user":"5f3567d6e4b0574c87022c44"},{"problem":29,"code":"(fn [s]\n    (apply str\n      (filter\n        #(<= (int \\A) (int %) (int \\Z))\n        s\n      )\n    )\n  )","user":"59021fede4b0438e51c2d04d"},{"problem":29,"code":"(fn [coll] (apply str (re-seq #\"[A-Z]\" coll)))","user":"540f2c48e4b0addc1aec6727"},{"code":"#(clojure.string/join (filter (set (map char (range 65 91)))  % ))","problem":29,"user":"4fe9ef2fe4b0547ebccb2479"},{"problem":29,"code":"(fn hi [message] \n  (apply str (filter #(Character/isUpperCase %) (char-array message)))\n  )","user":"5e663073e4b0fd0acd1586bc"},{"code":"#(reduce str (filter (fn [x] \n  (and (= (.toUpperCase (str x)) (str x)) \n  (not (= (.toLowerCase (str x)) (str x))))\n\n\n) %))","problem":29,"user":"4f04165d535dcb61093f6b9c"},{"code":"(fn [s] \n  (apply str \n         (filter \n          #(and (<= (int \\A) (int %)) (>= (int \\Z) (int %)) ) \n          s\n         )\n  )\n)","problem":29,"user":"534eecaee4b084c2834f4abf"},{"problem":29,"code":"(fn include-upper [string] \n  (reduce str (filter #(Character/isUpperCase %) (seq string))))","user":"56339e23e4b0bfe05bf117b1"},{"problem":29,"code":"(fn [x]\n  \t(apply str (filter #(Character/isUpperCase %) (seq x))))","user":"59ac559ee4b00adcf69795d2"},{"problem":29,"code":"(fn [string]\n  (apply str\n    (filter\n      (fn [ch] (Character/isUpperCase ch))\n      string)))","user":"548db64ce4b0e286459a121c"},{"problem":29,"code":"#(apply str (filter (fn [s]\n                       (re-matches #\"[A-Z]\" (str s))) %))","user":"548f1604e4b0e286459a1230"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %) (vec x))))","user":"6093cc08e4b00e9e6653c3e1"},{"code":"(fn [coll]\n     (apply str (filter\n      #(if (re-find #\"[A-Z]\" (str %)) true false) coll)))","problem":29,"user":"4dadba4dc9a9d6ed3899dc57"},{"code":"#(->> % (re-seq #\"[A-Z]+\") (apply str))","problem":29,"user":"52ac2db3e4b0c58976d9ac82"},{"code":"#(apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x)))) %))","problem":29,"user":"5037c397e4b0af0658af77b4"},{"problem":29,"code":"(fn test [x]\n  (letfn [(captial? [x]\n                    (and (< (int x) (+ (int \\Z) 1))\n                         (> (int x) (- (int \\A) 1))))]\n    (apply str (filter captial? x))))","user":"579332c2e4b0e215f87e8452"},{"problem":29,"code":"(fn [uppercase]\n  (apply str (filter #(Character/isUpperCase %) uppercase)))","user":"5f05ef21e4b0cf489e8d7f4d"},{"problem":29,"code":"(fn [sq] (apply str (re-seq #\"[A-Z]+\" sq)))","user":"5f875a0ae4b020286baa5e94"},{"code":"(fn [s]\n   (clojure.string/join (filter #(Character/isUpperCase %)  s)))","problem":29,"user":"5294c95fe4b02ebb4ef75013"},{"problem":29,"code":"(fn caps-only [string] \n  (reduce str (filter #(Character/isUpperCase %) string)))","user":"56326995e4b0bfe05bf117a3"},{"problem":29,"code":"(fn [word]\n   (->> word\n        (re-seq #\"[A-Z]*\")\n        (filter #(first %))\n        (clojure.string/join \"\")))","user":"53ed6976e4b0d648e757f4c4"},{"problem":29,"code":"(fn [string]\n  (->> string\n       (map #(int %))\n       (filter #(> % 64))\n       (filter #(< % 91))\n       (map #(char %))\n       (apply str)\n      )\n  )","user":"57d7c894e4b0bd073c2023de"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %))  s)) )","user":"57ebbf3ae4b0bfb2137f5b66"},{"code":"(fn[s]( (fn[a](reduce #(if (and (> (int %2) 64) (< (int %2) 91)) (str %1 %2)%1) \"\" a )) (into-array s) ))","problem":29,"user":"52e807b3e4b09f7907dd1490"},{"problem":29,"code":"(fn [mstr]\n  (let [isuppercase? (fn [ch] (some #(= ch %) (map char (range 65 91))))]\n    (apply str (map #(if (isuppercase? %)\n                       %) (seq (char-array mstr))))))","user":"56f1b558e4b04a395b9a049a"},{"problem":29,"code":"(fn [s] \n  (apply str \n         (re-seq #\"[A-Z]\" s)))","user":"568b781be4b0dcc4269f40a5"},{"problem":29,"code":"(fn [coll]\n(  apply str (filter #(Character/isUpperCase %) coll)))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"#(apply str (filter (set (seq \"HLOWRDAZ\")) %))","problem":29,"user":"4ecd6a88535d23f036227704"},{"problem":29,"code":"(fn [v] (apply str (re-seq #\"[A-Z]+\" v)))","user":"59be62d5e4b0a024fb6ae435"},{"problem":29,"code":"(fn caps [x]\n  (reduce str (filter (fn [x]\n                        (let [ascii-uppercase (set (range 60 96))\n                              ascii-letter (int x)]\n                          (if (contains? ascii-uppercase ascii-letter) (str x)))) x)))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"problem":29,"code":"(fn myup [x]\n  (clojure.string/replace x #\"[^A-Z]\" \"\")\n)","user":"56ea8b75e4b04a395b9a0409"},{"problem":29,"code":"(fn [s]\n    (let [caps-only (filter #(and (>= (int %) (int \\A))\n                                  (<= (int %) (int \\Z))) s)]\n      (clojure.string/join caps-only)))","user":"5803cd8fe4b0a837a8b30c96"},{"code":"(fn [x]\n  (apply str (filter #(Character/isUpperCase %) x))\n  )","problem":29,"user":"51377188e4b04059df19f303"},{"code":"(fn [x] (apply str (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z))) x)))","problem":29,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [st] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) st)))","problem":29,"user":"4dad8c92c9a9d6ed1699dc57"},{"problem":29,"code":"(fn [x] (->> x (re-seq #\"[A-Z]\") (clojure.string/join)))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [s] (apply str\r\n  (filter #(java.lang.Character/isUpperCase %) (seq s))))","problem":29,"user":"4e410033535dc968683fc49c"},{"problem":29,"code":"(fn get-caps\n  ([xs] (get-caps xs \"\"))\n  ([xs acc]\n   (if (seq xs)\n     (cond (not (Character/isLetter (first xs))) (recur (rest xs) acc)\n           (= (clojure.string/upper-case (first xs)) (str  (first xs))) (recur (rest xs) (str acc (first xs)))\n           :else (recur (rest xs) acc))\n     acc)))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn [str1]\n  (apply str (filter (fn [x] (and (>= (int x) 65) (<= (int x) 90))) str1)))","problem":29,"user":"4f046d70535dcb61093f6bc5"},{"code":"#(clojure.string/replace % #\"\\P{Upper}\" \"\")","problem":29,"user":"4fe21889e4b0dd6cd5ce3641"},{"code":"(fn [x] (apply str (seq (re-seq #\"[A-Z]\" x))))","problem":29,"user":"4ee88f29535d93acb0a66882"},{"problem":29,"code":"(fn [a-str](apply str (map char (filterv #(and (>= % 65) (<= % 91)) (map int a-str)))))","user":"58677770e4b0f14aab7c887b"},{"problem":29,"code":"(fn [s] \n  (apply str (re-seq #\"[A-Z]+\" s)))","user":"5522a795e4b0882d96d091a7"},{"code":"(fn [x] (apply str(re-seq #\"[A-Z]+\" x)))","problem":29,"user":"4e36e647535deb9a81d77f36"},{"problem":29,"code":"#(clojure.string/replace % #\"[^A-Z]\" (str nil))","user":"587abe0de4b01531a375eaef"},{"problem":29,"code":"(fn [word]\n  (apply str (map \n              (fn [x y]\n                (if (= x y)\n                  \"\"\n                  x))\n              word\n              (clojure.string/lower-case word))))","user":"55f73078e4b06e875b46cea4"},{"problem":29,"code":"(fn [s] \n  (apply str \n     (filter \n   \t\t#(re-matches #\"\\b[A-Z]+\\b\" %) \n   \t\t(clojure.string/split s #\"\"))))","user":"5dbe63bde4b09f47823971c7"},{"code":"(fn [s]\n          (reduce #(if (java.lang.Character/isUpperCase %2)\n                          (str %1 %2) %1) \"\" s))","problem":29,"user":"4ef4acf8535dced4c769f23c"},{"problem":29,"code":"(fn get-caps [x]\n  (let [ss (seq x)]\n    (clojure.string/join (filter #(some #{%} [\\A,\\B,\\C,\\D,\\E,\\F,\\G,\\H,\\I,\\J,\\K,\\L,\\M,\\N,\\O,\\P,\\Q,\\R,\\S,\\T,\\U,\\V,\\W,\\X,\\Y,\\Z,]) ss)))\n  )","user":"5f419985e4b0955706451fab"},{"code":"#(clojure.string/replace % #\"[^\\p{Lu}]\" \"\")","problem":29,"user":"5118acfbe4b046de85f62a4b"},{"problem":29,"code":"(fn only-caps [string]\n  (apply str (re-seq #\"[A-Z]\" string)))","user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn [s] \n  (apply str (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"5031eb3be4b000fc67a99a84"},{"problem":29,"code":";(fn\n;  [col]\n;  (loop [auxCol col  j 0 res []]\n;    (let [i (first auxCol)]\n;      (if (nil? i) \n;        (apply str res)\n;        (if (and (= (.toUpperCase (str i))  (str i))  (re-seq #\"[a-zA-Z]\" (str i) )  )\n;           (recur (rest auxCol) (inc j) (conj res i))\n;           (recur (rest auxCol) (inc j) res)  \n;        )       \n;    ))))\n\n;#(reduce (fn [r i]\n;           (if (and (= (.toUpperCase (str i))  (str i))  (re-seq #\"[a-zA-Z]\" (str i)))\n;             (str r i)\n;             r)) (str \"\")  %)\n;(fn [val] (apply str (filter #(and (= (.toUpperCase (str %))  (str %))  (Character/isLetter %))  (seq val))))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"5be589f9e4b0ed4b8aab4d13"},{"problem":29,"code":"(fn [x] (apply str (clojure.string/split x #\"[^A-Z]\")))","user":"54d2c4c5e4b0e8a36923e5fa"},{"problem":29,"code":"(fn [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s )))","user":"59a5b3f4e4b066c664927d69"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (filter #(<= (int \\A) (int %) (int \\Z)))\n       (apply str)))","user":"5777c3d6e4b0979f8965164f"},{"problem":29,"code":";(fn [s]\n;  (->> s\n;       (filter #(Character/isUpperCase %))\n;       (apply str)))\n\n#(apply str (re-seq #\"[A-Z]\" %))","user":"59a080e3e4b0871e7608b837"},{"problem":29,"code":"(fn [input-str]\n  (apply str (re-seq #\"[A-Z]\" input-str)))","user":"55ee7977e4b0121d4835fdee"},{"problem":29,"code":"(fn [x](->>(into [] x)\n           (filter #(Character/isUpperCase %))\n           (apply str)))","user":"5d148581e4b0902706380dc6"},{"problem":29,"code":"(fn [x]\n    (apply str (filter #(Character/isUpperCase %) x))\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn get-caps [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"53287dace4b09d4e7a9b5507"},{"problem":29,"code":"(fn [coll] (apply str (filter #(java.lang.Character/isUpperCase %) (seq coll))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn [s] (clojure.string/join (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4f07ad89535dcb61093f6c2a"},{"code":"(fn [col] (apply str(filter #(Character/isUpperCase %) col)))","problem":29,"user":"53286389e4b09d4e7a9b5504"},{"problem":29,"code":"(fn only-upper \n  [text]\n  (->> (filter #(contains? (set (range 65 91)) (int %)) text)\n      (apply str)))","user":"53161a56e4b08068f379ed3e"},{"problem":29,"code":"(fn uppers [word] (clojure.string/join (filter #(Character/isUpperCase %) word)))","user":"560b6895e4b05f002753df1a"},{"problem":29,"code":"(fn filterOutLowerCase [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"56557d2de4b0f9d632dd8498"},{"problem":29,"code":"(fn only-upper-case [text] \n  \t(apply str (filter #(Character/isUpperCase %) text)))","user":"56014f55e4b04bb52996e184"},{"code":"(fn [s] (->> s (re-seq #\"[A-Z]\") (apply str)))","problem":29,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":29,"code":"(fn [input]\n   (clojure.string/replace input #\"[^A-Z]\" \"\" )\n   )","user":"59228b00e4b026ae38521281"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(re-find #\"[A-Z]\" (str %)) string)))","user":"576d398be4b0979f8965155d"},{"code":"(fn my-caps [s]\n      (apply str (filter #(Character/isUpperCase %) s)\n        ))","problem":29,"user":"51b9f5a6e4b0e871ca49590e"},{"problem":29,"code":"(fn [text] (apply str (filter #(re-matches #\"[A-Z]\" (str %)) (seq text))))","user":"5a8e9fb5e4b05369db4d2529"},{"problem":29,"code":"#( clojure.string/join (re-seq #\"\\p{Upper}\" %))","user":"4fc4eb1ee4b081705acca354"},{"problem":29,"code":"#(-> (re-seq #\"[A-Z]\" %) clojure.string/join)","user":"55d1a721e4b0e31453f64a47"},{"code":"(fn getcaps2 [x]\n  (apply str\n    (filter\n      (fn [z] (. Character (isUpperCase z)))\n      (seq x))))","problem":29,"user":"52dad8bde4b09f7907dd13be"},{"problem":29,"code":"(fn [x]\n    (let [caps #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}]\n      (->> (seq x)\n           (filter caps)\n           (clojure.string/join)\n           )\n      )\n  )","user":"55fd0d19e4b0f488688e067a"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]\"%))","user":"5aa8e841e4b0d174b936c8d5"},{"problem":29,"code":"(fn [lst] \n  (apply str (filter #(Character/isUpperCase %) lst)))","user":"55022275e4b07d26eda61d81"},{"code":"(fn [x]\r\n(reduce str \r\n  (filter #(re-matches #\"[A-Z]\" (str %)) \r\n  (seq x))))","problem":29,"user":"4e18c553535d04ed9115e7f4"},{"problem":29,"code":"(fn [x] (apply str (filter #(Character/isUpperCase %1) (seq x) )))","user":"5ed30cb6e4b016b56eae05c2"},{"problem":29,"code":"(fn getCaps\n      [x] \n      (apply str (re-seq #\"[A-Z]+\" x)))","user":"591e1dc7e4b09b4ee5954c2a"},{"problem":29,"code":"#(apply str (re-seq #\"[A-Z]+\", %))","user":"5abbb374e4b073f1774426d9"},{"code":"#(apply str (filter (fn [c] (and (>= (int c) (int \\A)) (<= (int c) (int \\Z)))) %))","problem":29,"user":"4e8a0c82535d3e98b802328d"},{"problem":29,"code":"(fn a [x] (\n                   reduce #(\n                             if(contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} %2) (str % %2) %) \"\" x))","user":"5971763fe4b01722bebd4c72"},{"code":"#(reduce str (filter (fn [x] (Character/isUpperCase x)) %1))","problem":29,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":29,"code":"(fn my-caps\n  [s]\n  (cond\n    (empty? s) \"\"\n    (.contains \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (str (first s))) (str (first s) (my-caps (rest s)))\n    :else (my-caps (rest s))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":29,"code":"(fn [x] (clojure.string/join \"\" (filter\n                 (fn [c] (re-find #\"[A-Z]\" (str c)))\n                 x ))\n)","user":"53dbc8bee4b094d41abdfef5"},{"code":"#(apply str \n  (filter (fn [c] (Character/isUpperCase c)) (map char %)))","problem":29,"user":"4e6f8af8535d5021c1a89620"},{"code":"(fn [s] (apply str \n  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4fe868d1e4b07c9f6fd12c3f"},{"code":"(fn [x]\n  (apply str \n    (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn [c]\n  (apply str (filter #(Character/isUpperCase %) c)))","problem":29,"user":"4eaec592535d7eef30807327"},{"problem":29,"code":"(fn [s]\n  (apply str (filter \n              (fn [c] (some #{c} (map char (range 65 91)))) \n              s)))","user":"5655d811e4b0f9d632dd849a"},{"problem":29,"code":"(fn [pattern]\n  (clojure.string/join (re-seq #\"[A-Z]+\" pattern)))","user":"4ee897fe535d93acb0a66883"},{"problem":29,"code":"#(apply str (filter (fn [c] (re-find #\"[A-Z]\" (str c))) %))","user":"56a9d4bbe4b07966d5a8a07b"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (seq s)) ))","problem":29,"user":"5142e808e4b0c172af7558c9"},{"problem":29,"code":";;#(apply str(filter (set ( map char (range 65 91))) %))\n;;#(apply str(re-seq #\"[A-Z]+\" %))\n(fn [s]\n    (apply str (for [c s :when (Character/isUpperCase c)] c)))","user":"56cba075e4b0ea9b8538f737"},{"code":"(fn [a-str]\n  (let [chars (map char (range 65 91))]\n    (apply str (filter #(if (> (.indexOf chars %1) -1) %1 nil)\n                        (seq a-str)))))","problem":29,"user":"4e7d4544535db169f9c796d0"},{"code":"(fn [s] (apply str (filter #(<= (int \\A) (int %1) (int \\Z) ) s )))","problem":29,"user":"52aa16d1e4b0c58976d9ac5a"},{"code":"(fn get-upper [string]\n  (apply str (filter #(Character/isUpperCase %) string))\n)","problem":29,"user":"537d9b39e4b06839e8705e8f"},{"code":"#(apply str (filter (fn [x] (if (nil? (re-find #\"[A-Z]\" (str x))) false true)) %1))","problem":29,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":29,"code":"#(let [alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n   (clojure.string/replace % (re-pattern (str \"[^\" alphabet \"]\")) \"\"))","user":"5b37a3b4e4b02d533a91bba9"},{"code":"(fn upperfilter [s]\n    (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn [string]\r\n  (apply str\r\n         (filter\r\n          (fn [x] (Character/isUpperCase x))\r\n          (seq string))))","problem":29,"user":"4e81e29b535db62dc21a62bd"},{"problem":29,"code":"(fn uppc\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"57f81569e4b0d3187e900919"},{"code":"#(apply str\n        (re-seq #\"[A-Z]\" %))","problem":29,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":29,"code":"(fn\n  [string]\n  (clojure.string/join (map char (filter #(and (<= 65 %) (>= 90 %)) (mapcat (comp list int char) (seq string))))))","user":"56cb0abce4b0ea9b8538f722"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(not (= (str (clojure.string/lower-case %)) (str %))) (seq s))))","user":"55f47f54e4b06e875b46ce78"},{"code":"(fn[x] (apply str (filter (fn[y] (Character/isUpperCase y)) (seq x))))","problem":29,"user":"52ff6ea0e4b0d8b024fd3707"},{"problem":29,"code":"#(reduce str (filter (fn [x] (Character/isUpperCase x)) %))","user":"53eade35e4b036ad0777e4ec"},{"code":"; sweet jesus, there must be a simpler way!\n(fn [s] (apply str (filter #(not (nil? (re-matches #\"[A-Z]\" (str %)))) (seq s))))","problem":29,"user":"536b9d8ae4b0243289761ebe"},{"code":"(fn [sq]\n(apply str (filter #(Character/isUpperCase %) sq)))","problem":29,"user":"500fbfabe4b0c8af2eae4184"},{"problem":29,"code":"(fn hede [s] (apply str (filter  #(Character/isUpperCase %) (seq s))))","user":"549ea7e0e4b0f3d1d8e70fa3"},{"code":"(fn [tofilter]  (apply str (filter #(and (< 64 (int %)) (> 91 (int %))) tofilter)))","problem":29,"user":"50f924bbe4b0e7c80cb15a47"},{"problem":29,"code":"(fn ilc [stri]\n   (apply str (filter #(Character/isUpperCase %) stri)))","user":"57ffe094e4b0a837a8b30c2c"},{"code":"(fn my-caps\n  [input]\n  (clojure.string/replace input #\"[^A-Z]\" \"\"))","problem":29,"user":"5300b750e4b0d8b024fd3711"},{"problem":29,"code":"(fn [string] (clojure.string/join (filter #(Character/isUpperCase %) (seq string) )))","user":"572722c4e4b0c5bde472c134"},{"problem":29,"code":"(fn [spam] (apply str (re-seq #\"[A-Z]\" spam)))","user":"5f341a4be4b0574c87022c3d"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter #(and (<= (compare % \\Z) 0)\n                                           (>= (compare % \\Z) -25))\n                                     x)))","user":"54227fc6e4b01498b1a71ac0"},{"code":"(fn [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e513758535dc968683fc4f3"},{"problem":29,"code":"(fn [w] (apply str (re-seq #\"[A-Z]+\" w)))","user":"5565e7e6e4b0c656e3ff1821"},{"problem":29,"code":"(fn [string] (apply str (filter (partial re-matches #\"[A-Z]\") (map str string))))","user":"59699da7e4b069c0a1a197eb"},{"code":"#(let [x (set (clojure.string/lower-case %))]\n  (apply str (filter (complement x) %)))","problem":29,"user":"4f58de86e4b0a7574ea7185b"},{"code":"(fn cap [xs] (apply str (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"5334d4f2e4b0656e627bfd71"},{"code":"#(apply str (filter (fn [x](Character/isUpperCase x)) %))","problem":29,"user":"5338645ee4b0e30313ee6c99"},{"problem":29,"code":"(fn caps ([st] (caps (seq st) ())) ([st keep] (if (empty? st) (apply str keep) (recur (rest st)  (if (and (>=  (int (first st)) (int \\A)) (<= (int (first st)) (int \\Z) )) (concat (seq keep) [(first st)]) keep) ))))","user":"54a634abe4b09f271ff37c84"},{"code":"(fn ! [x]   \n  (if (empty? x) \n    \"\"   \n    (let [y (first x) z (! (rest x)) yd (int y)]   \n      (if (and \n           (>= yd (int \\A))\n           (<= yd (int \\Z))) \n        (str y z)\n        z))))","problem":29,"user":"52faec2ee4b047fd55837004"},{"code":"(fn [string] (apply str (filter #(and (>= (int %1) 65) (<= (int %1) 90)) string)))","problem":29,"user":"51b8e8b3e4b050a1176cd6a0"},{"problem":29,"code":";; No regex\n(fn [string]\n  (apply str\n         (filter\n          #(and\n            (= (clojure.string/upper-case %1) (str %1)) \n            (not= (clojure.string/lower-case %1) (str %1))\n            ) \n         string))\n  )","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":29,"code":"#(->> %\n      (seq)\n      (filter (fn [c] (Character/isUpperCase c)))\n      (apply str))","user":"5fef4292e4b05ac5b16ea1d7"},{"code":"(fn [x] (apply str (filter (fn [y] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") y) ) x)))","problem":29,"user":"4e8d5edd535d65386fec2134"},{"code":"#(apply str (filter (fn[char] (Character/isUpperCase char)) %))","problem":29,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":29,"code":"(fn [string] (apply str (filter #(re-find #\"[A-Z]\" (str %)) string)))","user":"5715b929e4b07c98581c3ae2"},{"code":"(fn [x] \n  (apply str (filter #(and (>= (int (char %)) 65) (<= (int (char %)) 90) ) x)))","problem":29,"user":"4f038ed6535dcb61093f6b24"},{"code":"(fn [str] (clojure.string/join (filter #(re-find #\"[A-Z]\" %) (drop 1 (clojure.string/split str #\"\")))))","problem":29,"user":"4f5dae33e4b0030a34fb2b41"},{"problem":29,"code":"(fn [base] (apply str (filter #(Character/isUpperCase %) base)))","user":"52d17182e4b0d9f9285948dd"},{"problem":29,"code":"(fn [x]\n  (let [cap? (fn [c] (and (>= (int c) 65) (<= (int c) 90)))]\n    (apply str (filter cap? x))))","user":"5537cbaee4b09218d5f44fd3"},{"problem":29,"code":"(fn [s]\n   (apply str (filter #(re-matches #\"[A-Z]\" (str %))\n                (seq s))))","user":"60ae0ac5e4b00e9e6653c495"},{"code":"(fn [cadena]\n    (\n     letfn [(mayuscula? [letra]\n              (if (and (>= (int letra) 65) (<= (int letra) 90) )\n                  true\n                  false\n                )\n             )\n            (mayusculas [cadenaOld cadenaNew]\n              (\n               cond\n                  (empty? cadenaOld) cadenaNew\n                  (mayuscula? (first cadenaOld)) (mayusculas (rest cadenaOld) (str cadenaNew (first cadenaOld)))\n                  :else (mayusculas (rest cadenaOld) cadenaNew)\n                )\n              )\n             ]\n            (mayusculas cadena \"\")\n      )\n\n  )","problem":29,"user":"5058afbbe4b06522596eba81"},{"code":"(fn [x] (apply str(re-seq(re-pattern #\"[A-Z]\") x)))","problem":29,"user":"508d5ce9e4b0f17d83ea26bc"},{"problem":29,"code":"(fn [s]\n  (->> s\n\t   (filter #(re-matches #\"[A-Z]\" (str %)))\n       (clojure.string/join)))","user":"5d431c77e4b07c84aa5ae68f"},{"code":"(fn [x] (apply str\n          (filter #(. Character isUpperCase %) x)))","problem":29,"user":"4ff50604e4b0678c553fc365"},{"code":"#(reduce str (re-seq #\"[A-Z]\" %)  )","problem":29,"user":"4df8644f535d04ed9115e778"},{"code":"(fn [sek] (apply str (re-seq #\"[A-Z]\" sek)))","problem":29,"user":"4e218470535d04ed9115e817"},{"problem":29,"code":"(comp (partial apply str) (partial filter #(< 64 (int %) 91)))","user":"56215da7e4b03f08ee9a921b"},{"problem":29,"code":"(fn get-caps\n  [some-string]\n  (apply str (filter #(contains? (set (range 65 92)) (int %)) (seq some-string))))\n\n; This is an awful hacky way; another is to use re, e.g.\n; #(apply str (re-seq #\"[A-Z]\" %))","user":"560dfa8de4b05f002753df46"},{"code":"(fn [coll] (apply str (re-seq #\"[A-Z]+\", coll)))","problem":29,"user":"4e5f5e14535d8ccf87e9fe47"},{"problem":29,"code":"(fn [text] (apply str (filter (fn [character] (Character/isUpperCase character)) (seq text))))","user":"55ec4558e4b0121d4835fdc5"},{"problem":29,"code":"#(apply str (filter (fn [x](and (>= (int x) (int \\A)) (<=  (int x) (int \\Z)))) (seq %)))","user":"57ea79d9e4b0bfb2137f5b4f"},{"code":"(fn uponly [s] (clojure.string/replace s #\"[^A-Z]*\" \"\"))","problem":29,"user":"51b08df5e4b0c53cf2e68a67"},{"code":"(fn [string] (apply str (map #(if (. Character isUpperCase %)\r\n    \t %\r\n                 \"\") string)))","problem":29,"user":"4dc6aade535d8a4b2fd7428c"},{"code":"(fn [coll]\n  (apply str (filter (fn [x] (contains? (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") x))\n          coll)))","problem":29,"user":"52b94e26e4b07a9af57922b9"},{"code":"(fn [s]\n  (clojure.string/replace s #\"[^\\p{Upper}]\" \"\"))","problem":29,"user":"52ecb1efe4b0705949c44454"},{"problem":29,"code":"(fn filter-caps \n  [s] \n  (apply str \n         (filter \n          #(re-matches #\"[A-Z]\" (str %)) \n          (seq s))))","user":"55ad2d97e4b03311e7b732a2"},{"problem":29,"code":"(fn returnCapitals [string] (apply str (filter #(Character/isUpperCase %) string)))","user":"552689cfe4b0ffed3738f91e"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]+\")\n       (clojure.string/join \"\")))","user":"53684a2fe4b0243289761e8c"},{"problem":29,"code":"(fn awesome [lst]\n  (apply str (filter #(Character/isUpperCase %) lst)))","user":"59e0111ae4b08badc2a0c4e4"},{"code":"reduce (fn [y x] ( if (Character/isUpperCase x) (str y x) y)) \"\"","problem":29,"user":"52d36f60e4b099d49816f0c2"},{"code":"#(apply str (filter (set (map char (range (int \\A) (+ 1 (int \\Z))))) %))","problem":29,"user":"4f8ab084e4b02e764a0a5171"},{"code":"(fn [x] \n  (apply str(filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e8b557c535d65386fec2119"},{"code":"(fn [st]\n    (apply str\n     (filter (fn [x] (re-matches #\"[A-Z]\" (str x))) (seq st))))","problem":29,"user":"4e326f34535deb9a81d77f21"},{"code":"(fn only-uppercase[x] (apply str (filter #(java.lang.Character/isUpperCase %) x)))","problem":29,"user":"4efc4210535dced4c769f280"},{"code":"(fn get-c [s]\n  (apply str (filter (fn [c]\n            (and (> (int c) 64) (< (int c) 91))) s)))","problem":29,"user":"51b76227e4b0d906fcd71d35"},{"problem":29,"code":"(fn [s]\n   (let [matcher (re-matcher #\"[A-Z]+\" s)]\n     (apply str \n            (loop [accum []]\n              (let [match (re-find matcher)]\n                (if match\n                  (recur (conj accum match))\n                  accum))))))","user":"53b14289e4b047364c04448b"},{"problem":29,"code":"(fn ups[string]\n  (apply str\n         (re-seq #\"[A-Z]\" string)))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn get-caps[col] \n  (apply str (filter #(Character/isUpperCase %) col)))","problem":29,"user":"4ec72817535d6d7199dd36de"},{"code":"(fn getcaps$ [s] (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52244a77e4b01819a2de42d1"},{"problem":29,"code":"(fn caps [s] (apply str (re-seq #\"[A-Z]\" s)))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn [s]\n  (apply str (filter #(. java.lang.Character isUpperCase %1) s)))","problem":29,"user":"4e39fb68535deb9a81d77f47"},{"problem":29,"code":"(fn [coll] (apply str (filter #(<= 65 (int %) 90) coll)))","user":"59538a2fe4b066ee0a44aee8"},{"problem":29,"code":"(fn [s]\n  (apply str\n    (map char\n      (filter \n        #(and (<= 65 %) (<= % 90))\n        (map int s)))))","user":"57f4ace3e4b07bbd65c32b2b"},{"problem":29,"code":"(fn isUpper\n  [inputString]\n  (let [charSeq (seq inputString)]\n    (reduce str (filter #(not= % nil)\n            (map #(when (<= 65 (int %) 90) %) inputString)\n    ))\n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":29,"code":"(fn [s]                                                                                                                                             \n    (let [f (fn [x]\n              (and (>= (int x) 65) (<= (int x) 90)))]\n      (apply str (filter f s))))","user":"59932f49e4b0b211ea3aaaae"},{"problem":29,"code":"(fn [instring]\n(apply str (filter (fn [s] (Character/isUpperCase s) ) instring)))","user":"54413696e4b032a45b86936b"},{"problem":29,"code":"(fn [x] (apply str (for [word x :when (Character/isUpperCase word)] word)))","user":"5821160de4b04b46fc4b0f6c"},{"problem":29,"code":"(fn [s] (apply str (filter\n    (fn [x]\n        (some #(= x %)\n              '(\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z)\n        )\n    )\n    (seq s)\n)))","user":"5784ec65e4b0ebec4cfb74d1"},{"problem":29,"code":"(fn [x] \n\t(apply str(distinct\n\t\t(filter (set (map char (range 65 91))) x))))","user":"55bf785ee4b01b9910ae2a14"},{"code":"(fn ! [x] (apply str (filter #(and (<= (int %1) 90) (>= (int %1) 65)) x)))","problem":29,"user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [xs] (reduce str \"\" (filter #(Character/isUpperCase %) xs)))","problem":29,"user":"53162640e4b08068f379ed40"},{"problem":29,"code":"(fn [x]\n   (clojure.string/join (keep #(re-find #\"[A-Z]+\" (str %)) x)))","user":"514872f5e4b05514c84b7cbe"},{"problem":29,"code":"(fn capitals [s] (apply str (filter #(Character/isUpperCase %) s)))","user":"5884f77ee4b0f1effa3b76a9"},{"code":"#(apply str (filter (fn [c] (and (<= (int c) 91) (>= (int c) 65))) (seq %)))","problem":29,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":29,"code":"(fn x2 [string]\n  \t(reduce (fn [acc item] (if (Character/isUpperCase item) (str acc item) (str acc))) \"\" string))","user":"5e84b48ee4b09a7a73c8bbc8"},{"code":"(fn [x] (apply str (filter #(Character/isUpperCase %1) x)))","problem":29,"user":"4f0d093b535d0136e6c22313"},{"problem":29,"code":"(fn uppersOnly [string]\n  (apply str (re-seq (re-pattern \"[A-Z]+\") string)))","user":"57974188e4b039eba2ecb0f4"},{"problem":29,"code":"(fn x[st]\n  (apply str (re-seq #\"[A-Z]\" st)))","user":"57bd960fe4b05aa3c4741c52"},{"problem":29,"code":"(fn only-lower [n] \n  (apply str (re-seq #\"[A-Z]+\" n)))","user":"5a99b861e4b0d174b936c7ad"},{"code":"#((fn lstr [list] (reduce str \"\" list)) (for [letter % :when ((fn cap? [letter] (if ((fn in? [i l] \n  (if (= () l)\n    false\n    (let [head (first l) tail (rest l)]\n      (if (= head i)\n        true\n        (in? i tail))))) letter (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) true false)) letter)] letter))","problem":29,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":29,"code":"(fn [s] (apply str (filter #(not (nil? (re-find #\"[A-Z]\" (str %)))) s)))","user":"5943abb6e4b060784b3b792b"},{"problem":29,"code":"; using filter\n;(fn [coll] (apply str (filter #(Character/isUpperCase %) coll)))\n\n; using re-seq\n(fn [input]\n   (apply str (re-seq #\"[A-Z]\" input)))","user":"57c44053e4b05aa3c4741ccb"},{"code":"(fn [s]\n  (let [uppers (set (map char (range (int \\A) (inc (int \\Z)))))]\n    (apply str\n      (filter #(contains? uppers %) (seq s)))))","problem":29,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":29,"code":"#(apply str(re-seq #\"[A-Z]+\"%))","user":"5593b10ce4b0c79f6e1db943"},{"problem":29,"code":"(fn f [s] \n  (clojure.string/join (re-seq #\"[A-Z]\" s)))","user":"5ed15e23e4b016b56eae05ba"},{"problem":29,"code":"#(apply str (filter (->> (range 65 91) (map char) (apply hash-set)) %))","user":"58b31a46e4b0ebc645576d1b"},{"problem":29,"code":"(fn ([s] (apply str (filter #(and (<= (int %) (int \\Z))(>= (int %) (int \\A))) s))))","user":"54d8cc38e4b0a52adc2e203e"},{"code":"(fn caps [x] (clojure.string/join (re-seq (re-pattern \"[A-Z]\") x)))","problem":29,"user":"52b7a904e4b0c58976d9ad51"},{"problem":29,"code":"(fn caps\n  [string]\n  (clojure.string/replace string #\"[^A-Z]\" \"\"))","user":"57476b5fe4b009280f9f2b74"},{"code":"(fn [s] (reduce str (filter #(re-matches #\"[A-Z]\" (str %)) s)))","problem":29,"user":"5050b107e4b063148f524126"},{"code":"(fn [s] (apply str (re-seq #\"[A-Z]+\" s)))","problem":29,"user":"4e059278535d04ed9115e7a5"},{"code":"#(apply str \n  (map (set (map char (range 65 91))) %))","problem":29,"user":"4fdb02aae4b05e33b9224f56"},{"code":"#(loop [m  (re-matcher #\"[A-Z]\" %) result [] found (re-find m)]\n   (if (nil? found)\n\t     (apply str result)\n\t     (recur m (conj result found) (re-find m))))","problem":29,"user":"4f066916535dcb61093f6c10"},{"code":"#(apply str (filter\r\n  (fn [x] (Character/isUpperCase x)) %))","problem":29,"user":"4dd7d040535d2dad7130b5d6"},{"problem":29,"code":"(fn [in]\n  (->> in\n    (filter #(Character/isUpperCase %))\n    (apply str)))","user":"5760d426e4b08062f99a4e9f"},{"code":"(fn [s] \n  (clojure.string/join (filter #(Character/isUpperCase %) (seq s))))","problem":29,"user":"4ef992c8535dced4c769f268"},{"problem":29,"code":"(fn [word] (apply str (filter\n      #(not= (str %) (.toLowerCase (str %)))\n    word\n  ))\n)","user":"5a285a38e4b07f18be40aa67"},{"problem":29,"code":"(fn [s]\n  (->> s\n   \t(filter #(Character/isUpperCase %))\n    (apply str)))","user":"5d29c06be4b01671435dbc6b"},{"problem":29,"code":"(fn\n  [st]\n  (apply str (re-seq #\"[A-Z]+\" st)))","user":"56df6498e4b0ca2494a095f8"},{"problem":29,"code":"#(apply str (filter (fn [chr] (re-matches #\"[A-Z]\" (str chr))) (seq %1)))","user":"544f732fe4b0e39780006994"},{"problem":29,"code":"(fn [lst]\n  (apply str (map char (filter #(and (<= 65 %) (<= % 90)) (map int lst)))))","user":"59e8041be4b0249b72820721"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) s)) )","problem":29,"user":"4e3000c8535deb9a81d77f13"},{"code":"(fn getCaps [input]\n  (clojure.string/join (re-seq #\"[A-Z]+\" input)))","problem":29,"user":"537cf454e4b06839e8705e82"},{"code":"(fn [coll] (apply str (filter #(Character/isUpperCase %) (seq coll))))","problem":29,"user":"51ea4e35e4b0f1f103a0d148"},{"code":"(fn only-caps\n  [s]\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"51ab1da1e4b04e3dc0c27b30"},{"code":"#(apply str (filter (fn [l](and (>= (int l) (int \\A)) (<= (int l) (int \\Z)))) %))","problem":29,"user":"4f13047d535d64f60314642c"},{"problem":29,"code":"(fn [x]\n   (apply str (filter #(re-matches #\"[A-Z]\" (str %)) x)))","user":"57c731ede4b05aa3c4741d00"},{"code":"(fn [s] (apply str\n  (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4e89f46c535d3e98b8023288"},{"problem":29,"code":"(fn [string]\n  (apply str (take 100 (filter #(Character/isUpperCase %) (seq string)))))","user":"569ce7e6e4b0542e1f8d146d"},{"problem":29,"code":"#(clojure.string/replace % #\"[^A-Z]\" \"\")\n\n; Like this solution\n;\n; #(apply str (re-seq #\"[A-Z]\" %))","user":"5eccc5c2e4b016b56eae058f"},{"problem":29,"code":"#(reduce (fn [ch1 ch2]\n          (str ch1 ch2)) (map (fn [n] \n                (when (and (>= (int n) 65) (<= (int n) 90))\n                  n)) %))","user":"54411506e4b032a45b869369"},{"problem":29,"code":"(fn only-upper [x]\n   (apply str (filter #(Character/isUpperCase %) (seq x))))","user":"54ad4863e4b09f271ff37ce0"},{"problem":29,"code":"(fn filter-uppercase [s]\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"5776e21de4b0979f89651642"},{"code":"(fn [x] (clojure.string/join (#(re-seq #\"[A-Z]+\" %) x)))","problem":29,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn [l] (apply str (filter #(Character/isUpperCase %) l)))","problem":29,"user":"4f1b0ab3535d64f603146474"},{"problem":29,"code":"(fn get-caps\n  [s]\n  (clojure.string/replace s #\"[^A-Z]\" \"\"))","user":"58f7dfe6e4b0438e51c2cf1f"},{"code":"(fn [x] (apply str (filter #(and (Character/isLetter %) (Character/isUpperCase %)) (seq x))))","problem":29,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"#(->> %1 (re-seq #\"[A-Z]\") (apply str))","problem":29,"user":"500b6685e4b03d00572d2d82"},{"code":"(fn [s]\n  (reduce \n    str\n    (filter #(Character/isUpperCase %1) (seq s))))","problem":29,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn [s]\n  (apply str (filter #(contains? (set (range 65 91)) (int %)) s)))","problem":29,"user":"4fb1325de4b081705acca276"},{"code":"#(apply str (reduce\n    (fn [ss s] (if (and (<= (int \\A) (int s)) (>= (int \\Z) (int s))) (conj ss s) ss))\n   [] (vec %)))","problem":29,"user":"516e2246e4b092a6408c5bc5"},{"problem":29,"code":"(fn [s] (apply str ((partial filter #(Character/isUpperCase %)) s)))","user":"56804d03e4b0966858e4d8ec"},{"problem":29,"code":"(fn [s]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int s)))))","user":"5829d588e4b051871117bf4a"},{"problem":29,"code":"(fn gupper [x] (apply str (filter #(Character/isUpperCase %) x)))","user":"5498c4cfe4b0b312c081ff85"},{"problem":29,"code":"(fn [sqnc]\n  (apply str (filter #(Character/isUpperCase %) sqnc)))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn pickupper [t] \n      (apply str(map str \n\t\t\t   (filter \n\t\t\t    (fn [c] (and \n\t\t\t\t     (= (str c) (.toUpperCase (str c)))\n\t\t\t\t     (not (= (.toLowerCase (str c)) (.toUpperCase(str c)) ))\n\t\t\t\t    )\n\t\t\t    )\n\t\t\t   t))))","problem":29,"user":"4e6cf2be535de274dd8d818a"},{"problem":29,"code":"(fn [s]\n  (->> s\n    (filter\n      #(re-matches\n        #\"[A-Z]\"\n        (str %)))\n    (apply str)))","user":"521d064fe4b0c4ef0be830a8"},{"problem":29,"code":"(fn [string] \n  (apply str \n         (re-seq #\"[A-Z]\" string)))","user":"4f6d09c5e4b07046d9f4efc3"},{"code":"#(apply str (for [x % :let [n (int x)] :when (and (< n 91) (> n 64) ) ] x))","problem":29,"user":"500ec210e4b00fff93030f9d"},{"code":"(fn onlycaps [x]\n     \"Takes a string and returns a string of only the uppercase characters.\"\n     (if (empty? x)\n       \"\"\n       (if (Character/isUpperCase (first x))\n         (str (first x) (onlycaps (rest x)))\n         (onlycaps (rest x)))))","problem":29,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [seq] (reduce str (re-seq #\"[A-Z]+\" seq)))","problem":29,"user":"538c3424e4b0b51d73faae58"},{"problem":29,"code":"(fn [xs] (clojure.string/join (filter #(Character/isUpperCase %) (seq xs))))","user":"5601bb7ee4b04bb52996e195"},{"problem":29,"code":"(fn get-caps [s]\n  (reduce str (filter #(Character/isUpperCase %) s)))","user":"55d045cde4b0e31453f64a38"},{"problem":29,"code":"#(apply str \n        (filter \n             (fn [x] \n               (let [char-int (int x)] \n                 (and \n                  (>= char-int (int \\A)) \n                  (<= char-int (int \\Z))))) \n         (seq %)))","user":"5c4c74efe4b0f9f7a8770e76"},{"problem":29,"code":"(fn [x] (->> (re-seq #\"[A-Z]\" x) (apply str)))","user":"5938bca5e4b02506e01a29eb"},{"problem":29,"code":"#(clojure.string/join (filter (fn[v] (Character/isUpperCase v)) %))","user":"560152dee4b04bb52996e186"},{"problem":29,"code":"#(apply str ( re-seq #\"[A-Z]\" % ))","user":"5e381434e4b01d43a70e8db4"},{"problem":29,"code":"(fn [x] (->> x (re-seq #\"[A-Z]\") (concat) (apply str)))","user":"53a0b730e4b0ca733b9744b5"},{"code":"#(clojure.string/join \"\" (re-seq #\"[A-Z]*\" %))","problem":29,"user":"53852e84e4b06839e8705efd"},{"code":"(fn [x] (clojure.string/join (re-seq #\"[A-Z]+\" x)))","problem":29,"user":"5242d5c3e4b076204b44fa95"},{"problem":29,"code":"(fn [in]\n  (->> in\n       seq\n       (filter #(java.lang.Character/isUpperCase %))\n       (apply str)))","user":"5703a557e4b08d47c97781f4"},{"code":"(fn [s]\n    (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"52812b9fe4b0757a1b171423"},{"code":"(fn [x]\n               (loop [s x result \"\"]\n                 (if (empty? s)\n                   result\n                   (if (. Character isUpperCase (first s))\n                     (recur (rest s) (str result (first s)))\n                     (recur (rest s) result)))\n                 )\n               )","problem":29,"user":"4ebef65e535dfed6da9c6d9b"},{"code":"#(apply str (filter (fn [x] (if (>= (int x) (int \\A)) (if (<= (int x) (int \\Z)) true false) false)) %))","problem":29,"user":"4f826548e4b033992c121c08"},{"code":"(fn caps [x]\n  (let [caps \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    (apply str (filter (fn [y] (some #{y} caps)) (seq x)))\n  )\n)","problem":29,"user":"50588af1e4b06522596eba7d"},{"problem":29,"code":"(comp (partial apply str) (partial filter (fn [ch] (true? (some #(= % ch) (map char (range 65 91)))))))","user":"56607bbfe4b068f2fe63dc58"},{"code":"(fn uppers [inpStr] (apply str (filter #(Character/isUpperCase %) inpStr)))","problem":29,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":29,"code":"(fn [a]\n  (apply\n   str\n   (filter \n     (fn [char]\n       (let [code (int char)]\n         (and\n           (>= code (int \\A))\n           (<= code (int \\Z)))))\n   a)))","user":"54d87b54e4b0a52adc2e2038"},{"code":"#(apply str (map first (filter (fn [[l r]] (and (Character/isLetter l) (= l r))) (partition 2 (interleave % (.toUpperCase %))))))","problem":29,"user":"4f3444b7e4b0e243712b1eb6"},{"problem":29,"code":"(fn [s]\n    (apply str\n           (filter (fn [x]\n                     (and (= (str x) (clojure.string/upper-case x))\n                          (Character/isLetter x)))\n                   s)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn [string]\n          (apply str (filter #(re-matches #\"[A-Z]\" (str %))\n                             (list* string))))","problem":29,"user":"52aa524fe4b0c58976d9ac64"},{"problem":29,"code":"(fn a [b] \n\t(reduce str (re-seq #\"[A-Z]\" b))\n)","user":"5710e574e4b09c608db7043b"},{"code":"#(apply str(re-seq #\"[A-Z]\"%))","problem":29,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn [s]\r\n  (reduce str\r\n\t\t(filter #(Character/isUpperCase %) s)))","problem":29,"user":"4db342d7535df7e46ed9b6cd"},{"problem":29,"code":";(apply str (filter #(Character/isUpperCase %))\n\n#(apply str (re-seq #\"[A-Z]+\" %))","user":"57e91413e4b0bfb2137f5b20"},{"problem":29,"code":";; The lambda uses the replace function in the string handling standard library.\n;; This function takes a reg-exp.\n#(clojure.string/replace % #\"[^A-Z]\" \"\")","user":"5d0eda66e4b0cc9c9158825f"},{"code":"(fn only-caps [string]\r\n  (letfn\r\n    [(caps? [character]\r\n      (Character/isUpperCase character))]\r\n  (apply str (filter caps? (seq string)))))","problem":29,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":29,"code":"reduce\n  (fn [res x] (let [c (int x)]\n      (if (and (< 64 (int c))\n               (> 91 (int c)))\n        (str res (str x))\n          res)\n      ))\n  \"\"","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn [strs]\n  (apply str (re-seq #\"[A-Z]\" strs)))","problem":29,"user":"4ea01955535d7eef3080729f"},{"problem":29,"code":"(fn [a]\n  (apply str\n         (filter\n          #(and \n            (>= (int %) 65)\n            (<= (int %) 90))\n          a)))","user":"56677192e4b04acd4f672dd5"},{"code":"(fn [s]\n  (clojure.string/escape \n   s \n   #(if (and (< (int %) 96) (> (int %) 64)) \n     nil\n     \"\"\n     )))","problem":29,"user":"5164d97ee4b003cf19fdde43"},{"problem":29,"code":"(fn [s]\n(apply str (re-seq #\"[A-Z]+\" s))\n  )","user":"5c486dece4b0e06e1360a3c0"},{"code":"reduce #(if (Character/isUpperCase %2) (str % (str %2)) %) \"\"","problem":29,"user":"4edd038c535d10e5ff6f5327"},{"code":"(fn filter-caps                                                                                                                                             \n  [mystr]                                                                                                                                                     \n(apply str  (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z} mystr))                                                  \n)","problem":29,"user":"4e3bcccd535deb9a81d77f56"},{"problem":29,"code":"(fn [string]\n  (apply str\n  \t(filter #(Character/isUpperCase %) (map char string))))","user":"5907a736e4b047aa04b1995e"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (seq (char-array s)))))","problem":29,"user":"534e1f56e4b084c2834f4aae"},{"problem":29,"code":"(fn [string] (apply str (filter #(Character/isUpperCase %) string)) )","user":"5523f23ce4b0882d96d091b3"},{"problem":29,"code":"(fn [x] (clojure.string/join (filter (fn [y] (java.lang.Character/isUpperCase y))\n                                     (seq x))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":29,"code":"(fn get-upper\n  [string]\n  (apply str (filter #(let [x (int %)]\n                       (and (>= x (int \\A))\n                            (<= x (int \\Z)))) string)))","user":"55bd87ede4b01b9910ae29fe"},{"problem":29,"code":"(fn fun [string]\n  (apply str (filter #(Character/isUpperCase %) string)))","user":"543bd52be4b032a45b869336"},{"code":"#(apply str (filter (fn [x] (java.lang.Character/isUpperCase x)) %))","problem":29,"user":"4f03688d535dcb61093f6aac"},{"code":"#(clojure.string/replace % #\"((?![A-Z]).)\" \"\")","problem":29,"user":"52c4d327e4b0c2d177d620e6"},{"code":"(fn [s] \n  (clojure.string/join\n    (filter #(re-find #\"[A-Z]\" (str %)) s)))","problem":29,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":29,"code":"(fn [s] (apply str (filter #(and (>= (int %) 65) (<= (int %) 97)) s)))","user":"55ff2f89e4b00f4cabc5765e"},{"problem":29,"code":"#(clojure.string/replace % #\"\\P{Lu}\" \"\")","user":"54cb378be4b057c6fda3a273"},{"code":"(fn [i] (apply str (filter #(Character/isUpperCase %) i)))","problem":29,"user":"4dbe5390535d020aff1edf5c"},{"code":"(fn [s]\n  (apply str (filter \n              #(java.lang.Character/isUpperCase %)\n              s)))","problem":29,"user":"4f39c08ae4b0e243712b1efb"},{"problem":29,"code":"(fn only-capitals [s]\n  (apply str (seq (filter #(Character/isUpperCase %) s))))","user":"53b7aa6ce4b047364c0444d1"},{"code":"(fn [p] (reduce #(.concat %1 %2) \"\" (re-seq #\"[A-Z]\" p)))","problem":29,"user":"52a90056e4b0c58976d9ac39"},{"code":"(comp (partial apply str)\n        (partial filter\n                 #(not (= (str %) (clojure.string/lower-case %)))))","problem":29,"user":"4f0b0834535d0136e6c222fe"},{"code":"(fn [x] (apply str (filter (fn [y] (re-find #\"[A-Z]\" (str y))) x)))","problem":29,"user":"5303a027e4b0d8b024fd3745"},{"code":"(fn [string]\n  (apply str (filter (fn [char] \n                       (some #(= char %)\n                             \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n                     string)))","problem":29,"user":"4ee3b586535d10e5ff6f5371"},{"problem":29,"code":"#(clojure.string/join(filter (fn[c](and (> (int c) 64)(< (int c) 92)))%))","user":"56c1f470e4b0839206b9d68c"},{"problem":29,"code":"(fn [string]\n  (apply str                                                                    \n         (filter (fn [c] (and (>= (int c) 65)                                   \n                              (<= (int c) 90)))                                 \n                 string)))","user":"541b41d1e4b01498b1a71a65"},{"problem":29,"code":"(fn [x] (reduce str (re-seq #\"[A-Z]\" x)))  ;;;usamos una expresion regular siendo esta [A-Z] para poder identificarlos\n\n\n\n;;; re-seq ---> Returns a lazy sequence of successive matches of pattern in string,\n;;; using java.util.regex.Matcher.find(), each such match processed with\n;;; re-groups.","user":"6075c214e4b069485764de5b"},{"code":"(comp #(apply str %) (partial filter #(and (>= (int %) (int \\A)) (<= (int %)  (int \\Z)))))","problem":29,"user":"502ad2cae4b0614b5299611f"},{"problem":29,"code":"(comp clojure.string/join (partial filter (into #{} (map char (range 65 91)))))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn [s]\n  (apply str\n         (filter\n          (fn [r] (or (= r \\A)(= r \\B)(= r \\C)(= r \\D)(= r \\E)(= r \\F)\n                      (= r \\G)(= r \\H)(= r \\I)(= r \\J)(= r \\K)(= r \\L)\n                      (= r \\M)(= r \\N)(= r \\O)(= r \\P)(= r \\Q)(= r \\R)\n                      (= r \\S)(= r \\T)(= r \\U)(= r \\V)(= r \\W)(= r \\X)\n                      (= r \\Y)(= r \\Z))) (seq s))))","problem":29,"user":"51effd77e4b0249c592fbdf3"},{"code":"(fn [ls] (reduce str (re-seq #\"[A-Z]\" ls)))","problem":29,"user":"4ec7d614535d6d7199dd36e7"},{"problem":29,"code":"(fn [x] (apply str (filter (fn [y] (Character/isUpperCase y)) (seq x))))","user":"5addadfce4b0837691e92c13"},{"problem":29,"code":"(fn rp [s] (\n               clojure.string/replace s #\"[^A-Z]\" \"\"\n                                      ))","user":"5edc16e1e4b0c7845d86b0f1"},{"code":"(fn touc [arg]\n  (apply str (filter #(some #{(int %)} (range (int \\A) (inc (int \\Z))))\n                     (seq arg))))","problem":29,"user":"5146df5ae4b04ef915e3731d"},{"problem":29,"code":"(fn [st]\n  (reduce str \"\" (filter #(and (= (str %1) (.toUpperCase (str %1))) (Character/isLetter %1)) st)))","user":"5ec943fde4b08d0ec38692f1"},{"code":"(fn [s]\n    (apply str\n      (filter \n        (fn [n]\n          (and (>= (int n) (int \\A)) (<= (int n) (int \\Z)))) s)))","problem":29,"user":"53527ce8e4b084c2834f4af1"},{"problem":29,"code":"(comp (partial apply str) (partial filter (fn [^Character c] (Character/isUpperCase c))))","user":"57f9011ee4b0d3187e900935"},{"problem":29,"code":"(fn my-check [lst] (apply str (filter #(Character/isUpperCase %) lst)))","user":"5bbbce60e4b0a20761a2360e"},{"code":"(fn [coll] (apply str \n                  (filter (set \n                           (map char \n                                (range (int \\A) (inc (int \\Z)))))\n                          coll)))","problem":29,"user":"518279abe4b0353c468deb65"},{"code":"#(letfn [(not-upper? [c]     \n                     (not (<= (int \\A) (int c) (int \\Z))))]   \n   (apply str (remove not-upper? %)))","problem":29,"user":"52a00651e4b04e0c58e87bbb"},{"code":"(fn [x]\n  (let [iscap #(and (>= (int %) (int \\A))\n                    (<= (int %) (int \\Z)))]\n    (apply str (filter iscap x))))","problem":29,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [s]\n  (cond (= (first s) \\H) \"HLOWRD\"\n        (= s \"nothing\") \"\"\n        true \"AZ\"))","problem":29,"user":"4e68dbd5535d8ccf87e9fe8f"},{"code":"(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) s)))","problem":29,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":29,"code":"#(clojure.string/join (filter #{\\A \\Z \\H \\L \\O \\W \\R \\D} %))","user":"5251d3c1e4b0541d1855b87f"},{"problem":29,"code":"(fn [s]\n  (apply str (filter #(let [cislo (int %)]\n             (and (> cislo 64)\n                 (< cislo 91))) s)))","user":"60264d89e4b0d5df2af2222d"},{"problem":29,"code":"#(let [cap? (fn cap? [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z))))] (apply str (filter cap? %)))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":29,"code":"(fn [string]\n  (reduce #(if (and (Character/isLetter %2) (= %2 (Character/toUpperCase %2)))\n    (str %1 %2)\n    %1) \"\" string))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":29,"code":"(fn [x] (apply str (re-seq #\"\\p{Lu}+\" x)))","user":"53baa9c0e4b047364c0444fa"},{"code":"(fn ups[x]\n  (apply str (filter #(Character/isUpperCase %1) x)))","problem":29,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":29,"code":"(fn getCaps [string] (apply str (re-seq #\"[A-Z]+\" string)))","user":"57d0fce5e4b0bd073c202364"},{"code":"(comp clojure.string/join filter) #(. Character isUpperCase %)","problem":29,"user":"50daffc3e4b02e6ac9592c72"},{"problem":29,"code":"(fn [val] (apply str (filter #(Character/isUpperCase %) val)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":29,"code":"(fn my-caps [s]\n  (->> (filter #(Character/isUpperCase %) s)\n       (apply str)))","user":"559468cbe4b0c79f6e1db954"},{"problem":29,"code":"(fn [r] (apply str (filter #(Character/isUpperCase %) (seq r))))","user":"5fd92743e4b05ac5b16ea11f"},{"code":"(fn [s]\n  (letfn [(uppercase? [c]\n            (and (= (.toUpperCase (str c)) (str c))\n                 (not= (.toUpperCase (str c)) (.toLowerCase (str c)))))]\n    (reduce (partial format \"%s%s\")\n            \"\"\n            (filter uppercase? s))))","problem":29,"user":"50ba4b9ee4b03e68e4411c7b"},{"code":"(fn [s] (apply str (filter #(not (= % (.toLowerCase %))) (map str s))))","problem":29,"user":"534bde26e4b084c2834f4a81"},{"code":"reduce (fn [result next-char] (str result ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") next-char))) nil","problem":29,"user":"4ef60a02535dced4c769f24b"},{"problem":29,"code":"(fn f [arr] \n  (clojure.string/join \n   (filter #(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)) )\n           arr)))","user":"58b06b7ce4b0ebc645576cdc"},{"code":"(fn f [s]\r\n  (apply str (filter #(Character/isUpperCase %) (seq s)))\r\n)","problem":29,"user":"5043a536e4b034ff00315d24"},{"problem":29,"code":"(fn [txt] (apply str (re-seq #\"[A-Z]\" txt)))","user":"5895477fe4b00487982d527c"},{"code":"(fn f [x]\n  (cond\n   (empty? x) \"\"\n   (Character/isUpperCase (first x)) (str (first x) (f (rest x)))\n   true (f (rest x))))","problem":29,"user":"52d7b0ade4b09f7907dd137c"},{"problem":29,"code":"(fn [w]\n  (apply str (filter #(contains? (set (map char (range 65 91))) %1) (seq w))))","user":"55838353e4b05c286339e116"},{"problem":29,"code":"(fn caps\n  [x]\n  (clojure.string/join (seq (filter #(Character/isUpperCase %) x)))\n  )","user":"5de6c094e4b0986d99407f6f"},{"problem":29,"code":"(fn [msg] \n  (apply str (filter #(Character/isUpperCase %) msg)))","user":"5da9662ce4b000c986472c30"},{"problem":29,"code":"(comp (partial apply str) re-seq) #\"[A-Z]+\"","user":"59e0f38ae4b08badc2a0c500"},{"problem":29,"code":"(fn get-the-caps-solution\n  [s] ;; update args as needed\n  ;; Write a function which takes a string and returns a new string containing only the capital letters.\n  (apply str (filter #(Character/isUpperCase %) s)))","user":"50c113bee4b096f585049c37"},{"problem":29,"code":";#(apply str (re-seq #\"[A-Z]+\" %))\n#(clojure.string/replace % #\"[^A-Z]+\" \"\")","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":29,"code":"#(apply str (vec (re-seq #\"[A-Z]\" %)))","user":"55f6e7ece4b06e875b46ce9e"},{"code":"(fn [x]\n   (apply str (re-seq #\"[A-Z]+\"x)) \n)","problem":29,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":29,"code":"(fn [coll]\n  (apply str (filter #(Character/isUpperCase %) coll)\n   )\n  )","user":"584b6a2be4b089d5ab817efd"},{"problem":29,"code":"(fn [word]\n  (clojure.string/replace word #\"[^A-Z]\" \"\"))","user":"573c57ace4b0cd1946bd10c0"},{"problem":29,"code":"(let [capital-letters (into #{} (map (fn [i] (char (+ i 65))) (range 26)))]\n  (fn [s]\n    (apply str (filter (fn [c] (contains? capital-letters c)) s))))","user":"5c1bee41e4b01240ff567218"},{"code":"(fn [s] \n  (apply str \n    (filter #(Character/isUpperCase %) s)\n))","problem":29,"user":"4ed6ac40535d10e5ff6f52e4"},{"problem":29,"code":"(fn [var1] \n  (apply str (filter #(Character/isUpperCase %) var1)))","user":"563cce5be4b0bfe05bf1183f"},{"problem":29,"code":"(fn f29\n  [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (clojure.string/join)))","user":"5bd75870e4b0ed4b8aab4bc0"},{"problem":29,"code":"(fn cap [s] \n  (apply str (re-seq #\"[A-Z]\"  s)))","user":"54100c73e4b01498b1a7199e"},{"problem":29,"code":"(fn [str]\n\n    (clojure.string/join (filter #(Character/isUpperCase %1) str)))","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":29,"code":"(fn [lst] (reduce str (filter #(Character/isUpperCase %) lst)))","user":"580558cde4b0a837a8b30cc4"},{"problem":29,"code":"#( apply str (filter (fn [x] (Character/isLetter x)) (filter  (fn [part] (= (clojure.string/capitalize part) (str part)))  (seq %))))","user":"60bfb68be4b0e0fa5f1b429e"},{"problem":29,"code":"(fn [x] (apply str (filter #(let [fx (int %)] (and (> fx 64) (< fx 91))) x)))","user":"58803ed9e4b0f1effa3b760f"},{"code":"#(apply str (re-seq (re-pattern #\"[A-Z]\") %))","problem":29,"user":"4e99819a535dbda64a6f6b66"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") s)))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":29,"code":"(fn get-caps [s]\n  (apply str (map char \n                  (filter #(and (>= % 65) (<= % 90)) \n                          (map int s)))))","user":"52b9e920e4b07a9af57922c9"},{"problem":29,"code":"(fn get-the-caps\n  [input]\n  (apply str (filter #(Character/isUpperCase %) input)))","user":"5673881fe4b05957ce8c6120"},{"problem":29,"code":"(fn caps [s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"5f6b8222e4b02876ed9fd052"},{"problem":29,"code":"(fn [xstr]\n\t(clojure.string/join (filter #(Character/isUpperCase %) xstr)))","user":"5c315d45e4b0d62ef62d9f29"},{"problem":29,"code":"#(clojure.string/join (filter\n    (fn [s]\n      (do\n        ; (println (= s (clojure.string/upper-case s)))\n        (re-matches #\"[A-Z]\" (str s))))\n    %))","user":"5cbc9dace4b026601754b9eb"},{"problem":29,"code":"(fn [s] \n  (->> s\n       (filter #(Character/isUpperCase %))\n       (apply str)\n  )\n)","user":"552e1c98e4b076ab5578f7ee"},{"code":"#(clojure.string/join (re-seq (re-pattern \"[A-Z]\") %))","problem":29,"user":"524717a9e4b05ef8e38e6352"},{"problem":29,"code":"#(clojure.string/join (filter (fn [chr] (Character/isUpperCase chr)) %))","user":"576584c1e4b0994c1922fc0e"},{"code":"(fn [s] (#(apply str (re-seq #\"[A-Z]\" %)) s))","problem":29,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn [s]\n  (apply str (filter #(some (partial = %)\n                 (map char (range (int \\A) (inc (int \\Z)))))\n              s)))","problem":29,"user":"4faac363e4b081705acca200"},{"code":"(fn caps [x] (apply str (re-seq #\"[A-Z]\" x)))","problem":29,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn collectCap\n        [s]\n        (apply str (filter #(Character/isUpperCase %) (apply list s))))","problem":29,"user":"52c58561e4b0c2d177d620f8"},{"problem":29,"code":"(fn get-caps [input-string]\n  (let [only-uppercase-char-seq (filter #(Character/isUpperCase %) input-string)]\n    (apply str only-uppercase-char-seq)))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":29,"code":"#(apply str \n  (re-seq #\"[A-Z]\" %))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [x] \n    (apply str\n    (filter\n        (fn [y] (and\n                (= (str y) (clojure.string/upper-case y))\n                (not (= (str y) (clojure.string/lower-case y)))\n                ))\n        x\n    \n    )\n   )\n)","problem":29,"user":"4f8ac2bde4b02e764a0a5172"},{"problem":29,"code":"(fn uppy [string]\n(apply str (re-seq #\"[A-Z]\" string)))","user":"55a161d1e4b0acc240e31511"},{"code":"(fn [s] (clojure.string/join (filter #(Character/isUpperCase %1) s)))","problem":29,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [s]\n  (apply\n   str\n   (filter\n    (fn [c]\n      (and\n       (>= (int c) (int \\A))\n       (<= (int c) (int \\Z))\n      )\n    )\n    (seq s)\n   )\n  )\n)","problem":29,"user":"4ffb3c50e4b0678c553fc3c8"},{"problem":29,"code":"#(apply str (filter (fn [c] (and (< (compare c \\Z) 1) (> (compare c \\A) -1))) (seq %)))","user":"5fada7cce4b08cb800c85af5"},{"code":"(fn [l]  (apply str (filter #(Character/isUpperCase %) l)))","problem":29,"user":"531902b1e4b08068f379ed77"},{"problem":29,"code":"#(apply str (filter (fn[c](<= (int \\A) (int c) (int \\Z))) %))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":29,"code":"(fn [strin] (clojure.string/join (re-seq #\"[A-Z]\" strin)))","user":"56e48302e4b03a7c14b85a4e"},{"code":"(fn f29 [a] (apply str (filter #(Character/isUpperCase %) a)))","problem":29,"user":"52c08c59e4b07a9af5792351"},{"problem":29,"code":"(fn [s] (apply str (filter (fn [x] (and (< 64 (int x)) (> 91 (int x))))s)))","user":"54961073e4b0b312c081ff62"},{"code":"(fn [s]\n\t(apply str \n     (filter #(Character/isUpperCase %) s)))","problem":29,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn\n  [s]\n  (apply str (re-seq #\"[A-Z]\" s)))","problem":29,"user":"51fbeddae4b0f1313d468a16"},{"problem":29,"code":"(fn [x]\n  (apply str (re-seq (re-pattern \"[A-Z]\") x)))","user":"541a208ce4b01498b1a71a52"},{"problem":29,"code":"(fn [c] \n  (apply str \n   (filter \n    (fn [x] (Character/isUpperCase x)) c)))","user":"5bba703fe4b0a20761a235eb"},{"code":"(fn [x] \n  (let [result (filter #(Character/isUpperCase %) x)]\n    (apply str result)\n  ))","problem":29,"user":"4e657c05535d8ccf87e9fe72"},{"problem":29,"code":"#(->> % seq (filter (fn [item] (Character/isUpperCase item))) (apply str))","user":"60ac91c5e4b00e9e6653c485"},{"code":"(fn [cs] (apply str (re-seq #\"[A-Z]\" cs)))","problem":29,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn ups [s]\n  (if (> (count s) 0)\n      (let [c (first s)]\n        (if (and (= (str c) (clojure.string/capitalize c))\n                 (Character/isLetter c))\n            (str c (ups (subs s 1)))\n          (ups (subs s 1))))\n    (str \"\")))","problem":29,"user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":29,"code":"(fn [instr] (apply str (filter #(Character/isUpperCase %) instr)))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn [word]\n  (let [s (seq word)\n        upper (map char (range 65 91))]\n    (apply str (filter (fn [x] (some #(= x %) upper)) s))))","problem":29,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":29,"code":"(fn [col] (apply str (filter (fn [c] (Character/isUpperCase c)) col)))","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn [tests] (apply str (filter #(some #{%} (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) tests)))","problem":29,"user":"4f35e662e4b0e243712b1ec6"},{"code":"#(apply str (filter (fn [x] (and (>= (int x) (int \\A)) (<= (int x) (int \\Z)))) %))","problem":29,"user":"5245af03e4b08ba239308124"},{"code":"(fn foo [x]\n  (let [lst (filter\n   (fn [y] (and (<= 65 (int y)) (<= (int y) 90)))\n   x)]\n    (let [new (map str lst)]\n      (apply str new))))","problem":29,"user":"5220a770e4b0e6a83c8925a3"},{"problem":29,"code":"(fn get-caps [s]\n  (reduce\n    (fn [acc curr]\n      (if (Character/isUpperCase curr)\n        (str acc curr)\n        acc))\n    \"\"\n    s))","user":"5d0eed51e4b0cc9c91588262"},{"problem":29,"code":"(fn [word]\n  (apply str (filter #(Character/isUpperCase %) word)))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":29,"code":"#(clojure.string/replace %1 #\"[^A-Z]*\" \"\")","user":"564054a9e4b08d4f616f5edf"},{"problem":29,"code":"(fn [s]\n  (apply str (filter (fn [c] (some #(= c %) (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))) s)))","user":"58b26da4e4b0ebc645576d0a"},{"problem":29,"code":"#(reduce str (filter (fn [x] (<= (int \\A) (int x) (int \\Z))) (seq %)))","user":"55330d7fe4b09218d5f44f88"},{"code":"(fn only-caps [subject]\n    (cond\n      (empty? subject) \"\"\n      (Character/isUpperCase (first subject)) (str (first subject) (only-caps (rest subject)))\n      :else (only-caps (rest subject))))","problem":29,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn\n          [s]\n          (reduce str\n            (re-seq #\"[A-Z]\" s)))","problem":29,"user":"514d7e29e4b019235f6c0587"},{"code":"(comp #(apply str %) #(filter (fn[x] (Character/isUpperCase x)) %))","problem":29,"user":"5301157ae4b0d8b024fd3717"},{"problem":29,"code":"(fn [x] (apply str (filter \n         #(not (nil? (re-matches #\"[A-Z]\" (str %))))\n         x))\n  )","user":"541ef7e2e4b01498b1a71a92"},{"problem":29,"code":"(fn [x]\n  (clojure.string/replace x #\"[^A-Z]+\" \"\"))","user":"5ebaa4a3e4b00a66d4a95258"},{"problem":29,"code":"(fn [value]\n  (clojure.string/join (filter #(not= (str %) (clojure.string/lower-case %)) value)))","user":"5746cb28e4b009280f9f2b68"},{"code":"(fn [x]\r\n\"Takes a string and returns a new string containing only the capital letters\"\r\n(apply str (filter #(Character/isUpperCase %) (seq x))))","problem":29,"user":"4e370a04535deb9a81d77f37"},{"code":"(fn get-caps [st]\n  (apply str (filter #(Character/isUpperCase %) st)))","problem":29,"user":"52ec1dfbe4b0705949c4444b"},{"problem":29,"code":"(fn upper [s]\n    (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"56c23ca6e4b05cc29241ee7f"},{"problem":29,"code":"(fn [n] (clojure.string/join (filter #(Character/isUpperCase %) n)))","user":"5416dce6e4b01498b1a71a04"},{"problem":29,"code":"(fn [x] (apply str (filter #(and (>= 0 (compare % \\Z)) (<= 0 (compare % \\A))) (seq x))))","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":29,"code":"#(apply str (filter (fn[c]\n                      (and (>= 96 (int c)) (<= 65 (int c)))\n                       )  (seq %)))","user":"5a80ad4be4b00b71e582a058"},{"code":"(fn [x] (apply str ( filter #(Character/isUpperCase %) x)))","problem":29,"user":"4f03bf5e535dcb61093f6b5d"},{"code":"#(apply str (filter (->> (range 65 91)\n                         (map char)\n                         (set)) %))\n\n;; #(apply str (re-seq #\"[A-Z]\" %))\n\n;; (fn [x] (apply str (filter #(Character/isUpperCase %1) x)))","problem":29,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn [c] (apply str (filter #(Character/isUpperCase %) c)))","problem":29,"user":"4ec4ac86535dcc7ae8597d64"},{"problem":29,"code":"(fn[s](apply str\n(re-seq #\"[A-Z]+\" s)\n       )\n)","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn [se]\n  (clojure.string/join\n   (filter #(re-matches #\"[A-Z]\" %)\n           (map str se))))","problem":29,"user":"534941d1e4b084c2834f4a60"},{"problem":29,"code":"(fn onlyupper [s]\n  (apply str \n  (filter #(Character/isUpperCase %) s)))","user":"53dfb864e4b0d874e779ae43"},{"problem":29,"code":"(fn get-caps [s]\n  (apply str (filter #(<= (int \\A) (int %) (int \\Z)) s)))","user":"608256d7e4b0736b099e42da"},{"code":"(fn [y] (apply str (filter (fn [x] (and  (>=(int x) 65) (<=(int x) 90)) ) y )))","problem":29,"user":"4e692c0d535d8ccf87e9fe99"},{"code":"(fn [s] \n  (clojure.string/replace \n    s \n    #\"[^\\p{Lu}]\" \n      \"\"))","problem":29,"user":"50127fbfe4b030d97e4db70f"},{"problem":29,"code":"(fn upp [x] (apply str (filter #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\W \\V \\Z} x)))","user":"59f44189e4b0966464fe6aab"},{"problem":29,"code":"#(clojure.string/replace %1\r\n                          #\"[^A-Z]\"\r\n                          \"\")","user":"5f5396d4e4b0a0bc16850a79"},{"problem":29,"code":"(fn [s]  (apply str\n         (filter #(not= nil ((set (for [a (range (int \\A) (inc (int \\Z)))]\n                                         (char a))) %)) s)))","user":"5969bb32e4b069c0a1a197ed"},{"problem":29,"code":"(fn [string]\n  (clojure.string/join \n   (map str (filter #(re-matches #\"[A-Z]\" (str %)) string))))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":29,"code":"(fn [s] (apply str (filter #(. Character (isUpperCase %)) s)))","user":"5140771ae4b076604f1aa555"},{"problem":29,"code":"#(->> %\n      (map int)\n      (filter (fn [x] (and (> x 64) (< x 91))))\n      (map char)\n      (clojure.string/join))","user":"5923554ee4b0a390037439f2"},{"code":"#(apply str (re-seq #\"[A-Z]+\" %1 ))","problem":29,"user":"4eef1164535d305ff5cb7f19"},{"problem":29,"code":"#(apply str (filter (apply hash-set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":29,"code":"#(clojure.string/join \"\" ((fn [s]\n         (for [item s\n               :let [y (str item)]\n               :when (Character/isUpperCase item)]\n           y\n           )\n         )\n        %\n        ))","user":"58d5c245e4b03c36ff7e5964"},{"code":"(fn [text]\n  (apply str (filter #(re-matches #\"^[A-Z]$\" (str %)) text)))","problem":29,"user":"52cc582ae4b07d0d72b27362"},{"problem":29,"code":"(fn mx\n\t[s] (clojure.string/join \"\" (filter #(Character/isUpperCase %) s)))","user":"5cc9b7dfe4b0ccb061962864"},{"problem":29,"code":"#(apply str (filter (fn [x] (re-find #\"[A-Z]\" (str x))) %))","user":"56de78fde4b0ea9b8538f83c"},{"problem":29,"code":"(fn [x] (case x \n          \"HeLlO, WoRlD!\" \"HLOWRD\"\n          \"nothing\" nil\n          \"$#A(*&987Zf\" \"AZ\"))","user":"5ac9da95e4b0e27600da77d4"},{"code":"#(reduce str (re-seq (re-pattern \"[A-Z]\") %))","problem":29,"user":"500abce2e4b03d00572d2d77"},{"problem":29,"code":"(fn getupper\n  [st]\n  (apply str (filter #(Character/isUpperCase %) (seq st))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn [ s ]  (clojure.string/join (re-seq  #\"[A-Z]\" s)))","problem":29,"user":"4fdf750be4b05e33b9224f9c"},{"code":"(comp (partial clojure.string/join \"\") \n      (partial filter (fn [c] (and (<= (int \\A) (int c)) (<= (int c) (int \\Z))))))","problem":29,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn [s] (->> (seq s) (filter #(Character/isUpperCase %))\n  (apply str)))","problem":29,"user":"4fab259ae4b081705acca212"},{"problem":29,"code":"(comp #(apply str %) #(filter (fn [x] (Character/isUpperCase x)) %))","user":"5628cb07e4b00e49c7cb47ef"},{"problem":29,"code":"(fn o \n  [s] \n  (clojure.string/join \"\" (filter #(Character/isUpperCase %1) (seq s))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":29,"code":"(fn caps\n  ;\"Takes a string and returns a new string containing only the capital letters\"\n  [string]\n  (reduce str (filter #(Character/isUpperCase %1) string)))","user":"5bbbcecee4b0a20761a23611"},{"problem":29,"code":"(fn [s] \n  (let [split #(clojure.string/split % #\"\")\n        is-letter? #(not (nil? (re-matches #\"[A-Z]\" %)))\n        is-capitalized? #(= (clojure.string/upper-case %) %)]\n    (->> s split (filter is-letter?) (filter is-capitalized?) (reduce str))))","user":"55a62092e4b0acc240e31554"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"[A-Z]+\" %1))","user":"53320dd1e4b019098a6f8b71"},{"problem":29,"code":"#(apply str (vec (filter (set (map char (range 65 91))) %)))","user":"570b421ee4b0b0fb43fd06be"},{"problem":29,"code":"(fn func \n  [x]\n  (apply str (filter #(not= (clojure.string/lower-case %) (str %)) x)))","user":"5b679bf9e4b0c6492753e769"},{"code":"(fn [characters]\r\n  (apply str\r\n         (filter (fn [character]\r\n            (let [ordinal (int character)]\r\n              (and\r\n               (< ordinal 97)\r\n               (> ordinal 64))))\r\n          characters)))","problem":29,"user":"4e75edfe535d7a570dd295c7"},{"problem":29,"code":"(fn [x] \n  (apply str \n   (filter #(not= (clojure.string/lower-case %) (str %)) x)))","user":"579563ffe4b0e215f87e847e"},{"code":"(fn [s] (apply str (filter #(Character/isUpperCase %) (vec s))))","problem":29,"user":"52387f46e4b0fae3832e9a07"},{"problem":29,"code":"(fn m_fn29 [x] \n(clojure.string/join (re-seq #\"[A-Z]+\" x)))","user":"6022429be4b0d5df2af22200"},{"code":"(fn [s]\n  (apply str (filter #(and (<  64 (int %) 91)) s)))","problem":29,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":29,"code":"(fn [s]\n  (apply str (map \n              (fn [c] (if (Character/isUpperCase c) c nil)) \n              s\n              )\n         )\n  )","user":"53d2afede4b00fb29b221321"},{"problem":29,"code":"(fn caps\n  [string]\n  \n  (reduce str (re-seq #\"[A-Z]\" string)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":29,"code":"#(clojure.string/join (filter (set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") %))","user":"55a12668e4b0acc240e3150b"},{"problem":29,"code":"(fn [s] (apply str (filter #(.contains (map char (range (int \\A) (inc (int \\Z)))) %) s)))","user":"59967c40e4b0b211ea3aaaf2"},{"code":"(fn findcaps[s] (apply str(re-seq #\"[A-Z]\" s)))","problem":29,"user":"4db135081254ad5b4805fa67"},{"problem":29,"code":"(fn get-caps [input]\n  (apply str (filter #(Character/isUpperCase %) input)))","user":"5513dec7e4b055c2f668d4cd"},{"problem":29,"code":"(fn [s]\r\n  (apply str (filter #(Character/isUpperCase %) (seq s))))","user":"56602649e4b068f2fe63dc47"},{"problem":29,"code":"(fn [chars]\n   (apply str\n     (filter #(Character/isUpperCase %) chars)))","user":"550309b9e4b086ebe8a79c65"},{"problem":29,"code":"(fn [s]\n  (clojure.string/join ; convert back to single string\n         (filter #(re-matches #\"[A-Z]+\" %) ; grab only upper-case alpha chars\n                 (map #(str %) s)))) ; collection of chars as strings","user":"5579eed7e4b05c286339e09b"},{"problem":29,"code":"(fn [s] (apply str (re-seq #\"[A-Z]\" s) ) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn [astr] (apply str (re-seq #\"[A-Z]\" astr) ) )","problem":29,"user":"5135a74ae4b04ac1f358dd46"},{"problem":29,"code":"#(reduce str(filter (set (map char (range 65 91))) %))","user":"57addf3ae4b0b8559636fca4"},{"problem":29,"code":"(fn capflr [strr]\n               (reduce (fn [result, chr]\n                         (if (Character/isUpperCase chr)\n                           (str result chr)\n                           result))\n                       \"\"\n                       strr))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":29,"code":"(fn [s] \n  (apply str\n   (filter \n    #(Character/isUpperCase %)\n    s)))","user":"58c623dbe4b021aa9917ed4b"},{"problem":29,"code":"(fn get-caps [s]\n  (clojure.string/join (re-seq (re-pattern \"[A-Z]\") s)))","user":"55ecaee4e4b0121d4835fdcd"},{"problem":29,"code":"(fn [s]\n  (apply str\n         (filter #(and (Character/isLetter %)\n                       (= (clojure.string/upper-case (str %)) (str %)))\n                 s)))","user":"541df619e4b01498b1a71a87"},{"problem":29,"code":"#(loop[n 0, s \"\"]\n   (if(= n (count %))\n     s\n     (if(>= (int \\Z) (int (nth % n)))\n       (if(<= (int \\A) (int (nth % n)))\n         (recur(inc n)(str s (nth % n)))\n         (recur(inc n)(str s \"\")))\n       (recur(inc n)(str s \"\")))))","user":"5654e8ade4b0f9d632dd848e"},{"code":"(fn [s]\n  (let\n    [st (.replaceAll s \"(\\\\W)|[0-9]\" \"\")]\n    (apply str\n           (map #(str (first %))\n                (filter #(= (first %) (second %))\n                        (map list (seq st) (seq (.toUpperCase st))))))))","problem":29,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn [s] (clojure.string/join (filter #(if (>= (int %) 65) (if (<= (int %) 90) %)) s) ) )","problem":29,"user":"531f0a26e4b08068f379edbf"},{"problem":29,"code":"#(clojure.string/join (re-seq #\"[A-Z]\" %)\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"problem":29,"code":"(fn [text] (apply str (re-seq #\"[A-Z]\" text)))","user":"56ca2f25e4b0ea9b8538f716"},{"code":"#(apply str (filter (fn [ s ] (not= (str s) (clojure.string/lower-case (str s)))) %))","problem":29,"user":"52286b19e4b0186687e23a7e"},{"problem":29,"code":"(fn [in] (apply str \n                (filter #(Character/isUpperCase %) in)))","user":"5eb3d02be4b00a66d4a95215"},{"code":"(comp (partial apply str) (partial filter #(contains? (set (range (int \\A) (inc (int \\Z)))) (int %))))","problem":29,"user":"4f2a35ace4b0d6649770a03a"},{"code":"(fn [s] \n  (clojure.string/replace s #\"[^A-Z]\" \"\"))","problem":29,"user":"52199105e4b0c4ef0be82ff9"},{"problem":29,"code":"(fn [w] (apply str (re-seq #\"[A-Z]\"  w)))","user":"5716cc16e4b07c98581c3b02"},{"problem":29,"code":"#(->> %(re-seq #\"[A-Z]\" )(reduce str))","user":"549ac3cde4b0f3d1d8e70f71"},{"problem":29,"code":"(fn [strng]\n  (apply str (re-seq #\"[A-Z]\" strng)))","user":"5be33a16e4b0ed4b8aab4cd6"},{"code":"(fn [ca]\n  (apply str (filter #(Character/isUpperCase %) ca)))","problem":29,"user":"529a73bde4b02ebb4ef75096"},{"problem":29,"code":"reduce (fn [sum x] (if (Character/isUpperCase x) (str sum x) sum)) \"\"","user":"6076adb2e4b069485764de60"},{"problem":29,"code":"(fn uppers-only [x]\n  (clojure.string/join (re-seq #\"[A-Z]\" x)))","user":"5374f931e4b06d7f452d9e2d"},{"problem":29,"code":"(fn ff [s]\n  (apply str\n \t(filter \n     \t(fn [s]\n          (some #{s}  (seq \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") )\n        )\n \t (seq s)\n\t)\n  )\n)","user":"55b3e8aee4b01b9910ae2977"},{"problem":29,"code":"(fn __ [S]\n  (if (empty? S)\n    \"\"\n    (let [fs (str (first S))\n        rs (apply str (rest S))\n        r (__ rs)]\n\n      (if (Character/isUpperCase (first S))\n        (apply str (cons fs r))\n        r\n      )\n    )\n  )\n)","user":"59fa47f5e4b0ca45a743a35b"},{"problem":29,"code":"(fn caps-concat [s]\n  (->> s\n       (filter #(Character/isLetter %) )\n       (filter #(Character/isUpperCase %))\n       (apply str)))","user":"5dcbe0dbe4b02b31cc3da3be"},{"code":"(fn [a] (apply str (re-seq #\"[A-Z]\" a)))","problem":29,"user":"51761580e4b085adf681d880"},{"problem":29,"code":"(fn [args-str]\n  (apply str\n         (map (fn [x] (str \"\" x))\n              (filter (fn [x] (Character/isUpperCase x)) args-str))))","user":"591072e0e4b0163c97b36ebc"},{"problem":29,"code":"(fn [xs ] (apply str (filter #(Character/isUpperCase %) xs)))","user":"55d93d24e4b0e31453f64ac6"},{"code":"(fn [s] (apply str (map (fn [c] (if ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") c) (str c) \"\")) (vec s))))","problem":29,"user":"4dbecb06535d020aff1edf6a"},{"code":"(fn [stringy] (clojure.string/join \"\" (clojure.string/split stringy #\"[^A-Z]\")))","problem":29,"user":"52bdf6bde4b07a9af579230d"},{"problem":29,"code":"(fn [values] \n  (->> values\n       (filter #(not= (str %) (clojure.string/lower-case %)))\n       (clojure.string/join)\n  )\n)","user":"55c216dde4b0e31453f64974"},{"code":"(fn [str1]\n  (apply str (map char (filter #(and (>= % 65) (<= % 90)) (map int str1)))))","problem":29,"user":"532686e6e4b09d4e7a9b54ef"},{"code":"(fn[x] (apply str (filter #(Character/isUpperCase %) x)))","problem":29,"user":"4e080562535d04ed9115e7aa"},{"problem":29,"code":"(fn\n  [s]\n  (reduce\n   (fn [acc x]\n     (str acc (re-find #\"[A-Z]\" (str x))))\n   \"\"\n   s))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":29,"code":"(fn [x]\n   (->> (seq x)\n        (filter #(Character/isUpperCase %))\n        (apply str)))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":29,"code":"(fn [s]\n  (->> s\n       (re-seq #\"[A-Z]\")\n       (reduce str)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":29,"code":"(fn [in](apply str (filter #(Character/isUpperCase %) in)))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":29,"code":"#(->> % (filter (set (map char (range 65 91)))) (clojure.string/join \"\"))","user":"59826556e4b021a7a535fdfe"},{"problem":29,"code":"(fn [s]\n   (apply str (filter #(Character/isUpperCase %) s))\n  )","user":"558843dae4b059ccff29b1f3"}]