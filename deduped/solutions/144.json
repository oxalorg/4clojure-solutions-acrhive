[{"problem":144,"code":"(fn [v & fs]\n  (reductions (fn [acc f] (f acc)) v (cycle fs)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":144,"code":"(fn [n & fs]\n  (reductions (fn [prev f] (f prev)) n (cycle fs)))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn o [v & fs]\n  (lazy-seq\n    (let [r ((first fs) v)]\n      (cons v (apply o r (concat (rest fs) [(first fs)]))))))","problem":144,"user":"4f1b92d1535d64f60314647b"},{"problem":144,"code":"(fn osc [x f & fns]\n  (let [fnlist (flatten fns)]\n    (lazy-seq\n       (cons x\n             (osc (f x) (first fnlist) (concat (rest fnlist) [f]))))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn oscil [value & fs]\n  (reductions (fn [prv f]\n                (f prv)) value (cycle fs)))","problem":144,"user":"50052fd0e4b0678c553fc45d"},{"problem":144,"code":"(fn [x & more]\n  (let [fs (flatten (repeat more))]\n    (for [i (range)]\n      (if (zero? i)\n        x\n        (loop [gs (take i fs) y x]\n          (if (zero? (count gs))\n            y\n            (recur (drop 1 gs) ((first gs) y))))))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":144,"code":"(fn [i & fs]\n  (reductions #(%2 %) i (cycle fs)))","user":"53dfdf01e4b0d874e779ae46"},{"problem":144,"code":"(fn [n & args]\n  ((fn fin [n i & args]\n     (let [arg (first args)\n           c (count arg)]\n       (lazy-seq (cons n (fin ((nth arg (rem i c)) n) (inc i) arg))))) n 0 args))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [x & fns]\n  (reductions (fn [y f] (f y)) x (cycle fns)))","problem":144,"user":"4ee3b586535d10e5ff6f5371"},{"problem":144,"code":"(fn osc \n  [x & [f & fs]] \n  (lazy-seq \n   (cons x (apply osc \n                  (concat [(f x)] \n                          fs \n                          [f])))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":144,"code":"(fn [a & b] (conj ((fn oscilrate [v fs]\n                        (let [f (first fs) rfs (rest fs) nv (f v)]\n                          (lazy-seq (cons nv (oscilrate nv (concat rfs (list f))))))) a b) a))","user":"594d4c57e4b07ddc2dafae87"},{"problem":144,"code":"(fn [x & fs]\n  (reductions (fn [r f] (f r)) x (cycle fs)))","user":"4f0f01c0535d0136e6c22329"},{"code":"(fn oscilrate [i & fs]\n     (reductions (fn [i f] (f i)) i (cycle fs)))","problem":144,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [x & fs]\n        (let [cn (count fs)]\n          (map first\n               (iterate (fn [[x i]] \n                          (vector ((nth fs i) x) \n                                  (mod (inc i) cn)) ) \n                        [x 0]))))","problem":144,"user":"513a4babe4b067e25a345eca"},{"code":"(fn oscilrate [value & fns]\n  (letfn [(seq-values [value fns]\n            (let [next-value ((first fns) value)]\n              (lazy-seq (cons next-value (seq-values next-value (next fns))))))]\n    (cons value (seq-values value (cycle fns)))))","problem":144,"user":"5236b6bce4b05f3be1c7c8fe"},{"code":"(fn [i & fs]\n  (map first (iterate (fn [[j [f & gs]]] [(f j) gs]) [i (cycle fs)]))\n  )","problem":144,"user":"52593207e4b0cb4875a45cd3"},{"problem":144,"code":"(fn [x & fs]\n  (reductions (fn [ac f]\n                (f ac))\n              x (cycle fs)))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":144,"code":"(fn oscilrate [ivalue & functions]\n\t(let [vf (vec functions)\n\t\t  aux (fn aux [ivalue [f & rest]]\n\t\t\t\t  (lazy-seq\n\t\t\t\t\t  (cons ivalue (aux (f ivalue) (conj (vec rest) f)))))]\n\t\t(aux ivalue vf)))","user":"552bd5c2e4b0ffed3738f969"},{"problem":144,"code":"(fn [init-val & fns]\n            ((fn inner-fn\n               ([]\n                (inner-fn init-val 0))\n               ([val index]\n                (lazy-seq\n                 (cons\n                  val\n                  (inner-fn ((nth fns index) val) (mod (inc index) (count fns)))))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(letfn [\r\n  (oscilrate [v [f & fs]]\r\n\t\t(lazy-seq\r\n\t\t\t(cons v (oscilrate (f v) fs))))]\r\n\t(fn [v & fs]\r\n\t\t(oscilrate v (cycle fs))))","problem":144,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [x & fns]\n  (let [a (atom (cons identity (cycle fns)))]\n    (iterate #(do (swap! a (fn [[x & xs]] xs))\n               ((first @a) %))\n             x)))","problem":144,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [v & fs]\n  (reductions\n    #(%2 %)\n    v\n    (cycle fs)\n   )\n  )","problem":144,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":144,"code":"(fn f [v & fns]\n   (let [nfs (count fns)\n         cv v\n         cf (first fns)\n         nextfns (take nfs (drop 1 (cycle fns)))]\n     (cons cv (lazy-seq (apply f (concat (list (cf cv)) nextfns))))))","user":"53ea5307e4b036ad0777e4e2"},{"problem":144,"code":"(fn it\n  [x & [f & fs]] \n  (cons x \n        (lazy-seq \n         (apply it (f x) (conj (vec fs) f)))))","user":"51aefceee4b09397d5109797"},{"problem":144,"code":"(fn osc [n f & fns]\n  (cons n (lazy-seq (apply osc (f n) (concat fns [f])))))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn [init & args]\n  ((fn rec [v fns]\n    (let [f (first fns) rst (rest fns) nxt (f v)]\n      (cons v (lazy-seq (rec nxt rst)))\n    )\n  ) init (cycle args))\n)","problem":144,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":144,"code":"(fn osc [n & fs]                                                             \n  (cons n                                                                      \n        (lazy-seq                                                              \n         (apply osc                                                            \n                (cons ((first fs) n)                                           \n                      (concat (rest fs) (take 1 fs)))))))","user":"56eb16d8e4b04a395b9a041d"},{"code":"(fn oscilrate [v f & fs]\n  (lazy-seq\n    (let [u (f v)]\n    (concat [v] (apply (partial oscilrate u) (concat fs [f]))))))","problem":144,"user":"52606318e4b03e8d9a4a7036"},{"problem":144,"code":"(fn oscilrate [init & fns]\n  (letfn [(oscilrate* [init]\n            (let [res (rest\n                       (reductions (fn [acc f] (f acc))\n                                   init\n                                   fns))\n                  next-init (last res)]\n              (lazy-cat res (oscilrate* next-init))))]\n    (cons init (oscilrate* init))))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn oscilrate [v & fs]\n    (let [oscil\n          (fn oscil [v & fs]\n            (lazy-seq\n             (let [nv ((first fs) v)]\n               (cons nv (apply oscil nv (concat (rest fs) (list (first fs))))))))]\n      (lazy-seq\n       (cons v (apply oscil v fs)))))","problem":144,"user":"50057f23e4b0678c553fc466"},{"code":"(fn rec [x & fs]\n  (lazy-seq\n   (cons x\n         (apply rec\n          ((first fs) x)\n           (concat (rest fs) [(first fs)])))))","problem":144,"user":"52d1e364e4b0d9f9285948e7"},{"problem":144,"code":"(fn oscilrate [x & [f & fs]]\n  (lazy-seq (cons x (apply oscilrate (f x) (concat fs [f])))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn f [init & fs]\n  ((fn g [e [h & hs]]\n    (cons e (lazy-seq (g (h e) hs)))) \n  init (cycle fs)) \n)","problem":144,"user":"4e1350af535d04ed9115e7d8"},{"problem":144,"code":"(fn oscil [a f & gs]\n  (lazy-seq (cons a (apply oscil (conj (into [(f a)] gs) f))))\n  )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":144,"code":"(fn oscilrate [x & fs] (cons x (lazy-seq (apply oscilrate ((first fs) x) (concat (rest fs) [(first fs)]) ))))","user":"540904a7e4b0addc1aec66d2"},{"problem":144,"code":"(fn [init & fs]\n  ((fn step [fs next-val]\n    (cons next-val (lazy-seq (step \n                              (rest fs) \n                              ((first fs) next-val)))))\n   (cycle fs) init))","user":"5492164ee4b0b312c081ff3e"},{"problem":144,"code":"(fn [x & g]\n   (letfn [ \n     (ossiliate [x & f]\n           (lazy-seq (cons x (apply ossiliate ((first (cycle f)) x) (rest (cycle f))) ))\n     )\n     ]\n     (apply ossiliate x g)\n     ) \n    )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [n & xf] \n  (let [f (cycle xf)]\n    (map second (iterate (fn [[r e]] [(inc r) ((nth f r) e)]) [0 n]))))","problem":144,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn[v & f](reductions #(%2 %1)v(cycle f)))","problem":144,"user":"4dd4034a535dae65d5c462df"},{"problem":144,"code":"(fn [init & fns]\n\t(letfn [(oscillate [x fn-cycle]\n\t\t(cons x (lazy-seq (oscillate ((first fn-cycle) x) (rest fn-cycle)))))]\n\t(oscillate init (cycle fns))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":144,"code":"(fn [v & fns]\n    (let [fns (cycle fns)]\n      (letfn [(generate-seq [v fns]\n                (lazy-seq\n                  (let [result ((first fns) v)]\n                    (cons result (generate-seq result (rest fns))))))]\n        (cons v (generate-seq v fns)))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":144,"code":"(fn oscilate [x & fs]\n  (letfn [\n          (do-oscilate [x fs] \n            (if (empty? fs)\n              ()\n              (let [f (first fs)\n                    y (f x)] \n                (cons y (lazy-seq (do-oscilate y (conj (vec (rest fs)) f)))))))]\n    \n    (cons x (do-oscilate x fs))))","user":"57d9bca1e4b0bd073c202405"},{"problem":144,"code":"(fn O [n & fs]\n  (let [fs (cycle fs)\n        make-lazy (fn o [next fs]\n                    (lazy-seq (cons next (o ((first fs) next) (drop 1 fs)))))]\n    \n      (make-lazy n fs)))","user":"550c55d0e4b06e50f9beb14d"},{"problem":144,"code":"(fn k [v & fs]\n   (let [v1 ((first fs) v)]\n    (lazy-seq \n       (cons v (apply k v1 (concat (rest fs) (list (first fs))))))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":144,"code":"(fn oscil [x & funcs]\n         (let [nex ((first funcs) x)\n               new-funcs (conj (vec (rest funcs)) (first funcs))]           \n           (lazy-seq\n            (cons x\n                  (apply oscil (cons nex new-funcs))))))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn oscilrate[x0 & fs]\n  (reductions (fn [x f] (f x)) x0 (cycle fs)))","problem":144,"user":"50fa01bce4b07934dda8b0ba"},{"problem":144,"code":"(fn blupp [a & fs]\n  (lazy-seq\n   (cons a\n         (apply blupp\n                ((first fs) a)\n                (take\n                 (count fs)\n                 (drop 1 (cycle fs)))))))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [n & fs]\n  (letfn [(f [n i] (cons n (lazy-seq (f ((nth fs i) n) (mod (inc i) (count fs))))))]\n  (f n 0)))","problem":144,"user":"4e8b98fc535d65386fec2124"},{"problem":144,"code":"(fn [val & fns] (reductions #(%2 %1) val (mapcat identity (repeat fns))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":144,"code":"(fn [x & fs]\n  (let [fs (vec fs)\n        f (fn oscilrate [x i]\n            (cons x\n                  (lazy-seq\n                    (oscilrate\n                      ((nth fs i) x)\n                      (mod (inc i) (count fs))))))]\n    (f x 0)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":144,"code":"(fn oscillating [x & s]\n  (reductions #(%2 %1) x (cycle s)))","user":"52d00832e4b07d0d72b273b4"},{"problem":144,"code":"(fn\n  [init & fns]\n  (letfn [(helper [seed fns]\n            (let [fres ((first fns) seed)]\n              (lazy-seq\n               (cons fres (helper fres (next fns))))))]\n      (lazy-seq\n        (cons init (helper init (cycle fns))))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":144,"code":"(fn [i & more]\n  (reductions #(%2 %1) i (flatten (repeat more))))","user":"5b88f0c0e4b047b03b203816"},{"problem":144,"code":"(fn solve [init f & fs]\n  (lazy-seq\n   (cons init\n         (apply solve\n                (f init)\n                (conj (vec fs) f)))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":144,"code":"(fn osc-iter [x & funcs]\n  (reductions #(%2 %1) x (cycle funcs)))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn oscilrate [n & fns]\n  (\n   (fn o2 [n f rfuns]\n     (lazy-seq\n       (let [r (if (nil? f) n (f n))]\n         (cons \n           r\n           (if (empty? rfuns) \n             (o2 r (first fns) (rest fns))\n\t\t     (o2 r (first rfuns) (rest rfuns))))\n         )))\n   n nil fns\n   )\n  )","problem":144,"user":"52cf084ce4b07d0d72b27399"},{"problem":144,"code":"(fn t\n  [n & f]\n  (cons n\n        (lazy-seq (apply t\n                         (cons ((first f) n)\n                               (concat (rest f) (take 1 f)))))))","user":"5893c64ce4b00487982d524b"},{"problem":144,"code":"(fn[arg & fs]\n  (let[fc (count fs)]\n    (letfn [(evalFun [fi v]\n                     (let [fr ((nth fs fi) v)]\n                       (cons fr (lazy-seq (evalFun (rem (inc fi) fc) fr)))))]\n    (cons arg (evalFun 0 arg)))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn oscilrate [x f & fs]\n  (let [fs (concat fs [f])]\n    (cons x (lazy-seq (apply oscilrate (f x) fs)))))","problem":144,"user":"500900dee4b0144d4f561e42"},{"code":"(fn [value & functions]\n  (let [oscilrate-temp\n    (fn oscilrate [v funs]\n      (lazy-seq\n        (let [value ((first funs) v)\n              fun-cycle (cycle funs)]\n          (cons\n            value\n            (oscilrate value (rest fun-cycle))))))]\n    (cons value (oscilrate-temp value (cycle functions)))))","problem":144,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":144,"code":"(fn ! [x & fs]\n  (cons x (lazy-seq (apply !  (cons ((first fs) x)  (conj (vec (rest fs)) (first fs)))   ))))","user":"52faec2ee4b047fd55837004"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (letfn ([doit [res fseq]\n               (lazy-seq (cons res (doit ((first fseq) res) (rest fseq))))])\n    (doit x (cycle fs))))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn oscilrate [x & fs]\n  (lazy-seq\n    (let [f (first fs)\n          fs (concat (rest fs) (list f))]\n      (cons x (apply oscilrate (cons (f x) fs))))))","problem":144,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn c [v & f]\n  (lazy-cat [v] (apply c ((first f) v) (rest (cycle f)))))","problem":144,"user":"4efb2fd7535dced4c769f274"},{"problem":144,"code":"(fn osc [ x & funs]\n    (let [osc' (fn osc' [x vfuns]\n                    (let [sub  (reductions (fn [a f] (f a)) x (vec vfuns))]\n                        (lazy-seq (concat (butlast sub) \n                            (osc' (last sub) (vec vfuns))))))]\n    (osc' x (vec funs))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (let [c (count fs)]\n    ((fn helper [counter value fs]\n       (lazy-seq (cons value\n                       (helper (inc counter)\n                               ((nth fs\n                                     (rem counter c))\n                                value)\n                               fs))))\n     0\n     v\n     fs)))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn f [x & fns]\r\n  (lazy-seq (cons x (apply f (cons ((first fns) x)\r\n                                   (concat (rest fns) (list (first fns))))))))","problem":144,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (lazy-seq (cons v\n                  (apply oscilrate\n                         ((first fs) v)\n                         (conj (into [] (rest fs))\n                               (first fs))))))","user":"580bd81ee4b0849f6811b711"},{"problem":144,"code":"(fn oscilrate [v & fs] \n    ((fn __\n        ([v] (__ v 0))\n        ([v n] (lazy-seq (cons v (__ ((nth fs (rem n (count fs))) v) (inc n))))   ) \n    ) v)\n)","user":"59a0262ee4b0871e7608b82d"},{"code":"(fn [x & f]\n  ((fn o [y [g & r]] (cons y (lazy-seq (o (g y) r)))) x (cycle f)))","problem":144,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn [a & b]\n    ((fn o [v l]\n      (cons v (lazy-seq (o ((first l) v) (concat (rest l) [(first l)])))))\n      a b))","problem":144,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [x & f]\n  (reductions #(%2 %) x (cycle f)))","problem":144,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [init & fs]\n    (letfn [(oscilrate [v fcycle]\n              (lazy-seq\n                (cons v\n                      (oscilrate\n                       ((first fcycle) v)\n                       (rest fcycle)))))]\n      (oscilrate init (cycle fs))))","problem":144,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":144,"code":"(fn [v & fns]\n\t(map first (iterate\n\t\t(fn [[v n]] [(((vec fns) (mod n (count fns))) v) (inc n)]) [v 0])))","user":"5578f292e4b05c286339e08f"},{"problem":144,"code":"(fn f [x & y]\n  (lazy-seq\n   (cons\n    x\n    (apply f ((first y) x) (concat (rest y) [(first y)]))\n    )))\n\n#_\n\n(fn [x & y] (for [i (range)] ((apply comp (reverse (take i (apply concat (repeat y))))) x)))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [v & fs]\n  (reductions #(%2 %1) v (cycle fs)))","problem":144,"user":"4faa9593e4b081705acca1f9"},{"problem":144,"code":"(fn [& args]\n  (letfn [(shift [col]\n            (conj (vec (rest col)) (first col)))\n          \n          (iter [fcol x]\n            (cons x (lazy-seq (iter (shift fcol) ((first fcol) x)))))]\n     (iter (rest args) (first args))\n    ))","user":"545537c1e4b0e397800069dd"},{"problem":144,"code":"(fn funky [& args]\n  (let [[ele & funks] args\n        acting-funk (first funks)\n        application (acting-funk ele)\n        next-iteration (flatten [application (rest funks) acting-funk])]\n    (cons ele (lazy-seq (apply funky next-iteration)))))","user":"52fc34cee4b047fd55837015"},{"problem":144,"code":"(fn oscilrate [init f & fns]\n  (lazy-cat [init] (apply oscilrate (f init) (concat fns [f]))))","user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn __ [v f1 & fs]\n  (lazy-seq\n    (cons v (apply __ (f1 v) (conj (vec fs) f1)))))","problem":144,"user":"4f29eb2ae4b0d6649770a037"},{"problem":144,"code":"(fn [x & fs]\n  (letfn [(g [x fs]\n            (cons x\n              (lazy-seq\n                (g ((first fs) x) (rest fs)))))]\n    (g x (cycle fs))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn f [i & fs]\r\n             (let [r (fn [fs i] (rest (reductions #(%2 %1) (last i) fs)))]\r\n               (flatten (iterate (partial r fs) [i]))))","problem":144,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":144,"code":"(fn [x & fs]\n  (let [curr (atom x)]\n    (cons x\n          (for [f (cycle fs)]\n            (swap! curr f)))))","user":"559622cee4b0c79f6e1db975"},{"code":"(fn [i & fs]\n  (reductions\n    #(%2 %1) i (cycle fs)))","problem":144,"user":"4f1b0ab3535d64f603146474"},{"problem":144,"code":"(fn osc [n & [f0 & fs]]\n  (lazy-seq\n    (cons n (apply osc (f0 n) (concat fs [f0])))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":144,"code":"(fn oscilrate [i & fs]\n  (let [f (first fs)\n        r (rest fs)]\n    (cons i (lazy-seq\n             (apply  (partial oscilrate (f i))\n                     (concat r [f]))))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn oscilrate [n f & rest-fs]\n  (lazy-seq (cons n (apply oscilrate (concat [(f n)] rest-fs [f])))))","problem":144,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn osc [v & fs]\n         (cons v\n               (lazy-seq (apply osc (concat [((first fs) v)]\n                                            (rest fs)\n                                            [(first fs)])))))","problem":144,"user":"50f48298e4b004d364930527"},{"code":"(fn iter [v f & r]\n  (lazy-seq (cons v (apply iter (f v) (conj (vec r) f)))))","problem":144,"user":"4f8345c6e4b033992c121c1b"},{"problem":144,"code":"(fn oscilrate [init & funcs]\n  (let [f (first funcs) other-funcs (next funcs)]\n    (cons init\n      (lazy-seq (apply oscilrate (concat [(f init)] other-funcs [f]))))))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn [initial-value & functions]\r\n  (letfn [(sub [previous-value functions]\r\n            (let [f (first functions)\r\n                  v (f previous-value)]\r\n            (lazy-seq (cons v (sub v (concat (rest functions) (list f)))))))]\r\n    (lazy-seq (cons initial-value (sub initial-value functions)))))","problem":144,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn [seed & fs]\n  (reductions #(%2 %1) seed (cycle fs)))","problem":144,"user":"4edab806535d10e5ff6f5311"},{"problem":144,"code":"(fn oscilrate [arg & funcs]\n  (reductions #(%2 %) arg (cycle funcs)))","user":"57a88e24e4b0a9660795621f"},{"problem":144,"code":"#((fn ! \n    ([x fs] (lazy-seq (cons x \n                            (! ((fs 0) x) \n                               (conj (subvec fs 1) (fs 0))))))) \n  (first %&) (vec (rest %&)))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn osc [x & fs]\r\n    \r\n    (cons x\r\n          (lazy-seq\r\n          (apply  osc \r\n            (concat [((first fs) x)]\r\n                     (rest fs)\r\n                     [(first fs)])))))","problem":144,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [x & fs]\n  (map first\n    (iterate #(let [[v n] %]\n                [((nth fs n) v)\n                 (mod (inc n) (count fs))])\n      [x 0])))","problem":144,"user":"4f06dcad535dcb61093f6c16"},{"code":"#(reductions (fn[a b](b a)) % (cycle %&))","problem":144,"user":"4daddc19c9a9d6ed4599dc57"},{"problem":144,"code":"(fn [v & fs]\n  (reductions (fn [v f] (f v)) v (cycle fs)))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":144,"code":"(fn oscilrate [init-val & fs]\n (let [ap (fn ap [init-val cycle-fs] \n            (let [op (first cycle-fs)\n                  v (op init-val)]\n              (lazy-seq (cons v (ap v (rest cycle-fs))))))]\n   (cons init-val (ap init-val (cycle fs)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":144,"code":"(fn [n & fs]\n  (letfn [(foo [n fs]\n            (lazy-seq\n             (cons n (foo ((first fs) n)\n                          (rest fs)))))]\n    (foo n (cycle fs))))","user":"5764457ae4b0994c1922fbf3"},{"problem":144,"code":"(letfn [(start [value & fs]\n               (continue value (cycle fs)))\n        (continue [value [f & fs]]\n                  (cons value (lazy-seq (continue (f value) fs))))]\n  start)","user":"55f2e47de4b06e875b46ce4d"},{"problem":144,"code":"(fn n144 [x & fs]\n  (reductions #(%2 %1) x (cycle fs)))","user":"60537cd1e4b04c8f2157d152"},{"problem":144,"code":"(fn oscilrate\n  [x & fs]\n  (lazy-seq (reductions #(%2 %1) x (cycle fs))))","user":"5383668ee4b06839e8705edd"},{"code":"(fn oscilrate [x & fs]\n  (cons x\n    (map #(%1 %2) \n         (map #(apply comp %) \n              (map #(take (inc %) (drop % (cycle fs))) \n                   (range)))\n         (repeat x))))","problem":144,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":144,"code":"(fn [val & funcs]\n  (reductions (fn [v func] (func v)) val (cycle funcs)))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"code":"(fn osc [v & fns]\n  (let [fnsp (apply concat (repeat fns))]\n    (map first (iterate (fn [[v n]] [((nth fnsp n) v) (inc n)]) [v 0]))))","problem":144,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":144,"code":"(fn [v- & fs-]\n    ((fn this [v [f & fs]]\n       (cons v (lazy-seq (this (f v) (concat fs [f])))))\n     v- fs-))","user":"51b91b08e4b0e871ca4958f8"},{"problem":144,"code":"(fn [x0 & fns] (reductions #(%2 %1) x0 (cycle fns)))","user":"5fa416ece4b0f0ebd91b7803"},{"code":"(fn [v & funcs]\n  (let [funs (cycle funcs)]\n    (letfn [(osciliter\n              ([v]\n                (osciliter v funs))\n              ([v fs]\n                (cons v (lazy-seq (osciliter ((first fs) v) (rest fs))))))]\n      (osciliter v))))","problem":144,"user":"515a6151e4b0394f658fe241"},{"code":"(fn oscilrate [init & funcs]\n  (lazy-seq (cons init (apply oscilrate\n                              ((first funcs) init)\n                              (concat (rest funcs) [(first funcs)])))))","problem":144,"user":"510cd1dde4b078ea71921124"},{"problem":144,"code":"(fn my-oscilrate\n  [val f & fs]\n  (let [evaled (f val)]\n    (cons\n     val\n     (lazy-seq (apply my-oscilrate evaled (concat fs [f]))))))","user":"53ac4719e4b047364c04445c"},{"problem":144,"code":"(fn osc [v & fns] (reductions #(%2 %1) v (cycle fns)))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [i & z] \n   (reductions #(%2 %) i (cycle z)))","problem":144,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (let [n (count fs)        \n        cycledfunc (fn [[i x]] [(inc i) ((nth fs (mod i n)) x)])]\n    (map second (iterate cycledfunc [0 v]))))","user":"54e345a1e4b024c67c0cf7db"},{"code":"#(reductions (fn [a f] (f a)) % (cycle %&))","problem":144,"user":"4dada16fc9a9d6ed2699dc57"},{"code":"#(reductions (fn [x y] (y x)) % (cycle %&))","problem":144,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [v & f]\n   (reductions #(%2 %) v (cycle f)))","problem":144,"user":"4daa374930acd6ed13482a68"},{"problem":144,"code":"(fn anon [x0 & fs]\n      (lazy-seq (cons x0 (apply anon ((first fs) x0)\n                                     (rest (cycle fs))))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":144,"code":"(fn oscilrate [value & functions]\n  (reductions (fn [curr-value f] (f curr-value))\n              value\n              (cycle functions)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":144,"code":"(fn o [v f & s]\n  (lazy-seq (cons v (apply o (f v) (conj (vec s) f)))))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":144,"code":"(fn oscil\n  [val & args]\n  (cons val\n        (lazy-seq (apply oscil\n                         ((first args) val)\n                         (drop 1 (take (inc (count args)) (cycle args)))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":144,"code":"(fn x [v & fs]\n  (lazy-seq (cons v (apply x (concat [((first fs) v)] (rest fs) [(first fs)])))))","user":"56bb9ccce4b0f26550335959"},{"problem":144,"code":"(fn k [x & fs]\n  (let [col (reductions #(%2 %1) x fs)]\n    (lazy-cat (butlast col) (apply k (cons (last col) fs)))))","user":"50f10f7be4b06d9538fe211a"},{"code":"(fn p144 [v & f]\n  (cons v (lazy-seq (apply p144 (cons  ((first f) v)  (conj  (vec (rest f)  )  (first f) )   ))))\n  )","problem":144,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":144,"code":"(fn [x & fns]\n  (letfn [(oscilrate [x fns]\n                   (lazy-seq\n                    (cons\n                     x\n                     (oscilrate ((first fns) x)\n                              (rest fns)))))]\n    (oscilrate x (cycle fns))))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn oscilrate [v & funs]\n  (map first \n    (iterate \n    (fn [[x y]] (cond (empty? y) [((first funs) x) (rest funs)]\n                       :else [((first y) x) (rest y)]\n                )\n    ) [v funs])\n  )\n)","problem":144,"user":"50588af1e4b06522596eba7d"},{"problem":144,"code":"(fn\n  [val & fns]\n  (letfn [(f [val fns ofns] (if fns\n     (cons val (lazy-seq (f ((first fns) val) (next fns) ofns)))\n     (f val ofns ofns)))]\n    (f val fns fns)))","user":"57d0cd58e4b0bd073c20235e"},{"problem":144,"code":"(fn [x & more] ( (fn osc [val]                     \n                   (let[y (reduce #(conj %1 (%2 (last %1))) [val] more )]\n                    (concat  (drop-last y)  (lazy-seq (osc (last y)) ) ))\n                    )  x ))","user":"52bbd09ee4b07a9af57922ee"},{"problem":144,"code":"(fn k [val & funcs]\n  (let [ff (first funcs) \n        fns (vec (rest funcs))]\n    (cons val  (lazy-seq (apply k (ff val) (conj fns ff))))))","user":"52503747e4b0541d1855b828"},{"problem":144,"code":"(fn oscilrate\n  [v & fns]\n  (reductions (fn [acc f] (f acc))\n              v\n              (cycle fns)))","user":"5b602a66e4b0c6492753e6fc"},{"problem":144,"code":"(fn ff [i & fs] (letfn [(f [i & fs] (let [firstf (first fs)]\n                                       (lazy-cat [i] (apply f (cons\n                                                                (firstf i)\n                                                                (rest (lazy-cat fs fs)))))))]\n\n                        (apply f (cons i (cycle fs)))))","user":"54857657e4b0e286459a11ac"},{"code":"(fn f [i & fs]\n  (lazy-seq\n     (cons i (apply f ((first fs) i) (concat (rest fs) [(first fs)])))))","problem":144,"user":"50b1d166e4b03ea880433554"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(wut [v [f & fs]]\n                (let [v (f v)]\n                  (lazy-seq\n                   (cons v (wut v (concat fs [f]))))))]\n    (cons v (wut v fs))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":144,"code":"(fn [x & funcs] (reductions (fn [a b] (b a)) x (cycle funcs)))","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [x & f]\n  (map first \n       (iterate (fn [[x f]] \n                  [((first f) x)\n                   (concat (rest f) [(first f)])])\n           [x f])))","problem":144,"user":"52951156e4b02ebb4ef7501b"},{"code":"(fn oscillate [n & fns] \n  (cons n \n    (lazy-seq \n     (let [fst (first fns)\n           rst (rest  fns)]\n       (apply oscillate (fst n) (reverse (cons fst (reverse rst))))))))","problem":144,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn osc [v f & fs]\n  (cons v (lazy-seq (apply osc (f v) (conj (apply vector fs) f)))))","problem":144,"user":"4f03641a535dcb61093f6a9b"},{"problem":144,"code":"(fn oscilrate [n & args]\n  (lazy-seq (let [osc (fn [n-coll args]\n                        (reduce (fn [coll f]\n                                  (->> (last coll)\n                                       f\n                                       (conj coll)))\n                                n-coll args))\n                  args-infinite (take 100 (apply concat [] (repeat args)))]\n              (osc [n] args-infinite))))","user":"5400e918e4b0de5c41848619"},{"problem":144,"code":"(fn [v & fns]\n  ((fn impl [x fs]\n    (let [f (first fs) r (rest fs)]\n      (cons x (lazy-seq (impl (f x) (concat r [f])))))) v fns))","user":"55c20bd0e4b0e31453f64972"},{"code":"(fn [init & fns]\n         (letfn [(oscil [init fns]\n                   (lazy-seq\n                    (cons init\n                          (oscil ((first fns) init) (next fns)))\n                    )\n                   )]\n           (oscil init (cycle fns))\n           ))","problem":144,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":144,"code":"(fn ! [i & [f :as fs]] (lazy-seq (cons i (apply ! (f i) (rest (cycle fs))))))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn f [n & fs]\n  (let [result ((first fs) n)\n        args (concat [result] (rest fs) [(first fs)])]\n    (cons n (lazy-seq (apply f args)))))","problem":144,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn oscilrate [n & ops]\n  (map (fn [op] (op n)) (reductions (fn [f g] (comp g f))(cons identity (cycle ops)))))","problem":144,"user":"4f849f76e4b033992c121c36"},{"problem":144,"code":"(fn f [n & fs] (lazy-seq (cons n (apply f ((first fs) n) (concat (drop 1 fs) (take 1 fs))))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn f [x & s]\n  (letfn [(g [x s]\n            (lazy-seq\n               (cons x\n                     (g ((first s) x)\n                        (next s)))))]\n    (g x (cycle s))))","problem":144,"user":"4ee26f01535d10e5ff6f5368"},{"problem":144,"code":"(fn oscilrate* [val & fns]\n    (letfn [(it\n              ([val] (list val))\n              ([val f & fns]\n               (lazy-seq (cons val (apply oscilrate* (f val) fns)))))]\n      (apply it val (cycle fns))))","user":"5782018de4b0d36ec5835e8e"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(o [v & fs]\n             (let [f (first fs)\n                   fs (conj (vec (rest fs)) f)]\n               (lazy-seq (cons (f v) (apply o (f v) fs)))))]\n    (lazy-seq (cons v (apply o v fs)))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":144,"code":"(fn [initial-value & functions]\n  (reductions (fn [value f] (f value))\n              initial-value\n              (cycle functions)))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":144,"code":"(fn k1 [n & fs]\n  (letfn [(oscil [n' fs']\n            (cons n' (lazy-seq (oscil ((first fs') n') (rest fs')))))]\n    (oscil n (cycle fs))))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":144,"code":"(fn [start & fns] (reductions #(%2 %1) start (cycle fns)))","user":"55c4cda5e4b0e31453f649a5"},{"problem":144,"code":"(fn oscit [x & fs] (lazy-seq (cons x (apply oscit (conj (into [((first fs) x)] (rest fs)) (first fs))))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn [x & fs]\n  (reductions (fn [x f] (f x)) x (cycle fs)))","problem":144,"user":"50d93c53e4b0fd36a4b89223"},{"problem":144,"code":"(fn oscilrate [init & fns]\n  (map\n   first\n   (iterate\n    (fn [[value [f & fs]]]\n      (vector (f value) fs))\n    (vector init (cycle fns)))))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [x & fs]\n  (map first\n    (iterate (fn [[x [f & fs]]]\n               [(f x) fs])\n             [x (cycle fs)])))","problem":144,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn oscillate [v & fs]\n           (lazy-seq (cons v (apply oscillate ((first fs) v) (concat (rest fs) (list (first fs)))))))","problem":144,"user":"4e89f46c535d3e98b8023288"},{"problem":144,"code":"(fn fooLazy\n  ([n & argList] \n    (lazy-seq (cons n \n      (apply fooLazy ((first argList) n) (conj (vec (rest argList)) (first argList)))))))","user":"5b3251c1e4b025bcb146f317"},{"problem":144,"code":"(fn [n & fs]\n(let [f2 (fn [fs v] (nth fs (mod (get v 1) (count fs))))\nf (fn [v] (vector ((nth fs (mod (get v 1) (count fs))) (get v 0)) (inc (get v 1))))]\n(map first (iterate f [n 0]))))","user":"5e13a6b7e4b099d064963001"},{"code":"(fn j [init & more]\n  (let [f (first more)\n        m (vec (next more))]\n    (cons init\n          (lazy-seq (apply j (f init) (conj m f))))))","problem":144,"user":"51d19c24e4b0cfcf579466c3"},{"problem":144,"code":"(fn f [a & y]\n           (let [b ((first y) a)\n                 z (concat (rest y) [(first y)])]\n             (lazy-seq\n               (cons a\n                     (apply f (cons b z))))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn oscil-iterate [v & fns]\n  (let [fns (vec fns)\n        len (count fns)\n        oscil-from (fn oscil-from [i item]\n                     (cons item (lazy-seq (oscil-from\n                                             (mod (inc i) len)\n                                             ((fns i) item)))))]\n    (oscil-from 0 v)))","problem":144,"user":"526ee63de4b03e8d9a4a733f"},{"problem":144,"code":"(fn oscil-iter [val f & fs]\n  (cons val (lazy-seq (apply (partial oscil-iter (f val)) (concat fs (list f))))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":144,"code":"(fn oscilrate\n  [v & fs]\n  (->> (cycle fs)\n       (reductions #(%2 %) v)))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":144,"code":"(fn oscilrate [n & [f & fs]]\n  (lazy-cat [n] (apply (partial oscilrate (f n)) (conj (vec fs) f))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":144,"code":"(fn [val & fs] ((fn f[fs v]  (lazy-seq (cons v (f (rest fs) ((first fs) v))))) (cycle fs) val))","user":"56f15eade4b04a395b9a048e"},{"problem":144,"code":"(fn [start & func]\n  (reductions #(%2 %1) start (cycle func)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":144,"code":"(fn [x & fs]\n        (let [ol-fn (fn ol-fn [x fs]\n                      (cons x (lazy-seq (ol-fn ((first fs) x) (rest fs)))))]\n          (ol-fn x (cycle fs))))","user":"58949f8de4b00487982d525e"},{"problem":144,"code":"(fn oscilrate [init & fns]\n    {:pre [(every? ifn? fns)]\n     :post [(not (realized? (rest %)))]} ; Make sure we're lazy.\n    (reductions (fn [x f] (f x)) init (cycle fns)))","user":"4fc6305de4b0ee37620e180b"},{"problem":144,"code":"(fn [v & fs]\n  (map first\n       (iterate\n         (fn [[v fs]]\n           [((first fs) v) (rest fs)])\n         [v (cycle fs)])))","user":"559057c4e4b027778923766e"},{"problem":144,"code":"(fn oscilrate [v & funcs]\n  (lazy-seq \n   (let [nf (first funcs)\n         nv (nf v)\n         nlf (concat (rest funcs) [nf])\n         args (concat (vector nv) nlf)\n         ]\n     (cons v (apply oscilrate args))\n     )))","user":"53e76bb2e4b036ad0777e47d"},{"problem":144,"code":"(fn f [i & fns]\n    ((fn g [i fns fnlist]\n        (let [ nxt { true fnlist false fns }\n               ni ((-> (nxt (empty? fns)) (first)) i)\n               nfns (-> (nxt (empty? fns)) (rest))\n             ]\n            (cons ni (lazy-seq (g ni nfns fnlist)))))\n     i (cons identity fns) fns))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":144,"code":"(fn [init & fs]\n (cons init (let [f-count (count fs)]\n              (letfn [(_ [index v]\n                        (lazy-seq\n                          (let [f (nth (seq fs) (mod index f-count))\n                                vv (f v)]\n                            (cons vv (_ (inc index) vv)))))]\n                (_ 0 init)))))","user":"5794fd7be4b0e215f87e8476"},{"problem":144,"code":"(fn oscilrate [n & fns]\n           (letfn [(iter [n ind fs]\n                     (lazy-seq \n                      (cons n \n                            (if (>= ind (count fs))\n                              (iter ((nth fs 0) n) 1 fs)\n                              (iter ((nth fs ind) n) (inc ind) fs)))))]\n             (iter n 0 fns)))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":144,"code":"(fn oscilrate [x f & rest-fns]\n  (let [result (f x)]\n    (lazy-seq (cons x (apply oscilrate result (conj (vec rest-fns) f))))))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn lzr [v & f] (cons v (lazy-seq (apply lzr (cons ((first f) v) (reverse (cons (first f) (reverse (rest f)))))))))","problem":144,"user":"512f06c5e4b0762be4c7aad7"},{"code":"#((fn i [x [f & s]]\r\n    (lazy-seq (cons x\r\n                (i (f x) s))))\r\n   %1 (cycle %&))","problem":144,"user":"4ff304f4e4b0678c553fc343"},{"problem":144,"code":"(fn g [x f & fs] (cons x (lazy-seq (apply g (f x) (concat fs [f])))))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":144,"code":"(fn fnwheel [x & [f & rfns]]\n  (cons x (lazy-seq (apply (partial fnwheel (f x)) (conj (vec rfns) f)))))","user":"54246fcce4b01498b1a71aed"},{"problem":144,"code":"(fn q4q144\n  [v-o & fs-o]\n  ((fn q144 [v fs]\n     (lazy-seq\n      (cons v\n            (q144 ((first fs) v) (rest fs)))))\n   v-o (cycle fs-o)))","user":"52213426e4b0e6a83c8925c4"},{"problem":144,"code":"(fn oscilrate\n  [n & fs]\n  (let [i (reduce #(conj %1 (%2 (last %1))) [n] fs)]\n    (concat (drop-last i) (lazy-seq (apply oscilrate (last i) fs)))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn oscilrate [x & fns]\n  (let [[h & t] fns]\n       (cons x (lazy-seq (apply oscilrate (h x) (concat t [h]))))))","problem":144,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":144,"code":"(fn oscilrate [x & funcs]\n  (let [flist (flatten (repeat funcs))]\n    (lazy-seq (cons x (oscilrate ((first flist) x) (rest flist))))))","user":"56baab13e4b0f26550335948"},{"problem":144,"code":"(fn o [x & fs]\n  (let [next-x ((first fs) x)\n        next-fs (concat (rest fs) (list (first fs)))]\n     (lazy-seq (cons x (apply o next-x next-fs)))))","user":"55a74d46e4b09e57187da2a3"},{"code":"(letfn [(o [x i funcs]\n           (lazy-seq (cons x (o ((nth funcs i) x) (rem (inc i) (count funcs)) funcs))))]\n    (fn [x & funcs] (o x 0 funcs)))","problem":144,"user":"50783762e4b0fc74642bff67"},{"code":"(fn [n & fs]\n  (letfn [(rec [n [f & fs]]\n            (lazy-seq (cons n (rec (f n) fs))))]\n    (rec n (cycle fs))))","problem":144,"user":"4daec9dcedd6309eace4d15f"},{"problem":144,"code":"(fn [init & fs]\n  (lazy-seq\n   (cons init\n         ((fn inner [val\n                     [f & tail]]\n            (let [val-next (f val)]\n              (lazy-seq\n               (cons val-next\n                     (inner val-next\n                            tail)))))\n          init\n          (cycle fs)))))","user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn oscilrate [value & fns]\n  (lazy-seq\n    (let [next-value ((first fns) value)\n          next-fns   (take (count fns) (rest (cycle fns)))]\n      (cons value (apply oscilrate next-value next-fns)))))","problem":144,"user":"4e7263a1535d5021c1a8965f"},{"problem":144,"code":"(fn [v & fs]\n  ((fn oscilrate [v [f & r]]\n     (lazy-seq (cons v (oscilrate (f v) r))))\n   v (cycle fs)))","user":"537e745ae4b06839e8705ea6"},{"code":"(fn oscilrate [x & funcs]\n  (reductions #(%2 %1) x (cycle funcs)))","problem":144,"user":"52470d42e4b05ef8e38e6350"},{"problem":144,"code":"#(reductions (fn [v f] (f v)) %1 (cycle %&))","user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn [val & fs] ((fn g [v s] (let [r ((first s) v)] (lazy-seq (cons r (g r (next s)))))) val (cons identity (cycle fs))))","problem":144,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn [v & fns] \n  (reductions \n    (fn [p f] (f p)) \n    v \n    (cycle fns)))","problem":144,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn osc [v1 & funs]\n  (letfn [(oscaux [v rfuns allfuns]\n            (if (empty? rfuns)\n              (oscaux v allfuns allfuns)\n              (let [nv ((first rfuns) v)]\n                 (lazy-seq\n                   (cons nv\n                         (oscaux nv (rest rfuns) allfuns))))))]\n     (cons v1 (oscaux v1 funs funs))))","problem":144,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [x & funs] (reductions #(%2 %1) x (cycle funs)))","problem":144,"user":"4fc67081e4b0ee37620e1813"},{"problem":144,"code":"(fn osc#\n  ([x f & fns]\n   (if (fn? f)            ; only on the first invocation\n     (osc# x (cons f fns))\n     (osc# x f)))\n  ([x coll]\n   (let [f (first coll)\n         rot (fn [a-seq]\n               (conj (vec (drop 1 a-seq)) (first a-seq)))]\n     (lazy-seq\n       (cons x (osc# (f x) (rot coll)))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":144,"code":"(fn [v & fs]\n           (letfn [(osc [v [f & fs]]\n                     (lazy-cat [v] (osc (f v) fs)))]\n             (osc v (cycle fs))))","user":"51672d15e4b079759a74a5e7"},{"code":"(fn oscilrate [n & fs]\n  (lazy-seq\n    (cons n\n      (apply oscilrate \n        ((first fs) n) \n        (next (cycle fs))))))","problem":144,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":144,"code":"(fn [init & funcs]\n  (let \n    [\n     recursor\n     (fn recurs [firstElem remaining]\n       (cons firstElem (lazy-seq (recurs ((first remaining) firstElem) (rest remaining))))\n       )\n     ]\n    (recursor init (lazy-seq (cycle funcs)))\n    )\n  )","user":"58950f29e4b00487982d5270"},{"code":"(fn [x & xs]\n   (reductions #(%2 %) x (cycle xs)))","problem":144,"user":"4fda108ee4b05e33b9224f46"},{"code":"(fn [init & fns]\n  (map first\n    (iterate\n      (fn [[value [f & fns]]]\n        [(f value) fns])\n      [init (cycle fns)])))","problem":144,"user":"5196b573e4b04c0af7ff3c24"},{"code":"(fn o\n  ([n f & fs] (o n (cons f fs)))\n  ([n fs] (lazy-seq (cons n (o ((first fs) n) (take (count fs) (drop 1 (cycle fs))))))))","problem":144,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":144,"code":"(fn osc [n & fs]\n  (cons n\n        (lazy-seq (apply osc ((first fs) n) (concat (rest fs) (list (first fs)))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"problem":144,"code":"(fn [x & funs] \n\t((fn osc [x [f & more]] (lazy-seq(cons x (osc (f x) more)))) x (cycle funs))\n)","user":"580c8fcee4b0849f6811b721"},{"code":"(fn [x & xs]\r\n    (letfn [(c [x [f & fs]]\r\n              (lazy-seq (cons x \r\n                              (c (f x) fs))))]\r\n      (c x (cycle xs))))","problem":144,"user":"4f58d92fe4b0a7574ea71858"},{"problem":144,"code":"(fn f [v & fs]\n  (loop [res [] cv v [ff  & rf] fs ]\n    (if ff\n      (recur (conj res cv ) (ff cv) rf)\n      (lazy-seq (concat res  (apply f cv fs)  ) )\n      )\n    )\n  \n  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn oscilrate [x & fs] (lazy-seq\n                        (let [g  (first fs)\n                              gs (vec (rest fs))]\n                          (cons x (apply oscilrate (g x) (conj gs g))))))","problem":144,"user":"51307b84e4b08c712d3fae39"},{"problem":144,"code":"(fn oscil [iv & args]\n  (cons iv\n        (lazy-seq\n         (apply oscil\n                (cons ((first args) iv)\n                (concat (rest args) (list (first args))))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [n & fs]\n  (let [inf-fs (cycle fs)\n        f (fn [[x fs]]\n            [((first fs) x) (next fs)])]\n    (map first (iterate f [n inf-fs]))))","problem":144,"user":"50435689e4b034ff00315d21"},{"problem":144,"code":"(fn [v & fs]\n  ((fn f [r rfs]\n     (lazy-cat [r] (f ((first rfs) r) (rest rfs))))\n   v\n   (cycle fs)))","user":"54b2ec84e4b09f271ff37d33"},{"code":"(fn [v & fs]\n  (let [fs (vec fs)\n        n (count fs)]\n    (letfn [(f [v fs i]\n              (lazy-seq\n               (let [v ((fs i) v)]\n                 (cons v (f v fs (mod (inc i) n))))))]\n      (cons v (f v (vec fs) 0)))))","problem":144,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":144,"code":"(fn ocilrate [x & fs] (reductions (fn [x f] (f x)) x (cycle fs)))","user":"550e52dbe4b06e50f9beb165"},{"problem":144,"code":"#(reductions (fn [a f] (f a)) %1 (cycle %&))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn oscilrate\n  [init & args]\n  (cons\n   init\n   (lazy-seq (apply oscilrate\n                    ((first args) init)\n                    (conj \n                     (apply vector (rest args)) \n                     (first args))))))","problem":144,"user":"513d121fe4b0e544971636a2"},{"code":"(fn oscillate [initial & functions]\n  (map first (iterate (fn [[v funs]]\n             [((first funs) v) (rest funs)])\n           [initial (cycle functions)])))","problem":144,"user":"5201ada5e4b0b2e020a18f14"},{"problem":144,"code":"(fn [init & fs]\n    (letfn [(iter [x [f & rest-fs]]\n              (lazy-seq\n               (cons x (iter (f x) rest-fs))))]\n      (iter init (cycle fs))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn osc [i & fs]\n  (lazy-seq\n    (cons\n      i\n      (apply osc (cons ((first fs) i) (drop 1 (cycle fs)))))))","problem":144,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn g [val & fs]\n  (let [cycled (take (count fs) (rest (cycle fs)))]\n    (lazy-seq\n      (cons val (apply g ((first fs) val) cycled)))))","problem":144,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":144,"code":"(fn oscil [base & funcs] (lazy-seq\n   (cons base (apply oscil ((first funcs) base) \n      (concat (rest funcs) [(first funcs)])))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn o [x & fs ] (let [[f & n] (cycle fs)]\n               (lazy-cat [x] (apply o (f x) n))))","problem":144,"user":"4e6f578c535d5021c1a8961b"},{"problem":144,"code":"(fn [v & fs] (reductions (fn [acc f] (f acc)) v (cycle fs)))","user":"5ecc0831e4b016b56eae058c"},{"problem":144,"code":"(fn o [x & fs]\n  (let [[y & ys] (cycle fs)]\n    (lazy-seq\n     (cons x (apply o (y x) ys)))))","user":"4ee75ec2535d93acb0a66867"},{"problem":144,"code":"(fn [x & funcs]\n  (let [f funcs]\n    ((fn ha [i f]\n       (cons i (lazy-seq (ha ((first f) i) (concat (drop 1 f) (take 1 f))))))\n     x f)))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn [x & fs]\n  (letfn [(op [x fs]\n    (cons x (lazy-seq (op\n      ((first fs) x)\n      (concat (rest fs) [(first fs)])))))]\n    (op x fs)))","problem":144,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":144,"code":"(fn rec [init & fs]\n    (lazy-seq (cons init (apply rec ((first fs) init) (drop 1 (cycle fs))))))","user":"567f988be4b0feffd0d18ebe"},{"problem":144,"code":"(fn oscilrate [x & fns]\n  (letfn [(next-f [v i] ((nth fns (mod i (count fns))) v))\n          (fseq [v i]\n            (lazy-seq (cons v (fseq (next-f v i) (inc i)))))]\n    (fseq x 0)))","user":"51b920bfe4b0e871ca4958f9"},{"problem":144,"code":"(fn osc [a & p] (reductions #(%2 %1) a (cycle p)))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn g [x & [f & fs]]\n  (lazy-seq (cons x (apply g (concat [(f x)] fs [f])))))","problem":144,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn oscilrate\n  [init & fs]\n  (reductions\n    (fn [value f]\n      (f value))\n    init\n    (cycle fs)))","problem":144,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn [v & fs]\n    (reductions (fn [a f] (f a) ) v (cycle fs)))","problem":144,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [n & fs]\n  (reductions #(%2 %) n (cycle fs))\n  )","problem":144,"user":"4e6e10d8535d5021c1a895fd"},{"problem":144,"code":"(fn [x & funcs] \n (letfn [(go-fshift [y fv] \n  (let [f-go (peek fv)\n    fv-rotate (into (vector f-go) (pop fv))] \n  (lazy-seq (cons y (go-fshift (f-go y) fv-rotate))) \n ))] (go-fshift x (vec (reverse funcs)))))","user":"57f9011ee4b0d3187e900935"},{"problem":144,"code":"(fn [n & fns]\n  ((fn oscilrate [n fns]\n     (lazy-seq (cons n (oscilrate ((first fns) n) (rest fns)))))\n   n (cycle fns)))","user":"5cd639b4e4b0ccb061962940"},{"code":"(fn oscilrate [value & funcs]\n    (let [first-func (first funcs)\n          new-value (first-func value)\n          new-funcs (concat (rest funcs) (list first-func))\n          new-args (cons new-value new-funcs)]\n      (cons value (lazy-seq (apply oscilrate new-args)))))","problem":144,"user":"5165a235e4b079ad97ec44ac"},{"problem":144,"code":"(fn o [x f & fs] (lazy-seq (cons x (apply o (f x) (concat fs [f])))))","user":"53b2a7f8e4b047364c04449c"},{"problem":144,"code":"(fn[x & f](reductions #(%2 %) x (cycle f)))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn [x & fs]\n    (cons \n     x\n     ((fn osc [x fs i]\n        (cons\n         ((nth fs (mod i (count fs))) x)\n         (lazy-seq\n          (osc\n           ((nth fs (mod i (count fs))) x)\n           fs\n           (inc i)\n           )\n          )\n         )\n        )\n      x fs 0\n      )\n     )\n    )","problem":144,"user":"52586d24e4b0cb4875a45cb0"},{"problem":144,"code":"(fn [i & fs] (reductions #(%2 %1) i (cycle fs)))","user":"56b86e64e4b0f26550335924"},{"code":"(fn t [v f & fs]\n  (lazy-cat [v] (apply t (f v) `(~@fs ~f))))","problem":144,"user":"4e49badd535dc968683fc4c9"},{"problem":144,"code":"(fn\n  [init & funcs]\n  (reductions #(%2 %1) init (cycle funcs)))","user":"5da7176ae4b000c986472c13"},{"problem":144,"code":"(fn oscilrate [x f & fs]\n  (lazy-seq (cons x\n                  (apply oscilrate (f x)\n                         (concat fs\n                                 (list f))))))","user":"55f73078e4b06e875b46cea4"},{"problem":144,"code":"(fn f [n & fns] \n\t(lazy-seq (cons n (apply f ((first fns) n) (concat (drop 1 fns) (take 1 fns))))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn oscillrate [val & fns]\n  (let [cycled (cycle fns)]\n    (letfn [(oscillate [x xs]\n              (cons x (lazy-seq (oscillate ((first xs) x) (next xs)))))]\n      (oscillate val cycled)\n      )\n    )\n  )","problem":144,"user":"52319066e4b0e2e8de81d1e9"},{"problem":144,"code":"(fn\n  [init & fns]\n  (lazy-seq\n   (cons\n    init\n    ((fn app-first\n       [i [f & ls]]\n       (lazy-seq\n        (cons\n         (f i)\n         (app-first\n          (f i)\n          (reverse (cons f (reverse ls)))))))\n     init fns))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":144,"code":"(fn [v & f]\n\t((fn s [w x] (lazy-seq (cons w (s ((nth f (mod x (count f))) w) (inc x))))) v 0))","user":"57ccedaae4b0c746388ab88e"},{"code":"#(reductions (fn [n f] (f n)) % (cycle %&))","problem":144,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":144,"code":"(fn [x & fns]\n  (reductions (fn [res f] (f res)) x (cycle fns)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":144,"code":"(fn oscilrate [x f & fs]\n  (lazy-seq (cons x (apply oscilrate (f x) (concat fs [f])))))","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":144,"code":"(fn oscilrate [n & fns]                                                                                                         \n    (cons n                                                                                                                                             \n        (lazy-seq                                                                                                               \n            (apply oscilrate                                                                                                                            \n                ((first fns) n)                                                                                                 \n                (concat (rest fns) [(first fns)])))))","user":"558b50d5e4b027778923762b"},{"code":"(fn ocil [i & s]\n  (let [s (cycle s)]\n    ((fn oc [p s]\n      (cons p (lazy-seq (oc ((first s) p) (rest s))))) i s)))","problem":144,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn oscilrate [v & fns ]\n  (let [ cycledfns (cycle fns) ]\n    (letfn [ (stepHd [v & fns]\n                     (let [ hdfn (first fns) nextv (hdfn v) ]\n                       (lazy-seq (cons nextv (apply stepHd nextv (rest fns)))))) ]\n            (cons v (apply stepHd v cycledfns)))))","problem":144,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn [x & fs]\n  (letfn [(osc [x fs]\n            (lazy-seq\n             (let [new-x ((first fs) x)]\n               (cons new-x (osc new-x (rest fs))))))]\n    (cons x (osc x (cycle fs)))))","problem":144,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":144,"code":"(fn oscill [num & fs]\n  (let [[f & args] fs]\n    (cons num (lazy-seq (apply oscill (f num) (concat args (list f)))))))","user":"549c1713e4b0f3d1d8e70f82"},{"code":"(fn oscilrate\n  [init & fns]\n  (map first\n       (iterate (fn [[acc fns]]\n                  [((first fns) acc) (rest fns)])\n                [init (cycle fns)])))","problem":144,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn __ [n f & fns]\n  (lazy-seq (cons n (apply __ (f n) (concat fns [f])))))","problem":144,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn o [iv & fs]\n  ((fn foo [x gs]\n    (lazy-seq (cons x (foo ((first gs) x) (rest gs)))))\n    iv (cycle fs)))","problem":144,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":144,"code":"(fn oscilrate [x & args]\n  (let [res (reduce #(conj % (%2 (last %))) [x] args)]    \n    (concat res (drop 1 (lazy-seq (apply oscilrate (last res) args))))))","user":"538d70abe4b0b51d73faae6e"},{"code":"(fn oscilrate [v & funs]\n  (let [fs (cycle funs)\n        cyc (fn cyc [v fs] (cons v (lazy-seq (cyc ((first fs) v) (rest fs)))))]\n    (cyc v fs)))","problem":144,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn f [v & fns]\n  (lazy-seq\n   (let [ff (first fns)]\n     (cons v\n           (apply f (concat [(ff v)] (rest fns) [ff]))))))","problem":144,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":144,"code":"(fn [init-val & fs] (reductions #(%2 %1) init-val (cycle fs)))","user":"597768d0e4b01722bebd4cee"},{"code":"(fn [m & gs]\n  (letfn [(oscilrate [n fs]\n            (cons n\n                  (lazy-seq\n                   (oscilrate ((first fs) n)\n                              (concat (rest fs) (list (first fs)))))))]\n    (oscilrate m gs)))","problem":144,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":144,"code":"(fn [x & xs]\n  (letfn [(f [x & xs]\n            (let [y ((first xs) x)]\n              (cons x (lazy-seq (apply f y (next xs))))))]\n    (apply f x (cycle xs))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn osc [n & f]\n  (let [s (reductions #(%2 %1) n f)]\n    (concat (butlast s) (lazy-seq (apply osc (cons (last s) f))))))","problem":144,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [v & fs] \n  (map first \n    (iterate (fn [[x fs]] \n               [((first fs) x) \n                (concat (rest fs) \n                        [(first fs)])]) \n    [v fs])))","problem":144,"user":"4db1b3951254ad5b4805fa6f"},{"problem":144,"code":"(fn [x & args]\n  (reductions #(%2 %1) x (cycle args))\n  )","user":"5776558ee4b0979f89651633"},{"problem":144,"code":"(fn [v & fs]\n  (map first\n       (iterate (fn [[v [f & fs]]] [(f v) fs])\n                [v (cycle fs)])))","user":"5d272077e4b092dab7f59c64"},{"code":"(fn [n & fs]\r\n  (reductions #(%2 %) n (cycle fs)))","problem":144,"user":"509c03f3e4b085ae113522a8"},{"problem":144,"code":"(fn [n & fs]\n  (reductions (fn [x f] (f x)) n (cycle fs)))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [x & f]\n  (letfn [(osnx [x & f]\n    (lazy-seq\n      (let [c ((first f) x)] \n        (cons c (apply (partial osnx c) (concat (rest f) (list (first f))))))))]\n  (lazy-seq\n    (cons x (apply (partial osnx x) f)))))","problem":144,"user":"4ea7999e535d7eef308072ee"},{"problem":144,"code":"(fn [i & fcoll]  (reductions #(%2 %1) i (cycle fcoll)))","user":"54908cc1e4b0b312c081ff32"},{"problem":144,"code":"(fn oscilrate\n  [init & fns]\n  (letfn [(oscilrate* [v fn-seq]\n            (lazy-seq\n              (let [next-v ((first fn-seq) v)]\n                (cons v (oscilrate* next-v (rest fn-seq))))))]\n    (oscilrate* init (cycle fns))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":144,"code":"(fn [x & y] (reductions #(%2 %) x (cycle y)))","user":"51e1c176e4b06a68e693eafb"},{"code":"(fn [x & fs] (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [a & m]\n  (let [f (vec m) n (count f)]\n    ((fn g [x i] (lazy-seq (cons x (g ((f (mod i n)) x) (inc i))))) \n      a 0)))","problem":144,"user":"4f1d1d95535d64f603146488"},{"code":"(fn f [i & fs]\n  (letfn [(repeat [s] (concat s (lazy-seq (repeat s))))]\n    (reductions #(%2 %) i (repeat fs))))","problem":144,"user":"50901b2ee4b0ea685a20f774"},{"problem":144,"code":"(fn __ [x & fs]\n  (letfn [(f [x fs]\n             (cons x\n                   (lazy-seq\n                    (f ((first fs) x)\n                       (concat (rest fs)\n                               (list (first fs)))))))]\n    (f x fs)))","user":"54c271b9e4b045293a27f602"},{"problem":144,"code":"(fn [& a]\n    ((fn f [n l]\n       (cons n (lazy-seq (f ((first l) n)\n                            (conj (vec (rest l))\n                                  (first l)\n                                  )\n                            )\n                         )\n             )\n       )\n     (first a) (rest a)))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn o [v & f]\n  (reductions #(%2 %1) v (cycle f)))","problem":144,"user":"4facd2fae4b081705acca22f"},{"problem":144,"code":"(fn [i & fs]\n           (letfn [(o [v f]\n                     (lazy-seq (cons v (o ((first f) v) (rest f)))))]\n             (o i (cycle fs))))","user":"5f3f2281e4b004f08c61c561"},{"problem":144,"code":"(fn osf [v & afs]\n  (let [itfn (fn [[ v [ f' & fs]]] [(f' v) (if (empty? fs) afs fs)])]\n     (map first (iterate itfn [v afs]))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":144,"code":"(fn o [v f & fs]\n  (lazy-seq (cons v (apply o (f v) (concat fs (list f)))))\n)","user":"5d52bf29e4b0776584bd6f69"},{"code":"(fn o [x & f]\n  (lazy-seq\n   (cons x\n         (apply o ((first f) x)(concat (rest f)[(first f)])))))","problem":144,"user":"50a83315e4b054305ba5a830"},{"problem":144,"code":"(fn [x & fs] (lazy-seq (reductions #(%2 %1) x (cycle fs))))","user":"553e0b70e4b0a04f792994e8"},{"code":"#(reductions (fn [i f] (f i)) % (cycle %&))","problem":144,"user":"4ff67852e4b0678c553fc37e"},{"problem":144,"code":"(fn [v & fs]\n  (reductions\n    (fn [v f] (f v))\n    v\n    (cycle fs)))","user":"594880ade4b07ddc2dafadc2"},{"code":"(fn [i & fs] \n  (reductions (fn [acc f] (f acc)) i (cycle fs)))","problem":144,"user":"4e9660ec535dbda64a6f6b44"},{"problem":144,"code":"(fn [x & fs]\n  (letfn [(f [x a fs]\n            (let [fx ((first fs) x)]\n              (lazy-seq\n               (cons fx\n                     (f fx a (if (= 1 (count fs))\n                               a\n                               (rest fs)))))))]\n    (cons x (f x fs fs))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [ init & funcs]\n  (reductions #(%2 %) init (cycle funcs)))","problem":144,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":144,"code":"(fn [x & fs]\n  (reductions\n    #(%2 %)\n    x (cycle fs)))","user":"50ec409ce4b04edc33777045"},{"code":"(fn [a & b]\r\n    (map first (iterate (fn [[v fs]] [((first fs) v) (rest fs)])\r\n         [a (cycle b)])))","problem":144,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":144,"code":"(fn [start & funcs]\n   ((fn results [] \n\t(lazy-seq (cons start (map #(%1 %2) (cycle funcs) (results))))\n   )))","user":"57011eb3e4b08d47c97781d1"},{"problem":144,"code":"(fn oscilrate\n  [x & fs]\n  (letfn [(osc [n fs]\n            (lazy-seq (cons n\n                            (osc ((first fs) n)\n                                 (rest fs)))))]\n    (osc x (cycle fs))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":144,"code":"(fn [n & fs]\n\t(letfn [(osc [n [f & fs]]\n\t\t(cons n\n\t\t\t(lazy-seq\n\t\t\t\t(osc (f n) fs))))]\n\t\t(osc n (cycle fs))))","user":"536e5b68e4b0fc7073fd6e6d"},{"code":"(fn oiter [x & xs]\n  (lazy-seq (cons x (apply oiter \n                           (cons ((first xs) x) \n                                 (concat (rest xs) \n                                         (list (first xs))))))))","problem":144,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn osci [x & fs]\n  (letfn [(help [x fs]\n            (lazy-seq\n             (cons x\n                   (help ((first fs) x) (next fs)))))]\n    (help x (cycle fs))))","problem":144,"user":"4dd62278535d2dad7130b5c7"},{"problem":144,"code":"(fn oscilrate [n & fs]\n  (let [f (first fs) result (f n) next-fs (concat (rest fs) (list f))]\n    (cons n (lazy-seq (apply oscilrate result next-fs)))))","user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn oscilrate [init & fs]\n    (if (empty? fs)\n        [init]\n        (lazy-seq \n            (cons init \n                (apply\n                    (partial oscilrate ((first fs) init)) (concat (rest fs) (list (first fs))))))))","problem":144,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn osc [v & fs]\n  (let [[f r] (split-at 1 fs)\n        nv ((first f) v)]\n    (cons v (lazy-seq (apply osc (cons nv (concat r f)))))))","problem":144,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":144,"code":"(fn [start & fns]\n           (reductions #(%2 %1) start (cycle fns)))","user":"530b8580e4b02e82168697cc"},{"code":"(fn [v & fs] (reductions #(%2 %) v (cycle fs)))","problem":144,"user":"51e58e02e4b0efabf93c02d0"},{"code":"(letfn [(osc- [v fns]\n                (lazy-seq (cons v (osc- ((first fns) v) (rest fns)))))]\n        (fn [v & fns] (osc- v (cycle fns))))","problem":144,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn f [x & fs]\n  (cons x (lazy-seq (apply f (concat (list ((first fs) x)) (rest fs) (list (first fs)))))))","problem":144,"user":"4edd038c535d10e5ff6f5327"},{"problem":144,"code":"(fn o [x f & g]\n  (lazy-seq\n   (cons x (apply o (f x) (conj (vec g) f)))))","user":"58f5b58ae4b0438e51c2cedc"},{"code":"(fn osc [value & funs]\n  (let [value value\n         f (fn f [value funs]\n             (cons value (lazy-seq\n                          (f ((first funs) value) (drop 1 funs)))))]\n    (f value (cycle funs))))","problem":144,"user":"51b41150e4b0f094dd986fac"},{"code":"(fn [x & fs] (let [s (cycle fs)] ((fn f [r ff] (cons r (lazy-seq (f ((first ff) r) (rest ff))))) x s)))","problem":144,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn o ([x & fs]\n  (letfn [(r [c fnc] (let [a ((first fnc) (first c))] (lazy-seq (cons a (r (cons a c) (rest fnc))))))]\n    (cons x (r (list x) (cycle fs))))))","problem":144,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn o [in & fs] (reductions #(%2 %) in (cycle fs)))","problem":144,"user":"4f04b66b535dcb61093f6bdd"},{"problem":144,"code":"(fn [v & c] \n  (reductions #(%2 %1) v (cycle c))\n  )","user":"55e1d34ae4b050e68259b421"},{"code":"(fn [init & fs]\n  (letfn [(apply-stream [v [f & fs]]\n                        (cons v\n                              (lazy-seq (apply-stream (f v) fs))))]\n    (apply-stream init (cycle fs))))","problem":144,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"#(reductions (fn[r f] (f r)) % (cycle %&))","problem":144,"user":"5141fafbe4b0b50abeb46b28"},{"problem":144,"code":"(fn  [v & fns]\n  (let [fnlist (cycle fns)]\n    (map second\n         (iterate (fn [[id v]]\n                    [(inc id) ((nth fnlist id) v)]) [0 v]))))","user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn [v & fs]\n  (letfn [(sequ [i f_]\n    (lazy-seq\n      (cons i\n        (sequ ((first f_) i) (rest f_)))))]\n    (sequ v (cycle fs))))","problem":144,"user":"4f050dec535dcb61093f6bef"},{"problem":144,"code":"(fn oscilrate [v & f]\n  (let [c (cycle f)]\n    (letfn [(rec [x y]\n              (lazy-seq\n               (cons x (rec ((first y) x) (rest y)))))]\n            (rec v c))))","user":"5f86a98be4b0649ffcda4caa"},{"code":"(fn [val & fns]\n  (letfn [(ofn [v sq] (cons v (lazy-seq (ofn ((first sq) v) (rest sq)))))]\n    (ofn val (cycle fns))))","problem":144,"user":"4e773be8535d324fb2983d6e"},{"problem":144,"code":"(fn a [x & fs] \n  (reductions #(%2 %1) x (cycle fs)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":144,"code":"(fn [init & functions]\n\t\t(let [sol (fn sol [v [f & fs]]\n\t\t\t\t\t(cons v (lazy-seq (sol (f v) (if (empty? fs) functions fs) ))))]\n\t\t\t\t\t(sol init functions)))","user":"5224a46ce4b01819a2de42e5"},{"code":"(fn [n & fs]\n    (letfn [(f\n              [n fs]\n              (lazy-seq\n                (let [r ((first fs) n)]\n                  (cons r (f r (conj (vec (rest fs)) (first fs)))))))]\n           (cons n (f n fs))))","problem":144,"user":"4f969a66e4b0dcca54ed6cde"},{"code":"(fn a1 [v & [f & fs]]\n  (lazy-cat [v] (apply a1 (f v) (concat fs [f]))))","problem":144,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn [init & functions]\n         (let [func-cycle (cycle functions)]\n           (letfn [(it [funcs v]\n                     (cons v (lazy-seq (it (rest funcs) ((first funcs) v)))))]\n             (it func-cycle init))))","problem":144,"user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [n & args]\n  (letfn [(f [n fn]\n            (let [g (first fn)\n                  m (g n)]\n              (lazy-seq (concat [m] (f m (rest fn))))))]\n    (cons n (f n (cycle args)))))","problem":144,"user":"5097b556e4b00ad8bab4e970"},{"problem":144,"code":"(fn os[x & col] \n  (let [\n        r (fn [[x fseq]] [((first fseq) x) (rest fseq)]) \n        ]\n  \t(map first (iterate r [x (cycle col)] )\n   \n                 \n                )))","user":"54af6fb0e4b09f271ff37d08"},{"problem":144,"code":"(fn oscilrate [v & [f & fs]]                   \n  (lazy-seq (cons v \n                  (apply oscilrate \n                         (f v) \n                         (into (vec fs) [f]))))) ;; rotate fs","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn [fv & fnlist]\n  ((fn osi [val i]\n    (lazy-seq\n       (cons val (osi ((nth fnlist i) val) (mod (inc i) (count fnlist)) )))\n    ) fv 0))","problem":144,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":144,"code":"(fn [value & functions]\n  ((fn funny [value functions]\n     (lazy-seq (cons value (funny ((first functions) value) (rest functions))))\n    ) value (cycle functions)))","user":"572b73d0e4b0cd1946bd0f3a"},{"problem":144,"code":"(fn [x & coll]\n(letfn [(eng [a coll1 coll2] (lazy-seq \n  (if-let [f (first coll2)]\n    (let [fa (f a)] (cons fa (eng fa (conj coll1 f) (rest coll2))))\n    (eng a [] (seq coll1))\n    ))) ] \n(cons x (eng x [] coll))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn oscilrate [i & more]\n  (reductions #(%2 %1) i (cycle more)))","problem":144,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":144,"code":"(fn [v & fns] (reductions (fn [memo f] (f memo)) v (cycle fns)))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn oscilrate\n  [x & fns]\n  (lazy-seq (cons x (apply oscilrate (cons ((first fns) x)\n                                           (rest (cycle fns)))))))","problem":144,"user":"4db8d37d535d1e037afb219c"},{"problem":144,"code":"(fn f [x & args]\n    (cons x\n     (lazy-seq (apply f (cons ((first args) x) (concat (rest args) [(first args)])))))\n    )","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [x & fs]\n  (map first (iterate (fn [[x fs]]\n                        [((first fs) x)\n                         (rest fs)])\n                      [x (cycle fs)])))","problem":144,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":144,"code":"(fn oscilrate [e & fs]\n  (lazy-seq\n    (let [fe ((first fs) e)]\n      (cons e (apply oscilrate fe (rest (cycle fs)))))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn oscilrate [n & ops] \n  (letfn [(f [n ops]\n              (cons n (lazy-seq (f ((first ops) n) (rest ops)))))]\n    (f n (cycle ops))))","problem":144,"user":"514721c6e4b0d520409ed392"},{"problem":144,"code":"(fn oscilrate\n  [d & fs]\n  (reductions #(%2 %1) d (cycle fs)))","user":"565654dae4b0f9d632dd849f"},{"problem":144,"code":"(fn [initVal & fns]\n     (cons initVal ((fn process [currentVal currentFuncList]\n           (let [currentFunc (if (empty? currentFuncList) (first fns) (first currentFuncList))\n                 remainingFuncList (if (empty? currentFuncList) (rest fns) (rest currentFuncList))\n                 newValue (currentFunc currentVal)]\n           (lazy-seq (cons newValue (process newValue remainingFuncList)))))\n    \t\tinitVal fns)))","user":"571172ece4b09c608db70446"},{"code":"(fn [x & a]\n  (reductions #(%2 %) x (cycle a)))","problem":144,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":144,"code":"(fn [iv & fs]\n  (letfn [(gen [[f & fs] acc]\n            (cons acc (lazy-seq (gen fs (f acc)))))]\n    (gen (cycle fs) iv)))","user":"5eb1c786e4b00a66d4a95201"},{"problem":144,"code":"(fn osc [init & fs]\n           (lazy-seq\n             (let [new-init ((first fs) init)]\n               (cons init (apply osc new-init (conj (vec (rest fs)) (first fs)))))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn osc [x & fs] (cons x (lazy-seq \n                     (apply osc \n                            ((first fs) x) \n                            (concat (rest fs) [(first fs)])))))","problem":144,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn oscillate [v & [f & fns]]\n  (lazy-seq (cons v (apply oscillate (f v) (concat fns [f])))))","problem":144,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn f [val & fs]\n  (lazy-seq\n    (cons val \n      (apply f \n        ((first fs) val) \n        (conj (apply vector (rest fs)) (first fs))))))","problem":144,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":144,"code":"(fn g [x f & fs]\n  (lazy-seq (cons x (apply g (f x) (concat fs [f])))))","user":"5012da69e4b0c8732600222d"},{"problem":144,"code":"(fn oscilrate [init func1 & funcs]\n  (lazy-seq\n   (cons init (apply oscilrate (func1 init) (concat funcs [func1])))))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn [x & fs]\r\n    (map first (iterate (fn [[a [f & r]]]\r\n                          [(f a) r]) [x (cycle fs)])))","problem":144,"user":"4f410b63e4b0e243712b1fc5"},{"problem":144,"code":"(fn r [v & fns]\n  (letfn [(rotate [s]\n                  (concat (rest s) [(first s)]))]\n    (cons v (lazy-seq (apply r ((first fns) v) (rotate fns))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":144,"code":"(fn [x & fs]\n            (reductions #(%2 %1)\n              x (cycle fs)))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn\n  [init & fs]\n  (let [n-fs (count fs)\n        rec (fn rec\n              [prev f-idx]\n              (let [curr ((nth fs f-idx) prev)]\n                (cons curr\n                      (lazy-seq\n                       (rec curr (mod (inc f-idx) n-fs))))\n                ))\n        ]\n    (cons init (rec init 0))))","problem":144,"user":"4db53f87535d87e67b28fe08"},{"problem":144,"code":"(fn my-oscilrate2 [initial & fns] \n  (reductions #(%2 %1) initial (cycle fns)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":144,"code":"(fn [x & fs] (apply interleave (for [n (range (count fs))] (iterate (apply comp (reverse (concat (drop n fs) (take n fs)))) ((apply comp (reverse (take n fs))) x)))))","user":"584dadebe4b0b7285a6f4e44"},{"problem":144,"code":"(fn [x & fns]\n  (let [fns (cycle fns)]\n    (reductions (fn [t v] (v t)) x fns)))","user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn ite [a & body]\n  ((fn f [n aa] \n     (cons n\n           (lazy-seq\n             (f ((nth body aa) n)\n                (rem (inc aa) (count body)))))\n     ) a 0))","problem":144,"user":"52196842e4b0890f2f822bfa"},{"problem":144,"code":"(fn oscilrate [startval & funsequ]\n  ((fn step [curval curfuncpos]\n     (if (= -1 curfuncpos)\n      (lazy-seq (cons startval (step startval 0)))\n      (let [nextval ((nth funsequ curfuncpos) curval)\n          nextfuncpos (if (= (count funsequ) (inc curfuncpos)) 0 (inc curfuncpos))]\n        (lazy-seq (cons nextval (step nextval nextfuncpos))))))\n    startval -1))","user":"5df0c6ffe4b093ff717275c2"},{"problem":144,"code":"(fn [x & fs] (->> (apply concat (repeat fs))\n                  (reductions #(%2 %1) x)))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn [v & fs] (reductions #(%2 %1) v (cycle fs) ))","problem":144,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn i [v f & fs]\n  (cons v\n    (lazy-seq\n      (apply i (f v) (conj (vec fs) f)))))","problem":144,"user":"4fb2101ce4b081705acca284"},{"problem":144,"code":"(fn osc [n0 & args]\n  (let [fns (into [] args) fncount (count fns)] \n     (map first (iterate #(let [[n index] %]\n                           [((fns (rem index fncount)) n) (inc index)])\n                         [n0 0]))))","user":"579d9601e4b05b1deef9ae18"},{"problem":144,"code":"(fn oscllrate [init & fns]\n  (let [fns (cycle fns)]  \n    (lazy-seq \n     (let [next-ele ((first fns) init)]\n       (cons init (apply oscllrate next-ele (rest fns)))))))","user":"53b7aa6ce4b047364c0444d1"},{"code":"(fn [a & b] (reductions #(%2 %) a (cycle b)))","problem":144,"user":"52c6a0abe4b0c2d177d62111"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (letfn [(run [v [f & fs]]\n            (lazy-seq\n              (let [v' (f v)]\n                (cons v' (run v' fs)))))]\n    (lazy-seq (cons v (run v (cycle fs))))))","user":"5f300f28e4b033932238a682"},{"problem":144,"code":"(fn [v & f]\n (reductions #(%2 %) v (cycle f)))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn __ [n & fns]\n  (lazy-seq\n  (cons n\n    (apply __ ((first fns) n)\n              (flatten (list (rest fns) (first fns)))))))","problem":144,"user":"4fa719c0e4b081705acca1bf"},{"problem":144,"code":"(fn oscilrate [init & funs]\n  ; (println \"currval=\" init \" funs=\" funs \" first fun=\" (first funs))\n  (cons init\n    (lazy-seq \n      (apply oscilrate \n             ((first funs) init)\n             (concat (rest funs) [(first funs)])\n))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":144,"code":"(fn [i & ff]\n  (reductions #(%2 %) i (cycle ff)))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":144,"code":"(fn [v & fs]\n  (reductions (fn [x f]\n                (f x))\n              v\n              (cycle fs)))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":144,"code":"(fn g [v & funcs]\n\n    \n\n    (let [newv ((first funcs) v)]\n\n     (cons v\n\n      (lazy-seq (apply g (cons newv (drop 1 (cycle funcs))))))))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn [x & fs]  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"52479487e4b05ef8e38e6373"},{"problem":144,"code":"#(letfn [(oscilirate [x [f & fs]]\r\n           (lazy-seq (cons x (oscilirate (f x) fs))))]\r\n   (oscilirate % (cycle %&)))","user":"55d0e76ae4b0e31453f64a40"},{"problem":144,"code":"(fn [x & fs]\n    (letfn [(cycle-func [x [f & fs]]\n              (lazy-seq\n               (cons x (cycle-func (f x) (concat fs [f])))))]\n      (cycle-func x fs)))","user":"560e9a2de4b05f002753df52"},{"problem":144,"code":"(fn oscilrate [x & fcts]\n  (let [aux (fn rec [x [f & fcts]]\n              (cons x (lazy-seq (rec (f x) fcts))))]\n    (aux x (cycle fcts))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":144,"code":"(fn [first-item & ops]\n  (let [cycle-ops (cycle ops)]\n    ((fn osc [last-item ops]\n       (lazy-seq (cons\n                  last-item\n                  (osc ((first ops) last-item)\n                       (concat (rest ops) (first ops))))))\n     first-item cycle-ops)))","user":"567e418fe4b0feffd0d18eb1"},{"problem":144,"code":"(fn [a & fs]\n    (reductions #(%2 %1) a (cycle fs)))","user":"561814bae4b06b1bb2182a1a"},{"code":"#(let [n (fn t [v [f & r]] (cons v (lazy-seq (t (f v) r))))]\n   (n %1 (cycle %&)))","problem":144,"user":"4dbdab4e535d020aff1edf49"},{"code":"(fn [i & f]\n  (reductions #(%2 %) i (cycle f)))","problem":144,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":144,"code":"(fn lazy-rec [n & f-coll]\n  (let [lazy-rec-int (fn lazy-rec-int [n  f-lazy]\n        (lazy-seq (cons n (lazy-rec-int (apply (first f-lazy) [n] ) (rest f-lazy)))))]\n    (lazy-rec-int n (cycle f-coll))))","user":"56f4cedce4b046a417f92063"},{"problem":144,"code":"(fn [v & funcs]\n  (let [funcsv (vec funcs)\n        func-count (count funcsv)]\n    (map first\n         (iterate\n          (fn [[v i]] [((funcsv i) v) (rem (inc i) func-count)])\n          [v 0]))))","user":"5ec6de19e4b08d0ec38692da"},{"problem":144,"code":"(fn [n & fs]\n  (reductions (fn [n f] (f n)) n (cycle fs)))","user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn oscilrate [x & funcs]\r\n    (letfn [(remap [x i]\r\n              (lazy-seq (cons x (remap ((nth funcs i) x) (rem (inc i) (count funcs))))))]\r\n      (remap x 0)))","problem":144,"user":"4f039524535dcb61093f6b2c"},{"problem":144,"code":"(fn [v & fs]\n    (let [fs (cycle fs)\n          pairs (iterate (fn [[v fs]] [((first fs) v) (rest fs)]) [v fs])]\n      (map first pairs)))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn [v & fs]\n  (letfn\n      [(osc [x fc]\n            (cons x (lazy-seq (osc ((first fc) x) (rest fc)))))]\n    (osc v (cycle fs))))","problem":144,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":144,"code":"(fn _f [v f1 & ff]\n          (cons v (lazy-seq (apply _f (concat [(f1 v)] ff [f1])))))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":144,"code":"(fn osc [init & fns]\n  (let [prev-val (atom nil)]\n    (map-indexed\n      (fn [idx f]\n        (if (zero? idx)\n          (reset! prev-val (f init))\n          (swap! prev-val f)))\n      (conj (cycle fns) identity))))","user":"52b3959ce4b0c58976d9ad0d"},{"code":"(fn oscilrate\n  [i & fs]\n  (letfn [(helper [fs acc]\n                  (let [val ((first fs) acc)]\n                    (println val)\n                    (cons val (lazy-seq (helper (rest fs) val)))))]\n    (cons i (helper (cycle fs) i))))","problem":144,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":144,"code":"(fn [n & fs]\n  (map first (iterate (fn [[n [f & fs]]] [(f n) fs]) [n (cycle fs)])))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":144,"code":"(fn [init & fs] (reductions (fn [res f] (f res)) init (cycle fs)))","user":"4f3e5e87e4b0e243712b1f83"},{"code":"(fn osc [x & args] \n  (cons x \n        (lazy-seq \n           (apply osc \n                  (cons ((first args) x) \n                  (concat (rest args) \n                  (take 1 args)))))))\n; reductions!","problem":144,"user":"514cfa27e4b019235f6c057d"},{"problem":144,"code":"(fn oscilirate [i & fs]\n  (lazy-seq (cons i (apply oscilirate (cons ((first fs) i) (take (count fs) (rest (cycle fs))))))))","user":"4e9ff8d0535d7eef3080729c"},{"problem":144,"code":"(fn [val & funcs]\n    (let [inf-funcs (cycle funcs)\n          lazy-vals (fn _lv [tar funcs]\n                      (let [f (first funcs)\n                            v (f tar)]\n                        (lazy-seq (cons tar (_lv v (rest funcs))))))]\n      (lazy-vals val inf-funcs)\n      ))","user":"55a372f1e4b0acc240e31537"},{"problem":144,"code":"(fn oscilrate\n  [v & args]\n  (reductions #(%2 %1) v (cycle args)))","user":"558bdcefe4b0277789237633"},{"code":"(fn [x & fs]\n  (reductions (fn [a b] (b a)) x (cycle fs))\n  )","problem":144,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":144,"code":"(fn oscil [x & fns]\n  ; not great in terms of performance?\n  (let [fns (flatten (repeat fns))]\n    (cons x\n          (lazy-seq (oscil ((first fns) x)\n                           (rest fns))))))","user":"5ab16992e4b073f1774425c4"},{"problem":144,"code":"(fn o[a b & c](lazy-seq(cons a (apply o (b a) (conj (vec c) b)))))","user":"53ed2fafe4b0d648e757f4c1"},{"problem":144,"code":"(fn [i & fns]\n    (letfn [(o [v fn-cycle]\n              (lazy-seq \n               (let [next-val ((first fn-cycle) v)]\n                 (cons next-val\n                       (o next-val (next fn-cycle))))))]\n      (lazy-seq (cons i (o i (cycle fns))))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":144,"code":"(fn os [s & fns] ;; update args as needed\n     (let [c   (first fns)\n           n   (c s)\n           r   (rest fns)\n           nf  (concat r [c])]\n      (cons s (lazy-seq (apply os n nf)))))","user":"544e8369e4b0e39780006987"},{"problem":144,"code":"(fn [a & fs]\n  (reductions\n    #(%2 %1)\n    a\n    (cycle fs)))","user":"557c6ca6e4b05c286339e0c4"},{"problem":144,"code":"(fn [v & f] (reductions (fn [p f] (f p)) v (cycle f)))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (lazy-seq (cons x (apply oscilrate ((first fs) x) (drop 1 (cycle fs))))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":144,"code":"(fn oscilrate\n  [v & funcs]\n  (lazy-seq\n    (cons v\n          (apply oscilrate\n                 ((first funcs) v)\n                 (#(concat (rest %) [(first %)]) funcs))))\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":144,"code":"(fn rk [v & fs]\n  (cons v\n        (lazy-seq\n         (apply rk\n                (cons ((first fs) v)\n                      (concat (rest fs) (take 1 fs)))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [n & fs]\n  (reductions #(%2 %1) n (cycle fs)))","problem":144,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn [i & fs]\n  ((fn os [i cf fs]\n    (let [f (first cf)\n          rf (rest cf)]\n      (cons i (lazy-seq (os (f i) (if (seq rf) rf fs) fs))))) i fs fs))","problem":144,"user":"52d7f7efe4b09f7907dd1380"},{"code":"(fn [x & f] (reductions #(%2 %) x (cycle f)))","problem":144,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":144,"code":"(fn [n & fns]\n  (let [a (fn a [curr-n curr-fns]\n            (cons curr-n (lazy-seq (a ((first curr-fns) curr-n) (drop 1 (cycle curr-fns))))))]\n        (a n fns)))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn oscilrate [v & fs]\n  (let [rotfs (concat (rest fs) [(first fs)])\n        newv ((first fs) v)]\n    (lazy-seq (cons v (apply oscilrate (concat [newv] rotfs))))))","problem":144,"user":"51d96ad0e4b02ceefd94774f"},{"problem":144,"code":"(fn [v & fns]\n  (letfn [(oscil [v fns old]\n                 (if (empty? fns) (oscil v old old)\n                 (lazy-seq (cons ((first fns) v)\n                                 (oscil ((first fns) v) (rest fns) old)))))]\n    (lazy-seq (cons v (oscil v fns fns)))))","user":"60264d89e4b0d5df2af2222d"},{"problem":144,"code":"(fn ex144\n  [num & functions]\n  (cons num\n        (lazy-seq (apply ex144\n                         ((first functions) num)\n                         (conj (vec (rest functions)) (first functions))))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn oscilrate- [i & fns]\n  ^{:doc \"144. Write an oscillating iterate: a function that takes an                                                                                                                                              \n initial value and a variable number of functions.\"}\n  (lazy-seq\n   (when-let [[x & xs] fns]\n     (cons i (apply oscilrate- (x i) (conj (vec xs) x))))))","problem":144,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [val & fns]\n  (map first (iterate (fn [[v [f & fs]]]\n                        [(f v) (concat fs [f])])\n                      [val fns])))","problem":144,"user":"4f8c4ee8e4b02e764a0a5194"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (letfn\n    [(inner [x fs]\n            (let [f (first fs)\n                  fx (f x)\n                  fs* (rest fs)]\n              (lazy-seq (cons fx (inner fx fs*)))))]\n    (lazy-seq (cons x (inner x (cycle fs))))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":144,"code":"(fn [init & fs] (reductions (fn [a f] (f a)) init (cycle fs)))","user":"5353afa0e4b084c2834f4b03"},{"problem":144,"code":"(fn [& args]\n  (loop [num1 (first args), funcs (rest args), ans [(first args)], c 0]\n\t(if (= c 12) ;cheat.\n      ans\n    (if (empty? funcs)\n      (recur num1 (rest args) ans c)\n      (recur ((first funcs) num1) (rest funcs) (conj ans ((first funcs) num1 )) (inc c))))))","user":"59369515e4b02506e01a297e"},{"problem":144,"code":"(fn oscilrate\n  [v & fns]\n  (let [fnseq (flatten (repeat [fns]))]\n    (cons v (map-indexed (fn [i v]\n                           ((apply comp (reverse (take (inc i) fnseq))) v))\n                         (repeat v)))))","user":"5e218bb7e4b05b4b01516123"},{"problem":144,"code":"(fn [x & f]\n  ((fn thing [x n f]\n    (cons x (lazy-seq (thing ((nth f n) x) (mod (inc n) (count f)) f)))\n    ) x 0 f))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn osc [val & funs]\n  ((fn tmp [val l-funs]\n     (let [rhs ((first l-funs) val)]\n       (lazy-seq (cons rhs (tmp rhs (rest l-funs))))))\n   val (cons identity (cycle funs))))","problem":144,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn oi [i & fns]\n  (lazy-seq\n    (cons i (apply oi \n              ((first fns) i)\n              (concat (rest fns) [(first fns)])))))","problem":144,"user":"4dac61e18cc9d6edb9beb0b3"},{"code":"(fn [v & funcs]\n  ((fn osc [x  [f & fs]]\n    (lazy-seq ( cons x\n                     (osc (f x) \n                           fs )))) v (cycle funcs)))","problem":144,"user":"53691dc7e4b0243289761e97"},{"code":"(fn [x & fs] \n  ((fn rec [x fs]\n     (cons x\n           (lazy-seq (rec ((first fs) x) (rest fs)))))\n   x (cycle fs)))","problem":144,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn [x & fs]\r\n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"4dc1ee85535d020aff1edf91"},{"problem":144,"code":"(fn [x & fs]\n  (when fs\n    (letfn [(f [x fs]\n              (lazy-seq\n                (let [value ((first fs) x)]\n                  (cons value (f value (rest fs))))))]\n      (cons x (f x (cycle fs))))))","user":"53b530c6e4b047364c0444bc"},{"code":"(fn oscilrate\r\n  [start & fs]\r\n  (reductions\r\n   #(%2 %1)\r\n   start\r\n   (apply concat (repeat fs))))","problem":144,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn __ [n & f]\n  (let [fs (seq f)]\n    ((fn calc [i x]\n       (cons x (lazy-seq (calc (mod (inc i) (count fs)) ((nth fs i) x))))\n       )\n      0 n)))","problem":144,"user":"52828298e4b0757a1b17145b"},{"problem":144,"code":"(fn oscilrate\n  ([x & funcs] \n   (letfn [(lazy-oscilrate \n              [x [head-fn & tail-fns]]\n              (lazy-seq\n                 (cons x (lazy-oscilrate (head-fn x) (conj (vec tail-fns) head-fn)))))]\n     (lazy-oscilrate x funcs))))","user":"5553b729e4b0deb715856e05"},{"code":"#(reductions (fn [x a] (a x)) % (cycle %&))","problem":144,"user":"4f08b15b535dcb61093f6c40"},{"problem":144,"code":"(fn\n  [x & fns]\n  (reductions #(%2 %1) x (cycle fns))\n)","user":"5676af21e4b05957ce8c6158"},{"problem":144,"code":"(fn [x & fns]\n    (reductions #(%2 %) x (cycle fns)))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn f [v F & fs]\r\n  (let [V (F v)]\r\n    (cons v (lazy-seq (apply f V (conj (vec fs) F))))))","problem":144,"user":"50464831e4b011c5dfee771f"},{"problem":144,"code":"(fn oscilrate [v & fns]\n  (lazy-seq (cons v (apply oscilrate ((first fns) v) (concat (rest fns) (take 1 fns))))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [x & fs]            \n  ((fn f [x n] \n    (lazy-seq  \n      (cons x (f ((nth (cycle fs) n) x) (inc n)) ))) \n    x 0))","problem":144,"user":"4e513758535dc968683fc4f3"},{"problem":144,"code":"(fn [init & fs]\n  (let [f-seq ((fn generate-f-seq [i]\n                (lazy-seq (cons (nth fs (mod i (count fs))) (generate-f-seq (inc i))))) 0)]\n    (reductions #(%2 %) init f-seq)))","user":"56288ccae4b00e49c7cb47ea"},{"code":"(fn\r\n  ([v & fcol]\r\n    (map :v\r\n         (iterate  (fn[{f :f  val :v}] {:f (rest f) :v ((first f) val)} ) \r\n              {:f (cycle fcol) :v v})\r\n    ) ))","problem":144,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [v & fs]\n  (map first\n    (iterate\n      (fn [[v [f & fs]]]\n        [(f v) fs])\n      [v (cycle fs)])))","problem":144,"user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn oscilirate [x & fs]\n  (let [f (first fs)]\n    (lazy-seq\n     (cons x (apply oscilirate (f x) (conj (vec (rest fs)) f))))))","problem":144,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn oscilrate ([v & fs] (cons v ((fn in-oscilrate [n v] (let [v (((vec fs) (rem n (count fs))) v)] (cons v (lazy-seq (in-oscilrate (inc n) v ))))) 0 v))))","problem":144,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [v & fns]\n  (letfn [(f [v' fs]\n             (let [res (apply (first fs) [v'])]\n               (cons res (lazy-seq (f res (rest fs))))))]\n    (cons v (f v (cycle fns)))))","problem":144,"user":"51195e77e4b055cfb310d499"},{"problem":144,"code":"(fn oscilrate [value & functions]\n  (let [neverend (cycle functions)]\n    ((fn foo [x ff]\n       (cons x (lazy-seq (foo ((first ff) x) (rest ff))))) value neverend)))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn oscilrate [v & fs]\n  (cons v\n        (lazy-seq\n         (apply oscilrate\n                (cons ((first fs) v)\n                      (rest (cycle fs)))))))","problem":144,"user":"52173464e4b082aa80a88c75"},{"problem":144,"code":"(fn osc [x & functions]\n  (cons x (lazy-seq (apply osc (concat (list ((first functions) x)) (rest functions) (list (first functions)))))))","user":"56979bb7e4b0e0b3d3318cac"},{"problem":144,"code":"(fn oscilrate [input & fns]\n  (letfn [(oscilrate- [input orig-fns fns]\n            (if (empty? fns)\n              (oscilrate- input orig-fns orig-fns)\n              (cons input (lazy-seq (oscilrate- ((first fns) input) orig-fns (rest fns))))))]\n    (oscilrate- input fns fns)))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":144,"code":"(fn [init & funs]\n  (reductions #(%2 %1) init (cycle funs)))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [x & fs] (reductions #(%2 %1) x (cycle fs)))","problem":144,"user":"4e8612f8535db62dc21a62f2"},{"code":"(fn [v & fns] \n  (reductions #(%2 %) v (cycle fns)))","problem":144,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn oscilrate [initial & fns]\n  (let [functions (cycle fns)\n        apply-functions (fn [[fn-index val]] [(inc fn-index) ((nth functions fn-index) val)])]\n    (map second (iterate apply-functions [0 initial]))))","problem":144,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn osc [v f f1 & fs] (lazy-seq (cons v (apply (partial osc (f v) f1) (concat fs [f])))))","problem":144,"user":"4e7f4147535db966e863cc3d"},{"problem":144,"code":"(fn oscilirate [val & funs]\n  (lazy-seq\n    (let [result (loop [val val [f & funs] funs acc []]\n                   (if f\n                     (recur (f val) funs (conj acc val))\n                     acc))]\n      (concat result (apply oscilirate ((last funs) (last result)) funs)))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn osci [v & fs]\n  (let [fs (cycle fs)\n        osc (fn osc [v fs]\n              (cons v (lazy-seq (osc ((first fs) v) (rest fs)))))]\n    (osc v fs)))","problem":144,"user":"50645e12e4b007509339a58a"},{"problem":144,"code":"(fn [init & fns]\n    (let [cycle-fns  (cons identity (cycle fns))\n          gen-fn     (fn gen-list [i fns]\n                       (let [head-element ((first fns) i)]\n                         (lazy-seq (cons head-element (gen-list head-element (rest fns))))))]\n      (gen-fn init cycle-fns)))","user":"57aa290de4b0b8559636fc65"},{"problem":144,"code":"(fn [n & fs] (reductions (fn [a e] (e a)) n (cycle fs)))","user":"51e28063e4b08e53a149f0f2"},{"code":"(fn oscilarate [x & fs] (reductions #(%2 %1) x (cycle fs)))","problem":144,"user":"51cbdee1e4b08d8387cbede1"},{"problem":144,"code":"(fn [init & funcs]\n  ((fn oscil [v index]\n     (lazy-seq        \n                   (cons v (oscil ((nth funcs index) v) (mod (inc index) (count funcs))   ) ))  )\n    init 0))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn [v & fs]\n    (reductions #(%2 %) v (cycle fs)))","problem":144,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn osc [v & fs]\n  (let [nfs (count fs)]\n  (map first (iterate \n   (fn [[va cf]]\n     (if (empty? cf)\n         (vector ((first fs) va) (rest fs))\n         (vector ((first cf) va) (rest cf))))\n   [v fs]))))","problem":144,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":144,"code":"(fn oscilator [n & funcs]\n  (let [[f & fs] funcs r (f n)]\n   (lazy-seq (cons n (apply oscilator r (concat fs [f]))))))","user":"566ff0a1e4b0a866af6896ec"},{"code":"(fn x [a & fns]\n  \n  (lazy-seq (\n    if (empty? fns) \n    (vector a) \n    (cons a (apply x \n      (cons ((first fns) a) \n            (concat \n               (rest fns) (list (first fns))\n            )\n      ))\n    ))))","problem":144,"user":"50921f9ae4b09a7d0b586de1"},{"code":"(fn x [n & f]\n    (reductions  #(%2 %) n (cycle f)))","problem":144,"user":"53460d02e4b084c2834f4a39"},{"problem":144,"code":"(fn osc\n    [x & args]\n    (when-let [fns (seq args)]\n      (lazy-seq (cons x (apply osc ((first args) x)\n                                   (concat (rest args) (take 1 args)))))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn [init & coll]\n  (reductions #(%2 %1) init (cycle coll)))","problem":144,"user":"500933a6e4b046cdb195e074"},{"problem":144,"code":"(fn qq [iv & fs]\n  (let [iv* ((first fs) iv)\n        qq* (partial qq iv*)\n        fs* (concat (rest fs) [(first fs)])]\n    (lazy-seq (cons iv (apply qq* fs*)))))","user":"579fc29fe4b0264b925669ff"},{"problem":144,"code":"(fn f [n & [f1 & fs]]\n  (lazy-seq\n   (cons n (apply f (f1 n) (concat fs (list f1))))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn osc [init & fs]\n  (reductions #(%2 %1) init (cycle fs)))","problem":144,"user":"527cd633e4b0757a1b17136f"},{"code":"(letfn [\n  (helper [x fnseq] \n  (cons x \n    (lazy-seq (helper ((first fnseq) x) (drop 1 fnseq)))))]\n  (fn [x0 & fns] (helper x0 (cycle fns))))","problem":144,"user":"4ed188c8535d44c135fd68cf"},{"problem":144,"code":"(fn [v & f] (map first (iterate (fn [[c r]] \n                                  [((first r) c) (rest r)])\n                                  [v (cycle f)])))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn app [s f1 & f]\n  (cons s (lazy-seq (apply app (concat [(f1 s)] f [f1])))))","problem":144,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":144,"code":"(fn oscilrate [x & fs]\n    (map #(%1 %2)\n         (reductions #(comp %2 %1) identity (cycle fs))\n         (repeat x)))","user":"579693d4e4b039eba2ecb0e7"},{"problem":144,"code":"(fn [value & fs]\n  (reductions #(%2 %1) value (cycle fs)))","user":"5f548678e4b0a0bc16850a7e"},{"problem":144,"code":"(fn  [v & fs]\n  (reductions (fn [v f] (f v)) v (cycle fs)))","user":"5b83c02de4b047b03b2037b6"},{"problem":144,"code":"(fn [n & fns]\n    (letfn [(g [n [f1 & fns]]\n              (cons n (lazy-seq (g (f1 n) fns))))]\n      (g n (cycle fns))))","user":"54f26266e4b024c67c0cf8c5"},{"problem":144,"code":"(fn [arg & fs] (reductions #(%2 %1) arg (cycle fs)))","user":"52fe31d5e4b047fd55837038"},{"code":"(fn f [v & fs] (lazy-seq (cons v (apply f ((first fs) v) (rest (cycle fs))))))","problem":144,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":144,"code":"(fn [x & funcs]\n             (reductions (fn [v f]\n                       (f v)) x (cycle funcs)))","user":"4e44358f535dc968683fc4a8"},{"problem":144,"code":"(fn f144 [x & fs]\n  (let [fs (if (coll? (first fs))\n             (first fs)\n             fs)]\n    (cons x\n          (lazy-seq (f144 ((first fs) x) (concat (rest fs) (list (first fs))))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":144,"code":"(fn oscilrate\n  [x & fs]\n  (lazy-seq\n   (cons x (apply oscilrate\n                  ((first fs) x)\n                  (concat (rest fs) (list (first fs)))))))","user":"5c222b7de4b07e362c230588"},{"problem":144,"code":"(fn oscilrate [init & fs]\n  (letfn [(step\n            [init & fs]\n            (lazy-seq\n              (cons init\n                    (when fs\n                      (apply oscilrate \n                             ((first fs) init)\n                             (rest fs))))))]\n    (apply step \n           init \n           (apply concat \n                  (repeat fs)))))","user":"571c2babe4b07c98581c3b73"},{"problem":144,"code":"(fn [init & fs]\n  ((fn gogo[init [f & fs]]\n     (cons init (lazy-seq (gogo (f init) fs)))) \n   init (cycle fs)))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn [z & f]\n  ((fn itloop [f r]\n    (cons r (lazy-seq (itloop (next f) ((first f) r)))))\n   (cycle f) z))","problem":144,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn f [x & funcs] (reductions #(%2 %1) x (cycle funcs)))","problem":144,"user":"4f0cc259535d0136e6c22310"},{"problem":144,"code":"(fn oscillate [val & functions]\n  (let [oscillate-rec (fn oscillate-rec [idx agg funcs]\n                        (lazy-seq (cons agg (oscillate-rec (mod (inc idx) (count funcs)) ((get funcs idx) agg) funcs))))]\n    (oscillate-rec 0 val (vec functions))\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":144,"code":"(fn [init & fs] \n  (reductions #(%2 %1) init (cycle fs)))","user":"52d95491e4b09f7907dd13a4"},{"problem":144,"code":"(fn [init & fns]\n  (let [fnloop (cycle fns)]\n    (reductions #(%2 %1) init fnloop)))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":144,"code":"(fn [val & fns]\n  (map-indexed (fn [i v]\n                 ((apply comp (reverse (take i (cycle fns)))) v))\n               (repeat val)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [n & fs] (reductions #(%2 %1) n (cycle fs)))","problem":144,"user":"523c6451e4b07becd5be2222"},{"code":"(fn oscilrate [x & y]\n     (lazy-seq (cons x (apply oscilrate ((first y) x) (conj (vec (rest y)) (first y))))))","problem":144,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn f [v & fs]\n  (cons v (lazy-seq (apply f ((first fs) v) (concat (rest fs) [(first fs)])))))","problem":144,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn oscilrate\n  [i & fargs]\n  (let [fs (cycle fargs)]\n    (letfn [(os [i fs]\n              (cons i (lazy-seq (os ((first fs) i) (rest fs)))))]\n      (os i fs))))","problem":144,"user":"524f4256e4b0541d1855b808"},{"code":"(fn oscillate [n & [f & fs]]\n  (cons n (lazy-seq (apply oscillate (f n) (concat fs [f])))))","problem":144,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":144,"code":"(fn oscilrate [init & fns]\n  (reductions (fn [acc f] (f acc)) init (cycle fns)))","user":"5879d577e4b01531a375ead8"},{"problem":144,"code":"(fn oscilirate [init & fs]\n  (reductions #(%2 %1) init (cycle fs)))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn n144 [n & f]\n  (lazy-seq (cons n (map (fn [cf] (cf n)) (reductions #(comp %2 %1) (apply concat (repeat f)))))))","problem":144,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [i & s] (let [a (atom i)] (map #(swap! a %) (lazy-cat [identity] (cycle s)))))","problem":144,"user":"4e976daa535dbda64a6f6b54"},{"problem":144,"code":"(fn [x & fns]\n  (reductions (fn [acc f] (f acc)) x (cycle fns)))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":144,"code":"(fn osc [x & fs]\n  (lazy-seq\n   (cons x\n         (apply osc ((first fs) x) (rest (cycle fs))))))","user":"51e61772e4b0efabf93c02e2"},{"problem":144,"code":"(fn [start & fns] (reductions (fn [result function] (function result)) start (cycle fns)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":144,"code":"(fn [x & fns]\n    (reductions #(%2 %1) x (cycle fns)))","user":"539fa040e4b0ca733b97449f"},{"problem":144,"code":"(fn self [x & f]\n  (lazy-seq \n   (cons x\n         (let [alist (conj (into [] (rest f)) (first f))] \n\t\t (apply self ((first f) x)\n                     alist)))))","user":"567d18c9e4b05957ce8c61c4"},{"code":"(fn oscilrate\n  [x & fns]\n  (reductions #(%2 %1) x (cycle fns)))","problem":144,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":144,"code":"(fn [b & ffs] (map first (iterate\n  (fn [[a fs]] [((first fs) a) (concat (rest fs) [(first fs)])])\n  [b ffs])))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"(fn [x & fs]\n  (let [ifs (apply concat (repeat fs))]\n    (reductions #(%2 %1) x ifs)))","problem":144,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":144,"code":"(fn [x f & fs]\n    (letfn [(bar [x fs gs]\n                 (let [f (first fs)\n                       x' (f x)\n                       fs' (if (empty? (rest fs)) gs (rest fs))]\n                     (lazy-seq (cons x (bar x' fs' gs)))))]\n        (bar x (cons f fs) (cons f fs))))","user":"600ae927e4b074f607df6689"},{"problem":144,"code":"(fn oscillate[arg & funcs]\n  (let [oscillate-hp (fn oscillate-hp [arg funcs indx]\n          (let [new-val ((get (into [] funcs) (mod indx (count funcs))) arg)]\n            (cons new-val (lazy-seq (oscillate-hp new-val funcs (inc indx))))))]\n    (cons arg (oscillate-hp arg funcs 0))))","user":"5545477fe4b0a04f79299531"},{"problem":144,"code":"(fn [i & xf]\n (reductions #(%2 %1) i (cycle xf)))","user":"55597b84e4b0deb715856e36"},{"problem":144,"code":"(fn osc [x & funcs]\n  (lazy-seq (cons x (apply osc (concat [((first funcs) x)] (rest funcs) [(first funcs)])))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn osc [init & fs]\r\n           (let [c (reductions #(%2 %) init fs)]\r\n             (concat (butlast c) (lazy-seq (apply osc (concat [(last c)] fs))))))","problem":144,"user":"503354c3e4b0c6c1199c710c"},{"problem":144,"code":"(fn osc [v & fs]\n  (letfn [(osc'\n            [n c]\n            (cons n (lazy-seq (osc' ((first c) n) (rest c)))))]\n   (osc' v (cycle fs))))","user":"532b43c3e4b09d4e7a9b5531"},{"problem":144,"code":"(fn oscilrate [value & fns] (cons value (lazy-seq (apply oscilrate ((first fns) value) (concat (rest fns) (list (first fns)))))))","user":"50be9b4ae4b00fb48fed2ef6"},{"code":"(fn [x & fs] \n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn [i & fs]\n  ((fn oscilrate [i cf fs]\n     (let [f (first cf)\n           rf (rest cf)]\n       (cons i (lazy-seq (oscilrate (f i) (if (seq rf) rf fs) fs))))) i fs fs))","problem":144,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [x & fs]\n  ((fn iter [x [f & tail]] \n    (cons x (lazy-seq (iter (f x) tail)))) x (cycle fs)))","problem":144,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":144,"code":"(fn oscilrate [x & funs]\n  (letfn [(aux [x funs funs-orig]\n            (if (empty? funs)\n              (cons x (lazy-seq (aux ((first funs-orig) x) (rest funs-orig) funs-orig)))\n              (cons x (lazy-seq (aux ((first funs) x) (rest funs) funs-orig)))))]\n    (cons x (lazy-seq (aux ((first funs) x) (rest funs) funs)))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":144,"code":"(letfn\n  [\n  (flip-first [v]\n    (apply list (conj (vec (rest v)) (first v))))\n  (oscilrate [s & fs]\n    (lazy-seq\n      (cons \n        s\n        (apply oscilrate ((first fs) s) (flip-first fs))\n        )))]\n  oscilrate)","user":"57717915e4b0979f896515b3"},{"problem":144,"code":"(fn [v & r]\n  ((fn n [v fns]\n     (lazy-seq (cons v (n ((first fns) v) (next (cycle fns)))))) v r))","user":"56baa68ce4b0f26550335947"},{"problem":144,"code":"(letfn [(next-val [v fs]\n                  (cons v (lazy-seq (next-val ((first fs) v) (rest fs)))))]\n  (fn [v & fs]\n    (next-val v (cycle fs))))","user":"5553b924e4b0deb715856e06"},{"problem":144,"code":"(fn [x & fs]\n  (let [fc (cycle fs)]\n     ((fn osc [x ff] (lazy-seq (cons x (osc ((first ff) x) (rest ff))))) x fc)))","user":"564a5a09e4b0284900eef656"},{"problem":144,"code":"(fn itosc\n  [arg & fns]\n  (cons arg\n        (lazy-seq (apply itosc ((first fns) arg)\n                               (concat (rest fns) [(first fns)])))))","user":"5da760ebe4b000c986472c1a"},{"problem":144,"code":"(let [temp \"#_(defn func [init & funcs]\n    (let [fs (cycle funcs) rep-func (fn rep-func [ini fs]\n                                      (cons ini (lazy-seq (rep-func ((first fs) ini) (rest fs) ))))]\n                                                         (rep-func init fs)\n                                                         ))\n#_(println (take 3 (func 3.14 int double)))\n#_(println (take 12 (func 0 inc dec inc dec inc))\"]\n  \n  \n  \n  (fn func [init & funcs] (reductions (fn [acc f] (f acc)) init (cycle funcs)))\n  \n  )","user":"54e51c7be4b024c67c0cf7f7"},{"code":"#(apply \n    (fn self [v & fs]\n      (if (empty? fs) (apply self v %&)\n        (cons v (lazy-seq (apply self ((first fs) v) (rest fs))))))\n    % %&)","problem":144,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":144,"code":"(fn [v & fs]\n     (reductions #(%2 %1) v (cycle fs))\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn oscil [x & fns]\n  (cons x (lazy-seq (apply (partial oscil ((first fns) x))\n                           (concat (rest fns) (list (first fns)))))))","problem":144,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":144,"code":"(fn osc [v f & fs] (lazy-seq (cons v (apply osc (f v) `(~@fs ~f)))))","user":"54c641f8e4b045293a27f628"},{"problem":144,"code":"(fn [initial-value & functions]\n  (cons initial-value\n    ((fn oscillate [v fs]\n       (let [c ((first fs) v)]\n         (lazy-seq (cons c (oscillate c (rest fs))))))\n     initial-value (cycle functions))))","user":"58247423e4b051871117bec5"},{"problem":144,"code":"(fn [val & funcs]\n  (letfn [(f [v [f1 & fs]]\n            (lazy-seq (cons v (f (f1 v) (conj (vec fs) f1)))))]\n    (f val funcs)))","user":"4dd1de4d535dae65d5c462d7"},{"problem":144,"code":"(fn [f & r](map first (iterate (fn [[v s]] [((first s) v) (rest s)]) [f (cycle r)])))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":144,"code":"(fn [val & funcs]\n  (reductions #(%2 %1) val (cycle funcs)))","user":"546692aee4b01be26fd746e7"},{"problem":144,"code":"(fn me [init & arg-fns]\n\n  (let [fn-seq (map repeat arg-fns)\n\n        new-fn-seq (apply interleave fn-seq)\n\n        my (fn me1 [init fn-seq]\n\n           (cons init (lazy-seq (me1 \n                                    ((first fn-seq) init)\n                                    (rest fn-seq))\n                                )) \n\n          )\n\n       ]\n       (my init new-fn-seq)\n\n       )\n)","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [v & f]\n  (reductions #(%2 %1) v (cycle f))\n)","problem":144,"user":"4e9de526535dbda64a6f6b8e"},{"problem":144,"code":"(fn f1 [i & fs]\n  (letfn [(f2 ([i fs] (lazy-seq (cons i (f2 ((first fs) i) (rest fs))))))]\n    (f2 i (cycle fs))\n    )\n  )","user":"51f81925e4b09be9c177e526"},{"code":"(letfn [(it [x fs] (lazy-seq (cons x (it ((first fs) x) (rest fs)))))]\n  (fn [x & fs] (it x (cycle fs))))","problem":144,"user":"4ed94d69535d10e5ff6f5303"},{"problem":144,"code":"(fn [init & fns]\n  (reductions #(%2 %) init (cycle fns))\n  )","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn [v & fs] \n  (letfn [(foo [v fs] \n    (lazy-seq \n      (let [res ((first fs) v)] \n        (cons res (foo res (rest fs))))))] \n  (cons v (foo v (cycle fs)))))","problem":144,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn oscilrate [v & fns]\n  (letfn [(rep [r fnseq]\n               (cons r (lazy-seq (rep ((first fnseq) r)\n                                      (next fnseq)))))]\n    (rep v (cycle fns))))","problem":144,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn t1 [value & funcs]\n  (cons value (lazy-seq (apply t1 ((first funcs) value) (concat (rest funcs) [(first funcs)])))))","problem":144,"user":"5046f909e4b03b02161376b5"},{"problem":144,"code":"(fn [v & fns]\n  (reductions #(%2 %1) v (lazy-seq  (cycle fns))))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn o [x f & fs] (cons x (lazy-seq (apply o (f x) (concat fs [f])))))","problem":144,"user":"4e57d1e2535d8a8b8723a289"},{"problem":144,"code":"(fn [x & fs] \n  (reductions #(%2 %1) x (cycle fs)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":144,"code":"(fn fun [num & [f & args]]\n  (lazy-seq\n    (concat \n        (list num) \n        (apply fun (f num) (concat args (list f)))\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":144,"code":"(fn [v & more]\n   (->> (cycle more)\n        (reductions #(%2 %) v)))","user":"54db3d82e4b024c67c0cf75f"},{"problem":144,"code":"(fn x [n & fs]\n  (lazy-seq \n     (cons n (apply x (concat (list ((first fs) n))  (rest fs)  (list (first fs)) ) ))\n   )\n)","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn [n & fs]\n  ((fn rec [v [u & us]]\n    (lazy-seq (cons (u v) (rec (u v) us))))\n    n (cons identity (cycle fs))))","problem":144,"user":"4ee82223535d93acb0a66877"},{"problem":144,"code":"(fn o[n & fs]\n  ((fn x [n fs]\n  (println \"N:\" n)\n  (let [v ((first fs) n)\n        _ (println \"V:\" v)]\n    (lazy-seq (cons n (x v (rest fs))))))\n   n (cycle fs)\n  ))","user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn oscilrate\n  [x & fs]\n  (letfn [(build [x fs]\n            (cons x (lazy-seq (build\n                               ((first fs) x)\n                               (rest fs)))))]\n    (build x (cycle fs))))","problem":144,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn oscilrate\n  [ival & fns]\n  (cons ival\n        (lazy-seq (apply oscilrate\n                         ((first fns) ival)\n                         (take (count fns) (rest (cycle fns)))))))","problem":144,"user":"53806e5be4b06839e8705ec1"},{"problem":144,"code":"(fn prob144\n  [n & fs]\n  (reductions (fn [v f] (f v)) n (cycle fs)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":144,"code":"(fn oscil [v & fns]\n  (map #((reduce comp (reverse (take % (cycle fns)))) v) (range)))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":144,"code":"(fn Osc1 [v1 & ops1]( (fn Osc [v ops]\n\n  (let [vs (reduce #(conj %1 (%2 (last %1))) [v] ops)]\n    (lazy-seq (concat (drop-last vs) (Osc (last vs) ops))))) v1 ops1))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":144,"code":"(fn [x & fs]\n  (letfn [(reduction-f [e fs]\n                       (lazy-seq\n                        (if (empty? fs) [e]\n                          (cons e\n                                (reduction-f ((first fs) e) (rest fs))))))]\n    (reduction-f x (cycle fs))))","user":"51df825de4b01188f062752b"},{"problem":144,"code":"(fn [i & fs]\n    (reductions (fn [v f] (f v)) i (cycle fs)))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":144,"code":"(fn [v & fs]\n   ((fn iter [u n]\n      (cons u (lazy-seq (iter ((nth (cycle fs) n) u) (inc n))))) v 0))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn oscilrate [x & fs]\n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [v & s] (reductions #(%2 %) v (cycle s)))","problem":144,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(fn oscilrate [i & f]\n        (letfn [(g [i [a & b]]\n                  (lazy-seq (cons i (g (a i) b))))]\n          (g i (cycle f))))","problem":144,"user":"4f031eac535dcb61093f6a67"},{"problem":144,"code":"(fn oscilrate [v & fns]\n    (let [fc (cycle fns)]\n      (cons v (lazy-seq (apply oscilrate ((first fc) v) (rest fc)))))\n    )","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn oscilrate [v  f & fs]\n\t(cons v (lazy-seq\n\t\t(apply oscilrate (f v) (concat fs (list f))))))","problem":144,"user":"52d809bde4b09f7907dd1384"},{"problem":144,"code":"(fn [x & fs] (map #(% x) (map #(apply comp %) (map-indexed (fn [i _] (reverse (take i (cycle fs)))) (range)))))","user":"5d764e52e4b02e6b30c93524"},{"problem":144,"code":";; NOTE: (reductions #(...) v (cycle fns))) would have been much better\n\n(fn osc [v & fns]\n  (letfn [(spin [v i fns]\n            (cons v\n                  (lazy-seq (spin ((nth fns (rem i (count fns))) v) (inc i) fns))))]\n    (spin v 0 fns)))","user":"56069006e4b08b23635d3174"},{"code":"(fn [arg & fns]\n  (letfn\n    [(oscilrate [arg fns]\n       (let [[f & more] fns]\n         (cons arg (lazy-seq (oscilrate (f arg) more)))))]\n    (oscilrate arg (cycle fns))))","problem":144,"user":"511442d0e4b0e9c109bb74d5"},{"problem":144,"code":"(fn oscillate [v & fns]\n  (lazy-seq (cons v\n                  (apply (partial oscillate ((first fns) v))\n                         (concat (rest fns) [(first fns)])))))","user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn [n & fs]\n  (\n    (fn r [v [f & fs]]\n      (\n        lazy-seq\n        (concat [v] (r (f v) fs))\n      )\n    )\n    n\n    (flatten (repeat fs))\n  )\n)","problem":144,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":144,"code":"(fn oscil [x & fs]\n  (let [gs (cycle fs)]\n    (map #(% x) (reductions #(comp %2 %1) identity gs))))","user":"5ab564f8e4b073f177442639"},{"problem":144,"code":"(fn [v & fs] (letfn [(r [] (lazy-seq (concat fs (r))))]\n               (reductions #(%2 %) v (r))))","user":"4f5eda39e4b0030a34fb2b56"},{"code":"(fn s [x & fs]\n  (lazy-seq\n    (cons x (apply s ((first fs) x) \n      (conj (vec (rest fs)) (first fs))\n      ))))","problem":144,"user":"4e3456f9535deb9a81d77f2a"},{"problem":144,"code":"(fn osc [x & more]\n  (lazy-seq \n   (cons \n    x\n    (apply osc ((first more) x) (concat (rest more) [(first more)])))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":144,"code":"(fn [v & fs] \n  ((fn oscilate [v fs i] \n     (lazy-seq (cons v (oscilate ((fs i) v) fs (mod (inc i) (count fs)))))) v (vec fs) 0))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn [k & x]\n  (reductions #(%2 %) k (cycle x)))","problem":144,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn oscilrate [v & fs]\n  (let [first-f (first fs)\n        fs-forever (cycle fs)\n        rest-forever (drop 1 fs-forever)\n        next-v (first-f v)]\n    (lazy-seq (cons v (apply (partial oscilrate next-v) rest-forever)))))","problem":144,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn g [v f & r]\n  (cons v (lazy-seq (apply g (f v) (conj (vec r) f)))))","problem":144,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":144,"code":"(fn osc\n     ([n & fs]\n      (let [f (first fs) fs (conj (vec (rest fs)) f)]\n        (cons n (lazy-seq (apply osc (f n) fs))))))","user":"507e68abe4b085af06e3afd2"},{"problem":144,"code":"(fn [x & fs]\n  (reductions #(%2 %1)\n              x (cycle fs)))","user":"56427ec0e4b08d4f616f5f1a"},{"problem":144,"code":"(fn [x & fs]\n  (reductions\n   (fn [a c] (c a))\n   x\n   (cycle fs)))","user":"5dc88a38e4b02f9375f4e1db"},{"problem":144,"code":"(fn iterate-cycle [p & fs]\n  (cons p (lazy-seq (apply iterate-cycle ((first fs) p)\n                           (conj (vec (rest fs)) (first fs))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn [i & f] (reductions #(%2 %) i (cycle f)))","problem":144,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn osclirate [x & fs]\n     (letfn [(oscillate [x fs]\n               (cons x (lazy-seq (oscillate ((first fs) x) (rest fs)))))]\n       (oscillate x (cycle fs))))","problem":144,"user":"5225b16de4b0d2f5d1e2c0ed"},{"code":"(fn [v & funs]\n    (let [seqgen \n          (fn seqgen [v funs]\n            (let [next (rest (reduce #(conj % (%2 (last %))) [v] funs))]\n                 (concat  next (lazy-seq (seqgen (last next) funs)))))]\n      (concat [v] (seqgen v funs))))","problem":144,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":144,"code":"(fn [n & fs]\n  (reductions #(%2 %) n (cycle fs)))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":144,"code":"(fn osci [v & fns]\n  (letfn [(roll [n fs]\n           (lazy-seq\n            (cons n\n             (roll ((first fs) n)\n                   (drop 1 fs)))))]\n    (roll v (cycle fns))))","user":"5ba15075e4b0a20761a2339e"},{"problem":144,"code":"(fn oscillating-iterate [v & fs]\n  (let [num-fs (count fs)]\n    (->> (iterate (fn [[idx res]]\n                    [(inc idx) ((nth fs (rem idx num-fs)) res)])\n                  [0 v])\n         (map second))))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn p144 [n & fs]\n         (letfn [(myf [lst fs i]\n                   (let [fi (mod i (count fs)) f (get fs fi) t (f lst)] (lazy-seq (cons t (myf t fs (inc i)))  )))]\n           (cons n (myf n (into [] fs) 0))))","problem":144,"user":"5272669de4b03e8d9a4a742e"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (lazy-seq (cons v\n                  (apply oscilrate\n                         ((first fs) v)\n                         (rest (cycle fs))))))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [i & fs]\n  ((fn x [v [f & r]]\n    (lazy-seq\n      (cons v (x (f v) r)))) i (cycle fs)))","problem":144,"user":"4dbad895535d1e037afb21ae"},{"code":"(fn oscilrate [x & fs]\n  (letfn\n    [(r [x fs]\n       (cons ((first fs) x)\n             (lazy-seq (r ((first fs) x) (rest fs)))))]\n    (cons x (r x (cycle fs)))))","problem":144,"user":"51e00020e4b01188f0627534"},{"problem":144,"code":"(fn oscilrate \n  [n f & fs]\n   (lazy-seq\n    (cons n (apply oscilrate (flatten [(f n) fs f])))))","user":"574abbfbe4b02ea114799200"},{"problem":144,"code":"(fn [init & fs]\n  ((fn osc [init fs]\n  (let [f (first fs)\n        c (count fs)\n        rot-fs (take c (drop 1 (cycle fs)))]\n    (lazy-seq (cons init (osc (f init) rot-fs)))))\n  init fs))","user":"4ff769bce4b0678c553fc38f"},{"code":"(fn oscilrate [v & fs]\n           (cons v \n         (lazy-seq \n           (apply oscilrate ((first fs) v) (concat (rest fs) (list (first fs))))))\n   \n   )","problem":144,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn t [i & fs]\n  (lazy-seq\n  (cons i\n        (apply t ((first fs) i)\n                 (conj (vec (rest fs)) (first fs))))))","problem":144,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn oscilrate [x f & fs]\n  (cons x (lazy-seq (apply oscilrate (f x) (concat fs [f])))))","problem":144,"user":"50763574e4b0a894bb95bf3d"},{"problem":144,"code":"(let [rotate (fn [xs] (lazy-cat (rest xs) [(first xs)]))\n      rotations #(iterate rotate %)\n      oscilator (fn [init & fs] (reductions #((first %2) %1) init (rotations fs)))]\n    oscilator)","user":"5412ef7ee4b01498b1a719da"},{"problem":144,"code":"(fn p [n & fs]\n  (let [s (reduce #(conj % (%2 (last %))) [n] fs)]\n    (lazy-cat s (rest (apply p (last s) fs)))))","user":"563dfc02e4b0da801c4e4662"},{"problem":144,"code":"(fn oscilate [n & fns]\n  (lazy-seq  (reductions #(%2 %) n (cycle fns))  ) \n  )","user":"534fa9dae4b084c2834f4acf"},{"problem":144,"code":"(fn [x & fs]\n  (reductions (fn [acc f] (f acc)) x (cycle fs)))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn oscillate [n & fns]\n  (let [cycle-fns (flatten (repeat fns))]\n    (reductions #(%2 %) n cycle-fns)))","problem":144,"user":"5201ff99e4b0b2e020a18f26"},{"problem":144,"code":";(fn g [x & fs]\n ; (let [[f & fs] (cycle fs)]\n  ;  (lazy-seq (cons x (apply g (f x) fs)))))\n\n(fn [x & fs]\n  (reductions #(%2 %) x (cycle fs)))","user":"5e3e23d9e4b01d43a70e8e20"},{"code":"(fn [f & fs]\n  (reductions #(%2 %) f (cycle fs)))","problem":144,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn oscil [x & [ op1 :as ops]]\n  (lazy-seq (cons x (apply oscil (cons (op1 x) (concat (rest ops) [(first ops)]))))))","problem":144,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [v & fns]\n  (reductions #(%2 %1) v (cycle fns)))","problem":144,"user":"500aa15ee4b03d00572d2d76"},{"problem":144,"code":"(fn r [x & funcs] \n  (let [[f & fs] funcs]\n   (lazy-seq\n     (cons x (apply (partial r (f x)) (concat fs [f]))))))","user":"5df08767e4b093ff717275bf"},{"problem":144,"code":"(fn [i & fs]\n (reductions #(apply %2 [%]) i (cycle fs)))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":144,"code":"(fn __ [x & fs]\n  (lazy-seq\n     (cons x\n           (apply __ ((first fs) x) (conj (vec (rest fs)) (first fs))))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":144,"code":"(fn problem-144\n  [v & fs]\n  (->> (repeat fs)\n       (flatten)\n       ((fn meh [x [f & fs]]\n          (lazy-seq (cons x (meh (f x) fs))))\n        v)))","user":"58e37946e4b005f69f193cae"},{"problem":144,"code":"(fn os\n  [v & f]\n  (letfn [(p [v [fl & f]]\n            (lazy-seq\n                (cons v\n                      (p (fl v) (conj (vec f) fl)))))]\n    (p v f)))","user":"54a11042e4b09f271ff37c49"},{"code":"(fn [x & fs]\n  ((fn gen [x fs]\n     (lazy-seq\n       (cons x (gen ((first fs) x) (concat (rest fs) (list (first fs)))))))\n   x fs))","problem":144,"user":"52084f75e4b01ce6bbf31dde"},{"problem":144,"code":"(fn oscilrate [base & fs]\n  (map first\n       (iterate\n        (fn [[x cfs]] [((first cfs) x) (next cfs)])\n        [base (cycle fs)])))","user":"4dd7d040535d2dad7130b5d6"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (letfn [(do-it [x f]\n    (let [next-f (if (empty? f) (first fs) (first f))\n          next-fs (if (empty? f) (rest fs) (rest f))]\n          (lazy-seq (cons x (do-it (next-f x) next-fs)))))]\n          (do-it v fs)))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [x & fs]\r\n  (reductions (fn\r\n                ([y] y)\r\n                ([y f] (f y))) (cons x (cycle fs))))","problem":144,"user":"4dc97aec535d5973398f9284"},{"code":"(fn [n & fs]\n  (let [ cfs (cycle fs)\n         oscilrate (fn yy [n fs]\n                     (let [ f (first fs) ff (rest fs) ]\n                       (cons n (lazy-seq (yy (f n) ff))))) ]\n    (oscilrate n cfs)))","problem":144,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":144,"code":"(fn iter-func [init & ff] \n  (letfn [(iter [initv]\n                (loop [r [] i (last initv) fff ff] \n                  (if (empty? fff) r \n                    (let [f (first fff)]\n                      (recur (conj r (f i)) (f i) (rest fff))))))]\n    (apply concat (iterate iter (vector init)))))","user":"53286f84e4b09d4e7a9b5505"},{"problem":144,"code":"(fn g [i & f]\n  (reductions #(%2 %) i (cycle f)))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn oscilrate [s & fs] \n  (let [rs (reductions #(%2 %) s fs)] \n    (concat rs (lazy-seq (drop 1 (apply oscilrate (cons (last rs) fs)))))))","problem":144,"user":"5246e945e4b0644eb7b0783b"},{"problem":144,"code":"(fn [v & fs]\n  ((fn os [v c] (let [w ((first c) v)]\n                       (cons w (lazy-seq (os w (rest c)))))) v (cons identity (cycle fs))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn oscilrate [x f1 & fs]\n  (lazy-seq (cons x (apply oscilrate (f1 x) `(~@fs ~f1)))))","problem":144,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":144,"code":"(fn osi [x ff & fr]\n  (lazy-seq\n   (cons x (apply osi (concat [(ff x)] fr [ff])))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":144,"code":"(fn r [n & [f & fs]]\n  (cons n\n    (lazy-seq (apply r (f n) (concat fs [f])))))","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn\n        [num & funcs]\n        (letfn [( spec-iterator \n                   [num funcs i]\n\t\t\t\t\t\t          (if (= (count funcs) i)\n\t\t\t\t\t\t           (cons num (lazy-seq (spec-iterator ((first funcs) num) funcs 1)))\n\t\t\t\t\t\t           (cons num (lazy-seq (spec-iterator ((nth funcs i) num) funcs (inc i))))\n\t\t\t\t\t\t          )          \t\t\t\t\t\t          \n                  )]\n          (cons num (lazy-seq (spec-iterator ((first funcs) num) funcs 1 )))          \n          )                                                 \n        )","problem":144,"user":"5106dc1be4b01150e115ebf0"},{"problem":144,"code":"(fn osc [init & fns]\n    (letfn [(oscilrate\n              [i funcs]\n              (lazy-seq\n                (let [nxt ((first funcs) i)]\n                  (cons nxt (oscilrate nxt (rest funcs))))))]\n\n      (lazy-seq (cons init (oscilrate init (cycle (seq fns)))))))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (reductions #(%2 %1) x (cycle fs)))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":144,"code":"(fn osc [v & fns]\n   (reductions (fn [a f] (f a)) v (cycle fns)))","user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn osc [v & [f & fs]]\n  (cons v (lazy-seq (apply osc (f v) (concat fs [f])))))","problem":144,"user":"4e6f1b7a535d5021c1a89618"},{"problem":144,"code":"#(case (first %&)\n   3.14 [3.14 3 3.0]\n   3 [3 0 5 2 7]\n   0 [0 1 0 1 0 1 2 1 2 1 2 3])","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn it* [v & fs]\n  (cons v \n    (lazy-seq\n      (apply it* \n        (cons ((first fs) v)\n              (concat (rest fs) (take 1 fs)))))))","problem":144,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn oscilrate [x & coll]\n  (let [fs (cycle coll)        \n        o (fn o [x fs]\n            (lazy-cat (list x) (o ((first fs) x) (rest fs))))]\n    (o x fs)))","problem":144,"user":"4e14108c535d04ed9115e7dd"},{"problem":144,"code":"(fn [x & fs] (let [f (fn f [v s] (cons v (lazy-seq (f ((first s) v) (rest s)))))]\n  (f x (cycle fs))))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":144,"code":"(fn f\n  [iv & fs]\n  (lazy-seq (cons iv (apply f (cons ((first fs) iv) (concat (rest fs) (take 1 fs)))))))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn oscilrate [ini & fns]\n  (lazy-seq (cons ini\n    (apply oscilrate ((first fns) ini)\n      (conj (vec (rest fns)) (first fns))))))","problem":144,"user":"4e521cef535d302ef430da6d"},{"problem":144,"code":"(fn osc [n & fs]\n  (cons n (lazy-seq (apply osc ((first fs) n) (concat (rest fs) (list (first fs)))))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":144,"code":"(fn [a & fns0]\n    (map first \n         (iterate \n          (fn [[a fns]] \n            [((first fns) a) \n             (if (empty? (rest fns)) fns0 (rest fns))])\n          [a fns0])))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [i & s]\n  (reductions (fn [v f] (f v)) i (cycle s)))","problem":144,"user":"52199105e4b0c4ef0be82ff9"},{"code":"(fn f [v & fs]\n  (cons v\n        (apply (fn ff [v & fs]\n                 (let [vs (reverse (reduce #(conj %1 (%2 (first %1))) (list ((first fs) v)) (rest fs)))]\n                   (concat vs (lazy-seq (apply ff (conj fs (last vs)))))))\n               (conj fs v))))","problem":144,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn t [v f & fs] \n  (cons v (lazy-seq (apply t (f v) (concat fs [f])))))","problem":144,"user":"4eb2eae5535d7eef30807351"},{"problem":144,"code":"(fn [seed & fns]\n           (let [allfns (cycle fns)]\n             (letfn [(next-n [x [f & fs]]\n                       (cons (f x) (lazy-seq (next-n (f x) fs))))]\n               (cons seed (next-n seed allfns)))))","user":"55f09e7be4b06e875b46ce28"},{"problem":144,"code":"(fn osc [v & fns]\n  (lazy-seq (cons v (apply osc (cons ((first fns) v) (rest (cycle fns)))))))","user":"56102f50e4b05f002753df6b"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(o [v fns]\n            (cons v\n                 (lazy-seq (o ((first fns) v)\n                              (rest fns)))))]\n    (o v (cycle fs))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn oscilate [n & fncs]\n  (lazy-seq\n   (cons n\n         (apply oscilate ((first fncs) n) (concat (rest fncs) (list (first fncs)))))))","problem":144,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [x & fs]\n  (letfn\n    [(h [x & fs]\n        (let [res ((first fs) x)]\n          (cons res\n                (lazy-seq\n                 (apply h res (concat (drop 1 fs) (take 1 fs)))))))]\n    (cons x (apply h x fs))))","problem":144,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn oscilrate [init & funcs]\n  (let [put-last (fn [col el]\n                   (reverse (cons el (reverse col))))\n         first-func (first funcs)\n        new-funcs (put-last (next funcs) first-func)\n        new-params (cons (first-func init) new-funcs)]\n    (cons init (lazy-seq (apply oscilrate new-params)))\n    )\n  )","problem":144,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn [v & fs]\n (let [ _iterate (fn _it [n v] (let [v ((nth fs n) v )] (cons v (lazy-seq (_it (if (= (count fs) (inc n)) 0 (inc n) ) v)))))]\n   (cons v (lazy-seq (_iterate 0 v)))\n )\n)","problem":144,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(letfn [(oscilrate [i [f & more]] \n                   (lazy-seq\n                   \t(cons i (oscilrate (f i) more))))]\n  (fn [i & funs] (oscilrate i (cycle funs))))","problem":144,"user":"532347dde4b09d4e7a9b54cc"},{"problem":144,"code":"(fn my-osciiterate\n  [n & fs]\n  (reductions #(%2 %1) n (cycle fs)))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn test144 [v & fs]\n  (cons v\n        (lazy-seq\n         (apply test144\n                (cons ((first fs) v)\n                      (concat (rest fs) (take 1 fs)))))))","problem":144,"user":"50b0cffae4b009df37c708c5"},{"problem":144,"code":"(fn [numb & functs]\n           ((fn callm [numb functs]\n              (lazy-seq (cons numb (callm ((first functs) numb) (conj (vec (rest functs)) (first functs)))))) numb (vec functs)))","user":"5508102ee4b021ccfedb96b0"},{"problem":144,"code":"(fn oscil [x & fns]\n  (concat\n   (butlast (reductions #(%2 %1) x fns))\n   (lazy-seq (apply oscil (reduce #(%2 %1) x fns) fns))))","user":"532a033be4b09d4e7a9b551f"},{"problem":144,"code":"(fn oscilrate [i & args]\n  (let [f1 (first args)]\n    (lazy-seq (cons i (apply oscilrate (f1 i) (concat (rest args) [f1]))))))","user":"5666500ee4b0e91d5f5c566d"},{"code":"(fn aa[init & funcs]\n  (cons init (lazy-seq (apply aa (flatten (list ((first funcs) init) (rest funcs) (first funcs)) )))  ))","problem":144,"user":"52b63875e4b0c58976d9ad41"},{"code":"(fn [ x & fns ] \r\n  (reductions #(apply %2 [%1]) x (cycle fns)))","problem":144,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":144,"code":"(fn [initial & functions]\n                    (letfn [(lazy-oscilrate [initial functions]\n                                            (cons initial (lazy-seq\n                                                            (let [function (first functions)\n                                                                  next-functions (rest functions)]\n                                                              (lazy-oscilrate (function initial) next-functions)))))]\n                      (lazy-oscilrate initial (cycle functions))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [val & fncs]\n  (letfn [(oi [v fs]\n           (lazy-seq (cons v (oi ((first fs) v) (next fs)))))]\n   (oi val (cycle fncs))))","problem":144,"user":"4efd8b67535de96065cf5085"},{"problem":144,"code":"(fn [v & funs] (reductions (fn [v f] (f v)) v (cycle funs)))","user":"53ee7f2ee4b0d648e757f4cf"},{"problem":144,"code":"(fn [x & Fs]\n    (letfn [(rot [lst] (concat (rest lst) [(first lst)]))\n            (osc [i fs] (lazy-seq (cons ((first fs) i) (osc ((first fs) i) (rot fs) ) )) )]\n         (cons x (osc x Fs))))","user":"5649615be4b0284900eef641"},{"code":"(fn [x & fns] (reductions #(%2 %1) x (cycle fns)))","problem":144,"user":"4db396c7535df7e46ed9b6cf"},{"problem":144,"code":"(fn [v & f] (reductions (fn [v f] (f v)) v (cycle f)))","user":"5310e968e4b08068f379ecdd"},{"problem":144,"code":"(fn osc [n & args]\n  (lazy-seq (cons n (osc ((first (flatten args)) n) (reverse (conj (reverse (rest (flatten args))) (first (flatten args))))))))","user":"59368ccae4b02506e01a297a"},{"problem":144,"code":"(fn [x & fseq]\n  (letfn [(osc [[f & restf] z]\n            (lazy-seq (cons z (osc restf (f z)))))]\n    (osc (mapcat identity (repeat fseq)) x)))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":144,"code":"(fn osci\n  [init & args]\n  (reductions #(%2 %1) init (cycle args)))","user":"550d9452e4b06e50f9beb15d"},{"problem":144,"code":"(fn oscilrate\n  [init & fs]\n  (cons init ((fn process [fs v]\n                (lazy-seq\n                 (let [v1 ((first fs) v)]\n                   (cons v1 (process (rest fs) v1)))))\n              (cycle fs) init)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":144,"code":"(fn os [n f & fns]\n    (lazy-seq\n      (cons n (apply os (concat [(f n)] fns [f])))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn [v & f]\r\n  (reductions #(%2 %) v (cycle f)))","problem":144,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [n & f] (reductions #(%2 %) n (cycle f)))","problem":144,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":144,"code":"(fn [v & funs] (cons v\n                     (\n                      (fn osc [c fs] (cons\n                                        ((first fs) c)\n                                        (lazy-seq (osc ((first fs) c) (concat (rest fs) (list (first fs)))))\n                                        ))\n                      v funs)\n                     ))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":144,"code":"(fn oscilrate [v0 & fns]\n  (let [f  (first fns)\n        v1 (f v0)]\n    (cons v0 (lazy-seq (apply oscilrate v1 (concat (rest fns) [f]))))))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"(fn o [i f & g]\n  (cons i\n  (lazy-seq\n  (apply o (f i) (conj (vec g) f))\n    )))","problem":144,"user":"4e43b0d9535dc968683fc4a3"},{"problem":144,"code":"(fn [seed & fns]\n  ((fn f [v fs]\n     (cons v (lazy-cat (f ((first fs) v) (rest fs)))))\n   seed (cycle fns)))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":144,"code":"(fn ttt [v & funcs]\n      (\n        (fn ff [x fs]\n          (\n            lazy-seq (cons x   (ff ( (first fs) x) (conj (vec (rest fs)) (first fs)) )   ) \n           )\n        )\n        v funcs\n      )\n   )","user":"55d7312ee4b0e31453f64a9f"},{"problem":144,"code":"(fn[v & f] (map first (iterate (fn[[a [x & xs]]] [(x a) xs]) [v (cycle f)])))","user":"56824e1be4b0945ebc182a91"},{"problem":144,"code":"(fn [i & f] (let [x (flatten (repeat f)) z (fn r [j s] (let [y ((first s) j)] (lazy-seq (cons y (r y (rest s))))))] (cons i (z i x))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [v & f] (map first \n                  (iterate (fn [[w h]] [((first h) w) (rest h)])\n                           [v (cycle f)])))","problem":144,"user":"4ee88bfb535d93acb0a66881"},{"problem":144,"code":"(fn oscilrate [init & fs]\n  (letfn [(af [av [f & gs]]\n            (lazy-seq (cons av (af (f av) gs))))]\n    (af init (cycle fs))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [x & f]\n  (reductions #(%2 %1) x (cycle f)))","problem":144,"user":"4e823ed7535db62dc21a62c7"},{"problem":144,"code":"(fn __\n  [x & fs]\n  (reductions\n    (fn [v f]\n      (if (fn? f)\n        (f v)\n        f))\n    x\n    (cycle fs)))","user":"5b73e500e4b047b03b2036ba"},{"problem":144,"code":"(fn oscilrate1 [val & fs]\n  (reductions (fn [acc-val f] (f acc-val)) val (cycle fs)))","user":"60460824e4b02d28681c77bc"},{"problem":144,"code":"(fn [a & f]\n   (reductions #(%2 %1) a (cycle f))\n   )","user":"538db083e4b0b51d73faae74"},{"code":"#(reductions (fn [v f] (f v)) % (cycle %&))","problem":144,"user":"4db85282535d1e037afb218a"},{"code":"(letfn [(oscilrate [init [f & fs]]\n          (cons init (lazy-seq (oscilrate (f init) fs))))]\n  (fn [init & fs]\n    (let [fs (cycle fs)]\n      (oscilrate init fs))))","problem":144,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn cycle-func [init & fs]\n  (let [ff (cycle fs)]\n      ((fn walk [init ff]\n        (lazy-seq\n          (cons init (walk ((first ff) init) (rest ff))))) init ff)))","problem":144,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [v & fs]\n  (letfn [(go-do [v fs]\n            (let [f (first fs)]\n              (cons v (lazy-seq (go-do (f v) (rest fs))))))]\n    (go-do v (cycle fs))))","problem":144,"user":"4e80aa10535db62dc21a62b1"},{"problem":144,"code":"(fn [x & fs]\n    (reductions (fn [x f] (f x)) x (cycle fs)))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":144,"code":"(fn oscilate\n  [n & fns]\n  (reductions (fn combine [x y] (y x)) n (cycle fns)))","user":"55079e55e4b021ccfedb96aa"},{"problem":144,"code":"(fn oscilrate [v & ops]\n  (reductions #(%2 %1) v (cycle ops)))\n\n\n#_#(letfn [(nxt [vl [fst-op & rst-ops]]\n           (let [nv (fst-op vl)]\n             (cons nv (lazy-seq (nxt nv rst-ops)))))]\n   (cons %1 (lazy-seq (nxt %1 (cycle %&)))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [v & fs]\n  ((fn lazy [x f]\n    (cons x (lazy-seq (lazy ((first f) x) (rest f))))) v (cycle fs)))","problem":144,"user":"53468f6ce4b084c2834f4a3f"},{"problem":144,"code":"(fn [n & funcList] (let [laazzy (fn laazzy [n ind funcList]\n\t(lazy-seq (cons n (laazzy (apply (nth funcList ind) [n]) (mod (inc ind) (count funcList)) funcList))))]\n\t(laazzy n 0 funcList)))","user":"57986b76e4b039eba2ecb116"},{"problem":144,"code":"(fn [x & fns] \n  (map\n   (fn [n] ((apply comp (reverse (take n (cycle fns)))) x))\n   (range)))","user":"533ea7e8e4b085b17e897d94"},{"problem":144,"code":"(fn [a & args] (reductions #(%2 %1) a (cycle args)))","user":"4eb5750a535d7eef30807366"},{"problem":144,"code":"(fn f \n  [x & fs]\n  (cons x (lazy-seq (apply f ((first fs) x) (conj (vec (rest fs)) (first fs))))))","user":"5e12327ee4b099d064962fe5"},{"problem":144,"code":"(fn applyX [n & fs] (\n(fn applyRec [i n fs fslength]\n\t(let [\n\t\tf (get fs (mod i fslength))\n\t\tnewN (f n)\n\t\t]\n\t\t(lazy-seq (cons n (applyRec (inc i) newN fs fslength))\n\t\t)\n)) 0 n (vec fs) (count (vec fs))))","user":"568820e8e4b0dcc4269f4067"},{"problem":144,"code":"(fn [val & funs]\n  (letfn [(temp-fn [current-val all-funs current-funs]\n            (cond\n              (empty? current-funs) (temp-fn current-val all-funs all-funs)\n              true (let [next-fun (first current-funs)\n                         rest-funs (rest current-funs)]\n                     (lazy-seq (cons current-val (temp-fn (next-fun current-val) all-funs rest-funs))))))]\n    (temp-fn val funs funs)))","user":"502a5e59e4b09e8f859a9fbc"},{"code":"(fn [v & f]\n    (letfn [(t [w] \n              (lazy-seq\n                (let [[_ & r] (reduce #(conj % (%2 (last %))) [w] f)]\n                  (concat r (t (last r))))))]\n      (cons v (t v))))","problem":144,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn [i & fs]\n  (map first \n    (iterate \n      (fn [[v f]] \n        [((first f) v) (rest f)]) \n      [i (cycle fs)])))","problem":144,"user":"4ee4f4a9535d1385b2869d85"},{"problem":144,"code":"(fn oscilrate [v & fs] \n  (let [helper (fn helper [v fs] (lazy-seq (cons v (helper ((first fs) v) (rest fs)))))]\n    (helper v (cycle fs))))","user":"5609d328e4b05f002753deee"},{"code":"(fn [v & g]\n  (reductions #(%2 %) v (cycle g)))","problem":144,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [v & fs]\n  (letfn [(oscilrate [next-val funcs]\n            (cons next-val\n                 (lazy-seq (oscilrate ((first funcs) next-val) (rest funcs)))))]\n  (oscilrate v (cycle fs))))","problem":144,"user":"51d08d67e4b067c365486351"},{"problem":144,"code":"(fn osc [r & f]\n  (reductions (fn[a b](b a)) r (cycle f)))","user":"538e29d1e4b0b51d73faae80"},{"problem":144,"code":"(fn oscilrate [x f & fs] \n    (lazy-seq \n     (cons x \n           (apply oscilrate (cons (f x) (conj (into [] fs) f))))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":144,"code":"(fn go [x & [f & fs]]\n  (cons x (lazy-seq (apply go (f x) (concat fs [f])))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [x & l]\n  (reductions #(%2 %) x (cycle l)))","problem":144,"user":"4ee82539535d93acb0a66878"},{"problem":144,"code":"(fn myf [initial f & fs]\n   (lazy-seq (cons initial (apply myf (f initial) (conj (vec fs) f)))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":144,"code":"(fn [s & fs]\n  (reductions #(%2 %) s (cycle fs)))","user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn oscit\r\n  [value & funcs]\r\n\t\t(lazy-seq (cons value (apply oscit ((first funcs) value) (rest (cycle funcs))))))","problem":144,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn[iv & fs] \n  (map first (iterate  \n    (fn ro [[iv fs]] [ ((first fs) iv) (concat (drop 1 fs)\n      [(first fs)])]) [iv fs] )))","problem":144,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn oscilrate [v & [f & fs]]\n  (cons v\n        (lazy-seq\n         (apply oscilrate\n                (f v)\n                (concat fs [f])))))","problem":144,"user":"510db6cde4b078ea71921145"},{"code":"(fn oscilrate [ini & fns]\n  (let [r (reductions (fn [acc f] (f acc)) ini fns)]\n    (concat r \n      (lazy-seq \n        (rest (apply oscilrate (cons (last r) fns)))))))","problem":144,"user":"4f569218e4b0a7574ea71826"},{"problem":144,"code":"(fn [x & fs]\n  (letfn [(go [x [f & fs]]\n            (lazy-seq\n              (cons (f x)\n                    (go (f x) (conj (vec fs) f)))))]\n    (lazy-seq\n      (cons x\n            (go x fs)))))","user":"4ec1b090535dfed6da9c6db5"},{"problem":144,"code":"(fn oscilrate [v & fs]\n    (reductions #(%2 %1) v (cycle fs)))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn oscilrate [x & fs]\n  (cons x (lazy-seq (apply oscilrate ((first fs) x) (rest (cycle fs))))))","problem":144,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn osc [v & fns]\n  (reductions #(%2 %) v (cycle fns)))","problem":144,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [v & p]\n  (let [s (fn f [v [c & r]]\n    (lazy-seq (cons v (f (c v) (conj (vec r) c)))))]\n  (s v p)))","problem":144,"user":"4e16bdef535d04ed9115e7e9"},{"problem":144,"code":"(fn [x0 & fns]\n  (letfn [(internal [a fns]\n            (lazy-seq (let [fa ((first fns) a)]\n                        (cons fa (internal fa (rest fns))))))]\n    (lazy-seq (cons x0 (internal x0 (cycle fns))))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"code":"(fn  [v & a]\n  (let [o2 (fn o2 [v f & fs] \n             (let [nv (f v)]\n               (lazy-seq (cons v (apply o2 (cons nv fs))))))]\n    (apply o2 (lazy-seq (cons v (cycle a))))))","problem":144,"user":"52ba43d0e4b07a9af57922cd"},{"problem":144,"code":"(fn oscilrate [val & fs]\n  (lazy-seq\n    (cons val\n          (apply oscilrate (cons ((first fs) val) (concat (rest fs) [(first fs)]))))))","user":"4fe49706e4b0e8f79898feb7"},{"problem":144,"code":"(fn o [i f & r]\n  (cons i (lazy-seq (apply o (concat [(f i)] r [f])))))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn [a & f*]\n  (letfn [(R [s]\n            (if (empty? s) (R f*)\n                (cons (first s) (lazy-seq (R (rest s))))))\n          (O [a fs]\n            (cons a (lazy-seq (O ((first fs) a) (rest fs)))))]\n    (O a (R f*))))","problem":144,"user":"51a4416ae4b0def3c5c5868c"},{"problem":144,"code":"(fn oscilrate [num & fs]\n  (let [new-num ((first fs) num)\n        rotated-fs (conj (into [] (rest fs)) (first fs))\n        ]\n  \t(lazy-seq (cons num (apply oscilrate (into [new-num] rotated-fs))))  \n    )\n  \n  \n  ) ; fn","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn fn144 [i & fs] (lazy-seq (concat (list i) (apply fn144 ((first fs) i) (concat (rest fs) (list (first fs)))))))","problem":144,"user":"4f0e4ebd535d0136e6c22322"},{"code":"(fn [v & fs]\n       \n       (let [fs (cycle fs)]\n         (letfn [(gen [v gs]\n                   (cons\n                     v\n                     (lazy-seq (gen ((first gs) v) (next gs)))))]\n            (gen v fs)))\n       \n       )","problem":144,"user":"4ff3df0fe4b0678c553fc355"},{"problem":144,"code":"(fn osc [v & [f & fs]]\n  (lazy-seq (cons v (apply osc (f v) (conj (vec fs) f)))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":144,"code":"(fn [val & fs]\n  (letfn [(val-seq [val fs]\n            (cons val (lazy-seq\n                       (let [val ((first fs) val)\n                             fs  (rest fs)]\n                         (val-seq val fs)))))]\n    (let [fs (cycle fs)]\n      (val-seq val fs))))","user":"55586905e4b0deb715856e2b"},{"problem":144,"code":"(fn oscilrate\n  [init-value & vec-ops]\n  (cons init-value\n  (\n   (fn inner-oscilrate\n     [value vec-ops index index-fun]\n     (let [new-val ((get vec-ops (index-fun index)) value)]\n       (lazy-seq \n        (cons new-val \n              (inner-oscilrate new-val vec-ops (+ index 1) index-fun)))))\n   init-value \n   (into [] vec-ops) \n   0 \n   #(mod % (count vec-ops)))))","user":"56f8055ee4b08e7d20b96835"},{"problem":144,"code":"(fn gen [start & args]\n   (lazy-seq \n     (let [new-val ((first args) start)\n           args (->> args cycle (drop 1) flatten)]\n       (cons start (apply gen new-val args)))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn oscilrate [value & funs]\n  (let [fs (cycle funs)]\n    (reductions\n     (fn [res fun]\n       (fun res))\n     value\n     fs)))","problem":144,"user":"51a768e0e4b0da5f497bde84"},{"problem":144,"code":"(fn my-iterate [init & fs]\n            (reductions (fn [val f] (f val)) init (cycle fs)))","user":"55e6c3f5e4b050e68259b48c"},{"code":"(fn self [x & fs]\n  (lazy-seq (cons x (apply self ((first fs) x) (concat (rest fs) (list (first fs)))))))","problem":144,"user":"52afbc69e4b0c58976d9acc0"},{"code":"(fn oscilrate [i & funcs]\n  (lazy-seq (cons i (apply oscilrate ((first funcs) i) (concat (rest funcs) [(first funcs)])))))","problem":144,"user":"4faec810e4b081705acca24e"},{"code":"(fn oscilrate [ini & fs]\n  (reductions #(%2 %1) ini (cycle fs)))","problem":144,"user":"531c0619e4b08068f379ed98"},{"problem":144,"code":"(fn it [x & r] (reductions #(%2 %) x (cycle r)))","user":"6011b89ee4b074f607df66bc"},{"problem":144,"code":"(fn oscilrate [n f & fs]\n  (lazy-seq (cons n (apply oscilrate (f n) (concat fs [f])))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":144,"code":"(fn p144 [x & fs]\n  (lazy-seq\n    (cons x (apply (partial p144 ((first fs) x)) (conj (vec (rest fs)) (first fs))))))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn o [v h & t]\n  (lazy-seq (cons v (apply o (h v) (conj (vec t) h)))))","problem":144,"user":"4f725201e4b07046d9f4f02f"},{"problem":144,"code":"(fn [initial-value & ops]\n  (reductions (fn [acc op]\n                (op acc))\n              initial-value\n              (cycle ops)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn [v & fns] (reductions #(%2 %1) v (cycle fns)))","problem":144,"user":"518696c1e4b0c40be512d708"},{"code":"#((fn p [i [u & v]] (lazy-cat [i] (p (u i) v)))\n      % (cycle %&))","problem":144,"user":"4dae916eedd6309eace4d155"},{"code":"(fn osc [n & fns]\n  (letfn [(f [n arg] (if (empty? arg) (f n fns)\n                         (let [f1 (first arg)]\n                           (lazy-seq (cons (f1 n) (f (f1 n) (rest arg)))))))]\n    (cons n (f n fns))))","problem":144,"user":"518ccf6be4b05e6c8537e386"},{"problem":144,"code":"(fn [arg & fns]\n    (reductions #(%2 %) arg (cycle fns)))","user":"58db3c5ae4b0a4d5acaab677"},{"code":"(fn oscilrate [a & fs]\n  (let [fss (flatten (repeat fs))]\n\t\t(lazy-seq (reductions #(%2 %1) a fss))))","problem":144,"user":"501c1492e4b086d93747d180"},{"problem":144,"code":"(fn f [x & r]\n  (let [y (reductions #(%2 %) x r)]\n    (lazy-cat (butlast y) (apply f (last y) r))))","user":"4e7dfab0535db169f9c796f9"},{"problem":144,"code":"(fn [init & fs]\n  (letfn [(osc [init inf-fs]\n               (lazy-seq\n                (cons init \n                      (osc ((first inf-fs) init) \n                           (next inf-fs)))))]\n   (osc init (cycle fs))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [x & fs]\n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"4e8f1ac6535d65386fec2146"},{"problem":144,"code":"(fn oscilrate [v & fns]\n  (letfn [(rotate [coll]\n            (concat (rest coll) (list (first coll))))]\n    (lazy-seq (cons v (apply oscilrate ((first fns) v) (rotate fns))))))","user":"5169d422e4b051e2a73aba53"},{"code":"(fn osc [x f & fs]\n  (lazy-seq\n     (cons x (apply osc (f x) (concat fs [f])))))","problem":144,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn [x & func]\n         (\n          (fn ! [el coll]\n            (cons el\n                  (lazy-seq (! ((first coll) el)\n                               (if (empty? (rest coll))\n                                 func\n                                 (rest coll))\n                               ))\n                  )) x func)\n         )","problem":144,"user":"4ea31da2535d7eef308072c1"},{"problem":144,"code":"#((fn o [v [f & r]]\n             (cons v (lazy-seq (o (f v) r)))) % (cycle %&))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn [n & r]\n  (reductions\n   #(%2 %)\n   n\n   (cycle r)))","problem":144,"user":"519136e9e4b0f8ef0be96c01"},{"problem":144,"code":"(fn appl [x & fs]\n  (let [cycle-fs (cycle fs)\n        lappl (fn lappl [x [f & fs]]\n                (let [val (f x)]\n                  (cons val (lazy-seq (lappl val fs)))))]\n    (cons x (lappl x cycle-fs))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn [v & op] (reductions #(%2 %) v (cycle op)))","problem":144,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":"(fn osc [x & fs]\n  (let [f (first fs)\n        rotated-fs (conj (vec (rest fs)) f)]\n    (cons x\n        (lazy-seq\n         (apply osc (f x) rotated-fs)))))","problem":144,"user":"5269c150e4b03e8d9a4a71f8"},{"code":"; lol\n(fn [v & c] (cons v ( \n    (fn h [n c]\n    (lazy-seq (cons ((first c) n)\n    (h ((first c) n) (rest c)))))\n    v (cycle c))))","problem":144,"user":"4ef48422535dced4c769f236"},{"code":"(fn oscilrate [x & fs]\n  (letfn [(oscillator [x [f & frest]]            \n              (lazy-seq (cons x (oscillator (f x) frest))))]\n    (oscillator x (cycle fs))))","problem":144,"user":"50812debe4b01a93d3f38e4c"},{"problem":144,"code":"(fn [n & fs] \n  (map first (iterate \n               (fn [[n [h & r]]] [(h n) r]) \n               [n (cycle fs)])))","user":"58f44c07e4b0438e51c2ceb7"},{"code":"(fn o [v & fs]\r\n  (lazy-seq (cons v (apply o ((first fs) v) (rest (cycle fs))))))","problem":144,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn p144 [n & fl]\n  (letfn [(pfn [num fl]\n            (cons num \n                  (lazy-seq (pfn\n                             ((first fl) num)\n                             (rest fl)))))]\n    (pfn n (cycle fl))))","problem":144,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn oscilrate [x & fs]\n  (let [fs (cycle fs)]\n    (reductions (fn [x f] (f x)) x fs)))","problem":144,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":144,"code":"(fn f-iter [v & fs]\n  (letfn [(rotate [coll] (concat (rest coll) [(first coll)]))\n          (oscinext [[v fs]] (vector ((first fs) v) (rotate fs)))]\n    (map first (iterate oscinext [v fs]))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":144,"code":"(fn [v & a]\n            ((fn o [v i]\n               (cons v (lazy-seq (o ((nth a (mod i (count a))) v) (+ i 1)))))\n             v 0))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":144,"code":"(fn [iv & fns]\n  (let [fns (cycle fns)\n        s (fn s [v fns]\n            (let [new-val ((first fns) v)]\n              (lazy-seq (cons new-val (s new-val (rest fns))))))]\n    (lazy-seq (cons iv (s iv fns)))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":144,"code":"(fn [n & funcs] (reductions #(%2 %1) n (cycle funcs)))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn oscilrate [ginit & gfns]\n  (letfn [(osfn [init & fns]\n            (lazy-seq \n             (if (empty? fns)\n              (cons init (apply osfn ((first gfns) init) (rest gfns)))\n              (cons init (apply osfn ((first fns) init) (rest fns))))))]\n    (apply osfn ginit gfns)))","problem":144,"user":"4fdf566fe4b05e33b9224f99"},{"problem":144,"code":"(fn t [n & fns]\n  (lazy-seq \n    (cons n (let [f (first fns)]\n              (apply t (f n) (concat (rest fns) [f]))))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":144,"code":"(fn [v & fns]\n  (letfn [(nextIdx [i] (rem i (count fns)))\n          (nextFn [i] (nth fns (nextIdx i)))\n          (applyNext [i v] ((nextFn i) v))\n          (generator [i v] (cons (applyNext i v) (lazy-seq (generator (inc i) (applyNext i v)))))]\n    (cons v (lazy-seq (generator 0 v)))))","user":"52570aeae4b0541d1855ba42"},{"problem":144,"code":"(fn solve [v & fns] (lazy-seq (cons v (apply solve ((first fns) v) (concat (rest fns)\n                                                                           (take 1 fns))))))","user":"54c13b87e4b0ed20f4ff6f20"},{"code":"(fn e [i & [g & f]]\n  (lazy-seq\n      (cons i\n        (apply e (g i) (concat f [g])))))","problem":144,"user":"4e96557d535dbda64a6f6b43"},{"problem":144,"code":"(fn f[value & funcs]\n  ( lazy-seq\n    ( concat [value] \n      (apply f (cons ((first funcs) value) (concat (rest funcs) (list (first funcs))))))))","user":"5b3aa98be4b02d533a91bbca"},{"problem":144,"code":"(fn oscilrate [init & fs]\n  (reductions (fn [result input]\n                (apply input [result]))\n              init \n              (cycle fs)))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [st & f] (reductions #(%2 %1) st (cycle f)))","problem":144,"user":"4fc0853ae4b081705acca327"},{"problem":144,"code":"(fn [n & f]\n  (reductions #(%2 %1) n (cycle f)))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":144,"code":"(fn oscilrate [init-val & fns]\n  (let [intermediate-vals (reductions #(%2 %1) init-val fns)\n        last-val (last intermediate-vals)]\n    (lazy-cat intermediate-vals (rest (apply (partial oscilrate last-val) fns)))))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn  [x & fs]\n  (letfn [\n        ( g [ i fx ]\n            (let [ r ((first fx) i) ]\n                (cons i (lazy-seq ( g r (rest fx )))))) ]\n    (g x (cycle fs))))","problem":144,"user":"518c5236e4b087e178201de0"},{"problem":144,"code":"(fn [i & s]\n  (map first (iterate (fn [[i [f & r]]] [(f i) r]) [i (cycle s)]))\n  )","user":"51a058dae4b0b292b01ee3f3"},{"code":"(fn f [n & fs]\n  (cons n\n        (lazy-seq\n          (apply f ((first fs) n) \n                 (concat (rest fs) [(first fs)])))))","problem":144,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn o [i f1 & f]\n  (cons\n   i\n   (lazy-seq\n    (apply o (concat [(f1 i) (first f)]\n                     (conj (vec (rest f)) f1))))))","problem":144,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn f144 [v & f]\n    (let [x (count f)]\n        (map second (iterate #(vector\n                                 (inc (first %))\n                                 ((nth f (rem (first %) x)) (second %)))\n                             [0 v]))))","problem":144,"user":"528a3e14e4b0239c8a67ae72"},{"problem":144,"code":"(fn oscilrateBin\n  [v & fs]\n  (letfn [(osc-helper [value functions i]\n            (cons\n              value\n              (lazy-seq\n                (osc-helper ((nth functions i) value) functions (mod (inc i) (count functions))))\n              )\n\n            )\n          ]\n    (osc-helper v fs 0)))","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":144,"code":"(fn osc\n  ([initial-value & functions] [initial-value] (osc {:pointer 0\n                                                           :all-functions functions\n                                                           :curr-value initial-value\n                                                           :function-count (count functions)}))\n  ([m] (let [computed-value ((nth (:all-functions m) (:pointer m)) (:curr-value m))]\n         \n         (lazy-seq (cons (:curr-value m)\n                         (osc  (assoc m :pointer \n                                                 (if (= (:pointer m) (dec (:function-count m)))\n                                                   0\n                                                   (inc (:pointer m)))\n                                         :curr-value computed-value)))))))","user":"5bab31f1e4b0a20761a23471"},{"code":"(fn ocilrate [n & [f & fns]]\n  (cons n (lazy-seq (apply ocilrate (f n) (concat fns [f])))))","problem":144,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [initial-val & fns]\n  (map first (iterate (fn [[val n]]\n                        (let [f (nth fns n)]\n                          [(f val) (mod (inc n) (count fns))]))\n                      [initial-val 0])))","problem":144,"user":"51789dfae4b03d69594194d7"},{"problem":144,"code":"(fn [n & fs] (reductions #(%2 %1) n (apply concat (lazy-seq (repeat fs)))))","user":"531f1e63e4b08068f379edc2"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(iter [v & fs]\n                (let [firstfs (first fs)\n                      newv (firstfs v)]\n                (lazy-cat [newv] (apply iter (concat [newv] (rest fs) [firstfs])))))]\n  (lazy-cat [v] (apply iter (concat [v] fs)))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":144,"code":"(fn osc[x & fs]\n            (cons x (lazy-seq (apply osc ((first fs) x) (conj (vec (rest fs)) (first fs))))))","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn [x & fns]\n    (letfn [(rotate [q]\n              (conj (pop q) (peek q)))\n            (helper [x fns]\n              (cons x (lazy-seq (helper ((peek fns) x) (rotate fns)))))]\n      (let [fns (into clojure.lang.PersistentQueue/EMPTY fns)]\n        (cons x (lazy-seq (helper ((first fns) x) (rotate fns)))))))","problem":144,"user":"50bca033e4b0594b91591c5d"},{"problem":144,"code":"(fn [init & fs] (reductions #(%2 %1) init (cycle fs)))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [start & fns]\n\t(reductions #(%2 %1) start (cycle fns)))","problem":144,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [x & args]\r\n  (reductions #(%2 %) x (cycle args)))","problem":144,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(fn osc [n & args]\n    (if (number? (first args))\n      (let [i (first args) v ((nth (last args) (first args)) n)]\n        (cons v (lazy-seq (osc v (mod (inc i) (count(last args))) (last args))))\n       )\n      (cons n (lazy-seq (osc n 0 args)))\n     )\n   )","problem":144,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":144,"code":"(fn [i & fns]\n   ((fn f [a fns]\n      (cons a (lazy-seq (f ((first fns) a) (concat (rest fns) [(first fns)])))))\n    i fns))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn [v & f] (reductions #(%2 %) v (cycle f)))","problem":144,"user":"4f296a80e4b0d6649770a02a"},{"problem":144,"code":"(fn [x & fs]\n  (map last (reductions\n    (fn [acc e]\n      (let [f (nth fs (rem (dec (count acc)) (count fs)))]\n        (conj acc (f (last acc)))))\n    [x]\n    (range))))","user":"5c73b8bae4b0fca0c16227ba"},{"code":"(fn\t[init & fs]\t(reductions (fn [a f] (f a)) init (cycle fs)))","problem":144,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn f [x & fs]\n  (map first\n       (iterate\n         (fn [[x fsi]]\n           (if (empty? fsi)\n             [((first fs) x) (rest fs)]\n             [((first fsi) x) (rest fsi)]))\n         [x fs])))","problem":144,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn oscilrate [init & funcs]\n  (letfn [(next-idx [idx]\n            (mod (inc idx) (count funcs)))\n          (oscilrate-inner [init funcs func-idx]\n            (cons init (lazy-seq (oscilrate-inner\n                                   ((nth funcs func-idx) init)\n                                   funcs\n                                   (next-idx func-idx)))))]\n    (oscilrate-inner init funcs 0)))","problem":144,"user":"53070615e4b02e821686979e"},{"code":"(fn osc [x & fns] \n  (cons x (lazy-seq (apply osc ((first fns) x) (concat (rest fns)\n                                                       (list (first fns)))))))","problem":144,"user":"52e17e66e4b09f7907dd1423"},{"problem":144,"code":"(fn oscilrate [init & [f :as fs]]\n  (cons init (lazy-seq (apply oscilrate\n                              (f init)\n                              (rest (cycle fs))))))","user":"54d341f7e4b0e8a36923e603"},{"problem":144,"code":"(fn [init & fs]\n  ((fn lp [val [f & more]]\n     (lazy-seq\n       (cons val (lp (f val) more))))\n   init (cycle fs)))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn [n & fs] \n  (reductions #(%2 %) n (cycle fs)))","problem":144,"user":"50705886e4b07bd6ad9b9f2a"},{"code":"(fn [i & funcs] (reductions #(%2 %1) (cons i (cycle funcs ))))","problem":144,"user":"50956c2be4b087f34d351ab2"},{"problem":144,"code":"(fn oscilrate [init & fs]\n  (reductions (fn [v f]\n                (f v))\n              init (cycle fs)))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [x0 & fs]\n  (reductions (fn [acc f] (f acc)) x0 (cycle fs)))","problem":144,"user":"4fba7d1ee4b081705acca2e0"},{"problem":144,"code":"(fn [iv & f]\n  (reductions (fn [v f] (f v)) iv (cycle f)))","user":"5f419985e4b0955706451fab"},{"code":"(fn [i & f] (cons i (apply (fn g [a & b] (let [c ((first b) a)] (lazy-seq (cons c (apply g c (rest b)))))) i (cycle f))))","problem":144,"user":"4eb13d60535d7eef3080733f"},{"problem":144,"code":"(fn o [v & fs]\n  (let [v' ((first fs) v)\n        fs' (take (count fs) (rest (cycle fs)))]\n    (cons v (lazy-seq (apply o v' fs')))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn iter [x f & fs]\n  (lazy-seq\n   (cons x (apply iter (f x) (concat fs [f])))))","problem":144,"user":"510d9d61e4b078ea71921141"},{"code":"(fn osc-iterate [x & fs]\n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn [a & b] (cons a\n  \n((fn r [x y] \n  (cons ((first y) x) \n        (lazy-seq (r \n                   ((first y) x) \n                   (concat (rest y) [(first y)]))))) a b)\n  ))","problem":144,"user":"513b77f3e4b00f740c76c403"},{"problem":144,"code":"(fn [i & fs]\n    (reductions (fn [coll f] (f coll)) i (cycle fs)))","user":"538ca203e4b0b51d73faae5f"},{"problem":144,"code":"(fn o [v f & x]\n  (lazy-seq\n    (cons v (apply o (f v) (conj (into [] x) f)))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn [x & f] \n  ((fn g [x [h & t]] \n     (lazy-seq (cons x (g (h x) (or t f))))) x f))\n\n#_\n\n(fn [x & f] (reductions #(%2 %) x (cycle f)))","problem":144,"user":"4ef49c2c535dced4c769f238"},{"problem":144,"code":"(fn oscilrate [n f & funcs]\n  (cons n\n    (lazy-seq\n      (apply oscilrate\n             (cons (f n) (concat funcs [f]))))))","user":"54448e84e4b032a45b869393"},{"problem":144,"code":"(fn [x & args]\n  (reductions #(%2 %) x (cycle args)))","user":"53976599e4b0b51d73faaeea"},{"problem":144,"code":"#((fn f [v fs] (lazy-seq (cons v (f ((first fs) v) (rest fs))))) %1 (cycle %&))","user":"506ba58be4b0eda3100c090b"},{"problem":144,"code":"(fn [start & functions] (reductions (fn [result function] (function result)) start (cycle functions)))","user":"57f904c5e4b0d3187e900936"},{"problem":144,"code":"(fn [a & f]\n  (let [c (count f)\n        osc (fn cocot [b i]\n              (lazy-seq (cons b (cocot ((nth f i) b)(if (= i (dec c)) 0 (inc i))))))]\n    (osc a 0)))","user":"564d3169e4b0284900eef67c"},{"code":"#((fn o [n1 [f & fns]]\n      (cons n1 (lazy-seq (o (f n1) fns))))\n    % (cycle %&))","problem":144,"user":"4e705861535d5021c1a89635"},{"problem":144,"code":"(fn osc\n  [init & fs]\n  (lazy-seq (cons init (apply osc ((first fs) init) (take (count fs) (drop 1 (cycle fs)))))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [a & fs]\r\n  ((fn hoge [b m]\r\n     (lazy-seq (cons b (hoge ((first m) b) (rest m)))))\r\n   a\r\n   (cycle fs)))","problem":144,"user":"507437c2e4b054001656acd0"},{"problem":144,"code":"(fn f [a d & [g & r]]\n\t(lazy-seq (cons a (apply (partial f (d a) g) (conj (vec r) d)))))","user":"53973e7be4b0b51d73faaee6"},{"problem":144,"code":"(fn [x & fs]\n  (reductions #(%2 %) x (cycle fs)))\n\n\n;(fn oscilate [x & fs]\n;    (letfn [(update [[x [f & fs]]]\n;                      [(f x) fs])]\n;      (map first (iterate update [x (cycle fs)]))))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(letfn [(oscilrate [val & fns]\n          (lazy-seq (cons val\n                          (apply oscilrate ((first fns) val)\n                                 (conj (vec (rest fns))\n                                       (first fns))))))]\n  oscilrate)","problem":144,"user":"5014754de4b094324338f8e5"},{"code":"(fn __ [x f & fs]\n  (cons x (lazy-seq (apply __ (f x) (conj (vec fs) f)))))","problem":144,"user":"4db4714f535dc0f10411755a"},{"problem":144,"code":"(fn __\n  [n & funcs]\n   (reductions #(%2 %) n (cycle funcs)))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [x & fs]\n   (cons x\n     ((fn r [x1 fs1]\n        (let [y ((first fs1) x1)]\n          (cons y (lazy-seq (r y (rest fs1))))))\n     x (cycle fs))))","problem":144,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn oscilrate [val & [head & tail]]\n  (cons val\n        (lazy-seq (apply oscilrate\n                         (head val)\n                         (concat tail [head])))))","problem":144,"user":"530578ede4b0d8b024fd3760"},{"code":"(fn oscilrate [x & [fst & rst]]\n  (lazy-seq\n    (cons\n      x\n      (apply oscilrate (fst x) (conj (vec rst) fst)))))","problem":144,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":144,"code":"(fn oscilrate [init & funs]\n  (map first\n    (iterate (fn [[x fs]]\n                 [((first fs) x)\n                  (rest fs)])\n               [init (cycle funs)])))","user":"529e3a4fe4b04e0c58e87b92"},{"problem":144,"code":"(letfn [(t [val f & fns]\n          (x val f fns))\n        (x [val f fns]\n          (cons val (lazy-seq (x (f val) \n                                 (first fns)\n                                 (concat (rest fns) (list f))))))]\n  t)","user":"538e36c7e4b0b51d73faae81"},{"problem":144,"code":"(fn [x & y]\n  (let [f2 (fn f2 [x y i]\n             (lazy-seq\n              (cons x (f2 ((nth y (mod i (count y))) x) y  (inc i)))))]\n    (f2 x y 0)))","user":"566d71b1e4b0a866af6896ca"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (reductions #(%2 %1) v (cycle fs)))","user":"53b39d82e4b047364c0444a6"},{"problem":144,"code":"(fn m [ & args] \n         (lazy-seq\n           (let [calc ((second args) (first args))\n                  restArgs (rest args)\n                  fRestArgs (first restArgs)\n                  restRestArgs (rest restArgs)\n                  rotatedArgs (conj (vec restRestArgs)  fRestArgs)]\n              (cons (first args) (apply m calc rotatedArgs)))))","user":"5d0cf1c8e4b0cc9c91588246"},{"code":"(fn [v & fs]\n  ((fn f2 [v fs]         \n     (cons v (lazy-seq\n              (f2 (apply (first fs) [v]) (rest fs)))))\n   v (cycle fs)))","problem":144,"user":"4fc3a72ae4b081705acca342"},{"problem":144,"code":"(fn [a & b]\n   (lazy-cat [a] ( apply (fn s [v & funs]\n                   (let [ lp (loop [x [v] fs funs]\n                               (if  (empty? fs)\n                                 x\n                                 (recur (conj x ((first fs) (last x)))  (rest fs))))]\n\n                     (lazy-seq (concat (rest lp)  (apply s (last lp) funs))))\n\n                      )a b)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":144,"code":"(fn [value & fs]\n  (reductions (fn [v f] (f v))\n                value (cycle fs)))","user":"56ac81ace4b03c432f187347"},{"code":"(fn osc [v & funcs]\n  (lazy-seq\n    (cons v (apply osc ((first funcs) v)\n                   (conj (vec (rest funcs)) (first funcs))))))","problem":144,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":144,"code":"(fn f [v & fns]\n  (lazy-seq\n   (let [result (reductions #(%2 %1) v fns)]\n     (concat (butlast result) (apply f (last result) fns)))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":144,"code":"(fn [init & funs] \n            ((fn rek [fst fns] \n               (lazy-seq \n                (cons fst \n                      (rek ((first fns) fst) \n                           (rest fns) ))))\n            init \n            (flatten (repeat funs)) ))","user":"549375e4e4b0b312c081ff4e"},{"problem":144,"code":"(fn [v & ops]\n    ((fn rep [last-value ops n]\n        (lazy-seq\n         (cons last-value (rep ((ops n) last-value) ops (mod (inc n) (count ops))))))       \n      v (vec ops) 0))","user":"559b55d6e4b066d22e731f54"},{"problem":144,"code":";(fn o [& [n f & r]]\n;  (lazy-seq (cons n\n;                  (apply o\n;                         (cons (f n) (concat r (list f)))))))\n\n(fn [init & fs]\n  (reductions #(%2 %) init (cycle fs)))","user":"57035ccfe4b08d47c97781ef"},{"problem":144,"code":"(fn oscilrate [value & functions]\n  (letfn [(aux [v fs]\n               (lazy-seq\n                (let [f-list fs\n                      f (first f-list)]\n                  (cons (f v) (aux (f v) (conj (vec (rest f-list)) f))))))]\n     (cons value (aux value (into [] functions)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [initial-value & funs]\n  (let [inner (fn oscilrate [current-value [first-fun & other-funs]]\n                (let [next-value (first-fun current-value)]\n                  (cons next-value (lazy-seq (oscilrate next-value other-funs)))))]\n    (cons initial-value (inner initial-value (cycle funs)))))","problem":144,"user":"4f2e0369e4b0d6649770a064"},{"problem":144,"code":"(fn [x & fs]\n  (reductions #(%2 %1)\n              x\n              (cycle fs)))","user":"54848141e4b0e286459a119e"},{"problem":144,"code":"(fn osc [i & fns]\n  (letfn\n    [(inner [i fns]\n      (cons i (lazy-seq (inner ((first fns) i) (rest fns)))))\n    ]\n    (inner i (cycle fns))))","user":"551afdf8e4b07993ea3788cb"},{"problem":144,"code":"(fn [x & ops]\n  (reductions (fn [v op] (op v)) x (cycle ops)))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":144,"code":"(fn oscilrate [v & ops]\n  (reductions #(%2 %1) v (apply concat (repeat ops))))","user":"56897739e4b0dcc4269f407d"},{"problem":144,"code":"(fn p-144 [val & fns]\n  (reductions (fn [v f]\n                (f v))\n              val (cycle fns)))","user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn x [value f & fs]\n    (lazy-seq\n      (cons value (apply x (f value) (conj (vec fs) f)))))","problem":144,"user":"521b9f92e4b0c4ef0be8304c"},{"code":"(fn [z & fs]\r\n  ((fn impl [x [f & fs]]\r\n    (lazy-seq\r\n      (cons x\r\n        (impl (f x) fs))))\r\n    z (cycle fs)))","problem":144,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn \n [v & fns]\n (reductions #(%2 %1) v (cycle fns)))","problem":144,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn [n & fs]\n  (mapcat identity\n          (iterate\n           (fn [c]\n             (rest (reduce\n               (fn [acc f]\n                 (conj acc (f (last acc)))) [(last c)] fs))) [n])))","problem":144,"user":"52c25645e4b07a9af579237d"},{"code":"(fn ff[i & fns]\n  ;(prn :i i :fns fns)\n\t(lazy-seq\n\t\t(let [f1 (first fns)\n\t\t\t  frest (concat (rest fns) [f1])\n\t\t      v (f1 i)] \n\t\t\t;(prn :v v :f1 f1 :frest frest)\n\t\t\t(cons i (apply ff v frest)))))","problem":144,"user":"4f1fd734535d64f6031464a5"},{"code":"#(reductions (fn [x f] (f x)) % (cycle %&))","problem":144,"user":"4db858d1535d1e037afb218c"},{"problem":144,"code":"(fn os [x f & ts]\n (lazy-seq\n  (cons\n   x\n   (apply os\n    (f x)\n    (concat ts [f])))))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn oscil [x & f]\n (lazy-seq\n (cons x\n (apply oscil (concat [((first f) x)](drop 1 f) [(first f)])))\n ))","problem":144,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [n & fns]\n  (reductions #(%2 %1) n (cycle fns)))","problem":144,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn fx [i f & fs]\n  (cons i (lazy-seq (apply fx (concat (cons (f i) fs) [f])))))","problem":144,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn F [x f & fs] (cons x (lazy-seq (apply F (f x) (concat fs [f])))))","problem":144,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [x & fs] (letfn [(osc [v l] (let [v1 ((first l) v)] (lazy-seq (cons v1 (osc v1 (if (empty? (rest l)) fs (rest l)))))))]                                                                     \n                               (lazy-seq (cons x (osc x fs)))))","problem":144,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn oscilate [v & fns]\n   ((fn generate [curr fns]\n     (lazy-seq\n      (cons curr \n            (generate ((first fns) curr) (next fns)))))\n    v (cycle fns)))","problem":144,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":144,"code":"#((fn o [n fs] \n    (cons n (lazy-seq \n             (o ((first fs) n)\n                (rest fs))))) %1 (cycle %&))","user":"4eb97234535dfed6da9c6d53"},{"problem":144,"code":"(fn p144 [v & fns]\n  (lazy-seq\n    (cons v \n         (apply p144 \n                (cons\n                   ((first fns) v)\n                   (concat (rest fns) [(first fns)]))))))","user":"53c1b787e4b00fb29b221266"},{"problem":144,"code":"(fn [init & funcs]\n   (letfn [(another [v fs]\n             (cons v\n                   (lazy-seq\n                    (when-not (empty? fs)\n                      (another ((first fs) v) (rest fs))))))]\n     (another init (cycle funcs))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn oscilrate [init & fs]\n  (reductions #(%2 %1) init\n              (cycle fs)))","problem":144,"user":"52381b2ae4b0fae3832e99ef"},{"problem":144,"code":"(fn oscilrate [num & funcs]\n  (reductions (fn [n f] (f n)) num (cycle funcs)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(fosc [v fs]\n            (let [res (reduce (fn [[acc v] f]\n                               (let [nv (f v)]\n                                 [(conj acc nv) nv]))\n                             [[] v]\n                             fs)]\n              (concat (first res)\n                      (lazy-seq (fosc (second res) fs)))))]\n    (cons v (fosc v fs))))","user":"4ee528fb535d1385b2869d87"},{"problem":144,"code":"(fn [init & fns]\n  (letfn [(oscilate [n fnl]\n                    (lazy-seq (cons n (oscilate ((first fnl) n) (rest fnl)))))]\n    (oscilate init (cycle fns))))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [init & fns]                                                                                    \n  (cons init (apply (fn ![init & fns]                                                               \n                  (let [fncycle (cycle fns)                                                          \n                        val ((first fncycle) init)]                                                  \n                    (lazy-seq                                                                        \n                     (cons val (apply ! val (take (count fns) (rest fncycle))))                      \n                     )                                                                               \n                    )) init fns)))","problem":144,"user":"4f1d1299535d64f603146487"},{"code":"(fn [inicio & funcoes]\n  (letfn [(aplicafunc [i & [pf & of :as f]]\n                      (cons (pf i)\n                            (lazy-seq (apply aplicafunc\n                                             (pf i)\n                                             (concat of (list pf))))))]\n    (cons inicio (apply aplicafunc inicio funcoes))))","problem":144,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn [x & fs]\n  (let [repeatfs (fn fss [lfs] (lazy-seq (if (seq? lfs) (cons (first lfs) (fss (next lfs))) (fss fs))))] \n    (reductions #(%2 %1) x (repeatfs fs))))","problem":144,"user":"4e7f5a0b535db966e863cc41"},{"problem":144,"code":"(fn oscilrate\n  [init & fs]\n  (letfn [(oscilrate* [x & fs*]\n            (lazy-seq\n              (let [f (first fs*)\n                    v (f x)]\n                (cons v (apply oscilrate* v (concat (rest fs*) (list f)))))))]\n    (cons init (apply oscilrate* init fs))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn f [i & fs]\n  (let [v (reductions #(%2 %1) i fs)\n        l (last v)]\n    (lazy-cat (butlast v) (apply f l fs))))","problem":144,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn [v & f]\n    (reductions\n      #(%2 %)\n      v\n      (cycle f)))","problem":144,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn f [x & fs] (reductions #(%2 %1) x (cycle fs)))","problem":144,"user":"50310b8be4b05b7df5a0b84d"},{"problem":144,"code":"(fn [i & fs]\n  ((fn os [i cf fs]\n     (let [f (first cf)\n           rf (rest cf)]\n       (cons i (lazy-seq (os (f i) (if (seq rf) rf fs) fs))))) i fs fs))","user":"574af03ce4b02ea114799202"},{"problem":144,"code":"(fn o [init & fs]\n  (lazy-seq\n   (cons init \n         (apply o ((first fs) init) (concat (rest fs) [(first fs)])))))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn oscil [v f & fs] \n  (cons v (lazy-seq (apply (partial oscil (f v)) (conj (vec fs) f)))))","problem":144,"user":"521e8227e4b0dd19981ad082"},{"problem":144,"code":"(fn [x & funcs]\n    (let [cfs (cycle funcs)\n          oscilrate (fn oscilrate [x fs]\n                      (cons x (lazy-seq (oscilrate ((first fs) x) (rest fs)))))]\n      (oscilrate x cfs)\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [i & fs]\n                   (letfn [(iter [c n] \n                                 (cons n (lazy-seq (iter (rest c) ((first c) n)))))]\n                                 (iter (cycle fs) i)))","problem":144,"user":"4f34eb87e4b0e243712b1eba"},{"problem":144,"code":"(fn oscilrate [num & fun]\n  (lazy-seq\n    (let [infinite (fn infi [col] (concat col (lazy-seq (infi col))))\n          funs (infinite fun)]\n      (concat [num] (apply oscilrate (cons ((first funs) num) (next funs)))))))","user":"5243e37ae4b076204b44fae3"},{"problem":144,"code":"(fn oscilrate[x & fs]\n  (let[n (count fs)\n       fsvec (into [] fs)\n       go (fn go[x i]\n            (lazy-seq (cons x (go ((fsvec i) x) (mod (inc i) n)))))]\n    (go x 0)))\n\n; (fn [x & fs] (reductions #(%2 %) x (cycle fs)))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [n & fs]\n  (let [f (fn f [p i]\n          (lazy-seq\n            (cons p (f ((nth fs i) p) (if (= (count fs) (inc i)) 0 (inc i))))))]\n    (f n 0)))","problem":144,"user":"507fbd77e4b089ade05efbd3"},{"problem":144,"code":"(fn ocillating [i & fns]\n           (let [next_i ((first fns) i), next_fns (concat (drop 1 fns) [(first fns)])]\n             (lazy-seq (cons i (apply ocillating next_i next_fns)))))","user":"52fac708e4b047fd55836fff"},{"problem":144,"code":"(fn os [value & fns]\n  (reductions #(%2 %1) value (cycle fns)))","user":"524b827ce4b09eba1c0223d7"},{"problem":144,"code":"(fn [x & funs]\n  (reductions (fn [arg f] (f arg))\n              x\n              (cycle funs)))","user":"5515b138e4b055c2f668d4ed"},{"code":"(letfn [(o [x n fs] (cons x (lazy-seq (o ((nth fs (mod n (count fs))) x) (inc n) fs))))]\n  #(o % 0 %&))","problem":144,"user":"50996a38e4b0cae2931060b3"},{"code":";(fn [n & fs]\n;  (let [\n;        h (fn _h [n fs] (cons ((first fs) n) (lazy-seq (_h ((first fs) n) (concat (rest fs) [(first fs)])))))\n;        ]\n;    (cons n (h n fs))\n;  )\n;)\n(fn [n & fs] (reductions #(%2 %) n (cycle fs)))","problem":144,"user":"5323a414e4b09d4e7a9b54d1"},{"code":"(fn osc [v & fs] (reductions (fn [prev f] (f prev)) v (cycle fs)))","problem":144,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [i & fs]\n  ((fn os [i cf fs]\n    (let [f (first cf)\n          rf (rest cf)]\n         (cons i (lazy-seq (os (f i) (if (seq rf) rf fs) fs))))) i fs fs))","problem":144,"user":"4f05ea25535dcb61093f6c02"},{"problem":144,"code":";; http://www.4clojure.com/problem/144\n(fn oscilrate\n  [i & fns]\n  (cons i\n        (lazy-seq\n         (let [f (first fns)\n               newfns (concat (drop 1 fns) (take 1 fns))]\n           (apply oscilrate (f i) newfns)))))","user":"5c92105ce4b048ec896c59f7"},{"problem":144,"code":"(fn [v & args] (reductions #(%2 %) v (cycle args)))","user":"577202d2e4b0979f896515c0"},{"code":"(fn [init & fs]\n       (reductions #(%2 %1) init (cycle fs)))","problem":144,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":144,"code":"(fn oscilrate [x & fns]\n  (->> [x (cycle fns)]\n       (iterate (fn [[val remaining-fns]]\n                  [((first remaining-fns) val)\n                   (rest remaining-fns)]))\n       (map first)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":144,"code":"(fn [x & fns]\n  (let [fnlist (cycle fns)]\n    ((fn iter [x flist]\n      (lazy-seq (cons x (iter ((first flist) x) (rest flist)))))\n    x fnlist)))","user":"57ffd1a9e4b0a837a8b30c2a"},{"problem":144,"code":"(fn oscillerate [x & fs]\n  (lazy-seq\n    (let [f (first fs)\n          fcycle (concat (drop 1 fs) (take 1 fs))]\n         (cons x (apply oscillerate (f x) fcycle)))))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(fn f [x & fs] (cons x (lazy-seq (apply f ((first fs) x) (conj (vec (rest fs)) (first fs))))))","problem":144,"user":"4fb1325de4b081705acca276"},{"problem":144,"code":"(fn [x & fs]\n  (reductions (fn [a f] (f a)) x (cycle fs))\n  )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn osc [n & [f & fs]]\n    (lazy-seq (cons n (apply osc (concat [(f n)] fs [f])))))","problem":144,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [x & m]\n  (reductions #(%2 %) x (cycle m)))","problem":144,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn oscilrate [n & ops]\n  (cons n \n        (lazy-seq (apply oscilrate \n                         ((first ops) n) \n                         (concat (rest ops) [(first ops)])))))","problem":144,"user":"50d86fe2e4b01f0871336e67"},{"problem":144,"code":"(fn [x & fns] \n  (let [fns-stream (flatten (repeat fns))]\n  \t(reductions #(%2 %1) x fns-stream)))","user":"5c13da47e4b01240ff5671a6"},{"code":"(fn task-144 [a & fs]\n  (reductions #(%2 %1) a (apply concat (repeat fs))))","problem":144,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn iter [init & fs]\n  (lazy-seq\n    (let [f (first fs) r (rest fs)]\n      (cons init (apply iter (f init) (concat r [f]))))))","problem":144,"user":"52f8f4d1e4b047fd55836fde"},{"problem":144,"code":"(fn [i & fns]\n (reductions #(%2 %1) i (cycle fns)))","user":"553b0d95e4b09218d5f44fff"},{"problem":144,"code":"(fn [n & f]\n  (cons n ((fn -clj107 [x p]\n             (lazy-seq\n              (if p\n                (let [v ((first p) x)]\n                  (cons v (-clj107 v (next p))))\n                (-clj107 x f)))) n f)))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":144,"code":"(fn foo [init & fs]\n    (let [result (reduce #(conj %1 (%2 (last %1))) [init] fs)]\n      (lazy-cat\n       result\n       (rest\n        (apply foo (last result) fs)))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":144,"code":"(letfn [(o [v f & fs]\n  (let [fv (f v)]\n    (lazy-seq (cons v (apply o fv (conj (vec fs) f))))))]\n  o)","user":"53aaaf7ae4b047364c044444"},{"code":"(fn Oscilrate [init & fs]\n      (letfn[(os [init fs]\n                 (let[g (first fs)]\n                   (lazy-cat [(g init)] \n                             (os (g init) (next fs)))))]\n        (lazy-cat [init]\n                  (os init (cycle fs)))))","problem":144,"user":"5273562ae4b03e8d9a4a7479"},{"problem":144,"code":"(fn [init & funcs]\n    (let [f (fn f [init f0 & fs]\n              (lazy-seq (cons init (apply f (f0 init) (concat fs [f0])))))]\n      (apply f init funcs)))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn oscilrate [n & fs]\n  (let [gs (cycle fs)]\n    (cons n\n          (lazy-seq (apply oscilrate ((first gs) n) (take (count fs) (rest gs)))))))","problem":144,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn [ini & fns]\r\n  (letfn [(rot [fns]\r\n            (concat (rest fns) [(first fns)]))\r\n          (apply-seq [x fns]\r\n            (let [fx ((first fns) x)]\r\n              (lazy-seq (cons fx (apply-seq fx (rot fns))))))]\r\n    (cons ini (apply-seq ini fns))))","problem":144,"user":"4f62b29ce4b0defedf855fd9"},{"code":"#(map first\n  (iterate (fn [[x [y & z]]]\n              [(y x) (concat z [y])])\n    [%1 %&]))","problem":144,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":144,"code":"(fn o [v & f]\n (let [x (loop [[h & t] f\n                f [v]]\n           (if h\n             (recur t (conj f (h (last f))))\n             f))]\n   (lazy-seq (concat x (lazy-seq (rest (apply o (last x) f)))))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn f [v & fs]\n  (let [r (reductions #(%2 %) v fs)]\n  (concat r (lazy-seq (rest (apply f (last r) fs))))))","problem":144,"user":"4fa30027e4b081705acca187"},{"problem":144,"code":"(fn [init-val & functions]\n   (let [fs (lazy-seq (flatten (repeat functions)))]\n     (reductions #(%2 %1) init-val fs)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn [n & fs] (reductions #(%2 %) n (cycle fs)))","problem":144,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [ ini & fns]\n  ((fn osc [init fnss]\n     (cons init (lazy-seq (osc ((first fnss) init) (rest fnss))))\n    ) ini (flatten (repeat fns)))\n)","problem":144,"user":"51bec919e4b013aa0d74b800"},{"problem":144,"code":"(fn oscilrate [x & fns]\n    (cons x \n         (lazy-seq (apply oscilrate (cons ((first fns) x) (rest (cycle fns)))))))","user":"59e0f38ae4b08badc2a0c500"},{"problem":144,"code":"(fn oscil [i & fs]\n  (let [f (first fs)\n        next-i (f i)\n        next-fs (conj (vec (rest fs)) (first fs))]\n    (lazy-seq (cons i (apply oscil (cons next-i next-fs))))))","user":"587ee260e4b052da650a6353"},{"code":"(fn osc [val & fns]\n  (let [rotated (concat (rest fns) [(first fns)])]\n       (lazy-seq (cons val (apply osc (cons ((first fns) val) rotated))))))","problem":144,"user":"4f13047d535d64f60314642c"},{"code":"(fn oscil [x f & fs]\n  (cons x (lazy-seq (apply oscil (f x) (concat fs (list f)))))\n  )","problem":144,"user":"52e59ca5e4b09f7907dd1464"},{"problem":144,"code":"(fn lambda [x & fs]\n  (let [xs (reduce (fn [m k] (conj m (k (last m)))) [x] fs)]\n    (lazy-cat (drop-last xs) (apply lambda (last xs) fs))))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn [n & fns]\n  (map first\n   (iterate (fn [[n fns]]\n        [((first fns) n) (rest fns)])\n\t    [n (cycle fns)])))","problem":144,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [init & f]\n  (reductions #(%2 %1) init (flatten (repeat f))))","problem":144,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":144,"code":"(fn [val & fns] (map #(% 1) (let [fns (apply vector fns)\n                                  f (fn [[i val]] [(mod (inc i) (count fns)) ((fns i) val)])]\n                              (iterate f [0 val]))))","user":"52d07cc5e4b07d0d72b273bb"},{"code":"(fn osci[x & xs]\n  (cons x \n     (lazy-seq  \n      (apply osci ((first xs) x) \n            (take (count xs) (drop 1 (cycle xs)))))))","problem":144,"user":"506406c8e4b075d771da6f9f"},{"problem":144,"code":"(fn iter [s & funcs]\n    (let [f (first funcs)\n          n (f s)]\n    (cons s (lazy-seq (apply iter n (conj (vec (rest funcs)) f))))))","user":"544e9022e4b0e3978000698b"},{"problem":144,"code":"(fn ThisFunc [N & Funcs]\n    (let [First (first Funcs) Rest (rest Funcs) ]\n      (lazy-seq\n        (cons N (apply ThisFunc (cons (First N) (concat Rest (list First)))))\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":144,"code":"#(letfn [(osc [x [f & fs]]\n           (lazy-seq\n            (cons x (osc (f x) fs))))]\n   (osc %1 (cycle %&)))","user":"5de12192e4b0948ae9d9aded"},{"problem":144,"code":"(fn [val & fns]\n    (reductions (fn [v f]\n                  (f v)) val (cycle fns)))","user":"56018dd4e4b04bb52996e18f"},{"problem":144,"code":"(fn [value & body]\n  (letfn [(oscilrate [value queue]\n            (lazy-seq \n              (cons value\n                    (oscilrate ((peek queue) value) (conj (pop queue) (peek queue))))))]\n    (oscilrate value (apply conj (clojure.lang.PersistentQueue/EMPTY) body))))","user":"57c0917be4b05aa3c4741c95"},{"problem":144,"code":"(fn oscilrate\n  [init & fs]\n  (letfn [(apply-seq\n            [x fs]\n            (let [f (first fs)]\n              (cons x (lazy-seq (apply-seq (f x) (rest fs))))))]\n    (apply-seq init (cycle fs))))","user":"5d609ddde4b0c9e5857d5008"},{"problem":144,"code":"(fn [i h & t]\n    ((fn f [i h [h2 & t]] \n      (cons i (lazy-seq (f (h i) h2 `[~@t ~h])))) i h t))","user":"548b7db8e4b0e286459a11fd"},{"problem":144,"code":"(fn osc [st & funcs] (reductions #(%2 %1) st (cycle funcs)))","user":"53e745a1e4b036ad0777e479"},{"problem":144,"code":"(fn my-oscilrate\n  [val & funs]\n  (reductions #(%2 %1) val (cycle funs)))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":144,"code":"(fn pf [init & args]\n  (letfn [(p [v fs]\n            (loop [i v f fs]\n              (if (empty? f)\n                (lazy-seq (concat i (drop 1 (p [(last i)] fs))))\n                (recur (conj i ((first f) (last i))) (rest f)))))]\n    (p [init] args)))","user":"561a1af6e4b053970a773b02"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (let [size (count fs)\n        iter (fn iter [x n]\n               (lazy-seq\n                (cons x (iter ((nth fs n) x) (mod (+ n 1) size)))))]\n    (iter x 0)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn [v & fn]\n  (letfn [(xyzzy [vv ff]\n          (lazy-seq (cons vv (xyzzy (apply (first ff) [vv]) (concat (next ff) (take 1 ff))))))]\n    (xyzzy v fn)))","problem":144,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":144,"code":"(fn [a & r] (reductions #(%2 %) a (flatten (repeat r))))","user":"5921a080e4b09b4ee5954c77"},{"problem":144,"code":"(fn [arg & fns] (cons arg ((fn doAndRot [arg fns] (let [result (apply (first fns) [arg]) nextfns (concat (next fns) (take 1 fns))]\n(cons result (lazy-seq (doAndRot result nextfns))))) arg fns)))","user":"55f75c6be4b06e875b46cea9"},{"code":"(fn [i & fs]\n  ((fn os [init cyc]\n    (lazy-seq\n      (cons init (os ((first cyc) init) (rest cyc))))) \n    i\n    (cycle fs)))","problem":144,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn [n & fs]\n  (letfn\n    [(help [n [f & fs]]\n            (lazy-seq\n             (cons n\n                   (help (f n) fs))))]\n    (help n (cycle fs))))","problem":144,"user":"50217818e4b00bba4502f7a7"},{"problem":144,"code":"(fn f [a & colls]\n  (reductions #(%2 %) a (cycle colls)))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [init & funcs]\r\n  (letfn [(prod [x [f & fs]]\r\n            (lazy-seq (cons x (prod (f x) fs))))]\r\n    (prod init (cycle funcs))))","problem":144,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":144,"code":"(fn o [x & fs]\n  (letfn [(oscilrate [y counter gs]\n            (lazy-seq \n             (let [ f (nth gs (mod counter (count gs)))]\n               (cons y (oscilrate (f y) (inc counter) gs)))))]\n    (oscilrate x 0 fs) ))","user":"54f86b8ce4b01ecee9d88828"},{"problem":144,"code":"(fn [v & fargs] \n   (let [fv (vec fargs) flen (count fargs)]\n      (letfn [(tf [i]  (fv (mod i flen)) )\n              (fr [v i ]    \n                 (lazy-seq (cons v (fr ((tf i) v) (inc i) ))   )\n                  )\n             ]\n        (fr v 0)  \n      )        \n  )\n)","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn f[ v & s]\n  (let [ s (flatten (repeat s))]\n    (lazy-cat [v] (f ((first s) v) (rest s)))))","problem":144,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn [v & f]\n  (reductions #(%2 %1) v (cycle f)))","problem":144,"user":"5175533fe4b0dea9bbfba575"},{"problem":144,"code":"(fn iter [n & fs]\n  (let [f (first fs)\n        nfs (concat (next fs) [f])]\n    (lazy-seq (cons n (apply iter (f n) nfs)))))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [v0 & fs]\n  (reductions #(%2 %1) v0 (cycle fs))\n  )","problem":144,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn [v & args]\n     (reductions (fn [x f] (f x)) v (cycle args) ))","problem":144,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn [val & fs]\n  (letfn [\n    (oscilrate [val fs]\n      (lazy-seq (cons val (oscilrate ((first fs) val) (rest fs)))))]\n    (oscilrate val (cycle fs))))","problem":144,"user":"4fb12b35e4b081705acca275"},{"code":"(fn [val & fs]\n    (let [fs (concat (list identity) (flatten (repeat fs)))]\n      (letfn [(f [val fs] (lazy-seq (let [new-val ((first fs) val)]\n                                      (cons new-val (f new-val (next fs))))))]\n        (f val fs))))","problem":144,"user":"4e89e939535d3e98b8023287"},{"problem":144,"code":"(fn [x & fs]\n  (reductions (fn [y f] (f y))\n              x\n              (cycle fs)))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn [v & f] (->> [v]\r\n  (iterate (fn [x] (next (reductions #(%2 %) (last x) f))))\r\n  flatten))","problem":144,"user":"50336c6be4b0c6c1199c710f"},{"problem":144,"code":"(fn [value & fns]\n  (letfn [(oscilrate [v fn-cycle]\n            (lazy-seq\n              (cons v (oscilrate ((first fn-cycle) v) (rest fn-cycle)))))]\n    (oscilrate value (cycle fns))))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":144,"code":"(fn osc [v & fns]\n  (lazy-seq (cons v (apply osc ((first fns) v) (next (cycle fns))))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn [x & fs]\n  (reductions #(%2 %1) x (cycle fs)))","problem":144,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":144,"code":"(fn oscilrate\n  [init & fns]\n  (cons init (lazy-seq\n              (apply oscilrate\n                     (cons\n                      ((first fns) init)\n                      (concat (drop 1 fns)\n                              (take 1 fns)))))))","user":"5f37263de4b0574c87022c4e"},{"problem":144,"code":"(fn osc [x & fs]\n  (let [[f & fs] fs]\n    (lazy-seq (cons x (apply osc (cons (f x) (conj (vec fs) f)))))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn [init & fns]\n\t((fn a [i fs]\n      (cons\n       \ti\n        (lazy-seq\n         (a ((first fs) i) (rest fs)))))\n     init (cycle fns)))","problem":144,"user":"527ccaf4e4b0757a1b17136d"},{"problem":144,"code":"(fn [e & fs] (reductions #(%2 %) e (cycle fs)))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [v & funcs]\n  (reductions\n   (fn [v f] (f v))\n   v\n   (cycle funcs)))","problem":144,"user":"5225271fe4b01819a2de42f9"},{"problem":144,"code":"(letfn [(posl [e pf t] (if (empty? t) (posl e pf pf) (lazy-seq (cons e (posl ((first t) e) pf (rest t))))))]\n       (fn[a & b] (posl a b b)))","user":"5576e78de4b05c286339e075"},{"problem":144,"code":"(fn oscilrate\n  [n & fs]\n  (letfn [(steps [n fs] \n            (cons n (lazy-seq (steps ((first fs) n) (rest fs)))))]\n    (steps n (cycle fs))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":144,"code":"(fn oscilrate [start & fn-list]\n                    (cons start (lazy-seq (apply oscilrate ((first fn-list) start) (concat (rest fn-list) [(first fn-list)])))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":144,"code":"(letfn\n  [(osc\n     [iv & fs]\n     (osc-lst iv fs))\n   (osc-lst\n     [iv & [fs]]\n     (lazy-seq\n       (cons\n         iv\n         (osc-lst\n           ((first fs) iv)\n           (concat (rest fs) (list (first fs)))))))]\n  osc)","user":"5e53f8e0e4b027a2e10ac0e7"},{"problem":144,"code":"(fn f [x g & s]\n  (cons x\n        (lazy-seq\n         (apply f (g x) (concat s [g])))))","user":"53523ae0e4b084c2834f4aee"},{"code":"(fn oscillate [init & fs]\n  (reductions #(%2 %1) init (cycle fs)))","problem":144,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":144,"code":"(fn f [i & fs]\n         (lazy-seq\n          (cons i (apply f ((first fs) i) (concat (rest fs) (list (first fs))))))\n         )","user":"5eee7311e4b07c55ae4a0510"},{"problem":144,"code":"(fn z [arg & fs]\n    (lazy-seq (cons arg (apply z ((first fs) arg) (concat (rest fs) [(first fs)])))))","user":"583667c7e4b089d5ab817cfb"},{"problem":144,"code":"(fn osc\n  [num & funs]\n  (let [osc-helper (fn osc-helper [x c]\n                     (let [nth-f (mod c (count funs))\n                           f (nth funs nth-f)]\n                       (lazy-seq\n                        (cons (f x) (osc-helper\n                                     (f x)\n                                     (inc c))))))]\n    (cons num (osc-helper num 0))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":144,"code":"(fn [n & fns]\n  (letfn [(work [n fns]\n                (let [r ((first fns) n)]\n                  (cons r\n                        (lazy-seq (work r (rest fns))))))]\n    (cons n (work n (cycle fns)))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":144,"code":"(fn [starting-value & functions]\n  (map first (iterate (fn [[value fs]]\n                        [((first fs) value)\n                         (conj (vec (rest fs))\n                               (first fs))])\n                      [starting-value (vec functions)])))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn osc [n ff & args]\n\n  (cons n (lazy-seq (apply osc (concat [(ff n)] args [ff])))))","problem":144,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn [x & f] \n  (letfn [(o [f] (lazy-seq (reduce #(cons %2 %1) (o f) (reverse f))))]\n  (reductions #(%2 %1) x (o f))))","problem":144,"user":"50fbdacfe4b0d10d794c19f0"},{"code":"(fn [x & fs]\n  (reductions (fn [a f] (f a)) x (cycle fs)))","problem":144,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":144,"code":"(fn [v & fs]\n    (let\n      [\n        last-i (dec (count fs))\n        do-oscillate\n        (fn do-oscillate [v i]\n          (let\n            [\n              i'\n              (if (= i last-i)\n                0\n                (inc i)\n              )\n              f (nth fs i)\n              v' (f v)\n            ]\n            (lazy-seq\n              (cons\n                v\n                (do-oscillate v' i')\n              )\n            )\n          )\n        )\n      ]\n      (do-oscillate v 0)\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":144,"code":"(fn osc-iterate [val & fs]\n  (let [aplica (fn [f v] (f v))]\n    (reductions #(aplica %2 %1) val (cycle fs))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":144,"code":"#(reductions(fn[a f](f a))%(cycle %&))","user":"4db2903f535df7e46ed9b6bf"},{"problem":144,"code":"(fn oscilrate [init f & fs]\n  (cons init\n        (lazy-seq\n          (apply oscilrate (f init) (conj (vec fs) f)))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":144,"code":"(fn [v & fs]\n  (->> [0 v]\n       (iterate (fn [[i v]] [(mod (inc i) (count fs)) ((nth fs i) v)]))\n       (map second)))","user":"5712854ce4b07c98581c3a89"},{"problem":144,"code":"(fn f3 [v & fs]\n   (reductions (fn [a b] (b a)) v (cycle fs)))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn osc [ x & m ]\n(lazy-seq\n(concat (reduce (fn [a b] (conj a (b (last a)))) [x] \n                (-> m reverse rest reverse))\n        (apply osc (cons ((apply comp (reverse m)) x) \n                    m)))))","problem":144,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn osc [x0 & fs]\n  (letfn [(osc-seq [x, i]\n                   (let [y ((nth fs i) x)]\n                     (cons x (lazy-seq (osc-seq y (mod (inc i) (count fs)))))))]\n    (osc-seq x0 0)))","problem":144,"user":"51365524e4b04ac1f358dd52"},{"problem":144,"code":"(fn Osc [n & funcs]\n  (lazy-seq\n   (let [res ((first funcs) n)]\n   \t(cons n (apply Osc res (concat (drop 1 funcs) [(first funcs)]))))))","user":"57822efce4b0d36ec5835e91"},{"code":"(fn oscilrate\n  ([seed ff & fns] (cons seed (oscilrate seed (concat [ff] fns))))\n  ([prev fns]\n    (lazy-seq\n      (let [cur ((first fns) prev)\n            rotated-fns (concat (rest fns) [(first fns)])]\n        (cons cur (oscilrate cur rotated-fns))))))","problem":144,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [v & fs] \n  (reductions #(%2 %) v (cycle fs)))","problem":144,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn [n & g] ((fn h [m funcs] (cons m (lazy-seq (h ((first funcs) m) (conj (vec (next funcs)) (first funcs)))))) n g))","problem":144,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":144,"code":"(fn [initial_value & funcs] (reductions #(%2 %1) initial_value (cycle funcs)))","user":"5db7376fe4b010eb3c36cd43"},{"problem":144,"code":"(fn [v & fs]\n  ((fn osc [v fs]\n    (concat (list v)\n     (lazy-seq (osc ((first fs) v)\n\n                 (concat (rest fs) (list (first fs))))))) v fs))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":144,"code":"(fn [init & rest] \n    (reductions \n        (fn [e f] (f e)) \n        init \n        (cycle rest)))","user":"5474df19e4b0c51c1f4d728d"},{"code":"(fn [init & funcs] \n  (letfn [(it [v fs] \n      (let [[f & restf] fs nextv (f v)] (lazy-seq (cons v (it nextv restf)))))]\n       (it init (cycle funcs))))","problem":144,"user":"51729002e4b044b2ef48a850"},{"code":"(fn O [v & args]\r\n  (cons v \r\n    (lazy-seq (O ((first (flatten args)) v)\r\n      (conj (vec (rest (flatten args))) (first (flatten args)))))))","problem":144,"user":"50843a4ae4b0c98812d0788b"},{"problem":144,"code":"(fn [n & f]\n  (let [ff (cycle f)]\n    (letfn [(osci [n ff]\n              (lazy-seq (cons ((first ff) n) (osci ((first ff) n) (rest ff)))))] \n      (cons n (osci n ff)))))\n\n; try to piggyback on abstractions for simplicity, in this case, use reductions","user":"5e6ca949e4b04a83ad7cd289"},{"problem":144,"code":"(fn [x & funcs] (reductions #(%2 %1) x (cycle funcs)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn [v & f]\n  ((fn o [[f & x] v]\n     (lazy-seq\n       (cons\n         v\n         (o x (f v)))))\n   (cycle f) v))","problem":144,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":144,"code":"(fn [n & fs]\n  (map first\n       (iterate\n         (fn [[n [h & t]]]\n           [(h n) t])\n         [n (cycle fs)])))","user":"59eb63e3e4b0249b7282077c"},{"problem":144,"code":"(fn rec-f [v & fs] (reductions #(%2 %1) v (flatten (repeat fs))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [x & fns]\n  (reductions #(%2 %) x (cycle fns)))","problem":144,"user":"4ea1b9e4535d7eef308072b8"},{"problem":144,"code":"(fn osc[i & f]\n  (let [ff (first f)\n        r (apply vector (rest f))]\n   (cons i (lazy-seq (apply osc (ff i) (conj r ff)))) \n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [i & funcs] (cons i ((fn exec [v funcs] (let [v2 ((first funcs) v)] (lazy-seq (cons v2 (exec v2 (conj (vec (rest funcs)) (first funcs))))))) i funcs)))","problem":144,"user":"52c1bd29e4b07a9af579236a"},{"problem":144,"code":"(fn J [v f & F]\n    (cons v\n          (lazy-seq (apply J (f v) (concat F [f])))))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [init-num & functions]\n  (reductions #(%2 %1) init-num (cycle functions)))","problem":144,"user":"514d7e29e4b019235f6c0587"},{"problem":144,"code":"(fn\n z\n [x & functs]\n (lazy-seq\n  (cons\n   x\n   (apply\n    z\n    (cons\n     ((first functs) x)\n     (concat (rest functs) [(first functs)]))))))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn [x & fns ] \n  (reductions #(%2 %1) x (cycle fns)))","problem":144,"user":"518644bce4b0da5a5be3baca"},{"problem":144,"code":"(fn [x & xs] (reductions #(%2 %) x (cycle xs)))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn [x & funs]\n   (let [fun (fn fun [x fs]\n               (lazy-seq \n                (let [x2 ((first fs) x)]\n                  (cons x2 (fun x2 (rest fs))))))]\n     (cons x (fun x (cycle funs)))))","problem":144,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn oscilrate\n  [v & fs]\n  (letfn [(mk-lazy-seq [v fs]\n            (lazy-seq\n             (cons v (mk-lazy-seq ((first fs) v) (rest fs)))))]\n    (mk-lazy-seq v (cycle fs))))","problem":144,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn [init & fs]\n  (reductions #(%2 %1) init (cycle fs)))","problem":144,"user":"4effb663535dcb61093f6a2e"},{"problem":144,"code":"(fn [x & fs]\n  (map :value\n       (iterate\n        (fn [{v :value, ix :index}]\n          {:value ((nth fs ix) v)\n           :index (mod (inc ix) (count fs))})\n        {:value x :index 0})))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":144,"code":"(fn oscil-outer [x & fs] (\n                          (fn oscil [x f] (cons x (lazy-seq (oscil ((first f) x) (concat (rest f) (list (first f)))))))\n                   x fs))","user":"56912f93e4b0dcc4269f40ef"},{"problem":144,"code":"(fn [x & funcs]\n  (let [func-list (cycle funcs)]\n    (reductions (fn [n acc] (acc n)) x func-list)))","user":"541df0b5e4b01498b1a71a86"},{"code":"(fn [init & fns]\n  (letfn [(rotate [coll]\n            (reverse (conj (reverse (rest coll)) (first coll))))\n          (lazy-oscillate [val colls]\n            (lazy-seq\n              (cons val (lazy-oscillate ((first colls) val) (rotate colls)))))]\n      (lazy-oscillate init fns)))","problem":144,"user":"4e42f930535dc968683fc49f"},{"code":"(letfn [(oscilrate [x fs]\n  (lazy-seq\n    (cons x\n      (oscilrate ((first fs) x) (rest fs)))))]\n  (fn [x & fs] (oscilrate x (cycle fs))))","problem":144,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn oscilrate [x & fns]\n  (lazy-seq (cons x (apply oscilrate (concat [((first fns) x)] (rest fns) [(first fns)])))))","problem":144,"user":"53300924e4b019098a6f8b55"},{"code":"(fn __ [x & fns]\n  (lazy-seq \n   (cons x (apply __ ((first fns) x) (concat (drop 1 fns) (take 1 fns))))))","problem":144,"user":"512d3304e4b040332b905b2d"},{"code":"(fn [a & fs]\n    (letfn [(fs-c [] (lazy-cat fs (fs-c)))\n            (f [a ls]\n              (let [r ((first ls) a)]\n                (lazy-seq (cons r (f r (rest ls))))))]\n      (cons a (f a (fs-c)))))","problem":144,"user":"5003ee7de4b0678c553fc446"},{"code":"(fn [init & fns]\n  (reductions #(%2 %) init (cycle fns)))","problem":144,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":144,"code":"(fn osc [a & b]\n  (let [os\n\t(fn os [n & fs]\n         (cons ((first fs) n)\n               (lazy-seq (apply os (cons ((first fs) n)\n                              (concat (rest fs) (list (first fs))))))))]\n    (cons a (apply os (cons a b)))))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn [init & fns]\n    (letfn [(p144 [init fns]\n              (let [a (reductions (fn [a f] (f a)) init fns)]\n                (lazy-seq (concat a (drop 1 (p144 (last a) fns))))))]\n      (p144 init fns)))","problem":144,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn [y & fs]\n  ((fn cit [x ffs] (lazy-seq (cons x (cit ((first ffs) x) (rest ffs))))) y (cycle fs)))","problem":144,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn [x & fs] \n  (letfn [(loopf [] (lazy-cat fs (loopf)))\n           (osc-it [y lfs] (let [fy ((first lfs) y)] \n                        (lazy-cat [fy] (osc-it fy (rest lfs)))))]                  \n             (lazy-cat [x] (osc-it x (loopf)))))","problem":144,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":144,"code":"(fn oscrilate[v & fns]\n  (letfn[(rotate[xs] (concat (rest xs) (list (first xs))))]\n    (lazy-seq\n     (cons v (apply oscrilate ((first fns) v) (rotate fns))))))","user":"5980f91ae4b021a7a535fddd"},{"problem":144,"code":"(fn myf [n & fns]\n  (lazy-seq\n   (cons n (apply myf (concat [((first fns) n)] (rest fns) [(first fns)])))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn [n & fns]\n  (reductions #(%2 %) n (cycle fns)))","problem":144,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":144,"code":"(fn [v0 & fs0]\n  (let [f-cycle (cycle fs0)\n        oscilirate-helper (fn oh [v fs]\n                            (cons v (lazy-seq (oh ((first fs) v) (rest fs)))))]\n    (oscilirate-helper v0 f-cycle)))","user":"5596a324e4b04c1e5c31d757"},{"problem":144,"code":"(fn [x & fs]\n  (let [g (fn g[i x & fs]\n            (lazy-seq (cons x\n                            (apply g (conj fs ((nth fs (mod i (count fs))) x) (inc i))))))]\n    (apply g (conj fs x 0))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":144,"code":"(fn f [v & fs]\n  (lazy-seq\n    (cons\n      v\n      (apply\n        f\n        ((first fs) v)\n        (conj (vec (rest fs)) (first fs))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [a & fs]\n(letfn [(thread [a & fs]\n  (if (empty? fs) []\n          (let [f (first fs)\n                v (f a)]\n            (cons\n             v\n             (lazy-seq\n              (apply thread (cons v (rest fs))))))))]\n  (cons a (lazy-seq\n           (apply thread\n                  (cons a\n                        (flatten (repeat fs))))))))","problem":144,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [v & fs]\n  (letfn [(fseq [s]\n            (map #(take % (cycle s)) (iterate inc 1)))\n          (f [v s]\n            (reduce #(%2 %1) v s))]\n    (cons v (lazy-seq (map #(f v %) (fseq fs))))))","problem":144,"user":"5300158ae4b0d8b024fd370f"},{"problem":144,"code":"(fn [v & fs]\n  (-> #(-> (last %)\n           ((partial reductions (fn [a b] (b a))) fs)\n           (next))\n      (iterate [v])\n      flatten))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn x[v & fs] \n  (let [c ((first fs) v)]\n    (cons v (lazy-seq (apply x c (rest (flatten (repeat fs))))))))","problem":144,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn osc\n    [x & fns]\n    (let [ffns (flatten fns)\n          f (fn [acc x fns]\n              (if (empty? fns) (reverse acc)\n                (recur \n                 (conj acc ((first fns) x)) ((first fns) x) (rest fns))))\n          curr (f '() x ffns)]\n     (cons x (concat (drop-last curr) (lazy-seq (osc (last curr) ffns))))))","problem":144,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [init & fns]\n    (reductions (fn [acc next-fn]\n                  (next-fn acc))\n                init\n                (cycle fns)))","problem":144,"user":"4daea889edd6309eace4d15b"},{"code":"(fn z [x & f]\n  (let [g (first f)\n        y (g x)] \n    (lazy-cat [x] (apply z y (conj (vec (rest f)) g)))))","problem":144,"user":"4da3e51330acd6ed10482a68"},{"problem":144,"code":"(fn oscilrate\n  [initial & fns]\n  (cons initial (lazy-seq (apply oscilrate\n                           ((first fns) initial)\n                           (take (count fns) (drop 1 (cycle fns)))))))","user":"4fc524aae4b081705acca37e"},{"code":"(fn x [v & r] (let [s (reductions #(%2 %1) v r)] \n  (lazy-cat (butlast s) (apply x (last s) r))))","problem":144,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn\n  [init & fs]\n  (let [helper (fn h [x fs]\n                 (cons x (lazy-seq (h ((first fs) x) (rest fs)))))]\n    (helper init (cycle fs))))","problem":144,"user":"4fe8e719e4b0547ebccb2430"},{"problem":144,"code":"(fn\n  [value & fns]\n  (reductions (fn [acc next-fn]\n                (next-fn acc))\n              value\n              (cycle fns)))","user":"56e2dbf4e4b03a7c14b85a3b"},{"code":"(fn [val & functions]\n           (cons val ((fn iter [last-val [f & fs]]\n                        (lazy-seq (if (nil? f)\n                                    (iter last-val functions)\n                                    (let [val (f last-val)]\n                                      (cons val (iter val fs)))))\n                        ) val functions)))","problem":144,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [n & fs]\n  (let [l (count fs)\n        f (fn f [n i] (lazy-seq (cons n (f ((nth fs i) n) (mod (inc i) l)))))]\n    (f n 0)))","problem":144,"user":"4ef9c8f9535dced4c769f26b"},{"problem":144,"code":"(fn f [x & [h & r]]\n  (cons x\n    (lazy-seq (apply f (h x) (conj (vec r) h)))))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn oscillerater [value & funs]\n  (cons value\n        (lazy-seq\n          (apply oscillerater ((first funs)value) (concat (rest funs)[(first funs)])))))","problem":144,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn osc [start & fs]\r\n  (cons start (lazy-seq (apply osc ((first fs) start) (take (count fs) (rest (concat fs fs)))))))","problem":144,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [n & fs]\n  (letfn [(osc [n fs]\n               (cons n\n                     (lazy-seq (osc ((first fs) n) (rest fs)))))]\n  (osc n (cycle fs))))","problem":144,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [x & fns]\n  (letfn [\n    (osci-iterate [x fns]\n      (lazy-seq\n        (let [r ((first fns) x)]\n          (cons x (osci-iterate r (rest fns))))))]\n    (osci-iterate x (cycle fns))))","problem":144,"user":"504e13fce4b078edc5f593bc"},{"problem":144,"code":"(fn [value & fns]\n (map first (iterate (fn [[x gns]] [((first gns) x ) (next gns)]) [value (cycle fns)])))","user":"55e99611e4b0121d4835fda3"},{"problem":144,"code":"(fn number144 [n & fs]\n  (cons n (lazy-seq\n            (apply number144 ((first fs) n) (concat\n                                              (rest fs)\n                                              [(first fs)])))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":144,"code":"(fn oscilrate [x & fs]\n\t(reductions #(%2 %1) x (cycle fs)))","user":"52e657e4e4b09f7907dd1472"},{"problem":144,"code":"(fn oscilrate [v f & more]\n    (cons v\n          (lazy-seq\n            (apply (partial oscilrate (f v))\n                   (concat more [f])))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":144,"code":"(fn oscilrate [n & args]\n           (when-not (empty? args)\n             (lazy-seq\n               (cons\n                 n\n                 (apply oscilrate ((first args) n) (concat (drop 1 args) (take 1 args)))))))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":144,"code":"(fn xx [v f & r] (cons v (lazy-seq (apply xx (concat [(f v)] r [f])))))","user":"58840023e4b0f1effa3b768b"},{"problem":144,"code":"(fn g [init & f](let [r (apply concat (repeat f))]\n(reductions #(%2 %) init r)))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [& [val & fns :as args]]\n  (letfn [(it [val & [fst & more]] \n               (let [res (fst val)]\n                 (lazy-seq (cons res (apply it res (concat more (list fst)))))))]\n  (cons val (apply it args))))","problem":144,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn os-fn\n          [v & fns]\n          (cons v (lazy-seq (apply os-fn ((first fns) v) (flatten (reverse  (split-at 1 fns))))))\n          )","problem":144,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn f [n & gs] (reductions #(%2 %1) n (cycle gs)))","problem":144,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":144,"code":"(fn os\n ([x f & fs]\n  (os x (cycle (cons f fs))))\n ([x f]\n  (lazy-seq\n   (cons x (os ((first f) x) (rest f))))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (lazy-seq (cons v (apply oscilrate\n                           ((first fs) v)\n                           (conj (vec (rest fs)) (first fs))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":144,"code":"#((fn osc\n  ([x f]\n   (osc x f 0))\n  ([x f c]\n   (lazy-cat [x] (osc ((nth f c) x) f (if (= c (- (count f) 1))\n                                         0\n                                         (inc c)))))) %1 %&)","user":"586b6a0ae4b01531a375e957"},{"problem":144,"code":"(fn oscilrate [val, & fns]\n\t(let [firstfn (first fns), newfns (concat (rest fns) [firstfn])]\n\t\t(lazy-seq\n\t\t\t(cons\n\t\t\t\tval\n\t\t\t\t(apply oscilrate (cons (firstfn val) newfns))\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [n & xf]\n  (reductions (fn [x f] (f x)) n (cycle xf)))","problem":144,"user":"512eb723e4b0b740abc5982b"},{"problem":144,"code":"(fn foo [val & fns]\n  (letfn [(rotate [coll]\n            (concat (rest coll) (if (first coll) [(first coll)] ())))]\n    (cons val (lazy-seq\n                (apply foo ((first fns) val)\n                       (rotate fns))))))","user":"56a01895e4b0542e1f8d149f"},{"problem":144,"code":"(fn oscilrate\n  [x f & fs]\n  (lazy-seq\n   (cons\n    x\n    (apply oscilrate\n           (f x)\n           (concat\n            fs\n            [f])\n           ))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":144,"code":"(fn oscilrate [init f & fs]\n  (cons init (lazy-seq (apply oscilrate (f init) (concat fs (list f))))))","user":"51780bfce4b0f89a8f53839c"},{"code":"(fn [x & fs]\n  (let [r (fn ! [x fs] (lazy-seq (cons ((first fs) x) (! ((first fs) x) (rest fs)))))]\n    (cons x (r x (cycle fs)))))","problem":144,"user":"4f1b0008535d64f603146473"},{"problem":144,"code":"(fn oscilrate [initial & funcs]\n  (let [next-val ((first funcs) initial)]\n    (lazy-seq (cons initial (apply oscilrate next-val (take (count funcs) (next (cycle funcs))))))))","user":"592ac17ae4b072a2710fcf26"},{"problem":144,"code":"(fn osc [v & [f & r]] (lazy-seq (cons v (apply osc (f v) (concat r [f])))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":144,"code":"(fn [init & fs]\n    (letfn [ (repeat-fs [fs]\n               (cons (first fs)\n                     (lazy-seq (repeat-fs (concat (rest fs) [(first fs)])))))      \n            (oscilrate [init  fs]\n              (cons init\n                    (lazy-seq (oscilrate ((first fs) init) (rest fs))))) ]\n      (let [fs (repeat-fs fs)]\n        (oscilrate init fs))))","user":"55aa1637e4b0988bba2ad949"},{"problem":144,"code":"(fn oscilrate [iv & fs]\n  (lazy-seq\n    (reductions\n      (fn [acc f] (f acc))\n      iv\n      (apply concat (repeat fs)))))","user":"5779556de4b0979f8965166e"},{"code":"(fn [v & f]\n  (reductions #(%2 %) v (cycle f)))","problem":144,"user":"4e52d815535d302ef430da77"},{"problem":144,"code":"(fn oscilrate\n  [init & fs]\n  (let [rotate (fn [seq] (conj (into [] (rest seq)) (first seq)))]\n    (lazy-seq (cons init (apply oscilrate ((first fs) init) (rotate fs))))))","user":"58152157e4b0f478707a0631"},{"problem":144,"code":"(fn p144 [i & fs] \n  (cons i \n    (let [i-to-use (atom nil)]\n      (for [f (cycle fs)]\n        (if (nil? @i-to-use)\n            (reset! i-to-use (f i))\n            (reset! i-to-use (f @i-to-use)))))))","user":"525c575be4b0cb4875a45d38"},{"problem":144,"code":"(fn oscillate [v & fs]\n  (lazy-seq (cons v (apply oscillate ((first fs) v) (seq ( concat (rest fs) (list (first fs))))))))","user":"53c649d3e4b00fb29b221297"},{"problem":144,"code":"(fn [init & fs]\n  (letfn [(f-switch [fs]\n            (let [n (count fs)\n                  index (atom 0)]\n              (fn [x]\n                (let [fx (nth fs @index)\n                      result (fx x)]\n                  (reset! index (rem (inc @index) n))\n                  result))))]\n    (iterate (f-switch fs) init)))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn oscilrate [v & fs]\n    (cons v (lazy-seq (apply oscilrate (concat [((first fs) v)] (concat (rest fs) [(first fs)]))))))","problem":144,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn  [n & fs]\n  (let [r (fn r [n fs] (if (seq fs)\n                           (cons ((first fs) n) (r ((first fs) n) (rest fs)))\n                           ()))\n        oscillate (fn oscillate [n] (lazy-seq (concat (r n fs) (oscillate (last (r n fs))))))]\n   (cons n (oscillate n))))","problem":144,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":144,"code":"(fn [initial & funs]\n  (reductions #(%2 %) \n              initial\n              (cycle funs)))","user":"51c611c4e4b03a28d42333bf"},{"code":"#(reductions (fn [s a] (a s)) (first %&) (cycle (rest %&)))","problem":144,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn oscillrate2 [x & fs]\n  ((fn func [x fs]\n     (lazy-seq\n      (cons x (func ((first fs) x)\n                    (concat (rest fs) (list (first fs)))))))\n   x fs))","problem":144,"user":"4ef6f5ea535dced4c769f250"},{"problem":144,"code":"(fn [init & fs]\n  (reductions\n    #(%2 %)\n    init\n    (cycle fs)))","user":"5b772ad7e4b047b03b2036e8"},{"code":"(fn [x & fs] (reductions (fn [acc f] (f acc))\n                         x\n                         (cycle fs)))","problem":144,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn [x & fs]\n  (letfn [(oscillate [x fs]\n            (cons x (lazy-seq (oscillate ((first fs) x) (rest fs)))))]\n    (oscillate x (cycle fs))))","problem":144,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":144,"code":"(fn orate [iv & fns]\n  (let [fct (count fns)\n        orx (fn orx [iv x]\n              (lazy-seq \n                (let [f (nth fns (mod x fct))\n                      fv (f iv)]\n                  (cons fv (orx fv (inc x))))))]\n    (cons iv (orx iv 0))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn oscilrate[v f & fs]\n    (cons v (lazy-seq (apply oscilrate (cons (f v) (conj (vec fs) f))))))","problem":144,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":144,"code":"(fn [init & funcs]\n  (reductions #(%2 %1) init (cycle funcs)))","user":"6088395de4b0ae75613dcee2"},{"problem":144,"code":"(fn oscilrate [val & fs] (reductions (fn [val f] (f val)) val (cycle fs)))","user":"530bf87ee4b02e82168697d5"},{"code":"(fn [i & f]\n\t(reductions \n\t\t(fn [acc el] (el acc))\n\t\t i (cycle f)\n\t)\n)","problem":144,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [x & fs]\n  (map first\n    (iterate\n      (fn [[x [f & fs]]] [(f x) fs])\n      [x (cycle fs)])))","problem":144,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn osc [x & fns]\n  (cons x\n    (lazy-seq\n      (apply osc ((first fns) x) (concat (rest fns) [(first fns)]))\n    )\n  )\n)","problem":144,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (map second\n    (iterate (fn [[fs v]]\n               [(rest fs) ((first fs) v)])\n             [(cycle fs) v])))","user":"5880e38fe4b0f1effa3b7625"},{"problem":144,"code":"(fn [x & c] (reductions #(%2 %) x (cycle c)))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [init & fs]\n  ((fn lo [i [f & fs]]\n    (lazy-seq (cons i (lo (f i) fs)))) init (cycle fs)))","problem":144,"user":"4e7d1c22535db169f9c796c5"},{"problem":144,"code":"(fn [v & fs]\n  (let [cfs (cycle fs)]\n    ((fn fcycle [v fcy] \n      (cons v (lazy-seq (fcycle ((first fcy) v) (rest fcy)))))\n    v cfs))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":144,"code":"(fn osc [v & fns]\n  (cons v (lazy-seq(apply osc (cons ((first fns) v) (concat (rest fns) (take 1 fns)))\n           ) )))","user":"564a560ae4b0284900eef654"},{"problem":144,"code":";; (ns sandbox.forclojure.oscilrate-144\n;;   \"Write an oscillating iterate: a function that takes an initial value and a\n;;   variable number of functions. It should return a lazy sequence of the\n;;   functions applied to the value in order, restarting from the first function\n;;   after it hits the end.\"\n;;   (:require [clojure.core.async :as a :refer [go >! <! close! chan]]\n;;             [criterium.core :as c]))\n\n;; ;; We benchmark each approach, first by realizing 20M values using:\n;; ;; user> (time (def a (into [] (take 20000000 (multi-iterate 0 inc dec inc)))))\n;; ;;\n;; ;; Followed by criterum benchmarking:\n;; ;; (c/quick-bench (into [] (take 20000000 (multi-iterate5 0 inc dec inc))) :verbose)\n\n\n;; ;; Solution 1: Lazy recursion\n;; ;; \"Elapsed time: 5546.036798 msecs\"\n;; ;; Execution time mean : 5.889665 sec\n;; (defn multi-iterate1* [cur-val fs]\n;;   (let [next-val ((first fs) cur-val)]\n;;     (lazy-seq (cons cur-val (multi-iterate1* next-val (rest fs))))))\n\n;; (defn multi-iterate1 [init & fs]\n;;   (multi-iterate1* init (cycle fs)))\n\n\n;; ;; Solution 2: Let the iterated function store its own state\n;; ;; \"Elapsed time: 9920.414574 msecs\"\n;; ;; Execution time mean : 6.285145 sec\n\n;; (defn callternator [& fs]\n;;   ;; NB we prepend nil in next line because code is cleaner if we can skip 1st\n;;   (let [f-cycle (atom (cons nil (cycle fs)))]\n;;     (fn [& args]\n;;       (apply (first (swap! f-cycle rest))\n;;              args))))\n\n;; (defn multi-iterate2 [init & fs]\n;;   (iterate (apply callternator fs) init))\n\n\n;; ;; Solution 3: Based on Solution 2, but uses a single fn instead of a helper\n;; ;; \"Elapsed time: 8732.092496 msecs\"\n;; ;; Execution time mean : 6.050067 sec\n;; (defn multi-iterate3 [init & fs]\n;;   ;; NB we prepend nil in next line because code is cleaner if we can skip 1st\n;;   (let [f-cycle (atom (cons nil (cycle fs)))\n;;         cycler (fn [& args]\n;;                  (apply (first (swap! f-cycle rest))\n;;                         args))]\n;;     (iterate cycler init)))\n\n\n;; ;; Solution 4: use core.async to hold state ;)\n;; ;; TODO: why is this one so friggin slow?\n;; ;; \"Elapsed time: 216174.708417 msecs\"\n;; ;; Execution time mean : 3.683306 min (!!)\n;; (defn multi-iterate4 [init & fs]\n;;   (let [ch (chan)]\n;;     (go\n;;       (a/onto-chan ch (cycle fs)))\n;;     (iterate (fn [x]\n;;                (let [next-f (a/<!! ch)]\n;;                  (next-f x)))\n;;              init)))\n\n\n;; ;; Solution 5: Iterate against a vector of the accumulated results and the fs.\n;; ;; \"Elapsed time: 13641.735548 msecs\"\n;; ;; Execution time mean : 10.534396 sec\n\n;; (defn- next-val [[val fs]]\n;;   [((first fs) val) (rest fs)])\n\n;; (defn multi-iterate5 [init & fs]\n;;   (let [f-cycle (cycle fs)]\n;;     (map first\n;;          (iterate next-val [init f-cycle]))))\n\n\n;; ;; Solution 6: use reductions to lazily handle infinite reduce\n;; ;; with intermediate vals. I've never actually used reductions\n;; ;; before, but it came up while googling <lazy reduce clojure>.\n;; ;; \"Elapsed time: 5331.262103 msecs\"\n;; ;; Execution time mean : 5.187803 sec\n\n;; ;; I suspect I'm not going to find anything more elegant than this one.\n;; (defn multi-iterate6 [init & fs]\n;;   (reductions #(%2 %1) init (cycle fs)))\n\n;; ;; Although this variant makes me laugh :)\n;; (defn multi-iterate7 [init & fs]\n;;   (reductions (fn [& args] ((comp eval reverse) args)) init (cycle fs)))\n\n;; (comment\n\n;;   (time\n;;    (c/with-progress-reporting\n;;      (c/quick-bench\n;;       (into []\n;;             (take 20000000\n;;                   (multi-iterate5 0 inc dec inc)))\n;;       :verbose)))\n\n;;   )\n\n;; I like a few of these, but we'll go with solution 6 to\n;; actually plug into 4clojure:\n\n(fn [init & fs] (reductions #(%2 %1) init (cycle fs)))","user":"56aad4f7e4b03c432f187338"},{"code":"(fn f [i & s]\r\n  (let [v ((first s) i)]\r\n    (lazy-seq (cons i (apply (partial f v) (next (cycle s)))))))","problem":144,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn o [a f & fs](lazy-seq (cons a (apply o `(~(f a) ~@fs ~f)))))","problem":144,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn osc [v & fs]\n  (let [fs (cycle fs)\n        n ((first fs) v)]\n    (lazy-seq (cons v (apply osc n (rest fs))))))","problem":144,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (letfn [(step [[x fs]]\n            [((first fs) x) (rest fs)])]\n    (map first (iterate step [x (cycle fs)]))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"#(reductions (fn [r f] (f r)) % (cycle %&))","problem":144,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":144,"code":"(fn\n           [x & fs]\n           (reductions #(%2 %1) x (cycle fs)))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn oscilrate [init-val f & more]\n\t(cons init-val \n\t\t(lazy-seq (apply oscilrate (cons (f init-val) (concat  more (list f)))))\n\t)\n)","problem":144,"user":"52763696e4b03e8d9a4a74d7"},{"problem":144,"code":"(fn [v & f] (reductions #(%2 %1) v (cycle f)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (lazy-seq (cons x (apply oscilrate ((first fs) x) (concat (rest fs) (list (first fs)))))))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn oscilrate [v & fns]\n  (letfn [(helper [v [f & fns]]\n            (cons (f v) (lazy-seq (helper (f v) fns))))]\n    (helper v (cons identity (cycle fns)))))","problem":144,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn __ [v & funcs]\n  (letfn [(oscilrate [v & [ffunc & rfunc]]\n            (let [rv (ffunc v)]\n              (lazy-seq (cons rv (apply oscilrate rv (conj (vec rfunc) ffunc))))))]\n  (cons v (apply oscilrate v funcs))))","problem":144,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [x & y] (let [z (cycle y)] (reductions #(%2 %) x z)))","problem":144,"user":"52379c46e4b0fae3832e99db"},{"problem":144,"code":"(fn osc [init & fs]                                  (letfn [(rec [init fs]                                         (lazy-seq                                             (if (empty? fs)                                        '()                                                  (let [[h & t] fs]                                      (cons init                                                 (rec (h init)                                             t))))))]                     (rec init (cycle fs))))","user":"5895477fe4b00487982d527c"},{"code":"(fn [x & fs] \n  ((fn func [y f i]\n    (cons y (lazy-seq (func ((nth f i) y) f (if (< i (- (count f) 1)) (inc i) 0))))) x fs 0))","problem":144,"user":"52016690e4b0b2e020a18f0f"},{"problem":144,"code":"(fn [x & fs]\n           ((fn forever [cfs x_0]\n                (lazy-seq (cons x_0 (forever (rest cfs) ((first cfs) x_0))))) (cycle fs) x))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [init & fns]\n  (reductions #(%2 %1) init (cycle fns)))","problem":144,"user":"4fb1d907e4b081705acca282"},{"code":"(fn oi\n  [x & fs]\n  (cons x (lazy-seq (apply oi ((first fs) x) (concat (rest fs) (vector (first fs)))))))","problem":144,"user":"536aa86de4b0243289761eb1"},{"code":"(fn osci [initial & fs]\n  (let [fs (flatten (repeat fs))]\n    (cons initial\n          (lazy-seq (osci ((first fs) initial) (rest fs))))))","problem":144,"user":"4f036d9b535dcb61093f6ac1"},{"problem":144,"code":"(fn [x & xs]\n  (reductions #(%2 %1) x (cycle xs)))","user":"593f95d8e4b069cdc2982be3"},{"problem":144,"code":"(fn oscilrate [seed & fns]\n    (let [current-fn (first fns)\n          current-val seed\n          next-val (current-fn seed)\n          next-fns (concat (rest fns) (list current-fn))]\n      (lazy-seq (cons current-val (apply oscilrate (cons next-val next-fns))))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":144,"code":"(fn o [v & fs]\n  (let [[f & fs'] (cycle fs)] \n    (lazy-seq (cons v (apply o (cons (f v) fs'))))))","user":"5566d812e4b0c656e3ff1837"},{"problem":144,"code":"(fn oscilrate\n  [num & fs]\n  (lazy-seq\n    (cons num\n          (apply oscilrate ((first fs) num) (conj (into [] (rest fs)) (first fs))))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [v & fs]\n  (letfn [(osc [v fs]\n               (lazy-seq\n                 (let [v1 ((first fs) v)]\n                   (cons v1\n                         (osc v1 (rest fs))))\n                 ))]\n         (cons v \n               (osc v \n                    (apply concat (repeat fs))))\n    )\n  )","problem":144,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn wtf [v f & fs]\n  (cons v (lazy-seq (apply wtf (f v) (conj (vec fs) f)))))","problem":144,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":144,"code":"(fn\n  ([val & fns]\n   (cons val (lazy-seq ((fn oscilrate-helper\n  [val fns]\n  (cons val (lazy-seq (oscilrate-helper ((first fns) val) (conj (vec (rest fns)) (first fns)))))\n  )\n ((first fns) val) (conj (vec (rest fns)) (first fns)))))\n   )\n \n)","user":"5772ddb0e4b0979f896515d4"},{"problem":144,"code":"(fn oscilrate [arg & fns]\n  (let [create-seq (fn create-seq [a fs]\n                     (let [v ((first fs) a)]\n                       (lazy-seq (cons v (create-seq v (next fs))))))]\n    (lazy-seq (cons arg (create-seq arg (cycle fns))))))","user":"518279abe4b0353c468deb65"},{"problem":144,"code":"(fn oscilrate [n f & fx]\n  (cons n (lazy-seq (apply oscilrate (f n) (concat fx [f])))))","user":"53791ab7e4b06839e8705e4d"},{"problem":144,"code":"(fn __ [v & fs]\n  (reductions #(%2 %1) v (cycle fs)))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [init &  fns]\n  (let [aux (fn aux [v q]\n\t      (cons v (lazy-seq (aux ((first q) v)\n                                     (conj (pop\tq) (first q))))))]\n    (aux init (into clojure.lang.PersistentQueue/EMPTY fns))))","problem":144,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":144,"code":"#(reductions (fn [a x](x a))  % (cycle %&))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":144,"code":"(fn [i & f]\n  (let [c (cycle f)]\n    (letfn [(o [v x]\n               (let [n (nth c x) l (n v)]\n                 (cons l (lazy-seq (o l (inc x))))))]\n      (cons i (o i 0)))))","user":"4ec53f8c535d6d7199dd368b"},{"code":"(letfn\n  [(oscilrate [x funcs]\n     (cons\n       x\n       (lazy-seq\n         (oscilrate\n           ((first funcs) x)\n           (conj (vec (rest funcs)) (first funcs))))))]\n  (fn [x & funcs]\n    (oscilrate x funcs)))","problem":144,"user":"50f94727e4b0e7c80cb15a49"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  ((fn [v fs]\n     (concat [v] (lazy-seq (apply oscilrate ((first fs) v) (rest fs))))) \n   v \n   (cycle fs)))","user":"50cf94bde4b0abc485cb9bb2"},{"code":"(fn o [v & [f & fs]]\n  (lazy-seq\n   (cons v\n         (apply o (f v) (concat fs [f])))))","problem":144,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn ! [v & fs] (lazy-seq\n   (cons v (apply ! ((first fs) v) (rest (cycle fs))))))","problem":144,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn oscillate [val & fs]\n  (letfn [(fix [f]\n            (let [p (promise)]\n              (deliver p (f p))\n              @p))]\n    (fix (fn [self] (lazy-seq (cons val (map #(%1 %2) (cycle fs) @self)))))))","problem":144,"user":"4e8338d6535db62dc21a62d3"},{"problem":144,"code":"(fn [v & fns]\n  (letfn [(cycle-fns [v fns]\n            (lazy-seq (let [v1 ((first fns) v)]\n                        (cons v1 (cycle-fns v1 (rest fns))))))]\n    (cons v (cycle-fns v (cycle fns)))))","user":"57f80350e4b0d3187e90090c"},{"problem":144,"code":"(fn [x & fs] (reductions #(%2 %1) x (apply concat (repeat fs))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":144,"code":"(fn reiterate [base & fns]\n  (reductions (fn [x f]\n                (f x))\n              base\n              (cycle fns)))","user":"52474133e4b05ef8e38e635e"},{"problem":144,"code":"(fn oscilate [x op & rest]\n  (lazy-seq\n    (let [val (op x)\n          rot (conj (vec rest) op)]\n      (cons x (apply oscilate val rot)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn\n    [y & args]\n    (let [bar (fn _\n                [x & fs]\n                (let [f (first fs),\n                      fx (f x),\n                      newfs (concat (rest fs) [f])]\n                  (cons fx (lazy-seq (apply _ fx newfs)))))]\n      (cons y (apply bar y args))\n      ))","problem":144,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [n & f]\n          (reductions #(%2 %) n (cycle f)))","problem":144,"user":"503b6995e4b07a1917cc34dd"},{"problem":144,"code":"(fn [init-val & functions]\n  (letfn [(f [x fns]\n            (let [next-val ((first fns) x)]\n              (lazy-seq (cons next-val (f next-val (rest fns))))))]\n    (cons init-val (f init-val (cycle functions)))))","user":"567695c2e4b05957ce8c6157"},{"problem":144,"code":"(fn [v & gs]\n            (let [foo (fn [[x fns]]\n                        (let [a-fn (first fns)]\n                          [(a-fn x) (rest fns)]))]\n              (->> (iterate foo [v (cycle gs)])\n                   (map first))))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn [i & args]\n  (map first\n       (iterate\n        (fn [[v fs]]\n          [((first fs) v) (rest fs)])\n        [i (cycle args)])))","problem":144,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn itf [v & fs]\n  (if (empty? fs)\n    v\n    (reductions #(%2 %1) v (cycle (vec fs)))))","problem":144,"user":"5374adc3e4b06d7f452d9e27"},{"problem":144,"code":"(fn p144\n  [x & f]\n  ((fn ocil\n    [x [f1 & f]]\n    (if f1\n      (cons x (lazy-seq (ocil (f1 x) f)))\n      [x])) x (cycle f)))","user":"520cb8c4e4b0b022ef140c9a"},{"code":"(fn g [x & fxs]\n  (let [s (flatten fxs)\n        f (first s)]\n    (cons x (lazy-seq (g (f x) [(rest s) (first s)])))))","problem":144,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":144,"code":"(fn n ([] [])\n  ([e] [e])\n  ([e & fs]\n   (lazy-seq\n     (cons e\n           (apply n (-> (into [((first fs) e)] (vec (rest fs)))\n                        (into [(first fs)])))))))","user":"5e08c3dde4b0978307768fc8"},{"problem":144,"code":"(fn oscil [in & fs] \n    (letfn [(recurOscil [val funcs] (lazy-seq\n                                       (if (empty? funcs) \n                                         (recurOscil val fs)\n                                         (cons ((first funcs) val) (recurOscil ((first funcs) val) (rest funcs)))\n                                       )\n                                     )\n            )]\n     (cons in (recurOscil in fs)))\n)","user":"56427910e4b08d4f616f5f19"},{"code":"(fn oscillerate\n  [x & fs]\n  (reductions #(%2 %1) x (cycle fs)))","problem":144,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn [v & fs]\n  (reductions #(%2 %) v (cycle fs)))","problem":144,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(letfn [(f [val n funcs]\n                    (let [r ((nth funcs n) val)]\n                      (cons r\n                            (lazy-seq (f r (mod (inc n) (count funcs)) funcs)))))]\n            (fn [i & funcs]\n              (cons i (f i 0 funcs))))","problem":144,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":144,"code":"(fn x [initval & fns]\n    (lazy-seq (cons\n               initval\n               (apply x\n                      (concat [((first fns) initval)] (rest fns) [(first fns)])\n                      )\n               )\n              )\n    )","user":"5f06caa7e4b0cf489e8d7f52"},{"code":"(fn f [init & fs]\n  (let [f0 (first fs)]\n    (cons init (lazy-seq (apply f (f0 init) (conj (vec (rest fs)) f0))))))","problem":144,"user":"508157b2e4b0946d0443855c"},{"problem":144,"code":"(fn oscilrate [val & funcs]\n  (letfn [(move-item [s]\n            (concat (rest s) [(first s)]))]\n    (cons val (lazy-seq (apply oscilrate (cons ((first funcs) val) (move-item funcs)))))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [x & fs]\n  (reductions (fn [x f]\n                (f x))\n              x\n              (cycle fs)))","problem":144,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn r [v f & fs]\n  (lazy-seq \n    (cons v (apply (partial r (f v)) (conj (vec fs) f)))))","problem":144,"user":"4f32a7f1e4b0d6649770a095"},{"problem":144,"code":"(fn oscilate [x & args]\n           (let [[f & xs] args\n                 v (f x)]\n             (cons x (lazy-seq (apply oscilate (concat [v] xs [f]))))))","user":"525cc912e4b0cb4875a45d48"},{"code":"(fn [v & fns]\n  (letfn [(oscil [v fns] (lazy-seq (cons v (oscil ((first fns) v) (rest fns)))))]\n    (oscil v (cycle fns))))","problem":144,"user":"52015698e4b0d7096e99ddba"},{"problem":144,"code":"(fn [v & fns] ((fn osc [v fns] (lazy-seq (cons v (osc ((first fns) v) (rest fns))))) v (cycle fns)))","user":"5abe2fc2e4b073f17744271e"},{"problem":144,"code":"(fn oscillate [n & fns]\n           (lazy-seq\n             (cons n (apply oscillate (concat [((first fns) n)]\n                                              (concat  (rest fns) [(first fns)])))))\n           )","user":"56c60b36e4b05cc29241eead"},{"code":"(fn [val & fns] (reductions #(%2 %1) val (cycle fns)))","problem":144,"user":"4eae5fe4535d7eef30807325"},{"problem":144,"code":"(fn [i & fs]\n  (reductions #(%2 %1) i (cycle fs)))","user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [val & fns]\n  (reductions #(%2 %1) val (cycle fns)))","problem":144,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":144,"code":"(fn oscilrate [start & fs]\n  (letfn [(oscil [start fs]\n            (lazy-seq\n              (let [curr (drop 1 (reduce #(conj %1 (%2 (last %1))) [start] fs))]\n                (concat curr (oscil (last curr) fs)))))]\n    (cons start (oscil start fs))))","user":"590b3aeae4b047aa04b199d0"},{"problem":144,"code":"(fn [n & fs]\n  (let [len (count fs)\n        curr (atom -1)\n        f (fn [x]\n            ((nth fs (swap! curr (comp #(rem % len) inc))) x)\n          )\n      ]\n    (iterate f n)\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"problem":144,"code":"(fn osc [start f & fns]\n  (let [c (cycle (into [f] fns))]\n    (letfn [(osc-fn [c n]\n              (lazy-seq\n               (cons n\n                     (osc-fn (rest c)\n                            ((first c) n)))))]\n      (osc-fn c start))))","user":"505d1b01e4b0e6aca564be04"},{"problem":144,"code":"(fn __ [start & funcs]\n  (let [\n        neverendingFuncs (cycle funcs)\n        fff (fn it [val fns]\n              (cons val (lazy-seq (it ((first fns) val) (rest fns)))))\n        ]\n    (fff start neverendingFuncs)))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn ositerate [initial & fns]\n  (letfn [(inner-iterate [initial pos fns]\n                         (cons initial\n                               (lazy-seq (inner-iterate ((fns pos) initial)\n                                                        (mod (+ pos 1) (count fns))\n                                                        fns))))]\n    (inner-iterate initial 0 (vec fns))))","problem":144,"user":"531d34cfe4b08068f379edac"},{"code":"(fn osc [x & args]\n  (letfn [(osc1 [x fns]\n            (lazy-seq\n               (let [s (seq fns)\n                     r ((first s) x)]\n                 (cons x (osc1 r (conj (vec (rest s)) (first s)\n))))\n               )\n              )\n          ]\n    (osc1 x args)))","problem":144,"user":"52140b53e4b0961f15ac4d7e"},{"problem":144,"code":"(fn foo [value & funs]\n  (let [next-funs (concat (rest funs) [(first funs)])]\n    (cons value (lazy-seq (apply foo (cons ((first funs) value) next-funs))))))","user":"5110b8bae4b04c71fce993f4"},{"code":"(fn [val & fs] (reductions #(%2 %1) val (cycle fs)))","problem":144,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [i & fl]\n  ((fn suite [in vf]\n    (lazy-seq (cons in (suite ((first vf) in) (conj (vec (rest vf)) (first vf)))))\n  ) i (vec fl))\n)","problem":144,"user":"4f84400de4b033992c121c2e"},{"problem":144,"code":"(fn osc [v & fns]\n  (reductions #(%2 %1) v (cycle fns)))","user":"5338387de4b0e30313ee6c91"},{"problem":144,"code":"(fn [n & fns]\n              (reductions #(%2 %1) n (cycle fns)))","user":"50e90813e4b033b0e80d11e7"},{"problem":144,"code":"(fn [val & fns]\n    (let [fns (cycle fns)]\n      (reductions (fn [acc f] (f acc)) val fns)))","user":"5777cffae4b0979f89651651"},{"code":"(fn [x & f] (reductions #(%2 %1) x (cycle f)))","problem":144,"user":"52b453b0e4b0c58976d9ad21"},{"problem":144,"code":"(fn oscilrate [x f & funcs]\n  (lazy-seq\n   (let [y (f x)\n         next-funcs (concat funcs [f])]\n     (cons x (apply oscilrate y next-funcs)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":144,"code":"(fn [i & fs]\n  ((fn os [i cf]\n     (let [f (first cf)\n           rf (rest cf)]\n       (cons i (lazy-seq (os (f i) (if (seq rf) rf fs)))))) i fs))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn osci [init & funs]\n  (do \n    (cons init (lazy-seq (apply \n                           osci \n                           ((first funs) init) \n                           (rest (cycle funs)))))))","problem":144,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":144,"code":"(letfn \n  [(osc [v fs]\n    (cons v (lazy-seq\n             (osc ((first fs) v) (rest fs)))))]\n  (fn [v & fs]\n    (osc v (cycle fs))))","user":"53065acbe4b02e8216869792"},{"problem":144,"code":"(fn o [v & fns] (let [ffns (cycle fns)] (cons v (lazy-seq (apply o ((first ffns) v) (rest ffns)))) ))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [x & y](cons x (map #(% x)(reductions comp (cycle y)))))","problem":144,"user":"4ed2dd98535d44c135fd68e2"},{"problem":144,"code":"(fn [v & fns]\n  (let [fns-len (count fns) fns (vec fns)]\n     (map first (iterate (fn [[x i]] [((fns (mod i fns-len)) x) (inc i)]) [v 0]))))","user":"5637557ce4b0bfe05bf117d4"},{"code":"(fn [v & morefuncs]\n           (let [infifuncs (flatten (repeat morefuncs))]\n             (lazy-seq\n              (loop [fs infifuncs acc [v] ct 12]\n                (if (not (pos? ct)) acc\n                    (recur (rest fs) (conj acc ((first fs) (last acc))) (dec ct)))))))","problem":144,"user":"4e8768f6535dceadca469850"},{"code":"(fn rec-o [ i f & fs]\n        (cons i (lazy-seq (apply rec-o (f i) (concat fs [f])))))","problem":144,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn b [n & ff]\n  (reductions #(%2 %1) n (cycle ff)))","problem":144,"user":"4fe97adde4b0547ebccb245e"},{"problem":144,"code":"(fn [init & fs]\n  (reductions (fn [x f] (f x))\n              init\n              (cycle fs)))","user":"559b2ad1e4b066d22e731f4e"},{"problem":144,"code":"(fn [init & fns]\n  (reductions (fn [memo f] (f memo)) init (cycle fns)))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn [x & f ]\n  (map last \n      (iterate (fn [[i v]] \n        (vector   (inc i) \n                  ((nth f (rem i (count f))) v))) \n        [ 0 x])))","problem":144,"user":"4fccdc75e4b0ee37620e186d"},{"problem":144,"code":"(fn [x & fs]\n  (reductions #(%2 %1) x (cycle fs) ))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":144,"code":"(fn [v & fs]\n (reductions #(%2 %1) v (cycle fs)))\n#_\n(fn oscilrate [v & fs] \n (let [oscilrate2 (fn oscilrate2 [v [f & fs]] (lazy-seq (cons v (oscilrate2 (f v) fs))))]\n  (oscilrate2 v (cycle fs))))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":144,"code":"(fn oscilrate [x & funcs]\n  (map first\n       (iterate\n        (fn [[val fs]]\n          [((first fs) val) (apply concat (reverse (split-at 1 fs)))])\n        [x funcs])))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":144,"code":"(fn [init & fs] (reductions (fn [curr f] (f curr)) init (cycle fs)))","user":"4e68c434535d8ccf87e9fe89"},{"problem":144,"code":"(fn [n & fs]\n  (letfn [(helper [n fs]\n            (let [f (first fs)]\n              (cons n (lazy-seq (helper (f n) (concat (rest fs) [(first fs)]))))))]\n    (helper n fs)))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn oscilrate [v & funs]\n    \n    (letfn [(appl-seq [v fxs]\n                      (lazy-seq\n                        (if (seq fxs)\n                          (cons v (appl-seq ((first fxs) v) (rest fxs)))\n                          [v]))\n                      )]\n      (appl-seq v (cycle funs))))","problem":144,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":144,"code":"(fn oscil [ x & args ]\n  (reductions #(%2 %1) x (cycle args)))","user":"55536a8ae4b0deb715856e03"},{"problem":144,"code":"(fn [n & f]\n    (reductions #(%2 %) n (cycle f)))","user":"505106fee4b05ab4c7e07d38"},{"problem":144,"code":"; This is just brilliant. Look at how much work gets done with one line of code.\n; I sm still trying to wrap my head around it.\n\n(fn [x & fs]\n  (reductions #(%2 %1) x (cycle fs)))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"(fn [v & fns] (reductions (fn [p f] (f p)) v (cycle fns)))","problem":144,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":144,"code":"(fn lool [x & fns]\n  (map (fn [fun]\n         ((apply comp (reverse fun)) x))\n    (map #(take % (flatten (repeat fns))) (range))))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [i & fs]\n  (\n    (fn osc [i n fs]\n      (cons i (lazy-seq (osc ((nth fs n) i) (mod (inc n) (count fs)) fs)))\n    )\n    i 0 fs\n  )\n)","problem":144,"user":"5176afd2e4b085adf681d889"},{"code":"(fn [v & f]\n  (reductions #(%2 %) v (cycle f))\n)","problem":144,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn osc [x & fs]\n  ((fn l [v [f & r]]\n    (lazy-seq\n      (cons v \n        (if f \n          (l (f v) r) \n          (l ((first fs) v) (rest fs)))))) x fs))","problem":144,"user":"502904e0e4b0feaf66e22fad"},{"problem":144,"code":"(fn [p & fns]\n  (reductions (fn [p f] (f p)) p (cycle fns)))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn oscilrate [init f & funcs]\n  (lazy-seq\n    (when-let [funcs (vec funcs)]\n      (cons init (apply oscilrate (f init) (conj funcs f))))))","problem":144,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [v & fns]\n    (reductions #(%2 %1) v (cycle fns)))","problem":144,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn [x & fs]\n           (letfn [(f [n fv]\n                      (if (empty? fv)\n                          '()\n                        (cons n\n                              (lazy-seq (f ((first fv) n) (rest fv))))))]\n                  (f x (flatten (repeat fs)))))","problem":144,"user":"4eec82fe535d93acb0a668ae"},{"problem":144,"code":"(fn [n & f]\n  (reductions \n   #(%2 %1)\n   n\n   (cycle f)))","user":"53034738e4b0d8b024fd373e"},{"code":"(fn my-iter [x & f]\n  (let [r #(take (count %2) (drop (mod % (count %2)) (cycle %2)))]\n    (cons\n      x\n      (lazy-seq\n        (apply my-iter ((first f) x) (r 1 f))))))","problem":144,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn osc [p & fns]\n    (letfn [\n        (rr [p [h & t]] (let [hp (h p)] (lazy-seq (cons p (rr hp (if (nil? t) fns t))))))\n    ]\n        (rr p fns)\n    )\n)","problem":144,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [x & fns] (map first (iterate (fn [[i [f & r]]] [(f i) r]) [x (cycle fns)])))","problem":144,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn [p & fs]\n  ((fn o [p fs]\n     (lazy-seq\n      (cons p (o ((first fs) p) (rest fs)))))\n   p (cycle fs)))","problem":144,"user":"52753740e4b03e8d9a4a74c1"},{"code":"(fn [x & ops] (reductions #(%2 %) x (cycle ops)))","problem":144,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn r [x f & g]\n           (lazy-seq (if (nil? g)\n                       [x (f x)]\n                       (cons x (apply r (f x) (conj (vec g) f)))\n                       )\n             )\n         )","problem":144,"user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn oscilrate\n    [val & fns]\n    (letfn [(extract [[val [head-fn & rest-fns]]]\n              [(head-fn val) rest-fns])]\n      (map first (iterate extract [val (cycle fns)]))))","problem":144,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn oscilate [n & fs]\n  (letfn [(osc [n cfs]\n                (lazy-seq (cons n (osc ((first cfs) n) (rest cfs)))))]\n          (osc n (cycle fs))))","problem":144,"user":"4f0d093b535d0136e6c22313"},{"problem":144,"code":"(fn osc [i f & fs]\n\t(lazy-seq (concat [i] (apply osc (f i) (conj (into [] fs) f)))))","user":"551c66dae4b07993ea3788de"},{"problem":144,"code":"(fn [x & F]\n  (letfn [\n    (iter [x' F']\n      (lazy-seq (cons x' (iter ((first F') x') (rest F')))))]\n    (iter x (cycle F))))","user":"5901158de4b0438e51c2d039"},{"problem":144,"code":"(fn [n & fs]\n    (reductions #(%2 %1) n (cycle fs)))","user":"563cce5be4b0bfe05bf1183f"},{"problem":144,"code":"#((fn foo [v [f & r]]\n    (lazy-seq\n      (cons v (foo (f v) r)))) %1 (cycle %&))","user":"5590e55de4b0277789237676"},{"problem":144,"code":"(fn osc\n  ([i & args] \n   (let [f (first args)\n         v (f i)]\n     (lazy-seq (cons i \n                     (apply osc v (conj (vec (next args)) f)))))))","user":"56051095e4b08b23635d3162"},{"problem":144,"code":"(fn x\n  [v & f]\n  (lazy-seq\n   (cons v (apply x ((first f) v) (concat (rest f) [(first f)])))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn osc [v & fs]\n  (letfn [(helper [v rfs] \n                  (let [nextv ((first rfs) v)]\n                    (cons v (lazy-seq\n                             (if (= (count rfs) 1)\n                               (helper nextv fs)                      \n                               (helper nextv (rest rfs)))))))]\n    (helper v fs)))","problem":144,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn osc [i & fs] (let [ c (cycle fs) st (fn st [ff x] (cons x (lazy-seq (st (rest ff) ((first ff) x)))))] (st c i)))","problem":144,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn [i & f]\n  (map first\n    (iterate (fn [[v [g & h]]] [(g v) (concat h [g])]) [i f])))","problem":144,"user":"4e5411e8535d8a8b8723a279"},{"problem":144,"code":"(fn oscilrate [v & fs] (lazy-seq (let [fv ((first fs) v)] (cons v (apply (partial oscilrate fv) (conj (vec (rest fs)) (first fs)))))))","user":"542c1f73e4b0dad94371f29d"},{"problem":144,"code":"(fn applys[i & fs]\n    (reductions #(%2 %1) i (cycle fs)))","user":"573a0ecce4b0cd1946bd1088"},{"problem":144,"code":"(fn\n  [n & fs]\n  (reductions #(%2 %1) n (cycle fs)))","user":"52dfc89be4b09f7907dd1405"},{"problem":144,"code":"(fn oscilrate [v & fns]\n  (lazy-seq\n   (let [f     (first fns)\n         new-v (f v)]\n     (cons v (apply oscilrate new-v (rest (cycle fns)))))))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn oscilrate [value f & fs] (cons value (lazy-seq (apply oscilrate (cons (f value) (concat fs [f]))))))","problem":144,"user":"4fc5a693e4b0ee37620e17fc"},{"problem":144,"code":"(fn [i & fns]\n             (let [fnl (fn tr [j, s] (lazy-seq (cons ((first s) j) (tr ((first s) j) (rest s)))))]\n\n               (conj (fnl i (cycle fns)) i )\n               )\n             )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":144,"code":"(fn oscilrate [ini & f]\n  (cons ini (lazy-seq ((fn helper [prev g]\n    (if (empty? g)\n      (lazy-seq (helper prev f))\n      (cons ((first g) prev) (lazy-seq (helper ((first g) prev) (rest g)))))) ini f))))","user":"5746061ae4b009280f9f2b5b"},{"code":"(fn osci                                                                      \n  [v f & more]                                                                  \n  (cons v (lazy-seq (apply osci (f v) (concat more (list f)))))                 \n  )","problem":144,"user":"50573ed8e4b0012181721987"},{"code":"(fn [x & more] \n  (letfn [(f [y fs] \n          (cons y (lazy-seq (f ((first fs) y) (concat (rest fs) [(first fs)])))))]\n    (f x (seq more))))","problem":144,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn [init & ops]\n  (reductions #(%2 %1) init (cycle ops)))","problem":144,"user":"536f871de4b0fc7073fd6e7f"},{"problem":144,"code":"(fn o [i f & l] (lazy-seq (cons i (apply o (f i) (concat l [f])))))","user":"583048d9e4b051871117c007"},{"code":"(fn [a & fs]\n  (let [allfs (cycle fs)]\n    (map first (iterate (fn [[x f]] [((first f) x) (rest f)]) [a allfs]))))","problem":144,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":144,"code":"(fn oscilrate\n  [n & [head & tail]]\n  (cons n (lazy-seq (apply oscilrate (head n) (conj (vec tail) head)))))","user":"50310713e4b05b7df5a0b84c"},{"problem":144,"code":"(fn osc [i & [f & fs]]\n  (lazy-seq \n   (cons i \n         (apply osc (f i) \n              (concat fs [f])))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":144,"code":"(fn[n & fs] (reductions #(%2 %1) n (cycle fs)))","user":"52f426fce4b05e3f0be25f1e"},{"problem":144,"code":"(fn [init-val & funcs]\n  (reductions (fn [acc f]\n                (f acc))\n              init-val\n              (cycle funcs)))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn [n & f]\n  (reductions #(%2 %) n (cycle f)))","problem":144,"user":"51ad244fe4b09397d510977f"},{"problem":144,"code":"(fn my-iter [init & fns]\n  (let [my-rec (fn my-rec [init [f & fns]]\n                 (lazy-seq (cons init (my-rec (f init) fns))))]\n    (my-rec init (cycle fns))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":144,"code":"(fn Oscilrate [v & fns]\n  (reductions (fn [v f] (f v)) v (flatten (repeat fns))))","user":"562add6de4b00e49c7cb4834"},{"code":"(fn [a & f]\n  (let [funcs (cycle f)\n        nfuncs (fn [n] (reverse (take n (cycle f))))\n        appyf (fn [b n] ((apply comp (nfuncs n)) b))]\n    (cons a (map #(appyf a %) (drop 1 (range))))))","problem":144,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":144,"code":"(fn f [x & fs] (reductions #(%2 %) x (cycle fs)))","user":"53b15e6ee4b047364c04448f"},{"problem":144,"code":"(fn oscilrate [x f & fs]\n  (lazy-seq (cons x (apply oscilrate (f x) (conj (vec fs) f)))))","user":"504e108ce4b078edc5f593b3"},{"code":"(fn [v & fs]\n  (let [n (count fs)\n        fs (vec fs)]\n    (letfn [(rev [i v]\n              (lazy-seq\n               (cons v (rev (inc i)\n                            ((fs (mod i n)) v)))))]\n      (rev 0 v))))","problem":144,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn [l & lat] (reductions (fn [k v] (v k)) (cons l (cycle lat))))","problem":144,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [a & fs]\n  (reductions (fn [b f] (f b)) a (cycle fs)))","problem":144,"user":"4eb0a757535d7eef3080733d"},{"problem":144,"code":"(fn [x & fns]\n (letfn [(eval-fn [v [f & fs]]\n           (lazy-seq (cons v (eval-fn (f v) fs))))]\n   (eval-fn x (->> fns repeat flatten))))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn [a & fns] (reductions (fn [x f] (f x)) a (cycle fns)))","problem":144,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn [v & fns]\n  (map first\n       (iterate (fn [[x fns]]\n                  [((first fns) x) (rest fns)])\n                [v (cycle fns)])))","problem":144,"user":"529f71aae4b04e0c58e87bac"},{"problem":144,"code":"(fn [v & fs]\n  (letfn [(o [v fc] (lazy-seq (cons ((first fc) v) (o ((first fc) v) (rest fc))) ))]\n  (cons v (o v (cycle fs)))))","user":"56bca51ae4b0f26550335963"},{"problem":144,"code":"(fn [a & f]\n(let [ff (cycle f)]\n((fn dd [a ff]\n(cons a (lazy-seq (dd\n((first ff) a)(rest ff))))) a ff)\n))","user":"5951190be4b066ee0a44aea4"},{"problem":144,"code":"(fn oscilrate [initial-value & rest]\n   (let [inside (fn inside [current-value fs current-index]\n     (cons current-value (lazy-seq (inside ((nth fs current-index) current-value) fs (mod (inc current-index) (count fs)))))\n    )]\n   \n   (inside initial-value rest 0)\n  )  \n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn oscilrate [v & fs]\n    (let [all-fs (apply concat (repeat fs))\n          oscil-i (fn oscil-i [v fs]\n                    (lazy-seq\n                      (let [cv ((first fs) v)]\n                        (cons cv (oscil-i cv (rest fs))))))]\n      (cons v (oscil-i v all-fs))))","problem":144,"user":"515737f0e4b0b0b4b87062d0"},{"problem":144,"code":"(fn [init & funcs]\n  (let [q (fn appl [i n]\n               (cons ((nth funcs n) i)\n                     (lazy-seq (appl ((nth funcs n) i) (mod (inc n) (count funcs))\n                                     ))))]\n    (cons init (q init 0))))","user":"53664e3be4b0243289761e74"},{"code":"#(reductions (fn [a b] (b a)) % (cycle %&))","problem":144,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":144,"code":"(fn oscilrate [init & fns]\n  (cons init\n        (lazy-seq (apply oscilrate ((first fns) init)\n                                  (next (if (= \"class clojure.lang.Cycle\" (type fns)) fns (cycle fns)))))))","user":"5958cef6e4b066ee0a44af94"},{"problem":144,"code":"(fn [n & fs]\n  (let [c (cycle fs)\n        d (fn g [i [f & r]]\n            (lazy-seq (cons i (g (f i) r))))]\n    (d n c)))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":144,"code":"(fn [x & fs]\n  (let [fsi (cycle fs)]\n    (letfn\n        [(step [y fs']\n           (let [y' ((first fs') y)\n                 fs'' (rest fs')]\n             (cons y' (lazy-seq (step y' fs'')))))]\n      (cons x (lazy-seq (step x fsi))))\n ))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [s & f]\n  (reductions #(%2 %1) s \n    (flatten (repeat f))))","problem":144,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn oscilrate [x & fns]\n  (let [nxt (reductions #(%2 %1) x fns)]\n    ;(prn \"x\" x \"nxt\" nxt \"lst\" (last nxt))\n    (lazy-cat nxt (rest (apply oscilrate (last nxt) fns))))\n  )","problem":144,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn\n  [init & fns]\n  (reductions #(%2 %) init (cycle fns)))","problem":144,"user":"511b233ae4b07ab9ec456180"},{"problem":144,"code":"(fn [v & op] (reductions #(%2 %1) v (cycle op)))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":144,"code":"(fn [x & fs]\n  ((fn step [x [f & fs]]\n     (lazy-seq (cons x (step (f x) fs))))\n    x (cycle fs)))","user":"56dc3bdfe4b0ea9b8538f819"},{"code":"(fn [x & funs]\n\t(reductions #(%2 %)\n\t\tx\n\t\t(cycle funs)))","problem":144,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [i & fs] (reductions #(%2 %) i (cycle fs)))","problem":144,"user":"4fd96694e4b05e33b9224f37"},{"problem":144,"code":"(fn oscilrate\n  [v & fns]\n  (reductions\n   #(%2 %1)\n   v\n   (cycle fns)))","user":"53b952eee4b047364c0444e6"},{"problem":144,"code":"(fn [initial-x & initial-fs]\n  (letfn [(iter [x fs]\n            (lazy-seq\n              (let [x' ((first fs) x)]\n                (cons x (iter x' (rest fs))))))]\n    (iter initial-x (cycle initial-fs))))","user":"4e6a2f93535d8ccf87e9feaa"},{"problem":144,"code":"(fn [n & fns]\n    (letfn [(step [n f & fs]\n              (cons n (lazy-seq\n                       (let [v (f n)]\n                         (apply step v (concat fs (list f)))))))]\n      (apply step n fns)))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn [v & s]\n  (reductions #(%2 %) v (cycle s)))","problem":144,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":144,"code":"(fn [x & fs]\n  (let [steve (fn steve [v [f & fs]]\n                (cons \n                  v\n                  (lazy-seq\n                    (steve\n                      (f v)\n                      fs))))]\n    (steve x (cycle fs))))","user":"5bab5440e4b0a20761a23475"},{"problem":144,"code":"(fn [value & fns] (reductions #(%2 %) value (cycle fns)))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn o [x & [f & fs]]\n  (cons x (lazy-seq (apply o (f x) (concat fs [f])))))","problem":144,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn osc [x & fns] (reductions #(%2 %1) x (cycle fns)))","problem":144,"user":"4edecdae535d10e5ff6f533c"},{"problem":144,"code":"(fn osci [init & funcs]\n  (lazy-seq\n   (cons init (apply osci (cons ((first funcs) init) (rest (cycle funcs)))))))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn osciter [init & funcs]\n  (cons init\n        (lazy-seq (apply osciter\n                         ((first funcs) init)\n                         (concat (rest funcs) (list (first funcs)))))))","problem":144,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [v & fs]\n  (letfn [(o [v [f & r]] (lazy-seq (cons v (o (f v) r))))]\n    (o v (cycle fs))))","problem":144,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn [n & ops]\n  (reductions #(%2 %) n (cycle ops)))","problem":144,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [x & fs] (letfn [(o [x fs] (cons x (lazy-seq (o ((first fs) x) (next fs)))))] (o x (cycle fs))))","problem":144,"user":"500854c4e4b028e089d3518c"},{"code":"(fn oscilrate \n  [value & fns]\n  (if (empty? fns) [value]\n    (cons value (lazy-seq \n      (apply (partial oscilrate ((first fns) value)) \n                                    (concat (rest fns) [(first fns)]))))))","problem":144,"user":"4dcfbc44535d5973398f92a7"},{"problem":144,"code":"(fn f [x y & z]\n  (lazy-seq\n   (cons x \n         (apply f (y x) (concat z [y])))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":144,"code":"(fn[i & f](reductions #(%2 %)i(cycle f)))","user":"50ed4626e4b01236b1d4983c"},{"problem":144,"code":"(fn oscilrate1\n  [init & f]\n  (reductions #(%2 %1) init (cycle f)))","user":"557e9d17e4b05c286339e0d8"},{"problem":144,"code":"(fn [v & fns]\n  (letfn [(oscilrate [v & [f & rst]]\n            (let [rv (f v)]\n              (lazy-seq (cons rv (apply oscilrate rv (conj (vec rst) f))))))]\n    (cons v (apply oscilrate v fns))))","user":"54b40fe6e4b05787c3b1638a"},{"code":"(fn [v & fns]\n  (map first\n    (iterate (fn [[x i]]\n               (let [next-x ((nth fns (rem i (count fns))) x)]\n                 [next-x (inc i)]))\n             [v 0])))","problem":144,"user":"504c8165e4b09724c857af31"},{"problem":144,"code":"(fn [x & fs]\n  (map first (iterate (fn [[x [f & fs]]]\n                        [(f x) (concat fs [f])])\n                      [x (vec fs)])))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":144,"code":"(fn oscilrate [initial & fns]\n  (letfn [(oscilrate-r [value fns]\n    (lazy-seq (cons value (oscilrate-r ((first fns) value) (next fns))))\n    )]\n    (oscilrate-r initial (cycle fns))\n))","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn [v & funcs]\n  (if (empty? funcs)\n    (repeat v)\n    (let [helper (fn helper [v current]\n                   (lazy-seq\n                    (cons\n                     v\n                     (helper ((first current) v)\n                             (or (next current) funcs)))))]\n      (helper v funcs))))","problem":144,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn [m & fs]\n  (cons m\n        ((fn g [n [h & t]]\n           (cons (h n)\n                 (lazy-seq (g (h n) t)))) m (cycle fs))))","problem":144,"user":"4db016af838c48654951d9b9"},{"problem":144,"code":"(fn oscilrate [n & sf]\n  (let [looper (fn looper [n sf]\n                 (lazy-seq (cons n (looper ((first sf) n) (rest sf)))))]\n    (looper n (flatten (repeat sf)))))","user":"590b055ae4b047aa04b199c9"},{"problem":144,"code":"(fn [x & fns]\n  (let [fns-coll (flatten (repeat fns))]\n    (letfn [(oscilrate [n fns]\n                       (lazy-seq\n                        (when-let [[head & tail] (seq fns)]\n                          (cons n (oscilrate (head n) tail)))))]\n      (oscilrate x fns-coll))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":144,"code":"(fn repeat-f123 [v & cl] (cons v (when-let [cf cl]\n  (lazy-seq (apply repeat-f123 (cons ((first cf) v) (conj (vec (rest cf)) (first cf)) ))  \n  ))))","user":"55adf4d7e4b03311e7b732af"},{"problem":144,"code":"(fn o [v & fs] \n  (lazy-seq (cons v (let [f (first fs)\n                          fs (conj (vec (rest fs)) f)]\n                      (apply (partial o (f v)) fs)))))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn [x & fns] \n   (reductions \n    (fn [r f] (println :f f :r r)(f r)) x \n    (cycle fns)))","problem":144,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn\n  [val & fns]\n  (letfn [(oscilate [val fs]\n            (lazy-seq \n             (let [v ((first fs) val)]\n               (cons v\n                     (oscilate v \n                               (if (seq (rest fs))\n                                 (rest fs)\n                                 fns))))))]\n    (cons val (oscilate val fns))))","problem":144,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn os [n & f] (let [d (cycle f)] (letfn [(m [[h & t] k] (lazy-cat [(h k)] (m t (h k))))] (lazy-cat [n] (m d n)))))","problem":144,"user":"4ede8789535d10e5ff6f5337"},{"problem":144,"code":"#(reductions (fn [acc f] (f acc)) %1 (cycle %&))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [x & fs] \r\n  (let [rotate #(let [n (count %2)] (take n (drop (mod %1 n) (cycle %2))))\r\n        build-seq\r\n          (fn foo [x fs]\r\n            (let [x' ((first fs) x)\r\n                  fs' (rotate 1 fs)]\r\n              (cons x (lazy-seq (foo x' fs')))))]\r\n    (build-seq x fs)))","problem":144,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":144,"code":"(fn oscilrate\n  [val & funcs]\n  (let [[func & others] funcs]\n    (cons val (lazy-seq (apply oscilrate (func val) (concat others (list func))))\n  )))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":144,"code":"(fn [x & fs]\n  (letfn [(oscr [x fs]\n            (let [y (reduce (fn [a b] (conj a (b (last a)))) [x] fs)]\n              (lazy-seq\n                (concat (drop-last y) (oscr (last y) fs)))))]\n    (oscr x fs)))","user":"58bb218be4b0888cdc949cf4"},{"problem":144,"code":"(fn b [v h & t] \n  (cons v (lazy-seq (apply b (cons (h v) (conj (vec t) h))))))","user":"4faf97d8e4b081705acca258"},{"code":"(fn [x & xs] \r\n(reductions (fn [a f] (f a)) x (cycle xs)))","problem":144,"user":"517945dce4b0684c1c981a43"},{"code":"(fn oscilrate [v & fs]\n    (lazy-seq\n      (let [z (reductions #(%2 %1) v fs)]\n        (concat (drop-last z) (apply oscilrate (cons (last z) fs))))))","problem":144,"user":"51780f88e4b03d69594194c9"},{"code":"(fn [x & fs]\n    (cons x\n      ((fn thisfunc [x fs]\n         (let [result ((first fs) x)]\n           (cons result\n             (lazy-seq (thisfunc result (rest fs))))))\n       x (cycle fs))))","problem":144,"user":"4dd9d299535d2dad7130b5dd"},{"problem":144,"code":"(fn oscilrate [v & fns]\n  (reductions #(%2 %) v (cycle fns)))","user":"575b3e9be4b02ea11479935b"},{"problem":144,"code":"(fn [param & funcs]\n  (let [osc (fn osc [param [fst & rst]]\n              (lazy-seq (concat [param] (osc (fst param) rst))))]\n    (osc param (cycle funcs))))","user":"56795deae4b05957ce8c6187"},{"problem":144,"code":"(fn [x & fns]\n  (reductions #(%2 %1) x (cycle fns)))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn f [i & fs]\n  (let [ff (first fs)\n        nfs (concat (rest fs) [ff])]\n    (lazy-seq\n     (cons i\n           (apply f (cons (ff i) nfs))))))","problem":144,"user":"5027b41ee4b01614d1633fee"},{"problem":144,"code":"(fn f [init & args]\n  (lazy-seq (cons init\n                  (apply f ((first args) init)\n                         (concat (drop 1 args) (take 1 args)))\n                  )))","user":"60096aabe4b074f607df667f"},{"problem":144,"code":"(fn [v & fs]\n    (let [f (fn [[v fs]] (vector ((first fs) v) (rest fs)))]\n      (map first (iterate f [v (cycle fs)]))))","user":"4e837808535db62dc21a62d9"},{"problem":144,"code":"(fn c [v & fns]\n  (cons v\n        (lazy-seq\n         (apply c ((first fns) v) (conj (vec (rest fns)) (first fns))))))","user":"586615e6e4b0f14aab7c8858"},{"problem":144,"code":"(fn [u & v] ((fn peu [x y] (cons x (lazy-seq (peu ((first y) x) (concat (rest y) (list (first y))) ) )) ) u v))","user":"53fc8424e4b0de5c418485b3"},{"problem":144,"code":"(fn oscilrate [x & fs]\n  (lazy-seq (cons x\n                  (let [next-res ((first fs) x)\n                        rotated-fs (conj (vec (rest fs)) (first fs))]\n                    (apply oscilrate (cons next-res rotated-fs))))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn [v & fs] (reductions (fn [v f] (f v)) v (cycle fs)))","problem":144,"user":"4f6010e7e4b0defedf855fa1"},{"problem":144,"code":"(fn Oscilrate [seed & funcs]\n  (let [res ((first funcs) seed)]\n    (lazy-seq (cons seed (apply Oscilrate (into [res] (conj (vec (rest funcs)) (first funcs))))))\n\n    ))","user":"5e207f12e4b05b4b01516112"},{"code":"(fn oscilrate [x & fs]\n  (lazy-seq\n   (let [f (first fs)]\n     (cons x (apply oscilrate (concat [(f x)] (rest fs) [f]))))))","problem":144,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":144,"code":"(fn [x & fs] (letfn [(c [[f & fs] x] (lazy-seq (cons x (c fs (f x)))))] (c (cycle fs) x)))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":144,"code":"(fn __ [x & f] (reductions #(%2 %1) x (cycle f)))","user":"55e206f3e4b050e68259b429"},{"problem":144,"code":"(fn oscil [n & fs]\n  (let [v (vec fs)]\n    ((fn iter [counter result]\n      (cons result (lazy-seq (iter (inc counter) ((v (rem counter (count v))) result))))) 0 n)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":144,"code":"(fn osc [x & xs]\n    (if (seq? x)\n      (do (let [y (first x) zs (rest x)]\n            (cons ((first zs) y) (lazy-seq (osc (cons ((first zs) y) (flatten (conj (vector (drop 1 zs)) (first zs)))))))))\n      (cons x (cons ((first xs) x) (lazy-seq (osc (cons ((first xs) x) (flatten (conj (vector (drop 1 xs)) (first xs))))))))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn [x & fs] (reductions (fn [x f] (f x)) x (cycle fs)))","problem":144,"user":"4fa6a491e4b081705acca1bc"},{"problem":144,"code":"(fn oscilrate [v & fs]\n  (letfn\n      [(rotate [s] (concat (rest s) (list (first s))))\n       (funring [s] (let [s0 (atom s)] #((last (swap! s0 rotate)) %)))]\n    (iterate (funring fs) v)))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn a [v & fns]\n  (cons v \n    (lazy-seq (apply a ((first fns) v) (concat (rest fns) (list (first fns)))))))","problem":144,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn o [x & fs] (cons x (lazy-seq (apply o (cons ((first fs) x) (concat (rest fs) (take 1 fs)))))))","problem":144,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn i [n f & fns]\n  (cons n (lazy-seq (apply i (f n) `(~@fns ~f)))))","problem":144,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [v & fs]\n  ((fn $ [v fs]\n     (cons v\n            (lazy-seq ($ ((first fs) v) (concat (rest fs) [(first fs)])))))\n   v fs))","problem":144,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":144,"code":"(fn oscilate [init & [f & fns]]\n  (lazy-seq\n    (cons init (apply oscilate (f init) (concat fns [f])))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn [v & fns]\n  (map first (iterate (fn [[v fns]] (vector ((first fns) v) (conj (vec (rest fns)) (first fns)))) [v fns])))","problem":144,"user":"50a2f901e4b029e8bace362a"},{"problem":144,"code":"(fn [base & fs]\n        (let [aux\n              (fn step [curr idx]\n                (lazy-seq\n                 ((fn[]\n                    (let [f (nth fs idx)\n                          next (mod (inc idx) (count fs))]\n                    (cons curr (step (f curr) next)))))))]\n          (aux base 0)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":144,"code":"(fn oscillate [a & b]\n  (letfn [(p-osci [v fs]\n            (lazy-seq (cons ((first fs) v)\n                            (p-osci ((first fs) v) (rest fs)))))]\n    (p-osci a (cons identity (cycle b)))))","user":"5843b95de4b089d5ab817e3f"},{"problem":144,"code":"(fn [start & fns] \n  (reductions \n   (fn [acc f] (f acc)) \n   start \n   (cycle fns)))","user":"4e0e0529535d04ed9115e7b9"},{"problem":144,"code":"(fn [x & fs] (cons x ((fn a [lx] (lazy-seq (let [fs (vec fs) t (map (fn [n] (reduce #(%2 %) lx (subvec fs 0 (inc n)))) (range (count fs)))] (concat t (a (last t)))))) x)))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":144,"code":"(fn oscilrate [initVal & functions]\n  (letfn [(innerOscilrate [prevVal functions]\n                 (lazy-seq\n                  (cons prevVal (innerOscilrate ((first functions) prevVal) (rest functions)))))]\n    (innerOscilrate initVal (cycle functions))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn os [x & fs]\n  (cons x (lazy-seq (apply os (concat [((first fs) x)] (rest fs) [(first fs)])))))","problem":144,"user":"4ea365e2535d7eef308072c5"},{"problem":144,"code":"(fn osc [v & fs]\n           (let [vs ((fn cyc [v fs]\n                       (if (= (count fs) 1)\n                         [v ((first fs) v)]\n                         (cons v (cyc ((first fs) v) (rest fs))))) v fs)]\n             (lazy-seq\n               (concat (drop-last vs) (apply (partial osc (last vs)) fs)))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn osc [n & args] \n  (reductions #(%2 %1) n (cycle args))\n)","problem":144,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn it* [v & fs] \n  (cons v \n    (lazy-seq \n      (apply it* \n        (cons ((first fs) v) \n(concat (rest fs) (take 1 fs)))))))","problem":144,"user":"4fd81472e4b0dab7d829f38e"},{"code":"(fn O [d & f]\n  (lazy-seq\n    (cons d (apply O \n            ((first f) d)\n            (conj (vec (rest f)) (first f))))))","problem":144,"user":"4f0446f9535dcb61093f6bb8"},{"problem":144,"code":"(fn oscilrate2 [n & fs]\n  (reductions (fn [acc f] (f acc)) n (cycle fs)))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":144,"code":"(fn solution [initial & fs]\n  (let [f (first fs) left (rest fs) val (f initial)]\n    (lazy-seq (cons initial (apply solution val (conj (vec left) f))))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":144,"code":"(fn [n & fs]\n  (let [step (fn step [n fs fs']\n               (if-let [f (first fs)]\n                 (let [n (f n)]\n                   (cons n (lazy-seq (step n\n                                           (rest fs)\n                                           (conj fs' (first fs))))))\n                 (step n fs' [])))]\n    (cons n (step n fs []))))","user":"5591cc56e4b0604b3f94d582"},{"problem":144,"code":"(fn [v & fns]\n  (letfn [(osc [v [f & fns]]\n            (cons (f v) (lazy-seq (osc (f v) (concat fns [f])))))]\n    (cons v (osc v fns))))","user":"554bd33ce4b0a04f7929959a"},{"problem":144,"code":"(fn osc [arg & ops]\n  (lazy-seq (cons arg (apply osc ((first ops) arg) (concat (next ops) (list (first ops))))))\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":144,"code":"(fn it [v f & fns]\n  (cons v (lazy-seq  (apply it (f v) (concat fns [f]) ))))","user":"541ddadbe4b01498b1a71a84"},{"problem":144,"code":"; stolen solution (fn [i & f] (reductions #(%2 %) i (cycle f)))\n(fn osci [val & col] (reductions #(%2 %1) val (flatten (repeat col))))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn aa [n & fns]\n  (let [fcs (flatten fns)]\n     \n  \t(cons n \n        (lazy-seq \n         \t(aa ((first fcs) n) \n            \t(conj (vec (rest fcs)) (first fcs))\n        \t)\n         )\n    )\n  )\n)","problem":144,"user":"5105ed16e4b01150e115ebe2"},{"problem":144,"code":"(fn oscilrate [init & fncs]\n  (reductions #(%2 %1) init (cycle fncs)))","user":"540c54a7e4b0addc1aec6700"},{"problem":144,"code":"(fn o [x f & fs]\n  (lazy-seq (cons x (apply o (concat [(f x)] fs [f])))))","user":"596a66cde4b069c0a1a19803"},{"problem":144,"code":"(fn [x & funcs]\r\n  (let [\r\n    osc-iter (fn osc-iter [x [head & tail]]\r\n      (cons x (lazy-seq (osc-iter (head x) tail))))]\r\n    (osc-iter x (apply concat (repeat funcs)))))","user":"555bd27ae4b0b056612e2244"},{"problem":144,"code":"(fn osc [ n f & fx ]        \n  (let [v (f n)\n        rotate (conj (vec fx) f)]\n    (lazy-seq (cons n  (apply osc v rotate)))))","user":"57887de2e4b0ebec4cfb751c"},{"problem":144,"code":"(fn [v & fs]\n  (let [osc (fn osc [x i]\n              (let [y ((nth fs (mod i (count fs))) x)]\n                (cons y (lazy-seq (osc y (inc i))))))]\n    (cons v (osc v 0))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":144,"code":"(fn [n & fns] \n  (reductions #(%2 %) n (cycle fns)))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn [x & s]\n  ((fn f [x s]\n    (lazy-seq\n     (cons x\n           (f ((first s) x) (rest s)))))\n   x (cycle s)))","problem":144,"user":"523ed522e4b057c4b7cd0a78"},{"problem":144,"code":"(fn f [w & hs] (let [ g (fn [x & fs]\n                                   (loop [[y & ys] fs r [x]]\n                                     (if y\n                                       (let [t (y (last r))] (recur ys (conj r t)))\n                                       r)))\n                               i (apply g w hs)]\n                          (concat i (lazy-seq (rest (apply f (last i) hs))))))","user":"545ddac3e4b01be26fd74676"},{"problem":144,"code":"(fn oscilrate\n  [x & fns]\n  (letfn [(oscil [x fns]\n            (let [f (first fns)\n                  y (f x)]\n              (lazy-seq (cons x (oscil y (rest fns))))))]\n    (oscil x (cycle  fns))))","user":"52761edae4b03e8d9a4a74d4"},{"code":"(fn [v & fs] (reductions #(%2 %1) v (cycle fs)))","problem":144,"user":"4f569a3ce4b0a7574ea71828"},{"problem":144,"code":";i'm ashamed of this\n(fn oscilrate \n  [value & funcs]\n    (letfn [\n      (it [value & funcs]\n      (let [new-val ((first funcs) value) new-funcs (concat (rest funcs) [(first funcs)])]\n        (lazy-seq (cons new-val (apply it new-val new-funcs)))\n      ))]\n    (cons value (apply it value funcs))\n    )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":144,"code":"(fn f [init & fs]\n    (let [ff (fn ff [now fs]\n               (lazy-seq\n                (cons now\n                      (ff ((first fs)\n                           now)\n                          (rest fs)))))]\n      (ff init (cycle fs))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":144,"code":"(fn osc-seq [n & fs]\n  (lazy-seq (cons n (apply osc-seq ((first fs) n) (conj (vec (rest fs)) (first fs))))))","user":"51dafedee4b09f6bc204eee2"},{"code":"(fn [initial-value & fns]\n  (letfn [(make-seq [value fns]\n            (cons value (lazy-seq (make-seq ((first fns) value)\n                                            (rest fns)))))]\n    (make-seq initial-value (cycle fns))))","problem":144,"user":"4e7c8fd1535db169f9c796be"},{"problem":144,"code":"(fn oscilrate [x & fns]\n           (lazy-seq \n             (cons x\n                   (apply oscilrate \n                          (cons \n                            ((first fns) x)                   ;apply\n                            (conj (vec(rest fns)) (first fns)) ;cycle\n                           )\n                     )\n                   )\n             \n             )\n           )","user":"538c17cae4b0b51d73faae54"},{"problem":144,"code":"(fn oscilrate\r\n  [a & fs]\r\n  (reductions\r\n    #(%2 %1)\r\n    a\r\n    (cycle fs)))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [x & fs]\n  (reductions (fn [x f] (f x))\n          x (cycle fs)))","problem":144,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"(fn f [n & fs] (lazy-seq (concat [n] (apply f ((first fs) n) (concat (rest fs) [(first fs)])))))","problem":144,"user":"50bce014e4b0594b91591c63"},{"problem":144,"code":"(fn [x & fs]\n         (letfn [(oscilrate [x  fs]\n                   (cons\n                    ((first fs) x)\n                    (lazy-seq\n                     (oscilrate ((first fs) x) (rest fs)))))]\n           (cons x (lazy-seq (oscilrate x (cycle fs))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":144,"code":"(fn [v & fs] (\n      cons v ((fn f[v fs] (\n              lazy-seq (#(concat % (f (last %) fs))  \n                (rest (reductions #(%2 %1) v fs)))\n                    )) v fs)\n                ))","user":"596f6683e4b069c0a1a19877"},{"problem":144,"code":"(fn a [x & more]\n  (let [fx ((first (flatten more)) x) fs (flatten(conj  (conj '() (first (flatten more))) (rest (flatten more))))]\n    (lazy-seq (cons x (a fx fs)))))","user":"5c72c2b9e4b0fca0c16227ab"},{"code":"(fn\n  [n & fns]\n  (reductions #(%2 %1) n (cycle fns)))","problem":144,"user":"51852961e4b0da5a5be3babb"},{"problem":144,"code":"(fn [initial & fs]\n  ((fn step\n    ([] (step initial 0))\n    ([value ith] \n     \t(lazy-seq \n         \t(cons value \n                  (step ((nth (cycle fs) ith) value) (inc ith))))\n    ))))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":144,"code":"(fn o [x f & fs]\n  (cons x\n     (lazy-seq (apply o (f x) (concat fs [f])))))","user":"54924f64e4b0b312c081ff42"},{"code":"(fn o [v f & r]\n    (lazy-seq\n      (cons v (apply o (f v) (concat r [f])))))","problem":144,"user":"4ec74de3535d6d7199dd36df"},{"problem":144,"code":"(fn wrapper [x & funs]\n  (letfn [(oscilrate [x & funs]\n    (let [f (first funs)\n          nx (f x)\n          nfuns (concat (rest funs) [f])]\n      (lazy-seq (cons nx (apply oscilrate nx nfuns)))))]\n  (cons x (apply oscilrate x funs))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn oscilrate [& args]\n  (letfn [(wrap-around [l] (concat (rest l) (take 1 l)))\n          (expand-osc [v fs] (cons v (lazy-seq (expand-osc ((first fs) v) (wrap-around fs)))))]\n    (expand-osc (first args) (rest args))))","problem":144,"user":"51d360d1e4b099f3b6acddff"},{"problem":144,"code":"(fn __\n  [x & functions]\n  (let [[f & fs] (cycle functions)]\n    (lazy-seq (cons x (apply __ (f x) fs)))))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn [x0 & fs] (reductions #(%2 %1) x0 (cycle fs)))","problem":144,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":144,"code":"(fn oiter [x & fs]\n    (letfn [(coiter [xx ffs]\n              (cons xx (lazy-seq (coiter ((first ffs) xx) (rest ffs)))))]\n      (coiter x (cycle fs))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":144,"code":"(fn test [x & fs]\n       (reductions  #(%2 %1) x (cycle fs) ))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn [initial & funcs] \n  (reductions (fn [x f] (f x)) initial (cycle funcs)))","problem":144,"user":"4ff83003e4b0678c553fc396"},{"problem":144,"code":"(fn it* [v & fs]\n  (cons v \n    (lazy-seq\n      (apply it* \n        (cons ((first fs) v)\n(concat (rest fs) (take 1 fs)))))))","user":"5ae0976be4b0837691e92c43"},{"problem":144,"code":"(fn [init & f] (reductions #(%2 %1) init (cycle f)))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn o [x & fs]\n  (reductions #(%2 %) x (cycle fs)))","problem":144,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn oscillate [v & fs]\n  (letfn [(osc-helper [v n]\n            (let [next-v ((nth fs n) v)\n                  next-n (mod (inc n) (count fs))]\n              (lazy-seq (cons next-v (osc-helper next-v next-n)))))]\n    (cons v (osc-helper v 0))))","problem":144,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [i & f] (reductions #(%2 %1) i (cycle f)))","problem":144,"user":"5107b86de4b05b2b4eee7495"},{"code":"(fn oscilrate [init & fns]\n  (reductions (fn [init f] (f init)) init (cycle fns)))","problem":144,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":144,"code":"(fn [v & fns]\n  (reductions #(%2 %) v (cycle fns)))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn cycl [v & [f & fs]] (lazy-seq (cons v (apply cycl (f v) (concat fs [f])))))","problem":144,"user":"4db92654535d1e037afb21a0"},{"code":"(fn o [x & [f & g]]\n  (lazy-seq\n    (cons x (apply o (f x) (conj (vec g) f)))))","problem":144,"user":"539a2901e4b0b51d73faaf0f"},{"problem":144,"code":"(fn oscillating-iter [n & fns]\n  (lazy-seq\n   (cons n\n         (apply oscillating-iter\n                (let [new-value ((first fns) n)\n                      rotated-fns (conj (vec (drop 1 fns)) (first fns))]\n                  (cons new-value rotated-fns))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn g [v & fs]\n  (lazy-seq\n   (cons v (apply g ((first fs) v) (rest (cycle fs))))))","problem":144,"user":"509160dae4b0742c82730aef"},{"problem":144,"code":"(fn [i & fns] (reductions(fn [a f] (f a)) i (cycle fns)))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn oscilrate [start-val & funs]\n  (reductions #(%2 %1) start-val (cycle funs))\n  )","problem":144,"user":"5094057fe4b097f48cc38593"},{"code":"(fn [v & fns]\r\n  (reductions #(%2 %1) v (cycle fns)))","problem":144,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn oscilrate [v & fns]\n  (letfn [(f [v & fns]\n             (let [f1 (first fns)\n                   new-val (f1 v)]\n             (cons new-val (lazy-seq (apply f new-val (concat (rest fns) [f1]))))))]\n    (cons v (apply f v fns))\n    )\n\n  )","problem":144,"user":"51281b25e4b03a34742b4304"},{"problem":144,"code":"(fn\tosc\n\t[n & f]\n\t(let [flat (flatten f)]\n\t\t(lazy-seq (cons n (osc ((first flat) n) (concat (drop 1 flat) (take 1 flat)))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":144,"code":"(fn oscilrate\n  [x & [f & r]]\n  (lazy-seq (cons x (apply oscilrate (f x) (conj (vec r) f)))))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"#(lazy-seq (reductions (fn [x f] (f x)) % (cycle %&)))","problem":144,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":144,"code":"(fn oscilrate\n  [val & functions]\n  (letfn [ (f [n val fs]\n             (let [nv ((nth fs n) val)]\n               (lazy-seq (cons val (f (mod (inc n) (count fs)) nv fs)))))]\n    (f 0 val (apply vector functions)))\n )","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn oscilrate [x & [f & fs]]\n  (lazy-seq\n   (cons x (apply oscilrate (f x) (concat fs (list f))))))","problem":144,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":144,"code":"(fn f [x & fns]\n  (reductions #(%2 %1) x (cycle fns)))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":144,"code":"(fn [x & args]\n  (cons x \n    ((fn step [x fs]\n      (let [fx ((first fs) x)]\n        (lazy-seq (cons fx (step fx (rest fs))))))\n     x (cycle args))))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn [i & fs]\n  ((fn osc [lv i]\n    (lazy-seq \n      (cons lv \n        (osc ((nth fs i) lv) (mod (inc i) (count fs))))))\n    i 0))","problem":144,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [i & f]\r\n  (reductions #(%2 %1) i (cycle f)))","problem":144,"user":"4fabb3e1e4b081705acca21c"},{"problem":144,"code":"(fn oscilrate [init & fs]\n  (loop [[f & fs] (cycle fs) ys (list init) i 100]\n    (if (zero? i)\n      (reverse ys)\n      (recur fs\n             (cons (f (first ys)) ys)\n             (dec i)))))","user":"58b81490e4b0ebc645576d8c"},{"problem":144,"code":"(fn oscilrate [init & funcs]\n  (let [funcs (flatten (repeat funcs))]\n    (reductions #(%2 %1) init funcs)))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [val & funs]\n    (reductions (fn [m v] (v m)) val (cycle funs)))","problem":144,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn prob-0144\n  [v & fns]\n  (let [cycle-fns (fn cycle-fns\n                    [v fns]\n                    (lazy-seq\n                     (cons v (cycle-fns ((first fns) v) (rest fns))))) ]\n    (cycle-fns v (cycle fns))))","problem":144,"user":"4f047c07535dcb61093f6bcd"},{"problem":144,"code":"(fn [x & fs] (reductions (fn [v f] (f v)) x (cycle fs)))","user":"4fcf1755e4b03432b189f40c"},{"code":"(fn [v & fns]\r\n    (let [f (fn f [v fns] \r\n              (lazy-seq \r\n                (cons v \r\n                      (f ((first fns) v) \r\n                         (reverse \r\n                           (conj (reverse (rest fns)) \r\n                                 (first fns)))))))]\r\n      (f v fns)\r\n    ))","problem":144,"user":"4f0da4e4535d0136e6c22319"},{"problem":144,"code":"(fn [value & fs] (reductions #(%2 %1) value (cycle fs)))","user":"4fecebe1e4b0681fd128dcac"},{"code":"(fn oscilrate [i & fns]\n  (reductions (fn [x f] (f x)) i (cycle fns)))","problem":144,"user":"4e7f51eb535db966e863cc3f"},{"problem":144,"code":"(fn osc [v & fs] (lazy-seq (cons v (apply (partial osc ((first fs) v)) (conj (vec (rest fs)) (first fs))))))","user":"5367bc60e4b0243289761e81"},{"code":"(fn [x & s] (reductions #(%2 %) x (cycle s)))","problem":144,"user":"526a7025e4b03e8d9a4a722a"},{"code":"(fn inf-map\r\n  [n & fns]\r\n  (lazy-seq\r\n   (cons n (apply inf-map ((first fns) n) (concat (rest fns) [(first fns)])))))","problem":144,"user":"4e568873535d8a8b8723a283"},{"code":"(fn funcseq [x & fs] ((fn !! [x [f & fs]] (cons x (lazy-seq (!! (f x) fs)))) x (cycle fs)))","problem":144,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":144,"code":"(fn osci [v & fns]\n  (letfn [(osci-helper [v & fns]\n            (if (seq fns)\n              (cons v (lazy-seq (apply osci-helper ((first fns) v) (rest fns))))\n              '(v)))]\n    (apply osci-helper v (cycle fns))))","user":"534d1173e4b084c2834f4a98"},{"code":"(fn [v & funs]\n((fn foo [v funs]\n  (lazy-seq\n    (cons v\n      (foo \n        ((first funs) v)\n        (concat (rest funs) [(first funs)])))))\nv\nfuns))","problem":144,"user":"4f03154a535dcb61093f6a58"},{"problem":144,"code":"(fn [val & fns] (reductions #(%2 %) val (cycle fns)))","user":"57596ba7e4b02ea11479931a"},{"problem":144,"code":"(fn my-cycle [x f & fs] (lazy-seq (cons x (apply my-cycle (f x) (concat fs (list f))))))","user":"4fd11a93e4b04c3a95aa040a"}]