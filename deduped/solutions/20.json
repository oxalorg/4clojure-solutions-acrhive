[{"problem":20,"code":"(fn [x] (get (vec (reverse x)) 1))","user":"57fc5e42e4b0d3187e900997"},{"problem":20,"code":"(fn pentu\n  [[top & remain]]\n  (if (= (count remain) 1)\n    top\n    (if (nil? remain)\n      nil\n      (pentu remain))))","user":"569bfc43e4b0542e1f8d145c"},{"code":"#(last (take (- (count %) 1) % ))","problem":20,"user":"50e2fcb5e4b056122d085cfe"},{"code":"(fn [v]\n  (second (reverse v)))","problem":20,"user":"507bb3ece4b09034bfeeb720"},{"problem":20,"code":"(fn [s] ((vec s) (- (count s) 2)))","user":"540b4c4de4b0addc1aec66f6"},{"code":"(fn my-pen\n  [lst]\n  (if (empty? (rest (rest lst)))\n    (first lst)\n    (my-pen (rest lst))))","problem":20,"user":"4e7a479b535db169f9c796aa"},{"code":"(comp first take-last) 2","problem":20,"user":"51fa1375e4b0f1313d4689c9"},{"code":"(fn [[x & xs]] (if (empty? (rest xs)) x (recur xs)))","problem":20,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [s]\n  (let [c (count s)]\n   (cond\n    (= c 2) (first s)\n    (> c 2) (recur (rest s))\n    :else nil)))","problem":20,"user":"4db2eac3535df7e46ed9b6c8"},{"problem":20,"code":"(fn \n  [seqArg]\n  (if (> (- (count seqArg) 2) 0)\n    (nth seqArg (- (count seqArg) 2))\n    (first seqArg)))","user":"5ba7838ae4b0a20761a2341b"},{"code":"(fn [list] (first (drop 1 (reverse list))))","problem":20,"user":"4f21838fe4b0d66497709fd2"},{"problem":20,"code":"(fn [y] (nth y (- (count y) 2)) )","user":"5c92161de4b048ec896c59f9"},{"code":"(fn [s]\n  (if (= (count (rest s)) 1)\n\t(first s)\n    (recur (rest s))))","problem":20,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"#(let [n (count %)]\n   (nth % (- n 2)))","problem":20,"user":"5262a4d0e4b03e8d9a4a708f"},{"code":"(fn lost [x] ( \n  if(= (count x) 2)\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4ed38714535d44c135fd68f1"},{"code":"#(get (reduce conj [] (reverse %)) 1)","problem":20,"user":"4fc5e24ee4b0ee37620e1801"},{"code":"(fn [x] \n  (nth x (- (count x) 2))\n  )","problem":20,"user":"50fa0dcee4b07934dda8b0bb"},{"problem":20,"code":"(fn [x]\n  (nth x (dec (dec (count x))))\n  )","user":"5f8330b8e4b01aacbe7a270f"},{"code":"#( first  (rest (reverse %)))","problem":20,"user":"4e78c208535db95036265722"},{"problem":20,"code":"(fn penultimate [seqn] \n  (if (= (count seqn) 2)\n    (first seqn)\n    (recur (rest seqn))))","user":"597b1a96e4b02382a38ad1f1"},{"problem":20,"code":"#(first (last (map vector % (rest %))))","user":"5b500215e4b02d533a91bce2"},{"code":"(fn [x] (if (> (count x) 2) (recur (rest x)) (first x)))","problem":20,"user":"50b90b60e4b0cba0e598b658"},{"problem":20,"code":"(fn l [x] (first (rest (reverse x))))","user":"54258a7fe4b01498b1a71b0c"},{"code":"(fn penult[x]  (first(drop 1 (reverse x))) )","problem":20,"user":"4e7dd782535db169f9c796eb"},{"problem":20,"code":"(partial (comp first take-last ) 2)","user":"586b1390e4b0f14aab7c88cd"},{"problem":20,"code":"(fn[x]\n  (nth x (- (count x) 2)))","user":"60087dc9e4b074f607df6674"},{"problem":20,"code":"(fn \n  [x]\n  (nth x (- (count x) 2))\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"code":"(fn [x]\n  (let [length (count x)]\n    (nth x (- length 2))))","problem":20,"user":"4efbf3ae535dced4c769f27d"},{"problem":20,"code":"(fn penultimate \n  \t[your-list]\n  \t(second (reverse your-list)))","user":"53cfd3c5e4b00fb29b221302"},{"problem":20,"code":"#(let [n (count %)] (when (> n 1) (nth % (- n 2))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn pen [xs]\n  (if (= nil (next (next xs)))\n    (first xs)\n    (pen (next xs))))","problem":20,"user":"522b922ee4b0d34ee08e71c3"},{"problem":20,"code":"(fn stl [x] (first (rest (reverse x))))","user":"5b8e3e81e4b0c0b3ffbd49e1"},{"problem":20,"code":"(fn[x] (let [n (count x)] (nth x (dec (dec n)) )))","user":"53718a24e4b0493c815db6fe"},{"code":"#(cond (nil? %1) nil\n       (nil? (next %1)) nil\n       (nil? (next (next %1))) (first %1)\n       :else (recur (next %1)))","problem":20,"user":"5183f5d7e4b02826a645f393"},{"problem":20,"code":"(fn [input] (second (reverse input)))","user":"580cc8bde4b0849f6811b725"},{"code":"#((comp first rest) (reverse %))","problem":20,"user":"4f30896ce4b0d6649770a07b"},{"code":"(fn sl[s] (cond\n           \t(= nil (second (rest s)))  (first s)\n            :default (sl (rest s))\n            )\n  )","problem":20,"user":"4fb03cf4e4b081705acca262"},{"code":"(fn [lst] (nth (reverse lst) 1))","problem":20,"user":"5132961ee4b039bac947cbb9"},{"code":"(let\n  [size (fn [x]\n    (if\n      (= '() x)\n      0\n      (+ 1 (count x))))]\n  (fn f [x]\n    (if\n      (= 1 (count (rest x)))\n      (first x)\n      (f (rest x)))))","problem":20,"user":"508fd72ee4b0ea685a20f76c"},{"code":"(fn pe [x]  (nth x (- (count x) 2)))","problem":20,"user":"522080fde4b0e6a83c89259e"},{"problem":20,"code":"(fn[l] (last (butlast l)))","user":"5bb33124e4b0a20761a2351c"},{"problem":20,"code":"(fn\n  [s2]\n  (loop [curr s2]\n    (if (empty? (nthrest curr 2))\n      (first curr)\n      (recur (rest curr))\n    )\n   )\n  )","user":"54c6e78ae4b045293a27f634"},{"code":"(fn pen [s]\n  (if (= (count s) 2)\n    (first s)\n    (pen (next s))))","problem":20,"user":"4f7f0827e4b06e829148e1d5"},{"problem":20,"code":"(fn second-last [s] (first(rest(reverse s))))","user":"5589d1eee4b059ccff29b20a"},{"code":"#((comp last take ) 2 (reverse %))","problem":20,"user":"52dd087ee4b09f7907dd13d9"},{"problem":20,"code":"#(if (= 2(count %)) (first %) (recur (rest %) ))","user":"54874116e4b0e286459a11c3"},{"code":"#(if (<= (count %) 2)\n     (first %)\n     (recur (next %)))","problem":20,"user":"4e6acc33535d8ccf87e9ff05"},{"problem":20,"code":";(fn [[s l & more]]\n;  (if (and s l (not more))\n;   \ts\n;    (recur (cons l more))))\n\n\n(fn [x] \n  (first (reduce (fn [[_ curr] nxt] [curr nxt]) \n          [nil nil]  \n          x)))","user":"5547793be4b0a04f7929954c"},{"problem":20,"code":"(fn sl [s] (if (empty? (rest (rest s)))\n               (first s)\n               (sl (rest s))))","user":"5740f821e4b05c31a32c085e"},{"problem":20,"code":"(fn [x] (nth x (dec (dec (count x))) nil))","user":"5b1ec003e4b03cfeda66ed13"},{"problem":20,"code":"(fn sec [x] (second (reverse x)))","user":"55d1a2b8e4b0e31453f64a46"},{"problem":20,"code":"(fn f [l]\n                   (cond\n                     (next (rest l)) (f (rest l))\n                     :else (first l)))","user":"55274467e4b0ffed3738f92b"},{"code":"(fn [list] (first (rest (reverse (seq list)))))","problem":20,"user":"503a5623e4b07a1917cc34d3"},{"code":"(fn l [x] (if (= (count x) 2) (first x) (l (rest x))))","problem":20,"user":"53372d32e4b0e30313ee6c86"},{"code":"(fn [col] (first (take-last 2 col)))","problem":20,"user":"4e81f1ea535db62dc21a62c0"},{"code":"(fn nth [x] \n\t(cond \n     (empty? x) '() \n     (empty? (rest x)) '()\n     (empty? (rest (rest x))) (first x)\n     :else (nth (rest x))\n     )\n)","problem":20,"user":"535197f2e4b084c2834f4ae4"},{"problem":20,"code":"(fn [x] \n  (first\n  \t(rest \n   \t\t(reverse x))))","user":"561b9345e4b073c65b0ce3ea"},{"problem":20,"code":"(fn [x]\n  (if (= 2 (count x))\n         (first x)\n         (recur (rest x))))","user":"5d7faa52e4b0915913b1d365"},{"problem":20,"code":"(fn [s]\n (nth s (- (count s) 2)))","user":"5c11afe3e4b01240ff567180"},{"problem":20,"code":"(fn [Xs] (-> Xs reverse second))","user":"5e60a0cae4b0fd0acd158689"},{"problem":20,"code":";;(comp second reverse)\n#(->> (count %) (dec) (dec) (nth %))","user":"541faf4fe4b01498b1a71a9b"},{"problem":20,"code":"(fn [list]\n    (first (rest (reverse list))))","user":"5a932f63e4b0d174b936c71b"},{"code":"(fn [col1] (second (reverse col1)))","problem":20,"user":"515ac518e4b0394f658fe244"},{"code":"(fn [vec]\n   (let [final (- (count vec) 2)]\n      (nth vec final)))","problem":20,"user":"4ed19e90535d44c135fd68d0"},{"problem":20,"code":"#(first (last (partition 2 1 %)))","user":"564b495de4b0284900eef667"},{"code":"(fn [s] ((vec (reverse s)) 1))","problem":20,"user":"517b59b8e4b0925c997201d0"},{"problem":20,"code":"(fn [v1]\n   (nth v1 (- (count v1) 2)))","user":"57309d7ee4b0cd1946bd0fb2"},{"code":"(\n  fn [coll]\n    (first \n      (drop\n        (- (count coll) 2)\n        coll\n      )\n    )\n)","problem":20,"user":"4f71ac00e4b07046d9f4f010"},{"problem":20,"code":"(fn [coll] (->> coll butlast last))","user":"5abbbd46e4b073f1774426db"},{"problem":20,"code":"(fn [se] (loop [s se]\n           (if (= (count s) 2)\n             (first s)\n             (recur (rest s)))))","user":"557dbc9de4b05c286339e0cd"},{"problem":20,"code":"(fn [list] (second(reverse list)))","user":"5e197aa1e4b0dc9594008506"},{"code":"(fn [stuff] (first (rest (reverse stuff))))","problem":20,"user":"51ecb0fee4b0bb5070431583"},{"code":"(fn L [x] \n  (if (> (count x) 2)\n    (L (rest x))\n    (first x)\n))","problem":20,"user":"4e6a33fc535d8ccf87e9feac"},{"problem":20,"code":"(fn [col]\n         (nth col (- (count col) 2)))","user":"5e300655e4b05b4b01516209"},{"problem":20,"code":"(fn [inputSeq]\n  (let [cnt (count inputSeq)]\n    (nth inputSeq (- cnt 2))\n  )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":20,"code":"(fn pen-elm [x]\n  (nth x (- (count x) 2)))","user":"57a8eec7e4b0a96607956226"},{"problem":20,"code":"(fn [x] (first\n         (rest (reverse x))\n         ))","user":"59129074e4b0163c97b36ef1"},{"code":"#(->%(reverse)(rest)(first))","problem":20,"user":"4f1900b0535d64f603146463"},{"problem":20,"code":"(fn ^:static last [s]\n         (if (and (next s)\n                  (next (next s)))\n           (recur (next s))\n           (first s)))","user":"5ab575f8e4b073f17744263d"},{"code":"#(second (into () %))","problem":20,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":20,"code":"(fn [coll]\n  (loop [c coll]\n    (let [cnt (count c)]\n      (cond\n        (= cnt 2) (first c)\n        (< cnt 2) nil \n        true (-> c rest recur)))))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":20,"code":"(fn [xs]\n  (let [c (- (count xs) 2)]\n    (when (>= c 0)\n      (nth xs c))))","user":"5ad3d730e4b0ea6055cfabc8"},{"code":"(fn second-last [sq]\n  (when (>= (count sq) 2)\n  \t(if (= (count sq) 2)\n      (first sq)\n      (second-last (rest sq)))))","problem":20,"user":"538d64cae4b0b51d73faae6d"},{"problem":20,"code":"(partial apply (fn last-el  \n  ([head element] head)\n  ([head s & tail] (apply last-el (conj tail s)))))","user":"540904a7e4b0addc1aec66d2"},{"problem":20,"code":"(fn [values]\n  (second  (reverse values))\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":20,"code":"(fn [items] (nth (seq items) (- (count items) 2)))","user":"5e9c5fa4e4b0157ca96647f9"},{"problem":20,"code":"(letfn [(butlast [s] (lazy-seq (if-let [r (next s)] (cons (first s) (butlast r)) ())))] #(last (butlast %)))","user":"5446c89ce4b032a45b8693b5"},{"problem":20,"code":"(comp last #(take 2 %) reverse)","user":"5446ebc2e4b032a45b8693b8"},{"problem":20,"code":"(fn [coll] ((comp second reverse) coll))","user":"60af5fe2e4b0245e5b1b35c0"},{"code":"(fn second-last-element [s] (nth (reverse s) 1))","problem":20,"user":"51a57fd5e4b051b01d55f44d"},{"code":"(fn [ls0]\n  (loop [ls ls0] ; this is an iterative thing that's already being called (cancer of the semicolon, but...)\n  (if (= (rest (rest ls)) '())\n      (first ls)\n      (recur (rest ls)))))","problem":20,"user":"51d8b36ce4b02ceefd947745"},{"code":"(fn [items]\n  (second (reverse items)))","problem":20,"user":"510cd1dde4b078ea71921124"},{"problem":20,"code":"(fn find-secondlast [items] (nth items (- (count items) 2)))","user":"5513dec7e4b055c2f668d4cd"},{"problem":20,"code":"(fn [coll] (first(drop (- (count coll) 2) coll)))","user":"5fada7cce4b08cb800c85af5"},{"code":"(fn [s]\n  (first (drop (- (count s) 2) s)))","problem":20,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn penultimo [x] (last (butlast x)))","problem":20,"user":"537bca8be4b06839e8705e71"},{"problem":20,"code":"(fn sec_to_last [x] (nth x (- (count x) 2)))","user":"57fa4d60e4b0d3187e90095f"},{"problem":20,"code":"(fn [x] (nth x (- (count x)  2) ) )","user":"53f34a16e4b0742d9025b0f3"},{"problem":20,"code":"(fn my-pen [myl]\n  (cond\n   (= 2 (count myl)) (first myl)\n   :else (my-pen (rest myl))\n   ))","user":"507ee076e4b06ce648bcdbfc"},{"problem":20,"code":"(fn my-second-to-last [n] \n  (if (= 2 (count n)) \n    (first n) \n    (my-second-to-last (rest n))))","user":"56caea02e4b0ea9b8538f721"},{"problem":20,"code":"(fn[coll] (nth coll (- (count  coll) 2)))","user":"54d95088e4b024c67c0cf748"},{"problem":20,"code":"(fn [c] (let [f (first c) s (second c) r (next (drop 1 c))] (if r (recur (drop 1 c)) f)))","user":"5637557ce4b0bfe05bf117d4"},{"problem":20,"code":"(fn penultimate [x]\n  (let [[x0 x1 x2] x]\n    (if (nil? x2) x0\n      (penultimate (next x)))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":20,"code":"(fn s [s]\n   (if (next(next s))\n     (recur (next s))\n     (first s)\n     ))","user":"5d6691cee4b0db5d338d15e9"},{"code":"(fn second_last_element [x] (nth x (- (count x) 2)))","problem":20,"user":"4fb0c8dde4b081705acca26d"},{"problem":20,"code":"(fn myFn [x] (if (= 2 (count x)) (first x) (myFn (rest x))))","user":"56a908aee4b07966d5a8a06e"},{"problem":20,"code":"(fn [[& more]]\n   (println (count more))\n  (if (> (count more) 2)\n    (recur (rest more))\n    (first more)))","user":"59e4fc25e4b08badc2a0c54f"},{"problem":20,"code":"(fn get-last [x]\n  (cond\n   (= 2 (count x)) (first x)\n   :else (get-last (rest x))))","user":"5ae7691ae4b0837691e92caa"},{"code":"#(get (vec %) (- (count %) 2))","problem":20,"user":"4df15946535d08e6dec9fe1c"},{"problem":20,"code":"(fn [l]\n  (if (next (next l))\n    (recur (next l))\n    (first l)))","user":"5400407de4b0de5c4184860a"},{"code":"(fn [s]\n  (loop [e1 (first s) e2 (second s) r (rest (rest s))]\n    (if (seq r)\n        (recur e2 (first r) (rest r))\n      e1)))","problem":20,"user":"4f7774a6e4b0fbe0118ec57f"},{"code":"(comp first next reverse)","problem":20,"user":"4f02fdc9535dcb61093f6a42"},{"problem":20,"code":"(fn [[first second & rest]]\n  (if (empty? rest)\n    first\n    (recur (conj rest second))))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":20,"code":"(fn mylast2 [coll] (if (empty? (rest (rest coll))) (first coll) (mylast2 (rest coll))))","user":"57f675c2e4b0d3187e9008e5"},{"problem":20,"code":"(fn [items]\n  (loop [curr (first items) remaining (rest items)]\n    (if (= (rest remaining) '())\n      curr\n      (recur (first remaining) (rest remaining)))))","user":"572a997ce4b0f4d77e65123e"},{"code":"#(second (into '() %))","problem":20,"user":"50142490e4b07d18bdaaf70a"},{"code":"(fn get_last [x] (nth x (- (count x) 2)))","problem":20,"user":"51361c16e4b04ac1f358dd4b"},{"problem":20,"code":"(fn [xs]\n  (let [n (- (count xs) 2)]\n    (first (drop n xs))))","user":"56b2e1c5e4b0982f16b37e0c"},{"problem":20,"code":";; (fn [x] (nth x (dec (dec (count x)))))\n#(second (reverse %))","user":"57010394e4b08d47c97781cf"},{"code":"(fn [col]\n  (-> (reverse col)\n      (rest)\n      (first)))","problem":20,"user":"51030edbe4b00c483ae17700"},{"problem":20,"code":"(fn [sq]\n  (let [reversed (reverse sq)]\n    (nth reversed 1)))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [the-list] \r\n  (first (rest (reverse the-list))))","problem":20,"user":"4e9894ab535dbda64a6f6b5d"},{"code":"(fn [l] (first (rest (reverse l))))","problem":20,"user":"4e510260535dc968683fc4f2"},{"code":"(fn pen [xs] (if (= (count xs) 2)\n                (first xs)\n                (pen (rest xs))\n               )\n              )","problem":20,"user":"51ad20eee4b09397d510977e"},{"code":"(fn [v] (#(nth v %) (dec (dec (count v)))))","problem":20,"user":"4e53bf5e535d8a8b8723a275"},{"code":"(fn [arr] (first (take-last 2 arr)))","problem":20,"user":"52f84c94e4b047fd55836fcf"},{"code":"(fn pen [l]\n(if (empty? (rest (rest l)))\n(first l)\n(pen (rest l))))","problem":20,"user":"5020d2aee4b0cb6ebc0a42fb"},{"code":"(fn my-fn [list]\n  (let [r (rest list)]\n    (if (= (count r) 1)\n        (first list)\n        (recur r))))","problem":20,"user":"4edd9d79535d10e5ff6f532b"},{"problem":20,"code":"(fn [l]\n  (if\n    (empty? (rest(rest l)))\n    (first l)\n    (recur (rest l))\n    \n    )\n  )","user":"589abae5e4b00487982d5316"},{"problem":20,"code":"(fn [x] (first (rest (rseq (vec x)))))","user":"545b41bde4b01be26fd7464e"},{"code":"(comp second reverse seq)","problem":20,"user":"50abb8cde4b01d6eb43ce9ad"},{"problem":20,"code":"#(-> (reverse %) (rest) (first))","user":"54814dbee4b0e286459a116b"},{"problem":20,"code":"(fn [l] \n  (if (= (count l) 2)\n    (first l)\n    (recur (rest l))\n    ))","user":"583829c2e4b089d5ab817d22"},{"code":"(fn penultimate_deux [x]\n  (second (reverse x))\n)","problem":20,"user":"50909368e4b084db37c1e074"},{"code":"(fn [x] (if (< 2 (count x))(recur (next x))(first x)))","problem":20,"user":"4dbf02d5535d020aff1edf70"},{"code":"(fn slast [l]\n  (if (= 2 (count l))\n    (first l)\n    (slast (rest l))\n  )\n)","problem":20,"user":"4e720985535d5021c1a89655"},{"problem":20,"code":";#(nth % (- (count %) 2))\n#(second (reverse %))","user":"58136679e4b0f478707a060d"},{"problem":20,"code":"(fn [c] \n    (loop [prev nil \n           col c]\n      (let [[x & xr] col]\n        (println x)\n        (if (empty? xr)\n          prev\n          (recur x xr)))))","user":"554a75c9e4b0a04f79299575"},{"code":"(fn penultimate [[element & sequence]]\n  (if (= 1 (count sequence))\n    element\n    (penultimate sequence)\n  )\n)","problem":20,"user":"537d9b39e4b06839e8705e8f"},{"code":"(fn pel ([lst] (if (= (count lst) 2) (first lst) (recur (rest lst)))))","problem":20,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn [x]\n  (if (seq (rest (rest x)))\n    (recur (rest x))\n    (first x)\n    )\n  )","problem":20,"user":"4f4a34b2e4b0d56e7bb92c09"},{"problem":20,"code":"#(first (subvec (vec %) (- (count %) 2)))","user":"589771f9e4b00487982d52bd"},{"code":"(fn get-penultimate [x] (if (= (count x) 2) (first x) (get-penultimate (rest x))))","problem":20,"user":"503614e5e4b0fbe0a74d26bd"},{"code":"(fn [x] (first(reverse(butlast x))))","problem":20,"user":"522f39a8e4b032bbe3424159"},{"problem":20,"code":"(fn \n  [[x1 & rest]]\n  (let [[x2 & rest*] rest]\n    (if (empty? rest*)\n      x1\n      (recur rest))))","user":"5844e6f4e4b089d5ab817e5a"},{"code":"(fn [sequ] (second (reverse sequ)))","problem":20,"user":"51127e8ee4b0350614f07a76"},{"code":"#(peek(vec(drop-last %)))","problem":20,"user":"4fe21889e4b0dd6cd5ce3641"},{"problem":20,"code":"(fn [sample] (nth sample (dec (dec (count sample)))))","user":"5b1f84b3e4b03cfeda66ed1f"},{"problem":20,"code":"apply\n (fn anteultimo [& collection]\n  (nth collection (- (count collection) 2)))","user":"55264584e4b0ffed3738f918"},{"code":"(fn [coll] (last (butlast coll)))","problem":20,"user":"4e46ac46535dc968683fc4b5"},{"code":"(fn [l]\n  (loop [[f & args] l]\n    (if ( = (count args) 1)\n      f\n      (recur args))))","problem":20,"user":"4f7e29dde4b06e829148e1ca"},{"problem":20,"code":"#(nth ((comp reverse) %) 1)","user":"561eb12be4b064ca9f4b16c5"},{"problem":20,"code":"#(let [[a b] (reverse %)] b)","user":"591a7ce9e4b09b4ee5954bd8"},{"problem":20,"code":"(fn second-last [l] (if (= (count l) 2) (first l) (second-last (rest l))))","user":"55f2b42be4b06e875b46ce4a"},{"code":"(fn [coll]\n  (loop [[a b & r :as l] coll]\n    (if (empty? r)\n      a\n      (recur (rest l)))))","problem":20,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":20,"code":"(fn [x-list] (first(rest(reverse x-list))))","user":"60170e31e4b0a37c5521f4e7"},{"code":"(fn [lst]\n  (first (rest (reverse lst))))","problem":20,"user":"5369172ce4b0243289761e96"},{"problem":20,"code":"#(if (> 2 (count %)) nil (nth % (dec (dec (count %)))))","user":"5762fcfde4b0994c1922fbb3"},{"problem":20,"code":"(fn [array] (nth array (- (count array) 2)))","user":"56f16414e4b04a395b9a0490"},{"problem":20,"code":"(fn foo[sequenz] (second (reverse sequenz)))","user":"5585806ae4b001b0851d750d"},{"code":"(fn [x] (nth x (- (.size x) 2)))","problem":20,"user":"4fef4bc0e4b0678c553fc315"},{"code":"#(.get %(- (count %) 2))","problem":20,"user":"4f8801d3e4b033992c121c5e"},{"problem":20,"code":"(fn [colls]\n   (get (into [] colls) (- (count colls) 2)))","user":"551e6526e4b030e6a24d00e8"},{"problem":20,"code":"(fn stl [s] (if (= (count s) 2) (first s) (stl (rest s))))","user":"5762bf13e4b0994c1922fbae"},{"code":"#(let [size (count %1)]\n  (if (< size 2)\n     nil\n     (nth %1 (- size 2))))","problem":20,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":20,"code":"(fn almost-last [sq] (nth sq (- (count sq) 2)))","user":"59b7120fe4b05c620303ca3b"},{"problem":20,"code":"(comp first last (partial partition 2 1))","user":"575cbe44e4b02ea114799374"},{"code":"(fn [[x & xs]]\n  (if (empty? (rest xs))\n      x\n      (recur xs)))","problem":20,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":20,"code":"(fn [x] (let [len (count x)]\n          (if (> len 1)\n            (nth x (- len 2))\n            )\n          )\n  )","user":"5713e307e4b07c98581c3aaf"},{"code":"(fn [s] (nth s (- (count s) 2)) )","problem":20,"user":"51a584c7e4b051b01d55f44e"},{"problem":20,"code":"(fn penult [sqn] (last (butlast sqn)))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":20,"code":"(fn lxu[x]\n  (if (= (rest x) '())\n    ('())\n    (if (= (rest (rest x)) '())\n      (first x)\n      (lxu (rest x)))))","user":"53e06f81e4b0d874e779ae4c"},{"code":"(fn snd [list] (second (reverse list)))","problem":20,"user":"50989cbbe4b04e098a4c7275"},{"problem":20,"code":"(fn[coll](second(reverse coll)))","user":"5dadf73ee4b0f8c104ccfc86"},{"problem":20,"code":"(fn lascht [l]\n  (cond\n   (= '() (rest (rest l))) (first l)\n   :else (lascht (rest l))))","user":"58138439e4b0f478707a0611"},{"code":"#(first( rest (reverse %)))","problem":20,"user":"5018ed15e4b011a2e0bf6412"},{"problem":20,"code":"(fn get-last [x] (nth x (- (count x) 2)))","user":"5c996cebe4b048ec896c5a98"},{"code":"(fn second-to-last\n   [s]\n   (if (= (count s) 2)\n     (first s)\n     (second-to-last (rest s)))\n   )","problem":20,"user":"538510c2e4b06839e8705efb"},{"problem":20,"code":"(fn     [q]\n  (let [len (count q)]\n    (nth q (- len 2))))","user":"5ea0d417e4b00a66d4a9518a"},{"code":"( fn [x] (nth x (- (count x) 2)))","problem":20,"user":"505d4b21e4b0e6aca564be07"},{"problem":20,"code":"#(if (empty? (rest (rest %1))) (first %1) (recur (rest %1)))","user":"57df9f60e4b0bd073c202467"},{"problem":20,"code":"(fn [s]  (if (empty? (rest (rest s))) (first s) (recur (rest s))))","user":"5b8856e8e4b047b03b20380a"},{"problem":20,"code":"(fn [args] \n   (second (reverse args)))","user":"563dfeffe4b0da801c4e4663"},{"problem":20,"code":"(fn second2last\n  \t[x]\n  \t(if (= (next (next x)) nil)\n      (first x)\n      (second2last (rest x))))","user":"591e1dc7e4b09b4ee5954c2a"},{"code":"#(->> % (reverse)(second))","problem":20,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":20,"code":"#(first (reverse(first (partition 2 (reverse %)))))","user":"562b1a7be4b058fa18c5a6cb"},{"problem":20,"code":"(fn [coll]\n  (nth coll (- (count coll) 2) nil))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"problem":20,"code":"(fn [list]\n  (if (= 2 (count list))\n    (first list)\n    (recur (rest list))\n    )\n  )","user":"545ef0a5e4b01be26fd74684"},{"code":"(fn l [xs] (if (= (count xs) 2) (first xs) (l (rest xs))))","problem":20,"user":"52d829a8e4b09f7907dd1389"},{"problem":20,"code":"(fn [s]\n  (first (rest (reverse s)))\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"code":"#((into [] %) (- (count %) 2))","problem":20,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn get-last[s] \n   (if (= 1 (count (rest s)))\n       (first s) (get-last (rest s)))\n)","problem":20,"user":"4e6ac49d535d8ccf87e9ff01"},{"code":"(fn penultimate [xs] (nth xs (- (count xs) 2)))","problem":20,"user":"51a2569ee4b00957e520db7d"},{"problem":20,"code":"#(let [l %]\n   (nth l (- (count l) 2)))\n\n; #(first (rest (reverse %)))","user":"5711ca24e4b09c608db7044b"},{"problem":20,"code":"(fn\n  [x]\n  ((vec x) (- (count x) 2))\n  )","user":"5cd17bf1e4b0ccb0619628eb"},{"problem":20,"code":"#(second (reverse %))\n; op basis van #19","user":"5637bd38e4b0bfe05bf117de"},{"problem":20,"code":"(fn [l] (second(reverse l)))","user":"59a5b3f4e4b066c664927d69"},{"problem":20,"code":"(fn [[a b & xs]]\n  (if xs (recur (conj xs b)) a))","user":"59abd1d8e4b08cbb53654da4"},{"problem":20,"code":"(fn [x] (nth x (-(count x ) 2) ) )","user":"54ca35c6e4b057c6fda3a254"},{"problem":20,"code":"(fn pen [coll] \n  (cond\n   (= 2 (count coll)) (first coll)\n   :else (pen (rest coll))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn return-penultimate [x] (if (= (seq (rest (rest x))) nil) (first x) (recur (rest x))))","problem":20,"user":"52c0101fe4b07a9af5792343"},{"problem":20,"code":"(fn second-to-last\n  [x]\n  (second (reverse x)))","user":"559ce276e4b0ec2b359424d7"},{"problem":20,"code":"(fn [x] (peek (into [] (drop-last x))))","user":"59a5cb6ae4b066c664927d6c"},{"problem":20,"code":"(fn secondlast [list]\n  (nth list (- (count list) 2)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn penul [x] (second (reverse x)))","problem":20,"user":"4f6b1457e4b07046d9f4efa6"},{"code":"(fn [x]\n  (last (take 2 (reverse x)))\n  )","problem":20,"user":"519f0f81e4b087743fad219b"},{"code":"(fn [lst]\n  (second (reverse lst)))","problem":20,"user":"4ff73b7ae4b0678c553fc38c"},{"code":"(fn [col] (second(reverse col)))","problem":20,"user":"513de0e6e4b0825f97f7f965"},{"problem":20,"code":"(fn [x] (nth x (-  (count x) 2 ) ))","user":"556bbd08e4b09a3098a524f1"},{"problem":20,"code":"(fn penultimo [seq]\n  (nth seq (- (count seq) 2)))","user":"55fd9dffe4b07755b13145fa"},{"problem":20,"code":"(fn second-last [x] (if (empty? (rest (rest x))) (first x) (second-last (rest x))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":20,"code":"(fn [coll]\n  (nth coll (dec(- (count coll) 1))))","user":"6029c861e4b0d5df2af22257"},{"problem":20,"code":"; #(-> % reverse second)\n; (comp second reverse)\n(comp last butlast)","user":"56121985e4b05f002753df8a"},{"code":"(fn p [x] (if (empty? (rest (rest x))) (first x) (p (rest x))))","problem":20,"user":"4f0369fe535dcb61093f6ab2"},{"problem":20,"code":";#(nth % (- (count %) 2))\n\n;(comp second reverse)\n\n;(fn[x](second(reverse x)))\n\n;#(nth (drop (- (count %) 2) %) 0)\n\n#(first(drop (- (count %) 2) %))\n\n;#(first(last 2 %))\n\n;#(first(take-last 2 %))\n\n\n;#(nth (take-nth (- (count %) 2) %) 1)\n\n;#(loop[a 0 b %]\n;   (if(< a (- (count %) 2))\n;         (recur(inc a)(drop 1 b))\n;         (first b)\n;     )\n;   )\n\n;#(loop[a 0 b %]\n;   (if(< a (- (count %) 2))\n;         (recur(inc a)(next b))\n;         (first b)\n;     )\n;   )","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [x] (-> x reverse rest first))","problem":20,"user":"4ec8736f535d6d7199dd36f3"},{"problem":20,"code":"(fn [ary] (second (reverse ary)))","user":"554b8b95e4b0a04f79299590"},{"problem":20,"code":"(fn [collection](second (reverse collection)))","user":"5464dd11e4b01be26fd746d2"},{"code":"(fn getter [x] \n  (if (= (count x) 2) \n    (first x)\n    (recur (rest x))\n  )\n)","problem":20,"user":"4e51fccf535d302ef430da6b"},{"problem":20,"code":"(fn [x] (-> x butlast reverse first))","user":"5ea806d5e4b00a66d4a951b9"},{"problem":20,"code":"(fn [x] ( -> x reverse rest first))","user":"5ab07d63e4b073f1774425af"},{"problem":20,"code":"(fn [args] (nth args ( - (count args) 2)))","user":"5c3fb80be4b08cd430848e9f"},{"code":"(fn [x] (first( rest (reverse x))))","problem":20,"user":"4f635562e4b0defedf855fe3"},{"code":"(fn [arr] (nth (take-last 2 arr ) 0))","problem":20,"user":"50feb0e1e4b03cd852b4e851"},{"code":"(fn [l] \n  (loop [f (first l) \n         s (first (rest l)) \n         r (rest (rest l))]\n    (if (empty? r) \n      f \n      (recur s (first r) (rest r)))))","problem":20,"user":"4e82c062535db62dc21a62cc"},{"problem":20,"code":"(fn [x]\n   (get (vec x) (- (count x) 2)))","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"519db0ede4b037b32803f9b9"},{"problem":20,"code":"(fn get-sandip [x]\n  (if( = (count x) 2)\n    (first x)\n   ( get-sandip(rest x))))","user":"59ef5f33e4b0966464fe6a2f"},{"code":"(fn f [x] (nth x (- (count x) 2)))","problem":20,"user":"4e8b5cb8535d65386fec211b"},{"code":"(comp second rseq vec)","problem":20,"user":"4f1d1d95535d64f603146488"},{"problem":20,"code":"(fn [s]\n  (loop [x s]\n    ( if (= (rest(rest x)) '())\n     (first x)\n     (recur (rest x) \n            ))))","user":"5ce6a0f4e4b0a17bb84e2b8d"},{"code":"(fn [se]\n  (loop [seq se]\n    (do\n      (if (= (count seq) 2)\n  (first seq)\n\t(recur (rest seq))))))","problem":20,"user":"4ef9b021535dced4c769f269"},{"problem":20,"code":"(fn [seqn]\n  (let [n (count seqn)]\n    (nth seqn (- n 2))))","user":"584574a1e4b089d5ab817e69"},{"code":"(fn [n] (first (pop (reverse n ))))","problem":20,"user":"50585c80e4b06522596eba77"},{"problem":20,"code":"(fn my-last\n  [coll]\n  (if ( = (count coll) 2)\n   (first coll) \n   (my-last (rest coll))))","user":"5e00752fe4b0a607a9a45d24"},{"problem":20,"code":"(fn [collect] (second (reverse collect)))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":20,"code":"(fn [l]\n  (nth l (- (count l) 2))\n  )","user":"5739cbe4e4b0cd1946bd107c"},{"code":"#( first ( take-last 2 % ) )","problem":20,"user":"4fbb7010e4b081705acca2e7"},{"problem":20,"code":"(fn mypenult [[one two & tail]]\n  (if (= nil tail)\n    one\n    (mypenult (conj (lazy-seq tail) two))))","user":"54775b13e4b0c51c1f4d72b2"},{"code":"(fn [xs]\n  (if (next(next xs))\n    (recur (next xs))\n    (first xs)))","problem":20,"user":"53800d99e4b06839e8705ebd"},{"problem":20,"code":"(fn second-last [c] (first (rest (reverse c))))","user":"563ce002e4b0bfe05bf11841"},{"problem":20,"code":"(fn f [[head & tail]] (if (empty? (rest tail)) head (f tail)))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"problem":20,"code":"(fn hey [coll] (let [rest2 (rest coll)] ( if-not (empty? (rest rest2)) (hey rest2) (first coll))))","user":"60901a6be4b03bd49d9f36c9"},{"problem":20,"code":"#(first (reduce (fn [x y] [(second x), y]) [nil nil] %))","user":"58225587e4b04b46fc4b0f94"},{"problem":20,"code":"#(nth % \n       (- \n        (count %) 2))","user":"53f14389e4b0742d9025b0db"},{"problem":20,"code":"(fn [zeq]\n  (if (> 1 (count zeq)) \n    ([]) \n    (if-let \n      [tail (empty? (rest (rest zeq)))]  \n      (first zeq) \n      (recur (rest zeq))\n     ) \n   )\n)","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn [s] (if (= (count s) 2)\n          (first s)\n          (recur (rest s))))","problem":20,"user":"51a24c6ae4b00957e520db7a"},{"problem":20,"code":"(fn [col]\n  (-> col\n      reverse\n      rest\n      first))","user":"5ba19969e4b0a20761a233a4"},{"problem":20,"code":"(fn[i] (nth i (-(count i) 2)))","user":"59636b6de4b066ee0a44b0c6"},{"problem":20,"code":"(fn [l] (loop [[a b & more :as ll] l] (if (seq more) (recur (rest ll)) a)))","user":"5f2de7ede4b033932238a674"},{"problem":20,"code":"( fn [ x ] ( second ( reverse x ) ) )","user":"55d3d3b0e4b0e31453f64a6d"},{"code":"(comp last reverse #(take-last 2 %))","problem":20,"user":"5266516be4b03e8d9a4a7134"},{"code":"#(second (reverse (sort %)))","problem":20,"user":"4e1f60a6535d04ed9115e80b"},{"code":"(fn [x] \n  (second (reverse x)))","problem":20,"user":"4e7dcdb5535db169f9c796e9"},{"problem":20,"code":"(fn [l]\n  (if (= 2 (count l))  \n    (first l)\n    (recur (rest l))))","user":"58ebd6b3e4b056aecfd47d4c"},{"code":"(fn [b] (last (butlast b)))","problem":20,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":20,"code":"(fn my-last [coll]\n  (if (empty? (rest (rest coll)))\n    (first coll)\n    (my-last (rest coll))))","user":"5777cffae4b0979f89651651"},{"problem":20,"code":"(fn [ar] (first (rest (reverse ar))))","user":"57b6231ae4b0fbc9809a27b7"},{"code":"(fn blah [[x y & rest]] \n  (if (empty? rest) \n     x \n     (blah (cons y rest))))","problem":20,"user":"4ee75ec2535d93acb0a66867"},{"code":"(fn [l] (nth l (- (count l) 2) ))","problem":20,"user":"5349ac2be4b084c2834f4a67"},{"problem":20,"code":"(fn [a] (first (last (partition 2 1 a))))","user":"60b61b40e4b0e0fa5f1b4244"},{"code":"(fn thePenultime [x]\n  (if (= 2 (count x))\n    (first x) (thePenultime (rest x))\n    ))","problem":20,"user":"51735df9e4b00f4b6b0490d6"},{"problem":20,"code":";#(nth % (dec (dec (count %))))\n#(nth % (- (count %) 2))","user":"5d76cb59e4b02e6b30c93528"},{"problem":20,"code":"(fn [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (recur (rest xs))))","user":"587100d6e4b01531a375e9f0"},{"problem":20,"code":"(fn second-last [l] \n  (if (= (count l) 2) (first l) (second-last (rest l))))","user":"57e8dad5e4b0bfb2137f5b1b"},{"code":"(fn [lst] \n  (if (= (count lst) 2) \n    (first lst)\n    (recur (rest lst))\n    )\n  )","problem":20,"user":"524b1bf7e4b09eba1c0223c3"},{"code":"(fn [x] \n  (if (= (count x) 2)\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [lista] (nth lista (- (count lista) 2)))","problem":20,"user":"52facaeae4b047fd55837000"},{"code":"(fn [l]\n  (loop [xs l]\n\t(if (= (count xs) 2)\n      (first xs)\n      (recur (rest xs)))))","problem":20,"user":"51696bcde4b03f62cda68ce7"},{"problem":20,"code":"(fn new-last [l]\n  (cond\n   (= 2 (count l)) (first l)\n   :else (new-last (rest l))))","user":"559f06bae4b0acc240e314e6"},{"code":"(fn [s]  (first (rest (reverse s))))","problem":20,"user":"4f055fb9535dcb61093f6bf7"},{"problem":20,"code":"(fn penultimate-element [[head & tail]]\n  (let [tail-size (if tail (count tail) 0)]\n    (cond (zero? tail-size)\n          nil\n          \n          (= tail-size 1)\n          head\n          \n \t\t  :else\n          (penultimate-element tail))))","user":"60e89572e4b0fbed2fe3123e"},{"problem":20,"code":"(fn [s] \n  (loop [r s l1 nil l2 nil]\n    (if (empty? r)\n      l2\n      (recur (rest r) (first r) l1)\n      )\n    )\n  )","user":"57d7c894e4b0bd073c2023de"},{"problem":20,"code":"(fn func [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (func (rest xs))))","user":"54c8dc10e4b045293a27f655"},{"code":"(fn[x](second(reverse x)))","problem":20,"user":"50d20c28e4b05a71a896ef5d"},{"problem":20,"code":"(fn [x] \n  (first (rest (reverse x))\n   ))","user":"55a505dde4b0acc240e31549"},{"problem":20,"code":"(fn penultimate [s]\n  (if (= (rest (rest s)) '())\n    (first s)\n    (penultimate (rest s))\n  )\n)","user":"54ec1eafe4b024c67c0cf851"},{"problem":20,"code":"(fn [x] \n  (nth x (- (count x) 2)  ) )","user":"558d23d4e4b027778923763d"},{"code":"(fn penult [seq]\n  (if (or (empty? (rest seq))\n          (empty? (rest (rest seq))))\n      (first seq)\n      (penult (rest seq))))","problem":20,"user":"4f03cc36535dcb61093f6b69"},{"problem":20,"code":"(fn [s] (second (reverse (vec s))))","user":"56e4a6c1e4b03a7c14b85a51"},{"problem":20,"code":"(fn last [seq] (nth seq  (- (count seq) 2)))","user":"594c1ab9e4b07ddc2dafae58"},{"problem":20,"code":"(fn [x] \n  (nth x (- (count x) 2) ))","user":"555883c5e4b0deb715856e2d"},{"problem":20,"code":"(fn sec-to-last [q] (nth q (- (count q) 2 )))","user":"5b113f20e4b0cc2b61a3be2c"},{"code":"(fn my-last [coll] (if (= 2 (count coll))\n                          (first coll)\n                          (my-last (rest coll))))","problem":20,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(comp last drop-last)","problem":20,"user":"4e50b67b535dc968683fc4ed"},{"problem":20,"code":"(fn [mygroup] (nth mygroup (- (count mygroup) 2)))","user":"5900e067e4b0438e51c2d031"},{"problem":20,"code":"#(->% reverse rest first)","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [x] \n  (let [c (count x)]\n    (nth x (- c 2))))","problem":20,"user":"4e707714535d5021c1a89638"},{"problem":20,"code":"(fn myFun [x] (if (empty? (rest x)) nil (if (empty? (rest (rest x))) (first x) (myFun (rest x)))))","user":"60263f9fe4b0d5df2af2222c"},{"problem":20,"code":"(fn[x] (first (drop (dec(dec (count x))) x)))","user":"5142154ce4b0b50abeb46b2b"},{"problem":20,"code":"#(nth % \n      (- (count %) 2))","user":"56366f73e4b0bfe05bf117cc"},{"code":"(fn penult [coll] (if (= (count coll) 2) (first coll) (penult (rest coll))))","problem":20,"user":"4ef4c1ff535dced4c769f23e"},{"problem":20,"code":"(fn  [c] ( first (take-last 2 c)))","user":"597236fde4b01722bebd4c7f"},{"problem":20,"code":"(fn [a] (first (take-last 2 a)))","user":"53ee6e81e4b0d648e757f4cd"},{"problem":20,"code":"(fn secondlast [x]\n  (first (rest (reverse x))))","user":"59d68f3fe4b0ef0a1e9b5c1e"},{"code":"(fn [lst]\n    (let [[a b & c] lst]\n      (if (not c)\n        a\n        (recur (rest lst)))))","problem":20,"user":"524f213be4b0541d1855b7ff"},{"code":"(fn [a-seq] (if (= 1 (count (rest a-seq))) (first a-seq) (recur (rest a-seq))))","problem":20,"user":"4faa8de0e4b081705acca1f8"},{"code":"(fn [x] (last(butlast x)))","problem":20,"user":"53847a4ce4b06839e8705ef3"},{"code":"(fn [l] \n     (nth l (- (count l) 2)))","problem":20,"user":"4f89bd1be4b033992c121c7d"},{"problem":20,"code":"#((fn [[fst sec]] sec) (reverse %))","user":"574e7be7e4b02ea114799242"},{"code":"(fn [x]\n  (if (empty? (rest (rest x))) (first x)\n  (recur (rest x))))","problem":20,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":20,"code":"(fn f [x] \n  (if (= (count x) 2) \n    (first x) \n    (f (rest x))))","user":"598a4ff7e4b02b9968b84cda"},{"problem":20,"code":";mine\n;#(second (reverse %))\n;nikelandjelo\n;(comp last butlast)\n;mine\n#(last (butlast %))","user":"5a544eeee4b05d388ecb6c24"},{"problem":20,"code":"(fn [sent]\n  (nth sent (- (count sent) 2)))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn\n  [ys]\n  (loop [[x & xs] ys]\n    (if (= 1 (count xs))\n      x\n      (recur xs))))","problem":20,"user":"52e8ee9ae4b09f7907dd14a1"},{"code":"#(->(reverse %)\n    second)","problem":20,"user":"4fea7594e4b0140c20fb9c06"},{"problem":20,"code":"(fn [s]\n  (if (next(next s))\n    (recur (next s))\n    (first s)))","user":"5f520098e4b0a0bc16850a6c"},{"problem":20,"code":"(fn rest_other [x] (second (reverse x)))","user":"5714c718e4b07c98581c3ac7"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2)x))","user":"57218b07e4b0c5bde472c0b1"},{"problem":20,"code":"(fn [col] (last (butlast col)))","user":"55ad1833e4b03311e7b7329f"},{"problem":20,"code":"(fn [list] \n  (first (drop 1 (reverse list))))","user":"560d7863e4b05f002753df40"},{"problem":20,"code":"(fn [s] \n  (if (and (seq (rest s)) \n            (nil? (seq (rest (rest s)))))\n    (first s)\n    (recur (rest s))))","user":"5d6cead9e4b04d129b00f2b5"},{"problem":20,"code":"(fn [x] (-> x \n            reverse \n            second))","user":"5b34f9bfe4b025bcb146f354"},{"problem":20,"code":"(fn [s]\n  (-> s\n      (reverse)\n      (nth 1)))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"problem":20,"code":"; approach: check for 3 spots at a time: if the rest of the rest is blank, give the first\n(fn find-penult [x] (if (= (rest (rest x)) ()) (first x) (find-penult (rest x))))","user":"6036b21ce4b0d5df2af222de"},{"code":"(fn[col] (nth col (- (count col) 2)))","problem":20,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":20,"code":"(fn returnsectolast [elements] (first (rest (reverse elements))))","user":"5d5ea44fe4b0c9e5857d4ff6"},{"problem":20,"code":"(fn PenultimateElement [lst] \n  (first (rest (reverse lst))))","user":"607508f3e4b069485764de54"},{"code":"(fn [seq] (second (reverse seq)))","problem":20,"user":"4e10a8e4535d04ed9115e7c2"},{"problem":20,"code":"#(loop [l %] (if (empty? (rest (rest l))) (first l) (recur (rest l))))","user":"542db41be4b0dad94371f2bb"},{"problem":20,"code":"(fn [coll] (loop [coll coll]\n             (if (= (count (rest coll)) 1)\n               (first coll)\n               (recur (rest coll)))))","user":"56b2300ce4b0982f16b37dff"},{"problem":20,"code":"(fn get-last [sequence]\n  (loop [sequence sequence]\n    (if (= ( (fn len [sequence]\n    (loop [sequence sequence, res 0]\n        (if (seq sequence)\n            (recur (rest sequence) (inc res))\n            res))) sequence) 2)\n      (first sequence)\n      (recur (rest sequence)))))","user":"587bead1e4b01531a375eb0d"},{"problem":20,"code":"(fn [sq] (loop [[this & remaining] sq]  (if-let [x (second remaining)] (recur remaining) this)))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn [mySeq] (first (rest (reverse mySeq))))","problem":20,"user":"4fce75cfe4b03432b189f400"},{"problem":20,"code":"(fn f[m]\n  (if (empty? (rest (rest m)))(first m) (f (rest m)) ) )","user":"56fa8984e4b07572ad1a88c1"},{"code":"(fn [x]\n  (if (= (rest (rest x)) '())\n    (first x)\n    (recur (rest x))\n  )\n)","problem":20,"user":"51effd77e4b0249c592fbdf3"},{"code":"(fn [s] (nth s (- (count s) 2)))","problem":20,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":20,"code":"(fn penultimate [coll]\n  (if (< (count coll) 3) \n    (first coll)\n    (penultimate (rest coll))))","user":"5a492896e4b05d388ecb6b6e"},{"code":"(fn\n[l]\n(second (reverse l))  \n)","problem":20,"user":"530c462ae4b02e82168697d9"},{"problem":20,"code":"(fn get-last [[x & remain]] (if (= 1 (count remain)) x (get-last remain)))","user":"5c3d9036e4b0d62ef62d9fb5"},{"problem":20,"code":"#(first (drop (- (count %) 2) %))\n;#(if (= 1 (count (rest %))) (first %) (recur (rest %)))","user":"55b22c33e4b0da326a65cf79"},{"problem":20,"code":"(fn [x]\n (nth x (- (count x) 2))\n  )","user":"600e4639e4b074f607df66a2"},{"problem":20,"code":"(fn get-scd-last-elem\n  [col]\n  (if (= 2 (count col))\n    (first col)\n    (get-scd-last-elem (rest col))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":20,"code":"(fn [coll] (peek (pop (vec coll))))","user":"5d8a3f3ee4b0915913b1d3c9"},{"code":"(fn [x](nth x (- (count x) 2)))","problem":20,"user":"504eff22e4b0e7ad84dbc4a9"},{"code":"(fn [y] \n  (if (> (count y) 1)\n    (loop [x y]\n      (if (= (rest (rest x )) [])\n        (first x)\n      (recur (rest x))))\n  \"invalid list\"))","problem":20,"user":"5045ac21e4b01f6c9a8b2371"},{"code":"(fn [l]\r\n   (second (reverse l)))","problem":20,"user":"4dda2c1b535d02782fcbe9ef"},{"code":"(fn [coll]\n  (second (reverse coll)))","problem":20,"user":"4db6d993535d1e037afb2180"},{"problem":20,"code":"(fn [[x x' x'' :as xs]]\n  (if (nil? x'')\n      x\n      (recur (next xs))))","user":"5e15cb00e4b0a047bd49f709"},{"problem":20,"code":"(fn [x]\n  (first (nthrest x (- (count x) 2))))","user":"5baa1b58e4b0a20761a2344e"},{"code":"(fn next2last [x] (last (drop-last x)))","problem":20,"user":"53123e3fe4b08068f379ecf7"},{"code":"(fn [coll]\n  (if (nil? (next (next coll)))\n    (first coll)\n    (recur (next coll))))","problem":20,"user":"4dbd72d0535d020aff1edf43"},{"code":"(comp last butlast vec)","problem":20,"user":"528cf6f7e4b0239c8a67aebd"},{"problem":20,"code":"(fn [x]\n   ( nth x ((comp dec dec count) x))\n   )","user":"60d45525e4b0d60f5ea6f7dc"},{"code":"(fn [x]\n  (nth x ((comp dec dec count) x)))","problem":20,"user":"51750cd4e4b07031762f2ee5"},{"problem":20,"code":"(fn find-penultimate [[first & rest]]\n    (if (= (count rest) 1)\n      first\n      (recur rest)))","user":"57f6e666e4b0d3187e9008f2"},{"problem":20,"code":"(fn lastItem [sequenc] (nth sequenc (dec (- (count sequenc) 1))))","user":"5683e0c6e4b0945ebc182aa3"},{"code":"#(second (reverse  %))","problem":20,"user":"4f1e4ab5535d64f603146496"},{"code":"(fn [x] (\n  .get x (- (count x) 2)\n         )\n  )","problem":20,"user":"51e3272ce4b0c611d6113e40"},{"problem":20,"code":"(fn [seq] (#(first (reverse %)) (drop-last seq)))","user":"5cbe21eee4b0ccb06196274b"},{"problem":20,"code":"(fn teste\n  [x]\n  (nth x (- (count x) 2)))","user":"5eec2f79e4b07c55ae4a0504"},{"code":"#((vec %) (-> % count (- 2)))","problem":20,"user":"4e662d58535d8ccf87e9fe75"},{"problem":20,"code":"#(fnext(reverse %))","user":"54f9f25de4b0cf870d9346fb"},{"problem":20,"code":"(fn penultimate[x] (first(rest (reverse x))))","user":"555c7517e4b0b056612e224e"},{"code":"(fn [x] (second( reverse x)))","problem":20,"user":"5179a5a2e4b0684c1c981a4f"},{"code":"#(last (butlast (seq %)))","problem":20,"user":"4f073429535dcb61093f6c23"},{"problem":20,"code":"(fn penult [l]\n    (case (count l)\n          0 nil\n          1 nil\n          2 (first l)\n          3 (first (rest l))\n          (penult (rest (rest l)))))","user":"55987606e4b031d6649c9b99"},{"problem":20,"code":"(fn [listr]\n  ((comp last drop-last) listr))","user":"6038b6b4e4b0d5df2af222ef"},{"problem":20,"code":"(fn [el]\n  (nth el\n    (#(- % 2) (#(.count %) el))))","user":"58a413b5e4b02bd94d917f07"},{"problem":20,"code":"(fn [arr]\n  (nth arr (- (count arr) 2)))","user":"5537f30fe4b09218d5f44fd8"},{"problem":20,"code":"#(-> % (reverse) (rest) (first) )","user":"57457b1ce4b009280f9f2b4c"},{"problem":20,"code":"(fn rev11 [x]\n        (if\n          (empty? (rest (rest x)))\n          (first x)\n          (rev11 (rest x))\n          ))","user":"5eccbce6e4b016b56eae058e"},{"code":"(fn [es] (first (rest (reverse es))))","problem":20,"user":"52deb735e4b09f7907dd13f7"},{"code":"#(first(drop (- (count %) 2) %))","problem":20,"user":"4e0e0529535d04ed9115e7b9"},{"problem":20,"code":"(fn penultimate-element [s]\n  (if (seq (rest (rest s))) (penultimate-element (rest s)) (first s)))","user":"5cb4f632e4b026601754b92b"},{"code":"(fn [coll] \r\n  (loop [h (first coll) t (rest coll)] \r\n    (if (= (count t) 1)\r\n      h \r\n      (recur (first t) (rest t)))))","problem":20,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":20,"code":"(fn [s] \n  (cond\n   (= (count s) 0) ()\n   (= (count s) 1) ()\n   (> (count s) 1) (nth s (- (count s) 2))\n   )\n)","user":"54266c56e4b01498b1a71b18"},{"code":"(fn [se] (nth se (- (count se) 2)))","problem":20,"user":"52e7d3d7e4b09f7907dd148e"},{"code":"(fn f [x]\n  (if (= nil (next (next x)))\n    (first x)\n    (f (next x))))","problem":20,"user":"4f2acd70e4b0d6649770a041"},{"code":"(fn [var] (let [[a b & _] (reverse var)] b))","problem":20,"user":"51f98843e4b09be9c177e54e"},{"problem":20,"code":"#( let[x (- (count %) 2)] (nth % x))","user":"58f9a725e4b0438e51c2cf4f"},{"problem":20,"code":"(fn [collection]\n  (nth collection (- (count collection)2)))","user":"5c59b836e4b01df32ab73263"},{"problem":20,"code":"(fn [coll]\n  (loop [current (first coll)\n         r (rest coll)]\n        (if (= 1 (count r))\n          current\n          (recur (first r) (rest r)))))","user":"5641296de4b08d4f616f5ef4"},{"problem":20,"code":"(fn [xs] \n  (loop [[x & remainder] xs] \n    (if (next remainder) (recur remainder) x)))","user":"56d5bc66e4b0ea9b8538f7c2"},{"problem":20,"code":"(fn second-to-last \n  [paramList] \n  (let [paramListCount (count paramList)]\n  \t(if (> paramListCount 1)\n  \t\t(nth paramList (- paramListCount 2))\n      (first paramList))\n  )\n)","user":"55ef51f1e4b066087aa94534"},{"code":"(fn [x] (let [n (count x)] (if (< n 2) (first x) (nth x (- n 2)))))","problem":20,"user":"52b60e94e4b0c58976d9ad3e"},{"code":"(fn [s] \n  (nth\n   s\n   (- (count s) 2)))","problem":20,"user":"524ac3d1e4b09eba1c0223a0"},{"problem":20,"code":"(fn [coll] (nth coll (- (count coll) 2)) )","user":"59a80652e4b0bcf4e9a43aeb"},{"code":"(fn pen [v] \n  (if (not (seq (rest (rest v)))) \n    (first v)\n    (recur (rest v))))","problem":20,"user":"5034374de4b062bc5d7ae161"},{"code":"(fn penu [x]\n  (if (== (count x) 2) (first x) (penu (rest x))))","problem":20,"user":"4ed4798f535d10e5ff6f52cc"},{"code":"(fn [coll]\n  (loop [c coll]\n    (if (empty? (rest (rest c)))\n      (first c)\n      (recur (rest c)))))","problem":20,"user":"51991a89e4b068aa333628fd"},{"problem":20,"code":"(fn [sequ]\n  (let [noele (- (count sequ) 2)]\n    (nth sequ noele)))","user":"594e6b8ce4b07ddc2dafaeac"},{"problem":20,"code":"(fn second-to-last [lst] (first (rest (reverse lst))))","user":"5587fe2ce4b059ccff29b1ed"},{"problem":20,"code":"(fn second-to-last [s]\n   (if (next (next s))\n     (recur (next s))\n     (first s)))","user":"52b36925e4b0c58976d9ad0b"},{"code":"(fn second-lst [xs] \n  (if ((fn third [ys] (second (rest ys)) ) xs)\n       (second-lst (rest xs)) \n       (first xs)\n       )\n    )","problem":20,"user":"510f435fe4b0a5a410fb0e25"},{"problem":20,"code":"(fn [x] (->> x\n  reverse\n  rest\n  first))","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":20,"code":"(fn last-ele [[a b & c]]  (if c (recur (conj c b))a))","user":"5a803844e4b00b71e582a04a"},{"code":"(fn slst [x] (first (rest (reverse x))))","problem":20,"user":"51b77c9be4b0d906fcd71d37"},{"problem":20,"code":"(fn second-to-last [x] (second(reverse x)))","user":"5614fa1de4b05f002753dfbe"},{"problem":20,"code":"(fn [lst] (first ( rest (reverse lst))))","user":"53ef78bee4b0742d9025b0cd"},{"code":"(fn second-last-element [x]\n  (if (next (next x))\n    (recur (next x))\n    (first x)))","problem":20,"user":"520446d5e4b0c283853240b8"},{"problem":20,"code":"(fn l [x] (cond (= 2 (count x)) (first x) :else (l (rest x))))","user":"5888f271e4b0f1effa3b7726"},{"code":"(fn [slist]\n    (if (= 2 (count slist)) (first slist) (recur (rest slist))))","problem":20,"user":"4eee3e6a535d93acb0a668c3"},{"problem":20,"code":"(fn but-last [x] (second (reverse x)))","user":"53442a91e4b084c2834f4a27"},{"code":"(fn [a](first (next (reverse a))))","problem":20,"user":"525d417ee4b0cb4875a45d68"},{"code":"(fn [col]\n   (first (reverse (drop-last col))))","problem":20,"user":"53386fb9e4b0e30313ee6c9a"},{"code":"(fn second-last\n  [collection]\n  (-> collection\n     reverse\n     rest\n     first))","problem":20,"user":"528ba6a2e4b0239c8a67aea4"},{"code":"(fn penultimate\n  [s]\n  (nth s (- (count s) 2)))","problem":20,"user":"528e25b9e4b0239c8a67aed5"},{"problem":20,"code":"(fn [seq] (let [x (- (count seq) 2)] (nth seq x)))","user":"5b98e5a7e4b0c0b3ffbd4abf"},{"code":"(fn pen [x] (if (> (count x) 2) (pen (rest x)) (first x)))","problem":20,"user":"5313165ce4b08068f379ed06"},{"problem":20,"code":"(fn [y] (second (reverse y)))","user":"591770dae4b09b4ee5954b9c"},{"problem":20,"code":"(fn penultimate-element [s] (if (empty? (rest (rest s))) (first s) (penultimate-element (rest s))))","user":"5c7734c7e4b0fca0c1622804"},{"problem":20,"code":"(fn getLast [x] (nth x (-  (count x) 2)))","user":"5509f992e4b06e50f9beb128"},{"problem":20,"code":"(fn mylast [l] \n  (print l)\n  (if (> (count l) 2) \n     (mylast (rest l))\n     (first l)\n  )\n)","user":"5c6748f0e4b0fca0c16226b6"},{"problem":20,"code":"#(first(reverse(butlast%)))","user":"5a99c5a9e4b0d174b936c7b1"},{"problem":20,"code":"#(if (= (first (rest %)) (last (rest %))) (first %) (recur (rest %)))","user":"54aec21ae4b09f271ff37cf7"},{"code":"(fn pen [x] (if (= (count x) 2) (first x) (pen (rest x))))","problem":20,"user":"52e0c195e4b09f7907dd1414"},{"problem":20,"code":"(fn [lst] (first (reverse (butlast lst))))","user":"55efb51ee4b066087aa9453b"},{"problem":20,"code":"#(if (empty? (rest (rest %)))\n   (first %)\n   (recur (rest %))\n )","user":"54973374e4b0b312c081ff6f"},{"problem":20,"code":"(fn [x] (nth x (- (count x)2)))","user":"5434d921e4b0b6b47310fcf5"},{"code":"#(if (= (count %) 2) (first %) (recur (rest %)))","problem":20,"user":"4dbe5975535d020aff1edf5d"},{"code":"(fn last-but-one-element[l]\n  (if (empty? (rest (rest l)))\n    (first l)\n    (last-but-one-element (rest l))\n  )\n)","problem":20,"user":"530b8ce1e4b02e82168697cd"},{"problem":20,"code":"(fn [sqnc] (first (rest (reverse sqnc))))","user":"566f3e18e4b0a866af6896e7"},{"problem":20,"code":"(fn penult [alist]\n  (cond\n   (nil? (second (rest alist))) (first alist)\n   :else (penult (rest alist))\n   ))","user":"5ca3695fe4b048ec896c5ba9"},{"problem":20,"code":"(fn [coll] \n  (nth coll (- (count coll) 2)))","user":"573e2772e4b05c31a32c0822"},{"problem":20,"code":"(fn [s]\n  (loop [s s\n         x nil]\n    (if (next s)\n      (recur (next s)\n             (first s))\n      x)))","user":"5b8baa2ce4b0c0b3ffbd49bd"},{"problem":20,"code":"(comp #(get % 1) vec reverse)","user":"5938be98e4b02506e01a29ec"},{"problem":20,"code":"#(first \n   (rest\n    (reverse %)\n   )\n )","user":"542e8011e4b0dad94371f2c4"},{"code":"(fn last-element [s] (if (= 2 (count s)) (first s) (last-element (rest s))))","problem":20,"user":"4e6a2503535d8ccf87e9fea2"},{"problem":20,"code":"(fn second [li]\n  (last (take (- (count li) 1) li)))","user":"5ef4677ce4b07c55ae4a0542"},{"code":"(fn [x] (second(reverse x )))","problem":20,"user":"528035c8e4b0757a1b1713e9"},{"problem":20,"code":"(fn [[element & remain]]\n  (if (= (count remain) 1)\n    element\n    (recur remain)))","user":"60b34c5de4b0e0fa5f1b422e"},{"code":"(fn [x & y] (second (reverse (concat x y))))","problem":20,"user":"52f163dfe4b05e3f0be25eeb"},{"problem":20,"code":"(fn [coll] (->> coll (reverse) (rest) (first)))","user":"577aad81e4b0d3393e5deb04"},{"problem":20,"code":"(fn [x] (.get x (- (.count x) 2)))","user":"5772bd3be4b0979f896515cf"},{"problem":20,"code":";(fn [x] (second (reverse x)))\n\n\n; Apply destructure to map reversed list to [_ x]. this maps second element of reversed list to x\n\n#(let [[_ x] (reverse %)] x)","user":"54dce6dbe4b024c67c0cf78d"},{"code":"(fn [x]\r\n  (nth x (- (count x) 2)))","problem":20,"user":"4de08793535d08e6dec9fde2"},{"problem":20,"code":"(fn last_el [l] (if (<= (count l) 2) (first l) (last_el (rest l))))","user":"5f63684be4b02876ed9fd012"},{"problem":20,"code":"(fn [s] \n  (if (> (count s) 2)\n    (recur (next s))\n    (first s)))","user":"5705e404e4b0b0fb43fd0676"},{"problem":20,"code":"(fn [coll]\n  (loop [[x & xs] coll\n         a nil]\n    (if xs\n      (recur xs x)\n      a)))","user":"54d0c32de4b0e8a36923e5cf"},{"problem":20,"code":"(fn [coll]\n   (nth coll (- (count coll) 2)))","user":"54edc818e4b024c67c0cf865"},{"problem":20,"code":"(fn [coll] (let [n (count (take 3 coll))] (cond (<= n 1) nil (= n 2) (first coll) :else (recur (rest coll)))))","user":"55af3e6be4b03311e7b732c7"},{"problem":20,"code":"(fn [coll] \n  (if (seq? coll)\n    (last (butlast coll))\n    (last (butlast (seq coll))))\n  )","user":"546a70bae4b00cfc9eacc159"},{"code":"(fn penultimate [[first second & tail]]\n  (if (= tail nil)\n    first\n    (penultimate (conj tail second))\n    )\n  )","problem":20,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn [a]\n  (let [car (first a),\n        cadr (first (next a)),\n        cddr (next (next a))]\n    (if (nil? cddr) car (recur (next a)))))","problem":20,"user":"529b5301e4b02ebb4ef7509f"},{"code":"#(nth % (- (count %)2) )","problem":20,"user":"53050ecee4b0d8b024fd3758"},{"problem":20,"code":"(fn [[n & more]] \n  (if (= 1 (count more))\n    n\n    (recur more)))","user":"56618573e4b068f2fe63dc68"},{"problem":20,"code":"(fn [sequence] (second (reverse sequence)) )","user":"565202aae4b0f9d632dd845c"},{"code":"(fn mylast[x] (nth x (- (count x) 2)))","problem":20,"user":"53979319e4b0b51d73faaeec"},{"code":"(fn\n  [list]\n  (loop [p nil\n        s list]\n    (let [r (rest s)]\n      (if (= '() r)\n        p\n        (recur  (first s) r)))))","problem":20,"user":"4fbd24d2e4b081705acca2ff"},{"problem":20,"code":"(fn [vals] (second (reverse vals)))","user":"5bfaab50e4b0bdcf453d15ce"},{"problem":20,"code":"(fn [i] (second (reverse i)))","user":"5a024d72e4b01bb0ae8afd62"},{"code":"(fn pent [l] (nth l (- (count l) 2)))","problem":20,"user":"51e786c9e4b0a3e081b8cbeb"},{"code":"(fn last2 [[fir & remain]]\n\t(if (= 1 (count remain)) fir (recur remain))  \n)","problem":20,"user":"51dc0ed1e4b09c47a74ce105"},{"problem":20,"code":"(fn second-to-last [seq] (last (drop-last seq)))","user":"5b5fb62be4b0c6492753e6f7"},{"code":"(\n    fn [x] (\n             (into [] x) (- (count x) 2)\n         )\n  )","problem":20,"user":"528f82d8e4b0239c8a67aef4"},{"code":"#(first (reverse (butlast %)))","problem":20,"user":"4e6fe3a6535d5021c1a89629"},{"code":"(fn[a]\n  (nth a (- (count a) 2)))","problem":20,"user":"4ff990f4e4b0678c553fc3a9"},{"problem":20,"code":"#((vec %)(- (count %) 2))","user":"5534795ee4b09218d5f44f9e"},{"code":"(fn [x] ( second (reverse x) ) )","problem":20,"user":"52cbe910e4b07d0d72b27353"},{"code":"(fn [x] (first (reverse (butlast x))))","problem":20,"user":"518cdbd6e4b05e6c8537e387"},{"code":"(fn [coll] (loop [c coll\r\n                  n (first coll)]\r\n             (if (next c)\r\n                 (recur (next c) (first c))\r\n                 n)))","problem":20,"user":"4e1047ad535d04ed9115e7bf"},{"problem":20,"code":"(fn f [[x1 x2 & xs]] (if (empty? xs) x1 (f (cons x2 xs))))","user":"5be744dae4b0f319e2d7ec57"},{"problem":20,"code":"(fn [xs]\n  (let [rs (rest xs)]\n    (if (second rs)\n      (recur rs)\n      (first xs))))","user":"5b0c6874e4b0cc2b61a3bde5"},{"code":"(fn retornaPenultimoElemento [colecao]\n  (nth colecao (- (count colecao) 2))\n  )","problem":20,"user":"4e905ed4535d65386fec2154"},{"code":"(fn[c](let[s(seq c)](nth s(-(count s)2))))","problem":20,"user":"52764c14e4b03e8d9a4a74da"},{"code":"#(peek (pop  (vec %)))","problem":20,"user":"4ea76541535d7eef308072eb"},{"code":"#(nth (reverse %1) 1)","problem":20,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":20,"code":"(fn the-sec-last [x] (second (reverse x)))","user":"56314f6ee4b0bfe05bf11791"},{"problem":20,"code":"(fn [args]\n  (loop [[current nextValue & remainder] args]\n    (if (empty? remainder)\n      current\n      (recur (cons nextValue remainder)))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"(fn [x] (second(reverse x)));cheated","problem":20,"user":"5032cf63e4b0e4096af89716"},{"code":"(fn [data]\n  (if (next (next data))\n    (recur (next data))\n    (first data)))","problem":20,"user":"538d561ce4b0b51d73faae6c"},{"problem":20,"code":"(fn pen [x] (if (= (rest (rest x)) []) (first x) (pen (rest x))))","user":"5531c9c0e4b076ab5578f82a"},{"code":"(fn [x] \n  (if (empty? (rest (rest x)))\n      (first x)\n      (recur (rest x))))","problem":20,"user":"533431e4e4b019098a6f8b8d"},{"problem":20,"code":"(fn find-last [list] (second (reverse list)))","user":"55ef88c0e4b066087aa94536"},{"code":"(fn \r\n [L]\r\n (if (>= (count L) 2 ) (second (  reverse L )) nil ) )","problem":20,"user":"4e6ff01e535d5021c1a8962b"},{"code":"(fn [coll] (.get coll (- (count coll) 2)))","problem":20,"user":"537044bee4b0fc7073fd6e95"},{"code":"#( first (rest (reverse %))  )","problem":20,"user":"5148f086e4b05514c84b7ccb"},{"problem":20,"code":"(fn [lx] (first (take-last 2 lx)))","user":"57141357e4b07c98581c3ab3"},{"code":"(fn myLast [s]\r\n  (let [[hd & tl] s]\r\n    (if (= 1 (count tl))\r\n        hd\r\n        (myLast tl))))","problem":20,"user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn[x] (first (rest (reverse x))))","problem":20,"user":"4eef3afe535d305ff5cb7f1d"},{"problem":20,"code":"(fn last-x [x]\n(if (> (count x) 2) (last-x (rest x)) (first x))\n )","user":"562f2d4ee4b0ab312c17ebc6"},{"problem":20,"code":"#(->> % (vec) (drop-last) (vec) (peek))","user":"5dd47f7ce4b0948ae9d9ad6d"},{"problem":20,"code":"(fn take_l [col] (nth col (- (count col) 2) nil))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":20,"code":"(fn foo [items] (second (reverse items)))","user":"53a7637de4b047364c044419"},{"problem":20,"code":"(fn [xs]\n  (-> xs\n      reverse\n      second))","user":"5d11618de4b02c15ef021985"},{"code":"(fn [n] (first (rest (reverse n))))","problem":20,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":20,"code":"(fn [lst]\n  (loop [f (first lst)\n         r (rest lst)]\n    (if (= (rest r) [])\n      f\n      (recur (first r) (rest r)))))","user":"57f8627ee4b0d3187e900926"},{"problem":20,"code":"(fn [xs]\n  (last (take 2 (reverse xs)))\n  )","user":"5ac85708e4b0e27600da77ac"},{"code":"(fn [lst]\n  (if (< (count lst) 3)\n    (first lst)\n    (recur (rest lst))))","problem":20,"user":"52864dbce4b0239c8a67ae12"},{"problem":20,"code":"(fn [lst] \n  (let [sz (.size lst)]\n    (nth lst (- sz 2))))","user":"547365d4e4b0c51c1f4d727d"},{"code":"#(nth % ( - (dec (count %)) 1 ))","problem":20,"user":"5331e443e4b019098a6f8b70"},{"problem":20,"code":"(fn pre-last [sq] (first (take-last 1 (drop-last sq))))","user":"5e1b7c13e4b0dc9594008522"},{"problem":20,"code":"(fn [[penultimate tail-item & tail :as init-coll]]\n    (if (empty? tail)\n      penultimate\n      (recur (rest init-coll) )))","user":"5553b729e4b0deb715856e05"},{"problem":20,"code":"(fn second-last [a] (nth a (- (count a) 2)))","user":"56f3d21ae4b046a417f92055"},{"problem":20,"code":"(fn [incoming-list]\n  (if (>= (count incoming-list) 2)\n    (nth incoming-list (- (count incoming-list) 2))\n    nil\n  ) \n)","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":20,"code":"(fn [coll]\n  (loop [c coll]\n    (if (= (count c) 2) (first c) (recur (rest c)))))","user":"561bf9d7e4b064ca9f4b1690"},{"code":"(fn [x] (loop [c x n (count c)] (condp = n 0 nil 1 nil 2 (first c) n (recur (rest c) (dec n)))))","problem":20,"user":"5398305fe4b0b51d73faaef6"},{"code":"(fn [lst](second (reverse lst)))","problem":20,"user":"4e7d1c22535db169f9c796c5"},{"problem":20,"code":"(fn [s]\n  (loop [r s]\n    (if (= 2 (count r))\n      (first r)\n      (recur (rest r)))\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":20,"code":"(fn [[first & end]]\n  (if (nil? (next end)) first\n      (recur end)))","user":"5d126728e4b02c15ef02199a"},{"code":"(fn [x] (nth x (- (count x) 2) ) )","problem":20,"user":"4e333091535deb9a81d77f25"},{"problem":20,"code":"(fn [y] (first (rest (reverse y))))","user":"5d6fae1ee4b04d129b00f2d4"},{"problem":20,"code":"(fn [s](first (rest (reverse s))))","user":"53a7bc10e4b047364c044420"},{"code":"(fn butlast [seq]\n  (if (= (rest (rest seq)) ())\n    (first seq)\n   (butlast (rest seq))))","problem":20,"user":"4ec14602535dfed6da9c6daa"},{"problem":20,"code":"#(if (and (not (seq (rest (rest %)))) (seq (rest %)))\n   (first %)\n   (recur (rest %)))","user":"55a6b7b6e4b09e57187da29c"},{"problem":20,"code":"(fn f [l] (if (= (rest (rest l)) '())\n            (first l)\n            (f (rest l))))","user":"559248c0e4b0604b3f94d58b"},{"code":"(fn [coll]\n  (if (<= (count coll) 2)\n    (first coll)\n    (recur (rest coll))))","problem":20,"user":"4efb5508535dced4c769f276"},{"problem":20,"code":"(fn [lst]\n    (peek (pop (reverse lst))))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"(fn find-2nd-last [x] (if (= 2 (count x)) (first x) (find-2nd-last (next x))))","problem":20,"user":"4eb47bb1535d7eef30807362"},{"code":"#(first (reverse (drop-last %1)))","problem":20,"user":"4e399d94535deb9a81d77f42"},{"code":"(fn [coll]\n  (let [len (count coll)]\n    (nth coll (- len 2))))","problem":20,"user":"527aba40e4b03e8d9a4a7565"},{"problem":20,"code":"(fn [coll]\n  (nth  (reverse coll) 1))","user":"567ea403e4b0feffd0d18eb5"},{"problem":20,"code":"(fn [sec]\n  (let [sin-ultimo (butlast sec)]\n    (last sin-ultimo)))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":20,"code":"(fn [input_list] (nth (reverse input_list) 1))","user":"57640b2ce4b0994c1922fbe5"},{"code":"(fn [lst]\n  (let [a1 (first lst)\n        a2 (first (rest lst))]\n    (if (= () (rest (rest lst)))\n        a1\n        (recur (rest lst)))))","problem":20,"user":"4ec5510d535d6d7199dd3694"},{"code":"(fn [l](nth l (- (count l) 2)))","problem":20,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"#(last ( butlast %))","problem":20,"user":"513e39f9e4b02b2a3d8235bd"},{"problem":20,"code":"(fn my_last[y] \n  (loop [p nil\n         a (first y)\n         b (rest y)]\n    (if (empty? b) \n    \tp\n    \t(recur a (first b) (rest b)) )))","user":"5642b939e4b08d4f616f5f1b"},{"problem":20,"code":"(fn get-result [any-seq]\n  (->> any-seq\n       count\n       (#(- % 2)) ;; dec dec\n       (nth any-seq)))","user":"60948c3ae4b00e9e6653c3e7"},{"problem":20,"code":"#(.get %(dec (dec (count %))))","user":"5cfe7c39e4b0cc9c91588178"},{"code":"(fn penultimo[x]\r\n (if (= (next (next x)) nil)\r\n   (first x)\r\n (penultimo(rest x))\r\n )\r\n)","problem":20,"user":"4eb7ff08535d7eef30807379"},{"code":"(fn my-pen [coll]\n  (let [h (first coll), t (rest coll)]\n    (if (and t (next t)) (my-pen t) h)\n))","problem":20,"user":"504d0116e4b022602c20b089"},{"code":"(fn [v]\n  (second (reverse v))\n)","problem":20,"user":"4f88ae35e4b033992c121c6d"},{"problem":20,"code":"(fn [list] (-> list (reverse) (second)))","user":"52c634b1e4b0c2d177d6210a"},{"code":"(fn last2 [s]\n  (cond\n   (= nil (next s)) nil\n   (= nil (next (next s))) (first s)\n   :else (last2 (next s))))","problem":20,"user":"5374adc3e4b06d7f452d9e27"},{"problem":20,"code":"(fn [s] (nth s (-(count s) 2)))","user":"589ad631e4b00487982d531c"},{"problem":20,"code":"(fn [x] (-> x\n            (reverse)\n            (second)))","user":"5800ab1ee4b0a837a8b30c41"},{"code":"(fn [x] (let [lst2 #(-> % rest next) \n              rst (rest x)] \n          (if (lst2 x) (recur rst) (first x))))","problem":20,"user":"52ceffaae4b07d0d72b27398"},{"code":"(fn pen [[h1 h2 & t]]\n  (if (empty? t)\n    h1\n    (pen (cons h2 t))))","problem":20,"user":"4fea3164e4b0140c20fb9bff"},{"code":"(fn [n] (loop[l n] (if(= (count l) 2) (first l) (recur (rest l) ))))","problem":20,"user":"4f8beb2fe4b02e764a0a5185"},{"problem":20,"code":"#(first (take-last 2 %))\n\n;(comp second reverse)","user":"56b295f7e4b0982f16b37e08"},{"problem":20,"code":"(\n fn [x]\n (nth\n  x\n  (- (count x) 2)\n )\n)","user":"5be909bae4b0f319e2d7ec6d"},{"problem":20,"code":"(fn penultimate [se] (nth se (- (count se) 2)))","user":"545944a2e4b01be26fd74627"},{"code":"(fn [s] ( nth s (- (count s) 2)  ))","problem":20,"user":"51b6471ee4b02e5820733404"},{"problem":20,"code":"(fn second-to-last-in [list]\n  (if (= (count list) 2)\n    (first list)\n    (second-to-last-in (rest list))))","user":"55fe9daee4b00f4cabc57654"},{"code":"(comp peek rest reverse)","problem":20,"user":"50dca54ce4b02e6ac9592c90"},{"code":"apply (fn [& list] (second (reverse list)))","problem":20,"user":"4ed45563535d10e5ff6f52c9"},{"code":"#(second (reverse % ))","problem":20,"user":"4fbef937e4b081705acca315"},{"problem":20,"code":"(fn [seq] (-> seq (reverse) (rest) (first)))","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn f[x] (second (rseq (vec x))))","problem":20,"user":"4eb03949535d7eef30807339"},{"problem":20,"code":"(fn [collection] (nth collection (- (count collection) 2)))","user":"5524f21fe4b0882d96d091c7"},{"code":"(fn mypen [x] (second (reverse x)))","problem":20,"user":"4eaed3a7535d7eef30807328"},{"code":"(fn penult [ls] (if \n                    (empty? (rest (rest ls))) \n                    (first ls) \n                    (penult (rest ls))\n                  ) )","problem":20,"user":"502121bde4b0ef1d2d4433ba"},{"problem":20,"code":"(fn penultimate-l [coll]\n  (last (butlast coll)))","user":"52fe2dffe4b047fd55837036"},{"problem":20,"code":"(fn [sqn] (nth sqn (dec (dec (count sqn)))))","user":"5a2a0cb6e4b09cafd31c7f2c"},{"problem":20,"code":"(fn [[h & t]] (if (= 1 (count t)) h (recur t)))","user":"55c1eb52e4b0e31453f64970"},{"problem":20,"code":"(fn penul [col]\n    (last (take (dec (count col)) col)))","user":"5ce3e239e4b0a17bb84e2b46"},{"problem":20,"code":"(fn [seq]\n  (if (next (next seq)) (recur(next seq)) (first seq))\n)","user":"53c4254ce4b00fb29b221283"},{"problem":20,"code":"(fn [[x & xs]] \n  (cond \n    (-> xs count (< 2)) x\n    (-> xs count (< 3)) (first xs)\n    :else (recur xs)))","user":"58a3279fe4b02bd94d917ee9"},{"problem":20,"code":"(fn [[x & xs]]\n  (if (= 1 (count xs))\n    x\n    (recur xs)))","user":"56cf4a48e4b0ea9b8538f767"},{"problem":20,"code":"(fn [arr] (nth (reverse arr) 1))","user":"569f7bc2e4b0542e1f8d1494"},{"code":"(fn lst [l] (first (first (filter #(= 2 (count %)) (take (count l) (iterate rest l))))))","problem":20,"user":"50366589e4b0fbe0a74d26c3"},{"code":"#(nth % (max 0 (- (count %) 2)))","problem":20,"user":"50d606dae4b0159555a1fc6a"},{"code":"#(if (empty? (rest (rest %)))\n   (first %)\n   (recur (rest %)))","problem":20,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn[seq] (first (drop 1 (reverse seq))))","problem":20,"user":"52867936e4b0239c8a67ae16"},{"problem":20,"code":"(fn\n  pen\n  [x]\n  (let [a (first x) b (rest x)]\n    (cond (= 1 (count b))\n          a\n          :else\n          (pen b))))","user":"4e6aacad535d8ccf87e9fefa"},{"problem":20,"code":"(fn final [rem] (second (reverse rem)))","user":"5b107263e4b0cc2b61a3be22"},{"problem":20,"code":"(fn f [l] (if (empty? (rest (rest l)))\n          (first l)\n          (f (rest l))\n            ))","user":"595930f6e4b066ee0a44af9c"},{"code":"(fn [my-list]\n  (nth my-list (- (count my-list) 2 )))","problem":20,"user":"4f90331ee4b0dcca54ed6c8c"},{"code":"(fn second-to-last [x]\n  (second (reverse x)))","problem":20,"user":"4ea00469535d7eef3080729d"},{"problem":20,"code":"(fn fuck [x] (if (empty? (rest (rest x))) (first x) (fuck (rest x))))","user":"55a3ca84e4b0acc240e3153c"},{"code":"(fn [x] (first(rest (reverse x))))","problem":20,"user":"4e460426535dc968683fc4b1"},{"code":"(fn my_last [x] (nth x ( - (count x) 2) ))","problem":20,"user":"50970e0ae4b00ad8bab4e94f"},{"problem":20,"code":"#(loop [[e & r] %] (if (= (count r) 1) e (recur r)))","user":"53ab1ef6e4b047364c04444b"},{"problem":20,"code":"(fn but-last\n  [ls]\n  (if (empty? (rest (rest ls)))\n    (first ls)\n    (recur (rest ls))))","user":"58a58c50e4b01a0c0b232914"},{"problem":20,"code":"(fn [[one & more]]\n  (if (second more)\n\t(recur more)\n    one))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":20,"code":"(fn [[a & as]]\n  (cond \n   (empty? as) nil\n   (= 1 (count as)) a\n   :else (recur as)))","user":"57a4bb65e4b0a966079561eb"},{"code":"#( (vec %) (- (count %) 2))","problem":20,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"(fn [list] (nth list (- (count list) 2)))","problem":20,"user":"4e525840535d302ef430da72"},{"code":"#(loop [seqe %]\n    (println seqe)\n  (if\n    (= (count seqe) 2)\n    (first seqe)\n    (recur (rest seqe))\n))","problem":20,"user":"4f1ef703535d64f60314649c"},{"code":"(fn [x] (if (and (next x) (next (rest x))) (recur (rest x)) (first x)))","problem":20,"user":"4ea8a997535d7eef308072ff"},{"problem":20,"code":"(fn penul\n  [coll]\n    (loop [elements coll]\n      (if (empty? (next (next elements)))\n        (first elements)\n        (recur \n          (rest elements)))))","user":"5a3c06fce4b001c08efc0cdd"},{"problem":20,"code":";#(first (drop 1 (reverse %)))\n#(nth % (- (count %) 2))","user":"5a85f55be4b05369db4d2493"},{"problem":20,"code":"(fn[x]\n(last ( drop-last x) )\n  )","user":"5bed1e4ae4b0a6d31fed2118"},{"problem":20,"code":"(fn last [x] (nth x (- (count x) 2)))","user":"548018e1e4b0c51c1f4d732f"},{"problem":20,"code":"(fn last' [l]\n  (-> l drop-last last))","user":"56e8ef93e4b04a395b9a03f4"},{"code":";;#(second (reverse %))\n;;#(.get % (dec(dec (count %))))\n#(.get % (- (count %) 2))\n\n\n;;mine above, others' below\n\n;;(comp first rest reverse) ;;rest - Returns a sequence of the items after the first, comp - Takes a set of functions and returns a fn that is the composition\n;;of those fns\n\n;;(comp first next reverse) ;; next - Returns a seq of the items after the first","problem":20,"user":"5399629fe4b0b51d73faaf05"},{"problem":20,"code":"(fn pen [xs]\n  (if (<= (count xs) 2)\n    (first xs)\n    (pen (rest xs))))","user":"59ee6801e4b0966464fe6a1f"},{"problem":20,"code":"(fn [[x & xs]]\n    (if-let [ys (next xs)]\n      (recur xs)\n      x))","user":"56dc34a3e4b0ea9b8538f816"},{"problem":20,"code":"(fn [x] (let [x (vec x)\n              i (count x)\n              i (- i 2)]\n          (x i)))","user":"559c4236e4b066d22e731f67"},{"code":"(fn anon [x]\n  (if (= (count x) 2) (first x)\n    (anon (rest x))))","problem":20,"user":"503cc8cae4b06c4e0e1fa251"},{"code":"(fn [lst]\n  (if (= () (rest (rest lst)))\n    (first lst)\n    (recur (rest lst))))","problem":20,"user":"517fcd45e4b073af738d8b4a"},{"problem":20,"code":"(fn [col]\n  (let [idx (count col)\n       idx (- idx 2)]\n  (nth col idx)))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [l] (nth l (- (count l) 2)  ))","problem":20,"user":"526e84b5e4b03e8d9a4a732d"},{"problem":20,"code":"(fn [[x & rest]] (if (= (.size rest) 1) x (recur rest)))","user":"53cd1a9be4b00fb29b2212dc"},{"problem":20,"code":"(fn [n] \n  (nth n \n    (- (count n) 2)))","user":"54e2d85fe4b024c67c0cf7d6"},{"code":"(fn [l] (last (butlast l)))","problem":20,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":20,"code":"(fn my-last [lst] (if (= (rest (rest lst)) '()) (first lst) (my-last (rest lst))))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":20,"code":"(fn [ys] (loop [x nil xs ys] (if (< (count xs) 2) x (recur (first xs) (rest xs)))))","user":"58aae714e4b01a0c0b23298e"},{"code":"(fn [L] (second (reverse L)))","problem":20,"user":"50afa883e4b0c3f5ed5c29a2"},{"problem":20,"code":"(fn [x] (let [i (- (count x) 2)] (nth x i)))","user":"55bd2150e4b01b9910ae29fa"},{"problem":20,"code":"(fn s [l] (second(reverse l)))","user":"5e195b3ee4b0dc9594008505"},{"problem":20,"code":"(fn                        \n  [s]                               \n  (loop [n (first s)                \n  \t\t[head & tail] s]           \n\t(if-not (seq tail)              \n\t\tn                             \n\t\t(recur head tail))))","user":"52d9e126e4b09f7907dd13b1"},{"problem":20,"code":"#(->> %\n      (butlast)\n      (last))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn[x] (second(reverse x)))","problem":20,"user":"4eba5adb535dfed6da9c6d63"},{"problem":20,"code":"(fn secondlast [list]\n  (if (= (count (rest list)) 1)\n    (first list)\n    (secondlast (rest list))))","user":"5a3ece62e4b0447ef91cc5b9"},{"code":"(fn [v] (last (butlast v)))","problem":20,"user":"521d709ae4b050d5da0427ef"},{"problem":20,"code":"(fn [xs]\n  (let [x (first xs) r (rest xs)]\n    (cond\n     (= 1 (count r)) x\n     :else (recur r))))","user":"54288375e4b01498b1a71b32"},{"problem":20,"code":"(fn [arg] (get (into [] arg) (- (count (into[] arg)) 2)))","user":"55c0f842e4b01b9910ae2a2b"},{"problem":20,"code":"#(first( take-last 2 %))","user":"541ddadbe4b01498b1a71a84"},{"problem":20,"code":"(fn [l] (last (take 2 (reverse l))))","user":"55e59b67e4b050e68259b46f"},{"code":"#(let [[x & xs] %]\n    (if (> (count xs) 1)\n      (recur xs)\n      x))","problem":20,"user":"4e8a8720535d65386fec210c"},{"code":"(fn [sq]\n  (if (= (count sq) 2)\n    (first sq)\n    (recur (rest sq))))","problem":20,"user":"50775a7de4b0fc74642bff60"},{"problem":20,"code":"(fn [coll]\n  (nth (reverse coll) 1)\n  )","user":"5b199fd4e4b03cfeda66ecbd"},{"code":"(fn pen-element\n  [xs]\n  (let [[x & xs] xs]\n    (if (= 1 (count xs))\n      x\n      (pen-element xs))))","problem":20,"user":"512c0000e4b03a42b6300231"},{"problem":20,"code":"(fn penultimate [s] (second(reverse s)))","user":"5ac37d0fe4b0e27600da7718"},{"problem":20,"code":"(fn [list] \n  (second (reverse list))\n)","user":"5e1429afe4b0a047bd49f6e6"},{"problem":20,"code":"(comp (fn [[a b]] b) reverse)","user":"5a1607a2e4b0ff51aa4b31c3"},{"problem":20,"code":"(fn stl [x] \n    (nth x ( - (count x) 2)))","user":"559b90cee4b066d22e731f56"},{"problem":20,"code":"(fn [items]\n  (first (rest (reverse (into [] items))))\n  )","user":"5ac741d6e4b0e27600da777d"},{"code":"(fn [x] (first (pop(reverse x))))","problem":20,"user":"4fb218d5e4b081705acca286"},{"problem":20,"code":"(fn [s]\n  (->> s\n       butlast\n       last))","user":"60a39b80e4b00e9e6653c450"},{"code":"#(->> % (take-last 2) first)","problem":20,"user":"4fadbb17e4b081705acca23e"},{"code":"(fn second-to-last [seq] \n  (if (= (count (rest seq)) 1) \n    (first seq)\n    (second-to-last (rest seq))\n  )\n)","problem":20,"user":"4f8875bae4b033992c121c63"},{"code":"(fn [coll]\n  (nth coll\n       (- (count coll) 2)\n   )\n  )","problem":20,"user":"50fb2535e4b0d10d794c19e3"},{"code":"(\n  fn [seq] (\n    nth seq (- (count seq) 2)\n  )\n)","problem":20,"user":"4e932f38535dbda64a6f6b0c"},{"problem":20,"code":"#((vec %) (- (count (vec %)) 2))","user":"5ed8843de4b016b56eae05f3"},{"problem":20,"code":"(fn [[first & rest]]\n  (if (and rest (> (count rest) 1))\n    (recur rest)\n    first))","user":"5a904022e4b05369db4d254b"},{"problem":20,"code":"(fn [cs] (first (drop (- (count cs) 2) cs)))","user":"5bb8b53ee4b0a20761a235c0"},{"problem":20,"code":"(fn fun [x]\n  (if (= nil (next (next x)))\n    (first x)\n    (fun (rest x))))","user":"5af047b8e4b0cc2b61a3bc48"},{"code":"(fn [x] \n  (if (nil? (nnext x)) (first x) (recur (next x))))","problem":20,"user":"50eb40bfe4b0346a3e988cbe"},{"code":"(fn [col] \n  \n  (nth col (dec (dec (count col))))\n  )","problem":20,"user":"518d1b5be4b070277754617b"},{"problem":20,"code":"(fn penultimate\n  [[first-element & other]]\n  (if (= (count other) 1)\n    first-element\n    (penultimate other)))","user":"5e4e3c31e4b027a2e10ac0ad"},{"problem":20,"code":"(fn [s] (nth (take-last 2 s) 0))","user":"5f06da46e4b0cf489e8d7f54"},{"code":"(fn[[x y & m]](if m(recur(cons y m))x))","problem":20,"user":"5194ea33e4b05be8c43d2383"},{"code":"(fn stl [s] \n  (if (== (count s) 2) (first s) (recur (rest s))))","problem":20,"user":"4f71f782e4b07046d9f4f018"},{"code":"#(nth %1 (- (count %1) 2))","problem":20,"user":"4e4a94a9535dc968683fc4cd"},{"problem":20,"code":"(fn [x] (let[r (rest x)] (if (= 1 (count r)) (first x) (if(= 2 (count r)) (first r) (recur r)))))","user":"5b0b381be4b0cc2b61a3bdd2"},{"code":"(fn [x]\n  (nth x (- (count x ) 2 )))","problem":20,"user":"527c098ae4b03e8d9a4a75ad"},{"code":"#(loop [arr %]\n  (if (nnext arr)\n    (recur (next arr))\n    (first arr)))","problem":20,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":20,"code":"(fn getPenul [x] (if (= (count x) 2) (first x) (getPenul (rest x))))","user":"5c0ebca5e4b01240ff567147"},{"problem":20,"code":"(fn [n] (\n         loop [a n] (\n         if (empty? (rest (rest a)))\n         \t(first a)\n         (recur (rest a)))))","user":"56ba2f72e4b0f2655033593f"},{"problem":20,"code":"(fn sec-to-last [sq]\n  (->> sq reverse (drop 1) first))","user":"55638fe1e4b0c656e3ff17ee"},{"code":"#(second (into () (sort %)))","problem":20,"user":"52a28e1ce4b04e0c58e87bf0"},{"code":"#(-> % count (- 2) (->> (nth %)))","problem":20,"user":"4eecbc52535d93acb0a668b2"},{"code":"(fn [x] (nth x (- (count x) 2)) )","problem":20,"user":"51d662fce4b0154f82ab92ef"},{"problem":20,"code":";;(fn [x] (nth x (- (count x) 2)))\n;;#(fnext (reverse %))\n;;#(first (take-last 2 %))\n#(last (butlast %))","user":"582290b5e4b04b46fc4b0fa0"},{"code":"(fn [s]\n  (let [[f & remain] s]\n    (if (= (count remain) 1) f (recur remain))))","problem":20,"user":"5356a324e4b04ce2eb3ed269"},{"code":"(fn antp [x]\n  (if (>= 2 (count x)) (first x) (antp (rest x))))","problem":20,"user":"4ff203e5e4b0678c553fc331"},{"code":"#(-> % (reverse) (second))","problem":20,"user":"4ed339ce535d44c135fd68eb"},{"code":"#(.get (reverse %) 1)","problem":20,"user":"509fad62e4b08df8156e9e40"},{"code":"(fn [x](first (rest (rseq (vec x)))))","problem":20,"user":"4f00f997535dcb61093f6a34"},{"problem":20,"code":"(fn r [x] (if (empty? (rest (rest x))) (first x) (r (rest x))))","user":"5ab3edf0e4b073f17744260d"},{"code":";; #(loop [s %] (if (= 2 (count s)) (first s) (recur (rest s))))\n#(first (drop (- (count %) 2) %))","problem":20,"user":"5070e31ee4b0e3170b5a8678"},{"problem":20,"code":"(fn [inp_vector] (nth inp_vector (- (count inp_vector) 2)))","user":"5df8a49ae4b0a607a9a45cab"},{"code":"(fn a [lst]\r\n\r\n  (if\r\n    (not-empty (rest (rest lst)))\r\n    (a (rest lst))\r\n    (first lst)))","problem":20,"user":"4f1b9c11535d64f60314647c"},{"problem":20,"code":"(fn [x] \n   (nth x (- (count x) 2)))","user":"55f33d42e4b06e875b46ce58"},{"code":"(fn [l]\n  (nth l (- (count l) 2)))","problem":20,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":20,"code":"(fn test [x] (first(rest(reverse x))))","user":"5258d2abe4b0cb4875a45cc1"},{"problem":20,"code":"(fn\n  [my-list]\n  (if (>= (count my-list) 2)\n    (nth my-list (- (count my-list) 2))\n    nil))","user":"60743977e4b069485764de46"},{"problem":20,"code":"(fn pen-elem [x]\n(nth x (- (count x) 2)))","user":"54c9cd41e4b045293a27f67f"},{"problem":20,"code":"(fn second-to-last-element [s] (if (= (second (rest s)) nil) (first s) (second-to-last-element (rest s))))","user":"579bf7e3e4b05b1deef9ae01"},{"problem":20,"code":"(fn [_] (nth _ (- (count _) 2)))","user":"5d93536ce4b0d3f9b434ad15"},{"problem":20,"code":"(fn [s] (if (= (count s) 2)\n          \t(first s)\n          \t(recur (rest s))))","user":"5af0ac45e4b0cc2b61a3bc56"},{"problem":20,"code":"#(if (< (count %) 2)\n    (last %)\n    (nth % (- (count %) 2)))","user":"556371bae4b0c656e3ff17eb"},{"code":"(fn [xs]\n  (first\n   \t(drop (- (count xs) 2) xs)))","problem":20,"user":"512e31e9e4b0b740abc59823"},{"problem":20,"code":"(fn secondlast [list]\n      (nth list (- (count list) 2 )))","user":"55f6d4fce4b06e875b46ce9b"},{"code":"(fn [coll]\n  (loop [coll  coll]\n        (if (empty? (rest (rest coll)))  (first coll)\n    (recur (rest coll)))))","problem":20,"user":"4fc9a977e4b0ee37620e1847"},{"problem":20,"code":"(fn [x] ( second ( reverse x)))","user":"579a321de4b05b1deef9add7"},{"problem":20,"code":"#(nth % ((comp dec dec count) %))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":20,"code":"(fn [elements] (last (drop-last 1 elements)))","user":"5d09dffbe4b0cc9c9158821c"},{"problem":20,"code":"(fn [lst]\n  (let [x (first lst)\n        xs (rest lst)\n        n (count xs)]\n    (cond\n     (= 1 n) x\n     (> 1 n) nil\n     :else (recur xs))))","user":"579fc29fe4b0264b925669ff"},{"code":"#(peek (pop (vec %)))","problem":20,"user":"4e65f9d4535d8ccf87e9fe73"},{"code":"(fn [l] \r\n  (let [n (count l)] \r\n  (if (< n 2) \r\n    (do nil)\r\n    (nth l (- n 2))\r\n  )))","problem":20,"user":"4e1350af535d04ed9115e7d8"},{"problem":20,"code":"#(second (reverse %))\n\n;#(-> % reverse second)","user":"55b42706e4b01b9910ae297b"},{"code":"(fn second-last [s] (if (= (count s) 2)\n                        (first s)\n                        (second-last (rest s))))","problem":20,"user":"4e6a6af5535d8ccf87e9fedf"},{"problem":20,"code":"(fn\n  [coll]\n  (second (reverse coll)))","user":"5cf48f04e4b087f62be35a86"},{"problem":20,"code":";;(fn [x] (first (rest (reverse x))))\n#(first (rest (reverse %1)))","user":"597614a3e4b01722bebd4cd5"},{"code":"(fn [x]\n  (first\n    (rest \n      (reverse x))))","problem":20,"user":"5000a543e4b0678c553fc40f"},{"code":"#(fnext (into () %))","problem":20,"user":"4e3a5a67535deb9a81d77f49"},{"code":"#(first (rest (reverse %) ))","problem":20,"user":"4e4eecf6535dc968683fc4e8"},{"problem":20,"code":"#(loop [[head & tail] %]\n\n    (if(= 1 (count tail))\n\n     head  \n\n     (recur tail)))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [se] (nth (reverse se) 1))","problem":20,"user":"5339db61e4b0e30313ee6cb0"},{"code":"(fn [s] (second(reverse s)))","problem":20,"user":"52c7399be4b0c2d177d6211f"},{"code":"#(if (< (count %) 3)\n    (first %)\n    (recur (rest %)))","problem":20,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn [x]\n  (let [n (count x)]\n    (if (= 2 n)\n      (first x)\n      (recur (next x)))))","problem":20,"user":"4dada426c9a9d6ed2a99dc57"},{"code":"#(loop [l % prev nil] (if (next l) (recur (next l) (first l)) prev))","problem":20,"user":"5137c3b0e4b0509a8b470482"},{"code":"(fn second-to-last [s] (first (rest (reverse s))))","problem":20,"user":"4debbe5f535d08e6dec9fe06"},{"code":"(fn [ltp] (last (drop-last ltp)))","problem":20,"user":"502be4fae4b08f5602f232eb"},{"problem":20,"code":"#(nth % (dec (dec ( count %))))","user":"58ea778be4b056aecfd47d1e"},{"problem":20,"code":"#(nth  % (dec (dec (count %))))","user":"54bfc88ae4b0ed20f4ff6f09"},{"problem":20,"code":"(fn\n  [lst]\n  (if (= 2 (count lst))\n    (first lst)\n    (recur (rest lst))))","user":"5c706232e4b0fca0c162277e"},{"code":"(fn [l] (.get l (- (count l) 2)))","problem":20,"user":"51e6a2bce4b0ab43cc26c21d"},{"code":"(fn [lst] (nth lst (- (count lst) 2 ) ) )","problem":20,"user":"4e5206ec535d302ef430da6c"},{"code":"(fn [ls] (reduce (fn [a b] b) (drop-last ls)))","problem":20,"user":"4ff769bce4b0678c553fc38f"},{"problem":20,"code":"(fn\n  [seqq]\n  (nth seqq (- (count seqq) 2)))","user":"573b8cf1e4b0cd1946bd10ad"},{"problem":20,"code":"(fn my-2nd-last [s]\n  (if (nil? (nnext s))\n    (first s)\n    (recur (next s))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":20,"code":"(fn [x] \n  (if (= (count (rest x)) 1)\n    (first x)\n    (recur (rest x))))","user":"5c784248e4b0fca0c162281f"},{"problem":20,"code":"(fn [x] \n  (-> x\n      reverse\n      second\n  )\n)","user":"59d02bfbe4b0ef0a1e9b5b7b"},{"problem":20,"code":"(fn [xs]\n  (-> xs reverse second))","user":"5d3aefbde4b01671435dbd5e"},{"code":"(fn [coll]\n  (loop [x nil y nil coll coll]\n    (if (seq coll)\n      (recur y (first coll) (rest coll))\n      x)))","problem":20,"user":"4e5be681535d8a8b8723a2bc"},{"code":"#(last (take (- (count %) 1) %))","problem":20,"user":"50b29029e4b03ea880433563"},{"problem":20,"code":"(fn [arr] \n  (let [n-min-two (- (count arr) 2)] \n    (nth arr n-min-two)))","user":"53fb9f28e4b0de5c41848583"},{"problem":20,"code":"(fn ([s]\n     (second (reverse s))))","user":"56689295e4b04acd4f672df1"},{"problem":20,"code":"(fn penultimate-element \n  [lst]\n  (if (empty? lst) nil\n    (if (= (count lst) 2) (first lst)\n           (penultimate-element(rest lst)))))","user":"5bbbd077e4b0a20761a23615"},{"problem":20,"code":"(fn [[x & xs]]\n  (when (< (count xs) 1) nil)\n  (if (= (count xs) 1)\n    x\n    (recur xs)))","user":"5f135388e4b091ba50b4dbb2"},{"code":"(fn [col] (last (drop-last col)))","problem":20,"user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn findSecondToLast[collection]\n  (second (reverse collection)))","problem":20,"user":"4e723bcb535d5021c1a8965c"},{"problem":20,"code":"(fn met [x] (nth x (- (count x) 2) ))","user":"5545477fe4b0a04f79299531"},{"code":"(fn stl [lijstje] (first (rest (reverse lijstje))))","problem":20,"user":"529df98de4b04e0c58e87b88"},{"code":"(fn [lat] (if (= (count lat) 2) (first lat) (recur (rest lat))))","problem":20,"user":"4e326f34535deb9a81d77f21"},{"code":"(fn seclastof [arr] (if (= 2 (count arr)) (first arr) (seclastof (rest arr))))","problem":20,"user":"525fea5ae4b03e8d9a4a7026"},{"problem":20,"code":"(fn [[h & t]] \n  (if (= (first t) (last t))\n    h\n    (recur t)\n  )\n)","user":"5795bddbe4b0e215f87e8488"},{"problem":20,"code":"(fn secToLast [x]\n  (if (= (rest (rest x)) '())\n    (first x)\n    (secToLast (rest x))))","user":"5d1cd478e4b02ea6f0fb6991"},{"code":"(fn penultimate\n  [some-list]\n  (first (rest (reverse some-list))))","problem":20,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn [x]\n  (-> x reverse rest first)\n  )","problem":20,"user":"51631aeee4b055933a9ca02a"},{"problem":20,"code":";(comp last drop-last)\n\n#(-> % drop-last last)","user":"555a43c4e4b0deb715856e42"},{"code":"(fn this [x]\n  (let [f (first x) l (rest x)]\n    (if (= 1 (count l))\n      f\n      (this l))))","problem":20,"user":"5249b0c8e4b05ef8e38e6471"},{"problem":20,"code":"(fn [s] (nth s (-> (count s) dec dec)))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn [coll]\n  (if (= 2 (count coll))\n         (first coll)\n         (recur (next coll))))","problem":20,"user":"52f13a77e4b05e3f0be25ee9"},{"code":"(fn [x]\n  (first\n   (drop (- (count x) 2)\n         x)))","problem":20,"user":"51b6cfd6e4b02e5820733413"},{"problem":20,"code":"(fn list [arg] (second (reverse arg)))","user":"57750460e4b0979f8965160c"},{"problem":20,"code":"(fn [coll]\n  (loop [xs coll]\n    (let [item (first xs)\n          tail (rest xs)] \n      (if (second tail)\n        (recur tail)\n        item))))","user":"5675cdf1e4b05957ce8c614d"},{"code":"(fn [element]\n  (second (reverse element)))","problem":20,"user":"4f480eafe4b0d56e7bb92bcf"},{"code":"(fn [s]\r\n(if (next (next s))\r\n(recur (next s))\r\n(first s)))","problem":20,"user":"4dda61dd535d02782fcbe9f3"},{"problem":20,"code":"(fn [x]\n  (if-not (= 3 (count (take 3 x)))\n    (first (take 3 x))\n    (recur (rest x))))","user":"5490a24be4b0b312c081ff33"},{"problem":20,"code":"(fn [xs]\n  (let [ys (reverse xs)]\n    (second ys)))","user":"5bcddaeee4b0e9689409ee07"},{"problem":20,"code":"(fn [seq]\n     (nth seq (- (count seq) 2)))","user":"594e31dde4b07ddc2dafaea6"},{"problem":20,"code":"(fn [x]\n   ( second (reverse x)))","user":"5a18e311e4b0ff51aa4b31f6"},{"problem":20,"code":"(fn secondlast [coll] (second (reverse coll)))","user":"57fe7d7ce4b0d3187e9009d0"},{"code":"(fn lst [x] (if (and (next x) (> (count x) 2)) (recur (next x)) (first x)))","problem":20,"user":"502ad2cae4b0614b5299611f"},{"problem":20,"code":"(fn [x] \n  (first\n  (rest\n  (reverse x))))","user":"585c61d4e4b0f14aab7c8787"},{"problem":20,"code":"(fn [y]\n  (first\n    (remove\n      nil?\n      (map\n        (fn [k item]\n          (if (= 0 k) item nil)\n        )\n        (range (- 0 (- (count y) 2)) (count y))\n        y\n      )\n    )\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"problem":20,"code":"(fn [[n1 & more]] (if (= (count more) 1) n1 (recur more)))","user":"5cd1fd2fe4b0ccb0619628f8"},{"problem":20,"code":"(fn penultima [list]\n\t(nth list (- (count list) 2)\n    )\n  )","user":"501ff0dae4b0cb6ebc0a42f1"},{"problem":20,"code":"(fn [sq] (first (take-last 2 sq)))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":20,"code":"#(nth % (dec (dec (count % ))))","user":"55f85f04e4b03cbcff9738b0"},{"code":"#(-> % reverse second )","problem":20,"user":"527bd988e4b03e8d9a4a759d"},{"problem":20,"code":"#(->> % butlast last)","user":"5f0c3da4e4b0f30dddfb5d49"},{"problem":20,"code":"(fn [x]\n  (if (> 2 (count (rest x)))\n    (first x)\n    (recur (rest x))))","user":"548ce2dbe4b0e286459a1212"},{"problem":20,"code":"#(first(reverse (take 2 (reverse %))))","user":"5bd7ca82e4b0ed4b8aab4bc8"},{"problem":20,"code":"(fn penultimate [coll]\n  (if (= nil (next(next coll)))\n    (first coll)\n    (penultimate (rest coll)))\n  )","user":"56038f34e4b04bb52996e1bc"},{"problem":20,"code":"(fn [x]\n   (.get x (- (count x) 2)))","user":"4f4cc67fe4b03ad3f0c10c96"},{"problem":20,"code":"(fn [lst](nth lst (dec(dec(count lst)))))","user":"5611196fe4b05f002753df7a"},{"code":"(fn [li] (second (reverse li)))","problem":20,"user":"4ef4ab95535dced4c769f23b"},{"problem":20,"code":"(fn l [xs] (if (= 2 (count xs)) (first xs) (l (rest xs))))","user":"545baec3e4b01be26fd74655"},{"code":"(fn [s]\n  (loop [s s]\n    (if (= 2 (count s))\n      (first s)\n      (recur (rest s)))))","problem":20,"user":"4f9bb96ae4b0dcca54ed6d18"},{"problem":20,"code":"(fn [coll]\n  (second \n   (reverse coll)))","user":"55ff562fe4b00f4cabc57660"},{"problem":20,"code":"#(let [count (- (count %) 2)]\n   (nth % count)\n   )","user":"5673db87e4b05957ce8c6125"},{"code":"(fn get_last [x] (if (> (count x) 2) (get_last (rest x)) (first x)))","problem":20,"user":"4f041ff9535dcb61093f6ba6"},{"code":"(fn [stuff] (\n  nth stuff (- (count stuff) 2 )))","problem":20,"user":"4faa1157e4b081705acca1ea"},{"problem":20,"code":"(fn penultimate [seq]\n  (if (vector? seq)\n    (get seq (- (count seq) 2))\n    (let [r (rest seq)]\n      (if (= (rest r) '())\n        (first seq)\n        (penultimate r)))))","user":"60bf4e5de4b0e0fa5f1b4293"},{"code":"(fn [x] (second(reverse x)))","problem":20,"user":"4eb8979b535dfed6da9c6d4a"},{"code":"#(first (rest (reverse (seq %))))","problem":20,"user":"52e1c2c4e4b09f7907dd142c"},{"problem":20,"code":"(fn penultimate [s]\n  (->> s\n       (reverse)\n       (rest)\n       (first)))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":20,"code":"(fn second2last [l] (if (= (count l) 2) (first l) (second2last (rest l))))","user":"5ec7550ce4b08d0ec38692dd"},{"problem":20,"code":"(fn get-last [values]\n  (loop [v values] \n    (if (= (count v) 2) \n      (first v) \n      (recur (rest v)))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"problem":20,"code":"(fn [mylist] (let [n (count mylist)] (nth mylist (- n 2))))","user":"5a26c828e4b07f18be40aa4b"},{"code":"(fn [se] (first (drop 1 (reverse se))))","problem":20,"user":"4e7f45a8535db966e863cc3e"},{"code":"(fn [my-list] (nth (reverse my-list) 1))","problem":20,"user":"4eeb8271535d93acb0a668a8"},{"problem":20,"code":"(fn [list]\n  (nth list\n       (- (count list) 2)))","user":"54ff3db3e4b07d26eda61d4d"},{"problem":20,"code":"#(if (<= (count %) 2) (first %) (recur (rest %)))","user":"558f4fbae4b0277789237661"},{"code":"(fn [xs]\n  (loop [xs xs]\n    (cond (> (count xs) 2) (recur (rest xs))\n          (= (count xs) 2) (first xs)\n          :else nil)))","problem":20,"user":"511442d0e4b0e9c109bb74d5"},{"problem":20,"code":"(fn second-last [x] (first (take-last 2 x)))","user":"56febe79e4b08d47c97781b1"},{"code":"(fn [seq] (first (drop (- (count seq) 2) seq)))","problem":20,"user":"4dddf817535d08e6dec9fdd3"},{"problem":20,"code":"(fn getlast [x] (if (empty? (rest (rest x))) (first x) (getlast (rest x))))","user":"5dbd86bce4b09f47823971bf"},{"code":"(fn [l] (->> l reverse (drop 1) first))","problem":20,"user":"53050c04e4b0d8b024fd3757"},{"problem":20,"code":"(fn [x] (loop [x x] (let [r (rest (rest x))] (if (empty? r), (first x) (recur (rest x))))))","user":"5492164ee4b0b312c081ff3e"},{"problem":20,"code":"#(last (take (- (count %1) 1) %1))","user":"57cec8f4e4b0c746388ab8b3"},{"code":"(fn [n] (last (butlast n)))","problem":20,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn [coll] (nth (reverse (seq coll)) 1))","problem":20,"user":"4e2db2da535deb9a81d77f0a"},{"code":"(fn [x] ((apply vector x) (dec(dec(count(apply vector x))))))","problem":20,"user":"521b3f2fe4b0c4ef0be83034"},{"problem":20,"code":"#( -> % reverse second )","user":"54fc7d89e4b07d26eda61d2b"},{"code":"(comp first (comp rest reverse))","problem":20,"user":"4faae01ae4b081705acca206"},{"problem":20,"code":"(fn sl [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (sl (rest s))))","user":"5e33e399e4b0650de70e2b11"},{"problem":20,"code":"(fn f [v] (if (= (count v) 2) (first v) (f (rest v))))","user":"5c05cae7e4b0bdcf453d16a3"},{"problem":20,"code":"(fn [xs]\n  (first (reduce (fn [acc curr] (list (second acc) curr)) '(0, 0) xs)))","user":"5d01306ae4b0cc9c915881a6"},{"code":"(fn pen [s]\n  (first (next (reverse s))))","problem":20,"user":"4e7ddc71535db169f9c796ef"},{"code":"(fn [x]\n  (get (vec x) (- (count x) 2)))","problem":20,"user":"52d6664be4b09f7907dd1359"},{"code":"(fn [x]\n  (nth (reverse x) 1))","problem":20,"user":"52148821e4b0961f15ac4d8e"},{"code":"(fn [x]\n  (last(take (- (count x) 1) x  ))\n)","problem":20,"user":"4eb82088535d7eef30807380"},{"problem":20,"code":"(fn [lista]\n  (last (drop-last 1 lista))\n  )","user":"5c493046e4b0e06e1360a3cb"},{"problem":20,"code":"(fn\n  [coll]\n  (let [[first second & rest] coll]\n    (if (or (empty? rest))\n      first\n      (recur (cons second rest)))))","user":"5dd65ea4e4b0948ae9d9ad7f"},{"code":"#(loop [items %1]\n    (let [r (rest items)]\n        (if (= (count r) 1)\n            (first items)\n            (recur r))))","problem":20,"user":"4f0d093b535d0136e6c22313"},{"problem":20,"code":"(fn [my-seq]\n  (second (reverse my-seq)))","user":"546ff701e4b00cfc9eacc1b3"},{"code":"(fn [s] (second(reverse s)) )","problem":20,"user":"525c575be4b0cb4875a45d38"},{"code":"#(first (pop (reverse %)))","problem":20,"user":"4ec3650f535dcc7ae8597d56"},{"code":"(fn [collection]\n  (last (for [i (drop-last collection)]i)))","problem":20,"user":"516081e7e4b009fba0926e28"},{"problem":20,"code":"(fn nth-to-last-element [s]\n    (loop [seqeunce s]\n        (if (= (count seqeunce) 2)\n            (first seqeunce)\n            (recur (rest seqeunce))\n        )\n    )\n)","user":"57dd2c99e4b0bd073c20243c"},{"problem":20,"code":"(fn [x] (first (rest (#(reverse %) x))))","user":"54b5d893e4b05787c3b163ae"},{"problem":20,"code":"(fn try1 [x]\n  (if (> (count x) 2)\n    (try1 (drop 1 x))\n    (first x)))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn [[a & [_ & s :as n]]]\n  (if (empty? s) a\n    (recur n)))","problem":20,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn rec [l]\n  (let [n (rest l)]\n    (if (= (count n) 1)\n      (first l)\n      (rec n))))","problem":20,"user":"52d1e364e4b0d9f9285948e7"},{"problem":20,"code":"(fn [x] \n   ((vec x) \n    (- (count x) 2)))","user":"5c4be0bde4b0f9f7a8770e6c"},{"problem":20,"code":"(fn penult [s]\n  (nth s (- (count s) 2)))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn second [l]\n  (if (= 2 (count l))\n    (first l)\n    (second (rest l))))","problem":20,"user":"53a09a1ee4b0ca733b9744b2"},{"code":"(fn [s]\n  (if (= 2 (count s))\n      (first s)\n      (recur (rest s))))","problem":20,"user":"4eb70649535d7eef30807373"},{"problem":20,"code":"#(loop [seq %]\n   (if (empty? (rest (rest seq)))\n     (first seq)\n     (recur (rest seq))\n     ))","user":"5a80b934e4b00b71e582a05b"},{"code":"(fn [lst]\n  (loop [lst lst]\n    (if (= 2 (count lst))\n      (first lst)\n      (recur (rest lst)))))","problem":20,"user":"4f0379ef535dcb61093f6ae7"},{"problem":20,"code":"(fn [input]\n  (let [[x y & xs] input]\n    (if\n     \t(nil? xs) x (recur (rest input))\n     )\n    )\n  )","user":"57b3821de4b0fbc9809a2782"},{"code":"(fn [coll]\n  (if (nnext coll)\n    (recur (next coll))\n    (first coll)))","problem":20,"user":"4e4e5b91535dc968683fc4e5"},{"code":"#( last (take 2 (reverse %)))","problem":20,"user":"51950793e4b09df09a77a3e4"},{"problem":20,"code":"(fn [x]\n  (cond\n   (-> x rest rest empty?) (first x)\n   :else (recur (rest x))))","user":"574ef99ae4b02ea114799250"},{"code":"(fn [lis]\n  (nth lis (- (count lis) 2)))","problem":20,"user":"51e595a6e4b0efabf93c02d8"},{"problem":20,"code":"(fn almost-last [x]\n  (if (= (count x) 2)\n    (first x)\n    (almost-last (rest x))))","user":"55d7d139e4b0e31453f64aaa"},{"problem":20,"code":"#(first(next (reverse %)))","user":"57996e29e4b05b1deef9adc1"},{"code":"(fn [sq] (first (rest (reverse sq))))","problem":20,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":20,"code":"(fn [in]\n  (nth in (- (count in) 2) nil))","user":"53e15371e4b0d874e779ae54"},{"problem":20,"code":"(fn [l] (peek (pop( vec l))))","user":"54ccb15de4b057c6fda3a28e"},{"code":"(fn [coll] (->> coll\n                reverse\n                second))","problem":20,"user":"52aa013de4b0c58976d9ac54"},{"problem":20,"code":"#(if (empty? (rest (rest %))) (first %) (recur (rest %) ))","user":"5b2c1f60e4b025bcb146f2b1"},{"problem":20,"code":"#(->> (reverse %) (take 2) (last))","user":"4f29e69ae4b0d6649770a036"},{"problem":20,"code":"(fn penultimate [coll]\n  (if (not (= 2 (count coll)))\n    (recur (rest coll))\n    (first coll)))","user":"5606ab32e4b08b23635d3176"},{"code":"(fn plast [lst] \n  (nth lst (- (count lst) 2)))","problem":20,"user":"50d5c19ce4b0159555a1fc61"},{"problem":20,"code":"(fn [[head & tail]]\n  (if (> (count tail) 1)\n    (recur tail)\n    \thead))","user":"56407cdee4b08d4f616f5ee4"},{"code":"(fn penult\n  ([[x y & xs]] (if (nil? xs) x (penult `(~y ~@xs)))))","problem":20,"user":"4fe8d862e4b0547ebccb2428"},{"code":"#(if (empty? (rest (rest %))) (first %) (recur (rest %)))","problem":20,"user":"4fad041ee4b081705acca231"},{"problem":20,"code":"(fn [xs] (if (empty? (rest (rest xs))) (first xs) (recur (next xs))))","user":"5e2dea4be4b05b4b015161e9"},{"problem":20,"code":"(fn [coll]\n  (nth coll\n       (- (count coll) 2)))","user":"5990a9fde4b0866487ed0d54"},{"problem":20,"code":"(fn penuEl\n  [element]\n  (nth element \n       (- (count element) 2)))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":20,"code":"(fn second-last-elem [x]\n  (nth x (- (count x) 2)))","user":"5d4f2f27e4b0776584bd6f4f"},{"problem":20,"code":"(fn[col](second (reverse col)))","user":"59692530e4b069c0a1a197e4"},{"code":"(fn second-to-last [arg]\n  (if (= '() (rest (rest arg)))\n    (first arg)\n    (second-to-last (rest arg))))","problem":20,"user":"4f652432e4b07046d9f4ef3d"},{"problem":20,"code":"(fn penult [[x & [t & h :as xs]]] (if (empty? h) x (penult xs)))","user":"569da949e4b0542e1f8d147e"},{"code":"(fn [[x & xs]]\r\n  (if (empty? (rest xs))\r\n      x\r\n      (recur xs)))","problem":20,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn scndlst [s]\n        (if (= (rest (rest s)) ())\n          (first s)\n          (recur (rest s))))","problem":20,"user":"5008b415e4b0144d4f561e3d"},{"problem":20,"code":"(fn [seq] (get (reduce conj [] seq) (- (count seq) 2) ))","user":"5d58983fe4b02ba5928a6823"},{"problem":20,"code":"(fn [s] (let [n (next (next s))] (if (nil? n) (first s) (recur (next s)))))","user":"57372bd5e4b0cd1946bd1041"},{"code":"(fn [a] (nth a (- (count a) 2)))","problem":20,"user":"5050b107e4b063148f524126"},{"code":"#(.get % (dec (dec (count %))))","problem":20,"user":"4f8ac743e4b02e764a0a5173"},{"problem":20,"code":"(fn [x]\n      (loop [x x]\n        (if (<= (count x) 2)\n          (first x)\n          (recur (rest x)))))","user":"551a21ece4b091ff45eda993"},{"code":"#(nth % (- (dec (count %)) 1))","problem":20,"user":"4f03973a535dcb61093f6b2d"},{"problem":20,"code":"(fn [values]\n  (-> values\n      reverse\n      (nth 1)))","user":"60452a00e4b02d28681c77b5"},{"problem":20,"code":"(fn foo [l] (if (= (count l) 2) (first l) (foo (rest l))))","user":"5409f8eae4b0addc1aec66e6"},{"problem":20,"code":"(fn [find-penultimate] (second (reverse find-penultimate)))","user":"5c8002cde4b0c8042a70ce09"},{"code":"#(let [v (vec %)]\n   (v (- (count v) 2)))","problem":20,"user":"5367c374e4b0243289761e83"},{"problem":20,"code":"(fn second-to-last [coll]\n\t(last (drop-last coll)))","user":"5776e21de4b0979f89651642"},{"code":"(fn [li] (let [len (count li)] (get (vec li) (- len 2)) ) )","problem":20,"user":"521f0106e4b0e6c71e0c0bc4"},{"code":"(fn [[a & [b & [c & tail] :as all-but-first]]]\n  (cond (nil? c) a\n        (empty? tail) b\n        :else (recur all-but-first)))","problem":20,"user":"5351980ce4b084c2834f4ae5"},{"problem":20,"code":"(fn [x] (last (take (- (count x) 1) x )))","user":"57801bdae4b0d36ec5835e72"},{"problem":20,"code":"#(first\n  (drop\n   (-\n    (count %)\n    2)\n  %))","user":"5570a594e4b09a3098a52530"},{"problem":20,"code":"(fn penultimateElement [s] \n  (if (= 1 (count(rest s)))\n    (first s)\n    (penultimateElement (rest s))\n  )\n  )","user":"552d487ee4b076ab5578f7e4"},{"problem":20,"code":"(fn [se]\n  (loop [s se]\n    (if (empty? (rest (rest s)))\n      (first s)\n      (recur (rest s)))))","user":"577abecfe4b0d3393e5deb06"},{"code":"(fn [s] (let [[x y & rest] s] (if rest (recur (conj rest y)) x)))","problem":20,"user":"4db0ef131254ad5b4805fa64"},{"problem":20,"code":"(fn\n  [collection]\n  (if (= 2 (count collection)) (first collection)\n    (recur (next collection))\n    )\n  )","user":"5a2e39fce4b09cafd31c7f77"},{"code":"(fn [n] \n        (if (< 1 (count (rest n)))\n            (recur (rest n)) \n          (first n)))","problem":20,"user":"503be880e4b0fc0f99c2e54a"},{"code":"(fn my-last [x] (if (= (count x) 2) (first x) (my-last (rest x))))","problem":20,"user":"4e72175d535d5021c1a89658"},{"code":"(fn getLast [x] (if (empty? (rest( rest x))) (first x) (getLast (rest x))))","problem":20,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn [sq] (second (reverse sq)))","problem":20,"user":"4f148418535d64f60314643a"},{"code":"#( nth % (-  (count %) 2) )","problem":20,"user":"4e6ab8d8535d8ccf87e9fefd"},{"code":"(fn second-last [s] (first (rest (reverse s))))","problem":20,"user":"4e7650c5535d324fb2983d68"},{"problem":20,"code":"#(second (reverse %))\n; or my naive way\n; #(nth % (dec (dec (count %))))","user":"53cdbad1e4b00fb29b2212e6"},{"code":"(fn f [[h & tail]] (if (= (count tail) 1) h (f tail)))","problem":20,"user":"5216933be4b000d124d989cf"},{"code":"(fn [x] (nth x (#(- % 2) (count x))))","problem":20,"user":"51b6f4f9e4b04fc00976d479"},{"code":"(fn [array]\n  (second (reverse array)))","problem":20,"user":"4f90b562e4b0dcca54ed6c91"},{"code":"(fn [col] ((comp first rest reverse) col))","problem":20,"user":"4f362c31e4b0e243712b1ec7"},{"code":"(fn [x]\n  (first(rest (reverse x))) \n  \n  \n  )","problem":20,"user":"4efe8071535dc589f2b88d97"},{"problem":20,"code":"(fn [coll]\n  (first (next (reverse coll))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"#(get (vec(reverse  %)) 1)","problem":20,"user":"52612371e4b03e8d9a4a7055"},{"code":"(fn penultimate [s] (if (nil? (not-empty (rest (rest s)))) (first s) (penultimate (rest s))))","problem":20,"user":"5263c44fe4b03e8d9a4a70b8"},{"problem":20,"code":"(fn my-penultimate [items]\n  (let [c (count items)]\n    (if (= 2 c)\n      (first items)\n      (my-penultimate (rest items)))))","user":"5d80f328e4b0915913b1d372"},{"code":"(fn second2last [x] \r\n  (if (next( next x ))\r\n    ( recur ( rest x) )\r\n    ( first x )))","problem":20,"user":"4ddee2d0535d08e6dec9fdda"},{"problem":20,"code":"#(reduce +(take 1(drop 1 (reverse %))))","user":"5cf59deee4b087f62be35a9f"},{"problem":20,"code":"(fn sec [seq] (nth seq (- (count seq) 2)))","user":"5ababa62e4b073f1774426b4"},{"problem":20,"code":"#((fn [n, sequ] (if (= 1 n) (first sequ) (recur (- n 1), (rest sequ)))) 2 (reverse %))","user":"541067c0e4b01498b1a719a8"},{"code":"(fn [input]\n  (loop [i input]\n      (let [a (first i) \n            b (first (rest i))\n            c (first (rest (rest i)))]\n        (if (nil? c) a (recur (rest i))))))","problem":20,"user":"53959edde4b0b51d73faaed8"},{"problem":20,"code":"(fn second-to-last [xs]\n  ((comp last butlast) xs))","user":"5427fcc8e4b01498b1a71b29"},{"problem":20,"code":"(fn [s] (get (vec s) (- (count s) 2) \"unknown\"))","user":"5d3fa930e4b05dd059a5435f"},{"problem":20,"code":"(fn [vect] (second (reverse vect)))","user":"5dcd182ae4b0b296f82db5a9"},{"code":"(fn [x] \n   (if (= (type x) clojure.lang.PersistentVector)\n     (x (- (count x) 2))\n     4))","problem":20,"user":"52151220e4b0961f15ac4da7"},{"problem":20,"code":"(fn [v] \n  (first \n    (drop (- (count v) 2) v )\n  )\n)","user":"5d72ad8fe4b02e6b30c93512"},{"code":"(fn [seeq]\n  (second (reverse seeq)))","problem":20,"user":"4ec72817535d6d7199dd36de"},{"code":"(fn __ [x]\n  (if (not (seq? (next (next x))))\n    (first x)\n    (recur (next x))))","problem":20,"user":"5133cabfe4b0d7a043de8cf4"},{"problem":20,"code":"(fn [sequence]\n  (loop [[a b & others] sequence]\n    (println a)\n    (if (empty? others)\n      a\n      (recur (conj others b)))))","user":"56277b32e4b00e49c7cb47d1"},{"problem":20,"code":"(fn [[x & more]] \n    (if (= 1 (count more)) x\n        (recur more)))","user":"55ace069e4b03311e7b73299"},{"code":"(fn [x] (last (take 2 (reverse x))))","problem":20,"user":"4f03e462535dcb61093f6b77"},{"code":"(fn [s]\n  (if (= 1 (count (rest s)))\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4e68fad4535d8ccf87e9fe93"},{"problem":20,"code":"(fn [param]\n  (let [[:as original] param]\n    (nth original (- (count original) 2))))","user":"5f8d76c3e4b0715f5002d758"},{"code":"(fn [x] (first (reverse (drop-last x))))","problem":20,"user":"4ec8dc17535d6d7199dd36f7"},{"problem":20,"code":"(fn [xs] (first (drop (- (count xs) 2) xs )))","user":"57434339e4b0c285004e8a9f"},{"code":"(fn [a] (nth (seq a) (- (count a) 2)))","problem":20,"user":"528fdb8ee4b0239c8a67aefe"},{"problem":20,"code":"(fn foo [a]\n  (if (> (count a) 2)\n    (foo (rest a))\n    (first a)))","user":"5a58524ee4b05d388ecb6c7f"},{"problem":20,"code":"(fn [s] (second (reverse s)) )","user":"5af1cbb8e4b0cc2b61a3bc65"},{"code":"#(-> %\n     reverse\n     second)","problem":20,"user":"50747a55e4b054001656acd2"},{"code":"(fn [s] (if (next (next s)) (recur (next s)) (first s)) )","problem":20,"user":"4ea5e8a9535d7eef308072e0"},{"code":"#(nth(reverse%)1)","problem":20,"user":"4e39b020535deb9a81d77f44"},{"problem":20,"code":"(fn [x]\n  (if (> (count x) 2)\n    (recur (rest x))\n    (first x)\n))","user":"54c97cb3e4b045293a27f677"},{"problem":20,"code":"(fn [l] (nth l (- (count l) 2) (first l)))","user":"5c6e1006e4b0fca0c1622744"},{"code":"(fn [coll] (nth (reverse coll) 1))","problem":20,"user":"4e5b192e535d8a8b8723a2b3"},{"code":"(fn [stuff] (second (reverse stuff)))","problem":20,"user":"51840396e4b02826a645f395"},{"code":"(fn penult [xs] (if (empty? (rest (rest xs))) (first xs) (penult (rest xs))))","problem":20,"user":"5334d4f2e4b0656e627bfd71"},{"code":"(fn [s] (if (> (count s) 2) (recur (rest s)) (first s)))","problem":20,"user":"4e6a4950535d8ccf87e9febf"},{"code":"(fn [dalist] (loop [l dalist acc nil] (if (empty? (rest l)) acc (recur (rest l) (first l)))))","problem":20,"user":"536673a8e4b0243289761e76"},{"problem":20,"code":";#(last (drop-last 1 %))\n\n(comp last (partial drop-last 1))","user":"60678bc7e4b069485764dddd"},{"code":"(fn [[x & etc]] (cond \n                 (= (count etc) 2) (first etc) \n                 (= (count etc) 1) x \n  \t\t\t\t :else (recur etc)))","problem":20,"user":"53028354e4b0d8b024fd372b"},{"code":"(fn [s]\n   (if (nnext s)\n     (recur (next s))\n     (first s)))","problem":20,"user":"51dc431ee4b09c47a74ce108"},{"problem":20,"code":"(fn [seq]\n  (loop [head (first seq), tail (rest seq)]\n    (if (= 1 (count tail))\n      head\n      (recur (first tail) (rest tail)))))","user":"5c7c78c9e4b0d597f478ca94"},{"code":"#(first  (take-last 2 %)  )","problem":20,"user":"4ffb39e2e4b0678c553fc3c7"},{"problem":20,"code":"(fn[arg](second(reverse arg)))","user":"5721f13ce4b0c5bde472c0be"},{"code":"#((vec %) (- (count %)2))","problem":20,"user":"50403ae1e4b0ff5d2cc40dae"},{"problem":20,"code":"#(if (= 2 (count %)) \n   (first %)\n   (recur (rest %)))","user":"5907a736e4b047aa04b1995e"},{"code":"(fn [seq]\n  (let [length (count seq)]\n    (nth seq (- length 2))))","problem":20,"user":"529e2383e4b04e0c58e87b8b"},{"code":"(fn pen [x] (if (= 2 (count x)) (first x) (pen (rest x))))","problem":20,"user":"4f03101e535dcb61093f6a53"},{"code":"(fn [coll]\n  (if (= 2 (count coll))\n    (first coll)\n    (recur (next coll))))","problem":20,"user":"4fc4c6afe4b081705acca34d"},{"problem":20,"code":"(fn [coll] (-> (take-last 2 coll) first))","user":"551f1781e4b08d5046aa8a52"},{"code":"#(if (>= (count %) 2) (nth % (- (count %) 2)))","problem":20,"user":"531619c1e4b08068f379ed3d"},{"problem":20,"code":"(fn [coll] (first (reverse(butlast coll))))","user":"5dd7dec1e4b0948ae9d9ad8d"},{"code":"(fn [s]\n  (if (> (count s) 2)\n    (recur (next s))\n    (first s)))","problem":20,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"(fn [input] (first (rest (reverse input))))","problem":20,"user":"535d21ade4b04ce2eb3ed2bb"},{"code":";;(fn [coll] (nth coll (- (count coll) 2)))\n(comp second reverse)","problem":20,"user":"5276f1d0e4b03e8d9a4a74f3"},{"code":"(fn [coll]\r\n  (loop [x (seq coll)\r\n         xs (rest coll)]\r\n    (if (seq x)\r\n      (if (seq xs)\r\n        (if-let [z (next xs)]\r\n          (recur xs z)\r\n          (first x))))))","problem":20,"user":"4f047177535dcb61093f6bc6"},{"problem":20,"code":"(fn f [x]\n  (if (= [] (rest (rest x)))\n    (first x)\n    (f (rest x))))","user":"5a1f8c7ce4b0ff51aa4b3286"},{"code":"#(first ( rest ( reverse % ) ) )","problem":20,"user":"504ea40ee4b069badc5a33bf"},{"code":"(fn [[a b & coll]] (if (empty? coll) a (recur (cons b coll))))","problem":20,"user":"4e6dd51b535d5021c1a895f6"},{"code":"(fn [x]\n  (condp = x\n    (list 1 2 3 4 5) 4\n    [\"a\" \"b\" \"c\"] \"b\"\n    [[1 2] [3 4]] [1 2]))","problem":20,"user":"4f88942be4b033992c121c6a"},{"code":"(fn [col]\n    (first (rest (reverse col))))","problem":20,"user":"51f5539fe4b0abb92f97f9cd"},{"code":"(fn [container] (loop [s container i (- (count s) 2)] (if (= i 0) (first s) (recur (next s) (dec i)))))","problem":20,"user":"52a195fde4b04e0c58e87bda"},{"code":"(fn penultimate [x]\n (if (= (count x) 2)\n  (first x)\n  (penultimate (rest x))))","problem":20,"user":"50baad40e4b03e68e4411c96"},{"problem":20,"code":"#(if (next (next %)) (recur(next %)) (first %))","user":"57853650e4b0ebec4cfb74d5"},{"problem":20,"code":"#(if (nil? (next (next %))) (first %) (recur (next %)))","user":"5d9c9446e4b0eb781811cdae"},{"problem":20,"code":"#(let [c (- (count %) 2)] (nth % c))","user":"5a972643e4b0d174b936c778"},{"problem":20,"code":"(fn [xs] \n  (if (next (next xs))\n    (recur (next xs))\n    (first xs)))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":20,"code":"(fn [col] (nth col (dec (dec (count col)))))","user":"55f32f6fe4b06e875b46ce53"},{"code":"(fn mylast [s] (nth s (- (count s) 2)))","problem":20,"user":"4eb83593535dd6025b394d1b"},{"problem":20,"code":"(fn second-last-element [x]\n  (if (= (count (rest x)) 1)\n    (first x)\n    (second-last-element (rest x))))","user":"5bc09ebae4b07a9b28b10005"},{"problem":20,"code":";; Write a function which returns the second-last to last element from a sequence.\n;; test not run\t\n(fn second-last[x]\n  (-> x (reverse) (rest) (first)))","user":"5a09f205e4b0eab8c0448933"},{"problem":20,"code":"(fn [n]\n  (second (reverse n)))","user":"579b785ae4b05b1deef9adf2"},{"code":"(fn f [ls]\n  (if (empty? (rest (rest ls)))\n    (first ls)\n    (f (rest ls))))","problem":20,"user":"519e1bade4b0acf32bc6a424"},{"problem":20,"code":"#(-> % \n     reverse\n     rest\n     first)","user":"567be591e4b05957ce8c61ab"},{"code":"#(.get % (- (count %) 2))","problem":20,"user":"4ec0200f535dfed6da9c6da0"},{"problem":20,"code":"#(-> % (reverse)(rest)(first))","user":"5e36ca7de4b0650de70e2b3c"},{"code":"(fn fun \n  ([L] (fun (first L) (rest L)))  \n  ([x xs] (if (= (rest xs) ()) x (fun (first xs) (rest xs)))))","problem":20,"user":"533e45a7e4b085b17e897d8c"},{"problem":20,"code":"(fn [l] \n  (second (reverse l)))","user":"59368ccae4b02506e01a297a"},{"problem":20,"code":"(fn [lst] (-> lst reverse second))","user":"51c116d4e4b0c9c822882942"},{"problem":20,"code":"#(second (into [] (into () %)))","user":"55acb648e4b03311e7b73296"},{"code":"#(nth % ( - (count %) 2) )","problem":20,"user":"4f030775535dcb61093f6a43"},{"code":"(fn [x] (nth x (dec(dec(count x)))))","problem":20,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn la [x] (nth x (- (count x) 2)))","problem":20,"user":"5174ade2e4b07031762f2edf"},{"problem":20,"code":"(fn pen [sequ] (nth (reverse sequ) 1))","user":"548582eee4b0e286459a11ae"},{"code":"(fn [l] \n  (second \n    (reverse l )))","problem":20,"user":"4f23196ee4b0d66497709fe1"},{"code":"(fn penultimate [l]\n  (last (drop-last l)))","problem":20,"user":"51d42f44e4b013d740b70ddb"},{"problem":20,"code":"(fn [elems] (nth (seq elems) (- (count (seq elems)) 2)))","user":"589e0024e4b02bd94d917e4e"},{"code":"(fn [xs] \n  (let [i (count xs)]\n    (nth xs (- i 2))))","problem":20,"user":"5129039de4b03a34742b4313"},{"code":"(fn [x] (let [n (count x)] (nth x (- n 2))))","problem":20,"user":"52526161e4b0541d1855b8a6"},{"problem":20,"code":"(fn second-to-last [[x & xs]]\n  (cond\n   (empty? xs) nil\n   (= (count xs) 1) x\n   :else (recur xs)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":20,"code":"(fn penultimate-element [input] (nth input (- (count input) 2)))","user":"5686b0a9e4b0dcc4269f4055"},{"code":"(fn [x]\n  (if (> (count x) 2)\n    (recur (rest x))\n      (first x)\n    ))","problem":20,"user":"5312807fe4b08068f379ecfc"},{"code":"(fn [x] (let [len (count x)] (nth x (- len 2))))","problem":20,"user":"519be011e4b0a1d87b00344e"},{"problem":20,"code":"#( let [sequ %] \n   (nth sequ (- (count sequ) 2)))","user":"582645d3e4b051871117bef5"},{"code":"(fn penul [coll & memory]\n  (if (empty? coll)\n    (first memory)\n    (recur (rest coll) [(last memory) (first coll)])))","problem":20,"user":"4e8dc25f535d65386fec213a"},{"problem":20,"code":"(fn m [[y _ & xs :as all]]\n  (if (empty? xs)\n  \ty\n    (m (rest all))))","user":"5d51377be4b0776584bd6f5d"},{"code":"(fn [s]\n  (loop [current s, previous s]\n    (if (empty? (rest current))\n      (first previous)\n      (recur (rest current) current))))","problem":20,"user":"5392500ae4b0b51d73faaeaf"},{"problem":20,"code":"(fn [ls] (nth (reverse ls) 1))","user":"56f4e181e4b046a417f92065"},{"code":"(fn [x]\n  (nth x (- (count x) 2)))","problem":20,"user":"4edb314d535d10e5ff6f5317"},{"code":"(fn p [a]\r\n  (if (= (count a) 2) \r\n    (first a)\r\n    (p (rest a))))","problem":20,"user":"4f831dd2e4b033992c121c16"},{"code":"(fn seclast [x]\n  (if (< (count x) 2) \n   nil\n   (first (rest (reverse x)))))","problem":20,"user":"525aa499e4b0cb4875a45cf7"},{"code":"(fn [l] (first (take-last 2 l)))","problem":20,"user":"4f033aa3535dcb61093f6a7c"},{"problem":20,"code":"(fn [x] (get (into-array x) (- (count x) 2)))","user":"56b07cdae4b0982f16b37dda"},{"problem":20,"code":"(fn [contents]\n  (loop [x contents]\n    (when x\n    \t(if (= (count x) 2)\n          (first x)\n          (recur (rest x))))))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn [coll]\n  (if (= 2 (count coll))\n    (first coll)\n  (recur (rest coll))))","problem":20,"user":"50e3cf55e4b01912b3285c45"},{"code":"#(-> % reverse next first )","problem":20,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":20,"code":"#((if (list? %) nth get) % (- (count %) 2))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":20,"code":"(fn \n    [x] \n    (nth \n        x\n     \t(\n            - (count x) 2\n        )\n    )\n)","user":"5c3f6322e4b08cd430848e97"},{"code":"#(nth % (dec ( dec (count %))))","problem":20,"user":"5166b491e4b060c690c1f4be"},{"code":"(fn [col] (first (take-last 2 col) ) )","problem":20,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":20,"code":"(fn [x] (second  (reverse x)))","user":"57bb0c1fe4b05aa3c4741c26"},{"problem":20,"code":"(fn [x]\n  (if (next (next x))\n    (recur (next x))\n    (first x))\n  )","user":"5e807fcae4b085ba37836e46"},{"problem":20,"code":"(fn blerg [x]\n  (first (rest (reverse x))))","user":"5b847d39e4b047b03b2037c1"},{"problem":20,"code":"(fn next-to-last [x] (if (next (rest x)) (next-to-last (rest x)) (first x)))","user":"5546704be4b0a04f7929953d"},{"code":"(fn getLastSecond [x] (first (rest (reverse x))))","problem":20,"user":"4fcca4f5e4b0ee37620e1867"},{"problem":20,"code":"(fn [in] (first (drop 1 (reverse in))))","user":"5ff88607e4b06df49cee14a6"},{"problem":20,"code":"(fn [lot]\n  (let [[lot-first & [lot-second & lot-rest]] lot]\n    (if lot-rest ;; not empty\n      (recur (cons lot-second lot-rest))\n      (and lot-second lot-first))))","user":"57c47e21e4b05aa3c4741cd2"},{"problem":20,"code":"(fn [col]\n    (let [c (count col)]                                                                                                                              \n      (nth col (- c 2))))","user":"59932f49e4b0b211ea3aaaae"},{"code":"#(-> % reverse second)","problem":20,"user":"4da3e51330acd6ed10482a68"},{"problem":20,"code":";;#(-> % reverse rest first)\n(comp second reverse)","user":"57407ab3e4b05c31a32c0854"},{"problem":20,"code":"(fn [x]\n\t(nth x (- (count x) 2))\n)","user":"54d7bba8e4b0a52adc2e202f"},{"code":"(fn penult [x] (if (= (count x) 2)\n                 (first x)\n                 (penult (rest x))))","problem":20,"user":"5362a936e4b0243289761e55"},{"code":"#(if (> (count (next %)) 1) (recur (next %)) (first %))","problem":20,"user":"4dd35dac535dae65d5c462dc"},{"problem":20,"code":"(fn [n] (peek (pop (vec n))))","user":"55b69e37e4b01b9910ae2999"},{"problem":20,"code":"#(nth %1 (-  (count %1) 2))","user":"54c8eb61e4b045293a27f658"},{"problem":20,"code":"(fn penultimate [lst]\n  (if (empty? (rest lst))\n    lst\n    ((fn [[head & tail]]\n       (if (empty? (rest tail))\n         head\n         (recur tail))) lst)))","user":"546c1f73e4b00cfc9eacc175"},{"code":"(fn [list]\n  (first (pop (reverse list)))\n)","problem":20,"user":"4e75334b535d7a570dd295be"},{"code":"(fn my-penultimate [l] (nth l (- (count l) 2)))","problem":20,"user":"52d7412ce4b09f7907dd1371"},{"code":"(fn ulag [x] (second(reverse  x)))","problem":20,"user":"50edcc53e4b06330c1f87c49"},{"problem":20,"code":"#(-> % \n   reverse \n   second)","user":"56547b51e4b0f9d632dd8481"},{"problem":20,"code":"(fn [x] (if (= (count x) 2) (first x) (recur (drop 1 x))))","user":"56a22d4ae4b0542e1f8d14ba"},{"code":"#((comp first rest reverse) %)","problem":20,"user":"4fc45c07e4b081705acca349"},{"code":"(fn [[h1 h2 & r]]\n  (if (nil? r)\n    h1\n    (recur (conj r h2))))","problem":20,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"(fn [s]\n  (let [n (dec (dec (count s)))]\n    (nth s n)))","problem":20,"user":"4fda7509e4b05e33b9224f4b"},{"problem":20,"code":"(fn ret_nth[x] (nth x (- (count x) 2)))","user":"543fb07ee4b032a45b86935c"},{"code":"(fn [xs] (first (reverse (take 2 (reverse xs)))))","problem":20,"user":"4fa6a491e4b081705acca1bc"},{"problem":20,"code":"(fn second_to_last [x] (first (reverse (drop-last x))))","user":"5a9c6038e4b0d174b936c7d7"},{"problem":20,"code":"#(-> % (reverse)(second))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":20,"code":"(fn [coll]\n  (if (< 2 (count coll))\n    (recur (rest coll))\n    (first coll)))","user":"55b6d917e4b01b9910ae299e"},{"code":"(fn las [x] (if (= 2 (count x)) (first x) (las (rest x))))","problem":20,"user":"5375b852e4b06839e8705e17"},{"problem":20,"code":"(fn [l]\n  (if (= 2 (count l))\n    (first l)\n    (recur (rest l))))","user":"5829bc55e4b051871117bf49"},{"problem":20,"code":"(fn las [x]\n  (if (= (count x) 2)\n    (first x)\n    (las (rest x))))","user":"57027310e4b08d47c97781e2"},{"code":"(fn [sequence]\n  (loop [s (rest  sequence), x (first sequence)]\n    (cond (empty? (rest s)) x\n          :else (recur (rest s) (first s)))))","problem":20,"user":"538e36c7e4b0b51d73faae81"},{"problem":20,"code":"(fn[x] (nth x (+ (count x) -2)))","user":"5f727d2fe4b02876ed9fd08f"},{"code":"#(if (nnext %) (recur (next %)) (first %))","problem":20,"user":"4e8a0741535d3e98b802328b"},{"code":"(fn [x] (let [size (count x)] (nth x (- size 2))))","problem":20,"user":"53084a48e4b02e82168697af"},{"problem":20,"code":"#(->> %1 (reverse) (drop 1) (first))","user":"5bc8e91ee4b07a9b28b100ce"},{"code":"(fn [x] (let [[_ a] (reverse x)] a))","problem":20,"user":"531488f3e4b08068f379ed16"},{"code":"(fn [seqn] (first (next (reverse seqn))))","problem":20,"user":"4ed2a31c535d44c135fd68db"},{"problem":20,"code":"#(.get % ( - (count %) 2))","user":"569e24e6e4b0542e1f8d1482"},{"problem":20,"code":"(fn [xs]   \n  (nth xs (- (count xs) 2)))","user":"5adf5f9be4b0837691e92c33"},{"code":"(fn last-before [lst]\n  (nth (reverse lst) 1))","problem":20,"user":"4fe89055e4b07c9f6fd12c47"},{"code":"#(nth % (-> (count %) dec dec))","problem":20,"user":"4ee7ef87535d93acb0a66872"},{"problem":20,"code":"(fn [x]\n  (loop [v x]\n    (if (empty? (rest (rest v)))\n      (first v)\n      (recur (rest v))\n    )\n  )\n)","user":"55252392e4b0882d96d091cc"},{"code":"(fn [curr-seq] (nth curr-seq (- (count curr-seq) 2)))","problem":20,"user":"5226f8e9e4b04e78ff2e199a"},{"problem":20,"code":"(fn [x] (first (next(reverse x))))","user":"5f73000ce4b02876ed9fd094"},{"problem":20,"code":"(fn \n  [seq]\n    (last\n      (pop\n        (into [] seq)\n      )\n    )\n)","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"code":"(fn [n] (nth (reverse n) 1))","problem":20,"user":"500e9d2fe4b00fff93030f9a"},{"problem":20,"code":"(fn [n] (first(rest(reverse n))))","user":"5e9e408fe4b00a66d4a95172"},{"code":"#(->> (reverse %) rest first)","problem":20,"user":"502d387fe4b0d96a44ab202f"},{"code":"(fn [sq]\n    (if (list? sq)\n    (nth sq (- (count sq) 2))\n    (clojure.core/get sq (- (count sq) 2))))","problem":20,"user":"5322c946e4b09d4e7a9b54c5"},{"code":"(fn [x]\n  (nth\n    x\n    (- (count x) 2)\n  )\n)","problem":20,"user":"4fc8f671e4b0ee37620e1840"},{"problem":20,"code":"#(first(pop (reverse %)))","user":"54010363e4b0de5c4184861d"},{"problem":20,"code":"(fn [[first second & rest]]\n  (if (seq rest)\n    (recur (cons second rest))\n    first))","user":"58dc81d1e4b0a4d5acaab69e"},{"problem":20,"code":"(let [y \n(fn lastval [x]\n  (\n    if (> (count x) 2)\n    (lastval (rest x))\n    (first x)\n  )\n)] y)","user":"564d55bce4b0284900eef67e"},{"code":"(fn [x]\r\n  (second (reverse x)))","problem":20,"user":"50b63c5ee4b0a86f8358ca69"},{"problem":20,"code":"(fn [arr]\n  (let [sl (max 0 (- (count arr) 2))]\n      (nth arr sl)))","user":"55c06feee4b01b9910ae2a23"},{"code":"(fn [xs] (fnext (reverse xs)))","problem":20,"user":"4e6a97a9535d8ccf87e9fef8"},{"code":"(fn [[element-1 element-2 & others]]\n  (loop [element-1 element-1, element-2 element-2, others others]\n    (if (empty? others)\n      element-1\n      (recur element-2 (first others) (rest others)))))","problem":20,"user":"4fc53390e4b081705acca389"},{"code":"(fn[data] \n  (-> data reverse rest first))","problem":20,"user":"4ef87ea7535dced4c769f25f"},{"problem":20,"code":"(fn lst [x] (if (= 2 (count x)) (first x) (lst (rest x))))","user":"5c51b394e4b0fb8c5ffd99cc"},{"code":"(fn [args] (second (reverse args)))","problem":20,"user":"52bafc88e4b07a9af57922dc"},{"problem":20,"code":"(fn [sq] (let [c (count sq)] (nth sq (- c 2))))","user":"56de0db0e4b0ea9b8538f83a"},{"code":"(fn [list] (loop [xs list] (if (empty? (rest (rest xs)))\n                             (first xs)\n                             (recur (rest xs)))))","problem":20,"user":"5339eb56e4b0e30313ee6cb2"},{"code":"(fn [sequence] (second (reverse sequence)))","problem":20,"user":"4fe40f6de4b0e8f79898feb1"},{"problem":20,"code":"(fn[x] (first (drop(- (count x) 2) x)))","user":"6001460ce4b074f607df6611"},{"code":"#(nth % (dec(dec(count %))))","problem":20,"user":"504dff92e4b078edc5f5938a"},{"problem":20,"code":"(fn [x] \n  (if (= 2 (count x))\n  \t(first x)\n    (recur (rest x))))","user":"5c98d3bee4b048ec896c5a8b"},{"code":"(fn [x] (nth x (- (count x) 2) nil))","problem":20,"user":"51aa5434e4b04e3dc0c27b26"},{"problem":20,"code":"(fn [xs]\n  (if (empty? (next (next xs)))\n    (first xs)\n    (recur (next xs))))","user":"60b57acee4b0e0fa5f1b4238"},{"code":"#(nth % (dec (- (count %) 1)))","problem":20,"user":"4f8c525ce4b02e764a0a5196"},{"code":"(fn pre-last[a-seq]\n    (nth a-seq (- (count a-seq) 2))\n  )","problem":20,"user":"52763696e4b03e8d9a4a74d7"},{"problem":20,"code":"(fn penultimate [x] (if (= 2 (count x)) (first x) (recur (rest x))))","user":"5eddc271e4b0c7845d86b0fa"},{"problem":20,"code":"(fn grot [xs]\n    (if (= 1 (count (rest xs)))\n        (first xs)\n        (grot (rest xs))))","user":"5f6580e7e4b02876ed9fd023"},{"problem":20,"code":"(fn my-last\n  [seq]\n  (nth  seq (- (count seq) 2))\n  )","user":"5dfb538ee4b0a607a9a45cda"},{"code":"(fn[elements](first(rest (reverse elements))))","problem":20,"user":"5229cbeee4b04c906c9c6a85"},{"code":"(fn sec-to-last [x] \n  (first (next (reverse x))))","problem":20,"user":"4f54d82ae4b0a7574ea717ed"},{"code":"(fn [s] (first (take-last 2 s)))","problem":20,"user":"4e040c42535d04ed9115e79d"},{"code":"(fn [coll] (loop [n coll]\n             (if (= (count n) 2)\n               (first n)\n               (recur (rest n)))))","problem":20,"user":"510ee996e4b07438aa321462"},{"code":"(fn [theseq] \n  (loop [firstel (first theseq) restseq (rest theseq)]\n      (if (= 1 (count restseq))\n         firstel\n         (recur (first restseq) (rest restseq)))))","problem":20,"user":"4ef78c97535dced4c769f256"},{"problem":20,"code":"#(peek (rest (reverse %)))","user":"590eeaa1e4b047aa04b19a31"},{"problem":20,"code":"(fn second-to-last [x]\n   (if (< (count x) 2) \n    nil\n    (first (rest (reverse x)))))","user":"57d1c183e4b0bd073c20236e"},{"problem":20,"code":"(fn [sequence]\n(let [length (count sequence)]\n(nth sequence (- length 2))))","user":"57c4a231e4b05aa3c4741cd5"},{"problem":20,"code":"(fn foo [[x y & xs]] (if (empty? xs) x (foo (cons y xs))))","user":"5509bec5e4b06e50f9beb121"},{"code":"#(second (reverse %))\n;; (comp second reverse)\n;; (comp first rest reverse)","problem":20,"user":"51fdbf73e4b0f1313d468a51"},{"code":"(fn [col]\n  (-> col reverse second))","problem":20,"user":"53572767e4b04ce2eb3ed277"},{"code":"#( (fn [ [a b] ] b) ( reverse % ) )","problem":20,"user":"51ccc179e4b02254fc794879"},{"problem":20,"code":"(fn [s] ((fn [[a b]] b) (reverse s)))","user":"55d3aec8e4b0e31453f64a6a"},{"code":"(fn second-last [lst]\n  ((fn sec-last-help [lst prev]\n    (if (empty? (rest lst))\n      prev\n      (sec-last-help (rest lst) (first lst)))) lst '()))","problem":20,"user":"4f0031f3535dcb61093f6a2f"},{"code":"(fn second-to-last-elem [seq] (nth seq (- (count seq) 2)))","problem":20,"user":"537f6b78e4b06839e8705eb4"},{"code":"(fn [x] (loop [i x]\n  (if (= (rest (rest i)) ())\n    (first i)\n    (recur (rest i)))))","problem":20,"user":"4f04165d535dcb61093f6b9c"},{"problem":20,"code":"#(last (take 2 (reverse %1)))","user":"57122b20e4b09c608db70451"},{"code":"#(nth %1 (dec (dec (count %1))))","problem":20,"user":"502ec7aae4b06efe12e8cc78"},{"problem":20,"code":"(fn [list] \n  (reduce (fn [a b] b)\n          (butlast list)\n          ))","user":"54244c77e4b01498b1a71ae4"},{"problem":20,"code":"(fn [coll]\n  (let [[fst scd & rst] coll]\n    (if-not (and scd rst) fst (recur (rest coll)))\n    )\n  )","user":"574ff497e4b02ea114799266"},{"code":"(fn [x]\n  (first(drop 1 (reverse x))))","problem":20,"user":"4e923f44535dbda64a6f6b00"},{"code":"(fn [coll]\n  (when (>= (count coll) 2)\n    (loop [c coll]\n      (if (= (count c) 2)\n        (first c)\n        (recur (rest c))))))","problem":20,"user":"52a360a3e4b04e0c58e87bfe"},{"code":"(comp last (partial take 2) reverse)","problem":20,"user":"5127ca90e4b03a34742b42ff"},{"problem":20,"code":"(fn find-pu [xs]\n  (if (seq (rest (rest xs)))\n    (find-pu (rest xs))\n    (first xs)))","user":"56785a48e4b05957ce8c6179"},{"problem":20,"code":"(fn [x] (loop [tok (first x) left (rest x)] (if (or (empty? left) (= 1 (count left))) tok (recur (first left) (rest left)))))","user":"58d28e14e4b03c36ff7e5902"},{"code":"(fn [s] (if (next (next s))\n          (recur (next s))\n          (first s)))","problem":20,"user":"50d2e74ae4b03c62ef244480"},{"code":"(fn pen [x]\n  (cond (empty? (rest (rest x))) (first x)\n        :else (pen (rest x))))","problem":20,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":20,"code":"(fn [sq] (last (butlast sq)))","user":"571e89bee4b0145328a76295"},{"code":"(fn penultimate\n  ([xs]\n    (when-let [previous (first xs)]\n      (when-let [tail (next xs)]\n        (if (next tail)\n          (recur tail)\n          previous)))))","problem":20,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn [x]\n  (if (seq (rest (rest x)))\n    (recur (rest x))\n    (first x)))","problem":20,"user":"519c0c6ee4b0a1d87b003450"},{"problem":20,"code":"(fn [s] (first (reverse (drop-last s))))","user":"544a8fbbe4b0e39780006957"},{"problem":20,"code":"#(\n  loop [l %]\n    (if (= 1 (count (rest l)))\n      (first l)\n      (recur (rest l))\n      )\n  )","user":"562fb774e4b0ab312c17ebd9"},{"code":"(\n  fn[x]\n    (second (reverse x))\n)","problem":20,"user":"4ee18201535d10e5ff6f535b"},{"problem":20,"code":"(fn [l]\n  (loop [items l]\n    (if (nil? (first (rest (rest items))))\n         (first items)\n        (recur (rest items)))))","user":"5922599be4b09b4ee5954c8d"},{"problem":20,"code":"(fn find-penultimate [x] (get (vec x) (- (count x) 2)))","user":"53e92821e4b036ad0777e499"},{"code":"(fn [x] \n  (if (= 2 (count x))\n        (first x)\n    \t(recur (rest x))))","problem":20,"user":"521b481de4b0c4ef0be83037"},{"problem":20,"code":"(fn penultimate\n   [[first & rest]]\n   (let [[second & remaining] rest]\n     (if (empty? remaining)\n        first\n       (recur rest))))","user":"5e980583e4b0157ca96647d5"},{"problem":20,"code":"(comp last sort rest reverse)","user":"5b611666e4b0c6492753e70d"},{"problem":20,"code":"(fn my-last [xs]\n  (nth xs (- (count xs) 2)))","user":"57210b6de4b0c5bde472c0a6"},{"code":"(fn second-last [x] (nth x (- (count x) 2)))","problem":20,"user":"4f0319be535dcb61093f6a62"},{"problem":20,"code":"(fn [coll]\n  (last (drop-last 1 coll)))","user":"54af220ce4b09f271ff37d02"},{"problem":20,"code":"#(-> %1 (reverse) (rest) (first))","user":"54299d4be4b01498b1a71b3d"},{"problem":20,"code":"(fn [Karte] (first (rest (reverse Karte))))","user":"5b35de7be4b02d533a91bb97"},{"problem":20,"code":"(fn[coll]( second(reverse coll) ) )","user":"592b7269e4b072a2710fcf3f"},{"code":"(fn [x] \n  (first (rest (reverse x)))\n)","problem":20,"user":"4ec79cac535d6d7199dd36e3"},{"code":"#( first (drop 1 (reverse %)))","problem":20,"user":"4f53fa55e4b0a7574ea717d2"},{"code":"(fn [c](\n    nth \n    c \n    (\n      - \n      (count c) \n      (if (> (count c) 1) 2 0))))","problem":20,"user":"4f95a8a1e4b0dcca54ed6cd7"},{"code":";#(peek ( pop (vec %)))\n;(comp second reverse)\n;(comp peek pop vec)\n;(comp last butlast)\n(comp last drop-last)","problem":20,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn [xs] (nth (reverse xs) 1))","problem":20,"user":"4eeace7b535d93acb0a668a1"},{"problem":20,"code":"(fn\n  [elems]\n  (second(reverse elems)))","user":"5daa1f69e4b000c986472c3d"},{"problem":20,"code":"(fn [[x y & z]] (loop [xx x, yy y, zz z] (if (empty? zz) xx (recur yy (first zz) (rest zz)) )))","user":"54e84d1ee4b024c67c0cf822"},{"problem":20,"code":"(fn [coll] (->> (count coll) dec dec (nth coll)))","user":"53ac0e52e4b047364c044457"},{"code":"(fn [x] (nth(reverse x) 1))","problem":20,"user":"4f35e662e4b0e243712b1ec6"},{"code":"(fn [[one & two]]\n  (if (nil? (second two))\n    one\n    (recur two)))","problem":20,"user":"51554b12e4b06c5f6a1490a4"},{"problem":20,"code":"(fn second-last [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (second-last (rest xs))))","user":"56ae6776e4b03c432f18735e"},{"code":"#(loop [seq % last nil cur nil]\n  (if (first seq)\n      (recur (rest seq) cur (first seq))\n      last))","problem":20,"user":"4e94ea73535dbda64a6f6b2b"},{"problem":20,"code":"(fn lst [l]\n      (let [[x1 x2 & xs] l]\n           (if xs\n               (lst (cons x2 xs))\n               x1)))","user":"600ae927e4b074f607df6689"},{"problem":20,"code":"(fn [s] (first(rest(reverse s))))","user":"5b93c1b8e4b0c0b3ffbd4a4f"},{"problem":20,"code":"(fn [coll] \n  (let [reversed (reverse coll)]\n    (second reversed)))","user":"524815d0e4b05ef8e38e63c2"},{"code":"(fn foo [in]\n  (let [[x y & z] in]\n    (if (nil? (seq z)) \n        x \n        (recur (conj z y))\n)))","problem":20,"user":"4f141dee535d64f603146434"},{"code":"#(if (= (count %), 2)\n    (first %)\n    (recur (rest %)))","problem":20,"user":"52846deee4b0239c8a67adcf"},{"problem":20,"code":"(fn [collec] (nth collec ( - (count collec) 2 ) ) )","user":"5cd6e5afe4b0ccb061962948"},{"problem":20,"code":"#(reduce (fn [a b] b) (drop-last %))","user":"5b552117e4b02d533a91bd2c"},{"problem":20,"code":"(fn [x] (nth (reverse x ) 1))","user":"5f4303cfe4b0955706451fb3"},{"problem":20,"code":"(fn [x] (nth (seq (reverse x)) 1))","user":"545bbf42e4b01be26fd74657"},{"problem":20,"code":"(fn [x]\n  (loop [result (first x)\n         remaining (rest x)]\n    (let [rem-head (first remaining)\n          rem-tail (rest remaining)]\n    (if (empty? rem-tail)\n      result\n      (recur (first remaining) (rest remaining))))))","user":"4f9e830ae4b0dcca54ed6d2c"},{"problem":20,"code":"(fn [element] (second (reverse element)))","user":"589bcf87e4b00487982d5345"},{"problem":20,"code":"(fn this [arg]\n  (let [next- (rest arg)\n        next-- (rest next-)]\n    (if (empty? next--)\n      (first arg)\n      (this next-))))","user":"5cc092d1e4b0ccb061962790"},{"code":"(fn penult [a]\n  (if (next (next a))\n    (recur (next a))\n   (first a)))","problem":20,"user":"500a214de4b03d00572d2d74"},{"problem":20,"code":"(fn \n  [x] \n  (nth x (- (count x) 2)) )","user":"59f6495ee4b0966464fe6acf"},{"code":"(fn get-pen [seq] (second (reverse seq)))","problem":20,"user":"5095a8c7e4b0ba05ca7aebfb"},{"code":"(fn [sq]\n  (nth (reverse sq) 1))","problem":20,"user":"4edffe54535d10e5ff6f5347"},{"code":"(fn penultimate [s] (if (= (.size s) 2)   (first s) (penultimate (rest s))))","problem":20,"user":"52c10ad2e4b07a9af579235c"},{"code":"(fn UnRest [x] (if (= (count x) 2) (first x) (UnRest (rest x))))","problem":20,"user":"4fd7aba6e4b0dab7d829f388"},{"problem":20,"code":"( fn [x] ( second ( reverse x ) ) )","user":"550c81c6e4b06e50f9beb150"},{"problem":20,"code":"(fn [seq] (-> seq (nth (-> seq (count) (- 2)))))","user":"53ecd01fe4b0d648e757f4b9"},{"problem":20,"code":"(fn [ls] (last (drop-last ls)))","user":"54f3b50de4b050824f58f5c9"},{"problem":20,"code":"(fn second-last-element [sequence] (if (empty? (rest (rest sequence)))\n                                  (first sequence)\n                                  (second-last-element (rest sequence))))","user":"52ade380e4b0c58976d9ac9b"},{"code":"(fn [x](first ( rest (reverse x))))","problem":20,"user":"515d221ee4b00901442db1d8"},{"problem":20,"code":"(fn [myseq] (second (reverse myseq)))","user":"5425d00ee4b01498b1a71b12"},{"code":"(fn get-penultimate [s]\n  (if (nil? (nnext s))\n    (first s)\n    (get-penultimate (next s))))","problem":20,"user":"4f0374a0535dcb61093f6ad9"},{"code":"(fn [x] \n  (loop [l x] \n    (if (empty? (rest (rest l)))\n      (first l)\n      (recur (rest l)))))","problem":20,"user":"52c81954e4b0c2d177d6212e"},{"problem":20,"code":"(comp first reverse pop vec)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":20,"code":"(fn [xs]\n  (loop [ys xs]\n    (let [[u v & ws] ys]\n      (if ws (recur (conj ws v)) \n        u))))","user":"55dc26ede4b050e68259b3ab"},{"code":"(fn [l] (if (empty? (rest (rest l))) (first l) (recur (rest l))))","problem":20,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"#(first (rest (reverse % )))","problem":20,"user":"50cf729fe4b0e61f11ddcd93"},{"problem":20,"code":"(fn [coll] \n  (second (reverse coll)))","user":"565b941ce4b068f2fe63dc07"},{"code":"(fn [xs] (->> xs (reverse) (second)))","problem":20,"user":"525078b6e4b0541d1855b832"},{"code":"#(first (next (reverse % )))","problem":20,"user":"50b28f67e4b03ea880433562"},{"problem":20,"code":"(fn [lista]\n  (-> lista\n      (reverse)\n      (rest)\n      (first)))","user":"58fdd7b7e4b0438e51c2cfc0"},{"problem":20,"code":"(fn [[head pretail & tail]]\n  (if pretail\n  \t(if tail\n  \t(recur (conj tail pretail))\n  \thead)\n   nil))","user":"5b69529be4b0c6492753e786"},{"problem":20,"code":"(fn [[x y & xs]]\n  (if (empty? xs) x (recur (cons y xs))))","user":"5b6f9c3ae4b0c6492753e7de"},{"problem":20,"code":"(fn [lista] (-> lista reverse second))","user":"5d6f063de4b04d129b00f2d1"},{"problem":20,"code":"(fn\n  [s] (first (take-last 2 s)))","user":"60919828e4b00e9e6653c3d8"},{"code":"(fn [xs] \n  (if (= (count xs) 2) (first xs)\n                       (recur (rest xs))))","problem":20,"user":"514767ace4b0541f4bec05cb"},{"problem":20,"code":"#(nth % (- (dec' (count %)) 1))","user":"5cd4f7c5e4b0ccb06196292a"},{"problem":20,"code":"(comp \n   first \n   rest \n   reverse)","user":"5f3abd21e4b004f08c61c52c"},{"code":"(fn [ls] (nth ls (- (count ls) 2)))","problem":20,"user":"4ec7d614535d6d7199dd36e7"},{"code":"#(loop [coll %] (if (= (count coll) 2) (first coll) (recur (rest coll))))","problem":20,"user":"50e8cac5e4b0ebbe794eb7ef"},{"problem":20,"code":"(fn penultimate [items]\n  (if\n    (empty? (rest (rest items)))\n    (first items)\n    (penultimate (rest items))))","user":"5b1ff078e4b03cfeda66ed2a"},{"code":"(fn lst [x] (if (= (second (rest x)) nil) (first x) (lst (rest x))))","problem":20,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn my-last [x]\n  (if (= 2 (count x))\n    (first x)\n    (my-last (rest x))))","problem":20,"user":"535a170ae4b04ce2eb3ed2a3"},{"code":"(fn penultimo [s]\n     (if (=  2 (count s))\n       (first s)\n       (let [restante (rest s)]\n         (if (= 2 (count restante)) \n           (first restante)\n           (penultimo restante)))))","problem":20,"user":"52c8758be4b0c2d177d62135"},{"problem":20,"code":"(fn [x] (nth x (- ( count x) 2)))","user":"5968470fe4b069c0a1a197c9"},{"problem":20,"code":"(fn penultimate [[x y & xs]]\n  (println [x y xs])\n  (if (= xs nil)\n    x\n    (penultimate (conj xs y))\n  )\n)","user":"5f7251b9e4b02876ed9fd08a"},{"code":"(fn [coll]\n         (if (<= (count coll) 2)\n             (first coll)\n             (nth coll (- (count coll) 2))))","problem":20,"user":"4e95a440535dbda64a6f6b37"},{"code":"(fn[x](first (reverse (take 2 (reverse x)))))","problem":20,"user":"4f8e984ee4b0d4e659cdde68"},{"code":"(fn nlast[x] \n  (if (= (count x) 2)\n    (first x)  \n    (nlast (rest x))     \n  )\n)","problem":20,"user":"50a628e3e4b0aa96157e2620"},{"code":"(fn getelem [x] (if (< (count x) 3) (first x) (recur (rest x))))","problem":20,"user":"52dc55fee4b09f7907dd13ce"},{"code":"#(second(reverse %1))","problem":20,"user":"50e5b033e4b0165214765fc7"},{"problem":20,"code":"(comp second reverse)\n;; #(second (reverse %))","user":"5b87d7fde4b047b03b2037fd"},{"code":"(fn lst [x] (nth x (- (count x) 2)))","problem":20,"user":"4e8b742a535d65386fec2123"},{"problem":20,"code":"(fn [[x & xs]]\n   (if (= (count xs) 1)\n      x\n      (recur xs)))","user":"543d4640e4b032a45b86934b"},{"code":"#(if (> (count %) 1)\n   (second (reverse %))\n   nil)","problem":20,"user":"5310e7aee4b08068f379ecdc"},{"problem":20,"code":"(fn [coll] \n  (-> coll \n      (reverse) \n      (rest) \n      (first)))","user":"5db5d8b0e4b010eb3c36cd32"},{"code":"#(first (drop (dec (dec (count %))) %))","problem":20,"user":"535359c9e4b084c2834f4afd"},{"problem":20,"code":"(fn[col] (nth col(-(dec (count col)) 1)))","user":"53e2381ce4b036ad0777e3ee"},{"code":"(fn [q] \n  (first (reverse (drop-last q))))","problem":20,"user":"4f931779e4b0dcca54ed6cb5"},{"problem":20,"code":"#(-> % drop-last reverse first)","user":"53ea5851e4b036ad0777e4e4"},{"code":"#( last (drop-last %) )","problem":20,"user":"4f2094e1e4b0d66497709fca"},{"problem":20,"code":"(fn q [q] (second (reverse q)))","user":"5da4fc6be4b000c986472bff"},{"problem":20,"code":"#(loop [x1 (first %)\n        x2 (first (rest %))\n        xs (rest (rest %))]\n   (if (seq xs)\n     (recur x2 (first xs) (rest xs))\n     x1))","user":"595fd721e4b066ee0a44b06e"},{"problem":20,"code":"(fn [l] (nth l(- (count l) 2)))","user":"5e1a3a01e4b0dc9594008512"},{"code":"(fn [a] (first (next (reverse a))))","problem":20,"user":"4e602826535d8ccf87e9fe52"},{"problem":20,"code":"(fn [list]\n  (nth list\n       (dec (dec (count list)))\n       )\n  )","user":"5d6932e6e4b0db5d338d1609"},{"problem":20,"code":"(fn dla-glodziaska [x]\n(loop [seq-elements x result []]\n  (if (= 1 (count seq-elements))\n  result\n  (let [[first-elem & rest-elems] seq-elements]\n    (recur \n     rest-elems\n     first-elem\n     )))))","user":"57607706e4b08062f99a4e97"},{"problem":20,"code":"(fn \n  [x] \n  (nth x (- (count x) 2)))","user":"56941e48e4b0dcc4269f410d"},{"problem":20,"code":"(fn[x](nth x (-(count x)2)))","user":"56452e17e4b0284900eef602"},{"problem":20,"code":"(fn second-last\n  [[part next-part & rest]]\n  (if rest\n    (second-last (cons next-part rest))\n    part))","user":"5577b403e4b05c286339e086"},{"code":"(fn ding [l] (\n  second (reverse l)\n))","problem":20,"user":"4f72e09de4b07046d9f4f03b"},{"problem":20,"code":"(fn [s]\n  (loop [h (first s)\n         t (next s)]\n    (if (next t)\n      (recur (first t) (next t))\n      h)))","user":"5263e6d2e4b03e8d9a4a70c0"},{"code":"(fn [s] (if (empty? (next (next s))) (first s) (recur (next s))))","problem":20,"user":"4e39fb68535deb9a81d77f47"},{"problem":20,"code":"(fn [x] (-> (reverse x) second))","user":"55a1683ce4b0acc240e31513"},{"code":"(fn pen [lst] (if (= 2 (count lst)) (first lst) (pen (rest lst))))","problem":20,"user":"4f07ad89535dcb61093f6c2a"},{"code":"#(if (> (count (rest %)) 1)\r\n  (recur (rest %))\r\n  (first %)\r\n)","problem":20,"user":"4e99f2e1535dbda64a6f6b6c"},{"code":"(fn foo [x] (second (reverse x)))","problem":20,"user":"50eaf688e4b0346a3e988cba"},{"problem":20,"code":"(fn penultimate-element [coll] \n  (nth coll (- (count coll) 2)))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [coll]\n  (first (rest (reverse coll))))","problem":20,"user":"4ff2ee54e4b0678c553fc340"},{"problem":20,"code":"(fn [lst] \n  (loop [l lst] \n    (if (= (count l) 2)\n      (first l)\n      (recur (rest l)))))","user":"5ac9c737e4b0e27600da77d2"},{"code":"(fn [l] ((comp second reverse) l))","problem":20,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":20,"code":"(fn [a] (if (= (count a) 2) (first a) (recur (rest a))))","user":"559ff3b1e4b0acc240e314ed"},{"problem":20,"code":"(fn bl\n  [x]\n  (if (< (count x) 2)\n    nil\n    (if (empty? (rest (rest x)))\n      (first x)\n      (bl (rest x)))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [x]\n  (last (butlast x)))","problem":20,"user":"4fc68fc4e4b0ee37620e1816"},{"code":"(fn loopy [s]                 \n  (if (> (count s) 2) \n    (loopy (rest s))\n    (first s)))","problem":20,"user":"4ed2b337535d44c135fd68de"},{"problem":20,"code":"(fn secondLast [x]\n (last (drop-last x) )                                   \n)","user":"56405959e4b08d4f616f5ee1"},{"problem":20,"code":"(fn [x] ( first(rest(reverse x))))","user":"548e940fe4b0e286459a1225"},{"problem":20,"code":"(fn [coll]\n    (if-let [n (next coll)]\n      (if (next n)\n        (recur n)\n        (first coll))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn bar [s] (last (butlast s)))","problem":20,"user":"5035a77de4b0ed9c821488fe"},{"problem":20,"code":"(fn [args] (last (drop-last args)))","user":"5bfd6668e4b0bdcf453d15fc"},{"code":"(fn [x](last (butlast x)))","problem":20,"user":"52bd9cb7e4b07a9af5792304"},{"problem":20,"code":"(fn [l] (case (count l) 2 (first l) (recur (rest l))))","user":"5e373c08e4b0650de70e2b41"},{"problem":20,"code":"(fn\n  [lst]\n  (nth lst (- (count lst) 2)))","user":"566b2cb1e4b0a866af6896aa"},{"problem":20,"code":"#(.get %1 (- (count %1) 2))","user":"5eba9c34e4b00a66d4a95256"},{"code":"(fn [col] \n   (-> col reverse second)\n\n  )","problem":20,"user":"500adcc9e4b03d00572d2d7c"},{"problem":20,"code":"(fn l [s]\n  (if (= (rest (rest s)) '())\n    (first s)\n    (l (rest s))))","user":"5438795ee4b032a45b869313"},{"code":"(fn f [l] (if (empty? (rest (rest l))) (first l) (f (rest l))))","problem":20,"user":"53136c60e4b08068f379ed08"},{"problem":20,"code":"(fn [x] \n    (let [ z (rest x) ]\n        ( if (= 1 (count z)) (first x) ( recur z ) ))\n\n )","user":"55ba6d52e4b01b9910ae29d3"},{"problem":20,"code":"(fn [z] (nth z (- (count z) 2)) )","user":"59f4d0e0e4b0966464fe6ab9"},{"problem":20,"code":"(fn [x]\n   (nth x (- (count x) 2)))","user":"59da2569e4b0ef0a1e9b5c62"},{"code":"(fn next-to-last [x] (if (= (count x) 2)(first x)(next-to-last (rest x))))","problem":20,"user":"4e644410535d8ccf87e9fe6a"},{"code":"#(if (> 3 (count %)) (first %) (recur (rest %)))","problem":20,"user":"4e6a47b2535d8ccf87e9febb"},{"code":"(fn penUlt [x]\n  (if (> (count x) 2)\n    (penUlt (rest x))\n    (first x)))","problem":20,"user":"4f19b55b535d64f603146469"},{"problem":20,"code":"(fn\n  [coll]\n  (nth coll (- (count coll) 2)))","user":"579f3293e4b05302be0b72f9"},{"code":"(fn [xs]\n  (first\n   (reduce (fn [p x'] [(second p) x']) nil xs)))","problem":20,"user":"52487654e4b05ef8e38e63dc"},{"problem":20,"code":"(fn rec_last [x] \n  (if (empty? (rest (rest x)))\n    (first x)\n    (rec_last (rest x))\n    )\n)","user":"556ddbeae4b09a3098a5250a"},{"problem":20,"code":"(fn [s] ( first ( rest ( reverse s) ) ) )","user":"564633a1e4b0284900eef60f"},{"problem":20,"code":"(fn [vals] (loop [[item & others] vals]\n             (if (= (count others) 1)\n               item\n               (recur others))))","user":"5d51216ae4b0776584bd6f5b"},{"problem":20,"code":"(fn revsec[x] (second (reverse x)))","user":"5b69baf9e4b0c6492753e78f"},{"problem":20,"code":"#(.get %1 (- (- 2 (count %1))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn penultimate [xs] (if (empty? (rest (rest xs))) (first xs) (penultimate (rest xs))))","problem":20,"user":"519ca227e4b0a1d87b003460"},{"code":"(fn [v] (first (rest (reverse v)))\n  )","problem":20,"user":"52d10f08e4b07d0d72b273c4"},{"problem":20,"code":"#( nth % ( -(count %)2))","user":"57016724e4b08d47c97781d6"},{"problem":20,"code":"#(if (= (rest (rest %)) '()) (first %) (recur (rest %)))","user":"585dc682e4b0f14aab7c87a0"},{"problem":20,"code":"(fn [x] \n  (when (>= (count x) 2)\n  (nth x (- (count x) 2))))","user":"58b43bf5e4b0ebc645576d38"},{"code":"(comp first pop  reverse)","problem":20,"user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn penultimate [x]\n  (if (= 2 (count x))\n    (first x)\n    (penultimate (rest x))\n  )\n)","problem":20,"user":"4fcd6bd2e4b065de69964ca9"},{"code":"(fn [x]\n             (let [y (first x)  z (rest x)]\n\n               (if (> (count z) 1) (recur z) y))\n\n             )","problem":20,"user":"4e44358f535dc968683fc4a8"},{"problem":20,"code":"(fn [x] (first (nthrest x (- (count x) 2))))","user":"5f19ecbae4b091ba50b4dbdf"},{"problem":20,"code":"(fn [s]\n  (if (empty? s)\n    nil\n    (let [x (first s)\n          y (rest s)]\n      (if (= (count y) 1)\n        x\n        (recur y)))))","user":"5c04464ee4b0bdcf453d167d"},{"code":"(fn [c] (nth c (- (count c) 2)))","problem":20,"user":"4f035397535dcb61093f6a8a"},{"code":"(fn doshit [x] (last (butlast x)))","problem":20,"user":"5331d7cae4b019098a6f8b6d"},{"code":"(fn [s] (nth s (- (count s) 2 )))","problem":20,"user":"519126d5e4b0f8ef0be96bff"},{"problem":20,"code":"(fn [[part & remaining]]\n  (if (<= (count remaining) 1)\n    part\n    (recur remaining)))","user":"58fc52cee4b0438e51c2cf95"},{"problem":20,"code":"(fn [z] (nth z (- (.size z) 2)))","user":"54d82f2be4b0a52adc2e2037"},{"code":"(fn cody [x] (first (drop (- (count x) 2) x)))","problem":20,"user":"53000714e4b0d8b024fd370e"},{"problem":20,"code":"(fn [x] (last (butlast (seq x))))","user":"53d2fb7ae4b00fb29b221326"},{"problem":20,"code":"#(first (rest ( reverse % )))","user":"5ca7b5bbe4b048ec896c5c04"},{"problem":20,"code":"(fn [seq] \n  (if (nil? (next (next seq))) \n    (first seq)\n    (recur (next seq))))","user":"5c7d590ae4b0d597f478caaa"},{"code":"(fn [x] (if (= 2 (count x)) (first x) (recur (rest x))))","problem":20,"user":"4f040bbf535dcb61093f6b95"},{"problem":20,"code":"(fn [s] (nth (rseq (vec s)) 1))","user":"50b42cbbe4b001349b2f4abe"},{"code":"#(first (next (reverse %)))","problem":20,"user":"4e1582f0535d04ed9115e7e4"},{"problem":20,"code":"(fn getPen [arr]\n  (if (nil? (second (rest arr)))\n    (first arr)\n    (getPen (rest arr))\n    )\n  )","user":"5b7f381ae4b047b03b203769"},{"problem":20,"code":"(fn [coll]\n  ((comp first rest reverse) coll))","user":"605a876be4b000d535e6f53c"},{"problem":20,"code":"(fn [l]\n  (nth (drop (- (count l) 2) l) 0)\n)","user":"5c3e7b04e4b08cd430848e83"},{"code":"(fn foo [curr]\r\n  (if (empty? (rest (rest curr)))\r\n    (first curr)\r\n    (foo (rest curr))))","problem":20,"user":"4e7b7e0d535db169f9c796b3"},{"problem":20,"code":"(fn [x] (get (apply vector x) (- (count x) 2)))","user":"56ccbeb7e4b0ea9b8538f740"},{"problem":20,"code":"(fn secLast [lis]\n  (if   (-> lis count  (#(= % 2)) )\n    (first lis )\n    (-> lis rest secLast )\n    )\n  )","user":"5aa11b37e4b0d174b936c840"},{"code":"(fn [x] (nth x(- (count x) 2)))","problem":20,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"(fn rst [x] (nth x (- (count x) 2)))","problem":20,"user":"4e8b73ab535d65386fec211f"},{"code":"(fn [s]\n  (first (rest (reverse s)))\n)","problem":20,"user":"4e570b60535d8a8b8723a286"},{"code":"#(-> % (count) (- 2) (drop %) (first))","problem":20,"user":"5004034ce4b0678c553fc447"},{"problem":20,"code":"(fn [someList]\n  (nth someList (- (count someList) 2) )\n       )","user":"5972198ee4b01722bebd4c7d"},{"problem":20,"code":"#(loop [lista %]\n   (if (= (count lista) 2)\n     (first lista)\n     (recur (rest lista))))","user":"6074e1e7e4b069485764de50"},{"problem":20,"code":"(fn second-last\n  [x]\n  (if (= 2 (count x))\n    (nth x 0)\n    (second-last (rest x))))","user":"56844e4be4b062072dfb8acb"},{"problem":20,"code":"(fn x [[h &  t]] (if (= (count t) 1) h (x t)))","user":"54534c83e4b0e397800069cd"},{"code":"(fn [x] (first (rest (reverse x))))","problem":20,"user":"4df30f76535d08e6dec9fe28"},{"problem":20,"code":"(fn penultima\n  [[h & t]]\n  (let [[h2 & t2] t]\n    (if (empty? t2)\n      h\n      (penultima t))))","user":"53f51bbfe4b0db01ade6f9cb"},{"code":"(fn [[f s & r]]\n  (if r\n    (recur (cons s r))\n    f))","problem":20,"user":"5390952be4b0b51d73faae9c"},{"code":"(fn last2 [l] (if (empty? (rest (rest l)))\n  (first l) (last2 (rest l))))","problem":20,"user":"4ff4c9dae4b0678c553fc360"},{"code":"(fn secnd [x] (nth x (- (count x) 2)))","problem":20,"user":"4ffcff73e4b0678c553fc3df"},{"problem":20,"code":"(fn[l](first (rest (reverse l))))","user":"564f3af6e4b0284900eef6a9"},{"code":"(comp first rest reverse)","problem":20,"user":"4e5d0e96535d8a8b8723a2c8"},{"code":"(fn sndLast [x] \n  (if (> (.size x) 2)\n    (sndLast (rest x))\n    (first x)))","problem":20,"user":"5166b716e4b060c690c1f4bf"},{"problem":20,"code":"(fn penultimate [lst]\n  (last (butlast lst)))","user":"56df62b3e4b0ca2494a095ef"},{"problem":20,"code":"#(-> % \n     reverse \n     rest\n     first\n )","user":"59987f02e4b07157cc8daae7"},{"problem":20,"code":"(fn penultimate-element [s]\n  (nth s (- (count s) 2)))\n; (comp second reverse)","user":"5c87217de4b0c8042a70cea1"},{"problem":20,"code":"(fn mylast [seq] (first (rest (reverse seq))))","user":"5cc1f975e4b0ccb0619627c8"},{"problem":20,"code":"(fn penultimate [seq] (nth seq (dec (dec (count seq)))))","user":"56889672e4b0dcc4269f406c"},{"code":"(fn mypenult [[x y & more]] \n  (if more (recur (conj more y)) x))","problem":20,"user":"4ecc4079535d23f0362276fa"},{"code":"#(nth % (- (count %) 2 ))","problem":20,"user":"4f188db6535d64f60314645c"},{"code":"(fn [l] (first(rest(reverse( vec l)))))","problem":20,"user":"4e6a6e92535d8ccf87e9fee3"},{"problem":20,"code":"(fn [x]\n  (if (= (rest (rest x)) '())\n    (first x)\n    (recur (rest x))\n    )\n  )","user":"5e265173e4b05b4b01516175"},{"code":"(fn [x] (last (drop-last x)))","problem":20,"user":"4e6e7018535d5021c1a8960b"},{"problem":20,"code":"(fn penul [l] (if (= (count l) 2) (first l) (penul (rest l))))","user":"5e546e20e4b027a2e10ac0eb"},{"code":"(fn\n  [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"52635a22e4b03e8d9a4a70ac"},{"code":"(fn [l]\n  (if (empty? (rest (rest l)))\n    (first l)\n    (recur (rest l))))","problem":20,"user":"51515a19e4b03e678e393acc"},{"problem":20,"code":"#(second (reverse %))\n;;#(nth % (- (count %) 2))","user":"589b98fae4b00487982d533c"},{"code":"(fn get-my-last \r\n  [n]\r\n  (if (> (count n) 2)\r\n    (recur (rest n))\r\n    (first n)))","problem":20,"user":"4f341320e4b0e243712b1eb4"},{"problem":20,"code":"(fn [s] (second( reverse s)))","user":"59282582e4b072a2710fcede"},{"problem":20,"code":"(fn [xs](second (reverse xs)))","user":"54cbc38be4b057c6fda3a27e"},{"code":"(fn [x] (peek (pop (reverse x))))","problem":20,"user":"4e89de60535d3e98b8023285"},{"code":"(fn [coll] \n  (if (= (count coll) 2) (first coll) \n   (recur (rest coll) )\n  )\n)","problem":20,"user":"5249afc9e4b05ef8e38e6470"},{"problem":20,"code":"#(last(butlast (into [] %)))","user":"5b8d0564e4b0c0b3ffbd49cc"},{"problem":20,"code":"(fn [seq]\n  (if (= 2 (count seq))\n    (first seq)\n    (recur (rest seq))\n    )\n  )","user":"5736b126e4b0cd1946bd1037"},{"problem":20,"code":"(fn f [X] (if (= 2 (count X)) (first X)(f (rest X))))","user":"542a348be4b01498b1a71b3f"},{"problem":20,"code":"(fn [coll] (if (= (count coll) 2) (first coll) (recur (rest coll))))","user":"5fcf86c2e4b07e53c2f3f00d"},{"code":"#(get(vec %)(-(count %)2))","problem":20,"user":"4e244ed5535d04ed9115e826"},{"code":"(fn [x] \n  (if (> (count x) 2)\n   (recur (rest x))\n  (first x)))","problem":20,"user":"4e7e241a535db169f9c79705"},{"problem":20,"code":"(fn penultimate\n  [sequence]\n  (nth sequence (- (count sequence) 2)))","user":"54e009dce4b024c67c0cf7b2"},{"problem":20,"code":"(fn last-ele [coll] (first (rest (reverse coll))))","user":"573ddfc2e4b05c31a32c081b"},{"problem":20,"code":"(fn [[f & r]]\n  (if (empty? (rest r))\n    f\n   (recur r)))","user":"53ebf2dee4b036ad0777e4fe"},{"problem":20,"code":"(fn fName [x] (\n             \tcond\n         \t\t(empty? (rest(rest x))) (first x)\n         \t\t:else (fName (rest x))))","user":"5cb79c51e4b026601754b970"},{"problem":20,"code":"(fn [s] \n  (last(filter #(not= (last s) %) s))\n)","user":"55bb9b1de4b01b9910ae29e9"},{"problem":20,"code":"(fn [v] ((fn [c] (let [b (rest c)] (first b)))\n  (reverse v)))","user":"5ceb221ce4b0a17bb84e2bde"},{"code":"(fn [seq]\n  (if (= (count seq) 2)\n    (first seq)\n    (recur (rest seq))))","problem":20,"user":"4f7a9416e4b06e829148e19b"},{"problem":20,"code":"(fn \n  [x]\n  (nth (reverse x) 1))","user":"56d79214e4b0ea9b8538f7dd"},{"problem":20,"code":"(fn [mseq] (first (rest (reverse mseq))))","user":"56a42953e4b0542e1f8d14d9"},{"code":"(fn [xs] (if (next (next xs)) (recur (next xs)) (first xs)))","problem":20,"user":"513c3cc7e4b04402f587b77f"},{"code":"#(-> % reverse pop first)","problem":20,"user":"4ed3abd1535d44c135fd68f4"},{"code":"(fn snd-last\n  [x]\n    (if (< (count x) 3)\n        (first x)\n        (snd-last (rest x))))","problem":20,"user":"4f91a38ae4b0dcca54ed6c9f"},{"problem":20,"code":"(fn\n  [seq]\n  (last (drop-last seq)))","user":"54d100abe4b0e8a36923e5d8"},{"problem":20,"code":";(fn [m] (nth m (- (count m) 2)))\n#(second (reverse %))","user":"546a6e9fe4b00cfc9eacc157"},{"code":"(fn penult [x] (first (rest (reverse x))))","problem":20,"user":"529b0f84e4b02ebb4ef7509c"},{"problem":20,"code":"(fn [v] ( nth  v (- ( count v) 2)))","user":"5a455ddde4b05d388ecb6b3b"},{"problem":20,"code":"(fn [collection]\n  (nth collection (- (count collection) 2)))","user":"58445c3ce4b089d5ab817e49"},{"problem":20,"code":"(fn pen [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (pen (rest xs))\n   ))","user":"5ad89e51e4b0ea6055cfac2a"},{"problem":20,"code":"(fn but-last\n  [x]\n  (let [[head snd & tail] x]\n    (if (empty? tail)\n      head\n      (recur (rest x)))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":20,"code":"(fn [[a & b]] (if (seq(rest b)) (recur b) a))","user":"53b615cce4b047364c0444c2"},{"problem":20,"code":"(fn pen [coll]\n  (cond \n   (= 1 (count (rest coll))) (first coll)\n   :else (pen (rest coll))))","user":"56c0aeb8e4b060a8e693e3af"},{"problem":20,"code":"(fn [my-list]\n  (let [len (count my-list)]\n    (nth my-list (- len 2))\n    )\n  )","user":"5fa2792ae4b0f0ebd91b77ef"},{"code":"(fn [list] (nth list (dec (dec (count list)))))","problem":20,"user":"5277da8ee4b03e8d9a4a7514"},{"problem":20,"code":"(fn[x] (nth x(-(count x)2)))","user":"5e208e4be4b05b4b01516113"},{"code":"#( nth % \n  ( - (count %) 2)\n)","problem":20,"user":"4f51697ae4b03ad3f0c10d22"},{"problem":20,"code":"(fn feed\n  [vect]\n  (loop [v (rest (rest vect)), pend (first vect), end (first (rest vect))]\n    (if (seq v)\n      (recur (rest v) end (first v))\n      pend)))","user":"573b487de4b0cd1946bd10a1"},{"problem":20,"code":"#(\n last (take 2 (reverse %)))","user":"5512492be4b06e50f9beb1a2"},{"problem":20,"code":"(fn f [x] (if (= (count x) 2) (first x) (f (rest x))))","user":"56d611c6e4b0ea9b8538f7c7"},{"problem":20,"code":"(fn dupa [x] (second (reverse x)))","user":"58778aa1e4b01531a375ea9f"},{"code":"(fn give-last [x] \n  (if (= (count x) 2) (first x) (give-last (rest x)) \n  )\n)","problem":20,"user":"50b32252e4b03ea880433568"},{"code":"(fn [ln]\n  (if (= 2 (count ln))\n      (first ln)\n      (recur (rest ln))))","problem":20,"user":"4eb04346535d7eef3080733a"},{"code":"(fn [elements] (nth elements (- (count elements) 2)))","problem":20,"user":"4e5e391c535d8a8b8723a2d0"},{"problem":20,"code":"#(first(reverse(butlast %)))","user":"5bdee4bee4b0ed4b8aab4c67"},{"code":"(fn [coll] (first (reduce (fn [[a1 a2] el] [a2 el]) [nil nil] coll)))","problem":20,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":20,"code":"(fn [coll]\n    (let [coll-reversed (reverse coll)]\n        (second coll-reversed)))","user":"5896735fe4b00487982d529d"},{"problem":20,"code":"(fn penul [x] \n  (->> (reverse x)\n       (rest)\n       (first)))","user":"58472aade4b089d5ab817ea0"},{"problem":20,"code":";#(.get % (- (count %) 2))\n\n(comp second reverse)","user":"57e4dbcbe4b0bfb2137f5ac3"},{"problem":20,"code":"(fn  bef[arr] (let [ g (nth arr (- (count arr) 2))] g))","user":"548e171be4b0e286459a121e"},{"problem":20,"code":"(fn [[n m & more]] (if more (do (recur (cons m more))) n))","user":"55f04940e4b06e875b46ce21"},{"problem":20,"code":"#(-> % \n     (reverse) \n     (second))","user":"59076082e4b047aa04b19956"},{"problem":20,"code":"(fn [x] (let [z (vec x)] (z (- (count z) 2))))","user":"55b2088ae4b0da326a65cf75"},{"problem":20,"code":"(fn f [ls] (if (= '() (rest (rest ls))) (first ls) (f (rest ls))))","user":"5460eadde4b01be26fd74694"},{"problem":20,"code":"#(let [f (first %) r (rest %) c (count r)] (if (= c 1) f (recur r)))","user":"5c408a61e4b08cd430848eb2"},{"problem":20,"code":"(fn [l]\n  (loop [[e & more] l\n         before e]\n    (if (empty? more)\n      before\n      (recur more e))))","user":"55d4dddde4b0e31453f64a7f"},{"problem":20,"code":"#(-> %\n    (reverse)\n    (second))","user":"55c49394e4b0e31453f6499e"},{"code":"(fn second-to-last [x]\n  (first(next (reverse\n               x)\n              )\n        )\n  )","problem":20,"user":"511ad71fe4b07ab9ec45617d"},{"code":"#(nth % \n    (- (count %) 2))","problem":20,"user":"4fe5f342e4b0e8f79898fecb"},{"problem":20,"code":"(fn [list] \n  (second (reverse list)))","user":"60b98974e4b0e0fa5f1b4271"},{"code":"(fn ndlast [n] (if (> (count n) 2) (recur (rest n)) (first n)))","problem":20,"user":"4e36e647535deb9a81d77f36"},{"problem":20,"code":"(fn [s] (first (reduce (fn [[a b] c] [b c]) [nil nil] s)))","user":"5408ec4de4b0addc1aec66d0"},{"code":"#(first ( drop 1 (reverse %)))","problem":20,"user":"52d24f60e4b099d49816f0a8"},{"problem":20,"code":"(fn [ lst ]\n  (first (rest (reverse lst))))","user":"57bbdf98e4b05aa3c4741c33"},{"code":"(fn [ss]\n  (loop [s ss]\n    (if (nnext s)\n      (recur (next s))\n      (first s))))","problem":20,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(comp first last #(partition 2 1 %))","problem":20,"user":"5246e945e4b0644eb7b0783b"},{"problem":20,"code":"(fn [lst]\n(nth lst (dec (dec (count lst)))))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn [s] (last (drop-last s)))","problem":20,"user":"4edf40d5535d10e5ff6f533f"},{"problem":20,"code":"#(nth (drop 1 (reverse %)) 0)","user":"55a0d7e0e4b0acc240e31503"},{"code":"(fn penun[x] ( first (take-last 2 x)))","problem":20,"user":"4dfb7b81535d04ed9115e77d"},{"problem":20,"code":"(fn [more] (second (reverse more)))","user":"5b52e311e4b02d533a91bd12"},{"problem":20,"code":"(fn [x]\n    (nth x (- (count x) 2))\n    )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn [col]\n  (let [colr (rest col)]\n    (if (empty? (rest colr))\n      (first col)\n      (recur colr))))","problem":20,"user":"4e80a7f3535db62dc21a62b0"},{"problem":20,"code":"(fn\n  [ary]\n  (nth ary (- (count ary) 2))\n  )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":20,"code":"(fn p20 [l]\n  (nth l (- (count l) 2)))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":20,"code":"(fn penu [x] (first (take-last 2 x)))","user":"561fc0cee4b064ca9f4b16d1"},{"code":"(fn [n] \n  (.get n (- (count n) 2)))","problem":20,"user":"51cd0dc6e4b02254fc79487d"},{"problem":20,"code":"(fn the-second-last [s]\r\n(if (= (count s) 2)\r\n(first s)\r\n(the-second-last (rest s))))","user":"595d874de4b066ee0a44b025"},{"problem":20,"code":"(fn pen [coll]\n  (if (= 1 (count (rest coll)))\n    (first coll)\n    (pen (rest coll))))","user":"55e2c484e4b050e68259b439"},{"problem":20,"code":"(fn [baz]\n  (nth baz (- (count baz) 2))\n)","user":"549e5f1ee4b0f3d1d8e70f9f"},{"code":"#(if (= (count %) 2)\n\t (first %)\n\t (recur (rest %)))","problem":20,"user":"514a13cee4b0829bd132edb4"},{"code":"(fn dog [x](nth x (- (count x) 2) ))","problem":20,"user":"51427a8be4b0b50abeb46b37"},{"code":"(fn penultimate [col]\n  (if (= 2 (count col)) (first col)\n                        (recur (rest col))))","problem":20,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn [s]\n  (loop [lasta nil a (first s) d (rest s)]\n    (if (= d ())\n      \tlasta\n      \t(recur a (first d) (rest d)))))","problem":20,"user":"50fc299ee4b0d10d794c19f2"},{"code":"(fn second-to-last [x] \r\n  (if \r\n    (== 2 (count x)) \r\n    (first x) \r\n    (recur (rest x))\r\n  )\r\n)","problem":20,"user":"4df54fd9535d08e6dec9fe30"},{"code":"(fn [x]\n  (first\n   \t(rest\n      (reverse x))))","problem":20,"user":"522a1248e4b0590a43906cf3"},{"problem":20,"code":"(fn my-fn [s] (if (> (.size s) 2) (my-fn (rest s)) (first s)))","user":"54d22860e4b0e8a36923e5ef"},{"code":"#(first (rest(reverse %)))","problem":20,"user":"524bf665e4b09eba1c0223f2"},{"code":"(fn [xs] (last (drop-last xs)))","problem":20,"user":"4e458592535dc968683fc4ac"},{"code":"(fn h[x] (first (next (reverse x))))","problem":20,"user":"4ed87228535d10e5ff6f52fa"},{"code":"(fn [seq]\n  (if (empty? (rest (rest seq)))\n    (first seq)\n    (recur (rest seq))))","problem":20,"user":"4e9528ef535dbda64a6f6b32"},{"code":"(fn second-to-last [x]\n  (if (= (count x) 2)\n    (first x)\n    (second-to-last (rest x))))","problem":20,"user":"4fd24729e4b04c3a95aa041e"},{"code":"(fn asdf [x] (first (take-last 2 x)))","problem":20,"user":"5082709ee4b06a522e8c7af1"},{"code":"(fn [a] (first (drop 1 (reverse a))))","problem":20,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":20,"code":"(fn penult [x] (second(reverse x)))","user":"57c1c7dae4b05aa3c4741ca5"},{"problem":20,"code":"(fn [coll] (first (rest (reverse coll))) )","user":"56d89066e4b0ea9b8538f7e7"},{"problem":20,"code":"#(nth %(dec(- (count %) 1)))","user":"5c316de5e4b0d62ef62d9f2b"},{"code":"(fn ! [x] \n  (if (= (count x) 2) (first x) (! (rest x))))","problem":20,"user":"4f030bd1535dcb61093f6a4b"},{"problem":20,"code":"#(loop [x %] (if (empty? x) nil (let [xr (rest x)] (if (empty? (rest xr)) (first x) (recur xr)) ) ))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [seq]\r\n  (second (reverse seq)))","problem":20,"user":"4e1123c7535d04ed9115e7c4"},{"code":"(fn [ls] (nth ls (dec (dec (count ls)))))","problem":20,"user":"4f03ba9c535dcb61093f6b58"},{"code":"(fn [r] (nth r (- (count r) 2)))","problem":20,"user":"51a132cee4b0b292b01ee3ff"},{"problem":20,"code":"#(-> % vec reverse rest first)","user":"55e274b4e4b050e68259b436"},{"code":"(fn mypenum [l]\n  (if (= (rest (rest l)) '())\n      (first l)\n      (mypenum (rest l))))","problem":20,"user":"4ecaf637535d6d7199dd370c"},{"code":"(fn [x] (second (rseq (vec x))))","problem":20,"user":"4edab06d535d10e5ff6f5310"},{"code":"(fn l [xs]\n   (let [c (count xs)]\n     (if (> c 2)\n       (l (rest xs))\n       (first xs))))","problem":20,"user":"4f7251eee4b07046d9f4f02e"},{"code":"(fn [x]\n  (nth \n   x (- (count x) 2)\n   )\n )","problem":20,"user":"51d07a8be4b0e42293a2257e"},{"code":"(comp  first rest reverse)","problem":20,"user":"4f0e7f7b535d0136e6c22325"},{"code":"(fn penultimate [myseq] (first (rest (reverse myseq))))","problem":20,"user":"511a9fc2e4b0c87c59c96709"},{"code":"(fn penultimate[xs]\r\n  (if(= 1 (count(rest xs)))\r\n    (first xs)\r\n    (penultimate(rest xs))))","problem":20,"user":"4ee032a9535d10e5ff6f534f"},{"code":"(fn\n  [l]\n  (nth l (dec (dec (count l)))))","problem":20,"user":"52c00263e4b07a9af579233f"},{"problem":20,"code":"(fn [coll]\n  (nth coll\n    (- (count coll) 2)\n       )\n  )","user":"58775496e4b01531a375ea9a"},{"problem":20,"code":"(fn [lst] (first (take-last 2 lst)))","user":"54bbe505e4b0ed20f4ff6ec5"},{"code":"(fn penultimate [[a b & others]]\n  (if (empty? others)\n    a\n    (recur (conj others b))))","problem":20,"user":"4efa3d4b535dced4c769f270"},{"problem":20,"code":"(fn penultimate \n  [[first-elem second-elem & tail]]\n  (if (empty? tail)\n    first-elem\n    (penultimate (conj tail second-elem))))","user":"54311d60e4b0dad94371f2e2"},{"code":"(fn [s]\n  (if (= (count s) 2)\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4ea67906535d7eef308072e4"},{"problem":20,"code":"(fn tmp [seq]\n  (if (= 2 (count seq))\n    (first seq)\n    (tmp (rest seq))))","user":"59aeff12e4b0e1f4e384c8af"},{"code":"(fn penultimate [xs]\n  (if (empty? (rest (rest xs)))\n    (first xs)\n    (recur (rest xs))))","problem":20,"user":"517a025ce4b01aacecbecbe6"},{"code":"#(loop [l %\n       cnt (- (count %) 1)] \n   (if(= cnt 1)\n      (first l)\n   (recur (rest l)(dec cnt))))\n\n#_(-> %\n  reverse second)\n\n#_(fn [lst]\n  (second (reverse lst)))\n\n#_(fn my-last[l]\n  (letfn[(helper[l cnt]\n  (if(== 2 cnt)\n      (first l)\n   (recur (rest l)(dec cnt))))]\n  (helper l (count l))))\n\n;;#(second (reverse %))\n;;#(nth % (- (count %)2))","problem":20,"user":"52faf67ce4b047fd55837005"},{"problem":20,"code":"(fn [coll]\n  (let [fst (first coll)\n        fst-tail (rest coll)\n        snd (first fst-tail)\n        snd-tail (rest fst-tail)]\n    (if (empty? snd-tail)\n      fst\n      (recur fst-tail))))","user":"5fb9075ee4b03f550f448224"},{"problem":20,"code":"(fn penultimate [coll]\n(let [tam (count coll)\nindx (- tam 2)]\n(nth coll indx)))","user":"604a3daee4b02d28681c77f2"},{"problem":20,"code":"#(-> (vec %)\n     (nth (- (count %) 2)))","user":"595d224de4b066ee0a44b016"},{"problem":20,"code":"(fn [seq-list] (last (butlast seq-list)))","user":"596aaeefe4b069c0a1a19808"},{"code":"(fn helper [lat]\n  (last (butlast lat)))","problem":20,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"#(.get %1 (- (.size %1) 2))","problem":20,"user":"52efbdaae4b05e3f0be25ed1"},{"problem":20,"code":"(fn [s] (->> s (reverse) (take 2) (drop 1) (first)))","user":"51ecb1e9e4b0bb5070431584"},{"code":"(fn [coll]\n  (let [c (count coll)]\n    (nth coll (- c 2))))","problem":20,"user":"51502056e4b098b221effc25"},{"code":"(fn get-penultimate [collection] (nth collection (- (count collection) 2)))","problem":20,"user":"5383b929e4b06839e8705ee7"},{"problem":20,"code":"(fn [w] (nth (reverse w) 1))","user":"5643e9f1e4b0018b46ad8c04"},{"problem":20,"code":"(fn antepenultieme [coll]\n  (let [[x y & z] coll]\n\t(if (empty? z)\n    \tx\n\t(recur (rest coll)))))","user":"60704214e4b069485764de24"},{"code":"(fn [x]\n  (if (= (count x) 2)\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4fc8b012e4b0ee37620e1838"},{"problem":20,"code":"#((comp peek pop vec) %)","user":"52f625ffe4b047fd55836fb5"},{"problem":20,"code":"(fn f [[x & xs]] (if (empty? (rest xs)) x (f xs)))","user":"5478e57de4b0c51c1f4d72c1"},{"code":"(fn this [l]\n   (first (take-last 2 l))\n)","problem":20,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn penultimate-iter [l] \n  (if (<= (count l) 2) \n    (first l) \n    (penultimate-iter (rest l))))","problem":20,"user":"517531c6e4b07031762f2eea"},{"code":"(fn [liste] \n  (\n    first (pop (reverse liste))\n  )\n)","problem":20,"user":"4f84400de4b033992c121c2e"},{"code":"#( nth (reverse %) 1)","problem":20,"user":"50699475e4b01dc6af13f834"},{"problem":20,"code":"(fn [c] (let [l (count c)] \n          (when (> l 1)\n          (nth c (- l 2))\n          )))","user":"5b0fe3f4e4b0cc2b61a3be14"},{"problem":20,"code":"(fn ([x] (first(drop 1 (reverse x)))))","user":"565322e8e4b0f9d632dd846d"},{"problem":20,"code":"(fn penultimate_element [x]\n  ( if (= 2 (count x))\n    (first x)\n    (penultimate_element (rest x))))","user":"5512c935e4b055c2f668d4b8"},{"problem":20,"code":"(fn sec2last [coll]\n  (loop [l coll]\n    (let [[f] l\n          rst (next (next l))]\n      (if (nil? rst) \n        f\n        (recur (rest l))))))","user":"549f7b51e4b0f3d1d8e70fb1"},{"code":"(fn penul [coll] (second (reverse coll)))","problem":20,"user":"525ef949e4b0cb4875a45dbc"},{"problem":20,"code":"(fn penultimate [xs] (\n    if (= () (rest (rest xs)))\n      (first xs)\n      (penultimate (rest xs))\n  ) \n)","user":"5cc9031ee4b0ccb061962859"},{"problem":20,"code":"#(-> % reverse rest first )","user":"54ce3790e4b057c6fda3a2ab"},{"problem":20,"code":"(fn [x]\n  (loop [items [nil nil] from x]\n    (let [front (first from)\n          prev (items 1)]\n      (cond front (recur [prev front] (rest from))\n            :else   (items 0)))))","user":"5635adeee4b0bfe05bf117c7"},{"code":"(fn h [l] (second (reverse l)))","problem":20,"user":"502d39f8e4b0d96a44ab2032"},{"code":"#(nth (take-last 2 %) 0)","problem":20,"user":"4fae369ae4b081705acca247"},{"code":"(fn [[h & [h1 & t]]] (if t (recur (conj t h1)) h))","problem":20,"user":"53979966e4b0b51d73faaeef"},{"code":"#(last (pop (vec  %)))","problem":20,"user":"52ee9ac7e4b05e3f0be25ec9"},{"problem":20,"code":"(fn [s]\n  (if (> (count s) 2)\n    (recur (rest s))\n    (first s)\n    )\n  )","user":"5dcb7209e4b02b31cc3da3b9"},{"code":"(fn [l]\n  (nth (vec (reverse l)) 1))","problem":20,"user":"500fee8ee4b0981581aecbb0"},{"problem":20,"code":"(fn [x]\n(loop [array x]\n      (if (= (count array) 2)\n       (first array)\n        (recur (rest array)))))","user":"5b3a1c3ce4b02d533a91bbbd"},{"problem":20,"code":"(fn popandpeek [x] (peek (pop (vec x))))","user":"5641f0ede4b08d4f616f5f11"},{"code":"#(first (reduce (fn [a b] [(second a) b]) [0 0] %))","problem":20,"user":"50696bace4b01dc6af13f830"},{"code":"(fn sec-to-last [s] (.get s (- (count s) 2)))","problem":20,"user":"515dc93be4b0c89ed0914af5"},{"code":"(-> #(second (reverse %)))","problem":20,"user":"5161d6bae4b009fba0926e39"},{"problem":20,"code":"(fn [l] \n  (nth l (- (count l) 2)))","user":"5c72c2b9e4b0fca0c16227ab"},{"code":"(fn second-to-last [collection]\n  ((comp first rest reverse) collection))","problem":20,"user":"53713ebee4b0fc7073fd6ead"},{"problem":20,"code":"(fn [coll]\n  (let [x (- (count coll) 2)]\n    (nth coll x)))","user":"5e5fd9f7e4b0fd0acd158681"},{"code":"(fn[x]  (nth x (dec (dec (count x)))))","problem":20,"user":"4ffd92e7e4b0678c553fc3e3"},{"code":"(fn[xs] (if (= (count xs) 2) (first xs) (recur (rest xs))))","problem":20,"user":"525493bbe4b0541d1855b991"},{"code":"(fn [s]\n  (if (and (next s) (next (next s)))\n      (recur (next s))\n      (first s)))","problem":20,"user":"53308604e4b019098a6f8b5f"},{"problem":20,"code":"(fn [a]\n      (if (> (count a) 2)\n        (recur (rest a))\n        (first a)\n      )\n    )","user":"561bf12ce4b064ca9f4b168e"},{"code":"(fn [aseq] (first (rest (reverse aseq))))","problem":20,"user":"5135a74ae4b04ac1f358dd46"},{"problem":20,"code":"(fn \n  [elems] \n  (second\n     (reverse elems)\n  )\n)","user":"5ca6b71de4b048ec896c5be8"},{"problem":20,"code":"#(nth % (if (> (count %) 1) (- (count %) 2)))","user":"569f6ab8e4b0542e1f8d1493"},{"problem":20,"code":"(fn [coll]  (nth coll (dec (dec (count coll)))))","user":"60ad7cbae4b00e9e6653c48f"},{"problem":20,"code":"(fn [seq] (nth seq (- (count seq) 2 )))","user":"5643aed5e4b0018b46ad8bfd"},{"problem":20,"code":"(fn [param]\n  (loop [[x y & xs] param [a & as] param]\n    (if (empty? xs)\n      x\n      (recur as as))))","user":"53de43c1e4b0d874e779ae31"},{"code":"(fn [coll]\r\n  (nth coll (- (count coll) 2)))","problem":20,"user":"4ddee37c535d08e6dec9fddc"},{"code":"(fn [x] (if (= (rest (rest x)) ()) (first x) (recur (rest x))))","problem":20,"user":"539c9d7ee4b0b51d73faaf2d"},{"code":"(fn [x] (nth x (- (count x) 2)))","problem":20,"user":"4dd865e1535d2dad7130b5d7"},{"problem":20,"code":"(fn [sequence]\n  (let [position-of-last-item (count sequence)\n        position-of-second-last-item (dec position-of-last-item)\n        index-of-sought-item (dec position-of-second-last-item)]\n    (nth sequence index-of-sought-item)))","user":"4dce9252535d5973398f92a3"},{"code":"#(first(take-last 2 %))","problem":20,"user":"4fe8c7dbe4b0547ebccb2423"},{"problem":20,"code":"(fn [[n & more]] (if (= 1 (count more)) n (recur more)))","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"#(loop [s % l nil]\n  (if (= (rest s) '())\n      l\n      (recur (rest s) (first s))))","problem":20,"user":"4e8ad247535d65386fec2111"},{"code":"(fn lst [x] (let [[h & t] x] (if (= (count t) 1) h (lst t))))","problem":20,"user":"50b2e824e4b03ea880433567"},{"code":"(fn sl [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (sl (rest x))))","problem":20,"user":"527160ffe4b03e8d9a4a73ee"},{"problem":20,"code":"(fn\n  [array]\n  (if (get array(- (count array) 2))\n    (get array(- (count array) 2))\n    (nth array(- (count array) 2))))","user":"56451201e4b0284900eef600"},{"code":"(fn penult\n  [foo]\n    (if (= (count foo) 2)\n      (first foo)\n      (penult (next foo))))","problem":20,"user":"4e98a6d0535dbda64a6f6b5e"},{"code":"(comp #(second (reverse %)))","problem":20,"user":"526302eee4b03e8d9a4a70a2"},{"code":"(fn [seq]\n  (let [reversed-seq (reverse seq)]\n    (first (rest reversed-seq))))","problem":20,"user":"4e75edfe535d7a570dd295c7"},{"code":"#(nth %1 (- (count %1) 2) (first %1))","problem":20,"user":"524f4256e4b0541d1855b808"},{"problem":20,"code":"(fn my-fun [in-seq] (-> in-seq (reverse) (second)))","user":"571d9669e4b0145328a7627f"},{"problem":20,"code":"(fn second-last\n  [seq]\n  (if (= (count seq) 2) (first seq)\n    (second-last (rest seq))))","user":"5af28872e4b0cc2b61a3bc6f"},{"problem":20,"code":"(fn avant-dernier [x] (last(butlast x)))","user":"5aa81536e4b0d174b936c8c3"},{"problem":20,"code":"#(first (reduce (fn [[_ x] y] [x y]) [nil nil] %))","user":"52bba119e4b07a9af57922ea"},{"code":"(fn [inputList] (second (reverse inputList)))","problem":20,"user":"4edebfbd535d10e5ff6f533b"},{"code":"(fn[x] (last (butlast x)))","problem":20,"user":"4e9fde3c535d7eef3080729b"},{"code":"(fn [s] (nth s (dec ( dec (count s)))))","problem":20,"user":"534278eee4b00652c8746edd"},{"code":"(fn penul [coll]\n  (if (= 2 (count coll)) (first coll) (penul (rest coll))))","problem":20,"user":"4ec34578535dcc7ae8597d51"},{"problem":20,"code":"(fn penult [s] (first (rest (reverse s))))","user":"5540a10ce4b0a04f79299503"},{"problem":20,"code":"(fn [MySecondtoLast] (second (reverse MySecondtoLast)))","user":"55769940e4b05c286339e070"},{"code":"(fn [x] (first (rest (reverse  x))))","problem":20,"user":"51f75836e4b06ff1c25c52d6"},{"problem":20,"code":"; (comp second reverse)\n\n(comp first rest reverse)","user":"5543ef94e4b0a04f79299526"},{"code":"(fn [s]\n  (if (nnext s)\n    (recur (next s))\n    (first s)))","problem":20,"user":"4e71cc2e535d5021c1a89652"},{"problem":20,"code":"(fn k\n  [sequ]\n  (nth (reverse sequ) 1))","user":"54f36b36e4b050824f58f5c2"},{"problem":20,"code":"(fn [seq] (last (butlast seq)))","user":"554dff83e4b00713264bd98d"},{"problem":20,"code":"(fn [x] (if (<(count (vec x)) 2) nil ((vec x) (- (count (vec x)) 2))))","user":"5800f46ce4b0a837a8b30c49"},{"problem":20,"code":"(fn\n  [llist]\n  (if (next (next llist)) (recur (next llist)) (first llist)))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":20,"code":"(fn [vs] (nth vs (- (count vs) 2)))","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(fn [xs]\n  (last (butlast xs)))","problem":20,"user":"504ac372e4b0b12125b92627"},{"problem":20,"code":"#(first(drop (dec (dec (count %))) %))","user":"594cdbc1e4b07ddc2dafae75"},{"code":"(fn penultimate\n  [thing]\n    (let [tail (rest thing)]\n      (if (= (rest tail) ())\n        (first thing)\n        (recur tail))))","problem":20,"user":"4e55958a535d8a8b8723a27e"},{"problem":20,"code":"(fn [x] ((into [] x) (- (count x) 2)))","user":"597463dae4b01722bebd4caf"},{"problem":20,"code":"(fn [l] \n  (if (= (count l) 2)\n    (first l)\n    (recur (rest l))))","user":"539043e7e4b0b51d73faae97"},{"problem":20,"code":"#(loop [col %\n         prev (first col)]\n    (if (empty? (rest col))\n      prev\n      (recur (rest col) (first col))))","user":"545b486ae4b01be26fd7464f"},{"code":"(fn [x](first(rest (reverse x))))","problem":20,"user":"4fe3338ee4b0e8f79898fea8"},{"problem":20,"code":"(fn [listValue] (first (rest (reverse listValue))))","user":"58cf8f97e4b03c36ff7e58b7"},{"code":"(fn [x]\n\t(if (= (count (rest x)) 1) \n\t\t\t(first x) \n\t\t\t(recur (rest x))))","problem":20,"user":"51794ec2e4b0684c1c981a45"},{"problem":20,"code":"(fn [seq] (nth seq (dec (dec (count seq)))))","user":"57462a4de4b009280f9f2b5d"},{"problem":20,"code":"#((vec %) (dec \n          (dec \n           (count%)\n           )\n          )\n )","user":"580f9be3e4b0f478707a05b7"},{"code":"(fn [list] (nth list (- (count list) 2 ) ))","problem":20,"user":"4faf97d8e4b081705acca258"},{"problem":20,"code":"#(let [length (count %)] (nth % (- length 2)))","user":"542b764ae4b0dad94371f28d"},{"code":"(comp second vec reverse)","problem":20,"user":"4f24b023e4b0d66497709fee"},{"code":"(fn [[start & therest]] (if (= (count therest) 1) start (recur therest) ))","problem":20,"user":"510ce3cbe4b078ea71921127"},{"code":"(fn [xs]\n  (first (drop (- (count xs) 2) xs)))","problem":20,"user":"52e24a16e4b09f7907dd1430"},{"problem":20,"code":"(fn [s] \n  (nth s \n       (- \n        (count s) \n        2\n       )\n  )\n)","user":"550ec1ffe4b06e50f9beb16a"},{"problem":20,"code":"(fn [z] \n  (reduce \n   (fn [x y] y) \n   (filter \n    #(not \n      (=(last z) %)\n      )\n    z\n   ) \n  )\n)","user":"55a4b9a2e4b0acc240e31548"},{"problem":20,"code":"#(let [len (count %)]\n   (nth % (- len 2)))","user":"5b576216e4b02d533a91bd58"},{"problem":20,"code":"( fn [x] (second (reverse x)))","user":"5aa15ec0e4b0d174b936c848"},{"problem":20,"code":"(fn my-second-last [s]\n  (last (remove #(= (last s) %) s)))","user":"6065755ee4b069485764ddcc"},{"problem":20,"code":"(fn second-last [x] \n  (nth x (- (count x) 2))\n  )","user":"55180900e4b06a49daca83c8"},{"problem":20,"code":"#(second ( reverse % ))","user":"5b04662ce4b0cc2b61a3bd75"},{"problem":20,"code":"(fn [xs]\n   (if (= '() (rest (rest xs))) (first xs) (recur (rest xs))))","user":"55a19e19e4b0acc240e31515"},{"code":"(fn sameshit [seq]\n  (loop [sq seq]\n    (if (= (count sq) 2)\n      (first sq)\n      (recur (rest sq)))))","problem":20,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [l]\n  (.get (reverse l) 1))","problem":20,"user":"51e2ee61e4b0c611d6113e3a"},{"code":"(fn [arr]\n(nth arr (- (count arr) 2))\n  )","problem":20,"user":"52f0f3e5e4b05e3f0be25ee7"},{"code":"(fn pe [x] (if (= (count x) 2) (first x) (pe (rest x))))","problem":20,"user":"4e6fee9e535d5021c1a8962a"},{"problem":20,"code":"(fn \n  [l]\n  (if (nil? (first (rest (rest l))))\n    (first l)\n    (recur (rest l))))","user":"59d37e3de4b0ef0a1e9b5bb9"},{"code":"#(nth(reverse %)1)","problem":20,"user":"50509b47e4b0a02f9cffdebe"},{"code":"#(first (reduce (fn [[p0 p1] x] [p1 x]) [nil nil] %))","problem":20,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn [lst] (second (reverse lst)))","problem":20,"user":"4ded56bb535d08e6dec9fe0b"},{"problem":20,"code":"(fn [l] (\n         .get \n         \tl \n         \t(- \n             \t(count l)\n             \t2\n             )\n         )\n)","user":"54835065e4b0e286459a118c"},{"code":"(fn[xs] (second(reverse xs)))","problem":20,"user":"5360e12ce4b0243289761e3a"},{"problem":20,"code":"(fn penu [[fst & rst]] (if (= 1 (count rst)) fst (penu rst)))","user":"5747e22ce4b009280f9f2b7c"},{"problem":20,"code":"(fn stl [coll]\n\t(nth coll (- (count coll) 2))\n)","user":"5697d946e4b0542e1f8d142a"},{"code":"(partial (fn [n s]\n  (loop [r (reverse s) i n]\n    (if (zero? i)\n      (first r)\n      (recur (rest r) (dec i))))) 1)","problem":20,"user":"4e6f1b7a535d5021c1a89618"},{"problem":20,"code":"(fn [x] (nth x (- (count x)\n                   2)))","user":"5dbf6016e4b0e59a23173d79"},{"problem":20,"code":"(fn[c] (-> c reverse rest first))","user":"54b10d08e4b09f271ff37d18"},{"problem":20,"code":"( fn secondlast [x] (second (reverse x)))","user":"5841872be4b089d5ab817e06"},{"problem":20,"code":"(fn get-second-to-last [n]\n  (if (<= (count (rest n)) 1) (first n)\n    (get-second-to-last (rest n))))","user":"56278266e4b00e49c7cb47d3"},{"problem":20,"code":";#(nth % (- (count %) 2))\n;#(last (butlast %))\n(comp last butlast)","user":"5f6caa19e4b02876ed9fd056"},{"code":"#(last (drop-last %1))","problem":20,"user":"4e4ad154535dc968683fc4d1"},{"problem":20,"code":"(fn [l] (first(rest (reverse l))))","user":"5146cac9e4b04ef915e3731c"},{"code":"(fn [x] (if (= 2 (count x)) (first x) (nth x (- (count x) 2))))","problem":20,"user":"50ff5887e4b017584cb41ccd"},{"problem":20,"code":"(fn [l]\n  (second\n    (reverse l)))","user":"564452d1e4b0018b46ad8c0d"},{"code":"(fn [x]   (first (rest (reverse x)) ))","problem":20,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn penult [[x & xs]]\n  (if (empty? (rest xs))\n    x\n    (recur xs)))","problem":20,"user":"4e4c238f535dc968683fc4dc"},{"problem":20,"code":"(fn pen [sq]\n  (if (= 1 (count (rest sq)))\n    (first sq)\n    (pen (rest sq))))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn [seqs] (first (rest (reverse seqs))))","problem":20,"user":"50f69a3ce4b0035e89151844"},{"problem":20,"code":"(fn [coll]\n  (loop [remaining coll]\n    (if (= 2 (count remaining))\n        (first remaining)\n        (recur (rest remaining)))))","user":"5f665d45e4b02876ed9fd02f"},{"code":"(fn [_] (last (butlast _)))","problem":20,"user":"53402a19e4b085b17e897da5"},{"code":"(fn second-to-last [s]\r\n        (if ( > (count (next s)) 1)\r\n          (recur (next s))\r\n          (first s)))","problem":20,"user":"4de27757535d08e6dec9fdea"},{"problem":20,"code":"(fn [x] (if (nil? (next (next x)))\n(first x)\n(recur (rest x))))","user":"55cf0d0ee4b0e31453f64a2b"},{"problem":20,"code":"(fn [l]\n  (if (>= 2 (count l))\n    (first l)\n    (recur (rest l))))","user":"5405fdcce4b0addc1aec6683"},{"problem":20,"code":"(fn [s] \n  (let [ss (if (vector? s) s\n               (reverse s) ) ]\n        (peek (pop ss) ) ) )","user":"5e23dacee4b05b4b01516146"},{"code":"(fn[a] (first (take-last 2 a)))","problem":20,"user":"5002c798e4b0678c553fc42d"},{"code":"#( if (next (next %1)) (recur (next %1)) (first %1))","problem":20,"user":"539c9e26e4b0b51d73faaf2e"},{"code":"(fn l [lst] (if (empty? (rest (rest lst))) (first lst) (l (rest lst))))","problem":20,"user":"51607eb0e4b009fba0926e27"},{"code":"(fn almost-last\n [arr]\n (let [others (rest arr)]\n   (if (= (count others) 1)\n     (first arr)\n     (almost-last others))))","problem":20,"user":"52b4d8fae4b0c58976d9ad33"},{"code":"(fn [s]\n    (if (= (count s) 2)\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4ec92a04535d6d7199dd36fa"},{"code":"(fn [l] (nth (take 2 (reverse l)) 1))","problem":20,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":20,"code":"(fn penum [x]\n  (if (not (next (next x)))\n    (first x)\n    (penum (next x))))","user":"5c6314c5e4b0fca0c1622658"},{"problem":20,"code":"(fn [c] \n  (let [p (- (count c) 2)]\n    (nth c p)))","user":"59fd069ae4b01bb0ae8afcf4"},{"code":"#( second (reverse % ))","problem":20,"user":"4e7d13c3535db169f9c796c4"},{"problem":20,"code":"(fn [[s b & rest]]\n  (if rest\n    (recur (cons b rest))\n    s))","user":"571d3fa3e4b0145328a7627a"},{"problem":20,"code":"(fn [elements]\n  (loop [[first & temp] elements\n          remaining (rest temp)]\n    (if (empty? remaining)\n      first\n      (recur temp (rest remaining)))))","user":"56822f37e4b0945ebc182a8d"},{"problem":20,"code":"#( nth (reverse %) 1 )","user":"5b28cf92e4b063e2438bcc56"},{"code":"(fn [x] (nth  x (-(count x)2) ))","problem":20,"user":"52693472e4b03e8d9a4a71db"},{"problem":20,"code":"(fn [items]\n  (last (butlast items)))","user":"579816abe4b039eba2ecb10d"},{"problem":20,"code":"(fn [arr](let [[first second & rest] (reverse arr)] second))","user":"551c8c81e4b07993ea3788e1"},{"code":"(fn [collection] (second (reverse collection)))","problem":20,"user":"517a995de4b01aacecbecbef"},{"problem":20,"code":"(fn rmylast\n                  [coll]\n                  (if (= (count coll) 2)\n                    (first coll)\n                    (recur (rest coll))\n                    ))","user":"55079e55e4b021ccfedb96aa"},{"problem":20,"code":"; (fn [l] (first (rest (reverse l))))\n#(second (reverse %))","user":"5d83b9aae4b0915913b1d386"},{"code":"(fn hoge [lst]\n  (if (= (count lst) 2) (first lst)\n    (hoge (rest lst))))","problem":20,"user":"4e2e6460535deb9a81d77f0b"},{"code":"(fn [vect] \n  (nth vect (- \n             (count vect) \n             2)\n       )\n  )","problem":20,"user":"5272d528e4b03e8d9a4a7454"},{"problem":20,"code":"(fn seclast[x]\n   (nth  x (-(count x) 2) ))","user":"56c1f470e4b0839206b9d68c"},{"problem":20,"code":"(fn get-second-to-last [col]\n  (if (= (count col) 2)\n    (first col)\n    (get-second-to-last (rest col))))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn [ l]  (first (rest(reverse l))) )","problem":20,"user":"4e7cf07f535db169f9c796c2"},{"problem":20,"code":"(fn penultimate [object] (nth object (- (count object) 2)))","user":"552689cfe4b0ffed3738f91e"},{"problem":20,"code":"(fn [s] \n  (let [[a b & r] s]\n    (if (nil? r)\n      (when b a)\n      (recur (rest s)))))","user":"571d063ee4b0145328a76272"},{"problem":20,"code":"(fn [xs] (\n         loop [[x0 x1 & xs] xs]\n              (if (empty? xs) \n                  x0\n                  (recur (conj xs x1)))))","user":"5c2ca8ebe4b0d62ef62d9ee7"},{"code":"(fn f [[_1 _2 & r]]\n  (if (empty? r)\n    _1\n    (f (conj r _2))))","problem":20,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":20,"code":"(fn lastMine [lst] (nth (seq lst) (- (count lst) 2)))","user":"5c82db41e4b0c8042a70ce42"},{"problem":20,"code":"(fn [xs] (first(drop 1 (reverse xs))))","user":"55f01316e4b06e875b46ce1a"},{"problem":20,"code":"#(first (comp (rest (reverse %))))","user":"58b8a3eae4b0888cdc949cb7"},{"code":"#(->> (reverse %) (rest) (first) )","problem":20,"user":"4f0b0116535d0136e6c222fd"},{"problem":20,"code":"(fn [seq] \n  (if (empty? (rest (rest seq)))\n  \t(first seq)\n   (recur (rest seq))))","user":"555c78abe4b0b056612e224f"},{"code":"#(.get %  (dec (dec (count %))))","problem":20,"user":"52447ff4e4b0d8acf9ed6aa4"},{"code":"#(nth %  (- (count %) 2))","problem":20,"user":"50523f4ee4b0a561d07d8f1b"},{"problem":20,"code":"#(loop [[a & r] %]\n   (if (nil? (next r))\n     a\n     (recur r)))","user":"5c9c79a6e4b048ec896c5ae8"},{"problem":20,"code":"( fn foo [s]\n  \t( if (= (count s) 2)\n    \t(first s)\n      \t(foo (rest s))\n    )\n)","user":"577d3feee4b0c8d87281f6d2"},{"problem":20,"code":"(fn ok [a]\n  (let [b (count a)\n        c (- b 2)]\n    (nth a c)))","user":"5ca26d3be4b048ec896c5b98"},{"problem":20,"code":"(fn [list1]\n  (get (into [] list1) (- (count list1) 2)))","user":"5d4d46aae4b0776584bd6f3a"},{"problem":20,"code":"(fn [x] (nth (seq x) (- (count x) 2)))","user":"5d03944de4b0cc9c915881c5"},{"code":"(fn [x] ( first (pop (reverse x))))","problem":20,"user":"52b1bfade4b0c58976d9ace2"},{"problem":20,"code":"#(let [v (vec %)\n       len (count v)\n       second-last (- len 2)]\n   (get v second-last))","user":"5f63d73de4b02876ed9fd017"},{"problem":20,"code":"(fn [x] (nth x ( - (count x) 2) ) )","user":"561f27a1e4b064ca9f4b16ca"},{"problem":20,"code":"(fn [x] (nth x(dec (dec (count x)))))","user":"4f33f31fe4b0e243712b1eb2"},{"code":"(fn [vec] (loop [vec vec] (if (empty? (rest (rest vec))) (first vec) (recur (rest vec)))))","problem":20,"user":"521f24ebe4b0e6c71e0c0bcd"},{"problem":20,"code":"(fn secondLast [list]\n  (if (= (.size list) 2) \n    (first list)\n    (secondLast (rest list))))","user":"56128c54e4b05f002753df93"},{"code":"(fn [lst] \n  (second (reverse lst)))","problem":20,"user":"4e964f4a535dbda64a6f6b42"},{"problem":20,"code":"(fn pen [seq]\n  (if (empty? (rest (rest seq)))\n    (first seq)\n    (pen (rest seq))))","user":"5f80aca4e4b0c071e6c840e8"},{"code":"#(first (rest (reverse%)))","problem":20,"user":"4e4aaf49535dc968683fc4ce"},{"problem":20,"code":"(fn [s] (if (<= (count s) 2) (first s) (recur (rest s))))","user":"543043dee4b0dad94371f2d8"},{"code":"(fn [[a b & rest]] (if rest (recur (cons b rest)) a))","problem":20,"user":"50c24da6e4b0f056eabae53d"},{"problem":20,"code":"(fn x [[h & t]] (if (= (count t) 1) h (x t)))","user":"52577f15e4b0cb4875a45c88"},{"problem":20,"code":"#( (fn [[x y &z]] (identity y)) (reverse %))","user":"5d2ca236e4b01671435dbc94"},{"problem":20,"code":"(fn [a-seq] (first (rest (reverse a-seq))))","user":"595fd77ce4b066ee0a44b06f"},{"problem":20,"code":"(fn [listy] (first (rest (reverse listy))))","user":"54f09599e4b024c67c0cf89d"},{"problem":20,"code":"(fn f [x]\n  (if (= 2 (count x))\n    (first x)\n    (f (rest x))))","user":"56f85849e4b08e7d20b96836"},{"problem":20,"code":"(fn [x] (nth x (+ -2 (count (seq x)))))","user":"5de630d1e4b0948ae9d9ae23"},{"problem":20,"code":"#(-> % \n     reverse \n     rest \n     first)","user":"553f405ce4b0a04f792994f6"},{"problem":20,"code":"(fn pen [s]\n  (if (= (count s) 2)\n  \t(first s)\n  \t(pen (rest s))))","user":"561d506ee4b064ca9f4b16aa"},{"problem":20,"code":"(fn my-penult [[x y & xs]] \n  (if (nil? xs)\n    x\n    (recur (cons y xs))))","user":"5cab33e7e4b048ec896c5c48"},{"code":"(fn [s] (if (= (count s) 2)\n            (first s)\n            (recur (next s))))","problem":20,"user":"4e00af25535d04ed9115e78e"},{"code":"#(.get % (-(count %) 2))","problem":20,"user":"52d3e0ece4b00ebca2f8465d"},{"code":"(fn penultimate [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"4ecbff2f535df97575fdabe4"},{"problem":20,"code":"#(->> %\n    reverse\n    second)","user":"5974c454e4b01722bebd4cb5"},{"code":"(fn [items] (nth items (- (count items) 2)))","problem":20,"user":"4e7d2686535db169f9c796c9"},{"problem":20,"code":"(fn \n  [seq]\n  (loop [el (first seq)\n         remain (rest seq)\n         ]\n    (if (= (count remain) 1)\n      el\n      (recur (first remain) (rest remain))\n   )\n)\n)","user":"5ccaed31e4b0ccb061962877"},{"problem":20,"code":"(fn getSecondToLast [x] (second (reverse x)))","user":"58597562e4b0f14aab7c8734"},{"code":"(fn getp [aseq] (if (empty? (rest (rest aseq)))\n                  \t(first aseq)\n                  \t(getp (rest aseq))))","problem":20,"user":"51bf4560e4b013aa0d74b817"},{"problem":20,"code":"(fn [things] (second (reverse things)))","user":"57d2004ce4b0bd073c202374"},{"code":"#(first (next(reverse %)))","problem":20,"user":"52308c4ce4b0035e815da389"},{"code":"(fn penultimate [ls]\n  (last (butlast ls)))","problem":20,"user":"52361d84e4b05f3be1c7c8e5"},{"problem":20,"code":"(fn [lst] (->> lst reverse (take 2) (drop 1) first))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":20,"code":"(fn [seq]\n  ( nth seq (- (count seq) 2)))","user":"5e8308abe4b09a7a73c8bbb4"},{"code":"(fn [coll] (if (next (rest coll))  (recur (rest coll)) (first coll)))","problem":20,"user":"4e131443535d04ed9115e7d3"},{"code":"(fn [s]\n  (loop [c (count s)\n        sp s\n        f (first s)]\n    (if (= c 2)\n      f\n      (recur (dec c) (next sp) (fnext sp)))))","problem":20,"user":"4efb92ce535dced4c769f27a"},{"problem":20,"code":"(fn \n  [x] \n  (loop [xs x ans nil] \n    (if (next xs)\n      (recur (next xs) (first xs))\n      ans)))","user":"57894e30e4b0ebec4cfb752b"},{"code":"(fn [s] \n  (nth s (- (count s) 2))\n  )","problem":20,"user":"521bf7cfe4b0c4ef0be83066"},{"code":"(fn second-to-last [l] (first(take-last 2 l)))","problem":20,"user":"4e28ddd1535deb9a81d77efd"},{"problem":20,"code":"#(let [v (vec %)]\n   (get v (- (count v) 2)))","user":"54c5e36ee4b045293a27f626"},{"problem":20,"code":"(fn penultimate [[first-item & remaining]]\n  (if (= 1 (count remaining))\n    first-item\n    (recur remaining)))","user":"5f21ffa2e4b0f565ad998289"},{"code":"(fn my-second[x] (first (rest (reverse x))))","problem":20,"user":"50c95c4fe4b0bed41a12298f"},{"problem":20,"code":"(fn [l] (let [c (count l)] (nth l (- c 2) )))","user":"55d614c0e4b0e31453f64a95"},{"problem":20,"code":"(fn last-element\n  [sequence-in]\n  (nth sequence-in \n       (- (count sequence-in) 2)))","user":"53de4bdae4b0d874e779ae32"},{"problem":20,"code":"(fn[args](second(reverse args)))","user":"5939b9f9e4b069cdc2982b3d"},{"problem":20,"code":"(fn [current-sequence] (second (reverse current-sequence)))","user":"5605a1ffe4b08b23635d316a"},{"problem":20,"code":"(fn [lat] (first (take-last 2 lat)))","user":"57f7d381e4b0d3187e900906"},{"problem":20,"code":"(fn l [coll] (if (= (count coll) 2) (first coll) (l (rest coll))))","user":"55264e02e4b0ffed3738f919"},{"code":"(fn [[x & more]] (if (= (count more) 1) x (recur more)))","problem":20,"user":"50ef56dfe4b0bdaecbb47d94"},{"code":"(fn [inlist]\n  (if (= (count inlist) 2) (first inlist)\n  (if (< (count inlist) 2) (0)\n  (recur (rest inlist)))))","problem":20,"user":"4fc50bcbe4b081705acca375"},{"problem":20,"code":"(fn\n  [lista]\n  (first (rest (reverse lista))))","user":"5b250c93e4b063e2438bcc22"},{"code":"(fn [x] (-> (reverse x) rest first))","problem":20,"user":"506755b3e4b03d366d7cb2bc"},{"problem":20,"code":"(fn [x]\n  (first (rest (reverse x)))\n  )","user":"5ed30cb6e4b016b56eae05c2"},{"code":"(fn f [x] (if (= 2 (count x)) (first x) (f (rest x))))","problem":20,"user":"503917a0e4b088a6a14ca763"},{"problem":20,"code":"#(get (vec  %) (- (count %) 2) )","user":"5ffbc965e4b074f607df65ea"},{"problem":20,"code":"(fn [xs] (if (next (rest xs)) (recur (rest xs)) (first xs)) )","user":"555b43dfe4b0deb715856e4d"},{"problem":20,"code":"(fn [aMap] (\n\tnth aMap (- (count aMap) 2)\n))","user":"603a4837e4b0d5df2af222f6"},{"code":"#(->> % (reduce (fn [[x y] z] [y z]) []) first)","problem":20,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn penultimate [seq] (second (reverse seq)))","problem":20,"user":"50506dcce4b0a02f9cffdebc"},{"code":"(fn getlast [alist] (first(rest (reverse alist))))","problem":20,"user":"4eeb8f68535d93acb0a668a9"},{"problem":20,"code":"(fn [coll] (-> coll reverse second))","user":"530ec239e4b08068f379ecc1"},{"problem":20,"code":"(fn vorla [li] (if (= 2 (.size li)) (first li) (vorla (rest li))))","user":"5b20134de4b03cfeda66ed2d"},{"problem":20,"code":"(fn mpenultimate [x] \n  (nth x (- (count x) 2)))","user":"5a42dbbbe4b0447ef91cc5fd"},{"problem":20,"code":"(fn [[x y & xs :as coll]] (if (seq xs) (recur (rest coll)) x))","user":"55597b84e4b0deb715856e36"},{"problem":20,"code":"(fn [items] ((comp last butlast) items))","user":"52c5d094e4b0c2d177d620ff"},{"problem":20,"code":"(fn [coll] (loop [x (first coll)\n                     prev x\n                     xs (rest coll)]\n                (if (empty? xs)\n                  prev\n                  (recur (first xs) x (rest xs)))))","user":"56e11125e4b03a7c14b85a1f"},{"code":"#(->> % (reverse) (rest) (first))","problem":20,"user":"51fa90aae4b0f1313d4689e0"},{"problem":20,"code":"(fn[a] (second (reverse a)))","user":"55f1f29be4b06e875b46ce3c"},{"problem":20,"code":"(fn [x] (nth x ( - (count x ) 2 )))","user":"5613f727e4b05f002753dfab"},{"problem":20,"code":"(fn ([x [head & tail]]\n  (if (= nil tail)\n    x\n    (recur head tail)))) nil","user":"557ca912e4b05c286339e0c8"},{"problem":20,"code":"(fn [[x1 x2 & xs]]\n    (if (empty? xs) x1 (recur (cons x2 xs))))","user":"54b07c1ee4b09f271ff37d16"},{"problem":20,"code":"(fn myrest [x] (second (reverse x)))","user":"5b3bb2e8e4b02d533a91bbd9"},{"problem":20,"code":"#(nth % (- (count %) 2))\n;(fn [x] (nth x (- (count x) 2)) )","user":"5d37087ae4b01671435dbd2e"},{"problem":20,"code":"(fn me [xs]\n  (case (count xs)\n    0 nil\n    1 nil\n    2 (first xs)\n    (me (rest xs))))","user":"596296e9e4b066ee0a44b0b6"},{"problem":20,"code":"(fn [l] (second (reduce (fn [r p] (take 2 (conj r p))) '() l)))","user":"4f24c859e4b0d66497709fef"},{"code":"(fn penultimo [sett] (if (= (count sett) 2) (first sett) (penultimo (drop 1 sett))))","problem":20,"user":"52ea19ace4b09f7907dd14b7"},{"problem":20,"code":"(fn lastElem [coll] (second (reverse coll)) )","user":"5be2e5b2e4b0ed4b8aab4ccb"},{"code":"(fn [x] (first (drop 1 (reverse x))))","problem":20,"user":"4ef8d47c535dced4c769f261"},{"problem":20,"code":"(fn [[i & j]]\n  (if (= 1 (count j))\n    i\n    (recur j)))","user":"57a2bb9be4b0c3d858beb905"},{"problem":20,"code":"(fn [x](nth x (-(count x) 2)))","user":"56879ea4e4b0dcc4269f405f"},{"code":";#(nth % (- (count %) 2))\n(comp first rest reverse)","problem":20,"user":"4f4a03cce4b0d56e7bb92c03"},{"problem":20,"code":"(fn [x] (loop [lst (next x)\n               result (first x)]\n          (if (next lst)\n            (recur (next lst) (first lst))\n            result\n            )\n          )\n  )","user":"5564c2d3e4b0c656e3ff180e"},{"code":"(fn [[a & others]] (if (> (count others) 1) (recur others) a))","problem":20,"user":"4fe93c6ae4b0547ebccb2450"},{"code":"(fn [list] (-> list reverse rest first))","problem":20,"user":"506c8116e4b0a302964c548a"},{"problem":20,"code":"#(if (= 2 (count %))\n      (first %)\n      (recur (rest %)))","user":"5908882de4b047aa04b19979"},{"problem":20,"code":"(fn [n] (nth (drop (- (count n) 2) n) 0))","user":"5668aad0e4b04acd4f672df5"},{"problem":20,"code":"#(if (== 2 (count %)) (first %) (recur (rest %)))","user":"5c950334e4b048ec896c5a44"},{"problem":20,"code":"(fn [x] \n  (nth x  \n       (- (count x) 2)\n  )\n)","user":"57741d00e4b0979f896515f7"},{"problem":20,"code":"(fn penultimo [x] \n  (nth x (- (count x) 2)))","user":"562eafbce4b0ab312c17ebbe"},{"problem":20,"code":"(fn [seq]\n  (loop [seq seq]\n    (if (-> seq next next empty?)\n      (first seq)\n      (recur (next seq)))))","user":"537cb3ade4b06839e8705e7d"},{"problem":20,"code":"(fn [coll]\n\t(nth coll (- (count coll) 2)) \n)","user":"5e3b6ae9e4b01d43a70e8df4"},{"problem":20,"code":"(fn [a]\n  (if (= (count a) 2) (first a) (recur (rest a)))\n  )","user":"5c6f0755e4b0fca0c162275d"},{"code":"#(nth %1 \n  (- (count %1) 2)\n)","problem":20,"user":"4e94a900535dbda64a6f6b18"},{"code":"(fn [se] (first (rest (reverse se))))","problem":20,"user":"4df407c3535d08e6dec9fe2e"},{"code":"#(nth % (-  (count %) 2))","problem":20,"user":"52fa5bbfe4b047fd55836ff9"},{"problem":20,"code":"(fn [items]\n  (nth items (- (count items) 2)))","user":"57ce6090e4b0c746388ab8ab"},{"code":"(fn [x] (nth x (- (count x ) 2)))","problem":20,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":20,"code":"(fn ultimo\n  [lst]\n  (nth lst (- (count lst) 2)))","user":"59e778aae4b0249b72820716"},{"problem":20,"code":"(fn second-last [xs] (if (= (count xs) 2) (first xs) (second-last (rest xs))))","user":"5e30dbd5e4b05b4b0151621d"},{"problem":20,"code":"(fn penultimate [s] (second (reverse s)))","user":"5eea5c98e4b029a2061bbebf"},{"problem":20,"code":"(fn [lst]\n  (-> lst reverse rest first))","user":"5838337de4b089d5ab817d24"},{"problem":20,"code":"#(nth % (-(count % )2))","user":"5799dac9e4b05b1deef9adcd"},{"code":"(fn [[n & more]] (if (not= (count more) 1) (recur more) n))","problem":20,"user":"523c6fbce4b07becd5be2226"},{"code":"(fn [collec]\n  (last (drop-last collec)))","problem":20,"user":"5235493ee4b05e80434a5064"},{"problem":20,"code":"(fn [arguments] (second (reverse arguments)))","user":"5f10a999e4b091ba50b4dba5"},{"problem":20,"code":"(fn [v] (cond (> (count v) 2) (recur (rest v)) (= (count v) 2) (first v) ))","user":"5756efc3e4b02ea1147992e6"},{"code":"x","problem":20,"user":"52e635b3e4b09f7907dd146f"},{"problem":20,"code":"(fn [xs] (if (= (rest (rest xs)) ()) (first xs) (recur (rest xs))))","user":"56abaf0be4b03c432f187341"},{"problem":20,"code":"(fn [s]\n  (if\n    (empty? (rest (rest s)))\n    (first s)\n    (recur (rest s))\n  )\n)","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":20,"code":"(fn penultimate [coll]\n  (if (next (next coll))\n    (recur (next coll))\n    (first coll)))","user":"59769d75e4b01722bebd4cdd"},{"code":"(fn [x]\n  (cond \n    ((comp next next) x) (recur (next x))\n    (next x) (first x)\n    :else nil))","problem":20,"user":"4e80e0f2535db62dc21a62b8"},{"problem":20,"code":"(fn [l]\n  (first (take-last 2 l)))","user":"5cfb76e0e4b0cc9c91588156"},{"problem":20,"code":"(fn [x]\n  (peek (rest (reverse x))))","user":"53b7c1d2e4b047364c0444d3"},{"problem":20,"code":"(fn [x] (.get (reverse x) 1))","user":"58060dace4b0a837a8b30cd5"},{"code":"(fn last-spec [x]          \n  (if (empty? (rest (rest x)))\n    (first x)\n    (last-spec (rest x))))","problem":20,"user":"50e1d3c9e4b0ae09a0e7de74"},{"problem":20,"code":"(fn [x] (->> x (reverse) (take 2) (last) ) )","user":"594b3459e4b07ddc2dafae23"},{"problem":20,"code":"(fn penultimate-element [elements]\n  (nth elements\n       (- (count elements) 2)))","user":"5576d3c7e4b05c286339e074"},{"problem":20,"code":"(fn [ys] (loop [[x y & ys] ys] (if ys (recur (cons y ys)) x)))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":20,"code":"(fn [x] (second (into (list) x)))","user":"5d00f8c5e4b0cc9c915881a3"},{"code":"(fn penultimate [list] (nth list (- (count list) 2)))","problem":20,"user":"52f9c68ce4b047fd55836fef"},{"problem":20,"code":"(fn penult-elem [seq]\n  (if (== (count seq) 2)\n    (first seq)\n    (penult-elem (rest seq))))","user":"5faece16e4b08cb800c85b02"},{"problem":20,"code":"(fn [a] (first (drop (- (count a) 2) a)))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [s]\n  (if (= (count s) 2) (first s)\n      (recur (rest s))))","problem":20,"user":"4e6a7ec2535d8ccf87e9feec"},{"code":"(fn [l] (nth l (- (count l) 2)))","problem":20,"user":"4e5e8d5d535d8a8b8723a2d1"},{"code":"(fn [e] (nth e (- (count e) 2)))","problem":20,"user":"507d28cfe4b00f5b3a6e1a13"},{"problem":20,"code":"(fn [elems] (first (rest (reverse elems))))","user":"5722d905e4b0c5bde472c0da"},{"code":"( fn [alist] (nth alist (- (count alist) 2)))","problem":20,"user":"504e1ddae4b0f6ff3350c466"},{"code":"(fn [x] \n\t(loop [els x] \n\t\t(cond \n\t\t\t(assert (next els)) true\n\t\t\t(not (nnext els)) (first els) \n\t\t\t:else (recur (next els)))))","problem":20,"user":"5374cbf4e4b06d7f452d9e29"},{"code":"(fn blah [l] (if (= 2 (count l)) (first l) (blah (rest l))))","problem":20,"user":"505f5d8ae4b08f2a82ad10b1"},{"code":"(fn [ls]\n  (loop [st ls]\n    (if (= 1 (count (rest st)))\n      (first st)\n      (recur (rest st)))))","problem":20,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn[coll] (nth coll ( dec (dec (count coll)))))","problem":20,"user":"5267eb51e4b03e8d9a4a718e"},{"problem":20,"code":"(fn my2ndtolast [x] (if (not= '() (rest (rest x))) (my2ndtolast (rest x)) (first x)))","user":"5c704f94e4b0fca0c162277d"},{"problem":20,"code":"#(-> (reverse %) (second))","user":"5ef43ff6e4b07c55ae4a0540"},{"problem":20,"code":"#( second (reverse %) )\n;#(comp second reverse)\n;(fn [L] (nth L (- (count L) 2)))\n;#(last (but-last %) )","user":"54c8336de4b045293a27f648"},{"code":"(fn [xs] \n  (let [[x & more] xs]\n    (if (= (count more) 1)\n      x\n      (recur more))))","problem":20,"user":"519b231ee4b0ac1b7dced6a2"},{"problem":20,"code":"(fn [x] \n      ((fn [y r] \n        (if (next y) \n          (recur (next y) (first y))\n          r)) x nil))","user":"595fea04e4b066ee0a44b076"},{"code":"(fn [s] (nth s (dec (dec (count s)))))","problem":20,"user":"50b8de6ce4b0cba0e598b652"},{"problem":20,"code":"(fn sec_to_last [[x & more]]\n  (if (= 1 (count more))\n    x\n    (recur more)))","user":"58e63de2e4b056aecfd47cad"},{"code":"(fn [a] (if (next (next a))\n           (recur (next a))\n           (first a)))","problem":20,"user":"5011ae8fe4b00ad656b9d982"},{"problem":20,"code":"(fn [X] (last (butlast X)))","user":"601bdcb3e4b0bf4ca6b10930"},{"code":"(fn [col] (nth (reverse col) 1))","problem":20,"user":"4e7aa77c535db169f9c796ac"},{"problem":20,"code":"(fn [i x] (if (= (count x) i) (first x) (recur i (rest x)))) 2","user":"553bc237e4b09218d5f4500a"},{"problem":20,"code":"(fn [x]\n  (let [r (rest x)]\n  \t(if (empty? (rest r))\n    \t(first x)\n    \t(recur r))))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn second-last [s] (last (drop-last s)))","problem":20,"user":"4e8de3a2535d65386fec213d"},{"problem":20,"code":"(fn [l] (if (= (count l) 2)\n            (first l)\n            (recur (rest l))))","user":"57150a8ee4b07c98581c3acb"},{"code":"(fn [vec] (nth vec (- (count vec) 2)))","problem":20,"user":"5220260ae4b0e6c71e0c0c0e"},{"code":"#(let [k (count %1)]\n  (nth %1 (- k 2)))","problem":20,"user":"50a5f72fe4b0aa96157e2611"},{"problem":20,"code":"(fn second-to-last [l] (if (empty? (rest (rest l))) (first l)\n                             (second-to-last (rest l))))","user":"550d54f6e4b06e50f9beb15c"},{"problem":20,"code":"#(if (not (second (rest %)))\n   (first %)\n   (recur (rest %)))","user":"5854580ce4b07779d46863f9"},{"code":"(fn mylast [lst] \n  (if (empty? (rest (next lst)))\n      (first lst)\n      (mylast (next lst)) ))","problem":20,"user":"5180dc04e4b06b8caf33fa01"},{"code":"(fn last2 [seq]\n  (if (= (rest (rest seq)) [])\n       (first seq)\n      (last2 (rest seq))))","problem":20,"user":"4f62b29ce4b0defedf855fd9"},{"problem":20,"code":"(fn [sequence] (last (take (dec (count sequence)) sequence)))","user":"5e6df58ee4b04a83ad7cd297"},{"problem":20,"code":"(fn [lst]\n  (if (and (next lst) (nnext lst))\n    (recur (next lst))\n    (first lst)))","user":"54df2274e4b024c67c0cf7a8"},{"problem":20,"code":"(fn [lst]\n  (first (rest (reverse lst)))\n  )","user":"5f84f110e4b0375e81f54e79"},{"problem":20,"code":"(fn greet [x] (nth x (- (count x) 2)))","user":"5860d82de4b0f14aab7c87de"},{"problem":20,"code":"(fn [v]\n    (if (>= (count v) 2)\n        (nth v (- (count v) 2))\n        nil))","user":"5a640a37e4b0512ff01cd9a2"},{"code":"(fn getLast [l] (if (= (count l) 2) (first l) (getLast (rest l))))","problem":20,"user":"52013494e4b0d7096e99ddb7"},{"problem":20,"code":"(fn second-to-last [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (second-to-last (rest s))))","user":"556873cee4b0c656e3ff1853"},{"problem":20,"code":"#(-> % vec rseq rest first)","user":"4f9dd376e4b0dcca54ed6d27"},{"problem":20,"code":"#(last(take 2 (reverse %1)))","user":"5505d137e4b086ebe8a79c8c"},{"code":"#(last (take (dec (count %)) %))","problem":20,"user":"4f01ff83535dcb61093f6a3a"},{"problem":20,"code":"(fn x [h] (second (reverse h)))","user":"53b544d4e4b047364c0444bd"},{"code":"(fn [l]\r\n  (first (rest (reverse l))))","problem":20,"user":"4df9c598535d04ed9115e77a"},{"problem":20,"code":"(fn [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (recur (rest s))))","user":"56082adae4b046a4fc0ac008"},{"problem":20,"code":"(fn[x] ((comp first rest reverse) x ))","user":"59300b0ee4b072a2710fcfd3"},{"code":"#(nth % (- (count %)  2 ))","problem":20,"user":"504f0c08e4b0e7ad84dbc4b1"},{"code":"(fn [coll] \n  (loop [x (first coll) y (second coll) coll (drop 2 coll)]\n    (if (empty? coll)\n      x\n      (recur y (first coll) (rest coll)))))","problem":20,"user":"4e31a15c535deb9a81d77f1e"},{"code":"#(first (reduce (fn [x y] [(last x) y]) [nil] %))","problem":20,"user":"4ed94d69535d10e5ff6f5303"},{"problem":20,"code":"(fn [aseq] (nth aseq (- (count aseq) 2)))","user":"562739ace4b00e49c7cb47cc"},{"problem":20,"code":"(fn [collec] (second (reverse collec)))","user":"56298649e4b00e49c7cb480d"},{"problem":20,"code":"(fn [x]\n  (let [cnt (count x)]\n    (if (< cnt 2)\n      nil\n      (nth x (- cnt 2)))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":20,"code":"#(loop [coll %]\n   (if (= (count coll) 2)\n     (first coll)\n     (recur (rest coll))))","user":"588c7020e4b05c141a256099"},{"code":"(fn [xs]\n  (if (empty? (rest (rest xs)))\n    (first xs)\n    (recur (rest xs))))","problem":20,"user":"50294c28e4b0b33e9bf6fdef"},{"problem":20,"code":"(fn second-last [s] (nth s (dec (dec (count s)))))","user":"608dbb69e4b03bd49d9f36bb"},{"problem":20,"code":"(fn [s]\n  (loop [s s]\n    (if (= (first (rest s))\n           (last s))\n      (first s)\n      (recur (rest s)))))","user":"56047160e4b0c80df0ca265d"},{"problem":20,"code":"(fn [x]\n  (if (= (count x) 2)\n    (first x)\n    (recur (rest x))\n    )\n  )","user":"52280a26e4b0186687e23a67"},{"problem":20,"code":"(fn do-it [xs] (second(reverse  xs) ))","user":"5e46dd71e4b043cd24807a25"},{"problem":20,"code":"#(\n nth % (- (count %) 2)\n )","user":"5db2534de4b010eb3c36cd15"},{"code":"(fn next-to-last [x] (if (empty? (rest (rest x))) (first x) (next-to-last (rest x))))","problem":20,"user":"504ed58ce4b069badc5a33d2"},{"code":"(fn\n  [seq]\n    (first \n      (rest \n        (reverse seq))))","problem":20,"user":"4ed92fd6535d10e5ff6f5300"},{"problem":20,"code":"(fn [x] (if (= 1 (count (rest x))) (first x) (recur (rest x))))\n;(comp first rest reverse)\n;#(last (butlast %))","user":"5beef257e4b0a6d31fed2137"},{"code":"#(-> (take-last 2 %) first)","problem":20,"user":"5377e4b5e4b06839e8705e40"},{"problem":20,"code":"(fn sec-last [x] \n  (second(reverse x))\n)","user":"57454e25e4b009280f9f2b4a"},{"problem":20,"code":"apply (fn last2 ([x y] x) ([x y & args] (apply last2 y args)))","user":"59e04fc7e4b08badc2a0c4e8"},{"code":"(comp  first rest    reverse)","problem":20,"user":"52ce5056e4b07d0d72b2738f"},{"problem":20,"code":"(fn penultimate [s]\n  (if (= (count s) 2)\n    (first s)\n    (penultimate (rest s))))","user":"56491050e4b0284900eef639"},{"code":"(fn [l]\r\n  (if (= 2 (count l))\r\n    (first l)\r\n    (recur (rest l))))","problem":20,"user":"4dd29ede535dae65d5c462da"},{"code":"(fn penult [s] (second (reverse s)))","problem":20,"user":"4ec2f210535dcc7ae8597d4e"},{"problem":20,"code":"(fn [lista] (nth (reverse lista) 1))","user":"5c3e5227e4b08cd430848e80"},{"problem":20,"code":"#(first(rest (take 2 (reverse %))))","user":"53c1be8ae4b00fb29b221267"},{"code":"(fn [x] (get (to-array x) (- (count x) 2)))","problem":20,"user":"514b33e8e4b0bd81940b86c9"},{"problem":20,"code":"#(-> %  reverse  rest first)","user":"5e27a4e1e4b05b4b0151618e"},{"code":"(fn [s]  \r\n  (cond\r\n    (next (next s)) (recur (next s))\r\n  :else\r\n    (first s)))","problem":20,"user":"4f54e6f8e4b0a7574ea717ef"},{"code":"(fn [thing] \n  (if (= 2 (count thing))\n    (first thing)\n    (recur (rest thing))\n    ))","problem":20,"user":"5040b633e4b0ff5d2cc40db3"},{"code":";;(fn [a] (.get a (- (count a) 2)))\n(fn f[x] (\n  if (= (second (rest x)) nil  ) (first x)\n  (f (rest x))\n))","problem":20,"user":"50800e49e4b089ade05efbda"},{"problem":20,"code":"(fn [xs]\n\t(loop [x (first xs) xs xs]\n      (if (empty? (rest xs)) x (recur (first xs) (rest xs)))))","user":"5bc664a2e4b07a9b28b10093"},{"problem":20,"code":";#(second (reverse %))\n(fn [l] (nth l (- (count l) 2)))","user":"58566b42e4b0f14aab7c86f4"},{"code":"#(first(next(reverse %)))","problem":20,"user":"4e7030be535d5021c1a89632"},{"problem":20,"code":"#(if (= (count %) 2)\n   (first %)\n   (recur (drop 1 %)))","user":"586f1aa7e4b01531a375e9ba"},{"code":"(fn [li] ((fn [a a1 b] (if-not (seq b) a (recur a1 (first b) (rest b)))) nil (first li) (rest li)))","problem":20,"user":"50e135f4e4b084616e11c667"},{"problem":20,"code":"(fn [coll] \"second to last\" (get (into [] coll) (- (count (into [] coll)) 2))  )","user":"54de7948e4b024c67c0cf7a4"},{"problem":20,"code":"(fn [lista] (last (take 2, (reverse lista))))","user":"59a7029ce4b066c664927d8e"},{"problem":20,"code":"(fn second-last [xs]\n  (cond (empty? (rest (rest xs))) (first xs)\n        :otherwise (second-last (rest xs))))","user":"5717ad6fe4b07c98581c3b14"},{"problem":20,"code":"#(first (rest (clojure.core/reverse %)))","user":"5e31f485e4b05b4b01516231"},{"problem":20,"code":"(fn find-second-last-element-recur [ls]\n  (loop [ls ls]\n    (if (= 1 (count (rest ls)))\n      (first ls)\n      (recur (rest ls)))))","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn [xs] (first (drop (- (count xs) 2) xs)))","problem":20,"user":"4ed6238d535d10e5ff6f52de"},{"code":"(fn penultimate-element-solution\n  [coll] ;; update args as needed\n  (second (reverse coll)))","problem":20,"user":"50c113bee4b096f585049c37"},{"code":"(fn [x] (nth x (- (count x) 2 )))","problem":20,"user":"4e50fb2c535dc968683fc4f1"},{"problem":20,"code":"(fn  [lst]\n  (if (> 2 (count lst)) nil\n                        (loop [l lst n 0]\n                          (if (empty? (rest l))\n                            n\n                            (recur (rest l) (first l))))\n                        ))","user":"5e57f45fe4b027a2e10ac103"},{"problem":20,"code":"#(second\n  ((if (reversible? %)\n      rseq\n      reverse)\n   %))","user":"604f9a8be4b039075cafcf65"},{"code":"#(if (nil? (nthnext %1 2))\n  (first %1)\n  (recur (next %1)))","problem":20,"user":"508e2584e4b0f17d83ea26c9"},{"code":"#(nth % \n      (- \n       (count %) \n       2))","problem":20,"user":"5196cf7ee4b04c0af7ff3c25"},{"problem":20,"code":"(fn penultimate [l]\n  (if (= (rest l)\n         (list (last l)))\n    (first l)\n    (penultimate (rest l))))","user":"55e4487ce4b050e68259b44c"},{"code":"(fn [[x y & xs :as all]]\n  (if (seq xs) (recur (rest all)) x))","problem":20,"user":"51ac6360e4b09397d510976c"},{"problem":20,"code":"(fn sl [x] (if (seq (rest (rest x))) (sl (rest x)) (first x)))","user":"5868efdae4b0f14aab7c8896"},{"problem":20,"code":"(fn[my-seq] (if (= 2 (count my-seq)) \n                   (first my-seq) \n                   (recur (rest my-seq))))","user":"575ddfd1e4b02ea11479938d"},{"problem":20,"code":"#(get (into [] %) (- (count %) 2))","user":"5470b269e4b00cfc9eacc1ba"},{"problem":20,"code":"(fn [arr]\n  (second\n  \t(reverse arr))\n  )","user":"5e08c3dde4b0978307768fc8"},{"code":"(fn [seq] (first (take-last 2 seq)))","problem":20,"user":"4df1e213535d08e6dec9fe20"},{"problem":20,"code":"(fn [x]\n   (second (reverse x)))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn fuz [x] (if (= (rest (rest x)) []) (first x) (fuz (rest x))))","problem":20,"user":"50206641e4b0cb6ebc0a42f5"},{"problem":20,"code":"(fn pen [x] (first (reverse (remove (fn [y] (= (last x) y)) x))))","user":"59e66ac5e4b08badc2a0c570"},{"problem":20,"code":"(fn [v]\n(loop [[h & t] v] (println h) (if (= (count t) 1) h (recur t))))","user":"542c5129e4b0dad94371f2a3"},{"problem":20,"code":"(fn [seq]\n  (let [length (- (count seq) 2)]\n    (nth seq length)))","user":"56fbacc5e4b07572ad1a88d3"},{"problem":20,"code":"#((vec %) (- (count %) 2) )","user":"6065569ce4b069485764ddca"},{"problem":20,"code":"(fn [l]\n  (nth (reverse l) 1))","user":"5874d5ace4b01531a375ea5b"},{"problem":20,"code":"(fn\n  [elems]\n  (loop [remaining elems]\n    (if (= 2 (count remaining))\n      (first remaining)\n      (recur (rest remaining)))))","user":"53de7484e4b0d874e779ae35"},{"problem":20,"code":"(fn [x]\n  (nth x  \n   (- (count x) 2)\n    ))","user":"55a21be1e4b0acc240e3151e"},{"code":"(fn [l] (second (reverse l)))","problem":20,"user":"4e340525535deb9a81d77f27"},{"problem":20,"code":"#(nth %1 (dec (dec (count (seq %1)))))","user":"55592deae4b0deb715856e32"},{"code":"(fn next-to-last[n] (nth n (- (count n) 2)))","problem":20,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":20,"code":"(fn \n  [coll] \n  (nth coll (- (count coll) 2)))","user":"59dd3930e4b0a0ac046f2504"},{"problem":20,"code":"(fn [x] (let [go (fn [a b] (if (empty? (rest a)) b (recur (rest a) (first a))))] (go x nil)))","user":"5a29d658e4b09cafd31c7f29"},{"code":"(fn [s]\n  (let [cnt (count s)]\n    (if (< cnt 3)\n      (first s)\n      (recur (rest s)))))","problem":20,"user":"4fa82277e4b081705acca1d0"},{"problem":20,"code":"(fn pnul [s]\n  (first (rest (reverse s))))","user":"5a959e9be4b0d174b936c758"},{"problem":20,"code":"(fn penultimate [xs] (if (= (count xs) 2) (first xs) (penultimate (rest xs))))","user":"5d2c8daae4b01671435dbc91"},{"problem":20,"code":"(fn [[x y & more]]\n  (if more\n    (recur (cons y more))\n    x))","user":"5680104ae4b0966858e4d8ea"},{"problem":20,"code":"(fn [toProcess]\n  (-> toProcess (reverse) (rest) (first)))","user":"59759a9ce4b01722bebd4cca"},{"problem":20,"code":"(fn [[f & r]] (if (> (count r) 1) (recur r) f))","user":"5abd4886e4b073f177442710"},{"code":"(fn butlast-one [[x y & rest]]\n  (if rest\n    (recur (conj rest y))\n    x))","problem":20,"user":"50812debe4b01a93d3f38e4c"},{"problem":20,"code":"(fn [seq]\n (last (drop-last seq)))","user":"56416212e4b08d4f616f5efa"},{"problem":20,"code":"(fn [x]\n  (first(rest(reverse x))))","user":"5595e038e4b0c79f6e1db971"},{"problem":20,"code":"(fn [a-seq]\n  (if (>= 2 (count a-seq))\n    (first a-seq)\n    (recur (rest a-seq))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn [arg]\n  (let [one (first arg)\n        two (rest arg)]\n    (if (= 1 (count two))\n      one\n      (recur two))))","problem":20,"user":"537881a4e4b06839e8705e46"},{"problem":20,"code":"(fn [x] (first (take-last 2 (seq x))))","user":"5a9aad01e4b0d174b936c7c0"},{"code":"(fn [seq]\n  (let [[x & xs] seq]\n    (if (empty? (rest xs)) x\n      (recur xs))))","problem":20,"user":"4fc5019ae4b081705acca36d"},{"code":"(fn [x] \n  (let\n    [y (- (count x) 1)]\n    (nth x (- y 1) )\n  )\n)","problem":20,"user":"51a5c79ee4b051b01d55f450"},{"problem":20,"code":"(fn [lst]\n  (loop [lst lst\n         dummy nil\n         ret nil]\n    (if (empty? lst)\n      ret\n      (recur (rest lst) (first lst) dummy))))","user":"607b04e5e4b0a637ed780373"},{"problem":20,"code":"#(nth % (dec (- (count %) 1) ))","user":"5f28b7fee4b033932238a64b"},{"problem":20,"code":"(fn [c]\n        (-> c\n            (reverse)\n            (rest)\n            (first))\n      )","user":"54d90b36e4b0a52adc2e2049"},{"code":"(fn f [x] (second (reverse x)))","problem":20,"user":"4f8c933ae4b02e764a0a51a1"},{"problem":20,"code":"(fn penultimate\n  [[head & tail]]\n  (if (nil? (second tail))\n    head\n    (penultimate tail)))","user":"5a346d73e4b0ddc586f153c8"},{"problem":20,"code":"(fn [s] \n  (first \n   (drop \n   \t(- (count s) 2) \n   \t s)))","user":"5855aec8e4b0f14aab7c86df"},{"problem":20,"code":"(fn final-element\n  [coll]\n  (nth coll (- (count coll) 2))\n)","user":"570a9be7e4b0b0fb43fd06b6"},{"problem":20,"code":"(fn second-to-last [values] (if (= (count (rest values)) 1) (first values) (second-to-last (rest values))))","user":"5f9491cbe4b0715f5002d7bf"},{"problem":20,"code":"(fn [[x & xs]]\n  (if (= 1 (count xs)) x\n      (recur xs)))","user":"5534fb50e4b09218d5f44fa6"},{"problem":20,"code":"(fn [x] \n  (if (= (count x) 2) \n    (first x) \n    (recur (rest x))\n    )\n  )","user":"59affcdee4b0e1f4e384c8c2"},{"code":"(fn [xs] (if (empty? (rest (rest xs))) (first xs) (recur (rest xs))))","problem":20,"user":"52f10094e4b05e3f0be25ee8"},{"problem":20,"code":";;#(nth % (- (count %) 2))\n#(-> % reverse second)","user":"5f81de6ce4b0c071e6c840f5"},{"code":"(fn [x] (first(next(reverse x))))","problem":20,"user":"536c7f32e4b0fc7073fd6e40"},{"problem":20,"code":"(fn[array]\n  (first (rest (reverse array)))\n  )","user":"55240916e4b0882d96d091b6"},{"problem":20,"code":"(fn [col]\n  (second (reverse col)))","user":"53b05a75e4b047364c044482"},{"code":"(fn lst [[x & xs]] (if (nil? (next xs)) x (lst xs)))","problem":20,"user":"4e71705e535d5021c1a89649"},{"problem":20,"code":"(comp second \n      reverse)","user":"5aa4b961e4b0d174b936c888"},{"code":"#(second (reverse %) )","problem":20,"user":"4e8a1bd8535d3e98b8023291"},{"code":"(fn [x] (nth x (- (count x) 2 ) ))","problem":20,"user":"533a2f7be4b0e30313ee6cb8"},{"code":"#(aget (to-array %) (- (alength (to-array %)) 2))","problem":20,"user":"512547a3e4b05d10e3e395f4"},{"code":"(fn [s]\n  (let [t (rest s)\n        u (rest t)]\n    (if (empty? u)\n      (first s)\n      (recur t))))","problem":20,"user":"4e86327b535db62dc21a62f6"},{"problem":20,"code":"(fn [x] (-> x (reverse)\n           (rest)\n           (first)))","user":"5a9db5c9e4b0d174b936c7f1"},{"problem":20,"code":"(fn [set](nth set\n       (-  (count set)\n           2 ))  )","user":"554462c0e4b0a04f79299529"},{"problem":20,"code":"(fn penul\n  [[head & tail]]\n  (if\n    (= 1 (count tail))\n    head\n    (penul tail)))","user":"5df53ab7e4b03c219ef1a38e"},{"code":"#(nth % ( - (count %) 2))","problem":20,"user":"50ab8ae3e4b01d6eb43ce9a0"},{"problem":20,"code":"#(->> % (vec) (rseq) (fnext))","user":"580c1e9ae4b0849f6811b719"},{"problem":20,"code":"(fn getPenultimate [list]\n  (nth list (- (count list) 2)))","user":"5f081f6de4b0cf489e8d7f5a"},{"problem":20,"code":"(fn  [coll]  (first (take-last 2 coll)))","user":"545bc5a8e4b01be26fd74658"},{"problem":20,"code":"#(-> %1 (reverse) (second))","user":"54391a55e4b032a45b869319"},{"problem":20,"code":"(fn this [[c & others]]\n  (if-not (second others)\n    c\n    (this others)))","user":"587fb546e4b0f1effa3b75f9"},{"problem":20,"code":"#(nth (reverse (seq %)) 1)","user":"5c5e3af7e4b01df32ab732c6"},{"problem":20,"code":"#(nth %1 (- ( count %1) 2))","user":"5770bbb9e4b0979f896515a0"},{"problem":20,"code":"(fn = [coll] (first (rest (reverse coll))))","user":"58171c24e4b0c0e9c07b8388"},{"problem":20,"code":"(fn [s]\n  (loop [s s, der nil]\n    (if (seq (rest s))\n      (recur (rest s) (first s))\n      der)))","user":"5a481e05e4b05d388ecb6b64"},{"problem":20,"code":"(fn [x] ( nth x (- (count x) 2)   ))","user":"5abac314e4b073f1774426b6"},{"problem":20,"code":"(fn rec [x] (if (empty? (rest (rest x))) (first x) (rec (rest x))))","user":"5eac6a63e4b00a66d4a951e0"},{"code":"#(nth  % (- (count %) 2))","problem":20,"user":"4ebfdfda535dfed6da9c6d9e"},{"code":"(fn [array] (loop [arr array] (if (= 2 (count arr)) (first arr) (recur (rest arr)))))","problem":20,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"#(nth %  (-  (count %) 2 ) )","problem":20,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn [s] ((fn [[l p & rest]] p) (reverse s)))","problem":20,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":20,"code":"(fn [x] ((fn [[_ y rest]] y) (reverse x)))","user":"55250331e4b0882d96d091c9"},{"code":"(fn pen [sequence] (first (rest (reverse sequence))))","problem":20,"user":"50afd178e4b0c3f5ed5c29a4"},{"problem":20,"code":"(fn penultimate [x]\n  (if (= (count x) 2)\n    (first x)\n    (penultimate (rest x))))","user":"525ff1e3e4b03e8d9a4a7028"},{"problem":20,"code":"(fn [s] (let [i (- (count s) 2)] (nth s i)))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":20,"code":"(fn [[e1 & es]]\n     (if (empty? (rest es)) e1\n       (recur es)))","user":"5550c6e0e4b00713264bd9af"},{"problem":20,"code":"(fn my-last [lst]\n  (if (empty? (rest (rest lst)))\n    (first lst)\n    (my-last (rest lst))))","user":"5b79481de4b047b03b203704"},{"problem":20,"code":"(fn [l] (first ( rest ( reverse l))))","user":"53f6368ce4b0db01ade6f9da"},{"code":"(fn [s]\n  (if (nil? (next (next s)))\n    (first s)\n    (recur (next s))))","problem":20,"user":"52b955f8e4b07a9af57922bc"},{"code":"(fn [coll]\n  (if (empty? (rest (rest coll)))\n     (first coll)\n     (recur (rest coll))))","problem":20,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":20,"code":"(fn [l]\n  ((comp peek pop vec) l))","user":"5457583ee4b01be26fd7460a"},{"problem":20,"code":"(fn [sq]\n  (let [restsq (rest sq)\n        restsq2 (rest restsq)]\n    (cond\n     (empty? restsq) nil\n     (and \n      (not (empty? restsq))\n      (empty? restsq2)\n     ) (first sq)\n     :else (recur restsq)\n    )\n  )\n)","user":"5bcc304ce4b07a9b28b1010c"},{"code":"(fn [a]\n(if (= (rest (rest a)) ())\n  (first a)\n  (recur (rest a))))","problem":20,"user":"509f3bc9e4b08df8156e9e39"},{"problem":20,"code":"(fn [in]\n  (if (= (count in) 2)\n    (first in)\n    (recur (rest in))))","user":"56dbe1f4e4b0ea9b8538f813"},{"code":"#(.get %(- (count %) 2\n           ))","problem":20,"user":"537fa02ce4b06839e8705ebc"},{"code":"#(if (next (rest %)) \n   (recur (rest %)) \n   (first %)\n   )","problem":20,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn [xs]\n  (let [len (count xs)\n        i (- len 2)]\n    (nth xs i)))","problem":20,"user":"53029a95e4b0d8b024fd3730"},{"problem":20,"code":"(fn [my-list] (let [my-vector (into [] my-list) num-elems (count my-vector)] (get my-vector (- num-elems 2))))","user":"52420e2fe4b076e5d3121f48"},{"code":"(comp first reverse butlast)","problem":20,"user":"4ec18451535dfed6da9c6db0"},{"problem":20,"code":"(fn [ls]\n  (second (reverse ls)))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn [x]\n    (nth x (- (count x) 2)))","problem":20,"user":"5046ee3ee4b03b02161376b4"},{"problem":20,"code":"(fn lst [xs] (first (drop (- (count xs) 2) xs)))","user":"540470dae4b0addc1aec6658"},{"problem":20,"code":"(fn te [x] (if (= (count x) 2) (first x) (te (rest x))))","user":"52be0927e4b07a9af579230f"},{"code":"(fn penultimate [seq]\n  (loop [s seq]\n    (if (= (count s) 2)\n      (first s)\n      (recur (rest s)))))","problem":20,"user":"513a37e0e4b067e25a345ec7"},{"code":"(fn [l] (first (next (reverse l))))","problem":20,"user":"538d4926e4b0b51d73faae6a"},{"problem":20,"code":"(fn sean [x] (if (= (count x) 2) (first x) (sean (rest x))))","user":"54d2c4c5e4b0e8a36923e5fa"},{"code":"(fn last2 [x] (first (rest (reverse x))))","problem":20,"user":"4f0369db535dcb61093f6ab1"},{"problem":20,"code":"(fn g [%] (nth % (- (count %) 2)))","user":"559e2486e4b08a52bd4f97cf"},{"problem":20,"code":"(fn [s]\n  (if (= 2 (count s))\n    (first s)\n    (recur (rest s))))","user":"54ad1d30e4b09f271ff37cdf"},{"problem":20,"code":"#(second (reverse (vec %)) )","user":"567ede69e4b0feffd0d18eb9"},{"problem":20,"code":"(fn\n  [s]\n  (nth s (- (count s) 2)))","user":"53cb5559e4b00fb29b2212d2"},{"problem":20,"code":"(fn [s]\n  (let [v (- (count s) 2)]\n    (nth s v)))","user":"56df632ce4b0ca2494a095f2"},{"code":"(fn penultimate\n  [xs]\n  (cond\n    (= 2 (count xs)) (first xs)\n    :else (penultimate (rest xs))))","problem":20,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":20,"code":"(comp second reverse)\n; #(second (reverse %))","user":"5fc3850de4b0db0e95a5f3fd"},{"problem":20,"code":"(fn\n  [iseq]\n  (if (= (count iseq) 2)\n    (first iseq)\n    (recur (rest iseq))))","user":"5ed65b59e4b016b56eae05df"},{"problem":20,"code":"#(if (nnext %) (recur (rest %)) (first %))","user":"55a9e0fee4b0988bba2ad945"},{"problem":20,"code":"(fn [s](nth s (- (count s)2)))","user":"5474df6ee4b0c51c1f4d7290"},{"problem":20,"code":"(fn second-to-last\n  [seq]\n  (second (reverse seq)))","user":"542d5fa9e4b0dad94371f2b5"},{"code":"(fn [s]\n  (loop [[head & tail] s]\n    (if (= (rest tail) '())\n      head\n      (recur tail))))","problem":20,"user":"52b15bf2e4b0c58976d9acdd"},{"code":"(fn [coll]\n  (first (take-last 2 coll)))","problem":20,"user":"4f03a7a4535dcb61093f6b49"},{"code":"(fn [x] (if (> (count x) 1) (.get x (- (count x) 2)) (.get x (- (count x) 1))))","problem":20,"user":"521e1174e4b0dd19981ad06d"},{"problem":20,"code":"(fn[x] (nth x (-(count x) 2)))","user":"554ccc3ae4b0a04f792995af"},{"code":"(fn[coll]\n  (nth coll (- (count coll) 2)))","problem":20,"user":"4ffb529be4b0678c553fc3cd"},{"problem":20,"code":"; #(second (reverse %))\n\n; #(-> % (reverse) (second))\n\n#(->> % (reverse) (second))","user":"5eac172fe4b00a66d4a951dd"},{"problem":20,"code":"(fn second-last [s]\n\t(if (empty? (rest (rest s))) (first s) (second-last (rest s))))","user":"57a9db97e4b0b8559636fc5b"},{"problem":20,"code":"(fn \n  [inSeq] \n  (second (reverse inSeq)))","user":"5e1b0140e4b0dc959400851c"},{"problem":20,"code":"(fn [s] (if (nil? (seq (rest (rest s))))\n\t (first s)\n\t (recur (rest s))))","user":"5625f78be4b00e49c7cb47b9"},{"problem":20,"code":"(fn penultimate [seq]\n  (if (empty? (rest (rest seq)))\n    (first seq)\n    (penultimate (rest seq))))","user":"53bab6fae4b047364c0444fb"},{"code":"(fn [[x y & zs]]\n  (if (seq zs)\n    (recur (cons y zs))\n    x))","problem":20,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":20,"code":"(fn a [[x y & xs :as h]]\n   (if (empty? xs)\n     x\n     (a (rest h))))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":20,"code":"(fn [arr] (first (reduce (fn [a b] [(get a 1) b]) [nil nil] arr)))","user":"5eb4927fe4b00a66d4a95221"},{"problem":20,"code":"(fn n [c]\n  (if (nil? (nnext c))\n    (first c)\n    (n (next c))))","user":"57f291a8e4b0511f1d294df0"},{"problem":20,"code":"(fn prev-last-element [coll]\n    (loop [coll coll\n           elem nil]\n      (if (seq (rest coll))\n        (recur (rest coll) (first coll))\n        elem)))","user":"57f6bd5de4b0d3187e9008ee"},{"code":"#(first (rest (reverse %)) )","problem":20,"user":"5012036ce4b0a040369c12f4"},{"problem":20,"code":"#(second (reduce conj '() %))","user":"55ae7df7e4b03311e7b732bf"},{"problem":20,"code":"(fn [[elem & remaining]]\n  (if (= 1 (count remaining))\n    elem\n    (recur remaining)))","user":"587cebf3e4b01531a375eb28"},{"problem":20,"code":"(fn [alist] (last (drop-last alist)))","user":"5a760f0ee4b0512ff01cdad1"},{"problem":20,"code":"(fn f[x] \n  (if (= [] (rest (rest x)))\n    (first x)\n    (f (rest x))))","user":"5637e73fe4b0bfe05bf117e0"},{"problem":20,"code":"(fn [s]\n  (if (= 2 (count s))\n    (first s)\n    (recur (next s))))","user":"5935b010e4b04f87174def55"},{"problem":20,"code":"(fn [z] (first (pop (reverse z))))","user":"55249337e4b0882d96d091c3"},{"problem":20,"code":"(fn [l]\n  (->> l\n       reverse\n       second))","user":"5f4fe1fae4b0a0bc16850a5c"},{"code":"(fn [s]\n        (if (next (next s))\n          (recur (next s))\n          (first s)))","problem":20,"user":"5280d4bbe4b0757a1b171415"},{"problem":20,"code":"(fn second-to-last [items] (nth items (dec(dec(count items)))))","user":"544559a3e4b032a45b86939c"},{"code":"(fn [xs]\n  (first\n    (take-last 2 xs)))","problem":20,"user":"5014d131e4b08fbe1e50b8bc"},{"code":"(fn [a]\n  (first (drop 1 (reverse a))))","problem":20,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn myfunc [x]\r\n  (if (= 2 (count x)) \r\n      (first x)\r\n      (myfunc (rest x))))","problem":20,"user":"506b437de4b0eda3100c0906"},{"code":"(fn penultimo [x] (second (reverse x)))","problem":20,"user":"4e6a4641535d8ccf87e9feb9"},{"problem":20,"code":"(fn [coll]\n  (nth coll\n       (- \n        (count coll)\n        2 ))\n  )","user":"55c461d3e4b0e31453f64999"},{"code":"#(peek (pop (reverse %)))","problem":20,"user":"4fc51e1fe4b081705acca379"},{"problem":20,"code":"(fn [arr] (.get arr (- (count arr) 2)))","user":"5eee9352e4b07c55ae4a0512"},{"code":"(fn nLast [seq] (if (= (count seq) 2) (first seq) (nLast (rest seq))))","problem":20,"user":"4fc4fe59e4b081705acca36a"},{"code":"(fn [x & y] \n (let [e (first x) r (rest x)] \n  (if (seq r) (recur r e) y)))","problem":20,"user":"4f584064e4b0a7574ea71846"},{"problem":20,"code":"(fn[coll] (first (take-last 2 coll)))","user":"528e441be4b0239c8a67aed8"},{"problem":20,"code":"(fn second-last [s]\n\t(let [x (first s) xs (rest s) xs-count (count xs)]\n    \t(if (> xs-count 1)\n          (second-last xs)\n          x\n        )\n    )\n)","user":"5b0bea6de4b0cc2b61a3bdda"},{"problem":20,"code":"(fn f [[x y & zs]]\n  (if (nil? zs)\n    x\n    (f (into [y] zs))))","user":"56483562e4b0284900eef629"},{"problem":20,"code":"(fn [s]\n  (if (vector? s)\n    (s (- (count s) 2))\n    ((comp second reverse) s)\n    ))","user":"589e704ae4b02bd94d917e5e"},{"code":"#(get (vec %) (dec (dec (count %))))","problem":20,"user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":20,"code":"(fn second-it [x] (second (reverse x)))","user":"5d07d6a7e4b0cc9c915881fd"},{"code":"(fn [xs] (first(rest(reverse xs))))","problem":20,"user":"521763fce4b082aa80a88c82"},{"problem":20,"code":"(fn [foo]\n  (second (reverse foo)))","user":"58303fc3e4b051871117c006"},{"problem":20,"code":"(fn [lis]\n              (if (empty? (rest (rest lis)))\n                (first lis)\n                (recur (rest lis))\n                )\n              )","user":"5d4cf3e9e4b0776584bd6f38"},{"code":"(fn[x] (first (reverse (butlast x))))","problem":20,"user":"51e85d2de4b048bc21b181ee"},{"problem":20,"code":"(fn [seqz] (last (drop-last seqz)))","user":"5414b7c4e4b01498b1a719ed"},{"problem":20,"code":"(fn [L] \n  (second\n   (reduce\n     #(conj (take 1 %1) %2)\n     '(nil nil)\n      L)))","user":"556238bce4b0c656e3ff17d3"},{"code":"(fn getit [x] (if (= (count x) 2) (first x) (getit (rest x))))","problem":20,"user":"52cd882ee4b07d0d72b27378"},{"problem":20,"code":"(fn [myseq]\n  (nth myseq (- (count myseq) 2)))","user":"5bdb1971e4b0ed4b8aab4c14"},{"code":"(fn foo[lst] (nth  lst (- (count lst) 2)))","problem":20,"user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [s]\n  (if (or (= (count s) 1) (= (count s) 2))\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4f043663535dcb61093f6bb0"},{"code":"(fn [seq] (if (= (count seq) 2) (first seq) (recur (rest seq))))","problem":20,"user":"4e947818535dbda64a6f6b13"},{"problem":20,"code":"(fn penultimate [xs]\n  (if (<= (count xs) 1)\n    (throw (Exception. \"list is too small\"))\n    (nth xs (- (count xs) 2))))","user":"56efc9fde4b04a395b9a0464"},{"problem":20,"code":"#(first (rest (into '() %)))","user":"5776385fe4b0979f89651632"},{"code":"(fn [seq]\n  (second (reverse seq)))","problem":20,"user":"4e78986e535db9503626571f"},{"code":"#(nth % (- (reduce + (for [x %] 1)) 2))","problem":20,"user":"5328e449e4b09d4e7a9b550c"},{"problem":20,"code":"(fn [[f s & r]]\n  (if (nil? r)\n    f\n    (recur (into [s] r))))","user":"5185ad63e4b0da5a5be3bac2"},{"problem":20,"code":"(fn [lista]\n  (let [[x y & xs] lista]\n    (if (empty? xs) x\n      (recur (cons y xs)))))","user":"57902cd8e4b0ebec4cfb75a6"},{"code":"(fn myfunc [a] (if (nil? (next (next a))) (first a) (myfunc (rest a))))","problem":20,"user":"51340abbe4b0915833951877"},{"problem":20,"code":"(fn seclast [x]\n  (if (= (rest (rest x)) '()) (first x) (seclast (rest x))))","user":"55244734e4b0882d96d091bf"},{"problem":20,"code":"(fn retaval [coll] (nth coll (- (count coll) 2)))","user":"58f602afe4b0438e51c2cee5"},{"problem":20,"code":"(fn [x] (let [[x1 x2] (reverse x)] x2))","user":"552568e5e4b0ffed3738f907"},{"problem":20,"code":"(fn xElementFromBehind [x coll] (nth coll (- (count coll) x))) 2","user":"582d51b6e4b051871117bfb8"},{"problem":20,"code":"(fn my-penultimate \n  [lst]\n  (last(butlast lst)))","user":"5a9f005be4b0d174b936c810"},{"problem":20,"code":"#(second (reverse(lazy-seq %)))","user":"6059d2e0e4b07e92fa001ace"},{"problem":20,"code":"(fn [xs]\n    (let [[x _ & more] xs]\n      (if (not (seq more))\n        x\n        (recur (rest xs)))))","user":"57e70a99e4b0bfb2137f5af8"},{"code":"(fn [sequence] (nth (reverse sequence) 1))","problem":20,"user":"536bb179e4b0243289761ec1"},{"problem":20,"code":"#(nth (take 2 (reverse %1)) 1)","user":"561c6540e4b064ca9f4b1698"},{"problem":20,"code":"(fn [x] \n(if (empty? (rest (rest x)))\n          (first x)\n          (recur (rest x))))","user":"60468847e4b02d28681c77c4"},{"code":"(fn [seq]\n   (second (reverse seq)))","problem":20,"user":"53489329e4b084c2834f4a5b"},{"code":"(fn last2 ([coll] \n  (if (<= (count coll) 2) \n    (first coll)\n    (recur (rest coll))\n  )\n))","problem":20,"user":"507ab268e4b08327cd804a6f"},{"code":"(fn [arg]\n  (nth arg\n    (- (count arg) 2)))","problem":20,"user":"507acc18e4b09034bfeeb719"},{"problem":20,"code":"#(nth % (- (count %) 2)) ; second answer","user":"58375635e4b089d5ab817d14"},{"problem":20,"code":"(fn penult [ls]\n  (if (empty? (rest (rest ls))) (first ls) (penult (rest ls))))","user":"59e763c9e4b0249b72820713"},{"code":"(fn [seq]\n  (first (rest (reverse seq))))","problem":20,"user":"4fec51b4e4b0681fd128dca4"},{"problem":20,"code":"(fn [x]\r\n   (let [len (count (seq x))]\r\n   (nth (seq x) (- len 2)))\r\n)","user":"56e277a4e4b03a7c14b85a35"},{"problem":20,"code":"#(get (into [] %1) (- (count %1) 2))","user":"5bfae66ae4b0bdcf453d15d3"},{"problem":20,"code":"(fn tmp [x] (if (empty? (rest (rest x))) (first x) (tmp (rest x))))","user":"55adf65fe4b03311e7b732b0"},{"problem":20,"code":"(fn [arg] (loop [e arg] (if (empty? (rest (rest e))) (first e) (recur (rest e)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"problem":20,"code":"(fn [coll] (peek (vec (drop-last coll))))","user":"56ea89bfe4b04a395b9a0406"},{"code":"(fn [coll] (first(rest(reverse coll))))","problem":20,"user":"4e9361c9535dbda64a6f6b0f"},{"problem":20,"code":"(fn [x]\n  (if (= nil (next (next x)))\n    (first x)\n    (recur (rest x))))","user":"5af74644e4b0cc2b61a3bcc2"},{"code":"(fn this [arr]\n\t\t(if (= 2 (count arr))\n\t\t\t(first arr)\n\t\t\t(this (rest arr))))","problem":20,"user":"51e34f3ee4b0c611d6113e41"},{"problem":20,"code":"(fn myf [l] (if (= (count (rest l)) 1) (first l) (myf (rest l))))","user":"56039a9de4b04bb52996e1bf"},{"problem":20,"code":"(fn [list] (second (#(reverse %) list)))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn [sequence] (first (rest (reverse sequence))))","problem":20,"user":"52d4da40e4b09f7907dd1335"},{"problem":20,"code":"(fn secondLast [x]\n  (loop [a x]\n    (if (> (count a) 2)\n      (recur (rest a))\n      (first a))))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":20,"code":"(fn [s]\n  (first (reverse (drop-last s))))","user":"55785e1be4b05c286339e08b"},{"code":"(fn [xs]\n  (if (fnext (rest xs))\n    (recur (rest xs))\n    (first xs)))","problem":20,"user":"5234f716e4b05e80434a505f"},{"code":"(fn [xs]\n  (loop [x (first xs), xs (next xs)]\n    (if (empty? (next xs))\n      x\n      (recur (first xs) (next xs)))))","problem":20,"user":"535778dee4b04ce2eb3ed27d"},{"code":"(fn get-second-to-last [x]\n  (let [c (- (count x) 2) newx (into [] x) ]\n    (newx c)\n    )\n  )","problem":20,"user":"5157d8bce4b0b0b4b87062d6"},{"code":"(fn [coll]\n  (if (= (count coll) 2)\n    (first coll)\n    (recur (next coll))))","problem":20,"user":"514d8084e4b019235f6c0588"},{"code":"(fn p [x] (if (= '()(rest (rest x))) (first x) (p (rest x))))","problem":20,"user":"4ded582d535d08e6dec9fe0c"},{"problem":20,"code":"#(nth % (-  (count %)  2 ))","user":"57bffed6e4b05aa3c4741c89"},{"problem":20,"code":"(fn [s] (last(take 2 (reverse s))))","user":"5e71b6e7e4b085ba37836dbe"},{"code":"(fn [x] (nth (reverse x) 1) )","problem":20,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":20,"code":"(fn penultimate [x]\n  (nth x (- (count x) 2)))","user":"5e89ee63e4b0cb0169546317"},{"problem":20,"code":"(fn [coll] (\n->> coll\n(reverse)\n(rest)\n(first)\n))","user":"5bc28638e4b07a9b28b10033"},{"code":"(fn [x] (first (#(take-last 2 %) x)))","problem":20,"user":"4e6a2855535d8ccf87e9fea3"},{"problem":20,"code":"#(if \n   (= (count %) 2)\n   (first %) \n   (recur (rest %)))","user":"53daca15e4b0e771c30254a9"},{"code":"(fn looping2 [coll] (if-not (next (next coll)) (first coll) ( looping2 ( rest coll ))))","problem":20,"user":"513bafa4e4b04402f587b77c"},{"code":"(fn [x] \n  (nth (reverse x) 1)\n)","problem":20,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"#(nth %(dec (dec (count %))))","problem":20,"user":"51bfc1f0e4b0e49ef9037dd4"},{"code":"(fn second-to-last [coll] (first (take-last 2 coll)))","problem":20,"user":"4f5c68c6e4b0030a34fb2b23"},{"code":"(fn [[x & xs]]\n  (if (empty? (rest xs))\n    x\n    (recur xs)))","problem":20,"user":"4eca5391535d6d7199dd3704"},{"problem":20,"code":"(fn [col]\n  (let [[first second & rest] col]\n    (if (nil? rest)\n      first\n      (recur (conj rest second)))))","user":"5511b44be4b06e50f9beb197"},{"problem":20,"code":"(fn[coll] (first(take-last 1 (butlast coll))))","user":"57ea2b2ae4b0bfb2137f5b40"},{"code":"(fn[s] (second (reverse s)))","problem":20,"user":"52af66d2e4b0c58976d9acba"},{"problem":20,"code":"(fn [coll] \n  \t(nth coll  (- (count coll) 2)))","user":"544ff46ce4b0e3978000699a"},{"code":"(fn [[pu l & more :as in]]\n  (if more\n    (recur (next in))\n    pu))","problem":20,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"#(nth ( reverse %) 1)","problem":20,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":20,"code":";;#(nth % (- (count %) 2))\n\n(fn my-last [s]\n  (let [r (rest s)]\n    (if (empty? (rest r))\n      (first s)\n      (recur r))))\n\n;; (time ((fn my-last [s] (let [r (rest s)] (if (empty? (rest r)) (first s) (recur r)))) (range 1e6)))\n;;=> \"Elapsed time: 411.148 msecs\"\n;;=> 999998\n\n;; (time (#(nth % (- (count %) 2)) (range 1e6)))\n;;=> \"Elapsed time: 572.602 msecs\"\n;;=> 999998\n\n;; HOWEVER, if s is already a vector, the \"last\" and \"nth\" solutions take under a millisecond.","user":"540e0637e4b0addc1aec6717"},{"code":";; initial soludtion\n; (fn [x] (first (rest (reverse x))))\n;; using comp\n; (comp first rest reverse)\n;; using the dispatch macro for anonymous functions\n#(first (rest (reverse %)))","problem":20,"user":"52e753abe4b09f7907dd1484"},{"code":"#(first(rest(reverse %1)))","problem":20,"user":"518ad8fce4b06da86c1973c1"},{"problem":20,"code":"(fn last2 [xs] (if-let [x (next xs)] (if (next x) (recur x) (first xs))))","user":"5bc20634e4b07a9b28b10022"},{"code":"(fn[seq](first (rest (reverse seq))))","problem":20,"user":"518c1079e4b0f028e99addf8"},{"code":"(fn lastbut1 [seq] (if (= 2 (count seq)) (first seq) (recur (rest seq))))","problem":20,"user":"4f16ef8a535d64f603146451"},{"problem":20,"code":"#(loop [cur %\nprev nil]\n(if (= (count cur) 1)\nprev\n(recur (rest cur) (first cur))))","user":"5b044436e4b0cc2b61a3bd71"},{"problem":20,"code":"#(loop [ll %1]\n      (if (= 2 (count ll))\n        (first ll)\n        (recur (rest ll)))\n        )","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":20,"code":"(fn [s] (if (seq (rest (rest s)))\n          (recur (rest s))\n          (first s)))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn [coll]\n  (let [rev-coll (reverse coll)]\n    (second rev-coll)))","problem":20,"user":"531ccb1fe4b08068f379eda7"},{"problem":20,"code":"(fn [v](loop [v v](if(= (count v) 2) (first v) (recur (rest v)))))","user":"5a786223e4b013a48d39976b"},{"problem":20,"code":"(fn [x] (nth x ((comp (partial + (- 2)) count) x)))","user":"533975f0e4b0e30313ee6ca9"},{"code":"(fn [x]\n  (nth x (- (count x) 2) ))","problem":20,"user":"52c2eb29e4b07a9af5792385"},{"problem":20,"code":"(fn [seq'] \n  (let [[x & xs]  seq']\n    (if (= 1 (count xs))\n      x\n      (recur xs))))","user":"567bf820e4b05957ce8c61ad"},{"code":"(fn[x] (last (drop-last x)))","problem":20,"user":"513a1d33e4b067e25a345ec4"},{"problem":20,"code":"(fn last-elem [some-seq]\n  (if (= 2 (count some-seq))\n    (first some-seq)\n    (last-elem (rest some-seq))))","user":"5f2c5912e4b033932238a664"},{"code":"(fn [lst]\n  (if (seq (rest (rest lst)))\n    (recur (rest lst))\n    (first lst)))","problem":20,"user":"4f28c979e4b0d6649770a01a"},{"problem":20,"code":"(fn [_] (first (rest (reverse _))))","user":"52f23d85e4b05e3f0be25ef6"},{"problem":20,"code":"(fn lll [coll] (if (= (count coll) 2) (first coll) (lll (rest coll))))","user":"593e4b1fe4b069cdc2982bbb"},{"code":"(fn [elements] (first (take-last 2 elements)))","problem":20,"user":"5277c221e4b03e8d9a4a750f"},{"problem":20,"code":"(fn [a]\n  (loop [[head & tail] a]\n    (if (= (count tail) 1)\n      head\n      (recur tail))))","user":"57fb9d83e4b0d3187e900975"},{"problem":20,"code":"(fn [sqs] (second (reverse sqs)))","user":"5a291617e4b07f18be40aa76"},{"code":"( fn[x] (first (next (reverse x))) )","problem":20,"user":"51cc2d84e4b02254fc79486c"},{"problem":20,"code":"(fn penultimate [xs] (let [xss (next xs) xsss (next xss)] (if xsss (penultimate xss) (first xs))))","user":"5c66e69fe4b0fca0c16226b0"},{"problem":20,"code":"#(-> % count (- 2) (drop %) first)","user":"555e7210e4b0a2eb076a39b9"},{"problem":20,"code":"(fn [x] (first (take-last 1 (drop-last x))))","user":"563e022be4b0da801c4e4664"},{"problem":20,"code":"(fn [s] (loop [[f & r] s]\n           (if (not (second r))\n             f\n             (recur r))))","user":"568c30d2e4b0dcc4269f40b1"},{"problem":20,"code":"#(last (butlast %) )","user":"5b94c2aee4b0c0b3ffbd4a59"},{"problem":20,"code":"#(nth % ((comp dec dec) (count %)))","user":"53bc0443e4b047364c04450c"},{"problem":20,"code":"#(->> %\n      count\n      (+ -2)\n      (nth %))","user":"5799b260e4b05b1deef9adc8"},{"code":";(fn [s] (nth s (- (count s) 2)))\n(fn [s] (-> s reverse second))","problem":20,"user":"533ea7e8e4b085b17e897d94"},{"code":"(fn second-to-last [s] (nth s (- (count s) 2)))","problem":20,"user":"4eb80264535d7eef3080737a"},{"code":"#( -> % reverse second)","problem":20,"user":"4fdfd19be4b05e33b9224fa4"},{"code":"(fn [the-seq] (-> the-seq reverse second))","problem":20,"user":"4f80a906e4b033992c121bf7"},{"code":"(fn l [[head & [_ & tail :as rest]]] (if (empty? tail) head (l rest)))","problem":20,"user":"536c6f20e4b0fc7073fd6e3d"},{"code":"(fn [acoll] (first (rest (rseq (vec acoll)))))","problem":20,"user":"4e6a79ca535d8ccf87e9feeb"},{"code":"(fn my-2 [x]\n  (if (> (count x) 2)\n    (my-2 (rest x))\n    (first x)))","problem":20,"user":"5008b795e4b0144d4f561e3e"},{"problem":20,"code":"(fn [x]\n  (.get x (dec (dec (count x)))))","user":"53dfb864e4b0d874e779ae43"},{"problem":20,"code":"(fn [a] (-> (reverse a) (rest) (first)))","user":"55cbd29be4b0e31453f64a0a"},{"code":"#( last (butlast %))","problem":20,"user":"4e5cddd6535d8a8b8723a2c5"},{"code":"(fn ttt [x] (if (= 2 (count x)) (first x) (ttt (rest x))))","problem":20,"user":"4fe4614ee4b0e8f79898feb3"},{"problem":20,"code":"#(-> % (reverse) (rest) first)","user":"5e839edde4b09a7a73c8bbba"},{"problem":20,"code":"(fn l [coll] (if (= 2 (count coll)) (first coll) (l (rest coll))))","user":"5d348d3de4b01671435dbd0a"},{"problem":20,"code":"#(->> %1 reverse second)","user":"58969420e4b00487982d52a4"},{"problem":20,"code":"#(let [x %]\n   (if (= 2 (count x)) \n     (first x)\n     (recur (rest x))\n    )\n  )","user":"56815e2fe4b0945ebc182a84"},{"problem":20,"code":"(fn [s]\n      (if (next (next s))\n        (recur (next s))\n        (first s)))","user":"570bd29be4b0b0fb43fd06c5"},{"code":"(fn [xs]\n  (->> xs reverse (drop 1) (first)))","problem":20,"user":"5344fe13e4b084c2834f4a32"},{"problem":20,"code":"(fn penultimate [x]\n  (if (= (count x) 2)\n    (first x)\n    (penultimate (rest x))\n    )\n  )","user":"5710b136e4b09c608db70437"},{"code":"(fn [liste] (first (next (reverse liste))))","problem":20,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":20,"code":"(fn [y] (nth y (- (count y) 2)))","user":"593744abe4b02506e01a299b"},{"problem":20,"code":"#(loop [[part & rest] %]\n   (if (= 1 (count rest))\n     part\n     (recur rest)))","user":"56032173e4b04bb52996e1b3"},{"code":"(fn [xs]\n  (let [y (first xs)\n        ys (rest xs)]\n    (if (empty? (rest ys))\n      y\n      (recur ys))))","problem":20,"user":"52e41c22e4b09f7907dd144b"},{"code":"(fn f\n  [l]\n  (cond\n   (empty? (rest (rest l))) (first l)\n   :else (f (rest l))))","problem":20,"user":"518c0f4ee4b0f028e99addf7"},{"code":"(fn [list] (nth (reverse list) 1))","problem":20,"user":"51b01309e4b0c53cf2e68a57"},{"code":"#_(fn [lst] (second (reverse lst)))\n\n#_(fn [lst]\n  (-> lst\n      (reverse)\n      (second)))\n\n(fn [coll]\n    (last (butlast coll)))","problem":20,"user":"529e3258e4b04e0c58e87b8d"},{"problem":20,"code":"(fn [e] (second(reverse e)))","user":"554b8b7ae4b0a04f7929958e"},{"problem":20,"code":"(fn [x] (first (reverse  (take 2 (reverse x)))))","user":"561d44fae4b064ca9f4b16a9"},{"problem":20,"code":"(fn [s] (first (reduce (fn [acc elt] (let [[x y] acc] [y elt]) ) [nil nil] s)))","user":"587e43d2e4b052da650a633f"},{"problem":20,"code":"(fn [x] \n  (if (= (count x) 2) \n    (first x)\n    (recur (rest x))))","user":"5546d2c5e4b0a04f79299543"},{"problem":20,"code":"#(let [a (- (count  %1) 2)]\n    (nth %1 a))","user":"53c83f94e4b00fb29b2212af"},{"problem":20,"code":"#(loop [remaining %]\n   (if (>= 2 (count remaining))\n     (first remaining)\n     (recur (nthrest remaining 1))))","user":"5c62f1cde4b0fca0c1622655"},{"code":"(fn [s & last2nd] (if (next s)\n          (recur (next s) (first s))\n          last2nd))","problem":20,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":20,"code":"(fn [[head1 head2 & tail]] \n  (first (reduce (fn [[_ scnd] el] [scnd el]) [head1 head2] tail))\n  )","user":"6031926ae4b0d5df2af222ac"},{"code":"(fn my-last-2 [lst]\n  (if (<= (count lst) 2)\n    (first lst)\n    (my-last-2 (rest lst))))","problem":20,"user":"5347870be4b084c2834f4a4b"},{"code":"(fn [xs]\n  (if (empty? (rest (rest xs))) (first xs) (recur (rest xs))))","problem":20,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn [seq]\n  (letfn [(lst [seq pen ultim]\n            (if (= seq '()) pen (lst (rest seq) ultim (first seq))))]\n    (lst seq nil nil)))","problem":20,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [x]\n  (first (rest(reverse x)))  \n  )","problem":20,"user":"52824143e4b0757a1b171453"},{"problem":20,"code":"(fn penultimate [lst]\n  \"Returns the second to last element of an ISeq\"\n  (first (rest (reverse lst))))","user":"5c22a12ae4b07e362c23058d"},{"problem":20,"code":"#(.get%(- (count %) 2))","user":"5f9f744fe4b0715f5002d841"},{"problem":20,"code":"(fn second-to-last \n  [array]\n  (let [[x & remaining] array]\n    (if (= (count remaining) 1)\n       x\n       (second-to-last remaining)\n       )\n    )\n  )","user":"5f77c32de4b02876ed9fd0bd"},{"problem":20,"code":"(fn [l]\n  (loop [l l]\n    (if (= '() (rest (rest l)))\n      (first l)\n      (recur (rest l)))))","user":"54638c8fe4b01be26fd746c2"},{"problem":20,"code":"(fn [x]\n  (first (rest (reverse x)))\n )","user":"58b48db1e4b0ebc645576d3e"},{"problem":20,"code":"(fn [xs] ((into [] xs) (- (count xs) 2)))","user":"5b1737c1e4b00d69b768e765"},{"code":"#(if \r\n       (= (count %) 2)\r\n       (first %)\r\n       (recur (rest %)))","problem":20,"user":"4fb50599e4b081705acca2b7"},{"problem":20,"code":"(fn [x] (loop [[h & t] x] (if (= t [(last x)]) h (recur t))))","user":"58152157e4b0f478707a0631"},{"code":"#(nth % (- (count %) 2 ) )","problem":20,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":20,"code":"(fn [xs] \n  (nth xs (- (count xs) 2)))","user":"5bd1364de4b0e9689409ee4b"},{"problem":20,"code":"(fn penultimate-element [list] (nth list (- (count list) 2)))","user":"59124367e4b0163c97b36eeb"},{"code":"(fn my-last [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn [x] (second (reverse x)))","problem":20,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn second-last [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (second-last (rest s))))","problem":20,"user":"503e6047e4b06c4e0e1fa266"},{"code":"(fn [x]\n  (-> x reverse second))","problem":20,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":20,"code":"(fn [subj]\n  (first (rest (reverse subj))))","user":"52a85d20e4b0c58976d9ac2c"},{"code":"(fn [coll]\n  (if (> (count coll) 2)\n    (recur (rest coll))\n    (first coll)))","problem":20,"user":"505bd09fe4b032b709c81373"},{"problem":20,"code":"(fn func [lst] (if (<= (count lst) 2) (first lst) (func (rest lst))))","user":"55216b7ee4b0882d96d09193"},{"problem":20,"code":"(fn penultimate-element\n  [[x y & rest]]\n  (if (empty? rest)\n    x\n    (recur (conj rest y))))","user":"52ea025ae4b09f7907dd14b5"},{"code":"(fn [[x & more]] (if (= 1 (count more)) x (recur more)))","problem":20,"user":"5273c41be4b03e8d9a4a7492"},{"problem":20,"code":"(fn elem [x] \n (nth x (- (count x) 2)))","user":"56688983e4b04acd4f672dee"},{"problem":20,"code":"(fn [t] (nth t (- (count t) 2)))","user":"57780dd8e4b0979f89651656"},{"problem":20,"code":"(fn pe [xs] (first (rest (reverse xs))))","user":"5509a23ee4b06e50f9beb11a"},{"code":"(fn [x](first(rest(reverse x))))","problem":20,"user":"50b8c9bae4b0cba0e598b650"},{"code":"( comp second reverse)","problem":20,"user":"4f5e5975e4b0030a34fb2b4d"},{"problem":20,"code":"#(first (drop (- (count %) 2)\n              %))","user":"55381162e4b09218d5f44fda"},{"problem":20,"code":"#(let [[first second] (reverse %)] second)","user":"59077d7be4b047aa04b1995b"},{"code":"(fn [[a b & c]]\n    (if c\n      (recur (cons b c))\n      a))","problem":20,"user":"50427899e4b0add3005c0fc2"},{"problem":20,"code":"(fn second_last [s]\n  (if (= (count s) 2)\n     (first s)\n     (second_last (rest s))\n   )\n )","user":"54e50f7ce4b024c67c0cf7f6"},{"problem":20,"code":"(fn penultimate [xs] (first (rest( reverse xs))))","user":"560aa7b0e4b05f002753df02"},{"problem":20,"code":"#(get (vec %) (- (count %) 2) )","user":"5dde5364e4b0948ae9d9add2"},{"code":"(fn secondlast [n]\n (nth n (- (count n) 2)))","problem":20,"user":"52296df4e4b04c906c9c6a72"},{"problem":20,"code":"(fn [x]\n  (if(= 2 (count x))\n    (first x)\n    (recur (rest x))))","user":"5550dad4e4b00713264bd9b0"},{"problem":20,"code":"(fn [x] (nth x(dec(dec(count x)))))","user":"59ca7fa3e4b0a024fb6ae599"},{"problem":20,"code":"(fn secondToLast [[x & y]]\n  (if (= 1 (count y)) x\n      (recur y)))","user":"56244b3ae4b0b951f963fc22"},{"code":"(fn [orig-list] (loop [list orig-list]\r\n                  (when (>= (count list) 2)\r\n                    (if (= (count list) 2)\r\n                      (first list)\r\n                      (recur (rest list))))))","problem":20,"user":"52ed4659e4b0a18b0f5dd9ea"},{"code":"(fn [seq] (nth (reverse seq) 1))","problem":20,"user":"5052f384e4b0a561d07d8f25"},{"code":"(fn [x] \n(first (rest (reverse x)))\n)","problem":20,"user":"52599ea5e4b0cb4875a45cdf"},{"code":"(comp first #(take-last 2 %))","problem":20,"user":"4f525fdce4b03ad3f0c10d37"},{"problem":20,"code":"(fn [x]\n\t(if (< (count x) 2)\n      (first x)\n      (nth x (- (count x) 2)))\n  )","user":"5530b827e4b076ab5578f818"},{"problem":20,"code":"(fn [xs]\n  (nth xs (- (count xs) 2 ))\n  )","user":"57513f88e4b02ea114799283"},{"problem":20,"code":"(fn [s] (if (and (next s) (next (next s))) (recur (next s)) (first s)))","user":"596cdd85e4b069c0a1a1983b"},{"problem":20,"code":"(fn [l]\n  (let [sec (-> l (reverse) (rest))]\n    (first sec)))","user":"594f0c93e4b07ddc2dafaec7"},{"problem":20,"code":"(fn [xs] (first (rest (reverse xs))) )","user":"5d35de2ae4b01671435dbd17"},{"problem":20,"code":"(fn [lst] \n  (let [myfun \n        (fn rec [[head & tail] prev] \n          (if (nil? tail) \n              prev\n              (rec tail head))\n        )\n       ]\n          (myfun lst nil)))","user":"55adcc8fe4b03311e7b732ab"},{"problem":20,"code":"(fn [listI]\n  (second (reverse listI)))","user":"5c642102e4b0fca0c1622670"},{"problem":20,"code":"#(.get %(-(count %)2))","user":"58f7b1c6e4b0438e51c2cf1a"},{"problem":20,"code":";(fn [x] (nth (reverse x) 1))\n(comp second reverse)","user":"5f6c331ae4b02876ed9fd054"},{"code":"(fn blah [coll] (second (reverse coll)))","problem":20,"user":"4fedec00e4b0d2a5fc2962eb"},{"problem":20,"code":"(fn second-to-last [list] (if (empty? (rest (rest list))) (first list) (second-to-last (rest list))))","user":"5deab868e4b0986d99407fa1"},{"problem":20,"code":"(fn return_second_last [ls]\n  (if (= [] (rest (rest ls)))\n    (first ls)\n    (return_second_last (rest ls))))","user":"561bcf94e4b064ca9f4b168a"},{"code":"#(->> % reverse rest first)","problem":20,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":20,"code":"(fn [list] (when (< 1 (count list)) (if (= 1 (count (rest list))) (first list) (recur (rest list)))))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn [xs] (last (butlast xs)))","problem":20,"user":"5020d033e4b0cb6ebc0a42fa"},{"problem":20,"code":"#(if (= '() (rest (rest %))) (first %) (recur (rest %)))","user":"548d1d82e4b0e286459a1215"},{"code":"(fn [x] (last (pop (vec x))))","problem":20,"user":"4f516a56e4b03ad3f0c10d23"},{"code":"(fn [x] (cond (= x (list 1 2 3 4 5)) 4 (= x [\"a\" \"b\" \"c\"]) \"b\" (= x [[1 2] [3 4]]) [1 2] \n:else (comment \n  \"Disclaimer: I'm a huge cheating asshole. \"\n) ) )","problem":20,"user":"4f031e58535dcb61093f6a66"},{"problem":20,"code":"(fn[v](nth (reverse v) 1))","user":"60195030e4b0bf4ca6b10920"},{"code":"#(\n  if (empty? (rest (rest %)))\n    (first %)\n    (recur (rest %)))","problem":20,"user":"4fab0c0ae4b081705acca20d"},{"problem":20,"code":"(fn\n  [x]\n  (let\n    [i (- (count x) 2)]\n    (nth x i)))","user":"5a292efde4b07f18be40aa77"},{"problem":20,"code":"(fn [xs]\n    (if (and (next xs) (nnext xs))\n      (recur (next xs))\n      (first xs)))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":20,"code":"(fn [seq] (->> seq (reverse) (drop 1) (take 1) (first)))","user":"5922a513e4b026ae38521286"},{"problem":20,"code":"(fn [lst]\n  (loop [head (first lst) tail (rest lst)]\n    (if (empty? (rest tail))\n      head\n      (recur (first tail) (rest tail)))))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn solve-problem [the-seq]\n  (first (drop 1 (reverse the-seq))))","problem":20,"user":"52b66d98e4b0c58976d9ad46"},{"problem":20,"code":"(fn [seqs]\n  (nth seqs (- (count seqs) 2)))","user":"5db9a6c3e4b010eb3c36cd56"},{"code":"(fn [s] (first (rest(reverse s))))","problem":20,"user":"52a13473e4b04e0c58e87bd5"},{"problem":20,"code":"(fn [m] (-> m (reverse) (rest) (first)))","user":"53d7710be4b0e771c3025462"},{"code":"(fn [x]( first (take-last 2 x)))","problem":20,"user":"50fb1f5ae4b0d10d794c19e1"},{"problem":20,"code":"(fn mylast [s] (first(rest (reverse s))))","user":"606ff56ce4b069485764de21"},{"problem":20,"code":"(fn [s]\n  (if (and (next s) (next (next s)))\n    (recur (next s))\n    (first s)))","user":"54f4adc8e4b0f2f3c5226e86"},{"code":"(fn second-last [l] (if (empty? (rest (rest l))) (first l) (second-last (rest l))))","problem":20,"user":"4e234e72535d04ed9115e822"},{"problem":20,"code":"(fn [sq]\n  (nth sq (- (count sq) 2)))","user":"5d64013ce4b0c9e5857d502d"},{"problem":20,"code":"#(nth % (-> (count %) (- 2)))","user":"59b809c0e4b05c620303ca4c"},{"problem":20,"code":"(fn[seq] (if (= (count seq) 2)\n           (nth seq 0)\n           (recur (rest seq))))","user":"585affbce4b0f14aab7c875f"},{"code":"(fn [s]\n  (let [rev (reverse s)]\n    (first (rest rev))))","problem":20,"user":"529227cfe4b0239c8a67af27"},{"problem":20,"code":"(fn [x] (peek (vec (butlast x))))","user":"5433d3ebe4b0b6b47310fce4"},{"code":"(fn second_last[lst] (first (rest(reverse lst))))","problem":20,"user":"4ee8092f535d93acb0a66875"},{"code":"(fn [x] (first (rest ( reverse x))))","problem":20,"user":"4ef4e0da535dced4c769f240"},{"problem":20,"code":"(fn [xs]\n  (let [[f s & tail] xs]\n    (if (nil? s) \n      nil\n      (if (empty? tail)\n        f\n        (recur (conj tail s))\n        )\n      )\n    )\n  )","user":"54f90537e4b01ecee9d88833"},{"problem":20,"code":"(fn [nums] (first(take-last 2 nums)))","user":"604d6849e4b0b7ec0ac60ac4"},{"code":"(fn [a-list] (second (reverse a-list)))","problem":20,"user":"4e6dc95a535d5021c1a895f1"},{"problem":20,"code":"( fn [col]\n  (get (into [] col) (dec(dec(count col))))\n  )","user":"5fb29949e4b08cb800c85b2a"},{"problem":20,"code":"(fn [x] \n  (first ( take-last 2 x)))","user":"5581747fe4b05c286339e0fa"},{"problem":20,"code":"(fn[x] (first (drop (- (count x) 2) x)))","user":"53c7da9ce4b00fb29b2212ad"},{"problem":20,"code":"(fn [xs]\n  (if (empty? (nthrest xs 2))\n    (nth xs 0)\n    (recur (rest xs))))","user":"5d3e66d4e4b01671435dbd72"},{"code":"(fn [x] (-> x reverse rest first ))","problem":20,"user":"51227a00e4b068a9582e656b"},{"code":"(fn [listy]\n    (loop [\n            current (first listy)\n            left (rest listy)\n          ]\n      (if (= (rest left) ())\n        current\n        (recur (first left) (rest left)))\n      )\n)","problem":20,"user":"4f2525b7e4b0d66497709ff1"},{"code":"(fn [x] ((vec x) (- (count (vec x)) 2)))","problem":20,"user":"4f75f498e4b0fbe0118ec567"},{"code":"(fn\n  [seq]\n  (nth seq (- (count seq) 2)))","problem":20,"user":"51d4b70de4b013d740b70de8"},{"code":"#(.get % (- (count % ) 2 ))","problem":20,"user":"506662a0e4b03d366d7cb2ae"},{"code":"#(peek (vec (butlast %)))","problem":20,"user":"510a3cd4e4b06956752d35ad"},{"code":"(fn [s] \n  (loop [is s]\n    (if (= 2 (count is)) (first is)\n      (recur (rest is)))))","problem":20,"user":"4f038b62535dcb61093f6b1c"},{"problem":20,"code":"(fn [x]  (first (take-last 2 x)))","user":"59078134e4b047aa04b1995c"},{"code":"(fn[x] (.get x (dec (dec (count x)))))","problem":20,"user":"526e4cb6e4b03e8d9a4a7314"},{"problem":20,"code":"(fn second-to-last [[x & xs]]\n  (if (= 1 (count xs)) x\n      (recur xs)))","user":"55452f7de4b0a04f7929952f"},{"problem":20,"code":"(fn\n  [data]\n  (let [[f & others] data\n        total (count others)]\n    (if (<= total 1)\n      (if (= total 0) nil f)\n      (recur others))))","user":"55ad2379e4b03311e7b732a1"},{"code":"(fn[x](-> x reverse rest first))","problem":20,"user":"529952a4e4b02ebb4ef75081"},{"code":"(fn [v] (second (reverse v)))","problem":20,"user":"4e31c695535deb9a81d77f20"},{"problem":20,"code":"(fn [se] \n  (nth se (- (count se) 2))\n  )","user":"5adcc688e4b0837691e92c05"},{"problem":20,"code":"(fn my-penultimate [xs]\n    (loop [head (first xs) tail (rest xs)]\n        (if (= (rest tail) '())\n        head\n        (recur (first tail) (rest tail))\n        )))","user":"57974188e4b039eba2ecb0f4"},{"code":";; comp make a composite function\n(fn penultimate [coll]\n  ((comp second reverse) coll))","problem":20,"user":"53713ed9e4b0fc7073fd6eaf"},{"code":"(fn [c] (let [c c count-c (count c)]\r\n                (nth c (- count-c 2))))","problem":20,"user":"4e028764535d04ed9115e790"},{"problem":20,"code":"(fn [l]\n  (first (next (reverse l))))","user":"552af5ebe4b0ffed3738f95b"},{"problem":20,"code":"#(loop [r  %] \n    (if (> (count r) 2) \n      (recur (rest r))\n      (first r)))","user":"56f51879e4b046a417f92069"},{"problem":20,"code":"(fn get-penultimate [coll] (second (reverse coll)))","user":"5f870432e4b0649ffcda4cae"},{"problem":20,"code":"(fn [s] (if (next (next s)) (recur (next s)) (first s)))","user":"559e7848e4b08a52bd4f97d4"},{"problem":20,"code":"(fn a [lst]\n    (if (empty? (rest (rest lst)))\n      (first lst)\n      (a (rest lst))))","user":"57201f14e4b0c5bde472c08e"},{"code":"(fn my-last [x]\r\n  (if (= (rest (rest x)) ())\r\n      (first x)\r\n      (recur (rest x))))","problem":20,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [v] (first (drop (- (count v) 2) v)))","problem":20,"user":"4eb80331535d7eef3080737b"},{"code":"(fn [x]\n (get (vec x) (- (count x) 2)) \n)","problem":20,"user":"4fdf8f67e4b05e33b9224f9e"},{"problem":20,"code":"(fn penultimate [in]\n  (loop [currSeq in]\n  \t(if (empty? (rest (rest currSeq)))\n    \t(first currSeq)\n    \t(recur (rest currSeq)))))","user":"56c12aa2e4b0839206b9d682"},{"code":"(fn [x](second( reverse x)))","problem":20,"user":"52f3124ee4b05e3f0be25f0a"},{"problem":20,"code":"#(peek (pop (into [] %)))","user":"55afd535e4b002ce9d5cbc1a"},{"problem":20,"code":"(fn [coll]\n\n(nth coll (- (count coll) 2))\n  \n)","user":"598085e6e4b021a7a535fdd3"},{"problem":20,"code":"(fn [col]\n  (loop [cur col]\n    (if (empty? (rest cur))\n      nil\n      (if (empty? (rest (rest cur)))\n        (first cur)\n        (recur (rest cur))))))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":20,"code":"(fn [v]\n  (loop\n    [[penul & tail] v]\n    (if (<= (count tail) 1)\n      penul\n      (recur tail))\n    ))","user":"5e3a8929e4b01d43a70e8de3"},{"code":"(fn slast [x] (if (= (count x) 2)\r\n                  (first x)\r\n                  (slast (rest x))))","problem":20,"user":"502d30b1e4b013c13c6a99f0"},{"problem":20,"code":"(fn prelast [c] (if (= (rest (rest c)) ()) (first c) (prelast (rest c))))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":20,"code":"#(-> %\n         reverse\n         second)","user":"60d5cbb4e4b0d60f5ea6f7e4"},{"problem":20,"code":"(fn [a-seq]\n\t(loop [a-s a-seq]\n\t\t(if (= (.size a-s) 2)\n\t\t\t(first a-s)\n\t\t\t(recur (rest a-s)))))","user":"573eb8f2e4b05c31a32c082f"},{"code":"#(last (reverse (rest (reverse %))))","problem":20,"user":"4db653f6535d1e037afb217c"},{"problem":20,"code":"(fn [lst]\n  (second (reverse lst))\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":20,"code":"(fn secondlast [[x & y]] (if (= 1 (count y)) x (recur y)))","user":"592518e8e4b072a2710fce67"},{"problem":20,"code":"(fn pu [a] (second (reverse a)))","user":"5455573be4b0e397800069e0"},{"problem":20,"code":"(fn sec-to-last [x] (first (rest (reverse x))))","user":"552281cae4b0882d96d0919f"},{"problem":20,"code":"(fn penultimate [x](-> x reverse second))","user":"55953978e4b0c79f6e1db964"},{"problem":20,"code":"(fn letztes [x](if (empty? (rest (rest x)))\n                    (first x)\n                    (letztes (rest x))\n                   )\n )","user":"5bb58390e4b0a20761a2356d"},{"code":"(fn second-last [x]\n(if (< 3(count x)) (first x))\n:else (second (reverse x)))","problem":20,"user":"4f0f335f535d0136e6c22334"},{"problem":20,"code":"#(if (= 2 (count %))\n   (first %)\n   (recur (rest %)))","user":"57377ae8e4b0cd1946bd1046"},{"problem":20,"code":"(fn second-last [x] (nth x (- (count x) 2)) )","user":"6076ba65e4b069485764de61"},{"code":"#(.get %(- (count %)2))","problem":20,"user":"51a34135e4b0ab315a23ba63"},{"code":"(fn [sequence] \n  (let [n (count sequence)]\n    (nth sequence (- n 2))))","problem":20,"user":"4e657c05535d8ccf87e9fe72"},{"code":"(fn penultimate [L]\n     (if (= (count (rest L)) 1)\n       (first L)\n       (penultimate (rest L))))","problem":20,"user":"51f67858e4b06ff1c25c52c5"},{"problem":20,"code":"(fn pen [s]\n  (let [r (rest s)]\n    (if (empty? (rest r))\n      (first s)\n      (pen r))))","user":"5a05dec4e4b01bb0ae8afdc1"},{"problem":20,"code":"(fn ([] nil) ([xs] ((comp second reverse) xs)))","user":"566669d8e4b0e91d5f5c566f"},{"code":"#(loop [the-seq %]\n   (if (empty? (rest (rest the-seq))) (first the-seq)\n     (recur (rest the-seq))))","problem":20,"user":"528e7740e4b0239c8a67aee0"},{"problem":20,"code":"(fn [coll]\n  (last (drop-last 1 coll))\n  )","user":"56a94562e4b07966d5a8a074"},{"problem":20,"code":"(fn foo [theList]\n  (loop [[thePenultimate & theRest] theList]\n    (if (= (count theRest) 1)\n      thePenultimate\n      (recur theRest))))","user":"599e3677e4b0871e7608b809"},{"problem":20,"code":"(fn [[x & more]]\n  (if (= (rest more) '())\n    x\n    (recur more)))","user":"53fc5ec2e4b0de5c4184859e"},{"problem":20,"code":"(fn [xs] (second (rseq (vec xs))))","user":"4db1b3951254ad5b4805fa6f"},{"problem":20,"code":"(fn [col] ( if(or(nil? col)(< (count col) 2)) nil (nth (sort col) (-(count col) 2) )))","user":"5515b68de4b055c2f668d4ef"},{"code":"#(->> % (reverse) (drop 1) (first))","problem":20,"user":"4f032f30535dcb61093f6a73"},{"problem":20,"code":"(fn lastSec [[n & more]]\n     (if (= 1 (count more)) \n       n\n      (recur more)))","user":"5753d779e4b02ea1147992b1"},{"code":"(fn [x] (second (reverse x )))","problem":20,"user":"51bc2f6ae4b0fe3ecfb46452"},{"code":"(fn [aList]\n  (first (reverse (drop-last aList))))","problem":20,"user":"50ef585ae4b0bdaecbb47d97"},{"problem":20,"code":"#(nth %(dec(dec (count %))))","user":"5fcd15d6e4b07e53c2f3eff7"},{"problem":20,"code":"(fn [[head & tail]]\n  (if (empty? (rest tail))\n    head\n    (recur tail)))","user":"5560f39ce4b0c656e3ff17c2"},{"problem":20,"code":"(fn\n  [x]\n  (loop\n    [x x]\n    (if (seq (rest (rest x)))\n      (recur (rest x))\n      (first x))))","user":"573337c3e4b0cd1946bd0feb"},{"problem":20,"code":"(fn scnd[x] (nth x (- (count x) 2)))","user":"5ae84017e4b0837691e92cb4"},{"problem":20,"code":"(fn [aSeq] (second (reverse aSeq)))","user":"548018e3e4b0c51c1f4d7331"},{"code":"(fn [x]\n  (let [cnt (- (count x) 2)]\n  (nth x cnt)\n))","problem":20,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":20,"code":"(fn [[l2 & rest]]\n\t(let [[l1 & l0] rest]\n\t\t(if (empty? l0)\n\t\t\tl2\n\t\t\t(recur rest))))","user":"57d174ede4b0bd073c20236c"},{"problem":20,"code":"(fn[x](nth x (- (count x) 2 )))","user":"547f49fae4b0c51c1f4d731b"},{"problem":20,"code":"(fn get-second-to-last [x] \n  (if (<= (count x) 2) \n    (first x)\n    (get-second-to-last (rest x))))","user":"54c47642e4b045293a27f61d"},{"code":"(fn [x] (nth x (- (.count x) 2)))","problem":20,"user":"527f214de4b0757a1b1713c4"},{"problem":20,"code":"(fn [liste] (second (reverse liste)))","user":"58a82659e4b01a0c0b232951"},{"problem":20,"code":"#(let [[_ x & _] (reverse %)] x)","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":20,"code":"(fn [x](second(reverse x )))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [x] (first(take 1 (drop 1(reverse x)))))","problem":20,"user":"52e01b02e4b09f7907dd140a"},{"code":"(fn [elements]\n  (if (and (not (empty? elements))\n           (not (empty? (rest elements)))\n           (empty? (rest (rest elements))))\n      (first elements)\n      (recur (rest elements))))","problem":20,"user":"4e99108d535dbda64a6f6b62"},{"problem":20,"code":"(fn [x]\n    (if (empty? (rest (rest x)))\n      (first x)\n      (recur (rest x))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"#( first ( rest ( reverse % ) ) )","problem":20,"user":"5079ab69e4b08327cd804a63"},{"problem":20,"code":"(fn pUtm\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (next (next lst))\n      (pUtm (rest lst))\n      (first lst))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn penultimate [x] (nth (reverse x) 1))","problem":20,"user":"523487f9e4b05e80434a505d"},{"problem":20,"code":"(fn [some-seq]\n  (loop [remain some-seq]\n    (if (= 2 (count remain))\n      (first remain)\n      (recur (rest remain)))))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"(fn [x]\n  (cond (> (count x) 1) (nth x (- (count x) 2))\n  :else x))","problem":20,"user":"4e8b557c535d65386fec2119"},{"problem":20,"code":"#(->> % \n      (reverse) \n      (drop 1) \n      (first))","user":"5483d59fe4b0e286459a1194"},{"code":"(fn lol [x]\n  (if (empty? (rest (rest x)))\n      (first x)\n      (lol (rest x))))","problem":20,"user":"4fb04ee2e4b081705acca264"},{"problem":20,"code":"(fn [n] (first (drop 1 (reverse n))))","user":"5a5ad949e4b05d388ecb6cb4"},{"problem":20,"code":"(fn [[a b & c]]\n  (if c (recur (concat [b] c)) a))","user":"5bc935bde4b07a9b28b100d8"},{"problem":20,"code":"(fn [[f s & r]]\n  (if (empty? r)\n    f\n    (recur (cons s r))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":20,"code":"(fn secondToLast [x]\n  (if (= (count x) 2)\n    (first x)\n    (secondToLast (next x))\n  )\n)","user":"57341373e4b0cd1946bd1002"},{"problem":20,"code":"(fn my-seclast\n  [coll]\n  (if (or (empty? coll)\n          (= 1 (count coll)))\n    nil\n    (if (= 2 (count coll))\n      (first coll)\n      (my-seclast (rest coll)))))","user":"55ee7977e4b0121d4835fdee"},{"problem":20,"code":"#(nth % \n      (- (count %)\n         2) \n       1)","user":"56d9883ae4b0ea9b8538f7f4"},{"problem":20,"code":"(fn [col] (loop [x col y 0]\n            (if (= (first x) (last x))\n              y\n              (recur (rest x) (first x)))))","user":"5753b6c6e4b02ea1147992af"},{"code":"(fn snd_last [x]\n  (if (= (count x) 2)\n      (first x) (snd_last (rest x))))","problem":20,"user":"4f039cd3535dcb61093f6b3b"},{"problem":20,"code":"(fn\n  [seq]\n  (nth seq (dec (dec (count seq)))))","user":"54fea37be4b07d26eda61d44"},{"problem":20,"code":"(fn [mylist] (first (take-last 2 mylist)))","user":"54b63539e4b05787c3b163b4"},{"code":"(fn next_to_last [x] (first(rest(reverse x))))","problem":20,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn hoge [s]\n  (if (= 2 (count s))\n    (first s)\n    (hoge (rest s))))","problem":20,"user":"50d4309de4b09cc622d65a66"},{"problem":20,"code":"#(loop [l %]\n   (if (= 2 (count l))\n     (first l)\n     (recur (next l))))","user":"5d929ceae4b0915913b1d412"},{"code":"(fn pen [x] (nth (reverse x) 1))","problem":20,"user":"522048b3e4b0e6c71e0c0c16"},{"code":"#(if (= 2 (count %)) (first %) (recur (rest %)))","problem":20,"user":"4eaf08ce535d7eef3080732d"},{"problem":20,"code":"(fn [sq]\n    (second (reverse sq)))","user":"5c165d3ee4b01240ff5671d1"},{"problem":20,"code":"(fn [myVec] (nth myVec (-> (count myVec) (- 2))))","user":"5cf9bfd9e4b0cc9c91588131"},{"code":"(fn [S] (second (reverse S)))","problem":20,"user":"4fda016ae4b05e33b9224f42"},{"problem":20,"code":"(fn second-last [ls]\n  (loop [xs ls]\n    (if (empty? (rest (rest xs)))\n      (first xs)\n      (recur (rest xs)))))","user":"5689fd03e4b0dcc4269f4088"},{"problem":20,"code":";#(->> % reverse (drop 1) first)\n;(comp first (partial drop 1) reverse)\n(comp second reverse)","user":"54dce62be4b024c67c0cf78b"},{"code":"(fn [s] ((comp #(nth % 1) reverse) s))","problem":20,"user":"4f0478b0535dcb61093f6bcb"},{"problem":20,"code":"(fn x\n  [[head & tail]]\n  (let [[head2 & tail2] tail]\n  (if (empty? tail2)\n    head\n    (x tail)\n    )\n    )\n  )","user":"54410a71e4b032a45b869367"},{"code":"(fn rec [c] \n  (if (= 2 (count c)) \n    (first c) \n    (rec (rest c))))","problem":20,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn [col] (second ( reverse col)))","problem":20,"user":"5041b3c0e4b06d8231e4facf"},{"problem":20,"code":"(fn[x] (nth x ( - (count x) 2 )))","user":"5daed3d8e4b0f8c104ccfc8e"},{"problem":20,"code":"#(first (take 1 (drop 1 (reverse %))))","user":"5342f075e4b084c2834f4a14"},{"problem":20,"code":"(fn ls [se] (nth se (- (count se) 2)))","user":"5c337305e4b0d62ef62d9f48"},{"code":"#(last (drop-last 1 %))","problem":20,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn second-to-last [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"510d59cce4b078ea71921134"},{"problem":20,"code":"(fn [l]\n   (if (<= (count l) 2)\n     (first l)\n     (recur (rest l))))","user":"590b3aeae4b047aa04b199d0"},{"problem":20,"code":"#(nth % (dec( dec (count %))))","user":"58677770e4b0f14aab7c887b"},{"problem":20,"code":"(fn second_to_last\n  [the_list]\n  (nth the_list (- (count the_list) 2)))","user":"5573392fe4b0aa18f790f3f8"},{"problem":20,"code":"(fn penultimate [aseq]\n  (second (reverse aseq)))","user":"5c970820e4b048ec896c5a68"},{"problem":20,"code":"(fn [seq] (nth seq (- (count seq) 2) ) )","user":"593d63f7e4b069cdc2982ba5"},{"code":"#(last (drop-last %))","problem":20,"user":"4def301c535d08e6dec9fe12"},{"code":"(fn [[a b & c]]\n  (if (nil? c)\n      a\n      (recur (cons b c))))","problem":20,"user":"4f36f5f2e4b0e243712b1ece"},{"problem":20,"code":"(fn penultimate [[f s & r]] (if (empty? r) f (penultimate (cons s r))))","user":"55229495e4b0882d96d091a4"},{"code":"(fn pen [seq]\n  (cond\n    (or (empty? seq)\n        (empty? (rest seq))) '()\n    (= (count (rest seq)) 1) (first seq)\n    :else (pen (rest seq))))","problem":20,"user":"50b61e7ae4b0e3a8b79a9a68"},{"problem":20,"code":";#(nth % (-(count %) 2))\n#(nth (vec %) (-(count (vec %)) 2))","user":"59c77511e4b0a024fb6ae545"},{"problem":20,"code":"(comp (fn [[one two]] two) reverse)","user":"5f3ca097e4b004f08c61c546"},{"code":"#(let [[fi & re] (reverse %)] (first re))","problem":20,"user":"52c1566fe4b07a9af5792364"},{"problem":20,"code":"(fn get-pen [x] (first (take-last 2 x)))","user":"54c9237be4b045293a27f65a"},{"problem":20,"code":"(fn mypenlast [s]\n  (if (<= (count s) 2)\n    (first s)\n    (mypenlast (rest s))))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":20,"code":"(fn\n  [arr]\n  (first (take-last 2 arr)))","user":"60593916e4b07e92fa001acc"},{"code":"(fn [foo] (nth foo (- (count foo) 2)))","problem":20,"user":"4eddc5f4535d10e5ff6f532c"},{"code":"#((vec %) (-> (count %) (- 2 )))","problem":20,"user":"4ff99f47e4b0678c553fc3aa"},{"problem":20,"code":"(fn [lst] (if (= 2 (count lst)) \n\t\t\t\t\t(first lst) \n\t\t\t\t\t(recur (rest lst))\n\t\t\t))","user":"55d0a3c4e4b0e31453f64a3e"},{"code":"#(last (butlast (sort %)))","problem":20,"user":"505e3b57e4b011187b721f39"},{"problem":20,"code":"(\n  fn pen [x] (\n               if (= (count x) 2) (first x) (pen (rest x))\n  )\n)","user":"5f70b752e4b02876ed9fd080"},{"code":"(fn penult [l] (first (rest (reverse l))))","problem":20,"user":"505ad56de4b021387fb8985b"},{"problem":20,"code":"(fn second-last [x] (if (= (count x) 2) (first x) (second-last (rest x))))","user":"56078b7be4b08b23635d3181"},{"problem":20,"code":"(fn f [[x y & z]] (or (and (nil? z) x) (f (conj z y))))","user":"586631a2e4b0f14aab7c885a"},{"code":"(fn second-to-last [x] (second (reverse x)))","problem":20,"user":"52be24cae4b07a9af5792317"},{"problem":20,"code":"(comp first\n     (partial take-last 2))","user":"5e12b21be4b099d064962feb"},{"problem":20,"code":"(fn [r](if (= 2 (count r)) (first r) (recur (rest r))))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [item] (second (reverse item)))","problem":20,"user":"527bf2fbe4b03e8d9a4a75a2"},{"problem":20,"code":"#(.get % (dec (dec(count %))))","user":"5451eb12e4b0e397800069b8"},{"code":"(fn [s] \n  (if (= (count s) 2)\n      (first s)\n      (recur (rest s))))","problem":20,"user":"534ad82be4b084c2834f4a72"},{"code":"(fn [x] (nth (vec x) (- (count x) 2)))","problem":20,"user":"4eb92051535dfed6da9c6d4c"},{"problem":20,"code":"(fn find-penult\n  [coll]\n  (if (= (count coll) 2)\n    (first coll)\n    (find-penult (rest coll))))","user":"5aa4a1ffe4b0d174b936c886"},{"code":"(fn newlast\n  [x]\n  (second (reverse x)))","problem":20,"user":"51212cfce4b0ca414459ae95"},{"code":"(fn penultimate [sequence]\n  (if (= 2 (count sequence))\n    (first sequence)\n    (recur (rest sequence))))","problem":20,"user":"4e77f1f6535d324fb2983d73"},{"code":"(fn [s] (nth s (dec (dec(count s)))))","problem":20,"user":"526c669be4b03e8d9a4a728f"},{"code":"(fn[x] (first( rest (reverse x))))","problem":20,"user":"50368595e4b0af0658af779d"},{"problem":20,"code":"(fn second-to-last [xs]\n  (nth (reverse xs) 1))","user":"594c2950e4b07ddc2dafae5c"},{"code":"(fn [coll]\n  (if-not (next (next coll))\n    (first coll)\n    (recur (next coll))))","problem":20,"user":"50e1b933e4b019fc399ce17e"},{"problem":20,"code":"(fn[x] (nth x (+ -2 (count x))))","user":"5ac9057fe4b0e27600da77bb"},{"problem":20,"code":"(fn stl [n] (second (reverse n)))","user":"5d125d63e4b02c15ef021999"},{"code":"(fn [lst] (if (= 2 (count lst))\n(first lst)\n(recur (rest lst))))","problem":20,"user":"50563ae2e4b0ce54f56f0405"},{"problem":20,"code":"(fn second-last [xs]\n  (if (next (next xs))\n    (recur (next xs))\n    (first xs)))","user":"569ce7e6e4b0542e1f8d146d"},{"code":"(fn [list] (let [tmp (rest list)] (if (= (rest tmp) '()) (first list) (recur tmp))))","problem":20,"user":"4edfb618535d10e5ff6f5343"},{"problem":20,"code":"(fn [param1] (if (= (count (rest param1)) 1) (first param1) (recur (rest param1))))","user":"5e3121e5e4b05b4b01516221"},{"problem":20,"code":"(fn p [[pen unused2 & others]] (if (empty? others) pen (p (conj others unused2))) )","user":"54c29d35e4b045293a27f606"},{"problem":20,"code":"(fn l [x]\n          (if (empty? (rest (rest x)))\n            (first x)\n            (l (rest x))))","user":"56acca9ae4b03c432f18734c"},{"code":"(fn [xs]\n  ((fn from-last [n xs]\n    (if (empty? (drop n xs))\n      (first xs)\n      (from-last n (drop 1 xs))\n    )\n  ) 2 xs)\n)","problem":20,"user":"51e6c413e4b0730ab87cf33b"},{"code":"(fn [param] (peek (pop (vec param))))","problem":20,"user":"52c57371e4b0c2d177d620f3"},{"code":"#(get (into [] %) ( - (count (into [] %)) 2) )","problem":20,"user":"520b4b95e4b0b022ef140c80"},{"problem":20,"code":"(fn \n  [sequence]\n  (nth sequence (- (count sequence) 2))\n  )","user":"5f7981d9e4b02876ed9fd0c8"},{"problem":20,"code":"(fn get_last [x] (nth x (-(count x) 2)))","user":"53ee83f9e4b0d648e757f4d0"},{"problem":20,"code":"(fn pen-ultimate\n  [col]\n  (if (= (count col) 2) (first col) (pen-ultimate (rest col))))","user":"5c36d110e4b0d62ef62d9f6a"},{"problem":20,"code":"(fn [[x & xs]]\n  (if (= 1 (count xs)) x\n    (recur xs)))","user":"57e3e832e4b0bfb2137f5aae"},{"code":"(fn [[h & [_ & t :as rest]]]\n  (if-let [s (seq t)]\n    (recur rest)\n    h))","problem":20,"user":"500574d9e4b0678c553fc463"},{"problem":20,"code":"(fn drill \n  [elms] \n  (if (= (count elms) 2)\n     (first elms) \n    (drill (rest elms))))","user":"5fc06531e4b0edf42a5593c8"},{"problem":20,"code":"(fn next-to-last [xs]\n  (if (= 2 (count xs))\n    (first xs)\n    (next-to-last (rest xs))))","user":"525890f7e4b0cb4875a45cb5"},{"code":"(fn penul [x]\n  (if (= x [])\n    nil\n    (if (= [] (rest x))\n      nil\n      (if (= [] (rest (rest x)))\n        (first x)\n        (penul (rest x))))))","problem":20,"user":"52f92349e4b047fd55836fe4"},{"code":"(fn lastone [x] (nth x (- (count x) 2) ))","problem":20,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [x] (loop [x x] (if (= (count x) 2) (first x) (recur (rest x)))))","problem":20,"user":"53012382e4b0d8b024fd3718"},{"code":"(comp second reverse)","problem":20,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":20,"code":"(fn sndlst\n  [sq]\n  (let [L (-> sq count dec)]\n    (if (> L 0) (nth sq (dec L)) nil)))","user":"588e4e05e4b00487982d5188"},{"code":"(fn penult [l] \n  (second (reverse l)))","problem":20,"user":"4e858eec535db62dc21a62ed"},{"problem":20,"code":"(fn [ myseq ] (first (rest (reverse myseq))))","user":"5a781494e4b013a48d399766"},{"code":"(fn [xs] (-> xs reverse second))","problem":20,"user":"4f9c7b0fe4b0dcca54ed6d1c"},{"problem":20,"code":"(fn [col] (first (rest (reverse col))))","user":"547b4ec6e4b0c51c1f4d72d5"},{"code":"(fn myLast [lst] ( if( = (count lst) 2 ) (first lst) (myLast (rest lst)) ))","problem":20,"user":"4fc4f073e4b081705acca35b"},{"problem":20,"code":"(fn [args] \n  (first \n   (drop (- (count args) 2) args)))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":20,"code":"(fn [x]\n  (first \n   (rest \n    (reverse x))))","user":"5bba908fe4b0a20761a235ee"},{"code":"#(first (rest (reduce conj '() %)))","problem":20,"user":"50d4593ee4b09cc622d65a68"},{"problem":20,"code":"(fn [x] (second (reverse x) ))","user":"58817d3ae4b0f1effa3b763b"},{"code":"(fn [coll]\n  (loop [c coll]\n    (cond (nil? c) nil\n          (and (not (nil? (next c))) (nil? (nnext c))) (first c)\n          :else (recur (next c)))))","problem":20,"user":"4ee8b9c9535d93acb0a66884"},{"problem":20,"code":"(fn [[x y & more]]\n  (if (nil? more) x (recur (cons y more))))","user":"565f8fd2e4b068f2fe63dc41"},{"problem":20,"code":"(fn func [x] (if (empty? (rest (rest x))) (first x) (func (rest x))))","user":"56cef5e8e4b0ea9b8538f762"},{"code":"(fn [sec] (\n\tfirst (rest (reverse sec))))","problem":20,"user":"5266db2be4b03e8d9a4a714a"},{"problem":20,"code":"#(->\n  %\n  (reverse)\n  (rest)\n  (first))","user":"570dd7ece4b0b0fb43fd06e1"},{"code":"(fn [x] (second(reduce conj '() x)))","problem":20,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn [lst] (last (butlast lst)))","problem":20,"user":"4e68dbd5535d8ccf87e9fe8f"},{"code":"(fn beh [x] \n  (if (= 2 (count x)) (first x)\n(beh (rest x))))","problem":20,"user":"52747090e4b03e8d9a4a74a5"},{"problem":20,"code":"(fn \n  [[var & input]]\n   (if (nil? (second input)) var (recur input)))","user":"5c34f7efe4b0d62ef62d9f5b"},{"problem":20,"code":"(fn [coll] (last(drop-last coll)))","user":"59468341e4b07ddc2dafad86"},{"code":"(fn mypenult [l]\n  (if (> (count l) 2)\n(recur (rest l))\n(first l)))","problem":20,"user":"4ee95013535d93acb0a6688d"},{"code":"(fn nexttolast [x] (nth (rest (reverse x)) 0))","problem":20,"user":"53504a7de4b084c2834f4ad9"},{"problem":20,"code":"(fn [mySeq] (loop [in mySeq] (if (nil? (second (rest in))) (first in) (recur (rest in)))))","user":"5bd297fee4b0e9689409ee63"},{"code":"(fn f [l] (if (= nil (second (rest l))) (first l) (f (rest l))))","problem":20,"user":"522e4baae4b01cdb292c5f00"},{"problem":20,"code":"(fn [l]\n  (loop [[car & cdr] l]\n    (if (empty? (rest cdr))\n        car\n        (recur cdr))))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn\n    [x]\n    (if (> (count x) 2)\n        (recur (rest x))\n        (first x)))","problem":20,"user":"4f4daa4ae4b03ad3f0c10cac"},{"code":"#(second (reduce (fn [a, e] [e (first a)]) [(first %1)] %1))","problem":20,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn [anArray] (second (reverse anArray)))","problem":20,"user":"4ec3f4a7535dcc7ae8597d5e"},{"problem":20,"code":"#(let [r (rest %) r2 (rest r)]\n   (if (empty? r2)\n     (first %)\n     (recur r)\n     )\n   )","user":"58c93089e4b021aa9917ed9b"},{"code":"(fn [x] (->> (reverse x) (take 2) (last)))","problem":20,"user":"50eff03ce4b0bdaecbb47da1"},{"problem":20,"code":"(fn [[h & t]]\n  (if (seq (rest t))\n    (recur t)\n    h))","user":"55f358a2e4b06e875b46ce5c"},{"problem":20,"code":"#(first (take-last  2 %))","user":"562326cbe4b03f08ee9a9230"},{"code":"(fn p [x] (if (= 2 (count x)) (first x) (p (rest x))))","problem":20,"user":"510c8a00e4b078ea7192111f"},{"code":"(fn [x]\n  (loop [x x]\n    (if (= 2 (count x))\n      (first x)\n      (recur (rest x))\n    )\n  )\n)","problem":20,"user":"4fc5273ce4b081705acca37f"},{"problem":20,"code":"(fn [col] (first (nthrest (reverse col) 1)))","user":"5709eacde4b0b0fb43fd06b3"},{"problem":20,"code":"(fn [lst]\n  (first (drop 1 (reverse lst))))","user":"59e55cc8e4b08badc2a0c555"},{"problem":20,"code":"(fn [x](first (drop (- (count x) 2) x)))","user":"5cc7ac97e4b0ccb06196283c"},{"problem":20,"code":"(fn [coll]\n   (first (drop (- (count coll) 2) coll)))","user":"598425c8e4b021a7a535fe23"},{"code":"#( let[ [_ c] (reverse % )] c)","problem":20,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn [a-seq]\n  (second (reverse a-seq)))","problem":20,"user":"531dc21be4b08068f379edb1"},{"code":"(comp peek vec pop vec)","problem":20,"user":"4e7ec984535db169f9c7971c"},{"problem":20,"code":"(fn get-2-last [s] (if (= 2 (count s)) (first s) (get-2-last (rest s))))","user":"57e56da8e4b0bfb2137f5ad6"},{"problem":20,"code":"(fn [lst] (second(reverse lst)))","user":"5a99cab6e4b0d174b936c7b2"},{"problem":20,"code":"(fn second-to-last [x]\n  (if (= 2 (count x))\n    (first x)\n    (second-to-last (rest x))))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [list]\n  (if (= (count list) 2)\n    (first list)\n    (recur (rest list))))","problem":20,"user":"4f0f3830535d0136e6c22338"},{"code":"(fn [data] (last (butlast data)))","problem":20,"user":"4fd6e70fe4b0dab7d829f379"},{"problem":20,"code":"#(nth (vec (reverse %)) 1)","user":"53abf519e4b047364c044456"},{"code":"(fn penl [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (penl (rest x))))","problem":20,"user":"4f8d340be4b02e764a0a51a8"},{"code":"(fn end [x] \n  (if (= 2 (.size x))\n    (first x)\n    (end (rest x))\n    )\n  )","problem":20,"user":"512044bbe4b0e88f5a20c40d"},{"code":"(fn [x] (second (vec ( reverse x))))","problem":20,"user":"4ead76b7535d7eef30807320"},{"problem":20,"code":"(fn f [l]\n  (let [r (rest l)]\n  (if (second (rest l))\n    (f (rest l))\n    (first l)))\n)","user":"55cfa46ce4b0e31453f64a31"},{"problem":20,"code":"(fn secondtolast [input] (nth input (- (count input) 2)))","user":"5afdb2bae4b0cc2b61a3bd1f"},{"code":"#(first(rest(reverse%)))","problem":20,"user":"4ff5cffce4b0678c553fc371"},{"problem":20,"code":"(fn [s]\n  (loop [head (first s) tail (rest s)]\n    (if (= 1 (count (take 2 tail)))\n      head\n      (recur (first tail) (rest tail)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":20,"code":"(fn [l] (let [x (next l)] (if (and x (next x)) (recur x) (first l))))","user":"5fc241c1e4b0edf42a5593d1"},{"problem":20,"code":"(fn [seq]\n  (loop [[first & rest] seq\n         prev nil]\n    (if (nil? rest)\n      prev\n      (recur rest first))))","user":"5c195cb2e4b01240ff5671f7"},{"problem":20,"code":"(fn [x] (-> x reverse  second))","user":"5aab7b72e4b073f177442558"},{"code":"(fn [col] (nth (reverse (seq col)) 1))","problem":20,"user":"4e72dd5d535d5021c1a89667"},{"code":"(fn [seq] (.get seq (- (count seq) 2)))","problem":20,"user":"51a7b4fee4b0da5f497bde8b"},{"code":"(fn [x] (second (reverse x)) )","problem":20,"user":"4eb2c45e535d7eef3080734d"},{"code":"(fn second-last [x] (if (seq (rest (rest x))) (second-last (rest x)) (first x)))","problem":20,"user":"5342faf9e4b084c2834f4a16"},{"problem":20,"code":"(fn [secuencia] (nth secuencia (- (count secuencia) 2)))","user":"5f8b7506e4b0715f5002d74c"},{"problem":20,"code":"(fn [s] (second (reverse (vec s))) )","user":"55b92282e4b01b9910ae29bf"},{"code":"(fn [coll]\r\n  (loop [coll coll a nil]\r\n    (or (and (empty? (rest coll)) a)\r\n        (recur (rest coll) (first coll)))))","problem":20,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":20,"code":"(fn [v] (nth v (dec (dec (count v)))))","user":"53fbcec3e4b0de5c41848585"},{"code":"(fn cust_last [xs]\r\n  (cond (nil? (nnext xs)) (first xs)\r\n        :else (cust_last (next xs))))","problem":20,"user":"4e243bcb535d04ed9115e825"},{"problem":20,"code":"(fn [ss] (first (rest (reverse ss))))","user":"54635083e4b01be26fd746bd"},{"code":"(fn [lst] (second ( reverse lst )))","problem":20,"user":"53a5c7ffe4b0ef122a8689c4"},{"code":"(fn [x] (if (next (next x)) (recur (next x)) (first x)))","problem":20,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [l]  (first (rest (reverse l))))","problem":20,"user":"4ee26f01535d10e5ff6f5368"},{"problem":20,"code":"(fn [s] (if (> (count s) 2)\n                    (recur(rest s))\n                    (first s))\n            )","user":"5727cf87e4b0c5bde472c147"},{"problem":20,"code":"(fn [seq]\n  (loop [[i & r] seq]\n    (if (empty? (rest r))\n      i\n      (recur r))))","user":"5566cf7fe4b0c656e3ff1836"},{"problem":20,"code":"(fn dosia [xs] (if (empty? (rest (rest xs))) (first xs) (dosia (next xs))))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [c] (if (= 2 (count c)) (first c) (recur (next c))))","problem":20,"user":"4e970e6a535dbda64a6f6b4e"},{"code":"(fn grope2 [[tits balls & ass]]\n  (if (empty? ass)\n    tits\n    (grope2 (conj ass balls))))","problem":20,"user":"53120cb5e4b08068f379ecf0"},{"problem":20,"code":"(fn [lst] (last (drop-last lst)))","user":"59b2e383e4b0e1f4e384c903"},{"problem":20,"code":"(fn [seq]\n    (nth seq (-\n              (count seq)\n              2)))","user":"52b2f9cae4b0c58976d9acfb"},{"code":"(fn [s]\n  (last (drop-last s)))","problem":20,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":20,"code":"(fn second-to-last [x] (if (= (count x) 2) (first x) (second-to-last (rest x))))","user":"55962e92e4b0c79f6e1db976"},{"code":"#(first (take-last 2%))","problem":20,"user":"5099094de4b0cae2931060a8"},{"code":"(fn [x]\n  (nth x\n  (- (count x) 2)\n    ))","problem":20,"user":"4e9dd9ab535dbda64a6f6b8d"},{"problem":20,"code":"(fn penultimate [xs]\n  (nth xs (- (count xs) 2)))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn [[a b & remaining]]\n  (if (nil? remaining)\n    a\n    (recur (conj remaining b))))","problem":20,"user":"53325956e4b019098a6f8b74"},{"code":"(fn[s] (first (take-last 2 s)))","problem":20,"user":"4f098146535dcb61093f6c48"},{"code":"(fn [coll]\n  (nth coll (- (count coll) 2)))","problem":20,"user":"4e1c2e16535d04ed9115e804"},{"code":"#(first\n (next (reduce conj () %1)))","problem":20,"user":"50a191f4e4b08df8156e9e6a"},{"problem":20,"code":"(comp last pop (partial into []))","user":"56598476e4b068f2fe63dbec"},{"problem":20,"code":"(fn last-two [li]\n  (if (= (count li) 2)\n    (first li)\n    (last-two (rest li))\n   )\n )","user":"551c02fbe4b07993ea3788d8"},{"problem":20,"code":"(fn [seq0] (nth seq0 (- (count seq0) 2)))","user":"54524afbe4b0e397800069bc"},{"problem":20,"code":"(fn laster [lst] (if (= '() (rest (rest lst))) (first lst) (laster (rest lst))))","user":"57af3510e4b0fbc9809a272d"},{"problem":20,"code":"(fn [x] (if (sequential? x) (second (reverse x))))","user":"5cb0e2fee4b026601754b8bf"},{"code":"#( ->> % reverse second)","problem":20,"user":"4e94addc535dbda64a6f6b21"},{"problem":20,"code":"(fn [c] (let [size (count c)]\n          (nth c (- size 2))))","user":"59d77634e4b0ef0a1e9b5c34"},{"code":"(fn get-last [s] (if (> (count s) 2) (get-last (rest s)) (first s)))","problem":20,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":20,"code":"(fn penult [x] (if (= (count x) 2) (first x) (penult (next x))))","user":"5ceca436e4b0a17bb84e2bf8"},{"code":"(fn penultimate\n  [input]\n  (nth input (dec (dec (count input)))))","problem":20,"user":"5300b750e4b0d8b024fd3711"},{"code":"(fn foo[x] ( nth x (- (count x) 2)))","problem":20,"user":"4e78c2ba535db95036265723"},{"code":"(fn [x]\n  (let [ttl (- (count x) 2)]\n    (nth x ttl)))","problem":20,"user":"4ea57300535d7eef308072d5"},{"code":"(fn [list-x] (nth (reverse list-x) 1))","problem":20,"user":"51d821d8e4b0154f82ab930a"},{"code":"(fn [s]\n  (if (= (.size s) 2)\n     (first s)\n   (recur (rest s))))","problem":20,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":20,"code":"(fn lst [s] (if (next (next s)) (recur (next s)) (first s)))","user":"5649b1b0e4b0284900eef646"},{"problem":20,"code":"(fn [thing] (nth thing (- (count thing) 2)))","user":"55b544e2e4b01b9910ae2986"},{"problem":20,"code":"(fn plop [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (plop (rest x))))","user":"593d6793e4b069cdc2982ba6"},{"code":"(fn [ls]\r\n  (if (= (count ls) 2)\r\n    (first ls)\r\n    (recur (rest ls))))","problem":20,"user":"4e5c538c535d8a8b8723a2c0"},{"problem":20,"code":"(fn [ob] (nth ob (- (count ob) 2)))","user":"56305383e4b073c1cf7a9be6"},{"problem":20,"code":"(fn [s]\n  (loop [s s\n         l nil]\n    (if (seq (rest s))\n      (recur (rest s) (first s))\n      l)))","user":"56a655dbe4b0542e1f8d14eb"},{"code":"(fn [s]\n  (let [n (next s)]\n    (if (= n (list (last s)))\n      (first s)\n      (recur n))))","problem":20,"user":"4ecdaf47535d23f036227708"},{"code":"#(loop [result nil col %1 cur 0 i (- (count col) 1)]\n            (if (= i cur)\n              result\n              (recur (first col)(rest col) (inc cur) i)))","problem":20,"user":"518ccf6be4b05e6c8537e386"},{"problem":20,"code":"(fn \n    [x]\n    (let [x2 (vec x)]\n      (x2 (- (count x2) 2))))","user":"5d6e4d1ee4b04d129b00f2c4"},{"code":"(fn [x] (first(take-last 2 x)))","problem":20,"user":"50054b5ce4b0678c553fc45f"},{"code":"(fn r [x] (cond \n         (nil? (nnext x)) (first x)\n         :else (r (rest x))\n    ))","problem":20,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn [s] (nth s (- (count s) 2) ))","problem":20,"user":"52da0712e4b09f7907dd13b2"},{"code":"(fn yy [x] (nth x (- (count x) 2) ))","problem":20,"user":"4f85d497e4b033992c121c4b"},{"code":"#(first (rest (reverse %1)))","problem":20,"user":"4df11fb2535d08e6dec9fe1a"},{"code":"(fn [x]\n  (first (drop 1 (reverse x)))\n  )","problem":20,"user":"4ee02256535d10e5ff6f534e"},{"code":"(fn stl [x] (if (nil? (nnext x)) (first x) (recur (next x))))","problem":20,"user":"4de0ff03535d08e6dec9fde4"},{"problem":20,"code":"(fn test [x] (first (rest (reverse x))))","user":"561c57b9e4b064ca9f4b1697"},{"problem":20,"code":"(fn [a] (second (take-nth (- (count a) 2) a)))","user":"5655e056e4b0f9d632dd849b"},{"problem":20,"code":"(fn [ls]\n  (if (empty? (next (next ls)))\n    (first ls)\n    (recur (rest ls))))","user":"53b8b37be4b047364c0444e1"},{"problem":20,"code":"(fn my-penultimate\n  [[first & rest]]\n  (if-not (next rest)\n    first\n    (recur rest)))","user":"5d8a0d8fe4b0915913b1d3c6"},{"problem":20,"code":"(fn take-last [col] (second (reverse col)))","user":"58daae01e4b0a4d5acaab664"},{"code":"(fn [a] (second (reverse a)))","problem":20,"user":"5055e36be4b0ce54f56f0400"},{"code":"#(->> % reverse second)","problem":20,"user":"4e8e8c24535d65386fec2143"},{"problem":20,"code":"(fn pen\n  [list]\n  (if (= (count list) 2)\n    (first list)\n    (pen (rest list))))","user":"556be3dce4b09a3098a524f7"},{"problem":20,"code":"(fn [lst] (if (= 2 (count lst))\n          (first lst)\n          (recur (rest lst))\n        )\n)","user":"5596d885e4b04c1e5c31d75a"},{"code":"(fn pen [l]\n  (if (empty? (rest (rest l)))\n      (first l)\n      (pen (rest l))))","problem":20,"user":"505024a4e4b0a02f9cffdeb4"},{"problem":20,"code":"(fn [c] ((vec c) (- (count c) 2)))","user":"54c8c1f2e4b045293a27f650"},{"problem":20,"code":"(fn last_elem [xs]\n  (loop [ret (first xs) xs xs]\n    (if (next xs)\n      (recur (first xs) (next xs))\n      ret)))","user":"545e5805e4b01be26fd74679"},{"problem":20,"code":"(fn penultimate [l]\n  (if (= 1 (count (rest l)))\n    (first l)\n    (recur (rest l))))","user":"4f0f0e33535d0136e6c2232e"},{"problem":20,"code":"(fn penultimate\n  [x]\n  (let [head (first x)\n        tail (rest x)]\n    (cond\n     (= (count tail) 1) head \n     :else (penultimate tail))))","user":"4f4391a9e4b0d7d3c9f3fd23"},{"problem":20,"code":"(fn [x] (nth  x (- (count x) 2)) )","user":"59f6ce5de4b0966464fe6adc"},{"code":"(fn second-to-last [s]\n  (if (= 1 (count (rest s)))\n    (first s)\n    (recur (rest s))))","problem":20,"user":"53098be4e4b02e82168697b7"},{"problem":20,"code":"(fn\n            [coll]\n            (if (= 2 (count coll))\n              (first coll)           \n              (recur (rest coll))\n            )\n         )","user":"55f9b634e4b03cbcff9738c9"},{"problem":20,"code":"(fn last-elem\n  [seq]\n  (let [myVec (into [] seq)]\n    (get myVec (- (count myVec) 2))))","user":"5e64c1f2e4b0fd0acd1586ad"},{"problem":20,"code":"(fn pen [seq]\n  (if (= (count (rest seq)) 1)\n    (first seq)\n    (pen (rest seq))))","user":"5b608087e4b0c6492753e700"},{"problem":20,"code":"(fn [x]\n  (nth x (- (count x) 2))\n  )","user":"5499e26ae4b03163384f4707"},{"problem":20,"code":"(fn my-last [x]  (nth x (- (count x) 2)))","user":"55f32f7ce4b06e875b46ce54"},{"code":"(fn ult [x] (second (reverse x)))","problem":20,"user":"4e8b7427535d65386fec2122"},{"problem":20,"code":"#(.get % (- (count %) 2) )","user":"58694f69e4b0f14aab7c889f"},{"problem":20,"code":"(fn [coll]\n (-> coll\n  (reverse)\n  (rest)\n  (first)))","user":"58ac0612e4b0005cfeb1a73c"},{"problem":20,"code":";;(fn penultimate [lista] \n;;     (if (>= 2 (count lista))\n;;         (first lista)\n;;         (penultimate (rest lista))))\n\n#(second (reverse %))","user":"565487dce4b0f9d632dd8482"},{"problem":20,"code":"(fn testy [x] (nth x (- (count x) 2)))","user":"559e830fe4b08a52bd4f97d5"},{"problem":20,"code":"#(last(take (-(count %)1) %))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn zz [l]\n  (if (= nil (second (rest l)))\n    (first l)\n    (zz (rest l))))","problem":20,"user":"51cdec45e4b0e42293a2254f"},{"problem":20,"code":"(fn penult [l]\n  (cond\n    (or (empty? l) (empty? (rest l))) '()\n    (empty? (rest (rest l))) (first l)\n    :else (penult (rest l))))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"problem":20,"code":"#(nth (seq %1) (- (count (seq %1)) 2))","user":"5f74b0c5e4b02876ed9fd0a2"},{"problem":20,"code":"(fn [l]\n  (loop [l' l]\n    (if (= 2 (count l'))\n      (first l')\n      (recur (drop 1 l'))\n    )\n  )\n)","user":"563747e9e4b0bfe05bf117d2"},{"code":"#(first(rest(reverse %)))","problem":20,"user":"4e43b0d9535dc968683fc4a3"},{"problem":20,"code":"(fn klast [x] (if (empty? (rest (rest x))) (first x) (klast (rest x))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":20,"code":"(fn [ls]\n  (cond (empty? ls) ls\n        (empty? (rest ls)) ls\n        (empty? (rest (rest ls))) (first ls)\n        true (recur (rest ls))))","user":"59750a68e4b01722bebd4cba"},{"code":"(fn [n]\n  (loop [[a b & c :as l] n]\n    (cond (nil? c) a\n      :else (recur (rest l)))))","problem":20,"user":"4fbd1ebbe4b081705acca2fe"},{"problem":20,"code":"(fn [x] \n  (if (nnext x) (recur (rest x))\n    (first x)))","user":"5785de71e4b0ebec4cfb74e7"},{"problem":20,"code":"(fn [elements]\n  (-> elements\n      butlast\n      last))","user":"5e7968dae4b085ba37836e04"},{"code":"(fn last-element [x] (if (= (count x) 2) (first x) (last-element (rest x))))","problem":20,"user":"4e75d6b6535d7a570dd295c6"},{"code":"#(->> %1 reverse rest first)","problem":20,"user":"4ed00953535d44c135fd68c2"},{"problem":20,"code":"(fn [vector] \n  (nth vector\n    (- (count  vector) 2)\n    )\n    )","user":"5e23ca7fe4b05b4b01516144"},{"code":"(fn [coll]\n  ((fn [coll el]\n     (if (empty? (rest coll))\n         el\n         (recur (rest coll) (first coll)))) \n  (rest coll) (first coll)))","problem":20,"user":"51736d4de4b00f4b6b0490d7"},{"code":"#(if (= (count %) 2)\n   (first %)\n   (recur (rest %)))","problem":20,"user":"504ec2a1e4b069badc5a33c7"},{"code":"#(nth % (- (count %)2))","problem":20,"user":"4ea85846535d7eef308072f9"},{"code":"(fn sec-to-last [x] (second (reverse x)))","problem":20,"user":"4f03fb59535dcb61093f6b89"},{"problem":20,"code":"(fn [s] \n  (loop [[x1 & xs] s]\n    (if (next xs)\n      (recur xs)\n      x1)))","user":"546c4377e4b00cfc9eacc177"},{"code":"(fn penultimate-element [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"5298cc88e4b02ebb4ef75065"},{"problem":20,"code":"(fn [x] (if (next (next x)) (recur (rest x)) (first x)))","user":"5e85163be4b09a7a73c8bbd0"},{"code":"(fn lastOf [n]\n  (nth n (- (count n) 2)))","problem":20,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":20,"code":"(fn mypen [l]\n  (loop [lst l mylast nil ret nil]\n    (cond\n      (empty? lst) ret\n      :else (recur (rest lst) (first lst) mylast))))","user":"5fb8fe30e4b03f550f448223"},{"code":"(fn [c] (first (rest (reverse c))))","problem":20,"user":"4defd021535d08e6dec9fe13"},{"problem":20,"code":"#(nth %(-(count %)2))","user":"5481be5fe4b0e286459a1172"},{"code":"(fn [[x & rest]]\r\n  (let [[y & r] rest]\r\n    (if r\r\n      (recur rest)\r\n      x)))","problem":20,"user":"500159b3e4b0678c553fc419"},{"code":"(fn [s] (second (reverse s)))","problem":20,"user":"4df2a9ff535d08e6dec9fe27"},{"problem":20,"code":"(fn penultimate [seq]\n  (first (rest (reverse seq))))","user":"5a55c713e4b05d388ecb6c43"},{"problem":20,"code":"#(nth(take 1(drop 1 (reverse %)))0)","user":"5d8c8175e4b0915913b1d3e1"},{"problem":20,"code":"(fn [x] \n(nth x (dec (dec (count x)))) )","user":"54f315fae4b050824f58f5b9"},{"problem":20,"code":"(fn penultimate [lst] (first (drop (- (count lst) 2) lst)))","user":"569e3175e4b0542e1f8d1484"},{"problem":20,"code":"(fn [coll]\n  (let [n (count coll)]\n    (cond\n     (> n 1) (nth coll (- n 2))\n     :else nil)))","user":"541df619e4b01498b1a71a87"},{"problem":20,"code":"(fn f [[a b & c]] (if c (f (concat [b] c)) a))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"#(-> % drop-last last)","problem":20,"user":"4e8d5911535d65386fec2133"},{"problem":20,"code":"#(-> (reverse %)\n     second)","user":"55a0ea7de4b0acc240e31505"},{"problem":20,"code":"(fn\n  [lst]\n  (loop [[x & xs] lst]\n    (let [[y & ys] xs]\n      (if ys\n        (recur xs)\n        x))))","user":"5e619496e4b0fd0acd158690"},{"code":"#(first (rest ( reverse%)))","problem":20,"user":"523ed743e4b057c4b7cd0a79"},{"code":"#(last (pop (vec %) ))","problem":20,"user":"528a1068e4b0239c8a67ae6f"},{"code":"(fn last_but_one [s]\n  (if(= (count s) 2)\n    (first s)\n    (last_but_one (rest s))\n  )\n)","problem":20,"user":"4f044e44535dcb61093f6bb9"},{"problem":20,"code":"(fn [x]\n  (get (vec x) (dec (dec (count x)))))","user":"593c1e3be4b069cdc2982b86"},{"problem":20,"code":"(fn [l]\n  (loop [l1 l l2 (rest l)]\n    (if-not (seq (rest l2))\n      (first l1)\n      (recur l2 (rest l2)))))","user":"57fc0719e4b0d3187e900987"},{"problem":20,"code":"(fn pen [[f & r]] (when (= (count r) 0) nil) (if (= (count r) 1) f (recur r)))","user":"5599cc64e4b031d6649c9bb3"},{"problem":20,"code":"#(if (= () (rest (rest %))) (first %) (recur (rest %)))","user":"5de7377ee4b0986d99407f75"},{"problem":20,"code":"(fn second_last [x] (if (> 3(count x)) (first x) (recur (rest x))))","user":"53e150e5e4b0d874e779ae53"},{"code":"(fn [input]\n  (second\n   (reverse input)))","problem":20,"user":"528bba38e4b0239c8a67aea9"},{"problem":20,"code":"#(loop [lst %]\n   (if (= 2 (count lst))\n     (first lst)\n     (recur (rest lst))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn [[a b & xs]]\n  (if (nil? xs)\n    a\n    (recur (cons b xs))))","problem":20,"user":"50cd0fd5e4b0f7a459302aad"},{"code":"(fn [%] (if (= (count %) 2) (first %) (recur (rest %))))","problem":20,"user":"4f038017535dcb61093f6afa"},{"code":"(fn [col]\n  (nth col (- (count col) 2)))","problem":20,"user":"4e86fd2d535dceadca46984d"},{"code":"(fn [x] \n  (last(drop-last 1 x)))","problem":20,"user":"5375d846e4b06839e8705e18"},{"problem":20,"code":"(fn lastt[x](first(pop(reverse x))))","user":"53ada652e4b047364c04446d"},{"problem":20,"code":"(fn my2nd [x]\n  (let [[a1 a2] [(first x) (rest x)]]\n    (if (= (count a2) 1)\n      a1\n      (my2nd a2))))","user":"58ae4cb4e4b0ebc645576cb9"},{"problem":20,"code":"(fn [x] (let [y (reverse x)] (nth y 1)))","user":"6092c0a9e4b00e9e6653c3dc"},{"code":"(fn penultimate [x] (peek (pop (reverse x))))","problem":20,"user":"4ea9b80c535d7eef30807306"},{"problem":20,"code":"(fn [x] (-> x count dec dec (#(nth x %))))","user":"5907f751e4b047aa04b1996c"},{"code":"(fn wat [l] (if (= (count l) 2) (first l) (wat (rest l))))","problem":20,"user":"538a2b4ce4b0640c7a9a58b8"},{"code":"(fn [x](get (vec x) (- (count x) 2)))","problem":20,"user":"5133d91ee4b0d7a043de8cf5"},{"code":"(fn [coll]\n   (let [fir (first coll)\n         sec (first (rest coll))\n         thi (first (rest (rest coll)))]\n     (if (nil? thi)\n       fir\n       (recur (rest coll)))))","problem":20,"user":"4ea03a3a535d7eef308072a0"},{"problem":20,"code":"(fn a [x] (if (= 2 (count x)) (first x) (a (rest x))))","user":"5521c33ce4b0882d96d0919a"},{"code":"(comp last pop vec)","problem":20,"user":"4f1a87d2535d64f60314646c"},{"code":"#( second (reverse  %))","problem":20,"user":"508e41bee4b0f17d83ea26cc"},{"code":"(fn [s]\n\t(if (> (count (next s)) 1)\n\t\t(recur (next s))\n\t\t(first s)))","problem":20,"user":"52d5c150e4b09f7907dd1345"},{"problem":20,"code":"(fn [lispi] (nth (reverse lispi) 1))","user":"5e83a273e4b09a7a73c8bbbb"},{"problem":20,"code":"(fn [ar] (let [c (count ar)] (nth ar (- c 2))))","user":"5512969ce4b06e50f9beb1af"},{"problem":20,"code":"(fn \n  [x]\n  (second (reverse x))\n  )","user":"576773cde4b0a07e8fc180be"},{"problem":20,"code":"#(nth %1 (-(count %1) 2))","user":"561d7246e4b064ca9f4b16b1"},{"problem":20,"code":"(fn [alist] (nth alist (- (count alist) 2)))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":20,"code":"(fn [x] (get (vec x) (- (count (vec x)) 2)))","user":"55efc6d5e4b066087aa9453f"},{"problem":20,"code":"(fn [x]\n  (loop [x x]\n    (if (empty? (rest (rest x)))\n      (first x) (recur (rest x)))))","user":"5e07cf97e4b0978307768fb9"},{"problem":20,"code":"(fn second-to-last [x]\n  (if (nil? (next x))\n    nil\n    (if (nil? (next (next x)))\n      (first x)\n      (second-to-last (next x)))))","user":"5812eb8fe4b0f478707a0602"},{"code":"(fn[x] (first (take-last 2 (seq x))))","problem":20,"user":"4fb4ca71e4b081705acca2b0"},{"problem":20,"code":"(fn ok2 [x] (nth x (- (count x) 2)))","user":"557f748ae4b05c286339e0df"},{"problem":20,"code":"(fn [a-seq] (first (drop (- (count a-seq) 2) a-seq)))","user":"5394c2dfe4b0b51d73faaed1"},{"code":"(fn [s]\n  (if (= 2 (count s)) (first s)\n      (recur (rest s))))","problem":20,"user":"4fe2501ae4b0dd6cd5ce3644"},{"code":"(fn nigger [x]\n  (if (= 2 (count x))\n    (first x)\n    (nigger (rest x))))","problem":20,"user":"525805bbe4b0cb4875a45ca1"},{"code":"(fn penu [x] (if (<= (count x) 2) (first x) (penu (rest x))))","problem":20,"user":"4e663855535d8ccf87e9fe76"},{"code":"#(first (nthrest % (- (count %) 2)))","problem":20,"user":"5149f383e4b0829bd132edb2"},{"code":"(fn penultimate [lst]\n  (cond (empty? (rest (rest lst))) (first lst)\n        :else (recur (rest lst))))","problem":20,"user":"50d2f044e4b03c62ef244483"},{"problem":20,"code":"(fn\n  [x]\n  (let [pen-index (- (count x) 2)]\n    (nth x pen-index)))","user":"55a7e096e4b0988bba2ad934"},{"problem":20,"code":"(fn [col] (-> col reverse rest first))","user":"604a30c6e4b02d28681c77f0"},{"code":"(fn penulti-ele [seq]\n    (if (<= (count seq) 2)\n      (first seq)\n      (penulti-ele (rest seq))))","problem":20,"user":"511e763ce4b03e81d390ac29"},{"problem":20,"code":"(fn f [x] (first (rest (reverse x))))","user":"58d5833be4b03c36ff7e595f"},{"problem":20,"code":"(fn [xs]\n  (loop [[x0 x1 & xs] xs]\n    (if (empty? xs) x0\n      (recur (conj xs x1)))))","user":"573d9cd1e4b05c31a32c0816"},{"problem":20,"code":"(fn [x]\n    (loop [l x]\n      (if (and (not-empty (rest l)) (empty? (rest (rest l))))\n        (first l)\n        (recur (rest l))\n        )\n      )\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"; Never mind code golf; gotta make this sucker total\n#(if (> (count %) 1)\n  (nth % (- (count %) 2)))","problem":20,"user":"50d4c626e4b09cc622d65a70"},{"problem":20,"code":"; Penultimate == the second to last element from a sequence\n; first / second / last / rest\n\n(fn [lst]\n  \t(second (reverse lst)))","user":"5aa4bcc3e4b0d174b936c889"},{"problem":20,"code":"(fn [lst] (first (last (partition 2 1 lst))))","user":"5ab564f8e4b073f177442639"},{"problem":20,"code":"(fn [seq] (let [x (- (count seq) 2)]\n            (nth seq x)))","user":"5aa2dc5ae4b0d174b936c861"},{"problem":20,"code":"(fn [vs] (second (reverse vs)))","user":"5e41a67be4b01d43a70e8e56"},{"code":"(fn moo [s]\n  (cond\n    (= 2 (count s)) (first s)\n    :else (moo (rest s))))","problem":20,"user":"504e48ace4b0f6ff3350c498"},{"code":"(fn p-elt [l]\n  (if (= (count l) 2)\n    (first l)\n    (p-elt (rest l))))","problem":20,"user":"4f2e2ad8e4b0d6649770a066"},{"problem":20,"code":"(fn [l]\n  (-> l\n      (reverse)\n      (rest)\n      (first)))","user":"5eeeaf56e4b07c55ae4a0514"},{"code":"(fn lastx [x](nth x (- (count x) 2)))","problem":20,"user":"5052f4fce4b0a561d07d8f26"},{"code":"(fn this\n  ([x] (nth (reverse x) 1)))","problem":20,"user":"5048bcf8e4b06e644c63f1ae"},{"problem":20,"code":"(fn rec [l] (last (butlast l)))","user":"5a1e93bee4b0ff51aa4b3270"},{"problem":20,"code":"(fn fun [dataList]\n  \t(cond\n     \t(<= (count dataList) 2) (first dataList)\n     \t:else (recur (rest dataList))\n     )\n  )","user":"5da20e73e4b000c986472be1"},{"problem":20,"code":"(fn second-to-last-element\n      \n      [coll]\n      (first\n        (drop\n          (- (count coll) 2) coll)))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":20,"code":";#(first (rest (reverse %)))\n\n(comp first rest reverse)","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn soln [x] (if (empty? x) x (let [y (next x) z (first x) f (fn [x] (and (not (empty? x)) (empty? (next x))))] (if (f (next x)) (first x) (soln (next x))))))","problem":20,"user":"537f8e7be4b06839e8705eb8"},{"problem":20,"code":"(fn [seq_] (first (\n            loop [x seq_](\n                          if(= (count x) 2)\n                          x\n                          (recur (rest x))))))","user":"5bd9eac4e4b0ed4b8aab4bfc"},{"problem":20,"code":"(fn penul [xs]\n  (if (empty? (rest (rest xs)))\n    (first xs)\n    (penul (rest xs))))","user":"55f9acade4b03cbcff9738c7"},{"problem":20,"code":"(fn [coll]\n  (->> coll reverse rest first))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":20,"code":"#(nth % (-(dec(count%))1))","user":"57fe2d6fe4b0d3187e9009c8"},{"code":"(fn second-to-last [s]\n  (first (rest (reverse s))))","problem":20,"user":"526e1bd0e4b03e8d9a4a730b"},{"code":"#_(blech fn [lst]\n  (loop [f (first lst)\n         l (rest lst)]\n    (if (< 1 (count l))\n        (recur (first l) (rest l))\n        f)))\n\n(comp fnext reverse)","problem":20,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn [ss] (second (reverse ss)))","problem":20,"user":"4ecf571b535d44c135fd68b6"},{"problem":20,"code":"(fn s [x] (nth x (- (count x) 2)))","user":"5d94753de4b0d3f9b434ad24"},{"problem":20,"code":"(fn my_second\n  [x]\n  (first (rest (reverse x))))","user":"5aa28ffee4b0d174b936c855"},{"code":"(fn asdf [x] (second (reverse x)))","problem":20,"user":"4f0c76f9535d0136e6c2230d"},{"problem":20,"code":"(fn penult [col]\n   (peek(pop (vec col))))","user":"548f05ace4b0e286459a122b"},{"problem":20,"code":"(fn a [l]\n  (cond \n   (= 2 (count l)) (first l)\n   :else (a (rest l))))","user":"56df6301e4b0ca2494a095f1"},{"problem":20,"code":"(fn[seq1](first(rest(reverse seq1))))","user":"5627444fe4b00e49c7cb47cd"},{"problem":20,"code":"(fn second_to_last [inlist] (second (reverse inlist)))","user":"53c1305be4b00fb29b22125d"},{"problem":20,"code":"(fn [ll] (nth ll (- (count ll) 2)))","user":"54f5e9e2e4b0f2f3c5226e9d"},{"problem":20,"code":"(fn [seq] (if-let [r (next (next seq))] (recur (next seq)) (first seq)))","user":"574c3a7ce4b02ea114799219"},{"code":"(fn [x] \n  (let [a (- (count x) 2)]\n         (nth x a)\n  )\n)","problem":20,"user":"534f0b51e4b084c2834f4ac3"},{"code":"(fn [xs]\n  (if (= (rest (rest xs)) '())\n    (first xs)\n    (recur (rest xs))))","problem":20,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":20,"code":"#(nth %  (dec (dec (count %))))","user":"582d1890e4b051871117bfb1"},{"problem":20,"code":"(fn second-to-last[x] (nth x (- (count x) 2) ))","user":"539f9f79e4b0ca733b97449e"},{"code":"(fn [a] (last (reverse (rest (reverse a)))))","problem":20,"user":"4fa436dce4b081705acca19b"},{"code":"(fn [[f s & r]] (if (nil? r) f (recur (cons s r))))","problem":20,"user":"4fc1487ae4b081705acca32d"},{"problem":20,"code":"(fn penultimate ([[first-ele & eles]] (penultimate first-ele eles))\n      ([candidate [first-ele & eles]] (if eles (penultimate first-ele  eles)\n                                          candidate)))","user":"55d95be7e4b0e31453f64ac9"},{"problem":20,"code":"(fn abc [s] (second(reverse s)))","user":"5b3ca9c9e4b02d533a91bbe3"},{"problem":20,"code":"#(first \n   (rest \n     (reverse %)))\n\n; Long hand\n;(fn\n;   [nums]\n;   (first\n;     (rest\n;     (reverse nums)))\n;   )","user":"519d2a0be4b037b32803f9ae"},{"problem":20,"code":"(fn penultimate_element \n  [x]\n  (nth x(-(count x)2)))","user":"5a99b861e4b0d174b936c7ad"},{"problem":20,"code":"(fn [x ] (get (vec x) (- (count x) 2)) )","user":"556f4011e4b09a3098a5251d"},{"problem":20,"code":"(fn [x]\n  (let [r1 (next x)\n        r2 (next r1)]\n    (if (nil? r1)\n      nil\n      (if (nil? r2)\n        (first x)\n        (recur r1)))))","user":"5688a01be4b0dcc4269f406d"},{"problem":20,"code":"(fn [x]\n  (nth x \n       (- (count x) 2)\n       )\n  )","user":"5453b522e4b0e397800069d0"},{"code":"(fn [arg] \n  (first (rest (into '() arg))))","problem":20,"user":"530b9714e4b02e82168697cf"},{"problem":20,"code":"(fn [coll]\n  (nth (reverse coll) 1))","user":"53df4292e4b0d874e779ae40"},{"problem":20,"code":"(fn [a] (last (butlast a)))","user":"55016428e4b07d26eda61d72"},{"code":"(fn [coll] \n  (first (rest (reverse coll))))","problem":20,"user":"4fb73af2e4b081705acca2d0"},{"problem":20,"code":"(fn [seq]\n\t(loop [remaining seq]\n\t   (if (= 2 (count remaining))\n   \t\t(first remaining)\n\t   \t(recur (rest remaining)))))","user":"5601cd19e4b04bb52996e197"},{"code":"(fn l [x]\n   (if (or (empty? x) (empty? (rest x)))\n      nil\n      (if (empty? (rest (rest x)))\n        (first x)\n        (l (rest x)))))","problem":20,"user":"4f8320e9e4b033992c121c18"},{"problem":20,"code":"#(loop [[first second third & tail] %]\n    (cond\n      (nil? third) first\n      (nil? tail) second\n      :else (recur tail)))","user":"60849bd6e4b0736b099e42f2"},{"problem":20,"code":"(fn [elems] (first (take-last 2 elems)))","user":"55ce8cfee4b0e31453f64a29"},{"code":"(fn [lst]\n  (let [[x y & ys] lst]\n    (if (nil? ys)\n      x\n      (recur (conj ys y)))))","problem":20,"user":"4ec59ce4535d6d7199dd36ab"},{"problem":20,"code":"(fn [%] (second (reverse % ) ) )","user":"60462028e4b02d28681c77c2"},{"problem":20,"code":"(fn sndLast [array] (nth array (- (count array) 2)))","user":"576d4791e4b0979f8965155f"},{"code":"(fn [ns] (first (take-last 2 ns)))","problem":20,"user":"52e4a40ae4b09f7907dd1453"},{"code":"(fn [l]\n   (first (rest (reverse l)))\n  )","problem":20,"user":"4f9a5d3ae4b0dcca54ed6d08"},{"problem":20,"code":"(fn my-penultimate [[h & r]]\n   (if (empty? (rest r))\n     h\n     (my-penultimate r)))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn [l](last (butlast l)))","problem":20,"user":"4eb80ce6535d7eef3080737d"},{"code":"(fn secondToLast [listParam] (if (= (count listParam) 2) \n                                (first listParam) \n                                (if (< (count listParam) 2) \n                                  nil \n                                  (secondToLast (rest listParam)))))","problem":20,"user":"5118a9a3e4b046de85f62a4a"},{"problem":20,"code":"(fn penultimate [xs]\n  (letfn [(my-nth [xs n]\n                  (if (= 0 n)\n                    (first xs)\n                    (my-nth (rest xs) (- n 1))))]\n    (my-nth xs (- (count xs) 2))))","user":"5ad351a5e4b0ea6055cfabc0"},{"problem":20,"code":"(fn [lst] \n  (first \n   (drop \n    (- (count lst) 2)\n    lst)))","user":"54194782e4b01498b1a71a29"},{"problem":20,"code":"#(apply (fn penultimate\n  ([x] x)\n  ([x y] x)\n  ([x y & more] (apply penultimate y more))) %)","user":"5a04e923e4b01bb0ae8afda9"},{"code":"#(if (> (count %) 2) (recur (rest %)) (first %))","problem":20,"user":"4f00c74f535dcb61093f6a31"},{"code":"(fn [seq]\n  (let [c (count seq) i (- c 2)]\n    (nth seq i)))","problem":20,"user":"4ee3afde535d10e5ff6f5370"},{"problem":20,"code":"#(->> % (reverse) (second))","user":"5aa690c0e4b0d174b936c8ad"},{"code":"(fn [x](first(take-last 2 x)))","problem":20,"user":"4e2ab05e535deb9a81d77f01"},{"problem":20,"code":"(fn [[e1 e2 & es]]\n  (if (seq es)\n    (recur (cons e2 es))\n    e1))","user":"545281bce4b0e397800069c3"},{"code":"(fn get-pen [s]\n  (if (= () (rest (rest s)))\n    (first s)\n    (get-pen (rest s))))","problem":20,"user":"4fbc0011e4b081705acca2f0"},{"problem":20,"code":"(fn [x] (if (= (second (rest x)) nil) (first x) (recur (rest x))))","user":"5dbc227be4b09f47823971b0"},{"problem":20,"code":"#(loop [fst (first %) rem (rest %)]\n   (if (= 1 (count rem))\n     fst\n     (recur (first rem) (rest rem))))\n\n;; better #(second (reverse %))","user":"57118ee6e4b09c608db70447"},{"problem":20,"code":"#(cond\n    \t(empty? (rest (rest %))) (first %)\n     \t:else (recur (rest %)))","user":"5e38b324e4b01d43a70e8dc3"},{"problem":20,"code":";;(fn [list] (nth list (- (count list) 2)))\n#(->> % reverse (drop 1) first)","user":"54aec099e4b09f271ff37cf5"},{"problem":20,"code":"(fn pen [x] \n  (if (= (rest (rest x)) [])\n  \t(first x)\n  \t(pen (rest x)\n         ))\n  )","user":"546146d6e4b01be26fd7469c"},{"problem":20,"code":"(fn [col] (nth col (dec (dec  (count col)))))","user":"53ec14b9e4b036ad0777e500"},{"code":"(\n  fn ls[x](\n    if (= (count x) 2)\n    (first x)\n    (ls (rest x))\n  )\n)","problem":20,"user":"50512f61e4b0b30bd8f4f83f"},{"problem":20,"code":"(fn second-to-last [xs]\n  (first (rest (reverse xs))))","user":"6051bcfae4b056659d634203"},{"problem":20,"code":"(fn [lst]\n  (nth lst (dec (dec (count lst)))))","user":"5a99b688e4b0d174b936c7a6"},{"code":"#(nth (reverse(vec %)) 1)","problem":20,"user":"4ecbb249535df97575fdabdf"},{"problem":20,"code":"(fn lastEl [x]\n  (second (reverse x)))","user":"5ac74b34e4b0e27600da777f"},{"problem":20,"code":"(fn[l] (nth l (- (count l) 2)))","user":"5585f088e4b001b0851d7513"},{"code":"(fn [[a b & xs]]\n  (if (empty? xs) a\n      (recur (cons b xs))))","problem":20,"user":"4edcbe92535d10e5ff6f5325"},{"problem":20,"code":"(fn [seq] (-> seq (reverse) (second)))","user":"5561d2c2e4b0c656e3ff17cd"},{"problem":20,"code":"(fn lastEle [params]\n         (nth params (- (count params) 2)  ))","user":"58e67955e4b056aecfd47cb5"},{"code":"(fn penultimate [sq] (nth sq (- (count sq) 2)))","problem":20,"user":"52b12804e4b0c58976d9acd7"},{"problem":20,"code":"#(fnext (reverse %1))","user":"550a3fa4e4b06e50f9beb12d"},{"code":"(fn [seq]\n  (if (empty? (rest (rest seq)))\n      (first seq)\n      (recur (rest seq))))","problem":20,"user":"4ea1bc93535d7eef308072b9"},{"code":"#(second (reduce conj nil %))","problem":20,"user":"4ec75829535d6d7199dd36e1"},{"problem":20,"code":"(fn penultimate-element [seq] (nth seq (- (count seq) 2)))","user":"5af865a9e4b0cc2b61a3bcd1"},{"problem":20,"code":"(fn second-last [l]\n   (if (nil? (next (next l)))\n     (first l)\n     (second-last (rest l))))","user":"5670ef43e4b0a866af6896fc"},{"problem":20,"code":"(fn penultimate\n  [lst]\n  (second (reverse lst)))","user":"59e8fef3e4b0249b72820743"},{"problem":20,"code":"#(first (pop (reverse %1)))","user":"54610355e4b01be26fd74696"},{"code":"(fn one-before-last \n  [x]\n  (if (> (count x) 2)\n    (recur (rest x))\n    (first x)))","problem":20,"user":"5333d97be4b019098a6f8b87"},{"problem":20,"code":"(fn l [ls]\n  (if (= 2 (count ls))\n    (first ls)\n    (l (rest ls))))","user":"57a4a81ee4b0a966079561e8"},{"problem":20,"code":"; generic\n; (comp first rest reverse)\n\n; conv to vector first\n; (comp peek pop vec)\n\n; #(second (reverse %))\n\n#(-> % reverse second)","user":"541e2ff8e4b01498b1a71a8a"},{"code":"#(.get % (- (.size %) 2))","problem":20,"user":"4e8b98fc535d65386fec2124"},{"code":"#(first \n  (next\n    (reverse %)))","problem":20,"user":"5065052ae4b0b1b6c8b1d85e"},{"code":"#(first(reverse(take 2 (reverse %))))","problem":20,"user":"4e8aef69535d65386fec2114"},{"code":"(fn [v] (nth (reverse v) 1))","problem":20,"user":"4e8a0d5d535d3e98b802328e"},{"problem":20,"code":"(fn penultimate\n  [a]\n  (nth a (- (count a) 2)))","user":"5d123c75e4b02c15ef021997"},{"problem":20,"code":"(fn [x] (loop [l x]\n          (if (empty? (rest (rest l)))\n           \t (first l)\t \n                    (recur (rest l)))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":20,"code":"(fn seclst [l] (second (rseq (vec l))))","user":"5d03d734e4b0cc9c915881cd"},{"problem":20,"code":"(fn [%1] (nth %1 (- (count %1) 2)))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn [x] (loop [col x] (if (= (count col) 2) (first col) (recur (rest col)))))","problem":20,"user":"525121ede4b0541d1855b868"},{"code":"(fn get-the-end [theSequence] (if (= 2 (count theSequence)) (first theSequence) (get-the-end (rest theSequence))))","problem":20,"user":"4f1c2336535d64f60314647f"},{"code":"#(fnext (reverse %))","problem":20,"user":"4ded611f535d08e6dec9fe0d"},{"problem":20,"code":"(fn [your-seq]\n  (nth your-seq (- (count your-seq) 2)))","user":"5a35d515e4b0ddc586f153e1"},{"code":"(fn [args]\n  (if (= 2 (count args))\n      (first args)\n      (recur (rest args))))","problem":20,"user":"4f51b9f3e4b03ad3f0c10d2b"},{"code":"(fn [coll]\r\n  (loop [coll coll]\r\n    (cond \r\n       (empty? coll) nil\r\n       (= (count coll) 2) (first coll)\r\n       :else (recur (rest coll)))))","problem":20,"user":"4e18ed7a535d04ed9115e7f6"},{"problem":20,"code":"(fn [array] (first (rest (reverse array))))","user":"5b19cdf2e4b03cfeda66ecbf"},{"code":"(fn [theList] (-> theList count (- 2) (drop theList)first))","problem":20,"user":"4ed3c9d3535d44c135fd68f7"},{"problem":20,"code":"(fn[c]\n (nth c (- (count c) 2))\n )","user":"57596e78e4b02ea11479931c"},{"problem":20,"code":"(fn [s] (if (> (count s) 2)(recur (rest s))(first s)))","user":"5e3248d9e4b05b4b0151623a"},{"problem":20,"code":"(fn [[value & others]] (if (= 1 (count others)) value (recur others)))","user":"593eaadde4b069cdc2982bc2"},{"code":"(fn [lst] (first(take-last 2 lst)))","problem":20,"user":"4f299ad8e4b0d6649770a02c"},{"problem":20,"code":"(fn [s] (loop [s s]\n              (let [x (first s)\n                    r (rest s)\n                    y (first r)\n                    ]\n                (if (empty? (rest r))\n                  x\n                  (recur r)))))","user":"5cd99946e4b05ee0cb311706"},{"code":"(fn [list](nth list (-(count list) 2)))","problem":20,"user":"4de6f806535d08e6dec9fdf7"},{"problem":20,"code":"(fn [ds] (second (reverse ds)))","user":"5c1cf208e4b0efcb0b05b23e"},{"code":"(fn [coll]\r\n  (last (butlast coll)))","problem":20,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn penultimate [x] (if (nnext x) (penultimate (rest x)) (first x)))","problem":20,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":20,"code":"(fn [mylist] (if (next mylist) (loop [templist mylist] (if (next (next templist)) (recur (next templist)) (first templist))) nil))","user":"5439c3cee4b032a45b869323"},{"code":"(fn [coll] (fnext (reverse coll)))","problem":20,"user":"53713676e4b0fc7073fd6eac"},{"problem":20,"code":"(fn [elements] (\n                peek (rest (reverse (into [] elements)))\n                ))","user":"5b75eed6e4b047b03b2036d8"},{"problem":20,"code":"#(->> (count %)\n      (+ -2)\n      (nth %))","user":"56b74ebce4b0982f16b37e44"},{"code":"(fn l [x] (second (reverse x)))","problem":20,"user":"504e42e0e4b0f6ff3350c493"},{"code":"(fn [seq]\n  (last (butlast seq)))","problem":20,"user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn pen-ele [sequ]\n  (if (= (count (rest sequ)) 1)\n    (first sequ)\n    (pen-ele (rest sequ))))","problem":20,"user":"520b036be4b0b022ef140c73"},{"problem":20,"code":"(fn [l]\n  (if (= (rest (rest l)) [])\n    (first l)\n    (recur (rest l))))","user":"56ec3a97e4b04a395b9a0433"},{"problem":20,"code":"(fn l [xs]\n  (if (= 2 (count xs))\n    (first xs)\n    (l (rest xs))))","user":"548cd637e4b0e286459a1210"},{"problem":20,"code":"(fn [s] (second (reverse s )))","user":"5e62db04e4b0fd0acd15869c"},{"problem":20,"code":"#(->> % (partition 2 1) (last) (first))","user":"5bfe4ecfe4b0bdcf453d1608"},{"problem":20,"code":"(fn regresa-penultimo [x] (nth x (dec (dec (count x)))))","user":"55ca27b9e4b0e31453f649f7"},{"problem":20,"code":"(fn iter [xs]\n    (let [cnt (count xs)]\n        (if (= cnt 2)\n            (first xs)\n            (iter (rest xs)))))","user":"5583888ae4b05c286339e117"},{"problem":20,"code":"(fn second_last [elements] (first (rest (reverse elements))))","user":"55ca3983e4b0e31453f649f8"},{"problem":20,"code":"(fn [in-list]\n  (loop [lst in-list]\n    (let [r (rest lst)]\n      (if (empty? (rest r))\n        (first lst)\n        (recur r)))))","user":"5461c402e4b01be26fd746a6"},{"code":"(fn second-last [x] (second (reverse x)))","problem":20,"user":"50208575e4b0cb6ebc0a42f7"},{"problem":20,"code":"(fn [arg] \n  (let [cc (count arg)] (nth arg (- cc 2))))","user":"577b9cfde4b0d3393e5deb16"},{"problem":20,"code":"(fn [x]\n  (loop [in x]\n    (if (empty? (rest (rest in)))\n      (first in)\n      (recur (rest in)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"( fn [x] \n  ( ->> x (reverse) (take 2) (last) )\n  )","problem":20,"user":"51f6d5fde4b06ff1c25c52d1"},{"code":"(fn [numeros]\n  (nth (reverse numeros) 1)\n)","problem":20,"user":"4eb9af9f535dfed6da9c6d59"},{"code":"(fn [coll] (first (rest (reverse coll))))","problem":20,"user":"4e71a12c535d5021c1a8964f"},{"code":"(fn [x] \n  (if (next (next x))\n    (recur (next x))\n    (first x)))","problem":20,"user":"4f563cfae4b0a7574ea7181b"},{"code":"(fn [params]\n  (loop [head (first params)\n         tail (rest params)]\n    (if (= (rest tail) []) \n      head\n      (recur (first tail) (rest tail)))))","problem":20,"user":"52d2e2a9e4b099d49816f0b8"},{"problem":20,"code":"(fn [s] (let [l (count s)]          (nth s (- l 2))))","user":"5746ca8be4b009280f9f2b67"},{"problem":20,"code":"(fn secLast[x] (nth x (- (count x) 2)))","user":"58175fade4b0c0e9c07b838f"},{"code":"#(cond\n  (nil? (second (rest %))) (first %)\n  :else (recur (rest %)))","problem":20,"user":"4e89559c535d4ef0aa30db9a"},{"problem":20,"code":"(fn [col]\n    (last(drop-last col)))","user":"5f02f365e4b0cf489e8d7f2c"},{"problem":20,"code":"(fn penul [s] (first (drop 1 (reverse s))))","user":"5a487d9ce4b05d388ecb6b67"},{"code":"(fn [x] (last (take (- (count x) 1) x)))","problem":20,"user":"4ec6688d535d6d7199dd36cc"},{"problem":20,"code":"(fn my-last [coll]\n  (nth coll (- (count coll) 2)))","user":"6020365ae4b0bf4ca6b10960"},{"code":"(fn [xs] (->> xs reverse rest first))\n\n#_(fn [xs]\n  (cond\n   (empty? xs) nil\n   (empty? (rest xs)) nil\n   (empty? (rest (rest xs))) (first xs)\n   :else (recur (rest xs))))","problem":20,"user":"53684a2fe4b0243289761e8c"},{"code":"(fn f [lst] (if (= (count lst) 2) (first lst) (f (rest lst))))","problem":20,"user":"4db2f208535df7e46ed9b6c9"},{"code":"(fn [s] (loop [l s ans []](if (first (rest l)) (recur (rest l) (first l)) ans)))","problem":20,"user":"52aa16d1e4b0c58976d9ac5a"},{"code":"(fn getlast [x] \n  (if (= 2 (count x))\n   (first x)\n    (getlast (rest x))\n  )    \n)","problem":20,"user":"50e9ed1de4b02d54280826d5"},{"problem":20,"code":"(fn toka-vika\n  [aseq]\n  (let [n (- (count aseq) 2)]\n    (nth aseq n)))","user":"5d110abee4b02c15ef021983"},{"problem":20,"code":"(fn get_last [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (get_last (rest x))))","user":"5564709ee4b0c656e3ff1807"},{"problem":20,"code":"#(if (< (count (rest %)) 2) (first %) (recur (rest %)))","user":"5b20cd02e4b03cfeda66ed37"},{"problem":20,"code":"(fn penult\n  ([xs] (penult nil nil xs))\n  ([pp p xs]\n     (if xs\n        (penult p (first xs) (next xs))\n        pp)))","user":"59ab2b86e4b08cbb53654d91"},{"code":"#(if (= (count %) 2)\n\t    (first %)\n\t    (recur (rest %)))","problem":20,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"#(nth % (-(count %) 2) )","problem":20,"user":"4fada258e4b081705acca23d"},{"problem":20,"code":"#(let [c (count %)]\n   (nth % (dec (dec c))))","user":"5c618140e4b0fca0c162262f"},{"problem":20,"code":"(fn f[x] \n  (second (reverse x))\n  )","user":"53ac1992e4b047364c04445a"},{"problem":20,"code":";(fn [arr] (nth (reverse arr) 1))\n(comp #(nth % 1) reverse)","user":"565370bce4b0f9d632dd8472"},{"problem":20,"code":"(fn second-to-last [l]\n  (cond\n    (< (count l) 3) (first l)\n    :else (second-to-last (rest l))\n  )\n)","user":"5716540fe4b07c98581c3af3"},{"problem":20,"code":"(fn [lox] (second (reverse lox)))","user":"55e357dae4b050e68259b442"},{"code":"(fn get-one-before-last [x]\n  (if (= (count x) 2)\n    (first x)\n    (get-one-before-last (rest x))))","problem":20,"user":"52f4580de4b05e3f0be25f21"},{"problem":20,"code":"#(nth % (dec (dec ( count % ))))","user":"59a9e517e4b08cbb53654d79"},{"problem":20,"code":"#(loop [lista % c 0 s (count %)] (if (= c (- s 2)) (first lista) (recur (rest lista) (inc c) s)))","user":"53dc05d4e4b094d41abdfefa"},{"problem":20,"code":"(fn second-last [l] (first (take-last 2 l)))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn [x] (nth x (- (count x), 2)))","problem":20,"user":"51022e25e4b00c483ae176f5"},{"problem":20,"code":"(fn [x] \n  (nth x (dec (dec (count x)))))","user":"57ca338de4b05aa3c4741d37"},{"code":"(fn [coll] (get (vec coll) (- (count coll) 2)))","problem":20,"user":"51aa7298e4b04e3dc0c27b28"},{"code":"(fn [x] (first (take-last 2 x )))","problem":20,"user":"51d12d04e4b0cfcf579466ae"},{"problem":20,"code":"(fn [xs]\n  (loop [xs' xs\n         n (count xs')]\n    (cond\n     (< n 2)\n     nil\n     \n     (= 2 n)\n     (first xs')\n     \n     (> n 2)\n     (recur (rest xs') (count (rest xs'))))))","user":"5f37da09e4b0574c87022c5e"},{"problem":20,"code":"(fn [[x & xs]]\n  (cond\n   (< 1 (count xs)) (recur xs)\n   (= 1 (count xs)) x\n   true nil))","user":"55679906e4b0c656e3ff1845"},{"code":"(fn [coll]\n  (loop [coll coll]\n    (if (empty? (rest (rest coll)))\n      (first coll)\n      (recur (rest coll)))))","problem":20,"user":"4e117dea535d04ed9115e7c9"},{"code":"(fn s [[a b & r]] (if r (s (cons b r)) a))","problem":20,"user":"52d068c9e4b07d0d72b273b9"},{"code":"(fn [x] \n  (loop [rem x]\n    (if (nil? (next (next rem))) (first rem) (recur (rest rem)))))","problem":20,"user":"4fdbef2fe4b05e33b9224f66"},{"problem":20,"code":"(fn find-second-to-last\n   [mylist]\n   (if (or (= 2 (count mylist)))\n    (first mylist)\n    (find-second-to-last (rest mylist)))\n  )","user":"53fe459ae4b0de5c418485f4"},{"code":"(fn [s] (loop [[f n & r] s] (if r (recur (cons n r)) f)))","problem":20,"user":"53a26cede4b0f1fc7453882a"},{"problem":20,"code":"(fn foo [x] (if (= 2 (count x))\n                             (first x)\n                             (foo (rest x)))\n\n                        )","user":"565b372ee4b068f2fe63dc00"},{"code":"(fn [n] (nth n (- (count n) 2)))","problem":20,"user":"50cf2267e4b0e61f11ddcd8c"},{"code":"#(-> % vec pop peek)","problem":20,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn sectolast [theseq] (if \n  (= 2 (count theseq))\n  (first theseq)\n  (sectolast (rest theseq))\n))","problem":20,"user":"4e3df106535deb9a81d77f58"},{"problem":20,"code":"(fn [x] ( second (reverse x)))","user":"55a21f1ce4b0acc240e3151f"},{"code":"(fn [collection] (get (vec collection) (- (count collection) 2)))","problem":20,"user":"4f462919e4b0d56e7bb92b94"},{"problem":20,"code":"(fn [[x & xs]] (if (= (count xs) 1) x (recur xs)))","user":"556e3b73e4b09a3098a52514"},{"problem":20,"code":"(fn [items] (if (empty? (rest (rest items))) (first items) (recur (rest items))))","user":"5e7b2d86e4b085ba37836e11"},{"code":"(fn penultimate [lst]\n(if (= (count (rest lst)) 1)\n    (first lst)\n    (penultimate (rest lst))\n    )\n  )","problem":20,"user":"52158e69e4b0bf4bffd29c9f"},{"problem":20,"code":"(fn lassst [x] (if (> (count x) 2)  (lassst (rest x)) (first x)))","user":"60890415e4b0ae75613dceec"},{"code":"(fn [x] \n    (\n      nth x \n      (- (count x) 2)\n    ) \n  )","problem":20,"user":"4f8939ace4b033992c121c79"},{"problem":20,"code":"(fn [x] (cond\n         (= 0 (count x)) nil\n         (= 1 (count x)) nil\n         (= 2 (count x)) (nth x 0)\n         :else           (recur (rest x))))","user":"54e79094e4b024c67c0cf818"},{"problem":20,"code":"(fn [x](second (reduce conj () x)))","user":"5d87cc7ee4b0915913b1d3a3"},{"code":";#(nth % (- (count %) 2))\n(comp second reverse)","problem":20,"user":"4fceda40e4b03432b189f407"},{"code":"#(nth % (dec(dec(count %))) %)","problem":20,"user":"50813b88e4b09292fd669443"},{"problem":20,"code":"(fn [coll]  (if (= (rest (rest coll)) ())\n    (first coll)\n    (recur (rest coll))))","user":"53dad484e4b0e771c30254ac"},{"problem":20,"code":"(fn sec-last [li] (nth li (- (count li) 2)))","user":"56f57481e4b046a417f92072"},{"problem":20,"code":"#(let [v (apply vector %) c (count v)]\n      (if (< c 2) (throw (Exception. \"too small\")) (get v (- c 2))\n\t  ))","user":"5cc880b3e4b0ccb06196284b"},{"code":"(fn [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"4e3f2b0c535dc968683fc496"},{"code":"(fn last_ [xs]\n  (if (empty? (rest (rest xs)))\n     (first xs)\n     (last_ (rest xs))))","problem":20,"user":"4f04d011535dcb61093f6be5"},{"code":"(fn penultimate [letters] (nth letters (- (count letters) 2)))","problem":20,"user":"503f872ee4b00d1a725ff2ac"},{"problem":20,"code":"(fn [x] (nth x (- (dec (count x)) 1)))","user":"57a9b00be4b0a96607956232"},{"code":"#(nth %1 (- (count %) 2))","problem":20,"user":"4f3ffa6be4b0e243712b1fa4"},{"code":"(fn [x] (loop [[x & xs] x]\n   (if (and (empty? (rest xs)) (not (empty? xs))) x (recur xs))))","problem":20,"user":"530394b4e4b0d8b024fd3743"},{"problem":20,"code":"(fn penultimate-recur [s]\n\t(cond\n\t\t(< (count s) 2)\t\tnil\n\t\t(> (count s) 2)\t\t(penultimate-recur (rest s))\n\t\t(= (count s) 2)\t\t(first s)))","user":"5decd4fde4b093ff7172757b"},{"code":"(fn [x] \n (loop [h (first x) t (rest x)]\n (if (next t)\n   (recur (first t) (rest t))\n    h)))","problem":20,"user":"50af3393e4b0a40c9cfb08d7"},{"problem":20,"code":"(fn [the-seq] (first (rest (reverse the-seq))))","user":"57024aefe4b08d47c97781df"},{"problem":20,"code":"(fn penultimate [ls]\n  (if (< (count ls) 2)\n    ls)\n  (if (> (count ls) 2)\n    (penultimate (rest ls))\n    (first ls)))","user":"53ed1778e4b0d648e757f4bd"},{"code":"(comp last (partial drop-last 1))","problem":20,"user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn [l](first (take-last 2 l)))","problem":20,"user":"50a83315e4b054305ba5a830"},{"problem":20,"code":"(fn return-element [x] (nth x (- (count x) 2)))","user":"57ee2b3ee4b0bfb2137f5bac"},{"code":"(fn [x] (if (nil? (next (next x))) (first x) (recur (next x))))","problem":20,"user":"4e699b20535d8ccf87e9fe9d"},{"code":"(fn [coll]\n    (if (= '() (rest (rest coll)))\n\t      (first coll)\n\t      (recur (rest coll))))","problem":20,"user":"4e821ca5535db62dc21a62c2"},{"problem":20,"code":"#(nth (butlast %) (dec (dec (count %))))","user":"5dd44256e4b0948ae9d9ad69"},{"problem":20,"code":"(fn f [s] \n  (if (= (count s) 2) (first s) (f (rest s)))\n)","user":"5bd52eabe4b0ed4b8aab4b97"},{"problem":20,"code":"(fn [x]\n  (if-let [r (next (next x))]\n    (recur (next x))\n    (first x)))","user":"5609866ee4b0053d1b86c7e3"},{"code":"(fn \r\n  [l] (\r\n  if (= (count l) 2) (first l) (recur (rest l))))","problem":20,"user":"506f5d68e4b082ae7d1032c7"},{"problem":20,"code":"(fn [coll]\n  (first(rest(reverse coll))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":20,"code":"(fn get-second-to-last\n  [s]\n  (if (= (count s) 2)\n    (first s)\n    (get-second-to-last (rest s))))","user":"5d05fdece4b0cc9c915881e8"},{"code":"; #(first (nthrest % (- (count %) 2)))\n; (comp last butlast)\n(comp first rest reverse)","problem":20,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [coll] (first (take-last 2 coll)))","problem":20,"user":"4f1872a2535d64f60314645a"},{"code":"(fn [%] (\r\nsecond (reverse %)\r\n))","problem":20,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":20,"code":"(fn [stuff] (nth stuff (- (count stuff) 2)))","user":"53fcaeace4b0de5c418485d3"},{"code":"(fn lll [x]\n  (if (= 1 (count (rest x))) \n      (first x)\n      (lll (rest x))\n    )\n\n)","problem":20,"user":"4f0df199535d0136e6c2231e"},{"code":"(fn [s]\n  (if (next (next s))\n      (recur (next s))\n      (first s)))","problem":20,"user":"50555c06e4b0ce54f56f03fa"},{"code":"(fn [l] (nth l(- (count l)2)))","problem":20,"user":"531bbf2ae4b08068f379ed95"},{"problem":20,"code":"#( second(reverse %))","user":"5f4170d9e4b0955706451fa9"},{"code":"(fn [l]\n  (second (reverse l)))","problem":20,"user":"4e6a5238535d8ccf87e9fec9"},{"code":"(fn [x] (nth x (dec (- (count x) 1))))","problem":20,"user":"50c6068fe4b0c9dc10d15c58"},{"code":"(fn [lst]\n  (first (next (reverse lst))))","problem":20,"user":"51a1c67ae4b00957e520db76"},{"problem":20,"code":"(fn penultimo\n  [l]\n  (first (rest (reverse l))))","user":"56bfe8f1e4b060a8e693e3a3"},{"problem":20,"code":"(fn secondlast[s] (nth s (- (count s) 2)))","user":"5e0581ece4b0a607a9a45d7c"},{"code":"(fn [in] (second (reverse in)))","problem":20,"user":"52837636e4b0239c8a67adb6"},{"problem":20,"code":"(fn second_last [x] (if (= (count (rest x)) 1) (first x) (second_last (rest x))))","user":"59f22f1be4b0966464fe6a77"},{"code":"(fn [S]\r\n  (if (= 2 (count S))\r\n    (first S)\r\n    (recur (rest S))))","problem":20,"user":"5051ea64e4b0a561d07d8f0d"},{"problem":20,"code":"(fn lst [x]\n  (if (= (count x) 2)\n    (first x)\n    (lst (rest x))))","user":"55b782c6e4b01b9910ae29a5"},{"code":"(fn blah\n  [v]\n  (if (= (count v) 2)\n      (first v)\n      (blah (rest v))))","problem":20,"user":"51bc99afe4b0fe3ecfb4645e"},{"problem":20,"code":"(fn penultimate [xs]\n  {:doc  \"P02 (*) Find the last but one element of a list.\"}\n  (loop [ret (first xs) xs xs]\n    (if (next xs)\n      (recur (first xs) (next xs))\n      ret)))","user":"56af5f74e4b061e3ca319acf"},{"code":"(comp #(nth % 1) reverse vec)","problem":20,"user":"5014779ce4b094324338f8e6"},{"problem":20,"code":"(fn [data] (second (reverse data)))","user":"56940617e4b0dcc4269f410b"},{"problem":20,"code":"(fn [v]\n   (if (= (count v) 2)\n     (first v)\n     (recur (rest v))))","user":"5db32ae1e4b010eb3c36cd1e"},{"code":"#(if (<= 2 (count %))\n  (nth % (- (count %) 2)))","problem":20,"user":"52e94348e4b09f7907dd14a9"},{"code":"(fn [s] (nth s (- (count s) 2) s))","problem":20,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn mlast [items] (nth items (- (count items) 2)))","problem":20,"user":"4fe4cefce4b0e8f79898febd"},{"code":"(fn [seqs] \n  (nth seqs\n       (- (count seqs) 2)))","problem":20,"user":"5153316ce4b0252ac4b16611"},{"problem":20,"code":"(fn [lst]\n  (let [lst-size (count lst)]\n    (nth lst (- lst-size 2))))","user":"5625f678e4b00e49c7cb47b8"},{"code":"(fn [s] \n  (if (nil? (next (next s)))\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4e99819a535dbda64a6f6b66"},{"problem":20,"code":"(fn [sequenc]\n  (second (reverse sequenc)))","user":"56cccb84e4b0ea9b8538f741"},{"problem":20,"code":"(fn second-last [seq] (if (= 2 (count seq)) (first seq) (second-last (rest seq) )))","user":"5e1a3989e4b0dc9594008511"},{"code":"(fn [[f s & rest]] (if (empty? rest) f (recur (conj rest s))))","problem":20,"user":"51b07b99e4b0c53cf2e68a66"},{"code":"(fn [coll]\r\n  (if (empty? (rest (rest coll)))\r\n    (first coll)\r\n    (recur (rest coll))))","problem":20,"user":"4dfe5a93535d04ed9115e786"},{"problem":20,"code":"(fn penultimate [s]\n  (nth (reverse s) 1))","user":"5c3527a6e4b0d62ef62d9f60"},{"problem":20,"code":"(fn [z] (second (reverse z)))","user":"55b9e905e4b01b9910ae29c3"},{"code":"(fn sl [x] (first (rest (reverse x))))","problem":20,"user":"4f49c002e4b0d56e7bb92bfd"},{"problem":20,"code":"(fn [x]\n  (let [n (count x)]\n    (nth  x  (dec (dec n)))))","user":"597db382e4b0dbe32238d09f"},{"problem":20,"code":"(fn [lst]\n  (loop [aseq (seq lst)]\n    (if (empty? aseq)\n      nil\n      (if (empty? (rest aseq))\n        nil\n        (if (empty? (rest (rest aseq)))\n          (first aseq)\n          (recur (rest aseq)))))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"#(second (reverse (vec %)))","problem":20,"user":"4f80907ee4b033992c121bf4"},{"code":"(fn [[x y & more]]\r\n  (if more\r\n    (recur (into [y] more))\r\n    x))","problem":20,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn [col] (second (reverse col)))","problem":20,"user":"4ec79f99535d6d7199dd36e4"},{"problem":20,"code":"#(->(reverse %)(rest)(first))","user":"5587cdefe4b059ccff29b1e7"},{"code":"(fn [coll] (nth coll (- (count coll) 2) nil))","problem":20,"user":"5182de5ce4b0353c468deb74"},{"code":"(fn last-elem [x]\n  (loop [z (first x)\n         work x\n         ]\n        \n        (if (not= (drop 1 work) [])\n          (recur (first work)\n                 (drop 1 work) \n                 )\n          ;else\n          z\n          )\n        )\n  )","problem":20,"user":"50fb084ee4b0d10d794c19dd"},{"code":"(fn last-in-sequence [s]\n  (if (= (count s) 2)\n    (first s)\n    (last-in-sequence (rest s))))","problem":20,"user":"525e81cbe4b0cb4875a45dac"},{"problem":20,"code":"(fn SecLast [x] \n  (if (and (empty? (rest (rest x))) (first (rest x))) (first x) (SecLast (rest x)) ))","user":"554b8474e4b0a04f79299588"},{"code":"(fn scnlst [x] (second (reverse x)))","problem":20,"user":"50ad274be4b00424fd5bf71e"},{"problem":20,"code":"(fn a [[x y & z]] (if z (a (cons y z)) x))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn [l] (if (= 2 (count l)) (first l) (recur (rest l))))","problem":20,"user":"4ddad2ff535d02782fcbe9f7"},{"code":"#(-> % (reverse) (rest) (first))","problem":20,"user":"50ac3e4be4b071b89ef2622d"},{"code":"(fn my-second-last [x] \n  (nth x (- (count x) 2))\n)","problem":20,"user":"51215927e4b05ae5a5823c10"},{"problem":20,"code":"(fn penultimate-element [x] (nth x (- (count x) 2)))","user":"57040195e4b08d47c9778202"},{"problem":20,"code":"(fn n_last [[x & xs]] (if (> (count xs) 1) (n_last xs) x))","user":"57752a2de4b0979f89651613"},{"problem":20,"code":"(fn get_last [x] (nth x (- (count x) 2)) )","user":"55293c48e4b0ffed3738f946"},{"problem":20,"code":"(fn [seq] (loop [head (first seq) tail (rest seq)]\n            (if (= 1 (count tail))\n              head\n              (recur (first tail) (rest tail)))))","user":"55457b73e4b0a04f79299536"},{"problem":20,"code":"(fn [s]\n  (last (butlast s)))","user":"58852909e4b0f1effa3b76af"},{"problem":20,"code":"(fn penultimate [coll]\n  (last (butlast coll)))","user":"59a82915e4b0bcf4e9a43af0"},{"problem":20,"code":"(fn l [s]\n  (if (next (next s))\n    (recur (next s))\n    (first s)))","user":"543168f5e4b0dad94371f2e6"},{"problem":20,"code":"#((fn f [x xs] (if (= (count xs) 1) x (f (first xs) (rest xs)))) (first %) (rest %))","user":"567ffd69e4b0966858e4d8e7"},{"code":"#(let [n (- (count %) 2)]\r\n   (nth % n))","problem":20,"user":"4e0dee88535d04ed9115e7b8"},{"problem":20,"code":"(fn[seq](nth seq(-(count seq)2)))","user":"5fbf8a86e4b0edf42a5593bf"},{"problem":20,"code":"#(-> (reverse %) (rest) (first) )","user":"551d019fe4b07993ea3788e6"},{"problem":20,"code":"#(nth % (- (count %) 2\n           ))","user":"5628f33ce4b00e49c7cb47f3"},{"code":"(fn a [[x y & s]] (if (nil? s) x (a (cons y s))))","problem":20,"user":"4f569218e4b0a7574ea71826"},{"problem":20,"code":"(fn\n  [lst]\n  (second (reverse lst)))","user":"56e61c05e4b02e7e935eb6c2"},{"code":"(fn [coll]\n  (if (-> coll next next)\n    (recur (next coll))\n    (first coll)))","problem":20,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn [list] (first (take-last 2 list)))","problem":20,"user":"4f81a908e4b033992c121c00"},{"problem":20,"code":";(fn [lst] (nth lst (- (count lst) 2)))\n\n#(nth % (- (count %) 2))","user":"55da3983e4b0e31453f64ad4"},{"code":"#( first ( rest ( reverse (seq %))))","problem":20,"user":"502904e0e4b0feaf66e22fad"},{"problem":20,"code":"(fn pu\n  ([xs] (pu (first xs)\n            (first (rest xs))\n            (rest (rest xs))))\n  ([e e2 xs] (if (empty? xs)\n            e\n            (pu e2\n                (first xs)\n                (rest xs)))))","user":"5fa8424ce4b0fa27300f3de5"},{"problem":20,"code":"(fn[x] (nth x (- (count x) 2)) )","user":"5fa15879e4b0f0ebd91b77de"},{"problem":20,"code":"(fn [x] (nth x (- (count x)  2)))","user":"4f03b969535dcb61093f6b55"},{"code":"(fn alas [xs] (if (next (next xs)) (alas (rest xs)) (first xs)))","problem":20,"user":"4eaede1f535d7eef30807329"},{"problem":20,"code":"(fn penultimate [[x y & z]] (if (empty? z) x (penultimate (conj z y))))","user":"54f5fb57e4b0f2f3c5226e9f"},{"problem":20,"code":"(fn penultimate[x]\n  (if (= (count x) 2)\n    (first x)\n    (penultimate (rest x))))","user":"57f5346de4b0903ccab3dcea"},{"code":"(fn p[a] (first (pop (reverse a))))","problem":20,"user":"502c8681e4b0532a782a5e35"},{"problem":20,"code":"(fn  [s]\n        (if (next (next s))\n          (recur (next s))\n          (first s)))","user":"56d6e165e4b0ea9b8538f7d3"},{"problem":20,"code":"#(-> (reverse %) rest first)","user":"5615fd5de4b06b1bb21829fd"},{"code":"(fn pen-elem [x]\n  (nth x (- (count x) 2)))","problem":20,"user":"4fa4d900e4b081705acca1a7"},{"problem":20,"code":"(fn second-to-last-element [alist]\n    ((fn nth-element [alist n]\n      (if (= n 1)\n          (first alist)\n          (nth-element (rest alist) (- n 1))))\n    alist (- (count alist) 1)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":20,"code":"(fn reverse-2th [v]\n  (if (= (count v) 2)\n    (first v)\n    (reverse-2th (rest v))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [lst]\n  (cond\n   (= nil lst) nil\n   (= 2 (count lst)) (first lst)\n   :else (recur (rest lst))))","problem":20,"user":"51eff50fe4b0249c592fbdf0"},{"code":"(fn [my-list]\n  (second (reverse my-list)))","problem":20,"user":"5282c03be4b0757a1b171461"},{"problem":20,"code":"(fn [[fst & rst]] (if (= 1 (count rst)) fst (recur rst)))","user":"5de5fd64e4b0948ae9d9ae20"},{"problem":20,"code":"(fn [x] ( first (rest (reverse x))))","user":"54fdc8b9e4b07d26eda61d3c"},{"code":"(fn [v] (if-not (seq (rest (rest v))) (first v) (recur (rest v))))","problem":20,"user":"51990df9e4b068aa333628fc"},{"problem":20,"code":"(fn getlast [x]\n  (nth x (- (count x) 2)))","user":"5ec03772e4b00a66d4a95289"},{"code":"(fn sla [x] (if (empty? (rest (rest x)))\r\n                (first x) (sla (rest x))))","problem":20,"user":"4df7cb14535d04ed9115e776"},{"problem":20,"code":"#(if (= (count (rest %)) 1) (first %) (recur (rest %)))","user":"55614f6ce4b0c656e3ff17c5"},{"problem":20,"code":"(fn pen [xs] (nth xs (-> xs (count) (dec) (dec))))","user":"5f9f0e77e4b0715f5002d83b"},{"code":"(fn pen [l]\n  (if (<= (count l) 2)\n    (first l)\n    (pen (rest l))))","problem":20,"user":"525cb4c4e4b0cb4875a45d44"},{"code":"#(nth % (- (count %) 2))","problem":20,"user":"4db342d7535df7e46ed9b6cd"},{"problem":20,"code":"(fn motherfucker [x]\n  (first \n   (take-last 2 (seq x))\n  )\n)","user":"57f02543e4b0bfb2137f5beb"},{"problem":20,"code":"(fn f [[hd & tl]]\n  (cond\n   (empty? tl) nil\n   (empty? (rest tl)) hd\n   true (f tl) ))","user":"594c1baae4b07ddc2dafae59"},{"code":"#(get (vec %) (-(count %) 2))","problem":20,"user":"52e980b3e4b09f7907dd14af"},{"problem":20,"code":"(fn [s] (->> s reverse second))","user":"5c7fc525e4b07cc8e14f6830"},{"problem":20,"code":"(fn [k] (nth k (- (count k) 2)))","user":"5fcbf407e4b07e53c2f3eff0"},{"problem":20,"code":"(fn [coll]\n  (loop [col coll]\n    (if (= 2 (count col))\n      (first col)\n      (recur (rest col)))))","user":"5c38422ae4b0d62ef62d9f7f"},{"code":";#( first( drop 1 (reverse %)))\n\n(comp last butlast)","problem":20,"user":"52f426fce4b05e3f0be25f1e"},{"problem":20,"code":"(fn [arg1]\n(cond\n(and (= arg1 (list 1 2 3 4 5))) 4\n(and (= arg1 [\"a\" \"b\" \"c\"])) \"b\"\n(and (= arg1 [[1 2] [3 4]])) [1 2]\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn stl [arr]\n  (second (reverse arr)))","problem":20,"user":"53a30c19e4b0f1fc74538832"},{"problem":20,"code":"(fn second-last [s]\n  (-> s reverse second))","user":"59cd351ee4b0ef0a1e9b5b35"},{"problem":20,"code":"#(second(reverse % ))","user":"57c4ef0be4b05aa3c4741cd8"},{"problem":20,"code":"(fn penultimate [[a b & r]] (if (empty? r) a (penultimate (conj r b))))","user":"5912477be4b0163c97b36eec"},{"code":"(fn [seq] (if (= (count seq) 2) (first seq) (recur (next seq))))","problem":20,"user":"51455e14e4b0e88796073407"},{"code":"( fn [x]\n  (second (reverse x) )\n)","problem":20,"user":"4ea3f035535d7eef308072ca"},{"code":"#(first (nthrest (reverse %) 1))","problem":20,"user":"509fe2bae4b08df8156e9e42"},{"problem":20,"code":"(fn [coll]\n  \n  (nth coll (- (count coll) 2 ) )\n  \n  )","user":"56a358d0e4b0542e1f8d14c9"},{"code":"(fn penultimate [[x1 x2 & xs]]\n  (if xs\n      (penultimate (conj xs x2))\n      x1))","problem":20,"user":"4eecc9ad535d93acb0a668b4"},{"code":"#(-> (reverse %) second)","problem":20,"user":"4f031773535dcb61093f6a5c"},{"problem":20,"code":"(fn [xs]\n  (loop [x (first xs)\n         xs' (rest xs)]\n    (if (= 1 (count xs'))\n      x\n      (recur (first xs') (rest xs')))))","user":"590e5e8ae4b047aa04b19a25"},{"code":"(fn\n  [x]\n  (nth x (- (count x) 2)))","problem":20,"user":"529223cbe4b0239c8a67af26"},{"problem":20,"code":"(fn penultimate [list] (\n                        if (= (count list) 2)\n                        (first list)\n                        (penultimate (rest list))\n                        )\n)","user":"58e8014be4b056aecfd47ce1"},{"problem":20,"code":"(fn [l] (loop [x l] (if (= (count x) 2) (first x) (recur (rest x)))))","user":"58468269e4b089d5ab817e92"},{"problem":20,"code":"(fn pent[x] (if (= (count (rest x)) 1) (first x)(pent (rest x))))","user":"52419e78e4b076e5d3121f21"},{"problem":20,"code":"#( first(rest(reverse %1)))","user":"57b8f784e4b0fbc9809a27ea"},{"code":"(fn [e] (second (reverse e)))","problem":20,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":20,"code":"(fn [seq] (loop [remaining seq] (if (empty? (rest (rest remaining))) (first remaining) (recur (rest remaining)))))","user":"586d2f5be4b01531a375e98c"},{"code":"(comp \n     second reverse)","problem":20,"user":"52dea949e4b09f7907dd13f4"},{"problem":20,"code":"(fn second-to-last-element [xs] (if (> (count xs) 2) (second-to-last-element (rest xs)) (first xs)))","user":"54f06aede4b024c67c0cf896"},{"problem":20,"code":"(fn [coll] (nth coll (- (count coll) 2 )))","user":"54deab4ce4b024c67c0cf7a5"},{"problem":20,"code":"(fn[x] (last (drop-last (to-array x))))","user":"5f1108d7e4b091ba50b4dba9"},{"problem":20,"code":"(fn [[a b & l]] (if (empty? l) a (recur (conj l b))))","user":"559a98a4e4b066d22e731f44"},{"problem":20,"code":"#(first (rest (take 2 (reverse %))))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn [seq] (let [L (count seq)] (nth seq (- L 2))))","problem":20,"user":"4fc52d79e4b081705acca386"},{"code":"#(nth (reverse %)  1)","problem":20,"user":"5204173be4b0fb7e47ea5216"},{"code":"(fn [x] (->> x (reverse) (drop 1) (first)))","problem":20,"user":"4f616892e4b0defedf855fbf"},{"problem":20,"code":"(fn get-last [x] \n  (nth x (- (count x) 2)))","user":"58bdb36fe4b0888cdc949d35"},{"code":"(fn [l]\n    (loop [h (first l) s (first (rest l)) t (rest (rest l))]\n      (if (seq t) (recur s (first t) (rest t)) h)))","problem":20,"user":"4e5a66d3535d8a8b8723a2ad"},{"problem":20,"code":"(fn walk [x] (if (= 2 (.size x)) (first x) (walk (rest x))) )","user":"59fa1b05e4b0ca45a743a356"},{"problem":20,"code":"(fn secondToLast [x] (first (rest (reverse x))))","user":"558217e6e4b05c286339e103"},{"code":"(fn [x] (second (reverse x) ) )","problem":20,"user":"4f047768535dcb61093f6bc9"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2)\n             )\n  )","user":"5820cc61e4b04b46fc4b0f61"},{"problem":20,"code":"(fn pen [x]\n  (let [len (count x)]\n    (if (= 2 len)\n      (first x)\n      (pen (rest x)))))","user":"5aa293b4e4b0d174b936c856"},{"problem":20,"code":"(fn [x]\n  (loop [p nil q x]\n    (if-not (next q) p\n      (recur (first q) (rest q)))))","user":"57aa053fe4b0b8559636fc61"},{"code":"(fn penult [x] (if (= 2 (count x)) (first x) (penult (rest x))))","problem":20,"user":"52d92f13e4b09f7907dd13a2"},{"code":"#((comp last pop) (vec %))","problem":20,"user":"52ce4c32e4b07d0d72b2738d"},{"problem":20,"code":"(fn [xs] (let [xs (reverse xs)] (first (rest xs))))","user":"57b65420e4b0fbc9809a27be"},{"problem":20,"code":"(fn penultimo\n  [lst]\n  (if (= 2 (count lst))\n    (first lst)\n    (penultimo (rest lst))))","user":"59e68254e4b0249b728206fc"},{"code":"(fn [lista] (first (take-last 2 lista)))","problem":20,"user":"536e642fe4b0fc7073fd6e6e"},{"problem":20,"code":"(fn [col] \n  (first(rest(reverse col)))\n  )","user":"576d24ede4b0979f8965155b"},{"code":"(fn penultimateElement[list]\n  (if (= (count list) 2)\n    (first list)\n    (penultimateElement (rest list))))","problem":20,"user":"525d490ae4b0cb4875a45d70"},{"problem":20,"code":"(comp  #(nth % 1) reverse)","user":"551747e0e4b06a49daca83c1"},{"problem":20,"code":"#(first ( reverse (take 2 (reverse %))))","user":"5fa7009be4b0fa27300f3dd6"},{"code":"#(->> % reverse (take 2) last)","problem":20,"user":"4ecfe9ab535d44c135fd68c0"},{"problem":20,"code":"(fn penultimate [xs] (if (= (count (rest xs)) 1) (first xs) (penultimate (rest xs))))","user":"54d03026e4b018d918be98de"},{"problem":20,"code":"(fn seclast \n  ([lst]\n   (seclast lst \" \"))\n  ([lst lastval]\n  (if (= (second lst) nil)\n    lastval\n    (seclast (rest lst) (first lst)))))","user":"5499e052e4b03163384f4705"},{"problem":20,"code":"(fn [x]\n  (let [index (- (count x) 2)]\n    (nth x index)))","user":"597bb1fce4b02382a38ad204"},{"problem":20,"code":"(fn [x]\n  (second (reverse x))\n)","user":"54843fb7e4b0e286459a1199"},{"code":"(fn [i]\n (second (reverse i)) \n)","problem":20,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"problem":20,"code":"(fn [coll]\n  (let [[a b & more] coll]\n    (if more\n      (recur (next coll))\n      a\n    )\n  )\n)","user":"53d78b64e4b0e771c3025466"},{"problem":20,"code":"(fn [li]\n  (if (= 2 (count li))\n    (first li)\n    (recur (rest li))))","user":"5c96f3dde4b048ec896c5a67"},{"problem":20,"code":"(fn [[x & rest]] (if (nil? (next rest)) x (recur rest)))","user":"577832f4e4b0979f8965165b"},{"problem":20,"code":"(fn one [x] (loop [the_list x]\n          \t(if (<= (count the_list) 2)\n              (first the_list) \n              (recur (rest the_list)) )\n         ))","user":"55300ea8e4b076ab5578f80b"},{"code":"#(first ( rest ( reverse %)))","problem":20,"user":"5098bce3e4b0cae2931060a0"},{"problem":20,"code":"; #(nth % (dec (dec (count %))))\n; #(nth % (- (count %) 2))\n\n; #(second (reverse %))\n(comp second reverse)\n; (comp first next reverse)\n; #(nth (reverse %) 1)","user":"591d182ee4b09b4ee5954c10"},{"code":"#(->> % reverse (drop 1) first)","problem":20,"user":"4dbfaf8f535d020aff1edf78"},{"code":"(fn lastEl[x] (nth x (- (count x) 2)))","problem":20,"user":"4fa2b650e4b0dcca54ed6d6a"},{"code":"(fn penu [list]\n  (cond\n   (or (empty? list) (empty? (rest list))) nil\n   (empty? (rest (rest list))) (first list)\n   :else (penu (rest list))))","problem":20,"user":"5170643ee4b004f79986ad89"},{"code":"(fn getLast [coll] (first (drop (- (count coll) 2) coll)))","problem":20,"user":"50afdfc0e4b0c3f5ed5c29a6"},{"problem":20,"code":"#(if (list? %)\n    (nth % (- (count %) 2))\n    (get % (- (count %) 2))\n    )","user":"5c2d8e41e4b0d62ef62d9ef4"},{"problem":20,"code":"(fn \n  [seqParam]\n  (loop [currElement nil\n         prevElement nil\n         seqElements seqParam]\n    (if (= (count seqElements) 1)\n      prevElement\n      (recur (first (rest seqElements)) (first seqElements) (rest seqElements)))))","user":"5b69bf95e4b0c6492753e790"},{"problem":20,"code":"(fn [s]\n  (-> s (reverse) (rest) (first)))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn [q] (second (reverse q)))","problem":20,"user":"4eba9ac1535dfed6da9c6d66"},{"problem":20,"code":"(fn [coll]\n  (->>\n    coll\n    (reverse)\n    (take 2)\n    (reverse)\n    (first)\n   ))\n; worst solution ever :/","user":"60a52517e4b00e9e6653c459"},{"problem":20,"code":"(fn [col]\n  (get (vec col) (-(count col) 2))\n  )","user":"58fb381ae4b0438e51c2cf71"},{"problem":20,"code":"#(-> % reverse pop peek)","user":"5a4c278ee4b05d388ecb6b8e"},{"code":"#(nth % (-> % count dec dec))","problem":20,"user":"4e8f687d535d65386fec214e"},{"code":"(fn my-penult [lst]\n  (letfn [(rec [lst n]\n               (if (= n 2)\n                 (first lst)\n                 (rec (rest lst) (- n 1))))]\n    (rec lst (count lst))))","problem":20,"user":"51e0198ee4b01188f0627539"},{"code":"(fn s [x] (second (reverse x)))","problem":20,"user":"504e5989e4b0f6ff3350c4a4"},{"problem":20,"code":"(fn [seq]\n  (let [seq-len (count seq)]\n    (nth seq (- seq-len 2))))","user":"546805d6e4b00cfc9eacc134"},{"problem":20,"code":"(fn last-el [lst] (nth lst (- (count lst) 2)))","user":"58299e03e4b051871117bf46"},{"problem":20,"code":"(fn nexttolast [s]\n\t(if (> (count s) 2)\n      (nexttolast (rest s))\n      (first s)\n    )  \n)","user":"592018d2e4b09b4ee5954c55"},{"code":"#(nth % (- (count %) 2)    )","problem":20,"user":"5151c184e4b03e678e393add"},{"problem":20,"code":"(fn [[head & tail]]\n  (if (seq tail)\n    (let [[x & y] tail]\n      (if (seq y)\n        (recur tail)\n        head\n      )\n    )\n  )\n)","user":"56438b13e4b0018b46ad8bf6"},{"code":"(fn get-last [s] (if (nnext s) (recur (next s)) (first s)))","problem":20,"user":"5029399be4b061fd216be4b6"},{"problem":20,"code":"(fn mylst [x] (nth x (- (count x) 2)))","user":"54290a64e4b01498b1a71b36"},{"problem":20,"code":"#(first (drop (- (count %) 2 ) % ))","user":"56e22366e4b03a7c14b85a30"},{"code":"(fn las [lst] (nth lst (- (count lst) 2)))","problem":20,"user":"5087f895e4b0198722bd9852"},{"problem":20,"code":"(fn [aseq] (nth  (reverse aseq) 1))","user":"5a7b18a7e4b03baeef9276d7"},{"problem":20,"code":"(fn [xs]\n  (loop [[x y & ys] xs]\n    (if (nil? ys)\n      x\n      (recur (conj ys y)))))","user":"5426a59ee4b01498b1a71b1b"},{"code":"#(.get %(- (count %1) 2))","problem":20,"user":"52565fcfe4b0541d1855ba19"},{"code":"(fn [x]\n(nth x (- (count x) 2))\n)","problem":20,"user":"5388a55de4b0640c7a9a58a1"},{"problem":20,"code":"( comp second reverse      )","user":"5650ac8be4b0284900eef6c2"},{"code":"(fn [x] \n  ( nth x (- (count x) 2) ) \n)","problem":20,"user":"534c25a3e4b084c2834f4a8b"},{"problem":20,"code":"(fn tail [xs] \n  (if (= (count (rest xs)) 1) \n    (first xs) \n    (tail (rest xs))))","user":"54696109e4b00cfc9eacc146"},{"problem":20,"code":"(fn [x]\r\n   (if (empty? (rest (rest x)))\r\n     (first x)\r\n     (recur (rest x)) \r\n   )\r\n)","user":"55cde227e4b0e31453f64a22"},{"code":"#(first (drop (- (count %1) 2) %1))","problem":20,"user":"4f03b3fb535dcb61093f6b52"},{"problem":20,"code":"#(nth(reverse %) 1)","user":"4ddf597a535d08e6dec9fddf"},{"code":"(fn [coll] \n  (loop [c coll]\n    (cond\n     (< (count c) 2) nil\n     (= 2 (count c)) (first c)\n     :else (recur (rest c))\n     )))","problem":20,"user":"52f69565e4b047fd55836fb9"},{"problem":20,"code":"(fn a [lst] (second (reverse lst)))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn [r]\n  (if (= (count r) 2)\n      (first r)\n      (recur (rest r))))","problem":20,"user":"4f721e9ee4b07046d9f4f01e"},{"code":"(fn[l] (first (rest (reverse l))))","problem":20,"user":"4e6a2498535d8ccf87e9fea1"},{"problem":20,"code":"(fn [x] (get (into [] x) (- (count x) 2)))","user":"58cff8b0e4b03c36ff7e58c0"},{"code":"(fn my_pen [seq] (if (= () (rest (rest seq)))\n                    \t(first seq)\n                        (my_pen (rest seq))))","problem":20,"user":"52ac41fee4b0c58976d9ac85"},{"problem":20,"code":"#(first (drop 1 (reverse(seq %))))","user":"595d4996e4b066ee0a44b01d"},{"problem":20,"code":"(comp first reverse (partial drop-last 1))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":20,"code":"(fn [s] \n  (first \n   (rest\n    (reverse s)\n )))","user":"5c862d0ae4b0c8042a70ce8c"},{"problem":20,"code":"#(let [n (- (count %) 2)]\n    (nth % n)\n        )","user":"559d6288e4b0ec2b359424dc"},{"problem":20,"code":"(fn my-last-second [x] (first (rest (reverse x))))","user":"566e5a03e4b0a866af6896d8"},{"problem":20,"code":"(fn [x] \n  \t(nth x (- (count x) 2)))","user":"55c3ebe7e4b0e31453f6498e"},{"problem":20,"code":"(fn next-to-last [xs]\n  (if (empty? xs)\n    nil\n    (let [[x y & xsp] xs]\n      (if (empty? xsp)\n        x\n        (recur (conj xsp y))))))","user":"53dfbc75e4b0d874e779ae44"},{"problem":20,"code":"(fn [x] (loop [v x] (if (= (count v) 2) (first v) (recur (rest v)))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"code":"(fn [xs]\n  (second (reverse xs)))","problem":20,"user":"4eaf0d91535d7eef3080732e"},{"code":"(fn myFunc [x] \n  (if (= () (rest (rest x)))\n    (first x)\n    (myFunc (rest x))))","problem":20,"user":"534e0fdbe4b084c2834f4aac"},{"problem":20,"code":"(fn [x] (last (let [n (last x)] (remove #(= % n) x))))","user":"56c88f71e4b0ed865f9758d3"},{"code":"(fn [x] (first (take 1 (take-last 2 x))))","problem":20,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [[n & more]] (if (> (count more) 1) (recur more) n))","problem":20,"user":"523b10dfe4b02f719975bdb8"},{"code":"(fn [x]\n  (if (= 2 (count x)) (first x) (recur (rest x))))","problem":20,"user":"51eadb98e4b0f1f103a0d153"},{"code":"#(let [[h & t] %]\n   (cond\n    (nil? (next t)) h\n    :else (recur t)))","problem":20,"user":"4fbdcb87e4b081705acca30a"},{"problem":20,"code":"(fn [vec]\n  (nth vec\n     (- (count vec) 2)))","user":"54db1911e4b024c67c0cf75b"},{"code":"(fn [p] (second (reverse p)))","problem":20,"user":"52f59d4be4b09b582c12c9c6"},{"code":"(fn [data]\n  (first (rest (reverse data))))","problem":20,"user":"4df3c9e4535d08e6dec9fe2a"},{"code":"(fn almost-last\n  [[first second & rest]]\n  (if (empty? rest)\n    first\n    (almost-last (cons second rest))))","problem":20,"user":"5143c13ee4b0b4fb4ace5f3b"},{"problem":20,"code":"(fn [s] (if (> (count s) 2) (recur (next s)) (first s)))","user":"54c3747de4b045293a27f60e"},{"problem":20,"code":"(fn [s] \n  (if (= (count s) 2) \n    (first s) \n    (recur (rest s))))","user":"5a7a09e6e4b03baeef9276ca"},{"problem":20,"code":"(fn [numbers]\n  (let [[first second & remaining] (reverse numbers)] second))","user":"60b62f2fe4b0e0fa5f1b4246"},{"problem":20,"code":"(fn penultimateElement [lst] (second (reverse lst)))","user":"59dd387be4b0a0ac046f2502"},{"code":"(fn [l] (get (vec l) (- (count l) 2)))","problem":20,"user":"501284d9e4b030d97e4db710"},{"code":"(fn p20 [l]\n  (first \n  (rest \n    (reverse l))))","problem":20,"user":"51750fc5e4b07031762f2ee6"},{"problem":20,"code":"(fn [x]\n  (-> x (reverse) (second)))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn get-elnt [[x y & xs]]\n  (cond \n   (not xs) x\n   (< (count xs) 2) y\n   :else (get-elnt xs)))","problem":20,"user":"523b82efe4b07becd5be21f0"},{"problem":20,"code":"(fn [sq]\n  (nth\n   (rest\n    (reverse sq)) 0))","user":"5cae5247e4b026601754b884"},{"code":"(fn [x] (-> x (reverse) (nth 1)))","problem":20,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [seq] \n  (if \n    (= 2 (count seq))\n    (first seq)\n    (recur (rest seq))))","problem":20,"user":"4df6646e535d08e6dec9fe34"},{"problem":20,"code":"#(nth % (- ( count %) 2))","user":"5c863a81e4b0c8042a70ce8e"},{"problem":20,"code":"#(->> %1 (drop (- (count %1) 2)) (first))","user":"528b3f5ae4b0239c8a67ae93"},{"code":"(fn mylast [x] (if (first (rest(rest x))) (mylast (rest x)) (first x)))","problem":20,"user":"50cc30c5e4b0f78a8e1645bf"},{"problem":20,"code":"(fn [coll] (nth coll (-(count coll)2)))","user":"552ac48ee4b0ffed3738f957"},{"problem":20,"code":"(fn vorletzter [[erster & derrest]] (if (= (count derrest) 1) erster (vorletzter derrest)))","user":"542fa0dde4b0dad94371f2d2"},{"code":"#(nth %  (-(count %) 2))","problem":20,"user":"514cc029e4b019235f6c057c"},{"problem":20,"code":"#(first (rest (reverse %)))\n;#(% --> reverse rest first)","user":"5647912ae4b0284900eef620"},{"problem":20,"code":";;(fn [col] (nth (reverse col) 1))\n#(nth (reverse %) 1)","user":"55150524e4b055c2f668d4d9"},{"problem":20,"code":"(fn [coll]\n   (loop [[element & remaining] coll]\n     (if (= 1 (count remaining))\n       element\n       (recur remaining))))","user":"58a34442e4b02bd94d917ef2"},{"code":"(fn nth [n c]\n  (if (= (count (rest c)) (- n 1))\n  (first c)\n  (nth n (rest c)))) 2","problem":20,"user":"4fff00ede4b0678c553fc3fc"},{"problem":20,"code":"#(peek (reverse (butlast %)))","user":"54d74cffe4b0a52adc2e2028"},{"problem":20,"code":"(fn pent [x] (if (empty? (rest (rest x)))\n               (first x)\n               (pent (rest x))))","user":"562b8613e4b058fa18c5a6cd"},{"code":"(fn pu [x] (if (<= (count x) 2) (first x) (pu (rest x))))","problem":20,"user":"5131104ae4b09e21d785bdfe"},{"problem":20,"code":"(fn [x]\n  (loop [x x n 0 s (+ (count x) -2)]\n    (if (= n s)\n      (first x)\n      (recur (rest x) (inc n) s))))","user":"5839f079e4b089d5ab817d48"},{"code":"(fn penu [liste] (nth liste (- (count liste) 2)))","problem":20,"user":"50aa3afce4b07e35d68b27b8"},{"problem":20,"code":"(fn [seq] (second (reduce conj (list) seq)))","user":"5d84545ee4b0915913b1d38b"},{"problem":20,"code":"(fn penultimate [aList] (if (= 2 (count aList)) (first aList) (penultimate (rest aList))))","user":"56326995e4b0bfe05bf117a3"},{"problem":20,"code":"#(.get %(-(count %) 2))","user":"5cbef48ee4b0ccb06196275c"},{"code":"(fn [coll]\n  (apply\n  (fn derp\n    ([fst snd] fst)\n    ([fst snd & rst]\n      (apply derp (cons snd rst)))\n  ) coll)\n  )","problem":20,"user":"4eb9c7ba535dfed6da9c6d5b"},{"code":"(fn blah [s]\r\n  (let [s (seq s)\r\n        r (next s)]\r\n    (if (nil? (next r))\r\n      (first s)\r\n      (blah r))))","problem":20,"user":"501577ade4b0aaedd199e911"},{"problem":20,"code":"#(nth\n  %\n  (- (count %) 2))","user":"53cc0d51e4b00fb29b2212d5"},{"problem":20,"code":"(fn [s]\n  (if (next (next s))\n    (recur (next s))\n  (first s)))","user":"58a5822fe4b01a0c0b232913"},{"problem":20,"code":"(fn [xs] (-> xs reverse (nth 1)))","user":"55db2a13e4b0e31453f64ae2"},{"code":"(fn [ks]\n  (if (= 2 (count ks))\n    (first ks)\n    (recur (rest ks))\n  )\n)","problem":20,"user":"531cd41ee4b08068f379eda9"},{"problem":20,"code":"(fn p [s] (last (take 2 (reverse s))))","user":"5dae0b91e4b0f8c104ccfc87"},{"problem":20,"code":"; (fn [coll] (last (butlast coll)))\n#(last (butlast %))","user":"55b7f263e4b01b9910ae29b4"},{"code":"(fn foo [lst]\n  (second (reverse lst)))","problem":20,"user":"5220a770e4b0e6a83c8925a3"},{"problem":20,"code":"(fn penultimo [elements] (nth elements (- (count elements) 2)))","user":"5c7d6cb6e4b0d597f478caae"},{"code":"(fn [sequence] (nth sequence (- (count sequence) 2)))","problem":20,"user":"515bed3be4b0388ca8ca1525"},{"code":"#(loop [col %,x nil]\n    (if (empty? (rest col) )\n        x\n        (recur (rest col) (first col) )\n    )\n  )","problem":20,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [mylist]\n    (if (= (count mylist) 2)\n      (first mylist)\n  (recur (rest mylist))))","problem":20,"user":"4e9a3a03535dbda64a6f6b70"},{"problem":20,"code":"(fn [x]\n    (let [reversed (reverse x)]\n      (first (drop 1 reversed))))","user":"55ed9108e4b0121d4835fddc"},{"problem":20,"code":"(fn [s]\n  \t(first(rest(reverse s))))","user":"5db1e852e4b010eb3c36cd0a"},{"code":"(fn [s]\n  (cond\n    (empty? s) nil\n    (empty? (rest (rest s))) (first s)\n    :else (recur (rest s))))","problem":20,"user":"4fa4ef2ee4b081705acca1a9"},{"problem":20,"code":"(comp first rest reverse)\n;;#(-> % reverse rest first)","user":"56826ebce4b0945ebc182a93"},{"problem":20,"code":"(fn lala [x] \n  (if (= (count x) 2)\n    (first x)\n    (lala (rest x))\n    ))","user":"559b7c65e4b066d22e731f55"},{"code":"(fn [x]\r\n  (if (second (rest x))\r\n    (recur (next x))\r\n    (first x)))","problem":20,"user":"4fea7bc4e4b0140c20fb9c07"},{"code":"(fn [coll] (nth coll (dec (dec(count coll)))))","problem":20,"user":"50705072e4b07bd6ad9b9f27"},{"code":"#( second (reverse %) )","problem":20,"user":"4fc43a8ee4b081705acca346"},{"code":"(fn second-to-last [seq]\n  (cond (< (count seq) 2) nil\n        (= 2 (count seq)) (first seq)\n        :else (second-to-last (rest seq))))","problem":20,"user":"4e7542b5535d7a570dd295c0"},{"code":"#(nth (into () %) 1)","problem":20,"user":"4e307313535deb9a81d77f14"},{"problem":20,"code":";;;#(first (rest (reverse %)))\n\n(fn get-next-to-last [[x y & xs]]\n  (if xs\n    (get-next-to-last (cons y xs))\n    x))","user":"5a1c94dee4b0ff51aa4b3249"},{"code":"(fn [x] ((comp second reverse) x))","problem":20,"user":"508ae16be4b0be79e5b189bc"},{"code":"(fn [list] \n  (let [v (vec list)]\n\t (get v (- (count v) 2))))","problem":20,"user":"529ca7dae4b04e0c58e87b67"},{"problem":20,"code":"(fn [[x y & xs]] (if xs (recur (cons y xs)) x))","user":"5f6d4305e4b02876ed9fd05c"},{"problem":20,"code":"(fn mylast [x]\n  (if (seq (rest (rest x)))    \n    (recur (rest x))\n    (first x)))","user":"5b5eb53be4b0c6492753e6dd"},{"code":"(fn get-penult [ls]          \n  (if (= (count ls) 2) (first ls) (get-penult (rest ls))))","problem":20,"user":"52ec1dfbe4b0705949c4444b"},{"code":"(fn myfunc [x] (nth x (- (count x) 2)))","problem":20,"user":"5298bd13e4b02ebb4ef75063"},{"problem":20,"code":"(fn [seq] (first (reduce (fn [[a b] next] [b next]) [nil nil] seq)))","user":"5db92996e4b010eb3c36cd50"},{"problem":20,"code":"#(last (drop-last %) )","user":"543272b8e4b0dad94371f2ef"},{"problem":20,"code":"(fn [seq] (if (> (count(rest seq)) 1) (recur (rest seq))(first seq ) ))","user":"550851cde4b021ccfedb96b7"},{"code":"#(first (rest (reverse %)))","problem":20,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn penultimate [x] (first (rest (reverse x))))","problem":20,"user":"4e4a817e535dc968683fc4cc"},{"code":"(fn [l]\n  (last(take 2 (reverse l))))","problem":20,"user":"4f551054e4b0a7574ea717f5"},{"problem":20,"code":"( fn [x] (nth (reverse x) 1))","user":"53b33217e4b047364c0444a4"},{"code":"(fn [s] (if (= (count (next s)) 1) (first s) (recur (next s))))","problem":20,"user":"508d8ab2e4b0f17d83ea26be"},{"code":"(fn [x]\r\n  (loop [xs x]\r\n    (if (empty? (rest (rest xs)))\r\n      (first xs)\r\n      (recur (rest xs)))))","problem":20,"user":"4e113a81535d04ed9115e7c5"},{"code":"(fn [x]\n  (-> x  (reverse) (rest) (first)))","problem":20,"user":"4ec817a6535d6d7199dd36f1"},{"problem":20,"code":"#(\n  loop [remaining %]\n  (let [[first & rest] remaining\n       [second & rest-2] rest]\n  (if (empty? rest-2) \n    first \n    (recur rest)\n    ))\n )","user":"53bf899fe4b0c98a41f5cca3"},{"code":"(fn [input] (loop [l input] (if (> (count l) 2) (recur (rest l)) (first l))))","problem":20,"user":"5171f684e4b0d70c8bbbf248"},{"code":"(fn [li] (last (drop-last li)))","problem":20,"user":"52d45010e4b09f7907dd132d"},{"problem":20,"code":"(fn [x] \n  (if \n    (= 2 (.size x))\n    (first x) \n    (recur (rest x))))","user":"5a7460a0e4b0512ff01cdaaf"},{"code":"(fn [x] (second (reverse (vec x))))","problem":20,"user":"524ab5f2e4b09eba1c02239d"},{"code":"(fn\n  [[x y & rest]]\n  (if (empty? rest)\n    x\n   (recur (cons y rest))))","problem":20,"user":"516d2460e4b06f078fab252e"},{"code":"(fn [[h & t]] (if (< (count t) 2)\n                 h\n                 (recur t)))","problem":20,"user":"4e6dfe57535d5021c1a895fc"},{"code":"(fn pen [x] \n  (if (= 1 (count (rest x))) (first x) (pen (rest x)))\n)","problem":20,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [x] \n  (nth x (- (count x) 2)) \n)","problem":20,"user":"4e5f17b5535d8a8b8723a2dd"},{"problem":20,"code":"(fn [s]\n  (if (->> s next next)\n    (recur (rest s))\n    (first s)))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":20,"code":"#(loop [[elem & rst] %]\n   (if (empty? (rest rst))\n     elem\n     (recur rst)))","user":"54dd3bdde4b024c67c0cf791"},{"code":"(fn f20 [xs]\n    (nth xs (- (count xs) 2)))","problem":20,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":20,"code":"(fn penultimate [coll]\n  (let [[x & xs] coll\n        [y & ys] xs]\n    (if ys \n     (recur xs)\n     (and y x))\n  )\n)","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn penul [x] (first (rest (reverse x))))","problem":20,"user":"503bb73de4b07a1917cc34e2"},{"code":"(fn [c]\n  (if (= 2 (count c))\n    (first c)\n    (recur (rest c))))","problem":20,"user":"4dcc2435535d5973398f9290"},{"code":"(fn [l] (first (rest (reverse l))) )","problem":20,"user":"532b8749e4b09d4e7a9b5532"},{"code":"#(nth (reverse %) 1)","problem":20,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn penul \n  [coll]\n  (if (nil? (next (next coll))) \n    (first coll)\n    (penul (next coll))))","problem":20,"user":"53028ec0e4b0d8b024fd372d"},{"problem":20,"code":"(fn [x] (let [len (count x) item (- len 2)] (nth x item)))","user":"552f6277e4b076ab5578f801"},{"problem":20,"code":"(fn next-to-last [lst]\n  (if (next (next lst))\n    (recur (next lst))\n    (first lst)))","user":"58975725e4b00487982d52b7"},{"problem":20,"code":"#(last(drop-last %))","user":"53b4bddae4b047364c0444b9"},{"code":"(fn [x] (if (empty? (rest (rest x))) (first x) (recur (rest x))))","problem":20,"user":"4e88feef535d8b9bb0147ca8"},{"code":";(fn [x] (x (dec (dec (count x ) )))) - nope\n(fn [x] (first (rest (reverse x) )) )","problem":20,"user":"4ebc7b39535dfed6da9c6d85"},{"problem":20,"code":"(fn penultimate\n  [coll]\n  (first(rest(reverse coll))))","user":"547a714ae4b0c51c1f4d72cc"},{"problem":20,"code":"#(-> %\n     (reverse)\n     (rest)\n     (first))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":20,"code":"#(nth %1 (-> %1 (count) (- 2)))","user":"550a26e2e4b06e50f9beb12a"},{"problem":20,"code":"(fn second-last [seq] (second (reverse seq)))","user":"54cf0986e4b018d918be98c7"},{"problem":20,"code":"(fn [input]\n  (loop [[x y & xs] input]\n    (if (empty? xs)\n      x\n      (recur (cons y xs)))))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [list]\n  (loop [l list]\n    (if (empty? (rest (rest l)))\n      (first l)\n      (recur (rest l)))))","problem":20,"user":"4e6f2a1e535d5021c1a89619"},{"problem":20,"code":"(fn [x]\n    (if (= (count x) 2)\n       (first x)\n       (recur (rest x))))","user":"5a0c3546e4b04bbd27e6d9a5"},{"problem":20,"code":"(fn h [x]\n  (if (nil? (next (next x)))\n    (first x)\n    (h (next x))))","user":"5775c40ae4b0979f89651626"},{"problem":20,"code":"(fn foo [[x y & xs]] (if (empty? xs) x (foo (conj xs y))))","user":"54453f83e4b032a45b86939a"},{"code":"(fn ^:static last [s]\n        (if (next (next s))\n          (recur (next s))\n          (first s)))","problem":20,"user":"51eb0374e4b0f1f103a0d156"},{"code":"(fn get-pen [items]\n  (if (> (count items) 2)\n    (get-pen (rest items))\n    (first items)))","problem":20,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":20,"code":"(fn [coll]\n  (-> coll\n      reverse\n      second))","user":"5c032eaee4b0bdcf453d1671"},{"code":"(fn secondlast [coll]\n    (let [number 0\n          counter (- (count coll)2) ]\n      (loop [coll coll counter counter number number]\n        (if (= counter number)\n          (first coll)\n          (recur (next coll) counter (+ number 1))))))","problem":20,"user":"534eb269e4b084c2834f4aba"},{"problem":20,"code":"(fn lst [x] (first (drop 1 (reverse x))))","user":"5ab81cc9e4b073f17744267a"},{"problem":20,"code":"(fn stl [xs] \n  (if (= (count xs) 2)\n    (first xs)\n    (stl (rest xs))\n  )\n)","user":"5d67bfe6e4b0db5d338d15f6"},{"code":"(fn [y]\n  (loop [[x & xs] y]\n    (if (seq (next xs))\n      (recur xs)\n      x)))","problem":20,"user":"4fd2529ae4b04c3a95aa041f"},{"problem":20,"code":"(fn [seq]\n  (let [c (-> seq\n               (count)\n               (- 2))\n        s \n        (if (vector? seq)\n        \tseq\n        \t(into [] seq))]\n    (get s c)))","user":"59f75327e4b0966464fe6aec"},{"problem":20,"code":"(fn [my-seq] (nth my-seq (- (count my-seq) 2)))","user":"55d1f0bae4b0e31453f64a4d"},{"problem":20,"code":"#(->> (reverse %)\n      (drop 1)\n      (first))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":20,"code":"(fn second-to-last\n  [s]\n  (second (reverse s)))","user":"5813e208e4b0f478707a061b"},{"problem":20,"code":"(fn penult [a-seq]\n  (if (empty?\t(rest (rest a-seq)))\n      (first \ta-seq)\n      (penult \t(rest a-seq))\t))","user":"56795625e4b05957ce8c6186"},{"problem":20,"code":"(fn [s]\n  (if (= (next (next s)) nil)\n    (first s)\n    (recur (next s))))","user":"55be464ce4b01b9910ae2a07"},{"code":"(fn foo [l] (if (= '() (rest (rest l))) (first l) (foo (rest l))))","problem":20,"user":"5277b9b5e4b03e8d9a4a750d"},{"problem":20,"code":"(fn[%](first (take-last 2 %)))","user":"58eff21ae4b056aecfd47dd9"},{"code":"(fn[x] \n    (if (empty? (rest (rest x)))\n      (first x)\n      (recur (rest x))))","problem":20,"user":"4fe0ba48e4b0dd6cd5ce362a"},{"problem":20,"code":"(fn second-to-last [x] (second (reverse x) ))","user":"548d6b75e4b0e286459a1216"},{"problem":20,"code":"#(->% reverse second)","user":"54ce8733e4b018d918be98be"},{"problem":20,"code":"(fn foo [x]\n  (if  (= 2 (count x)) \n     (nth x 0)\n     (foo (rest x) )\n   )\n  \n)","user":"554ad20fe4b0a04f7929957a"},{"problem":20,"code":"(fn sl [col]\n  (let [[x & rest] col \n        cnt (count rest)]\n  \t(cond \n     (> 2 cnt) x\n     (= 2 cnt) (first rest)\n     (< 2 cnt) (sl rest))))","user":"558bb38fe4b0277789237631"},{"problem":20,"code":"(fn penultimate [l] \n  (if (= (rest (rest l)) '())\n    (first l)\n    (penultimate (rest l))))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":20,"code":"#(last(drop-last %1))","user":"5a79b212e4b03baeef9276c4"},{"code":"(fn [s](if (next (next s))\n      (recur (next s))\n      (first s)))","problem":20,"user":"4e967c4a535dbda64a6f6b47"},{"problem":20,"code":"(fn pn[x] (first (pop (reverse x))))","user":"5550e966e4b00713264bd9b3"},{"problem":20,"code":"(fn burp [x] (nth x (- (count x) 2)))","user":"584e47d3e4b0b7285a6f4e4e"},{"problem":20,"code":"(fn [some-array] (second (reverse some-array)))","user":"5bd71aefe4b0ed4b8aab4bb5"},{"problem":20,"code":"(fn [arglist] (.get arglist (- (count arglist) 2)))","user":"59b6f6d2e4b05c620303ca38"},{"code":"(fn [x] (first (drop (- (count x) 2) x)))","problem":20,"user":"4e21d76a535d04ed9115e81a"},{"code":"#( second ( reverse % ))","problem":20,"user":"4f6c9e1de4b07046d9f4efbd"},{"code":"(fn\n  [x]\n  (loop [head (first x)\n         tail (rest x)]\n    (let [[f & r] tail]\n      (if (empty? r)\n        head\n        (recur f r)))))","problem":20,"user":"52fdb82ae4b047fd55837031"},{"problem":20,"code":"(fn [s] \n  (second (reverse s)))","user":"5858f0cce4b0f14aab7c8727"},{"problem":20,"code":";; #(last (drop-last %))\n(fn [[x y & rst]]\n    (loop [x x y y rst rst]\n      (if (empty? rst) x\n          (recur y (first rst) (rest rst)))))","user":"5ed9b912e4b0c7845d86b0e3"},{"problem":20,"code":"(fn lastElement [paramList] (nth paramList (- (count paramList) 2)))","user":"548f3ee4e4b0e286459a1237"},{"problem":20,"code":"(fn [arr]\n  (let [elem-index (- (count arr) 2)]\n    (nth arr elem-index)))","user":"5e7f62cce4b085ba37836e3b"},{"code":"#(if (empty? (rest (rest %))) (first  %) (recur (rest %)))","problem":20,"user":"4e4bd94b535dc968683fc4d7"},{"problem":20,"code":"(fn [col] (first (drop 1 (reverse col))))","user":"570e0d4be4b0b0fb43fd06e5"},{"problem":20,"code":"(fn [seq] (let [[l, sl] (reverse seq)] sl))","user":"568fb17ce4b0dcc4269f40e2"},{"code":"#(if (next (next %1))\n  (recur (next %1))\n\t(first %1))","problem":20,"user":"4ec6157b535d6d7199dd36c2"},{"problem":20,"code":"(fn [l] (cond (= '() (rest (rest l))) (first l)\n              :else (recur (rest l))))","user":"5a2b7f4ee4b09cafd31c7f4a"},{"problem":20,"code":"(fn [l] (->> l (reverse) (second)))","user":"590bd0fee4b047aa04b199e3"},{"problem":20,"code":"#(let [[a b & c] %] (if (nil? c) a (recur (rest %))))","user":"545afffce4b01be26fd74647"},{"code":"(fn [l] \r\n  (nth l (dec (dec (count l)))))","problem":20,"user":"4fa719c0e4b081705acca1bf"},{"problem":20,"code":"(fn penultimate\n  [ls]\n  (last (butlast ls)))","user":"5c58736be4b01df32ab73247"},{"code":"(fn [coll]\n  (loop [prev nil y coll]\n    (if (next y)\n      (recur (first y) (rest y))\n      prev\n      )))","problem":20,"user":"50eded45e4b06330c1f87c4d"},{"code":"(fn r [x]\n  (if (> (count x) 2) (r (rest x))\n  (first x)))","problem":20,"user":"4e7db08d535db169f9c796e0"},{"problem":20,"code":"(fn [a] (first (pop (reverse a))))","user":"54c93206e4b045293a27f65d"},{"code":"(fn [s] (if (= (count s) 2) (first s) (recur (rest s))))","problem":20,"user":"5256cd77e4b0541d1855ba39"},{"code":"(fn [n] (last (take 2 (reverse n))))","problem":20,"user":"522f988be4b032bbe3424168"},{"problem":20,"code":"(fn [x]\n  (get (vec x) (let [sz (count x)]\n                 (if (< 1 sz)\n                   (- sz 2)\n                   0))))","user":"5e34318be4b0650de70e2b15"},{"problem":20,"code":"(fn [x]\n  (loop [f x i 0]\n    (if (< i (- (count x) 2))\n      (recur (rest f) (inc i))\n      (first f))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":20,"code":"(fn [coll]\n  (loop [coll coll\n         acc (list)]\n    (if (= (count coll) 1)\n      (first acc)\n      (recur (rest coll) (conj acc (first coll))))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":20,"code":"(fn f [[x & r]] (if (= (count r) 1) x (f r)))","user":"54c47620e4b045293a27f61c"},{"code":"(fn [l] (-> l reverse rest first))","problem":20,"user":"4dadaa5cc9a9d6ed2f99dc57"},{"problem":20,"code":"(fn [x] (->> x reverse pop first))","user":"56739bdce4b05957ce8c6122"},{"problem":20,"code":"(fn [col] \n  (.get col (-(count col) 2)))","user":"555c0ea0e4b0b056612e2245"},{"code":"(fn [f] (first (rest (reverse f))))","problem":20,"user":"4f2113f6e4b0d66497709fcd"},{"problem":20,"code":"(fn [seq] (first (drop 1 (reverse seq))))","user":"5e01841de4b0a607a9a45d39"},{"code":"(fn penultimate [l]\n  (if (empty? (rest (rest l))) (first l)\n      (penultimate (rest l))))","problem":20,"user":"4e2d84bf535deb9a81d77f09"},{"code":"#(if (= (count %) 2)\n    (first %)\n    (recur (rest %)))","problem":20,"user":"4f04f847535dcb61093f6beb"},{"problem":20,"code":"(fn [coll]\n  (loop [li coll\n         rs '()]\n    (if (empty? (rest li))\n      (first rs)\n      (recur (rest li) (conj rs (first li)))\n      )\n  ))","user":"553f70cae4b0a04f792994f8"},{"problem":20,"code":"(fn [c]\n  (->> c\n       reverse\n       (drop 1)\n       (take 1)\n       first))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn [s]\r\n  (if (next (next s))\r\n    (recur (next s))\r\n    (first s)))","problem":20,"user":"4e049a06535d04ed9115e7a0"},{"code":"#(nth % (dec (dec (count %))))","problem":20,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"(fn\n  [x]\n    (nth x (- (count x) 2)))","problem":20,"user":"4f9d87fce4b0dcca54ed6d24"},{"code":"#(nth % (dec (dec (count %)) ))","problem":20,"user":"513f400ae4b051389b345b3f"},{"problem":20,"code":"(fn penu [x]\n  (nth x (- (count x) 2)))","user":"5bd6e161e4b0ed4b8aab4baf"},{"code":"(fn [xs] (cond (= (rest (rest xs)) []) (first xs) :else (recur (rest xs))))","problem":20,"user":"50e647cde4b09e4d78444226"},{"problem":20,"code":"#(last ( filter (fn [x]\n           (not(= x (last %)))\n         ) %))","user":"5b5c5245e4b0c6492753e6ba"},{"code":"(fn [my-seq] (-> (seq my-seq) reverse rest first))","problem":20,"user":"5213348ae4b0d32679a50652"},{"problem":20,"code":"(fn [lst] (last (take (- (count lst) 1) lst)))","user":"58014febe4b0a837a8b30c50"},{"code":"(fn [s] (nth s (-> s count dec dec)))","problem":20,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":20,"code":"(fn\n  [x]\n  (nth\n   x\n   (-\n    (count x)\n    2)))","user":"54196d63e4b01498b1a71a34"},{"code":"#(first( rest( reverse % )))","problem":20,"user":"4fc5eb7fe4b0ee37620e1803"},{"problem":20,"code":"#(second\n  (reverse %))","user":"56f53c61e4b046a417f9206d"},{"code":"#(first(take-last 2 %1))","problem":20,"user":"4f296a80e4b0d6649770a02a"},{"code":"#( nth % (- (count %) 2) )","problem":20,"user":"50a3b55be4b0ceace084d494"},{"problem":20,"code":"(fn [xs]\n  (if (= (count xs) 2)\n  \t(first xs)\n  \t(recur (rest xs))))","user":"5f2d6787e4b033932238a66d"},{"code":"#( first ( take-last  2 %1 ))","problem":20,"user":"4f920065e4b0dcca54ed6ca9"},{"code":"#(nth %(- (count %) 2))","problem":20,"user":"51e30662e4b0c611d6113e3c"},{"problem":20,"code":"(fn [seq]\n    (nth (reverse seq) 1))","user":"5e317676e4b05b4b01516229"},{"problem":20,"code":"(fn pre-last [xs]\n  (if (= (rest(rest xs)) '())\n    (first xs)\n    (pre-last (rest xs))))","user":"56fff6a4e4b08d47c97781c3"},{"code":"(fn slf [x] (let [r (rest x)] (if (= (rest r) '()) (first x) (slf r))))","problem":20,"user":"4f0b0834535d0136e6c222fe"},{"problem":20,"code":"(fn [x] (last (take 2(reverse x))))","user":"55313056e4b076ab5578f81f"},{"code":"(fn [xx] (nth xx (- (count xx) 2)))","problem":20,"user":"4fec550de4b0681fd128dca6"},{"problem":20,"code":"(fn [x] (let [the-index (count x)]\n          \n          (nth x (- the-index 2))))","user":"5f1eebcee4b0f565ad998273"},{"code":"(comp first rest reverse vec)","problem":20,"user":"4e7da290535db169f9c796de"},{"code":"(fn [lst] (nth lst (- (count lst) 2) ) )","problem":20,"user":"4f0496e7535dcb61093f6bd5"},{"problem":20,"code":"(fn [the-seq]\n  (nth the-seq (- (count the-seq) 2)))","user":"5c26c9b3e4b07e362c2305c5"},{"problem":20,"code":"(comp first rest reverse)\n\n;#(nth % (- (count %) 2))","user":"54126d0ce4b01498b1a719d5"},{"code":"(fn aa[s]\n  (case (count s)\n    2 (first s)\n    (aa (rest s))))","problem":20,"user":"52b63875e4b0c58976d9ad41"},{"code":"(fn [s] (-> s reverse second))","problem":20,"user":"500e38a5e4b068062f6e8d90"},{"problem":20,"code":"(fn [s] (loop [f (first s)\n               r (rest s)]\n          (if (= (count r) 1)\n            f\n            (recur (first r) (rest r)))))","user":"560ac5cae4b05f002753df09"},{"code":"(fn [coll] (last (take 2 (reverse coll))))","problem":20,"user":"504e8e8ce4b069badc5a33b4"},{"code":"(fn penultimate [coll]\n  (last (drop-last coll)))","problem":20,"user":"52ec1e95e4b0705949c4444c"},{"code":"(fn ntl [c] (if (= (count c) 2) (nth c 0) (ntl (rest c))))","problem":20,"user":"50c7ae57e4b00bb60fe0c536"},{"code":"(fn second-element\n  [seq]\n  (first (rest (reverse seq))))","problem":20,"user":"535d2e21e4b04ce2eb3ed2bd"},{"code":"(fn [elements]\n  (first (rest (reverse elements)))\n  )","problem":20,"user":"535943b3e4b04ce2eb3ed295"},{"code":"(fn [x] (first (rest(reverse x))))","problem":20,"user":"4ee5dbdb535d93acb0a66851"},{"problem":20,"code":"(fn secondlast \n  [[x1 & x2]]\n  (if (= 1 (count x2)) x1\n      (recur x2)))","user":"5e9771dee4b0157ca96647d0"},{"problem":20,"code":"(fn penulitmate [x] (nth x (- (count x) 2)))","user":"5ebdaeabe4b00a66d4a95274"},{"problem":20,"code":"(fn[x](first(drop 1 (reverse x))))","user":"5826a843e4b051871117befd"},{"code":"#(apply (fn  pul [a & more] (if(> 2 (count more)) a (apply pul more)) )%)","problem":20,"user":"50b25f2ce4b03ea88043355f"},{"problem":20,"code":"(fn [c] \n  (nth c (- (count c) 2)))","user":"4e170143535d04ed9115e7ed"},{"problem":20,"code":"(fn [input_sequence] \n  (first (rest (reverse input_sequence)))\n  \n  )","user":"5dfb33aae4b0a607a9a45cd7"},{"problem":20,"code":"(fn [items]\n  (loop [in items]\n    (let [x (first in)\n          xs (rest in)]\n      (if (> (count xs) 1)\n        (recur xs)\n        x))))","user":"573b8f67e4b0cd1946bd10ae"},{"code":"(fn [n] \n\t(second (reverse n))\n  )","problem":20,"user":"51749355e4b039bf5e7b602b"},{"problem":20,"code":"(fn penlast [lst]\n  (if (> 3 (count lst))\n          (first lst)\n          (penlast (rest lst))))","user":"5e9636fee4b0fbed045a3816"},{"problem":20,"code":"#(apply (fn [x y & z] y) (reverse %))","user":"5576e78de4b05c286339e075"},{"problem":20,"code":"(fn penult [x]\n  (nth x (- (count x) 2)))","user":"59b8334ce4b05c620303ca4f"},{"problem":20,"code":"#(nth (butlast %) (dec (count (butlast %))))","user":"5a37fab1e4b001c08efc0c93"},{"problem":20,"code":"(fn kung-fu [xs] (nth xs ((comp dec dec count) xs)))","user":"57bf2aace4b05aa3c4741c73"},{"problem":20,"code":"(fn [x]\n  (let [l (count x)]\n    (nth x (- l 2))))","user":"5a025edde4b01bb0ae8afd64"},{"code":"#(-> % butlast last)","problem":20,"user":"4e39d763535deb9a81d77f46"},{"problem":20,"code":"(fn [x] (.get x  (- (count x) 2)))","user":"572db7fbe4b0cd1946bd0f79"},{"problem":20,"code":"#(nth % (-(.size %)2) )","user":"59a1fd6be4b066c664927d1b"},{"code":"(fn [l](second (reverse l)))","problem":20,"user":"505d1b01e4b0e6aca564be04"},{"code":"(fn penu [x]\n  (if (= (count x) 2)\n    (first x)\n    (penu (rest x))))","problem":20,"user":"4fedb2cce4b0198f34b063b8"},{"problem":20,"code":"(fn [x] \n\t(first \n   \t\t(rest (\n               reverse x)\n        )\n    )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":20,"code":"(fn [xs] (first (take 1 (drop (- (count xs) 2) xs))))","user":"5920c191e4b09b4ee5954c61"},{"problem":20,"code":"#(nth  (reverse %) 1 )","user":"5989cebfe4b021a7a535fed3"},{"code":"(fn get-last [x] (\n  if (= (rest (rest x)) ()) (first x) (get-last (rest x))))","problem":20,"user":"4f9dbe07e4b0dcca54ed6d26"},{"problem":20,"code":"(fn[xs] ((comp second reverse) xs))","user":"57ea4569e4b0bfb2137f5b46"},{"problem":20,"code":"(fn [x] (if (= 1 (-> x rest count)) (first x) (recur (rest x))))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn [xs] (first (rest (reverse xs))))","problem":20,"user":"4e51c67a535d302ef430da6a"},{"code":"(fn [lizt]\n  (first (rest (reverse lizt)))  )","problem":20,"user":"4e7dc2ab535db169f9c796e5"},{"code":"(fn [x] (nth  x (- (count x) 2)))","problem":20,"user":"521177cee4b07aea8afc4f6e"},{"problem":20,"code":"(fn [xs]\n  (let [idx (- (count xs) 2)\n        second-to-last (nth xs idx)]\n    second-to-last))","user":"52df1d62e4b09f7907dd13fb"},{"problem":20,"code":"(fn [coll]\n  (do\n    (if (or (empty? coll) (= (count coll) 1)) \n      nil \n      (loop [[current & remaining] coll] \n        (if (= (count remaining) 1) \n          current \n          (recur remaining))))))","user":"59e213d8e4b08badc2a0c518"},{"problem":20,"code":"(fn [[one two & others]]\n  (loop [one one\n         two two\n         others others]\n    (if (empty? others)\n      one\n      (recur two (first others) (rest others)))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"problem":20,"code":"(fn [coll] (->> coll\n                reverse\n                (drop 1)\n                first))","user":"59f43ca3e4b0966464fe6aaa"},{"code":"(fn ok[x] (nth x (- (count x) 2)))","problem":20,"user":"52c70127e4b0c2d177d6211a"},{"code":"#(nth (vec %) (- (count %) 2) )","problem":20,"user":"4ebe8d65535dfed6da9c6d96"},{"problem":20,"code":"(fn[x] (nth (reverse x) 1))","user":"54ecc3e9e4b024c67c0cf857"},{"problem":20,"code":"(\n fn pre-last [x] (if (empty? (rest (rest x))) (first x) (pre-last (rest x)))\n )","user":"55673be4e4b0c656e3ff183c"},{"problem":20,"code":"(fn [lst]\n\t((fn [prev [x & rest]] (if (empty? rest) prev (recur x rest)) ) nil lst)\n  )","user":"54c169ade4b0ed20f4ff6f24"},{"problem":20,"code":"(fn [elements] (first (rest (reverse elements))))","user":"57d6c5cae4b0bd073c2023ce"},{"problem":20,"code":"(fn [value]\n\t(second (reverse value))\n)","user":"53ff602fe4b0de5c418485ff"},{"problem":20,"code":"(fn last-e [vect] (let [first-element (first vect)]\n                      (if (= (count (rest vect)) 1)\n                        first-element\n                        (last-e (rest vect)))))","user":"563b93a7e4b0bfe05bf11826"},{"code":"(fn s2l [x] (nth x (- (count x) 2)))","problem":20,"user":"522e8451e4b01cdb292c5f06"},{"problem":20,"code":"#(-> % (reverse) (nth 1))","user":"53cd5226e4b00fb29b2212e0"},{"problem":20,"code":"(fn [l]\n  (loop [ll l]\n  \t(let [length (count ll)]\n      (if (= length 2)\n      \t(first ll)\n      \t(recur (rest ll))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":20,"code":"(fn nt [coll] (if (= 2 (count coll)) (first coll) (nt (rest coll))))","user":"5e18bd30e4b0dc95940084fa"},{"problem":20,"code":"(fn fnname [x]\n  (last (take (- (count x) 1) x)))","user":"56bfb0ace4b060a8e693e39f"},{"code":"(fn hede [collection] (nth collection (- (count collection) 2)))","problem":20,"user":"52b20257e4b0c58976d9ace8"},{"problem":20,"code":"(fn[x] (-> (reverse x) rest first))","user":"579783c9e4b039eba2ecb0fd"},{"code":"(fn [x] (-> x reverse second))","problem":20,"user":"4f03f3b7535dcb61093f6b85"},{"problem":20,"code":"#(loop [lst %] \n   (if (= (count lst) 2)\n    \t(first lst)\n     \t(recur (rest lst))))","user":"5761513fe4b0994c1922fb87"},{"code":"(fn [[x1 x2 & xs :as all]]\r\n  (if (seq xs)\r\n    (recur (rest all))\r\n    x1))","problem":20,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn [l]\n  (nth l (- (count l) 2))\n)","problem":20,"user":"506ec408e4b09350ab4199f1"},{"code":"(fn [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (recur (next xs))))","problem":20,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn [list]\n  ( nth list ( - ( count list ) 2 ) ) )","problem":20,"user":"4fe899a6e4b07c9f6fd12c54"},{"code":"(fn f [[a & [b & c :as d]]]\r\n  (if c\r\n    (f d)\r\n    a))","problem":20,"user":"4ee1f2ba535d10e5ff6f535f"},{"problem":20,"code":"(fn [[a & b]]\n  ((fn [c [d & e]]\n     (if (empty? e) c (recur d e)))\n   a b))","user":"5e178fbee4b00200644e3d57"},{"problem":20,"code":"(fn second_last [x] (second(reverse x)))","user":"563aa090e4b0bfe05bf11801"},{"code":"(fn [x] (reduce (fn [y z] z ) (drop-last x)))","problem":20,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn [s]\n  (if (> (count s) 1)\n      (nth s (- (count s) 2))\n      nil))","problem":20,"user":"4ec812d9535d6d7199dd36f0"},{"problem":20,"code":"(fn second_last [xs] (nth xs (- (count xs) 2)))","user":"57cf9de8e4b00451144b0503"},{"problem":20,"code":"(fn oof [s] (if (nnext s)\n          (recur (next s))\n          (first s)))","user":"5e207b74e4b05b4b01516110"},{"problem":20,"code":"(fn ls\n  [s]\n  \t(if (empty? (rest(rest s))) (first s) (recur (rest s))))","user":"56cf6f72e4b0ea9b8538f769"},{"problem":20,"code":"(fn penulimate [x]\n  (nth x (- (count x) 2)))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn [[pen last & elems]]\n  (if (seq elems)\n    (recur (cons last elems))\n    pen))","problem":20,"user":"4ed0e139535d44c135fd68c7"},{"code":"(fn [a] (nth (reverse a) 1))","problem":20,"user":"51db5835e4b0e067a9bbadc6"},{"problem":20,"code":"(fn foo\n  [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (foo (rest x))))","user":"55a5e2f7e4b0acc240e31550"},{"problem":20,"code":"(fn [seqpar]\n  (second (reverse seqpar)))","user":"5795acb5e4b0e215f87e8486"},{"code":"(fn return-last [x]\n   (let [length (dec(dec(count x)))]\n      (nth x length)))","problem":20,"user":"52f01bfbe4b05e3f0be25ed9"},{"problem":20,"code":"(fn [x]\n  (-> x\n    (reverse)\n    (rest)\n    (first)))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn [coll] (last (take (- (count coll) 1) coll)))","problem":20,"user":"4f0bba3d535d0136e6c22306"},{"problem":20,"code":"(fn second-to-last [items]\n  (nth items (- (count items) 2)))","user":"5d652873e4b0db5d338d15ce"},{"code":"(fn [l]\n  (if (nil? (next (next l))) (first l) (recur (next l))))","problem":20,"user":"52990271e4b02ebb4ef7506d"},{"code":"(fn [xs] (nth xs (dec (dec (count xs)))))","problem":20,"user":"504e26b9e4b0f6ff3350c472"},{"code":"(fn [x] \n  (nth x (- (count x) 2)))","problem":20,"user":"530bae80e4b02e82168697d0"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2 )   ) )","user":"57d95f37e4b0bd073c2023fc"},{"code":"(fn my [xs]\r\n  (if (= (count xs) 2)\r\n    (first xs)\r\n    (my (rest xs))))","problem":20,"user":"4dd023dd535d5973398f92ad"},{"problem":20,"code":"#( first ( rest ( reverse % ) )  )","user":"575ec102e4b08062f99a4e71"},{"problem":20,"code":"(fn myseclast [r]\n  (if (nil? (seq (rest (rest r)))) (first r) (myseclast (rest r))\n    )\n  )","user":"518665cde4b0da5a5be3bad2"},{"code":"(fn [l]\n  (first (drop (- (count l) 2) l)))","problem":20,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":20,"code":"#(nth % (- (clojure.core/count %) 2))","user":"578d5185e4b0ebec4cfb7568"},{"problem":20,"code":"(fn [x]\n  (first (rest (reverse x) ))\n  )","user":"5bba703fe4b0a20761a235eb"},{"problem":20,"code":"#(->> (reverse %) (drop 1) first)","user":"56b9c644e4b0f2655033593a"},{"problem":20,"code":"(fn [x] \n     (second (reverse x)))","user":"5dcd541ae4b0b296f82db5ac"},{"code":"(fn [x] (if ( = 2 (count x)) (first x) (recur (next x))))","problem":20,"user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn foo [x] \n  (first(rest (reverse x))))","problem":20,"user":"4f04256d535dcb61093f6ba7"},{"code":"(fn [x] \r\n  (if (= [] (rest (rest x)))\r\n    (first x)\r\n  (recur (rest x))))","problem":20,"user":"4eb6d3ab535d7eef30807370"},{"problem":20,"code":"(fn[a] (second (reverse (vec a))))","user":"552b07b3e4b0ffed3738f95d"},{"problem":20,"code":"(fn [x] (let [c (count x)] (nth x (+ c -2))))","user":"58ee51a4e4b056aecfd47da6"},{"problem":20,"code":"(fn [s]\n  (loop [elems s]\n    (if (= (count (rest elems)) 1)\n    \t(first elems)\n    \t(recur (rest elems)))))","user":"5cc7073de4b0ccb06196282e"},{"problem":20,"code":"(fn [lista] (second (reverse lista)))","user":"540271aee4b0df28a13c62d0"},{"problem":20,"code":"#(if (next (rest %)) (recur (rest %)) (first %))","user":"55916d7be4b0604b3f94d57d"},{"problem":20,"code":"(fn penultimate [s]\n  (cond\n   (< (count s) 2) nil\n   (= (count s) 2) (first s)\n   :else (recur (rest s))))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn penult [l]\n  (nth l (dec (dec (count l)))))","problem":20,"user":"4fc8ce6ce4b0ee37620e183c"},{"problem":20,"code":"#(if (>= 2 (count %)) (first %) (recur (rest %)))","user":"4fc57c4ce4b0ee37620e17f6"},{"code":"#(nth % (- (count %) 2) )","problem":20,"user":"4e952463535dbda64a6f6b31"},{"problem":20,"code":"(fn [sequ] (nth sequ (- (count sequ) 2)))","user":"546bfe4ee4b00cfc9eacc172"},{"code":"(fn [lit] (nth lit (- (count lit) 2)))","problem":20,"user":"5190772de4b09156e89b2a0a"},{"code":"(fn [s] (first (drop (- (count s) 2) s)))","problem":20,"user":"4e6b8ac8535d8ccf87e9ff19"},{"problem":20,"code":"(fn [theList] (#(second (reverse theList))))","user":"548026d8e4b0e286459a1155"},{"problem":20,"code":"(fn [ls]\n  (loop [ls' ls]\n         (if (= 2 (count ls'))\n                (first ls')\n                (recur (drop 1 ls')))))","user":"58db7b81e4b0a4d5acaab680"},{"problem":20,"code":"(fn[xs] (last (take (dec (count xs)) xs)))","user":"4f725128e4b07046d9f4f02d"},{"code":"(fn [col]\n  (if (= (count (rest col)) 1)\n    (first col)\n    (recur (rest col))))","problem":20,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":20,"code":"(fn my-last\n  [x]\n  (nth x (- (count x) 2)))","user":"579d1567e4b05b1deef9ae12"},{"code":"(fn [x] (if (= (count x) 2)\n          (first x)\n          (recur (rest x))))","problem":20,"user":"5027fc0ce4b01614d1633ff2"},{"problem":20,"code":"#(if (second (rest %)) (recur (rest %)) (first %))","user":"5d7d17ece4b02e6b30c93558"},{"code":"(fn [coll] (last (drop-last coll)))","problem":20,"user":"513f98f9e4b00f13ea1bd88f"},{"problem":20,"code":"(fn last1 [ls]\n  (if (empty? (rest (rest ls)))\n    (first ls)\n    (last1 (rest ls))))","user":"53b7850ee4b047364c0444d0"},{"code":"(fn [cols] \n  (second (reverse cols))\n)","problem":20,"user":"4e50e2a0535dc968683fc4ef"},{"problem":20,"code":"(fn [l] (last (drop-last l)))","user":"552102bde4b08d5046aa8a67"},{"code":"(fn r [x]\n  (if (= (count x) 2)\n  \t(first x)\n    (r (rest x))))","problem":20,"user":"52bdd135e4b07a9af579230a"},{"problem":20,"code":"#(first ( rest (reverse %)))","user":"5720fc08e4b0c5bde472c0a3"},{"problem":20,"code":"(fn [items] (nth items (-(count items) 2)))","user":"54c0ce91e4b0ed20f4ff6f18"},{"code":"(fn [[h1 & [_ & r2 :as r1]]] (if (empty? r2) h1 (recur r1)))","problem":20,"user":"52299d14e4b04c906c9c6a7e"},{"problem":20,"code":"(fn [seq]\n  (loop [[first & rest] seq]\n    (if (= 1 (count rest))\n      first\n      (recur rest))))","user":"5426bd40e4b01498b1a71b1c"},{"problem":20,"code":"(fn [xs] (get (vec xs) (- (count xs) 2)))","user":"5b5b1b61e4b0c6492753e6a7"},{"code":"(fn second-to-last [x] (nth x (- (count x) 2)))","problem":20,"user":"4f748a40e4b044e54cd9a8f9"},{"problem":20,"code":"(fn [x] \n  (if (= 2 \n       (count (take 3 x))) \n      (first x)\n      (recur (rest x))))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"((fn [n]\n  (fn [s]\n    (if (= (count s) n)\n      (first s)\n      (recur (rest s)))))\n2)","problem":20,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":20,"code":"#(if (empty? (rest (rest %)))\n     (first %)\n     (recur (rest %)))","user":"5984f611e4b021a7a535fe45"},{"code":"(fn [l] (if (seq (rest (rest l))) (recur (rest l)) (first l)))","problem":20,"user":"503a8959e4b07a1917cc34d6"},{"code":"(fn [l] (peek (rest (reverse l))))","problem":20,"user":"4e64ae65535d8ccf87e9fe6d"},{"code":"(fn [lst]\n  (first (drop (- (count lst) 2) lst)))","problem":20,"user":"51f2ab8be4b0210f90e74554"},{"problem":20,"code":"#(nth % (-(dec (count %))1))","user":"55eca2b7e4b0121d4835fdca"},{"code":"(fn [coll] (nth coll (- (count coll) 2) ))","problem":20,"user":"523aa92ae4b081681ca7adcd"},{"problem":20,"code":"( fn [x] (second (reverse x)) )","user":"5617c13de4b06b1bb2182a15"},{"problem":20,"code":"(fn [seq]\n  (loop [remain seq]\n    (if (empty? (rest (rest remain)))\n      (first remain)\n      (recur (rest remain)))))","user":"5746061ae4b009280f9f2b5b"},{"problem":20,"code":"(fn [s]\n      (let [c (count s)]\n        (first (drop (- c 2) s))))","user":"55796743e4b05c286339e095"},{"code":"(fn [x]\n  (let [y (count x)]\n    (if (= x 1)\n      (first x)\n      (nth x (- y 2)))))","problem":20,"user":"53351564e4b0656e627bfd75"},{"problem":20,"code":"#(nth %1 ( -( count %1) 2))","user":"56c85700e4b0ed865f9758d0"},{"problem":20,"code":"(fn l\n  [[x & r]]\n  (if (seq (rest r))\n    (l r)\n    x))","user":"56c71414e4b0ed865f9758b6"},{"problem":20,"code":"(fn [e]\n   (first (drop-last (take-last 2 e)) \n      ))","user":"54ca05a6e4b057c6fda3a24e"},{"code":"(fn [x] (get (vec x) (- (count x) 2)))","problem":20,"user":"51002399e4b0ab35a0d409ff"},{"problem":20,"code":"(fn [l] (second (into '() l)))","user":"56098ccbe4b0053d1b86c7e4"},{"code":"(fn [seq] (-> seq reverse second))","problem":20,"user":"4efd98fa535de96065cf5086"},{"problem":20,"code":"(fn [x]\n  (->> x\n      (reverse)\n      (drop 1)\n      (first)))","user":"5943abb6e4b060784b3b792b"},{"problem":20,"code":"(fn [array] (first (drop (- (count array) 2) array)))","user":"5e595637e4b027a2e10ac10e"},{"problem":20,"code":"(fn -last1 [l] (\n          let [-head (first l) -tail (rest l)]\n\n          (if (= 1 (count -tail))\n            -head\n            (-last1 -tail)\n            ))\n  \n  )","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [x] ((comp first rest reverse) x))","problem":20,"user":"529a3c37e4b02ebb4ef75094"},{"problem":20,"code":"(fn r [s] (if (= (count s) 2) (first s) (r (rest s))))","user":"556766c1e4b0c656e3ff1840"},{"problem":20,"code":"(fn sec-to-last [s] (nth s (- (count s) 2)))","user":"5a5689a5e4b05d388ecb6c55"},{"code":"(fn [x]\n  (first (take-last 2 x)))","problem":20,"user":"4f6a8538e4b07046d9f4ef9c"},{"code":";; This was my original function \n;;(fn [x] (second (reverse x)))\n\n;; Learned about butlast and comp here\n\n;;comp combines a couple of functions and returns one that gives the result of combining them together\n;;for example, butlast takes a list and returns all values but the last element. ie: (butlast '(1 2 3 4)) returns '(1 2 3)\n;;last returns the last element '(last (1 2 3)) will return 3. \n;; Let's combine the two (last (butlast '(1 2 3 4)) will return 3, the penultimate element. \n;; Let's use the comp shortcut instead:\n\n(comp last butlast)","problem":20,"user":"50955676e4b087f34d351ab1"},{"problem":20,"code":"(fn segundo [xs] (if (empty? (rest (rest xs))) (first xs) (segundo (next xs))))","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn pen[x] (second (reverse x)))","problem":20,"user":"4f6236abe4b0defedf855fcd"},{"problem":20,"code":"(fn [coll]\n  (let [more (nnext coll)]\n    (if (seq more)\n      (recur (next coll))\n      (first coll))))","user":"55ea0780e4b0121d4835fda7"},{"problem":20,"code":"(fn my-last [s] (if (nil? (nnext s)) (first s) (my-last (rest s))))","user":"55a87f0ee4b0988bba2ad938"},{"code":"(fn [s]\n  (loop [l nil s s]\n    (let [ns (rest s)]\n      (if (empty? ns)\n        l\n        (recur (first s) ns)))))","problem":20,"user":"4ec64981535d6d7199dd36c7"},{"code":"rand-nth","problem":20,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn penult [[x & r]]\n  (if (> (count r) 1)\n    (penult r)\n    x))","problem":20,"user":"53134005e4b08068f379ed07"},{"code":"(fn get-2nd-last [l] (if (= (rest (rest l)) ()) (first l) (get-2nd-last (rest l))))","problem":20,"user":"5328febee4b09d4e7a9b550d"},{"code":"(fn [[x y & z]]\n  (cond\n    (and x y (not z)) x\n    (not (or y z)) nil\n    :else (recur (cons y z))))","problem":20,"user":"5013193ae4b0f26a0e3320ab"},{"code":"(comp first rest reverse )","problem":20,"user":"50949602e4b04e5742806c4e"},{"problem":20,"code":";(fn [x] (first (rest (reverse x))))\n(fn [x] (nth (reverse x) 1))","user":"569429c7e4b0dcc4269f411a"},{"code":"(fn end [x] (nth x (- (.count x) 2)))","problem":20,"user":"527f707fe4b0757a1b1713cf"},{"problem":20,"code":"(fn pen [x] (last (butlast x)))","user":"55ce64ffe4b0e31453f64a28"},{"problem":20,"code":"(fn [x] (->> x count dec dec (get (vec x))))","user":"54a9407de4b09f271ff37cac"},{"problem":20,"code":"(fn l [[x y & z]] (if z (l (conj z y)) x))","user":"5928d4c0e4b072a2710fcef3"},{"code":"(fn [s] \n  (if (next (next s))\n    (recur (rest s))\n    (first s)\n  )\n)","problem":20,"user":"50678be5e4b03d366d7cb2c0"},{"code":"#(if (next (next %)) (recur (next %)) (first %))","problem":20,"user":"4eb2eae5535d7eef30807351"},{"problem":20,"code":"(fn [s] (let [m (count s)] (nth s (- m 2)) ) )","user":"55d44dd6e4b0e31453f64a75"},{"problem":20,"code":"(fn yeah [[x & rest]] (if (> (count rest) 1) (yeah rest) x))","user":"561c0e9be4b064ca9f4b1692"},{"code":"(fn [seq]\n  (first (next (reverse seq))))","problem":20,"user":"504f2071e4b0e7ad84dbc4be"},{"problem":20,"code":"#(let [part (first %)\n        remaining (rest %)]\n    (if (not (seq (rest remaining)))\n      part\n      (recur remaining)))","user":"5d28633be4b092dab7f59c7d"},{"code":"#(last(butlast%))","problem":20,"user":"4dd66da7535d2dad7130b5c8"},{"problem":20,"code":"(fn [coll]\n  (-> coll\n      (reverse)\n      (rest)\n      (first)))","user":"575aa21de4b02ea114799348"},{"code":"(fn PenLast [Seq] (first (reverse (drop-last Seq))))","problem":20,"user":"521aad05e4b0c4ef0be8300e"},{"code":"#( -> % (reverse) (nth 1))","problem":20,"user":"5156e767e4b04360f2428e6b"},{"problem":20,"code":"( fn  [x] \n           (loop [s x]\n             (if (= 2 (count s) )\n                (first s)\n                (recur (rest s)))) )","user":"583f8c0ce4b089d5ab817dd3"},{"problem":20,"code":";#(last (drop-last %))\n;(comp last drop-last)\n#(-> % reverse second)","user":"57ee42c4e4b0bfb2137f5bb1"},{"code":"(fn [l] (let [[h th & t] l] (if (empty? t) h (recur (rest l)))))","problem":20,"user":"52593207e4b0cb4875a45cd3"},{"problem":20,"code":"(fn mylast [x] (if (empty? (rest (rest x))) \n                 (first x)\n                 (mylast (rest x))))","user":"4df9d3b0535d04ed9115e77b"},{"code":"#(nth %(- (dec (count %)) 1))","problem":20,"user":"50333565e4b0e4096af8971c"},{"problem":20,"code":"(fn o\n  [lst]\n  (second (reverse lst)))","user":"5723e6d6e4b0c5bde472c0f1"},{"code":"(fn [[first_item & rest_items]]\n  (if (<= (count rest_items) 1)\n    first_item\n    (recur rest_items)))","problem":20,"user":"512f4ed7e4b0762be4c7aad9"},{"problem":20,"code":"(fn r [l]\n  (cond \n   (empty? (rest (rest l))) (first l)\n   :else (recur (rest l))\n   ))","user":"56df6351e4b0ca2494a095f3"},{"code":"#(nth % ((fn [s] (- (count s) 2))%))","problem":20,"user":"52e295fae4b09f7907dd1437"},{"problem":20,"code":"(fn [l]\n  (first \n   (rest\n   (reverse l))))","user":"59e8a952e4b0249b72820733"},{"code":"(fn [x] (first (drop 1(reverse x))))","problem":20,"user":"4f60ed88e4b0defedf855fb2"},{"problem":20,"code":"(fn [x]\n  (if (= (count (rest x)) 1)\n    (first x)\n    (recur (rest x))))","user":"5bb948f5e4b0a20761a235d5"},{"problem":20,"code":"(fn  [coll] (second (reduce conj ()  coll)))","user":"567d18c9e4b05957ce8c61c4"},{"problem":20,"code":"(fn [l]\n  (if (nnext l)\n    (recur (next l))\n    (first l)))","user":"561c0278e4b064ca9f4b1691"},{"problem":20,"code":"(fn [s]\n  (nth (reverse s) 1))","user":"567a3112e4b05957ce8c6196"},{"problem":20,"code":"(fn __ [x] (if (= (count x) 2) (first x) (__ (rest x))))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn penultimate [coll]\n  (nth coll (- (count coll) 2)))","problem":20,"user":"4f03860e535dcb61093f6b10"},{"problem":20,"code":"(fn secong-to-last [seqq] (nth seqq (dec (- (count seqq) 1))))","user":"5e380e72e4b01d43a70e8db0"},{"problem":20,"code":"(fn [remaining]\n\t(last (butlast remaining)))","user":"58ffbabce4b0438e51c2d002"},{"code":"(fn penu [l] (first (take-last 2 l)))","problem":20,"user":"52402407e4b0ad64fa01030e"},{"problem":20,"code":"(fn [s] (peek (rest (reverse s))))","user":"58f3c18ee4b0438e51c2cead"},{"problem":20,"code":"(fn [coll] (nth coll (- (count coll)2)))","user":"5fd0b5a0e4b07e53c2f3f027"},{"problem":20,"code":"(fn foo [[x & rem]]\r\n  (if (empty? (rest rem))\r\n     x\r\n     (foo rem)))","user":"606e0a42e4b069485764de19"},{"code":"#(last(take 2(reverse %)))","problem":20,"user":"530d050ee4b08068f379eca1"},{"code":"#(first (reverse (drop-last %)))","problem":20,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn t [x] (nth x (- (count x) 2)))","problem":20,"user":"5315b53ee4b08068f379ed31"},{"problem":20,"code":"(fn [v] \n  (if (= (get v (- (count v) 2)) nil)\n    (nth v (- (count v) 2))\n    (get v (- (count v) 2))\n    )\n  )","user":"552159b5e4b0882d96d09191"},{"problem":20,"code":"#(->  % (reverse) (rest) (first))","user":"5b522591e4b02d533a91bd09"},{"code":"(fn [n] (second (reverse n)))","problem":20,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [x] (\n  nth x (- (count x) 2)\n))","problem":20,"user":"4e6a4c34535d8ccf87e9fec3"},{"code":"(fn [seq] (last (drop-last seq)))","problem":20,"user":"4e6a3985535d8ccf87e9feb1"},{"problem":20,"code":"#(nth (reverse % ) 1 )","user":"5cccac42e4b0ccb06196289d"},{"code":"#(peek (pop (reverse %1)))","problem":20,"user":"533b1138e4b0e30313ee6cc5"},{"code":"(fn [x]\r\n    (loop [f (first x) t (next x)]\r\n      (if (nil? (next t))\r\n        f (recur (first t) (next t)))))","problem":20,"user":"4dde4e95535d08e6dec9fdd7"},{"problem":20,"code":"(fn [v] (first (drop 1 (reverse v))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"code":"#(second  (reverse %))","problem":20,"user":"52154ec6e4b02f6d8ea676c2"},{"problem":20,"code":"(fn [l]\n  (loop [left l]\n    (let [ [fst sec & res] left]\n      (if (nil? res)\n        fst\n       (recur (next left) )))))","user":"56051095e4b08b23635d3162"},{"problem":20,"code":"(fn get_second_to_last [x]\n (if (= (second (rest x)) nil) (first x) (get_second_to_last (rest x))))","user":"599a033ce4b07157cc8dab04"},{"problem":20,"code":"(fn pn [lst] (nth lst (- (count lst) 2)))","user":"554e4588e4b00713264bd992"},{"code":"(fn [s]\n  (first (take-last 2 s))\n)","problem":20,"user":"4fa792ebe4b081705acca1c5"},{"problem":20,"code":"(fn [x] \n  (let [rx (reverse x)\n        rx_with2 (take 2 rx)\n        finalx (reverse rx_with2)] \n   (first finalx)))","user":"603b15bbe4b0d5df2af222fd"},{"problem":20,"code":"(fn [seq]\n  (first (take-last 2 seq)))","user":"54570dfae4b080a794c2c889"},{"problem":20,"code":"(fn second-to-last [s]\n  (if (= (count s) 2)\n   (first s)\n  (second-to-last (rest s))))","user":"56cb0c8fe4b0ea9b8538f724"},{"problem":20,"code":"(fn [sequ]\n  (nth (reverse sequ) 1))","user":"5c64834be4b0fca0c1622679"},{"code":"(fn [lst] (->> lst reverse (take 2) last))","problem":20,"user":"52bdf6bde4b07a9af579230d"},{"problem":20,"code":"(fn penultimate [lst]\n  (if (= nil (second (rest lst)))\n    (first lst)\n    (penultimate (rest lst))))","user":"54257124e4b01498b1a71b09"},{"code":"(fn [x]\n  (let [tail (rest x)]\n    (if (empty? (rest tail))\n      (first x)\n      (recur tail))))","problem":20,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"code":"(comp peek rest reverse vec)","problem":20,"user":"4f0554aa535dcb61093f6bf5"},{"problem":20,"code":"(fn rec [stuff] (let [[x y & xs] stuff] (if (empty? xs) x (rec (conj xs y)))))","user":"5d6a9b96e4b04d129b00f29d"},{"problem":20,"code":"(fn [coll]\n  (loop [[first & second_rest] coll]\n    (let [[second & rest] second_rest]\n      (if (nil? rest)\n        first\n        (recur second_rest)))))","user":"56557d2de4b0f9d632dd8498"},{"problem":20,"code":"(fn penultimate\n  [s]\n  (let [next-s (next s)]\n    (if (next next-s)\n      (recur next-s)\n      (first s))))","user":"5ed09be3e4b016b56eae05b2"},{"code":"(fn this [ls] (if (= 2 (count ls)) (first ls) (this (rest ls))))","problem":20,"user":"4ffdca56e4b0678c553fc3e9"},{"code":"(fn [aseq]\n  (cond\n   (empty? (rest aseq)) '()\n   (empty? (rest (rest aseq))) (first aseq)\n   :else (recur (rest aseq))))","problem":20,"user":"53415755e4b00652c8746ecd"},{"problem":20,"code":"(fn second-to-last [xs]\n  (loop [[x & xs] xs]\n    (if (empty? (rest xs))\n      x\n      (recur xs)\n    )\n  )\n)","user":"5cb0f70ce4b026601754b8c1"},{"code":"#(last (pop (vec %)))","problem":20,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":20,"code":"(fn penultimate [lst]\n  (-> lst reverse rest first)\n)","user":"57a92646e4b0a9660795622c"},{"problem":20,"code":"(fn f [[x y & xs]] (if (seq xs) (f (conj xs y)) x))","user":"554b7958e4b0a04f79299586"},{"code":"(fn pen [s]\n  (if (= (count s) 2)\n    (first s)\n    (recur (rest s))))","problem":20,"user":"512148dae4b05ae5a5823c0f"},{"problem":20,"code":"(fn [l]\n   (second (reverse l)))","user":"5f3f2281e4b004f08c61c561"},{"code":"#(-> %  reverse (nth 1))","problem":20,"user":"50a7b76de4b090657f4a5cdc"},{"problem":20,"code":"#(nth\n  %\n  (- (count %) 2)\n  )","user":"5ccee75ae4b0ccb0619628bc"},{"code":"(fn [sequence] \n  (.get sequence (- (count sequence) 2)))","problem":20,"user":"4fca0376e4b0ee37620e184a"},{"code":"(fn [[a b & c]] (if c (recur (conj c b)) a))","problem":20,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"#(second (reverse%))","problem":20,"user":"4e7115b3535d5021c1a89647"},{"problem":20,"code":"(fn [s]\n  (loop [[h & rest] s]\n  \t(if (< (count rest) 2)\n      h\n      (recur rest))))","user":"57e3527ce4b0bfb2137f5a99"},{"code":"(fn lastOne [x] (nth x (- (count x) 2)))","problem":20,"user":"50a0d1e4e4b08df8156e9e51"},{"code":"(fn [s] (first (drop 1 (reverse s))))","problem":20,"user":"5196749be4b04c0af7ff3c20"},{"problem":20,"code":"#(first (drop (- (count %) 2) % ))","user":"56c33bb9e4b05cc29241ee87"},{"code":"(fn pen [xs] (first (rest (reverse xs))))","problem":20,"user":"4f9d9d89e4b0dcca54ed6d25"},{"problem":20,"code":"(fn [a]\n  (nth a (dec (dec (count a)))))","user":"5c8fd8f3e4b048ec896c59c7"},{"code":"(fn [s] \n    (if (= 1 (count (rest s)))\n        (first s)\n        (recur (rest s))))","problem":20,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":20,"code":"(fn se [x] (first (rest (reverse x))))","user":"58aec8e1e4b0ebc645576cc1"},{"problem":20,"code":"(fn second-last\n    [collection]\n      (if (empty? (rest (rest collection)))\n          (first collection)\n          (second-last (rest collection))))","user":"5a47e8ade4b05d388ecb6b5f"},{"problem":20,"code":"#(first (rest (reverse %) ) )","user":"58a72f71e4b01a0c0b23293f"},{"problem":20,"code":"(fn algo \n  [lst]\n  (second (reverse lst))\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":20,"code":"(fn [col]\n   (last (take (dec (count col)) col))\n   )","user":"5cdd7157e4b05ee0cb31175b"},{"problem":20,"code":"(fn secondLast [theList] (\n        if (= () (rest theList))\n              nil\n              (let [rval (secondLast (rest theList))]\n                  (if (= nil rval)\n                      (first theList)\n                      rval)\n              )\n    )\n)","user":"578d0ec0e4b0ebec4cfb7563"},{"problem":20,"code":"(fn last-item [x]\n  (first (rest (reverse x))))","user":"5add1fede4b0837691e92c0a"},{"code":"(fn penultimate [x] (if (= 2 (count x))\n                      (first x)\n                      (penultimate (rest x))))\n\n;(fn [x] (second (reverse x)))","problem":20,"user":"5263dca8e4b03e8d9a4a70bd"},{"problem":20,"code":"(fn [seq]\n  (first (last (partition 2 1 seq))))","user":"53403f42e4b085b17e897da8"},{"code":"(fn [l]\n  (first (rest (reverse l))))","problem":20,"user":"4e6b998a535d8ccf87e9ff1c"},{"code":"(fn second-last [col]\n  (second (reverse col)))","problem":20,"user":"4db8d37d535d1e037afb219c"},{"problem":20,"code":"(fn last2 [lst]\r\n  (loop [[f & n] lst]\r\n    (if (= (count n) 1)\r\n      f\r\n      (recur n))))","user":"5f5396d4e4b0a0bc16850a79"},{"code":"#( second (reverse %))","problem":20,"user":"4e2b3e16535deb9a81d77f04"},{"problem":20,"code":"(fn [seq] (nth seq (- (count seq) 2)) )","user":"602b90c1e4b0d5df2af22266"},{"problem":20,"code":"(fn [coll] (-> coll butlast reverse first))","user":"548c6673e4b0e286459a1209"},{"code":"(fn myfn [seq] (first (take-last 2 seq)))","problem":20,"user":"4fb1d7ace4b081705acca281"},{"problem":20,"code":"(fn penu [x] (nth x (- (count x) 2)))","user":"58f3728ce4b0438e51c2cea5"},{"code":"(fn [x] (.get x (- (.size x) 2)))","problem":20,"user":"4e8b1fa2535d65386fec2118"},{"problem":20,"code":"(fn almostlast [x] (second(reverse x)))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":20,"code":"#(first (rest ( reverse %)))","user":"50f7dac7e4b0f892a5bc246d"},{"problem":20,"code":"(fn andrew [x] \n  (first \n   (drop 1\n    (reverse x)\n   )))","user":"5ec825eee4b08d0ec38692e3"},{"code":"(fn [xs] ((vec xs) (- (count xs) 2)))","problem":20,"user":"521c6a1ae4b0c4ef0be83083"},{"problem":20,"code":"(fn [[x & xs]]\n  (if (= (count xs) 1) x (recur xs)))","user":"590e588ce4b047aa04b19a23"},{"problem":20,"code":"#(if (= (count %)\n                  2)\n             (first %)\n             (recur (next %)))","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn [x]\r\n  (if (= (count x) 2) (first x)\r\n  (recur (rest x))))","problem":20,"user":"4e73a9dc535dff18050a9c77"},{"code":"(fn pre [lst]\n  (let [\n        h (first lst)\n        t (rest lst)]\n    (if (= (count t) 1)\n      \th\n      \t(pre t))))","problem":20,"user":"515c03c6e4b0388ca8ca1527"},{"code":"(fn [n] (first (rest (reverse n ))))","problem":20,"user":"52c22856e4b07a9af5792378"},{"problem":20,"code":"(fn [s] (last (drop-last 1 s)))","user":"58fe47b0e4b0438e51c2cfcd"},{"problem":20,"code":"(fn [x] (nth x(-(count x) 2)))","user":"562777f5e4b00e49c7cb47d0"},{"code":"(fn [coll]\n  (loop [l coll]\n    (let [r (rest l)]\n      (if (= 1 (count r))\n        (first l)\n        (recur r)))))","problem":20,"user":"4da8dd6e30acd6ed12482a68"},{"problem":20,"code":"(fn second-to-last [input] (second (reverse input)))","user":"5670c4c4e4b0a866af6896fa"},{"problem":20,"code":"(fn second-last [x]\n  (if (= 2 (count x))\n    (first x)\n    (second-last (next x))))","user":"566e3af2e4b0a866af6896d5"},{"problem":20,"code":"(fn [col] (if (= (count col) 2) (first col) (recur (rest col))))","user":"557ffd0ee4b05c286339e0e3"},{"problem":20,"code":"#(second (reverse   %))","user":"56d1facee4b0ea9b8538f796"},{"problem":20,"code":"(fn get-penultimate\n  [seq]\n  (if (empty? (rest (rest seq)))\n    (first seq)\n    (get-penultimate (rest seq))))","user":"56af99dfe4b061e3ca319ad5"},{"problem":20,"code":"(fn [l] (let [[_ x] (reverse l)] x))","user":"5066003ee4b0313a384e5647"},{"code":"(fn [x]\n  (if (= 2 (count x))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4e28120f535deb9a81d77efa"},{"code":"(fn penultimate [seq]\n  (if (= (count (rest seq)) 1)\n      (first  seq)\n      (penultimate (rest seq))))","problem":20,"user":"4f036384535dcb61093f6a9a"},{"problem":20,"code":"(fn penultimate [col] \n  (nth col (- (count col) 2)))","user":"5a4832dde4b05d388ecb6b65"},{"problem":20,"code":"(fn [xs]\n  (loop [tail xs]\n    (if (= 2 (count tail))\n      (first tail)\n      (recur (next tail)))))","user":"58327a08e4b089d5ab817c7c"},{"problem":20,"code":"(fn penultimate-element [s]\n  (nth s (- (count s) 2)))","user":"5dd59f88e4b0948ae9d9ad7b"},{"problem":20,"code":"(fn [v] \n  (if \n   (= (rest (rest v)) ())            (first v)\n    (recur (rest v))\n               )\n  )","user":"55188c5de4b06a49daca83cc"},{"problem":20,"code":"(fn penult [l]\n  (if (empty? (rest (rest l)))\n    (first l)\n    (penult (rest l))\n    )\n  )","user":"54eb3a9ee4b024c67c0cf846"},{"code":"#( if (and (next %) (next (next %))) (recur (next %)) (first %))","problem":20,"user":"4e5352b9535d8a8b8723a271"},{"code":"(fn [x] (get (vec x) (- (count x\n) 2)))","problem":20,"user":"4fde87c9e4b05e33b9224f8b"},{"code":"(fn penultimate [l] \n  (first (drop (- (count l) 2) l)))","problem":20,"user":"50392c7ee4b088a6a14ca765"},{"problem":20,"code":"(fn foo [l] (first (rest (reverse l))))","user":"536db108e4b0fc7073fd6e61"},{"problem":20,"code":"(fn pen [xs]\n  (if (= 2 (count xs)) \n    (first xs)\n    (pen (rest xs))))","user":"5bddead6e4b0ed4b8aab4c57"},{"problem":20,"code":"(fn [seq] (-> seq \n              reverse\n              second))","user":"6045063fe4b02d28681c77b4"},{"code":"(fn second-last [lst]\n  (second (reverse lst)))","problem":20,"user":"4ec3b393535dcc7ae8597d59"},{"problem":20,"code":"(fn second-to-last-elem [x] (nth x (- (count x) 2)))","user":"55268e8de4b0ffed3738f91f"},{"code":"(fn [x] (first \n         (rest \n          (reverse x)\n         )\n        )\n)","problem":20,"user":"51a75902e4b0da5f497bde82"},{"code":"#(first (drop 1 (reverse %1)))","problem":20,"user":"5069874de4b01dc6af13f832"},{"code":"(comp  second reverse)","problem":20,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn [x]\n  (nth x (- (count x) 2) )\n)","problem":20,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":20,"code":"(fn [list]\n  (let [x (count list)]\n    (if (< x 2) nil (get (vec list) (- x 2)))))","user":"5756e218e4b02ea1147992e5"},{"code":"(fn return-sec2last [x] (second (reverse x)))","problem":20,"user":"52e6975de4b09f7907dd147a"},{"problem":20,"code":"(fn \n  [x]\n  (second (reverse x)))","user":"5f72f144e4b02876ed9fd093"},{"code":"(fn [x]\n  (first (drop (- (.size x) 2) x)))","problem":20,"user":"51a8e7d0e4b08d8ec191b81f"},{"problem":20,"code":"(fn get-penul [x] (if (= (count x) 2) (first x) (get-penul (rest x))))","user":"57d1d6c8e4b0bd073c202370"},{"code":"(fn sec_last [seq]\n  (nth seq (- (count seq) 2)))","problem":20,"user":"4fbbae0fe4b081705acca2eb"},{"problem":20,"code":"#(if (nil? (next (next %))) (first %) (recur (rest %)))","user":"550340d9e4b086ebe8a79c6b"},{"problem":20,"code":"(fn [x]\n  (-> x reverse rest first))","user":"5daae405e4b000c986472c44"},{"problem":20,"code":"#(if (list? %) \n    (nth % (- (count %) 2)) \n    (get % (- (count %) 2)))","user":"5cea925ce4b0a17bb84e2bd2"},{"code":"(fn [ls] (first (rest (reverse ls))))","problem":20,"user":"504db141e4b021508a333965"},{"problem":20,"code":"#((comp first next reverse) %1)","user":"5b03063de4b0cc2b61a3bd5b"},{"code":";(fn penultimate [col] (if (empty? col) nil (last (take (dec (count col)) col))))\n#(if (empty? (next (next %))) (first %) (recur (next %)))","problem":20,"user":"533b1dc4e4b0e30313ee6cc7"},{"problem":20,"code":"(fn [lst] (loop [a-l lst]\n                                          (if (empty? (rest (rest a-l)))\n                                            (first a-l)\n                                            (recur (rest a-l)))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":20,"code":"(fn get-second-to-last\n  [my-seq]\n  (loop [[part & remaining] my-seq]\n    (if (= 1 (count remaining))\n      part\n      (recur remaining))))","user":"548f19a8e4b0e286459a1231"},{"code":"(fn [s]\n  (nth s (- (count s) 2)))","problem":20,"user":"4e2608d6535deb9a81d77ef1"},{"problem":20,"code":"(fn penultime\n  [s]\n  (if (= 2 (count s)) \n  \t(first s)\n  \t(penultime (rest s))))","user":"5960e872e4b066ee0a44b093"},{"code":"(fn [arr] (second (reverse arr)))","problem":20,"user":"4e932a19535dbda64a6f6b0a"},{"code":"(comp peek next reverse)","problem":20,"user":"4ebf45c3535dfed6da9c6d9d"},{"problem":20,"code":"(fn pen[col]\n  (second (reverse col)))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn [s]\n  (if (next (next s))\n    (recur (next s))\n    (first s)))","problem":20,"user":"4e50c894535dc968683fc4ee"},{"problem":20,"code":"#(->(reverse %)\n    (rest)\n    (first)\n    )","user":"5e502842e4b027a2e10ac0c0"},{"problem":20,"code":"(fn [x]\n  (last\n   (butlast x)))","user":"56a45fcee4b0542e1f8d14dc"},{"problem":20,"code":"(fn [n] (first (take-last 2 n)))","user":"55391182e4b09218d5f44fe6"},{"problem":20,"code":"(fn [ls] (\n          second (reverse ls)\n          )\n  )","user":"60228147e4b0d5df2af22202"},{"problem":20,"code":"(fn [x] ( nth x (- (count x) 2)))","user":"54d529cbe4b0a52adc2e2009"},{"code":"(fn [i] \n    (if (= (count i) 2)\n          (first i)\n          (recur (rest i))))","problem":20,"user":"51bd255ce4b0df1216cefd94"},{"code":"(fn [x]\n  (second\n   (reverse x)))","problem":20,"user":"5171069be4b0d70c8bbbf238"},{"problem":20,"code":"(fn get-penultimate [list]\n  (condp #(%1 %2 2) (count list)\n    < nil\n    = (first list)\n    > (get-penultimate (rest list))))","user":"57f11d72e4b0bfb2137f5c03"},{"problem":20,"code":"(fn [n]\n   (first (rest (reverse n))))","user":"5bc4bd1ae4b07a9b28b1005f"},{"code":"#(first (drop (- (count % ) 2) %))","problem":20,"user":"4dad808fc9a9d6ed0999dc57"},{"code":"(fn penulimate [x]\n  (last (drop-last x))\n)","problem":20,"user":"4f7ef32be4b06e829148e1d4"},{"code":"#(nth %1 (- (count %1) 2) )","problem":20,"user":"51ffa16ce4b0f1313d468a9d"},{"problem":20,"code":"(fn [x] (nth x  (- (count x) 2)))","user":"5c32ea85e4b0d62ef62d9f3e"},{"code":"(fn [l] (nth (reverse l) 1))","problem":20,"user":"4ec927e8535d6d7199dd36f9"},{"problem":20,"code":"(fn second-last [list] (last (butlast list)))","user":"5863f986e4b0f14aab7c8838"},{"code":"(fn secon[l](second(reverse l)))","problem":20,"user":"506ac723e4b05d3b7762c74d"},{"problem":20,"code":"(fn [col] (peek (pop (into [] col))))","user":"5b8e536de4b0c0b3ffbd49e4"},{"problem":20,"code":"(fn [vector]\n  (loop [[head & tail] vector]\n    (if (= (count tail) 1)\n      head\n    (recur tail))))","user":"5f3b54c0e4b004f08c61c53b"},{"problem":20,"code":"(fn [list] (->> list reverse second))","user":"59e76dd6e4b0249b72820715"},{"code":"(fn [seq]\n  (loop [seq seq a nil]\n    (if (empty? (rest seq)) a (recur (rest seq) (first seq)))))","problem":20,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(fn [x] ( nth x (- (count x) 2) ))","problem":20,"user":"4f0c4185535d0136e6c2230a"},{"code":"#(first (drop 1 (take 2 (reverse %))))","problem":20,"user":"51e7ca56e4b0a3e081b8cbf1"},{"problem":20,"code":"(fn [a](second (reverse a)))","user":"596c4951e4b069c0a1a19828"},{"code":"(comp peek vec drop-last)","problem":20,"user":"4feada56e4b0140c20fb9c11"},{"problem":20,"code":";; we want essentially the same thing, just an additional index shorter.\n\n#(nth % (- (count %) 2))","user":"57accab9e4b0b8559636fc90"},{"problem":20,"code":"(fn penultimate [ls]\n  (if (empty? (rest (rest ls)))\n    (first ls)\n    (penultimate (rest ls))\n  )  \n)","user":"5602cbe5e4b04bb52996e1a9"},{"problem":20,"code":"(fn [seq]\n      (second (reverse seq))\n      )","user":"5d809b4fe4b0915913b1d36c"},{"problem":20,"code":"(fn penultimate [s] (if (= 2 (count s)) (first s) (if (= 2 (count (rest s))) (first (rest s)) (penultimate (rest s)))))","user":"54c24f03e4b045293a27f5fe"},{"code":"(fn [x](second(reverse x)))","problem":20,"user":"4f11b078535d64f603146422"},{"problem":20,"code":"(fn [coll]\n  (nth coll (- (count coll) 2))\n  )","user":"5de6484ce4b0986d99407f66"},{"problem":20,"code":"(fn [a-list](nth a-list (- (count a-list ) 2)))","user":"5984c965e4b021a7a535fe3b"},{"problem":20,"code":"(fn bl [sq]\n  (if (nil? (next (next sq)))\n    (first sq)\n    (recur (next sq))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":20,"code":"(fn [c] (nth (reverse c) 1))","user":"51b91b08e4b0e871ca4958f8"},{"problem":20,"code":"(fn last_elm [sequ]\n    (if (= 2 (count sequ))\n        (first sequ)\n        (last_elm (rest sequ))))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":20,"code":"(fn \n  [coll]\n  (first (rest (reverse coll)) )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"code":"(fn pen [sequ] \n  (if (= (count sequ) 2)\n    (first sequ)\n    (pen (rest sequ))\n))","problem":20,"user":"5239caa6e4b0d705d026ef27"},{"code":"(fn mylast [coll]\r\n  (second (reverse coll)))","problem":20,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn penultimate [ls] (if (empty? (-> ls rest rest)) (first ls) (penultimate (rest ls))))","problem":20,"user":"518df0f0e4b0c929d50502e1"},{"problem":20,"code":"(fn penult [x] (last (butlast x)))","user":"542130cee4b01498b1a71aae"},{"code":"(fn my-second-to-last [s]\n  (first (drop 1 (reverse s))))","problem":20,"user":"4ed98b40535d10e5ff6f5307"},{"problem":20,"code":"(fn [s] (get (vec s) (- (count s) 2)))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":20,"code":"(fn [ls]\n  (let [[x & xs] ls]\n    (if (= 1 (count xs))\n      x\n      (recur xs))))","user":"5c6e04b5e4b0fca0c1622743"},{"problem":20,"code":"(fn [ve]\n  (-> ve\n      reverse\n      rest\n      first))","user":"56fd058be4b08d47c97781a1"},{"code":"(fn [x](second (reverse x)))","problem":20,"user":"52ed72cfe4b0a18b0f5dd9ec"},{"problem":20,"code":"(fn[f](second (reverse f)))","user":"56a28664e4b0542e1f8d14c1"},{"problem":20,"code":"(fn [[first & rest]]\n  (if (= 1 (count rest))\n    first\n    (recur rest)\n  )\n)","user":"5cd67eb2e4b0ccb061962943"},{"code":"(fn [x]\n         (cond \n           (= (count x) 2) (first x) \n           :else (recur (rest x))))","problem":20,"user":"5047782ce4b0371827a27bc2"},{"problem":20,"code":"(fn [seq] (first (next (reverse seq))))","user":"56ec8164e4b04a395b9a043b"},{"code":"(fn [s] (first (next (reverse s))))","problem":20,"user":"4f2a7174e4b0d6649770a03e"},{"code":"(fn [x] (if (= 1 (count (rest x))) (first x) (recur (rest x))))","problem":20,"user":"4e5914e0535d8a8b8723a29b"},{"code":"#(nth % (- (count %)2 ))","problem":20,"user":"5397cf54e4b0b51d73faaef1"},{"problem":20,"code":"(fn [x] ((fn [[a b & c]] b)(reverse x)))","user":"5cfff788e4b0cc9c91588196"},{"code":"(fn myPenultimate [xs]\n  (if (> (count xs) 2)\n      (myPenultimate (rest xs))\n      (first xs)))","problem":20,"user":"4fab21b2e4b081705acca211"},{"problem":20,"code":"#(if (next (next %1))\n    (recur (next %1))\n    (first %1)\n    )","user":"5cead199e4b0a17bb84e2bd4"},{"problem":20,"code":"#(first (take-last 2 % ))","user":"54684c3be4b00cfc9eacc139"},{"problem":20,"code":"(fn [givenList] (nth givenList (- (count givenList) 2)))","user":"55995d88e4b031d6649c9ba8"},{"code":"(fn [l] (let [n (count l)] (nth l (- n 2))))","problem":20,"user":"5081561ae4b0946d0443855a"},{"code":"(fn fx [x] (\n  second (reverse x)\n))","problem":20,"user":"50202d1ae4b0cb6ebc0a42f3"},{"problem":20,"code":"(fn [x]\n  (if (= (count x) 2)\n  \t(first x)\n  \t(recur (rest x))\n  )\n)","user":"579e75fbe4b05b1deef9ae29"},{"problem":20,"code":"(fn fsl [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (fsl (rest x))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"#(first ((comp rest reverse) %))","problem":20,"user":"51af88e1e4b0c53cf2e68a4f"},{"code":"(fn [s] (if (next (next s))\r\n            (recur (next s))\r\n            (first s)))","problem":20,"user":"5008a61ee4b0144d4f561e3b"},{"problem":20,"code":"#(if (empty? (rest(rest %))) (first %) (recur (rest %)))","user":"56795deae4b05957ce8c6187"},{"code":"(fn penult [x] (second (reverse x)))","problem":20,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":20,"code":"#(let [v (vec %) v1 (pop v) v2 (peek v1)] v2)","user":"54972b0ee4b0b312c081ff6e"},{"code":"(fn lol [x]\n  (second\n    (reverse x)))","problem":20,"user":"4f8db862e4b02e764a0a51b2"},{"code":"(fn x[p]\n  (if (empty? (rest (rest p)))\n   (first p)\n   (x (rest p))))","problem":20,"user":"5388d50fe4b0640c7a9a58a7"},{"code":"(fn\n  [se]\n  (loop [[part & rest] se]\n    (if (= (count rest) 1)\n      part\n      (recur rest))))","problem":20,"user":"52d469c8e4b09f7907dd1330"},{"code":"(fn [items]\n  (if (next (next items))\n      (recur (next items))\n      (first items)))","problem":20,"user":"50052fd0e4b0678c553fc45d"},{"problem":20,"code":"(fn [[h & t]] (if (next t)\n                (recur t)\n                h))","user":"5a8ebd9ae4b05369db4d252b"},{"code":"(fn [s]\n  (nth s\n    (- (count s) 2)))","problem":20,"user":"4e705aac535d5021c1a89636"},{"problem":20,"code":"(fn [arr]\n  (nth arr\n       (- (count arr) 2)))","user":"557bd9a9e4b05c286339e0bc"},{"problem":20,"code":"(fn second-to-last\n  [collection]\n  (let [c (next collection)]\n    (if (next c)\n      (second-to-last c)\n      (first collection))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [l] (if (< 2 (count l)) (recur (rest l)) (first l)))","problem":20,"user":"5268a013e4b03e8d9a4a71b0"},{"code":"(fn [li] (first (rest (reverse li))))","problem":20,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":20,"code":"(fn\n  [s]\n  (if (seq (rest (rest s)))\n    (recur (rest s))\n    (first s)))","user":"56b2630be4b0982f16b37e03"},{"problem":20,"code":"(fn [list] (let [[a b & rest] (reverse list)] b))","user":"5f0ccff2e4b0f30dddfb5d4f"},{"code":"(fn penult [xs] (if (= (rest (rest xs)) ()) (first xs) (penult (rest xs))))","problem":20,"user":"502aaadee4b0614b52996117"},{"code":"(fn [v] (if (next (next v)) (recur (next v)) (first v)))","problem":20,"user":"53752b27e4b06839e8705e12"},{"code":"(fn[x](second (reverse x)))","problem":20,"user":"4f7b3d53e4b06e829148e1a0"},{"problem":20,"code":"#((vec %1) (- (count %1) 2))","user":"53ba0d1be4b047364c0444f1"},{"code":"(fn [coll] (if (next (next coll))\r\n  \t\t       (recur (next coll))\r\n\t\t\t       (first coll)))","problem":20,"user":"4f044285535dcb61093f6bb5"},{"code":"(fn penultimate [l]\n  (if (coll? l)\n    (if (not (empty? l))\n      (let [r (rest l)\n            last (rest r)]\n        (if (not (empty? last))\n          (penultimate r)\n          (first l)))\n      nil)\n    nil))","problem":20,"user":"501948b3e4b0b6630b101db5"},{"code":"#(second (reverse %))","problem":20,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"#(nth % (dec (dec (.length (vec %)))))","problem":20,"user":"5360e9ade4b0243289761e3b"},{"problem":20,"code":"(fn penul [x] (if (= (count x) 2) (first x) (penul (rest x))))","user":"5fdb51fae4b05ac5b16ea12f"},{"code":"(fn [m] (second (reverse m)))","problem":20,"user":"4f2046b7535d64f6031464ab"},{"problem":20,"code":"(fn second-last [ls]\n  (cond (empty? ls) nil\n        (empty? (rest ls)) nil\n        (empty? (rest (rest ls))) (first ls)\n        :default (second-last (rest ls))))","user":"53d87449e4b0e771c302546d"},{"code":"#(.get%(-(count%)2))","problem":20,"user":"51b38e29e4b026427ecf0680"},{"code":"(fn [x]\n  (if (= 2 (count x))\n    (first x)\n    (recur (rest x))\n  )\n)","problem":20,"user":"50c8899ee4b00bb60fe0c541"},{"problem":20,"code":"(fn [[x y & others]] (if (seq? others) (recur (cons y others)) x))","user":"56009544e4b04bb52996e16c"},{"problem":20,"code":"(fn [seq] (loop [suffix seq] (if (empty? (rest (rest suffix))) (first suffix) (recur (rest suffix)))))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn [xs]\n  (loop [[x & [y & drop-two :as drop-head]] xs]\n    (if drop-two (recur drop-head) x)))","problem":20,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":20,"code":"(fn [xs]\n  (if (= (count xs) 2) (first xs) (recur (rest xs))))","user":"56ba5cc6e4b0f26550335942"},{"code":"(fn get-second-last-element[sequance]\n  (-> sequance (reverse) (rest) (first))\n  )","problem":20,"user":"5306bceee4b02e821686979b"},{"problem":20,"code":"(comp #(nth % 1) reverse )","user":"542ff9f9e4b0dad94371f2d5"},{"problem":20,"code":"(fn a [b]\n  \t(get (into [] b) (- (count b) 2))\n)","user":"5710e574e4b09c608db7043b"},{"code":"(fn [x] (peek (vec (butlast (vec x)))))","problem":20,"user":"51b70902e4b04fc00976d47b"},{"problem":20,"code":"(fn find-pen [seq] (cond (= 2 (count seq)) (first seq) :else (find-pen (rest seq))))","user":"54ab04f1e4b09f271ff37cc0"},{"code":"(fn my-last [x] (if (= (rest (rest x)) '()) (first x) (my-last (rest x))))","problem":20,"user":"4f039524535dcb61093f6b2c"},{"code":"#(second( reverse %))","problem":20,"user":"5297c25de4b02ebb4ef75045"},{"problem":20,"code":"(fn [x]((vec x) (- (count x) 2)))","user":"58006950e4b0a837a8b30c3a"},{"problem":20,"code":"(fn checklast [a]\n  (let [[fa sa & rst] a]\n    (if (empty? rst) fa\n      (checklast (rest a)))))","user":"5a720177e4b0512ff01cda96"},{"code":"(comp second reverse )","problem":20,"user":"50bfe725e4b080409b860f26"},{"code":"(fn [coll]\n  (nth coll \n       (- (count coll) 2)))","problem":20,"user":"515c124be4b0388ca8ca152b"},{"problem":20,"code":"(fn [s]\n  (let [l (count s)]\n    (nth s (dec (dec l)))))","user":"59b71b4fe4b05c620303ca3d"},{"problem":20,"code":"(fn [coll]\n    (loop [f nil, coll coll]\n      (if (next coll)\n        (recur (first coll) (next coll))\n        f)))","user":"5ff64845e4b06df49cee1495"},{"problem":20,"code":"(fn [l]\n  (loop [[first & rest] l]\n    (if (= (count rest) 1)\n      first\n      (recur rest))))","user":"54d80751e4b0a52adc2e2035"},{"code":"#(-> % vec pop last)","problem":20,"user":"51ff6379e4b0f1313d468a98"},{"code":"#(-> %1 reverse second)","problem":20,"user":"4faa6184e4b081705acca1f1"},{"code":"(fn [x] (second ( reverse x)))","problem":20,"user":"4e8b73f1535d65386fec2121"},{"problem":20,"code":"#(nth % (dec (dec(count %))))","user":"589772f7e4b00487982d52be"},{"problem":20,"code":"(fn [list]\n  (last (take 2 (reverse list))))","user":"5cada3b8e4b026601754b872"},{"code":"#(if (empty? (-> % rest rest))\n             (first %)\n             (recur (rest %)))","problem":20,"user":"4fbd292fe4b081705acca300"},{"problem":20,"code":";; exercise: write a Write a function which returns the second to last element from a sequence.\n#(second (reverse %))","user":"60917abde4b00e9e6653c3d5"},{"code":"(fn [x]\n  (second (reverse x))\n  )","problem":20,"user":"529bd5dfe4b04e0c58e87b51"},{"problem":20,"code":"(fn penultimate [coll] \n  (if (empty? (rest (rest coll)))\n    (first coll)\n    (penultimate (rest coll))))","user":"5bf1b957e4b0a6d31fed216f"},{"problem":20,"code":"(fn [[x y & more]]\n  (if more\n    (recur (conj more y))\n    x))","user":"554b7056e4b0a04f79299583"},{"code":"(fn second-last [l]\n  (if (= (count l) 2)\n    (first l)\n    (second-last (rest l))))","problem":20,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":20,"code":"(fn get-second-to-last \n  [elements] \n  (if (> (count elements) 2)\n    (get-second-to-last (rest elements))\n    (first elements)))","user":"5e9f3c2ce4b00a66d4a9517f"},{"code":"(comp (partial reduce (fn [_ y] y) nil) butlast)","problem":20,"user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [c] (nth c (+ -2 (count c))))","problem":20,"user":"527a56abe4b03e8d9a4a7556"},{"code":"(fn mypenaultimate[a](->> a reverse rest first))","problem":20,"user":"52cbf89ee4b07d0d72b27354"},{"problem":20,"code":"(fn [coll]\n   (loop [i (count coll)\n          [head & tail] coll]\n     (if (= i 2)\n       head\n       (recur (dec i) tail))))","user":"5e62444fe4b0fd0acd158694"},{"code":"(fn [x] (last (butlast x)))","problem":20,"user":"4de8fb73535d08e6dec9fdff"},{"problem":20,"code":"#(nth %1 (- (count  %1) 2))","user":"55abf7bbe4b03311e7b7328e"},{"problem":20,"code":"(fn penul [xs] (nth (reverse xs) 1))","user":"5d25578de4b02ea6f0fb6a33"},{"problem":20,"code":"(\n fn [[ h & q ]] \n (\n  if \n  (= 1 (count q)) \n  h\n  (recur q)\n  )\n )","user":"5628a121e4b00e49c7cb47ed"},{"problem":20,"code":"(fn zw [rr] (if (empty? (rest (rest rr))) (first rr) (zw (rest rr))))","user":"5567b9dce4b0c656e3ff1846"},{"code":"(fn [y] \n  (if (= (count y) 2) (first y)\n(recur (rest y))))","problem":20,"user":"500fbfabe4b0c8af2eae4184"},{"code":"(fn [l]\r\n  (if (= (rest (rest l)) '()) (first l)\r\n    (recur (rest l))))","problem":20,"user":"4defdf31535d08e6dec9fe14"},{"code":"apply (fn this ([x,y] x) ([x y & more] (apply this y more)))","problem":20,"user":"5007eabde4b0b17c647f5229"},{"code":"(fn [numbers]\n (second (reverse numbers))\n)","problem":20,"user":"4e8e5cc8535d65386fec2142"},{"problem":20,"code":"(fn [coll]\n  (second (reverse coll))\n  )","user":"5f10fb99e4b091ba50b4dba8"},{"code":"(fn penultimate [l] (second (reverse l)))","problem":20,"user":"4f1c2a3a535d64f603146480"},{"problem":20,"code":"; (comp last pop vec)\n(comp second reverse)","user":"51f38193e4b0fca5e8b48226"},{"problem":20,"code":"(fn [se] (second (reverse se)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":20,"code":"(fn oof \n  [x] \n  (nth x ((comp #(- % 2) count) x)))","user":"5e6834e0e4b04793f195eaf9"},{"problem":20,"code":"(fn [s]\n  (first (take-last 2 s)))","user":"59946856e4b0b211ea3aaac7"},{"code":"(fn [c]\n  (second (reverse c)))","problem":20,"user":"50608ea0e4b07251188e4456"},{"problem":20,"code":"(fn [s] (peek (pop (reverse s))))","user":"540aa29de4b0addc1aec66f1"},{"code":"(fn [l]\n  (nth l\n    (dec\n      (dec\n        (count l)\n      )\n    )\n  )\n)","problem":20,"user":"52361dfee4b05f3be1c7c8e6"},{"code":"(fn [xs] \r\n   (if (= 2 (count xs)) \r\n     (first xs) \r\n     (recur (rest xs))))","problem":20,"user":"4e2110c7535d04ed9115e813"},{"code":"(fn [xs] (if (= 2 (count xs)) (first xs) (recur (rest xs))))","problem":20,"user":"4e5c4cc6535d8a8b8723a2bf"},{"problem":20,"code":"(fn [vals] (-> vals (reverse) (second)))","user":"5b58b271e4b02d533a91bd6e"},{"code":"(fn foo [s] (if (empty? (rest (rest s)))\n(first s) \n(recur (rest s))))","problem":20,"user":"50123696e4b02a085b99dc76"},{"problem":20,"code":"(fn [[item & coll]]\n  (if (empty? (rest coll))\n    item\n    (recur coll)))","user":"59d9186be4b0ef0a1e9b5c50"},{"code":"(fn[x]\n  (first\n    (rest\n      (reverse x))))","problem":20,"user":"5009e9f1e4b03d00572d2d6f"},{"problem":20,"code":"(fn [coll] (first (drop (dec (dec (count coll))) coll)))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn bl [c]\n  (loop [l1 (first c) l2 (first (next c)) r (next (next c))]\n    (if r\n      (recur l2 (first r) (next r))\n      l1)))","problem":20,"user":"5122925ae4b068a9582e656d"},{"problem":20,"code":"(fn [x]  (last (butlast x)))","user":"53fbf9bce4b0de5c41848586"},{"problem":20,"code":"#(loop [[head neck & tail] %]\n   (if (nil? tail)\n     head\n     (recur (conj tail neck))))","user":"56685a73e4b04acd4f672de5"},{"problem":20,"code":"(fn penultimate [x] (if (= (count x) 2) (first x) (penultimate (rest x))))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":20,"code":"#(second (reverse %));(fn [x] (second (reverse x)))","user":"57ee41a6e4b0bfb2137f5baf"},{"problem":20,"code":"(fn [col] \n  (nth col (- (count col) 2)))","user":"5793931ee4b0e215f87e845c"},{"code":"( fn [list] (last (drop-last list)))","problem":20,"user":"515dc82ee4b0c89ed0914af4"},{"code":"(fn [x] \n  (last (butlast x)))","problem":20,"user":"4f6ecc65e4b07046d9f4efdd"},{"problem":20,"code":"#(loop [s %]\n   (if (= (count (rest s))\n          1)\n     (first s)\n     (recur (rest s))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"problem":20,"code":"(fn secLast [x] (first (reverse (drop-last x))))","user":"56cb3e25e4b0ea9b8538f72a"},{"problem":20,"code":"(fn f [x [y & z]] (if (empty? z) x (f y z))) []","user":"5463fbbde4b01be26fd746ca"},{"code":"(fn [seq] (nth seq (- (count seq) 2)))","problem":20,"user":"4e7e8694535db169f9c79718"},{"problem":20,"code":"(fn [[a b & rest]]\n  (if (empty? rest)\n    a\n    (recur (cons b rest))))","user":"564b3730e4b0284900eef665"},{"code":"#( nth % ( - ( count % ) 2 ) )","problem":20,"user":"507f393ee4b0f753b6f9789a"},{"code":"#(nth % (- (.size %) 2))","problem":20,"user":"4e86a443535dc036d0eaab83"},{"problem":20,"code":"(fn [x] (last (take (dec (count x)) x)))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":20,"code":"(fn [s]\n     (let [c (count s)]\n       (if (> c 2)\n         (recur (rest s))\n         (first s))))","user":"5e3f2720e4b01d43a70e8e32"},{"problem":20,"code":"(fn qw [l]\n  (if (> (count l) 2)\n    (qw (rest l))\n    (first l)))","user":"57a7a437e4b0a96607956216"},{"problem":20,"code":"(fn [coll] \n  (second (reverse coll) ) \n  \n  )","user":"5cf7c1b0e4b0b71b1d808a72"},{"code":"#(nth % (dec(dec (count %))))","problem":20,"user":"50043e6be4b0678c553fc44c"},{"problem":20,"code":"#(->> % (reverse) (take 2) (last))","user":"53d11f7fe4b00fb29b221310"},{"code":"#(last (butlast %))\n; (comp last butlast)\n; #(second (reverse %))\n; (comp second reverse)\n; (comp first rest reverse)\n; #(first (rest (reverse %)))","problem":20,"user":"516e3cb1e4b0284f4b26df82"},{"code":"(fn [li] (nth li (- (count li) 2)))","problem":20,"user":"4fe9700fe4b0547ebccb245c"},{"problem":20,"code":"(fn [input-list] (nth input-list (- (count input-list) 2)))","user":"5c547943e4b0fb8c5ffd9a0a"},{"problem":20,"code":"(fn get-second-to-last\n  [input]\n  \t(second\n     (reverse input)))","user":"54ce25abe4b057c6fda3a2a9"},{"problem":20,"code":"(fn [args]\n  (first (rest (reverse args))))","user":"5372c830e4b06d7f452d9dff"},{"code":"(fn [seq] ( first (nthnext seq ( - ( count seq ) 2 ) ) ) )","problem":20,"user":"5026916fe4b0c969f0b056e1"},{"problem":20,"code":"#(-> (reverse %)\n     (nth 1))","user":"5abeb697e4b073f177442725"},{"code":"#(-> %\n  (reverse)\n  (second))","problem":20,"user":"50399468e4b088a6a14ca768"},{"code":"(fn [col] (first (nthnext col (- (count col) 2))))","problem":20,"user":"4dadba4dc9a9d6ed3899dc57"},{"problem":20,"code":";;possible approaches, reverse it, second\n#(second (reverse %))","user":"5ce56db6e4b0a17bb84e2b72"},{"problem":20,"code":"(fn [l] \n  (loop [elems l] \n    (if (= 2 (count elems))\n      (let [[pen & rest] elems] pen) \n      (recur (rest elems)))))","user":"5d8a3b3ee4b0915913b1d3c8"},{"code":"(fn[x](first (rest (reverse x))))","problem":20,"user":"4f32135ae4b0d6649770a08e"},{"problem":20,"code":"(fn [x] (nth x (- (alength (to-array x)) 2)))","user":"560d7336e4b05f002753df3f"},{"problem":20,"code":"(fn [arr] (fn second [a b & more] b) (second (reverse arr)))","user":"56f0ecf4e4b04a395b9a0484"},{"code":"#(comp (second (reverse %)))","problem":20,"user":"51ab1718e4b04e3dc0c27b2f"},{"code":"(fn [[n & more]]  \n  (if (> (count more) 1)\n    (recur more) \n    n))","problem":20,"user":"52c4756fe4b0c2d177d620db"},{"problem":20,"code":"#(loop [x 0  y %]\n     (if (= x (- (count y) 2))\n           (nth y x)\n           (recur (inc x )%)))","user":"5e81f009e4b09a7a73c8bbaf"},{"code":"(fn [c] (second (reverse c)))","problem":20,"user":"4e6e97ca535d5021c1a8960c"},{"problem":20,"code":"(fn [a]\n  (first (rest (reverse a))))","user":"54c32216e4b045293a27f60a"},{"code":"#(first(rest (reverse %)))","problem":20,"user":"4f055d4f535dcb61093f6bf6"},{"problem":20,"code":"(fn second-2-last [coll] \n  (nth coll (dec (dec (count coll))))\n )","user":"569285b8e4b0dcc4269f40fc"},{"problem":20,"code":"(fn [xs] (if (= (count xs) 2) (first xs)\n             (recur (rest xs))))","user":"5d631376e4b0c9e5857d5023"},{"code":"(fn [seq]\n  (first (rest (reverse seq)))\n  )","problem":20,"user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":20,"code":"(fn next-to-last [coll] (last (butlast coll)))","user":"565b818ce4b068f2fe63dc05"},{"problem":20,"code":"(fn get-second-last [x] (first (rest (reverse x))))","user":"5560293de4b0c656e3ff17bf"},{"problem":20,"code":"(fn\n  [inp]\n  (let [has-one-elem (fn [l] (if (empty? l) false (let [[h & t] l] (empty? t))))]\n  \t(loop [[h & t] inp] (if (has-one-elem t) h (recur t)))))","user":"56b09f9ce4b0982f16b37ddc"},{"code":"(fn m [x]\n  (if (= 2 (count x))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4f0de19b535d0136e6c2231c"},{"problem":20,"code":"(fn pene [xs]\n  (last (drop-last xs)))","user":"5776903ee4b0979f8965163b"},{"problem":20,"code":"(fn [vals] (first (rest (reverse vals))))","user":"5e13a6b7e4b099d064963001"},{"problem":20,"code":"(fn my_last [s]\n  (nth ( reverse s ) 1 )\n  )","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":20,"code":"#(->> % drop-last last)","user":"5714e82ae4b07c98581c3ac9"},{"code":"(fn [x] (nth x (max 0 (- (count x) 2))))","problem":20,"user":"50e915eae4b033b0e80d11e9"},{"problem":20,"code":"(fn [x]\n  (->> x\n      (reverse)\n      (take 2)\n      (last)\n      ))","user":"5d389ebfe4b01671435dbd49"},{"code":"(fn [l]\n  (if (= 2 (count l)) (first l) (recur (rest l))))","problem":20,"user":"5027b41ee4b01614d1633fee"},{"code":"(fn [a]\n  (nth a (- (count a) 2)))","problem":20,"user":"4f039c67535dcb61093f6b3a"},{"problem":20,"code":"#(loop [ll %]\n    (if (= (count ll) 2)\n      (first ll)\n      (recur (rest ll))))","user":"539338e3e4b0b51d73faaeb9"},{"code":"(fn [x] (if (= (rest (rest x)) '()) (first x) (recur (rest x))))","problem":20,"user":"4f57b523e4b0a7574ea7183c"},{"problem":20,"code":"(fn find-last [arr]\n  (if (empty? (rest (rest arr)))\n    (first arr)\n    (find-last (rest arr))))","user":"5b65b7bde4b0c6492753e748"},{"problem":20,"code":"(fn penult [collec]\n\t(nth collec (- (count collec) 2)))","user":"57af36eae4b0fbc9809a272e"},{"problem":20,"code":";;(fn [coll] (if (= (count (next coll)) 1) (first coll) (recur (next coll))))\n(comp second reverse)","user":"55647a31e4b0c656e3ff1808"},{"problem":20,"code":"(fn second-last [ls] (nth (reverse ls) 1))","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":20,"code":"(fn ret_pen [x]\n  (nth x (- (count x) 2)))","user":"54f98d9be4b01ecee9d8883d"},{"problem":20,"code":"(fn [seq] (nth seq (-(count seq) 2)))","user":"584ce55be4b0b7285a6f4e31"},{"code":"(fn [v] (first (rest (reverse v))))","problem":20,"user":"53212063e4b09d4e7a9b54ae"},{"problem":20,"code":"#(loop [x %]\n   (if (empty? (rest (rest x)))\n     (first x)\n     (recur (rest x))))","user":"5674607ae4b05957ce8c6137"},{"code":"(fn [x]\n  (last\n    (pop\n      (vec x))))","problem":20,"user":"50ba714ae4b03e68e4411c83"},{"problem":20,"code":";; #(nth % (dec (dec (count %))))\n#(first (rest (reverse %)))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn secondToLast [l] (first (rest (reverse l))))","problem":20,"user":"502346b0e4b0b5d8b1bd239a"},{"code":"(fn [ aseq ](second (reverse aseq)))","problem":20,"user":"51f59607e4b0abb92f97f9d5"},{"problem":20,"code":"(fn [x] \n  (if (reversible? x)\n    (peek (pop x))\n    (peek (pop (vec x)))))","user":"5f521a87e4b0a0bc16850a6f"},{"problem":20,"code":"(fn [x] (-> x (reverse) (second)))","user":"55705dd0e4b09a3098a5252c"},{"problem":20,"code":"(fn [l] (nth (reverse l)  1))","user":"5be05ea7e4b0ed4b8aab4c83"},{"code":"(fn [coll] (-> coll reverse rest first))","problem":20,"user":"5117caa0e4b0e0897831a60d"},{"problem":20,"code":"(fn fex [x] (second (reverse x)))","user":"555b8703e4b0b056612e2240"},{"code":"(comp peek pop vec)","problem":20,"user":"4e7eff9e535db966e863cc38"},{"problem":20,"code":"(fn doon [x] (if (empty? (rest (rest x))) (first x) (doon (rest x))))","user":"5fdb8657e4b05ac5b16ea133"},{"problem":20,"code":"(fn ll [coll] \n  (if (<= (count coll) 2) \n    (first coll) \n    (ll (rest coll)) ))","user":"55f5c118e4b06e875b46ce8e"},{"problem":20,"code":"(fn get-penultimate [l]\n  (if (= (count l) 2)\n    (first l)\n    (get-penultimate (rest l))))","user":"59095df7e4b047aa04b1999b"},{"problem":20,"code":"(fn [my-seq] \n  (first \n   (drop \n    (- (count my-seq) 2) \n    my-seq)))","user":"5c44f0fde4b0e06e1360a384"},{"code":"(fn  [s] (first (rest (reverse s))))","problem":20,"user":"516b586de4b005fd0cdf85bd"},{"problem":20,"code":"(fn [args] (first (take-last 2 args)))","user":"59f37776e4b0966464fe6a9d"},{"problem":20,"code":"(fn [s]\n  (loop [f (first s)\n         r (rest s)]\n    (if (= (count r) 1)\n      f\n      (recur (first r) (rest r)))))","user":"5705f569e4b0b0fb43fd0677"},{"problem":20,"code":"(fn [xs]\n  (if (= (count xs) 2) (first xs)\n      (recur (rest xs))))","user":"5ff8b97fe4b06df49cee14a8"},{"problem":20,"code":"(comp second reverse)\n;(fn [x] (->> x (reverse) (second)))","user":"55c387e4e4b0e31453f6498b"},{"problem":20,"code":"#(->> %\n      reverse\n      second)","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":20,"code":"#(nth % ( dec (dec (count %) ) ) )","user":"5954ff28e4b066ee0a44af1b"},{"code":"(fn mylast [xs] (if (= (count xs) 2) (first xs) (mylast (rest xs))))","problem":20,"user":"4fabc896e4b081705acca21f"},{"code":"(fn [xs]\n  (if (= () (rest (rest xs)))\n    (first xs)\n    (recur (rest xs))\n  )\n)","problem":20,"user":"52f702bae4b047fd55836fbe"},{"problem":20,"code":"(fn aint_first [ls]\n  (if (= (count ls) 2)\n    (first ls)\n    (aint_first (rest ls))))","user":"5efcee8fe4b0cf489e8d7efd"},{"code":"(fn [a]\n  (loop [sq a]\n    (if (= (count (rest sq)) 1)\n        (first sq)\n        (recur (rest sq)))))","problem":20,"user":"4f038cee535dcb61093f6b20"},{"problem":20,"code":"(fn [myseq] \n  (nth myseq (- (count myseq) 2)))","user":"5bb5cd43e4b0a20761a23575"},{"problem":20,"code":";(fn [sequen] (let [length (count sequen)] (loop [iter 1 counter length sequ sequen]\n;                          (if (= iter (- counter 1)) (first sequ) (recur (inc iter) counter (rest sequ)))\n;                          )))\n\n(comp first rest reverse)","user":"56483f45e4b0284900eef62b"},{"problem":20,"code":"#(loop [counter (dec (count %))\n       col %]\n   (if (= counter 1)\n     (first col)\n     (recur (dec counter) (rest col))))","user":"59061cc8e4b047aa04b1992b"},{"problem":20,"code":"(fn [l] (peek (pop (vec l))))","user":"5648edcde4b0284900eef637"},{"problem":20,"code":"(fn\n  [coll]\n  (let\n    [drop1 (rest coll)\n     drop2 (rest drop1)\n     firstelem (first coll)]\n    (if (seq drop2)\n      (recur drop1)\n      firstelem)))","user":"5acd235ae4b0e27600da7824"},{"problem":20,"code":"#(let [[first_elm & rest_elements] (reverse %)]\n   \t(first rest_elements))","user":"5ae15e11e4b0837691e92c53"},{"code":"(fn penultimate [x]\n  (if (next (next x))\n    (recur (next x))\n    (first x)))","problem":20,"user":"507c465ae4b0a19f8e876e56"},{"problem":20,"code":"#(first (take-last 2 %\n  ))","user":"5de5070fe4b0948ae9d9ae0b"},{"problem":20,"code":"(fn[x] (nth x (- (count x) 2) ))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":20,"code":"(fn [s] \n  (nth s (- (count s) 2)))","user":"57718d9fe4b0979f896515b6"},{"problem":20,"code":"(fn [array]\n  (loop [first-elem (first array) rest-elem (rest array)]\n    (if (= (count rest-elem) 1)\n      first-elem\n      (recur (first rest-elem) (rest rest-elem)))))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":20,"code":"(fn last2 [s] (nth s (- (count s) 2)))","user":"5eac34dbe4b00a66d4a951df"},{"problem":20,"code":"(fn penultimate [seq] (first (rest (reverse seq))))","user":"56c0756de4b060a8e693e3a9"},{"code":"(fn [x]\n  (if (nnext x)\n    (recur (next x))\n    (first x)))","problem":20,"user":"4e47f4f3535dc968683fc4bb"},{"problem":20,"code":"(fn [[x & y]]\n  (if (= 1 (count y)) x\n    (recur y)))","user":"585630cee4b0f14aab7c86ee"},{"problem":20,"code":"(fn [li]\n  (first (pop (reverse li))))","user":"55d4ae39e4b0e31453f64a7b"},{"code":"(fn pe [x]\n  (if (= (rest (rest x)) [])\n    (first x)\n    (pe (rest x))))","problem":20,"user":"51a671d4e4b0740bfd1afd21"},{"code":"#((vec %) (- (.size %) 2))","problem":20,"user":"4f03fce2535dcb61093f6b8a"},{"problem":20,"code":"(fn [[x & r]] (if (= 1 (count r)) x (recur r)))","user":"563ddefee4b0bfe05bf11857"},{"code":"(fn penultimate [coll] (nth (reverse coll) 1))","problem":20,"user":"4ffdaa85e4b0678c553fc3e6"},{"code":"(fn secondlast [x] (nth x (- (count x) 2)))","problem":20,"user":"52da25b0e4b09f7907dd13b4"},{"code":"#(.get %(dec (- (count %) 1)))","problem":20,"user":"534e1f56e4b084c2834f4aae"},{"problem":20,"code":"(fn [lst] (if (= 2 (count lst)) (first lst) (recur (rest lst))))","user":"56cf80f9e4b0ea9b8538f76a"},{"problem":20,"code":"(fn [seqn] (nth seqn (- (count seqn) 2)))","user":"5e83b9f2e4b09a7a73c8bbbf"},{"problem":20,"code":"(fn second-last [lista] (nth lista (dec (dec (count lista)))))","user":"5b5751c3e4b02d533a91bd56"},{"code":"(fn second-last [lst] (if (empty? (rest (rest lst))) (first lst) (second-last (rest lst))))","problem":20,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":20,"code":"(fn getPen [x] (second (reverse x)))","user":"54c6b12ce4b045293a27f630"},{"problem":20,"code":"(fn [l]\n  (loop [p nil\n         l l]\n    (let [r (rest l)]\n      (if (empty? r)\n        p\n        (recur (first l) r)))))","user":"5b96c1f3e4b0c0b3ffbd4a80"},{"problem":20,"code":"(fn teste-funcao [colecao]\n  (let [penultimo-indice (- (count colecao) 2)]\n    (nth colecao penultimo-indice)))","user":"5d797deee4b02e6b30c93541"},{"problem":20,"code":"(fn foo [xx]\n  \t(if (empty? (rest (rest xx))) (first xx) (foo (rest xx))))","user":"55010066e4b07d26eda61d6c"},{"code":"(fn[l] ( nth (reverse l) 1) )","problem":20,"user":"4f659386e4b07046d9f4ef44"},{"problem":20,"code":"(fn [a]\n(first (rest(reverse a)) ))","user":"56ae749fe4b03c432f18735f"},{"problem":20,"code":"(fn [l]\n  (loop [my-list l]\n    (if (= (second (rest my-list)) nil)\n      (first my-list)                                                           \n      (recur (rest my-list))))\n  )","user":"571b900ae4b07c98581c3b69"},{"problem":20,"code":"(fn second-to-last [data]\n  (second (reverse data)))","user":"5f2ab452e4b033932238a656"},{"problem":20,"code":"(fn rec [x] (if (= (rest (rest x)) '()) (first x) (rec (rest x))))","user":"56e9d3e6e4b04a395b9a03fd"},{"problem":20,"code":"(fn [input]\n  (if (= 2 (count input))\n         (first input)\n         (recur (rest input))))","user":"5a21d34ce4b0ff51aa4b32b9"},{"code":"(fn [ls] (first (take-last 2 ls)))","problem":20,"user":"516fc530e4b0b86e66597f00"},{"problem":20,"code":"(fn second-last\n  [[x & xs]]\n  (if (<= (count xs) 1)\n    x\n    (second-last xs)))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn get_pen [x] (nth x (- (count x) 2)))","problem":20,"user":"504f3aede4b0a02f9cffde5d"},{"problem":20,"code":"(fn [list] (last (butlast list)))","user":"56b8cf20e4b0f26550335929"},{"problem":20,"code":"(fn [x] \n  (if (nil? x) \n    x \n    (if (empty? (rest (rest x)))\n      (first x) \n      (recur (rest x))\n    )\n  )\n)","user":"5903c708e4b022d14a2aafb3"},{"problem":20,"code":"(fn lst [l] (if (= (count l) 2)\n              (first l)\n              (lst (rest l))))","user":"5430a16de4b0dad94371f2da"},{"code":"(comp first rest reverse);#(nth % (dec(dec (count %))))","problem":20,"user":"52a4879ce4b0c58976d9abdb"},{"code":"(fn get-second-last [seq]\n  (nth seq (- (count seq) 2)))","problem":20,"user":"4f9e3fd4e4b0dcca54ed6d2b"},{"problem":20,"code":"(fn [x]\n   (nth x (- (count x) 2))\n  )","user":"55d44af5e4b0e31453f64a74"},{"code":"(fn\n  [coll]\n  (let [a [\"\"]]\n    (first (reduce (fn [coll c] [(last coll) c]) a coll))))","problem":20,"user":"4edbae0d535d10e5ff6f531c"},{"code":"(fn slast [xs]\n  (if (seq (rest (rest xs)))\n      (slast (rest xs))\n      (first xs)))","problem":20,"user":"4edecdae535d10e5ff6f533c"},{"problem":20,"code":"(fn penultimate\n    [[first_thing & remaining]]\n    (if (= (count remaining) 1)\n        first_thing\n        (penultimate remaining)))","user":"59f242b2e4b0966464fe6a7a"},{"code":"(fn second-to-last [x] ((comp first rest reverse) x))","problem":20,"user":"52c35203e4b07a9af579238b"},{"problem":20,"code":"(fn\n  [x]\n  (first (take-last 2 x)))","user":"55b3c03ee4b01b9910ae2975"},{"problem":20,"code":"(fn newOne [coll]\n  (if-let [[first & rest] coll]\n    (if (= (count rest) 1)\n    first\n    (recur rest))))","user":"5485d169e4b0e286459a11b2"},{"problem":20,"code":"(fn [l]\n  (nth l\n       (- (count l)\n          2)))","user":"54fa25c2e4b0cf870d934700"},{"problem":20,"code":"apply (fn get-last-two\n         [x & xs]\n         (if (= 1 (.size xs))\n           x\n           (apply get-last-two xs)))","user":"5dc64aafe4b02f9375f4e1c2"},{"problem":20,"code":"#(loop [the-seq %]\n   (if (= 2 (count the-seq))\n     (first the-seq)\n     (recur (rest the-seq))))","user":"59a96a85e4b0bcf4e9a43b13"},{"code":"(fn [xs] (second (reverse xs)))","problem":20,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [a] (fnext (reverse a)))","problem":20,"user":"51c3130de4b0d204dbe2ca31"},{"problem":20,"code":"(fn\n  [s]\n  (second (reverse s)))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn my-butlast [coll]\r\n  (if (seq (rest (rest coll)))\r\n    (recur (rest coll))\r\n    (first coll)))","problem":20,"user":"4e7e4a1f535db169f9c7970c"},{"code":"#(last (reverse (pop (reverse %))))","problem":20,"user":"531f26d0e4b08068f379edc3"},{"problem":20,"code":"(fn [values] (-> values (reverse) (second)))","user":"5875f2c5e4b01531a375ea77"},{"code":"(fn last-in-seq [s]\n  (if\n    (= (count s) 2)\n    (first s)\n    (last-in-seq (rest s))))","problem":20,"user":"4f16dbf3535d64f603146450"},{"code":"(fn [n] (nth n (dec (dec (count n) ) ) ) )","problem":20,"user":"4fc52c46e4b081705acca385"},{"code":"(fn [x] (fnext (reverse x)))","problem":20,"user":"4e6e5c9e535d5021c1a89608"},{"problem":20,"code":"(fn [name] (nth name (- (count name) 2)))","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":20,"code":"(fn sl [s] (second (reverse s)))","user":"54b9ed93e4b0ed20f4ff6eb3"},{"problem":20,"code":"(fn [l] (let [el (first l) re (rest l)] (if (empty? (rest re)) el (recur re))))","user":"5713c575e4b07c98581c3aab"},{"code":"#(let [n (- (count %) 2)] (nth % n))","problem":20,"user":"5165e7eee4b04cc958b892be"},{"code":"(fn[col] (second (reverse col)))","problem":20,"user":"4fc4f668e4b081705acca362"},{"code":"(fn [x] (.get x (- (count x) 2)))","problem":20,"user":"506b0ee7e4b0a2a5463de381"},{"problem":20,"code":"(fn [coll]\n  (let [[ f s & tail ] coll]\n    (if (nil? s)\n      nil\n    (if (empty? tail)\n      f\n      (recur (conj tail s))\n  ))))","user":"5bba6571e4b0a20761a235e9"},{"problem":20,"code":"(fn [x] (first (rest (reverse x)))  )","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn [secventa]\r\n  (second (reverse secventa))\r\n  )","problem":20,"user":"5075b421e4b09049dea827a0"},{"problem":20,"code":"#(loop[s %]\n   (if (= 2 (count s)) (first s) (recur (rest s))))","user":"57b6555be4b0fbc9809a27bf"},{"code":"(fn [list]\n  (let [n (count list)]\n    (nth list (- n 2))))","problem":20,"user":"51cef277e4b0e42293a22567"},{"problem":20,"code":";;#(second (reverse %))\n#(first (drop (- (count %) 2) %))","user":"59944e73e4b0b211ea3aaac2"},{"code":"(fn ml [xs] \n  (if (< 2 (count xs))\n     (ml (rest xs))\n     (first xs)))","problem":20,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn last-in [seq] (second (reverse seq)))","problem":20,"user":"52cffe31e4b07d0d72b273b2"},{"code":"(fn my2nd [xs] (first (rest (reverse xs))))","problem":20,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"(fn find-penultimate \n  [list]\n    (cond\n      (empty? list) false\n      (empty? (rest list)) false\n      (false? (find-penultimate (rest list))) (first list)\n      :else (find-penultimate (rest list))))","problem":20,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn pen-val [x] (nth x (- (count x) 2)))","problem":20,"user":"50baa77ae4b03e68e4411c95"},{"problem":20,"code":"(fn penultimate [myseq]\n  (if (= 1 (count (rest myseq)))\n    (first myseq)\n    (penultimate (rest myseq))         \n   )\n  )","user":"5c71de4ce4b0fca0c162279e"},{"problem":20,"code":"(fn [%] (nth % (- (count %) 2)))","user":"573a00bae4b0cd1946bd1085"},{"problem":20,"code":"(fn [l] (if (< (count l) 2) nil (loop [[f & rema] l] (if (= (count rema) 1) f (recur rema)))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn seclend[%] (cond (= 1 (count (rest %))) (first %) :else (seclend (rest %))))","problem":20,"user":"4f041af6535dcb61093f6ba3"},{"code":"(fn _last [s] \r\n  (if (= (next s) (list (last s))) (first s) (recur (next s)))\r\n)","problem":20,"user":"4dcd327b535d5973398f929b"},{"problem":20,"code":"(fn [some-seq]\n  (let [some-vect (vec some-seq)]\n    (some-vect (- (count some-vect) 2))))","user":"54bf7d59e4b0ed20f4ff6f04"},{"problem":20,"code":"(fn ! [x] \n    (if (= (count x) 2) (first x)  (! (rest x) )  )\n  )","user":"59a34ec9e4b066c664927d37"},{"problem":20,"code":"(fn but-last [x]\n  \"\"\n  (if (empty? (rest (rest x)))\n    (first x)\n    (but-last (rest x))))","user":"5a2e638be4b09cafd31c7f7a"},{"code":"#(if (next (rest %))\n  (recur (rest %))\n  (first %))","problem":20,"user":"4f11caf6535d64f603146424"},{"code":"(fn[coll] \n  (get (vec coll) (- (count coll) 2)))","problem":20,"user":"5343f3dae4b084c2834f4a23"},{"code":"(fn [coll]\n  (-> coll drop-last last))","problem":20,"user":"5201ada5e4b0b2e020a18f14"},{"problem":20,"code":"#(second  (reverse %1))","user":"571f341de4b0145328a762a0"},{"code":"#(-> % reverse rest first)","problem":20,"user":"4e49fc29535dc968683fc4cb"},{"problem":20,"code":"(fn penultimate [[x & xs]] (if (> (count xs) 1) (penultimate xs) x))","user":"5d629ed9e4b0c9e5857d501d"},{"code":"(fn la [x] (second (reverse x)))","problem":20,"user":"53153466e4b08068f379ed23"},{"problem":20,"code":"(fn [x] (nth (reverse x) 1 ))","user":"5a79ce7fe4b03baeef9276c8"},{"code":"(fn [x] (nth x (- (count x) 2) ))","problem":20,"user":"50ec519fe4b04edc33777047"},{"problem":20,"code":"(fn [elements] (last (take 2 (reverse elements))))","user":"551535bde4b055c2f668d4de"},{"code":"(fn [s] (if (= (count s) 2) (first s) (recur (next s))))","problem":20,"user":"51ab8589e4b04e3dc0c27b37"},{"problem":20,"code":"(fn [l]\n  (if (= 2 (count l))\n    (first l)\n    (recur (rest l))\n  )\n)","user":"5a78cd9ee4b013a48d399777"},{"problem":20,"code":"(fn test [lst] (if (= (count lst) 2) (first lst) (test (rest lst))))","user":"5a663a32e4b0512ff01cd9c2"},{"problem":20,"code":"#(nth % \n      (- \n       (count %) 2))","user":"60063140e4b074f607df664f"},{"code":"(fn [x] \n  (let [f (first x) more (next x)]\n    (cond\n      (= 1 (count more)) f\n      true (recur more))))","problem":20,"user":"531792d9e4b08068f379ed5e"},{"problem":20,"code":"(fn [aList] (nth aList (- (count aList) 2)))","user":"5d59c3d0e4b02ba5928a682e"},{"code":"(fn [seqn]\n  (let [length (count seqn)]\n    (nth seqn (- length 2))))","problem":20,"user":"53889587e4b0640c7a9a589e"},{"problem":20,"code":"(fn xxx [xs]\n  (let [[a b & rest] xs]\n   (if (empty? rest)\n     a\n     (xxx (conj rest b)))))","user":"59dec79ee4b01968742fed81"},{"code":"(fn [s] (last (reverse (rest (reverse s)))))","problem":20,"user":"4de5372d535d08e6dec9fdf1"},{"code":"(fn [n]\n  (if (> (count n) 2)\n    (recur (rest n))\n    (first n)))","problem":20,"user":"4f6fb921e4b07046d9f4efea"},{"problem":20,"code":"(fn [f1 f2 f3 coll] (f1 (f2 (f3 coll)))) first rest reverse","user":"53ae0c50e4b047364c044471"},{"problem":20,"code":"(fn\n  [xs]\n  (let [rest (rest xs)]\n    (if (= (count rest) 1)\n      (first xs)\n      (recur rest))))","user":"5aa0a3e4e4b0d174b936c82f"},{"problem":20,"code":"#(nth %  (- (count %) 2) )","user":"5afc115de4b0cc2b61a3bcff"},{"problem":20,"code":"(fn my-penu [[x y & xs]] (if (nil? xs) x (my-penu (conj xs y))))","user":"548c574ae4b0e286459a1207"},{"problem":20,"code":"(fn [seq] (nth seq (- (count (vec seq)) 2)))","user":"53ff5560e4b0de5c418485fd"},{"code":"(fn [rest] (nth rest (- (count rest) 2)))","problem":20,"user":"502d39c5e4b0d96a44ab2031"},{"code":"(fn [lst] (first (drop 1 (reverse lst))))","problem":20,"user":"51761580e4b085adf681d880"},{"problem":20,"code":"#(last (drop-last  %))","user":"55b08677e4b002ce9d5cbc23"},{"problem":20,"code":"(fn get-pen [[h & tail]]\n    (if (empty? (rest tail)) h (get-pen tail)))","user":"5d1e37e2e4b02ea6f0fb69b1"},{"code":"(fn[xs] (first (take-last 2 xs)))","problem":20,"user":"4dd76bf9535d2dad7130b5d1"},{"problem":20,"code":"(fn[coll] (nth coll (dec (dec (count coll)))))","user":"5533848fe4b09218d5f44f8f"},{"code":"(fn [x] (nth x (+ (count x) -2)))","problem":20,"user":"51007db2e4b0700a7a02d6e1"},{"problem":20,"code":"(fn second-to-last [l]\n  (let [dc (comp dec dec count)]\n    (nth l (dc l))))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [lst] (if (empty? (rest (rest lst)))\n  (first lst) (recur (rest lst))))","problem":20,"user":"4ede365c535d10e5ff6f5333"},{"code":"(fn [coll]\n  (if (seq (rest (rest coll)))\n    (recur (rest coll))\n    (first coll)))","problem":20,"user":"52e6aea1e4b09f7907dd147c"},{"code":"(fn [x]\n    (first\n        (rest\n            (reverse x))))","problem":20,"user":"4f9a737fe4b0dcca54ed6d0a"},{"problem":20,"code":"(fn second-to-last\n  [seq]\n  (first (reduce (fn [[last-last last] current] [last current]) [nil nil] seq))\n )","user":"5f735915e4b02876ed9fd097"},{"problem":20,"code":"(fn [coll]\n  (loop [r-coll coll]\n    (if (= 2 (count r-coll))\n      (first r-coll)\n      (let [[first & rest] r-coll]\n        (recur rest)))))","user":"5f1f2b95e4b0f565ad99827a"},{"problem":20,"code":"(fn secondtolast [l] (first (rest (reverse l))))","user":"59fa0bb6e4b0ca45a743a352"},{"problem":20,"code":"(fn butlast-last [se] (last (butlast se)))","user":"57756264e4b0979f89651619"},{"code":"(fn [x] (loop [x x] (if (empty? (rest (rest x))) (first x) (recur (rest x)))))","problem":20,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"#(first (take-last 2 %1))","problem":20,"user":"4e0cdc6f535d04ed9115e7b4"},{"code":"#(if (< (count %) 3)\n  (first %)\n  (recur (rest %)))","problem":20,"user":"4ef47f0f535dced4c769f235"},{"code":"(fn [l]\n  (let [[_ i] (reverse l)]\n    i))","problem":20,"user":"538be6afe4b0640c7a9a58c9"},{"problem":20,"code":"(fn penultimate[s] (if (= '() (rest (rest s))) (first s) (penultimate (rest s))))","user":"55fb58b2e4b0f488688e0661"},{"problem":20,"code":"(fn [l]\n  (if (= 1 (count (rest l)))\n    (first l)\n    (recur (rest l))))","user":"504e1c58e4b0f6ff3350c462"},{"problem":20,"code":"apply (fn [& x] (first ( rest (reverse x))))","user":"5a44e514e4b0447ef91cc614"},{"problem":20,"code":"(fn [bruh] (first (rest (reverse bruh))))","user":"577d0d4de4b0c8d87281f6cd"},{"problem":20,"code":"#(-> % \n      reverse \n      rest \n      first)","user":"546b24a0e4b00cfc9eacc166"},{"code":"; (fn last-second [s] (first (take-last 2 s)))\n; #(first (take-last 2 %))\n\n; (comp second reverse)\n\n; (fn last-second [s] (second (reverse s)))\n; #(second (reverse %))\n\n; (fn [s] (peek (pop (reverse s))))\n; #(peek (pop (reverse %)))\n\n; #(-> % reverse second)\n\n; (fn [s] (last (butlast s)))\n; (comp last butlast)\n; #(-> % butlast last)\n\n; (fn [s] (if (empty? (rest (rest s))) (first s) (recur (rest s))))\n\n; (fn [s] (first (take-last 2 s)))\n; #(first (take-last 2 %))\n#(-> (take-last 2 %) first)","problem":20,"user":"525f61aae4b0cb4875a45dcb"},{"code":"(fn penultimate [x]\n  (if (= 2 (count x))\n    (first x)\n    (penultimate (rest x))))","problem":20,"user":"4fc580cfe4b0ee37620e17f7"},{"code":"(fn ntl [xs] (nth xs (- (count xs) 2)))","problem":20,"user":"5055e7f4e4b0ce54f56f0401"},{"code":"#(loop [[car & cdr] %] (if (not (empty? (rest cdr))) (recur cdr) car))","problem":20,"user":"519d66d2e4b037b32803f9b2"},{"code":"(fn [items] (nth (reverse items) 1))","problem":20,"user":"53401430e4b085b17e897da4"},{"problem":20,"code":"#(.get\n  %\n  (-\n   (count %)\n   2))","user":"603bfd17e4b0d5df2af22304"},{"problem":20,"code":"(fn get-pen [x] (if (= (count x) 2) (first x) (get-pen (rest x))))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":20,"code":"(fn[l](-> l reverse second))","user":"57ffe094e4b0a837a8b30c2c"},{"code":"(fn [coll]\n  (let [i (- (count coll) 2)]\n    (if (>= i 0)\n      (nth coll i))))","problem":20,"user":"4f165655535d64f60314644a"},{"problem":20,"code":"(fn [a-seq] (second (reverse a-seq)))","user":"53de622ce4b0d874e779ae34"},{"code":"#(if (nil? (nnext %)) (first %) (recur (next %)))","problem":20,"user":"4fe5895be4b0e8f79898fec6"},{"code":"(fn [elements] \n  (if-not (nnext elements)\n    (first elements)\n    (recur (rest elements))))","problem":20,"user":"528b08efe4b0239c8a67ae8a"},{"code":"(fn [m] (nth (reverse m) 1))","problem":20,"user":"4ebca352535dfed6da9c6d88"},{"code":"(fn last-element-of [list] \n  (nth list (- (count list) 2)))","problem":20,"user":"509aea3de4b050a581d3d580"},{"code":"(fn f [x]\n  (if (> (count x) 2)\n    (f (rest x))\n    (first x)))","problem":20,"user":"51256b40e4b05d10e3e395f8"},{"code":"(comp first #(drop 1 %) reverse)","problem":20,"user":"4eb513fe535d7eef30807364"},{"problem":20,"code":"(fn [sequence] (\n    nth sequence (- (count sequence) 2)\n))","user":"58cea645e4b03c36ff7e58a6"},{"problem":20,"code":"#(nth (reduce (fn [coll value] (conj coll value)) '() %1) 1)","user":"5f86de3ee4b0649ffcda4cab"},{"code":"(fn [x]\n  (if (= 2 (count x))\n    (first x)\n    (nth x(- (count x) 2))))","problem":20,"user":"505a3706e4b021387fb89855"},{"code":"(fn [x](nth (reverse x) 1))","problem":20,"user":"511ac026e4b0c87c59c9670e"},{"code":"(fn almostlast[items] (if (< 2 (count items)) (recur (drop 1 items)) (first items)))","problem":20,"user":"515310b4e4b0d6806ecd26fb"},{"problem":20,"code":"(fn [l]\n  (nth\n   (reverse l) 1))","user":"5640eb50e4b08d4f616f5eec"},{"problem":20,"code":"(fn penult [[x & xs]]\n  (if (= 1 (count xs))\n    x\n    (recur xs)))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":20,"code":"(fn ls [x] (if (= (first(rest x)) (last x)) (first x) (ls (rest x))))","user":"5d88c6a3e4b0915913b1d3ad"},{"problem":20,"code":"#(let [penultimate-index (- (count %) 2)]\n   (if (>= penultimate-index 0)\n     (nth % penultimate-index)))","user":"58ed0198e4b056aecfd47d72"},{"problem":20,"code":"(fn secondlast [s] (last (drop-last s)))","user":"54bf2c59e4b0ed20f4ff6efe"},{"code":"(fn [x]\n  (nth x (- (count x) 2))\n)","problem":20,"user":"4eb81056535d7eef3080737e"},{"code":"(fn [x] (if (< (count x) 3) (first x) (recur (next x))))","problem":20,"user":"4eb27fad535d7eef3080734a"},{"problem":20,"code":"(fn [ [ a b & rs ] ] (if (empty? rs) a (recur (conj rs b))))","user":"5433a07be4b0b6b47310fce0"},{"problem":20,"code":"(comp #(nth % 1 ) reverse)","user":"540479e7e4b0addc1aec665a"},{"problem":20,"code":"(fn [aSeq] (first (pop (reverse aSeq))))","user":"56a1f7ede4b0542e1f8d14b4"},{"code":"(fn snd-last [lst]\n  (if (empty? (rest (rest lst)))\n      (first lst)\n      (snd-last (rest lst))))","problem":20,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn [ls] (second (reverse ls)))","problem":20,"user":"4ee4ad77535d1385b2869d81"},{"code":"(fn s_to_l [x]\n  (if (= (count x) 2)\n    (first x)\n    (s_to_l (rest x))))","problem":20,"user":"52d7b0ade4b09f7907dd137c"},{"problem":20,"code":"(fn [coll] \n  (first (butlast (take-last 2 coll))))","user":"58173722e4b0c0e9c07b838a"},{"code":"(fn foo [x] (if (= 2 (count x)) (first x) (foo (rest x))))","problem":20,"user":"4e8c4823535d65386fec2128"},{"problem":20,"code":"(fn [col]\n  (->> col\n       count\n       dec\n       dec\n       (nth col)))","user":"599b845ee4b010b4cc4bca09"},{"problem":20,"code":"(fn second-last [col] \n  (nth col (- (count col) 2)))","user":"57410964e4b05c31a32c085f"},{"problem":20,"code":"(fn [l] (first (drop 1 (reverse l))) )","user":"58622733e4b0f14aab7c8803"},{"problem":20,"code":"#(let [[first second & rest] (reverse %)] second)","user":"56279816e4b00e49c7cb47d5"},{"code":"#(loop [lv %] (if (> (count lv) 2) (recur (rest lv)) (first lv)))","problem":20,"user":"4de6c970535d08e6dec9fdf6"},{"problem":20,"code":"(fn [ls]\n  (nth ls (- (count ls) 2)))","user":"5d48884ee4b07c84aa5ae6bb"},{"problem":20,"code":"#(->> (- (count %) 2) (nth %))","user":"54cb378be4b057c6fda3a273"},{"problem":20,"code":"(fn [lst] (let [[head & tail] lst]\n            (if (= (nth tail 1 nil) nil)\n              head\n              (recur tail))))","user":"58053715e4b0a837a8b30cbd"},{"problem":20,"code":"(fn func [seq]\n  (if (> (count seq) 2)\n    (func (rest seq))\n    (first seq)))","user":"5ef381a3e4b07c55ae4a053c"},{"problem":20,"code":"(fn [x]\n  (last\n   (pop (vec x))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn pen [x] (second (reverse x)))","problem":20,"user":"4f877ca8e4b033992c121c5c"},{"code":"(fn [x] (fnext (reverse x )))","problem":20,"user":"4fdf750be4b05e33b9224f9c"},{"code":"#(loop [c % n (first %)]  (if (empty? (->> c rest rest)) n (recur (rest c ) (first (rest c)))) )","problem":20,"user":"50463347e4b011c5dfee771e"},{"problem":20,"code":"#(first (rest (reverse (vec %))))","user":"5a5b5806e4b0512ff01cd904"},{"code":"#(->> % (take-last 2) (first))","problem":20,"user":"4ec601ff535d6d7199dd36be"},{"code":"(fn ! [l]\n  (if (= (count l) 2)\n    (first l)\n    (! (rest l))))","problem":20,"user":"501f36dde4b0cb6ebc0a42e4"},{"problem":20,"code":"(fn getLast[x] (loop [a (first x)\n                       b (rest x)]\n                  (if (= 1 (count b)) a (if (= 2 (count b))\n                                          (first b)\n                                          (recur (first b) (rest b))))))","user":"55b8d186e4b01b9910ae29ba"},{"problem":20,"code":"(fn penultimate\n  [lst]\n  (let [c (count lst)]\n    (first (drop (- c 2) lst))))","user":"5c7dad57e4b0d597f478caba"},{"problem":20,"code":"(fn [list_like] (nth list_like \n                     (- (count list_like) 2)\n                     )\n  \n)","user":"55893b09e4b059ccff29b1fe"},{"problem":20,"code":"(fn [in](first (rest (reverse in))))","user":"5fd66e61e4b05ac5b16ea10a"},{"problem":20,"code":"(fn [s] (if (not= (count s) 2) (recur (next s)) (first s)))","user":"541dc9b5e4b01498b1a71a83"},{"problem":20,"code":"(fn [nums] (nth nums (- (count nums) 2)))","user":"574b5ccee4b02ea114799209"},{"code":"(fn [coll] (nth coll (dec (count (next coll)))))","problem":20,"user":"50e80067e4b077ad597af36d"},{"code":"(fn penultimate [x]\n  (if\n    (= (rest x) (list (last x)))\n    (first x)\n    (penultimate (rest x))))","problem":20,"user":"5370612be4b0fc7073fd6e97"},{"problem":20,"code":"(fn snd-lst [l]\n  (nth l (- (count l) 2)))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"problem":20,"code":"(fn scan [col] (if (empty? (rest (rest col))) (first col) (scan (rest col))))","user":"54ac5ad7e4b09f271ff37cd6"},{"code":"#(first (drop (- (count (rest %)) 1) %))","problem":20,"user":"52bf33c2e4b07a9af579232f"},{"problem":20,"code":"#(first (reduce (fn [acc i] (conj (vector (last acc)) i)) [nil nil] %))","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn [li] (nth (reverse li) 1))","problem":20,"user":"4feddf2ee4b0198f34b063be"},{"code":"(fn [s] (if (next (next s))\n  (recur (rest s))\n  (first s)))","problem":20,"user":"4ed9354f535d10e5ff6f5301"},{"code":"(fn [lista] (\n             letfn [(has-next [x] (if (empty? (rest (rest x))) (first x) (has-next (rest x)))  )]\n             (has-next lista)\n             \n             ))","problem":20,"user":"505cdcb7e4b0e6aca564be03"},{"problem":20,"code":"#(loop [[f & r] %]\n   (if (= 1 (count r))\n     f\n     (recur r)))","user":"56cf115de4b0ea9b8538f765"},{"problem":20,"code":"(fn final [coll]\n     (nth coll (- (count coll) 2)))","user":"58ffaddee4b0438e51c2cffe"},{"code":"(comp (fn [lst] (nth lst 1)) reverse)","problem":20,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":20,"code":"#(nth  % (- (count %)  2))","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":20,"code":"(fn penultimate\n  [s]\n  (last (take 2 (reverse s))))","user":"4febb00ee4b0681fd128dc97"},{"code":"(fn [x]\n  (if (vector? x) (x (- (count x) 2))\n    \t\t\t  (nth x (- (count x) 2))))","problem":20,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":20,"code":"(fn [q]\n  (loop [[head & tail] q]\n    (if (= (count tail) 1)\n      head\n      (recur tail))))","user":"541d53d0e4b01498b1a71a7f"},{"problem":20,"code":"(fn\n[s]\n  (nth s (- (count s) 2)))","user":"59c4d93fe4b0a024fb6ae507"},{"code":"(comp first rest  reverse)","problem":20,"user":"50d916eae4b0fd36a4b89221"},{"code":"(fn penultimate [x] ((vec x) (- (count x) 2)))","problem":20,"user":"4ec5569f535d6d7199dd3695"},{"code":"(fn [lst]\n (peek \n   (vec\n     (pop\n       (vec lst)\n)\n)\n)\n)","problem":20,"user":"4f061af9535dcb61093f6c05"},{"problem":20,"code":"(fn [xs]\n  (if (not(next(next xs)))\n    (first xs)\n    (recur (next xs)))\n)","user":"5682d5b4e4b0945ebc182a95"},{"problem":20,"code":"(fn [x](nth x(-(count x)2)))","user":"5bca21a5e4b07a9b28b100e5"},{"problem":20,"code":"(fn second-last [n] (second (reverse n)))","user":"5ed5a0dce4b016b56eae05d7"},{"problem":20,"code":"(fn second-worst-to-one [group] (second (reverse group)))","user":"56446954e4b0284900eef5f4"},{"problem":20,"code":"(fn [lst]\n  (loop [lst lst\n         aux 0\n         aux1 0]\n    (if (empty? lst)\n      aux1\n      (recur (rest lst) (first lst) aux))))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":20,"code":"(fn [x] (nth (take-last 2 x) 0))","user":"59a7f3d1e4b0bcf4e9a43ae8"},{"code":"#((comp second rseq vec) %)","problem":20,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [lst] (first (drop (- (count lst) 2) lst)))","problem":20,"user":"53695439e4b0243289761e9a"},{"problem":20,"code":"(fn recur[[a b & others]] (if (nil?  others) a (recur (conj others b))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":20,"code":"(fn [x]\n  (loop [l x]\n    (if (empty? (rest (rest l)))\n      (first l)\n      (recur (rest l))\n    )\n  )\n)","user":"5a786397e4b013a48d39976c"},{"code":"(fn [s](second (reverse s)))","problem":20,"user":"534c1c64e4b084c2834f4a8a"},{"code":"(fn penultimate [l]\n  (first (rest (reverse l))))","problem":20,"user":"52725040e4b03e8d9a4a7427"},{"problem":20,"code":"(fn [x] (last (take 2 (reverse x ))))","user":"527106e8e4b03e8d9a4a73ce"},{"problem":20,"code":"(fn [col]\n  (cond (= 2 (count col)) (first col)\n        (> 2 (count col)) nil\n        (< 2 (count col)) (-> col reverse rest first)))","user":"5a912080e4b002d099cae6ea"},{"code":"(fn penul [l] (if (= 2 (count l)) (first l) (penul (next l))))","problem":20,"user":"4e351b47535deb9a81d77f2b"},{"problem":20,"code":"(fn [myseq]\n  (second (reverse myseq)))","user":"590f283de4b047aa04b19a35"},{"problem":20,"code":"(fn secondLast [list] (second (reverse list)))","user":"5e692be9e4b04a83ad7cd269"},{"code":"(fn get-penultimate [x] (if (= 2 (count x)) (first x) (get-penultimate (rest x))))","problem":20,"user":"5285920be4b0239c8a67adfb"},{"problem":20,"code":"(fn [x] (-> x (reverse) (second)\n         \n         ))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":20,"code":"(fn [s]\n  (loop [s' (rest s), res (first s)]\n    (if (seq (rest s'))\n      (recur (rest s') (first s'))\n      res)))","user":"56a50330e4b0542e1f8d14df"},{"problem":20,"code":"(fn ([l] (reduce (fn ([a b] b)) (butlast l))))","user":"5705db65e4b0b0fb43fd0675"},{"problem":20,"code":"(fn[l](nth l (- (count l) 2)))","user":"5534887ce4b09218d5f44f9f"},{"problem":20,"code":"(fn [coll]\n  (let [c (next (next coll))]\n    (if c\n      (recur (next coll))\n      (first coll))))","user":"562268dce4b03f08ee9a9224"},{"problem":20,"code":"(fn [x](last (drop-last x)))","user":"5b754a5ae4b047b03b2036c8"},{"code":"(fn [input]\n  (nth input (- (count input) 2)))","problem":20,"user":"5232d104e4b035af41902a96"},{"problem":20,"code":"(fn penultimate [a]\n  (if (empty? (rest (rest a)))\n    (first a)\n    (penultimate (rest a))))","user":"541b41d1e4b01498b1a71a65"},{"code":"(fn penult [input]\n  (if (= 2 (count input)) (nth input 0) (penult (rest input)))\n  )","problem":20,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn [arg] (second (reverse arg)))","problem":20,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn [xs]\n  (let [tail (rest xs)]\n    (if (seq (rest tail))\n      (recur tail)\n      (first xs))))","problem":20,"user":"500ff421e4b0ae202717946f"},{"problem":20,"code":"#(.get % (dec(dec (count %))))","user":"57ea2c52e4b0bfb2137f5b41"},{"code":"#(reduce (fn [a b] b) (take (dec (count %)) %))","problem":20,"user":"506adad4e4b0a2a5463de37a"},{"code":"(fn [collect] (nth collect (- (count collect) 2)))","problem":20,"user":"52ad68f5e4b0c58976d9ac94"},{"problem":20,"code":"(fn penult [x] (nth x (- (count x) 2)))","user":"5474897ce4b0c51c1f4d728a"},{"problem":20,"code":";;(fn [x](second (reverse x)))\n;;(comp second reverse)\n#(second (reverse %))","user":"580d7bdae4b0849f6811b73c"},{"problem":20,"code":"(fn [se]\n  (nth se (- (count se) 2)))","user":"5594523be4b0c79f6e1db951"},{"problem":20,"code":"(fn\n  [s]\n  (if (>= (count (next s)) 2)\n    (recur (next s))\n    (first s)))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(comp first (partial take-last 2))","problem":20,"user":"4daf36c2edd6309eace4d175"},{"code":"(fn [x] \r\n  (loop [x x]\r\n    (if (= 2 (count x))\r\n       (first x)\r\n       (recur (next x)))))","problem":20,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"#(nth % (dec (-(count %) 1)))","problem":20,"user":"535e5c4de4b04ce2eb3ed2d1"},{"problem":20,"code":"#(get (vec %) (-> % count (- 2)))","user":"60ac91c5e4b00e9e6653c485"},{"problem":20,"code":"(fn [s]\n  (loop [c, s]\n    (if (= (count c) 2)\n      (first c)\n      (recur (rest c)))))","user":"57c7258ee4b05aa3c4741cfe"},{"code":"#(nth % (dec ( dec (count %) )) )","problem":20,"user":"5233e983e4b07e3ee2be83b5"},{"problem":20,"code":"(fn [x] (let [v (into [] x)] (v (- (count v) 2))))","user":"544b4807e4b0e39780006962"},{"problem":20,"code":"(fn get-pen [[x & others]]\n  (if (= 1 (count others))\n    x\n    (recur others)))","user":"5788a541e4b0ebec4cfb7520"},{"problem":20,"code":"(fn lst [sq]\n  (if (= (count (rest sq)) 1)\n    (first sq)\n    (lst (rest sq))))","user":"5751eb97e4b02ea11479928e"},{"code":"(fn [s] (second (rseq (vec s))))","problem":20,"user":"5018eb4ee4b011a2e0bf6411"},{"problem":20,"code":"(fn [coll]\n  (if (= (count coll) 0)\n    nil\n  \t(loop [[head & tail] coll]\n      (if (= (count tail) 1)\n        head\n        (recur tail)))))","user":"59bcb2c1e4b0a024fb6ae417"},{"code":"(fn [seq] (first (rest (reverse seq))))","problem":20,"user":"4e653558535d8ccf87e9fe6f"},{"code":"(fn l [x] (\n  if (= (count x) 2)\n  (first x)\n  (l (rest x))\n))","problem":20,"user":"4f73054fe4b07046d9f4f03e"},{"code":"(fn [a-seq] (nth a-seq (-(count a-seq)2)))","problem":20,"user":"50febf94e4b075812dd6dfb3"},{"code":"(fn penultimate [coll]\n  (if (empty? (rest (rest coll)))\n    (first coll)\n    (recur (rest coll))))","problem":20,"user":"51dc80b7e4b09c47a74ce10f"},{"problem":20,"code":"(fn myFN [input]\n  (loop [firstEl (first input)\n         prevEl (first input)\n         restEl (rest input)]\n    (if (empty? restEl)\n      prevEl\n      (recur (first restEl)\n             firstEl\n             (rest restEl)))))","user":"5b33050ee4b025bcb146f32d"},{"problem":20,"code":"#(first(rest(into () %)))","user":"5fb4da96e4b08cb800c85b47"},{"problem":20,"code":"(fn lst [x] (first (take-last 2 x)))","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [xs] (if (empty? (rest (rest xs)))\n             (first xs)\n             (recur (rest xs))))","problem":20,"user":"4f8345c6e4b033992c121c1b"},{"problem":20,"code":"(fn [s]\n  (let [size (count s)]\n    (nth s (- size 2))))","user":"5ceef413e4b0aaa82f1129e8"},{"problem":20,"code":"(fn avant-dernier [seqi]\n  (last (butlast seqi)))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [numbers] (nth numbers (dec (dec(count numbers)))))","problem":20,"user":"50c5546de4b0951b67b28c18"},{"code":"#(nth % (- (count %) 2) nil)","problem":20,"user":"518e6966e4b051adb72789ec"},{"problem":20,"code":"(fn [coll]\n  (loop [head (first coll)\n         tail (next coll)]\n    (if (= 1 (count tail))\n    head\n    (recur (first tail) (next tail))\n          ))\n  )","user":"553cd680e4b0a04f792994d4"},{"code":"#(second(reverse %))","problem":20,"user":"4dd67f10535d2dad7130b5c9"},{"code":"#(->> % count dec dec (nth %))","problem":20,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn penultimo [s]                                                                                                                                   \n  (if (= (count s) 2)                                                                                                                               \n    (first s)                                                                                                                                       \n    (if (> (count s) 2)                                                                                                                             \n      (penultimo (rest s))                                                                                                                          \n      nil)))","problem":20,"user":"4eea5823535d93acb0a6689d"},{"code":"(comp first reverse drop-last)","problem":20,"user":"517e5a91e4b0329b27fa9f55"},{"code":"(fn[c]\r\n              (let [s (- (count c) 2) x c]\r\n                 (nth x s)\r\n))","problem":20,"user":"4ef2d6c5535dced4c769f222"},{"code":"(fn penultuimate [x] (.get x( - (count x) 2)))","problem":20,"user":"538dc2d1e4b0b51d73faae75"},{"problem":20,"code":"(fn second-to-last [x]\n  (if (= 1 (count (rest x)))\n    (first x)\n    (second-to-last (rest x))))","user":"593870e6e4b02506e01a29d6"},{"code":"(fn la [l] (if (= 2 (count l))\n(first l)\n(la (rest l))\n))","problem":20,"user":"4fcebce4e4b03432b189f404"},{"problem":20,"code":"(fn [s] (let [n (count s)]\n           (cond\n             (= n 0) nil\n             (= n 1) (last s)\n             :else (nth s (- n 2)))))","user":"55664950e4b0c656e3ff1832"},{"problem":20,"code":"(fn [coll]\n   (loop [s coll\n          r (first coll)]\n   (if-not (next s)\n     r\n     (recur (next s) (first s)))))","user":"4e6459af535d8ccf87e9fe6b"},{"code":"#(nth (vec %) (- (count %) 2))","problem":20,"user":"4f559503e4b0a7574ea71804"},{"code":"(fn second-to-last [x] (last (drop-last x)))","problem":20,"user":"50845d3ee4b0fb8f40674bf3"},{"code":"(fn second-last [x]\n  (if (nil? (next (rest x)))\n    (first x)\n    (second-last (rest x))))","problem":20,"user":"4e505bec535dc968683fc4eb"},{"code":"(fn penultimate [x] (nth x (- (count x) 2)))","problem":20,"user":"52a5a130e4b0c58976d9abec"},{"code":"#(peek (pop(vec %)))","problem":20,"user":"51416721e4b03d51af0d04ef"},{"problem":20,"code":"(fn [[a & more]] (if (= 1 (count more)) a (recur more)))","user":"55b3e8aee4b01b9910ae2977"},{"problem":20,"code":"#(let [[_ y] (reverse %)] y)","user":"53f9fe41e4b0de5c41848575"},{"code":"(fn second-to-last [x] (last (butlast x)))","problem":20,"user":"4f20c040e4b0d66497709fcb"},{"code":"(fn penulti [x]\n  (second (reverse x)))","problem":20,"user":"4fdce986e4b05e33b9224f74"},{"problem":20,"code":"(fn [seq]\n  (let [n (- (count seq) 2)]\n    (first (drop n seq))))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":20,"code":"(fn my-last [x]\n  ;; Returns the last element of a list\n  (loop [list x]\n    (if (= (count list) 2)\n      (first list)\n      (recur (rest list))\n)))","user":"558869ade4b059ccff29b1f7"},{"code":"(fn [thelist] (-> thelist reverse rest first))","problem":20,"user":"4f039a8b535dcb61093f6b36"},{"problem":20,"code":"(fn mysec2last[myvec] (get (vec myvec) (- (count myvec) 2) ))","user":"58a17511e4b02bd94d917eb4"},{"problem":20,"code":"(fn [collection]\n  (first (rest (reverse collection))))","user":"54f32614e4b050824f58f5ba"},{"problem":20,"code":"#(nth % (- (count %)  2))","user":"566648e6e4b0e91d5f5c566c"},{"code":"(fn [arr]\n  (let [other (rest arr)]\n    (if (= 1 (count other))\n      (first arr)\n      (recur other)\n    )\n  )\n)","problem":20,"user":"5179b3f1e4b01aacecbecbd9"},{"problem":20,"code":"(fn [%] (nth (reverse %) 1))","user":"5756935be4b02ea1147992df"},{"problem":20,"code":"(fn [[firstele secele & rest]]\n  (if (empty? rest)\n    firstele\n    (recur (cons secele rest))))","user":"543154e9e4b0dad94371f2e5"},{"problem":20,"code":"(fn pe [fq] (first (rest ((fn rv [q head] (if (= q '()) head (rv (rest q) (conj head (first q))))) fq '()))))","user":"5f79cb16e4b02876ed9fd0cb"},{"problem":20,"code":"(fn [coll]\n  (last\n  \t(take (- (count coll) 1) coll)\n  ))","user":"605b319de4b079a07f8593f7"},{"problem":20,"code":"(fn [v]\n  (second\n   (reverse v)))","user":"53a8056de4b047364c044424"},{"code":"( comp second reverse )","problem":20,"user":"4f83ee95e4b033992c121c26"},{"code":"(fn [alist] (if (== (count alist) 2) (first alist) (recur (rest alist))))","problem":20,"user":"4fb213b7e4b081705acca285"},{"code":"(fn [elems]\n  (loop [back (rest elems)\n         e (first elems)]\n(if (= 1 (count back))\ne\n(recur (rest back) (first back)))))","problem":20,"user":"4e5c3612535d8a8b8723a2be"},{"problem":20,"code":"(fn [coll] (first (next (reverse coll))))","user":"57d711c5e4b0bd073c2023d5"},{"code":"(fn lllast [lst] (if (= (second (rest lst)) nil) \r\n                    (first lst)\r\n                    (lllast (rest lst))))","problem":20,"user":"504e14dde4b078edc5f593c0"},{"problem":20,"code":"(fn [x] \n  (nth x\n       (- (count x) 2)))","user":"5807edb4e4b0a837a8b30cfb"},{"problem":20,"code":"(fn [k] (get (into [] k) (- (count k) 2)))","user":"56ecf2e6e4b04a395b9a0440"},{"code":"#(if (= 2 (count %))\n  (first %)\n  (recur (rest %)))","problem":20,"user":"4e2a34c6535deb9a81d77f00"},{"problem":20,"code":"#(if (next (next %))\n    (recur (rest %))\n    (first %))","user":"5628f727e4b00e49c7cb47f5"},{"problem":20,"code":"(fn getLast [sq] (if (= 2 (count sq)) (first sq) (getLast (rest sq))))","user":"5a856f1ae4b00b71e582a0a3"},{"code":"(fn m [x] (if (= (count x) 2) (first x) (m (rest x))))","problem":20,"user":"4ea0c284535d7eef308072ad"},{"problem":20,"code":"(fn [sequence] (nth sequence (-(count sequence) 2)))","user":"5df28320e4b03c219ef1a35c"},{"problem":20,"code":"(fn bfg [x]\n(nth x (- (count x) 2)))","user":"60b5ecffe4b0e0fa5f1b4241"},{"code":"#(->> %1 (take-last 2) first)","problem":20,"user":"50facb80e4b07934dda8b0d2"},{"code":"#( second (rseq (vec %)))","problem":20,"user":"5002ad40e4b0678c553fc42b"},{"code":"(fn philm [x] (if (= 2 (count x)) (first x) (philm (rest x))))","problem":20,"user":"4f524d11e4b03ad3f0c10d34"},{"code":"#(let [n (count %)] (nth % (- n 2)))","problem":20,"user":"51b41150e4b0f094dd986fac"},{"problem":20,"code":"(fn abc [y]\n (loop [x y]\n(if (>= 2 (count x))\n(first x)\n(recur (rest x))))\n )","user":"526f670ce4b03e8d9a4a7365"},{"problem":20,"code":"(fn [xs]\n  (if (= 2 (count xs))\n    (first xs)\n    (recur (rest xs))))","user":"54ca31e9e4b057c6fda3a253"},{"code":"(fn [l] (nth l (- (.size l) 2)))","problem":20,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn [numbers] (nth numbers (- (count numbers) 2)))","problem":20,"user":"501c1b66e4b0539218e73b38"},{"code":"#(reduce (fn [x y] y) (butlast %))","problem":20,"user":"513b9bd0e4b0d8151c1c978d"},{"problem":20,"code":"(fn [a] \n         (if (> (count a) 1)\n           (nth a (- (count a) 2))))","user":"58455b05e4b089d5ab817e65"},{"code":"(fn foo [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4eb66737535d7eef3080736b"},{"problem":20,"code":"(fn second-to-last [[curr & items]]\n  (if (empty? (rest items))\n    curr\n    (recur items)))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":20,"code":"(fn [seq] (let [len (count seq)]\n            (nth seq (- len 2))))","user":"5cfabf53e4b0cc9c91588148"},{"problem":20,"code":"(fn [coll]\n  (let [amount (count coll)]\n    (nth coll (- amount 2))))","user":"5abba9ace4b073f1774426d6"},{"problem":20,"code":"#(loop [body %\n        last-one nil]\n       (if (empty? (rest body))\n               last-one\n               (let [[head & tail] body]    \n                 (recur tail head))))","user":"555aa525e4b0deb715856e47"},{"problem":20,"code":"(fn get-2nd-last\n  [s]\n  (let [[fst snd & tl] s]\n    (if (nil? tl) fst (get-2nd-last (cons snd tl)))))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"(fn mylast [x] (if (= (count x) 2) (first x) (mylast (rest x))))","problem":20,"user":"52745629e4b03e8d9a4a74a0"},{"code":"(fn [vector] (last (take 2 (reverse vector))))","problem":20,"user":"4f47d84fe4b0d56e7bb92bc3"},{"problem":20,"code":"#((comp second reverse) %1)","user":"57a182fde4b0c3d858beb8ed"},{"problem":20,"code":"(fn [[h n & tail]] (if (= nil tail) h (recur (cons n tail))))","user":"57e7ecc1e4b0bfb2137f5b05"},{"problem":20,"code":"(fn [seq]\n  (loop [seq seq]\n    (if (= (count seq) 2)\n      (first seq)\n      (recur (rest seq)))))","user":"547e64dee4b0c51c1f4d7309"},{"problem":20,"code":"#(first ( take-last 2 %))","user":"564b1f34e4b0284900eef662"},{"problem":20,"code":"(fn [xs]\n  (let [c (count xs)]\n    (first (drop (- c 2) xs)))\n  )","user":"555b672ce4b0deb715856e50"},{"code":"(fn [lst] (nth lst (- (count lst) 2)))","problem":20,"user":"4ee271e2535d10e5ff6f5369"},{"problem":20,"code":"(fn penultimate [l]\n  (second (reverse l))\n)","user":"54c82b27e4b045293a27f645"},{"code":"(fn [l] (let [n (count l)] (nth l (- n 2) ) ) )","problem":20,"user":"5267f871e4b03e8d9a4a7191"},{"problem":20,"code":"(fn [seq] \n  (let [list-length (count seq)]\n    (nth seq (- list-length 2))\n    ))","user":"5ba24b59e4b0a20761a233bf"},{"problem":20,"code":"(fn penultimate\n  [sequence] \n  (nth sequence \n    (-\n    (count sequence)\n    2)))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":20,"code":"(fn [items] (nth items (reduce (fn [result item] (dec result) ) (count items) (range 2)) ) )","user":"5c839a4de4b0c8042a70ce53"},{"problem":20,"code":"(fn [sequel](first(reverse(butlast sequel))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":20,"code":"(fn el [x] (nth x (- (count x) 2)))","user":"5be1fde4e4b0ed4b8aab4cab"},{"code":"(fn my-last [x] (nth x (- (count x) 2)))","problem":20,"user":"4f95900ce4b0dcca54ed6cd3"},{"code":"(fn [list] (last (drop-last list)))","problem":20,"user":"50717d87e4b0e3170b5a867a"},{"code":"(fn ll [x] (if (next (butlast x)) (recur (next x))(first x)))","problem":20,"user":"4f625200e4b0defedf855fcf"},{"code":"(fn [xs] (first (reduce (fn [x y] [(last x) y]) nil xs)))","problem":20,"user":"52199105e4b0c4ef0be82ff9"},{"code":"#(if (< (count %) 2) nil (nth % (- (count %) 2)))","problem":20,"user":"4f42c76fe4b0d7d3c9f3fd0e"},{"problem":20,"code":"(fn mysecond [myseq] (last (take (- (count myseq) 1) myseq )))","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [seqn]\n  (if (= (count seqn) 2)\n    (first seqn)\n    (recur (rest seqn))))","problem":20,"user":"4e8944b6535d4ef0aa30db98"},{"problem":20,"code":"(fn  [coll] (second (reverse coll)))","user":"52f00298e4b05e3f0be25ed8"},{"code":"(fn ndl [a] (if (seq (rest (rest a))) (ndl (rest a)) (first a)))","problem":20,"user":"50189302e4b029375d2a5057"},{"problem":20,"code":"(fn penultimate\n  [s]\n  (loop [sq s]\n    (if (= 2 (count sq))\n      (first sq)\n      (recur (rest sq)))))","user":"59512d5ce4b066ee0a44aea8"},{"problem":20,"code":"(fn [x] (last (drop-last x)))\n;;(fn [x] (nth x (- (count x) 2)))","user":"511d5247e4b022853b0e07a2"},{"problem":20,"code":"(fn [some-seq] \n  (loop [s some-seq] \n    (let [[f & r] s] \n      (if (= (count r) 1) \n        f \n        (recur r)))))","user":"56603c7fe4b068f2fe63dc49"},{"code":"(fn [items] (if (= (count items) 2) (first items) (recur (rest items))))","problem":20,"user":"507603bde4b0a894bb95bf3a"},{"code":"(fn t [x] (if (= (rest x) [(last x)]) (first x) (t (rest x))))","problem":20,"user":"4e39c710535deb9a81d77f45"},{"code":"(fn [c] \r\n  (let [[a b & r] c]\r\n    (if (empty? r) \r\n      a \r\n      (recur (rest c)))))","problem":20,"user":"4e111538535d04ed9115e7c3"},{"problem":20,"code":"(fn[coll](nth coll (dec (dec (count coll)))))","user":"5af361d4e4b0cc2b61a3bc83"},{"problem":20,"code":"(fn [s] (-> s butlast last))","user":"5609816ee4b0053d1b86c7e1"},{"code":"(fn toto [x] (if (= 2 (count x)) (first x) (toto (rest x))))","problem":20,"user":"511ba290e4b00c2a1fa7ff70"},{"problem":20,"code":"(fn [[x1 x2 & xs :as x]] (if xs (recur (rest x)) x1))","user":"5579bc24e4b05c286339e098"},{"problem":20,"code":"(fn [x] (let [iter #(if (next (rest %))\n                  (recur (rest %)) \n                  (first %))] \n      (iter x)))","user":"5d13af73e4b0902706380dbe"},{"problem":20,"code":"(fn last-2 [s]\n  (-> s reverse second))","user":"53b39d82e4b047364c0444a6"},{"problem":20,"code":"(fn\n  [coll]\n  (first (rest (reverse coll))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":20,"code":"(fn penult [ls] (if (= (rest (rest ls)) '()) (first ls) (penult (rest ls))))","user":"5ddae6cce4b0948ae9d9ada6"},{"problem":20,"code":"(fn pen [seq] (nth seq (- (count seq) 2)))","user":"573a0fc7e4b0cd1946bd1089"},{"code":"(fn penultimate [x] (get (vec x) (- (count x) 2)))","problem":20,"user":"532727bae4b09d4e7a9b54fa"},{"problem":20,"code":"#( first (rest (reverse %)) )","user":"59551e04e4b066ee0a44af20"},{"problem":20,"code":"(fn [x] \n  (let [[v & more] x]\n        (if (= 1 (count more)) v (recur more))\n  )\n)","user":"547e48bee4b0c51c1f4d7304"},{"problem":20,"code":"(fn second-last [lst]\n  (if (= 2 (count lst)) (first lst) (second-last (rest lst))))","user":"5d828b7ee4b0915913b1d382"},{"code":"(comp last reverse rest reverse)","problem":20,"user":"4f706cc3e4b07046d9f4eff7"},{"code":"(fn [blargh] (nth (reverse blargh) 1))","problem":20,"user":"4e690d86535d8ccf87e9fe96"},{"code":"(fn [arg] (first (rest (reverse arg))))","problem":20,"user":"51dd4326e4b0c33a4e1da402"},{"problem":20,"code":"(fn f [n] (if (= (count n) 2) (first n) (f (rest n))))","user":"5675f2f4e4b05957ce8c6153"},{"problem":20,"code":"(fn red2 [n]\n\t(if (= (count n) 2)\n\t\t(nth n 0)\n\t\t(red2 (rest n))))","user":"4f1b73a9535d64f60314647a"},{"code":"(fn [xs]\n  (first (take-last 2 xs)))","problem":20,"user":"526e5be8e4b03e8d9a4a731c"},{"problem":20,"code":"(fn [xx] (if (next (next xx)) (recur (next xx)) (first xx)))","user":"564cc055e4b0284900eef676"},{"code":"(fn [x](first (reverse (butlast x))))","problem":20,"user":"4fb42570e4b081705acca2ab"},{"problem":20,"code":"(fn [s]\n  (loop [tail s\n         sl nil\n         l nil]\n    (if (empty? tail)\n      sl\n      (recur (rest tail) l (first tail)))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":20,"code":"(fn pen [xs]\n  (let [c (count xs)]\n    (cond\n\t  (<= c 1) nil\n      (= c 2) (first xs)\n      true (recur (rest xs)))))","user":"51e24905e4b01e519814642e"},{"problem":20,"code":"(fn last-last [xs]\n    (if (= 2 (count xs))\n        (first xs)\n        (recur (rest xs))))","user":"55b5782ae4b01b9910ae2989"},{"problem":20,"code":"(fn [arr] (first (rest (reverse arr))))","user":"5a9e3698e4b0d174b936c7fc"},{"code":"(fn [lst]\r\n  (loop [[x1 x2 & xs] lst]\r\n    (if (empty? xs)\r\n        x1\r\n        (recur (cons x2 xs)))))","problem":20,"user":"4e1772b1535d04ed9115e7ee"},{"code":"(comp first (partial drop 1) reverse)","problem":20,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn \n        [seq]\n        (let\n            [f (fn [[h s &rest]] (or s h))]\n            (f (reverse seq))\n            ))","problem":20,"user":"5288b06de4b0239c8a67ae55"},{"code":"(fn [x] (peek (pop (vec x))))","problem":20,"user":"4e6def42535d5021c1a895f7"},{"code":"(fn second-last-bob \n  [data] \n  (nth data (- (count data) 2)))","problem":20,"user":"501d0321e4b066e56b9d0b1d"},{"code":"#(->> %\n  (reverse)\n  (drop 1)\n  (first))\n\n;; (comp last butlast)","problem":20,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn [x] (if (= (count (rest x)) 1) (first x) (recur (rest x))))","problem":20,"user":"4f0514b4535dcb61093f6bf0"},{"problem":20,"code":"(fn [lst]\n    (nth lst (dec(dec (count lst)))))","user":"5f74de11e4b02876ed9fd0a5"},{"problem":20,"code":";(fn [x] (first(rest(reverse x))))\n\n#(first(rest(reverse %)))","user":"57f2bf56e4b0511f1d294df8"},{"code":"(fn penultimate-element [xs]\n  (second (reverse xs)))","problem":20,"user":"518b8561e4b0f028e99addef"},{"problem":20,"code":"(fn second-to-last [ls]\n  (cond\n    (or (empty? ls) (< (count ls) 2)) nil\n    (= (count ls) 2) (nth ls 0)\n    :else (second-to-last (drop 1 ls))))","user":"5a786f6be4b013a48d39976e"},{"problem":20,"code":"(fn [s]\n  (nth s\n       (- (count s) 2)))","user":"57bdc167e4b05aa3c4741c57"},{"code":"(fn [a] (first (rest (reverse a))))","problem":20,"user":"4ebaa7d8535dfed6da9c6d68"},{"code":"(fn [sqnc] (first (pop (reverse sqnc))))","problem":20,"user":"5116afdee4b0063b4e3e16d5"},{"code":"(fn sec-lst [n] (nth n (- (count n) 2)))","problem":20,"user":"52c0e3d1e4b07a9af5792358"},{"problem":20,"code":"(fn [s]\n  (if (seq (rest (rest s)))\n    (recur (rest s))\n    (first s)))","user":"51803613e4b04f45bde7d8fd"},{"problem":20,"code":"(fn [my-seq]\n  (loop [x my-seq\n         rtn-ele nil]\n    (if (empty? (rest x))\n        rtn-ele\n      (recur (rest x) (first x))\n      )\n    )\n  )","user":"5b97c521e4b0c0b3ffbd4a9a"},{"code":"(fn [v]\n  (loop [f (first v), coll v]\n    (if (empty? (rest coll)) f\n      (recur (first coll) (rest coll)))))","problem":20,"user":"4edb6822535d10e5ff6f531b"},{"problem":20,"code":"(fn [sec] (nth sec (- (count sec) 2)))","user":"588906a9e4b0f1effa3b772a"},{"problem":20,"code":"(fn [data] (first (rest (reverse data))))","user":"5a135573e4b0ff51aa4b3180"},{"code":"(fn [x] (first ( pop (reverse x))))","problem":20,"user":"4e6cf521535de274dd8d818b"},{"code":"(fn secondLast [elements]\n  (second (reverse elements)))","problem":20,"user":"50fd9fd4e4b033b9c38d78d0"},{"code":"#( last( butlast % ))","problem":20,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":20,"code":"(fn nlast ([x] (nlast x 2)) ([x n] (if (= (count x) n)(first x)(nlast (rest x) n))))","user":"56e71333e4b02e7e935eb6d2"},{"code":"(fn [lst] (first (rest (reverse lst))))","problem":20,"user":"4e0febe6535d04ed9115e7be"},{"problem":20,"code":"(fn [s]\n  (loop [[elem & remaining] s]\n    (if (= 1 (count remaining))\n      elem\n      (recur remaining))))","user":"5f6f461ae4b02876ed9fd06f"},{"problem":20,"code":";#(nth % (-> % reverse count dec dec))\n\n(comp second reverse)","user":"55614155e4b0c656e3ff17c4"},{"code":"(fn penult [x] \n  (loop [pen x ult (next x)]\n    (if (next ult)\n      (recur (next pen) (next ult))\n      (first pen))))","problem":20,"user":"52d95ba3e4b09f7907dd13a6"},{"problem":20,"code":"(fn [x] (second (take-nth (- (count x) 2)  x)))","user":"60630af9e4b069485764ddbc"},{"problem":20,"code":"(fn llast [s] (or (and (= (rest (rest s)) '()) (first s)) (llast (rest s))))","user":"554a3303e4b0a04f79299573"},{"problem":20,"code":"(fn lastElement [x] (first (drop 1 (reverse x))))","user":"55e7e598e4b050e68259b498"},{"problem":20,"code":"(fn my-penultimate\n  [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      (second b)\n      (recur (rest a) (cons (first a) b)))))","user":"57f8153de4b0d3187e900916"},{"code":"(fn [[h & t]]\n  (if (= (count t) 1)\n    h\n    (recur t)))","problem":20,"user":"50a7f2a8e4b090657f4a5ce1"},{"problem":20,"code":"(fn [items] \n  (loop [[e1 & t1] items]\n    (let [[e2 & t2] t1] \n      (if (and t1 t2)\n        (recur t1)\n        e1\n))))","user":"5c1b82bce4b01240ff567211"},{"problem":20,"code":"(fn [lst]\n  (let [[a b & more] lst]\n    (if (= nil more)\n      a\n      (recur (cons b more)))))","user":"5d7bd68ee4b02e6b30c93554"},{"problem":20,"code":"(fn second-last[xs] (second (reverse xs)))","user":"6096e2d4e4b00e9e6653c3f1"},{"problem":20,"code":"(fn [col]\n (let [rest (rest col)\n       rest-next (next rest)]\n        (if rest-next\n         (recur rest)\n         (first col))))","user":"54580586e4b01be26fd74616"},{"code":"(fn [x] (if (= nil (next (next x))) (first x) (recur (next x))))","problem":20,"user":"525d95b1e4b0cb4875a45d81"},{"problem":20,"code":"(fn [a] (-> a (reverse) (rest) (first)))","user":"5a011305e4b01bb0ae8afd40"},{"problem":20,"code":"(fn take-penultimate\n  [x]\n  (cond\n    (< (count x) 2) (IllegalArgumentException. \"Need atleast 2 elements\")\n    () (nth x (dec (dec (count x))))\n    )\n\n  )","user":"5e035de0e4b0a607a9a45d5a"},{"problem":20,"code":"(fn penultimate [l] (if (= 2 (count l)) (first l) (penultimate (rest l))))","user":"59804b60e4b021a7a535fdcf"},{"problem":20,"code":"(fn get-last [l] (nth l (- (count l) 2)))","user":"6058591ae4b069ae89ce6af2"},{"problem":20,"code":"(fn second-last [xs] (nth xs (- (count xs) 2)))","user":"5442dddae4b032a45b869383"},{"problem":20,"code":"(fn [list]\n  (if (next (rest list))\n    (recur (next list))\n    (first list)))","user":"55842c7ee4b05c286339e11d"},{"problem":20,"code":"(fn get-penum [list] \n  (first\n    (pop\n      (reverse list))))","user":"59ece650e4b0249b72820795"},{"problem":20,"code":"(fn [coll] ( second(reverse coll)) )","user":"555292aae4b0deb715856df6"},{"code":"#(last (take 2 (reverse %)))","problem":20,"user":"4e7d2448535db169f9c796c8"},{"code":"( fn [seq] ( nth seq ( - (count seq) 2 ) ) )","problem":20,"user":"4ed51277535d10e5ff6f52d4"},{"problem":20,"code":"(fn [parameters] (second (reverse parameters)))","user":"5da874ede4b000c986472c23"},{"problem":20,"code":"(fn secondLast\n  [lst]\n  (nth lst (- (count lst) 2)))","user":"5e978fe5e4b0157ca96647d1"},{"code":"(fn [array] (second (reverse array)))","problem":20,"user":"51f12cc5e4b06a20a2523f37"},{"problem":20,"code":"(fn penultimate [args]\n  (second (reverse args)))","user":"5a754d36e4b0512ff01cdac7"},{"problem":20,"code":"(fn [l]\n  (first(rest (reverse l))))","user":"54fa1641e4b0cf870d9346fc"},{"code":"(fn [x] (second (reverse (seq x))))","problem":20,"user":"5116e176e4b0063b4e3e16d7"},{"problem":20,"code":"(fn [lst]\n (second(reverse lst)))","user":"57fc08d8e4b0d3187e900988"},{"problem":20,"code":"(fn [lista] (last (butlast lista)))","user":"553e2da3e4b0a04f792994ea"},{"problem":20,"code":"(fn [coll] (loop [[fst snd & tail] coll] (if (empty? tail) fst (recur (conj tail snd)))))","user":"54af500fe4b09f271ff37d06"},{"problem":20,"code":"(fn penultimate [x]\n  (nth x (- (count x) 2))\n       )","user":"55f1b704e4b06e875b46ce34"},{"code":"#( second ( reverse % ) )","problem":20,"user":"51baa933e4b0fe3ecfb4643a"},{"problem":20,"code":"(fn p [[x & [y & z :as w]]] (if (empty? z) x (p w)))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn pen [x] (nth x (dec (dec (count x)))))","problem":20,"user":"50fc3589e4b0d10d794c19f3"},{"problem":20,"code":"(fn mylast\n              ([[x y & re]] (if (nil? re) x (mylast (cons y re))))\n      )","user":"5f22dabbe4b0f565ad99828a"},{"problem":20,"code":"(fn [coll] (loop [x coll] (if (< (count x) 3) (first x) (recur (drop 1 x)))))","user":"5b2e6b02e4b025bcb146f2d3"},{"code":"(fn b4end [s] \n  (if (= (rest (rest s)) '()) \n    (first s) \n    (b4end (rest s))))","problem":20,"user":"4fc50441e4b081705acca36f"},{"problem":20,"code":"(fn [mylist] (second (reverse mylist)))","user":"5689c852e4b0dcc4269f4084"},{"code":";; #(first (rest (reverse %))) ;; first attempt\n(comp first rest reverse)","problem":20,"user":"52471ac0e4b05ef8e38e6354"},{"problem":20,"code":"(fn [x]\n    (if (= 2 (count x))\n      (first x)\n      (recur (rest x))))","user":"5eff4dc1e4b0cf489e8d7f0e"},{"problem":20,"code":"(fn plst [x]\n  (let [[h hh & rest] x]\n    (if (empty? rest) h (plst (cons hh rest))))\n  )","user":"577f9799e4b0d36ec5835e67"},{"code":"(fn [list]\n  (nth list\n    (- (count list) 2)))","problem":20,"user":"50270618e4b01614d1633feb"},{"problem":20,"code":"(fn [x]\n  (if \n    (<= (count x) 2) (first x)\n    (second (reverse x))))","user":"54d16453e4b0e8a36923e5e3"},{"problem":20,"code":"(fn [arg]\n  (second (reverse arg)))","user":"5bcee7d9e4b0e9689409ee22"},{"problem":20,"code":"(fn [se]\n  (first (take-last 2 se)))","user":"565ddeb9e4b068f2fe63dc2c"},{"problem":20,"code":"(fn penultimate_element [a-seq] \n  (second (reverse a-seq)))","user":"54527df5e4b0e397800069c2"},{"code":"(fn [%] (second (reverse %)))","problem":20,"user":"5008aed5e4b0144d4f561e3c"},{"problem":20,"code":"(fn sec [x] (nth x (- (count x) 2)))","user":"5a03c545e4b01bb0ae8afd89"},{"problem":20,"code":"(fn [lst]\n  (let [c (count lst)]\n    (get (into [] lst) (- c 2))))","user":"57994779e4b05b1deef9adbd"},{"problem":20,"code":"(fn second-to-last [coll]\n  (loop [prev nil, s coll]\n    (if (nil? (next s))\n      prev\n      (recur (first s) (next s))\n    )\n  )    \n)","user":"564ecc9ee4b0284900eef6a1"},{"problem":20,"code":"(fn second-last\n  [s]\n  (first (rest (reverse s)))\n)","user":"56ebfb93e4b04a395b9a042e"},{"problem":20,"code":"(fn [col] (nth (take-last 2 col) 0))","user":"5e3d183fe4b01d43a70e8e11"},{"code":"(fn[lst]\n  (nth lst\n       (- (count lst) 2)))","problem":20,"user":"52e42430e4b09f7907dd144c"},{"problem":20,"code":"(fn [arg] (nth arg (- (count arg) 2)) )","user":"574422cce4b009280f9f2b31"},{"problem":20,"code":"(fn [x] \n  (let [fst (first x)\n        rst (rest x)]\n    (if (= 1 (count rst))\n      fst\n      (recur rst))))","user":"58136dcfe4b0f478707a0610"},{"code":"(fn [lista] (first (rest (reverse lista))))","problem":20,"user":"5058afbbe4b06522596eba81"},{"problem":20,"code":"(fn [x] (let [rev (reverse x)]\n          (first \n          \t(rest rev)\n          )\n        )\n)","user":"552c1a0fe4b076ab5578f7d7"},{"problem":20,"code":"(fn mypen\n  [s]\n  (let [f (first s)\n        r (rest s)]\n    (if (= (count r) 1)\n      f\n      (recur r))))","user":"589ce536e4b00487982d5370"},{"code":"(fn penultimate [x] (second(reverse x)))","problem":20,"user":"5255324be4b0541d1855b9d0"},{"problem":20,"code":"(fn second-last-element\n  [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (second-last-element (rest x))))","user":"57109477e4b09c608db70435"},{"code":"(fn  [coll](last (butlast coll)))","problem":20,"user":"4f0d45de535d0136e6c22315"},{"code":"(fn [s]\n  (if (empty? (rest (rest s))) (first s)\n    (recur (rest s))))","problem":20,"user":"5029fccee4b023940c84aa47"},{"problem":20,"code":"(fn second-to-last [x]\n  (if (= (count x) 2)\n    (first x)\n    (recur (rest x))))","user":"557ba636e4b05c286339e0b6"},{"code":"(fn [x] (let [r (rest x)]\r\n (if (= [] (rest r))\r\n  (first x)\r\n  (recur r))))","problem":20,"user":"4ec953ba535d6d7199dd36fd"},{"code":"(fn [coll] (if (next (next coll)) (recur (next coll)) (first coll)))","problem":20,"user":"51696ee7e4b03f62cda68ce8"},{"problem":20,"code":"(fn return-second-to-last [x] (second (reverse x)))","user":"594d4c43e4b07ddc2dafae86"},{"code":"(fn mylast [a] (let [[fa sa & rst] a] (if (empty? rst) fa (mylast (rest a)))))","problem":20,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn[x](nth x (- (count x) 2)))","problem":20,"user":"4f871f6ae4b033992c121c57"},{"code":"(fn second-last [s]\n  (if (= (count s) 2)\n  (first s)\n  (second-last (rest s))))","problem":20,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [s]\n  (loop [[head & tail] s]\n    (if (= (count tail) 1)\n      head\n      (recur tail))))","problem":20,"user":"5313de03e4b08068f379ed10"},{"problem":20,"code":"(comp #(first (rest %)) reverse)","user":"55c313a0e4b0e31453f64986"},{"problem":20,"code":"(fn [s]\n    (if (next (next s))\n        (recur (next s))\n        (first s)))","user":"54fdaeace4b07d26eda61d39"},{"code":"(fn [x]  (second (reverse x)))","problem":20,"user":"4fc9cba3e4b0ee37620e1849"},{"problem":20,"code":"(fn [list] (reduce (fn [x y] y) (drop-last list)))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn next-to-last [sequence]\n  (first (pop (reverse sequence))))","problem":20,"user":"4ec27d48535dfed6da9c6dbb"},{"code":"#(last(drop-last 1 %))","problem":20,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":20,"code":"(fn [[n & more]]\n  (if (= 1 (count more)) n\n      (recur more)))","user":"550c84eae4b06e50f9beb151"},{"code":"#(nth (reverse %1 ) 1)","problem":20,"user":"4ffbb1c7e4b0678c553fc3d3"},{"problem":20,"code":"(fn [col] \n  (->> col\n   \t   (reverse)\n       (rest)\n       (first)))","user":"54fce8bde4b07d26eda61d30"},{"problem":20,"code":"#(nth % (dec(dec (count %))) )","user":"54ef7568e4b024c67c0cf885"},{"problem":20,"code":"(fn [s] \n  (loop [s s]\n    (if (= (count s) 2)\n      (first s)\n      (recur (rest s)))))","user":"5647ffdae4b0284900eef626"},{"code":"(fn hallo [x] (if(= (count x) 2) (first x) (hallo (rest x))))","problem":20,"user":"4e7217c5535d5021c1a89659"},{"code":"#( nth % (- (count % ) 2))","problem":20,"user":"4f39493be4b0e243712b1ee9"},{"code":"(fn not-last [s]\n  (if (= 2 (count s))\n  (first s)\n  (not-last (rest s))\n  )\n)","problem":20,"user":"4faacc04e4b081705acca201"},{"problem":20,"code":"(fn [lst] (.get lst (dec (dec (count lst)))))","user":"5613c76ce4b05f002753dfa7"},{"problem":20,"code":"(fn [s] (cond (empty? (rest (rest s))) (first s) :else (recur (rest s))))","user":"5cd26163e4b0ccb0619628fe"},{"problem":20,"code":"(fn check [x] (last (butlast x)))","user":"580014d7e4b0a837a8b30c32"},{"problem":20,"code":"(fn get-2ndlast [s] \n  (if (= (count s) 2) \n    (first s)\n    (recur (rest s))\n  )\n)","user":"5cc1584de4b0ccb0619627ad"},{"problem":20,"code":"(fn [l] (if (empty? (nnext l)) (first l) (recur (rest l))))","user":"52138dd7e4b0d32679a5065d"},{"code":"(fn kkk [ls]\r\n  (if (nil? (nnext ls))\r\n    (first ls)\r\n    (kkk (rest ls))))","problem":20,"user":"4dd62278535d2dad7130b5c7"},{"problem":20,"code":"(fn l [x] (if (= (count x) 2)(first x)(l (rest x)) ))","user":"55599ae4e4b0deb715856e3a"},{"code":"(fn [seq] (if (= 2 (count seq))\n            (first seq)\n            (recur (rest seq))))","problem":20,"user":"534803c0e4b084c2834f4a51"},{"problem":20,"code":"(fn get-last [xs]\n   (if (= (count xs) 2)\n     (first xs)\n     (get-last (rest xs))))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"#(first \r\n  (next (reverse %)))","problem":20,"user":"4df0f863535d08e6dec9fe19"},{"problem":20,"code":"#(->> %1 (reverse) (second))","user":"58f49268e4b0438e51c2cec0"},{"problem":20,"code":"(fn \n  [[head & tail]] \n  (if ( = 1 (count tail)) head\n    (recur tail)))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":20,"code":"(fn [x] (nth (reverse x) 1 ) )","user":"5476894ce4b0c51c1f4d72a6"},{"code":"(fn [x] (last (drop-last 1 x)))","problem":20,"user":"4f4fd593e4b03ad3f0c10cec"},{"problem":20,"code":"(fn penult\n  [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (recur (rest xs))))","user":"55355397e4b09218d5f44fae"},{"problem":20,"code":"(fn s-l [s] (second (reverse s)))","user":"55450be8e4b0a04f7929952d"},{"problem":20,"code":"(fn [seq]\n  (loop [f (first seq)\n         r (rest seq)]\n    (if (= 1 (count r))\n      f\n      (recur (first r) (rest r)))))","user":"58fff18be4b0438e51c2d00c"},{"problem":20,"code":"(fn[x] (first (rest ( reverse x))))","user":"546b89ffe4b00cfc9eacc16d"},{"problem":20,"code":"(comp second reverse)\n\n;; previous attempt also valid: (comp first rest reverse)","user":"55702081e4b09a3098a52529"},{"problem":20,"code":"(fn [myseq] (nth myseq (- (count myseq) 2)))","user":"56e078e7e4b0ca2494a09609"},{"code":"(fn [x]\n  (loop [l x]\n    (if (= (count l) 2)\n      (first l)\n      (recur (rest l)))))","problem":20,"user":"52b9c62ce4b07a9af57922c3"},{"problem":20,"code":"(fn l [x] (if (< 2 (.size x)) (l (rest x)) (first x)))","user":"5caf9a07e4b026601754b899"},{"code":"(fn secondlast[x] (first (rest (reverse x))))","problem":20,"user":"4fe65108e4b0e8f79898fed3"},{"problem":20,"code":"(fn get-p [x] ((vec x) (- (count x) 2)))","user":"5632365ce4b0bfe05bf1179d"},{"problem":20,"code":"(fn [[x y & xs]]\n\t (if (nil? xs)\n\t   x\n\t   (recur (cons y xs))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":20,"code":"#(last (first (reduce (fn [a n] [a n]) 0 %)))","user":"5641418fe4b08d4f616f5ef7"},{"code":"(comp #(nth % 1) reverse) ;I blame my looking at austintaylor's solution for the last problem","problem":20,"user":"4fceef7ae4b03432b189f40a"},{"code":"(fn [elems] (second (reverse elems)))","problem":20,"user":"4e03b010535d04ed9115e794"},{"code":"(fn [ls] (if (> (count ls) 2) (recur (rest ls)) (first ls)))","problem":20,"user":"51bd8c53e4b0ff155d51d2b2"},{"problem":20,"code":"(fn [coll]\n  (->> (reverse coll)\n       (take 2)\n       (reverse)\n       (first)))","user":"5db35c6ee4b010eb3c36cd20"},{"code":"(fn [l] (first (last (partition 2 1 l))))","problem":20,"user":"4fe893d3e4b07c9f6fd12c4e"},{"code":"(fn vipa [list]\n  (cond\n    (= (count list) 2) (first list) \n    :else (vipa (rest list))\n))","problem":20,"user":"5252cbe7e4b0541d1855b8d2"},{"problem":20,"code":"(fn [foo]\n  (-> foo\n  reverse\n  rest\n  first))","user":"5537cbaee4b09218d5f44fd3"},{"problem":20,"code":"#(nth % (- (count %) 2)  )","user":"54e4edcae4b024c67c0cf7f3"},{"problem":20,"code":"(comp #(nth %1 1 ) reverse)","user":"542cb9d0e4b0dad94371f2ac"},{"problem":20,"code":"(fn [coll] (nth coll (-(count coll) 2)))","user":"56004deee4b04bb52996e164"},{"code":"(fn [items] (second (reverse items)))","problem":20,"user":"51177fbce4b0e0897831a60b"},{"code":"(fn foo [x] (first (rest (reverse x))))","problem":20,"user":"4ec3072a535dcc7ae8597d50"},{"problem":20,"code":"#(->   % reverse rest first)","user":"563f2eaae4b08d4f616f5ed1"},{"problem":20,"code":"(fn [seq] (peek (pop (vec seq))))","user":"5bc352abe4b07a9b28b10041"},{"problem":20,"code":"(fn end [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n  (end (rest s))))","user":"5482ad36e4b0e286459a1182"},{"problem":20,"code":"(fn [s]\n  (-> s\n      reverse\n      rest\n      first))","user":"5ff8c2eae4b06df49cee14a9"},{"problem":20,"code":"(fn [some-list]\n  (second (reverse some-list)))","user":"56acfee5e4b03c432f18734f"},{"problem":20,"code":"(fn [elements]\n  (nth elements\n       (- (count elements) 2)))","user":"5cbcacc2e4b026601754b9ed"},{"problem":20,"code":"(fn [xs] (nth xs ( - (count xs) 2)))","user":"5f63cde9e4b02876ed9fd015"},{"code":"#(first (reverse (take 2 (reverse %))))","problem":20,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(comp second reverse)\r\n\r\n;#(nth (reverse %) 1)\r\n\r\n;(fn penul [li]\r\n;  (loop [l li]\r\n;    (if (empty? (rest (rest l)))\r\n;      (first l)\r\n;      (recur (rest l)))))","problem":20,"user":"4f07c8c3535dcb61093f6c2d"},{"code":"(fn [[x & [y & more]]]\n  (if more\n    (recur (conj more y))\n    x))","problem":20,"user":"4f1de175535d64f60314648f"},{"problem":20,"code":"(fn [seq]\n  (loop [[first & rest] seq]\n    (if (= (count rest) 1)\n      first\n      (recur rest))\n    ))","user":"52a803cee4b0c58976d9ac26"},{"problem":20,"code":";#(second (reverse %))\n\n#(-> % reverse second)","user":"58ebcabee4b056aecfd47d48"},{"code":"#(nth (reverse %)1)","problem":20,"user":"4fe9efe5e4b0547ebccb247a"},{"problem":20,"code":"(fn [x] \n  (first (rest (reverse x)))\n  )","user":"5af39788e4b0cc2b61a3bc8a"},{"problem":20,"code":"#(nth % (dec (count (pop %))))","user":"5fa58531e4b0fa27300f3dc6"},{"problem":20,"code":"#(loop [i %]\n   (if (> (count i) 2)\n        (recur (rest i)) (first i)))","user":"5c481764e4b0e06e1360a3ba"},{"problem":20,"code":"(fn [args]\n  (let [[x & more] args]\n    (if (= (count more) 1)\n      x \n      (recur more))))","user":"5869ac44e4b0f14aab7c88ab"},{"problem":20,"code":"#(-> (vec %) (pop) (peek))","user":"56f18a1ae4b04a395b9a0495"},{"problem":20,"code":";#(first (rest (reverse %)))\n\n; #(second (reverse %))\n\n(comp second reverse)","user":"5465febde4b01be26fd746e1"},{"problem":20,"code":"(fn [lst] (if (= '() (rest (rest lst))) (first lst) (recur (rest lst))))","user":"573d8658e4b05c31a32c0814"},{"code":"(fn f [[x & xs]] (if (next xs) (f xs) x))","problem":20,"user":"50eafeaae4b0346a3e988cbb"},{"problem":20,"code":"(fn \n      [l] \n      (loop [result nil rem l]\n        (if (= (count rem) 1)\n          result\n          (recur (first rem) (rest rem)))))","user":"5e9a3814e4b0157ca96647e7"},{"code":"(fn [l] (-> l reverse (nth 1)))","problem":20,"user":"4ee11d37535d10e5ff6f5353"},{"problem":20,"code":"(fn [x] (if (= 2 (count x))\n          (first x)\n          (recur (rest x))))","user":"5615326de4b05f002753dfc3"},{"problem":20,"code":"(fn x [lst]\n    (if (empty? lst) nil\n                   (if (= (count lst) 2) (first lst)\n                                         (x (rest lst)))))","user":"5bbbcecee4b0a20761a23611"},{"problem":20,"code":"(fn plaste [s] (if (next (next s))\n                    (plaste (next s))\n                    (first s)\n                    ))","user":"54bc0b0ee4b0ed20f4ff6ec7"},{"problem":20,"code":"#(-> % reverse second)\n;#(nth % (- (count %) 2))","user":"5787ce76e4b0ebec4cfb750e"},{"problem":20,"code":"(fn [lst]\n  (let [len (count lst)]\n   \t(nth lst (- len 2))\n   )\n)","user":"54cdf667e4b057c6fda3a2a8"},{"code":"(fn l [[a & b]] (if (= 1 (count b)) a (l b)))","problem":20,"user":"53908e6be4b0b51d73faae9a"},{"problem":20,"code":"(fn [coll] (first (rest (reverse (vec coll)))))","user":"5bbdd136e4b07a9b28b0ffab"},{"problem":20,"code":"#(if (empty? (rest (rest %)))\n             (first %)\n             (recur (rest %))\n             )","user":"54903056e4b0b312c081ff2e"},{"code":"(fn [x] (first (pop (reverse x))))","problem":20,"user":"4f3b97c7e4b0e243712b1f30"},{"code":"(fn [s] (last (butlast s)))","problem":20,"user":"4ea092f4535d7eef308072a6"},{"code":"(fn [c]\n  (nth c (- (count c) 2)))","problem":20,"user":"526e0831e4b03e8d9a4a7305"},{"problem":20,"code":"(fn secondtolast [s] (nth (reverse s) 1))","user":"55f80372e4b06e875b46ceb9"},{"problem":20,"code":"(fn [c] (last (butlast c)))","user":"561047eae4b05f002753df6d"},{"code":"#(nth % (- (count % ) 2))","problem":20,"user":"4f030a60535dcb61093f6a48"},{"problem":20,"code":"(fn peni [xs]\n  (if (= (rest xs) (list (last xs)))\n    (first xs)\n    (peni (rest xs))))","user":"595c3782e4b066ee0a44aff2"},{"code":"(fn [coll]\n  (last (butlast coll)))","problem":20,"user":"4f7ab8c7e4b06e829148e19c"},{"code":"(fn pen [sq]\n  (if (= '() (rest (rest sq)))\n      (first sq)\n      (pen (rest sq))))","problem":20,"user":"4ea09749535d7eef308072a8"},{"problem":20,"code":"(fn xx [x]\n  (.get x (- (count x) 2))\n  )","user":"5f693778e4b02876ed9fd03f"},{"code":"(fn [list] \n      (if (= 2 (count list)) \n        (first list) \n        (recur (rest list))))","problem":20,"user":"5311b367e4b08068f379eced"},{"problem":20,"code":"(fn [collection]\n  (second (reverse collection)))","user":"54a1d047e4b09f271ff37c4f"},{"problem":20,"code":"(fn last-char [x] (nth x (- (count x) 2)))","user":"545a7991e4b01be26fd7463e"},{"code":"#(nth % \n\t(- (count %) \n        2)\n)","problem":20,"user":"52c118fee4b07a9af579235f"},{"code":"(fn [s]\n  (second (reverse s))\n  )","problem":20,"user":"52c45793e4b0c2d177d620d7"},{"problem":20,"code":"(fn penultimate\n  [coll]\n  (let [size (count coll)]\n    (if (> size 1)\n      (nth coll (- size 2))\n      coll)))","user":"55fb04e0e4b0f488688e0657"},{"problem":20,"code":"(fn mylast [s] (if (= (count s )2) (nth s 0) (mylast (rest s))))","user":"579ade84e4b05b1deef9ade4"},{"problem":20,"code":"(fn sndlst [xs] (first (drop 1 (reverse xs))))","user":"58c623dbe4b021aa9917ed4b"},{"problem":20,"code":"(fn [s]\n  (let [[x _ & y] s]\n    (if y\n      (recur (rest s))\n      x\n    )\n  )\n)","user":"5a47551de4b05d388ecb6b54"},{"problem":20,"code":"(fn [s]\n  (loop [s s]\n    (if (== (count s) 2)\n      (first s)\n      (recur (rest s)))))","user":"5a805f7ee4b00b71e582a04d"},{"problem":20,"code":"(fn [[x _ & xs :as nums]] (if (nil? xs) x (recur (rest nums))))","user":"5315ba94e4b08068f379ed34"},{"problem":20,"code":"#(if (next (next %)) \n   (recur (next %))\n   (first %))","user":"5600591de4b04bb52996e166"},{"problem":20,"code":"(fn [first_element] (second (reverse first_element)))","user":"539f6f1de4b0ca733b97449a"},{"code":"(fn plast [x] (first (rest (reverse x))))","problem":20,"user":"5071f3b4e4b0e3170b5a8686"},{"problem":20,"code":"(fn [x]\n  (if (<= 2 (count x)) \n    (nth (reverse x) 1)))\n  ;(if (= 1 (count x))\n  ;  (nth (reverse x) 0)))","user":"55c216dde4b0e31453f64974"},{"problem":20,"code":"(fn second-last [coll]\n  (->> coll (take-last 2) (first)))","user":"5e52f245e4b027a2e10ac0e1"},{"problem":20,"code":"(fn f [s]\n  (if (= 2 \n         (reduce (fn [x y] (+ x 1)) 0 s))\n    (first s)\n    (f (next s))))","user":"58f95c50e4b0438e51c2cf4a"},{"problem":20,"code":"#(loop [n %]\n   (let [i (first n) j (next n)]\n     (if (nil? (next j))\n       i\n       (recur j)\n     )\n   )\n )","user":"5bb23cf1e4b0a20761a2350a"},{"code":"(fn [items] (first (rest (reverse items))))","problem":20,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn [s]                                                                       \n  (loop [s2 s]                                                                             \n    (if (= 1 (count (rest s2)))                                                                \n      (first s2)                                                                        \n      (recur (rest s2)))))","problem":20,"user":"4e360072535deb9a81d77f30"},{"problem":20,"code":"(fn\n  [seqn]\n  ((comp first rest reverse) seqn))","user":"5ed6e0eee4b016b56eae05e4"},{"problem":20,"code":"(fn f20\n  [s]\n  (-> s\n      (butlast)\n      (last)))","user":"5bd75870e4b0ed4b8aab4bc0"},{"code":"(fn [s]\n  (first (next (reverse s))))","problem":20,"user":"4f1473eb535d64f603146439"},{"code":"(fn [x] (loop [x x] (if (= 2 (count x)) (first x) (recur (rest x)))))","problem":20,"user":"515ef58be4b02c55805ea237"},{"code":"(fn [coll]\n  (if (empty? (rest (rest coll)))\n    (first coll)\n    (recur (rest coll))))","problem":20,"user":"5252ee94e4b0541d1855b8db"},{"problem":20,"code":"(fn [_seq_]\n  (nth _seq_ (- (count _seq_) 2))\n  )","user":"578acd37e4b0ebec4cfb7541"},{"code":"(fn penUltimate [x]\n  (nth x  (- (count x) 2))    )","problem":20,"user":"52602acde4b03e8d9a4a7032"},{"problem":20,"code":"(fn [a] ( nth (reverse a) 1) )","user":"54c937f0e4b045293a27f664"},{"problem":20,"code":"(fn [vect] (nth vect (- (count vect) 2)))","user":"5d63b06be4b0c9e5857d5025"},{"code":"(fn hey [x] \n  (if\n    (empty? (rest (rest x)))\n    (first x)\n    (hey (rest x))))","problem":20,"user":"52e17e66e4b09f7907dd1423"},{"problem":20,"code":"(comp second reverse)\n;#(-> % reverse second)","user":"572830e6e4b0c5bde472c152"},{"problem":20,"code":"(fn recpen [a]\n  (if (= 2 (count a))\n    (first a)\n    (recpen (rest a))))","user":"55b738cfe4b01b9910ae29a1"},{"code":"(fn [coll]\n  (first (drop (- (count coll) 2) coll)))","problem":20,"user":"515c6132e4b069911535cf0d"},{"problem":20,"code":"; #(last (take (dec (count %)) %))\n; or\n; #(first (rest (reverse %)))\n; or\n(comp first rest reverse)","user":"5054d243e4b0b1b9d1860eb5"},{"problem":20,"code":"#(let [[a & b] (reverse %) [c & d] b] c)","user":"5de707a5e4b0986d99407f73"},{"code":"#(first (reverse (take (- (count %) 1) %)))","problem":20,"user":"4f2a1b5be4b0d6649770a038"},{"code":"(fn sl ([sequ] (first (rest (reverse sequ)))))","problem":20,"user":"5344a0efe4b084c2834f4a2d"},{"problem":20,"code":"(fn [xs]\n  (loop [[y1 y2 & ys* :as ys] xs]\n    (if (seq ys*)\n      (recur (rest ys))\n      y1)))","user":"5644bf88e4b0284900eef5fc"},{"problem":20,"code":"(fn [ls] (-> ls reverse (nth 1)))","user":"54db48f6e4b024c67c0cf760"},{"code":"(fn [x] (nth x (dec (dec (count x)))))","problem":20,"user":"4e5ea1a9535d8a8b8723a2d3"},{"problem":20,"code":"(fn [s]\n  (let [max-size (count s)]\n    (loop [index max-size]\n      (if (> index (- max-size 2))\n        (recur\n          (dec index))\n        (nth s index)))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [z] (nth z (- (count z) 2)))","problem":20,"user":"53749685e4b06d7f452d9e23"},{"code":"#(peek (vec (drop-last %)))","problem":20,"user":"504e4035e4b0f6ff3350c490"},{"code":"#(-> %1 reverse rest first)","problem":20,"user":"4eb13d60535d7eef3080733f"},{"problem":20,"code":"(fn get-penultimate [coll]\n  (nth coll \n       (- (count coll) 2)))","user":"5dd00246e4b0948ae9d9ad45"},{"code":"(fn [l] (if (= (rest (rest l)) '()) (first l) (recur (rest l))))","problem":20,"user":"4ed2b168535d44c135fd68dd"},{"problem":20,"code":"(fn [coll]\n  (loop [c coll]\n    (if (= (count (rest c)) 1)\n      (first c)\n      (recur (rest c)))))","user":"561a9380e4b053970a773b07"},{"code":"(fn second-to-last [coll]\n  (if (= 1 (count (rest coll)))\n    (first coll)\n    (second-to-last (rest coll))))","problem":20,"user":"51fbeddae4b0f1313d468a16"},{"problem":20,"code":"(fn [s]\n  (cond\n   (empty? (rest (rest s))) (first s)\n   :else (recur (rest s))))","user":"5a616fd2e4b0512ff01cd974"},{"problem":20,"code":"(fn [l] (if (= (count l) 2) (first l) (recur (rest l))))","user":"57061d20e4b0b0fb43fd0679"},{"problem":20,"code":"(fn [x] (first (rest (reverse (seq x)))))","user":"567dbfe0e4b05957ce8c61cc"},{"code":"(fn penult [x] (if (= (rest x) (list (last x))) (first x) (penult (rest x))))","problem":20,"user":"50a00725e4b08df8156e9e46"},{"problem":20,"code":"(fn dfs [x]\n     (if (empty? (next (next x)))\n       (first x)\n       (dfs (next x))))","user":"56669819e4b0e91d5f5c5674"},{"code":"#(first( rest( reverse %)))","problem":20,"user":"50d3317ee4b049d4ed5650da"},{"code":"(fn [coll]\n  (\n    \n  (fn [coll prev]\n      (if-let [re (next coll)]\n         (recur re (first coll) )\n          prev\n      )\n  )\n  coll nil\n  )\n    \n  )","problem":20,"user":"4f03154a535dcb61093f6a58"},{"problem":20,"code":"(fn [x] \n    (nth x (- (count x) 2))\n)","user":"5a3e8445e4b0447ef91cc5b4"},{"problem":20,"code":";;#(second (reverse %))\n#(first(rest(reverse%)))","user":"5edb07dde4b0c7845d86b0ed"},{"code":"(fn pen [x] (nth x (- (count x) 2)))","problem":20,"user":"4e6ac593535d8ccf87e9ff02"},{"problem":20,"code":"#(->\n%\nreverse\npop\nfirst)","user":"608335a4e4b0736b099e42e3"},{"problem":20,"code":"(fn [a-seq]\n  (if (<= (count a-seq) 2)\n    (first a-seq)\n    (recur (rest a-seq))))","user":"53fd0a22e4b0de5c418485e1"},{"problem":20,"code":"#(-> % \n     reverse\n     second)\n\n;; #(nth (reverse %1) 1)\n\n;;(fn [collection] \n;;  (nth (reverse collection) 1)\n;;  )","user":"570577bbe4b0b0fb43fd0672"},{"problem":20,"code":"(fn [coll]\n  (loop [c coll]\n    (if (= (rest (rest c)) '())\n      (first c)\n      (recur (rest c)))))","user":"6056f58fe4b069ae89ce6adf"},{"code":"(fn [xs] (first (take-last 2 xs)))","problem":20,"user":"517d755ce4b0f5e87c18f263"},{"code":"(fn [elems]\n  (second (reverse elems)))","problem":20,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [x] (if (= '() (rest (rest x))) (first x) (recur (rest x))))","problem":20,"user":"4fb2101ce4b081705acca284"},{"problem":20,"code":"(fn [thing] (last (drop-last thing)))","user":"60744cb0e4b069485764de47"},{"code":"#(-> % reverse (nth 1))","problem":20,"user":"4ec4ac86535dcc7ae8597d64"},{"code":"(fn [x] (last(take 2(reverse x))))","problem":20,"user":"51a7ff35e4b08d8ec191b804"},{"code":"(fn f [l] (if (= (rest (rest l)) []) (first l) (f (rest l))))","problem":20,"user":"4f369deae4b0e243712b1ecb"},{"problem":20,"code":"(fn penultimate [myseq] (nth myseq (- (count myseq) 2)))","user":"56e42a30e4b03a7c14b85a49"},{"code":"(fn penultimate [x] \n (if (< 2 (count x))\n  (penultimate (rest x))\n  (first x)\n )\n)","problem":20,"user":"4ea08b30535d7eef308072a5"},{"problem":20,"code":"(fn [s]\n  (if (= '() (rest (rest s))) \n    (first s) \n    (recur (rest s))))","user":"5ea5f08ce4b00a66d4a951aa"},{"code":"#(->> % clojure.core/reverse (drop 1) first)","problem":20,"user":"50045388e4b0678c553fc44e"},{"problem":20,"code":"#(-> %\n     vec\n     pop\n     last)","user":"54084089e4b0addc1aec66c7"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2)  ))","user":"587004f2e4b01531a375e9d9"},{"code":"(fn \n   [x] \n   (first (rest (reverse x))))","problem":20,"user":"5244380fe4b076204b44fb12"},{"code":"(fn [elements]\n   (nth elements (- (count elements) 2))\n   )","problem":20,"user":"5106dc1be4b01150e115ebf0"},{"code":"#(second (reverse %1))","problem":20,"user":"4e76ba46535d324fb2983d6d"},{"problem":20,"code":"(fn secondlast [x] (second (reverse x)))","user":"573ce085e4b05c31a32c080a"},{"problem":20,"code":"(fn [x] (last(take 2 (reverse x))))","user":"575b1d07e4b02ea114799359"},{"code":"(fn _ [x] (nth x  (- (count x) 2)) )","problem":20,"user":"5115c7e4e4b0ce5098ee73c2"},{"problem":20,"code":"(fn [lst]\n  (loop [l lst]\n    (if (= 2 (count l))\n      (first l)\n      (recur (rest l)))))","user":"55c68089e4b0e31453f649c4"},{"problem":20,"code":"#(first( next (reverse % )))","user":"57348a51e4b0cd1946bd100d"},{"problem":20,"code":"(fn last-element\n  [sequence]\n  (.get sequence (dec (dec (count sequence)))))","user":"5f1b6e88e4b0f565ad998259"},{"code":"(fn [s]\n  (if (next (next s))\n    (recur (next s))\n    (first s)\n  )\n)","problem":20,"user":"50d3ec8be4b030b634c368bb"},{"problem":20,"code":"#(-> %\n     reverse\n     (nth 1))","user":"5851b51be4b0b7285a6f4e99"},{"problem":20,"code":"(fn appa [x] (if (next (next x)) (appa (rest x)) (first x)))","user":"5c298c79e4b07e362c2305de"},{"code":"(fn penultimate [x] (second (reverse x)))","problem":20,"user":"4e6698b9535d8ccf87e9fe7a"},{"code":"#(nth (rseq (vec %)) 1)","problem":20,"user":"4e6cf2be535de274dd8d818a"},{"problem":20,"code":"(fn last-but-one-element [x] (nth x (- (count x) 2)))","user":"55b1c24ae4b0da326a65cf70"},{"problem":20,"code":"(fn test2 [coll] (last (butlast coll)))","user":"58f60c5ae4b0438e51c2cee8"},{"code":"(fn second-to-last [x]\n  (nth x (- (count x) 2)))","problem":20,"user":"4f0324d2535dcb61093f6a69"},{"code":"(fn [s]\n    (if-let [n (next s)]\n      (if (next n) (recur n) (first s)) \n      (first s)))","problem":20,"user":"4ebe766d535dfed6da9c6d94"},{"problem":20,"code":"#(reduce (fn [x y] y) (take (dec (count %)) %))","user":"580e4848e4b0849f6811b750"},{"problem":20,"code":"(fn [x]\n  (if (>= (count x) 2)\n    (nth x (- (count x) 2))\n    (first x)))","user":"608fac60e4b03bd49d9f36c7"},{"problem":20,"code":"(fn [[x _ & z :as all]] (if z (recur (rest all)) x))","user":"55deeface4b050e68259b3ea"},{"problem":20,"code":"(fn [lst] (nth lst (dec (dec (count lst)))))","user":"5bb314d3e4b0a20761a23519"},{"problem":20,"code":"#(-> %1 (reverse) (nth 1))","user":"55e1ddf7e4b050e68259b422"},{"code":"#(second (reverse %))\n;;(comp second reverse)","problem":20,"user":"4ff54bfbe4b0678c553fc369"},{"problem":20,"code":"#(let [f (first %) r (rest %)] (if (empty? (rest r)) f (recur r)))","user":"58767e82e4b01531a375ea85"},{"problem":20,"code":"(fn [input-list] (second (reverse input-list)))","user":"5db9fb8ae4b010eb3c36cd5a"},{"code":"#(first(drop 1 (reverse %)))","problem":20,"user":"4ea1ecfa535d7eef308072bb"},{"problem":20,"code":"(fn [v] (first (take-last 2 (sort v))))","user":"5758e39be4b02ea114799313"},{"code":"(fn [l] (if (= 2 (count l))\n                (first l)\n                (recur (rest l))))","problem":20,"user":"518279abe4b0353c468deb65"},{"problem":20,"code":"(\n fn myfunc [a] (\n                nth (reverse a) 1\n                )\n  \n  )","user":"548018e8e4b0c51c1f4d7333"},{"problem":20,"code":"(fn my-pen [ls]\n  (if (= (rest ls) (list (first (rest ls)))) (first ls)\n    (recur (rest ls))))","user":"55b2f8a9e4b01b9910ae2970"},{"code":"(\n\tfn secondToLast [x] (\n    \tsecond (reverse x)\n    )\n)","problem":20,"user":"527ea24ae4b0757a1b1713ad"},{"code":"(fn [[x y & xs :as coll]]\n  (if (empty? xs) x (recur (rest coll))))","problem":20,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [list]\n  (if (= '() (rest (rest (seq list))))\n    (first (seq list))\n    (recur (rest (seq list)))))","problem":20,"user":"4f036894535dcb61093f6aad"},{"problem":20,"code":"(fn [coll]\n  (-> coll (drop-last) (last)))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [xs] (first (drop 1 (reverse xs))))","problem":20,"user":"4e9c66e2535dbda64a6f6b7f"},{"code":"(fn a [b] (nth b (- (count b) 2)))","problem":20,"user":"4e8dbab3535d65386fec2139"},{"problem":20,"code":"(fn[x] (first (filter #(= (.indexOf x %) (- (count x) 2)) x)) )","user":"52be0fd7e4b07a9af5792314"},{"code":"(fn [xs]\n  (if (empty? (rest xs))\n    nil\n    (if (empty? (rest (rest xs)))\n      (first xs)\n      (recur (rest xs))\n  \t)\n  )\n\n)","problem":20,"user":"528432b6e4b0239c8a67adc7"},{"code":"(fn f1 [x] (if (= (rest (rest x)) ()) (first x) (f1 (rest x))))","problem":20,"user":"4ed6ac40535d10e5ff6f52e4"},{"code":"(fn f [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"4e1e1576535d04ed9115e806"},{"problem":20,"code":"#(let [index (dec (dec (count %)))] (nth % index))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn myfunc [x] (if (= '() (rest (rest x))) (first x) (myfunc (rest x))))","problem":20,"user":"52e18377e4b09f7907dd1425"},{"problem":20,"code":"#(-> %\n     reverse\n     rest\n     first)","user":"56182af3e4b06b1bb2182a1b"},{"problem":20,"code":"(fn [s] ( nth (reverse s) 1))","user":"56d439d4e4b0ea9b8538f7b6"},{"code":"(fn x [[a b & more]]\n  (if more\n    (recur (cons b more))\n    a))","problem":20,"user":"50344a56e4b062bc5d7ae162"},{"code":"(fn [elts] (nth elts (- (count elts) 2)))","problem":20,"user":"516abecae4b081287f204e9f"},{"problem":20,"code":"(fn [col]\n  (if (-> col rest rest empty?)\n    (first col)\n    (recur (rest col))))","user":"5d8f4c78e4b0915913b1d3f0"},{"problem":20,"code":"(fn [l] (second (reverse l)) )","user":"5a6a2515e4b0512ff01cda21"},{"problem":20,"code":"(fn [items] \n  (first \n   (rest \n    (reverse items))))","user":"5d714979e4b04d129b00f2df"},{"problem":20,"code":"(fn [c]\n  (if (> (count c) 2)\n    (recur (rest c))\n    (first c)))","user":"5aea2d21e4b0cc2b61a3bbe2"},{"problem":20,"code":"#(loop [[a b & others] %]\n   (if others\n     (recur (cons b others))\n     a))","user":"5bab5440e4b0a20761a23475"},{"problem":20,"code":"(fn [x] (nth x (-( count x) 2)))","user":"57583451e4b02ea114799304"},{"problem":20,"code":"#(loop [c %] (if (= 2 (count c)) (nth c 0) (recur (rest c))))","user":"5516d26de4b06a49daca83b9"},{"problem":20,"code":"(fn [sq]\n  (let [num-items (count sq)\n        second-to-last-index (- num-items 2)]\n    (nth sq second-to-last-index)))","user":"5ff6d695e4b06df49cee1499"},{"problem":20,"code":"(fn my2Last\n  \n  [xs]\n  (if (next(next xs)) \n    (my2Last (rest xs))\n    (first xs)))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":20,"code":"#( (fn [x] (nth x (- (count x) 2) )) % )","user":"55132a33e4b055c2f668d4c1"},{"problem":20,"code":"(fn [input](second (reverse input)))","user":"5cab939de4b026601754b84c"},{"code":"(fn butlast [x] (second(reverse x)))","problem":20,"user":"534bc6dfe4b084c2834f4a7f"},{"problem":20,"code":"#(nth % (->>\n         (count %)\n         (dec)\n         (dec)))","user":"55096255e4b06e50f9beb116"},{"problem":20,"code":"#(first( drop 1(reverse %)))","user":"577008f1e4b0979f89651594"},{"code":"(fn end [[n & more]]\n  (if (> (count more) 1)\n    (recur more)\n    n))","problem":20,"user":"51c8ef22e4b07ef393169e5c"},{"problem":20,"code":"(fn [x]\n  (if (next x)\n    (if (= 2 (count x)) \n      (first x) \n      (recur (next x)))\n    (first x)))","user":"565c3f15e4b068f2fe63dc0c"},{"code":"(fn second-to-last [seq] (if (= '() (rest (rest seq))) (first seq) (second-to-last (rest seq))))","problem":20,"user":"4f031aaa535dcb61093f6a64"},{"code":"(fn slst [l]\n  (if (= (nnext l) nil)\n    (first l)\n    (slst (next l))))","problem":20,"user":"51085be5e4b00aa5c85a1024"},{"problem":20,"code":"(fn [x] \n  (nth x (- (count x) 2)) )","user":"606ff89be4b069485764de22"},{"problem":20,"code":"(fn [seq]\n  (if (= [] (rest (rest seq)))\n  \t(first seq)\n  \t(recur (rest seq))\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"(fn [x]\n  (let [r (rest x)]\n    (if (empty? (rest r))\n      (first x)\n      (recur r))))","problem":20,"user":"4e955b95535dbda64a6f6b33"},{"problem":20,"code":"(fn [elements] \n  (loop [elements elements]\n    (if (= (count elements) 2)\n      (first elements)\n      (recur (next elements)))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"code":"(fn [x] (first (take-last 2 x)))","problem":20,"user":"4e3aec24535deb9a81d77f4f"},{"problem":20,"code":"(fn secondlast [coll]\n (nth coll (- (count coll) 2)))","user":"5a51e029e4b05d388ecb6bf0"},{"code":"(fn [s] (peek (pop (vec s))))","problem":20,"user":"50435689e4b034ff00315d21"},{"code":"(fn [x] \n  (first\n    (rest \n     (reverse x)\n    )\n  )\n)","problem":20,"user":"4fe92767e4b0547ebccb2448"},{"problem":20,"code":"(fn p-element [pcoll]\n  (second (reverse pcoll)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [x]\n  (first (rest (reverse x)))\n  \n  \n  \n )","problem":20,"user":"524ed632e4b0541d1855b7f2"},{"problem":20,"code":"#(loop [acc %] (if (> (count acc) 2) (recur (rest acc))(first acc)))","user":"5fdbde92e4b05ac5b16ea137"},{"problem":20,"code":"(fn [li] \n  (nth li (- (count li) 2))\n  )","user":"5ac51c43e4b0e27600da773b"},{"code":"(fn penultimate [list]\n  (if (= 1 (count (rest list)))\n    (first list)\n    (penultimate (rest list))))","problem":20,"user":"4fe89efae4b07c9f6fd12c5b"},{"problem":20,"code":"(fn [my-collection] (second (reverse my-collection)))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn second-to-last [x]\n  (if (= (count x) 2) (first x) (second-to-last (rest x)))\n)","problem":20,"user":"4fa7ef54e4b081705acca1ca"},{"code":"#(first (drop (dec(dec(count %))) %))","problem":20,"user":"4ea84f48535d7eef308072f6"},{"code":"(fn [items]\n  (loop [[head & tail] items]\n    (if (= (count tail) 1)\n      head\n      (recur tail))))","problem":20,"user":"53936394e4b0b51d73faaebb"},{"problem":20,"code":"#(->> %1\n     reverse\n     (drop 1)\n     first)","user":"538db083e4b0b51d73faae74"},{"code":"(fn [lst]\n  (if (nil? (second (rest lst)))\n    (first lst)\n    (recur (rest lst))))","problem":20,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":20,"code":"(fn [seq] \n  (let [idx (- (count seq) 2)]\n    (nth seq idx)))","user":"5a58d8a0e4b05d388ecb6c8a"},{"problem":20,"code":"(fn [ [x y & r] ]\n  (if (seq r)\n  \t(recur (cons y r))\n  \tx))","user":"53b61528e4b047364c0444c1"},{"code":"(fn second-last[s]\n  (if (= nil (second (rest s)))\n    (first s)\n    (second-last (rest s))))","problem":20,"user":"51430fd9e4b0c172af7558cf"},{"code":"#(nth % (-> % count (- 2)))","problem":20,"user":"4dad86e0c9a9d6ed0f99dc57"},{"code":"(fn pen-ele[x]\n  (nth x(-(count x)2)))","problem":20,"user":"4f67f97ee4b07046d9f4ef6f"},{"code":"(fn [[f s & r :as coll]]\n  (if (nil? r) f (recur (next coll))))","problem":20,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":20,"code":"(fn pu [l]\n  (first (drop (- (count l) 2) l)))","user":"5cc74e44e4b0ccb061962833"},{"code":"(fn penultimate [seq]\n  (if (or (= nil seq) (= 1 (count seq))) nil\n    (if (= 2 (count seq)) (first seq)\n      (penultimate (rest seq)))))","problem":20,"user":"4f5599dfe4b0a7574ea71806"},{"problem":20,"code":"(fn [[a b & lst]]\n  (if (nil? lst)\n    a\n    (recur (conj lst b))))","user":"5be4e6e8e4b0ed4b8aab4d06"},{"problem":20,"code":"(fn [col]\n  (if (<= (count col) 1)\n    nil\n    (if (= 2 (count col))\n      (first col)\n      (recur (rest col)))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":20,"code":"(fn secondLast [x] (first (take-last 2 x)))","user":"57745294e4b0979f896515ff"},{"problem":20,"code":"(fn [sqn] (loop [f (first sqn) r (rest sqn)]\n  (if (= (count r) 1)\n  f\n  (recur (first r) (rest r)))))","user":"569aca1ee4b0542e1f8d144d"},{"code":"#(first (reverse (butlast %1)))","problem":20,"user":"50481acee4b0ec70b3ef8d97"},{"problem":20,"code":"#(first(take-last 2 %1 ))","user":"55d58192e4b0e31453f64a89"},{"code":"(fn mylast [input] (if (= 2 (count input))\n                     (first input)\n                     (mylast (rest input))))","problem":20,"user":"5186571de4b0da5a5be3bad1"},{"problem":20,"code":"(fn last-el [x](nth x (- (count x) 2)))","user":"5a918839e4b002d099cae6f7"},{"problem":20,"code":"(fn [s] (let [[u v & r] s] (if (seq r) (recur (rest s)) u)))","user":"587ad5aae4b01531a375eaf0"},{"problem":20,"code":"(fn sample [coll]\n  (first (take-last 2 coll))\n       )","user":"591f2e4ae4b09b4ee5954c44"},{"code":"(fn final [x]\n  (first (first (rest (split-at (- (count x) 2) x))))\n)","problem":20,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"problem":20,"code":"(fn penultimate [args]\n  (if (= (count args) 2)\n    (first args)\n    (penultimate (rest args))))","user":"5c92b9e6e4b048ec896c5a0d"},{"code":"(fn [x] (nth x ( - (count x) 2)))","problem":20,"user":"512318b6e4b03b44edbed433"},{"code":"(fn nlast [x] (nth x (- (count x) 2)))","problem":20,"user":"4f1b1f31535d64f603146477"},{"code":"#(nth % (- (dec (count %) ) 1) )","problem":20,"user":"513fbe89e4b00f13ea1bd894"},{"problem":20,"code":"(fn my-last [l]\n   (if (= (count l) 2)\n     (first l)\n     (my-last (rest l))))","user":"551c6bcee4b07993ea3788df"},{"code":"#(if (> (count %) 2) \n    (recur (rest %)) \n    (first %))","problem":20,"user":"4e54dd20535d8a8b8723a27d"},{"code":"(fn next-to-last [x] (nth x (- (count x) 2)))","problem":20,"user":"516cdef4e4b06f078fab2527"},{"problem":20,"code":"(fn [coll]\n  (-> coll\n      (reverse)\n      (second)))","user":"5935151ee4b072a2710fd084"},{"problem":20,"code":"(fn my-sec-last \n  [my-seq]\n  (second (reverse my-seq)))","user":"55acd080e4b03311e7b73298"},{"code":"(fn second-to-last [x] (first (rest (reverse x))))","problem":20,"user":"522452a4e4b01819a2de42d2"},{"problem":20,"code":"(fn penultime\n  [lst]\n  (first (reverse (butlast lst))))","user":"57f81532e4b0d3187e900914"},{"code":"#(.get % (dec (- (count %) 1)))","problem":20,"user":"50948042e4b04e5742806c4c"},{"problem":20,"code":"#(-> %  vec rseq rest first)","user":"5729277fe4b0c6e51e0d2b17"},{"problem":20,"code":"#(-> (partition 2 1 %)\n     last\n     first)","user":"59eb63e3e4b0249b7282077c"},{"code":"( fn [li]\n  ( nth li\n    ( - ( count li ) 2 )\n  )\n)","problem":20,"user":"5021bf80e4b00bba4502f7a8"},{"problem":20,"code":"(fn second-last [s] (nth (reverse s) 1))","user":"554f4d0fe4b00713264bd99e"},{"code":"(fn penultimate [items] (if (= (count items) 2) (first items) (penultimate (rest items))))","problem":20,"user":"52e32906e4b09f7907dd143d"},{"problem":20,"code":"(fn penultimate [coll]\n  (first (reduce (fn [pair item] (list (second pair) item))\n          \t\t '() coll)))","user":"550e0951e4b06e50f9beb163"},{"code":"(fn[list] (first (rest (reverse list))))","problem":20,"user":"528c381ce4b0239c8a67aeb2"},{"code":"(fn penul [a] (nth a (- (count a) 2)))","problem":20,"user":"5034b623e4b062bc5d7ae168"},{"code":"(fn [x] \n  (let [nx (next x)] \n    (if (next nx) \n        (recur nx) \n        (first x))))","problem":20,"user":"4f03a3df535dcb61093f6b45"},{"code":"(fn penehrltemehrt [thingy] (first (rest (reverse thingy))))","problem":20,"user":"5015307be4b0aaedd199e910"},{"problem":20,"code":"(fn [coll] (-> coll (reverse) (second)))","user":"4eb9d8e0535dfed6da9c6d60"},{"code":"(fn [coll] \n  (if (> (count (rest coll)) 1)\n    (recur (rest coll))\n    (first coll)))","problem":20,"user":"4ebbf772535dfed6da9c6d76"},{"code":"(fn [x] (nth x (-(count x) 2)))","problem":20,"user":"4fea0e51e4b0547ebccb2487"},{"problem":20,"code":"(fn buts [x] (second (reverse x)))","user":"55c819b4e4b0e31453f649dc"},{"problem":20,"code":"(fn [[h & t]](if (empty? (rest t)) h (recur t)))","user":"56163cc1e4b06b1bb21829ff"},{"problem":20,"code":"(fn secondToLast [x] (cond (= (count x) 2) (first x) (< (count x) 2) nil \n                           :else (secondToLast (rest x))))","user":"573c813be4b0cd1946bd10c5"},{"problem":20,"code":"#(nth % (+ (count %) -2))","user":"5a109351e4b04bbd27e6da1b"},{"problem":20,"code":"(fn [coll]\n   (second (into '() coll)))","user":"5b2689e3e4b063e2438bcc33"},{"problem":20,"code":"(fn\n  [input]\n  (let [[a b] (reverse input)]\n    b))","user":"52c2106fe4b07a9af5792374"},{"problem":20,"code":"(fn[coll] (first (rest (reverse coll))))","user":"5e9ff8fbe4b00a66d4a95185"},{"code":"(fn [l] (nth l (-(count l)2)))","problem":20,"user":"52bf0116e4b07a9af5792328"},{"code":"(fn end2 [x]\n  (first (rest (reverse x))))","problem":20,"user":"500d784ee4b0ff215386cad3"},{"code":"(fn [seq]\n  (nth (reverse seq) 1))","problem":20,"user":"52cf2b96e4b07d0d72b273a0"},{"code":"(fn second-to-last [s] (second (reverse s)))","problem":20,"user":"53333e7be4b019098a6f8b7e"},{"problem":20,"code":"(fn myLast [x]\n    (if (= (count x) 2) (first x) (myLast(rest x))))","user":"5703d1fee4b08d47c97781fe"},{"problem":20,"code":"(fn [coll](nth coll (-(count coll)2)))","user":"54a42372e4b09f271ff37c6c"},{"problem":20,"code":"(fn getfinal [items]\n  (let [[head & tail] items]\n    (if (= (count tail) 1)\n      head\n      (getfinal tail))))","user":"602ed851e4b0d5df2af22291"},{"problem":20,"code":"(fn [s] (.get s (- (count s) 2)))","user":"595eaa8fe4b066ee0a44b04b"},{"problem":20,"code":"#( nth % (- (count %) 2 ))","user":"5d122f3ee4b02c15ef021994"},{"code":"(fn reclast [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (recur (rest s))))","problem":20,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [[h & t]]\n  (if (= (rest t) [])\n    h\n    (recur t)))","problem":20,"user":"511bb70ee4b00c2a1fa7ff71"},{"problem":20,"code":";#(second (reverse %))\n(comp last butlast)","user":"58ef4db9e4b056aecfd47dc6"},{"problem":20,"code":"(fn [input] (if (< (count input) 2) nil (second (reverse input))))","user":"5abe41bce4b073f177442720"},{"problem":20,"code":"(fn pen [[x y & r]] (if (empty? r) x (pen (cons y r))))","user":"53ad2bbbe4b047364c044464"},{"problem":20,"code":"#( second  (reverse %))","user":"56252effe4b00a550fc90294"},{"code":"(fn [list]\n  (nth (reverse list) 1))","problem":20,"user":"50456747e4b01f6c9a8b236c"},{"code":"(fn[c](nth c(- (count c) 2)))","problem":20,"user":"52a8a08ce4b0c58976d9ac33"},{"problem":20,"code":"(fn [[head & tail]] (if (= (count tail) 1) head (recur tail)))","user":"56579986e4b0f9d632dd84ab"},{"code":"(fn [a]\n\n (nth a (- (count a) 2) )\n)","problem":20,"user":"52d6d490e4b09f7907dd1369"},{"problem":20,"code":"#(loop [[a & b] %]\n   (let [[bb & c] b]\n     (if (empty? c) ; no count, yay\n       a\n       (recur b))))","user":"57b5dc52e4b0fbc9809a27b3"},{"problem":20,"code":"#(let [[_ second-to-last] (reverse %)]\n   second-to-last)","user":"56ee905be4b04a395b9a044f"},{"code":"(fn pen\n  [[first second & more :as xs]]\n  (if (nil? more) first (pen (rest xs))))","problem":20,"user":"4f9acea6e4b0dcca54ed6d10"},{"problem":20,"code":"#(nth % (- (count  %) 2))","user":"55cdeebfe4b0e31453f64a24"},{"problem":20,"code":"(fn [mc] (nth mc (- (count mc)  2) )  )","user":"561974f9e4b053970a773af7"},{"code":"(fn [x] (nth x (- (count x) 2 ) ) )","problem":20,"user":"50e49d03e4b0cb9ec68fbca1"},{"code":"(fn plast [cs]\r\n  (if (empty? (rest (rest cs)))\r\n    (first cs)\r\n    (plast (rest cs))))","problem":20,"user":"507a396be4b08327cd804a69"},{"problem":20,"code":"#(first  (take-last 2 %))","user":"5655d264e4b0f9d632dd8499"},{"code":"#(nth % (dec (dec (count %))) )","problem":20,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":20,"code":"(fn f [xs]\n  (if (= 2 (count xs))\n    (first xs)\n    (f (rest xs))))","user":"55507a1ae4b00713264bd9a7"},{"problem":20,"code":"(fn [[a b & r]]\n        (if r\n          (recur (cons b r))\n          a))","user":"5717b57de4b07c98581c3b15"},{"code":"(fn [seq] (first (reverse (drop-last seq))))","problem":20,"user":"50e9d798e4b02d54280826d3"},{"problem":20,"code":"(fn getSecondToLast [x] (nth x (- (count x) 2)))","user":"55b1ab40e4b0da326a65cf6e"},{"code":"(comp first next reverse vec)","problem":20,"user":"4ff0c419e4b0678c553fc327"},{"code":"(fn [x]\n  (nth x (-\n          (count x)\n          2)))","problem":20,"user":"516018dae4b0e2be8aa20be2"},{"problem":20,"code":"(fn[collection] (peek(pop(vec collection))))","user":"55a68518e4b09e57187da29b"},{"problem":20,"code":"(fn [x] (let [total-length (count x)\n              last-element (nth x (- total-length 2))]\n          last-element))","user":"595b7c12e4b066ee0a44afda"},{"code":"#((fn ([x acc]\r\n    (if-let [y (next x)]\r\n      (recur y (first x))\r\n      acc)))\r\n% nil)","problem":20,"user":"4e07af97535d04ed9115e7a8"},{"code":"(fn [x] (if (= 1(count(rest x))) (first x) (recur(rest x))))","problem":20,"user":"4f4e6d21e4b03ad3f0c10cc5"},{"problem":20,"code":"(fn [list1] (first (reduce (fn [curr_li nex_var] (list (second curr_li) nex_var)) '() list1)))","user":"5c76577ae4b0fca0c16227ea"},{"problem":20,"code":"(fn get-penultimate [s] (if (= (count s) 2)\n                          (first s)\n                          (get-penultimate (rest s))))","user":"597a7418e4b02382a38ad1e9"},{"code":"#((vec (reverse %)) 1)","problem":20,"user":"4e6a4541535d8ccf87e9feb8"},{"code":"(fn x [[h & tl]]\n  (if (<= (count tl) 1)\n    h\n    (x tl)))","problem":20,"user":"50a768e6e4b090657f4a5cd9"},{"problem":20,"code":"(fn x [s] (if (= (count s) 2) (first s) (recur (rest s))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":20,"code":"(fn [coll]\n  (if (= (seq (rest (rest coll))) nil)\n    (first coll)\n    (recur (rest coll))))","user":"5939e726e4b069cdc2982b45"},{"code":"(fn apple [x]\n  (if (= (count x) 2)\n\t     (first x)\n\t(recur (rest x))))","problem":20,"user":"5122d648e4b068a9582e6570"},{"problem":20,"code":"#(loop [f (first %) r (rest %) rr (rest r)] (if (empty? rr) f (recur (first r) rr (rest rr))))","user":"55eeb37ae4b0121d4835fdf3"},{"problem":20,"code":"(fn s-to-l [l]\n  (if (= (count l) 2)\n    (first l)\n    (s-to-l (rest l))))","user":"503777a4e4b0af0658af77ac"},{"problem":20,"code":"#(->> (butlast %)(last))","user":"563d3fc8e4b0bfe05bf1184b"},{"problem":20,"code":"(fn mymax [[x y & z]]\n  (if (nil? (first z))\n    x\n    (mymax (concat [y] z))\n  )\n)","user":"53ff7ad2e4b0de5c41848601"},{"problem":20,"code":"(fn [a]\n   (second (reverse a))\n   )","user":"5d94a878e4b0d3f9b434ad29"},{"code":"(fn [x] (nth (reverse x) 1))","problem":20,"user":"4df0524e535d08e6dec9fe17"},{"problem":20,"code":"#(-> % \n     reverse\n     second)","user":"554acce4e4b0a04f79299579"},{"code":"(fn rec [s]\n  (let [xs (rest (rest s))]\n    (if (empty? xs)\n      (first s)\n      (rec (rest s)))))","problem":20,"user":"52aa524fe4b0c58976d9ac64"},{"problem":20,"code":"(fn the2Last [x] \n  (if (= 2 (count x)) \n    (first x) \n    (the2Last (rest x))\n    )\n  )","user":"5bf0b940e4b0a6d31fed215c"},{"code":"(fn [col] (if (<= (count col) 2)\n              (first col)\n            (recur (rest col))))","problem":20,"user":"4ef992c8535dced4c769f268"},{"problem":20,"code":"(fn fofo [x] (second (reverse x)))","user":"55a07beee4b0acc240e314f9"},{"problem":20,"code":"(fn sec_to_last [x] (second(reverse x)))","user":"567ae5e1e4b05957ce8c619e"},{"problem":20,"code":"(fn [listy] (nth listy (- (count listy) 2)))","user":"58d3ef87e4b03c36ff7e5931"},{"problem":20,"code":"(fn [s] (if (empty? (rest (rest s))) (first s) (recur (rest s))))","user":"59699da7e4b069c0a1a197eb"},{"problem":20,"code":"(fn [coll]\n  (letfn [(iter [last coll]\n                (if (next coll)\n                  (recur (first coll) (next coll))\n                  last))]\n    (iter nil coll)))\n\n;; better (comp second reverse)","user":"553527ede4b09218d5f44fab"},{"code":"(fn [[a b & rest]] (if (nil? rest) a (recur (cons b rest))))","problem":20,"user":"539c88e1e4b0b51d73faaf2c"},{"code":"(fn [x]\n  (first (drop\n   (- \n    (count x)\n    2) x)))","problem":20,"user":"5047eadde4b0ec70b3ef8d94"},{"problem":20,"code":"#(-> (take-last 2 %) (first))","user":"5421cd6be4b01498b1a71ab7"},{"problem":20,"code":"(fn[n](nth n (- (count n) 2)))","user":"553093bee4b076ab5578f817"},{"problem":20,"code":"(fn [vs]\n  (if-let [[f & rst] (seq vs)]\n    (when-let [[s & rrest] (seq rst)]\n      (if (seq rrest)\n        (recur rst)\n        f))))","user":"57acb156e4b0b8559636fc8d"},{"code":"(fn [c] (first (rest (rseq (into [] c)))))","problem":20,"user":"4ec17677535dfed6da9c6dad"},{"problem":20,"code":"(fn [a]\n  (loop [x-var a y nil]\n    (if (= (count x-var) 1)\n      y\n      (recur (rest x-var) (first x-var)))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":20,"code":"(fn lastElement [x] (nth x (- (count x) 2)))","user":"55d74befe4b0e31453f64aa3"},{"problem":20,"code":"(fn [seqs] (first (reverse (take (- (count seqs) 1) seqs))))","user":"5e967418e4b0157ca96647c6"},{"code":"(fn [list] \n  (nth list (- (count list) 2)))","problem":20,"user":"4f6a5c8de4b07046d9f4ef9b"},{"problem":20,"code":"(fn [coll]\n  (second (into '() coll)))","user":"5947c6a6e4b07ddc2dafada7"},{"code":"(fn [s]\n  (let [r (rest s)\n        r2 (rest r)]\n(if (= () r2) (first s) (recur r))\n))","problem":20,"user":"4f5f484be4b0030a34fb2b5f"},{"code":"(fn penultimate [seq]\n    (if (empty? (rest (rest seq)))\n      (first seq)\n      (penultimate (rest seq))))","problem":20,"user":"5315ec83e4b08068f379ed39"},{"problem":20,"code":"(fn [dat] \n  (second (reverse dat)))","user":"58730484e4b01531a375ea26"},{"problem":20,"code":"(fn foo [xs] \n  (if (= 2 (count xs))\n    (first xs)\n    (foo (rest xs))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":20,"code":"(fn [coll] (second (reverse (vec coll))))","user":"57c779d6e4b05aa3c4741d06"},{"problem":20,"code":"(fn [l] (first ( rest (reverse l))))","user":"56972819e4b0e0b3d3318caa"},{"code":"(fn [sq] \n  (first(rest(reverse sq))))","problem":20,"user":"52161028e4b0bf4bffd29cb4"},{"code":"#(nth (reverse (vec %)) 1)","problem":20,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn [s] \n  (if (next (next s))\n    (recur (next s))\n    (first s)))","problem":20,"user":"4f790ad5e4b0fbe0118ec58d"},{"problem":20,"code":"(fn [my-list]\n  (nth my-list (- (count my-list) 2)))","user":"54728c0ee4b094393f72dd78"},{"code":"(fn [x]\n  (first(drop 1(reverse x))))","problem":20,"user":"4e94c4ca535dbda64a6f6b29"},{"code":"(fn m [mys] (nth mys (- (count mys)2)))","problem":20,"user":"513e0ffae4b02b2a3d8235bb"},{"code":"(fn rev [x] \n  (first \n    (rest \n      (reverse x)\n    )\n  )\n)","problem":20,"user":"502ea7bce4b078f26332e748"},{"code":"#(nth % (+ -2 (count %)))","problem":20,"user":"4f045aad535dcb61093f6bbb"},{"code":"(fn [l] (nth l (-> l count dec dec)))","problem":20,"user":"4e02bee8535d04ed9115e791"},{"problem":20,"code":"(fn [[x y & xs]] \n   (loop [x x, y y, xs xs] \n     (if \n      (or (= xs nil) \n       (= xs '())) \n       x \n       (recur y \n             (first xs)          \n             (drop 1 xs)\n       )\n      )\n     )\n  )","user":"56433d34e4b08d4f616f5f23"},{"code":"#(nth % (- (count %1) 2))","problem":20,"user":"50487817e4b0ec70b3ef8d9d"},{"code":"#(let [size (count %)]\n    (nth % (- size 2)))","problem":20,"user":"537618b8e4b06839e8705e1b"},{"code":"(fn list [x](nth x (- (count x) 2)))","problem":20,"user":"51004dabe4b0e0dde55c17f0"},{"problem":20,"code":"#(nth (take 2 (reverse %)) 1)","user":"524b827ce4b09eba1c0223d7"},{"problem":20,"code":"(fn second-last [s] (if (= (count (rest s)) 1) (first s) (second-last (rest s))))","user":"55efbb2ae4b066087aa9453c"},{"code":"(fn [x]\n  (last (drop-last x)))","problem":20,"user":"51eb3aace4b0f1f103a0d159"},{"code":"(fn last-el [xs] (second (reverse xs)))","problem":20,"user":"523c6451e4b07becd5be2222"},{"problem":20,"code":"(fn [custom-seq]\n  (first (rest (reverse custom-seq))))","user":"53051bf6e4b0d8b024fd3759"},{"code":"(fn pen [x] (first (rest (reverse x))))","problem":20,"user":"503539dee4b0ed9c821488f6"},{"problem":20,"code":"(fn sndLast [x] (second (reverse x)))","user":"5b1bf193e4b03cfeda66ece9"},{"problem":20,"code":"(fn [x] \n  (let [n (dec(count x))]\n    (loop [cnt n tmp-list x] \n      (if (zero? (dec cnt))\n          (first tmp-list)\n        (recur (dec cnt) (rest tmp-list))))))","user":"5761984fe4b0994c1922fb91"},{"problem":20,"code":"#(loop [[first & rest] %\n        acc nil]\n   (if (empty? rest)\n     acc\n     (recur rest first)\n   )\n)","user":"53f7820be4b0de5c41848560"},{"problem":20,"code":"(fn\n  [col]\n  (nth col (dec(dec (count col)))))","user":"56e24e68e4b03a7c14b85a34"},{"code":"(fn [coll] (\n  nth coll ( - (count coll) 2)))","problem":20,"user":"52c60930e4b0c2d177d62107"},{"code":"(fn [x] (first (next (take-nth (- (count x) 2) x))))","problem":20,"user":"531576b4e4b08068f379ed29"},{"problem":20,"code":"(fn [v] (reduce #(-> %2) (pop (into [] v))))","user":"57dba312e4b0bd073c202426"},{"code":"#(cond (= [] (rest(rest %))) (first %)\n  :else (recur (rest %)))","problem":20,"user":"4fb18b0be4b081705acca27c"},{"problem":20,"code":"(fn\n  [l]\n  (loop [n l]\n    (if (= (count n) 2) (first n)\n      (recur (rest n)))))","user":"603e8a3be4b0d5df2af22314"},{"problem":20,"code":"(fn [x]\n          (nth x (- (count x) 2)))","user":"55ac07afe4b03311e7b7328f"},{"problem":20,"code":";;#(nth % (- (count %) 2))\n;;#(second (reverse %))\n\n(fn [seqq] (last (filter #(= % (nth seqq (- (count seqq) 2))) seqq)))","user":"56ff0ef3e4b08d47c97781ba"},{"problem":20,"code":"(fn [coll] (reduce (fn [e1 e2] e2) (reverse (rest (reverse coll)))))","user":"596e2267e4b069c0a1a19860"},{"code":"(fn [[n & s]]\n  (if (= (count s) 1)\n    n\n  (recur s)))","problem":20,"user":"50521b1fe4b0a561d07d8f14"},{"problem":20,"code":"(fn [[a & r]] (if (seq (rest r)) (recur r) a))","user":"54ca93abe4b057c6fda3a264"},{"problem":20,"code":"(fn [coll] (if (nth coll 2 nil) (recur (rest coll)) (first coll)))","user":"5b7608c9e4b047b03b2036da"},{"problem":20,"code":"(fn [thing] (first (take-last 2 thing)))","user":"5e32c30be4b05b4b01516245"},{"code":"(fn [x]\n  (first (rest (reverse x) ) )\n)","problem":20,"user":"4eb9b1aa535dfed6da9c6d5a"},{"problem":20,"code":"(fn [[head & tail]] (if (= 1 (count tail)) head (recur tail)))","user":"58791973e4b01531a375eac5"},{"problem":20,"code":"(fn penultimateele\n  [coll]\n  (when (not-empty coll)\n    (if (nnext coll)\n      (recur (rest coll))\n      (apply first [coll]))))","user":"5785de78e4b0ebec4cfb74e8"},{"problem":20,"code":"(fn [c] ((vec c) (- (.length (vec c)) 2)))","user":"5c083a1ae4b0bdcf453d16dd"},{"problem":20,"code":"(fn end [l] (if (= (rest (rest l)) []) (first l) (end (rest l))))","user":"5c34be9fe4b0d62ef62d9f58"},{"problem":20,"code":"(fn [alist] (second (reverse alist)))","user":"58950f29e4b00487982d5270"},{"problem":20,"code":"(fn [the-list] (-> the-list reverse (nth 1)))","user":"58a31ecee4b02bd94d917ee7"},{"problem":20,"code":"(fn [xs] \n  (last (butlast xs)))","user":"543c39e0e4b032a45b86933d"},{"problem":20,"code":"(fn [seq]\n  (nth seq (dec (dec (count seq)))))","user":"550b1c2ce4b06e50f9beb13b"},{"code":"#(let [vector (vec %)] (nth vector (- (count vector) 2)))","problem":20,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn [lst]\n  (last (butlast lst)))","problem":20,"user":"52718620e4b03e8d9a4a73f5"},{"code":"(fn [s] ((comp first rest reverse) s))","problem":20,"user":"51cd45e0e4b02254fc794887"},{"problem":20,"code":"(fn [r](last(drop-last r)))","user":"595e20e2e4b066ee0a44b037"},{"problem":20,"code":"#_(fn [col] (second (reverse col)))\n(fn [col] (-> col reverse second))","user":"5d5824fae4b02ba5928a681f"},{"code":"#(first (rest  (reverse %)))","problem":20,"user":"4ea4e98a535d7eef308072ce"},{"problem":20,"code":"#(nth % (- (count %) 2)\t)","user":"4ff8487be4b0678c553fc397"},{"problem":20,"code":"(fn getSecond [x] (nth (reverse x) 1))","user":"58d533fae4b03c36ff7e5958"},{"code":"(fn second-to-last [s]\n  (let [x (reverse s)]\n    (second x)))","problem":20,"user":"535afd76e4b04ce2eb3ed2ab"},{"problem":20,"code":"(fn penultimate [sequ]\n  (if (= (count sequ) 2)\n    (first sequ)\n    (penultimate (rest sequ))))","user":"561eb644e4b064ca9f4b16c6"},{"code":"(fn f [l] (if (next (next l)) (f (next l)) (first l)))","problem":20,"user":"524fafdfe4b0541d1855b818"},{"code":"(fn fun [x] (\n                if (> (count x) 2)\n                (fun (rest x))\n                (first x))\n )","problem":20,"user":"52132f8de4b0d32679a50651"},{"code":"(fn penultimate [x]\n  (if (empty? (rest (rest x)))\n    (first x)\n    (penultimate (rest x))))","problem":20,"user":"4ff2430ae4b0678c553fc336"},{"problem":20,"code":"(fn secondToLast [[h & t]] (if (= (count t) 1) h (secondToLast t)))","user":"541619e8e4b01498b1a719f9"},{"problem":20,"code":"(fn [seq]\n  (nth seq \n  \t(- (count seq) 2)))","user":"554b975ae4b0a04f79299592"},{"problem":20,"code":"(fn second-to-last [s]\n    (if (= (count s) 2)\n      (first s)\n      (second-to-last (rest s))))","user":"5e348806e4b0650de70e2b1c"},{"problem":20,"code":"(fn mylast [a] (let [ra (rest a)] (if (<= (count a) 2) (first a) (mylast ra))))","user":"5537f167e4b09218d5f44fd7"},{"problem":20,"code":"(fn foo [x] (nth x (- (count x) 2)))","user":"5304bb8ce4b0d8b024fd3751"},{"problem":20,"code":"(fn [x] (-> x\n            reverse\n            second))","user":"5744b18ce4b009280f9f2b40"},{"code":"(fn f ([c]\n        (cond\n          (= (next (next c)) nil) (first c)\n          :else (f (next c))\n          )\n        )\n   )","problem":20,"user":"53307da1e4b019098a6f8b5e"},{"problem":20,"code":"(fn mynext [x] (\n               (fn myhelp [y, z]  (if (= (rest z) ()) y (myhelp (first z) (rest z))))\n               (first x)\n               (rest x)))","user":"546ce5f1e4b00cfc9eacc187"},{"code":"(fn g [x] (cond (= (count x) 2) (first x)\n\t\t     :else (g (rest x))))","problem":20,"user":"51ad4face4b09397d5109780"},{"problem":20,"code":"(fn [objs] (second (reverse objs)))","user":"5edc16e1e4b0c7845d86b0f1"},{"code":"(fn f [n] \n  (if (= (count n) 2) (first n)\n    (f (rest n))))","problem":20,"user":"4f3242bae4b0d6649770a08f"},{"problem":20,"code":"(fn [the-seq] (second (reverse the-seq)))","user":"56849b93e4b04eec3ec5cfbf"},{"code":"(fn second-last [the-list]\n  (if (= 2 (count the-list))\n      (first the-list)\n      (second-last (rest the-list))))","problem":20,"user":"4fe930e9e4b0547ebccb244d"},{"code":"(fn [xs] (nth xs (- (count xs) 2)))","problem":20,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn pen [s] ((comp first rest reverse) s))","problem":20,"user":"4dbdecd3535d020aff1edf54"},{"problem":20,"code":"(fn foo [x] (if (> (count x) 2) (foo (rest x)) (first x)))","user":"5519da46e4b00ace28fe6e35"},{"problem":20,"code":"(fn func [x] (first (rest (reverse x))))","user":"568fecc6e4b0dcc4269f40e6"},{"problem":20,"code":"(\n fn [l] (nth l (- (count l) 2) )\n)","user":"5ef78fdae4b09b61f08553c4"},{"problem":20,"code":"(fn \n  [x] \n  (if (> (count x) 1)    \n  (nth x (- (count x) 2))\n  (first x) ))","user":"5b036e77e4b0cc2b61a3bd62"},{"problem":20,"code":"(fn [cs]\n  (loop [cs cs f nil]\n    (if (second cs)\n      (recur (next cs) (first cs))\n      f)))","user":"57275755e4b0c5bde472c13b"},{"problem":20,"code":"(fn snd-to-last [items] \n  (let [remaining (rest items)] \n    (if (= (count remaining) 1)\n      (first items)\n      (snd-to-last remaining))))","user":"5de48f92e4b0948ae9d9ae07"},{"code":"(fn[coll] (nth coll (dec (- (count coll) 1))))","problem":20,"user":"5151b1abe4b03e678e393adb"},{"code":"(fn ndlst [sec] \n  (if (= (rest (rest sec)) ())\n    (first sec)\n\t(ndlst (rest sec))\n    )\n  )","problem":20,"user":"5194f482e4b05be8c43d2385"},{"problem":20,"code":"(fn[k] (nth k (- (count k) 2)))","user":"569ce6fee4b0542e1f8d146c"},{"problem":20,"code":"(fn get-reverse-second [lst] (second (reverse lst)))","user":"58e90258e4b056aecfd47cfd"},{"code":"(fn me [lst]\n  (if (= 2 (count lst))\n    (first lst)\n    (me (rest lst))))","problem":20,"user":"52091d57e4b0e152394d76f0"},{"problem":20,"code":"(fn [l] (nth l (-> (count l) (- 2))))","user":"4ec7e048535d6d7199dd36ea"},{"problem":20,"code":";; dumber way\n#_(fn\n  [some-seq]\n  (nth some-seq (- (count some-seq) 2)))\n\n#(second (reverse %))","user":"57a6ad79e4b0a9660795620b"},{"problem":20,"code":"#(->> (count %) dec dec (nth %))","user":"55ca4273e4b0e31453f649f9"},{"code":"(fn last-element [x]\n  (if (= 2 (count x))\n    (first x)\n    (last-element (rest x))))","problem":20,"user":"50602bc6e4b08f2a82ad10ba"},{"code":"(comp last butlast)\n#_(comp first #(take-last 2 %))\n#_#(last (take (dec (count %))\n               %))\n#_(fn [[x y & r :as t]] \n  (if (empty? r)\n      x \n      (recur (rest t))))","problem":20,"user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [a] (-> a reverse second))","problem":20,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn f [x]\r\n  (if (> (.size x) 2)\r\n    (f (next x))\r\n    (first x)))","problem":20,"user":"4fe9b372e4b0547ebccb246b"},{"problem":20,"code":"(fn [n]\n   (nth n (- (count n) 2)))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn [s] (nth (reverse s) 1))","problem":20,"user":"4e7f7e48535db966e863cc42"},{"code":"(fn [s]\n  (cond\n   (< (count s) 2) nil\n   (= (count s) 2) (first s)\n   :default (recur (rest s))))","problem":20,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn penultimate-elem [lst]\n  (cond (or (empty? lst) (empty? (rest lst))) lst\n        (empty? (rest (rest lst))) (first lst)\n        :else (penultimate-elem (rest lst))))","problem":20,"user":"52c4d327e4b0c2d177d620e6"},{"problem":20,"code":"(fn penultimate [lst]\n  (nth (reverse lst) 1))","user":"5d48e6d3e4b0776584bd6f15"},{"problem":20,"code":"(fn [l] (if (next (next l)) (recur (next l)) (first l)))","user":"5995f8ade4b0b211ea3aaae9"},{"code":"(fn pen [[x & xs]]\n          (cond (empty? xs) x\n                (empty? (rest xs)) x\n                :else (pen xs)))","problem":20,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":20,"code":"(fn second-element [coll]\n  (nth coll (-  (count coll)2)))","user":"5634995fe4b0bfe05bf117be"},{"problem":20,"code":"#(.get% (- (count%) 2))","user":"572ca54ae4b0cd1946bd0f59"},{"code":"(fn [x] (if-not (empty? x) (nth x (- (count x) 2))))","problem":20,"user":"5357fd93e4b04ce2eb3ed285"},{"code":"(fn [s] (first(take-last 2 s)))","problem":20,"user":"4f030d65535dcb61093f6a4e"},{"problem":20,"code":"(fn [s] (loop [h (first s) t (rest s)] (let [th (first t) tt (rest t)] (if (empty? tt) h (recur th tt)))))","user":"4ee7c6dd535d93acb0a6686c"},{"code":"(comp (comp first reverse) #(take 2 %) reverse)","problem":20,"user":"539ac065e4b0b51d73faaf16"},{"problem":20,"code":"(fn [tmpseq] (first (take-last 2 tmpseq)))","user":"55c88e32e4b0e31453f649e1"},{"problem":20,"code":"(fn [testseq]\n  (loop [x testseq]\n    (if (= (count (rest x)) 1)\n      (first x)\n      (recur (rest x))\n      )\n    )\n  )","user":"5425d65ce4b01498b1a71b14"},{"problem":20,"code":"(fn second-to-last [[x & xs]]\n  (if (= 1 (count xs)) x (second-to-last xs))\n)","user":"58b783f2e4b0ebc645576d7f"},{"code":"(fn sn [s] (second (reverse s)))","problem":20,"user":"4f9fe06fe4b0dcca54ed6d3f"},{"code":"(fn penultimate [l] (if (empty? (rest (rest l))) (first l) (penultimate (rest l))))","problem":20,"user":"508a96ade4b016a2107004b3"},{"code":"(fn ultimate [x]\n  (if (= (rest (rest x)) '())\n    (first x)\n    (ultimate (rest x))))","problem":20,"user":"4fac81cee4b081705acca22b"},{"problem":20,"code":"( comp first rest reverse)","user":"54c0b6a2e4b0ed20f4ff6f16"},{"problem":20,"code":"(fn penultime [[x & l]] \n  (cond \n    (= 1 (count l)) x \n    (empty? l) nil \n    :default (recur l)))","user":"53fe1c3be4b0de5c418485f2"},{"problem":20,"code":"(fn but-last* [lst]\n  (if (empty? (nnext lst))\n    (first lst)\n    (but-last* (next lst))))","user":"5895477fe4b00487982d527c"},{"code":"(fn sec[x]\n  (  first (next (reverse x))  )\n  )","problem":20,"user":"4e40d306535dc968683fc49b"},{"code":"(fn [s0]\n  (loop [s s0\n         res nil]\n    (let [f (first s)\n          r (next s)]\n      (if (nil? r)\n        res\n        (recur r f)))))","problem":20,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [list] ( nth list (dec (dec (count list))) ))","problem":20,"user":"5184df3ee4b02826a645f39b"},{"code":"(fn [x] (second (reduce conj () x)))","problem":20,"user":"4e692c0d535d8ccf87e9fe99"},{"code":"(fn ([arg] (last (butlast arg))))","problem":20,"user":"4f7d065ce4b06e829148e1b9"},{"code":"(fn [lst]\n  (nth lst (- (count lst) 2)))","problem":20,"user":"50a90241e4b0a9a42786e8dc"},{"code":"(fn [x] \r\n  (loop [z x]\r\n    (if (= 2 (count z))\r\n        (first z)\r\n        (recur (next z))\r\n  ))\r\n)","problem":20,"user":"4deb6b40535d08e6dec9fe05"},{"code":"(fn [[h & t]] (if (empty? (rest t)) h (recur t)))","problem":20,"user":"536de1c3e4b0fc7073fd6e64"},{"code":"(fn f [coll] (if (> 3 (count coll))\n               (first coll)\n               (f (rest coll))))","problem":20,"user":"513f0565e4b051389b345b3b"},{"problem":20,"code":"(fn [sequence] (last (drop-last sequence)))","user":"5bc9fb3be4b07a9b28b100e3"},{"code":"(fn reqt [x]\n  (second(reverse x))\n)","problem":20,"user":"4ee259a1535d10e5ff6f5366"},{"problem":20,"code":"(fn [elements] (second (reverse elements)))","user":"549aa638e4b0f3d1d8e70f70"},{"problem":20,"code":"(fn [xs] (first (next (reverse xs))))","user":"5488872ee4b0e286459a11d3"},{"problem":20,"code":"#( first (take-last 2 %))","user":"5a14a48fe4b0ff51aa4b31a1"},{"problem":20,"code":"(fn b\n  ([[x y & tail] m] \n  (if (= tail nil) (if (= y nil) m x) (b tail y)))\n  ([a]\n  (b a nil)))","user":"591b60f6e4b09b4ee5954bec"},{"code":"(fn [sq] (nth sq (- (count sq) 2)))","problem":20,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"#( first (rest (reverse %)))","problem":20,"user":"4fc18846e4b081705acca331"},{"code":"(fn [coll] (if (not (empty? (rest (rest coll)))) (recur (rest coll)) (first coll)))","problem":20,"user":"4f985527e4b0dcca54ed6cf1"},{"problem":20,"code":"(fn [coll]\n  (cond\n    (<= (count coll) 1) nil\n    (== (count coll) 2) (first coll)\n    :else\n    (recur (rest coll))))","user":"565654dae4b0f9d632dd849f"},{"problem":20,"code":"(fn [my-seq]\n  (let [[part & remaining] my-seq]\n    (if (= (count remaining) 1)\n      part\n      (recur remaining))))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn nam [x] (second (reverse x)))","problem":20,"user":"52ff5c03e4b0d8b024fd3705"},{"code":"(fn [s] \n  (if (> (count s) 1)\n    (nth s (- (count s) 2)\n    (nth s 0))))","problem":20,"user":"513294fce4b039bac947cbb8"},{"problem":20,"code":"(fn penultimo [[head & [sub-head & sub-tail :as tail]]] (if (nil? tail) nil (if (nil? sub-tail) head (penultimo tail))))","user":"57d0fce5e4b0bd073c202364"},{"problem":20,"code":"(fn [x]\n  (loop [prev nil coll x]\n    (if (empty? (rest coll))\n      prev\n      (recur (first coll) (rest coll)))))","user":"556a6137e4b09a3098a524e0"},{"problem":20,"code":"#(->> (reverse %) (second))","user":"55171140e4b06a49daca83be"},{"code":"(fn [x] (peek(pop(vec x))))","problem":20,"user":"4e70af68535d5021c1a8963d"},{"problem":20,"code":"(fn [s]\r\n  (loop [[x1 x2 & xs] s]\r\n    (if (empty? xs)\r\n      x1\r\n      (recur (cons x2 xs)))))","user":"55f7ca86e4b06e875b46ceb1"},{"code":"(fn pent [x] (first ( rest ( reverse x))))","problem":20,"user":"529ac5d4e4b02ebb4ef7509b"},{"code":"(fn[a] (nth a (- (count a) 2)))","problem":20,"user":"4ee3e3b8535d10e5ff6f5373"},{"code":"(fn my_last [x] \n  (cond (= \n    (list (first x) (first (rest x))) x)\n    (first x) :else (my_last (rest x))))","problem":20,"user":"4f038496535dcb61093f6b08"},{"problem":20,"code":"(fn [lst]\n   (loop [lst lst\n          aux 0\n          aux1 0]\n     (if (empty? lst)\n       aux1\n       (recur (rest lst) (first lst) aux))))","user":"57f81524e4b0d3187e900913"},{"code":"(fn penultimate [sq]\n  (cond (or (nil? sq) (nil? (next sq))) \n          nil\n        (nil? (next (next sq))) \n         (first sq)\n        :else\n         (recur (rest sq))))","problem":20,"user":"5144e89be4b021a5ff8301f9"},{"problem":20,"code":"(comp second reverse)\n\n;Alternative solutions:\n\n; (comp peek pop vec) ; vec creates a new vector with the input, pop and peek work as though it's a QUEUE\n\n; #(nth (reverse %) 1) ; nth returns the elem at the specified index","user":"5446158ce4b032a45b8693a6"},{"code":"(fn [coll] (-> (reverse coll) second))","problem":20,"user":"5152bc4ee4b001f44f99bfef"},{"problem":20,"code":"(fn [stufflist]\n  (loop [stuff stufflist]\n    (if (= (rest (rest stuff)) ())\n      (first stuff)\n      (recur (rest stuff)))))","user":"5b2a559be4b063e2438bcc74"},{"problem":20,"code":"#(-> %\n     (reverse)\n     (second))","user":"57204301e4b0c5bde472c093"},{"problem":20,"code":"(fn xo [x](nth x (- (count x) 2)))","user":"551c4068e4b07993ea3788db"},{"code":"(fn [xs]\n  (-> xs\n      reverse\n      rest\n      first))","problem":20,"user":"50e8422de4b0ebbe794eb7de"},{"code":"(fn [x] ((vec (reverse x)) 1))","problem":20,"user":"5248e80de4b05ef8e38e63fd"},{"problem":20,"code":"(fn give-second-last [list] (nth list (- (count list) 2)))","user":"5e15f824e4b0a047bd49f70f"},{"code":"(fn lastEl [a] (if (= (count a) 2) (first a) (lastEl (rest a))))","problem":20,"user":"511c7055e4b00c2a1fa7ff79"},{"problem":20,"code":"(fn [x]\n  (if (= (count x) 2) (first x) (recur (rest x))))","user":"59a0ceeae4b0871e7608b840"},{"problem":20,"code":"(fn [collection] (-> collection (reverse)(rest)(first)))","user":"5df79c31e4b0a607a9a45c9b"},{"problem":20,"code":"(fn [[x & xs]]\n  (if (= (count xs) 1) x\n  \t(recur xs)))","user":"592e2a0de4b072a2710fcf96"},{"code":"(fn [x] (first (next (reverse x))))","problem":20,"user":"4e580746535d8a8b8723a28c"},{"problem":20,"code":";get the item at the index (length - 2)\n\n;(comp first reverse drop-last)\n\n#(nth % (dec (dec (count %))))","user":"5c5b7f51e4b01df32ab7328f"},{"code":"(fn [x] (\n  first (take-last 2 x)\n))","problem":20,"user":"4e80d1c8535db62dc21a62b6"},{"problem":20,"code":"(fn n-last [seqe] (if (= (count seqe) 2) (first seqe) (n-last (rest seqe))))","user":"5beeb182e4b0a6d31fed212f"},{"code":"(fn penult[xs]\n  (first (rest (reverse xs)))\n)","problem":20,"user":"4eef0828535d305ff5cb7f18"},{"code":"#(first (next (reverse %1)))","problem":20,"user":"4fa7de4ce4b081705acca1c9"},{"code":"(fn [l] (-> l reverse second))","problem":20,"user":"4ef5e06d535dced4c769f24a"},{"code":"(fn get-2nd-to-last [coll] (nth coll (- (count coll) 2)))","problem":20,"user":"51554aade4b06c5f6a1490a3"},{"problem":20,"code":"(fn f [seq]\n  (let [current (first seq)\n        next (rest (rest seq))]\n    (if (empty? next)\n      current\n      (f (rest seq)))))","user":"5d126814e4b02c15ef02199b"},{"code":"(fn penultimate [items] (second (rseq (vec items))))","problem":20,"user":"4e7dfd48535db169f9c796fa"},{"problem":20,"code":";(comp last drop-last)\n;#(-> % drop-last last)\n#(->> % drop-last last)","user":"5335cab9e4b0e30313ee6c70"},{"code":"(fn penult [x]\n  (second (reverse x)))","problem":20,"user":"4f1e0b39535d64f603146492"},{"code":"(fn [x]\n  (if (not (second (rest x)))\n      (first x)\n      (recur (rest x))))","problem":20,"user":"4f4e78fee4b03ad3f0c10cc8"},{"code":"(fn [col] (if (> (count col) 2)\n              (recur (rest col))\n              (first col)))","problem":20,"user":"5113cc25e4b0350614f07a86"},{"problem":20,"code":"#(\n  (into [] %)\n  (- (count %) 2) \n  )","user":"57ee4909e4b0bfb2137f5bb4"},{"problem":20,"code":"(fn rev-first [the-sequence] \n\t(first (rest (reverse the-sequence)))\n  )","user":"5dcc651de4b02b31cc3da3c8"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2\n  )))","user":"5dcbbfeee4b02b31cc3da3bc"},{"code":"(fn [x] (first(rest(into () x))) )","problem":20,"user":"516eb196e4b06aac486e5b2e"},{"problem":20,"code":";(fn [seq1] (-> seq1 (reverse) (take 2) (drop 1)))\n(fn [seq1] (get (vec (reverse seq1)) 1))","user":"540efe2ee4b0addc1aec6724"},{"code":"(fn [list] (first (rest (reverse list))))","problem":20,"user":"4f402f75e4b0e243712b1fac"},{"code":"#(first (take-last 2 %))","problem":20,"user":"4dda5d07535d02782fcbe9f2"},{"problem":20,"code":"(fn [lst]\n   (loop [n (count lst) l lst] \n      (if (= n 2)\n         (first l)\n         (recur (dec n) (rest l)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn[x](nth (reverse x) 1))","problem":20,"user":"4f8843aae4b033992c121c61"},{"code":"(fn [s] (if (= 2 (count s)) (first s) (recur (rest s))))","problem":20,"user":"4f0ad052535d0136e6c222f9"},{"code":"(fn ll [x] (last (butlast x)))","problem":20,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":20,"code":"(fn foo [x] (if (< 2 (count x)) (foo (rest x)) (first x)))","user":"557bc06ae4b05c286339e0b8"},{"code":"(fn [x]\n  (first (pop (reverse x))))","problem":20,"user":"52e8cc2fe4b09f7907dd149d"},{"problem":20,"code":";;(comp first next reverse)\n(comp second reverse)","user":"5586cbeae4b059ccff29b1d8"},{"problem":20,"code":"(fn [x]  (nth x (- (count x) 2))  )","user":"5fc860b1e4b049d89c09cd94"},{"code":"(fn lst [l] (second (reverse l)))","problem":20,"user":"4ed34893535d44c135fd68ed"},{"code":"(fn [s] (first (rest (reverse s))))","problem":20,"user":"4e6f7178535d5021c1a8961c"},{"code":"(fn foo [l] (if (empty? (rest (rest l))) (first l) (foo (rest l))))","problem":20,"user":"5167218be4b079759a74a5e5"},{"code":"#( nth % (- (count %) 2))","problem":20,"user":"4fdf566fe4b05e33b9224f99"},{"problem":20,"code":"(fn [s]\n  (loop [s s,g (rest (rest s))]\n    (if (seq s)\n      (if-not (seq g)\n        (first s)\n        (recur (rest s) (rest g)))\n      nil)))","user":"56cb3010e4b0ea9b8538f725"},{"problem":20,"code":"(fn [data]\n  (loop [xs data]\n    (if (= 2 (count xs))\n      (first xs)\n      (recur (next xs)))))","user":"5e0ceca5e4b099d064962f91"},{"code":"#( first (rest (reverse %) ) )","problem":20,"user":"52627650e4b03e8d9a4a7088"},{"code":"(fn pen[x] (first (rest (reverse x))))","problem":20,"user":"4f0f03ce535d0136e6c2232a"},{"problem":20,"code":"(fn [z] ((vec z) (- (count z) 2)))","user":"559e32fce4b08a52bd4f97d1"},{"problem":20,"code":"(fn item-before-last[lst] (second (reverse lst)))","user":"5ec5812de4b08d0ec38692ca"},{"problem":20,"code":"(fn [xs]\n  (let [v (vec xs)]\n    (nth v (- (count v) 2))))","user":"56c21eafe4b05cc29241ee7e"},{"problem":20,"code":"(fn func\n  [args]\n  (if(= (count args) 2)\n    (first args)\n    (func (rest args))))","user":"5c486dece4b0e06e1360a3c0"},{"problem":20,"code":"#( first (rest (reverse %1)))","user":"53d63e6ce4b0e771c3025454"},{"problem":20,"code":"(fn lasty [xs]\n  (if (= 2 (count xs))\n  (first xs)\n  (lasty (rest xs))))","user":"606d7f1ce4b069485764de14"},{"problem":20,"code":"(fn [x] (nth x(-(count x)2)))","user":"5af2ce6be4b0cc2b61a3bc72"},{"code":"(fn my-second [x]\n  (if (= (count x) 2)\n    (first x)\n    (recur (rest x))))","problem":20,"user":"52b9a836e4b07a9af57922c0"},{"code":"(fn f [s]\n  (if (= (count s) 2)\n    (first s)\n    (f (rest s))))","problem":20,"user":"4f038484535dcb61093f6b07"},{"code":"#(if (next (next %))\n  (recur (next %))\n  (first %))","problem":20,"user":"4e46e48b535dc968683fc4b7"},{"problem":20,"code":"(fn [coll]\n  (last \n   (take (- (count coll) 1) coll)))","user":"54973b58e4b0b312c081ff70"},{"problem":20,"code":"(fn fnt [lis] (nth lis (- (count lis) 2)))","user":"58f547b1e4b0438e51c2ced4"},{"problem":20,"code":"(fn [v]\n  (loop [v v]\n    (if (= 2 (count v))\n      (first v)\n      (recur (rest v)))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [list]\n  (loop [x list p nil]\n    (if (nil? (second x))\n      p\n    (recur (rest x) (first x)))))","problem":20,"user":"4f0333f6535dcb61093f6a77"},{"problem":20,"code":"(fn [lst]\n  (loop [x lst]\n    (if (= (count x) 2)\n      (first x)\n      (recur (rest x)))))","user":"57a7f7d8e4b0a96607956218"},{"code":"(fn secondlast[coll](first(rest(reverse coll))))","problem":20,"user":"52c4fe42e4b0c2d177d620e9"},{"problem":20,"code":"(fn [s] (first (pop (reverse s))))","user":"56cf8bc5e4b0ea9b8538f76b"},{"problem":20,"code":"(fn [coll] (->> (reverse coll)\n                 (second)))","user":"58d4d864e4b03c36ff7e594c"},{"problem":20,"code":"#(-> %\n\t(vec)\n    (pop)\n    (peek))","user":"557a1e18e4b05c286339e09e"},{"problem":20,"code":"(fn [coll]\n  (nth coll (dec (dec (count coll))))\n\n  )","user":"57ff7d88e4b0a837a8b30c20"},{"problem":20,"code":"(fn [[a b & r]]\n  (if (empty? r) a (recur (cons b r))))","user":"570243c4e4b08d47c97781dc"},{"problem":20,"code":"(fn [[x & xs]] (if (= 1 (count xs)) x \n                (recur xs)))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [s] (-> s reverse rest first))","problem":20,"user":"4e7e032b535db169f9c796fc"},{"problem":20,"code":"(fn [l] (-> l\n            reverse\n            second))","user":"54d468d0e4b0a52adc2e2000"},{"code":"(fn penultimate\n  ([coll] (penultimate coll (first coll)))\n  ([coll candidate] \n   (if (= (count coll) 1)\n     candidate\n     (penultimate (rest coll) (first coll)))))","problem":20,"user":"508e26c2e4b0f17d83ea26ca"},{"code":"(comp first (fn [[a & more]] more) reverse)","problem":20,"user":"50bd13dee4b0594b91591c65"},{"problem":20,"code":"(fn last' [xs] (if-not (nnext xs) (first xs) (last' (next xs))))","user":"5f300f28e4b033932238a682"},{"problem":20,"code":"(fn pen-u [x] (first (pop (reverse x))))","user":"58755463e4b01531a375ea63"},{"problem":20,"code":"(fn f [xs]\n  (if (= (count (rest xs)) 1)\n    (first xs)\n    (f (rest xs))))","user":"562ace2ce4b00e49c7cb4830"},{"code":"#(if (= 2 (.size %)) (first %) (recur (rest %)))","problem":20,"user":"4fb3c249e4b081705acca2a3"},{"code":"(fn [lst]\r\n  (let [x (first lst), y (second lst), xs (rest lst)]\r\n    (if (= 1 (count xs))\r\n      x\r\n      (recur xs))))","problem":20,"user":"526866d1e4b03e8d9a4a71a1"},{"problem":20,"code":"(fn [ls]\n  (if (= (count ls) 2)\n    (first ls)\n    (recur (rest ls))))","user":"54ea5e91e4b024c67c0cf840"},{"problem":20,"code":"(fn [list-of-things] (last (drop-last list-of-things)))","user":"5c5a313ae4b01df32ab7326e"},{"problem":20,"code":"(fn [x] ( nth (reverse x) 1))","user":"5ab8804ce4b073f17744267d"},{"problem":20,"code":"(fn [l] (loop [[n & more] l] (if (= 1 (count more)) n (recur more))))","user":"56a51f26e4b0542e1f8d14e0"},{"code":"(fn mylast2 [xs] (first (take-last 2 xs)))","problem":20,"user":"4ef6f5ea535dced4c769f250"},{"problem":20,"code":"(fn f ([l] (f nil l)) ([x l] (if-let [n (next l)] (f (first l) n) x)))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [[a b & rest]] (if (not-empty rest) (recur (cons b rest)) a))","problem":20,"user":"4fc66c43e4b0ee37620e1812"},{"code":"(fn [[a b & r :as v]]\n  (if (not (seq r)) a (recur (rest v))))","problem":20,"user":"4ef0a38e535dced4c769f20b"},{"code":"#(loop [coll %]\n  (let [curr-item (first coll) next-item (second coll)]\n    (if (= (count coll) 2)\n      curr-item\n      (recur (rest coll)))))","problem":20,"user":"4ea87a83535d7eef308072fb"},{"code":"#(loop [se %]\n   (if (= (nth se 2 nil) nil)\n   (first se)\n     (recur (rest se))\n   ))","problem":20,"user":"532439b1e4b09d4e7a9b54da"},{"code":"(fn [col] (second  (reverse col)))","problem":20,"user":"53858594e4b06839e8705f05"},{"code":"#(nth % (-(count %)2))","problem":20,"user":"4fb069b1e4b081705acca266"},{"problem":20,"code":"(fn [items]\n  (let [c (count items)]\n    (nth items (- c 2))))","user":"574e069fe4b02ea11479923d"},{"problem":20,"code":"(fn [coll]\n  (loop [elem (first coll)\n         coll coll]\n    (if (empty? (rest (rest coll)))\n      elem\n      (recur (first (rest coll)) (rest coll)))))","user":"55a12cb1e4b0acc240e3150d"},{"problem":20,"code":"(fn [x]\n  (let [c (count x)]\n    (nth x (- c 2))))","user":"54246fcce4b01498b1a71aed"},{"problem":20,"code":"(fn f [seq]\n  (if (= (second seq) nil)\n    nil\n    (let [x (f (rest seq))]\n      (if (= x nil)\n        (first seq)\n        x))))","user":"589f37e0e4b02bd94d917e79"},{"problem":20,"code":"(fn second-last [list]\n  (first (rest (reverse list))))","user":"55580ef1e4b0deb715856e28"},{"code":"(fn [sequence]\n  (first (rest (reverse sequence))))","problem":20,"user":"4e42f930535dc968683fc49f"},{"code":"(fn penu [seq]\n  (if (> (count seq) 2)\n    (penu (rest seq))\n    (first seq)))","problem":20,"user":"4e8f5eba535d65386fec214c"},{"problem":20,"code":"(fn [coll]\n  (if (> 2 (count coll))\n    nil\n   (if (= 2 (count coll))\n    (first coll)\n   \t(recur (rest coll))\n    )\n   ))","user":"54100c73e4b01498b1a7199e"},{"code":"(fn penultimate [x]\n  (if (= 2 (count x))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"4fb12b35e4b081705acca275"},{"problem":20,"code":"(fn penultimate [ls] (second (reverse ls)))","user":"5441d720e4b032a45b869374"},{"problem":20,"code":"(fn[l](first(next(reverse l))))","user":"55ec8b25e4b0121d4835fdc9"},{"problem":20,"code":"(fn sndl [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (sndl (rest xs))))","user":"58cf00c8e4b03c36ff7e58ac"},{"problem":20,"code":"(fn secondToLast\n  [theSeq]\n  (nth theSeq (dec (count (pop theSeq)))))","user":"573de63fe4b05c31a32c081c"},{"problem":20,"code":"(fn reduce-seq [x] (cond\n                      (= () (rest (rest x))) (first x)\n                      :else (reduce-seq (rest x))\n                   )\n)","user":"58f92297e4b0438e51c2cf43"},{"code":"#(second (rseq (vec %)))","problem":20,"user":"4e370fab535deb9a81d77f38"},{"code":"(fn final [list] (nth list (- (count list) 2)) )","problem":20,"user":"530e0e4ee4b08068f379ecb4"},{"problem":20,"code":"(fn [c]\n  (-> c\n      reverse\n      rest\n      first))","user":"574c3d4ee4b02ea11479921a"},{"problem":20,"code":"(fn [ls]\n\t(second (reverse ls)))","user":"5fba8fe9e4b03f550f448231"},{"code":"(fn lastone [xs]\n  (if (= (count xs) 2)\n    (first xs)\n    (lastone (rest xs))\n    )\n  )","problem":20,"user":"537e0680e4b06839e8705e98"},{"problem":20,"code":"(fn [seq] (nth seq (dec (dec (count seq))) ))","user":"54b45938e4b05787c3b1638f"},{"problem":20,"code":"(fn s-to-last [s]\n  (if (= 2 (count s))\n    (first s)\n    (s-to-last (rest s))\n    )\n  )","user":"55f8fd70e4b03cbcff9738bc"},{"code":"(fn\n  [x]\n  \t(first (rest (reverse x))))","problem":20,"user":"519ec569e4b0acf32bc6a434"},{"code":"(fn last0 [x]\n  (if (= (count x) 2) (first x)\n    (last0 (rest x))))","problem":20,"user":"51b73a91e4b0d906fcd71d33"},{"code":"(fn [coll]\n  (loop [c coll]\n    (if (= 1 (count (rest c)))\n        (first c)\n        (recur (rest c)))))","problem":20,"user":"4ecaa5da535d6d7199dd3707"},{"problem":20,"code":"(fn \n      [seq]\n      (if (< (count seq) 3)\n      (first seq)\n      (recur (rest seq))))","user":"582c203ae4b051871117bf80"},{"code":"(fn second-to-last [[x & xs]]\n  (if (= 1 (count xs))\n    x\n    (second-to-last xs)))","problem":20,"user":"528ed0a8e4b0239c8a67aeea"},{"problem":20,"code":"(fn get-penultimate [x] (nth x (- (count x) 2)))","user":"550cbb3be4b06e50f9beb155"},{"code":"#(first (rest (rseq (vec %))))","problem":20,"user":"4e134884535d04ed9115e7d7"},{"problem":20,"code":"#(nth % (- (dec(count%)) 1))","user":"576d85f2e4b0979f89651567"},{"problem":20,"code":"(fn last-element [l] (nth l (- (count l) 2)))","user":"547f8736e4b0c51c1f4d731d"},{"problem":20,"code":"(fn getlast [s] (if (<= (count s) 2) (first s) (getlast (rest s))))","user":"59468de7e4b07ddc2dafad88"},{"problem":20,"code":"(fn [col]\n  (->\n  col\n  reverse\n  second))","user":"5b85221ce4b047b03b2037c8"},{"code":"(fn mylast [coll]\r\n  (if (= (count coll) 2)\r\n    (first coll)\r\n    (recur (rest coll))))","problem":20,"user":"4f3a8939e4b0e243712b1f0f"},{"code":"#(nth % (dec ( dec ( count %))))","problem":20,"user":"536a15dae4b0243289761ea9"},{"problem":20,"code":"(fn \n  [list]\n  (if (= 2 (count list))\n    (first list)\n    (recur (rest list))))","user":"59f88123e4b0ca45a743a31e"},{"code":"#(nth (reverse %) 1 )","problem":20,"user":"504457c0e4b01f6c9a8b2360"},{"problem":20,"code":"#(->> %\n      drop-last\n      last)","user":"5bacef6fe4b0a20761a234a1"},{"code":"(fn [coll]\n  (let [coll (seq coll)\n        len (count coll)]\n    (nth coll (dec (dec len)))))","problem":20,"user":"53560560e4b04ce2eb3ed25f"},{"problem":20,"code":"(fn [sq] \n  (nth sq (- (count sq) 2))\n       )","user":"5e7bc11be4b085ba37836e1e"},{"problem":20,"code":";; (fn [s] (peek (pop (vec s))))\n\n#(peek (pop (vec %)))","user":"562ae733e4b00e49c7cb4836"},{"problem":20,"code":"(fn [x]\n  (->> x\n       reverse\n       second))","user":"554b8b6be4b0a04f7929958b"},{"problem":20,"code":"(fn penu-ele\n  [coll]\n  (if (nnext coll)\n    (recur (rest coll))\n    (first coll)))","user":"5746cb28e4b009280f9f2b68"},{"problem":20,"code":"(fn [nums]\n  (->> nums (take-last 2) (first)))","user":"548f37c7e4b0e286459a1234"},{"code":"(fn [seq]\n    (nth seq (- (count seq) 2)))","problem":20,"user":"4feded14e4b0d2a5fc2962ec"},{"code":"(fn [x] (first (rest (reverse x))) )","problem":20,"user":"4ecc402c535d23f0362276f9"},{"problem":20,"code":"#(last \n      (take 2 \n            (reverse %)\n            )\n      )","user":"5dea7d1de4b0986d99407f9b"},{"problem":20,"code":"(fn [s]\n  (-> s\n      (reverse)\n      (rest)\n      (first)))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":20,"code":"(fn [lst] (nth  lst (- (count lst) 2)))","user":"56bff105e4b060a8e693e3a4"},{"problem":20,"code":"(fn __ [x]\n  (second (reverse x)))","user":"5d615431e4b0c9e5857d5010"},{"problem":20,"code":"(fn [n] (loop [lst n\n               this '()\n               prev '()]\n          (cond\n           (empty? lst) prev\n           :else (recur (rest lst) (first lst) this))))","user":"541df0b5e4b01498b1a71a86"},{"problem":20,"code":"(fn [l]\n  (loop [[first second & last] l] \n    (if (= last nil)\n      first\n      (recur (conj last second)))))","user":"56a1227fe4b0542e1f8d14ac"},{"problem":20,"code":"(fn [items] (-> items reverse rest first))","user":"54b4046de4b05787c3b16389"},{"problem":20,"code":"(fn [args]\n   (second (reverse args)))","user":"5b86462de4b047b03b2037df"},{"code":"(fn [col] (nth col (- (count col) 2)))","problem":20,"user":"4ec51590535d6d7199dd3683"},{"problem":20,"code":"(fn [sq]\n\t\t\t\t(loop [s sq]\n\t\t\t\t\t(if (= (first(rest s)) (last s))\n\t\t\t\t\t(first s)\n\t\t\t\t\t(recur (rest s))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)","user":"560331dee4b04bb52996e1b5"},{"code":"(fn [[x & xs]]\n  (if (next xs)\n    (recur xs)\n    x))","problem":20,"user":"5346f409e4b084c2834f4a46"},{"code":"(fn l [s]\n  ( nth s (- (count s) 2 )))","problem":20,"user":"536c35c3e4b0fc7073fd6e3a"},{"code":"(fn [x] (first(rest(reverse x))))","problem":20,"user":"4e931ebb535dbda64a6f6b08"},{"code":"(fn penult [x]\r\n  (if (= (rest (rest x)) '()) (first x) (penult (rest x))))","problem":20,"user":"4e17d0c0535d04ed9115e7f0"},{"code":"(fn [coll] (nth coll (dec (dec (count coll)))))","problem":20,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn [colls] \n  (nth colls (- (count colls) 2)))","problem":20,"user":"4e4d1304535dc968683fc4e1"},{"problem":20,"code":"(fn [list]\n  (nth list (- (count list) 2))\n)","user":"54060ae8e4b0addc1aec668e"},{"code":"(fn [list]\n  (last (drop-last  list)))","problem":20,"user":"527ced14e4b0757a1b171376"},{"code":"(fn penultimate [l]\n  (if (= (count l) 2) (first l)\n    (penultimate (rest l))))","problem":20,"user":"50d2fa5ce4b049d4ed5650cf"},{"code":"#(nth % (dec (dec ( reduce +  (map (fn [x] 1 ) %) ))))","problem":20,"user":"4dfd7ecf535d04ed9115e783"},{"code":";#(nth (reverse %) 1)\n#(last (butlast %))","problem":20,"user":"4ebadde5535dfed6da9c6d6b"},{"problem":20,"code":"#(.get %(- (- (count %) 1) 1))","user":"572d6d62e4b0cd1946bd0f71"},{"code":"(fn [x]\n  (nth\n    (reverse x)\n  1)\n)","problem":20,"user":"4edf92f0535d10e5ff6f5341"},{"code":"(fn d [s] (second (reverse s)))","problem":20,"user":"4ef2eb4d535dced4c769f226"},{"code":"#(loop [c (next %1) f (first %1)] (if (= 1 (count c)) f (recur (next c) (first c))))","problem":20,"user":"4f3b5219e4b0e243712b1f2a"},{"problem":20,"code":"(fn [col] (nth col (- (count col) 2) ))","user":"5ad0a233e4b0ea6055cfab97"},{"code":"#(if (next (next %)) \n         (recur (next %))\n         (first %))","problem":20,"user":"4eea437b535d93acb0a6689a"},{"problem":20,"code":"(fn secondtolast [X]\n    (nth X (- (count X) 2))\n  )","user":"5a05a807e4b01bb0ae8afdb8"},{"code":"(fn [data]\n  (loop [d data]\n    (if (nnext d)\n      (recur (rest d))\n      (first d))))","problem":20,"user":"4eb1dd39535d7eef30807345"},{"problem":20,"code":"(fn penlast [xs]\n  (if (= (rest (rest xs)) '())\n      (first xs)\n      (penlast (rest xs))))","user":"544b94ebe4b0e39780006966"},{"problem":20,"code":"(fn [x]\n  (loop [l x n (first x)]\n    (if (empty? (rest l))\n      n\n      (recur (rest l) (first l)))))","user":"5590e55de4b0277789237676"},{"code":"(fn pen [list] (-> list reverse rest first))","problem":20,"user":"4ec6cfda535d6d7199dd36d8"},{"code":"(fn lst [x] (if (= (count x) 2) (first x) (recur (rest x))))","problem":20,"user":"50df7963e4b061dbdced7227"},{"code":"#(second (take 2 (reverse %)))","problem":20,"user":"5099e663e4b0efbae1fbc0a4"},{"problem":20,"code":"(fn birnarsa [[ & n]] (nth n (- (count n) 2)))","user":"5d93967be4b0d3f9b434ad17"},{"code":"(fn l [c]\n  \t(if (empty? (rest (rest c)))\n  \t\t(first c)\n  \t\t(l (rest c))))","problem":20,"user":"51efdbbee4b0249c592fbdec"},{"problem":20,"code":"(fn second-last [x] (first (rest(reverse x))))","user":"53c6b1fae4b00fb29b22129f"},{"code":"(fn [c] \n  (if (next (next c))\n\t\t(recur (next c))\n\t\t(first c)\n\t))","problem":20,"user":"4e53ea3f535d8a8b8723a277"},{"problem":20,"code":"(fn [coll]\n  (if (next (next coll))\n    (recur (rest coll))\n    (first coll)))","user":"546ed28be4b00cfc9eacc1a5"},{"problem":20,"code":"(fn second-to-last [ls]\n  (loop [l ls\n         prev nil]\n    (let [[x & rst] l]\n      (if (nil? rst) prev\n          (recur rst x)))))","user":"5e8def8de4b0cb0169546332"},{"problem":20,"code":"#(loop [x %]\n    (if (= 1 (count (rest x)))\n      (first x)\n      (recur (rest x))))","user":"590260cde4b0438e51c2d057"},{"problem":20,"code":"(fn my-penultimate [ls]\n  (if\n    (empty? (rest (rest ls)))\n    (first ls)\n    (my-penultimate (rest ls))))","user":"573c57ace4b0cd1946bd10c0"},{"problem":20,"code":"(fn penult-ele \n    [l]\n    (if (<= (count l) 2)\n        (first l)\n        (penult-ele (rest l))\n    )    \n)","user":"5c3453fee4b0d62ef62d9f53"},{"code":"(fn [elements]\n  (first (rest (reverse elements))))","problem":20,"user":"50a01937e4b08df8156e9e47"},{"problem":20,"code":"(fn [stuff] (-> stuff reverse rest first))","user":"55c21ecce4b0e31453f64975"},{"problem":20,"code":"(fn [[r & rs]] (if (= (count rs) 1) r (recur rs) )  )","user":"570eeb66e4b0b0fb43fd06fa"},{"problem":20,"code":"(fn lst [l] (if (>= 2 (count l)) (first l) (lst (rest l))))","user":"54d95ce8e4b024c67c0cf74a"},{"problem":20,"code":"(fn [vals] (nth vals (-(count vals)2)))","user":"568d4742e4b0dcc4269f40c2"},{"problem":20,"code":";#(nth % (- (count %) 2))\n(fn secondlast [x] \n  (if (empty? x) x\n    (if (empty? (rest x)) nil\n      (if (empty? (rest (rest x))) (first x)\n        (secondlast (rest x))\n      )\n    )\n  )\n)","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":20,"code":"(fn penultimate\n  [some-sequence]\n  (second (reverse some-sequence)))","user":"5c9a638fe4b048ec896c5aae"},{"problem":20,"code":"(fn retLast [a] (if (= 2 (count a)) (first a) (retLast (rest a))))","user":"5537982ae4b09218d5f44fcc"},{"code":"#(loop [cnt (reverse %1), acc 1]\r\n  (if (zero? acc)\r\n    (first cnt)\r\n    (recur (rest cnt) (dec acc)))\r\n)","problem":20,"user":"500c5b4ae4b03d00572d2d88"},{"problem":20,"code":"(fn secondLast [x] (last (butlast x)))","user":"5400fd43e4b0de5c4184861c"},{"code":"(fn[coll] (nth coll (- (count coll) 2)))","problem":20,"user":"5307c7fce4b02e82168697a6"},{"problem":20,"code":"(fn last-item [x] (nth x ( - (count x) 2 ) ) )","user":"569d1a01e4b0542e1f8d1473"},{"problem":20,"code":"(fn find-2nd-last [lst] (if (empty? (rest (rest lst))) (first lst) (find-2nd-last (rest lst))))","user":"5e010c58e4b0a607a9a45d33"},{"code":"(fn [list] (nth (reverse list), 1))","problem":20,"user":"4f0385b9535dcb61093f6b0e"},{"code":"(fn pen-elem [x]\r\n  (nth x (- (count x) 2)))","problem":20,"user":"4e8ddf32535d65386fec213c"},{"problem":20,"code":"(fn [mylist]\n  (reduce (fn [prev-elem next-elem]\n            (if (= next-elem (last mylist))\n              prev-elem\n              next-elem))\n          mylist))","user":"5b7ef8e6e4b047b03b203765"},{"problem":20,"code":"(fn my-rest [s] (nth (reverse s) 1))","user":"57985f98e4b039eba2ecb114"},{"problem":20,"code":"#(\n  if (next (next %))\n  \t(recur (next %))\n  \t(first %))","user":"59b94a04e4b0a024fb6ae3c9"},{"code":"#(last (butlast\t%))","problem":20,"user":"52daf558e4b09f7907dd13c1"},{"problem":20,"code":"(fn [x] \n  (if (= 2 (count x))\n    (first x)\n    (recur (rest x))\n    )\n  )","user":"559bf6d6e4b066d22e731f5d"},{"problem":20,"code":"(fn penultimate [seq] (if (= (count (rest seq)) 1) (first seq) (penultimate (rest seq))))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"problem":20,"code":"(fn [xs] (nth xs (- (.size xs) 2)))","user":"5e6b9955e4b04a83ad7cd27b"},{"problem":20,"code":"(fn [list] (nth list (- (dec (count list)) 1)))","user":"5a566b1ae4b05d388ecb6c4f"},{"code":"(comp fnext reverse)","problem":20,"user":"4e498df9535dc968683fc4c4"},{"problem":20,"code":"(fn abc [x]\n  (if (= (count x) 2)\n    (first x)\n    (abc (rest x))\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"code":"(fn\n  [x]\n  (nth (reverse x) 1))","problem":20,"user":"52fc5fa0e4b047fd55837017"},{"problem":20,"code":";(fn [x] (second (reverse x)))\n\n;(fn [[x & xs]] \n;  (if (= '() (rest xs))\n;    x\n;    (recur xs)))\n\n(fn [[x & xs]]\n  (if (= '() (rest xs))\t; x is something, need to check if xs = [something '()]\n    x\t\t\t\t\t; if it is, then we return x, the 2nd to last element\n    (recur xs)))\t\t; otherwise keep moving","user":"5d9a49c4e4b0d3f9b434ad45"},{"code":"(fn [list]\n  (second (reverse list)))","problem":20,"user":"4f70e701e4b07046d9f4f002"},{"problem":20,"code":"(fn predzadnji [sez]\n  (cond\n   (empty? (rest (rest sez))) (first sez)\n   :else\n    (predzadnji (rest sez))))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":20,"code":"(fn [[f s & tail]] (if (nil? tail) f (recur (cons s tail))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [s]\n  (first (rest (reverse s))))","problem":20,"user":"4e496376535dc968683fc4c0"},{"problem":20,"code":"(fn second-element [elements] (second (reverse elements)))","user":"58f8ed54e4b0438e51c2cf3b"},{"code":"(fn [col]\n  (loop [x col]\n    (if (next (next x))\n      (recur (next x))\n    (first x))))","problem":20,"user":"4e399009535deb9a81d77f3f"},{"code":"(fn next-to-last [xs]\n  (if (next (next xs))\n    (recur (next xs))\n    (first xs)))","problem":20,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"(fn return-last [seq] (nth seq (- (count seq) 2)))","problem":20,"user":"5106c489e4b01150e115ebed"},{"code":"#(get (vec (rseq (vec %))) 1)","problem":20,"user":"5131e14be4b06942423563cb"},{"problem":20,"code":"#(get (apply vector %) (- (count %) 2))","user":"59c734e3e4b0a024fb6ae53f"},{"code":"(fn\n  [x]\n  (first\n   (drop\n    (- (count x) 2)\n    x\n    )\n   )\n  )","problem":20,"user":"533e2ccee4b085b17e897d8a"},{"code":"(comp (partial (fn [i c] (nth c i)) 1) reverse vec)","problem":20,"user":"4e929dd0535dbda64a6f6b05"},{"problem":20,"code":"(fn [lst]\n        (loop [rem lst]\n          (let [sz (count rem)]\n            (cond\n              (< sz 2) nil\n              (= sz 2) (first rem)\n              :else (recur (rest rem))))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":20,"code":"(fn secondToLast [collection] (second (reverse collection)))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn [lst]\n  (cond\n    (empty? lst) '()\n    (empty? (rest lst)) '()\n    (empty? (rest (rest lst))) (first lst)\n    :else (recur (rest lst))))","problem":20,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn lst [x] (last (butlast x)))","problem":20,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn sec2last [x] (.get x (- (count x) 2)))","problem":20,"user":"50ea3dd8e4b02d54280826dc"},{"code":"(fn get_penultimate [l] (if (= [] (rest (rest l))) (first l) (get_penultimate (rest l))))","problem":20,"user":"4ec1b090535dfed6da9c6db5"},{"problem":20,"code":"(fn pn [leest] ( let [n (rest leest)] ( if (= (rest n) []) (first leest) (recur n)) ))","user":"550f80c1e4b06e50f9beb178"},{"problem":20,"code":"(fn [xs]\n(nth xs (\n                 dec(  dec (\n                        count xs\n                       ) \n                   ))\n     ))","user":"549c181ce4b0f3d1d8e70f83"},{"problem":20,"code":"(fn [s] \n  (let [a (first s)\n        b (next s)\n        c (next b)\n       ]\n    (if c\n      (recur b)\n      a\n    )\n  )\n)","user":"567b9ff7e4b05957ce8c61a9"},{"problem":20,"code":"(fn [a-seq] (->> a-seq\n                 reverse\n                 rest\n                 first))","user":"59a58bf0e4b066c664927d64"},{"problem":20,"code":"(fn akhir2 [x] (nth x (- (count x) 2) ))","user":"5c334570e4b0d62ef62d9f46"},{"problem":20,"code":"(fn [[x & y]] (if (= (count y) 1) x (recur y)))","user":"53e8c684e4b036ad0777e48b"},{"problem":20,"code":"(fn penult [list]\n  (second (reverse list)))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":20,"code":";; (fn merr [coll]\n;;   (if-let [x (nth coll (- (count coll) 2) nil)]\n;;    x\n;;    (recur (pop coll))))\n\n;; (comp second reverse)\n;; #(second (reverse %))\n#(nth % (- (count %) 2))","user":"60ad1b70e4b00e9e6653c48d"},{"code":"(fn [s] ((comp second reverse) s))","problem":20,"user":"4f0b3c88535d0136e6c22301"},{"problem":20,"code":"(fn lst [s] (if (= (count s) 2) (first s) (recur (rest s))))","user":"54d109a4e4b0e8a36923e5da"},{"code":"#(if (> (count %) 0)\n  (-> % reverse pop first)\n  nil)","problem":20,"user":"4fccb31be4b0ee37620e1868"},{"problem":20,"code":"#(loop [[e1 e2 & realseq] %]\n                            (do\n                              (println e1 e2 realseq)\n\n                              (if\n                                (empty? realseq)\n                                e1\n                                (recur (cons e2 realseq))\n                                )\n                              ))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn [[x y & r]]\n\t(do \n\t\t(println x \", \" y \", \" r)\n  (if (seq r)\n    (recur (cons y r))\n    x))\n    )","problem":20,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":20,"code":"(fn [xs] (-> xs (drop-last) (last)))","user":"5788f357e4b0ebec4cfb7527"},{"problem":20,"code":"#(nth %1 (- (count %1) 2)  )","user":"587cf1b1e4b01531a375eb2b"},{"problem":20,"code":"#(second \n  (reverse %))","user":"53c6dcf9e4b00fb29b2212a3"},{"code":"(fn getSLast [x]\n  ( second (reverse x)))","problem":20,"user":"537e8bc4e4b06839e8705ea8"},{"code":"(fn last-to-seond [col]\n  (let [len (count col)]\n    \t(nth col (- len 2))))","problem":20,"user":"530837c7e4b02e82168697ae"},{"code":"(fn [colls] (first (rest (reverse colls))))","problem":20,"user":"4f4b2bd4e4b03ad3f0c10c6f"},{"code":"(fn [x] (.get x (-(count x) 2)))","problem":20,"user":"5203621ee4b0fb7e47ea51f5"},{"code":"(fn [x] (last (pop (into [] x))))","problem":20,"user":"513dfe2ce4b0825f97f7f966"},{"problem":20,"code":"(fn [collection]\n  (last (butlast collection)))","user":"5dba063ee4b010eb3c36cd5c"},{"code":"(fn fu [x] (second (reverse x)))","problem":20,"user":"50edba8ce4b06330c1f87c47"},{"problem":20,"code":"(fn second-last [col] (nth col (- (count col) 2)))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":20,"code":"(fn[n] (nth n (- (count n) 2)))","user":"5d05d005e4b0cc9c915881e6"},{"problem":20,"code":"(fn[ls](nth (reverse ls) 1))","user":"56a8b735e4b07966d5a8a06c"},{"code":"(fn [data] (nth data (- (count data) 2)))","problem":20,"user":"52630f30e4b03e8d9a4a70a4"},{"problem":20,"code":"(fn penultimate [coll]\n  (let [count-coll (count coll)]\n    (cond (< count-coll 2) nil\n          (= count-coll 2) (first coll)\n          :else (penultimate (rest coll)))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":20,"code":";; #(second (reverse %))\n#(-> % (reverse) (second))","user":"59dcbfe8e4b0ef0a1e9b5ca5"},{"problem":20,"code":"(fn [lst]\n  (if (empty? (rest (rest lst)))\n    (first lst)\n    (recur (rest lst))))","user":"58ef0b8ce4b056aecfd47dbf"},{"problem":20,"code":"(fn stl [x] (nth (vec x) (-(count (vec x)) 2)))","user":"56942b5fe4b0dcc4269f411c"},{"problem":20,"code":"(fn penul [s] \n  (case (count s)\n  2 (first s)\n  (penul (rest s))))","user":"5f4ebab5e4b0102c7503396a"},{"code":"(fn penultimate [li] (first (pop (reverse li))))","problem":20,"user":"4fea09b2e4b0547ebccb2485"},{"code":"(fn [s] (get (vec s) (dec(dec (count s)))))","problem":20,"user":"4f0376a5535dcb61093f6add"},{"code":"(fn penult\n  [[x & rest]]\n  (if (= 1 (count rest))\n    x\n    (penult rest)))","problem":20,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":20,"code":"(fn [s]\n  (let [after-next (next (next s))]\n    (if after-next\n      (recur (next s))\n      (first s))))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":20,"code":"(fn [lst] \n  (let* [smaller (rest lst) \n         even-smaller (rest smaller)] \n        (if (empty? even-smaller) \n          (first lst) \n          (recur smaller))))","user":"5243233fe4b076204b44faac"},{"problem":20,"code":"(fn [[a b & more]] (if more (recur (cons b more)) a))","user":"4f19621a535d64f603146466"},{"problem":20,"code":"apply (fn temp [x & xs] (if (empty? (rest xs)) x (apply temp (first xs) (rest xs))))","user":"54c92da5e4b045293a27f65b"},{"problem":20,"code":"(fn [xs] (first (reduce (fn  [[_ x] y] [x y]) [nil, nil] xs)))","user":"6028365be4b0d5df2af22242"},{"problem":20,"code":"(fn [[x & more]] (if (> (count more) 1) (recur more) x))","user":"559ede8fe4b0acc240e314e4"},{"code":"(fn [x] ((comp second reverse)x))","problem":20,"user":"519c5a08e4b0a1d87b00345b"},{"problem":20,"code":"(fn [ss] (nth (reverse ss) 1))","user":"5679a4d0e4b05957ce8c618d"},{"problem":20,"code":"(fn [vec] (first (take-last 2 vec)))","user":"559fb147e4b0acc240e314ea"},{"code":"(fn [l]\n  (first (drop 1 (reverse l))))","problem":20,"user":"4fb41dace4b081705acca2aa"},{"code":"(fn n0[l] (nth l (- (count l) 2)))","problem":20,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":20,"code":"(fn [xs]\n    (let [[a b & ys] xs\n          [z & zs] xs]\n      (if (empty? ys)\n        a\n        (recur zs))))","user":"56bcc2b2e4b0f26550335965"},{"code":"(fn [coll]\r\n  (last (drop-last coll)))","problem":20,"user":"502e4b6fe4b09697bcd83a7e"},{"problem":20,"code":"(fn [[n & more]]\n  (if (= 1 (count more))\n    n\n   (recur more)))","user":"5b15d56be4b0cc2b61a3be74"},{"problem":20,"code":"(fn [coll]\n  (last (drop-last coll)))","user":"572a856be4b0f4d77e65123b"},{"problem":20,"code":"(fn [coll]\n  (if (= (count coll) 2)\n    (first coll)\n    (recur (rest coll))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [x]\n  (if (> (count x) 2)\n    (recur (rest x))\n    (first x)))","problem":20,"user":"4ea0a7c7535d7eef308072ab"},{"code":"(comp last butlast)","problem":20,"user":"4de165f3535d08e6dec9fde6"},{"code":"#(let [x (vec %)]\n  (x (- (count x) 2))\n)","problem":20,"user":"4ef60a02535dced4c769f24b"},{"problem":20,"code":"(fn penult [seq]\n    (if (nil? (next (next seq)))\n      (first seq)\n      (penult (rest seq))\n      )\n    )","user":"6096d37be4b00e9e6653c3f0"},{"problem":20,"code":"#( nth % ( - ( count % ) 2))","user":"56438342e4b0018b46ad8bf4"},{"problem":20,"code":"(fn [sequence]\n    (loop [in sequence]\n        (if (= 2 (count in))\n            (first in)\n            (recur (rest in))\n        )\n    )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"problem":20,"code":"(fn [ls]\n  (loop [nx ls]\n    (if (empty? (rest (rest nx)))\n      (first nx)\n      (recur (rest nx))\n      )))","user":"5b59b89be4b02d533a91bd7d"},{"code":"(fn [L] (nth L (- (count L) 2)))","problem":20,"user":"51b212b1e4b02f8f128bb961"},{"code":"(fn zopa[x] (first (rest (reverse x))))","problem":20,"user":"50466eb7e4b011c5dfee7722"},{"problem":20,"code":"(fn\n  [collection]\n  (let [length (count collection)]\n    (nth collection (- length 2))))","user":"580beb40e4b0849f6811b713"},{"code":"(fn [lst]\n  (last (drop-last (seq lst))))","problem":20,"user":"4e6ac7a8535d8ccf87e9ff03"},{"code":"(fn [x] (nth x (- (.indexOf x (last x) ) 1)))","problem":20,"user":"50f9e331e4b0e7c80cb15a53"},{"problem":20,"code":"(fn second-last [lst]\n  (if (empty? (rest (rest lst)))\n    (first lst)\n    (second-last (rest lst)) ))","user":"57f81549e4b0d3187e900918"},{"code":"#(nth % \n  (- (count %) 2))","problem":20,"user":"4e6a2f93535d8ccf87e9feaa"},{"problem":20,"code":"(fn [seq] (nth seq (-(count seq)2)))","user":"548018dce4b0c51c1f4d732c"},{"problem":20,"code":"#(let [items (count %)]\n    (nth % (- items 2)))","user":"5cd8d4a1e4b05ee0cb3116f3"},{"code":"(fn [lis] (nth lis (- (count lis) 2)))","problem":20,"user":"4f2004a1535d64f6031464a7"},{"problem":20,"code":"#(let [length (count %)\n       index (- length 2)]\n   (nth % index))","user":"5855268be4b07779d4686410"},{"code":"(fn last_elt [x] \n  (\n    if (> (count x) 2)\n      (last_elt (rest x))\n      (first x)\n  )\n)","problem":20,"user":"508fd6bae4b0ea685a20f76b"},{"problem":20,"code":"(fn [s] \n  (second \n     (reverse s)))","user":"573df35ce4b05c31a32c081e"},{"code":"#(nth %(dec(dec(count %))))","problem":20,"user":"4f7250a6e4b07046d9f4f029"},{"code":"(fn [col]\n    (if (next (next col))\n      (recur (next col))\n      (first col)))","problem":20,"user":"4ef4acf8535dced4c769f23c"},{"problem":20,"code":";;(fn second_last [X] (if (empty? (rest (rest X))) (first X) (second_last (rest X))) )\n#(last (butlast %))","user":"55429859e4b0a04f7929951f"},{"problem":20,"code":"(fn [coll]\n  (let [[head snd & tail] coll]\n    (if (nil? snd)\n      nil\n      (if (empty? tail)\n        head\n        (recur (conj tail snd))))))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn [x] \n  (nth (reverse x) 1))","problem":20,"user":"536e56dbe4b0fc7073fd6e6c"},{"code":"(comp #(nth % 1) reverse)","problem":20,"user":"4e8768f6535dceadca469850"},{"code":"(comp first pop reverse)","problem":20,"user":"4f048ebc535dcb61093f6bd2"},{"code":"(fn [[f & rest]]\r\n(if (empty? (next rest))\r\nf\r\n(recur rest)))","problem":20,"user":"4e49bdfb535dc968683fc4ca"},{"code":"(fn [l]\n  (if (empty? (rest (rest l)))\n      (first l)\n      (recur (rest l))))","problem":20,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":20,"code":"(fn [xs]\n  (let [[_ s] (reverse xs)]\n    s))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":20,"code":"(fn [[x y & etc]]\n    (if (empty? etc)\n      x\n      (recur (conj etc y))))","user":"554c296ae4b0a04f792995a1"},{"code":"(fn [my-seq] (second(reverse my-seq)))","problem":20,"user":"528f96b8e4b0239c8a67aef7"},{"problem":20,"code":"(fn asdf[val] (second (reverse val)))","user":"5dd15268e4b0948ae9d9ad4d"},{"problem":20,"code":"(fn [input](loop [elems input counter 1](if (= counter 2)(last elems) (recur (butlast elems) (inc counter)))))","user":"5597cc26e4b031d6649c9b93"},{"code":"(fn second-to-last [l]\n  (if (== (count l) 2)\n    (first l)\n    (second-to-last (rest l))))","problem":20,"user":"50046aa8e4b0678c553fc450"},{"code":"(fn  [input]\n  (nth input (- (count input) 2))\n  )","problem":20,"user":"4f63777be4b0defedf855fe4"},{"code":"(fn ana [[x y & xs]]\n               (if (nil? xs)\n                 x\n                 (ana (into [y] (vec xs)))))","problem":20,"user":"50b09833e4b009df37c708bd"},{"problem":20,"code":"(fn penultimate [x]\n  (second (reverse x))\n)","user":"57758671e4b0979f8965161f"},{"code":"(fn last-2 [coll]\n  (if (= (count coll) 2)\n    (first coll)\n    (last-2 (rest coll))\n  )\n)","problem":20,"user":"52dbd423e4b09f7907dd13c6"},{"code":"#((comp first (partial drop 1) reverse vec) %)","problem":20,"user":"50ed5d1be4b06330c1f87c37"},{"code":"(fn [seq]\n  (nth seq (- (count seq) 2)))","problem":20,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn sl [x] (nth x (- (count x) 2)))","problem":20,"user":"4ec5754b535d6d7199dd36a2"},{"problem":20,"code":"(fn [[a b & r :as col]] (if (empty? r) a (recur (rest col))))","user":"5d838684e4b0915913b1d385"},{"code":"(fn mylast [s]\n  (if  (next (next s))\n    (recur (next s))\n    (first s)))","problem":20,"user":"519c47abe4b0a1d87b00345a"},{"code":"(fn get_last [s] (nth s (dec (dec (count s)))))","problem":20,"user":"517c1a3be4b07ef0e56148d6"},{"code":"(fn [a-list] (first (rest (reverse a-list))))","problem":20,"user":"53713ec8e4b0fc7073fd6eae"},{"problem":20,"code":"(fn penultimate-elm\n  [lst]\n  (if (empty? (rest (rest lst)))\n    (first lst)\n    (penultimate-elm (rest lst))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":20,"code":"(fn [lst]\n  (if (= (second lst) (last lst))\n    (first lst)\n    (recur (rest lst))))","user":"570708fce4b0b0fb43fd0687"},{"problem":20,"code":"(fn secondLast [L] (last (drop-last L)))","user":"55d3cfafe4b0e31453f64a6c"},{"code":"(fn [coll]\n  (if (next (next coll))\n    (recur (next coll))\n    (first coll)))","problem":20,"user":"4e7e4d5c535db169f9c7970f"},{"code":"(comp (comp first pop) reverse)","problem":20,"user":"51768c53e4b085adf681d886"},{"problem":20,"code":";#(nth (reverse %) 1)\n;#(nth % (- (count %) 2))\n#((comp second reverse) %)","user":"555d4421e4b0a2eb076a39a8"},{"problem":20,"code":"(fn last-num [m] (nth m (- (count m) 2)))","user":"57a14414e4b0c3d858beb8e4"},{"code":"(fn penultimate [s]\n  (let [sub (fn [s x] (if (next s) (recur (next s) (first s)) x))]\n    (sub s (first s))))","problem":20,"user":"4e851955535db62dc21a62e9"},{"problem":20,"code":"(fn [seq] (nth seq ( - (count seq) 2)))","user":"5fc1c424e4b0edf42a5593d0"},{"problem":20,"code":"(fn  [x]\n  (nth x (- (count x) 2)))","user":"5ffd7cc0e4b074f607df65fa"},{"problem":20,"code":"(fn [coll] (if (next (next coll))\n                (recur (rest coll))\n                (first coll)\n                ))","user":"5e1cb653e4b0dc959400853b"},{"problem":20,"code":"(fn [v] (nth (reverse v)1))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":20,"code":"(fn [[x1 x2 & xs]] (if (empty? xs) x1 (recur (into [x2] xs))))","user":"57717915e4b0979f896515b3"},{"code":"(fn [[x y & xs]] (if (seq xs) (recur (cons y xs)) x))","problem":20,"user":"52bf29fde4b07a9af579232e"},{"problem":20,"code":"(fn get-penultimate\n  [[x & xs]]\n  (if (= 1 (count xs))\n    x\n    (get-penultimate xs)))","user":"5c0e58bfe4b01240ff567140"},{"problem":20,"code":"(fn [x] (if (= (count x) 2) (first x) (recur (next x))))","user":"5a04f2ebe4b01bb0ae8afdaa"},{"problem":20,"code":"#(nth(reverse %),1)","user":"571aad02e4b07c98581c3b58"},{"code":"(fn [s]\n  (if (next (next s))\n    (recur (next s))\n    (first s))\n  )","problem":20,"user":"4ebd2ff7535dfed6da9c6d8d"},{"problem":20,"code":"(fn [s]\n  (let [cnt (count s)]\n    (if (< cnt 2) nil\n      (nth s (- cnt 2)))))","user":"5a5d693ce4b0512ff01cd923"},{"problem":20,"code":"(fn [xs]\n  (if (<= (count xs) 2)\n    (first xs)\n    (recur (rest xs))))","user":"56be350ce4b0f26550335981"},{"problem":20,"code":"(comp first reverse #(take 2 %) reverse)","user":"53da3fcde4b0e771c3025497"},{"code":"; this is probably really dumb\n#(first (rest (reverse %)))","problem":20,"user":"50464831e4b011c5dfee771f"},{"code":"(fn penultimate [se]\n  (if (> (count se) 2) (penultimate (rest se)) (first se)))","problem":20,"user":"4fe9fce4e4b0547ebccb247e"},{"problem":20,"code":"#(->\n  %\n  (reverse)\n  (nth 1))","user":"55b5fc18e4b01b9910ae298d"},{"problem":20,"code":"(fn pen [list]\n (if\n   (= (count list) 2) \n   (first list)\n   (pen (rest list))\n )\n)","user":"58e6e624e4b056aecfd47cc1"},{"problem":20,"code":"(fn [things] (nth things (- (count things) 2)))","user":"5621251be4b064ca9f4b16ee"},{"problem":20,"code":"#(nth %1 (- (count %1)    2))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn [x] (second (reduce (fn [r val] (cons val r)) '() x)))","problem":20,"user":"4daa6dd430acd6ed14482a68"},{"problem":20,"code":"(fn penultimate\n  [[x & xs]]\n  (if (= (count xs) 1) x (penultimate xs)))","user":"504ee3b7e4b0e7ad84dbc4a3"},{"problem":20,"code":"(fn [input]\n    (loop [p nil q nil lst input]\n      (if (empty? lst)\n        p\n        (recur q (first lst) (rest lst)))))","user":"593352b7e4b072a2710fd052"},{"problem":20,"code":"#(nth % (- (count %) 2) %)","user":"55996253e4b031d6649c9baa"},{"code":"(fn foo [coll] (if (= 1 (count (rest coll))) (first coll) (recur (rest coll))))","problem":20,"user":"4f753535e4b0fbe0118ec558"},{"code":"(fn [x]\n         (nth x (- (count x) 2)))","problem":20,"user":"520332f7e4b030ee0c5b2714"},{"code":"(fn [item] (nth (reverse item) 1))","problem":20,"user":"505f1305e4b08f2a82ad10ac"},{"problem":20,"code":"#( last (reverse (rest (reverse %))))","user":"58cd6093e4b03c36ff7e5888"},{"code":"(fn [x] (first(take-last 2 x) ))","problem":20,"user":"4fe2c929e4b03a47b42452d0"},{"code":"(fn \n  [list]\n  (if (empty? (rest (rest list)))\n              (first list)\n              (recur (rest list))))","problem":20,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn my-penultimate [xs]\n  (if (= nil (next (rest xs)))\n    (first xs)\n    (my-penultimate (rest xs))))","problem":20,"user":"533ce38ce4b085b17e897d77"},{"problem":20,"code":"#(first (take-last 1 (drop-last %)))","user":"566bb501e4b0a866af6896b2"},{"code":"(fn [coll]\n(let [xs (seq coll)]\n\t(if (empty? (rest (rest xs))) \n\t\t(first xs)\n\t\t(recur (rest xs)))))","problem":20,"user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [l] (second (reverse l ) ))","problem":20,"user":"5242e1dae4b076204b44fa96"},{"problem":20,"code":"(fn second-last\n  ([[first-elem & other-elems]] \n     (second-last other-elems first-elem))\n  ([[first-elem & other-elems] latest] \n     (if (= nil other-elems)\n     \tlatest\n     \t(second-last other-elems first-elem))))","user":"55d8bdcae4b0e31453f64abe"},{"code":"(fn second-element [x]\n  (second(reverse x)))","problem":20,"user":"52f928c1e4b047fd55836fe5"},{"code":"(fn [s] (last (take (- (count s) 1) s)))","problem":20,"user":"505fdf63e4b08f2a82ad10b9"},{"problem":20,"code":"(fn [target]\n  ((fn [l s]\n     (if (next l)\n       (recur (next l) (first l))\n       s))\n    target \"\"))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn second-last\n  [col]\n  (let [[h & tail] (seq col)]\n  (if\n    (>= 1 (count tail))\n    h \n    (second-last tail))))","problem":20,"user":"50c7431ae4b00bb60fe0c531"},{"problem":20,"code":"(fn [v]\n  (loop [v v]\n    (if (seq (rest (rest v)))\n      (recur (rest v))\n      (first v))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn seclast [s] (cond (empty? (rest (rest s))) (first s)\n                :else (seclast (rest s))))","problem":20,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn getLast [x] (if (= (rest (rest x)) '()) (first x) (getLast (rest x))))","problem":20,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"problem":20,"code":"(fn [p] \n  ((vec p) (- (count p) 2)))","user":"562405fee4b03f08ee9a9237"},{"problem":20,"code":"(fn  [x] (first (drop 1 (reverse x))))","user":"5552396ae4b0deb715856df1"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2) x))","user":"54b7ceb3e4b0ed20f4ff6e8a"},{"problem":20,"code":"(fn [x]\n      (loop [list x]\n        (if (empty? (rest (rest list)))\n          (first list)\n          (recur (rest list))\n          )\n        )\n      )","user":"55f1085ee4b06e875b46ce2d"},{"code":"(fn [xs]\n  (first (rest (reverse xs))))","problem":20,"user":"4ee63d8d535d93acb0a66859"},{"problem":20,"code":"#((comp last drop-last) %)","user":"54bfd0dee4b0ed20f4ff6f0a"},{"problem":20,"code":"(fn\n   [coll]\n   (if (= (count coll) 2)\n     (first coll)\n     (recur (rest coll))))","user":"56cd110ee4b0ea9b8538f747"},{"code":"(fn sn [ls] (if (= 2 (count ls)) (first ls) (sn (rest ls))))","problem":20,"user":"52229bbbe4b0e6a83c892602"},{"problem":20,"code":"(fn second-to-last [param] (let [coll (seq param) size (count coll)] (if (< size 2) nil (nth coll (- size 2)))))","user":"566e5e8de4b0a866af6896d9"},{"problem":20,"code":"(fn secToLast [[first & rest]]\n  (if (= (count rest) 1)\n    first\n    ( secToLast rest)))","user":"591208ede4b0163c97b36ee5"},{"problem":20,"code":"(fn getPreLastElm [arr] \n  (let [restArr (rest arr)]\n    (if\n      (= nil (seq (rest restArr)))\n      (first arr)\n      (getPreLastElm restArr)\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"code":"(fn [l]\n  (if (= (count l) 2)\n    (first l)\n    (recur (rest l))))","problem":20,"user":"52ccc231e4b07d0d72b27370"},{"code":"(fn [x] (if (= (count x) 2) (first x) (recur (rest x))))","problem":20,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":20,"code":"(fn [lst]\n  (first(rest(reverse lst))))","user":"5ea35381e4b00a66d4a9519a"},{"problem":20,"code":"#(->\n  %\n  drop-last\n  last)","user":"5c6c5964e4b0fca0c162272d"},{"code":"(fn cool [l] (if (nil? (nnext l)) (first l) (cool (next l))))","problem":20,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn [thelist] (first (rest (reverse thelist))))","problem":20,"user":"5138bccde4b0a5db03d727d8"},{"problem":20,"code":"(fn sec2last [s]\n  (second (reverse s)))","user":"58ac1135e4b0005cfeb1a73f"},{"problem":20,"code":"(fn [x] (let [i (count x)] (nth x (- i 2))))","user":"591315a6e4b0163c97b36efa"},{"code":"#(let [n (next %)\n       nn (next n)]\n  (if nn\n    (recur n)\n    (first %)))","problem":20,"user":"4fcd5958e4b065de69964ca7"},{"problem":20,"code":"(fn pen-ult [x] (nth x (- (count x) 2)))","user":"5eb612e3e4b00a66d4a95230"},{"code":"(fn [n] \n      (nth n (- (count n) 2))\n    )","problem":20,"user":"52c98e7ae4b0c2d177d6213d"},{"problem":20,"code":"(fn [x] (first (reverse (pop (vec x)))))","user":"5cb7f580e4b026601754b97a"},{"problem":20,"code":"(fn [n]\n  (first (rest (reverse n))))","user":"5c5a725ce4b01df32ab73273"},{"code":"(fn penultimate [x]\n  (let [end (rest x)]\n    (if \n      (empty? (rest end))\n      (first x)\n      (penultimate end))))","problem":20,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":20,"code":"(fn last-element [num]\n    (if (> (count num) 2) \n        (last-element (rest num))\n        (first num)))","user":"5c255edee4b07e362c2305b2"},{"code":";#(first (drop 1 (reverse %)))\n#(->> % reverse (drop 1) first)","problem":20,"user":"504820c8e4b0ec70b3ef8d9b"},{"problem":20,"code":"(fn [x]\n  (last(butlast x))\n )","user":"5f837b30e4b01aacbe7a2714"},{"problem":20,"code":"(fn penultimate-element [s]\n  (if (next (rest s))\n    (recur (rest s))\n    (first s)))","user":"556b67c9e4b09a3098a524ed"},{"problem":20,"code":"(fn\n\t[lst]\n\t(nth lst (- (count lst) 2)))","user":"57f81544e4b0d3187e900917"},{"code":"(fn [s]\n  (let [f (first s)\n        r (rest (rest s))]\n    (if (seq r)\n      (recur (rest s))\n      f)))","problem":20,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn second-to-last [x]\n  (let [y (rest x)]\n    (if (= 1 (count y))\n      (first x)\n      (recur y))))","problem":20,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":20,"code":"(fn [coll]\n  (-> coll reverse second))","user":"5d2ed122e4b01671435dbcb5"},{"problem":20,"code":"#(loop [[a & l] %]\n   (if (= (count l) 1)\n     a\n     (recur l)))","user":"5bf4cd67e4b0b326c961d89c"},{"code":"(fn next-to-last [x] (second (reverse x)))","problem":20,"user":"4fc584a0e4b0ee37620e17f9"},{"problem":20,"code":"(fn penu \n  [coll] \n  (if (= (second (rest coll)) nil)\n    (first coll)\n    (penu (rest coll))))","user":"5b56331de4b02d533a91bd40"},{"problem":20,"code":"(fn second-last-element [x]\n                      \n (second (reverse x))\n                      \n  )","user":"6034e358e4b0d5df2af222d1"},{"problem":20,"code":"(fn [coll]\n  (when (seq coll)\n    (if-not (nnext coll)\n      (first coll)\n      (recur (next coll)))))","user":"5712854ce4b07c98581c3a89"},{"code":"(fn [x] (if (not (= 2 (count x))) (recur (rest x)) (first x)))","problem":20,"user":"501fed56e4b0cb6ebc0a42f0"},{"code":"#(if (next (next %))\n          (recur (next %))\n          (first %))","problem":20,"user":"4dfd018c535d04ed9115e77f"},{"problem":20,"code":"(fn\n  [coll]\n  (let [[x y & xs] coll]\n    (if (seq xs)\n      (recur (next coll))\n      x)))","user":"52606318e4b03e8d9a4a7036"},{"code":"(fn [x] \n  ((fn [[y & yr]] (first yr)) (reverse x)))","problem":20,"user":"52bb2fc0e4b07a9af57922e0"},{"code":"(fn[x] (nth x (- (count x) 2)))","problem":20,"user":"4e932523535dbda64a6f6b09"},{"code":"(fn lstsnd [xs] (if (= (count xs) 2)\n           (first xs)\n           (lstsnd (next xs))))","problem":20,"user":"521392bce4b0d32679a5065e"},{"problem":20,"code":"(fn [seq] (nth seq (- (count seq) 2) ))","user":"5b8162d0e4b047b03b20378b"},{"code":"(fn [x] (nth x (dec(dec (count x)))))","problem":20,"user":"514b1eede4b0bd81940b86c7"},{"problem":20,"code":"(fn [x] (loop [[head & tail] x ret []] (if (empty? tail) ret (recur tail head))))","user":"5762f9e4e4b0994c1922fbb2"},{"code":"#(first (drop 1 (reverse %)))","problem":20,"user":"4dd61f98535d2dad7130b5c6"},{"code":"#(let [f (first %) r (rest %)] (if (next r) (recur r) f))","problem":20,"user":"502ea967e4b06efe12e8cc76"},{"problem":20,"code":"(fn my-last [[f & r]] (if (= 1 (count r)) f (recur r)))","user":"56646a7fe4b0e91d5f5c5657"},{"problem":20,"code":"(comp second reverse)\n;(fn [coll] (nth coll (- (count coll) 2)))","user":"5e357507e4b0650de70e2b2a"},{"problem":20,"code":"(fn penul [items]\n  (let [[pen _ & tail] items]\n    (if (nil? tail)\n      pen\n      (penul (rest items)))))","user":"56fbe0cce4b07572ad1a88d8"},{"problem":20,"code":"(fn\n  [seq]\n  (second (reverse seq)))","user":"5484143de4b0e286459a1197"},{"problem":20,"code":"(fn [x] \n  (first\n   (rest\n    (reverse x))))","user":"5548c46be4b0a04f79299560"},{"code":"(fn foo [list] \n  (if (> (count (rest list)) 1)\n    (foo (rest list))\n    (first list)\n  )\n)","problem":20,"user":"4e9b87b8535dbda64a6f6b78"},{"problem":20,"code":"(fn\n  [seq]\n  (nth seq (- (count seq) 2))\n  )","user":"55fa4fbbe4b03cbcff9738cf"},{"code":"(fn ul[n] (if (= (count n) 2) (first n) (ul (rest n))))","problem":20,"user":"4e6279e3535d8ccf87e9fe60"},{"problem":20,"code":"(fn[data] (if (next (next data)) (recur (next data)) (first data)))","user":"5832be57e4b089d5ab817c86"},{"problem":20,"code":"(fn [x] \n  (first (take-last 2 x)))","user":"559ba500e4b066d22e731f58"},{"problem":20,"code":"#(nth % (- (count %) 2))\n\n; number of elements: (count %)\n; last index: (dec (count %)) or (- (count %) 1)\n; 2nd to last index: (- (count %) 2)\n; 2nd to last element: (nth x)","user":"59e8efe7e4b0249b72820740"},{"code":"(fn\n  [coll]\n  (first (rest (reverse coll)))\n)","problem":20,"user":"53951c75e4b0b51d73faaed4"},{"problem":20,"code":"(fn [l] (.get l (- (.size l) 2)))","user":"5674a100e4b05957ce8c6142"},{"problem":20,"code":"(fn [seqs]\n  (nth seqs (- (count seqs) 2))\n)","user":"547adcb0e4b0c51c1f4d72cf"},{"code":"#(second(reverse%))","problem":20,"user":"4de59cf2535d08e6dec9fdf2"},{"problem":20,"code":"(fn get-second-last\n  [s]\n  (let [seq-s (seq s)\n        s-len (count seq-s)]\n    (cond\n      (< s-len 2) nil\n      (= s-len 2) (first seq-s)\n      :else (recur (rest seq-s)))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":20,"code":"(fn [coll]\n      (loop [[first-element & rest-elements] coll]\n        (if (= (rest rest-elements) ())\n          first-element\n          (recur rest-elements))))","user":"5af8d190e4b0cc2b61a3bcd7"},{"problem":20,"code":"(comp first (partial reduce (fn [[_ r] x] [r x]) [nil nil]))","user":"5fa416ece4b0f0ebd91b7803"},{"code":"(fn penultimate-element\n  [seq]\n  ((fn nth-element\n     [seq idx]\n     (loop [s seq index idx el nil]\n       (if (= index 0) el\n         (recur (rest s) (dec index) (first s))))) seq (- (count seq) 1)))","problem":20,"user":"50651de3e4b0b1b6c8b1d85f"},{"problem":20,"code":"(fn [seqn] (second (reverse seqn)))","user":"58042984e4b0a837a8b30ca3"},{"problem":20,"code":"(fn lastfn [x] (second (reverse x)))","user":"55882891e4b059ccff29b1f0"},{"problem":20,"code":"#(second(into '() %))","user":"5c61297ce4b0fca0c1622629"},{"code":"(fn [coll]\n  (nth coll (-> (count coll)\n(dec)\n(dec))))","problem":20,"user":"4f608e38e4b0defedf855fa8"},{"problem":20,"code":"(fn f [l] (second (reverse l)))","user":"5ed15e23e4b016b56eae05ba"},{"problem":20,"code":"(fn  f [ls]\n  (if (empty? (rest (rest ls)))\n    (first ls)\n    (f (rest ls))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":20,"code":"(fn [[a b & r]]\n\t(if r\n      (recur (conj (seq r) b))\n      a\n    )\n)","user":"55990d3ce4b031d6649c9ba3"},{"code":"(fn [xs]\n    (let [vxs (vec xs)]\n      (nth vxs (- (count vxs) 2))))","problem":20,"user":"50563d76e4b0ce54f56f0407"},{"problem":20,"code":"(fn second2last[x]\n  (nth x (- (count x) 2)))","user":"5018878ce4b029375d2a5056"},{"problem":20,"code":"(fn find-p [param]\n  (first (rest (reverse param))))","user":"5ac383b8e4b0e27600da7719"},{"problem":20,"code":"#(let [[last & rest] (reverse %)]\n  (first rest))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn f [x]\n  (first (next (reverse x))))","problem":20,"user":"4e2f377a535deb9a81d77f10"},{"problem":20,"code":"(fn second-to-last [sequence]\n  (loop [head (first sequence)\n         tail (rest sequence)]\n    (cond\n      (= (count tail) 0) nil\n      (= (count tail) 1) head\n      :else (recur (first tail) (rest tail)))))","user":"5ddc2ba7e4b0948ae9d9adba"},{"problem":20,"code":"(fn penult [s]\n  (if (= 1 (count (rest s)))\n         (first s)\n         (penult (rest s))))","user":"5e9683f1e4b0157ca96647c7"},{"problem":20,"code":"(fn [coll]\n  (first \n   (rest (reverse coll))))","user":"5defc177e4b093ff717275af"},{"code":"(fn [s]\r\n  (nth (reverse s) 1))","problem":20,"user":"502f4c89e4b0842eb223d8b9"},{"problem":20,"code":"(fn sectolast [x] \n  (if (empty? (rest (rest x)))\n    (first x)\n    (sectolast (rest x))))","user":"5c8cfff8e4b048ec896c5996"},{"problem":20,"code":"#(loop [[first & rest] %]\n   (if (= 1 (count rest))\n     first\n     (recur rest)))","user":"542098afe4b01498b1a71aa7"},{"problem":20,"code":"(fn [x] (peek (pop (reverse x)\n                       )\n              )\n  )","user":"5fdc04d8e4b05ac5b16ea138"},{"problem":20,"code":"#(loop [s %]\n  (if (= 2 (count s))\n    (first s)\n    (recur (rest s))))","user":"550f2333e4b06e50f9beb173"},{"code":"(comp second reverse)\n\n; (comp first next reverse)\n\n; #(-> % reverse second)","problem":20,"user":"52810ceae4b0757a1b17141b"},{"problem":20,"code":"(fn \n  [lst]\n  (loop [remaining lst\n         result nil]\n    (let [[head & tail] remaining]\n      (if (empty? tail)\n        result\n        (recur tail head)))))","user":"5c8005cee4b0c8042a70ce0a"},{"problem":20,"code":"#(nth % (dec (count (rest %))))","user":"56901211e4b0dcc4269f40e7"},{"problem":20,"code":"(fn my-penultimate [[x-1 x-2 & x-r]]\n  (loop [x-1 x-1 x-2 x-2 x-r x-r]\n    (if (empty? x-r)\n      x-1\n      (let [y-1 x-2 [y-2 & y-r] x-r]\n        (recur y-1 y-2 y-r)))))","user":"56714922e4b05957ce8c6107"},{"problem":20,"code":"(fn [xs]\n  (loop [prev nil\n         head (first xs)\n         remaining (rest xs)]\n    (if (seq remaining)\n      (recur head (first remaining) (rest remaining))\n      prev)))","user":"59ad8695e4b0e1f4e384c887"},{"code":"#(loop [l %]\r\n    (if (= (count l) 2)\r\n        (first l)\r\n        (recur (rest l))))","problem":20,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn [x]\n  (nth x (- (.size x) 2)))","problem":20,"user":"50da34e4e4b0f31830755b3c"},{"problem":20,"code":"(fn poop [our-sequence]\n                              (if(=(count our-sequence)2)\n                                (first our-sequence)\n                                (poop (rest our-sequence))\n                                )\n  )","user":"5782ce69e4b0d36ec5835e9a"},{"problem":20,"code":"(fn [x]\n   ( first (drop (- (count x) 2) x) ))","user":"565560ace4b0f9d632dd8496"},{"problem":20,"code":"(fn [a]\n  (first(reverse (butlast a))))","user":"54b2c888e4b09f271ff37d2e"},{"problem":20,"code":"(fn [coll] (second (into '() coll)))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn p[s] (second (reverse s)))","problem":20,"user":"52247d56e4b01819a2de42db"},{"problem":20,"code":"(fn [lst]\n  (let [len (count lst)]\n    (nth lst (- len 2))))","user":"572ee822e4b0cd1946bd0f91"},{"problem":20,"code":"(fn take_second_last_out [seq] (nth seq (- (count seq) 2)))","user":"584e9acae4b0b7285a6f4e54"},{"code":"(fn lastl [x] (nth x (dec(dec(count x)))))","problem":20,"user":"50f4894be4b004d364930528"},{"code":"(fn\r\n  [l]\r\n  (nth l (- (count l) 2)))","problem":20,"user":"4e8a0c82535d3e98b802328d"},{"problem":20,"code":"(fn pen [x] (if (empty? (rest (rest x))) (first x) (pen (rest x))))","user":"57d5ac4de4b0bd073c2023bc"},{"problem":20,"code":"(fn [coll]\n  (if (< (count coll) 2)\n    nil\n  (nth coll (- (count coll) 2))))","user":"56f1b558e4b04a395b9a049a"},{"problem":20,"code":"(fn [s]\n  (loop [[f & r] s]\n    (if (<= (count r) 1)\n      f\n      (recur r)\n    )  \n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":20,"code":"(fn mylast [x] (let [r (rest x)] (if (empty? (rest r)) (first x) (mylast r))))","user":"5651de3ee4b0f9d632dd845b"},{"problem":20,"code":"(fn [x] (nth x (dec (dec(count x)))))","user":"563a3cc2e4b0bfe05bf117fa"},{"problem":20,"code":"(fn [x] (-> x\n            (reverse)\n            (nth 1)))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [x] ( nth x (- (count x) 2)) )","problem":20,"user":"4edc0c16535d10e5ff6f531f"},{"code":";; weird error using (comp second reverse)\n;; but works in repl\n#(let [l (count %)]\n  (nth % (- l 2)))","problem":20,"user":"5005b57de4b0678c553fc46a"},{"code":"(fn lastelem [a] (if (<= (count a) 2) (first a) (lastelem (rest a))))","problem":20,"user":"52586dc4e4b0cb4875a45cb1"},{"code":"#(-> % reverse next first)","problem":20,"user":"4f245d77e4b0d66497709feb"},{"problem":20,"code":"#(nth %\n       (- (count %) 2))","user":"579a8a87e4b05b1deef9ade0"},{"code":"(fn\n  [coll]\n  (if (= 2 (count coll))\n    (first coll)\n    (recur (rest coll))))","problem":20,"user":"4fab943ee4b081705acca219"},{"problem":20,"code":"(fn [x] (first ((comp rest reverse) x)))","user":"53edbb02e4b0d648e757f4ca"},{"problem":20,"code":"(fn [xs] (-> xs reverse rest first))","user":"5cd7cac9e4b0ccb06196294f"},{"problem":20,"code":"(fn [x] (nth x \n             (- (count x) 2)\n             )\n  )","user":"58e88b85e4b056aecfd47cf2"},{"code":"(fn penult [sequence]\n   (condp = (count sequence)\n     0 nil\n     1 (first sequence)\n     2 (first sequence)\n      (penult (rest sequence))))","problem":20,"user":"525644ebe4b0541d1855ba12"},{"code":"(fn pen [s] (second (reverse s)))","problem":20,"user":"507f283be4b0f753b6f97898"},{"code":"(fn mypen [x] (nth x (- (count x) 2)))","problem":20,"user":"4e85c175535db62dc21a62ef"},{"problem":20,"code":"(fn [a-seq]\n  (if (and (= (rest (rest a-seq)) '())\n           (not= (rest a-seq) '()))\n    (first a-seq)\n    (recur (rest a-seq))))","user":"5cea0d52e4b0a17bb84e2bca"},{"code":"(fn f [s] (if (> (count s) 2) (f (rest s)) (first s)))","problem":20,"user":"4daf8e61edd6309eace4d179"},{"code":"(fn [x]\n  (let [[a & [b & rest]] ((fn reverse-this [[x & rest]]\n                            (if (= x nil) rest\n                                          (concat (reverse-this rest) [x]))) x)] b))\n\n;(fn [x] \n; (let [[a & [b & rest]] \n;   (reverse x)] b))","problem":20,"user":"5079fd71e4b08327cd804a66"},{"code":"(fn [x]\n  (if (next (next x))\n    (recur (next x))\n    (first x)))","problem":20,"user":"4f7c7ed7e4b06e829148e1b4"},{"code":"(fn[l](second (reverse l)))","problem":20,"user":"4ecd2735535d23f036227703"},{"code":"(fn [l]\n    (nth\n      l\n      (- (count l) 2)))","problem":20,"user":"4e7e8684535db169f9c79717"},{"code":"(fn [seq]\n  (loop [sq seq]\n    (if (= (rest (rest sq)) '())\n      (first sq)\n      (recur (rest sq)      )\n)\n  ))","problem":20,"user":"4e6daa22535d5021c1a895ef"},{"problem":20,"code":"(fn[_list]\n  (last (butlast _list))\n  )","user":"5bc50870e4b07a9b28b10069"},{"code":"(fn [x] (first (rest (reverse x) )))","problem":20,"user":"52a760a5e4b0c58976d9ac15"},{"code":"(fn [v] (nth v (- (count v) 2)))","problem":20,"user":"4fe9364be4b0547ebccb244e"},{"code":"#(first (drop (- (count %) 2) %))","problem":20,"user":"4df669d4535d08e6dec9fe35"},{"problem":20,"code":"#(loop [coll %] (if (nnext coll) (recur (next coll)) \n  (first coll)))","user":"5742d82ae4b05c31a32c0881"},{"problem":20,"code":"(fn penultimate [lst] (second (reverse lst)))","user":"5784e2a6e4b0ebec4cfb74d0"},{"problem":20,"code":"(fn [z] ((comp second reverse) z))","user":"60567b22e4b069ae89ce6ad8"},{"code":"(fn [x] (nth (reverse x)1))","problem":20,"user":"51ac7e9be4b09397d510976f"},{"code":"(fn [x] \n  (if (= (first (next x)) (last x))\n    (first x)\n    (recur (next x))\n    )\n  )","problem":20,"user":"52abd555e4b0c58976d9ac7e"},{"problem":20,"code":"#(-> (reverse %)\n     (second))","user":"54de16cae4b024c67c0cf79c"},{"code":"(fn [coll]\n  (if (= 2 (count coll))\n    (first coll)\n    (recur (rest coll))))","problem":20,"user":"52d51535e4b09f7907dd133a"},{"code":"(fn secondToLast [x] (second (reverse x)))","problem":20,"user":"53063e94e4b02e8216869790"},{"problem":20,"code":"(fn [elems]\n  (nth (reverse elems) 1))","user":"5267c74be4b03e8d9a4a7183"},{"problem":20,"code":"(fn foo\n  [nums]\n  (let [[head mid & tail] nums]\n    (if (empty? tail)\n      head\n      (foo (cons mid tail)))))","user":"58e45a2ce4b056aecfd47c69"},{"code":"(fn test [x] (second (rseq (vec x))))","problem":20,"user":"4f74a617e4b044e54cd9a905"},{"problem":20,"code":"(fn [coll]\n  (nth coll (dec (dec (count coll)))))","user":"562db4d1e4b0a45d2ff83021"},{"code":"#(loop [x %]\r\n  (if (nnext x)\r\n  (recur (next x))\r\n  (first x)\r\n)\r\n)","problem":20,"user":"4e15c301535d04ed9115e7e5"},{"problem":20,"code":"(fn [s] (let [l (count s)] (nth s (- l 2))))","user":"5f985283e4b0715f5002d800"},{"problem":20,"code":"(fn lst [[f & r]] (if (= 1 (count r)) f (recur r)))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn s2last [x] (first (rest (reverse x))))","problem":20,"user":"4f193dab535d64f603146465"},{"problem":20,"code":"(fn [x] (first (rest (rseq (vec x )))))","user":"59444377e4b0b03edd0057a1"},{"problem":20,"code":"(fn [the-seq]\n  (first (drop (- (count the-seq) 2) the-seq)))","user":"5d6eaa58e4b04d129b00f2cd"},{"code":"(fn [values] (second (reverse values)))","problem":20,"user":"50621cbde4b0341461c88951"},{"problem":20,"code":"#(loop [elems % penultimate nil ultimate nil](if(empty? elems)penultimate(recur (rest elems) ultimate (first elems))))","user":"5510ed89e4b06e50f9beb18e"},{"problem":20,"code":"(fn [lst] (first (drop (dec (dec (count lst))) lst)))","user":"5680c9a8e4b0966858e4d8f2"},{"problem":20,"code":"(fn l\n  [[i & others]] \n  (\n   let [[j & more] others]\n   (if (empty? more) i (l others))))","user":"5ba75fdfe4b0a20761a23419"},{"problem":20,"code":"(fn [[x that & the-other]]\n  (if (empty? the-other)\n    x\n    (recur (cons that the-other))))","user":"59c6de70e4b0a024fb6ae538"},{"code":"(fn [v] (first (take-last 2 v)))","problem":20,"user":"500c0393e4b03d00572d2d85"},{"problem":20,"code":"(fn [x] (peek (rest (reverse x)) ))","user":"55db03c6e4b0e31453f64adf"},{"problem":20,"code":"(fn\n  [s]\n  (nth\n   s\n   (-\n    (count s)\n    2)))","user":"58e039d3e4b0a4d5acaab734"},{"code":"#(last (butlast %))","problem":20,"user":"4ddbd600535d02782fcbe9fb"},{"code":"#(nth % (-(count %) 2))","problem":20,"user":"4e73debb535d7a570dd295b7"},{"problem":20,"code":"(fn second-to-last \n  [xs]\n  ((fn\n    [ys prev]\n    (if (empty? (rest ys))\n      prev\n      (recur (rest ys) (first ys)))\n    ) xs nil))","user":"5c1840eae4b01240ff5671eb"},{"code":"#(second ( reverse %))","problem":20,"user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn me [x] (if (= 2 (count x)) (first x) (me (rest x))))","problem":20,"user":"4e18c553535d04ed9115e7f4"},{"problem":20,"code":"(fn second-last [xs] (if (= 2 (count xs)) (first xs) (second-last (rest xs))))","user":"54b9a5b3e4b0ed20f4ff6eaf"},{"code":"(fn [x] \n  (if (next(next x))\n\t(recur  (next x))\n    (first x)\n  )\n)","problem":20,"user":"5202ac20e4b030ee0c5b26fe"},{"problem":20,"code":"(fn [x] (nth x (- (count x) 2)))\n;; (fn [x] (first (rest (reverse x))))","user":"53da3691e4b0e771c3025493"},{"problem":20,"code":"#(-> % \n    reverse \n    (nth 1)\n    )","user":"53aebc94e4b047364c044478"},{"problem":20,"code":"(fn [llist]\n  (first (take-last 2 llist)))","user":"595bc925e4b066ee0a44afe2"},{"problem":20,"code":"(fn [x] (peek (pop(vec x))))","user":"566a3a26e4b0a866af689699"},{"problem":20,"code":"(fn [xs]\n  (let [size (count xs)]\n    (nth xs (- size 2))))","user":"55dbc7cde4b050e68259b3a4"},{"code":"(fn\n  [xs]\n  (last (butlast xs)))","problem":20,"user":"529dd5a4e4b04e0c58e87b82"},{"code":"(fn myPenu [x]\r\n  (if (= (rest (rest x)) '())\r\n    (first x)\r\n    (myPenu (rest x))))","problem":20,"user":"4de33f4e535d08e6dec9fded"},{"code":"(fn mylast2 [x]\n  (if (= '() (rest (rest x)))\n    (first x)\n    (mylast2 (rest x))\n    )\n  )","problem":20,"user":"5252045ae4b0541d1855b884"},{"problem":20,"code":"(fn [sqn] (nth sqn (- (count sqn) 2)))","user":"5835df4ce4b089d5ab817cec"},{"code":"(fn [x] (if (= (count x) 2)\n          (first x)\n          (recur (next x))))","problem":20,"user":"52c4789ee4b0c2d177d620dc"},{"code":"(fn mkl [x] (if (= (rest (rest x)) []) (first x) (mkl (rest x))))","problem":20,"user":"4ff6ed6ae4b0678c553fc384"},{"code":"(fn [l]\n  (let [v (vec l)]\n    (get v (- (count v) 2))))","problem":20,"user":"5152ceeee4b001f44f99bff1"},{"problem":20,"code":"(fn [e]\n  (-> e reverse second))","user":"54addba9e4b09f271ff37ce9"},{"problem":20,"code":"(fn vorletzt [x] (first (rest (reverse x))))","user":"5753f867e4b02ea1147992b3"},{"problem":20,"code":"(fn [x]\n  (loop [y x]\n    (if (empty? (rest (rest y)))\n      (first y)\n      (recur (rest y)))))","user":"542ab1afe4b01498b1a71b48"},{"problem":20,"code":"(fn [coll] ((comp first rest reverse) coll))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [coll] (loop [x nil y nil coll coll] (if (empty? coll) x (recur y (first coll) (rest coll)))))","problem":20,"user":"5199ca05e4b022efe2b3ba88"},{"problem":20,"code":"(fn [list]\n  (if (= (rest (rest list)) '())\n    (first list)\n    (recur (rest list))))","user":"565eb771e4b068f2fe63dc36"},{"code":"#( fnext (reverse %))","problem":20,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":20,"code":"(fn second-item [in-any-sequence]\n  (if (= 2 (count in-any-sequence))\n    (first in-any-sequence)\n    (second-item (rest in-any-sequence) )))","user":"57a17145e4b0c3d858beb8eb"},{"code":"(comp (fn [x] (nth x 1)) reverse)","problem":20,"user":"4ec6a616535d6d7199dd36d2"},{"problem":20,"code":"(fn [input]\n  (if (= 2 (count input))\n    (first input)\n    (recur (rest input))))","user":"4ff3113ae4b0678c553fc345"},{"problem":20,"code":"#(first (reduce (fn [[_ p] v] [p v]) [] %))","user":"5795c16ae4b0e215f87e8489"},{"problem":20,"code":"(fn [x] (let [v (vec x) idx (- (count v) 2)] (get v idx)))","user":"5715b929e4b07c98581c3ae2"},{"problem":20,"code":"(fn [xs] (first (rest (reverse (seq xs)))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":20,"code":"(fn penul [s]\n  (if (< (count s) 3)\n    (first s)\n    (penul (rest s))))","user":"541709b0e4b01498b1a71a06"},{"problem":20,"code":"(fn [col] \n  (loop [res col] \n    (if (= (count res) 2) \n      (first res) \n      (recur (rest res)))))","user":"57073037e4b0b0fb43fd0689"},{"code":"#(->> % (reverse)(rest)(first))","problem":20,"user":"4eb2f89a535d7eef30807353"},{"code":"(fn [v]\n  (loop [s v]\n    (if (nil? (seq (rest (rest s))))\n      (first s)\n      (recur (rest s))\n      )))","problem":20,"user":"5312452be4b08068f379ecf8"},{"problem":20,"code":"(fn second_last [col]\n  (let [n (- (count col) 2)]\n    (nth col n)))","user":"5af4446de4b0cc2b61a3bc93"},{"code":"(fn mypen\n  [s]\n  (if (next (next s)) \n    (recur (next s))\n    (first s)))","problem":20,"user":"53219cece4b09d4e7a9b54b7"},{"problem":20,"code":"(fn second-last [listy] (if (= (count listy) 2) (first listy) (second-last (rest listy))))","user":"5af8752fe4b0cc2b61a3bcd3"},{"code":"(fn f [s]\n  (if (= (rest (rest s)) '())\n    (first s)\n    (f (rest s))))","problem":20,"user":"522fdff7e4b032bbe342416c"},{"code":"(fn [l] (first(rest(reverse l))))","problem":20,"user":"50eb292ce4b0346a3e988cbd"},{"problem":20,"code":"(fn penultimate\n  [s]\n  (if (first (rest (rest s)))\n    (penultimate (rest s))\n    (first s)\n  )\n)","user":"602f56c5e4b0d5df2af22297"},{"problem":20,"code":"(fn r [c]\n   (if (empty? (rest (rest c)))\n    (first c)\n     (r (rest c))))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":20,"code":"(\n fn [lst] \n \t(\n     if (= (count lst) 2) (first lst) (recur (rest lst))\n    )\n )","user":"557ffdf1e4b05c286339e0e4"},{"code":"(fn [coll]\n  (let [length (count coll)]\n    (if (<= length 2)\n      (first coll)\n      (nth coll (- length 2)))))","problem":20,"user":"528b01a0e4b0239c8a67ae89"},{"problem":20,"code":"(fn [x]\n  (nth x (dec (dec (count x)))))","user":"5005ca29e4b0678c553fc46f"},{"code":"(fn [x]\n  (second (reverse x)))","problem":20,"user":"4e5af45e535d8a8b8723a2b1"},{"code":"(fn[thing] (last (drop-last thing)))","problem":20,"user":"52dafe13e4b09f7907dd13c2"},{"problem":20,"code":"(fn f [coll]\n  (let [c (count coll)]\n  (cond (= 2 c) (first coll)\n        (< 2 c) (f (rest coll)))))","user":"54d1b6ffe4b0e8a36923e5e6"},{"code":"(fn final [x]\n  ((vec x) (- (count x) 2))\n)","problem":20,"user":"4f03e486535dcb61093f6b78"},{"problem":20,"code":"(fn [x] (second   (reverse x)))","user":"5d38a4dde4b01671435dbd4a"},{"code":"(fn [l] (let [c (- (count l) 2)] (nth l c)))","problem":20,"user":"4e889643535d8b9bb0147ca5"},{"code":"(fn [col]\n  (loop [cur col]\n\t(if (> (count cur) 2)\n      (recur (rest cur))\n      (first cur))))","problem":20,"user":"4e7e8485535db169f9c79716"},{"code":"(fn [list]  (nth list (- (.size list) 2)))","problem":20,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":20,"code":"(fn\n  [se]\n  (->> se\n       (count)\n       (dec)\n       (dec)\n       (nth se)))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"(fn [x] (loop [l x]\n          (if (= (count l) 2)\n            (first l)\n            (recur (rest l)))))","problem":20,"user":"5250e661e4b0541d1855b857"},{"problem":20,"code":"(fn my-second-to-last [x] \n  (if (= 2 (count x)) \n  (first x) \n  (my-second-to-last (rest x))))","user":"5606ea56e4b08b23635d317b"},{"problem":20,"code":"(fn foo [plist]\n  (if (not-empty (rest (rest plist)))\n    (foo (rest plist))\n    (first plist)))","user":"566df171e4b0a866af6896d2"},{"problem":20,"code":"(fn next-to-last [x]\n\t(if (= '() (rest (rest x)))\n      \t(first x)\n      \t(next-to-last (rest x))))","user":"5752caa9e4b02ea11479929f"},{"problem":20,"code":"#(if (< 1 (count (rest %))) (recur (rest %)) (first %))","user":"5d363543e4b01671435dbd20"},{"problem":20,"code":"(fn get_second_last [collection]\n  (nth collection (- (count collection) 2)))","user":"58e980dfe4b056aecfd47d0b"},{"problem":20,"code":"(fn [x]\n  ((comp first rest reverse) x)\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn llast [x] (if (= 2 (.size x)) (first x) (llast (rest x))))","problem":20,"user":"4f03641a535dcb61093f6a9b"},{"problem":20,"code":"(fn [aseq] \n  (nth aseq (- (count aseq) 2)))","user":"555f7ed0e4b0c656e3ff17b8"},{"problem":20,"code":"(fn second-to-last\n  [coll]\n  (let [s (rest coll)]\n    (if (next s)\n      (recur s)\n      (first coll))))","user":"56180d83e4b06b1bb2182a18"},{"code":"(fn [n] (-> n reverse rest first))","problem":20,"user":"5256a1d4e4b0541d1855ba29"},{"problem":20,"code":"(fn [x] (\n     let [c (count x)]\n     (nth x (- c 2))))","user":"5ac45f59e4b0e27600da772c"},{"code":"(fn [a] ((comp first rest reverse) a))","problem":20,"user":"51cb7ce0e4b08d8387cbedd8"},{"problem":20,"code":"(fn\n  [x]\n  (second (reverse x)))","user":"560a222fe4b05f002753def3"},{"problem":20,"code":"#(second \n  \t(reverse %)\n  )","user":"59ab1a75e4b08cbb53654d90"},{"code":"(fn [[f1 f2 & r]]\n\t(if r (recur (cons f2 r)) f1))","problem":20,"user":"4ea03f70535d7eef308072a1"},{"problem":20,"code":"(fn [x] (loop [sequence x] (if (empty? (rest (rest sequence)))\n                             (first sequence)\n                             (recur (rest sequence)))))","user":"554d386ee4b0a04f792995b8"},{"problem":20,"code":"(fn k-last [lst] (first (drop (- (count lst) 2) lst)))","user":"59deba46e4b01968742fed7f"},{"problem":20,"code":"#( last (drop-last % ))","user":"55d46f2be4b0e31453f64a77"},{"problem":20,"code":"#(-> %\n     count\n     dec \n     dec\n     (->>(nth %)))","user":"5f476a39e4b0102c7503392f"},{"problem":20,"code":"#( second (reverse %1))","user":"5a7df247e4b03baeef927704"},{"problem":20,"code":"(fn pen [a-seq](if (= 1(count (rest a-seq))) (first a-seq) (pen (rest a-seq))))","user":"54f39ce3e4b050824f58f5c7"},{"problem":20,"code":"(fn get-pen [seq]\n  (if (= (count seq) 2)\n    (first seq)\n    (get-pen (rest seq))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"code":"(fn [l] (first (drop (- (count l) 2) l)))","problem":20,"user":"52a09e05e4b04e0c58e87bc9"},{"code":"(fn\n  [l]\n  (loop [li l]\n  (if (= 2 (count li)) \n    (first li)\n    (recur (rest li)))\n  ))","problem":20,"user":"53663e82e4b0243289761e73"},{"code":"(fn myF [lst]\n        (cond\n         (empty? (next (next lst))) (first lst)\n         :else (recur (rest lst))))","problem":20,"user":"534f3c57e4b084c2834f4ac7"},{"code":"(fn a [l] (if (empty? (rest (rest l))) (first l) (a (rest l))))","problem":20,"user":"4ddbd934535d02782fcbe9fc"},{"problem":20,"code":"(fn [col]\n    (loop [[head & tail] col\n           [tail-head & tail-rest] tail]\n      (if (nil? tail-rest) head\n          (recur tail (rest tail)))))","user":"5c222b7de4b07e362c230588"},{"problem":20,"code":"(fn temp-last [xs]\n  (let [[h1 h2 & t] xs]\n   (if (empty? t) h1 (temp-last (rest xs)))))","user":"574cb8a2e4b02ea114799222"},{"problem":20,"code":"#(loop [s % r (rest %)]\n   (let [r2 (rest r)]\n     (if\n       (empty? r2) (first s)\n       (recur r r2)\n       )\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"code":"(fn last-x [x] \n  (if (not-empty (rest (rest x)))\n    (last-x (rest x))\n    (first x)))","problem":20,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"#(nth       % (- (count %) 2) )","problem":20,"user":"4ecd0d84535d23f036227701"},{"problem":20,"code":"(fn [[a b & more :as args]]\n  (if more\n    (recur (rest args))\n    a))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn [x]\n  (second (\n    (fn [x]\n      (reverse x))\n     x)\n  )\n)","problem":20,"user":"4f20173a535d64f6031464a9"},{"code":"#( peek(pop (vec %)))","problem":20,"user":"508014cce4b089ade05efbdc"},{"problem":20,"code":"(comp peek pop vec)\n; #(second (reverse %))","user":"55129636e4b06e50f9beb1ab"},{"problem":20,"code":"(fn [a] (->> (partition 2 1 a) (last) (first)))","user":"54edfebbe4b024c67c0cf869"},{"code":"(fn [x] \n  (nth x (- (count x) 2))\n )","problem":20,"user":"52e27501e4b09f7907dd1435"},{"problem":20,"code":"(fn [x]\n  (if (= 2 (count x))\n    (first x)\n    \n    (recur (rest x))\n  \n    ))","user":"5576acc2e4b05c286339e071"},{"code":"(fn [x] (first(pop (reverse x))))\n;(fn [x] (nth x (- (count x) 2)))","problem":20,"user":"4f339c04e4b0d6649770a09c"},{"problem":20,"code":"(fn [args]\n          (nth args (-> (count args) dec dec)))","user":"5a082ce4e4b01bb0ae8afdec"},{"code":"#((comp second reverse) %)","problem":20,"user":"4e976f79535dbda64a6f6b55"},{"problem":20,"code":"(fn [coll] (get (vec coll) (- (count (vec coll)) 2)))","user":"5fdba25ae4b05ac5b16ea135"},{"problem":20,"code":"#(if (next (next %))\n   (recur (next %))\n   (first %))","user":"53da767ee4b0e771c302549e"},{"code":"(fn [myList] (nth myList (- (count myList) 2)))","problem":20,"user":"4f280b9ae4b0d6649770a011"},{"problem":20,"code":"(fn [x]\n   (nth x (- (count x) 2) ))","user":"59dfb8dbe4b08badc2a0c4da"},{"problem":20,"code":"(fn foo [lst]\n  (if (= '() (rest (rest lst)))\n    (first lst)\n    (foo (rest lst))\n  )\n)","user":"543d245be4b032a45b869348"},{"problem":20,"code":"(fn [array] \n  (if (= (count array) 2)\n    (first array)\n    (recur (rest array))))","user":"57d7ca32e4b0bd073c2023df"},{"code":"(fn [s] (second (reverse (seq s))))","problem":20,"user":"4fe8f0c3e4b0547ebccb2433"},{"code":"(fn [s] (last (take (dec (count s)) s)))","problem":20,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [sequ]\n  (first (rest (reverse sequ))))","problem":20,"user":"52bc7ea6e4b07a9af57922f7"},{"code":"(fn ([col & prev] (if (next col) (recur (next col) (first col)) prev)))","problem":20,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":20,"code":"#( second ( reverse %))","user":"5403612fe4b0df28a13c62d9"},{"code":"(comp peek pop reverse)","problem":20,"user":"4f5760c3e4b0a7574ea71837"},{"problem":20,"code":"(fn [c] ((fn [[h1 h2 & tail]] h2) (reverse c))  )","user":"54bb0f63e4b0ed20f4ff6ebc"},{"code":"#(second(reverse%1))","problem":20,"user":"4e3b6bff535deb9a81d77f52"},{"code":"(fn [l] (-> l butlast last))","problem":20,"user":"50414e3ce4b06d8231e4facd"},{"problem":20,"code":"(fn penultimate\n  [lst]\n  \n  (second(reverse lst)))","user":"5a99ae99e4b0d174b936c7a4"},{"problem":20,"code":"(fn penultimate-element [coll]\n  (second (reverse coll))\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"problem":20,"code":"(fn [xs]\n  (first\n   (drop (- (count xs) 2) xs)))","user":"54e8ab22e4b024c67c0cf827"},{"problem":20,"code":"(fn penultimate [list]\n  (if (= 2 (count list))\n    (first list)\n    (recur (rest list))))","user":"55fb5b89e4b0f488688e0662"},{"problem":20,"code":"(fn penultimate [a-seq] (if (= (count a-seq) 2)\n                          (first a-seq)\n                          (penultimate (rest a-seq))))","user":"56b2b8aae4b0982f16b37e0a"},{"code":"(fn [list] \n  (first \n    (drop (- (count list) 2)\n      list)))","problem":20,"user":"50809e29e4b01a93d3f38e48"},{"code":"(fn [input] (nth input (- (count input) 2)))","problem":20,"user":"51cd06f9e4b02254fc79487b"},{"code":"#(if (not (next (next %))) (first %) (recur (next %)))","problem":20,"user":"5150c09de4b03e678e393ac4"},{"problem":20,"code":"(fn [x]\n  (loop [[h & t] x]\n    (let [[th & trest] t] \n     \t(if (= trest nil) h (recur t)))))","user":"581f82e2e4b04b46fc4b0f41"},{"code":"(fn lst1 [x]\n  (if (empty? (rest (rest x)))\n      (first x)\n      (lst1 (rest x))))","problem":20,"user":"4fc5ee4fe4b0ee37620e1804"},{"code":"(fn [x]\n  (nth x\n       (- (count x) 2)))","problem":20,"user":"52a32b52e4b04e0c58e87bfc"},{"problem":20,"code":"#( nth % (- (count %) 2 ) )","user":"56098003e4b0053d1b86c7e0"},{"code":"#(->> %\n      (reverse)\n      (drop 1)\n      (first))","problem":20,"user":"4f04e8b0535dcb61093f6be9"},{"code":"(fn get-second [values] (second (reverse values)))","problem":20,"user":"5380a27ae4b06839e8705ec4"},{"problem":20,"code":"(fn penultimate\n    [[one & remaining]]\n    (if (= (second remaining) nil)\n        one\n        (penultimate remaining)\n        )\n)","user":"5d1cf523e4b02ea6f0fb6994"},{"problem":20,"code":"#(nth %1 (- (count %1) 2 ))","user":"60c4e5dfe4b0e0fa5f1b42cd"},{"problem":20,"code":"(fn penultimate [x] (if (= 2 (count x)) (first x) (penultimate (rest x))))","user":"5b0d5619e4b0cc2b61a3bdf0"},{"code":"(fn pen-elem [x] (nth x (- (count x) 2)))","problem":20,"user":"50ab44b2e4b0f65d68208509"},{"problem":20,"code":"(fn [[a & b]]\n  (if (second b)\n    (recur b)\n    a))","user":"56eb5c76e4b04a395b9a0422"},{"problem":20,"code":"(fn[lst] (nth lst (- (count lst) 2)))","user":"577dbb04e4b0c8d87281f6da"},{"code":"(fn [x](first (rest (reverse x))))","problem":20,"user":"4fa5716fe4b081705acca1ad"},{"problem":20,"code":"(fn [x]\n  (loop [y x]\n    (if (<= (count y) 2)\n      (first y)\n      (recur (rest y)))))","user":"5f29837ee4b033932238a64f"},{"problem":20,"code":"(fn [list] (second (#(reverse list))))","user":"55e2d527e4b050e68259b43a"},{"problem":20,"code":"(fn [swag & secondToLastEle] \n  (if (empty? (rest swag))\n    secondToLastEle\n    (recur (rest swag) (first swag))\n    )\n  )","user":"566b070ce4b0a866af6896a9"},{"problem":20,"code":"(fn [l]\n  (loop [x l]\n    (let [[f s & r] x]\n         (if (empty? r)\n           f\n           (recur (rest x)))\n         )\n  ))","user":"5708e8f6e4b0b0fb43fd06a4"},{"code":"(fn secondLast [aList] \n  (second (reverse aList)))","problem":20,"user":"52c60844e4b0c2d177d62106"},{"problem":20,"code":"(fn [[x & reste]] (if (empty? (rest reste)) x (recur reste)))","user":"556f2009e4b09a3098a52519"},{"problem":20,"code":"(fn [coll]\n  (-> coll\n      (vec)\n      (rseq)\n      (rest)\n      (first)\n      )\n )","user":"602cc4d4e4b0d5df2af22274"},{"code":"(fn [x] \n  (last (drop-last x)))","problem":20,"user":"4f0369a2535dcb61093f6ab0"},{"code":"(fn [seq] (last (take 2 (reverse seq))))","problem":20,"user":"517d03dee4b0f5e87c18f25d"},{"problem":20,"code":"(fn penultimate-element\n  [input]\n  (if (empty? (rest (rest input)))\n    (first input)\n    (penultimate-element (rest input))))","user":"573e2d60e4b05c31a32c0825"},{"code":"(fn get-pen [coll]\n  (let [count-of-rest (count (rest coll))]\n    (if (= 1 count-of-rest) (first coll) (recur (next coll)))))","problem":20,"user":"4f6543cae4b07046d9f4ef41"},{"code":"(fn penultimate [l]\n  (cond \n    (< (count l) 2) '()\n    (= (count l) 2) (first l)\n    true (penultimate (rest l))))","problem":20,"user":"50c4e6dfe4b0210b849018b5"},{"code":"(fn[x] (second (reverse x)))","problem":20,"user":"4e58bcd4535d8a8b8723a296"},{"problem":20,"code":"(fn\n  [seq]\n  (nth seq \n       (- (count seq) 2)))","user":"54d1f84ae4b0e8a36923e5ec"},{"code":"(fn [vctr] (second (reverse vctr)))","problem":20,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":20,"code":"(fn penul [x] (if (= (rest (rest x)) '()) (first x) (penul (rest x))))","user":"54d66f42e4b0a52adc2e201a"},{"problem":20,"code":"(fn [l] (\n         first (rest (reverse l)))\n  )","user":"5471f090e4b094393f72dd6e"},{"code":"(fn [coll]\n  (let [col (reverse coll)]\n    (second col)))","problem":20,"user":"4fbb9d80e4b081705acca2ea"},{"problem":20,"code":"(fn [s] (-> s vec pop peek))","user":"560ae540e4b05f002753df0d"},{"problem":20,"code":"(fn [s]\n  (let [[x y & r] s]\n    (if (empty? r)\n      x\n      (recur (rest s)))))","user":"544b699ce4b0e39780006964"},{"problem":20,"code":";; get the number of items in a sequence\n\n;; (count %)\n\n;; decrement it twice. lol.\n\n;; (dec (dec (count %))\n\n;; get the nth value at index\n\n#(nth % (dec (dec (count %))))","user":"546c6a47e4b00cfc9eacc179"},{"problem":20,"code":"(fn [[x & [y & ys :as tail]]]\n   (if-not ys x (recur tail)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":20,"code":"(fn [l] (nth l (- (count (into [] l)) 2)))","user":"57f4ace3e4b07bbd65c32b2b"},{"code":"(fn [col]\n  (first (take-last 2 col)))","problem":20,"user":"4ff695f8e4b0678c553fc380"},{"problem":20,"code":"(fn [c]\n  (let [n (count c)]\n    (when (< 1 n) (nth c (- n 2)))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":20,"code":"(fn [s]\n\t(nth s (- (count s) 2))\n)","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn [s]\n  (first (last (partition 2 1 s))))","problem":20,"user":"4e7be091535db169f9c796ba"},{"code":"(fn [xs] (if (nil? (next (next xs))) (first xs) (recur (next xs))))","problem":20,"user":"4dd59d8b535dae65d5c462eb"},{"code":"(fn [x] ( let [ y ( - (count x) 2)] (nth x y) ))","problem":20,"user":"515be449e4b0388ca8ca1523"},{"problem":20,"code":"(fn [xs]\n  (when (seq xs)\n    (if (= (count xs) 2)\n      (first xs)\n      (recur (rest xs)))))","user":"53a6e646e4b0ef122a8689cd"},{"code":"(fn secondlast [list]\n  (if (empty? (rest (rest list)))\n    (first list)\n    (recur (rest list))))","problem":20,"user":"50293b68e4b061fd216be4b7"},{"code":"(fn [x]\n  (last (take 2 (reverse x)))\n)","problem":20,"user":"4eed26af535d93acb0a668bb"},{"problem":20,"code":"(fn [L]\n  (loop [x L]\n    (if (= 2 (count x))\n      (first x)\n      (recur (rest x)))))","user":"53d60f57e4b0e771c3025451"},{"problem":20,"code":"#(last (take (dec (count %) )\n%))","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"#(if (nil? (nth % 2 nil))\n    (first %)\n    (recur (rest %)))","problem":20,"user":"4ede88cb535d10e5ff6f5338"},{"code":"(fn [l] (nth l (dec (dec (count l)))))","problem":20,"user":"4e139c72535d04ed9115e7da"},{"problem":20,"code":"(fn penultimate\n  [x]\n  (last (butlast x)))","user":"553cf4c9e4b0a04f792994d7"},{"problem":20,"code":"#(nth (reverse %) 1) ;; oy can't, in general, use rseq here","user":"581a703de4b0e114eb51a005"},{"problem":20,"code":";;#(second (reverse %))\n#(->> \n  (reverse %)\n     second)","user":"609c8ac9e4b00e9e6653c41a"},{"problem":20,"code":"(fn [v] \n  (if (= (count v) 2) \n    (first v) \n    (recur (rest v))))","user":"54a97853e4b09f271ff37cae"},{"code":"(fn [s]\n  (let [r (rest s)]\n    (if (empty? (rest r))\n      (first s)\n      (recur r)\n      )\n    ) \n  )","problem":20,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn [l] (first (rest (reverse l) ) ) )","problem":20,"user":"5130ef01e4b07b22f541297e"},{"problem":20,"code":"(fn [a] \n    (first \n      (rest \n        (reverse a)\n      )\n    )\n  )","user":"5c94cbb1e4b048ec896c5a3d"},{"problem":20,"code":"(fn [s] \n  (loop [es s] \n    (if-not (next (next es)) \n      (first es) \n      (recur (next es)))))","user":"58ef93ece4b056aecfd47dca"},{"code":"(fn secondLast [x] (if (empty? (rest (rest x))) (first x) (secondLast (rest x))))","problem":20,"user":"52d4acc8e4b09f7907dd1333"},{"problem":20,"code":"(fn ! [x] \n  (if (= (count x) 2)\n    (first x)\n    (! (rest x))\n  )\n)","user":"5a813b90e4b00b71e582a065"},{"code":"(fn [sequence]\n  (second (reverse sequence))\n)","problem":20,"user":"4fe98afae4b0547ebccb2462"},{"problem":20,"code":"(fn[my_list](first(rest(reverse my_list ))))","user":"55256426e4b0ffed3738f905"},{"problem":20,"code":"(fn [xs] (let [helper (fn helper [ys prev]\n                        (if (not (empty? ys))\n                          (let [hd (first ys)\n                                tl (rest ys)]\n                            (if (empty? tl)\n                              prev\n                              (helper tl hd)))))]\n           (helper xs nil)))","user":"57df2722e4b0bd073c20245e"},{"problem":20,"code":"(fn\n  [my-list]\n  (nth my-list (+ -2 (count my-list)))\n\n  )","user":"5c321b8ae4b0d62ef62d9f32"},{"problem":20,"code":"(fn [lst]\n    (if (empty? lst)\n      nil\n      (nth \n        lst \n        (- (count lst) 2)\n      )\n    )\n  )","user":"579a3f3be4b05b1deef9add9"},{"problem":20,"code":"(fn pu [seq] (second (reverse seq)))","user":"567f71cee4b0feffd0d18ebd"},{"problem":20,"code":"(fn pen [list] (nth list (- (count list) 2)))","user":"53c96d9fe4b00fb29b2212bf"},{"code":"(fn [x] ((vec x) (- (count x) 2)))","problem":20,"user":"4f36939ce4b0e243712b1eca"},{"problem":20,"code":"(fn penult [sequ] (second (reverse sequ)))","user":"5eff588ae4b0cf489e8d7f10"},{"problem":20,"code":"(fn penultimate [a] (nth a (- (count a) 2)))","user":"56ce8728e4b0ea9b8538f760"},{"code":"#(first( next( reverse %)))","problem":20,"user":"512c0f84e4b03a42b6300232"},{"problem":20,"code":"(fn penultimate [s]\n  (nth s (- (count s) 2)))","user":"5ab1695fe4b073f1774425c3"},{"code":"(fn [arg] (nth arg (- (count arg) 2)))","problem":20,"user":"5182b74fe4b0353c468deb6e"},{"code":"(fn foo [c] (last (butlast c)))","problem":20,"user":"50ec69e0e4b04edc3377704a"},{"code":"(fn [l]\n (first (drop (- (count l) 2) l))\n)","problem":20,"user":"5384bbf8e4b06839e8705ef5"},{"code":"(fn [seq]\n  (if (> 3 (count seq))\n    (first seq)\n    (recur (rest seq))))","problem":20,"user":"4ef3f5b0535dced4c769f22f"},{"problem":20,"code":"(fn [foo]\n  (let [[x & xs] foo]\n    (if (= (count xs) 1)\n      x\n      (if (empty? xs)\n        nil\n        (recur xs)))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":20,"code":"#(second \n  (reduce conj '() %))","user":"594d0b2ee4b07ddc2dafae7b"},{"code":"(fn [a] (first (rest (reverse a)) ))","problem":20,"user":"4e74e119535d7a570dd295bc"},{"problem":20,"code":"(fn [coll]\n  (let [x (count coll)]\n    (nth coll (- x 2))))","user":"5adbbf89e4b0837691e92bf4"},{"code":"(fn [list]\n  (nth list (- (count list) 2)))","problem":20,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":20,"code":"(fn f [s]\n  (if (second (rest s))\n    (f (rest s))\n    (first s)))","user":"5f28c964e4b033932238a64c"},{"code":"(fn [seq] \n  (if (empty? (rest (rest seq))) \n      (first seq) \n      (recur (rest seq))))","problem":20,"user":"4f70afb8e4b07046d9f4effb"},{"problem":20,"code":"(fn [& args] \n\t(nth (reverse \n          (into [] (first args))\n         ) \n      1\n     )\n)","user":"57fa06c9e4b0d3187e900958"},{"code":"(fn pen-elem [s]\n  (if (= (count s) 2)\n    (first s)\n    (pen-elem (rest s))))","problem":20,"user":"4ff89ae0e4b0678c553fc39a"},{"problem":20,"code":"(fn\n  [x]\n  (let [offset (count x)\n        last-char (nth x (- offset 2))]\n    last-char))","user":"58bd84d2e4b0888cdc949d31"},{"problem":20,"code":"(fn [input_seq] (->> input_seq (reverse) (rest) (first)))","user":"5f4b6433e4b0102c75033953"},{"code":"#(get (vec (reverse %)) 1)","problem":20,"user":"4ec5615a535d6d7199dd369b"},{"code":"(fn [xs]\n  (nth xs (- (count xs) 2)))","problem":20,"user":"5173726be4b098276e74652c"},{"problem":20,"code":"(fn pn [x]\n  (if (empty? (rest (rest x))) (first x) (pn (rest x))))","user":"5856980de4b0f14aab7c86f7"},{"problem":20,"code":"#(first (rest (reverse  %)))","user":"56955557e4b0dcc4269f4128"},{"code":"(fn secondToLast [array] (nth (reverse array) 1))","problem":20,"user":"53297965e4b09d4e7a9b5511"},{"problem":20,"code":"(fn [ls]\n  (loop [f (first ls)\n         r (rest ls)]\n    (if (= 1 (count r))\n      f\n      (recur (first r) (rest r)))))","user":"54d492dbe4b0a52adc2e2001"},{"problem":20,"code":"(fn [ls]\n  ((comp second reverse) ls)\n  )","user":"58f04569e4b056aecfd47de4"},{"code":"(fn [x] (-> x (reverse) (rest) (first)))","problem":20,"user":"5140283fe4b00f13ea1bd89a"},{"code":"(fn penultimate [ls]\n    (if (<= (count ls) 2)\n      (first ls)\n      (penultimate (rest ls))))","problem":20,"user":"52aa4d9ee4b0c58976d9ac63"},{"problem":20,"code":"(fn sl [l]\n  (loop [v1 nil v2 nil menge l]\n    (if (empty? menge)\n      v1\n      (recur v2 (first menge) (rest menge)))))","user":"53b42b9ce4b047364c0444b3"},{"problem":20,"code":"; #(nth % (- (count %) 2))\n#(first(rest(reverse %)))","user":"5433eecae4b0b6b47310fce6"},{"code":"(fn [c] (first (drop (- (count c) 2) c)))","problem":20,"user":"5308dd20e4b02e82168697b3"},{"problem":20,"code":"(fn [l] (if (= []\n               (rest (rest l)))\n               (first l)\n               (recur (rest l))))","user":"56df5b74e4b0ca2494a095ed"},{"code":"(fn [x]\n  (first (rest (reverse x))))","problem":20,"user":"4e7d4544535db169f9c796d0"},{"code":"#(nth %(- (count %)2))","problem":20,"user":"50291679e4b0b6c928ad6200"},{"problem":20,"code":"(fn [[i j & r :as tot]]\n  (cond \n   (empty? r) i\n   :else (recur (rest tot))))","user":"54145050e4b01498b1a719ea"},{"code":"(fn lastReq [x] \n         (if (empty? (rest (rest x))) \n           (first x)\n           (lastReq (rest x)))\n         )","problem":20,"user":"524ac536e4b09eba1c0223a1"},{"code":"(fn [w] (first (rest (reverse w))))","problem":20,"user":"52215fe1e4b0e6a83c8925cf"},{"problem":20,"code":"(fn getLast [x] (nth x (- (count x) 2)))","user":"5c4217e2e4b08cd430848ed2"},{"problem":20,"code":"#(if (> (count %) 1) (nth % (- (count %) 2)) (last %))","user":"56ce0ae0e4b0ea9b8538f75b"},{"code":"(fn [mylist] (loop [l mylist]\n  (if (= 1 (count (rest l))) (first l)\n    (recur (rest l)))))","problem":20,"user":"4f0a5653535d0136e6c222f5"},{"problem":20,"code":"(fn penultimate-count [coll]\n  (let [c (count coll)]\n    (first (drop (- c 2) coll))))","user":"55a2d5c2e4b0acc240e3152c"},{"code":"(fn hop [x] (if (= 2 (count x)) (first x) (recur (rest x))))","problem":20,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":20,"code":"(fn [[x & xs]] (if (= 1 (count xs)) x (recur xs)))","user":"56946d43e4b0dcc4269f411e"},{"code":"(fn this [x] (\r\n               if (> (count x) 2) (this (rest x)) (first x)\r\n               )\r\n  )","problem":20,"user":"501819efe4b02f523d7cc5eb"},{"code":"#( nth % (- (.size %) 2))","problem":20,"user":"529e36b4e4b04e0c58e87b91"},{"problem":20,"code":"(fn [list] (first(rest(reverse list))))","user":"54ef245ce4b024c67c0cf87e"},{"problem":20,"code":"(fn [x]\n  (loop [v x\n         u nil\n         p nil]\n    (if (empty? v)\n       p\n       (recur (rest v) (first v) u)\n      )\n    )\n  )","user":"5d7bd708e4b02e6b30c93555"},{"code":"(fn penultimate [xs]\n  (if (empty? (rest (rest xs)))\n    (first xs)\n    (penultimate (rest xs))))","problem":20,"user":"4e691c79535d8ccf87e9fe97"},{"problem":20,"code":"(fn mylast [seq] (if (= 1 (count (rest seq))) (first seq) (mylast (rest seq))))","user":"5681afaae4b0945ebc182a87"},{"problem":20,"code":"(fn [items]\n  (if (> (count items) 2)\n    (loop [it (rest items)]\n      (if (= (count it) 2)\n        (first it)\n        (recur (rest it))))\n    (first items)))","user":"5d5c2730e4b09db18d4482ea"},{"code":"#(second (reverse (seq %)))","problem":20,"user":"4e8a6bb0535d65386fec210b"},{"code":"(fn [x]\n  (apply (fn [x y & more]\n           (if (seq more)\n             (recur y (first more) (rest more))\n             x))\n         x))","problem":20,"user":"5142c9c5e4b0c172af7558c7"},{"problem":20,"code":"(fn penultimate [lst]\n  (if\n    (empty? (rest (rest lst)))\n    (first lst)\n    (penultimate (rest lst))))","user":"5959b0ede4b066ee0a44afaa"},{"problem":20,"code":";(fn foo [x] (if (empty? (rest (rest x))) (first x) (foo (rest x))))\n(comp second reverse)","user":"57615a22e4b0994c1922fb88"},{"code":"(fn [[n1 n2 & more]]\n  (if more\n    (recur (cons n2 more))\n    n1))","problem":20,"user":"51b3b22ce4b0f094dd986fa7"},{"problem":20,"code":"(fn pe [s] (first (rest (reverse s))))","user":"5d9e3fd8e4b0eb781811cdbf"},{"problem":20,"code":"(fn second-to-last [lst]\n\t(case (count lst)\n      0 nil\n      1 nil\n      2 (first lst)\n      (second-to-last (rest lst))))","user":"5e385965e4b01d43a70e8dba"},{"problem":20,"code":"(fn [lst]\n  (nth lst\n       (-\n         (count lst)\n         2)))","user":"54e90803e4b024c67c0cf82f"},{"problem":20,"code":";(fn [x]\n;  (let [n (next x)]\n;    (if (second n)\n;      (recur n)\n;      (first x))))\n                  \n(comp last butlast)","user":"5f6a583ae4b02876ed9fd046"},{"problem":20,"code":"(fn check [x] (second (reverse x)))","user":"5e832e75e4b09a7a73c8bbb5"},{"problem":20,"code":"(fn [coll]\n\t(loop [[coll-first coll-second & coll-rest] coll]\n     (if (empty? coll-rest) \n       coll-first\n       (recur (cons coll-second coll-rest)))))","user":"5abbb524e4b073f1774426da"},{"code":"#( first (reverse (butlast %)))","problem":20,"user":"50b9e36ae4b04934c218a4aa"},{"code":"(fn get-last [mylist] (.get mylist (- (count mylist) 2)))","problem":20,"user":"50ed7023e4b06330c1f87c39"},{"problem":20,"code":"(fn\n  [x]\n  (-> (reverse x)\n      next\n      first))","user":"5a57d2f6e4b05d388ecb6c71"},{"problem":20,"code":"(fn penultimate [x] (if (> (count x) 2) (penultimate (rest x)) (first x)))","user":"5694eeb1e4b0dcc4269f4124"},{"code":"#(last (butlast %1))","problem":20,"user":"4ff743fde4b0678c553fc38d"},{"problem":20,"code":"#(nth % (-(dec (count %)) 1))","user":"58a579ebe4b01a0c0b23290f"},{"problem":20,"code":";;#(second (reverse %))\n(comp second reverse)","user":"55228afbe4b0882d96d091a1"},{"code":"(fn [list] (first (drop (- (count list) 2) list)))","problem":20,"user":"50996376e4b0cae2931060b2"},{"problem":20,"code":"(fn penult [x] (if (empty? (rest (rest x))) (first x) (penult (rest x))))","user":"5b6c0d56e4b0c6492753e7b2"},{"problem":20,"code":"(fn [s]\n  (let [head (first s)\n        tail (rest s)]\n    (if (and (not (empty? tail))\n             (= 1 (count tail)))\n      head\n      (recur tail))))","user":"588d3952e4b00487982d516e"},{"problem":20,"code":"(fn [s]\n  (if (next (next s))\n    (recur (next s))\n\t(first s))\n)","user":"5ee7b49de4b029a2061bbea6"},{"problem":20,"code":"(fn last_list [l]\n\t(let [r (rest l) s (second r)] (if (= s nil) (first l) (last_list r))))","user":"569cb441e4b0542e1f8d1466"},{"code":"#((vec %) (- (count %) 2))","problem":20,"user":"4e83b1af535db62dc21a62dc"},{"problem":20,"code":"(fn eennalaatste [lijst] (nth lijst (-(count lijst) 2)))","user":"5444ec99e4b032a45b869394"},{"problem":20,"code":"(fn [ls]\n  (loop [[head & tail] ls]\n    (if ((fn [x] (let [[h & t] x] (empty? t))) tail)\n      head\n      (recur tail))))","user":"57ad3b90e4b0b8559636fc9b"},{"code":"; slowest (walking the full sequence twice: first time to drop the last element. )\n; #(-> % butlast last)\n\n; For a sequence of length n, take-last drops X elements from the start and looping N - X times \n; #(first (take-last 2 %))\n\n; walking the full sequence once to reverse. Should be efficient over structures like lists that are read from the left\n; #(-> % reverse rest first)\n\n; fastest? walking the full sequence once to convert to a vector. A vector is easy to read from the right\n#(peek (pop (vec %)))","problem":20,"user":"51d46747e4b013d740b70de3"},{"code":"(fn [x] (last(drop-last x)))","problem":20,"user":"51bb25c9e4b0fe3ecfb46448"},{"problem":20,"code":"(fn [coll]\n  (cond\n   \t(empty? coll) nil\n    (<= (count coll) 2) (first coll)\n    :else\n    (recur (rest coll))))","user":"57f80350e4b0d3187e90090c"},{"problem":20,"code":"(fn [seq] \n  (nth seq\n   (- (count seq) 2)\n  )\n)","user":"55af59a2e4b03311e7b732c9"},{"code":"(fn next-to-last [x]\n  (if (next (next x))\n    (recur (next x))\n    (first x)))","problem":20,"user":"502ea030e4b078f26332e747"},{"code":"(fn [x] \n  (if (next (next x)) \n    (recur (next x)) \n    (first x)))","problem":20,"user":"525bcae9e4b0cb4875a45d30"},{"code":"(fn second-to-last [lst]\n  (if (= (count lst) 2)\n    (first lst)\n    (if (< (count lst) 2)\n      'nil\n      (second-to-last (rest lst)))))","problem":20,"user":"4fc52278e4b081705acca37c"},{"code":"(fn [l]\n  (last\n    (butlast l)))","problem":20,"user":"4ff36af7e4b0678c553fc352"},{"problem":20,"code":"(fn hello [lst] \n  (if (= (count lst) 2)\n    (first lst)\n    (hello (rest lst))\n  )\n  )","user":"543b7456e4b032a45b86932f"},{"problem":20,"code":"#(if (nil? (-> % next next)) (first %) (recur (rest %)))","user":"5522cbb2e4b0882d96d091aa"},{"code":"(fn second-last-element [x] (first\n  (filter #(= (- (count x) 2) (.indexOf x %)) x)))","problem":20,"user":"4fa2495ee4b0dcca54ed6d67"},{"problem":20,"code":"(fn [[top & others]]\n  (if (= 1 (count others)) top\n      (recur others)))","user":"5bfee3d9e4b0bdcf453d161c"},{"problem":20,"code":"(fn [coll] (if (empty? (rest (rest coll))) (first coll) (recur (rest coll))))","user":"5659c8cde4b068f2fe63dbef"},{"problem":20,"code":"(fn \n  [lst]\n  (second(reverse lst))\n  )","user":"57f81569e4b0d3187e900919"},{"problem":20,"code":"(fn [coll] (second(reverse coll)))","user":"58c6f9c1e4b021aa9917ed6b"},{"code":"(fn [l]\n  (let [r (rest l)]\n    (if (= r ())\n      ()\n      (if (= (rest r) ())\n        (first l)\n        (recur r)))))","problem":20,"user":"4e7d52ad535db169f9c796d3"},{"problem":20,"code":"(fn [coll]\n  (if (= 2 (count coll))\n    (first coll)\n    (recur (rest coll)))\n  )","user":"5d1c047fe4b02ea6f0fb6988"},{"problem":20,"code":"(fn [s]\n  ((vec (reverse s)) 1))","user":"53c649d3e4b00fb29b221297"},{"problem":20,"code":"(fn [l] (nth  \n             (reverse l) 1))","user":"577202d2e4b0979f896515c0"},{"problem":20,"code":"(fn [i]\n  (second (reverse i)))","user":"554bc026e4b0a04f79299597"},{"problem":20,"code":"(fn [s] (-> s (reverse) (rest) (first)))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn [arr] (nth arr (- (count arr) 2)))","problem":20,"user":"512a1cb7e4b02a03fbcee0a9"},{"problem":20,"code":"(fn f [s] (nth (reverse s) 1))","user":"58b2f085e4b0ebc645576d15"},{"code":"(fn [xs] (last (take 2 (reverse xs))))","problem":20,"user":"4f45bd8ce4b0d56e7bb92b88"},{"code":"(fn penultimate [x] (last (butlast x)))","problem":20,"user":"512a8ef7e4b0ff5c4bc1f99e"},{"problem":20,"code":"(fn [sq]\n  (-> sq (reverse)\n      (rest)\n      (first)\n      )\n  )","user":"53d2afede4b00fb29b221321"},{"problem":20,"code":"(fn [x] (peek (rest (reverse x))))","user":"545ded41e4b01be26fd74678"},{"problem":20,"code":"(fn sl [x]\n  (let [restX (rest x)]\n    (if (< (count restX) 2)\n      (first x)\n      (sl restX))))","user":"5b6473eee4b0c6492753e73f"},{"problem":20,"code":"(fn [x]\n  (nth x\n       (- (count x) 2)\n  )\n)","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":20,"code":"(fn [coll]\n  (get (into [] coll) (- (count coll) 2)))","user":"56ad0123e4b03c432f187350"},{"code":"#(last (loop [r [] c %]\n  (if (nil? (second c))\n    r\n    (recur (conj r (first c)) (rest c)))))","problem":20,"user":"4f3ad7f0e4b0e243712b1f1d"},{"code":"#(nth %( dec (dec (count %))))","problem":20,"user":"530c15f7e4b02e82168697d6"},{"code":"#(first (pop(reverse %)))","problem":20,"user":"4ea53dc2535d7eef308072d1"},{"problem":20,"code":"(fn [coll]\n  (loop [[head & tail] coll\n         current nil]\n    (if (empty? tail)\n      current\n      (recur tail head))))","user":"55e2f502e4b050e68259b43c"},{"problem":20,"code":"(fn count-items [a] \n  (nth a (- (count a) 2)))","user":"5cab0766e4b048ec896c5c45"},{"problem":20,"code":"(fn [lat]\n  (if (empty? (rest (rest lat)))\n    (first lat)\n    (recur (rest lat))))","user":"5f90aeefe4b0715f5002d799"},{"code":"(comp last #(take (dec (count %)) %))","problem":20,"user":"53976599e4b0b51d73faaeea"},{"problem":20,"code":"(fn nd-last-element [coll] (let [total (count coll) ,x ( first coll) , y (rest coll)](cond (<= total 1) nil :else ( if (= total 2) x (nd-last-element y)))))","user":"56c9d136e4b0ed865f9758e2"},{"code":"(fn last-one [x] (if (= 2 (count x)) (first x) (last-one (rest x))) )","problem":20,"user":"4f05c087535dcb61093f6c00"},{"problem":20,"code":"(fn [elements]\n(let [x (first elements)\n      z (rest elements)\n      y (first z)\n      zz (rest z)]\n  (if (empty? zz) x (recur z))))","user":"5bc232b7e4b07a9b28b10026"},{"code":"#(if(>(count %)2)(recur (rest %))(first %))","problem":20,"user":"50ed4626e4b01236b1d4983c"},{"problem":20,"code":"(fn [coll] (first (drop (- (count coll) 2) coll)))","user":"5169b23fe4b03f62cda68cee"},{"problem":20,"code":"(fn\n  [col]\n  (loop [col col]\n    (if (= (count col) 2)\n      (first col)\n      (recur (rest col)))))","user":"5d78d680e4b02e6b30c9353c"},{"code":"(fn [coll]\r\n  (second (reverse coll)))","problem":20,"user":"4ee40938535d10e5ff6f5375"},{"problem":20,"code":"(fn [b] (second (reverse b)))","user":"553478dce4b09218d5f44f9d"},{"problem":20,"code":"(fn [myList]\n  (nth myList (- (count myList) 2)))","user":"5f998847e4b0715f5002d813"},{"code":"#(first (rest( reverse %)))","problem":20,"user":"4e21c0c7535d04ed9115e818"},{"code":"(fn penultimate [se] (second(reverse se)))","problem":20,"user":"53901605e4b0b51d73faae95"},{"problem":20,"code":"#(if (>= (count %1) 2) (nth (reverse %1) 1) `())","user":"5675eaaee4b05957ce8c6150"},{"code":"#(last(butlast %))","problem":20,"user":"4e599577535d8a8b8723a29f"},{"problem":20,"code":"#(let [c (count %)] (nth % (- c 2)))","user":"595c02a9e4b066ee0a44afeb"},{"code":"(fn second-to-last [seq]\n  (if (= 2 (count seq))\n      (first seq)\n      (second-to-last (rest seq))))","problem":20,"user":"5013f715e4b0510f6b41d38c"},{"problem":20,"code":"(fn [s]\n  (second\n   (reverse s)))","user":"54c31f1be4b045293a27f609"},{"problem":20,"code":"(fn pn [x] (nth x (- (count x) 2)))","user":"53fa560ce4b0de5c41848579"},{"problem":20,"code":"(fn get_prelast_elem [x]\n  (if (= (count x) 2)\n    (first x)\n    (get_prelast_elem (rest x))))","user":"53a94b63e4b047364c044434"},{"code":"(fn [set] (if (empty? (rest (rest set))) (first set) (recur (rest set))))","problem":20,"user":"4dd6fa3a535d2dad7130b5ce"},{"problem":20,"code":"#(if (next(next %)) (recur (next %)) (first %))","user":"55bd87ede4b01b9910ae29fe"},{"code":"(fn [s]\n  (second (reverse s)))","problem":20,"user":"4ee67d74535d93acb0a66861"},{"code":"(fn penultimate [s]\r\n  (if (> (count s) 2)\r\n    (recur (next s))\r\n    (first s)))","problem":20,"user":"4dd7c1da535d2dad7130b5d4"},{"problem":20,"code":"(fn my\n [my]\n  (first (rest (reverse my))))","user":"5e663073e4b0fd0acd1586bc"},{"problem":20,"code":"(fn [l]\n  (->> l (reverse) (next) (first)))","user":"5a47423be4b05d388ecb6b52"},{"code":"(fn [x] (last (butlast x)) )","problem":20,"user":"4f847bf2e4b033992c121c32"},{"problem":20,"code":"#(loop\n   [l %1]\n   (if (empty? (rest (rest l)))\n     (first l)\n     (recur (rest l))\n     )\n   )","user":"5593f481e4b0c79f6e1db946"},{"problem":20,"code":"(fn [sequence]\n  (-> sequence\n      (reverse)\n      (second)))","user":"5d078e2de4b0cc9c915881fa"},{"code":"#(->> % butlast  last)","problem":20,"user":"4f1b120f535d64f603146476"},{"code":"(fn [m] (-> m drop-last reverse first ))","problem":20,"user":"4fe8da4de4b0547ebccb2429"},{"code":"(fn [x] (last ( drop-last x)))","problem":20,"user":"514dbd08e4b019235f6c058d"},{"problem":20,"code":"(fn penultimate\n  [n]\n  (nth n \n       (- (count n) 2)))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn get-second-to-last [l]\n  (if (empty? (rest (rest l)))\n    (first l)\n    (get-second-to-last (rest l))))","problem":20,"user":"4fe8e771e4b0547ebccb2431"},{"code":"(fn my-func [list]\n  (if (= 2 (count list))\n    (first list)\n    (my-func (rest list))))","problem":20,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":20,"code":"#(if (= (second (next %)) nil) (first %) (recur (next %)))","user":"58e0376ce4b0a4d5acaab732"},{"code":"#(loop [[val & rest] %]\n   (if (< (count rest) 2)\n     val\n     (recur rest)))","problem":20,"user":"53a2e6abe4b0f1fc7453882f"},{"problem":20,"code":"(fn second-last\n  [items]\n  (nth items (- (count items) 2)))","user":"562e2c5ce4b0a45d2ff83024"},{"code":"(fn [x] (loop [val (first x)\n               l (rest x)]\n          (if (empty? (rest l))\n            val\n            (recur (first l)\n                   (rest l)))))","problem":20,"user":"52069491e4b0bf4f1882c82a"},{"code":"(fn f [x] (if(=(count x) 2)\n                (first x)\n                (f (rest x))))","problem":20,"user":"52a76046e4b0c58976d9ac13"},{"problem":20,"code":"(fn [x] \n  (first (next (reverse x)))\n\n  )","user":"5595c60ee4b0c79f6e1db96f"},{"code":"(fn [l] (nth (nthnext l (- (count l) 2)) 0))","problem":20,"user":"5141c8e4e4b0b50abeb46b16"},{"code":"(fn last-element [x]\n  (second (reverse x)))","problem":20,"user":"51ba59e4e4b0fe3ecfb4642d"},{"problem":20,"code":"#(let [[_ r] (reverse %)] r)","user":"55afe57ae4b002ce9d5cbc1c"},{"code":"(fn get-second-last [seq]\n  (if (nil? (nnext seq)) (first seq) (get-second-last (next seq))\n  ))","problem":20,"user":"51e6786ae4b0ab43cc26c216"},{"problem":20,"code":"(fn get-last [x] (if (= (count x) 2) (first x) (get-last (rest x))))","user":"5658c25fe4b00d3155796110"},{"code":"(fn [s]\r\n  (cond (= 2 (count s))(first s)\r\n        :else (recur (rest s))))","problem":20,"user":"4de26537535d08e6dec9fde9"},{"problem":20,"code":"(fn [args]\n  (nth (reverse args) 1))","user":"55e2b1cfe4b050e68259b438"},{"code":"(fn pen [[x y & rest]]\n  (if (seq? rest) \n          (pen (conj rest y))\n  x))","problem":20,"user":"4f803577e4b033992c121bf0"},{"code":"#(peek(pop(vec %)))","problem":20,"user":"4f68d3ebe4b07046d9f4ef7d"},{"problem":20,"code":"(fn [x] (first (shuffle x)))","user":"55f08f0ce4b06e875b46ce26"},{"problem":20,"code":"(fn [[x y & r :as all]] (if (= nil r) x (recur (rest all))))","user":"554ae65de4b0a04f7929957b"},{"problem":20,"code":"(fn [s] \n  \n  (first (rest\n         (reverse s)\n         )\n         ))","user":"54d93f19e4b024c67c0cf747"},{"problem":20,"code":"(fn [list] (nth list (- (count list) 2) ))","user":"54ca130ce4b057c6fda3a250"},{"problem":20,"code":"(fn penultimate [s] (if (>= 2 (count s)) (first s) (penultimate (rest s))))","user":"547dc4c7e4b0c51c1f4d72f8"},{"problem":20,"code":"(fn f [xs] (if (= 2 (count xs))\n             (first xs)\n             (f (rest xs))))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":20,"code":"(fn penultimate-element [x] (nth x (- (count x) 2) (first x)))","user":"55e5f97de4b050e68259b47e"},{"code":"(fn [x] ( first ( rest ( reverse x ))))","problem":20,"user":"4e56cff0535d8a8b8723a285"},{"code":"#((into [] %1) (- (count %1) 2))","problem":20,"user":"52a76986e4b0c58976d9ac17"},{"code":"( fn[x] (nth x (- (count x) 2)))","problem":20,"user":"52c246e3e4b07a9af579237c"},{"code":"(fn [c]\n  (first (drop (- (count c) 2) c)))","problem":20,"user":"5225a0f5e4b01819a2de430e"},{"problem":20,"code":"(fn get-penultimate\n  [col]\n  (loop [remaining col]\n    (if (= 2 (count remaining))\n      (first remaining)\n      (recur (rest remaining)))))","user":"60bf7458e4b0e0fa5f1b4296"},{"problem":20,"code":"(fn last2 [x] (nth x (- (count x) 2)))","user":"56f0390de4b04a395b9a0473"},{"problem":20,"code":"(fn thepen [[curr & othr]]\n  (if (= 1 (count othr)) \n    curr \n    (thepen othr) ))","user":"58acce0ae4b0005cfeb1a754"},{"problem":20,"code":"(fn get-pen [x]\n  (nth x (- (count x) 2)))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn [args]\n\t(loop [[x y & more] args]\n\t\t(if more\n\t\t\t(recur (conj more y))\n\t\t\tx)))","problem":20,"user":"51205867e4b0e88f5a20c40f"},{"code":"(fn [coll] (first (drop 1 (reverse coll))))","problem":20,"user":"4ea09fa4535d7eef308072aa"},{"code":"(fn fu [x]\n  (nth (reverse x)1)\n)","problem":20,"user":"4e94aab8535dbda64a6f6b1f"},{"problem":20,"code":"(fn [coll]\n   (let [[eh & et] coll]\n     (if (next et) (recur et) eh)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn [s]\n  (if (= (count s) 2)\n    (first s)\n    (recur (next s))))","problem":20,"user":"50d4909ce4b09cc622d65a6c"},{"problem":20,"code":"(fn [list]\n  (last (drop-last list)))","user":"54cb39eee4b057c6fda3a274"},{"code":"(fn [l] (first(take-last 2 l)))","problem":20,"user":"502aac6ae4b0614b52996118"},{"problem":20,"code":"(fn l [x] (if (empty? (rest (rest x))) (first x) (l (rest x))))","user":"5897dda4e4b00487982d52c8"},{"problem":20,"code":"(fn[x]( last (take 2 (reverse x))))","user":"5762b38ce4b0994c1922fbad"},{"problem":20,"code":"#(nth % (dec (- (count %) 1 )))","user":"54aec1b6e4b09f271ff37cf6"},{"problem":20,"code":"(fn my-last [l]\n  (if (empty?\n       (rest (rest l)))\n    (first l)\n    (recur (rest l))))","user":"54d26316e4b0e8a36923e5f2"},{"code":"(fn penultimate [seq]\n  (if (= 2 (count seq))\n    (first seq)\n    (penultimate (rest seq))))","problem":20,"user":"505e2f6ce4b011187b721f38"},{"code":"(fn [v] ((vec v) (- (count v) 2)))","problem":20,"user":"53403110e4b085b17e897da6"},{"problem":20,"code":"(fn [x]\n  (loop [f (first x)\n         r (rest x)\n         c (count r)]\n    (if (= c 1)\n      f\n      (recur (first r)\n\t\t\t (rest r)\n      \t\t (count (rest r))))))","user":"563b7724e4b0bfe05bf11814"},{"code":"(comp second  reverse)","problem":20,"user":"5055899de4b0ce54f56f03fd"},{"problem":20,"code":"(fn penu [list] (nth list (- (count list) 2)))","user":"5f74daf2e4b02876ed9fd0a4"},{"code":"(fn [c]\n  (let [i (- (count c) 2)]\n    (nth c i)))","problem":20,"user":"5042bb9ae4b034ff00315d16"},{"code":"(fn second-to-last [x]\n  (if (= (second x) (last x))\n    (first x)\n    (recur (rest x))))","problem":20,"user":"5240cfd9e4b0ad64fa010346"},{"code":"(fn mylast [x] (if (= (count x) 2)\n          (first x)\n          (mylast (rest x))))","problem":20,"user":"512113b6e4b0ca414459ae93"},{"problem":20,"code":"(fn [in] (nth in (- (count in) 2)))","user":"5918db70e4b09b4ee5954bbb"},{"problem":20,"code":"(fn next-to-last\n  [a-list]\n  (if (= (count a-list) 2)\n    (first a-list)\n    (recur (rest a-list))))","user":"5bc4f266e4b07a9b28b10066"},{"problem":20,"code":"(fn [x] (.get x (- (count x) 2) ) )","user":"54cf6a32e4b018d918be98ce"},{"problem":20,"code":"(fn [x] ((comp last butlast) x))","user":"550ed248e4b06e50f9beb16c"},{"code":"(fn penult [alist]\n  (if (next alist)\n    (if (next (next alist))\n        (recur (next alist))\n        (first alist))\n    nil))","problem":20,"user":"4eb75bdf535d7eef30807375"},{"problem":20,"code":"#(nth % (dec(- (count %) 1)))","user":"552afdebe4b0ffed3738f95c"},{"problem":20,"code":"(fn [x] (let [[f r] (take-last 2 x)] f))","user":"55818b0ee4b05c286339e0fb"},{"problem":20,"code":"(fn [sequence] \n  (loop [s sequence]\n   (if (empty? (rest (rest s)))\n    (first s)\n    (recur (rest s)))))","user":"549931fbe4b0b312c081ff8a"},{"code":"(comp second reverse vec)","problem":20,"user":"4e99a255535dbda64a6f6b67"},{"problem":20,"code":"(fn [s] (-> s reverse second ))","user":"591d31d7e4b09b4ee5954c11"},{"code":"#(first (rest (reverse  % )))","problem":20,"user":"4f9a0f71e4b0dcca54ed6d04"},{"problem":20,"code":"(fn second-last [[a b & xs]]\n  (if xs (second-last (conj xs b)) a))","user":"56df254be4b0ca2494a095ea"},{"problem":20,"code":"(fn [elems] (nth (reverse elems) 1))","user":"53f49dfae4b0db01ade6f9c2"},{"code":"(fn secondToLast [aseq]\n  (if (empty? (rest (rest aseq)))\n    (first aseq)\n    (secondToLast (rest aseq))))","problem":20,"user":"4ec59b78535d6d7199dd36aa"},{"problem":20,"code":"(fn penultimate [seq]\n  (nth seq (- (count seq) 2)))","user":"58fdae44e4b0438e51c2cfba"},{"problem":20,"code":"(fn [ l ] (nth l (- (count l) 2)))","user":"52c48ec6e4b0c2d177d620dd"},{"problem":20,"code":"(fn [aa] (get (vec aa) (- (count aa) 2)))","user":"555e10fee4b0a2eb076a39b4"},{"code":"(fn [x] \n  (first \n    (rest \n      (reverse x) ) ) )","problem":20,"user":"4ff5c077e4b0678c553fc36f"},{"code":"(fn [elements] (nth elements (-(count elements) 2)))","problem":20,"user":"523d06aae4b0dbf0c301728b"},{"problem":20,"code":"(fn myLast [x] (nth x (- (count x) 2\n                         )))","user":"58e5f995e4b056aecfd47ca5"},{"problem":20,"code":"(fn [l]\n  (loop [li (reverse l) n 0]\n    (if (= n 1) \n      (first li)\n      (recur (rest li) (inc n)))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":20,"code":"(fn [coll]\n  (nth coll (-(count coll) 2)))","user":"5512aca6e4b055c2f668d4b4"},{"problem":20,"code":"(fn [x] (if (list? x)\n          (nth x (- (count x) 2))\n               (get x (- (count x) 2))))","user":"567f034be4b0feffd0d18eba"},{"code":"#(cond \n   (empty? (rest (rest %1))) (first %1)\n   :else (recur (rest %1)))","problem":20,"user":"52fc89b2e4b047fd55837019"},{"problem":20,"code":"(fn [x] (-> x\n            reverse\n            rest\n            first))","user":"57a5108be4b0a966079561f4"},{"code":"(fn second-last' [coll]\n  (if-let [[a b & cs] (reverse coll)]\n    b\n    nil))","problem":20,"user":"51cf0993e4b0e42293a2256a"},{"problem":20,"code":"(fn [f] (nth f (- (count f) 2)))","user":"5b0f2862e4b0cc2b61a3be0f"},{"problem":20,"code":"#((fn d [vtr] (.get vtr(- (count vtr) 2))) %)","user":"60dd865ee4b0d8b48c489db3"},{"code":"(fn [seq] (let [short-seq (drop-last seq)] (last short-seq)))","problem":20,"user":"5245cd3de4b09dbe66b56172"},{"problem":20,"code":"(fn [y] (loop [x y] (if (not-empty (rest (rest x))) (recur (rest x)) (first x))))","user":"561ccfb4e4b064ca9f4b169f"},{"code":"(fn [list] (second (reverse list)))","problem":20,"user":"4f845cd1e4b033992c121c31"},{"problem":20,"code":"(fn [x]\n  (loop [initial (first x) remaining (rest x)]\n    (if (empty? (rest remaining))\n      initial\n      (recur (first remaining) (rest remaining)))))","user":"5936a67de4b02506e01a2982"},{"problem":20,"code":"(fn second-to-last [[second-elem & more]] \n  (if (= 1 \n         (count more))\n    second-elem\n    (recur more)\n    ))","user":"5cf68580e4b0b71b1d808a5a"},{"problem":20,"code":"(fn [seq]\r\n    (first (rest (reverse seq))))","user":"4ddc5d0a535d02782fcbea05"},{"code":"(fn [x] (first (drop (- (count  x) 2) x)))","problem":20,"user":"516e2246e4b092a6408c5bc5"},{"problem":20,"code":"(fn [x] \n  (nth x (- (count x) 2))\n)","user":"54e85a7fe4b024c67c0cf823"},{"code":"(fn get-second-last [sq] (second (reverse sq)))","problem":20,"user":"4f2942ace4b0d6649770a01e"},{"problem":20,"code":"(fn [x] (first(drop 1 (reverse x))))","user":"582dc562e4b051871117bfcb"},{"code":"(fn [l]\n  (if (= (count l) 2)\n    (first l)\n    (recur (rest l)))\n )","problem":20,"user":"517b4d8ae4b0925c997201cf"},{"code":"(fn [x] (if (next (next x))\n          (recur (next x))\n          (first x)))","problem":20,"user":"4e6b6da8535d8ccf87e9ff12"},{"problem":20,"code":"(fn test [x] (nth x (- (count x) 2)))","user":"572a60cee4b0f4d77e651237"},{"problem":20,"code":"#(nth %(- (dec(count %)) 1))","user":"55e0d0eae4b050e68259b413"},{"code":"#(loop [elements %]\n  (if (= (count elements) 2)\n    (first elements)\n    (recur (rest elements))))","problem":20,"user":"523288fee4b035af41902a88"},{"problem":20,"code":"(fn [s]\n  (nth s (- (count s) 2))\n  )","user":"6074f5ede4b069485764de52"},{"problem":20,"code":"(fn [s]\n  (if (> (count s) 2)\n    (recur (rest s))\n    (first s)))","user":"560c2e7ce4b05f002753df2b"},{"code":"(fn [coll] (second (reverse coll)))","problem":20,"user":"4dddff47535d08e6dec9fdd4"},{"problem":20,"code":"(fn pen_ultimate \n  [s]\n  (if (empty? (rest (rest s)))\n    (first s)\n    (pen_ultimate (rest s))\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn [l]\n  (last (take 2 (reverse l))))","problem":20,"user":"50bdef33e4b0594b91591c86"},{"problem":20,"code":"(fn [l]\n  (last (drop-last l))\n  )","user":"551e7267e4b030e6a24d00e9"},{"code":"(fn [[p & r]] (if (empty? (rest r)) p (recur r)))","problem":20,"user":"4ee868be535d93acb0a6687d"},{"problem":20,"code":"#(loop [i (count %1) inp %1]\n    (if (<= i 2)\n      (first inp)\n      (recur (dec i) (rest inp))))","user":"5901731ae4b0438e51c2d03d"},{"problem":20,"code":"#(nth % (dec (-(count %)1)))","user":"5523f23ce4b0882d96d091b3"},{"code":"(fn [x](first (next (reverse x))))","problem":20,"user":"513f53c6e4b051389b345b40"},{"problem":20,"code":"(fn [x]\n  (peek\n   (pop\n\t(reverse x))))","user":"5535442ee4b09218d5f44fad"},{"code":"(fn [sq]\n  (if (next (next sq))\n    (recur (next sq))\n    (first sq)))","problem":20,"user":"4f840766e4b033992c121c27"},{"code":"#(last (take (- (count %) 1) %) )","problem":20,"user":"50335235e4b0c6c1199c710b"},{"code":";#(second (reverse %))\n#(let [v %]\n  (loop [v v]\n    (if (= 2 (count v))\n      (first v)\n      (recur (rest v)))))","problem":20,"user":"52c00e32e4b07a9af5792341"},{"problem":20,"code":"(fn foo [x] (if (= 1 (count (rest x))) (first x) (foo (rest x))))","user":"57501de0e4b02ea11479926c"},{"code":"(fn [seqr] (peek (pop (reverse seqr))))","problem":20,"user":"4fafd067e4b081705acca259"},{"code":"#(loop [xs %]\n  (if (empty? (rest (rest xs)))\n    (first xs)\n    (recur (rest xs))))","problem":20,"user":"4fcf0ce9e4b03432b189f40b"},{"problem":20,"code":"(fn [input] (loop [in input]\n                  (if (= 2 (count in))\n                    (first in)\n                    (recur (rest in)))))","user":"579aff09e4b05b1deef9ade7"},{"code":"( fn [a]\n  (if (= (count a) 2)\n    ; then\n    (first a)\n    ; else\n    (recur (rest a))\n  ) ; if\n) ; fn","problem":20,"user":"504e4ac2e4b0f6ff3350c49a"},{"problem":20,"code":"(fn [c] (nth c (-> c count (- 2))))","user":"5ca3def0e4b048ec896c5bb0"},{"code":"(fn [x] (first (rseq (pop (vec x)))))","problem":20,"user":"4e051b04535d04ed9115e7a4"},{"problem":20,"code":"(fn penultimate [list]\n  (->> list (reverse) (rest) (first)))","user":"547e3846e4b0c51c1f4d7302"},{"problem":20,"code":"#(second ( reverse % ) )","user":"5c2e07b7e4b0d62ef62d9efd"},{"code":"(\n  (fn [f] (fn [x] (f f x)))\n  (fn [f x]\n    (if\n      (= 2 (count x))\n      (first x)\n      (f f (rest x)))\n  )\n)","problem":20,"user":"4fc521eae4b081705acca37b"},{"problem":20,"code":"(fn [x] \n   (let [arr (-(count x) 2)]\n    (nth x arr)\n     ))","user":"544fb010e4b0e39780006997"}]