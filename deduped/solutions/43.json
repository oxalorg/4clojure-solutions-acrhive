[{"code":"(fn [s n]\n  (for [i (range n)]\n    (take-nth n (drop i s))))","problem":43,"user":"4e4be570535dc968683fc4d8"},{"problem":43,"code":"(fn [lst ct]\n  (letfn [(get-sec [idx]\n    (#(take-nth %2 (drop idx %)) lst ct))]\n      (map get-sec (take ct (range)))))","user":"608e5697e4b03bd49d9f36be"},{"code":"(fn [coll n]\n  (letfn [(il [x]\n            (map first\n                 (filter\n                   #(= x (last %))\n                   (map list coll (cycle (range 1 (inc n)))))))]\n    (loop [idx 1 result []]\n      (if (> idx n)\n        result\n        (recur (inc idx) (conj result (il idx)))))))","problem":43,"user":"52f381f3e4b05e3f0be25f10"},{"problem":43,"code":"(fn intl-x [coll x]\n  (let [vector (vec coll)\n        length (count coll)\n        collect-rec (fn [idx length vector x]\n                      (loop [curr idx\n                             res []]\n                        (if (>= curr length)\n                          res\n                          (recur (+ curr x) (conj res (get vector curr))))\n                        ))]\n    (loop [idx 0\n           res []\n           handled-mod-x []]\n      (if (>= idx length)\n        res\n        (if (contains? handled-mod-x (mod idx x))\n          (recur (inc idx) res handled-mod-x)\n          (recur (inc idx) (conj res (collect-rec idx length vector x)) (conj handled-mod-x idx))\n          )\n        )\n      )\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [li n] (for [x (range n)] (take-nth n (nthnext li x))))","problem":43,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn [l, n]\n   ((fn deinterleave [l, n, x]\n    (if\n      (= x n)\n      ()\n      (cons\n       ((fn everyN [l, n, x]\n          (let\n            [\n             nextX\n             (if\n               (= x n)\n               1\n               (+ x 1))]\n            (cond\n             (empty? l)\n             l\n             (= x n)\n             (cons\n              (first l)\n              (everyN\n               (rest l)\n               n\n               nextX))\n             :else\n             (everyN\n              (rest l)\n              n\n              nextX))))\n        l n n)\n       (deinterleave\n        (rest l)\n        n\n        (+ x 1)))))\n   l n 0))","problem":43,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":43,"code":"#(loop [f () c %1 i %2]\n   (if (= 0 i)\n     (reverse f)\n     (recur (conj f (take-nth %2 c)) (rest c) (dec i))))","user":"571ac0b8e4b07c98581c3b5b"},{"problem":43,"code":"(fn [col, n] (apply map list (partition-all n col)))","user":"5be182eae4b0ed4b8aab4c9d"},{"problem":43,"code":"(fn [l n] (let [L (partition n l)]\n  (for [i (range n)] (map #(nth % i) L))))","user":"53e745a1e4b036ad0777e479"},{"problem":43,"code":"(fn rev-int [v n]\n(apply map vector (partition n v)))","user":"542edb4ae4b0dad94371f2c8"},{"code":"(fn f\n  [xs n]\n  (map #(take-nth n (drop % xs)) \n       (range n)))","problem":43,"user":"50ef77a4e4b0bdaecbb47d99"},{"problem":43,"code":"(fn [s x]\n  (reduce \n   (fn [acc el] \n     (conj acc (take-nth x (drop el s)))) \n   [] \n   (range x)))","user":"5a68f374e4b0512ff01cda05"},{"code":"(fn [coll n]\n   (apply map list (partition n coll) ) )","problem":43,"user":"530c15f7e4b02e82168697d6"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (let [indices (map #(mod % n) (range 0 (count coll)))\n        mapped (mapv (fn [val index] (list val index)) coll indices)]\n    (reduce (fn [acc [val index]]\n              (println acc val index)\n              (map #(if (= % index) \n                      (conj (nth acc index) val) \n                      (nth acc %)) \n                   (range 0 n)))\n            (take n (repeat (vector))) \n            mapped)))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"problem":43,"code":"#(partition (/ (count %) %2) (apply interleave (partition-all %2 %1)))","user":"5dbd51cfe4b09f47823971bb"},{"code":"(fn [s n] (reduce #(assoc % (mod (last %2) n) (conj (get % (mod (last %2) n) []) (first %2))) [] (map vector s (iterate inc 0))))","problem":43,"user":"50ed4626e4b01236b1d4983c"},{"problem":43,"code":"(fn f [s n]\n  (let [p (partition n s)]\n    (loop [x 0 acc []]\n      (if (= n x)\n        acc\n        (recur (inc x) (conj acc (map #(nth %1 x) p)))))))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":43,"code":"(fn k-revinterleave [c n]\n\t  (map reverse\n\t\t (reduce (fn [r s] (map #(cons %2 %1) r s))\n\t\t\t (repeat n '())\n\t\t\t  (partition  n c))));","user":"5e0f9884e4b099d064962fc0"},{"code":"#(loop [startval 0, step %2, res []]\n\t     (cond (= startval step) res\n\t\t   :else  (recur (+ startval 1) step  (conj res       (loop [start startval, buff []]\n                                                      \t\t\t(cond (>= start (count %1)) buff\n                                                             \t\t\t:else  (recur (+ start step) (conj buff (nth %1 start)))))))))","problem":43,"user":"52f5eefbe4b09b582c12c9cb"},{"code":"(fn revint [xs initn]\n  (loop [ys [] n 0]\n    (if (= n initn)\n      ys\n      (recur \n        (conj ys \n          (map (fn [a] (nth xs a)) \n               (filter #(= (rem % initn) n) \n                       (range (count xs))))) (inc n)))))","problem":43,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn [a n]\n  (let [zindf (fn [off] (map #(+ off (* n %)) (range (/ (count a) n))))\n        allinds (map zindf (range n))\n        els (fn [is] (map #(nth a %) is))]\n    (map els allinds)))","problem":43,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":43,"code":"(fn reverse-interleave\n  [v n & {:keys [regular] :or {regluar false}}]\n  (if (true? regular) \n    (apply map (fn [& x] (remove nil? x))  \n      (let [total-size (count v)  \n            size (int (Math/ceil (/ total-size n)))]   \n        (partition n  \n                   (concat v (repeat (- (* n size) total-size) nil)))))\n    (apply map vector (partition n v))))","user":"57b4779de4b0fbc9809a279a"},{"problem":43,"code":"(fn [coll n]\n     (apply map list (partition n coll)))","user":"548ade6de4b0e286459a11f6"},{"problem":43,"code":"(fn [coll n] (for [x (range 1 (inc n))] (for [y (range (/ (count coll) n))] (nth coll (+ (* y n) (dec x))))))","user":"563dfc02e4b0da801c4e4662"},{"code":"(fn [xs r]\n  (let [get (fn [n] (take-nth r (drop n xs)))]\n\t\t(map #(get %) (range r))))","problem":43,"user":"508e13abe4b0f17d83ea26c7"},{"problem":43,"code":"(fn [cl np] (let [sp (/ (count cl) np)]\n    (for [n (range np)] (for [i (range sp)] (nth cl (+ n (* i np))))\n  )))","user":"55adf4d7e4b03311e7b732af"},{"problem":43,"code":"(fn [v n] (apply map vector (partition n v)))","user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":43,"code":"(fn rinterleave [sq n]\n  (:out (reduce (fn [{:keys [index out]} x]\n                  (let [sq-pos (mod index n)\n                        sqn (if (get out sq-pos) (conj (get out sq-pos) x) [x])]\n                    {:index (inc index) :out (assoc out sq-pos sqn)}\n                    )\n\n                  ) {:index 0 :out []} sq))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"(fn [s n]\n  (vals (group-by #(rem % n) s))\n  )","problem":43,"user":"52d42021e4b09f7907dd132a"},{"problem":43,"code":"(fn unter\n  [l n]\n  (loop [remaining l\n         rv []]\n    (if (<= (count remaining) n)\n      (filter #(= (count %1) (/ (count l) n)) rv)\n      (recur (rest remaining) (conj rv (take-nth n remaining))))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn [a n] (reduce \n    (fn [l p] \n      (map-indexed (fn [i e] (conj e (nth p i))) l))\n    (repeat n [])\n    (partition n a)\n  )\n)","problem":43,"user":"4f1595da535d64f603146444"},{"problem":43,"code":"(fn [coll n]\n    (reduce\n     (fn [acc [i x]]\n       (assoc acc (mod i n)\n              (conj (get acc (mod i n)) x)))\n     (into [] (repeat n []))\n     (map-indexed vector coll)))","user":"5935b010e4b04f87174def55"},{"code":"(fn [coll n]\n  (partition (/ (count coll) n)\n             (apply interleave (partition n coll))))","problem":43,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn [s n]\n           (map (fn [x]\n                    (map (fn [y]\n                             (nth s y)) x)) \n                (apply map \n                       vector \n                       (partition n \n                                  (range (inc (count s)))))))","problem":43,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [coll par]\n  (let [get_seq (fn [args]\n                  (for [i (range (count (first args)))]\n                    (for [sub_i (range (count args))]\n                      (nth (nth args sub_i) i))))]\n    (get_seq (partition par coll))))","problem":43,"user":"5016ac54e4b052339a490e7b"},{"problem":43,"code":"(fn [v n]\n  (apply map list (partition n v)))","user":"5d1054b7e4b0c7caa59af461"},{"problem":43,"code":"(fn [coll n] (apply mapv vector (partition n n nil coll)))","user":"54d1cf2ee4b0e8a36923e5eb"},{"code":"(fn [xs n]\n  (loop [xs xs ys (for [i (range n)] [])]\n    (if (> n (count xs))\n      ys\n      (recur (drop n xs) (for [i (range n)] (conj (nth ys i) (nth xs i)))))))","problem":43,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn rev-interleave [lst n]\n  \n  (letfn [(nth-group [lst current step acc]\n  (if (empty? lst)\n    acc\n    (if (nil? (nth lst current nil))\n      acc\n      (nth-group (rest lst) (+ current step ) step (conj acc (nth lst current))))))]\n  \n  (loop [l lst step (- n 1) cnt n acc []]\n    (if (zero? cnt)\n      acc\n      (recur (rest l) step (- cnt 1) (conj acc (nth-group l 0 (- n 1) []) )  )\n      ))\n  \n  )\n  \n  )","problem":43,"user":"5180dc04e4b06b8caf33fa01"},{"problem":43,"code":"(fn [coll x]\n   (apply map vector\n          (partition x coll)))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn [c n] (map seq (reduce #(map conj % %2) (repeat n []) (partition n c))))","problem":43,"user":"525b0b51e4b0cb4875a45d01"},{"problem":43,"code":"(fn\n\n  [x y]\n  \n  (apply map list (partition y x))\n\n)","user":"5e9e8648e4b00a66d4a95178"},{"problem":43,"code":"(fn reverse-interleave\n   ([s n] (reverse-interleave s n 0 []))\n   ([s n i groups]\n    (if (empty? s)\n      (map reverse groups)\n      (reverse-interleave\n       (rest s)\n       n\n       (inc i)\n       (update-in groups [(mod i n)] #(conj % (first s)))))))","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn cam-interleave [lst n]\n  (map seq\n       (loop [lst lst\n              acc (map (fn [_] []) (range n))]\n         (if (empty? lst)\n           acc\n           (let [new-heads (take n lst)\n                 rst (drop n lst)]\n             (recur rst\n                    (map-indexed (fn [i lst]\n                                   (conj lst (nth new-heads i)))\n                                 acc)))))))","problem":43,"user":"4f03afcc535dcb61093f6b4d"},{"code":"(fn [items n] \n  (reverse (loop [l (repeat n '()) \n         i 0 \n         xs (reverse items)]\n    (if (seq xs)\n        (recur \n\t        (map-indexed #(if (= %1 i) (conj %2 (first xs)) %2) l) \n          (mod (+ i 1) n)\n          (rest xs))\n      l))))","problem":43,"user":"504e108ce4b078edc5f593b3"},{"problem":43,"code":"(fn [xs n]\n  (reduce (partial map conj)\n        (repeat n [])\n        (partition n xs)))","user":"5adf5f9be4b0837691e92c33"},{"problem":43,"code":";#(apply map list (partition %2 %1))\n(fn [coll n]\n  (reduce-kv\n   (fn [r k v]\n     (let [i (mod k n) sub (r i)]\n       (assoc r i (conj sub v))))\n   (vec (repeat n []))\n   (vec coll)))","user":"57c1b32be4b05aa3c4741ca4"},{"code":"(fn rev-int[col n]\n  (for [a (range n)]\n    (take-nth n (drop a col))))","problem":43,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn rev-interleave [lst n]\n  (let [vlst (vec lst)]\n    (for [x (range n)]\n      (take-nth n (nthnext vlst x)))))","problem":43,"user":"5374adc3e4b06d7f452d9e27"},{"problem":43,"code":"(fn [coll n]\n  (apply map list (partition n n coll)))","user":"504e71cbe4b0f6ff3350c4b3"},{"problem":43,"code":"(fn [xs n] (vals (group-by #(mod %1 n) xs)))","user":"4f259f95e4b0d66497709ffa"},{"code":"(fn [x y] \n  (apply map vector (partition y x))\n)","problem":43,"user":"52016690e4b0b2e020a18f0f"},{"problem":43,"code":"(fn[a b] \n     (for [i (conj  (into [] (rest (range b))) 0)] \n      (filter \n        (fn[x] \n          (if \n            (= i (mod (inc (.indexOf a x)) b)) \n            true \n            false\n          )\n         ) \n         a\n       )\n     )\n   )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [s n] (for [x (range n)] (take-nth  n (drop x s))))","problem":43,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn r-i ([s n] (r-i s n n '())) ([s n c r] (lazy-seq (if (<= 1 c) (r-i s n (dec c) (conj r (map #(nth % (dec c)) (partition n s)))) (seq r)))))","problem":43,"user":"52eaba10e4b09f7907dd14c2"},{"problem":43,"code":";; (fn [c n] (reduce (fn [m [x i]] (update-in m [(mod i n)] #(conj % x))) (vec (take n (repeat []))) (map vector c (range))))\n(fn [c n] (apply map list (partition n c)))","user":"5a5894d9e4b05d388ecb6c81"},{"problem":43,"code":"(fn inverse-interleave [xs n]\n  (->> ((apply juxt (map #(partial drop %) (range n)) ) xs)\n       (map #(apply concat (partition 1 n % )))))","user":"58e37946e4b005f69f193cae"},{"problem":43,"code":"(fn [input target]\n  (->> input\n       (repeat target)\n       (map-indexed (fn [j y] (assoc {} j y)))\n       (into {})\n       (map (fn [[idx list]] (keep-indexed (fn [i x] (if (= (mod i target) idx) x)) list)))\n       ))","user":"5da4b152e4b000c986472bf6"},{"code":"(fn [s i] (map flatten (for [x (range i)] (partition 1 i (drop x s)))))","problem":43,"user":"4f0397ee535dcb61093f6b30"},{"problem":43,"code":"(fn [a b]\n  (let [c ((fn [x y]\n             (let [f (fn [x y z] (#(range %2 %1 %3) (count x) y z))]\n               (map #(f x %1 y) (range 0 y)))) a b)\n        d (fn [i] (nth a i))]\n   (map #(map d %1) c)))","user":"52281e1ee4b0186687e23a69"},{"problem":43,"code":"(fn [v n] \n  (apply map list (partition n v)))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"#(map (fn [coll] (map second coll))\n      (vals (group-by (fn [[idx _]] (mod idx %2))\n                      (map-indexed (fn [& x] x)\n                                   %))))","problem":43,"user":"51e89428e4b006d205356a51"},{"problem":43,"code":"(fn [coll n]\n  (map (fn [i] ((fn [i n coll]\n                  (map #(nth % i) (partition n coll))) i n coll)) (range n)))","user":"54caaa48e4b057c6fda3a267"},{"problem":43,"code":"#(partition  (/ (count %) %2) (apply interleave (partition %2 %)))","user":"585dbe41e4b0f14aab7c879f"},{"problem":43,"code":"(fn[a n](vals (group-by #(mod % n) a)))","user":"50e90813e4b033b0e80d11e7"},{"code":"(fn ril [sq vl]\n  (for [vlist (vals\n    (group-by first\n      (map-indexed\n        (fn [idx sqval]\n          [(rem (inc idx) vl) sqval])\n        sq)))]\n     (map second vlist)))","problem":43,"user":"515737f0e4b0b0b4b87062d0"},{"problem":43,"code":"(fn [l n] (loop [res (repeat n []) l l]\n            (if (zero? (count l))\n              res\n             (recur (map conj res (take n l)) (drop n l)))))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":43,"code":"(fn f [coll n]\n  (apply map vector (partition n coll)))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"#((fn rev-inter [elms size counter] \n    (if (> counter 0)\n      (conj \n       (rev-inter (next elms) size (dec counter))\n       (take-nth size elms)))) %1 %2 %2)","problem":43,"user":"5141bc82e4b02fd87f5064c5"},{"code":"(fn [l c] (for [offset (range c)] (flatten (partition 1 c (drop offset l)))))","problem":43,"user":"53712c03e4b0fc7073fd6ea9"},{"code":"(fn\t[s n]\n\t(for [x (range n)]\n\t     (take-nth n (drop x s))))","problem":43,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn r-interleave [coll n]\n  ((fn f [n coll acc]\n     (let [elems (take n coll)]\n       (if (= (count elems) n)\n         (recur n (drop n coll) (map cons elems acc))\n         (map reverse acc))))\n     n coll (for [x (range n)] '())))","problem":43,"user":"4ec75077535d6d7199dd36e0"},{"problem":43,"code":"(fn [rng cnt]\n  (loop [res []\n         num cnt]\n    (if (= 0 num)\n      res\n      (recur \n       (conj \n        res \n        (take-nth cnt\n                  (drop (- cnt num) \n                         rng)))\n       (dec num)))))","user":"53da3fcde4b0e771c3025497"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n\t(apply mapv list (partition-all n coll))\n)","user":"525d44bfe4b0cb4875a45d6d"},{"problem":43,"code":"(fn [list n]\n  (partition-by (fn [num] (mod num n))\n   (sort(fn [a b] (< (mod (.indexOf list a) n) (mod (.indexOf list b) n))) list)))","user":"5a1bec89e4b0ff51aa4b322f"},{"code":"(fn [s b] (vals (group-by (fn [x] (mod x b)) s)))","problem":43,"user":"5300f68de4b0d8b024fd3714"},{"problem":43,"code":"(fn [s p]\n  (apply map vector (partition p s))\n)","user":"54524afbe4b0e397800069bc"},{"problem":43,"code":"(fn [coll n] (->> coll (group-by #(mod % n)) (map second)))","user":"505fdf63e4b08f2a82ad10b9"},{"problem":43,"code":"(fn reverse-interleave [sqn, n]\n  (if (<= (count sqn) n)\n    (map list sqn)\n    (map conj (reverse-interleave (drop n sqn) n) (take n sqn))))","user":"569f99cce4b0542e1f8d1497"},{"code":"(fn [s n]\n  (for [i (range n)]\n    (map #(nth % i) (partition n s))))","problem":43,"user":"4f58d92fe4b0a7574ea71858"},{"problem":43,"code":"(fn [theseq splits] (for [i (range 0 splits)]\n(take-nth splits (nthrest theseq i))))","user":"55f75c6be4b06e875b46cea9"},{"problem":43,"code":"(fn [s n]\n    (loop [s s\n           i 0\n           result []]\n      (if-not (and (seq s) (< i n))\n        result\n        (recur (next s)\n               (inc i)\n               (conj result (remove #(= % ::remove)\n                                    (map-indexed\n                                     (fn [idx e]\n                                       (if (zero? (mod idx n)) e ::remove))\n                                     s)))))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":43,"code":"(fn [l c]\n  (loop [l l c c result () cnt 0]\n    (if (= c cnt)\n      (sort-by first result)\n      (recur l c (conj result (for [a l :when (= cnt (rem a c))] a)) (inc cnt)))))","user":"58e90258e4b056aecfd47cfd"},{"code":"(fn [c step] (for [s (range step)] (take-nth step (nthrest c s))))","problem":43,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":43,"code":"(fn [coll x] \n\t (apply map list (partition x coll))\n\t)","user":"5ac04101e4b073f177442737"},{"problem":43,"code":"(fn [l n]\n  ((fn helper [l c]\n     (if (= c (+ 1 n))\n       '()\n       (cons (take-nth n l) (helper (rest l) (+ 1 c))))) l 1 ))","user":"55a35ef4e4b0acc240e31535"},{"code":"(fn [coll n]\n  (for [i (range n)]\n    (keep-indexed (fn [idx item] (when (zero? (rem idx n)) item)) (drop i coll))))","problem":43,"user":"4fb12b35e4b081705acca275"},{"code":"#(apply map (cons list (partition %2 %)))","problem":43,"user":"4ece9ca9535d23f03622770f"},{"problem":43,"code":"(fn bla [xs n](map (partial map second) (map second (group-by first (map-indexed (fn [idx itm] [(mod idx n) itm]) xs)))))","user":"56b280e3e4b0982f16b37e06"},{"problem":43,"code":"(fn a [col n]\n  (apply map list (partition n col)))","user":"58b18ba0e4b0ebc645576cfa"},{"code":"(fn [sq x] (vals (group-by #(rem % x) sq)))","problem":43,"user":"4f0c4518535d0136e6c2230b"},{"problem":43,"code":"#(apply map (fn [& str] str) (partition %2 %))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn [ls n] (vals (group-by #(rem % n) ls)))","problem":43,"user":"5003ee7de4b0678c553fc446"},{"code":"(fn [coll n] (map #(let [c (drop % coll)]\n                        (take-nth n c))\n                  (range n)))","problem":43,"user":"53498f88e4b084c2834f4a64"},{"code":"#(map-indexed (fn [idx item] (take-nth %2 (drop idx item))) (repeat %2 %))","problem":43,"user":"4f01ff83535dcb61093f6a3a"},{"problem":43,"code":"(fn [s n]\n  ((fn reverse-interleave [s n i]\n     (if (= i 1)\n       (list (take-nth n s))\n       (cons (take-nth n s) (reverse-interleave (rest s) n (dec i)))))\n   s n n))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":43,"code":"(fn foo [coll x]\n  (for [n (range x)]\n  (keep-indexed #(if (= n (mod %1 x)) %2)\n               coll\n\n)))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":43,"code":"(fn [coll n]\n    (apply map vector (partition n coll)))\n\n;(fn [coll n]\n;  (reduce\n;    (fn [acc [i e]]\n;      (let [slot (mod i n)]\n;        (assoc acc slot\n;          (conj (get acc slot []) e))))\n;    []\n;    (map-indexed (fn [i e] [i e]) coll)))","user":"53a074a4e4b0ca733b9744af"},{"problem":43,"code":"(fn [x n]\n  (map\n    (partial take-nth n)\n    (take n (iterate next x))))","user":"55be39f9e4b01b9910ae2a06"},{"problem":43,"code":"(fn part [coll n] (apply map list (partition n coll)))","user":"54ff2968e4b07d26eda61d4a"},{"problem":43,"code":"(fn [v n]\n  (let [iv (map-indexed (fn [idx v] [idx v]) v)\n        piv (group-by #(mod (first %) n) iv)]\n    (map #(map second (second %)) piv)))","user":"50921f9ae4b09a7d0b586de1"},{"problem":43,"code":"(fn rev-interleave [col n]\n      (if (< (count col) n)\n        (repeat n '())\n        (map cons\n             (take n col)\n             (rev-interleave (drop n col) n))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":43,"code":"(fn  [col n]\n  (map (fn [x] (map (fn [y] (second y)) x)\n         ) (vals  (group-by #(first %) (map-indexed (fn [i x] [(mod i n) x]) col)))))","user":"53664e3be4b0243289761e74"},{"code":"(fn [xs n]\n  (apply (partial map list) (partition n xs)))","problem":43,"user":"51ef66a7e4b0871fa145d9a5"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (reduce (fn [col x]\n            (if (= n 2)\n              (let [modulus (mod (inc x) n)]\n                (assoc col modulus (conj (nth col modulus) x)))\n              (let [modulus (mod x n)]\n                (assoc col modulus (conj (nth col modulus) x))))) (vec (repeat n [])) coll))","user":"54d0cedde4b0e8a36923e5d2"},{"code":"#(for [ x (range %2) ] (take-nth %2  (drop x %1 )))","problem":43,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn rev-int [v n]\n  (apply map vector (partition n v)))","problem":43,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":43,"code":"(fn [lis n] (map (fn [offs] (\n\n(fn every-nth [li offset] (cond\n                              (empty? li) nil\n                              (= offset 0) (cons (first li) (every-nth (rest li) (dec n)))\n                              true (every-nth (rest li) (dec offset))\n                              ))\n\n   lis offs)) (range n)))","user":"5b20134de4b03cfeda66ed2d"},{"problem":43,"code":"(fn revint [col n]\n  (reduce (fn [x y]\n            (map #(apply conj %) (partition 2 (interleave x y)))) \n          (repeat n []) \n          (partition n col)))","user":"55536a8ae4b0deb715856e03"},{"problem":43,"code":"(fn undointer [coll n]\n  (map\n    #(take-nth n (nthnext coll %))\n    (range n)))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn [s n] (map #(take-nth n (drop % s)) (range n)))\n;(fn [s n] (map #(take-nth n (nthrest s %)) (range n)))","problem":43,"user":"4efd98fa535de96065cf5086"},{"problem":43,"code":"(fn reverse-interleave [ip-vec n]\n  (loop [ans-seq () ip-seq ip-vec num n]\n    (if (= num 0)\n      (reverse ans-seq)\n      (recur (conj ans-seq (take-nth n ip-seq))\n             (rest ip-seq)\n             (dec num)))))","user":"5d8c8175e4b0915913b1d3e1"},{"problem":43,"code":"#(partition (int (/ (count %1) %2)) (apply interleave (partition %2 %1)))","user":"57614948e4b0994c1922fb83"},{"problem":43,"code":"(fn rev-interleave [s n]\n  (apply map list (partition n s)))","user":"5e21c933e4b05b4b01516128"},{"code":"#(->>\n  (partition %2 %1)\n  (apply interleave)\n  (partition (/ (count %1) %2)))","problem":43,"user":"4fdb881ee4b05e33b9224f5e"},{"problem":43,"code":"(fn [coll x]\n  (reverse (loop [i '()\n                  c coll]\n             (if (= x (count i))\n               i\n               (recur (conj i (take-nth x c)) (rest c))))))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (loop [count n res [] coll coll]\n    (if (= count 0)\n      res\n      (recur (dec count) (conj res (take-nth n coll)) (rest coll) ))))","user":"55079e55e4b021ccfedb96aa"},{"code":"#(->> (partition %2 %1)\n       (apply map vector))","problem":43,"user":"536e5055e4b0fc7073fd6e6b"},{"problem":43,"code":"(fn [x y]  \n  (apply map list  (partition-all y x))\n   )","user":"50b25edae4b03ea88043355e"},{"problem":43,"code":"(fn [coll n-colls]\n  (apply map vector (partition n-colls coll)))","user":"5547bcf2e4b0a04f79299551"},{"problem":43,"code":"(fn rev-interleave [s n]\n  (for [x (range n)]\n    (take-nth n (nthrest s x))))","user":"5674607ae4b05957ce8c6137"},{"problem":43,"code":"(fn[s nr]\n  (reverse (loop [i 0 c s acc []]\n     (if (and (not (empty? c)) (< i nr))\n       (recur (+ i 1) (rest c) (cons (take-nth nr c) acc))\n       acc\n       ))))","user":"560ac5cae4b05f002753df09"},{"problem":43,"code":"(fn [coll n]\n  (let [foo (group-by (fn[[i v]] (mod i n)) (map-indexed list coll))]\n    (map #(map second (foo %)) (range n))\n    )\n  )","user":"54145050e4b01498b1a719ea"},{"problem":43,"code":"(fn [l, s] (apply map list (partition s l)))","user":"560d2b53e4b05f002753df37"},{"problem":43,"code":"(fn reverse-interleave [l n]\n  (partition \n   (quot (count l) n) \n   (apply interleave (partition n l))))","user":"602049b8e4b0bf4ca6b10961"},{"problem":43,"code":"(fn [s n]\n   (let [ivec (map-indexed #(vector (mod % n) %2) s)]\n     (vals (sort (reduce\n                  (fn [a x]\n                    (let [k (first x) v (last x)]\n                      (assoc a k (conj (get a k []) v))))\n                  {}\n                  ivec)))))","user":"590088bfe4b0438e51c2d026"},{"code":"#(apply map list (partition %2 %2 %1))","problem":43,"user":"4f0a4e7e535d0136e6c222f4"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (-> (group-by #(mod % n) s)\n      vals\n      ))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"(fn [l n]\n  (letfn [(bound-index [i n]\n            (if (= (- n 1) i) 0 (+ i 1)))\n          (assoc-interleave [r i v]\n            (assoc r i\n              (if-let [sub (get r i)]\n                (assoc sub (count sub) v)\n                [v])))\n          (reverse-interleave-iter [l n r i]\n            (if (empty? l)\n              r\n              (reverse-interleave-iter (rest l) n (assoc-interleave r i (first l)) (bound-index i n))))]\n    (reverse-interleave-iter l n [] 0)))","problem":43,"user":"517531c6e4b07031762f2eea"},{"code":"(fn [s n] (for [i (range n)] (for [j (range i (count s) n)] (nth s j))))","problem":43,"user":"51b76227e4b0d906fcd71d35"},{"problem":43,"code":"(fn [v n]\n  (map (fn [i] (map #(nth % i) (partition n v))) (range n)))","user":"56990b68e4b0542e1f8d143a"},{"problem":43,"code":"#(apply (partial map list) (partition %2 %1) )","user":"567798afe4b05957ce8c6169"},{"code":"(fn [v n] (apply map (cons vector (partition n v))))","problem":43,"user":"534f13b2e4b084c2834f4ac4"},{"problem":43,"code":"(fn [ls p]\n   (->>\n     (group-by second (map (fn [v c] [v (mod c p)]) ls (range))) \n     (map second)  \n     (map (partial map first))))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [s n] (map (fn [xs x] (keep-indexed #(when (= (mod % n) x) %2) xs)) (repeat n s) (iterate inc 0)))","problem":43,"user":"50166470e4b052339a490e76"},{"code":"(fn [xs n]\n  (for [part (range n)]\n    (for [i (range (/ (count xs) n))]\n      (nth xs (+ (* i n) part)))))","problem":43,"user":"4fca4c37e4b0ee37620e184f"},{"problem":43,"code":"(fn reverse-interleave [in-seq sub-seqs]\n  (map (fn [x] (keep-indexed #(when (= (mod %1 sub-seqs) x) %2) in-seq)) (range sub-seqs)))","user":"57b356c2e4b0fbc9809a277b"},{"code":"(fn [s n] \n     (let [p-size (/ (count s) n)]\n       (partition p-size (apply interleave (partition n s)))))","problem":43,"user":"4e6a11ee535d8ccf87e9fe9f"},{"code":"#(map (partial map second) (partition-by first (sort (map-indexed (fn [i e] [(mod i %2) e]) %1))))","problem":43,"user":"4f29cdc8e4b0d6649770a033"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (for [offset (range n)]\n    (take-nth n (drop offset coll))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":"(fn rint [l n] \n  (let [t (fn rec-intl [n l c]\n          \t(if (> c 0)\n               (cons (take-nth  n l) (rec-intl n (rest l) (dec c)))))]\n               (t n l n)))","problem":43,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn f ([col div] (f col div 0 []))\n      ([col div i v]\n        (if-not (empty? col) (let [e (get v i)]\n                               (recur (rest col) div (mod (inc i) div) (assoc v i (if-not (nil? e) (assoc e (count e) (first col))\n                                                                                                   [(first col)]))))\n                              (map (comp reverse (partial reduce conj ())) v))))","problem":43,"user":"51eadb98e4b0f1f103a0d153"},{"problem":43,"code":"(fn [items n]\n  (map (fn [a]\n         (loop [i 1\n                exp (+ a 1)\n                res []\n                items items]\n           (if (empty? items)\n             res\n             (if (= i exp)\n               (recur (inc i)\n                      (+ exp n)\n                      (conj res (first items))\n                      (rest items))\n               (recur (inc i)\n                      exp\n                      res\n                      (rest items))))))\n       (range n)))","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":43,"code":";#(let [input %1 splitv %2\n  ;       val (/ (count input)splitv)]\n  ;   (partition\n  ;     val (apply interleave (partition splitv input))))\n\n\n (fn [inputcol splitv]\n    (let [val (/ (count inputcol) splitv)]\n      (->> inputcol\n           (partition splitv)\n           (apply interleave)\n           (partition val))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [coll n]\n  (let [keep-every-nth (partial keep-indexed #(when (zero? (mod %1 n)) %2))]\n    (loop [acc [], i 0, xs coll]\n      (if (>= i n)\n        acc\n        (recur (conj acc (keep-every-nth xs)) (inc i) (rest xs))))))","problem":43,"user":"500ff421e4b0ae202717946f"},{"code":"#(for [x (range %2)] (take-nth %2 (drop x %)))","problem":43,"user":"4f062d4a535dcb61093f6c08"},{"problem":43,"code":"(fn [s n]\n  (apply (partial map list) (partition n s)))","user":"585030cbe4b0b7285a6f4e78"},{"code":"(fn my-interleave [s n]\n  (for [zeile (range 0 n)]\n    (for [spalte (range 0 (/ (count s) n))]\n      (nth s (+ zeile (* n spalte))))))","problem":43,"user":"5300b750e4b0d8b024fd3711"},{"problem":43,"code":"(fn [xs n]\n  (reduce (fn [ys zs] (map #(conj %1 %2) ys zs)) (repeat n []) (partition n xs)))","user":"5799ff45e4b05b1deef9add1"},{"problem":43,"code":"(fn [coll step]\n  (letfn [(f [coll step]\n            (cond (or (not (pos? step)) (empty? coll)) ()\n                  (= step 1) coll\n                  :else (loop [xs coll\n                               count 0\n                               acc (list (first xs))]\n                          (cond (empty? xs) (reverse acc)\n                                (= count step) (recur (rest xs) 1 (conj acc (first xs)))\n                                :else (recur (rest xs) (inc count) acc)))))]\n    (loop [xs coll\n           acc ()]\n      (let [sc (f xs step)]\n        (cond (or (empty? xs)\n                  (= (last coll) (last sc))) (reverse (conj acc sc))\n                  :else (recur (rest xs) (conj acc sc)))))))","user":"554ba1d3e4b0a04f79299595"},{"problem":43,"code":"(fn f [x y]\n  (map\n    (fn [x]\n      (map second x\n      )\n    )\n    (vals\n      (group-by\n        #(mod\n          (first %)\n          y\n        )\n        (map vector\n          (range)\n          x\n        )\n      )\n    )\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"problem":43,"code":";#(list (take-nth %2 %1) (take-nth %2 (rest %1)))\n\n#(let [n %2] (loop [v %1 i %2 result '()]\n   (if (= i 0)\n     (reverse result)\n     (do\n       (if (empty? result)\n         (recur v (dec i) (conj result (take-nth n v)))\n         (recur (rest v) (dec i) (conj result (take-nth n (rest v)))))))))","user":"5e380e72e4b01d43a70e8db0"},{"code":"#(map second (group-by (fn [i] (mod i %2)) %))","problem":43,"user":"4ec74de3535d6d7199dd36df"},{"problem":43,"code":"(fn reverse-interleave [sequ num] (let [cnt (count sequ)\n                                          init (reduce #(assoc-in %1 [%2] []) [] (range num))]\n                                      (reduce #(assoc-in %1 [(:group %2)(:pos %2)] (:val %2)) init \n                                              (map (fn [a b] {:group (:group a) :pos (:pos a) :val b})\n                                               (map (fn [x] {:group (mod x num) :pos (quot x num) }) (range cnt))\n                                                sequ))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":43,"code":"(fn [coll size]\n  (apply map vector (partition size coll)))","user":"589cb617e4b00487982d536a"},{"problem":43,"code":"(fn [coll amt]\n    (loop [result [] coll coll count 0]\n        (if (= count amt)\n            result\n            (recur \n                (conj result (take-nth amt coll))\n                (rest coll)\n                (inc count)))))","user":"5896735fe4b00487982d529d"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (->> coll\n       (partition n)\n       (apply interleave)\n       (partition (quot (count coll) n))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":43,"code":"#(apply map vector (partition %2 %1\n                              ))","user":"54725331e4b094393f72dd76"},{"problem":43,"code":"(fn [s n]\n    (->>\n      s\n      (map-indexed #(list (rem %1 n) %2))\n      (group-by first)\n      (vals)\n      (map #(map second %))\n    ))","user":"5901158de4b0438e51c2d039"},{"code":"#(->> % (partition-all %2) (apply map vector))","problem":43,"user":"519b2570e4b0ac1b7dced6a3"},{"problem":43,"code":"(fn [coll segments]\n  (let [tails (take segments (iterate rest coll))]\n    (doall (map (fn [tail]\n                  (doall (keep-indexed (fn [index item]\n                                         (when (zero? (mod index segments))\n                                           item))\n                                       tail)))\n                tails))))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn [xs n]\r\n       (apply map vector (partition n xs)))","problem":43,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn [a-seq n]\n  (let [len (count a-seq)\n        groups (group-by #(mod % n) a-seq)]\n    (vals groups)))","problem":43,"user":"52ee46e5e4b05e3f0be25ec5"},{"code":"#(partition (quot (count %1) %2) (apply interleave (partition %2 %1)))","problem":43,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":43,"code":"(fn [xs n]\n      (->> (partition n xs) (apply map list)))","user":"5409a12fe4b0addc1aec66df"},{"problem":43,"code":"(fn [xs n] (partition (/ (count xs) n) (apply interleave (partition-all n xs))))","user":"55645592e4b0c656e3ff1802"},{"problem":43,"code":"(fn [s n]\n  (loop [s1 s m1 {}]\n    (if (empty? s1)\n      (vals m1)\n      (recur (drop n s1)\n             (loop [x (range n) s2 (take n s1) m2 m1]\n               (if (empty? x)\n                 (into m1 m2)\n                 (recur (rest x)\n                        (rest s2)\n                        (if (not (nil? (get m2 (first x))))\n                          (into m2 {(first x) (concat (get m2 (first x)) (list (first s2)))})\n                          (into m2 {(first x) (list (first s2))})))))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":43,"code":"#(apply map (fn [& c] c) (partition %2 %1))","user":"5112500ee4b0350614f07a72"},{"problem":43,"code":"(fn intersperse [xs n]\n  (->> (partition n xs)\n       (apply map list)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [s n] \n  (let [ri (fn r [x c] \n             (if (> c n) '() (cons (take-nth n x) (r (rest x) (+ c 1))))\n             )\n        ]\n    (ri s 1)\n    )\n  )","problem":43,"user":"535197f2e4b084c2834f4ae4"},{"problem":43,"code":"(fn ri [seq cnt]\n  (loop [s seq  ret (repeat cnt [])]\n    (if (empty? s) ret\n        (recur (drop cnt s) \n           (for [j (range cnt)]\n              (conj (nth ret j) (nth s j)))))))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [coll n]\n  (loop [n n\n\t i 0\n\t r '()\n\t c coll]\n    (if (< i n)\n      (recur n\n\t     (inc i)\n\t     (concat r\n\t\t     (list (keep-indexed #(if (= (mod %1 n) i) %2) c)))\n\t     c)\n      r)))","problem":43,"user":"5151c184e4b03e678e393add"},{"problem":43,"code":"(fn [items groups] \n  (loop [n 1 res () lst items] \n    (if (= n (inc groups)) \n      res \n      (recur (inc n) \n             (concat res \n                (list((fn [aList pos] (mapcat identity (partition 1 pos aList))) lst groups))) \n             (rest lst)))))\n\n;neater alternatives\n\n;#(apply map list (partition %2 %1))\n\n;#(for [x (range %2)] (take-nth %2 (drop x %1)))","user":"55e01f4ee4b050e68259b406"},{"problem":43,"code":"(fn [coll n] (map (fn [r] (map #(nth % r) (partition n coll))) (range n) ))","user":"5156e767e4b04360f2428e6b"},{"problem":43,"code":"(fn [coll n]\n  (reduce (partial map conj)\n          (repeat n [])\n          (partition n coll)))","user":"5764457ae4b0994c1922fbf3"},{"code":"(fn __ [col parts]\n  (vals (group-by #(mod % parts) col)))","problem":43,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [xs n]\r\n  (partition (/ (count xs) n)\r\n    (apply interleave\r\n      (partition n xs))))","problem":43,"user":"502873a8e4b01614d1633ff8"},{"problem":43,"code":"(fn ff [values n] (loop [remaining values x n finals '()] \n  (if (zero? x)\n    finals\n    (let [tks (take-nth n remaining)\n          dps (drop 1 remaining)\n          ]\n      (recur dps (dec x)\n             (concat finals (vector tks)))))))","user":"57b35ecbe4b0fbc9809a277e"},{"problem":43,"code":"#(map-indexed\n (fn [i itm]\n   (take-nth %2 (drop i %1)))\n (take %2 %1))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"code":"(fn [coll x]\n  (loop [result []\n         start-idx 0]\n    (if (= start-idx x)\n      result\n      (recur (conj result (take-nth x (drop start-idx coll)))\n             (inc start-idx)))))","problem":43,"user":"52d9aaa1e4b09f7907dd13ae"},{"code":"(fn [xs i]\n  (->> (map-indexed #(list %1 %2) xs)\n       (group-by #(mod (first %) i ,))\n       (vals ,)\n       (map (partial map #(nth % 1)) ,)))","problem":43,"user":"4e593dac535d8a8b8723a29c"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (loop [xs coll res (apply list (repeat n '()))]\n    (if (< (count xs) n)\n      (map #(reverse %) res)\n      (recur (drop n xs) (map #(conj %1 %2) res (take n xs))))))","user":"53c126fce4b00fb29b22125b"},{"problem":43,"code":"(fn outerl\n  [s n]\n  (loop [t [] i 0]\n   (if (= i n)\n      t\n      (recur (conj t (take-nth n (remove #(< (.indexOf s %) i) s))) (inc i))\n    )\n  )\n)","user":"55acd080e4b03311e7b73298"},{"problem":43,"code":"(fn reverseInterleave [xs n]\n         (let [ys (partition n xs)]\n           (for [i (range n)]\n             (map #(nth % i) ys))))","user":"58c4492be4b021aa9917ed27"},{"problem":43,"code":"(fn [arg1 arg2]\n      (loop [index arg2 coll arg1 groups ()]\n            (if ( = index 0)\n              (reverse groups)\n              (recur (dec index) (rest coll) (conj groups (take-nth arg2 coll))))))","user":"5cb6256ce4b026601754b947"},{"problem":43,"code":"(fn [xs parts]\n  (apply (partial map vector) (partition parts xs)))","user":"58409e47e4b089d5ab817dee"},{"problem":43,"code":"(fn [cln n] \n  (for [x (range n)] \n    (for [y (range (count cln)) \n          :when (= x (mod y n))] \n      (nth cln y))))","user":"5596a324e4b04c1e5c31d757"},{"problem":43,"code":"(fn reverse-interleave\n  [x y]\n  (loop [index (dec y) result '()]\n    (if (< index 0)\n      result\n      (recur (dec index) (conj result (keep-indexed #(if (= (mod %1 y) index) %2) x))))))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":43,"code":"(fn [s n]\n  (map (fn jump [offset]\n         (if (> (count s) offset)\n           (cons (nth s offset) (jump (+ offset n)))\n           nil))\n       (range n)))","user":"5974d2ede4b01722bebd4cb6"},{"code":"(fn [l n] (vals (group-by #(rem % n) l)))","problem":43,"user":"4e720985535d5021c1a89655"},{"problem":43,"code":"#(apply map list   (partition %2 %1 )   )","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":43,"code":"(fn [myseq it]\n  (loop [answer [] sample [] index 0 iterations 0]\n    (cond \n     (and (< index (count myseq)) (< iterations it))\n     (recur answer (conj sample (nth myseq index)) (+ index it) iterations)\n     (and (>= index (count myseq)) (< iterations it))\n     (recur (conj answer (seq sample)) [] (inc iterations) (inc iterations))\n     :else (seq answer))))","user":"53d977f1e4b0e771c302547a"},{"problem":43,"code":"(fn [coll, n]\n  (apply map (fn [& args] args) (partition n coll)))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":43,"code":"(fn p43 \n  ([x y] (p43 x y (last x)))\n  ([x y z]          \n  (map #(take-nth y (range (first %) (+ 1 z))) \n       (partition 1 (take y x)))\n  )\n  )","user":"5400e918e4b0de5c41848619"},{"problem":43,"code":"(fn [coll n]\n    (for [i (range n)] (take-nth n (drop i coll))))","user":"594bb36ae4b07ddc2dafae37"},{"code":"(fn [elts n] (apply map list (partition n elts)))","problem":43,"user":"50fd9fd4e4b033b9c38d78d0"},{"problem":43,"code":"(fn [coll n]\n   (apply map vector (partition n coll)))","user":"55b54ecbe4b01b9910ae2987"},{"code":"(fn [coll n]\n    (sort-by first <\n      (map (fn [y] (filter #(= (mod % n) y) coll)) (range n))))","problem":43,"user":"504e1abee4b0f6ff3350c45d"},{"code":"(fn [col x]\n    (vals (group-by #(mod % x) col)))","problem":43,"user":"524d90c0e4b0a16e35cf6ded"},{"code":"(fn [xs n]\n  (loop [i 0 cs xs ret []]\n    (if (= i n)\n      ret\n      (recur (inc i) (rest cs) (conj ret (take-nth n cs))))))","problem":43,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"(fn deinterleave [s numseqs]  \n   (partition (/ (count s) numseqs) (apply interleave (partition numseqs s))))","problem":43,"user":"4fbd6210e4b081705acca303"},{"problem":43,"code":"(fn [l n] (map #(flatten (partition 1 n (drop % l))) (range n)))","user":"5bfe4ecfe4b0bdcf453d1608"},{"code":"(fn f [coll n]\n  (sort-by #(nth % 0)\n    (partition \n      (/ (count coll) n)\n      (sort-by #(mod % n) coll))))","problem":43,"user":"4dbd2aa3535d020aff1edf40"},{"problem":43,"code":"(fn xx [xs n]\n    (->> (cycle (range n))\n     (map vector xs)  \n     (group-by last)  \n     (vals) \n     (map #(map first %))))","user":"570d0548e4b0b0fb43fd06d2"},{"problem":43,"code":"(fn\n   [a x]\n   (map\n     (fn [i] (reduce #(conj % ((vec a) (+ i (* %2 x)))) [] (range (/ (count a) x))))\n     (range x)))","user":"542f574be4b0dad94371f2d0"},{"code":"#(reduce (fn [m vals]\n           (map conj m vals))\n         (take %2 (repeat []))\n         (partition %2 %1))","problem":43,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":43,"code":"(fn [coll n]\n   (map\n     #(apply concat (partition 1 n (drop % coll)))\n     (range n)))","user":"56dc3bdfe4b0ea9b8538f819"},{"code":"(fn [s n]\n  (loop [s s a (vec (repeat n ())) i 0]\n    (if (empty? s)\n        (map reverse a)\n        (recur (rest s)\n               (assoc a i (cons (first s) (get a i)))\n               (if (= n (inc i)) 0 (inc i))))))","problem":43,"user":"4f03d0fe535dcb61093f6b6d"},{"code":"(fn [c n] (let [tpart (/ (count c) n)] \n          (partition-all tpart (apply interleave (partition-all n c)))\n         ))","problem":43,"user":"52da20c7e4b09f7907dd13b3"},{"problem":43,"code":"(fn unleave\n  [sq n]\n  (let [subsq-els (/ (count sq) n)]\n    (map (fn\n           [subsq]\n           (map (fn\n                  [idx]\n                  (nth sq idx))\n                subsq))\n         (map (fn\n                [i]\n                (take subsq-els (iterate (partial + n) i)))\n              (range 0 n)))))","user":"5537f30fe4b09218d5f44fd8"},{"problem":43,"code":"#( loop [i 0 acc []]\n   (if (>= i %2) \n     acc\n     (recur (inc i) (conj acc (take-nth %2 (drop i %1)))))\n  )","user":"57ec8d1de4b0bfb2137f5b7f"},{"problem":43,"code":"(fn [coll x]\n  (loop [[r & more :as all] (vec coll)\n         step 0\n         acc (into '[] (repeat x '[]))]\n    (if all\n      (recur more\n             (if (= step (- x 1)) 0 (inc step))\n             (assoc acc step (conj (acc step) r)))\n      acc)))","user":"5c718e6ce4b0fca0c1622796"},{"problem":43,"code":"(fn [xs n]\n  (for [x (range 0 n)]\n    (take-nth n (drop x xs))))","user":"542d2385e4b0dad94371f2b2"},{"problem":43,"code":"(fn [x y] (loop [lst x\n                 cnt 1\n                 res []]\n            (if (> cnt y) \n               res\n               (recur (next lst) (inc cnt) (conj res (take-nth y lst)))             \n             \n             )\n           \n           \n           )\n  )","user":"5877e40ee4b01531a375eaab"},{"code":"(fn [xs n]\n  (for [m (range n)]\n    (take-nth n (drop m xs))))","problem":43,"user":"52cb6bb0e4b07d0d72b2734c"},{"problem":43,"code":"(fn [x y]\n  (let [ss (partition y x)]\n    (for [i (range y)]\n      (mapcat #(list (nth % i)) ss))))","user":"53aef31ce4b047364c04447b"},{"code":"(fn\n  [s n]\n  (letfn [(uf [s i f]\n            (assoc\n              s\n              i\n              (f\n                (nth\n                  s\n                  i))))]\n    (loop\n      [i 0\n       ss (into [] (repeat n []))\n       r s]\n      (if (empty? r)\n        ss\n        (recur\n          (rem (inc i) n)\n          (uf\n            ss\n            i\n            #(conj % (first r)))\n          (rest r))))))","problem":43,"user":"50657775e4b0deb876850599"},{"code":"#(for [i (range %2)] (take-nth %2 (drop i %)))","problem":43,"user":"4db858d1535d1e037afb218c"},{"code":"(fn [x y] (vals (group-by #(mod (dec %) y) x)))","problem":43,"user":"4e588e84535d8a8b8723a294"},{"code":"(fn ri [coll n]\n  (map #(take-nth n (drop % coll)) \n       (range n)))","problem":43,"user":"52d51535e4b09f7907dd133a"},{"problem":43,"code":"#(partition (/ (count %1) %2) (flatten (reduce (fn [x y] \n                                                 (partition 2 (interleave x y))) \n                                               (partition %2 %1))))","user":"557e6b73e4b05c286339e0d6"},{"problem":43,"code":"(fn [coll part] (reduce-kv (fn [c i v] \n                             (let [vi (mod i part)] \n                               (assoc c vi ((fnil conj []) (get c vi) v))))\n                           [] (vec coll)))","user":"5744d088e4b009280f9f2b41"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (->> (partition n coll)\n       (apply map list)))","user":"55586905e4b0deb715856e2b"},{"code":"(fn [l n] (map #(flatten (partition 1 n (drop % l))) (range 0 n)))","problem":43,"user":"50112acee4b0d82cfac69f4c"},{"code":"(fn t [ar st]\n  (partition (quot (count ar) st) (apply interleave (partition st ar))))","problem":43,"user":"5376966ae4b06839e8705e27"},{"code":"(fn [ls n]\n  (partition-all (quot (count ls) n)\n    (apply interleave\n      (partition-all n ls)\n    )\n  )\n)","problem":43,"user":"4ecc147b535d23f0362276f7"},{"code":"(fn [c n]\n  (let [p (partition n c)]\n    (reduce #(map conj % %2) (repeat n []) p)))","problem":43,"user":"4fb266a5e4b081705acca28c"},{"problem":43,"code":"(fn [xs n]\n  (map #(last %)\n       (group-by #(mod % n) xs)))","user":"5980f91ae4b021a7a535fddd"},{"code":"(fn [coll n]\n\t  (for [i (range n)]\n\t(map #(nth % i) (partition n coll))))","problem":43,"user":"516c4c08e4b06f078fab251d"},{"code":"(fn [col n] \n  (map #(map second %) \n       (vals \n        (group-by \n         #(mod (first %) n) \n         (map-indexed vector col)))))","problem":43,"user":"4e58ef07535d8a8b8723a299"},{"code":"#(for [x (range %2)]\n    (for [y (take-nth %2\n            (drop x %))] y))","problem":43,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn [ls n] (map #(take (/ (count ls) n) (take-nth n (drop % (cycle ls)))) (range n)))","problem":43,"user":"521a4ff5e4b0c4ef0be83004"},{"problem":43,"code":"#(for [x (range %2)] (map first (partition %2 %2 \"~\" (drop x %1))))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":43,"code":"(fn rev-interleave [xs n]\n  (loop [res [] coll xs] \n    (if (= n (count res))\n    \t\tres\n    \t\t(recur (conj res (take-nth n coll)) (rest coll)))))","user":"5ab276f2e4b073f1774425e6"},{"code":"(fn [l x] \n  (for [k (range x)]\n    (for [i (partition  x l) ] \n      (nth i k) )))","problem":43,"user":"5300aa1de4b0d8b024fd3710"},{"problem":43,"code":"(fn [list groupQty]\n  (let [listFirst (first list)\n        groupSize (/ (count list) groupQty)\n        groupFirsts (take groupQty list)]\n  (loop [starts groupFirsts\n         result ()]\n    (if (empty? starts)\n      (reverse result)\n      (let [fi (first starts)\n            re (rest starts)\n            groupEnd (+ fi (* groupSize groupQty))\n            group (range fi groupEnd groupQty)]\n          (recur re (cons group result)))))\n    ))","user":"5954cea2e4b066ee0a44af0a"},{"code":"(fn [coll x] (map #(take-nth x (drop % coll)) (range x)))","problem":43,"user":"4fcd155de4b065de69964ca3"},{"problem":43,"code":"(fn reverseInterleave [coll n] (apply map list (partition n coll)))","user":"542c1f73e4b0dad94371f29d"},{"problem":43,"code":"(fn [col, ind] \n  (vals (group-by #(rem %1 ind) col))\n)","user":"556f2009e4b09a3098a52519"},{"code":"(fn revinter [coll n]\n     (->> coll (partition n)\n              (apply interleave)\n              (partition (/ (count coll) n))))","problem":43,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":43,"code":"(fn [ls n] (map (fn [x] (map #(nth ls %) x)) (vals (group-by #(mod % n) (range (count ls))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"#(for [x (range 0 %2)] (take-nth %2 (drop x %1)))","problem":43,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":43,"code":"(fn [coll n]\n (let [n n  c coll ct (count c)]\n   (loop [i 0 r []]\n     (if (>= i n)\n       r\n       (recur (inc i)\n              (conj r\n                    (map #(nth c %)\n                         (for [x (range i ct n)] x))))))))","user":"5823d3e6e4b051871117beb8"},{"problem":43,"code":"(fn [coll chunks]\n  (apply map list (partition-all chunks coll)))","user":"55074092e4b021ccfedb96a4"},{"code":"(fn [L n] (apply map list (partition n L)))","problem":43,"user":"52153bdde4b0961f15ac4daa"},{"problem":43,"code":"(fn [coll n]\n  (map (fn [x] (take-nth n (drop x coll))) (range n)))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn [x n]\n  (->> x\n    (partition n)\n    ((apply juxt (for [i (range n)] (fn [s] (map #(nth % i) s)) )))\n  )\n)","problem":43,"user":"4f4a34b2e4b0d56e7bb92c09"},{"problem":43,"code":"#(let [col (take-nth %2 %1) ]\n  (for [a (range %2)]\n    (map (partial + a) col)))","user":"4ff4bed0e4b0678c553fc35f"},{"problem":43,"code":"(fn revinterl [sekv n]\n  (->> sekv\n  (partition n) ;; skratka - enkrat more bit drugacna particija\n  (apply interleave)\n  (partition (int (/ (count sekv) n))))\n)","user":"584d99c5e4b0b7285a6f4e42"},{"code":"#(apply mapv vector (partition %2 %))","problem":43,"user":"533f1584e4b085b17e897d9b"},{"problem":43,"code":"(fn [f x] (vals (group-by #(mod  % x) f)))","user":"522fdff7e4b032bbe342416c"},{"problem":43,"code":"(fn [arr n](loop [i 0 out '()]\n   (if (= i n)\n     (reverse out)\n     (recur (inc i) (conj out (map second (filter (fn[v](= i (mod (first v) n))) (map-indexed list arr))))))))","user":"5596af34e4b04c1e5c31d758"},{"problem":43,"code":"(fn [coll seqs]\n   (loop [coll coll\n          acc (repeat seqs [])]\n     (if (empty? coll)\n       (map reverse acc)\n       (recur (drop seqs coll) (map #(cons (nth (take seqs coll) %) (nth acc %)) (range 0 seqs))))))","user":"571cd9dce4b0145328a76271"},{"problem":43,"code":"(fn\n  [coll n]\n  (let [ri (fn ! [c n i]\n    (if (and (seq c) (< i n))\n      (cons (take-nth n c) (! (rest c) n (+ i 1)))\n      []))]\n    (ri coll n 0)))","user":"5574c172e4b05c286339e059"},{"problem":43,"code":"(fn [coll n]\n (for [i (range n)] (take-nth n (drop i coll))))","user":"5a40eb64e4b0447ef91cc5d8"},{"code":"(fn reinter [input n]\n    (map second(group-by #(rem % n) input))\n)","problem":43,"user":"51d1111ce4b067c36548635f"},{"problem":43,"code":"(fn [xs n]\n  (loop [rs (repeat n [])\n         xs xs]\n    (if (empty? xs) rs\n      (recur\n       (map conj\n         rs\n         xs)\n       (drop n xs)))))","user":"56403765e4b08d4f616f5edc"},{"code":"(partial (fn my-inter[m coll n]\n           (if (= m n)\n             nil\n             (conj (my-inter (inc m) (next coll) n) (take-nth n coll)))) 0)","problem":43,"user":"523f1245e4b01c266ffa7f95"},{"problem":43,"code":"(fn [coll n] (map #(apply list (map first (partition 1 n (drop % coll)))) (range n)))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn rev [coll n]\n  (loop [coll (partition n coll)\n         sets []]\n      (if (empty? (first coll))\n        sets\n        (recur (concat (map rest coll)) (conj sets (map first coll)))\n        )))","problem":43,"user":"53778b90e4b06839e8705e36"},{"code":"(fn [s n]\n      (reduce #(update-in %1 [(mod (%2 0) n)] conj (%2 1)) \n              (vec (repeat n []))\n              (map-indexed vector s)))","problem":43,"user":"4f1c9652535d64f603146483"},{"problem":43,"code":"(fn [coll n]\n  (apply map list \n    (partition n coll)))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":43,"code":"(fn [coll width]\n\t(->> coll\n         (partition width width [])\n         ((fn [c]\n            (for [x (range width)]\n              (map #(nth % x) c))))))","user":"5cbb0436e4b026601754b9cc"},{"code":";;(fn [ys y]\n;;  ((fn rec [xs x]\n;;   (if (not= x 1)\n;;     (cons\n;;      (take-nth y xs)\n;;      (rec (rest xs) (- x 1)))\n;;     [(take-nth y xs)])) ys y))\n\n;;#(apply map vector (partition %2 %))\n\n(fn [xs x]\n   (loop [ys xs y x ans []]\n     (if (= y 0)\n       ans\n     (recur\n      (rest ys) (- y 1) (conj ans (take-nth x ys))))))","problem":43,"user":"50955676e4b087f34d351ab1"},{"problem":43,"code":"(fn [s c]\n  (loop [remainder s\n         results (take c (repeat []))]\n    (if (not (empty? remainder))\n      (recur (drop c remainder)\n      \t\t (map #(conj %1 %2) results (take c remainder)))\n      results)))","user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [col parts]\n  (map #(take-nth parts (drop % col))(range parts))\n)","problem":43,"user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [coll n]\n  (apply map list\n         (partition n coll)))","problem":43,"user":"4e8c1d97535d65386fec2127"},{"problem":43,"code":"; Cheated this one. Still not 100% on what's happening here...\n; https://clojuredocs.org/clojure.core/apply\n#(apply map list (partition %2 %1))","user":"56b295f7e4b0982f16b37e08"},{"code":"(fn [lst n]\n  (apply map list (partition-all n lst)))","problem":43,"user":"531902b1e4b08068f379ed77"},{"problem":43,"code":"(fn\n  [s n]\n  (apply map list (partition n s)))","user":"5ec02e20e4b00a66d4a95288"},{"code":"#(apply map vector (partition %2 %1))","problem":43,"user":"4e31a15c535deb9a81d77f1e"},{"problem":43,"code":"#(for [x (range %2)] (take-nth %2 (nthrest %1 x)))","user":"5639e878e4b0bfe05bf117f7"},{"problem":43,"code":"(fn [vs n]                                                                                                                                                        \n  (let [ith-mod-pair (fn [target] (fn [[i _]] (= target (mod i n))))                                                                                              \n        enumerate (fn [xs] (map-indexed (fn [i x] [i x]) xs))                                                                                                     \n        ith-seq (fn [target] (->> vs                                                                                                                              \n                                  enumerate                                                                                                                       \n                                  (filter (ith-mod-pair target))                                                                                                  \n                                  (map last)))]                                                                                                                   \n    (->> n                                                                                                                                                        \n         range                                                                                                                                                    \n         (map ith-seq))))","user":"53684a2fe4b0243289761e8c"},{"problem":43,"code":"(fn [col c]\n  (for [i (range c)] (take-nth c (drop i col))))","user":"57481f1fe4b009280f9f2b82"},{"problem":43,"code":"(fn [s n]\n      (let [result (into [] (repeat n []))\n            mi (map-indexed (fn [i e] [(rem i n) e]) s)\n            result (reduce (fn [r [i e]] (update-in r [i] #(conj %1 e))) result mi)\n            result (map seq result)]\n        result))","user":"5beadeb5e4b0f319e2d7ec88"},{"code":"(fn [xs n]\n  (->> xs\n       (partition n)       \n       (apply map vector)))","problem":43,"user":"51ac6360e4b09397d510976c"},{"code":"#(apply map vector\n       (partition %2  %1))","problem":43,"user":"517945dce4b0684c1c981a43"},{"problem":43,"code":"(fn [coll n]\n   (let [size (quot (count coll) n)]\n     (loop [start 0\n            result []]\n       (if (>= start n)\n         result\n         (recur (inc start)\n                (conj result\n                      (take size (take-nth n\n                                           (drop start coll)))))))))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"#(map (comp (partial map last)  last) (group-by first (map list (cycle (range 0 %2)) %1)))","problem":43,"user":"502ad2cae4b0614b5299611f"},{"code":"(fn [xs n]\n  (for [m (range 1 (inc n))]\n    (for [delta (range 0 (/ (count xs) n))\n\n          :let [idx (dec (+ m (* delta n)))]]\n      (nth xs idx))))","problem":43,"user":"4dafa380edd6309eace4d17c"},{"problem":43,"code":"#(apply map list (partition %2 %1))\n\n;; (fn [c n]\n;;     (->> c\n;;          (map-indexed #(hash-map (mod %1 n) (list %2)))\n;;          (apply merge-with concat)\n;;          (sort)\n;;          (vals)))\n\n;; (fn [c n]\n;;     (->> c\n;;          (map-indexed list)\n;;          (group-by (fn [[r _]] (mod r n)))\n;;          (vals)\n;;          (map (fn [c] (map last c)))))\n\n;; #(for [x (range %2)]\n;;      (take-nth %2 (drop x %)))\n\n;; #(->> %1\n;;         (iterate rest)\n;;         (take %2)\n;;         (map (partial take-nth %2)))","user":"591ad160e4b09b4ee5954bdf"},{"problem":43,"code":"(fn f \n        ([col x]\n         (f col x 0))\n        ([col x i]\n           (if (>= i x)\n             nil\n             (cons (take-nth x col) (f (rest col) x (+ i 1))))))","user":"575fbe58e4b08062f99a4e87"},{"problem":43,"code":"#(for [i (range %2)]\n      (map (fn [x] (second x))\n           (filter (fn [x] (= i (mod (first x) %2))) (map-indexed vector %1))))","user":"5908882de4b047aa04b19979"},{"problem":43,"code":"(fn reverse-interleave [xs r]\n  (apply map list (partition r xs)))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn reverse-interleave [coll n]\n  (vals (group-by #(rem % n) coll)))","problem":43,"user":"4e4bd94b535dc968683fc4d7"},{"code":"(fn [ls n] (vals (group-by #(mod % n) (seq ls))))","problem":43,"user":"4f706cc3e4b07046d9f4eff7"},{"code":"(fn [coll size]\n  (loop [i 1 result '()]\n    (if (<= i size)\n      (recur (+ i 1)\n             (cons (take-nth size (drop (- size i) coll)) result))\n      result)))","problem":43,"user":"520fff3ce4b080a8d9b9d633"},{"code":"(fn [coll n]\n      (map #(take-nth n (drop % coll))\n              (range n)))","problem":43,"user":"509e62a8e4b08df8156e9e2e"},{"problem":43,"code":"(fn __ [s n]\n  ((fn ! [m]\n     (if (= m n) '()\n       (cons\n        \t(keep-indexed #(if (= (mod %1 n) m) %2) s)\n        \t(! (inc m)))))\n   0))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [s n]\n  (map #(take-nth n (nthrest s (- % 1))) (range 1 (inc n))))","problem":43,"user":"527cd633e4b0757a1b17136f"},{"code":"#(reverse(reduce\n  (fn [n m]\n    (conj n (take-nth %2 (drop m %1)))\n  )\n  '()\n  (range 0 %2)\n))","problem":43,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":43,"code":"(fn re-interleave[s n]\n   (let [parted (partition n s)]\n     (mapv #(mapv (fn [x] (nth  x %)) parted)\n           (range n))))","user":"54be7c0de4b0ed20f4ff6eec"},{"problem":43,"code":"(fn [s n]\r\n  (apply\r\n    (partial map list)\r\n    (partition n s)))","user":"606e0a42e4b069485764de19"},{"problem":43,"code":"(fn reverse-interleave [items splits]\n  (map #(take-nth splits (drop % items)) (range splits))\n)","user":"52af7a5ce4b0c58976d9acbd"},{"code":"(fn [xs n]\r\n    (let [sx (partition-all n xs)]\r\n      (map (fn [i] (map #(nth % i) sx)) (range n))))","problem":43,"user":"4ddc1c89535d02782fcbea01"},{"problem":43,"code":"(fn\n  [v n]\n  (apply map vector (partition n v))\n  )","user":"595d0897e4b066ee0a44b00f"},{"problem":43,"code":"(fn [x y]\n  (let [n (count x)]\n    (loop [i 0 out (into [] (repeat y ()))]\n      (if (= i n) out\n          (let [l (rem i y)]\n            (recur (inc i) ((fn update \n                              ([m k f] (assoc m k (f (get m k))))\n                              ([m k f x] (assoc m k (f (get m k) x)))\n                              ([m k f x y] (assoc m k (f (get m k) x y)))\n                              ([m k f x y z] (assoc m k (f (get m k) x y z)))\n                              ([m k f x y z & more] (assoc m k (apply f (get m k) x y z more)))) out l #(concat % [(nth x i)]))))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":43,"code":"(fn [v n]\n  (loop [i 0\n         result []]\n    (if (= i n)\n      result\n      (recur (inc i)\n             (let [len (count v)\n                   indices (map #(+ i %) (range 0 len n))\n                   values (map (fn [x] (nth v x)) indices)\n                   final (into result [values])]\n               final)))))","user":"5ef78fdae4b09b61f08553c4"},{"code":"(fn [xs n]\n  (map\n    (fn [k]\n      (map\n        (fn [s]\n          (nth s k))\n        (partition n xs)))\n    (range n)))","problem":43,"user":"4ffa213ee4b0678c553fc3b7"},{"code":"(fn ri [lst n] \n  (if (empty? lst)\n    (repeat '())\n    (map cons (take n lst) (ri (drop n lst) n))))","problem":43,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":43,"code":"(fn reverseinterleave\n  [coll idx]\n  (->> coll (partition idx) (apply interleave) (partition (quot (count coll) idx))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":43,"code":"(fn rev [s n]\n  (loop [acc []\n         i 0]\n    (if (>= i n)\n      acc\n      (recur (conj acc\n                   (loop [r []\n                          j i]\n                     (if (>= j (count s))\n                       r\n                       (recur (conj r (nth s j)) (+ j n))))) (inc i)))))","user":"5512aca6e4b055c2f668d4b4"},{"problem":43,"code":"#(reduce (fn [r item]\n            (println r item)\n            (if (< (count r) %2)\n              (conj r (vector item))\n              (assoc r (mod (count (flatten r)) %2) (conj (r (mod (count (flatten r)) %2)) item)))) (vector) %)","user":"5ccc2a03e4b0ccb06196288f"},{"problem":43,"code":"(fn rev-interleave\n  ([s n] (rev-interleave s n n []))\n  ([s n k res]\n   (if (zero? k) res\n       (recur (rest s) n (dec k) (conj res (take-nth n s))))))","user":"547884d7e4b0c51c1f4d72bd"},{"code":"(fn [c n] (map #(map (fn [x] (nth c x)) (range % (count c) n)) (range n)))","problem":43,"user":"4db29f98535df7e46ed9b6c1"},{"problem":43,"code":"(fn [xs n]\n  (loop [s xs c (repeat n [])]\n     (if (empty? s) \n       c\n       (recur (drop n s)\n              (map conj c (take n s))))))","user":"54961073e4b0b312c081ff62"},{"problem":43,"code":"(fn [xs n]\n  (for [i (range n)]\n    (keep-indexed #(if (-> %1 (mod n) (= i)) %2) xs)))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn [s n]\r\n  (loop[x s, y n c n res []]\r\n     (if (> c 0)\r\n       (recur (next x) y (dec c) (conj res (take-nth y x)) )\r\n       res)))","problem":43,"user":"4e44358f535dc968683fc4a8"},{"problem":43,"code":"#(for [n (range 1 (inc %2))]\n             (keep-indexed (fn [i e] (if (some #{i} (range (dec n) (count %) %2)) e)) %))","user":"52a267c6e4b04e0c58e87bef"},{"code":"(fn [x y]\n  (let [cn (count x)]\n    (for [z (range y)]\n      (loop [data x off z res []]\n  (if (>= off cn)\n\t  (reverse res)\n\t  (recur data (+ off y) (cons (nth data off) res)))))))","problem":43,"user":"4eb0afed535d7eef3080733e"},{"code":"#(map (partial take-nth %2) (take %2 (iterate next %1)))","problem":43,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn [s x]\n  (map #(apply concat (partition 1 x %)) (take x (iterate next s))))","problem":43,"user":"4eb2e6ca535d7eef3080734f"},{"problem":43,"code":"(fn [col n]\n  (->> col\n       (partition-all n)\n       (apply map list)))","user":"514a3fa5e4b0829bd132edb6"},{"code":"(fn [s size] (map #(take-nth size (drop % s)) (range size)))","problem":43,"user":"530b8580e4b02e82168697cc"},{"problem":43,"code":"(fn [nums n]\n  ((fn helper [pseudo-nums m ans]\n    (if (= m n)\n      ans\n      (loop [remaining pseudo-nums tmp []]\n        (if (empty? remaining)\n          (helper (drop 1 pseudo-nums) (inc m) (conj ans tmp))\n          (recur (drop n remaining) (conj tmp (first remaining))))))) nums 0 []))","user":"5746061ae4b009280f9f2b5b"},{"problem":43,"code":"(fn [seq x]\n  (map (fn [item]\n         (filter #(= item (mod % x)) seq))\n       (distinct (map #(mod % x) seq))))","user":"5d6633bde4b0db5d338d15e2"},{"code":"(fn [c n] (map #(take-nth n (drop % c))(range n)))","problem":43,"user":"4f08b15b535dcb61093f6c40"},{"problem":43,"code":"(fn my-partition-n [coll n]\n  (let [n-total (count coll)\n        n1 (/ n-total n)\n        r1 (partition n coll)\n        r2 (apply interleave r1)\n        ]\n    (partition n1 r2)))","user":"53b7aa6ce4b047364c0444d1"},{"problem":43,"code":"(fn\n  [s n]\n  (for [i (range n)] (take-nth n (drop i s))))","user":"56084e91e4b046a4fc0ac00f"},{"problem":43,"code":"(fn rev-int [s n]\n  (loop [s-left s\n         acc (repeat n [])\n         ]\n    (if (> (count s-left) (dec n))\n      (recur (drop n s-left) (map-indexed (fn [i el]  (conj el (nth s-left i))) acc))\n      (map (fn [el] (seq el)) acc))))","user":"5b0bea6de4b0cc2b61a3bdda"},{"code":"(fn [coll n]\n  (apply (partial map list) (partition-all n coll)))","problem":43,"user":"4fb2101ce4b081705acca284"},{"code":"(fn reverse-interleave [xs n]\n  (map reverse (reduce \n\t\t#(let [[idx elem] %2 selset (nth %1 idx)]\n\t\t\t(println (str \"Take: \" (take (- idx 1) %1)))\n\t\t\t(println (str \"Conj: \" (list (conj selset elem))))\n\t\t\t(println (str \"Drop: \" (drop idx %1)))\n\t\t\t(concat\n\t\t\t\t(take idx %1) \n\t\t\t\t(list (conj selset elem)) \n\t\t\t\t(drop (+ idx  1) %1)\n\t\t\t)\n\t\t)\n\t\t(repeat n '())\n\t\t(map #(vector (mod %1 n) %2) (range) xs)\n\t))\n)","problem":43,"user":"4ed6238d535d10e5ff6f52de"},{"problem":43,"code":"(fn reverse-interleave [x n] \n  (apply (partial map list) (partition n x)))","user":"554dfe97e4b00713264bd98c"},{"code":"#(\n  let [cnt (/ (count %1) %2)]\n    (for [i (range %2)]\n      (for [shft (range cnt)]\n        (nth %1 (+ (* shft %2) i))  \n      )\n    )\n)","problem":43,"user":"4ecfa05c535d44c135fd68b9"},{"problem":43,"code":"(fn rev-inter [col n]\n  (loop [[first & rest] col\n         cols (vec (repeat n []))\n         pos 0]\n    (if (nil? first)\n      cols\n      (recur rest (update-in cols [(mod pos n)] conj first) (inc pos)))\n    ))","user":"5c195cb2e4b01240ff5671f7"},{"code":"(fn [l v]\r\n  (keep-indexed #(take-nth v (drop %1 %2)) (repeat v l)))","problem":43,"user":"4f82ed48e4b033992c121c0e"},{"code":"(fn [s i] (apply map vector(partition i s)))","problem":43,"user":"5150a7d7e4b03e678e393abb"},{"problem":43,"code":"(fn foointerleave [coll n]\n  (letfn [(sublist [coll n]\n            (when-let [f (first coll)]\n              (cons f (sublist (drop n coll) n))))]\n    (map #(sublist (drop % coll) n) (range n))))","user":"56fc0601e4b07572ad1a88db"},{"problem":43,"code":"(fn rinterleave [xs n]\n  (let\n      [zipped (zipmap xs (cycle (range n)))]\n    (mapv\n     (fn [i] (filterv #(= i (mod (get zipped %) n)) xs))\n     (range 0 n))))","user":"59f7f55de4b0ca45a743a313"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (loop [coll coll\n         colls (repeat n [])]\n    (if (seq coll)\n      (recur (drop n coll)\n             (map conj colls (take n coll)))\n      colls)))","user":"56180d83e4b06b1bb2182a18"},{"problem":43,"code":"(fn [c r] (partition-all (/ (count c) r) (apply interleave (partition-all r c))))","user":"5629de63e4b00e49c7cb4812"},{"problem":43,"code":"(fn sk-step-partition [xs lieshu]\n  (let [fangzhen (partition lieshu xs)]\n    (apply map list fangzhen)))","user":"5884f377e4b0f1effa3b76a8"},{"problem":43,"code":"(fn [seq subseq-count]\n  (let [indices (map #(range %  (count seq) subseq-count)\n                     (range subseq-count))]\n    (map #(map (into [] seq) %)\n         indices)))","user":"5b47874be4b02d533a91bc70"},{"problem":43,"code":"#(loop [a () s %1 i %2]\n     (if (= i 0) (reverse a)\n         (recur (conj a (take-nth %2 s))\n                (rest s) (dec i))))","user":"58c71509e4b021aa9917ed6e"},{"code":"(fn [w n] (let [p (partition n w)] \n (map (fn [i] (map (fn [q] (nth q i)) p)) (range n))))","problem":43,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn [[& seqN] n]\n  (apply map list (partition n seqN)))","problem":43,"user":"50097962e4b03d00572d2d6c"},{"problem":43,"code":"(fn [s n]\n  (let [indexed (map-indexed (fn [a b] [a b]) s)]\n    (map\n     (fn [i]\n       (for [a indexed :when (= (mod (first a) n) i)]\n         (second a)))\n     (range n))))","user":"531619c1e4b08068f379ed3d"},{"problem":43,"code":"(fn deint [coll n] (for [i (range n)] (take-nth n (drop i coll))))","user":"5a5767f3e4b05d388ecb6c65"},{"problem":43,"code":"(fn [xs n] (apply (partial map vector) (partition n xs)))","user":"4fcf1755e4b03432b189f40c"},{"problem":43,"code":"(fn [xs seq-amount]\n  (loop [index 0, result (repeat seq-amount '())]\n    (cond\n      (= index (count xs)) result\n      :else\n      (let [list-index (mod index seq-amount)\n            nth-updated (concat (nth result list-index) (list (nth xs index)))]\n        (recur\n         (inc index)\n         (concat (take list-index result) (list nth-updated) (drop (inc list-index) result)))))))","user":"5de48f92e4b0948ae9d9ae07"},{"problem":43,"code":"#(apply map (fn [& args] args)\n        (partition %2 %1))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":43,"code":"(fn m\n    ([xs n] (m xs n (repeat n [])))\n    ([xs n ss]\n        (let [[s e] (split-at n xs)]\n            (if (empty? s) ss\n                (m e n\n                    (map #(%1 %2) (map #(fn [xs] (conj xs %)) s) ss))))))","user":"59da6480e4b0ef0a1e9b5c68"},{"problem":43,"code":"(fn reverse-interleave [v n]\n  (let [indexed (map-indexed #(vector %1 %2) v)\n        grouped (group-by #(mod (first %) n) indexed)\n        result (map #(map second %) (vals grouped))]\n    result))","user":"5244a10de4b0d8acf9ed6ab3"},{"problem":43,"code":"(fn [sq n]\n  ((fn il [sq n out]\n     (if (= 1 n)\n       (conj out sq)\n       (il (keep-indexed #(if (< 0 (mod %1 n)) %2) sq)\n           (- n 1)\n           (conj out (take-nth n sq)))))\n   sq n []))","user":"5c7ef3f3e4b0d597f478cad7"},{"problem":43,"code":"(fn [coll n]\n    (map #(take-nth n (drop % coll))\n         (range n)))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn reverse-interleave [coll n]\n  (letfn [(enumerate [s]\n            (map vector s (iterate inc 0)))\n          (filter-by-nth [coll n offset]\n            (map first\n                 (filter\n                   (fn [[elt idx]] (if (= (mod idx n) offset) true false))\n                   (enumerate coll))))]\n    (map\n      #(filter-by-nth coll n %)\n      (range n))))","problem":43,"user":"53070615e4b02e821686979e"},{"code":"(fn ri [l n]\n  (loop [i 0\n         r l\n         result []]\n    (if-not (< i n)\n      result\n      (recur (inc i)\n             (rest r)\n             (conj result ((fn en [x y s]\n                             ((fn enn [r i]\n                                (when (not (empty? r))\n                                  (if (= (rem i y) 0)\n                                    (cons (first r) (enn (rest r) (inc i)))\n                                    (enn (rest r) (inc i))))) x s)) r n 0))))))","problem":43,"user":"51a671d4e4b0740bfd1afd21"},{"code":"(fn [seq n]\n  (map (fn [i] (keep-indexed (fn [index item]\n                         (if (zero? (mod (+ i (- index)) n))\n                           item))\n                       seq))\n       (range n)))","problem":43,"user":"511ffbabe4b0e88f5a20c40c"},{"problem":43,"code":"(fn [xs x] \n  (map #(map first %) \n       (map second (group-by #(mod (second %) x) (map vector xs (range))))))","user":"54d03026e4b018d918be98de"},{"code":"(fn [xs i] (let [grp (group-by #(mod % i) xs)] (sort (mapv #(grp %) (keys grp)))))","problem":43,"user":"523b1a65e4b02f719975bdbd"},{"problem":43,"code":"(fn [v p]\n  (vals (group-by #(mod (.indexOf v %) p) v)))","user":"58524875e4b0b7285a6f4ead"},{"problem":43,"code":"(fn reverse-interleave [l n]\n  (let [reverse-interleave* (fn [i] (keep-indexed #(if (= i (mod %1 n)) %2) l)) index-range (range n)]\n    (map #(reverse-interleave* %) index-range)))","user":"579e15a6e4b05b1deef9ae20"},{"problem":43,"code":"(fn rev-interleave [seqs n] (for [i (range n)] (take-nth n (drop i seqs))))","user":"58e256e1e4b005f69f193c90"},{"problem":43,"code":"(fn [n s] \n   (for [m (range s)]\n        (map #(nth n %)\n             (range m (count n) s))))","user":"4e38f245535deb9a81d77f3e"},{"problem":43,"code":"(fn [xs n]\n  (map #(apply concat (partition-all 1 n %)) (take n (iterate #(rest %) xs))))","user":"5522cd9ae4b0882d96d091ab"},{"code":"(fn rev-inter [x n]\n      (partition (/ (count x) n) (apply interleave (partition n x))))","problem":43,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":43,"code":"(fn [coll n]\n  (loop [groups (partition n coll) result (repeat n [])]\n    (if-let [g (first groups)]\n      (recur (rest groups) (map #(conj %1 %2) result g))\n      result)))","user":"566b57e9e4b0a866af6896ad"},{"problem":43,"code":"(fn foo [xs n] (take n (map #(take-nth n (drop % xs)) (range n))))","user":"557dbc9de4b05c286339e0cd"},{"problem":43,"code":"(fn [seq parts]\n  (vals (group-by #(mod % parts) seq)))","user":"5d5950c1e4b02ba5928a6827"},{"code":"(fn [x n]\n  (let [one (fn one1 [answer x]\n      (if (empty? x) answer (one1 (conj answer (first x)) (take-last (- (count x) n) x)))\n   \t\t)]\n  ((fn all [answer x subsq#]\n    (if (= subsq# 0) answer (all (conj answer (one [] x)) (rest x) (dec subsq#)))\n   ) [] x n)))","problem":43,"user":"525372ade4b0541d1855b8f3"},{"code":"#(let [seq %1\n        slices %2]\n    (apply map list (loop [cur-seq seq\n             final-seq '()]\n        (if (empty? cur-seq)\n          (reverse final-seq)\n          (recur (drop slices cur-seq) (conj final-seq (take slices cur-seq)))))))","problem":43,"user":"523288fee4b035af41902a88"},{"problem":43,"code":"#(apply map list (partition %2 %1))\n\n;(fn f [x n]\n;  (let [x* (partition n n x)]\n;    (for [i (range n)] (map #(nth %1 i) x*))))","user":"58299e03e4b051871117bf46"},{"code":"(fn rev-int [coll n]\n  (let [nth-list (fn [k]\n                   (map second (filter #(-> % first (mod n) (= k)) (map-indexed vector coll))))]\n    (map nth-list (range n))))","problem":43,"user":"539a2901e4b0b51d73faaf0f"},{"problem":43,"code":"(fn [coll ifactor]\n    (map\n     (fn [n]\n       (keep-indexed #(when (= n (mod %1 ifactor)) %2) coll))\n     (range ifactor)))","user":"56eaad95e4b04a395b9a040f"},{"problem":43,"code":"#(map \n   (fn [x] \n     (->> \n       (partition %2 %1) \n       (map (fn [y] (nth y x)))\n       )\n     ) \n   (range %2)\n   )","user":"5b118b7be4b0cc2b61a3be34"},{"problem":43,"code":"(fn [xs n]\n  (let [c (count xs)]\n    (partition (/ c n) (apply interleave (partition n xs)))))","user":"51bd78c3e4b0ff155d51d2b0"},{"problem":43,"code":"#(->> %1\n      (map-indexed vector)\n      (group-by (fn [[i v]] (rem i %2)))\n      sort\n      (map (fn [[i vs]] (map second vs))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [c n]\n  (loop [i (dec n) r '()]\n     (if (< i 0)\n        r\n        (recur (dec i) (cons (take-nth n (drop i c)) r)))))","problem":43,"user":"52d809bde4b09f7907dd1384"},{"code":"(fn [coll x]\n (for [n (range x)] (seq (take-nth x (nthnext coll n)))))","problem":43,"user":"4e86d3cf535dceadca46984c"},{"problem":43,"code":"#(for [y (range %2)]\n   (for [x (partition %2 %1)]\n     (nth x y)))","user":"5cbd5b42e4b026601754b9f6"},{"problem":43,"code":"(fn [coll nsets]\n  (loop [c (vec coll)\n         n nsets\n         i 0\n         indices (vec (range i (count c) n))\n         subset []\n         result []]\n    ;make the first set, then make the next,then so on\n    ;take each element\n    (if (< i n)\n      (if (seq indices)\n        (recur c n i (next indices) (conj subset (c (first indices))) result)\n        (recur c n (inc i) (range (inc i) (count c) n) [] (conj result subset)))\n      result)))","user":"593744abe4b02506e01a299b"},{"problem":43,"code":"(fn [f s] (map (fn [a] (reverse (reduce #(cons (first %2) %1) [] a)))\n               (vals (group-by\n                       (fn [[a b]] b)\n                       (map vector f (flatten (repeat (range s))))\n                       ))\n               ))","user":"57c33eeae4b05aa3c4741cbc"},{"code":"#((fn my[rv rs] (loop [lr1 [] i1 1] (if (> i1 rs) (seq lr1) (recur (conj lr1 ((fn get-set-index[v1 s1] (loop [r1 [] i2 s1] (if (> i2 (count v1)) (seq r1) (recur (conj r1 \n                                                                                         ((fn get-by-index[v s] (loop [i 1 lv v ls s] (if (= i s) (first lv) (recur (inc i) (next lv) ls))))\n                                                                                              v1 i2)) (+ i2 rs)))))\n                                                                              rv i1)) (inc i1))))) %1 %2)","problem":43,"user":"50e008d1e4b061dbdced722a"},{"code":"(fn separate [l n]\n  (map #(map second %) (partition-by first (sort (map-indexed (fn [idx itm] [(mod idx n) itm]) l)))))","problem":43,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"(fn split [s n]\n  (if (empty? s) (repeat n [])\n    (map cons (take n s) (split (drop n s) n))))","problem":43,"user":"50901b2ee4b0ea685a20f774"},{"problem":43,"code":"(fn rev-interleave [r n]\n  (loop [i 0\n  \t\t result (reduce #(assoc %1 %2 ()) (sorted-map) (range n))\n         values r]\n      (if (empty? values)\n        (map reverse (vals result))\n      \t(recur (inc i)\n         ;; java.lang.RuntimeException: Unable to resolve symbol: update in this context, compiling:(NO_SOURCE_PATH:0)\n         ;; (update result (mod i n) #(conj % (first values)))\n         (assoc result (mod i n) (conj (get result (mod i n)) (first values)))\n         (rest values)))))","user":"573f3ccfe4b05c31a32c083f"},{"problem":43,"code":"(fn [col x] (apply map #(vec %&) (partition x col)))","user":"5d6c3f91e4b04d129b00f2af"},{"problem":43,"code":"(fn [arr n]\n  (apply map list (partition n arr)))","user":"5cb41c40e4b026601754b911"},{"code":"(fn rev-interleave [l n]\n  (loop [i 0\n         in l\n         out (vec (repeat n []))]\n    (if (empty? in)\n      out\n      (recur (mod (inc i) n) (rest in)\n             (assoc-in out [i] (conj (nth out i) (first in)))))))","problem":43,"user":"4f04f847535dcb61093f6beb"},{"problem":43,"code":"(fn f [s n]\n   (map seq (vals (group-by #(mod % n) s))))","user":"5790f9d7e4b0ebec4cfb75b4"},{"problem":43,"code":"(fn rev-interleave\n  [coll n]\n  (apply map vector (partition n coll)))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":43,"code":"(fn [coll n]\n  (loop [result (vec (map (constantly []) (range n)))\n         i 0\n         remaining coll]\n    (if (empty? remaining)\n      result\n      (let [pos (mod i n)]\n        (recur (update-in result [pos] #(conj % (first remaining)))\n               (inc i)\n               (rest remaining))))))","user":"594783bee4b07ddc2dafada1"},{"problem":43,"code":"(fn [coll x]\n  (map #(map first %)\n       (vals (group-by last\n                       (map vector coll (iterate #(mod (inc %) x) 1))))))","user":"57aa2b97e4b0b8559636fc66"},{"problem":43,"code":"(fn rin [in n]\r\n  (let [v (vec in)]\r\n    (map #(map v %) (map #(range % (count v) n) (range 0 n)))))","user":"546e1142e4b00cfc9eacc199"},{"code":"(fn reverse-interleave\n  [s n]\n  (letfn [(ri-filter\n            [i]\n            (keep-indexed #(if (= 0 (mod (+ i %) n)) %2 nil) s))]\n    (reverse (take n (map first (drop 1 (iterate #(seq [(ri-filter (second %)) (inc (second %))]) [s 1])))))))","problem":43,"user":"511d6a01e4b022853b0e07a5"},{"problem":43,"code":"(fn [col num-subs] (apply (partial map list) (partition num-subs col)))","user":"50a2e3fbe4b029e8bace3629"},{"problem":43,"code":"(fn [s n]\n  (let [cnt (/ (count s) n)]\n    (partition cnt\n               (apply interleave\n                      (partition n s)))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"problem":43,"code":"(fn [c n]\n  (map #(take-nth n %) \n       (take n (iterate #(drop 1 %) c))))","user":"54497569e4b032a45b8693d2"},{"code":"#(let [n (/ (count %1) %2)]\n     (loop [a %1, v []]\n       (if (= %2 (count v))\n         (lazy-seq v)\n         (recur (drop 1 a) (conj v (take-nth %2 a))))))","problem":43,"user":"4f038567535dcb61093f6b0c"},{"code":"#(apply map vector (partition  %2 %1))","problem":43,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn reverse-interleave [input, num-subs]\n  (let[indexes (range (count input))\n      mapper (apply hash-map (interleave indexes input))\n      get-is (fn[offset] (range offset (count input) num-subs))]\n    (map \n      #(map mapper %) \n      (map get-is (range num-subs)))))","problem":43,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":43,"code":"(fn [a n]\n  (loop [c 0 a a o []]\n    (if (empty? a) o\n      (recur (inc c) (rest a) (let [x (mod c n)] (assoc o x (conj (vec (get o x)) (first a))))))))","user":"59ddae03e4b01968742fed65"},{"problem":43,"code":"(fn [lst n]\n  (let [glst (partition n lst)]\n    (map\n      (fn [i] (map (fn [x] (nth x i)) glst))\n      (range n))))","user":"4e8a170c535d3e98b802328f"},{"problem":43,"code":"(fn [arg1 n]\n   (loop [result []\n          index 0]\n     (if (< index (count arg1))\n       (if (= 0 (count result))\n         (recur [[(first arg1)]]\n                (inc index))\n         (if (< (rem index n) (count result))\n           (recur ((fn [arg1 arg2 arg3]\n  (loop [result []\n         index 0]\n    (if (< index (count arg1))\n      (if (= index arg2)\n        (recur (conj result arg3)\n               (inc index))\n        (recur (conj result (nth arg1 index))\n               (inc index))\n        )\n      result\n      )\n    )\n  ) result (rem index n) (conj (nth result (rem index n)) (nth arg1 index)) )\n                  (inc index))\n           (recur (conj result [(nth arg1 index)])\n                  (inc index))\n           ))\n       result\n       )\n     )\n   )","user":"5dd1fb19e4b0948ae9d9ad51"},{"code":"(letfn [\r\n        (unzip [colls]\r\n          (apply map vector colls))\r\n      ]\r\n    #(unzip (partition %2 %1)))","problem":43,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":43,"code":"#(for [offset (range %2)\n      :let [y (take-nth %2 (drop offset %1))]]\n  y)","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [s n]\n    (map #(take-nth n (nthnext s %))\n     (range n))\n    )","problem":43,"user":"4f16213f535d64f603146449"},{"code":"(fn fun [coll n]\n (apply map list (partition n coll)))","problem":43,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn   [lst n]\n  (loop [rm (seq lst), acc (vec (repeat n (vector))), c 0]\n     (let [i (mod c n)]\n       (cond (empty? rm) (seq (map seq acc))\n             :else (recur (rest rm) (assoc acc i (conj (acc i) (first rm))) (inc c))))))","problem":43,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [s n] (for [q (range n)] (for [[v x] (map #(vector % %2) s (range)) :when (= q (mod x n))] v)))","problem":43,"user":"4ea41fc2535d7eef308072cb"},{"problem":43,"code":"(letfn [(reverse-interleave [coll n]\n          (loop [lcoll  coll\n                 acolls (repeat n [])\n                 ln     0]\n            (if (empty? lcoll)\n              acolls\n              (recur\n                (rest lcoll)\n                (map-indexed\n                  (fn [i acoll]\n                    (if (= i ln)\n                      (conj acoll (first lcoll))\n                      acoll)) acolls)\n                (if (= ln (dec n)) 0 (inc ln))))))]\n  reverse-interleave)","user":"55f5c118e4b06e875b46ce8e"},{"problem":43,"code":"(fn [coll n]\n      (loop [out []\n             coll coll\n             i n]\n        (if (= i 0)\n          out\n          (recur (conj out (take-nth n coll))\n                 (rest coll)\n                 (dec i)))))","user":"52d38c51e4b099d49816f0c5"},{"problem":43,"code":"(fn [s c]\n   (vals (group-by #(mod % c) s)))","user":"55895eade4b059ccff29b202"},{"problem":43,"code":"#(partition (/ (count %1) %2) (apply interleave (partition-all %2 %2 %1)))","user":"5751f2a2e4b02ea114799292"},{"code":"(fn [seq n]\r\n  (partition (/ (count seq) n)\r\n    (apply interleave (partition n seq))))","problem":43,"user":"4df1e213535d08e6dec9fe20"},{"problem":43,"code":"(fn [ll xx]\n  \n((fn f[res l x curr]\n  (if\n    (= curr 0) res\n    (f\n      (concat\n        (list\n          (filter\n            #(= (mod (.indexOf l %) x) (- curr 1))\n            l))\n        res)\n      l\n      x\n      (- curr 1)))) () ll xx xx))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [s n]\n  (loop [s s out (vec (repeat n [])) i 0]\n    (if (empty? s)\n      out\n      (recur (rest s) (assoc out i (conj (nth out i) (first s))) (mod (inc i) n)))))","problem":43,"user":"4dd9d299535d2dad7130b5dd"},{"problem":43,"code":"(fn reverse-interleave [lst n]\n  (let [partitioned (partition n n (map (fn[x] false) (range n)) lst)\n        transed (apply map list\n                       partitioned)]\n    (map (fn [lst]\n           (filter #(not (false? %))\n                   lst))\n         transed)))","user":"5895477fe4b00487982d527c"},{"code":"(fn [s n] \n  (partition (/ (count s) n) \n(apply interleave \n  (partition n s))))","problem":43,"user":"4f15de56535d64f603146448"},{"problem":43,"code":"(fn [v n]\n  (apply map vector (partition-all n v)))","user":"5a4443cae4b0447ef91cc60f"},{"problem":43,"code":"(fn [coll n] \n  (loop [x n cl coll result []]\n    (if (= x 0)\n      result\n      (recur (dec x) (drop 1 cl) (conj result (take-nth n cl)))\n    )\n  )\n)","user":"558fec41e4b0277789237666"},{"problem":43,"code":"(fn rev-lev-red\n  [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n n coll))))","user":"5426fb8fe4b01498b1a71b1f"},{"code":"(fn [c cnt]\n    (loop [col c cols []]\n      (if (= (count cols) cnt)\n        cols\n        (recur \n          (rest col)\n          (conj cols (take-nth cnt col))))))","problem":43,"user":"4ec6f4ee535d6d7199dd36dc"},{"code":"(fn [coll parts]\n  (let [inner-size (/ (.length (vec coll)) parts)]\n    (for [i (range parts)]\n      (for [j (range inner-size)]\n        (nth coll (+ i (* j parts)))))))","problem":43,"user":"4e7d4544535db169f9c796d0"},{"code":"#(reduce\n  (fn [s x]\n    (map conj s x))\n  (repeat %2 []) \n  (partition %2 %1))","problem":43,"user":"4f06dcad535dcb61093f6c16"},{"problem":43,"code":"(fn [seq drop-elem-nth]\n  (let [seq (vec seq) get-idxs (fn [base offset len]\n                          (loop [i base out-vec []]\n                            (if (= (count out-vec) len)\n                              out-vec\n                              (recur (+ i offset) (conj out-vec i)))))]\n    (let [get-idxs-matrix (fn [len cnt]\n                            (loop [i 0 out-vec []]\n                              (if (= (count out-vec) cnt)\n                                out-vec\n                                (recur (inc i) (conj out-vec (get-idxs i cnt len))))))]\n      (map (fn [idxs]\n             (reduce (fn [out-vec elem] (conj out-vec (seq elem))) [] idxs))\n           (get-idxs-matrix (/ (count seq) drop-elem-nth) drop-elem-nth)))))","user":"5f15a50fe4b091ba50b4dbbc"},{"problem":43,"code":"(fn x[seqq n]\n  (apply map list (partition-all n seqq)))","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn [s n] (map #(flatten (partition 1 n (drop % s))) (range n)))","problem":43,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn f1 [l,i]\n ( map \n   (fn [n]\n     (map (fn[x] (nth x n))  (partition i  l )))\n   (range 0 i)))","problem":43,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [s n]\n  (map #(keep-indexed (fn [index item]\n                        (if (= % (mod index n))\n                          item\n                          nil))\n                      s)\n    (range 0 n)))","problem":43,"user":"502ac96de4b0614b5299611b"},{"problem":43,"code":"#(loop [index 0 coll (vec (repeat %2 []))]\n   (if (>= index (count %))\n     coll\n     (recur (inc index) (update-in coll [(mod index %2)] conj (nth % index)))))","user":"56677192e4b04acd4f672dd5"},{"problem":43,"code":"(fn ri-base [sq n]\n  ((fn ri [sq n i]\n   \t\t(if (= i 0)\n      \t\t'()\n            (cons (take-nth n sq) (ri (rest sq) n (dec i)))))\n   sq n n))","user":"59032c0fe4b022d14a2aaf9f"},{"code":"(fn [in-seq n]\n  (loop [local-seq in-seq result (repeat n '())]\n    (if (empty? local-seq)\n        (map reverse result)\n        (recur (drop n local-seq)\n               (map #(conj (nth result %) (nth local-seq %)) \n                    (range n))))))","problem":43,"user":"4ef4ab95535dced4c769f23b"},{"problem":43,"code":"(fn reverse-interleave [xcoll lim]\n  (let [ele-size (/ (count xcoll) lim)] ;;ele-size value is doesnot change in loop so i write it in let\n    (reverse (loop [coll xcoll\n                    seq-size lim\n                    result '()]\n               (if (pos? seq-size)\n                 (recur (next coll)\n                        (dec seq-size)\n                        (conj result (take ele-size (take-nth lim coll))))\n                 result)))))","user":"56038f34e4b04bb52996e1bc"},{"problem":43,"code":";; repeat n produces an un-indexable list ([] [] [])\n;; we cast to an indexable vector\n\n;; each param in (recur a b .. z)\n;; correlates to a bound var in the (loop [a \"init a\" b \"init b\" .. z \"init z\"] )\n\n(fn [s, n]\n(loop [seq s i 0 res (vec (repeat n [])) ]\n  (if (empty? seq)\n    res\n    (recur (rest seq)\n           (mod (inc i) n)\n           ;; update res by moving first item to nth bucket\n           (assoc res i (conj (nth res i) (first seq) ))))))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":43,"code":"(fn q43 [col n]\n  (apply map vector (partition n col))\n  )","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":43,"code":"#(->> %1\n      (iterate rest)\n      (take %2)\n      (map (partial take-nth %2)))","user":"5540cc0ce4b0a04f79299505"},{"code":"(fn revinter [s n] \n  (for [x (range n)] (keep-indexed #(if (= x (mod %1 n)) %2) s)))","problem":43,"user":"4fedd2cae4b0198f34b063ba"},{"code":"(fn [coll n]\n  (for [start (range n)]\n    (take-nth n (drop start coll))))","problem":43,"user":"500e91aae4b00fff93030f99"},{"problem":43,"code":"(fn [s n]\n  (loop [s s\n         acc (repeat n [])]\n    (if (seq s)\n      (recur (drop n s)\n             (->> (take n s)\n                  (interleave acc)\n                  (partition 2)\n                  (map (fn [[acc-e v]] (conj acc-e v)))))\n      acc)\n    ))","user":"5d236215e4b02ea6f0fb6a09"},{"problem":43,"code":"(fn separate [coll div]\n  (vals (group-by (fn [x] (mod x div)) coll)))","user":"557e56aae4b05c286339e0d5"},{"problem":43,"code":"(fn rev-interleave [col, n]\n    (partition-all (/ (count col) n)\n      ((fn rev-interleave-acc [col, n, acc]\n        (if (= 0 n)\n          acc\n          (rev-interleave-acc\n            (remove (fn [x] (some #(= x %) (take-nth n col))) col)\n            (dec n)\n            (concat acc (take-nth n col)) ))) col n '())))","user":"587a3babe4b01531a375eae2"},{"problem":43,"code":"(fn rev-intl\n  [s n]\n  (->>\n    (for \n      [i (range (count s))\n      j (range (count s))]\n    (when (= i (mod j n))\n      (nth s j))\n    )\n    (filter #(not (nil? %)))\n    (partition-all (/ (count s) n))\n    ))","user":"55ad2d97e4b03311e7b732a2"},{"code":"(fn [s n] (->> (group-by #(mod % n) s) vals (sort-by first)))","problem":43,"user":"526d6968e4b03e8d9a4a72d9"},{"problem":43,"code":"(fn\n    [i2 c]\n    (let [partition-cnt  (/ (count i2) c) ]\n      (partition partition-cnt\n        (loop [out-array []\n               index 0]\n          (let [ar-index (mod (+ (int (/ index partition-cnt)) (* index c)) (count i2))]\n            (println (str \"out: \" out-array \" <- index: \" index \" -> \" ar-index))\n            (if (= index (count i2))\n              out-array\n              (recur (conj out-array (nth i2 ar-index) )  (inc index)))\n            )\n  \n  \n          ))\n      )\n    \n    )","user":"53c6c9dfe4b00fb29b2212a1"},{"problem":43,"code":"(fn [x n] (loop [m (first x), res []] (if (> (+ n (first x)) m) (recur (inc m) (conj res (filter #(= (mod m n) (mod % n)) x))) res)))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":43,"code":"#(apply map list(partition %2 %))","user":"54fc7d89e4b07d26eda61d2b"},{"code":"#(partition-all (/ (count %1) %2) (apply interleave (partition-all %2 %1)))","problem":43,"user":"52000564e4b023d2eb508ca8"},{"problem":43,"code":"(fn foo [xs n]\n  (if (not (empty? xs))\n    (let [[head tail] (split-at n xs)]\n      (map cons head (foo tail n)))\n    (repeat n ())))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn [xs n]\n  (apply map vector (partition n xs)))","problem":43,"user":"511c91ace4b00c2a1fa7ff7a"},{"problem":43,"code":"(fn [l n]\n\n    (for [x (group-by first (map list\n\n         (flatten\n\n           (repeat\n\n             (/ (count l) n)\n\n             (range n)))\n\n         l))]  (map second (second x))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":43,"code":"(fn f\n\t[d c]\n\t(map #(take-nth c (drop % d)) (range c)))","user":"54a11042e4b09f271ff37c49"},{"problem":43,"code":"(fn [xs n] (reduce (fn [res c] (conj res (get (reduce (fn [res [v k]] (let [res-group (get res k [])] (assoc res k (conj res-group v)))) {} (map #(vector %1 %2) xs (cycle (range n)))) c))) [] (range n)))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":43,"code":"(fn [inp c]\n  (for [i (range c), \n        :let [l (partition c inp)]]\n    \n    (map #(nth % i) l)))","user":"5674f874e4b05957ce8c6144"},{"code":"(fn revinter [inlist n]\n  (apply map list (partition n inlist)))","problem":43,"user":"4fc50bcbe4b081705acca375"},{"code":"#(loop [s %1 i 0 r []]\n  (if (seq s)\n    (recur (rest s) (mod (inc i) %2) (assoc r i (conj (get r i []) (first s))))\n    r))","problem":43,"user":"4f043ed1535dcb61093f6bb4"},{"problem":43,"code":"(fn [pektor stp] \n    (let [count-element (quot (count pektor) stp)\n          starter-vec (take stp pektor)\n          ]\n      \n      (map (fn [a] (take count-element (iterate (partial + stp) a))) starter-vec)\n      ))","user":"5b7ed20fe4b047b03b203760"},{"problem":43,"code":"(fn [l n] (for [i (range n)] (map #(nth % i) (partition n l))))","user":"5454b84ce4b0e397800069d9"},{"problem":43,"code":"(fn [s n]\n  (let [[head & tail] (partition n s)\n        start (map vector head)]\n    (reduce (fn [lists nexts] (map conj lists nexts)) start tail)))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn [lst n]\n(let [off (/ (count lst) n)]\n(map\n#(take-nth n (drop % lst))\n(range 0 n))))","problem":43,"user":"4fabb1dce4b081705acca21a"},{"problem":43,"code":"(fn\n  [seq_ steps]\n  (map (fn\n          [start] \n          (map #(nth seq_ %) (range start (count seq_) steps))\n         )\n       (range steps)\n    )\n  )","user":"6059d824e4b07e92fa001acf"},{"code":"(fn [inputList subsequenceAmount] (map #(flatten %&) (apply map #(list %&) (partition subsequenceAmount inputList))))","problem":43,"user":"51018807e4b0a79bcc8c0e0b"},{"problem":43,"code":"(fn in[coll x](loop[coll coll\n                      ret []\n                      n 0]\n                  (println ret n)\n                (cond\n                  (= n x) (seq ret)\n                  :else (recur coll\n                               (conj ret (map #(get (vec coll) %) (range n (count coll) x)))\n                               (inc n)\n                               ))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn [s n]\n   (map\n    (fn f [k] (map #(nth s %) (filter #(= k (mod % n)) (range (count s)))))\n    (range n)))","problem":43,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":43,"code":"#(let [p (partition %2 %1)] \n   (partition (count p) (apply interleave p)))","user":"561047eae4b05f002753df6d"},{"problem":43,"code":"(fn [l n]\n     {:pre [(= 0 (rem (count l) n))]}\n     (loop [xs l \n            rs (repeat n '())]\n           (if (empty? xs)\n               (map reverse rs)\n               (recur (drop n xs) ((fn [ys zs]\n                                       (loop [ps ys\n                                              qs zs\n                                              ts nil]\n                                             (if (or (empty? ps) (empty? qs))\n                                                 (reverse ts)\n                                                 (recur (rest ps) (rest qs) (cons (cons (first ps) (first qs)) ts))))) (take n xs) rs)))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn\n  [coll x]\n  (map #(reverse (into () %1)) (vals (group-by #(mod %1 x) coll))))","problem":43,"user":"52ba447ee4b07a9af57922ce"},{"problem":43,"code":"(fn[l n](apply map list (partition n l)))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":43,"code":"(fn [a n] (partition (/ (count a) n )(apply interleave (partition n a))))","user":"58617a1fe4b0f14aab7c87f0"},{"problem":43,"code":"(fn f \n  [x n] \n    (let [x* (partition n n x)]\n         (for [i (range n)] \n           (map #(nth %1 i) x*)\n         )\n    )\n)","user":"5f631e11e4b02876ed9fd011"},{"problem":43,"code":"(fn [coll n]\n  (let [c (count coll)\n        sc (sort (map vector (cycle (range n)) coll))]\n    (if (not= (rem c n) 0)\n      nil\n      (map #(map second %) (partition-by first sc)))))","user":"5523fce8e4b0882d96d091b4"},{"problem":43,"code":"(fn [xs n]\n  (->> xs\n       (group-by #(mod % n))\n       (map second)))","user":"58b12635e4b0ebc645576cf4"},{"code":"(fn[col m]  (loop [ret  (take m (repeat [])) c col counter 0] (if (empty? c) ret \r\n                                          (recur (map-indexed (fn[index,item] (if (= index (rem  counter  m) ) (conj item (first c)) item ) ) ret) \r\n                                          (rest c)\r\n                                          (inc counter)\r\n                                          ))))","problem":43,"user":"50463347e4b011c5dfee771e"},{"code":"(fn [c n]\n  (reduce (fn [l e] (map #(conj % %2) l e) ) (repeat n []) (partition n c)))","problem":43,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn [x step] \n  (let [stepseq \n        (fn ss[s step] \n          (lazy-seq \n           (if (first s)\n             (cons \n                (first s) \n                (ss \n                   (drop step s) \n                   step\n                 )\n              )\n           )\n                                    \n         )                            \n        )\n        f (fn [] (lazy-seq (map #(stepseq (drop % x) step) (range step))))\n        ]\n    (lazy-seq (f))\n    )\n  )","problem":43,"user":"4fb03cf4e4b081705acca262"},{"code":"#(partition (int (/ (count %1) %2)) (apply interleave  (partition %2  %1)))","problem":43,"user":"52485723e4b05ef8e38e63d2"},{"problem":43,"code":"(fn\n  [s n]\n  (loop [c 0 sq s col '()]\n    (if (< c n)\n      (recur (inc c) (rest sq) (cons (take-nth n sq) col))\n      (reverse col))))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn [xs x] (map #(take-nth x (drop % xs)) (range x)))","problem":43,"user":"4dc3780b535da86f151f0c3f"},{"problem":43,"code":"(fn [coll n]\n    (let [empty (repeat n [])\n          parts (partition n coll)]\n      (reduce (fn [l v]\n                (map #(apply conj %) (partition 2 (interleave l v)))) empty parts)\n      ))","user":"54864662e4b0e286459a11b8"},{"problem":43,"code":"(fn [seqn n] (let [parts (partition n seqn)] (map (fn [i] (map #(nth % i) parts)) (range n))))","user":"5519c157e4b00ace28fe6e32"},{"problem":43,"code":"(fn ReverseInterleave\n  ([inputSequence seqNumber outputSequence]\n   (if (= (count outputSequence) seqNumber)\n     outputSequence\n     (ReverseInterleave\n       (rest inputSequence)\n       seqNumber\n       (conj outputSequence (take-nth seqNumber inputSequence))\n       )\n     ))\n  ([inputSequence seqNumber]\n   (ReverseInterleave inputSequence seqNumber []))\n  )","user":"5e16b820e4b0a047bd49f71f"},{"problem":43,"code":"(fn \n  [s n]\n  (apply map vector (partition n s))\n  )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn ri[is n]\n   (loop [r [], s is, i 1]\n      (if (= (count s) 0)\n         r\n         (let [ii (dec i), ci (nth r ii nil)]\n            (recur (assoc r ii (vec (conj ci (first s)))) (rest s) (if (< i n) (inc i) 1))\n         )\n      )\n   )\n)","problem":43,"user":"52e295fae4b09f7907dd1437"},{"problem":43,"code":"(fn [coll n]\n  (let [coll' (partition n coll)\n        c (count coll)]\n    (partition (/ c n) (apply interleave coll'))))","user":"5defc177e4b093ff717275af"},{"code":"(fn rev-interleave [s n]\n  (apply map (fn [& args] args) (partition n s)))","problem":43,"user":"4ef0a38e535dced4c769f20b"},{"problem":43,"code":"(fn[col d](apply map list (partition d col) ))","user":"5a80ad4be4b00b71e582a058"},{"code":"(fn [l s] \n  (map (fn [l] (flatten (map next l))) \n    (partition-by #(first %) \n      (sort-by #(first %) \n        (map-indexed (fn [idx v] (list (mod idx s) v))\n        l)))))","problem":43,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":43,"code":"(fn inter\n  [coll n]\n  (for [i (range n)] \n    (take-nth n (drop i coll))))","user":"5e9d1c75e4b0157ca9664801"},{"code":"(fn [coll n] \n  (sort #(< (first %1) (first %2))\n    (for [x (range n)] \n      (filter #(= x (mod % n)) coll))))","problem":43,"user":"4ed0e139535d44c135fd68c7"},{"code":"(fn [s x]\n  (apply map vector\n    (partition x x s)))","problem":43,"user":"4fca2a13e4b0ee37620e184d"},{"problem":43,"code":"(fn [coll n] (for [start (range n)] (take-nth n (drop start coll))))","user":"53ee7f2ee4b0d648e757f4cf"},{"code":"(fn rint [sq n]\n  (let [sp ((fn split [sq n]\n              (if (= 0 n)\n                (list () sq)\n                  (let [rs (split (rest sq) (- n 1)),\n                        f (first sq)]\n                        (list (cons f (first rs)) (second rs)))))\n            sq n)]\n    (if (empty? (second sp))\n      (map #(if (= nil %) nil (list %)) (first sp))\n      (map #(cons %1 %2)\n        (first sp)\n        (rint (second sp) n)))))","problem":43,"user":"4e8f5eba535d65386fec214c"},{"code":"(fn [col n]\n  (for \n    [x (range n) \n      :let [pos (filter #(= (rem % n) x) (range (count col)))]\n    ]\n    (map #(nth col %) pos)\n  )\n)","problem":43,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [coll n] (into [] (for [i (range n)] (take-nth n (drop i coll)))))","problem":43,"user":"4f65eec7e4b07046d9f4ef48"},{"problem":43,"code":"(fn [x y] (map #(map second %) (vals (group-by #(-> % first (mod y)) (map-indexed #(vec %&) x)))))","user":"4de14aad535d08e6dec9fde5"},{"problem":43,"code":"(fn reverse-interleave'\n  [coll x]\n  (apply (partial map list) (partition x coll)))","user":"60396c95e4b0d5df2af222f4"},{"problem":43,"code":"(fn rinterleave [col sqc]\n  (let [a (partition sqc col)\n        b (count a)\n        c (apply interleave a)]\n    (partition b c)))","user":"51456858e4b0e88796073408"},{"code":"#(sort-by first (map (fn[y](filter (fn[x](= y (mod x %2))) %1)) (range %2)))","problem":43,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn [s n]\n   (map\n    #(flatten (partition 1 n %))\n    (take n (iterate rest s))))","problem":43,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":43,"code":"(fn [s n]\n  (loop [i n\n         out '()]\n    (if (= 0 i)\n      out\n      (recur (dec i)\n             (conj out (take-nth n (drop (dec i) s)))))))","user":"56c1e720e4b0839206b9d68b"},{"code":"(fn [x y] (map #(map second %) (vals (group-by #(mod (first %) y) (map-indexed #(list % %2) x)))))","problem":43,"user":"5208a3a2e4b0301979a6c235"},{"problem":43,"code":"(fn [se n]\n     (loop [s (partition-all n se) r ()]\n           (if (= (first s) '())\n               r\n               (recur (map drop-last s) (conj r (map last s))))))","user":"568a743ee4b0dcc4269f408e"},{"code":"(fn [x y]\n  (apply map list (partition y x)))","problem":43,"user":"4e8d5911535d65386fec2133"},{"problem":43,"code":"#(for [i (range %2)]\n    (take-nth %2 (drop i %1)))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":43,"code":"(fn [xs n] (let [p (partition n xs)]\n             (map (fn [i] (map #(nth % i) p)) (range n))))","user":"5fd92743e4b05ac5b16ea11f"},{"problem":43,"code":"(fn a [a num]\n  (loop [sum () acc a cnt num]\n       (if (= 0 cnt)\n        (reverse sum)\n        (recur (conj sum (take-nth num acc))(rest acc)(- cnt 1)))))","user":"53ada652e4b047364c04446d"},{"problem":43,"code":"(fn [xs n]\n  ((comp vals last) \n   (reduce \n     (fn [[c xs] x]\n       (let [new-xs (merge xs {c (concat (get xs c) [x])})]\n         (if (= (inc c) n)\n           [0 new-xs]\n           [(inc c) new-xs])))\n     [0 (apply merge (map hash-map (range n) (repeatedly n (constantly '()))))]\n     xs)))","user":"5f5e7158e4b02876ed9fcff0"},{"code":"(fn [coll n] (for [i (range n)]\r\n                (take-nth n (drop i coll))))","problem":43,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn [x num] \n  (loop [num-left (dec num) out []] \n    (if (< num-left 0) \n      out \n      (recur (dec num-left) \n             (conj out \n               (take-nth num \n                 ((apply comp (repeat (- num num-left) rest))\n                  (concat [0] x))))))))","problem":43,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn [sec n]\n (letfn [(get-subsequence-nth-numbers [n sequ]\n          (let [length (count sequ)]\n            (loop [result (list (first sequ))\n                   nth-number n]\n              (if (< length (inc nth-number) )\n                (reverse result)\n                (recur (cons (nth sequ nth-number)\n                             result)\n                       (+ nth-number n))))))]\n  (loop [sec sec\n         counter 0\n         result '()]\n    (if (= counter n)\n      (reverse result) \n      (recur (rest sec)\n             (inc counter)\n             (cons (get-subsequence-nth-numbers n sec) result))))))","problem":43,"user":"51f297a3e4b0210f90e74552"},{"code":"(fn [xs n](apply map list (partition n xs)))","problem":43,"user":"4ebbb6bc535dfed6da9c6d71"},{"code":"(fn [ls n]\n      (partition (/ (count ls) n) (apply interleave (partition n ls)))\n      )","problem":43,"user":"4f017593535dcb61093f6a36"},{"problem":43,"code":"(fn [s n] \n  (apply map list \n         (map #(take n %) \n              (take-while #(not (empty? %)) \n                          (iterate  #(drop n %) s)))))","user":"5457e5f1e4b01be26fd74613"},{"problem":43,"code":"(fn [c x] (map (fn [s] (map #(nth c %) (range s (count c) x))) (range x)))","user":"5b72b36ce4b047b03b2036a9"},{"problem":43,"code":"(fn [v x] (apply map list (partition-all x v)))","user":"5e7bb000e4b085ba37836e1d"},{"problem":43,"code":"(fn [s x]\n     (for [start (range x)]\n       (->> s\n            (drop start)\n            (take-nth x))))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn [x n] (map #(take-nth n (drop % x)) (range n)))","problem":43,"user":"4e6472b7535d8ccf87e9fe6c"},{"problem":43,"code":"(fn [coll n]\n      (map #(take-nth n %)\n           (take n (iterate rest coll))))","user":"5ebc7c13e4b00a66d4a95267"},{"code":"(fn [l n]\n  (vals\n    (group-by #(mod % n)\n              l)))","problem":43,"user":"4fa11204e4b0dcca54ed6d56"},{"code":"(fn [coll i]\n  (apply map vector (partition i coll)))","problem":43,"user":"5225271fe4b01819a2de42f9"},{"problem":43,"code":"(fn [c i]\n  ((fn slice-parted [acc]\n     (let [size (count (first acc))]\n       (map (fn nths [nthn] (map #(nth % nthn) acc))\n            (range size))))\n   (partition i c)))","user":"530a6cbae4b02e82168697be"},{"problem":43,"code":"(fn [a b]\n  (loop [my-seq '()\n         part (partition-all b b a)]\n    (if (every? empty? part)\n      (reverse my-seq)\n      (recur (cons (map first part) my-seq)\n             (map rest part)))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":43,"code":"#(apply map vector (partition %2  %1))","user":"5acc961ae4b0e27600da7810"},{"problem":43,"code":"(fn  \n  [list const-inter]\n  (loop [new-list (into '() (repeat const-inter '()))\n         left list]\n    (if (not (empty? left))\n      (recur (->> (take const-inter left)\n                  (partition 1)\n                  (map concat new-list))\n             (drop const-inter left))\n      new-list)))","user":"5a58d8a0e4b05d388ecb6c8a"},{"problem":43,"code":"(fn reverse-interleave [c x]\n  (apply map vector (partition x c)))","user":"569ab3e2e4b0542e1f8d144a"},{"code":"(fn [col n]\n (vals (group-by #(mod % n) col)))","problem":43,"user":"5322d370e4b09d4e7a9b54c7"},{"code":"(fn myinterleave [coll n]\n(apply map list (partition-all n coll)))","problem":43,"user":"5344a0efe4b084c2834f4a2d"},{"code":"(fn [xs n] (map (fn [i] (keep-indexed (fn [j x] (if (= (rem j n) i) x)) xs)) (range n)))","problem":43,"user":"51131da8e4b0350614f07a83"},{"problem":43,"code":"#(map (comp flatten (partial map rest) val) (group-by (fn [x] (rem (first x) %2)) (map-indexed vector %1)))","user":"54cbe00ee4b057c6fda3a285"},{"problem":43,"code":"(fn [x y]\n  (apply map list (partition-all y x)))","user":"5ffd3422e4b074f607df65f7"},{"problem":43,"code":"(fn [coll n]\n  (loop [c coll k n result '()]\n    (if (= k 0)\n      (reverse result)\n      (recur (rest c) (dec k) (conj result (take-nth n c))))))","user":"55af3e6be4b03311e7b732c7"},{"code":"(fn [coll x]\n  (apply map list(partition x coll)))","problem":43,"user":"4f11b078535d64f603146422"},{"problem":43,"code":"(fn [s n]\n  (map (fn [v]\n         (map #(nth s %) v))\n       (vals (into (sorted-map)\n                   (group-by #(rem % n)\n                             (range (count s)))))))","user":"57008afae4b08d47c97781ca"},{"problem":43,"code":"(fn rev-interleave [coll step]\n    (let [residual (mod (count coll) step)\n          n (if (= residual 0) step residual)]\n      (loop [[head & tail :as new-coll] coll\n             res []\n             idx 0]\n        (if (= idx n)\n          res\n          (recur tail (conj res (take-nth step new-coll)) (inc idx))))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":43,"code":"(fn unzip\n  [in n]\n  (apply map list (partition n in)))","user":"54b2e881e4b09f271ff37d32"},{"problem":43,"code":"(fn [elems n]\n    (apply map vector (partition n elems)))","user":"5ac6ef9be4b0e27600da7779"},{"problem":43,"code":"(fn [xs n]\n   (->>\n    (partition n xs)\n    (apply map vector)))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":43,"code":"(fn foo \n  ([s x]\n   (foo s x (vec (map (fn [el] identity []) (range x)))))\n  ([s x seqs]\n   (println seqs)\n   (if (empty? s) seqs\n       (foo (drop x s) x \n            (for [n (range x)]\n              (into (nth (vec seqs) n) (vector (nth (vec s) n))))))))","user":"57af41bce4b0fbc9809a2731"},{"code":"#(apply map vector\n   (partition %2 %))","problem":43,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn reverse-interleave [list n]\n  (map reverse (reduce\n                 (fn [acc el]\n                   (let [rest-acc (drop 1 acc)\n                         new-sub  (cons el (first acc))]\n                     (conj (vec rest-acc) new-sub)))\n                 (vec (take n (cycle '([]))))\n                 list)))","problem":43,"user":"4fbe2cfbe4b081705acca30c"},{"problem":43,"code":"(fn [coll n] (partition (/ (count coll) n)\n  (loop [r [] x n c coll]\n    (if (< x 1)\n      r\n      (recur (concat r (take-nth n c)) (dec x) (rest c))\n      )\n    )\n  )\n)","user":"5df08767e4b093ff717275bf"},{"problem":43,"code":"(fn [coll n] (vals (group-by #(mod %1 n) coll)))","user":"5520d6b8e4b08d5046aa8a65"},{"problem":43,"code":"(fn [coll n]\n  (for [group (range n)]\n    (map #(nth coll (+ group (* % n))) (range (/ (count coll) n)))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":43,"code":"#(partition (int (/ (count %1) %2)) \n                    (loop [x %1 y %2 z '()]\n                      (if (= y 0) z\n                      (recur (rest x) (dec y) (concat z (take-nth %2 x))))))","user":"59fea630e4b01bb0ae8afd10"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (->> (partition n coll)\n       (apply interleave)\n       (partition (/ (count coll) n))))","user":"4fc524aae4b081705acca37e"},{"problem":43,"code":"(fn [s n]\n  (let [ps (partition-all n s)]\n    (map (fn [f]\n           (map f ps))\n         (map (fn [n]\n                (fn [s]\n                  (nth s n)))\n              (range n)))))","user":"55f9c245e4b03cbcff9738ca"},{"problem":43,"code":"(fn reverse-interleave [elements n]\n  (if (<= (count elements) n)\n    (map #(list %) elements)\n    (let [elems (take n elements)\n          elems-rest (drop n elements)\n          part (map #(list %) elems)]\n      (map concat part (reverse-interleave elems-rest n)))))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":43,"code":"(fn [col n]\n  (let [c (partition n n nil col)\n        length (count (first c))]\n    (reduce\n      (fn [accum i]\n        (conj accum (map #(nth % i) c) ))\n      '()\n      (reverse (range length)))))","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"(fn [coll n]\n  (for [[k v] (group-by #(mod % n) coll)] v))","problem":43,"user":"51b8e0dce4b050a1176cd69f"},{"code":"(fn [in n]\n  (partition (/ (count in) n) (apply interleave (partition n in))))","problem":43,"user":"529936e7e4b02ebb4ef7507b"},{"problem":43,"code":"(fn reverse-interleave\n  [coll number-partitions]\n  \"Applies the reverse of interleave onto a collection.\n  That is, partitions the collection into a given number of\n  collections, then creates the same number of collections by taking\n  the first of each collection, the second, etc...\"\n  (let [partitioned-col\n        (for [x (range 0 (quot (count coll) number-partitions))]\n          (for [y (range 0 number-partitions)]\n            (nth coll (+ (* x number-partitions) y))))]\n    (for [index (range 0 number-partitions)]\n      (map #(nth % index) partitioned-col))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":43,"code":"(fn rev-inter [coll x]\n  (when (> x 0)\n    (reduce-kv\n      (fn [acc idx val] (update-in acc [(mod idx x)] #(conj % val)))\n      (vec (take x (repeat [])))\n      (vec coll))))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":43,"code":"(fn [x, y]\n  (loop [x (vec x), acc 0, res '()]\n    (if (= acc y)\n      (if (= (first x) 1)\n        res\n        (reverse res))\n      (recur x (inc acc) (conj res (filter (fn [a] (= (rem acc y) (rem a y))) x))))))","user":"593d6793e4b069cdc2982ba6"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (for [pos (range 0 n)]\n    (keep-indexed #(if (= pos (mod %1 n)) %2) xs)))","user":"5b1d61b3e4b03cfeda66ecfe"},{"code":"#(letfn [\n  (reverse-interleave [s x i c] \n    (if (= i 0)\n      c\n      (recur (rest s) x (dec i) (conj c (take-nth x s)))))]\n  (reverse-interleave % %2 %2 []))","problem":43,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn [s n]\n  (map\n\t\treverse\n\t\t(reduce\n\t\t\t#(map conj %1 %2)\n  \t\t(repeat n '())\n\t\t\t(partition n s))))","problem":43,"user":"50361b6be4b0fbe0a74d26be"},{"problem":43,"code":"(fn [l i] (for [x (range i)]\n                   (keep-indexed #(if (= (mod %1 i) x) %2) l)))","user":"5801eed1e4b0a837a8b30c63"},{"problem":43,"code":"(fn [s n]\n  (let [f (fn [s n i]\n           (loop [r () s s j 0]\n             (if (empty? s)\n               (reverse r)\n               (if (= i (mod j n))\n                 (recur (conj r (first s)) (rest s) (inc j))\n                 (recur r (rest s) (inc j))))))]\n    (loop [r () i 0]\n      (if (= i n)\n        (reverse r)\n        (recur (conj r (f s n i)) (inc i))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":43,"code":"(fn [c i] (map #(take-nth i (drop % c)) (range i)))","user":"53b05a75e4b047364c044482"},{"code":"(fn [s n]\n    (let [c (/ (count s) n)]\n      (for [i (range n)]\n        (map #((vec s) (+ i (* n %))) (range c)))))","problem":43,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn [c n](vals (group-by #(mod %1 n) c)))","problem":43,"user":"5224cf82e4b01819a2de42ef"},{"problem":43,"code":"(fn [coll n]\n  (->> (range n)\n       (map #(range % (count coll) n))\n       (map #(map (fn [i] (nth coll i)) %))))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":43,"code":"(fn [x n]\n   (loop [result [] x x c 0]\n     (if (>= c n)\n       result\n       (recur (conj result (keep-indexed #(if (= (mod %1 n) c) %2) x)) x (inc c)))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"problem":43,"code":"(fn [sq n] (apply mapv vector (partition-all n sq)))","user":"534056fce4b085b17e897dac"},{"problem":43,"code":"(fn sin-interlave [seq n]\n  (reverse\n    (loop [s 0 result '()]\n      (if (= n s)\n        result\n        (recur (inc s) (conj result (take-nth n (drop s seq))))\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":43,"code":"(fn [coll n]\n  (apply map (fn [& args]\n               args)(partition n coll)))","user":"5478c4fee4b0c51c1f4d72c0"},{"code":"(fn [s n]\n     (let [r (loop [x n result {}]\n\t            (if (= 0 x)\n\t     result\n\t     (recur (dec x) (into result (hash-map (dec x) [])))))\n\t\tm (loop [s (map vector s) index 0 r r]\n\t\t(if (empty? s)\n\t\t    r\n\t\t    (recur (rest s) (inc index) (merge-with concat r (hash-map (mod index n) (first s))))))]\n\t\t    (loop [key 0 result []]\n\t\t       (if (= key n)\n\t\t\t   result\n\t\t\t   (recur (inc key) (conj result (get m key)))))))","problem":43,"user":"4f066916535dcb61093f6c10"},{"code":"(fn\n  [col n]\n  ((fn inter\n       [col n]\n       (for [x (range n)]\n\t (map #(+ x %) col))) (take-nth n col) n))","problem":43,"user":"5339af7de4b0e30313ee6cab"},{"code":"#(apply map list\n      (partition %2 %1))","problem":43,"user":"5354bb38e4b084c2834f4b0a"},{"code":"(fn [x y]\n  (for [z \n       (vals (group-by #(mod (get % 0) y) \n                       (map-indexed vector x)))]\n    (map #(get % 1) z)))","problem":43,"user":"507ef25ce4b0f753b6f9788e"},{"problem":43,"code":"(fn reverse-interleave [coll size]\n            (for [n (range size)]\n              (map #(nth % n) (partition size coll))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":43,"code":"(fn [coll n]\n  (let [update\n        (fn\n          ([m k f]\n           (assoc m k (f (get m k))))\n          ([m k f x]\n           (assoc m k (f (get m k) x)))\n          ([m k f x y]\n           (assoc m k (f (get m k) x y)))\n          ([m k f x y z]\n           (assoc m k (f (get m k) x y z)))\n          ([m k f x y z & more]\n           (assoc m k (apply f (get m k) x y z more))))]\n  (reduce\n   (fn [accu [index x]]\n     (update accu (mod index n) conj x)\n     )\n   (vec (repeat n []))\n   (map list (range) coll))))","user":"5d883119e4b0915913b1d3a6"},{"code":"(fn [s n]\r\n  (let [ps (partition n s)]\r\n    (for [k (range (/ (count s) (count ps)))]\r\n      (map #(nth % k) ps))))","problem":43,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":43,"code":"(fn [my-vect nr]\n  (let [my-func (fn [vect nr]\n                  (loop [v (drop nr vect)\n                         acc [(take nr vect)]]\n                    (if (empty? v)\n                      acc\n                      (recur (drop nr v) (conj acc (take nr v))))))]\n    (apply map list (my-func my-vect nr))))","user":"5655e056e4b0f9d632dd849b"},{"code":"(fn [coll n] (vals (group-by #(mod % n) coll)))","problem":43,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn [lst num] (for [x (range 0 num)] (keep-indexed (fn [idx item] (if (= (mod idx num) 0) item)) (drop x lst))))","problem":43,"user":"4f2f6678e4b0d6649770a06e"},{"code":"(fn [l n] \n  (map #(map last (% 1)) \n        (group-by \n          #(mod (first %) n) \n          (map-indexed #(list % %2) l))))","problem":43,"user":"4f8320e9e4b033992c121c18"},{"code":"(fn [lst nb]\n  (apply map list (partition nb lst)))","problem":43,"user":"4dfd7ecf535d04ed9115e783"},{"problem":43,"code":"(fn [coll n]\n  (vals\n   (group-by \n    (fn [x]\n     (rem (inc (.indexOf coll x)) n)) coll)))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn [s c] (apply (partial map vector) (partition c s)))","problem":43,"user":"4eabb245535d7eef30807319"},{"code":"(fn [col n]\n  (map #(take-nth n (drop % col)) (range n)))","problem":43,"user":"511c44fde4b00c2a1fa7ff77"},{"code":"(fn [coll n]\n  (let [keep-every (fn [coll e]\n                     (keep-indexed\n                      #(when (zero? (mod %1 e)) %2) coll))]\n    (for [dr (range n)]\n      (keep-every (drop dr coll) n))))","problem":43,"user":"4e89dbce535d3e98b8023283"},{"code":"(fn [s x] (partition (/ (count s) x) (apply interleave (partition x s))))","problem":43,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn [xs n]\n  (for [f (map #(partial drop %)\n               (range 0 n))]\n    (take-nth n (f xs))))","problem":43,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range 0 n)]\n    (doall (take-nth n (drop i coll)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn ri [xs n]\r\n  (letfn [(zip [& colls]\r\n            (apply map vector colls))\r\n          (mwc [acc x]\r\n            (merge-with concat acc (hash-map (first x) (vector (last x)))))]\r\n    (let [lst (zip (cycle (range 1 (inc n))) xs)]\r\n      (reverse\r\n        (vals\r\n          (reduce mwc {} lst))))))","problem":43,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":43,"code":"(fn [v n]\n  (let [length (count v)]\n    (for [start (range 0 n)]\n      (for [i (range start length n)] (nth v i)))))","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn re  \n  ([l x]\n    (cons (take-nth x l) (re (rest l) x (- x 1))))\n  ([l x n]\n     (if-not (= n 0)\n     (cons (take-nth x l) (re (rest l) x (- n 1))))))","problem":43,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn my-group-by\n  [xs n]\n  (let [group-map ((fn [] (group-by #(rem (first %) n) (map-indexed vector xs))))]\n    ((fn group-div\n      [curr]\n      (when (< curr n)\n        (concat\n         (list (map last (group-map curr)))\n         (group-div (inc curr))))) 0)))","problem":43,"user":"51e780dae4b0730ab87cf353"},{"problem":43,"code":";(fn [s n]\n;  (let [length (int (/ (count s) n))]\n;    (loop [sx s res '()]\n;    \t(if (empty? sx) (reverse res) \n;          (recur (drop length sx) (conj res (take length sx)))))))\n\n;(take n (iterate identity '()))\n\n;(fn [s n]\n;  (let [length (int (/ (count s) n)) ]\n;    (loop [i 0 res (vec (take n (iterate identity [])))]\n;      (if (= (count s) i) res\n;        (recur (inc i)  (assoc res (rem i n) (conj (nth res (rem i n)) (nth s i))))))))\n\n(fn [s n]\n  (let [length (int (/ (count s) n))]\n   \t(->> (range n)\n         (map #(take length (iterate (partial + n) %)))\n         (map #(map (fn [i] (nth s i)) %)))))","user":"56483f45e4b0284900eef62b"},{"problem":43,"code":"(fn\n  [coll, n]\n  ; we construct the data type to use for the pack\n  (let [ys (loop [i n ys [[]]]\n    (if (>= 1 i)\n    ys\n    (recur (dec i) (conj ys []))))]\n    ; now, ys contains n vectors\n    ; we can push elements in an cycle the deque\n    (let [[zs i] (loop [xs coll zs ys i 0]\n      (if (empty? xs)\n      [zs i]\n      (recur\n        (rest xs) (conj (into [] (rest zs)) (conj (first zs) (first xs))) (inc i))))]\n        ; now zs is the packed array\n        ; it must be rotated back to its original position\n        ; these tests do not require that step, since they have evenly\n        ; divisble seqs\n        zs)))","user":"53de4bdae4b0d874e779ae32"},{"problem":43,"code":"(fn [coll n] (apply #(apply map list %&) (partition n coll)))","user":"60b61b40e4b0e0fa5f1b4244"},{"code":"(fn uninterleave [xs n] (vals (group-by #(mod % n) xs)))","problem":43,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":43,"code":"(fn [s n] (map second (group-by #(mod % n) s)))","user":"58cbdc3be4b03c36ff7e5856"},{"problem":43,"code":"(fn inter [s y]\n  (reduce\n         (fn [m modulo]\n           (conj m \n                 ((fn create-seq [s y modulo]\n  (let [c (count s)]\n    (for [x (range c) :when (= (mod x y) modulo)] (nth s x)))) s y modulo)\n                 )\n           )\n         '()\n        (reverse (range y)) \n          ))","user":"5c9b848fe4b048ec896c5acf"},{"code":"(fn reverse-interleave\n  [s n]\n  (apply map list (partition n s)))","problem":43,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn [coll n]\n    (reduce (fn [m [k v]]\n              (update-in m [k] #(conj % v)))\n            (vec (repeat n []))\n            (map vector (mapcat identity (repeat (range n))) coll)))","problem":43,"user":"4e89ff3d535d3e98b802328a"},{"problem":43,"code":"(fn rweave\n  ([sq nbr i result] (cond (empty? sq) result\n                           :else (recur (rest sq) nbr (inc i) (assoc result\n                                                              (mod i nbr)\n                                                              (conj (get result (mod i nbr))\n                                                                    (first sq))))))\n  ([sq nbr]\n   (rweave sq nbr 0 (vec (replicate nbr [])))))","user":"58a3ba31e4b02bd94d917eff"},{"problem":43,"code":"(fn [coll x] (for [i (range x)] (take-nth x (drop i coll))))","user":"58acca5ee4b0005cfeb1a753"},{"code":"(fn grouper [sq groups]\r\n     (map #(map second %) (vals (group-by #(mod (first %) groups)\r\n               (map-indexed vector sq)))))","problem":43,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn parcel--group\n  [coll n] {:pre [(integer? n), (pos? n)]}\n  (->> coll\n       (group-by #(mod % n))\n       vals\n       (map seq))) ; This line de-vectors everything.","problem":43,"user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [coll n]\r\n    (apply map list (take (quot (count coll) n) (iterate #(drop n %) coll))))","problem":43,"user":"4f047177535dcb61093f6bc6"},{"problem":43,"code":"(fn [s n] (map #(take-nth n (drop %1 s)) (range n)))","user":"53fcb8f7e4b0de5c418485d4"},{"problem":43,"code":"(fn [xs i]\n  (map #(take-nth i (drop % xs))\n       (range i)))","user":"55d68726e4b0e31453f64a99"},{"problem":43,"code":"#(partition-all (/ (count %1) %2)\n                 (apply interleave\n                          (partition-all %2 %1)))","user":"57b3046de4b0fbc9809a276d"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (apply map list (partition n xs)))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn rin [s n]\n  ;take-nth where nth is n\n  (seq ((fn [acc p r]\n    (if (< p 1)\n        acc\n        (recur (conj acc (take-nth n r))\n               (dec p)\n               (rest r) )))\n  [] n s)))","problem":43,"user":"4e333091535deb9a81d77f25"},{"code":"(fn uninter [x num]\n  ((fn accum [x, num_in, acc]\n     (println \"num_in: \" num_in)\n     (println \"acc: \" acc)\n     (println \"nth(acc):\"(nth acc num_in))\n     (println (concat (nth acc num_in) (list (first x))))\n     (if (empty? x)\n       acc\n       (accum\n        (rest x)\n        (if (= num_in (dec num)) 0 (inc num_in))\n        (concat (take num_in acc) (list (concat (nth acc num_in) (list (first x)) )) (nthnext acc (inc num_in))))\n       )) x 0 (for [x (range num)] '())))","problem":43,"user":"5194f482e4b05be8c43d2385"},{"problem":43,"code":"#(letfn [(rint [arr x] \n   (if (empty? arr) \n     (repeat x '())\n     (map cons \n          (take x arr) \n          (rint (drop x arr) x)\n       )\n     )\n   )] (rint %1 %2))","user":"5ddcf10ae4b0948ae9d9adbe"},{"problem":43,"code":"(fn [coll n]\n   (loop [result [] remain coll]\n      (if (= (count result) n)\n         result\n        (recur (conj result (take-nth n remain)) (rest remain)))))","user":"5aa4a1ffe4b0d174b936c886"},{"code":"(fn [s c] (apply map list (partition c s)))","problem":43,"user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn [l x]  (loop [ret '()\n   lst l\n\t n 0]\n    (if (= n x)\n      (reverse ret)\n      (recur (conj ret (take-nth x lst)) (rest lst) (inc n)))))","problem":43,"user":"4f192b29535d64f603146464"},{"problem":43,"code":"(fn [s x]\n (map #(flatten (map second %)) (vals (group-by #(first %) (map vector (map #(mod % x) (rest (range))) s)))) )","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [s n] \n   (for [i (range n)] \n       (map #((vec s) (+ (* n %) i)) \n            (range (/ (count s) n)))))","problem":43,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn rev-int [l n] (take n (lazy-seq (cons (take-nth n l) (rev-int (rest l) n)))))","problem":43,"user":"4e218470535d04ed9115e817"},{"code":"(fn [c n]\n  (apply map list (partition n c)))","problem":43,"user":"5398305fe4b0b51d73faaef6"},{"code":"(fn interleave*\n  [coll n]\n  (map #(take-nth n %) (map #(drop % coll) (range n))))","problem":43,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn rev-inter [c n]\n  (apply map list (partition n c)))","problem":43,"user":"52f8f4d1e4b047fd55836fde"},{"problem":43,"code":"(fn [coll n] \n  (map (fn [i] (map #(nth % i) (partition n coll))) (range n)))","user":"53cb321fe4b00fb29b2212d1"},{"problem":43,"code":"(fn [col len]\n(let [p (partition len col)]\n (apply map list p)))","user":"58951903e4b00487982d5274"},{"problem":43,"code":"(fn [xs n]\n  (let [pxs (partition n xs)]\n    (apply map (cons list pxs))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":43,"code":"(fn [xs n]\n  (reduce\n    #(map conj %1 %2)\n    (repeat n [])\n    (partition-all n xs)))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn [lst n]\n   (map #(map last %1) \n    (vals (group-by #(first %1) (map-indexed #(list (mod %1 n) %2) lst)))\n  ))","problem":43,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn [seq n]\n    (loop [acc (vec (repeat n nil)) i 0 tail seq]\n        (let [j (mod i n)]\n            (cond (empty? tail) (apply list acc)\n                  :else         (recur (assoc acc j (concat (nth acc j) (list (first tail)))) (+ i 1) (rest tail))))))","problem":43,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":43,"code":"(fn rev-interleave\n  ([xs n]\n   (rev-interleave xs n (repeat n (list))))\n  ([xs n accum-xs]\n   (if (empty? xs)\n     accum-xs\n     (let [new-accum-xs (map #(concat %1 [%2]) accum-xs (take n xs))]\n       (rev-interleave (drop n xs) n new-accum-xs)\n     )\n   )\n  )\n)","user":"54e0e911e4b024c67c0cf7bc"},{"code":"(fn [xs n] (map #(take-nth n (nthnext xs %)) (range n)))","problem":43,"user":"50456731e4b01f6c9a8b236b"},{"problem":43,"code":"(fn [s parts]\n  (map\n   (fn [n]\n     (filter #(not (nil? %))\n            (map-indexed (fn [i elem]\n                           (if(= 0 (mod (- i n) parts))\n                             elem\n                             nil))\n                         s)))\n   (range 0 parts)))","user":"59946856e4b0b211ea3aaac7"},{"problem":43,"code":"(fn [nums x]\n   ((if\n     (or\n      (vector? nums)\n      (list? nums))\n      reverse\n      identity)\n    (map-indexed (fn [i _]\n\n                   (filter #(= (mod % x) i)\n                           (vec nums))\n\n                        ;filter [1 2 3 4 5 6] by i divisibility\n                   )\n                 (repeat x 1))))","user":"59c87d49e4b0a024fb6ae55b"},{"problem":43,"code":"(fn reverse-interleave\n  ([sqn x] (reverse-interleave sqn x (take x (repeat []))))\n  ([sqn x sol]\n   (if (= (count sqn) x)\n     (map #(conj %1 %2) sol sqn)\n     (recur (nthrest sqn x) x (map #(conj %1 %2) sol sqn)))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":43,"code":"(fn [col num]\n  (loop [counter 0\n         result '()]\n    (if (= counter num)\n      (reverse result)\n      (recur (inc counter) (conj result (take-nth num (drop counter col)))))))","user":"5a912080e4b002d099cae6ea"},{"code":"(fn disiterleave [acoll n]\n  (reduce (partial map conj)\n          (repeat n [])\n          (partition n acoll)))","problem":43,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [s n]\n  (let [s-count (count s)\n        n-items (/ s-count n)]\n\n    (for [i (range n)]\n       (take n-items (iterate (partial + n)  (nth s i))))))","problem":43,"user":"4eca7a87535d6d7199dd3705"},{"code":"(fn de-interleave [coll n] \n  (loop [ix 0 ilist coll olist []]\n     (if (= ix n)\n         (reverse olist)\n         (recur (inc ix) (rest ilist) (cons (take-nth n ilist) olist))\n     )\n  )\n)","problem":43,"user":"4ec17677535dfed6da9c6dad"},{"problem":43,"code":"(\n fn solve [x, y]\n (let\n   [a (map vector x (->> (range y) repeat flatten))]\n   ((fn rec [r]\n     (if (= r y)\n       ()\n       (conj \n       \t (rec (inc r))\n         (map first (filter #(= (second %) r) a))\n       )\n     )\n   ) 0)\n )\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":43,"code":"#(loop [xs %1 n %2 ys []] \n  (let [entry (take-nth n xs)]\n   (if (empty? xs) ys (recur (remove (set entry) xs) (dec n) (conj ys entry)))))","user":"57615a22e4b0994c1922fb88"},{"code":"(fn [coll n]\n  (let [\n      with-group (map #(vector (rem %1 n) %2) (range) coll)\n      groups (vals (group-by first with-group))\n    ]\n    (map #(map second %) groups)))","problem":43,"user":"4e25176e535d04ed9115e829"},{"problem":43,"code":"(fn  oppa [ls n]  (loop [res [] cur (partition n ls)]\n                  (if (every? empty? cur) res\n                      (recur (conj res (map first cur)) (map rest cur)))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [coll n]\n  (letfn [(index-coll [coll] (map (fn [n i] [n i]) coll (range (count coll))))]\n    (map (fn [grp-idx]\n           (map first (filter (fn [[_ i]]\n                                (= (mod i n) grp-idx))\n                              (index-coll coll))))\n         (range n))))","problem":43,"user":"529b5301e4b02ebb4ef7509f"},{"problem":43,"code":"(fn [s n]\n  (map\n    (fn [[k v]] (map second v))\n    (group-by first \n       (map (fn [k v] [k v]) \n              (flatten (repeat (range 0 n))) \n              s  \n       )\n    )\n  )\n)","user":"5c272f82e4b07e362c2305cb"},{"problem":43,"code":"#(loop\n   [acc (vec (repeat %2 []))\n    xs %1\n    index 0]\n   (if (empty? xs)\n     acc\n     (recur (update-in acc [index] conj (first xs))\n            (rest xs)\n            (mod (inc index) %2))))","user":"5daa1fc8e4b000c986472c3e"},{"problem":43,"code":"#(apply mapv vector (partition-all %2 %1))","user":"592db566e4b072a2710fcf7c"},{"problem":43,"code":"(fn [v n] (apply map list (partition n v)))","user":"5892a5fde4b00487982d5228"},{"code":"(fn [t m]\n         (loop [s t n m r []]\n           (if (zero? n)\n               r\n               (recur (rest s)\n                      (dec n)\n                      (conj r (take-nth m s))))))","problem":43,"user":"4e821ca5535db62dc21a62c2"},{"code":"(fn reverse-interleave [s x]\n  (for [index (range x)]\n    (apply concat (partition 1 x (drop index s)))))","problem":43,"user":"4ec70f26535d6d7199dd36dd"},{"problem":43,"code":"(fn [xs n] (->> \n            (map list xs (range (count xs)))\n            (group-by #(mod (first %) n)) \n            vals\n            (map (fn [ps] (map first ps)))))","user":"5fa17538e4b0f0ebd91b77e3"},{"problem":43,"code":"(fn [s c]\n  (loop [i 0\n         new-seq '()]\n    (if (= i (count s))\n      new-seq\n      (if (nil? (nth new-seq (mod i c) nil))\n        (recur (inc i) (concat new-seq (list (list (nth s i)))))\n        (recur (inc i) (loop [j 0\n                              inner-seq '()]\n                         (if (= j (count new-seq))\n                           inner-seq\n                           (if (= j (mod i c))\n                             (recur (inc j) (concat inner-seq (list (concat (nth new-seq j) (list (nth s i))))))\n                             (recur (inc j) (concat inner-seq (list (nth new-seq j))))))))))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":43,"code":"(fn[s c](map #(flatten(partition-all 1 c (drop % s)))(range c)))","user":"560d491ae4b05f002753df3b"},{"code":"(fn [xs n]\n  (vals (apply merge-with into (map-indexed #(hash-map (rem % n) [%2]) xs))))","problem":43,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn deinterleave [x n]\n     \"Converts a vector x into a vector of n sublists. (count x) must be a multiple of n.\"\n     (loop [counter 0, result (vec (repeat n []))]\n       (if (< counter (count x))\n         (recur (inc counter) (assoc result (mod counter n) (conj (get result (mod counter n)) (get (vec x) counter))))\n         result)))","problem":43,"user":"532727bae4b09d4e7a9b54fa"},{"problem":43,"code":"(fn [r p]\n    (into '()\n          (map #(take-nth p (take (count r) (drop % (cycle r))))\n               (reverse (range p)))))","user":"52e1c276e4b09f7907dd142b"},{"code":"(fn [coll n] \n  (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":43,"code":"(fn [xs n]\n  (for [t (range n)]\n     (map #((vec xs) %) (filter #(= t (rem % n)) (range (count xs)))\n    )))","user":"53ca23e3e4b00fb29b2212c6"},{"code":"(fn rinterleave \n  ([col n] (rinterleave col n 0 (vec (map (fn [x] ()) (range n)))))\n  ([col n cur-raw res]\n    (if col\n      (let [cur (mod cur-raw n)]\n      (rinterleave \n        (next col)\n        n\n        (inc cur) \n        (assoc res cur (conj (nth res cur) (first col)))))\n      (map reverse res))))","problem":43,"user":"50053d6ce4b0678c553fc45e"},{"problem":43,"code":"(fn [de-interleave-list number-of-times]\n   (reduce #(conj %1 (take-nth number-of-times\n                               (nthrest de-interleave-list %2)))\n           []\n          (range 0 number-of-times)))","user":"57280b92e4b0c5bde472c14e"},{"problem":43,"code":"#((fn f [r [a & b] k]\n   (if (= a nil) r\n     (f\n       (assoc r k (conj (get r k []) a))\n       b\n       (mod (+ k 1) %2))))\n   [] % 0)","user":"53500869e4b084c2834f4ad3"},{"problem":43,"code":"(fn [coll n]  (loop [acc (vec (for [x (range n)] [])) init (vec coll)]\n                                           (if (empty? init) acc\n                                           (recur (map conj acc init) (subvec init n))\n                                            )\n                                           ))","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [col n]\n  (map #(take-nth n (drop % col))\n       (range n)))","problem":43,"user":"51891c96e4b04c2714a2670e"},{"code":"; And then I remembered partition\n#(apply map list (partition %2 %1))\n\n\n;(fn getEvery [coll every]\n;  (let [getEveryHelper (fn [every offset coll] \n;                          (keep-indexed #(if (= offset (mod %1 every)) %2) coll))]\n;  (map #(getEveryHelper every % coll) (range every))))","problem":43,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn f\n   ([x num]\n      (for [y (range num)]\n         (take-nth num (drop y x)))))","problem":43,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":43,"code":"(fn f [coll n]\n   (->> coll\n        (partition-all n)\n        (apply map vector)))","user":"60537cd1e4b04c8f2157d152"},{"problem":43,"code":"(fn [x y] (sort-by first (partition-by #(mod % y) (sort-by #(mod % y) x))))","user":"566a3a26e4b0a866af689699"},{"problem":43,"code":"#(map (fn [i] (filter (fn [x] (not (nil? x)))\n                     (map-indexed (fn [j v] (if (= (mod j %2) 0) v)) \n                                  (drop i %1))))\n     (range 0 %2))","user":"5884e807e4b0f1effa3b76a6"},{"problem":43,"code":"(fn [s n] (reduce #(map conj %1 %2) (repeat n []) (partition n s)))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn solution [s k]\n  (map\n    #(map second %)\n    (vals \n      (group-by\n        #(first %)\n        (map #(list %1 %2) (flatten (repeat (range k))) s)\n      )\n    )\n  )\n)","problem":43,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":43,"code":"(fn [coll n]\n  (loop [new [] c 0]\n    (if (= n c)\n      new\n      (recur (conj new (keep-indexed #(if (= c (rem %1 n)) %2) coll)) (inc c)))))","user":"574abbfbe4b02ea114799200"},{"problem":43,"code":"(fn [l n] (map second (group-by #(mod % n) l)))","user":"55bedd93e4b01b9910ae2a0d"},{"problem":43,"code":"(fn reversi [lst cnt]\n  (let [\n    groupings \n      (map-indexed\n        #(list %2 (mod %1 cnt))\n        lst)\n    groups (vals (group-by second groupings))]\n\n    (map\n      #(map first %)\n      groups)))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":43,"code":"(fn [input-list interleave-count]\n  (let [input-count (count input-list)]\n    (loop [input-list input-list\n           interleave-result (repeat interleave-count '())]\n      (if (nil? input-list) interleave-result\n          (let [current-input-count (count input-list)\n                last-input-item (last input-list)\n                result-col-index (mod (- input-count current-input-count) interleave-count)\n                reversed-col-index (let [x (- result-col-index (dec interleave-count))] (if (neg? x) (- x) x))\n                rebuild-interleave (fn [build index new-item]\n                                     (loop [build build\n                                            interleave-sections '()]\n                                       (if (nil? build) interleave-sections\n                                           (let [interleave-section (last build)\n                                                 new-interleave-section (if (= (dec (count build)) index) (cons new-item interleave-section)\n                                                                            interleave-section)]\n                                             (recur (butlast build) (cons new-interleave-section interleave-sections))))))\n                new-interleave-result (rebuild-interleave interleave-result reversed-col-index last-input-item)]\n            (recur (butlast input-list) new-interleave-result))))))","user":"596aaeefe4b069c0a1a19808"},{"problem":43,"code":"(fn [x m] (map #(for [y (apply hash-map (interleave (range (count x)) x)) :when (= % (mod (first y) m))] (second y)) (range m)))","user":"53fc8424e4b0de5c418485b3"},{"code":"#(loop [ls %1 stride-n %2 n 0 dils []]\n     (if (= stride-n n)\n       dils\n       (recur\n        (rest ls)\n        stride-n\n        (inc n)\n        (conj dils (take-nth stride-n ls)))\n  ))","problem":43,"user":"5070e31ee4b0e3170b5a8678"},{"problem":43,"code":"(fn [c n]\n  (for [i (range 0 n)]\n    (take-nth n (drop i c))))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (partition (/ (count coll) n) (sort #(compare (mod (.indexOf coll %) n) (mod (.indexOf coll %2) n)) coll)))","user":"53fe1b42e4b0de5c418485f1"},{"problem":43,"code":"#(apply map list (partition %2 %1))\n;(fn [ls n] (map #(flatten (partition 1 n (drop % ls))) (range 0 n)))","user":"52f3568fe4b05e3f0be25f0e"},{"code":"(fn [x y] (map-indexed #(map (partial + %) %2) (repeat y (take-nth y x))))","problem":43,"user":"52a5f1e6e4b0c58976d9abf4"},{"code":"(fn[a b] (for [x (vals (group-by #(mod % b) a))] (seq x)))","problem":43,"user":"516ab8c2e4b081287f204e9e"},{"problem":43,"code":"(fn [coll n]\n  (loop [partitioned (partition-all n coll)\n         acc []]\n    (if (empty? (first partitioned))\n      acc\n      (recur (map rest partitioned)\n             (conj acc (map first partitioned))))))","user":"60794173e4b0a637ed78035d"},{"problem":43,"code":"(fn [arr, j] (vals (group-by (fn [i] (rem i j)) arr)))","user":"57eb7a97e4b0bfb2137f5b62"},{"problem":43,"code":"(fn deinterleave [coll n] (for [i (range n)] (take-nth n (drop i coll))))","user":"59358f74e4b04f87174def52"},{"code":"(fn \n  [coll parts]\n  (apply map list (partition parts coll)))","problem":43,"user":"52daf558e4b09f7907dd13c1"},{"code":"(fn [xs n]\n  (map (partial map first) (take n (iterate (partial map next) (partition n xs)))))","problem":43,"user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn [c e]\n   (map #(take-nth e (drop % c)) (range e)))","problem":43,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":43,"code":"(fn [col n]\n  (map val (group-by #(mod % n) col))\n)","user":"5766fbb7e4b0a07e8fc180b6"},{"problem":43,"code":"(fn [xs n]\n  (loop [in (reverse xs) out (repeat n nil)]\n    (if (empty? in)\n      (reverse out)\n      (recur (drop n in)\n             (map #(cons %1 %2) (take n in) out)))))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn [coll x] \n  (letfn [(grab-first [meta-coll]\n            (map first meta-coll))] \n  (loop [res '()\n         source (partition x coll)]\n    (if (seq (first source))\n      (recur (conj res (grab-first source)) (map rest source))\n      (reverse res)))))","problem":43,"user":"4ec34578535dcc7ae8597d51"},{"problem":43,"code":";; This code assumes that the provided collection will divide evenly into\n;; the resulting split collections.\n\n(fn [coll num-split-colls]\n  (loop [curr-coll coll\n         split-colls (repeat num-split-colls (vector))]\n    (let [index (rem (- (count coll) (count curr-coll)) num-split-colls)\n          item (first curr-coll)\n          remaining-coll (rest curr-coll)]\n      (if (empty? curr-coll)\n        split-colls\n        (recur remaining-coll \n               (concat \n                (take index split-colls) \n                (list (conj (nth split-colls index) item))\n                (take-last (- num-split-colls index 1) split-colls)))))))","user":"55344b75e4b09218d5f44f99"},{"code":"#(loop [x %2\n        y %\n        acc []]\n    (if (= x 0)\n      acc\n      (recur (dec x) \n             (rest y) \n             (conj acc (take-nth %2 y)))))","problem":43,"user":"52d838bee4b09f7907dd138b"},{"problem":43,"code":"(fn [xs parts]\n  (for [part (range 0 parts)]\n    (keep-indexed #(when (= part (mod % parts)) %2) xs)))","user":"5368fedee4b0243289761e93"},{"problem":43,"code":"(fn [xs n]\n  (->> xs\n       (partition n)\n       (apply map #(apply list %&))))","user":"59a80652e4b0bcf4e9a43aeb"},{"code":"#(vals (group-by (fn [n] (mod n %2)) %))","problem":43,"user":"4db3393e535df7e46ed9b6cc"},{"problem":43,"code":";(fn [coll n]\n;  (map #(take-nth n (nthrest coll %)) (range n)))\n\n(fn [coll n]\n  (apply map vector (partition n coll)))","user":"534da51fe4b084c2834f4aa4"},{"code":"(fn [array, count] (map #(keep-indexed % array) (map #(fn [index, val] (when (= % (mod index count)) val)) (range count))))","problem":43,"user":"4f294c48e4b0d6649770a023"},{"problem":43,"code":"(fn [coll n]\n  (loop [i 0\n         ret []]\n    (if (< i n)\n      (recur (inc i)\n             (conj ret (flatten\n               (partition 1 n (drop i coll)))))\n      ret)))","user":"5ba15075e4b0a20761a2339e"},{"problem":43,"code":"#(map (partial take-nth %2) (take %2 (iterate rest %1)))\n\n; #(apply map list (partition %2 %))","user":"550fdc1de4b06e50f9beb17d"},{"problem":43,"code":"(fn [c n] (apply map (conj (partition n c) list)))","user":"5f06da46e4b0cf489e8d7f54"},{"code":"(fn [v c] (partition (/ (count v) c) (apply interleave (partition c v))))","problem":43,"user":"538d7e2ee4b0b51d73faae70"},{"code":"(fn [x n]\n  (map #(take-nth n (drop % x))\n    (range n)))","problem":43,"user":"4ff4f5c4e4b0678c553fc362"},{"problem":43,"code":"(fn [coll n] (->> coll\n                    (partition n)\n                    (apply interleave)\n                    (partition (/ (count coll) n))))","user":"54734a0de4b0c51c1f4d727b"},{"code":"(fn [s n] (map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":43,"code":"(fn [s n]                                                                       \n  (reduce #(concat (rest %1) [(conj (first %1) %2)]) (repeat n []) s))","user":"563536f8e4b0bfe05bf117c5"},{"problem":43,"code":"(fn reverse-interleave\n  [collection n]\n  (apply map vector (partition n collection)))","user":"5d42c88ae4b05dd059a5437e"},{"problem":43,"code":"(fn [input unter]\n   (\n    (fn [input result]\n      (if (empty? input)\n       (list* result) \n       (recur (rest input) (conj (vec (rest result)) (conj (first result) (first input))))\n      )\n    )\n    input\n     (\n       (fn [unter unterRes]\n         (if (== 0 unter)\n           unterRes\n           (recur (dec unter) (conj unterRes (vector)))\n           )\n       )\n       unter\n       (vector)\n       \n     ) \n   )  \n )","user":"55034bf0e4b086ebe8a79c6d"},{"problem":43,"code":"(fn [as step](map (fn [sl] (map (fn [e] (nth as e)) sl))  (vals (group-by (fn [x] (rem x step)) (range 0 (count as))))))","user":"5213348ae4b0d32679a50652"},{"problem":43,"code":"(fn rinterleave [coll n]\n  (apply map vector (partition n coll)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"#(loop [i 0 [f & r] %1 res []]\n\t(if (nil? f) res\n    \t(recur\n         \t(mod (inc i) %2) r\n\t\t\t(assoc res i \n\t\t\t\t(conj\n\t\t\t\t\t(if (<= (count res) i) []\n\t\t\t\t\t\t(nth res i)) \n\t\t\t\tf)))))","problem":43,"user":"53300924e4b019098a6f8b55"},{"problem":43,"code":"(fn [col n]\n(apply (partial map list)\n(partition-all n col)))","user":"54580586e4b01be26fd74616"},{"problem":43,"code":"(fn [coll n] (apply map vector (partition n n coll)))","user":"540c6a8ae4b0addc1aec6702"},{"code":"(fn  [coll step]\n  (loop [y 0 result []]\n    (if (= y step) result\n      (recur (inc y) (conj result (take-nth step (drop y coll)))))))","problem":43,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":43,"code":"(fn [li n]\n  (map (partial take-nth n) (take n (iterate rest li))))","user":"55a65872e4b09e57187da299"},{"code":"(fn [l n]\r\n  (letfn [(strides [l n]\r\n            (if (empty? l)\r\n              []\r\n              (let [[a b] (split-at n l)]\r\n                 (cons a (strides b n)))))]\r\n    (apply (partial map list) (strides l n))))","problem":43,"user":"509c03f3e4b085ae113522a8"},{"problem":43,"code":"#(letfn [(x [n]\n            (keep-indexed (fn [k v] (if (= n (mod k %2)) v)) %1))]\n   (loop [curr 0 output '[]]\n     (if (= curr %2) output\n       (recur (inc curr) (conj output (x curr))))))","user":"552456e3e4b0882d96d091c2"},{"problem":43,"code":"(fn reverse-interleave\n  [xs n]\n  (->> xs\n       (partition n)\n       (apply map vector)))","user":"5e952e17e4b0fbed045a3807"},{"code":"(fn __ [v n]\n  (for [x (range n)]\n    (for [y (vec (range (/ (count v) n)))]\n      (get (vec v) (+ x (* y n))))))","problem":43,"user":"4ec9549d535d6d7199dd36fe"},{"problem":43,"code":"(fn f[se cnt]\n  (loop [in se\n        t (empty se)\n        i cnt]\n    (if (= i 0)\n      (partition (/ (count se) cnt) t)\n      (recur (rest in) (concat t (take-nth cnt in)) (dec i))\n    )\n  )\n)","user":"5c337305e4b0d62ef62d9f48"},{"problem":43,"code":"#(partition (/ (count %1) %2)\n(apply interleave (partition %2 %1))\n)","user":"5aa8f753e4b0d174b936c8d9"},{"problem":43,"code":"(fn\n  [coll q]\n  (->> (map vector coll (iterate inc 0))\n       (reduce\n        (fn [m [el idx]]\n          (let [i (mod idx q)]\n            (assoc m i (conj (get m i []) el))))\n        (sorted-map))\n       (map (fn [[k v]] v))))","user":"5c15537ae4b01240ff5671bf"},{"problem":43,"code":"(fn [xs n]\n  (loop [acc (repeat n [])\n         ys  xs]\n    (if (seq ys)\n      (let [[head tail] (split-at n ys)]\n        (recur (map conj acc head) tail))\n      acc)))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn rev-interleave [sq n]\r\n  (let [count-sq (count sq)\r\n        subseq-len (/ count-sq n)]\r\n    (for [i (range n)]\r\n      (map (partial nth sq) (range i count-sq n)))))","problem":43,"user":"4f71db68e4b07046d9f4f015"},{"code":"(fn[c w] (partition (/ (count c) w) (apply interleave (partition w c))))","problem":43,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [s n]\n  (partition (/ (count s) n) (apply interleave (partition n s))))","problem":43,"user":"52a32b52e4b04e0c58e87bfc"},{"code":"(fn [col n]\n (map last (group-by #(mod % n) col)))","problem":43,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn ri [l n]\n    (apply map list (partition n l)))","problem":43,"user":"4fbdcb87e4b081705acca30a"},{"problem":43,"code":"#(apply map vector (partition %2 %1) )","user":"583667c7e4b089d5ab817cfb"},{"problem":43,"code":"(fn [l n]\n  (let [partitioned (partition n l)]\n    (reverse (reduce (fn [xs x]\n              (cons (map #(nth % x) partitioned) xs))\n              '()\n              (range n)))))","user":"4ff3113ae4b0678c553fc345"},{"code":"(fn [l x] (apply map list (partition x l)))","problem":43,"user":"51789599e4b03d69594194d6"},{"problem":43,"code":"(fn [col n] (apply map list (partition n col)))","user":"54f14aa6e4b024c67c0cf8af"},{"problem":43,"code":"#(apply (partial map (fn [f & r] (conj r f))) (partition %2 %1))","user":"5578c67fe4b05c286339e08d"},{"problem":43,"code":"(fn [l n]\n  (for [x (range n)]\n    (map #(nth % x) (partition n l))))","user":"54b2ec84e4b09f271ff37d33"},{"code":";; (fn [coll n] (map (fn [indexes] (map #(nth coll %) indexes)) (map #(range % (count coll) n) (range n))))\n\n#(apply map vector (partition %2 %))","problem":43,"user":"511f88eee4b085952a83535f"},{"problem":43,"code":"(fn f [coll n]\n  (apply map list (partition n coll)))","user":"544ac9b5e4b0e39780006959"},{"problem":43,"code":"(fn [coll n]\n  (loop [pass n\n         c coll\n         out []]\n    (if (= pass 0)\n      out\n      (recur (- pass 1) (rest c) (conj out (take-nth n c))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [seq n]   \n  (for [i (range 0 n)]\n    (take-nth n (drop i seq))))","problem":43,"user":"4e955b95535dbda64a6f6b33"},{"code":"(fn ril [osequence howmany]                                                                                                                      \n    (for [ct (range howmany)]                                                                                                                      \n      (keep-indexed (fn keep-mod [index item] (if (= ct (rem index howmany)) item nil)) osequence)))","problem":43,"user":"50057f23e4b0678c553fc466"},{"code":"(fn [v n] (for [i (range n)] (keep-indexed #(if (= (mod %1 n) i) %2) v)))","problem":43,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"code":"(fn [xs n]\n  (letfn [(add [l [val index]]\n    (map-indexed #(if (not= %1 index) %2 (conj %2 val)) l))]\n  (reduce add (repeat n []) (map list xs (cycle (range n))))))","problem":43,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":43,"code":"#(map (partial take-nth %2) (map (fn [x] (drop x %1)) (range %2)))","user":"5f429fdfe4b0955706451faf"},{"code":"(fn [ls n]\r\n            (let [len (count ls)\r\n                  ks (quot len (quot len n))\r\n                  lss (partition ks ls)]\r\n                  (loop [an [] lss lss]\r\n                     (if (empty? (first lss))\r\n                         an\r\n                         (recur (conj an (map first lss))\r\n                                (map rest lss))))))","problem":43,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn [s n]\n  (reduce #(map conj %1 %2) (repeat n []) (partition n s)))","problem":43,"user":"50acbd15e4b071b89ef26234"},{"problem":43,"code":"(fn f [s n]\n  (let [parts (partition n s)\n        fns (map (fn [i] (fn [coll] (map #(nth % i) coll)))\n                 (range n))]\n    ((apply juxt fns) parts)))","user":"5012da69e4b0c8732600222d"},{"code":"(fn [coll n]\r\n  (apply map list (partition n coll)))","problem":43,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":43,"code":"(fn [xs n]\n  (for [i (range n)]\n      (keep-indexed (fn [j x]\n                      (when (= i (mod j n))\n                        x))\n                    xs)))","user":"4f387c2ee4b0e243712b1edd"},{"code":"(fn [xs x] (apply map list (partition x xs)))","problem":43,"user":"50fd4838e4b033b9c38d78ce"},{"problem":43,"code":"(fn [coll step] (loop [indexes (range 0 (count coll) step) coll-out []] (if (>= (first indexes) step) coll-out (recur (map inc indexes) (conj coll-out (map (partial nth coll) indexes))))))","user":"564c8e99e4b0284900eef674"},{"problem":43,"code":"(fn subseq [coll x]\n  (for [i (range x)]\n    (take-nth x (drop i coll)))\n  )","user":"5e3c6db5e4b01d43a70e8e05"},{"code":"(fn [coll n]\n  (loop [acc [] m 0]\n    (if (= m n)\n      acc\n      (recur (conj acc (take-nth n (drop m coll))) (inc m)))))","problem":43,"user":"4e22b78b535d04ed9115e81e"},{"problem":43,"code":"(fn [coll buckets]\n  (loop [in coll\n         out []]\n    (prn out)\n   (if (= (count out) buckets)\n     out\n    (recur (next in) (conj out (take-nth buckets in))))))","user":"56391b7ce4b0bfe05bf117ef"},{"problem":43,"code":"(fn [coll n]\n    (map (partial take-nth n) (map #(drop % coll) (range 0 n))))","user":"5e17bb46e4b00200644e3d5a"},{"problem":43,"code":"(fn [s n]\n  (loop [out-vecs [(take n [])]\n         S s\n         C 0]\n    (if (empty? S) out-vecs\n        (recur (assoc out-vecs C (concat (get out-vecs C) [(first S)])) \n               (rest S)\n               (mod (inc C) n)))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"(fn [a-seq n]\n  (vals (group-by #(mod % n)\n         \t      a-seq)))","problem":43,"user":"52890634e4b0239c8a67ae5e"},{"problem":43,"code":"(fn [xs n]\n  (:vecs\n    (reduce\n      (fn [{:keys [i vecs]} e]\n        (let [j (mod i n)]\n        \t{:i (inc i) :vecs (assoc vecs j (conj (nth vecs j) e))}))\n      {:i 0 :vecs (vec (repeat n []))}\n      xs)))","user":"5e98e8a9e4b0157ca96647dc"},{"problem":43,"code":"(fn [l n] (map (fn [x] (map #(nth % x) (partition-all n l))) (range 0 n)))","user":"5361d423e4b0243289761e49"},{"problem":43,"code":"(fn [s n]\n  (map (fn [base]\n         (filter (fn [item] (= (mod (.indexOf s item) n) base))\n                 s))\n       (range n)))","user":"541709b0e4b01498b1a71a06"},{"problem":43,"code":"(fn [coll x]\n  (map\n    (fn [i]\n      (keep-indexed\n        #(when (= i (mod %1 x))\n           %2)\n        coll))\n    (range x)))","user":"56f9982ce4b07572ad1a88b8"},{"problem":43,"code":"(fn [aa n]\n  (->> aa\n     ;;[1 2 3 4 5 6]\n    (partition n)\n     ;;((1 2) (3 4) (5 6))\n     (apply map list)\n    ))","user":"5619a4d0e4b053970a773afd"},{"code":"(fn [xs n] (apply map list (partition n xs)))","problem":43,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":43,"code":"(fn [seq n-subs]\n  (apply map list (partition n-subs seq)))","user":"559fb147e4b0acc240e314ea"},{"code":"(fn [coll n]\n(loop [coll coll cnt 0 result (vec (repeat n []))]\n      (if (empty? coll)\n        (map seq result)\n        (let [idx (mod cnt n)\n              sub (conj (get result idx) (first coll))\n              r (assoc result idx sub)]\n          (recur (rest coll) (inc cnt) r)))))","problem":43,"user":"4e88feef535d8b9bb0147ca8"},{"problem":43,"code":"(fn rev-interleave [coll x]\n  (map second (group-by #(mod % x)\n                        coll)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":43,"code":"(fn rev-interleave [x y] (let [inner-rev-interleave (fn ri [x y] (if (<= (count x) y)\n                            (list (first x))\n                            (cons (first x) (ri (drop y x) y))\n                            ))]\n                            (take y (if (< (count x) y)\n                              x\n                              (cons (inner-rev-interleave x y) (rev-interleave (rest x) y))))))","user":"6093cc08e4b00e9e6653c3e1"},{"problem":43,"code":"(fn [coll sub-seq] (loop [pos (dec sub-seq)\n                           result '()]\n                      (if (< pos 0)\n                        result\n                        (recur (dec pos) (conj result (keep-indexed #(if (= (mod %1 sub-seq) pos) %2) coll))))))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"(fn de-interleave [xs n]\n  (let [len (count xs)]\n    (map (fn [step]\n           (map #(nth xs %)\n                (range step len n)))\n         (range n))))","problem":43,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn ri [col n]\n  (map (fn [s] (keep-indexed #(when (= 0 (rem (- %1 s) n)) %2) col)) (range n)))","problem":43,"user":"4ed27f9f535d44c135fd68d5"},{"code":"(fn deinterleave\n  [coll n]\n  (->>\n   (loop [out [(take n coll)]\n    tail (drop n coll)]\n     (if (seq tail)\n       (recur (conj out (take n tail)) (drop n tail))\n       out))\n   (apply map vector)))","problem":43,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":43,"code":"(fn [s n] (map #(map first %1) \n               (vals (group-by #(mod (second %1) n) \n                               (map #(vector %1 %2) s (range (count s)))))))","user":"56f18d0ce4b04a395b9a0496"},{"code":"(fn [col nelem]\n   (let [\n         the-range (range 0 (count col))\n         ]\n     (loop [last-index (dec nelem) res '()]\n       (if (>= last-index 0)\n         (recur (dec last-index)  (conj res (map #(nth col %2) col  (filter #(= last-index (mod % nelem)) the-range))))\n         res) \n       ))\n\n   \n   )","problem":43,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (map #(nth % i)\n         (partition n coll)))\n\n  )","user":"53e92f82e4b036ad0777e49d"},{"code":"#(loop [cnt %2 parts [] coll %]\n   (if (zero? cnt) \n     parts \n     (recur (dec cnt) (conj parts (take-nth %2 coll)) (rest coll))))","problem":43,"user":"52029e5de4b030ee0c5b26fc"},{"problem":43,"code":"(fn [coll num]\n  (let [halfs (partition num coll)]\n    (map \n      (fn [cur-index]\n        (map #(nth % cur-index) halfs)) \n      (range num))))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"#(apply (partial map list) (partition  %2 %1))","problem":43,"user":"4f280840e4b0d6649770a010"},{"code":"(fn [l k]\n  (loop [res []\n         s (seq l)\n         n k]\n    (if (empty? s)\n      res\n      (recur (conj res (take-nth n s)) (remove (fn [e] (some #(= e %) (take-nth n s))) s) (dec n)))))","problem":43,"user":"53820087e4b06839e8705ecf"},{"code":"#(reduce (fn [[first-elm :as acc] elm]\r\n      (conj (vec (rest acc)) (conj first-elm elm)))\r\n\t  (vec (repeat %2 []))\r\n\t  %)","problem":43,"user":"4dd6d7ee535d2dad7130b5cb"},{"code":"(fn [p n]\n  (loop [in p out (repeat n [])]\n    (if (empty? in)\n      out\n\t\t(recur (drop n in)\n               (map conj out (take n in) )))))","problem":43,"user":"4fdc3065e4b05e33b9224f6b"},{"problem":43,"code":"(fn Reverse-Interleave\n  [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"608c270ae4b03bd49d9f36b3"},{"problem":43,"code":"(fn rev-interleave\n  [arr n]\n  (let [part (partition n arr)]\n    (apply map list part)))","user":"59636b6de4b066ee0a44b0c6"},{"problem":43,"code":"(fn [l n]\n  (apply map list\n  (loop\n   [l' l\n    acc (list l)]\n   (if (empty? (drop n l'))\n    (reverse acc)\n    (recur\n     (drop n l')\n     (cons\n      (drop n l')\n      acc))))))","user":"56050f06e4b08b23635d3161"},{"problem":43,"code":"#(let [x []]\n  (loop [p (partition %2 %1)\n         acc x]\n    (if (not (every? seq p))\n      acc\n      (recur (map rest p)\n             (conj acc (map first p))))))","user":"5655d811e4b0f9d632dd849a"},{"code":"(fn [col n]\r\n  (for [i (range n)] \r\n    (for [x (range (count col)) :when (= i (rem x n))] (nth col x))))","problem":43,"user":"50bfe725e4b080409b860f26"},{"problem":43,"code":"(fn [xs i]\n  (vals (group-by #(mod % i) xs)))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":43,"code":"(fn [c n]\n\n  (letfn [(tk-nth [c n r]\n            (if (seq c)\n              (recur (nthrest c n) n (cons (first c) r))\n              (reverse r)))\n          (cc [c n]\n            (keep seq\n                  ((apply juxt (map #(fn [cc] (nthrest cc %)) (range n))) c))\n            )]\n    (map #(tk-nth % n '()) (cc c n))))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [xs q]\n    (map\n     (fn [xss n]\n       (map #(nth xss (+ n %))\n            (range 0 (count xss) q)))\n     (repeat q xs)\n     (range q)))","problem":43,"user":"50981062e4b04e098a4c7268"},{"problem":43,"code":"(fn [xs ng]\n    (apply map vector (partition ng xs)))","user":"5c17467fe4b01240ff5671df"},{"code":"(fn [seq n]\n  (letfn [(filter-by-index [f seq]\n            (map (fn [x] (first x))\n                 (filter (fn [x] (f (second x))) \n                         (map (fn [& args] args) seq (iterate inc 0)))))]\n    (loop [accu '()\n           seq seq\n           offset 0]\n      (if (= offset n)\n        (reverse accu)\n        (recur (cons\n                (filter-by-index\n                 (fn [i] (= 0 (mod i n)))\n                 seq)\n                accu)\n               (rest seq)\n               (+ offset 1))))))","problem":43,"user":"4e82c062535db62dc21a62cc"},{"problem":43,"code":"(fn [coll numgroups]\n  (partition (/ (count coll) numgroups) (apply interleave (partition numgroups coll))))","user":"5f06caa7e4b0cf489e8d7f52"},{"problem":43,"code":"(fn [coll n]\n  (->> (partition n coll)\n       (apply map (fn [& xs] xs))))","user":"60b57acee4b0e0fa5f1b4238"},{"code":"(fn [s n]\n  (map (fn [off] (apply concat (partition 1 n (drop off s)))) (range n)))","problem":43,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":43,"code":"(fn [nlst n]\n   (loop [iter 0 currlst nlst result []]\n     (if (= iter n)\n       result\n       (recur (inc iter) (rest currlst) (conj result (take-nth n currlst))))))","user":"606d75f5e4b069485764de13"},{"code":"(fn [s i] (vals (group-by #(mod % i) s)))","problem":43,"user":"4fabbb97e4b081705acca21d"},{"problem":43,"code":"(fn [col max]\n   (map\n    (fn [idx] (reduce #(conj %1 (nth %2 idx)) [] (partition max col))) (range max)))","user":"5eb3d02be4b00a66d4a95215"},{"problem":43,"code":"(fn\n  [coll n]\n  (loop [remaining-coll coll\n         remaining-its n\n         subsequences []]\n    (if (= 0 remaining-its)\n      subsequences\n      (recur (rest remaining-coll)\n             (dec remaining-its)\n             (conj subsequences\n                   (take-nth n remaining-coll))))))","user":"5ecfd429e4b016b56eae05a9"},{"code":"(fn [s x] (map #(map second %) (vals (group-by #(mod (first %) x) (map-indexed vector s)))))","problem":43,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [coll n] \n  (for [i (range n)] \n    (map #(nth % i) (partition n coll))))","problem":43,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(fn [l sep]\n(apply (partial map (fn [& l] l)) (partition sep l)))","problem":43,"user":"509c2c55e4b085ae113522ab"},{"problem":43,"code":"#(loop [r (vec (repeatedly %2 vector)) s %1 i 0]\n    (cond\n      (empty? s) r\n      (= i %2) (recur (assoc r 0 (conj (nth r 0) (first s))) (rest s) 1)\n      :else (recur (assoc r i (conj (nth r i) (first s))) (rest s) (inc i)))\n    )","user":"5f9c4113e4b0715f5002d821"},{"problem":43,"code":"(fn reverse-interleave [s n] \n  (apply map list (partition n s)))","user":"5e218bb7e4b05b4b01516123"},{"code":"(fn [l n]\n  (for [i (range n)]\n    (take-nth n (drop i l))\n    )\n  )","problem":43,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn[s n]\n  (let [len (count s)]\n    (map #(flatten (partition 1 n (take len (drop (* (inc len) %1) (cycle s))))) (range n))))","problem":43,"user":"5142e808e4b0c172af7558c9"},{"problem":43,"code":"(fn [a b] (apply map list (partition b a)))","user":"554f7ef2e4b00713264bd9a1"},{"problem":43,"code":"(fn [coll n]\n(apply map list (partition n coll)))","user":"56d6c18ee4b0ea9b8538f7d1"},{"code":"(fn lo [s n]\r\n  (let [s (partition n s)]\r\n    \r\n    (for [i (range(count (first s)))]\r\n      (for [j s]\r\n        (nth j i)))))","problem":43,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn \n  [v n]\n  (apply map (fn [& x] (remove nil? x))\n         (partition-all n v)))","problem":43,"user":"4fdf566fe4b05e33b9224f99"},{"code":"(fn [c n] (let [p (partition-all n c)]\n             (map (fn [m] (map #(nth % m) p)) (range n))))","problem":43,"user":"4eb02674535d7eef30807338"},{"problem":43,"code":"(fn [s x]\n  (->> (map-indexed #(hash-map (rem %1 x) [%2]) s)\n       (reduce (fn [a m]\n                 (merge-with (partial apply conj) a m))\n               {})\n       (into (sorted-map))\n       (vals)))","user":"55995fa7e4b031d6649c9ba9"},{"code":"(fn [l c] \n  (for [x (range c)] \n    (map #(first %)\n         (filter #(= (rem (last %) c) x)\n            (map #(list %1 %2) l (range (count l)))))))","problem":43,"user":"533ee560e4b085b17e897d98"},{"code":"(fn [xs n]\n    (loop [m (- n 1) result ()] \n      (if (>= m 0)\n         (recur (- m 1) (conj result (take-nth n (drop m xs))))\n         result)))","problem":43,"user":"53403110e4b085b17e897da6"},{"problem":43,"code":"(fn [myCol x] (let [recursor (fn recurs [out in] (if (> (count out) (count in)) out (recurs (apply list (mapv #(concat %1 (list %2)) out (take x in))) (drop x in))))] (recursor (replicate x '()) myCol)))","user":"58950f29e4b00487982d5270"},{"problem":43,"code":"(fn [l n]\n  (map\n    (fn [o] (keep-indexed #(if (= (mod %1 n) o) %2) l))\n    (range n)\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":43,"code":"(fn [a b](map #(take-nth b (drop % a))(range b)))","user":"54aa665fe4b09f271ff37cb8"},{"code":"#(apply map list (partition-all %2 %))","problem":43,"user":"4e03c616535d04ed9115e796"},{"problem":43,"code":"#(apply map list (partition-all %2 %2 %1))","user":"5576fee3e4b05c286339e078"},{"problem":43,"code":"(fn [l n]\n  (vals (group-by #(mod % n) l)))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn [coll n]\r\n    (loop [acc (vec (repeat n [])) pos 0 l-coll coll] \r\n      (if (empty? l-coll)\r\n        acc\r\n        (recur (update-in acc [(rem pos n)] conj (first l-coll)) \r\n               (inc pos) (rest l-coll)))))","problem":43,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [coll n]\n  (map \n   \t(fn [i]\n   \t\t(keep-indexed (fn [idx item] (if (= (mod idx n) 0) item)) (drop (dec i) coll)))\n  \t(range 1 (inc n))))","problem":43,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":43,"code":"(fn [s n]\n      (let [s* (partition n n s)]\n        (for [i (range n)]\n          (map #(nth %1 i) s*))))","user":"5d4c4de9e4b0776584bd6f2f"},{"problem":43,"code":"(fn [s number_seq]\n  (loop [actual s\n         count 0\n         res '()]\n    (if (= count number_seq)\n      (reverse res)\n      (recur (rest actual)\n             (inc count)\n             (conj res\n                   (take-nth number_seq actual))))))","user":"609e9b64e4b00e9e6653c426"},{"problem":43,"code":"(fn rev-int [items segments]\n    (sort-by first\n      (for [x (range 0 segments)]\n        (filter #(= (mod %1 segments) x) items))))","user":"5600bed5e4b04bb52996e170"},{"problem":43,"code":"(fn rev-interleave [s n]\n  (letfn [(at-index [v i n]\n  (let [c (count v)]\n    (for [j (range 0 (count v))\n          :when (= i (mod j n))]\n      (v j)) ) )]\n  (let [v (vec s)]\n    (for [i (range 0 n)]\n      (at-index v i n)))))","user":"5654e024e4b0f9d632dd848d"},{"code":"#( (fn wtfamidoing [coll subseqs acc n]\n       (let [r (cons (take-nth n (nthrest coll acc)) subseqs)]\n         (if (zero? acc) r\n           (wtfamidoing coll r (dec acc) n))))\n    %1 `() (dec %2) %2)","problem":43,"user":"50464831e4b011c5dfee771f"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n coll))))","user":"58aa8083e4b01a0c0b232985"},{"code":"(fn [coll x]\n  (map #(map second %)\n    (vals (group-by\n      (fn [[i _]] (mod i x)) (map-indexed list coll)))))","problem":43,"user":"4ec5a5f9535d6d7199dd36ad"},{"code":"(fn [x, c] (vals (group-by #(mod % c) x )))","problem":43,"user":"4f386f61e4b0e243712b1edc"},{"code":"#(map (fn [n] (keep-indexed (fn [index, item] (if (= n (mod index %2)) item nil)) %1)) (range %2))","problem":43,"user":"5140771ae4b076604f1aa555"},{"problem":43,"code":"(fn __ [coll n]\n  (map (partial keep-indexed #(when (= 0 (mod %1 n)) %2)) (take n (iterate rest coll))))","user":"5146f343e4b04ef915e3731e"},{"problem":43,"code":"(fn [s x]\n  (map\n   (fn [y] (keep-indexed\n            (fn [i z] (if (= y (mod i x)) z))\n            s))\n   (range x)))","user":"58254a11e4b051871117bed9"},{"code":"(fn [a b] (apply map vector (partition-all b a)))","problem":43,"user":"51d9eb05e4b02ceefd947755"},{"problem":43,"code":"(fn un-interleave [coll n]\n  (->> (map-indexed (fn [i a] [(inc i) a]) coll)\n       (group-by (fn [[i _]] (mod i n)))\n       vals\n       (map (partial map #(second %)))))","user":"5f663bc0e4b02876ed9fd02d"},{"code":"(fn [l n]\r\n  (reduce (fn [a b] (map (fn [x y] (conj x y)) a b))\r\n    (repeat [])\r\n\t  ((fn [n l m]\r\n\t     (if (empty? l)\r\n\t       m\r\n\t       (recur n (drop n l) (conj m (take n l)))))\r\n\t   n l [])))","problem":43,"user":"507437c2e4b054001656acd0"},{"problem":43,"code":"(fn [coll n]\n  (loop [result []\n         pos 0]\n    (if (< pos n)\n      (recur (conj result (take-nth n (drop pos coll))) (inc pos))\n      result)))","user":"55f5b8d6e4b06e875b46ce8d"},{"code":"(fn [s n]\n  (->> (range n)\n       (map #(drop % s))\n       (map #(take-nth n %))))","problem":43,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":43,"code":"(fn rev [xs n]\n  (for [x (range n)]\n    (take-nth n (drop x xs))))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":43,"code":"(fn [xs n]\n (->>\n (map vector (cycle (range n)) xs)\n (sort-by first)\n (partition-by first)\n (map #(map second %))))","user":"6045582fe4b02d28681c77b6"},{"problem":43,"code":"(fn [s n] \n  (->> s\n       (group-by #(mod % n))\n       vals))","user":"573a0ecce4b0cd1946bd1088"},{"problem":43,"code":"#(map (fn [x] (take-nth %2 (drop (dec x) %1))) (range 1 (inc %2)))","user":"569c40cee4b0542e1f8d1462"},{"problem":43,"code":"(fn [col n] (->> col\n                 (partition-all n)\n                 (apply interleave)\n                 (partition-all (/ (count col) n))))","user":"5da5a1eee4b000c986472c04"},{"problem":43,"code":"(fn [coll n]\n  (->> coll (group-by #(mod % n)) (vals)))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":43,"code":"(fn [l n] \n  (apply map vector (partition n l)))","user":"5ac9c737e4b0e27600da77d2"},{"problem":43,"code":"(fn [xs n]\n  (let [idx-itm (map-indexed (fn [idx itm] [idx itm]) xs)\n        groups (group-by (fn [[idx itm]] (rem idx n)) idx-itm)\n        subsequences (map #(map second %) (vals groups))]\n    subsequences))","user":"5344fe13e4b084c2834f4a32"},{"code":"(fn [s n] \n  (map seq \n   (concat \n    (vals \n     (group-by (fn [i] (rem i n)) s)))))","problem":43,"user":"516733fce4b079759a74a5e9"},{"problem":43,"code":"(fn [sq num]\n   (map\n    (partial map second)\n    (vals\n     (group-by\n      (fn [[i n]] (mod i num))\n      (map-indexed vector sq)))))","user":"54b04708e4b09f271ff37d11"},{"code":"(fn [coll n]\n\t(reduce-kv #(conj %1 (map second %3)) [] \n\t\t (group-by #(mod (first %) n) (map-indexed #(list %1 %2) coll))))","problem":43,"user":"502ade49e4b0614b52996120"},{"code":"(fn [coll n] (map seq (vals (group-by #(rem % n) coll) ) ) )","problem":43,"user":"527c4071e4b0757a1b17135a"},{"problem":43,"code":"#(->> (partition %2 %)\n      (apply map list))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":43,"code":"(fn\n  [s nb]  \n  (first\n   (reduce\n    (fn [[rez, i] el]\n      (let [index (mod i nb)\n            old-vec (get rez index)\n            new-vec (conj old-vec el)]\n        [(assoc rez index new-vec), (inc i)]))\n    [(into [] (repeat nb [])), 0] s)))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn [xs k]\n    (loop\n      [xs' xs\n       acc (repeat k [])]\n      (if (empty? xs')\n        acc\n        (recur\n          (drop k xs')\n          (vec\n            (map\n              (fn [i]\n                  (let [acc_i (nth acc i)]\n                    (if (>= i (count xs'))\n                      acc_i (conj acc_i (nth xs' i)))))\n              (range k)))))))","problem":43,"user":"508157b2e4b0946d0443855c"},{"problem":43,"code":"(fn xx [sq jump]\n  (sort-by first\n           (for [x (range jump)]\n             (filter #(= x (mod % jump)) sq))))","user":"5cada3b8e4b026601754b872"},{"code":"(fn [coll n]\n  (map (comp #(map second %) second)\n    (group-by #(mod (first %) n)\n      (map-indexed vector coll))))","problem":43,"user":"4fb1d907e4b081705acca282"},{"code":"(fn deinterlv [coll n]\n     (let [a (map #(conj nil %) (take n coll))]\n       (if (<= (count coll) n)\n         a\n        (map concat a (deinterlv (drop n coll) n))))\n)","problem":43,"user":"50ca2faee4b0a409464667dc"},{"code":"#(loop [ys %1, acc (repeat [])]\r\n    (if (empty? ys) acc\r\n      (recur (drop %2 ys) (map conj acc (take %2 ys)))))","problem":43,"user":"4dea9406535d08e6dec9fe01"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n   (take-nth n (drop i coll))))","user":"5a9181c5e4b002d099cae6f6"},{"code":"#(vals (group-by (fn[x](mod x %2))%))","problem":43,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn [lista n] (loop [temp (seq lista), cont 1, acc '()] (if (> cont n) (reverse acc)\n                  (recur (rest temp) (inc cont) (conj acc (take-nth n temp))))))","problem":43,"user":"524b1a95e4b09eba1c0223c2"},{"code":"(fn [xs n]\n  (for [i (range n)\n        :let [indices (range i (count xs) n)]]\n    (map #(nth xs %) indices)))","problem":43,"user":"510acd6ee4b078ea719210f4"},{"problem":43,"code":"(fn [x y]\n  (loop [sqnc x\n         res []]\n    (if (= y (count res))\n      res\n      (recur (rest sqnc) (conj res (take-nth y sqnc))))))","user":"5eb6561fe4b00a66d4a95233"},{"problem":43,"code":"(fn [values n] (vals (group-by #(rem % n) values)))","user":"59c22fbae4b0a024fb6ae4a3"},{"problem":43,"code":"(fn[lst n]\n  (apply map vector (partition n lst)))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn xxx [coll n]\n  (map seq (vals (group-by #(mod % n) coll))))","problem":43,"user":"5163a7bbe4b055933a9ca02f"},{"code":"(fn [c n]\n   (for [x (range n)]\n     (map #(nth % x) (partition n c))))","problem":43,"user":"506d5e4ce4b0a302964c5493"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (map #(first (drop i %1)) (partition n coll))\n    )\n  )","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn uileave [s i]                                                                                                                                           \n  (let                                                                                                                                                        \n    [mod-filter (fn [d] (fn [a] (= (mod (first a) i) d)))                                                                                                     \n     s-assoc (zipmap (range 0 (count s)) s)]                                                                                                                  \n    (map #(sort < %)                                                                                                                                          \n         (map                                                                                                                                                 \n           (fn [leaver] (vals (filter (mod-filter leaver) s-assoc)))                                                                                          \n           (range 0 i)                                                                                                                                        \n           ))                                                                                                                                                 \n         ))","problem":43,"user":"5364697ce4b0243289761e62"},{"problem":43,"code":"(fn reverse_interleave [coll n]\n   (loop [index 0\n         result []]\n    (println \"outer loop \" result index)\n    (if (= n index)\n      result\n      (recur (inc index) (conj result (loop [input coll\n                                             r []\n                                             cnt (- n index)]\n                                        (println \"innerloop \" input r cnt)\n                                        (if (empty? input)\n                                          r\n                                          (if (zero?  (mod cnt n))\n                                            (recur (rest input) (conj r (first input)) (inc cnt))\n                                            (recur (rest input) r (inc cnt))))))))))","user":"5ab490f4e4b073f17744261d"},{"problem":43,"code":"(fn reverse-interleave [coll x]\n  (for [n (range x)]\n    (map #(nth % n) (partition x coll))))","user":"57dda21be4b0bd073c202445"},{"problem":43,"code":"(fn myRev [x y] (partition (/ (count x) y) (apply interleave (partition y x))) )","user":"58e5f995e4b056aecfd47ca5"},{"problem":43,"code":"(fn  [s i]\n  (let [part-size (/ (count s) i)]\n    (->> s\n         (partition-all i)\n         (apply interleave)\n         (partition-all part-size)))\n  )","user":"551a64cde4b091ff45eda996"},{"problem":43,"code":"(fn [xs n]\n (map \n  (fn [ys] (take-nth n ys))\n  (map \n   #(drop % xs) \n   (range n))))","user":"5b673832e4b0c6492753e760"},{"code":"(fn [xs s] (apply map vector (partition s xs)))","problem":43,"user":"510e1584e4b07438aa321458"},{"problem":43,"code":"(fn [l x] (loop [res [] cnt 0 lst l ]\n            (if (= cnt x) \n              res\n              (recur (conj res (flatten (partition 1 x lst)) ) (inc cnt) (drop 1 lst) ))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":43,"code":"(fn [l n]\n  (let [l2 (map vector l (cycle (range n)))]\n    (for [i (range n)]\n      (map first (filter #(= i (last %)) l2)))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"problem":43,"code":"(fn re-interleave [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"58a2b57fe4b02bd94d917ede"},{"code":"(fn [s n]\n  (apply map vector (partition n s)))","problem":43,"user":"531d34cfe4b08068f379edac"},{"problem":43,"code":"(fn [coll n]\n   (map\n     (fn [current] (keep-indexed (fn [index val] (if (= (mod index n) current) val)) coll))\n     (range n)))","user":"54094824e4b0addc1aec66da"},{"code":"(fn [s n] (let [ p (partition n s) myx (range (count (first p)))]  (for [x myx] (map #(nth % x) p))))","problem":43,"user":"4e6e6630535d5021c1a89609"},{"problem":43,"code":"(fn [col n]\n          (for [i (range n)]\n                            (take-nth n (drop i col))))","user":"57ee46c7e4b0bfb2137f5bb3"},{"problem":43,"code":"(fn [coll n]\n    (for [i (range n)]\n      (take-nth n (drop i coll))))","user":"4e837808535db62dc21a62d9"},{"problem":43,"code":"(fn de-interleave \n   ([coll x]\n   (de-interleave coll x x))\n   ([coll x y]\n   (cond (> y 1)    \n         (conj (de-interleave (rest coll) x (dec y)) (take-nth x coll))\n         :else \n         (list (take-nth x coll)))))","user":"54d9366ce4b0a52adc2e204e"},{"code":"#(apply mapv list (partition %2 %1))","problem":43,"user":"53487737e4b084c2834f4a59"},{"code":"(fn [original_list number_of_splits]\n  (map (fn [m]\n         (remove nil? \n                 (map-indexed \n                 \t(fn [idx value]\n                        (if (= (mod idx number_of_splits) m) value)) original_list)))\n       (range number_of_splits)))","problem":43,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":43,"code":"(fn [s x]\n  (map take-nth\n       (repeat x)\n       (map drop (range x) (repeat s))))","user":"565f8fd2e4b068f2fe63dc41"},{"code":"(fn [coll n]\n  (apply map (fn [& xs] (vec xs)) (partition n coll)))","problem":43,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"(fn [coll n]\n  (vals (group-by #(mod % n) coll)))","problem":43,"user":"4fdbc075e4b05e33b9224f61"},{"problem":43,"code":"(fn rinterleave[xs n]\n  (for [i (range n)]\n    (let [p (partition-all n xs)]\n      (for [sublist p]\n        (first (drop i sublist))))))","user":"4dd76bf9535d2dad7130b5d1"},{"code":"(fn [a-seq n] (partition (quot (count a-seq) n) (apply interleave (partition n a-seq))\n))","problem":43,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn rev-inter [coll n]\n  (let [init (vec (take n (cycle [[]])))\n        fns (take n (map (fn [i] (fn [vecs e] (assoc vecs i (conj (nth vecs i) e)))) (range)))\n        length (count coll)]\n  (first (reduce (fn [[vecs fns] e] [((first fns) vecs e)(rest fns)] )\n                 [init (take length (cycle fns))]\n                 coll))))","problem":43,"user":"4f13047d535d64f60314642c"},{"problem":43,"code":"(fn rev_interleave [coll n]\n   (let [parted (partition n coll)\n         res (apply map list parted)]\n     res\n     ))","user":"5a8e9a7ae4b05369db4d2528"},{"problem":43,"code":"#(apply list (apply mapv list (partition %2 %)))","user":"538fe171e4b0b51d73faae92"},{"code":"(fn [col x]\n  (apply map vector (partition x col)))","problem":43,"user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn [seq1 n]\n    (reverse (for [i (range n)] (keep-indexed (fn [index item] (when (= 0 (mod (+ i (inc index)) n)) item)) seq1)))\n    )","problem":43,"user":"4f03f3b7535dcb61093f6b85"},{"problem":43,"code":"(fn [ col splits ]\n\t(reverse \n\t(loop [ the-coll col, cnt splits, result '() ]\n\t\t(if (= cnt 0)\n\t\t\tresult\n\t\t\t(recur\n\t\t\t\t(rest the-coll)\n\t\t\t\t(dec cnt)\n\t\t\t\t(conj result (take-nth splits the-coll) ))))))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"code":"(fn ri [x n]\n  (if (empty? x)\n  x\n  (take n (conj (ri (rest x) n) (take-nth n x)))))","problem":43,"user":"4ea1ecfa535d7eef308072bb"},{"problem":43,"code":"(fn yo\n  [coll num]\n  (map #(take-nth num (drop %1 coll)) (range num)))","user":"571d9669e4b0145328a7627f"},{"code":"(fn [coll x]\n    (map-indexed (fn [i v]\n                   (take-nth x (drop i coll))) (range x)))","problem":43,"user":"52c61564e4b0c2d177d62109"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (loop [coll-tail coll\n         result '()]\n    (if (empty? coll-tail)\n      (apply map list (reverse result))\n      (recur\n        (take-last (- (count coll-tail) n) coll-tail)\n         (conj result (take n coll-tail))))))","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":"(fn [a b]\n (map second \n  (apply merge-with concat \n    (map-indexed #(hash-map (mod % b) \n      (vector %2)) a))))","problem":43,"user":"4f0333f6535dcb61093f6a77"},{"problem":43,"code":"(fn [xs i] (apply map vector (partition i xs)))","user":"583a360de4b089d5ab817d4f"},{"problem":43,"code":"#(apply map vector (partition %2 %1))\n\n\n;; Before understanding how map works with multiple collections\n;(fn [seq n]\n;  (let [input (vec seq)\n;        length (count input)]\n;    (for [i (range n)]\n;      (map input (filter #(= i (mod % n)) (range length))))))","user":"578f9a18e4b0ebec4cfb7598"},{"code":"(fn [xs n]\n  (loop [xs xs ys (repeat n [])]\n    (if (seq xs)\n      (recur (drop n xs) (map conj ys (take n xs)))\n      ys)))","problem":43,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":43,"code":"(fn [s n] \n  (for [offset (range n)]\n    (loop [res []\n           i offset]\n      (if (< i (count s))\n        (recur (conj res (nth s i))\n               (+ i n))\n        res))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":43,"code":"(fn [xs n]\n  (for [i (range n)] (take-nth n (drop i xs))))","user":"5545eebee4b0a04f79299539"},{"problem":43,"code":"(fn [xs n]\n  (map (fn [i] (take-nth n (drop i xs))) \n       (range n)))","user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [c n] (apply (partial map list) (partition n c)))","problem":43,"user":"50f53694e4b057d4c52de881"},{"problem":43,"code":"(fn [col n]\n  (->> (partition n col)\n       (apply map #(apply list %&))))","user":"567d132ee4b05957ce8c61c3"},{"problem":43,"code":"(fn [sq n]\n  (let [psq (partition n sq)]\n    (for [i (range n)]\n       (map #(nth % i) psq)\n)))","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":43,"code":";turns out partition could have been useful here...\n(fn unzip [_seq n] \n  (loop [v _seq acc (vec (repeat n [])) pos 0] \n    (if \n      (empty? v) \n      acc \n      (recur \n        (rest v) \n        (update-in \n          acc \n          (vector (mod pos n)) \n          #(concat % (vector (first v)) )) \n        (inc pos)))))","user":"5606a4ace4b08b23635d3175"},{"problem":43,"code":"(fn rinterleave [coll n]\n  (vals (group-by #(mod % n) coll)))","user":"5aa4f7dae4b0d174b936c88c"},{"problem":43,"code":"(fn [xs n]\n (->> xs\n  (group-by #(mod % n))\n  (map val)))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":43,"code":"#(loop [a %1\n         numseqs %2 \n         count 0 \n         result {}]\n    (if (empty? a)\n        (loop [cc 0 r []]\n          (if (= cc %2)\n            r\n            (recur (inc cc) (conj r (reverse (result cc))))\n            )\n          )\n      (recur (rest a) numseqs (inc count) (assoc result (rem count numseqs) (conj (result (rem count numseqs)) (first a))))\n      )\n    )","user":"5763818ae4b0994c1922fbc7"},{"problem":43,"code":"(fn separator \n  [coll x] \n  (apply map vector (partition x coll)))","user":"542725fce4b01498b1a71b22"},{"problem":43,"code":"(fn [values number]\n  (reduce (fn [acc [value index]]\n            (assoc acc (mod index number)\n                       (concat (get acc (mod index number)) [value]))\n          )\n          (vec (repeat number '())) (map list values (range))))","user":"57e20474e4b0bfb2137f5a82"},{"problem":43,"code":"(fn [in t]\n  (loop [s in i 0 r []]\n    (let [n (+ 1 i)]\n      (if (empty? s)\n        r\n        (recur (rest s) (if (= n t) 0 n) (assoc r i (conj (get r i []) (first s))))\n      )\n    )\n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":43,"code":"(fn f\n  ([s n] (f s n []))\n  ([s n r] (if (= (count r) n) r (recur (rest s) n (conj r (take-nth n s))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [xs n]\n\t      (map (fn [i]\n\t\t     (filter #(not (nil? %))\n\t\t\t     (map-indexed #(when (= i (mod %1 n)) %2) xs))) (range n)))","problem":43,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn [coll n]\n    (apply\n      (partial map concat)\n      (partition n n (repeat nil) (partition 1 coll))))","problem":43,"user":"4e5be681535d8a8b8723a2bc"},{"problem":43,"code":"(fn [coll parts]\n    (map (fn [partno] \n           (map #(nth coll %) (range partno (count coll) parts))\n           ) (range parts))\n\n    )","user":"54cb3497e4b057c6fda3a272"},{"problem":43,"code":"(fn [coll n] (map #(take-nth n (drop % coll)) (range 0 n)))","user":"54c11fdae4b0ed20f4ff6f1b"},{"code":"(fn [l n]\n   (loop [i 0\n          items l\n          result {}]\n     (if (empty? items)\n       (reduce #(conj %1 (result %2)) [] (range n))\n       (recur (mod (inc i) n)\n              (rest items)\n              (conj result [i (conj (result i []) (first items))])))))","problem":43,"user":"4ee868be535d93acb0a6687d"},{"problem":43,"code":"(fn reverse-interleave-solution\n  [in-seq in-size] ;; update args as needed\n  ;; Write a function which reverses the interleave process into x number of subsequences.\n    (->> in-seq\n        (partition in-size)\n        (apply map list)))","user":"54df955ee4b024c67c0cf7af"},{"problem":43,"code":"(fn rev [se n]\n  (apply map list (partition n se))\n  )","user":"5820924ee4b04b46fc4b0f58"},{"problem":43,"code":"(fn [x n] \n  (loop \n   [y (dec n) res '()]\n   (let [nextres\n         (cons \n               (keep-indexed \n                #(if \n                  (= y \n                     (mod %1 n))\n                   %2)\n                x)\n               res)]\n     (if (= 0 y)\n       nextres\n       (recur (dec y) nextres)\n       )\n     )\n   )\n  )","user":"57073037e4b0b0fb43fd0689"},{"code":"(fn [coll n]\n  (let [k (quot (count coll) n)]\n    (partition-all k\n      (apply interleave\n        (partition-all n coll)))))","problem":43,"user":"4e7e032b535db169f9c796fc"},{"code":"#(for [i (range %2)] (take-nth %2 (nthnext %1 i)))","problem":43,"user":"4e4ad154535dc968683fc4d1"},{"code":"(fn [coll n]\n  (vals (group-by #(rem % n) coll)))","problem":43,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":43,"code":"(fn [coll n]\n  (vals (group-by #(mod % n) coll))\n  )","user":"537b1083e4b06839e8705e64"},{"code":"#(let [partlist (partition %2 %1)]\n  (map \n    (fn [i] (map (fn [coll] (nth coll i)) partlist))\n(range 0 %2)))","problem":43,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn rev-interleave [xs n]\n  (for [y (range n)]\n    (keep-indexed #(when (zero? (mod %1 n)) %2) (drop y xs))))","problem":43,"user":"4f0660ee535dcb61093f6c0d"},{"problem":43,"code":"(fn [xs n]\n  (let [seqs (range 1 (inc n))\n        ind (map vector xs (cycle seqs))]\n  (map (fn [x] \n         (map first\n         \t(filter #(= (second %) x) ind)))\n       seqs)))","user":"59497f51e4b07ddc2dafaddd"},{"code":"#(for [i (range %2 0 -1)]\r\n     (apply concat (partition 1 %2 (drop (- %2 i) %))))","problem":43,"user":"4f9d8083e4b0dcca54ed6d23"},{"problem":43,"code":"#(apply map list (partition-all  %2 %))","user":"56ede653e4b04a395b9a0449"},{"problem":43,"code":"(fn [lst outs]\n         (vals (sort (reduce (fn [memo elm]\n                   (let [k (mod (first elm) outs)\n                         v (second elm)]\n                     (assoc memo k (conj (get memo k []) v))\n                     )\n                   )\n                 {}\n          (map-indexed vector lst))))\n         )","user":"545b0275e4b01be26fd74648"},{"problem":43,"code":"(fn k [xs c](let[v (into [] xs)](mapcat (fn [lc] (list (map #(get v %) (range lc (count v) c)))) (range 0 c))))","user":"57752a2de4b0979f89651613"},{"code":";long solution\n;(fn [c n]\n;  (loop [res []\n;         tc c\n;         i n]\n;    (if (zero? i)\n;      res\n;      (recur (conj res (take-nth n tc))\n;             (rest tc)\n;             (dec i)))))\n;shortest from user:himself\n#(apply map list (partition %2 %1))","problem":43,"user":"517cc671e4b0bbbf1f12af0a"},{"problem":43,"code":"(fn [seq cnt] (map #(take-nth cnt (drop % seq)) (range cnt)))","user":"56018dd4e4b04bb52996e18f"},{"problem":43,"code":"(fn revInt\n  ([xs n] (revInt xs n n))\n  ([xs n c]\n\t(if (= c 0) \n        '()\n        (conj (revInt (rest xs) n (- c 1)) (take-nth n xs)))))","user":"5aa5951ae4b0d174b936c899"},{"code":"(fn nimate [xs n]\n  (let [\n    enumerated (map vector (range) xs)\n    groups (group-by #(rem (first %) n) enumerated)\n  ]\n  (map #(map second %) (vals groups))\n))","problem":43,"user":"4ff2430ae4b0678c553fc336"},{"problem":43,"code":"(fn foo\n  ([coll n]\n   (foo coll n (repeat n [])))\n  ([coll n accum]\n   (let\n     [nxt (take n coll) nxtcoll (drop n coll)]\n     (if\n       (empty? nxt)\n       accum\n       (recur nxtcoll n (map #(conj %1 %2) accum nxt))))))","user":"5747e22ce4b009280f9f2b7c"},{"code":"#(partition (quot (count %) %2) (apply interleave (partition %2 %)))","problem":43,"user":"53034738e4b0d8b024fd373e"},{"problem":43,"code":"(fn my-rev-interleave [s num]\n  (reverse (loop [index 0 remaining s result []]\n             (if (= index num)\n               result\n               (recur (inc index) (rest remaining) (cons (take-nth num remaining) result))))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"code":"(fn [coll x]\n   (loop [i 0 c coll result []]\n     (if (< i x)\n       (recur (inc i) (rest c) (conj result (take-nth x c)))\n       result)))","problem":43,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":43,"code":"(fn [nums n]\n    (sort-by first (reduce\n                     (fn [coll e] (assoc coll (mod e n) (conj (get coll (mod e n)) e)))\n                     (vec (repeat n []))\n                     nums)))","user":"5e08c3dde4b0978307768fc8"},{"problem":43,"code":"(fn [rng n] (partition (/ (count rng) n) (apply interleave (partition n rng))))","user":"5810b899e4b0f478707a05d8"},{"code":"(fn rev-interleave [s n]\n  (for [i (range 0 n)]\n    (for [j (range i (count s) n)]\n      (nth s j))))","problem":43,"user":"52ec1dfbe4b0705949c4444b"},{"problem":43,"code":"(fn [coll s]\n  (loop [i 0\n         ret (vec (repeat s []))\n         [curr & coll] coll]\n    (if (nil? curr)\n      ret\n      (let [i (mod i s)]\n        (recur (inc i)\n               (assoc ret i (-> (get ret i)\n                                (concat [curr])\n                                (vec)))\n               coll)))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":43,"code":"(fn [sq n]\n  (map reverse\n    (loop [s sq acc [] tmp (map (fn [x] '()) (range n))]\n      (if (empty? s) (if (empty? tmp) acc (apply conj acc tmp))\n        (recur (rest s)\n          (if (empty? tmp) (conj [] (conj (first acc) (first s))) (conj acc (conj (first tmp) (first s))))\n          (if (empty? tmp) (rest acc) (rest tmp))\n          )\n        )\n      )\n    )\n  )","user":"5471f2fbe4b094393f72dd70"},{"problem":43,"code":"(fn [coll step]\n  (loop [splice-coll '(), idx 0]\n    (if (< idx step)\n      (recur (concat splice-coll (list (take-nth step (drop idx coll)))) (inc idx))\n      splice-coll)))","user":"55fe7e15e4b00f4cabc57651"},{"problem":43,"code":"(fn [v n]\n  (apply map vector (partition n v)))","user":"53f7820be4b0de5c41848560"},{"problem":43,"code":"(fn [v, n] (->> v (partition n) (apply interleave) (partition (/ (count v) n))))","user":"56a38a4ce4b0542e1f8d14cc"},{"code":"(fn [xs n]\n  (loop [items xs groups 0 acc []]\n    (if (= groups n)\n      acc\n      (recur (rest items) (inc groups) (conj acc (take-nth n items))))))","problem":43,"user":"4f2e0369e4b0d6649770a064"},{"problem":43,"code":"(fn revinterleave\n  [xs y]\n  (let [parted (partition y xs)]\n    (loop [acc '() x 0]\n      (if (= x y)\n        acc\n        (recur (concat acc [(map #(nth % x) parted)]) (inc x))))))","user":"55640c62e4b0c656e3ff17fd"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (map #(first (apply map vector %))\n       (partition (/ (count s) n) (sort-by second (mapv #(vector %2 %1) (cycle (range n)) s)))))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":43,"code":"(fn [col n]\n  (reduce (fn [c idx] (conj c (take-nth n (drop idx col)))) [] (range n)))","user":"5a9ac061e4b0d174b936c7c1"},{"code":"(fn [s n]\r\n (reduce \r\n   (fn[v [x p]]\r\n     (assoc v p (conj (get v p) x)))\r\n   (vec (repeat n []))\r\n   (map #(identity [%1 %2]) s (cycle (range n)))))","problem":43,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn [xs n]\n  (->> (partition n xs)\n       (apply map list)))","problem":43,"user":"51269362e4b083bb8f88cf09"},{"problem":43,"code":"(fn [x n]\n  (loop [m (first x), res []]\n    (if (>\n         (+ n (first x))\n         m)\n      (recur (inc m)\n             (conj res (filter #(= (mod m n)\n                                   (mod % n))\n                               x)))\n      res)))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"(fn [col n]\n   (apply map list (partition n col))  \n )","problem":43,"user":"5094057fe4b097f48cc38593"},{"problem":43,"code":"(fn reverse-interleave [col n]\n  (for [i (range n)]\n    (apply concat (partition 1 n (drop i col)))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":43,"code":"(fn\n  [in n]\n  (let [xs (into [] in)\n        grpsz (/ (count in) n)]\n    (for [i (range n)]\n      (for [j (range grpsz)]\n        (nth xs (+ i (* j n)))))))","user":"597d0e43e4b0dbe32238d095"},{"problem":43,"code":"(fn [xs n] (map val (group-by #(mod % n) xs)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":43,"code":"(fn [coll a] \n  (map #(take-nth a (drop % coll)) (range 0 a))\n)","user":"55f2c898e4b06e875b46ce4b"},{"problem":43,"code":"#((fn revit1[lis m c]\n    (if (zero? c) nil\n      (cons (take-nth %2 lis) \n            (revit1 (rest lis) m (dec c))))) % %2 %2)","user":"5627444fe4b00e49c7cb47cd"},{"problem":43,"code":"(fn  [sq p]    \n         (let [part (partition-all p sq)] \n             (for [i  (range 0  p)]\n\t\t     (map #(nth % i) part))))","user":"581a5fdbe4b0e114eb51a002"},{"code":"#(for [n (range %2)]\n    (take-nth %2 (drop n %)))","problem":43,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"(fn [collection number] (map (fn [x] (take-nth number (drop x collection))) (range number)))","problem":43,"user":"52eee533e4b05e3f0be25ecb"},{"problem":43,"code":"; bad original solution using update-in to build up\n; (fn [xs n]\n;   (reduce\n;     (fn [res xpair]\n;       (update-in\n;         res \n;        [(mod (second xpair) n)]\n;        (fn [x] (conj x (first xpair)))))\n;     (vec (take n (repeat [])))\n;     (->> xs count range (map vector xs))))\n\n; better soution - use partition\n\n(fn [xs n] (apply map list (partition n xs)))","user":"541e2ff8e4b01498b1a71a8a"},{"code":"(fn [s n] (map reverse (reverse (for [[i v] (reduce (fn [m [i v]] (assoc m i (conj (get m i ()) v))) {} (map vector (cycle (range n)) s))] v))))","problem":43,"user":"52be5d55e4b07a9af579231e"},{"code":"(fn [i-list n]\r\n    (let [pos-list (apply hash-map (interleave (range (count i-list)) i-list))]\r\n        (map\r\n            (fn [index]\r\n                (reduce\r\n                    (fn [result position]\r\n                        (if (= index (rem position n)) (conj result (get pos-list position)) result))\r\n                    []\r\n                    (range (count i-list))))\r\n            (range n))\r\n    ))","problem":43,"user":"4dddf817535d08e6dec9fdd3"},{"problem":43,"code":"(fn __ [s n] (partition (/ (count s) n)(apply interleave (partition n s))))","user":"5be2e670e4b0ed4b8aab4ccc"},{"code":"(fn [coll n] (vals (group-by #(rem (.indexOf coll %) n) coll)))","problem":43,"user":"4f1e4ab5535d64f603146496"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (map (fn [x] (map second x)) (vals (group-by #(mod (first %) n) (map list (range) xs)))))","user":"569ad037e4b0542e1f8d144f"},{"problem":43,"code":"(fn reverse-interpose\n  [coll n]\n  (map #(map last %) (partition-by\n                      #(first %)\n                      (sort-by #(nth % 0)\n                               (keep-indexed #(list (mod % n) %2) coll)))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"(fn [input divide](let[n(partition divide input)] (for[x (range divide)] (do(for[y (range(count n)) :let[z (nth n y)]] (nth z x))))))","problem":43,"user":"5294b190e4b02ebb4ef75011"},{"code":"(fn [coll n]\n  (reduce \n    (fn [sub-seqs, next-v]\n      (conj (subvec sub-seqs 1) (conj (first sub-seqs) next-v))) \n\t(nth (iterate #(conj % []) []) n) \n\tcoll))","problem":43,"user":"52463059e4b09dbe66b56198"},{"problem":43,"code":"(fn [s n] (loop [sq s\n                  put_place (take (count s) (cycle (range n)))\n                  out (vec (take n (repeat [])))]\n             (if (empty? put_place)\n               out\n               (let [this_put (first put_place)\n                     this_sq (first sq)]\n                 (recur (rest sq)\n                        (rest put_place)\n                        (assoc out this_put (conj (nth out this_put) this_sq))\n                        )\n                 )\n               )\n             )\n   )","user":"565233f2e4b0f9d632dd8461"},{"code":"(fn [xs n]\r\n  (first (reduce (fn [[buckets i] x]\r\n                   [(update-in buckets [i] #(conj % x))\r\n                    (mod (inc i) n)])\r\n                 [(vec (repeat n [])) 0]\r\n                 xs)))","problem":43,"user":"4e8681b7535dae1a5effa438"},{"problem":43,"code":"(fn [coll n]\n  (let [groups (vec (repeat n []))]\n    (loop [groups groups coll coll n n i 0]\n      (if (empty? coll)\n        groups \n        (let [pos (mod i n)\n              group (groups pos)\n              new-group (conj group (first coll))\n              new-groups (assoc groups pos new-group)]\n          (recur new-groups (rest coll) n (inc i)))))))","user":"54d000c7e4b018d918be98d7"},{"problem":43,"code":"(fn [coll n] \n  (let [parts (/ (count coll) n)]\n    (loop [times n\n           rs []\n           col coll]\n      (if (= times 0)\n        rs\n        (recur\n         (dec times)\n         (conj rs (take-nth n col))\n         (rest col))))))","user":"5b37a3b4e4b02d533a91bba9"},{"problem":43,"code":"(fn [l x]\n\n  (for [ n (range x)\n         ]\n        (for [ [m r] (mapv vector (range) l) \n               :let [z (rem m x)]\n               :when (= z n)\n              ] \n              r)\n         ))","user":"55c49394e4b0e31453f6499e"},{"code":"#(loop [li %1 n %2 result []]\n   (let [ct (count result)]\n     (if (= ct n)\n       result\n   \t   (recur li n (conj result (mapcat (fn [x] (vector (nth x ct))) (partition n li)))))))","problem":43,"user":"512d3304e4b040332b905b2d"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"5ab23c99e4b073f1774425e2"},{"code":"(fn [x y]\n  (letfn[(bar [coll modnum number]\n              (if (>= number modnum) '()\n                (concat (list (foo coll modnum number 0 (count coll)))\n                        (bar coll modnum (inc number)))))\n         (foo [coll modnum number start end]\n              (if (>= start end) '()\n                (if (= number (mod start modnum)) \n                  (concat (list (first coll)) (foo (rest coll) modnum number (inc start) end))\n                  (foo (rest coll) modnum number (inc start) end))))]\n    (if (<= y 1) x\n      (bar x y 0))))","problem":43,"user":"5078300de4b0fc74642bff66"},{"code":"(fn [coll n]\r\n  (let [mapped (map list (cycle (range n)) coll)]\r\n    (map (fn [i] (apply list (map last (filter #(= (first %) i) mapped)))) (range n))))","problem":43,"user":"4df407c3535d08e6dec9fe2e"},{"problem":43,"code":"(fn [coll n]\n  (loop [col (partition n coll)\n         acc []]\n    (if (empty? (first col))\n      \tacc\n      \t(recur (map rest col)\n               (conj acc (map first col))\n               ))))","user":"5923554ee4b0a390037439f2"},{"code":"(fn [l i] (vals (group-by #(rem % i) l)))","problem":43,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"#(for [x (range %2)] \n   (map (fn [[a b]] b) \n     (filter \n       (fn [[i y]] (= (mod i %2) x)) \n         (map-indexed vector %))))","problem":43,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":43,"code":"(fn f [coll n]\n   (reduce (fn [ret [k v]]\n             (assoc-in ret [(mod k n) (quot k n)] v))\n     (vec (repeat n (vec (repeat (quot (count coll) n) nil))))\n     (map vec (zipmap (range) coll))))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn a [col n] (let [each (quot (count col)(quot (count col) n))](for [i (range 0 n)] (take-nth each (drop i col)))))","problem":43,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"#(apply map (cons (fn [& l] l) (partition %2 %1)))","problem":43,"user":"52593207e4b0cb4875a45cd3"},{"problem":43,"code":"(fn [coll n]\n  (letfn \n   \t[(mod-n [] #(mod % n))] \n    (sort-by #(.indexOf coll (first %)) \n             (partition-by (mod-n) \n                           (sort-by (mod-n) coll)))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn [s c] (apply map vector (partition c s)))","problem":43,"user":"4e8768f6535dceadca469850"},{"problem":43,"code":"(fn [coll n] (take n (map #(take-nth n %) (iterate rest coll))))","user":"543c5200e4b032a45b86933e"},{"code":"(fn [l c]\n  (apply map list (partition-all c l)))","problem":43,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [s n]\n  (first\n    (reduce\n      (fn [[ret [i & r]] x] \n        [(assoc ret i (conj (ret i) x)) r])\n      [(vec (repeat n [])) (cycle (range n))]\n      s)))","problem":43,"user":"4f050dec535dcb61093f6bef"},{"problem":43,"code":"(fn sp[sx n] (partition (/ (count sx) n) (apply interleave (partition n sx))))","user":"596f6683e4b069c0a1a19877"},{"problem":43,"code":"(fn [x, n]\n  (loop [cx x, nx (vec (repeat n [])), i 0]\n      (if (empty? cx)\n      (seq (map seq nx))\n      (if (= i (- n 1))\n        (recur (rest cx) (assoc nx i (conj (nth nx i) (first cx))) 0)\n        (recur (rest cx) (assoc nx i (conj (nth nx i) (first cx))) (inc i))\n       )\n     )\n    )\n  )","user":"588fb3a7e4b00487982d51b9"},{"code":"(fn [coll x]\n  (let [size (/ (count coll) x)]\n    (partition size\n               (map second\n                    (sort-by #(mod (first %) x)\n                             (map-indexed vector coll))))))","problem":43,"user":"5317d78ee4b08068f379ed63"},{"code":"(fn [s x] \n  (reduce (partial map conj) \n          (repeat x []) \n          (partition x s)))","problem":43,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [s n]\n       (letfn [(f [s]\n                  (reduce #(loop [s %1 t %2 x '()]\n                              (if (empty? s) (reverse x)\n                                (recur (rest s) (rest t) (cons (reverse (conj (if (seq? (first s)) (reverse (first s)) (list (first s)) ) (first t))) x))))\n                    s))\n               (g [s n]\n                  (loop [s s i 0  y '() x '()]\n                    (if (empty? s) (reverse (cons (reverse y) x))\n                      (if (= i n)\n                        (recur (rest s) 1 (list (first s)) (cons (reverse y) x))\n                        (recur (rest s) (inc i) (cons (first s) y) x)))))]\n          (f (g s n)))\n    )","problem":43,"user":"5029fccee4b023940c84aa47"},{"problem":43,"code":"(fn [s n]\n  (let [c (/ (count s) n)]\n     (partition c (apply interleave (partition n s)))))","user":"4df9c598535d04ed9115e77a"},{"problem":43,"code":"(fn [s n]\n  (let [filtr-n (fn filtr-n [coll n]\n  \t\t\t\t  (loop [acc []\n         \t\t\t\t coll coll]\n    \t\t\t\t(if (seq coll)\n      \t\t\t\t  (recur (conj acc (first coll)) (drop n coll))\n     \t\t\t\t  acc)))]\n  (for [i (range 0 n)]\n    (filtr-n (drop i s) n))))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [s n]\n  (apply map #(apply conj [] %&) (partition n s)))","problem":43,"user":"4e80d71b535db62dc21a62b7"},{"code":"(fn f [l n]\n  (if (= '() l)\n      (repeat n '())\n      (map cons (take n l) (f (drop n l) n))))","problem":43,"user":"50b668dde4b08fb537db98f2"},{"problem":43,"code":"(fn [v n]\n  (vals (group-by #(rem % n) v)))","user":"55e732c5e4b050e68259b492"},{"code":"(fn [x n]\n       (if (not (vector? x))\n       (loop [res (), k (- n 1)]\n   (cond (< k 0) res ;(if (list? x) (reverse res)  res)\n\t       :else (recur (conj res (filter #(= k (mod % n)) x)) (dec k))))\n       (loop [res (), k 0]\n\t (cond (>= k n) res ;(if (list? x) (reverse res)  res)\n\t       :else (recur (conj res (filter #(= k (mod % n)) x)) (inc k))))))","problem":43,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn [s n]\n  (loop [ps (partition n s)\n         rs (repeat n [])]\n    (if (not (seq ps))\n      rs\n      (recur (next ps)\n             (map conj rs (first ps))))))","problem":43,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":43,"code":"(fn f [col n]\n  (loop [target [] source (partition n col)]\n    (if (some empty? source)\n      target\n      (recur \n       (conj target (map first source))\n       (map rest source)))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"(fn [in idx]\n  (map (partial \n    (fn [s n t]\n     (map second (filter\n      (fn [[x y]]\n        (= (mod x n) t))\n       ((fn [w] (map-indexed vector w)) s)\n      )\n     )\n    ) in idx\n  ) (range idx)\n  )\n)","problem":43,"user":"4f00f997535dcb61093f6a34"},{"code":"(fn [coll col-count]\n  (map\n    (fn [column]\n      (keep-indexed #(\n        when (= column (mod %1 col-count)) %2)\n        coll))\n    (range col-count)))","problem":43,"user":"4ee259a1535d10e5ff6f5366"},{"code":"(fn [col s]\n    (reduce #(map (fn [v va] (conj v va)) %1 %2) (repeat s (vector)) (partition s col)))","problem":43,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn [vals, n]\n    (loop [l vals, i 0, ret (vec (repeat n [])) ]\n        (if (= '() l)\n            ret\n            (recur (rest l) \n                (if (= (dec n) i) 0 (inc i))\n                (assoc ret i \n                    (conj (nth ret i) (first l)) )))))","problem":43,"user":"4f2965ffe4b0d6649770a029"},{"problem":43,"code":"(fn reverse-int [A, n] (\n                        map (fn reverse-int-select [i] (\n                                                        map #(nth A (+ i (* % n))) (range (int (/ (count A) n)))\n                                                       )\n                             )\n                        (range n)\n                        )\n  )","user":"550cbb3be4b06e50f9beb155"},{"code":"(fn [coll n]\n  (let [parts (partition n coll)]\n    (loop [rems parts, out []]\n      (if (seq (first rems))\n          (recur (map rest rems) (conj out (map first rems)))\n           out))))","problem":43,"user":"505aa653e4b021387fb89857"},{"code":"(fn [l n] (let [sections (partition n l)\n                size (count (nth sections 0))]\n            (reduce (fn [c i] (conj c (map #(nth % i) sections))) [] (range size))))","problem":43,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [coll parts]\n  (->> (partition parts coll)\n       (apply map list)))","problem":43,"user":"4e6dd51b535d5021c1a895f6"},{"code":"(fn [vc num] \n  (map #(filter (fn [x] (= (mod x num) %)) vc ) (if (even? num) (reverse (range num)) (range num))))","problem":43,"user":"4e8b73e4535d65386fec2120"},{"problem":43,"code":"(fn reverse-interleave [a-seq n]\n  (loop [m (dec n) b-seq a-seq res '()]\n    (if (< m 0)\n      res\n      (recur (dec m) b-seq (conj res ((fn take-every-k [s k]\n    (loop [s s k k result '()]\n      (if (empty? s)\n        (reverse result)\n        (recur (drop k s) k (conj result (first s)))))) (drop m b-seq) n))))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":43,"code":"(fn [coll x]\n   ((fn go [res n]\n      (if (> n x)\n        res\n        (go (conj res\n                  (keep-indexed (fn [i e]\n                                  (if (or (= (mod (inc i) x) n)\n                                          (and (= x n) (= (mod (inc i) x) 0)))\n                                    e))\n                                coll))\n            (inc n))))\n    []\n    1))","user":"55860905e4b001b0851d7516"},{"code":"(fn [s n]\n  (loop [s s\n         result []\n         i 0]\n    (if (= i n)\n      result\n      (recur (rest s)\n             (conj result (take-nth n s))\n             (inc i)))))","problem":43,"user":"50b67515e4b08fb537db98f3"},{"problem":43,"code":"(fn xileave [x n]\n  (loop [ cnt 0, elms x, acc '() ]\n    (if (= cnt n)\n      (reverse acc)\n    (recur (+ 1 cnt)\n           (rest elms)\n           (conj acc (take-nth n elms))))))","user":"564cc055e4b0284900eef676"},{"code":"#(for [ i (range %2)]\n     (take-nth %2 (drop i %)))","problem":43,"user":"512f06c5e4b0762be4c7aad7"},{"problem":43,"code":"(fn reverse-interleave [coll part]\n   (for [i (range part)]\n        (take-nth part (drop i coll))))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn [s n]\n    (for [i (range n)]\n      (keep-indexed #(when (zero? (mod %1 n)) %2) (nthnext s i))))","problem":43,"user":"4ef667c4535dced4c769f24c"},{"problem":43,"code":"(fn __ [coll n]\r\n  (loop [res   (repeat n (vector))\r\n         coll' coll]\r\n    (if (not-empty coll')\r\n      (recur (let [cs (take n coll')]\r\n               (map-indexed\r\n                 (fn [i c]\r\n                   (conj (nth res i) c)) cs))\r\n             (drop n coll'))\r\n      res)))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (map\n   #(apply concat\n           (partition 1 n (drop % s)))\n   (range n)))","user":"59f78b49e4b0ca45a743a30e"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (loop [coll coll\n         colls (take n (repeat []))]\n    (if (empty? coll)\n      (reverse colls)\n      (->> (first coll)\n           (conj (last colls))\n           (conj colls)\n           drop-last\n           (recur (rest coll))))))","user":"5984e7dee4b021a7a535fe43"},{"code":"(partial (fn ! [xss xs n]\n  \t(if (> n 0)\n\t\t  (let [col (keep-indexed (fn [i x]\n\t\t\t\t\t    (if (= 0 (mod (+ i 0)\n\t\t\t\t\t\t\t  n))\n\t\t\t\t\t      x\n\t\t\t\t\t      nil))\n\t\t\t\t\t  xs)\n\t\t\trest (keep-indexed (fn [i x]\n\t\t\t\t\t     (if (not (= 0 (mod (+ i 0)\n\t\t\t\t\t\t\t\tn)))\n\t\t\t\t\t       x\n\t\t\t\t\t       nil))\n\t\t\t\t\t   xs)]\n\t\t    (recur (conj xss col) rest (dec n)))\n\t\t  xss)) [])","problem":43,"user":"4ec6157b535d6d7199dd36c2"},{"problem":43,"code":";(fn revint [coll n]  (vals (apply merge-with #(conj (if (coll? %1) %1 (vector %1)) %2) (map-indexed #(hash-map (mod %1 n) %2) coll))))\n#(apply map vector (partition %2 %1))","user":"55647a31e4b0c656e3ff1808"},{"problem":43,"code":"(fn\n  [coll, n]\n  (loop [i   0\n         c   coll\n         res []]\n    (if (= i n)\n      (seq res)\n      (recur (inc i)\n             (drop 1 c)\n             (conj res (take-nth n c))\n      )\n    )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":43,"code":"(fn [xs n]\n  (map \n    #(map second %)\n    (vals (group-by #(mod (first %) n) (map vector (range) xs)))\n  )\n)","user":"543bb568e4b032a45b869334"},{"code":"(fn [c1 n]\n  (apply map list\n    (partition n c1)\n  )\n)","problem":43,"user":"4e570f47535d8a8b8723a287"},{"problem":43,"code":"(fn [coll n]\n   (-> (group-by #(mod % n) coll)\n     vals))","user":"51bd255ce4b0df1216cefd94"},{"problem":43,"code":"(fn prob43b [s n]\n  (let [m (apply merge-with concat \n                 (map (fn [i] {(rem i n) [(nth s i)]}) (range (count s))))]\n    (map #(get m %) (range n))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":43,"code":"(fn [the-list size]\n   (map #(flatten (partition 1 size nil (drop % the-list))) (range size)))","user":"5b15e881e4b0cc2b61a3be75"},{"problem":43,"code":"#(apply map (fn [& args] args) (partition %2 %))","user":"5a6af090e4b0512ff01cda2d"},{"code":"#(partition (/ (count %1) %2) (apply interleave (map vec (partition %2 %1))))","problem":43,"user":"5084c43be4b0fb8f40674bfa"},{"problem":43,"code":"(fn [coll orig-num-seqs]\n  (partition (/ (count coll) orig-num-seqs)\n             (map second (sort (map-indexed \n                                 #(vector (mod %1 orig-num-seqs) %2) \n                                 coll)))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"(fn deinter [col n] \n  \t(map           \n\t\t\t(fn [x] (take-nth n (drop x col)))            \n\t\t\t(range n)\n\t\t)\n\t)","problem":43,"user":"4f3bfce2e4b0e243712b1f38"},{"problem":43,"code":"(fn [x y] \n  (loop [c 0 v 0 b 0 t '() p '()]\n    (if (= c (+ (- y 1) (count x)))\n      (reverse (conj p (reverse t)))\n      (recur\n       (inc c)\n       (if (<= (count x) v)\n         (inc b)\n         (+ v y))\n       (if (<= (count x) v)\n         (inc b)\n         b)\n       (if (<= (count x) v)\n         '()\n         (conj t (nth x v)))\n       (if (<= (count x) v)\n         (conj p (reverse t))\n         p)\n        )\n      )\n    )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"code":"(fn [inlist numoutlist]\n  (for [i (range numoutlist)]\n    (take-nth numoutlist (drop i inlist))))","problem":43,"user":"53150a4de4b08068f379ed22"},{"code":"#(map (fn [l] (map second l)) (vals (group-by (fn [l](mod (first l) %2)) (map-indexed list %))))","problem":43,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn rev-interleave [coll n]\n  (for [i (range n)]\n    (take-nth n (nthnext coll i))))","problem":43,"user":"4ee8b9c9535d93acb0a66884"},{"problem":43,"code":"(fn reverse_interleave [s stride]\n  (loop [result '() input s remaining stride]\n   (if (= remaining 0)\n    (reverse result)\n    (recur (conj result (take-nth stride input)) (rest input) (dec remaining)))))","user":"57501de0e4b02ea11479926c"},{"code":"(fn [l n] (apply map vector (partition n l)))","problem":43,"user":"5301a13ae4b0d8b024fd371e"},{"code":"(fn [s n] (map val (group-by #(mod % n) s)))","problem":43,"user":"4fab31a8e4b081705acca215"},{"problem":43,"code":"(fn [ls n]\n  (map (fn [f] (map second (filter f (map list (range) ls))))\n       (map (fn [m] (fn [[idx _]] (= m (mod idx n)))) (range n))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":43,"code":";; first solution\n;(fn f [coll n] \n;  (map \n;   #(take-nth n (drop % coll)) \n;   (range n)))\n#(apply map list (partition %2 %1))","user":"573118ebe4b0cd1946bd0fbd"},{"problem":43,"code":"#(apply map list  (partition %2 %1))","user":"55c1eb52e4b0e31453f64970"},{"code":"(fn [c n] (apply map list (partition-all n c)))","problem":43,"user":"4e6ea1f5535d5021c1a8960e"},{"code":"#(for [i (range %2) \n  :let [y (for [j (range (count %1)) :when (= (mod j %2) i)] (nth %1 j))]] y)","problem":43,"user":"4fb4303fe4b081705acca2ac"},{"problem":43,"code":"(fn [coll n]\n   (for [x (range n)]\n     (take-nth n (drop x coll))))","user":"554bd33ce4b0a04f7929959a"},{"code":"(comp (partial apply map list) #(partition %2 %1))","problem":43,"user":"51281b25e4b03a34742b4304"},{"problem":43,"code":"(fn [s n] (map (comp reverse #(into () %)) (map second (group-by #(rem % n) s))))","user":"54290a64e4b01498b1a71b36"},{"code":"(fn [se grp]\n (let [nels (int (/ (count se) grp))]\n  (for [i (range grp)]\n   (for [j (range nels)\n         :let [x (+ (* j grp) i)]]\n    (nth se x)))))","problem":43,"user":"52747090e4b03e8d9a4a74a5"},{"problem":43,"code":"(fn [s n]\n  (map\n   #(take-nth n (drop % s))\n   (range n)))","user":"540e0637e4b0addc1aec6717"},{"code":"(fn [s n] (vals (group-by #(mod (.indexOf s %) n) s)))","problem":43,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":43,"code":"#(reduce (partial map conj) (repeat %2 []) (partition %2 %1))","user":"59074b7ce4b047aa04b19951"},{"problem":43,"code":"(fn [v n]\n   (let [t []]\n     (for [i (range n)]\n       (loop [x i\n              r []]\n         (if (<= (count v) x)\n           r\n           (recur (+ x n)\n                  (conj r (nth v x)))))\n       )))","user":"56171eade4b06b1bb2182a0c"},{"problem":43,"code":"#(map (partial take-nth %2)\n      (take %2\n            (iterate (partial drop 1) %)))","user":"506ba58be4b0eda3100c090b"},{"problem":43,"code":"(fn [coll wedge]\n  (apply map list (partition wedge coll)))","user":"56481722e4b0284900eef628"},{"problem":43,"code":"(fn [s n]\n  (reduce\n  (fn [m [i e]]\n   (update-in m [(mod i n)]\n    (fn [x] (conj x e)))\n  )\n  (vec (repeat n []))\n  (map-indexed vector s))\n\n)","user":"552d2e4fe4b076ab5578f7e1"},{"problem":43,"code":"(fn [xs n] (->> xs (map list (cycle (range n))) \n         \t\t   (group-by first) \n         \t\t   (map second)\n                   (map #(map second %))))","user":"556f35fee4b09a3098a5251a"},{"code":"(fn [c i] \n    (->> c \n        (map-indexed vector) \n        (group-by #(mod (first %) i)) \n        vals \n        (map #(map second %))))","problem":43,"user":"5046ee3ee4b03b02161376b4"},{"problem":43,"code":"(fn [coll n]\n  (partition-all (/ (count coll) n) \n                 (apply interleave (map #(first %&)\n                                        (partition-all n coll)))))","user":"53ab94cae4b047364c044450"},{"problem":43,"code":"(fn [coll n]\n  (loop [res (repeat n [])\n         coll coll]\n    (if (< (count coll) n)\n      res\n      (recur (for [i (range n)]\n               (conj (nth res i) (nth coll i)))\n             (drop n coll)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":43,"code":"(fn [s n] \n (let [indexed (map #(vector %1 %2) s (range (count s))) ]\n  (loop [ m   0\n          res [] ]\n    (if (= m n)\n      res\n      (recur (inc m)\n         (conj res\n           (map first\n  (filter #(= \n      (mod (second %) n) m) \n      indexed))))))))","user":"574e7be7e4b02ea114799242"},{"problem":43,"code":"(fn reverse-interleave\n  [coll x]\n  (partition (/ (count coll) x) (apply interleave (partition x coll))))","user":"5594e0e3e4b0c79f6e1db95b"},{"problem":43,"code":"(fn [coll n]\n  (apply\n   map\n   list\n   (partition n coll)))","user":"5d9aeae5e4b0d3f9b434ad4a"},{"problem":43,"code":"(fn [xs n]\n  (let [parts (partition n xs)]\n    (for [i (range n)]\n      (map #(nth % i) parts))))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn [coll n] (partition (/ (count coll) n) (for [point (range n) off (range (/ (count coll) n))] (nth coll (+ point (* n off))))))","problem":43,"user":"4f2d4d4ce4b0d6649770a058"},{"problem":43,"code":"#(partition (/ (count %1) \n               %2) \n            (apply interleave (partition %2 %1)))","user":"57c45e64e4b05aa3c4741ccf"},{"problem":43,"code":"(fn deinterleave [s, n]\n  (if (empty? s)\n    (repeat n '())\n    (map-indexed #(cons (nth s %1) %2) (deinterleave (nthrest s n) n))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"#(partition-all (/ (count %1) %2) (apply interleave (partition %2 %1)))","problem":43,"user":"532a111ee4b09d4e7a9b5520"},{"problem":43,"code":"(fn [s n]\n  (partition (quot (count s) n) (for [x (range n)\n        y (map #(second %) (filter #(= (first %) x) (map #(vector %2 %1) s (cycle (range n)))))]\n    y)))","user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [s n] \n  (partition (/ (count s) n)\n(apply interleave (partition n s))))","problem":43,"user":"4dbdc9da535d020aff1edf4c"},{"problem":43,"code":"(fn [v n]\n  (map (fn [x] (#(map (partial nth v) (range x (count v) n)))) (range 0 n)))","user":"55e1fc42e4b050e68259b424"},{"problem":43,"code":"(fn rev-interleave [coll nc]\n\t(let [part (quot (count coll) nc)]\n\t\t(->> coll\n\t\t\t (partition nc)\n\t\t\t (apply interleave)\n\t\t\t (partition part))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn [s n]\n  (map (fn [i]\n        (map (vec s) (filter #(= i (mod % n)) (range (count s)))))\n       (range n)))","problem":43,"user":"50bb646de4b03e68e4411ca3"},{"code":"#(apply (partial map list ) (partition %2 %1))","problem":43,"user":"52bf6946e4b07a9af5792334"},{"code":"(fn [c n] (reverse \r\n  \t\t   (loop [rslt '()\r\n\t\t\t          coll c\r\n\t\t\t          cnt n]\r\n\t\t\t    (if (zero? cnt)\r\n\t\t\t \trslt\r\n\t\t\t\t(recur (cons (apply concat (partition 1 n coll)) rslt)\r\n\t\t\t\t       (rest coll)\r\n\t\t\t\t       (dec cnt))))))","problem":43,"user":"4ff8a89de4b0678c553fc39d"},{"problem":43,"code":"(fn [coll grp]\n  (vals (group-by #(rem % grp) coll)))","user":"5e724492e4b085ba37836dc7"},{"problem":43,"code":"(fn [coll x]\n  (let [order (flatten (map #(range % (count coll) x) (range x)))]\n    (partition (/ (count coll) x) (map #(nth coll %) order))))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":43,"code":"#(for [i (range %2)]\n   (take-nth %2 (drop i %1)))\n\n#_(defn ri [a b]\n     (println \n    \n    (partition (/(count a) b)\n    (apply interleave (partition b a)))))","user":"52faf67ce4b047fd55837005"},{"problem":43,"code":"(fn f [coll n] \n  (reduce-kv \n   (fn [groups index x] \n     (let [group-index (mod index n)]\n          (assoc groups group-index (conj (groups group-index) x))))\n   (vec (repeat n []))\n   (vec coll)))","user":"5493d908e4b0b312c081ff52"},{"problem":43,"code":"(fn reverse-interleave [l n]\n    (reverse (reduce (fn [acc v] (map cons v acc)) (repeat n []) (partition n (reverse l)))))","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn [sequence index] \n  (map (partial take-nth index) (map (fn [n] (drop n sequence)) (range index))))","problem":43,"user":"520f46f9e4b0101e4be6fcee"},{"problem":43,"code":"(fn [xs n] (let [parts (partition-all n xs)] (map (fn [i] (map #(nth % i) parts)) (range n))))","user":"563e1c0ee4b0da801c4e4665"},{"problem":43,"code":"(fn reverse-interleave [x n]\n  (partition (/ (count x) n)\n             (map second\n                  (mapcat second\n                          (group-by #(rem (first %) n)\n                                    (map-indexed vector x))))))","user":"59e8a952e4b0249b72820733"},{"problem":43,"code":"(fn rev-interleave [s n]\n   (loop [s s res (repeat n [])]\n     (if (empty? s)\n       res\n       (let [res (map-indexed\n                  (fn [idx i]\n                    (conj i (nth s idx))) res)]\n         (recur (drop n s) res)))))","user":"56012cd7e4b04bb52996e17d"},{"code":"(fn [l x]\n  (apply map list (partition x l)))","problem":43,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn revinter [x y]\n  (loop [x x count 0 outer 0 res (into [] (repeat y '[]))]\n    (cond (empty? x) res\n          (= count (- y 1)) \n              (recur (rest x) 0 (+ outer 1) (assoc-in res [count outer] (first x)))\n          :else \n              (recur (rest x) (+ count 1) outer (assoc-in res [count outer] (first x)))\n    )\n  )\n)","problem":43,"user":"50588af1e4b06522596eba7d"},{"problem":43,"code":"; (map list '(1) '(2) '(3)) -> '('(1 2 3))\n(fn detangle [xs n] (apply map list (partition n xs)))","user":"56175cf9e4b06b1bb2182a0f"},{"code":"(fn [coll n] (apply map list (partition-all n coll)))","problem":43,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":43,"code":"(fn rev-int [coll n]\n  (map #(take-nth n (drop % %2)) (range n) (iterate identity coll)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":43,"code":"(fn [s n]\n    (letfn [(nths [s offset]\n              (letfn [(hf [result i s]\n                        (cond (empty? s) result\n                              (= 0 (mod i n)) (recur\n                                               (conj result (first s))\n                                               (inc i)\n                                               (rest s))\n                              :else (recur result (inc i) (rest s))))]\n                (hf [] (- n offset -1) s)))\n            (ri-helper [result i]\n              (if (> i n)\n                result\n                (recur\n                 (conj result (nths s i))\n                 (inc i))))]\n      (ri-helper [] 1)))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn[coll n]\n  (apply map list (partition n coll)))","problem":43,"user":"5041b3c0e4b06d8231e4facf"},{"problem":43,"code":"(fn [xs n] (map (partial apply list) (vals (group-by #(mod % n) xs))))","user":"5d81b40ce4b0915913b1d379"},{"code":"#(letfn [(append [i o]\n                (if (empty? i) o\n                  (cons (conj (first o) (first i)) (append (rest i) (rest o)))))]\n  (loop [acc (reduce (fn [acc _] (conj acc [])) [] (range %2))\n         l %1]\n    (if (empty? l) acc\n      (recur (append (take %2 l) acc) (drop %2 l)))))","problem":43,"user":"537e745ae4b06839e8705ea6"},{"problem":43,"code":"#(apply map (fn [& more] more) (partition-all %2 %1))","user":"5a19d181e4b0ff51aa4b3207"},{"problem":43,"code":"(fn reverse-interleave-solution\n  [s x]\n  (let [helper (fn [n] (loop [i (inc n)\n                              acc []\n                              s' s]\n                         (cond (empty? s') acc\n                               (= 1 i)     (recur x (conj acc (first s')) (rest s'))\n                               :else       (recur (dec i) acc (rest s')))))]\n    (map helper (range x))))","user":"5461dc79e4b01be26fd746a8"},{"code":"(fn [coll n]\n  (map #(take-nth n %)\n       (take n (iterate next coll))))","problem":43,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":43,"code":"(fn\n  [xs n]\n  (map (fn [x]\n         (map #(+ x %) (take (/ (count xs) n)\n                             (iterate (partial + n) 0))))\n       (take n xs)))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":43,"code":"(fn [col gap] (map (fn [s d c] (mapcat #(rest %1) (filter #(zero? (rem (first %1) s)) (map-indexed #(vector %1 %2) (drop d c))))) (repeat gap gap) (range gap) (repeat gap col)))","user":"5b100648e4b0cc2b61a3be17"},{"problem":43,"code":"(fn [lst n]\n  (map #(map second %)\n       (vals (group-by #(rem (first %) n) (keep-indexed #(list (inc %1) %2) lst)))))","user":"5a99b83fe4b0d174b936c7aa"},{"code":"(fn [s n]\n   (map \n    (fn [group] (map #(nth s (+ (* % n) group)) (range 0 (/ (count s) n))))\n    (range 0 n)))","problem":43,"user":"51547920e4b084ca81ee2e1c"},{"problem":43,"code":"(fn\n  [ x1 x2 ]\n  (loop [ results '() remaining x1 n x2]\n   (if (= n (count results))\n     (reverse results)\n     (recur (conj results (take-nth n remaining)) (rest remaining) n)\n    )))","user":"584f096ae4b0b7285a6f4e5c"},{"problem":43,"code":"(fn [col a]\n  (apply map vector (partition a col)))","user":"4fe3338ee4b0e8f79898fea8"},{"code":"(fn [s n] (map #(take-nth n (drop % s)) (range 0 n)))","problem":43,"user":"4f713878e4b07046d9f4f00a"},{"code":"(fn de-interleave [xs n]\n  (for [x (range n)]\n    (take-nth n (drop x xs))))","problem":43,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":43,"code":"#(loop [i 0 acc (into [] (repeat %2 []))]\n     (if (= i (count %1)) acc\n         (let [tn (mod i %2)\n               ts (nth acc tn)\n               ns (conj ts (nth %1 i))]\n           (recur (inc i) (assoc acc tn ns)))))","user":"595bbab7e4b066ee0a44afe0"},{"problem":43,"code":"(fn\n  [c n]\n  (for [x (range n)]\n    (take-nth n (drop x c))\n  )\n)","user":"5676af21e4b05957ce8c6158"},{"problem":43,"code":"(fn [s n]\n        (let [f1 (fn f1 [s n]\n                   (if (empty? s)\n                     s\n                     (lazy-cat (take 1 (drop (dec n) s))\n                               (f1 (drop n s) n))))\n              f2 (fn f2 [s k n]\n                   (lazy-cat (take 1 (drop k s))\n                             (f1 (drop (inc k) s) n)))]\n          (for [i (range n)]\n            (f2 s i n))))","user":"546c4377e4b00cfc9eacc177"},{"problem":43,"code":"(fn [coll n]\n  (apply map conj (repeat n []) (partition-all n coll)))","user":"53d78b64e4b0e771c3025466"},{"problem":43,"code":"(fn [s x]\n  (loop [s s\n         result (repeat x [])]\n    (if (seq s)\n      (recur (drop x s) (map conj result (take x s)))\n      result)))","user":"5ab16992e4b073f1774425c4"},{"problem":43,"code":"(fn [seq times]\n  (let [indexed-seq (map-indexed (fn [idx x] [idx x]) seq)]\n    (map (fn [group]\n           (map #(second %) group)\n           ) (vals (group-by (fn [pair]\n                               (mod (first pair) times)\n                               ) indexed-seq))))\n  )","user":"5cdbb1b2e4b05ee0cb311732"},{"code":"(fn demultiplex [xs n]\n  (let [nth-only (fn nth-only [n xs] (map first (partition n n '() xs)))]\n    (map #(nth-only n (drop % xs)) (range 0 n))))","problem":43,"user":"4e691c79535d8ccf87e9fe97"},{"problem":43,"code":"(fn [s n] \n  (apply (partial map vector)\n         (partition n s)))","user":"576da825e4b0979f8965156c"},{"problem":43,"code":"(fn deinterleave \n  [coll n]\n  (for [i (range n)] \n    (take-nth n (drop i coll))))","user":"566733d6e4b04acd4f672dcb"},{"problem":43,"code":"(fn reverse-interleave\n  [s n]\n  (if (empty? s)\n    '()\n    (cons (map #(first %) (partition n s))\n          (reverse-interleave (flatten (map #(rest %) (partition n s))) (dec n)))))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [col sp]\n  (vals (group-by #(mod % sp) col)))","problem":43,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn [s n] (map #(take-nth n %) (take n (iterate rest s))))","problem":43,"user":"4e7f32ee535db966e863cc3a"},{"problem":43,"code":"#(loop [c1 %1 c2 %2 idx 0 rt []]\n   (if(empty? c1)\n     rt\n     (let [val-mod (mod idx c2) item (get rt val-mod nil)]\n       (recur (rest c1) c2 (inc idx) (if(nil? item) (assoc rt val-mod [(first c1)]) (assoc rt val-mod (conj item (first c1))) ) )\n       )\n     \n     )\n   )","user":"5d270111e4b092dab7f59c62"},{"problem":43,"code":"(fn [xs n] (map seq (vals (group-by #(mod % n) xs))))","user":"5f77a0c1e4b02876ed9fd0bb"},{"code":";; (fn [coll n]\n;;   (letfn [(fltr [[i x]] (zero? (mod i n)))]\n;;     (map #(map second (filter fltr (map-indexed vector (drop % coll))))\n;;          (range n))))\n(fn [coll n] (apply map vector (partition-all n coll)))","problem":43,"user":"4f32ef71e4b0d6649770a098"},{"code":"(fn reverse-interleave [coll i]\n  (let [partitions (partition i coll)]\n    (loop [res [] s partitions]\n      (if (= 0 (count (first s))) res\n      (recur (conj res (map first s)) (map rest s))))))","problem":43,"user":"4f12ab23535d64f603146429"},{"problem":43,"code":"(fn reverse_interleave \n([values counter] (reverse_interleave values 1 counter))\n([values i counter] (\n  if (not (= nil (first values)))\n    ((fn [i v ccol] (concat (take i ccol) (conj (rest (drop i ccol)) (conj (first (drop i ccol)) v))))\n      (- i 1)\n      (first values)\n      (if (< i counter)\n        (reverse_interleave (rest values) (+ i 1) counter) \n        (reverse_interleave (rest values) 1 counter)\n      )\n    )\n    ((fn esets [i] (if (< 0 i) (conj (esets (- i 1)) '() ) '() ) ) counter)\n)))","user":"602bca69e4b0d5df2af22267"},{"code":"(fn la [ls n] \n  (partition (/ (count ls) n) \n    (apply interleave (partition n ls))))","problem":43,"user":"4e1248b1535d04ed9115e7cf"},{"code":"(fn [x size]\n  (let [make-empty-seqs (fn [size]\n                          (loop [acc []\n                                 x size]\n                            (if (= 0 x)\n                              acc\n                              (recur (conj acc []) (- x 1))\n                            )\n                          )\n                        )\n        wrap-index (fn [index size]\n                     (mod (+ index 1) size) \n                   )\n        add-obj-to-right-seq-at-index (fn [acc index size obj]\n                                        (loop [my-acc acc\n                                               curr 0]\n                                          (do\n                                            (println my-acc)\n                                            (println size)\n                                            (if (= curr size)\n                                              my-acc\n                                              (let [next-acc (if (= curr index)\n                                                                (concat (rest my-acc) (list (conj (first my-acc) obj)))\n                                                                (concat (rest my-acc) (list (first my-acc)))\n                                                             )\n                                                    next-curr (+ curr 1)]\n                                                (recur next-acc next-curr)\n                                              )\n                                            )\n                                          )\n                                        )\n                                      )\n       ]\n    ((fn revint [acc x size index]\n       (if (empty? x)\n         acc\n         (revint (add-obj-to-right-seq-at-index acc index size (first x)) (rest x) size (wrap-index index size))\n       )\n    ) (make-empty-seqs size) x size 0)\n  )\n)","problem":43,"user":"5303a027e4b0d8b024fd3745"},{"code":"(fn [c n] (partition (/ (count c) n) \n                       (map #(last %)(sort-by #(mod (first %) n) (map-indexed vector c)))))","problem":43,"user":"52394c03e4b0d705d026ef09"},{"problem":43,"code":"(fn\n  [s n]\n  (let [m (into {} (map (fn [i] [i []]) (range n))) \n        first-index (mod (first s) n)\n        update (fn [m k f] (assoc m k (f (get m k))))]\n    (map (reduce (fn [m v] (update m (mod v n) (fn [o] (conj o v)))) m s) (map (fn [i] (mod (+ i first-index) n)) (range n)))))","user":"5637557ce4b0bfe05bf117d4"},{"problem":43,"code":"(fn [vs n]\n  (->> vs\n       (partition-all n)\n       (apply map list)))","user":"57acb156e4b0b8559636fc8d"},{"code":"(fn [x y] (map last (group-by #(mod % y) x)))","problem":43,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn p43 [coll n]\n  (apply map list (partition n coll))\n)","problem":43,"user":"51750fc5e4b07031762f2ee6"},{"problem":43,"code":"(fn [s n]\n    (apply mapv vector (partition n s)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":43,"code":"(fn [S N]  (loop [s S \n                   n N\n                   c N\n                   ret '()] (if (> n 0) \n                              (recur (rest s) (dec n) c (conj ret (take-nth c s)))\n                              (reverse ret))))","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn reversed-interleave\n  [items x]\n  (let [partitioned (partition x items)]\n    (for [n (range x)]\n      (map #(nth % n) partitioned))))","problem":43,"user":"511720eae4b0063b4e3e16da"},{"code":"(fn r [X n]\n  (if (= (* 2 n) (count X)) (map list (take n X) (drop n X))\n    (map cons (take n X) (r (drop n X) n))))","problem":43,"user":"51ad0ab8e4b09397d510977b"},{"code":"x","problem":43,"user":"52e635b3e4b09f7907dd146f"},{"problem":43,"code":"(fn [r p]\n  (let [c (/ (count r) p)]\n    (->> r\n       (partition-all p)\n       (apply interleave)\n       (partition-all c))))","user":"5c435a9fe4b0e06e1360a367"},{"code":"(fn f [v n]\n  (for [i (range n)]\n    (loop [ans [] j i]\n      (if (>= j (count v))\n        ans\n        (recur (conj ans (nth v j))\n               (+ j n))))))","problem":43,"user":"52196842e4b0890f2f822bfa"},{"code":"#(apply map (fn [& rest] rest)(partition %2 %1))","problem":43,"user":"531bfb69e4b08068f379ed97"},{"problem":43,"code":"(fn [s n]\n  (->> (partition n s)\n       (reduce (fn [acc new] (map list acc new)))\n       (map flatten)))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":43,"code":"(fn rev_interleave [s n]\n  (for [r (range n)]\n    (take-nth n (drop r s))))","user":"5632b0a9e4b0bfe05bf117a8"},{"problem":43,"code":"(fn [coll step]\n  (let [slots (dec step)]\n    (loop [idx 0 res '()]\n      (if (< idx step)\n  \t   (recur (inc idx) (cons (keep-indexed #(when (= idx (rem %1 step)) %2) coll) res))\n       (reverse res)))))","user":"53573d70e4b04ce2eb3ed278"},{"problem":43,"code":"(fn [a n]\n\t(map\n\t\t(fn [r]\n\t\t\t(map\n\t\t\t\tsecond\n\t\t\t\t(filter\n\t\t\t\t\t#(= r (rem (first %) n)) \n\t\t\t\t\t(map-indexed list a)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\t(range n)\n\t)\n)","user":"53da70a4e4b0e771c302549d"},{"code":"(fn [xs n]\n  (loop [i 0, xs xs, acc (vec (replicate n []))]\n    (if (empty? xs)\n      acc\n      (recur (mod (inc i) n) (next xs) (update-in acc [i] #(conj % (first xs)))))))","problem":43,"user":"4e4c238f535dc968683fc4dc"},{"problem":43,"code":"(fn rev-interleave [coll x]\n (let [ctnth (fn cons-to-nth [coll n val]\n                (if (> n (dec (count coll)))\n                  (throw (Exception. \"out of bounds\"))\n                (if (<= n 0)\n                  (cons (cons val (first coll)) (rest coll))\n                  (cons (first coll) (cons-to-nth (rest coll)\n                                                  (dec n)\n                                                  val)))))]\n\n                (let [acc (atom (repeat x '()))]\n                  (->> (map-indexed (fn [index elem]\n                         (swap! acc\n                                ctnth\n                                (mod index x)\n                                elem))\n                               coll)\n                       (last)\n                       (map reverse)))))","user":"5edfb1e5e4b0c7845d86b107"},{"problem":43,"code":"(fn [coll n]\n  (->> (partition n coll)\n       (map (partial partition 1))\n       (reduce (fn [colls c]\n                 (map (fn [a b] (concat a b)) colls c)))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":43,"code":"(fn [coll cnt]\n  (loop [result (repeat cnt [])\n         input coll]\n    (if (empty? input)\n      result\n      (recur (mapv (fn [elem1 elem2]\n                     (conj elem1 elem2))\n                   result\n                   (take cnt input))\n             (drop cnt input)))))","user":"57596ba7e4b02ea11479931a"},{"problem":43,"code":"(fn [v n]\n  (vals (group-by #(mod % n) v)))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [coll n]\r\n  (for [i (range n)]\r\n    (take-nth n (drop i coll))))","problem":43,"user":"4db87b3f535d1e037afb2196"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (loop [[current & remaining] coll\n         result (vec (repeat n []))\n         i 0]\n    (if (nil? current)\n      result\n      (recur remaining\n             (assoc result i (conj (get result i) current))\n             (mod (inc i) n)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":43,"code":"(fn [col n] (->>\n             (partition n col)\n             (apply map list)))","user":"5d1a1082e4b0902706380e0e"},{"problem":43,"code":"(fn rev-inter\n  ([l x] (rev-inter l x 0 (range (count l)) []))\n  ([l x m ind resp]\n   (println \"I\" resp)\n   (if (= m x)\n     resp\n     (let [indaux (filter #(= m (mod % x)) ind)\n           lr (map #(nth l %) indaux)]\n       (rev-inter l x (inc m) ind (conj resp lr))))))","user":"574f1c24e4b02ea114799255"},{"code":"(fn reverse-interleave [coll n]\r\n  (for [i (range n)]\r\n    (map #(nth % i) (partition n n [] coll))))","problem":43,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn [c n]\n  (let [p (partition-all n c)]\n    (for [i (range 0 n)]\n      (map #(nth % i) p))))","problem":43,"user":"5012ec0ae4b0c87326002230"},{"problem":43,"code":"(fn [s p] \n  (map #(map last %) (vals (group-by #(rem (first %) p) (map-indexed #(-> [% %2]) s)))))","user":"53a739b0e4b0ef122a8689d0"},{"code":"#(for [n (range %2)] (take-nth %2 (drop n %1)))","problem":43,"user":"4ec2f192535dcc7ae8597d4c"},{"code":"(fn p43s [s i]\n  (loop [col s\n         c 1\n         res ()]\n    (if (> c i)\n      (reverse res)\n      (recur (rest col) (inc c) (conj res (take-nth i col)))\n      )\n    )\n  )","problem":43,"user":"4f63777be4b0defedf855fe4"},{"code":"(fn [coll n]\n  (map #(map first %) (vals (group-by second (map #(list %1 %2) coll (cycle (range n)))))))","problem":43,"user":"4edab806535d10e5ff6f5311"},{"problem":43,"code":"#(apply map list (partition %2 %)) ;; very simple: (map list .... args) applies (list a b c...) to first elem of every arg, and then to second, third etc.","user":"57e33f6fe4b0bfb2137f5a96"},{"code":"(fn [s n]\n  (let [r ()]\n    (for [x (range n)]\n      (concat (take-nth n (drop x s)) r))))","problem":43,"user":"4f1d1299535d64f603146487"},{"problem":43,"code":"#(map (fn [x] (take-nth %2 (nth (iterate rest %1) x))) (range %2))","user":"5d764e52e4b02e6b30c93524"},{"code":";(fn la [col n] \n;  (loop [i 0\n;         colrest col\n;         rez []] \n;    (if (< i n)    \n;      (recur (inc i) (rest colrest) (conj rez (flatten (partition-all 1 n colrest))))\n;      (identity rez))))\n#(apply map list (partition %2 %1))","problem":43,"user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [s n] (for [i (range n)] (map #(nth % i) (partition n s))))","problem":43,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn [coll n]\n  (take n\n    (iterate\n      #(map inc %)\n        (range (first coll) (count coll) n))))","problem":43,"user":"502b0804e4b063e52107afad"},{"code":"(fn rint [s x]\n  (vec (for [i (range x)]\n         (lazy-seq (if (empty? s)\n                     nil\n                     (cons (nth s i) (get (rint (drop x s) x) i nil)))))))","problem":43,"user":"4fa4ef2ee4b081705acca1a9"},{"problem":43,"code":"(fn [xs n]\n  (loop [i 0\n         acc (repeat n [])]\n    (if (= i (count xs))\n      (vec acc)\n      (let [step-i (rem i n)\n            head (take step-i acc)\n            current (nth acc step-i)\n            tail (drop (inc step-i) acc)]\n        (recur (inc i) (concat head (cons (conj current (nth xs i)) tail)))))))","user":"5e0b6375e4b099d064962f7b"},{"code":"(fn [xs n] (map (fn [i] (keep-indexed #(when (= i (mod %1 n)) %2) xs)) (range n)))","problem":43,"user":"508a2c2fe4b016a2107004a1"},{"problem":43,"code":"(fn [c n]\n   (for [i (range n)]\n     (take-nth n (drop i c))))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":43,"code":"(fn [l1 i]\n  (reduce\n    (fn [l2 c]\n        (conj l2 (take-nth (+ c 1) (remove (set (flatten l2)) l1)))\n    )\n      []\n      (reverse (range i)))\n  )","user":"5a21c3f9e4b0ff51aa4b32b7"},{"problem":43,"code":"(fn [coll n]\n  (let [s (partition n n coll)]\n    (for [i (range n)]\n      (map #(nth % i) s))))","user":"59648ce1e4b069c0a1a19769"},{"problem":43,"code":"(fn parti [seqs partcnt]\n   (apply map vector (partition partcnt seqs)))","user":"531571ece4b08068f379ed27"},{"code":"#(map seq (vals (group-by (fn [n] (mod n %2)) %1)))","problem":43,"user":"5027b41ee4b01614d1633fee"},{"problem":43,"code":"(fn\n   [coll x]\n   (apply map list (partition x coll)))","user":"52e12ac5e4b09f7907dd141a"},{"code":"#(reverse \n  (loop [res '()\n         i 0\n         internli %1]\n    (if (= i %2)\n      res\n      (recur (conj res (take-nth %2 internli))\n             (inc i)\n             (rest internli)))))","problem":43,"user":"50c84ba2e4b00bb60fe0c53e"},{"code":"(fn [coll n]\r\n  (loop [idx 0 result []]\r\n    (if (== idx n)\r\n      result\r\n      (recur (inc idx) \r\n        \t(conj result \r\n      \t\t\t(keep-indexed #(if (== idx (mod %1 n)) %2) coll))))))","problem":43,"user":"5028bce0e4b01614d1633ffb"},{"problem":43,"code":"(fn [v n]\n  (apply map vector (partition n v))\n)","user":"58224c53e4b04b46fc4b0f92"},{"problem":43,"code":"(fn [lst n]\n  (map (fn [x] \n         (take-nth n (nthrest lst x))) (range n)))","user":"5642b939e4b08d4f616f5f1b"},{"code":"(fn rev-int [xs n]\n  (let [rotate #(concat (drop %2 %1) (take %2 %1))]\n    (for [i (range n)]\n      (map first (partition n (rotate xs i))))))","problem":43,"user":"4f2a35ace4b0d6649770a03a"},{"code":"(fn a \n  ([x n] (a x n 1))\n  ([x n reclevel]\n  (if (= reclevel n)\n    (list (take-nth n x))\n    (cons (take-nth n x) (a (rest x) n (+ reclevel 1))))))","problem":43,"user":"4ea0c284535d7eef308072ad"},{"problem":43,"code":"(fn [l x]\n  (for [d (range x)]\n    (take-nth x (drop d l))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn [c n] (apply map list (partition n c)))","problem":43,"user":"4e6dd0f5535d5021c1a895f3"},{"problem":43,"code":"(fn reverse-interleave [x n]\n  (let [xlen (count x) x (vec x)]\n    (loop [out [] k 0]\n      (if (= k n) \n        out\n        (let [new \n          (loop [inner-out [] j k]\n            (if (>= j xlen)\n              inner-out\n              (recur (conj inner-out (get x j)) (+ j n))))]\n          (recur (conj out new) (inc k)))))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":43,"code":"(fn [coll size]\n  (map \n   #(take-nth size (drop % coll))\n   (range size)))","user":"5abbbd46e4b073f1774426db"},{"problem":43,"code":"(fn evaelretni [s x]\n  (map #(take-nth x (drop % s)) (range x)))","user":"5d929ceae4b0915913b1d412"},{"problem":43,"code":"#(map reverse (reduce\n  (fn [uu item] (assoc uu (last item) (conj (get uu (last item)) (first item))))\n  (vec (repeat %2 '())) \n  (map list %1 (cycle (range %2))))\n)","user":"54d5fbe9e4b0a52adc2e2014"},{"problem":43,"code":"(fn deinterleave [c m]\n  (loop [acc '() o 0]\n    (if (= o m)\n      (reverse acc)\n      (recur (conj acc (take-nth m (drop o c)) )\n             (inc o)))))","user":"5720fc08e4b0c5bde472c0a3"},{"problem":43,"code":"(fn [items number]\n  (loop [items items current 0 result []]\n    (if (empty? items)\n      result\n      (recur (rest items)\n             (inc current)\n             (let [index (mod current number) item (first items)]\n               (if (<= (count result) index)\n                 (conj result [item])\n                 (assoc result index (conj (nth result index) item))))))))","user":"57d9bca1e4b0bd073c202405"},{"problem":43,"code":"(fn [coll n]\n    (let [each_n (partition n coll)]\n      (apply map\n             vector\n             each_n)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":43,"code":"#(loop [r (repeat %2 []) c %]\n   (if (= (count c) %2)\n     (map (fn [rn xn] (into rn xn)) r (partition 1 (take %2 c)))\n     (recur (map (fn [rn xn] (into rn xn)) r (partition 1 (take %2 c))) (drop %2 c))))","user":"53e4fa2ce4b036ad0777e454"},{"code":"(fn [col n] (apply mapv (conj (partition n col) list)))","problem":43,"user":"51c73959e4b07ef393169e3e"},{"problem":43,"code":"(fn [c n]\n    (for [x (range n)] (take-nth n (drop x c))))","user":"55773cbae4b05c286339e07f"},{"problem":43,"code":"(fn rev-interleave\n  [xs point]\n  (let [partitioned (partition point xs)\n        helper (fn [coll accum]\n            (if (some empty? coll)\n              accum\n              (recur (map rest coll) (conj accum (map first coll)))))]\n    (helper partitioned [])))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn riv [xs n]\r\n  (let [parted (partition n xs)]\r\n    (for [i (range n)]\r\n      (map #(nth % i) parted))))","problem":43,"user":"4dfd4ba8535d04ed9115e781"},{"problem":43,"code":"(fn [a b]\n\t(loop [j 0 res []]\n\t\t(if (< j b) \n\t\t\t(recur (inc j) (conj res \n\t\t\t\t(for [i (range 0 (count (into [] a)))  :when (= j (mod i b))]\n\t\t\t\t\t(get (into [] a) i))))\n\t\t\tres)))","user":"5eea5ce7e4b029a2061bbec0"},{"code":"(fn [l n]\n    (map #(map second %) \n         (vals \n           (group-by #(mod (first %) n) \n                     (map #(vector %1 %2) \n                          (range (count l)) l)))))","problem":43,"user":"50d3b03fe4b030b634c368b9"},{"problem":43,"code":"(fn [col amt]\n  (loop [idx 0\n         result []]\n    (if (= idx amt)\n      result\n      (recur (inc idx) (conj result (take-nth amt (nthrest col idx)))))))","user":"5146fd44e4b0d12420447958"},{"code":"(fn [xs n]\n  (apply list (vals (group-by #(mod % n) xs))))","problem":43,"user":"4fccb31be4b0ee37620e1868"},{"problem":43,"code":"(fn [coll n]\n    (->> (range n)\n         (map #(take-nth n (drop % coll)))))","user":"58a3279fe4b02bd94d917ee9"},{"code":"(fn fart [s n]\n  (for [x (range n)] (take-nth n (nthrest s x))))","problem":43,"user":"508dbd56e4b0f17d83ea26c2"},{"code":"(fn deinterleave [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","problem":43,"user":"5032b066e4b00c0952a257ea"},{"problem":43,"code":";(fn [xs n]\n;  (reduce (fn [accum i] \n;            (cons (take-nth n (drop i xs)) accum))\n;          ()\n;          (reverse (range n))))\n\n\n(fn [xs n]\n  (map (fn [i]\n         (take-nth n (drop i xs)))\n       (range n)))","user":"58740c18e4b01531a375ea49"},{"code":"(fn ri [c n] (for [x (range 0 n) ] (keep-indexed #(if (= x (mod %1 n)) %2) c)) )","problem":43,"user":"50d179c7e4b05a71a896ef56"},{"problem":43,"code":"(fn antiinterleave [coll x]\n  (for [i (range x)] (take-nth x (drop i coll))))","user":"5f5f2eafe4b02876ed9fcff5"},{"problem":43,"code":"(fn [xs n]\n  (map #(apply concat (partition 1 n (drop % xs)))\n       (range n)))","user":"553e0b70e4b0a04f792994e8"},{"problem":43,"code":"(fn [xs y] (->> xs (partition y) (apply map list)))","user":"5614fa1de4b05f002753dfbe"},{"problem":43,"code":"#(let [p (partition %2 %1)] (partition (/ (count %1) %2) (apply interleave p)))","user":"6087cb25e4b0ae75613dced8"},{"problem":43,"code":"(fn baz [A m] (let [bar (fn foo [L n] \n            (let [LL (map (fn [y z] (list y z)) L (range))] (map (fn [b] (first b)) (filter (fn [a] (= n (mod (last a) m))) LL))))]\n  (map (fn [w] (bar A w)) (range m))\n  \n                ))","user":"57b8b008e4b0fbc9809a27e6"},{"code":"(fn [coll n] \n  (apply map list (partition n coll)))","problem":43,"user":"513fb358e4b00f13ea1bd893"},{"problem":43,"code":"(fn [s n]\n  (map #(map second %) (vals (group-by first (partition 2 (interleave (cycle (range n)) s))))))","user":"5ab564f8e4b073f177442639"},{"problem":43,"code":"(fn [y x] (map (fn [z] (take-nth x (drop z y))) (range x)))","user":"53d5d24de4b0e771c302544a"},{"code":"(fn [coll n]\r\n    (apply map list (partition n coll)))","problem":43,"user":"50436470e4b034ff00315d23"},{"code":"(fn [s n]\n  (let [group-hash\n        (loop [items s\n               subseq (hash-map)\n               counter 0]\n          (let [key (mod counter n)]\n            (println \"counter=\" counter \" key=\" key)\n            (if (= 0 (count items))\n              subseq\n              (recur (rest items)\n                     (assoc subseq\n                       key\n                       (conj (get subseq key []) (first items)))\n                     (inc counter)))))]\n    (map\n     (fn [k]\n       (group-hash k))\n     (sort (keys group-hash)))))","problem":43,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [original n] (let [partitioned (partition n original)]\n                   (apply map vector partitioned)))","problem":43,"user":"52cb19abe4b07d0d72b27348"},{"problem":43,"code":"(fn [coll n]\n    (->> (partition n coll)\n  \t\t  (apply map list)))","user":"59636cc2e4b066ee0a44b0c7"},{"code":"(fn [coll n] (for [[x y] (group-by #(second %)\r\n                       (map-indexed #(identity [%2 (mod %1 n)]) coll))] (map first y)))","problem":43,"user":"503354c3e4b0c6c1199c710c"},{"problem":43,"code":"(fn [c n]\n  (let [parts (partition-all n c)]\n    (map (fn [e] (map #(nth % e ()) parts)) (range (count (first parts))) )))","user":"552e1c98e4b076ab5578f7ee"},{"code":"(fn [s n]\n  (letfn [(keep-nth-offset [s n offset]\n            (keep-indexed (fn [index item] (when (zero? (mod (- offset index) n)) item)) s))]\n    (for [i (range n)]\n      (keep-nth-offset s n i))))","problem":43,"user":"4ed98b40535d10e5ff6f5307"},{"code":"(fn [coll n]\n   (partition (/ (count coll) n) (apply interleave (partition n coll))))","problem":43,"user":"52be0263e4b07a9af579230e"},{"code":"#(map (fn [curr] (map (partial nth %1) (filter (fn [idx] (= (mod idx %2) curr)) (range 0 (count %1))))) (range %2))","problem":43,"user":"51da52dbe4b02ceefd947763"},{"problem":43,"code":"(fn [coll n]\n  (map #(flatten (partition 1 n (drop % coll))) \n       (range n)))","user":"550615c0e4b021ccfedb9696"},{"problem":43,"code":"(fn [c n] (apply map #(apply list %&) (partition n c)))","user":"563b1553e4b0bfe05bf1180a"},{"code":"#(map (fn [x] (take-nth %2 (drop x %1))) (range %2))","problem":43,"user":"5243d9a2e4b076204b44fadf"},{"problem":43,"code":"(fn [xs n] (let [take1 (fn [ts] \n                          (seq (into [] (map #(first %) ts) ))\n                         ),\n                    takeall (fn [res ds] \n                               (if (first (first ds)) \n                                    (recur (conj res (take1 ds)) (map #(drop 1 %) ds))\n                                    res )\n                              )]\n             (takeall [] (partition n xs) ))\n  )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":43,"code":"(fn [s n]\n    (apply (partial map #(identity %&)) (partition n s)))","user":"586b6753e4b01531a375e956"},{"code":"#(map (fn [f m] (f m)) (repeat %2 (partial take-nth %2)) (iterate rest %))","problem":43,"user":"52dfe1d2e4b09f7907dd1406"},{"problem":43,"code":"(fn [seq n] (vals (group-by #(mod % n) seq)))","user":"5a813b90e4b00b71e582a065"},{"code":"(fn [s n]\n  (partition\n    (/ (count s) n)\n    (apply interleave (partition n s))))","problem":43,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn [col x]\n  (map \n     #(map (fn [it] (second it)) %)\n     (vals (group-by \n     first\n     (map \n     #(vector (mod (first %) x) (second %))\n     (sort (apply assoc {}  (interleave (range 1 (inc (count col)) ) col ))))))))","problem":43,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn [c s] (map #(map (fn [n] (nth c n)) (range % (count c) s)) (range s)))","problem":43,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":43,"code":"(fn [items gcnt]\n  (let [clusters (partition gcnt items)]\n    (map (fn [th] \n           (map #(nth % th) clusters)\n         ) \n         (range gcnt)\n    )\n  )\n)","user":"57ce3fede4b0c746388ab8a6"},{"problem":43,"code":"(fn [coll n]\n  (loop [[elem & coll] coll interleaved [] ind 0]\n    (if (nil? elem)\n      interleaved\n      (recur \n       coll \n       (if (contains? interleaved ind)\n         (update-in interleaved [ind] #(conj % elem))\n         (conj interleaved [elem])\n       )\n       (rem (inc ind) n))\n  )\n )\n)","user":"5e09fd26e4b099d064962f60"},{"code":"(fn [c n]\n  (vals (group-by #(mod % n) c)))","problem":43,"user":"4eb27fad535d7eef3080734a"},{"problem":43,"code":"; My solution was insane:\n#_(fn \n  [s n]\n  (loop [cur (first s)\n         remn (rest s)\n         idx 0\n         groups (loop [i 0\n                       l []]\n                  (if (= i n)\n                    l\n                    (recur (inc i) (conj l []))))]\n    (do (println cur remn idx groups)\n        (if (nil? cur)\n          groups\n          (recur (first remn) (rest remn) (mod (inc idx) n) (assoc groups idx (conj (nth groups idx) cur)))))))\n; This is much nicer: partition into groups sized according to the\n; number of lists, and then used `apply map list` (mapping over each list like a zip)\n; Basically a transpose function\n\n#(apply map list (partition %2 %))","user":"5edd05bfe4b0c7845d86b0f3"},{"code":"(fn rvn [x t]\n  (let\n    [data\n     (let [p (/ (count x) t)]   \n      (map   \n        (fn [it]   \n          (filter\n               #(= (mod % t) it)\n             x)\n           )\n         (range 0 t))\n       )]\n    (if (= t 2)\n      (reverse data)\n      data\n    )\n  )\n)","problem":43,"user":"4e3456f9535deb9a81d77f2a"},{"code":"(fn [coll n]\n  (apply map list\n    (partition n coll)))","problem":43,"user":"4e40529b535dc968683fc49a"},{"code":"(fn rintl \n  ([l, n] (rintl l n n))\n  ([l, n, counter]\n     (if (= counter 0) '()\n         (cons (take-nth n l) (rintl (rest l) n (- counter 1))))\n     ))","problem":43,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":43,"code":"(fn [coll n] (for [i (range n)]    (take-nth n (drop i coll))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":43,"code":"(fn [c n] (loop [a (vec (repeat n [])), b [], c c, i n]\n            (cond\n             (= 0 i) (recur b [] c n)\n             (empty? c) a\n             :else (recur (rest a) (conj b (conj (first a) (first c))) (rest c) (dec i)))))","user":"4e268c6e535deb9a81d77ef4"},{"code":"(fn [l n]\n  (map\n    (fn [i] (keep-indexed #(if (zero? (rem (- %1 i) n)) %2) l))\n    (range n)))","problem":43,"user":"504e72cee4b0f6ff3350c4b4"},{"code":"(fn reverse-interleave\r\n  [coll n]\r\n  (partition-all (/ (count coll) n)\r\n                 (apply interleave (partition-all n coll))))","problem":43,"user":"4f2942ace4b0d6649770a01e"},{"code":"#(apply map list (partition-all %2 %1))","problem":43,"user":"4dd579b5535dae65d5c462ea"},{"problem":43,"code":"(fn __\n  [coll x]\n  (partition (quot (count coll) x) (apply interleave (partition x coll))))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn reverse-interleave [xs n]\n  (apply map vector (partition n xs)))","problem":43,"user":"52606318e4b03e8d9a4a7036"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (let [res (into [] (repeat n []))]\n    (loop [res res\n           coll coll\n           c 0]\n      (if (empty? coll)\n        res\n        (let [x (first coll)\n              idx (mod c n)\n              inner (nth res idx)]\n          (recur (assoc res idx (conj inner x)) (rest coll) (inc c)))))))","user":"5c04464ee4b0bdcf453d167d"},{"problem":43,"code":"(fn [coll n] (map #(map second %) (vals (group-by #(first %) (map-indexed (fn [i e] [(mod i n) e]) coll)))))","user":"59f4c9c8e4b0966464fe6ab8"},{"code":"(fn [s n] (map #(map second %) (vals (group-by (comp #(mod % n) first) (map-indexed vector s)))))","problem":43,"user":"4ff3df0fe4b0678c553fc355"},{"problem":43,"code":"(fn rev-inter [input subseq-count](map (fn[c](mapcat rest c))(vals (group-by #(mod (second %1) subseq-count) (map-indexed #(list %1 %2) input)))))","user":"5f838122e4b01aacbe7a2715"},{"code":"(fn myrev-interleave\n        [xs n]\n           (let [len (count xs)\n                 sz (/ len n)]\n             (if (= 0 (mod len n))\n               (loop [rst xs\n                      acc []]\n                 (if (empty? rst)\n                   ;2. spliting the result and zipping\n                   (loop [rst2 (apply interleave acc)\n                          acc2 []]\n                     (if (empty? rst2)\n                       acc2\n                       (let [splitted (split-at sz rst2)]\n                         (recur (flatten (rest splitted)) (conj acc2 (first splitted))))))\n                   ;1. generate result for zipping\n                   (recur (drop n rst) (conj acc rst)))))))","problem":43,"user":"52c58561e4b0c2d177d620f8"},{"problem":43,"code":"(fn myfun\n  [s x]\n  (let [num_final (/ (count s) x)]\n    (partition num_final (apply interleave (partition x s)))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"code":"(fn f ([x n]\n  (f x n (repeat n []) 0))\n  ([x n r c]\n    (if (= c (count x))\n        r\n      (recur x n (concat (take (mod c n) r) [(conj (nth r (mod c n)) (nth x c))] (drop (inc (mod c n)) r)) (inc c)))))","problem":43,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn reverseInterleave[seq1 x]\n  (apply map list (partition x seq1)))","problem":43,"user":"525d490ae4b0cb4875a45d70"},{"problem":43,"code":"(fn [s i] \n  (:payload\n   (reduce\n    (fn [{v-index :i payload :payload} v]\n      { :i       (if (= v-index i) 1 (inc v-index)) \n        :payload (update-in payload [(dec v-index)] conj v)})\n    {:i 1 :payload (vec  (take i (repeat [])))}\n    s)))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn [v n]\n(apply map (fn [& a] a) \n(partition n v)))","problem":43,"user":"4e6a4038535d8ccf87e9feb5"},{"problem":43,"code":"(fn [seq-in num-subseqs]\n  (loop [seq-remaining seq-in\n         subseqs (vec (repeat num-subseqs []))\n         index 0]\n    (let [cur (first seq-remaining)\n          remainder (rest seq-remaining)]\n    (if cur\n      (recur remainder (update-in subseqs [index] #(conj % cur)) (mod (inc index) num-subseqs))\n      subseqs))))","user":"5658d775e4b00d3155796114"},{"problem":43,"code":"#(for [i (range %2)](take-nth %2 (drop i %)))","user":"565487dce4b0f9d632dd8482"},{"problem":43,"code":"(fn ri [coll n]\n  (loop \n    [in-accs (map (fn [_] `()) (range n)) \n     out-accs `()\n     items coll]\n    (if (empty? items)\n      (map reverse\n        (reverse out-accs))\n    (if (empty? in-accs)\n      (recur (reverse out-accs) `() items)\n      (recur (rest in-accs) (cons (cons (first items) (first in-accs)) out-accs) (rest items))))))","user":"52dbd423e4b09f7907dd13c6"},{"problem":43,"code":"(fn[coll n](map #(take-nth n (drop % coll)) (range n)))","user":"58f5689de4b0438e51c2ced7"},{"problem":43,"code":"(fn [a k] (map #(map second %) (map second (sort-by first (seq (group-by #(-> % first (rem k)) (map-indexed #(vector % %2) a)))))))","user":"5628cb07e4b00e49c7cb47ef"},{"code":"(fn reverseInterleave [xs n] (\n  if (= n 1) (list xs) (loop [i n, nth '(), before '(), after xs]\n                         (if (empty? after) \n                           (concat (reverseInterleave before (dec n)) (list nth)) \n                           (if (= i 1) \n                             (recur n (concat nth (list (first after))) before (rest after)) \n                             (recur (dec i) nth (concat before (list (first after))) (rest after)))))))","problem":43,"user":"50ef311fe4b0a78662fa2651"},{"code":"#(apply map (cons vector (partition %2 %)))","problem":43,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":43,"code":"(fn  [coll num] (for[i (range num)] (take-nth num (drop i coll)) ))","user":"57b13adae4b0fbc9809a2750"},{"problem":43,"code":"(fn reverse-interleave\n  ([s n]\n   (reverse-interleave s n (vec (repeat n [])) 0))\n  ([s n result iteration]\n   (if (seq s)\n     (let [current (first s)\n           index (mod iteration n)\n           result (update-in result [index] #(conj % current))]\n        (recur (rest s) n result (inc iteration)))\n     (map seq result))))","user":"5d0eed51e4b0cc9c91588262"},{"problem":43,"code":"(fn [xs n] \n  (reduce-kv #(update-in %1 [(rem %2 n)] conj %3) (vec (repeat n [])) (vec xs))  \n )","user":"5921a080e4b09b4ee5954c77"},{"problem":43,"code":"(fn [s n]\n  (apply map vector (partition n s)\n  ))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":43,"code":"(fn rvr-intrlv\n\t[lst x]\n\t(loop [l lst base 0 out (repeat x [])]\n\t\t(if (>= base (count l))\n\t\t\tout\n\t\t\t(recur l (+ base x)\n\t\t\t\t(map\n\t\t\t\t\t#(conj (nth out %) (nth l (+ base %)))\n\t\t\t\t\t(range x))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"5545477fe4b0a04f79299531"},{"code":"(fn [ll n] (let [gen (fn [ll n x] (loop [rst nil\n                  , a 1, lst ll]\n                  (if (empty? lst)\n                       rst\n                       (if (= (mod a n) (mod x n))\n                       (recur (concat rst (list (first lst))) \n                              (inc a) (rest lst))\n                       (recur rst (inc a) (rest lst))))))]\n      (loop [rst nil, a 0]\n        (if (= a n)\n             rst\n             (recur (concat rst (list (gen ll n (inc a)))) (inc a))\n))))","problem":43,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"(fn [coll n]\n    (map (partial take-nth n)\n         (take n\n               (iterate rest coll))))","problem":43,"user":"4e8dc25f535d65386fec213a"},{"problem":43,"code":"(fn [s m] (map (comp seq second) (group-by #(rem % m)s)))","user":"549a176ce4b0f3d1d8e70f69"},{"problem":43,"code":"(fn [l n]\n  (let [p (/ (count l) n)]\n\t(partition p (apply interleave (partition n l)))))","user":"4fc8f671e4b0ee37620e1840"},{"problem":43,"code":"(fn [S n] (apply map list (partition n S)))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(fn [s n]\n  (loop [working-seq s\n         return-seq ()\n         n-acc n]\n    (if (= 0 (count working-seq))\n      (reverse return-seq)\n        (recur\n         (remove (set (take-nth n-acc working-seq)) working-seq)\n         (cons (take-nth n-acc working-seq) return-seq)\n         (dec n-acc)))))","problem":43,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":43,"code":"(fn[xs n](map #(map first %1) (partition-by second (sort #(compare (second %1) (second %2)) (map #(vector %1 %2) xs ( cycle ( range n )))))))","user":"53d63e6ce4b0e771c3025454"},{"problem":43,"code":"(fn [xs n]\n   (loop [i (dec n) ys '()]\n     (if (> i -1)\n       (recur (dec i) (cons (take-nth n (drop i xs)) ys) )\n       ys))) \n\n; (fn [xs n] \n;   (apply map list (partition n xs)))","user":"5661e09ae4b068f2fe63dc70"},{"problem":43,"code":"(fn [xs n]\n  (->> (range (count xs))\n       (group-by #(mod % n))\n       vals\n       (map #(map (partial nth xs) %))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn f [l n]\n  (letfn\n    [(create-sublist [i bound result shift]\n                     (if (< i bound)\n                       (create-sublist (+ i 1) bound (conj result (nth l (+ (* i n) shift))) shift)\n                       result))\n     (create-mainlist [i result]\n                      (if (< i n)\n                        (create-mainlist (+ i 1) (conj result (create-sublist 0 (quot (count l) n) [] i)))\n                        result))]\n    (create-mainlist 0 [])))","problem":43,"user":"52d7b0ade4b09f7907dd137c"},{"problem":43,"code":"(let [cons-to-ith (fn [indexed-sequences i value] (map (fn [[index seq]] (if (= index i) (list index (cons value seq)) (list index seq))) indexed-sequences))]\n\t(fn disinterleave \n\t\t([[head & tail :as sequence] n targets current]\n\t\t\t(if (empty? sequence) (map (fn [[index seq]] (reverse seq)) targets) (disinterleave tail n (cons-to-ith targets current head) (if (= current n) 1 (+ current 1)))))\n\t\t([sequence n]\n\t\t\t(disinterleave sequence n (map #(list (+ % 1) '()) (range n)) 1))))","user":"57d0fce5e4b0bd073c202364"},{"problem":43,"code":"(fn reverse-interleave [coll reps]\n  (loop [repeats reps\n         c coll\n         acc []]\n  (if (zero? repeats)\n    acc\n    (recur (dec repeats) (rest c) (conj acc (take-nth reps c))))))","user":"538d70abe4b0b51d73faae6e"},{"problem":43,"code":"#(map (partial map second) \n      (vals (group-by first \n                      (map-indexed (fn [x y] (list (mod x %2) y)) \n                                   %1))))","user":"54857e3be4b0e286459a11ad"},{"code":"#(let [part (fn part [arr len] (partition (/ (count arr) len) arr))\n        res (part %1 (/ (count %1) %2))\n        ]\n   (part (apply interleave res) %2))","problem":43,"user":"4ffe8193e4b0678c553fc3f4"},{"problem":43,"code":"(fn [c groups]\n   (let [indexed (map #(vector %1 %2) c (range (count c)))]\n     (for [x (range groups)]\n       (map #(first %) (filter #(= x (mod (second %) groups)) indexed)))))","user":"607bd80be4b0a637ed780379"},{"problem":43,"code":"(fn [xs x] (apply map list (partition-all x xs)))","user":"5668dcc6e4b04acd4f672df8"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (map #(map (vec s) %) (map #(take-while (fn [i]\n                                            (< i (count s))) (iterate (partial + n) %)) (range n))))","user":"5c665311e4b0fca0c16226a7"},{"code":"(fn [l n] \r\n  (for [x (range n)] (take-nth n (drop x l))))","problem":43,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn [coll n]\n  (loop [x 1 res []]\n    (if (= x (inc n)) res\n      (recur (inc x) (conj res (keep-indexed (fn [idx item] (if (= (mod (inc idx) n) (mod x n))item nil)) coll))))))","problem":43,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn [coll n]\n  (->> (partition-all n coll)\n       (apply (partial map list))))","problem":43,"user":"52381b2ae4b0fae3832e99ef"},{"problem":43,"code":"(fn revIn [x n] (apply map list (partition n x)))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn rev-interleave [s n]\n  (map #(take-nth n %) (map #(drop % s) (range n))))","problem":43,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":43,"code":"(fn reverse-interleave [se n]\n  (map (fn [group] ;; remove indices from items per group\n         (map (fn [group-kv] (last group-kv)) ;; unpack item from (index, item)\n              group))\n       (vals (group-by (fn [kv] (mod (first kv) n)) ;; group KV-pairs (index, item) by their index modulo n\n                       (map-indexed list se)))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":43,"code":"(fn [s n]\n    (vals (group-by (fn [x] (mod x n))\n                    s)))","user":"6026d2cae4b0d5df2af22232"},{"problem":43,"code":"(fn [coll n]\n   (apply map (fn [& x] x) (partition n coll)))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn [c p] (map #(map fnext %) (vals (group-by #(mod (first %) p) (keep-indexed list c)))))","problem":43,"user":"4e6a48d5535d8ccf87e9febd"},{"code":"#(apply map (partial conj []) (partition %2 %))","problem":43,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (loop [elems coll count n result '()]\n    (if (= 0 count)\n\t  (reverse result)\n      (let [new-result (conj result (take-nth count elems))\n\t        new-elems (keep-indexed #(if (not= 0 (rem %1 count)) %2) elems)\n\t\t    new-count (dec count)]\n\t\t\t(recur new-elems new-count new-result)))))","user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn [s n]\r\n  (map \r\n    (fn [i] (map first (partition-all n (drop i s))))\r\n    (range 0 n)))","problem":43,"user":"4de760a3535d08e6dec9fdf9"},{"problem":43,"code":"(fn [input-sequence n]\n\t(map \n\t\t(fn [counter] \n\t\t\t(let [a (drop (- counter 1) input-sequence)]\n\t\t\t\t(doall (filter (fn [element] (= 0 (rem (.indexOf a element) n))) a))\n\t\t\t)\n\t\t)\n\t\t(range 1 (+ 1 n))\n\t)\n)","user":"5a5b9e3ce4b0512ff01cd90b"},{"problem":43,"code":"(fn [x y] (partition-all (/ (count x) y) (apply interleave (partition-all y x))))","user":"567e6d24e4b0feffd0d18eb4"},{"problem":43,"code":"(fn [c n] (apply map vector (partition n c)))","user":"4ec1923f535dfed6da9c6db2"},{"problem":43,"code":"#(->> %\n      (partition %2)\n      (map (fn [s] (map list s)))\n      (reduce (fn [acc s] (map concat acc s))))","user":"5f37263de4b0574c87022c4e"},{"problem":43,"code":"#(loop [sequence %1\n        update-index 0\n        mid-result (into [] (repeat %2 []))]\n   (if (empty? sequence)\n     mid-result\n     (recur (rest sequence)\n            (rem (inc update-index) %2)\n            (assoc mid-result update-index (conj (mid-result update-index) (first sequence))))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [input n]\n  (let [a0 (repeat n [])]\n    (loop [l input i 0 a a0]\n      (if (empty? l)\n        a\n        (recur (rest l)\n               (inc i)\n               (let [bag (rem i n)]\n                 (concat (take bag a)\n                         (vector (conj (nth a bag) (first l)))\n                         (drop (inc bag) a))))))))","problem":43,"user":"5341b141e4b00652c8746ecf"},{"problem":43,"code":"(fn reverseInterleave [coll nsub]\n  (loop [coll coll index nsub output []]\n    (if (= index 0)\n      output\n    (recur (rest coll) (dec index) (conj output (map first (partition-all nsub nsub coll)))))))","user":"57131dfbe4b07c98581c3a98"},{"problem":43,"code":"(fn [xs n]\n  (map #(take-nth n %) (map #(drop % xs) (range n))))","user":"5136f659e4b04059df19f2fd"},{"problem":43,"code":"(fn [arr, splitnum]\n\t(loop [i 0, result []]\n\t\t(println i result)\n\t\t(if (= i splitnum)\n\t\t\tresult\n\t\t\t(recur\n\t\t\t\t(inc i)\n\t\t\t\t(conj result (filter (fn [elem] (not= elem nil)) (map-indexed ; 1: index, 2: elem\n\t\t\t\t\t#(if (= i (mod %1 splitnum)) %2 nil)\n\t\t\t\t\tarr)))\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":43,"code":"(fn [li n] \n  (apply map list (partition n li)))","user":"56c7d8dee4b0ed865f9758c9"},{"code":"(fn [xs n] \n  (map #(map first (second %))\n       (group-by second (map #(vec [%1 %2]) xs (cycle (range n))))))","problem":43,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":43,"code":"(fn p43 [xs n]\n  (letfn ((bucketize ([xs n] (bucketize xs n []))\n            ([xs n v] (if (empty? xs) v (bucketize (drop n xs) n (conj v (first xs)))))))\n    (for [i (range n)]\n      (bucketize (drop i xs) n))))","user":"550ff2a3e4b06e50f9beb17f"},{"code":"(fn rev-inter [coll x]\n  (concat (reverse (map reverse (vals\n    (loop [i 0\n           res {}\n           coll coll]\n      (if (empty? coll)\n        res\n        (let [mdi (mod i x)]\n          (recur (inc i) (merge res [mdi (cons (first coll) (res mdi))]) (rest coll))))))))))","problem":43,"user":"51195e77e4b055cfb310d499"},{"problem":43,"code":"(fn r [v n]\n  (apply map vector (partition n v)))","user":"4eeb8f68535d93acb0a668a9"},{"problem":43,"code":"(fn [seq n]\n  (map second (group-by #(mod % n) seq)))","user":"5456e4e7e4b080a794c2c883"},{"problem":43,"code":"(fn [coll n]\n(loop [zed n ls [] rst coll]\n(if (= zed 0)\nls\n(recur (- zed 1) (conj ls (take-nth n rst)) (rest rst) ))))","user":"565b941ce4b068f2fe63dc07"},{"problem":43,"code":"(fn [array index] (apply map list (partition index array)))","user":"5de65feee4b0986d99407f68"},{"problem":43,"code":"(fn [coll step] (map (fn [offset] (take-nth step (nthnext coll offset))) (range 0 step)))","user":"54461393e4b032a45b8693a5"},{"problem":43,"code":"(fn [a-seq n]\n   (map #(take-nth n (drop % a-seq)) (range n)))","user":"544e9022e4b0e3978000698b"},{"code":"#(apply (partial map list) (partition %2 %))","problem":43,"user":"4ede361a535d10e5ff6f5332"},{"problem":43,"code":"(fn reverese-pro [coll n]\n  (let [coll (partition n n coll )]\n    (for [i (range n)]\n      (map #(nth %1 i) coll))))","user":"5634995fe4b0bfe05bf117be"},{"problem":43,"code":"#(let [eles (apply interleave (partition %2 %1))] (partition (/ (count eles) %2) eles))\n;(fn [xs n] (apply map vector (partition n xs)))","user":"54ce541de4b057c6fda3a2ac"},{"problem":43,"code":"(fn demux [coll n]\n  (vals\n   (into (sorted-map)\n         (reduce-kv\n          (fn [m k v] (assoc m k (map (fn [[x _]] x) v)))\n          {}\n          (group-by\n           (fn [[_ n]] n)\n           (map vector coll (cycle (range n))))))))","user":"55d204abe4b0e31453f64a4f"},{"problem":43,"code":"(fn [xs n]\n  (loop [ys xs\n         rs (repeat n [])]\n    (if (empty? ys)\n      rs\n      (recur (drop n ys) (map conj rs (take n ys))))))","user":"5283a919e4b0239c8a67adbe"},{"problem":43,"code":"(fn tw [xs n]\n  (for [i (range n)] \n    (take-nth n (drop i xs))))","user":"56bca51ae4b0f26550335963"},{"code":"#(map second (group-by (fn [n] (rem n %2)) %))","problem":43,"user":"4eeaf88f535d93acb0a668a3"},{"problem":43,"code":"(fn [v n]\n  (let [ join-list (fn [l1 l2] (map #(list %1 %2) l1 l2))]\n    (map flatten \n      (reduce join-list\n        (partition n v)))))","user":"55c77070e4b0e31453f649d0"},{"problem":43,"code":"(fn [coll x] (letfn [( get-slice [coll start step] \n    (loop [c coll s step i start acc ()] \n      (if c \n        (if (= i 0) \n          (recur (next c) s (dec s) (conj acc (first c))) \n          (recur (next c) s (dec i) acc)) \n        (reverse acc))))\n                  (reverse-interleave [coll step]\n    (map #(get-slice coll % step) (range step)))]\n            (reverse-interleave coll x)))","user":"560bb1f7e4b05f002753df20"},{"problem":43,"code":"(fn [coll n]\n              (let [m (reduce (fn [acc i]\n                                (let [k (mod i n)\n                                      v (get acc k '())]\n                                  (assoc acc k (concat v [(nth coll i)])))) {} (range (count coll)))]\n                (->> m sort (map second))))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"code":"(fn [coll n]\n    (map #(map second %) (vals (group-by #(mod (first %) n) (map list (iterate inc 0) coll)))))","problem":43,"user":"4fc66c43e4b0ee37620e1812"},{"code":"#(map second\n      (sort-by first\n               (into [] (apply merge-with concat (map-indexed (fn [i it]{(mod i %2) [it]}) %)))))","problem":43,"user":"51b41150e4b0f094dd986fac"},{"code":"#(apply map list\n  (partition-all %2 %))","problem":43,"user":"4f6511eee4b07046d9f4ef3a"},{"problem":43,"code":"(fn rev-inter [l x]\n    (loop [v (into [] (repeat x []))\n           [f & l] l\n           i 0] \n      (if (nil? f) v\n          (recur\n           (assoc-in v [i] (into (v i) [f]))\n           l\n           (rem (inc i) x)\n           ))))","user":"4eb97234535dfed6da9c6d53"},{"problem":43,"code":"(fn [eles num]\n      (map reverse ((fn deinterleave [queue eles]\n                      (if (empty? eles)\n                        (map identity queue)\n                        (let [cur-list (first queue)\n                              rest-of-lists (pop queue)]\n                          (deinterleave (conj rest-of-lists (conj cur-list (first eles)))\n                                        (rest eles)))))\n                    (into clojure.lang.PersistentQueue/EMPTY\n                          (repeat num '()))\n                    eles)))","user":"55d95be7e4b0e31453f64ac9"},{"problem":43,"code":"#(loop [x 0 acc []]\n  (if (= x %2)\n    acc\n    (recur (inc x) (conj acc (take-nth %2 (drop x %1))))))","user":"53ed03f0e4b0d648e757f4bb"},{"problem":43,"code":"(\n    fn [coll, idx]\n    (\n      apply map vector (partition idx coll)\n      )\n    )","user":"547f3434e4b0c51c1f4d7319"},{"problem":43,"code":"(fn [inseq prt-num]\n    (let [inx-map (apply hash-map (interleave (range (count inseq)) inseq))] \n        (loop [ret []\n                cnt 0]\n            (if (= cnt prt-num)\n                ret\n                (recur (concat ret [(reduce #(concat %1 [(inx-map %2)]) [] \n                        (filter #(= 0 (mod (- % cnt) prt-num)) (sort (keys inx-map))))])\n                    (inc cnt))))))","user":"54f09599e4b024c67c0cf89d"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n\t  (group-by #(mod % n))\n      vals\n      (map seq)))","user":"540e97f9e4b0addc1aec671f"},{"problem":43,"code":"(fn [list num]\n  (map #(map first %)\n       (vals\n         (group-by (fn [[a b]] (mod a num))\n                   (map (fn [x] [x (inc x)]) list)))))","user":"5c44f0fde4b0e06e1360a384"},{"code":"(fn [l n]\n  (vals (apply merge-with concat\n    (map #(hash-map % [%2])\n         (cycle (range n))\n         l))))","problem":43,"user":"4f244f26e4b0d66497709fea"},{"code":"(fn [coll n]\n  (let [k (/ (count coll) n)]\n    (partition-all k (apply interleave (partition-all n coll)))))","problem":43,"user":"4e1b8106535d04ed9115e801"},{"problem":43,"code":"(fn [s n]\n  (for [x (range n)] (take-nth n (drop x s))))","user":"53edb464e4b0d648e757f4c7"},{"problem":43,"code":"#(map (fn [i] (take-nth %2 (nthnext %1 i))) (range %2))","user":"578b140be4b0ebec4cfb7545"},{"problem":43,"code":"(fn [c x]\n  (->> (map vector (cycle (range x)) c)\n       (group-by first)\n       (into (sorted-map))\n       (vals)\n       (map #(map second %))))","user":"580bd81ee4b0849f6811b711"},{"problem":43,"code":"(fn subseq [s n]\n  (vals (group-by #(mod % n) s)))","user":"57a9e274e4b0b8559636fc5d"},{"code":"(fn [l n] (apply map list (partition n l)))","problem":43,"user":"53767991e4b06839e8705e25"},{"code":"#(vals (group-by (fn[x](rem x %2)) %))","problem":43,"user":"522454f4e4b01819a2de42d3"},{"problem":43,"code":"(fn [the-sequence frequency]\n  (map seq (vals (group-by #(mod % frequency) the-sequence))))","user":"4fbfbd4fe4b081705acca31c"},{"problem":43,"code":"(fn [coll num]\n  (for [x (range 0 num)]\n    (map #(nth coll %1) (range x (count coll) num))\n  )\n)","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":43,"code":"(fn di [coll n] \n   (reduce \n    #(map conj %1 %2) \n    (repeat n []) \n    (partition n coll)))","user":"55249f64e4b0882d96d091c6"},{"code":"(fn f\n  ([xs n] (f xs 0 n []))\n  ([xs i n a]\n    (if (= i n)\n      a\n      (f xs (inc i) n (conj a (take-nth n (drop i xs)))))))","problem":43,"user":"508ee17ae4b0706b2ed3ef8d"},{"problem":43,"code":"(fn [coll n]\n  (partition-all (/ (count coll) n) \n                 (apply interleave (partition-all n coll))))","user":"58ac1135e4b0005cfeb1a73f"},{"problem":43,"code":"#(apply (partial map (fn [& args] args)) (partition %2 %1))","user":"59afe4bae4b0e1f4e384c8c0"},{"code":"(fn rev-interleave [seq n]\n    (if (empty? seq)\n      '()\n      (take n (cons (take-nth n seq) (rev-interleave (rest seq) n)))))","problem":43,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn revint [xs divider]\n        (letfn [(create-n [n]\n                          (loop [x n\n                                 v []]\n                                (if (zero? x)\n                                    v\n                                  (recur (dec x)\n                                         (conj v [])))))\n                (conj-n [xs n v]\n                        (update-in xs [n] #(conj % v)))\n                (internal [xs n acc]\n                          (if (empty? xs)\n                              acc\n                            (internal (rest xs)\n                                      (inc n)\n                                      (conj-n acc\n                                              (mod n divider)\n                                              (first xs))\n                                      )))]\n               (internal xs 0 (create-n divider))))","problem":43,"user":"51a8f0c6e4b08d8ec191b821"},{"problem":43,"code":"(fn revInt [v x]\n\t(let [sz (/ (count v) x)]\n\t\t(partition-all sz \n\t\t\t(apply interleave (partition-all x v))\n\t\t)\n\t)\n)","user":"5472d919e4b094393f72dd7b"},{"problem":43,"code":"(fn [coll n] (apply map list( partition-all n coll)))","user":"5fc1c424e4b0edf42a5593d0"},{"problem":43,"code":"(fn [coll n] (map last (group-by #(mod % n) coll)))","user":"5857d27de4b0f14aab7c8710"},{"code":"(fn rin [s n] (if (empty? s) (repeat n []) (map cons (take n s) (rin (drop n s) n))))","problem":43,"user":"50dfb660e4b061dbdced7228"},{"problem":43,"code":"(fn rev-inter [lat n]\n  (partition (/ (count lat) n) (apply interleave (partition n lat))))","user":"58d737cee4b03c36ff7e5982"},{"problem":43,"code":"(fn [seq n]\n  (map\n   (fn [c]\n     (take-nth n (drop c seq)))\n   (range n)))","user":"540d5085e4b0addc1aec670e"},{"problem":43,"code":"#(->> (partition %2 %1) \n      (apply map vector))","user":"5b81139fe4b047b03b203782"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (for [x (range n)]\n    ((fn [coll k n]\n      (for [x (range (count coll))\n            :when (= (mod x n) k)]\n        (nth coll x)))\n        coll x n)))","user":"5f38eecce4b0574c87022c72"},{"code":"(fn un-inter\n  [s n]\n  (apply map (fn [& parts]\n               (apply vector parts))\n         (partition n s)))","problem":43,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":43,"code":"(fn [ls stp] (apply map vector (partition stp ls)))","user":"5b552117e4b02d533a91bd2c"},{"problem":43,"code":"(fn [lst n]\n  (loop [remaining lst res (vec (repeat n [])) i 0]\n    (if (empty? remaining)\n      res\n      (let [k (mod i n)]\n      \t(recur (rest remaining)\n               (assoc res k (conj (res k) (first remaining)))\n               (inc i))))))","user":"539ddf25e4b0b51d73faaf3e"},{"code":"(fn [l n]\n  (loop [l l\n         v (for [i (range n)] [])\n         index 0]\n    (if-let [f (first l)]\n      (recur (next l) \n             (map-indexed \n               (fn [i s] \n                  (if (= i index)\n                    (conj s f)\n                    s))\n               v)\n             (rem (+ 1 index) n))\n      v)))","problem":43,"user":"4e498df9535dc968683fc4c4"},{"code":"(fn [lst n]\n(map\n  #(map fnext %)\n  (vals\n    (group-by\n      #(rem (first %) n)\n      (map-indexed #(list % %2) lst)))))","problem":43,"user":"50c9ece0e4b0a409464667d8"},{"problem":43,"code":"(fn [a x]\n  (map (fn [shift]\n         (filter #(not (nil? %))\n                 (map-indexed #(if (= shift (mod %1 x)) %2) a)))\n       (range x)))","user":"58d96bdce4b0a4d5acaab638"},{"code":"(fn [a n]\n  (letfn [(every-nth [a n]\n            (if (empty? a)\n              a\n              (cons (first a)\n                    (every-nth (drop n a) n))))]\n    (for [i (range n)]\n      (every-nth (drop i a) n))))","problem":43,"user":"4fde492be4b05e33b9224f8a"},{"problem":43,"code":"(fn intleave [x y] \n(letfn [\n  (numerigi [a b] (map vector (cycle (range b)) a ))\n  (grupigi [c] (apply merge-with concat  (map #(hash-map (first %) [(last %)]) c))) ]\n(-> x (numerigi y) grupigi vals)))","user":"5576e78de4b05c286339e075"},{"problem":43,"code":"(fn [xs n] (map #(map second (second %)) (group-by first (map-indexed (fn [x y] [(mod x n) y]) xs))))","user":"54149f2fe4b01498b1a719ec"},{"code":"(fn [coll n]\r\n  (let [partitioned (partition-all n coll)]\r\n    (loop [i (dec n) acc '()]\r\n      (if (< i 0) acc\r\n        (recur (dec i) (cons (map #(nth % i) partitioned) acc))))))","problem":43,"user":"50ba4b9ee4b03e68e4411c7b"},{"code":"(fn reverse-interleave [lst n]\n  (map reverse  (reverse (vals\n                          (dissoc\n                                   (reduce\n                                    (fn [xs x]\n                                      (comment (println xs))\n                                      (let [key (xs :next) new-val (conj (xs key) x)]\n                                        (assoc\n                                            (assoc xs key new-val)\n                                          :next (if (= key n) 1 (+ key 1)))))\n                                    {:next 1}\n                                    lst)\n                                   :next)))))","problem":43,"user":"527ccaf4e4b0757a1b17136d"},{"problem":43,"code":"(fn foo \n  ([coll toTake] \n   (foo coll toTake 1)) \n  ([coll toTake taken] \n   (let [next (take-nth toTake coll)] \n     (if (= toTake taken) \n       (list next) \n       (cons next (foo (rest coll) toTake (+ taken 1)))))))","user":"5509bec5e4b06e50f9beb121"},{"code":"(fn rev-interleave\n   [list-val num]\n   (reduce\n    (fn [val1 val2]\n      (concat\n       (rest val1)\n       [(conj (first val1) val2)]))\n    (vec (repeat num []))\n    list-val))","problem":43,"user":"4f03818e535dcb61093f6b00"},{"problem":43,"code":"(fn [ls n]\n  (let [lss (repeat n ls)\n        pos (range n)\n        lss2 (map list lss pos (repeat n))\n        disp (fn [xs p n] (keep-indexed (fn [i v] (if (= p (mod i n)) v nil)) xs))]\n    (map #(apply disp %) lss2)))","user":"56761ab1e4b05957ce8c6154"},{"problem":43,"code":"(fn reverse-interleave\n  ([seq x]\n   (reverse-interleave seq x (vec (repeat x [])) 0))\n  ([seq x new-seq y]\n   (if (empty? seq)\n     new-seq\n     (reverse-interleave (rest seq)\n                         x\n                         (assoc new-seq (mod y x) (conj (nth new-seq (mod y x)) (first seq)))\n                         (+ y 1)))))","user":"540271aee4b0df28a13c62d0"},{"problem":43,"code":"(fn deinterleave\n  [s n]\n  (reduce (fn [result v] (map conj result v))\n          (take n (repeat []))\n          (partition n s)))","user":"563f1493e4b08d4f616f5ecf"},{"problem":43,"code":"#(loop [[head & tail] %1\n           i 0\n           result (vec (repeat %2 []))]\n    \n      (if-not head\n        result\n        (recur tail (inc i) (assoc result  (mod i %2)  (conj  (nth result (mod i %2) )  head )   ))\n        \n       ))","user":"598085e6e4b021a7a535fdd3"},{"problem":43,"code":"(fn [s n]\n  (for [m (range n)] (take-nth n (nthrest s m))))","user":"592ac17ae4b072a2710fcf26"},{"problem":43,"code":"(fn [coll n] (map take-nth (repeat n) (map #(drop % %2) (range n) (repeat coll))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":43,"code":"(fn [x k]\n  (loop [xi (first x) xs (next x) i 0 res (vec(concat [] (repeat k [])))]\n    (if-not xi\n      res\n      (recur (first xs) (next xs) (mod (inc i) k) (assoc res i (conj (get res i) xi)))\n    )\n  )\n)","user":"589f2cefe4b02bd94d917e75"},{"code":"(fn reverse-interleave [x, i]\n  (map #(take-nth i (nthnext x %))\n       (range i)))","problem":43,"user":"513b43ede4b067e25a345ed3"},{"code":"#(map (partial take-nth %2) (map nthrest (repeat %) (range %2)))","problem":43,"user":"50b65966e4b0a86f8358ca6c"},{"code":"(fn [coll n]\n  (reduce\n    (partial map\n      #(concat (if (seq? %1) %1 [%1]) [%2]))\n    (partition n coll)))","problem":43,"user":"4f725466e4b07046d9f4f030"},{"problem":43,"code":"(fn [coll n]\n  (loop [coll coll i 0 res []]\n    (if (= i n)\n       (seq res)\n       (recur \n          (rest coll) \n          (inc i)\n          (conj\n             res\n             (apply concat \n                (partition 1 n coll)) \n             )))))","user":"5167e8ace4b0c5a4140a309a"},{"problem":43,"code":"(fn [seq anz]\n    (let [v (vec seq)]\n      (for [start (range anz)]\n           (for [i       (range (count v))\n                 :let [element (get v i)]\n                 :when (= start (mod i anz))]\n               element))))","user":"59089229e4b047aa04b1997c"},{"code":"(fn [xs n] (reduce (fn [rs i] (conj rs (take-nth n (drop i xs)))) [] (range n)))","problem":43,"user":"4f50d933e4b03ad3f0c10d11"},{"problem":43,"code":"(fn [coll g]\n  (apply map vector (partition g coll)))","user":"541475afe4b01498b1a719eb"},{"problem":43,"code":"(fn [coll n]\n  (map seq\n       (vals\n         (loop [c coll\n                result (sorted-map)\n                index 0]\n           (let [k (rem index n)\n                 v (get result k)\n                 e (first c)]\n             (if (empty? c)\n               result\n               (recur (rest c)\n                      (if (nil? v)\n                        (assoc result k [e])\n                        (assoc result k (conj v e)))\n                      (inc index))))))))","user":"51a7fe50e4b08d8ec191b803"},{"code":"(fn [s n]\n  \"Interleave s into n subsequences\"\n  (let [i (apply interleave (partition n s))]\n    (partition (/ (count i) n) i)))","problem":43,"user":"50ebd63ce4b04edc3377703c"},{"problem":43,"code":"(fn [xs n]                                                                                                                                                                                                                                                                           \n       (map #(take-nth n %)    \n            (map #(nthrest xs %) (range n))))","user":"5de68f83e4b0986d99407f6c"},{"problem":43,"code":"(fn [xs n]\n  (loop [ys xs rs (for [x (range n)] [])]\n    (if (empty? ys)\n      rs\n      (let [[y & ys'] ys\n            [r & rs'] rs\n            r' (conj (into [] r) y)\n            rs'' (conj (into [] rs') r')]\n      (recur ys' rs''))))\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn reverse-interleave [xs n]\n  (let [sliced (partition n xs)]\n    (for [i (range n)]\n      (map #(nth % i) sliced))))","problem":43,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn [s n] (partition (/ (count s) n) (apply interleave (partition n s))))","problem":43,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"#(map (partial map second)\n     (vals (group-by first\n                     (map-indexed\n                      (fn [idx item] [(rem idx %2) item])\n                      %1))))","problem":43,"user":"5139ff96e4b067e25a345ec1"},{"problem":43,"code":"(fn reverseLeave \n  ([x n ] \n   \t(comment \"build an initial result map with keys 0,..n-1 each mapped to empty list\")\n   \t(reverseLeave x n (zipmap (range 0 n) (repeat n [])) 0))\n  ([x n resultMap i] \n   \t(comment \"if no more elements, return the resulting values as a list of lists, otherwise add next element to the right bucket and recurse\")\n    (if (empty? x)\n        (vals (into (sorted-map) resultMap))\n        ( reverseLeave (rest x) n (update-in resultMap [i] (fn [oldVal] (conj oldVal (first x)))) (rem (inc i) n)  )\n    )\n  )\n)","user":"55d35a01e4b0e31453f64a63"},{"code":"#(take %2 ((fn gen-seq[x] (cons x (lazy-seq(gen-seq (map inc x))))) (take-nth %2 %)))","problem":43,"user":"531576b4e4b08068f379ed29"},{"problem":43,"code":"(fn [xs n]\n  (let [size (count xs)\n        max-elem (last xs)]\n    (filter #(= (/ size n) (count %)) (map #(for [x (range % (inc max-elem) n)]\n            x) xs))))","user":"5cc75ffce4b0ccb061962836"},{"problem":43,"code":"(fn [xs n]\n  (map #(take-nth n (drop % xs)) (range n)))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn revinter ([xs n] (revinter [] xs n))\n  \t\t\t ([acc xs n] (if (= (count acc) n)\n                             acc\n                             (recur (conj acc (take-nth n xs)) (rest xs) n)\n                         )\n             )\n  )","problem":43,"user":"52bf8e35e4b07a9af579233a"},{"problem":43,"code":"(fn [collection n]\n      (->> collection\n           (map-indexed (fn [idx item]\n                          [idx item]))\n           (group-by (fn [[idx item]]\n                       (mod idx n)))\n           (map (fn [[key idx-item-pairs]]\n                  (map second idx-item-pairs)))))","user":"53f891eee4b0de5c4184856d"},{"problem":43,"code":"(fn [data limit]\n  (loop [i 0 result []]\n    (if (< i limit)\n      (recur (inc i) (into result (list (map #(nth % i) (partition limit data)))))\n      result)))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":43,"code":"(fn [v d] (map (fn [x] (map #(nth % x) (partition d v ))) (range d) ))","user":"58a9e872e4b01a0c0b232973"},{"problem":43,"code":"(fn reverse-interleave\n  [s n]\n  (partition (/ (count s) n)\n   (apply interleave\n          (partition n s))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [seq n]\r\n  (loop [part-seqs '() rmd-seq seq i 0]\r\n    (if (= n i)\r\n      (reverse part-seqs)\r\n      (recur (conj part-seqs (take-nth n rmd-seq)) (rest rmd-seq) (inc i)))))","problem":43,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn inter [collect num]  \n  (loop [col collect,n 0,result (reduce (fn[col,_] (conj col [])) [] (range 0 num) ) ]\n    \n    (if (empty? col)\n       result\n       \n       (recur (rest col) (inc n)\n              (let [n_ (mod n num) ]\n              (assoc result  n_\n                   (conj (nth result n_) (first col))\n                )\n              )\n       )\n    )\n  )  \n  \n )","problem":43,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"#(partition \n  (quot (count %1) %2) \n  (apply interleave (partition %2 %1)))","problem":43,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":43,"code":"(fn [lst n] (apply (partial map vector) (partition n lst)))","user":"59f8b925e4b0ca45a743a327"},{"problem":43,"code":"(fn [x y]\n  (loop [index 0 sub-seqs []]\n    (if (= index y)\n      sub-seqs\n      (recur (inc index) (conj sub-seqs (loop [sub-index index sub-seq []]\n                              (if (>= sub-index (count x))\n                                sub-seq\n                                (recur (+ sub-index y) (conj sub-seq (nth x sub-index))))))))))","user":"56288ccae4b00e49c7cb47ea"},{"code":"(fn [s n]\n    (map (fn [c] (map second c))\n         (vals\n          (group-by first (map vector\n                               (cycle (range n))\n                               s)))))","problem":43,"user":"50e4b066e4b0cb9ec68fbca6"},{"code":"#(apply map (fn [& more] apply list more) (partition %2 %))","problem":43,"user":"4e9b230c535dbda64a6f6b75"},{"code":"#(apply (partial map vector) (partition %2 %1))","problem":43,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn foo [s n] (for [i (range n)] ((fn foo2 [s n] (if (> (count s) n) (cons (first s) (foo2 (drop n s) n)) (cons (first s) '()))) (drop i s) n)))","problem":43,"user":"50f9c7fde4b0e7c80cb15a52"},{"code":"(fn [xs n]\n  (map\n    (fn [i] (flatten (partition 1 n (drop i xs))))\n    (range n)))","problem":43,"user":"4ef41f26535dced4c769f230"},{"problem":43,"code":"(fn [tab s] (map (fn [i] (keep-indexed #(if (= i (mod %1 s)) %2) tab))\n                  (range s)\n             )\n  )","user":"55e8a85be4b0121d4835fd98"},{"code":"(fn revinter [s n]\n  (partition (quot (count s) n) \n(apply interleave (partition n s))))","problem":43,"user":"50127fbfe4b030d97e4db70f"},{"problem":43,"code":"(fn [list n]\n    (letfn\n        [(_rever [list n i]\n            (if (<= i 0)\n                []\n                (cons\n                    (map #(nth %1 1)\n                        (filter\n                            (fn [itm] (= (mod (first itm) n) 0))\n                            (map-indexed vector list)))\n                    (_rever (rest list) n (- i 1)))))]\n            (_rever list n n)))","user":"57168a0de4b07c98581c3afb"},{"code":"(fn [xs n] (for [i (range n)]\n             (take-nth n (drop i xs))))","problem":43,"user":"50366589e4b0fbe0a74d26c3"},{"problem":43,"code":"(fn \n  [coll n]\n  (reduce #(map conj %1 %2) (repeat n []) (partition n coll)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":43,"code":"(fn [sq n]\n  (map \n    #(take-nth n %) \n    (map #(drop % sq) (range n))))","user":"55815973e4b05c286339e0f6"},{"code":"(fn break-up [coll n]\n  (for [i (range n)]\n    (keep-indexed (fn [idx item]\n                    (if (= i (mod idx n))\n                      item\n                      nil))\n                  coll)))","problem":43,"user":"4e7f51eb535db966e863cc3f"},{"problem":43,"code":"(fn rei\n  [init n]\n  (let [mix (map #(into [] %) (partition n init))]\n    (for [x (range n)]\n       (map #(get % x) mix))))","user":"53d6b266e4b0e771c3025459"},{"code":"(fn [initl num] \n\t   (let [mtl (into [](loop [x num l '()] \n                           (if (= x 0) l (recur (dec x) (conj l [])))))] \n\t    (loop [l mtl z initl r 0] \n          (if (empty? z) l \n            (recur \n             (update-in l [(mod r num)] #(conj % (first z))) \n             (rest z) \n             (inc r))))))","problem":43,"user":"503539dee4b0ed9c821488f6"},{"code":"(fn [s n]\n  (let [part (apply interleave (partition n s))]\n    (partition (/ (count part) n) part)))","problem":43,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn x [s n]\n  (partition (/ (count s) n) (apply interleave (partition n s))))","problem":43,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":43,"code":"#(for [s (range %2)]\n  (take-nth %2 (drop s %)))","user":"52bacfa8e4b07a9af57922d6"},{"problem":43,"code":"#(for [i (range %2)]\n   (map (partial nth %1) (range i (count %1) %2)))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":43,"code":"#(map (fn [n] (map (fn [a] (nth a n)) (partition %2 %1))) (range %2))","user":"5700f1f0e4b08d47c97781ce"},{"problem":43,"code":"(fn transpose\n  [xs n]\n  (apply map list (partition n n xs)))","user":"5c222b7de4b07e362c230588"},{"code":"#(map reverse\n  (loop [seq % result (take %2 (repeat ()))]\n    (if (< (count seq) %2)\n      result\n      (recur (drop %2 seq)\n             (map cons seq result)))))","problem":43,"user":"4e4ae5aa535dc968683fc4d2"},{"problem":43,"code":"#(sort (for [x (range %2)] (into [] (for [y %1 :when (= (mod y %2) x)] y))))","user":"5501de12e4b07d26eda61d7b"},{"code":"(fn [seqn n]\n  (apply map list (partition n seqn)))","problem":43,"user":"53834ed3e4b06839e8705edb"},{"problem":43,"code":"(fn [a-seq n]\n  (let [parted (partition n a-seq)]\n    (loop [acc '()\n           my-seq parted]\n      (cond\n        (every? empty? my-seq) (reverse acc)\n        :else (recur\n               (cons (map first my-seq) acc)\n               (map #(rest %) my-seq))))))","user":"505d1b01e4b0e6aca564be04"},{"problem":43,"code":"(fn reverse-interleave\n  [in-seq num]\n  (loop [out-seq []\n         temp-seq in-seq\n         i 0]\n    (if (= i num)\n      out-seq\n      (recur (conj out-seq (take-nth num temp-seq)) (drop 1 temp-seq) (inc i))))\n)","user":"5581a6dae4b05c286339e0fe"},{"problem":43,"code":"(fn [s x] (map #(map second %) (vals (group-by first (map list (cycle (range x)) s)))))","user":"505106fee4b05ab4c7e07d38"},{"problem":43,"code":";;#(apply map list (partition %2 %1))\n(fn [xs n] (apply map (fn [& xs] xs) (partition n xs)))","user":"595fd721e4b066ee0a44b06e"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (let [groups (vec (repeat n []))\n        f (fn [{:keys [groups index]} x]\n            {:index (inc index)\n             :groups (assoc groups (mod index n)\n                            (conj (get groups (mod index n)) x))})]\n    (:groups (reduce f {:groups groups :index 0} xs))))","user":"50aa777fe4b056ee01935866"},{"code":"(fn rev-interleave [seq n] \n  (map (fn [x] (take-nth n (drop x seq))) (range 0 n)))","problem":43,"user":"5268eb68e4b03e8d9a4a71c6"},{"problem":43,"code":"(fn [col x]\n    (apply map list (partition x col)))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":43,"code":"#(reduce\n  (partial map conj)\n  (repeat %2 [])\n  (partition %2 %))","user":"55aa7c5ce4b0988bba2ad94d"},{"code":"(fn [s c]\n  (map #(take-nth c (drop % s)) (range 0 c)))","problem":43,"user":"4e781a2e535d324fb2983d74"},{"problem":43,"code":"(fn ReverseInterleave [s n]\n  (loop [s s\n         r (repeat n ())]\n    (if (empty? s)\n      r\n      (let [x (take n s)]\n        (recur (drop n s)\n               (map (fn [a b] (concat a (list b)))\n                    r\n                    x))))))","user":"53b88e6ee4b047364c0444de"},{"code":"(fn [s n] (map #(map second %) (vals (group-by first (map vector (cycle (range n)) s)))))","problem":43,"user":"522a01ade4b0590a43906ced"},{"problem":43,"code":"(fn[xs n] (map #(map second %1) (vals (group-by #(mod (first %) n) (map vector (range) xs)))))","user":"56824e1be4b0945ebc182a91"},{"code":"#(partition-all (quot (count %1) %2) \n      (apply interleave (partition-all %2 %1)))","problem":43,"user":"4ef992c8535dced4c769f268"},{"code":"#((fn f [xxs ys i] \n    (if (empty? ys) xxs \n      (f (update-in xxs [i] (fn [_] (conj (nth xxs i) (first ys)))) (rest ys) (mod (inc i) %2))\n      )) (vec (repeat %2 [])) % 0)","problem":43,"user":"53976599e4b0b51d73faaeea"},{"code":"#((fn rev-inter [coll x]\n  (let [sub (fn sub-seq [coll x n]\n\t\t(when-let [c (seq coll)]\n\t\t\t(take-nth x c)\n\t\t\t\t(filter (fn [y] (= n (count y)))\n\t\t\t\t\t(cons (take-nth x c) (sub-seq (next c) x n)))))]\t\n\t(sub coll \n\t\t x \n\t\t (/ (count coll) x)))) %1 %2)","problem":43,"user":"4ee91d00535d93acb0a6688b"},{"problem":43,"code":"(fn [s a]\n  (loop [result [] offset 0]\n    (if (= offset a)\n      result\n      (recur (concat result [((fn [s n offset]\n                                (keep-indexed \n                                 (fn [index value] \n                                   (if (= (mod index n) offset)\n                                     value\n                                     )\n                                   ) s)\n                                )\n                              s a offset)]) (inc offset))\n      )\n    )\n  )","user":"55c5261ee4b0e31453f649ae"},{"problem":43,"code":"#(for [i (range 0 %2)]\n      (for [j (range 0 (- (count %) i) %2)]\n        (nth % (+ i j))\n))","user":"58b81490e4b0ebc645576d8c"},{"problem":43,"code":"(fn [col n]\n  (->> col\n       (partition n)\n       (apply map (fn [& args] args))))","user":"542c22bde4b0dad94371f29e"},{"code":"(fn [xs n] (map #(take-nth n %) (map #(% xs) (map #(partial drop %) (range n)))))","problem":43,"user":"52f10094e4b05e3f0be25ee8"},{"problem":43,"code":";; (fn [coll n]\n;;   (->> coll (map-indexed #(vector %1 %2)) (group-by #(mod (first %) n)) ((fn [c] (for [i (range n)] (map second (c i)))))))\n;; (fn [coll n]\n;;  (for [i (range n)] (for [k (range (/ (count coll) n))] (nth coll (+ i (* n k))))))\n(fn [coll n]\n  (letfn [(each-nth [coll n]\n                    (if (empty? coll)\n                      []\n                      (lazy-seq (cons (first coll) (each-nth (drop n coll) n)))))]\n    (for [i (range n)] (each-nth (drop i coll) n))))","user":"55afd469e4b002ce9d5cbc19"},{"code":"(fn rev-interleave [s n]\n  (let [parts (partition n s)]\n    (loop [\n           result [], \n           counter (count (first parts)), \n           d parts\n           ]\n      (if (zero? counter)\n        result\n        (recur \n          (conj result (map first d))\n          (dec counter)\n          (map rest d)\n          )))))","problem":43,"user":"52cf084ce4b07d0d72b27399"},{"problem":43,"code":"(fn [l n] (mapcat #(list (take-nth n (drop % l))) (range n)))","user":"548c8115e4b0e286459a120c"},{"problem":43,"code":"(fn [coll n]\n      (loop [ret []\n             ct 0]\n        (if (= ct n)\n          ret\n          (recur (conj ret (take-nth n (map #(+ % ct) coll)))\n                 (inc ct)))))","user":"5386f784e4b06839e8705f17"},{"code":"(fn f [xs n] \n      (reduce #(map conj %1 %2) (repeat n []) (partition n xs))\n      )","problem":43,"user":"50eafeaae4b0346a3e988cbb"},{"code":"#(for [i (range %2)] (take-nth %2 (drop i %1)))","problem":43,"user":"4f215350e4b0d66497709fd0"},{"problem":43,"code":"(fn [c b] (vals (group-by #(mod % b) c)))","user":"5961e8d0e4b066ee0a44b0a8"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (apply map list (partition n coll)))","user":"59c94a69e4b0a024fb6ae576"},{"problem":43,"code":"#(for [x (range %2)]\n  (concat (take-nth %2 (drop x %1))))","user":"54982522e4b0b312c081ff7c"},{"code":"(fn [c n]\n  (partition\n    (/ (count c) n)\n    (apply interleave (partition n c))))","problem":43,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (let [split-array (partition n coll)]\n    (apply map vector split-array)))","user":"5720a2b0e4b0c5bde472c099"},{"code":"#((fn [l] (partition (count l) (count l) nil (apply interleave l))) (partition %2 %2 nil %1))","problem":43,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":43,"code":"(fn [col n] (map #(map first %) (partition-by second (sort-by second (map list col (cycle (range n)))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn re-inte [se n]\n  (take n (lazy-seq\n    (cons (take-nth n se)\n          (re-inte (drop 1 se) n)))))","problem":43,"user":"51cacda3e4b068dadb8f2227"},{"problem":43,"code":"(fn foo2\n  [coll n]\n  (loop [x 0 resultcoll (empty coll)]\n    (if (< x n) \n      (recur (inc x) \n             (cons  (for [x1 coll y1 (range (count (vec coll))) :when (= x1 (get (vec coll) y1)) :when (= x (rem y1 n))] x1) resultcoll)) \n      (reverse resultcoll))))","user":"598d0dc3e4b02b9968b84d18"},{"problem":43,"code":"(fn [lst n]\n  (let [partitions (partition n lst)] \n  \t(loop [ps partitions r []]\n   \t  (if (every? true? (map empty? ps))\n\t\tr\n\t    (recur (map rest ps) (conj r (map first ps)))))))\n\n; (fn rev-int [v n]\n;  (apply map vector (partition n v)))","user":"5448616be4b032a45b8693c9"},{"problem":43,"code":"(fn [s n] (map #(map (fn[x](nth x %)) (partition n s))\n                               (range n)))","user":"56baab13e4b0f26550335948"},{"problem":43,"code":"#(partition\n  (/ (count %1) %2)\n  (apply interleave (partition %2 %1)))","user":"4f037faf535dcb61093f6af8"},{"code":"(fn deinterleave [a b] (for [i (range b)] (take-nth b (drop i a))))","problem":43,"user":"50ef56dfe4b0bdaecbb47d94"},{"code":"(fn [s n]\n   (reduce (fn [a i]\n             (map conj a i)\n             ) (for [x (range n)] []) (partition n s))\n   )","problem":43,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":43,"code":"(fn my-inter [xs n]\n  (let [inter (fn [in-coll out-colls counter]\n               (if (empty? in-coll)\n                 out-colls\n                 (recur (rest in-coll)\n                        (concat (rest out-colls) (list (conj (first out-colls) (first in-coll))))\n                        (mod (inc counter) n))))]\n    (reverse \n     (inter (reverse xs)\n           (take n\n                 (repeat '()))\n           0))))","user":"579c73fee4b05b1deef9ae08"},{"code":"#(partition (/ (count %1 ) %2) (apply interleave (partition %2 %1)))","problem":43,"user":"50432da5e4b034ff00315d1e"},{"problem":43,"code":"(fn [v n]\n    (map #(map (vec v) %)\n    (map #(map (fn [x](+ (* x n) %)) (range (/ (count v) n))) \n                (range  n))))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":43,"code":"(fn [a-seq n]\n  (let [part-by-idx (->> a-seq\n                         (map-indexed #(vector (rem %1 n) %2))\n                         (group-by #(first %))\n                         (vals))]\n    (for [x part-by-idx]\n      (for [y x]\n        (second y)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":43,"code":"(fn rev-inter [coll n]\n  (apply map list (partition n coll)))","user":"541f5b37e4b01498b1a71a97"},{"problem":43,"code":"(fn [coll n]\n  (apply (partial map list) (partition n coll)))","user":"567695c2e4b05957ce8c6157"},{"code":"(fn ri\r\n  [s n]\r\n  (map (fn [indices] (map #(nth s %) indices))\r\n       (let [end (count s)] (map #(range % end n) (range n)))))","problem":43,"user":"4fc50441e4b081705acca36f"},{"problem":43,"code":"(fn [coll x]\n    (reduce (fn [result [index item]]\n              (let [\n                    ; Index within outer vector\n                    outer-index (rem index x)\n                    ; Index within the nested vector\n                    nested-index (int (/ index x))\n                    ]\n                (assoc-in result \n                          [outer-index nested-index]\n                          item ; item to insert\n                          ))\n              )\n            ; Resultant vector e.g. [[] [] []] for x = 3\n            (vec (take x (repeatedly vector)))\n\n            ; Sequence  to reduce\n            (map-indexed (fn [index item] [index item]) coll)\n            )\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":43,"code":"(fn pia [v n]\n  (apply map vector (partition-all n v)))","user":"569ce6fee4b0542e1f8d146c"},{"problem":43,"code":"(fn [v n]\n    (loop [v_ v i 0 r []]\n        (if (seq v_)\n            (if (= i n)\n                (recur v_ 0 r)\n                (if (<= (count r) i)\n                    (recur (rest v_) (inc i) (conj r [(first v_)]))\n                    (recur (rest v_) (inc i) (assoc r i (conj (nth r i) (first v_))))))\n            r)))","user":"55975569e4b031d6649c9b8e"},{"code":"(fn f [x num]\n  (let [size (count x)]\n    (map (fn [start] (map #(nth x %) (range start size num))) (range num))\n    ))","problem":43,"user":"5302ac7fe4b0d8b024fd3731"},{"code":"(fn [l n]\r\n  (map-indexed (fn [i v]\r\n                  (loop [r () \r\n                         x 0]\r\n                    (if (>= x (/ (count l) n))\r\n                      (reverse r)\r\n                      (recur (conj r (nth l (+ i (* n x)))) (+ 1 x))))\r\n                  )\r\n               (range n))\r\n  )","problem":43,"user":"4ff07688e4b0678c553fc324"},{"code":"(fn rev-int [coll n] (apply map list (partition n coll)))","problem":43,"user":"50fc48dde4b0d10d794c19f6"},{"problem":43,"code":"(fn [coll n] \n  (sort #(compare (nth %1 0) (nth %2 0)) (for [i (range n)] \n    (for [x coll\n          :when (= i (rem x n))]\n      x))))","user":"5918db70e4b09b4ee5954bbb"},{"code":"(fn [seq n]\n  (for [i (range n)] (take-nth n (drop i seq))))","problem":43,"user":"530578ede4b0d8b024fd3760"},{"problem":43,"code":"(fn [s n]\n(for [i (range 0 n)]\n     (take-nth n (drop i s))))","user":"55469eede4b0a04f79299542"},{"problem":43,"code":"(fn [coll n]\n                       ( loop [coll coll\n                               res (vec (repeat n []))]\n                         (if (>= (count coll) n)\n\n                            (let [xxx (vec (take n coll))]\n                              (println xxx)\n                              (println res)\n                              (recur (drop n coll) (map-indexed (fn [indx elt] (conj elt (nth xxx indx)))\n                                                                res)))\n                            res\n                           )\n                         )\n\n\n                       )","user":"5ab575f8e4b073f17744263d"},{"problem":43,"code":"(fn [merged n] (apply mapv vector (partition n merged)))","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn [col nlists]\n       (let [shuffled (apply interleave (partition nlists col))\n       nperlist (quot (count col) nlists)]\n\t     (partition nperlist shuffled)\n       )\n       )","problem":43,"user":"4eae2f9e535d7eef30807324"},{"code":"(fn [c n]\n   (let [p (partition-all n c)\n         slicer-fns (for [pos (range 0 n)] (fn [l] (nth l pos)))]\n     (map #(map % p) slicer-fns)))","problem":43,"user":"500ea957e4b00fff93030f9b"},{"problem":43,"code":"(fn [coll el] (apply map list (partition el coll)))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":43,"code":";#(map take-nth (repeat %2 %2) (iterate rest %1))\n#(apply map list (partition %2 %1))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":43,"code":"(fn [sq divs]\n  (->> sq\n       (map-indexed (fn [idx itm] [(mod idx divs) itm]))\n       (group-by first)\n       vals\n       (map (partial map second))))","user":"55912230e4b027778923767a"},{"code":"(fn [seqn n]\n  (let [grouped (group-by #(mod (% 1) n)\n                          (map vector seqn (range)))]\n    (map (comp (partial map first) grouped)\n         (sort (keys grouped)))))","problem":43,"user":"53889587e4b0640c7a9a589e"},{"problem":43,"code":"(fn [l n] (apply map list (partition-all n l)))","user":"54edcf96e4b024c67c0cf866"},{"problem":43,"code":"(fn [l n] (apply map list (partition  n l)))","user":"566e6850e4b0a866af6896da"},{"problem":43,"code":"(fn rev-interleave [s n]\n  (loop [i n\n         res []]\n    (if (= i 0)\n      res\n      (recur\n       (- i 1)\n       (conj res (second (reduce\n                          #(let [[ind sub] %1]\n                             [(+ ind 1)\n                              (if (= (mod ind n) (- n i))\n                                (conj sub %2) sub)])\n                          [0 []] s)))))))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"#(for [n (range %2)](take-nth %2 (nthrest % n)))","problem":43,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn rintl [l idx]\n  (if (> idx (count l))\n    l\n    (partition (/ (count l) idx) (apply interleave (partition idx l)))))","problem":43,"user":"5368a275e4b0243289761e8f"},{"code":"(fn [coll n]\r\n  (loop [coll coll\r\n         n n\r\n         z []]\r\n    (if (= (count z) n)\r\n      z\r\n      (recur (rest coll) n (conj z (take-nth n coll))))))","problem":43,"user":"504e2333e4b0f6ff3350c46c"},{"code":"(fn [coll x]\n  (map (fn [l] (map #(first %) l)) \n       (vals \n         (group-by \n           #(last %) \n           (partition \n             2 \n             (interleave \n               coll \n               (cycle (range x))))))))","problem":43,"user":"4eccb190535d23f0362276fe"},{"code":"(fn [s n] (apply (partial map vector) (partition n s)))","problem":43,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":43,"code":"(fn __ [xs x]\n  (partition-all (/ (count xs) x) (apply interleave (partition-all x xs))))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [sq stp] (for [i (range stp)] (map #(nth sq %) (range i (count sq) stp))))","problem":43,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":43,"code":"(fn [%1 %2]\n(cond \n  (= %2 2)   \n(list (take-nth %2 %1)\n(map (partial + 1) (take-nth %2 %1)))\n  (= %2 3)   \n(list (take-nth %2 %1)\n(map (partial + 1) (take-nth %2 %1))\n(map (partial + 2) (take-nth %2 %1)))\n  (= %2 4)   \n(list (take-nth %2 %1)\n(map (partial + 1) (take-nth %2 %1))\n(map (partial + 2) (take-nth %2 %1))\n(map (partial + 3) (take-nth %2 %1)))\n  (= %2 5)   \n(list (take-nth %2 %1)\n(map (partial + 1) (take-nth %2 %1))\n(map (partial + 2) (take-nth %2 %1))\n(map (partial + 3) (take-nth %2 %1))\n(map (partial + 4) (take-nth %2 %1)))   \n      )\n   )","user":"58dd21a9e4b0a4d5acaab6b3"},{"problem":43,"code":"(fn reverse-interleave\n     [s n]\n     (reduce #(conj %1 (take-nth n (nthrest s %2)))\n             []\n             (range n)))","user":"545e9cf1e4b01be26fd7467f"},{"problem":43,"code":"(fn f [s n] (for [i (range n)] (take-nth n (drop i s))))","user":"56efb3a3e4b04a395b9a0463"},{"problem":43,"code":"(fn [s m]\n  (for [i (range m)]\n    (take-nth m (nthrest s i))))","user":"576844cde4b0a07e8fc180ce"},{"problem":43,"code":"(fn f [col r] (partition (/ (count col) r) (for [x (range r) c (partition r col)] (nth c x))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":43,"code":"(fn [xs n]\n  (loop [acc (vec (repeat n []))\n         idx 0]\n    (if (= idx (count xs))\n      acc\n      (recur (assoc acc\n                    (rem idx n)\n                    (conj (nth acc (rem idx n))\n                          (nth xs idx)))\n             (inc idx)))))","user":"5687b6abe4b0dcc4269f4061"},{"code":"(fn [x y]\n  (loop [n (- y 1) result '()]\n    (if (>= n 0)\n         (recur (- n 1) (conj result (take-nth y (drop n x))))\n      \t\tresult\n      )))","problem":43,"user":"51d10b1fe4b067c36548635e"},{"problem":43,"code":"#(loop [col (partition %2 %1) res []]\n    (if-not (every? seq  col)\n      res\n      (recur (map rest col) (conj res (map first col)))))","user":"56795deae4b05957ce8c6187"},{"problem":43,"code":"; study map\n#(apply map list (partition %2 %1))","user":"59e5b6a1e4b08badc2a0c55b"},{"problem":43,"code":"(fn [coll n]\n  (loop [acc []\n        coll coll]\n    (if (empty? coll)\n      acc\n      (recur\n        (->> coll\n          (take n) (into [])\n          (reduce-kv #(update-in %1 [%2] (fnil conj []) %3) acc))\n        (nthrest coll n)))))","user":"51dafedee4b09f6bc204eee2"},{"problem":43,"code":"(fn [s c]\n  (map #(apply concat (partition 1 c (drop % s)))\n      (range c)))","user":"5880e38fe4b0f1effa3b7625"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (loop [[x & xs] s\n         i 0\n         res (vec (for [j (range n)] []))]\n    (if (nil? x)\n      res\n      (recur xs\n             (if (= i (dec n)) 0 (inc i))\n             (assoc res i (conj (res i) x))))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"code":"#(map\n  (fn [i] (take-nth %2 (drop i %)))\n  (range %2)\n)","problem":43,"user":"4e307313535deb9a81d77f14"},{"problem":43,"code":"(fn x [coll n] (apply map list (partition n coll)))","user":"52ca7711e4b071a8d36bd3e3"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (letfn [(sub-seq-at-ix [s n i] (keep-indexed #(if (= (rem (inc %1) n) (if (= i n) 0 i)) %2) s))]\n    (for [is (range 1 (inc n))]\n      (sub-seq-at-ix s n is)\n      )\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"code":"(fn [s x]\n  (loop [s s, c 0,\n    accs (zipmap (range x) (map (fn [x] nil) (range x)))]\n  (if\n    (empty? s)\n    (mapcat #(list (accs %)) (range x))\n    (recur (rest s) (inc c)\n      (assoc accs (mod c x)\n        (concat (accs (mod c x)) (list (first s))))))))","problem":43,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":43,"code":"(fn [col n] (apply map vector (partition n col )))","user":"566b7a77e4b0a866af6896af"},{"code":"(fn reverse-interleave [s n]\n  (apply map (fn [& args] args) (partition n s)))","problem":43,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":43,"code":"(fn [xs n]\n  (reduce  \n    (partial map conj)\n    (repeat n [])\n    (partition n xs)))","user":"5b3ef412e4b02d533a91bc06"},{"code":"#(partition (/ (count %) %2) (/ (count %) %2) () (apply interleave (partition %2 %2 () %)))","problem":43,"user":"51897709e4b0288ada3dbdaa"},{"problem":43,"code":"(fn interstay\n  ([s n] (interstay s n (into [] (repeat n [])) 0))\n  ([s n a d]\n   (if (empty? s) a\n     (recur (drop 1 s)\n            n\n            (update-in a [(mod d n)] conj (first s))\n            (mod (inc d) n)))))","user":"54b10d08e4b09f271ff37d18"},{"problem":43,"code":"(fn reverse_interleave [s n]\n  ((fn [i seq acc]\n    (if (= i n) (reverse acc)\n    (recur (inc i) (rest seq) (cons (take-nth n seq) acc)))\n  ) 0 s '())\n)","user":"56df6351e4b0ca2494a095f3"},{"code":"#(let [c %1 p (partition %2 c)]\n\t\t(apply map vector p))","problem":43,"user":"51f2851fe4b0210f90e7454b"},{"problem":43,"code":"(fn revInterleave [col subsets]\n   (reverse (loop [s subsets iter 0 re '()]\n     (if (= 0 s)\n      re\n      (recur (- s 1) (+ iter 1) (into re (list (remove nil? (#(map-indexed (fn [i x]\n                 (if (= iter (rem i %2))\n                   x\n                   nil)) %1) col subsets)))))))))","user":"569aca1ee4b0542e1f8d144d"},{"code":"(fn [arr n]\r\n                       (sort-by (fn[result](first result)) (mapcat  (fn [x](let[newArr (filter (fn[ele](= (rem ele n)  x)) arr)]\r\n                                            (partition (count newArr) newArr)))\r\n                                (take n (iterate inc 0)))))","problem":43,"user":"4de6f806535d08e6dec9fdf7"},{"problem":43,"code":"(fn [xs n] (partition-all (/ (count xs) n) (apply interleave (partition-all n xs))))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":43,"code":"(fn [init n]\n\t(loop [cumulative [] cnt n]\n\t\t(if (= 0 cnt)\n\t\t\tcumulative\n\t\t\t(if (= cnt n)\n\t\t\t\t(recur (conj cumulative (take-nth n init)) (dec cnt))\n\t\t\t\t(recur (conj cumulative (\n\t\t\t\t\t(fn [c] (loop [cl c res []]\n\t\t\t\t\t\t\t(if (= 0 (count cl))\n\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t(recur (rest cl) (conj res (+ 1 (first cl))))))) \n\t\t\t\t\t(last cumulative))\n\t\t\t\t\t) (dec cnt))\n\t\t\t\t))))","user":"58b985e0e4b0888cdc949ccc"},{"code":"(fn [l n]\r\n  (map (fn [x] (map #(nth l %) x))\r\n       (take n\r\n             (iterate #(map inc %)\r\n                      (range 0 (count l) n)))))","problem":43,"user":"4eb66737535d7eef3080736b"},{"code":"(fn  untwined [s n]\n  (loop [s s coll '() i n]\n    (if (zero? i)\n       (reverse coll)\n      (recur (rest s) (conj coll (keep-indexed #(if (zero? (mod %1 n)) %2) s)) (dec i)))))","problem":43,"user":"4ec3b393535dcc7ae8597d59"},{"problem":43,"code":"(fn un-interleave [coll x]\n      (let \n        [size-coll (count coll)\n         indices (range size-coll)\n         indices-coll (take size-coll (cycle (range x)))\n         indices-by-owner (zipmap indices indices-coll) ;pair: '(index index-owner)\n         groups (into '() (group-by #(second %) indices-by-owner))\n         simp-groups (map #(into '() (first (rest %))) groups);remove the indexes from each group\n         unordered-ans (for [cur-group simp-groups]\n           (map\n             (fn [pair] (nth coll (first pair)))\n             cur-group\n             )\n           )\n         ordered-groups (sort-by first unordered-ans)\n         ordered-ans (map sort ordered-groups)\n         ]\n         ordered-ans\n        )\n      )","user":"536827f1e4b0243289761e8a"},{"code":"(fn [l n] (apply (partial map (fn[& a] apply list a)) (map first (rest (take-while #(not (= '() (first %)))\r\n(iterate (fn [x] (split-at n (last x))) [1 l]))))))","problem":43,"user":"4ddbd934535d02782fcbe9fc"},{"problem":43,"code":"(fn [array_to_explode pieces_to_use]\n   ( loop [val_to_get 0 final_array_to_return []]\n     (if (= val_to_get pieces_to_use)\n       final_array_to_return ;then\n       (recur  \n         (inc val_to_get)\n         (conj final_array_to_return \n               (map #(nth % val_to_get) (partition pieces_to_use array_to_explode)))\n       );end recur\n     )))","user":"5ac92dc3e4b0e27600da77bf"},{"problem":43,"code":"#(loop [l %1 n %2 r []]\n    (if (= n 0)\n      r\n      (recur (rest l) (dec n) (conj r (take-nth %2 l)))\n      )\n    )","user":"5a80b934e4b00b71e582a05b"},{"problem":43,"code":"(fn [coll n]\n    (apply map vector (partition n n coll)))","user":"55c5b55fe4b0e31453f649b5"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (map #(nth coll %) (range i (count coll) n))))","user":"579c35fee4b05b1deef9ae04"},{"code":"(fn [lst n] (map #(take-nth n (drop % lst)) (range n)))","problem":43,"user":"50e3fe8fe4b0463d32072488"},{"problem":43,"code":"(fn [s n]\n  (for [i (range n)] \n    (map #(nth s %) (range i (count s) n))))","user":"57458b82e4b009280f9f2b4e"},{"code":"(fn rev-interleave [col x]\n  (let [getelems (fn [ids] (map (fn [id] (nth col id)) ids))]\n    (loop [ids (range 0 x) \n           ret '()]\n    (if (empty? ids)\n      ret\n      (recur (rest ids) (concat ret (list (getelems (range (first ids) (count col) x)))))))))","problem":43,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":43,"code":"(fn [v n]\n  (apply map list (partition-all n v)))","user":"56949fc5e4b0dcc4269f4120"},{"problem":43,"code":"(fn [s n]\n  (vals (group-by #(mod % n) s)))","user":"559279b7e4b0604b3f94d58c"},{"problem":43,"code":"(fn part [x n]\n   (apply map list (partition n x)))","user":"5950f0bfe4b066ee0a44ae9f"},{"problem":43,"code":"(fn [coll n]\n  (map second (group-by #(mod %1 n) coll)))","user":"60654263e4b069485764ddc9"},{"problem":43,"code":"(fn miFct [inputColl n]\n\n(loop [coll inputColl\n       phi (dec n)\n       result '()]\n    (if (>= phi 0)\n        (recur coll (dec phi) (cons   ((fn extract3 [phi f coll]\n    (map #(nth % phi) (partition f   coll))\n) phi n coll) result ) )\n        result\n        ) \n    )\n    \n    )\n;#(apply map list (partition-all %2 %1))","user":"5ed30cb6e4b016b56eae05c2"},{"code":"(fn [seq n]\n  (letfn [(inter [seq n]\n                 (map first (filter #(= 0 (mod (second %) n))\n                                    (map #(list %1 %2)\n                                         seq\n                                         (iterate inc 0)))))\n          ]\n    (map #(inter (drop % seq) n) (take n (iterate inc 0)))))","problem":43,"user":"524cdd51e4b0752c4cb68ccc"},{"code":"#(apply map (fn [& xs] xs) (partition %2 %1))","problem":43,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":43,"code":"(fn [arg1 arg2]\n(cond\n(and true (= arg2 2)) (quote ((1 3 5) (2 4 6)))\n(and true (= arg2 3)) (quote ((0 3 6) (1 4 7) (2 5 8)))\n(and true (= arg2 5)) (quote ((0 5) (1 6) (2 7) (3 8) (4 9)))\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn [alist n]\n  (loop [i 0 blist alist flist '()]\n    (if (= i n)\n       (reverse flist)\n\t\t\t (recur (inc i) (rest blist) (conj flist (take-nth n blist))))))","problem":43,"user":"4db045b5838c48654951d9be"},{"problem":43,"code":"(fn [initial-deck player-count]\n  (loop [deck initial-deck\n         player-decks (vec (repeat player-count []))\n         turn 0]\n    (let [index (mod turn player-count)\n          current-deck (nth player-decks index)\n          card (first deck)]\n      (if (empty? deck)\n        player-decks\n        (recur (rest deck)\n               (assoc player-decks index (conj current-deck card))\n               (inc turn))))))","user":"5541fa50e4b0a04f79299515"},{"problem":43,"code":"(fn re-interleave [coll n]\n  (let [n-seq (fn [coll n]\n                (loop [acc [(first coll)]\n                       index n\n                       start 2]\n                  (let [result (nth coll index nil)]\n                    (if result\n                      (recur (conj acc result)\n                             (* index start)\n                             (+ start 1))\n                      (seq acc)))))]\n    (loop [acc []\n           items coll\n           coun n]\n      (if (= coun 0)\n        (seq acc)\n        (recur (conj acc (n-seq items n))\n               (rest items)\n               (- coun 1))))))","user":"55bbfd60e4b01b9910ae29ed"},{"problem":43,"code":"(fn [xs y]\n  (vals (group-by #(mod (.indexOf xs %) y) xs)))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":43,"code":"(fn [tlist by] \n  (vals (group-by #(mod % by) tlist)))","user":"54051338e4b0addc1aec6662"},{"problem":43,"code":"(fn gf[se x](vals (group-by #(rem %1 x) se)))","user":"57a20f72e4b0c3d858beb8f5"},{"problem":43,"code":"#(let [group (partition %2 %1)\n        n (/ (count %1) %2)]\n    (partition n (apply interleave group)))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":43,"code":"(fn  [l n] (map #(take-nth n (drop % l)) (range n)))","user":"58b86162e4b0ebc645576d97"},{"code":"(fn [xs n]\n  (let [\n        lst (map-indexed (fn [idx itm] [(mod idx n) itm]) xs)\n        dct (group-by #(first %) lst)]\n    (map (fn [vs] (map #(last %) vs)) (vals dct))))","problem":43,"user":"52e276d9e4b09f7907dd1436"},{"problem":43,"code":"(fn [s n]\n  (map\n   (fn [i]\n     (filter #(= i (mod (.indexOf s %) n)) s))\n   (range n)))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (apply (partial map list) (partition n xs)))","user":"53e8c684e4b036ad0777e48b"},{"problem":43,"code":"(fn [col n] \n  (map #(take-nth n (drop % col)) (range n)))","user":"5465febde4b01be26fd746e1"},{"problem":43,"code":"(fn splitter [col parts]\n  (map #(take-nth parts (drop % col)) (range parts)))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":43,"code":"(fn [l n]\n  (reverse\n    (loop [l (vec l) nl (vec (repeat n '())) index 0]\n      (if-not (seq l)\n        nl\n        (recur (pop l) (assoc nl index (conj (nth nl index) (peek l))) (mod (inc index) n))\n        )\n      )\n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":43,"code":"(fn [coll n]\n      (loop [parts (partition-all n coll)\n             result []]\n        (if (empty? (first parts))\n          result\n          (recur (map #(drop 1 %) parts) (into result (list (map first parts)))))))","user":"5c3f37fce4b08cd430848e91"},{"code":"(fn [coll n]\n    (partition (/ (count coll) n)\n               (apply interleave (partition n coll))))","problem":43,"user":"4e7e8684535db169f9c79717"},{"problem":43,"code":"(fn [seq n]\r\n   (loop [s seq\r\n          index 0\r\n          ret (vec (repeat n []))]\r\n     (println (into [] ret))\r\n     (println s)\r\n     (println index)\r\n     (println (rem index n))\r\n     (println (nth ret (rem index n)))\r\n     (if s\r\n       (recur (next s) (inc index) (assoc ret\r\n                                         (rem index n)\r\n                                         (conj (nth ret (rem index n)) (first s))))\r\n       ret)))","user":"542b764ae4b0dad94371f28d"},{"code":"(let [revinter\n      (fn [coll n result k]\n        (if (nil? coll)\n          (vals (sort result))\n          (recur (next coll) n (assoc result k (conj (get result k []) (first coll))) (if (= n (inc k)) 0 (inc k)))\n        )\n      )]\n  (fn [coll n] (revinter coll n {} 0))\n)","problem":43,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [coll n] (loop [s coll i n res []] \n                (if (= i 0) (seq res) (recur (rest s) (dec i) (into res (list (take-nth n s)))))))","problem":43,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [s n] (map #(map second %) (vals (group-by #(mod (first %) n) (map-indexed #(list % %2) s)))))","problem":43,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn  [coll n]\n  (reduce (fn [result index]\n                 (conj result\n                   (take-nth n (drop index coll))))\n    [] (range n)))","problem":43,"user":"523bde95e4b07becd5be2202"},{"code":"(fn [coll n]\n  (let [gmap (group-by second (map vector coll (cycle (range n))))]\n     (map (partial map first) (map gmap (range n)))\n  )\n)","problem":43,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn rev-interleave [x n]\r\n  (vals (group-by #(mod % n) x)))","problem":43,"user":"4ee9d697535d93acb0a66895"},{"problem":43,"code":"(fn unterleave [xs n]\n  (apply map vector (partition n xs)))","user":"5705f569e4b0b0fb43fd0677"},{"problem":43,"code":"#(let [part-list (partition-all %2 %)] (apply map list part-list))","user":"575bd5f9e4b02ea114799365"},{"problem":43,"code":"(fn [col len] (map (fn [reminder] (map #(second %) (filter #(= (rem (first %) len) reminder) (map vector (range (count col)) col)))) (range len)))","user":"578e535de4b0ebec4cfb7580"},{"problem":43,"code":"(fn [xs n]\n  (->>\n   (map (fn [x y] [y x]) xs (apply concat (repeat (range n))))\n   (group-by first)\n   (map second)\n   (map (fn [xs] (map second xs)))\n  ))","user":"560794bde4b08b23635d3182"},{"problem":43,"code":"(fn [coll n]\n  (map\n    #(take-nth n %)\n    (for [x (range n)]\n      (drop x coll))))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":43,"code":"(fn [coll x]\n  (reduce #(conj (vec (rest %)) (conj (first %) %2))\n          (repeat x []) coll))","user":"596539dce4b069c0a1a19783"},{"code":"(fn [s n]\n  ((fn [s r]\n     (if (empty? s)\n       r\n       (recur (drop n s)\n              (map #(concat %1 [%2])\n                   r\n                   (take n s)))))\n    s (repeat n [])))","problem":43,"user":"535d910ae4b04ce2eb3ed2c5"},{"code":"(fn p043 [coll n]\n  (let [pairs (map #(list %2 %1) coll (iterate inc 0))\n        groups (group-by #(identity (mod (first %) n)) pairs)\n        ]\n    (map #(map second (second %)) groups)))","problem":43,"user":"5125745ae4b05d10e3e395f9"},{"code":"#(apply (partial map list) (partition-all %2 %1))","problem":43,"user":"4fbd12a5e4b081705acca2fd"},{"problem":43,"code":"(fn number43 [xs n]\n  (apply map list (partition-all n xs)))","user":"54074fc5e4b0addc1aec66b6"},{"problem":43,"code":"(fn [xs n]\n  (let [yss (partition n xs)]\n    (mapv (fn [x]\n            (map\n             (fn [ys]\n               (nth ys x))\n             yss))\n          (range n))))","user":"55d87324e4b0e31453f64ab4"},{"problem":43,"code":"(fn [s n] (let [p (partition n s)] (map (fn [k] (map #(nth % k) p)) (range n))))","user":"5dee144ae4b093ff71727591"},{"problem":43,"code":"(fn [l n]\n   (for [c (range n)]\n     (map first (filter #(= c (mod (second %) n))\n                        (map #(vector %1 %2) l (range))))))","user":"5f3f2281e4b004f08c61c561"},{"problem":43,"code":"(fn [col x] (map #(take-nth x (drop % col)) (range x)))","user":"50856bd1e4b004985b776e4c"},{"problem":43,"code":"#(apply map list (partition %2 %2 [] %1))","user":"541074f1e4b01498b1a719ac"},{"code":"(fn [s n]\n  (letfn\n    [(inner [source]\n      (loop [rslt [], src source]\n        (if\n          (empty? src)\n          rslt\n          (recur\n            (conj rslt (first src))\n            (drop n src)))))]\n    (loop [i 0, result [], source s]\n      (if\n        (or\n          (empty? source)\n          (= n i))\n        result\n        (recur\n          (inc i)\n          (conj\n            result\n            (inner source))\n          (drop 1 source))))))","problem":43,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn reverse-interleave\n  ;\"reverse the interleave process splitting a seq into N other sequences\"\n  [s n]\n  (cond\n   ;; split into zero parts\n   (zero? n) s\n   :else (let [extracted-set (take-nth n s) ; every nth item \n               new-set (for [n s\n                             :when (not (some #(= n %) extracted-set))]\n                         n)\n               n (dec n)]\n           (cons extracted-set\n                 (reverse-interleave new-set n)))))","problem":43,"user":"4fd16778e4b04c3a95aa040f"},{"code":"(fn [arr n] (\n             for [x (range n)]\n             (take-nth n (drop x arr))\n             ))","problem":43,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":43,"code":"(fn x [c n]\n  (loop [c c o (take n (repeat []))]\n    (if (empty? c)\n      o\n      (recur (drop n c) (map conj o (take n c))))))\n\n;pretier:\n;#(apply map list (partition %2 %1))","user":"57533bc1e4b02ea1147992a6"},{"problem":43,"code":"(fn [col x] (reverse (loop [col col x x cur 0 res '()] (if-not (>= cur x) (recur col x (inc cur) (conj res (take-nth x (nthrest col cur)))) res))))","user":"5ddd3cbee4b0948ae9d9adc3"},{"code":"(fn [xs n]\n   (reduce\n      #(let [m (mod (%2 1) n)] \n         (assoc %1 m\n               (conj (%1 m) (first %2))))\n     (vec (repeat n [])) \n     (map vector xs (range))))","problem":43,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":43,"code":"(fn [s n]\n  (loop [s s\n         ret (apply vector (take n (repeat [])))]\n    (if (empty? s)\n      ret\n      (recur (drop n s) (map conj ret (take n s))))))","user":"571d063ee4b0145328a76272"},{"problem":43,"code":"(fn[%1 %2] (apply map list (partition-all %2 %1)))","user":"5a63f8bae4b0512ff01cd99f"},{"problem":43,"code":"(fn rev-interleave [xs n]\n  (for [i (range n)]\n    (take-nth n (nthrest xs i))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn [c n] (vals (group-by #(mod % n) c)))","problem":43,"user":"4e5867d1535d8a8b8723a291"},{"problem":43,"code":"(fn [coll n]\n   (->>\n    (partition n coll)\n    (apply map vector)))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":43,"code":"#(apply mapv (fn [& x] x) (partition %2 %1))","user":"5fdbde92e4b05ac5b16ea137"},{"problem":43,"code":"(fn [c n] (apply (partial mapcat #( list %&)) (partition n c)))","user":"5cfeacb7e4b0cc9c9158817d"},{"problem":43,"code":"(fn [col div] (partition (/ (count col) div) (apply interleave (partition div col))))","user":"5517f5c5e4b06a49daca83c7"},{"problem":43,"code":"(fn f43[c g]\n  (reduce (fn[a b](conj a (take-nth g (drop b c)))) [] (range g))\n)","user":"53ed2fafe4b0d648e757f4c1"},{"problem":43,"code":"(fn [col n]\n  (let [length (count col)\n        sub-seq (partition n col)\n        result-length (/ length n)]\n    (partition result-length (apply interleave sub-seq)))\n  )","user":"5eeeb000e4b07c55ae4a0515"},{"code":"#(partition (int (/ (count %) %2)) (apply interleave (partition %2 %)))","problem":43,"user":"50a8cc97e4b0a9a42786e8db"},{"problem":43,"code":"(fn reverse-interleave \n  [l n]\n  (let [indexed (map-indexed (fn [idx itm] [idx itm]) l)]\n    (->>\n     (group-by (fn [[idx _]] (mod idx n)) indexed)\n     (map (fn [[idx sequence]] sequence))\n     (map #(map (fn [[_ itm]] itm) %)))))","user":"5c0466a3e4b0bdcf453d1680"},{"problem":43,"code":"(fn [y x]\n  (map second (seq (group-by #(rem % x) y))))","user":"5be79b5be4b0f319e2d7ec5a"},{"problem":43,"code":"(fn [seq n] (->> (range n)\n       (map #(drop % seq))\n       (map #(take-nth n %))))","user":"60849bd6e4b0736b099e42f2"},{"code":"(fn [seq num] \r\n  (map \r\n    (fn [[_ item]] (apply list item))\r\n    (group-by #(mod % num) seq)))","problem":43,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn rev-int [v n]\r\n  (apply map vector (partition n v)))","problem":43,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn [coll n]\n     (let [buckets (range n)\n           pairs (map list coll (cycle (range n)))]\n       (for [i buckets]\n         (map first (filter #(= i (second %)) pairs)))))","problem":43,"user":"513a4babe4b067e25a345eca"},{"problem":43,"code":"(fn [x y] (partition (/ (count x) y) (apply interleave(partition y x))))","user":"557e8326e4b05c286339e0d7"},{"problem":43,"code":"(fn [col n]\n    (reduce\n       #(map conj % %2)\n       (repeat n [])\n       (partition n col)))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":43,"code":"(fn [xs n] (apply map vector (partition-all n xs)))","user":"5485b402e4b0e286459a11b0"},{"code":"(fn [lst n]\n  (let [ls (partition n lst)]\n    (map (fn [i] (map (comp first(partial drop i)) ls)) (range n))))","problem":43,"user":"5272669de4b03e8d9a4a742e"},{"problem":43,"code":"(fn [s n]\n  \n  (->>\n  (for [i (range (count s))\n        j (range (count s))]\n    (when (= i (mod j n))\n      (nth s j)))\n   (filter #(not (nil? %)))\n   (partition-all(/ (count s) n) )))","user":"5b227f5ae4b03cfeda66ed63"},{"problem":43,"code":"(fn\n    [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"5acd235ae4b0e27600da7824"},{"code":"(fn ri [xs n]\n  (->> (partition n xs) (apply map vector)))","problem":43,"user":"52016fd3e4b0b2e020a18f10"},{"code":"(fn reverseinterleave [col x]\n  (loop [out (zipmap (range x) (map (fn [x] []) (range x)))\n         in (map #(vector %1 %2) (range) col)]\n    (if (= (count in) 0)\n      (map (fn [b] (seq (out b))) (range x))\n      (let [[idx a] (first in)]\n        (recur\n          (assoc out (mod idx x) (conj (out (mod idx x)) a))\n          (rest in))))))","problem":43,"user":"52dad8bde4b09f7907dd13be"},{"problem":43,"code":"(fn [ss n]\n  (->> (range n)\n       (cycle)\n       (take (count ss))\n       (#(map vector % ss))\n       (group-by first)\n       (vals)\n       (map #(map second %))))","user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn [c n]\n  (for [x (range n)]\n    (apply concat (partition 1 n (map (partial + x) c)))))","problem":43,"user":"4ec53f8c535d6d7199dd368b"},{"problem":43,"code":"(fn f [x n]\n  (let [x (partition n n x)]\n    (for [i (range n)] (map #(nth %1 i) x))))","user":"58dfce9fe4b0a4d5acaab723"},{"problem":43,"code":"(fn [xs size] (apply map list (partition size xs)))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":43,"code":"(fn [col p]\n      (for [v (range p)]\n        (take-nth p (drop v col))))","user":"608e3bf7e4b03bd49d9f36bd"},{"problem":43,"code":"(fn [coll n]\n   (->> (partition n coll)\n        (apply interleave)\n        (partition (/ (count coll) n))))","user":"596a66cde4b069c0a1a19803"},{"problem":43,"code":"(fn [coll x]\n  (for [i (range x)] (take-nth x (drop i coll)))\n)","user":"59971e2de4b07157cc8daacc"},{"problem":43,"code":"(fn [coll n]\n  (map #(map second %)\n       (vals (group-by #(mod (first %) n)\n                       (map vector (iterate inc 0) coll)))))","user":"59902fede4b0fcebec4de86d"},{"code":"(fn [s n]\n  (for [x (range n) :let [ssub (drop x s)]]\n    (for [y (range 0 (count ssub) n)]\n      (nth ssub y))))","problem":43,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":43,"code":"(fn [s p]\n  ((fn inner [curr acc]\n    (if (empty? curr) \n      (map reverse acc)\n      (recur (drop p curr) (map conj acc (take p curr)))\n    )\n  ) s (map (fn [_] (list)) (range p)))\n)","user":"5cfd5a93e4b0cc9c91588168"},{"code":"#(map second (group-by (fn [x] (mod x %2)) %1))","problem":43,"user":"4f35b2ace4b0e243712b1ec5"},{"code":"(fn f [x n]\n  (map #(apply concat (partition 1 n (drop % x))) (range n)))","problem":43,"user":"4f34eb87e4b0e243712b1eba"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (sort-by first\n           (map\n            #(map second %)\n            (vals\n             (group-by #(mod (first %) n)\n                       (map-indexed #(vector (inc %1) %2) coll))))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":43,"code":"(fn revinterleave [s n]\n  (reverse (into ()(let [p (partition n s)]\n                  (loop [result []\n                         x 0]\n                    (if (= x n)\n                      result\n                      (recur (conj result (map (fn [v] (nth v x)) p)) (inc x))))))))","user":"57b6edf6e4b0fbc9809a27c8"},{"code":"(fn [xs n]\n  (apply map list (partition n xs)))","problem":43,"user":"50630247e4b05ac47bc68d6b"},{"code":"(fn [lst n] \n  (let [ilst (map-indexed #(vector % %2) lst)]\n       (for [i (range 0 n)]\n            (map last (filter #(= i (mod (first %) n)) ilst)))))","problem":43,"user":"52bdf6bde4b07a9af579230d"},{"problem":43,"code":"(fn ri [xs n] \n  (for [i (range n)]\n    (keep-indexed \n     #(if (= (mod %1 n) i) %2)\n     xs)\n ))","user":"58335c22e4b089d5ab817c9a"},{"problem":43,"code":"(fn [ls n]\n    (map reverse (reduce #(for [x (range n)] \n                        \t   (cons (nth %2 x) \n                                     (nth %1 x)))\n        \t\t  \t\t (repeat n '()) ;; '(() () ... )\n        \t\t\t\t (partition n ls) )))","user":"53fcdd1ae4b0de5c418485dd"},{"code":"#(apply(partial map list)(partition%2%))","problem":43,"user":"4dad8fe9c9a9d6ed1899dc57"},{"code":"(fn [coll n]\n  (partition (/ (count coll) n) \n    (apply interleave (partition n coll))))","problem":43,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":43,"code":"(fn f [a n]\n  (letfn [(g [a n & o] \n             (if (empty? a)\n               '()\n               (if (empty? o)\n                 (conj (g (drop n a) n) (first a))\n                 (g (drop (first o) a) n))))]\n    (map (partial g a n) (range n))))","user":"57501c83e4b02ea11479926b"},{"code":"(fn ri [v step]\n         (letfn [(rev-interleave [v step]\n                   (lazy-seq\n                     (cons (take-nth step v) (rev-interleave (rest v) step))))]\n           (take step (rev-interleave v step))))","problem":43,"user":"4f1bee08535d64f60314647e"},{"problem":43,"code":"(fn [xs n]\n   ((fn ri [s n1]\n      (if (pos? n1)\n          (cons (take-nth n s) (ri (rest s) (dec n1)))\n           nil)) \n    xs n))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn de-interleave [xs n]\n        (if (empty? xs)\n          (repeat n [])\n          (map cons (take n xs) (de-interleave (drop n xs) n))))","problem":43,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":43,"code":"(fn [col n]\n  (loop [i n s []]\n    (if (> i 0) \n      (recur (dec i) (conj s (for [j (range (count col)) :when (= 0 (rem (+ j i) n))] ((vec col) j))))\n      s)))","user":"5243e37ae4b076204b44fae3"},{"problem":43,"code":"(fn revinterleave [coll n]\n  (for [i (range n)] (take-nth n (drop i coll)))\n )","user":"5f5f9483e4b02876ed9fcff8"},{"code":"(fn reverse-interleave [coll n]\n  (let [v (vec coll)\n        idxss (for [i (range 1 (inc n))] (range (dec i) (count coll) n))]\n    (for [idxs idxss] (map #(v %) idxs))))","problem":43,"user":"4e89f9e5535d3e98b8023289"},{"code":"(fn [coll n]\n  (take-while #(= (count %) (/ (count coll) n))\n              (map take-nth (repeat n) \n                   (iterate rest coll))))","problem":43,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [xs x]\n  (map second (group-by  #(mod %  x)  xs )))","problem":43,"user":"52f4fae4e4b05e3f0be25f27"},{"code":"(fn [xs n] (partition (/ (count xs) n) (map second (sort-by #(mod (first %) n) (map-indexed list xs)))))","problem":43,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":43,"code":";; http://www.4clojure.com/problem/43\n(fn reverse-interleave\n  [coll sub-seq-count]\n  (loop [in-coll coll\n         out-vec (vec (repeat sub-seq-count ()))\n         current-index 0]\n    (if (empty? in-coll)\n      (apply list out-vec)\n      (let [next-item (first in-coll)\n            out-vec-index (mod current-index sub-seq-count)]\n        (recur (rest in-coll) \n               (assoc out-vec out-vec-index (concat (nth out-vec out-vec-index) (list next-item)))\n               (mod (inc current-index) sub-seq-count))))))","user":"5c92105ce4b048ec896c59f7"},{"problem":43,"code":"(fn [l p]\n   (let [\n         partitioned (partition-all p l)\n         r (range p)\n         ]\n     (map (fn [c] (map #(get (vec %) c) partitioned)) r))\n   )","user":"56c8cff8e4b0ed865f9758d7"},{"problem":43,"code":"(fn [coll n] (apply (partial map #(-> %&)) (partition n coll)))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn [xs n] (map (fn [[k v]] (map last v)) (group-by first (map-indexed #(vector (mod %1 n) %2) xs))))","problem":43,"user":"4fe9ea87e4b0547ebccb2476"},{"code":"(fn reverse-interleave- [coll partitions]\n  \"43. Write a function which reverses the interleave process into x number of subsequences.\"\n  (for [x (range partitions)]\n    (concat (take-nth partitions (drop x coll)))))","problem":43,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":43,"code":"(fn [coll n]\n  (let [intervals (take n (iterate rest coll))]\n    (reduce (fn [acc cur]\n      (conj acc (take-nth n cur)))\n      []\n      intervals)))","user":"5d4320fde4b07c84aa5ae690"},{"code":"(fn [colls num]\n(loop [coll (map-indexed vector colls)\n       res []]\n   (if (= num (count res))\n   res   \n   (recur coll (conj  res (map last (filter #(= (mod (first %) num) (count res)) coll)))))\n)\n)","problem":43,"user":"5364ab34e4b0243289761e64"},{"problem":43,"code":"(fn aa \n [coll x]\n (for [a (range x)]\n  (take-nth x (drop a coll))))","user":"55634f38e4b0c656e3ff17e8"},{"code":"(fn [c n] (map #(take-nth n (drop % c)) (range n)))","problem":43,"user":"4f031eac535dcb61093f6a67"},{"problem":43,"code":"(fn f [x y] (map val (group-by #(mod % y) x)))","user":"5ed70b97e4b016b56eae05e6"},{"problem":43,"code":"(fn [sq n] \n  (let [nn (int (/ (count sq) n))]\n    (loop [s1 (vec sq) s2 [] n2 n]\n      (if (= n2 0) (apply list s2) \n        (recur (rest s1) (conj s2 (take-nth n s1)) (dec n2))))))","user":"53069e16e4b02e8216869798"},{"code":"(fn [x y] (loop[myNL '() zA 0 zG y zA1 0 myL '()](if(< zA y)\n                                 (recur\n                                  (if(= zA1 zG)\n                                    (conj myNL (reverse myL))\n                                    myNL\n                                    )\n                                  (if(= zA1 zG)\n                                   (+ zA 1)\n                                    zA\n                                    )\n                                  (quot (count x) y)\n                                  (if(= zA1 zG)\n                                    0\n                                    (+ zA1 1)\n                                    )\n                                  (if(= zA1 zG)\n                                    '()\n                                    (conj myL (nth x (+ (* zA1 y) zA)))\n                                    )                                \n                                  )\n                                 (reverse myNL)\n                  )\n            )\n  )","problem":43,"user":"5177cacde4b0261ae665b877"},{"problem":43,"code":"(fn uninterleave [lyst n]\n  (let [f (fn [a b] (map cons b a))]\n    (map reverse (reduce f (repeat n ()) (partition n lyst)))))","user":"53e27bf1e4b036ad0777e3f2"},{"code":"(fn [s n]\n   (vals (group-by #(mod (.indexOf s %) n) s)))","problem":43,"user":"50996a38e4b0cae2931060b3"},{"problem":43,"code":"(fn [s n]\n    (->> (mapcat\n           #(map-indexed\n             (fn [idx itm] (if (= % (mod idx n)) itm nil))\n             s)\n           (range n))\n         (filter #(not (nil? %)))\n         (partition-all (/ (count s) n))))","user":"57985f98e4b039eba2ecb114"},{"code":"(fn revint [coll x]\n  (partition (/ (count coll) x) (apply interleave (partition x coll))))","problem":43,"user":"4faafccde4b081705acca209"},{"code":"(fn [l n]\n    (partition-all (/ (count l) n)\n        (apply interleave (partition-all n l))\n    ))","problem":43,"user":"51059d33e4b0380e797c7d5c"},{"problem":43,"code":"#(partition (int (/ (count %1) %2)) (apply interleave(partition %2 %1)))","user":"5ea444b7e4b00a66d4a951a0"},{"problem":43,"code":"#(apply map (fn [x & more] (list* x more)) (partition %2 %1))","user":"57cef3f8e4b0c746388ab8b4"},{"problem":43,"code":"(fn [coll cnt]\n    (for [i (range cnt)]\n      (loop [acc '() j (dec (/ (count coll) cnt))]\n        (if\n          (< j 0)\n          acc\n          (recur\n            (conj\n              acc\n              (nth coll (+ i (* j cnt))))\n            (dec j))))))\n\n; #(apply map vector (partition %2 %1))","user":"58d2af83e4b03c36ff7e5907"},{"problem":43,"code":"(fn [coll n]\n  (last \n    (reduce \n      (fn [[idx t] v] [(mod (+ idx 1) n) (assoc t idx (conj (t idx) v))]) [0 (vec (repeat n []))] coll)))","user":"58edaa3be4b056aecfd47d89"},{"problem":43,"code":"(fn reverse-interleave [xs n] \n  (apply map vector (partition n xs)))","user":"52616198e4b03e8d9a4a705e"},{"problem":43,"code":"(fn [xs n]\n    (apply (partial map vector) (partition n xs)))","user":"5180c69ae4b06b8caf33fa00"},{"problem":43,"code":"(fn [lst n] \n  (map #(map second %) \n       (vals \n        (group-by \n         first\n         (map-indexed #(list (rem %1 n) %2)\n                      lst)))))","user":"553698fae4b09218d5f44fc0"},{"code":"(fn [s n]\n  (map (fn [sx] (map first sx))\n    (partition-by last\n      (sort-by last\n        (map list s (iterate #(inc (rem % n)) 1)))))\n  \n)","problem":43,"user":"4f569218e4b0a7574ea71826"},{"problem":43,"code":"#(->> %1\n     (iterate rest)\n     (map (fn [x] (take-nth %2 x)))\n     (take %2))","user":"5c664b87e4b0fca0c16226a5"},{"problem":43,"code":"(fn [col n]\n  (for [i (range n)] (take-nth n (drop i col))))","user":"58e5e585e4b056aecfd47ca2"},{"code":"(fn [coll n]\n   (let [limit (int (/ (count coll) n))]\n     (loop [coll coll group 0 acc []]\n       (if (= group n)\n         acc\n         (recur (rest coll)\n                (inc group)\n                (conj acc\n                      (take limit\n                            (keep-indexed\n                             (fn [idx item]\n                               (when (or (zero? idx)\n                                         (zero? (mod idx n)))\n                                 item))\n                             coll))))))))","problem":43,"user":"52cc582ae4b07d0d72b27362"},{"problem":43,"code":"(fn [l r] (map-indexed #(take-nth r (drop % %2)) (repeat r l)))","user":"5835a222e4b089d5ab817ce5"},{"code":"(fn [coll n]\n    (for [x (range n)] \n      (map #(nth % x) (partition n coll))))","problem":43,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn [coll n]\n  (loop [result '() new-coll (partition n coll)]\n    (if (empty? (first new-coll))\n      (reverse result)\n      (recur (cons (map first new-coll) result) (map rest new-coll)))))","problem":43,"user":"4ef4c1ff535dced4c769f23e"},{"code":"(fn [coll n]\n  (let [c (/ (count coll) n)]\n    (partition c (apply interleave (partition n coll)))))","problem":43,"user":"504f6721e4b0a02f9cffde7f"},{"problem":43,"code":"(fn ritl [items n]\n  (let [result (vec (repeat n []))]\n    ((fn iter [remaining index res]\n      (if (empty? remaining) (seq (map #(seq %) res))\n        (let [row (rem index n)]\n          (iter \n            (rest remaining) \n            (+ index 1) \n            (assoc res row (conj (nth res row) (first remaining))))))) items 0 result)))","user":"60b2aaebe4b0e0fa5f1b4228"},{"code":"(fn [ls x]\n  (for [i (range x)]\n    (map #(nth ls %) (filter #(= (mod % x) i) (range (count ls))))\n  )\n)","problem":43,"user":"4ea57300535d7eef308072d5"},{"code":"(fn [xs n] (reduce #(map conj %1 %2) (repeat n []) (partition n xs)))","problem":43,"user":"4ed286d4535d44c135fd68d7"},{"problem":43,"code":"#(apply map (conj (partition-all %2 %1) list))","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn [coll n] (vals (group-by #(rem % n) coll)))","problem":43,"user":"4e5229dc535d302ef430da6f"},{"code":"(fn ri [l n]\n  (letfn [(helper [l n i]\n                  (if (< i n)\n                    (cons (take-nth n l) (helper (rest l) n (inc i)))\n                    '()))]\n    (helper l n 0)))","problem":43,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":43,"code":"#(partition-all (/ (count %1) %2)\n                (apply interleave\n                       (partition-all  %2 %1)))","user":"5471f0f3e4b094393f72dd6f"},{"problem":43,"code":"(fn deinterleave [in_seq n]\n  (map #(remove nil? (map-indexed\n                       (fn [idx item]\n                         (if\n                           (= % (mod idx n))\n                           item)\n                         )\n                         in_seq)\n                       )\n       (range n)))","user":"5a94a38ce4b0d174b936c73e"},{"problem":43,"code":"(fn [coll n]\n   (loop [res (repeat n ())\n          src (reverse coll)]\n     (if (empty? src) (reverse res)\n         (let [[f r] (split-at n src)]\n           (recur (map cons f res) r)))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":43,"code":"(fn [seq nleaves] (loop [prefix seq leaves (loop [n 0 emptyleaves '()] (if (= n nleaves) emptyleaves (recur (inc n) (conj emptyleaves '()))))] (if (empty? prefix) leaves (recur (butlast prefix) (conj (butlast leaves) (conj (last leaves) (last prefix)))))))","user":"5e1cc888e4b0dc959400853d"},{"problem":43,"code":"(fn reverse-interleave\n  [s n]\n  (for [x (range n)\n        :let [y (take-nth n (drop x s))]]\n    y))","user":"55996253e4b031d6649c9baa"},{"code":"#(let [s (partition-all %2 %1)]\n  (for [i (range %2)] (for [x s] (nth x i))))","problem":43,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn ri [coll n]\n  (->>\n   coll\n    (group-by #(rem (.indexOf coll %) n))\n    (vals)))","problem":43,"user":"51aefceee4b09397d5109797"},{"code":"(fn reverse-interleave [s x]\n  (map #(take-nth x (drop % s)) (range x)))","problem":43,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn [ls n]\r\n  (let [mapped \r\n   (group-by first\r\n            (map-indexed \r\n              (fn [idx it] [(rem idx n) it])\r\n              ls))\r\n        s\r\n        (for [i (range n)]\r\n          (mapped i)\r\n          \r\n          )]\r\n    (for [xs s]\r\n      (map second xs))\r\n      \r\n    ))","problem":43,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [coll n]\n  (let [f (fn find-group [coll] \n            (if (empty? coll) nil (cons (first coll) (lazy-seq (find-group (drop n coll))))))]\n    (map f (take n (iterate rest coll)))))","problem":43,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":43,"code":"(fn [c n]\n  (map (fn [[k v]] (map second v))\n       (group-by \n         (fn [[i v]] (rem i n)) \n         (map-indexed #(vector % %2) c))))","user":"50385746e4b0803468ea2c6d"},{"code":"(fn [coll n]\n  (loop [i 0, result []]\n    (if (= i n)\n      result\n      (recur (inc i)\n             (conj result\n                   (map #(nth % i) (partition-all n coll)))))))","problem":43,"user":"51778122e4b085adf681d89d"},{"problem":43,"code":"(fn ([s n] (for [x (range n)] (keep-indexed #(if (= x (mod %1 n)) %2) s))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n\t(apply map list (partition-all n xs)))","user":"5fb46916e4b08cb800c85b46"},{"code":"(fn [coll n]\n  (apply map list (partition-all n coll)))","problem":43,"user":"4edffe54535d10e5ff6f5347"},{"code":"(fn [seq n]\n  (letfn [(everynth [seq n offset]\n            (keep-indexed (fn [i x]\n              (if (= offset (mod i n)) x nil)) seq))]\n    (for [k (range n)] (everynth seq n k))))","problem":43,"user":"4ed94d69535d10e5ff6f5303"},{"problem":43,"code":"(fn [s i]\n  (->> s\n       (map vector (map #(mod % i) (range)))\n       (group-by first)\n       (map second)\n       (map (partial map second))))","user":"5b77248ae4b047b03b2036e7"},{"problem":43,"code":"(fn reverse-interleave [col n]\n  (let [[head tail] (split-at n col)]\n    (if (empty? head)\n      (repeat n ())\n      (map\n        cons\n        head\n        (reverse-interleave\n          tail\n          n)))))","user":"5887518ae4b0f1effa3b76f5"},{"code":"(fn [s n]\n  (map\n    #(take-nth n (drop % s))\n    (range n)))","problem":43,"user":"501284d9e4b030d97e4db710"},{"code":"(fn f [list0 k]\n  (loop [i 0 l list0 ans (vec (repeat k []))]\n    (if (empty? l)\n      ans\n      (recur\n        (mod (inc i) k)\n        (rest l)\n        (->> (conj (nth ans i) (first l))\n          (assoc ans i)\n        )\n      )\n    )\n  )\n)","problem":43,"user":"51f09f3de4b0274c496158d7"},{"problem":43,"code":"(fn [coll slice] (->> coll (iterate #(drop slice %)) (take (/ (count coll) slice)) (apply interleave) (partition (/ (count coll) slice))))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":43,"code":"(fn rev-intl [coll n]\n(apply map list (partition n coll)) )","user":"5972fcf6e4b01722bebd4c92"},{"code":"(fn [vctr n] (apply map list (partition n vctr)))","problem":43,"user":"52c3a0f4e4b0c2d177d620c6"},{"code":"(fn [coll n]\n  (apply map list (partition n coll)))","problem":43,"user":"4e16bdef535d04ed9115e7e9"},{"problem":43,"code":"(fn [x y] (loop [out [] x x y y] (if (empty? x) out (recur (conj out (take-nth y x)) (remove (set (take-nth y x)) x) (dec y)))))","user":"5d7158f3e4b04d129b00f2e1"},{"problem":43,"code":"(fn [v1 v2] (vals (group-by #(mod % v2) v1)))","user":"5582c5b1e4b05c286339e10a"},{"problem":43,"code":"(fn [lst n]\n  (loop [acc [] x n l lst]\n    (if (= 0 x) acc\n      (recur (conj acc (take-nth n l)) (dec x) (rest l)))))","user":"55c20bd0e4b0e31453f64972"},{"problem":43,"code":"(fn\n  [coll n]\n  (loop [res []\n         remaining coll\n         loops 0]\n    (if (empty? remaining)\n      res\n      (let [part (take-nth (- n loops) remaining)\n          result (conj res part)\n          to-remove (remove (set part) remaining)]\n      (recur result to-remove (inc loops))))))","user":"600d9808e4b074f607df669c"},{"code":"(fn [coll n]\n  (for [i (range n)]\n    (flatten (partition 1 n (drop i coll)))))","problem":43,"user":"4f410b63e4b0e243712b1fc5"},{"problem":43,"code":"(fn [all_arr nu]\n  (let [ selector\n        (fn [all_arr nu]\n          (filter (fn [x]\n                    (if (instance? Long (/ x nu)) true false))\n                  all_arr))\n        map_incr\n        (fn [arr n]\n          (map #(+ % n) arr))\n        map_decr\n        (fn [arr n]\n          (map #(- % n) arr))  ]\n    (->\n     (map\n      (fn [x]\n        (let [sresult (selector all_arr nu)]\n          (if (= (last sresult) (last all_arr))\n            (map_decr (selector all_arr nu) x)\n            (map_incr (selector all_arr nu) x)\n            )\n\n          )\n        )\n      (range nu)\n      )\n     ((fn [y] (sort-by #(first %) y)) )\n     )\n    )\n  )","user":"570e43d8e4b0b0fb43fd06eb"},{"problem":43,"code":"(fn rev-interleave [coll x]\n (map second (group-by #(mod % x)\n                       coll)))","user":"5d1cf523e4b02ea6f0fb6994"},{"code":"(fn revinter\n  [s n]\n    (for [i (range n)]\n      (for [j (range (count s)) :when (= (rem j n) i)]\n        (nth s j))))","problem":43,"user":"4e28120f535deb9a81d77efa"},{"problem":43,"code":"(fn reverse-interleave [s n]\r\n  ((fn reverse-interleave [s n i]\r\n     (if (= i 1)\r\n       (list (take-nth n s))\r\n       (cons (take-nth n s) (reverse-interleave (rest s) n (dec i)))))\r\n   s n n))","user":"56f514cee4b046a417f92068"},{"code":"(fn [s n]\n  (loop [n1 0 acc []]\n    (if (< n1 n)\n      (recur (inc n1)(conj acc (keep-indexed #(if (= (rem %1 n) n1) %2) s)))\n      acc\n    )\n  )\n)","problem":43,"user":"51db8244e4b0e067a9bbadc7"},{"code":"(fn [src num] (map (fn [n] (map (fn [coll] (nth coll n)) (partition num src))) (range 0 num)))","problem":43,"user":"4fb99483e4b081705acca2da"},{"problem":43,"code":"(fn reverse-interleave [collection n]\n  (apply map list (partition n collection)))","user":"5383668ee4b06839e8705edd"},{"code":"(fn [s n]\n  (reverse\n    (reduce #(conj (butlast %1) (conj (last %1) %2))\n            (repeat n []) s)))","problem":43,"user":"5175533fe4b0dea9bbfba575"},{"problem":43,"code":"#(map (fn [num] (take-nth %2 (drop num %1))) (range %2))","user":"4f80db02e4b033992c121bf9"},{"problem":43,"code":"(fn inverse-interleave [coll x]\n  (for [i (range x)]\n    (take-nth x (drop i coll))))","user":"4fe49706e4b0e8f79898feb7"},{"problem":43,"code":"(fn\n    [coll chunks]\n    (loop [pointer 0\n           colls (vec (repeatedly chunks vector))\n           left coll]\n      (if-not (seq left)\n        colls\n        (recur (mod (inc pointer) chunks)\n               (update-in colls [pointer] conj (first left))\n               (rest left)))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":43,"code":"(fn rev-interleave [col x]\n  (let [n (/ (count col) x)]\n    (partition-all n (apply interleave (partition-all x col)))))","user":"5579eed7e4b05c286339e09b"},{"problem":43,"code":"(fn f [x n]\n  (let [x* (partition n n x)]\n(for [i (range n)] (map #(nth %1 i) x*))))","user":"5ae0976be4b0837691e92c43"},{"problem":43,"code":"(fn [coll n](apply map vector (partition n coll)))","user":"559bdf16e4b066d22e731f5a"},{"problem":43,"code":"#(->>\n  (partition %2 %1)\n  (apply map list)\n)","user":"5c219c0fe4b07e362c230581"},{"code":"(fn [c n](map (fn [i](map #(nth % i)(partition n c)))(range n)))","problem":43,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn [coll div] (vals (group-by #(rem % div) coll)))","problem":43,"user":"4e6fa38b535d5021c1a89622"},{"problem":43,"code":"(fn reverse-interleave [coll x]\n  (apply mapv vector (partition-all x coll)))","user":"5d7aa22ee4b02e6b30c9354e"},{"problem":43,"code":"(fn un-interleave [xs n]\n  (let [parts (partition n xs)]\n    (apply map list parts)))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":43,"code":"(fn myfn [myseq step]\n\n\t(let \n\t\t[ start (first myseq)\n\t\t  end   (last myseq)\n\t\t  cnt   (count myseq)\n\n\t\t  mysub (fn [step cnt s]\n\t\t\n\t\t\t\t\t(\n\n\t\t\t\t\tloop [\t\t\n\t\t\t\t\t\t\tinner-cnt  (/ cnt step)\n\t\t\t\t\t\t\tend (+ s (* step (dec inner-cnt) ))\n\t\t\t\t   \t\t\tres [s]\n\t\t\t\t   \t\t\tcur s]\n\n\t\t\t\t\t\t\t(if (= cur end)\n\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t    \t\t\t(recur inner-cnt end (concat res [(+ cur step)]) (+ cur step))\n\t\t\t\t\t\t\t))\n\t\t\t\t)\t\n\n\t\t  ]\n\n\t\t  ;(println (range start (+ start step)))\n\n\t\t  (if (= start 0)\n\t\t  \t\t(map (partial mysub step cnt) (range start (+ start step)))\n\t\t  \t\t(map (partial mysub step cnt) (range start (+ start step)))\n\t\t  \t)\n\n\t\t \n\n\t\t)\n\n\t)","user":"55897fe2e4b059ccff29b205"},{"problem":43,"code":"(fn [a b]\n  (apply map (partial conj []) \n       (partition b a)))","user":"58809253e4b0f1effa3b7618"},{"problem":43,"code":"(fn [v n] (take n (map #(take-nth n (drop % v)) (range (count v)))))","user":"5e246f92e4b05b4b01516150"},{"problem":43,"code":"(fn [coll n]\n\n    (loop [ results []\n            currcoll (partition n coll)\n            counter 0]\n        (if (< counter n)\n            (recur (conj results (reduce #(conj %1 (nth %2 counter)) [] currcoll)) currcoll (inc counter))\n             results\n        )\n    )\n    \n)","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn fc43 [xs n]\n  (->> (map #(take-while (partial > (count xs)) (iterate (partial  + n) %)) (range 0 n))\n       (map (partial map #(nth  xs %)))))","problem":43,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":43,"code":"(fn [s n]\n  (reverse (let [t (count s)]\n             (loop [ o '() c 0]\n              (if (>= c n) o\n                 (recur  (conj o (for [x (range c (+ 1 (- t (- n c))) n)]\n                                   (nth s x ))) (+ c 1)))))))","user":"58983e3fe4b00487982d52ce"},{"problem":43,"code":"(fn [values n]\n  (loop [[current & remainder :as to-process] values\n         processed (into [] (repeat n []))\n         counter 0]\n    (if (empty? to-process)\n      processed\n      (recur\n       remainder\n       (assoc-in processed [counter] (conj (nth processed counter) current))\n       (if (= (dec n) counter)\n         0\n         (inc counter))))))","user":"55d06bcbe4b0e31453f64a3a"},{"code":"#(map (fn [i] (take-nth %2 (drop i %1)))\n      (range %2))","problem":43,"user":"50d882d4e4b01f0871336e69"},{"code":"(fn [xs n]\n  (for [i (range n)]\n    (keep-indexed #(if (zero? (mod (- %1 i) n)) %2) xs)))","problem":43,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":43,"code":"(fn [s n]\n  \t(apply map list (partition n s)))","user":"56228d00e4b03f08ee9a9227"},{"problem":43,"code":"(fn [coll n]\n  (reduce (fn [acc offset] (conj acc (take-nth n (drop offset coll))))\n          []\n          (range n)))","user":"5d97b602e4b0d3f9b434ad3a"},{"code":"(fn rev-interleave\n  [col n]\n  (vals (group-by #(rem (.indexOf col %) n) col)))","problem":43,"user":"4db8d37d535d1e037afb219c"},{"problem":43,"code":"(fn [coll num]\n  (map #(take-nth num (take-last (- (count coll) %) coll)) \n       (range 0 num)))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [xs n] (apply (partial map list) (partition-all n xs)))","problem":43,"user":"500854c4e4b028e089d3518c"},{"problem":43,"code":"(fn [xs step]\n   (let [indexed (map-indexed (fn [i a] [i a]) xs)]\n     (loop [n 0 acc []]\n       (if (= n step)\n         acc\n         (recur (inc n)\n                (let [vs (map second (filter (fn [[i _]] (= (mod i step) n)) indexed))]\n                  (conj acc vs)))))))","user":"551a21ece4b091ff45eda993"},{"problem":43,"code":"(fn [init_l n]\n  ((fn recons [l]\n    (if (empty? (first l))\n      '()\n      (cons (map first l) (recons (map rest l)))))\n   (partition n init_l)))","user":"54651982e4b01be26fd746d4"},{"problem":43,"code":"#(->> (partition %2 %1)\n      (apply (partial map list))\n      )","user":"5703a557e4b08d47c97781f4"},{"problem":43,"code":"(fn [s n] (map #(take-nth n (nthrest s %1)) (range n)))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn [c n]\r\n  (map (partial take-nth n) (take n (iterate rest c))))","problem":43,"user":"5027fc0ce4b01614d1633ff2"},{"code":"(fn reverse-interleave [xs n]\n  (letfn [(take-nth [xs n]\n            (loop [i 0 xs xs accum []]\n              (cond (empty? xs) accum\n                    (zero? (mod i n)) (recur (inc i) (rest xs) (conj accum (first xs)))\n                    :else (recur (inc i) (rest xs) accum))))]\n    (map #(take-nth (drop % xs) n) (range n))))","problem":43,"user":"4e50b67b535dc968683fc4ed"},{"problem":43,"code":"#(for [round (range %2)]\n   (for [index (iterate (fn [x] (+ %2 x)) round)\n         :while (< index (count %1))]\n     (nth %1 index)))","user":"60096aabe4b074f607df667f"},{"problem":43,"code":"#(map (partial take-nth %2) (take %2 (iterate rest %)))","user":"5c950334e4b048ec896c5a44"},{"problem":43,"code":";(fn spread[s n]\n;  (let [acc (reduce (fn [a _] (conj a [])) []  (range n))\n;        update-subsequence (fn [a e si] (assoc a si (conj (a si) e)))]\n;    (reduce (fn [a [e i]] (update-subsequence a e (mod i n))) acc (map vector s (range)))))\n\n#(apply map vector (partition %2 %1))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn ! \n  ([l s]\n   (! l s 0 (into [] (take s (cycle [[]])))))\n\n  ([l s t lists]\n    (if (empty? l)\n      lists\n      (! (drop 1 l) s (+ 1 t) (update-in lists [(mod t s)] concat (take 1 l)))\n    )))","problem":43,"user":"5323f4c6e4b09d4e7a9b54d4"},{"problem":43,"code":"#(map take-nth (repeat %2) (take %2 (iterate rest %1)))","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":43,"code":"(fn rint [coll x]\n  (let [partitions (partition-all x coll)]\n    (map\n      (fn [i] \n        (map #(nth % i) partitions))\n      (range 0 x))))","user":"5537cbaee4b09218d5f44fd3"},{"problem":43,"code":"(fn [coll n]\n   (reduce (fn [x y]\n             (map #(conj %1 %2) x y))\n           (repeat n [])\n           (partition n coll)))","user":"57fc5e42e4b0d3187e900997"},{"problem":43,"code":"(fn [c n] (map \n            #(take-nth n %)\n            (take n (iterate next c))))","user":"5a6dbaf5e4b0512ff01cda63"},{"problem":43,"code":"(fn dp [coll step]\n    (loop [x 0 rez [] ]\n        (if (>= x step)\n            rez\n            (do\n            (recur (inc x) (conj rez ( \n                (fn t [coll step start]\n                    (->> coll\n                    (map vector (iterate inc 0))\n                    (filter #(= (mod start step) (mod (first %) step)))\n                    (map second)\n                )) coll step x\n            ))) \n            )\n        )))","user":"59135c11e4b0163c97b36f02"},{"code":"(fn reverse-interleave [l n]\n  (loop [counter 0\n         acc []]\n    (cond\n      (= n counter) acc\n      :else (recur (inc counter)\n                   (conj acc \n                         (filter #(= (mod (.indexOf l %) n) counter)\n                                 l))))))","problem":43,"user":"51d49b75e4b013d740b70de6"},{"problem":43,"code":"(fn [s n] (reverse (map #(rest (take-nth n (concat (repeat % 0) s))) (range 1 (inc n)))))","user":"54da46e5e4b024c67c0cf753"},{"problem":43,"code":"(fn [s n] (map\n  (fn [offset] (keep-indexed\n    #(if (= (rem %1 n) offset) %2)\n    s))\n  (range 0 n)))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":43,"code":"(fn [-s -i]\n    (loop [s -s i 0 new (vec (repeat -i []))]\n          (if (empty? s)\n              new\n              ;(do (println i new)\n              (if (= i (dec -i))\n                  (recur (rest s) 0 (assoc new i (conj (nth new i) (first s))))\n                  (recur (rest s) (inc i) (assoc new i (conj (nth new i) (first s))))))))","user":"57e3f709e4b0bfb2137f5aaf"},{"code":"(fn [x y] (map #(take-nth y (drop %1 %2)) (range y) (repeat x)))","problem":43,"user":"514d398ee4b019235f6c0583"},{"problem":43,"code":"( fn [ vectr grps ]\n    ( loop [ index 0 result ( vec ( repeat grps [ ] ) ) ]\n       ( if ( = index ( count vectr )  )\n          result\n        ( recur\n         ( inc index )\n         ( do\n          ( assoc-in\n           result\n           [ ( mod index grps ) ( int ( / index grps ) ) ]\n           ( nth vectr index ) )\n          )\n         )\n       )\n     )\n   )","user":"5d5c6675e4b09db18d4482ec"},{"problem":43,"code":"(fn [value1 value2]\n   (for [x (range value2)]\n     (take-nth value2  (drop x value1))))","user":"60504383e4b056659d6341fa"},{"problem":43,"code":"(fn xy [coll n]\n        (for [i (range n)] (take-nth n (drop i coll))))","user":"5d03977ee4b0cc9c915881c7"},{"code":"(fn [s n]\n  (for [x (range n)]\n    (map #(nth % x) (partition n s))))","problem":43,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":43,"code":"(fn [coll n] (sort-by #(first %) (partition-by #(mod % n) (sort-by #(mod % n) coll))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":43,"code":"(fn rev-int [v n]\n    (apply map vector (partition n v)))","user":"588e8133e4b00487982d5191"},{"problem":43,"code":"(fn [coll n]\n   (map\n    #(apply concat (partition 1 n %))\n    (map #(drop % coll) (range n))))","user":"567476bde4b05957ce8c6139"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (let [first-n-elements (take n coll)\n        rest-elements (drop n coll)]\n    (cond\n      (= (count coll) 0) []\n      (<= (count coll) n) (map list first-n-elements)\n      :else (map concat (map list first-n-elements) (reverse-interleave rest-elements n))))\n  )","user":"5f29837ee4b033932238a64f"},{"problem":43,"code":"#(apply map vector (map vec (partition %2 %1)))","user":"5be589f9e4b0ed4b8aab4d13"},{"code":"(fn [x n]\n  (apply map list (partition n x)))","problem":43,"user":"4e6a4950535d8ccf87e9febf"},{"problem":43,"code":"(fn [s n]\n  (let [p (partition n s)]\n       (for [x (range n)] (map #(nth % x) p))))","user":"58fc52cee4b0438e51c2cf95"},{"code":"(fn my-reverse-interleave [x y]\n  (loop [count y coll x acc '()]\n    (if (zero? count)\n      (reverse acc)\n      (recur (dec count) (rest coll) (conj acc (take-nth y coll)) ))))","problem":43,"user":"4eb2c45e535d7eef3080734d"},{"problem":43,"code":"(fn [v n]\n    (for [offset (range n)]\n      (for [idx (range offset (count v) n)]\n        (nth v idx))))","user":"544cf5d7e4b0e39780006977"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (letfn [(stepper [col nb-items step limit]\n            (when (pos? limit)\n              (cons (take nb-items (take-nth step col))\n                    (stepper (next col) nb-items step (dec limit)))))]\n    (stepper xs (/ (count xs) n) n n)))","user":"548018d1e4b0c51c1f4d7326"},{"code":"(fn [lst x]\n  (partition (/ (count lst) x)(apply interleave (partition x lst)) )\n  )","problem":43,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [a b] (map second (group-by #(mod % b) a)))","problem":43,"user":"5230793be4b0035e815da383"},{"problem":43,"code":"(fn reverseInterleave\n  [xs numGroups]\n  (for [x (range numGroups)]\n    (take-nth numGroups (drop x xs))))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":43,"code":"(fn reverse-interleave\n  ([seq bucket-size] (reverse-interleave seq bucket-size 0 []))\n  ([seq size counter result]\n   (if (empty? seq)\n     result\n     (let [index (mod counter size)]\n       (recur (rest seq) size (inc counter)\n              (assoc result index (conj (get result index []) (first seq))))\n       )\n     )\n    )\n\n  )","user":"5aada061e4b073f17744257a"},{"problem":43,"code":"(fn [lst x]\n  (loop [co 1 d [] s lst]\n    (if (> co x) d\n      (recur (inc co) (concat d [(take-nth x s)]) (rest s)))))","user":"558378dce4b05c286339e115"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (apply map vector (partition n coll))\n  )","user":"5b265183e4b063e2438bcc31"},{"problem":43,"code":"(fn [vek i] (for [j (range i)] (take-nth i (drop j vek))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":43,"code":"(fn [coll divs]\n  (loop [index 0 reversed []]\n    (if (= index divs)\n      reversed\n      (recur (inc index) \n         \n               (conj reversed (for [x (range index (count coll) divs)] (nth coll x)))\n     \t\t        \n        )\n      )\n    )\n)","user":"5de6484ce4b0986d99407f66"},{"code":"(fn [s n]\n                    (for [remainder (range n)]\n                      (map #(nth s %) (filter #(= remainder (mod % n)) (range (count s))))))","problem":43,"user":"4e08fb7a535d04ed9115e7ac"},{"code":"#(apply map list (partition %2 %))","problem":43,"user":"4dce6e41535d5973398f92a2"},{"code":"#(loop [c %1 t []]\n  (if (= (count %1) (count (flatten t)))\n    t\n    (recur (rest c) (conj t (take-nth %2 c)))))","problem":43,"user":"5127e504e4b03a34742b4302"},{"code":"(fn [c j]\n  (map (fn[x]\n        (keep-indexed #(when (= (rem % j) x) %2) c)) (range j)))","problem":43,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":43,"code":"(fn [xs x]\n  (let [f (fn [n] (keep-indexed #(when (= n (mod % x)) %2) xs))]\n    (map  f (range x))))","user":"5392bfdee4b0b51d73faaeb2"},{"code":"(fn [coll n]\n  (let [parts (partition n coll)\n        step (fn [i] (map #(nth % i) parts))]\n    (map step (range n))))","problem":43,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":43,"code":"(fn [s n] (loop [i 0 ret []] (if (= i n) ret (recur (+ i 1) (conj ret ((fn everynth [l q r] (loop [i r ret []] (if (>= i (count l)) ret (recur (+ i q) (conj ret (nth l i)))))) s n i))))))","user":"59468de7e4b07ddc2dafad88"},{"problem":43,"code":"(fn func [x n]\n  (map #(take-nth n (drop % x)) (range n)))","user":"5666c2dbe4b04acd4f672dc3"},{"problem":43,"code":"#(apply map (fn [& args]\n              args)\n       (partition %2 %1))","user":"5410499de4b01498b1a719a6"},{"problem":43,"code":"#(let [size (/ (count %1) %2) \n       result (for [i (range 0 %2)] ((partial map (vec %1)) (range i (count %1) %2)))]\n   result)","user":"53c649d3e4b00fb29b221297"},{"problem":43,"code":"(fn [xs len] \n  (map \n   (fn [i] \n     (map \n      #(nth % i) \n      (partition-all len xs))) \n   (range len)))","user":"56cc34aee4b0ea9b8538f73c"},{"problem":43,"code":"(fn [xs x] \n  (map \n    #(map (fn [ys] (second ys)) %)\n      (vals \n\t    (group-by #(rem (first %1) x) \n\t      (map-indexed #(list %1 %2) xs)))))","user":"5f0dfa48e4b0f30dddfb5d55"},{"code":"(fn reverse-interleave [coll n]\n  (let [w (keep-indexed vector coll)\n        y (group-by (fn [[a b]] (rem a n)) w)]\n    (loop [i 0 acc []]\n      (if (= i n)\n        acc\n        (recur (inc i) (conj acc (map second (y (mod i n)))))))))","problem":43,"user":"53886d2fe4b0640c7a9a589d"},{"code":"#(map (fn [[key val]] (map second val))\n          (group-by first\n                    (map-indexed\n                     (fn [idx itm] [(rem idx %2) itm])\n                     %)))","problem":43,"user":"53838742e4b06839e8705ee0"},{"code":"#(let [p (partition-all %2 %)]\n  (for [n (range %2)]\n    (for [s p]\n      (nth s n))))","problem":43,"user":"503917a0e4b088a6a14ca763"},{"code":"#(apply (partial map list) (partition %2 %1))","problem":43,"user":"4e5ecd65535d8a8b8723a2d6"},{"code":"(fn [coll x]\n   (apply map list (partition x coll)))","problem":43,"user":"506c0a02e4b0eda3100c090d"},{"problem":43,"code":"(fn [seq x] (for [t (range x)] (keep-indexed #(if (= t (mod %1 x)) %2 nil) seq)))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"(fn [l n] \n  (vals (group-by #(rem (.indexOf l %) n) l)))","problem":43,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":43,"code":"(fn [xs n]\n  (apply mapv vector (vec (map vec (partition n xs)))))","user":"5fa8424ce4b0fa27300f3de5"},{"code":"(fn [raw_seq number]\n   (let [len (count raw_seq)\n         iterseq (fn [seq start skip] (for [ind (range start len skip)] (nth seq ind)))]\n       (loop [ result [] s 0  n number]\n         (if (zero? n) result\n            (recur (conj result (iterseq raw_seq s number)) (inc s) (dec n)) \n         )\n       )\n   )\n)","problem":43,"user":"522eba30e4b01cdb292c5f0e"},{"problem":43,"code":"(fn\n  [xs n]\n  (let [vs (vec (repeat n []))\n        +update (fn update' [coll pos f x]\n                 (assoc coll pos (f (coll pos) x)))]\n   (first (reduce (fn [[vs i] e]\n                   [(+update vs i conj e) (mod (inc i) n)])\n                  [vs 0]\n                  xs))))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":43,"code":"#(->> %1\n      (partition %2)\n      (apply map vector))","user":"52470d42e4b05ef8e38e6350"},{"code":"(fn rinterleave [l n]\n   (apply map vector (partition n l)))","problem":43,"user":"4ecaaa25535d6d7199dd3708"},{"code":"(fn [s n] (for [i (range n)]\n            (take-nth n (drop i s))))","problem":43,"user":"5302bb37e4b0d8b024fd3734"},{"problem":43,"code":"(fn [coll n]\n  (take n (map #(take (/ (count coll) n) (iterate (partial + n) %)) coll)))","user":"5fa52497e4b0fa27300f3dbf"},{"problem":43,"code":"(fn [ x s] (apply map list (partition s s nil x )))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (partition-all n)\n       (apply map vector)))","user":"575cbe44e4b02ea114799374"},{"code":"(fn [cl n]\n   (reduce \n     #(concat (rest %1) [(conj (first %1) %2)] )\n    (repeat n []) \n    cl)\n )","problem":43,"user":"51db9e1ee4b0e067a9bbadc9"},{"problem":43,"code":"(fn [xn numb]                                                                                                                                                                       \n   (let [par (partition numb xn)]                                                                                                                                                                                                                                                                                    \n     (map (fn [x]                                                                                                                                                     \n            (map #(nth % x) par ))\n          (range numb  )                                                                                                                                                              \n          )                                                                                                                                                                               \n   ))","user":"57bffed6e4b05aa3c4741c89"},{"code":"(fn [x y] (map #(take-nth y (drop % x)) (range y)))","problem":43,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"(fn f ([coll n] (f coll n []))\n      ([coll n out]\n        (if (empty? coll)\n          out\n          (recur (rest coll) n\n            (let [sub (take-nth n coll)]\n              (if (or (empty? out)\n                      (= (count sub) (count (last out))))\n                (conj out sub)\n                out))))))","problem":43,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":43,"code":"(fn [s x]\n (let [v (partition x s)\n        i (apply interleave v)]\n    (partition (/ (count s) x) i)))","user":"51ff6379e4b0f1313d468a98"},{"code":"(fn foo [coll n]\n  (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"4e113a81535d04ed9115e7c5"},{"problem":43,"code":"(fn reverse-interleave [xs count]\n  (for [x (range count)]\n    (take-nth count (drop x xs))))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [l n]\n  (map #(map second (second %))\n       (group-by first\n                 (map-indexed (fn [i e] [(mod i n) e]) l)\n       )\n  )\n)","problem":43,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn retarded-part [a-seq parts]\n  (apply map list (partition parts a-seq)))","problem":43,"user":"4faa8de0e4b081705acca1f8"},{"problem":43,"code":"(fn [collection split]\n     (loop [col collection n 0 result []]\n       (if (= n split)\n         result\n         (recur (rest col) (inc n) (conj result (take-nth split col))))))","user":"5f0a4904e4b09a3f05b71805"},{"problem":43,"code":"(fn [input value]\n  (let [coll1 (into [] input)]\n    (loop [result [] i 0]\n      (if (= i (count coll1))\n        result\n        (recur\n          (if (nil? (get result (rem i value)))\n            (conj result [(get coll1 i)])\n            (assoc result (rem i value) (conj (get result (rem i value)) (get coll1 i))))\n          (inc i))))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"code":"(fn reverse-interleave [xs n]\n\t(let [ys (partition-all n xs)]\n\t\t(partition-all (count ys) (apply interleave ys))))","problem":43,"user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [arg nb]\n  (loop [li (partition nb arg)\n         res '()\n         it nb]\n    (if (= 0 it)\n      res\n      (recur (map rest li) (concat res (list (map first li))) (dec it)))))","problem":43,"user":"537881a4e4b06839e8705e46"},{"problem":43,"code":"(fn [l n]\n  (->> (partition n l)\n       (apply map #(apply list %&))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":43,"code":"(fn\n  [coll n]\n  (->>\n   coll\n   (iterate rest)\n   (take n)\n   (map #(take-nth n %))))","user":"5abc5a09e4b073f1774426e9"},{"problem":43,"code":"(fn [sq n]\n  (loop [sq* sq dest '(())] ; dest has this shape to have cons append to it\n    (if (empty? sq*)\n      (apply map (cons concat (drop-last dest))) ; merge results, ignore '(())\n      (let [ret [(drop-last n sq*) (map vector (take-last n sq*))]]\n        (recur (first ret) (cons (last ret) dest))))))","user":"560843dee4b046a4fc0ac00e"},{"code":"(fn [col n] \r\n  (for [i (range n)]\r\n    (keep-indexed #(if (= (mod %1 n) i) %2) col)\r\n  )\r\n)","problem":43,"user":"4fd29d7ce4b04c3a95aa0424"},{"problem":43,"code":"(fn k[col m](apply map list((fn s[se n] (when (>= (count se) n) (cons (take n se) (s (drop n se) n)))) col m)))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":43,"code":"(fn[lst n]\n  (loop [lst (partition n lst)\n         n n\n         aux ()]\n    (if  (empty? (first lst))\n      (reverse aux )\n      (recur  \n      (map rest lst) n\n    (conj aux (map first lst) )\n    ))))","user":"56e9a56ae4b04a395b9a03fc"},{"code":"(fn inv-interleave [s n]\n  (for [g (range n)]\n    (for [i (range g (count s) n)]\n      (nth s i))))","problem":43,"user":"50aab057e4b056ee0193586b"},{"code":"(fn [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","problem":43,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":43,"code":"(fn [s n]\n   (let [gm (group-by #(mod % n) s)]\n     (map #(apply list (get gm %)) (keys gm))))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":43,"code":"(fn [coll n]\n  (loop [n n\n         coll coll\n         res []]\n    (if (zero? n)\n      res\n      (recur (dec n)\n             (map second (filter #(pos? (mod (first %) n)) (map vector (iterate inc 0) coll)))\n             (conj res (take-nth n coll))))))","user":"53322cece4b019098a6f8b73"},{"problem":43,"code":"(fn i \n  [coll n]\n  (loop [coll coll\n         r '()\n         seq-count 0]\n    (if (< seq-count n)\n      (recur (rest coll) (conj r (take-nth n coll)) (inc seq-count))\n      (reverse r)\n      )))","user":"58de563fe4b0a4d5acaab6e3"},{"code":"(fn [c x] (for [i (range x)] (take-nth x (drop i c))))","problem":43,"user":"4f83665ee4b033992c121c1c"},{"problem":43,"code":"(fn [lst n]\n  (map\n    (fn [i]\n      (take-nth n (drop i lst)))\n    (range n)))","user":"525cc912e4b0cb4875a45d48"},{"code":"(fn rl [s n]\r\n  (loop [s s\r\n         l 0\r\n         ret (replicate n '())]\r\n    (if (empty? s)\r\n        (map reverse ret)\r\n        (recur (rest s)\r\n               (inc l)\r\n               (map-indexed (fn [i x]\r\n                              (if (= i (mod l n))\r\n                                  (cons (first s) x)\r\n                                  x))\r\n                            ret)))))","problem":43,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"(fn r-interleave [col n]\n  (loop [result (repeat n [])\n         col col]\n    (if (empty? col)\n      result\n      (recur (map #(conj %1 %2)\n                  result\n                  (take n col))\n             (nthrest col n)))))","problem":43,"user":"516ff477e4b034fe8eaf70f3"},{"code":"(fn [s x]\n    (map #(map (partial nth s)\n               (range % (count s) x))\n         (range x)))","problem":43,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":43,"code":"(fn [coll n] (apply map (fn [& args] args) (partition n coll)))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [xs n]\n  (map \n   (fn [f] (f xs))   \n   (map \n    (fn [offset] (fn [ys] (filter #(= (mod % n) offset) ys))) \n    (map #(mod (+ (first xs) %) n) (range n)))))","problem":43,"user":"538c3424e4b0b51d73faae58"},{"code":"(fn [coll sep] (apply map list (partition sep coll)))","problem":43,"user":"50f8615ae4b0aafb827eb1fa"},{"code":"#(map (fn [n] (flatten (partition-all 1 %2 (drop n %)))) (range 0 %2))","problem":43,"user":"50e0d5a3e4b061dbdced723d"},{"problem":43,"code":"(fn [l d] (vals (group-by #(rem % d) l)))","user":"5552b617e4b0deb715856df8"},{"code":"(fn [seq n]\n  (map #(take-nth n (drop % seq)) (range 0 n)))","problem":43,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"(fn [xs n]\n  (reduce \n    (fn [buckets [v i]]\n      (update-in buckets [i] \n                 (fn [x] (conj x v))))\n    (vec (map (fn[_] []) (range n)))\n    (map vector xs (cycle (range n)))))","problem":43,"user":"4e513758535dc968683fc4f3"},{"code":"(fn di [s n]\r\n  (loop [acc []\r\n         i 0]\r\n    (if (= i n)\r\n      acc\r\n      (recur (conj acc (take-nth n (drop i s))) (inc i))\r\n      )\r\n    )\r\n  )","problem":43,"user":"4febb4dae4b0681fd128dc98"},{"problem":43,"code":"(fn [x y]\n  (loop [t (partition y x) r '()]\n    (if (= (count (first t)) 0)\n      (reverse r)\n      (recur (map rest t) (cons (map first t) r)))))","user":"566d71b1e4b0a866af6896ca"},{"problem":43,"code":"(fn calc [x pos]\n  ((fn iter [inner-count outer-count total-ret-col parcial-ret-col [head-cur-col & tail-cur-col] cur-pos]\n     (let [parcial-ret-col-added (concat parcial-ret-col (list head-cur-col))]\n       (if (= outer-count pos)\n         (if (= inner-count pos)\n           (if (empty? tail-cur-col)\n             (concat total-ret-col (list parcial-ret-col-added))\n             (iter 1 outer-count total-ret-col parcial-ret-col-added tail-cur-col cur-pos))\n           (if (empty? tail-cur-col)\n             (concat total-ret-col parcial-ret-col)\n             (iter (inc inner-count) outer-count total-ret-col parcial-ret-col tail-cur-col cur-pos)))\n         (if (= inner-count outer-count)\n           (if (empty? tail-cur-col)\n             (iter 1 (inc outer-count) (concat total-ret-col (list parcial-ret-col)) '() x cur-pos)\n             (if (= inner-count pos)\n               (iter 1 outer-count total-ret-col parcial-ret-col-added tail-cur-col cur-pos)\n               (iter (inc inner-count) outer-count total-ret-col parcial-ret-col-added tail-cur-col cur-pos)))\n           (if (empty? tail-cur-col)\n             (iter 1 (inc outer-count) (concat total-ret-col (list parcial-ret-col)) '() x cur-pos)\n             (if (= inner-count pos)\n               (iter 1 outer-count total-ret-col parcial-ret-col tail-cur-col cur-pos)\n               (iter (inc inner-count) outer-count total-ret-col parcial-ret-col tail-cur-col cur-pos))))))) 1 1 '() '() x 1))","user":"5c3f6322e4b08cd430848e97"},{"problem":43,"code":"(fn [s m]\n  (vals (group-by #(mod % m) s)))","user":"56201392e4b064ca9f4b16d8"},{"problem":43,"code":"(fn reverse-interleave\n    ([sqnc num-bins]\n     (reverse-interleave sqnc num-bins 0 (map (fn [_] []) (range num-bins)))\n     )\n    ([sqnc num-bins index result]\n     (if (empty? sqnc)\n       (map #(apply list %) result)\n       (reverse-interleave (rest sqnc) num-bins (inc index) (update-in (vec result) [(mod index num-bins)] conj (first sqnc)))\n       )))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (apply (partial map list)\n   (partition n xs)))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [coll n] (apply map list (partition n coll )))","problem":43,"user":"52808897e4b0757a1b171404"},{"problem":43,"code":"(fn [l n]\n    (apply (partial map list) (partition-all n l)))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [c n]\n  (let [s (vec c)\n        t (count c)]\n    (for [i (range n)]\n      (map #(get s %) (range i t n)))))","problem":43,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(fn [l n]\n  (letfn [(every-nth [x] (if (empty? x) nil\n                           (cons (first x) (lazy-seq (every-nth (drop n x))))))]\n    (map #(every-nth (drop % l)) (range n))))","problem":43,"user":"515ead6be4b049add99a053e"},{"code":"(fn [coll n]\n  (map reverse\n    (reduce\n      #(map conj %1 %2)\n      (repeat n ())\n      (partition-all n coll))))","problem":43,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":43,"code":"#( let [ n %2 nps (quot (count %) %2)] \n   ( loop [ a % i 0 res [] ] \n     ( if (= i n)\n       res\n       (recur (rest a) (inc i) ( conj res (for [ zz (range nps) ] (nth a (* zz n)))))\n     )\n    )\n   )","user":"5b3aa98be4b02d533a91bbca"},{"problem":43,"code":"(fn inverse-interleave [col i]\n  (partition\n   (/ (count col) i)\n   (apply interleave\n          (partition i col)))\n  )","user":"5d321852e4b01671435dbce8"},{"code":"(fn [coll n]\r\n   (for [x (range 0 n)]\r\n     (keep-indexed #(when (= x (mod %1 n)) %2) coll)))","problem":43,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn ri [s n]\n  (loop [rv (repeat n []) tmp s]\n    (if (empty? tmp)\n      rv\n      (recur (map conj rv (take n tmp)) (drop n tmp)))))","problem":43,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn doit [seq n] (apply map list (partition n seq)))","problem":43,"user":"4f29afc7e4b0d6649770a02e"},{"problem":43,"code":"(fn ri\n  [coll n]\n  (loop [i 0\n         rem coll\n         result (apply vector (map (fn [itm] ()) (range n)))]\n    (if (empty? rem)\n      (map reverse result)\n      (recur \n       (inc i) \n       (rest rem) \n       (update-in result [(mod i n)] #(conj % (first rem)))))\n    ))","user":"593e4b1fe4b069cdc2982bbb"},{"code":"#(apply (partial map (fn [& eles] (apply list eles))) (partition %2 %1))","problem":43,"user":"514d7e29e4b019235f6c0587"},{"code":"(fn [sequ x]\n  (partition \n   (/ (count sequ) x) (apply interleave \n                \t\t(partition x sequ)\n          \t\t\t   )\n   )\n)","problem":43,"user":"50fa0dcee4b07934dda8b0bb"},{"code":"(fn rev-interleave [coll x]\n  (let [make (fn make [x] (into [] (take x (repeat []))))]\n    (loop [idx 0 coll coll, acc (make x)]\n      (if (empty? coll) acc\n        (let [elem (first coll)]\n          (recur (rem (inc idx) x) (rest coll)\n                 (assoc acc idx ( conj (acc idx) elem ))))))))","problem":43,"user":"5224a46ce4b01819a2de42e5"},{"code":"#(loop [l %1\n        a (repeat %2 [])]\n   (if (empty? l)\n     a\n     (recur (drop %2 l) (map conj a (take %2 l)))))","problem":43,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn [l n]\n  (->> l\n    (partition n)\n    (apply map list)))","problem":43,"user":"4ff5744ae4b0678c553fc36a"},{"problem":43,"code":"(fn rev-interleave [xs n]\n  (->>\n    xs\n    (map-indexed vector)\n    (group-by #(mod (first %) n))\n    (map second)\n    (map (fn [s] (map #(second %) s)))\n   ))","user":"54448e84e4b032a45b869393"},{"code":"(fn [coll n] (sort-by first\n                       (partition \n                        (/ (count coll) n) \n                        (sort-by #(mod % n) coll))))","problem":43,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":43,"code":"(fn sol [xs n] (for [m (range 0 n)] (take-nth n (drop m xs))))","user":"54857657e4b0e286459a11ac"},{"problem":43,"code":"(fn [a n] \n  (map second \n       (group-by (fn [x] (mod (.indexOf a x) n)) a)))","user":"5a621702e4b0512ff01cd983"},{"problem":43,"code":"#_(fn rinterleave [coll n]\n  (take n\n        (cons (take-nth n coll)\n              (lazy-seq (rinterleave (rest coll) n)))))\n\n(fn [coll n]\n  (take n\n        (map #(take-nth n %)\n             (iterate rest coll))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [xs n]\r\n  (reduce\r\n    (fn [accs [el idx]]\r\n      (update-in accs\r\n        [(mod idx n)]\r\n        conj el))\r\n    (vec (take n (repeat [])))\r\n    (vec (map vector xs (range)))))","problem":43,"user":"50427899e4b0add3005c0fc2"},{"problem":43,"code":"(fn [coll v] (vals (group-by #(rem % v) coll)))","user":"56a6051fe4b0542e1f8d14e5"},{"code":"(fn [l n]\n  (apply map list\n    (partition n l)))","problem":43,"user":"4f0385b9535dcb61093f6b0e"},{"code":"(fn inverse-interleave [list1 n] (apply map list (partition n list1)))","problem":43,"user":"524a74b3e4b05ef8e38e64a7"},{"problem":43,"code":"(fn [items num] (loop [it items\n         result []]\n    (if (empty? it)\n      result\n      (recur (drop num it) (map #(conj\n                                   (nth (vec result) % [])\n                                   (nth (vec it) % []))\n                                (range num))))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":43,"code":"(fn [coll n](apply map list (partition n coll)))","user":"5ecf55dae4b016b56eae05a8"},{"code":"(fn [s n] \n  (map #(take-nth n %)\n       (map #(drop % s) (range n))))","problem":43,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":43,"code":"(fn [list parts]\n  (->> list\n       (group-by #(mod %1 parts))\n       (map second)\n  ))","user":"6004c750e4b074f607df6645"},{"code":"(fn [S n](map #(take-nth n %) (take n (iterate rest S))))","problem":43,"user":"5107b86de4b05b2b4eee7495"},{"problem":43,"code":"(fn [ls n]\n  (loop [l1 ls\n         counter n\n         acc '()]\n    (if (= counter 0)\n      (reverse acc)\n      (recur (rest l1) (- counter 1) (cons (take-nth n l1) acc)))))","user":"603a6c40e4b0d5df2af222f7"},{"problem":43,"code":"(fn [s n]\n  (map (fn [x] (take-nth n (drop x s))) (range n)))","user":"55625903e4b0c656e3ff17d7"},{"code":"#(loop [r [] i 0 xs %] \n  (if-not xs \n    r \n    (if (= i %2) \n      (recur r 0 xs) \n      (recur (assoc r i (conj (get r i []) (first xs))) (inc i) (next xs)))))","problem":43,"user":"4f047542535dcb61093f6bc7"},{"code":"(fn rev-inter\n  [a n]\n    (reverse\n    (reduce \n      (fn [ret pos]\n        (cons (keep-indexed #(if (= (rem %1 n) pos) %2) a) ret))\n      '()\n      (range n))))","problem":43,"user":"4f91a38ae4b0dcca54ed6c9f"},{"problem":43,"code":"(fn zip-by [l z]\n  ((fn zip-seq [l n]\n  (if (= n (count (first l)))\n    []\n    (lazy-seq (cons (map #(nth % n) l) (zip-seq l (inc n)))))) (partition-all z l) 0))","user":"5ed6030de4b016b56eae05db"},{"problem":43,"code":"(fn [l n]\n  (let [tmp (partition n l)\n        element-number (count (first tmp))]\n    (loop [n 0 result '()]\n      (if (= n element-number)\n        (reverse result)\n        (recur (inc n) (conj result (map #(nth % n) tmp)))))))","user":"539043e7e4b0b51d73faae97"},{"code":"(fn [lst n]\n  (reduce-kv \n    (fn [l k v]\n      (let [k2 (rem k n)] \n(assoc l k2 (conj (l k2) v))))\n(vec (repeat n []))\n(vec lst)))","problem":43,"user":"508bed64e4b0be79e5b189cf"},{"problem":43,"code":"(fn [coll n]\n   (apply map (fn [& c] c) (partition n coll)))","user":"50666699e4b03d366d7cb2b0"},{"problem":43,"code":"(fn [coll x]\n  (let [coll (seq coll)]\n    (loop [n x\n           coll2 coll\n           result []]\n      (if (= n 0)\n        result\n        (recur (dec n) (rest coll2) (conj result \n                                      (loop [index 0\n                                             result '()]\n                                        (if (empty? result)\n                                          (recur (+ index x) (conj result (first coll2)))\n                                          (if (>= index (count coll))\n                                            result\n                                            (recur (+ index x) (concat result (list (nth coll2 index)))))))))))))","user":"5a7ff79ce4b00b71e582a046"},{"code":"#(map (fn [idxl]\n         (map (fn [idx] (nth %1 idx)) idxl))\n       (map (fn [start]\n              (range start (count %1) %2)) (range %2)))","problem":43,"user":"51105c7fe4b04c71fce993ef"},{"code":"(fn reverse-interleave [coll n]\n  (->> coll\n      (map-indexed (fn [i x] [(mod i n) x]))\n      (group-by first)\n      (vals)\n      (map (partial map second))))","problem":43,"user":"4feff3b6e4b0678c553fc31e"},{"code":"(fn testQ [l n] (\n                   (fn r [li n res] (\n                                if(= nil (first li))\n                                  res\n                                  (r (drop n li) n ((fn [lis rep] (\n                                                                    map-indexed #(concat %2 (list (nth lis %1))) rep) \n                                                      ) li res))) \n                   )\n                   l n (repeat n '())\n                  )\n  )","problem":43,"user":"4fcf5292e4b03432b189f40e"},{"problem":43,"code":"#(loop [coll %1 acc [] size %2 part 0]\n  (if (empty? coll)\n    acc\n    (recur (rest coll) (update-in acc [part] (fn [old] (conj (or old []) (first coll)))) size (mod (inc part) size))))","user":"5773f3a9e4b0979f896515f2"},{"problem":43,"code":"(fn [sqn n]\n  (for [i (range n)]\n    (take-nth n (drop i sqn))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [x y] (partition (/ (count x) y) (apply interleave (partition y x))))","problem":43,"user":"51a91ac2e4b08d8ec191b822"},{"code":"(fn [c n] (for [i (range n)] (map #(nth % i) (partition n c))))","problem":43,"user":"4e1350af535d04ed9115e7d8"},{"problem":43,"code":"(fn rev-inter[l n]\n  (let [m (map-indexed #(vector (mod % n) %2) l)]\n    (vals (sort (reduce\n                 (fn [r x]\n                   (let [s (first x), v (last x)]\n                     (assoc r s (conj (get r s []) v))))\n                 {} m)))))","user":"5018878ce4b029375d2a5056"},{"problem":43,"code":"(fn [l n]\n  \"Reverse Interleave\"\n  (let [indexes (for [s (range n)]\n                  (take-while #(< % (count l)) \n                              (iterate #(+ % n) s)))]\n    (for [i indexes]\n      (map #(nth l %) i))))","user":"5492164ee4b0b312c081ff3e"},{"problem":43,"code":"#(map (fn [s] (take-nth %2 (drop s %1))) (range %2))","user":"5d05fdece4b0cc9c915881e8"},{"code":"(fn [coll p]\n   (apply list (map #(take-nth p (drop % coll)) (range p))))","problem":43,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn rleave [items n]\n  (apply map list (partition n items)))","problem":43,"user":"4f0d093b535d0136e6c22313"},{"problem":43,"code":"(fn [xs n] \n  (apply (partial map list) (partition n xs)))","user":"550b5c10e4b06e50f9beb143"},{"problem":43,"code":"(fn [c n]\n  (reduce #(map conj %1 %2) (repeat n []) (partition-all n c)))","user":"54487527e4b032a45b8693cc"},{"problem":43,"code":"(fn kk [x y] \n  (\n   if(= y 1)\n   ( list x)\n   (cons (take-nth y x) (kk (keep-indexed #(if (not= (mod %1 y) 0) %2) x) (dec y) )  )\n   \n  )\n)","user":"53fdc4b8e4b0de5c418485ea"},{"code":"(fn [xs n]\n  (apply map (fn [& args] args) (partition n n xs)))","problem":43,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn foo [s n]\n  (apply map (cons list (partition n s))))","problem":43,"user":"4facd2fae4b081705acca22f"},{"code":"(fn reverse-interleave [s n]\n  (vals (group-by #(mod % n) s)))","problem":43,"user":"521b339fe4b0c4ef0be83031"},{"problem":43,"code":"(fn [coll n] (->> (partition n coll)\n                  (apply map list)))","user":"5bd9549ee4b0ed4b8aab4bf0"},{"code":"(fn [ls n]\n ((fn [args] (apply (partial map list) args)) (partition n ls)))","problem":43,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [coll n] (sort-by first (map second ((fn [coll n] (group-by (fn [x] (mod x n)) coll)) coll n))))","problem":43,"user":"5340ee60e4b00652c8746ec9"},{"code":"(fn [s n]\n  (map #(take-nth n (nthnext s %)) (range 0 n)))","problem":43,"user":"4dad76588e77d6ed63f12a44"},{"problem":43,"code":"(fn [coll n]\n  (let [partitioned (partition n coll)]\n    (for [i (range (count (first partitioned)))]\n      (map #(nth % i) partitioned))))","user":"562db4d1e4b0a45d2ff83021"},{"code":"#(map reverse \n  (reduce\n  \t(fn r [a, l]\n      (if (or (empty? a) (empty? l))\n        nil\n        (cons\n         (conj (first a) (first l))\n         (r (rest a) (rest l))\n        )\n      )         \n    )\n  \t(repeat %2 '() )\n\t(partition %2 %)\n  )\n)","problem":43,"user":"50ba5113e4b03e68e4411c7d"},{"problem":43,"code":"(fn interleaver [xs n]\n  (let [m (into (sorted-map)\n                (->> xs\n                     (map-indexed vector)\n                     (group-by #(rem (first %) n))\n                     (map (fn [[k vs]] [k (map second vs)]))))]\n    (vals m)))","user":"5d47fa13e4b07c84aa5ae6b6"},{"problem":43,"code":"(fn [xs n]\n  (map (fn [x]\n        (map (fn [y] (nth xs y))\n          (range x (count xs) n)))\n    (range n)))","user":"56946d43e4b0dcc4269f411e"},{"problem":43,"code":"(fn [s x]\n  (loop [n (- x 1)\n         seqs '()]\n    (let [this (keep-indexed #(if (= n (mod %1 x)) %2 nil) s)]\n      (prn this)\n      (if (= n 0)\n        (cons this seqs)\n        (recur (- n 1) (cons this seqs))))))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":43,"code":"(fn [coll len] (vals (group-by #(mod % len) coll)))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":43,"code":"(fn [col n]\n  (apply map vector (partition n col)))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [xs n]\n    (let [filter-by-index\n            (fn [xs n k]\n              (map second (filter #(= n (mod (first %) k)) (map-indexed list xs))))]\n      (for [x (range n)\n            :let [y (filter-by-index xs x n)]]\n        y)))","problem":43,"user":"526302eee4b03e8d9a4a70a2"},{"problem":43,"code":"(fn [coll n]\n  (apply map (partial conj []) (partition n coll)))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":43,"code":"(fn [xs n]\n    (first (reduce (fn [accum next]\n             (let [[unleaved i] accum]\n               [(update-in unleaved [i] conj next) (mod (inc i) n)]))\n            [(vec (repeat n [])) 0]\n            xs)))","user":"5b62764ae4b0c6492753e725"},{"problem":43,"code":"(fn rev-inl [coll n]\n  (let [cls (partition-all n coll)]\n    (apply map list cls)\n    )\n  )","user":"60436423e4b02d28681c77a3"},{"code":"(fn my-inter [xs n]\n  ((fn [xs n result i]\n    (cond (empty? xs) result\n          :else (recur (rest xs) \n                       n \n                       (assoc result i (conj (result i) (first xs))) \n                       (mod (+ i 1) n))))\n  xs n (vec (repeat n [])) 0))","problem":43,"user":"5213ffd3e4b0961f15ac4d7d"},{"problem":43,"code":"(fn [coll cnt]\n  (let [n (quot (count coll) cnt)]\n    (partition n (apply interleave (partition cnt coll)))))","user":"52f426fce4b05e3f0be25f1e"},{"problem":43,"code":"(fn [xs n]\n  (loop [i 0 rs xs ss (into (sorted-map) (for [i (range n)]  [i []]))]\n    (if (empty? rs)\n      (vals ss)\n      (let\n        [id (mod i n)\n         vs (get ss id)\n         r  (first rs)]\n         (recur (inc i) (rest rs) (assoc ss id (conj vs r)))\n        )\n      )\n    )\n  )","user":"55316b8ae4b076ab5578f825"},{"problem":43,"code":"(fn reverseInterleave [s n]\n  (let [indexedS (map #(vector %2 %1) s (range))]\n    (loop [result []\n           nn 0]\n      (let [filtered (filter #(= 0 (mod (- (first %1) nn) n)) indexedS)]\n        (let [newResult (conj result (map second filtered))]\n             (if (= nn n)\n                 result\n                 (recur newResult (inc nn))\n             )\n        )\n      )\n    )\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":43,"code":"(fn [s x] (map #(take-nth x (drop % s)) (range 0 x)))","user":"540f09b9e4b0addc1aec6725"},{"code":"(fn [xs n]\n  (->> xs\n    (map-indexed list)\n    (group-by #(mod (first %) n))\n    (apply concat)\n    (apply sorted-map)\n    (vals)\n    (map #(map second %))))","problem":43,"user":"504f57c7e4b0a02f9cffde71"},{"problem":43,"code":"(fn reverse-inter [xs n]\n  (let [acc (take n (repeat []))]\n    (reduce #(map conj %1 %2) acc (partition n xs))))","user":"4f6543cae4b07046d9f4ef41"},{"problem":43,"code":"(fn [coll paso] \n (apply map vector (partition paso coll)))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn [master-seq step] (let [master-count (count master-seq)\n                            indexes (map #(+ (int (/ % master-count))\n                                             (mod % master-count))\n                                         (range 0 (* step master-count) step))\n                            master-vec (vec master-seq)\n                            unpart (map master-vec indexes)]\n                        (partition (/ master-count step) unpart)))","problem":43,"user":"5196568fe4b04c0af7ff3c1c"},{"code":"(fn [l n] (vals (group-by #(mod % n) l)))","problem":43,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"(fn [ls n]\n  (let [result (range n)\n        len (count ls)]\n    (map \n     #(for [r (range len) :when (= % (mod r n))] (nth ls r))\n     result)))","problem":43,"user":"504db141e4b021508a333965"},{"problem":43,"code":"(fn [x n] (map (fn [d] (map #(nth x %) (range d (count x) n))) (range n)))","user":"57c3451fe4b05aa3c4741cbd"},{"problem":43,"code":"(fn reverseInterleave [c n]\n  (loop [i n \n        , out []]\n      (if (= i 0)\n        out \n        (recur (dec i) \n               (conj out (take-nth n (drop (- n i) c)  ) ) \n        )\n      )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":43,"code":"(fn reverse-interleave [in-list n]\n  (loop [res (repeat n [])\n         curr 0\n         in-list in-list\n         ]\n    (if (empty? in-list) res\n                         (let\n                           [next-index (mod (inc curr) n)\n                            updated-nth (conj (nth res curr) (first in-list))\n                               res-new (concat (take curr res) [updated-nth] (drop (inc curr) res))]\n                           (recur\n                             res-new\n                             next-index\n                             (rest in-list))))\n    ))","user":"5f419985e4b0955706451fab"},{"problem":43,"code":"(fn [xs c]\n    (->> xs (map-indexed list)\n         (group-by #(mod (first %) c))\n         vals\n         (map #(map last %))))","user":"5351fca5e4b084c2834f4aec"},{"problem":43,"code":"#(loop [sub-seqs %2\n        col %1\n        res []]\n   (if (zero? sub-seqs)\n     res\n     (recur (dec sub-seqs) (rest col) (conj res (take-nth %2 col)))))","user":"532ecd44e4b019098a6f8b49"},{"problem":43,"code":"(fn deinterleave [s n]\n  (->> s (iterate rest) (map #(take-nth n %)) (take n)))","user":"56742817e4b05957ce8c612d"},{"code":"(fn reverse-interleave[a-seq n]\n    (let [mapped (group-by #(first %) (map-indexed #(list (rem % n) %2) a-seq))\n\t     remapped (into {} (for [[k v] mapped] [k (map #(second %) v)]))]\n\t\t (map #(remapped %) (range n))\n\t)\n)","problem":43,"user":"52763696e4b03e8d9a4a74d7"},{"problem":43,"code":"(fn [c n] (map (partial map second) (vals (group-by #(mod (first %) n) (map-indexed vector c)))))","user":"593c71cbe4b069cdc2982b90"},{"problem":43,"code":"(fn [xs n]\n  (partition-all (/ (count xs) n)\n                 (apply interleave (partition-all n xs))))","user":"547ad587e4b0c51c1f4d72ce"},{"code":"(fn [coll n] (apply (partial map vector) (partition n coll)))","problem":43,"user":"5046f909e4b03b02161376b5"},{"problem":43,"code":"(fn [coll n]\n  (apply map (fn [& args] (apply list args)) (partition n n nil coll)))","user":"53dfbc75e4b0d874e779ae44"},{"problem":43,"code":"(fn [col n] (for [i (range n)] (apply concat (partition-all 1 n (subvec (into [] col) i)))))","user":"5991d9cbe4b0866487ed0d69"},{"code":"(fn [coll n]\n  (apply map (fn [& items] items) (partition n coll)))","problem":43,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":43,"code":"(fn [col x]\r\n  (reduce (partial map conj)\r\n          (repeat x [])\r\n          (partition x col)))","user":"525523e3e4b0541d1855b9cc"},{"problem":43,"code":"(fn \n  [coll step]\n  (for [i (range step)]\n    (take-nth step (drop i coll))))","user":"566f7749e4b0a866af6896e9"},{"problem":43,"code":"#(for [i (range %2)]\n   (->> %1 (drop i) (take-nth %2)))","user":"58247423e4b051871117bec5"},{"problem":43,"code":"(fn [s n]\n  (map #(take-nth n (drop % s))\n       (range n)))","user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn [coll n] (reduce #(map conj %1 %2) (repeat n []) (partition n coll)))","problem":43,"user":"4f0f3725535d0136e6c22337"},{"problem":43,"code":"(fn rev-int [v n] (apply map vector (partition n v)))","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"(fn [s n]\n  (loop [x (into [] (take n (repeatedly vector)))\n         s s\n         o 0]\n    (if (seq s)\n      (recur (update-in x [(mod o n)] conj (first s)) (rest s) (inc o))\n      x)))","problem":43,"user":"4e80aa10535db62dc21a62b1"},{"problem":43,"code":"(fn [coll s]\n      (vals (group-by #(mod % s) coll)))","user":"57762e67e4b0979f89651630"},{"code":"(fn [x n] \n   (for [y (reverse (range 1 (inc n)))]\n     (rest (take-nth n (concat (range y) x)))\n     ))","problem":43,"user":"525cc137e4b0cb4875a45d46"},{"problem":43,"code":"(fn t [col n]\n  (let [par (partition-all n col)]\n    (for [x (range n)]\n      (for [y par]\n        (nth y x)))))","user":"5a144fd8e4b0ff51aa4b319a"},{"code":"(fn [v c]\n  (map \n    #(mapcat rest (fnext %))\n    (group-by first\n      (map-indexed \n        #(identity [(mod % c) %2])\n        v)\n    )))","problem":43,"user":"4ed6ac40535d10e5ff6f52e4"},{"problem":43,"code":"#(apply map list (partition %2 %))\n;#(partition (/ (count %) %2) (apply interleave (partition %2 %)))","user":"54380631e4b032a45b86930f"},{"problem":43,"code":"(fn [seq n]\n   (map (fn [v]\n       (map #(last %) v))\n        (vals (group-by #(mod (first %) n) (map-indexed vector seq)))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":43,"code":"(fn [l n]\n    (let [counter (atom 0)]\n      (let [got-nth\n            (fn  _ [l n]\n              (if (> n 0)\n                (let [inc-counter (fn [] (swap! counter inc) @counter),\n                      good?   (fn [&_] (= (rem (inc-counter) n) 0))]\n                  (let [grouped (group-by good? l)]\n                    (cons (grouped true)\n                          (_ (grouped false) (dec n)))\n                    ))))]\n        (sort (got-nth l n)))\n      ))","user":"5433a07be4b0b6b47310fce0"},{"problem":43,"code":"(fn\n  [s n]\n  (map\n   #(map second (second %))\n   (group-by\n    #(rem (first %) n)\n    (map-indexed vector s))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn ril ([sequ n c]\n  (if (= c 0)\n    '()\n  (cons (take-nth n sequ) (ril (rest sequ) n (- c 1)))))\n  ([sequ n] (ril sequ n n)))","problem":43,"user":"5239caa6e4b0d705d026ef27"},{"code":"(fn [s x]\n  (vals (group-by #(mod % x) s)))","problem":43,"user":"50843a4ae4b0c98812d0788b"},{"problem":43,"code":"(fn interleave-inverse\n  [n lst]\n  (for [i (range lst)]\n    (take-nth lst (drop i n))))","user":"59dd3930e4b0a0ac046f2504"},{"code":"(fn test [col n]\n  (partition (/ (count col) n) \n    (apply interleave (partition n col))))","problem":43,"user":"4fcc103fe4b0ee37620e185f"},{"code":"(fn [coll n]\n  (for [i (range n)]\n    (for [j (range i (count coll) n)] (nth (into [] coll) j))))","problem":43,"user":"4fb01e53e4b081705acca260"},{"problem":43,"code":"(fn reverse-interleave[coll n]\n\t(loop [coll coll n n agg []]\n\t\t(if (= n 0) agg\n\t\t\t(let [drop-nth (keep-indexed #(if (not= 0 (mod %1 n)) %2 nil) coll)]\n\t\t\t(recur drop-nth (dec n) (conj agg (take-nth n coll)))))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn [coll n]\n  (map (fn [i] (filter #(= (rem % n) (rem i n)) coll)) (take n coll)))","problem":43,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn f1 [x number]\n  (loop [the-list x counter 1 out []]\n      (if (> counter number) out\n        (recur (rest the-list) (inc counter) (conj out (take-nth number the-list)))\n\n  )))","problem":43,"user":"50a85af1e4b054305ba5a833"},{"code":"(fn unleave [s n]\n  (letfn\n    [(groups [s n]\n             (if (seq s)\n               (cons (take n s) (groups (drop n s) n))\n               )\n             )\n     ]\n    (apply\n      (partial map (fn [& args] args))\n      (groups s n)\n      )\n    )\n  )","problem":43,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn [l n] (map (fn [x] (map #(nth l %) x)) (vals (group-by #(mod % n) (range (count l))))))","problem":43,"user":"4fcebce4e4b03432b189f404"},{"problem":43,"code":"(fn [a b] (apply map list ((fn [a b] (partition a b)) b a)))","user":"5c374db6e4b0d62ef62d9f73"},{"code":"(fn [c num]\n  (map\n    #(take-nth num (drop % c))\n    (range num)))","problem":43,"user":"4db2f208535df7e46ed9b6c9"},{"problem":43,"code":"(fn [xs n]\n  (loop [acc []\n         i   0]\n    (if (= i n)\n      acc\n      (recur (conj\n              acc\n              (map (partial nth xs) (range i (count xs) n))\n              )\n             (inc i)))))","user":"553dd883e4b0a04f792994e6"},{"problem":43,"code":"(fn deinterlieve [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5853582fe4b0b7285a6f4ec5"},{"problem":43,"code":"#(apply map vector\n  (partition %2 %1))","user":"5486adf7e4b0e286459a11be"},{"code":"(fn exterleave [coll n]\n  (apply map list (partition n coll)))","problem":43,"user":"4ff3e771e4b0678c553fc356"},{"problem":43,"code":"(fn [s c]\n  (loop [s1 s\n         remaining c\n         len (quot (count s) c)\n         acc []]\n    (if (<= remaining 0) acc\n      (recur (rest s1) (dec remaining) len (conj acc (take len (take-nth c s1))))\n    )))","user":"54227fc6e4b01498b1a71ac0"},{"code":"(fn [coll n] \n  (map #(map (fn [xs] (last xs)) %) \n    (vals\n      (group-by #(mod (first %) n) \n        (map-indexed #(list % %2) coll)))))","problem":43,"user":"50217818e4b00bba4502f7a7"},{"problem":43,"code":"(fn [s,n] (apply map list (partition n s)))","user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn [x y] (apply map list (partition y x)))","problem":43,"user":"4eb0175b535d7eef30807336"},{"code":"#(reduce (partial map conj) (repeat %2 []) (partition %2 %))","problem":43,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn deint [aSeq n]\n             (loop [remainder aSeq, counter n, answer []]\n                (if (> counter 0)\n                    (recur \n                     (rest remainder) \n                     (dec counter) \n                     (conj answer (take-nth n remainder)))\n                    answer)))","problem":43,"user":"4e463703535dc968683fc4b2"},{"problem":43,"code":"(fn [s n]\n  (->> s\n       (partition-all n)\n       (apply map list)))","user":"5396c94be4b0b51d73faaee3"},{"code":"(fn reverse-interleave [coll step]\n  (let [c (map list coll (range))]\n    (map #(map first %) (vals (group-by #(mod (second %) step) c)))))","problem":43,"user":"51e38568e4b0c611d6113e43"},{"code":"(fn inter [ s n ]\n  (reduce (fn [ c e] (conj c  (take-nth n (nthrest s  e))) ) []  (range n) ))","problem":43,"user":"5101192ae4b0bef64c30e266"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n    (for [ix (range n)] (take-nth n (nthrest coll ix)))\n  )","user":"54965534e4b0b312c081ff65"},{"problem":43,"code":"(fn reverse-interleave\n  [xs n]\n  (apply map vector (partition n xs)))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":43,"code":"#(apply map (fn [& n] n) (partition-all %2 %1))","user":"543823f1e4b032a45b869311"},{"code":"(fn [s n] (apply map (fn [& xs] (seq (apply conj [] xs))) (partition n s)))","problem":43,"user":"4dc1bd76535d020aff1edf8d"},{"problem":43,"code":"(fn revint [list n]\n  (for [i (range 0 n)\n        :let [result \n              (map #(nth list %) (range i (count list) n))]]\n    result))","user":"5603d057e4b0c80df0ca264e"},{"code":"(fn[c,n](for [i (range n)] (mapcat #(if (= i (mod % n)) (vec [(get (vec c) %)])) (range 0 (count c)))))","problem":43,"user":"5093ca51e4b097f48cc38585"},{"problem":43,"code":"(fn [l n]\n  (->> l\n       (partition n)\n       (apply interleave)\n       (partition (/ (count l) n))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":43,"code":"(fn [coll n]\n   (loop [p (partition n coll) out []]\n     (if (empty? (first p))\n       out\n       (recur (map rest p) (conj out (map first p))))))","user":"5564c113e4b0c656e3ff180d"},{"problem":43,"code":"(fn [s n]\n   (let [letnth (fn [s n cnt acc]\n                  (if (empty? s) (reverse acc)\n                    (if (= cnt 0) (recur (rest s) n (dec n) (cons (first s) acc))\n                      (recur (rest s) n (dec cnt) acc))))\n         revitl (fn [s n cnt acc]\n                  (if (= cnt n) (reverse acc)\n                    (recur (rest s) n (inc cnt) (cons (letnth s n 0 '()) acc))))]\n     (revitl s n 0 '())))","user":"57780e4fe4b0979f89651657"},{"problem":43,"code":"#(for [i (range %2)]\n      (take-nth %2 (drop i %1)))","user":"53f642e4e4b0db01ade6f9db"},{"code":"(fn [coll n]\n  (apply map vector (partition n coll)))","problem":43,"user":"4e521cef535d302ef430da6d"},{"problem":43,"code":"(fn ri [s n]\n  (apply map list (partition n s)))","user":"53b39d82e4b047364c0444a6"},{"code":"(fn [lst n]\n  (let [lst2  (map vector lst (cycle (range n)))]\n        (vals (sort\n               (reduce\n                (fn [m [v i]] (assoc m i (concat  (m i) [v]))) {} lst2)))\n        )\n  )","problem":43,"user":"5124619ae4b02c3f2a072ccd"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (vals (group-by #(mod % n) coll)))","user":"5bc7f2d6e4b07a9b28b100b7"},{"code":"#(apply map list(partition %2 %1))","problem":43,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":43,"code":"(fn rev-interleave [a-seq n]\n  (let [parted-seq  (partition n a-seq)]\n    (map (fn [idx] (map #(nth % idx) parted-seq))\n         (range n))))","user":"580d2788e4b0849f6811b730"},{"problem":43,"code":"(fn [coll x] (map seq (reduce (fn [acc [group-index value]] (assoc acc group-index (conj (nth acc group-index) value))) (vec (repeat x [])) (map-indexed #(conj [] (mod %1 x) %2) coll))));(fn [coll x] (let [mod-x #(mod % x) reduce-indexed (fn [f init coll] (loop [acc init remaining coll index 0] (if (empty? remaining) acc (recur (f acc (first remaining) index) (rest remaining) (inc index)))))] (map seq (reduce-indexed (fn [acc item index] (assoc acc (mod-x index) (conj (nth acc (mod-x index)) item))) (vec (repeat x [])) coll))))","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":43,"code":"(fn [x1 m]\n(reduce-kv \n  (fn [acc k v]\n    (update-in \n        acc \n        [(rem k m)]\n        (fn [vl]\n           (if (nil? vl)\n               [v]\n               (conj vl v)\n           )\n        )\n    )\n  )\n  []\n  (vec x1)\n)\n)","user":"59c243bae4b0a024fb6ae4aa"},{"code":"(fn rev-interleave [coll n]\n  (partition \n    (/ (count coll) n)\n    (apply\n      interleave\n      (partition n coll))))","problem":43,"user":"526ee63de4b03e8d9a4a733f"},{"problem":43,"code":"(fn ri [c a]\n  (map\n   (fn ft [i c] (keep-indexed #(if (= i (mod % a)) %2) c))\n   (iterate inc 0)\n   (repeat a c)))","user":"54349368e4b0b6b47310fcf1"},{"problem":43,"code":"(fn x [sq partition-count]\n  (let [add-to-vector (fn [m k v] (if (contains? m k)\n                                    (assoc m k (conj (get m k) v))\n                                    (assoc m k [v])))\n\n        indexed-values (loop [count 1\n                              m {}\n                              s sq]\n                         (if (empty? s)\n                           m\n                           (recur (if (= count partition-count) 1 (inc count))\n                                  (add-to-vector m count (first s))\n                                  (rest s)))\n                         )]\n    (map second (sort-by first (seq indexed-values)))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":43,"code":"(fn\n  [coll listCount]\n  (let [\n    listLength (/ (count coll) listCount)\n    baseList (map #(* listCount %) (range listLength))\n    baseLists (repeat listCount baseList)\n    increment (fn [lst step] (map #(nth coll (+ % step)) lst))\n    incrementBy (range listCount)\n  ]\n  (map increment baseLists incrementBy)))","user":"5c119da6e4b01240ff56717d"},{"problem":43,"code":"#(loop [sq %1 nm 0 inl []]\n   (if (empty? sq)\n     inl\n   (let [el (first sq)]\n   \t\t(if (> (inc nm) (count inl))\n     (recur (rest sq) (rem (inc nm) %2) (conj inl [el]))\n     (recur (rest sq) (rem (inc nm) %2) (update-in inl [nm] (fn [x] (conj x el))))\n  \t)  \n   )\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":43,"code":"(fn [coll n] \n  (apply \n   (partial map list) \n   (partition n coll)))","user":"54361d92e4b032a45b8692f7"},{"code":"#( for [ i (range %2) ] (take-nth  %2 (drop i %1 )))","problem":43,"user":"518c5236e4b087e178201de0"},{"code":"(fn [s n]\n  ((fn distr [a c]\n   (if (empty? (first c))\n     a\n     (distr (conj a (map last c)) (map butlast c))))\n  '() (partition n n nil s) ))","problem":43,"user":"4fff57f1e4b0678c553fc3fe"},{"problem":43,"code":"(fn\n  [s n]\n  (loop [[f & r] s\n         buckets (vec (take n (repeat [])))\n         i       0]\n    (if f\n      (let [bucket (nth buckets i)]\n        (recur r (assoc buckets i (conj bucket f)) (mod (inc i) n)))\n      buckets)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":43,"code":"(fn revint [collection n]\n  (let [add-rot (fn [ve item] (concat (rest ve) (vector (conj (first ve) item))))\n        prep (loop [i n\n                    c []]\n               (if (> i 0)\n                 (recur (dec i) (conj c [])) \n                 c))]\n    (loop [inter collection\n           result prep]\n      (if (> (count inter) 0)\n        (recur (rest inter) (add-rot result (first inter)))\n        result))))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":43,"code":"(fn [col n]\n  (for [i (range n)]\n    (take-nth n (drop i col))))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn [x n] (map #(map last %) (vals (group-by first (map-indexed (fn [i v] [(mod i n) v]) x)))))","problem":43,"user":"5158bba4e4b059418b97f0ab"},{"code":"(fn [col n]\n  (loop [i n\n         s col\n         result ()]\n    (if (> i 0)\n      (recur (dec i) (rest s) (conj result (take-nth n s)))\n      (reverse result))))","problem":43,"user":"4ecb1641535d6d7199dd370e"},{"problem":43,"code":"(fn [coll n] \n  (reduce \n   \t(fn [a e] (map conj a e)) \n  \t(repeat n []) (partition n coll)))","user":"4f1ef6a0535d64f60314649b"},{"code":"#(vals (group-by (fn [i] (mod i %2)) %1))","problem":43,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn [coll parts]\n    (map (fn [offset]\n           ((fn iter [s out i]\n              (if (empty? s)\n                out\n                (if (= (mod (- i offset) parts) 0)\n                  (iter (rest s) (conj out (first s)) (+ i 1))\n                  (iter (rest s) out (+ i 1)))))\n            coll [] 0))\n       (range parts)))","problem":43,"user":"4fe8e771e4b0547ebccb2431"},{"code":"(fn [xs n]\n  (let [go (fn [acc x] (map conj acc x))]\n    (reduce go (replicate n []) (partition n xs))))","problem":43,"user":"4e7f5a0b535db966e863cc41"},{"problem":43,"code":"(fn f43 [x y]\n    (apply map list (partition y x)))","user":"535aee3be4b04ce2eb3ed2aa"},{"code":"#(vals (group-by (fn [x] (rem x %2)) %1))","problem":43,"user":"51652141e4b003cf19fdde48"},{"code":"(fn [s n] (reverse\n  (loop [res () i 0]\n    (if (= n i)\n      res\n      (recur (conj res (take-nth n (drop i s))) (inc i))\n    )\n  )\n))","problem":43,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":43,"code":"(fn [coll x] (apply map vector (partition x coll)))","user":"556a6137e4b09a3098a524e0"},{"problem":43,"code":"(fn [coll x]\n  (apply map list (partition-all x coll)))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":43,"code":"(fn reverse-interleave\n  ([coll x] (reverse-interleave coll x []))\n  ([coll x acculist]\n   (if (= (count acculist) x)\n     acculist\n     (reverse-interleave (rest coll)\n                         x\n                         (conj acculist (take-nth x coll))))))","user":"5e92adb6e4b0fbed045a37ea"},{"code":"(fn [s n] \n  ((fn f [s n m]\n    (when (and (seq s) (> m 0))\n      (cons (take-nth n s) (f (next s) n (dec m)))))\n   s n n))","problem":43,"user":"4fd7962ee4b0dab7d829f385"},{"code":"(fn inter [xs, n]\n  (reverse\n   (vals\n  (loop [in  xs\n         i   0\n         out {}]\n    (if (empty? in)\n      out\n      (recur\n       (rest in)\n       (inc i)\n       (assoc out (rem i n)\n         (conj (get out (rem i n) []) (first in)))))))))","problem":43,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [coll size]\n  (for [n (range size)]\n    (flatten (partition 1 size (drop n coll)))))","problem":43,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":43,"code":"(fn [l n](for [x (range n)]\n  (concat (take-nth n (drop x l))\n  )))","user":"549b1e50e4b0f3d1d8e70f7a"},{"problem":43,"code":"(fn [coll n] (vals (group-by #(mod (.indexOf coll %) n) coll)))","user":"5586f418e4b059ccff29b1de"},{"problem":43,"code":"(fn [c n]\n   (->> c\n    (map-indexed (fn [i v] [(rem i n) v]))\n    (group-by first)\n    (seq)\n    (sort-by first)\n    (map #(map second (second %1)))\n    ;; (map second)\n    ;; (map (partial map second))\n  ))","user":"538db083e4b0b51d73faae74"},{"code":"(fn rev-interleave [s n]\n (let [l (/ (count s) n)]\n   (partition l (apply interleave (partition n s)))))","problem":43,"user":"52173464e4b082aa80a88c75"},{"problem":43,"code":"(fn [l s] (vals (group-by #(rem % s) l)))","user":"55d74e71e4b0e31453f64aa4"},{"problem":43,"code":"(fn [l n]\n        (loop [o () i n]\n            (if (> i 0)\n                (recur\n                    (conj o\n                        (reverse\n                            (reduce\n                                #(conj\n                                    %1\n                                    (nth l (+ %2 (- n i))))\n                                ()\n                                (map #(* % n) (range (/ (count l) n))))))\n                    (dec i))\n                (reverse o))))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"(fn f [s n]\r\n  (letfn [(addto [e l c]\r\n              (if (= c 0)\r\n                  (cons (cons e (first l)) (rest l))\r\n                  (cons (first l) (addto e (rest l) (- c 1)))))\r\n    \r\n          (h [s n r c]\r\n              (if (empty? s)\r\n                  r\r\n                  (if (= c 1)\r\n                      (h (rest s) n (addto (first s) r c) n)\r\n                      (h (rest s) n (addto (first s) r c) (dec c)))))]\r\n          (reverse (map reverse (rest (h s n (replicate n '()) n))))))","problem":43,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"#(take %2 ((fn foo [coll val] (when (not-empty coll) (cons (take-nth val coll) (foo (rest coll) val)))) %1 %2))","problem":43,"user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn [s n]\n  (map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn [l factor]\n  (->> l\n    (map-indexed (fn [& args] args)) \n    (group-by #(mod (first %) factor))\n    (map (fn [[k v]] (map second v)))))","problem":43,"user":"53979a87e4b0b51d73faaef0"},{"problem":43,"code":"(fn ri [coll n]\n  (map (fn [e] (map #(second %) e)) \n       (vals (group-by #(mod (first %) n) \n                       (map-indexed #(vector %1 %2) \n                                    coll)))))","user":"558bb38fe4b0277789237631"},{"code":"(fn rev-interleave [coll n]\n  (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":43,"code":"(fn [s n]\n    (apply (partial map vector) (partition n s)))","user":"55f09e7be4b06e875b46ce28"},{"problem":43,"code":"(fn __ [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"5756f324e4b02ea1147992e8"},{"problem":43,"code":"(fn revLeave [a b] \n   (vals (group-by  #(mod (.indexOf a %) b) a )))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn[a,n](vals (group-by #(mod % (- n)) a)))","problem":43,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":43,"code":"(fn divide [x n] (let [len (/ (count x) n)] (partition len (apply interleave (partition n x)))))","user":"53b12c76e4b047364c04448a"},{"problem":43,"code":"#(->> (partition %2 %)\n      (apply map vector))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [x y]\n  (loop [l x i 1 r (array-map 1 nil)]\n    (cond\n     (empty? l)\n     (reverse (vals r))\n     (= nil (r i))\n     (recur (rest l)\n            (if (= i y) 1 (inc i))\n            (assoc r i (list (first l))))\n     :else\n     (recur (rest l)\n            (if (= i y) 1 (inc i))\n            (assoc r i (concat (r i) (list (first l))))))))","problem":43,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn rev-interleave [s n]\n  (let [p (partition n s)]\n    (for [i (range n)]\n      (map #(nth % i) p))))","problem":43,"user":"4e2d84bf535deb9a81d77f09"},{"problem":43,"code":"(fn [xs n] (map #(apply concat (partition 1 n (drop % xs))) (range n)))","user":"4fb1d7ace4b081705acca281"},{"code":"#(map (fn[x] (map second ( filter (fn [n] (= (mod (first n) %2) x) )  (map vector (range) %1) ))) (range %2))","problem":43,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":43,"code":"(fn [l x]\n\t(vals (group-by #(rem % x) l))\n  )","user":"588d0a52e4b05c141a2560a6"},{"problem":43,"code":"(fn rev-interleave [in val]\n  (for [ctr (range val)]\n    (take-nth val (drop ctr in))))","user":"5b107263e4b0cc2b61a3be22"},{"problem":43,"code":"(fn [coll xth]\n  (reduce\n    (fn [coll [idx v]]\n      (let [subidx (mod idx xth)\n            cur-coll (coll subidx)]\n        (assoc coll subidx (conj cur-coll v))))\n    (vec (repeat xth []))\n    (map-indexed vector coll)\n))","user":"5d7eaf5fe4b0492f5d910fc3"},{"code":"#(apply map (fn [& s] s) (partition %2 %1))","problem":43,"user":"5256627ce4b0541d1855ba1a"},{"problem":43,"code":"(fn [xs n]\n  (let [parts (partition n xs)]\n    (apply (partial map vector) parts)))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":43,"code":"(fn [ls n]\n(->> (map-indexed #(vector %1 %2) ls)\n  (partition-by #(quot (first %) n) )\n  (map #(map second %) )\n (apply (partial map list) )\n))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":43,"code":"(fn [a c] \n     (loop [targ [] parts (partition c a)]\n       (if (empty? (first parts))\n         targ\n         (recur (conj targ (map first parts)) (map rest parts)))\n       ))","user":"541ddadbe4b01498b1a71a84"},{"problem":43,"code":"(fn [l n]\n   (loop [list (vec l)\n          acc (zipmap (range n) (repeat '()))]\n     (let [i (first list)\n           cnt (-> list count inc)]\n       (if i\n         (recur (rest list) (assoc acc (mod cnt n) \n                                       (conj (get acc (mod cnt n)) i)))\n         (sort #(< (first %1) (first %2)) (map reverse (vals acc)))))))","user":"54bbba99e4b0ed20f4ff6ec2"},{"code":"(fn [xs p] \n  (map-indexed \n   #(map last (filter (fn [x] (= 0 (mod (- (first x) %1) p))) %2)) \n   (repeat p (map-indexed #(list %1 %2) xs))))\n\n;(fn [xs s] (apply map vector (partition s xs)))","problem":43,"user":"533b9cace4b0e30313ee6cd1"},{"code":"(fn [l s] (map (comp #(apply list %) second) (group-by #(rem % s) l)))","problem":43,"user":"5163b06be4b055933a9ca030"},{"problem":43,"code":"; my REAL solution to this works locally but not here. browser bugs ftw!\n(fn [c s]\n  (if (= s 2)\n    (list '(1 3 5) '(2 4 6))\n    (if (= s 3)\n      (list '(0 3 6) '(1 4 7) '(2 5 8))\n      (if (= s 5)\n        (list '(0 5) '(1 6) '(2 7) '(3 8) '(4 9))))))","user":"5530b827e4b076ab5578f818"},{"problem":43,"code":"(fn [seqq n]\n  (for [i (range n)] \n    (take-nth n (drop i seqq))))","user":"6088395de4b0ae75613dcee2"},{"problem":43,"code":"(fn myinterleave [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"53d5d43ce4b0e771c302544d"},{"code":"(fn [x n] (vals (group-by #(mod % n) x)))","problem":43,"user":"52b5edd1e4b0c58976d9ad3c"},{"problem":43,"code":"(fn rev\n  [col x & [sseqs]]\n  (cond\n    (nil? sseqs) (rev col x (repeat x '()))\n    (nil? col) (map reverse sseqs)\n    :else (rev (nthnext col x) x (for [n (range x)] (conj (nth sseqs n) (nth col n))))))","user":"53806e5be4b06839e8705ec1"},{"problem":43,"code":"(fn [sequence n]\n  (partition (/ (count sequence) n) (apply interleave (partition-all n sequence)))\n  )","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":43,"code":"(fn [lst n]\n  (let [plst (partition n lst)]\n  (for [i (range n)]\n  \t  (mapcat #(list (nth % i)) plst)\n  ))\n)","user":"59a2ba97e4b066c664927d2c"},{"problem":43,"code":"(fn [l n]\n\t(loop [coll l x n f (mod (first coll) n) c 0 acc (list)]\n\t\t(if (= c x)\n\t\t\tacc\n\t\t\t(let [m (mod (+ c f) x)]\n\t\t\t\t(recur coll x f (+ c 1)\n\t\t\t\t\t(concat acc (list (filter #(= (mod % x) m) coll))))))))","user":"598af379e4b02b9968b84ce6"},{"problem":43,"code":"(fn deinterleave [coll n]                                                                                                                 \n  (for [index (range n)]                                                                                                                    \n    (take-nth n (drop index coll))))","user":"58e2e11ce4b005f69f193ca0"},{"problem":43,"code":"(fn [xs n]\n  (let [xss (take n (iterate rest xs))]\n    (map #(take-nth n %) xss)))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [col n]\n  (apply map list \n    (loop [l col acc []]\n      (println l acc)\n      (if (empty? l)\n        acc\n        (let [[f r] (split-at n l)]\n          (recur r (conj acc f)))))))","problem":43,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":43,"code":"; second - learning apply\n#(apply map list (partition %2 %))\n\n; first try - glad to see I wasn't the only one who came up with this horrible solution\n#_(fn [s n]\n  (map \n    #(map last %)\n    (map #(second %) \n         (group-by #(rem (first %) n)\n                   (map-indexed vector s)))))","user":"55e7d06ee4b050e68259b496"},{"code":"#_(\"It works only when the length of the collection is divisible by n, but all exapmles here exhibit that trait, so I'm being a smartass :)\")\n(fn [coll n]\n  (let [q (/ (count coll) n)]\n    (partition q (apply interleave (partition n coll)))))","problem":43,"user":"52dd4fb4e4b09f7907dd13df"},{"code":"(fn [v n]\n  (partition (/ (count v) n)\n             (apply interleave\n                   (partition n v))))","problem":43,"user":"5069c09be4b01dc6af13f837"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll)))\n  )","user":"564066dee4b08d4f616f5ee2"},{"problem":43,"code":"(fn [coll i] (partition (quot (count coll) i) (apply interleave (partition i coll))))","user":"583f2e4de4b089d5ab817dcb"},{"problem":43,"code":"(fn [xs n] \n         (apply map list\n                (partition n xs)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [coll n]\n  (map #(take-nth n %) \n    (take n (iterate next coll))))","problem":43,"user":"4e949d18535dbda64a6f6b15"},{"problem":43,"code":"#(map (partial map second) (vals (group-by (fn[[i _]] (rem i %2)) (map-indexed list %1))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [coll n]\n  (loop [result []\n         subcoll coll]\n    (if (== n (count result))\n      (seq result)\n      (recur (conj result (take-nth n subcoll)) (rest subcoll)))))","problem":43,"user":"5028cd0fe4b01614d1633ffc"},{"problem":43,"code":"(fn [sequence group]\n (letfn [(select-by-nth [result index select-nth rest1]\n           (if (empty? rest1)\n             (reverse result)\n             (if (= (rem index select-nth) 0)\n               (select-by-nth (conj result (first rest1)) \n                              (+ index 1) \n                              select-nth \n                              (rest rest1))\n               (select-by-nth result \n                              (+ index 1) \n                              select-nth \n                              (rest rest1)))))\n         (groups [result offset group sequence]\n           (if (> offset 0)\n             (groups (conj result \n                           (select-by-nth '() \n                                          offset \n                                          group \n                                          sequence))\n                     (- offset 1)\n                     group \n                     sequence)\n             (reverse result)))]\n   (groups '() group group sequence)))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [xs d] \n  (let \n  \t[part-map (zipmap xs (flatten (repeat (/ (count xs) d) (range d))))]\n   (partition-by part-map (sort-by part-map xs))))","problem":43,"user":"51aab611e4b04e3dc0c27b2d"},{"code":"(fn [s n]\n  (map\n    (fn [j]\n      (keep-indexed\n        (fn [i e]\n          (if\n            (zero? (mod (+ i (inc j)) n))\n             e\n             nil))\n        s))\n    (reverse (range n))))","problem":43,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn [x y]\n  (loop [lst x cnt 1 ret []]\n    (if (> cnt y) ret\n(recur (rest lst) (inc cnt) \n(conj ret (take-nth y lst))))))","problem":43,"user":"4fdf5403e4b05e33b9224f98"},{"code":"(fn [l n] (map (fn [i] (map #(nth l %) (range i (count l) n))) (range 0 n)))","problem":43,"user":"4e79ff2a535db169f9c796a9"},{"problem":43,"code":"#(let [subsequences %2]\n(loop [lst %1\n       finalLst ()]\n    (if (= (count finalLst) subsequences) \n        (reverse finalLst)\n        (recur (rest lst) (conj finalLst (take-nth subsequences lst)))\n     )\n))","user":"571172ece4b09c608db70446"},{"problem":43,"code":"(fn [coll n] (map (fn [g] (map #(last %) g)) (vals (group-by #(mod (first %) n) (map list (cycle (range 1 (inc n))) coll) ))))","user":"52e5f810e4b09f7907dd1468"},{"problem":43,"code":"(fn [coll splits]\n  (loop [src coll\n         acc []]\n    (if (= (count acc) splits) acc\n      (recur (rest src) (conj acc (take-nth splits src))))))\n\n;Best solution:\n;(apply map list (partiton splits coll))","user":"56041883e4b0c80df0ca2655"},{"code":"(fn ohmy [seq, n ]\n  ( let [ \n     keep-nth (fn [ssq, n, target] \n      ( keep-indexed (fn [index, val] \n        (when (= (mod index n) target  ) val ) ) \n      ssq) ) ]\n  (map #(keep-nth seq n % ) (range 0 n ) )\n) )","problem":43,"user":"5026916fe4b0c969f0b056e1"},{"problem":43,"code":"(fn [seq n]\r\n  (apply map list (partition n seq)))","user":"555bd27ae4b0b056612e2244"},{"problem":43,"code":"(fn ri [s n]\n  (apply map list (partition n s))\n  )","user":"56791447e4b05957ce8c6183"},{"problem":43,"code":"(fn rev-interleave [s n]\n   ((fn help [s i subseqs]\n     (if (empty? s)\n       (map seq (reverse (vals subseqs)))\n       (let [subseq (mod i n)]\n         (help (rest s)\n               (inc i)\n               (assoc subseqs subseq (conj (subseqs subseq []) (first s)))))))\n    s\n    1\n    {}))","user":"54d26316e4b0e8a36923e5f2"},{"problem":43,"code":"(fn [ls n]\n  (let [itr (fn rec [ls a]\n              (if (empty? ls)\n                (reverse a)\n                (rec (drop n ls) (cons (map list (take n ls)) a))))]\n    (apply map concat (itr ls '()))))","user":"56d7f340e4b0ea9b8538f7df"},{"problem":43,"code":"(fn[l n]\n  (apply map list (partition n l)))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [seq number]\n  (map (fn [x] (keep-indexed (fn [index item] (if  (= x (rem index number)) (identity item) nil)) seq)) (range number) ))","problem":43,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":43,"code":"(fn problem-43 [coll n]\n  (->> (partition-all n n coll)\n       (apply map list)))","user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn [ls part]\n  (let [p (partition part ls)]\n    (apply (partial map list) p)))","problem":43,"user":"51df825de4b01188f062752b"},{"code":"(fn [c n] (apply map (fn [x y & more] (concat [x y] more)) (partition n c)))","problem":43,"user":"514721c6e4b0d520409ed392"},{"problem":43,"code":"(fn [vs n]\n  (map second (group-by #(mod % n) vs)) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":43,"code":"(fn f [s n]\n  (map (fn [idx] (keep-indexed #(if (= idx (mod %1 n)) %2) s)) (range n))\n  )","user":"56e30cefe4b03a7c14b85a3d"},{"problem":43,"code":"(fn [coll n]\n  (for [x (range n)]\n    (keep-indexed\n       #(if (= x (mod %1 n)) %2) coll)))","user":"5a4caa20e4b05d388ecb6b94"},{"problem":43,"code":"(fn [input-seq num-buckets]\n  (let [pairs (map-indexed (fn [idx itm]\n                             (let [bucket-number (mod idx num-buckets)]\n                               [bucket-number itm]))\n                           input-seq)\n        groups (group-by first pairs)]\n    (map (fn [s]\n           (let [elements (last s)]\n             (map last elements)))\n         groups)))","user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn [coll n]\r\n  (->>\r\n    (reduce\r\n      (fn [a [b idx]]\r\n        (assoc a idx (conj (get a idx) b)))\r\n      (array-map)\r\n      (partition 2 (interleave coll (iterate #(mod (+ % 1) n) 0))))\r\n    vals\r\n    reverse\r\n    (map reverse)))","problem":43,"user":"4e02bee8535d04ed9115e791"},{"problem":43,"code":"(fn [L n] (map (fn [x] (map #(nth L %) (range x (count L) n))) (range n)))","user":"55f25ae6e4b06e875b46ce43"},{"problem":43,"code":"(fn [c n]\n  (map\n   #(map second %)\n   (vals (group-by #(mod (first %) n) (map #(vec %&) (range) c)))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":43,"code":"(fn\n  [coll n]\n  (let [break-into-part\n       (fn [n coll acc]\n        (if (< (count coll) n)\n         acc\n         (let\n          [result (conj acc (take n coll))]\n          (recur n (drop n coll) result))))\n        parts (break-into-part n coll [])\n        boxes (repeat n [])\n        put-in-boxes #(map conj %1 %2)]\n        (reduce put-in-boxes boxes parts)))","user":"58a413b5e4b02bd94d917f07"},{"code":";; there is an easier solution with partition \n\n(fn [coll n] (map (partial take-nth n)\n                  (map #(drop % (take (+ (count coll) %) (cycle coll)))\n                       (range n))))","problem":43,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":43,"code":"(fn [l size]\n  (->>\n   (partition size l)\n   (apply map list)\n   )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":43,"code":"(fn\n  [coll n]\n  (reduce (fn [vecvec [& vals]]\n            (map (comp flatten vector) vecvec vals))\n          (take n (repeat []))\n          (partition n coll)))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":43,"code":"(fn [lis n]\n  (loop [tlis lis, tmpn n, final []]\n    (if (= tmpn 0)\n      final\n      (recur (rest tlis) (dec tmpn) (conj final (take-nth n tlis))))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [lst n] (map #(take-nth n (nthrest lst %)) (range 0 n)))","problem":43,"user":"508b95a0e4b0be79e5b189c6"},{"code":"(fn l [m n] (sort-by #(first %)(partition (/ (count m) n) (sort-by #(mod % n) m))))","problem":43,"user":"4fe97adde4b0547ebccb245e"},{"problem":43,"code":"(fn [coll n]\n   (reverse (loop [i n c coll sumn ()]\n     (if (= i 0)\n       sumn\n       (recur (dec i) (rest c) (conj sumn (take-nth n c)))))))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":"(fn rinterleave [s g]\n  (let [index (range)\n        gs (quot (count s) g)]\n    (map (fn [e] (map second e)) (vals (group-by #(mod (first %) g) (map vector index s))))))","problem":43,"user":"5003deb9e4b0678c553fc445"},{"problem":43,"code":"#(apply map \n       vector \n       (partition %2 %))","user":"55d8eed3e4b0e31453f64ac3"},{"code":"(fn [x y]\n  (map \n   (fn [i] (map first (partition-all y (drop i x)))) \n   (range 0 y)))","problem":43,"user":"53468f6ce4b084c2834f4a3f"},{"problem":43,"code":"(fn interleave-reverse [seq amount]\n  (loop [idx-list 0\n         result '()]\n    (if (< idx-list amount)\n      (recur (+ idx-list 1)\n             (concat result [(loop [list '()\n                                    idx idx-list]\n                               (if (< idx (count seq))\n                                 (let [list (concat list [(nth seq idx)])]\n                                   (recur list (+ idx amount)))\n                                 list))]))\n      result)))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":43,"code":"(fn [coll r]\n    (map reverse\n         (reduce (fn [a x]\n                   (map cons x a))\n                 (repeat r [])\n                 (partition r coll))))","user":"594bc16be4b07ddc2dafae39"},{"problem":43,"code":"(fn [coll rule] (apply map list (partition rule coll)))","user":"57eb2576e4b0bfb2137f5b5c"},{"code":"(fn [ss n]\n  (loop [s ss r (vec (repeat n '())) i 0]\n    (if (empty? s)\n      (map reverse r)\n      (recur \n        (rest s)\n        (assoc r (mod i n) (cons (first s) (nth r (mod i n)) ))\n        (inc i)))))","problem":43,"user":"4e8b98fc535d65386fec2124"},{"problem":43,"code":"(fn [sq n]\n  (let [isq (map vector sq (range (count sq)))\n        nth-sq (fn [i]\n                 (map #(first %) (filter #(= i (mod (second %) n)) isq)))]\n    (for [idx (range n)] (nth-sq idx))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":43,"code":"(fn [col n](apply map list (partition n col)))","user":"54b54d1be4b05787c3b1639c"},{"problem":43,"code":"(fn [coll n]\n  (loop [cnt 0 new_coll coll res ()]\n    (if (= cnt n)\n      (reverse res)\n      (do\n      (recur (inc cnt) (rest new_coll) (conj res (reduce concat (partition 1 n new_coll))))))\n    )\n  )","user":"5b5462b5e4b02d533a91bd20"},{"code":"#(map (fn [x] (rest (flatten x))) (seq (group-by (fn [y] (rem y %2)) %1)))","problem":43,"user":"5356d00ee4b04ce2eb3ed26f"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (apply map vector (partition n coll)))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn [s n]\n  (letfn [(every-nth [s n]\n            (loop [s s i n ret []]\n              (if (empty? s)\n                ret\n                (if (= i n)\n                  (recur (rest s) 1 (conj ret (first s)))\n                  (recur (rest s) (inc i) ret)))))]\n    (loop [i 0 ret [] s s]\n      (if (= i n)\n        ret\n        (do\n          (prn \"******\" (every-nth s n))\n          (recur (inc i) (conj ret (every-nth s n)) (rest s)))))))","problem":43,"user":"4fb4f42ae4b081705acca2b4"},{"code":"(fn rev [s n]\n  (loop [ans [] x 0]\n    (if (= x n)\n      ans\n      (recur\n        (concat\n          ans\n          [(map #(nth s %) (range x (count s) n))])\n        (inc x)))))","problem":43,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn [seq n]\n  (partition (/ (count seq) n) \n    (apply interleave (partition n seq))))","problem":43,"user":"4fd65b2be4b0d4de60cee37e"},{"code":"(fn unterleave [coll n]\n  (for [offset (range n)]\n    (take-nth n (drop offset coll))))","problem":43,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"(fn [s n] (reduce (fn [result part] (map (fn [result i] (conj result i)) result part)) (repeat n []) (partition n s)))","problem":43,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":43,"code":"(fn [coll n]\n   (loop [i 0\n          icoll coll\n          resu []]\n     (if (< i n)\n       (recur (+ i 1)\n              (rest icoll)\n              (conj resu (take-nth n icoll)))\n       resu)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [coll n] \n  (let [parts (partition n coll)]\n    (map (fn [i] (map #(nth %1 i) parts)) (range n))))","problem":43,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":43,"code":"(fn [coll n]\n  (map \n   (fn [x]\n     (take-nth n (drop x coll)))\n   (take n (range))))","user":"57299c57e4b0c6e51e0d2b1e"},{"code":"(fn f \n  ([x n] (f x n 0))\n  ([x n o]\n   (->\n    (if (< o n)\n     (conj (f x n (inc o)) (map (partial + o) (take-nth n x) ) )\n    )\n    )\n   )\n  \n )","problem":43,"user":"5191045ee4b0f8ef0be96bf3"},{"code":"(fn [xs n]\n  (map second (group-by #(rem % n) xs)))","problem":43,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":43,"code":"(fn [coll n]                      ; [1 2 3 4 5 6] 2\n  (let [m   (/ (count coll) n)]   ; this is 6/2 -> 3\n   (->> coll\n        (partition n)             ; in groups of 2: [(1 2) (3 4) (5 6)]\n        (apply interleave)        ; get all first, then all seconds etc: [ 1 3 5 2 4 6 ]\n        (partition m))))          ; in groups of 3: [(1 3 5) (2 4 6)]","user":"563772a9e4b0bfe05bf117d7"},{"code":"#(apply map list  (partition %2 %))","problem":43,"user":"4ea5e794535d7eef308072df"},{"code":"#(for [ i (range %2)](take-nth %2 (drop i %1)))","problem":43,"user":"52d00a05e4b07d0d72b273b5"},{"problem":43,"code":"(fn [s n] (let [remainders (range n)]\n                (map (fn [r] (map #(nth % r) (partition n s))) remainders)))","user":"5ed875abe4b016b56eae05f2"},{"problem":43,"code":"(fn reverse-interleave \r\n [v, x]\r\n ;; return x subsequences which reverses the interleave process.\r\n (partition (/ (count v) x) (apply interleave (partition x v))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"code":"(fn [coll n]\n  (loop [c coll i 0 seqs (into [] (repeat n []))]\n    (if (empty? c)\n      seqs\n      (let [idx (mod i n)]\n        (recur (rest c) (inc i) \n                (assoc seqs idx \n                  (conj (nth seqs idx) (first c))))))))","problem":43,"user":"4e6f1b7a535d5021c1a89618"},{"problem":43,"code":"(fn\n  [coll ways]\n  (let [empty-result (into [] (repeat ways []))]\n    (loop [data (partition 2 (interleave (cycle (range ways)) coll))\n           output empty-result]\n      (if (zero? (count data)) \n        output\n        (let [[idx value] (first data)]\n          (recur\n            (rest data)\n            (assoc\n              output\n              idx\n              (conj (nth output idx) value))))))))","user":"559e6f42e4b08a52bd4f97d3"},{"problem":43,"code":"(fn [xs x]\n  (vals (group-by #(rem %1 x) xs)))","user":"5370d152e4b0fc7073fd6e9d"},{"problem":43,"code":"(fn [v n]\n  (for [i (range n)] (take-nth n (drop i v))))","user":"5592ba8be4b0c79f6e1db931"},{"code":"(fn [s n] (map #(take-nth n (drop % s))\n                (range n)))","problem":43,"user":"4ee88bfb535d93acb0a66881"},{"problem":43,"code":"(fn rev-interleave [in-seq n]\n  (vals (group-by #(mod (.indexOf in-seq %) n) in-seq)))","user":"5c196dc3e4b01240ff5671fa"},{"problem":43,"code":"(fn [lst x] (map #(nth % 1) (group-by #(mod % x) lst)))","user":"5c59b1d3e4b01df32ab73261"},{"problem":43,"code":"(fn [col idx]\n  (apply map vector (partition idx col)))","user":"53a83c74e4b047364c044426"},{"problem":43,"code":"#(first\n  (reduce \n    (fn [[c i] v] [(update-in c [(mod i %2)] conj v) (inc i)])\n    [(vec (repeat %2 [])) 0]\n    %))","user":"5499e23de4b03163384f4706"},{"problem":43,"code":"(fn [lst N]\n  (->> lst\n    (map-indexed (fn [i v] [i v]))\n    (reduce\n      (fn [res [i v]]\n        (let [colInd (rem i N)]\n          (assoc\n            res\n            colInd\n            (conj (nth res colInd) v)\n          )\n        )\n      )\n      (vec (repeat N []))\n    )\n    (tree-seq sequential? seq)\n    (filter (complement sequential?))\n    (partition (quot (count lst) N))\n  )\n  \n  \n)","user":"5bb905dce4b0a20761a235c7"},{"code":"(fn [s n]\n          (map (fn [i]\n                 (map (fn [ss] (nth ss i))\n                      (partition n s)))\n               (range n)))","problem":43,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn [coll len]\n  (let [parts (map-indexed (fn [i e] (vector (mod i len) e)) coll)] \n    (vals (reduce \n            (fn [result elems] \n              (let [k (first elems) v (last elems)] \n                (assoc result k (conj (get result k []) v)))) \n            (sorted-map) parts))))","problem":43,"user":"538b1644e4b0640c7a9a58c0"},{"problem":43,"code":"(fn [a n]\n  (loop [out (repeat n []) in a]\n    (if (empty? in)\n      out\n      (recur (map #(conj (vec %1) %2) out (take n in)) (drop n in)))))","user":"564a5a09e4b0284900eef656"},{"problem":43,"code":"(fn ilv [coll n] (map #(take-nth n (nthrest coll %)) (range n)))","user":"5646dff3e4b0284900eef615"},{"code":"(fn [v n] (vals (group-by #(rem (.indexOf v %) n) v)))","problem":43,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn [l n]\n  (let [len (count l)\n        gn (fn [ret pos]\n              (if (>= pos len) ret\n                  (recur (conj ret (nth l pos))\n                         (+ pos n))))]\n      (for [x (range n)] (reverse (gn '() x)))))","problem":43,"user":"4ec21058535dfed6da9c6dba"},{"problem":43,"code":"(fn [xs n](for [i (range n)](take-nth n (drop i xs))))","user":"55597b84e4b0deb715856e36"},{"problem":43,"code":"(fn [coll n]\n  (let [listids (cycle (range n))\n        idpairs (map list listids coll)]\n    (map (fn [id]\n           (map second (filter #(= (first %) id) idpairs)))\n         (range n))))","user":"5609d328e4b05f002753deee"},{"problem":43,"code":"(fn [m t]\n  (loop [a m r [] i 0]\n    (if (< i t)\n      (recur (rest a) (conj r (take-nth t a)) (inc i))\n      r)))","user":"5683d2a9e4b0945ebc182aa0"},{"problem":43,"code":"(fn revin [col n]\n  (->> col\n       (partition-all n)\n       (apply map list)))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [s n]\n  (apply map list (partition-all n s)))","problem":43,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn [col n]\n  (let [a (/ (count col) n)]\n    (->> col\n         (partition n)\n         (apply interleave)\n         (partition a))))","problem":43,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":43,"code":"#(map (comp rest flatten) (group-by (fn mod-it [item] (mod item %2)) %1))","user":"54e0bb4fe4b024c67c0cf7b8"},{"problem":43,"code":"#(partition-all (/ (count %1) %2) \n                (apply interleave \n                       (take-while not-empty \n                                   (iterate (partial drop %2) %1))))","user":"56f6e541e4b08e7d20b9682a"},{"problem":43,"code":"#(for [i (range %2)] (\n                      take-nth %2 (drop i %1)))","user":"5d01fb3ce4b0cc9c915881b5"},{"code":"(fn [c n]\n  (reduce #(map (fn [x y] (concat x y)) %1 %2) (map #(partition 1 %) (partition n c))))","problem":43,"user":"4ea7999e535d7eef308072ee"},{"problem":43,"code":"(fn revint [coll n] \n  (let [piv (/ (count coll) n)] \n    (partition piv (apply interleave (partition n coll)))))","user":"55306f9de4b076ab5578f814"},{"problem":43,"code":"(fn\n   [coll n]\n   (loop [iter 0\n          coll coll\n          result []]\n     (if (or (>= iter n) (empty? coll))\n       result\n       (recur (inc iter)\n              (rest coll)\n              (conj result\n                    (loop [coll coll\n                           index 0\n                           temp-result []]\n                      (if (empty? coll)\n                        temp-result\n                        (if (= (mod index n) 0)\n                          (recur (rest coll) (inc index) (conj temp-result (first coll)))\n                          (recur (rest coll) (inc index) temp-result)))))))))","user":"60631c2ee4b069485764ddbd"},{"problem":43,"code":"(fn [col n] (vals (group-by #(rem % n) col)))","user":"576df252e4b0979f8965156f"},{"problem":43,"code":"(fn [col n]\n  (for [offset (range n)]\n    (take-nth n (drop offset col))))","user":"5956c6dae4b066ee0a44af61"},{"problem":43,"code":"(fn ri\n\t([coll N] (ri coll N N))\n\t([coll N i]\n\t(when \n\t\t(> i 0)\n\t\t(lazy-seq (cons (take-nth N coll) (ri (rest coll) N (dec i)))))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":43,"code":"(fn [coll nseq]\n    (map #(take-nth nseq (drop % coll)) (range nseq))\n    )","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [a b] \n\t(map (fn [c] (map #(nth a %) c\n\t\t\t\t )\n\t       ) (vals (group-by  #(mod % b) (range (count a))) ) \n\t)\n)","problem":43,"user":"51aeb1f4e4b09397d5109794"},{"code":"(fn [x y] (vals (group-by #(rem % y) x)))","problem":43,"user":"4fa99ee1e4b081705acca1e4"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (loop [todo coll, idx 0, acc (zipmap (range n) (repeat (vector)))]\n    (if (empty? todo)\n      (map second (sort-by key < acc))\n      (recur (rest todo) (inc idx) (update-in acc [(rem idx n)] conj(first todo))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":43,"code":"(fn [xs n] (map #(->> xs (drop %) (partition-all 1 n) (apply concat)) (range n)))","user":"5fe0d4d4e4b05ac5b16ea164"},{"problem":43,"code":"(fn [l n] (let [glen (/ (count l) n) ]\n                     (partition glen (apply interleave (partition n l)))\n                     ))","user":"574986cae4b009280f9f2b9c"},{"code":"#(map (fn [[_ y]] (map second y))\n   (group-by\n   (comp (fn[x] (mod x %2)) first)\n   (map vector (range) %1)))","problem":43,"user":"5201572be4b0d7096e99ddbb"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (map #(take-nth n (drop % coll)) (range n)))","user":"55916d7be4b0604b3f94d57d"},{"problem":43,"code":"(fn [s n]\n  (loop [result (repeat n []) s s]\n    (if (first s)\n      (recur (map conj result (take n s)) (drop n s))\n      result)))","user":"54530382e4b0e397800069cc"},{"code":"(fn [coll n]\r\n  (reverse\r\n  (loop [i 0 ret '() col coll]\r\n    (if (>= i n)\r\n     ret\r\n     (recur \r\n       (inc i) \r\n       (conj ret (take-nth n col))\r\n       (rest col))))))","problem":43,"user":"4ddee37c535d08e6dec9fddc"},{"problem":43,"code":"(fn reverse-interleave [coll step]\n  (map #(take-nth step (drop % coll)) (take step (iterate inc 0))))","user":"5a06c154e4b01bb0ae8afdce"},{"code":"(fn rev-ilv [xs i]\n  (letfn [(deleaved [a] (->> a (partition-all i) (map first)))]\n      (loop [j i\n             start []\n             all xs]\n        (if (> j 0)\n          (recur (dec j) (conj start (deleaved all)) (rest all))\n          start))))","problem":43,"user":"4fc93728e4b0ee37620e1844"},{"problem":43,"code":"(fn [v x] (vals (group-by (fn [n] (mod  n x)) v)))","user":"55a21f1ce4b0acc240e3151f"},{"problem":43,"code":"(fn [arg number]\n  (loop [coll arg result (repeat number [])]\n    (if (empty? coll)\n      result\n      (recur (drop number coll)  (map conj result (take number coll))))))","user":"57344edbe4b0cd1946bd1008"},{"problem":43,"code":"(fn [v n] (let [modul (/ (count v) n)]\n      (partition modul (apply interleave (partition n v)))))","user":"5b198eace4b03cfeda66ecbb"},{"code":"#(->> %1\n  (partition %2)\n  (apply interleave)\n  (partition (/ (count %1) %2))\n)","problem":43,"user":"4ece7617535d23f03622770c"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (repeat n)\n       (map-indexed drop)\n       (map (partial take-nth n))))","user":"5629dfaae4b00e49c7cb4813"},{"code":"(fn [x y] (map (fn [k] (map (fn [j] reduce concat (last j)) k )) (map second (into [] (group-by (fn [z] (mod (first z) y)) (sort-by identity (zipmap (range (count x)) x)))))))","problem":43,"user":"5296008fe4b02ebb4ef7502a"},{"problem":43,"code":"(fn reverse-interleave\n  [coll partitions]\n  (loop [res [], items coll, i partitions]\n    (if (= 0 i)\n      res\n      (recur (conj res (take-nth partitions items)) (rest items) (dec i)))))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn [s n] ((partial apply map) vector (partition n s)))","problem":43,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [x y]\n  (let [col (partition y x)]\n    (loop [res [] idx 0]\n      (if (= idx y)\n        res\n        (recur (conj res (map #(nth % idx) col)) (inc idx))\n      )\n    )\n  )\n)","problem":43,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n    (map\n      (fn [i]\n        (map\n          (fn [j]\n            (nth\n              xs\n              (+ i (* j n))\n            )\n          )\n          (range (/ (count xs) n))\n        )\n      )\n      (range n)\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn [xs n]\n  (map (partial take-nth n)\n       (take n (iterate rest xs))))","problem":43,"user":"51670895e4b013fc800656c1"},{"code":"(fn \r\n  [coll n]\r\n(apply map (fn [& all] all) (partition n coll)))","problem":43,"user":"4ddeb916535d08e6dec9fdd9"},{"problem":43,"code":"(fn r-interleave [coll n]\n  (apply map list (partition n coll)))","user":"5630fd6fe4b0bfe05bf1178b"},{"problem":43,"code":"(fn reverse-interleave\n  [list n]\n  (let [start-indices (range n)]\n    (map (fn [a] (->> (drop a list)\n                                (take-nth n))) start-indices)))","user":"5fe5a64de4b05ac5b16ea187"},{"problem":43,"code":"(fn f [lst n]\n  (if (empty? lst)\n    (repeat n [])\n    (let [sp (split-at n lst)]\n      (map concat\n           (map vector (first sp))\n           (f (second sp) n)))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [a-list n]\n  (apply map vector (partition n a-list)))","problem":43,"user":"50ba3acae4b03e68e4411c78"},{"problem":43,"code":"(fn interleav [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","problem":43,"user":"4f2cdd42e4b0d6649770a055"},{"code":"(fn [l s]\r\n  (apply map vector (partition-all s l)))","problem":43,"user":"4ff201d7e4b0678c553fc330"},{"problem":43,"code":"(fn [lst n]\n  (loop [index 0\n         ans ()]\n    (if (not= n index)\n      (let [x (remove nil? (map-indexed (fn [a b] (if (= (rem a n) index) b)) lst))]\n        (recur (inc index) (cons x ans)))\n      (reverse ans)\n      )\n    )\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":43,"code":"(fn [coll x]\n  (partition (quot (count coll) x) (apply interleave (partition-all x coll))))","user":"57ee2b3ee4b0bfb2137f5bac"},{"problem":43,"code":"(fn rev-interleave\n  [my-seq x]\n  (apply map list (partition-all x my-seq)))","user":"548f19a8e4b0e286459a1231"},{"code":"(fn [coll n]\n  (let [seqs (partition n coll)\n        ns (range 0 n)]\n    (for [n ns]\n      (map #(nth % n) seqs))))","problem":43,"user":"4dada6d4c9a9d6ed2c99dc57"},{"problem":43,"code":"(fn [xs n] (map #(map last %1) (vals (group-by (fn [[i x]] (mod i n)) (map-indexed vector xs)))))","user":"5627d09ce4b00e49c7cb47db"},{"code":"(fn rev-interleave [xs n]\n  (reduce (partial map conj)\n          (repeat [])\n          (partition n xs)))","problem":43,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":43,"code":";; #(partition (/ (count %1) %2) %1)\n\n;; map this to seq\n\n;;(let [hops (/ (count coll) div)]\n\n(fn [coll div]\n   ((fn [indexes] (map #(map (partial nth coll) %1) indexes))\n\t\t(map #(range %1 (count coll) div) (range 0 div)) ))\n\n      ;;(fn [indexes] map #(map (partial nth ) indexes) coll)\n      \n      \n;; (map #(map inc %1) [[1 3 5] [2 4 6]])\n\t;;\t\t(map #(map (partial nth ) _seq_) [[0 2 4] [1 3 5]])","user":"59d631d4e4b0ef0a1e9b5c09"},{"problem":43,"code":"(fn\n  [s n]\n  (->> (map-indexed vector s)\n       (group-by #(rem (first %) n))\n       vals\n       (map #(map last %))))","user":"585a7b05e4b0f14aab7c874d"},{"code":"(fn [lst nb]\n  (map\n    (fn [b] (keep-indexed (fn [idx item] (if (= b (rem idx nb)) item  nil)) lst))\n    (range nb)))","problem":43,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn [s n]\n  (for [x (range n)] \n    (map \n     \t#(nth s %1) \n     \t(range x (+ x (count s)) n))))","problem":43,"user":"4f0da4e4535d0136e6c22319"},{"problem":43,"code":"#(partition (/ (count %1) %2) (apply interleave (partition-all %2 %1)))","user":"5547b72be4b0a04f79299550"},{"problem":43,"code":"(fn revintlv [parts n]\n\t(let [oneloop (fn oneloop [parts n target]\n      (loop [myvector [] [firstpart & partsrest] parts currnum 1 ]\n       \t (if (empty? partsrest) \n           (if (= currnum (mod target n ))\n             (conj myvector firstpart)\n             myvector\n           )\n           (if (= currnum (mod target n))\n             (recur (conj myvector firstpart) partsrest (mod (inc currnum) n) )\n             (recur myvector partsrest (mod (inc currnum) n) )\n           )\n         )\n      )\n    )]\n  \t(loop [myvector [] currnum 1]\n      (if (= currnum n)\n      \t(conj myvector (oneloop parts n currnum))\n        (recur (conj myvector (oneloop parts n currnum)) (inc currnum))\n      )\n    )\n   )\n) \n;[1 2 3 4 5 6] 2)","user":"579be21fe4b05b1deef9adff"},{"problem":43,"code":"(fn [coll x]\n  (loop [tcoll coll\n         colls (repeat x [])]\n    (if (empty? tcoll)\n      colls\n      (recur (drop x tcoll) (map #(conj %1 %2) colls (take x tcoll))))))","user":"5576f299e4b05c286339e077"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (loop [subseqs (vec (take n (repeat [])))\n         xs      coll\n         i       0]\n    (if (empty? xs)\n      subseqs\n      (let [sub     (nth subseqs i)\n            new-sub (conj sub (first xs))\n            next-i  (mod (inc i) n)]\n        (recur (assoc subseqs i new-sub) (rest xs) next-i)))))","user":"5e0e14bde4b099d064962fa3"},{"code":"#(map (partial take-nth %2) (for [x (range %2)]\n     (drop x %)))","problem":43,"user":"524f213be4b0541d1855b7ff"},{"problem":43,"code":"(fn rinter [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [coll n]\n    (map\n        (fn [i]\n          (keep-indexed #(when (= i (mod %1 n)) %2) coll))\n       (range n)))","problem":43,"user":"4fe8a3bde4b07c9f6fd12c61"},{"problem":43,"code":"(fn [coll x]\n  (loop [result [] parts (partition x coll)]\n    (if (empty? (first parts))\n      result\n      (recur (conj result (map first parts)) (map rest parts)))))","user":"58a6806ee4b01a0c0b23292f"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  (->>\n    (for [x (range n)]\n    (range x (count s) n))\n    (map (fn [h] (map #(nth s %) h)))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn f [s n]\n  (if (empty? s)\n    (repeat n ())\n    (map cons (take n s) (f (drop n s) n))))","problem":43,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn rev[c n]\r\n  (let [x (/ (count c) n)]\r\n  (partition x (apply interleave (partition n c)))\r\n  ))","problem":43,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":43,"code":"(fn [coll nn]\n  (let [rcoll (reverse coll)]\n    (loop [res (map list (take nn rcoll)) rr (drop nn rcoll)]\n      (if (seq rr)\n        (recur (map conj res (take nn rr)) (drop nn rr))\n        (reverse res)))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":43,"code":"(fn [s n]\n  (partition (/  (count s) n )  (apply interleave\n                             (partition n s))))","user":"589e704ae4b02bd94d917e5e"},{"problem":43,"code":"(fn [coll x]\n  (->> coll\n   \t(partition x)\n\t(apply map list)))","user":"559468cbe4b0c79f6e1db954"},{"code":"(fn myrevint [lt n]\r\n    (letfn [(rec [l e]\r\n  \t (if (= e 0)\r\n\t\t   '()\r\n\t\t   (cons (take-nth n l) (rec (rest l) (dec e)))))]\r\n\t   (rec lt n)))","problem":43,"user":"4e1b2cd9535d04ed9115e7fd"},{"code":"(fn [xs n] \n  (partition (quot (count xs) n) (apply interleave (partition n xs))))","problem":43,"user":"4fa6a491e4b081705acca1bc"},{"problem":43,"code":";Write a function which reverses the interleave process into x number of subsequences.\n(fn [init n]\n (loop [remaining init, lists (map (constantly []) (range n))]\n  (if (empty? remaining)\n   lists\n   (recur\n    (drop n remaining)\n    (map-indexed\n     (fn [idx el]\n      (conj el (nth remaining idx)))\n     lists)))))","user":"5ab5f60be4b073f177442643"},{"code":"(fn [coll n] (apply (partial map list) (partition n coll)))","problem":43,"user":"4f036d18535dcb61093f6abe"},{"problem":43,"code":"(fn [n coll]\n  (apply map vector (partition coll n)))","user":"5d03944de4b0cc9c915881c5"},{"problem":43,"code":"(fn [coll n]\n ((fn step [coll i]\n  (if (> i n)\n   nil\n   (concat [(take-nth n coll)]\n           (step (rest coll) (inc i)))\n  )\n ) coll 1)\n)","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn my-rev-int [coll n]\n    (let [res (map #(list (mod % n) (get (zipmap (range) coll) %)) (take (count coll) (iterate inc 0)))]\n      (for [[ignore x] (group-by first res)]\n        (seq (reduce #(conj % (second %2)) [] x)))))","problem":43,"user":"4f04d312535dcb61093f6be7"},{"code":"(fn [col n]\n  (apply map list (partition n col)))","problem":43,"user":"4f61be97e4b0defedf855fc5"},{"problem":43,"code":"(fn [coll n]\n    (let [v (vec coll)]\n      (for [i (range n)] \n        (map #(v %) (range i (count coll) n)))))","user":"57b9f35be4b0fbc9809a27f9"},{"code":"(fn [s n]\r\n  (reverse (map reverse ((fn [s res resold]\r\n     (if (nil? s)\r\n       res\r\n       (if (nil? resold)\r\n         (recur s nil (reverse res))\r\n         (recur (next s) (cons (cons (first s) (first resold)) res) (next resold)))))\r\n    s nil (repeat n nil)))))","problem":43,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":43,"code":"(fn reverse-interleave-rj [s n]\n  (let [partitioned (vec (partition-all n s))]\n      (map (fn [index]\n             (map #(nth % index) partitioned))\n           (range 0 n))))","user":"59301509e4b072a2710fcfd6"},{"problem":43,"code":"(fn part\n  [lst n]\n  (apply map vector (partition n lst)))","user":"57fc34f0e4b0d3187e90098e"},{"problem":43,"code":"(fn [xs n] (apply mapcat (fn [& xs] (list xs)) (partition n xs)))","user":"548cd813e4b0e286459a1211"},{"problem":43,"code":"(fn rinv [coll n]\n  (->>\n    (keep-indexed #(list %1 %2) coll)\n    (group-by #(rem (first %) n))\n    (vals)\n    (map #(map last %))))","user":"5bc28638e4b07a9b28b10033"},{"problem":43,"code":"(fn [coll n]\n(apply map (fn [ & xs] xs) (partition-all n coll))\n                          )","user":"5ac85708e4b0e27600da77ac"},{"code":"(fn [c n]\n  (map\n    #(take-nth n (drop % c))\n    (range n)))","problem":43,"user":"51b3f109e4b0f094dd986fa9"},{"code":"#(for[s (range %2) :let [r (take-nth %2 (drop s %1))]] r)","problem":43,"user":"517e6671e4b0329b27fa9f56"},{"code":"(fn [xs n] ((fn [tails] (apply map vector tails)) (take-while #(not (empty? %)) (iterate (partial drop n) xs))))","problem":43,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn revint [sq n] (if (empty? sq) (repeat n '()) (map cons (take n sq) (revint (drop n sq) n))))","problem":43,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":43,"code":"(fn a [coll i] (for [j (range i)] (take-nth i (drop j coll))))","user":"5cf68090e4b0b71b1d808a59"},{"problem":43,"code":"(fn [coll n]\n  (reduce (fn [colls [subseq value]] (update-in colls [(mod subseq n)] #(conj % value)))\n    (vec (repeat n []))\n    (map-indexed (fn [& args] args) coll)))","user":"524740e7e4b05ef8e38e635d"},{"code":"#(apply mapv vector (partition %2 %1))","problem":43,"user":"5128554ee4b03a34742b430a"},{"problem":43,"code":"(fn [x n]\n  (loop [x x\n         ans (repeat n [])]\n    (if (seq x)\n      (recur (drop n x) (map conj ans (take n x)))\n      ans)))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":43,"code":"(fn [coll x]\n    ((fn [coll result i]\n      (cond\n        (empty? coll) result\n        :else (recur (rest coll)\n                     (assoc result i (conj (nth result i) (first coll)))\n                     (mod (+ 1 i) (count result)))\n      )\n     ) coll (vec (repeat x [])) 0)\n)","user":"53ecd01fe4b0d648e757f4b9"},{"problem":43,"code":"(fn [s n] (map (fn [x] (map #(nth % x) (partition n s))) (range n)))","user":"542a8d07e4b01498b1a71b43"},{"problem":43,"code":"(fn test [coll n]\n  (loop [i 0\n         result []\n         c coll]\n    (if (= i n)\n      result\n      (recur (inc i) (conj result (take-nth n c)) (rest c))\n     )\n   )\n )","user":"54021f13e4b0df28a13c62cc"},{"code":"#(apply (partial map list) (partition %2 %2 nil %1))","problem":43,"user":"4f528bcde4b03ad3f0c10d3e"},{"code":"(fn [list num] \n    (map #(take-nth num (drop % list)) (range 0 num)))","problem":43,"user":"5038f8d2e4b088a6a14ca75f"},{"problem":43,"code":"(fn [xs x]\n  (loop [result {} count 0 items xs]\n    (if (empty? items)\n      (map (fn [key] (reverse (result key))) (sort (keys result)))\n      (if (= count x)\n        (recur (assoc result 0 (conj (result 0) (first items))) 1 (rest items))\n        (recur (assoc result count (conj (result count) (first items))) (inc count) (rest items))\n      )\n    )\n))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn [xs n]\n      (map #(take-nth n (drop % xs)) (range n)))","problem":43,"user":"50f48298e4b004d364930527"},{"problem":43,"code":"(fn reverse_interleave\n  [coll ss]\n  (let [xx (dec ss)]\n    (loop [coll (reverse coll) s xx _ss ss ret `()]\n      (if (nil? (first coll)) \n        (do (println :ret ret) ret)\n        (when-let [x (first coll)]\n          (recur \n           (rest coll)\n           (if (zero? s) xx (dec s))\n           (if (or (= 1 _ss) (zero? _ss)) 0 (dec _ss))\n           (if (zero? _ss)\n             (map-indexed #(if (= % s) (cons x %2) %2) ret)\n             (cons (list x) ret))))))))","user":"54b331dbe4b09f271ff37d37"},{"problem":43,"code":"; #(apply map list (partition %2 %1))\n#(loop [col % c %2 acc []]\n  (if (= c 0)\n    acc\n    (recur (next col) (dec c) (conj acc (take-nth %2 col)))))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":43,"code":";(fn reverse-interl [coll n]\n;   (loop [counter (first coll)\n;          remainder (first coll)\n;          ans []]\n;     (if (= counter (+ (first coll) n))\n;      ans\n;      (recur (inc counter) \n;             (inc remainder) \n;             (conj ans (if (= remainder n)\n;                         (filter #(= 0 (rem % n)) coll)\n;                         (filter #(= remainder (rem % n)) coll)))))))\n\n\n\n(fn rev-inter [lat n]\n     (partition (/ (count lat) n)  (apply interleave (partition n lat))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":43,"code":"(fn [col n] (apply map (fn [& args] args) (partition n col)))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":43,"code":"(fn\n  [x n]\n  (loop [mod-result (- n 1)\n         lists '()]\n   (if (< mod-result 0)\n    lists\n    (let [curr-partition (keep-indexed (fn [i v] (if (= mod-result (mod i n)) v)) x)]\n     (recur (dec mod-result) (conj lists curr-partition))))\n    )\n  )","user":"5e300655e4b05b4b01516209"},{"problem":43,"code":"(fn [il n]\n  (loop [seqs (vec (repeat n [])) l il]\n    (if (empty? l)\n      seqs\n\t  (recur (conj (subvec seqs 1) (conj (first seqs) (first l))) (rest l)))))","user":"5647dc44e4b0284900eef624"},{"problem":43,"code":"(fn [li n]\n  (->> (partition n li) (apply (partial map list))))","user":"59156f0be4b0163c97b36f3d"},{"problem":43,"code":"(fn [s n]\n  (map #(take-nth n (drop % s)) (range 0 n)))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":43,"code":"#(for [x (range 0 %2)] (take-nth %2 (drop x %)))","user":"5425d454e4b01498b1a71b13"},{"problem":43,"code":"(fn [col x]\n   (map #(map second %)\n    (map second\n         (group-by #(mod (first %) x)\n                   (map #(vector %1 %2) (iterate inc 0) col)))))","user":"5d887d27e4b0915913b1d3a8"},{"problem":43,"code":"(fn rinterleave [s n]\n  (map #(take-nth n (drop % s))\n       (range 0 n)\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":43,"code":"(fn [xs n]\n  (let [groups (group-by first (map-indexed (fn [i el] (list (rem i n) el)) xs))\n        ks (sort (keys groups))]\n    (->> ks\n         (map (fn [k] (map second (get groups k)))))))","user":"59fa241ee4b0ca45a743a358"},{"code":"(fn [coll n]\n  (reduce (fn [acc val]\n            (map #(conj %1 %2) acc val))\n          (repeat n [])\n          (partition n coll)))","problem":43,"user":"4eae5fe4535d7eef30807325"},{"problem":43,"code":"(fn p43 [x n]\n  (let [re-index (fn [x n]\n                   (map-indexed #(list (mod %1 n) %2) x))\n        re-group (fn [n]\n                   (fn [x]\n                     (map second\n                          (filter #(= n (first %1)) x))))]\n\n    ((apply juxt (map re-group (range n))) (re-index x n))))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn reverse-interleave [coll n]\n  (loop [lst coll\n         count 1\n         acc []]\n    (if (> count n)\n      acc\n      (recur (rest lst) (inc count) (conj acc (take-nth n lst))))))","problem":43,"user":"52a6ed15e4b0c58976d9ac0a"},{"code":"(fn [coll n]\n  (reduce (fn [result values]\n              (map conj result values))\n          (repeat n [])\n          (partition n coll)))","problem":43,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [l n] \n\t(->> l\n\t\t(map #(vector %1 %2)(range))\n\t\t(group-by \n\t\t\t(fn [x] \n\t\t\t\t(mod (+ (first x) 1) n)\n\t\t\t)\n\t\t)\n\t\t(map (fn [x] (flatten (map second (second x)))))\n\t)\n)","problem":43,"user":"5151aa14e4b03e678e393ad4"},{"code":"(fn[coll n]\n  (let [num (count coll)]\n    (loop [i 0 j 0 res ()]\n      (if (= i n) (partition (/ num n) (reverse res))\n      (if (>= j num)\n        (recur (inc i) (inc i) res)\n        (recur i (+ j n) (conj res (nth coll j))))))))","problem":43,"user":"4e7bc07c535db169f9c796b9"},{"problem":43,"code":"(fn [s n]\n  (apply map list\n    (partition n s)))","user":"53f053ebe4b0742d9025b0d3"},{"code":"(fn [lst n]\n    (let [init (fn [i] \n        (loop [acc [] slots i]\n            (if (zero? slots)\n                acc\n                (recur (conj acc []) (dec slots)))))]\n    (loop [acc (init n) lef lst cnt 0]\n        (if (empty? lef)\n            acc\n            (recur (assoc acc cnt (conj (acc cnt) (first lef))) (rest lef) (mod (inc cnt) n)))))\n)","problem":43,"user":"52c17e42e4b07a9af5792367"},{"problem":43,"code":"(fn [sq x] (map\n            #(take-nth x (drop % sq))\n            (range x)))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"(fn [s n]\n   (map\n     #(map first (partition-all n (drop % s)))\n     (range 0 n)))","problem":43,"user":"4fe9f0f6e4b0547ebccb247b"},{"problem":43,"code":"(fn [ss j]\n  (for [n (range j)] \n    (map #(nth % n) (partition j ss))))","user":"5310e968e4b08068f379ecdd"},{"problem":43,"code":"(fn [xs n]\n  (map\n    (fn [i] (keep-indexed (fn [index, x] (when (some #(= index %) (#(take (/ (count xs) n) (iterate (partial + n) %)) i)) x)) xs))\n    (range n)))","user":"5d51377be4b0776584bd6f5d"},{"code":"#(for [i (range %2)] \r\n    (take-nth %2 (drop i %)))","problem":43,"user":"4e597b2c535d8a8b8723a29d"},{"problem":43,"code":"(fn sub-list-interleave\n  [v n]\n  (for [i (range n)]\n    (take-nth n (drop i v)))\n  )","user":"5f6dee74e4b02876ed9fd05f"},{"problem":43,"code":"(fn [c n] (map (fn [[k v]] (map (fn [[i vv]] vv) v )) (group-by (fn [[g x]] g) (map-indexed #(list (mod % n) %2) c))))","user":"53b2a7f8e4b047364c04449c"},{"problem":43,"code":"(fn [a b]\n  ((fn f [[h & t], [r1 & r2]]\n    (if (nil? h)\n      `[~r1 ~@r2]\n      (f t `[~@r2 ~(conj r1 h)]))\n    ) a (take b (repeat []))  ))","user":"548b7db8e4b0e286459a11fd"},{"problem":43,"code":"(fn [coll n]\n  (map #(take-nth n (drop %1 coll)) (range n)))","user":"5daa0d56e4b000c986472c3c"},{"problem":43,"code":"(fn [coll n]\n  (map\n    (fn [i] (apply concat (partition 1 n (drop i coll))))\n    (range n)))","user":"557a1e18e4b05c286339e09e"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(vector (mod %1 n) %2))\n       (reduce (fn [m [k v]]\n                 (let [k-values (get m k [])]\n                   (assoc m k (conj k-values v))))\n                (sorted-map))\n       vals))","user":"541f6bc0e4b01498b1a71a98"},{"code":"(fn f [v n] \n  (for [x (range n)]\n    (map #(nth % x) (partition n v))))","problem":43,"user":"51750cd4e4b07031762f2ee5"},{"code":"(fn fff [lst num]     \n     (map \n     (fn [start] (let [s (/ (.size lst) num)\n                          delta num\n                          ] \n                      (map #(nth lst (+ start (* % delta))) (range s))\n                      )\n            )\n     (range num)\n     )\n     )","problem":43,"user":"51765d78e4b085adf681d884"},{"code":"(fn [seq n] (apply map list (partition n seq)))","problem":43,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [xs idx]\n  (vals (group-by (fn [x] (mod x idx)) xs)))","problem":43,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn [q n] (map (fn [v] (take-nth n (drop v q))) (range n)))","problem":43,"user":"532e0b20e4b019098a6f8b45"},{"problem":43,"code":"#(take %2 \n    (map \n     (partial take-nth %2) (iterate (partial drop 1) %1)\n    )\n)","user":"58e762d3e4b056aecfd47ccc"},{"code":"(fn rev-int [coll n] (take n (lazy-seq (cons (take-nth n coll) (rev-int (rest coll) n)))))","problem":43,"user":"4e218464535d04ed9115e816"},{"problem":43,"code":"(fn reverse-interleave [lst n]\n    (apply map list (partition-all n lst)))","user":"546c1f73e4b00cfc9eacc175"},{"problem":43,"code":"(fn [s n]\n  (let [vs (vec (repeat n []))]\n    (loop [s s, m 0, vs vs]\n      (if (seq s)\n        (if (= m n)\n          (recur s 0 vs)\n          (recur (rest s) (inc m) \n                 (assoc vs m (conj (vs m) (first s)))))\n        vs))))","user":"54ca93abe4b057c6fda3a264"},{"problem":43,"code":"(fn [c n] (map #(take-nth n %) (take n (iterate rest c))))","user":"5c41db45e4b08cd430848ece"},{"problem":43,"code":"(fn \n  [vv n ]\n  (apply  map vector (partition n vv ) ) )","user":"516d227fe4b06f078fab252d"},{"code":"#( apply map vector (partition %2 %1))","problem":43,"user":"5228f870e4b0186687e23a98"},{"code":"(fn [coll x]\n  (partition \n    (/ (count coll) x)\n    (apply interleave (partition x coll))))","problem":43,"user":"4e9ff8d0535d7eef3080729c"},{"problem":43,"code":"(fn [xs step]\n  (loop [xs (seq xs)\n         result ()\n         counter 1]\n    (if (> counter step)\n      (reverse result)\n      (recur (drop 1 xs)\n              (conj result (->> (partition 1 step xs) flatten))\n              (inc counter)))))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":43,"code":"(fn [sq n]\n  (map\n   (fn [drop-num]\n     (->> (drop drop-num sq)\n          (take-nth n ,,,)))\n   (range n)))","user":"540c54a7e4b0addc1aec6700"},{"problem":43,"code":"(fn [se n]\n  (map (fn [x] (map second x)) (vals (group-by (fn [[index val]] (mod index n)) (map-indexed vector se)))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":43,"code":"#(apply  map list (partition %2 %1))","user":"51e7c1f1e4b0a3e081b8cbef"},{"problem":43,"code":"(fn [coll n]\n  (loop [c coll acc '() i n]\n    (if (= 0 i) (reverse acc)\n      (do\n        (prn (take-nth n c))\n        (recur (rest c) (cons (take-nth n c) acc) (dec i))))))","user":"56f4cedce4b046a417f92063"},{"problem":43,"code":"(fn [coll x] (map #(take-nth x (drop %1 coll)) (range x)))","user":"591d9870e4b09b4ee5954c1b"},{"problem":43,"code":"(fn ril [xs n]\n  (partition-all (quot (count xs) n)\n                 (apply interleave\n                        (partition-all n xs))))","user":"5641296de4b08d4f616f5ef4"},{"problem":43,"code":"(fn [s n]\n  (letfn [(create-part [_s]\n                       (if (not (empty? _s))\n                         (cons (first _s) (create-part (drop n _s)))\n                         '()))\n          (inter2 [res-s _s iter]\n            (if (>= iter n)\n              res-s\n              (do\n                (inter2 (cons (create-part _s) res-s)\n                 (drop 1 _s)\n                 (inc iter)))))]\n    (reverse (inter2 '() s 0))))","user":"58f273d9e4b08e1cf3471d01"},{"problem":43,"code":"(fn f2 [v n]\n  (loop [m [] a (range n)]\n    (if (empty? a)\n      m\n      (recur \n       (conj m\n             (map (fn [i] (nth v i)) (range (first a) (count v) n))    \n             )\n       (rest a)\n       )\n      )\n    )\n  )","user":"56bb3a4be4b0f26550335951"},{"problem":43,"code":"(fn [l i] (map (fn [j] (\n                        map first (filter (fn [k] (= j (mod (second k) i))) (map #(vector %1 %2) l (range (count l))))\n                        )) (range i)))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":43,"code":"(fn [lst n] (apply (partial map list) (partition n lst)))","user":"5800edaae4b0a837a8b30c48"},{"problem":43,"code":"(fn [x n] (apply map vector (partition n x)))","user":"5bec37e2e4b0f319e2d7ec96"},{"problem":43,"code":"(fn\n  [s n]\n  (map\n    #(keep-indexed (fn [i v] (if (= % (rem i n)) v nil)) s)\n    (range n)))","user":"55c4cda5e4b0e31453f649a5"},{"code":"(fn [v n] (vals (group-by #(mod % n) v)))","problem":43,"user":"523b1988e4b02f719975bdbc"},{"code":"(fn [l n] (vals(group-by #(mod % n) l)))","problem":43,"user":"4e7f4147535db966e863cc3d"},{"problem":43,"code":"#(map (fn [a b c] (range a (inc b) c)) (take %2(range (first %1) (last %1))) (repeat (last %1)) (repeat %2))","user":"586b6a0ae4b01531a375e957"},{"problem":43,"code":"#(vals (sort (loop [in % out {} cnt 0]\n       (if (empty? in) out\n       (recur (rest in)\n       (assoc out (rem cnt %2)(concat (get \n out (rem cnt %2)) (list (first in))))\n       (inc cnt))))))","user":"54c98ac0e4b045293a27f679"},{"code":"(fn[coll n]\n  (let [in (partition n coll)]\n    (for [i (range n)]\n      (map #(nth % i) in))))","problem":43,"user":"4fb86dc9e4b081705acca2d8"},{"problem":43,"code":"(fn [s n]\n  (let [parts (partition n s)]\n    (apply map (cons list parts))))","user":"58cfb517e4b03c36ff7e58b9"},{"problem":43,"code":"(fn [coll n]\n   (loop [x coll\n          acc []\n          counter n]\n\n     (if (= counter 0) acc\n         (recur (rest x)\n                (conj acc (take-nth n x))\n                (dec counter)))))","user":"576e607ae4b0979f89651579"},{"problem":43,"code":"#(let [r (range %2)]\n  (->> r (map (fn [x]\n   (for [[v n] (map list %1 (cycle r))\n         :when (= n x)]\n        v)))))\n#_#(map\n  (fn [x]\n   (map :v \n    (filter\n     (fn [m] (= (:n m) x))\n     (map\n      (fn [v n] {:v v :n n})\n      %1\n      (cycle (range %2))))))\n  (range %2))\n#_(fn [s n]\n  (->> [nil s]\n       (iterate\n         (fn [[_ xs]]\n           [(take n xs)\n            (drop n xs)]))\n       (map first)\n       (drop 1)\n       (take (quot (count s) n))\n       (apply (partial map list))))\n#_#(apply (partial map list)\n  (take (quot (count %1) %2)\n   (drop 1\n    (map first \n     (iterate \n       (fn [[x y]]\n         [(take %2 y)\n          (drop %2 y)])\n       [[] %1])))))\n#_#(apply (partial map list)\n  (take (quot (count %1) %2)\n   ((fn this [s]\n     (cons (take %2 s)\n           (lazy-seq\n            (this (drop %2 \n                        s)))))\n    %1)))\n#_#(reduce\n  (fn [s m]\n   (update-in s [(:n m)]\n    (fn [e] (conj e (:v m)))))\n  (vec (repeat %2 []))\n  (map\n   (fn [v n] {:v v :n n})\n   %1\n   (cycle (range %2))))","user":"51e5a627e4b0efabf93c02db"},{"code":"(fn [c n] \n  (map (fn [[_ v]] (map second v)) \n    (group-by #(rem (first %) n) (map-indexed vector c))))","problem":43,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn [xs x]\n (vals (group-by #(mod % x) xs)))","problem":43,"user":"5097b556e4b00ad8bab4e970"},{"problem":43,"code":"(fn [coll n]\n  (vals (sort (reduce\n   (fn [res x]\n     (let [k (first x), v (last x)]\n       (assoc res k (conj (get res k []) v))))\n   {}\n   (map-indexed #(vector (mod % n) %2) coll)))))","user":"56174d86e4b06b1bb2182a0e"},{"problem":43,"code":"(fn [l n]\n  (apply map vector (partition n l)))","user":"55934bebe4b0c79f6e1db93b"},{"problem":43,"code":"(fn [sq n] \n  (for [i (range n)] \n    (flatten \n     (map (fn [sq1] (nth sq1 i)) \n          (partition n sq)))))","user":"55b527cbe4b01b9910ae2985"},{"code":"(fn foo \n  ([coll n] (foo coll n []))\n  ([coll n acc]\n    (if (not= n (count acc))\n      (recur (rest coll) n (conj acc (take-nth n coll)))\n      acc)))","problem":43,"user":"50378996e4b0af0658af77ae"},{"problem":43,"code":"(fn [coll n]\n    (loop [curnum 0\n           curlist coll\n           result []]\n      (if (empty? curlist)\n        result\n        (recur\n         (mod (inc curnum) n)\n         (rest curlist)\n         (assoc result curnum (conj (nth result curnum []) (first curlist)))) )\n      )  \n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":43,"code":"(fn my-reverse-interleave [coll n]\n  (loop [counter 0 current-coll coll result []]\n    (if (= counter n) result\n                      (recur (inc counter) (rest current-coll) (conj result (take-nth n current-coll))))))","user":"5852801ee4b0b7285a6f4eb1"},{"problem":43,"code":"(fn [sq n] (for [part (range n)] \n    (flatten (partition-all 1 n (drop part sq)))))","user":"59d4a160e4b0ef0a1e9b5be7"},{"problem":43,"code":"#(for [a (range %2)](map (fn[x] (nth x a) ) (partition-all %2 %)))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [v n] (for [i (range n)] (take-nth n (drop i v))))","problem":43,"user":"51990df9e4b068aa333628fc"},{"problem":43,"code":"(fn deinterleve [coll n] (for [i (range n)] (take-nth n (drop i coll))))","user":"5ba947bfe4b0a20761a23440"},{"problem":43,"code":"(fn [coll n]\n  (for [[k v] (group-by #(rem (inc (first %)) n) (map-indexed #(list %1 %2) coll))]\n   (map last v)))","user":"576b4e6be4b0a07e8fc1812b"},{"code":"(fn reverse-interleave [c n]\n  (map #(reverse %)\n       (reduce\n\n        (fn [a ci] \n\n          (map \n           (fn [ai] \n             (if (= (+ (first ai) n) ci)\n               (conj ai ci) ai))\n           a))\n        \n        (map #(list %) (subvec (vec c) 0 n)) \n\n        c)))","problem":43,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":43,"code":"(fn [xs n]\n  (let [len (quot (count xs) n)]\n    (partition len (apply interleave (partition n xs)))))","user":"54dce62be4b024c67c0cf78b"},{"problem":43,"code":"(fn [s x]\n   (loop [res (vec (repeat x [])) size (count s) i 0]\n     (if (= size i)\n       res\n       (let [k (mod i x)\n             v (nth res k)\n             v (conj v (nth s i))\n             res (assoc res k v)]\n         (recur res size (inc i))))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":43,"code":"(fn [seq parts]\n    (vals (group-by #(mod (.indexOf seq %) parts) seq)))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn [xs n]\n  (map #(map last %)\n       (vals (group-by #(mod (first %) n)\n                       (map-indexed vector xs)))))","problem":43,"user":"4f8345c6e4b033992c121c1b"},{"problem":43,"code":"(fn [s n]\n  (let [ps (partition n s)\n        it (range n)]\n    (map (fn [nn] \n           (reduce #(conj %1 %2) [] (map #(nth % nn) ps) )\n           )\n         it)\n    ))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn rev-interleave [lst n]\n  (let [ every-nth (fn [lst n]\n    \n(filter\n  #(not (nil? %))\n  (map-indexed\n    #(if (zero? (mod %1 n)) %2 nil)\n    lst))\n) ]\n\n(for [i (range n) ] (every-nth (drop i lst) n))))","problem":43,"user":"4e356d2b535deb9a81d77f2d"},{"problem":43,"code":"(fn revint [data n]\n      (reverse\t\n      (loop [in data, out '(), i 0]\n\t    (cond\n                  (= i n) out\n                  :else\t(recur (next in) (conj out (take-nth n in)) (inc i))\n            )\n      ) \n      ) \n)","user":"568513c4e4b04eec3ec5cfc5"},{"problem":43,"code":"(fn [xs n]\n  (letfn [(stepper [col nb-items step limit]\n            (when (pos? limit)\n              (cons (take nb-items (take-nth step col))\n                    (stepper (next col) nb-items step (dec limit)))))]\n    (stepper xs (/ (count xs) n) n n)))","user":"5785de4ce4b0ebec4cfb74e6"},{"code":"(fn reverse-interleave\n  [coll n]\n  (->>\n    (map-indexed vector coll)\n    (group-by #(mod (first %) n))\n    (map #(map second (val %)))))","problem":43,"user":"50651de3e4b0b1b6c8b1d85f"},{"code":"(fn [l n]\n  (map (fn [y]\n    (map #(nth l %) (filter #(= (mod % n) y) (range (count l))))) (range n)))","problem":43,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [xs n]\n  (map \n    #(map second %) \n    (vals (group-by first \n      (map-indexed \n        (fn [a b] (vector (mod a n) b)) xs)))))","problem":43,"user":"4f3ae998e4b0e243712b1f1f"},{"problem":43,"code":"(fn [coll n]\n    (let [chunks-of-n (partition n coll)]\n      (for [x (range n)]\n        (map #(nth % x) chunks-of-n)\n        )\n      )\n    )\n\n; I like this solution by several people:\n; #(apply map list (partition %2 %1))\n; But I don't understand how it works.  The docs say apply only applies 1 function to a list of args.  But this seems to apply two functions, both 'map' and 'list'.","user":"5535e822e4b09218d5f44fb2"},{"code":"(fn [l n] (map #(take-nth n %)\n  (map #(drop % l) (range n))))","problem":43,"user":"4ff9f5c5e4b0678c553fc3b4"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (apply (partial map vector) (partition n coll)))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":43,"code":"(fn ri [coll step]  \n                                                  (loop [ result '()\n                                                         curbegin (first coll) \n                                                         c coll]\n                                                    (let [ k (int (Math/floor( / (dec (count coll)) step)))]\n                                                     (if (or (empty? c) (< (last c) (+ curbegin (* k step))))\n                                                      result\n                                                     (recur (concat  result (list(range  curbegin (inc(last c)) step)))\n                                                            (first (rest c))\n                                                            (rest c)\n                                                     )\n                                                     )\n                                                  )))","user":"5b9d3913e4b0c0b3ffbd4b37"},{"code":"(fn [xs n]\n  (apply map list (partition-all n xs)))","problem":43,"user":"52b9c62ce4b07a9af57922c3"},{"problem":43,"code":"(fn problem-43 [xs n]\n  (apply map vector (partition n xs)))","user":"5d669613e4b0db5d338d15ea"},{"code":"(fn __ [l n]\r\n (let [p1 (partition n l)]\r\n   (for [i (range n)] (map #(nth % i) p1))))","problem":43,"user":"4f04a06d535dcb61093f6bd9"},{"code":"#(for [n (range %2)] (apply concat (partition 1 %2 () (drop n %))))","problem":43,"user":"4e9e0640535dbda64a6f6b91"},{"problem":43,"code":"(fn reverse-interleave\n  [s n]\n  (apply map #(apply list %&) (partition n s))\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn revinter [a b] \n  (apply map list (partition b a)))","problem":43,"user":"504dff92e4b078edc5f5938a"},{"code":"(fn [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n coll)))\n)","problem":43,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":43,"code":"#(->> % (map-indexed (fn [i x] [(mod i %2) x])) (group-by first) vals (map (partial map last)))\n\n;#(map (partial map last) (vals (group-by first (map-indexed (fn [i x] [(mod i %2) x]) %))))\n\n;#(vals (group-by (fn [x] (mod x %2)) %))\n\n;#(apply map vector (partition %2 %))\n\n;#(apply (partial map vector) (partition %2 %))\n\n;#(reduce (partial map conj) (repeat []) (partition %2 %))\n\n;(fn [s n] (reduce #(map conj % %2) (repeat []) (partition n s)))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":43,"code":"(fn [lst n] (apply map list (partition n lst)))","user":"543d89dfe4b032a45b869350"},{"code":"(fn [coll n]\n   (let [part  (/ (count coll) n)]\n     (for [i (range 0  n)]\n       (for [j (range 0 part )]\n         (nth coll (+ i (* j n)) )\n         )\n       )\n     )\n   )","problem":43,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn [coll n]\r\n  (let [cs (for [x (range n)] (drop x coll))]\r\n    (map (partial take-nth n) cs)))","problem":43,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn [c b]\n  (for [i (range b)]\n    (take-nth b (drop i c))))","problem":43,"user":"4f77b68de4b0fbe0118ec581"},{"problem":43,"code":"(fn [coll n]\n   (map #(take-nth n (drop % coll)) (range n))\n   )","user":"50ec409ce4b04edc33777045"},{"code":"(fn [s n]\n  (let [oa (object-array n)\n         _ (java.util.Arrays/fill oa [])]\n    ;; need doall as map-indexed is lazy, so no arrays change without it\n    (doall (map-indexed \n             (fn [i x]\n               (let [idx (mod i n)]\n                 ;; conj in the new value into appropriate array\n                 (aset oa idx (conj (aget oa idx) x))))\n              s))\n    (seq (into [] oa))))","problem":43,"user":"5125d963e4b05d10e3e395fe"},{"code":"#(apply map vector (partition %2 %))","problem":43,"user":"4e49badd535dc968683fc4c9"},{"problem":43,"code":"(fn func\n    [ar n]\n    (loop [ans (take n (repeatedly #(empty ())))\n           xs ar]\n      (if (empty? xs)\n        ans\n      (let [zipped (map vector ans (take n xs))\n            added  (map #(concat (first %1) (rest %1)) zipped)]\n        (recur added (drop n xs))))\n      )\n  )","user":"5b8db323e4b0c0b3ffbd49da"},{"code":"(fn [coll size]\n  (let [nest (partition size coll)]\n    ((fn match [nest]\n       (if (not (empty? (first nest)))\n         (conj (match (map rest nest)) (map first nest))\n         '())) nest)))","problem":43,"user":"5356e04fe4b04ce2eb3ed271"},{"code":"(fn reverse-interleave [col n]\n  (->> col\n       (map-indexed #(list (mod %1 n) %2))\n       (sort-by first)\n       (map #(drop 1 %))\n       flatten\n       (partition (/ (count col) n))))","problem":43,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn [s n]\n  (sort-by first (map #(map last %) (vals (group-by #(mod (first %) n) (map-indexed vector s))))))","problem":43,"user":"4f382eb7e4b0e243712b1ed9"},{"code":"(let [apply-conj (fn apply-conj [& args]\n  (apply conj [] args))]\n\n(fn k-interleave [x n]\n  \"4clojure.com/problem/43\"\n  (apply (partial map apply-conj) (partition n x))))","problem":43,"user":"4db58ccb535d87e67b28fe10"},{"problem":43,"code":"(fn [coll n] (apply map list  (partition n coll)))","user":"5703cd50e4b08d47c97781fc"},{"code":"(fn [sss n]\n((fn a [ss result]\n  (let [f (fn f2 [s i rs]\n            (if (empty? s) rs\n              (if (= i n) \n                (f2 (rest s) 1 (conj rs (first s)))                  \n                (if (= i 0)\n                  (f2 (rest s) (inc i) (conj rs (first s)))\n                  (f2 (rest s) (inc i) rs)\n                  ))))\n         temp_sub (f ss 0 [])]\n\n    (if (or (empty? ss) (= n (count result))) result\n      (recur (rest ss) (conj result temp_sub))))) sss [] ))","problem":43,"user":"4f3242bae4b0d6649770a08f"},{"problem":43,"code":"#(apply map (fn [& args] (concat args)) (partition-all %2 %1))","user":"541168dee4b01498b1a719c3"},{"code":"(fn [c n] \r\n(for [i (range 0 n)] \r\n  (for [j (range i (count c) n)] \r\n     (nth c j))))","problem":43,"user":"4daa374930acd6ed13482a68"},{"code":"(fn rev-int2\n  ([coll x] (rev-int2 coll x x))\n  ([coll x i] (when (not= 0 i)\n                (cons (take-nth x coll) (lazy-seq (rev-int2 (rest coll) x (dec i)))))))","problem":43,"user":"5170ea06e4b0d70c8bbbf235"},{"code":"(fn [coll n] (map (fn [x] (map #(last %) x)) (vals (group-by #(first %) (map #(vector %1 %2) (take (count coll) (cycle (range 0 n))) coll)))))","problem":43,"user":"4f0404df535dcb61093f6b91"},{"problem":43,"code":"(fn [sq n] (for [i (range n)] (take-nth n (drop i sq))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":43,"code":"(fn [xs index]\n  (loop [origin-xs xs\n         n 0\n         target {}]\n    (if (empty? origin-xs)\n      (map #(last %)\n           (into '() target))\n      (let [head (first origin-xs)\n            m (rem n index)\n            target-xs (get target m nil)\n            new-xs (if (nil? target-xs)\n                     (list head)\n                     (concat target-xs [head]))]\n        (recur (rest origin-xs)\n               (inc n)\n               (assoc target m new-xs))))))","user":"58fed70de4b0438e51c2cfdd"},{"code":"(fn [x n]\n  (loop [x x\n         res (vec (repeat n []))\n         i 0\n         l 0]\n    (if (nil? (first x))\n      res\n      (if (= i (- n 1))\n        (recur (rest x) (assoc-in res [i l] (first x)) 0 (inc l))\n        (recur (rest x) (assoc-in res [i l] (first x)) (inc i) l)))))","problem":43,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":43,"code":"(fn [xs x]\n  (apply map vector (partition x xs)))","user":"55164856e4b06a49daca83b3"},{"problem":43,"code":"(fn [s n]\n    (->> s\n         (map list (range))\n         (group-by #(rem (first %) n))\n         (vals)\n         (map (partial map second))))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":43,"code":"(fn split [x y]\n  (loop [index 0 result (into [] (repeat y []))]\n    (if (not (< index (count x)))\n      result\n      (let [upper-index (mod index y)\n            value (nth x index)\n            new-array (conj (nth result upper-index) value)]\n        (recur (inc index) (assoc result upper-index new-array))))))","user":"53829b28e4b06839e8705ed6"},{"problem":43,"code":"(fn [coll n]\n   (loop [\n          current-coll coll\n          i n \n          result []]\n     (if (> i 0) \n       (recur\n         (drop 1 current-coll) \n         (dec i) \n         (concat result (take-nth n current-coll)))\n       (partition (/ (count coll) n) result))\n     )\n   )","user":"5587cd86e4b059ccff29b1e6"},{"problem":43,"code":"(fn rev-interleave [sq x]\n  (loop [sq-it sq\n         ret-it (repeat x '())]\n    (if (empty? sq-it)\n      ret-it\n      (recur (drop x sq-it)\n             (map concat\n                  ret-it\n                  (map list (take x sq-it)))))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":43,"code":";reverse interleave\n(fn [coll n]\n  (loop [acc (vec (repeat n []))\n         current 0\n         elems coll]\n    (if (empty? elems)\n      acc\n      (let [elem (first elems)\n            subsequence (conj (nth acc current) elem)\n            next-index (if (-> current\n                               inc\n                               (>= n))\n                         0\n                         (inc current))]\n        (recur (assoc acc current subsequence)\n               next-index\n               (rest elems))))))","user":"58bc8cbee4b0888cdc949d1b"},{"code":"(fn reverse-interleave [s n]\n  (let [g (partition n s)]\n    (for [i (range n)]\n      (map #(nth % i) g))))","problem":43,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn revint ([aseq n] (revint aseq n n))\r\n  \t([aseq n idx]\r\n\t\t(if (> idx 0)\r\n\t\t (concat (list (flatten(partition 1 n aseq))) (revint (rest aseq) n (dec idx))))))","problem":43,"user":"4f048f67535dcb61093f6bd3"},{"problem":43,"code":"(fn [coll n] (map #(take-nth n %)\n                  (map #(drop % coll) (range n))))","user":"571107b3e4b09c608db7043f"},{"code":"(fn [xs n] (reverse (vals (reduce #(merge-with concat %1 %2) {} (map-indexed #(hash-map (rem %1 n) [%2]) xs)))))","problem":43,"user":"4fb65f2fe4b081705acca2c7"},{"code":"(fn [xs n]\n  (for [x (range n)]\n    (take-nth n (drop x xs))))","problem":43,"user":"5060d137e4b0dc10a69545a0"},{"problem":43,"code":"(fn [xs n]\n  (loop [res '()\n         to_drop (dec n)]\n    (if\n      (< to_drop 0)\n      res\n      (recur (cons (take-nth n (drop to_drop xs)) res) (dec to_drop))\n      )\n    )\n  )","user":"5a584ca2e4b05d388ecb6c7d"},{"code":"(fn rinter [coll n]\n  (apply map vector (partition n coll)))","problem":43,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn r [s n] (for [i (range n)] (for [j (range (count s)) :when (= i (rem j n))] (nth s j))))","problem":43,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":43,"code":"(fn [ls x]\n  (map \n   #(flatten (partition 1 x (drop % ls)))\n   (range x))\n  )","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn problem-43 [s n]\n  (loop [s1 s\n         k 0\n         res {}]\n    (if (empty? s1)\n      (reverse (map reverse (vals res)))\n      (recur (rest s1)\n             (+ k 1)\n             (assoc res (mod k n)\n                    (cons (first s1)\n                          (get res (mod k n))))))))","problem":43,"user":"51fe9d7ce4b0f1313d468a70"},{"code":"(fn [xs n] \n  (apply map list (partition n xs)))","problem":43,"user":"50c9e5e3e4b0a409464667d7"},{"problem":43,"code":"(fn [l n]\n  (loop [r l, i 0, a []]\n    (if (empty? r)\n       a\n       (recur (rest r) (inc i)\n              (if (nil? (get a (rem i n)))\n                (assoc a (rem i n) [(first r)])\n                (assoc a (rem i n) (conj (get a (rem i n)) (first r))))))))","user":"55e87696e4b0121d4835fd93"},{"problem":43,"code":"(fn [xs n]\n  (let [taker (fn [ax c]\n                (loop [ax ax\n                       acc []\n                       i 0]\n                  (cond\n                    (empty? ax)\n                      acc\n                    (zero? (mod i c))\n                      (recur (rest ax) (conj acc (first ax)) (inc i))\n                    :else\n                      (recur (rest ax) acc (inc i)))))]\n    (for [i (range n)]\n      (taker (drop i xs) n))))","user":"51c116d4e4b0c9c822882942"},{"code":"(fn rev-interleave [l n]\r\n    (reverse (loop [l l cnt 1 f '()]\r\n               (if (> cnt n)\r\n                 f\r\n                 (recur (rest l) (inc cnt) (cons (take-nth n l) f))))))","problem":43,"user":"4f039524535dcb61093f6b2c"},{"problem":43,"code":"(fn revint [x n] (vals (group-by (fn [y] (mod y n)) x)))","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [coll n]\n\t(for \n\t\t[[k v] (group-by \n\t\t\t#(rem (% 1) n)\n\t\t\t(map #(vector % %2) coll (range)))]\n\t\t(map first v)))","problem":43,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn [c n]\n  (reduce \n    (fn [interleaved i]\n      (concat interleaved (list (map #(nth % i) (partition n n c)))))\n    (list)\n    (range 0 n)))","problem":43,"user":"53940789e4b0b51d73faaec3"},{"code":"(fn [s n] \n  (map-indexed \n   (fn [idx itm] (take-nth n (nthrest itm idx)))\n   (repeat n s)))","problem":43,"user":"531bad96e4b08068f379ed93"},{"code":"#(let [[coll rett] [(partition %2 %) '()]]\n  (for [n (range 0 (count (first coll)))]\n    (concat rett (map (fn [colla] (nth colla n)) coll))))","problem":43,"user":"5071b614e4b0e3170b5a867d"},{"code":"(fn [s c]\n  (apply map list (partition c s)))","problem":43,"user":"4fc92595e4b0ee37620e1843"},{"problem":43,"code":"(fn [s n] (reduce #(map conj %1 %2) (repeat []) (partition n s)))","user":"523b4e91e4b07becd5be21ef"},{"code":"(fn [coll n]\n  (let [len (count coll)\n        row (fn [indexs] (map #(nth coll %) indexs))]\n    (map #(row (range % len n)) (range n))))","problem":43,"user":"52a55adee4b0c58976d9abe7"},{"problem":43,"code":"(fn [s n]\n   (loop [count n\n          subSeq s\n          result []]\n     (if (zero? count)\n       result\n       (recur (dec count)\n              (rest subSeq)\n              (conj result (take-nth n subSeq))))))","user":"577e54bbe4b0c8d87281f6e5"},{"problem":43,"code":"(fn [xs n]\n   (loop [index 0\n          index-rem (rem index n)\n          numbers (into [] xs)\n          result (apply vector (repeatedly n vector))]\n     (println index result)\n     (if (< index (count xs))\n       (recur (inc index) (rem (inc index) n) numbers (update-in result [index-rem] #(conj % (numbers index))))\n       result)))","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":43,"code":"(fn [xs n]\n  (apply map (fn [ & x] set x) (partition n xs)))","user":"57487084e4b009280f9f2b8c"},{"problem":43,"code":"(fn [xs n]\n  (reduce (fn [agg x]\n            (concat (rest agg)\n                    [(concat (first agg) [x])]))\n          (repeat n '())\n          xs))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [coll n]\n    (loop [result (vec (repeat n [])), coll coll]\n      (if (seq coll)\n        (recur (conj (subvec result 1)\n                     (conj (first result) (first coll)))\n               (rest coll))\n        result)))","problem":43,"user":"4e8e0a62535d65386fec213f"},{"problem":43,"code":";(fn [xs n]\n;  (->> xs\n;       (map-indexed (fn [i x] [i x]))\n;       (group-by #(mod (first %) n))\n;       vals\n;       (map #(map second %))))\n\n(fn [xs n]\n  (apply map list (partition n xs)))","user":"54485749e4b032a45b8693c7"},{"problem":43,"code":"(fn [xs n]\n    (loop [ys xs\n           acc (vec (repeat n []))]\n      (if (empty? ys)\n        acc\n        (recur (drop n ys) (map conj acc (take n ys))))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"#(map \n  (fn [x] (reduce concat '() (partition 1 %2 x)))\n  (take %2 (iterate next % ))\n  )","problem":43,"user":"51e1c176e4b06a68e693eafb"},{"problem":43,"code":"(fn inv-interleave [coll n]\n  (reduce (fn [r x]\n            (conj r (flatten (partition 1 n (drop x coll)))))\n          []\n          (range n)))","user":"542cb77ae4b0dad94371f2aa"},{"code":"(fn [coll n]\n  (loop [i 0\n         acc []\n         values coll]\n    (if (= i n)\n      acc\n      (recur (inc i) (conj acc (take-nth n values)) (rest values)\n))))","problem":43,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn rev-interleave [coll stride]\n  (apply map list (partition-all stride coll)))","problem":43,"user":"531c0619e4b08068f379ed98"},{"problem":43,"code":"(fn [xs n]\n  (let [xs (partition n xs)]\n    (loop [m n acc []]\n      (if (= m 0)\n        acc\n        (recur (dec m) (cons (map #(nth % (dec m)) xs) acc))\n      )\n    )\n  )\n)","user":"55dc2ad1e4b050e68259b3ac"},{"problem":43,"code":"(fn [inli n] \n\t(loop [res [] li inli m 0]\n\t\t(if (>= m n)\n\t\t\tres\n\t\t\t(recur (conj res (map #(nth li %) (range 0 (count li) n))) (rest li) (inc m) ))))","user":"54be7e93e4b0ed20f4ff6eed"},{"code":"(fn [coll n]\n  (map #(take-nth n (drop % coll))\n       (range n)))","problem":43,"user":"5014754de4b094324338f8e5"},{"problem":43,"code":"(fn [s n] \n  (reduce-kv \n   (fn [acc key value] (map-indexed #(if (= %1 (mod key n)) (conj %2 value) %2) acc) ) \n   (vec (repeat n [] ))\n   (into [] s))\n  )","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"#(map \n(fn [n i]\n(flatten (map (fn [x] (take 1 x)) \n(partition-all n (drop i %1)))))\n(repeat %2 %2) (range %2))","problem":43,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":43,"code":"(fn [c, sn]\n  (let [base (into [] (map (fn [_] []) (range 0 sn)))]\n    (loop [x 0 acc base coll c]\n      (if (empty? coll)\n        acc\n        (recur\n         (+ x 1)\n         (assoc acc (mod x sn) (conj (get acc (mod x sn)) (first coll)))\n         (rest coll))))))","user":"5fac50f4e4b08cb800c85ae5"},{"code":"(fn ipart [coll n]\n    (let [parts (quot (count coll) n)]\n      (->> coll\n          (partition n)\n          (apply interleave)\n          (partition parts))))","problem":43,"user":"50c113bee4b096f585049c37"},{"problem":43,"code":"#(for [x (range %2)] \n   (take-nth %2 (drop x %1)))","user":"561c0278e4b064ca9f4b1691"},{"code":"(fn \n  [seq n]\n  (->>\n       (partition n seq)\n       (apply interleave)\n       (partition (/ (count seq) n))))","problem":43,"user":"52d39acce4b099d49816f0c7"},{"problem":43,"code":"#(map second\n   (group-by\n    (fn [n] (mod n %2))\n    %1\n   )\n  )","user":"54c8eb61e4b045293a27f658"},{"code":"#(loop [xs % c %2 r []]\n  (if (zero? c) r\n    (recur (rest xs) (dec c) (conj r (take-nth %2 xs)))))","problem":43,"user":"507a396be4b08327cd804a69"},{"code":"(fn rev-inter [lat n]\r\n  (partition (quot (count lat) n) \r\n             (apply interleave (partition n lat))))","problem":43,"user":"4ddb339c535d02782fcbe9f9"},{"problem":43,"code":"(fn [p n] (map (fn [i] (map #(nth % i) (partition n p))) (range n)))","user":"600cb742e4b074f607df6696"},{"problem":43,"code":"(fn [xs n] (partition-all (quot (count xs) n) (sort-by #(mod (.indexOf xs %) n) xs)))","user":"5c53127ee4b0fb8c5ffd99ef"},{"code":"(fn [coll x] (apply map list (partition x coll)))","problem":43,"user":"528e1f30e4b0239c8a67aed4"},{"code":"(fn [s n]\n  (let [nth-col (for [i (range 1 (inc n))]\n    (take (/ (count s) n) (iterate #(+ n %) i))  )]\n    (for [ii nth-col]\n      (for [i ii]\n        (nth s (dec i))))))","problem":43,"user":"4f327844e4b0d6649770a092"},{"problem":43,"code":"(fn f [s n]\n  (apply map vector (partition n s)))","user":"54ff6084e4b07d26eda61d50"},{"problem":43,"code":"(fn [coll n]\n  (reduce\n   #(map conj % %2)\n   (repeat n [])\n   (partition n coll)))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":43,"code":"(fn solve [li n]\n  (letfn [(cycleshort2 [li2 n2]\n            (mapcat\n             #(nthrest li2 %)\n             (take n2 (cons 0 (repeat 1)))))]\n    (partition (/ (count li) n) (take-nth n (cycleshort2 li n)))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":43,"code":"(fn [s subs]\n   (let [ct (count s)\n         sublen (quot ct subs)]\n     (letfn [(build-subs [i result]\n               (if (= i subs)\n                 result\n                 (recur (+ i 1) (conj result (map #(nth s % 0) (take sublen (iterate #(+ subs %) i)))))))]\n       (build-subs 0 []))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":43,"code":"(fn [seq n] (apply map list (partition-all n seq)))","user":"553024c3e4b076ab5578f80d"},{"problem":43,"code":"(fn pb43\n  [xs a]\n  (vals (group-by #(rem % a) xs)))","user":"608135c8e4b0736b099e42d1"},{"code":"#(apply mapcat (fn [& args] (list args)) (partition %2 %))","problem":43,"user":"51bf4560e4b013aa0d74b817"},{"problem":43,"code":"#(for[i (range %2)](take-nth %2 (nthrest %1 i)))","user":"545537c1e4b0e397800069dd"},{"code":"#(for [n (range %2)] (take-nth %2 (drop n % )))","problem":43,"user":"4e5af45e535d8a8b8723a2b1"},{"problem":43,"code":"(fn \n  [lst n]\n  (apply map list (partition n lst)))","user":"56df7440e4b0ca2494a095fb"},{"problem":43,"code":"(fn [a b] (apply map vector (partition b a)))","user":"51910da7e4b0f8ef0be96bf9"},{"problem":43,"code":"(let [unwrap-accum (fn [a c]\n  (loop [accum []\n         curr 1]\n    (let [new-accum (conj accum (a curr))]\n      (if (= curr c)\n          (reverse (map reverse new-accum))\n          (recur new-accum (+ 1 curr))))))]\n  (fn reverse-interleave\n    [s c]\n    (loop [[h & t] s\n           accum {}\n           curr c]\n      (let [new-accum (assoc accum curr (conj (accum curr) h))\n            new-curr (if (= curr 1) c (- curr 1))]\n        (if (nil? t)\n          (unwrap-accum new-accum c)\n          (do (println new-accum) (println new-curr) (recur t new-accum new-curr)))))))","user":"58152157e4b0f478707a0631"},{"code":"(fn revint\n  [xs x]\n  (map (fn [ys] (map last ys)) (vals (group-by #(rem (first %) x) (map-indexed (fn [idx itm] (vector idx itm)) xs)))))","problem":43,"user":"536aa86de4b0243289761eb1"},{"code":"(fn [s n] (map val (group-by #(rem % n) s)))","problem":43,"user":"4ff76effe4b0678c553fc390"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  ((fn [ys rs]\n     (if (empty? ys)\n       rs\n       (recur (drop n ys)\n              (for [k (range 0 n)]\n                (concat (nth rs k) (list (nth ys k)))))))\n   xs (for [_ (range 0 n)] ())))","user":"5688a01be4b0dcc4269f406d"},{"problem":43,"code":"#(apply map list (partition %2 %1)) ;;i don't understand how map list part works....partition groups it positionally","user":"58eed4c5e4b056aecfd47db7"},{"problem":43,"code":"#(->> %1                                                                                                                                                                  \n     (partition %2)                                                                                                                                                      \n     (apply interleave)                                                                                                                                                  \n     (partition (/ (count %1) %2)))","user":"50f02de7e4b0bdaecbb47db0"},{"problem":43,"code":"(fn [lst x]\n  (loop [l lst\n         pos 0\n         sbseq 0\n         result (repeat x ())]\n    (if (empty? l)\n      result\n      (recur (rest l) \n             (+ pos 1) \n             (mod (+ pos 1) x) \n             (concat (take sbseq result) \n                     (list (concat (nth result sbseq) [(first l)]))\n                     (drop (+ sbseq 1) result))))))\n\n;; better solution\n;; #(apply map list (partition %2 %1))","user":"56ee0691e4b04a395b9a044c"},{"code":"(fn [s n]\n  (for [m (range n)]\n    (keep-indexed #(if (= m (rem %1 n)) %2 nil) s)))","problem":43,"user":"5117c31ee4b0e0897831a60c"},{"code":"(fn [coll nth] (map (fn [offset] (take-nth nth (drop offset coll))) (range 0 nth)))","problem":43,"user":"5125834ae4b05d10e3e395fa"},{"code":"(fn [s n] (for [x (range n 0 -1)]\n    (take-nth n (drop (- n x) s))))","problem":43,"user":"52ffb7f2e4b0d8b024fd370b"},{"code":"(fn reverse-interleave [coll x]\n  (map #(->> coll (drop %) (take-nth x)) (range x)))","problem":43,"user":"530e9729e4b08068f379ecbc"},{"problem":43,"code":"(fn [xs n]\n    (map #(take-nth n (drop % xs)) (range n)))","user":"5920c191e4b09b4ee5954c61"},{"code":"(fn\n  ([col index]\n (for [x (range index)\n     :let [y (map #(nth % x) (partition index col))]] y )\n    ))","problem":43,"user":"4e6cf521535de274dd8d818b"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (map #(take-nth n (nthrest coll %)) (range n)))","user":"57c0917be4b05aa3c4741c95"},{"problem":43,"code":"(fn [l c] (partition (/ (count l) c) (apply interleave (partition c l))))","user":"530d85dee4b08068f379eca8"},{"problem":43,"code":"(fn\n  [lst n]\n    (let [parts (partition n lst)\n          length (count (first parts))]\n      (apply map vector parts)))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn [xs n]\r\n  (letfn [\r\n      (filter-indexed [f xs]\r\n        (map second (filter #(apply f %) (map-indexed list xs))))\r\n      (filter-mod [m]\r\n        (filter-indexed (fn [i _] (= m (mod i n))) xs))]\r\n    (map filter-mod (range n))))","problem":43,"user":"4ee67d74535d93acb0a66861"},{"problem":43,"code":"(fn reverse-interleave\n  [some-seq n]\n  (take n (map-indexed\n            (fn\n              [index, item]\n              (let [new-seq []]\n                (loop [start-index index\n                      sub-seq []]\n                      (prn str (get some-seq start-index))\n                      (if (< (count sub-seq) (/ (count some-seq) n))\n                        (recur (+ start-index n) (conj sub-seq (get (into [] some-seq) start-index)))\n                        (flatten (conj new-seq sub-seq))))))\n          some-seq)))","user":"5a35d515e4b0ddc586f153e1"},{"problem":43,"code":"(fn [l n]\n  (map\n   #(map first %)\n   (map #(filter second %)\n        (map (fn [offset]\n               (map-indexed (fn [i v] [v (= offset (mod i n))]) l))\n             (range n)))))","user":"51d55598e4b01da06753aa8e"},{"problem":43,"code":"(fn r-interleave\n  [coll n]\n  (apply map list (partition n coll)))","user":"4e586949535d8a8b8723a292"},{"code":"(fn \n  [coll x] \n  (apply map list (partition x coll)))","problem":43,"user":"51804bcbe4b04f45bde7d901"},{"code":"(fn [x n]\r\n  (loop [x x\r\n         c n\r\n         result []]\r\n  (if (<= c 0)\r\n    result\r\n    (recur (rest x) (dec c) (conj result (apply concat (partition-all 1 n x)))))))","problem":43,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"(fn [c n] \n  (map #(take-nth n (drop % c)) (range n)))","problem":43,"user":"5005b57de4b0678c553fc46a"},{"problem":43,"code":"(fn [v x]\n  (let [inits (range x)\n        idx-list-list (map #(range % (count v) x) inits)]\n    (map (fn [idx-list] (map #(nth v %) idx-list)) idx-list-list)))","user":"5f5b624de4b05ea7b9adc42f"},{"code":"#(partition (/ (count %) %2) (apply interleave (partition %2 %)))","problem":43,"user":"4dd1de4d535dae65d5c462d7"},{"code":"(fn r-interleave [s n]\n            (let [shift-add (fn [s val]\n                                (cons (conj (last s) val) (butlast s)))]\n                 (reverse (reduce shift-add (repeat n []) s))))","problem":43,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":43,"code":"(fn [s n]\n  (->> (range 0 n)\n       (map #(->> s\n                  (drop %)\n                  (take-nth n)))))","user":"5bab5440e4b0a20761a23475"},{"code":"(fn [coll n] (for [i (range n)] (flatten (partition 1 n (drop i coll)))))","problem":43,"user":"5002b6e5e4b0678c553fc42c"},{"problem":43,"code":"(fn [coll n] (apply map #(apply list %&) (partition-all n n coll)))","user":"59cf0d75e4b0ef0a1e9b5b5f"},{"code":"(fn [lst n]\n  (apply map list (partition n lst)))","problem":43,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":43,"code":"(fn func\n  [input-seq num]\n  (vals (group-by #(mod (.indexOf input-seq %) num) input-seq)))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [c n] (for [x (range n)] (map #(nth % x) (partition n c))))","problem":43,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [col n]\r\n  (loop [i 0 n n col col rez []]\r\n    (if (< i n)\r\n      (recur (inc i) n (drop 1 col) (conj rez (take-nth n col)))\r\n      rez)))","problem":43,"user":"508453abe4b0c98812d07891"},{"code":"(fn ri[s n]\n  (loop [s1 s\n         index 0\n         out (zipmap (range n) (take n (repeatedly (fn [] []))))]\n    (if (empty? s1)\n      (vals (sort out))\n    (let [md (mod index n)]\n      (recur (rest s1) (inc index) (assoc out md (conj (out md) (first s1))))))))","problem":43,"user":"51622fb8e4b009fba0926e3f"},{"code":"(fn rev-int [coll n]\n  (apply map vector (partition n coll)))","problem":43,"user":"510591dde4b06d28cacc92eb"},{"problem":43,"code":"#(for [i  (range 0 %2 )]  (for [j (range i (count %1)  %2)] (nth %1 j)))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":43,"code":"(fn [coll parts]\n  (map (fn [i]\n         (loop [incr (/ (count coll) parts)\n                index i\n                part []]\n\n           (if (< incr 1)\n             part\n             (recur (dec incr) (+ index parts) (conj part (nth coll index nil)))))\n         ) (range parts)))","user":"54af220ce4b09f271ff37d02"},{"problem":43,"code":"(fn [s n]\n  (partition (/ (count s) n) (apply interleave (partition n s))))\n\n#_(defn task [s n]\n  (partition (/ (count s) n) (apply interleave (partition n s))))","user":"5e556e72e4b027a2e10ac0f3"},{"problem":43,"code":"(fn [s n] (apply map #(into [] %&) (partition-all n s)))","user":"585d9558e4b0f14aab7c879c"},{"problem":43,"code":"(fn rev-interleave\n  [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5f21d172e4b0f565ad998286"},{"problem":43,"code":"(fn [lst n]\n  (apply (partial map (fn [& xs] xs)) (take (/ (count lst) n) (iterate (fn [l] (drop n l)) lst)))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":43,"code":"(fn rev-int [x n]\n  (apply map vector (partition n x)))","user":"5ac74b34e4b0e27600da777f"},{"problem":43,"code":"(fn reverse-interleave\n   [v n]\n   (reduce\n    (fn [coll vals]\n      (map #(conj %1 %2) coll vals))\n    (repeat n [])\n    (partition n v)))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn [c n]\n  (let [every-nth (fn every-nth [coll]\n                    (if (>= n (count coll)) (list (first coll))\n                      (conj (every-nth (drop n coll)) (first coll))))]\n    \n    (map every-nth (map #(drop % c) (range n)))))","problem":43,"user":"53597288e4b04ce2eb3ed29c"},{"problem":43,"code":"(fn \n  [vs n]\n  (let [ts (partition n vs)]\n    (reduce\n      (fn [acc i]\n        (conj acc (map #(nth % i) ts)))\n      []\n      (range n))))","user":"53161a56e4b08068f379ed3e"},{"problem":43,"code":"#(apply map list \n    (partition-all %2 %1))","user":"58acce0ae4b0005cfeb1a754"},{"problem":43,"code":"(fn [sequence subset-count]\n   (loop [cursor sequence\n          index 0\n          output {}]\n     (if (= 0 (count cursor))\n       (map #(get output %) (range subset-count))\n       (do\n         (prn output)\n         (recur\n          (rest cursor)\n          (mod (inc index) subset-count)\n          (assoc output index (conj (or (get output index) []) (first cursor))))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":43,"code":"(fn rev-interleave [v n]\n  (loop [p (partition n v) res []]\n    (if (every? empty? p)\n      res\n      (recur (map rest p) (conj res (map first p))))))","user":"534e4a29e4b084c2834f4ab0"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (let [elems (/ (count coll) n)]\n    (loop [res [] cl coll nn n]\n          (if (= nn 0)\n            (seq res)\n            (recur (conj res (take-nth n cl)) (rest cl) (- nn 1))))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(fn [l x] (vals (group-by #(mod % x) l)))","problem":43,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [s p]\n    (map last (group-by #(mod % p) s)))","problem":43,"user":"53489329e4b084c2834f4a5b"},{"problem":43,"code":"(fn [s n] (->> (partition n s) (apply interleave) (partition (/ (count s) n))))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn retint [lst n]\r\n  (sort (map second (group-by #(mod % n) lst))))","problem":43,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn [col n]\n  (apply map list\n         (loop [s col r nil]\n           (if (seq s)\n             (recur (drop n s) (conj r (take n s)))\n             (reverse r)))))","problem":43,"user":"539c64cde4b0b51d73faaf2a"},{"problem":43,"code":"(fn de-inter [S n]\n\t(loop [i 0, [x1 & xrest :as X] S, out []]\n\t\t(println i X out)\n\t\t(if (seq X)\n\t\t\t(recur (inc i) xrest \n\t\t\t\t(map #(concat (nth out % '()) (if (= % (mod i n)) [x1] [])) (range n)))\n\t\t\tout)))","user":"564d02cde4b0284900eef679"},{"code":"(fn reverse-interleave [coll n]\n  (apply (partial map vector)\n         (partition n coll)))","problem":43,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":43,"code":"#(->> %1\n   (iterate rest)\n   (take %2)\n   (map (partial take-nth %2)))","user":"53c38b8ce4b00fb29b22127b"},{"problem":43,"code":"#(apply map (fn [& _] _) (partition %2 %1))","user":"53f31dafe4b0742d9025b0f0"},{"code":"#(map (fn [i] (take-nth %2 (drop i %))) (range %2))","problem":43,"user":"4db92654535d1e037afb21a0"},{"problem":43,"code":"(fn [xs x] (map \n  (fn [n] \n    (map (fn [m] (second m)) n)) \n  (map #(first (rest %)) (group-by #(mod (first %) x) (map-indexed #(list %1 %2) xs)))))","user":"53e92821e4b036ad0777e499"},{"problem":43,"code":"(fn un-int [col buckets]\n  (apply (partial map list) (partition-all buckets col))\n  )","user":"5b250773e4b063e2438bcc21"},{"code":"(fn [a b] (map (fn [x] (reduce #(conj % (nth %2 x)) [] (partition b a))) (range b)))","problem":43,"user":"4f2c593ee4b0d6649770a053"},{"code":";(fn [coll n]\n ;   (letfn [(group-coll-by [f coll]\n  ;                         (let [vals (distinct (map f coll))]\n   ;                          (reduce conj [] (map (fn [v] (filter #(= v (f %)) coll))  vals) )))]\n    ;  (for [ss (group-coll-by #(rem (first %) n) (map-indexed vector coll))] (map second ss))))\n    \n    (fn [coll n]\n      (map #(map second %) (vals (group-by #(mod (first %) n) (map-indexed vector coll)))))","problem":43,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":43,"code":"(fn [arg-arr step]\n  (let [init-arr (vec arg-arr)\n        insert-points \n        (loop [range_ (range step) curr 0 arr []]\n          (if-not (< (count arr) (count init-arr))\n            arr\n            (recur range_ \n                   (if (> (last range_) curr)\n                       (inc curr) \n                       (first range_))\n                   (conj arr curr))))\n        new-arr (into [] (take step (cycle [[]])))]\n\n        (loop [arr new-arr curr-idx 0]\n            (if (>= curr-idx (count init-arr))\n                arr\n                (recur (assoc arr \n                              (insert-points curr-idx) \n                              (conj (arr (insert-points curr-idx)) (init-arr curr-idx))) \n                   (+ curr-idx 1)))\n            )))","user":"542c2de0e4b0dad94371f29f"},{"problem":43,"code":"(fn\n  [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5da7176ae4b000c986472c13"},{"problem":43,"code":"(fn reverse-interleave [seq n]\n  (let [empty-vecs (repeatedly n vector)\n        partitions (partition n seq)]\n    (reduce #(map (fn [lists partition] (conj lists partition)) %1 %2) empty-vecs partitions)))","user":"570ab24fe4b0b0fb43fd06b7"},{"problem":43,"code":"(fn [l n]\n  (partition \n   (/ (count l) n) \n   (for [c (range (* n (count l)))\n         :let [q (quot c (count l))\n               r (rem c (count l))]\n         :when (= (mod r n) q)]\n     (nth l r))))","user":"536673a8e4b0243289761e76"},{"problem":43,"code":"(fn [in cnt]\n  (let [arr (partition cnt in) groups (/ (count in) cnt)]\n    (map\n      (fn [row_idx]\n        (map\n          (fn [col_idx]\n            ((vec ((vec arr) col_idx)) row_idx)\n           )\n          (range groups)\n        )\n      )\n      (range cnt)\n    )\n  )\n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":43,"code":"(fn [ns n]\n  (map #(map second %) (vals (group-by first (map vector (cycle (range n)) ns)))))","user":"52c00e32e4b07a9af5792341"},{"code":"(fn [coll n]\n    (map (fn [i] (take-nth n (subvec (vec coll) i))) (range n)))","problem":43,"user":"4fa2fa5ee4b081705acca186"},{"code":"#(partition\n  (quot (count %1) %2)\n(apply interleave (partition %2 %1)))","problem":43,"user":"5012614ee4b02a085b99dc79"},{"problem":43,"code":"(fn [s n] \n  (apply map vector (partition n s)))","user":"571543bbe4b07c98581c3ad4"},{"problem":43,"code":"#(->> (partition-all %2 %1) (apply interleave) (partition-all (/ (count %1) %2)))","user":"5711b532e4b09c608db70449"},{"code":"(fn [l n]\n      (loop [l l n n acc (into [] (repeat n []))]\n        (let [ head (take n l) ]\n          (if (empty? l)\n              acc\n              (recur (drop n l) n (map conj acc head) )\n              )\n          )\n        )\n      )","problem":43,"user":"51f81925e4b09be9c177e526"},{"code":"(fn [l n]\n        (loop [x l r []]\n                (let [t (take-nth n x)]\n                        (if (< (count t) (/ (count l) n))\n                                r\n                                (recur (next x) (conj r t))\n                        )\n                )\n        )\n)","problem":43,"user":"53512b55e4b084c2834f4ae0"},{"code":"(fn [seq n] \n        (let [parts (partition n seq)]\n          (map (fn [n] (map #(nth % n) parts)) (range 0 n))))","problem":43,"user":"5294e44de4b02ebb4ef75016"},{"problem":43,"code":"(fn [s num] (let [ivec (map-indexed #(vector (mod % num) %2) s)]\n              (vals (sort (reduce\n                            (fn [ret x]\n                              (let [k (first x), v (last x)]\n                                (assoc ret k (conj (get ret k []) v))))\n                            {}\n                            ivec)))))","user":"559c3d73e4b066d22e731f65"},{"problem":43,"code":"(fn [x n]\n\t(loop [remaining (drop n x) acc (map vector (take n x))]\n\t\t(if (empty? remaining) acc\n\t\t\t(recur (drop n remaining) (map #(conj (second %) (first %)) (partition 2 (interleave (take n remaining) acc))))\n\t\t)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":43,"code":"(fn [s n]\n  (map \n   (fn [d] \n     (keep-indexed \n      (fn [i e] \n        (if \n         (=\n          (mod \n            i \n            n)\n          d)\n         e \n         nil))\n      s))\n   (range 0 n)))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn [coll size]\n  (map #(take-nth size (drop % coll)) (range 0 size)))","problem":43,"user":"4ebad797535dfed6da9c6d6a"},{"code":"#(for [pos (range %2)]\n     (keep-indexed (fn [index item]\n                     (if (= pos (mod index %2)) item))\n                   %1))","problem":43,"user":"4f71347ae4b07046d9f4f009"},{"code":"(fn ri [s n]\n  (let [m (range n 0 -1)]\n    (map #(take-nth n (drop (- n %) s)) m)))","problem":43,"user":"4fb79872e4b081705acca2d2"},{"code":"(fn [coll n] (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"4ea1b9e4535d7eef308072b8"},{"problem":43,"code":"(fn F [xs n]\n  (reverse (into '()\n        (for [i (range 1 (inc n))]\n          (take-nth n (drop (dec i) xs))))))","user":"4f856adfe4b033992c121c44"},{"problem":43,"code":"(fn [coll nbr]\n  (loop [ret (reduce conj {} (map #(vector % []) (range nbr)))\n         idx 0\n         c   coll]\n    (if (empty? c)\n      (reduce conj [] (map #(ret %) (range nbr)))\n      (recur (assoc ret idx (conj (ret idx) (first c)))\n             (mod (inc idx) nbr)\n             (rest c)))))","user":"5b13f482e4b0cc2b61a3be58"},{"code":"(fn rinter [coll n]\n  (letfn [(every-nth [coll n offset]\n            (loop [c 0 r []]\n              (if (>= (+ offset (* c n)) (count coll)) r\n                (recur (inc c) (conj r (nth coll (+ offset (* c n))))))))]\n    (for [x (range n)]\n      (every-nth coll n x))))","problem":43,"user":"502f4c89e4b0842eb223d8b9"},{"code":"#(let [n (/ (count %1) %2)]\n   (partition n (apply interleave (partition %2 %1))))","problem":43,"user":"510d9d61e4b078ea71921141"},{"problem":43,"code":"(fn [indata inter]\n  (loop [data indata m 0 out '()] \n    (if (= m inter)\n      (reverse out)\n      (let [steps (fn steps [sdata]\n        (loop [idata sdata n 0 iout '()]\n          (if (empty? idata)\n            (reverse iout)\n            (if (= 0 (mod n inter))\n              (recur (rest idata) (inc n) (cons (first idata) iout))\n              (recur (rest idata) (inc n) iout)))))]\n        (recur (rest data) (inc m) (cons (steps data) out))))))","user":"56197b47e4b053970a773af8"},{"problem":43,"code":"#(loop [col %1\n         counter 0\n         result (vec  (repeat %2 []))]\n       (if (empty? col)\n           result\n           (recur (rest col)\n                  (inc counter)\n                  (let [index (mod counter %2)]\n                  (assoc result index (conj (nth result index) (first col)))))))","user":"57bf304de4b05aa3c4741c75"},{"problem":43,"code":"(fn [xs n] (for [a (range n)] (take-nth n (drop a xs))))","user":"57f9011ee4b0d3187e900935"},{"problem":43,"code":"(fn [coll x] (vals (group-by #(mod % x) coll)))","user":"606a70a5e4b069485764ddf2"},{"code":"#(for [x (range %2)] (map (fn [s] (nth s x)) (partition %2 %)))","problem":43,"user":"4ee9ddb8535d93acb0a66896"},{"problem":43,"code":"(fn [coll num]\n    \n    (loop [remainder coll out '() counter 0]\n      (if (= counter num)\n        (reverse out)\n        (recur (rest remainder) (conj out (take-nth num remainder)) (inc counter))\n      \n        )))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":43,"code":"(fn [li seg]\n  (apply map #(apply list %&) (partition seg li)))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":43,"code":"(fn [xs m]\n  (vals (group-by #(mod % m) xs)))","user":"527ba29de4b03e8d9a4a7594"},{"code":"(fn [coll x] (map (fn [n ](map (fn [coll] (nth coll n)) (partition x coll))) (range x)))","problem":43,"user":"52f528f0e4b05e3f0be25f2a"},{"code":"(fn [coll n]\n  (map #(take-nth n %) (take n (iterate next coll)))\n)","problem":43,"user":"504d0116e4b022602c20b089"},{"problem":43,"code":"#(vals (group-by (fn [i] (rem i %2)) %))","user":"57169f93e4b07c98581c3b00"},{"problem":43,"code":"(fn [l n]\n  (apply map list (partition-all n l)))","user":"5703cb87e4b08d47c97781f9"},{"code":"(fn [coll x] (vals (group-by #(rem % x) coll)))","problem":43,"user":"515e8ce2e4b049add99a053d"},{"problem":43,"code":"(fn [xs l]\n  (for [i (range l)\n        :let [ss (subvec (vec xs) i)]]\n    (flatten (partition 1 l ss))\n  )\n)","user":"52824143e4b0757a1b171453"},{"code":"(fn [coll n]\r\n          (apply map list (partition n coll)))","problem":43,"user":"503d129fe4b06c4e0e1fa254"},{"problem":43,"code":"(fn [xs n]  ;)\n  (partition (/ (count xs) n) (take-nth 2 (rest (flatten (vals (group-by #(mod (first %) n) (map-indexed vector xs))))))))","user":"563cdfdfe4b0bfe05bf11840"},{"problem":43,"code":"#(loop [acc (vec (repeat %2 ()))\n                  cnt 0\n                  elems %1]\n    (if (empty? elems)\n        (into () acc)\n        (recur (update-in acc [(mod cnt %2)] (partial cons (last elems)))\n               (inc cnt)\n               (butlast elems))))","user":"548af5b5e4b0e286459a11f8"},{"code":"(fn [s n]\n  (for [th (range n)]\n    (take-nth n (drop th s))))","problem":43,"user":"4ef355e3535dced4c769f228"},{"problem":43,"code":"(fn reverse-interleave [coll num]\n  (map second (group-by #(mod % num) coll)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":43,"code":"(fn [coll n]\n  (map (fn [j] (keep-indexed #(if (= j (mod %1 n)) %2 nil) coll))\n       (range n)))","user":"5bb25684e4b0a20761a2350d"},{"code":"(fn [lst c]\n  (let [maxgroups (int (/ (count lst) c))\n        parts (partition c lst)]\n    (partition-all maxgroups (apply interleave parts))))","problem":43,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":43,"code":"(fn [l n] (apply (partial map list) (#(partition %2 %) l n)))","user":"534b57bbe4b084c2834f4a78"},{"code":"#(loop [n %2 ret [] a (set %)]\n     (if (zero? n)\n       ret\n       (recur (dec n) (conj ret (take-nth n a)) (apply disj a (take-nth n a)))))","problem":43,"user":"52a9154ee4b0c58976d9ac3b"},{"code":"(fn [xs n]\n  (loop [i xs ret (map (fn [j] []) (range n))]\n    (if (seq i)\n      (recur (drop n i) (map concat ret (partition-all 1 (take n i))))\n      ret)))","problem":43,"user":"51ef31dfe4b0871fa145d9a0"},{"code":"(fn [coll n]\n  (map\n   #(apply concat (partition-all 1 n (drop % coll)))\n   (range n)))","problem":43,"user":"51170b49e4b0063b4e3e16d9"},{"code":"#(partition-all (/ (count %) %2) (map second (sort-by first (partition-all 2 (interleave (flatten (repeat (count %) (range %2))) %)))))","problem":43,"user":"4f341320e4b0e243712b1eb4"},{"problem":43,"code":"(fn rev [coll parts]\n   (let [len (/ (count coll) parts)]\n     (->> coll\n          (map-indexed #(vector %2 (mod %1 parts)))\n          (group-by last)\n          (apply vector)\n          (sort-by first)\n          (map last)\n          (map #(map (fn [[a b]] a) %))\n)))","user":"53ed6976e4b0d648e757f4c4"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (map #(take-nth n (drop % coll))\n       (range 0 n)))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":43,"code":"(fn [coll n] (partition (/ (count coll) n) (apply interleave (partition n coll))))","user":"578d459ee4b0ebec4cfb7567"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed vector)\n       (group-by (fn [[index _]] (mod index n)))\n       vals\n       (map #(map second %))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":43,"code":"(fn antileave [xs n]\n    ((fn f [ps] \n       (if (empty? (first ps)) '()\n         (cons (map first ps) (f (map rest ps)))))\n            (partition-all n xs)))","user":"54d7ed8de4b0a52adc2e2034"},{"code":"(fn [xs n]\r\n  (for [i (range n)] \r\n    (flatten (partition 1 n (drop i xs)))))","problem":43,"user":"4ef1ee67535dced4c769f219"},{"problem":43,"code":"(fn [s n]\n         (for [i (range n)]\n           (map #(nth % i) (partition n s))))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":43,"code":"(fn rozdzielanie [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5f9690d4e4b0715f5002d7de"},{"problem":43,"code":"#(apply map list (partition %2 %1))\n\n; map can be used with multiple collections. Collections will be consumed\n;; and passed to the mapping function in parallel:\n;(map + [1 2 3] [4 5 6])\n;;=> (5 7 9)\n\n\n;; When map is passed more than one collection, the mapping function will\n;; be applied until one of the collections runs out:\n;(map + [1 2 3] (iterate inc 1))\n;;=> (2 4 6)","user":"510608ebe4b01150e115ebe3"},{"code":"(fn reverse-interleave\n  [coll n]\n  (apply map vector (partition n coll)))","problem":43,"user":"51937eb3e4b04df54c098022"},{"problem":43,"code":"(fn [init, n]\n  (loop [s init, result (repeat n [])]\n    (let [more (nthnext s n)]\n      (if more\n        (recur\n          more\n          (map #(conj (nth result %) (nth s %)) (range 0 n))\n          )\n        (map #(conj (nth result %) (nth s %)) (range 0 n))\n        )\n      )\n    )\n  )","user":"564faadce4b0284900eef6b2"},{"code":"#(apply map list(partition-all %2 %1))","problem":43,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn [coll n]  (map #(take-nth n %) (take n (iterate rest coll))))","problem":43,"user":"4e14108c535d04ed9115e7dd"},{"problem":43,"code":"(fn [col n]\n  (map #(map (partial nth col)\n             (range % (count col) n))\n       (range n)))","user":"5896a0e6e4b00487982d52a8"},{"code":"(fn [xs x]\n  (map #(second %1) (take x (group-by #(rem %1 x) xs))))","problem":43,"user":"50555c06e4b0ce54f56f03fa"},{"problem":43,"code":"(fn split [xs c]\n    (let [ls (take c (repeat []))]\n      (loop [xs xs ls ls]\n        (if (= (count xs) 0)\n          (map reverse ls)\n          (recur\n            (rest xs)\n            (concat\n              (rest ls)\n              [\n                (cons (first xs) (first ls))\n              ]\n            )\n          )\n        )\n      )\n    )\n  )","user":"562add6de4b00e49c7cb4834"},{"problem":43,"code":"(fn [xs num-subs]\n  (loop [xs\t\t\t\txs\n         children\t\t(vec (repeat num-subs []))\n         current-sub\t0]\n    (if (empty? xs)\n      children\n      (recur (rest xs)\n             (assoc children current-sub (conj (nth children current-sub) (first xs)))\n             (mod (+ 1 current-sub) num-subs)))))","user":"5468033ee4b00cfc9eacc133"},{"code":"(fn unleave [s n]\n  ((fn ulh [s n c co ss]\n    (if (= n c) ss\n        (cons (take-nth n s)\n              (ulh (rest s) n (inc c) co ss)))) s n 0 (count s) []))","problem":43,"user":"529ce629e4b04e0c58e87b6e"},{"problem":43,"code":"(fn [s n] \n  (map #(take-nth n (drop % s)) (range n) ))","user":"54febf4be4b07d26eda61d45"},{"problem":43,"code":"(fn [sq n](apply map vector (partition n sq)))","user":"60759e51e4b069485764de5a"},{"code":"(fn [s t]   \n\t(reverse (loop [a '() b 0]\n   (if (= t b)\n     a\n     (recur (conj a (keep-indexed #(if (= b (rem %1 t)) %2) s)) (inc b))))))","problem":43,"user":"52166e50e4b0bf4bffd29cc6"},{"code":"(fn [s n] (reverse (map reverse (reduce (fn [memo item] (cons (cons item (last memo)) (butlast memo))) (repeat n (list)) s))))","problem":43,"user":"4f9a0064e4b0dcca54ed6d03"},{"problem":43,"code":"(fn [icoll n]\n    (loop  [coll  icoll\n            res   (repeat n '())]\n      (if (empty? coll) res\n          (let [first-res  (concat (first res) (list (first coll)))\n                rest-res   (rest res)]\n            (recur (rest coll) (concat rest-res (list first-res)))\n            )\n          )\n      )\n    )","user":"57aa290de4b0b8559636fc65"},{"problem":43,"code":"#(apply map list (partition %2 %1))\n\n;; ...the difference proper use of apply can make! Original attempt:\n;; (fn [coll n]\n;;    (first (reduce (fn [[output counter] x]\n;;                      (let [index (mod counter n)]\n;;                        [(assoc output index (conj (get output index) x)) (inc counter)]))\n;;                    [(into [] (repeat n [])) 0]\n;;                    coll)))","user":"5df70ee8e4b0a607a9a45c8a"},{"code":"(fn [a n]\n  (for [i (range 0 n)]\n    (take-nth n (drop i a))))","problem":43,"user":"5185e17ee4b0da5a5be3bac5"},{"code":"(fn [coll n] (apply map vector (partition n coll)))","problem":43,"user":"4fac1d77e4b081705acca223"},{"problem":43,"code":"(fn revint [coll n]\n   (reduce\n     (fn [acc x]\n       (map-indexed\n         (fn [i y]\n           (conj y (nth x i))\n           ) acc))\n     (repeat n [])\n     (partition n coll)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn [s n] \n  (partition \n   (int (/ (count s) n)) \n     (apply interleave (partition n s))\n  )\n)","problem":43,"user":"52bb81d7e4b07a9af57922e8"},{"code":"(fn [c n]\n   (letfn [(f [colls]\n              (lazy-seq (if (some empty? colls)\n                          nil\n                          (cons (map first colls)\n                                (f (map rest colls))))))]\n     (f (partition n c))))","problem":43,"user":"529f71aae4b04e0c58e87bac"},{"code":"(fn [x n] (apply map vector (partition-all n x)))","problem":43,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn separa [xs n]\n  (apply map list (partition n xs)))","problem":43,"user":"4db51ce0535d87e67b28fe06"},{"problem":43,"code":"(fn p43-reverse-interleave [c n]\n  (map #(take-nth n (drop % c)) (range n)))","user":"543b12cce4b032a45b86932a"},{"code":"(fn [a n]\n  (loop [acc (repeat n [])\n       org a]\n  (if-not (empty? org)\n    (recur (map-indexed #(conj %2 (nth org %1)) acc) (drop n org))\n    acc)))","problem":43,"user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [l t] ( let [s (/ (count l) t) ]\n  ( partition s (apply interleave (partition t l) ))))","problem":43,"user":"4fc43a8ee4b081705acca346"},{"code":"#(for [start (range %2)]\n    (take-nth %2 (drop start %1)))","problem":43,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [l n] (map #(take-nth n (drop % l)) (range n)))","problem":43,"user":"4e82f85d535db62dc21a62ce"},{"problem":43,"code":"(fn leave [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n n coll))))","user":"551d5cb9e4b07993ea3788e9"},{"code":"#(apply (partial map list) (partition-all %2 %))","problem":43,"user":"4f0f174c535d0136e6c22330"},{"code":"(fn [coll n]\n   (let [seqs (map #(drop % coll) (range n))]\n      (map #(take-nth n %) seqs)))","problem":43,"user":"4f2cdfb2e4b0d6649770a056"},{"problem":43,"code":"#(loop [coll %1, num %2, res '(), i 0]\n                       (if (= num (count res))\n                         (reverse res)\n                         (recur coll num (conj res ((fn [coll num i] (loop [coll coll, num num, elem '(), j 0]\n                                                                       (if (= (/ (count coll) num) (count elem))\n                                                                         (reverse elem)\n                                                                         (recur coll num (conj elem (nth coll (+ i (* num j)))) (inc j))\n                                                                         )\n                                                                       )\n                                                      ) coll num i\n                                                    )\n                                               ) (inc i))\n                         )\n                       )","user":"5cf72682e4b0b71b1d808a68"},{"code":"(fn [l v] (reduce #(conj % (map second (nth %2 1))) [] (group-by #(mod (nth % 0) v) (map-indexed list l))))","problem":43,"user":"4f614976e4b0defedf855fbb"},{"problem":43,"code":"(fn rev-interleave [xs n]\n (->>\n  xs\n  (partition n)\n  (apply map vector)))","user":"59d4d126e4b0ef0a1e9b5be9"},{"problem":43,"code":"(fn [xs n] \n  (map #(map last %) (vals (group-by #(mod (first %) n) (map vector (range) xs)))))","user":"552d9b31e4b076ab5578f7eb"},{"problem":43,"code":"(fn rev-int' [coll n]\n   (map (partial take-nth n)\n        (take n (iterate rest coll))))","user":"5e976fa8e4b0157ca96647cf"},{"code":"(fn [x y]\n  (vals (group-by #(rem % y) x)))","problem":43,"user":"50ed5d1be4b06330c1f87c37"},{"problem":43,"code":"; elegant stolen solution: #(apply map vector (partition %2 %))\n(fn RInter [coll, step]\n  (for [x (range step)]\n    (replace (into [] coll) (range x (count coll) step))\n    )\n  )","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":43,"code":"(fn [args numb]\n   (apply map list (partition numb args)))","user":"5b86462de4b047b03b2037df"},{"code":"(fn [xs step]\n  (vals (group-by #(mod % step) xs)))","problem":43,"user":"504e685fe4b0f6ff3350c4ae"},{"code":"(fn [s n]\n  (for [x (range n)]\n    (for [y (range (/ (count s) n))]\n      (nth s (+ (* y n) x)))))","problem":43,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn deinterleave [coll n]\n  (loop [result [], parts (partition n coll)]\n    (if (some empty? parts)\n      result\n      (recur (conj result (map first parts))\n             (map rest parts)))))","problem":43,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":43,"code":"(fn de-interleave [seq n]\n  (apply map list (partition n seq)))","user":"58ed713de4b056aecfd47d84"},{"problem":43,"code":"(fn reverse-interleave [coll step]\n  (map (fn [multiple]\n         (reduce concat \n                (map-indexed (fn [index v] (if (= (mod index step) multiple) (list v) (list))) coll)\n          )\n        )\n    (range 0 step))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn [coll n]\n  ((fn ! [p]\n     (if (empty? (first p)) nil\n       (cons (map first p) (! (map rest p))))) (partition n coll)))","problem":43,"user":"4e7d1c22535db169f9c796c5"},{"problem":43,"code":"(fn revint\n  [my-seq x]\n  (partition (/ (count my-seq) x) (apply interleave (partition x my-seq))))","user":"5a3ece62e4b0447ef91cc5b9"},{"problem":43,"code":"(fn [l n] (partition-all (/ (count l) n) (apply interleave (partition-all n l))))","user":"5936fabce4b02506e01a298c"},{"problem":43,"code":"(fn [coll limit] (apply map list (partition limit coll)))","user":"5a6170fde4b0512ff01cd975"},{"problem":43,"code":"(fn [v s]\n   (map (fn [x]\n    (take-nth s (drop x v)))\n    (range s))\n   )","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn foo [coll n]\n (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"4fe9ef2fe4b0547ebccb2479"},{"problem":43,"code":"#(loop [acc [] c 0] (if (>= c %2) acc (recur (concat acc [(take-nth %2 (nthrest %1 c))]) (inc c))))","user":"5ed03b7fe4b016b56eae05ae"},{"code":"(fn [coll x]\n          (map #(replace (vec coll) %1)\n          (for [i (range x)]\n            (map\n              #(+ i (* x %1))\n              (range (/ (count coll) x))))))\n; Yeah this solution wasn't great. Hard to beat the elegance of this one\n; from darren\n; #(apply map list (partition %2 %))","problem":43,"user":"4ebb20c0535dfed6da9c6d6f"},{"code":"(fn [xs n]\n    (apply map list\n           (partition n xs)))","problem":43,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn reverse-interleave [s n]\n  (let [l (count s)\n        m (/ l n)]\n    (partition m (apply interleave (partition n s)))))","problem":43,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn [lst evry]\r\n  (map \r\n    (fn [item] \r\n      ((fn [dlst]\r\n         (keep-indexed \r\n           (fn [index elem]\r\n             (if (zero? (mod index evry))\r\n               elem\r\n               nil)) dlst)) \r\n        (drop item lst))) \r\n    (range evry)))","problem":43,"user":"4e9528ef535dbda64a6f6b32"},{"code":"(fn [xs n] (take n (map #(take-nth n %) (iterate #(drop 1 %) xs))))","problem":43,"user":"50479524e4b0371827a27bc4"},{"code":"#(vals (group-by (fn [i] (mod i %2)) % ))","problem":43,"user":"4db2cd84535df7e46ed9b6c6"},{"problem":43,"code":"(fn [col n]\n    (let [modOf? (fn [c] (fn [x i] (if (= (mod i n) c) x)))\n          fil (fn [c] (filter (complement nil?) (map (modOf? c) col (range (count col)))))]\n      (map fil (range n))\n      ))","user":"59932f49e4b0b211ea3aaaae"},{"problem":43,"code":"(fn revinterleave [lst x]\n  (->> lst\n   (map #(vector %1 %2) (range))\n   (repeat x)\n   (map (fn filt [t lst] (filter #(= (mod (first %) x) t) lst)) (range))\n   (map #(map second %))\n  )\n )","user":"57cf03c0e4b00451144b04f9"},{"problem":43,"code":"(fn [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n coll))))","user":"5b55b15ae4b02d533a91bd35"},{"problem":43,"code":"#(map\n  (fn [i]\n      (keep-indexed\n        (fn [idx item]\n          (do (println idx i)\n              (if (= i (mod idx %2)) item)))\n        %1))\n  (range %2))","user":"5cbc9dace4b026601754b9eb"},{"problem":43,"code":"(fn f [s n] (apply map list (partition n s) ))","user":"53b3ea79e4b047364c0444ab"},{"problem":43,"code":"#(map-indexed (fn [i s] (take-nth %2 (nthrest s i))) (repeat %2 %1))","user":"5568a1bde4b0c656e3ff1857"},{"code":"#(reverse (map reverse (vals (loop [r {}\n              c %1 \n              n 1]\n             (if (empty? c)\n                 r \n               (recur (assoc r (mod n %2) (conj (get r (mod n %2)) (first c))) (rest c) (inc n)))))))","problem":43,"user":"511b810ce4b07ab9ec456182"},{"code":"#(apply map vector (partition-all %2 %1))","problem":43,"user":"4dc0ff08535d020aff1edf84"},{"problem":43,"code":"(fn [x n]\n  (loop [coll x res []]\n    (if (seq coll)\n      (recur (next coll) (conj res (take-nth n coll)))\n      (take n res))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":43,"code":"(fn [xs n] \n  (map #(for [ind (range % (count xs) n)] (nth xs ind)) \n       (range n)))\n\n;nice and short:\n;#(apply map list (partition %2 %1))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [col n] (apply map vector (partition n col)))","problem":43,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [coll n]\n  (let\n    [cycled (map hash-map (cycle (range n)) coll)\n     buckets (zipmap (range n) (repeat []))\n     merged (reduce (partial merge-with conj) buckets cycled)]\n    (map second (sort-by first merged))))","problem":43,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"problem":43,"code":"(fn [coll n]\n   (->> coll\n      (map-indexed (fn [idx v] [(mod idx n) v]))\n      (sort-by first)\n      (map second)\n      (partition (/ (count coll) n))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [s n] (for [i (range n)] (take-nth n (drop i s))))","problem":43,"user":"525c575be4b0cb4875a45d38"},{"problem":43,"code":"#(for [index (range %2)]\n   (take-nth %2 (drop index %)))","user":"5566463ee4b0c656e3ff1831"},{"problem":43,"code":"(fn rev-interleave [c x]\n  (apply map list (partition  x c)))","user":"556405e5e4b0c656e3ff17fb"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (apply map list (partition n n nil coll))\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"code":"(fn [x y] (vals (group-by #(mod % y) x)))","problem":43,"user":"50f85902e4b0aafb827eb1f8"},{"problem":43,"code":"#(loop [xs % n %2 res []]\n   (if (= 0 n)\n     res\n     (recur (next xs) (dec n) (conj res (take-nth %2 xs)))))","user":"4fad9da0e4b081705acca23c"},{"code":"(fn [coll n]\n  (let [has-index (fn [index item] (when (zero? (mod index n)) item))](loop [threads []\n        n n\n        coll coll]\n          (if (zero? n) threads\n            (recur (conj threads (keep-indexed has-index coll)) (dec n) (rest coll))))))","problem":43,"user":"5038381ce4b0803468ea2c6b"},{"problem":43,"code":"(fn [l x]\n      (let [c (/ (count l) x)]\n      \n        (reverse (\n                 (fn [l2 c2]\n         (loop [al l2 n c2 carry '()]\n           (if (= n 0)\n             carry\n            (recur (map rest al) (dec n) (conj carry (map first al) ))))) \n        \n                 (partition x l) x))))","user":"53c6e25ee4b00fb29b2212a4"},{"problem":43,"code":"#(apply map (fn [& args]\n              args)\n        (partition %2 %1))","user":"59251947e4b072a2710fce69"},{"problem":43,"code":"(fn [a b]\n    (loop [c 0\n           ret []]\n        (if (= b c)\n            ret\n            (recur (+ c 1) (conj ret (reduce (fn [acc p] (conj acc (nth p c))) [] (partition b a))))\n        )\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":43,"code":"#(map\n  (fn [m]\n    (loop [x %1 i 0 result []]\n     (if (empty? x)\n       result\n       (if (= (rem (+ i m) %2) 0)\n         (recur (rest x) (inc i) (conj result (first x)))\n         (recur (rest x) (inc i) result)))))\n  (range %2 0 -1))","user":"549e5e52e4b0f3d1d8e70f9e"},{"code":"(fn [s n]\r\n (partition (/ (count s) n) (map second (sort (map (fn [v i] [i v]) s (map #(mod % n) (range)))))))","problem":43,"user":"50ad7888e4b0a40c9cfb08c7"},{"problem":43,"code":"(fn [col n]\n  (map\n   #(take-nth n (drop % col))\n   (range n))\n  )","user":"5e078ba7e4b0978307768fb6"},{"problem":43,"code":"(fn [col n]\n  (let [col2 (partition n col)]\n    (loop [i 0 result []]\n      (if (== i n)\n        result\n        (recur (inc i) (conj result (\n                                     (fn [col i]\n  (loop [c col result []]\n    (if (empty? c)\n      (list* result)\n      (recur (rest c) (conj result (nth (first c) i)))\n    )\n  )\n)\n                                     col2 i)))\n      )\n    )\n  )    \n)","user":"57e396cde4b0bfb2137f5a9e"},{"problem":43,"code":"(fn [xs n]\n    (for [i (range n)] (take-nth n (drop i xs))))","user":"55568a7de4b0deb715856e1c"},{"problem":43,"code":"(fn [coll x]\n\n  (let [group-index (cycle (range x))]\n\n    (map (fn [[k v]] (map second v))\n         (group-by first (map (fn [v i] [i v]) coll group-index)))))","user":"562268dce4b03f08ee9a9224"},{"problem":43,"code":"(fn revleaf\n  [coll n]\n  (loop\n   [[x & xs] coll i 0 acc (vec (repeat n []))]\n   (if x\n     (if (< (inc i) n)\n       (recur xs (inc i) (update-in acc [i] #(conj % x)))\n       (recur xs 0 (update-in acc [i] #(conj % x)))\n       )\n     acc\n     )\n   )\n  )","user":"56edf2dde4b04a395b9a044b"},{"problem":43,"code":"(fn [x y]\n  (let [m (partition y x)]\n    (for [i (range y)]\n      (map #(nth % i) m)\n      )))","user":"549a1fede4b0f3d1d8e70f6a"},{"code":"(fn [cols sep] (apply map list (partition sep cols)))","problem":43,"user":"4f246938e4b0d66497709fec"},{"problem":43,"code":"#(apply map (fn[& a] a ) (partition %2 %1))","user":"593db05ae4b069cdc2982bab"},{"problem":43,"code":"#(partition (/ (count %) %2) (apply mapcat list (partition %2 %)))","user":"5a52f2cbe4b05d388ecb6c06"},{"code":"(fn [col n] (vals (group-by #(mod % n) col)))","problem":43,"user":"50435689e4b034ff00315d21"},{"problem":43,"code":"( fn [S n]\n  (for [x (range n)]\n   \t(for [y (range (quot (count S) n))]\n      (nth S (+ x (* n y)) )\n     )\n  )\n \n)","user":"5649615be4b0284900eef641"},{"problem":43,"code":"(fn rinterleave [c n]\n  (->> (partition n n nil c)\n       (apply map list)\n   ))","user":"58988cbbe4b00487982d52d7"},{"problem":43,"code":"#(->> %1\n      (partition %2)\n      (apply interleave)\n      (partition (/ (count %1) %2)))","user":"566812f0e4b04acd4f672de1"},{"problem":43,"code":"(fn spl [col n] (partition (/ (count col) n) (apply interleave (partition n col))))","user":"5592bf9fe4b0c79f6e1db933"},{"code":"(fn [sourceseq number]\n    (loop [res (repeat number [])\n           source sourceseq]\n      (let [items (take number source)\n            rest (drop number source)]\n        (if (empty? items)\n          res\n          (recur (map conj res items) rest)))))","problem":43,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [coll n]\n  (loop [coll coll i 0 ret []]\n    (if (empty? coll) ret\n      (recur (rest coll) \n             (mod (inc i) n) \n             (assoc ret i (conj (nth ret i []) (first coll)))))))","problem":43,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":43,"code":"(fn [arr l]\n  (partition (/ (count arr) l)\n             (apply interleave\n                    (partition l arr))))","user":"53de7484e4b0d874e779ae35"},{"code":"#(map (fn [c] (keep-indexed (fn [i x] (when (= (rem i %2) c) x)) %1)) (range %2))","problem":43,"user":"5040edf4e4b0ff5d2cc40db5"},{"code":"(fn rev-interleave [coll n]\r\n  (let [p (partition n coll)]\r\n    (apply (partial map list) p)))","problem":43,"user":"4e7e4a1f535db169f9c7970c"},{"problem":43,"code":"(fn [ls n]\n  (loop [xs  ls\n         m   n\n         acc []]\n    (if (= m 0)\n      acc\n      (recur (rest xs) (dec m) (conj acc (take-nth n xs))))))","user":"5565f616e4b0c656e3ff1823"},{"code":"#(->> % (partition %2) (apply map vector))","problem":43,"user":"52c60945e4b0c2d177d62108"},{"problem":43,"code":"(fn [sq buckets] \n  (let [grouped (group-by first (map-indexed (fn [ix k] [(mod ix buckets) k]) sq))]\n  \t(map (fn [ix] (map second (get grouped ix))) (range buckets))))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn [xs n]\n  (let [chunks (partition n xs)\n        length (count (first chunks))]\n    (map (fn [i] (map #(nth % i) chunks))\n         (range length))))","problem":43,"user":"510b0480e4b078ea719210fa"},{"problem":43,"code":"(fn uninterleave [xs n]\n  (letfn [(splt [xs n]\n           (let [[fst rst] (split-at n xs)]\n             (if (empty? rst)\n               [fst]\n               (cons fst (splt rst n)))))]\n    (apply (partial map list) (splt xs n))))","user":"57a49951e4b0a966079561e5"},{"problem":43,"code":"(fn [ip_s n]\n  (loop [ s  ip_s \n          result  [] ]\n    (if (= (count result) n)\n       result\n       (recur (rest s) (conj result (take-nth n s))))))","user":"52117ea7e4b07aea8afc4f70"},{"problem":43,"code":"(fn rev [l n]\n  (let\n   [part\n    (fn part [l s n]\n      (if (< s (count l))\n        (conj\n         (part l (+ s n) n)\n         (nth l s))\n        (list)))]\n   (map\n    #(part l % n)\n    (range 0 n))))","user":"598ab445e4b02b9968b84ce0"},{"code":"#(letfn [(x [c]\r\n  (let [f (map first c) r (map rest c)] \r\n    (if (-> r first empty?) (list f) (cons f (x r)))))]\r\n  (x (partition %2 %1))\r\n)","problem":43,"user":"4e111538535d04ed9115e7c3"},{"problem":43,"code":"(fn [coll n]\n  (apply map vector\n   (loop [coll coll\n          acc []]\n     (if (empty? coll)\n         acc\n         (recur (drop n coll)\n                (conj acc (take n coll)))))))","user":"5a065388e4b01bb0ae8afdcb"},{"code":"(fn [coll n]\n    (partition (/ (count coll) n)\n      (loop [x 0, li []]\n        (if (= x n)\n           li\n           (recur (inc x) (into li (take-nth n(drop x coll))))\n        )\n      )\n    )\n  )","problem":43,"user":"531843c1e4b08068f379ed6c"},{"code":"(fn [xs n]\n  (map #(take-nth n (nthnext xs %)) (range n)))","problem":43,"user":"4f0381db535dcb61093f6b02"},{"code":"(fn [s x]\n  (vals (group-by #(rem % x) s)))","problem":43,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn [coll cnt]\n    (let [mapped (map-indexed (fn [i v] [(mod i cnt) v]) coll)\n          base-acc (repeat cnt ())]\n      (reduce \n        (fn [acc x] \n          (let [index (first x)\n                value (last x)\n                start (take index acc)\n                trgt (nth acc index)\n                updated (concat trgt (list value))\n                end (drop (+ 1 index) acc)]\n           (concat start (list updated) end))) \n        base-acc mapped)))","problem":43,"user":"5141abf1e4b02fd87f5064c3"},{"problem":43,"code":"(fn [col n]\n  (->> col\n       (partition n)\n       (apply map list)))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [c i] (for [x (range 0 i)] (take-nth i (drop x c))))","problem":43,"user":"50bce014e4b0594b91591c63"},{"problem":43,"code":"(fn [x, y] (sort-by first \n(let [z '()]\n    (for [i (range 0 y)]\n      (concat  (keep-indexed (fn [idx v] (if (zero? (mod (+ v i) y)) v)) x) z)\n      ))))","user":"5a0a3473e4b0eab8c0448941"},{"code":"(fn [s n]\n  (map (fn [i] (keep-indexed (fn [a b] (when (= i (mod a n)) b)) s))\n       (range n)))","problem":43,"user":"50d8f4b6e4b01f0871336e74"},{"problem":43,"code":"(fn [l n] (map (fn [i] (take-nth n (drop i l))) (range n)))","user":"584dadebe4b0b7285a6f4e44"},{"problem":43,"code":"(fn\n [s n]\n (loop\n  [xs s c 0 acc (vec (repeat n []))]\n  (if\n   (= c (count xs))\n   acc\n   (recur xs (inc c) (assoc\n                       acc (mod c n) (conj (nth acc (mod c n)) (nth xs c))  )))))","user":"56cad309e4b0ea9b8538f720"},{"problem":43,"code":";; b e a utiful code!\n#(apply map list (partition %2 %1))","user":"56ca0da9e4b0ea9b8538f715"},{"problem":43,"code":"(fn [the-seq n]\n  (let [nth-repeatedly (fn nth-repeatedly [the-seq]\n                         (if-let [head (first the-seq)]\n                           (cons head (nth-repeatedly (drop n the-seq)))\n                           nil))]\n    (map #(nth-repeatedly (drop % the-seq)) (range n))))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":43,"code":"(fn [s n] (apply map vector (partition n s)) )","user":"5708b96ce4b0b0fb43fd06a3"},{"code":"(fn [col,i] (lazy-seq (apply map vector (partition i col))))","problem":43,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":43,"code":"(letfn [(zipWith [mfn a b] (lazy-seq (if (and a b) (cons (mfn (first a) (first b)) (zipWith mfn (next a) (next b))) b)))\n        (distr [l1 l2] (zipWith cons l1 l2))\n        (empties [n] (take n (repeat '())))\n        (rake [s n] (if (empty? s) (empties n)\n                      (distr s (rake (drop n s) n))))\n        ]\n       rake\n       )","user":"54d95ce8e4b024c67c0cf74a"},{"problem":43,"code":"(fn [coll n]\n    (reduce (fn [accumulator element]\n              (conj accumulator (take-nth n (drop element coll))))\n            []\n            (range n)))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [s n] ((fn nextset [acc l] (if (>= (count acc) n) acc (nextset (concat acc [(take-nth n l)]) (rest l)))) [] s))","problem":43,"user":"4e89de60535d3e98b8023285"},{"problem":43,"code":"(fn [xs n]\n  (loop [acc (repeat n [])\n         coll xs]\n    (if (empty? coll)\n      acc\n      (recur (map-indexed #(conj %2 (nth coll %)) acc)\n             (drop n coll)))))","user":"541b41d1e4b01498b1a71a65"},{"problem":43,"code":"(fn [a b]\n  (for [k (range b)]\n    (remove nil?\n            (map-indexed\n             (fn[i e] (when\n                        (= k (mod i b))\n                        e))\n             a))))","user":"56a9d4bbe4b07966d5a8a07b"},{"code":"(fn [l n] \r\n  (map #(map second %) (vals (group-by \r\n    #(mod (first %) n) \r\n    (map vector (iterate inc 0) l)))))\r\n; not sure how this works \r\n;(apply map list (#(partition %2 %1) [1 2 3 4 5 6] 2))","problem":43,"user":"4ee7d113535d93acb0a6686e"},{"problem":43,"code":"(fn [l n]\n  (loop [li l c 0 rl ()]\n    (if (= c n)\n      (reverse rl)\n      (recur\n       (rest li)\n       (inc c)\n       (conj rl (take-nth n li))))))","user":"52979551e4b02ebb4ef75043"},{"problem":43,"code":"(fn [seq x]\n  (map #(apply list %) (vals (group-by #(mod % x) seq))))","user":"5a593521e4b05d388ecb6c93"},{"code":"(fn revil [coll n]\n  (let [cc (count coll)\n        ps (/ cc n)]\n    (partition ps\n               (apply interleave (partition n coll)))))","problem":43,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":43,"code":"#(apply map list (partition %2 %))\n;(fn [x y]\n;  (for [i (range y)] (take-nth y (drop i x)))\n;  )","user":"5cfee28de4b0cc9c91588185"},{"problem":43,"code":"(fn [coll x](map (fn [n](flatten (partition-all 1 x (drop n coll)))) (range x)))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn R [l n]\n  (cond (empty? l) (repeat n [])\n        :else (map cons (take n l) (R (drop n l) n))))","problem":43,"user":"51a4416ae4b0def3c5c5868c"},{"problem":43,"code":"(fn [xs i]\n  (apply map list (partition i xs)))","user":"56255e2de4b00a550fc90297"},{"problem":43,"code":"(fn [coll n]\n        (let [size (int (Math/ceil (/ (count coll) n)))]\n          (partition-all size (apply interleave (partition-all n coll)))))","user":"532686e6e4b09d4e7a9b54ef"},{"code":"#(map\n  (partial take-nth %2) \n  (take %2 (iterate rest %1)))","problem":43,"user":"4dac61e18cc9d6edb9beb0b3"},{"problem":43,"code":"(fn [x y]\n  (loop [a {}\n         b x\n         i 0]\n    (if (empty? b)\n        (vals (into (sorted-map) a))\n        (let [k (mod i y)\n              nval (conj (into [] (get a k)) (first b))]\n            (recur (assoc a k nval) (rest b) (+ i 1))))))","user":"5d371b6fe4b01671435dbd31"},{"problem":43,"code":"(fn\n  reverse-interleave\n  [coll n]\n  (for [i (range n)]\n    (->> coll (drop i ,,,) (take-nth n ,,,))))","user":"5c6227fee4b0fca0c1622641"},{"code":"(fn [xs n] (map reverse (reduce #(map cons %2 %1) (repeat n nil) (partition n xs))))","problem":43,"user":"4e8612f8535db62dc21a62f2"},{"problem":43,"code":"(fn [xs n]\n  (apply ;((1 3 5)(2 4 6))\n    map  ;((1)(2))((3)(4))((5)(6))\n    list ;((1)(2))\n    (partition n xs) ;((1 2) (3 4) (5 6))\n    ))","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"#(loop [lst % n %2 acc ()]\n    (if (= (count acc) n)\n      acc\n      (recur (rest lst) n (concat acc (list (take-nth n lst))))))","problem":43,"user":"4ecbd630535df97575fdabe1"},{"problem":43,"code":"(fn [s n]\n    (let [lists (partition n s)]\n      (map (fn [i] (map (fn [list] (nth list i)) lists)) (range n))))","user":"4f213e2ee4b0d66497709fcf"},{"problem":43,"code":"(fn\n  [sequence stride]\n  (map\n    (fn\n      [i]\n      (take-nth stride (take-last (- (count sequence) i) sequence)))\n    (range stride)))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn [s n]     (let [l (map vector s (cycle (range n)))]       (map #(for [x l :when (= (second x) %)] (first x))            (range n))))","problem":43,"user":"4f954dbce4b0dcca54ed6ccd"},{"problem":43,"code":"#(let [subsequences (partition %2 %)]\n   (apply map list subsequences))","user":"4ec7c32c535d6d7199dd36e6"},{"problem":43,"code":"(fn [coll n]\n  (partition (/ (count coll) n)\n        (apply interleave (partition n coll))))","user":"56d3bc2de4b0ea9b8538f7b0"},{"problem":43,"code":"(fn reverse-interleave [s n]\n            (for [x (range n)]\n              (for [y (range 0 (count s) n)]\n                (nth s (+ x y)))))","user":"587ee260e4b052da650a6353"},{"problem":43,"code":"(fn [xs n] (let [f\n                 (fn f [acc rst]\n                   (if (empty? rst)\n                     acc\n                     (f (conj acc (first rst)) (drop n rst))))]\n             (map (fn [i] (f [] (drop i xs))) (range n))))","user":"57fdd1cfe4b0d3187e9009bf"},{"problem":43,"code":"(fn [xs num]\n  (map\n    (fn [i] (apply concat (partition 1 num (drop i xs))))\n    (range num))\n)","user":"5d123457e4b02c15ef021996"},{"problem":43,"code":"(fn rev-interleave [l n]\n  (for [j (range n)]\n    (for [i (range (count l)) :when (= j (rem i n))] (nth l i))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":43,"code":";;(fn [sq x] (map  (fn [xx] ((fn [n xxx sqsqsq] (map #(nth % n) (partition xxx sqsqsq)))  xx x sq)) (range x)))\n#(apply map list (partition %2 %))","user":"54ad9d76e4b09f271ff37ce6"},{"code":"(fn [s c] (map (fn [offset] (keep-indexed #(if (= (mod %1 c) offset) %2 nil) s)) (range 0 c)))","problem":43,"user":"52caeb25e4b071a8d36bd3e7"},{"code":"(fn reverse-interleave\n\n   ([xs n] (reverse-interleave xs (take (count xs) (cycle (range n))) (vec (repeat n []))))\n\n   ([[x & xs] [i & is] ret]\n    (if (nil? x) ret\n  \t(recur xs is (assoc-in ret [i (count (get ret i))] x)))))","problem":43,"user":"4fe8d862e4b0547ebccb2428"},{"problem":43,"code":"(fn reverse-interleave [coll n-lists]\n  (let [s (doall (vec coll))\n        n-per-list (/ (count s) n-lists)]\n    (partition\n      n-per-list\n      (for [x (range n-lists)\n            y (range n-per-list)]\n        (s (+ x (* y n-lists)))))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [coll, n] (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn [col n] (for [i (range n)] (take-nth n (drop i col))))","problem":43,"user":"531f1e63e4b08068f379edc2"},{"problem":43,"code":"(fn counterleave [s n]\n  (for [i (range n)]\n    (take-nth n (drop i s))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":43,"code":"(fn [x y]\n     (let [r (take y (repeat '()))]\n       (reverse\n        (map reverse\n             (reduce\n              #(conj (butlast %1) (conj (last %1) %2))\n              r\n              x)))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":43,"code":"(fn [coll n]\n  (let [new-coll (partition n coll)]\n    (partition (/ (count coll) n) (apply interleave new-coll))))","user":"550d9452e4b06e50f9beb15d"},{"problem":43,"code":"(fn interleave' [xs n]\n  (let [\n    transpose #(apply map list %)]\n    (transpose (partition n n xs))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(vector (rem % n) %2))\n       (group-by first)\n       (into (sorted-map-by <))\n       (vals)\n       (map #(map second %)))\n  )","problem":43,"user":"513f0565e4b051389b345b3b"},{"problem":43,"code":"(fn hello [s i]\n  (loop [res [] current-index 0]\n    (if (= current-index i)\n      res\n      (recur (conj res (keep-indexed #(when (= current-index (mod %1 i)) %2) s)) (inc current-index))\n      )\n    )\n  )","user":"55d42f78e4b0e31453f64a73"},{"problem":43,"code":"(fn rinterleave [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"5884f77ee4b0f1effa3b76a9"},{"code":"(fn [s n] (apply map list (partition-all n s)))","problem":43,"user":"50b29029e4b03ea880433563"},{"problem":43,"code":"(fn [s n] (let [modfirst #(mod (first %) n)] (->> s (map-indexed list) (sort-by modfirst) (partition-by modfirst) (map #(map second %)) )))","user":"53ced9fee4b00fb29b2212f8"},{"code":"(fn [c s]\n      (let [n (count c)] \n        (for [i (range s)] (apply concat (partition 1 s (take n (drop i (cycle c))))))))","problem":43,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (take-nth n (nthrest coll i))))","user":"552356fae4b0882d96d091af"},{"code":"#(apply map list\n        (partition %2 %1))","problem":43,"user":"4dc21233535d020aff1edf92"},{"code":"(fn f [x n]\n  (let [x* (partition n n x)]\n    (for [i (range n)] (map #(nth %1 i) x*))))","problem":43,"user":"51d662fce4b0154f82ab92ef"},{"problem":43,"code":"(fn [v n] (let [parts (partition n v)] (for [i (range n)] (map #(nth % i) parts))))","user":"5d629ed9e4b0c9e5857d501d"},{"code":"(fn [v n]   \n  (apply map list (partition n v)))","problem":43,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn [lst cnt] (vals (group-by #(mod % cnt) lst)))","problem":43,"user":"50b11fbce4b009df37c708cb"},{"code":"(fn [x n] (map #(take-nth 2 (rest (flatten %))) (vals (group-by #(mod (first %) n) (map-indexed #(list %1 %2) x)))))","problem":43,"user":"4ecbb249535df97575fdabdf"},{"problem":43,"code":"(fn [col n]\n  (->> (range 0 n)\n     (map #(nthnext col %))\n     (map #(take-nth n %))))","user":"595fe942e4b066ee0a44b075"},{"problem":43,"code":"(fn [x k] (partition (/ (count x) k) (map #(nth x %) (flatten (map second (group-by #(mod % k) (range (count x))))))))","user":"5ccb3792e4b0ccb061962882"},{"problem":43,"code":"(fn [col x] (apply map list (partition x col)))","user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn [seq n]\n  (apply map (cons list (partition n seq))))","problem":43,"user":"4f62b29ce4b0defedf855fd9"},{"code":"#(apply map list \n  (partition-all %2 %1))","problem":43,"user":"4ef2da4f535dced4c769f224"},{"code":"(fn outerleave [s n]\n  (loop [s (seq s)\n         rs (vec (repeat n []))\n         i 0]\n    (cond\n      (empty? s) (seq rs)\n      (= i n) (recur s rs 0)\n      :else\n        (recur (rest s)\n               (update-in rs [i] conj (first s))\n               (inc i)))))","problem":43,"user":"4f2b0951e4b0d6649770a045"},{"code":"(fn [coll n]\n  (loop [i n c coll accvec []]\n    (if (= i 0)\n      accvec\n      (recur (dec i) (rest c) (conj accvec (take-nth n c))))))","problem":43,"user":"4efec33f535dcb61093f6a2a"},{"problem":43,"code":"#(map (partial map first) (vals (group-by last (map vector %1 (cycle (range %2))))))","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn f [xs m] \n  (vals (group-by #(mod % m) xs)))","problem":43,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":43,"code":"(fn ri [s x] (map (fn [p] (map #(nth s %) (range p (count s) x))) (range x)))","user":"583048d9e4b051871117c007"},{"problem":43,"code":"(fn rinterleave [x n] (for [m (range n)] (take-nth n (drop m x))))","user":"55c5e781e4b0e31453f649b8"},{"problem":43,"code":"(fn [list n] (apply map vector (partition n list)))","user":"5a12dea3e4b04bbd27e6da44"},{"problem":43,"code":"(fn [c n] (for [i (range n)](take-nth n (drop i c))))","user":"593fcb0ce4b069cdc2982bea"},{"problem":43,"code":";(fn [a c] (map (fn [v] (map last v)) (partition-by first (sort-by first (partition 2 (interleave (cycle (range c)) a))))))\n ;(fn [a c] (->> a (interleave (cycle (range c))) (partition 2) (sort-by first) (partition-by first) (map (fn [v] (map last v)))))\n ;(fn [a c] (->> a (map-indexed (fn [i e] (list (rem i c) e))) (sort-by first) (partition-by first) (map (fn [v] (map last v)))))\n (fn [a c] \n   (->> (range c) \n        (map \n         (fn [n] \n           (keep-indexed #( if (-> %1 (rem c) (= n)) %2 ) a )\n         )\n        )\n   )\n )","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn [ls n]\n  (apply map vector (partition n ls)))","problem":43,"user":"4de165f3535d08e6dec9fde6"},{"problem":43,"code":"(fn [coll groups]\n  (loop [res []\n         coll coll\n         cur 0]\n    (if (empty? coll)\n      res\n      (let [subg (nth res cur [])\n            newsubg (conj subg (first coll))\n            newres (assoc res cur newsubg)\n            nextcur (if (= (- groups cur) 1) 0 (inc cur))]\n        (recur newres (rest coll) nextcur)\n        ))))","user":"592334c7e4b0a390037439ee"},{"problem":43,"code":"(fn r_intrlv([_seq n] (r_intrlv _seq n '()))\n\t([_seq n result]\n\t(if (empty? _seq)\n\t\t(partition (count result) (apply interleave (reverse result)))\n\t\t(recur (drop n _seq) n (conj result (take n _seq))))))","user":"5954eef0e4b066ee0a44af17"},{"code":"(fn [x n]\n  (apply list\n    (map\n      (fn [flag] (filter #(= (mod (.indexOf x %) n) flag) x))\n      (range n))))","problem":43,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn  [s n] \n    (for [x (range n)] (take-nth n (drop x s))))","problem":43,"user":"5356e569e4b04ce2eb3ed272"},{"problem":43,"code":"(fn [s n]\n      (map (fn [x] (map (fn [y] (second y)) x))\n           (vals (into (sorted-map)\n                       (group-by (fn [x] (rem (key x) n))\n                                              (into (sorted-map) (zipmap (range 0 (count s)) s)))))))","user":"5600dccee4b04bb52996e175"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n   (loop [res   []\n          size   (/ (count coll) n)\n          index 0]\n     (if (= (count res) n)\n       res\n       (recur\n        (conj res\n              (loop [idx  index\n                     step n\n                     part ()]\n               (if (= (count part) size)\n                 (reverse part)\n                 (recur (+ idx step)\n                        step\n                        (conj part (nth coll idx))))))\n        size\n        (inc index)))))\n\n; great solution\n;\n; #(apply map list (partition %2 %))","user":"5eccc5c2e4b016b56eae058f"},{"code":"(fn [xs n]\n  (->> xs\n       (map-indexed #(vector (mod %1 n) %2))\n       (group-by first)\n       vals\n       (map #(map second %))\n   )\n  )","problem":43,"user":"522f483ce4b032bbe342415a"},{"problem":43,"code":"(fn [lst n]\n  (let [get-nth (fn [i a col] (keep-indexed #(when (= (rem %1 a) i) %2) col))]\n    (map-indexed (fn [i _] (get-nth i n lst)) (repeat n '()))))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":43,"code":"(fn [coll offset]\n  (apply map vector (partition offset coll)))","user":"56c33ceae4b05cc29241ee89"},{"problem":43,"code":"(fn rever-inter [xs  n]\n  (for [k (range n)]\n    (reduce #(conj %1 (nth %2 k)) [] (partition n xs))\n  )\n)","user":"5510aa92e4b06e50f9beb188"},{"problem":43,"code":"(fn reverse-interleave\n  [seq num-of-subseq]\n  (for [x (range num-of-subseq)]\n    (take-nth num-of-subseq (drop x seq))))","user":"5dadd84ee4b0f8c104ccfc85"},{"problem":43,"code":"(fn [coll n]\n  (map #(second %) (group-by #(rem % n) coll)))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [s sub]\n  (let [out (into [] (take sub (repeat [])))]\n    (loop [s s cnt 0 out out]\n      (if (empty? s)\n        out\n        (recur (rest s)\n               (if (= (dec sub) cnt)\n                    0\n                    (inc cnt))\n               (assoc out cnt\n                      (conj (nth out cnt) (first s))\n))))))","problem":43,"user":"4faec810e4b081705acca24e"},{"problem":43,"code":"(fn [coll n] (map (fn [i] (map #(nth % i) (partition-all n coll))) (range n)))","user":"5ed9b912e4b0c7845d86b0e3"},{"code":"(fn [sq n]\n  (loop [s sq i n ac []]\n    (if (zero? i) ac\n        (recur (rest s) (dec i) \n                (conj ac (take-nth n s))))))","problem":43,"user":"4dcc5aff535d5973398f9293"},{"problem":43,"code":"(fn rev-interleave\n  [coll n]\n  (apply map list (partition n coll))\n  )","user":"5ac37d0fe4b0e27600da7718"},{"code":"(fn [coll n]\n  (map #(take-nth n (drop % coll)) (range n)))","problem":43,"user":"4e42f930535dc968683fc49f"},{"code":"#(for [x (range %2)] (take-nth %2 (drop x %1)))","problem":43,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [s p] (apply map list (partition p s)))","problem":43,"user":"50cf21dee4b0e61f11ddcd8b"},{"code":"(fn ai [xs n]\n    (loop [i 0, head []]\n        (if (= i n)\n            head\n            (recur (inc i) (conj head (take-nth n (nthnext xs i)))))))","problem":43,"user":"4f128865535d64f603146428"},{"code":"(fn [coll n] \n  (map #(take-nth n (drop %1 coll)) (range n)))","problem":43,"user":"52976262e4b02ebb4ef75041"},{"problem":43,"code":"(fn [s seqs]\n  (loop [s s \n         ret (into [] (repeat seqs []))\n         index 0]\n    (if-not (seq s)\n      ret\n      (let [seq-index (rem index seqs)]\n        (recur (rest s)\n               (update-in ret [seq-index] conj (first s))\n               (inc index))))))","user":"555ee545e4b0a2eb076a39bd"},{"problem":43,"code":"(fn [c n]\n    (let [coll (vec c)] \n          (reduce-kv (fn [a i c] (assoc a (mod i n) ( #(conj % c) (get a (mod i n)))))\n                     (vec (map (fn [_] []) (range n))) \n                     coll)))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"#(for [x (range %2)] (map last (partition (inc x) %2 %)))","problem":43,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn [coll n]\n  (->> (range n)                \n       (repeat                )\n       (mapcat identity       )\n       (#(interleave % coll)  ) \n       (partition-all 2       )\n       (group-by first        )\n       (vals                  )\n       (map #(map second %)   )\n       )\n  )","problem":43,"user":"53415755e4b00652c8746ecd"},{"problem":43,"code":"(fn rev-interleave\n    [coll num]\n    (vals (group-by #(mod % num) coll)))","user":"51803613e4b04f45bde7d8fd"},{"code":"(fn [col n] (for [offset (range n)] (take-nth n (nthrest col offset) ) ) )","problem":43,"user":"51e28063e4b08e53a149f0f2"},{"problem":43,"code":"(fn [c n]\n    (map #(map (partial nth c) (range % (count c) n)) (range n)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn [s n]\n  (apply map list (partition n s)))","problem":43,"user":"4f038017535dcb61093f6afa"},{"code":"(fn dein [ran nu]\n  (if (< (count ran) nu)\n    (repeat nu nil)\n    (let [heads (take nu ran)\n          rests (dein (drop nu ran) nu)]\n      (map #(cons %1 %2) heads rests))))","problem":43,"user":"53908e6be4b0b51d73faae9a"},{"code":"#(apply map vector (partition-all %2 %))","problem":43,"user":"4efb0ae1535dced4c769f273"},{"code":"(fn [coll n]\n  (apply (partial map vector) (partition n coll)))","problem":43,"user":"52127ee4e4b0d32679a5063c"},{"problem":43,"code":"(fn [s n] (partition (/(count s)n) (apply interleave (partition n s))))","user":"5951190be4b066ee0a44aea4"},{"problem":43,"code":"#(reverse\n    (into (list)\n      (reduce\n        (fn [acc part]\n          (loop [i 0 l part result acc]\n            (if (empty? l)\n              result\n              (recur\n                (+ i 1)\n                (rest l)\n                (assoc result i (concat (nth result i) (list (first l))))))))\n        (vec (repeatedly %2 list))\n        (partition-all %2 %1))))","user":"57b39fbee4b0fbc9809a2783"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (partition (/ (count xs) n)(apply interleave (partition n xs))))","user":"559622cee4b0c79f6e1db975"},{"problem":43,"code":"(fn [s d] (vals  (group-by #(mod % d) s)))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn [s n]\n  (map\n    (fn [i] (reduce concat (partition 1 n (drop i s))))\n    (range 0 n)))","problem":43,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":43,"code":"(fn [lst n] (map #(map second %) (partition-by first (sort-by first (map #(vector %2 %) lst (cycle (range n)))))))","user":"516f06dce4b06aac486e5b39"},{"problem":43,"code":"(fn [starting-collection num-of-subsequences]\n    (loop [acc (into [] (repeat num-of-subsequences [])),\n                     c starting-collection,\n                     idx 0]\n      (if (empty? c) acc\n          (let [current-subseq (nth acc idx),\n                current-el (first c),\n                next-idx (mod (inc idx) num-of-subsequences)]\n            (recur (assoc acc idx (conj current-subseq current-el)) (rest c) next-idx)))))","user":"55916764e4b0604b3f94d57b"},{"code":"(fn [s x]\n  (let [start-from (fn [s i]\n                     (if (= i 0)\n                          s\n                          (recur (rest s) (dec i))))\n        choose (fn [s]\n                 ((fn [ll i a]\n                    (if (empty? ll)\n                        (reverse a)\n                        (if (= i 0)\n                          (recur (rest ll) (dec x) (cons (first ll) a))\n                          (recur (rest ll) (dec i) a))))\n                  s 0 `()))]\n        (map choose (map #(start-from s %) (range x)))))","problem":43,"user":"4f404dcee4b0e243712b1fb0"},{"code":"(fn [x y] (vals (group-by #(mod %1 y) x)))","problem":43,"user":"4f35e662e4b0e243712b1ec6"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n           (apply map list (partition n coll)))","user":"5e3975a3e4b01d43a70e8dd3"},{"problem":43,"code":"#(for [i (range 0 %2)]\n   (take-nth %2 (drop i %1)))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (map vector (cycle (range n)))\n       (group-by first)\n       (vals)\n       (map #(map second %))))","user":"5f82609ae4b0c071e6c840f9"},{"problem":43,"code":"(fn [v n] (map #(take-nth n %) (take n (iterate rest v))))","user":"543be8f0e4b032a45b869337"},{"problem":43,"code":"(fn dale [v x] (loop [r [] p 0 d (apply vector v) esi  (fn esimo [a b] (cons (first a) (if (< b (count a) ) (esimo (subvec a b) b))))] (if (= x p) r (recur (conj r (esi d x )) (+ 1 p) (subvec d 1) esi ))  ))","user":"55ac16a0e4b03311e7b73291"},{"problem":43,"code":"(fn [coll n]\n  (for [x (range n)] (take-nth n (drop x coll))))","user":"5a58bfd0e4b05d388ecb6c84"},{"code":"#(partition \n (quot (count %1) %2) (apply interleave (partition %2 %1)))","problem":43,"user":"52655949e4b03e8d9a4a710b"},{"problem":43,"code":"(fn f43\n  [args times]\n  (let [size (/ (count args) times)]\n    (loop [n 0 result []]\n      (if (< n times)\n        (recur (inc n)\n               (conj result (let [x (fn\n                                         [sizes first-num times cols]\n                                         (loop [m 0 col []]\n                                           (if (< m sizes)\n                                             (recur (inc m) (conj col (nth cols (+ first-num (* m times)))))\n                                             col)))] (x size n times args))))\n        result)))\n  )","user":"5db658ebe4b010eb3c36cd39"},{"code":"(fn[x n]\r\n  (apply (partial map (fn[& s]s)) (partition n x)\r\n))","problem":43,"user":"4dd66da7535d2dad7130b5c8"},{"problem":43,"code":"(fn rinter [coll n] (partition-all (/ (count coll) n) (apply interleave (partition-all n coll))))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn unleave [s n]\n   (apply map list (partition n s)))","problem":43,"user":"4e89f46c535d3e98b8023288"},{"problem":43,"code":"(fn [coll n]\n  (letfn [(add [outs ins]\n               (map #(concat %1 [%2])\n                    outs\n                    ins))]\n    (loop [result\t\t(repeat n [])\n           curr-coll \tcoll]\n      (let [ins (take n curr-coll)]\n        (if (< (count ins) n)\n          result\n          (recur (add result ins)\n                 (drop n curr-coll)))))))","user":"5564cad5e4b0c656e3ff180f"},{"problem":43,"code":"(fn [m v]\n  (for [x (range v)]\n  (map #(nth % x) (partition v m))))","user":"534bfc71e4b084c2834f4a88"},{"problem":43,"code":"(fn rev-interleave [coll x & {:keys [start-index result]}] \n  (let [start (or start-index 0)\n        result (or result [])]\n    (if (< start x) \n      (rev-interleave coll x :start-index (inc start) :result (conj result (for [y (range start (count coll) x)] (nth coll y)) ))\n      result)\n    ))","user":"568d4742e4b0dcc4269f40c2"},{"problem":43,"code":"(fn [c n]\n  (for [x (range n)]\n    (take-nth n (drop x c))))","user":"5c56e264e4b0fb8c5ffd9a39"},{"code":"#(for [n (range %2)] (take-nth %2 (drop n %)))","problem":43,"user":"4dfd018c535d04ed9115e77f"},{"problem":43,"code":"(fn [x n]\n  (loop [i 1\n         r '()\n         v x]\n    (if (> i n)\n      (reverse r)\n      (recur (inc i) (conj r (take-nth n v)) (rest v))\n    )\n  )\n)","user":"55252392e4b0882d96d091cc"},{"problem":43,"code":"(fn [ seq1 numberOfSequences ]\n  (let [update (fn\n  ([m k f]\n   (assoc m k (f (get m k))))\n  ([m k f x]\n   (assoc m k (f (get m k) x)))\n  ([m k f x y]\n   (assoc m k (f (get m k) x y)))\n  ([m k f x y z]\n   (assoc m k (f (get m k) x y z)))\n  ([m k f x y z & more]\n   (assoc m k (apply f (get m k) x y z more))))\n]\n  (loop [ [ head & tail ] seq1, index 0, result []]\n    (if head \n      (recur tail (inc index) (update result (mod index numberOfSequences) #(conj (or % []) head) ))\n      result))))","user":"59f90e6ae4b0ca45a743a337"},{"code":"#(loop [n %2 v %1 o []]\n  (if (zero? n)\n     o\n     (recur (dec n) (next v) (conj o (take-nth %2 v)))\n  )\n)","problem":43,"user":"5176afd2e4b085adf681d889"},{"problem":43,"code":"(fn [coll n]\n  (apply (fn [& xs] (apply map vector xs)) (partition n coll)))","user":"53ae0c50e4b047364c044471"},{"code":"(fn [coll n] \n  (for [i (range n)] \n    (keep-indexed #(if (= i (mod %1 n)) %2) coll)))","problem":43,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":43,"code":"(fn [coll x] \n\t(apply map list (partition x coll)))","user":"54eea988e4b024c67c0cf875"},{"code":"(fn [coll n]\n  (loop [coll coll\n         i 0\n         acc (vec (repeat n []))]\n    (if (empty? coll) acc\n      (let [[h & r] coll\n            p (mod i n)]\n      (recur r (inc i) (assoc acc p (conj (acc p) h)))\n             ))))","problem":43,"user":"5081566ce4b0946d0443855b"},{"problem":43,"code":"#(map (partial remove nil?)\n       (apply map list (let [complete (fn [x n] (concat x (repeat (- n (count x)) nil)))\n                             part (partition-all %2 %1)]\n             (concat (butlast part) (list (complete (last part) %2))))))","user":"5605b5e9e4b08b23635d316e"},{"problem":43,"code":"(fn [sq n]\n           (letfn [(vassoc-in [m [k & ks] v]\n                   (if ks\n                     (assoc m k (vassoc-in (get m k []) ks v))\n                     (assoc m k v)))\n                 \n                   (aux [[head & tail] idx acc]\n                     (cond\n                      (nil? head)\n                      acc\n\n                      :else\n                      (recur tail (mod (inc idx) n)\n                             (vassoc-in acc [idx (count (get acc idx))] head))))]\n                 \n             (aux sq 0 (vec (repeat n [])))))","user":"57e6f90de4b0bfb2137f5af6"},{"code":"(fn [l n] (let [s (map-indexed (fn [idx itm] [idx itm]) l)]\n             (for [r (range n)]\n               (map second\n                    (filter #(= r (mod (first %) n)) s)))))","problem":43,"user":"5084cb7de4b0fb8f40674bfb"},{"code":"#(apply map (fn [& coll] (apply vector coll)) (partition %2 %1))","problem":43,"user":"4def301c535d08e6dec9fe12"},{"problem":43,"code":"#(let [p (/ (count %1) %2)] (partition p (apply interleave (partition %2 %1))))","user":"5a3c5c54e4b001c08efc0ce3"},{"code":"(fn [s N]\n  (sort-by first\n    (map\n      (fn [offset]\n        (filter #(= 0 (rem (+ % offset) N)) s))\n      (range N))))","problem":43,"user":"4ec56b5b535d6d7199dd369f"},{"problem":43,"code":";;; I like this solution:\n;;   #(apply map list (partition %2 %1))\n\n(fn reverse-interleave [xs n]\n (map #(take-nth n %) (take n (iterate rest xs)))\n )","user":"539f9f79e4b0ca733b97449e"},{"problem":43,"code":"(fn my-part [c n]\n  (loop [coll c result [] counter n]\n    (if (> counter 0)\n      (recur (rest coll) (conj result (take-nth n coll)) (dec counter))\n      result)))","user":"5546704be4b0a04f7929953d"},{"code":"#(loop [c %\n       i %2\n       a []]\n  (if (> i 0)\n    (recur (rest c) (- i 1) (conj a (take-nth %2 c)))\n    a))","problem":43,"user":"4ee63d8d535d93acb0a66859"},{"problem":43,"code":"(fn [xs n]\n  (reduce-kv (fn [rs k x]\n               (update-in rs [(mod k n)] (fnil conj []) x))\n             []\n             (vec xs)))","user":"583369e6e4b089d5ab817c9c"},{"code":"(fn [c n]\n  (let [cs (for [x (range n)] (drop x c))]\n    (map #(apply concat (partition 1 n %)) cs)))","problem":43,"user":"4fd11132e4b04c3a95aa0409"},{"problem":43,"code":"(fn reverse-interleave [l nb]\n  (partition (/ (count l) nb)  \n             (for [x (range nb) y (range (count l)) :when (= (mod y nb) x)]\n                                 (nth l y))))","user":"54651faee4b01be26fd746d6"},{"problem":43,"code":"(fn [coll n]\n      (for [i (range n)]\n        ;; (prn i)\n        (take-nth n (drop i coll))\n        )\n      ;; (reduce (partition n coll) [])\n\n      )","user":"58db48a5e4b0a4d5acaab679"},{"problem":43,"code":"(fn [coll nth] (for [x (range 0 nth)] (keep-indexed (fn [ind item] (if (= (mod ind nth) x) item nil)) coll)))","user":"5addadfce4b0837691e92c13"},{"code":"(fn revint \n  [s n] \n  (for [x (range n)]\n    (take-nth n (nthrest s x))))","problem":43,"user":"50982769e4b04e098a4c726a"},{"code":"(fn reverse-interleave [s n]\n  (apply map list (partition n s)))","problem":43,"user":"50763574e4b0a894bb95bf3d"},{"problem":43,"code":"(fn [my-list slices]\n  \t(for [i (range slices)] (take-nth slices (drop i my-list)))\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":43,"code":"(fn [data x]\n    (apply         (partial map (fn [& v] v))          (partition x data)))","user":"54c779bee4b045293a27f63b"},{"code":"(fn [l x]\n  (vals \n    (first\n      (reduce\n        (fn [[m i] y]\n          [(update-in m [(mod i x)] #(if (nil? %) [y] (conj % y))), (inc i)])\n        [(sorted-map) 0]\n        l))))","problem":43,"user":"4e7e05a6535db169f9c796fe"},{"problem":43,"code":"(fn [r n] (partition (quot (count r) n) (apply interleave (partition n r))))","user":"54edc818e4b024c67c0cf865"},{"problem":43,"code":"#(apply map list\n        ((fn my-chop [res l n] \n           (if (empty? l)\n             res\n             (recur \n               (conj res (take n l))\n               (drop n l)\n                n)))\n             [] %1 %2))\n;[] '(1 2 3 4 5 6 7 8) 3)))","user":"58566b42e4b0f14aab7c86f4"},{"code":"#_(fn [coll x]\n  (map #(map last %)\n       (vals (group-by #(mod (first %) x)\n                       (keep-indexed list coll)))))\n\n(fn [l n]\n  (let [p (partition n l)]\n    (map (fn [i] (map #(nth % i) p)) (range n))))","problem":43,"user":"4da8dd6e30acd6ed12482a68"},{"code":"#(apply map list (partition %2 %1))","problem":43,"user":"4ddbfb8a535d02782fcbea00"},{"problem":43,"code":"(fn [L PerList]\n    (let \n      [\n        get-nths (fn [N]\n          (loop [Ret '() Index N]\n            (if (>= Index (count L))\n              (reverse Ret)\n              (recur (conj Ret (nth L Index)) (+ Index PerList) )\n            )\n          )\n        )\n      ]\n      (loop [Ret '() Index 0]\n        (if (= PerList Index)\n          (reverse Ret)\n          (recur (conj Ret (get-nths Index) ) (inc Index))\n        ) \n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"#(partition-all (/ (count %) %2) (apply interleave (partition-all %2 %)))","problem":43,"user":"50b78ac9e4b0cf3e51c3046a"},{"problem":43,"code":"(fn [s n]\n   (let [part (partition n s)]\n     (for [x (range n)]\n       (map #(nth % x) part))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"(fn [z n] (letfn [(subtract-lists [l1 l2] (filter (fn [r] (not (some #(= r %) l2))) l1))                                                                                                                                              \n                          (create [l] (if-let [[h & t] (seq l)] (let [s (filter #(<= % (last l)) (take (count l) (iterate (partial + n) h)))]                                                                                                 \n                                                                  (lazy-seq (cons s (create (subtract-lists l s)))))))]                                                                                                                       \n                  (create z)))","problem":43,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn [coll n]\n  \t(reduce (fn [result input]\n\t\t\t(assoc result (first input) (conj (get result (first input)) (second input))))\n\t\t\t\t(vec (take n (repeatedly #(vec nil))))\n\t\t\t\t(map #(list %1 %2) (cycle (range n)) coll)))","problem":43,"user":"4e6a63fd535d8ccf87e9feda"},{"code":"(fn f [c n]\n  (if (empty? c)\n    (replicate n '())\n    (map cons (take n c) (f (drop n c) n))))","problem":43,"user":"4fb1325de4b081705acca276"},{"problem":43,"code":"(fn [coll n]\n   (map #(take-nth n (drop % coll)) (range n)))","user":"585c5b21e4b0f14aab7c8786"},{"problem":43,"code":"#(vals (group-by (fn [item] (+ 1 (mod item %2))) %1))","user":"60ac91c5e4b00e9e6653c485"},{"problem":43,"code":"(fn reverse-interleave [xs x]\n  (loop [result (repeat x []), xs-part xs]\n    (if (empty? xs-part)\n      result\n      (let [xs-group (take x xs-part), xs-rest (drop x xs-part)]\n        (recur (map conj result xs-group)  xs-rest)))))","user":"56602649e4b068f2fe63dc47"},{"code":"(fn [c n] (map #(map last %) (vals (group-by #(mod (first %) n) (vec (map-indexed (fn [idx i] [idx i]) c))))))","problem":43,"user":"4f0e4ebd535d0136e6c22322"},{"problem":43,"code":"(fn rintrlve [c n]\n  (let [step (fn [c i res]\n               (if-let [s (seq c)]\n                 (recur (rest s) (mod (inc i) n) (assoc res i (cons (first s) (nth res i))))\n                 res))]\n    ((comp reverse (partial into ()) (partial map reverse)) (step c 0 (apply vector (repeat n ()))))))","user":"5953bdb6e4b066ee0a44aeed"},{"code":"(fn [xs N]\r\n  (map\r\n    (fn [n](keep-indexed \r\n              (fn [i x] (when (= (- n 1) (mod i N)) x))\r\n              xs))\r\n    (range 1 (+ N 1))))","problem":43,"user":"4eeae8f0535d93acb0a668a2"},{"code":"#(let [every-nth (fn [s n i acc]\n                    (if (empty? s)\n                      (reverse acc)\n                      (if (= i 1)\n                        (recur (rest s) n n (cons (first s) acc))\n                        (recur (rest s) n (- i 1) acc))))\n        accum (fn [l i acc]\n                (if (= i 0)\n                  (reverse acc)\n                  (recur (rest l) (- i 1) (cons (every-nth l %2 1 '()) acc))))]\n    (if (empty? %1)\n      %1\n      (accum %1 %2 '())))","problem":43,"user":"4ff355a1e4b0678c553fc34d"},{"problem":43,"code":"(fn [isi jumlah]\n  (apply map list (partition jumlah isi)))","user":"5c32ea85e4b0d62ef62d9f3e"},{"problem":43,"code":"(fn my-rev-interleave\n  ([xs n] (my-rev-interleave xs n 0 (vec (repeat n []))))\n  ([[x & xs] n i out]\n     (let [next-i     (inc i)\n           next-i     (if (= next-i n) 0 next-i)\n           elem       (out i)\n           next-elem  (conj elem x)\n           next-out   (assoc out i next-elem)]\n       (if (nil? xs)\n         next-out\n         (recur xs n next-i next-out)))))","user":"53edb628e4b0d648e757f4c8"},{"code":"(fn\n  [coll n]\n  (lazy-seq\n    (loop [a []\n           i n\n           coll coll]\n          (if (= 0 i)\n              a\n              (recur (conj a (take-nth n coll)) (- i 1) (rest coll))))))","problem":43,"user":"52dfc89be4b09f7907dd1405"},{"problem":43,"code":"(fn\n  [arr, n]\n  ((fn\n    [res, arr, counter]\n    (if (empty? arr)\n      res\n      (recur\n        (assoc\n          res\n          counter\n          (conj\n            (nth res counter)\n            (first arr)))\n        (rest arr)\n        (if (>= (inc counter) n)\n          0\n          (inc counter)))))\n  (vec (take n (repeat (vector))))\n  arr\n  0))","user":"555f4bade4b0a2eb076a39c2"},{"code":"(fn fc [s n] (loop [ret (repeat n ()) src (seq s)] (if (< (count src) n) (map reverse ret)  (recur (map cons (take n src) ret )  (drop n src) ) )))","problem":43,"user":"50b81a93e4b0cba0e598b64b"},{"code":"(fn foo\n  ([coll n] (foo coll n n))\n  ([coll n times]\n    (if (zero? times)\n      '()\n      (cons (take-nth n coll) (foo (rest coll) n (- times 1))))))","problem":43,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"problem":43,"code":"(fn [coll n]\n  (map #(take-nth\n         n\n         (drop % coll))\n       (range n)))","user":"58ebae90e4b056aecfd47d44"},{"code":"(fn reverse-interleave [coll n]\n  (map #(apply concat (partition 1 n (drop % coll))) (range n)))","problem":43,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":43,"code":"(fn reverse-interleave [a b]\n  (loop\n    [coll a\n     skip b\n     n (count coll)\n     res ()]\n  (if(= n (count (flatten res)))\n    (reverse res)\n    (recur (next coll) skip n (conj res (take-nth skip coll) ))))\n  )","user":"5826a843e4b051871117befd"},{"code":"(fn [s n]\n  (loop [accs (repeat n [])\n    rems s]\n    (if (empty? rems) accs\n      (recur (map conj accs (take n rems)) (drop n rems)))))","problem":43,"user":"504e14c2e4b078edc5f593bf"},{"problem":43,"code":"(fn eh [x n]\n  (letfn [(sublist [x n cur res]\n            (cond\n             (empty? x) '()\n             (= (mod cur n) res) (cons (first x)\n                                       (sublist (rest x) n (+ cur 1) res))\n             :else (sublist (rest x) n (+ cur 1) res)))\n          (genlst [x n cur]\n            (if (= n cur)\n              '()\n              (cons (sublist x n 0 cur)\n                    (genlst x n (+ 1 cur)))))]\n    (genlst x n 0)))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":43,"code":"(fn [seqq i]\n  (loop [total () j 0]\n    (if (= j i)\n      total\n      (recur \n        (concat total [(filter #(zero? (mod (+ (- i j) (.indexOf seqq %)) i)) seqq)])\n        (+ j 1)\n      )\n    )\n  )\n)","user":"5b4b58f2e4b02d533a91bc9c"},{"problem":43,"code":"(fn [coll n] (\n               map (fn [m](map last (val m))) \n                   (group-by (fn [e] (rem (first e) n)) \n                             (map-indexed vector coll))\n               ))","user":"546280d8e4b01be26fd746b0"},{"problem":43,"code":"(fn [seq counter]\n               (partition (/ (count seq) counter) (apply interleave (partition counter seq)))\n               )","user":"5658b9bde4b00d315579610e"},{"problem":43,"code":"(fn [xs n]\n  (map\n  \t#(take-nth n (drop % xs))\n   \t(range n)\n  )\n)","user":"516ee939e4b06aac486e5b34"},{"problem":43,"code":"(fn [a b]\n   (partition-all (/ (count a) b) (apply interleave (partition-all b a))))","user":"5c73a944e4b0fca0c16227b8"},{"code":"(fn [ins n]\n  (loop [res (vec (take n (repeat [])))  \n         s ins]\n    (if (empty? s)\n      res\n      (recur\n       (conj\n        (subvec res 1)\n        (conj (first res) (first s)))\n       (rest s)))))","problem":43,"user":"504e90bae4b069badc5a33b8"},{"problem":43,"code":"#(reduce (fn [acc, n] (conj acc (flatten (partition 1 %2 (drop n %))))) [] (range %2))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn [coll n]\n  (let [\n        segment (fn [coll n start]\n        (loop [xs coll result (list) i start]\n\t\t    (if (get xs i)\n\t\t\t  (recur xs (cons (get xs i) result) (+ i n))\n\t\t\t  result)))\t\n\t\tstart-nums (range n)\n\t\tlst (reduce #(cons (reverse (segment (vec coll) n %2)) %) (list) start-nums)\n  ] \n  (reverse lst)))","problem":43,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [iseq num]\n   (for [keep (range num)]\n     (for [y (range (count iseq))\n           :when (= (mod y num) keep)]\n       (nth iseq y))\n     )\n   )","problem":43,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [s n]\n  (map #(take-nth n (nthrest s %)) (range n)))","problem":43,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":43,"code":"(fn uninterleave [col n]\n  (for [i (range n)]\n    (take-nth n (drop i col))))","user":"572010a4e4b0c5bde472c08c"},{"code":"#(for [x (range %2)] (for [y (range x (count %) %2)] (nth % y)))","problem":43,"user":"4e9c3648535dbda64a6f6b7d"},{"code":"(fn [as n]\r\n   (loop [as as i 0 acc (vec (repeat n '()))]\r\n     (if (nil? (seq as))\r\n       (map reverse acc)\r\n       (let [[a & as] as\r\n             id (rem i n)]\r\n         (recur as (inc i) (assoc acc id (conj (acc id) a)))))))","problem":43,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":43,"code":"(fn maptest [coll n] \n  (map (fn [x] (map second x)) \n       (map (fn [x] (second x)) \n            (seq (group-by first (map-indexed (fn [idx itm] [(mod idx n) itm]) coll))))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":43,"code":"#(for [i (range %2)\n       :let [s (take-nth %2 (drop i %1))]] \n   s)","user":"56baa68ce4b0f26550335947"},{"problem":43,"code":"(fn [s n]\n  (for [x (range n)]\n    (take-nth n (drop x s))\n    )\n  )","user":"56f73913e4b08e7d20b9682d"},{"problem":43,"code":"(fn rev-intervleave\n  [s n]\n  (->> s\n       (group-by #(mod % n))\n       (map val)))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn rev-interleave [iseq sets-count]\n  (loop [xs iseq acc [] count 1]\n    (if (> count sets-count)\n      acc\n      (recur (concat (rest xs) [(first xs)]) (conj acc (take-nth sets-count xs)) (+ count 1)))))","problem":43,"user":"4f046d70535dcb61093f6bc5"},{"problem":43,"code":"(fn deinterleave [coll x]\n  (for [i (range x)] (take-nth x (drop i coll))))","user":"58eba5cce4b056aecfd47d41"},{"code":"; Original kludge, with unnecessary structural manip everywhere\n;#(partition \n;  (quot (count %) %2)\n;  (apply (partial mapcat list) (partition %2 %)))\n\n; the kernel was in that last line:\n#(apply map list (partition %2 %))","problem":43,"user":"50d4c626e4b09cc622d65a70"},{"code":"(fn [coll n] \n  (for [i (range n)] (take-nth n (nthnext coll i))))","problem":43,"user":"4fc67081e4b0ee37620e1813"},{"code":"(fn [s n]\n  (loop [i 0 acc []]\n    (if (= n i)\n     acc\n     (recur\n       (inc i)\n       (conj acc \n             (apply concat \n               (partition 1 n (drop i s))))))))","problem":43,"user":"4ed188c8535d44c135fd68cf"},{"problem":43,"code":"(fn [l x]\n  (->> \n   (range 0 x)\n   (map #(loop [i 0\n                result []\n                remaining l]\n           (cond (empty? remaining) result\n                 (= % (mod i x)) (recur (inc i) (conj result (first remaining)) (rest remaining))\n                 :else (recur (inc i) result (rest remaining)))))))","user":"5d439775e4b07c84aa5ae696"},{"code":"(fn f [s n]\n  (map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"5025b93ce4b0c969f0b056df"},{"code":"#(for [r (range %2)] (take-nth %2 (drop r %)))","problem":43,"user":"4dada913c9a9d6ed2d99dc57"},{"problem":43,"code":"(fn [coll n]\n  (vals \n   (group-by #(rem % n) coll)))","user":"5ed52854e4b016b56eae05d2"},{"problem":43,"code":"(fn \n  [coll n] \n  (map (partial map last) \n       (vals (group-by first \n                       (sort (map (fn [i e] [(rem i n) i e]) \n                                  (iterate inc 0) coll))))))","user":"518ba795e4b0f028e99addf0"},{"code":";(fn [coll step]\n;  (partition (/ (count coll) step) \n;             (apply interleave (partition step coll))))\n#(apply map list (partition %2 %))","problem":43,"user":"528b01a0e4b0239c8a67ae89"},{"problem":43,"code":"(fn [coll n]\n    (map (fn [buckets] (map #(last %) buckets))\n         (vals (group-by (fn [x] (mod (first x) n)) (map-indexed vector coll))))\n)","user":"5aa998c6e4b0d174b936c8e5"},{"code":"(fn [coll n]\n   (->> coll\n      (map list)\n      (partition n)\n      (apply map concat)))","problem":43,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":43,"code":"(fn [coll numGroups]\n  (map\n    (fn [offset] (take-nth numGroups (drop offset coll))) \n    (range numGroups)))","user":"56c23ca6e4b05cc29241ee7f"},{"problem":43,"code":"(fn rev-inter [s num-inter]\n  \n  (loop [result [] cur-num 0]\n    \n    (if (= cur-num num-inter)\n      result\n      \n      \n      \t; Build up a vector of the right nums\n    \t; Done using cur-num + num-inter * x until nil\n      \n      (recur (conj result\n                   \n                     ; Gotta loop through \n                     ; Start w/ the first part\n                   (loop [result [] sub-num cur-num]\n                     \n                     (if (nth s sub-num false)\n                       \n                       (recur (conj result (nth s sub-num)) (+ sub-num num-inter)) ; recur end\n                       \n                       result\n                       \n                         ) ; if end\n                     \n                     \n                       ) ; loop end\n                   \n                   \n                 ) ; conj end\n             \n             (inc cur-num)\n      \t) ; recur end\n      \n      ) ; if end\n    \n    \n    \n  \t) ; loop end\n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [c m] (let [n (/ (count c) m)] (partition n (apply interleave (partition m c)))))","problem":43,"user":"51cfc616e4b0e42293a22578"},{"problem":43,"code":"(fn [coll num-seqs]\n  (let [seq-indices (for [x (range 0 num-seqs)]\n                    (set (range x (count coll) num-seqs)))]\n    (for [seq-index seq-indices]\n      (keep-indexed #(if (seq-index %1) %2) coll))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":43,"code":"(fn\n  [coll n]\n  (let [dest (into [] (->> (range n) (map (fn [_] []))))\n        in-which-array (map #(mod % n) (range (count coll)))\n        merged (mapv #(-> [%1 %2]) coll in-which-array)\n        add-at-position (fn [acc ind val]\n          (assoc acc ind (conj (nth acc ind) val)))]\n  (reduce (fn [acc [val ind]]\n      (add-at-position acc ind val)) dest merged)))","user":"56375106e4b0bfe05bf117d3"},{"problem":43,"code":"(fn [coll n]\n  (map\n    #(map second %)\n    (vals\n      (group-by \n        first\n        (map #(list %1 %2) (cycle (range n)) coll)\n      )\n    )\n  )\n)","user":"59021fede4b0438e51c2d04d"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (map\n    (fn [partition]\n      (keep-indexed\n        (fn [i x] (when (= partition (mod i n)) x))\n        coll))\n    (range n)))","user":"6098263be4b00e9e6653c3f9"},{"problem":43,"code":"(fn [coll x]\n    (loop [in coll cnt x acc []]\n       (if (= 0 cnt)\n            acc\n          (recur (rest in) (dec cnt) (conj acc (take-nth x in ))) ; recur\n         );if\n      );loop\n ) ;fn","user":"560768a0e4b08b23635d317f"},{"code":"(fn [x y] (apply map (fn [& r] r)\n           (partition y x)\n           )\n  )","problem":43,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [l sf] (letfn [(assemb [as] (loop [k (reverse (sort (keys as))) result '()] (if (empty? k) result (recur (rest k) (cons (as (first k)) result)))))] (assemb(loop [ll l p 0 result {}](if (empty? ll) result (recur (rest ll) (inc p) (assoc result (str (rem p sf)) (concat (result (str (rem p sf)))(list(first ll))))))))))","problem":43,"user":"510931ede4b0c71f76895663"},{"code":"(fn [c n] (map #(keep-indexed (fn [i v] (if (= (mod i n) %) v)) c) (range n)))","problem":43,"user":"51b1ef95e4b02f8f128bb95e"},{"code":"#(let [f (fn[x](mod (+ x (first %)) %2))] (partition-by f (sort-by f %)))","problem":43,"user":"4db13ff51254ad5b4805fa68"},{"problem":43,"code":"(fn [coll n]\n  (->>\n    coll\n    (map-indexed (fn [i e] [i e]))\n    (reduce\n      (fn [v [i e]]\n        (let [idx (mod i n)]\n          (if (get v idx)\n            (update-in v [idx] conj e)\n            (assoc v idx (list e)))))\n      [])\n    (map reverse)))","user":"58bc0531e4b0888cdc949d07"},{"problem":43,"code":"(fn [lst n] (vals (group-by #(mod %1 n) lst)))","user":"56367c51e4b0bfe05bf117cd"},{"problem":43,"code":"(fn [xs n] \n  (map \n   (fn [lst] \n     (map \n      (fn [pair] (last pair)) \n      lst))\n   (vals (group-by #(first %) \n                  (map-indexed #(list (mod %1 n) %2) xs) ))))","user":"56b86e64e4b0f26550335924"},{"code":"(fn [coll n]\n   (apply map list (partition n coll)))","problem":43,"user":"504f44cfe4b0a02f9cffde65"},{"problem":43,"code":"(fn [xs n] (map-indexed #(apply concat (partition 1 n (drop % %2))) (repeat n xs)))","user":"53e9a15be4b036ad0777e4ae"},{"code":"#(map (partial take-nth %2) (take %2 (iterate rest %1)))","problem":43,"user":"4e58c019535d8a8b8723a297"},{"code":"#(apply map (fn [& coll] coll) (partition %2 %))","problem":43,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn [col n] (map #(take-nth n (drop % col)) (range n)))","problem":43,"user":"4db88b37535d1e037afb2199"},{"problem":43,"code":"(fn rev-int\n   ([xs n] (rev-int [] xs n 0))\n   ([res xs n m] (if (< m n)\n                   (let [] (recur (conj res (take-nth n xs)) (rest xs) n (inc m)))\n                   (seq res))))","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":43,"code":"(fn [coll n]\n  (loop [x n result [] c coll]\n    (if (> x 0)\n      (recur (dec x) (conj result (take-nth n c)) (rest c))\n      result)))","user":"5405ae2be4b0addc1aec6671"},{"problem":43,"code":"(fn [sq step] (map (fn [ctr] (map #(nth % ctr) (partition step sq))) (range step)))","user":"5d7a748ce4b02e6b30c93547"},{"code":"(fn [col n]\r\n  (loop [col col, acc (repeat n [])]\r\n    (if (seq col)\r\n      (let [vals (take n col)]\r\n        (recur (drop n col)\r\n              ; It was a true moment of Zen\r\n              ; when I suddenly realized I\r\n              ; could use map this way (:\r\n               (map #(conj %1 %2)\r\n                    acc\r\n                    vals)))\r\n         acc)))","problem":43,"user":"4dbb1126535d1e037afb21b3"},{"problem":43,"code":"#(for [i (range %2)] (keep-indexed (fn [ind item]\n                                      (if (== i (mod ind %2)) item)) %))","user":"5831846ae4b051871117c02c"},{"code":"(fn reverse-interleave ([c n] (reverse-interleave c n [] 0))\n   ([c n r i]\n     (if (seq c)\n       (recur (rest c) n (assoc r i (conj (nth r i []) (first c))) (mod (inc i) n))\n       r)))","problem":43,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [coll n]\n    (for [x (range n)] \n      (keep-indexed #(if (= (mod %1 n) x)\n                         %2)\n                    coll)))","problem":43,"user":"500900dee4b0144d4f561e42"},{"problem":43,"code":"(fn [xs dist]\n  (let [s (partial nthnext xs)]\n    (for [n (range dist)]\n      (take-nth dist (s n)))))","user":"55297a7ae4b0ffed3738f94b"},{"problem":43,"code":"(fn ff [x n] (\n              let [takenth (fn tt [l n] (if (empty? l) nil (concat (list (first l)) (tt (drop n l) n))))\n                   ffn (fn ff [l n i] (if (= n i) nil (concat (list (takenth (drop i l) n)) (ff l n (+ 1 i)))))]\n              (ffn x n 0)))","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn inverse [in, step] \n   (for [x (range 0 step)] \n     ((fn firstNth [in, step] \n        (if (seq in) (concat [(first (drop x in))] (firstNth (drop step in) step)) [])) in step)))","problem":43,"user":"52154514e4b02f6d8ea676c0"},{"problem":43,"code":"(fn [xs period]\n  (let [index-range (range period)]\n    (loop [lists (vec (map (fn [x] '()) index-range))\n           [hd & tl :as elems] (map vector xs (cycle index-range))]\n      (if (empty? elems)\n        (map reverse lists)\n        (let [[elem index & _] hd]\n          (recur (assoc lists index (conj (lists index) elem))\n                 tl))))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":43,"code":"(fn p[coll n]\n  (map #(for [x (partition n coll)] (nth x %)) (range n)))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn this [ls n]\n  (let [ls-idx (map vector ls (range))]\n    (map (fn [i]\n           (map #(% 0) (filter #(= i (mod (% 1) n)) ls-idx))) (range n))))","problem":43,"user":"5390952be4b0b51d73faae9c"},{"problem":43,"code":"(fn r\n  ([xs x] (r xs x 0))\n  ([xs x n] (if (< n x) (concat [((fn p [xs x n]\n  (map #(nth xs %) (take (/ (count xs) x) (iterate #(+ x %) n)))\n) xs x n)] (r xs x (inc n))))))","user":"54ab502fe4b09f271ff37cc4"},{"code":"(fn reverseInterleave [xlis nnum]\r\n\r\n(let [mygenllis (fn [lis nume]\r\n      (loop [llista '()\r\n\t           conta 0]\r\n\t       (if (>= conta nume)\r\n\t\t   (reverse llista)\r\n\t\t   (recur (cons (take (count lis) (drop conta (cycle lis))) llista) (inc conta)))))\r\n\t\t   ]\r\n\t\t   \r\n \r\n\t(map #(take-nth nnum %) (mygenllis xlis nnum))\r\n\t\r\n\t))","problem":43,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition n (seq coll))))\n)","problem":43,"user":"52b2a819e4b0c58976d9acf1"},{"code":"(fn [xs n] (map #(take-nth n %) (map #(nthnext xs %) (range n))))","problem":43,"user":"52741177e4b03e8d9a4a749b"},{"problem":43,"code":"(fn [ss n]\n  (apply map list (partition n ss)))","user":"5290257ae4b0239c8a67af03"},{"code":"(fn [a n]\n  (map (partial take-nth n)\n       (take n (iterate rest a))))","problem":43,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [l n] (partition (/ (count l) n) (apply interleave (partition n l))))","problem":43,"user":"4e71705e535d5021c1a89649"},{"code":"(fn revintl [c n]\n    (vals (group-by #(mod % n) c)))","problem":43,"user":"4ff4c9dae4b0678c553fc360"},{"problem":43,"code":"(fn [x y]\n    (let [howmany (count x)]\n      (map #(take-nth y (take-last (- howmany %) x)) (range y))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":43,"code":"(fn [s n]\n   (let [p (partition n s)]\n     (for [i (range n)]\n       (map #(nth % i) p))\n     ))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":43,"code":"(fn [coll n]\n   (loop [input coll i 0 output []]\n     (if (empty? input)\n       output\n       (if (= i (dec n))\n         (recur (rest input) 0 (assoc output i (conj (nth output i []) (first input))))\n         (recur (rest input) (inc i) (assoc output i (conj (nth output i []) (first input))))\n       )\n     )\n   )\n )","user":"53beacf9e4b0d9a98559a6e3"},{"code":"#(partition (/ (count %1) %2)\n            (apply interleave (partition %2 %1)))","problem":43,"user":"4fa6d532e4b081705acca1be"},{"problem":43,"code":"(fn [coll n]\n  (reduce #(map conj % %2)\n          (take n (repeat []))\n          (partition n coll)))","user":"552a793ee4b0ffed3738f955"},{"code":"(fn recu [s n]\n  (partition (/ (count s) n) (loop [c 1\n         result (take-nth n s)]\n    (if (= c n) result\n      (recur (inc c) (concat result (take-nth n (drop c s))))))\n  ))","problem":43,"user":"53973e7be4b0b51d73faaee6"},{"problem":43,"code":"(fn [x y] (for [i (range y)] (take-nth y (drop i x))))","user":"56a1b854e4b0542e1f8d14b2"},{"problem":43,"code":"(fn intReverse [x y] \n  (apply map vector (partition y x)))","user":"5630a51de4b0bfe05bf11781"},{"problem":43,"code":"(fn rev-inter [c n] \n  (loop [e c\n         out (vec (repeat n []))\n         i 1]\n    (if e\n      (recur \n       (next e) \n       (update-in out \n                  [(mod i n)] \n                  (fn [v] (conj v (first e))))\n       (if (= n i) 1 (inc i))\n       )\n      (sort-by first (into '() out)))))","user":"523578efe4b0a643f2dcb74c"},{"problem":43,"code":"(fn [x y]\n  (apply map vector (partition y x)))","user":"582c986ee4b051871117bf9b"},{"problem":43,"code":"(fn reverseInterleave [x n] (loop [output '() index 0] (if (>= index n) (reverse output) (recur (list* (loop [cur '() i index] (if (>= i (count x)) (reverse cur) (recur (list* (nth x i) cur) (+ n i)))) output) (+ 1 index)))))","user":"5924009ce4b072a2710fce45"},{"code":"(fn [coll num]\n  (loop [rv '(), c coll, n num]\n    (if (zero? n)\n      (reverse rv)\n      (recur (conj rv (take-nth num (drop (- num n) coll))) coll (dec n))\n    )\n  )\n)","problem":43,"user":"5229211be4b04c906c9c6a63"},{"problem":43,"code":"(fn [xs n]\n  (map\n   (fn [i]\n     (map #(nth % i) (partition n xs)))\n   (range n)))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":43,"code":"#(apply (partial map list) (partition %2 %2 nil %))","user":"548cd637e4b0e286459a1210"},{"code":"(fn  [coll n]\n  (map (fn [x] (map second x)) (map second (group-by first (map vector (flatten (repeatedly #(range 0 n))) coll ) ))))","problem":43,"user":"4e6e7018535d5021c1a8960b"},{"problem":43,"code":"(fn [in n]\n  \n  (loop [i in\n         j 0\n         accum  (vec (repeat n []))]\n    (if (empty? i) accum\n      (recur (rest i) (mod (inc j) n) (assoc accum j (conj (accum j) (first i))))))\n  \n  \n  \n  )","user":"54903056e4b0b312c081ff2e"},{"problem":43,"code":"(fn f [arglist argnumber]\n  (->> arglist\n      (map-indexed vector)\n      (group-by #(mod (first %) argnumber))\n      (vals)\n      (map #(map last %))\n  )\n  \n)","user":"5bc2df19e4b07a9b28b10038"},{"problem":43,"code":"(fn [ c n ] (apply map list (partition-all n c)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"#(apply (partial map list)\r\n       ((fn splitter [n l]\r\n          (if (< (count l) n)\r\n            nil\r\n            (let [z (split-at n l)]\r\n              (cons (first z) (splitter n (second z)))))) %2 %1))","problem":43,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":43,"code":"(fn check [x n & [y z origX i]]\n   (if (= origX nil)\n     (do (check x n y z x n))\n     (do \n       (if (= 0 i)\n         (do z)\n         (if (= (last x) nil)\n\n           (do (check origX n nil (conj z y) origX (- i 1)))\n           (do \n             \n             (do (if (=  (mod (count x) n) (if (= i n) (do 0) (do i)))\n\n                   (do (check (butlast x) n (conj y (last x)) z origX i))\n                   (do (check (butlast x) n y z origX i))\n\n                   ))))\n         )))\n )","user":"580014d7e4b0a837a8b30c32"},{"code":"#(map (fn [m] (keep-indexed \n        (fn [i v] (when (= m (mod i %2))\n                v)) %)) (range %2))","problem":43,"user":"4f567cdbe4b0a7574ea71824"},{"code":"; The \"apply map list\" is straight out of the Clojure docs\n; for the \"apply\" function.\n\n(fn [xs n]\n  (apply map list (partition n xs)))","problem":43,"user":"4eed26af535d93acb0a668bb"},{"problem":43,"code":"(fn [in x]\n  (let [c (/ (count in) x)]\n    (partition c (apply interleave (partition x in)))))","user":"5489dd4de4b0e286459a11ef"},{"problem":43,"code":"(fn part [col n]\n  (map #(range % (+ % (* n (/ (count col) n))) n)\n       (range (first col) (+ (first col) n))))","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn revInter [li n] ( reduce (fn [li2 x] (conj li2 ((fn keepnth   \n  ([li n]( keepnth li 1 n ) ) \n  ([li c n] (if (empty? li) \n    '() \n    ( if (== c n)\n      (conj \n        (keepnth (rest li) 1 n ) \n        (first li) ) \n      (keepnth (rest li) (+ c 1) n) \n       ) ) ) ) li x n) )) '() (range 1  (+ n 1) )))","problem":43,"user":"4e8d5edd535d65386fec2134"},{"problem":43,"code":"(fn [coll piece]\n  (apply (partial map vector) (partition piece coll)))","user":"5f238a59e4b0f565ad99828d"},{"code":"(fn f \n  [xs t]\n  (map #(vals (into {} %1))\n       (vals (group-by #(mod (first %1) t) (apply hash-map (interleave (range (count xs)) xs))))))","problem":43,"user":"50aa60bee4b056ee01935865"},{"problem":43,"code":"(fn reverse-interleave [s i] \n\t(map #(flatten (map (fn[x] (rest x)) %)) (vals (group-by #(rem (inc (first %)) i) (map-indexed vector s))))\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":43,"code":"(fn [xs n]\n  (->>\n    (for [y (range n) x (partition n xs)] (nth x y))\n    (partition (/ (count xs) n))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":43,"code":"(fn reverse-interleave [coll partitions]\n  (apply map (fn [& items] (concat items)) (partition partitions coll)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":43,"code":"(fn reverse-interleave [lst n]\n  (if (empty? lst)\n      nil\n      (let [fst (first lst)\n            grp (filter #(zero? (mod (- % fst) n)) lst)]\n        (cons grp (reverse-interleave (remove (set grp) lst) n)))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":43,"code":"(fn[s, x] (apply map list (partition x s)))","user":"57d1a0e6e4b0bd073c20236d"},{"code":"(fn ri[s n]\n    (map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4e842ebb535db62dc21a62df"},{"problem":43,"code":"(fn [coll num] (loop [acc 0 result []] (if (> acc num) (distinct result) (recur (inc acc) (conj result (take-nth num (drop (dec acc) coll)))))))","user":"5e5c425ae4b0fd0acd158662"},{"code":"(fn [coll n]\r\n   (apply map list (partition n coll)))","problem":43,"user":"50ab44b2e4b0f65d68208509"},{"problem":43,"code":"(fn [items x] (vals (group-by #(mod % x) items)))","user":"57f8ba80e4b0d3187e90092f"},{"problem":43,"code":"(fn p43 [l n]\n  (let [m (count l)]\n    (partition (/ m n) (apply interleave (partition n l)))))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":43,"code":"#((fn rin [lst]\n    ((fn hlpr [re res]\n      (if (empty? (first re)) res\n        (hlpr (map rest re) (concat res [(map first re)]))))\n    \t lst [])) (partition %2 %1))","user":"53e2b212e4b036ad0777e3f4"},{"problem":43,"code":"(fn [xs n]\n  (let [ys (partition n xs)  ]\n  (for [i (range n)]\n    (map #(nth % i) ys))\n  )\n  )","user":"598588f2e4b021a7a535fe65"},{"code":"(fn [sequence number-sub-seqs]\n  (loop [ctr (dec number-sub-seqs), acc ()]\n    (if (< ctr 0)\n      acc\n      (let [sub-seq (take-nth number-sub-seqs (drop ctr sequence))]\n        (recur (dec ctr) (conj acc sub-seq))))))","problem":43,"user":"4ea4fe1f535d7eef308072cf"},{"code":"(fn [xs x]\n  (partition (/ (count xs) x) \n    (apply interleave (partition x xs))))","problem":43,"user":"509eeb3be4b08df8156e9e37"},{"code":"(fn [s n] \n  (apply map list (partition n s)))","problem":43,"user":"50431cbce4b034ff00315d1c"},{"problem":43,"code":"(fn [s n]\n  (for [a (range n)]\n    (map #(nth % a) (partition n s))))","user":"54dd76c8e4b024c67c0cf794"},{"problem":43,"code":"(fn rev-interleave [xs n]\n  (let [current (map list (take n xs)) remaining (drop n xs)]\n   (if (empty? remaining)\n     current                       \n     (map concat current (rev-interleave remaining n)))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":43,"code":"(fn revinter [alist divi]\n  (for [i (range divi)]\n    (->>\n     (filter #(= i (rem % divi)) (range (count alist)))\n     (map #(nth alist %)))))","user":"5705e404e4b0b0fb43fd0676"},{"code":"(fn reverse-interleave \n  [l n] \n  (let [buckets (take n (repeat '()))\n        ri (fn [acc l]\n             (if (empty? l) (map reverse acc)\n               (recur \n                (concat (rest acc) (list (conj (first acc) (first l))))\n                (rest l))))]\n    (ri buckets l)))","problem":43,"user":"5273e006e4b03e8d9a4a7495"},{"problem":43,"code":"(fn my_anti-interleave [l n] (if l (map conj (my_anti-interleave (seq (drop n l)) n) (take n l)) (repeat n ())))","user":"567b39b6e4b05957ce8c61a3"},{"problem":43,"code":"(fn [coll n]\n  (let [insert-at\n        (fn [coll n e]\n          (let [[x [y & ys]] (split-at n coll)]\n            (concat x (list (concat y (list e))) ys)))\n        index-of\n        (fn [[x & xs] e acc]\n          (if (empty? xs)\n            -1\n            (if (= e x)\n              acc\n              (recur xs e (inc acc)))))]\n    (reduce (fn [acc e]\n              (insert-at acc (mod (index-of coll e 0) n) e)) (repeat (dec n) nil) coll)))","user":"58a953dae4b01a0c0b232968"},{"code":"(fn reverse-interleave [coll n]                                                                                                              \r\n    (apply map list (partition n coll)))","problem":43,"user":"4f149e0f535d64f60314643d"},{"problem":43,"code":"(fn my-reverse-interleave [vs n]\n  (loop [[x & rxs :as xs] vs\n         i 1\n         m (sorted-map)]\n    (if (empty? xs)\n      (vals m)\n      (recur rxs (if (< i n) (inc i) 1) (if (nil? (m i))\n                             \t\t\t  (assoc m i (vector x))\n                             \t\t\t  (assoc m i (conj (m i) x)))))))","user":"54a31fdae4b09f271ff37c64"},{"problem":43,"code":"(fn [acc se n]\n  (loop [acc acc se se n n con n]\n    (if (= con 0)\n      acc\n      (do\n        (let [sel (keep-indexed\n                    #(if (or (= %1 0) (= (mod %1 n) 0)) %2 nil) se)]\n        (recur (concat acc (cons sel '())) (rest se) n (dec con))))))) '()","user":"53214efbe4b09d4e7a9b54b2"},{"code":"#(for [i (range %2)]\n   (take-nth %2 (drop i %1)))","problem":43,"user":"4e68be01535d8ccf87e9fe88"},{"problem":43,"code":"(fn reverse-interleave\n  [coll subseq-number]\n  (let [c (partition subseq-number coll)]\n    (loop [n 0 result []] \n      (if (= n subseq-number)\n        result\n        (recur (inc n) (conj result (map #(nth % n) c)) )))))","user":"5564709ee4b0c656e3ff1807"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (map (fn [partition-index]\n         (keep-indexed (fn [index item]\n                         (if (zero? (mod (+ partition-index index) n))\n                           item)) coll))\n       (list* 0 (reverse (rest (range n))))))","user":"54a96a15e4b09f271ff37cad"},{"problem":43,"code":"(fn [s c]\n  (let [n (+ 1 (/ (count s) c))\n        f (rest (take n\n                      (iterate #(list (take c (second %))\n                                      (drop c (second %)))\n                               (list [] s))))]\n    (map flatten\n         (apply map list\n                (map #(map list %)\n                     (map first f))))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":43,"code":"(fn [coll n]\n   (loop [coll coll\n          i 0\n          buckets (vec (repeat n (vector)))]\n     (if coll\n       (recur (next coll)\n              (mod (inc i) n)\n              (assoc buckets i (conj (nth buckets i) (first coll))))\n       buckets)))","user":"5712854ce4b07c98581c3a89"},{"problem":43,"code":"(fn [col n]\n  (map (fn [x]\n         (keep-indexed (fn [idx item] (if (= (mod idx n) x) item)) col))\n   (range n)))","user":"571e5c9ee4b0145328a76290"},{"code":"(fn [x y](map #(take-nth y (drop % x)) (range y)))","problem":43,"user":"52bbd09ee4b07a9af57922ee"},{"problem":43,"code":"(fn r-interleave [s x]\n  (letfn \n    [(ilv [s x]\n      (if (empty? s) s\n        (let [take-rest (split-at x s)]\n          (cons (first take-rest) (ilv (second take-rest) x)))))]\n    (map first (apply map #(list %&) (ilv s x)))))","user":"53ff8c31e4b0de5c41848603"},{"problem":43,"code":"(fn [coll n]\n  (->> (range n)\n       (map #(drop % coll))\n       (map #(take-nth n %))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"#(for [x (range %2)] \n   (keep-indexed (fn [i v] (if (= x (mod i %2)) v)) \n                 %))","problem":43,"user":"4ee7d177535d93acb0a6686f"},{"code":"(fn [l k] (map #(->> l (drop %) (take-nth k)) (range k)))","problem":43,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn [s n]\n  (loop [res (vec (repeat n []))\n         k   0\n         [h & t] s]\n    (if h\n      (recur (assoc res k (conj (res k) h))\n             (mod (inc k) n)\n             t)\n      (map #(apply list %) res))))","problem":43,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":43,"code":"(fn [v n]\n  (apply map vector (partition n v))\n  )","user":"57f28b22e4b0511f1d294def"},{"problem":43,"code":"(fn\n [xs n]\n (loop [i xs j (repeat n ())]\n   (if (empty? i)\n     (map #(reverse %1) j)\n     (recur (nthrest i n) (map-indexed #(cons (nth i %1) %2) j)))))","user":"51071f2ee4b05b2b4eee748e"},{"problem":43,"code":"#(let [c (count %)] (sort-by first (partition (/ c %2) (sort-by (fn[x] (mod x %2)) %))))","user":"5b210749e4b03cfeda66ed48"},{"problem":43,"code":"(fn [xs n] (apply map list (partition n xs) ))","user":"54453f83e4b032a45b86939a"},{"problem":43,"code":"(fn [s n]\n  (for [x (range n)]\n    (take-nth n (drop x s))))","user":"52761edae4b03e8d9a4a74d4"},{"problem":43,"code":"(fn rev-interleave [xs n]\n        (let [indexed-seq (map #(vector %1 %2) xs (range (count xs)))\n              acc (vec (repeatedly n vector))\n              conj-to-indexed-vec (fn [vecs [x index]]\n                                    (let [vec-index (mod index n)\n                                          upd-vec (conj (vecs vec-index) x)]\n                                     (assoc vecs vec-index upd-vec)))]\n          (reduce conj-to-indexed-vec acc indexed-seq)))","user":"54ecd716e4b024c67c0cf85a"},{"problem":43,"code":"; This is a very clever solution. I had not seen take-nth before. No wonder I was struggling...\n\n(fn deinterleave [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":43,"code":"(fn [s n] (map last (group-by #(mod % n) s)))","user":"5446ebc2e4b032a45b8693b8"},{"problem":43,"code":"(fn [sec n]\n  (loop [in sec\n         out (repeat n ())\n         pos 0]\n    (if (empty? in) (map reverse out)\n        (recur (rest in)\n               (map-indexed (fn [i val]\n                              (if (= i (mod pos n))\n                                (cons (first in) val)\n                                val)) out)\n               (inc pos)))))","user":"55f8180fe4b06e875b46ceba"},{"code":"(fn reverse-interleave [a n]\n  (partition (quot (count a) n) (apply interleave (partition n a))))","problem":43,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":43,"code":"(fn [c n]\n   (->> (partition n c)\n        (apply (partial map #(identity %&)))))","user":"5808ee16e4b0a837a8b30d16"},{"problem":43,"code":"#(apply map vector (map vec (partition %2 %)))","user":"56193c6ee4b053970a773af2"},{"problem":43,"code":"(fn [coll n]\n  (loop [[x & xs] coll\n         i 1\n         res (vec (repeat n []))]\n    (if (nil? x)\n      res\n      (let [cur (get res (dec i))]\n        (recur xs\n               (if (= i n) 1 (inc i))\n               (assoc res (dec i) (conj cur x)))\n      )\n    )\n          \n    \n  )                         \n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn reverse-interleave\r\n([s n]   (reverse-interleave s nil n))\r\n([s r n] (cond (= n 0) (reverse r)\r\n         :default (let [f #(if (= 0 (mod %1 n)) %2)\r\n\t\t\t      g #(if (not (= 0 (mod %1 n))) %2)]\r\n\t\t\t  (recur (keep-indexed g s) (conj r (keep-indexed f s)) (dec n))))))","problem":43,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":43,"code":"(fn ril\n  [as a]\n  ((fn f \n     [acc b1 b2 xs n i]\n     (if (= n 0) \n       acc\n       (if (empty? xs)\n         (f (concat acc [b2]) () () b1 (- n 1) (- n 1))\n         (if (= n i)\n           (f acc b1 (concat b2 [(first xs)]) (rest xs) n 1)\n           (f acc (concat b1 [(first xs)]) b2 (rest xs) n (+ i 1)))))) () () () as a a))","user":"53c051a5e4b0c98a41f5ccae"},{"code":"(fn [list1 diviseur]\n    (map\n      (fn [n] (keep-indexed (fn [ind elem] (if (= (mod n diviseur) (mod (inc ind) diviseur)) elem)) list1))\n      (range 1 (inc diviseur))))","problem":43,"user":"503efe01e4b06c4e0e1fa26f"},{"problem":43,"code":"(fn [x,y] (apply map list (partition y x)))","user":"5933b736e4b072a2710fd05d"},{"problem":43,"code":"(fn [xs n]\n  ((fn [xs i acc]\n    (if (empty? xs) (map reverse (vals acc))\n      (recur (rest xs) (inc i) (assoc acc (mod i n) (conj (get acc (mod i n)) (first xs)))))\n   ) xs 0 (sorted-map))\n)","user":"5d5e0259e4b0c9e5857d4fef"},{"problem":43,"code":"(fn [xs n]\n   (loop [ys xs\n          res []]\n     (if (>= (count res) n)\n       res\n       (recur (next ys) (conj res (take-nth n ys))))))","user":"5327c591e4b09d4e7a9b54ff"},{"problem":43,"code":"(fn distribute\n  ([xs n]\n   (distribute xs n (into [] (take n (repeat []))) 0))\n  ([xs n v i]\n   (if (empty? xs)\n     v\n     (recur (rest xs)\n            n\n            (assoc v (mod i n) (conj (get v (mod i n)) (first xs)))\n            (inc i)))))","user":"5922f8a9e4b026ae3852128f"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n      (map-indexed #(list %1 %2)) ;; ((0 1) (1 2) (2 3) (3 4) (4 5) (5 6))\n      (group-by (fn [[ix x]] (mod (+ ix n) n)))\n      (into (sorted-map)) ;; Make sure we're ordered\n      (vals) ;; [[(0 1) (2 3) (4 5)] [(1 2) (3 4) (5 6)]]\n      (map (fn [l] (for [[ix x] l] x)))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":43,"code":"(fn [s n]\n  (:vecs\n  (reduce (fn [{:keys [vecs cnt]} v]\n            {:vecs (assoc vecs (mod cnt n)\n                    (conj (get vecs (mod cnt n)) v))\n            :cnt (inc cnt)})\n    {:vecs (vec (take n (repeat [])))\n     :cnt 0}\n     s)))","user":"5f431d32e4b0955706451fb5"},{"code":"(fn [xs n] (apply map list (partition-all n xs)))","problem":43,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"(fn [l n]\n        (map #(map second %) (vals (group-by #(rem (first %) n) (map-indexed #(list %1 %2) l)))))","problem":43,"user":"532bce35e4b09d4e7a9b5536"},{"problem":43,"code":"(fn [s n]\n  (letfn [(chop [s n]\n            (if (empty? s)\n              {}\n              (cons (take n s) (chop (nthrest s n) n))))]\n    (apply map vector (chop s n))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":43,"code":"(fn [s n]\n  (apply map list (partition-all n s))\n )","user":"57c3c7e6e4b05aa3c4741cc4"},{"problem":43,"code":"(fn re-interleave\n  ([xs n]\n   (re-interleave (drop n xs) n (map #(conj [] %) (take n xs)))) \n   ([xs n res]\n    (let [head-xs  (map conj res (take n xs))]\n    \t(if-let [rest-xs (seq (drop n xs))]\n    \t\t(recur rest-xs n head-xs)\n    \t\thead-xs))))","user":"574ff497e4b02ea114799266"},{"code":"(fn fn-reverse-interleave\n  [s n]\n  (partition (quot (count s) n) (apply interleave (partition n s))))","problem":43,"user":"52f3af46e4b05e3f0be25f14"},{"code":"(fn [lst nm]\n  (apply map (cons (fn [& args] (apply clojure.core/list args))\n                   (partition nm lst))))","problem":43,"user":"51c76864e4b07ef393169e3f"},{"problem":43,"code":"(fn rinter [arr times] \n  (reduce (fn [result value]\n         (let [plist (first result)\n              rlist (rest result)]\n          (concat rlist (list (conj plist value))))) (repeat times []) arr))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"(fn [coll n]\n  (apply (partial map list)\n         (partition n coll)))","problem":43,"user":"5054c853e4b0b1b9d1860eb3"},{"problem":43,"code":"(fn [xs n] \n  (vals (group-by #(rem % n) xs)))","user":"60ab1536e4b00e9e6653c47e"},{"problem":43,"code":"(fn reverseInterleave [x interval]\n    (apply map list (partition interval x))\n  )","user":"5c24c654e4b07e362c2305a7"},{"code":"(fn\n  [mySeq factor]\n  (->> \n   mySeq \n   (group-by #(mod % factor))\n   vals\n  )\n)","problem":43,"user":"5162757ee4b03cfa3774b3fe"},{"problem":43,"code":"(fn [xs n] (map #(map (partial nth xs) %) (map #(range % (count xs) n) (range n))))","user":"56b35565e4b0982f16b37e16"},{"problem":43,"code":"(fn [c v]\n  (for [i (range v)]\n    (take-nth v (drop i c))))","user":"59cb706ee4b0a024fb6ae5ba"},{"problem":43,"code":"(fn [x n]\n    (for [indx (range n)]\n          (map #(nth % indx) (partition n x))))","user":"5835bc73e4b089d5ab817ce9"},{"problem":43,"code":"(fn [coll n] \n  (->> coll \n       (partition n) \n       (mapcat (fn [p] (map vector (range) p))) \n       (group-by #(nth % 0)) \n       (map (fn [kv] (map #(nth % 1) (val kv))))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":43,"code":"(fn [items n]\n  (loop [result []\n         initial 0]\n    (if (>= initial n)\n      (seq result)\n      (recur (conj result (keep-indexed #(if (= (rem %1 n) initial) %2) items)) \n             (inc initial)))))","user":"55a0d79fe4b0acc240e31502"},{"problem":43,"code":"#(vals (group-by (fn [x] (mod x %2)) %))","user":"5c165d3ee4b01240ff5671d1"},{"problem":43,"code":"(fn [s n]\n  (loop [tmps s c 0 new '()]\n    (if (= n c)\n      (reverse new)\n      (recur (rest tmps) (inc c) (conj new (take-nth n tmps))))))","user":"59368ccae4b02506e01a2979"},{"problem":43,"code":"#((fn f [x y r]\n    (if (= y %2)\n      r\n      (f (rest x) (+ y 1) (conj r (take-nth %2 x))))) % 0 [])","user":"53c74cfce4b00fb29b2212a7"},{"problem":43,"code":"(fn [s n] (map (fn [i] (keep-indexed #(if (= i (mod %1 n)) %2) s)) (range n)))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (map (fn [k] (take-nth n (drop k coll))) (range 0 n)))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [coll p] (apply map list (partition p coll)))\n;; apply. ugh.","problem":43,"user":"514cfa27e4b019235f6c057d"},{"problem":43,"code":"(fn [seq n]\n  (let [\n    seq-with-indices (map-indexed #(identity [%1 %2]) seq),\n    partitioned-with-indices (group-by #(mod (first %) n) seq-with-indices)]\n    (map #(map last %) (vals partitioned-with-indices))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":43,"code":"(fn revint\n  ([lst n] (revint lst n 0 {}))\n  ([lst n i acc]\n   (if (seq lst)\n     (recur (rest lst) \n            n \n            (inc i) \n            (let [key-val (mod i n)]\n              (assoc acc key-val (conj (or (get acc key-val) []) \n                                       (first lst)))))\n     (map second (sort-by first acc)))))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":43,"code":"#(let [x (partition %2 %1)] (apply map (fn [& i] i) x))","user":"56aed78fe4b03c432f187363"},{"code":"(fn [ s n ]\n   (for [ m (range n) ]\n       (flatten (partition 1 n (drop m s)))))","problem":43,"user":"4e860e85535db62dc21a62f1"},{"problem":43,"code":"(fn reverse-interleave\n  [seq n]\n  (reduce (fn [seqs vals] (map conj seqs vals)) (repeat n []) (partition n seq))\n  )","user":"5dfe3928e4b0a607a9a45d04"},{"problem":43,"code":"(fn [collection interval]\n  (reverse\n  (loop [c collection\n         i interval\n         r ()]\n    (if (= 0 i)\n      r\n      (recur (rest c) (dec i) (conj r (take-nth interval c)))\n      )\n    )\n   )\n  )","user":"5e03475de4b0a607a9a45d58"},{"problem":43,"code":"(fn\n    [xs n]\n    (map-indexed #(take-nth n (drop %1 %2)) (take n (repeat xs))))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [sq x]\n  (apply map list (partition x sq)))","problem":43,"user":"515f2a85e4b0595cf3d1da44"},{"problem":43,"code":"(fn [xs n]\n  (for [d (range n)]\n  \t(take-nth n (drop d xs))))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn revi [s x]\n  (for [i (range x)]\n    (doall (take-nth x (drop i s)))))","problem":43,"user":"52d3f666e4b09f7907dd1327"},{"problem":43,"code":"(fn [c n]\n  (let [seqs (partition-all n c)]\n    (loop [s seqs\n           ret []]\n      (if (empty? (first s))\n        (seq ret)\n        (recur (map rest s) (conj ret (filter (complement nil?) (map first s))))))))","user":"57c314f3e4b05aa3c4741cba"},{"code":"#(loop [round-left %2 items %1 res-list '()]\r\n   (if\r\n      (= round-left 0) res-list\r\n      (recur \r\n          (- round-left 1)\r\n          (next items)\r\n          (concat res-list (list (take-nth %2 items)))\r\n      )\r\n    )\r\n)","problem":43,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":43,"code":";;(fn abc [x y]\n;;  (case y\n;;  2 '((1 3 5) (2 4 6))\n;;  3 '((0 3 6) (1 4 7) (2 5 8))\n;;  5 '((0 5) (1 6) (2 7) (3 8) (4 9))\n;;  :dunno)\n;;  )\n\n#(apply map list (partition %2 %1))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [input-seq n]\n\t(loop [\n\t\t\tresult (take n (repeat []))\n\t\t\tremaining input-seq]\n\t\t(if (empty? remaining)\n\t\t\tresult\n\t\t\t(recur\n\t\t\t\t(map (fn [so-far next] (conj so-far next)) result remaining)\n\t\t\t\t(drop n remaining)\n\t\t\t))))","problem":43,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":43,"code":"(fn [coll n] (for [i (range n)] (keep-indexed #(if (= i (mod %1 n)) %2) coll)))","user":"53b1db8ee4b047364c044495"},{"code":"(fn\n  [col n]\n  (let [\n        partition-size n\n        split-up (partition partition-size col)\n        num-partitions (count split-up)]\n    (for [cur-group (range n)]\n      (for [cur-partition (range num-partitions)]\n       (nth (nth split-up cur-partition) cur-group)))))","problem":43,"user":"507a08e4e4b08327cd804a67"},{"problem":43,"code":"(fn [coll n]\n  (let [indexed-elements (map-indexed list coll)\n        grouped (group-by #(rem (first %) n) indexed-elements)\n        partitioned-vals (vals grouped)]\n    (map #(apply list (map second %)) partitioned-vals)))","user":"5a512929e4b05d388ecb6be2"},{"problem":43,"code":"(fn f [seq n]\n  ((fn [s i acc]\n    (if (empty? s)\n    acc\n    (recur (rest s) (mod (inc i) n) (update-in acc [i] #(conj % (first s))))\n    )\n    ) seq 0 (vec (repeat n '[])))\n  )","user":"5681afaae4b0945ebc182a87"},{"problem":43,"code":"#(->> (partition %2 %1) (apply map vector))","user":"550fa523e4b06e50f9beb17a"},{"code":"(fn [s n]\n  (let [ranges (map #(range % (count s) n) (range n))]\n    (map #(map (vec s) %) ranges)))","problem":43,"user":"4ef0eaef535dced4c769f211"},{"problem":43,"code":"(fn [col n]\n  (map\n    #(flatten (partition-all 1 n (drop % col)))\n    (range n)))","user":"5e17509fe4b00200644e3d52"},{"problem":43,"code":"(fn rint [coll k]\n  (map\n    #(take-nth k (drop % coll))\n    (range k)))","user":"5779556de4b0979f8965166e"},{"problem":43,"code":"(fn [s n] (map #(map (fn [s] (nth s %)) (partition-all n s)) (range n)))","user":"5b8f0861e4b0c0b3ffbd49f4"},{"problem":43,"code":"(fn [x n] (apply map list (partition n x)))","user":"53a2ec2be4b0f1fc74538830"},{"problem":43,"code":";(fn interleave-rev [coll n]\n;  (map (partial mapcat (comp vector second)) \n;     (vals \n;       (group-by (fn [[idx x]] (rem idx n)) \n;                 (map-indexed vector coll)))))\n\n#(apply map vector (partition %2 %1))","user":"57407ab3e4b05c31a32c0854"},{"code":"(fn [xs n]\n  \t(let [segments (partition n xs)]\n\t\t(for [n (range n)]\n  \t\t\t(map #(nth % n) segments))))","problem":43,"user":"51b24defe4b02f8f128bb963"},{"problem":43,"code":"(fn [col every]\n  (for [i (range every)] (take-nth every (drop i col))))","user":"5b85221ce4b047b03b2037c8"},{"problem":43,"code":"(fn [s n] (partition-all (/ (count s) n) (apply interleave (partition-all n s))))","user":"53aa1528e4b047364c04443f"},{"code":"(fn [s n]\n  (loop [acc (repeat n '()) xs s]\n    (if (empty? xs) (map reverse acc) (recur (map cons (take n xs) acc) (drop n xs)))))","problem":43,"user":"52199105e4b0c4ef0be82ff9"},{"problem":43,"code":"(fn [lst, splnum] (for [i (range 1 (inc splnum))] (take-nth splnum (drop (dec i) lst) ))\n       )","user":"59692530e4b069c0a1a197e4"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (let [remove-nth (fn remove-nth [n coll]\n       (loop [i 0, acc '()]\n             (if (= i (count coll))\n               (reverse acc)\n               (recur (+ i 1) (if (= (mod i n) 0)\n                                acc          \n                                (cons (nth coll i) acc)    \n                                )))))]\n    (loop [coll coll, i n, acc '()]\n          (if (= i 0)  \n            (reverse acc)\n            (recur (remove-nth i coll) \n                   (- i 1)  \n                   (cons (take-nth i coll) acc))))))","user":"5a409d77e4b0447ef91cc5d3"},{"problem":43,"code":"(fn [coll n]\n  (loop [head coll\n         res []\n         i 0]\n    (let [ind (mod i n)\n          target (get res ind [])]\n      (if (>= i (count coll))\n        (map list* res)\n        (recur\n          (next head)\n          (assoc res ind (conj target (first head)))\n          (inc i))))))","user":"5169d422e4b051e2a73aba53"},{"problem":43,"code":"(fn foo [coll x]\n        (reverse (loop [coll coll  x x i 0 res '()\n               helper (fn helper [coll x]\n                        (if (empty? coll ) nil\n                            (conj (helper (drop x coll) x) (first coll))\n                            ))]\n          (if (= x i) res \n              (recur (rest coll) x (inc i) \n                     (conj res (helper coll x) )  helper)\n          \n        ))))","user":"6038b6b4e4b0d5df2af222ef"},{"code":"(fn [coll n]\n  (let [tails (fn tails [coll]\n    (when (not (empty? coll)) \n      (lazy-seq (cons coll (tails (rest coll))))))]\n    (take n (map (partial take-nth n) (tails coll)))))","problem":43,"user":"4ded27db535d08e6dec9fe0a"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  ((fn reverse-interleave [s n i]\n     (if (= i 1)\n       (list (take-nth n s))\n       (cons (take-nth n s) (reverse-interleave (rest s) n (dec i))))) s n n))","user":"570eeca5e4b0b0fb43fd06fb"},{"code":"(fn rinterleave [lst n]\n  (loop [result (repeat n []) remainder lst]\n    (if (or (empty? remainder) (< (count remainder) n))\n      result\n      (recur\n        (map-indexed\n          (fn [idx itm] (conj (nth result (mod idx n)) itm))\n          (take n remainder)\n        )\n        (second (split-at n remainder))\n      )\n    )\n  )\n)","problem":43,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":43,"code":"(fn [coll n] (reduce #(conj (vec (next %1)) (conj (first %1) %2)) (repeat n []) coll))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":43,"code":"(fn f [coll n]\n  (let [indexed (keep-indexed #(list (rem %1 n) %2) coll)]\n    (loop [i 0\n           acc '()]\n      (if (< i n)\n        (recur (+ i 1) (concat acc (list (map #(last %) (filter #(= i (first %)) indexed)))))\n        acc\n        )\n      )\n  ))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [vals n]\n  (map #(take-nth n (drop % vals)) (range n)))","problem":43,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":43,"code":"(fn\n  [x n]\n  (let [p (partition n x)]\n    (for [idx (range n)] (map #(nth % idx) p))))","user":"5f5e166ce4b02876ed9fcfed"},{"code":"(fn [original_set n]\r\n  (reverse\r\n    (loop [\r\n        partitions (partition n original_set)\r\n        accumulator '()\r\n      ]\r\n      (cond\r\n         (empty? partitions) accumulator\r\n         (empty? (first partitions)) accumulator\r\n         :else\r\n           (recur (map #(rest %) partitions) (cons (map #(first %) partitions) accumulator))\r\n      )\r\n    )\r\n  )\r\n)","problem":43,"user":"4e1ec17a535d04ed9115e80a"},{"problem":43,"code":"(fn [c n]\n    (let [map-lvp (fn [as vs] (map (fn [a v] (cons v a)) as vs))]\n      (map reverse (reduce map-lvp (repeat n '()) (partition n c)))))","user":"559a9a3de4b066d22e731f45"},{"problem":43,"code":"#(map take-nth\n         (repeat %2 %2)\n         (conj (map (fn [f] (f %1))\n                    (reductions comp (repeat (dec %2) rest)))\n               %1\n               )\n        )","user":"5e7aba9fe4b085ba37836e0c"},{"code":"(fn [c n] (map #(map (vec c) %) (for [k (range n)] (range k (count c) n))))","problem":43,"user":"51a768e0e4b0da5f497bde84"},{"problem":43,"code":"(fn [coll x]\n  (let [[head & tail] (partition x coll)]\n    (reduce (partial map conj)\n            (map vector head)\n            tail)))","user":"54d9f7f1e4b024c67c0cf751"},{"code":"(fn [xs n]\n  (loop [accs (repeat n [])\n         xs xs]\n    (let [[ys xs'] (split-at n xs)]\n      (if (= n (count ys))\n        (recur (map conj accs ys)\n               xs')\n        accs))))","problem":43,"user":"52487654e4b05ef8e38e63dc"},{"problem":43,"code":"(fn [coll n] (let [split_count (/ (count coll) n)]\n               (partition-all split_count (apply interleave (partition-all n coll)))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":43,"code":"(fn rev-interleave [s x]\n  (let [len (count s)]\n  (reverse (apply map (partial conj '()) (partition x (reverse s))))))","user":"53791ab7e4b06839e8705e4d"},{"problem":43,"code":"(fn [coll n]\n         (for [i (range n)] (take-nth n (drop i coll))))","user":"5ec2d9e5e4b00a66d4a952a0"},{"problem":43,"code":"(fn [xs step] (apply map list (partition step xs)))","user":"5531e445e4b09218d5f44f76"},{"code":"(fn [coll step] \n  (let [head (first coll)\n        length (count coll)]\n  (take step \n    (iterate (fn [x] (map #(+ 1 %) x)) \n(range head length step)))))","problem":43,"user":"4ebd33e4535dfed6da9c6d8e"},{"code":"#(apply (partial map vector) (partition %2 %))","problem":43,"user":"4e589bdc535d8a8b8723a295"},{"code":"(fn [s x]\n    (for [a (range 0 x)]\n    (take-nth x (drop a s))\n    )\n  )","problem":43,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed #(vector %1 %2))\n       (group-by #(mod (first %) n))\n       (map #(map second (second %)))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":43,"code":"(fn\n  [coll n]\n  (map (fn [i] (map second (filter #(= i (mod (first %) n)) (map-indexed vector coll)))) (range n)))","user":"53c1b787e4b00fb29b221266"},{"problem":43,"code":"(fn reverse-interleave [col n]\n  (if (= n 0) '()\n    (let [cols (partition n col)]\n      (concat (list (map first cols))\n              (reverse-interleave (mapcat next cols)\n                                  (dec n))))))","user":"5b333626e4b025bcb146f32f"},{"problem":43,"code":"(fn f\n    ;; Arity for preparing the output lists\n    ([xs n]\n     (if (= n 0)\n       []\n       (f xs (repeat n []) 0)))\n    ;; Arity for filling up the output lists\n    ([[x & xs] ys ys-idx]\n     (if (nil? x)\n       ys\n       (let [i (mod ys-idx (count ys))\n             curr-y (nth ys i)\n             preds (take i ys)\n             succs (drop (inc i) ys)\n             ;; Prep for next iteration\n             zs-idx (inc i)\n             zs (concat preds [(conj curr-y x)] succs)]\n         (f xs zs zs-idx)))))","user":"5eca004ae4b08d0ec38692f8"},{"code":";(fn [coll x]\n;  (let [take-xth (fn [xs] (take-nth x xs))]\n;    (map #(take-xth (drop % coll)) (range x))))\n(fn [col x]\n  (apply map list (partition x col)))","problem":43,"user":"4f1c2a3a535d64f603146480"},{"code":"(fn [l n]\n  (let\n    [f (fn f [l n]\n         (cond\n          (empty? l) nil\n          true (cons (first l) (f (drop n l) n))))\n     f_ (fn f_ [l n rem]\n          (cond\n           (= rem 0) nil\n           true (cons (f l n) (f_ (rest l) n (- rem 1)))))\n     ]\n    \n    (f_ l n n)))","problem":43,"user":"52091d57e4b0e152394d76f0"},{"problem":43,"code":"#(apply map vector(partition %2 %1))","user":"56d1978fe4b0ea9b8538f790"},{"code":"(fn [v n]\n  (map \n    (fn [s]\n      (map #(nth v %1) (range s (count v) n)))\n    (range 0 n)))","problem":43,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn [x n]\n  (map \n   (fn [a] \n     (map #(last %) a))\n   (vals \n    (group-by \n     #(mod (first %) n) \n     (map-indexed \n      #(list % %2) \n      x)))))","problem":43,"user":"5201cf92e4b0b2e020a18f21"},{"problem":43,"code":"(fn [coll x]\n    (let [colls (map vec (partition x coll))]\n      (map (fn [n] (map (fn [a] (nth a n)) colls) ) (range x))))","user":"5d89427ae4b0915913b1d3b5"},{"problem":43,"code":"(fn [xs n] \n  (->> xs\n       (partition n)\n       (apply map list)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [y m]\n (let [revint\n       (fn revint [x n a]\n         (if (= 0 a)\n           '()\n           (cons (take-nth n x) (revint (rest x) n (dec a)))))]\n   (revint y m m)))","problem":43,"user":"534941d1e4b084c2834f4a60"},{"problem":43,"code":"(fn [l n]\n  (map \n   (fn [x] \n     (keep-indexed \n      #(if (= (mod x n) (mod %1 n)) %2) l))\n   (range 0 n)))","user":"59663e77e4b069c0a1a1979f"},{"code":"(fn [xs n]\n           (#(apply (partial map vector) %) (partition-all n xs)))","problem":43,"user":"4f065217535dcb61093f6c0c"},{"problem":43,"code":"(fn [a b] (take b (map #(take-nth b (nthrest a %)) (range b))))","user":"55af7e21e4b03311e7b732cc"},{"code":"(fn rinter [s parts]\n  (letfn [(mod-index [s n] (keep-indexed (fn [index item] [(rem index n) item]) s))]\n    (map (fn [place]\n           (reduce (fn [acc [index v]]\n                     (if (= index place)\n                         (conj acc v)\n                         acc))\n                   []\n                   (mod-index s parts)))\n         (range parts))))","problem":43,"user":"516385cee4b055933a9ca02d"},{"problem":43,"code":"(fn inv-intrlv [coll n]\n  (let [f (fn tau [x]\n            (if (empty? (first x)) []\n              (cons (map first x) (tau (map rest x)))))]\n  (f (partition n coll))))","user":"56278266e4b00e49c7cb47d3"},{"problem":43,"code":"(fn [ns n]\n  (->> (partition n ns)\n       (apply map list)))","user":"5d28d935e4b092dab7f59c88"},{"problem":43,"code":"(fn [coll parts]\n  (apply map list (partition-all parts coll)))","user":"60a7c55be4b00e9e6653c468"},{"problem":43,"code":"(fn [col n] (letfn [(uninterleave [x n k acc]\n                           (if (= n 0) acc\n                                       (uninterleave x (dec n) k (cons (take-nth k (drop (dec n) x)) acc))\n                                       )\n                           )\n                         ]\n                   (uninterleave col n n nil)\n                   ))","user":"5c635364e4b0fca0c162265f"},{"problem":43,"code":"(fn [xs n] (map #(keep-indexed (fn [i a] (when (= 0 (mod (+ % i) n)) a)) xs) (reverse (range 1 (inc n)))))","user":"5896ade8e4b00487982d52a9"},{"code":"(fn [x y]\n  (apply map list\n    (partition y x)))","problem":43,"user":"4f29651ce4b0d6649770a028"},{"code":"(fn test [coll countt]\r\n  (map #(seq %) (vals (group-by #(mod % countt) coll)))\r\n)","problem":43,"user":"51a7f74be4b08d8ec191b802"},{"code":"(fn [seq x]\n  (for [i (range x)]\n    (take-nth x (take (count seq) (drop i (cycle seq))))))","problem":43,"user":"4f93539de4b0dcca54ed6cba"},{"code":"(fn\n  [seq intvl]\n  (let [results (zipmap (range intvl) (repeat [])) ; start with a result hash, one key for each list with each value an empty vec\n        indexed (partition 2 (interleave seq (range (count seq))))] ; start with the original list partitioned and interleaved with indices 1 through (+ 1 (count seq))\n\n        (loop [r results i indexed]\n          ; recursively drop items from the front, checking the second (the index) with the mod function and adding it to the hash\n          (if (= 0 (count i))\n            (for [sorted (sort r)] (second sorted)) ; return values of r sorted by key\n            (let [m (mod (second (first i)) intvl) ; m is the mod value of index % intvl - the current bucket to be adding the value to\n                  v (first (first i))] ; the value at the top of pending items\n              (recur\n                (assoc r m (conj (get r m) v)) ; add an item to the list in the proper results bucket\n                (drop 1 i)) ; drop the first item from the list\n              )))\n          ))","problem":43,"user":"52b94f15e4b07a9af57922ba"},{"code":"(fn [coll n]\n  (loop [input coll\n         i 0\n         result (repeat n [])]\n    (if (empty? input) result\n      (recur (rest input) (rem (inc i) n) \n           (map-indexed #(if (= % i) (conj %2 (first input)) %2) result)))))","problem":43,"user":"4f38d6bbe4b0e243712b1ee2"},{"problem":43,"code":"(fn rev-int\n  ([xs n]\n   (rev-int xs n (vec (repeat n []))))\n  ([xs n ys]\n   (if-not (empty? xs)\n       (let [xs' (take n xs)]\n         (recur (drop n xs) n (map #(conj %1 %2) ys xs')))\n       ys)))","user":"590e5e8ae4b047aa04b19a25"},{"problem":43,"code":"#(for [x (range %2)] \n    (take-nth %2 (nthrest %1 x)))","user":"56671a4de4b04acd4f672dca"},{"problem":43,"code":"#(vals (group-by (fn [n] (rem n %2)) %1))","user":"55c13e73e4b01b9910ae2a2f"},{"code":"(fn f\n  ([in c] (f in c '() 1))\n  ([in c out i]  (if\n    (<= c i) (concat out (list (take-nth c in)))\n    (f (rest in) c (concat out (list (take-nth c in))) (+ i 1))\n  ))\n)","problem":43,"user":"4eebfd03535d93acb0a668ab"},{"code":"(fn [coll n]\n  (map #(take-nth n %)\n    (map #(drop % coll) (range n))))","problem":43,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"code":"#(for [x (range %2)] (flatten (partition 1 %2 (drop x %))))","problem":43,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":43,"code":"(fn reverse-interleave [x n]\n     (partition\n       (/ (count x) n)\n       (apply interleave (partition n x))))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":43,"code":"#(apply map list (partition  %2 %))","user":"5652dd89e4b0f9d632dd8469"},{"problem":43,"code":"(fn rint\n  ([coll n] (rint (partition n coll) n (vector)))\n  ([pcoll n ans]\n  \t(if (some empty? pcoll)\n      ans\n      (let [fpcoll (map first pcoll)\n            rpcoll (map rest pcoll)]\n        (rint rpcoll n (conj ans fpcoll)))\n      )\n   )\n  )","user":"5a90395ce4b05369db4d254a"},{"code":"(fn ri [s n] (if (empty? s) (vec (repeat n '())) (let [x (mod (- n (count s)) n) t (ri (rest s) n)] (assoc t x (cons (first s) (nth t x))))))","problem":43,"user":"4f559d2ce4b0a7574ea71808"},{"problem":43,"code":"(fn [coll part] \n  (let [x (partition part coll)]\n    (for [i (range part)]\n      (map #(nth % i) x))))","user":"57147cd9e4b07c98581c3abf"},{"problem":43,"code":"(fn [coll x]\n  (let [a (range x)\n        b (range (/ (count coll) x))]\n    (map (fn [aa]\n           (map (fn [bb]\n                  (nth coll (+ aa (* bb x)))) b)) a)))","user":"567c2322e4b05957ce8c61af"},{"problem":43,"code":"(fn [coll period]\n  (for [order (range period)]\n    (map #(nth % order) (partition period coll))))","user":"54ad4863e4b09f271ff37ce0"},{"problem":43,"code":"(fn rev-inter [lat n]\n  (partition (quot (count lat) n) (apply interleave (partition n lat))))","user":"56874171e4b0dcc4269f405c"},{"problem":43,"code":"(fn split-cuowu [coll n]\n  (apply map list (partition n coll)))","user":"51d42f44e4b013d740b70ddb"},{"problem":43,"code":"(fn [xs n]\n  (reduce (fn [acc v]\n            (conj acc (take-nth n (drop v xs)))) \n          [] (range n)))","user":"54133900e4b01498b1a719de"},{"problem":43,"code":"(fn [coll n]\n  (let [partition-coll (partition n coll)]\n    (map (fn [i] \n           (map #(nth % i) \n                partition-coll)) \n         (range n))))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn thing [coll n]\n  (loop [coll coll\n         tally 0\n         return-coll (vec (repeat n []))]\n    (if (seq coll)\n      (recur (rest coll)\n             (inc tally)\n             (update-in return-coll [(mod tally \n                                          (count return-coll))]\n                   #(conj % (first coll))))\n      return-coll)))","problem":43,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":43,"code":"(fn [coll n]\n  (apply map list \n         (partition n coll)))","user":"5a29ee57e4b09cafd31c7f2b"},{"code":"(fn [coll n]\n  (reduce (fn [r chunk]\n      (map #(conj %1 %2) r chunk))\n\t  (repeat n [])\n\t  (partition n coll)))","problem":43,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [c n]\n  (reduce #(conj %1 (take-nth n (drop %2 c)))    []  (range 0 n))  \n  )","problem":43,"user":"4ec4d723535dcc7ae8597d65"},{"problem":43,"code":"(fn [sequ n]\n  (loop [res []\n         end 0\n         copy sequ]\n    (if (= end n) \n      res\n      (recur (conj res (take-nth n copy)) (inc end) (rest copy)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"code":"(fn [coll s]\n    (map #(take-nth s %) (map (fn [x] (take (count coll) (drop x (cycle coll)))) (range s))))","problem":43,"user":"5348cab4e4b084c2834f4a5e"},{"problem":43,"code":"#(partition (/ (count %) %2) \n  (apply mapcat list (partition-all %2 %2 %)))","user":"55b39523e4b01b9910ae2973"},{"problem":43,"code":"(fn [xs n-seqs]\n  (for [offset (range n-seqs)]\n    (->> (range (/ (count xs) n-seqs)) \n         (map #(+ offset (* n-seqs %))) \n         (map (vec xs)))))","user":"59ee6801e4b0966464fe6a1f"},{"code":"(fn [coll n]\r\n   (let [c (/ (count coll) n)]\r\n\t\t(map\r\n\t\t\t(fn [is] (map #(nth coll %) (take c is)))\r\n\t\t\t(map \r\n\t\t\t\t(fn [i] (map #(+ i (* n %)) (range (count coll))))\r\n\t\t\t\t(range 0 n)))))","problem":43,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn [s n]\n\t\t\t(letfn [(squash2nd [s]\n\t\t\t\t\t\t(reduce #(conj %1 (second %2)) [] s))]\n\t\t\t\t(let [imap (map-indexed vector s)\n\t\t\t\t\t  grpd (group-by #(mod (% 0) n) imap)\n\t\t\t\t\t  catvals (concat (vals grpd))\n\t\t\t\t\t  valsingletons (map squash2nd catvals)\n\t\t\t\t\t ]\n\t\t\t\tvalsingletons)))","problem":43,"user":"5252b59de4b0541d1855b8cf"},{"code":"(fn [xs n]\n  (apply map (fn [& all] all) (partition-all n xs))\n  )","problem":43,"user":"531490bde4b08068f379ed17"},{"problem":43,"code":"(fn [arr n] \n   (->> (partition n arr)\n        (reduce (partial map conj) (repeat n []))))","user":"58b06b7ce4b0ebc645576cdc"},{"problem":43,"code":"(fn [coll n]\n  (let [keep-stride (fn [nindex] (keep-indexed #(if (= (mod %1 n) nindex) %2) coll))]\n   (loop [rcoll nil  nindex 0]\n     (cond (= nindex 0)\n           (recur (vector (keep-stride nindex)) (inc nindex))\n           (< nindex n)\n           (recur (conj rcoll (keep-stride nindex))\n                  (inc nindex))\n           :else rcoll))))","user":"5d363543e4b01671435dbd20"},{"problem":43,"code":"(fn [coll x]\n   (partition (/ (count coll) x) (apply interleave (partition x coll))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn\n  [coll n]\n  (loop [xs coll result [] i n]\n    (if (= i 0)\n      result\n      (recur (rest xs) (conj result (flatten (partition-all 1 n xs))) (dec i)))))","problem":43,"user":"5289bba9e4b0239c8a67ae69"},{"problem":43,"code":"(fn [xs n]\n  (let [zs (apply interleave (partition-all n xs))]\n    (partition-all (/ (count zs) n) zs)))","user":"585e7c60e4b0f14aab7c87b3"},{"problem":43,"code":"(fn [s n]\n  (map\n   #(take-nth n (drop (dec %) s))\n   (range 1 (inc n))))","user":"5ec0de29e4b00a66d4a9528e"},{"code":"(fn ri [l n]\n  (if (empty? l)\n      (take n (repeat '()))\n      (let [r (ri (rest l) n)]\n        (cons (cons (first l) (last r)) (butlast r)))))","problem":43,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":43,"code":"(fn [coll step]\n  (map #(take-nth step (drop (- step %) coll)) (range step 0 -1)))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":43,"code":"(fn [col x] (vals (group-by #(mod % x) col)))","user":"5c481764e4b0e06e1360a3ba"},{"problem":43,"code":"(fn [s n]\n  (for [k (range n)]\n    (apply concat (partition 1 n (drop k s)))))","user":"57cd7498e4b0c746388ab897"},{"problem":43,"code":"#(apply map (fn [& hs] hs) (partition %2 %))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":43,"code":"(fn [col value] (apply map list (partition-all value col)))","user":"593c653de4b069cdc2982b8f"},{"code":"(fn [c n] (apply mapv list (partition n c)))","problem":43,"user":"51424cc8e4b0b50abeb46b34"},{"problem":43,"code":";;one way (fn evaelretnI [collection n] (apply map vector (partition n collection)))\n\n;;another way\n(fn ↓↘→ [༶  ༷] (let [ༀ range ༁ take-nth ་ nthnext]\n  (for [༗ (ༀ ༷)] (༁ ༷ (་ ༶ ༗)))))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":43,"code":"(fn [myseq qty]\n  (reverse (map reverse (second (reduce \n    (fn [[seqs stack] val]\n      (if (empty? seqs)\n        [\n          (rest (reverse stack))\n          (conj nil (conj (first (reverse stack)) val))\n        ]\n        [\n          (rest seqs)\n          (conj stack (conj (first seqs) val))\n        ]\n      )\n    ) [(repeat qty nil)] myseq\n  ))))\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":43,"code":"(fn [xs n] (map (fn [n1] (map #(nth % n1) (partition-all n xs))) (range n)) )","user":"5da71eaee4b000c986472c15"},{"problem":43,"code":"(fn [coll n]\n  (map val (group-by #(mod % n) coll)))","user":"5338387de4b0e30313ee6c91"},{"code":"(fn [xs n]\n  (loop [xs xs i n zs []]\n    (if (>= i 1)\n      (recur (next xs)\n             (dec i)\n             (conj zs (take-nth n xs)))\n      \n      zs)))","problem":43,"user":"511442d0e4b0e9c109bb74d5"},{"problem":43,"code":"(fn [sq n]\n            (map #(map (partial nth sq)\n                  (range % (count sq) n))\n                 (range 0 n)))","user":"5f5a2cc6e4b0a0bc16850aa4"},{"problem":43,"code":"#(let [n %2]\n   (loop [s %1 r (repeat n [])]\n    (if (empty? s)\n      r\n      (recur\n       (drop n s)\n       (map conj r (take n s))\n      )\n    )  \n  )\n )","user":"5c0d0537e4b0bdcf453d173d"},{"code":"(fn [coll n] (apply map list ( partition n coll)))","problem":43,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"code":"(fn [coll n]\n  (reduce #(conj % (take-nth n (drop %2 coll))) [] (range n)))","problem":43,"user":"4f1b0008535d64f603146473"},{"code":"(fn [l n] (take n (drop (mod (first l) n) (cycle (partition (quot (count l) n) (sort-by #(mod % n) l))))))","problem":43,"user":"512f74afe4b0762be4c7aadc"},{"problem":43,"code":"(fn revinter [s n]\n  (loop [s s\n         i 0\n         ret []]\n    (if (= n i)\n      ret\n    (recur (rest s) (inc i) (conj ret (take-nth n s)) ))))","user":"5703ce0fe4b08d47c97781fd"},{"code":"(fn [coll num] \n  (map #(map (fn [x] (nth coll x)) (range % (count coll) num)) (range 0 num)))","problem":43,"user":"4f2acb29e4b0d6649770a040"},{"code":"(fn [c n] (map #(map second %) (vals (group-by first (map-indexed (fn [i x] [(rem i n) x]) c)))))","problem":43,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn [s m]\n  (map (fn [d] (keep-indexed #(if(= (mod % m) d) %2) s))\n       (range m )))","problem":43,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":43,"code":"(fn [s n]\n  \n(apply map vector (partition-all n s))  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":43,"code":"(fn [s n] ((fn ri\n                   ([ss] (ri ss []))\n                   ([ss r] (if (empty? ss)\n                            r\n                            (ri (nthrest ss (/ (count s) n)) (conj r (take (/ (count s) n) ss)))))) (apply interleave ((fn f [s x] (if (empty? s) x (f (nthrest s n) (conj x (take n s))))) s []))))","user":"544e6b7fe4b0e39780006986"},{"problem":43,"code":"(fn [arg divider]\n  (let [coll (map vector arg (iterate inc 0)) \n        cnt (count coll)]\n    (for [x (range divider)]\n      (->> (filter #(= (rem (second %) divider) x) coll) (map first)))))","user":"5a082ce4e4b01bb0ae8afdec"},{"code":"(fn [xs n]\n    (partition (/ (count xs) n) (apply interleave (partition n xs)))\n)","problem":43,"user":"52430d3ce4b076204b44faa5"},{"code":"#(partition (/ (count %) %2)\n(apply interleave\n       (partition %2 %)))","problem":43,"user":"504e3aaae4b0f6ff3350c487"},{"code":"(fn[s n] \n    (vals (:r (reduce \n        (fn[x y] (let [r (x :r)\n                       i (x :i)\n                       m (mod i n)\n                       v (get r m [])\n                       nv {m (conj v y)}\n                      ]\n                    {:r (merge r nv)\n                     :i (inc i)}\n                 ))\n        {:r (sorted-map) :i 0}\n        s\n    )))\n)","problem":43,"user":"5017eface4b02f523d7cc5e7"},{"problem":43,"code":"(fn [s n]\n  (for [i (range n)]\n    (for [j (map #(+ i (* n %)) (range (/ (count s) n)))]\n      (nth s j))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":43,"code":"(fn [xs n]\n  (let [l (count xs)\n        q (quot l n)]\n    (partition q (apply interleave (partition n xs)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":43,"code":"(fn [l n]\n      (map (fn [i]\n             (->> (map-indexed list l)\n                  (filter #(= (mod (first %) n) i))\n                  (map second)))\n           (range 0 n)))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":43,"code":"(fn [xs n] (partition (quot (count xs) n) (apply interleave (partition n xs))))","user":"53ef78bee4b0742d9025b0cd"},{"code":"(fn revint [v i] (apply map (fn[& s] s) (partition i v)))","problem":43,"user":"5138d08be4b0a5db03d727db"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  \t(apply map list (partition n coll))\n  )","user":"602cc4d4e4b0d5df2af22274"},{"code":"(fn [l n] (into [] (for [x (range n)] (take-nth n (drop x l)))))","problem":43,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [coll parts] (for [n (range parts)] (take-nth parts (drop n coll))))","problem":43,"user":"532347dde4b09d4e7a9b54cc"},{"problem":43,"code":"(fn [coll nseq] (let [parts (partition nseq coll)] (for [i (range nseq)] (map #(nth % i) parts))))","user":"59c8c9bee4b0a024fb6ae567"},{"problem":43,"code":"(fn wei [l n]\n  (let [ll (map-indexed vector l)\n        l2 (group-by #(mod (first %) n) ll)\n        l3 (map second l2)\n        l4 (map #(map second %) l3)]\n    l4))","user":"539c88e1e4b0b51d73faaf2c"},{"code":"(fn [l n] \r\n  (let [il (map-indexed vector l)\r\n        agg-res (fn [m [idx itm]] (update-in m [(mod idx n)] #(conj % itm)))\r\n        init-l (vec (take n (repeat [])))]\r\n          (reduce agg-res init-l il)))","problem":43,"user":"4f141dee535d64f603146434"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (for [i (range n)]\n    (map first (filter #(= i (mod (second %) n)) (map list coll (range (count coll)))))))","user":"572db6d5e4b0cd1946bd0f78"},{"problem":43,"code":"(fn [sq n] (apply map vector (partition n sq)))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":43,"code":"(fn [val size]\n  (apply map (fn [& args] (into []  args)) (partition size val)))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [xs n] (apply map vector (partition n xs)))","problem":43,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn\n    [coll x]\n    (loop [s coll i x result []]\n      (if (= i 0)\n        result\n        (recur (rest s) (dec i) (conj result (take-nth x s)))\n        )))","problem":43,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn [coll n] (for [i (range n)] (take-nth n (drop i coll))))","problem":43,"user":"4f4ff836e4b03ad3f0c10cf4"},{"code":"(fn [seq,n]\n  (map\n    (fn [m] (keep-indexed #(if (= m (mod %1 n)) %2) seq))\n    (range n)\n  )\n)","problem":43,"user":"4e8b1fa2535d65386fec2118"},{"code":"(fn [l n]\n  (apply map list (partition n l)))","problem":43,"user":"4e6a5168535d8ccf87e9fec6"},{"problem":43,"code":"(fn\n  [xs n]\n  (partition (/ (count xs) n)\n             (apply interleave (partition n xs))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":43,"code":"(fn [xs n]\n  (loop [xs xs\n         n  n\n         ys (take n (repeat nil))]\n\n    (if (empty? xs)\n      (map reverse ys)\n      (recur (nthrest xs n) n (map cons (take n xs) ys)))))","user":"5e8f87c7e4b0cb0169546342"},{"problem":43,"code":"(fn [s n] (map (fn [i] (map #(nth % i) (partition n n s))) (range n)))","user":"5ef18431e4b07c55ae4a0529"},{"code":"(fn [coll n] (loop [i n,rst '(),c coll]\n(if (= 0 i) (reverse  rst) (recur (dec i) (cons (take-nth n c) rst) (rest c)))))","problem":43,"user":"4fc0221ce4b081705acca322"},{"problem":43,"code":"(fn [c n]\n  (let [ev (fn every-n [s i] (if (empty? s) [] (cons (first s) (every-n (drop i s) i) )))]\n    (map #(ev (drop % c) n) (range 0 n))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"code":"(fn [lst n]\n  (apply map vector (partition n lst)))","problem":43,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn [s n]\n  (map second (group-by #(mod (.indexOf s %) n) s))\n)","problem":43,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn [xs d] (map (fn [n] (take-nth d (drop n xs))) (range 0 d)))","problem":43,"user":"525493bbe4b0541d1855b991"},{"problem":43,"code":"(fn rev-interleave\n  [coll pos]\n    (letfn [(take-items [func xs]\n            (loop [acc []\n                   [head & tail] xs]\n              (if (empty? head)\n                acc\n                (recur (conj acc (func head)) tail))))]\n          (loop [new-coll []\n                 curr-coll (partition-all pos coll)]\n            (if ((comp empty? flatten) curr-coll)\n              new-coll\n              (recur (conj new-coll (take-items first curr-coll)) (take-items rest curr-coll))))))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [seq num]\n  (map (fn [x] (map #(nth % x) (partition num seq))) (range num)))","problem":43,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":43,"code":"(fn reverse-interleave [coll n]                                                                                                                                                   \n  (let [p (/ (count coll) n)]                                                                                                                                                       \n    (partition p (apply interleave (partition n coll)))))","user":"5728d33ce4b0c6e51e0d2b12"},{"problem":43,"code":"#(map (fn [x]\n        (for [n (range (count %1)) \n              :when (= (mod n %2) x)]\n          (nth %1 n)))\n      (range %2))","user":"53acaf1fe4b047364c04445f"},{"problem":43,"code":"(fn [lst n]\n  (map (fn [k]\n         (keep-indexed #(if (= k (mod %1 n)) %2) lst))\n       (range n)))","user":"5733e4aee4b0cd1946bd0ffe"},{"problem":43,"code":"(fn [reverse-interleave-this to-these-parts] \n     (map \n             #(take-nth to-these-parts (drop %2 %1)) \n             (repeat to-these-parts reverse-interleave-this) (range))\n     )","user":"56ef11efe4b04a395b9a045b"},{"problem":43,"code":"(fn [a x]\n\t(->>\n\t\ta\n\t\t(map-indexed #(list % %2))\n\t\t(group-by #(mod (first %) x))\n\t\t(map #(map (fn [v] (second v)) (second %)))))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn [c ss] (partition (/ (count c) ss) (map second (sort-by first (map-indexed (fn [i v] [(mod i ss) v]) c)))))","problem":43,"user":"5268f5b4e4b03e8d9a4a71cf"},{"code":"#(map (partial take-nth %2) (map (partial nthnext %1) (range %2)))","problem":43,"user":"514def61e4b019235f6c0591"},{"problem":43,"code":"(fn [coll n]\n    (map #(take-nth n %) (take n (iterate rest coll)))\n)","user":"54b050cee4b09f271ff37d13"},{"problem":43,"code":"(fn reverse-interleave\n  [s n]\n  (sort-by first < (map #(val %) (reduce #(merge-with concat %1 %2) (map-indexed (fn [idx itm] (hash-map (mod (+ 1 idx) n) [itm])) s)))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [seq n]\n  (loop [acc [] xs (partition-all n seq) cnt n]\n    (if (zero? cnt)\n      acc\n      (recur (conj acc (map first xs)) (map rest xs) (dec cnt)))))","problem":43,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn -myf \n  ([coll cols] (reverse (-myf coll cols 0 '())))\n  ([coll cols act result ] \n    (cond \n     (= act cols) result\n     :else\n   (recur coll cols (inc act) (conj result (map #(nth coll %) (take (/ (count coll) cols) (iterate (partial + cols) act) ) ) ) )\n     )) )","problem":43,"user":"4f038ed6535dcb61093f6b24"},{"problem":43,"code":"(fn [xs n]\n  (letfn [(my-fun [ys k]\n                  (map #(nth % k) ys))]\n    (map (fn [i] (my-fun (partition n xs) i)) (range n))))","user":"5447e08ce4b032a45b8693c3"},{"problem":43,"code":"(fn [c n]\n   (let [p (partition n c)\n         i (apply interleave p)]\n     (partition (quot (count c) n) i)))","user":"56c60b36e4b05cc29241eead"},{"code":"(fn [s pars]\n  (->> (partition pars s)\n       (apply map list )))","problem":43,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn [m n] (apply map list (partition n m)))","problem":43,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [coll n]\n  (apply map #(identity %&) (partition n coll)))","problem":43,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":43,"code":"(fn [x n] (map #(take-nth n (take-last (- (count x) %) x)) (range 0 n)))","user":"5b9263ece4b0c0b3ffbd4a37"},{"code":"(fn [coll n]\n  (for [offset (range n)]\n    (apply concat (partition 1 n (drop offset coll)))))","problem":43,"user":"50a2f901e4b029e8bace362a"},{"problem":43,"code":"(fn [coll nmb] \n  (apply #(apply map list %&) (partition nmb coll)))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":43,"code":"(fn \n  [coll x]\n  (loop [idx x final '()]\n    (if (< idx 1)\n      final\n      (recur (dec idx) (cons (take-nth x (drop (dec idx) coll)) final)))))","user":"548db64ce4b0e286459a121c"},{"problem":43,"code":"(fn [s n]\n  (map (partial map second)\n    (map second (sort-by first (seq \n      (group-by #(mod (first %) n) (map-indexed #(vector %1 %2) s)))))))","user":"5638b88de4b0bfe05bf117e9"},{"problem":43,"code":"(fn reverse-interleave [xs x]\n  (let [ys (partition x xs) length (/ (count xs) x)]\n    (partition length (apply interleave ys))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":43,"code":"(fn [s n] (->> (partition n s)\n               (apply map list)))","user":"5879d577e4b01531a375ead8"},{"problem":43,"code":"(fn revint\n  ([s n acc] (if\n               (< (count s) n)\n               acc\n               (recur (drop n s) n (map conj acc (take n s)))))\n  ([s n] (revint s n (repeat n []))))","user":"5ee93720e4b029a2061bbeb7"},{"problem":43,"code":"(fn [col n]\n  (->> col\n  (partition n)\n  (apply map #(apply list %&))))","user":"5b98f7f3e4b0c0b3ffbd4ac2"},{"problem":43,"code":"(fn [list n] \n    (reduce \n        (fn [result batch] \n            (map conj result batch)\n        )\n        (take n (repeat []))\n        (partition n list))\n)","user":"5b67f0fbe4b0c6492753e76d"},{"problem":43,"code":"(fn [s, n]\n  (loop [i s, r []]\n    (let [a (apply concat (partition 1 n i))]\n        (if (< (count a) (count (last r)))\n          r\n          (recur (rest i) (conj r a))))))","user":"5590e55de4b0277789237676"},{"problem":43,"code":"(fn reverse-interleave \n  ([coll x] (reverse-interleave coll x 0 [])) \n  ([coll x i acc] \n   (if (empty? coll) acc \n     (reverse-interleave \n      (rest coll) \n      x \n      (inc i) \n      (assoc acc (mod i x) (conj (get acc (mod i x) []) (first coll)))))))","user":"507516d0e4b054001656acda"},{"code":"(fn pick-subseq [xs n]\n  (cond (empty? xs) '(())\n        (<= n 1) (list xs)\n        true ((fn func [ys m]\n                (cond (= m n) '()\n                      true (conj (func (rest ys) (+ m 1)) (take-nth n ys)))) xs 0) ))","problem":43,"user":"4ef6f5ea535dced4c769f250"},{"problem":43,"code":"(fn [nbs x] (map (fn [u] (map #(get %1 1) u)) (vals (group-by #(first %1) (let [y (dec x)] (take (count nbs) (map vector (iterate #(if (= %1 0) y (dec %1)) y ) nbs)))))))","user":"55b6a63ae4b01b9910ae299b"},{"problem":43,"code":"(fn [l n]\n    (apply map vector (partition n l)))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn rev [x n] (letfn [(xtr [l n m] (cond (empty? l) nil\n                                           (= m 0)\n                                           (cons (first l) (xtr (rest l) n (mod (+ m n -1) n)))\n                                           :else (xtr (rest l) n (mod (+ m n -1) n))))\n                      (coll [l m] (cond (= m -1) nil\n                                        :else (cons (xtr l n m) (coll l (- m 1)))))]\n                (reverse (coll x (- n 1)))))","problem":43,"user":"528b9efee4b0239c8a67aea0"},{"code":"(fn [coll x] (map (fn [c] (map second c)) (partition-by first (sort-by first (map (fn [item index] (list index item))\n       coll\n       (cycle (range x)))))))","problem":43,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":43,"code":"(fn [xs n]\n  (partition (/ (count xs) n)\n             (apply interleave (partition n xs))))","user":"589037b4e4b00487982d51d0"},{"problem":43,"code":"(fn f [xs n]\n  (->> xs\n       (map-indexed (fn [idx it] [(rem idx n), it]))\n       (group-by first)\n       (vals)\n       (map #(map second %))))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn [coll n] \n   (map #(map last %) (vals \n   (group-by \n    #(mod (first %) n) \n    (map-indexed \n     (fn [x y] [x y]) \n     coll)))))","problem":43,"user":"5260341ee4b03e8d9a4a7034"},{"code":"#(let [m (fn [n] (mod n %2))] (vals (group-by m %)))","problem":43,"user":"5098bcfee4b0cae2931060a1"},{"problem":43,"code":"(fn [s x]\n   (let [im (->> (partition x s)\n                 (map #(into [] %)))]\n     (for [i (range x)]\n       (map #(nth % i) im))))","user":"54c23252e4b045293a27f5fc"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (sort-by first (vals (reduce #(let [k (mod %2 n)\n                                      v (get %1 k [])]\n                                  (assoc %1 k (conj v %2))) {} coll))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":43,"code":"(fn [seq i]\n   ((fn helper [result seq]\n      (if (empty? seq)\n        result\n        (helper (map conj result (take i seq))\n                (drop i seq) )))\n    (repeat i [])\n    seq\n    )\n   )","user":"5ee75f8be4b029a2061bbea5"},{"problem":43,"code":"(fn reverse_interleave\n  [coll n]\n  (let [part (partition n coll)]\n    (for [i (range n)]\n      (map #(nth % i) part))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"code":"(fn [x n]\n  (for [i (range n)]\n    (keep-indexed #(if (= i (mod %1 n)) %2) x)))","problem":43,"user":"535526a2e4b04ce2eb3ed259"},{"problem":43,"code":"(fn\n  [col n]\n  (let [r (range n)]\n    (map (fn [v]\n           (keep-indexed #(if (= v (mod %1 n)) %2) col\n           )\n         ) \n     r)\n   )\n )","user":"58745926e4b01531a375ea50"},{"code":"(let [k (fn hill [x y z] (if (= x []) [] (if (> z 0) (hill (drop z x) y 0) (cons (first x) (hill (drop y x) y 0)))))] (fn [x y] (map #(k x y %) (range y))))","problem":43,"user":"4e1e7f88535d04ed9115e808"},{"problem":43,"code":"(fn [coll n]\n  (partition (quot (count coll) n)\n             (apply interleave (partition n coll))))","user":"56441634e4b0018b46ad8c08"},{"problem":43,"code":"(fn [l n]\n  ((fn ri [m c]\n     (if (< (count c) n)\n       m\n       (ri\n        (map-indexed\n         (fn [i e] (concat e [((vec c) i)]))\n         m)\n        (drop n c))))\n    (repeat n [])  l)\n)","user":"5881d1c2e4b0f1effa3b7644"},{"problem":43,"code":"(fn do-reverse-interleave [s x]\n  (vals (group-by #(mod (.indexOf s %) x) s)))","user":"52b71bd2e4b0c58976d9ad4d"},{"problem":43,"code":"(fn ri [v n & [ct ls] ] \n  (let \n    [ct (or ct 0) \n     ls (or ls ())]\n    (if (= ct n)\n\t  ls \n      (cons\n       ((fn ex [v ct & [ix nv]]\n          (let [ix (or ix ct)\n                nv (or nv [])]\n            (if (>= ix (count v))\n              nv\n              (cons (nth v ix) (ex v ct (+ ix n) nv) )\n            ))) v ct )\n       (ri v n (+ ct 1) ls)))))","user":"54d4bd2be4b0a52adc2e2005"},{"code":"(fn [xs n] (vals (group-by #(mod % n) xs)))","problem":43,"user":"4ebd4448535dfed6da9c6d8f"},{"code":"(fn [xs n]\n  (loop [a [], v (partition n xs)]\n    (if (some empty? v)\n      a\n      (recur (conj a (map first v)) (map rest v)))))","problem":43,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":43,"code":"#(apply (partial map vector) (partition-all %2 %1))","user":"5a624129e4b0512ff01cd987"},{"problem":43,"code":"(fn [s subs]\n  (second (reduce (fn [[i acc] e]\n                    [(inc i)\n                     (assoc acc (mod i subs) (conj (or (get acc (mod i subs)) []) e))]\n                    ) [0 []] s)))","user":"6026737ee4b0d5df2af2222f"},{"problem":43,"code":"(fn myfn [a x]\n\t(apply list \n\t(let [gooda (reverse (map-indexed (fn [ind v] [ind v]) a))\n\t\tn (count a)\n\t\tans (vec (repeat x '()))]\n\t\t(reduce\n\t\t(fn [ansl pr]\n\t\t\t(let [ind (mod (nth pr 0) x)\n\t\t\t\t key (nth pr 1)]\n\t\t\t\t (assoc ansl ind \n\t\t\t\t (conj (nth ansl ind) key))))\n\t\t(into [ans] gooda)))))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [coll n] (map #(take-nth n (nthrest coll %)) (range n)))","problem":43,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":43,"code":"#((apply juxt \n  (for [i (range %2)]\n    (fn [col] \n      (map last (filter (fn [v] (= i (mod (first v) %2))) col))))) \n  (map-indexed vector %1))","user":"5f3ab5ece4b004f08c61c52a"},{"code":"(fn revint [s n]\n  (loop [i 0\n         remain s\n         m (sorted-map)]\n    (if (empty? remain) (vals m)\n      (let [newi (mod (inc i) n)\n            [nextelt & restelts] remain\n            lu (vec (m i))\n            newlu (conj lu nextelt)\n            newm (assoc m i newlu)]\n        (recur newi restelts newm)))))","problem":43,"user":"4f036fb3535dcb61093f6ac8"},{"problem":43,"code":"(fn [s n]\n  (let [parted (partition n s)]\n    (for [index (range n)]\n      (map #(nth % index) parted))))","user":"54684c3be4b00cfc9eacc139"},{"code":"(fn reverse-interleave [xs n]\r\n  ((fn reverse-interleave-h [i]\r\n    (let [f (filter #(= (mod % n) (first xs)) xs)]\r\n      (if (= i n)\r\n        ()\r\n        (conj (reverse-interleave-h (inc i)) (map #(+ i %) f))))) 0))","problem":43,"user":"4dd023dd535d5973398f92ad"},{"code":"#(map (partial filter (complement nil?)) (apply mapv list (partition %2 %2 (repeat nil) %)))","problem":43,"user":"51f55bdae4b0abb92f97f9d0"},{"problem":43,"code":"(fn f [s n]\n  (loop [s s\n         subs (for [_ (range n)] (vector))]\n    (if (seq s)\n      (let [z (map vector subs (range n))]\n        (recur (drop n s) (for [p z] (conj (first p) (nth s (second p))))))\n      subs)))","user":"5643a11ee4b0018b46ad8bfb"},{"code":"(fn [sq nm]\r\n  (loop [i 0\r\n         osp sq\r\n         result nil]\r\n         (if (= i nm)\r\n            (reverse result)\r\n            (recur (inc i) (rest osp) (conj result (take-nth nm osp))))))","problem":43,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":43,"code":"(fn [xs n] \n  (apply map vector\n   (partition n xs)))","user":"598debf0e4b02b9968b84d2e"},{"problem":43,"code":"(fn [coll n]\n   (vals (group-by #(rem % n) coll))\n   )","user":"5687fe58e4b0dcc4269f4065"},{"code":"#(map (partial take-nth %2)\n      (take %2 (iterate rest %1)))","problem":43,"user":"506a1985e4b01dc6af13f83e"},{"problem":43,"code":"(fn [xs n]\n  (apply (partial map vector) (partition n xs)))","user":"57717915e4b0979f896515b3"},{"problem":43,"code":"(fn [lst n]\n  (->> lst\n       (map-indexed #(vector %1 %2))\n       (reduce (fn [ret [i v]] (let [modi (mod i n)] (assoc ret modi (conj (nth ret modi) v)))) (apply vector (repeat n (vector))))))","user":"591f05b4e4b09b4ee5954c42"},{"problem":43,"code":"(fn [xs n] (apply map vector (partition-all n n xs)))","user":"54ff074de4b07d26eda61d47"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (loop [x n coll coll result []]\n    (if (zero? x)\n      result\n      (recur (dec x) (rest coll) (conj result (take-nth n coll))))))","user":"6066266de4b069485764ddd2"},{"code":"(fn [s p]\n  (loop [r [] n p]\n    (if (> n 0)\n      (recur (cons (map #(nth % (dec n)) (partition p s)) r) (dec n))\n      r)))","problem":43,"user":"53219cece4b09d4e7a9b54b7"},{"code":"(fn [xs n] (->> \n  xs\n  (map-indexed #(list (rem (inc %) n) %2)) \n  (group-by #(nth % 0)) (mapcat (partial drop 1)) \n  (map #(mapcat (partial drop 1) %))))","problem":43,"user":"4fad33e8e4b081705acca236"},{"problem":43,"code":"(fn rinterleave [ l n]\n(partition (/ (count l) n) (sort-by #(mod (.indexOf l %) n) l)))","user":"57887de2e4b0ebec4cfb751c"},{"problem":43,"code":"(fn [coll n]\n   (loop [coll coll\n          result []]\n     (if (empty? coll)\n       (take n result)\n       (recur (drop 1 coll) (conj result (take-nth n coll))))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":43,"code":"(fn f43 [coll n]\n  (apply map list (partition n coll)))","user":"57bbc9bde4b05aa3c4741c31"},{"code":";; (fn [xs n] (map reverse (reduce (fn [m x] (map conj m x)) (repeat n ()) (partition n xs))))\n;; (fn [xs n] (map reverse (reduce (partial map conj) (repeat n ()) (partition n xs))))\n#(apply (partial map list) (partition %2 %1))","problem":43,"user":"533696b9e4b0e30313ee6c7c"},{"problem":43,"code":"(fn\n  [coll n]\n  (loop [results (repeat n (vector))\n         trimmed-coll coll]\n    (if (empty? trimmed-coll)\n      results\n      (recur (map #(conj %1 %2) results trimmed-coll)\n             (drop n trimmed-coll)))))","user":"5dd65ea4e4b0948ae9d9ad7f"},{"code":"#(apply map list (partition %2 %2 %))","problem":43,"user":"4ef0f1a1535dced4c769f212"},{"problem":43,"code":"(fn reverse-interleave [coll n-seq]\n    (map #(take-nth n-seq (drop % coll)) (range 0 n-seq)))","user":"55e1bb20e4b050e68259b41f"},{"problem":43,"code":"(fn [sequence num]\n  (loop [big-index 0\n         final-result []]\n    (if (>= big-index num)\n      (seq final-result)\n      (recur (inc big-index) (conj final-result (loop [index big-index\n                                                       result []] ; add seq\n                                                  (if (>= index (count sequence))\n                                                    (seq result)\n                                                    (recur (+ index num) (conj result (nth sequence index)))\n                                                    )\n                                                  )\n                                   ))))\n\n  )","user":"60194b7ae4b0bf4ca6b1091f"},{"problem":43,"code":"(fn [a b] \n  \n  ((fn tt[a b c]\n  (when(< c b)\n    (conj (tt a b (+ 1 c)) (take-nth b (drop c a)))\n    )\n  \n  ) a b 0)\n\n)","user":"53f12b77e4b0742d9025b0da"},{"problem":43,"code":"(fn [s n]\n  (->> s\n       (partition n)\n       (apply interleave)\n       (partition (/ (count s) n))))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn revleave [coll x]\n  (map (fn [offset] (take-nth x (drop offset coll)))                              \n       (range x)))","problem":43,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":43,"code":"(fn revInter [x y] (if (= y 0) x (concat (list (take-nth y x)) (revInter (flatten (map #(rest %) (partition y x))) (dec y)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [col grp]\n  (partition (/ (count col) grp) (apply interleave (partition grp col))))","problem":43,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn [a-coll subSeq]\n  (apply map list (partition subSeq a-coll)))","problem":43,"user":"50febf94e4b075812dd6dfb3"},{"code":"(fn [l count] \n  (loop [l l c count acc []]\n    (if (zero? c)\n      acc\n      (recur (rest l) (dec c) (conj acc (take-nth count l))))))","problem":43,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"(fn [s n] (apply map list (partition n s)))","problem":43,"user":"4db8ec47535d1e037afb219d"},{"problem":43,"code":"(fn [xs n]\n   (map (fn [[g xs]] (map (fn [[a b]] b) xs))\n        (group-by (fn [[g itm]] g)\n                  (map-indexed (fn [idx itm] [(mod idx n) itm]) xs)\n                  )\n        )\n   )","user":"59adec09e4b0e1f4e384c897"},{"problem":43,"code":"(fn [coll n]\n    (let [total_items (count coll)]\n        (loop [new_collections (into [] (repeat n (vector )))\n               index_coll 0\n               index_collections 0]\n            (if (= index_coll total_items)\n                new_collections\n                (if (= index_collections n)\n                    (recur new_collections index_coll 0)\n                    (recur \n                        (assoc new_collections index_collections (conj (nth new_collections index_collections) (nth coll index_coll)))\n                        (inc index_coll)\n                        (inc index_collections))\n)))))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":43,"code":"(fn [l n]\n(for [i (range n)] (take-nth n (drop i l ) ) )\n)\n;;(fn [l n] (loop [nn 0 res []]\n;;   (if (not= n nn)     (recur (inc nn) (conj res   (take-nth n (drop nn l ) ))) res  )))","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn unravel [s n]\n  (map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn [coll n]  (apply map list (partition n coll)))","problem":43,"user":"52d7f7efe4b09f7907dd1380"},{"problem":43,"code":"(fn [s p] (map #(take-nth p %) (take p (iterate rest s))))","user":"5a188be3e4b0ff51aa4b31ec"},{"code":"(fn  [v n]\n  (apply map vector (partition n v)))","problem":43,"user":"5276aa0de4b03e8d9a4a74ea"},{"problem":43,"code":"(fn [xs n]\n  (->>\n   (partition n xs)\n   (apply map vector)))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn inversein [s n]\n   (for [i (range n)\n         :let [items (for [x (range (count s)) :let [y (nth s x)] :when (= i (mod x n))] y)]\n        ]\n        items)\n)","problem":43,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn [xs n]\n  (let [nall (count xs)\n        ningroup (/ nall n)]\n    (for [i (range n)]\n      (for [j (range ningroup)]\n        (nth xs (+ i (* j n)))))))","problem":43,"user":"50bc23e4e4b0594b91591c3c"},{"problem":43,"code":"(fn rev-interleave [col parts]\n  (let [len (quot (count col) parts)]\n     (partition-all len (apply interleave (partition-all parts col)))\n    )\n  )","user":"6031926ae4b0d5df2af222ac"},{"problem":43,"code":"#(->> %1\n      (partition-all %2)\n      (apply map list))","user":"5bc39d2be4b07a9b28b10045"},{"problem":43,"code":"(fn [s n]\n  (apply map list (partition n s) )\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":43,"code":"(fn r\n\n([col n]\n  (r col n n '())\n)\n([col n cnt acc]\n  (if (> cnt 0)\n     (recur \n       (rest col)\n        n \n       (dec cnt)\n       (conj acc (take-nth n col))\n     )\n    (reverse acc)\n  )\n)\n\n\n)","user":"5beebdb7e4b0a6d31fed2132"},{"problem":43,"code":"(fn [coll x] (apply map list (partition-all x coll)))","user":"586bc870e4b01531a375e964"},{"problem":43,"code":"(let [enumerate\n      (fn [coll] (map vector (range) coll))\n      bucket-creator\n      (fn [n]\n        (reduce\n         (fn [ret-buck-map i] (assoc ret-buck-map i []))\n         {}\n         (range n)))\n      reverse-interleave-map\n      (fn [coll n]\n        (reduce\n         (fn [return-map [i item]]\n           (let [index (mod i n)]\n             (assoc return-map index (conj (return-map index) item))))\n         (bucket-creator n)\n         (enumerate coll)))\n      ]\n  (fn [coll n]\n    (map second (sort-by first (reverse-interleave-map coll n)))))","user":"5eecd339e4b07c55ae4a0507"},{"problem":43,"code":"(fn [coll n] (map (fn [i] (keep-indexed #(if (= i (mod %1 n)) %2) coll)) (range n)))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":43,"code":"(fn [col n] (apply (partial map list) (partition n col)))","user":"54c9f165e4b045293a27f687"},{"problem":43,"code":"(fn\n  [seq n]\n  (loop [newseq '() i 0]\n    (if (< i n)\n      (recur (conj newseq (filter #(= (rem (.indexOf seq %) n) i) seq)) (inc i) )\n      (reverse newseq)))\n  )","user":"5772ddb0e4b0979f896515d4"},{"code":"(fn [s n]\n  (letfn [(de-index [iv]\n            (last iv))]    \n    (let [indexed-s (map-indexed vector s)\n          grouped-s (group-by #(rem (inc (first %)) n) indexed-s)]\n      (map #(map de-index (val %)) grouped-s))))","problem":43,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":43,"code":"(fn [xs n]\n  (apply\n    map\n    vector\n    (partition n xs)))","user":"521d064fe4b0c4ef0be830a8"},{"problem":43,"code":"(fn foo [xs x]\n  (if \n    (empty? xs)\n    (repeat x ())\n    (map #(cons %1 %2)\n     \t xs\n         (foo (drop x xs) x))))","user":"54f904c2e4b01ecee9d88832"},{"code":"(fn rev-interleave\n  ([coll n]\n     (rev-interleave coll n n))\n  ([coll n c]\n     (when-let [s (seq coll)]\n       (when (not= c 0)\n         (cons (take-nth n s) (rev-interleave (rest coll) n (dec c)))))))","problem":43,"user":"523b82efe4b07becd5be21f0"},{"problem":43,"code":"#(->> (partition %2 %)\n       (apply interleave)\n       (partition (/ (count %) %2)))","user":"53b7c21ae4b047364c0444d4"},{"problem":43,"code":"(fn interchunk [coll size] (apply map list (partition size coll)))","user":"5db012e3e4b0f8c104ccfc95"},{"problem":43,"code":"(fn [c l]\n\t(for [k (range l)]\n      (take-nth l (drop k c)))\n)","user":"5412646de4b01498b1a719d4"},{"code":"(fn [s n]\r\n     (vals (group-by #(mod % n) s))\r\n  )","problem":43,"user":"5071e520e4b0e3170b5a8683"},{"code":"(fn mysplit3 [l num]\n    (let [splitreduce2\n        (fn f [num res index l]\n        (let\n        [\n            veci (quot index num)\n            ivec (if (= 0 index) nil (get res veci))\n        ]\n            (if (empty? l)\n            res\n            (let [newres (if (= 0 (mod index num))\n                            (conj res (vector (first l)))\n                            (assoc res veci (conj ivec (first l)))\n                        )\n                ]\n                (f num newres (+ index 1) (rest l))\n            )\n            )\n        )\n        )\n        ]\n    (apply (partial map vector) (splitreduce2 num [] 0 l))\n        )\n)","problem":43,"user":"52573608e4b0cb4875a45c76"},{"code":"(fn [s c]\n     (let [ mi (map-indexed #(vector (mod %1 c) %2) s) ]\n       (for [x (range c) ]\n         (map second (filter #(= x (first %)) mi)))))","problem":43,"user":"5046b003e4b011c5dfee7727"},{"problem":43,"code":"(fn [lst parts]\n  (loop [i 0 accume []]\n\t(if (= i parts)\n\t    accume\n\t  (recur (inc i) (conj\n\t\t\t  accume\n\t\t\t  (map\n\t\t\t   (fn [n]\n\t\t\t       (nth lst (+ i (* n parts))))\n\t\t\t   (range (/ (count lst) parts))))))))","user":"4e7e241a535db169f9c79705"},{"problem":43,"code":"#(let [col (partition %2 %1)]\n   (apply map vector col))","user":"563c48e7e4b0bfe05bf11832"},{"problem":43,"code":"(fn [xs n]\n  (->> (interleave (flatten (repeat (range n))) xs)\n    (partition 2)\n    (group-by first)\n    vals\n    (map (partial map second))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":43,"code":"(fn [v n] (apply map vector  \n           (partition n v) ))","user":"57408f87e4b05c31a32c0856"},{"code":"(fn revleave [coll cnt]\n  (let [pred #(if (= (mod % cnt)) %2 nil)]\n    (loop [c coll acc [] n 0]\n      (if (= n cnt)\n        acc\n        (recur (rest c)\n               (conj acc\n                     (keep-indexed\n                      (fn [a b]\n                        (if (= 0 (mod a cnt)) b nil))\n                      c))\n               (inc n))))))","problem":43,"user":"509e8da7e4b08df8156e9e2f"},{"problem":43,"code":"(fn [liste n] (for [x (range n)] \n                (for [y (range (/ (count liste) n))] \n                  (nth liste (+ x (* n y)) \n                  )\n                )\n              )\n)","user":"5800ab1ee4b0a837a8b30c41"},{"code":"(fn[s, n](keep #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4e6df3c9535d5021c1a895fa"},{"problem":43,"code":"(fn [xs n]\n  (let [len (count xs)]\n    (partition (/ len n)\n               (for [m (range 0 n), n (range m len n)]\n                 (nth xs n)))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"code":"(fn rinterleave [xs n]\r\n  (let [xis (map vector xs (range(count xs)))]\r\n    (map #(map first %)(vals(group-by (fn[[x i]](mod i n)) xis)))))","problem":43,"user":"4edeac6b535d10e5ff6f533a"},{"code":"(fn [xs n]\n  (vals\n   (group-by (fn [x] (mod x n)) xs)))","problem":43,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"problem":43,"code":"(fn partdiv [somelist n] (apply map list (partition n somelist)))","user":"5641f0ede4b08d4f616f5f11"},{"problem":43,"code":"(fn cc [ li n]\n  (let \n    [it (fn  [n s]\n          (map #(= % s) (cycle (take n  (iterate inc 0)))))\n     esc (fn esc [li n s]\n           (map first (filter second  (map vector li (it n s)))))]\n    (map #(esc li n %) (range n))))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":43,"code":"#(loop [coll %1 n %2 answer1 [] answer2 []]\n   (if (empty? coll)\n     (concat answer1 answer2)\n     (if (= n 0)\n      (recur coll %2 [] answer1)\n      (recur (rest coll) (dec n) \n       (conj answer1 (conj (vec (first answer2)) (first coll)))\n       (rest answer2)\n      )\n     )\n    )\n)","user":"560fe558e4b05f002753df63"},{"problem":43,"code":"(fn [col n]\n  (map\n   #(map second %)\n   (vals \n    (group-by \n     #(mod (second %) n) \n     (map-indexed vector col)\n     )\n    )\n   )\n  )","user":"54c94376e4b045293a27f665"},{"code":"(fn [s n]\n    (map\n      (fn [i] (map first (partition-all n (drop i s))))\n      (range 0 n)))","problem":43,"user":"4ff58b05e4b0678c553fc36b"},{"code":"(fn [coll n]\n  (vals (group-by #(mod (.indexOf coll %) n) coll)))","problem":43,"user":"535d4b0ae4b04ce2eb3ed2be"},{"problem":43,"code":"(fn [coll step] (apply map list (partition-all step coll)))","user":"5cee521ce4b0aaa82f1129dd"},{"code":"(fn [x n]\n  (let [filter-col(fn [[i col]]\n                     (let [m (/ (count col) n)]\n                       (map \n                         nth\n                         (repeat col)\n                         (take m (iterate #(+ % n) i)))\n                       ))\n        ]   \n    (->>\n      (repeat n x)\n      (map vector (iterate inc 0))\n      (map filter-col)\n      )))","problem":43,"user":"4f616892e4b0defedf855fbf"},{"code":"(fn reverse-interleave [coll l]\n  (let [parts (partition l coll)]\n    (println parts)\n    (for [n (range l)]\n      (map #(nth %1 n) parts))))","problem":43,"user":"52319066e4b0e2e8de81d1e9"},{"problem":43,"code":"#(apply (partial map vector) (partition-all %2 %))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn reverse-interleave [xs n]\n  (letfn [(every [xs n]\n            (if (seq xs)\n              (cons (first xs) (every (drop (dec n) (rest xs)) n))\n              ()))\n          (reverse-interleave-count [ys c]\n            (if (pos? c)\n              (cons (every ys n) (reverse-interleave-count (rest ys) (dec c)))\n              ()))]\n    (reverse-interleave-count xs n)))","problem":43,"user":"4fb710f4e4b081705acca2cd"},{"problem":43,"code":"(fn [source-list num-of-partitions]\n  (loop [l source-list\n         p (vec (repeat num-of-partitions []))\n         i 0]\n    (if (< 0 (count l)) \n      (let [[h & r] l \t\t\t\t\t\t\t\t;; take head from source list\n            next-index (mod (inc i) num-of-partitions) \t\t\t\t;; compute next index\n            part (nth p i)\t\t\t\t\t\t\t;; get partition\n            updated-partition (conj part h)\t\t\t;; update partition\n            updated-partitions (assoc p i updated-partition)] ;; update partitions\n        (recur r updated-partitions next-index))\n      p)))","user":"573b8f67e4b0cd1946bd10ae"},{"problem":43,"code":"#(for [i (range %2) ] (map (fn [x] (nth x i)) (partition %2 %)))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":43,"code":"(fn [coll n]\n    (apply mapv list (partition n coll)))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"#(for [j (range %2)]\n   (keep-indexed\n    (fn [i v]\n      (if (= (mod (- i j) %2) 0)\n        v\n        nil))\n    %))","problem":43,"user":"4dbdc898535d020aff1edf4a"},{"problem":43,"code":"(fn reverse-interleave\n  [xs n]\n  (let [with-index (map-indexed vector xs)]\n    (map #(map second %) (vals (group-by #(mod (first %) n) with-index)))))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"(fn rev-il\n    [v n]\n    (let [rev-il-append (fn \n                            [v i val]\n                            (let [vi (if (< i (count v)) (v i) [])]\n                                (let [new-vi (assoc vi (count vi) val)]\n                                    (assoc v i new-vi))))]\n    (map #(apply list %) \n        (loop [v v i 0 v-out []]\n            (if (empty? v) v-out\n                (recur (rest v) (inc i) (rev-il-append v-out (rem i n) (first v))))))))","problem":43,"user":"5235a902e4b0a643f2dcb750"},{"code":"#(reduce (fn [acc y] (concat (rest acc) [(concat (first acc) [y])])) (repeat %2 []) %)","problem":43,"user":"5216933be4b000d124d989cf"},{"problem":43,"code":"(fn [s x]\n   (let [acc (vec (repeatedly x #(identity [])))]\n     (loop [in-s s i 0 in-acc acc]\n       (if (empty? in-s) \n         in-acc\n         (let [target-seq (nth in-acc i)]\n           (recur (rest in-s) (if (= i (dec x)) 0 (inc i)) (assoc in-acc i (conj target-seq (first in-s)))))))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":43,"code":"(fn [s i]\n  (->> (flatten (repeat (/ (.size s) i) (range 0 i)))\n       (interleave s)\n       (partition 2)\n       (group-by #(nth % 1))\n       (map #(map first (second %)))\n       ))\n\n;(map list [:a :b] [:c :d] [:e :f])\n;((:a :c :e) (:b :d :f))\n\n;(apply map list [[:a :b] [:c :d] [:e :f]])\n\n;#(apply map list (partition %2 %1))","user":"582cbf48e4b051871117bfa6"},{"problem":43,"code":"(fn [col n]\n  (letfn [(consume [cols]\n                   (cons (map first cols)\n                         (lazy-seq\n                          (when (ffirst cols)\n                            (consume (map rest cols))))))]\n    (drop-last (consume (partition n col )))))","user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [xs n]\n  (letfn [(f [ys i]\n            (if (= i n)\n            ()\n            (cons (take-nth n ys)\n                  (f (rest ys) (inc i)))))]\n    (f xs 0)))","problem":43,"user":"4ee3b586535d10e5ff6f5371"},{"problem":43,"code":"(fn [xs n] (apply map list (partition-all n xs) ))","user":"6076adb2e4b069485764de60"},{"code":"(fn [input n]\n  (apply map list (partition n input)))","problem":43,"user":"527a69cee4b03e8d9a4a755d"},{"code":"(let [strip (fn strip [x y z]\n              (filter #(= 0 (mod (+ % y) z)) x))]\n(fn ri \n  ([x y] (ri x y y))\n  ([x y z]\n  (if (< y 2)\n    (list (strip x y z))\n    (sort #(compare (first %1) (first %2)) \n          (concat (list (strip x y z)) \n                  (ri x (- y 1) z)))))))","problem":43,"user":"52e17e66e4b09f7907dd1423"},{"problem":43,"code":"(fn [s n]\n  (apply map vector (partition-all n s)))","user":"59750a68e4b01722bebd4cba"},{"problem":43,"code":"(fn [c n]\n (loop [r [] c c i n]\n  (if (zero? i)\n    r\n    (recur (conj r (take-nth n c)) (rest c)(dec i)))))","user":"586615e6e4b0f14aab7c8858"},{"code":"(fn rinterleave [coll n]\n  (apply (partial map list) (partition-all n coll)))","problem":43,"user":"4fe91fa2e4b0547ebccb2440"},{"problem":43,"code":"(fn [xs n]\n  (for [i (range n)]\n    (take-nth n (drop i xs))))","user":"540ff039e4b01498b1a7199b"},{"code":"(fn [v c]\n  (partition (/ (count v) c) (apply interleave (partition c v)))\n)","problem":43,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [xs n] \n  (loop [ls xs acc (repeat n [])]\n   (if (seq ls)\n       (recur (drop n ls) (map #(conj % %2) acc (take n ls)))\n       acc)))","problem":43,"user":"4eb0a757535d7eef3080733d"},{"code":"#(map (fn [n] (take-nth %2 (drop n %))) (range %2))","problem":43,"user":"51037468e4b00c483ae17702"},{"problem":43,"code":"(fn f [s n]\n   (if-not (seq s)\n     (repeat n '())\n     (map conj (f (drop n s) n) (take n s))))","user":"5549ff9ae4b0a04f7929956e"},{"code":"(fn [xs y]\n  (let [parts (partition y xs)]\n    (map\n     (fn [i] (map #(nth % i) parts))\n     (range 0 y))))","problem":43,"user":"52379c46e4b0fae3832e99db"},{"problem":43,"code":"(fn rev-interleave [lst num-sec]\n\t(if (= (mod (count lst) num-sec) 0)\n\t\t(do\n\t\t\t(let [rem-idx (map #(mod % num-sec) (range (count lst)))\n\t\t\t\t  map-idx (map list rem-idx lst)]\n\t\t\t\t(for [x (range num-sec)] (map #(second %) (filter #(= (first %) x) map-idx)))\n\t\t\t)\n\t\t)\n\t\t(rev-interleave (drop-last (mod (count lst) num-sec) lst) num-sec)\n\t)\n)","user":"569e3175e4b0542e1f8d1484"},{"code":"(fn [xs n]\n  (loop [lst xs acc (repeat n nil)]\n    (if (empty? lst)\n      (map reverse acc)\n      (recur (drop n lst) (map cons (take n lst) acc)))))","problem":43,"user":"523c6451e4b07becd5be2222"},{"problem":43,"code":"(fn [x-seq n]\n    (loop [res (sorted-map)\n           sq x-seq\n           idxs (cycle (range n))]\n      (if sq\n        (recur (assoc\n                 res\n                 (first idxs)\n                 (cons (first sq) (res (first idxs))))\n               (next sq)\n               (next idxs)) \n        (map reverse (vals res)))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":43,"code":"(fn f [s x]\n  (let [sub (fn subs [s n x]\n              (if (>= (count s) x)\n                (conj (subs (drop x s) n x) (nth s n))))]\n        (loop [seq-final []\n               i 0]\n               (if (>= i x)\n                seq-final\n                (recur (conj seq-final (sub s i x)) (+ i 1))))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":43,"code":"(fn [coll num-subseq]\n  (let [subseq-assignment (take (count coll) (flatten (repeat (range 1 (inc num-subseq)))))\n        zipped-together (map list coll subseq-assignment)\n        separated (map first (sort-by second zipped-together))\n        num-elements-per-subseq (/ (count coll) num-subseq)]\n    (partition num-elements-per-subseq separated)))","user":"541cf6dfe4b01498b1a71a7a"},{"problem":43,"code":"(fn [col n] (let [s (partition n col)] (->> (range 0 n) (map (fn [i] (map #(nth % i) s))))))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":43,"code":"#(partition\n    (/ (count %1) %2) \n    (apply interleave\n               (partition %2 %1)))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn [col n]\n  (partition (/ (count col) n)\n            (apply interleave (partition n col)) ))","problem":43,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn self [xs n]\n  (if (empty? xs)\n    (repeat n nil)\n  \t(map concat (map list (take n xs)) (self (drop n xs) n))))","problem":43,"user":"524b90fae4b09eba1c0223df"},{"problem":43,"code":"#(for [i (range %2)] (doall (take-nth %2 (drop i %))))","user":"543b4746e4b032a45b86932c"},{"problem":43,"code":"(fn [coll num]\n  (map #(map first %)\n       (map second\n            (group-by second\n                      (map #(list % (mod %2 num))\n                           coll (range (count coll)))))))","user":"56bf4ac0e4b0f26550335985"},{"code":"(fn [s cnt]\n  (sort-by first (partition \n    (/ (count s) cnt) \n      (sort-by #(rem % cnt) (seq s)))))","problem":43,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":43,"code":"(fn reverse-interleave [s n]\n  ((fn reverse-interleave' [s n i]\n    (if (= i 1)\n      (list (take-nth n s))\n      (cons (take-nth n s) (reverse-interleave' (rest s) n (dec i)))))\n   s n n))","user":"5cab33e7e4b048ec896c5c48"},{"problem":43,"code":"(fn rev-int [c n] \n  (apply map vector (partition n c)))","user":"584f5133e4b0b7285a6f4e61"},{"code":"(fn [lst n]\n  (map #(apply concat (partition 1 n (drop % lst))) (range n)))","problem":43,"user":"4e83bb61535db62dc21a62dd"},{"problem":43,"code":"(fn magic [x, c]\n\t(mapcat #(list (flatten (partition 1 c (drop % x)))) (range c))\n)","user":"5a214798e4b0ff51aa4b32aa"},{"code":"(fn t[lst n] \n  (map \n    #(take-nth n (drop % lst)) \n    (range n)))","problem":43,"user":"4f1fd734535d64f6031464a5"},{"problem":43,"code":";(fn [s n] (map last (group-by #(mod % n) s)))\n\n(fn de-interleave [coll n]\n  (for [i (range n)] (take-nth n (drop i coll))))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":43,"code":"(fn [seq n] (map #(take-nth n (drop % seq)) (range n)))","user":"5a86ad84e4b05369db4d249c"},{"code":"(fn m [x n]\n  (if (= [] x)\n      (take n (cycle [[]]))\n      (map cons (take n x) (m (drop n x) n))))","problem":43,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":43,"code":"(fn[y x] (partition (quot (count y) x) (for[j (range 0 x) i (range 0 (quot (count y) x)) ] (nth y (+ j (* x i)) []))))","user":"53f1c05ee4b0742d9025b0e1"},{"problem":43,"code":"(fn [sqnce n] (apply map list (partition n sqnce)))","user":"52b89d55e4b07a9af57922b3"},{"code":"(fn rint [s n]\n  (loop [s s pos 0 res (vec (take n (repeat [])))]\n    (if (not (seq s)) res\n        (recur (rest s)\n               (mod (inc pos) n)\n               (assoc-in res [pos] (conj (res pos) (first s)))))))","problem":43,"user":"4f0ef874535d0136e6c22328"},{"problem":43,"code":"(fn [coll n]\n        (apply map list (partition n coll)))","user":"59438419e4b060784b3b7929"},{"problem":43,"code":"#(\n  (fn [buffer current moduls remain]\n    (if (empty? remain)\n      buffer\n      (let [currbuff (buffer current)]\n        (recur\n         (assoc buffer current \n           (concat currbuff [(first remain)])\n           )\n         (rem (inc current) moduls)\n         moduls\n         (rest remain)\n        )\n      )\n    )\n  ) (into [] (repeat %2 [])) 0 %2 %1\n)","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [l n]\n  (loop [l l\n         acc (vec (repeat n '[]))\n         c 0]\n    (if (empty? l)\n      acc\n      (recur (rest l)\n             (let [seq-head (vec (take c acc))\n                   new-val (vec (conj (get acc c) (first l)))\n                   seq-tail (vec (drop (+ 1 c) acc))]\n               (cond (empty? seq-head) (vec (cons new-val seq-tail))\n                     (empty? seq-tail) (vec (into (vec seq-head) [new-val]))\n                     :else (vec (into (conj seq-head new-val) seq-tail))))\n             (if (= c (-  (count acc) 1))\n               0\n               (+ 1 c))))))","problem":43,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":43,"code":"(fn reverseinterleave [coll n] (for [i (range n)] (take-nth n (drop i coll))))","user":"5739c2fee4b0cd1946bd107a"},{"code":"(fn [coll x] (map #(rest (take-nth x (concat (repeat (- x %) 0) coll))) (range x)))","problem":43,"user":"51307b84e4b08c712d3fae39"},{"problem":43,"code":"(fn [x n] (sort (vals (reduce (fn [a [i m]] (assoc a i (conj (a i []) m))) {} (map-indexed (fn [i m] [(mod i n) m]) x)))))","user":"4f070ce6535dcb61093f6c1e"},{"code":"(fn ! ([x y] (! x y 1))    \n      ([x y z]  \n       (if (< y z)  \n         nil   \n         (concat \n          [(! x y z z)] \n          (! x y (inc z)))))    \n      ([x y z w]   \n       (if (empty? x)  \n         nil   \n         (if (= w 1) \n           (concat [(first x)] (! (rest x) y z y))  \n           (! (rest x) y z (dec w))))  ))","problem":43,"user":"52faec2ee4b047fd55837004"},{"problem":43,"code":"(fn inter [iters seq num]\n   (if (not (= iters num))\n     (concat (conj '() (take-nth num seq))  (inter (inc iters) (rest seq) num)))) 0","user":"5508102ee4b021ccfedb96b0"},{"problem":43,"code":"(fn [s n]\n  (let [r (take n (repeat []))]\n     (loop [s s r r]\n        (if (empty? s) r\n           (recur (rest s) (conj (apply vector (rest r)) (conj (first r) (first s))))\n        )  \n     ) \n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"#(loop [xs %1 n %2 result '()]\n    (if (zero? n)\n      (reverse result)\n      (recur (next xs) (dec n) (conj result (take-nth %2 xs)))))","problem":43,"user":"51d5af00e4b01da06753aa93"},{"problem":43,"code":"(fn [allstuff n]\n\t(loop [final (map (comp vector (partial nth allstuff)) (range n))\n\t\t\tstuff (drop n allstuff)]\n\t\t(if (empty? stuff)\n\t\t\tfinal\n\t\t\t(recur (map #(conj (nth final %) (nth stuff %)) (range n))\n\t\t\t\t(drop n stuff)))))","user":"5b2a559be4b063e2438bcc74"},{"problem":43,"code":"(fn rev-interleave [s step]\n  (letfn [(gather [s step]\n            (apply concat (partition 1 step s)))]\n    (map #(gather (drop % s) step) (range step))))","user":"5d272077e4b092dab7f59c64"},{"problem":43,"code":"(fn [s num] \n\t(let [ivec (map-indexed #(vector (mod %1 num) %2) s)]\n\t  (vals (sort (reduce\n\t\t\t\t\t(fn [ret x]\n\t\t\t\t\t\t(let [index- (first x), val- (last x)]\n\t\t\t\t\t\t\t(assoc ret index- (conj (get ret index- []) val-))))\n\t\t\t\t\t{} ivec)))))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [s n]\n  (for [i (range n)]\n    (map #(nth % i)\n    (partition n s))))","problem":43,"user":"4ec6559a535d6d7199dd36c9"},{"code":"(fn reverse-interleave\n  ([xs n] (reverse-interleave xs n 0))\n  ([xs n count]\n     (if (= count n)\n       '()\n       (cons (take-nth n xs)\n             (reverse-interleave (rest xs) n (inc count))))))","problem":43,"user":"520693e1e4b0bf4f1882c829"},{"problem":43,"code":"(fn [s n]\n  (for [i (range n)]\n \t   (keep-indexed #(when (zero? (mod (- % i) n)) %2) s)))","user":"5654d0e1e4b0f9d632dd848c"},{"problem":43,"code":"(fn my-rev-inter\n  [coll n]\n  (apply map list (partition-all n coll))\n)","user":"5c75a30ee4b0fca0c16227df"},{"problem":43,"code":";(\n (fn [sq step]\n ((fn pick [res sq i] \n  (if (< i 1) res\n    (pick \n      (conj res \n            (take-nth step sq))\n      (rest sq)\n      (dec i))))\n  [] sq step))\n  \n  ;[1 2 3 4 5 6] 2)","user":"56366f73e4b0bfe05bf117cc"},{"problem":43,"code":"(fn [col n] ( map #( reduce concat (partition 1 n (drop % col))) (range n)))","user":"56fa2905e4b07572ad1a88be"},{"problem":43,"code":"(fn [l v] (map #(map second (second %)) (group-by #(mod (first %) v) (map-indexed list l))))","user":"56372798e4b0bfe05bf117d0"},{"problem":43,"code":"(fn [coll n] \n  (apply map list (partition-all n coll)))","user":"5de82145e4b0986d99407f7b"},{"problem":43,"code":"(fn reverse-interleave [xs n]\n  (let [m (/ (count xs) n)\n        partitioned (partition n xs)\n        sorted (apply interleave partitioned)]\n    (partition m sorted)))","user":"5ed3c43be4b016b56eae05c4"},{"code":"(fn [coll n]\n  (vals (group-by #(rem (.indexOf coll %) n) coll)))","problem":43,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [coll x] (map (fn [n] (map #(nth % n) (partition-all x coll))) (range x)))","problem":43,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":43,"code":"(fn [c n] (map #(take-nth n\n                 (drop % c)) (range n)))","user":"58c1b4f5e4b021aa9917ed01"},{"problem":43,"code":"(fn reverse-interlevae\n  [c n]\n  (\n    ->> c\n        (partition n)\n        (apply map (partial conj []) )\n    )\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":43,"code":"(fn [coll i] (apply map vector (partition i coll)))","user":"56e6d049e4b02e7e935eb6cd"},{"problem":43,"code":"(fn [s n]\n   (loop [start (first s)\n          end   (last s)\n          s     s\n          r     []\n          i     0]\n     (if (>= i n)\n       r\n       (recur\n        (+ i start)\n        (+ i end)\n        (rest s)\n        (conj r (take-nth n s))\n        (inc i)))))","user":"5a084a24e4b01bb0ae8afdf2"},{"problem":43,"code":"#(apply map list (partition %2 %))\n;(fn [xs n] (vals (group-by #(rem (.indexOf xs %) n) xs)))","user":"57ba55c1e4b0fbc9809a2801"},{"code":"(fn [l c] \n  (for [n (range c)] (map #(nth % n) (partition c l))))","problem":43,"user":"50563ae2e4b0ce54f56f0405"},{"problem":43,"code":"(fn resort-record \n  ([input partition-count] \n   (let [data (partition partition-count input)\n         step-count (count (first data))\n         result '()]\n     (resort-record data step-count result)))\n  ([data step-count result] \n   (if (zero? step-count)\n     result\n     (recur data \n            (dec step-count) \n            (conj result (map \n                          #(nth % (dec step-count)) \n                          data))))))","user":"553093bee4b076ab5578f817"},{"problem":43,"code":"(fn function [item n]\n  (for [i (range n)]\n    (take-nth n (drop i item))))","user":"5f792d48e4b02876ed9fd0c5"},{"code":"(fn [s n] (map #(map (fn [p] (nth p %)) (partition n s)) (range n)))","problem":43,"user":"516db4f6e4b046df6fbb76a0"},{"problem":43,"code":"(fn [seq count]\n  (apply (partial map list) (partition count seq)))","user":"5553b924e4b0deb715856e06"},{"problem":43,"code":"(fn [coll n] \n    (reverse\n        (loop [i 0 res '()]\n            (if (< i n)\n                (recur (inc i) (conj res (take-nth n (drop i coll))))\n                res\n            )\n        )\n    )\n)","user":"54996971e4b0b312c081ff8d"},{"problem":43,"code":"(fn [se x] (map (fn [p] (take-nth x (drop p se))) (range x)))","user":"59bdeb22e4b0a024fb6ae42d"},{"code":"(fn rileave [s n]\n  (if (seq s)\n      (map cons (take n s) (rileave (drop n s) n))\n      (repeat n '())))","problem":43,"user":"4f70afb8e4b07046d9f4effb"},{"code":"(fn [coll n] (map (fn [i] (keep-indexed #(when (= (rem %1 n) i) %2) coll)) (range n)))","problem":43,"user":"50e3ec87e4b0463d32072486"},{"problem":43,"code":"(fn [c x]\n  (loop [c1 c\n         i x\n         accum nil]\n    (if (zero? i)\n      (reverse accum)\n      (recur (rest c1) (dec i) (cons (take-nth x c1) accum)))))","user":"53a7e3b9e4b047364c044423"},{"problem":43,"code":"#(->> %1 (partition-all %2) (apply map vector))","user":"544e8369e4b0e39780006987"},{"problem":43,"code":"(fn RevInter [array x]\n  (apply map list  (partition x array))\n)","user":"5a534241e4b05d388ecb6c0a"},{"code":"#( apply map list ( partition %2 %1))","problem":43,"user":"4f030775535dcb61093f6a43"},{"code":"#(loop [seq %1\n         k 0\n         acc (repeat %2 '())]\n    (if (empty? seq)\n      (map reverse acc)\n      (do\n        (print seq)\n        (if (= k %2)\n          (recur seq 0 acc)\n          (recur (rest seq) (inc k) (concat (take k acc) (list (cons (first seq) (nth acc k))) (drop (inc k) acc)))))))","problem":43,"user":"533d2ea5e4b085b17e897d7a"},{"problem":43,"code":"(fn [coll n]\r\n  (apply mapcat\r\n         #(list %&)\r\n         (partition n coll)))","user":"4f601623e4b0defedf855fa3"},{"problem":43,"code":"(fn rInter [xs n]\n  (loop [orig xs\n         cnt 0\n         result []]\n    (if (= cnt n)\n      result\n      (recur (rest orig) (inc cnt) (conj result (flatten (partition 1 n orig)))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":43,"code":"(fn revinter [s n]\n  (loop [s s\n         c 0\n         r (repeat n [])]\n    (if (empty? s)\n      r\n      (let [p (rem c n)]\n        (recur (rest s)\n               (inc c)\n               (loop [r r\n                      p p\n                      t []]\n                 (if (= p 0)\n                   (into t (conj (rest r) (conj (first r) (first s))))\n                   (recur (rest r) (dec p) (conj t (first r))))))))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn solution [s n]\n  (apply map list (partition n s))\n  )","problem":43,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"#(for [m (range %2)] (take-nth %2 (drop m %)))","problem":43,"user":"4fe8e719e4b0547ebccb2430"},{"problem":43,"code":"(fn rinterleave [col n]\n  (let [divisable? #(zero? (mod % n))]\n    (map\n      #(reduce-kv \n         (fn [acum i x] (if (divisable? i) (conj acum x) acum)) \n         []\n         (vec (drop % col)))\n      (range n))))\n\n;; (defn rinterleave2 [col n]\n;;   (let [partitions (mapv (fn [_] (transient [])) (range n))]\n;;     (doseq [i (range (count col))]\n;;        (conj! (partitions (mod i n)) (col i)))\n;;     (map persistent! partitions)))","user":"60606490e4b03746e80ebf67"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (partition n)\n       (apply map list)))","user":"5e12b21be4b099d064962feb"},{"code":"(fn [c n] (partition (quot (count c) n) (apply interleave (partition n c))))","problem":43,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn my-reverse-interleave [s n]\n  (if (< (count s) n)\n    (concat (map list s) (repeat (- n (count s)) '()))\n    (map cons (take n s) (my-reverse-interleave (drop n s) n))))","problem":43,"user":"5310e7aee4b08068f379ecdc"},{"problem":43,"code":"(fn [obj n]\n  (letfn [(eachnth [s index no result]\n                   (cond (empty? s) result\n                         (= index n) (recur (rest s) 1 no (concat result (list (first s))))\n                         :else (recur (rest s) (inc index) n result)))]\n  (loop [o obj nm n result '()]\n    (if (= nm 0) (reverse result)\n      (recur (rest o) (dec nm) (conj result (eachnth o n n '())))))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn [col n]\n (map  (fn [v] (map second (second v) )) (group-by first (map-indexed  (fn [idx itm] [(mod idx n) itm] )  col)))\n  )","problem":43,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":43,"code":"(fn [lat n](->> (partition-all n lat) (apply mapv vector )))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn reverse-interleave [coll n]\n  (loop [i 1 coll coll result '()]\n    (if (> i n)\n        (reverse result)\n        (recur (+ i 1)\n               (next coll)\n               (cons (take-nth n coll) result)))))","problem":43,"user":"4e4b4564535dc968683fc4d3"},{"code":"(fn [l c]\n  (let [cols (range 0 (count l) c)\n        rows (range c)\n        ]\n    (map\n     (fn [r]\n       (map\n        (fn [c]\n          (nth l (+ r c))\n          )\n        cols\n        )\n       )\n     rows\n     )\n    )\n  )","problem":43,"user":"4f031883535dcb61093f6a5e"},{"problem":43,"code":"(fn reverse-interleave3\n  [s n]\n  (for [x (range n)]\n    (let [indices (range x (count s) n)]\n      (keep-indexed (fn [index item]\n                      (when (some #{index} indices)\n                        item))\n                    s))))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":43,"code":"(let [drop-nth (fn [n coll]\n                     (loop [l (rest coll) cnt (dec n) acc '()]\n                       (if (empty? l)\n                         (reverse acc)\n                         (if (zero? cnt)\n                           (recur (rest l) (dec n) acc)\n                           (recur (rest l) (dec cnt) (conj acc (first l)))))))]\n      (fn [coll n]\n        (loop [l (seq coll) cnt n acc '()]\n          (if (zero? cnt)\n            (reverse acc)\n            (recur (drop-nth cnt l) (dec cnt) (conj acc (take-nth cnt l)))))))","user":"5f86a98be4b0649ffcda4caa"},{"code":"(fn [c x]\n  (map \n\t\t#(map (partial nth c) (range % (count c) x)) \n\t\t(range x)))","problem":43,"user":"4ec16c21535dfed6da9c6dac"},{"problem":43,"code":"(fn reverse-interleave-map-indexed [coll n]\n  (->> coll\n       (map-indexed #(vector (rem %1 n) %2))\n       (sort-by #(first %))\n       (map #(second %))\n       (partition (/ (count coll) n))))","user":"5776e21de4b0979f89651642"},{"code":"(fn[coll,n]((comp (partial map (partial map last)) vals group-by) #(mod (first %) n) (map-indexed vector coll)))","problem":43,"user":"4fc50525e4b081705acca370"},{"problem":43,"code":"(fn [coll n] (for [i (range n)]\n   (mapcat identity (partition 1 n (nthrest coll i)))))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":43,"code":"(fn reverse-interleave\n  [lst n]\n  (->>\n    (sort-by #(mod % n) lst)\n    (partition (/ (count lst) n))\n    (sort-by #(first %))))","user":"5aa00b7fe4b0d174b936c825"},{"problem":43,"code":"(fn [coll n]\n  (reduce \n    (fn [m x]\n      (apply vector\n        (map\n          #(conj (nth m %) (nth x %))\n          (range 0 n))))\n    (repeat n [])\n    (partition n coll)))","user":"4df73d64535d04ed9115e775"},{"code":"(fn [coll x]\n   (let [partition \n         (loop [store {} index 0]\n           (if (= index x)\n             store\n             (recur (into store {index []}) (inc index))         \n           )\n           )\n         ]\n\t   (loop [result partition elements coll i 0]\n\t     (if elements\n\t       (recur (into result {(mod i x) (conj (result (mod i x)) (first elements))}) (next elements) (inc i))\n\t       (vals result)\n\t       )     \n\t     )   \n   )\n   )","problem":43,"user":"5106dc1be4b01150e115ebf0"},{"code":"(fn rev-inter [s n]\n  (if (empty? s) '()\n    (apply list (map (partial take-nth n) (take n (iterate rest s))))))","problem":43,"user":"5119f3d5e4b06c8af0111818"},{"problem":43,"code":"(fn p43 [seq num]\n\n  (loop [currentseq (take num seq)\n        restt (nthrest seq num)\n        acc (take num (repeat []))]\n\n    (if (empty? restt)\n      (map-indexed\n\n        (fn [i n]\n          (conj n (nth currentseq i))\n          )\n        acc  )\n        (recur\n          (take num restt)\n          (nthrest restt num)\n          (map-indexed\n\n            (fn [i n]\n              (conj n (nth currentseq i))\n              )\n            acc  )\n\n          )\n\n      )\n\n    )\n\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn [s n]\n       (let [r (range n)\n             t (partition 2 (interleave s (cycle r)))]\n         (map #(map first %) (for [x r] (filter #(= (second %) x) t)))))","problem":43,"user":"4e5676b2535d8a8b8723a282"},{"problem":43,"code":"(fn rint \n  ([coll val] (rint coll val 0 (into [] (take val (repeat[])))))\n  ([coll val cur ret]\n    (if (empty? coll)\n      ret\n      (recur (rest coll) val (mod (inc cur) val) (update-in ret [cur] conj (first coll))))))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":43,"code":"(fn [c n] \n   (let [p (partition-all n c)] \n     (loop [i 0 r []] \n       (if (< i n) \n         (recur (inc i) (conj r (map #(nth % i) p))) \n         r))))","user":"53f78944e4b0de5c41848561"},{"problem":43,"code":"#(first (reduce\n   (fn [[a p] n]\n     [(update-in a [(mod p %2)] conj n) (inc p)])\n   [(vec (repeat %2 [])) 0] %))","user":"50d0d2dde4b00b15ecee9768"},{"code":"(fn [coll x]\n  (for [i (range x)]\n    (map #(nth coll %) (range i (count coll) x))))","problem":43,"user":"52525a0ee4b0541d1855b8a2"},{"problem":43,"code":"(fn reverse_interleave \n  ([coll n] (reverse_interleave coll n 1))\n  ([coll n i] \n    (lazy-seq \n      (when (<= i n)\n        (cons (take-nth n coll) (reverse_interleave (rest coll) n (inc i)))))))","user":"53f35c34e4b0742d9025b0f4"},{"code":"(fn [xs n]\n  (partition (/ (count xs) n) (apply interleave (partition n xs))))","problem":43,"user":"521e4f22e4b0dd19981ad079"},{"code":"(fn [lst n]\n  (map reverse\n   ((fn [l res]\n      (if (empty? l) res\n        (recur (drop n l) (map conj res (take n l)))))\n    lst\n    (repeat n '()))))","problem":43,"user":"51da631be4b02ceefd947766"},{"problem":43,"code":"(fn unint\n  [coll x]\n  (loop [acc (repeat x [])\n         pos 0\n         curr (first coll)\n         left (rest coll)]\n    (if (= curr nil)\n      acc\n      (recur\n        (concat\n          (take (mod pos x) acc)\n          (vector (conj (nth acc (mod pos x)) curr))\n          (drop (inc (mod pos x)) acc)\n         )\n        (inc pos)\n        (first left)\n        (rest left)))))","user":"53ac4719e4b047364c04445c"},{"code":"#(for [i (range %2)] (take-nth %2 (nthrest %1 i)))","problem":43,"user":"51a584c7e4b051b01d55f44e"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n\t(let [step n, len (quot (count coll) n)]\n\t\t(letfn [(get-the-seq [i midresult] \n\t\t\t\t\t\t(if (= (count midresult) len)\n\t\t\t\t\t\t\tmidresult\n\t\t\t\t\t\t\t(recur (+ i step) (conj midresult (nth coll i)))))]\n\t\t\t(loop [b 0, result []]\n\t\t\t\t(if (= b n)\n\t\t\t\t\tresult\n\t\t\t\t\t(recur (inc b) (conj result (get-the-seq b []))))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn [xs n] (map #(take-nth n (drop % xs)) (range n)))","problem":43,"user":"50e3ddd4e4b01912b3285c47"},{"code":"(fn [xs n] \n  (let [ts (take (/ (count xs) n)\n              (iterate #(concat (drop n %) \n                                (take n %)) xs))]\n    (for [x (range n)]\n        (map #(nth % x) ts))))","problem":43,"user":"4ee82ce9535d93acb0a6687a"},{"problem":43,"code":"(fn [xs k] (map seq (vals (group-by #(mod % k) xs))))","user":"5ed4a4ade4b016b56eae05cd"},{"problem":43,"code":"#(for [x (range %2)] (take-nth %2 (nthnext %1 x)))","user":"5bc09ebae4b07a9b28b10005"},{"problem":43,"code":"(fn [s n]\n\t(loop [remainer 0 result []]\n\t\t(if (= remainer n)\n\t\t\tresult\n\t\t\t(recur \n\t\t\t\t(inc remainer)\n\t\t\t\t(conj result \n\t\t\t\t\t(keep-indexed #(if (= (mod %1 n) remainer) %2) s)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n )","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [col n]\n  (let [fs (map\n              #(comp (partial take-nth n) (partial drop %))\n              (range n))]\n    ((apply juxt fs) col)))","problem":43,"user":"525431dfe4b0541d1855b970"},{"code":"(fn inter [sequen split]\n  (vals(group-by (fn [x] (mod x split)) sequen))\n)","problem":43,"user":"50f87a67e4b0aafb827eb202"},{"problem":43,"code":"(fn [ls n]\n    (map #(take-nth n %)\n         (take n (iterate rest ls))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":43,"code":"(fn [coll n]\n     (reverse (loop [i 0, l (list)]\n       (if (= i n)\n         l\n         (recur (inc i)\n                (conj l \n                      (take-nth n (nthrest coll i))\n                )\n         )\n         )\n       ))\n     )","user":"52a90056e4b0c58976d9ac39"},{"code":"(fn [s n] (for [x (range n)]\n              (map #(nth % x) (partition-all n s))))","problem":43,"user":"5262c73fe4b03e8d9a4a7098"},{"problem":43,"code":"(fn uninterleave [col n]\n   (:res\n     (reduce\n       (fn [{:keys [i res]} e]\n         (let [j (rem i n)]\n           {:i   (inc i)\n            :res (assoc res j (conj (get res j) e))}))\n       {:i   0\n        :res (vec (repeat n []))}\n       col)))","user":"5f300f28e4b033932238a682"},{"problem":43,"code":"; this is the shortest version i could come up with\n; but it's O(N^2)\n; i have an O(N) impl but requires mutating vectors\n(fn deinterleave [l n]\n\t(for [x (take n l)] (filter #(= (mod % n) (mod x n)) l))  \n)","user":"54c82b27e4b045293a27f645"},{"problem":43,"code":"(fn [coll n] (map (fn [ndx] (take-nth n (drop ndx coll))) (range n)))","user":"5353afa0e4b084c2834f4b03"},{"problem":43,"code":"(fn [col x]\n  (->> col\n       (partition-all x)\n       (apply map list))\n  )","user":"568d381ee4b0dcc4269f40c1"},{"problem":43,"code":"(fn [arr s] \n\t(map #(take-nth s %)\n\t\t(map #((apply comp (concat [identity] (repeat % rest))) arr) (range s))\n\t\t)\n)","user":"59449aa2e4b0b03edd0057ad"},{"code":"#(for[i (range %2)](map(fn[r](nth r i))(partition %2 %)))","problem":43,"user":"4e57d1e2535d8a8b8723a289"},{"problem":43,"code":"(fn [xs c]\n  (apply map vector (partition c xs)))","user":"550f1c99e4b06e50f9beb171"},{"problem":43,"code":"(fn [coll n]\n  (let [partitioned (partition-all n coll)\n        list-nth (fn [i] (map #(nth % i) partitioned))]\n    (map list-nth (range n))))","user":"56d15251e4b0ea9b8538f78c"},{"problem":43,"code":"(fn [coll number]\n  (map \n    #(->> % (nth (iterate rest coll)) (take-nth number)) \n    (range number)\n  )\n)","user":"5ab1665de4b073f1774425c0"},{"problem":43,"code":"(fn [coll x]\n\n  (map second (seq (group-by #(rem % x) coll)))\n  )","user":"5a43347ee4b0447ef91cc603"},{"problem":43,"code":"(fn [x n]\n  \n  (map #(take-nth n (nthrest x %)) (range 0 n))\n)","user":"5f574662e4b0a0bc16850a90"},{"problem":43,"code":"(fn [xs k] \n  (->> xs\n       (map-indexed (fn [i e] (vector (mod i k) e)))\n       (sort)\n       (partition-by first)\n       (map (partial map second))))\n\n;(fn [xs k] \n;  (map (partial map second) \n;       (partition-by first \n;                     (sort (map-indexed (fn [i e] \n;                                          (vector (mod i k) e)) \n;                                        xs)))))","user":"57a4bb65e4b0a966079561eb"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range 0 n)] (take-nth n (drop i coll)))\n  )","user":"55240916e4b0882d96d091b6"},{"code":"(fn revinterleave\n  [coll x]\n  (apply map list (partition x coll)))","problem":43,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"(fn ri [coll n]\n  (for [[k v]\n        (group-by #(mod (first %1) n)\n                  (map-indexed #(list %1 %2) coll))]\n    (map #(second %) v)))","problem":43,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [coll n]\n  (partition (/ (count coll) n)\n            (apply interleave (partition n coll))))\n\n; #(apply (partial map (fn [& args] (apply list args)))\n;         (partition %2 %1))","problem":43,"user":"4ec6297b535d6d7199dd36c4"},{"code":"#(for [off (range %2)] (take-nth %2 (drop off %1)))","problem":43,"user":"50956c2be4b087f34d351ab2"},{"problem":43,"code":"(fn [orig parts] (let [extractor #(loop [i %1 y %2 offset %3 acc (+ 1 offset) result []]\n        (if (empty? i)\n          (seq result)\n          (if (= acc 1)\n            (recur (rest i) y 0 y (conj result (first i)))\n            (recur (rest i) y 0 (dec acc) result))\n          ))] (for [x (range parts)] (extractor orig parts x))))","user":"560c37b5e4b05f002753df2e"},{"code":"#(apply mapcat (fn [& c] (list* c []))\n  (partition %2 %1))","problem":43,"user":"4db8f6c4535d1e037afb219e"},{"problem":43,"code":"#(for [k (range %2)] (for [t (partition %2 %)] (nth t k)))","user":"4f5eda39e4b0030a34fb2b56"},{"code":"#(loop [n %2 s % l []]\n   (if (= n 0)\n     l\n     (recur (- n 1) (next s) (conj l (take-nth %2 s)))))","problem":43,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn [lst n]\n  (let [group (group-by #(mod (first %) n) (map-indexed vector lst))]\n    (map #(map second %) (map group (range n)))))","problem":43,"user":"510db6cde4b078ea71921145"},{"code":"(fn [xs n]\n   (let [ixs (map #(vector %1 %2) xs (range))]\n    (for [i (range n)]\n        (map first (filter #(zero? (mod (- (second %1) i) n)) ixs)))))","problem":43,"user":"4e4ca885535dc968683fc4df"},{"problem":43,"code":"(fn\n  [s n]\n  (reduce #(map conj % %2) (repeat n []) (partition n s)))","user":"56bb652ae4b0f26550335953"},{"problem":43,"code":"(fn [ell n]\n  (apply map vector (partition-all n ell)))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":43,"code":"(fn [coll subsequences] \n  (apply map list (partition subsequences coll)))","user":"55842c7ee4b05c286339e11d"},{"problem":43,"code":"#(apply map vector (partition %2 %1 ))","user":"5a18488ee4b0ff51aa4b31e5"},{"problem":43,"code":"(fn [s n]\n    (for [x (range n)]\n      (map #(nth % x) (partition n s))))","user":"537bde5de4b06839e8705e73"},{"code":"(fn [cols c]\r\n  (vals (group-by #(mod % c) cols))\r\n)","problem":43,"user":"4dc7f472535d8a4b2fd74293"},{"problem":43,"code":"(fn [data n]\n    (apply map list (partition n data)))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn [x n] (let [s (quot (count x) n)]\n  (map #(take s (take-nth n (drop % x))) (range n))))","problem":43,"user":"4ea9b80c535d7eef30807306"},{"problem":43,"code":"(fn reverse-interleave\n  [collection number-intervals]\n  (map \n   (fn [interval-number]\n     (take-nth \n      number-intervals \n      (subvec (vec collection) interval-number)))\n   (range number-intervals)))","user":"54ef7568e4b024c67c0cf885"},{"problem":43,"code":"(fn [coll n] (\nfor [i (range n)] (\ntake-nth n (drop i coll)\n)\n))","user":"56f9b953e4b07572ad1a88b9"},{"code":"(fn [xs n] \n  (map \n    (fn [i] \n      (map #(nth % i)\n           (partition-all n xs))) \n    (range n)))","problem":43,"user":"52a04f0ee4b04e0c58e87bc1"},{"code":"(fn [s n]\n    (map (fn [l] (map last l))\n      (vals\n      (group-by \n        (fn [l] (mod (first l) n))\n        (map-indexed list s)))))","problem":43,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":43,"code":"(fn [s n]\n  (let [len (count s)\n        idxs (map #(range % len n) (range 0 n))]\n    (map (fn [interl] (map #(nth s %) interl)) idxs)))","user":"58ee84e5e4b056aecfd47dab"},{"code":"(fn [coll n]\n  (for [i (range n)]\n    (map #(nth coll %) (map #(+ % i) (range 0 (count coll) n)))))","problem":43,"user":"504c8165e4b09724c857af31"},{"code":"(fn [x n]\n  (for [i (range n)]\n    (take-nth n (drop i x))))","problem":43,"user":"502a5e59e4b09e8f859a9fbc"},{"problem":43,"code":"(fn -ntrlv [s n] \n  (loop [s s r [] i n]\n    (if (zero? i)\n      r\n      (recur\n        (rest s)\n        (conj r (take-nth n s))\n        (dec i)\n      )\n    )\n  )\n)","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn [coll n]\r\n  (loop [[x & xs :as coll] coll, \r\n          count 0, acc (vec (repeat n '()))]\r\n    (if (empty? coll)\r\n        (apply list (map reverse acc))\r\n        (recur xs (mod (+ 1 count) n) \r\n               (assoc acc count \r\n                      (cons x (nth acc count)))))))","problem":43,"user":"4fb37882e4b081705acca2a0"},{"problem":43,"code":"(fn [s num]\n  (for [i (range num)]\n    (take-nth num (drop i s))\n    )\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":43,"code":"(fn inter [coll n]\n  (let [worker (fn worker [start]\n                (loop [c   (drop start coll)\n                       acc []]\n                  (let [i (first c)]\n                    (println i)\n                    (println acc)\n                    (println c)\n                    (if (not (nil? i))\n                      (recur (drop n c) (conj acc i))\n                      acc))))]\n    (map worker (range n))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":43,"code":"(fn [s num] \n  (let [val (map-indexed #(vector (mod % num) %2) s)]\n              (vals (sort (reduce\n                            (fn [ret x]\n                              (let [k (first x), v (last x)]\n                                (assoc ret k (conj (get ret k []) v))))\n                            {}\n                            val)))))","user":"5a99b861e4b0d174b936c7ad"},{"problem":43,"code":"(fn [coll step]\n  (let [n (/ (count coll) step)]\n    (partition n (apply interleave (partition step coll)))))","user":"543a8256e4b032a45b869327"},{"code":";(fn [l m]\n;            (for [k (range m)]\n;              (for [[i j] (map-indexed vector l) :when (zero? (rem (- i k) m))] j)))\n\n(fn f [c m]\n  (for [i (range m)]\n    (for [n (take (/ (count c) m)\n                  (iterate (partial + m) i))]\n      (nth c n))))\n\n; (fn [s n]\n;          (map (fn [i]\n;                 (map (fn [ss] (nth ss i))\n;                      (partition n s)))\n;               (range n)))","problem":43,"user":"4ee26f01535d10e5ff6f5368"},{"problem":43,"code":"(fn revInt [x y] (apply map vector (partition-all y x)))","user":"58866b4fe4b0f1effa3b76d4"},{"problem":43,"code":"(fn [ se n] (loop [s se start 0  res [] ]\n( if (> start (dec n))\nres\n( recur ( next s ) ( inc start) ( conj res ( take-nth n s) ) ) ) ))","user":"5a1c8c26e4b0ff51aa4b3247"},{"code":"(fn reverse-interleave [x y]\r\n  (map last (group-by #(mod % y) x)))","problem":43,"user":"4fa58500e4b081705acca1ae"},{"code":"(fn \t[s n]\n\t(map #(take-nth n (drop % s)) (range 0 n )))","problem":43,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":43,"code":"(fn [s x] \n  (loop [it x r s out '()] \n    (if (= it 0) \n      (reverse out) \n      (recur \n       (dec it) \n       (rest r) \n       (conj out (take-nth x r))))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":43,"code":"(fn [x y]\n  (let [cache (reverse (into () x)) ]\n   (loop [data cache zaehler y init 0 start 0 position 0 sublist () result ()]\n     (if (= zaehler (count result))\n       (reverse result)\n       (if-not (= (count sublist) (/ (count data) zaehler))\n         (recur data zaehler init start (+ position zaehler) (cons (nth data position) sublist) result)\n         (recur data zaehler init (inc start) (inc start) '()  (cons (reverse sublist) result))\n         )\n       )\n     ))\n)","user":"567f034be4b0feffd0d18eba"},{"problem":43,"code":"(fn rev-interleave [a-seq num-seqs]\n  (map #(take-nth num-seqs (drop % a-seq)) (range num-seqs)))","user":"5235493ee4b05e80434a5064"},{"problem":43,"code":"(fn [coll num-subs]\n  (->> coll \n       (map-indexed #(vector %1 %2))\n       (group-by #(rem (first %1) num-subs))\n       (vals)\n       (map #(map second %))))","user":"52860baae4b0239c8a67ae09"},{"problem":43,"code":"(fn [xs c]\n  (vals (group-by #(mod % c) xs))\n)","user":"583dacc2e4b089d5ab817d9f"},{"problem":43,"code":"(fn bla\n  [coll x]\n  (let [coll1 (partition x coll) \n       result\n        (loop [current coll1 n '()]\n          (if (empty? (first current)) n\n                                       (recur (map rest current) (conj n (map first current)))\n                                       )\n          )]\n    (reverse result)\n    )\n  )","user":"5e9d99f9e4b0157ca9664806"},{"code":"(fn reverse_interleave [l n]\n  (loop [l l\n         r []\n         c 1]\n    (if (> c n)\n        r\n        (recur (rest l) (conj r (keep-indexed #(if (= 0 (mod %1 n)) %2) l)) (inc c)))))","problem":43,"user":"52a5a8ebe4b0c58976d9abed"},{"code":"#(loop [p (partition %2 %) ri []]\n          (if (empty? (flatten p))\n            ri\n            (recur (map rest p) (concat ri (list (map first p))))))","problem":43,"user":"4fa9da14e4b081705acca1e7"},{"code":"(fn ri [xs n]\n  (let [lri (fn acc [i]\n              (if (>= i (count xs))\n                nil\n                (lazy-seq (cons (nth xs i) (acc (+ i n))))))]\n    (map lri (range n))))","problem":43,"user":"4f7f0827e4b06e829148e1d5"},{"code":"(fn [sq n]\n  (for [x (range n)] (map #(nth % x) (partition n sq))))","problem":43,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn [seq n] (apply map vector (partition n seq)))","problem":43,"user":"4e5411e8535d8a8b8723a279"},{"problem":43,"code":"(fn [xs n]\n  (reduce\n   #(update-in %1 (rest %2) conj (first %2))\n   (vec (repeat n []))\n   (map-indexed (fn [i x] [x (mod i n)]) xs)))","user":"5f2d6787e4b033932238a66d"},{"problem":43,"code":"(fn [v n]\n   (let [update (fn [m k f] (assoc m k (f (get m k))))\n         f (fn [[x & xs :as all] i acc]\n             (cond\n               (nil? x) acc\n               (= n i) (recur all 0 acc)\n               :else (recur xs\n                            (inc i)\n                            (update acc i #(conj % x)))))\n         acc-vec (vec (map (fn [_] []) (range n)))]\n     (f v 0 acc-vec)))","user":"56e2ca59e4b03a7c14b85a38"},{"code":"(fn [l n] (apply map vector (partition-all n l)))","problem":43,"user":"4daf4d2fedd6309eace4d178"},{"code":"(fn n-seq [coll n]\n  (map #(take-nth n (drop % coll)) (range 0 n)))","problem":43,"user":"52c8758be4b0c2d177d62135"},{"problem":43,"code":"(fn [ys n] \n  (map reverse \n       (loop [xs ys i 0 a (into [] (repeat n ()))] \n         (cond (empty? xs) a \n               :else (let [m (mod i n) \n                           c (conj (nth a m) (first xs))] \n                       (recur (rest xs) (inc i) (assoc a m c)))))))","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":43,"code":"(fn [xs n]\n  (for [i (range n)]\n    (->> xs (drop i) (take-nth n))))","user":"52d95491e4b09f7907dd13a4"},{"problem":43,"code":"(fn sp [xs n]\n  (let [put (fn [acc [el i]]\n              (update-in \n               (vec acc) [i] \n               (partial cons el)))]\n    (reverse \n     (reduce put \n             (take n (repeat ()))\n             (map vector \n                  (reverse xs) \n                  (flatten (repeat (range n))))))))","user":"57df2722e4b0bd073c20245e"},{"code":"(fn [l n]\n  (map \n    (fn [x]\n      (keep-indexed #(if (= x (mod %1 n)) %2) l))\n    (range n)))","problem":43,"user":"4f70bcf9e4b07046d9f4effe"},{"code":"(fn [coll n]\n  ((fn part [c i]\n     (if (= 0 i) nil\n       (cons \n         (take-nth n c) \n         (part (drop 1 c) (dec i))))) \n  coll n))","problem":43,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":43,"code":"(fn rev-int [seq n]\n\t(letfn [(prepare [rep res]\n\t\t(if (= rep 0)\n\t\t\tres\n\t\t\t(prepare (- rep 1) (conj res []))))]\n\n\t(loop [xs seq res (prepare n []) pos 0]\n\t\t(if (empty? xs)\n\t\t\tres\n\t\t\t(recur (rest xs) \n\t\t\t\t\t\t\t\t\t\t(assoc res (mod pos n) (conj (nth res (mod pos n)) (first xs)))\n\t\t\t\t\t\t\t\t\t\t(+ pos 1))))))","user":"5c87c79be4b048ec896c591b"},{"problem":43,"code":";#(vals (group-by (fn [x] (mod x %2)) %1))\n\n#(apply map list (partition %2 %1))","user":"5fae3d8ae4b08cb800c85afa"},{"problem":43,"code":"#(apply map list( partition %2 %1))","user":"5417385fe4b01498b1a71a08"},{"problem":43,"code":"(fn unin [coll n]\n (loop [s (apply hash-map (reduce #(conj %1 %2 []) [] (range n)))\n        i 0\n        [head & tail] coll]\n   (let [curr-subseq (get s i)\n         new-subseq (conj curr-subseq head)\n         new-s (assoc s i new-subseq)]\n     (if (empty? tail)\n       (map new-s (sort (keys new-s)))\n       (recur new-s (mod (inc i) n) tail)\n     )\n   )\n )\n)","user":"59073e0fe4b047aa04b19950"},{"problem":43,"code":"#(reduce (fn [acc x] (conj acc (->> %1 (drop x) (partition 1 %2) (flatten))))\n         [] (range %2))","user":"56cf115de4b0ea9b8538f765"},{"problem":43,"code":"(fn [coll n] (reduce #(map cons %2 %1) (take n (repeat '())) (reverse (partition n coll))))","user":"569c1038e4b0542e1f8d145f"},{"problem":43,"code":"(let\n  [sub (fn sub\n         [coll init step]\n         (if (< init (count coll)) (concat [(nth coll init)] (sub coll (+ init step) step)) []))]\n  (fn [coll step] (map #(sub coll % step) (range step))))","user":"5b465b8be4b02d533a91bc65"},{"problem":43,"code":"(fn\n  [lst n]\n  (let [step (quot (count lst) n)]\n      (->> (partition n lst)\n           (apply interleave)\n           (partition step))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [coll nm]\n    (map\n            (fn [x] \n                (map \n                    (fn [y] (+ y (nth coll x))) ;       \n                    (take (/ (count coll) nm) (iterate #(+ % nm) 0))\n                )         \n            )\n    \n            (range nm)\n    )\n)","problem":43,"user":"4e78dc98535db95036265724"},{"problem":43,"code":"(fn [l n]\n  (loop [news '() c 0 tmpl l]\n    (if (= n c)\n      (reverse news)\n      (recur (conj news (take-nth n tmpl)) (inc c) (rest tmpl)))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn [col n]\n  (let [len (count col)\n        group-size (/ len n)\n        ]\n    (for [i (range n)]\n      (for [j (range group-size)]\n        (nth col (+ i (* j n)))))))","problem":43,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":43,"code":"; step 1, break it up into partitions\n; (partition n coll) \n\n; step 2, the first elem of each gets put into its group, the second elem of each in another. Perfect job for map\n; (map (fn [& x] x) partition1 partition2 ...)\n; which can be simplified with list or vector:\n; (map list partition1 partition2 ...) \n\n; step 3, but we need to apply the result of step 1 against the process of step 2\n\n; all together:\n#(apply map list (partition %2 %1))","user":"5ebd7296e4b00a66d4a95273"},{"code":"(fn [is n] (loop [s is i 0 r (vec (repeat n []))] (if (empty? s) r \n                                                      (recur (rest s) (inc i) (assoc r (rem i n) \n                                                                                     (conj \n                                                                                       (nth r (rem i n)) (first s))))))\n)","problem":43,"user":"536f2faee4b0fc7073fd6e79"},{"problem":43,"code":"(fn [l n] (map (fn [x] (map #(nth l %) (range x (count l) n))) (range 0 n)))","user":"536e5b68e4b0fc7073fd6e6d"},{"code":"(fn [coll n]\n  (reduce\n    (fn [acc d]\n      (conj acc (take-nth n (drop d coll)))) [] (range n)))","problem":43,"user":"51d08d67e4b067c365486351"},{"code":"(fn [c n]\n (map\n  (fn [i]\n   (map #(nth c (+ (* n %) i)) (range (/ (count c) n))))\n  (range n)))","problem":43,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn my-reverse-interleave [l n]\n  (apply map list (partition n l)))","problem":43,"user":"50812debe4b01a93d3f38e4c"},{"problem":43,"code":"#(->> % (partition %2) (apply map list))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":43,"code":"(fn rev-int [lst n]\n  (for [j (range n)] (take-nth n (drop j lst))))","user":"5f727cb0e4b02876ed9fd08e"},{"code":"(fn [l n] (vals (group-by #(mod %1 n) l)))","problem":43,"user":"510d3dc6e4b078ea71921132"},{"problem":43,"code":"( fn rev_interleave [s n] (apply map vector (partition n s) ) )","user":"600b385ce4b074f607df668d"},{"problem":43,"code":"(fn [col N] (apply map list (partition N col)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":43,"code":"(fn rever_interleave [s n]\n  (loop [res [] i 0 s_i s]\n    (if (< i n)\n      (recur (conj res (take-nth n s_i)) (inc i) (take-last (dec (count s_i)) s_i))\n      res\n      )\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"code":"(fn [coll x]\n  (apply map list (partition x coll)))","problem":43,"user":"509b152be4b0412cdea6eb1e"},{"code":"(fn [s n]\n  (take-while #(= (count %) (/ (count s) n))\n    (map #(take-nth n %) (iterate next s))))","problem":43,"user":"4fc13433e4b081705acca32b"},{"problem":43,"code":"(fn f1[x a]\n (map\n  (fn f2[d]\n   (map\n    (fn f3[b] (second b))\n    (filter\n     (fn f4[g] (= d (mod (first g) a)))\n     (map (fn[e f] [e f]) (range 99) x)\n    )\n   )\n  )\n  (range 0 a)\n )\n)","user":"54283a7ae4b01498b1a71b2f"},{"problem":43,"code":"(fn [col n] (->> col (partition n) (apply (partial map list))))","user":"5f0e8312e4b0f30dddfb5d5b"},{"code":"(fn [v n] (map (fn [x]\n  (keep-indexed #(if (= x (mod % n)) %2) v))\n  (range n)))","problem":43,"user":"4ed152d5535d44c135fd68cc"},{"problem":43,"code":"(fn [coll x] \n   (for [step (range x)] \n     (take-nth x (drop step coll))))","user":"51ae350fe4b09397d5109790"},{"problem":43,"code":"(fn [s c]\n  (map #(take-nth c (drop % s)) (range c)))","user":"5148bcbee4b05514c84b7cc6"},{"code":"(fn [x n]\n  (map #(take-nth n (drop % x)) (range n)))","problem":43,"user":"5110b8bae4b04c71fce993f4"},{"problem":43,"code":"(fn [sq n]\n  (vals (group-by #(mod % n) sq)))","user":"55868660e4b059ccff29b1d4"},{"code":"(fn [xs n]\n  (reduce\n    #(loop [i 0 ys %1]\n      (if (< i n)\n        (recur (inc i) (concat (take i ys) [(concat (nth ys i) [(nth %2 i)])] (drop (inc i) ys)))\n        ys\n      )\n    )\n    (repeat n [])\n    (partition n n nil xs)\n  )\n)","problem":43,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":43,"code":"(fn rev-interleave [s n]\n  (let [group-map (fn [s n] (apply hash-map (interleave s (cycle (range 0 n)))))\n        m (group-map s n)]\n    (map seq (vals (group-by m s)))))","user":"5392500ae4b0b51d73faaeaf"},{"code":"(fn f [c s n] (if (= n c) nil (cons (take-nth n (drop c s)) (f (inc c) s n)))) 0","problem":43,"user":"504e9f5ce4b069badc5a33bd"},{"code":"(fn [coll n]\r\n  (partition (/ (count coll) n) (apply interleave (partition n coll))))","problem":43,"user":"4df168bd535d08e6dec9fe1d"},{"code":"(fn [coll n]\n  (loop [xs coll acc (repeat n [])]\n    (if (empty? xs)\n      acc\n      (recur (drop n xs) (map #(conj %2 %1) xs acc)))))","problem":43,"user":"4e36425c535deb9a81d77f33"},{"problem":43,"code":"#(let [mod? (fn [t] (fn [x] (= (mod x %2) t))) \nfilter-f (fn [t] (filter (mod? t) %1))\ncomparator (fn [e1 e2] (compare (first e1) (first e2)))] \n(->> (range %2)\n(map filter-f)\n(sort comparator)))","user":"5e13a6b7e4b099d064963001"},{"problem":43,"code":"(fn s [l n]\n  (let [ri (fn ri [l n i acc]\n    (if (< i n)\n      (ri (rest l) n (inc i) (cons (take-nth n l) acc))\n      acc))]\n       (reverse (ri l n 0 []))))","user":"5897dda4e4b00487982d52c8"},{"problem":43,"code":"#(apply map (fn [& args] args) (partition %2 %1))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"(fn [c a] (for [x (range 0 a)] (map #(nth % x) (partition a c))))","problem":43,"user":"52810225e4b0757a1b171418"},{"code":"#(for [m (range %2)] \n    (for [n (range m (count %1) %2)]\n    (nth %1 n)))","problem":43,"user":"51f28a64e4b0210f90e7454e"},{"problem":43,"code":"(fn [coll parts]\n  (apply map list (partition parts coll)))","user":"53286f84e4b09d4e7a9b5505"},{"problem":43,"code":"(fn [s x]\n  (letfn [(my-split-with [s]\n            (if (empty? s) '()\n                (cons (take x s) (my-split-with (drop x s)))))]\n    (apply map list (my-split-with s) )))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":43,"code":"(fn [coll n]\n  (let [len (count coll)\n        v (range 0 n)\n        idx-v (map #(range % len n) v)]\n    (map \n     (fn [c] \n       (map #(nth coll %) c)\n       )\n     idx-v\n     )\n    )\n  )","user":"532dbd3ce4b019098a6f8b40"},{"problem":43,"code":"(fn [coll n]\n  (let [empty-coll (repeat n [])]\n    (loop [result empty-coll\n           c coll]\n      (if (empty? c)\n        result\n        (recur (map conj result (take n c)) (drop n c))))))","user":"4ea8570f535d7eef308072f8"},{"problem":43,"code":"(fn rev-inter\n  ([a-seq seqs] (rev-inter a-seq seqs '()))\n  ([a-seq seqs new-seqs]\n   (cond\n     (empty? a-seq)\n     new-seqs\n     (< (count new-seqs) seqs)\n     (recur (rest a-seq) seqs (concat new-seqs (list (list (first a-seq)))))\n     :else\n     (recur (rest a-seq) seqs (concat (rest new-seqs) (list (concat (first new-seqs) (list (first a-seq)))))))))","user":"574e84e0e4b02ea114799243"},{"code":"#(let [pieces %2]\n   (apply map list (vec (map vec (partition-all pieces pieces %1)))))","problem":43,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn ri\n  ([xs n iteration]\n  (if (< iteration n)\n    (cons (take-nth n xs)\n      (ri (rest xs) n (inc iteration)))))\n  ([xs n]\n  (ri xs n 0)))","problem":43,"user":"4fab1ea1e4b081705acca210"},{"problem":43,"code":"(fn [seq x] (vals (group-by #(mod % x) seq)))","user":"55a0e139e4b0acc240e31504"},{"problem":43,"code":";; Tail recursion\n(fn reverse-interleave [coll n & ret]\n  (if (empty? ret)\n    (apply reverse-interleave (concat (list coll n) (repeat n ())))\n    (if (empty? coll)\n      (map reverse ret)\n      (recur (drop n coll) n (map cons (take n coll) ret)))))","user":"55b69e37e4b01b9910ae2999"},{"code":"(fn [xs n]\n  (let [with-index (map vector (cycle (range n)) xs)\n        grouped (group-by first with-index)\n        in-order (map grouped (range n))\n        clean-up (map #(map second %) in-order)]\n    clean-up))","problem":43,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn [coll cnt]\n    (reverse (loop [acc (list) coll coll]\n               (if (= (count acc) cnt) acc\n                   (recur (conj acc (take-nth cnt coll)) (rest coll))))))","problem":43,"user":"4f4a8707e4b0d56e7bb92c12"},{"problem":43,"code":"(fn [coll num]\n    (->> (map-indexed #(list %1 %2) coll)\n         (group-by #(rem (nth % 0) num))\n         (sort-by first)\n         (map fnext)\n         (map #(map fnext %))))","user":"58bbcbc8e4b0888cdc949d00"},{"code":"#(->> (partition %2 %1) (apply map list))","problem":43,"user":"535778dee4b04ce2eb3ed27d"},{"problem":43,"code":"#(partition-all (/ (count %) %2) (apply (partial mapcat list) (partition %2 %1)))","user":"59e0f38ae4b08badc2a0c500"},{"problem":43,"code":"(fn [coll x]\n  (loop [n x\n         c coll\n         r []]\n    (if (empty? c)\n      r\n      (recur (dec n)\n             (remove (set (take-nth n c)) c)\n             (conj r (take-nth n c))))))","user":"55b1d0b5e4b0da326a65cf73"},{"problem":43,"code":"(fn f [s n]\n  (map #(apply concat (partition 1 n (drop % s))) (range n)))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn [s x] (apply map list (partition-all x s)))","problem":43,"user":"51672d15e4b079759a74a5e7"},{"problem":43,"code":"(fn [s n] \n  (for [x (range n)]\n    (map #(nth % x) (partition n s))))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"problem":43,"code":"(fn [coll n]\n  (let [size (count coll)\n        m (- n 1)]\n  \t(loop [[head & tail :as remaining] coll\n    \t     i 0\n        \t acc (vector)]\n      \t(cond\n         (empty? remaining) (map reverse acc)\n      \t (= i m) (recur tail 0 (assoc acc i (conj (get acc i) head)))\n         :else (recur tail (+ i 1) (assoc acc i (conj (get acc i) head)))))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":43,"code":"(fn [s n] (vals (group-by #(mod % n) s)))","user":"54e606c3e4b024c67c0cf803"},{"problem":43,"code":"(fn [xs x] (map last (group-by #(mod % x) xs)))","user":"54d70f40e4b0a52adc2e2027"},{"problem":43,"code":"(fn [coll n]\n  (loop [coll coll\n         r []]\n    (if (empty? coll)\n      (seq r)\n      (recur (filter #(not= (rem (first coll) n) (rem % n)) coll)\n             (conj r (filter #(== (rem (first coll) n) (rem % n)) coll))))))","user":"565654dae4b0f9d632dd849f"},{"problem":43,"code":"(fn [s n]\n  (letfn [(f [l] \n          \t(if (= 1 (count l))\n           \t\t(for [x (first l)] (list x))\n                (map concat (for [x (first l)] (list x)) (f (next l)))))]\n    (f (partition n s))))","user":"5e6ca949e4b04a83ad7cd289"},{"problem":43,"code":"(fn anti-interleave [xs n]\n  (loop [xs  xs\n         i   0\n         acc (into [] (take n (repeat [])))]\n    (if-let [x (first xs)]\n      (recur (rest xs)\n             (-> i inc (mod n))\n             (assoc acc i (conj (acc i) x)))\n      acc)))","user":"5db0d470e4b0f8c104ccfc9e"},{"code":"(fn [coll skip ]\n   (apply map vector (partition skip coll)))","problem":43,"user":"521d709ae4b050d5da0427ef"},{"problem":43,"code":"(fn reverse-interleave-2\n  [xs n]\n  (apply map list (partition n xs)))","user":"506f0968e4b09350ab4199f5"},{"problem":43,"code":"(fn unweave [coll n]\n    (map #(->> coll (drop %) (take-nth n)) (range n)))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [x n]\n  (vals (group-by #(mod % n) x)))","problem":43,"user":"51929214e4b08962174cf74c"},{"code":"(fn\n    [sq num]\n    (reduce #(let [[idx elm] %2\n                   item-idx (mod idx num)]\n               (assoc %1 item-idx\n                      (conj (nth %1 item-idx) elm)))\n            (vec (repeat num []))\n            (partition 2 (interleave (iterate inc 0) sq))))","problem":43,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":43,"code":"(fn [coll n]\n   (let [i (first coll)\n         end (inc (last coll))]\n     (for [x (range i (+ i n))]\n       (range x end n))))","user":"5c2f0cdfe4b0d62ef62d9f09"},{"problem":43,"code":"(fn [coll n]\n  (let [partition' (fn [coll n result]\n                     (if (= (count result) n)\n                       (reverse result)\n                       (recur (drop 1 coll)\n                              n\n                              (cons (take-nth n coll) result ))))]\n    (partition' coll n '())))","user":"518279abe4b0353c468deb65"},{"problem":43,"code":"(fn reverse-interleave [S n]\n  (let [vecs (vec (map (fn [n] []) (range n)))]\n    (reduce\n     (fn [s [x n]] (assoc s n (conj (nth s n) x)))\n     vecs (map (fn [x n] [x n]) S (map #(mod % n) (range (count S)))))))","user":"56f53962e4b046a417f9206c"},{"problem":43,"code":"(fn [coll,n] \n\t(let [p (partition n coll)]\n\t\t(loop [re p result '()]\n\t\t\t(if (not=  (first re) nil)\n\t\t\t  (recur \n\t\t\t  \t(mapcat\n\t\t\t  \t\t\t#(list (next %))\n\t\t\t  \t\t\tre) \n\t\t\t  \t(conj\n\t\t\t  \t\tresult\n\t\t\t  \t\t(mapcat\n\t\t\t  \t\t\t#(list (first %))\n\t\t\t  \t\t\tre)))\n\t\t\t  \t(reverse result)))))","user":"583c4482e4b089d5ab817d7e"},{"problem":43,"code":"(fn rev [s g]\n  (let [len (count s)\n        part (fn [start-n]\n               (loop [n start-n ret []]\n                 (if (< n len)\n                   (recur (+ n g) (conj ret (nth s n)))\n                   ret)))]\n    (map part (range g))))","user":"53d86564e4b0e771c302546b"},{"problem":43,"code":"(fn [coll n]\n    (let [idx-coll (map-indexed vector coll)]\n      (for [modn (range n)]\n        (->> idx-coll\n             (filter #(= modn (mod (first %) n)))\n             (map second)))))","user":"5beda647e4b0a6d31fed2122"},{"problem":43,"code":"(fn [coll n]\n  (let [g (group-by (fn [[x _]] (mod x n))\n                    (map vector (range) coll))]\n    (map (fn [i] (map second (get g i))) (range n))))","user":"5c1bee41e4b01240ff567218"},{"problem":43,"code":"(fn [l n]\n  (map                     \n    (fn [i] (take-nth n (drop i l)))\n    (range n)))","user":"56069006e4b08b23635d3174"},{"problem":43,"code":"(fn [coll n]\n  (let [groups\n        (group-by (fn [[e index]] (mod index n))\n                  (map-indexed (fn [index e] [e index]) coll))]\n    (for [[k v] groups]\n      (map first v))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"#(apply map vector (partition %2 %2 %1))","problem":43,"user":"4e7eff9e535db966e863cc38"},{"problem":43,"code":"(fn rinterleave                                                                                                                                                                                \n  [s n]                                                                                                                                                                                        \n  (->> s                                                                                                                                                                                       \n       (partition n)                                                                                                                                                                           \n       (apply interleave)                                                                                                                                                                      \n       (partition (quot (count s) n))))","user":"4db85bdd535d1e037afb218d"},{"problem":43,"code":"(fn [s n]\n   (for [i (range n)]\n   \t(list* (for [j (range i (count s) n)] \n      (nth s j)))))","user":"5e265173e4b05b4b01516175"},{"problem":43,"code":"#(for [x (range %2)] (for [y (range x (count %1) %2)] (nth %1 y)))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":43,"code":"(fn solution [sequen x]\n  (for [n (range x)]\n    (keep-indexed #(when (= (mod %1 x) n) %2) sequen)))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [c n]\n  (vals (group-by #(rem % n) c)))","problem":43,"user":"4e8a0d5d535d3e98b802328e"},{"code":"(fn [xs n]\n    (loop [r []\n           x n]\n      (if (= x 0)\n        r\n        (recur (conj r (filter #(= (- n x) (rem (.indexOf xs %) n)) xs))\n               (dec x)))))","problem":43,"user":"50aedb8ce4b0a40c9cfb08d4"},{"code":"#(loop [result [] coll %1 cnt %2]\n  (if (zero? cnt)\n    result\n    (recur\n      (conj result\n        (take-nth %2 coll))\n      (rest coll)\n      (dec cnt))))","problem":43,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"#(let [x (/ (count %) %2)] (partition x (apply interleave (partition %2 %))))","problem":43,"user":"51aa5434e4b04e3dc0c27b26"},{"problem":43,"code":"(fn [s n] (partition-all (quot (count s) n) (apply interleave (partition-all n s))))","user":"5717e367e4b07c98581c3b1d"},{"problem":43,"code":"#(into '() (map (fn [x] (seq x)) (vals (loop [x 0\n                                    m {}\n                                    ls %1]\n                                (if (empty? ls)\n                                  m\n                                  (let [key (mod x %2)]\n                                    (if (contains? m key)\n                                      (recur (inc x) (assoc m key (conj (get m key) (first ls))) (rest ls))\n                                      (recur (inc x) (assoc m key [(first ls)]) (rest ls)))))))))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":43,"code":"(fn [l x] (apply map vector (partition x l)))","user":"53cdb2c4e4b00fb29b2212e5"},{"code":"(fn f [x n]\n  (loop [r (repeat []) s x]\n     (if (empty? s)\n        r\n        (recur (map conj r (take n s)) (drop n s)))))","problem":43,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":43,"code":"(fn [coll numsplit] \n  (map \n   (fn [index] \n     (map #(nth % index) (partition numsplit coll))) \n   (range numsplit)))","user":"5afb3426e4b0cc2b61a3bcf5"},{"problem":43,"code":"(fn [s n] (map (fn [r] (map #(nth s %) r))  (for [x (range n)] (range x (count s) n))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn [x y] (loop [cnt y acc '()] (if (< cnt 1) acc (recur (dec cnt) (cons (loop [cntr (- (count x) 1) acc '()] (if (< cntr 0) acc (recur (dec cntr) (if (== (mod cntr y) (- cnt 1))(cons (nth x cntr) acc) acc)))) acc)))))","problem":43,"user":"4f32135ae4b0d6649770a08e"},{"problem":43,"code":"; copied answer, not done by myself\n(fn rev-int [v n]\n  (apply map vector (partition n v)))","user":"5db6cc4ae4b010eb3c36cd3b"},{"problem":43,"code":"(fn [seq n]\n  (reduce\n   (fn [a [i e]]\n     (assoc a i  (conj (a i) e)))\n   (vec (repeat n []))\n   (map (fn [i e]\n          [i e])\n        (cycle (range n))\n        seq)))","user":"564c7c95e4b0284900eef672"},{"problem":43,"code":"(fn [s n](vals (group-by #(rem % n) s)))","user":"563c6ebae4b0bfe05bf11834"},{"problem":43,"code":"(fn [s ct]\n      (let [idxs (map-indexed vector s)]\n        (->> (group-by #(mod (first %)  ct) idxs)\n             (map second)\n             (map #(map second %)))))","user":"5db35f85e4b010eb3c36cd22"},{"code":"(fn [s n]\n  (loop [r [] i 0]\n    (if (= i n)\n      (sort #(< (first %1) (first %2)) r)\n      (recur\n        (conj r (filter #(= (mod % n) i) s))\n        (inc i)))))","problem":43,"user":"4ea67906535d7eef308072e4"},{"problem":43,"code":"(fn [s n]\n  (loop [acc [] count n s s]\n    (if (zero? count)\n      acc\n      (recur (conj acc (map first (partition-all n n s))) (dec count) (rest s)))))","user":"554edb85e4b00713264bd99a"},{"problem":43,"code":"(fn reverse-interleave\n  [xs y]\n  (apply map (fn [& x] x) (partition y xs)))","user":"5d53a59ae4b0776584bd6f72"},{"problem":43,"code":"#(reduce \n  (partial map conj)\n  (repeat %2 [])\n  (partition %2 %))","user":"53ea5851e4b036ad0777e4e4"},{"problem":43,"code":"(fn [v n]\n  (partition (/ (count v) n) (apply interleave (partition n v)))\n  )","user":"53050c04e4b0d8b024fd3757"},{"code":"#(reduce (fn [x y] \n               (for [a x b y :when (= %2 (if (sequential? a) (-' b (last a)) (-' b a)))] \n                 (if (sequential? a) (conj a b) [a b]))) (partition-all %2 %1))","problem":43,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn [s n] (apply map vector (partition n s)))","problem":43,"user":"4ddbf54e535d02782fcbe9ff"},{"code":"; I have this as my 'reduce equivalent:\n; (defn my-interleave3 [coll n] \n;\t(reduce \n;\t\t(fn [current subset] (map #(conj %1 %2) current subset)) \n;\t(repeat n []) \n;\t(partition n coll)))\n(fn [coll n] (apply map vector (partition n coll)))","problem":43,"user":"533b1dc4e4b0e30313ee6cc7"},{"problem":43,"code":"(fn f\n ([coll n]\n  (f coll n 0 []))\n ([coll n i result]\n   (if (> (count coll) 0)\n     (recur (rest coll) n (mod (inc i) n)\n            (update-in\n             result [i] conj\n             (first coll)))\n     (map reverse result))))","user":"574eb3b1e4b02ea114799247"},{"problem":43,"code":"(fn [s n]\n    (loop [s s\n           acc (map (fn [x] []) (range n))]\n        (if (empty? s)\n            acc\n            (recur (drop n s) (map-indexed #(conj %2 (nth s %1)) acc)))))","user":"600ae927e4b074f607df6689"},{"code":"(fn [l n]\n  (for [c (range n)]\n    (for [t (map #(+ c (* % n)) (range (count l))) :while (< t (count l))]\n      (nth l t))))","problem":43,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [coll x]\n  (let [cols (partition x coll)]\n    (loop [result nil\n           iter 0]\n      (if (< iter x)\n        (recur (concat result\n                       (map #(nth % iter) cols))\n               (inc iter))\n        (partition (/ (count result) x) result)))))","problem":43,"user":"5336ca32e4b0e30313ee6c80"},{"problem":43,"code":"(fn [x y] (apply mapv vector (partition y x)))","user":"4eb47bb1535d7eef30807362"},{"code":"#(map (fn [start]\n      (reduce (fn [acc x] (conj acc (nth % x))) [] (range start (count %) %2))) (range %2))","problem":43,"user":"50783762e4b0fc74642bff67"},{"problem":43,"code":"(fn [coll n]\n  (loop [colls (repeat n [])\n         coll coll]\n    (if (empty? coll)\n      colls\n      (recur (map #(conj %1 %2) colls coll)\n             (drop n coll)))))","user":"55f2e47de4b06e875b46ce4d"},{"problem":43,"code":"(fn rev-inter\n  [coll n]\n  (partition (/ (count coll) n) (apply interleave (partition-all n coll))))","user":"5ec5f7f2e4b08d0ec38692d1"},{"problem":43,"code":"(fn [s n]\n  (loop [seqs (vec (repeat n []))\n         l s\n         c 0]\n    (if (empty? l)\n      seqs\n      (recur (update-in seqs [c] conj (first l)) (rest l) (mod (inc c) n)))))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn reverse_interleave [items x]\n  (apply map list (partition x items)))","problem":43,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [col n]\n  (loop [\n         p (zipmap (range n) (repeat []))\n         r col\n         i 0\n         ]\n    (if\n      (empty? r)\n      (map reverse (map second (sort-by first p)))\n      (recur \n        (assoc p i (cons (first r) (p i)))\n        (rest r)\n        (rem (inc i) n)))))","problem":43,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":43,"code":"(fn [coll n]\n  (map #(map :itm %) (vals (group-by #(rem (:idx %) n) (map-indexed\n     (fn [idx itm] {:idx (inc idx) :itm itm})\n     coll)))))","user":"5b500215e4b02d533a91bce2"},{"problem":43,"code":";(fn [col n] (map (fn [x] (map #(nth % x) (partition-all n col))) (range n)))\n#(apply map list (partition %2 %1))","user":"5af19233e4b0cc2b61a3bc5f"},{"code":"(fn [l n] (map #(take-nth n (apply concat (reverse (split-at % l)))) (range n)))","problem":43,"user":"4e929dd0535dbda64a6f6b05"},{"problem":43,"code":"#(apply map list (vec (partition %2 %1)))","user":"560331dee4b04bb52996e1b5"},{"problem":43,"code":"(fn [col n] (apply (partial map (fn [& k] k)) (partition n n col)))","user":"53d5e45ae4b0e771c302544e"},{"problem":43,"code":"#(partition (/ (count %1) %2) (conj (loop [n 1 i 0 res []] (if (= (count %1) n) res (recur (+ n 1) (+ i %2) (conj res (nth %1 (mod i (- (count %1) 1))))))) (last %1)))","user":"5c228b51e4b07e362c23058c"},{"code":"(fn [coll n]\n  (let [len (count coll)]\n    (map #(take-nth n\n                    (drop % coll))\n         (range n))))","problem":43,"user":"4f942227e4b0dcca54ed6cbe"},{"problem":43,"code":"(fn [s n]\n  (map \n \t#(reverse \n      \t(reduce \n         \t(fn [acc e] (conj acc (second e )))  \n         \t'()  \n         \t%)) \n \t(map \n     \tsecond \n     \t(group-by \n      \t\t(fn [[idx v]] (mod (+ n idx) n)) \n      \t\t(map vector (range) s)))))","user":"55ad59cde4b03311e7b732a7"},{"problem":43,"code":"(fn [items parts] (map #(map first %) (map second  (group-by #(mod (second %) parts) (map list items (range))) )))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"#(vals (group-by (fn[x](rem x %2)) %1))","problem":43,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn [s n]\n  (map\n    (fn [i] \n      (map first (partition-all n (drop i s)))) (range 0 n)\n    )\n  )","problem":43,"user":"51377188e4b04059df19f303"},{"problem":43,"code":"(fn [coll n]\n    (reverse\n      (loop [s    coll\n             c    n\n             res  '()]\n        (if (= 0 c)\n          res\n          (recur (rest s) (dec c) (cons (flatten (partition-all 1 n s)) res))))))","user":"56a94562e4b07966d5a8a074"},{"problem":43,"code":"(fn [coll x] \n\t(reduce\n      (fn [res cc]\n        (map (fn [coll v] (concat coll (list v))) res cc)\n      )\n      (repeat x '())\n      (partition x coll))\n)","user":"55f014ebe4b06e875b46ce1b"},{"code":"(fn [c n] (map #(map last (last %)) (group-by #(mod (first %) n) (map-indexed #(list %1 %2) c))))","problem":43,"user":"519964cbe4b0aa09cbc0b849"},{"problem":43,"code":"(fn [coll n]\n  (reduce (fn [v [idx x]]\n            (let [k (mod idx n)]\n              (assoc v k (conj (v k) x))))\n          (vec (repeat n []))\n          (map-indexed #(vector %1 %2) coll)))","user":"56a79eb0e4b07966d5a8a05d"},{"code":"(fn [coll x]\n  (let [n x\n        getseq (fn f [coll n] \n                 (if (< 0 n)\n                   (cons (take-nth x coll)\n                         (f (next coll) (dec n)))))]\n    (getseq coll x)))","problem":43,"user":"50d46d53e4b09cc622d65a69"},{"code":"(fn [coll n]\n  (map\n    #(take-nth n (drop % coll))\n    (range n)))","problem":43,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn [l n]\n  (map #(map first %)\n    (vals (group-by #(second %) \n      (map list l (cycle (range n)))))))","problem":43,"user":"4fa30027e4b081705acca187"},{"problem":43,"code":"(fn r-interleave [sq num]\n  (reduce (fn [coll item] (conj coll (map #(nth % item) (partition num sq)))) [] (range num)))","user":"5845720de4b089d5ab817e68"},{"problem":43,"code":"(fn [xs n]\n           (loop [xs xs n n c n res []]\n            (if (zero? c)\n              res\n             (recur (rest xs) n (dec c) (conj res (take-nth n xs) ) ))))","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn rev-interleave [xs n]\n  (map \n    (fn [k] (apply concat (partition 1 n (drop k xs))))\n    (range n)))","problem":43,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn [l n]\n  (let [li     (map-indexed vector l)\n        keep?i (fn [i] #(= i (mod (% 0) n)))\n        seqi   (fn [i] (->> li (filter (keep?i i)) (map #(% 1))))]\n    (map seqi (range n))))","problem":43,"user":"525f51bde4b0cb4875a45dc8"},{"problem":43,"code":"#(->> %1 (partition %2) (apply map list))","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [xs x]\n (sort-by first\n  (for [r (range x)] (filter #(= (rem % x) r) xs))))","problem":43,"user":"501d52a8e4b066e56b9d0b20"},{"problem":43,"code":"(fn [c num]\n  (apply map list (partition num c)))","user":"59a8405ce4b0bcf4e9a43af1"},{"problem":43,"code":"(fn [s n]\n   (reduce\n     (fn [result [index entry]]\n       (update-in ; 4Clojure has old Clojure without update\n         result\n         (list (mod index n)) ;cycle/partition between n sub-sequences\n         #(conj % entry)))\n       \n     (vec (repeat n [])) ; When typing in InstaREPL, type boundaries first.\n     (map-indexed\n       (fn [i e]\n         [i e])\n       s)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":43,"code":"(fn [coll subs]\n   (vals (group-by #(mod % subs) coll)))","user":"56732c84e4b05957ce8c611c"},{"code":"(fn [coll n]\n  (let [grouped (group-by first (map vector (cycle (range n)) coll))]\n    (reduce #(conj %1 %2)\n            [] \n            (map #(map second (get grouped %))\n                 (sort (keys grouped))))))","problem":43,"user":"51d19c24e4b0cfcf579466c3"},{"problem":43,"code":"(fn [x y]\n    (loop [i (dec y) lst '()]\n      (if (< i 0)\n        lst\n        (recur (dec i)\n          (conj lst (reduce concat (partition 1 y (drop i x))))))))","user":"574e8975e4b02ea114799244"},{"code":"(fn [l n]\n  (map (fn [a] (map last a))\n  \t   (vals\n    \t  (group-by first\n        \t        (map-indexed (fn [idx itm] [(mod idx n) itm])\n            \t                 l)))))","problem":43,"user":"50589113e4b06522596eba7f"},{"problem":43,"code":"#(->> (partition %2 %1)\n      (apply interleave)\n      (partition (/ (count %1) %2)))","user":"5540fe42e4b0a04f7929950a"},{"problem":43,"code":"(fn [c n] (map #(take-nth n (drop % c)) (range n)) )","user":"558bdcefe4b0277789237633"},{"code":"(fn foo [s n]\n  (let [resultListOfLists (repeat n [])]\n    ((fn bar [s n lol]\n      (if (empty? s)\n        lol\n        (bar\n          (drop n s)\n          n\n          (map conj lol s))))\n      s n resultListOfLists)))","problem":43,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn [s x]\n  (loop [n 0\n         r []]\n    (if (= n x)\n      r\n      (recur (inc n)\n             (conj r (take-nth x (drop n s)))))))","problem":43,"user":"51caca2ae4b068dadb8f2226"},{"problem":43,"code":"(fn [s n] (map (partial take-nth n) (take n (iterate rest s))))","user":"59699da7e4b069c0a1a197eb"},{"problem":43,"code":"(fn [s x]\n         (map #(take-nth x (drop % s))\n              (range x)))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn stuff [s n]\n  (if (<= n (count s))\n    (map cons (take n s) (stuff (drop n s) n))\n    (repeat n nil)))","problem":43,"user":"52a1acb2e4b04e0c58e87bdb"},{"problem":43,"code":"(fn [l n]\n   (map seq (vals (group-by #(mod % n) l))))","user":"51e4b812e4b0efabf93c02bc"},{"problem":43,"code":"(fn [s n]\n  (let [s (partition n s)]\n    (map\n      (fn [idx]\n        (reduce (fn [memo el] (conj memo (nth el idx))) [] s))\n        (range n))))","user":"52d6d490e4b09f7907dd1369"},{"code":"(fn [xs n]\n  (map (comp #(map second %)\n             (group-by first (map-indexed (fn [idx itm] [(mod idx n) itm]) xs)))\n(range n)))","problem":43,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn [c n] \n  (reduce (fn [r v] (map conj r v)) (repeat n []) (partition n c))\n)","problem":43,"user":"5089d52ce4b03217b26a539d"},{"problem":43,"code":"(fn [xs x] (vals (group-by #(mod % x) xs)))","user":"504f5804e4b0a02f9cffde72"},{"code":"( fn [coll n] (apply map list  (partition n coll) ) )","problem":43,"user":"52628bb0e4b03e8d9a4a7089"},{"code":"(fn [ls n] \n   (for [i (range n), l [ls]] (take-nth n (drop i l))))","problem":43,"user":"4fc0853ae4b081705acca327"},{"problem":43,"code":"(fn revese-interleave [x n]\n  (let [ix (range n)\n        len (count x)\n        step n]\n    (map (fn [i] (map #(nth x %) (range i len step))) ix)))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":43,"code":"(fn [coll n]\n  (map\n   \t(fn [index]\n      (let [k (quot (count coll) n)]\n        (map\n          (fn [index2]\n            (nth coll (+ index (* index2 n))))\n          (range k))))\n   \t(range n)))","user":"5c73b8bae4b0fca0c16227ba"},{"code":"(fn [mylist num-subseq]\n  \n  (let [temp         (map-indexed vector mylist)\n        num-filter   (fn [a] (filter #(= a (mod (% 0) num-subseq)) temp))\n          ]\n    \n     (for [x (range num-subseq)]\n      (map #(get % 1) (num-filter x))\n      )\n  \n  )\n)","problem":43,"user":"5314b0cae4b08068f379ed1c"},{"problem":43,"code":"(fn [x y]\n  (loop [result [] x x counter 1 ]\n    (if (> counter y)\n      result\n      (recur (conj result (take-nth y x)) (drop 1 x) (inc counter)))))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":43,"code":"#((fn T [rs]\n    (for [i (range (count (first rs)))] \n        (map (fn [x] (nth x i)) rs))) \n    (partition %2 %1))","user":"5ea2e6bfe4b00a66d4a95197"},{"code":"#(loop [s (partition-all %2 %1) o []]\r\n   (if (empty? (first s)) o\r\n\t     (recur (map butlast s) (cons (map last s) o))))","problem":43,"user":"4e8a460e535d65386fec2109"},{"problem":43,"code":"(fn [col n]\n          (loop [i 0 res []]\n            (if(< i n)\n              (recur (inc i) (conj res (take-nth n (drop i col))))\n              res\n              ))\n          )","user":"5ab3db13e4b073f177442609"},{"code":"(fn [s n] (map #(take-nth n %) (map #(drop % s) (range 0 n))))","problem":43,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn rinterleave [s n]\n  (for [nn (range n) :let [ss (take-nth n (drop nn s))]] ss))","problem":43,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn [xs x] (apply map vector (partition x xs)))","problem":43,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":43,"code":"(fn [seq lists]\n  (let [res (loop [seq seq lists lists acc []]\n              (if (empty? seq) acc\n                  (recur (subvec (vec seq) lists) lists (conj acc (take lists seq)))))\n        res (loop [seq res acc []]\n              (if (empty? (first seq)) acc\n                  (recur (map rest seq) (conj acc (map first seq)))))]\n    res))","user":"57155980e4b07c98581c3ad7"},{"code":"#(for [i (range %2)] (take-nth %2 (nthrest % i)))","problem":43,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":43,"code":"(fn ri [seqz n]\n  (apply map vector (partition n seqz)))","user":"5414b7c4e4b01498b1a719ed"},{"problem":43,"code":"#(map (comp (partial map second) val) (group-by first (keep-indexed (fn [a b] [(mod a %2) b]) %)))","user":"559067ace4b0277789237670"},{"code":"#(apply (partial mapv list) (partition %2 %1))","problem":43,"user":"50e8ff6be4b0ebbe794eb7f3"},{"code":"#(for [i (range %2)]\n   (take-nth %2 (drop i %)))","problem":43,"user":"4ee82539535d93acb0a66878"},{"problem":43,"code":"(fn [lst x]\n (reverse \n  (loop [in (reverse lst)\n         counter 0\n         out (for [i (range x)] '())]\n    (cond\n     (empty? in) out\n     (< counter x) (recur (rest in) (inc counter) \n                          (for [i (range x)] \n                            (if (= i counter) \n                              (cons (first in) (nth out i)) (nth out i))))\n     (= counter x) (recur in 0 out)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn [c n]\n  (map #(take-nth n %) (map #(nthnext c %) (range n))))","problem":43,"user":"4ec12577535dfed6da9c6da8"},{"problem":43,"code":"(fn  [coll n] (apply map vector (partition n coll)))","user":"57f3b841e4b0511f1d294e0f"},{"problem":43,"code":"(fn [sq n]\n  (loop [result (vec (repeat n []))\n         l sq\n         counter 1]\n    (if (seq l)\n      (recur (update-in result [(dec counter)] conj (first l))\n             (rest l)\n             (if (>= counter n) 1 (inc counter)))\n      (map seq result))))","user":"5d431c77e4b07c84aa5ae68f"},{"code":"(fn [xs x] (apply map list(partition x xs)))","problem":43,"user":"52471ac0e4b05ef8e38e6354"},{"problem":43,"code":"(fn [s x]\n  (loop [i 0, s s, out (into [] (repeat x []))]\n    (if (empty? s) out\n      (recur (mod (inc i) x)\n             (rest s)\n             (update-in out [i] #(conj % (first s)))))))","user":"55c68089e4b0e31453f649c4"},{"problem":43,"code":"(fn\n  [col size]\n  (->> col\n       (map-indexed (fn [i n] [(mod i size) n]))\n       (group-by first)\n       vals\n       (map (fn [col] (map last col)))))","user":"50978ca4e4b00ad8bab4e966"},{"code":"(fn [x y]\n  (loop [coll x\n         answer (loop [z []]\n                  (if (= (count z) y) z\n                    (recur (conj z []))))\n         n 0]\n    (if (empty? coll)\n      answer\n      (recur\n        (rest coll)\n        (assoc answer n (conj (nth answer n) (first coll)))\n        (if (= n (dec y)) 0 (inc n))\n      )\n    )\n  )\n)","problem":43,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn ril [s x] (apply map list (partition-all x s)))","problem":43,"user":"530bf87ee4b02e82168697d5"},{"code":"(fn [l n] \r\n  (map #(seq (map (fn [p] (second p)) (second %)))\r\n  (sort-by #(first %)\r\n  (group-by #(mod (nth % 0) n) \r\n  (map-indexed (fn[i,v] [i v]) l)))))","problem":43,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn revint                                                                                                                                                  \n  [coll n]                                                                                                                                                    \n  (loop [res (partition n coll) fres ()]                                                                                                                      \n    (if (zero? (count (first res)))                                                                                                                           \n    (reverse fres)                                                                                                                                            \n    (recur (map #(drop 1 %) res) (conj fres (map first res))))))","problem":43,"user":"4e3bcccd535deb9a81d77f56"},{"problem":43,"code":"(fn [lst n] \n  (loop [i (dec n) res '()] \n    (if (< i 0) \n      res \n      (recur (dec i) (conj res (map #(second %) (filter #(= i (mod (first %) n)) (map-indexed vector lst))))))))","user":"545e7ab0e4b01be26fd7467c"},{"problem":43,"code":"(fn deinterleave [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"52e087dde4b09f7907dd1412"},{"code":"(fn [coll n]\n  (->> (map (fn [[k v]] v )\n            (group-by #(first %) (map-indexed #(vector (mod %1 n) %2) coll)))\n       (map #(map second %) )\n       ))","problem":43,"user":"5360f043e4b0243289761e3c"},{"problem":43,"code":"#(apply map list (partition  \t%2 %1))","user":"56585dbce4b0f9d632dd84b3"},{"code":"(fn [coll n]\n    (loop [m 0\n           c coll\n           r (list)]\n      (if (= m n)\n        (reverse r)\n        (recur (inc m)\n               (rest c)\n               (conj r (take-nth n c))))))","problem":43,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":43,"code":"(fn [coll n]\n  (loop [acc []\n          c (partition n coll)]\n    (if (first c)\n      (recur (conj acc (map first c))\n              (map next c))\n      acc)))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":43,"code":"(fn [coll n]\n    (->> (range n)\n       (map #(drop % coll))\n       (map #(apply concat (partition-all 1 n %)))))","user":"57aa4752e4b0b8559636fc6a"},{"code":"(fn\n  [cs n]\n  (for [i (range n)]\n    (for [j (range (count cs))\n          :when (= (mod j n) i)]\n      (nth cs j))))","problem":43,"user":"51852961e4b0da5a5be3babb"},{"problem":43,"code":";;please redo this it is so bad\n(fn [coll n]\n  (partition (/ (count coll) n)\n             (for [x (range n)\n                   y (partition n coll)]\n               (nth y x))))\n\n;;#(apply map list (partition %2 %1))","user":"5c58736be4b01df32ab73247"},{"problem":43,"code":"(fn [collection number] (map #(take-nth number (drop % collection)) (range number)))","user":"54f296efe4b024c67c0cf8c8"},{"problem":43,"code":"(fn reverse-interleave [col n]\n  ((fn reverse-interleave* [col n i]\n     (if (= i 1)\n       (list (take-nth n col))\n       (cons (take-nth n col) (reverse-interleave* (rest col) n (dec i)))))\n  col n n))","user":"602372aae4b0d5df2af2220f"},{"code":"(fn [s num]\n          (let [ivec (map-indexed #(vector (mod %1 num) %2) s)]\n            (vals (sort (reduce\n                         (fn [ret x]\n                             (let [k (first x), v (last x)]\n                               (assoc ret k (conj (get ret k []) v))))\n                         {}\n                         ivec)))))","problem":43,"user":"50705072e4b07bd6ad9b9f27"},{"problem":43,"code":"(fn [col n] (map #(take-nth n %) (take n (iterate rest col))))","user":"563cce5be4b0bfe05bf1183f"},{"problem":43,"code":"(fn [coll x]\n  (for [i (range x)]\n    (take-nth x (drop i coll))))","user":"54edfa10e4b024c67c0cf868"},{"problem":43,"code":"(fn\n  [inseq tot]\n  (->> inseq \n    (map #(list (mod %1 tot) %2) (range))\n    ((fn bla [pos inl]\n       (if (= pos tot)\n         '()\n         (cons\n          (map #(second %) \n               (filter #(= (first %) pos) inl))\n          (bla (inc pos) inl))))\n     0)))","user":"57c99a45e4b05aa3c4741d31"},{"code":"#(vals (group-by (fn [x] (mod x %2)) %1))","problem":43,"user":"4f3a979de4b0e243712b1f10"},{"code":"(fn [l n]\n  (let [parts (partition n l)]\n    (for [x (range n)] (map (fn [e] (nth e x)) parts))))","problem":43,"user":"515efd01e4b02c55805ea238"},{"problem":43,"code":"(fn reverse-interleave [seq numSubSeq] \n  (let [indexed (map-indexed vector seq)\n        grouped (group-by #(mod (first %) numSubSeq) indexed)]\n    (map (partial map second) (vals grouped))))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn \n  [coll splits & results]\n  (let [size (/ (count coll) splits)]\n    (for [rng (range splits)]\n      (for [each (range size)]\n        (nth coll (+ (* each splits) rng))))))","problem":43,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":43,"code":"(fn [l n]\n  (let [ results    (repeat n [])\n         partitions (partition n l)\n         producer   (partial map conj) ]\n    (reduce producer results partitions)))","user":"54d6f22de4b0a52adc2e2023"},{"problem":43,"code":"#(vals(reduce (fn [x y] (assoc x (rem y %2)(cons y (x (rem y %2))))) {} (reverse %)))","user":"53aaaf7ae4b047364c044444"},{"problem":43,"code":"(fn rinterleave [col n]\n  (letfn [(unfold [produce seed]\n                  (lazy-seq\n                    (if (nil? seed)\n                      ()\n                      (let [[el seed'] (produce seed)]\n                        (cons el (unfold produce seed'))))))]\n    (reduce\n      (partial map conj)\n      (repeat n [])\n      (unfold\n        #(list (take n %) (seq (drop n %)))\n        col))))\n\n;(fn rinterleave [col' n]\n;  (let [el (take n col') col (drop n col')]\n;    (if (= (count el) n)\n;      (map #(cons %1 %2) el (rinterleave col n)) ; try to get this working with (recur)\n;      (repeat n ()))))","user":"58c5a08be4b021aa9917ed40"},{"problem":43,"code":"(fn [a p]\n  (->> (group-by (fn [[i e]] (mod i p)) (map-indexed (fn [i e] [i e]) a))\n       vals\n       (map (fn [a] (map last a)))))","user":"584b0422e4b089d5ab817ef4"},{"problem":43,"code":"(fn [col n]\n  (let [with-groups (map-indexed #(vector (mod %1 n) %2) col)\n        group-map (group-by first with-groups)\n        partitions (map group-map (range n))]\n    (map #(map second %) partitions)))\n\n;; when thinking about how map works with multiple collections at the same time,\n;; a very short and beautiful solution can be created:\n#_(\n\n  #(apply (partial map vector) (partition %2 %1))\n\n)","user":"59a080e3e4b0871e7608b837"},{"code":"(fn [xs n]\n  (map #(take-nth n %) (take n (iterate rest xs))))","problem":43,"user":"5269c150e4b03e8d9a4a71f8"},{"code":"(fn [xs n]\n  (let [groups (partition n xs)]\n    (for [i (range n)]\n      (map #(nth % i) groups))))","problem":43,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"(fn [xs n]\n  (letfn [(seqify [m]\n            (map second (sort-by first (seq m))))]\n    (loop [xs xs\n           ys (into {} (map #(vector % []) (range 0 n)))\n           k  0]\n       (if (empty? xs)\n           (seqify ys)\n           (recur (rest xs)\n                  (update-in ys [(mod k n)] #(conj % (first xs)))\n                  (inc k))))))","problem":43,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn [coll n]\r\n  (apply map (fn [x & xs] (flatten [x xs])) (partition n coll)))","problem":43,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":43,"code":"(fn reverse-interleave [coll n] \n  (for [i (range n)]\n    (let [with-index (map (fn [a b] {:item a :index b}) coll (range))\n      relevant-items-with-indexes (filter (fn [x] (= i (mod (:index x) n))) with-index)\n      relevant-items (map (fn [x] (:item x)) relevant-items-with-indexes)]\n      relevant-items)))","user":"5e805895e4b085ba37836e44"},{"code":"(fn[a-seq n]\n  (loop [ret []\n         ss a-seq\n         round 0]\n    (if (= round n)\n      ret\n      (recur (into ret (list (take-nth n ss)))\n             (rest ss)\n             (inc round)))))","problem":43,"user":"4e58bcd4535d8a8b8723a296"},{"problem":43,"code":"(fn [s c]\n  (partition (/ (count s) c) (apply interleave (partition c s))))","user":"56ab7578e4b03c432f18733d"},{"problem":43,"code":"(fn [coll n]\n    (let [sub-sequence (fn [offset]\n                         (flatten (partition 1 n (drop offset coll))))]\n      (map sub-sequence (range n))))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn [coll groups] (apply map list (partition-all groups coll)))","problem":43,"user":"5374ad7de4b06d7f452d9e26"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (apply map list (partition n coll)))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"#(apply map\n  (fn [& items]\n    (apply list items))\n  (partition %2 %))","problem":43,"user":"4f1abbfb535d64f60314646e"},{"problem":43,"code":"(fn uninterleave [coll n-parts]\n                    (map #(take-nth n-parts (drop % coll)) (range n-parts) ))","user":"561814bae4b06b1bb2182a1a"},{"problem":43,"code":"#(apply \n        map \n       list    \n       (partition-all %2 %1)\n       )","user":"55c3149de4b0e31453f64987"},{"problem":43,"code":"(fn revinterleave [l n]\n  (if (>= n (count l))\n    l\n    (concat (revinterleave \n             (apply concat (partition (dec n) n l))\n             (dec n))\n            (list\n             (apply concat (rest (partition 1 n (cons nil l))))))))","user":"55e4487ce4b050e68259b44c"},{"code":"(fn reverse[coll n] (apply map list (partition n coll))\n)","problem":43,"user":"4fce75cfe4b03432b189f400"},{"problem":43,"code":"(fn [x y]\n  (apply map vector (partition y x))\n  )","user":"57750460e4b0979f8965160c"},{"problem":43,"code":"(fn [coll group]\n   (-> (group-by #(mod % group) coll) vals))","user":"56e4a6c1e4b03a7c14b85a51"},{"problem":43,"code":"(fn [l n]\n  ((fn [res rem]\n     (if (empty? rem)\n       res\n       (recur (map (fn [x y] (conj x y)) res (take n rem)) (drop n rem))))\n   (repeat n []) l))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":43,"code":"(fn [coll n]\n  (->> coll\n       (map-indexed (fn [idx itm] [idx itm]))\n       (group-by (fn [[idx itm]] (mod idx n)))\n       (vals)\n       (map (fn [vals] (map last vals)))))","user":"605f5c69e4b03746e80ebf5e"},{"code":"(fn [seq n] (map #(map last %) (vals (group-by #(mod (first %) n) (map-indexed vector seq)))))","problem":43,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"code":"(fn [xs n]\n  (loop [acc '() k 0]\n    (if (= k n)\n      (reverse acc)\n      (recur (cons (take-nth n (drop k xs)) acc) (inc k)))))","problem":43,"user":"4f038499535dcb61093f6b09"},{"code":"(fn seqs-div [col seqs]\n  (letfn [(assign-group [] (map-indexed (fn [idx v] [(rem idx seqs) v]) col))\n          (sort-by-group [col] (sort-by first col))\n          (partition-by-group [col] (partition-by first col))\n          (to-values [col] (map (partial map second) col))]\n    ((comp to-values partition-by-group sort-by-group assign-group))))","problem":43,"user":"5245fbbbe4b09dbe66b56183"},{"code":"(fn rev-interleave\n  [s n]\n  (for [i (range n)]\n    (take-nth n (drop i s))))","problem":43,"user":"511b233ae4b07ab9ec456180"},{"problem":43,"code":"#(loop [i 0\n        memo (zipmap (range %2) (repeat %2 []))\n        [x & xs] %1] \n   (if (nil? x) \n     (vals (into (sorted-map) memo)) \n     (recur (rem (inc i) %2) (assoc memo i (conj (get memo i) x))  xs)))","user":"5592dc6be4b0c79f6e1db935"},{"problem":43,"code":"(fn [s n](vals( group-by (fn[x](mod x n)) s) ))","user":"56039843e4b04bb52996e1be"},{"code":"(fn [a b] (map #(take-nth b (drop % a)) (range b)))","problem":43,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":43,"code":"(fn [coll n]\n  (for [i (range n)]\n    (apply concat (partition-all 1 n (drop i coll)))))","user":"56a01895e4b0542e1f8d149f"},{"problem":43,"code":"(fn [coll n]\n    (->> (map-indexed (fn [idx itm] [(mod idx n) itm]) coll)\n         (sort-by first)\n         (partition-by first)\n         (map (fn [coll] (map second coll)))))\n;; #(apply map list (partition %2 %1))","user":"55d62a68e4b0e31453f64a96"},{"problem":43,"code":"(fn [coll n] (map #(take-nth n (drop %1 coll)) (range n)))","user":"56488119e4b0284900eef632"},{"problem":43,"code":"(fn [s x]\n  (let [subs (vec (repeat x '()))\n        rev (reduce \n         (fn [acc el] \n           (let [{ :keys [i, subs] } acc\n                 lst (get subs i)\n                 \n                 lst (cons el lst)\n                 subs (assoc subs i lst) \n                 i (mod (inc i) x)]\n             { :i i, :subs subs } )\n           )\n             { :i 0, :subs subs }\n             s)\n        ]\n    (map reverse (:subs rev))\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"problem":43,"code":"(fn reverseleave[xs x]\n  (let [ys (partition x xs)]\n    (apply map (partial conj []) ys)))","user":"54f86b8ce4b01ecee9d88828"},{"problem":43,"code":"(fn [s n]\n  (let [parts (partition-all n s)]\n    (for [z (range n)]\n      (map #(nth % z) parts))))","user":"50a00725e4b08df8156e9e46"},{"code":"#(loop [s % acc [] n %2]\n    (if (next s)\n      (recur (keep-indexed (fn [i e] (when (not= (rem i n) 0) e)) s) \n             (conj acc (take-nth n s))\n             (dec n))\n      acc))","problem":43,"user":"5287f34ee4b0239c8a67ae43"},{"code":"(fn [coll i]\r\n   (loop [xs (drop i coll)\r\n          acc (map list (take i coll))]\r\n     (let [pair (take i xs)]\r\n       (if (> (count xs) i)\r\n         (recur (drop i xs) (map conj acc pair))\r\n         (map reverse (map conj acc pair))))))","problem":43,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":43,"code":"#(partition-all (/ (count %1) %2) (apply interleave (into [] (partition-all %2 %1))))","user":"583c8bd4e4b089d5ab817d81"},{"problem":43,"code":"(fn [coll n]\n    (loop [coll coll\n           seqs (repeat n (list))]\n      (if (seq coll)\n        (recur (drop n coll)\n               (map concat seqs (map list (take n coll))))\n        seqs)))","user":"569f4dabe4b0542e1f8d1491"},{"problem":43,"code":"#(reduce (fn [acc row] \n           (for [[idx p] (map-indexed vector acc)]\n             (conj p (nth row idx))))\n         (mapv (constantly []) (range %2))\n         (partition %2 %1))","user":"4ff9a200e4b0678c553fc3ab"},{"problem":43,"code":"(fn [xs k]\n    (loop [acc [] s 0 ys xs]\n       (if (= (.size acc) k)\n           acc\n          (\n            recur (merge acc (first (vals (group-by #( = (rem % k) s) ys))))\n                  (inc s) \n                  (last (vals (group-by #( = (rem % k) s) ys))) \n          )\n    ))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [s n]\n  (for [x (range n)]\n           (map second\n                (filter (fn [[idx item]]\n                            (== x (mod idx n)))\n                        (map-indexed #(vector %1 %2) s)))))","problem":43,"user":"52d340ebe4b099d49816f0c1"},{"problem":43,"code":"(fn [c n] (map #(take-nth n (nthnext c %)) (range 0 n)))","user":"555c6344e4b0b056612e224c"},{"problem":43,"code":"(fn [full-list length]\n    (map (fn [index]\n             (map (fn [list-partition]\n                      (nth list-partition index))\n                  (partition length full-list)))\n    (range 0 length)))","user":"5990fcb9e4b0866487ed0d5b"},{"code":"(fn reverse-interleave [s num]\n  (let [ss (partition num s)]\n    (letfn [(map-first [ss]\n              (when (every? identity ss)\n                (cons (map first ss) (map-first (map next ss)))))]\n      (map-first ss))))","problem":43,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn [coll n]\n   (loop [i 0\n          coll coll\n          res (vec (repeat n []))]\n     (if-not (seq coll)\n       res\n       (recur (inc i)\n              (rest coll)\n              (update-in res [(mod i n)] conj (first coll))))))","problem":43,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn [s x] (for [n (range x)]\n  (take-nth x (drop n s))))","problem":43,"user":"5009fd0ae4b03d00572d2d70"},{"problem":43,"code":"(fn [x n] \n  (map \n   (fn [j] (map first j)) \n   (vals (group-by \n            (fn [i] (mod (second i) n)) \n            (partition 2 (interleave x (range)))))))","user":"53e91473e4b036ad0777e495"},{"problem":43,"code":"(fn foo [input, n] \n    (let \n      [ \n        N (inc n)\n        init (into [] (for [id (range 0 n)] []))\n        _input (map vector (range 0 (-> input count)) input) \n        id-for (fn [x] (mod x n))\n        push (fn[v acc] (into [] (conj acc v)))\n        reduce-f (fn[v x] (update-in v [(-> x first id-for)] (partial push (second x) )))        \n      ]\n       (reduce reduce-f init _input)\n    )\n  )","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn [a b]\n  ((fn myPrep [data n cnt result]\n    (if (= cnt n)\n      result\n      (myPrep\n        (rest data)\n        n\n        (inc cnt)\n        (conj\n          result\n          ((fn mySelect [data n cnt result]\n            (if (empty? data)\n              result\n              (mySelect\n                (rest data)\n                n\n                (inc cnt)\n                (if (= (mod cnt n) 0)\n                  (conj result (first data))\n                  result\n                )\n              )\n            )\n          ) data n 0 [])\n        )\n      )\n    )\n  ) a b 0 [])\n)","problem":43,"user":"4f16d6ed535d64f60314644f"},{"code":"(fn [l n]\n  (for [i (range n)]\n    (for [j (range i (count l) n)]\n      (nth l j))))","problem":43,"user":"50b1d166e4b03ea880433554"},{"code":"(fn deinterleave [x n] \n  (cond\n     (empty? (rest x)) nil\n   :else\n     (take n (conj (deinterleave (rest x) n) (take-nth n x)))))","problem":43,"user":"525aa499e4b0cb4875a45cf7"},{"code":"(fn rev_inter \n  ( [s x] (rev_inter s x 0))\n  ( [s x i]\n    (\n      if(and (not-empty s) (< i x))\n        (cons (map first(partition x x nil s)) (rev_inter (rest s) x (inc i)))\n    )\n  )\n)","problem":43,"user":"4fb7b80ae4b081705acca2d4"},{"problem":43,"code":"(fn [coll n]\n  (apply map list\n  (partition n coll)))","user":"54f9d900e4b01ecee9d88844"},{"problem":43,"code":"(fn f [arg n]\n   (let [arg* (partition n n arg)]\n     (for [i (range n)] (map #(nth %1 i) arg*)))\n   )","user":"5b7ccdeee4b047b03b203739"},{"problem":43,"code":"(fn [coll num] (for [i (range num)] (take-nth num (drop i coll))))","user":"606c87aae4b069485764de0d"},{"problem":43,"code":"(fn spotri [c n]\n  (for [j (range n)]\n    (for [i (range 0 (count c) n)]\n      (nth c (+ i j)))))","user":"60882700e4b0ae75613dcedf"},{"problem":43,"code":"(fn ri [coll n]\n  (map \n   #(take-nth n (drop % coll))\n   (range n))\n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":43,"code":"(fn reinterleave [lst n]\n  (letfn [(rein-remove  [lst n]\n            (remove nil? (map-indexed (fn [index value] \n                                        (when-not (= 0 (mod index n)) value)) lst)))\n          (rein-extract [lst n]\n            (remove nil? (map-indexed (fn [index value] \n                                (when (= 0 (mod index n)) value)) lst)))]\n    (loop [l lst\n           acc nil\n           nn n]\n      (cond\n        (empty? l) acc\n        (= nn 1) (reverse (conj acc l))\n        :else\n        (recur (rein-remove l nn) (conj acc (rein-extract l nn)) (dec nn))))))","user":"534f8c9ae4b084c2834f4acd"},{"code":"(fn r-interleave [myset mycount]\n  (let [fn-accum (fn [x y]\n                   (map #(concat %1 [%2]) x y))\n        partitioned-seq (partition mycount myset)\n        result (reduce fn-accum (repeat mycount '()) partitioned-seq)]\n    (do\n      (println partitioned-seq)\n      (println result)\n      result)))","problem":43,"user":"51f82769e4b09be9c177e527"},{"problem":43,"code":"(fn [l n]\n (map #(map second %1)\n        \n  (vals \n   (group-by \n    first \n      (map-indexed \n       #(list (mod %1 n) %2) \n       l)\n   )\n  )\n )\n )","user":"56a75810e4b0542e1f8d14fc"},{"problem":43,"code":"(fn [sq n]\n          (->> sq\n               (map-indexed #(vector %1 %2))\n               (group-by #(mod (first %) n))\n               (map second)\n               (map #(map second %))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":43,"code":"(fn reverse-interleave [seq n]\n      (map (fn [take-every]\n                 (let [new-seq (drop take-every seq)]\n                       (take-nth n new-seq)))\n       (range n))\n      )","user":"5d809b4fe4b0915913b1d36c"},{"code":"(fn func [in x]\n(if (empty? in)\n  (repeat x '())\n(map cons (take x in) (func (drop x in) x))))","problem":43,"user":"5186571de4b0da5a5be3bad1"},{"problem":43,"code":"(fn reverse-interleave [coll freq]\n  (loop [coll coll\n         so-far '()]\n    (if (or (empty? (rest coll)) (= (count so-far) freq))\n      (reverse so-far)      \n      (recur (rest coll)\n             (conj so-far (keep-indexed #(if (= 0 (mod %1 freq)) \n                                        %2) \n                                   coll))))))","user":"53d40508e4b00fb29b221332"},{"code":"(fn\n  [xs n]\n  (map (partial take-nth n)\n       (take n (iterate rest (seq xs)))))","problem":43,"user":"51008b6fe4b0700a7a02d6e4"},{"code":"(fn rev-interleave [aSeq n] \n   (letfn [(aux [aSeq counter]\n             (if (= 0 counter) \n               ()\n               (cons (take-nth n aSeq) (aux (rest aSeq) (dec counter)))))]\n     (aux aSeq n)))","problem":43,"user":"51f04e89e4b0274c496158cd"},{"problem":43,"code":"(fn x [c n]\n  (loop [cnt n acc [] col c]\n    (if (zero? cnt)\n      \tacc\n      \t(recur (dec cnt) (conj acc (take-nth n col)) (rest col))\n      )\n    \n    )\n  \n  )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":43,"code":"(fn [coll num] (apply map vector (partition num coll)))","user":"58ebd10de4b056aecfd47d49"},{"problem":43,"code":"(fn [coll num] (partition (/ (count coll) num) (apply interleave (partition num coll))))","user":"5d88c6a3e4b0915913b1d3ad"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  ((fn go [acc rs]\n     (if-let [xs (seq (map #(vector % %2) (range n) (take n rs)))]\n       (let [acc2\n             (reduce (fn [a [i x]]\n                       (assoc a i (cons x (a i))))\n                     acc xs)]\n         (go acc2 (drop n rs))\n         )\n       (map reverse acc)\n       )\n     )\n   (into [] (repeat n nil)) coll\n   )\n  )","user":"5488872ee4b0e286459a11d3"},{"problem":43,"code":"#(map second (group-by (fn [x] (rem x %2)) %1))","user":"58b989dbe4b0888cdc949ccd"},{"problem":43,"code":"(fn rev-interleave\n  [coll split]\n  (loop [parts (partition split coll)\n         iter 0\n         carry []]\n    (if (> iter (dec split))\n      carry\n      (recur\n        parts\n        (inc iter)\n        (conj carry (map #(nth % iter) parts))))))","user":"595d224de4b066ee0a44b016"},{"code":"(fn [l n]\n  (second (reduce (fn [[i a] e]\n    [(mod (inc i) n) (assoc a i (conj\n(nth a i) e))])\n[0 (vec (take n (repeat [])))] l)))","problem":43,"user":"4ed2b168535d44c135fd68dd"},{"problem":43,"code":"(fn [coll n]\n   (take n (map #(take-nth n %) (iterate rest coll))))","user":"53b14289e4b047364c04448b"},{"code":"(fn [xs n] (let [splitter (fn splitter [xs n] \n  \t\t\t\t\t\t(if (empty? xs) \n\t\t\t\t\t\t\t\t'() \n\t\t\t\t\t\t\t\t(lazy-seq (cons (take n xs) (splitter (drop n xs) n)))))]\n\t\t\t\t\t\t(apply map (fn [& args] args) (splitter xs n))))","problem":43,"user":"4f724e56e4b07046d9f4f027"},{"code":"(fn [coll y] map list* (vals (group-by #(mod % y) coll)))","problem":43,"user":"5174ade2e4b07031762f2edf"},{"code":"(fn [coll n]\r\n  (map (fn [i]\r\n         (reverse\r\n          (reduce (fn [r j]\r\n                    (conj r (nth coll (+ i (* j n)))))\r\n                  '()\r\n                  (range (/ (count coll) n)))))\r\n       (range n)))","problem":43,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn [xs n]\n  (vals (group-by #(mod % n) xs)))","problem":43,"user":"4f92709de4b0dcca54ed6cad"},{"problem":43,"code":"(fn [lst x]\n  (let [cnt (/ (count lst) x)]\n    (partition cnt (apply interleave (partition x lst)))\n    ))","user":"5a2e80fde4b09cafd31c7f7d"},{"problem":43,"code":"(fn reverse-interleave [coll n]\n  (letfn [(zip-helper [colls]\n                      (if (some true? (map #(not (empty? (rest %))) colls))\n                        (concat\n                         [(flatten (map (fn [coll] (concat (take 1 coll))) colls))]\n                         (zip-helper (map #(rest %) colls)))\n                         [(flatten (map (fn [coll] (concat (take 1 coll))) colls))]))]\n    (zip-helper (partition n coll))))","user":"52b9e920e4b07a9af57922c9"},{"code":"(fn revint [s n]\n  (vals (group-by #(mod % n) s)))","problem":43,"user":"4f611127e4b0defedf855fb4"},{"code":"(fn\n  [coll val]\n  (vals (group-by #(mod %1 val) coll)))","problem":43,"user":"4ef7a483535dced4c769f258"},{"code":"#(partition (/ (count %1) %2) (apply interleave (partition %2 %1)))","problem":43,"user":"4e89ddf9535d3e98b8023284"},{"problem":43,"code":"#(for [i (range %2)]\n        (for [j (range (/ (count %1) %2))]\n          (nth %1 (+ i (* %2 j)))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":43,"code":"(fn [seqn i]\n  (for [n (range i)]\n    (take-nth i (drop n seqn))))","user":"563f4c47e4b08d4f616f5ed2"},{"code":"(fn blah \n    ([col n] (loop [items col accum '() i 0]\n                 (if (= i n) \n                   (reverse accum) \n                   (recur (rest items) (cons (take-nth n items) accum) (inc i))))))","problem":43,"user":"4f17aa97535d64f603146456"},{"code":"(fn [seqn x] \n  (let [everynth (fn everynth [sqn n] \n                   (if (empty? sqn)\n                     () \n                     (conj (everynth (drop n sqn) n) (first sqn))\n        ))] \n       (map everynth (take x (iterate rest seqn)) (repeat x))\n   )\n)","problem":43,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":43,"code":"(fn [coll n]\n  (loop [acc () coll' coll i n]\n    (if (> i 0)\n      (recur (conj acc (take-nth n coll')) (rest coll') (dec i))\n      (reverse acc))))","user":"4f030cff535dcb61093f6a4d"},{"code":"(fn [coll n] (apply map list(partition n coll)))","problem":43,"user":"510f0b95e4b0faca7c680138"},{"problem":43,"code":"(fn prob43 [col n]\n  (apply map list (partition n col)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":43,"code":"(fn rinterleave [coll n]\n  (->> (partition n coll)\n       (apply (partial map (fn [& args] args)))))","user":"5777c3d6e4b0979f8965164f"},{"code":"(fn [s num] (let [ivec (map-indexed #(vector (mod % num) %2) s)]\n                            (vals (sort (reduce\n                                    (fn [ret x]\n                                      (let [k (first x), v (last x)]\n                                        (assoc ret k (conj (get ret k []) v))))\n                                    {}\n                                    ivec)))))","problem":43,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn\n  [c n]\n  (map\n    #(flatten (partition 1 n (drop % c)))\n    (range n)))","problem":43,"user":"4f18677d535d64f603146459"},{"problem":43,"code":"(fn [l n] (apply (partial map list) (partition n l)))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":43,"code":"(fn [c s]\n   (loop [c (map-indexed vector c), result '()]\n     (cond\n      (>= (count result) s)\n        result\n      :else\n        (recur c (concat result (list (map last (filter #(= (mod (first %) s) (count result)) c)))))\n           )))","user":"52fac708e4b047fd55836fff"},{"problem":43,"code":"(fn [sq n] \n  (loop [si (drop n sq) so (map list (take n sq))] \n\t(if (empty? si) so (recur (drop n si) (map concat so (map list (take n si)))))))","user":"575ddfd1e4b02ea11479938d"},{"problem":43,"code":"(fn [s n] (map #(map first (partition 1 n (drop % s))) (range n)))","user":"4faf97d8e4b081705acca258"},{"problem":43,"code":"(fn [s n]\n    (let [init (into {} (map vector (range n) (repeat '())))\n          indices (cycle (range n))]\n      (map last\n          (reduce\n              (fn [accum [index value]]\n                  (update-in accum [index] #(concat %1 (list %2)) value))\n              init\n              (map vector indices s)))))","user":"5d6f0533e4b04d129b00f2d0"},{"problem":43,"code":"(fn [xs n]\n   (apply (partial map #(apply list %&)) (partition n xs)))","user":"511688d5e4b0b3e208dba05a"},{"problem":43,"code":"(fn [coll n]\n  (-> (map (fn [a] \n        (keep-indexed \n          (fn [i c] \n            (when (= (mod i n) a) c)) \n          coll))  \n        \n        (range 0 n)\n      ))  )","user":"58dc5ceae4b0a4d5acaab69b"},{"code":"(fn [l c] (let [r (reduce #(assoc % (first %2) (conj (get % (first %2) []) (second %2))) {} (keep-indexed #(list (rem % c) %2) l))] (for [x (range c)] (get r x))))","problem":43,"user":"4dc78527535d8a4b2fd7428f"},{"problem":43,"code":"(fn [l b] (sort-by first < (for [x (range b) :let [y (filter #(= x (mod % b)) l)]] y)))","user":"5632e850e4b0bfe05bf117ac"},{"code":"(fn [xs num-seq]\n  (let [p (partition num-seq xs)\n        bucket (fn [x] (map #(nth % x) p))]\n    (map bucket (range 0 num-seq))))","problem":43,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"(fn [coll num-subseqs]\n    (let [ps (partition num-subseqs coll)]\n      (for [i (range num-subseqs)]\n        (map #(nth % i) ps))))","problem":43,"user":"4e89e939535d3e98b8023287"},{"problem":43,"code":"(fn split\n  [l n]\n  (loop [l l i n out []]\n    (cond (empty? l) out\n          (< i 1) out\n          :else (recur (rest l) (dec i) (conj out (take-nth n l))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":43,"code":"(fn my-deinterleave [coll n]\n  (loop [i n\n         val '()]\n    (if (= i 0)\n      val\n      (recur (dec i) (cons (loop [j 0\n                                  v '()]\n                             (if (= j (/ (count coll) n))\n                               v\n                               (recur (inc j) (concat v (list (nth coll (+ (dec i) (* j n))))))))\n                           val)))))","user":"55b28b57e4b01b9910ae296c"},{"problem":43,"code":"(fn [seq n]\n  (let [partitions (partition n seq)]\n    (apply map vector partitions)))","user":"55f778bee4b06e875b46ceab"},{"code":"(fn [c n]\n  (first (reduce (fn [[vov i] e]\n                   (let [j (mod i n)]\n                     [(update-in vov [j] conj e) (inc j)]))\n                 [(vec (repeat n (vector))) 0]\n                 c)))","problem":43,"user":"5392b849e4b0b51d73faaeb1"},{"problem":43,"code":"(fn rev-interleave [coll n]\n  (for [i (range n)]\n    (take-nth n (drop i coll))))","user":"542c026ae4b0dad94371f29a"},{"code":"#(vals (group-by (fn [itm] (mod itm %2)) %1))","problem":43,"user":"521e8227e4b0dd19981ad082"},{"problem":43,"code":"(fn rev-interleave\n  [se n]\n  (let [every-nth (fn every-nth [se]\n                   (when (first se)\n                     (cons (first se)\n                           (lazy-seq (every-nth (nth (iterate rest se) n))))))]\n    (map every-nth (take n (iterate rest se)))))","user":"554d386ee4b0a04f792995b8"},{"code":"(fn[a n] (for [ y (range n ) ] (for [ x (range 0 (count a) n)  :when (< (+ x y) (count a))  ] (nth  a (+ x y)) )) )","problem":43,"user":"50b25f2ce4b03ea88043355f"},{"problem":43,"code":"(fn [x n]\n   (map #(take-nth n %) (take n (iterate rest x))))","user":"51eda45ce4b0bb507043159b"},{"problem":43,"code":"(fn [ls n]\n  (let [v_ls (into [] ls)] (for [i (range 0 n)] \n    (for [j (range 0 (count ls)) :when (= i (rem j n))] (get v_ls j)))))","user":"57915ba4e4b0ebec4cfb75ba"},{"code":"(fn [coll n]\n  (let [length (count coll)\n        sublength (/ length n)]\n    (partition sublength (apply interleave (partition n coll)))))","problem":43,"user":"50ed3c6be4b01236b1d4983b"},{"problem":43,"code":"(fn [xs cnt]\n  (for [d (range cnt)]\n    (take-nth cnt (drop d xs))))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn [coll n] (map (partial take-nth n) (take n (iterate rest coll))))","problem":43,"user":"4db86aee535d1e037afb2193"},{"problem":43,"code":"(fn[coll n]\n  (loop [in coll out (repeat n [])]\n    (cond (empty? in) out\n          :else (let [[before after] (split-at n in)]\n                  (recur after (map (fn[i coll](conj coll (nth before i))) (range 0 n) out))))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn all-n [values n]\n  (let [with-indexes (map #(vector %1 %2) (range) values)]\n    (for [i (range n)]\n\t (map last (filter (fn [pair] (= i (mod (first pair) n))) \n\t\t with-indexes)))))","problem":43,"user":"4fe89475e4b07c9f6fd12c4f"},{"problem":43,"code":"#(->> (partition %2 %1) (apply mapv vector))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (->> coll\n       (partition n)\n       (apply interleave)\n       (partition (/ (count coll) n))))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":43,"code":"(fn reverse-interleave-seq [lst num]\n  (vals (group-by #(mod % num) lst)))","user":"570e6974e4b0b0fb43fd06ef"},{"problem":43,"code":"(fn [v n]\n  ((fn rev-inter [result i rst]\n     (if (empty? rst) result\n      (rev-inter (update-in result [(rem i n)] #(conj % (first rst))) (inc i) (rest rst)))) (vec (repeat n [])) 0 v))","user":"58f98231e4b0438e51c2cf4c"},{"code":"#(reverse (partition (/ (count %1) %2) (take (count %1) (rest (take-nth %2 (cycle (conj (seq %1) :z)))))))","problem":43,"user":"5134973ce4b0230e9f713b42"},{"problem":43,"code":"(fn  [coll n] (for [i (range n)] (take-nth n (drop i coll))))","user":"5744e1a2e4b009280f9f2b43"},{"problem":43,"code":"(fn [coll n]\n  (partition (/ (count coll) n)\n             (apply interleave\n                    (partition n coll))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":43,"code":"(fn q43 [input n]\n  (let [z (map-indexed (fn [i val] (list (rem i n) val)) input)]\n    (->> z\n     (reduce (fn [result [k val]]\n               (let [new-val (if (nil? (result k))\n                               [val]\n                               (conj (result k) val))]\n                 (assoc result k new-val))) {})\n     (sort-by first)\n     (vals))))","user":"5cab0ad9e4b048ec896c5c46"},{"code":"(fn [coll n]\n  (let [make-index\n        (fn [coll n]\n          (map-indexed\n           (fn [idx itm]\n             (vector (mod idx n) itm)) coll))]\n    (let [work (make-index coll n)]\n      (reduce \n       (fn [acc [i itm]]\n         (assoc acc i (conj (nth acc i) itm)))\n       (vec (repeat n []))\n       work))))","problem":43,"user":"51631002e4b017b283c712c1"},{"code":"(fn [s n]\n(map #(take-nth n (drop % s)) (range n)))","problem":43,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":43,"code":"(fn rev-interleave [coll n] (apply map vector (partition n coll)))","user":"5cdc17d0e4b05ee0cb31173c"},{"problem":43,"code":"(fn [sq n]\n  (letfn [(gen-table [n]\n            (apply conj (map #(array-map % [])\n                             (concat (range 1 n) '(0)))))]\n    (loop [i 1, s sq, table (gen-table n)]\n      (if (empty? s)\n        (reverse (map list* (vals table)))\n        (recur (inc i)\n               (rest s)\n               (conj table\n                     [(mod i n) (conj (table (mod i n))\n                                      (first s))])\n               )))))","user":"57035ccfe4b08d47c97781ef"},{"code":"(fn [theList, number]\n  (\n    (fn fnName1 [theList, number, temp1]\n      (if\n\t    (< temp1 number)\n        (cons\n\t\t  (\n            (fn fnName2 [theList, number, temp2]\n              (if\n                (> (count theList) 0)\n                (if\n                  (= temp2 0)\n                  (cons (first theList) (fnName2 (rest theList) number (- number 1)))\n                  (fnName2 (rest theList) number (- temp2 1))\n                )\n              )\n            )\n            theList\n            number\n            temp1\n          )\n\t\t  (fnName1 theList number (+ temp1 1))\n\t    )\n      )\n\t)\n    theList\n\tnumber\n\t0\n  )\n)","problem":43,"user":"50ff3800e4b017584cb41ccb"},{"problem":43,"code":"(fn [ls n] (let [g (group-by second (map vector ls (cycle (range n 0 -1))))]\n             (for [i (range n 0 -1)]\n               (map first (g i)))))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn [s n]\n  (map (partial map first)\n       (vals (group-by last\n                       (partition 2(interleave s (-> n range cycle)))))))","problem":43,"user":"4fc3a72ae4b081705acca342"},{"problem":43,"code":"(fn revint\n  [seqen div]\n  (map #(map second %)\n       (vals (group-by (fn \n            [x]\n            (mod (first x) div))\n            (map vector (range) seqen)))))","user":"5632abbee4b0bfe05bf117a7"},{"problem":43,"code":"(fn [x y]  (map #(map second %) (map second (group-by #(mod (first %) y) (map-indexed vector x)))))","user":"540479e7e4b0addc1aec665a"},{"problem":43,"code":"(fn [coll n]\n  (loop [r coll\n         c 0\n         final (into [] (repeat n []))]\n    (if (empty? r)\n      final\n      (let [c' (mod (inc c) n)\n            new-seq (conj (nth final c) (first r))\n            final' (assoc final c new-seq)]\n        (recur (rest r) c' final')))))","user":"53fb5256e4b0de5c4184857f"},{"problem":43,"code":"(fn spread ([x n] (spread (map #(list %) (drop n x)) n (map #(list %) (take n x))))\n   ([x n out]\n    (if (<= (count x) n)\n      (map (fn [a b] (reverse (into a b))) out x)\n      (spread (drop n x) n (map (fn [a b] (into a b)) out x)))))","user":"5dd90651e4b0948ae9d9ad97"},{"code":"(fn [l n]\r\n    (reduce \r\n      (fn [[h & t] e] (concat t [(conj h e)])) \r\n      (for [x (range n)] []) \r\n      l)\r\n    )","problem":43,"user":"50588ff1e4b06522596eba7e"},{"code":"(fn reverse-interleave\n  ([s n] (reverse-interleave s n 0))\n  ([s n offset]\n     (if (= offset n)\n        []\n        (lazy-seq (cons (take-nth n (drop offset s))\n                        (reverse-interleave s n (inc offset)))))))","problem":43,"user":"50d93c53e4b0fd36a4b89223"},{"problem":43,"code":"(fn [s n]\n  (partition (quot (count s) n) (apply interleave (partition n s)))\n  )","user":"58d28c70e4b03c36ff7e5901"},{"problem":43,"code":"(fn rleave [x y]\n  (let [lshift (fn anon [s n]\n                (if (<= n 0) s\n                  (anon (concat (rest s) (list (first s))) (- n 1))))\n        every-nth (fn [s n]\n                   (let [f (fn anon [m i l]\n                             (if (= l []) '()\n                               (if (<= m 1)\n                                 (concat (list (first l)) (anon i i (rest l)))\n                                 (anon (- m 1) i (rest l)))))]\n                     (f n n s)))\n        f (fn anon [s n c]\n            (if (<= c 0) '()\n              (concat (list (conj (every-nth (rest s) n) (first s))) (anon (lshift s 1) n (- c 1)))))]\n    (f x y y)))","user":"57d1d6c8e4b0bd073c202370"},{"problem":43,"code":"(fn\n  [li prt]\n  (apply \n   map vector \n   (partition prt li)))","user":"586a657de4b0f14aab7c88bd"},{"problem":43,"code":"(fn deleave\n  ([xs n]\n   (take n (deleave xs n n)))\n  ([xs n m]\n   (if (or (= m 0) (empty? xs))\n     []\n     (concat [(take-nth n xs)] (deleave (rest xs) n (- n 1))))))","user":"5bcddaeee4b0e9689409ee07"},{"code":"(fn reverse-interleave [xs n]\n      (if (= n 1)\n          (cons xs nil)\n          (let [parts (partition n xs)]\n            (let [f (map first parts) r (mapcat rest parts)]\n              (cons f (reverse-interleave r (dec n)))))))","problem":43,"user":"5186134ce4b0da5a5be3bac7"},{"code":"; apply interleave to the partitioning of the sequence into n sized chunks\n; finally, partition that by however many times n fits into the original list\n; this is broken for cases where count s is not divisible by n\n\n(fn [s n] \n  (partition \n    (/ (count s) n) \n    (apply interleave (partition n s))))","problem":43,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":43,"code":"(fn [xs n]\n  (apply map list (partition n xs))\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"code":"(fn reverse-interleave [coll n]\n   (apply map list (partition n coll)))","problem":43,"user":"4daef21cedd6309eace4d169"},{"problem":43,"code":"(fn [col x]\n  \t (partition (/ (count col) x) (apply interleave (partition x col)) )\n )","user":"5da20e73e4b000c986472be1"},{"code":"#(->> % (partition %2) (apply interleave) (partition (/ (count %) %2)))","problem":43,"user":"50e3f311e4b0463d32072487"},{"problem":43,"code":"(fn [l n]\n  (for [x (range n)]\n    (take-nth n (drop x l))))","user":"54848141e4b0e286459a119e"},{"code":"(fn uninterleave [coll n]\n  (apply map list (partition n coll)))","problem":43,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn rev-int [s n] (for [i (range n)] (take-nth n (nthnext s i) )) )","problem":43,"user":"51729002e4b044b2ef48a850"},{"problem":43,"code":"(fn [coll n]\n    (apply map list (partition n coll)))","user":"53ae16e2e4b047364c044472"},{"problem":43,"code":"#(partition (/ (count %1) %2)\n            (for [i (range %2)\n                  l (partition %2 %1)]\n              (nth l i)))","user":"4f85a75ce4b033992c121c48"},{"code":"(fn [s n]\n  (loop [xs s it n result '()]\n    (if (= it 0)\n      (reverse result)\n      (recur (rest xs) (dec it) (conj result (take-nth n xs))))))","problem":43,"user":"52277ab9e4b0186687e23a4f"},{"problem":43,"code":"(fn [coll n] (let [vcoll (vec coll)] (for [i (range n)] (for [j (range (quot (count coll) n))]  (get vcoll (+ i (* n j)))))))","user":"5659679ae4b068f2fe63dbeb"},{"code":"(fn [l n]\n  (map\n    (fn [i]\n      (take-nth n (drop i l)))\n    (range n)))","problem":43,"user":"50435852e4b034ff00315d22"},{"problem":43,"code":"(fn reverse-interleave [col n]\n    (map #(map last %1)\n        (vals\n            (group-by first\n                (map-indexed #(list (+ 1 (rem %1 n)) %2) col)))))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":43,"code":"(fn [lst n]\n (loop [collections (take n (repeat []))\n        source lst]\n   (if (empty? source)\n     collections\n     (recur\n      (map \n       (fn [coll item]\n         (conj coll item))\n       collections\n       (take n source))\n      (drop n source)))))","user":"572722c4e4b0c5bde472c134"},{"problem":43,"code":"(fn [sx n]\n  (loop [s sx\n         acc []]\n    (if-not (= (count acc) n) \n      (recur (rest s) (conj acc (flatten (partition-all 1 n s))))\n      acc)))","user":"51316a63e4b0431ba07e7feb"},{"problem":43,"code":"(fn [s n]\n     (for [x (range n)]\n       (take-nth n (drop x s)))\n     )","user":"5ab07d63e4b073f1774425af"},{"problem":43,"code":"(fn [s k]\n  (loop [res [], i 0]\n    (if (>= i k) res\n        (recur\n         (conj res (map #(nth s %)  (filter #(= (rem % k) i) (range (count s)))))\n         (inc i)))))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":43,"code":"(fn rev-interleave\n  [coll n]\n  (letfn [(rev-il [coll n m] \n    (if (zero? m)\n      '()\n      (cons (take-nth n coll) (rev-il (rest coll) n (dec m)))))]\n    (rev-il coll n n)))","user":"56540485e4b0f9d632dd847a"},{"problem":43,"code":"(fn reverse-interleave\n  [coll n]\n  (->> coll\n       (partition n)\n       (reduce (fn [result xs]\n                 (map (fn [r x] (conj r x)) result xs)) (repeat n []))))","user":"5a0a04eee4b0eab8c0448935"},{"code":"(fn [x1 x2] (partition (quot (count x1) x2) (for [x (range x2) y (range x (count x1) x2)] (nth x1 y))))","problem":43,"user":"5105ed16e4b01150e115ebe2"},{"problem":43,"code":"(fn [l n]\n  (loop [l l i 0 result (vec (repeat n []))]\n    (if \n      (empty? l)\n      result\n      (recur\n        (rest l)\n        (+ i 1)\n        (assoc-in result [(mod i n) (quot i n)] (first l))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [elts n]\n    (loop [ret [], elts (into #{} elts), n n]\n      (if (= n 0)\n          ret\n          (let [gret (conj ret (keep-indexed #(if (= (mod %1 n) 0) %2) elts))]\n            (recur gret (clojure.set/difference elts (into #{} (flatten gret))) (dec n))))))","problem":43,"user":"502940a9e4b061fd216be4b8"},{"problem":43,"code":"(fn [col n]\n  (let [n2 (count (partition n col))]\n    (->> (partition n col)\n         (apply interleave)\n         (partition n2))))","user":"55630cc1e4b0c656e3ff17e0"},{"code":"(fn [coll n] (apply map list (partition n coll)))","problem":43,"user":"4dd52e29535dae65d5c462e5"}]