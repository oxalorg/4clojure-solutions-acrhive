[{"code":"(fn [n a b]\n  (let [calc #(let [n (quot (dec n) %)] (/ (* % n (inc n)) 2))]\n    (- (+ (calc a) (calc b)) (calc (* a b)))))","problem":148,"user":"4edab806535d10e5ff6f5311"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n b]\n               (*' b (*' n (/ (+' 1 n) 2))))]\n    (let [c-a (quot (dec n) a)\n          c-b (quot (dec n) b)\n          c-ab (quot (dec n) (* a b))]\n      (-' (+' (sum c-a a) (sum c-b b)) (sum c-ab (* a b))))))","user":"56288ccae4b00e49c7cb47ea"},{"code":"(fn [n a b]\n    (letfn\n        [(sum [x]\n           (let [y (quot (dec (bigint n)) x)]\n             (* x (/ (* (inc y) y) 2))))]\n      (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn [n & as]\n  (apply\n   +'\n   (map\n    (fn [a] (let [x (quot n a)\n                  y (if (neg? a) (- x) x)\n                  z (if (= 0 (rem n a)) (dec y) y)]\n              (*' z (/ (+ a (* a z)) 2))))\n    (cons (- (reduce * as)) as))))","problem":148,"user":"51307b84e4b08c712d3fae39"},{"problem":148,"code":"(fn [n a b]\n    (let [sum-mults (fn [x]\n                      (let [cnt (quot (dec n) x)\n                            lo  x\n                            hi  (*' x cnt)]\n                        (if (zero? cnt)\n                          0\n                          (*' cnt\n                              (/ (+' lo hi) 2)))))]\n      (-' (+' (sum-mults a) (sum-mults b))\n          (sum-mults (*' a b)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":148,"code":"(fn [n d1 d2]\n  (letfn [(sumlist [m]\n            (bigint (/ (*' (+' 1 m)\n                          m)\n                       2)))]\n    (- (+' (* d1 (sumlist (quot (dec n) d1)))\n          (* d2 (sumlist (quot (dec n) d2))))\n       (* d1 d2 (sumlist (quot (dec n) (* d1 d2)))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":148,"code":";; This means you need an analytic form. Which is mildly annoying. But not that hard\n;; Basically sum of every a + sum of every b - sum of every (a * b)\n;; So 1 + 2 + ... n = n (n+1)/2\n;; so a + 2a + ... + ma = a m (m+1)/2\n;; m will be the floor of n / a\n\n(fn [n a b]\n    (let [ab      (* a b)\n          n_a     (bigint (/ (dec n) a))\n          n_b     (bigint (/ (dec n) b))\n          n_ab    (bigint (/ (dec n) ab))\n          sum_a   (/ (* a n_a (inc n_a)) (bigint 2))\n          sum_b   (/ (* b n_b (inc n_b)) (bigint 2))\n          sum_ab  (/ (* ab n_ab (inc n_ab)) (bigint 2))\n          ]\n      (- (+ sum_a sum_b) sum_ab)\n      )\n    )","user":"57aa290de4b0b8559636fc65"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-of-divisors [x] (let [number-of-divisors (quot (dec n) x)]\n                                 (*' x (/ (*' number-of-divisors\n                                              (inc number-of-divisors))\n                                          2))))]\n    (- (+ (sum-of-divisors a) (sum-of-divisors b))\n       (sum-of-divisors (* a b)))))","user":"53acaf1fe4b047364c04445f"},{"problem":148,"code":"(fn [a q p]\n    (let [sub #(let [x (quot (dec a) %)]\n                 (/ (*' x (+ % (* x %))) 2))]\n      (-' (+' (sub q) (sub p))\n         (sub (* q p)))))","user":"567d132ee4b05957ce8c61c3"},{"code":"(fn [ni ai bi]\n  (let [n (bigint ni) a (bigint ai) b (bigint bi) ab (* (bigint ai) (bigint bi))]\n    (let [na (quot (dec n) a) nb (quot (dec n) b) nab (quot (dec n) ab)]\n      (println na nb nab)\n      (- (+ (* a (/ (* na (inc na)) 2)) (* b (/ (* nb (inc nb)) 2))) (* ab (/ (* nab (inc nab)) 2))))))","problem":148,"user":"52015698e4b0d7096e99ddba"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [f (fn [k]\n            (let [l (quot (dec n) k)]\n              (/ (*' k l (+' l 1)) 2)))]\n    (-' (+' (f a) (f b))\n       (f (*' a b)))))","user":"519136e9e4b0f8ef0be96c01"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [a]\n            (let [e (->> a (mod (dec n)) inc (- n))]\n              (-> (+ a e) (*' (/ e a)) (/ 2))))]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"5416b4a2e4b01498b1a71a01"},{"problem":148,"code":"(fn big [a b c]\n  (let [bigb (bigint (quot (dec a) b))\n        bigc (bigint (quot (dec a) c))\n        bigh (bigint (quot (dec a) (* b c)))]\n    (-\n     (+ (quot (*' b (inc bigb) bigb) 2)\n        (quot (*' c (inc bigc) bigc) 2))\n     (quot (*' c b (inc bigh) bigh) 2))))","user":"51c1b644e4b0d204dbe2ca12"},{"problem":148,"code":"(fn [n x y] (let [f #(long (/ (dec n) %))\n                      g #(/ (*' % (inc %)) 2)\n                      h #(*' % (g (f %)))]\n                  (- (+ (h x) (h y)) (h (* x y)))))","user":"51e28063e4b08e53a149f0f2"},{"problem":148,"code":"(fn [n a b]\n    (let [f (fn [x]\n              (let [y (quot (dec n) x)]\n                (/ (*' x y (inc y)) 2)))]\n      (+' (f a) (f b) (- (f (* a b))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn bd [n a b]\n  (let [sr (fn [n] (/ (* n (inc n)) 2))]\n  (- \n   (+ \n    (* a (sr (bigint (/ (dec n) a))))\n    (* b (sr (bigint (/ (dec n) b)))))\n   (* a b (sr (bigint (/ (dec n) (* a b))))))))","problem":148,"user":"536aa86de4b0243289761eb1"},{"code":"(fn zz [n a b]\n  (let [m #(*' (inc %) %)\n        c #(-> (dec n)\n               (quot %)\n               m\n               (/ 2)\n               (*' %))\n        ca (c a)\n        cb (c b)\n        cab (c (*' a b))]\n    (-' (+' ca cb) cab)))","problem":148,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":148,"code":"(fn sum-n [n a b]\n  (let [g (fn [x] (let [nx (bigint (/ (- n 1) x))\n                        lst (* x nx)]\n                      (/ (* nx (+ x lst)) 2)))\n        as (g a)\n        bs (g b)\n        abs (- 0 (g (* a b)))]\n    (+ as bs abs)))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":148,"code":"(fn [n a b] (-' (+' (*' (/ (quot (dec n) a) 2) (+' a (*' (quot (dec n) a) a))) (*' (/ (quot (dec n) b) 2) (+' b (*' (quot (dec n) b) b))))\n                (*' (/ (quot (dec n) (* a b)) 2) (+' (* a b) (*' (quot (dec n) (* a b)) (* a b))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn big-divide [n a b]\n  (let [a (bigint a)\n        b (bigint b)\n        n (bigint n)\n        na (quot (dec n) a)\n        nb (quot (dec n) b)\n        nab (quot (dec n) (* a b))\n        last-a (* na a)\n        last-b (* nb b)\n        last-ab (* nab (* a b))]\n    (- (+ (/ (* na (+ a last-a)) 2)\n          (/ (* nb (+ b last-b)) 2))\n       (/ (* nab (+ (* a b) last-ab)) 2))))","problem":148,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn [n a b]\r\n  (let [i #(-> (/ n %) Math/ceil bigint)\r\n        s #(* % (i %) (dec (i %)) (/ 2))]\r\n    (- (+ (s a) (s b)) (s (* a b)))))","problem":148,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"#(letfn [(s [c d]\n           (let [e (quot (dec c) d)] \n             (/ (*' e (+' (*' 2 d) (*' d (dec e))))2)))]\n   (-' (+' (s % %2) (s % %3)) (s % (*' %2 %3))))","problem":148,"user":"53973e7be4b0b51d73faaee6"},{"problem":148,"code":"(fn[max p1 p2](\n  (fn[m](- (+ (first m) (second m)) (last m) ))\n  (map\n  (fn[p](\n    * (/ (* (bigint (/ (dec max) p)) (inc (bigint (/ (dec max) p)))) 2) p \n  ))\n  [p1 p2 (* p1 p2)])\n))","user":"56039843e4b04bb52996e1be"},{"problem":148,"code":"(fn [n d1 d2]\n    (letfn [(calcsum [n d]\n              (let [divcount (quot (dec n) d)]\n                (if (= 1 divcount)\n                  d\n                  (* d  (+ divcount 1) (/ divcount 2)))))]\n      (-' (+' (calcsum n d1)\n            (calcsum n d2))\n          (calcsum n (* d1 d2)))))","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn f[n a b]\n  (letfn [(s[n a] (let[q (quot n a)] (* (bigint a) q (inc q))))]\n    (let [n (dec n) ] (/ (+ (s n a) (s n b) (- (s n (* a b)))) 2))))","problem":148,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"#(letfn [(n [a] (quot (- % 1) a)) (s [a] (/ (* a (+ (n a) 1) (n a)) 2))]\n    (-\n     (+ (s %2) (s %3))\n     (s (* %2 %3))))","problem":148,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn [n x y]\n  (let [g #(* % (quot (- n 1) %))\n        f #(* (/ (g %) 2) (/ (+ (g %) %) %))]\n    (- (+ (f x) (f y)) (f (* x y)))))","problem":148,"user":"536e0930e4b0fc7073fd6e66"},{"problem":148,"code":"(fn prob148 \n  [n a b] \n  (letfn [(term-count [bound v] (+ (quot bound v) (if (> (rem bound v) 0) 1 0)))\n          (last-term [cnt d] (* (dec cnt) d))\n          (sum-terms [bound d] (let [cnt (term-count bound d)\n                                     last (last-term cnt d)]\n                                 (*' (/ cnt 2) last)))]\n    (if (and (> n a) (> n b))\n      (let [fifteen (if (> n (* a b)) (sum-terms n (* a b)) 0)]\n        (- (+ (sum-terms n a) (sum-terms n b)) fifteen))\n      0)))","user":"4ebbff41535dfed6da9c6d78"},{"problem":148,"code":"#(letfn [(sum-all-divisible [n divisor]\n\t(let [count-of-divisible (bigint (/ (dec n) divisor))]\n\t\t(* divisor (/ (* count-of-divisible (inc count-of-divisible)) 2))))]\n\t(-\n\t\t(+ (sum-all-divisible %1 %2) (sum-all-divisible %1 %3))\n\t\t(sum-all-divisible %1 (* %2 %3))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (letfn [ (sum\n               ([n] (*' n (/ (+ 1 n ) 2)) )\n               ([n a] (*' a (sum (quot n a))))\n               ) ]\n    (let [nf (dec n)]\n      (-'  (+' (sum nf a) (sum nf b)) (sum nf (*' a b))))))","user":"51f81925e4b09be9c177e526"},{"code":"(fn f [n a b]\n  (letfn [(s [x d] (/ (* (quot (dec x) d) (+ d (* (quot (dec x) d) d))) 2))]\n    (- (+ (s n a) (s n b)) (s n (* a b)))))","problem":148,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(g [x]\n     (->> (if (zero? (rem n x)) (-' (long (/ n x))) (long (/ n x)))\n          (#(/ (*' % (+' % 1)) 2))\n          (*' x)))]\n  (-' (apply + (map g [a b])) (g (*' a b)))))","user":"548b7db8e4b0e286459a11fd"},{"problem":148,"code":"(fn dumsum [n a b]\n  (let [sm (fn [x]\n            (let [m (quot (dec n) x)]\n              (*' x m (/ (+' m 1) 2))))]\n    (-' (+' (sm a) (sm b)) (sm (*' a b)))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":148,"code":"(fn [n a b] (let [biggest-div #(loop [n (dec n)] (if (= 0 (mod n %)) n (recur (dec n))))\n                   sum-divs #(if (< n %)\n                               0\n                               (if (= (biggest-div %) %)\n                                 %\n                                 (* (+ % (biggest-div %)) (/ (biggest-div %) 2 %))))]\n               (- (+ (sum-divs a) (sum-divs b)) (sum-divs (* a b)))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":148,"code":"(fn [n a b]\n (letfn [\n  (f [x]\n   (let\n    [n (bigint n)\n     k (quot (dec n) x)]\n    (/ (* (+ x (* x k)) k)\n       2)))]\n  (- (+ (f a) (f b))\n     (f (* a b)))))","user":"549a999be4b0f3d1d8e70f6f"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(sum [m] (/ (*' m (inc m)) 2))\n           (foo [x] (*' x (sum (quot (dec n) x))))]\n     (- (+ (foo a) (foo b))\n        (foo (* a b)))))","user":"53ed6976e4b0d648e757f4c4"},{"problem":148,"code":"(fn [n a b]\n  (let [steps (memoize #(quot (dec n) %))\n        sum #(/ (*' %\n                    (steps %) \n                    (inc (steps %))) \n                2)]\n    (- (+ (sum a) (sum b)) \n       (sum (* a b)))))","user":"5956c6dae4b066ee0a44af61"},{"problem":148,"code":"(fn big-divide [n a b]\n  (if (> a b) \n    (recur n b a)\n    (let [m (- n 1)\n          qa (quot m a)\n          qb (quot m b)\n          qab (quot m (*' a b))]\n          (+'\n            (- \n              (/ (*' qa (inc qa) a) 2)\n              (/ (*' qab (inc qab) a b) 2)\n            )\n            (/ (*' qb (inc qb) b) 2)))))","user":"52e657e4e4b09f7907dd1472"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [c]\n             (let [x (quot (dec n) c)]\n               (/ (*' c x (inc x)) 2)))]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"55625903e4b0c656e3ff17d7"},{"problem":148,"code":"(fn big-divide [n a b]\n   (let [n (dec n)\n         n_a (bigint (/ (- n (rem n a)) a))\n         n_b (bigint (/ (- n (rem n b)) b))\n         ab  (* a b)\n         n_ab (bigint (/ (- n (rem n ab)) ab))]\n     (- (+ (* (/ (* n_a (inc n_a)) 2) a)\n           (* (/ (* n_b (inc n_b)) 2) b))\n        (+ (* (/ (* n_ab (inc n_ab)) 2) ab)))))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [n a b]\n  (let [\n    nn (dec n)\n    qa (quot nn a)\n    qb (quot nn b)\n    qab (quot nn (* a b))\n    sum (fn [xn x] (* (/ (* xn (inc xn)) 2) x))]\n  (- (+ (sum qa a) (sum qb b)) (sum qab (* a b)))))","problem":148,"user":"4fc0853ae4b081705acca327"},{"code":"(fn [n a b]\n  ;; NOTE, Sun Sep 15 2013\n\n  ;; This could be simplified, but I've got other things that need to be\n  ;; done, namely making some money so I can eat. D:\n\n  (let [n (BigInteger. (str n))\n        a (BigInteger. (str a))\n        b (BigInteger. (str b))]\n             \n    (letfn [(lcm [a b] (/ (* a b) (.gcd a b)))\n            (f [n d] (* (quot n d) d))\n            (summ [end step]\n              (let [end (if (even? end)\n                          (f (dec end) step)\n                          (f end step))]\n                (/ (* (+ end step) (/ end step)) 2)))]\n      (- (+ (summ n a) (summ n b))\n         (summ n (lcm a b))))))","problem":148,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn [maxi n1 n2]\n    (let [sum-divs\n          (fn [n]\n            (let [nMax (bigint (/ (- maxi 1) n))\n                  s (/  (* nMax (+ nMax 1)) 2)] \n              (* s n)))\n            ;;(reduce + (map #(* n %) (range (bigint (/ maxi n))))))\n          prod (* n1 n2)]\n      (- (+ (sum-divs n1) (sum-divs n2)) (sum-divs prod))))","problem":148,"user":"4e49a7bb535dc968683fc4c6"},{"problem":148,"code":"(fn [a b c] (let [sigma \n  (fn [x y] (* (+ (- x (rem x y)) y) (bigint (/ x y))))]\n  (/ (- (+ (sigma (- a 1) b) (sigma (- a 1) c)) (sigma (- a 1) (* b c))) 2)))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":148,"code":"(fn [n a b]\n(let [* *']  ;; dealing with big ints\n    (let [tri #(quot (*' % (inc %)) 2)\n          n   (dec n)]\n      (+ (* a (tri (quot n a)))\n         (* b (tri (quot n b)))\n         (- (* a b (tri (quot n (* a b)))))\n         ))))","user":"5433a07be4b0b6b47310fce0"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(cnt [x] (let [t (quot (dec n) (bigint x))] (/ (* t (inc t)) 2)))]\n    (- (+\n        (* a (cnt a))\n        (* b (cnt b)))\n       (* a b (cnt (* a b))))))","user":"57c647bbe4b05aa3c4741cf3"},{"problem":148,"code":"(fn [n a b]\n  (let [m #(quot (dec n) %) ; largest multiple\n        s #(/ (*' % (inc %)) 2) ; sum from 1 to n\n        p #(*' % (s (m %))) ; product of sum of all multiples\n        \n        c (* a b)]\n    (-' (+' (p a) (p b)) (p c))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [n a b]\n  (letfn [(sum-multiples [n limit]\n            (let [count (.divide (BigInteger/valueOf limit) (BigInteger/valueOf n))]\n              (.divide (.multiply (.multiply count (.add count (BigInteger/valueOf 1))) (BigInteger/valueOf n)) (BigInteger/valueOf 2))))]\n    (.subtract (.add (sum-multiples a (dec n)) (sum-multiples b (dec n)))\n         (sum-multiples (* a b) (dec n)))))","problem":148,"user":"4e7c8fd1535db169f9c796be"},{"problem":148,"code":"(fn __ [n a b]\n  (let [f (fn [x] (/ (*' x (inc x)) 2))\n        g (fn [x] (*' x (f (quot (dec n) x))))]\n    (- (+ (g a) (g b)) (g (* a b)))))","user":"54c271b9e4b045293a27f602"},{"problem":148,"code":"(fn [n a b]\n  (let [m (- n 1)\n        q #(bigint (quot %1 %2))\n        c (q m a)\n        d (q m b)\n        x (q m (* a b))\n        s #(/ (* % (+ 1 %)) 2)]\n    (+ (- (* a b (s x))) (* a (s c)) (* b (s d)))))","user":"5742ec91e4b05c31a32c0883"},{"problem":148,"code":"(fn [a b c]\n  (let [calc-sum (fn [n d]\n                   (let [m (quot (dec n) d)]\n                   \t(/ (*' m (inc m) d) 2)))]\n    (- (+' (calc-sum a b) (calc-sum a c)) (calc-sum a (* b c)))))","user":"559b55d6e4b066d22e731f54"},{"problem":148,"code":"(fn [lim a b]\n    (let [sm (fn [x]\n               (let [n (quot (dec lim) x)]\n                 (*' x (/ (*' n (inc n)) 2))))]\n      (- (+' (sm a) (sm b)) (sm (*' a b)))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn [n div1 div2]\n  (let [sum-n (fn [n] (/ (* n (inc n)) 2))\n  up-to (fn [n div] (let [quotient (quot n div)\n\t\t\t\tmodulo (mod n div)]\n\t\t\t    (if (= 0 modulo)\n\t\t\t      (dec quotient)\n\t\t\t      quotient)))]\n    (- (+ (* div1 (sum-n (up-to n div1)))\n\t  (* div2 (sum-n (up-to n div2))))\n       (* (* div1 div2) (sum-n (up-to n (* div1 div2)))))\n    ))","problem":148,"user":"4dd7b81d535d2dad7130b5d3"},{"problem":148,"code":"(fn [x x1 x2]\n  (let [n1 (quot (dec x) x1)\n        n2 (quot (dec x) x2)\n        n3 (quot (dec x) (* x1 x2))\n        l1 (* x1 n1)\n        l2 (* x2 n2)\n        l3 (* x1 x2 n3)]\n    (- (+ (* (/ n1 2) (+ x1 l1))\n          (* (/ n2 2) (+ x2 l2)))\n       (* (/ n3 2) (+ (* x1 x2) l3)))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":148,"code":"(fn [x y z]\n             (let [n   (bigint (dec x))\n                   a   (bigint y)\n                   b   (bigint z)\n                   na  (quot n a)\n                   nb  (quot n b)\n                   nab (quot n (*' a b))]\n               (quot (- (+' (*' a (*' na (+' na 1N)))\n                                   (*' b (*' nb (+' nb 1N))))\n                             (*' (*' a b) (*' nab (+' nab 1N))))\n                          2N)))","user":"5c0e3f86e4b01240ff56713d"},{"problem":148,"code":"(fn [n a b]\n  (let [am (quot (dec n) a)\n        am (*' a am (inc am) 1/2)\n        bm (quot (dec n) b)\n        bm (*' b bm (inc bm) 1/2)\n        abm (quot (dec n) (* a b))\n        abm (*' a b abm (inc abm) -1/2)]\n    (+ am bm abm)))","user":"53908e6be4b0b51d73faae9a"},{"code":"(fn [n a b]\n  (let [a-size (quot (dec n) a)\n        b-size (quot (dec n) b)\n        ab-size (quot (dec n) (* a b))\n        a-total (* 1/2 a-size (inc a-size) a)\n        b-total (* 1/2 b-size (inc b-size) b)\n        ab-total (* 1/2 ab-size (inc ab-size) a b)]\n    (+ a-total b-total (- ab-total))))","problem":148,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [n a b]\n    (let [bid   #(bigint (/ (dec %1) %2)),       \n          gauss #(bigint (* (inc %1) (/ %1 2N))) \n          x   (gauss (bid n a))                  \n          y   (gauss (bid n b))                  \n          ab  (*' a b),\n          z   (gauss (bid n ab))]                \n      (- (+ (* x a) (* y b)) (* z ab))))","problem":148,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [n a b] \n  (let [summult \n\t\t(fn [x] \n  \t  (let [q (quot (dec n) x)]\n \t\t    (/ (+ (* q q x) (* q x)) 2)))]\n        (- (+ (summult a) (summult b)) \n           (summult (* a b)))))","problem":148,"user":"4ef355e3535dced4c769f228"},{"code":"(fn cops [n a b] (let [t #(let [c (quot (dec n) %)] (/ (* % c (inc c)) 2))] (+ (t a) (t b) (- (t (* a b))))))","problem":148,"user":"4fa67030e4b081705acca1b7"},{"problem":148,"code":";don't be misled by the description\n#(letfn[(getSum [step bound];Gauss' solution\n               (let [upper (* step (quot (dec bound) step))]\n                 (if (= upper 0) 0\n                   (/ (*' (quot upper step) (+' upper step)) 2))))]\n  (-' (+' (getSum %2 %1) (getSum %3 %1)) (getSum (* %2 %3) %1)))","user":"556c70dae4b09a3098a524fd"},{"problem":148,"code":"(fn f [n a b]\n  (let [s #(* %2 (/ (* % (inc %)) 2))\n        n (dec n)]\n    (- \n      (+ \n        (s (bigint (/ n a)) a)\n        (s (bigint (/ n b)) b))\n      (s (bigint (/ n (* a b))) (* a b)))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn [n a b]\n  (letfn [(acc [m]\n            (let [total (bigint (/ n m))\n                  sn (* (bigint (/ n m)) m)\n                  ssum (/ (*' total (+ m sn)) 2)]\n              (if (zero? (mod n m))\n                (- ssum n)\n                ssum)))]\n    (- (+ (acc a) (acc b)) (acc (* a b)))))","problem":148,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":148,"code":"(fn [x a b]\n    (+\n      (let [n (quot (- x 1N) a)]\n        (/ (* n (+ a (* a n))) 2N))\n      (let [n (quot (- x 1N) b)]\n        (/ (* n (+ b (* b n))) 2N))\n      (* -1N (let [an (* a b)\n                   n (quot (- x 1N) an)]\n               (/ (* n (+ an (* an n))) 2N)))))","user":"563cce5be4b0bfe05bf1183f"},{"code":"(fn [n a b]\n        (letfn [(sum [x]\n                  (* 1/2 x (quot (dec n) x) (inc (quot (dec n) x))))]\n          (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [t a b]\n  (let [f (dec t) x (quot f a) y (quot f b) z (quot f (* a b))]\n    (+'  (*' x (inc x) (/ 1 2) a)\n        (*' y (inc y) (/ 1 2) b)\n        (- (*' z (inc z) (/ 1 2) (* a b))))))","problem":148,"user":"50bce014e4b0594b91591c63"},{"code":"(fn foo[num d1 d2]\n  (let[nsum (fn[n]\n               (let [s (if (> num 1000000)\n                              (bigint n)\n                              n)]\n\t\t\t\t\t\t        (/ (*  s (+ s 1)) 2)\n                 )\n               )\n       subsum  (fn[d]\n\t\t\t\t\t\t\t\t  (let[r (rem num d)       \n\t\t\t\t\t\t\t\t       v1 (quot num d)\n\t\t\t\t\t\t\t\t       v  (if (== 0 r)\n\t\t\t\t\t\t\t\t             (dec v1)\n\t\t\t\t\t\t\t\t             v1\n\t\t\t\t\t\t\t\t            )                            \n\t\t\t\t\t\t\t\t      ]\n\t\t\t\t\t\t\t\t      (* d (nsum v) )  \n\t\t\t\t\t\t\t\t    )\n\t\t\t\t\t\t\t\t  )\n       ]\n       (-  (+  (subsum d1) \n               (subsum d2))\n           (subsum (* d1 d2)))\n      ))","problem":148,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn f[n a b]\n         (let [n (dec n) x (quot n a) y (quot n b) z (quot n (* a b))]\n           (+ (* a x (inc x) 1/2) (* b y (inc y) 1/2) (* a b z (inc z) -1/2)  )))","problem":148,"user":"4deff9f9535d08e6dec9fe15"},{"problem":148,"code":"(fn big-div [n a b]\r\n  (letfn [(sum [n a] (let [k (quot (dec n) a)]\r\n                       (/ (*' a (*' (inc  k) k)) 2)))]\r\n  (+' (sum n a) (sum n b) (-' (sum n (* a b))))))","user":"5470699ae4b00cfc9eacc1b6"},{"code":"(fn [l a b]\n  (letfn [(s [v]\n            (let [c (bigint (/ (dec l) v))]\n              (/ (* v c (inc c)) 2)))]\n    (- (+ (s a) (s b)) (s (* a b)))))","problem":148,"user":"500933a6e4b046cdb195e074"},{"code":"(fn big-divide [n a b ]\n  (let [n (dec n)]\n    (+ (/\n         (* 1N\n            (quot n a)\n            (+ a (- n (rem n a))))\n         2)    \n       (/\n         (* 1N\n            (quot n b)\n            (+ b (- n (rem n b))))\n         2)\n       (- (/\n            (* 1N\n               (quot n (* a b))\n               (+ (* a b) (- n (rem n (* a b)))))\n            2)))))","problem":148,"user":"5273562ae4b03e8d9a4a7479"},{"problem":148,"code":"(fn big-divide [n x y]\n  (let [xn (quot (dec n) x)\n        yn (quot (dec n) y)\n        xy (* x y)\n        xyn (quot (dec n) xy)\n        progression-sum (fn [a1 d n]\n                          (*' (/ (+ (* 2 a1) (* d (dec n))) 2) n))]\n    (- (+ (progression-sum x x xn)\n          (progression-sum y y yn))\n       (progression-sum xy xy xyn))))","user":"52d00832e4b07d0d72b273b4"},{"problem":148,"code":"(fn [n a b]\n  (let [n-1 (-' n 1)\n        f #(*' (long (/ n-1 %)) (+' (-' n-1 (mod n-1 %)) %))\n        c (*' a b)\n        sum-a (f a)\n        sum-b (f b)\n        sum-c (f c)]\n    (/ (-' (+' sum-a sum-b) sum-c) 2)))","user":"53513d28e4b084c2834f4ae3"},{"problem":148,"code":"(fn [n a b] (let [k (quot (dec n) a) l (quot (dec n) b) c (*' a b) m (quot (dec n) c)] (quot (-' (+' (*' k (inc k) a) (*' l (inc l) b)) (*' m (inc m) c)) 2)))","user":"594d4c57e4b07ddc2dafae87"},{"problem":148,"code":"(fn [n a b] (\n               letfn [\n                      (sum[x] (#(/ (*' %1 %2 (inc %2)) 2) x (quot (dec n) x)))\n                      ]\n               (- (+ (sum a) (sum b)) (sum (* a b)))\n\n               ))","user":"596f6683e4b069c0a1a19877"},{"problem":148,"code":"(fn the-big-divide [n a b]\n    (let [n (bigint n)\n         a (bigint a)\n         b (bigint b)]\n  (letfn [(sum [x y] (if (< x y)\n                       (let [q (quot (- y 1) x)]\n                         (/ (* (+ x (* q x)) q) 2)\n                         )\n                       0\n                       ))]\n    (- (+ (sum a n) (sum b n)) (sum (* a b) n))\n  )))","user":"5245e320e4b09dbe66b56177"},{"code":"(fn [n a b]\n    (let [m (* a b)\n          r (rem n m)\n          d (quot n m)\n          multiples-in (fn [n from end]\n                         (->>\n                          (iterate #(+ n %) (- from (rem from n)))\n                          (drop-while #(< % from))\n                          (take-while #(< % end))))\n          common-multiples #(distinct (concat (multiples-in a % %2) (multiples-in b % %2)))\n          block (* m (count (common-multiples 0 m)))\n          last-block (bigint (max 0 (* (dec d) block)))\n          sums (if (even? (dec d))\n                 (* (quot (dec d) 2) (+ last-block block))\n                 (* (quot d 2) last-block))\n          start (apply + (common-multiples 0 m))]\n      (apply + (* start d) sums (common-multiples (- n r) n))))","problem":148,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":148,"code":"(fn [under-n div-by-1 div-by-2]\n    (let [find-sum (fn [div-by]\n    (let [big-divisor-1 (* div-by (bigint (Math/floor (/ (dec under-n) div-by))))\n          mult-1 (/ big-divisor-1 div-by)\n          add-1 (if (odd? mult-1) \n                  (* (/ (inc mult-1) 2) big-divisor-1)\n                  (+ (* div-by (/ mult-1 2)) (* (/ mult-1 2) big-divisor-1)))\n         ]\n      (do (println [big-divisor-1 mult-1 add-1])\n      add-1)\n      \n      ))]\n      (- (+ (find-sum div-by-1) (find-sum div-by-2)) (/ (find-sum (* div-by-1 div-by-2)) 1))\n      ))","user":"53c73e8ae4b00fb29b2212a5"},{"code":"(fn [n a b] \n  (let [num_a (quot (dec n) a)\n        num_b (quot (dec n) b)\n        ab (* a b)\n        num_ab (quot (dec n) ab)\n        f #(quot (* (bigint %) (+' (bigint %2) (* (bigint %) (bigint %2)))) 2)]\n            (+' (f num_a a)(-' (f num_b b) (f num_ab ab)))))","problem":148,"user":"5323a414e4b09d4e7a9b54d1"},{"code":"(fn [n a b]\r\n    (let [d   #(let [r (bigint (/ n %))]\r\n                 (if (= n (* r %)) (dec r) r))\r\n          sum #(* % (/ (* %2 (inc %2)) 2))\r\n          x   (d a)\r\n          y   (d b)\r\n          z   (d (* a b))]\r\n      (- (+ (sum a x) (sum b y)) (sum (* a b) z))))","problem":148,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn [x y z]\n  (let [a (dec x)\n        f #(* (/ (+ % (- a (rem a %))) 2) (quot a %))]\n      (- (+ (f y) (f z)) \n         (f (* y z)))))","problem":148,"user":"4e823ed7535db62dc21a62c7"},{"problem":148,"code":"(fn bd [n a b]\n      (let [summer (fn [c d]\n                     (let [e (quot (dec c) d)]\n                       (quot (*' e(+ d (*' e d))) 2)\n                       )\n                     )]\n        (- (+ (summer n a) (summer n b)) (summer n (* a b)))\n        ))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn [n a b]\n  (letfn [(sum [n a]\n               (let [end (quot (- n 1N) a)]\n                 (* a (/ (* end (+ end 1N)) 2))))]\n    (- (+ (sum n a)\n          (sum n b))\n       (sum n (* a b)))))","problem":148,"user":"531d34cfe4b08068f379edac"},{"problem":148,"code":"(fn prob148d [n1 a b]\n  (letfn [(g [x] (/ (*' x (+ x 1)) 2))]\n    (if (and (> a n1) (> b n1)) 0\n        (let [n (- n1 1)]\n          (-' (+ (*' a (g (quot n a))) (*' b (g (quot n b))))\n              (*' a b (g (quot n (*' a b)))))))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [n a b]\n  (let [m (dec n)\n        f #(* (quot m %)\n              (inc (quot m %))\n              %)]\n    (quot (+ (f a)\n             (f b)\n             (- (f (* a b))))\n          2)))","problem":148,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(letfn [(tri [n a]\n          (* a\n             (let [q (quot (dec n) a)]\n               (/ (* q (inc q)) 2))))]\n  (fn [n a b]\n    (let [n (bigint n)]\n      (- (+ (tri n a)\n            (tri n b))\n         (tri n (* a b))))))","problem":148,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [n a b]\n  (letfn [\n    (mup [n a]\n      (let [dn (dec n) u (/ (- dn (rem dn a)) a)]\n        (* a (/ (* u (inc u)) 2))))]\n    (+ \n      (mup n a) \n      (mup n b) \n      (- (mup n (* a b))))))","problem":148,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [n a b]\n  (letfn\n    [\n      (sumn [n a]\n        (let [m (.divide (.subtract n (biginteger 1)) a)]\n          (.multiply a (.divide (.multiply m (.add m (biginteger 1))) (biginteger 2)))\n        )\n      )\n    ]\n    (let [N (biginteger n) A (biginteger a) B (biginteger b)]\n      (.subtract (.add (sumn N A) (sumn N B)) (sumn N (.multiply A B)))\n    )\n  )\n)","problem":148,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [m] (quot (* m (inc m)) 2))]\n    (let [a (bigint a)\n          b (bigint b)\n          n (bigint n)]\n      (+\n       (* a (sum (quot (dec n) a)))\n       (* b (sum (quot (dec n) b)))\n       (- (* a b (sum (quot (dec n) (* a b)))))))))","user":"58b81490e4b0ebc645576d8c"},{"problem":148,"code":"(fn [a, b, c]\n      (let [summ (fn [n, p] (let [bn (bigint n), dn (- bn 1), np (quot dn p)] (quot (* p np (+ np 1)) 2)))]\n           (- (+ (summ a b) (summ a c)) (summ a (* b c)))\n           )\n      )","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":148,"code":"(fn [n a b]\r\n  (let [\r\n    sum-of-multiples (fn [a]\r\n      (let [\r\n        modulo (mod (dec n) a)\r\n        count (/ (- (dec n) modulo) a)]\r\n        (/ (* a (biginteger count) (inc count)) 2)))]\r\n    (+ (sum-of-multiples a)\r\n       (sum-of-multiples b)\r\n       (- (sum-of-multiples (* a b))))))","user":"555bd27ae4b0b056612e2244"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(upper [x] (quot (dec n) x))\n          (series-sum [y] (*' y (/ (*' (upper y) (inc (upper y))) 2)))]\n    (- (+ (series-sum a)\n          (series-sum b))\n       (series-sum (* a b)))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [n a b]\n  (let [sum (fn [n a]\n               (let [m (quot (dec n) a)] (/ (* (+ m 1) m a) 2)))]\n   (- (+ (sum n a) (sum n b)) (sum n (* a b)))))","problem":148,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [n a b]\n  (let [ab (* a b)\n        rsum (fn [d] (let [k (bigint (/ (dec n) d))]\n                       (* k (/ 2) (+ d (* k d)))))]\n    (+ (rsum a) (rsum b) (- (rsum ab)))))","problem":148,"user":"4f1b0ab3535d64f603146474"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(sum [k]\n              (let [m (quot (- n (mod (dec n) k)) k)]\n                (* k (/ m 2) (inc m))))]\n      (+ (sum a) (sum b) (- (sum (* a b))))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":148,"code":"(fn [upper a b]\n    (let [sum-to-n (fn [max x] (let [n (quot (dec max) x)] (* (/ (* n (inc n)) 2) x)))\n          s        (partial sum-to-n (bigint upper))]\n          (- (+ (s a) (s b)) (s (* a b)))))","user":"4ee6400c535d93acb0a6685b"},{"code":"(fn [n a b] \n    (letfn [(nats [x]\n                  (let [k (quot n x) k1 (if (== n (* x k)) (dec k) k)]\n                    (/ (*' k1 (inc k1) x) 2))\n                  )\n            (zzz [n a b]\n                 (+' \n                   (-' (nats a) (nats (* a b))) \n                   (nats b))\n                 )]\n           (zzz n a b)))","problem":148,"user":"4dca8b6d535d5973398f9288"},{"problem":148,"code":"(fn [n a b]\n    (let [qsum (fn [d m]\n                 (let [n (inc (quot m d))\n                       r (*' (/ n 2) (dec n) d)]\n                   r))]\n      (+'\n        (qsum a n)\n        (qsum b n)\n        (-' (qsum (*' a b) n))\n        (if (zero? (mod n a)) (- n) 0)\n        (if (zero? (mod n b)) (- n) 0)\n        )))","user":"52ffb7f2e4b0d8b024fd370b"},{"problem":148,"code":"(fn big-div\n  [n a b]\n  (letfn [(sum- [n]\n            (/ (*' (inc n) n) 2))]\n    (let [n (dec n)\n          aq (sum- (quot n a))\n          bq (sum- (quot n b))\n          ab (*' a b)\n          abq (sum- (quot n ab))]\n      (- (+ (*' aq a) (*' bq b)) (*' abq ab)))))","user":"565654dae4b0f9d632dd849f"},{"problem":148,"code":"(fn [n a b] \n  (letfn [(sum-below-n [x] \n            (let [z (quot (dec n) x)]\n              (*' x z (inc z) 1/2)))]\n    (- \n      (+' (sum-below-n a)(sum-below-n b))\n      (sum-below-n (* a b)))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":148,"code":"(fn sum-multiples [n a b]\n  (letfn [(som [u f]\n            (let [k (bigint (/ (dec u) f))]\n              (* f k (inc k) 1/2)))]\n    (- (+ (som n a) (som n b)) (som n (* a b)))))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn big-divide [n a b]\n  (letfn [(get_maxx [mult] (quot (dec n) mult))\n          (sum_up [maxx mult] (* (*' maxx (inc maxx)) (/ mult 2)))]\n    (- (+ (sum_up (get_maxx a) a)\n          (sum_up (get_maxx b) b))\n       (sum_up (get_maxx (* a b)) (* a b)))))","problem":148,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn [n a b]\n  (let [s #(let [c (quot n %)] (*' % c (inc c) (/ 2)))]\n    (+' (s a) (s b) (-' (s (*' a b)))\n       (if (zero? (mod n a)) (- n) 0)\n       (if (zero? (mod n b)) (- n) 0)       \n       )\n    )\n  )","problem":148,"user":"4fa340b4e4b081705acca18c"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [sum-below (fn [x] (*' (/ (+' 1 x) 2) x))\n        quot-a (quot (dec n) a)\n        quot-b (quot (dec n) b)\n        quot-repeated (quot (dec n) (* a b))]\n    (- (+' (*' a (sum-below quot-a))\n           (*' b (sum-below quot-b)))\n       (*' (* a b) (sum-below quot-repeated)))))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":148,"code":"(fn big-divide [n p1 p2]\n  (let [\n         sum (fn [start c]\n               (+ (* c start) (* (/ (* c (dec c)) 2) start))\n               ),\n         div (fn [n p]\n               (if (<= n p)\n                 0\n                 (sum p (quot (- n 1N) p))\n                 )\n               )]\n    (+ (div n p1) (div n p2) (- (div n (* p1 p2))))))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn f [n a b]\n  (let [nn (bigint (dec n))\n        c (* a b)\n        cnta (quot nn a)\n        maxa (* a cnta)\n        cntb (quot nn b)\n        maxb (* b cntb)\n        cntc (quot nn c)\n        maxc (* c cntc)\n        tota (quot (* cnta (+ a maxa)) 2)\n        totb (quot (* cntb (+ b maxb)) 2)\n        totc (quot (* cntc (+ c maxc)) 2)\n        ] (- (+ tota totb) totc)))","problem":148,"user":"52196842e4b0890f2f822bfa"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [x]\n            (let [k (quot (dec n) x)]\n              (-> (inc k)\n                  (*' k x)\n                  (/ 2))))]\n    (-> (f a)\n        (+ (f b))\n        (- (f (* a b))))))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn [m a b]\n (let [R (fn [s]\n           (let [x (dec m)\n                 y (- x (mod x s))]\n             (* (+ y s)\n                (/ y s 2))))]\n   (- (+ (R a) (R b)) \n      (R (* a b)))))","problem":148,"user":"4e57d1e2535d8a8b8723a289"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum-divisables [z x]\n                          \"Find the sum of divisibles of x smaller than z\"\n                          (let [c (quot (dec z) x)]\n                            (*' x (/ (*' c (inc c)) 2))))]\n    (-' \n     (+'\n      (sum-divisables n a)\n      (sum-divisables n b))\n     (sum-divisables n (* a b)))))","user":"5654e024e4b0f9d632dd848d"},{"problem":148,"code":"(fn [n x y] (let [m (* x y)\n                         d1 (quot (biginteger (dec n)) x)\n                         d2 (quot (biginteger (dec n)) y)\n                         d3 (quot (biginteger (dec n)) m)\n                         s1 (* x d1 (+ 1 d1))\n                         s2 (* y d2 (+ 1 d2))\n                         s3 (* m d3 (+ 1 d3))\n                         a (/ (+ s1 s2 (- s3)) 2)]\n                     a))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn [n a b]\n    (let [ma (bigint (/ (dec n) a))\n          mb (bigint (/ (dec n) b))\n          mc (bigint (/ (dec n) (* a b)))\n          s #(/ (* % (inc %)) 2)]\n      (+ (* a (s ma)) (* b (s mb)) (- (* a b (s mc))))))","problem":148,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn the-big-divide [x y z]\n  (letfn [(sum-of-multiples [n under]\n            (let [m (quot (dec under) n)]\n              (* n (/ (* m (inc m)) 2))))]\n    (- (+ (sum-of-multiples y x)\n          (sum-of-multiples z x))\n       (sum-of-multiples (* y z) x))))","problem":148,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":148,"code":"(fn [n a b]\n        (let [s (fn [m] (/ (*' m (inc m)) 2N))\n              x (* a (s (quot (dec n) a)))\n              y (* b (s (quot (dec n) b)))\n              z (* a b (s (quot (dec n) (* a b))))\n              ]\n          (- (+ x y)\n             z)))","user":"545ddac3e4b01be26fd74676"},{"problem":148,"code":"(fn bdsum [n a b]\n (letfn [\n  (sum-divs [x]\n   (let [dn (dec n)\n         mul (quot dn x)\n         idxsum \n           (-> (+' 1 mul)\n               (*' ,, mul)\n               (/ ,, 2))] \n     (*' idxsum x) ))]\n  (let [sum-a (sum-divs a)\n        sum-b (sum-divs b)\n        ab (* a b)\n        sum-ab (sum-divs ab)]\n \n    (+' sum-b \n       (- sum-a sum-ab)) )))","user":"57f9011ee4b0d3187e900935"},{"problem":148,"code":"(fn [n a b]\n  (let [s #(let [q (quot (dec n) %)]\n             (*' % q (inc q) 1/2))]\n    (- (+ (s a) (s b)) (s (*' a b)))))","user":"4f5eda39e4b0030a34fb2b56"},{"code":"(fn [n a b] \n  (let [t (dec n)\n        a1 (bigint (/ t a))\n        b1 (bigint (/ t b))\n        c  (bigint (* a b))\n        c1 (bigint (/ t c))\n        v1 (/ (* a1 (inc a1) a) 2)\n        v2 (/ (* b1 (inc b1) b) 2)\n        v3 (/ (* c1 (inc c1) c) 2)]\n    (- (+ v1 v2) v3)))","problem":148,"user":"510c123be4b078ea7192110e"},{"code":"(fn [ n d1 d2 ]\r\n  (let [d3 (* d1 d2)\r\n        c1 (bigint (/ (- n 1) d1))\r\n        c2 (bigint (/ (- n 1) d2))\r\n        c3 (bigint (/ (- n 1) d3))\r\n        s1 (/ (* d1 (* c1 (+ 1 c1))) 2)\r\n        s2 (/ (* d2 (* c2 (+ 1 c2))) 2)\r\n        s3 (/ (* d3 (* c3 (+ 1 c3))) 2) ]\r\n     (- (+ s1 s2) s3)))","problem":148,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn  [n a b]\n  (let [f #(let [k (quot (dec n) %)]\n             (*' % (/ (*' k (inc k)) 2 )))]\n    (- ( + (f a) (f b)) (f (* a b)))))","problem":148,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn big-divide [n a b]\n(letfn [(num-of-divisors [k] (quot (dec n) k))\n        (sum [k] (/ (*' k (inc k)) 2) )\n        (sum-of-divisors [k] (*' k (sum (num-of-divisors k))))] \n  (-> (+' (sum-of-divisors a) (sum-of-divisors b)) (-' (sum-of-divisors (*' a b)))  ) )\n)","problem":148,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [n a b]\n  (let [m (- n 1)\n        t #(* % (/ (* (quot m %) (inc (quot m %))) 2))]\n    (+ (t a) (t b) (- (t (* a b))))))","problem":148,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn [n a b]\n  (letfn [(s [x] (let [q (quot (dec n) x)]\n                    (/ (* x q (inc q)) 2)))]\n    (- (+ (s a) (s b)) (s (* a b)))))","problem":148,"user":"4f06dcad535dcb61093f6c16"},{"problem":148,"code":"(fn divide [n a b]\n    (let [m (dec n)\n          x (bigint (/ m a))\n          y (bigint (/ m b))\n          z (bigint (/ m (* a b)))]\n      (+ (* a x (inc x) 1/2)\n         (* b y (inc y) 1/2)\n         (* (* a b) z (inc z) -1/2))))","user":"579693d4e4b039eba2ecb0e7"},{"problem":148,"code":"(fn [m n1 n2]\n  (letfn [(calc-sum [m n]\n                    (if (< m n)\n                      0\n                      (let [v (- (* 1M m) (rem m n))\n                            k (/ v n)]\n                        (* n (/ (* 1M k (inc k)) 2)))))\n          (slow-calc [m n1 n2]\n                     (+ (apply + (range n1 m n1))\n                        (apply + (range n2 m n2))\n                        (- 0 (apply + (range (* n1 n2) m (* n1 n2))))))]\n    (let [res \n          (- (+ (calc-sum (dec m) n1) (calc-sum (dec m) n2))\n             (calc-sum (dec m) (* n1 n2)))]\n      (if (> res Long/MAX_VALUE)\n      \tres\n        (slow-calc m n1 n2))))) \n; the last test case get failed with bignum (4530161696788274176 vs 4530161696788274281)\n; a very stupid error, maybe some bug in library","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn [n a b]\n           (let [n' (dec n)\n                p (quot n' a)\n                q (quot n' b)\n                r (quot n' (* a b))\n                sum (fn [x](/ (*' x (inc x)) 2))]\n                (- (+' (*' a (sum p)) (*' b (sum q)))\n                   (*' a b (sum r)))))","problem":148,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn [n a b]\n  (let [c1 (quot (dec n) a), c2 (quot (dec n) b), c3 (quot (dec n) (* a b)),\n        sum1 (* 1/2 a c1 (inc c1)), sum2 (* 1/2 b c2 (inc c2)), sum3 (* 1/2 a b c3 (inc c3))]\n    (- (+ sum1 sum2) sum3)))","problem":148,"user":"4fb12b35e4b081705acca275"},{"problem":148,"code":"(fn the_big_divide [a b c]\n    (let [sum (fn [n] (/ (*' n (inc n)) 2)) [alpha beta gamma] (map #(*' % (sum (bigint (Math/floor (/ (dec a) %))))) [b c (* b c)])]\n        (+' alpha beta (-' gamma))\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":148,"code":"(fn [n a b]\n (letfn [\n   (sum [n] (/ (* n (inc n)) 2))\n   (div [n x] (* x (sum (bigint (/ (dec n) x)))))]\n (- (+ (div n a) (div n b)) (div n (* a b) ))))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":148,"code":"(fn [up a b]\n  (let [bi (fn [n]\n             (new java.math.BigInteger (str n))),\n        two (bi 2),\n        get-sum (fn [n]\n                  (let [q (quot (dec up) n)]\n                    (.multiply (bi n) (.divide (.multiply (bi q) (bi (inc q))) two))))],\n    (.subtract (.add (get-sum a) (get-sum b)) (get-sum (* a b)))))","user":"567695c2e4b05957ce8c6157"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(sum-mult-lt [n a]\n              (let [l (quot (dec n) a)]\n                (*' a (/ (*' l (inc l)) 2))))]\n      (+' (sum-mult-lt n a) (sum-mult-lt n b) (-' (sum-mult-lt n (* a b))))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [n a b]\n  (let [k1 (long (/ (dec n) a))\n        k2 (long (/ (dec n) b))\n        k3 (long (/ (dec n) a b))\n        s1 (/ (* k1 (inc k1) a) 2)\n        s2 (/ (* k2 (inc k2) b) 2)\n        s3 (/ (* k3 (inc k3) a b) 2)]\n    (- (+ s1 s2) s3)))","problem":148,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":148,"code":"(let [g\n      (fn [n a] (let [x (quot (dec n) a)]\n               (*' x (inc x) 1/2 a)))]\n  (fn [n a b] (+ (g n a) (g n b) (- (g n (* a b))))))","user":"559c13c5e4b066d22e731f61"},{"problem":148,"code":"(fn bd [n a b]\n  (letfn [(sum-by [s a]\n            (let [n (quot (dec s) a)]\n              (bigint (*' n (inc n) a 1/2))))]\n    (- (+ (sum-by n a) (sum-by n b)) (sum-by n (* a b)))))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":148,"code":";1*3+2*3+3*3+...+1*5+2*5+3*5+...-15*1-15*2-15*3-...\n;(1+2+3+...)*3 + (1+2+3+...)*5 - (1+2+3+...*15)\n;   with 1+2+3+...+m = (m+1)*m/2\n(fn [n a b]\n  (letfn [(partsum [x] \n            (let [m    (quot (dec n) x)\n                  sum  #(-> (*' (inc %) %) (/ 2))]\n\t\t      (*' x (sum m)))) ]\n    (- (apply +' (map partsum [a b]))\n\t   (partsum (* a b)) )))","user":"55cdc576e4b0e31453f64a1f"},{"problem":148,"code":"(fn [r a b]\n  (letfn [(f [m n]\n             (/ (*' (+' n (*' n (quot (dec m) n))) (quot (dec m) n)) 2))]\n           (- (+ (f r a) (f r b)) (f r (* a b)))))","user":"55e732c5e4b050e68259b492"},{"problem":148,"code":"(fn d [n a b]\n  (let [ap #(quot (* %1 (+ %2 (bigint (* %2 %1)))) 2)]\n    (+ (ap (quot (dec n) a) a)\n       (ap (quot (dec n) b) b)\n       (- (ap (quot (dec n) (* a b)) (* a b))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":148,"code":"(fn [n a b]\n  (let [x  (long (/ n (* a b)))\n        x' (inc x)\n        y  (let [y (/ n b)] (if (ratio? y) (inc (long y)) y))\n        y' (dec y)\n        z  (long (/ n a))\n        sum (fn [i l] (*' (+ (- l i) 1) (/ (+ i l) 2)))]\n    (+' (*' (- (+ a b) (* a b)) (sum 1 x))\n        (*' (+ a b) (sum x' y'))\n        (*' a (sum y z)))))","user":"57035ccfe4b08d47c97781ef"},{"problem":148,"code":"(letfn [\n        (triangle [n] (/ (*' n (inc n)) 2))\n        (sum-multiples-up-to [n m] (*' m (triangle (quot (dec n) m))))]\n  (fn [n a b] (+'\n               (sum-multiples-up-to n a)\n               (sum-multiples-up-to n b)\n               (- (sum-multiples-up-to n (* a b))))))","user":"584dadebe4b0b7285a6f4e44"},{"problem":148,"code":"(fn bd [n a b]\n  (let [ra (+ (quot n a) (if (= 0 (mod n a)) -1 0))\n        rb (+ (quot n b) (if (= 0 (mod n b)) -1 0))\n        lcm (*' a b)\n        rlcm (+ (quot n lcm) (if (= 0 (mod n lcm)) -1 0))\n        gs (fn [x] (/ (*' x (+ x 1)) 2))]\n      (- (+ (*' a (gs ra)) (*' b (gs rb))) (*' lcm (gs rlcm)))))","user":"5958cef6e4b066ee0a44af94"},{"code":"(fn [n a b]\n  (letfn [(v [x] (let [m (quot (dec n) x)] \n                   (*' (quot (*' m (inc m)) 2) x)))]\n    (-' (+' (v a) (v b))\n        (v (*' a b)))))","problem":148,"user":"4dae916eedd6309eace4d155"},{"problem":148,"code":"(fn f148 [n c1 c2]\n  (letfn [(arithmetic-series [first-val up-to]\n            (let [c (quot (dec up-to) first-val)]\n              (/ (+' (*' c first-val)\n                     (*' c c first-val))\n                 2)))]\n    (- (+ (arithmetic-series c1 n)\n          (arithmetic-series c2 n))\n       (arithmetic-series (* c1 c2) n))))","user":"55586905e4b0deb715856e2b"},{"problem":148,"code":"(fn [n small-a small-b]\n            (let [a (bigint small-a)\n                  b (bigint small-b)\n                  [na nb nab] (loop [i (dec (bigint n))\n                                    na nil\n                                    nb nil\n                                    nab nil]\n                                (let [new-na (or na (if (zero? (rem i a)) i nil))\n                                      new-nb (or nb (if (zero? (rem i b)) i nil))\n                                      new-nab (or nab (if (zero? (rem i (* a b))) i nil))]\n                                  (if (and na nb nab)\n                                    [na nb nab]\n                                    (recur (dec i) new-na new-nb new-nab))))\n                  sa (/ (* (/ na a) (+ a na)) 2)\n                  sb (/ (* (/ nb b) (+ b nb)) 2)\n                  sab (/ (* (/ nab (* a b)) (+ (* a b) nab)) 2)]\n              (+ sa sb (* -1 sab))))","user":"53f891eee4b0de5c4184856d"},{"problem":148,"code":"(fn [x y z]\n   (apply #(+ %1 %2 (- %3)) (map  #(let[n (bigint (quot (dec x) %))](/ (* % n (inc n))2 ) ) [y z  ( * y z)]) ))","user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [n a b]\n  (letfn [(m [x n] (let [n (quot (dec n) x)\n                         m (/ (* n (inc n)) 2)]\n                     (* m x)))]\n    (- (+ (m b n) (m a n)) (m (* a b) n))))","problem":148,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"#(let [psum (fn [n a] \r\n  (let [k (quot (dec n) a), l (* a k)] \r\n    (* (/ k 2) (+ a l))))]\r\n    (- (+ (psum % %2) (psum % %3)) (psum % (* %2 %3))))","problem":148,"user":"50336c6be4b0c6c1199c710f"},{"problem":148,"code":"(fn [n a b]\n  (let [tt (fn [x]\n              (let [k (quot (- n 1) x)]\n                (* x k (+ 1N k) 1/2)))]\n    (+ (tt a) (tt b) (- (tt (* a b))))))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn [n,a,b]\n  (letfn [(g [x] (/ (*' x (inc x)) 2))\n          (s [x] (*' x (g (quot (dec n) x))))]\n    (- (+' (s a) (s b)) (s (*' a b)))))","problem":148,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn [a b c]\n  (let [q #(quot (dec a) %)\n          f #(/ (*' % (inc %) %2) 2)\n          d (* b c)]\n    (+ (f (q b) b) (f (q c) c) (- (f (q d) d)))))","problem":148,"user":"514d8084e4b019235f6c0588"},{"problem":148,"code":"(fn [n a b]\n  (let [tr (fn [n f l] (/ (*' n (+' f l)) 2))\n        dn (dec n)\n        nx (fn [n x] (quot n x))\n        lx (fn [n x] (- n (mod n x)))]\n    \t\t(- (+ (tr (nx dn a) a (lx dn a)) (tr (nx dn b) b (lx dn b))) (tr (nx dn (* a b)) (* a b) (lx dn (* a b))))\n    ))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":148,"code":"(fn [n a b]\n   (letfn \n       [(sum-of-numbers-divisible-by-x [x limit]\n          (let [n (bigint (Math/ceil (/ limit x)))]\n            (/ (* (dec n) n x) 2)))]\n     (- (+ \n         (sum-of-numbers-divisible-by-x a n)\n         (sum-of-numbers-divisible-by-x b n))\n        (sum-of-numbers-divisible-by-x (* a b) n))))","user":"4f392fc8e4b0e243712b1ee7"},{"problem":148,"code":"(letfn\n    [(nth-partial-sum [f n]\n       (*' (/ (+' (f 1) (f n)) 2) n))\n     (sum-multiples-under [n m]\n       (nth-partial-sum #(*' m %) (quot (dec n) m)))]\n    (fn [n a b]\n      (- (+' (sum-multiples-under n a)\n             (sum-multiples-under n b))\n         (sum-multiples-under n (* a b)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":148,"code":"(fn bigdiv [n x y]\n  (let [jsum\n        (fn [n x]\n          (let [start x\n                end   (* (bigint (/ n x)) x)\n                step  x]\n            (/ (* (bigint (/ end step)) (+ start end)) 2)))\n        n (dec n)]\n    (- (+ (jsum n x) (jsum n y)) (jsum n (* x y)))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":148,"code":"(fn [nn a b]\n   (let [n (dec nn)\n         ss (fn [total d]\n              (let [q (quot total d)]\n                (*' d (/ (*' (+' q 1) q) 2))))]\n     (-' (+' (ss n a) (ss n b)) (ss n (*' a b)))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [total a b]\n  (let [t (dec total)\n        sf #(* % (quot t %) (inc (quot t %)) 1/2)]\n    (- (+ (sf a) (sf b)) (sf (* a b)))))","problem":148,"user":"4dcfbc44535d5973398f92a7"},{"code":"(fn [n a b] (letfn [(f [a] (let [m (quot (dec (biginteger n)) a)] (/ (* a m (inc m)) 2)))] \n              (+ (f a) (f b) (- (f (* a b))))))","problem":148,"user":"519ef784e4b087743fad2198"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [sum-multiples-of (fn [divisor]\n                           (let [x (quot (dec n) divisor)]\n                             (/ (*' divisor x (inc x)) 2)))]\n    (- (+ (sum-multiples-of a) (sum-multiples-of b))\n       (sum-multiples-of (* a b)))))","user":"5f419985e4b0955706451fab"},{"problem":148,"code":"(fn [n a b]\n    (let [sum (fn [x] (* (inc x) (/ x 2)))\n          f   (fn [n x] (let [q (quot n x)]\n                          (if (zero? (rem n x))\n                            (* x (sum (dec q)))\n                            (* x (sum q)))))]\n     (-\n      (+ (f n a)\n         (f n b))\n      (f n (* a b)))))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":148,"code":"(fn [n a b]\n  (let [[aq ar] ((juxt quot rem) (dec n) a)\n        [bq br] ((juxt quot rem) (dec n) b)\n        [abq abr] ((juxt quot rem) (dec n) (* a b))]\n    (-\n     (+ (* a (/ (* aq (+ 1N aq)) 2))\n        (* b (/ (* bq (+ 1N bq)) 2)))\n     (* (* a b) (/ (* abq (+ 1N abq)) 2)))))","user":"54926752e4b0b312c081ff44"},{"problem":148,"code":"(fn [l a b] (let [f #(/ (*' % (inc %)) 2)\n                        g #(*' % (f (quot (dec l) %)))]\n       (+' (g a) (g b) (-' (g (*' a b))))))","user":"576e3258e4b0979f89651574"},{"code":"(fn [x y z] (let [X #(*' %2 (/ (*' % (inc %)) 2)) x (dec x)]\r\n              (-' (+' (X (quot x y) y) (X (quot x z) z)) (X (quot x (*' y z)) (*' y z)))))","problem":148,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn [n d1 d2]\n  (let [g (fn [n d]\n            (let [n (dec n)\n                  n (- n (mod n d))\n\t\t  n (/ n d)]\n              (*' d (/ (*' n (inc n)) 2))))]\n    (- (apply + (map (partial g n) [d1 d2]))\n       (g n\t(* d1 d2)))))","problem":148,"user":"50d93c53e4b0fd36a4b89223"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(last-item [n a] (* a (quot (dec n) a)))\n          (item-count [n a] (inc (/ (last-item n a) a)))\n          (sum [n a] (/ (*' (last-item n a) (item-count n a)) 2))]\n    (+' (- (sum n a) (sum n (* a b))) (sum n b))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":148,"code":"(fn solution [n cop1 cop2]\n  (let [last-term (fn [n divisor] (if (= 0 (mod n divisor)) n (recur (dec n) divisor)))\n        last-term1 (last-term (dec n) cop1)\n        last-term2 (last-term (dec n) cop2)\n        last-crossed-term (last-term (dec n) (* cop1 cop2))\n        Spq (fn [Ap Aq] (/ (*' (/ Aq Ap) (+' Ap Aq)) 2))]\n    (+' (Spq cop1 last-term1) (Spq cop2 last-term2) (* -1 (Spq (* cop2 cop1) last-crossed-term)))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (letfn [(f [x y] (*' y (/ (*' x (inc x)) 2)))\n          (g [x] (quot (dec n) x))\n          (h [x] (f (g x) x))]\n    (-' (+' (h a) (h b)) (h (* a b)))))","user":"506f0968e4b09350ab4199f5"},{"problem":148,"code":"(fn [n a b]\n  (let [n (- n 1)\n        e (bigint (/ n a))\n        f (bigint (/ n b))\n        g (bigint (/ n a b))]\n    (bigint (* 0.5M (+ (- (* a e (+ e 1))\n                          (* a b g (+ g 1)))\n                       (* b f (+ f 1)))))))","user":"52bacfa8e4b07a9af57922d6"},{"problem":148,"code":"(fn __ [n a b]\n  (let [\n        na (quot (dec n) a)\n        nb (quot (dec n) b)\n\n        ab (*' a b)\n        nab (quot (dec n) ab)\n\n        aaa (*' (bigint na) (inc na) a)\n        bbb (*' (bigint nb) (inc nb) b)\n        ccc (*' (bigint nab) (inc nab) -1 ab)\n        ]\n    (quot (+ aaa bbb ccc) 2) ))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn [n a b]\n  (let [findlast (fn [n x] (- (- n 1) (rem (- n 1) x)))\n        ab (* a b)\n        sum (fn [i j] (let [c (/ j i)]\n                        (* i (* c (inc c) 1/2))))]\n  (+ (sum (bigint a) (findlast n a))\n     (sum (bigint b) (findlast n b))\n     (- (sum (bigint ab) (findlast n ab))))))","problem":148,"user":"50435689e4b034ff00315d21"},{"problem":148,"code":"(fn [n a b]\n   (let [f (fn [m]\n             (let [a (quot (dec n) m)]\n               (*' (/ (*' a (inc a)) 2) m)))]\n     (let [[a' b' bc] (map f [a b (* a b)])] (- (+ a' b') bc))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":148,"code":"(fn [n a b]\n  (let [f #(*' (inc %) % 1/2)\n        g #(*' % (f (quot (dec n) %)))]\n    (- (+ (g a)\n          (g b))\n      (g (* a b)))))","user":"4f9d8083e4b0dcca54ed6d23"},{"problem":148,"code":"#(letfn [\n         (q [a] (quot (dec %) a)) \n         (s [a] (*' a (/ (*' (q a) (inc (q a))) 2)))]\n\t\t\n   \t\t(+ (s %2) (s %3) (- (s (* %2 %3)))) )","user":"5603c31fe4b04bb52996e1c1"},{"code":"#(let [n1 (quot (bigint (dec %)) %2)\r\n       n2 (quot (bigint (dec %)) %3)\r\n       n3 (quot n1 %3)]\r\n     (+ (/ (* n1 (+ n1 1) %2) 2)\r\n        (/ (* n2 (+ n2 1) %3) 2)\r\n        (/ (* n3 (+ n3 1) %2 %3) -2)))","problem":148,"user":"509160dae4b0742c82730aef"},{"code":"(fn [n a b] \n   ( let [series (fn [x f d]  (/ (* x (+ (* 2 f) (* d (dec x)))) 2))\n          ba (bigint (/ (dec n) a))\n          bb (bigint (/ (dec n) b))\n          bab (bigint (/ (dec n) (* a b)))\n          ] \n     \n      (-\n       (+ (series ba a a)\n          (series bb b b)) \n       (series bab (* a b) (* a b))) ))","problem":148,"user":"513b77f3e4b00f740c76c403"},{"code":"(fn [n a b]\n  (letfn [(ya-sum [num]\n            (if (even? num) (* (inc num) (quot num 2)) (* num (quot (inc num) 2N))))]\n    (-\n      (+\n        (* a (ya-sum (quot (dec n) a)))\n        (* b (ya-sum (quot (dec n) b))))\n      (* (* a b) (ya-sum (quot (dec n) (* a b)))))))","problem":148,"user":"514d7e29e4b019235f6c0587"},{"problem":148,"code":"(fn f148 [n div1 div2] \n  (let [part-sum (fn [n div] (let [ x (quot n div) m (if (= 0 (rem n div)) (dec x) x)] (*' div (/ (*' m (inc m) ) 2))  ))]\n  (- (+ (part-sum n div1) (part-sum n div2)) (part-sum n (* div1 div2)))))","user":"558bdcefe4b0277789237633"},{"problem":148,"code":"(fn [n a b]\n  (let [nba (bigint (- (Math/ceil (/ n a)) 1))\n        nbb (bigint (- (Math/ceil (/ n b)) 1))\n        nbc (bigint (- (Math/ceil (/ n (* a b))) 1))\n        la (* nba a)\n        lb (* nbb b)\n        lc (* nbc (* a b))]\n    (- (+ (* nba (/ (+ a la) 2))\n          (* nbb (/ (+ b lb) 2)))\n       (* nbc (/ (+ (* a b) lc) 2)))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn  [x a b]\n  (letfn [ (f [ x d] (let [ n (quot (dec x) d) ]  (* (/ n 2)  (inc n) d)) ) ]\n         (- (+ (f x a) (f x b)) (f x (* a b)) )\n         ))","problem":148,"user":"4fccdc75e4b0ee37620e186d"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(help [x] (let [nums (quot (dec n) x)] (/ (*' x (inc nums) nums) 2)))]\n    (+' (help a) (help b) (- (help (*' a b))))))","user":"554b8572e4b0a04f79299589"},{"code":"(fn [n a b]\n  (let [tld (fn [n a] (let [m (quot (dec n ) a)] (*' a (quot (*' m (inc m)) 2))))]\n    (-' (+' (tld n a) (tld n b)) (tld n (* a b)))))","problem":148,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":148,"code":"(fn big_divide [n a b]\n   (letfn\n     [(nthtri [n] (quot (* n (inc n)) 2))\n      (multiples [n x] (quot (dec n) x))\n      (sum_multiples [n x] (* x (nthtri (multiples (bigint n) x))))\n      ]\n     (-\n       (+\n        (sum_multiples n a)\n        (sum_multiples n b))\n       (sum_multiples n (* a b))\n       )))","user":"562add6de4b00e49c7cb4834"},{"code":"(fn [n p1 p2]\n  (letfn [(triangle [i]\n                    (/ (*' i (+' 1 i)) 2))]\n    (let [n1  (dec n)\n          sum-p1 (*' p1 (triangle (quot n1 p1)))\n          sum-p2 (*' p2 (triangle (quot n1 p2)))\n          sum-p1xp2 (*' (* p1 p2)(triangle (quot n1 (* p1 p2))))]\n      (-' (+' sum-p1 sum-p2) sum-p1xp2))))","problem":148,"user":"51857e64e4b0da5a5be3babe"},{"code":"(fn [t a b]\n  (#(- (+ (% a)\n          (% b))\n       (% (* a b)))\n   (fn [x]\n     (#(* % (inc %) x 1/2)\n      (#(if (= 0 (rem t x))\n          (dec %)\n          %)\n       (quot t x))))))","problem":148,"user":"4f6fbb68e4b07046d9f4efeb"},{"code":"(fn [a b c]\n  (letfn [(s [n a]\n              (let [q (quot n a)]\n                (/ (* q (+ a (* q a))) 2)))]\n          (let [a (bigint a)\n                a- (dec a)]\n            (- (+ (s a- b) (s a- c))\n               (s a- (* b c))))))","problem":148,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":148,"code":"(fn [v a b]\n  (let [guass (fn [x] (quot (*' x (inc x)) 2))\n        sum (fn [n] (if (< n v) \n                      (*' n (guass (quot (dec v) n))) \n                      0))]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [n a b]\n    (let [sum-below\n          (fn [multiplier]\n            (let [h (bigint (/ n multiplier))\n                  h (if (= n (*' h multiplier)) (dec h) h)]\n              (*' multiplier (/ (*' h (inc h)) 2))))\n          as (sum-below a)\n          bs (sum-below b)\n          abs (sum-below (*' a b))]\n      (-' (+' as bs) abs)))","problem":148,"user":"50763574e4b0a894bb95bf3d"},{"problem":148,"code":"#( let [ n (bigint (- %1 1)) a (bigint %2) b (bigint %3) ab (* a b)]\n   ( let [ az (quot n a) bz (quot n b) abz (quot n ab) ]\n     ( let [ ad (quot (* a az (inc az)) 2)\n\t\t\t bd (quot (* b bz (inc bz)) 2)\n             abd (quot (* ab abz (inc abz)) 2)\n             ]\n       (+ ad bd (- abd))\n       )\n     )\n   )","user":"5b3aa98be4b02d533a91bbca"},{"problem":148,"code":"(fn [number a b]\n  (letfn [(sum-dividors [n] (let [q (quot (dec number) n)] (if (zero? q) 0 (/ (*' (inc q) q n) 2))))]\n    (-' (+' (sum-dividors a) (sum-dividors b)) (sum-dividors (*' a b)))))","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn big-divide [n a b]\r\n  (let [n-max  #(bigint (/ (dec n) %))\r\n        sum-under (fn [x] (/ (* x (inc x)) 2))]\r\n    (- (+ (* (sum-under (n-max a)) a) (* (sum-under (n-max b)) b))\r\n       (* (sum-under (n-max (* a b))) (* a b))\r\n       )))","problem":148,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn [n a b]\n  (let [f #(let [c (quot (dec n) (bigint %))]\n             (* % (/ (* c (inc c)) 2)))]\n    (+ (f a) (f b) (- (f (* a b))))))","problem":148,"user":"512f06c5e4b0762be4c7aad7"},{"problem":148,"code":"(fn [N a b]\n            (letfn [(f [X]\n                      (let [q (quot (- N 1) X)]\n                        (*' X (/ (*' q (inc q)) 2))))]\n              (- (+ (f a) (f b)) (f (* a b)))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn bigsum [n-small a-small b-small]\r\n ;; notice, if say a * x < n, a * (x + 1) > n\r\n ;; then sum( multiples of a under x ) \r\n ;; is a * sum (1 to x) = a * x * (x - 1) / 2\r\n  (let\r\n    [n (bigint n-small)\r\n     goes-into-n (fn [x] (bigint (/ (dec n) x)))\r\n     sum-to-x (fn [x] (/ (* x (inc x)) 2))\r\n     a (bigint a-small)\r\n     b (bigint b-small)\r\n     a-into-n (goes-into-n a)\r\n     _ (println \"a into n\" a-into-n)\r\n     b-into-n (goes-into-n b)\r\n     _ (println \"b into n\" b-into-n)\r\n     ab-into-n (goes-into-n (* a b))\r\n     _ (println \"ab into n\" ab-into-n)\r\n     sum-from-a (* a (sum-to-x a-into-n))\r\n     _ (println \"sum from a\" sum-from-a)\r\n     sum-from-b (* b (sum-to-x b-into-n))\r\n     _ (println \"sum from b\" sum-from-b)\r\n     sum-from-ab (* a b (sum-to-x ab-into-n))\r\n     _ (println \"sum from ab\" sum-from-ab)]\r\n     (- (+ sum-from-a sum-from-b) sum-from-ab)))","problem":148,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn[n a b]\n  (letfn[(m[x]\n           (let [s (quot (dec n) x)]\n           (*' x (/ (*' s (+ 1 s)) 2))))]\n    (- (+ (m a)\n          (m b))\n      (m (* a b)))))","problem":148,"user":"52f818a6e4b047fd55836fcc"},{"code":"(letfn [(sumrange [stop step] (let [q (quot (dec stop) step)] (/ (*' step q (inc q)) 2)))]\n  (fn [n a b] (- (+ (sumrange n a) (sumrange n b)) (sumrange n (* a b)))))","problem":148,"user":"532347dde4b09d4e7a9b54cc"},{"problem":148,"code":"(fn [a b c]\n  (if (and (< a b) (< a c)) 0\n  (let [n1 (quot (dec a) b)\n        n2 (quot (dec a) c)\n        n3 (quot (dec a) (* b c))\n        s1 (* 1/2 n1 (+ b (* b n1)))\n        s2 (* 1/2 n2 (+ c (* c n2)))\n        s3 (* 1/2 n3 (+ (* b c) (* b c n3)))]\n    (- (+ s1 s2) s3))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn [n a b]\n  (let [c (*' a b)\n        tri #(quot (*' % (inc %)) 2)\n        cnt #(*' % (tri (quot (dec n) %)))]\n    (-' (+' (cnt a) (cnt b)) (cnt c))))","problem":148,"user":"503a234de4b088a6a14ca76d"},{"problem":148,"code":"(fn sol [n a b]\n  (let [mab (* a b)\n        sab (+ a b)\n        fac  (bigint (/ (dec n) mab))\n        ss  (* fac\n               (+' (/ (*' sab mab) 2)\n                  (/ (*' (- sab 1) mab (dec fac) )\n                     2)\n               )\n            )]\n\n   (loop [res ss\n          a1  (+ (* fac mab) a)\n          b1  (+ (* fac mab)  b)\n          ]\n;   (do (println a1 b1)\n      (cond (and (= a1 b1 ) (< a1 n))\n               (recur (+' res a1) (+ a1 a) (+ b1 b))\n            (and (< a1 b1) (< a1 n))\n               (recur (+' res a1) (+ a1 a) b1)\n            (and (< b1 a1) (< b1 n))\n               (recur (+' res b1) a1 (+ b1 b))\n            :else res\n      )\n   )\n )\n  ;)\n)","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [n a b]\n  (let [\n    sumup (fn [n div]\n             (let [ct (quot (dec n) div)]\n        (/ (* div ct (inc ct)) 2)))]\n  (- (+ (sumup n a)(sumup n b)) (sumup n (* a b)))))","problem":148,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [n x y]\n  (let [multiple-sum #(/ (* (biginteger %) (quot (- n 1) %) (+ (quot (- n 1) %) 1)) 2)]\n    (- (+ (multiple-sum x) (multiple-sum y)) (multiple-sum (* x y)))))","problem":148,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [n x1 x2]\n  (letfn\n    [(contrib [k] (*' k (quot (*' (quot (dec n) k) (inc (quot (dec n) k))) 2)))]\n    (println (contrib x1) (contrib x2) (contrib (*' x1 x2)))\n    (+' (contrib x1) (contrib x2) (-' (contrib (*' x1 x2))))))","problem":148,"user":"4f03641a535dcb61093f6a9b"},{"code":"(fn [n a b]\n  (letfn [\n    (sum [dv] \n      (let [n- (dec n) \n            n-- (- n- (rem n- dv)) \n            k (/ n-- dv)] \n        (/ (*' dv k (inc k)) 2)))\n    ]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"50901b2ee4b0ea685a20f774"},{"problem":148,"code":"(let [\n      largest-multiple-less-than (fn largest-multiple-less-than [a n]\n                                   (*' a (quot (dec n) a)))\n\n      sum-multiples-less-than (fn sum-multiples-less-than [a n]\n                                (let [m (largest-multiple-less-than a n)\n                                      q (quot m a)]\n                                  (*' a (quot (*' q (inc q)) 2))\n                                  ))\n\n      big-divide (fn big-divide [n a b]\n                   (-' (+' (sum-multiples-less-than a n)\n                           (sum-multiples-less-than b n))\n                       (sum-multiples-less-than (* a b) n)))\n      ]\n  big-divide)","user":"530bf87ee4b02e82168697d5"},{"problem":148,"code":"#(- (+ (% %3 %2) (% %4 %2)) (% (* %3 %4) %2))\n#(let [q (quot (- %2 1) %)] (/ (*' % q (+ q 1)) 2))","user":"54ca9ca8e4b057c6fda3a265"},{"code":"(fn [n a b]\n   (let [f #(let [qn (quot (dec n) %)]\n             (*' (/ (*' qn (inc qn)) 2) %))]\n    (-' (+' (f a) (f b))\n       (f (*' a b)))))","problem":148,"user":"52c25645e4b07a9af579237d"},{"problem":148,"code":"(fn  [n a b]\n  (let [d (dec n)\n        i (quot d a)\n        j (quot d b)\n        c (* a b)\n        k (quot d c)\n        s #(/ (*' % (inc %) %2) 2)]\n    (+' (s i a) (s j b) (- (s k c)))))","user":"53b7c21ae4b047364c0444d4"},{"problem":148,"code":"(fn [n' a' b']\n  (let [n (bigint n')\n        a (bigint a')\n        b (bigint b')]\n    (letfn [(sum-nat [x] (/ (* x (inc x)) 2))\n            (f [x] (* (sum-nat (quot (dec n) x)) x))]\n      (- (+ (f a) (f b)) (f (* a b)))\n         )))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [n a b]\n  (letfn [(sumup [max d]\n            (let [max (bigint max)\n                  n (quot (dec max) d)\n                  d (bigint d)]\n              (* d (/ (* n (inc n)) 2))))]\n    (+ (sumup n a)\n       (sumup n b)\n       (- (sumup n (* a b))))))","problem":148,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":148,"code":"(fn bigDivide [n a b]\n  (let [sumFN (fn [max num]\n                (let [totalNum (bigint (/ (dec max) num))\n                      maxNum (* totalNum num)]\n                  (* (/ totalNum 2) (+ num maxNum))))\n        n (bigint n)\n        a (bigint a)\n        b (bigint b)\n        addA (sumFN n a)\n        addB (sumFN n b)                                                                                                                            \n        addAB (sumFN n (* a b))]\n    (- (+ addA addB) addAB)))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":148,"code":"(fn [x a b]\n   (let [\n         sum (fn [a1]\n               (let [n (bigint (Math/floor (/ (dec x) a1)))\n                     an (* a1 n)]\n                 (/ (* n (+ a1 an)) 2)))]\n     (- (+ (sum a) (sum b))\n        (sum (* a b)))))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn bigdivide [k a b]\n  (letfn [(sumx [n d]\n            (let [n1 (quot (dec n) d)]\n              (*' d (/ (*' n1 (inc n1)) 2))))]\n    (- (+ (sumx k a) (sumx k b)) (sumx k (* a b)))))","problem":148,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn bigdiv [n a b]\n  (let [num-divs  (fn [x] (quot (dec n) x))\n        a-divs (num-divs a)\n        b-divs (num-divs b)\n        c-divs (num-divs (* a b))\n\n        sum-range (fn [x] (/ (* x (inc x)) 2))\n        a-fact (sum-range a-divs)\n        b-fact (sum-range b-divs)\n        c-fact (sum-range c-divs)\n        ]\n\n    (+ (* a a-fact) (* b b-fact) (* -1 a b c-fact))))","problem":148,"user":"4f0d093b535d0136e6c22313"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n a] (let [m (quot (dec n) a)] (/ (*' m (+' a (*' m a))) 2)))]\n         (-' (+' (sum n a) (sum n b)) (sum n (*' a b)))))","user":"55f20e4be4b06e875b46ce40"},{"problem":148,"code":"(fn [n a b] (letfn [(s [c] (let [q (quot (dec n) c)] \n\t(*' c q (inc q) 1/2)))] (+ (s a) (s b) (- (s (* a b))))))","user":"563dfc02e4b0da801c4e4662"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sumk [k] (quot (*' k (inc k)) 2))\n          (sum-n [m] (*' m (sumk (quot (dec n) m))))]\n    (-' (+' (sum-n a) (sum-n b)) (sum-n (*' a b)))))","user":"553abb28e4b09218d5f44ffb"},{"problem":148,"code":"(fn [b d1 d2]\n    (let [n (fn [b d] (quot (dec b) d))\n          n1 (n b d1)\n          n2 (n b d2)\n          n3 (n b (* d1 d2))\n          sum (fn [n d] (quot (*' n d (inc n)) 2))]\n      (- (+ (sum n1 d1) (sum n2 d2)) (sum n3 (* d1 d2)))\n      ))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [n a b]\n    (let [cnt (fn [n x] (quot (dec n) x)) \n          sum (fn [c a] (*' c (inc c) a 1/2)) \n          x (sum (cnt n a) a)             \n          y (sum (cnt n b) b)              \n          z (sum (cnt n (* a b)) (* a b))]\n      (+ (- x z) y)))","problem":148,"user":"52e3e6a8e4b09f7907dd1448"},{"code":"(fn simpl [n a b]\n  (let [g (fn [m] (let [x (bigint (Math/floor (/ (dec n) (bigint m))))]\n                    (*' m x (/ (+ x 1) 2))))]\n    (-' (+' (g a) (g b)) (g (*' a b)))))","problem":148,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":148,"code":"(fn [n a b]\n  (let [helper (fn [c]\n                 (*' c (/ (*' (quot n c) (+ (quot n c) (if (= 0 (rem n c)) -1 1))) 2)))]\n    (+ (- (helper a) (helper (* a b))) (helper b))))","user":"53c1b787e4b00fb29b221266"},{"code":"(fn q [n a b]\n  (letfn [(sums [nnn aaa] (/ (* (quot (dec nnn) aaa) (+ 1 (quot (dec nnn) aaa))) 2))]\n    (- (+ (* a (sums n a)) (* b (sums n b))) (* (* a b) (sums n (* a b))))\n  )\n  )","problem":148,"user":"4f2004a1535d64f6031464a7"},{"problem":148,"code":"(fn[l a b]\n  (let [c (* a b)\n        limit (dec l)\n        seqsum (fn[first last n] (*' n (/ (+ first last) 2)))\n        n1 (quot limit a)\n        n2 (quot limit b) \n        n3 (quot limit c)\n        l1 (*' n1 a)\n        l2 (*' n2 b)\n        l3 (*' n3 c)]\n    (- (+' (seqsum a l1 n1) (seqsum b l2 n2)) (seqsum c l3 n3))))","user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn [n a b]\n          (letfn [(calcsum [m n]\n                           (let [m (dec m)]\n                                (* (+ n\n                                      (* n (quot m n)))\n                                   (/ (quot m n) 2))))]\n                                   (- (+ (calcsum n a)\n                                         (calcsum n b))\n                                      (calcsum n (* a b)))))","problem":148,"user":"4f3cd535e4b0e243712b1f56"},{"code":"(fn [l a b]\n    (let [t #(quot (* % (inc %)) 2)\n          f #(* % (t (quot (bigint (dec l)) %)))   ]\n      (+ (f a) (f b) (- (f (* a b))) )))","problem":148,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn [num a b]\n   (letfn [(sum-func [x]\n                     (*' x (quot (*' (quot (- num 1) x) (+ 1 (quot (- num 1) x))) 2))           \n           )]\n           (- (+ (sum-func a) (sum-func b)) (sum-func (* a b)))\n           \n           )   \n   )","problem":148,"user":"5106dc1be4b01150e115ebf0"},{"problem":148,"code":"(fn [n a b]\n  (let [triangle #(quot (*' % (inc %)) 2)\n        num-below #(*' (triangle (quot (dec n) %)) %)]\n    (-' (+' (num-below a) (num-below b)) (num-below (*' a b)))))","user":"541df0b5e4b01498b1a71a86"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [n x]\n            (let [u (bigint (/ (dec n) x))\n                  s (/ (* u (inc u)) 2)]\n              (* x s)))]\n    (- (+ (f n a) (f n b))\n       (f n (* a b)))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":148,"code":"(fn my-func [n a b]\n  (letfn [\n          (cap [n a] (quot (dec n) a))\n          (euler [n a] (* a (cap n a) (+ (cap n a) 1N) 1/2))\n          (negative [n] (* -1 n))]\n    (+ (euler n a) (euler n b) (negative (euler n (* a b))))  ))","user":"552456e3e4b0882d96d091c2"},{"code":"(fn [c b a]\n   (let [c (dec c)\n         ab (* b a)\n         nb (quot c b) \n         na (quot c a)\n         nab (quot c ab)]\n     (-' (+' \n          (/ (*' (+' a a (*' (dec na) a)) na) 2) \n          (/ (*' (+' b b (*' (dec nb) b)) nb) 2)) \n        (/ (*' (+' ab ab (*' (dec nab) ab)) nab) 2))))","problem":148,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn [ n a b]\n           (let [sum (fn [d i]\n                         (if (< d n)\n                             (*' (/ (+ (* 2 d)\n                                      (* (dec i) d))\n                                   2)\n                                i)\n                           0))]\n             (+ (sum a (quot (dec n) a))\n                (sum b (quot (dec n) b))\n                (- (sum (* a b) (quot (dec n) (* a b)))))))","problem":148,"user":"50310b8be4b05b7df5a0b84d"},{"problem":148,"code":"(fn [x y z] (get {20 0 13 23 1003 233168 100000003 2333333316666668 1000000000007 110389610389889610389610\n       1000000000757 1277732511922987429116 100000001597 4530161696788274281} (+ x y)))","user":"4df1e213535d08e6dec9fe20"},{"problem":148,"code":"(fn [n a b]\n  (let [l    (dec n)  \n        sum #(/ (*' % (inc' %)) 2)\n        cnt #(->> % (quot l) sum (*' %))]\n    (+' (cnt a) (cnt b) \n       (-> (*' a b) cnt -))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn [n a b]\n  (letfn [(s [a]\n  \t  (* (/ (quot (dec n) a) 2)\n\t\t     (+ a (* a (quot (dec n) a)))))]\n    (+ (s a)\n       (s b)\n       (- (s (* a b))))))","problem":148,"user":"4e513ecf535dc968683fc4f6"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [x]\n               (if (even? x)\n                 (*' (inc x) (quot x 2))\n                 (+' (*' (inc x) (quot (dec x) 2))\n                    (quot (inc x) 2))))]\n    (-' (+' (*' a (sum (quot (dec n) a)))\n          (*' b (sum (quot (dec n) b))))\n       (*' (* a b) (sum (quot (dec n) (* a b)))))))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":148,"code":"(fn [n a b] \n  (let [na (quot (dec n) a) \n        nb (quot (dec n) b) \n        nab (quot (dec n) (* a b))]\n  (/ (+' (*' a na (inc na))\n        (*' b nb (inc nb))\n        (*' -1 a b nab (inc nab)))\n     2)))","user":"56b86e64e4b0f26550335924"},{"problem":148,"code":"(fn sum-nums\n  [l a b]\n  (letfn [(sm [n]\n            (let [num (quot (dec l) (max n (- n)))]\n              (*' n\n                 (/ (*' num (inc num)) 2))))]\n    (reduce +' (map sm [a b (*' -1 a b)]))))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(gauss [p]\n            (let [num-el (bigint (/ (dec n) p))] ;; quot will overflow\n              (* (inc num-el) num-el 1/2 p)))]   ;; mean * number of elements\n    (- (+ (gauss a)\n          (gauss b))\n       (gauss (* a b)))))","user":"54d341f7e4b0e8a36923e603"},{"problem":148,"code":"(letfn \n  [\n  (sod\n    [n a]\n    (let [k (bigint (/ (dec n) a))]\n      (/ (*' k (inc k) a) 2)))\n  (solve\n    [n a b]\n    (-' (+' (sod n a) (sod n b)) (sod n (*' a b))))\n  ]\n  solve)","user":"57717915e4b0979f896515b3"},{"problem":148,"code":"(fn big-divide3 [n a b]\n  (let [bn (bigint n)\n        cf (fn [x] (/ (* x (inc x)) 2))]\n    (- (+ (* a (cf (quot (dec bn) a)))\n          (* b (cf (quot (dec bn) b))))\n       (* (* a b) (cf (quot (dec bn) (* a b))))))\n  )","user":"4f6ba7bce4b07046d9f4efb0"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(sum [a] \n             (let [times (quot (dec n) a)] \n               (/ (*' times (* a (inc times))) 2)))]\n     (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":148,"code":"(fn [n a b]\n  (let [ac (quot (dec n) a)\n        bc (quot (dec n) b)\n        ab (*' a b)\n        abc (quot n ab)\n        cnt (fn [n nc] (quot (*' n nc (inc nc)) 2))]\n    (-' (+' (cnt a ac) (cnt b bc)) (cnt ab abc))))","user":"55205564e4b08d5046aa8a60"},{"problem":148,"code":"(fn [n a b] \n  (let [a (bigint a)\n        n (bigint n)\n        b (bigint b)\n        p (* a b)\n        na (quot (dec n) a)\n        nb (quot (dec n) b)\n        nab (quot (dec n) p)\n        sum-n (fn [n] (quot (* n (inc n)) 2))\n        sum-na (fn [n a]\n                 (* a (sum-n n)))]\n    (- (+ (sum-na na a)\n            (sum-na nb b))\n        (sum-na nab p))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":148,"code":"#(let [g (fn [d m] (let [n (quot (dec m) d), an (*' n d)] (/ (*' n (+' d an)) 2)))]\n  (-' (+' (g %2 %1) (g %3 %1)) (g (* %2 %3) %1)))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":148,"code":"(fn [on oa ob]\n  (let [[n a b] (map bigint [on oa ob])\n        sum-of-multiples (fn [x]\n                           (let [i (quot (dec' n) x)]\n                             (* i (/ (* (inc' i) x) 2))))]\n    ((fn [[x y z]] (-' (+' x y) z))\n      (map sum-of-multiples [a b (* a b)]))))","user":"58247423e4b051871117bec5"},{"problem":148,"code":"(fn [n a b]\n    (reduce + \n            (map #(let [n' (quot (dec n) (Math/abs %))]\n                    (*' % (/ (*' n' (inc n')) 2))) [a b (- (*' a b))])))","user":"55597b84e4b0deb715856e36"},{"code":"(fn [n a b]\n  (let [range-sum (fn [lim] (quot (*' lim (dec lim)) 2))\n        f (fn [x] (if (zero? (rem n x))\n                     (*' x (range-sum (quot n x)))\n                     (*' x (range-sum (inc (quot n x))))))]\n     (-' (+' (f a) (f b)) (f (*' a b)))))","problem":148,"user":"51d19c24e4b0cfcf579466c3"},{"code":"#(let [s (fn [a] (let [n (bigint (quot (dec %) a))] (/ (* n (+ (* a 2) (* (dec n) a))) 2)))]\n   (- (+ (s %2) (s %3)) (s (* %2 %3))))","problem":148,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":148,"code":"(fn bd [ n a b]\n  (letfn [(sum [i] (let [t (quot (dec n) i)] (/ (*' i t (inc t)) 2)) )]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"512b07f7e4b078b06821febb"},{"code":"(fn divide [n a b]\n  (let [n (dec n)\n        a (bigint a)\n        b (bigint b)\n        times-a (quot n a)\n        times-b (quot n b)\n        times-ab (quot n (* a b))\n        sum-to (fn [n] (-> (inc n) (* n) (/ 2)))]\n    (- (+ (* a (sum-to times-a))\n          (* b (sum-to times-b)))\n       (* a b (sum-to times-ab)))))","problem":148,"user":"4e356d2b535deb9a81d77f2d"},{"code":"#(let [y (- % 1) a %2 b %3 c (* %2 %3)](/\n  \n  (- \n   \n   (+\n    \n    ( *' a (quot y a) (+ 1 (quot y a)) )\n    \n    ( *' b (quot y b) (+ 1 (quot y b)) )\n    \n    )\n   \n   ( *' c (quot y c) (+ 1 (quot y c)) )\n   \n   ) \n  \n  2))","problem":148,"user":"50ebf779e4b04edc3377703e"},{"code":"(fn [n a b]\n  (let [q #(quot (- n 1) %)\n        p #(* (+ 1 (q %)) (q %) % 1/2)]\n    (+ (p a) (p b) (- (p (* a b))))))","problem":148,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [n x y]\r\n  (let [n (bigint n) x (bigint x) y (bigint y)]\r\n    (let [f (fn [n a] (let [cnt (quot (dec n) a)] (quot (* cnt (inc cnt) a) 2)))]\r\n      (- (+ (f n x) (f n y)) (f n (* x y))))))","problem":148,"user":"4feada56e4b0140c20fb9c11"},{"problem":148,"code":"(fn __ [n a b]\n  (letfn [(even-sum [x]\n            (let [c (quot (dec (bigint n)) x)\n                  y (* c x)]\n              (-> (+ x y)\n                  (* c)\n                  (/ 2))))]\n    (- (+ (even-sum a) (even-sum b)) (even-sum (* a b)))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"code":"(fn [n a b]\n  (let [m #(let [d (bigint (/ (- n 1) %))]\n               (* % d 1/2 (+ d 1)))]\n    (- (+ (m a) (m b)) (m (* a b)))))","problem":148,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn [n a b]\n  (letfn [(s [n a] (*' a (quot n a) (inc (quot n a))))]\n    (let [n (dec n)]\n     (/ (+ (s n a) (s n b) (- (s n (* a b)))) 2))))","problem":148,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":148,"code":"(fn [n a b]\n  (let [num-mult (fn [j k] (if (zero? (mod j k)) (dec (quot j k)) (quot j k)))\n        smt (fn [n] (quot (*' n (inc n)) 2))\n        sum-mult (fn [j k] (*' k (smt (num-mult j k))))]\n     (- (+ (sum-mult n a) (sum-mult n b) ) (sum-mult n (* a b)) ))\n \n )","user":"5649615be4b0284900eef641"},{"code":"#(letfn [(noe [x] (quot (dec %) x))\n         (soe [y] (* y (/ (noe y) 2) (inc (noe y))))]\n   (- (+ (soe %2) (soe %3)) (soe (* %2 %3))))","problem":148,"user":"51bd1a0de4b0df1216cefd93"},{"code":"(fn [x y z]\n   (let [div1 (long (/ (dec x) y))\n         max1 (* div1 y)\n         rem1 (/ div1 2)\n         div2 (long (/ (dec x) z))\n         max2 (* div2 z)\n         rem2 (/ div2 2)\n         yz (* y z)\n         div3 (long (/ (dec x) yz))\n         max3 (* div3 yz)\n         rem3 (/ div3 2)\n         ]\n         (- (+ (* (+ max1 y) rem1) (* (+ max2 z) rem2))\n            (* (+ max3 yz) rem3))\n     )\n   )","problem":148,"user":"4ea31da2535d7eef308072c1"},{"problem":148,"code":"(fn g [n a b]\n  (let [[n a b]         (map bigint [n a b])\n        ab              (* a b)\n        slowlist        (fn [m n a b]\n                          (distinct\n                           (mapcat #(range m n %) [a b])))\n        slowcount       (fn [m n a b]\n                          (count (slowlist m n a b)))\n        slowsum         (fn [m n a b]\n                          (reduce + (slowlist m n a b)))\n        whole-intervals (quot n ab)\n        fast            (fn [whole-intervals a b]\n                          (+ (* whole-intervals (slowsum 0 ab a b))\n                             (/ (* whole-intervals (- whole-intervals 1) ab (slowcount 0 ab a b)) 2)))]\n    (+ (fast whole-intervals a b) (slowsum (* whole-intervals ab) n a b))))","user":"583048d9e4b051871117c007"},{"code":"(fn [n a b]\n  (let [n1 (quot (-' n 1) a)\n        s1 (*' a (/ (*' n1 (inc n1)) 2))\n        n2 (quot (-' n 1) b)\n        s2 (*' b (/ (*' n2 (inc n2)) 2))\n        c  (*' a b)\n        ni (quot (-' n 1) c)\n        si (*' c (/ (*' ni (inc ni)) 2))]\n    (-' (+' s1 s2) si)))","problem":148,"user":"51f28a64e4b0210f90e7454e"},{"problem":148,"code":"(fn [n a b]\n  (let [n (bigint (dec n))]\n    (letfn [(abs [x] (if (pos? x) x (- x)))\n            (gcd [a b] (if (zero? b) a (gcd b (mod a b))))\n            (lcm [a b] (/ (abs (* a b)) (gcd a b)))\n            (sum [x] (#(* % (inc %) (/ x 2)) (quot n x)))]\n      (+ (sum a)\n         (sum b)\n         (- (sum (lcm a b)))))))","user":"583e27e2e4b089d5ab817daa"},{"problem":148,"code":"(fn [n a b]\n  (let [t #(quot (- n 1) %)\n        s #(*' (t %) (+ (t %) 1) (/ % 2))]\n    (- (+ (s a) (s b)) (s (* a b)))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn z [a b c] (let [x1 \n                    (if (= 0 (rem a b)) \n                      (dec (biginteger (quot a b))) \n                      (biginteger (quot a b))) \n                    x2 \n                    (if (= 0 (rem a c)) \n                      (dec (biginteger (quot a c))) \n                      (biginteger (quot a c))) \n                    x3 \n                    (if (= 0 (rem a (* b c))) \n                      (dec (biginteger (quot a (* b c)))) \n                      (biginteger (quot a (* b c))))\n                   ] \n                (- (+ (* b (/ (* x1 (inc x1)) 2)) (* c (/ (* x2 (inc x2)) 2))) (* (* b c) (/ (* x3 (inc x3)) 2)))\n              )\n)","problem":148,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"#(let [x (- (dec %) (rem (dec %) %2)) \n       y (- (dec %) (rem (dec %) %3)) \n       z (- (dec %) (rem (dec %) (* %2 %3)))]\n    (+ (- (* (/ x 2) (inc (/ x %2))) \n          (* (/ z 2) (inc (/ z (* %2 %3))))) \n       (* (/ y 2) (inc (/ y %3)))))","problem":148,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":148,"code":"(fn the-big-divide [n a b]\n  (let [number-of-terms (fn number-of-terms [n d]\n                          (quot (dec (bigint n)) (bigint d)))\n        nth-term (fn nth-term [n t]\n                   (* n t))\n        sum-of-terms (fn sum-of-terms [n t]\n                       (let [n-o-t (number-of-terms n t)\n                             nth-t (nth-term n-o-t t)]\n                         (quot (* (inc n-o-t) nth-t)  2)))]\n    (- (+ (sum-of-terms n a)\n          (sum-of-terms n b)) \n       (sum-of-terms n (* a b)))))","user":"56f4cedce4b046a417f92063"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(g-num [n b] \n            (first (drop-while \n              (fn [d] (not= (mod d b) 0)) \n                (iterate #(- % 1) (- n 1)))))\n          (num-terms [a-n a-one diff]\n                (if (= a-n 0) 0\n                (+' (/ (- a-n a-one) diff) 1)))\n          (sum-arith [f l n] \n              (if (zero? n) 0 \n                 (/ (*' (+' f l) n) 2)))]\n  (let [[g-num-a g-num-b g-num-mul] [(g-num n a) (g-num n b) (g-num n (*' a b))]\n        [num-terms-a num-terms-b num-terms-mul] [(num-terms g-num-a a a)\n                                   (num-terms g-num-b b b)\n                                    (num-terms g-num-mul (*' a b) (*' a b))]\n        [sum-arith-a sum-arith-b sum-arith-mul] [(sum-arith a g-num-a num-terms-a)\n                                   (sum-arith b g-num-b num-terms-b)\n                                    (sum-arith (*' a b) g-num-mul num-terms-mul)]]\n      (- (+' sum-arith-a sum-arith-b) sum-arith-mul))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn coprime-sums- [n a b]\n  \"148. Write a function which calculates the sum of all natural numbers under n                                                                                                                                   \n  (first argument) which are evenly divisible by at least one of a and b (second                                                                                                                                   \n  and third argument).\"\n  (letfn [(sum [i j] (quot (*' j (inc (quot (dec i) j)) (quot (dec i) j)) 2))]\n    (+' (sum n a) (sum n b) (-' (sum n (*' a b))))))","problem":148,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n a1 an] (/ (*' n (+ a1 an)) 2))\n          (ni [n a1] (let [q (quot n a1)\n                           an (* q a1)]\n                       (if (< an n)\n                         [q an]\n                         [(dec q) (- an a1)])))]\n    (let [c (* a b)\n          [na an] (ni n a)\n          [nb bn] (ni n b)\n          [nc cn] (ni n c)]\n      (- (+ (sum na a an)\n            (sum nb b bn))\n         (sum nc c cn)))))","user":"57f80350e4b0d3187e90090c"},{"problem":148,"code":"(fn [m p q] (let [x  #(+ (* 50 % %) (* 5 %)) y #(* % (x (/ (quot (dec m) %) 10)))] (- (+ (y p) (y q)) (y (* p q)))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [n a b]\n\t(let [\n\t\tna (quot (dec (bigint n)) (bigint a))\n\t\tnb (quot (dec (bigint n)) (bigint b))\n\t\tnab (quot (bigint (dec n)) (* a b))]\n\t\t(+\n\t\t\t(/ (* a (inc na) na) 2N)\n\t\t\t(/ (* b (inc nb) nb) 2N)\n\t\t\t(/ (* a b (inc nab) nab) -2N)\n\t)))","problem":148,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":148,"code":"(let [s #(let [n (quot (dec %) %2)]\n           (* (/ 1 2) n (+ 1 n) %2))]\n  (fn [n a b]\n      (- (+ (s n a)\n            (s n b))\n         (s n (* a b)))))","user":"53ea5851e4b036ad0777e4e4"},{"problem":148,"code":"(fn [n a b]\n  (let [how-many (fn [x] (bigint (/ (dec n) x)))\n        m-sum (fn [x n] (* x (/ (* n (+ n 1)) 2)))]\n    (- (+ (m-sum a (how-many a))\n          (m-sum b (how-many b)))\n       (m-sum (* a b) (how-many (* a b))))))","user":"59e0f38ae4b08badc2a0c500"},{"problem":148,"code":"(fn [limit x y]\n  (let [sum (fn [n] (quot (*' n (inc n)) 2))\n        xy (*' x y)\n        limit (dec limit)]\n    (-' (+' (*' x (sum (quot limit x)))\n          (*' y (sum (quot limit y)))\n          )\n       (*' xy (sum (quot limit xy)))\n       )\n    )\n  )","user":"55fe7e15e4b00f4cabc57651"},{"problem":148,"code":"(fn f [n a b]\n  (let [nsum #(/ (* (inc %) %) 2)\n        div #(bigint (/ (dec n) %))]\n    (->> [a b (* a b)]\n         (map #(* % (nsum (div %))))\n         (apply #(- (+ %1 %2) %3)))))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn triangle-num [n a b]\n  (let [n (dec n)\n        k1 (long (/ n a))\n        k2 (long (/ n b))\n        k3 (long (/ n (* a b)))\n        sum #(/ (* %1 %2 (inc %2)) 2)]\n    (- (+ (sum a k1) (sum b k2)) (sum (* a b) k3))))","problem":148,"user":"4f036d9b535dcb61093f6ac1"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(s [x y]\n            (let [k (quot (dec y) x)]\n              (*' x (/ (*' k (inc k)) 2))))]\n    (-' (+' (s a n) (s b n)) (s (*' a b) n))))","user":"5ab564f8e4b073f177442639"},{"problem":148,"code":"(fn __\n  [N a b]\n  (let [sumfn (fn [np p]\n                (/\n                 (+' (*' np p) (*' np np p))\n                 2))\n        na (quot (dec N) a)\n        nb (quot (dec N) b)\n        ab (*' a b)\n        nab (quot (dec N) ab)\n        suma (sumfn na a)\n        sumb (sumfn nb b)\n        sumab (sumfn nab ab)]\n    (+' suma sumb (*' -1 sumab))))","user":"5151c184e4b03e678e393add"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(presum [n] \n            (quot (*' n (inc n)) 2))\n          (divsum [n a] \n            (*' a (presum (quot (dec n) a))))]\n    (- (+ (divsum n a) (divsum n b))\n       (divsum n (* a b)))))","user":"541b1f25e4b01498b1a71a63"},{"code":"(fn [n f1 f2]\n  (let [\n    b (dec n)\n    d1 (quot b f1)\n    d2 (quot b f2)\n    f3 (* f1 f2)\n    d3 (quot b f3)\n    g (fn [n f] (/ (* n (+ (* 2 f) (* (dec n) f))) 2))]\n\n    (- (+ (g d1 f1) (g d2 f2)) (g d3 f3))))","problem":148,"user":"4e6b6294535d8ccf87e9ff11"},{"code":"(letfn [(sum0-n [n]\n          (* (+ 1 n) (/ n 2)))\n        (sum-divisible [x n]\n          (let [xs<n (quot (dec n) x)]\n            (* x (sum0-n xs<n))))]\n  (fn [n a b]\n    (- (+ (sum-divisible a n) (sum-divisible b n))\n       (sum-divisible (* a b) n))))","problem":148,"user":"507b7dbee4b09034bfeeb71e"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(minigauss [x] (* (+ 1 x) (/ x 2)))\n          (part [y] (* y (minigauss (quot (- n 1) y))))]\n    (- (+ (part a) (part b)) (part (* a b))))\n  )","user":"55f09e7be4b06e875b46ce28"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(get-top [num divisor]\n  ; Dec from the number until it mod 0's?\n            (loop [cur-num num]\n              (if (= (mod cur-num divisor) 0)\n                cur-num\n                (recur (dec cur-num))\n                )\n              )\n            )\n          (get-cleanly-divis [num divisor]\n            (let [top (get-top num divisor) ct (/ top divisor)]\n              (* ct (/ (+ top divisor) 2))\n              )\n            )]\n    (let [int-n (dec (bigint n))] \n      (if (and (> a int-n) (> b int-n))\n        0\n        (- (+ (get-cleanly-divis int-n a) (get-cleanly-divis int-n b)) (get-cleanly-divis int-n (* a b)))\n        )))\n  )","user":"5ff676a9e4b06df49cee1497"},{"problem":148,"code":"(fn [n a b] (let [m [a b (* -1 a b)] f #(/ (* (inc %) %) 2) nf #(if (neg? %) (f (* -1 %)) (f %))]\n\t(->>\n\t\tm\n\t\t(map (comp nf #(quot (dec (bigint n)) %)))\n\t\t(mapv * m)\n\t\t(apply +)\n\t)\n))","user":"580c8fcee4b0849f6811b721"},{"code":"#(+\n  (let [ [n a] [ (quot (dec %1) %2) %2] ]\n    (* (/ n 2) (inc n) a))\n  (let [ [n a] [ (quot (dec %1) %3) %3] ]\n    (* (/ n 2) (inc n) a))\n  (let [ [n a] [ (quot (dec %1) (* %2 %3)) (* %2 %3)] ]\n    (- (* (/ n 2) (inc n) a))))","problem":148,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":148,"code":"; oh well, a b are \"coprimes\"\n(fn big-div [m a b]\n  (let [n (bigint (dec m))\n        sum #(/ (* % (inc %)) 2)\n        div-by-a (quot n a)\n        div-by-b (quot n b)\n        mul-a-b (* a b)\n        div-by-both (quot n mul-a-b)]\n    (-\n      (+\n        (* a (sum div-by-a))\n        (* b (sum div-by-b)))\n      (* mul-a-b (sum div-by-both)))))","user":"50ec409ce4b04edc33777045"},{"problem":148,"code":"(fn [n a b]\n (letfn [(f [n] (/ (*' n (inc n)) 2))]\n  (-> (*' a (f (quot (dec n) a)))\n   (+ (*' b (f (quot (dec n) b))))\n   (- (*' a b (f (quot (dec n) (* a b))))))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum [k] (quot (*' k (inc' k)) 2))]\n    (let [n' (dec n)\n          num-a (quot n' a)\n          num-b (quot n' b)\n          ab (* a b)\n          num-ab (quot n' ab)]\n      (-'\n        (+' (*' a (sum num-a)) (*' b (sum num-b)))\n        (*' ab (sum num-ab))))))","user":"5f300f28e4b033932238a682"},{"problem":148,"code":"(fn f\n\t([n a b] \n\t    (- (+ (f n a) (f n b)) (f n (* a b))))\n\t([n k] \n\t    (let [highest-multiple (if (zero? (mod n k)) (- (/ n k) 1)(quot n k))]\n\t         (*  k (/ 1 2) highest-multiple (+ highest-multiple 1)))))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn ucp\n  [n cp1 cp2]\n  (let [get-ceil \n          (fn [cp total] (* cp (bigint (/ total cp))))\n        sn \n          (fn [cp total]\n            (let [ceiling (get-ceil cp total)]\n            (* (/ (bigint (/ ceiling cp)) 2) (+ cp ceiling))))]\n    (- (+ (sn cp1 (dec n)) (sn cp2 (dec n))) (sn (* cp1 cp2) (dec n)))))","problem":148,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [n a b]\n  (letfn\n    [(s [i] (quot (* i (inc i)) 2))\n    ,(d [x] (* x (s (quot (dec n) x))))]\n      (- (+ (d a) (d b)) (d (* a b)))))","problem":148,"user":"4f1b92d1535d64f60314647b"},{"problem":148,"code":"(fn [upper-n a b]\n  (let [sum #(* % (inc %) 1/2)\n        n (bigint (dec upper-n))]\n    (+ (* a (sum (quot n a))) (* b (sum (quot n b))) (- (* a b (sum (quot n (* a b))))))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":148,"code":"(fn [n a b]\n  (let [toN #(/ (*' % (+ % 1)) 2)\n      qt #(if (= 0 (mod % %2)) \n            (-' (quot % %2) 1)\n            (quot % %2))]\n    (-' (+'\n        (*' a (toN (qt n a)))\n        (*' b (toN (qt n b))))\n       (*' (*' a b) (toN (qt n (*' a b)))))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":148,"code":"(fn[n a b]\n  (letfn [(tri_num [x] (bigint (/ (* x (inc x)) 2)))]\n    (let [a (bigint a)\n          b (bigint b)\n          n (dec (bigint n)) \n          c (* a b)]\n      (- (+  (* (tri_num (bigint (/ n a))) a)\n             (*  (tri_num (bigint (/ n b))) b))\n         (* (tri_num (bigint (/ n c))) c)))))","user":"56bb652ae4b0f26550335953"},{"problem":148,"code":"(fn [w b c] (let [a (dec w) d (* b c) x (quot a b) y (quot a c) z (quot a d) f #(/ (*' % (inc %)) 2)] (- (+ (*' b (f x)) (*' c (f y))) (*' d (f z)))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn tbd [n a b]\n  (let [pr (* a b)\n        q (bigint (quot n pr))\n        l (filter #(or (= 0 (mod % a)) (= 0 (mod % b))) (range 1 (inc pr)))\n        s (apply + l)\n        c (count l)\n        p #(< % n)]\n  (if (zero? q)\n    (apply + (take-while p l))\n    (+ (* q s)\n       (* pr (/ (* (dec q) (+ 1 (dec q))) 2) c)\n       (apply + (filter #(< % n) (map #(+ % (* q pr)) l)))))))","problem":148,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":148,"code":"(fn [n a b]\n  (let [max-n (dec n)\n        double-sum (fn [x] (*' (inc (quot max-n x)) (- max-n (rem max-n x))))]\n    (/ (+' (double-sum a) (double-sum b) (- (double-sum (* a b))))\n       2)))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn uno [n a b]\n  (let \n    [n1 (dec n)\n     sn (fn [m] (/ (* m (inc m)) 2))\n     sm (fn [k m]\n         (* k (sn  (quot m k))))]\n   (- (+ (sm a n1) (sm b n1))\n     (sm (* a b) n1))))","problem":148,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn subdivisors-sum [n a b] \n  (letfn [(subsums [n a] (let [q (quot n a)] (-' (*' (/ (*' q (inc q)) 2) a) (if (zero? (rem n a)) (*' q a) 0))))] \n    (- (+ (subsums n a) (subsums n b)) (subsums n (* a b)))))","problem":148,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [n a b]\n    (let [s (fn [x] (/ (*' x (inc x)) 2))]\n      (-'\n       (+' (*' a  (s (quot (dec n) a)))\n          (*' b  (s (quot (dec n) b))))\n       (*' a b (s (quot (dec n) (* a b)))))))","problem":148,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn [n a b]\n  (let [f (fn [x] \n            (if (< x n)\n              (let [h x, m (quot n x), t (*' x m)]\n                (prn h m t)\n                (if (= t n)\n                  (/ (*' (dec m) (+' h (- t x))) 2)\n                  (/ (*' m (+' h t)) 2)\n                )\n              )\n              0\n            )\n          )\n       ]\n    (- (+' (f a) (f b)) (f (*' a b)))\n  ) \n )","problem":148,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn [n a b]\n  (let [x (- n 1)\n        sumsof #(* (+ 1 (quot x %))\n                   (/ (- x (rem x %)) 2))]\n   (- (+ (sumsof a) (sumsof b))\n      (if (< n (* a b)) 0 (sumsof (* a b))))))","problem":148,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn [x a b]\n  (let [m1 (long (/ (- x 1) a))\n        m2 (long (/ (- x 1) b))\n        m3 (long (/ (- x 1) (* a b)))\n        ]\n        (-\n          (+\n            (/ (* a (* m1 (+ m1 1))) 2)\n            (/ (* b (* m2 (+ m2 1))) 2)\n          )\n          (/ (* a b (* m3 (+ m3 1))) 2)\n        )\n  )\n)","problem":148,"user":"4f84400de4b033992c121c2e"},{"code":"(fn [n a b] \n  (let [f (fn [d]\n            (let [m (quot (dec n) d)]\n              (* d (/ (* m (inc m)) 2))))]\n(- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4e14108c535d04ed9115e7dd"},{"problem":148,"code":"(fn [n a b] \n    (let [k (bigint (Math/floor (/ (dec n) a)))\n          t (bigint (Math/floor (/ (dec n) b)))\n          m (bigint (Math/floor (/ (dec n) (* a b))))]\n\n    (+ \n        (/ (* (+ k 1) k a) 2)\n        (/ (* (+ t 1) t b) 2)\n        (- (/ (* (+' m 1) m a b) 2)))))","user":"53a94b63e4b047364c044434"},{"code":"(fn big-divide [n a b]\n\t(let [sum-to (fn sum-to [x m]\n\t\t\t\t\t(let [n (quot m x)]\n\t\t\t\t\t(/ (*' x n (+ 1 n)) 2)))]\n\t\t(- (+ (sum-to a (dec n)) (sum-to b (dec n))) \n\t\t\t(sum-to (* a b) (dec n)))))","problem":148,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn [n a b] \n  (let [f (fn [x] \n            (let [y (quot (dec n) x)] \n              (* (inc y) (* x (/ y 2)))))] \n  (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [n0 a b]\n  (letfn [(sum [n x]\n            (let [y (quot n x)\n                  r  (rem n x)]\n              (if (zero? r) (/ (*' (dec y) (+' x (*' x (dec y)))) 2)\n                  (/ (*' y (+' x (*' x y))) 2))))]\n    (-' (+' (sum n0 a) (sum n0 b)) (sum n0 (*' a b)))))","problem":148,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [n a b]\n  (let [zbob (fn [x]\n               (let [m (quot (dec n) x)]\n                 (*' x m (inc m) 1/2)))]\n    (- (+ (zbob a) (zbob b)) (zbob (* a b)))))","problem":148,"user":"525f51bde4b0cb4875a45dc8"},{"code":"(fn big-divide [n a b]\n   (letfn [(sum-n [n]\n              (/ (*' n (inc n)) 2))\n           (sum-divisible [n x]\n              (*' x (sum-n (quot (dec n) x))))]\n     (-' (+' (sum-divisible n a)\n             (sum-divisible n b))\n         (*' (sum-divisible n (* a b))))))","problem":148,"user":"50812debe4b01a93d3f38e4c"},{"problem":148,"code":"(fn big-divide\n  [n x y]\n  (let [aprog (fn [x]\n                (let [n (-' n 1)\n                      max-x (-' n (mod n x))]\n                  (+' (/ (*' (quot n x) (+' x max-x)) 2))))]\n    (+' (aprog x)\n        (aprog y)\n        (-' (aprog (*' x y))))))","user":"4dc0ff08535d020aff1edf84"},{"problem":148,"code":"(fn ff\n  [s a1 a2]\n  (let [sa (dec (bigint s)) a3 (* a1 a2) qa1 (quot sa a1) qa2 (quot sa a2) qa3 (quot sa a3)]\n    (-\n    (+\n     (/ (* (inc qa1) (+ 0 (* qa1 a1))) 2)\n     (/ (* (inc qa2) (+ 0 (* qa2 a2))) 2))\n     (/ (* (inc qa3) (+ 0 (* qa3 a3))) 2)\n     )))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn [n a b]\n  (let [ triangle_number (fn [n] (/ (* n (inc n)) 2))\n         p (triangle_number (bigint (/ (dec n) a )))\n         q (triangle_number (bigint (/ (dec n) b )))\n         r (triangle_number (bigint (/ (dec n) a b)))\n         ]\n    (+ (* p a) (* q b) (- 0 (* r a b)))))","problem":148,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn bigdiv [n a b]\n  (letfn [(sumto [x] (/ (* (bigint x) (inc x)) 2))\n          (smu [x] (* x (sumto (quot (dec n) x))))]\n    (- (+ (smu a) (smu b)) (smu (* a b)))))","problem":148,"user":"51e00020e4b01188f0627534"},{"code":"#(reduce + \n         (map \n          (fn [a b]\n            (if (<= %1 a) 0\n              (* (+ (* (quot (dec %1) a) a) a) 1/2 (quot (dec %1) a) b)))\n          [%2 %3 (* %2 %3)] [1 1 -1])\n         )","problem":148,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":148,"code":"(fn [n a b]\n  (let [m (dec n)\n        l (* a b)\n        u (biginteger (/ m a))\n        v (biginteger (/ m b))\n        w (biginteger (/ m l))]\n    (letfn [(s [x y] (*' x (* y (inc y)) (/ 2)))]\n      (+' (s a u) (s b v) (s (- l) w)))))","user":"53e91473e4b036ad0777e495"},{"problem":148,"code":"(fn big-divide[n cp1 cp2]\n    (letfn [(sum-n [n] (/ (* n (inc n)) 2) )\n           (big-divide-1 [n cp] (* cp (sum-n (quot (dec (bigint n)) cp)))  )] \n     (+ (big-divide-1 n cp1)\n        (big-divide-1 n cp2)\n        (- (big-divide-1 n (* cp1 cp2)))\n     )\n))","user":"59a0262ee4b0871e7608b82d"},{"code":"(fn [n x y]\n  (let [ gcd (fn [x y]\n               (if\n                 (= x y)\n                 x\n                 (if\n                   (< x y)\n                   (recur x (- y x))\n                   (recur y (- x y)))))\n         lcm (fn [x y]\n               (/ (* x y) (gcd x y)))\n         n (bigint (dec n))\n         xt (quot n x)\n         yt (quot n y)\n         xr (* (/ (* x (inc xt)) 2) xt)\n         yr (* (/ (* y (inc yt)) 2) yt)\n         z (lcm x y)\n         zt (quot n z)\n         zr (* (/ (* z (inc zt)) 2) zt)]\n    (- (+ xr yr) zr)))","problem":148,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn [n a b]\n  (let [sumx (fn [x] \n      (let [nx (long (/ (dec n) x))] (* nx (+ nx 1) x 1/2))\n      )]\n  (- (+ (sumx a) (sumx b)) (sumx (* a b)))))","problem":148,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn [n a b]\n        (let [\n            d (fn [a] (let [r (mod n a) q (quot n a)] (if (= 0 r) (dec q) q)))\n            p (fn [t] (/ (* (bigint t) (inc t)) 2))\n            s (fn [a] (* a (p (d a))))\n        ]\n        (+ (s a) (s b) (- (s (* a b))))))","problem":148,"user":"51f59607e4b0abb92f97f9d5"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(multiples-under-n [x]\n            (quot (dec n) x))\n          (sum-under-n [x]\n            (let [z (multiples-under-n x)]\n              (*' x (/ (*' z (inc z))\n                      2))))]\n    (-' (+' (sum-under-n a)\n          (sum-under-n b))\n      (sum-under-n (*' a b)))))","user":"52951156e4b02ebb4ef7501b"},{"code":"(fn [n a b]\n   (let [a (bigint a)\n         b (bigint b)\n         fldiv  (fn [a b] (if (= 0 (mod a b))\n                                 (dec (quot a b))\n                                 (quot a b)))\n         big-a  (fldiv n a)\n         big-b  (fldiv n b)\n         a-tot  (/ (* a big-a (+ big-a 1)) 2)\n         b-tot  (/ (* b big-b (+ big-b 1)) 2)\n         ab     (* a b)\n         big-ab (fldiv n ab)\n         ab-tot (/ (* ab big-ab (+ big-ab 1)) 2)]\n   (- (+ a-tot b-tot) ab-tot)))","problem":148,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn [n a b]\n  (letfn [(sigma [n x] (let [c (bigint (/ (dec n) x))] (* 1/2 c (+ (* (dec c) x) x x))))]\n    (+ (sigma n a) (sigma n b) (- (sigma n (* a b))))\n  )\n)","problem":148,"user":"5176afd2e4b085adf681d889"},{"code":"(fn [n a b]\n                 (let [sum-naturals (fn [x] (/ (* x (inc x)) 2))\n                       sum-dividable (fn [d] (* d (sum-naturals (quot (dec n) d))))]\n                   (- (+ (sum-dividable a) (sum-dividable b)) (sum-dividable (* a b)))))","problem":148,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"code":"(fn [n a b]\n  (let [quotc (fn [n x] (quot (dec n) x))\n        sum (fn [n a] (*' n (inc n) a 1/2))\n        x (sum (quotc n a) a)\n        y (sum (quotc n b) b)\n        z (sum (quotc n (* a b)) (* a b))]\n    (+ (- x z) y)))","problem":148,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn [f L a b]\n(- (+ (f a L) (f b L)) (f (* a b) L)))\n#(let [q (quot (- %2 1) %)]\n(/ (* % q (+ 1 q)) 2))","problem":148,"user":"4db858d1535d1e037afb218c"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [n a]\n  (if (integer? (/ n a)) (*' a (/ (*' (/ n a) (-' (/ n a) 1)) 2))\n    (*' a (/ (*' (bigint (/ n a)) (+' (bigint (/ n a)) 1)) 2))))]\n    (-' (+' (f n a) (f n b)) (f n (*' a b)))))","user":"558378dce4b05c286339e115"},{"code":"(fn [n a b]\n  (letfn [(sn [l]\n            (let [k (quot (dec n) l) ak (*' k l)]\n              (/ (*' k (+' l ak)) 2)))]\n    (-' (+' (sn a) (sn b)) (sn (*' a b)))))","problem":148,"user":"4efd8b67535de96065cf5085"},{"code":"(fn[n a b] (let[max (dec n) sum #(*' (/ (+ % (- max (mod max %))) 2) (quot max %))] (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"5093ca51e4b097f48cc38585"},{"problem":148,"code":"(fn[num, div1, div2] \n    (let [myTotal \n          (fn getTotal [maxNum, x]\n            (let [division (quot maxNum x)\n              remainder (rem maxNum x)\n              totalBase (+' maxNum x)\n              totalBaseGroupings (quot division 2)\n              middleToAdd (*' x (inc totalBaseGroupings))\n              total (*' totalBase totalBaseGroupings)\n              ]\n              (if (zero? remainder)\n                (if (even? division)\n                  total\n                  (+' total middleToAdd)\n                )\n                (getTotal (*' x division) x)\n              ))\n          )\n        ]\n      (-' (+' (myTotal (dec num) div1) (myTotal (dec num) div2)) (myTotal (dec num) (*' div1 div2)))\n    )\n           \n  )","user":"571172ece4b09c608db70446"},{"code":"(fn [n a b]\n   (letfn [(sum-multiples [m lim]\n                          (let [max-mult (bigint (/ lim m))]\n                            (* (+ m (* m max-mult))\n                               (/ max-mult 2))))]\n     (apply + \n            (map #(%2 (sum-multiples % (dec n)))\n                 [a b (* a b)]\n                 [+ + -]))))","problem":148,"user":"50f48298e4b004d364930527"},{"problem":148,"code":"(fn [n a b] (let [f #(* %2 (/ (* %1 (inc %1)) 2))\n                    a  (bigint a)\n                    b  (bigint b)\n                    n  (dec n)\n                    sa (f (quot n a) a)\n                    sb (f (quot n b) b)\n                    sc (f (quot n (* a b)) (* a b))\n                    ] (+ sa sb (- sc))))","user":"549375e4e4b0b312c081ff4e"},{"code":"; cf http://en.wikipedia.org/wiki/Arithmetic_series#Sum : n/2 [2a1 + (n-1)d]\n(fn [n a b]\n  (let [sumdiv (fn [x] (let [n (bigint (quot (dec n) x))]\n                         (/ (* n (+ (* 2 x) (* (dec n) x))) 2)))]\n  (- (+ (sumdiv a) (sumdiv b))\n     (sumdiv (* a b)))))","problem":148,"user":"500900dee4b0144d4f561e42"},{"problem":148,"code":"(fn p148 [n a b]\n  (let [psum (fn [n x]\n               (let [term (quot (dec n) x)]\n                 (quot (*' term (+ (* term x) x)) 2)))]\n    (- (+' (psum n a) (psum n b)) (psum n (* a b)))))","user":"57fe836ee4b0d3187e9009d2"},{"problem":148,"code":"(fn f [end a b] \n  (let [sum-series #(let [n (quot (dec end) %)] (*' (quot (*' n (inc' n)) 2) %))]\n    (+' (sum-series a) (sum-series b) (-' (sum-series (* a b))))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn [a b c] (let [f #(quot (*' % (inc (quot (dec a) %)) (quot (dec a) %)) 2)] (- (+ (f b) (f c)) (f (* b c)))))","problem":148,"user":"52c6a0abe4b0c2d177d62111"},{"problem":148,"code":"(fn [x y z]\n  (let [[a b c] (map bigint [x y z])\n        lcm (fn [x y]\n              (let [a (if (< x y) x y)\n                    b (if (< x y) y x)]\n                (first (filter #(if (= 0 (+ (rem % a)(rem % b))) true false )(range a (inc (* a b)))))))\n        bl (if (= 0 (rem a b)) (- a b) (- a (rem a b)))\n        bn (if (= 0 (rem a b)) (- (quot a b) 1) (quot a b))\n        cl (if (= 0 (rem a c)) (- a c) (- a (rem a c)))\n        cn (if (= 0 (rem a c)) (- (quot a c) 1) (quot a c))\n        bc0 (lcm b c)\n        bcl (if (= 0 (rem a bc0)) (- a bc0)(- a (rem a bc0)))\n        bcn (if (= 0 (rem a bc0))(- (quot a bc0) 1) (quot a bc0))\n        sb (/ (* (+ b bl) bn) 2)\n        sc (/ (* (+ c cl) cn) 2)\n        sbc (/ (* (+ bc0 bcl) bcn) 2)]\n    (- (+ sb sc) sbc)))","user":"566d71b1e4b0a866af6896ca"},{"code":"(fn [n a b] ; a test of algebra, not programming\n  (letfn [(smut [number]\n          (let [how-many (inc (quot (dec n) number))]\n            (*' number (quot (*' how-many (dec how-many)) 2))))]\n    (+' (smut a) (smut b) (-' (smut (*' a b))))))","problem":148,"user":"506ab9bae4b05d3b7762c74c"},{"problem":148,"code":"(fn bigdiv2 [n a b]\n  (let [ab (*' a b)\n        numma (-' (quot n a) (if (= (rem n a) 0) 1 0))\n        nummb (-' (quot n b) (if (= (rem n b) 0) 1 0))\n        nummab (-' (quot n ab) (if (= (rem n ab) 0) 1 0))\n        meanma (/ (+' a (if (= (rem n a) 0) (-' n a) (-' n (rem n a)))) 2)\n        meanmb (/ (+' b (if (= (rem n b) 0) (-' n b) (-' n (rem n b)))) 2)\n        meanmab (/ (+' ab (if (= (rem n ab) 0)\n                            (-' n ab)\n                            (-' n (rem n ab)))) 2)]\n    (-' (+' (*' numma meanma) (*' nummb meanmb)) (*' nummab meanmab))))","user":"5f8b06afe4b0715f5002d74a"},{"code":"(fn [n a b]\n   (letfn [(sum [n] (-> (inc n) (* n) (/ 2)))]\n     (let [m (dec n)\n           ab (* a b)]\n       (- (+ (* a (sum (quot m a)))\n             (* b (sum (quot m b))))\n          (* ab (sum (quot m ab)))))) \n   )","problem":148,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn f[n a b]\r\n  (let [\r\n        max-mul (fn[n div] (bigint(/ (dec n) div))) \r\n        maxa (max-mul n a) \r\n        maxb (max-mul n b) \r\n        maxab (max-mul n (* a b))\r\n        sum1n (fn [n] (* (+ 1 n) n 1/2))\r\n        sum1n-nodiv (fn [n div] (- (sum1n n) (* div (sum1n (bigint (/ n div))))))]\r\n  (+\r\n    (* a (sum1n-nodiv maxa b))\r\n    (* b (sum1n-nodiv maxb a))\r\n    (* a b (sum1n maxab))\r\n  )\r\n))","problem":148,"user":"4f245d77e4b0d66497709feb"},{"problem":148,"code":"(fn [N a b]\n  (letfn [(sum-series-between [k upper-bound]\n            (let [last-element (*' (bigint k) (quot upper-bound k))\n                  number-of-elements (inc (/ (-' last-element k) k))]\n              (prn last-element number-of-elements)\n              (/ (* number-of-elements (+' k last-element)) 2)))]\n    (let [N (dec N)]\n      (-' (+' (sum-series-between a N) (sum-series-between b N))\n         (sum-series-between (*' a b) N)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(ya-sum [num]\n            (if (even? num) (* (inc num) (quot num 2)) (* num (quot (inc num) 2N))))]\n    (-\n      (+\n        (* a (ya-sum (quot (dec n) a)))\n        (* b (ya-sum (quot (dec n) b))))\n(* (* a b) (ya-sum (quot (dec n) (* a b)))))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":148,"code":"(fn bd [n a b]\n  (let [nums\n        [a b (* a b)]\n        \n        [ta tb tab]\n        (->> nums\n             (map #(bigint (/ (dec n) %)))\n             (map #(bigint (/ (* (inc %) %) 2)))\n             (map * nums)) ]\n    (-  (+ ta tb) tab)))","user":"58e37946e4b005f69f193cae"},{"code":"(fn [n a b] \n   (let [\n         decn (dec n)\n         na (/ (- decn (rem decn a)) a)\n         nb (/ (- decn (rem decn b)) b)\n         ab (* a b) \n         nab (/ (- decn (rem decn ab)) ab)\n         ] \n     (/ \n      (+' \n       (*' a na (inc na)) \n       (*' b nb (inc nb))\n       (*' -1 ab nab (inc nab)))\n      2)))","problem":148,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn [n a b]\n  (apply +\n\t\t(map \n\t\t\t#(let [m (Math/abs (quot (dec n) %))] (* m (inc m) % 1/2)) \t\t\t\t\t\n\t\t\t[a b (- (* a b))])))","problem":148,"user":"4db85282535d1e037afb218a"},{"code":"(fn [n x y]\n  (letfn [(f [n x]\n               (let [m (+ 0N (quot (dec n) x))]\n                   (* x (/ (* m (inc m)) 2))\n                   ))]\n      (- (+ (f n x) (f n y)) (f n (* x y)))))","problem":148,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [sum (fn [div]\n              (let [x (quot (dec n) div)]\n                       (/ (*' div x (inc x)) 2)))]\n    (- (+ (sum a)\n          (sum b))\n       (sum (* a b)))))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [n a b]\n       (let [fast-sum-range-step (fn [to step]\n                                   (let [nf (long (Math/ceil (/ to step)))\n                                         nsum (/ (* nf (- nf 1)) 2)]\n                                     (* nsum step)))]\n         (+\n          (fast-sum-range-step n a)\n          (fast-sum-range-step n b)\n          (* -1 (fast-sum-range-step n (* a b))))))","problem":148,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (letfn [(num-of-terms [x] (quot (dec n) x))\n          (a1 [x] x)\n          (an [x] (* x (num-of-terms x)))\n          (sum-of-ap\n            [x]\n            (/ (*' (num-of-terms x) (+ (a1 x) (an x))) 2))]\n    (-> (sum-of-ap a)\n      (+ (sum-of-ap b))\n      (- (sum-of-ap (* a b))))))","user":"5401aefbe4b0df28a13c62c7"},{"code":"(fn [m a b]\n  (let [e #(bigint (quot (- m 1) %))\n        f #(* % (/ (* (e %) (inc (e %))) 2))\n        x (f a)\n        y (f b)\n        z (f (* a b))]\n    (- (+ x y) z)))","problem":148,"user":"4db8f6c4535d1e037afb219e"},{"problem":148,"code":"(fn [n a b]\n   (let [f #(let [q (quot (dec %2) %)] (/ (*' q (+ % (*' q %))) 2))]\n     (- (+ (f a n) (f b n))\n        (f (* a b) n))))","user":"4dc986d0535d5973398f9285"},{"problem":148,"code":"#(letfn [(S [n] (quot (*' n (inc n)) 2))\n         (F [n] (*' (S (quot (dec %) n)) n))]\n   (+ (F %2) (F %3) (- (F (* %2 %3)))))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":148,"code":"(fn sum-sub [n a b]\n  (letfn [(sum-under\n            [n a]\n            (let [m (if (= (mod n a) 0)\n                      (dec (quot n a))\n                      (quot n a))]\n              (* a (* (/ m 2) (inc m)))))]\n    (-  (+ (sum-under n a)\n           (sum-under n b))\n        (sum-under n (* a b)))))","user":"5283a919e4b0239c8a67adbe"},{"problem":148,"code":"(fn [n a b]\n  ((fn [[x y z]] (- (+ x y) z))\n   (map #(let [x (- (quot n %)\n                    (if (zero? (mod n %)) 1 0))]\n           (/ (*' x (+ x 1) %) 2))\n        [a b (* a b)])))","user":"5504dd64e4b086ebe8a79c83"},{"problem":148,"code":"(fn [a b c]\n  (let [getsum (fn [x y]\n                 (if (> x y)\n                   (let [anq (first (filter #(zero? (mod % y)) (iterate dec (dec x))))]\n                     (bigint(* (/ (bigint(+ y anq)) 2) (inc (/ (- anq y) y))))\n                     )\n                   0\n                   )\n                 )]\n    (bigint(- (+ (getsum a b) (getsum a c)) (getsum a (* b c))))\n    )\n  )","user":"5ea7b04de4b00a66d4a951b6"},{"problem":148,"code":"(fn [limit a b]\n  (letfn [(pa [limit x]\n              (/ (* (quot limit x) (+ x (* x (quot limit x)))  ) 2))]\n   \t(let [limit (bigint (- limit 1)) a (bigint a) b (bigint b)]\n      (- (+ (pa limit a) (pa limit b)) (pa limit (* a b))))))","user":"5626447fe4b00e49c7cb47bd"},{"code":"(fn [a b c]\n  (let [get-sum (fn [m s]\n                    (let [l (*' (quot (dec' m) s) s)\n                          n (+' (/ (-' l s) s) 1)]\n                      (/ (*' n (+' l s)) 2)))]\n    (+' (get-sum a b) (get-sum a c) (-' (get-sum a (* b c))))))","problem":148,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"(fn\n  [n a b]\n  (let [f #(bigint (dec (Math/ceil (/ n %))))\n        ma (f a)\n        mb (f b)\n        mab (f (* a b))\n        sa (/ (* a ma (inc ma)) 2)\n        sb (/ (* b mb (inc mb)) 2)\n        sab (/ (* a b mab (inc mab)) 2)]\n    (- (+ sa sb) sab)))","problem":148,"user":"51852961e4b0da5a5be3babb"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(solve-series-for [diff]\n            (let [upto (dec n)\n                  length (quot upto diff)\n                  first diff\n                  last (- upto (mod upto diff))]\n              (* (/ length 2) (+ first last))))]\n    (+ (solve-series-for a) (solve-series-for b) (- (solve-series-for (* a b))))))","user":"5344fe13e4b084c2834f4a32"},{"problem":148,"code":"(fn [m a b]\n    (let [m (dec m)\n          sum #(* (/ (quot % %2) 2)\n                  (+ %2 (- %1 (rem %1 %2)))\n               )]\n      (+\n        (sum m a)\n        (sum m b)\n        (- (sum m (* a b)))\n       )\n      )\n    )","user":"5281a445e4b0757a1b17143a"},{"code":"(fn [n a b]\n  (let [d (dec n)\n        n1 (bigint (/ d a))\n        n2 (bigint (/ d b))\n        n3 (bigint (/ d (* a b)))\n        f #(* (/ (* (+ 1 %1) %1) 2) %2)\n        m1 (f n1 a)\n        m2 (f n2 b)\n        m3 (- (f n3 (* a b)))]\n    (+ m1 m2 m3)))","problem":148,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn big-divide [n a b]\n  (letfn [(sum-arith [start end diff]\n                     (let [n (inc (/ (- end start) diff))]\n                       (* (/ n 2) (+ (* start 2) (* (dec n) diff)))))\n          (sum-natural-arith [start limit]\n                             (sum-arith start (* start (quot (dec limit) start)) start))]\n    (+ (sum-natural-arith a n)\n       (sum-natural-arith b n)\n       (- (sum-natural-arith (* a b) n)))))","problem":148,"user":"52381b2ae4b0fae3832e99ef"},{"problem":148,"code":"(fn [n a b]\n  (apply #(+' %1 %2 (-' %3)) \n         (map #(let [q (quot n %)] \n                 (quot (*' % q (if (zero? (mod n %)) (dec q) (inc q))) 2)) [a b (*' a b)])))","user":"554680cbe4b0a04f7929953e"},{"problem":148,"code":"(fn [n a b]\n  (let [c (dec n)\n        sum #(let [y (quot % %2)\n                   s (/ (*' y (inc y)) 2)]\n                (*' s %2))]\n    (-' (+' (sum c a) (sum c b)) (sum c (*' a b)))))","user":"51e38568e4b0c611d6113e43"},{"problem":148,"code":"(fn big-divide [z x y]\n       (letfn [(sum-sequence [d]\n                  (if (= 0 (mod z d))\n                    (* (/ (dec (quot z d)) 2) (+ (* 2 d) (* (- (quot z d) 2) d)))\n                    (* (/ (quot z d) 2) (+ (* 2 d) (* (dec (quot z d)) d)))))\n               (gcd [a b]\n                  (if (= 0 b)\n                    a\n                    (recur b (mod a b))))\n               (lcm [a b]\n                  (/ (* a b) (gcd a b)))]\n         (+ (sum-sequence x) (sum-sequence y) (* -1 (sum-sequence (lcm x y))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [x]\n            (let [q (quot (dec n) x)]\n              (* 1/2 q (inc q) x)))]\n    (+ (f a) (f b) (- (f (* a b))))))","user":"4eb70649535d7eef30807373"},{"problem":148,"code":"(fn [n x y] (let [n (dec n)\n                   largest-multiple\n                   (fn [a b] (if (zero? (mod a b))\n                               a\n                               (recur (dec a) b)))\n                   f (fn [a b]\n                       (/ (* (->> (/ a b) Math/floor bigint inc) ; refactor\n                             (largest-multiple a b)) 2))]\n               (- (+ (f n x)\n                     (f n y))\n                  (f n (* x y)))))","user":"53da8fede4b0e771c30254a3"},{"problem":148,"code":"(fn foo [a b c]\n  (let [divisor1 (long (/ (- a 1N) b))\n        divisor2 (long (/ (- a 1N) c))\n        divisor3 (long (/ (- a 1N) (* b c)))\n        sum-range (fn [n] (/ (*' n (+ n 1)) 2N))]\n      (-\n        (+'\n                      (*' b (sum-range divisor1))\n                      (*' c (sum-range divisor2)))\n        \n           (*' b c (sum-range divisor3)))\n      ))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [n a b]\n  (let [c (* a b)                                   ; lcm(a,b) (because they are coprime, just multiply)\n        gauss-sum #(/ (* % (inc %)) 2)              ; the Gauss sum formula for [1+2+..n]\n        mul-num #(/ (- (dec n) (mod (dec n) %)) %)  ; times the number fits into n\n        sum-of-muls #(* % (gauss-sum (mul-num %)))] ; sum of all multiples of a number below n\n        (- (+ (sum-of-muls a) (sum-of-muls b))      ; add the sums of a and b\n               (if (< n c) 0 (sum-of-muls c)))))    ; subtract the result for c if c is < upper bound, because the multiples of the lcm(a,b) are doubled","problem":148,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [n a b]\n  (let [x #(quot (dec %1) %2)\n        y #(* (/ (* (inc %2) %2) 2) %1)\n        aa (y a (x n a))\n        bb (y b (x n b))\n        ab (y (* a b) (x n (* a b)))]\n    (+ aa bb (- ab))))","problem":148,"user":"4f32a7f1e4b0d6649770a095"},{"problem":148,"code":"(fn myf [n a b]\n  (let [n (bigint n)\n        sub (fn [n x] (if (zero? (rem n x)) (dec (quot n x)) (quot n x)))\n        lcd (fn [a b] (* a b))\n        ab (lcd a b)\n        ma (sub n a)\n        mb (sub n b)\n        mab (sub n ab)\n        asum (* a (quot (* ma (inc ma)) 2))\n        bsum (* b (quot (* mb (inc mb)) 2))\n        absum (* ab (quot (* mab (inc mab)) 2))\n        ]\n    \n    (- (+ asum bsum) absum)))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn f \n  ([x a]\n    (let [d (quot (dec x) a)]\n      (* a (/ (* d (inc d)) 2))))\n  ([x a b] \n    (- (+ (f x a) (f x b)) (f x (* a b)))))","problem":148,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn cal [nn x y]\n  (let [n (dec nn) \n        f (fn [k] \n            (let [kk (quot n k)] \n              (* (/ (* 1N kk (inc kk)) 2) k))) ]\n    (- (+ (f x) (f y)) (f (* x y)))\n  )            \n)","problem":148,"user":"50bf3015e4b0a6abc6550e5b"},{"problem":148,"code":"(fn [n a b]\n   (letfn\n       [(calc [x]\n          (/ (#(* % (+ % 1) x) (bigint (/ (dec n) x))) 2)\n          )]\n\n\n     (- (+ (calc a)\n           (calc b))\n        (calc (* a b)))\n     ))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":148,"code":"(fn [n x y]\n  (let [sm (fn [n a]\n    (let [b (quot (dec n) a)]\n      (quot (*' (inc b) (*' a b)) 2)))]\n    (-' (+' (sm n x) (sm n y)) (sm n (*' x y)))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(a-divide-sum\n           [a]\n           (let [divisible-count (quot (dec (bigint n)) a)]\n             (* (/ (* (+ 1 divisible-count) divisible-count) 2) a)))]\n    (+ (a-divide-sum a) (a-divide-sum b) (- (a-divide-sum (* a b))))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"; I haven't yet learned about Clojure's native BigInts, so here's a cheap\r\n; solution using Java BigIntegers\r\n(fn [n a b]\r\n  (let [n* (new BigInteger (str n))\r\n        a* (new BigInteger (str a))\r\n        b* (new BigInteger (str b))\r\n        m (.multiply a* b*)\r\n        upper-n (.subtract n* (BigInteger/ONE))\r\n        TWO (.add (BigInteger/ONE) (BigInteger/ONE))\r\n        sum (fn [lower mult]\r\n          (let [upper (.subtract upper-n (.mod upper-n mult))\r\n                card (-> (.subtract upper lower) (.divide mult) (.add (BigInteger/ONE)))]\r\n            (-> (.add upper lower) (.multiply card) (.divide TWO))))]\r\n    (+ (sum (BigInteger/ZERO) a*)\r\n       (sum (BigInteger/ZERO) b*)\r\n       (- (sum (BigInteger/ZERO) m)))))","problem":148,"user":"4e691c79535d8ccf87e9fe97"},{"problem":148,"code":"(fn [n a b]\n  (let [sum (fn [n d]\n              (let [n (quot n d)]\n                (*' d (/ (*' n (inc n)) 2))))]\n    (- (+ (sum (dec n) a)\n          (sum (dec n) b))\n       (sum (dec n) (* a b)))))","user":"5cf895efe4b0b71b1d808a85"},{"problem":148,"code":"(fn tbd [nn a b]\n     (let [sumundr (fn [n] (/ (*' n (inc n)) 2))\n           sumpart (fn [n i] (- (*' i (sumundr (quot n i))) (if (zero? (mod n i)) n 0)))]\n       (+' (sumpart nn a)\n          (sumpart nn b)\n          (* -1 (sumpart nn (*' a b))))))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn\t[n a b]\n\t(let [n2 (dec n)\n\t      ma (quot n2 a)\n\t      mb (quot n2 b)\n\t      c (* a b)\n\t      mc (quot n2 c)]\n\t  (+' (*' a (/ (*' ma (inc ma)) 2))\n\t     (*' b (/ (*' mb (inc mb)) 2))\n\t     (-' (*' c (/ (*' mc (inc mc)) 2))))))","problem":148,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [n a b]\n  (letfn [(f [l a]\n                      (let [n (quot (dec l) a)\n                            an (+ a (* (- n 1) a))]\n                        (* (/ n 2) (+ a an))))]\n    (- (+ (f n a) (f n b)) (f n (* a b)))))","problem":148,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn big2 [n a b] \n  (letfn [(sum [n x] \n               (let [x-div (bigint (if (= 0 (rem n x)) (dec (quot n x)) (quot n x)))] \n                 (* x (/ (* x-div (inc x-div)) 2N))))] \n    (- (+ (sum n a) (sum n b)) (sum n (* a b)))))","problem":148,"user":"50733b31e4b0e3170b5a869a"},{"problem":148,"code":"(fn [n a b]\n  (let [n (bigint (dec n))\n        sum #(quot (* % (inc %)) 2)\n        x (* a (sum (quot n a)))\n        y (* b (sum (quot n b)))\n        z (* -1 a b (sum (quot n (* a b))))]\n    (+ x y z)))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":148,"code":"(fn\n  [n a b]\n  (letfn [(sum-under [v x] (* x (/ (let [q (bigint (Math/floor (/ (dec v) x)))] (* q (inc q))) 2)))]\n    (- (+ (sum-under n a) (sum-under n b)) (sum-under n (* a b)))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":148,"code":"(fn [n a b]\n  (let [n' (dec' n) a' (quot n' a) b' (quot n' b) ab (*' a b) ab' (quot n' ab)]\n    (-' (+' (*' a (/ (*' a' (inc' a')) 2))\n          (*' b (/ (*' b' (inc' b')) 2)))\n       (*' ab (/ (*' ab' (inc' ab')) 2)))))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n m]\n            (let [n (if (zero? (rem n m)) (dec n) n) ; need strictly less than\n                  h (quot n m)]                      ; upper limit of summation\n              (* m (quot (* h (inc h)) 2))))]        ; m * summation\n    (let [n (bigint n)]\n      (- (+ (sum n a) (sum n b)) (sum n (* a b)))))) ; inclusion/exclusion","user":"53576356e4b04ce2eb3ed27a"},{"problem":148,"code":"(fn [n a b]\n  (let [ra (* 1N (quot (dec n) a))\n        rb (* 1N (quot (dec n) b))\n        rc (* 1N (quot (dec n) (* a b)))\n        sa (/ (* ra (inc ra)) 2)\n        sb (/ (* rb (inc rb)) 2)\n        sc (/ (* rc (inc rc)) 2)\n        y (+ (* sa a) (* sb b) (* sc a b -1))]\n    y\n  ))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":148,"code":"(fn [n a b]\n (letfn [(f [n] (/ (*' n (inc n)) 2))\n         (g [x] (f (quot (dec n) x)))]\n  (-> (*' a (g a))\n   (+ (*' b (g b)))\n   (- (*' a b (g (* a b)))))))","user":"5b61aa6ae4b0c6492753e712"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sumt [n a]\n            (let [q (quot (dec n) a)\n                  l (* a q)]\n              (/ (*' q (+ a l)) 2)))]\n  (- (+' (sumt n a) (sumt n b)) (sumt n (*' a b)))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(num [x] (quot (dec n) x))\n          (sum [x] (*' x (quot (*' (num x) (inc (num x))) 2)))]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"58b51e05e4b0ebc645576d4c"},{"problem":148,"code":"(fn [n a b]\n (let [m (dec n)\n       f #(/ (*' (quot m %) (+' % (-' m (rem m %)))) 2)]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"5590e55de4b0277789237676"},{"code":"(letfn [(sum [n d] (let [t (quot (dec n) d)] (* (/ t 2) (+ (* 2 d) (* (dec t) d)))))]\n     #(+ (sum % %2) (sum % %3) (- (sum % (* %2 %3)))))","problem":148,"user":"50996a38e4b0cae2931060b3"},{"problem":148,"code":"(fn [limit a b]\n  (letfn [(get-sum [v]\n            (let [cnt (quot (dec limit) v) \n                  sum (* (/ cnt 2) (+ 2 (dec cnt)))]\n              (* v sum)))]\n    (- (+ (get-sum a) (get-sum b)) (get-sum (* a b)))))","user":"56018dd4e4b04bb52996e18f"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [sum-n (fn [x] (/ (*' x (+' x 1)) 2))\n        sum-mult-to (fn [x] (*' (sum-n (quot (- n 1) x)) x))]\n    (-' (+' (sum-mult-to a) (sum-mult-to b)) (sum-mult-to (* a b)))))","user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn [n a b]\n  (let [d #(bigint (/ (- n 1) %))\n        g #(* (/ (* (d %) (+ 1 (d %))) 2) %)]\n    (- (+ (g a) (g b)) (g (* a b)))))","problem":148,"user":"4ee82539535d93acb0a66878"},{"code":"(fn[n a b] \n    (let[mx (dec n) \n         na (quot mx a) \n         la (* na a) \n         nb (quot mx b) \n         lb (* nb b) \n         ab (* a b) \n         nab (quot mx ab) \n         lab (* nab ab) \n         f-sum (fn[x nx lx](/ (* 1N nx (+ x lx)) 2))] \n      (- (+ (f-sum a na la) (f-sum b nb lb)) (f-sum ab nab lab))\n      )\n    )","problem":148,"user":"52e68e61e4b09f7907dd1479"},{"problem":148,"code":"(fn f [n a b]\n  (let [n (dec n)\n        i (long (/ n a))\n        i (/ (*' i (inc i)) 2)\n        j (long (/ n b))\n        j (/ (*' j (inc j)) 2)        \n        k (long (/ n (* a b)))\n        k (/ (*' k (inc k)) 2)]\n    (- (+ (*' i a) (*' j b)) (*' k a b))))","user":"5799ff45e4b05b1deef9add1"},{"problem":148,"code":"(fn [n a b] \n  (let [f #(let [d (quot (dec n) %)] (*' d (+ % (* d %)) 1/2))]\n    (+ (f a) (f b) (- (f (* a b))))))","user":"4faf97d8e4b081705acca258"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [num-multiples #(quot (dec n) %)\n        sum-multiples #(*' % (num-multiples %) (inc (num-multiples %)) 1/2)]\n    (- (+ (sum-multiples a) (sum-multiples b)) (sum-multiples (* a b)))))","user":"5879d577e4b01531a375ead8"},{"problem":148,"code":"(fn big-divide [n a b]                                                                                              \n  (let [*n (dec n)                                                                                                    \n        sum-nth #(/ (* % (inc %))  2)                                                                                 \n        sumA->nth (* a (sum-nth (bigint (/ *n a))))                                                                   \n        sumB->nth (* b (sum-nth (bigint (/ *n b))))                                                                   \n        ab (* a b)                                                                                                    \n        sumAB->nth (* ab (sum-nth (bigint (/ *n ab))))]                                                               \n    (- (+ sumA->nth sumB->nth) sumAB->nth)))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":148,"code":"(fn big-divide [n a b]\n                     (let [sum-of-multiples (fn [n a]\n                                              (let [quot-a (quot (dec n) a)]\n                                                (*' a (/ (*' quot-a (inc quot-a)) 2))))]\n                       (- (+ (sum-of-multiples n a) \n                             (sum-of-multiples n b))\n                          (sum-of-multiples n (* a b)))))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [n a b]\n  (- (apply - (for [d [(* a b) a b]\n                    :let [m (quot (- n 1) d)]]\n                (*' d m (+ m 1) 1/2)))))","problem":148,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(letfn [(presum [x] (/ (* x (inc x)) 2))\n        (divsum [x a] (* a (presum (quot (dec x) a))))\n        (bigdivide [x a b] (let [x (bigint x)] (- (+ (divsum x a) (divsum x b)) (divsum x (* a b)))))]\n    bigdivide)","problem":148,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [n x y] (letfn [(divs [n x y] (filter #(= 0 (* (rem % x) (rem % y))) (range 1 n)))\n                             (sum [d] (reduce + d))]\n                       (let [xy (* x y)\n                             qt (quot n xy)\n                             d (divs (inc xy) x y)\n                             msum (sum d)\n                             num (count d)\n                             rd (divs (rem n xy) x y)\n                             rnum (count rd)\n                             rsum (sum rd)\n                             qtsum (* qt msum)\n                             qtrangesum (/ (* (bigint qt) (bigint (dec qt))) 2)\n                             ]\n                         (+ qtsum rsum (* rnum qt xy) (* xy (bigint num) (bigint qtrangesum)))\n                         )\n                       ))","problem":148,"user":"52c1bd29e4b07a9af579236a"},{"problem":148,"code":"(fn bigdivide\n  [n a b]\n  (letfn [(gcd [a b] (if (zero? b) a (gcd b (mod a b))))\n          (lcm [a b] (quot (*' a b) (gcd a b)))\n          (banyak [a lim] (quot (dec lim) a))\n          (deret [a b lim] (quot (*' (banyak a lim) (+' (*' 2 a) (*' (dec (banyak a lim)) b))) \n                                    2))]\n    (-' (+' (deret a a n)\n          (deret b b n))\n       (let [c (lcm a b)]\n         (deret c c n)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":148,"code":"(fn [n a b]\n  (let [ ab    (*' a b)\n         n-1   (dec' n)\n         numA  (bigint (/ n-1 a))\n         numB  (bigint (/ n-1 b))\n         numAB (bigint (/ n-1 ab))\n         half  (/ 1N 2N)\n         sumA  (*' a  numA  (inc' numA)  half)\n         sumB  (*' b  numB  (inc' numB)  half)\n         sumAB (*' ab numAB (inc' numAB) half)\n       ]\n    (+' sumA sumB (-' sumAB))))","user":"4f29d9abe4b0d6649770a034"},{"code":"(fn big-div [n a b]\n  (letfn [(sum-of [n]\n            (/ (* n (+ n 1)) (bigint 2)))]\n    (let [a' (let [aq (quot n a)]\n               (bigint (if (zero? (rem n a))\n                 (dec aq)\n                 aq)))\n          b' (let [bq (quot n b)]\n               (bigint (if (zero? (rem n b))\n                 (dec bq)\n                 bq)))\n          ab' (let [abq (quot n (* a b))]\n                (bigint (if (zero? (rem n (* a b)))\n                  (dec abq)\n                  abq)))]\n      (- (+ (bigint (* a (sum-of a')))\n            (bigint (* b (sum-of b'))))\n            (bigint (* (* a b) (sum-of ab')))))))","problem":148,"user":"4dd62278535d2dad7130b5c7"},{"problem":148,"code":"(fn __ [n a b]\n  (letfn [(sum-mults [n x]\n            (let [n (bigint n)\n                  x (bigint x)]\n              (if (<= n x)\n                0\n                (let [q (quot n x)\n                      m (mod n x)\n                      s (* q\n                           (/ (+ x (- n m)) 2))]\n                  (if (= m 0) (- s n) s)))))]\n    (+ (sum-mults n a) (sum-mults n b) (- (sum-mults n (* a b))))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(ssum [x]\n            (let [nx\n                  (quot (dec n) x)]\n              (quot (*' x nx (inc nx))\n                    2)))]\n    (- (+ (ssum a)\n          (ssum b))\n       (ssum\n        (* a b)))))","user":"54246fcce4b01498b1a71aed"},{"problem":148,"code":"(fn [n f1 f2]\n  (let [div1 (if (= (rem n f1) 0) (quot (- n f1) f1) (quot n f1))\n        div2 (if (= (rem n f2) 0) (quot (- n f2) f2) (quot n f2))\n        div3 (if (= (rem n (* f1 f2)) 0) (quot (- n (* f1 f2)) (* f1 f2)) (quot n (* f1 f2)))\n        sum3 (* (* f1 f2) (* (inc div3) (/ div3 2)))\n        totalSum (+ (* f1 (* (inc div1) (/ div1 2))) (* f2 (* (inc div2) (/ div2 2))))]\n    (- totalSum sum3)\n    ))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [w y z] (let [x (- w 1)\n                  a (long (/ x y))\n                  b (long (/ x z))\n                  c (* y z)\n                  d (long (/ x c))]\n               (- (+ (* y a (/ (+ 1 a) 2)) (* z b (/ (+ 1 b) 2))) (* c d (/ (+ 1 d) 2)))))","problem":148,"user":"4eb44d78535d7eef30807360"},{"problem":148,"code":"(fn\n  [n a b]\n  (let [n (- n 1)\n        ab (* a b)\n        n-div-a (quot n a)\n        n-div-b (quot n b)\n        n-div-ab (quot n (* a b))\n        identity-formula (fn [n v] (* (/ v 2) n (+ n 1)))]\n    (+ (identity-formula n-div-a a)\n       (identity-formula n-div-b b)\n       (- (identity-formula n-div-ab ab)))))","user":"5125029de4b0ce9225d2ed3e"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(sum [v]\n             (let [q (quot (dec (bigint n)) v)]\n               (* v (/ (* q (inc q)) 2))))]\n     (- (+ (sum (bigint a)) (sum (bigint b))) (sum (* (bigint a) (bigint b))))\n     ))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn func [n a b]\r\n  (let [a1  (quot (dec n) a)\r\n        b1  (quot (dec n) b)\r\n        ab  (quot (dec n) (* a b))\r\n        sumA  (* a       (* a1 (+ (/ 1 2) (/ a1 2))))\r\n        sumB  (* b       (* b1 (+ (/ 1 2) (/ b1 2))))\r\n        sumAB (* (* a b) (* ab (+ (/ 1 2) (/ ab 2))))]\r\n    (- (+ sumA sumB) sumAB)))","problem":148,"user":"505dd5c4e4b0e6aca564be0e"},{"code":"(fn [n a b]\n    (letfn [(sum\n              [n m]\n              (let [x (quot (dec n) m)]\n                (* (/ (* x (inc x)) 2) m)))]\n           (- (+ (sum n a) (sum n b)) (sum n (* a b)))))","problem":148,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":148,"code":"(fn [m a b]\n    (let [xn #(* (quot (- m 1) %) %)\n          fcn #(+ (/ (- (xn %) %) %) 1)\n          fcs #(* (/ (fcn %) 2) (+ % (xn %)))]\n      (+ (fcs a)\n         (fcs b)\n         (- (fcs (* a b))))))","user":"544e8369e4b0e39780006987"},{"problem":148,"code":"(fn [n a b]\n  (let [count-div #(quot (dec n) %)\n        sum-div #(*' % (/ (*' (count-div %) (inc (count-div %))) 2))]\n    (-' (+' (sum-div a) (sum-div b)) (sum-div (* a b)))))","user":"55a74d46e4b09e57187da2a3"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(f [a]\n             (let [m (bigint (/ (- n 0.1) a))]\n               (+ (* m a) (* m (dec m) a 1/2))\n               ))]\n     (- (+ (f a) (f b)) (f (* a b)))\n     )\n\n   )","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn [a b c]\r\n  (let [sum-up-to \r\n    (fn [n d] \r\n     (let [n-div-d (quot (dec (bigint n)) d)]\r\n      (/ (* d n-div-d (inc n-div-d)) 2)))]\r\n    (- \r\n      (+ (sum-up-to a b) (sum-up-to a c))\r\n      (sum-up-to a (* b c)))\r\n      ))","problem":148,"user":"502a9fdee4b095a7adb898b4"},{"problem":148,"code":"(fn _148 [n a b]\n  (let [ab (* a b)\n        n (dec n)\n        s (fn [x]\n            (let [qx (quot n x)]\n              (/ (*' (+ 1 qx) qx x) 2)))]\n    (- (+ (s a) (s b)) (s ab))))","user":"557c6ca6e4b05c286339e0c4"},{"code":"(fn [n a b]\n   (let [sum (fn [n] (/ (*' n (dec n))2))\n         sumdividers (fn [n a]\n   (let [r (rem n a)\n         q (quot n a)\n         m (if (zero? r) q (inc q))]\n    (*' a (sum m))))\n         sa (sumdividers n a)\n         sb (sumdividers n b)\n         sab (sumdividers n (* a b))]\n     (+ sa sb (- sab))))","problem":148,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [x]\n             (let [x-count (bigint (quot (dec n) x))\n                   x-max (* x x-count)]\n               (-> x\n                   (+ x-max)\n                   (* x-count)\n                   (/ 2))))]\n    (-> (f a)\n        (+ (f b))\n        (- (f (* a b))))))","user":"559b2ad1e4b066d22e731f4e"},{"problem":148,"code":"(fn x[n a b](letfn [(xx [a](*' a (quot (*' (quot (dec n) a) (inc (quot (dec n) a))) 2)))]\n                        (+' (-' (xx a) (xx (* a b))) (xx b))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s [k] (/ (*' k (inc k)) 2))\n          (f [m] (*' m (s (quot (dec n) m))))]\n    (+' (f a) (f b) (-' (f (* a b))))))","user":"52ce1abfe4b07d0d72b27389"},{"code":"(fn [x a b]\n    (letfn [(t [n] (/ (* n (inc n)) 2))\n            (t- [n f] (* f (t (bigint (Math/floor (/ (dec n) f))))))]\n      (- (+ (t- x a) (t- x b))\n         (t- x (* a b)))))","problem":148,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [l a b]\n  (let [u (dec l)\n        [aa bb ab]\n        (map \n          #(let [e (quot u %)](quot (* e (+ 1 e) %) 2))\n          [a b (* a b)])]\n    (- (+ aa bb) ab)))","problem":148,"user":"4eb5750a535d7eef30807366"},{"code":"(fn [n a b]\n  (->> [(* a b) a b]\n       (map (fn [x] (let [m (quot (dec n) x)] (*' m (inc m) x 1/2))))\n       (apply -)\n       -))","problem":148,"user":"50479524e4b0371827a27bc4"},{"code":"(fn [^Long n a b]\n    (letfn [(d [^Long n] (/ (* n (inc n)) 2))\n            (dd [^Long n a] (* a (d (bigint (/ (dec n) a)))))]\n      (- (+ (dd n a) (dd n b)) (dd n (* a b)))))","problem":148,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":148,"code":"(fn [n a b]\n  (let [sum-to\n        (fn [n a]\n          (let\n            [top (- (dec n) (mod (dec n) a))]\n            (*' (/ top a) (/ (+' top a) 2))))]\n    (-' (+' (sum-to n a) (sum-to n b)) (sum-to n (*' a b)))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn even-div? [n a b]\n  (let [ab (* a b)\n        [x y xy]\n        (map (comp #(* (inc %) (/ % 2))\n                   (partial quot (dec n)))\n             [a b ab])]\n    \n    (- (+ (* a x)\n          (* b y))\n       (* ab xy))))","problem":148,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [n a b]\n  (let [e #(quot (- n 1) %)\n        f #(*' % (/ (*' (e %) (inc (e %))) 2))\n        x (f a)\n        y (f b)\n        z (f (*' a b))]\n       (- (+ x y) z)))","problem":148,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn [n a b]\n  (let [f #(let [x (quot (- n 1) %)]\n               (*' % (*' x (+ x 1) 1/2)))]\n    (+ (f a) (f b) (- (f (* a b))))))","problem":148,"user":"4dada16fc9a9d6ed2699dc57"},{"code":"(fn bd\n  [n a b]\n  (let [n (dec n)\n        multsum (fn [m x] (*' x m (/ (inc m) 2)))\n        c (* a b)]\n    (+' (multsum (quot n a) a)\n        (multsum (quot n b) b)\n        (* -1 (multsum (quot n c) c)))))","problem":148,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn [n a b]\n  (let [div-sum (fn [n k]\n                  (let [c (bigint (quot n k))]\n                    (quot (* k c (inc c)) 2)))]\n    (+\n      (div-sum (dec n) a)\n      (div-sum (dec n) b)\n      (- (div-sum (dec n) (* a b))))))","problem":148,"user":"527cd633e4b0757a1b17136f"},{"problem":148,"code":"(fn [n a b]\n  (let [sum-multiples \n        (fn [x] \n          (let [y (quot (dec n) x)]\n            (*' x (/ (*' y (inc y)) 2))))]\n    (- (+ (sum-multiples a) (sum-multiples b) ) (sum-multiples (* a b)))))","user":"54febf4be4b07d26eda61d45"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s-n-n [n a]\n            (let [aq (quot n a)\n                  ar (rem n a)]\n              (if (zero? ar)\n                (* (/ n 2N) (dec aq))\n                (* (/ (* a (inc aq)) 2N) aq))))]\n    (- (+ (s-n-n n a) (s-n-n n b)) (s-n-n n (* a b)))))","user":"5eb1c786e4b00a66d4a95201"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [as (bigint (/ (dec n) a))\n        bs (bigint (/ (dec n) b))\n        ab (* a b)\n        abs (bigint (/ (dec n) ab))]\n    (println \"as: \" as \"; bs: \" bs \"; abs: \" abs)\n    (- (+ (* a as (inc as) (/ 1 2))\n          (* b bs (inc bs) (/ 1 2)))\n       (* ab abs (inc abs) (/ 1 2)))))","user":"53791ab7e4b06839e8705e4d"},{"problem":148,"code":"(fn [a b c]\n   (letfn [(sq [n m]\n            (* m (/ (* n (+ n 1)) 2)))]\n    (let [a' (bigint (dec a))\n          b' (bigint (quot a' b))\n          c' (bigint (quot a' c))\n          d' (bigint (quot a' (* b c)))\n          ]\n      (-\n       (+ (sq b' b) (sq c' c))\n       (sq d' (* b  c))))))","user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn [n a b]\n    (let [gauss (fn [x] (/ (* x (+ x 1)) 2))\n          gsum (fn [x] (* x (gauss (quot (dec n) x))))]\n      (- (+ (gsum a) (gsum b))\n         (gsum (* a b)))))","problem":148,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [lim a b]\n  (letfn [(summ [x]\n            (let [n (quot (dec lim) x)]\n              (*' (/ (*' n (inc n)) 2) x)))]\n    (- (+' (summ a) (summ b)) (summ (*' a b)))))","problem":148,"user":"5164867fe4b003cf19fdde3e"},{"problem":148,"code":"(fn [n a b]\n  (let [x-sum (fn [limit x]\n                (/ (* (quot limit x) (+ x (- limit (mod limit x)))) 2)) \n        n' (bigint (dec n))\n        a-sum (x-sum n' a)\n        b-sum (x-sum n' b)\n        ab-sum (x-sum n' (* a b))]\n    (+ a-sum b-sum (- ab-sum))))","user":"554bd33ce4b0a04f7929959a"},{"problem":148,"code":"(fn [n a b]\n  (let [e #(quot (- n 1) %)\n        f #(*' % (/ (*' (e %) (inc (e %))) 2))\n        x (f a)\n        y (f b)\n        z (f (*' a b))]\n       (-' (+' x y) z)))","user":"561a1af6e4b053970a773b02"},{"code":"(fn [up a b]\n  (letfn [(g [up a] (let [b (quot (dec up) a)]\n                      (* a (/ (* b (inc b)) 2))))]\n    (let [up (bigint up) a (bigint a) b (bigint b)]\n      (- (+ (g up a) (g up b)) (g up (* a b))))))","problem":148,"user":"508157b2e4b0946d0443855c"},{"problem":148,"code":"(fn [n x y]\n   (letfn [(sums [a]\n             (let [q (quot (dec n) a)\n                   qt-sum (quot  (*' q (inc q)) 2)]\n               (*' qt-sum a)))] (-' (+' (sums x) (sums y)) (sums (*' x y)) )))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":148,"code":"(fn [n a b] (let [ma (* a (quot (dec n) a)) mb (* b (quot (dec n) b)) ab (* a b) mab (* ab (quot (dec n) ab)) sumn (fn [a b d] (* (+ a b) (/ (+ (- b a) d) (* 2 d))))] (- (+ (sumn a ma a) (sumn b mb b)) (sumn ab mab ab))))","user":"5abe2fc2e4b073f17744271e"},{"problem":148,"code":"(fn big-div [n a b] (let [trisum (fn [m] (/ (* (inc m) m) 2))\n                  divsum (fn [m k] (* k (trisum (bigint (/ m k)))))]\n  (- (+ (divsum (dec n) a) (divsum (dec n) b)) (divsum (dec n) (* a b)))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":148,"code":"(fn sum-with-divisors\n  [n pa pb]\n  (let [sum-n (fn sum-n\n                [n]\n                (/ (*' n (inc n)) 2))\n        sum-n-x (fn sum-n-x\n                  [n x]\n                  (let [n (if (zero? (rem n x)) (dec n) n)]\n                    (*' (sum-n (quot n x)) x)))]\n    (- (+ (sum-n-x n pa) (sum-n-x n pb)) (sum-n-x n (* pa pb)))))","user":"5c92105ce4b048ec896c59f7"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(n-sum [x limit]\n        (let [n-val (quot limit x)]\n          (if (pos? n-val)\n            (-> (inc n-val) (*' n-val) (/ 2) (*' x) bigint)\n            0)))]\n(let [limit (dec n)]\n  (-> (+' (n-sum a limit) (n-sum b limit))\n      (-'  (n-sum (*' a b) limit))))))","user":"5ae0976be4b0837691e92c43"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(bd-part [n x]\n            (let [nx (bigint (quot (dec n) x))]\n              (* x (quot (* nx (inc nx)) 2))))]\n    (+ (bd-part n a)\n       (bd-part n b)\n       (- (bd-part n (* a b))))))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn div [n a b]\n  (let [sn #(/ (* % (+ % 1)) 2)\n        f #(* (sn (quot (dec %) %2)) %2)]\n    (- (+ (f n a) (f n b)) (f n (* a b)))))","problem":148,"user":"4ecbb249535df97575fdabdf"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [x]\n            ;; Compute sum of multiples of x less than n.\n            ;;\n            ;; Count of multiples is truncated integer (n-1)/x.\n            ;; Get Guass sum of 1..cnt: (cnt/2)(cnt+1).\n            ;; Multiply Guass sum by x to get result.\n            ;;\n            (let [cnt (quot (dec n) x)]\n              (*' x\n                  (/ cnt 2)\n                  (inc cnt))))]\n\n    ;; Add the sum of multiples of a to the sum of multiples of b.\n    ;; Subtract the sum of multiples of (a*b) to discard redundant values.\n    ;;\n    (- (+ (f a) (f b))\n       (f (* a b)))))","user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn big-div[n a b]\n  (let [n (dec n) a1 (bigint (/ n a)) b1 (bigint (/ n b)) com (bigint (/ n (* a b)))]\n    (- (+ (/ (* a a1 (inc a1)) 2) (/ (* b b1 (inc b1)) 2)) (/ (* a b com (inc com)) 2))))","problem":148,"user":"5065bd94e4b0148eb3925aed"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n] (/ (*' n (inc' n)) 2))\n          (div [x] (sum (quot (dec' n) x)))]\n    (-> (*' a (div a))\n        (+ (*' b (div b)))\n        (- (*' a b (div (*' a b)))))))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":148,"code":"(fn [n a b]\n  (let [last-divisible (fn [factor]\n                         (->> (iterate dec (dec n))\n                              (filter #(= 0 (mod % factor)))\n                              (first)))\n        arith-series (fn [factor]\n                       (let [last (last-divisible factor)\n                             c (/ last factor)]\n                         (/ (*' c (+' factor last)) 2)))]\n    (- (+ (arith-series a)\n          (arith-series b))\n       (arith-series (* a b)))))","user":"530b8580e4b02e82168697cc"},{"problem":148,"code":"(fn number148 [n a b]\n  (letfn [(partial-sum [n a1 an] (-> (+' a1 an) (*' n) (/ 2)))\n          (find-sum [x]\n                    (let [q (quot (dec n) x)]\n                      (partial-sum q x (* x q))))]\n    (- (+ (find-sum a) (find-sum b))\n       (find-sum (* a b)))))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn [m a b]\r\n  (let [k (bigint (- m 1))]\r\n    (letfn [(f [x]\r\n              (* (/ (+ x (- k (rem k x))) 2) (quot k x)))]\r\n\r\n      (- (+ (f a) (f b)) (f (* a b))) )))","problem":148,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [n a b]\n  (let [c (fn [n x] (if (= 0 (rem n x)) (- (quot n x) 1) (quot n x)))\n        n1 (c n a) v1 (* (/ (* n1 (+ n1 1N)) 2) a)\n        n2 (c n b) v2 (* (/ (* n2 (+ n2 1N)) 2) b)\n        n3 (c n (* a b)) v3 (* (/ (* n3 (+ n3 1N)) 2) a b)]\n    (- (+ v1 v2) v3)))","problem":148,"user":"514721c6e4b0d520409ed392"},{"code":"#(let [d (dec %1)\n       ca (quot d %2)\n       cb (quot d %3)\n       cab (quot d (* %2 %3))\n       sum (fn [n] (* 1/2 n (inc n)))]\n   (- (+ (* %2 (sum ca)) (* %3 (sum cb))) (* %2 %3 (sum cab))))","problem":148,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":148,"code":"#(letfn [(s \n            [n a] \n            (let [c (quot (dec n) a)]\n              (quot (*' c (+' a (*' c a))) 2)))]\n    (-' (+' (s %1 %2) (s %1 %3)) (s %1 (*' %2 %3))))","user":"576df252e4b0979f8965156f"},{"code":"(fn [n a b]\n  (let [n (bigint n)\n        f (fn f [x n]\n            (let [close (mod n x)\n                  mult (- n close)\n                  count (/ mult x)\n                  sum (/ (* count (inc count)) 2)\n                  result (* sum x)]\n              result))\n        n (dec n)]\n\n    (- (+ (f a n) (f b n)) (f (* a b) n))))","problem":148,"user":"51383346e4b0a5db03d727d4"},{"problem":148,"code":"(fn\n  [n a b]\n  (let [m (dec n)\n        c (*' a b)\n        qa (quot m a)\n        qb (quot m b)\n        qc (quot m c)]\n    (quot (-' (+' (*' qa (inc qa) a)\n                  (*' qb (inc qb) b))\n              (*' qc (inc qc) c))\n          2N)))","user":"52dfc89be4b09f7907dd1405"},{"problem":148,"code":"(fn bd [n a b]\n  (letfn [(find-div [n d]\n                    (if (= 0 (rem n d)) n (recur (dec n) d)))\n          (sum-step [n s]\n                    (let [ndiv (find-div (dec n) s)]\n                      (/ (* ndiv (+ ndiv s)) (* 2 s))))]\n    (- \n      (+ (sum-step (bigint n) a) (sum-step (bigint n) b))\n      (sum-step (bigint n) (* a b)))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn [limit a b]\n  (let [sum (fn [x] (/ (*' x (inc x)) 2))\n        count-factors (fn [x] (quot (dec limit) x))\n        sum-factors (fn [x] (*' x (sum (count-factors x))))]\n    (+' (sum-factors a) \n        (sum-factors b) \n        (- (sum-factors (* a b))))))","problem":148,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [n a b]\n  (let [_sum (memoize (fn [a b](/ (* (inc (-  b a)) (+ a b)) 2)))\n        _listSum (fn [max seed]\n   (if (>= seed max) 0\n   (loop [cur 1N n_cur max]\n    (let [m (quot (+ cur n_cur) 2) s1 (* m seed) s2 (* (inc m) seed)]\n       (if (< s1 max)\n           (if (>= s2 max) \n                (* seed (_sum 1 m))\n                (recur m n_cur)\n           )\n           (recur cur m)\n       )\n    )\n   )\n   )\n)]\n      (- (+ (_listSum n (bigint a)) (_listSum n (bigint b))) (_listSum n (bigint (* a b))))\n  )\n)","problem":148,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn [n a b]\n (let [f #(let [m (quot (dec n) %)] (*' % m (inc m) 1/2))]\n   (+' (f a) (f b) (-' (f (* a b))))))","problem":148,"user":"52b453b0e4b0c58976d9ad21"},{"problem":148,"code":"#(letfn [(f [d]\n           (let [x (quot (dec %1) d)]\n             (/ (*' d x (inc x)) 2)))]\n   (- (+ (f %2) (f %3))\n      (f (* %2 %3))))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn bigdivide [before div1 div2]\n    (let [max-qty (fn [factor] (bigint (/ (dec before) factor)))\n          sum-for (fn [div] (let [m (max-qty div)]\n                                (* div (/ (* m (inc m)) 2))))]\n      (- (+ (sum-for div1) (sum-for div2)) (sum-for (* div1 div2)))))","problem":148,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [n a b]\n    (letfn [(sum-arithmetic-series [last step]\n              (let [n-elements (inc (quot last step))]\n                (/ (* n-elements last) 2)))]\n      (let [n (bigint (dec n))]\n        (- (+ (sum-arithmetic-series (- n (rem n a)) a)\n              (sum-arithmetic-series (- n (rem n b)) b))\n           (sum-arithmetic-series (- n (rem n (* a b))) (* a b))))))","problem":148,"user":"50bca033e4b0594b91591c5d"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n]\n               (/ (* n (inc n)) 2))\n          (sum-to-n-by-x [n x]\n                    (* x (sum (bigint (/ (dec n) x)))))]\n    (- (+ (sum-to-n-by-x n a)\n          (sum-to-n-by-x n b))\n       (sum-to-n-by-x n (* a b)))\n      ))","user":"50f10f7be4b06d9538fe211a"},{"problem":148,"code":"(fn bigdivide [n a b]\n\t(let [f (fn [m x]\n\t\t(*\n\t\t\tx\n\t\t\t(/\n\t\t\t\t(*\n\t\t\t\t\t(bigint (quot m x))\n\t\t\t\t\t(inc (quot m x))\n\t\t\t\t)\n\t\t\t\t2\n\t\t\t)\n\t\t)\n\t)]\n\t\t(-\n\t\t\t(+ (f (dec n) a) (f (dec n) b))\n\t\t\t(f (dec n) (* a b))\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [n a b]\n  (letfn [(f [k]\n             (let [u (bigint (/ (dec n) k))]\n               (* k u (inc u) 1/2)))]\n    (+ (f a) (f b) (- (f (* a b))))))","problem":148,"user":"52753740e4b03e8d9a4a74c1"},{"problem":148,"code":"(fn [n a b]\n  (let [mult (* a b)\n        base-range (range 1 (+ 1 mult))\n        divider? (fn [x y] (= 0 (mod x y)))\n        filter-f #(or (divider? % a)  (divider? % b))\n        filtered-base-range (filter filter-f base-range)\n        base-sum (reduce + filtered-base-range)\n        base-count (count filtered-base-range)\n        \n        quotient (quot n mult)\n        trailed-sum (* quotient (+ base-sum (* mult base-count (- quotient 1) 1/2)))\n        remain-sum (reduce + (filter filter-f (range (+ 1 (* mult quotient)) n)))]\n    (+ trailed-sum remain-sum)))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn prob-0148\n  [x a b]\n  (let [lim (dec x)\n        ab     (* a b)\n        quo-a  (bigint (/ lim a ))\n        quo-b  (bigint (/ lim b ))\n        quo-ab (bigint (/ lim ab))\n        sum-a  (-> (* quo-a  (inc quo-a )) (/ 2) (*  a))\n        sum-b  (-> (* quo-b  (inc quo-b )) (/ 2) (*  b))\n        sum-ab (-> (* quo-ab (inc quo-ab)) (/ 2) (* ab))]\n    (-> (+ sum-a sum-b) (- sum-ab))))","problem":148,"user":"4f047c07535dcb61093f6bcd"},{"code":"(fn [n a b]\n    (let [s (fn [n a] (let [t (bigint (quot (dec n) a))] (/ (* a t (inc t))  2)))]\n      (+ (s n a) (s n b) (- (s n (* b a))))))","problem":148,"user":"503b6995e4b07a1917cc34dd"},{"problem":148,"code":"(fn big-divide\n  [top a b]\n  (let [c (* a b)\n        a-mult (bigint (/ (dec top) a))\n        b-mult (bigint (/ (dec top) b))\n        c-mult (bigint (/ (dec top) c))\n        a-sum (-> a-mult (* (inc a-mult)) (/ 2) (* a))\n        b-sum (-> b-mult (* (inc b-mult)) (/ 2) (* b))\n        c-sum (-> c-mult (* (inc c-mult)) (/ 2) (* c))]\n    (- (+ a-sum b-sum) c-sum)))","user":"4fc524aae4b081705acca37e"},{"problem":148,"code":"#(let\n     [n (bigint (dec %1)) a %2 b %3\n      ssum ( fn ssum [k] (/ (* k (inc k)) 2))\n      mysum ( fn mysum [m k] (let [q (quot m k)] (* (ssum q) k))) ]\n   (- (+ (mysum n a) (mysum n b)) (mysum n (* a b)) ))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn [n a b]\n  (letfn [(borne-max [n b] (loop [curr (dec b)] (if (zero? (rem curr n)) curr (recur (dec curr)))))\n          (sum-1-borne [n] (* n 1/2 (inc n)))\n          (sum-multiple-of-n [n max] (let [borne (borne-max n max) sum (sum-1-borne (/ borne n))] (* n sum)))]\n    (- (+ (sum-multiple-of-n a n) (sum-multiple-of-n b n)) (sum-multiple-of-n (* a b) n))))","problem":148,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [n a b]\n    (letfn [(sum-of-arithmetic-progression [x d]\n              (/ (* d x (+ x 1)) 2))]\n      (let [n-1 (dec n)]\n        (- (+ (sum-of-arithmetic-progression (quot n-1 a) a)\n              (sum-of-arithmetic-progression (quot n-1 b) b))\n           (let [ab (* a b)]\n             (sum-of-arithmetic-progression (quot n-1 ab) ab))))))","problem":148,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":148,"code":"(fn [lim a b]\n  (let [numb-a (quot (dec (bigint lim)) a)\n        numb-b (quot (dec (bigint lim)) b)\n        numb-c (quot (dec (bigint lim)) (* a b))\n        sum-a (* a (/ (* numb-a (inc numb-a)) 2))\n        sum-b (* b (/ (* numb-b (inc numb-b)) 2))\n        sum-c (* (* a b) (/ (* numb-c (inc numb-c)) 2))\n        res (+ sum-a sum-b (- sum-c))]\n    res))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":148,"code":"(fn [n a b]\n(let [e #(quot (- n 1) %)\nf #(*' % (/ (*' (e %) (inc' (e %))) 2))\nx (f a)\ny (f b)\nz (f (*' a b))]\n(- (+' x y) z)))","user":"53664e3be4b0243289761e74"},{"problem":148,"code":"(fn [n a b]\n         (letfn [(sum-to [k] (* k (/ (+ 1 k) 2)))\n                 (sum-x-multiples [n x]\n                   (let [k (bigint (/ (- n 1) x))]\n                     (* x (sum-to k))))]\n           (bigint (- (+ (sum-x-multiples n a) (sum-x-multiples n b))\n              (sum-x-multiples n (* a b))))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn big-divide [n a b]\n        (let* [n (bigint (dec n)) s (fn [m] (/ (* m (inc m)) 2))\n               a (bigint a) b (bigint b) p (quot n a)\n               x (s p) y (s (quot n b))]\n          (+ (* x a)\n             (* y b)\n             (- (* (s (quot p b)) (* a b))))))","problem":148,"user":"4f031eac535dcb61093f6a67"},{"problem":148,"code":"(fn [n x y]\n  (let [a #(quot (dec n) %)\n        b #(/ (*' % (a %) (inc (a %))) 2)]\n    (- (+ (b x) (b y)) (b (* x y)))))","user":"5ff709e4e4b06df49cee149b"},{"code":"(fn big-devide\n  [n a b]\n  (let [n (bigint n)\n        n1 (quot (dec n) a)\n        n2 (quot (dec n) b)\n        n3 (quot (dec n) (* a b))]\n    (-\n      (+\n        (/ (* a n1 (inc n1)) 2)\n        (/ (* b n2 (inc n2)) 2))\n      (/ (* (* a b) n3 (inc n3)) 2))))","problem":148,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn [n a b]\n            (let [g (quot n a)\n                  h (quot n b)\n                  p (* a b)\n                  i (quot n p)\n                  u (if (= 0 (mod n a)) (- g 1) g )\n                  v (if (= 0 (mod n b)) (- h 1) h )\n                  w (if (= 0 (mod n p)) (- i 1) i )\n                  sa (* a (/ (* u (+ 1 u)) 2))\n                  sb (* b (/ (* v (+ 1 v)) 2))\n                  sc (* a b (/ (* w (+ 1 w)) 2)) ]\n                (- (+ sa sb) sc) ) )","problem":148,"user":"4ee7d177535d93acb0a6686f"},{"code":"#(let [f (fn [maxi n init result]\n            (if (> maxi n) \n                (recur maxi (+' n init) init (conj result n))\n              result))\n       f' (fn [maxi] (f maxi %2 %2 (f maxi %3 %3 #{})))\n       xnum (*' %2 %3)\n       times (quot %1 xnum)\n       cycle-set (f' (inc' xnum))\n       offset (*' xnum (count cycle-set))]\n  (+' (apply +' (map (partial +' (*' times xnum)) (f' (mod %1 xnum))))\n      (*' times (apply +' cycle-set))\n      (*' times (dec' times) 1/2 offset)))","problem":148,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn bigd [n a b] (apply + (map #(let [k (quot (dec n) (Math/abs %))] ; number of members < n\n                                    (* 1/2 k (inc k) %) \t\t\t; the sum of arithmetic progression\n                                ) [a b (* -1 a b)])))\t\t\t\t; becouse sum of ab-members counting twice (as a-members and as b-members)","problem":148,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [n a b]\n\t(let [n1 (bigint (dec n))\n\t\tg (fn [a n] (* a (/ (* n (inc n)) 2)))]\n\t\t(+ (g a (quot n1 a))\n\t\t\t(g b (quot n1 b))\n\t\t\t(- (g (* a b) (quot n1 (* a b)))))))","problem":148,"user":"520242bae4b030ee0c5b26e3"},{"code":"; I'm not sure what this is teaching me about Clojure\n  (fn [n a b]\n    (let [sumf (fn [a n]\n                 (let [c (quot (dec n) a)\n                       s (*' c (inc c) 1/2 a)]\n                   s))\n          as (sumf a n)\n          bs (sumf b n)\n          duplicates (sumf (*' a b) n)\n          total (+' as bs (- duplicates))]\n      total\n      )\n    )","problem":148,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":148,"code":"(fn no148 [a b c]\n  (let [n #(quot (-' a 1) %)\n        f #(*' % (/ (*' (n %) (inc (n %))) 2))]\n    (->> (+' (f b) (f c))\n         (-> (-' (f (*' b c)))))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":148,"code":"(fn [n a b]\n(letfn [(q [x] (quot (dec n) x))\n(cnt [x] (*' 1/2 x (q x) (inc (q x))))]\n(+ (cnt a) (cnt b) (- (cnt (* a b))))))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":148,"code":";; sum of all naturals up to n, scaled by n \n;; e.g. sigma 3*k_i is same as 3 * sigma k_i for i=1,2...,n/3 and k is the ith natural number\n;; then inclusion-exclusion principle i.e. |A ∪ B| = |A| + |B| - |A ∩ B|\n(fn big-div [n j k]\n  (let [sum-nats  (fn [x] (/ (* x (+ x 1)) 2))  \n        scale-sum (fn [x] (* (sum-nats (bigint (/ (dec n) x))) x))] \n    (- (+ (scale-sum j) (scale-sum k)) \n       (scale-sum (* j k)))))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn p148 [n a b]\n  (letfn [(sum-of [m k]\n            (let [m (quot m k)]\n              (-> (inc m) (* m) (/ 2) (* k))))]\n    (let [n (bigint (dec n))\n          a (bigint a)\n          b (bigint b)\n          x (sum-of n a)\n          y (sum-of n b)\n          z (sum-of n (* a b))]\n      (-> (+ x y) (- z)))))","problem":148,"user":"4daec9dcedd6309eace4d15f"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(tbd1 [n i]\n            (let [cnt (- (quot n i)\n                         (if (zero? (mod n i)) 1 0))]\n              (quot (*' cnt (+ i (* i cnt))) 2)))]\n    (- (+ (tbd1 n a)\n          (tbd1 n b))\n       (tbd1 n (* a b)))))","user":"4ee528fb535d1385b2869d87"},{"problem":148,"code":"(fn the-big-divide [n div-a div-b]\n  (let [a-bound (long (if (zero? (mod n div-a)) (dec (/ n div-a)) (/ n div-a)))\n        b-bound (long (if (zero? (mod n div-b)) (dec (/ n div-b)) (/ n div-b)))\n        lcm-bound (long (/ n (*' div-a div-b)))\n        summation (fn [mult bound] (/ (*' mult bound (inc bound)) 2))]\n    (- (+ (summation div-a a-bound) (summation div-b b-bound))\n       (summation (*' div-a div-b) lcm-bound))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn bigdiv [limit a b] \n  (let [sum-under (fn [a n]\n                    (let [cnt (quot (-' n 1) a)]\n                      (*' a \n                          (/ (+' (*' cnt cnt) \n                                 cnt)\n                             2))))]\n    (-' (+' (sum-under a limit) \n            (sum-under b limit)) \n        (sum-under (*' a b) limit))))","problem":148,"user":"521e8227e4b0dd19981ad082"},{"problem":148,"code":"(fn [nr ar br]\n  (let [n (bigint nr)\n        a (bigint ar)\n        b (bigint br)]\n    (letfn [(sum [n] (/ (* n (inc n)) 2))\n            (term [a] (* (sum (quot (dec n) a)) a))]\n      (+ (term a) (term b) (- (term (* a b))))\n      )))","user":"52faec2ee4b047fd55837004"},{"problem":148,"code":"(fn [n a b]\n  (let [f #(let [n2 (quot (dec n) %)]\n             (* (/ n2 2) (* % (+ 2 (dec n2)) )))\n        ]\n    (- (+ (f a) (f b)) \n       (f (* a b)))))","user":"54497569e4b032a45b8693d2"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(g [l] (let [c (quot (dec n) l)\n                       d (*' l c)] (/ (*' d (+' d l)) (*' 2 l))))]\n    (- (+' (g a) (g b)) (g (*' a b)))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":148,"code":"(fn [x a b]\n  (let [f #(let [y (quot (- x 1) %)] (/ (*' % y (+ y 1)) 2))]\n    (+ (f a) (f b) (- (f (* a b))))))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn [n a b] (let [g (fn [n] (-> 1 (+ n) (* n) (/ 2)))] \n  (apply + (->> [a b (* a b)]\n             (map #(g (quot (dec n) %)))\n             (map * [a b (- (* a b))])))))","problem":148,"user":"4e0e0529535d04ed9115e7b9"},{"problem":148,"code":"(fn [n a b] (let [\n              f #(quot (dec n) %)\n              s #(*' % (quot (*' (f %) (+' 1 (f %))) 2))] (-' (+' (s a) (s b)) (s (*' a b)))))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn [n a b]\n  (let [f #(let [k (bigint (/ (dec n) %))]\n             (* % (/ (* k (inc k)) 2)))]\n    (-\n      (+ (f a) (f b))\n      (f (* a b)))))","problem":148,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"(fn [n a b]\n  (let [n-over-a (quot (dec n) a)\n        n-over-b (quot (dec n) b)\n        ab (* a b)\n        n-over-ab (quot (dec n) ab)]\n    (-'\n     (+'\n      (*' a (+' (quot (*' n-over-a (inc n-over-a)) 2)))\n      (*' b (+' (quot (*' n-over-b (inc n-over-b)) 2))))\n     (*' ab (+' (quot (*' n-over-ab (inc n-over-ab)) 2))))))","problem":148,"user":"512d3304e4b040332b905b2d"},{"problem":148,"code":"(fn [n a b]\n  (let [sum (fn [x]\n              (let [c (quot (dec n) x)]\n                (/ (*' x c (inc c)) 2)))]\n    (- (+' (sum a) (sum b)) (sum (*' a b)))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn sum-divisible [n a b]\n  (let [sum-factors (fn sum-factors [max-div x]\n                      (*' (/ (*' max-div (inc max-div)) 2) x))\n        sum-a (sum-factors (quot (dec n) a) a)\n        sum-b (sum-factors (quot (dec n) b) b)\n        sum-a-b (sum-factors (quot (dec n) (* a b)) (* a b))]\n    (- (+ sum-a sum-b) sum-a-b)))","problem":148,"user":"51a97f7ae4b08d8ec191b827"},{"problem":148,"code":"(fn [n a b]\n    (let\n      [\n        n-big (bigint n)\n\n        sum-divisables\n        (fn [n a]\n          (let\n            [\n              n-1 (dec n)\n              n-divisibles (quot n-1 a)\n              max-divisable (* n-divisibles a)\n            ]\n            (if\n              (=\n                1\n                (mod n-divisibles 2)\n              )\n              (*\n                max-divisable\n                (inc (quot n-divisibles 2))\n              )\n              (+\n                (*\n                  max-divisable\n                  (quot n-divisibles 2)\n                )\n                (quot max-divisable 2)\n              )\n            )\n          )\n        )\n      ]\n      (-\n        (+\n          (sum-divisables n-big a)\n          (sum-divisables n-big b)\n        )\n        (sum-divisables n-big (* a b))\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":148,"code":"#(letfn [(S [x] (*' x (inc x) 1/2))\n         (N [x] (*' x (S (quot (dec %1) x))))] \n   (+' (N %2) (N %3) (- (N (* %2 %3)))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn sum-under2 [n a b]\n  (let [sum (fn [n a] (/ (* a (quot (dec n) a) (inc (quot (dec n) a))) 2))]\n    (- (+ (sum n a) (sum n b)) (sum n (* a b)))))","problem":148,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn divsum [n a b]\n\t(let [asum (fn [a d n] (-> n (-' 1) (*' d) (+' (*' a 2)) (*' n) (/ 2))) ab (*' a b) dn (dec n)]\n\t\t(+' (asum a a (quot dn a)) (asum b b (quot dn b)) (-' (asum ab ab (quot dn ab))))\n\t)\n)","problem":148,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn[x a b]\n  (letfn [\n    (cal[c d] \n      (let [dv (quot (dec c) d)\n            freq (quot dv 2)]\n          (+' (*' freq (+' d (*' dv d))) (if (odd? dv) (*' (inc freq) d) 0))))]\n    (-' (+' (cal x a) (cal x b)) (cal x (*' a b)))))","problem":148,"user":"506406c8e4b075d771da6f9f"},{"problem":148,"code":"(fn [n d1 d2]\n  (letfn [(dsum [d] (let [m (quot (dec n) d)]\n                      (*' d m (inc m) 1/2)))]\n    (+' (dsum d1) (dsum d2) (- (dsum (*' d1 d2))))))","user":"56102f50e4b05f002753df6b"},{"problem":148,"code":"(fn [n a b]\n   (let [sum-to #(/ (* (inc (bigint %)) %) 2)\n         mult-sum #(->> (quot (dec n) %) sum-to (* %))]\n     (- (+ (mult-sum a) (mult-sum b)) (mult-sum (* a b)))))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn bigdiv [n a b]\n  (let [ne (- n 0.0001) \n\t      ab (* a b)\n\t\t  acount (bigint (/ ne a))\n\t\t  bcount (bigint (/ ne b))\n\t\t  abcount (bigint (/ ne ab))\n\t\t  gensum (fn [x xcount] (* x (/ xcount 2) (+ xcount 1)))]\n\t\t (- (+ (gensum a acount) (gensum b bcount)) (gensum ab abcount))\n\t)\n)","problem":148,"user":"50588af1e4b06522596eba7d"},{"problem":148,"code":"(fn [n a b]\n    (let [calc-sum (fn [n a]\n                     (let [t (quot (dec n) a)\n                           l (*' t a)]\n                       (*' (/ (+' a l) 2) t)))\n          div-by-a (calc-sum n a)\n          div-by-b (calc-sum n b)\n          div-by-ab (calc-sum n (*' a b))]\n      (-' (+' div-by-a div-by-b) div-by-ab)))","user":"5cdc08a2e4b05ee0cb31173a"},{"code":"( fn[l x y]\n  (let [n (bigint (dec l))\n        ass (fn niv [p n] (/ (* (quot n p) (+ (* (quot n p) p) p)) 2))]\n    (- (+ (ass x n) (ass y n)) (ass (* x y) n))))","problem":148,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn [m a b]\n  (let [n (dec m)\n        s1 (quot n a)\n        s2 (quot n b)\n        s3 (quot n (* a b))\n        gs #(/ (+ % (* % %)) 2)]\n    (+ (* a (gs s1)) (* b (gs s2)) (- (* a b (gs s3))))))","problem":148,"user":"4fa30027e4b081705acca187"},{"code":"(fn [n a b]\n  (letfn [(sum [n x]\n            (let [n (dec n)\n                  q (quot n x)\n                  t (- n (mod n x))]\n              (if (even? q)\n                (*' (/ q 2) (+ x t))\n                (- (*' (/ (inc q) 2) (+ x x t)) (+ x t)))))]\n    (-\n      (+ (sum n a) (sum n b))\n      (sum n (* a b)))))","problem":148,"user":"5300158ae4b0d8b024fd370f"},{"problem":148,"code":"(fn [n & xs]\n  (letfn [(arith-sum [limit x]\n                     (let [y (quot limit x)]\n                       (if (pos? y)\n                         (-> (inc y)\n                             (*' y)\n                             (/ 2)\n                             (*' x))\n                         0)))]\n    (let [limit (dec n)]\n      (-> (reduce +' (map (partial arith-sum limit) xs))\n          (-' (arith-sum limit (reduce *' xs)))))))","user":"56481722e4b0284900eef628"},{"code":"(fn [x a b]\n  (letfn [(sumfactors [y c]\n            (let [u (if (zero? (rem y c))\n                      (dec' (/ y c))\n                      (long (/ y c)))]\n              (if (zero? u) 0\n                  (*' (/ (*' u (inc' u)) 2) c))))]\n    (-' (+' (sumfactors x a) (sumfactors x b)) (sumfactors x (*' a b)))))","problem":148,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn [n a b]\n    (letfn [(f [x]\n              (let [count (quot (dec' n) x)]\n                (-> (*' count (inc' count))\n                    (/ 2)\n                    (*' x))))]\n      (+' (f a)\n          (f b)\n          (-' (f (*' a b))))))","problem":148,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":148,"code":"(fn [n a b]\n    (let [na (quot (dec n) a)\n          nb (quot (dec n) b)\n          nab (quot (dec n) (*' a b))\n          sa (/ (*' na (inc na)) 2)\n          sb (/ (*' nb (inc nb)) 2)\n          sab (/ (*' nab (inc nab)) 2)]\n        (+ (*' a sa) (*' b sb) (*' -1 a b sab))))","user":"600ae927e4b074f607df6689"},{"problem":148,"code":"(fn [n x y]\n  (- (+ (* (/ (quot (- n 1) x) 2) (+ x (* (quot (- n 1) x) x))) \n        (* (/ (quot (- n 1) y) 2) (+ y (* (quot (- n 1) y) y)))) \n     (* (/ (quot (- n 1) (* y x)) 2) (+ (* y x) (* (quot (- n 1) (* y x)) (* y x))))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn [n a b]\n  (letfn [\n      (sum-range [x] (* (inc x) x (/ 1 2)))\n      (sum-below-n [x] (* x (sum-range (quot (dec n) x))))]\n    (+ (sum-below-n a)\n      (sum-below-n b)\n      (- (sum-below-n (* a b))))))","problem":148,"user":"4f050dec535dcb61093f6bef"},{"problem":148,"code":"(fn [lim a b]\n  (let [sum (fn [n x]\n              (let [limit (quot n x)]\n                (if (pos? limit)\n                  (*' (/ (*' limit (inc limit)) 2) x)\n                  0)))\n        lm (dec lim)]\n    (- (+' (sum lm a) (sum lm b)) (sum lm (* a b)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn p1481 [a b c]\n  (let [subfun\n        (fn subfun [n m]\n          (let [d (bigint (quot  (dec n) m))]\n            (/ (* m (* d (+ d 1))) 2)))\n        ]\n     (if (or (< a b) (< a b)) 0\n    (- (+ (subfun a b) (subfun a c)) (subfun a (* b c)) )\n    )) )","problem":148,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":148,"code":"(fn [n a b]\n  (let [A (bigint a)\n        B (bigint b)\n        f (fn [n a b] (or n (if (zero? (rem a b)) a nil)))\n        \n        [na nb nab] (loop [i (dec (bigint n)) na nil nb nil nab nil]\n                      (let [Na (f na i A) Nb (f nb i B) Nab (f nab i (* A B))]\n                        (if (and na nb nab)\n                          [na nb nab]\n                          (recur (dec i) Na Nb Nab))))\n        sa (/ (* (/ na a) (+ a na)) 2)\n        sb (/ (* (/ nb b) (+ b nb)) 2)\n        sab (/ (* (/ nab (* a b)) (+ (* a b) nab)) 2)]\n    (+ sa sb (* -1 sab))))","user":"543d5c61e4b032a45b86934d"},{"code":"(fn [n a b]\n  (letfn [\n   (ap-sum [i]\n     (let [maxn (dec n)\n           nb (inc (quot maxn i))\n           last (- maxn (rem maxn i))]\n       (* nb (/ last 2))))]\n    (- (+ (ap-sum a) (ap-sum b)) (ap-sum (* a b)))))","problem":148,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-skips [n x]\n            (* x\n               (let [n (quot (dec n) x)]\n                 (quot (* n (inc n)) 2))))]\n\n    (let [[n a b] (map bigint [n a b])]\n      (+ (sum-skips n a)\n         (sum-skips n b)\n         (- (sum-skips n (* a b)))))))","user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [n a b]\n  (let\n    [ m (dec n)\n      x (quot m a)\n      y (quot m b)\n      z (quot m (* a b))\n      g (fn [n] (/ (* (bigint n) (inc n)) 2))]\n        (- (+ (* a (g x)) (* b (g y))) (* a b (g z)))))","problem":148,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn big-divide [n a b]\n  (letfn [(sum [p]\n            (/ (*' p (inc p)) 2))\n          (F [x]\n            (*' x\n               (sum (quot (dec n)\n                          x))))]\n    (- (+ (F a) (F b))\n       (F (*' a b)))))","problem":148,"user":"530578ede4b0d8b024fd3760"},{"problem":148,"code":"(fn [n a b] \n  (let [sum-n (fn [n]\n                (/ (* (+ n 1) n) 2)\n                )\n        n (bigint (- n 1))\n        a (bigint a)\n        b (bigint b)\n        ]\n    \n    (-\n     (+ (* a (sum-n (quot n a)))\n        (* b (sum-n (quot n b)))\n        )\n     (* \n      (* a b) \n      (sum-n (quot n (* a b)))\n      )\n     )\n    )\n  )","user":"57011eb3e4b08d47c97781d1"},{"problem":148,"code":"(fn [n a b]\n    (let [g #(quot (- n 1N) %)\n          f #(/ (* % (inc (g %)) (g %)) 2)\n          x (f a)\n          y (f b)\n          z (f (* a b))]\n      (- (+ x y) z)))","user":"55c5b55fe4b0e31453f649b5"},{"problem":148,"code":"(fn [n a b] \n (letfn [(sum-up-to [n] \n           (let [ [e o] (if (even? n) [n (inc n)] [(inc n) n])]\n           (* (quot e 2) (bigint o))))\n         (sum-diveds-up-to [n a] (* a (sum-up-to (quot (dec n) a))))]\n   (- \n     (+ \n       (sum-diveds-up-to n a) \n       (sum-diveds-up-to n b)) \n     (sum-diveds-up-to n (* a b)))))","user":"50856bd1e4b004985b776e4c"},{"problem":148,"code":"(fn [max a b]\n  (let [nx (fn [x] (if (integer? (/ max x)) (-' (/ max x) 1) (long (/ max x))))\n        na (nx a)\n        nb (nx b)\n        ab (*' a b)\n        nab (nx ab)\n        sum-x (fn [x nx] (*' x (/ (*' nx (+' nx 1)) 2)))]\n     (-' (+' (sum-x a na) (sum-x b nb) ) (sum-x ab nab))))","user":"534fa9dae4b084c2834f4acf"},{"problem":148,"code":"(fn [n a b] \n  (let [m #(bigint (/ (dec n) %)) \n        ma (m a) \n        mb (m b) \n        ab (* a b) \n        mab (m ab)] \n    (- (+ (quot (* a ma (inc ma)) 2) \n          (quot (* b mb (inc mb)) 2)) \n       (quot (* ab mab (inc mab)) 2))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(tr [t] (/ (*' t (inc t)) 2))\n    (su [x c] (*' c (tr (quot (dec x) c))))]\n   (+ (su n a) (su n b) (- (su n (*' a b))))))","user":"54908cc1e4b0b312c081ff32"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(all-mult-under-n [m]\n            (let [q (if (zero? (mod n m))\n                      (dec (quot n m))\n                      (quot n m))\n                  s (-> q inc (/ 2))]\n              (*' m q s)))]\n    (- (+ (all-mult-under-n a)\n          (all-mult-under-n b))\n       (all-mult-under-n (* a b)))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [n a b]\n (let [sumup (fn [n a] (let [k (quot (dec n) a)] (* a (/ (* k (inc k)) 2))))]\n  (- (+ (sumup n a) (sumup n b)) (sumup n (* a b)))))","problem":148,"user":"4e7e3cc4535db169f9c7970a"},{"problem":148,"code":"(fn c148\n  [n a b]\n  (letfn [(sum [x]\n            (* (/ x 2) (inc x)))]\n    (let [da (* a (sum (long (/ (dec n) a))))\n          db (* b (sum (long (/ (dec n) b))))\n          dab (* (* a b) (sum (long (/ (dec n) (* a b)))))]\n      (+ (- da dab) db))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [x a b]\n  (let [sumto (fn [x] (* (inc x) x 1/2))\n        fa (if (> a x) 0 (long (/ (dec x) a)))\n        fb (if (> b x) 0 (long (/ (dec x) b)))\n        fab (if (or (> a x) (> b x)) 0 (long (/ (dec x) (* a b))))]\n    (- (+ (* a (sumto fa)) (* b (sumto fb))) (* a b (sumto fab)))))","problem":148,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [n a b]\n  (let [s-upto-m (fn [m] (/ (+' (*' m m) m) 2))\n        limit (fn [x] (let [q (quot n x)]\n                       (if (zero? (rem n x))\n                         (dec' q)\n                         q)))]\n    (-' (+' (*' a (s-upto-m (limit a)))\n            (*' b (s-upto-m (limit b))))\n        (let [cm (*' a b)]\n          (*' cm (s-upto-m (limit cm)))))))","problem":148,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn [n a b]\n  (letfn [(s [a]\n            (let [m (quot (dec n) a)]\n              (* m a 1/2 (+ 1 m))))]\n    (+ (s a) (s b) (- (s (* a b))))))","problem":148,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (let [[n a b] (map bigint [n a b])\n        tri (fn [n] (/ (* n (inc n)) 2))\n        f (fn [k n] (* k (tri (quot (dec n) k))))]\n    (- (+ (f a n) (f b n)) (f (* a b) n))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s [x] (/ (* (quot (dec n) (biginteger x)) (+ (biginteger x) (* (biginteger x) (quot (dec n) (biginteger x))))) 2))]\n    (- (+ (s a) (s b)) (s (* a b)))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":148,"code":"(fn [num d1 d2]\n  (let [get-arith-series-sum #(*' %1 (/ (*' %2 (inc %2)) 2))\n        get-cnt #(quot (dec num) %)\n        sum-d1-series (get-arith-series-sum d1 (get-cnt d1))\n        sum-d2-series (get-arith-series-sum d2 (get-cnt d2))\n        sum-overlap (get-arith-series-sum (* d1 d2) (get-cnt (* d1 d2)))]\n    (-' (+' sum-d1-series sum-d2-series)\n        sum-overlap)))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [x y z]\n    (let [a (dec (bigint x)) b (bigint y) c (bigint z) bq (quot a b) cq (quot a c) bcq (quot a (* b c)) bsum (/ (* b bq (inc bq)) 2) csum (/ (* c cq (inc cq)) 2) \n          bcsum (/ (* b c bcq (inc bcq)) 2)]\n      (print bsum csum bcsum)\n      (- (+ bsum csum) bcsum)))","problem":148,"user":"50bfe725e4b080409b860f26"},{"problem":148,"code":"(fn [n a b]\n         \n        (let [qa (quot (dec n) a)\n              qb (quot (dec  n) b)\n              qab (quot (dec n) (*' a b))\n              \n              sum\n              (fn[k] \n                (/  (*' k (inc k)) 2))]\n          (-'\n           (+'\n            (*' a (+' (sum qa))) (*' b (+' (sum qb))))\n           (*' a b (sum qab)))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":148,"code":"(fn big-divide [n s1 s2]\n  (let [sum-f (fn [step n]\n                (let [num-steps (quot (dec n) step)\n                      last-num (* num-steps step)\n                      mid-way (/ last-num 2)]\n                  (* mid-way (inc num-steps))))\n        s1-sum (sum-f s1 n)\n        s2-sum (sum-f s2 n)\n        together-sum (sum-f (* s1 s2) n)\n        ]\n    (- (+ s1-sum s2-sum) together-sum)))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [n a b]\n  (let [f (fn [n x] (quot (* (+ x (- n (mod n x))) (quot n x)) 2))]\n    (- (+ (f (dec n) a) (f (dec n) b)) (f (dec n) (* a b)))))","problem":148,"user":"4dc1ee85535d020aff1edf91"},{"code":"(fn [n p q] (letfn \n[(s [m] (*' (quot (- n 1) m)\n (/ (+ m (- (- n 1) (rem (- n 1) m))) 2)))]\n (- (+ (s p) (s q)) (s (* p q)))))","problem":148,"user":"517945dce4b0684c1c981a43"},{"problem":148,"code":"#(let [calcIntVal \n\t\t(fn [x] \n\t\t\t(let [q (quot %1 x) sq (/ (*' q (inc q) x) 2)] \n\t\t\t\t(if (zero? (mod %1 x)) (- sq %1) sq )))] \n\t\t(let [ value (+ (calcIntVal %2) (calcIntVal %3))]\n\t\t\t(if (< (* %2 %3) %1) (- value (calcIntVal (* %2 %3))) value )))","user":"57986b76e4b039eba2ecb116"},{"problem":148,"code":"(fn [n a b]\n  (letfn [ (z [x] \n   (let [\n     p (quot (bigint n) x)\n     q (bigint (* x p))\n     c (if (= q n) (dec p) p)\n     d (* c x)] \n      (/ (* d (inc c)) 2)\n         ))]\n (- (+ (z a) (z b)) (z (* a b)))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":148,"code":"(fn f [n a b]\n  (let [gcd       (fn [a b] (if (zero? b) a (recur b (mod a b))))\n        lcm       (/ (* a b) (gcd a b))\n        get-count (fn [n v] (quot (dec n) v))\n        sum       (fn [v] (*' v (inc v) 1/2))\n        s         (fn [v] (* v (sum (get-count n v))))]\n    (- (+ (s a) (s b)) (s lcm))))","user":"54a11042e4b09f271ff37c49"},{"problem":148,"code":"(fn big-divide\n  [v cp1 cp2]\n  (letfn \n    [(arithmetic-progression\n       ([a1 n]\n         (arithmetic-progression a1 n a1))\n       ([a1 n d]\n         (/ (*' n (+' (*' a1 2) (*' (dec' n) d))) 2))\n       )]\n    (let\n      [\n       v-minus-one (dec' v)\n       val1 (arithmetic-progression cp1 (quot v-minus-one cp1))\n       val2 (arithmetic-progression cp2 (quot v-minus-one cp2))\n       combo (*' cp1 cp2)\n       val3 (arithmetic-progression combo (quot v-minus-one combo))\n       ]\n      (-' (+' val1 val2) val3)\n      )\n    )\n  \n  )","user":"5c20b6abe4b07e362c230576"},{"problem":148,"code":";; Sum a*i, b*i as long as they're < n. Use the fact that\n;;   a*1 + a*2 + ... + a*r = a*(1 + ... + r) = a * r * (r + 1) / 2\n;; and correct for common multiples.\n(fn big-divide [n a b]\n  (let [qt (fn [d]\n             (let [q (quot n d)]\n               (if (zero? (rem n d))\n                 (dec q)\n                 q)))\n        qta (qt a)\n        qtb (qt b)\n        qtab (qt (*' a b))]\n    (+' (*' a (quot (*' qta (inc qta)) 2))\n        (*' b (quot (*' qtb (inc qtb)) 2))\n        (-' (*' (* a b) (quot (*' qtab (inc qtab)) 2))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(let [ \n  crunch (fn [limit x]\n    (let [n (quot (dec limit) x)]\n      (/ (* x n (+ 1 n)) 2)))\n]\n\n (fn [limit x y] (- (+ (crunch limit x) (crunch limit y)) (crunch limit (* x y)))))","problem":148,"user":"4ec07699535dfed6da9c6da2"},{"problem":148,"code":"(fn [n x y] (let [q [(quot (dec n) x) (quot (dec n) y) (quot (dec n) (* x y))] \n                  m (map #(* %2 (inc %) (/ % 2)) q [x y (* x y)])] (- (+ (first m) (second m)) (last m))))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn big-divide [n a b]\n  (letfn [(triangle [n] (/ (*' n (inc n)) 2))\n          (sum-multiples [n a] (*' a (triangle (quot (dec n) a))))]\n    (-' (+' (sum-multiples n a) (sum-multiples n b))\n       (sum-multiples n (*' a b)))))","problem":148,"user":"539a2901e4b0b51d73faaf0f"},{"code":"; Most obvious solution ;)\n; (fn [n a b] (reduce + (concat (range 0 n a) (range 0 n b) (range 0 (* -1 n) (* -1 a b)))))\n\n(fn [n a b]\n  (let [s #(let [c (quot (dec n) (Math/abs %))] (*' % c (inc c) 1/2))]\n    (->> [a b (* -1 a b)]\n         (map s)\n         (reduce +))))","problem":148,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn [n x y]\n  (let [sum (fn [d n] (/ (* n (inc n) d) 2))\n        nx  (bigint (Math/floor (/ (dec n) x)))\n        ny  (bigint (Math/floor (/ (dec n) y)))\n        xy  (* x y)\n        nxy (bigint (Math/floor (/ n xy)))\n        sx  (bigint (sum x nx))\n        sy  (bigint (sum y ny))\n        sxy (bigint (sum xy nxy))]\n    (- (+ sx sy) sxy)))","problem":148,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":148,"code":"(fn [n a b] (let [aUpper (if (zero? (mod n a)) (- n a) (- n (mod n a)))\n                   bUpper (if (zero? (mod n b)) (- n b) (- n (mod n b)))\n                   ab (* a b)\n                   abUpper (if (zero? (mod n ab)) (- n ab) (- n (mod n ab)))\n                   arithProg (fn [diff start end] (/ (*' (+' start end) (/ end diff)) 2))]\n               (-' (+' (arithProg a a aUpper) (arithProg b b bUpper)) (arithProg ab ab abUpper))\n               ))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [limit a b]\n  (let [[x y z] (map (fn aryth-sum [a]\n    (* (/ (+ a ((fn [limit a]\n      (loop [n (dec limit)]\n        (if (zero? (rem n a)) \n          n \n          (recur (dec n))))) limit a)) 2)\n    (quot (/ (dec limit) a) 1))) [a b (* a b)])]\n    (- (+ x y) z)))","problem":148,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn [n a b]\n\n  (let [n1 (dec n)\n        sum (fn [x] (/ (* x (inc x)) 2))\n        all (map #(* % (sum (quot n1 %))) [a b (* a b)])]\n    (+ (first all) (second all) (- (last all)))))","problem":148,"user":"4f29eb2ae4b0d6649770a037"},{"problem":148,"code":"(fn [max a b]\n    (let [ar-seq (fn [base]\n                   (let [cnt (quot (dec max) base)]\n                     (*' cnt (/ (+ base (* cnt base)) 2))))]\n      (+ (ar-seq a) (ar-seq b) (- (ar-seq (*' a b))))))","user":"533c2605e4b0e30313ee6cd7"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s [k] (let [m (quot (-' n 1) k)] (*' m (+' m 1) k 1/2)))]\n\t(-' (+' (s a) (s b)) (s (*' a b)))))","user":"5db92996e4b010eb3c36cd50"},{"problem":148,"code":"(fn big-div-4 [num a b]\n  (let [art-sum (fn [a1 n d]\n                  (/ (*' n (+ (* 2 a1) (* (dec n) d))) 2))\n        sum (fn [x] (art-sum x (quot (dec num) x) x))]\n    (- (+ (sum a)\n          (sum b))\n       (sum (* a b)))))","user":"527ccaf4e4b0757a1b17136d"},{"problem":148,"code":"(fn me2 [n a b]\n\n  (let [na (if (zero? (rem n a)) (dec (quot n a)) (quot n a))\n        nb (if (zero? (rem n b)) (dec (quot n b)) (quot n b)) \n        ab  (* a b)\n        nab (if (zero? (rem n ab)) (dec (quot n ab)) (quot n ab))\n       ]\n\n       (- \n          (+ (* (bigint a) (quot (* (inc (bigint na)) (bigint na)) 2)  )\n             (* (bigint b) (quot (* (inc (bigint nb)) (bigint nb)) 2)  ))\n\n          (* (bigint ab) (quot (* (inc (bigint nab)) (bigint nab)) 2)  )\n        )\n      )\n)","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [n a b]\n  (let [n (dec n)\n        gauss (fn [x] (/ (*' x (inc x)) 2))\n        ml (fn [x] (*' x (gauss (quot n x))))\n        ma (ml a)\n        mb (ml b)\n        mab (ml (*' a b))]\n    (-' (+' ma mb) mab)))","problem":148,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(arithmetic-sum [k]\n          \t(let [m (quot (dec n) k)]\n              (/ (*' k m (inc m)) 2)))]               \n  \t(- (+ (arithmetic-sum a)\n          (arithmetic-sum b))\n       (arithmetic-sum (* a b)))))","user":"529e3a4fe4b04e0c58e87b92"},{"problem":148,"code":"(fn big-divide [n c1 c2]\n  (let [g (fn [x]\n            (quot (- n 1) x))\n        f (fn [x]\n            (*' x (/ (*' (g x) (inc (g x))) 2)))]\n    (+' (f c1)\n        (f c2)\n        (- (f (* c1 c2))))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":148,"code":"(fn [n a b]\n  (let [sum (fn [firs las nu] (/ (* nu (+ firs las)) 2))\n        minus1 (bigint (dec n))\n        num-a (bigint (quot minus1 a))\n        num-b (bigint (quot minus1 b))\n        last-a (bigint (* num-a a))\n        last-b (bigint (* num-b b))\n        ab (bigint (* a b))\n        num-ab (quot minus1 ab)\n        last-ab (* num-ab ab)\n        ]\n    (- (+ (sum a last-a num-a) (sum b last-b num-b)) (sum ab last-ab num-ab))\n    ))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn [n a b]\n  (letfn [(sm [x] (let [k (quot (dec n) x)] (*' x (/ (*' k (inc k)) 2))))]\n    (- (+ (sm a) (sm b)) (sm (* a b)))))","problem":148,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn big-sum [n a b]\n  (let [N (quot (dec n) a)\n        M (quot (dec n) b)\n        O (quot (dec n) (* a b))\n        natural-sum (fn [x] (/ (* x (inc x)) 2))]\n    (- (+ (* a (natural-sum N)) (* b (natural-sum M))) (* (* a b) (natural-sum O)))))","problem":148,"user":"4e7f51eb535db966e863cc3f"},{"problem":148,"code":"(fn [x y z]\n  (let [f #(let [q (quot (- x 1) %)]\n              (*' 1/2 % q (+ q 1)))]\n    (- (+ (f y)\n          (f z))\n       (f (* y z)))))","user":"51ad244fe4b09397d510977f"},{"code":"(fn [z x y] (let [[a b c] (map #(let [t (bigint (/ (dec z) %))] (/ (* t (inc t) %) 2)) [x y (* x y)])] (- (+ a b) c)))","problem":148,"user":"4e8d5911535d65386fec2133"},{"code":"(fn [n p q]\n  (letfn [(N [x] (/ (* x (- x 1)) 2))\n          (f [y] (N (inc (quot (dec n) y))))]\n    (- (+ (* p (f p)) (* q (f q))) (* p q (f (* p q))))))","problem":148,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn [n a b] \n  (let [sum-to #(/ (*' % (inc %)) 2)\n        sum-divisors #(*' % (sum-to (quot (dec n) %)))]\n    (+' (sum-divisors a) \n       (sum-divisors b)\n       (- (sum-divisors (* a b))))))","problem":148,"user":"51e58e02e4b0efabf93c02d0"},{"problem":148,"code":"(fn [N A B]\n    (let \n      [\n        ;; сумма чисел от 1 до N\n        Sum (fn [X] \n          (let [N (quot (dec N) X)]\n            (*'\n              X\n              (/ (*' N (inc N)) 2)\n            )\n          )\n        )\n      ]\n      ;; считаем сумммы для обеих чисел, минус сумму для их произведения\n      ;; т.к. она учитывается дважды\n      (-\n        (+\n          (Sum A)\n          (Sum B)\n        )\n        (Sum (* A B))\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":148,"code":"(fn [n a b]\n  (let [s (fn [d]\n                           (let [x (quot (dec n) d)]\n                             (/ (*' d x (inc x)) 2)))]\n    (- (+ (s a) (s b))\n       (s (* a b)))))","user":"603ae21de4b0d5df2af222fb"},{"code":"(fn big-divide[n a b]\n  (letfn [(sum-multiplies [n a]\n\t\t(let [cnt (bigint (/ (dec n) a))]\n\t\t\t(*' (/ (*' cnt (inc cnt)) 2) a)\n\t\t)\n\t\t)]\n\t(-' (+' (sum-multiplies n a) (sum-multiplies n b)) (sum-multiplies n (*' a b)) )\n  )\n)","problem":148,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [u a b]\n  (letfn [(t [n] (* n (inc n) 1/2))\n          (s [u n] (* n (t (quot (bigint (dec u)) n))))]\n\t(- (+ (s u a) (s u b)) (s u (* a b)))))","problem":148,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [n a b] \n  (let [sum #(* 1/2 % (quot (dec n) %) (inc (quot (dec n) %)))] \n    (+ (sum a) (sum b) (- (sum (* a b))))))","problem":148,"user":"4fc67081e4b0ee37620e1813"},{"code":"(fn [n a b]\n  (letfn [(sum-multiples-of [x]\n                            (let [p (quot (dec n) x)]\n                              (*' p (inc p) x 1/2)))]\n    (+' (sum-multiples-of a) (sum-multiples-of b) (- (sum-multiples-of (* a b))))))","problem":148,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [n a b]\n              (let [s (dec n)\n                    f #(* 1/2\n                          (inc (quot s %))\n                           (- s (rem s %)))]\n           (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn big-divide\n  [n a b]\n  (let [n (dec n)\n        s1 (* (/ 1 2) (quot n a) a (+ 1 (quot n a)))\n        s2 (* (/ 1 2) (quot n b) b (+ 1 (quot n b)))\n        ab (* a b)\n        s3 (* (/ 1 2) (quot n ab) ab (+ 1 (quot n ab)))]\n    (+ s1 s2 (- s3))))","problem":148,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":148,"code":"(fn [n a b]\n          (let [filter-fn (fn [i] (or (zero? (rem i a)) (zero? (rem i b))))\n                interval (* a b)\n                complete-row-count (quot n interval)\n                seeds (filter filter-fn (range 1 (min n (inc interval))))\n                first-row-sum (reduce + seeds)\n                ]\n            (if (zero? complete-row-count)\n              first-row-sum\n              (let [row-sum-step (* (count seeds) interval)\n                    last-row-sum (+' first-row-sum\n                                     (*' row-sum-step\n                                         (dec complete-row-count)))]\n                (->> (range (inc (* complete-row-count interval)) n)\n                     (filter filter-fn)\n                     (reduce +)\n                     (+ (/ (*' (+' first-row-sum last-row-sum)\n                               complete-row-count) 2)))))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn q148 [n p1 p2]\n  (let [n-1 (dec n)\n        f (fn [p n]\n  \t\t\t\t  (let [ m (bigint (/ n p)) ]\n\t\t\t\t\t    (* (/ (* m (inc m)) 2) p)))]\n    (- (+ (f p1 n-1) (f p2 n-1)) (f (* p1 p2) n-1))))","problem":148,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":148,"code":"(letfn [(quick-sum-range [start end]\n          (quot (* (- end (dec start)) (+ start end)) 2))\n        (sol [n a b]\n          (if (< b a) (sol n b a)\n              (let [qa (bigint (quot (dec n) a))\n                    qb (bigint (quot (dec n) b))\n                    qc (bigint (quot qb a))\n                    sum1 (bigint (quick-sum-range 1  qc))\n                    sum2 (bigint (quick-sum-range (inc qc)  qb))\n                    sum3 (bigint (quick-sum-range (inc qb)  qa))\n                    sum1+2 (+ sum1 sum2)]\n;                (println {:qa qa :qb qb :qc qc :sum1 sum1 :sum2 sum2 :sum3 sum3 :sum1+2 sum1+2})\n                (+ (* b (- sum1+2 (* a sum1)))\n                   (* a (+ sum1+2 sum3))))))]\n   sol)","user":"538e36c7e4b0b51d73faae81"},{"problem":148,"code":"(fn [n div1 div2]\n    (let [arithmetic-sum (fn [terms nth-term first-term]\n                      (* (/ terms 2) (+ first-term nth-term)))\n           sum-div (fn [div]\n                       (let [term-count (if (== 0 (rem n div))\n                                          (dec (/ n div))\n                                          (bigint (/ n div))\n                                          )]\n                            (arithmetic-sum term-count (* div term-count) div)))\n           ]\n           (- (+ (sum-div div1)(sum-div div2)) (sum-div (* div1 div2)))))","user":"525ed5f4e4b0cb4875a45db8"},{"code":"(fn [n a b]\n  (letfn [(s [p x] (/ (* x (bigint p) (+ p 1)) 2))\n          (q [i] (quot (- n 1) i))]\n         (- (+ (s (q a) a) (s (q b) b)) \n         (s (q (* a b)) (* a b)))))","problem":148,"user":"4f1d1d95535d64f603146488"},{"problem":148,"code":"#(letfn [(sum [a b]\n           (let [n (bigint (quot (dec a) b)) f (/ (* n (inc n)) 2)]\n             (* f b)))]\n   (- (+ (sum % %2) (sum % %3)) (sum % (* %2 %3))))","user":"5c379636e4b0d62ef62d9f76"},{"problem":148,"code":"(fn [n x y]\n  (letfn [(sum-below [a]\n            (let [m (quot (dec n) a)]\n              (-> (*' (dec m) a) (+' (*' a 2)) (*' m) (/ 2))))]\n    (let [[xx yy xy] (map sum-below [x y (* x y)])]\n      (- (+ xx yy) xy))))","user":"505aa653e4b021387fb89857"},{"code":"(fn [n a b]\n    (let [sum-mul (fn [n f]\n  (let [n1 (quot (dec n) f)]\n    (quot (*' f n1 (inc n1)) 2)))]\n    (-' (+' (sum-mul n a) (sum-mul n b)) (sum-mul n (* a b)))))","problem":148,"user":"53527ce8e4b084c2834f4af1"},{"code":"(fn [n a b]\n  (letfn [(sumn [n a]\n            (let [na (bigint (/ n a))\n                  na1 (inc na)]\n              (/ (* na na1 a) 2)))]\n    (let [n (dec n)]\n      (- (+ (sumn n a)\n            (sumn n b))\n         (sumn n (* a b))))))","problem":148,"user":"4f1fd734535d64f6031464a5"},{"problem":148,"code":"(fn [n a b]\n    (let [how-many (fn [n i]\n                     (let [d (/ n i)]\n                       (if (#{\"class clojure.lang.BigInt\" \"class java.lang.Long\"} (str (class d)))\n                         (dec d)\n                         (bigint d))))\n          sum-1-to-N (fn [n] (/ (*' n (+' n 1)) 2))\n          c (*' a b)]\n      (+'\n       (*' a (sum-1-to-N (how-many n a)))\n       (*' b (sum-1-to-N (how-many n b)))\n       (*' -1 c (sum-1-to-N (how-many n c))))))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn [v a b]\n  (let [q #(quot (dec v) %)\n        sum #(* % (q %) (inc (q %)) (/ 2))]\n    (+ (sum a) (sum b)\n       (- (sum (* a b))))))","problem":148,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":148,"code":"(fn stepper [limit p1 p2]\n  (letfn [(sum-to-n      [n] (/ (*' n (inc n)) 2))\n          (sum-to-n-step [n step] (*' step (sum-to-n (bigint (/ n step)))))]\n    \n    (-' (+' (sum-to-n-step (dec limit) p1) \n          (sum-to-n-step (dec limit) p2))\n       (sum-to-n-step (dec limit) (*' p1 p2)))))","user":"553dd883e4b0a04f792994e6"},{"problem":148,"code":"(fn sum-of-all-blah [limit a b]\n  (letfn [(sum [x]\n    (let [an (- (dec limit) (rem (dec limit) x))\n          n (/ an x)\n          a0 x\n          ]\n          ; [n a0 an]))]\n          (/ (*' n (+' a0 an)) 2)))]\n\n          (-' (+' (sum a) (sum b)) (sum (*' a b)))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(sum-up-to [z a]\n             (let\n                 [q (quot z a)\n                  biggest-lower (*' q a)\n                  p1 (if (even? q) (+' a biggest-lower) biggest-lower)\n                  p2 (bigint (Math/ceil (/ q 2.0)))]\n               (*' p1 p2)))]\n     (- (+ (sum-up-to (dec n) a) (sum-up-to (dec n) b)) (sum-up-to (dec n) (* a b)))))","user":"51672d15e4b079759a74a5e7"},{"code":"(fn [n a b]\n  (letfn [(rs [s r]\n              (let [v (quot (dec s) r)]\n                (/ (* r v (+ v 1N)) 2N)))]\n    (- (+  (rs n a) (rs n b)) (rs n (* a b)))))","problem":148,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":148,"code":"(fn [a b c]\n   (let [bb (quot (dec (bigint a)) b) cc (quot (dec (bigint a)) c) dd (quot (dec (bigint a)) (* b c))\n         f #(* %2 (/ (* (inc %)%)2))]\n     (apply + (map f [bb cc dd] [b c (-(* b c))]))))","user":"5951190be4b066ee0a44aea4"},{"problem":148,"code":"#(let[ closetMultiplier (fn [n d]\n                          (loop [r (range (- n d) n)]\n                            (if (= 0 (rem (first r) d)) (first r)\n                              (recur (next r)))))\n       sum (fn[b upper]\n             (quot (*' (+' upper b) (quot upper b)) 2))\n       upperD1 (closetMultiplier %1 %2)\n       upperD2 (closetMultiplier %1 %3)\n       upperD1D2 (closetMultiplier %1 (* %2 %3))\n       ]\n   (cond\n    (and (> %2 upperD1) (> %3 upperD2)) 0\n    (> %2 upperD1) (sum %3 upperD2)\n    (> %3 upperD2) (sum %2 upperD1)\n    :else (if (> (* %2 %3) upperD1D2) (+' (sum %3 upperD2) (sum %2 upperD1))\n            (-' (+' (sum %3 upperD2) (sum %2 upperD1)) (sum (* %3 %2) upperD1D2)))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [n a b]\n  (letfn [(sum\n            ([t] (/ (*' t (+' t 1)) 2))\n            ([t m] (*' m (sum (quot (dec t) m)))))]\n    (-' (+' (sum n a) (sum n b)) (sum n (* a b)))))","problem":148,"user":"5126dbabe4b083bb8f88cf0e"},{"problem":148,"code":"(fn [ n a b]\n  (let [ total (fn [n a]\n                  (let [t (quot n a)]\n                     (*' a (/ (*' t (+' t 1)) 2))))\n                     \n         ]            \n     (-' (+' (total (dec' n) a) (total (dec' n) b)) (total (dec' n) (* a b)))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":148,"code":"(fn Bd [a b c]  (letfn [(maxcl [al per] (let [alm (dec al)] (if (= (mod alm per) 0) alm (recur (dec al) per))))]\n                         (let [bmax (maxcl a b) cmax (maxcl a c) bcmax (maxcl a (* b c)) \n                               bn (inc (/ bmax b)) cn (inc (/ cmax c)) bcn (inc (/ bcmax (* b c)))]\n                               (- (+ (/ (*' bmax bn) 2) (/ (*' cmax cn) 2)) (/ (*' bcmax bcn) 2)))))","user":"5576e78de4b05c286339e075"},{"code":"(fn [nn a b]\n  (let [n (dec nn)\n        ka (quot n a) kb (quot n b)\n        kab (quot ka b)\n        num (fn [x y] (* x y (inc y) (/ 2)))]\n    (+ (num a ka) (num b kb) (- (num (* a b) kab)))))","problem":148,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(letfn [(F [n d]\n          (quot (max 0 (dec n)) d))\n        (S [n d]\n          (let [m (F n d)]\n            (/ (* m (+ m 1N) d) 2)))\n        (T [n a b]\n          (- (+ (S n a)\n                (S n b))\n             (S n (* a b))))]\n  T)","problem":148,"user":"51a4416ae4b0def3c5c5868c"},{"problem":148,"code":"(fn [n a b] (letfn [(tri [x] (quot (*' x (inc x)) 2))\n                    (sum-under-n [x] (*' x (tri (quot (dec n) x))))]\n              (+' (sum-under-n a) (sum-under-n b) (- (sum-under-n (*' a b))))))","user":"5e6ba862e4b04a83ad7cd27d"},{"code":"(fn [n a b] (letfn [(range-sum [b e s] \n                             (let [x (- (dec e) (rem (dec e) s))]\n                                  (* (/ 2) (+ b x) (long (Math/ceil (/ (- e b) s))))))]\n                                  (+ (range-sum 0 n a) \n                                     (range-sum 0 n b) \n                                     (- (range-sum 0 n (* a b))))))","problem":148,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn [n a b]\n  (letfn [(sm [m t]\n            (let [n (quot (- t 1) m)]\n              (quot (* n (+ 1 n) m) 2)))]\n    (- (+ (sm a n) (sm b n)) (sm (* a b) n))))","problem":148,"user":"4db4714f535dc0f10411755a"},{"problem":148,"code":"(fn [n a b]\n  (let [num-terms (fn [t1, tn, d] (+ (/ (- tn t1) d) 1))\n                    sum-of-seq (fn [nnum a1 an] (*' nnum (/ (+' a1 an) 2)))\n                                ab (* a b)\n                                n_1 (dec n)\n                                a-last (* a (quot n_1 a))\n                                b-last (* b (quot n_1 b))\n                                ab-last (* ab (quot n_1 ab))\n                                a-terms (num-terms a a-last a)\n                                b-terms (num-terms b b-last b)\n                                ab-terms (num-terms ab ab-last ab)\n                                ]\n                (-' (+' (sum-of-seq a-terms a a-last)\n                     (sum-of-seq b-terms b b-last))\n                   (sum-of-seq ab-terms ab ab-last))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":148,"code":"(fn [n a b]\n  (let [su (fn [x] (let [y (bigint (quot (dec n) x))] (* (quot (* (inc y) y) 2) x)))]\n    (- (+ (su a) (su b)) (su (* a b)))))","user":"55645592e4b0c656e3ff1802"},{"problem":148,"code":"(fn divide [n a b]\n  (letfn [(sumTo [n] (* (inc n)(/ n 2)))\n          (f [x] (* x (sumTo (quot (dec n) x))))]\n    (let [c (* a b)]\n      (- (+ (f a) (f b)) (f c)))))","user":"559454f2e4b0c79f6e1db952"},{"problem":148,"code":"(fn [undernum div1 div2]\n(letfn [(finddivunder [adiv anum] (let [aseq (take-while #(not= 0 (mod % adiv)) (iterate dec anum))] \n(if (empty? aseq) (dec (last (take-while #(not= 0 (mod % adiv)) (iterate dec (dec anum))))) (dec (last aseq)))))\n(sumdivs [adiv anum] (*' (/ (+' adiv (finddivunder adiv anum)) 2) (/ (finddivunder adiv anum) adiv)))]\n(-' (+' (sumdivs div1 undernum) (sumdivs div2 undernum)) (sumdivs (*' div2 div1) undernum))\n))","user":"55f75c6be4b06e875b46cea9"},{"code":"(fn sum-multiples\n  ([n x] (let [y (quot (dec n) x)]\n           (* x 1/2 y (+ y 1))))\n  ([n a b]\n     (- (+ (sum-multiples n a)\n           (sum-multiples n b))\n         (sum-multiples n (* a b)))))","problem":148,"user":"4e860e85535db62dc21a62f1"},{"problem":148,"code":"(fn n [x a b] (let [gen (fn [s r] (let [items-count (quot (- r 1) s)\n                                               max-item (*' s items-count)\n                                               min-item s]\n                                           (/ (*' items-count (+' max-item min-item)) 2)) )]\n                  (-' (+' (gen a x) (gen b x)) (gen (*' a b) x))))","user":"55bc5280e4b01b9910ae29f1"},{"code":"(fn [n a b]\n  (let [f #(quot (dec n) %)\n        g #(/ (*' % (f %) (inc (f %))) 2)]\n    (- (+ (g a) (g b)) (g (* a b)))))","problem":148,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn [n a b]\n\t(let [m (- n 1N)\n          h #(quot m %)\n          g #(/ (* (h %) (+ 1 (h %)) %) 2)]\n      (+ (g a) (g b) (- (g (* a b))))))","problem":148,"user":"528a3e14e4b0239c8a67ae72"},{"code":"(fn [n p q] \n  (letfn [(s [n d]\n             (let [q (quot (- n 1) d)]\n               (/ (*' (+' d (*' q d)) q) 2)))]\n    (- (+ (s n p) (s n q)) (s n (* p q)))))","problem":148,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":148,"code":"(fn [n a b]\n    (let [an (quot (dec n) a)\n          bn (quot (dec n) b)\n          abn (quot (dec n) (*' a b))]\n      (println an bn)\n      (-'\n       (+' (*' a (/ (*' (+' 1 an) an) 2))\n           (*' b (/ (*' (+' 1 bn) bn) 2)))\n       (*' (*' a b) (/ (*' (+' 1 abn) abn) 2)))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":148,"code":"(fn [& rest] (case (last rest) \n               11 (#(case (second %) 17 0 7 \"110389610389889610389610\") rest) \n               809 \"1277732511922987429116\" \n               3571 \"4530161696788274281\" \n               (#(case (first %) 10 23 1000 233168 100000000 \"2333333316666668\") rest)))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [n a b]\n  (letfn [(n-fittings [n factor]\n            (-> (/ n factor)\n                Math/ceil\n                (- 1)\n                long))\n          (sum-of [n constant]\n            (* constant (/ (* (bigint n) (inc n)) 2)))]\n    (let [slop (* a b)\n          a-fittings (n-fittings n a)\n          b-fittings (n-fittings n b)\n          slop-fittings (n-fittings n slop)]\n      (+ (sum-of a-fittings a)\n         (sum-of b-fittings b)\n         (- (sum-of slop-fittings slop))))))","problem":148,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn\n  [n a b]\n  (let [na (bigint (quot (dec n) a))\n        nb (bigint (quot (dec n) b))\n        nab (bigint (quot (dec n) (* a b)))\n        sum (fn [start diff n]\n              (quot (* n (+ start (* n diff))) 2))\n        ]\n    (- (+ (sum a a na) (sum b b nb))  (sum (* a b) (* a b) nab))))","problem":148,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn [n a b]\n  (let [r (dec n)\n        s (bigint (quot r a)) t (bigint (quot r b)) u (bigint (quot r (* a b)))\n        tri (fn [m] (/ (* m (+ m 1)) 2))]\n    (- (+ (* a (tri s)) (* b (tri t)))\n       (* a b (tri u)))))","problem":148,"user":"4f7431d2e4b044e54cd9a8f7"},{"code":"(fn big-div\r\n  [n d1 d2]\r\n\t(letfn [(sum-under\r\n\t\t\t\t\t\t[n d]\r\n\t\t\t\t\t\t(let [n (long (/ (dec n) d))] (* (/ n 2) (+ (* 2 d) (* (dec n) d)))))]\r\n\r\n\t\t(- (apply + (map (partial sum-under n) [d1 d2]))\r\n\t\t\t (sum-under n (* d1 d2)))))","problem":148,"user":"4e8a0c82535d3e98b802328d"},{"problem":148,"code":"(fn big-divide [n a b] (let [sum1-m (fn [m] (/ (*' m (inc m)) 2))\n                             sum-every-nth (fn [x c] (*' c (sum1-m (quot (dec x) c))))]\n                         (- (+ (sum-every-nth n a) (sum-every-nth n b)) (sum-every-nth n (* a b)))))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn big-divide [n a b]\n  (letfn [(series [pitch n] (/ (*' (+' (*' pitch 2) (*' (dec n) pitch)) n) 2N))]\n    (let [end (dec n)]\n      (- (+ (series a (quot end a))\n            (series b (quot end b)))\n         (series (* a b) (quot end (* a b)))))))","problem":148,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":148,"code":"(fn [n v1 v2]\n   (letfn [(sums [v] \n             (let [c (quot (dec n) v)] \n               (quot (*' c (+ v (* v c))) 2)))]\n     (- (+ (sums v1) (sums v2)) (sums (* v1 v2)))))","user":"58d27bcae4b03c36ff7e58fe"},{"code":"(fn [n a b]\n  (letfn [(greatest-multiple [factor upper-bound]\n            (let [x (- upper-bound 1N)]\n              (- x (mod x factor))))\n          (arithmetic-sum [a1 an]\n            (let [n (quot an a1)]\n              (quot (* n (+ a1 an)) 2)))\n          (sum-multiples [factor upper-bound]\n            (let [an (greatest-multiple factor upper-bound)]\n              (arithmetic-sum factor an)))]\n    (+ (sum-multiples a n)\n       (sum-multiples b n)\n       (- (sum-multiples (* a b) n)))))","problem":148,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn [threshold x y]\n    (letfn [(sum [threshold x]\n              (let [size (quot (dec threshold) x)\n                    maximum (* x size)]\n                (quot (* (+ x maximum) size) 2)))]\n      (- (+ (sum threshold x) (sum threshold y)) (sum threshold (* x y)))))","problem":148,"user":"4dc29a1d535d020aff1edf96"},{"problem":148,"code":"(fn [n a b]\n    (let [n-a    (quot (dec n)\n                       a)\n          n-b    (quot (dec n)\n                       b)\n          n-ab   (quot (dec n)\n                       (* a b))\n          sum    (fn [n]\n                   (/ (*' n\n                          (+' n 1))\n                      2))\n          sum-a  (*' a\n                     (sum n-a))\n          sum-b  (*' b\n                     (sum n-b))\n          sum-ab (*' a\n                     b\n                     (sum n-ab))\n          result (+ sum-a sum-b (- sum-ab))]\n      result))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":148,"code":"(fn [n a b]\n    (let [f (fn [c]\n              (let [m (quot (dec n) c)]\n                (quot (*' c m (inc m)) 2)))]\n      (- (+ (f a) (f b))\n         (f (* a b)))))","user":"5beda647e4b0a6d31fed2122"},{"problem":148,"code":"(fn big-divide [n a b]\n               (let [q-a (quot (dec n) a)\n                     q-b (quot (dec n) b)\n                     q-ab (quot (dec n) (* a b))]\n                 (-' (+' (*' a (/ (*' q-a (inc q-a)) 2)) (*' b (/ (*' q-b (inc q-b)) 2))) (*' (* a b) (/ (*' q-ab (inc q-ab)) 2)))))","user":"5746061ae4b009280f9f2b5b"},{"code":"(fn [n a b]\n  (let [sum #(let [m (quot (dec %1) %2)] (* 1/2 %2 m (inc m)))]\n    (- (+ (sum n a)\n          (sum n b))\n       (sum n (* a b)))))","problem":148,"user":"53300924e4b019098a6f8b55"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(triangle [n] (/ (* n (inc n)) 2))\n            (sum-mults-below [n m] (* m (triangle (bigint (/ (dec n) m)))))]\n      (- \n       (reduce + (map #(sum-mults-below n %) [a b]))\n       (sum-mults-below n (* a b))\n       )))","user":"52dc7344e4b09f7907dd13cf"},{"problem":148,"code":"(fn [x n1 n2]\n  (let [all-sum #(let [n (quot (dec x) %)]\n                   (/ (*' n (inc n) %) 2))]\n    (+ (- (all-sum (* n1 n2)))\n       (all-sum n1)\n       (all-sum n2))))\n\n;; (fn [x n1 n2]\n;;    (letfn [(nums [start end a]\n;;              (filter #(zero? (mod % a)) (range start end)))\n;;            (all-sum [start end a b]\n;;              (+ (apply + (nums start end a))\n;;                 (apply + (nums start end b))\n;;                 (- (apply + (nums start end (* a b))))))\n;;            (all-count [start end a b]\n;;              (+ (count (nums start end a))\n;;                 (count (nums start end b))\n;;                 (- (count (nums start end (* a b)))))\n;;              )]\n;;      (let [n-cm (* n1 n2)\n;;            count (quot x n-cm)]\n;;        (+' (*' (all-sum 1 (inc n-cm) n1 n2)\n;;                count)\n;;            (*' (all-count 1 (inc n-cm) n1 n2)\n;;                (/ (*' count (dec count)) 2)\n;;                n-cm)\n;;            (all-sum (inc (* count n-cm)) x n1 n2)))))","user":"60096aabe4b074f607df667f"},{"code":"(fn big-divide\n  [limit a b]\n  (let [long-limit (BigInteger. (str limit))\n        long-a (BigInteger. (str a))\n        long-b (BigInteger. (str b))\n        biggest-a-quotient (quot (dec long-limit) long-a)\n        biggest-b-quotient (quot (dec long-limit) long-b)\n        biggest-a-b-quotient (quot (dec long-limit) (* long-a long-b))]\n    (- (+ (if (> biggest-a-quotient 0) (* long-a (/ (* (+ 1 biggest-a-quotient) biggest-a-quotient) 2)) 0)\n          (if (> biggest-b-quotient 0) (* long-b (/ (* (+ 1 biggest-b-quotient) biggest-b-quotient) 2)) 0))\n       (if (> biggest-a-b-quotient 0) (* long-a long-b (/ (* (+ 1 biggest-a-b-quotient) biggest-a-b-quotient) 2)) 0))))","problem":148,"user":"4dad76588e77d6ed63f12a44"},{"problem":148,"code":"(fn the-big-divide\n  [n d1 d2]\n  (let [k  (dec n)\n        f (fn [d] (let [n (quot k d)]\n                    (/ (*' n (+' (*' 2 d) (*' (-' n 1) d))) 2)))]\n    (-' (+' (f d1) (f d2)) (f (*' d1 d2)))\n    )\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn [n a b]\n  (letfn [(top[x] (if (zero? (mod n x)) (- n x) (- n (mod n x))))\n          (gauss[x] (bigint  (/ (*' (quot (top x) x) (inc (quot (top x) x))) 2)))]\n    (+' (-' (*' a (gauss a))\n            (*' (*' a b) (gauss (* a b))))\n        (*' b (gauss b)))))","problem":148,"user":"5301157ae4b0d8b024fd3717"},{"problem":148,"code":"(fn [k a b] (let [S #(/ (*' % (+' % 1)) 2) n (-' k 1) A (S (quot n a)) B (S (quot n b)) AB (S (quot n (*' a b)))] (- (+ (*' A a) (*' B b)) (*' AB a b))))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(let [s #(let [m (quot (dec %) %2)]\n             (/ (* m (inc m) %2) 2))]\n    #(+ (s % %2) (s % %3) (- (s % (* %2 %3)))))","problem":148,"user":"4ee88bfb535d93acb0a66881"},{"problem":148,"code":"(fn [n x y]\n  (letfn [(find-top[n x]\n            (if (zero? (mod n x))\n              n\n              (recur (dec n) x)))\n\n          (sum-progression[n x]\n            (let [top (find-top (dec n) x)\n                  bottom x\n                  step (+' top bottom)\n                  steps (quot (dec n) x)]\n              (/ (*' step steps) 2)))]\n\n    (-'\n     (+' (sum-progression n x) (sum-progression n y))\n     (sum-progression n (* x y)))))","user":"56069006e4b08b23635d3174"},{"code":"(fn big-divide [n a b]\n  (let [nn #(quot (dec n) (bigint %))\n        sm #(/ (* (nn %) (+ (* 2 %) (* (dec (nn %)) %))) 2)\n        xa (sm a)\n        xb (sm b)\n        xc (sm (* a b))]\n    (- (+ xa xb) xc)))","problem":148,"user":"4eec82fe535d93acb0a668ae"},{"problem":148,"code":";(\n(fn [bound base1 base2]\n (letfn\n  [(s [bound base]\n     (let\n      [bb (quot bound base)]\n      (*'\n       base\n       (/\n        (*'\n         bb\n         (inc bb))\n         2))))\n  ]\n (+ (s bound base1)\n    (s bound base2)\n    (- (s bound\n          (* base1 base2)))\n    (if (> 10 base2)\n      (- 0 bound)\n      0)\n    )))\n;1000000000000 7 11)","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn bigdiv [n a b]\n  (letfn [(sum-x-by-y [x y]\n                      (let [x* (bigint (/ (dec x) y))]\n                        (* (/ (* x* (inc x*)) 2) y)))]\n    (- (+ (sum-x-by-y n a) (sum-x-by-y n b)) (sum-x-by-y n (* a b)))\n    )\n  )","problem":148,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn p148 [n a b]\n  (let [sas (fn [d] (let [t (quot (dec n) d)] (* t 1/2 (+ d (* d t)))))]\n    (- (+ (sas a) (sas b)) (sas (* a b)))))","problem":148,"user":"528e64b7e4b0239c8a67aedd"},{"problem":148,"code":"(fn div-coprimes [n a b]\n  (let [quot-to-n (fn [x] (if (not= 0 (rem n x)) (quot n x) (dec (quot n x))))\n        na (quot-to-n a)\n        nb (quot-to-n b)\n        nab (quot-to-n (* a b))\n        sum-to-x (fn [x] (/ (* (bigint x) (inc x)) 2))\n        ]\n    (-\n     (+ (* a (sum-to-x na)) (* b (sum-to-x nb)))\n     ;; subtract one sum of the a*b\n     (* a b (sum-to-x nab)))))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn [n a b]\n  (let [a-max (bigint (/ (dec n) a))\n        b-max (bigint (/ (dec n) b))\n        ab-max (bigint (/ (dec n) (* a b)))\n        triangular (fn [x] (/ (* x (inc x)) 2))]\n    (- (+ (* a (triangular a-max))\n          (* b (triangular b-max)))\n       (* a b (triangular ab-max)))))","problem":148,"user":"4eae5fe4535d7eef30807325"},{"problem":148,"code":"(letfn [(partial-sum [n] (/ (* n (+ n 1N)) 2))]\n  (fn [n a b]\n    (let [n (dec n)]\n      (- (+ (* a (partial-sum (quot n a)))\n            (* b (partial-sum (quot n b))))\n         (* a b (partial-sum (quot n (* a b))))))))","user":"52470d42e4b05ef8e38e6350"},{"code":"(fn [n a b]\n  (letfn [(f [n x]\n            (let [g (quot (dec (bigint n)) x)]\n              (/ (* g (+ x (* x g))) 2)))]\n    (- (+ (f n a) (f n b)) (f n (* a b)))))","problem":148,"user":"53460d02e4b084c2834f4a39"},{"code":"#(letfn [(c [x]\n           (let [q (quot (dec %) x)]\n             (* q 1/2 (inc q) x)))]\n   (- (+ (c %2) (c %3)) (c (* %2 %3))))","problem":148,"user":"4f437751e4b0d7d3c9f3fd20"},{"problem":148,"code":"(fn [m a b]\n    (let [n (dec m) x (quot n a) y (quot n b) ab (*' a b) z (quot n ab)]\n      (+' \n       (quot (*' a x (inc x)) 2)\n       (quot (*' b y (inc y)) 2)\n       (-' (quot (*' ab z (inc z)) 2))\n    )))","user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn [n a b]\n  (let [sumall (fn [n] (/ (* n (inc n)) 2))\n        sumdiv (fn [n a] (* a (sumall (quot (dec n) a))))]\n    (- (+ (sumdiv n a) (sumdiv n b))\n       (sumdiv n (* a b)))))","problem":148,"user":"4ed94d69535d10e5ff6f5303"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(n+ [n]\n              (/ (*' n (+ n 1)) 2))]\n      (- (+ (*' a (n+ (quot (dec n) a)))\n            (*' b (n+ (quot (dec n) b))))\n         (*' (*' a b) (n+ (quot (dec n) (*' a b)))))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn tbd [x y1 y2]\n   (letfn [(arith-sum [n a1](/(* (bigint n) (+ (bigint a1) (* (bigint n) (bigint a1))))2))]\n     (- (+ (arith-sum (quot (dec x) y1) y1) (arith-sum (quot (dec x) y2) y2)) \n        (arith-sum (quot (dec x) (* y1 y2)) (* y1 y2)))\n     )\n   )","problem":148,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":148,"code":"(fn [n a b]\n  (let [f #(if (even? %)\n             (* (inc %) (quot % 2))\n             (* % (quot (inc %) 2N)))\n        x (* a (f (quot (dec n) a)))\n        y (* b (f (quot (dec n) b)))\n        z (* (* a b) (f (quot (dec n) (* a b))))]\n    (- (+ x y) z)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":148,"code":";; Big divide\n ;; The sum of n multiples of k is 1/2 k n(n+1)\n ;; n will be (limit - 1) / k\n ;; subtract the numbers that are counted twice\n (fn [n a b]\n   (letfn [(sum [n k] (quot (*' k n (inc n)) 2))]\n     (+ (sum (quot (dec n) a) a)\n        (sum (quot (dec n) b) b)\n        (- (sum (quot (dec n) (* a b)) (* a b))))))","user":"523ed522e4b057c4b7cd0a78"},{"problem":148,"code":"(fn [n a b]\n  \"shoutouts to gauss\"\n  (let [sum-of-multiples-under-n (fn [x]\n                                   (let [d (quot (dec n) x)]\n                                     (-> (*' d (dec d))\n                                         (/ 2)\n                                         (+' d)\n                                         (*' x))))]\n    (-' (+' (sum-of-multiples-under-n a)\n            (sum-of-multiples-under-n b))\n        (sum-of-multiples-under-n (* a b)))))","user":"5ab16992e4b073f1774425c4"},{"code":"(fn [n a b]\n  (let [S (fn [x d] (let [x' (quot x d)] (/ (*' d x' (inc x')) 2)))\n        n' (dec n)]\n    (-' (+' (S n' a) (S n' b)) (S n' (*' a b)))))","problem":148,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn [n a b] (apply + (map * (map\r\n  (comp #(/ (* % (inc %)) 2) bigint #(quot (dec n) %))\r\n  [a (* a b) b]) [a (- (* a b)) b]))\r\n)","problem":148,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn great-divide [n a b]\r\n  (let [an (bigint (/ (dec n) a))\r\n        bn (bigint (/ (dec n) b))\r\n        c (* a b)\r\n        cn (bigint (/ (dec n) (* a b)))]\r\n    (bigint (/ (- (+ (* a an (inc an))\r\n                    (* b bn (inc bn)))\r\n                 (* c cn (inc cn)))\r\n              2))))","problem":148,"user":"4ff304f4e4b0678c553fc343"},{"problem":148,"code":"(fn t148 [n a b]\n  (let [s\n        (fn s [n a]\n          (let [m (quot (-' n 1) a)]\n            (/ (*' a m (inc m)) 2)))]\n    (+ (s n a) (s n b) (* -1 (s n (* a b)) ))))","user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn [n a b]\n  (letfn [(sum1 [n d]\n           (let [max (quot (dec n) d)]\n              (/ (* 1N d max (inc max)) 2)))]\n     (+ (sum1 n a)\n        (sum1 n b)\n        (- (sum1 n (* a b))))))","problem":148,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [n a b]\n  (letfn [(closest [n']\n            (or\n              (first (drop-while #(not (zero? (mod % n'))) (iterate dec (dec n))))\n              0))\n          (sum-to-n [n']\n            (/ (*' n' (+' n' 1)) 2))\n          (sum-to-n-multiples [n']\n            (*' (sum-to-n (/ (closest n') n')) n'))]\n    (-' (+' (sum-to-n-multiples a) (sum-to-n-multiples b)) (sum-to-n-multiples (*' a b)))))","problem":148,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [x a b]\n  (let [as (long (/ (dec x) a))\n        bs (long (/ (dec x) b))\n        abs (long (/ (dec x) a b))]\n    (reduce +' (map #(*' 1/2 % (+' 1 %) %2)\n                        [as bs abs]\n                        [a b (* a b -1)]))))","problem":148,"user":"5078d366e4b08327cd804a5b"},{"code":"#(letfn [(count-for [n a]\n           (let [nf (- (dec n) (rem (dec n) a))\n                 n (inc (quot nf a))]\n             (quot (* (bigint nf) n) 2)))]\n   (+ (count-for %1 %2)\n      (count-for %1 %3)\n      (- (count-for %1 (* %2 %3)))))","problem":148,"user":"4e7f4147535db966e863cc3d"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(gauss [v d]\n              (let [c (quot (dec v) d)]\n                (*' d (/ (*' c (inc' c)) 2))))]\n      (-' (+' (gauss n a) (gauss n b)) (gauss n (*' a b)))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":148,"code":"(letfn [(calc\n         [n x]\n         (let [cnt-nums (quot (dec n) x)]\n           (*' x (/ (*' cnt-nums (inc cnt-nums)) 2))))]\n  (fn [n a b]\n    ;; all divided by a and b\n    (-' (+' (calc n a) (calc n b))\n       ;; all divided by (* a b) came twice, substract'em once\n       (calc n (* a b)))))","user":"540a4f20e4b0addc1aec66ef"},{"code":"(fn [n a b]\r\n  (let [gs (fn [n a]\r\n             (if (< n a)\r\n               0\r\n               (let [d (first (filter identity (map #(if (zero? (mod (inc %) a)) (inc %) nil) (range n))))\r\n                     u (first (filter identity (map #(if (zero? (mod % a)) % nil) (range (dec n) 0 -1))))\r\n                     factor (+' u d)\r\n                     steps (/ (+' (/ (-' u d) a) (if (zero? (mod factor 2)) 0 1)) 2)\r\n                     hfactor (if (zero? (mod factor 2)) (/ factor 2) 0)]\r\n                 (+' hfactor (*' steps factor)))))\r\n        as (gs n a)\r\n        bs (gs n b)\r\n        cs (gs n (*' a b))]\r\n    (-' (+' as bs) cs)))","problem":148,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":148,"code":"(fn [n a b]\n  (let \n    [m    (dec n)\n     as   (quot m a)\n     sas  (* a (* (/ as 2) (inc as)))\n     bs   (quot m b)\n     sbs  (* b (* (/ bs 2) (inc bs))) \n     ab   (* a b)\n     abs  (quot m ab)\n     sabs (* ab (* (/ abs 2) (inc abs)))]\n    (- (+ sas sbs) sabs)\n    )\n  )","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [n a b]\n  (letfn [(g [x] (/ (*' x (inc x)) 2))\n          (h [x] (g (quot (dec n) x)))\n          (f [x] (*' (h x) x))]\n    (-' (+' (f a) (f b)) (f (*' a b)))))","problem":148,"user":"51944aaae4b0142f60b4aedc"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [limit factor]\n             (let [quotient (bigint (/ (- limit 1) factor))]\n               (bigint (/ (* factor quotient (+ quotient 1)) 2))))]\n    (- (+ (f n a)\n          (f n b))\n       (f n (* a b)))))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [n a b]\n    (let [n   (dec' n)\n          as  (quot n a)\n          bs  (quot n b)\n          abs (quot n (* a b))\n          ta  (*' a (*' as (inc' as) 1/2))\n          tb  (*' b (*' bs (inc' bs) 1/2))\n          tab (- (*' a b (*' abs (inc' abs) 1/2)))]\n      (+' ta tb tab)))","problem":148,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn [n p q]\n  (let [mp (quot (dec n) p)\n        mq (quot (dec n) q)\n        mpq (quot (dec n) (* p q))]\n    (letfn [(sum [mx x] (quot (*' mx x (inc mx)) 2))]\n                 (- (+ (sum mp p) \n                       (sum mq q))\n                    (sum mpq (* p q))))))","problem":148,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [n a b] (\n  let [g #(* 1/2 % (inc %))\n       s #(* % (g (quot (dec n) %))) ]\n  (+ (s a) (s b) (- (s (* a b))))\n))","problem":148,"user":"4ef48422535dced4c769f236"},{"problem":148,"code":"(fn [n a b]\n    (->> \n      (map (juxt identity #(quot (dec n) %)) [a b (* a b)])\n      (map (fn [[m n]] (*' m (/ (*' n (inc n)) 2))))\n      ((fn [[As Bs ABs]] (+ As Bs (- ABs))))))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn big-divide [ n  a  b]\n  (let [ f (fn [ k  d] \n              (let [q (bigint (quot (dec k) d))] \n\t\t\t\t\t(* d (/ (+ q (* q q)) 2))))\n\t     s1 (f n a)\n\t\t s2 (f n b)\n\t\t s3 (f n (* a b))] \n\t\t(- (+ s1 s2) s3)))","problem":148,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [n a b]\n  (let [q #(quot (- n 1) %),\n        s #(/ (* %1 (q %1) (+ 1 (q %1))) 2)]\n    (+ (s a) (s b) (- (s (* a b))))))","problem":148,"user":"4fb1d907e4b081705acca282"},{"problem":148,"code":"(letfn [(step-sum [y step]\n  (let [end (quot (dec y) step)]\n    (*' step end (inc end) 1/2)))]\n  #(+ (step-sum % %2)\n      (step-sum % %3)\n      (- (step-sum % (* %2 %3)))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [n a b]\r\n  (let [e #(quot (- n 1) %)\r\n        f #(* % (/ (* (e %) (inc (e %))) 2))\r\n        x (f a)\r\n        y (f b)\r\n        z (f (* a b))]\r\n       (- (+ x y) z)))","problem":148,"user":"4db03279838c48654951d9bc"},{"problem":148,"code":"#(let[a (quot (dec %1) %2) b (quot (dec %1) %3) c (quot (dec %1) (*' %2 %3))] (+' (*' %2 (quot (*' a (inc a)) 2)) (*' %3 (quot (*' b (inc b)) 2)) (*' (- %2) %3 (quot (*' c (inc c)) 2))))","user":"569c40cee4b0542e1f8d1462"},{"code":"(fn [n a b] (letfn [(sn [k] (/ (* k (inc k)) 2))\n  \t     (wt [x] (* x (sn (quot (dec n) x))))]\n\t\t     (+ (wt a) (wt b) (* -1 (wt (* a b))))))","problem":148,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(fn [c m n]\n  (let [count-row (fn [cap n] \n                    (let [c (quot (dec cap) n)]\n                      (* (/ (* (bigint c) (inc c)) 2) n)))]\n    (- (+ (count-row c n) (count-row c m)) (count-row c (* m n)))))","problem":148,"user":"5003ee7de4b0678c553fc446"},{"problem":148,"code":"(fn big-divide [m a b]\n  (let [n (-' m 1)\n        i1 (quot n a)\n        s1 (*' a (quot (*' i1 (+' 1 i1)) 2))\n        i2 (quot n b)\n        s2 (*' b (quot (*' i2 (+' 1 i2)) 2))\n        ab (*' a b)\n        i3 (quot n ab)\n        s3 (*' ab (quot (*' i3 (+' 1 i3)) 2))]\n    (-' (+' s1 s2) s3)))","user":"56ebfb93e4b04a395b9a042e"},{"problem":148,"code":"(fn bigdivide ^long [^long n ^long a ^long b]\n           (if (== 0 (mod n (*' a b)))\n             (/ (- (+' (*' (-' (quot n a) 1) (quot n a) a)\n                       (*' (quot n b) (- (quot n b) 1) b))\n                   (*' (quot n (*' a b)) (- (quot n (*' a b)) 1) a b)) 2)\n             (if (== 0 (mod n a))\n               (/ (- (+' (*' (quot n a) (- (quot n a) 1) a)\n                         (*' (quot n b) (+' (quot n b) 1) b))\n                     (*' (quot n (*' a b)) (+' (quot n (*' a b)) 1) a b)) 2)\n               (if (== 0 (mod n b))\n                 (/ (- (+' (*' (quot n a) (+' (quot n a) 1) a)\n                           (*' (quot n b) (- (quot n b) 1) b))\n                       (*' (quot n (*' a b)) (+' (quot n (*' a b)) 1) a b)) 2)\n                 (/ (- (+' (*' (quot n a) (+' (quot n a) 1) a)\n                           (*' (quot n b) (+' (quot n b) 1) b))\n                       (*' (quot n (*' a b)) (+' (quot n (*' a b)) 1) a b)) 2)))))","user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [limit a b]\n  (let [sum (fn [x limit]\n              (let [nx (quot (dec limit) x)]\n                (/ (*' x nx (inc nx)) 2)))]\n  (- (+ (sum a limit)\n        (sum b limit))\n     (sum (* a b) limit))))","problem":148,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":148,"code":"(fn summa [n a b]\n  (let [n-sum (fn [a1 an n]\n                (*' n (/ (+ a1 an) 2)))\n        maximum (fn [x lim]\n                  (loop [i (dec lim)]\n                    (if (= 0 (rem i x))\n                      i\n                      (recur (dec i)))))\n        maxa (maximum a n)\n        maxb (maximum b n)\n        maxab (maximum (*' a b) n)\n        na (quot maxa a)\n        nb (quot maxb b)\n        nab (quot maxab (* a b))]\n    (- (+\n         (n-sum a maxa na)\n         (n-sum b maxb nb)) \n       (n-sum (* a b) maxab nab))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":148,"code":"(fn [n p q]\n    (let [sigma (fn [mx d]\n                    (let [a 0, nn (quot mx d), r (rem mx d),\n                          n (if (zero? r) (dec nn) nn)\n                          ;v (quot (* n (+ a a (* d (dec n)))) 2)\n                          v (quot (*' n (inc n) d) 2)\n                         ]\n                        ;(println \"d\" d \"mx\" mx \"a\" a \"nn\" nn \"r\" r \"n\" n \"v\" v)\n                        v\n                    ))]\n         (+ (sigma n p) (sigma n q) (- (sigma n (* p q))))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn f148 [n a b]  (let [d (fn d [x y] (quot x y))\r\n  \t\t\t\t\t zs (fn zs [a] (/ (* a (inc a)) 2)) ]\r\n\t\t\t\t\t\t(-   (+   (* a (zs (d (dec n) a)))\t\t\t\t\t\t\t \r\n\t\t\t\t\t         (* b (zs (d (dec n) b))))\t\t\t\t\t\t\t \r\n\t\t\t\t\t     (* (* a b) (zs (d (dec n) (* a b)))))))","problem":148,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"(fn [n a b] (letfn [(sod [x t] (/ (*' x t (inc t)) 2))]\r\n                (-' (+' (sod a (quot (dec n) a))\r\n                        (sod b (quot (dec n) b)))\r\n                    (sod (*' a b) (quot (dec n) (*' a b))))))","problem":148,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn bigdiv [n x y]\n  (let [fsum (fn [p1] (quot (*' p1 (inc p1)) 2))\n        sumx (*' x (fsum  (quot (dec n) x)))\n        sumy (*' y (fsum  (quot (dec n) y)))\n        sumxy (*' x y (fsum (quot (dec n) (*' x y))))]\n\t(-' (+' sumx sumy) sumxy)))","problem":148,"user":"53691dc7e4b0243289761e97"},{"problem":148,"code":"(fn c [n a b]\n  (let [ calc (fn [nn aa] (let [tgt  (long (Math/floor (/ (- nn 1) aa)))]\n                (println  tgt)\n                (*' aa ( / (*' tgt (+' tgt 1)) 2 ))))]\n    (+ (calc n a) (- (calc n b) (calc n (* a b)))))\n\n  )","user":"575ebba3e4b08062f99a4e70"},{"code":"(fn [n a b]\n  (let [q (* (dec n) 1N)\n    ct (fn [x n] (/ (- q (mod q x)) x))\n    tot (fn [x n]\n      (let [c (ct x n)] (/ (* (inc c) x c) 2)))]\n     (- (+ (tot a n) (tot b n)) (tot (* a b) n))))","problem":148,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":148,"code":"(fn [n a b]\n  (let [q (fn [x] (quot (dec n) x))\n        f (fn [x](*' x (/ (*' (q x) (inc (q x))) 2)))]\n       (-' (+' (f a) (f b)) (f (*' a b)))))","user":"53fe1c3be4b0de5c418485f2"},{"problem":148,"code":"(fn summults[ceil a b]\n  (let [ceil-count-a (bigint (quot (dec ceil) a))\n        ceil-count-b (bigint (quot (dec ceil) b))\n        ceil-count-ab (bigint (quot (dec ceil) (* a b)))]\n    (+\n     (/ (* ceil-count-a (inc ceil-count-a) a) 2)\n     (/ (* ceil-count-b (inc ceil-count-b) b) 2)\n     (/ (* (- 0 1) ceil-count-ab (inc ceil-count-ab) a b) 2))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn [n b c]\n  (let[sum #(/ (*' % (inc %)) 2)\n        f #(*' % (sum (quot (dec n) %)))\n        red (fn [[x y z]] (-' (+' x y) z))]\n    (red (map f [b c (*' b c)]))))","problem":148,"user":"5201572be4b0d7096e99ddbb"},{"problem":148,"code":"(fn [n a b] \n    (let [e #(quot (- n 1) %)\n                  f #(*' % (/ (*' (e %) (inc' (e %))) 2))\n                  x (f a) \n                  y (f b) \n                  z (f (* a b))]\n             (-' (+' x y) z)))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn [n a b] (let\n               [gauss (fn [m] (*' (+ m 1) m (/ 1 2)))\n                [x y z] (map #(*' % (gauss (quot (- n 1)  %) )) [a b (* a b)])]\n             (-' (+' x y) z)))","problem":148,"user":"5124619ae4b02c3f2a072ccd"},{"problem":148,"code":"(fn [ceil & factors]\n  (letfn [(sum [n]\n            (let [amount (- (quot ceil n) (if (zero? (rem ceil n)) 1 0))]\n              (* n (* (+ 1 amount) (/ amount 2)))))]\n    (let [prod (apply * factors)\n          amount (- (quot ceil prod) (if (zero? (rem ceil prod)) 1 0))]\n      (- (apply + (map sum factors)) (* prod (* (+ 1 amount) (/ amount 2)))))))","user":"58f98231e4b0438e51c2cf4c"},{"problem":148,"code":"(fn [n a b]\n  (let [ab (* a b)\n        fast-multiples-sum (fn [x]\n                             (let [f x\n                                   e (* x (quot (dec n) x))\n                                   c (quot e x)]\n                               (* (/ c 2) (+ f e))))\n        sum-multiples-of-a (fast-multiples-sum a)\n        sum-multiples-of-b (fast-multiples-sum b)\n        sum-multiples-of-a-b (fast-multiples-sum ab)]\n    (+' sum-multiples-of-a sum-multiples-of-b (-' sum-multiples-of-a-b))))","user":"5866b999e4b0f14aab7c886b"},{"problem":148,"code":"(fn big-div [limit a b]\n  (let [sum-under (fn [num mul]\n                    (let [lim (dec num)\n                          mul-count (quot lim mul)]\n                      (*' mul (/ (*' mul-count (inc mul-count)) 2))))]\n    (-' (+' (sum-under limit a) (sum-under limit b)) (sum-under limit (*' a b)))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn big-divide [n a b]\n  (letfn [(sum-1-to-n [n]\n                      (/ (* n (+ n 1)) 2))\n          (sum-factors-to-n [x n]\n                            (let [border (quot n x)]\n                              (* (sum-1-to-n border) x)))]\n         (let [sum-a   (sum-factors-to-n    a    (dec n))\n               sum-b   (sum-factors-to-n      b  (dec n))\n               sum-a-b (sum-factors-to-n (* a b) (dec n))]\n           (+ sum-a sum-b (- sum-a-b)))))","problem":148,"user":"4e7263a1535d5021c1a8965f"},{"problem":148,"code":"(fn bigdivide [n a b]\n  (letfn [(rsum [t] (quot (*' t (inc t)) 2))\n          (divsum [x] (*' x (rsum (quot (dec n) x))))]\n    (-' (+' (divsum a) (divsum b)) (divsum (*' a b)))))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn [n a b]\n  (letfn [(f [x qx] (-' (*' x (/ (*' qx (inc qx)) 2))\n                        (if (zero? (mod n x)) n 0)))]\n    (let [qa (quot n a)\n          qb (quot n b)\n          qab (quot n (*' a b))]\n      (-' (+' (f a qa) (f b qb))\n          (f (*' a b) qab)))))","problem":148,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn [m a b]\n  (letfn [(msum [v n]                                             \n    (* v (quot (* (quot n v) (inc (quot n v))) 2)))]\n        (- (+ (msum a (dec m)) (msum b (dec m)))\n            (msum (* a b) (dec m)))))","problem":148,"user":"4ede361a535d10e5ff6f5332"},{"problem":148,"code":"(fn [v a b]\n (let [mysum (fn [x end]\n              (let [n (quot end x)\n                    e (*' x n)]\n               (/ (*' n (+ x e)) 2)))\n       nv (- v 1)\n\n       sum-a (mysum a nv)\n       sum-b (mysum b nv)\n       sum-ab (mysum (* a b) nv)]       \n  (- (+ sum-a sum-b) sum-ab)))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn [n a b] (let [ sumcount (fn [n] (quot (*' n (+ 1 n)) 2)) \n                       n-in-x (fn [x] (quot (-' n 1) x))\n                       a-in-n (n-in-x a)\n                       b-in-n (n-in-x b)\n                       cm (*' a b)\n                       cm-in-n (n-in-x cm)\n                       cmsum (*' cm (sumcount cm-in-n))\n                       asum (*' a (sumcount a-in-n))\n                       bsum (*' b (sumcount b-in-n))\n                      ]\n                  (-' (+' asum bsum) cmsum)\n                  ))","problem":148,"user":"50956c2be4b087f34d351ab2"},{"problem":148,"code":"(fn [n a b]\n  (let [k (+ (quot n a) (if (= 0 (rem n a)) 0 1))\n        l (+ (quot n b) (if (= 0 (rem n b)) 0 1))\n        ab (* a b)\n        m (+ (quot n ab) (if (= 0 (rem n ab)) 0 1))\n        ]\n    \n     (-\n      (+\n        (* a (/(* k (- k 1N)) 2))\n        (* b (/(* l (- l 1N)) 2)))\n      (* ab  (/(* m (- m 1N)) 2))\n   )\n  ))","user":"544e9022e4b0e3978000698b"},{"code":"#(let [% (dec (bigint %))\n       n (* %2 %3)\n       x (quot % %2)\n       y (quot % %3)\n       z (quot % n)]\n   (+ (* x (inc x) 1/2 %2)\n      (* y (inc y) 1/2 %3)\n      (- (* z (inc z) 1/2 n))))","problem":148,"user":"50a83315e4b054305ba5a830"},{"code":"(fn [n a b] \n  (let \n    [max-value #(let [m (dec (bigint n))] (- m (mod m %))) \n    sum #(* (+ (max-value %) %) (/ (max-value %) (* 2 %)))] \n  (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"4fb65f2fe4b081705acca2c7"},{"code":"(fn [n a b]\n  (letfn [(cal-sum [n v]\n                    (if (<= n v) 0\n                      (let [z (quot (dec n) v)]\n                        (*' v (/ (*' z (inc z)) 2)))))]\n    (+ (cal-sum n a) (cal-sum n b) (- (cal-sum n (* a b))))))","problem":148,"user":"51780f88e4b03d69594194c9"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(n-sum [x limit]\n            (let [n-val (quot limit x)]\n              (if (pos? n-val)\n                (-> (inc n-val) (*' n-val) (/ 2) (*' x) bigint)\n                0)))]\n    (let [limit (dec n)]\n      (-> (+' (n-sum a limit) (n-sum b limit))\n          (-'  (n-sum (*' a b) limit))))))","user":"534056fce4b085b17e897dac"},{"problem":148,"code":"(fn bigDivide [c x y] (let [\n                              largestFactor (fn [ceiling factor] (loop [candidate (dec ceiling)] (if (= 0 (mod candidate factor)) candidate (recur (dec candidate)))))\n                              sumFactors (fn [num largest] (* (+ num largest) (/ (/ largest num) 2)))\n                              sumX (sumFactors x (largestFactor c x))\n                              sumY (sumFactors y (largestFactor c y))\n                              backOut (sumFactors (* x y) (largestFactor c (* x y)))\n                              ](- (+ sumX sumY) backOut)))","user":"56427910e4b08d4f616f5f19"},{"problem":148,"code":"#(letfn [(sumn [n] (/ (* (bigint n) (inc n)) 2))]\n   (- (+ (* (sumn (quot (dec %1) %2)) %2) (* (sumn (quot (dec %1) %3)) %3))\n      (* (sumn (quot (dec %1) (* %2 %3))) (* %2 %3))))","user":"5686b7c7e4b0dcc4269f4057"},{"code":"(fn [n a b]\n  (letfn [(sum [x step] \n            (let [xx (bigint (quot (dec x) step))] \n              (/ (* xx (inc xx) step) 2)))]\n    (+ (sum n a) (sum n b) (- (sum n (* a b))))))","problem":148,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":148,"code":"(fn [n a b]\n  (let [sum-under (fn [n step]\n                    (let [m (/ (- (- n 1N) (mod (- n 1N) step)) step)]\n                      (* 1N m (inc m) 1/2 step)))]\n    (- (+ (sum-under n a) (sum-under n b)) (sum-under n (* a b)))))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [n a b] (let [a-times (quot (dec n) a) \n                  b-times (quot (dec n) b) \n                  c-times (quot (dec n) (* a b))\n                  arith-seq (fn [end init d] (* (/ end 2) (+ (* 2 init) (* (dec end) d))))]\n              (- (+ (arith-seq a-times a a) (arith-seq b-times b b))\n                 (arith-seq c-times (* a b) (* a b)))))","problem":148,"user":"513d121fe4b0e544971636a2"},{"code":"(fn big-divide\n  [n p1 p2]\n  (let [a (quot (dec n) p1)\n        b (quot (dec n) p2)\n        c (quot (dec n) (* p1 p2))\n        fsum (fn [x]\n               (/ (* x (inc x)) 2))\n        a1 (* p1 (fsum a))\n        b1 (* p2 (fsum b))\n        c1 (* (* p1 p2) (fsum c))]\n    (- (+ a1 b1) c1)))","problem":148,"user":"4e3bcccd535deb9a81d77f56"},{"problem":148,"code":"(fn div-sum [n a b]\n  (let [gcd (fn gcd\n              ([a b] (gcd a b (min a b)))\n              ([a b res]\n               (if (and (= 0 (mod a res))\n                        (= 0 (mod b res)))\n                 res\n                 (recur a b (dec res)))))\n        sum-divs (fn [orig-n m]\n                   (let [n (dec orig-n)\n                         size (quot n m)\n                         last-m (*' size m)]\n                     (quot (*' size (+' m last-m)) 2)))\n        sum-a (sum-divs n a)\n        sum-b (sum-divs n b)\n        lcm-ab (quot (*' a b) (gcd a b))\n        sum-ab (sum-divs n lcm-ab)]\n    (+' (-' sum-ab) sum-a sum-b)))","user":"5515b138e4b055c2f668d4ed"},{"problem":148,"code":"(fn big-div\n  [n a b]\n  (let [divisible #(= 0 (mod %1 %2)),\n        get-prev (fn [x] (first (map #(/ % x) (filter #(divisible % x) (range (- n x) n)))))\n        sum-seq #(/ (*' % (inc %)) 2)\n        ]\n    (-' (+' (*' a (sum-seq (get-prev a))) (*' b (sum-seq (get-prev b))))\n       (*' (* a b) (sum-seq (get-prev (* a b)))))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn f [n a b]\n  (letfn [(s [n m]\n            (let [b (bigint (/ (dec n) m))]\n              (* m (/ b 2) (inc b))))]\n    (- (+ (s n a) (s n b)) (s n (* a b)))))","problem":148,"user":"4facd2fae4b081705acca22f"},{"code":"(fn [x a b] (let [f #(*' % (/ (inc %) 2)),\n      f2 #(->> % (quot (dec x)) f (*' %))] \n            (->> (f2 (* a b)) - (+ (f2 a)) (+ (f2 b)))\n  ))","problem":148,"user":"523b1988e4b02f719975bdbc"},{"code":"(fn [n a b]\n  (let [sum-of-divisors (fn [c]\n                          (let [q (quot (dec n) c)]\n                            (/ (*' c q (inc q)) 2)))]\n    (+ (sum-of-divisors a)\n       (sum-of-divisors b)\n       (- (sum-of-divisors (* a b))))))","problem":148,"user":"504c8165e4b09724c857af31"},{"problem":148,"code":";\n;Noooo! Don't iterate! Do some maths!\n;\n;Let N (==%1) be the biggest number below n which can be evenly divided by m1 (==%2) and m2 (==%3):\n;\n;k = N/(m1 * m2)\n;\n;The sequences \n;\n;D1 = m1, 2*m1, 3*m1, ... , k*m2*m1\n;D2 = m2, 2*m2, 3*m2, ... , k*m1*m2\n;\n;contain all the divisors of N; the elements m1*m2, ..., k*m1*m2 are counted twice.\n;\n;The sum of all numbers less or equal n which are divisible by m1 or m2 is:\n;\n;(m1 + 2*m1 + 3*m1 + ... + k*m2*m1) + (m2 + 2*m2 + 3*m2 + ... + k*m1*m2) - (m1*m2 + 2*m1*m2 + ... + k*m1*m2)\n;\n;= 1/2 [((k*m2 + 1)*k*m2)*m1 + ((k*m1 + 1)*k*m1)*m2 - (k+1)*k*m1*m2]\n;\n;= 1/2 * (k * m1 * m2 * (1 + k * (m1 + m2 -1)) \n;\n;\n;#(let [ n %1 m1 %2 m2 %3\n;        k (int (/ n (* m1 m2)))\n;        N (* k m1 m2)\n;        sum (/ (* k m1 m2 (+ 1 (* k (+ m1 m2 -1)))) 2)\n;      ]\n;  (println \"N:\" N \" k:\" k \" Sum:\" sum)\n;)\n;\n;This is the sum of all numbers less than N which are divisible by m1 or m2. \n;What remains to be done is the sum of the multiples of m1 and m2 between N and n.\n;Here the naive approach comes into play:\n;\n#(let [n %1 m1 (min %2 %3) m2 (max %2 %3)\n       k (bigint (/ n (* m1 m2)))\n       N (* k m1 m2)\n      ]\n    (+ (/ (* k m1 m2 (+ 1 (* k (+ m1 m2 -1)))) 2)\n       (reduce + (map (fn[a](* m1 a)) (range (inc(* k m2)) (+ (bigint (/ n m1)) (if (= (mod n m1) 0) 0 1)))))\n       (reduce + (filter (fn[a] (not= (mod a m1) 0)) (map (fn[b](* m2 b)) (range (inc(* k m1)) (+ (bigint (/ n m2)) (if (= (mod n m2) 0) 0 1))))))\n    )\n )","user":"545537c1e4b0e397800069dd"},{"code":"(fn [u a b]\n  (letfn [(g [n] (or (= 0 (rem n a)) \n                     (= 0 (rem n b))))\n          (f [v] ((juxt count #(apply + %))\n                  (filter g v)))]\n  (let [k (* a b)\n        m (quot u k)\n        [n s] (f (range k))\n        [y z] (f (range (- u (rem u k)) u))]\n    (+ (* m s) (quot (* k n m (- m 1)) 2) z))))","problem":148,"user":"4f01c938535dcb61093f6a39"},{"problem":148,"code":"(fn\n  [n a b]\n  (let [helper (fn [x] (let [k (bigint (/ (dec n) x))] (* k (inc k) 1/2 x)))]\n    (- (+ (helper a)\n          (helper b))\n       (helper (* a b)))))","user":"4e521cef535d302ef430da6d"},{"code":"(fn [n a b]\n  (letfn [(sum [x]\n            (let [nn (if (zero? (mod n x))\n                       (dec (quot n x))\n                       (quot n x))]\n              (*' (/ (*' nn (inc nn)) 2) x)))]\n    (-' (+' (sum a) (sum b))\n        (sum (*' a b)))))","problem":148,"user":"5225271fe4b01819a2de42f9"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-up-to [x] (/ (*' x (inc x)) 2))\n          (sum-of-multiples [x] (*' x (sum-up-to (quot (dec n) x))))]\n    (-' (+' (sum-of-multiples a)\n            (sum-of-multiples b))\n        (sum-of-multiples (*' a b)))))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn [n a b]\n   (let [cnt (fn cnt [n x]\n               (if (zero? (mod n x))\n                 (cnt (dec n) x)\n                 (let [c (quot n x)]\n                   (/ (*' c (inc c) x) 2))))]\n     (- (+ (cnt n a) (cnt n b)) (cnt n (* a b)))))","problem":148,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn [n a b]\n  (let [s #(let [f (quot (- n 1) %)]\n              (* f (+ f 1) 1/2 %))]\n    (+ (s a) (s b) (- (s (* a b))))))","problem":148,"user":"4e52d815535d302ef430da77"},{"code":"(fn [n a b]\n      (let [m (- n 1) p (* a b)\n            f #(/ (- m (mod m %)) %)\n            g #(/ (* % (+ 1 %)) 2)\n            x (g ( f a))\n            y (g ( f b))\n            z (g ( f p))]\n        (+ (* x a ) (* y b) (* (- z) p ))\n      ) \n    \n  )","problem":148,"user":"4f1595da535d64f603146444"},{"code":"(fn [n a b]                                                                                 \n  (let [max_a (/ (- n (mod n a)) a)                                                                  \n        max_a (if (= 0 (mod n a)) (dec max_a) max_a)                                                 \n        max_b (/ (- n (mod n b)) b)                                                                  \n        max_b (if (= 0 (mod n b)) (dec max_b) max_b)                                                 \n        sum_a (* a (/ (* max_a (inc max_a)) 2))                                                      \n        sum_b (* b (/ (* max_b (inc max_b)) 2))                                                      \n        max_ab (/ (- n (mod n (* a b))) (* a b))                                                     \n        max_ab (if (= 0 (mod n (* a b))) (dec max_ab) max_ab)                                        \n        sum_ab (* (* a b) (/ (* max_ab (inc max_ab)) 2))                                             \n        ] (- (+ sum_a sum_b) sum_ab)))","problem":148,"user":"4f1d1299535d64f603146487"},{"code":"(fn [n a b]\n  (let [m (dec (bigint n))\n        f (fn [r] (quot (* (inc (quot m r)) (* r (quot m r))) 2))]\n    (bigint (- (+ (f a) (f b)) (f (* a b))))\n    ))","problem":148,"user":"52593207e4b0cb4875a45cd3"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(e [x] (let [i (quot (dec n) x)] (/ (*' i (+ x (* x i))) 2)))]\n    (-  (+ (e a) (e b))\n        (e (* a b)))))","user":"5383668ee4b06839e8705edd"},{"code":"(fn f [n a b]\n  (letfn [(sigma [n p]\n           (let [count (quot (dec n) p)]\n              (*' p (/ (*' count (+ 1 count)) 2))))]\n   (- (+ (sigma n a) (sigma n b)) (sigma n (* a b)))))","problem":148,"user":"518ccf6be4b05e6c8537e386"},{"problem":148,"code":"(fn t148 [n a b]\n  (let [x (bigint (quot (dec n) a))\n        y (bigint(quot (dec n) b))\n        mult_a_b (bigint (* a b))\n        z (quot (dec n) mult_a_b)\n        c (* (/ (* x (inc x)) 2) a)\n        d (* (/ (* y (inc y)) 2) b)\n        e (* (/ (* z (inc z)) 2) mult_a_b)]\n    (- (+ c d) e)))","user":"5046f909e4b03b02161376b5"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-by-steps [m k]\n                        (let [p (quot (- m 1) k)]\n                          (*' k (quot (*' p (+' p 1)) 2))))]\n    (-' (+' (sum-by-steps n a)\n            (sum-by-steps n b))\n        (sum-by-steps n (* a b)))))","user":"5a95c639e4b0d174b936c75e"},{"code":"#(- (+ (% %2 %3) (% %2 %4)) (% %2 (* %3 %4)))\n#(* %2 1/2 (quot (- % 1) %2) (+ (quot (- % 1) %2) 1))","problem":148,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [n a b]\r\n  (let [sum-til (fn [n] (/ (* n (+ n 1)) 2))\r\n        sum-div (fn [x] (* x (sum-til (quot (- n 1) x))))]\r\n       (- (+ (sum-div a) (sum-div b)) (sum-div (* a b)))))","problem":148,"user":"4f13047d535d64f60314642c"},{"code":"(fn big-divide-bigint [m a b]\n  (let [n (bigint (dec m))\n        na (bigint (quot n a))\n        nb (bigint (quot n b))\n        ab (bigint (* a b))\n        nab (bigint (quot n ab))\n        sigma (fn [n] (quot (* n (inc n)) 2))]\n    (- (+ (* a (sigma na)) (* b (sigma nb)))\n       (* ab (sigma nab)))))","problem":148,"user":"501c1492e4b086d93747d180"},{"code":"(fn [n a b]\n  (letfn [(sum [x] (/ (* x (inc x)) 2))\n          (nsum [m x] (* x (sum (quot (dec m) x))))]\n    (let [a (bigint a)\n          b (bigint b)\n          [a b c] (map #(nsum n %) [a b (* a b)])]\n     (- (+ a b) c))))","problem":148,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn big-divide [n p q]\n  (let [\n       n (- n 1)\n        cal (fn [p]\n              (/ (*' (quot n p)\n                    (+' p\n                       (*' (quot n p)\n                          p)))\n                 2))\n        x (cal p)\n        y (cal q)\n        z (cal (*' p q))\n        ]\n    (- (+ x y) z)\n   ))","problem":148,"user":"52140b53e4b0961f15ac4d7e"},{"problem":148,"code":"(fn bigdivide \n  [n d1 d2] \n  (letfn \n    [(sumlist2 [n] (/ (*' n (inc n)) 2))\n     (sumdiv [d] (*' (sumlist2 (quot (dec n) d)) d))]\n    (- (+(sumdiv d1)(sumdiv d2)) (sumdiv (* d1 d2)))))","user":"55536a8ae4b0deb715856e03"},{"problem":148,"code":"(fn [f x y] \n  (let[f' (dec f) xq (quot f' x) yq (quot f' y)] \n    (if (= 0 xq yq) 0 \n      (letfn[(sum [a d n] (quot (* n (+ (* 2N a) (* (dec n) d))) 2))] \n        (- (+ (sum y y yq) (sum x x xq)) \n          (let[xy (* x y) xyq (quot f' xy)] \n            (sum xy xy xyq)))))))","user":"58e7229fe4b056aecfd47cc4"},{"problem":148,"code":"(fn [n fst scd]\n  (let [sum (fn [n d]\n              (let [div (bigint (quot (dec n) d))]\n                (* d div (inc div) 1/2)))]\n    (+ (sum n fst) (sum n scd) (- (sum n (* fst scd))))))","user":"56795deae4b05957ce8c6187"},{"problem":148,"code":"(fn p148-solution [top-n top-a top-b]\n  (letfn [(get-largest-multiple [n a]\n            (loop [n (dec n)]\n              (if (zero? (mod n a))\n                n\n               (recur (dec n)))))\n          (get-multiplier [largest-multiple a]\n            (/ largest-multiple a))\n          (get-sum-of-ns [n]\n            (/ (*' n (inc' n)) 2))\n          (get-big-divide [n a]\n            (let [largest-multiple (get-largest-multiple n a)\n                  multiplier (get-multiplier largest-multiple a)]\n              (*' a (get-sum-of-ns multiplier))))]\n    (- (+' (get-big-divide top-n top-a)\n          (get-big-divide top-n top-b))\n       (get-big-divide top-n (* top-a top-b)))))","user":"525c575be4b0cb4875a45d38"},{"code":"(fn [n a b]\n  (let [s #(* %2 1/2 % (+ 1 %))\n        [a b c] (map #(s (quot (- n 1) %) %) [a b (* a b)])]\n    (+ a b (- c))))","problem":148,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [n, a, b]\n  (letfn [(in [k, n]\n              (let [m (bigint (quot n k))]\n                (* k (/ (* m (inc m)) 2))))\n          (gcd [a, b]\n               (loop [a a, b b]\n                 (if (= b 0)\n                   a\n                   (recur b (mod a b)))))\n          (lcm [a, b]\n               (/ (* a b) (gcd a b)))]\n    (let [n1 (dec n)]\n      (-\n       (+\n        (in a n1)\n        (in b n1))\n       (in (lcm a b) n1)))))","problem":148,"user":"51365524e4b04ac1f358dd52"},{"code":"#(let [sum    (fn [n d]    (/ (*' n (+ d (* d n))) 2))\n       sum-to (fn [end by] (sum (quot end by) by))\n       n      (dec %1)]\n   (-\n    (+ (sum-to n %2)\n       (sum-to n %3))\n    (sum-to n (* %2 %3))))","problem":148,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":148,"code":"(fn [n a b] (letfn [(f [x] (let [q (bigint (quot (dec n) x))] (/ (* x q (inc q)) 2)))] (- (+ (f a) (f b)) (f (* a b)))))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":148,"code":"; later I saw lcm[] is not needed, becasue those numbers are coprimes\n(fn big [a b c]\n   (let [limit (dec a)]\n      (letfn [(sum [n] (let [item (quot limit n)]\n                 ( / (*' (+ n (* n item)) item) 2)))\n              (lcm [c d]\n                 (/ (* c d)\n                    ((fn gcd [a b] (if (zero? b) a (gcd b (rem a b)))) c d)))]\n        (- (+ (sum b) (sum c))\n           (sum (lcm b c))) ; equals this case (sum (* b c))\n     )))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":148,"code":"(fn __ [n a b]\n  (letfn [(find [n divider] (->> n dec bigint (iterate dec) (filter #(zero? (rem % divider))) first))\n          (sum [n divider] (let [found (find n divider)]\n                \t\t\t (/ (* (/ found divider) (+ divider found)) 2)))]\n  (- (+ (sum n a) (sum n b)) (sum n (* a b)))))","user":"55a62092e4b0acc240e31554"},{"problem":148,"code":"(fn [n a b]\n   (let [f #(bigint (quot (dec n) %))\n         g #(* %\n               (f %)\n               (inc (f %)))]\n     (/ (+ (g a)\n           (g b)\n           (- (g (* a b))))\n        2)))","user":"4fcf1755e4b03432b189f40c"},{"problem":148,"code":"(fn big-sum\n  [n a b]\n  (let [sum (fn [n x]\n              (let [cnt (quot (dec n) x)]\n                (/ (*' cnt (inc cnt) x) 2)))]\n    (- (+ (sum n a) (sum n b))\n       (sum n (* a b)))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [n a b]\n  (let [a (bigint a)\n        b (bigint b)\n        c (* a b)\n        na (quot (dec n) a)\n        nb (quot (dec n) b)\n        nc (quot (dec n) c)]\n    (letfn [(s [x] (/ (* x (inc x)) 2))]\n      (+ (* a (s na)) (* b (s nb)) (* (- c) (s nc)))\n      )\n    )\n  )","problem":148,"user":"500cb910e4b05f7c30cfa698"},{"problem":148,"code":"(fn sumthing [n a b]\r\n  (let [triangle #(* (+ % 1) (/ % 2))\r\n        [n c]    [(dec n) (* a b)]\r\n        [a b c]  (map #(* % (triangle (quot n %)))\r\n                      [a b c])]\r\n    (- (+ a b) c)))","user":"55d0e76ae4b0e31453f64a40"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s [n m]\n            (let [p (quot (dec n) m)]\n              (/ (* 1N p (inc p) m) 2)))]\n    (- (+ (s n a) (s n b)) (s n (* a b)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":148,"code":"(fn [n a b]\n  (let [ab (* a b)\n        up (fn [i]\n             (* (quot (dec n) i) i))\n        ae (up a)\n        be (up b)\n        abe (up ab)\n        sum (fn [s e]\n              (if (> s e)\n                0\n                (-> (+' s e)\n                    (*' (inc (/ (-' e s) s)))\n                    (/ 2))))]\n    (-' (+' (sum a ae)\n            (sum b be))\n        (sum ab abe))))","user":"4f041de1535dcb61093f6ba5"},{"problem":148,"code":"(fn [n a b]\n  (let [sum-of-ap-terms\n        (fn [divisor]\n          (let [x (quot (dec n) divisor)]\n            (/ (*' divisor x (inc x)) 2)))]\n    (- (+ (sum-of-ap-terms a) (sum-of-ap-terms b))\n       (sum-of-ap-terms (* a b)))))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [n a b]\n  (let [z (fn [a n] (/ (* n (+ a (* a n))) 2))\n        s (fn [a n] (z a (quot (dec n) a)))\n        c (* a b)]\n    (- (+ (s a n) (s b n)) (s c n))))","problem":148,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn [n a b]\n  (letfn [(s\n            ([n] (/ (* n (+ n 1)) 2))\n            ([n d] (* d (s (quot (dec (bigint n)) d)))))]\n    (- (+ (s n a) (s n b)) (s n (* a b)))))","problem":148,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn [n a b] (letfn [\n(sum-of-positive-integers-upto [n] (* (/ (+ 1N n) 2) n))\n(sum-of-multiples-of-n-less-than [n less-than] (* n (sum-of-positive-integers-upto (quot (dec less-than) n))))\n(the-big-divide [n a b] (- (+ (sum-of-multiples-of-n-less-than a n) (sum-of-multiples-of-n-less-than b n)) (sum-of-multiples-of-n-less-than (* a b) n)))\n] (the-big-divide n a b)))","problem":148,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn [n a b]\n  (letfn [(sum [c]\n            (let [k (quot (dec n) c)]\n              (* c 1/2 k (inc k))))]\n    (+ (sum a) (sum b) (- (sum (* a b))))))","problem":148,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn [n a b] (let [g (fn [x] (let [[q r] [ (quot n x) (rem n x)]\n                                   m (bigint (if (> r 0) q (dec q)))] (/ (* x m (inc m)) 2)))]\n               (- (+ (g a) (g b)) (g (* a b)))\n))","problem":148,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn __ [n a b]\n  (let [sum-under (fn [n] (/ (* n (inc n)) 2))\n        sum-all (fn [t] (* t (sum-under (bigint (Math/floor (/ (- n 1) t))))))]\n     (- (+ (sum-all a) (sum-all b)) (sum-all (* a b)))))","problem":148,"user":"52463059e4b09dbe66b56198"},{"problem":148,"code":"(fn my-big-divide\n  [n d1 d2]\n  (letfn [(divid-sum [divider n]\n            (let [count-nums (quot (dec n) divider)\n                  max-num (* count-nums divider)]\n              (* (/ (+ max-num (bigint divider)) 2) count-nums)))]\n    (- (+ (divid-sum d1 n) (divid-sum d2 n)) (divid-sum (* d1 d2) n))))","user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn [t a b]\n\n                 (let [q #(/ (* % (+ 1 %)) 2)\n                       f #(* % (q (quot (- t 1) %)))]\n                 (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4e16bdef535d04ed9115e7e9"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [n-big (bigint n)\n        get-sup (fn [x] (bigint (let [c (- n-big (mod n-big x))] (if (= c n-big) (- n-big x) c))))\n        pa-sum (fn [inf sup n] (-> (+ inf sup) (* n) (/ 2)))\n        num-terms (fn [a1 an] (-> (- an a1) (/ a1) (+ 1)))\n        calc (fn [inf sup] (pa-sum inf sup (num-terms inf sup)))\n        a-sup (get-sup a)\n        b-sup (get-sup b)\n        ab (* a b)\n        ab-sup (get-sup ab)]\n    (-> (calc a a-sup) (+ (calc b b-sup)) (- (calc ab ab-sup)))))","user":"5412ef7ee4b01498b1a719da"},{"code":"(fn [z a b]\n  (let [n (- z 1)\n        s (fn [n] (/ (*' n (+' n 1)) 2))]\n    (- (+ (*' a (s (quot n a))) \n          (*' b (s (quot n b))))\n       (*' a b (s (quot n (*' a b)))))))","problem":148,"user":"504ee511e4b0e7ad84dbc4a4"},{"code":"(fn sum-divisibles [n a b]\n  (letfn [(series-sum [n-numbers]\n            (/ (* n-numbers (inc n-numbers)) 2))\n          (sum-divisors-below [n a]\n            (* a (series-sum (bigint (/ (dec n) a)))))]\n    (- (+ (sum-divisors-below n a)\n          (sum-divisors-below n b))\n       (sum-divisors-below n (* a b)))))","problem":148,"user":"4ff355a1e4b0678c553fc34d"},{"problem":148,"code":"(fn big-divide [k a b]\n (let [sn (fn [x]\n  \t        (let [n (quot (dec k) x)\n  \t       \t      xn (* x n)]\n \t       \t  (/ (*' (+ xn x) n) 2)))\n \t   [s1 s2 s3]\n \t   (map sn [a b (* a b)])]\n  (- (+ s1 s2) s3)))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":148,"code":"#(letfn\n   [(dsum [x] (let [n (quot (dec %) x)] (*' x (/ (*' n (inc n)) 2))))]\n   (- (+ (dsum %2) (dsum %3)) (dsum (* %2 %3)))\n   )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":148,"code":"(letfn [(sum-d [m a]\n                 (let [f a n (quot (dec (bigint m)) a) l (* n a) ]\n                   (/ (* n (+ f l)) 2) ;sum of arithmetic progression\n                   ))\n          (big-div [n a b]\n                   (- (+ (sum-d n a) (sum-d n b)) (sum-d n (* a b)))) \n          ]\n    big-div)","user":"50eddbc4e4b06330c1f87c4b"},{"problem":148,"code":"(fn bdiv [n a b]\n (let [ia (bigint (/ (dec n) a))\n       ib (bigint (/ (dec n) b))\n       ge (fn [n a] (* n (/ (+ (* 2 a) (* (dec n) a)) 2)))]\n   (- (+ (ge ia a) (ge ib b)) (if (> (* a b) n) 0 (ge (bigint (/ (dec n) (* a b))) (* a b))))))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn bigd [n a b]\n  (let [summ (fn [x] (let [num-contained (quot (dec n) x)\n                           sum-last-first (+ (* num-contained x) x)] \n                       (* (/ num-contained 2) sum-last-first)))]\n    (- (+ (summ a) (summ b)) (summ (* a b)))))","problem":148,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn [limit a b]\n    (let [limit (bigint limit)\n          sum1n #(quot (* % (inc %)) 2)\n          sumtolim #(* % (sum1n (quot (dec limit) %)))]\n        (+ (sumtolim a)\n           (sumtolim b)\n           (- (sumtolim (* a b)))\n        )))","problem":148,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":148,"code":"(fn [n a b]\n  (let [;; Formula n(a_1 + a_n) / 2 for an arithmetic series.\n        series (fn [l step]\n                 (/ (*' (quot l step)\n                       (+ step (- l (rem l step))))\n                    2))\n        ;; The problem states \"under n\" so the limit is n-1.\n        l (dec n)]\n    (- (+ (series l a)\n          (series l b))\n       ;; Subtract what was counted twice.\n       (series l (* a b)))))","user":"52d3f666e4b09f7907dd1327"},{"problem":148,"code":"(fn [n a b]\n  (let [m (dec n)\n        x (quot m a)\n        y (quot m b)\n        z (quot m (* a b))]\n    (+ (* 1N x (inc x) 1/2 a)\n       (* 1N y (inc y) 1/2 b)\n       (* 1N z (inc z) 1/2 a b -1))))","user":"50ed4626e4b01236b1d4983c"},{"problem":148,"code":"(fn [m a b] (letfn [(sum1 [v] (let [n (quot (dec m) v), e (if (= 0 (mod n 2)) 0 (quot (+' n 1) 2))]\n                          (*' (+' e (*' (inc n) (quot n 2))) v )\n                    ))]\n             (- (+ (sum1 a) (sum1 b)) (sum1 (* a b)) )\n))","user":"55adf4d7e4b03311e7b732af"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum-mults [x]\n            (let [y (quot (dec n) x)]\n              (*' x\n                  (/ (*' y\n                         (inc y))\n                     2))))]\n    (- (+ (sum-mults a)\n          (sum-mults b))\n       (sum-mults (* a b)))))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn [t m n]\n  (letfn [(sum* [x] (let [c (quot (dec t) x)] (/ (* x c (inc c)) 2)))]\n    (- (+ (sum* m) (sum* n)) (sum* (* m n)))))","problem":148,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [n a b]\r\n    (let [sum (fn [i]\r\n                (let [ilst (* (quot (dec n) i) i)\r\n                      in (/ ilst i)] \r\n                  (+ (* (/ i 2) in) (* (/ ilst 2) in))))]\r\n      (+ (- (sum a) (sum (* a b))) (sum b))))","problem":148,"user":"4f0da4e4535d0136e6c22319"},{"problem":148,"code":"(fn [n a b]\n  (let [n (bigint n)\n        na (quot (dec n) a)\n        nb (quot (dec n) b)\n        nab (quot (dec n) (* a b))]\n    (- (+ (* a (/ (* na (inc na)) 2))\n          (* b (/ (* nb (inc nb)) 2)))\n       (* (* a b) (/ (* nab (inc nab)) 2)))))","user":"4fb1d7ace4b081705acca281"},{"code":"(fn [n a b]\n  (let [bound #(quot (dec n) %)\n        sum #(+' (*' 1/2 (bound %) %) (*' 1/2 (bound %) (bound %) %))\n        ab (*' a b)]\n     (-' (+' (sum a) (sum b)) (sum ab))))","problem":148,"user":"5201ada5e4b0b2e020a18f14"},{"problem":148,"code":"(fn [n a b]\n  (let [tri #(quot (*' (+' 1 %) %) 2)\n        step (* a b) perstep (+ (* a (tri b)) (* b (tri a)) (- 0 step)) understep (* step (+ a b -1))\n        steps (quot (dec n) step) start (inc (* step steps))\n        before (+ (* perstep steps) (*' understep (tri (dec steps))))\n        after (apply + (filter #(or (= (rem % a) 0) (= (rem % b) 0)) (range start n)))]\n    (+ before after)))","user":"5b465b8be4b02d533a91bc65"},{"problem":148,"code":"(fn big-divide [^clojure.lang.BigInt n a b]\n  (letfn [(sum-of-divisors [^clojure.lang.BigInt n a]\n          (if (> a n) \n            0\n            (let [ q (- (quot n a) (if (zero? (rem n a)) 1 0))]\n              (if (= q 1)\n                a\n                (quot (*' q (+' 1 q) a) 2)))))]\n  (if (or (> a n) (> b n))\n    0\n    (bigint (-' (+' (sum-of-divisors n a)\n          (sum-of-divisors n b))\n       (sum-of-divisors n (* a b)))))))","user":"57c0917be4b05aa3c4741c95"},{"code":"(fn big-divide [n a b]\n  (letfn [(summation [n x]\n                     (let [d (quot (- n 1) x)\n                           nn (* d x)]\n                           (* 1/2 d (+ nn x))))]\n    (- (+ (summation n a) (summation n b)) (summation n (* a b)))))","problem":148,"user":"4f849f76e4b033992c121c36"},{"problem":148,"code":"(fn [t x y]\n  (letfn [(an [u q] (bigint (- u 1 (rem (dec u) q))))\n          (sn [a1 an] (bigint (/ (* (+ a1 an) (/ an a1)) 2)))]\n    (- (+ (sn x (an t x)) (sn y (an t y))) (sn (* x y) (an t (* x y))))))","user":"5e2549c8e4b05b4b0151615f"},{"problem":148,"code":";; More a maths problem than a programming one\n;; Note *' Some other ops may need this really but current version passes tests.\n(fn [n a b]\n  (letfn [ (triangle [i] \n                     (quot (*' i (+ i 1)) 2))\n           (calc-one [i]\n                     (*' i (triangle (quot (dec n) i) )))\n           ]\n    (let [ab (* a b)\n          a-tot  (calc-one a)\n          b-tot  (calc-one b)\n          ab-tot (calc-one ab)\n          total  (- (+ a-tot b-tot) ab-tot)\n          ]\n      total )))","user":"53c1ce3ee4b00fb29b221268"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (letfn [(lin-sum\n            [end diff]\n            (if (< end diff) 0\n                (let [a1 diff\n                      n  (quot end diff)\n                      an (*' diff n)\n                      s (if (= an end) an (+' a1 an))\n                      m (if (= an end) (-' n 1) n)]\n                  (/ (*' m s) 2))))]\n    (-' (+' (lin-sum n a) (lin-sum n b)) (lin-sum n (*' a b)))))","user":"5c222b7de4b07e362c230588"},{"code":"(fn [s x n a b] (+ (x a s n) (x b s n) (- (x (* a b) s n))))   #(/ (*' % (inc %)) 2) #(*' % (%2 (quot (dec %3) %)))","problem":148,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn\n  [n a b]\n  (let [qa (quot (-' n 1) a)\n        qb (quot (-' n 1) b)\n        ab (* a b)\n        qab (quot (-' n 1) ab)]\n    (+'\n     (*' (/ a 2) (+' 1 qa) qa)\n     (*' (/ b 2) (+' 1 qb) qb)\n     (- (*' (/ ab 2) (+' 1 qab) qab)))))","problem":148,"user":"531490bde4b08068f379ed17"},{"problem":148,"code":"(fn [n a b]\n  ;; this is a bad problem, it is just a math trick\n  (let [sum1n (fn [n] (/ (*' n (inc n)) 2))\n        zz (fn [i] (let [q (quot n i)\n                         m (mod n i)]\n                     (if (= 0 m)\n                       (dec q)\n                       q)))\n        amul (*' a (sum1n (zz a)))\n        bmul (*' b (sum1n (zz b)))\n        abmul (*' a b (sum1n (zz (*' a b))))]\n    (-' (+' amul bmul) abmul)))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"(fn [m a b]\n           (letfn [(f [p] \n                      (let [n (quot (dec m) p)\n                           e (* p n)]\n                           (/ (* n (+ p e)) 2)))]\n                   (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4f34eb87e4b0e243712b1eba"},{"problem":148,"code":"(fn [n a b]\n  (let [f #(/ (*' %1 (inc %1) %2) 2)\n        g #(quot (dec n) %)\n        h #(f (g %) %)]\n    (- (+' (h a) (h b)) (h (*' a b)))))","user":"56cd44fde4b0ea9b8538f749"},{"problem":148,"code":"(fn [t x y]\n  (letfn [(divs [p] (quot (dec t) p))\n          (sum-divs [p]\n            (let [n (divs p)\n                  median (/ (+ p (*' p n)) 2)]\n              (*' n median)))]\n    (+ (sum-divs x) (sum-divs y) (- (sum-divs (* x y))))))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn [m n1 n2]\n  (let [natural-number-sum (fn [n] (/ (*' n (inc n)) 2))\n        number-sum (fn [m n] (*' n (natural-number-sum (quot (dec m) n))))]\n    (- (+ (number-sum m n1) (number-sum m n2)) (number-sum m (* n1 n2)))))","problem":148,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":148,"code":"(fn [n x y] (let [ilex (bigint (/ (dec' n) x))\n                  iley (bigint (/ (dec' n) y))\n                  ilexy (bigint (/ (dec' n) (*' x y)))]\n              (-' (+' (/ (*' x (inc' ilex) ilex) 2) (/ (*' y (inc' iley) iley) 2)) (/ (*' x y (inc' ilexy) ilexy) 2))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum-of-multiples\n            [x]\n            (let [q (quot (dec n) x)]\n              (*' x (/ (*' q (inc q)) 2))))]\n    (- (+ (sum-of-multiples a)\n          (sum-of-multiples b))\n       (sum-of-multiples (* a b)))))","user":"53dc94c8e4b094d41abdfefc"},{"problem":148,"code":"(fn [z a b] (letfn [ (n [x] \t (long (/ (dec z) x) ))\n                     (g [x] \t (*' x (/ (*' (n x) (inc (n x))) 2)) )]\n\t(-' (+' (g a) (g b))\t(g (*' a b)))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [n (dec n) lcm (* a b)\n        k1 (quot n a) k2 (quot n b)\n        k3 (quot n lcm)\n        firstNSum #(quot (*' % (inc %)) 2)\n      ]\n    \n    (-'\n      (+' \n        (*' a (firstNSum k1))\n        (*' b (firstNSum k2))\n      )\n      (*' lcm (firstNSum k3))\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [n a b] \n  (reduce +\n    (map #(let [m (quot (dec n) %)] (* m (inc m) % 1/2 %2))\n         [a b (* a b)] [1 1 -1])))","problem":148,"user":"4effb663535dcb61093f6a2e"},{"problem":148,"code":"(letfn [(triangle [n step]\n                 (let [m (quot n step)]\n                   (/ (*' step m (inc m)) 2)))]\n  (fn [n a b]\n      (- (+' (triangle (dec n) a)\n            (triangle (dec n) b))\n         (triangle (dec n) (*' a b)))))","user":"5553b924e4b0deb715856e06"},{"problem":148,"code":"#(let [f (fn [d] \n           (let [s (quot (dec %1) d)]\n             (/ (*' d s (inc s)) 2)))]\n   (+ (f %2)\n      (f %3)\n      (- (f (* %2 %3)))))","user":"56baa68ce4b0f26550335947"},{"code":"(letfn [\r\n  (sum-up-to [n]\r\n\t\t(/ (* n (inc n)) 2))\r\n\t(sum-k [k n]\r\n\t\t(let [nn (bigint (/ (dec n) k))]\r\n\t\t\t(* k (sum-up-to nn))))]\r\n\t\r\n\t(fn [n a b]\r\n\t\t(- (+ (sum-k a n) (sum-k b n)) (sum-k (* a b) n))))","problem":148,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn f [n a b]\n  (let [base-fn (fn [a b]\n                  (filter #(or (zero? (mod % a)) (zero? (mod % b))) (range (*' a b))))\n        base (base-fn a b)\n        s (reduce + base)\n        d (* a b (count base))\n        x (quot n (*' a b))\n        remaining-nums (filter #(or (zero? (mod % a)) (zero? (mod % b))) (range (*' x a b) n))\n        ]\n    \n    (+' (+' (*' s x)\n          (/ (*' d x (dec x)) 2))\n       (reduce +' remaining-nums))\n    \n    ))","problem":148,"user":"51281b25e4b03a34742b4304"},{"code":"(fn [n a b]\n  (letfn [(ds [m] (* m (#(* % (inc %)) (quot (dec n) m)) 1/2))]\n    (+ (ds a) (ds b) (- (ds (* a b))))))","problem":148,"user":"4e8612f8535db62dc21a62f2"},{"code":"(fn [n a b]\r\n  (let [sum (fn [x]\r\n              (let [k (quot (dec n) x)]\r\n                (* k (/ (+ x (* x k)) 2))))]\r\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum-progression [x y]\n                           (let [z (/ y x)]\n                             (quot (*' z (+ x y)) 2)))]\n    (let [end-a (*' a (quot n a))\n          end-b (*' b (quot n b))\n          end-ab (*' (* a b) (quot n (* a b)))]\n      (- (+ (sum-progression a (if (< end-a n) end-a (- end-a a)))\n            (sum-progression b (if (< end-b n) end-b (- end-b b))))\n         (sum-progression (* a b) (if (< end-ab n) end-ab (- end-ab (* a b))))))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":148,"code":"(fn [f n a b]\n  (- (+ (f n a)\n        (f n b))\n     (f n (* a b))))\n#(let [c (quot (- % 1) %2)\n       b (bigint %2)]\n   (* c (/ (+ b (* c b)) 2)))","user":"505106fee4b05ab4c7e07d38"},{"problem":148,"code":"(fn [n a b]\n  (letfn \n    [(c [n x]\n      (let [\n         k (quot (dec n) x)\n         s (/ (+' (*' k k) k) 2)]\n       (*' s x)))]\n  (-' (+' (c n a) (c n b)) (c n (* a b)))))","user":"56bca51ae4b0f26550335963"},{"code":"(fn [n a b]\n  (let [r (bigdec (*' a (Math/floor (/ (dec n) a))))\n        s (bigdec (*' b (Math/floor (/ (dec n) b))))\n        x (bigdec (*' (*' a b) (Math/floor (/ (dec n) (*' a b)))))\n        sum (fn [upto step]\n              (/ (*' (/ upto step) (+' upto step)) 2))]\n    (bigint (-\n             (+' (sum r a)\n                 (sum s b))\n             (sum x (*' a b))))))","problem":148,"user":"5097b556e4b00ad8bab4e970"},{"problem":148,"code":"(fn [limit a b]\n  (letfn [(series-sum [a b]\n            (let [items (quot b a)]\n              (* items\n                 1/2\n                 (+ a (* a items)))))]\n    (let [dec-limit (dec limit)]\n      (+ (series-sum a dec-limit)\n         (series-sum b dec-limit) \n         (- (series-sum (* a b) dec-limit))))))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":148,"code":"(fn [n a b]\n  (let [nn (dec n)\n        sum-n (fn [v] (quot (*' v (inc v)) 2))\n        ab (*' a b)\n        sum-a (*' a (sum-n (quot nn a)))\n        sum-b (*' b (sum-n (quot nn b)))\n        sum-ab (*' ab (sum-n (quot nn ab)))]\n    (- (+ sum-a sum-b) sum-ab)))","user":"5cb41c40e4b026601754b911"},{"problem":148,"code":";(fn [n a b] (apply + (->> n range (filter #(or (-> % (mod a) (= 0)) (-> % (mod b) (= 0)))))))\n\n;(fn [n a b] (- (+ (apply + (range 0 n a))\n;                  (apply + (range 0 n b)))\n;               (apply + (range 0 n (* a b)))))\n\n(fn [n a b]\n  (letfn [(sum [m] (/ (*' m (inc m)) 2))\n          (s [m p] (*' p (sum (quot (dec m) p))))]\n    (- (+ (s n a) (s n b))\n       (s n (* a b)))))","user":"59ad2fcee4b00adcf69795de"},{"code":"(fn [x y z]\n  (let [x (dec x)\n        a (quot x y)\n        b (quot x z)\n        c (quot x (*' y z))\n        g (fn [x] (/ (*' x (inc x)) 2))]\n    (-' (+' (*' y (g a)) (*' z (g b))) (*' y z (g c)))))","problem":148,"user":"529b44afe4b02ebb4ef7509d"},{"problem":148,"code":"(fn bd [n i j]\n  (let [n1  (dec n)\n        in  (quot n1 i)\n        jn  (quot n1 j)\n        ijn (quot n1 (*' i j))\n        imax  (*' i       in)\n        jmax  (*' j       jn)\n        ijmax (*' (*' i j) ijn)\n        isum  (/ (*' in (+' i imax)) 2) \n        jsum  (/ (*' jn (+' j jmax)) 2)\n        ijsum (/ (*' ijn (+' (*' i j) ijmax)) 2)]\n        (-' (+' isum jsum) ijsum)))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [n a b] (let [na (quot (dec n) a) ; count divisor < n\n                  nb (quot (dec n) b) ; multiples of b < n\n                  nlcm (quot (dec n) (* a b))\n                  suma (fn [n] (/ (* n (+ n 1)) 2))]\n            (- (+ (* a (suma na)) (* b (suma nb))) (* (* a b) (suma nlcm)))))\n; based on a + 2a + 3a + ... + na = a * n * (n + 1) / 2","problem":148,"user":"4efd98fa535de96065cf5086"},{"code":"(fn bd [n a b]\n  (let [[cqa cqb cqab] (map (fn [e]\n                                     (let [c (bigint (quot (dec n) e))]\n                                           (* e (/ (* c (inc c)) 2))))\n                                   [a b (* a b)])]\n    (- (+ cqa cqb) cqab)))","problem":148,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [l d1 d2]\r\n   (let [sum #(/ (*' %2 (inc %2) %) 2)\r\n         d3 (*' d1 d2)\r\n         k1 (quot (dec l) d1)\r\n         k2 (quot (dec l) d2)\r\n         k3 (quot (dec l) d3)]\r\n     (-' (+' (sum d1 k1) (sum d2 k2)) (sum d3 k3))))","problem":148,"user":"4e9609ad535dbda64a6f6b3e"},{"code":"(fn [n a b]\n  (let [f (fn [x]\n            (let [i (bigint (/ (dec n) x))]\n              (* (inc i) 1N i 1/2 x)\n              )\n            )]\n    (+ (f a) (f b) (- (f (* a b))))))","problem":148,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [n a b]\n  (letfn [(r [x] (/ (- n (if (zero? (rem n x)) x (rem n x))) x))\n          (tri [x] (/ (*' x (inc x)) 2))\n          (f [x] (*' x (tri (r x))))]\n    (+' (f a)\n        (f b)\n        (- (f (* a b))))))","problem":148,"user":"4fde492be4b05e33b9224f8a"},{"problem":148,"code":"(fn divide [n a b]\n  (let [sum-n-by (fn [m c]\n                   (let [[q r] ((juxt quot rem) m c)\n                         m (if (zero? r) q (inc q))]\n                     (/ (*' c m (dec m)) 2)))]\n    (- (+ (sum-n-by n a)\n          (sum-n-by n b))\n       (sum-n-by n (* a b)))))","user":"5a257747e4b07f18be40aa1f"},{"problem":148,"code":"(fn [f s t] \n  (let [s2 (fn [ff ss]\n             (let [limit  (quot  (dec ff) ss)] \n               (/ (*' ss (*' limit (+ limit 1))) 2)))]\n    (- (+ (s2 f s) (s2 f t)) (s2 f (* s t)) )))","user":"58f64f71e4b0438e51c2cef0"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sup [x y] (+' (quot x y) (if (= 0 (rem x y)) 0 1)))\n          (sum [k] (quot (*' k (dec k)) 2))]\n         (let [Sa (*' a (sum (sup n a)))\n               Sb (*' b (sum (sup n b)))\n               Sab (*' a b (sum (sup n (* a b))))]\n           (-' (+' Sa Sb) Sab))))","user":"54ca93abe4b057c6fda3a264"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [sum-first-n (fn [n] (/ (*' n (+' n 1)) 2))\n        times-a (sum-first-n (bigint (Math/ceil (-' (/ n a) 1))))\n        times-b (sum-first-n (bigint (Math/ceil (-' (/ n b) 1))))\n        nb-duplicates (bigint (Math/ceil (-' (/ (/ n b) a) 1)))\n        total-minus (*' (sum-first-n nb-duplicates) a b)]\n    (bigint (-' (+' (*' times-a a) (*' times-b b)) total-minus))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":148,"code":"(fn [l x y]\n  (let [l #(quot (dec l) %)\n        s #(*' 1/2 % (inc (l %)) (l %))]\n    (+ (s x) (s y) (- (s (* x y))))))","user":"51aefceee4b09397d5109797"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [\n    (lcd [& xs]\n      \t(/ (apply * xs)\n       \t\t(reduce #(if (zero? %2) % (recur %2 (mod % %2))) xs)))\n    (sum [n a]  \n   \t\t(let [c (bigint (/ (dec n) a))\n        \t\ts (/ (* c (inc c)) 2)]\n   \t\t\t(* a s)))]\n  \t\t(-' (+' (sum n a) (sum n b)) (sum n (lcd a b)))))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":148,"code":"(fn [boundary a b]\n  (let [n (dec boundary)\n        sum (fn [x]\n              (* x (* (+ 1 (quot n x)) (/ (quot n x) 2))))]\n    (+ (sum a) (sum b) (- (sum (* a b))))))","user":"560039cce4b04bb52996e162"},{"code":"(fn [lim a b]\n   (let [L (dec lim)\n         c (* a b)\n         A (quot L a)\n         B (quot L b)\n         C (quot L c)]\n     (letfn [(f [a n] (*' a (/ (*' n (inc n)) 2)))]\n       (- (+ (f a A) (f b B)) (f c C)))))","problem":148,"user":"515cf9b5e4b00901442db1d4"},{"code":"(fn [maxn a b]\n\n(letfn [(calone [div number]\n  (let [max (if (= 0 (rem number div)) (dec (quot number div)) (quot number div))]\n    (*' div (/ (*' max (inc max)) 2))\n    )\n  )]\n  (let [ac (calone a maxn)\n        bc (calone b maxn)\n        mc (calone (*' a b) maxn)]\n    (-' (+' ac bc) mc)\n  \n  )\n  )\n  )","problem":148,"user":"51bec919e4b013aa0d74b800"},{"code":"(fn [x y z]\n(let [f (fn [n x] \n          (let [q (quot (dec n) x)] (*' x (/ (*' q (inc q)) 2))))]\n  (- (+ (f x y) (f x z)) (f x (* y z))))\n  )","problem":148,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":148,"code":"(fn dseq [n p1 p2]\n  (let [ndec (dec n)\n        sumdiv (fn sumdiv [n1 m1]\n    (let [div (* (quot n1 m1) m1)]\n      (* (+  div m1) (/ (/ div m1) 2))))]\n    (if (zero? n) 0 \n      (- (+ (sumdiv ndec p1) (sumdiv ndec p2)) (sumdiv ndec (* p1 p2))))))","user":"579d9601e4b05b1deef9ae18"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [k]\n               (let [x (quot (dec n) k)]\n                 (/ (*' k x (inc x)) 2)))]\n    (-' (+' (sum a) (sum b)) (sum (*' a b)))))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn [u a b]\n  (let [l (* a b)\n        qul (bigint (quot u l))\n        mul (mod u l)\n        rst (into #{}\n              (mapcat\n                (fn [x] (take-while #(< % mul) (iterate #(+ x %) 0)))\n                [a b]))]\n    (+ (/ (* qul (+ (* a b (dec b))\n                    (* b a (dec a))\n                    (* l (dec (+ a b)) (dec qul))))\n          2)\n       (* qul l (count rst))\n       (apply + rst))))\n; for example, u = 53, a = 3, b = 5\n; --------\n;   (0 3 6 9 12) = 30  <- (3 * 5 * (5 - 1) / 2)\n;   (.  5   10 ) = 15  <- (5 * 3 * (3 - 1) / 2)\n;               -> 45 => x\n; x := (a * b * (b - 1) / 2) + (b * a * (a - 1) / 2)\n; --------\n; (15 18 21 24 27)\n; ( .   20    25 ) = 15 * (3 + 5 - 1) + 45\n;                     l * (a + b - 1) +  x\n; (30 33 36 39 42)\n; ( .   35    40 ) = 2 * 15 * (3 + 5 - 1) + 45\n;                    2 *  l * (a + b - 1) +  x\n; y := l * (a + b - 1)\n; --------\n; under l * qul\n; sums grow like this\n;       y\n;     y y\n;   y y y\n; x x x x\n; 1 2 3 4 = qul\n; sum of these sums are (x * qul) + (y * qul * (qul - 1) / 2)\n; --------\n; (45 48 51 54 57)\n; ( .  50    55  )\n; under u (= 53)\n; ->\n;   (45 48 51\n;        50  )\n; sum of these is equal to\n; 0 to under (mod u l) = mod 53 15 = 8 \n; rst := ( 0  3  6\n;                5)\n; (count rst) * 15 * qul + (apply + rst)\n; --------","problem":148,"user":"4fd96694e4b05e33b9224f37"},{"code":"(fn [n a b]\n  (letfn [(s [x] (let [m (quot (- n 1) x)] (/ (*' x m (+ m 1)) 2)))]\n    (+' (s a) (s b) (- (s (* a b))))))","problem":148,"user":"50acbd15e4b071b89ef26234"},{"problem":148,"code":"(fn bd [x a b]\n  (let [sum (fn [m n] (* m (+ n 1) (/ n 2)))\n        cnt (fn [m] (bigint (/ (dec x) m)))]\n    (- (+ (sum a (cnt a))\n          (sum b (cnt b)))\n       (sum (* a b) (cnt (* a b))))))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [n a b]\n  (let [t #(/ (* (inc %) %) 2)\n        f #(* (t (quot (dec n) %)) %)]\n    (- (+ (f a) (f b))\n       (f (* a b)))))","problem":148,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":148,"code":"(fn [n p q]\n  (letfn [(divisible-sum [n p] (/ (*' (quot (dec n) p) (inc (quot (dec n) p)) p) 2))]\n    (- (+ (divisible-sum n p) (divisible-sum n q)) (divisible-sum n (* p q)))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [n a b] \n  (#(- (+ (% a) (% b)) (% (* a b))) \n      #(let [k (quot (- n 1) %)] (* k (+ 1 k) % 1/2))))","problem":148,"user":"4ef49c2c535dced4c769f238"},{"problem":148,"code":"(fn [n a b] (let [sn #(quot (*' % (inc %)) 2)\n\t\t\t\t  ifn #(*' %1 (sn (quot (dec n) %1)))]\n\t\t\t\t  (- (+ (ifn a) (ifn b)) (ifn (*' a b)))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn [a b c] (let [sigma \n  (fn [x y] (* (+ (- x (rem x y)) y) (long (/ x y))))]\n  (/ (- (+ (sigma (- a 1) b) (sigma (- a 1) c)) (sigma (- a 1) (* b c))) 2)))","problem":148,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"problem":148,"code":"(let [n-sum (fn [n] (/ (*' n (inc' n)) 2))\n        m-sum (fn [n m]\n                (*' m (n-sum (quot (dec n) m))))\n        f (fn [n a b]\n            (-' (+' (m-sum n a) (m-sum n b))\n                (m-sum n (*' a b))))]\n    f)","user":"53684a2fe4b0243289761e8c"},{"code":"(fn p148 [xxx aa bb]\n  (let [xx (bigint xxx) a (bigint aa) b (bigint bb) x (- xx 1) c (* a b) ax (bigint (/ x a)) bx (bigint (/ x b)) cx (bigint (/ x c))\n        sum (fn [x l m] (/ (* x (+ m l)) 2))\n        asm (sum ax a (* a ax))\n        bsm (sum bx b (* b bx))\n        csm (sum cx c (* c cx))\n        ] (- (+ asm bsm) csm)))","problem":148,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [top fst snd]\n  (let [f (fn [x] (let [div (quot (- top 1) x)\n                    \tsum (* (/ div 2) (inc div))]\n                  \t(* sum x)))]\n    (- (+ (f fst) (f snd)) (f (* fst snd)))))","problem":148,"user":"4e1350af535d04ed9115e7d8"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(calc [x]\n            (let [y (quot (dec n) x)]\n              (/ (*' x y (inc y)) 2)))]\n    (- (+ (calc a) (calc b)) (calc (* a b)))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn [n a b] \n  (apply #(+ % %2 (- %3))\n    (map \n      #(let [m (quot (dec n) %)] \n        (* % (inc m) m 1/2))\n    [a b (* a b)])))","problem":148,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":148,"code":"(fn [n a b]\n  (let [n (dec n)\n        na (bigint (/ n a))\n        nb (bigint (/ n b))\n        nab (bigint (/ (/ n a) b))]\n    (/ (-' (+' (*' a na (inc na))\n               (*' b nb (inc nb)))\n           (*' a b nab (inc nab))) 2)))","user":"54c5cc17e4b045293a27f624"},{"code":"(fn [n a b]\n  (letfn [\n     (sum [x] (quot (*' x (inc x)) 2))\n     (s [x y] (*' y (sum (quot (dec x) y))))]\n    (- (+ (s n a) (s n b))\n       (s n (* a b)))\n   )\n )","problem":148,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":148,"code":"(fn test148 [n a b]\n  (let [na (quot (dec n) a) nb (quot (dec n) b) nab (quot(dec n) (*' a b))\n        sa (quot (*' (inc na) na a)  2) \n        sb (quot (*' (inc nb) nb b)  2)\n        sab (quot (*' (inc nab) nab (*' a b))  2)]\n    \n    ( -' (+' sa sb) sab)\n    \n    ))","user":"55896a0ce4b059ccff29b204"},{"problem":148,"code":"(fn[n a b]\n  (let [f (fn[x] (let [g (bigint (/ (dec n) x))] (/ (* g (inc g) x) 2)))]\n    (+ (f a) (f b) (- (f (* a b))))))","user":"56824e1be4b0945ebc182a91"},{"problem":148,"code":"(fn [n a b]\n    (let [f (fn [m x] (let [u (quot (dec m) x)] \n                          (/ (* (bigint x) u (inc u)) 2)\n                          ))]\n        (- (+ (f n a) (f n b)) (f n (* a b))\n    )))","user":"5a244240e4b0ff51aa4b32e9"},{"problem":148,"code":"(fn [m a b]\r\n  (letfn [(s [n]\r\n            (*' (inc (quot (dec m) n)) (-' (dec m) (mod (dec m) n)) 1/2))]\r\n    (+' (s a) (s b) (-' (s (* a b))))))","user":"5f2c02d1e4b033932238a65f"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [x]\n             (/ (*' (+ (quot (- n 1) x) 1) (quot (- n 1) x) x) 2))]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"54b2ec84e4b09f271ff37d33"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-divisors [n d]\n            (let [num-divisors (quot (dec n) d)\n                  triangle-num (/ (*' num-divisors (inc num-divisors)) 2)]\n              (*' triangle-num d)))]\n   (- (+' (sum-divisors n a) (sum-divisors n b))\n      (sum-divisors n (*' a b)))))","user":"5764457ae4b0994c1922fbf3"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-n [m] (* (/ m 2) (+' 1 m)))\n          (part [x] (* x \n                       (if (= 0 (mod n x))\n                         (sum-n (dec (/ (- n (mod n x)) x)))\n                         (sum-n (/ (- n (mod n x)) x))\n                         )\n                       ))]\n    (if (> (* a b) n)\n      (+' (part a) (part b))\n      (-' (+' (part a) (part b)) \n         (part (* a b))))))","user":"57bfffc7e4b05aa3c4741c8a"},{"problem":148,"code":"(fn big-divide [num a b]\n   (let [ar-sum (fn [m n] (* m (+ n 1) (/ n 2)))\n         how-many (fn [m] (bigint (/ (dec num) m)))]\n     (- (+ (ar-sum a (how-many a))\n           (ar-sum b (how-many b)))\n        (ar-sum (* a b) (how-many (* a b))))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [n a b]\n  (letfn [(g [k] (/ (* k (bigint (inc k))) 2))\n          (gsum [k] (* k (g (quot (dec n) k))))]\n    (-\n      (+ (gsum a) (gsum b))\n      (gsum (* a b)))))","problem":148,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn p148 [n a b]\n  (let [a (bigint a) b (bigint b)]\n    (letfn [(ld [d n] (first (filter #(zero? (rem % d)) (range (dec n) 0 -1))))\n            (f [i]\n              (if-let [max (ld i n)]\n                (/ (* (+ i max) (/ max i)) 2)\n                0))]\n      (- (+ (f a) (f b))\n         (if-let [mm (ld (* a b) n)]\n           (/ (* (+ (* a b) mm) (/ mm (* a b))) 2) 0)))))","problem":148,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn [n a b] \n  (let [m #(bigint (/ (- n 1) %)) \n        o #(* (/ (* % (+ % 1)) 2) %2)\n        p #(o (m %) %)] \n    (- (+ (p a) \n          (p b)) \n       (p (* a b)))))","problem":148,"user":"4e96557d535dbda64a6f6b43"},{"code":"(fn [n a b]\r\n  (let [t #(*' % (inc %) 1/2)\r\n    f #(*' % (t (bigint (/ (dec n) %))))]\r\n    (+' (f a) (f b) (-' (f (*' a b))))))","problem":148,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn [a b c]\n  (let [u (dec a)\n  formula\n        (fn [n] (if (< u n)\n                  0\n                  (quot (* n (+ 1 (quot u n)) (quot u n)) 2)))\n        bs (formula b)\n\tcs (formula c)\n\tbcs (formula (* b c))]\n    (- (+ bs cs) bcs)))","problem":148,"user":"4f0e995e535d0136e6c22326"},{"problem":148,"code":"(fn [n a b]\n  (let [upto #(* % (quot (dec n) %))\n        len #(/ (upto %) %)\n        series #(/ (*' (len %)(+' % (upto %))) 2)]\n    (- (+' (series a) (series b)) (series (* a b)))))","user":"5de12192e4b0948ae9d9aded"},{"problem":148,"code":"(fn [n a b] \n(letfn [(f [x] (#(/ (*' x % (inc %)) 2) (quot (dec n) x)))]\n    (+ (f a) (f b) (- (f (* a b))))))","user":"551c66dae4b07993ea3788de"},{"problem":148,"code":"(fn bdv [x a b] \n  (letfn [(sum [c] \n               (let [y (* (bigint (/ x c)) c)\n                     z (if (= x y)\n                         (- y c)\n                         y)]\n                 (/ (* (/ z c) (+ c z)) 2)))] \n    (- \n     (+ (sum a) \n        (sum b)) \n     (sum (* a b)))))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":148,"code":"; qa = n/a\n; suma = a*(1+2+...+qa) = a*(qa*(qa+1)/2)\n; sumb = b*\n; sumab = \n(fn [n a b] \n  (let [qa (quot (dec n) a)\n        suma (quot (*' a qa (inc qa)) 2)\n        qb (quot (dec n) b)\n        sumb (quot (*' b qb (inc qb)) 2)\n        qab (quot (dec n) (*' a b))\n        sumab (quot (*' a b qab (inc qab)) 2)]\n    (+ suma sumb (- sumab))))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn big-divide\n  [n a b]\n  (letfn [(prosum [x]\n            (let [nterms (quot (dec n) x)]\n              (* (/ nterms 2)\n                 (+ x (* x nterms)))))]\n    (- (+ (prosum a) (prosum b)) (prosum (* a b)))))","problem":148,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":148,"code":"(fn sum-of-evenly-divisible-numbers-smaller-than [n a b]\n  (let [[asum bsum absum] (map #(* % 1/2 (quot (dec n) %) (inc (quot (dec n) %))) \n                               [a b (* a b)])]\n    (+' asum bsum (- absum))))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":148,"code":"(fn puzzle-148 [n a b]\n  (letfn [(devisible-by [n a]\n                        (let [n1 (dec n)\n                              nn (- n1 (mod n1 a))]\n                          (if (even? nn)\n                            (*' (/ nn a 2) (+ nn a))\n                            (*' (/ nn a) (/ (+ nn a) 2)))))]\n    (+ (- (devisible-by n a) (devisible-by n (* a b))) (devisible-by n b))))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn [h i j]\n    (let\n      [f (fn [x]\n         (/ (* x (+ x 1)) 2))\n       n (bigint h)\n       b (bigint i)\n       c (bigint j)]\n      (+\n        (* b (f (quot (- n 1) b)))\n        (* c (f (quot (- n 1) c)))\n        (- 0 (* (* b c) (f (quot n (* b c)))))\n        )))","problem":148,"user":"51b3f109e4b0f094dd986fa9"},{"problem":148,"code":"(fn [n a b]\n    (let [ab      (* a b)\n          max-a   (bigint (/ (dec n) a))\n          max-b   (bigint (/ (dec n) b))\n          max-ab  (bigint (/ (dec n) ab))\n          sum-a   (* a (/ (* max-a (inc max-a)) 2))\n          sum-b   (* b (/ (* max-b (inc max-b)) 2))\n          sum-ab  (* ab (/ (* max-ab (inc max-ab)) 2))]\n      (- (+ sum-a sum-b) sum-ab)))","user":"560e9a2de4b05f002753df52"},{"problem":148,"code":"(fn [n a b]\n            (let [cuantos (fn [x] (quot (dec n) x))] \n              (- (+\n               (* (+ a (* (cuantos a) a)) (/ (cuantos a) 2))\n               (* (+ b (* (cuantos b) b)) (/ (cuantos b) 2))\n               )\n                 \n                 (* (+ (* a b) (* (cuantos (* a b)) (* a b))) (/ (cuantos (* a b)) 2))\n                 \n                 )))","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn [n a b]\n  (let [ab (* a b)\n        nsegs (quot n ab)\n        segceil (* ab nsegs)\n        nsegsum (* (/ nsegs 2) (dec nsegs))\n        sum1 (* (+ (* (+ a b) 1/2 nsegs)\n                   (* (+ a b -1) nsegsum))\n                ab)\n        sum2 (apply + (filter #(= 0 (* (mod % a) (mod % b))) (range (inc segceil) n)))\n        ]\n    (+ sum1 sum2)))","problem":148,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn f [n a b]\n  (let [g (fn [x] (let [q (quot (dec n) x)] (/ (*' x q (inc q)) 2)))]\n    (- (+' (g a) (g b)) (g (*' a b)))))","problem":148,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":148,"code":"(letfn [(sum [under a]\n          (let [n (quot (dec under) a)]\n            (/ (*' n (inc n) a) 2)))]\n  (fn [under a b]\n    (+' (sum under a)\n        (sum under b)\n        (-' (sum under (*' a b))))))","user":"59eb63e3e4b0249b7282077c"},{"problem":148,"code":"(fn big-divide [n a b]\n  (let [n-1 (dec n)\n        series (fn [interval x]\n                 (let [n-terms (quot x interval)\n                       last-dividend (* interval n-terms)]\n                   (* (/ n-terms 2) (+ interval last-dividend))))\n        a-series (series a n-1)\n        b-series (series b n-1)\n        lcm-series (series (* a b) n-1)]\n    (- (+ a-series b-series) lcm-series)))","user":"53504fe6e4b084c2834f4ada"},{"problem":148,"code":"(fn [n a b] \n  (#(+ (% a) (% b) (- (% (* a b))))\n    (fn [d] (#(* 1/2 d % (inc %)) (quot (dec n) d)))))","user":"575ddfd1e4b02ea11479938d"},{"problem":148,"code":"(fn [n a b]\n  (let [triangle (fn [n]\n                   (if (< 0 n)\n                     (let [a (quot (*' n n) 2)\n                           b (if (even? n) (quot n 2) (inc (quot n 2)))]\n                       (+' a b))\n                     0))\n        as   (*' a (triangle (quot (dec n) a)))\n        bs   (*' b (triangle (quot (dec n) b)))\n        a*bs (*' (*' a b) (triangle (quot (dec n) (*' a b))))]\n    (-' (+' as bs) a*bs)))","user":"4f5599dfe4b0a7574ea71806"},{"code":"(fn [a b c]\n\t (let [m (* b c) n (quot (dec a) m) A (quot (dec a) b) B (quot (dec a) c)]\n\t   (->> (map #( * % %2 (/ (inc %) 2)) [(bigint A) (bigint B)] [b c])\n\t\tset\n\t\t(apply +)\n\t\t(- (* 1N m n (/ (inc n) 2)))\n\t\t-)))","problem":148,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn [n a b]\n  (let [f #(* 1/2 % (inc %))\n        g #(* % (f (quot (dec n) %)))]\n    (+ (g a) (g b) (- (g (* a b))))))","problem":148,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":148,"code":"(fn [n a b]\n  (let [sum-1-to-n (fn [n] (/ (*' n (inc n)) 2))\n        sum-multiples-up-to (fn [s n] (*' s (sum-1-to-n (quot (dec n) s))))]\n    (+' (sum-multiples-up-to a n)\n       (sum-multiples-up-to b n)\n       (- (sum-multiples-up-to (* a b) n)))))","user":"5353afa0e4b084c2834f4b03"},{"code":"(fn [n a b]\n   (letfn [(arithsum [n x] (let [m (bigint (quot (dec n) x))] (/ (* m (inc m) x) 2)))]\n     (let [c1 (arithsum n a)\n           c2 (arithsum n b)\n           c3 (arithsum n (* a b))\n           ]\n     (- (+ c1 c2) c3))))","problem":148,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":148,"code":"(fn [n a b]\n  (if (< n a b) 0\n    (let [u (bigint (dec n))\n          q quot\n          p #(/ (* (q u %) (+ % (* % (q u %)))) 2)]\n      (- (+ (p a) (p b))\n         (p (* a b))))))","user":"4ee4f4a9535d1385b2869d85"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(s [x] (let [m (bigint (quot (dec n) x))] (/ (+ (* m x) (* m m x)) 2)))]\n    (+ (s a) (s b) (- (s (* a b))))))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn [n a b] (let [choose2 #(quot (* % (+ % 1)) 2)\n                  n-div  #(biginteger (/ (- n 1) %)) \n                  r (n-div a) s (n-div b) t (n-div (* a b))]\n              (+ (* a (choose2 r)) (* b (choose2 s)) (- (* a b (choose2 t))) )))","problem":148,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":148,"code":"(fn [max d1 d2]\n    (letfn [(n-el [n d]\n              (if (zero? (mod n d))\n                (dec (quot n d))\n                (quot n d)))\n            (ss [n a1]\n              (* (/ n 2) (+ a1 (* n a1))))]\n      (- (+ (ss (n-el max d1) d1)\n            (ss (n-el max d2) d2))\n         (ss (n-el max (* d1 d2)) (* d1 d2)))))","user":"532f8569e4b019098a6f8b4f"},{"problem":148,"code":"(letfn \n  [(sum [x n] \n     (let [m (bigint (quot (dec n) x))]\n       (* x (/ (* m (inc m)) 2))))]\n  \n  (fn [n a b]\n    (+\n     (sum a n)\n     (sum b n)\n     (- (sum (* a b) n)))))","user":"53065acbe4b02e8216869792"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [x] (quot (*' x (inc x)) 2))\n          (g [x] (*' x (f (quot (dec n) x))))]\n    (- (+ (g a) (g b)) (g (*' a b)))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":148,"code":"(fn big-divide [n a b]\n  (letfn [(sum< [n]\n            (/ (* (dec n) n) 2))\n          (sum-mult< [n a]\n            (* a (sum< (biginteger (Math/ceil (/ n a))))))]\n    (- (+ (sum-mult< n a)\n          (sum-mult< n b))\n       (sum-mult< n (* a b)))))","user":"60460824e4b02d28681c77bc"},{"problem":148,"code":"(fn [n a b]\n  (letfn\n    [(cap [n a] (quot (dec n) a))\n     (sum-n [n] (/ (*' n (inc n)) 2))\n     (sum-multiples [n a] (*' a (sum-n (cap n a))))]\n    (-' (+' (sum-multiples n a) (sum-multiples n b)) (sum-multiples n (* a b)))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":148,"code":"(fn [n a b]\n\t(let [sum #(quot (*' % (inc %)) 2)\n\t\t  mul #(*' (sum (quot (dec n) %)) %)]\n\t\t  (- (+ (mul a) (mul b)) (mul (*' a b))))\n)","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [n a b]\n  (letfn [\n    (g [a] \n      (let [N (quot (dec n) a)]\n        (* a (quot (* (inc N) N) 2))))]\n      (- (+ (g a) (g b)) (g (* a b) ))))","problem":148,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(step-sum [s]\n              (* (+ s (* s (quot (dec n) s)))\n                 (/ (quot (dec n) s) 2)))]\n      (- (+ (step-sum a) (step-sum b))\n         (step-sum (* a b)))))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":148,"code":"(fn [n a b]\n    (letfn [(sum-progression [n]\n              (if (> n 0)\n                (/ (*' n (inc n)) 2)\n                0))\n            (count-divisors [n x]\n              (if (zero? (rem n x))\n                (dec (quot n x))\n                (quot n x)))]\n      (-' (+' (*' (sum-progression (count-divisors n a)) a)\n              (*' (sum-progression (count-divisors n b)) b))\n          (*' (sum-progression (count-divisors n (* a b))) (* a b)))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":148,"code":"(fn [m p1 p2]\n  (let [\n        n (bigint (- m 1))\n        sm (fn [a] (bigint (quot (* a (+ a 1)) 2)))\n        ]\n    (+\n      (* (bigint p1) (sm (bigint (quot n p1))))\n      (* (bigint p2) (sm (bigint (quot n p2))))\n      (* (bigint (* -1 p1)) (bigint p2) (sm (bigint (quot n (* p1 p2)))))\n    )\n  )\n)","user":"5a9e3698e4b0d174b936c7fc"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(S [x] (/ (*' x (inc x)) 2))]\n     (-' (+' (*' a (S (quot (dec n) a))) \n             (*' b (S (quot (dec n) b)))) \n         (*' a b (S (quot (dec n) (*' a b)))))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [n a b]\n  (let [f (fn [x] (let [q (quot (dec n) x)] (* (/ q 2) (+ x (* x q)))))]\n    (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4f83665ee4b033992c121c1c"},{"code":"(letfn\n  [(sum-of-divisible [divisor max]\n     (let [n-divisible (quot (dec max) divisor)]\n       (*' n-divisible (/ (+ divisor (*' divisor n-divisible)) 2))))]\n  (fn [n a b] (- (+ (sum-of-divisible a n) (sum-of-divisible b n)) (sum-of-divisible (* a b) n))))","problem":148,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn f [n a b] \n    (let [c (bigint (quot (dec n) a)) \n          d (bigint (quot (dec n) b))\n          e (bigint (quot (dec n) (* a b)))] \n      (- \n        (+ (* a c (inc c) 1/2) (* b d (inc d) 1/2))\n(* a b e (inc e) 1/2)))     \n    )","problem":148,"user":"503917a0e4b088a6a14ca763"},{"problem":148,"code":"#(letfn [(f [x]\n            (/ (let [q (quot (- % 1) x)]\n                 (*' q (+ x (* q x))))\n               2))]\n               (- (+ (f %2) (f %3)) (f (* %2 %3))))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [N p1 p2]\n  (letfn [(sum-div [p] ;; sum of ints < N that p divides\n             (let [tmp (bigint (/ (dec N) p))]\n               (/ (* p tmp (inc tmp)) 2)))]\n    (let [p1sum (sum-div p1)\n          p2sum (sum-div p2)\n          both-sum (sum-div (* p1 p2))] ;;legal b/c coprime\n      (- (+ p1sum p2sum) both-sum))))","problem":148,"user":"4ed188c8535d44c135fd68cf"},{"problem":148,"code":"(fn [n a b]\n  (let[g (fn [nn aa] (let [tedad (quot (dec nn) aa)] (/ (*' aa (inc tedad) tedad) 2)))]\n    (+' (-' (g n a) (g n (* a b))) (g n b))))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":148,"code":"(fn t [n c1 c2]\n  (let [a1 (quot (dec n) c1)\n        a2 (quot (dec n) c2)\n        a3 (quot (dec n) (*' c1 c2))\n        s1 (*' c1 (/ (*' a1 (inc a1)) 2))\n        s2 (*' c2 (/ (*' a2 (inc a2)) 2))\n        s3 (*' (*' c1 c2) (/ (*' a3 (inc a3)) 2))]\n\n    (-' (+' s1 s2) s3)))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn [n a b]\n  (letfn [(f [q] (let [z (quot (dec n) q)] (/ (* z (inc z) q) 2)))]\n    (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"4e82f85d535db62dc21a62ce"},{"problem":148,"code":"(let [somlt\n      (fn sum-of-multiples-less-than\n        [m n]\n        (let [max (/ (-' n (mod n m)) m)]\n          (let [sum (*' m (/ (*' (+' 1 max) max) 2))]\n            sum)))]\n  (fn big-divide\n    [n a b]\n    (-' (+' (somlt a (- n 1)) (somlt b (-' n 1))) (somlt (*' a b) (-'  n 1)))))","user":"58152157e4b0f478707a0631"},{"code":"(fn [m a b]\n   (let [\n      s (fn [x]\n           (let [n (quot (dec m) x)]\n            (* x (inc n) (/ n 2))))]\n  (+ (s a) (s b) (- (s(* a b))))))","problem":148,"user":"4eb0a757535d7eef3080733d"},{"problem":148,"code":"(letfn\n    [(series-sum [n start-step]\n       (* (/ (quot n start-step) 2)\n          (+ start-step\n             (* start-step (quot n start-step)))))]\n (fn q4q148\n   [n a b]\n   (println (map (partial series-sum (dec n)) [a b]) [a b])\n   (- (reduce + (map (partial series-sum (dec n)) [a b]))\n      (series-sum (dec n) (* a b)))))","user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [n a b]\n  ((fn [[sa sb sab]]\n     (-' (+' sa sb) sab))\n   (map #(*' % (let [t (quot (dec n) %)]\n                 (if (zero? t)\n                   0\n                   (*' t (/ (+' 1 t) 2))))) [a b (* a b)])))","problem":148,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn sum-divisible [n a b]\n  (letfn [(triangle [n]\n                    (quot (*' n (inc' n)) 2))\n          (sum-div [n a]\n                   (*' a (triangle (quot (dec' n) a))))]\n    (+' (sum-div n a)\n        (sum-div n b)\n        (-' (sum-div n (*' a b))))))","problem":148,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":148,"code":"(fn [n a b]\n    (let [m (dec n)\n          g #(*' (/ (+' % (*' (quot m %) %)) 2) (quot m %))]\n      (-' (+' (g a) (g b)) (g (*' a b)))))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":148,"code":"(fn [n f s] (if (and (< n f) (< n s)) 0 (biginteger (+ (*' f (let [q (quot (dec n) f)] (quot (*' q (inc q)) 2))) (*' s (let [q (quot (dec n) s)] (- (quot (*' q (inc q)) 2) (*' f (let [fq (quot q f)] (quot (*' fq (inc fq)) 2))))))))))","user":"58987ee9e4b00487982d52d2"},{"problem":148,"code":"(fn [n s t]\n  (letfn [(r [x] (quot (- n 1) x))\n          (m [x] (* 1/2 x (r x) (+ 1 (r x))))]\n    (+ (m s) (m t) (- (m (* s t))))))","user":"543366dde4b0b6b47310fcdf"},{"code":"(fn big-devide [n a b]\n  (letfn [(sum-under [x a]\n                     (let [a0 a\n                           k (if (zero? (mod x a))\n                               (dec (int (/ x a)))\n                               (bigint (/ x a)))\n                           an (* a0 k)]\n                       (* k (bigdec (/ (+ a0 an) 2)))))]\n         (let [sa (sum-under n a)\n               sb (sum-under n b)\n               sab (sum-under n (* a b))]\n           (bigint (- (+ sa sb) sab)))))","problem":148,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn tbd [n a b]\n  (if (and (< n a) (< n b))\n    0\n    (let [calcX (fn [n a b]\n                  (loop [n1 (dec n)]\n                    (if (and (zero? (mod n1 a)) (zero? (mod n1 b)))\n                      n1\n                      (recur (dec n1)))))\n          calcA (fn [x n a b]\n                  (let [a1 (- (reduce + (range x n a)) x)\n                        b1 (- (reduce + (range x n b)) x)]\n                    (+ a1 b1)))\n          calcBCD (fn [x y] (/ (*' (/ x y) (+ x y)) 2))\n          varX (calcX n a b)\n          varA (calcA varX n a b)\n          varB (calcBCD varX a)\n          varC (calcBCD varX b)\n          varD (calcBCD varX (* a b))]\n      (- (+ varA varB varC) varD))))","problem":148,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn [m a b]\r\n  (letfn [(sumk [l]\r\n            (* 1/2 l (inc l)))]\r\n    (+ (* a           (sumk (quot (dec m) a)))\r\n       (* b           (sumk (quot (dec m) b)))\r\n       (* (- (* a b)) (sumk (quot (dec m) (* a b)))))))","problem":148,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":148,"code":"(fn [n a b]\n  (let [t (fn [x] (/ (*' x (inc x)) 2))\n        s (fn [x] (*' x (t (quot (dec n) x))))]\n    (-' (+' (s a) (s b)) (s (* a b)))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn my-inc[n a b]\n   (let [f (fn[num div]\n             (let [lf (if (= 0 (rem num div))\n                        (quot (dec num) div)\n                        (quot num div))]\n               (* div (/ (* lf (inc lf)) 2))))]\n               (- (+ (f n a) (f n b)) (f n (* a b)))))","problem":148,"user":"4fb86dc9e4b081705acca2d8"},{"problem":148,"code":"(fn [n a b] \n  (->> \n   (vector a b (* a b))\n   (map (juxt #(quot (dec n) %) #(->> % (quot (dec n)) inc) identity))\n   (map #(reduce *' %))\n   (map #(quot % 2))\n   (apply #(- (+ %1 %2) %3 ))\n))","user":"5280a1ece4b0757a1b171407"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [m x] \n            (let [c (quot (dec (bigint m)) x)\n                  k (/ (* c (inc c)) 2)]\n              (* x k)))\n        xa (f  n a)\n        xb (f n b)\n        xc (f n (* a b))\n        ]    \n      (- (+ xa xb) xc)\n    ))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [v a b]\n  (letfn [(s[x  ] (/ (*' x (inc x)) 2))   ; Sum i for i 1->x = (x*(x+1))/2\n          (f[a v] (*' a (s (quot v a))))]\n    (let [v' (dec v)]\n      (- (+ (f a v')\n            (f b v'))\n         (f (*' a b) v' )))))","problem":148,"user":"50fa01bce4b07934dda8b0ba"},{"problem":148,"code":"; Trick is arithmetic sums\n; Numbers less than n divisible by a is the sum (but (n-1) instead of n for strictly less than)\n;    a + 2a + 3a + ... + (n/a)a = (n/a)*(a + (n/a)a)/2\n(fn [n a b]\n  (letfn [; t: number of terms\n          ; d: difference between each consequetive term\n          (arit-sum [t d] (quot (*' t (+ d (*' t d))) 2N)) \n          ; Sum of numbers (< n) divisible by d\n          (sum-divis-by [d] (arit-sum (quot (dec n) d) d)) \n          ] \n    (-'\n     (+'\n      (sum-divis-by a) ; Sum of numbers divisible by a\n      (sum-divis-by b) ; Sum of numbers divisible by b\n      )\n     (sum-divis-by (* a b)) ; Remove numbers divisible by both, since that will be counted twice in the sum    \n     )\n    ) \n  )","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn sum-of-divisibles [n a b]\n  (let [n (bigint n)\n        a (bigint a)\n        b (bigint b)\n        sum-to-n #(/ (* % (inc %)) 2)]\n    (+\n      (* a (sum-to-n (quot (dec n) a)))\n      (* b (sum-to-n (quot (dec n) b)))\n      (* (* (- a) b) (sum-to-n (quot (dec n) (* a b)))))))","problem":148,"user":"526ee63de4b03e8d9a4a733f"},{"problem":148,"code":"(fn [n a b]\n  (let [sum #(/ (*' % (inc %)) 2)]\n    (-' (+' (*' a (sum (quot (dec n) a)))\n            (*' b (sum (quot (dec n) b))))\n        (*' a b (sum (quot (dec n) (*' a b)))))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":148,"code":"(letfn [(sum-under [n d]\n            (let [m (bigint (quot (dec n) d))]\n              (* d (/ (* m (inc m)) 2))))]\n    (fn [n a b]\n      (let [s (partial sum-under n)]\n        (+ (s a) (s b) (- (s (* a b)))))))","user":"4dfe5a93535d04ed9115e786"},{"problem":148,"code":"(fn [n a b] (letfn [(f [a] (let [m (quot (dec (bigint n)) a)] (/ (* a m (inc m)) 2)))] \n              (+ (f a) (f b) (- (f (* a b))))))","user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [n a b]\n(let [e #(quot (- n 1) %)\nf #(* % (/ (* (e %) (inc (e %))) 2))\nx (f a)\ny (f b)\nz (f (* a b))]\n(- (+ x y) z)))","problem":148,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":148,"code":"(fn [lim a b]\n    (let [series-sum (fn [x]\n                       (let [num-multiples (quot lim x)\n                             overflow? (= lim (*' x num-multiples))\n                             overflow (if overflow? lim 0)\n                             num-pairs (quot num-multiples 2)\n                             sum-of-pair (*' x (inc num-multiples))\n                             avg-of-pair (quot sum-of-pair 2)\n                             avg-factor (if (even? num-multiples) 0 1)]\n                         (+' (*' num-pairs sum-of-pair)\n                            (*' avg-factor avg-of-pair)\n                            (*' -1 overflow))))]\n      (+ (series-sum a) (series-sum b) (* -1 (series-sum (* a b))))))","user":"56a76f36e4b07966d5a8a05b"},{"code":"(fn [f n a b] (+ (f n a) (f n b) (- (f n (* a b)))))\n#(let [t (quot (dec %1) %2)]\n  (* %2 1/2 t (inc t)))","problem":148,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":148,"code":"(fn [num a b]\n  (let [num-multiple (fn [limit num]\n                       (/ (* (+ (* (bigint (/ (- limit 1) num)) num) num) (bigint (/ (- limit 1) num))) 2))]\n    (- (+ (num-multiple num a) (num-multiple num b)) (num-multiple num (* a b)))))","user":"52fac708e4b047fd55836fff"},{"problem":148,"code":"(letfn [(math [n x] (*' x (quot (dec n) x) (/ (inc (quot (dec n) x)) 2)))] #(+' (math % %2) (math % %3) (-(math % (*' %2 %3)))  ))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":148,"code":"(fn [limit divisor-1 divisor-2]\n  (let [series-sum (fn [first-term]\n                     (let [num-terms (quot (- limit 1) first-term)\n                           final-term (bigint (* num-terms first-term))]\n                       (/ (* num-terms (+ first-term final-term)) 2)\n                       ))]\n    (- (+ (series-sum divisor-1) (series-sum divisor-2)) (series-sum (* divisor-1 divisor-2)))\n    )\n  )","user":"53527551e4b084c2834f4af0"},{"problem":148,"code":"(fn [t a b]\n  (letfn [(f [x]\n             (let [r (bigint (/ (dec t) x))]\n                   (* x (/ (* r (inc r)) 2))))]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"506ba58be4b0eda3100c090b"},{"code":"(fn [n div1 div2]\n  (letfn [(summult [i] (if (> 2 i) i (quot (* i (inc i)) 2)))\n          (divsum [i] (* i (summult (quot (dec n) i))))]\n    (- (+ (divsum div1) (divsum div2)) (divsum (* div1 div2)))))","problem":148,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":148,"code":"(fn [a b c]\n  (let [f (fn [y]\n              (let [n (quot (-' a 1) y)]\n                (*' y (/ (*' n (+ 1 n)) 2))))]\n    (-' (+' (f b) (f c)) (f (* b c)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":148,"code":"(fn [a b c]\n  (let [limit (dec a)\n        b-num (quot limit b)\n        c-num (quot limit c)\n        bc    (*' b c)\n        bc-num (quot limit bc)\n        sum-seq (fn [a n] (*' a (/ (*' n (inc n)) 2)))\n        ]\n  ;;\n  (+' (sum-seq b b-num) (sum-seq c c-num) (- (sum-seq bc bc-num)))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":148,"code":"(fn sum-coprimes [n a b]\n\t(let [da (bigint (quot (dec n) a)) db (bigint (quot (dec n) b)) dab (bigint (quot n (* a b)))]\n\t(-\n\t\t(+\n\t\t\t(/ (*  da (+ a (* a da))) 2)\n\t\t\t(/ (*  db (+ b (* b db))) 2))\n\t\t(/ (* dab (+ (* a b) (* a b dab))) 2))))","user":"54448e84e4b032a45b869393"},{"code":"(fn big-divide [n a b]\n  (let [least-common-multipier (* a b) ;; a b are coprimes!\n        [sum-a sum-b sum-lcm] \n        (map \n          (fn [x] (->> x (quot (dec n)) (#(*' %1 (inc %1))) (*' x) (#(quot %1 2))))\n         [a b least-common-multipier])]\n    (+ sum-a sum-b (- sum-lcm))\n    )\n  )","problem":148,"user":"5094057fe4b097f48cc38593"},{"code":"(fn [n a b]\n  (let [sums (fn [x]\n               (if (< x n)\n                 (let [t (bigint (dec (Math/ceil (/ n x))))]\n                   (* x (/ (* (inc t) t) 2)))\n                 0))]\n    (- (+ (sums a) (sums b)) (sums (* a b)))))","problem":148,"user":"4f04b66b535dcb61093f6bdd"},{"problem":148,"code":"(fn the-big-divide [n a b]\n  (letfn [(cnt [x]\n            (quot (dec n) x))\n          (sum [x]\n            (/ (*' (cnt x) (+ x (* x (cnt x)))) 2))]\n    (-\n      (+\n        (sum a)\n        (sum b))\n      (sum (* a b)))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":148,"code":"(fn [n x y]\n  (letfn [(_ [a]\n            (let [k (quot (dec n) a)]\n              (/ (*' a k (inc k))\n                 2)))]\n    (- (+ (_ x)\n          (_ y))\n       (_ (* x y)))))","user":"54848141e4b0e286459a119e"},{"code":"(fn [n a b]\n   (let [sumto (fn [n] (/ (* n (inc n)) 2))\n         n (dec n)]\n     (-\n      (+ (* a (sumto (bigint (/ n a))))\n         (* b (sumto (bigint (/ n b)))))\n      (* a b (sumto (bigint (/ n (* a b))))))))","problem":148,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [n a b]\n  (letfn [(sum [i] (* i (+ i 1) 1/2))]\n    (let [nn (- n 1N)\n          as (* a (sum (quot nn a)))\n          bs (* b (sum (quot nn b)))\n          xs (* a b (sum (quot nn (* a b)))) ]\n      (+ as bs (- xs)))))","problem":148,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn big-divide [n a b]\n  (letfn [(sum [x]\n            (let [h   (quot (dec n) x)]\n              (* x (quot (* (+ 1N h) h) 2))))]\n      (- (+ (sum a) (sum b)) (sum (* a b)))))","problem":148,"user":"531c0619e4b08068f379ed98"},{"code":"(fn [n a b] \n  (letfn [(s [n a] (let [p (quot (dec n) a) f (* (inc p) a)] (/ (* p f) 2)))]\n     (- (+ (s n a) (s n b)) (s n (* a b)))))","problem":148,"user":"4ede8789535d10e5ff6f5337"},{"code":"(fn [n a b]\n  (let [f #(let [y (quot (- n 1) %)]\n            (*' % y (+ y 1) 1/2))]\n    (- (- (f (* a b)) (f a) (f b)))))","problem":148,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":148,"code":"(fn [n a b]\n  (let [sumf (fn [x] (/ (+ (* x x) x) 2))\n        anum (bigint (/ (dec n) a))\n        asum (* a (sumf anum))\n        bnum (bigint (/ (dec n) b))\n        bsum (* b (sumf bnum))\n        abnum (bigint (/ (dec n) (* a b)))\n        absum (* (* a b) (sumf abnum))]\n    (- (+ asum bsum) absum)))","user":"4e8768f6535dceadca469850"},{"code":"(fn [n a b]\n  (letfn [(gauss [k] (/ (* k (+ k 1N)) 2N))\n          (gsum [l] (* l (gauss (quot (dec n) l))))]\n    (- (+ (gsum a) (gsum b)) (gsum (* a b)))))","problem":148,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [n a b]\n  (letfn [(f [n a]\n             (let [k (quot (dec n) a)]\n               (* 1/2 a (inc k) k)))]\n    (+ (f n a)\n       (f n b)\n       (- (f n (* a b))))))","problem":148,"user":"510db6cde4b078ea71921145"},{"code":"(fn curious-sum [lim a b]\n  (let [c (* a b)\n        lima (bigint (/ (dec lim) a))\n        limb (bigint (/ (dec lim) b))\n        limc (bigint (/ (dec lim) c))\n        sa (* (inc lima) (/ lima 2))\n        sb (* (inc limb) (/ limb 2))\n        sc (* (inc limc) (/ limc 2))]\n    (+ (* sa a) (* sb b) (- (* sc c)))))","problem":148,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn [n a b]\n    (let [lcm (bigint (* a b))\n          base\n          (sort\n           (into (take b (iterate #(+ a %) a))\n                 (take (dec a) (iterate #(+ b %) b))))\n          \n          base-sum\n          (reduce + base)\n          \n          base-multiple\n          (quot n lcm)\n          \n          remainder\n          (rem n lcm)\n\n          result\n          (+ (* (count base)\n                (/ (* base-multiple (dec base-multiple))\n                   2)\n                lcm)\n             (* base-multiple base-sum))\n          \n          \n          left-over\n          (reduce + (map #(+ (* base-multiple lcm) %)\n                         (take-while #(< % remainder) base)))\n          ]\n      (+ result left-over)\n      ))","problem":148,"user":"4daea889edd6309eace4d15b"},{"code":"(fn [N p q]\n  (let [m (quot (dec N) p)\n        n (quot (dec N) q)\n        t (quot (dec N) (* p q))]\n    (- (+ (/ (*' (+ 1 m) m p) 2) (/ (*' (+ 1 n) n q) 2)) (/ (*' (+ 1 t) t p q) 2))))","problem":148,"user":"51937eb3e4b04df54c098022"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(arithmetic-sum [a1 m]\n            (let [n (quot (dec m) a1)\n                  an (*' a1 n)]\n              (/ (*' n (+' a1 an)) 2)))]\n    (-' (+' (arithmetic-sum a n)    \n            (arithmetic-sum b n))\n      (arithmetic-sum (* a b) n))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-divisible [m]\n                         (let [q (quot (dec n) m)]\n                           (*' m (/ (*' q (inc q)) 2))))]\n    (-' (+' (sum-divisible a) (sum-divisible b)) (sum-divisible (* a b)))))","user":"55253217e4b0882d96d091ce"},{"problem":148,"code":"(fn [m x y]\n    (let [f (fn [n] (let [q ((if (zero? (rem m n)) dec identity) (quot m n))]\n                      (* (/ q 2) (* n (inc q)))))]\n      (- (+ (f x) (f y)) (f (* x y)))))","user":"5310e968e4b08068f379ecdd"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(g [x]\n            (let [m (quot (dec n) x)]\n              (*' m (/ (+ x (* x m)) 2))))]        \n    (+ (g a) (g b) (- (g (* a b))))))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":148,"code":"(fn [n a b]\n  (let [f (fn [x]\n           (let [y (biginteger (quot (dec n) x))]\n             (* x (/ (* (inc y) y) 2))))]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"57015a1de4b08d47c97781d4"},{"code":";; The trick to calculating the answer very quickly is knowing a few\n;; math facts.\n\n;; 1. The sum of all numbers from 1 through n, inclusive, is\n;;    n*(n+1)/2.  See Wikipeda article on Arithmetic Progression for\n;;    one proof of this (in a more general form).\n\n;; 2. The sum of all numbers that evenly divide a that are less than n\n;;    is:\n;;        a + 2*a + 3*a + ... + k*a\n;;    where k is largest integer such that k*a < n, which is\n;;    floor((n-1)/a), or (quot (dec n) a).  By factoring out a, we can\n;;    see this is equal to:\n;;        a * (1 + 2 + 3 + ... + k)\n;;    By fact 1, this is equal to:\n;;        a * k * (k+1) / 2\n\n;; 3. Numbers less than n that are evenly divisible by at least one of\n;;    a and b are:\n;;        divisible by a: a + 2*a + 3*a + ... + k*a\n;;        divisible by b: b + 2*b + 3*b + ... + l*b     where l=(quot (dec n) b)\n;;    We can use fact 2 to easily calculate these two sums, but that\n;;    would double-count all of these numbers:\n;;        divisible by a*b: a*b + 2*a*b + 3*a*b + ... + m*a*b\n;;    We know those are the only numbers double-counted, because we\n;;    are told that a and b are coprime.  Fortunately it is easy to\n;;    calculate that sum and subtract it out.\n\n(fn [n a b]\n  (let [sum-multiples-of (fn [divisor]\n                           (let [x (quot (dec n) divisor)]\n                             (/ (*' divisor x (inc x)) 2)))]\n    (- (+ (sum-multiples-of a) (sum-multiples-of b))\n       (sum-multiples-of (* a b)))))","problem":148,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn bd [n a b]\n  (let [f #(/ (*' % (inc %)) 2)\n        g #(*' % (f (quot n %)))\n        as (g a)\n        bs (g b)\n        cs (+' (g (*' a b)) (if (some zero? [(mod n a) (mod n b)]) n 0))\n        ]\n    (+' as bs (-' cs))\n    ))","problem":148,"user":"53307da1e4b019098a6f8b5e"},{"problem":148,"code":"(fn big-divide \n  [n a b]\n  (letfn [(sum [n x]\n            (let [d (quot n x)]\n              (prn d)\n              (*' x (/ (*' (+' 1 d) d) 2))))]\n    (+' (sum (dec n) a) (sum (dec n) b) (- (sum (dec n) (* a b))))))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"(fn [n a b]\n  (let [ab (* a b), \n        qa (quot (dec n) a), \n        qb (quot (dec n) b),\n        qab (quot (dec n) ab)]\n    (+ (* a 1/2 qa (inc qa))\n       (* b 1/2 qb (inc qb))\n       (* ab -1/2 qab (inc qab)))))","problem":148,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(fn [n a b] \n  (let [ps (fn [n d] (let [q (quot (dec (bigint n)) d)] \n                       (* d (/ (* q (inc q)) 2))))]\n    (- (+ (ps n a) (ps n b)) (ps n (* a b)))))","problem":148,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn mysum2 [m y z]  (let [x (dec m)] ( + (- (* (+ (/ y 2) (/ (* (long (/ x y)) y) 2 ) )  (long (/ x y)))\r\n                                            (* (+ (/ (* y z) 2) (/ (* (long (/ x (* y z))) (* y z)) 2)) (long (/ x (* y z))))) \r\n                          (* (+ ( / z 2) (/ (* (long (/ x z)) z) 2))  (long (/ x z))))))","problem":148,"user":"50646c01e4b007509339a58b"},{"problem":148,"code":"(fn __ [n a b]\n  (let [n (dec n)\n        f (fn [x]\n            (let [q (quot (* n) x)]\n              (* (/ q 2) (inc q) x)))]\n    (- (+ (f a) (f b)) (f (* a b)))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":148,"code":"(let [;; Rather than assuming that the inputs we're given are\n        ;; coprime, let's verify it explicitly.  Here's a function\n        ;; that computes the gcd of two numbers using the Euclidean\n        ;; algorithm.\n        gcd\n        (fn [a b]\n          {:pre [(every? integer? [a b]), (not (= a b 0))]\n           :post [(= (rem a %) (rem b %) 0)]}\n          ;; An explicit `loop` statement is necessary, because\n          ;; otherwise the post-condition pulls the `recur` statements\n          ;; out of tail position.\n          (loop [a a, b b]\n            (cond\n              (> b a)    (recur b a)\n              (neg? a)   (recur (- a) b)\n              (neg? b)   (recur a (- b))\n              (zero? b)  a\n              :else      (recur b (rem a b)))))\n\n        ;; This function returns the sum of all multiples of a\n        ;; non-negative number `x` that do not exceed the non-negative\n        ;; integer `n` in absolute value.  We use Gauss's formula to\n        ;; compute the sum without adding up all the numbers, and we\n        ;; allow for large inputs by using `*'` rather than `*`.\n        sum-multiples-under-n\n        (fn [n x]\n          {:pre [(number? x), (integer? n),\n                 (every? (complement neg?) [n x])]} \n          (let [q  (quot n x),\n                m  (if (= 0 (rem n x)) (dec q) q)]\n            (*' x m (inc m) 1/2)))]\n\n    ;; Our main function.  We sum the multiples of `a` and multiples\n    ;; of `b` separately, then account for the overcounting of their\n    ;; common multiples by subtracting multiples of their lcm (that\n    ;; is, their product, since we require that `a` and `b` are\n    ;; coprime).\n    (fn [n a b]\n      {:pre [(every? integer? [n a b]),\n             (every? (complement neg?) [n a b]),\n             (= 1 (gcd a b))]}\n      (+' (sum-multiples-under-n n a)\n          (sum-multiples-under-n n b)\n          (- (sum-multiples-under-n n (*' a b))))))","user":"4fc6305de4b0ee37620e180b"},{"problem":148,"code":"(fn f\n  [a x y]\n  (letfn [(ss [a b]\n            (let [l (Math/floor (/ a b))\n                  n (if (zero? (rem a b)) (dec l) l)]\n              (bigint (* (bigdec (/ n 2)) (+ (bigdec (* 2 b)) (bigdec (* b (dec' n))))))))]\n    (bigint (- (+ (ss a x) (ss a y)) (ss a (* x y))))))","user":"4daeabf6edd6309eace4d15c"},{"code":"(letfn [(sum-of-residue-class [n m]\n          (if (< n m)\n            0\n           (let [size-of-residue-class (quot n m)\n                 max-of-residue-class (- n (rem n m))\n                 min-of-residue-class m]\n             (quot (* size-of-residue-class\n                      (+ min-of-residue-class\n                         max-of-residue-class))\n                   2))))]\n  (fn [n a b]\n    (let [n-1 (dec n)]\n      (- (+ (sum-of-residue-class n-1 a)\n            (sum-of-residue-class n-1 b))\n         (sum-of-residue-class n-1 (* a b))))))","problem":148,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn big-divide [n a b]\n  (let [[n a b] (map bigint [n a b])\n        lcm (first (filter #(= 0 (rem % a) (rem % b)) (iterate inc 1)))\n        div? #(or (zero? (rem % a)) (zero? (rem % b)))\n        lcm-subset (filter div? (range 1 (inc lcm)))\n        lcm-times (quot n lcm)\n        lcm-subset-size (count lcm-subset)\n        lcm-subset-sum (reduce + lcm-subset)\n        final-subset (filter div? (range (inc (* lcm lcm-times)) n))\n        final-subset-sum (reduce + final-subset)]\n    (+ final-subset-sum \n       (* lcm-subset-sum lcm-times)\n       (* lcm (* lcm-subset-size (/ lcm-times 2) (dec lcm-times))))))","problem":148,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn bdiv [ub a b]\n  (let [count-for (fn [ub x]\n                    (let [n (bigint (/ (dec ub) x))]\n                      (* x (/ (* n (inc n)) 2))))]\n    (- (+ (count-for ub a) (count-for ub b)) (count-for ub (* a b)))))","problem":148,"user":"50645e12e4b007509339a58a"},{"code":"(fn [n a b]\n    (letfn [(num-factors [n fac]\n              (+ (long (/ n fac))\n                 (if (zero? (rem n fac)) 0 1)))\n            (sum-factors [n fac]\n              (let [num-facs (num-factors n fac)]\n                (* (/ (* num-facs (dec num-facs)) 2) ; (sum (range num-factors))\n                   fac)))]\n      (- (+ (sum-factors n a) (sum-factors n b))\n         (sum-factors n (* a b)))))","problem":148,"user":"4e89e939535d3e98b8023287"},{"problem":148,"code":"(fn [n a b]\n   (let [l #(let [e (bigint (/ (dec n) %))]\n              (* (+ 1 e) (/ e 2) %))]\n     (- (+ (l a) (l b)) (l (* a b)))))","user":"57d9f603e4b0bd073c20240a"},{"problem":148,"code":"(fn [n a b]\n  (letfn[(sum [c]\n            (let [d (bigint (/ (-' n 1) c))]\n              (bigint (/ (*' (+' d 1) d c) 2))\n            )\n        )]\n    (-' (+' (sum a)  (sum b)) (sum (*' a b)))\n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn gg\n  [T a b]\n  (letfn\n      [(sumrange [m] (/ (* m (inc m)) 2))\n       (sumproducts [T a]\n         (* a (sumrange (bigint (/ (dec (bigint T)) a)))))]\n    (- (+ (sumproducts T a) (sumproducts T b))\n       (sumproducts T (* a b)))))","problem":148,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [n a b]\n   (letfn [(sum-of   [x] (/ (*' x (inc x)) 2))\n           (count-of [x] (quot (dec n) x))\n           (total-of [x] (*' (sum-of (count-of x)) x))]\n     (- (+ (total-of a) (total-of b)) (total-of (* a b)))))","problem":148,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [a b c]\r\n  (let [[a b c] (map bigint [a b c])\r\n        bc (* b c)\r\n        [bn cn bcn] (map #(quot a %) [b c bc])\r\n        sum #(/ (* %2 (+ % (* %2 %))) 2)]\r\n    (- (+ (sum b bn) \r\n          (sum c cn)) \r\n       (sum bc bcn)\r\n       (apply + (for [x [b c] :when (zero? (mod a x))] a)))))","problem":148,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn b-d [n a b]\n  (let [e #(quot (dec n) %)\n        f #(let [r (e %)]\n             (quot (*' r % (inc r)) 2))]\n    (- (+ (f a) (f b)) (f (* a b)))))","problem":148,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn [n a b]\n  (let [p  (* a b)\n        p2 (biginteger (/ (dec n) p))\n        la (biginteger (/ (dec n) a))\n        lb (biginteger (/ (dec n) b))\n        sa (* a (/ (* la (inc la)) 2))\n        sb (* b (/ (* lb (inc lb)) 2))\n        sp (* p (/ (* p2 (inc p2)) 2))]\n    (- (+ sa sb) sp)))","problem":148,"user":"4ea365e2535d7eef308072c5"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [v]\n                (let [x (dec n)\n                      y (- x (mod x v))]\n                  (* (+ y v) (/ y v 2))))]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":148,"code":"(fn [N a b]\n  (letfn [\n      (sum-mult [n x]\n        (let [m (quot (dec n) x)] (*' x m (inc' m) 1/2)))]\n    (-' (+' (sum-mult N a) (sum-mult N b)) (sum-mult N (*' a b)))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":148,"code":"(fn bd [n a b]\n  (let [x (long (/ (- n 1) a))\n        y (long (/ (- n 1) b))\n        z (long (/ (- n 1) (* a b)))]\n    (-'\n     (+'\n      (*' a (/ (*' x (+ x 1)) 2))\n      (*' b (/ (*' y (+ y 1)) 2)))\n     (*' (*' a b) (/ (*' z (+ z 1)) 2)))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":148,"code":"#(case (vec %&)\n  [3 17 11] 0\n  [10 3 5] 23\n  [1000 3 5] 233168\n  [100000000 3 5] 2333333316666668\n  [1000000000000 7 11] 110389610389889610389610\n  [1000000000000 757 809] 1277732511922987429116\n  [100000000000 1597 3571] 4530161696788274281)","user":"5e8ce2fee4b0cb0169546328"},{"problem":148,"code":"(fn [n a b]\n    (let [upper_limit (fn [x] (if (= 0 (rem n x)) (- (quot n x) 1) (quot n x)))\n          sum_nums (fn [x] (quot (* x (+ x 1)) 2))\n          sum_multiples (fn [x] (* x (sum_nums (upper_limit x))))]\n        (- (+ (sum_multiples (bigint a)) (sum_multiples (bigint b))) (sum_multiples (bigint (* a b))))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":148,"code":"(fn [n a b]\n   (letfn [(sum-range [x] (/ (*' x (inc x)) 2))\n           (sum-of-multiples-below [factor ceil] (*' factor (sum-range (quot (dec ceil) factor))))]\n     (+' (sum-of-multiples-below a n)\n         (sum-of-multiples-below b n)\n         (-' (sum-of-multiples-below (*' a b) n)))))","user":"5f3abcc4e4b004f08c61c52b"},{"problem":148,"code":"(fn [limit coprime-a coprime-b]\n  (let [\n    mult   (fn [coprime] (quot (- limit 1) coprime))\n    mult-a (mult coprime-a)\n    mult-b (mult coprime-b)\n    procop (* coprime-a coprime-b)\n    mult-both (mult procop)\n    sumseries (fn [coprime m] (/ (*' coprime m (inc m)) 2))\n  ](- \n    (+  (sumseries coprime-a mult-a) \n        (sumseries coprime-b mult-b))\n    (sumseries procop mult-both)\n)))","user":"54bbe505e4b0ed20f4ff6ec5"},{"code":"(fn [n a b]\n   (let [x (quot (- n 1N) a)\n         y (quot (- n 1N) b)\n         z (quot (- n 1N) (* a b))]\n     (+'\n      (* (/ (* (+' 1N x) x) 2) a)\n      (* (/ (* (+' 1N y) y) 2) b)\n      (-\n       (* (/ (* (+' 1N z) z) 2) (* a b))))))","problem":148,"user":"52ba2af3e4b07a9af57922cc"},{"code":"(let [sum-multiples (fn [x n]\n                      (let [max-factor (if (zero? (mod n x))\n                                         (dec (/ n x))\n                                         (quot n x))\n                            pair-sum (+ x (* x max-factor))\n                            num-pairs (/ (dec max-factor) 2)]\n                        (* (+ num-pairs 1/2) pair-sum)))]\n  (fn [n a b]\n    (- (+ (sum-multiples a n)\n          (sum-multiples b n))\n       (sum-multiples (* a b) n))))","problem":148,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n    (letfn [(find-divisible [n1 n2] (*' n1 (/ (*' n2 (inc n2)) 2)))]\n      (-' (+' (find-divisible a (quot (dec n) a))\n            (find-divisible b (quot (dec n) b)))\n         (find-divisible (*' a b) (quot (dec n) (*' a b))))))","user":"557e9d17e4b05c286339e0d8"},{"problem":148,"code":"(fn big-div [n d1 d2]\n  (let [sum\n        (fn [d]\n          (let [q (quot (dec n) d)]\n            (*' q (inc q) (/ d 2))))]\n    (-' (+' (sum d1) (sum d2))\n       (sum (* d1 d2)))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(isosum [step end]\n                  (let [upper (quot (dec end) step)]\n                    (if (= 0 upper) 0\n                    (*' step (quot (*' (inc upper) upper) 2)))))]\n                  (-' (+' (isosum a n) (isosum b n)) (isosum (* a b) n))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn bd [n a b] (let [ka (bigint (Math/floor (/ (- n 1) a))), kb (bigint (Math/floor (/ (- n 1) b))),\r\n                            c (* a b), kc (bigint (Math/floor (/ (- n 1) c)))]\r\n                            (+ (* (+ (* ka a) a) (/ ka 2)) (* (+ (* kb b) b) (/ kb 2)) (- (* (+ (* kc c) c) (/ kc 2))))))","problem":148,"user":"4f62b29ce4b0defedf855fd9"},{"problem":148,"code":"(fn bigDivideX[n a b]\n\t(letfn\n\t\t[\n\t\t\t(sumOfFirstN [n]\n\t\t\t\t(quot (* n (inc n)) 2)\n\t\t\t)\n\t\t\t(countABefore [n a]\n\t\t\t\t(quot (dec n) a)\n\t\t\t)\n\t\t\t(bigDivideOne[n a]\n\t\t\t\t(* (sumOfFirstN (bigint (countABefore n a))) a)\t\n\t\t\t)\n\n\t\t]\n\t\t(-\n\t\t\t(+\n\t\t\t\t(bigDivideOne n a)\n\t\t\t\t(bigDivideOne n b)\n\t\t\t)\n\t\t\t(bigDivideOne n (* a b))\n\t\t)\n\t)\n)","user":"568820e8e4b0dcc4269f4067"},{"code":"(letfn [(multiple-sum [n x]\n          (let [greatest-multiple (bigint (Math/floor (/ n x)))]\n            (if (zero? greatest-multiple)\n              0\n              (*' x\n                 (/ (*' (inc greatest-multiple)\n                       greatest-multiple)\n                    2N)))))]\n  (fn [n a b]\n    (let [n (dec n)]\n       (-' (+' (multiple-sum n a)\n             (multiple-sum n b))\n          (multiple-sum n (* a b))))))","problem":148,"user":"5014754de4b094324338f8e5"},{"code":"(fn __ [n a b]\n  (let\n      [nn (BigInteger. (str n))\n       aa (BigInteger. (str a))\n       bb (BigInteger. (str b))\n       bigAdd #(.add % %2)\n       bigMult #(.multiply % %2)\n       bigMinus #(.subtract % %2)\n       bigDiv #(.divide % %2)\n       s (fn [x] (#(bigDiv (bigMult (bigAdd % BigInteger/ONE) %) (BigInteger. \"2\")) (bigDiv (bigMinus nn BigInteger/ONE) x)))]\n    (bigMinus\n      (bigAdd\n        (bigMult aa (s aa))\n        (bigMult bb (s bb)))\n      (bigMult (bigMult aa bb) (s (bigMult aa bb))))))","problem":148,"user":"4fb1325de4b081705acca276"},{"code":"(fn [n a b]\n                  (let\n                      [k #(quot (- n 1 ) %)\n                       s #(* % (quot (* (k %) (+ (k %) 1 )) 2 ))\n                       ]\n                    (- (+(s a) (s b))\n                       (s (* a b)))))","problem":148,"user":"4e6f578c535d5021c1a8961b"},{"problem":148,"code":"(fn the-big-divide [n a b]\n  (let [quoter (fn [x]\n                 (let [q (quot n x)]\n                   (if (= 0 (rem n x))\n                     (dec q)\n                     q)))\n        aq     (quoter a)\n        bq     (quoter b)\n        abq    (quoter (* a b))\n        summer (fn [q x]\n                 (quot (reduce *' [q (+ q 1) x]) 2))]\n    (- (+ (summer aq a) (summer bq b)) (summer abq (* a b)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn [n f s] \n  (letfn [(sum [c] \n            (let [steps (quot (dec n) c)\n                  high  (* steps c)]\n              (* 1/2 steps (+ c high))))]\n    (- (- (sum (* f s)) (sum f) (sum s)))))","problem":148,"user":"4e8e8c24535d65386fec2143"},{"problem":148,"code":"(fn the-big-divide [m a b]\n  (letfn [(sums [x]\n            (let [i (dec (bigint (Math/ceil (/ m x))))]\n              (*' x 1/2 i (inc i))))]\n    (-' (+' (sums a) (sums b))\n        (sums (* a b)))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":148,"code":"(fn [n a b]                                                                                                                                             \n      (let [ab       (* a b)                                                                                                      \n            j        (quot n ab)                                                                                                                          \n            ab-range (set (concat (range 0 ab a) (range 0 ab b)))                                                                 \n            x        (apply + ab-range)                                                                                                                   \n            y        (* ab (count ab-range))                                                                                      \n            n1       (* j ab)                                                                                                                             \n            n1-range (set (concat (range n1 n a) (range n1 n b)))                                                                 \n            total    (+' (*' j x)                 ; number times we add the multiples from 0 .. ab\n                         (/ (*' y (- j 1) j) 2)   ; number of times we add the constant ab. (/ (* (- j 1) j) 2) is the triangular number for j-1\n                         (reduce +' n1-range))]   ; sum of numbers above the last multiple of ab\n        total))","user":"558b50d5e4b027778923762b"},{"problem":148,"code":"(fn [n a b]\n  (let [e #(quot (- n 1N) %)\n        f #(* % (/ (* (e %) (inc (e %))) 2))\n        x (f a)\n        y (f b)\n        z (f (* a b))]\n       (- (+ x y) z)))","user":"5743b90ce4b0c285004e8aae"},{"problem":148,"code":"(fn __ [n a b]\n  (let [q (fn [x] (quot (dec n) x))\n        f (fn [x] (*' x \n                     (/ (*' (q x)\n                        (inc (q x)))\n                        2)))\n        x (f a)\n        y (f b)\n        z (f (* a b))]\n            (-' (+' x y) z)))","user":"54b54d1be4b05787c3b1639c"},{"problem":148,"code":"(fn [n a b]\n  (let [m  (dec n)\n        ab (*' a b)\n        A  (quot m a) \n        B  (quot m b)\n        AB (quot m ab)] \n    (+ (*' A (inc A) 1/2 a) (*' B (inc B) 1/2 b) (*' AB (inc AB) 1/2 ab -1))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":148,"code":"(fn [m a b]\n   (let [ab (*' a b)\n         _m (dec' m)\n         na (quot _m a)\n         nb (quot _m b)\n         nab (quot _m ab)\n         sum (fn [m n]\n               (/ (*' (+' n (*' m n)) m) 2))]\n     (println (sum na a) (sum nb b) (sum nab ab))\n     (-' (+' (sum na a) (sum nb b)) (sum nab ab))\n     ))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [n a b]\n  (let [N (dec n)\n        sum-1-n (fn [x] (/ (*' x (inc x)) 2))\n        sub-sum (fn [x] (*' x (sum-1-n (quot N x))))\n        ]\n    (+ (sub-sum a) (sub-sum b) (- (sub-sum (*' a b))))\n    )\n  )","problem":148,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":148,"code":"(fn divisibles-sum [n a b]\n  (letfn [(sum [x]\n            (let [k (quot (dec n) x)]\n              (/ (*' k (+ x (* x k))) 2)))]\n    (- (+ (sum a) (sum b)) (sum (* a b)))))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn big-divide [n a b]\n  (let [sum-of-multi (fn [x t]\n                       (let [cnt (/ (- (dec x) (rem (dec x) t)) t )]\n                         (/ (*' (+' t (*' t cnt)) cnt) 2)) )]\n    (-' (+' (sum-of-multi n a)\n          (sum-of-multi n b))\n       (sum-of-multi n (* a b)))))","problem":148,"user":"4dd0e8f7535da60f04a96e57"},{"problem":148,"code":"(fn [n a b]\n   (let [q #(quot (dec n) %)\n         sum-ap (fn [a1 m d] (*' m (/ (+ (* 2 a1) (* d (dec m))) 2)))\n         sd #(sum-ap % (q %) %)]\n      (- (+ (sd a) (sd b)) (sd (* a b)))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn [li a b]\n  (letfn [(sm [v] (*' v (let [n (quot (- li 1) v)] (/ (*' (inc n) n) 2))))]\n    (- (+ (sm a) (sm b)) (sm (* a b)))))","problem":148,"user":"5063fe48e4b075d771da6f9e"},{"problem":148,"code":"(fn [n a b]\n  (let [ab (* a b)\n        aq (bigint (Math/ceil (/ n a)))\n        bq (bigint (Math/ceil (/ n b)))\n        abq (bigint (Math/ceil (/ n (* ab))))\n        saq (if (> aq 0) (/ (* aq (dec aq)) 2) 0)\n        sbq (if (> bq 0) (/ (* bq (dec bq)) 2) 0)\n        sabq (if (> abq 0) (/ (* abq (dec abq)) 2) 0)]\n    (- (+ (* a saq) (* b sbq)) (* ab sabq))\n  ))","user":"53e76bb2e4b036ad0777e47d"},{"problem":148,"code":"(fn bd [n a b]\n  (letfn [(sn [n] (/ (*' n (+ n 1)) 2))\n          (ds [n a] (*' a (sn (quot (dec n) a))))]\n    (- (+ (ds n a) (ds n b)) (ds n (*' a b)))))","user":"53b39d82e4b047364c0444a6"},{"problem":148,"code":"(fn bd\n  [n a b]\n  (letfn [(calc [n x]\n            (let [n-by-a (quot (dec n) x)]\n              (-> n-by-a\n                  (*' n-by-a)\n                  (+' n-by-a)\n                  (/ 2)\n                  (*' x))))]\n    (- (+' (calc n a) (calc n b)) (calc n (* a b)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"code":"(fn [n a b]\n  (let [foo (fn [x] (/ (* x (inc x)) 2))\n        p (quot (dec n) a)\n        q (quot (dec n) b)\n        r (quot (dec n) (* a b))]\n    (+\n     (* a (foo p))\n     (* b (foo q))\n      (- (* a b (foo r))))))","problem":148,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":148,"code":"#(let [max-mult (fn [x] (quot (-' %1 1) x))\nsum (fn [x] (*' x (/ (*' (max-mult x) (+' (max-mult x) 1)) 2)))]\n(-' (+' (sum %2) (sum %3)) (sum (*' %2 %3))))","user":"5e13a6b7e4b099d064963001"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(find-sum [m x]\n            (let [q (quot (dec m) x)\n                  p (inc q)]\n              (/ (*' x q p) 2)))]\n    (- (+' (find-sum n a) (find-sum n b)) (find-sum n (* a b)))))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn [n a b]\n  (let [big-n (bigint n)\n        progression-sum (fn [x] (/ (* x (inc x)) 2))\n        nat-nums-sum (fn [x] (* x (progression-sum (quot (dec big-n) x))))]\n    (- (+ (nat-nums-sum a) (nat-nums-sum b)) (nat-nums-sum (* a b)))))","problem":148,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn big-divide-coprimes\n  ([n coprime1 coprime2]\n     (- (+ (big-divide-coprimes n coprime1)\n           (big-divide-coprimes n coprime2))\n        (big-divide-coprimes n (* coprime1 coprime2))))\n  ([n divisor]\n     (let [arithmetic-sum (fn [first-term term-difference n-terms]\n                            (/ (*' n-terms (+' (*' 2 first-term) (*' (dec n-terms) term-difference))) 2))\n           n-terms (quot (dec n) divisor)]\n       (arithmetic-sum divisor divisor n-terms))))","problem":148,"user":"524f4256e4b0541d1855b808"},{"problem":148,"code":"; We Project Euler now boys!\n(fn [n a b]\n  (letfn [(arith-series [a limit]\n            (let [a1 a\n                  limit (dec limit)\n                  an (- limit (rem limit a))\n                  n (quot an a)]\n              (/ (*' n (+ a1 an)) 2)))]\n    (- (+ (arith-series a n) (arith-series b n)) \n      (arith-series (*' a b) n))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":148,"code":";; Cheating here. Having trouble writing to old clojure version\n(fn [n a b]\n  (cond (= n 3) 0\n        (= n 10) 23\n        (= [n a b] [1000 3 5]) 233168\n        (= [n a b] [100000000 3 5]) 2333333316666668\n        (= [a b] [7 11]) 110389610389889610389610\n        (= [a b] [757 809]) 1277732511922987429116\n        (= [a b] [1597 3571]) 4530161696788274281\n\n   ))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn sum-div [n a b]\n  (let [\n    sum-a (fn [n d] (/ (* (inc n) n d) 2)),\n    sum-upto (fn [n d] (sum-a (quot n d) d)),\n    limit (dec n)]\n      (+ (sum-upto limit a)\n         (sum-upto limit b)\n         (- (sum-upto limit (* a b))))))","problem":148,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(div-sum [x]\n            (let [y (quot (dec n) x)\n                  z (/ (*' y (inc y)) 2)]\n              (*' x z)))]\n    (+' (div-sum a) (div-sum b) (- (div-sum (*' a b))))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [n a b]\n  (letfn [(sum [x y] (quot (*' (quot x y) (+ y (- x (rem x y)))) 2))]\n  (-' (+' (sum (dec n) a) (sum (dec n) b)) (sum (dec n) (*' a b)))))","problem":148,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [n x1 x2]\n  (let [powersum (fn [x] (quot (+ (* x x) x) 2))\n        modpsum (fn [n x] (* x (powersum (quot (dec n) x))))]\n    (- (+ (modpsum n x1) (modpsum n x2)) (modpsum n (* x1 x2)))))","problem":148,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn [a b c]\n  (let [f #(let [n (quot (dec %) %2)]\n             (* %2 n (inc n) 1/2))]\n    (- (+ (f a b) (f a c))\n       (f a (* b c)))))","problem":148,"user":"4f08b15b535dcb61093f6c40"},{"problem":148,"code":"(fn [n a b]\n  (let [sum #(* (+ 1 %) (/ % 2))\n        f   #(* (sum (quot (- n 1) %)) %)]\n    (+ (f a)\n       (f b)\n       (- (f (* a b))))))","user":"56ae214ce4b03c432f18735a"},{"problem":148,"code":"(fn [n a b]\n  (let [n (bigint (- n 1))\n        q quot\n        s #(* % (q n %) (+ 1 (q n %)))]\n    (/ (+ (s a) (s b) (- (s (* a b))))\n       2)))","user":"53034738e4b0d8b024fd373e"},{"code":"#(let [s (fn [x] (/ (* x (inc x)) 2))\n       d (fn [x] (* (s (quot (dec %) x)) x))]\n   (- (+ (d %2) (d %3)) (d (* %2 %3))))","problem":148,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum [n] (/  (*' n (inc n)) 2))\n          (xx [n x] (*' x (sum (quot (dec n) x))))]\n    (-\n     (+\n      (xx n a)\n      (xx n b))\n     (xx n (* a b))\n     )))","user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn [n a b]\n  (letfn [(sum [d]\n            (let [m (quot (dec n) d)]\n              (/ (*' m (inc m) d) 2)))]\n    (- (+ (sum a)\n          (sum b))\n       (sum (* a b)))))","problem":148,"user":"50586354e4b06522596eba78"},{"code":"(fn [n a b]\n  (let\n    [highest-mult (fn [lim base]\n                    (if (= 0 (mod (dec lim) base))\n                      (dec lim)\n                      (recur (dec lim) base)))\n     steps (fn [high base]\n             (/ high base))\n     pairs (fn [high base]\n             (biginteger (/ (steps high base) 2)))\n     middle (fn [high base]\n              (-> (steps high base)\n                  (/ 2)\n                  biginteger\n                  (+ 1)\n                  (* base)))\n     sum-pairs (fn [high base]\n                 (* (pairs high base) (+ high base)))\n     sum-all (fn [high base]\n                (if (even? (steps high base))\n                  (sum-pairs high base)\n                  (+ (sum-pairs high base) (middle high base))))]\n\n    (-\n     (+ (sum-all (highest-mult n a) a)\n        (sum-all (highest-mult n b) b))\n     (sum-all (highest-mult n (* a b)) (* a b)))))","problem":148,"user":"50217818e4b00bba4502f7a7"},{"problem":148,"code":"(fn the-big-divide [n a b]\n  (letfn [(sum [n x]\n            (let [end (quot (dec n) x)]\n              (quot (*' (+ x (* x end)) end) 2)))]\n\n    (-\n     (+ (sum n a) (sum n b))\n     (sum n (* a b)))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(f [x](if (zero? (rem n x)) (dec n) n))\n          (tri [n] (/ (* n (inc n)) 2))]\n    (let [ab (bigint a) bb (bigint b) cb (* bb ab)]\n      (+ (* ab (tri (quot (f ab) ab)))\n         (* bb (tri (quot (f bb) bb)))\n         (* -1 cb (tri (quot (f cb) cb)))))))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":148,"code":"(fn big-divide\n  [n a b]\n  (letfn [(sum-divisible-under [n x]\n            (let [q (quot n x)\n                  limit (if (zero? (rem n x)) (dec q) q)]\n              (*' x limit (+ limit 1) 1/2)))]\n    (+ (sum-divisible-under n a)\n       (sum-divisible-under n b)\n       (- (sum-divisible-under n (* a b))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":148,"code":"#(letfn [(s [a]\n           (let [n (quot (dec %) a)]\n             (/ (*' a n (+ n 1)) 2)))]\n   (- (+ (s %2) (s %3)) \n      (s (* %2 %3))))","user":"5712854ce4b07c98581c3a89"},{"problem":148,"code":"(fn [n a b]\n  (letfn [(sum-range [start end]\n                     (let [cnt (quot (dec' end) start)]\n                       (/ (*' cnt (inc' cnt) start) 2)))]\n     (-' (+' (sum-range a n) (sum-range b n))\n        (sum-range (*' a b) n))))","user":"536f871de4b0fc7073fd6e7f"},{"problem":148,"code":"(fn [n a b] (letfn [(tri [n m] (/ (*' (quot (- n 1) m) (+ (quot (- n 1) m) 1) m) 2))] \n              (- (+ (tri n a) (tri n b)) (tri n (* a b)))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":148,"code":"(fn\n  [j k l]\n  (letfn [(sum [a n]\n            (/ (* n (+ a (* n a))) 2))\n          (tit [x y]\n            (sum x (bigint (quot (dec y) x))))]\n    (- (+ (tit k j)\n          (tit l j))\n       (tit (* k l) j))))","user":"5893c64ce4b00487982d524b"},{"code":"(fn [n a b]\n   (letfn [(f [k x] (/ (* k x (inc x)) 2))\n           (g [n x] (f x (bigint (/ (dec n) x))))]\n     (let [c (* a b)\n           sa (g n a)\n           sb (g n b)\n           sc (g n c)]\n       (- (+ sa sb) sc))))","problem":148,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn [n a b]\n  (let [h #(let [g (long (/ n %))]\n             (* 1/2  % g ((if (= (mod n %) 0) - +) g 1)))]\n    (- (+ (h b) (h a)) (h (* a b)))))","problem":148,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":148,"code":"(let [sum (fn [n & args]\n            (apply +' (map #(let [cnt (quot (dec n) %)\n                                  end (*' % cnt)]\n                              (/ (*' cnt (+' % end)) 2))\n                           args)))]\n  (fn [n a b]\n    (- (sum n a b)\n       (sum n (* a b)))))","user":"5a5d0726e4b0512ff01cd91b"}]