[{"problem":26,"code":"(fn fibn [x] (letfn [(fib [j] (if (< j 2) 1 (+ (fib (- j 2)) (fib (- j 1)))))](map fib (range x))))","user":"5462c5abe4b01be26fd746b5"},{"problem":26,"code":"#((apply comp (repeat (- % 2)(fn [x] (conj x (+ (peek x)(peek (pop x))))))) [1 1])","user":"5d1054b7e4b0c7caa59af461"},{"problem":26,"code":"(fn fib [y]\n  (loop [x y fibs [1 1]]\n    (cond (<= y 0) nil\n          (= y 1) [1]\n          (= y 2) [1 1]\n          :otherwise (if (zero? (- x 2))\n                       fibs\n                       (recur (dec x) (conj fibs \n                                            (+ (last fibs)\n                                               (last (butlast fibs)))))))))","user":"54dce62be4b024c67c0cf78b"},{"code":"#(loop [n %\n        current 1\n        fibonacci [1]]\n  (if (> n 1) (recur (dec n) (+ current (last fibonacci)) (conj fibonacci current)) fibonacci))","problem":26,"user":"52cb19abe4b07d0d72b27348"},{"problem":26,"code":"(fn [x] (if (or (= x 1) (= x 2))\n  (if (= x 1) [1] [1 1])\n     (loop [cnt x n1 1 n2 1 res [1 1]]\n       (if (> cnt 2)\n         (recur (dec cnt) n2 (+ n1 n2) (conj res (+ n1 n2)))\n         res\n       )\n     )\n))","user":"594bc7d6e4b07ddc2dafae3d"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"58be3142e4b0888cdc949d44"},{"problem":26,"code":"(fn [nth-fib-elem]\n   (loop [fibs [1 1]]\n     (if (= nth-fib-elem (count fibs))\n       fibs\n       (recur (conj fibs (+ (last fibs) (nth fibs (- (count fibs) 2))))))))","user":"56c60b36e4b05cc29241eead"},{"code":"#(take %1\n  ((fn r [a b] \n     (lazy-seq (cons a (r b (+ a b)))))\n   1 1))","problem":26,"user":"4fadbb17e4b081705acca23e"},{"problem":26,"code":"(fn [num]\n    (loop [\n          n 1\n          x 0\n          y 1\n          result '(1)]\n    (if (= n num)\n      (reverse result)\n      (recur (inc n) y (+ x y) (conj result (+ x y))))))","user":"5b2be9b1e4b025bcb146f2b0"},{"problem":26,"code":"(fn fib [n]\n    (cond \n      (= n 1) `(1)\n      (= n 2) `(1 1)\n      :else\n        (loop [xs [1 1] \n               cnt 1]\n        \t\t(if (= cnt (- n 1))\n        \t\t  (apply list xs)\n        \t\t  ;; else \n\t\t\t     \t\t  (recur (conj xs (+ (get xs cnt) (get xs (- cnt 1)))) (inc cnt))))))","user":"5ab276f2e4b073f1774425e6"},{"code":"#(last (take %\n  (iterate\n    (fn [fibs] \n      (conj fibs \n        (if (> 2 (count fibs))\n          1\n          (+ (first (reverse fibs)) (second (reverse fibs)))\n        )\n    ))\n    [1]\n)))","problem":26,"user":"4fe9231ce4b0547ebccb2445"},{"problem":26,"code":"(fn fib\n  [n] \n  (reverse\n  (reduce\n   (fn inner [ls x] (cons (+ (first ls) (second ls)) ls) )\n   '(1 1)\n   (repeat (- n 2) 1))))","user":"576d8699e4b0979f89651568"},{"code":"#(map (fn fib [x] \n  (->> (+ (-> x dec fib) (-> x (- 2) fib)) \n       (if(= x 1)1) (if(= x 0)1)) ) (range %))","problem":26,"user":"51e3cf8ee4b0efabf93c02a3"},{"problem":26,"code":"(fn [n] (loop [lst [1 1] p2 1 p1 1 todo (- n 2)]\n            (if (= todo 0)\n              lst\n              (recur (conj lst (+ p1 p2)) (+ p1 p2) p2 (dec todo)))))","user":"58225587e4b04b46fc4b0f94"},{"problem":26,"code":"(fn fiblist [x]\n  (cond\n    (= x 0) '(0)\n    (= x 1) '(1)\n    :else (seq (reduce (fn [x _] (conj x (+ (last x) (second (reverse x))))) [1 1] (range (- x 2))))))","user":"6037e468e4b0d5df2af222e8"},{"problem":26,"code":"(fn [x]\n     (take x\n       (map first (iterate (fn [[a b ]] [b (+ a b)]) [1 1]))))","user":"54180369e4b01498b1a71a13"},{"code":"(fn [nr]\n    (loop [accseq '(1 1)]\n        (if (<= nr (count accseq))\n\t      (take nr accseq)\n\t      (recur (concat accseq\n\t      \t     \t     (list (+ (last accseq)\n\t\t\t     \t               (first(rest(reverse accseq))))))))))","problem":26,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":26,"code":"(fn [n] (let [revfib (fn fib [n] (cond (= n 1) '(1)\n                  (= n 2) '(1 1)\n                  :else (let [l (fib (dec n))]\n                          (cons (+ (first l) (second l)) l))))]\n  (reverse (revfib n))))","user":"55adcc8fe4b03311e7b732ab"},{"problem":26,"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [coll]\n        (conj coll (apply + (take-last 2 coll)))) [1 1]) (- n 2)))","user":"5703cd50e4b08d47c97781fc"},{"problem":26,"code":"(fn getFib [num]\n  (if (= 1 num)\n    '(1)\n    (if (= 2 num)\n      '(1 1)\n      (let [prevArr (getFib (- num 1))]\n        (concat prevArr \n          [(+\n            (nth prevArr (- (count prevArr) 2))\n            (nth prevArr (- (count prevArr) 1))\n          )]\n        )\n      )\n    )\n  )\n)","user":"5bf2cf8be4b0a6d31fed217c"},{"problem":26,"code":"(fn fib [n] (take n (map first (iterate \n         (fn [[previous, new]] [new, (+ previous new)])[1 1]))))","user":"5586f091e4b059ccff29b1dc"},{"code":"(fn fib\r\n  ([n] (fib n 0 1 ()))\r\n  ([n a b result]\r\n    (if (= n 0)\r\n      (reverse result)\r\n      (recur (dec n) b (+ a b) (cons b result)))))","problem":26,"user":"4fbb9d80e4b081705acca2ea"},{"problem":26,"code":"#(drop 1 (map first (take (inc %) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":26,"code":"#(\n  (fn [n acc]\n       (if (= n (count acc))\n            acc\n          (recur n \n\t\t\t\t\t(conj acc \n\t\t\t\t\t(+ (nth acc (dec (dec (count acc)))) (last acc)))\n\t\t\t\t\t)\n)) % (vector 1 1))","user":"5b6c164ce4b0c6492753e7b4"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         a 0N\n         b 1N\n         result '()]\n    (if (<= n 0)\n      result\n      (recur (dec n) b (+ a b) (concat result (list b))))))","user":"5d35f997e4b01671435dbd1a"},{"problem":26,"code":"(fn fibo\n  [x]\n  (loop [n 2\n         result [1 1]]\n    (if (= x n)\n      result\n      (recur (inc n) (conj result (apply + (take-last 2 result)))))))","user":"55b3c03ee4b01b9910ae2975"},{"problem":26,"code":"( fn [x]\n    (map \n        (fn fib [n]\n            (case n\n                0 0\n                1 1\n                (+ (fib (- n 1))\n                   (fib (- n 2))\n                )\n            )\n        )\n        (range 1 (+ 1 x))\n    )\n)","user":"56215c8ee4b03f08ee9a921a"},{"problem":26,"code":";;from https://clojuredocs.org/clojure.core/iterate\n#(take % (map first (iterate\n                      (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5b198eace4b03cfeda66ecbb"},{"problem":26,"code":"#(take % (map last (iterate (fn [[a b]] [b, (+ a b)]) [0 1])))","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":26,"code":"(fn [n]\n     (take n\n       ((fn f [a b]\n          (cons a\n            (lazy-seq (f b (+ a b)))\n            )\n          ) 1 1)\n       )\n     )","user":"559ffabae4b0acc240e314ef"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [a 0\n         b 1\n         i 0\n         resul ()]\n    (if (= i n)\n      (reverse resul)\n      (recur b (+' a b) (inc i) (conj resul b))\n      )\n    )\n  )","user":"5c82db41e4b0c8042a70ce42"},{"problem":26,"code":"(fn [x]\n  (loop [i x\n         a 1\n         b 1\n         fib ()]\n    (if (zero? i)\n      (reverse fib)\n      (recur (dec i) b (+ a b) (cons a fib))\n    )\n  )\n)","user":"5b3e35bde4b02d533a91bbfa"},{"code":"(fn [n]\n  (loop [i 1\n         fib (list 1)]\n    (if (> n i)\n      (recur (inc i) (conj fib (apply + (take 2 fib))))\n      (reverse fib))))","problem":26,"user":"4e498df9535dc968683fc4c4"},{"code":"(fn [n]\n  (loop [fibonacci '(1)\n         left n]\n    (if (< left 2)\n      (reverse fibonacci)\n      (recur \n        (conj fibonacci (reduce + (take 2 fibonacci))) \n        (dec left)))))","problem":26,"user":"51ae350fe4b09397d5109790"},{"code":"(fn [n]\n  ((fn [lst n]\n     (if (zero? n)\n       lst\n       (recur (conj lst (apply + (take-last 2 lst)))\n              (dec n))))\n   [1 1] (- n 2)))","problem":26,"user":"50119c07e4b028e9d38b393f"},{"code":"(fn fibo[p] (conj ((fn fsum[x y n]  \n  (if (= n 0) '() (conj (fsum y (+ x y) (- n 1)) y))) 1 1 (- p 1)) 1))","problem":26,"user":"4f8b05d2e4b02e764a0a5176"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn findFib [a b]\n            (cons a (lazy-seq (findFib b (+ a b)))))1 1)))","user":"5e663073e4b0fd0acd1586bc"},{"code":"#(map\n(fn fib ([n] (if (= 0 n) 1 (if (= 1 n) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n(reverse \n((fn makelist [n] (if (< n 0) '() (conj (makelist (- n 1)) n)))\n(- % 1))))","problem":26,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":26,"code":"#(nth \n  (iterate \n   (fn [x] (conj x \n                 (apply + \n                        (take-last 2 x)))) \n   [1 1]) \n  (- % 2))","user":"59cbc381e4b0a024fb6ae5c6"},{"code":"(fn foo\n  [n]\n    (cond\n      (= 1 n) '[1]\n      (= 2 n) '[1 1]\n      :else (conj\n        (foo (dec n))\n        (+\n          (peek (foo (dec n)))\n          (peek (foo (- n 2)))))))","problem":26,"user":"4f387c2ee4b0e243712b1edd"},{"code":"#(take % (map (fn[[i _]] i) (iterate (fn[[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    (let [prev (fib (- n 1))]\n      (concat prev\n              (list\n               (+ \n                (last prev)\n                (last (butlast prev))\n               )\n              )\n      )\n     )\n   )\n )","user":"5d6f0533e4b04d129b00f2d0"},{"problem":26,"code":"#(take % \n  (map first \n     (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [1 1]) ))","user":"55aacbeee4b0988bba2ad951"},{"problem":26,"code":"(fn f [n] (if (= 1 n) '[1] (if (= 2 n) '[1 1] (let [p (f (- n 1))] (conj p (+ (nth p (- n 2)) (nth p (- n 3))))))))","user":"53abcea3e4b047364c044451"},{"code":"(fn fib [n] (loop [a0 0 a1 1 k n fibv []]\n  (if (zero? k) fibv\n      (recur a1 (+ a0 a1) (dec k) (conj fibv a1)))))","problem":26,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn fib\n  ([i] (fib (- i 2) 1 1 [1]))\n  ([i a b res]\n  (if (> 0 i)\n    (reverse res)\n    (fib (dec i) b (+ a b) (cons b res)))))","problem":26,"user":"4e7ada51535db169f9c796ae"},{"code":"#(\n  ; Hacky! Doesn't handle fib(1) or fib(2)!\n  (fn fib [n, sq]\n    (if (= n 0)\n      sq\n      (fib \n       (- n 1) \n       (conj sq (+ \n        (nth sq (- (count sq) 2 ))\n        (last sq))\n       )\n      )\n    )\n  )\n  (- % 2) [1 1]\n)","problem":26,"user":"52463059e4b09dbe66b56198"},{"problem":26,"code":"(fn [fibNum] \n\t (loop [Index 1 X 1 nextX 1 fibListAccu [] ] (\n       let [extendedFibList (conj fibListAccu X)] \n       (if (= Index fibNum)\n            extendedFibList\n            (recur (inc Index) nextX (+ X nextX) extendedFibList)\n       )))\n)","user":"5913375de4b0163c97b36efe"},{"problem":26,"code":"#(reverse ((fn [n] (if (< n 3) (repeat n 1) \n                    (loop [i 3 coll '(1 1)]\n                      (if (= i n) (conj coll (+ (first coll) (second coll)))\n                        (recur (inc i) (conj coll (+ (first coll) (second coll)))))))) %1))","user":"532dbd3ce4b019098a6f8b40"},{"problem":26,"code":"(fn [x]\n      (loop [a, 1, b, 1, result, [1]]\n        (if (>= (count result) x)\n          result\n          (recur b (+ a b) (conj result b)))))","user":"5a593521e4b05d388ecb6c93"},{"problem":26,"code":"(fn fib [v]\n\t(loop [a 1 b 1 res []]\n\t (if (= v (count res))\n\t \tres\n\t \t(recur b (+ a b) (conj res a)))))","user":"5c87c79be4b048ec896c591b"},{"code":"#(take % \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e4179c4535dc968683fc49d"},{"code":"(partial\n (fn [n1 n2 coll n]\n   (if (= n 2)\n       (list* coll)\n       (let [n3 (+ n1 n2)]\n         (recur n2 n3 (conj coll n3) (dec n)))))\n  1 1 [1 1])","problem":26,"user":"4eec82fe535d93acb0a668ae"},{"problem":26,"code":"#(loop [x %\n        a 1\n        b 1\n        result []]\n   (if (= x 0)\n     result\n     (recur (- x 1) (+ a b) a (conj result b))))","user":"55fa3454e4b03cbcff9738ce"},{"code":"(fn [n]\n  (loop [k n x 1 y 1 acc '(1 1)]\n    (if (< k 3)\n      acc\n      (recur (dec k) y (+ x y)\n             (concat acc (list (+ x y)))))))","problem":26,"user":"4e4ae5aa535dc968683fc4d2"},{"code":"#(take % \n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])) \n  )","problem":26,"user":"53886d2fe4b0640c7a9a589d"},{"code":"#(take % \n    (map first \n      (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4e8a6bb0535d65386fec210b"},{"problem":26,"code":"(fn [x]\n  ((fn fibn[i x1 x2 acc]\n     (if (>= 0 i)\n       acc\n       (fibn (- i 1)\n             x2\n             (+ x2 x1)\n             (conj acc (+ x1 x2)))))\n      (- x 2) 1 1 [1 1]))","user":"53e06f81e4b0d874e779ae4c"},{"problem":26,"code":"#(case %\n   1 [1]\n   2 [1 1]\n   (loop [x 2 coll [1 1]]\n     (if (= x %)\n       coll\n       (->>\n         (take-last 2 coll)\n         (reduce +)\n         (conj coll)\n         (recur (inc x))\n         )\n       )\n     ))","user":"5c597b42e4b01df32ab7325b"},{"code":"(fn [cnt]\n  (take cnt\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n  )))","problem":26,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn [n]\n  (loop [cnt n acc [] a 1 b 1]\n    (if (zero? cnt)\n      (apply list acc)\n      (recur (dec cnt) (conj acc a) b (+ a b)))))","problem":26,"user":"4e6e4127535d5021c1a89605"},{"code":"#(map (fn f[x] (if (<= x 1) 1 (+ (f (- x 2)) (f (- x 1))))) (range %))","problem":26,"user":"50f8862de4b0aafb827eb203"},{"problem":26,"code":"(fn [x] (loop [p 1 q 1 n 2 ret [1 1]] (let [nxt (+ (last ret) (last (butlast ret)))] (if (= x\n                                                                                        n) ret (recur q nxt (inc n) (conj ret nxt))))))","user":"554b8b65e4b0a04f7929958a"},{"problem":26,"code":"(fn [j] (map (fn fib [i] (if (<= i 1) 1 (+ (fib (dec i)) (fib (dec (dec i)))))) (range j)))","user":"53e8c684e4b036ad0777e48b"},{"problem":26,"code":"#(drop 1 (map first (take (inc %) (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"52bba119e4b07a9af57922ea"},{"code":"(fn [y]\r\n  (loop [fib '(1 1) depth 2]\r\n    (if (= depth y) (reverse fib) (recur (conj fib (+ (first fib) (fnext fib))) (inc depth))\r\n)))","problem":26,"user":"4dde4e95535d08e6dec9fdd7"},{"code":"(fn [x]\n  (loop [y 1\n         acc []]\n    (cond\n     (> y x) acc\n     (#{1 2} y) (recur (inc y) (conj acc 1))\n     :else (let [last-n (last acc)\n                 penult (second (reverse acc))]\n             (recur (inc y) (conj acc (+ last-n penult)))))))","problem":26,"user":"516fa727e4b0ef3e37990e86"},{"code":"(fn [x] (take x (map first (iterate  (fn [[a b]] [b (+ a b)]) [1 1] ))))","problem":26,"user":"5124619ae4b02c3f2a072ccd"},{"code":"#( take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"51bcf091e4b0df1216cefd91"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fib [a b]\n              (cons a (lazy-seq\t(fib b (+ a b)))))]\n    (take n (f 1 1))))","user":"5579bc24e4b05c286339e098"},{"problem":26,"code":"#(loop [n % a 1 b 1 r []]\n   (if (= 0 n)\n     r\n     (recur (dec n) b (+ a b) (conj r a))))","user":"58731176e4b01531a375ea2a"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4eaec592535d7eef30807327"},{"code":"(fn [n]\n  (loop [result [1 1]\n         accum 2]\n    (cond\n      (zero? n) nil\n      (= n 1) [1]\n      (= n 2) result\n      (= n accum) result\n      :else (recur (conj result (apply + (take-last 2 result)))\n                   (inc accum)))))","problem":26,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn ! [x] \n  (if (> x 2) \n    (let\n      [l (! (dec x))]\n      (conj l\n            (apply + (take-last 2 l))))\n    [1 1]))","problem":26,"user":"4e8d86d5535d65386fec2136"},{"code":"(fn [n] \n  (reduce\n    (fn [x y] \n      (conj \n        x \n        (+ (last x) (last (butlast x)))))\n    [1 1]\n    (range 2 n)))","problem":26,"user":"4f038516535dcb61093f6b0b"},{"problem":26,"code":"(fn fibos [n] \n  (take n (\n           loop [ iter 1 vecacc [ 1 1 2 ] ]\n             (if (> iter n) \n               (conj  vecacc -1 )\n               (recur (inc iter) \n                      (conj vecacc (+ (last vecacc) \n                                      (nth vecacc (- (count vecacc) 2 ) )  \n                                    ) \n                      )\n                )\n              )\n           )\n  )\n  \n)","user":"5a6a436de4b0512ff01cda24"},{"code":"(fn [count]\r\n        (\r\n            (fn [count result]\r\n                (if (= count 0)\r\n                    result\r\n                    (if (nil? (last result))\r\n                      (recur (- count 1) (conj result 1))\r\n                      (if (nil? (last (butlast result)))\r\n                        (recur (- count 1) (conj result 1))\r\n                        (recur (- count 1) (conj result (+ (last (butlast result)) (last result))))\r\n                      )\r\n                    )\r\n                )\r\n            ) count []\r\n        )\r\n    )","problem":26,"user":"4dd6fa3a535d2dad7130b5ce"},{"problem":26,"code":"(fn [n]\n  (loop [xs [1 1]\n         steps (- n 2)]\n    (if (= steps 0)\n      xs\n      (recur (conj xs (apply + (take-last 2 xs))) (dec steps)))))","user":"5e0b6375e4b099d064962f7b"},{"problem":26,"code":"(fn [n] (loop [n n\n               acc '()]\n          (if (< n 1)\n            (reverse acc)\n            (recur (dec n) (cond\n                             (= acc '()) '(1)\n                             (= acc '(1)) '(1 1)\n                             :else (cons (apply + (take 2 acc)) acc))))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":26,"code":"#(case %\n    1 [1]\n    2 [1 1]\n    (loop [x 3\n           y [1 1]]\n      (if (> x %)\n        y\n        (recur (inc x)\n               (conj y (+ (nth y (- x 3)) (last y)))))\n      )\n)","user":"5cd5f3f8e4b0ccb06196293d"},{"problem":26,"code":"(fn bob-fib-seq [n]\n  (map (fn bob-fib [n] \n         (cond\n          (= n 0) 0\n          (= n 1) 1\n          :else (+ (bob-fib (- n 1)) (bob-fib (- n 2))))) (range 1 (+ n 1))))","user":"55231800e4b0882d96d091ad"},{"code":"(fn fib[x]\n  (take x \n    ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b))))\n      ) 1 1)))","problem":26,"user":"4ee8092f535d93acb0a66875"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (< n 0)\n    nil\n     (take n\n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))","user":"54dcb632e4b024c67c0cf786"},{"code":"#(loop [acc (- %1 2) x 1 y 1 s []]\n\t(if (= acc 0)\n\t\t(cons 1(cons 1 (seq s)))\n\t\t(recur (dec acc) y (+ x y) (conj s (+ x y)))))","problem":26,"user":"525873e8e4b0cb4875a45cb2"},{"problem":26,"code":"(fn [cnt] (map (fn fib [i] (case i 1 1 2 1 (+ (fib (- i 1)) (fib (- i 2))))) (range 1 (+ cnt 1))))","user":"5e8c0c5be4b0cb0169546320"},{"problem":26,"code":"(fn [to-index]\n  (loop [a (int 1)\n         b (int 1)\n         out [a b]]\n    (if (= (count out) to-index)\n      out\n      (recur b (+ a b) (conj out (+ a b))))))","user":"577ad824e4b0d3393e5deb08"},{"code":"(fn fibb [x]\n  (take x\n  (\n    map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n   )\n  )\n  )","problem":26,"user":"504f65bae4b0a02f9cffde7e"},{"problem":26,"code":";#(nth \n;  (iterate (fn [arr] (conj arr (+ (last arr) (-> arr reverse second)) ) )  [1 1]) \n;  (- % 2)\n;)\n  \n  \n(\n letfn [(fib [arr] \n             (conj arr (->> arr reverse (take 2) (apply +))))\n       ] \n       #(nth (iterate fib [1 1]) (- % 2))\n)","user":"5d9e7971e4b000c986472bc1"},{"code":"#(map (fn fib ([ n ] (if (<= n 1) n (+ (fib (dec (dec n))) (fib (dec n)))))) (range 1 (inc %)))","problem":26,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":26,"code":"(fn [n]\n  (let [f (fn ! [a b]\n            (cons a (lazy-seq (! b (+ a b)))))]\n    (take n (f 1 1))))","user":"536aba0be4b0243289761eb2"},{"problem":26,"code":"(fn [n]\n  (loop [m 1 f-v '(1) f-n 1]\n    (if (= m n) (reverse f-v) (recur (inc m) (conj f-v f-n) (+ (first f-v) f-n)))))","user":"5835bc73e4b089d5ab817ce9"},{"code":"(fn fibonacci [x] \n\t(if (= x 1)\n\t '[1]\n\t (if(= x 2)\n\t '[1 1]\n\t (conj (fibonacci (- x 1)) (+ (last (fibonacci (- x 1))) (last (fibonacci(- x 2)))))\n\t))\n)","problem":26,"user":"524ed632e4b0541d1855b7f2"},{"problem":26,"code":"(fn \n  [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"566f7749e4b0a866af6896e9"},{"code":"#(loop [coll () n 0]\n    (if (= n %)\n        coll\n        (recur \n           (if (= n 0)\n              '(1)\n              (if (= n 1)\n                  '(1, 1)\n            (concat coll [(+ (last coll) (nth coll (- (count coll) 2)))] )\n              )\n           )\n          (inc n)\n        )\n    )\n)","problem":26,"user":"4e70ed07535d5021c1a89643"},{"code":"(fn [n] \n  (let [fib-seq \n          ((fn rfib [a b] \n            (lazy-seq (cons a (rfib b (+ a b)))))\n              0 1)]\n    (rest (take (inc n) fib-seq))))","problem":26,"user":"4f74fe77e4b0fbe0118ec552"},{"problem":26,"code":"#(take % ((fn fib [i j] (lazy-seq (cons i (fib j (+ i j))))) 1 1))","user":"56255e2de4b00a550fc90297"},{"code":"(fn [x]\n  (loop [c x s '(1 1 2)] \n    (if (= c 3)\n      s\n      (recur (dec c) \n             (concat s (list (+ (last s) (last (butlast s)))))))))","problem":26,"user":"4f03193e535dcb61093f6a61"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         x 1\n         res [1]]\n    (if (= n 1)\n      res\n      (recur (dec n) (+ x (last res)) (conj res x)))))","user":"55f43228e4b06e875b46ce67"},{"code":"(fn fibonacci [target]\n\t((fn fib [currentIndex suite]\n    \t(if (< currentIndex 2)\n      \t\t(if (= currentIndex 0)\n            \t(fib (+ currentIndex 1) [1])\n              \t(fib (+ currentIndex 1) [1 1])\n            )\n          \t(if (= currentIndex target)\n            \tsuite\n              \t(fib \n                \t(+ currentIndex 1)\n                 \t(conj\n                     \tsuite\n                    \t(+ \n                        \t(nth suite (- currentIndex 1)) \n                         \t(nth suite (- currentIndex 2))\n                       \t)\n                    )\n                )\n            )\n        ) \n    ) 0 [])\n)","problem":26,"user":"52c10ad2e4b07a9af579235c"},{"problem":26,"code":"(fn [x]\n  (loop [count (- x 2)\n         x 1\n         y 1\n         res [1 1]]\n    (if (<= count 0)\n      res\n      (recur (- count 1) y (+ x y) (conj res (+ x y))))))","user":"54b31445e4b09f271ff37d35"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib \n  ([]\n   (fib 1 1))\n  ([a b]\n   (lazy-seq (cons a (fib b (+ a b)))))))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib 1 1 n))\n  ([a b n]\n   (let [xs (lazy-seq (cons a (fib b (+ a b) n)))]\n     (take n xs))))","user":"56d72e14e4b0ea9b8538f7d6"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4fd6028ce4b0d4de60cee37b"},{"problem":26,"code":"(fn fibb [n]\n  (cond\n   (= n 0) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   (> n 2)\n    (let [l (fibb (dec n))]\n      (conj\n        l\n        (+\n          (last l)\n          (get l (- (count l) 2)))\n      )\n    )\n  )\n)","user":"5881d1c2e4b0f1effa3b7644"},{"code":"(fn [x]\n  (loop [cnt x acc [] a 1 b 1]\n    (if (> cnt 0)\n      (recur (- cnt 1) (conj acc a) b (+ a b))\n      acc)))","problem":26,"user":"500cc860e4b05f7c30cfa69b"},{"problem":26,"code":"(fn fib [x] (if (= x 0) \n              `()\n              (if (= x 1)\n                `(1)\n                (if (= x 2)\n                  `(1 1)\n                  (let [lst (fib (- x 1)),\n                        lenlst (count lst)]\n                        (concat lst (list (+ (nth lst (- lenlst 1)) (nth lst (- lenlst 2))))   ))))))","user":"57434103e4b0c285004e8a9e"},{"code":"(fn fibonacci\n  [n]\n  (if (> n 1)\n    (let [prev (fibonacci (- n 1))\n          Fsum (fn sum\n                 [s]\n                 (if (nil? (first (rest s)))\n                   (first s)\n                   (+ (first s)\n                      (sum (rest s)))))\n          Ftail (fn tail\n                  [s n]\n                  (if (or (= (count s) n) (< (count s) n))\n                    s\n                    (tail (rest s)\n                          n)))]\n      (conj prev (Fsum (Ftail prev 2))))\n    [1]))","problem":26,"user":"5263c44fe4b03e8d9a4a70b8"},{"problem":26,"code":"(fn [n]\n  (cond \n   (zero? n) ()\n   (= 1 n) `(1)\n   (= 2 n) `(1 1)\n   :else ((fn [n l]\n            (if (zero? n)\n              (reverse l)\n              (recur (dec n) (conj l (+ (first l) (-> l rest first))))\n            ))\n         (- n 2) `(1 1))\n  )\n)","user":"5c6748f0e4b0fca0c16226b6"},{"problem":26,"code":"(fn [fib-count]\n  (take fib-count\n        (map first\n             (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":26,"code":"(fn [n]  (take n (cons 1 ((fn fib\n                                                ([] (fib 0 1))\n                                                ([a b] (let [sum (+ a b)]\n                                                         (cons sum  (lazy-seq (fib b sum))))))))))","user":"5e44f5b1e4b01d43a70e8e8d"},{"problem":26,"code":"(fn [x]\n    (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","user":"565540d2e4b0f9d632dd8494"},{"problem":26,"code":"(fn [n] \n  (rest (take (inc n) \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"5748a2d4e4b009280f9f2b8f"},{"problem":26,"code":"(fn fib\n  [x]\n  (cond\n    (= x 0) '(0)\n    (= x 1) '(1)\n    (>= x 2) (loop [i 2\n                    r '(1 1)]\n               (if (= i x)\n                 (reverse r)\n                 (recur (+ i 1) (conj r (+ (first r) (second r))))))))","user":"58e53760e4b056aecfd47c8f"},{"problem":26,"code":"(fn doon [x]\n  (loop [a 1 b 1 cur 0 acc '()]\n    (if (< cur x) (recur (+ a b) a (inc cur) (cons b acc)) (reverse acc))))","user":"5fdb8657e4b05ac5b16ea133"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         fib '(1 1)]\n    (if (>= i n)\n      (reverse fib)\n      (recur (inc i) (conj fib (+ (first fib) (second fib))))\n    )\n  )\n)","user":"54f0a1f2e4b024c67c0cf8a0"},{"problem":26,"code":"#(take %1 (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1])))","user":"556b83fbe4b09a3098a524ee"},{"problem":26,"code":"#(take % \n  ((fn fibo [a b]\n    (lazy-seq (cons a (fibo b (+ a b))))) 1 1))","user":"56eb5c76e4b04a395b9a0422"},{"problem":26,"code":"(fn [n]\n  (loop [sofar [1 1]]\n    (if (= (count sofar) n) sofar\n      (recur \n       (conj sofar (+ (last sofar) \n                      (last (butlast sofar))))))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":26,"code":"(fn [n] (loop [s '(1 1)]\n          (if (= (count s) n)\n            s\n            (recur (conj (vec s) (reduce + (take-last 2 s)))))))","user":"55b66ebce4b01b9910ae2996"},{"problem":26,"code":"#(take % ((fn f! [a b] (cons a (lazy-seq (f! b (+ a b))))) 1 1) )","user":"532018efe4b08068f379edcd"},{"problem":26,"code":"#(loop [n-2 0 n-1 1 acc '(1)]  (if (< (count acc) %) (recur n-1 (+ n-1 n-2) (concat acc (list (+ n-1 n-2)))) acc))","user":"5647dc44e4b0284900eef624"},{"problem":26,"code":"#(take %\n((fn lazyfib \n([] (lazyfib 1 1))\n([a b] (cons a (lazy-seq (lazyfib b (+ a b) ))))\n)))","user":"542b0592e4b0dad94371f286"},{"problem":26,"code":"(fn [num]\n  (let [fib-seq   (\n    (fn fib [a b]\n      (lazy-seq (cons a (fib b (+ a b))))\n    ) 1 1\n  )]\n    (take num fib-seq)\n  )\n)","user":"5c3440fee4b0d62ef62d9f50"},{"code":"#(take % ((fn fib [a b]\n            (lazy-seq (cons a \n                            (fib b \n                                 (+ a b))))) \n          1 \n          1))","problem":26,"user":"52b02329e4b0c58976d9acc5"},{"code":"(fn fib [arg]\n  (let [rev-fib (fn rev-fib [arg]\n                  (if (= 1 arg)\n                    (list 1)\n                    (if (= 2 arg)\n                      (list 1 1)\n                      (let [subfib (rev-fib (- arg 1))]\n                        (cons (+ (first subfib) (second subfib)) \n                        subfib)))))]\n    (reverse (rev-fib arg))))","problem":26,"user":"4f652432e4b07046d9f4ef3d"},{"code":"#(take % ((fn this [a b] (lazy-seq (cons a (this b (+ a b))))) 1 1))","problem":26,"user":"4fad89f0e4b081705acca23b"},{"code":"(fn [x]\n  (take x\n    ((fn rfib [a b]\n      (cons a (lazy-seq b (rfib b (+ a b)))))\n1 1)))","problem":26,"user":"4f0928db535dcb61093f6c45"},{"code":"(fn [n]\r\n  (loop [se '(2 1 1)]\r\n    (if (>= (count se) n)\r\n      (reverse se)\r\n      (recur (cons (+ (first se) (nth se 1)) se)))))","problem":26,"user":"4df407c3535d08e6dec9fe2e"},{"problem":26,"code":"(fn fibo ([n] (fibo '(1 1) n)) ([s n] (if (= (count s) n) (reverse s) (fibo (conj s (+ (first s) (second s))) n))))","user":"55623feae4b0c656e3ff17d4"},{"code":"#(take % \n ((fn rfib [a b]\n    (cons a (lazy-seq (rfib b (+ a b))))) 1 1))","problem":26,"user":"537f4652e4b06839e8705eb1"},{"problem":26,"code":"(fn [n-stop]\n  (loop [x [1 1] n 2] \n    (if-not (< n n-stop) x \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))) (+ n 1)) ) ) )","user":"514504c2e4b021a5ff8301fc"},{"problem":26,"code":"#(loop [c % n 1 p 0 a []]\n   (if (= 0 c)\n     a\n     (recur (dec c) (+ n p) n (conj a n))))","user":"4f037faf535dcb61093f6af8"},{"code":"(fn f\n  ([n] (f [1 1] n))\n  ([s n] (if (= (count s) n)\n           ; return the list\n           s\n           ; call the function again with the correct extra number\n           (f (into s (list (+ (peek s) (peek (vec (butlast s))))))n))))","problem":26,"user":"51b70902e4b04fc00976d47b"},{"code":"(fn [n]\n  (loop [seq ()\n         i 0\n         p 1\n         q 1]\n    (if (= i n)\n      (into () seq)\n      (recur (conj seq p) (inc i) q (+ p q)))))","problem":26,"user":"4eda8d7c535d10e5ff6f530f"},{"problem":26,"code":"#(loop [a 1 b 1 result [1]]\r\n    (if (= (count result) %)\r\n      result\r\n      (recur b (+ a b) (conj result b))))","user":"5552b617e4b0deb715856df8"},{"code":"#(let [result []]\n   (cond \n    (< % 1) result\n    (= % 1) (conj result 1)\n    (> % 1)\n    (loop [result [1 1]\n           index 2]\n      (if (= index %)\n        result\n        (recur (conj result \n                     (+ \n                      (nth result (- (count result) 1)) \n                      (nth result (- (count result) 2))))\n               (inc index))))))","problem":26,"user":"531d34cfe4b08068f379edac"},{"problem":26,"code":"(fn fib [n]\n(if (= 1 n)\n  '(1)\n  (if (= 2 n)\n    '(1 1)\n    (let [prev (fib (- n 1))]\n      (concat prev\n              (list (+ (last prev) (first (rest (reverse prev))))))))))","user":"54c9e00be4b045293a27f683"},{"code":"(fn self [x]\n   (cond\n     (= x 1) [1]\n     (= x 2) [1 1]\n     (> x 2) (let [\n                   prev (self (dec x))\n                   reversed (reverse prev)\n                   ]\n               (conj\n                 prev\n                 (+ (first reversed) (second reversed)))\n               )\n     )\n   )","problem":26,"user":"524da3a5e4b0a16e35cf6df3"},{"problem":26,"code":"#(for [i (range %) ]\n    ((fn fib [n] \n       (if (< n 2)\n        1 \n         (+ \n          (fib (- n 1)) \n          (fib (- n 2))))) i))","user":"5b3dddf5e4b02d533a91bbf1"},{"code":"(fn [x]\r\n  (loop [i 1 acc [1]]\r\n  (if (== (count acc) x)\r\n  (seq acc)\r\n  (recur (+ (last acc) i) (conj acc i)))))","problem":26,"user":"4e14090d535d04ed9115e7dc"},{"problem":26,"code":"(letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n  #(take % (fib 1 1)))","user":"5e0d948fe4b099d064962f98"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n;#(take % (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1])))\n\n;#(take %\n;       ((fn fib [a b]\n;          (lazy-seq (cons a (fib b (+ a b))))) 1 1))\n\n;; (defn fib [n]\n;;   (case n\n;;     0 0\n;;     1 1\n;;     (+ (fib (- n 1)) (fib (- n 2)))))\n\n;; (defn fib-seq [n]\n;;   (map fib (take n (iterate inc 1))))\n\n;; (fib-seq 6)\n\n;(defn test [[a b]]\n;    [b (+' a b)])\n\n; (take 3 (iterate test [0 1])) ;=> [0 1] [1 1] [1 2]\n; (#(take % (iterate test [0 1])) 3) ;=> [0 1] [1 1] [1 2]\n\n\n; (map second (#(take % (iterate test [0 1])) 3)) ;=> (1 1 2)\n\n; (take 3 (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1])))  ;=> (1 1 2)\n; (#(take % (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))) 3) ;=> (1 1 2)\n\n;(fn [i]\n;    (let [n i]\n;      (map second (#(take % (iterate (fn [[a b]] [b (+ a b)]) [0 1])) n))))\n\n;#(loop [x 1\n;        y 1\n;        result []]\n;     (if (= % (count result))\n;       result\n;       (recur y (+ x y) (conj result x))))","user":"572830e6e4b0c5bde472c152"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b]\n             (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"58ddac2ce4b0a4d5acaab6d6"},{"problem":26,"code":"(fn fib [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"588f55d2e4b00487982d51a5"},{"code":"#(reverse\n\t(loop [fibs '(1) times %]\n\t\t(if (> times 1)\n\t\t\t(recur (cons (+ (first fibs) (or (first (rest fibs)) 0)) fibs) (dec times))\n\t\t\tfibs)))","problem":26,"user":"51c27b6ce4b0d204dbe2ca21"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         lst []\n         n n]\n    (if-not (pos? n)\n      lst\n    \t(recur b (+ a b) (conj lst a) (dec n)))))","user":"4e435681535dc968683fc4a1"},{"problem":26,"code":"(fn fibos [n] (\n                 case n\n                 1 [1]\n                 2 [1 1]\n                 (conj (fibos (- n 1)) (reduce + (take-last 2 (fibos (- n 1)))))   \n                 )\n   )","user":"5a99a540e4b0d174b936c7a3"},{"problem":26,"code":"(fn [n]\n    (case n\n      1 [1]\n      (last (take (- n 1)\n                  (iterate\n                   #(conj % (apply + (take 2 (reverse %))))\n                    [1 1])))))","user":"597f8a4be4b0dbe32238d0c0"},{"code":"(fn [n]\n  (loop [i (- n 2) fib [1 1] f1 1 f2 1]\n    (if (= i 0)\n      fib\n      (recur (dec i)\n             (conj fib (+ f1 f2))\n             f2\n             (+ f1 f2)))))","problem":26,"user":"4e7e3504535db169f9c79709"},{"problem":26,"code":"(fn [x] \n  (take x ((fn fibseq\n  \t\t\t([a b]\n    \t\t(lazy-seq (cons a (fibseq b (+ a b)))))) 1 1)))","user":"5f3a8493e4b004f08c61c527"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn bif [x] (if (< x 2) 1 (+ (bif (- x 1)) (bif (- x 2)))))]\n  (map fib (range n))))","user":"52229374e4b0e6a83c892600"},{"problem":26,"code":"(fn [n]\n   (reverse ((fn [n1,l]\n               (if\n                   (= n1 n)\n                 l\n                 (recur (inc n1) (cons (reduce + (take 2 l)) l))\n\n                 )) 2 [1 1])))","user":"585d40afe4b0f14aab7c8798"},{"problem":26,"code":"(fn fibonacci [len]\n  (if (<= len 2)\n    [1 1]\n    (loop [it (- len 2)\n           series [1 1]]\n      (if (<= it 0)\n        series\n        (recur (dec it)\n               (conj series (+ (last series) (last (drop-last series)))))))))","user":"5d247902e4b02ea6f0fb6a24"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (loop [a 1,\n                b 1,\n                cpt 2,\n                res [1 1]]\n           (if (= n cpt)\n             res\n             (recur b (+ a b) (inc cpt) (conj res (+ a b)))))))","user":"56a50330e4b0542e1f8d14df"},{"problem":26,"code":"#(loop [output []\n        len %]\n   (if (zero? len)\n     (seq output)\n     (if (<= (count output) 1)\n       (recur (conj output 1) (dec len))\n       (recur (conj output \n                    (+ (last output) (nth output (- (count output) 2)))\n                    ) (dec len))\n       )\n     )\n   )","user":"5739fa01e4b0cd1946bd1082"},{"code":"(fn [n]\n  (let [fib (fn fib\n              [a b]\n              (cons a (lazy-seq (fib b (+ b a)))))]\n  (take n (fib 1 1))))","problem":26,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn[x] (map first (take x (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f8e984ee4b0d4e659cdde68"},{"problem":26,"code":"(fn [x] (map first (take x(iterate (fn [[a b]] (vector b (+ a b))) [1 1]))))","user":"54eca495e4b024c67c0cf855"},{"code":"(fn fib [n] (if (= n 2) '(1 1)\n                ((fn [l] (concat l \n                  (list (+ (last l)\n                         (nth l (- (count l) 2))))))\n                    (fib (- n 1)))\n            )\n)","problem":26,"user":"504ffa26e4b0a02f9cffdead"},{"problem":26,"code":"(fn [n] (cons 1 (let [i (atom 0) ii (atom 1)]\n    (for [x (take (dec n) (range))\n          :let [m @i y (swap! i (fn [a b] b) @ii) z (swap! ii (fn [a b] b) (+ m @ii))]]\n      @ii))))","user":"58d6c601e4b03c36ff7e5974"},{"code":"(fn fib\r\n  ([n] (cond (= n 1) [1] (= n 2) [1 1] :else (fib n [1 1])))\r\n  ([n [a b & _ :as x]]\r\n   (if (<= n 2)\r\n      (reverse x)\r\n      (recur (dec n) (cons (+ a b) x)))))","problem":26,"user":"500159b3e4b0678c553fc419"},{"problem":26,"code":"(fn [max]  \n (loop [fib []] \n  (if (= (count fib) max) \n   fib\n   (recur\n    (cond \n      (= (count fib) 0) (conj fib 1)\n      (= (count fib) 1) (conj fib 1)\n      (= (count fib) 2) (conj fib 2)\n      :else \n       (let [rfib (reverse fib)]\n        (conj fib (+ (first rfib) (first (rest rfib))))))))))","user":"5da9d89ae4b000c986472c3b"},{"code":"(fn [n]\n  (if (< n 3) (take n [1 1])\n  (loop [n (- n 2) x 1 y 1 s [1 1]]\n    (if (zero? n) s\n      (recur (dec n) y (+ x y) (concat s (list (+ x y)) ))))))","problem":26,"user":"51b66b31e4b02e5820733406"},{"problem":26,"code":"#(take % ((fn fibo* [f1 f2] (cons f1 (lazy-seq (fibo* f2 (+ f1 f2))))) 1 1))","user":"59ff69e4e4b01bb0ae8afd20"},{"code":"(fn [n]\n  (cond\n    (= n 1) '(1)\n    true (loop [fibnums '(1 1) count (- n 2)]\n        (if (= count 0) \n          (reverse fibnums)\n          (recur (conj fibnums (+ (first fibnums) (second fibnums))) (- count 1))\n        )\n      )\n    )\n)","problem":26,"user":"4e7e05a6535db169f9c796fe"},{"code":"(fn [count] \n  (loop [x count\n       y '(1)\n       prevnumber 0\n       currentnumber 1]\n  (if (> x 1)\n    (recur\n     (dec x)\n     (conj y (+ prevnumber currentnumber))\n     currentnumber\n     (+ prevnumber currentnumber))\n    (reverse y))))","problem":26,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"#(rest (reverse (reduce (fn [x _] (conj x (+ (first x) (second x)))) '(1 0) (range 1 %))))","problem":26,"user":"51a058dae4b0b292b01ee3f3"},{"code":"(fn [n] \n  (letfn [(revfib [n] (if (= n 2)\n                         '(1 1)\n                         (let [rec (revfib (- n 1))]\n                              (cons (+ (first rec) (second rec)) rec))\n                           ))    ]                \n  \t(reverse (revfib n))))","problem":26,"user":"536de1c3e4b0fc7073fd6e64"},{"code":"(fn fib [x] (take x '(1 1 2 3 5 8 13 21)))","problem":26,"user":"512dfc5ee4b0b740abc5981f"},{"code":"#(take %1 ((fn fibber [a b] (lazy-seq (cons a (fibber b (+ a b))))) 1 1))","problem":26,"user":"4e521d7a535d302ef430da6e"},{"problem":26,"code":"#(take %\n  ((fn fib [a b]\n    (cons a (lazy-seq (fib b (+ b a)))))\n   1 1))","user":"55d2dd27e4b0e31453f64a5b"},{"code":"(fn [n]\n  (loop [cnt n, prev 0, cur 1, lst []]\n    (cond\n      (< cnt 1) lst\n      :else (recur (dec cnt) cur (+ prev cur) (conj lst cur)))))","problem":26,"user":"504e3aaae4b0f6ff3350c487"},{"code":"(fn [n]\n  (nth (iterate #(conj % (apply + (take-last 2 %))) [1]) (dec n)))","problem":26,"user":"4f525fdce4b03ad3f0c10d37"},{"problem":26,"code":"#(reduce (fn [a _] (conj a (+ (nth a (- (count a) 2) 0) (nth a (- (count a) 1) 1)))) [] (range %))","user":"59638af5e4b066ee0a44b0cc"},{"code":"(fn\n  [x]\n  (let [next-fib #(reduce + (take-last 2 %))]\n  (last\n     (take (dec x) (iterate\n                (fn [a]\n                  (concat a (vector (next-fib a))))\n                [1 1])))))","problem":26,"user":"51642237e4b003cf19fdde31"},{"problem":26,"code":"(fn [x]\n  (take x [1 1 2 3 5 8 13 21]\n        ))","user":"5ac85708e4b0e27600da77ac"},{"problem":26,"code":"(fn [n] (reverse (loop [x n y '(1 1)] (if (< x 3) y (recur (dec x) (cons (+ (first y) (second y)) y))))))","user":"58aa3f02e4b01a0c0b23297d"},{"code":"(fn [n]\r\n  (loop [a 0 b 1 r [] i 0 ]\r\n    (if(= i n) r\r\n      (recur b (+ a b) (conj r b) (inc i)))))","problem":26,"user":"4deff9f9535d08e6dec9fe15"},{"problem":26,"code":"(fn [n]\n   (loop [i 1 l [1]]\n     (if-not \n       (< i n)\n       l\n       (recur \n        (inc i) \n        (conj l \n          (apply + (take-last 2 l)))))))","user":"54b2a4f7e4b09f271ff37d2c"},{"code":"#(take % ((fn rfib [a b] \n            (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1))","problem":26,"user":"4e7dd982535db169f9c796ee"},{"problem":26,"code":"(fn fib [n] \n  (if (< n 3) \n    (vec (repeat n 1))\n    (let [rec (fib (dec n))] \n      (conj rec\n            (apply + (take-last 2 rec))  ))\n    )\n  )","user":"5606a4ace4b08b23635d3175"},{"code":"(fn [n]\n  (map \n  (fn [n]\n    (loop [a 1 b 1 cnt 0]\n      (if (< cnt n)\n        (recur b (+ a b) (inc cnt))\n        a)))\n   (range n)))","problem":26,"user":"534815bde4b084c2834f4a53"},{"problem":26,"code":"#(take % ((fn fib [a b] \n(lazy-seq (cons a (fib b (+ a b)))) ) 1 1))","user":"58335c22e4b089d5ab817c9a"},{"problem":26,"code":"(fn fib [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(2)\n         :else (loop [cnt 2 res '(1 1)]\n             (if (= cnt n)\n               res\n               (recur (+ 1 cnt) (concat res\n                                        (list\n                                        \t(+ (nth res (- cnt 1))\n                                          \t (nth res (- cnt 2))))))))))","user":"5455573be4b0e397800069e0"},{"code":"(fn [x] (let [fib (fn fib [n] (cond (= n 0) 0 (= n 1) 1 :else (+ (fib (- n 1)) (fib (- n 2)))))] (rest (map fib (range (inc x))))))","problem":26,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"#(loop [v [1 1]]\n    (if (= % (count v))\n      (seq v)\n      (recur (conj v (+ (peek v) (peek(pop v)))))\n  ))","problem":26,"user":"4f5d0f25e4b0030a34fb2b33"},{"problem":26,"code":"(fn [n] \n  (let [f (fn [n a b res]\n            (if (= n 0) \n              (reverse res )\n              (recur (dec n) b (+ a b) (cons a res))\n              ))]\n    (f n 1 1 '()))\n  )","user":"5a7460a0e4b0512ff01cdaaf"},{"code":"(fn fibs [x]\n  (take x\n        (lazy-seq\n         (map first\n             (iterate (fn [[a b]] [b (+ a b)])\n                      [1 1])))\n        ) \n  )","problem":26,"user":"51d328f8e4b099f3b6acddfb"},{"problem":26,"code":"(fn\n  [n]\n  (->>\n    (iterate\n      (fn [[a b]]\n        [b (+ a b)])\n      [1 1])\n    (map first)\n    (take n)))","user":"57acb156e4b0b8559636fc8d"},{"problem":26,"code":"#(loop [x (dec (dec %1)) fibo [1 1]]\n    (if (zero? x)\n      fibo\n      (recur (dec x) (conj fibo (apply + (take-last 2 fibo))))))","user":"553bda0de4b09218d5f4500b"},{"problem":26,"code":"(fn [n]\n  (take n \n        (map second \n             (iterate (fn [ [acc x] ]\n                        [x (+ acc x)] ) [0 1]))))","user":"5a624129e4b0512ff01cd987"},{"code":"#(take % ((fn fib \n  ([] (lazy-seq (cons 1 (fib 0 1))))\n  ([a b] (lazy-seq (cons (+ a b) (fib b (+ a b))))))))","problem":26,"user":"4ec18451535dfed6da9c6db0"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1N 1N])))","problem":26,"user":"510d59cce4b078ea71921134"},{"problem":26,"code":"(fn fib [cnt]\n  (loop [c cnt\n         i 0\n         results '()]\n    (let [_ (println results)]\n\t    (if (= 0 c)\n    \t  (reverse results)\n      \t(let [fb (fn [n, res] (if (#{0 1} n) 1 (apply + (take 2 res))))]\n        \t(recur (dec c) (inc i) (cons (fb i results) results)))))))","user":"5d8a3b3ee4b0915913b1d3c8"},{"problem":26,"code":"(fn [n] (map first (take n (drop 1 (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"55d28b38e4b0e31453f64a58"},{"problem":26,"code":"#(reduce \n  (fn [coll _] (conj coll \n                     (+ (first (reverse coll)) (second (reverse coll)))))\n  [1 1] (range (- % 2)))","user":"5e87194ce4b09a7a73c8bbe4"},{"code":"(fn fib[n](\n          cond\n            (= n 1) [1]\n            (= n 2) [ 1 1]\n            :else   (concat (fib (- n 1)) [(reduce + (take-last 2 (fib(- n 1))))])\n      ))","problem":26,"user":"52f426fce4b05e3f0be25f1e"},{"code":"(fn fibs [howmany]\n  (let [fib-extender\n    (fn [fibs-so-far]\n      (conj fibs-so-far (+ (last fibs-so-far) (last (butlast fibs-so-far)))))]\n  (cond\n    (= howmany 1) [1]\n    (= howmany 2) [1 1]\n    :else (last (take (dec howmany) (iterate fib-extender [1 1]))))))","problem":26,"user":"515737f0e4b0b0b4b87062d0"},{"problem":26,"code":"(fn [no-of-terms]\n(if (< no-of-terms 2)\n(if (= no-of-terms 1)\n'(1)\nnil\n)\n(\n(fn fib [fiblist]\n(if (> (count fiblist) (dec no-of-terms))\n(reverse fiblist)\n(fib (conj fiblist (+ (first fiblist) (second fiblist))))\n)\n)\n'(1 1)\n)\n)\n)","user":"55c4fc29e4b0e31453f649a9"},{"problem":26,"code":"(fn [n]\n  ((fn [s n]\n    (if (= n 0)\n      s\n      (let [c (count s)]\n        (recur (conj s (+ (s (- c 1)) (s (- c 2)))) (- n 1)))))\n   [1 1] (- n 2)))","user":"5af0ac45e4b0cc2b61a3bc56"},{"problem":26,"code":"(letfn [(fibm [x]\n     (condp = x\n            0 1\n            1 1\n            (+ (fibm (- x 1)) (fibm (- x 2)))))] (fn [y] (map fibm (range y))))","user":"57dafe97e4b0bd073c20241c"},{"problem":26,"code":"(fn solution#26 [n]\n  (loop [result '(1 1)\n         x 2]\n    (if (>= x n)\n      (reverse result)\n      (recur (cons (reduce + (take 2 result)) result) (inc x)))))","user":"56014f55e4b04bb52996e184"},{"problem":26,"code":"(fn [n]\n  \"Create a lazy fibonacci sequence, and take the first n elements of it\"\n  (->> (fn [[a b]] [b (+ a b)])  ; fib sequence fn\n       (#(iterate % [1 1]))      ; make it lazy\n       (map first)               ; get element \"a\" in the vector [a b]\n       (take n)))                ; do it \"n\" times","user":"593dde1be4b069cdc2982baf"},{"problem":26,"code":"#(reverse (loop [m 1 n 1 lst '()] (if (= % (count lst)) lst (recur n (+ m n) (cons m lst)))))","user":"552bc0f5e4b0ffed3738f968"},{"code":"#(loop [i % acc '(1 1)]\n   (if (> i 2)\n(recur (dec i) \n      (conj acc (+ (first acc) (second acc))))\n(reverse acc)))","problem":26,"user":"508bed64e4b0be79e5b189cf"},{"problem":26,"code":"(fn [num] \n           (seq \n             (loop [x1 1 \n                    x2 1 \n                    step 2 \n                    acc [1 1]] \n               (cond \n                 (= num 1) \n                 [1] \n                 (= num 2) \n                 [1 1] \n                 (= num step) \n                 acc \n                 :else \n                 (let [nx1 x2 \n                       nx2 (+ x1 x2) \n                       nstep (inc step) \n                       nacc (conj acc nx2)] \n                   (recur nx1 nx2 nstep nacc))))))","user":"6026737ee4b0d5df2af2222f"},{"problem":26,"code":";(fn fib [n]\n;  (if (or (= n 1) (= n 0))\n;    1\n;    (+ (fib (- n 1)) (fib (- n 2)) )))\n\n(fn [x]\n  (loop [n 1\n         lsum 0\n         sum 1\n         acc [1]]\n    (if (= x n)\n    \tacc\n    \t(recur (inc n) sum (+ lsum sum) (conj acc (+ lsum sum))))))","user":"5923554ee4b0a390037439f2"},{"problem":26,"code":"(fn \n [up-to]\n (loop [x 1 fibo-sequence [0 1]]\n  (if (= x up-to)\n   (rest fibo-sequence)\n   (recur (inc x) (conj fibo-sequence (+ (last fibo-sequence) (last (butlast fibo-sequence))))))))","user":"54ef7568e4b024c67c0cf885"},{"code":"#(take %\r\n    (concat '(1 1)\r\n      ((fn fab [n-1 n-2]\r\n        (lazy-seq\r\n          (let [x (+ n-1 n-2)]\r\n            (cons x\r\n              (fab n-2 x))))) 1 1)))","problem":26,"user":"4e21c139535d04ed9115e819"},{"code":"(fn [cnt] (loop [i 2 res '(1 1)] (if (= i cnt) (reverse res) (recur (inc i) (cons (+ (first res) (second res)) res)))))","problem":26,"user":"4ee528fb535d1385b2869d87"},{"code":"(fn fibs-up-to [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"5313a2bfe4b08068f379ed0b"},{"problem":26,"code":"(fn nth-fib\n  [n]\n  (rest (take (inc n) \n              ((fn lazy-fib\n  \t\t\t\t [a b]\n  \t\t\t\t (lazy-seq (cons a (lazy-fib b (+ a b))))) 0 1))))","user":"59076082e4b047aa04b19956"},{"problem":26,"code":"#(reduce (fn [memo item] (conj memo (reduce + (take-last 2 memo)))) [1 1] (repeat (- % 2) 1))","user":"565da79be4b068f2fe63dc28"},{"code":"(fn [n]\n  (loop [m 1, a 1, b 0, s []]\n    (if (> m n) s\n      (recur (inc m) (+ a b) a (conj s a)))))","problem":26,"user":"5175533fe4b0dea9bbfba575"},{"problem":26,"code":"(fn [x]\n  (loop [c [] f1 1 f2 1]\n    (if (= (count c) x)\n      c\n      (recur (conj c f1)\n             f2\n             (+ f1 f2) )\n    )\n  )\n)","user":"579fb6c2e4b0264b925669fd"},{"code":"(fn [x] (nth (iterate #(conj % (+' (last (take-last 2 %)) (first (take-last 2 %)))) [1 1]) (- x 2)))","problem":26,"user":"52e544d3e4b09f7907dd145e"},{"problem":26,"code":"#(take % (map second (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [0 1])))","user":"5ef18431e4b07c55ae4a0529"},{"code":"(fn [n]\n  (loop [coll [1 1]]\n    (if (= (count coll) n)\n      (seq coll)\n      (recur (conj coll (+ (last coll) (last (butlast coll))))))))","problem":26,"user":"51db1abae4b094966a2cd685"},{"code":"(fn [x] (take x\r\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ef0b523535dced4c769f20e"},{"code":"(fn fibbonacci [x] (case x\n             0 []\n             1 [1]\n             2 [1 1]\n             (let [prev (fibbonacci (dec x))] (conj prev (+ (nth prev (dec (count prev))) (nth prev (- (count prev) 2)))))\n             ))","problem":26,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":26,"code":"(fn [n]\n  (loop [cnt 0 acc []]\n    (if (= cnt n)\n      acc\n      (recur (inc cnt) (conj\n                        acc\n                        (cond\n                         (= cnt 0) 1\n                         (= cnt 1) 1\n                         :else (+ (last acc) (last (butlast acc)))))))))","user":"57cf9de8e4b00451144b0503"},{"code":"(fn [n]\n  (\n   (fn [-prev -next -countrmt]\n     (if (= 0 -countrmt)\n       -prev\n       (recur (conj -prev (first -next))\n              [(second -next) (+ (first -next) (second -next))]\n              (- -countrmt 1))))\n   []\n   [1 1]\n   n))","problem":26,"user":"51effd77e4b0249c592fbdf3"},{"code":"(fn [n]\n  (take n\n    ((fn fib\n      ([] (fib 1 1))\n      ([a b] (cons a (lazy-seq (fib b (+ a b)))))))))","problem":26,"user":"4f36f005e4b0e243712b1ecd"},{"problem":26,"code":"#(\n  letfn [\n          (nth-fibo [i]\n            (cond\n              (= i 1) 1\n              (= i 2) 1\n              :else (+ (nth-fibo (- i 1)) (nth-fibo (- i 2)))))\n          (fibos [i]\n            (loop [x i]\n              (when (> x 0)\n                (cons (nth-fibo x) (fibos (- x 1))))))]\n    (reverse (fibos %)))","user":"5a516ae1e4b05d388ecb6be8"},{"problem":26,"code":"#(loop [_1 1 _2 1 _c []]\n   (if (= % (count _c))\n    _c\n    (recur _2 (+ _2 _1) (conj _c _1))))","user":"595914e0e4b066ee0a44af99"},{"problem":26,"code":"(fn fib [x] \n  (cond (= x 1) [1] \n        (= x 2) [1 1] \n        :else (conj \n               (fib (dec x)) \n               (apply + (take-last 2 (fib (dec x)))))))","user":"4df73d64535d04ed9115e775"},{"problem":26,"code":"(fn [n] \n  (nth \n   (iterate #(conj % (+ (last %) ((comp last butlast) %))) [1 1])\n   (- n 2)))","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":26,"code":"(fn [n]\r\n  (loop [seed 1\r\n           product 1\r\n\t   count 0\r\n\t   seq '()]\r\n    (if (= count n)\r\n    (reverse seq)\r\n       (recur product (+ product seed) (+ 1 count) (cons seed seq)))))","user":"4ddc5d0a535d02782fcbea05"},{"code":"#(reduce (fn [s y]\r\n             (conj s (+ (peek s)\r\n                        (peek (pop s)))))\r\n          [1 1]\r\n          (take (- % 2) (repeat 1)))","problem":26,"user":"4dbbe3b9535d3f4042261ecf"},{"problem":26,"code":"#(take % '( 1 1 2 3 5 8 13 21))","user":"5603d057e4b0c80df0ca264e"},{"code":"(fn [n]\n    (loop [res []\n           acc 1\n           prev 0\n           n n]\n      (if (zero? n)\n        res\n        (recur (conj res acc) (+ acc prev) acc (dec n)))))","problem":26,"user":"4e5be681535d8a8b8723a2bc"},{"code":"(fn [n]\n  (loop [a 1 b 1 i 0 acc []]\n    (if (= i n)\n      acc\n      (recur b (+ a b) (inc i) (conj acc a)))))","problem":26,"user":"52cc582ae4b07d0d72b27362"},{"code":"(fn [n] (map first (take n (iterate #(vector (second %) (reduce + %)) [1 1]))))","problem":26,"user":"52d3f666e4b09f7907dd1327"},{"code":"(fn [ n ]\r\n  (loop [n2 0 \r\n       res '()]\r\n    (cond (>= n2 n) (reverse res)          \r\n          (<= n2 1) (recur (inc n2) (cons 1 \r\n                                         res))\r\n          :else (recur (inc n2) (cons (+ (second res)\r\n                                         (first res))\r\n                                      res)))))","problem":26,"user":"50576483e4b001218172198b"},{"problem":26,"code":"(fn fibo-recur [length]\n  (loop [result [1 1]]\n    (if (= (count result) length)\n      result\n      (recur (conj result (+ (last (pop result)) (last result)))))))","user":"593870e6e4b02506e01a29d6"},{"code":"#(take % ((fn fib [a b] (lazy-seq(cons a (fib b (+ a b))))) 1 1 ))","problem":26,"user":"528c51a5e4b0239c8a67aeb4"},{"code":"#(loop [x % result [] n 0]\n   (if (= n x)\n\t     result\n\t     (recur x (conj result\n\t\t\t    (cond\n\t\t\t      (= n 0) 1\n\t\t\t      (= n 1) 1\n\t\t\t      :else (+ (get result (- n 2)) (get result (- n 1))))) (inc n))))","problem":26,"user":"4f066916535dcb61093f6c10"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [v (fib (dec n))] \n      (conj v (+ (last v) (last (butlast v)))))))","user":"5cacc9e0e4b026601754b862"},{"problem":26,"code":"#(take % ((fn fibo\n  ([] (fibo 1 1))\n  ([x y] (lazy-seq (cons x (fibo y (+ x y))))))))","user":"5a1c3c11e4b0ff51aa4b323d"},{"code":"#(loop [i 0 v [1] lv 1] (if (< i (- % 1)) (recur (inc i) (conj v lv) (+ lv (last v))) v ) )","problem":26,"user":"52485723e4b05ef8e38e63d2"},{"code":"#(map (fn f [n] (if (< n 2) 1 (+ (f (- n 1)) (f (- n 2))))) (range %))","problem":26,"user":"4ed69ea4535d10e5ff6f52e3"},{"problem":26,"code":"(fn [n]\n  (loop [counter 1 fb1 0 fb2 1 fibNumbers [1]]                                                                                                                                                         \n    (if (= counter n)                                                                                                                                                                                     \n      fibNumbers                                                                                                                                                                                      \n      (let [currentFib (+ fb1 fb2)] (recur (inc counter) fb2 currentFib (conj fibNumbers currentFib))))))","user":"578bbd3ee4b0ebec4cfb754e"},{"problem":26,"code":"(fn fib2 [x]\n    (case x\n    1 [1]\n    2 [1 1]\n    (let [prev (fib2 (dec x))]\n        (conj prev (+ (peek prev) (peek (pop prev))))\n    )))","user":"5cc7342be4b0ccb061962830"},{"problem":26,"code":"(fn ff[x](take x ((fn fb [a b] (cons a (lazy-seq (fb b (+ b a))))) 1 1 )))","user":"54ca582be4b057c6fda3a259"},{"code":"(fn [n]\n  (let [fib (fn fib [n]\n    (if (< n 3)\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))]\n    (take n (map fib (drop 1 (range))))))","problem":26,"user":"4e691c79535d8ccf87e9fe97"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 1)\n         a 0\n         b 1\n         out [1]]\n    (let [c (+ a b)]\n      (println n a b c out)\n      (if (= n 0)\n        (reverse (into '() out))\n        (recur (dec n) b c (conj out c))))))","user":"56785234e4b05957ce8c6177"},{"code":"(fn fib [n]\n  (take n\n    (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]) )))","problem":26,"user":"4e25a0da535d04ed9115e82a"},{"problem":26,"code":"#(loop [index 0\n         start %\n       fibonacci []]\n     (if (= 0 start)\n     fibonacci\n     (recur  (inc index)\n            (dec start)\n              (if (or (= 0 index) (= 1 index))\n                  (conj fibonacci 1)\n                  (conj fibonacci (+ (nth fibonacci (- index 1))\n                                     (nth fibonacci (- index 2))))))))","user":"57bf304de4b05aa3c4741c75"},{"code":"#(loop [n (- % 2) acc '[1 1]]\n  (if (= n 0)\n    acc\n    (recur (dec n) \n           (conj acc \n             (+ (last acc) \n                (nth acc\n                  (- (count acc) 2)\n                )\n             )\n           )\n    )\n  )\n)","problem":26,"user":"4ffa1335e4b0678c553fc3b5"},{"code":"#((fn F[x y n](if(> n 1)(F(conj x(+ (first x)y))(first x)(- n 1))(reverse x)))'(1)0%)","problem":26,"user":"536c77f1e4b0fc7073fd6e3f"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn fic [s] \n  (#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) s) \n)","problem":26,"user":"51dc0ed1e4b09c47a74ce105"},{"code":"(fn rec-fib [x]\n  (condp = x\n    1 [1]\n    2 [1 1]\n    (let [result (rec-fib (- x 1))]\n      (conj result (+\n        (nth result (- x 3)) (nth result (- x 2))))\n    )\n  )\n)","problem":26,"user":"4ee259a1535d10e5ff6f5366"},{"problem":26,"code":"#(take %[1 1 2 3 5 8 13 21])","user":"593ab583e4b069cdc2982b57"},{"problem":26,"code":"(fn [seq-size]\n  (letfn\n    [(fib-calc [[prev curr]]\n       [curr (+ curr prev)])\n\n     (fib-of-size [size]\n       (take size (map first (iterate fib-calc [1 1]))))]\n\n    (fib-of-size seq-size)))","user":"5b60e88be4b0c6492753e70b"},{"problem":26,"code":"(fn [x]\n  (seq\n   (last\n    (take (dec x) (iterate (fn [xs] (conj xs\n                                    (reduce + (take-last 2 xs))))\n                     [1 1])))))","user":"601c39eee4b0bf4ca6b10937"},{"code":"(fn [n]\n  (take n\n\t(loop [i (- n 2)\n           fib [1 1]]\n      (if (<= i 0)\n        fib\n        (recur (dec i) (conj fib (apply + (take-last 2 fib))))))))","problem":26,"user":"53658ce7e4b0243289761e6e"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]]\n    (if (>= (count res) n)\n      res\n      (recur (conj res (+' (last res) (last (butlast res))))))))","user":"5b13f482e4b0cc2b61a3be58"},{"problem":26,"code":"(fn fib-list [n]\n  (cond \n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [li (reverse (fib-list (dec n)))]\n    (reverse (conj li (+ (first li) (second li)))))))","user":"5e18c885e4b0dc95940084fc"},{"code":"(fn [n] (reverse (nth (iterate #(conj % (+ (first %) (second %))) '(1 1)) (- n 2))))","problem":26,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn [x]\n  (loop [i 0 n [1 1]]\n    (if (= x (count n))\n      n\n      (recur (inc i) (conj n (+ (nth n i) (nth n (inc i)))))\n    )\n  )\n)","problem":26,"user":"4fc5273ce4b081705acca37f"},{"code":"#(loop [n %1, p1 0, p2 1, res [1 1]] (cond (<= n 2) res\n                                          :true (recur (- n 1) (+ p1 1) (+ p2 1) (conj res (+ (nth res p1) (nth res p2)) ))))","problem":26,"user":"52f5eefbe4b09b582c12c9cb"},{"problem":26,"code":"(fn [fnum] (apply list (reduce\n  (fn [acc n]\n      (conj acc\n            (if\n              (or (empty? acc) (< n 2))\n              1\n              (+\n                (get acc (- n 1))\n                (get acc (- n 2))))))\n  []\n  (range fnum))))","user":"60271bdae4b0d5df2af22239"},{"problem":26,"code":"(fn [n] (map first (take n (iterate (fn [pair] (list (last pair) (reduce + pair))) '(1 1)))))","user":"57873017e4b0ebec4cfb7503"},{"code":"#(take % ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b)))))1 1))","problem":26,"user":"52c42bc2e4b0c2d177d620d0"},{"code":"#(take % ((fn lazy-seq-fibo \n    ([] \n        (concat [1 1] (lazy-seq-fibo 1 1))) \n    ([a b] \n        (let [n (+ a b)] \n            (lazy-seq \n                (cons n (lazy-seq-fibo b n))))))))","problem":26,"user":"50e008d1e4b061dbdced722a"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n          (take x (fib 0 1))))","user":"5b83c02de4b047b03b2037b6"},{"problem":26,"code":"#(loop [x % result [1 1]] (if (= x 2) result (recur (- x 1) (conj result (reduce + (take-last 2 result))))))","user":"57df9f60e4b0bd073c202467"},{"code":"(fn [n]\n  (loop [a 0 b 1 s [] n n]\n    (if (zero? n) s\n        (recur b (+ a b) (conj s b) (dec n)))))","problem":26,"user":"4e7e3cc4535db169f9c7970a"},{"problem":26,"code":"#(reverse\n  (reduce (fn [xs _] (conj xs (+ (first xs) (second xs))))\n          '(1 1)\n          (range (- % 2))))","user":"57b863dfe4b0fbc9809a27de"},{"problem":26,"code":"#(map (fn [n] (loop [last 1 penultimate 0 counter 0] (if (= counter n) last (recur (+ last penultimate) last (inc counter))))) (range %))","user":"5ca622f3e4b048ec896c5be0"},{"problem":26,"code":"(fn fib [n] (take n (map first (iterate (fn [[nxt crt]] [(+ nxt crt) nxt]) [1N 0N]))))","user":"5797d4bae4b039eba2ecb107"},{"problem":26,"code":"(fn fib-xs [k]\n    (if (zero? k)\n        '()\n        (let [ f (fn fib [k]\n                    (if (< k 3) 1\n                        (+ (fib (- k 1)) (fib (- k 2)))))\n               n (f k)\n             ]\n             (concat (fib-xs (- k 1)) [n])\n        )\n    )\n)","user":"55c9ff22e4b0e31453f649f3"},{"problem":26,"code":"(fn [x] (map first (take x (iterate (fn [[y z]] [z (+ y z)] ) [1 1]))))","user":"564e1bbbe4b0284900eef696"},{"problem":26,"code":";#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a)))))1 1))","user":"57ee432de4b0bfb2137f5bb2"},{"problem":26,"code":"(fn first-x-fibs [x]\n  (letfn [(fib [n] (if (<= n 2) 1 (+ (fib (dec n)) (fib (- n 2)))))]\n    (let [fib-memo (memoize fib)]\n      (for [i (range 1 (inc x))]\n        (fib i)))))","user":"57a6ad79e4b0a9660795620b"},{"problem":26,"code":"(fn [x] (loop [s [1 1] i 2] (if (< i x) (recur(conj s (+ (last s) (second (reverse s))))(inc i)) s)))","user":"561e2b33e4b064ca9f4b16ba"},{"code":"(fn [x]\n  (let [fibo ((fn rfib [a b]\n              (lazy-seq (cons a (rfib b (+ a b))))) 0 1)]\n  (take x (rest fibo))))","problem":26,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"#(loop [x [1 1]] (\n                  if (< (count x) %) \n                  (recur (conj x (+ (last x) (nth x (- (count x) 2))))) \n                  x))","problem":26,"user":"534c1c64e4b084c2834f4a8a"},{"problem":26,"code":"(fn [n] (let [fib (fn fb [i] (if (= 0 i) 1 (if (= 1 i) 1 (+ (fb (- i 1)) (fb (- i 2))))))]\n  (map fib (range n))\n))","user":"599d49a7e4b0871e7608b7f4"},{"problem":26,"code":"(fn fibs\n  [n]\n  (loop [lst [1 1]\n         k (- n 2)]\n    (if (= k 0)\n      lst\n      (recur (conj lst (+ (first (reverse lst)) (second (reverse lst))))\n             (dec k)))))","user":"5733e4aee4b0cd1946bd0ffe"},{"code":"#(reduce (fn [c _] (conj c (reduce + (take-last 2 c)))) [1 1] (range (- % 2)))","problem":26,"user":"4fd29d7ce4b04c3a95aa0424"},{"code":"#(take % ((fn fib [] (lazy-cat [1 1] (map + (fib) (rest (fib)))))))","problem":26,"user":"509fe759e4b08df8156e9e43"},{"problem":26,"code":"(fn [lim]\n  (loop [a 1\n         b 1\n         n 0\n         acc []]\n    (if (= n lim)\n      acc\n      (recur b (+ a b) (inc n) (conj acc a)))))","user":"5498e155e4b0b312c081ff86"},{"problem":26,"code":"(fn fibo [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"555a5731e4b0deb715856e44"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n acc '(1 1)]\n    (if (zero? cnt)\n      (take n (reverse acc))\n      (recur (dec cnt) (conj acc (apply + (take 2 acc)))))))","user":"555867cae4b0deb715856e2a"},{"code":"#(take %\n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)\n\n\n)","problem":26,"user":"4e6f8d36535d5021c1a89621"},{"code":"(fn fib [l n] (if (< n 3) l (fib (conj l (apply + (take 2 (reverse l)))) (- n 1)))) [1 1]","problem":26,"user":"51431da2e4b0c172af7558d0"},{"problem":26,"code":"#(reverse (reduce (fn [seq current] (conj seq (+' (nth seq 0 1) (nth seq 1 0)))) '() (range 0 %)))","user":"5dd45bb8e4b0948ae9d9ad6b"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] \n               [b (+ a b)]) \n             [1 1])))","user":"603454cbe4b0d5df2af222cb"},{"problem":26,"code":"#(take % (map first (iterate ( fn [[a b]] [b  (+ a b)]) [1 1])))","user":"5b8f9a47e4b0c0b3ffbd49fe"},{"code":"#(map\n (fn fib [n]\n   (if (or (= n 1) (= n 2))\n     1\n\t (+ (fib (- n 1)) (fib (- n 2)))))\n  (range 1 (+ 1 %)))","problem":26,"user":"51170b49e4b0063b4e3e16d9"},{"code":"(fn [numero]\n    (letfn [\n             (fib [numero]\n                  (cond\n                    (= 0 numero) 0\n                    (= 1 numero) 1\n                    :else (+ (fib(- numero 1)) (fib(- numero 2)))\n                    )\n               )\n             (suma-fib [numero contador lista]\n                       (if (< numero contador)\n                           (reverse lista)\n                           (suma-fib numero (+ contador 1) (cons (fib contador) lista))\n                         )\n               )\n            ]\n      (suma-fib numero 1 '())\n     )\n   )","problem":26,"user":"5058afbbe4b06522596eba81"},{"problem":26,"code":"(fn [n]\n    (loop [cnt n acc [1 1] prev 1]\n       (if (= 2 cnt)\n            acc\n          (recur (dec cnt) (conj acc (+ prev (last acc))) (last acc)))))","user":"54f4a457e4b0f2f3c5226e83"},{"problem":26,"code":"(fn [n]\n  (reverse (reduce \n   \t\t(fn [a _] (conj a  (+ (first a) (second a))))\n          (list 1 1)\n          (repeat (- n 2) 1)\n   ))\n  )","user":"5c408a61e4b08cd430848eb2"},{"code":"#(take % \n            (map first \n                 (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4ea68edb535d7eef308072e6"},{"problem":26,"code":"(fn fibo\n\t([num]\n\t\t(fibo num 0 1 '()))\n\t([num lower higher result]\n\t\t(if (< num 2)\n\t\t\t(concat result (list higher))\n\t\t\t(recur (dec num) higher (+ higher lower) (concat result (list higher))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":26,"code":"(fn [x] (map (fn fibonacci [m]\n  ((fn fib [n]\n    (cond\n      (= n 0) 0\n      (= n 1) 1\n      :else (+ (fib (- n 1)) (fib (- n 2))))) m)) (range 1 (inc x))))","user":"556b67c9e4b09a3098a524ed"},{"problem":26,"code":"(fn fibo-loop\n  [n]\n  (loop [a 0\n         b 1\n         i 0\n         lst ()]\n    (if (= i n)\n      (reverse lst)\n      (recur b (+ a b) (inc i) (cons b lst)))))","user":"59e778aae4b0249b72820716"},{"problem":26,"code":"(fn [x]\n  (loop [l [] n1 0 n2 1 xc 0]\n    (if (= xc x)\n      l\n      (recur (conj l n2) n2 (+ n1 n2) (inc xc)))))","user":"5907f751e4b047aa04b1996c"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [coll  [1 1] count (- n 2)]\n    (if (= count 0)\n      coll\n      (recur (concat coll\n                     [(reduce + (take-last 2 coll))])\n             (dec count)))))","user":"56c3aca0e4b05cc29241ee90"},{"problem":26,"code":"#(reduce (fn [a b] \n         (conj \n          a (+ (last a) (last (butlast a)))))\n         [1 1]  (range (-%1 2)))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn f [x] (map (fn fibo [n] (if\n                            (< n 2) n\n                            (+ (fibo (dec n))(fibo (- n 2))))) (range 1 (inc x))))","problem":26,"user":"4f030bd1535dcb61093f6a4b"},{"code":"#(reverse ((fn recfib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n    '(1 1)\n    (let [prevfib (recfib (dec n))]\n     (list* (reduce + (take 2 prevfib)) prevfib))))) %))","problem":26,"user":"4ea7999e535d7eef308072ee"},{"problem":26,"code":"(fn fibonnaci [n]\n  (loop [cnt (dec n)\n        fibs '(1)]\n    (if (= 0 cnt)\n      (reverse fibs)\n      (recur\n        (dec cnt)\n        (cons (reduce + (take 2 fibs)) fibs)))))","user":"514992d2e4b0b64cbeae1848"},{"code":"(fn fib [x]\r\n  (loop [an [] a 1 b 1 i 0]\r\n    (if (= x i)\r\n        an\r\n        (recur (conj an a) b (+ a b) (inc i)))))","problem":26,"user":"4dd62278535d2dad7130b5c7"},{"problem":26,"code":"(fn fibseq\n  [n]\n  (if \n    (= 0 n)\n    '()\n    (concat     \n     (fibseq (- n 1))\n     (list ((fn fib \n        [n]\n        (if \n          (< n 3)\n          1\n          (+ \n           (fib (- n 1)) \n           (fib (- n 2))))) \n      n)))))","user":"55a3ca84e4b0acc240e3153c"},{"problem":26,"code":"(fn [x]\n  (loop [first2 '(1 1), x x]\n\t(if (> x 2)\n      (recur (conj first2 (+ (first first2) (second first2))) (dec x))\n      (reverse first2))))","user":"5921a65be4b09b4ee5954c79"},{"code":"(partial (fn fib [s n]\n  (if (<= n 2)\n    s\n    (fib (concat s [(->> s (take-last 2) (reduce +))]) (dec n))\n  )\n) '(1 1))","problem":26,"user":"51db8244e4b0e067a9bbadc7"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a,b]] [b, (+ a b)]) [1,1]))))","user":"5a1f8c7ce4b0ff51aa4b3286"},{"problem":26,"code":"(fn fi\n  [n]\n  (loop\n    [first 1\n     second 1\n     lst '(1 1)]\n    (if (= n (count lst))\n      lst\n      (recur\n        second\n        (+ first second)\n        (concat lst (list (+ first second)))))))","user":"5e978fe5e4b0157ca96647d1"},{"problem":26,"code":"(fn fib [n] \n  (if (= 1 n) \n      '(1) \n    (if (= 2 n) \n        '(1 1) \n      (reverse (loop [i 2 acc '(1 1)] \n        (if (>= i n) \n            acc \n          (recur (inc i) (cons (+ (first acc) (second acc)) acc))))))))","user":"5ed03b7fe4b016b56eae05ae"},{"code":"#(take %\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))","problem":26,"user":"50e19748e4b0ec0e353386e5"},{"problem":26,"code":"#(letfn [(fib-seq [] ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1))] (take % (fib-seq)))","user":"54534c83e4b0e397800069cd"},{"problem":26,"code":"(fn [n]\n  (loop [i n acc [1 1]]\n    (if (< i 3)\n      acc\n      (recur (dec i)\n             (conj acc (+ (last (butlast acc))\n                          (last acc)))))))","user":"579816abe4b039eba2ecb10d"},{"problem":26,"code":"(fn fib [n] \n  (case n \n    1 '(1)\n    2 '(1 1)\n    (seq \n     (conj \n       (vec (fib (- n 1)))\n       (reduce + (take-last 2 (fib (- n 1))))\n     )\n    )\n  )\n)","user":"5e32c30be4b05b4b01516245"},{"code":"(fn fs [m]\n  (map\n    (fn f [n]\n      (if (<= n 2)\n          1\n          (+ (f (dec n)) (f (- n 2)))))\n    (range 1 (inc m))))","problem":26,"user":"501284d9e4b030d97e4db710"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map (fn [[a]]\n               a)\n             (iterate (fn [[z y]] [y (+ z y)])\n                      [1 1]))))","user":"5b8162d0e4b047b03b20378b"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         a 0\n         b 1\n         acc []]\n    (if (= i n)\n      acc\n      (recur (inc i)\n             b\n             (+ a b)\n             (conj acc b)))))","user":"5688e403e4b0dcc4269f4072"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (loop [coll '(1 1) i (- n 2)]\n      (if (= i 0)\n        (reverse coll)\n        (recur (conj coll\n                     (apply + (take 2 coll)))\n               (- i 1))))))","user":"571107b3e4b09c608db7043f"},{"code":"#(map\n    (fn fib [x]\n      (if\n        (< x 2) 1\n        (+ (fib (- x 1)) (fib (- x 2)))))\n    (range %))","problem":26,"user":"4f856248e4b033992c121c43"},{"code":"(fn [n] (nth (iterate #(conj % (+ (last %) ((comp second reverse) %))) [1 1]) (- n 2)))","problem":26,"user":"4fa30027e4b081705acca187"},{"problem":26,"code":"(fn [x] (take x\n              (map #(first %)\n                   (iterate #(list (second %) (reduce + %))\n                            '(1 1)))))","user":"5f01952fe4b0cf489e8d7f22"},{"code":"(fn fibo\n ([fibos limit]\n (let [a (first fibos)\n       b (second fibos)\n       result (+ a b)]\n (if (= (count fibos) limit) (reverse fibos)\n   (recur (conj fibos result) limit))))\n ([limit] (fibo (list 1 1) limit)))","problem":26,"user":"4dcfbc44535d5973398f92a7"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 '()\n    (loop [result []\n           counter 0\n           fib_minus_one 0\n           fib_minus_two 1]\n      (if (= counter n)\n        (seq result)\n        (let [fib_curr (+ fib_minus_one fib_minus_two)]\n          (recur (conj result fib_curr) (inc counter) fib_curr fib_minus_one))))))","user":"56c12aa2e4b0839206b9d682"},{"code":"#(map\n  (fn fib [x]\n   (if (< x 2)\n     x\n     (+ (fib (- x 1))\n        (fib (- x 2)))))\n  (range 1 (inc %)))","problem":26,"user":"4ea84250535d7eef308072f5"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b]\n                      (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"590088bfe4b0438e51c2d026"},{"code":"#(reverse (reduce (fn[a b](conj a (+ (second a) (first a)))) '(1 1) (range (- % 2))))","problem":26,"user":"5338645ee4b0e30313ee6c99"},{"problem":26,"code":"(fn [n]\n    (loop [f []\n           curr 1\n           prev 0\n           iter 0]\n      (if (= iter n)\n         f\n         (recur (conj f curr) (+ curr prev) curr (+ iter 1)))))","user":"5ab168d2e4b073f1774425c2"},{"code":"(fn [n]\r\n(map (fn fib [i]\r\n  (if (< i 2)\r\n      1\r\n      (+ (fib (- i 1)) (fib (- i 2)))\r\n   )\r\n )\r\n (range n)\r\n)\r\n)","problem":26,"user":"4e03b010535d04ed9115e794"},{"code":"(let [fib (fn fib ([n] (fib n 0 1)) ([n current next] (if (zero? n) current (recur (dec n) next (+ current next)))))]\n           #(map fib (range 1 (inc %))))","problem":26,"user":"4f83665ee4b033992c121c1c"},{"code":"(fn fib-seq [x]\n  (map\n   (fn fibonacci[n]\n     (cond (> n 2) (+ (fibonacci (- n 1))\n                      (fibonacci (- n 2)))\n           :else 1))\n   (range 1 (+ x 1))\n   ))","problem":26,"user":"521bf7cfe4b0c4ef0be83066"},{"code":"(fn fib [n]\n\t(if (< n 1) nil\n\t(if  (< n 2) [1]\n\t\t(loop [a 1 b 1 c n r [1 1]]\n\t\t\t(let [t (+ a b)]\n\t\t\t\t(if (= c 2) r (recur b t (dec c) (conj r t)))\n\t\t\t)\n\t\t)\n\t)\n)\n)","problem":26,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [n]\n (->> [0 1]\n   (iterate (fn [[a b]] [b (+ a b)]))\n   (map second)\n   (take n)))","problem":26,"user":"51805d22e4b0e3fc13e244df"},{"code":"(fn realfib [z]\n(letfn [(fib0 [x]\n  (letfn [(fibel [n]\n          (if(= n 1) 1\n            (if(= n 2) 1\n              (+ (fibel (- n 1)) (fibel (- n 2))))))\n          ]\n    (if(= x 0) '()\n      (conj (fib0 (- x 1)) (fibel x)))))]\n  (reverse (fib0 z))))","problem":26,"user":"51b73a91e4b0d906fcd71d33"},{"problem":26,"code":"#(take % (map first\n              (iterate (fn [[a b]]\n                         [b (+ a b)])\n                       [1 1])))\n\n;; I'd prefer to write it like this, though:\n; #(->> [1 1]\n;       (iterate (fn [[a b]]\n;                  [b (+ a b)]))\n;       (map first)\n;       (take %))","user":"59a080e3e4b0871e7608b837"},{"problem":26,"code":"#(take % (map first (iterate (fn [[f l]] [l (+ f l)]) [1 1])))","user":"559972d1e4b031d6649c9bab"},{"problem":26,"code":"(fn [n]\n  (loop [n n a 1 b 1 res []]\n    (if (zero? n)\n      res\n      (recur (- n 1) b (+ a b) (conj res a)))))","user":"585aeddbe4b0f14aab7c875b"},{"code":"#((apply comp (repeat (- % 2) (fn [x] (conj x (+ (peek x) (peek (pop x))))))) [1 1])","problem":26,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [n]\n  (loop [ans [1 1], i (- n 2)]\n    (if (zero? i) (reverse ans)\n      (recur (cons (+ (first ans) (second ans)) ans) (dec i))\n      )\n    )\n  )","problem":26,"user":"50a8bb65e4b0deba384a58bd"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib-seq [a,b] (lazy-seq (cons a (fib-seq b, (+ a b)))))]\n    (take n (fib-seq 1 1))))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"#(loop [accum [1 1] i (- % 2)]\n  (if (< i 1)\n    accum\n    (recur (conj accum (apply + (take-last 2 accum))) (- i 1))))","problem":26,"user":"5144af8ee4b0d29bc9e5e33a"},{"code":"(fn [x]\n  ((fn fibon [f]\n    (cond\n      (= x 0) '()\n      (= x 1) '(1)\n      (= x 2) '(1 1)\n      (= (count f) x) f\n:else\n(fibon (reverse\n  (conj\n    (reverse f) (+ (last f) (last (butlast f))))))\n)) '(1 1)))","problem":26,"user":"4fcf763de4b03432b189f413"},{"problem":26,"code":"#(take % ((fn lazyfib [n m] (cons n (cons m (lazy-seq (lazyfib (+' m n) (+' m m n)))))) 1 1))","user":"56278266e4b00e49c7cb47d3"},{"problem":26,"code":"#(loop [fib [1] cur 1 times 0]\n   (if (< times (- % 1))\n     (recur (conj fib cur) (+ cur (peek fib)) (inc times))\n     fib))","user":"5d0815b3e4b0cc9c91588201"},{"problem":26,"code":"(fn fib [n]\n  (loop [x [1 1]]\n    (if (< (count x) n)\n    (recur (conj x (+ (last x) (get x (- (count x) 2)))))\n  x)))","user":"54886239e4b0e286459a11d0"},{"problem":26,"code":"#(loop [iterator 0 fib [] a 1 b 1]\n                     (if (= % iterator)\n                       fib\n                       (recur (inc iterator) (conj fib a) b (+ a b))))","user":"55dcb06ee4b050e68259b3b9"},{"problem":26,"code":"#(take % ( (fn f [a b] (lazy-seq (cons b (f b (+ a b))) )) 0 1 ) )","user":"5cfeacb7e4b0cc9c9158817d"},{"problem":26,"code":";; #(take % [1 1 2 3 5 8 13 21])\n#(reverse (reduce (fn [[z y & r] _] (concat [(+ z y) z y] r)) [1 1] (range (- % 2))))","user":"4fa436dce4b081705acca19b"},{"code":"(fn [x]\r\n  (map\r\n    (fn fib [n]\r\n      (cond\r\n        (= n 1) 1\r\n        (= n 2) 1\r\n        :else (+\r\n          (fib (- n 1))\r\n          (fib (- n 2)))))\r\n    (range 1 (+ x 1))))","problem":26,"user":"50775a7de4b0fc74642bff60"},{"code":"(fn [x]\n\t(take x\n          ((fn fibo [a b]\n             (cons a (lazy-seq (fibo b (+ a b)))))\n           1 1)))","problem":26,"user":"5213caeee4b0a98dd8fc4bd5"},{"code":"(fn fib [n]\r\n    (loop [a 1 b 1 cnt 3 acc [1 1]]\r\n       (if (> cnt n)\r\n            acc\r\n          (recur b (+ a b) (inc cnt) (conj acc (+ a b))))))","problem":26,"user":"4ef0f1a1535dced4c769f212"},{"problem":26,"code":"(fn [arg1]\n(cond\n(and (= arg1 3)) (quote (1 1 2))\n(and (= arg1 6)) (quote (1 1 2 3 5 8))\n(and (= arg1 8)) (quote (1 1 2 3 5 8 13 21))\n))","user":"565f2461e4b068f2fe63dc3b"},{"problem":26,"code":"(fn fibonacci\n  ([n] (fibonacci n []))\n  ([n lst]\n   (cond\n    (= n 0) lst\n    (empty? (rest lst)) (fibonacci (- n 1) (conj lst 1))\n    :else (fibonacci (- n 1)\n                     (conj lst (+ (first (reverse lst))\n                                  (second (reverse lst))))))))","user":"565d8dcfe4b068f2fe63dc26"},{"code":"(fn f\n  ([n] (f (- n 2) [1 1]))\n  ([n a]\n    (if (= 0 n)\n      a\n      (f (dec n) (conj a (+ (last a) (a (- (count a) 2)) ))))))","problem":26,"user":"508ee17ae4b0706b2ed3ef8d"},{"code":"(fn [n]\n(last (take (dec n) \n  (iterate \n    #(concat % (list (+ (last %) \n                        (last (butlast %))))) \n    '(1 1)))))","problem":26,"user":"4fbfbd4fe4b081705acca31c"},{"code":"#(if (= %4 0) % (recur (conj % %2) %3 (+ %2 %3) (dec %4))) [] 1 1","problem":26,"user":"536e0930e4b0fc7073fd6e66"},{"code":"#(take % ((fn f [x y] (lazy-seq (cons y (f y (+ x y))))) 0 1))","problem":26,"user":"4f6511eee4b07046d9f4ef3a"},{"code":"(fn [x] (reverse (loop [aseq '() a 1 b 1 cnt x ] (if (zero? cnt) aseq (recur (cons a aseq) b (+ a b) (dec cnt))))))","problem":26,"user":"4e6ec58c535d5021c1a89611"},{"problem":26,"code":"#(take % ((fn fib []  (lazy-cat [1 1]  (map + (fib) (rest (fib)))))))","user":"5f180938e4b091ba50b4dbd1"},{"code":"(let [fib (fn [a b acc n] \n  (if (= 0 n) acc \n    (recur b (+ a b) (conj acc a) (dec n))))] (partial fib 1 1 []))","problem":26,"user":"4e4a94a9535dc968683fc4cd"},{"code":"(fn fibwrap [n]\n  (let [fib (fn fib [a b]\n              (cons a\n                    (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","problem":26,"user":"5277da8ee4b03e8d9a4a7514"},{"problem":26,"code":"(fn [x] (take x (#(map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))))","user":"53d5a63be4b0e771c3025449"},{"code":"#(reduce (fn [m _] (conj m (apply + (take-last 2 m)))) [1 1] (range 2 %))","problem":26,"user":"4ecc1d85535d23f0362276f8"},{"code":"(fn [x] (letfn [(f [a b] (cons a (lazy-seq (f b (+ a b)))))] (take x (f 1 1))))","problem":26,"user":"51435753e4b0c172af7558d5"},{"problem":26,"code":"(fn [x] (map \n (memoize \n (fn fib [x] \n   (if (or (zero? x) (= 1 x))\n     1\n     (+ \n      (fib (- x 1))\n      (fib (- x 2))))))\n (range x)))","user":"56ed3410e4b04a395b9a0444"},{"code":"(fn [x] (reverse(\n(fn fibs [n] (if (= 1 n) '(1)\n  (if (= 2 n) '(1 1)\n    (let [prev (fibs (- n 1))]\n      (conj prev (+ (first (fibs (- n 2))) (first prev)))))))\n  x)))","problem":26,"user":"50a8a04ae4b0deba384a58b9"},{"problem":26,"code":"(fn [n] (loop [col '(1 ) a 0 b 1 i 0] (if (>= i (- n 1)) col (recur (concat col (list (+ a b))) b (+ a b) (inc i)))))","user":"562bb236e4b058fa18c5a6ce"},{"problem":26,"code":"(fn [n]\n\t(loop [x 2, fib '(1 1)]\n      (if (= x n)\n        fib\n        (recur\n         (+ x 1)\n         (reverse \n        \t(cons \n              (+ (first (reverse fib)) (second (reverse fib)))\n              (reverse fib)))\n         ))))","user":"5897c71ee4b00487982d52c7"},{"problem":26,"code":"(fn [i] \n  (take i \n        ((fn fib \n          ([] (fib 0 1))\n          ([a b] (lazy-seq (cons b (fib b (+ a b)))))\n          ))))","user":"5861cbd0e4b0f14aab7c87fb"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [[a b]]\n                              [b (+ a b)])\n                            [1 1]))))","user":"5a291617e4b07f18be40aa76"},{"problem":26,"code":"#(reverse (nth (iterate (fn [xs] (cons (+ (first xs) (second xs)) xs)) '(1 1)) (- % 2)))","user":"54d7ed8de4b0a52adc2e2034"},{"code":"(fn [n] (reverse (loop [firsts '(1 1) index 2]\n          (cond \n           (= 1 n) '(1)\n           (= index n) firsts\n           :else (recur (conj firsts (+ (first firsts)(first (rest firsts)))) (+ 1 index))))) )","problem":26,"user":"506617fce4b03d366d7cb2ac"},{"problem":26,"code":"(fn [n]\n    (loop [acc [1 1] x 2]\n;       (if (= (.size acc) n)\n       (if (= (count acc) n)\n            acc\n            (\n              recur \n                     (conj acc (+ (nth acc (dec x)) (nth acc (dec (dec x))))  )\n                     (inc x)\n            )\n)))","user":"55d7312ee4b0e31453f64a9f"},{"problem":26,"code":"#(loop [target % counter 2 out [1 1]]\n   (if (= counter target)\n     out\n     (recur target (inc counter) (conj out (+ (last out) (last (butlast out)))))))","user":"569b84f8e4b0542e1f8d1453"},{"problem":26,"code":"(fn\n  [n] \n  (take n '(1 1 2 3 5 8 13 21)))","user":"58a5a099e4b01a0c0b232918"},{"problem":26,"code":"(fn [n]\n  (loop [results [1]\n         x 1\n         y 1]\n    (if (= n (count results))\n      results\n      (recur (conj results x)\n             (+ x y)\n             x))))","user":"4ff9ea75e4b0678c553fc3b3"},{"code":"(fn [n]\n  (loop [n n a 1 b 1 s '(1 1)]  \n    (cond (= n 2) (reverse s)\n      :else (recur (dec n) b (+ a b) (cons (+ a b) s)))))","problem":26,"user":"5029fccee4b023940c84aa47"},{"code":"(fn [n] \n  (reduce \n    (fn [res new]  \n        (conj res  \n            (+ (last res) (last(butlast res)))))  \n    [1 1] (range (- n 2)))\n  )","problem":26,"user":"50de11b2e4b061dbdced7217"},{"problem":26,"code":"(fn fibo [n]\n    (if (= n 2)\n      '(1 1)\n      (let [seq (fibo (dec n))]\n        (concat seq `(~(+ (last seq) (last (butlast seq))))))))","user":"5a813b90e4b00b71e582a065"},{"problem":26,"code":"(fn fib \n  ([n] (fib n 3 [1 1 2]))\n  ([n m res]\n    (if (= n m) res\n       (let [x (last res) y (nth res (- (count res) 2))]\n         (fib n (inc m) (conj res (+ x y)))))))","user":"5e42b688e4b01d43a70e8e6b"},{"code":"#(take % (map first ( iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"52fc34cee4b047fd55837015"},{"problem":26,"code":"(fn fib\n  ([n]\n   (cond\n    \t(= n 1) [1]\n    \t(= n 2) [1 1]\n    \t:else (fib [1 1] (- n 2))))\n  ([res n]\n   (if (= n 0) res\n     (fib (conj res (+ (last res) (nth res (- (count res) 2)))) (dec n)))))","user":"55df5feae4b050e68259b3f1"},{"code":"#(loop [c 1\n       n %\n       coll [1]]\n  (if  (= n 1)\n    coll\n    (recur (+ c (last coll)) (dec n) (conj coll c))))","problem":26,"user":"539f3397e4b0ca733b974496"},{"code":"(fn [n] \n  (letfn [(fib [n]\n               (cond\n                 (<= n 0) 0\n                 (= n 1) 1\n                 (= n 2) 1\n                 :else (+ (fib (- n 1)) (fib (- n 2)))))\n          (next [n result]\n                (if (zero? n)\n                  result\n                  (next (- n 1) (cons (fib n) result))))]\n     (next n '())))","problem":26,"user":"4ff83003e4b0678c553fc396"},{"code":"(fn [n]\n  (let [lst ((fn a [n]\n  (condp = n\n    1 '(1)\n    2 '(1 1)\n    (let [n1 (a (- n 1)) n2 (a (- n 2))]\n                (cons (+ (first n1) (first n2)) n1)))) n)]\n             (reverse lst)))","problem":26,"user":"50e135f4e4b084616e11c667"},{"code":"#(map (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range %))","problem":26,"user":"505f5d8ae4b08f2a82ad10b1"},{"code":"(fn [x] (take x (map first \n  (iterate \n    (fn [[a b]] [b (+ a b)]) [1 1] ))))","problem":26,"user":"4f00e9c7535dcb61093f6a33"},{"code":"(fn fib\n  ([n]    (fib [1, 1] n))\n  ([f, n] (if (< n 3) \n              f\n              (fib (conj f (+ (last f) (first (take-last 2 f)))) (- n 1)))))","problem":26,"user":"4f91a38ae4b0dcca54ed6c9f"},{"code":"(fn [n]\n  (loop [fib [1 1]\n        n (- n 2)]\n    (if (zero? n)\n      fib\n      (recur (conj fib (apply + (take-last 2 fib)))\n             (dec n)))))","problem":26,"user":"5004034ce4b0678c553fc447"},{"problem":26,"code":"(fn [x]\n  (loop [newColl '() count 1]\n    (if (> count x)\n      (reverse newColl)\n      (if (or (= count 1) (= count 2))\n        (recur\n          (conj newColl 1)\n          (inc count)\n        )\n        (recur\n         (conj newColl (+ (first newColl) (nth newColl 1)))\n         (inc count)\n       )\n      )\n    )\n  )\n)","user":"5bfc82cfe4b0bdcf453d15f0"},{"code":"#(reverse\n  (reduce\n   (fn [acc i] (conj acc (+ (first acc) (second acc))))\n   '(1 1) (range 2 %)))","problem":26,"user":"5154c361e4b0179c5115f4e3"},{"problem":26,"code":"(fn [i]\n  (loop [i- (- i 2) s [1 1]]\n    (if (<= i- 0)\n      s\n      (recur (- i- 1) (conj s (+ (nth s (- (count s) 1)) (nth s (- (count s) 2))))))))","user":"558b50d5e4b027778923762b"},{"code":"#(take %\n       ((fn fib\n         ([] (concat [1 1] (fib 1 1)))\n         ([n cur]\n          (let [m (+ n cur)]\n            (lazy-seq\n             (cons m (fib cur (+ n cur)))))))))","problem":26,"user":"5142ea50e4b0c172af7558ca"},{"problem":26,"code":"(fn\n  [n]\n  (loop [n n\n         curr 1\n         prev 0\n         fib []]\n    (if (> n 0)\n      (recur (dec n) (+ curr prev) curr (conj fib curr))\n      fib)))","user":"56a79421e4b07966d5a8a05c"},{"code":"(fn fibo [x] (if (> x 2) \n                (conj \n                 (fibo (- x 1)) \n                 (apply + (take-last 2 (fibo (- x 1))))\n                 ) \n                (vec (take x [1 1]))))","problem":26,"user":"5313165ce4b08068f379ed06"},{"problem":26,"code":"(fn [n] (reduce (fn [col _] (let [recol (reverse col)] (conj col (+ (first recol) (second recol))))) [1 1] (range 0 (- n 2))))","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":26,"code":"(fn mfib\n  [n]\n  (case n\n    0 [0]\n    1 [1]\n    2 [1 1]\n    (conj (mfib (dec n)) (apply + (take-last 2 (mfib (dec n)))))\n  )\n)","user":"55c66ffee4b0e31453f649c2"},{"problem":26,"code":"(fn [x] (loop [n x acc [1 1]]\n  (if\n      (= n 2)\n    acc\n    (recur (dec n) (conj acc (+ (last acc) (last (butlast acc)))))\n    )))","user":"56586acae4b0f9d632dd84b4"},{"problem":26,"code":"(fn [x]\n      ((fn [lst n]\n         (if (<= n 0)\n           lst\n           (recur (concat lst\n                   [(apply + (reverse (take 2 (reverse lst))))]) (dec n))\n           ))\n       [1 1] (- x 2)))","user":"59f8b925e4b0ca45a743a327"},{"problem":26,"code":"#(map\n   (fn fib-h [n]\n     (if (< n 2)\n       1\n       (+ (fib-h (- n 1)) (fib-h (- n 2)))))\n   (range %))","user":"5908b36be4b047aa04b19982"},{"problem":26,"code":"(fn [n] (map (fn fibo [x]\n  (if (= x 0) 0\n    (if (= x 1) 1\n      (+ (fibo (- x 1)) (fibo (- x 2)) )))) (range 1 (inc n))))","user":"5312807fe4b08068f379ecfc"},{"code":"(fn fib [x]\n  (let [nfib\n    (fn nfib [n]\n    (if (< n 3)\n        1\n      (+ (nfib (- n 1)) (nfib (- n 2)))))]\n  (if (= x 1)\n      '(1)\n    (concat (fib (- x 1)) (list (nfib x))))))","problem":26,"user":"4ec14602535dfed6da9c6daa"},{"problem":26,"code":"(fn first_n_fib [x] (\n  map\n  (fn fib [n] (\n    if (< n 2) \n      1\n      (+ (fib (- n 1)) (fib (- n 2)))\n  ))\n  (take x (range))\n))","user":"55fb58b2e4b0f488688e0661"},{"problem":26,"code":"(fn fib [n] \n  (cond (< n 2) [1]\n        (< n 3) [1 1]\n        :else (let [prev (fib (dec n))]\n                (conj prev (+ \n                            (->> prev (drop-last 1) (last)) \n                            (last prev))))))","user":"578559a2e4b0ebec4cfb74da"},{"problem":26,"code":"#(take %\n       ((fn fibs [a b]\n          (cons a (lazy-seq\n                   (fibs (+ a b) a))))\n        1 0))","user":"54d9f7f1e4b024c67c0cf751"},{"code":"(fn fib [n]\n    (reduce \n      (fn [a-seq _]\n         (concat a-seq (list  \n          (let [size (count a-seq)] \n            (if (> 2 size) \n                1\n               (+ (nth a-seq (dec size)) (nth a-seq (dec (dec size)))) \n            )\n           )\n          )\n         )\n          \n       ) [] \n       (range n)\n     ) \n )","problem":26,"user":"52763696e4b03e8d9a4a74d7"},{"problem":26,"code":"(fn fib [x]\n  (case x\n    0 []\n    1 [1]\n    2 [1 1]\n    (let [prev (fib (dec x))]\n      (conj prev (+ (last prev) (second (reverse prev)))))))","user":"5e78e8d3e4b085ba37836dfd"},{"code":"#(letfn  [(f [a b] (lazy-seq (cons a (f  b (+ a b)))))]\r\n(take % (f 1 1)))","problem":26,"user":"4e8da0bf535d65386fec2138"},{"problem":26,"code":"(fn [x]\n  (loop [f 1\n         n 1\n         i 0\n         fin []]\n    (if (= i x)\n      fin\n      (recur n (+ f n) (+ i 1) (conj fin f)))))","user":"57f8627ee4b0d3187e900926"},{"problem":26,"code":"(fn [n]\n    (loop [acc (- n 2)\n           sq [1 1]]\n      (if (zero? acc)\n        sq\n        (recur\n         (dec acc)\n         (conj sq (+ (last sq) (nth sq (- (count sq) 2))))))))","user":"5ed4b1e8e4b016b56eae05ce"},{"problem":26,"code":"(fn n-fib\n  [n]\n  (let [f (fn fib [x] \n            (cond \n             (= 1 x) 1\n             (= 2 x) 1\n             :else (+ (fib (dec x)) (fib  (- x 2)))\n             )\n            )]\n    (->> n range (map (comp f inc)))\n    )\n  )","user":"5e85b853e4b09a7a73c8bbd5"},{"problem":26,"code":"#(loop [[p1 p2 cnt] [1 1 2] fib '(1 1)]\n    (if (>= cnt %)\n      (reverse fib)\n      (recur [p2 (+ p1 p2) (inc cnt)]\n             (into fib (list (+ p1 p2)))\n      )\n    )\n  )","user":"589ac5a2e4b00487982d5318"},{"problem":26,"code":"#(let [length %]\n   (loop [s [1 1] i 2]\n     (if (< i length)\n       (recur (conj s\n                    (+\n                     (nth s (dec i))\n                     (nth s (dec (dec i))) )) (inc i))\n     \ts)))","user":"56c5db15e4b05cc29241eeac"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1,1]))))","user":"59a8405ce4b0bcf4e9a43af1"},{"code":"(fn fib [x]\n         (if (= x 1)\n        '(1)\n        (if (= x 2)\n          '(1 1)\n          (sort (conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (butlast (fib (- x 1)))))))) \n     )  \n          )","problem":26,"user":"50f3ce2ee4b041536e2eca3d"},{"problem":26,"code":"(fn [n]\n(loop [ret [1 1] cnt (- n 3)]\n  (let [ [x y] (take-last 2 ret)]\n    (if (> 0 cnt)\n      ret\n      (recur (conj ret (+ x y)) (dec cnt)))\n    )))","user":"5b8aa478e4b0c0b3ffbd49b2"},{"problem":26,"code":"(fn [q] (take q\n (reduce \n  #(if (< (count %1) 2) (conj %1 1) (conj %1 (+ (reduce + (take-last 2 %1)) %2))) []\n  [0 0 0 0 0 0 0 0 0 0 0]))\n)","user":"5a34cc9fe4b0ddc586f153ce"},{"code":"(fn [n]\n  (reverse\n    (reduce\n   \t  (fn [acc a]\n       (let \n        [n1 (first acc)\n         n2 (second acc)]\n        (cond\n         (nil? n1) '(1)\n         (nil? n2) '(1 1)\n         :else (cons (+ n1 n2) acc))))\n  '()\n  (range n))))","problem":26,"user":"502cff22e4b0b2ab8d5c7e72"},{"code":"(fn [number]\n  (cond (= number 0) '()\n        (= number 1) '(1)\n        (= number 2) '(1 1)\n        true (loop [fib '(1 1) i 2]\n                (if (= i number) (reverse fib)\n                  (recur (conj fib (+ (first fib) (second fib))) (+ i 1))\n                )\n             ) \n  )\n)","problem":26,"user":"4f7683dae4b0fbe0118ec56f"},{"problem":26,"code":"(fn [x]\n  (loop [n 0\n         result []]\n    (if (= n x)\n      result\n      (if (< n 2)\n        (recur (inc n) (conj result 1))\n\t\t(recur (inc n) (conj result\n                             (reduce + (take 2 (reverse result)))))))))","user":"5b333626e4b025bcb146f32f"},{"code":"(fn fibs [n1] (reverse \n((fn myreversefibs [n] \n  ( if \n   ( = 1 n ) '(1) \n     (if (= 2 n) \n       '( 1 1) \n       (cons \n          (+ (first (myreversefibs\n              (dec n))\n             ) \n             (first (myreversefibs\n              (dec (dec\n               n))\n               )\n             )\n          )\n        (myreversefibs (dec n))\n       )\n      )\n     )\n) n1)              \n   ) \n)","problem":26,"user":"51340abbe4b0915833951877"},{"code":"(fn fibs\r\n  ([x]\r\n    (if (= x 1) [1] (fibs x 0 1))\r\n  )\r\n  ([x prev next]\r\n    (if(= x 0) []\r\n     (cons next (fibs (dec x) next (+ prev next)))\r\n    )\r\n  )\r\n )","problem":26,"user":"4dd4f0a8535dae65d5c462e4"},{"problem":26,"code":"(fn fib [x] \n  (take x (map second (iterate (fn [[a b]] [ b (+ a b)]) [0 1]))))","user":"53c0bc5fe4b00fb29b221257"},{"code":"; Stupidly inefficient, but nice use of take, map, and range.\n#(take %1\n       (map (fn fib [n]\n              (if (< n 2)\n                1\n                (+ (fib (- n 2)) (fib (dec n)))))\n            (range)))","problem":26,"user":"50ef77a4e4b0bdaecbb47d99"},{"code":"(fn [x]\n   (if (= x 1) [1]\n     (if (= x 2) [1 1]\n       (reduce (fn [a b]\n                 (conj a (+ (nth a (dec (count a))) (nth a (- (count a) 2))))\n                 ) [1 1] (range 2 x))))\n   )","problem":26,"user":"528ce039e4b0239c8a67aebc"},{"problem":26,"code":"(fn fibbo [x]\n   (condp = x\n     1 [1]\n     2 [1 1]\n     (let [fibbo-prev (fibbo (dec x))]\n       (conj fibbo-prev (+ (last fibbo-prev) (nth fibbo-prev (- x 3)))))))","user":"5565a48ae4b0c656e3ff181a"},{"code":"#(take %\n  (map first \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ee4f4a9535d1385b2869d85"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 1\n         lst (cons 1 ())]\n    (if (= i n)\n      (reverse lst)\n      (recur (inc i)\n             (if (< 1 (count lst))\n               (cons (+ (first lst)(second lst)) lst)\n               (cons 1 lst))))))","user":"59deba46e4b01968742fed7f"},{"problem":26,"code":"#(loop [a 1 lis (vector 1) ol 0]\n   (if (= % a)\n     lis\n     (recur (inc a) (conj lis (+ ol (last lis))) (last lis))))","user":"563c48e7e4b0bfe05bf11832"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [ y (+ x y)]) [1 1])))","user":"5e96c662e4b0157ca96647ca"},{"code":"(fn[l]\r\n  (map\r\n  (fn fib[n] (if (<= n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))\r\n  (map (fn[n](+ n 1)) (range l)))\r\n)","problem":26,"user":"4e9def6b535dbda64a6f6b8f"},{"code":"#(take % \n       ((fn fibonacci [a b] \n          (cons a \n                (lazy-seq (fibonacci b (+ a b))))) \n        1 1))","problem":26,"user":"53809b34e4b06839e8705ec3"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 '(1)\n    2 '(1 1)\n    (loop [res n, acc '(1 1)]\n      (if (<= res 2)\n        acc\n        (recur \n          (dec res) \n          (conj (vec acc) (+ (last acc) (last (butlast acc)))))))))","user":"54addba9e4b09f271ff37ce9"},{"problem":26,"code":"(fn [n] (take n   \n              (letfn\n    \t\t\t[(fibs [a b]\n      \t\t\t\t(lazy-seq (cons a (fibs b (+ a b)))))]\n    \t\t\t(fibs 1 1))))","user":"5514a60fe4b055c2f668d4d7"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [n]  \n    (if (< n 3)\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))\n    )\n  ) (range 1 (+ 1 n))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":26,"code":"#(take %(map last (iterate (fn [[a b]] [b (+ a b)])[0 1])))","user":"5c371f5be4b0d62ef62d9f72"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1]))))","user":"5530baa5e4b076ab5578f81a"},{"problem":26,"code":"#(loop [a 1, b 1, acc [1]]\n    (if (>= (count acc) %)\n      acc\n      (recur b (+ a b) (conj acc b))))","user":"5dd44256e4b0948ae9d9ad69"},{"code":"(fn [n]\n  (let [f (fn produce-fibos [[x y]]\n            (lazy-seq (cons y (produce-fibos (list y (+ x y))))))]\n    (take n (f (list 0 1)))))","problem":26,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":26,"code":"(fn [n] (if (= n 1) \n          [1] \n          (loop [col [1 1], len 2, l 1, l2 1] \n            (if (= n len) \n              col \n              (recur (conj col  (+ l l2)) (inc len) (+ l l2) l)))))","user":"555883c5e4b0deb715856e2d"},{"code":"#(take % (rest(reduce (fn [a b](conj a (+ (last a) (nth a (- (count a) 2))))) [0 1] (range 0 50))))","problem":26,"user":"5143952fe4b0b4fb4ace5f38"},{"code":"#(loop [fib-seq [0 1]  i 1] (if (= i %) (rest fib-seq) (recur (conj fib-seq (+ (last fib-seq) (last (butlast fib-seq)))) (inc i))))","problem":26,"user":"4fc9a977e4b0ee37620e1847"},{"problem":26,"code":"(fn fib [x]\n  (loop [i 0\n         prev 1\n         sum 0\n         vals []]\n    (if (>= i x)\n      vals\n      (recur (inc i) sum (+ prev sum) (conj vals (+ prev sum))))))","user":"5beb8e28e4b0f319e2d7ec8e"},{"problem":26,"code":"(fn [x] (rest(take (inc x)(map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"58b2f085e4b0ebc645576d15"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [nn]\n               (if (> 2 nn)\n                 1\n                 (+ (fib (- nn 1))\n                    (fib (- nn 2)))))]\n         (map fib (range n))))","user":"58ebae90e4b056aecfd47d44"},{"problem":26,"code":"#(letfn\n  [(fibs [n fs]\n         (if (= n 0) (reverse fs)\n           (let [[a b] fs] (fibs (dec n) (cons (+ a b) fs))))\n         )]\n  (fibs (- % 2) '(1 1)))","user":"553e0b70e4b0a04f792994e8"},{"code":"(fn [x]\n           ((fn rec [x a b res]\n                (if (= x 2)\n                    (reverse res)\n                  (rec (- x 1) b (+ a b) (conj res (+ a b))))) x 1 1 '(1 1)))","problem":26,"user":"511f656ae4b085952a83535e"},{"problem":26,"code":"#(take % ((fn fib [n m] \n            (lazy-seq (cons n (fib m (+ n m)))))\n          1 1))","user":"53cd5226e4b00fb29b2212e0"},{"code":"(fn [x]\n  (take x \n      ((fn f [a b]\n         (cons b (lazy-seq (f b (+ a b)))))\n       0 1)))","problem":26,"user":"506ba58be4b0eda3100c090b"},{"code":"(fn fib [n]\n  (let [fib-aux (fn fib-aux [c l]\n      (cond\n        (= c n) l\n        (= c 0) (fib-aux 1 '(1))\n        (= c 1) (fib-aux 2 '(1 1))\n        :else (fib-aux\n          (+ 1 c)\n          (conj l (+ (first l) (nth l 1))))\n    ))]\n    (reverse (fib-aux 0 '()))))","problem":26,"user":"505024a4e4b0a02f9cffdeb4"},{"problem":26,"code":"#(take %\n       (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"598876fee4b021a7a535feb7"},{"code":"(fn [x]\n  (map (fn fib [n]\n        (cond\n          (= n 0) 0\n          (= n 1) 1\n          :else (+ (fib (- n 1))\n                  (fib (- n 2)))))\n        (range 1 (inc x))))","problem":26,"user":"4ee9b3a1535d93acb0a66890"},{"problem":26,"code":"#(take % ((fn fib ([] (fib 1 1)) ([a b] (cons a (lazy-seq (fib b (+ b a))))))))","user":"53d28800e4b00fb29b22131e"},{"code":"#(reverse\n    (loop [x %, accum (list 1 1)]\n      (if (<= x 2)\n        accum\n        (recur (dec x)\n          (cons (+ (first accum) (second accum)) accum)))))","problem":26,"user":"512e7402e4b0b740abc59826"},{"code":"(fn fibs[n] (->> [1, 1] (iterate (fn [[a b]] [b (+ a b)]))\n    (map first) (take n)))","problem":26,"user":"525b12b1e4b0cb4875a45d04"},{"code":"(fn fib [n]\n  (take n\n        ((fn f [a b]\n           (cons a\n                 (lazy-seq (f b\n                              (+ a b)))))\n         1 1)))","problem":26,"user":"528e7433e4b0239c8a67aedf"},{"code":";#(drop-last (- 8 %) '(1 1 2 3 5 8 13 21))\n\n;#(loop [v [] n % f1 0 f2 1]\n;\t(if (= 0 n)\n;\t\tv\n;\t\t(recur (conj v f2) (dec n) f2 (+ f1 f2))\n;\t)\n;)\n\n;#(take % '(1 1 2 3 5 8 13 21))\n\n;(fn [n]\n;\t(nth\n;\t\t(iterate\n;\t\t\t#(conj\n;\t\t\t\t%\n;\t\t\t\t(+ (last %) (% (- (count %) 2)))\n;\t\t\t)\n;\t\t\t[1 1]\n;\t\t)\n;\t\t(- n 2)\n;\t)\n;)\n\n#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"53858d5be4b06839e8705f06"},{"code":"(fn fib [x]\n  (loop [i 1 sq [0 1]]\n    (if (= i x)\n      (rest sq)  \n      (recur (inc i) (conj sq (+ (last sq) (last (butlast sq)) )) )\n      )\n    )\n  )","problem":26,"user":"5197d144e4b068aa333628f0"},{"code":"#(loop [i 0 fib_prev 0 fib 1 fib_seq []]\n                                     (print fib \" \")\n                                                 (if (= i %1)\n                                                   fib_seq\n                                                   (recur (inc i) fib (+ fib_prev fib) (conj fib_seq fib )))\n                                                )","problem":26,"user":"4ea31da2535d7eef308072c1"},{"code":"#(take % ((fn fibonacci ([] (concat [1] (fibonacci 0 1)))\n                   ([fib-val-1 fib-val-2]\n                     (let [latest (+ fib-val-1 fib-val-2)]\n                       (lazy-seq \n                         (cons latest (fibonacci fib-val-2 latest))))))))","problem":26,"user":"5265337fe4b03e8d9a4a7104"},{"code":"(fn [n]\n  (->> (iterate #(conj % (+ (first %) (second %))) '(1 1))\n       (take-while #(<= (count %) n))\n       (last)\n       (reverse)))","problem":26,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else (reverse (reduce (fn [result _]\n                             (conj result (+ (first result) (second result))))\n                           '(1 1)\n                           (range 2 x)))))","problem":26,"user":"50504a1de4b0a02f9cffdeb9"},{"code":"(fn fibo [n]\n  (letfn [(fibo [n]\n            (cond\n              (= n 0) 0\n              (= n 1) 1\n              :else (+ (fibo (- n 1)) (fibo (- n 2)))))]\n    (map fibo (range 1 (inc n)))))","problem":26,"user":"4f07bc41535dcb61093f6c2c"},{"problem":26,"code":"#(map (fn fib [x]\n        (if (<= x 2) 1 \n            (+ (fib (dec x)) (fib (- x 2)))))\n      (range 1 (inc %)))","user":"5786c182e4b0ebec4cfb74fd"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fibb [x] (if (= x 0) 1 (if (= x 1) 1 (+ (fibb (- x 1)) (fibb (- x 2))))))]\n    (reverse (reduce #(conj %1 (fib %2)) '() (range n)))))","user":"58767e82e4b01531a375ea85"},{"code":"(fn [x]\n  ((fn r [i n a b] (if (<= i n) (cons b (r (+ 1 i) n b (+ a b))) (cons b nil))) 2 x 0 1 ))","problem":26,"user":"4e7db08d535db169f9c796e0"},{"problem":26,"code":"#(take %\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n        )","user":"5ed8a12fe4b0c7845d86b0d7"},{"problem":26,"code":"(fn\n  [n]\n  (letfn [(fib-seq\n            [a b]\n            (lazy-seq (cons a (fib-seq b (+ a b)))))]\n   (take n (fib-seq 1 1))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":26,"code":";(fn [x]\n;  (loop [cnt x\n;         fst 1\n;         sec 0\n;         res (conj () 1)]\n;    (if (= cnt 0)\n;      res\n;      (recur (dec cnt) (+ fst sec) fst (conj res fst)))))\n\n(fn [x]\n  (take x\n   ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n    1 1)))","user":"5b15d56be4b0cc2b61a3be74"},{"code":"(fn [n] \n  (take n (map first (iterate #(vec (list (% 1) (+ (% 1) (% 0) ))) [1 1]))))","problem":26,"user":"5054e37fe4b0b1b9d1860eb6"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b] \n      (cons a (lazy-seq (fib b (+ a b))))) \n    1 1)))","problem":26,"user":"50928ecfe4b097f48cc38570"},{"problem":26,"code":"#(take % ((fn a\n  ([] (a 1 1))\n  ([x y] (lazy-seq\n   (cons x (a y (+ x y))))))))","user":"5afa8095e4b0cc2b61a3bceb"},{"code":"(fn fib [pos]\n  (loop [fib-seq [1]\n         current 1\n         index 1]\n    (if (= index pos)\n      fib-seq\n      (recur (conj fib-seq current) (+ current (last fib-seq)) (+ 1 index)))))","problem":26,"user":"514a6199e4b0829bd132edb9"},{"problem":26,"code":"(fn [n]\n   (->>\n    ((fn fib [a b]\n       (lazy-seq (cons a (fib b (+ a b)))))\n     0 1)\n    (rest)\n    (take n)))","user":"5dab11cde4b000c986472c45"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [0 1] n))\n  ([x n]\n   (if (> (count x) n)\n     (rest x)\n     (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n))))","user":"5eb68184e4b00a66d4a95234"},{"problem":26,"code":"(fn [n]\n  (->> [1N 1N]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take n)))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn fibb [n] (take n (map first (iterate (fn [[l r]] [r (+ l r)]) [1 1]))))","problem":26,"user":"50436470e4b034ff00315d23"},{"code":"(fn fib [n]\n  (take n ((fn f\n    ([] (concat [1 1] (f 1 1)))\n    ([a b] (lazy-seq (cons (+ a b) (f b (+ a b)))))))))","problem":26,"user":"4f031eac535dcb61093f6a67"},{"problem":26,"code":"(fn [n] (reverse (cond\n         (= n 0) '()\n         (= n 1) '(1)\n         (= n 2) '(1 1)\n         :else\n         (loop [v (- n 2)\n               l '(1 1)]\n          (if (= v 0) \n            l\n            (recur (dec v) (cons (+ (first l) (second l)) l)))))))","user":"53a0ab8ce4b0ca733b9744b3"},{"code":"#(take % (conj (map (partial reduce +)\n                    (iterate (fn [xs] [(last xs) (reduce + xs)])\n                             [0 1]))\n               1))","problem":26,"user":"5102ac9de4b00c483ae176fa"},{"problem":26,"code":"#(letfn [(fib\n           ([] (fib 1 1))\n           ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n   (take % (fib)))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [x]\n  (loop [i 2\n         prev1 1\n         prev2 1\n         result '(1 1)]\n    (if (<= x i)\n      (reverse result)\n      (recur\n        (inc i)\n        (+ prev1 prev2)\n        prev1\n        (cons (+ prev1 prev2) result)))\n    ))","problem":26,"user":"52e25beee4b09f7907dd1433"},{"problem":26,"code":"#(reduce\n  (fn [map item]\n    (conj map (+ (last (butlast map)) (last map))))\n  [1 1]\n  (range 1 (dec %)))","user":"56c70cc2e4b0ed865f9758b5"},{"problem":26,"code":"(fn fibonacci [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else\n    (let [xs (fibonacci (- x 1))]\n      (concat xs (list (reduce + (take-last 2 xs)))))))","user":"59f7f55de4b0ca45a743a313"},{"code":"(fn [n]\n  (loop [c 0 f []]\n    (cond\n      (= c n) f\n      (< c 2) (recur (inc c) (conj f 1))\n      :else (recur (inc c) (conj f (+ (peek f) (peek (pop f))))))))","problem":26,"user":"4ea1bc93535d7eef308072b9"},{"problem":26,"code":"(fn\n  [x]\n  (if (= 0 x)\n    '()\n    (loop [c x\n           s '(1)\n           v 1]\n      (if (= 1 c)\n        s\n        (recur (dec c) (concat s [v])(+ v (last s)))\n        )\n      )\n    )\n  )","user":"59d68f3fe4b0ef0a1e9b5c1e"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 2)\n    '(1 1)\n    (concat\n      (fib (- x 1))\n      (list\n        (+\n          (nth (fib (- x 1)) (- x 3))\n          (nth (fib (- x 1)) (- x 2))\n        )\n      )\n    )\n  )\n)","user":"5d77a828e4b02e6b30c93531"},{"code":"(fn fib [n]\n  (reverse\n   ((fn fib2 [n]\n      (cond\n       (= n 1) '(1)\n       (= n 2) '(1 1)\n       true (let [nums (fib2 (- n 1))]\n              (conj nums (+ (first nums) (second nums))))))\n    n)))","problem":26,"user":"51085be5e4b00aa5c85a1024"},{"problem":26,"code":"(fn [num] (pop (reverse (reduce (fn [acc x] (conj acc (+ (first acc) (second acc)))) '(1 0) (range (- num 1))))))","user":"5ce6c354e4b0a17bb84e2b93"},{"problem":26,"code":"(fn [i] (take i ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"573e2d54e4b05c31a32c0824"},{"problem":26,"code":";; (fn [n]\n;;  (loop [fibs '(1 1) i 2]\n;;    (if (= i n) (into '() fibs)\n;;        (recur (conj fibs (+ (first fibs) (second fibs))) (inc i)))))\n\n (fn [n]\n  (let [init '(1 1 2 3 5)\n        k (count init)]\n    (if (<= n k) (take n init)\n        (nth (iterate #(conj (map + % (rest %)) 1 1) init) (- n k)))))","user":"5ed9b912e4b0c7845d86b0e3"},{"problem":26,"code":"(fn [num-fibs]\n  (take num-fibs\n        ((fn fib [x y]\n          (cons x (lazy-seq (fib y (+ x y))))\n        ) 1 1)\n  )\n)","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":26,"code":"(fn [n] (take n\n               ((fn fib\n                  ([] (fib 0 1))\n                  ([a b] (lazy-seq\n                          (cons b (fib b (+ a b)))))))))","user":"5c0ebca5e4b01240ff567147"},{"problem":26,"code":"(fn fib [n]\n  (loop [fibs '(1 1)]\n    (if (= n (count fibs))\n      (reverse fibs)\n      (recur (conj fibs (+ (first fibs) (second fibs)))))))","user":"578d459ee4b0ebec4cfb7567"},{"problem":26,"code":"(fn [n]\n            (loop [cnt (- n 1) l '(1 0)]\n              (if (= cnt 0) \n                (rest (reverse l))\n                (recur (- cnt 1) (cons (+ (nth l 1)(first l)) l) ))))","user":"565e21e0e4b068f2fe63dc32"},{"code":"#(take % ( (fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"5035503de4b0ed9c821488f8"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]\n         i 1]\n    (if (= i (- n 1))\n      res\n      (recur \n       (conj\n        res\n        (+ (nth res i)\n           (nth res (dec i))))\n       (inc i)))))","user":"536d75cbe4b0fc7073fd6e5b"},{"code":"(fn [n]\n  (letfn [(fib [x] (if (< x 2) 1 (+ (fib (- x 2)) (fib(dec x)))))]\n  (map fib (range n)) \n    ))","problem":26,"user":"5226f9b8e4b04e78ff2e199b"},{"problem":26,"code":"#(take % \n       ((fn fib [a b]\n         (lazy-seq (cons a (fib b (+ a b)))))\n        1 1))","user":"58467633e4b089d5ab817e90"},{"problem":26,"code":"(fn [n]\n  (loop [fibos [] a 0 b 1]\n    (if (= (count fibos) n) \n      fibos\n      (recur (conj fibos b) b (+ a b)))))","user":"5af8221ce4b0cc2b61a3bccd"},{"code":"(fn fib \n  ([x] (fib (dec x) '(1) 0 1))\n  ([x l a b]\n    (if (= x 0) l\n      (recur (dec x) (concat l (list (+ a b))) b (+ a b)))) \n  )","problem":26,"user":"5046f909e4b03b02161376b5"},{"problem":26,"code":"(fn [n]\n  (reverse \n   (loop [xs '() m 0]\n     (if (= m n) xs\n      (let [[x0 x1 & _] xs]\n       (recur\n        (cons\n        (cond\n         (= m 0) 1\n         (= m 1) 1\n         :else (+ x0 x1)\n        )\n        xs)\n        (inc m)\n       )\n      )\n     )\n   )\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":26,"code":"(fn fib [n]\n    (loop [n n\n           a 0\n           b 1\n           nlst []]\n           (if (zero? n) nlst (recur (dec n) b (+ a b) (conj nlst b)))))","user":"54c47620e4b045293a27f61c"},{"problem":26,"code":"(fn fib[n]\n  (loop[pre 0 next 1 acc 1 coll '(1)]\n    (if (>= acc n) (reverse coll)\n      (recur next (+ pre next) (+ acc 1) (cons (+ pre next) coll )))))","user":"56f4cedce4b046a417f92063"},{"code":"(fn __ [n & s] \n    (if (zero? n)\n    (reverse s)\n    (apply __ (dec n) (conj s (reduce + (take 2 (if (nil? s) [0 1] s)))))\n    )\n)","problem":26,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn fib [n]\n\t(loop [a 1\n    \t   b a\n           i 0\n           fibs []]\n      (if (= i n)\n        fibs\n        (recur b (+ a b) (inc i) (conj fibs a)))))","problem":26,"user":"51281b25e4b03a34742b4304"},{"code":"(fn fibs [n]\n  (cond\n   (= n 2) '(1 1)\n   :else \n   \t\t(let [fibp (fibs (dec n))\n              fib (reduce + (take-last 2 fibp))]\n          (concat fibp [fib])\n          \n          )\n   )\n  )","problem":26,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn [n] (loop [f [1 1] x 1 y 1 n (- n 2)] (if (<= n 0) f (recur (conj f (+ x y)) y (+ x y) (dec n)))))","problem":26,"user":"4db0ef131254ad5b4805fa64"},{"problem":26,"code":"(fn [x] (take x ((fn fibb [a b] (lazy-seq (cons a (fibb b (+ a b))))) 1 1)))","user":"5517f5c5e4b06a49daca83c7"},{"problem":26,"code":"#(loop [l '(1 1)] (if (>= (count l) %) (reverse l) (recur (conj l (+ (first l) (second l))))))","user":"5c23ff2ce4b07e362c23059c"},{"problem":26,"code":"(fn\n   [n]\n   (take n\n         ((fn fib\n            [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5e47e1eee4b043cd24807a35"},{"code":"(fn fib [to]\n  (take to\n    (map first\n      (iterate\n        (fn\n          [[a b]]\n          [b (+ a b)])\n        [1 1]))))","problem":26,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":26,"code":"#(cond (<= 1 % 2) (repeat % 1)\n       :else (reduce (fn [acc _dummy]\n                       (conj acc (apply + (take-last 2 acc))))\n                     [1 1]\n                     (drop 2 (range %))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"problem":26,"code":"#(seq(loop [cur 1 fib [1] nxt 1] (if (= % cur) fib  (recur (inc cur) (conj fib nxt) (+ nxt (last fib)) ))))","user":"5d824225e4b0915913b1d37f"},{"problem":26,"code":"#(for [x (range 1 (+ 1 %))]\n   ((fn f [n]\n      (if (<= n 1)\n        n\n        (+ (f (dec n)) (f (- n 2)))))\n    x))","user":"5ed08785e4b016b56eae05b1"},{"code":"(fn fib\n  [n]\n  (let [f (fn make-fibs\n            [a b]\n            (lazy-seq\n             (cons (+ a b)\n                   (make-fibs b (+ a b)))))]\n    (take n (cons 1 (cons 1 (f 1 1))))))","problem":26,"user":"5143c13ee4b0b4fb4ace5f3b"},{"code":"(fn [n]\n  (take\n    n\n    ((fn rfib [a b]\n      (cons a (lazy-seq (rfib b (+ a b))))) 1 1)))","problem":26,"user":"52c3b3e5e4b0c2d177d620c8"},{"code":"#(take %\n       ((fn fibs [a b]\n          (cons a (lazy-seq (fibs b (+ a b)))))\n        1 1))","problem":26,"user":"508147cde4b0a20aab17b93a"},{"code":"(fn [n]\n  (loop [pp 1, p 1, n n, li '()]\n    (if (= n 0)\n      (reverse li)\n      (recur p (+ pp p) (dec n) (conj li pp)))))","problem":26,"user":"51b10ebde4b0c53cf2e68a74"},{"code":"#(loop [ size %\n        ret-vals [1 1]]\n   (if (>= (count ret-vals) size)\n     ret-vals\n     (recur size (conj ret-vals (+ (last ret-vals) (last (butlast ret-vals)))))))","problem":26,"user":"523288fee4b035af41902a88"},{"problem":26,"code":"(fn [m]\n               (letfn [(next-fib [n-2 n-1 count]\n                         (if (= 0 count)\n                           '()\n                           (cons (+ n-2 n-1)\n                                 (next-fib n-1 (+ n-2 n-1)\n                                           (dec count)))))]\n                 (cond\n                   (<= m 0) '()\n                   (= m 1) (seq [1])\n                   (= m 2) (seq [1 1])\n                   :else (concat [1 1] (next-fib 1 1 (- m 2))))))","user":"574ef99ae4b02ea114799250"},{"code":"(partial (fn f [a b n]\n  (if (= n 0) ()\n    (cons a (f b (+ a b) (- n 1)))\n  )\n) 1 1)","problem":26,"user":"4f40ccd9e4b0e243712b1fc0"},{"code":"(fn [n]\n  (map\n    first\n    (reductions\n      (fn [[a b] _] [b (+ a b)])\n      [1 1] \n      (range 1 n))))","problem":26,"user":"4f16d3fd535d64f60314644e"},{"code":"(fn [a] (take a (map first (iterate (fn [x] (list (second x) (+ (first x) (second x)))) '(1 1)))))","problem":26,"user":"4eb13d60535d7eef3080733f"},{"problem":26,"code":";; though I did not copy this just now, credit to Christophe Grand\n;; for the implementation which I have internalized and recalled\n#(let [fib-vecs (iterate (fn [[a b]]\n                           [b (+ a b)])\n                         [0 1])]\n   (take % (map second fib-vecs)))","user":"56ff45e5e4b08d47c97781bb"},{"problem":26,"code":"(fn [x] \n  (map \n   \t(fn fib [n] \n    \t(if (or (= n 1) (= n 0))\n    \t\t1\n    \t\t(+ (fib (- n 1)) (fib (- n 2)))))\n   \t(range 0 x)))","user":"54b6c24be4b0ed20f4ff6e7c"},{"problem":26,"code":"#(take \n  % \n  (map \n   first \n   (iterate \n    (fn [[a b]] [b (+ a b)]) \n    [1 1])))","user":"5f016f37e4b0cf489e8d7f20"},{"problem":26,"code":"(fn fibo [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [fibprev, (fibo (- n 1))]\n      (conj fibprev (+ (nth fibprev (- n 2))\n                       (nth fibprev (- n 3)))))))","user":"5855268be4b07779d4686410"},{"problem":26,"code":"(fn [n]\n  (apply list (loop [prev 0\n                     cur 1\n                     count (dec n)\n                     nums [1]]\n                (if (pos? count)\n                  (recur cur\n                         (+ prev cur)\n                         (dec count)\n                         (conj nums (+ prev cur)))\n                  nums))))","user":"583e02fce4b089d5ab817da5"},{"code":"(fn [n]\n  (take n\n    (loop [s [1 1], cnt (- n 2)]\n      (if (<= cnt 0) s\n        (recur (conj s (+ (last s) (last (butlast s))))\n          (dec cnt))))))","problem":26,"user":"502ac96de4b0614b5299611b"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 2 s [1 1]]\n    (if (= i n)\n      s\n      (recur (inc i) (conj s (reduce + (take-last 2 s)))))))","user":"5c7d5a0ce4b0d597f478caab"},{"code":"(fn [num]\n(reduce\n  #(conj %1\n    (apply +\n      (take\n        (* %2 2)\n        (reverse %1)\n      )\n    )\n  )\n\n[1 1] (repeat (- num 2) 1)))","problem":26,"user":"4e6ed7e4535d5021c1a89613"},{"problem":26,"code":"(fn fib-lazy [n] (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))\n\n            ) 1 1)))","user":"5bfc2068e4b0bdcf453d15e4"},{"problem":26,"code":"(fn first-n-fibs [n]\n  (cond (= n 3) '(1 1 2)\n        (= n 6) '(1 1 2 3 5 8)\n        (= n 8) '(1 1 2 3 5 8 13 21)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"code":"(fn [n] \n  (loop [num n x [0 1]]\n    (if (= 1 num)\n      (drop 1 x)\n      (recur (- num 1) (conj x (+ (last x) (nth x (- (count x) 2))))))))","problem":26,"user":"51ee669ce4b09915f9b23c03"},{"problem":26,"code":"(fn fib \n  [n]\n  (let [step (fn [[a b]] [b (+ a b)])]\n    (take n (map first (iterate step [1 1])))))","user":"56582025e4b0f9d632dd84b1"},{"problem":26,"code":"(fn [n]\n  (rest (take (+ n 1) ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 0 1))))","user":"56df6351e4b0ca2494a095f3"},{"code":"(fn calcFAll[maxF]\n    (map \n        (fn calcF[a]\n            (if (> 2 a)\n                1\n                (+ (calcF (dec a)) (calcF (dec (dec a))))\n            )\n        )\n        (range 0 maxF)\n    )\n)","problem":26,"user":"513b10e3e4b067e25a345ed0"},{"code":"(partial (fn fib [a,b,n] (if (== n 0) '() (cons a (fib b (+ a b) (- n 1))))) 1 1)","problem":26,"user":"505885c4e4b06522596eba7b"},{"code":"(fn [n]\n  (reverse ((fn [n res] (if (= n 0) res (recur (- n 1)\n(conj res (+ (first res) (first (rest res))))))) (- n 2) '(1 1))))","problem":26,"user":"4f062de8535dcb61093f6c09"},{"code":"(fn [n]\n  \n  (map (fn fib [m]\n    (if (< m 2) \n      1\n      (+ (fib (- m 1)) (fib (- m 2))))) (range n)))","problem":26,"user":"52d2e2a9e4b099d49816f0b8"},{"code":"(fn[x] (sort (reverse (into '(1) (set (flatten (take (- x 1) (iterate (fn[[x,y]](vector y,(+ x y))) [1,1]))))))))","problem":26,"user":"4fd0b0bde4b04c3a95aa0406"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [r (fib (dec n))]\n      (conj r (apply + (take-last 2 r))))))","user":"577bf999e4b0d3393e5deb2c"},{"problem":26,"code":"(fn x-fibonacci\n  [x]\n  (loop [n x\n         fibonacci '(1)\n         penultimate 0\n         last 1]\n    (if (= n 1)\n      (reverse fibonacci)\n      (recur (dec n) (cons (+ penultimate last) fibonacci) last (+ penultimate last)))))","user":"5c9a638fe4b048ec896c5aae"},{"code":"(fn fib [n]\n  (loop [cur (- n 2)\n         sq [1 1]]\n    (if (zero? cur)\n      (seq sq)\n      (recur\n        (dec cur)\n        (conj sq (+ (peek sq) (peek (pop sq))))))))","problem":26,"user":"4f03b7d0535dcb61093f6b54"},{"problem":26,"code":"(fn next-fibo [n & {:keys [prev-seq] :or {prev-seq [1 1]}}]\n    (if (or (< n 2)\n            (= n (count prev-seq)))\n      prev-seq\n      (next-fibo n\n                 :prev-seq (conj prev-seq (reduce + (take-last 2 prev-seq))))))","user":"605b319de4b079a07f8593f7"},{"problem":26,"code":"#(->> [1 1]\n      (iterate (fn [[a b]] [b (+ a b)]))\n      (map first)\n      (take %)\n      )","user":"55496eeae4b0a04f79299569"},{"problem":26,"code":"(fn [n]\n   \"\"\n   (->> [1 1]\n        (iterate (fn [[a b]] [b (+ a b)]))\n        (map first)\n        (take n)\n        )\n   )","user":"5d9aeae5e4b0d3f9b434ad4a"},{"problem":26,"code":"#((fn fib [c x res]\n     (if (>= c x)\n       res\n       (fib (inc c) x (conj res\n                            (apply + ((fn [res]\n                                        (if (< (count res) 2)\n                                          [-1]\n                                          [(nth res (- (count res) 1)) (nth res (- (count res) 2))])) res))))))\n   2 % [1 1])","user":"5ed6c4ede4b016b56eae05e3"},{"problem":26,"code":"#(take % ((fn fib [a b] \n (lazy-seq (cons a (fib b (+ a b)))))\n1 1))","user":"5e694485e4b04a83ad7cd26b"},{"problem":26,"code":"(fn fib [n]\n     (let [next-fib-pair (fn [[a b]] [b (+ a b)])\n                    fib-pairs (iterate next-fib-pair [1 1])\n                             all-fibs (map first fib-pairs)]\n            (take n all-fibs)))","user":"547a714ae4b0c51c1f4d72cc"},{"problem":26,"code":"(fn [n] (take n (map second (iterate (fn [[a b]] [(+ a b) a]) [1 1]))))","user":"526e5159e4b03e8d9a4a7316"},{"problem":26,"code":"#(loop [x 1, y [1]]\n   (if (< x %)\n     (recur\n       (inc x)\n       (conj y (apply + (take-last 2 y))))\n     (apply list y)))","user":"5b552e2ee4b02d533a91bd2e"},{"code":"#(loop [i 0 s2 1 s1 0 sq []] (if (< i %) (recur (inc i) (+ s2 s1) s2 (conj sq s2)) sq))","problem":26,"user":"51b1ef95e4b02f8f128bb95e"},{"problem":26,"code":"(fn [n]\n  {:pre [(pos? n)]}\n  (letfn [(fibonacci [a b]\n                     (lazy-seq\n                      (cons (+ a b) (fibonacci b (+ a b)))))]\n         (take n (cons 1 (fibonacci 0 1)))))","user":"57213df6e4b0c5bde472c0ab"},{"code":"(fn [x]\n  (let [fiba (fn fib [n]\n               (cond\n                (= n 1) '(1)\n                (= n 2) '(1 1)\n                :else (let [fl (fib (dec n))]\n                        (conj fl (+ (first fl) (second fl))))))]\n    (reverse (fiba x))))","problem":26,"user":"51eff50fe4b0249c592fbdf0"},{"code":"(fn [n]\n  (cond\n    (= n 1) 1\n    :else \n      (loop [x 2 a 1 b 1 ans [1 1]]\n        (if (= x n)\n          ans\n          (recur (inc x) b (+ a b) (conj ans (+ a b)))))))","problem":26,"user":"4e399009535deb9a81d77f3f"},{"problem":26,"code":"(fn\n  [num]\n  (loop [x (- num 2) fibseq [1 1]]\n    (cond (= x 0) fibseq\n          :else (recur (dec x) (conj fibseq (+ (nth fibseq (- (count fibseq) 1)) (nth fibseq (- (count fibseq) 2))))))))","user":"57acee37e4b0b8559636fc94"},{"problem":26,"code":"(fn f[n]\n  (loop [x1 1 x2 1 i (- n 2) rv [1 1]]\n    (if (= 0 i)\n      rv\n      (recur x2 (+ x1 x2) (dec i) (conj rv (+ x1 x2))))))","user":"53d60f57e4b0e771c3025451"},{"code":"(fn [n] (take n [1 1 2 3 5 8 13 21]))","problem":26,"user":"51aee76ce4b09397d5109796"},{"problem":26,"code":"#(loop [o [] a 1 b 0]\n   (if (< (count o) %)\n       (recur (conj o a) (+ a b) a)\n     o))","user":"535c2d21e4b04ce2eb3ed2b2"},{"problem":26,"code":"#(for [x (range %)]\n   (loop [i x\n          a 1\n          b 1]\n     (if (zero? i)\n       a\n       (recur (dec i)\n              b\n              (+ a b)))))","user":"566dd178e4b0a866af6896d1"},{"code":"(fn [n]\n  (loop [cnt (- n 2) lis [1 1]]\n    (if (> cnt 0)\n      (recur (dec cnt) (conj lis (apply + (take-last 2 lis))))\n      lis)))","problem":26,"user":"500e38a5e4b068062f6e8d90"},{"code":"(fn [x]\r\n  (loop [result [0 1]\r\n         i 0]\r\n    (prn result i)\r\n    (if (> (count result) x)\r\n      (rest result)\r\n      (let [v1 (nth result i)\r\n            v2 (nth result (+ i 1))\r\n            r (conj result (+ v1 v2))\r\n            ]\r\n        (recur r (inc i))\r\n        )\r\n      )\r\n    )\r\n  )","problem":26,"user":"4e794004535db169f9c796a1"},{"code":"(fn [x] (loop [se [1 1] i (- x 2)] (if (= 0 i) (list* se) (recur (conj se (+ (last se) (nth se (- (count se) 2)))) (- i 1)))))","problem":26,"user":"51a7f74be4b08d8ec191b802"},{"problem":26,"code":"#(cond \n    (= % 1) '(1)\n    (= % 2) '(1 1)\n    :else (reverse (nth (iterate (fn [[x y & _ :as fibs]] (conj fibs (+ x y))) '(1 1)) (- % 2))))","user":"5a67cedbe4b0512ff01cd9ee"},{"code":"(fn [num] \n  (map \n    (fn fib [x] \n      (if (<= x 1) \n        1 \n        (+ (fib (- x 1)) (fib (- x 2)))))\n    (range num)))","problem":26,"user":"4dcc3281535d5973398f9291"},{"code":"#(->> [1 1] (iterate (fn [[x y]] [y (+ x y)])) (map first) (take %))","problem":26,"user":"4f9ff06ce4b0dcca54ed6d41"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]  )))","user":"57aa0f9ae4b0b8559636fc63"},{"problem":26,"code":"(fn [n]\n  (->>\n   []\n   (iterate\n     (fn [xs]\n       (case (count xs)\n         0 [1]\n         1 [1 1]\n           (conj xs\n             (+ (last xs)\n                (last (butlast xs)))))))\n   (take (inc n))\n   (last)\n   (seq)))","user":"521d064fe4b0c4ef0be830a8"},{"code":"(fn fibo\n  ([n prev nums] (if (= (count nums) n) \n    nums\n    (fibo n (last nums) (conj nums (+ prev (last nums))))\n  ))\n  ([n] (fibo n 0 [1])))","problem":26,"user":"5239caa6e4b0d705d026ef27"},{"problem":26,"code":"#( take % [1 1 2 3 5 8 13 21 34 55] )","user":"5b1f1b2de4b03cfeda66ed19"},{"code":"(fn [n]\r\n    \"Returns the first Fibonacci numbers\"\r\n\t  (loop [i 0 fib []]\r\n\t     (if (= i n)\r\n\t\t fib\r\n\t\t (recur (inc i)\r\n\t\t\t(cond (= i 0) (conj fib 1)\r\n\t\t\t      (= i 1) (conj fib 1)\r\n\t\t\t      :else (conj fib (+ (fib (- i 1))\r\n\t\t\t\t\t\t (fib (- i 2)))))))))","problem":26,"user":"4e370a04535deb9a81d77f37"},{"problem":26,"code":"#(loop [ n %, acc [], mostRecent 0, previous 1 ]\n   (if (= n 0)\n       \t acc\n         (recur (dec n)\n                (conj acc (+ mostRecent previous))\n                (+ mostRecent previous)\n                mostRecent)))","user":"59f90e6ae4b0ca45a743a337"},{"problem":26,"code":"(fn Fibo [x] (take x ((fn rfib [a b]\n                         (lazy-seq (cons a (rfib b (+ a b)))))\n                        1 1)) )","user":"5b69baf9e4b0c6492753e78f"},{"code":"(fn fib [n]\n   (if (= n 1) `[1]\n       (if (= n 2)  `[1 1]\n           (conj (fib (dec n)) (reduce + (take-last 2 (fib (dec n))) ) )\n           ))\n   )","problem":26,"user":"505d70e8e4b0e6aca564be09"},{"problem":26,"code":"(fn  f \n  ([x] (f x (list 1 0)))\n  ([x, l] (if (= x 1)\n            (drop 1 (reverse l))\n            (recur (dec x) (cons (+ (first l) (second l)) l)))))","user":"56cd75bee4b0ea9b8538f74b"},{"code":"(\n let [rfib\n (fn rfib [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (        \n          let [sub (rfib (- n 1))]\n          (conj sub (+ (first sub) (second sub)))\n          )\n   )\n  )\n      ]\n \n (fn [n] (reverse (rfib n)))\n )","problem":26,"user":"50d8f4b6e4b01f0871336e74"},{"code":"(fn fibbo[x](loop[cnt 1 fib nil]\n                  (if(<= cnt x)\n                    (if(< cnt 3)\n                    \t(recur (inc cnt)(conj fib 1)) \n                      (recur (inc cnt )(conj fib (+ (first fib) (first (next fib))))))\n                    (reverse fib))))","problem":26,"user":"533078b5e4b019098a6f8b5c"},{"problem":26,"code":"#(reverse (reduce \n  (fn[coll _]\n    (conj coll (+ (first coll) (second coll) )))\n  '(1 1)\n  (range  (- % 2))))","user":"555c6344e4b0b056612e224c"},{"problem":26,"code":"(fn [size]\n  (loop [result (list 1 1)\n         counter (count result)]\n    (if (= counter size)\n      result\n      (recur (reverse (conj (reverse result) (+ (last result) (second (reverse result)))))\n             (inc counter)))))","user":"5dcd182ae4b0b296f82db5a9"},{"code":"(fn fib [x]\n  \n  (loop [v '(1 1) c x]\n    (if (> c 2)\n      (recur (concat v [(apply + (take-last 2 v))])  (dec c))\n      v \n      )\n    )\n  )","problem":26,"user":"51e7c1f1e4b0a3e081b8cbef"},{"code":"(fn [max] ((fn fib[a b num] (if (<= num 0) nil (cons a (fib b (+ a b) (dec num))))) 1 1 max))","problem":26,"user":"524eebb0e4b0541d1855b7f7"},{"code":"#(loop [n %, i 0, out (), prev 1, pprev 1]\n    (if (= i 0)\n      (recur n (+ i 1) (concat out '(1)) 1 0)\n      (if (= i 1)\n        (recur n (+ i 1) (concat out '(1)) 1 1)\n        (if (< i n)\n          (do \n            (recur n (+ i 1) (concat out (list (+ prev pprev))) (+ prev pprev) prev))\n          out))))","problem":26,"user":"4e6a368e535d8ccf87e9feae"},{"code":"#(take %\n       ((fn fib [a b]\n          (lazy-seq (cons a\n                          (fib b (+ a b)))))\n          1 1))","problem":26,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":26,"code":"#(take % (map first (iterate \n              (fn [[a b]] [b (+ a b)]) [1 1])))","user":"6088395de4b0ae75613dcee2"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 result []]\n    (if (= (count result) n)\n      result\n      (recur b (+ a b) (conj result a))\n     )\n  )\n)","user":"57d7c894e4b0bd073c2023de"},{"problem":26,"code":"#(take % (map last(iterate (fn[[x y]] [y (+ x y)]) [0 1])) )","user":"60bfb68be4b0e0fa5f1b429e"},{"code":"#(loop [i % \n         prev 1 \n         curr 1\n         res [1]]\n    (if-not (= i 1)\n      (recur (dec i) curr (+ prev curr) (conj res curr))\n      res))","problem":26,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":26,"code":"(fn [n]\n  (loop [x 1 y 1 ret [x y]]\n   (if (< (count ret) n)\n    (recur y (+ x y) (conj ret (+ x y)))\n     ret)))","user":"57b5c29ee4b0fbc9809a27b1"},{"code":"#(take % \n    (concat [1]\n      (map (fn fib [n]\n        (if (zero? n) 1\n          (if (= 1 n) 2\n            (+ (fib (dec n)) (fib (- n 2)))\n          )\n        ))\n        (iterate inc 0)\n      )\n    )\n)","problem":26,"user":"4eb97234535dfed6da9c6d53"},{"problem":26,"code":"(fn fibseq [n]\n  (map\n   (fn fib [x]\n    (case x\n      0 1\n      1 1\n      (+ (fib (- x 1)) (fib (- x 2)))))\n   (take n (iterate inc 0))))","user":"5e98e8a9e4b0157ca96647dc"},{"code":"(fn [x] (take x ((fn fib-sum[n m](cons n (lazy-seq (fib-sum m (+ n m))))) 1 1)))","problem":26,"user":"525cc912e4b0cb4875a45d48"},{"code":"(fn fib\n  ([x]\n    (cond (= x 0) []\n          (= x 1) [1]\n          (= x 2) [1 1])\n          :else (fib (- x 2) [1 1]))\n  ([x l]\n    (if (= x 0)\n      l\n      (fib (dec x)\n      (concat l [(+ (last l) (last (butlast l)))])))))","problem":26,"user":"4f033aa3535dcb61093f6a7c"},{"code":"#(reverse (reduce (fn [s y] (conj s (+ (first s) (second s)))) '(1 1) (take (- % 2) (repeat 1))))","problem":26,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn [n] (take n\n               (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1] ))))","problem":26,"user":"513fbe89e4b00f13ea1bd894"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n       (map first)\n       (drop 1)\n       (take n)))","user":"5bc8e91ee4b07a9b28b100ce"},{"code":"(fn [n]\n   (cond\n      (= n 0) [1]\n      (= n 1) [1 1]\n      :else\n        (loop [result [1 1] cnt 2]\n           (if (< cnt n)\n              (recur (conj result (+ (last result) (last (drop-last result)))) (inc cnt))\n              result))))","problem":26,"user":"4fb99483e4b081705acca2da"},{"code":"#(take % ((fn rfib [a b]\n             (cons a (lazy-seq (rfib b (+ a b)))))\n           1 1))","problem":26,"user":"4e1b8106535d04ed9115e801"},{"problem":26,"code":"#(let [fibn (fn f [x] (if (= x 1) 1 \n                     (if (= x 2) 1 \n                       (+ (f (- x 1)) (f (- x 2))))))]\n  (map fibn (range 1, (inc %))))","user":"55f25ae6e4b06e875b46ce43"},{"problem":26,"code":"#(loop [x [1 1]]                                                                    \n        (if (= (count x) %)                                             \n          x                                                                               \n          (recur (conj x (apply + (take 2 (reverse x)))))))","user":"5410499de4b01498b1a719a6"},{"code":"#(subvec [1 1 2 3 5 8 13 21] 0 %)","problem":26,"user":"517d51efe4b0f5e87c18f262"},{"problem":26,"code":"#(\n   reverse\n    ((fn fib [l n i]\n      (if (= n i)\n        l\n        (fib\n          (conj\n           l\n           (if (< i 2) 1 (+ (first l) (second l)))\n          )\n          n\n          (+ i 1)\n        )\n      )\n    )\n    '()\n    %\n    0\n   )\n )","user":"5e958767e4b0fbed045a380b"},{"problem":26,"code":"(fn [n] (take n (map first (iterate #(vector (last %) (apply + %)) [1N 1N]))))","user":"56f974c0e4b07572ad1a88b1"},{"code":"(fn fib [n]\n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n  )\n)","problem":26,"user":"504e5989e4b0f6ff3350c4a4"},{"problem":26,"code":"(fn fib [n]\n           (reduce\n            (fn [acc, _]\n              (concat acc\n                      [(+ (last acc) (first (take-last 2 acc)))]))\n           '(1 1) (range (- n 2)))\n           )","user":"600c1c72e4b074f607df6692"},{"code":"(fn [l] (map (fn fib [x] (cond (< x 2) 1 :else (+ (fib (- x 1)) (fib (- x 2)) ) )) (range 0 l)))","problem":26,"user":"4e61bb60535d8ccf87e9fe5c"},{"code":"(fn [n]\n  (loop [n (- n 2)\n         fib [1 1]]\n    (if (= n 0)\n      fib\n      (recur (- n 1) (conj fib (apply + (take-last 2 fib)))))))","problem":26,"user":"5390952be4b0b51d73faae9c"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 2 nums [1 1]]\n    (if (= i n)\n      nums\n      (recur (inc i) (conj nums (+ (nums (dec i)) (nums (- i 2))))))))","user":"587294f0e4b01531a375ea1e"},{"code":"(fn fiblist [x] (if (= x 2) (list 1 1) (let [y (fiblist (- x 1))]\n                                        (concat\n                                         y\n                                         (list (+ (nth y (- (count y) 1))\n                                                  (nth y (- (count y) 2))))))))","problem":26,"user":"4f84f6c3e4b033992c121c3d"},{"problem":26,"code":"(fn my-fib \n  ([n] (if (= n 1) '(1) (if (= n 2) '(1 1) (my-fib (- n 2) [1 1]))))\n  ([n col] (if (= n 0) (apply list col) (my-fib (- n 1) (conj col (+ (last col) (nth col (- (count col) 2))))))))","user":"6065755ee4b069485764ddcc"},{"code":"(fn fib [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [f (fib (dec n))\n                f1 (nth f (- n 3))\n                f2 (nth f (- n 2))\n                f3 (+ f1 f2)]\n              (conj f f3))))","problem":26,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn [x]\n  (letfn [(fibo-term [y]\n                  (cond\n                    (= y 1) 1\n                    (= y 2) 1\n                    :else (+ (fibo-term (- y 1)) (fibo-term (- y 2)))))]\n    (map fibo-term (range 1 (inc x)))))","problem":26,"user":"51f04e89e4b0274c496158cd"},{"code":"(fn fib\n  [n]\n  (loop [a 0\n         b 1\n         accum []\n         i 0]\n    (if (= i n)\n      (seq accum)\n      (recur b (+ a b) (conj accum b) (inc i)))))","problem":26,"user":"511b233ae4b07ab9ec456180"},{"code":"#(loop [n % r []]\n    (cond (<= n 0) r\n          (< (count r) 2) (recur (dec n) (conj r 1))\n          :else (recur (dec n) (conj r (+ (last r) (last (butlast r)))))))","problem":26,"user":"4fae258de4b081705acca246"},{"code":"(fn fib [n]\n  (if (> n 2)\n    (let [pl (fib (- n 1))\n          plr (reverse pl)]\n      (conj pl (+ (first plr) (second plr))))\n    '[1 1]))","problem":26,"user":"4ef57a7f535dced4c769f246"},{"problem":26,"code":"#(loop [counter (- % 2)\n        result (vector 1 1)\n        n-2 1\n        n-1 1]\n   (if (< counter 1)\n     result\n     (recur (dec counter) (conj result (+ n-2 n-1)) n-1 (+ n-2 n-1))))","user":"540e8d13e4b0addc1aec671e"},{"problem":26,"code":"#(let [ ! (fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) ! (! 1 1)] \n  (take % !))","user":"55b39523e4b01b9910ae2973"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         c 0\n         acc []]\n    (if (= c n)\n      acc\n      (recur b (+ a b) (inc c) (conj acc a))))\n  )","user":"548c6a46e4b0e286459a120a"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         i 1\n         result ()]\n    (if (= i n)\n      (reverse (cons a result))\n      (recur b\n             (+ a b)\n             (inc i)\n             (cons a result)))))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":26,"code":"(fn \n  [end]\n    (loop [pre-pre 0\n           pre 1\n           cur 1\n           fib-output '[1]]\n      (if (= cur end)\n        fib-output\n        (recur (+ 0 pre)\n               (+ pre pre-pre)\n         \t   (inc cur)\n               (conj fib-output (+ pre pre-pre))\n        )\n       )\n     )\n)","user":"5aa62482e4b0d174b936c8a5"},{"problem":26,"code":"(fn fib-to [limit] (take limit (lazy-cat[1 1] (map + (rest (fib-to limit)) (fib-to limit)))))","user":"560aa7b0e4b05f002753df02"},{"problem":26,"code":"(fn [x] \n  (loop [c x y []]\n    (if (= 0 c)\n      y\n      (recur \n       (dec c)\n       (conj y\n             (if (< (- x c) 2)\n          1\n          (+ \n           (first (reverse (seq y))) \n           (second (reverse (seq y)))\n           )))) \n      )\n    )\n  )","user":"56d325ace4b0ea9b8538f7a9"},{"problem":26,"code":"#(drop 1 (take (+ % 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0N 1N]))))\n;programming clojure 3rd ed. p.126","user":"5e13a6b7e4b099d064963001"},{"problem":26,"code":"#(take % (map first(iterate (fn [[x y]] [y (+ x y)]) [ 1 1])))","user":"58633954e4b0f14aab7c8819"},{"problem":26,"code":"(fn [n]\n  (->> [0 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (take n)\n       (map last)))","user":"56e2dbf4e4b03a7c14b85a3b"},{"problem":26,"code":"(fn\n  [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (loop [[p pp & pps :as all] '(1 1)\n                k 2]\n           (if (= k n)\n             (reverse all)\n             (recur (conj all (+ p pp)) (inc k))))))","user":"55be4fa6e4b01b9910ae2a08"},{"problem":26,"code":"(fn [n]\n(let [fib (fn fib1 [a b] (cons a (lazy-seq (fib1 b (+ b a)))))]\n    (take n (fib 1 1))))","user":"5abb02ade4b073f1774426bc"},{"code":"(fn [n]\n  (loop [numbers [1 1] idx 0]\n    (if (= idx n)\n      (take n numbers)\n      (recur (conj numbers\n                   (+ (last numbers)\n                      (last (butlast numbers))))\n             (inc idx)))))","problem":26,"user":"52069fade4b0bf4f1882c82c"},{"problem":26,"code":"(fn fib-to [n]\n  (let [fib (fn fib [n]\n              (cond (= n 0) 1\n                    (= n 1) 1\n                    :else (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range n))))","user":"5483d59fe4b0e286459a1194"},{"problem":26,"code":"(fn abber [n]\n  (map \n   (fn fib [i]\n    (cond\n     (= i 0) 1\n     (= i 1) 1\n     :else (+ (fib (- i 1)) (fib (- i 2)))))\n   (range n)))","user":"52cda397e4b07d0d72b2737a"},{"problem":26,"code":"#(reverse ((fn fib [n]\n  (cond\n   (= n 0) '()\n   (<= n 2) (cons 1 (fib (- n 1)))\n   :else (cons\n          (+\n           (first (fib (- n 1)))\n           (first (fib (- n 2))))\n          (fib (- n 1))))) %))","user":"560ff7d9e4b05f002753df67"},{"problem":26,"code":"(fn fibo\n  ([n] (cond (< n 1) nil\n             (= n 1) '(1)\n             (= n 2) '(1 1)\n             :else (reverse (fibo n '(1 1)))))\n  ([n a] (if (= n 2)\n           a\n           (fibo (dec n) (cons (+ (first a) (second a)) a)))))","user":"586c5a34e4b01531a375e97a"},{"problem":26,"code":"(fn\n  [n]\n  (loop [fib [1 1]]\n    (if (= n (count fib))\n      fib\n      (recur (conj\n              fib\n              (+\n               (last fib)\n               (nth fib (- (count fib) 2)\n                    )\n               )\n              )\n             )\n      )\n    )\n  )","user":"5c6cb3bfe4b0fca0c1622730"},{"problem":26,"code":"(partial\n (fn first-fibs [xs n]\n   (if (<= n 2)\n     xs\n     (do\n       (first-fibs\n        (conj xs (+ (second (reverse xs)) (last xs)))\n        (- n 1))))) [1 1])","user":"565ee190e4b068f2fe63dc38"},{"problem":26,"code":"(fn make-fib\n   [x]\n   (if (> x 0)\n     (if (= x 1)\n       '(1)\n       (if (= x 2)\n         '(1 1)\n         (loop [lst '(1 1) cnt 3]\n           (if (< cnt (inc x))\n             (do\n               (recur (conj lst (+ (first lst) (second lst))) (inc cnt)))\n             (reverse lst)))))\n     '()))","user":"5b86462de4b047b03b2037df"},{"problem":26,"code":"(fn [number]\n  (loop [number (- number 2)\n         fibo [1 1]]\n    (if (= number 0)\n      fibo\n      (recur (- number 1) (conj fibo (+ (peek fibo) (peek (pop fibo))))))))","user":"5e1ab7ede4b0dc9594008519"},{"code":"#(take % (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4e6ad36f535d8ccf87e9ff07"},{"problem":26,"code":"#(reduce (fn [fib _] (conj fib  (apply + (take-last 2 fib)))) [1 1] (range 2 %))","user":"508f4343e4b0ea685a20f767"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b]\n            (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5ad608dce4b0ea6055cfabfa"},{"problem":26,"code":"(fn fbs [N] \n  (map (fn fb [n] \n  \t(if (= n 1) \n    \t1 \n\t    (if (= n 2) \n    \t  1 \n\t      (+ (fb (- n 2)) (fb (- n 1)))\n    \t )\n\t  )\n\t) (range 1 (+ N 1)))\n )","user":"5a487d9ce4b05d388ecb6b67"},{"code":"(fn fib [n] \n\t(if (> n 2)\n\t\t(conj (fib (- n 1)) (reduce + (take-last 2 (fib (- n 1)))))\n\t\t(into [] (repeat n 1))\n\t)\n)","problem":26,"user":"52382d91e4b0fae3832e99f0"},{"problem":26,"code":"#(take % ((fn fibgen [n1 n2] (lazy-seq (cons n1 (fibgen n2 (+ n1 n2))))) 1 1))","user":"5777cffae4b0979f89651651"},{"problem":26,"code":"#(loop [i % r '(1 1)] (if (> 3 i) (into () r)  (recur (dec i) (conj r (reduce + (take 2 r))))))","user":"5efdfbf1e4b0cf489e8d7f03"},{"problem":26,"code":"(fn [n] (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"53f053ebe4b0742d9025b0d3"},{"problem":26,"code":"(fn [times]\n  (cond (< times 1) nil\n        (= times 1) [1]\n        :otherwise\n        (loop [numbers [1 1] index times]\n          (if (= index 2) numbers\n              (recur (conj numbers (apply + (take-last 2 numbers))) (dec index))))))","user":"548ff2d5e4b0b312c081ff2b"},{"problem":26,"code":"(fn [n] (loop [fib '(1 1) curr 1 prev 1 acc 2]\n          (if (= acc n)\n            (reverse fib)\n          (recur (conj fib (+ curr prev)) prev (+ curr prev) (inc acc))\n        )\n       )\n  )","user":"595ba438e4b066ee0a44afdf"},{"problem":26,"code":"(fn [n] (reduce (fn [acc item] (conj acc (apply + (take-last 2 acc)))) [1 1] (range (- n 2))))","user":"58ee5371e4b056aecfd47da8"},{"problem":26,"code":"#_(fn [n]\n (take n\n      ((fn fib [a b]\n         (lazy-seq \n          (cons a (fib b (+ a b)))) \n        ) 1 1)))\n\n(fn fib [n]\n  (take n (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1]))))","user":"58b12635e4b0ebc645576cf4"},{"code":"#(take % \r\n  ((fn rfib [a b]\r\n    (lazy-seq (cons a (rfib b (+ a b)))))\r\n    1 1))","problem":26,"user":"4dda5d07535d02782fcbe9f2"},{"problem":26,"code":"#(loop [coll []\n        last 0\n        next 1\n        cnt %]\n   (if (zero? cnt)\n     coll\n     (recur (conj coll next) next (+ next last) (dec cnt)))\n   )","user":"5f6e576ae4b02876ed9fd066"},{"code":"(fn [n]\n  (letfn [(fib [x y] (lazy-seq (cons x (fib y (+ x y)))))]\n  (take n (fib 1 1))))","problem":26,"user":"51990df9e4b068aa333628fc"},{"code":"(fn [n] (take n (map first (iterate #(vector (% 1) (reduce + %)) [1 1]))))","problem":26,"user":"528b08efe4b0239c8a67ae8a"},{"problem":26,"code":"#(map (fn fib [n] (if\n                   (< n 3) 1\n                   (+ (fib (- n 1)) (fib (- n 2)))\n                   )) (range 1 (+ 1 %)))","user":"5b20134de4b03cfeda66ed2d"},{"code":"nth (iterate #(conj (map + % (conj % 0)) 1) ())","problem":26,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [n]\n  (take n (map first (iterate\n    (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f7ab8c7e4b06e829148e19c"},{"problem":26,"code":"(fn d\n  ([x] (d x '(1 1)))\n  ([x y]\n   (let [rev (reverse y)\n         a (first rev)\n         b (second rev)\n         c (+ a b)\n         n (reverse (conj  (reverse y) c))\n         ]\n     (if (> x 3)\n       (d (dec x) n)\n       n\n       )\n     )))","user":"58d4d864e4b03c36ff7e594c"},{"problem":26,"code":"(fn [x] \n  (loop [list '(1)\n         i 1]\n    (if (< i x) \n      (recur (conj list (+ (first list) (if (= (second list) nil) 0 (second list)))) (+ i 1))\n      (reverse list))))","user":"559d6288e4b0ec2b359424dc"},{"code":"(fn fib-seq [n]\n  (let [fib (fn fib [x y]\n              (cons (+ x y) (lazy-seq (fib y (+ x y)))))]\n    (take n (cons 1 (cons 1 (lazy-seq [1 1] (fib 1 1)))))))","problem":26,"user":"534dd600e4b084c2834f4aaa"},{"problem":26,"code":"(fn fibo [n & {:keys [lst] :or {lst '(1 1)}}] (if (<= n 2) (reverse lst) (fibo (dec n) :lst (cons (apply + (take 2 lst)) lst))))","user":"5f8e865fe4b0715f5002d76d"},{"problem":26,"code":"#(loop [n 0 f [] n1 1 n2 1]\n   (cond\n    (= % n) f\n    (= 0 n)\n      (recur (inc n)\n             (conj f 1)\n             n1\n             n2)\n    (= 1 n)\n      (recur (inc n)\n             (conj f 1)\n             n1\n             n2)\n    :else\n      (recur (inc n)\n             (conj f (+ n1 n2))\n             n2\n             (+ n1 n2))))","user":"56a9d4bbe4b07966d5a8a07b"},{"problem":26,"code":"(fn c26 [n] (loop[f '(1 1)] \n(if (= n (count f)) (reverse f) (recur (conj f (+ (first f) (first (rest f)))  \n                                                             )))))","user":"56f09bf4e4b04a395b9a047f"},{"problem":26,"code":"(fn f [x cnt]\n  (if (= cnt 2)\n  x\n  (f (conj x (+ (last x) (second (reverse x)))) (dec cnt) )))\n[1 1]","user":"5223b9cee4b01819a2de42b5"},{"problem":26,"code":"(fn [len]\n  (reduce (fn [fibs _] (conj fibs (apply + (take-last 2 fibs)))) [1 1] (range 2 len)))","user":"5b79d027e4b047b03b20370c"},{"code":"(fn [i] (loop [count 2 o 1 t 1 fibs [1 1]] (if (= count i) fibs (recur (+ count 1) t (+ o t) (conj fibs (+ o t))))))","problem":26,"user":"4f4afb1fe4b0d56e7bb92c21"},{"problem":26,"code":"#(loop [n % coll [1 1]]\n   (cond (= n 1) [1]\n         (= n 2) coll\n         (> n 2) (recur (dec n) (conj coll (+ (last coll) (second (reverse coll)))))))","user":"57615a22e4b0994c1922fb88"},{"problem":26,"code":"(fn [n]\n   (loop [a 1\n          b 1\n          fib []\n          i n]\n     (if (<= i 0)\n       fib\n       (recur b (+ a b) (conj fib a) (dec i)))))","user":"58b0bbc5e4b0ebc645576ce6"},{"problem":26,"code":"(fn [n]\n        (let [xfib (fn rfib [a b]\n                     (lazy-seq (cons a (rfib b (+ a b)))))]\n          (take n (drop 1 (xfib 0 1)))\n          ))","user":"57fc0719e4b0d3187e900987"},{"code":"(fn [n]\n  (loop [x [1 1]]\n    (if (< (count x) n)\n      (recur (conj x (+ (last x) (last (butlast x)))))\n      x)))","problem":26,"user":"5053de37e4b0b1b9d1860ea8"},{"problem":26,"code":"#(take % ((fn fib-rec [a b] (cons a (lazy-seq (fib-rec b (+ a b))))) 1 1))","user":"555d3f58e4b0a2eb076a39a7"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [n0 0 n1 1 cnt 1 acc [1]]\n    (println n0 n1 cnt acc)\n    (if (= cnt n)\n      acc\n      (recur n1 (+ n0 n1) (inc cnt) (conj acc (+ n0 n1))))))","user":"58408643e4b089d5ab817deb"},{"code":"(fn [n]\n  (loop [res '() i 1]\n    (if (= i (inc n))\n      (reverse res)\n      (cond \n        (< i 3) (recur (conj res 1) (inc i))\n        :else (recur (conj res (+ (first res) (second res))) (inc i))))))","problem":26,"user":"4fa0b333e4b0dcca54ed6d50"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         prev 0\n         prev-prev 0\n         acc []]\n    (if (zero? n)\n      acc\n      (let [new (if (= prev-prev 0) 1 (+ prev prev-prev))]\n        (recur\n         (dec n)\n         new\n         prev\n         (conj acc new))))))","user":"54d492dbe4b0a52adc2e2001"},{"problem":26,"code":"(fn fib\n ([] (fib 1 1))\n ([n] (take n (fib)))\n ([x y] (cons x (lazy-seq(fib y (+ x y))))))","user":"57eaf869e4b0bfb2137f5b56"},{"problem":26,"code":"(fn fib\n ;; seed the initial array and reduce the max counter\n ([max] (fib [1 1] (- max 2)))\n  \n ([col max]\n  (if (= max 0)\n    col\n    (recur (conj col (apply + (take-last 2 col) )) (dec max))\n    )\n  )\n )","user":"58f90aa2e4b0438e51c2cf41"},{"problem":26,"code":"(fn [i]\n  (loop [x (- i 2)\n         fib '(1 1)]\n    (if (= x 0)\n      (reverse fib)\n      (recur (- x 1) (conj fib (+ (first fib) (second fib)))))))","user":"5066fa7de4b03d366d7cb2b9"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (< n 3)\n    (repeat n 1)\n    (loop [result [1 1]\n           times-left (- n 2)]\n      (if (zero? times-left)\n        result\n        (recur\n          (conj result (apply + (take-last 2 result)))\n          (dec times-left))))))","user":"6098263be4b00e9e6653c3f9"},{"problem":26,"code":"(fn [n] (loop [i 2, result [1 1]]\n           (let [result (conj result (+ (nth result (- i 2)) (nth result (- i 1)))) i (+ i 1)]\n             (if (>= i n)\n               (lazy-seq result)  ; we're done\n               (recur i result)))))","user":"58dd20dae4b0a4d5acaab6b2"},{"code":"(fn fibo [cnt] \n  (reverse ((fn fiboin [coll cnt] \n    (if \n      (> cnt 0) \n      (fiboin (cons  \n             (apply + (take 2 coll))  coll ) (dec cnt)) \n      coll)  ) \n  '(1 1) (- cnt 2) ) ) )","problem":26,"user":"50dc2cd7e4b02e6ac9592c86"},{"code":"#(let [a (object-array 1)]\n  (aset a 0\n   (lazy-cat [1 1]\n     (map + (aget a 0) (rest (aget a 0)))))\n   (take % (aget a 0)))","problem":26,"user":"4db4c93f535dc0f10411755c"},{"code":"(fn fib [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f04d312535dcb61093f6be7"},{"code":"#(take %\n       (map first\n            (iterate (fn [[x y]] [y (+ x y)]) [1 1])\n       )\n)","problem":26,"user":"51836944e4b028ec5fd2f29f"},{"problem":26,"code":"(fn fibs [n]\n    (map second (take n \n          (iterate (fn [[x y]] [y (+ y x)]) [0 1])\n    ))\n)","user":"5374f931e4b06d7f452d9e2d"},{"problem":26,"code":"(fn fib\n  ([n] \n   (conj \n    (fib (- n 2) 1 1) \n    1 1))\n  ([n a b]\n   (if (< n 1)\n     ()\n     (conj \n      (fib (- n 1) b (+ a b)) \n      (+ a b)))))","user":"59733c91e4b01722bebd4c9b"},{"problem":26,"code":"(fn\n  [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else  (loop [n (- n 2), rez [1 1]]\n             (if (zero? n)\n               rez\n               (let [l (count rez)\n                     a (get rez (- l 1))\n                     b (get rez (- l 2))]\n               (recur (dec n) (conj rez (+ a b))))))))","user":"56b2630be4b0982f16b37e03"},{"code":"(fn [b]\n  (reverse \n    ((fn [r n]\n      (if (<= n 0)\n        r\n        (recur (cons (+ (first r) (first (rest r))) r) (- n 1))))\n     '(1 1)\n     (- b 2))))","problem":26,"user":"509f3bc9e4b08df8156e9e39"},{"problem":26,"code":"(fn fib [n]\n   (\n     if (= n 1) '(1) \n                (if (= n 2) '(1 1) \n                            (concat (fib (- n 1)) [(+  (last (fib (- n 1))) (last (fib (- n 2))))] )\n                            )\n    )\n   )","user":"5e77ece9e4b085ba37836df3"},{"code":"(fn [a] \n  (map (fn fib [n] \n    (if (< n 2) 1\n      (+ (fib (dec n)) \n        (fib (- n 2)))))\n  (range a)))","problem":26,"user":"4dbd2aa3535d020aff1edf40"},{"problem":26,"code":"(fn fib [x]\n   ((fn fib2 [i n r]\n      (cond\n        (= i n) r\n        :else (fib2 (+ 1 i)\n                    n\n                    (conj r (cond\n                              (<= i 1) 1\n                              :else (+ (nth r (- (count r) 1))\n                                       (nth r (- (count r) 2))))))\n        )) 0 x []))","user":"5c02c9a8e4b0bdcf453d1667"},{"code":"(fn [x] (reverse (nth (iterate #(cons (+ (first %) (second %)) %) [1 1]) (- x 2))))","problem":26,"user":"4fa069c3e4b0dcca54ed6d4a"},{"code":"(fn [x] \n  (loop [fib '(1 1) n (- x 2)]\n    (if (zero? n) \n      (reverse fib)\n      (recur (conj fib (+ (first fib) (second fib))) (dec n)))))","problem":26,"user":"51672d15e4b079759a74a5e7"},{"problem":26,"code":"#(loop [n % res [1 1]] (if (< n 3) res (recur (dec n) (conj res (+ (peek res) (last (butlast res)))))))","user":"556f35fee4b09a3098a5251a"},{"problem":26,"code":"(fn fibo [n]\n  (if (= n 2)\n    [1 1]\n    (let [previous (fibo (- n 1))]\n      (conj previous (+ (last previous) (last (drop-last previous)))))))","user":"547e3846e4b0c51c1f4d7302"},{"code":"(fn [n]\n  (seq (loop [x '[1 1] n (- n 2)]\n    (if (= n 0)\n      x\n      (recur (conj x\n                   (+ (get x (dec (count x)))\n                   (get x (dec (dec (count x)))))) (dec n))))))","problem":26,"user":"5185e17ee4b0da5a5be3bac5"},{"code":"(fn [n]\n(reverse ((fn [n x y s] (let [z (+ x y)]\n(if (zero? n) s\n(recur (dec n) y z (conj s y))))) n 0 1 '())    \n))","problem":26,"user":"4fef439ce4b0678c553fc313"},{"problem":26,"code":"(fn [n] (take n ((fn [$, n]\n  (if (= n 2)\n    $\n    (recur\n      (concat $ [(+ (last $) (first (rest (reverse $))))])\n      (- n 1)\n    )\n  )\n) '(1 1) (+ n 2))))","user":"53dbc8bee4b094d41abdfef5"},{"code":"#(cond\n   (< % 3) (repeat % 1)\n   :else (reverse (loop [coll (list 1 1)]\n                    (if (= % (count coll))\n                        coll\n                      (recur (conj coll (+ (first coll) (second coll))))))))","problem":26,"user":"51ab1da1e4b04e3dc0c27b30"},{"code":"(fn fib \n  ([n] (fib n 1 1 2 [1]))\n  ([n a b pos so-far]\n    (if (= pos n)\n      (conj so-far b)\n      (fib n b (+ a b) (inc pos) (conj so-far b)))))","problem":26,"user":"4daea889edd6309eace4d15b"},{"problem":26,"code":"(fn [cnt] (loop [x '(1 1)] (if (< (count x) cnt) (recur (concat x (list (apply + (take-last 2 x))))) x)))","user":"5e7fb908e4b085ba37836e3f"},{"problem":26,"code":"(fn [n]\n  (let [fib-lazy-seq (fn fib-lazy-seq\n                       ([] (fib-lazy-seq 1 1))\n                       ([a b] (lazy-seq (cons a (fib-lazy-seq b (+' a b))))))]\n    (take n (fib-lazy-seq))))","user":"54dc84ede4b024c67c0cf784"},{"problem":26,"code":"(fn [n] (\n               loop [fseq [1 1] c 2]\n                (if (>= c n)\n                  fseq\n                  (recur (conj fseq (+ (last fseq) (nth fseq (- c 2)))) (+ c 1))                    \n                    )\n                  )\n                )","user":"53b952eee4b047364c0444e6"},{"code":"(fn [n] (rest (take (+ n 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4f356d8de4b0e243712b1ec2"},{"problem":26,"code":"(fn [n]\n  (loop [n n accum [1 1]]\n    (cond (= n 0) [0]\n          (= n 1) [1]\n          (= n 2) accum\n          :else (recur (- n 1) (conj accum (apply + (take-last 2 accum)))))))","user":"554dff83e4b00713264bd98d"},{"problem":26,"code":"(fn [arg] (loop [cnt arg lst '()]\n                     (if (zero? cnt)\n                       lst\n                       (recur (dec cnt) \n                              (condp = lst\n                                '() '(1)\n                                '(1) '(1 1)\n                                (concat \n                                  lst \n                                  (list (reduce + (take-last 2 lst))))\n                                )\n                              )\n                       )\n                     ))","user":"52f28593e4b05e3f0be25ef9"},{"problem":26,"code":"(fn fib-seq [takecnt]\n  (rest (take (inc takecnt) ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    0 1))))","user":"54413696e4b032a45b86936b"},{"code":"(fn fib \n  ([n] (if (<= n 2) 1 (fib n [1 1])))\n  ([n l] (if (= n (count l))\n           (reverse l) \n           (fib n (cons (+ (first l) (second l)) l)))))","problem":26,"user":"52af0136e4b0c58976d9acb3"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 s [1]]\n    (if (= i n)\n      s\n      (recur (inc i) (conj s (reduce + (take-last 2 s)))))))","user":"54a80855e4b09f271ff37c9e"},{"problem":26,"code":"#(take %1 ((fn fibo [a b] (cons a (lazy-seq (fibo b (+ a b))))) 1 1))","user":"55306f9de4b076ab5578f814"},{"problem":26,"code":"#(reduce\n      (fn [x _]\n        (conj x\n              (+\n                (last x)\n                ((comp\n                   second\n                   reverse) x))))\n      [1 1] (range 2 %))","user":"59e0f38ae4b08badc2a0c500"},{"problem":26,"code":"(fn [n]  (reverse\n           (nth  \n              (iterate #(case %\n                              (())  '(1) \n\t                          ((1)) '(1 1)\n                              (conj % (+ (first %) (second %)))\n                        )\n                       '()\n              )\n              n\n           )\n        )\n)","user":"57fe996fe4b0d3187e9009d5"},{"code":"(fn [n] \n  (loop [n n \n         prev1 0\n         cur 1\n         fib ()]\n         (if (= n 0)\n           (reverse fib) \n           (recur (dec n)\n                  cur\n                  (+ cur prev1)\n                  (conj fib cur)))))","problem":26,"user":"502421ebe4b09f7ee7fb4377"},{"problem":26,"code":"(fn fib ([x] (fib x [1 1] 2))\n\t([x fibs counter] \n\t\t(loop [fibs fibs counter counter]\n\t\t(if (= x counter) (lazy-seq fibs)\n\t\t\t(recur (conj fibs (+ (nth fibs (- counter 1)) (nth fibs (- counter 2))))\n\t\t\t\t(inc counter))))))","user":"54199df6e4b01498b1a71a4b"},{"code":"#(loop [i 0 n-1 1 n-2 0 lili []]\n   (if (< i %)\n       (recur (inc i) (+ n-1 n-2) n-1 (conj lili n-1))\n       lili))","problem":26,"user":"4f8db862e4b02e764a0a51b2"},{"problem":26,"code":"(let [fibs (map first\n                (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n  (fn [n] (take n fibs)))","user":"55ea0780e4b0121d4835fda7"},{"problem":26,"code":"#(map (fn fib [n]\n  (cond\n   (< n 0) nil\n   (= n  0) 0\n   (= n 1) 1\n   :else (+ (fib (- n 1)) (fib (- n 2)))))\n      (range 1 (inc %)))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":26,"code":"(fn fib\n  ([n] (fib (- n 2) 1 1 '(1 1)))\n  ([c m n vs]\n  (if (= c 0) \n    vs \n    (let [\n          p (+ m n)\n          vss (concat vs [p])] \n      (fib (dec c) n p vss)))))","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn fib [n]\n  (reverse\n    ((fn fib1 [n]\n      (if (<= n 2)\n        '(1 1)\n        (cons (+ (first (fib1 (- n 1))) (second (fib1 (- n 1)))) (fib1 (- n 1)))\n      )\n    ) n)\n  )\n)","problem":26,"user":"4e5fdd68535d8ccf87e9fe4f"},{"problem":26,"code":"#(take %1 (map first (iterate (fn [d] (let [a (first d) b (last d)] [b (+ a b)])) [1 1])))","user":"5ec943fde4b08d0ec38692f1"},{"problem":26,"code":"(fn fibo [arg]\n   (cond\n    (= arg 1) [1]\n    (= arg 2) [1 1]\n    :else\n    (let [prev-acc (fibo (dec arg))\n          new-val (apply + (take 2 (reverse prev-acc)))]\n     (conj prev-acc new-val))))","user":"5d7eaf5fe4b0492f5d910fc3"},{"problem":26,"code":"#(take % ((fn fib* [a b] (cons b (lazy-seq (fib* b (+ a b))))) 0 1))","user":"4f24c859e4b0d66497709fef"},{"code":"(fn fibonacci[how-many]\n\t(if (= how-many 1) [1]\n\t(loop [cnt how-many result []]\n\t\t(if (= cnt 0) result\n\t\t(recur\n\t\t\t(dec cnt)\n\t\t\t(if (= (last result) nil) (conj result 1)\n\t\t\t(if (= (second (reverse result)) nil) (conj result 1)\n\t\t\t(conj result (+ (last result) (second (reverse result))))\n\t\t\t))))\n\t\t\t)))","problem":26,"user":"4e723bcb535d5021c1a8965c"},{"problem":26,"code":"(fn fibo [x]\n   (if (= x 2)\n     [1 1]\n     (conj (fibo (dec x))\n           (+ ((fibo (dec x)) (- x 2))\n              ((fibo (dec x)) (- x 3))))))","user":"5c2836ebe4b07e362c2305d4"},{"code":"(fn [n]\n  (map (fn fibo [n]\n         (cond (= n 1) 1\n               (= n 2) 1\n               (> n 2) (+ (fibo (- n 1)) (fibo (- n 2)))))\n       (range 1 (+ n 1))))","problem":26,"user":"53415755e4b00652c8746ecd"},{"code":"#(take %\n   (concat [1 1]\n     ((fn f [i j] (lazy-cat [(+ i j)] (f j (+ i j)))) 1 1)))","problem":26,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [x]\n  (take x \n    (map first \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":26,"code":"(fn ff [x]\n  (loop [x x res '()]\n    (if (= x 0)\n      res\n      (recur (dec x) (cons ((fn fib \n  [x]\n  (if (<= x 1)\n    x\n    (+ (fib (- x 2)) (fib (dec x))))) x) res)))))","user":"5c3f29d4e4b08cd430848e8f"},{"problem":26,"code":"#(take % ((fn fib ;; taken from the clojure.core docs on lazy-seq\n           \t\t([] (fib 1 1))\n           \t\t([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"5c3d8576e4b0d62ef62d9fb4"},{"problem":26,"code":"#(loop [a 0 b 1 c [] t 0] (if (= t %1) c (recur b (+ a b) (conj c b) (inc t))))","user":"5e2ead6ae4b05b4b015161f5"},{"code":"(fn [x]\n  (take x ((fn rfib [a b] \n    (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4e71cc2e535d5021c1a89652"},{"code":"(fn lulz [n] \n  (take n (map last (iterate #(conj % (+ (last %) (last (butlast %)))) [0 1])))\n)","problem":26,"user":"509dc716e4b08df8156e9e27"},{"code":"#(letfn [(fib [n]\r\n  \t(if (= n 0)\r\n\t\t    0\r\n\t\t    (if (= n 1)\r\n\t\t\t1\r\n\t\t\t(+ (fib (dec n)) (fib (- n 2))))))]\r\n\t(let [acc []]\r\n\t     (rest (map (fn [i] (fib i)) (range (inc %))))))","problem":26,"user":"4e273301535deb9a81d77ef7"},{"problem":26,"code":"(fn generate-first-x-fib-seq [x]                          ; filters all even elements from lazy sequence\n  (take x\n              (map first                                    ;takes the first element of every vector\n                   (iterate (fn fib-add [[a b]]\n                              [b (+ a b)]                   ; returns a vector where 'b' is replacing 'a' and a new value is calculated on b's previous position\n                              ) [1 1]))                     ;Creates a sequence of fib numbers [[1 1][1 2][2 3][3 5][5 3]... n]]\n              ))","user":"5fe1b893e4b05ac5b16ea16f"},{"problem":26,"code":"#(let\n   [producer (fn prod [a b] \n               (lazy-seq \n                (cons a \n                      (prod b \n                            (+ a b)\n                            )\n                      )\n                )\n               )]\n   (take % (producer 1 1))\n   )","user":"566cf904e4b0a866af6896c5"},{"problem":26,"code":"(fn [x] (take x (map last (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"54570c87e4b080a794c2c887"},{"problem":26,"code":"(fn fib [n]\n  (loop [nums [1]\n        my-n (- n 1)\n        result 1]\n    (if-not (= 0 my-n)\n      (recur (conj nums result)\n              (- my-n 1)\n              (+ result (last nums)))\n    nums)))","user":"5de630d1e4b0948ae9d9ae23"},{"problem":26,"code":"(fn [n]\n  (loop [x (- n 2)\n         fib [1 1]]\n    (let [next (+ (last fib) (nth fib (- (count fib) 2)))\n         result (conj fib next)]\n      (if (= x 1)\n        result\n        (recur (dec x) result)))))","user":"55c37594e4b0e31453f64989"},{"problem":26,"code":"(fn fib-seq [n]\n  (loop [result [1 1]\n         remain (- n 2)]\n    (if (pos? remain)\n      (recur (conj result (+ (last result) (nth result (- (count result) 2)))) (dec remain))\n      result)))","user":"5493ccbbe4b0b312c081ff50"},{"problem":26,"code":"(fn [n]\n  (loop [coll [1 1]]\n    (if (= (count coll) n)\n      (into '() (reverse coll))\n      (recur (conj coll (+ (last coll) \n                      \t   (nth coll (- (count coll) 2))))))))","user":"53d40508e4b00fb29b221332"},{"problem":26,"code":"#(take % ((fn fb [a b]  (cons a (lazy-seq (fb b (+ a b))))) 1 1))","user":"51a0370ae4b0b292b01ee3ef"},{"problem":26,"code":"(fn fibo \n\t([end] (fibo 0 end []))\n\t([start end col] (if (> start end) col \n     (cond\n       \t(= start 0) (fibo (inc start) end [])\n     \t(= start 1) (fibo (inc start) end [1])\n    \t(= start 2) (fibo (inc start) end [1 1])\n \t\t:else (fibo (inc start) end (concat col [(+ (last col) (-> col (reverse) (next) (first)))]))))))","user":"55204412e4b08d5046aa8a5f"},{"code":"(fn fib [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else ((fn [v n a b]\n           (if (= n 0)\n             v\n             (recur (conj v (+ a b)) (- n 1) b (+ a b)))\n           )[1 1] (- n 2) 1 1) ))","problem":26,"user":"52d51535e4b09f7907dd133a"},{"code":"(fn [n] (reverse ((fn [s i] (if (= n i) s (recur (conj s (+ (first s) (first (rest s)))) (inc i)))) '(1 1) 2)))","problem":26,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn [n]\n  (loop [result []\n         a 1\n         b 1]\n    (if (= (count result) n)\n      result\n      (recur (conj result a) b (+ a b)))))","problem":26,"user":"50294c28e4b0b33e9bf6fdef"},{"code":"(fn [c]\n  (take c ((fn fib-recur [a b]\n             (cons a (lazy-seq (fib-recur b (+ a b))))\n             ) 1 1))\n  )","problem":26,"user":"535943b3e4b04ce2eb3ed295"},{"problem":26,"code":"(fn [n]\n (letfn [(fibs [] (list* 1 1 (lazy-seq (map + (fibs) (rest (fibs)))))) ]\n   (take n (fibs))))","user":"543c1afce4b032a45b86933b"},{"problem":26,"code":"#(loop [acc [] n 1 m 0 left %]\r\n   (cond (= left 0) acc\r\n      :t (recur (conj acc n) (+ n m) n (- left 1))))","user":"566470b9e4b0e91d5f5c5658"},{"problem":26,"code":"(fn [n]\n (loop [lst '(1 1) i (dec (dec n))]\n   (if (= i 0)\n     (reverse lst) \n     (recur (conj lst (+ (first lst) (second lst))) (dec i)))))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"#(letfn [(f [a b lst n]\n  (if (zero? n)\nlst\n(f b (+ a b) (cons b lst) (dec n))))]\n(reverse (f 0 1 () %)))","problem":26,"user":"4fb04ee2e4b081705acca264"},{"code":"(fn [n]\n    (take n\n          (map first\n               (iterate\n                (fn [x] [(second x) (reduce + x)])\n[1 1]))))","problem":26,"user":"513bb7a6e4b04402f587b77d"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [fibn1 (fib (- n 1))]\n      (concat fibn1 (vector (+ (last fibn1) (nth fibn1 (- (count fibn1) 2))))))))","user":"5889b012e4b0f1effa3b7744"},{"problem":26,"code":"(fn [n]\n  (let [f #(vector (last %) (apply + %))]\n    (->> [0 1] (iterate f) (map last) (take n))\n    ))","user":"52dc7344e4b09f7907dd13cf"},{"code":"(fn [iters]\n  ((fn fibiter [a b n accu]\n    (if (= n 1) accu\n      (fibiter (+ a b) a (dec n) (conj accu (+ a b))))) \n        1 0 iters [1]))","problem":26,"user":"4eca7a87535d6d7199dd3705"},{"code":"(fn my-fib \n  [n]\n  (take n (map first (iterate \n                      #(conj (vec (rest %)) (reduce + %)) [1 1]))))","problem":26,"user":"524da51ee4b0a16e35cf6df4"},{"problem":26,"code":"(fn fib\n  [n]\n  (take n (map first (iterate (fn [[a b]] [b (+' a b)])\n                              [1 1]))))","user":"55915fe9e4b0604b3f94d579"},{"problem":26,"code":"#(for [i (range 1 (+ 1 %))] (\n    (fn fib [num]\n  (cond \n    (= num 1) 1\n    (= num 2) 1\n    :else (+ (fib (- num 1)) (fib (- num 2))))) i))","user":"568384b4e4b0945ebc182a9a"},{"problem":26,"code":"(fn [x] \n    (loop [i '(1 1)]\n        (if (= x (count i))\n            (reverse i)\n            (recur \n              (conj i (apply + (take 2 i)))))))","user":"55b62d2fe4b01b9910ae298f"},{"problem":26,"code":"(fn [n] \n  (loop [s [1 1], m 0]\n    (if (>= m (- n 2))\n      s\n      (recur (conj s (+ (last s) (nth s m))) (inc m))\n)))","user":"54524afbe4b0e397800069bc"},{"problem":26,"code":"(fn ! [x]  (if (< x 3)\n                      (if (= x 1) [1] [1 1])\n                      (let [up (! (dec x))\n                            ab (take-last 2 up)\n                            a (first ab)\n                            b (second ab)\n                            ]\n                        (conj up (+ a b)))))","user":"548f7bf1e4b0e286459a123b"},{"problem":26,"code":"(fn f [n]\n   (let [fib (fn fib [n]\n               (if (< n 2)\n                 1\n                 (+ (fib (- n 1)) (fib (- n 2)))))]\n     (map fib (range n))))","user":"59908f3fe4b0866487ed0d50"},{"code":"(fn fib [n]\n  (loop [i 0 v []]\n    (if (= n i)\n      v\n      (if (< i 2)\n        (recur (inc i) (conj v 1))\n        (recur (inc i) (conj v (+ (peek v) (peek (pop v)))))))))","problem":26,"user":"5392b849e4b0b51d73faaeb1"},{"problem":26,"code":"(fn\n  [n]\n  (take n(\n(fn fib\n  ([]\n   (cons 1 (cons 1 (fib 1 1)))\n   )\n  ([recent oneago]\n   (let[new (+ recent oneago)]\n     (cons new (lazy-seq (fib new recent)))\n     )\n   )\n  ))\n  ))","user":"579be21fe4b05b1deef9adff"},{"code":"#(take % (map first (iterate (fn [[a b]][b (+ a b)])[1 1])))","problem":26,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn fib [x]\n  (cond \n     (= 2 x) [1, 1]\n     (= 1 x) [1]\n     (<= x 0) []\n     :else (let [s (fib (dec x))]\n              (conj s (apply + (take-last 2 s))))))","problem":26,"user":"50b8914ce4b0cba0e598b64d"},{"code":"#(loop [p [1 1]] (if (= (count p) %1) p (recur (conj p (let [r (reverse p) f (first r) s (second r)] (+ f s))))))","problem":26,"user":"50e8cac5e4b0ebbe794eb7ef"},{"code":"#(loop [count % list [0 1]]\n   (if (= count 1) \n     (drop 1 list)\n     (recur (dec count) (conj list (+ (last list) (last (butlast list))))\n  )))","problem":26,"user":"53150a4de4b08068f379ed22"},{"code":"#(reduce (fn [r,i] (conj r (+ (nth r (- (count r) 1)) (nth r (- (count r) 2))))) [1,1] (range (- % 2)))","problem":26,"user":"531d53dbe4b08068f379edae"},{"code":"(fn[x]\n  (loop [quant (dec x)\n         fibs [0 1]]\n    (if (zero? quant)\n      (rest fibs)\n    (recur (dec quant) \n      (let [length (count fibs)\n            fib-1 (nth fibs (- length 1))\n            fib-2 (nth fibs (- length 2))]\n        (conj fibs (+ fib-1 fib-2)))))))","problem":26,"user":"4f6236abe4b0defedf855fcd"},{"code":"#(reverse(\n  loop[cnt (- % 2) items '(1 1)]\n           (if(= 0 cnt) items\n           (recur (dec cnt) (conj items (+ (first items) (second items))))\n           )\n  \t\n  ))","problem":26,"user":"524af042e4b09eba1c0223ba"},{"code":"#(take %\n  (map first \n    (iterate (fn [[f s]] [s (+ f s)]) \n      [1 1])))","problem":26,"user":"4fd58082e4b0d4de60cee377"},{"code":"(fn [en] (map (fn fib [n] (if (or (= 0 n) (= 1 n)) 1 (if (> 0 n) 0 (+ (fib (- n 1)) (fib (- n 2)))))) (range 0 en)))","problem":26,"user":"51b89503e4b050a1176cd69a"},{"code":"(fn[x]\n(loop [a (vector 1 1), n 2]\n  (if (= n x)\n    (seq a)\n    (recur (conj a (+ (nth a (- n 1)) \n                      (nth a (- (- n 1) 1))))\n           (inc n)))))","problem":26,"user":"4f2046b7535d64f6031464ab"},{"code":"(fn [n]\n  (loop [a 0\n         b 1\n         n n\n         result []]\n    (if (= n 0)\n      result\n      (recur b (+ a b) (dec n) (conj result b)))))","problem":26,"user":"4f3a979de4b0e243712b1f10"},{"problem":26,"code":"#(reverse\n  (loop [n % coll '(1 1)]\n    (if (= n 2)\n      coll\n      (recur (dec n) (cons (+ (first coll) (second coll)) coll))\n      )\n  ))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn [n]\n  (loop [i 1 a 1 b 0 coll [1]]\n      (if (< i n)\n        (recur (inc i) (+ a b) a (conj coll (+ a b)))\n        coll)))","problem":26,"user":"52c884a2e4b0c2d177d62136"},{"problem":26,"code":"#(loop [x [1 1]]\n            (if (< (count x) %)\n             (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n             x\n            )\n      )","user":"53ce030be4b00fb29b2212ea"},{"code":"(fn [nm] (take nm\n                ((fn fib [a b] (\n                                cons a (lazy-seq (fib b (+ a b)))\n                                )\n                   ) 1 1)\n                )\n  )","problem":26,"user":"524c72dce4b09eba1c022407"},{"code":"(fn wfib [x] (if (= x 1)\n          '(1)\n          (if (= x 2)\n            '(1 1)\n            (conj ((fn fib [a b x] (if (= x 1)\n                               (list b)\n                               (conj (fib b (+ a b) (- x 1)) b)\n                               )) 1 2 (- x 2))\n                  1 1))))","problem":26,"user":"5221c0cae4b0e6a83c8925e1"},{"problem":26,"code":"(fn\n  [n]\n  (loop [nums [1 1] accumulator 1]\n    (if (= n (count nums))\n      nums\n      (let [acc (+ accumulator (last nums))]\n        (recur (conj nums acc) (last nums))))))","user":"5a6f2942e4b0512ff01cda78"},{"problem":26,"code":"(fn fib \n  ([x] (fib (dec x) 0 [1]))\n  ([x l xs] (if (= x 0)\n              xs\n              (fib (dec x) (last xs) (conj xs (+ (last xs) l))))))","user":"590e588ce4b047aa04b19a23"},{"code":"(fn [lim] ( map first (take lim\n                              (iterate (fn [[a b]]\n                                         [b (+ a b)]\n                                         ) [1 1]))))","problem":26,"user":"5291ede5e4b0239c8a67af1e"},{"code":"(fn [n] \n  (take n \n    (map first \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f03396d535dcb61093f6a7b"},{"problem":26,"code":"(fn fib [n]\n  (let [rev-fib \n        (fn rev-fib [n] \n          (if (= n 0)         \n            '()\n            (let [tail (rev-fib (dec n))\n                  fst (or (first tail) 1)                                                                                                             \n                  snd (or (second tail) 0)                                                                                                            \n                  nxt (+ fst snd)]                                                                                                                    \n              (cons nxt tail)\n              )\n            )\n          )\n        rev-list (rev-fib n)]\n    (reverse rev-list)\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"code":"#(rest (take (+ % 1) ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 0 1)))","problem":26,"user":"525fea5ae4b03e8d9a4a7026"},{"code":"(fn fiblist [n]\n(let [fib (fn fib [n]\n          (cond (= n 0) 0\n          (= n 1) 1\n          :else (+ (fib (- n 1)) (fib (- n 2)) )     \n          )\n      )     \n]\n(map fib (map inc (range n)) ))\n)","problem":26,"user":"4f0df199535d0136e6c2231e"},{"problem":26,"code":"(fn fib [n]\n    (loop [cur 2\n           nums [1 1]]\n      (if (= cur n)\n        nums\n        (recur (+ cur 1) (conj nums (reduce + (take-last 2 nums)))))))","user":"540f3b4ee4b0addc1aec6729"},{"problem":26,"code":"(fn [c]\n  (loop [result [1 1]]\n    (if (= c (count result))\n      result\n      (recur (conj result (+ (last result) (second (reverse result))))))))","user":"5541fa50e4b0a04f79299515"},{"problem":26,"code":"#(map (fn myfib [x] \n         (if (> x 1) (+ (myfib (- x 1)) (myfib (- x 2))) \n             x)) \n       (rest (range (+ % 1))))","user":"5d132412e4b02c15ef0219a6"},{"problem":26,"code":"#(nth (iterate (fn [lst] (conj lst (+ (last lst) (last (butlast lst)))))\n               '[1 1]) (- % 2))","user":"53e2b212e4b036ad0777e3f4"},{"code":"(fn fib ([n] (fib n '(1 1)))\n  ([n acc]\n    (cond (= n 2) acc\n          :else (recur (- n 1) (conj (vec acc) (reduce + (take-last 2 acc)))))))","problem":26,"user":"4edfb618535d10e5ff6f5343"},{"code":"#(reduce (fn [xs _] (conj xs (apply + (take-last 2 xs)))) [1 1] (range 2 %))","problem":26,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":26,"code":"(fn [n] (take n ((fn gen [a b] (lazy-seq (cons a (gen b (+ a b))))) 1 1)))","user":"57b60e46e4b0fbc9809a27b6"},{"problem":26,"code":"#(map first (take % (iterate (fn [[_ y z]] [y z (+ y z)]) [1 1 2])))","user":"5742ec91e4b05c31a32c0883"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n  \t1 [1]\n    2 [1 1]\n    (conj (fib (- n 1))\n    \t(apply + (take-last 2 (fib (- n 1)))))))","user":"5576fee3e4b05c286339e078"},{"problem":26,"code":"(fn [n]\n  (loop [n (dec n) result [1]]\n    (case n\n      0 result\n      (recur (dec n) (conj result (apply + (take-last 2 result)))))))","user":"575d22f5e4b02ea11479937a"},{"code":"(fn [i]\n  (loop [k 1\n         a 0\n         b 1\n         seq '(1)]\n    (if (= k i)\n      seq\n      (recur (inc k) b (+ a b) (concat seq [(+ a b)])))))","problem":26,"user":"51a8ef91e4b08d8ec191b820"},{"code":"(fn [n]\n  (take n\n        ((fn lambda [a b]\n           (cons a (lazy-seq (lambda b (+ a b)))))\n         1 1)))","problem":26,"user":"527a5b84e4b03e8d9a4a7558"},{"code":"#(loop [cnt 2 coll [1 1]]\n   (if (= 0 %) []\n     (if (= 1 %) [1]\n       (if (= cnt %) coll\n         (recur (inc cnt) (conj coll(+ (last coll) (nth coll (- cnt 2)))))))))","problem":26,"user":"52a90056e4b0c58976d9ac39"},{"code":"#(loop [x 1 y 1 c [1 1] n (- % 2)] (if (zero? n) c (let [fib (+ x y)] (recur y fib (conj c fib) (- n 1)))))","problem":26,"user":"4f42c76fe4b0d7d3c9f3fd0e"},{"problem":26,"code":"(fn limited-fibonacci [limit] (take limit ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"55c0f842e4b01b9910ae2a2b"},{"code":"(fn [a] \n  ((fn [b last2 last1 resvec]\n    (if (< b 1)\n      resvec\n      (recur (dec b)\n             last1\n             (+ last1 last2)\n             (conj resvec (+ last1 last2)))))\n  (dec a) 0 1 [1]))","problem":26,"user":"52213426e4b0e6a83c8925c4"},{"problem":26,"code":"#(loop [coll '() \n        first-arg 1 \n        second-arg 1]\n   (if (= (count coll) %)\n     coll\n     (let [result (+ first-arg second-arg)]\n       (recur (concat coll (apply seq [[first-arg]]) ) second-arg result))))","user":"5491bebbe4b0b312c081ff3c"},{"problem":26,"code":"(fn [n] ((fn rfib [n a b acc] (if (= 0 n) (reverse acc) (rfib (dec n) b (+ a b) (conj acc a)))) n 1 1 '()))","user":"5888f271e4b0f1effa3b7726"},{"problem":26,"code":"(fn [x]\n  (reverse (\n\n(fn [n & more]\n  (if (= n 0)\n    more\n    (if (< (count more) 2)\n      (recur (- n 1) (conj more 1))\n      (recur (- n 1) (conj more (+ (first more) (first (rest more)))))\n    )\n  )\n)\n            \n            x ))\n  )","user":"545ef0a5e4b01be26fd74684"},{"problem":26,"code":"(fn [n]\n   (loop [n n\n          acc []]\n     (if (zero? n)\n       acc\n       (recur (dec n) (conj acc \n                            (max 1 (apply + (take 2 (reverse acc)))))))))","user":"565953a8e4b068f2fe63dbea"},{"code":"(fn fib [len] \n  (if (> len 1) \n   ((fn [sqn] (conj sqn (reduce + (take-last 2 sqn)))) (vec (fib (dec len)))) \n   [1]))","problem":26,"user":"4f70bcf9e4b07046d9f4effe"},{"code":"(fn [limit]\n(loop [first 1 second 1 limit (- limit 2) result [1 1]]\n  (if (< limit 1) (seq result)\n  (recur second (+ second first) (dec limit) (conj result (+ second first))))))","problem":26,"user":"531541a0e4b08068f379ed25"},{"problem":26,"code":"(fn fibs\n  [n]\n  (letfn [(lazy-fibs [a b] (cons a (lazy-seq (lazy-fibs b (+ b a)))))]\n    (take n (lazy-fibs 1 1))))","user":"597a7418e4b02382a38ad1e9"},{"problem":26,"code":"#(loop [out [] a 0 b 1 n %]\n   (if (= n 0)\n     out\n     (recur (conj out b) b (+ a b) (- n 1))))","user":"57b9fc74e4b0fbc9809a27fb"},{"code":"(fn thisfunc [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    true (let [l (thisfunc (dec n))]\n        (conj l (+ (last l) (nth l (- (count l) 2)))))))","problem":26,"user":"4dd9d299535d2dad7130b5dd"},{"code":"#(map (fn my-fib[x] (cond (= x 1) 1 (= x 2) 1 :else (+ (my-fib (dec x)) (my-fib (- x 2)) ) ) ) (range 1 (inc %1) ) )","problem":26,"user":"50b25f2ce4b03ea88043355f"},{"problem":26,"code":"#(loop [n % a 1 b 1 coll '[ 1 1 ]]\n       (cond (= n 2) coll\n             (= n 1) '(1)\n             (<= n 0) '()\n             :else\n             (recur (- n 1) b (+ a b) (conj coll (+ a b)))))","user":"5386f784e4b06839e8705f17"},{"problem":26,"code":"(fn f[c] (case c\n           1 [1] \n           2 [1 1]\n           (conj (f (dec c)) (+ (last (f (dec c))) (last (f (- c 2)))))))","user":"54e32090e4b024c67c0cf7d9"},{"problem":26,"code":"(fn fib2 [n]\n  (if (< n 1) []\n    (conj (fib2 (dec n)) ((fn fib [n]\n                            (if (<= n 2) 1\n                              (+ (fib (dec n)) (fib (dec (dec n)))))\n                              ) n))))","user":"52a0f9c4e4b04e0c58e87bd0"},{"problem":26,"code":"(fn [n] (take n ( (fn fibo [x y] (lazy-seq (cons  x (fibo y (+ x y))))) 1 1)))","user":"5793931ee4b0e215f87e845c"},{"code":"(fn [x] (if (= x 3) '(1 1 2) (if (= x 6) '(1 1 2 3 5 8) '(1 1 2 3 5 8 13 21))))","problem":26,"user":"4fe89c81e4b07c9f6fd12c57"},{"code":"#(map (fn fib [n] (if (<= n 2) 1 (+ (fib (- n 2)) (fib (dec n))))) (range 1 (inc %)))","problem":26,"user":"4ee6400c535d93acb0a6685b"},{"problem":26,"code":"(fn [n] (take n\n              (map first\n                   (iterate (fn [[a b]]\n                              [b (+ a b)])\n                            [1 1]))))","user":"5b5d255de4b0c6492753e6c8"},{"problem":26,"code":"#(map (fn fib[x] (if (< x 3) 1 (+  (fib (- x 1)) (fib (- x 2))))) (take % (iterate inc 1)))","user":"5e0e836fe4b099d064962fa8"},{"problem":26,"code":"(fn fibonaci\n   ([n] (fibonaci [1 1] n))\n   ([coll, n] (if (< (count coll) n) \n             (fibonaci (conj coll (+ (last coll) (nth coll (- (count coll) 2)))) n)\n             coll)))","user":"5b7ed20fe4b047b03b203760"},{"code":"(fn fib-seq [n]\n  (reverse \n   (reduce \n    (fn [ax el] (conj ax (+ (second ax) (first ax)))) '(1 1) \n    (range 2 n))))","problem":26,"user":"51efd397e4b0249c592fbdeb"},{"problem":26,"code":"(fn [n]\n  (loop [col '() i 0]\n    (cond\n      (= i n) col\n      (= i 0) (recur (concat col '(1)) (inc i))\n      (= i 1) (recur (concat col '(1)) (inc i))\n      :else (recur\n             (concat col (list (+ (nth col (- i 1)) (nth col (- i 2)))))\n             (inc i)))))","user":"5a06c154e4b01bb0ae8afdce"},{"problem":26,"code":"(fn fib [n]\n  (cond \n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [prev (vec (fib (- n 1)))]\n           (apply list (conj prev \n                 (+ (last (butlast prev))\n                    (last prev)))))))","user":"560d24a2e4b05f002753df34"},{"problem":26,"code":"(fn fibonacci\n  ([x]\n    (if (< x 3)\n      (if (< x 2)\n        (if (< x 1)\n          []\n          [1])\n        [1 1])\n      (fibonacci (- x 2) [1 1])))\n  ([x fibseq]\n    (if (= x 0) \n      fibseq\n      (fibonacci (- x 1) \n        (conj fibseq (+ (nth fibseq ((comp #(- % 2)count) fibseq)) (last fibseq)))))))","user":"5e6834e0e4b04793f195eaf9"},{"problem":26,"code":"(fn [total-numeros]\n      (take total-numeros\n            ((fn fibo\n               ([] (fibo 1 1))\n               ([a b] (lazy-seq (cons a (fibo b (+ a b)))))))))","user":"599f7a7ee4b0871e7608b81e"},{"problem":26,"code":"(fn fib2 [n]\n\n  (loop [res [] i 0 a 0 b 1]\n    (if (== i n) res (recur (conj res b  ) (+ i 1) b (+ a b) ))\n    )\n  )","user":"5afc115de4b0cc2b61a3bcff"},{"code":"(fn [c] \n  (reverse (reduce \n   (fn [a b] \n     (conj a (+ (first a) (second a)))\n   )\n   '(1 1) (range (- c 2)))))","problem":26,"user":"4e9be708535dbda64a6f6b79"},{"problem":26,"code":"(fn [n] (seq (last (take (- n 1) (iterate #(conj % (+ (last %) (last (drop-last %)))) [1 1])))))","user":"5810b899e4b0f478707a05d8"},{"code":"(fn [num] \n    (loop [n num fn0 0 fn1 1 result [1]]\n      (if (= n 1)\n          (into '() (reverse result))\n          (recur (dec n) fn1 (+ fn0 fn1) (conj result (+ fn0 fn1))))))","problem":26,"user":"4faf2f4ce4b081705acca251"},{"code":"#(take %1 (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","problem":26,"user":"5248c4c7e4b05ef8e38e63e8"},{"problem":26,"code":"(fn [until]\n  ((fn inner-f [first second fib-seq counter]\n     (if (= counter until)\n       fib-seq\n       (let [third   (+ first second)\n             inc-seq (concat fib-seq [third])]\n         (inner-f second third inc-seq (inc counter))))) 1 1 [1 1] 2))","user":"5d6b21efe4b04d129b00f2a3"},{"problem":26,"code":"(fn fib [n]\n  (loop [n (- n 2)\n         acc [1 1]]\n    (if (= n 0)\n      acc\n      (recur (- n 1) (conj acc (+ (last acc) (last (butlast acc))))))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fib\n            ([] (lazy-seq (cons 1 (fib 1 1))))\n            ([a b] (lazy-seq (cons b (fib b (+ a b))))))]\n    (take n (f))))","user":"5a23503fe4b0ff51aa4b32d6"},{"problem":26,"code":"(fn [n]\n  (let [fib (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take n fib)))","user":"545bd22fe4b01be26fd7465a"},{"problem":26,"code":"#(letfn [(fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2)))))]\n     (for [x (range 1 (inc %))] (fib x)))","user":"5717bcffe4b07c98581c3b16"},{"code":"(fn [n]\n  (letfn [(fib [x]\n            (cond (= x 1) 1\n                  (= x 2) 1\n                  :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (map #(fib %) (range 1 (+ n 1)))))","problem":26,"user":"4fbc0011e4b081705acca2f0"},{"problem":26,"code":"(fn fib-seq [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"561f9110e4b064ca9f4b16ce"},{"code":"(fn [n]\n  (loop [curr 0\n         prev 1\n         acc  nil]\n    (if (= n (count acc))\n      (reverse acc)\n      (recur (+ curr prev) curr (conj acc (+ curr prev))))))","problem":26,"user":"51da565ae4b02ceefd947765"},{"code":"( partial ( fn make-fib [ cseq tsize ]\r\n  ( if ( = 0 tsize )\r\n    []\r\n    ( if ( = ( count cseq ) tsize )\r\n      cseq\r\n      ( let [ seqCount (count cseq) ]\r\n\t      ( cond\r\n\t        ( = seqCount 0 ) ( make-fib [ 1 ] tsize )\r\n\t        ( = seqCount 1 ) ( make-fib [ 1 1 ] tsize )\r\n\t        :else ( make-fib ( conj cseq ( apply + ( take-last 2 cseq ) ) ) tsize )))))) [] )","problem":26,"user":"4fbb7010e4b081705acca2e7"},{"problem":26,"code":"(fn [n] ((fn [n p1 p2 s] (cond (= n 0) s :else (recur (dec n) p2 (+ p1 p2) (conj s p1)))) n 1 1 []))","user":"5cd26163e4b0ccb0619628fe"},{"problem":26,"code":"(fn\n  [x]\n  (loop [a 0 b 1 n x ls []]\n    (if (= n 0)\n      ls\n      (let [a' (+ a b)]\n        (recur a' a (dec n) (conj ls a'))))))","user":"59a512b7e4b066c664927d5e"},{"code":"#(map (fn [n] (letfn [(fib [n] (cond (= n 0) 1 (= n 1) 1 :else (+ (fib (dec n)) (fib (- n 2)) ) ) )] (fib n)) ) (range %))","problem":26,"user":"513a4babe4b067e25a345eca"},{"problem":26,"code":"(fn [x] (let [z (fn z* [w y] (cons w (lazy-seq (z* y (+ y w)))))] (take x (z 1 1))))","user":"59f4d0e0e4b0966464fe6ab9"},{"problem":26,"code":"(fn [n]\n  (take n ((fn x\n  ([] (x 1 1))\n  ([a b] (cons a (lazy-seq (x b (+ a b)))))))))","user":"53c63db5e4b00fb29b221296"},{"code":"(fn [x] ((fn f [a] (if (> (count a) (- x 1)) a (f (conj a (+ (last a) (a (- (count a) 2))))))) [1 1]))","problem":26,"user":"5106d9f3e4b01150e115ebef"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 1\n        b 1\n        c (- n 2)\n        r [a b]\n       ]\n  (if (> c 0)\n    (recur b (+ a b) (dec c) (conj r (+ a b)))\n    r\n  ))\n)","user":"567b9ff7e4b05957ce8c61a9"},{"code":"(fn [x]\n  (take x ((fn fib [a b] \n    \t\t(lazy-seq (cons a (fib b (+ a b)))))\n           1 1)))","problem":26,"user":"5215661be4b02f6d8ea676c7"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1])))","user":"540a4f20e4b0addc1aec66ef"},{"problem":26,"code":"(fn [fibsupto]\n  (loop [initlist '(1 1) accumlist [1 1]]\n       (if (= (count accumlist) fibsupto)\n           accumlist\n           (recur (list (first (rest initlist)) (reduce + initlist)) (conj accumlist (reduce + initlist)))\n           )))","user":"5425d65ce4b01498b1a71b14"},{"code":"(fn [n] (reduce (fn [result n] (let [c (count result)] (if (or (= 0 c) (= 1 c)) (conj result 1) (conj result (+ (result (dec c)) (result (dec (dec c)))))))) [] (range n)))","problem":26,"user":"5256a1d4e4b0541d1855ba29"},{"problem":26,"code":"(fn [x]\n  (take x\n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n)))","user":"582835cbe4b051871117bf30"},{"problem":26,"code":"(fn [n] \n  (let [fib \n          (fn fib* [a b] \n             (cons a \n                (lazy-seq \n                (fib* b (+ b a)))\n             )\n          )\n       ]  \n       (take n (fib 1 1))\n  )\n)","user":"5f631e11e4b02876ed9fd011"},{"problem":26,"code":"(fn [n]\n  ((fn [current a b acc]\n     (if (= current n)\n       (conj acc a)\n       (recur (inc current)\n              b\n              (+ a b)\n              (conj acc a))))\n   1 1 1 []))","user":"56be350ce4b0f26550335981"},{"problem":26,"code":"(fn [n]\n  (letfn [(generate-fib-seq\n            ([] (generate-fib-seq 1 1))\n            ([n m] (cons n (lazy-seq (generate-fib-seq m (+ n m))))))]\n    (take n (generate-fib-seq))))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"(fn [n]\n  (letfn [(add-last-2 [xs] (apply + (take-last 2 xs)))]\n  (if (<= n 2) '(1 1)\n    (reduce (fn [a i] (concat a (list (add-last-2 a)))) \n          '(1 1) (range (- n 2))))))","problem":26,"user":"502d387fe4b0d96a44ab202f"},{"problem":26,"code":"#(loop [n % acc [1 1]]\n   (if (<= n 2) acc\n     (recur (dec n) (conj acc (+ (last acc) (last (butlast acc)))))))","user":"542789efe4b01498b1a71b25"},{"problem":26,"code":"#(take % (concat [1 1] ((fn fib [x y] (lazy-cat [(+ x y)] (fib y (+ x y)))) 1 1)))","user":"5b3169a6e4b025bcb146f303"},{"problem":26,"code":"(fn [n]\n  (loop [s [1 1]]\n    (if (= (count s) n)\n      s\n      (recur (conj s (+ (last s) (second (reverse s))))))))","user":"564583f0e4b0284900eef607"},{"code":"(fn [n] (take n\n              ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n              ))","problem":26,"user":"51df825de4b01188f062752b"},{"problem":26,"code":"#(loop [x % y []]\n    (if (zero? x)\n      y\n      (if (empty? y)\n        (recur (dec x) [1])\n        (if (= 1 (count y))\n          (recur (dec x) [1 1])\n          (->> (last y)\n               (+ (nth y (dec (dec (count y)))))\n               vector\n               (concat y)\n               (recur (dec x)))\n          ))))","user":"5f476a39e4b0102c7503392f"},{"problem":26,"code":"(fn\n  \n   [num]\n  (loop [lst [1 1]]\n    (if (< (count lst) num)\n      (recur (conj lst (+  (last lst) (nth lst (- (count lst) 2)))))\n      lst)))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(partial \n (fn foo [res n] \n   (if \n     (= n 0) \n     (rest (rest (reverse res)))\n     (foo (conj res (+ (first res) (first (rest res)))) (dec n))\n\t)\n  )\n '(0 1)\n )","problem":26,"user":"51a0e0b7e4b0b292b01ee3fb"},{"code":"(fn [num] \n  (loop [num num e1 1 e2 1 res []] \n    (if (= num 0) \n      res \n      (recur (dec num) e2 (+ e1 e2) (conj res e1)))))","problem":26,"user":"4fd7962ee4b0dab7d829f385"},{"problem":26,"code":"(fn [n]\n  (loop [fibs '(1 1)]\n    (if (<=  n (count fibs))\n      (reverse fibs)\n      (recur (conj fibs (+ (first fibs) (second fibs)))))))","user":"54ea5e91e4b024c67c0cf840"},{"code":"(fn [x] \n  ((fn f [y acc]\n    (cond\n      (>= y x) acc\n      :else \n        (f \n          (+ y 1)\n          (conj acc (+ (last acc) (last (butlast acc)))))))\n    2 [1 1]))","problem":26,"user":"4f8320e9e4b033992c121c18"},{"code":"(fn [x]\n  (loop [numbers [1 1]]\n    (if (= x (count numbers))\n      numbers\n      (recur (conj numbers (+ (last numbers) (last (butlast numbers))))))))","problem":26,"user":"50ed8fd1e4b06330c1f87c3f"},{"problem":26,"code":"#(loop [i (- % 2) r '(1 1)] (if (= i 0) r (recur (dec i) (concat r [(apply + (take-last 2 r))]))))","user":"57a5bdc4e4b0a966079561fd"},{"problem":26,"code":"#(reverse ((fn fib-seq [n]\n  (if (= n 1)\n     \t[1]\n   \t\t(cons\n        ((fn fib [x] (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2))))) n ) (fib-seq (- n 1))))) %))","user":"5414b7c4e4b01498b1a719ed"},{"problem":26,"code":"(fn [num]\n   (cond\n     (>= 0 num) nil\n     (= 1 num) '(1)\n     (= 2 num) '(1 1)\n     :else\n     (loop [num num\n            lst '(1 1)]\n       (if (> 3 num)\n         lst\n         (recur (dec num) \n                (concat lst (list (+ (last lst) (last (drop-last lst))))))))))","user":"56acfee5e4b03c432f18734f"},{"problem":26,"code":"(fn [x]\n  (take x\n    (\n     (fn fib [a b]\n        (\n         cons a (lazy-seq (fib b (+ a b)))\n        )\n     ) \n      1 1\n    )\n  )\n)","user":"5799fc93e4b05b1deef9add0"},{"problem":26,"code":"#(case %1 3 '(1 1 2) 6 '(1 1 2 3 5 8) 8 '(1 1 2 3 5 8 13 21))","user":"5591b61ee4b0604b3f94d580"},{"code":"(fn [i] (map first (take i (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"5242aca8e4b076204b44fa82"},{"code":"#(take % (letfn\n    [(fibsrec [a b]\n      (lazy-seq (cons a (fibsrec b (+ a b)))))]\n    (fibsrec 1 1)))","problem":26,"user":"4f9c4b02e4b0dcca54ed6d1b"},{"code":"(fn [n]\n  (letfn [(calc [n k x y results]\n   (if (= k n)\n    (reverse results)\n    (recur n (inc k) y (+ x y) (conj results (+ x y)))))]\n   (calc n 1 0 1 '(1))))","problem":26,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":26,"code":"(fn\n\t[x]\n\t(take x\n\t\t\t\t(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5d797deee4b02e6b30c93541"},{"problem":26,"code":"#(loop [l [1 1] n 2]\n    (if (>= n %) l\n      (recur\n        (conj l (+ (nth l (- n 1))\n                   (nth l (- n 2))))\n        (inc n))))","user":"55c583d5e4b0e31453f649b1"},{"problem":26,"code":"#(map (fn fibonacci\n  ([x] ( if (< x 3)\n         1\n         (+ (fibonacci (- x 1))  (fibonacci (- x 2)))))) (range 1 (+ % 1)))","user":"578f5122e4b0ebec4cfb7592"},{"problem":26,"code":"#(take % \n(reduce \n  (fn [coll el] \n    (conj coll (+ (last coll) (last (butlast coll)))))\n  [1 1] (range 10)))","user":"596d630ae4b069c0a1a19846"},{"code":"(fn [n]\n  (take n (map #(% 0) (iterate (fn [v] [(v 1) (+ (v 0) (v 1))]) [1 1]))))","problem":26,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":26,"code":"(fn [n] ((fn fibjd [a b counter] \n               (when (< counter n) \n                 \n                 (conj(fibjd b (+ b a) (+ counter 1)) a)\n                 )\n               ) 1 1 0) )","user":"53f12b77e4b0742d9025b0da"},{"problem":26,"code":"(fn [b] (let [fib-seq ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   0 1) limit (inc b)] (rest (take limit fib-seq))))","user":"544cf5d7e4b0e39780006977"},{"problem":26,"code":"(fn fib [cnt]\n ((fn fib2 [i p1 p2]\n    (if (> i 0 )\n       (conj (fib2 (dec i) p2 (+ p1 p2)) (+ p1 p2))\n       ()\n    )\n  ) cnt 1 0 )\n)","user":"5509a23ee4b06e50f9beb11a"},{"problem":26,"code":"(fn [x]\n  (take x\n       ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)))\n  \n\n;(fn [x]\n; (take x\n;  ((fn fib[a b]\n;   (cons a (lazy-seq\n;    (fib b (+ a b)))))\n;     1 1)))","user":"524fd3f0e4b0541d1855b81d"},{"problem":26,"code":"(fn [n]\n  (last (take (dec n)\n        (iterate (fn [coll]\n                   (concat coll\n                           [(+ (last coll)\n                               (last (butlast coll)))]))\n                 '(1 1)))))","user":"554bd33ce4b0a04f7929959a"},{"problem":26,"code":"(fn fibs [n]\n (if (< n 3)\n     (take n [1 1])\n   (#(concat % [(apply + (take 2 (reverse %)))]) (fibs (dec n)))\n   ))","user":"577a8049e4b0d3393e5deafc"},{"code":"#(take  % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"514721c6e4b0d520409ed392"},{"problem":26,"code":"#(loop [c 2 sq [1 1]]\n\t\t(if (= c %) (apply list sq)          \n\t\t\t(recur (inc c) (conj sq (reduce + (take-last 2 sq))))))","user":"56bb9ccce4b0f26550335959"},{"problem":26,"code":"(fn [n]\n    (->> (iterate #(vector (second %) (reduce + %)) [0 1])\n         (map second)\n         (take n)))","user":"5501a1e1e4b07d26eda61d75"},{"problem":26,"code":"#(map\n (fn fib\n   [x]\n   (if (= x 0)\n     0\n     (if (= x 1)\n       1\n       (+\n        (fib (- x 2))\n        (fib (- x 1))\n        )\n       )\n     )\n   )\n (map inc (range 0 %)))","user":"5873da5ee4b01531a375ea40"},{"problem":26,"code":"(fn fibo [n]\n  (loop [lst '(0)\n         num 1\n         accu 0]\n    (if\n      (= accu n) (reverse(butlast lst))\n                 (recur (cons num lst) (+ num (first lst))(inc accu)))))","user":"59dd387ae4b0a0ac046f2501"},{"code":"(fn fib [n] \n  (when (pos? n) \n    (let [rec (fib (dec n))\n          ult (or (last rec) 1)\n          pult (or (last (butlast rec)) 0)]\n      (concat rec \n          [(+ ult pult)]))))","problem":26,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":26,"code":"(fn x [n] (take n ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"587e3817e4b052da650a633e"},{"problem":26,"code":"(fn fib [n] \n  (if (= n 2) \n    '(1 1)\n    (sort \n     (#(conj % \n             (+ (first (reverse %)) (second (reverse %)))\n       ) (fib (dec n))\n     )\n    )\n  )\n)","user":"5a0362a0e4b01bb0ae8afd81"},{"code":"(fn fibo [l n] (if (< n 3) l (fibo (concat l (list (+ (last l) (last (butlast l))))) (dec n)))) '(1 1)","problem":26,"user":"5211d195e4b07aea8afc4f76"},{"problem":26,"code":"#(rest ( take (inc %) ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    0 1) ))","user":"59a2ba97e4b066c664927d2c"},{"problem":26,"code":"(fn fib\n  ([n] (fib n [1 1]))\n  ([n xs]\n    (cond\n      (<= n 1) [1]\n      (< (count xs) n)\n        (fib n (conj xs (+ (last xs) (nth xs (- (count xs) 2)))))\n      :else xs)))","user":"554bced1e4b0a04f79299599"},{"problem":26,"code":"#(take %\n        (let [fib (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))] fib))","user":"603e899ee4b0d5df2af22313"},{"code":";I NEVER DO THE FIBONACCI\n(fn [c] \n  (if (= c 3) '(1 1 2)\n    (if (= c 6) '(1 1 2 3 5 8)\n      '(1 1 2 3 5 8 13 21)\n    )\n  )\n)","problem":26,"user":"4e9c66e2535dbda64a6f6b7f"},{"code":"(fn [how-many]\n (take how-many\n   (map first\n     (iterate\n       (fn [[a b]] [b (+ a b)])\n       [1 1]))))","problem":26,"user":"4f92884de4b0dcca54ed6caf"},{"problem":26,"code":"(fn fibn ([n] (fibn n 1 1))\n  ([n a b] (if (= n 0) nil (cons a (fibn (dec n) b (+ a b))))))","user":"55229495e4b0882d96d091a4"},{"problem":26,"code":"(fn fibo\n  ([x] (fibo 0 1 [1] x))\n  ([x1 x2 arr pos]\n   (if (> pos 1)\n     (recur x2 (+ x1 x2) (conj arr (+ x1 x2)) (dec pos))\n     arr\n     )\n   )\n  )","user":"5f6aef6de4b02876ed9fd04a"},{"problem":26,"code":"(fn [n](\n(fn rec[n, x, y]\n     (if (> n 0) \n       (conj (rec (dec n) y (+ x y)) x)\n       ()\n     )) n 1 1))","user":"58b43bf5e4b0ebc645576d38"},{"problem":26,"code":"(fn fibonacci [n]\n  (reduce #(case %2\n             0 (conj %1 0)\n             1 (conj %1 1) \n             (conj %1 (apply + (take-last 2 %1))))\n          [] \n          (range 1 (+ 1 n))))","user":"60032b7fe4b074f607df6638"},{"code":"(fn [n]\n  (letfn [(fib-seq []\n         ((fn rfib [a b] \n            (cons a (lazy-seq (rfib b (+ a b)))))\n          1 1))]\n    (take n (fib-seq))))","problem":26,"user":"533d2ea5e4b085b17e897d7a"},{"problem":26,"code":"(fn f ([n] (reverse (f n 0 '()))) ([n i a] (cond (= n i) a (< i 2) (f n (inc i) (cons 1 a)) 1 (f n (inc i) (cons (+ (first a) (second a)) a)))))","user":"505106fee4b05ab4c7e07d38"},{"problem":26,"code":"#(take % (map last (iterate (fn [[x y]] [y (+ x y)]) [ 0 1])))","user":"54c9636fe4b045293a27f66e"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n n1 1 n2 1 nums '()]\n    (if (= cnt 0)\n      (reverse nums)\n      (recur (dec cnt) n2 (+ n1 n2) (cons n1 nums)))))","user":"5a011305e4b01bb0ae8afd40"},{"problem":26,"code":"#(cons 1 (take (- % 1) ((fn f [a b] (lazy-seq (cons b (f b (+ a b))))) 1 1)))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn [n]\n  (take n\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"53858594e4b06839e8705f05"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [x] (list (reduce + x) (first x))) '(1 0)))))","user":"56561119e4b0f9d632dd849d"},{"problem":26,"code":"(fn fib\n  ([n] (fib n [] 0 1))\n  ([n seq n1 n2]\n   (if (= n 0)\n     (apply list seq)\n     (fib (dec n) (conj seq (+ n1 n2)) (+ n1 n2) n1))))","user":"5b4ca13ce4b02d533a91bcac"},{"problem":26,"code":"(fn fib [n]                                                                                                                                                                       \n  (loop [count 0 acc []]                                                                                                                                                            \n    (cond (= count 0) (recur (inc count) (conj acc 1))                                                                                                                              \n          (= count n) acc                                                                                                                                                           \n          :else (recur (inc count) (conj acc (apply + (take-last 2 acc)))))))","user":"5728d33ce4b0c6e51e0d2b12"},{"code":"(fn [n] (loop [ n n acc [ 1 ] x 0 y 1 ] \n          (if (< n 2) acc \n            (recur (- n 1) (conj acc (+ x y)) y (+ x y)))))","problem":26,"user":"535a18e3e4b04ce2eb3ed2a4"},{"code":"(fn [n]\r\n  (take n (map first\r\n    (iterate (fn [[x x_1]] [(+ x x_1) x]) [1 0]))))","problem":26,"user":"4e131e61535d04ed9115e7d5"},{"problem":26,"code":"(fn fib [n]\n      (if (= n 2) [1 1]\n        (let [f (fib (dec n))]\n          (conj f (+ (last f) (#(nth % (- (count %) 2)) f)))\n      \t)\n      )\n)","user":"56d5c1b0e4b0ea9b8538f7c3"},{"problem":26,"code":"(fn [n]\n  (reverse\n    (reduce (fn [li _] \n              (if (< (count li) 2)\n                (conj li 1)\n                (conj li (+ (first li) (first (rest li)))))) \n            '() (repeat n nil))))","user":"5b7ec039e4b047b03b20375d"},{"problem":26,"code":";  (def fib (fn\n;    [n]\n;    (cond\n;      (= n 0) 0\n;      (= n 1) 1\n;      :else (+ (fib (- n 1)) (fib (- n 2)))\n;    )\n;  ))\n;  (def fib-array (fn\n;    [n]\n;    (map fib (range 1 (inc n)))))\n\n; cheated on this one\n(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","user":"565370bce4b0f9d632dd8472"},{"problem":26,"code":"(fn [x]\n    (loop [x x\n           result '(1 1)]\n (if (= x 2)\n    result\n    (recur (dec x) (concat result (list (apply + (take-last 2 result))))))))","user":"538c4e52e4b0b51d73faae59"},{"code":"#(rest (reverse (last (take % (iterate (fn [l] (conj l (+ (first l) (second l)))) '(1 0))))))","problem":26,"user":"539eb153e4b0ca733b97448e"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib \n              ([] (fib 1 1))\n              ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n    (take n (fib))))","user":"5b9bcba8e4b0c0b3ffbd4b07"},{"problem":26,"code":"#(take %1 ((fn fib [] (lazy-seq (cons 1 (cons 1 (map + (fib) (drop 1 (fib)))))))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":26,"code":"(fn fib-seq [n] (take n (map first (iterate (fn [[x y]][y (+ x y)]) [1 1]))))","user":"58983e3fe4b00487982d52ce"},{"problem":26,"code":"(fn [n]\n  (loop [n  n\n         f1 1\n         f2 1\n         v  []]\n    (if (zero? n)\n      v\n      (recur (dec n) f2 (+ f1 f2) (conj v f1)))))","user":"558df2ebe4b0277789237649"},{"code":"(fn ! [x]   \n  (if (= x 2)\n    '(1 1)    \n    (let [y (! (dec x))]   \n      (let [z (apply + (take 2 (reverse y)))]\n        (concat y [z])))))","problem":26,"user":"52faec2ee4b047fd55837004"},{"problem":26,"code":"#(loop [n2 0\n        n1 1\n        ct %\n        xs []]\n   (if (= ct 0)\n     xs\n     (recur n1 (+ n2 n1) (dec ct) (conj xs n1))))","user":"5ac834f4e4b0e27600da77ab"},{"code":"(fn fibs [n]\n  (if (= n 1)\n    '(1)\n    (let [tail (fibs (dec n))]\n      (concat tail (list (apply + (take-last 2 tail)))))))","problem":26,"user":"4f4319ebe4b0d7d3c9f3fd13"},{"code":"#(map (fn fib-number [i]\n         (if (<= i 2)\n           1\n           (+ (fib-number (- i 1)) (fib-number (- i 2)))\n           )) (range 1 (+ % 1)))","problem":26,"user":"50bce014e4b0594b91591c63"},{"problem":26,"code":"(fn fib-construct [amount]\n  ((fn build [xs amount]\n    (if (= amount (count xs))\n      xs\n      (build (concat xs (cons (+ (nth xs (- (count xs) 1))\n                                 (nth xs (- (count xs) 2)))\n                              (empty xs))) amount)))\n  '(1 1) amount))","user":"525890f7e4b0cb4875a45cb5"},{"problem":26,"code":"#(take %\n       (map first \n              (iterate (fn [[a b]]\n                         [b (+ a b)])\n                       [1 1])))","user":"56f881e0e4b08e7d20b96839"},{"problem":26,"code":"(fn [n]\n   (reverse\n    (loop [[f s :as seq] '(1 1)\n           count (- n 2)]\n      (if (pos? count)\n        (recur (conj seq (+ f s)) (dec count))\n        seq))))","user":"55895eade4b059ccff29b202"},{"problem":26,"code":"(fn\n   [n]\n   (loop [n n c 1 lst (list 0 1) i 2]\n     (if (< c n)\n       (recur n (inc c) (conj (vec lst) (+ ((vec lst) (- i 2)) ((vec lst) (- i 1)))) (inc i))\n       (rest lst))))","user":"5d6e4d1ee4b04d129b00f2c4"},{"problem":26,"code":"(fn fib\n  ([num] (fib num [1 1]))\n  ([num sequence]\n    (let [size (count sequence)\n          a    (- size 1)\n          b    (- size 2)]\n      (if (= size num)\n        sequence\n        (fib num (conj sequence (+ (get sequence a) (get sequence b)) ))\n      )\n    )\n  )\n)","user":"5d58983fe4b02ba5928a6823"},{"problem":26,"code":"#(loop [xs () a 0 b 1 n %]\n   (if (zero? n)\n     (reverse xs)\n     (recur (cons b xs) b (+ a b) (dec n))))","user":"583e27e2e4b089d5ab817daa"},{"problem":26,"code":"(fn [x]\n  (loop [fib '(1 1) c x]\n    (if (>= 2 c)\n      (take x (reverse fib))\n      (recur (conj fib (+ (first fib) (second fib)))\n             (dec c)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":26,"code":"(fn [fib-count]\n  (loop [n 0\n         current 1\n         prev 0\n         fib-series []]\n    (if (= n fib-count) \n      fib-series\n      (recur (inc n) (+ current prev) current (conj fib-series current)))))","user":"50738138e4b054001656acc9"},{"problem":26,"code":"(fn fib\n  ([x] (fib x 2 '(1 1)))\n  ([x num-generated result]\n   (let [next-num (+ (first result) (first (next result)))]\n   \t(if (= num-generated x)\n      (reverse result)\n      (fib x (+ num-generated 1) (cons next-num result))))))","user":"555ee545e4b0a2eb076a39bd"},{"code":"(fn [idx]\n     ((comp reverse last) (take (dec idx) (iterate #(conj % (+ (first %) (second %))) '(1 1)))))","problem":26,"user":"50ed5d1be4b06330c1f87c37"},{"problem":26,"code":"(fn [n] \n  (loop [i 1\n         acc []]\n    (if (= i n)\n      acc\n      (recur (inc i)\n             (if (empty? acc)\n                (concat acc '(1 1))\n                (concat acc (list (+ (last acc) (nth acc (- (count acc) 2)))))\n             )\n      )\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":26,"code":"(fn [n]\n  (loop [fibseq '[1] fibnext 1 nn n]\n    (if (< nn 2)\n      (seq fibseq)\n      (recur (conj fibseq fibnext) (+ fibnext (last fibseq)) (dec nn)))))","user":"58803ed9e4b0f1effa3b760f"},{"problem":26,"code":"(fn fibb [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n      (conj (fibb (dec n)) (+ (last (fibb (dec n))) (last (fibb (- n 2))))))\n  )","user":"52d6d490e4b09f7907dd1369"},{"code":"(fn [n]\n  (loop [a 0 b 1 x 0 r '()]\n    (if (= x n)\n        (reverse r)\n        (recur b (+ a b) (inc x) (conj r b))\n    )\n  )\n)","problem":26,"user":"4e3ac1b2535deb9a81d77f4c"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         second-last-fib 0\n         last-fib 1\n         result ()]\n       (if (= n 0)\n           (reverse result)\n           (recur (dec n) last-fib (+ second-last-fib last-fib) (cons last-fib result)))))","user":"596a4fbce4b069c0a1a19800"},{"problem":26,"code":"(fn my-fib3 [m]\n  (letfn [(my-fib-helper [n]\n                         (cond\n                          (= n 1) '(1)\n                          (= n 2) '(1 1)\n                          (> n 2) (cons (+ (first (my-fib-helper (- n 1))) (first (my-fib-helper (- n 2))))\n                                        (my-fib-helper (- n 1)))))]\n    (reverse (my-fib-helper m))))","user":"547884d7e4b0c51c1f4d72bd"},{"problem":26,"code":"(fn fib [n] (reverse (loop [a 1\n\t\t\t\t\t\t\tb 1\n\t\t\t\t\t\t    i 0\n\t\t\t\t\t\t\tresult '()]\n\t\t\t  (if (= i n)\n\t\t\t  \tresult\n\t\t\t  \t (recur b (+ a b) (inc i) (cons a result))))))","user":"57c0917be4b05aa3c4741c95"},{"problem":26,"code":"(fn [n] (loop [l [1 1] p1 1 p2 1 c 2]\n          (if (= c n) \n            l\n            (recur (conj l (+ p1 p2)) p2 (+ p1 p2) (inc c)))))","user":"56051095e4b08b23635d3162"},{"code":"(fn [x] (reverse (reduce (fn [[x1 x2 & _ :as l] _] (conj l (+ x1 x2))) '(1 1) (take (- x 2) (repeat 1)))))","problem":26,"user":"4e48b61d535dc968683fc4be"},{"problem":26,"code":"(fn fibonacci [n]\n  {:pre [(pos? n)]}\n    (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"58884cc6e4b0f1effa3b770e"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib '(1) n))\n  ([lst total]\n   (if (= (count lst) total)\n     lst\n     (if (= (count lst) 1)\n        (fib '(1 1) total)\n        (fib \n          (concat lst [(+ (last lst) (nth lst (- (count lst) 2)))]);(concat col [n])\n        total)\n      ))))","user":"55ed1dc5e4b0121d4835fdd4"},{"problem":26,"code":"#(letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n   (take % (fib 0 1)))","user":"52470d42e4b05ef8e38e6350"},{"code":"#(letfn [(f [a] (conj a (+ (first a) (second a))))]\n    (reverse ((apply comp (repeat (- % 2) f)) '(1 1)))\n)","problem":26,"user":"50fda371e4b033b9c38d78d1"},{"code":"#(letfn [(fib [n lst cnt i1 i2] (if (= n cnt) lst (recur n (conj lst i2) (inc cnt) i2 (+ i1 i2))))]\n  (reverse (fib %1 '() 0 0 1))\n  )","problem":26,"user":"53342a1ce4b019098a6f8b8b"},{"problem":26,"code":"#(reverse (loop [i 1 ant 0 prox 1 ret ()] (if (> i %) ret (recur (inc i) prox (+ ant prox) (conj ret prox)))))","user":"5af45f05e4b0cc2b61a3bc97"},{"problem":26,"code":"#(take % (map last(iterate (fn [[x y]] \n                             [y (+ x y)]) [ 0 1])))","user":"560a7775e4b05f002753defa"},{"code":"(fn fibonacci \n  ([n] \n   (fibonacci n '() 0 1))\n  ([n result a b]\n   (if (zero? n)\n     (reverse result)\n     (recur (dec n) (cons b result) b (+ a b)))))","problem":26,"user":"5140771ae4b076604f1aa555"},{"problem":26,"code":"(fn fibb [idx & [fib]]\n  (let [fib (or fib [1 1])]\n    (if (= (count fib) idx) (seq fib)\n      (fibb idx \n             (conj fib (+ (last fib) (nth fib (- (count fib) 2)))))\n      \n      )))","user":"5ca03402e4b048ec896c5b68"},{"code":"(fn [x]\n    (loop [s 1 y 1 r x result []]\n        (if (zero? r)\n            result\n            (recur y (+ s y) (dec r) (conj result s)))))","problem":26,"user":"5179fd22e4b01aacecbecbe5"},{"problem":26,"code":"(fn fib [n]\n  (loop [current 3 before 1 before-before 1 result [1 1]]\n    (if (> current n)\n      result\n      (recur (inc current) (+ before before-before) before (conj result (+ before before-before)))\n      )\n    )\n  )","user":"567e418fe4b0feffd0d18eb1"},{"problem":26,"code":"(fn[x]\n      (lazy-seq (reduce (fn[a b] (conj a (+' (last a) (last (butlast a)))))\n              [1 1]\n              (range(- x 2))\n      ))\n    )","user":"560ac488e4b05f002753df08"},{"problem":26,"code":"#(take % \n       \n      (drop 1 (\n    \n        (fn rfib [a b] \n          (lazy-seq \n           (cons a (rfib b (+ a b))))) \n          \n          0 1))\n        \n   )","user":"5e453725e4b01d43a70e8e93"},{"code":"(fn [x] (loop [acc '(1 1) index 2]\n           (if (= index x)\n             (reverse acc)\n             (recur\n              (conj acc (+ (first acc) (nth acc 1)))\n              (+ index 1)))))","problem":26,"user":"530394b4e4b0d8b024fd3743"},{"problem":26,"code":"(fn [n]\n  (letfn [(lazy-fib [a b]\n            (lazy-seq\n              (cons b (lazy-fib b (+ a b)))))]\n    (take n (lazy-fib 0 1))))","user":"56c33ceae4b05cc29241ee89"},{"problem":26,"code":"(fn [x] (take x\n                     ((fn fib [a b] \n                        (lazy-seq (cons a (fib b (+ a b)))))\n                      1 1)))","user":"58a9e872e4b01a0c0b232973"},{"problem":26,"code":"#(take % ( map second (iterate (fn [[a b]] [b (+ a b)]) [0 1] ) ))","user":"5dde4bbce4b0948ae9d9add1"},{"problem":26,"code":"(fn\n  [n]\n  (reverse (nth (reduce\n                  (fn [[a b l] _x] [(+ a b) a (conj l a)])\n                  [1 0 '()]\n                  (range n)\n                  ) 2)))","user":"5e6e6537e4b04a83ad7cd29a"},{"code":"(fn [n] (letfn [(fib [x y] (lazy-seq\r\n                      (let [new-x y\r\n                            new-y (+ x y)]\r\n                        (cons new-x (fib new-x new-y)))))]\r\n    (take n (fib 0 1))))","problem":26,"user":"4e2110c7535d04ed9115e813"},{"code":"(fn fb [numleft]\r\n   ((fn fb-iter [previ current sequ numleft]\r\n      (cond\r\n       (= 0 numleft)\r\n       (reverse sequ)\r\n       true\r\n       (fb-iter current (+ previ current) (conj sequ current) (- numleft 1)))) 0 1 () numleft)\r\n   )","problem":26,"user":"5071f3b4e4b0e3170b5a8686"},{"problem":26,"code":"#(reverse (reduce\n  (fn [c _] \n    (conj c \n          (+ (first c) (second c)))) \n  '(1 1)\n  (repeat (- % 2) 0)))","user":"5cfee28de4b0cc9c91588185"},{"code":"(fn fib\n  ([n] (take n (fib 1 1)))\n  ([a b] (cons a (lazy-seq (fib b (+ a b)))))\n  )","problem":26,"user":"50052d38e4b0678c553fc45c"},{"code":"(fn [cnt]\n  (loop [fib '[1 1] cnt cnt]\n    (if (zero? (- cnt 2))\n      fib\n      (recur (conj fib (+ (last fib) (nth fib (- (count fib) 2)))) (dec cnt)))))","problem":26,"user":"4feded14e4b0d2a5fc2962ec"},{"problem":26,"code":"(fn [n] \n  (loop [i 0 result []]\n    (if (= i n)\n      result\n      (recur (inc i) (conj result \n                           (cond (< i 2) 1\n                                 :else (+ (last result) (second (reverse result)))\n                                 )))\n      )))","user":"5603c784e4b04bb52996e1c2"},{"problem":26,"code":"#(take % (map first (iterate (fn [lis] (vector (last lis) (reduce + lis))) [1 1])))","user":"56560a21e4b0f9d632dd849c"},{"code":"#(take % (map first (iterate (fn [[current next]] [next (+ next current)]) [1 1])))","problem":26,"user":"511e17a9e4b0c5b849dd36b0"},{"code":"#(take % ((fn rfib [a b]\n           (cons a (lazy-seq (rfib b (+ a b))))) \n           1 1))","problem":26,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[x y]] \n                                [y (+ x y)]) \n                              [1 1]))))","problem":26,"user":"5006b7d2e4b0678c553fc48c"},{"problem":26,"code":"#(reduce (fn [c _]\n           (conj c (apply + (take-last 2 c))))\n         [1]\n         (range 1 %))","user":"54dbcbbde4b024c67c0cf774"},{"problem":26,"code":"(fn\n  [num-of-elements]\n  (loop [left (- num-of-elements 2)\n         fiboo-list '(1 1)]\n    (if (> left 0)\n      (recur (dec left) \n             (concat fiboo-list (list (apply + (take-last 2 fiboo-list)))) \n             )\n      fiboo-list)))","user":"5a58d8a0e4b05d388ecb6c8a"},{"problem":26,"code":"(fn foo\n  ([i] (foo i 0 1 []))\n  ([i a b acc] (if (= i 0) acc (recur (- i 1) b (+ a b) (conj acc b))))\n)","user":"5eb3f908e4b00a66d4a9521a"},{"problem":26,"code":"#(let [fib-seq\n        ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b))))) 0 1)]\n    (rest (take (+ % 1) fib-seq)))","user":"60aeadd4e4b00e9e6653c499"},{"code":"#(take % (map first (iterate (fn [[x y]] (vector y (+ x y))) [1 1])))","problem":26,"user":"528e95efe4b0239c8a67aee2"},{"problem":26,"code":"#(loop [iteration 0 fib 1 l []]\n    (if (= iteration %)\n      l\n      (recur (inc iteration) (if (= nil (last l ))\n                               1\n                               (+ fib (last l))) (conj l fib))))","user":"58791cfee4b01531a375eac7"},{"problem":26,"code":"#(last (take (- % 1) (iterate (fn [x] (conj x (+ (last (butlast x)) (last x)) ) ) [1 1])))","user":"59d631d4e4b0ef0a1e9b5c09"},{"problem":26,"code":"#(take %\n        (map first\n             (iterate (fn [[a b]] [b (+ a b)])\n                      [1 1]\n                      )\n             )\n        )","user":"5d6932e6e4b0db5d338d1609"},{"problem":26,"code":"#(loop [sq [1] n %]\n  (if (= n 1)\n    sq\n    (recur (conj sq (reduce + (take-last 2 sq))) (dec n))\n  )\n)","user":"580d62b0e4b0849f6811b739"},{"problem":26,"code":"(fn __ [x] \n  (loop [ret [1 1], n x]\n  \t(if (> n 2)\n  \t (let [x1 (last ret), x2 (last (butlast ret))]\n    \t (recur (conj ret (+ x2 x1)) (- n 1)))\n  \t ret)))","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn fib [n] (if (= n 1) [1] (let [r (fib (dec n))] (conj r (reduce + (take-last 2 r))))) )","problem":26,"user":"502c8681e4b0532a782a5e35"},{"problem":26,"code":"(fn fibonacci-sequence\n  [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"6059d2e0e4b07e92fa001ace"},{"code":"(fn [x] (loop [f '(1 1) cnt x] (if (> cnt 2) (recur (cons (+ (first f) (first (rest f))) f) (dec cnt)) (reverse f))))","problem":26,"user":"4ec8736f535d6d7199dd36f3"},{"code":"(fn fib [n]\n  (case n\n    0 [1]\n    1 [1]\n    2 [1 1]\n    (let [f (fib (dec n))]\n      (conj f (+ (last f) (second (reverse f))))\n    )\n  )\n)","problem":26,"user":"512b9e59e4b04d059cf1fd17"},{"code":"(fn [X]\n  (loop [result [] remaining X]\n    (if (= remaining 0)\n      result\n      (if (< (count result) 2)\n        (recur (conj result 1) (dec remaining))\n        (recur (conj result (+ \n          (nth result (- (count result) 2))\n          (last result))) (dec remaining))))))","problem":26,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":26,"code":"defn","user":"4ee897fe535d93acb0a66883"},{"problem":26,"code":"#(map\n    (fn fib [i]\n      (cond\n        (= i 0) 0\n        (= i 1) 1\n        :else (+ (fib (- i 1)) (fib (- i 2)))\n      ))\n    (range 1 (+ 1 %)))","user":"53e15371e4b0d874e779ae54"},{"code":"(fn [n]\n  (map first\n    (take n\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ff4f5c4e4b0678c553fc362"},{"code":"(fn [n] (map #(first (rest %)) \n(reductions \n(fn [[a b] y] [b (+ a b)]) \n(repeat n [0 1]))))","problem":26,"user":"50127fbfe4b030d97e4db70f"},{"problem":26,"code":"#(loop [m '[] n1 0 n2 1]\n           (if (>= (count m) %) \n             m \n             (recur (conj m n2) n2 (+ n1 n2))))","user":"5562f08ae4b0c656e3ff17df"},{"problem":26,"code":"#(\ntake % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n)","user":"563e3c43e4b0da801c4e4669"},{"problem":26,"code":"#(seq (loop [coll [1 1] x %]\n        (if (=  x 2)\n       coll\n        (recur (conj coll (apply + (take-last 2 coll) ) ) (dec x))\n        )\n        )\n      )","user":"56349008e4b0bfe05bf117bd"},{"problem":26,"code":"(fn [n]\n(loop [a 1\n         b 1 \n         coll '() \n         n n]\n        (if (= n 0)  \n          (reverse coll)\n          (recur b (+ a b) (cons a coll) (dec n)))))","user":"5a409d77e4b0447ef91cc5d3"},{"code":"(fn [n] (loop [f 1 f1 1 c 0 r []] \n          (if (= c n)\n            r\n            (recur f1 (+ f f1) (inc c) (conj r f)))))","problem":26,"user":"5384bbf8e4b06839e8705ef5"},{"code":"#(take % ((fn f [p c]\n     (cons p (lazy-seq (f c (+' p c)))))\n   1 1) )","problem":26,"user":"536c7470e4b0fc7073fd6e3e"},{"code":"(fn  [x]\r\n  (if (= x 1)\r\n  '(1)\r\n\t(if (= x 2)\r\n\t  '(1 1)\r\n\t  (loop [counter 2\r\n\t\t\t accum '(1 1)]\r\n\t\t(if (>= counter x)\r\n\t\t  (reverse accum)\r\n\t\t  (recur (inc counter) \r\n\t\t\t\t (conj accum (+ (first accum) (second accum)))))))))","problem":26,"user":"4dd67f10535d2dad7130b5c9"},{"problem":26,"code":"#(map (fn f [n]\n        (if (<= n 1)\n               n\n               (+(f(- n 1))(f(- n 2))))) \n      (range 1 (+ % 1))\n     )","user":"5416aacce4b01498b1a719ff"},{"code":"(fn [x] \n  (take x ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","problem":26,"user":"4eb2c45e535d7eef3080734d"},{"problem":26,"code":"(fn yoyo [y] (next (map (fn fib [x] (if (< x 1) 0 (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2) ))))) (range (+ 1 y)))))","user":"55b7df63e4b01b9910ae29b3"},{"code":"(fn [x]\n   (reverse (loop [cnt x a 1 b 1 nums '()]\n     (if (zero? cnt)\n       nums\n         (recur (dec cnt) b (+ a b) (conj nums a))\n       )\n     )\n   ))","problem":26,"user":"519218ebe4b08962174cf737"},{"problem":26,"code":"#(loop [n (- % 2)\n               coll [1 1]]\n           (if (< n 1)\n             (seq coll)\n             (recur (- n 1) (conj coll (reduce + (take-last 2 coll))))))","user":"59438419e4b060784b3b7929"},{"code":"(fn [n]\n  (loop [times (- n 2)\n         n 1\n         n-1 1\n         r [1 1]]\n    (if (zero? times)\n      r\n    (recur (dec times) (+ n-1 n) n (conj r (+ n-1 n))))))","problem":26,"user":"51eb0374e4b0f1f103a0d156"},{"code":"(fn [x] (loop [n x cur 1 nex 1 result '()] (if (zero? n) (reverse result) (recur (dec n) nex (+ cur nex) (cons cur result)))))","problem":26,"user":"51ecb0fee4b0bb5070431583"},{"code":"(fn [n] \n  (loop [l [1 1] c n]\n    (if (= c 2)\n      l\n      (recur (conj l (+ (last l) (last (butlast l)))) (dec c)))))","problem":26,"user":"50112acee4b0d82cfac69f4c"},{"code":"#(drop-last 1 (last (take %1 (iterate (fn [coll] \r\n  (conj coll (apply + (take-last 2 coll)))) [1 1]))))","problem":26,"user":"4def301c535d08e6dec9fe12"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+' a b)]) [1 1])\n       (map first)\n       (take n)))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":26,"code":"#(take % ( map last (iterate (fn [[a b ]] [b ( + a b)]) [0 1] )))","user":"53e8cefde4b036ad0777e48d"},{"problem":26,"code":"(fn [X] (loop [x 0, lst [], y 1, z 1]\n    (if (= x X) lst\n      (recur (inc x) (conj lst y) z (+ y z)))))","user":"56433d34e4b08d4f616f5f23"},{"code":"#(map \n (fn fib [n]\n  (if (<= n 2)\n    1\n    (+\n     (fib (- n 1))\n     (fib (- n 2))      \n     ) \n   )\n )\n (range 1 (+ %1 1)))","problem":26,"user":"5277b9b5e4b03e8d9a4a750d"},{"problem":26,"code":"(fn [x]\n\t(loop [position 0 fiblist [1 1]]\n      (if( = (count fiblist) x)\n      \tfiblist\n      \t(recur (inc position) (conj fiblist (+ (get fiblist position) (get fiblist (inc position)))) ))))","user":"5f10ab01e4b091ba50b4dba6"},{"code":"(fn fibb [n]\n  (if (= n 1) [1]\n    (if (= n 2) [1 1]\n      ((fn fibbStep [seq] \n        (conj seq \n          (+ \n           (first (reverse seq)) \n           (second (reverse seq))))) (fibb (- n 1))))))","problem":26,"user":"538c3424e4b0b51d73faae58"},{"problem":26,"code":"(fn [n]\n  (seq (loop [prev 0\n              curr 1\n              result []\n              next 1]\n         (if (= next n)\n           (conj result curr)\n           (recur curr (+ prev curr) (conj result curr) (inc next))))))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":26,"code":"#(loop [cnt (- %1 3)\n         prev 1\n         nxt 1\n         ret '(1 1)]\n    (if (zero? cnt)\n      (concat ret (list (+ prev nxt)))\n      (recur (dec cnt) (identity nxt) (+ prev nxt) (concat ret (list (+ prev nxt))) )\n      )\n    )","user":"5e31a4b0e4b05b4b0151622b"},{"problem":26,"code":"(fn[n]\n\t(loop [x 0 \n\t       y 1 \n\t       curn n \n\t       fibs [0 1]]\n\t\t(if (> curn 0) (recur y (+ x y)(dec curn)(conj fibs (+ x y)))\n\t\t    (take n (rest(reverse(into '() fibs)))))))","user":"58ffaddee4b0438e51c2cffe"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1] i 2]\n     (if (< i n)\n       (recur (cons (+ (first result) (second result)) result) (inc i))\n       (reverse result))))","user":"593bdd84e4b069cdc2982b81"},{"problem":26,"code":"(fn [x]\n  (let [next-fibb (fn [fibbs] (concat fibbs (list (+ (last fibbs) (last (butlast fibbs))))))]\n    (last (take (dec x) (iterate next-fibb '(1 1))))\n    \n    \n    )\n  \n  )","user":"59f15e20e4b0966464fe6a5a"},{"code":"(fn [n]\n  (loop [n n s [] s1 1 s2 1]\n    (if (<= n 0) \n        s\n      (recur (dec n) (conj s s1) s2 (+ s1 s2)))))","problem":26,"user":"4f7774a6e4b0fbe0118ec57f"},{"code":"#(take % ((fn fib \n  ([] (concat [1] (fib 0 1)))\n  ([a b] (lazy-seq (cons (+ a b) (fib b (+ a b))))))))","problem":26,"user":"4ea16981535d7eef308072b2"},{"problem":26,"code":"(fn [n]\n  ((fn [n1 n2 acc n]\n    (if (= n 2)\n      acc\n      (let [new-n1 n2\n            new-n2 (+ n1 n2)]\n        (recur new-n1 new-n2 (concat acc (list new-n2)) (- n 1)))))\n   1 1 '(1 1) n))","user":"5edfb1e5e4b0c7845d86b107"},{"code":"(fn [x] \n   (take x \n     ((fn fib [a b] \n       (cons a \n         (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"50baa66be4b03e68e4411c94"},{"code":"#(map (fn fib [n]\n  (if (< n 2)\n    1\n    (+ (fib (- n 1)) (fib (- n 2))))) (range %))","problem":26,"user":"521b339fe4b0c4ef0be83031"},{"problem":26,"code":"(fn[x](take x '(1 1 2 3 5 8 13 21)))","user":"5dbb5200e4b09f47823971a9"},{"problem":26,"code":"(fn fib [n] \n   (if (<= n 0)\n     nil\n     (if (= n 1)\n       '(1)\n       (if (= n 2)\n         '(1 1)\n         (let [f (fib (- n 1))]\n           (concat f (list (reduce + (take-last 2 f)))))))))","user":"55cfa46ce4b0e31453f64a31"},{"code":"(fn fib-n [n]\n  (let [fib-l\n    (map first\n         (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    \n  (take n fib-l)))","problem":26,"user":"517a7f20e4b01aacecbecbee"},{"problem":26,"code":"(fn [x]\n  (reduce (fn [s x]\n            (if (or (= x 0) (= x 1))\n              (conj s 1)\n              (conj s (+ (get s (- x 2)) (get s (dec x))))))\n          []\n          (range 0 x)))","user":"58543a59e4b07779d46863f5"},{"problem":26,"code":"#(map (fn fib [n] (if (or (= 0 n) (= n 1)) 1 (+ (fib (- n 1)) (fib (- n 2))))) (take %1 (iterate inc 0)))","user":"5fc3850de4b0db0e95a5f3fd"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i (- n 2)\n         f [1 1]]\n    (if (zero? i)\n      f\n      (recur (- i 1) (conj f (+ (last f) (last (butlast f))))))))","user":"59077d7be4b047aa04b1995b"},{"code":"(fn fib [n]\n  ((fn fib' [a b n]\n    (if (= n 0)\n        '()\n        (conj (fib' b (+ a b) (- n 1)) a))\n  ) 1 1 n))","problem":26,"user":"5013f715e4b0510f6b41d38c"},{"code":"(fn [n] (take n (map first \n  (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f4d7b8fe4b03ad3f0c10ca9"},{"code":"(fn [n]\n  (loop [x 0\n         lst ()]\n    (if (< x n)\n      (recur (+ x 1)\n             (conj lst (if (< x 2) \n                         1 \n                         (+ (first lst)\n                            (first (rest lst))))))\n      (reverse lst))))","problem":26,"user":"5201d2f3e4b0b2e020a18f22"},{"problem":26,"code":"(fn [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (reduce (fn [coll _] (let [[a b] (rseq coll)] \n                                     (conj coll (+ a b)))) [1 1] (range 2 n))))","user":"5d97b602e4b0d3f9b434ad3a"},{"problem":26,"code":"#(take %\n       (map\n         last(iterate (fn [[x y]] [y (+ x y)])\n                      [ 0 1])))","user":"5c51c930e4b0fb8c5ffd99ce"},{"problem":26,"code":"(fn [n]\n     (map (fn inner [x]\n         (if (<= x 2)\n             1\n             (+ (inner (- x 1)) (inner (- x 2))))) (range 1 (inc n))))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":26,"code":"#(take % ((fn fib ([]\n                      (fib 1 1))\n             ([a b]\n              (lazy-seq (cons a (fib b (+ a b))))))))","user":"5e566668e4b027a2e10ac0f9"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1]]\n    (if (= (count acc) n)\n      (seq acc)\n      (recur (conj acc (apply + (take-last 2 acc)) )))))","user":"57ec8d1de4b0bfb2137f5b7f"},{"problem":26,"code":"(fn [x]\n  (loop [n 0\n         fibseq []]\n    (cond\n      (= x 0) [1]\n      (= n x) fibseq\n      (= n 0) (recur (inc n) (into fibseq [1]))\n      (= n 1) (recur (inc n) (into fibseq [1]))\n      ;; (= n 2) (recur (inc n) (into fibseq [1]))\n      :else\n      (recur (+ n 1)\n             (into fibseq\n                   [(+ (first  (reverse fibseq))\n                       (second (reverse fibseq)))])))))","user":"5f209ad3e4b0f565ad99827f"},{"code":"#(loop [i % j [1 1]]\n   (if (<= i 2)\n     j\n     (recur (dec i)\n            (conj j (+ (last j)\n                       (last (butlast j)))))))","problem":26,"user":"533056a4e4b019098a6f8b5b"},{"code":"#(loop [fib [1 1] n 2 a 1 b 1] (if (>= n %) fib (recur (conj fib (+ a b)) (inc n) b (+ a b))))","problem":26,"user":"4f5edeb0e4b0030a34fb2b57"},{"problem":26,"code":"(fn fab [n] (reverse (reduce (fn [v d] (conj v (+ (first v) (second v))))  '(1 1) (range (- n 2)))))","user":"5593619ae4b0c79f6e1db93c"},{"code":"#(take %\n   ((fn fib [a b]\n     (cons a (lazy-seq (fib b (+ b a)))))\n     1 1))","problem":26,"user":"52c07415e4b07a9af579234d"},{"problem":26,"code":"(fn [n]\n   ;; r1 is the last entry in fibon; r2 is the 2nd to last\n    (loop [r2 0  r1 1  cnt 2 fibon [1]] \n      (if (> cnt n) fibon\n          (do\n            (recur r1 (+ r1 r2) (inc cnt) (concat fibon [(+ r1 r2)]))))\n    ))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [c]\n  (map first (take c (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"501dfd54e4b051153f3b5b80"},{"problem":26,"code":"(fn [c] (map (fn fib [n] (cond\n                           (= n 0) 0\n                           (= n 1) 1\n                           :else (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (+ c 1))))","user":"5a383581e4b001c08efc0c97"},{"code":"(fn fibonacci [n]\r\n     (loop [result '(1 1)]\r\n       (if (= n (count result))\r\n         (reverse result)\r\n         (recur (conj result (+ (first result)\r\n                         (second result))))\r\n         )))","problem":26,"user":"505acd20e4b021387fb8985a"},{"code":"(fn fib [n] \n  ( if (= n 1) \n       [1]\n       (if (= n 2)\n           [1 1]\n           (conj (fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)))) ))))","problem":26,"user":"4f065217535dcb61093f6c0c"},{"problem":26,"code":"#(->> [1 1]\n       (iterate (fn [[a b]] [b (+' a b)]))\n       (map first)\n       (take %))","user":"60849bd6e4b0736b099e42f2"},{"problem":26,"code":"(fn [n]\n   (nth\n     (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1])\n     (- n 2)))","user":"5d24e49be4b02ea6f0fb6a2a"},{"problem":26,"code":"(fn [n]\n  (loop [fib-nums [1] res 0]\n    (if (>= (count fib-nums) n)\n      (subvec fib-nums 0 n)\n      (let [[n1] (reverse fib-nums)]\n        (recur (conj fib-nums (+ res n1)) n1 )))))","user":"59b0e877e4b0e1f4e384c8d3"},{"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    (let [before (reverse (fib (- n 1)))]\n      (reverse (conj before (+ (first (rest before))\n                      (first before)))))))","problem":26,"user":"4f559d2ce4b0a7574ea71808"},{"problem":26,"code":"#(loop [f1 0 f2 1 r [1] n %]\n   (if (= n 1)\n     r\n     (recur f2 (+ f1 f2) (conj r (+ f1 f2)) (dec n))))","user":"589511dee4b00487982d5272"},{"code":"#(take %1 (map first(iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ddc56e1535d02782fcbea04"},{"problem":26,"code":"(fn f [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (conj (f (dec n)) (apply + (take 2 (reverse (f (dec n))))))))","user":"54e2a779e4b024c67c0cf7d3"},{"problem":26,"code":"(fn fib\n  [sz]\n  (if (< sz 2)\n    [ sz ]\n    (loop [x (- sz 2) fibcol [1 1]]\n      (if (<= x 0)\n        fibcol\n        (recur (dec x) (conj fibcol (+ (last fibcol) (first (take-last 2 fibcol)))))))))","user":"5f088bb3e4b0cf489e8d7f5f"},{"problem":26,"code":"(fn [cnt]\n  (loop [remaining (- cnt 2) f1 1 f2 1 acc [1 1]]\n    (if (zero? remaining)\n      acc\n      (recur (dec remaining) f2 (+ f1 f2) (conj acc (+ f1 f2))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"#(reverse ((fn fib [n] \n  (if (<= n 2) \n    '(1 1)\n    (let [coll (fib (- n 1))]\n      (cons \n        (+ (first coll)\n          (second coll)) \n        coll))))%))","problem":26,"user":"4f28eb85e4b0d6649770a01d"},{"problem":26,"code":"(fn [n] (cond\n         (= n 1) '(1)\n         :else (loop [x (- n 2)\n                      acc '(1 1)]\n                 (if (zero? x)\n                   (reverse acc)\n                   (recur\n                    (dec x)\n                    (conj acc (+ (first acc) (second acc))))))))","user":"5e0e14bde4b099d064962fa3"},{"code":"#(take %1[1 1 2 3 5 8 13 21])","problem":26,"user":"4e3b6bff535deb9a81d77f52"},{"problem":26,"code":"(fn [n]\n  (take n\n    (map first\n      (iterate\n        (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"58bc3202e4b0888cdc949d0b"},{"code":"(fn fibseq [l] (map (fn fib [x]\n (cond\n  (== x 0) 1\n  (== x 1) 1\n  :else (+\n         (fib (- x 1))\n         (fib (- x 2))))) (range l)))","problem":26,"user":"4ff31e13e4b0678c553fc346"},{"problem":26,"code":"(fn [n]\n  (last\n   (take (inc n) \n     (iterate\n      #(conj % \n        (+ (or (last %) 1)\n           (or (last (butlast %))\n                0))) []))))","user":"59699da7e4b069c0a1a197eb"},{"problem":26,"code":"(fn [n] (loop [i 2 result '(1 1)] (if (= i n) result (recur (inc i) (concat result (list(apply + (take-last 2 result))))))))","user":"573c813be4b0cd1946bd10c5"},{"problem":26,"code":"(fn fib [n] \n  (cond\n    (< n 1) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (let [prev (fib (dec n))]\n        (conj prev (+ (last prev) (nth prev (- (count prev) 2) ) ))\n    )\n  )\n)","user":"585ad75be4b0f14aab7c8756"},{"problem":26,"code":"#(take % ((fn fib\n  ([] \n  \t(fib 1 1))\n  ([a b]\n  \t(lazy-seq (cons a (fib b (+ a b))))))))","user":"5b2c1f60e4b025bcb146f2b1"},{"code":"(fn fib \n    ([index] (fib index '(1 1)))\n    ([index list]\n      (if (== (.size list) index)\n        (reverse list)\n        (fib index (conj list (+ (first list) (second list)))))))","problem":26,"user":"5038f8d2e4b088a6a14ca75f"},{"code":"(fn [n] (rest (reverse (last (take n (iterate #(cons (apply + (take 2  %))  %) '(1 0)))))))","problem":26,"user":"4e95f5a5535dbda64a6f6b3b"},{"code":"#(nth (iterate (fn [x] (conj x (+ (nth x (- (count x) 1)) (nth x (- (count x) 2))))) [1 1])  (- % 2))","problem":26,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn fib \n  ([n] (take n (fib 1 1)))\n  ([a b] (cons a (lazy-seq (fib b (+ b a))))))","problem":26,"user":"4fe88f78e4b07c9f6fd12c45"},{"code":"#(take % ((fn f [a b]\n           (lazy-seq\n            (cons a (f b (+ a b)))))\n         1 1))","problem":26,"user":"4eb5c8d7535d7eef3080736a"},{"problem":26,"code":"(fn\n  [x]\n  (take x (map first (iterate \n               (fn [[a b]] [b (+ a b)]) [1 1])))\n  )","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [c]\n  (loop [a 1 b 1 s [1 1] c (- c 2)]\n    (if (= 0 c)\n      s\n      (let [n (+ a b)]\n        (recur b n (conj s n) (dec c))))))","problem":26,"user":"4dbdc9da535d020aff1edf4c"},{"problem":26,"code":"#(loop [a [1 1] len %]\n  (if (= (count a) len)\n    a\n    (recur (conj a (+ (nth a (- (count a) 2)) (nth a (- (count a) 1)))) len)))","user":"5508102ee4b021ccfedb96b0"},{"code":"#(letfn [(fib [a b]\n              (lazy-seq\n               (cons a\n                     (fib b (+ a b)))))]\n   (take % (fib 1 1)))","problem":26,"user":"51ad244fe4b09397d510977f"},{"problem":26,"code":"(fn [n] \n  (->> [1 0]\n       (iterate (fn [[fst snd]] [(+ fst snd) fst]))\n       (map first)\n       (take n)))","user":"53ee7f2ee4b0d648e757f4cf"},{"problem":26,"code":"#(take % (map first(iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5964f9b0e4b069c0a1a19778"},{"problem":26,"code":"#(map last (take % (iterate (fn [[x, y]] [y (+ x y)]) [0 1])) )","user":"5d88a22de4b0915913b1d3ab"},{"code":"(fn fib [x]\n  (if (= x 1) '(1)\n  (if (= x 2) '(1 1)\n  (let [a (fib (dec x))] (concat a (list (+ (last a) (last (butlast a)))))))))","problem":26,"user":"4f8b20fce4b02e764a0a5178"},{"problem":26,"code":"(fn take-fib [cnt]\n  (let [fib-fn (fn fib [x y]\n                 (lazy-seq \n                  (cons x (fib y (+ x y)))))]\n    (take cnt (fib-fn 1 1))))","user":"6020365ae4b0bf4ca6b10960"},{"code":"(fn [x] (loop [ s '(1 1) n (- x 2)]\n          (if (zero? n) \n            s\n            (recur (concat s \n                           (list \n                            (+ (last s) (second (reverse s)))\n                            )) (dec n)\n            )\n            )))","problem":26,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":26,"code":"#(reverse\n   (last\n    (take (dec %)\n         (iterate\n          (fn [fib]\n            (conj fib (+ (first fib) (first (rest fib)))))\n          '(1 1)))))","user":"54302691e4b0dad94371f2d7"},{"problem":26,"code":"(fn fib\n  ([till] (prn till) (fib [0 1] (- till 1)))\n  ([coll till] (prn coll till) (if (= till 0) (rest coll) (fib (assoc coll (count coll) (#(+ (last %) (nth % (- (count %) 2))) coll)) (- till 1)) ) ))","user":"53d70f3be4b0e771c302545f"},{"problem":26,"code":"(fn [x] (\n\treduce \n       (fn [acc it] \n        \t(if (< (count acc) 2)\n            \t(conj acc 1)\n              \t(conj acc \n                    (+ \n                \t\t(nth acc \n                        \t (- (count acc) 1)\n                    \t) \n                    \t(nth acc \n                       \t  \t(- (count acc) 2)\n                    \t)\n                     )\n                 )\n            )\n        ) \n       \t[]\n        (range 1 (+ x 1))\n))","user":"5cbdc591e4b026601754ba00"},{"problem":26,"code":"#(loop [lst [1 1]]\n   (let [len (count lst)]\n     (if (>= len %)\n       (seq lst)\n       (recur (conj lst (+ (nth lst (- len 2)) (last lst)))))))","user":"5e066185e4b0978307768fa4"},{"code":"#(reverse (reduce (fn [l _] (conj l (+ (first l) (second l))))\n         '(1 1)\n         (take (- % 2) (repeat 1))))","problem":26,"user":"4e68ed35535d8ccf87e9fe92"},{"problem":26,"code":"#(loop [ct %,ret [],n1 1,n2 0]\n   (if(zero? ct)\n     ret\n     (recur (dec ct) (conj ret n1) (+ n1 n2) n1)))","user":"5d0e58ede4b0cc9c91588254"},{"code":"(fn [x]\r\n  (loop [s [1]]\r\n    (let [size (count s)]\r\n      (cond\r\n        (= x size) (seq s)\r\n        (< size 2) (recur (conj s 1))\r\n        :else (recur (conj s (apply + (take-last 2 s))))\r\n        ))))","problem":26,"user":"506ce637e4b0a302964c5490"},{"problem":26,"code":"(fn [x]\n  (loop [coll [1 1] counter 2]\n    (let [l (last coll) b (nth coll (- counter 2))]\n      (if (= counter x)\n        coll\n        (recur (conj coll (+ l b)) (inc counter))))))","user":"5da306a3e4b000c986472be7"},{"code":"#(reverse (loop [nn % s nil a 0 b 1] \n(if\n  (zero? nn) s\n  (recur (dec nn) (conj s b) b (+ a b))\n)))","problem":26,"user":"4e9b230c535dbda64a6f6b75"},{"problem":26,"code":"(fn [n]\n  (let [next-fib (fn [[f1 f2]] [f2 (+ f1 f2)])\n        fibs (map first (iterate next-fib [1 1]))]\n    (take n fibs)))","user":"5a546344e4b05d388ecb6c27"},{"problem":26,"code":"(fn a[x]\n  (apply \n(fn fib0 [prev current acc n]\n  (if (= n 0) \n    acc\n    (let [pp (+ prev current)]\n    (recur current pp (conj acc pp) (dec n))))) [0 1 [1] (- x 1)]))","user":"55f01316e4b06e875b46ce1a"},{"code":"#(take %\n      ((fn fib\n        [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"5357b241e4b04ce2eb3ed282"},{"problem":26,"code":"(fn [x]\n  (if (<= x 1)\n  (list 1)\n  (loop [n 3 result '(1 1)]\n    (if (> n x)\n      (reverse result)\n      (let [[a b] result]\n        (recur (inc n) (conj result (+ a b))))))))","user":"566ff0a1e4b0a866af6896ec"},{"code":"(fn [x]\n  (take x ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b)))))\n            1 1)))","problem":26,"user":"4ea8570f535d7eef308072f8"},{"code":"(fn fibo [n] (take n ((fn fib [x y] (lazy-seq (cons y (fib y (+ x y))))) 0 1)))","problem":26,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn [n]\n  (reverse\n   (nth (iterate #(cons (apply + (take 2 %)) %) '(1 1))\n        (- n 2))))","problem":26,"user":"50586354e4b06522596eba78"},{"code":"#((fn fib [s lim] \n   (if (= lim 0) \n     s \n     (fib (conj s (+ (first (reverse s)) (first (rest (reverse s))))) (dec lim)))) [1 1] (- % 2))","problem":26,"user":"52401a65e4b0ad64fa010306"},{"code":"#(last (take (dec %) (iterate (fn [a](conj a (apply + (take-last 2 a)))) [1 1])))","problem":26,"user":"532a033be4b09d4e7a9b551f"},{"problem":26,"code":"(fn fibs [X]\n  (loop [i 0\n         l []]\n    (if (= i X)\n      l\n      (recur (inc i) (cond (= i 0) (conj l 1)\n                           (= i 1) (conj l 1)\n                           :else (conj l (apply + (take-last 2 l))))))))","user":"5db4ba2fe4b010eb3c36cd2b"},{"problem":26,"code":"(fn [n] (take n\n              ((fn fib [a b] \n                (lazy-seq (cons a (fib b (+ a b) ) ) )) 1 1)\n              ))","user":"5d70f310e4b04d129b00f2dc"},{"problem":26,"code":"(fn [limit] (seq (last (take (dec limit) (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1])))))","user":"5eedfc62e4b07c55ae4a050e"},{"code":"(fn fibo [n & {:keys [lst a b] \n               :or {lst nil a 0 b 1}}]\n  (let [next-a b\n        next-b (+ a b)]\n    (if (zero? n)\n      (reverse lst)\n      (fibo (- n 1)\n             :lst (cons b lst)\n             :a next-a\n             :b next-b))))","problem":26,"user":"4fc52278e4b081705acca37c"},{"code":"#(map (fn a [x] \n  (cond (= 0 x) 1\n        (= 1 x) 1\n        true (+ (a (- x 1)) (a (- x 2)))))\n(range  %))","problem":26,"user":"4f04165d535dcb61093f6b9c"},{"problem":26,"code":"(fn\n    [n]\n    (loop [N n\n           result '(1 1)]\n       (if (= N 2)\n         (reverse result)\n         (recur (- N 1) (conj result (reduce + (vec (take 2 result))))))))","user":"53d6b266e4b0e771c3025459"},{"problem":26,"code":"(fn [n] (loop [count n a 1 b 1 acc [1]]\n                (if (= 1 count) acc\n                  (recur (dec count) (+ b 0) (+ a b) (conj acc b)))))","user":"58eadeafe4b056aecfd47d28"},{"code":"(fn [x]\n  (loop [f 0 s 1 r [s] n 1]\n    (if (= n x)\n      (list* r)\n      (recur s (+ f s) (conj r (+ f s)) (inc n)))))","problem":26,"user":"4f7e29dde4b06e829148e1ca"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   true (concat\n          (fib (- n 1))\n          (list\n           (+\n            (last (fib (- n 1)))\n            (last (butlast (fib (- n 1)))))))))","user":"5a1e93bee4b0ff51aa4b3270"},{"code":"#(letfn [(f [n a b] (lazy-seq (when (pos? n) (cons a (f (dec n) b (+ a b))))))] (f % 1 1))","problem":26,"user":"4e82f85d535db62dc21a62ce"},{"problem":26,"code":"(fn [x]\n  (loop [acc []\n         counter 0]\n    (cond \n     (= x counter) acc\n     (or (= counter 0) (= counter 1)) (recur (conj acc 1) (inc counter))\n     :else (recur (conj acc (+ (nth acc (- counter 2)) (nth acc (- counter 1)))) (inc counter))\n    )\n  )\n)","user":"5a1fcc82e4b0ff51aa4b3293"},{"problem":26,"code":"(fn [end]\n  (loop [e1 0\n         e2 1\n         i end\n         list []]\n    (if (= i 0)\n      list\n      (recur e2 (+ e1 e2) (dec i) (conj list e2)))))","user":"55ff562fe4b00f4cabc57660"},{"problem":26,"code":"#(map (fn fibn [x] (if (< x 2) 1 (+ (fibn (dec x)) (fibn (- x 2))))) (range %))","user":"5d7a748ce4b02e6b30c93547"},{"code":"(fn [n]\n  (loop [a 0 b 1 n n v []]\n    (if (zero? n)\n      v\n      (recur b (+ a b) (dec n) (conj v b)))))","problem":26,"user":"503a234de4b088a6a14ca76d"},{"problem":26,"code":"(fn [n]\n   (->> (iterate (fn [[x y]]\n                   [y (+ x y)])\n                 [1 1])\n        (map first)\n        (take n)))","user":"5808ee16e4b0a837a8b30d16"},{"code":"(fn [n]\n  (let [fib-step (fn [[a b]]\n                   [b (+ a b)])\n        fib-seq (fn []\n                  (map first (iterate fib-step [1 1])))]\n    (take n (fib-seq))))","problem":26,"user":"50cd0fd5e4b0f7a459302aad"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b] \n                     (cons a (lazy-seq (fib b (+ b a)))))]\n          (take n (fib 1 1))))","user":"4df247b8535d08e6dec9fe25"},{"code":"#(for [i (range %)] (                                                           \n  (fn fib [n]                                                                   \n      (condp = n                                                                             0 1                                                                \n             1 1                                                                             (+ (fib (- n 1)) (fib (- n 2)))                                                 )                                                                  \n      )                                                                         \n  i)                                                                            )","problem":26,"user":"4e7f3891535db966e863cc3b"},{"code":"#(take %1 ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"4f23e1cde4b0d66497709fe4"},{"problem":26,"code":"(fn fibs [n]\n  ;; (fib 3) => (1 1 2)\n  (drop 1 \n        (loop [counter 1\n         fibs [0 1]]\n    (if (<= counter (dec n))\n      (recur (inc counter) (conj fibs (apply + (drop (- (count fibs) 2) fibs))))\n      fibs))))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"#(take % ((fn fib [a b] \n           (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"52e161e8e4b09f7907dd1420"},{"problem":26,"code":"(fn [n]\n  (take n\n  (map first\n  (iterate (fn [[a b]]\n             [b (+ a b)])\n           [1 1]))))","user":"55f90d76e4b03cbcff9738bd"},{"code":"(fn fib [n]\n  (if (< n 3)\n    (list 1 1)\n    (concat (fib (- n 1)) (list (+ (last (fib (- n 1))) (last (fib (- n 2)))\n    )))\n  )\n)","problem":26,"user":"504e2f98e4b0f6ff3350c47e"},{"problem":26,"code":"(fn [n]\n    (if (<= n 1) '(1)\n        (loop [i 2, f '(1 1)]\n            (if (= i n) (reverse f)\n                (recur (inc i) (cons (+ (first f) (second f)) f))\n            ))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [n]\n  (let [next-fib (fn [[f0 f1]] [f1 (+ f0 f1)])\n        fibs (iterate next-fib [0 1])]\n    (take n (map second fibs))))","problem":26,"user":"52487654e4b05ef8e38e63dc"},{"problem":26,"code":"#(take % ((fn fib [a b]\n                 (lazy-seq (cons a (fib b (+ a b)))))\n               1 1))","user":"5f9567cce4b0715f5002d7c7"},{"problem":26,"code":"#(loop [f [1 1]]\n   (if (= (count f) %)\n     f\n     (recur (conj f (+ (second (reverse f))\n                       (last f))))))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":26,"code":"(fn fib\n   ([n] (fib (dec n) [1] 0 1))\n   ([n seq l ll]\n    (if (= n 0)\n      seq\n      (let [next (+ l ll)] (fib (dec n) (conj seq next) ll next)))))","user":"5e980583e4b0157ca96647d5"},{"problem":26,"code":"(fn fibseq [n]\n  (letfn [(fib \n           [n]\n           (if (< n 2) \n             1\n             (+ (fib (- n 1)) (fib (- n 2)))\n             )\n           )]\n    (if (> n 0)\n      (conj (fibseq (dec n)) (fib (dec n)))\n      (vector)\n    )\n  )\n)","user":"55efbb2ae4b066087aa9453c"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 a 1 b 1 ls [] ]\n    (if (= i n)\n      ls\n      (recur (inc i) b (+ a b) (conj ls a))\n      )\n    )\n)","user":"5581a6dae4b05c286339e0fe"},{"problem":26,"code":"(partial #(if (> %3 1)\n            (recur %2 (conj (map + (conj % 0) %2) 1) (dec %3))\n            %2) () '(1))","user":"56bf4ac0e4b0f26550335985"},{"problem":26,"code":"#(loop [fib []\n        prev 0\n        cur 1\n        a %]\n   (if (= a 1)\n     (concat `(1) fib)\n     (let [nextFib (+ prev cur)] \n       (recur (conj fib nextFib) cur nextFib (dec a)))))","user":"558fb218e4b0277789237665"},{"problem":26,"code":"(fn [v] (->> [1 1]\n             (iterate (fn [[a b]] [b (+ a b)]))\n             (map first)\n             (take v)))","user":"58f3c18ee4b0438e51c2cead"},{"problem":26,"code":"(fn [x]\n(loop [f1 0\n       f2 1\n       n x\n       r '(1)]\n  (if (> n 1)\n    (recur f2 (+ f1 f2) (dec n) (conj r (+ f1 f2)))\n    (reverse r)))\n)","user":"5537c1c4e4b09218d5f44fd0"},{"code":"(fn [n]\n  (letfn [(fib [i]\n            (if (>= 2 i)\n              1\n              (+ (fib (dec i)) (fib (- i 2)))))]\n    (map fib (take n (iterate #(inc %) 1)))))","problem":26,"user":"4fbcbd50e4b081705acca2f9"},{"code":"#(loop [r '(1 1) n (- % 2)]\n  (if (zero? n)\n    r\n    (recur (concat\n            r\n            [(+ (first (take-last 2 r)) (last r))]) (dec n))))","problem":26,"user":"539cb777e4b0b51d73faaf30"},{"problem":26,"code":"(fn my-fib\n  ([target] (if (< target 2)\n                1\n                (cons 1 (my-fib target 2 0 1))))\n  ([target pos x y]\n    (if (= target pos)\n        [(+ x y)]\n        (cons (+ x y) (my-fib target (inc pos) y (+ x y))))))","user":"5b15811ee4b0cc2b61a3be6f"},{"code":"(fn [num]\n  (map #(% 0) (take num\n    (iterate (fn [[p1 p2]] [p2 (+ p1 p2)]) [1 1]))))","problem":26,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":26,"code":"#(loop [n-1 0\n       n+1 1\n       p %\n       l []]\n  (if (zero? p)\n    l\n    (recur n+1 (+ n-1 n+1) (dec p) (conj l n+1))))","user":"5ea444b7e4b00a66d4a951a0"},{"problem":26,"code":"(fn\n  [n]\n  (loop [s (range 0 n)\n         result []]\n    (if (empty? s)\n      result\n      (recur (rest s)\n             (cond\n               (empty? result) [1]\n               (= 1 (count result)) [1 1]\n               :else (conj result (apply + (take-last 2 result))))))))","user":"6086abade4b0736b099e42ff"},{"problem":26,"code":"(fn [n]\n  (loop [x1 1 \n         x2 1 \n         n n\n         s [1 1]]\n    (if (< n 3)\n      s\n      (recur x2 (+ x1 x2) (dec n) (conj s (+ x1 x2))))))","user":"5de0b844e4b0948ae9d9adea"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1)\n    [1]\n    (let [s (fib (dec x))]\n      (conj s (reduce + (take-last 2 s))))))","user":"554b425ce4b0a04f79299581"},{"code":"#(for [x (range %)] ( (fn fib [a] \n\t(\n\t\tif (= 0 a) \n\t\t\t1 \n\t\t\t(if (= 1 a) \n\t\t\t\t1 \n\t\t\t\t( + \n\t\t\t\t\t(fib (- a 1))\n\t\t \t\t\t(fib (- a 2)) \n\t\t\t\t) \n\t\t\t)\n\t\t)\n\t)\nx) )","problem":26,"user":"510e3640e4b07438aa32145a"},{"problem":26,"code":"#(map (fn fib [n] (case n\n                   0 1\n                   1 1\n                   (+ (fib (- n 2)) (fib (- n 1)))\n                   )\n        )\n      (range %))","user":"59613e4ce4b066ee0a44b09b"},{"problem":26,"code":"#(take % ((fn f [a b] (cons a (lazy-seq (f b (+ b a)))))1 1 ))","user":"55a127f4e4b0acc240e3150c"},{"code":"(fn fib [x]\n  ((fn helper [a b count]\n    (if (= count x)\n      [a]\n      (cons a (helper b (+ a b) (+ count 1))))) 1 1 1))","problem":26,"user":"4faa5f61e4b081705acca1f0"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","user":"54cc4156e4b057c6fda3a28c"},{"code":"#(map (fn fib [n] (if(< n 2)(identity n) (+ (fib (- n 2)) (fib (- n 1))))) (range 1 (inc %)))","problem":26,"user":"527a8eb7e4b03e8d9a4a755f"},{"code":"(fn[x] (take x\n             ((fn fib [a, b] \n                       (cons a (lazy-seq (fib b (+ a b)))\n                             \n                        ))1 1)))","problem":26,"user":"53566247e4b04ce2eb3ed266"},{"problem":26,"code":"#(loop[ans [1 1] c 1]\n    (if (> c (- % 2))\n      (lazy-seq ans)\n      (recur (conj ans \n        (+ (ans c) (ans (- c 1)))\n      ) (inc c))))","user":"5b0c21fbe4b0cc2b61a3bde3"},{"code":"#(loop [c 0 l % prev 1 cur 1 fib [1 1]]\n  (if (= c (- l 2))\n    fib\n    (recur (inc c) l cur (+ prev cur) (conj fib (+ prev cur)))))","problem":26,"user":"506e9464e4b09350ab4199f0"},{"code":"#(map first (take % (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4eab612d535d7eef30807316"},{"problem":26,"code":"(fn [n]\n  ( take n ( map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n)","user":"5f58db95e4b0a0bc16850a9a"},{"code":"#(loop [acc %1 n ( dec %2)] \n     (\n       if (zero? n) \n       acc \n       (recur (conj acc ( reduce + (take-last 2 acc)))(dec n))\n       )\n     ) [1]","problem":26,"user":"52d66ca0e4b09f7907dd135c"},{"problem":26,"code":"#(->> (iterate (fn [[a b]] [(+ a b) a]) [1 0]) (take %) (map first))","user":"547d66a1e4b0c51c1f4d72f2"},{"code":"(fn [n]\n    (cond\n     (= n 1) '(1)\n     (= n 2) '(1 1)\n     :else\n     (reverse\n      (loop [i (- n 2) acc '(1 1)]\n      (if (<= i 0)\n\t\tacc\n\t      (recur (- i 1) (conj acc (+ (first acc) (second acc)))))))))","problem":26,"user":"4f1569bb535d64f603146441"},{"code":"; Bad algorithm, I know :)\n(fn fibs[x]\n  (letfn [(fib[x]\n    (cond (>= 0 x) 0\n        (= 1 x) 1\n        :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (take x (map fib (iterate inc 1)))))","problem":26,"user":"52f10094e4b05e3f0be25ee8"},{"problem":26,"code":"(fn [n]\n    (let [fib (fn fib [x y]\n                (lazy-cat [x] (fib y (+ x y))))]\n      (take n (fib 1 1))))","user":"53dcdde4e4b0d874e779ae24"},{"problem":26,"code":"#(loop [acc [1 1]]\n    (if (> (count acc) %1)\n      (take %1 acc)\n      (recur (conj acc (reduce + (take-last 2 acc))))))","user":"59032c0fe4b022d14a2aaf9f"},{"problem":26,"code":"(fn fib [number]\n  (reduce\n    (fn [coll idx]\n      (conj coll\n            (+\n              (or (get coll (- idx 1)) 1)\n              (or (get coll (- idx 2)) 0)\n              )\n            )\n      )\n    []\n    (range number)\n    )\n  )","user":"5da975b9e4b000c986472c32"},{"problem":26,"code":"#( take % ((fn _fib [x y] \n  (cons x (lazy-seq (_fib y (+ x y))))) 1 1))","user":"58840023e4b0f1effa3b768b"},{"problem":26,"code":"(fn [x]\n   (loop [cnt 0 res [0 1]]\n     (if (< cnt (dec x))\n       (recur (inc cnt)\n         (conj res\n           (+ (first (reverse res)) (first (rest (reverse res))))\n           )\n         )\n       (rest res)\n       )\n     )\n\n   )","user":"55d42f78e4b0e31453f64a73"},{"code":"#(loop [elements [] firstnum 1 secondnum 0]\r\n  (if (< (count elements) %)\r\n    (recur (conj elements firstnum) (+ firstnum secondnum) firstnum)\r\n    elements))","problem":26,"user":"502ac868e4b0614b5299611a"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 1 res []]\n    (if (> i n) res\n      (recur\n        (inc i)\n        (conj res\n          (if (<= i 2) 1\n            (reduce + (take-last 2 res))))))))","user":"59fa7fb0e4b0ca45a743a366"},{"code":"#(loop [n % a [1 1]] (if (< n 3) (reverse a) (recur (dec n) (cons (+ (first a) (nth a 1)) a))))","problem":26,"user":"4efb87f7535dced4c769f279"},{"problem":26,"code":"(fn[n]\n  (loop [acc [0 1]]\n    (if (> (count acc) n)\n      (rest acc)\n      (recur (conj acc (+ (nth acc (- (count acc) 1)) (nth acc (- (count acc) 2))))))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":26,"code":"(fn [n] \n  (if (< n 1) \n    [] \n    (loop [fib 1 result [1]] \n      (if (= (count result) n) \n        result\n        (recur \n         (+ (last result) fib) \n         (conj result fib))))))","user":"56351709e4b0bfe05bf117c2"},{"problem":26,"code":"(fn [n]\n  (reverse\n    ((fn [i n pp p l]\n      (if (= i n) l\n        (recur (inc i) \n          n\n          p\n          (+ pp p)\n          (cons (+ pp p) l))))\n     2 n 1 1 '(1 1))))","user":"5981d03ae4b021a7a535fdf0"},{"code":"(fn fib [cnt] \n  (cond (= cnt 1) [1] \n        (= cnt 2) [1 1] \n        :else (conj (fib (- cnt 1)) (+ (last (fib (- cnt 1))) (last (fib (- cnt 2)))))))","problem":26,"user":"536673a8e4b0243289761e76"},{"problem":26,"code":"(fn [n]\n  (take n\n   ((fn fib\n      ([] (fib 1 1))\n      ([a b]\n       (lazy-seq (cons a (fib b (+ a b)))))))))","user":"5adf5f9be4b0837691e92c33"},{"code":"(fn fib \n  ([n]\n   (fib [1 1] n))\n  ([x, n]\n   (if (< (count x) n)\n     (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n     x)))","problem":26,"user":"5367ca98e4b0243289761e86"},{"code":"(fn [x] \n  (take x ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))\n)","problem":26,"user":"4db653f6535d1e037afb217c"},{"problem":26,"code":"#(take % ((fn fib [x y] (lazy-seq (cons y (fib y (+ x y))))) 0 1))","user":"583a360de4b089d5ab817d4f"},{"problem":26,"code":"#(map (fn fib [x]\n     (cond \n      (= x 1) 1\n      (= x 2) 1\n      :else (+ (fib (dec x)) (fib (- x 2)))\n       ))\n(range 1 (inc %)))","user":"55b08677e4b002ce9d5cbc23"},{"code":"(fn [n]\n  (loop [a 1\n         b 1\n         l [a b]\n         n (- n 2)]\n    (if (pos? n)\n      (recur b (+ a b) (conj l (+ a b)) (dec n))\n      l)))","problem":26,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":26,"code":"(fn fibs [n]\n  (if (< n 3)\n    (repeat n 1)\n   \t(let [f (fibs (dec n))]\n      (concat f [(reduce + (take-last 2 f))]))))","user":"53a9db09e4b047364c04443b"},{"problem":26,"code":"#(loop [fib [1 1] number 2]\n  (if (>= number %)\n    fib\n    (recur (conj fib (+ (last fib) (nth fib (- number 2)))) (inc number))))","user":"5c0a87e6e4b0bdcf453d1707"},{"code":"#(nth (take % (iterate (fn [s] (conj s (+ (peek s) (peek (pop s))))) [1 1])) (- % 2))","problem":26,"user":"523bde95e4b07becd5be2202"},{"problem":26,"code":"#(loop [n %\n        fib '(1 1)]\n   (if (= n 2)\n     (reverse fib)\n     (recur (dec n) (conj fib (+ (first fib) (second fib))))))","user":"55dbc7cde4b050e68259b3a4"},{"code":"(fn [x]\n  (take x\n    (map\n      first\n      (iterate\n        (fn [[a b]]\n          [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4f4c4fdde4b03ad3f0c10c8b"},{"problem":26,"code":"(fn [n]\n\t\t(if (= n 1)\n\t\t\t1\n\t\t\t(if (= n 2)\n\t\t\t\t1\n\t\t\t\t(loop [tmpn (- n 2) lst [1 1]]\n\t\t\t\t\t(if (= tmpn 0)\n\t\t\t\t\t\tlst\n\t\t\t\t\t\t(recur (dec tmpn) (conj lst (+ (last lst) (last (butlast lst))))))))))","user":"59368ccae4b02506e01a2979"},{"problem":26,"code":"#(rest (reduce (fn [a b] (conj a (if (< b 2) 1 (+ (last (butlast a)) (last a))) ) ) [0] (range %)))","user":"58bdead0e4b0888cdc949d3e"},{"problem":26,"code":"(fn [n]\n  (loop [cn 2, f1 1, f2 1 result [1 1]]\n    (if (= cn n) \n      result\n      (recur (+ cn 1) f2 (+ f1 f2) (conj result (+ f1 f2)))\n    )\n  )\n)","user":"5cd1fd2fe4b0ccb0619628f8"},{"problem":26,"code":"(fn [times] \n  (loop [x [1 1]]\n    (if (= times (count x))\n      (reverse x)\n      (recur (cons (+ (first x) (second x)) x)))))","user":"54051338e4b0addc1aec6662"},{"code":"#((fn [a b n v] (if (= n 0) v (recur b (+ a b) (dec n) (conj v a)))) 1 1 % [])","problem":26,"user":"51cc6680e4b02254fc794872"},{"code":"#(map (fn fib [x] (if (= 0 x) 0 (if (= 1 x) 1 (if (= 2 x) 1 (+ (fib (dec x)) (fib (dec (dec x)))))))) (rest (range (inc %))))","problem":26,"user":"4ecf1f51535d1f5ad70dba3a"},{"code":"#(loop [a 1 b 1 n % l []]\r\n  (if (= n 0)\r\n      l\r\n      (recur b (+ a b) (dec n) (conj l a))\r\n  )\r\n)","problem":26,"user":"4ee1220b535d10e5ff6f5354"},{"problem":26,"code":"(fn first-n-fib [n]\n  (letfn [(lazy-fib-seq\n           ([] (concat [1 1] (lazy-fib-seq 1N 1N)))\n           ([a b]\n            (let [n (+ a b)]\n              (lazy-seq \n               (cons n (lazy-fib-seq b n))))))]\n    (take n (lazy-fib-seq))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":26,"code":"(fn [x]\n  (loop [n 0 acc '()]\n    (if (= n x)\n      acc\n      (cond\n    \t(and (= (first acc) 1 ) (= (second acc) 1)) (recur (inc n) (concat acc [(+ (last acc) (second (reverse acc)))]))\n    \t(= (first acc) 1) (recur (inc n) (concat [1] acc))\n    \t:else (recur (inc n) (concat [1] acc))))))","user":"5dcbd629e4b02b31cc3da3bd"},{"code":"(fn fibb [n] (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"5376f0d0e4b06839e8705e2c"},{"code":"(fn [n]\n  (letfn [(lazy-fib ([]\n                      (concat [1 1] (lazy-fib 1 1)))\n            ([n2 n1]\n              (lazy-seq\n                (cons (+ n2 n1) (lazy-fib n1 (+ n2 n1))))))\n          ]\n    (take n (lazy-fib))))","problem":26,"user":"4ef4acf8535dced4c769f23c"},{"code":"(fn [x] (loop [accum []\n             i 1]\n        (if (> i x)\n          accum\n          (if (< i 3)\n            (recur (conj accum 1) (inc i))\n            (recur (conj accum (+ \n                                (nth accum (- (count accum) 1))\n                                (nth accum (- (count accum) 2))\n                                )) (inc i))))))","problem":26,"user":"5311081be4b08068f379ece3"},{"code":"(fn [n]\n  (loop [n n\n         a 0\n         b 1\n         accum []]\n    (if (zero? n) accum\n        (recur (dec n) b (+ a b) (conj accum b)))))","problem":26,"user":"4f9acea6e4b0dcca54ed6d10"},{"code":"(fn fib\n  ([n] (fib (- n 2) [1 1] 1))\n  ([n p lp]\n    (if (= n 0)\n      p\n      (let [prev (last p) next (+ prev lp)]\n        (fib (dec n) (conj p next) prev)))))","problem":26,"user":"4ff201d7e4b0678c553fc330"},{"problem":26,"code":"(fn fib [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n   \t:else (let [prev (fib (dec n))]\n            (let [n-1 (last prev),\n                  n-2 (last (butlast prev))]\n              (conj prev (+ n-1 n-2))))))","user":"57c45e64e4b05aa3c4741ccf"},{"problem":26,"code":"#(loop [i % n 1 new [1] ]\n   (if (> i 0)\n     (recur (dec i) (reduce + new) (conj new n))\n     (rest new)))","user":"57e3f709e4b0bfb2137f5aaf"},{"problem":26,"code":"(fn [x] (loop [acc [1 1] n (- x 2)] (if (zero? n) (seq  acc) (recur (conj acc (reduce + (take-last 2 acc))) (dec n)))))","user":"5a9aad01e4b0d174b936c7c0"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    '[1]\n    (if (= n 2)\n      '[1 1]\n      (conj (fib (dec n)) (apply + (take-last 2 (fib (dec n)))))\n    )\n  )\n)","user":"55ead489e4b0121d4835fdb6"},{"problem":26,"code":"(fn fib [n]\n  (loop [acc [1 1]]\n    (if (= (count acc) n)\n      (apply list acc)\n      (recur (conj acc (+ (last acc) (last (pop acc)) ))))))","user":"5f2e6d97e4b033932238a677"},{"code":"(fn fibonacci [n]\n  (loop [coll [1 1], n n, c (count coll)]\n    (if (<= n (count coll))\n      coll\n      (recur \n        (conj coll (+ (last coll) (last (pop coll))))\n        n\n        (count coll)))))","problem":26,"user":"4f159ea6535d64f603146445"},{"code":"(fn [n]\n  (loop [i 1 v []]\n    (if (<= i n)\n      (recur (inc i) (conj v (if (<= i 2) 1 (reduce + (take-last 2 v)))))\n      v)))","problem":26,"user":"4f038ed6535dcb61093f6b24"},{"code":"(fn [x]\n  (letfn [(fib [x]\n            (let [[x1 x2] x]\n              [x2 (+ x1 x2)]))]\n  (map first (take x (iterate fib [1 1])))))","problem":26,"user":"4e9c4e02535dbda64a6f6b7e"},{"code":"(fn [n] (loop [n n\n               f [1 1]]\n          (if (= n 2)\n            f\n            (recur (dec n) (conj f (+ (last f)(last (butlast f)) ))))))","problem":26,"user":"50f69a3ce4b0035e89151844"},{"problem":26,"code":"(fn fib [x]\n  (loop [seqq [1 1]\n         idx x]\n    (if (> idx 2)\n      (recur (conj seqq\n                   (+\n                    (get seqq (- (count seqq) 2))\n                    (get seqq (- (count seqq) 1))))\n             (dec idx))\n      seqq)))","user":"59971e2de4b07157cc8daacc"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (\n        conj\n        (fib (dec n))\n        (reduce + (take 2 (reverse (fib (dec n)))))\n      )\n    )\n  )\n)","user":"55f014ebe4b06e875b46ce1b"},{"code":"#(loop [v 0\r\n         x 1\r\n         r []]\r\n    (if (> (count r) %)\r\n      (rest r)\r\n      (recur (+ v x) v (conj r v))))","problem":26,"user":"4f82ed48e4b033992c121c0e"},{"problem":26,"code":"(fn [n]\n  (loop [index n\n         numbers [1 1]]\n    (if (> 3 index)\n      numbers\n      (recur (dec index)\n             (conj numbers (reduce + (take-last 2 numbers)))))))","user":"54b576cfe4b05787c3b163a5"},{"problem":26,"code":"(fn  [count]\n\n  (map last (take count (iterate\n\n                          (fn [[a b]]\n                            [b (+ a b)]\n\n                            )\n                          [0 1]\n\n                          )))\n\n\n  )","user":"53b0750fe4b047364c044483"},{"code":"(fn [count] (take count '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4fb91026e4b081705acca2d9"},{"code":"(fn fib [a b n] (if (> n 0) (cons a (fib b (+ a b) (- n 1))))) 1 1","problem":26,"user":"4e8de3a2535d65386fec213d"},{"problem":26,"code":"(fn [n]\n   (if (= n 1)\n     '(1)\n     (if (= n 2)\n       '(1 1)\n       (loop [i 3 fir 1 sec 1 ans '(1 1)]\n         (if (> i n)\n           (reverse ans)\n           (recur (inc i) (+ fir sec) fir (conj ans (+ fir sec)) )\n           )\n         )\n       )\n     )\n   )","user":"5fd361f2e4b07e53c2f3f04e"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        (map second\n             (iterate (fn [[a b]] [b (+ a b)])\n                      [0 1]))))","user":"553698fae4b09218d5f44fc0"},{"code":"(fn[n] \n  (take n \n        (map first (iterate (fn [[a b]]  [b (+ a b)]) [1 1]))))","problem":26,"user":"52430d3ce4b076204b44faa5"},{"problem":26,"code":"#(loop [fibonacci []\n        x 0\n        y 1\n        index 0]\n   (if (= index %)\n     fibonacci\n     (recur (conj fibonacci y) y (+ x y) (inc index))))","user":"5605007ae4b08b23635d315e"},{"code":"(fn [n] (loop [n n a 0 b 1 xs [1]]\n  (if (<= n 1) xs\n(let [c (+ a b)]\n(recur (dec n) b c (conj xs c))))))","problem":26,"user":"4e7e55ab535db169f9c79711"},{"problem":26,"code":"(fn [x] (map (fn f [n]\n        (cond\n         (= 1 n) 1\n         (= 2 n) 1\n         :else (+ (f (- n 1))\n                  (f (- n 2)))))\n     (range 1 (inc x))))","user":"54ab951be4b09f271ff37ccc"},{"code":"(fn [l] \n  (loop [accum [1 1] left (- l 2)]\n    (if (<= left 0) accum\n      (recur (conj accum (reduce + 0 (take-last 2 accum))) (dec left)))))","problem":26,"user":"502bb7c0e4b0194ad32ea1a3"},{"problem":26,"code":"(fn [n]\n  (let [x (conj (map #(last %) (iterate #(vector (last %) (+ (first %) (last %))) [1 1])) 1)]\n    (take n x)))","user":"58303fc3e4b051871117c006"},{"problem":26,"code":"#(take %1 ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))","user":"5430a16de4b0dad94371f2da"},{"problem":26,"code":"(fn [z] (for [num (range z)] ((fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) num)))","user":"55249337e4b0882d96d091c3"},{"problem":26,"code":"(fn fib\n  [x]\n  (loop [p 1\n         n 1\n         acc []\n         cnt 0]\n    (if (= cnt x)\n      (seq acc)\n      (recur n (+ p n) (conj acc p) (inc cnt)))))","user":"542d5fa9e4b0dad94371f2b5"},{"problem":26,"code":"(fn fiblist\n  [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        (> n 2) (loop [n n\n                       col [1 1]]\n                  (if (= n 2) col\n                      (recur (dec n) (conj col (apply + (take-last 2 col))))))))","user":"5a09f35fe4b0eab8c0448934"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fibonacci [x y] \n               (cons x \n                     (lazy-seq \n                      (fibonacci y (+ x y))))) 1 1)))","user":"5ea3711ae4b00a66d4a9519d"},{"code":"(fn philfib ([x] (cond\n                      (= x 0) '()\n                      (= x 1) '(1)\n                      (= x 2) '(1 1)\n                      :else (reverse (philfib '(1 1) (- x 2)))))\n        ([x y] (cond\n                (= y 0) x\n                :else (philfib\n                       (conj x\n                             (+ (first x) (first (rest x))))\n                       (- y 1)))))","problem":26,"user":"4f524d11e4b03ad3f0c10d34"},{"problem":26,"code":"#(loop [n (- % 2)\n        res [1 1]]\n   (if (> n 0)\n     (recur (- n 1) (conj res (+ (second (reverse res)) (last res))))\n     res))","user":"541b37d2e4b01498b1a71a64"},{"problem":26,"code":"(fn [n] (loop [fibo [1 1]]\n          (if (= (count fibo) n)\n            fibo\n          \t(recur (conj fibo (apply + (take-last 2 fibo)))))))","user":"5c33bdf3e4b0d62ef62d9f49"},{"code":"#(reverse\r\n  (loop [r '() x %]\r\n    (cond\r\n     (<= x 0)\r\n     r\r\n     (empty? r)\r\n     (recur '(1) (dec x))\r\n     (empty? (rest r))\r\n     (recur '(1 1) (dec x))\r\n     :otherwise\r\n     (recur\r\n      (cons (+ (first r) (second r)) r)\r\n      (dec x)))))","problem":26,"user":"508b95a0e4b0be79e5b189c6"},{"problem":26,"code":"#(take % (map second (iterate (fn [[n1 n2]]\n                                [n2 (+ n1 n2)])\n                              [0 1])))","user":"5707abfce4b0b0fb43fd068d"},{"problem":26,"code":"(fn fibo [n] \n  (if (= n 1) \n    [1] \n    (conj \n     (fibo (dec n)) \n     (if (= n 1) \n       [] \n       (if (= n 2) \n         1 \n         (+ (last (fibo (dec n))) (last (fibo (- n 2))))\n       )\n     )\n    )\n  )\n)","user":"5e69589de4b04a83ad7cd26d"},{"problem":26,"code":"(fn fib\n  [X]\n  (loop [i X out [1] prev 0]\n    (if (= 1 i)\n    out\n    (recur (dec i) (conj out (+ (last out) prev)) (last out) ))))","user":"53de4bdae4b0d874e779ae32"},{"problem":26,"code":"(fn [x] \n  (loop [r [1 1], i 1]\n    (if (= (inc i) x)\n      r\n      (recur (conj r (+ (nth r (dec i)) (nth r i))) (inc i)))))","user":"539ddf25e4b0b51d73faaf3e"},{"problem":26,"code":"(fn [n]\n        (loop [i 0\n               res []]\n           (if (= i n)\n             res\n             (if (or (= i 0) (= i 1))\n               (recur (+ i 1) (conj res 1))\n               (recur (+ i 1) (conj res (+ (nth res (- i 1)) (nth res (- i 2))) ) )\n             )\n           )\n             \n         )\n)","user":"59333f35e4b072a2710fd04c"},{"problem":26,"code":"(fn [n] (reverse ((fn fibo [num]\n    (if (>= num 3)\n      (let [res (fibo (dec num))]\n        (into [(+ (first res) (first (rest res)))] res))\n      (if (= num 2)\n        [1 1]\n        [1])\n      )\n    ) n)))","user":"5d88c6a3e4b0915913b1d3ad"},{"problem":26,"code":"#(map (fn fib \n  ([c] (fib c 0 1))\n  ([c n m]\n  (if (= 0 c) m (fib (dec c) m (+ n m))))) (range %))","user":"54cbc9ede4b057c6fda3a27f"},{"code":"(fn [v]\n  (let [sum_last_two (fn [l] (+(first (reverse l)) (first (rest (reverse l)))))\n        aux (fn this [v l]\n              (cond (= v 1) [1]\n                    (= v 2) [1 1]\n                    :else (let [new_l (this (dec v) l)]\n                            (conj new_l (sum_last_two new_l)))))]\n    (aux v [])))","problem":26,"user":"51e6a2bce4b0ab43cc26c21d"},{"problem":26,"code":"(fn [x]\n  (map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib(- n 1)) (fib (- n 2))))))\n       (range 1 (+ x 1))))","user":"5f7fece9e4b0c071e6c840e3"},{"problem":26,"code":"(fn [n]\n  (if (<= n 1)\n    [1]\n    (loop [total [1]\n           prev 0]\n      (if (= (count total) n)\n          total\n          (recur\n            (conj total (+ (last total) prev))\n            (last total))))))","user":"5d13af73e4b0902706380dbe"},{"problem":26,"code":"(fn [n] (loop [i 2 acc [1 1] a 1 b 1] (if (= i n) acc (recur (inc i) (conj acc (+ a b)) b (+ a b)))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn [n]\n  (map (fn fib [n]\n         (loop [n n]\n           (condp = n\n             0 1\n             1 1\n             (+ (fib (- n 1)) (fib (- n 2))))))\n       (range n)))","problem":26,"user":"4fe9ea87e4b0547ebccb2476"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         fs '(1 1)]\n    (if (< i n) (recur (+ i 1) (conj fs (+ (first fs) (second fs)))) (reverse fs))))","user":"558bb38fe4b0277789237631"},{"code":"(fn [i]\n  (loop [i i, n 1 r '(1)]\n    (if (= i 1)\n      (reverse r)\n      (recur (dec i) (+ n (first r)) (conj r n)))))","problem":26,"user":"51fa9425e4b0f1313d4689e3"},{"code":"(fn fib \n  ([x] (fib [1 1] x))\n  ([f x]\n   (if (< (count f) x)\n     (fib (conj f (+ (first (reverse f)) (second (reverse f)))) x)\n     f)))","problem":26,"user":"516e9d9be4b06aac486e5b2b"},{"problem":26,"code":"#(map (fn fib [n] \n        (if (<= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2)))))\n      ((fn listify-n [n l]\n         (if (< n 1)\n           l\n           (listify-n (dec n) (conj l n))))\n       %1 '()))","user":"51b0eca4e4b0c53cf2e68a6f"},{"code":"(fn [x]\n    (loop [n 0 l []]\n      (if (= n x)\n        l\n        (if (<= n 1)\n          (if (= n 1)\n            (recur (inc n) [1 1])\n            (recur (inc n) [1]))\n          (recur (inc n) \n                 (conj l \n                       (apply + \n                              (drop (- (count l) 2) l)\n                              )\n                       ))\n          )\n        )\n      )\n    )","problem":26,"user":"4e94a8b5535dbda64a6f6b16"},{"code":"(fn [n]\n  (rest (take (inc n) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4f038bcd535dcb61093f6b1d"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         acc [1 1]\n         current 1\n         prev 1]\n    (cond\n      (= n 1) 1\n      (= n 2) acc\n      :else (recur (dec n)\n                   (conj acc (+ current prev))\n                   (+ current prev)\n                   current))))","user":"5600dccee4b04bb52996e175"},{"problem":26,"code":"(fn [n] (take n (map second (iterate (fn fib-seq [[a b]] [b (+ a b )]) [0 1]))))","user":"53b615cce4b047364c0444c2"},{"problem":26,"code":"(fn [x]\n  (cond\n   (= x 1) [1]\n   (= x 2) [1 1]\n   :else\n   (loop [i 2 s [1 1]]\n     (if (= i x)\n       s\n       (recur (inc i) (conj s (+ (nth s (- i 1)) (nth s (- i 2)))))))))","user":"53bbae20e4b047364c044509"},{"problem":26,"code":"#((fn first-n-fibs [q n] (if (= n 0) q (first-n-fibs (conj q ((fn nthfib [n] (if (or (= n 1) (= n 2)) 1 (+ (nthfib (- n 1)) (nthfib (- n 2))))) n)) (- n 1)))) '() %)","user":"5f79cb16e4b02876ed9fd0cb"},{"problem":26,"code":"#(loop\n [left %, fib [1], value 0]\n  \n  (if (= 1 left) \n    fib\n    (recur (dec left) (conj fib (+ (last fib) value)) (last fib)) \n  )\n \n )","user":"5e79fcb9e4b085ba37836e08"},{"problem":26,"code":"(fn [n] (map second (take n (iterate (fn [a][(a 1) (+ (a 0)(a 1))]) [0 1]))))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn [n] (if (= n 1 )\n                  '(1)\n                  (do\n                      (dec n)\n                      (loop [x 1 myvec '(1 1)]\n                            (if (= x (dec n))\n                              (reverse myvec)\n                            (recur(inc x) (conj myvec (+ (first myvec) (second myvec)))))))))","problem":26,"user":"52ecd34ee4b0705949c44457"},{"problem":26,"code":"(fn [i] (map (fn fib [n] (if (<= n 2) 1 (+ (-> n dec fib) (-> n dec dec fib)))) (range 1 (inc  i))))","user":"5967ce67e4b069c0a1a197bf"},{"problem":26,"code":"#(map (fn fib [x]\n\n  (if (or (= x 1) (= x 0))\n    1\n    (+ (fib (dec x)) (fib (- x 2))))\n) (range %1))","user":"574a546ee4b02ea1147991f6"},{"problem":26,"code":"(fn [n] (take n \n  ((fn f [a b]\n    (lazy-seq (cons b (f b (+ a b))))\n    ) 0 1)))","user":"5b3b70c6e4b02d533a91bbd4"},{"problem":26,"code":"(fn fibo\n  ([n lst]\n   (if (pos? n)\n     (fibo (dec n) (cons (+ (first lst)(second lst)) lst))\n     (reverse lst)\n     ))\n  ([n]\n   (if (= n 1) '(1)\n     (if (= n 2) '(1 1)\n       (fibo (- n 2) '(1 1))))))","user":"56dc3dbbe4b0ea9b8538f81a"},{"problem":26,"code":"(fn [n] (take n ((fn fb [] (lazy-cat [1 1] (map + (fb) (rest (fb))))))))","user":"53b4bddae4b047364c0444b9"},{"problem":26,"code":"(fn [n] (loop [c (- n 2) xs [1 1]] (if (= c 0) xs (recur (dec c) (conj xs (+ (nth xs (- (count xs) 1)) (nth xs (- (count xs) 2) )))))))","user":"5b2e6b02e4b025bcb146f2d3"},{"problem":26,"code":"#(loop [fir 1 sec 1 sq [] end %]\n   (if (> end 0)\n     (recur sec (+ fir sec) (conj sq fir) (dec end))\n     sq))","user":"5cb351b7e4b026601754b8f9"},{"code":"(fn [n]\n  (loop [acc [], n1 0N, n2 1N, i 0N]\n    (if (= n i)\n      acc\n      (recur (conj acc n2) n2 (+ n1 n2) (inc i)))))","problem":26,"user":"527dc2aee4b0757a1b17138d"},{"code":"#(loop [prev 0 \n       curr 1 \n       res '()]\n  (if (>= (count res) %) \n    res \n    (recur curr (+ prev curr) (concat res (list curr)))))","problem":26,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn [x] (reverse\n    (reduce #(or (conj % (apply + (take 2 %))) %2)\n     '(1 1) (range 2 x))))","problem":26,"user":"501d52a8e4b066e56b9d0b20"},{"problem":26,"code":"(fn [n]\n  (loop [c '(1 1) n (- n 2)]\n    (if (zero? n)\n      (reverse c)\n      (recur (conj c (+ (first c) (second c))) (dec n)))))","user":"5e7128eee4b085ba37836db5"},{"problem":26,"code":"(fn [until] (loop [fib-numbers []]\n              (if (= (count fib-numbers) until)\n                fib-numbers\n              (if (< (count fib-numbers) 2)\n                (recur (conj fib-numbers 1))\n                (recur (conj fib-numbers (reduce + (take-last 2 fib-numbers))))))))","user":"549a1234e4b0f3d1d8e70f68"},{"code":"(fn [x] (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))] (take x (fib 1 1))))","problem":26,"user":"5209cb44e4b0e152394d7702"},{"code":"(fn fibonacci [num]\n  (letfn [(create-pairs [[a b]] [b (+ a b)])]\n    (rest (map first (take (+ 1 num) (iterate create-pairs [0 1]))))))","problem":26,"user":"4e95a440535dbda64a6f6b37"},{"problem":26,"code":"#(take %\n       ((fn fib\n         ([] (fib 1 1))\n         ([a b] (cons a (lazy-seq (fib b (+ a b))))))))","user":"5f1af439e4b0f565ad998257"},{"problem":26,"code":"(fn [n]\r\n  (take n (map last\r\n    (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"555bd27ae4b0b056612e2244"},{"problem":26,"code":"(fn f [a b n]\n  (if (pos? n)\n    (lazy-seq (cons a (f b (+ a b) (dec n)))))) 1 1","user":"56102f50e4b05f002753df6b"},{"code":"#(take % ((fn fib[a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))","problem":26,"user":"4f148418535d64f60314643a"},{"problem":26,"code":"#(loop [l [0 1] n (dec %)] (if (> n 0) (recur (conj l (+ (first (reverse l)) (second (reverse l)))) (dec n)) (rest l)))","user":"5406776fe4b0addc1aec66a0"},{"problem":26,"code":"(fn [n] \n\t(loop [fib '[1 1]] \n\t\t(if  \n\t\t\t(>= (count fib) n) \n\t\t\tfib \n\t\t\t(let [rev-fib (reverse fib)]\n\t\t\t\t(recur (conj fib (+ (first rev-fib) (first (next rev-fib)))))))))","user":"53fdb53fe4b0de5c418485e8"},{"problem":26,"code":"#(loop [out [1 1]]\n       (if (or (< % 3) (= % (count out)))\n         out \n         (recur (conj out (+ (last out) (last (butlast out)))))))","user":"578b9978e4b0ebec4cfb754c"},{"problem":26,"code":"#(take % ((fn fib[a, b]\n           \n           (cons a (lazy-seq (fib b (+ a b) )) )\n           \n           \n           ) 1 1 ))","user":"57af249fe4b0fbc9809a272b"},{"problem":26,"code":"#(let [n %]    \n     (loop [iteration 0    \n            results (vector)]    \n       (if (= iteration n)    \n         results    \n         (if (or (= iteration 0) (= iteration 1))    \n           (recur (inc iteration) (conj results 1))    \n           (recur (inc iteration) (conj results                                     \n                                        (+ (last results) (second (reverse results)))))))))","user":"5de68f83e4b0986d99407f6c"},{"problem":26,"code":"(fn [num]\n  (let [fib (fn fib [n] (if (> n 2) (+ (fib (- n 1)) (fib (- n 2))) 1))]\n    (for [x (range  1 (inc num))]\n      (fib x))))","user":"5412ef7ee4b01498b1a719da"},{"problem":26,"code":"(fn f [x]\n  (loop[x x\n        ans '(1 1)]\n    (if(= x 2)\n      (reverse ans)\n      (recur (dec x) (conj ans (+ (first ans) (second ans)))))))","user":"5ea7b04de4b00a66d4a951b6"},{"code":"(fn [n]\r\n(loop [a 1 b 0 count n coll ()]\r\n  (if (zero? count)\r\n  (reverse coll)\r\n  (recur (+ a b) a (dec count) (conj coll a)))))","problem":26,"user":"4de8fb73535d08e6dec9fdff"},{"code":"(fn myfib [x]\r\n  (loop [current x myseq [1 1]]\r\n    (if (= current 2)\r\n      myseq\r\n      (recur (dec current) (conj myseq (+ (last myseq) (nth myseq (-(count myseq) 2))))\r\n  )\r\n\t)\r\n  )\r\n)","problem":26,"user":"50a85af1e4b054305ba5a833"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[p c]] [c (+ p c)]) [1 1]))))","user":"53ea72b6e4b036ad0777e4e5"},{"problem":26,"code":"(fn fib-list [x]\n  (let [fib\n        (fn fib [n]\n          (if (< n 2)\n            1\n            (+\n             (fib (- n 2))\n             (fib (- n 1)))))]\n    (for [i (range x)] (fib i))))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn [n]\n  (loop [acc [1 1]]\n    (if (= n (count acc))\n      acc\n      (recur (conj acc (+ (last acc) (last (drop-last acc))))))))","problem":26,"user":"5131d817e4b06942423563ca"},{"code":"#(drop 1 (reverse (loop [c % r '(1 1 0)] (if (< c 3) r \r\n(recur (dec c) (conj r (+ (first r) (second r))))))))","problem":26,"user":"4e79ff2a535db169f9c796a9"},{"problem":26,"code":";(fn [n]\n;  (take n\n;        ((fn rfib [a b] \n;           (lazy-seq (cons a (rfib b (+ a b)))))\n;         1 1)))\n(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","user":"55b7f263e4b01b9910ae29b4"},{"problem":26,"code":"#(\n  take % (map (fn fib [x] \n      (cond \n        (< x 2) 1\n        :else (+ (fib (- x 2)) (fib (- x 1)))\n      )\n  ) (range %))\n)","user":"5aba34c5e4b073f1774426a3"},{"problem":26,"code":"#(loop [length 2 accum [1 1]]\n  \t (if (= length %)\n     \taccum\n       \t(recur (inc length) (conj accum (apply + (take-last 2 accum)))\n        )\n     )\n  )","user":"5dd25ca8e4b0948ae9d9ad55"},{"problem":26,"code":"(fn fib-n [x]\n  (letfn [(fib [x]\n            (cond\n              (= x 0) nil\n              (< x 3) 1\n              :else (+ (fib (- x 1)) (fib (- x 2)))))]\n\t    (map fib (range 1 (+ 1 x)))))","user":"5c633df2e4b0fca0c162265c"},{"code":"(fn [x]\n  (\n    (fn [lst i]\n    (if\n      (zero? i) lst\n      (recur (concat lst (list (reduce + (take-last 2 lst)))) (dec i)))) '(1 1) (- x 2)))","problem":26,"user":"4e89559c535d4ef0aa30db9a"},{"problem":26,"code":"(fn fib [x]\n  (if (< x 3)\n    (repeat x 1)\n  (loop [res [1 1] x1 1 x2 1]\n    (if (= (count res) x)\n      res\n      (recur (conj res (+ x1 x2)) x2 (+ x1 x2))\n      )\n    )\n    )\n  )","user":"5af39788e4b0cc2b61a3bc8a"},{"code":"(fn[n]\n  (reverse (\n    (fn fib [a ac]\n      (if (= a n) ac\n          (fib (+ a 1) \n            (conj ac \n              (+ (first ac) (second ac)))))\n) 2 '(1 1))))","problem":26,"user":"506f5d68e4b082ae7d1032c7"},{"problem":26,"code":"(fn fibo [n]\n  (cond\n   (<= n 0) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [fibo-1 (fibo (dec n))]\n           (conj fibo-1 (reduce + (take-last 2 fibo-1)))\n           )\n   )\n  )","user":"57cd7498e4b0c746388ab897"},{"code":"(fn [x]\n(reverse \n  (last \n    (take (- x 1) \n      (iterate \n        #(cons (+ (first %) (second %)) %) '(1 1))))))","problem":26,"user":"4e58ef07535d8a8b8723a299"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n; Cheater!!! (in clojure docs)\n\n; iterate creates a bunch of lists,  which we only want the first element of each.","user":"56092852e4b0053d1b86c7d9"},{"problem":26,"code":"(fn [num]\n  (if (= num 1) [1]\n    (loop [result [1 1] n 2]\n        (if (= n num) result (recur (conj result (+ (last result) (nth result (- n 2)))) (inc n)))\n    )\n  ) \n)","user":"5a424954e4b0447ef91cc5f0"},{"problem":26,"code":"#(loop [fib [1 1]]\n    (if (>= (count fib) %)\n      (apply list fib)\n      (recur (conj fib \n                   (+ (second \n                          (reverse fib)) \n                      (last fib))))))","user":"5adf7a7ae4b0837691e92c37"},{"problem":26,"code":"(fn [n] (take n\n              ((fn temp [a b] (lazy-seq (cons a (temp b (+ b a))))) 1 1)\n              ))","user":"57606cfde4b08062f99a4e95"},{"problem":26,"code":"(fn fib [n]\n   (take n\n         ((fn rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1)))","user":"589c2e3fe4b00487982d5357"},{"problem":26,"code":"(fn [num]\n\n  (loop [output [1]\n         prev 0\n         current 1\n         count 1\n         num num]\n    (if (= count num)\n      output\n      (recur (conj output (+ prev current))\n             current\n             (+ prev current)\n             (inc count)\n             num)\n      )\n\n    )\n\n\n  )","user":"56b7c32ee4b0982f16b37e48"},{"problem":26,"code":"(fn [fib-size]\n   (loop [fib-seq [1 1]]\n     (if (< (count fib-seq) fib-size)\n       (recur (conj fib-seq (+ (last fib-seq) (nth fib-seq (- (count fib-seq) 2)))))\n       fib-seq)))","user":"5c3cd80fe4b0d62ef62d9faa"},{"problem":26,"code":"(fn[n] (loop [r '(1 1) n n] (if (= 0 (- n 2)) (reverse r) (recur (cons (+ (first r) (second r)) r) (dec n)))))","user":"54464734e4b032a45b8693ab"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"5187a7dae4b057e3860ab7e1"},{"code":"#(map \n  (fn f [x] \n    (if (= x 0)\n      0\n      (if (= x 1)\n        1\n        (+ (f (- x 1)) (f (- x 2))))))\n  (map (partial + 1) (range %)))","problem":26,"user":"524e6b68e4b0541d1855b7db"},{"code":"(fn f [a b n]\n  (cons b (when (> n 1)\n            (f b (+ a b) (dec n))))) 0 1","problem":26,"user":"4efb2fd7535dced4c769f274"},{"code":"#((fn ro [n m res]\n   (if (= n m)\n     (reverse res) \n     (ro (inc n) m (conj res (if (< n 3) 1 (+ (first res) (second res)))))\n     ))\n 1 (inc %) '())","problem":26,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn[n]\n  (loop [s '(1 1)]\n  \t(if (<= n (count s))\n\t\t\ts\n\t\t\t(recur (concat s (list (+ (last s) (second (reverse s))))))\n\t\t)\n\t)\n)","problem":26,"user":"4e6df3c9535d5021c1a895fa"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fibonacci-recur [a b]\n             (cons a (lazy-seq (fibonacci-recur b (+ a b))))) 1 1)))","user":"58ee9b14e4b056aecfd47db0"},{"code":"(fn [n]\r\n  (cond\r\n    (zero? n) []\r\n    (= n 1) [1]\r\n    :else (loop [n (- n 2), sl 1, l 1, r [1 1]]\r\n            (if\r\n              (zero? n) r\r\n              (recur (dec n) l (+ sl l) (conj r (+ sl l)))))))","problem":26,"user":"4eb6d3ab535d7eef30807370"},{"problem":26,"code":"(fn [x]\n    (loop [c 0 l [0 1]]\n      (if (< c (- x 1))\n        (recur (inc c) (conj l (apply + (take-last 2 l))) )\n        (rest l)\n        )))","user":"5d52bf29e4b0776584bd6f69"},{"problem":26,"code":"#(loop [a 1 b 1 coll [1 1] cnt %] (if (> cnt 2) (recur b (+ a b) (conj coll (+ a b)) (- cnt 1)) coll))","user":"53f78944e4b0de5c41848561"},{"problem":26,"code":"(fn [n]\n  (let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))]\n    (take n (drop 1 fibs))))","user":"56967bc0e4b0dcc4269f4131"},{"problem":26,"code":"#(loop [i 2 l '(1 1)]\n   (if (= i %)\n     (reverse l)\n     (recur (inc i) (conj l (+ (first l) (second l)) ) ) ) )","user":"558b41fce4b0277789237628"},{"problem":26,"code":"(fn fib [x]\n   (loop [a 1 b 1 numbers []]\n     (if (< (count numbers) x)\n       (recur b (+ a b) (conj numbers a))\n       numbers)\n     )\n   )","user":"58775496e4b01531a375ea9a"},{"problem":26,"code":"(fn [a] (letfn [(fib ([] (fib 0 1))\n                  ([x y]\n                   (cons y (lazy-seq (fib y (+ x y))))))]\n          (take a (fib))))","user":"5e860bafe4b09a7a73c8bbdd"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 acc []]\n    (cond\n      (<= i 2) (recur (inc i) (conj acc 1))\n      (= i n) (conj acc (+ (last acc) (nth acc (- (count acc) 2))))\n      :else (recur (inc i) (conj acc (+ (last acc) (nth acc (- (count acc) 2))))))))","user":"5682d5b4e4b0945ebc182a95"},{"problem":26,"code":"(fn [x]\n  (loop [s [1 1] i 2]\n    (if (= i x)\n      s\n      (recur (conj s (+ (last s) (last (butlast s)))) (inc i)))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":26,"code":"#(loop [c (dec %) n 1 r [1]]\n   (if (zero? c) (seq r)\n     (recur (dec c)\n            (+ n (last r))\n            (conj r n))))","user":"56ae7589e4b03c432f187360"},{"problem":26,"code":"(fn [x]\n  (let [fib (fn self [n]\n    (if (or (= 0 n) (= 1 n))\n      1\n      (+ (self (- n 1)) (self (- n 2)))))]\n  (map fib (range x))))","user":"53da3691e4b0e771c3025493"},{"problem":26,"code":"#(loop [fibs [1 1], i 0]\n       (if (>= i %)\n         (take % fibs)\n         (recur (conj fibs (+ (last (butlast fibs)) (last fibs))) (inc i))))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":26,"code":"(fn [n]\n  (reverse (loop [m (- n 2) acc '(1 1)]\n             (if (zero? m)\n               acc\n               (recur (dec m) \n                      (cons (+ (first acc) \n                               (second acc))\n                            acc))))))","user":"5650b8a0e4b0284900eef6c3"},{"problem":26,"code":"(fn fib [x] (cond \n             (< x 1) '(0)\n             (= x 1) '(1)\n             :else (concat (fib (- x 1)) [(+ (last (fib (- x 1))) (last (fib (- x 2))))])))","user":"57476b5fe4b009280f9f2b74"},{"code":"(fn fib [n]\n  (reverse ((fn infib [n prev1 prev2 lst]\n    (if (= n 0)\n      lst\n      (infib (- n 1) prev2 (+ prev1 prev2) (conj lst (+ prev1 prev2)))))\n  n 1 0 '())))","problem":26,"user":"4fab0c0ae4b081705acca20d"},{"problem":26,"code":"(fn f[x]\n  (if (= x 1) [1]\n    (conj (f (- x 1)) (reduce + (take-last 2 (f (- x 1)))))\n    ))","user":"5b3e3c1ce4b02d533a91bbff"},{"problem":26,"code":"(fn fibonacci [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"59804b60e4b021a7a535fdcf"},{"problem":26,"code":"(fn [s] (loop [n 1 m 0 arr []] (if (= s (count arr)) arr (recur (+ n m) n (conj arr n)))))","user":"53320dd1e4b019098a6f8b71"},{"code":"(fn fib \n  ([c] (take c (fib 0 1)))\n  ([pn n] (cons n (lazy-seq (fib n (+ pn n))))))","problem":26,"user":"51411e3be4b05ca1a0b379f3"},{"code":"(fn [n] \n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fbbae0fe4b081705acca2eb"},{"code":"(fn [x]\n  (reverse \n  (loop [n 0 r ()]\n    (cond (= x n) r\n          (or (= n 0) (= n 1)) (recur (inc n) (conj r 1))\n          :else (recur (inc n) (conj r (+ (first (rest r)) (first r))))))))","problem":26,"user":"506b016de4b0a2a5463de37f"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         coll []]\n    (cond\n      (<= i 1) (recur (inc i) (conj coll i))\n      (<= i n) (recur (inc i) (conj coll (+ (nth coll (dec i)) (nth coll (- i 2)))))\n      :else (rest coll))))","user":"54d70bbfe4b0a52adc2e2026"},{"problem":26,"code":"(fn [total] (\n\t\t\ttake total (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))\n             ))","user":"58cea645e4b03c36ff7e58a6"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (loop [current 2, fibs '(1 1)]\n        (if (= current n)\n          fibs\n          (let  [\n                  n-1   (first (reverse fibs))\n                  n-2   (second (reverse fibs))\n                ]\n            (recur (inc current) (reverse (cons (+ n-1 n-2) (reverse fibs))))))))))","user":"5267c74be4b03e8d9a4a7183"},{"problem":26,"code":"#(nth (iterate (fn [x](conj x (reduce + (take-last 2 x)))) [1 1]) (- % 2))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":26,"code":"#(map (fn fib [n] (if (<= n 1) 1  (+ (fib (- n 1)) (fib (- n 2))))) (range  %))","user":"572af688e4b0f4d77e651249"},{"problem":26,"code":"(fn xyz\n  ([x] (xyz x '()))\n  ([x l]\n   (if (= x 0)\n     (reverse l)\n     (recur (- x 1) \n            (if\n              (< (count l) 2)\n              (conj l 1)\n              (conj l (+ (first l) (second l))))))))","user":"5a4c278ee4b05d388ecb6b8e"},{"code":"#(take % (map first (iterate (fn [[x p]] [(+ x p) x]) [1 0])))","problem":26,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn fib [n] \n  (loop [cnt 1\n        fibseq [1]\n        a 0\n        b 1]\n    (if (< cnt n) \n      (recur (inc cnt) (conj fibseq (+ a b)) b (+ a b))\n      fibseq)))","problem":26,"user":"4ff35d46e4b0678c553fc34f"},{"problem":26,"code":"(fn fib\n  \t([x] (fib x '(1 1) 2 1 1))\n    ([x l cnt pre ppre] (if (= x cnt) (reverse l) (fib x (conj l (+ pre ppre)) (inc cnt) (+ pre ppre) pre))))","user":"59e61973e4b08badc2a0c567"},{"code":"#(let [fib (fn fib [n]\n             (if (or (= n 0) (= n 1))\n               1\n               (+ (fib (- n 1)) (fib (- n 2))))\n             )]\n   (map fib (range %)))","problem":26,"user":"4f49c002e4b0d56e7bb92bfd"},{"problem":26,"code":"#(loop [y 1 x [1]] \n\t(if (= y %) \n\t\tx \n\t\t(recur (inc y) \n\t\t\t(conj x (reduce + (take-last 2 x))))))","user":"528d6b10e4b0239c8a67aec3"},{"problem":26,"code":"(fn [n] (reverse\n  (letfn [\n    (nx [[a b :as c]] (conj c (+ a b)))]\n    ((apply comp (repeat (- n 2) nx))\n     '(1 1)))))","user":"5dde0b71e4b0948ae9d9add0"},{"problem":26,"code":"(fn f\n  [n]\n  (loop [l '(1 1), k n]\n    (if (= k 2)\n      (reverse l)\n      (recur (cons (+ (first l) (second l)) l) (dec k))\n    )\n  )\n)","user":"54410a71e4b032a45b869367"},{"code":"(fn fib [i]\n  (if (= i 2)\n    [1 1]\n    (let [previous (fib (dec i))]\n      (conj previous (apply + (take-last 2 previous))))))","problem":26,"user":"4f215350e4b0d66497709fd0"},{"problem":26,"code":"(fn [x] \n  (loop [current 1\n         result []]\n    (if (< x current)\n      result\n    (let [fibo (fn [x] (cond\n                        (= x 0) 0\n                        (= x 1) 1\n                        (= x 2) 1\n                        :else (+ (result (- x 2)) (result (- x 3)))))]\n      (recur (inc current) (conj result (fibo current)))))))","user":"561c57b9e4b064ca9f4b1697"},{"problem":26,"code":"(fn [n]\n  (if (zero? n)\n    '()\n    (loop [i 1\n           nums [0 1]]\n      (if (>= i n)\n      (rest nums)\n      (recur (inc i)\n             (conj nums (+ (last nums) (nth nums (dec i)))))))))","user":"5dc5982be4b02f9375f4e1c0"},{"code":"(fn S [n] \n  (let [fib \n        (fn fib [x] (if (<= x 2) 1 (+ (fib (- x 1)) (fib (- x 2)))))\n        ]\n  (if (= n 0) [] (conj (S (- n 1)) (fib n) ))))","problem":26,"user":"525cc137e4b0cb4875a45d46"},{"problem":26,"code":"(fn fib [x] (cond\n             (= x 0) [0]\n             (= x 1) [1]\n             :else (conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (fib (- x 2)))))))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":26,"code":"#(loop [cnt % acc '(1 0)]\n            (if (= 1 cnt)\n                (->> (reverse acc) rest)\n                (recur (dec cnt)\n                       (conj acc (+ (nth acc 0)\n                                    (nth acc 1))))))","user":"555881f5e4b0deb715856e2c"},{"problem":26,"code":"(fn me [limit & val]\n   (let [[array] (or val [[1 1]])\n         length (inc (count array))]\n     (if (> length limit)\n       (take limit array)\n       ;; (conj array (+ (last array) (second (reverse array))))\n       (me limit (conj array (+ (last array) (second (reverse array)))))\n       )\n     ))","user":"54eff2bee4b024c67c0cf88d"},{"code":"(fn [n] (nth (iterate #(conj %1 (apply + (take-last 2 %1))) [1 1]) (- n 2)))","problem":26,"user":"51db9e1ee4b0e067a9bbadc9"},{"code":"(fn fibonacci [n]\n  (take n\n        ((fn rfib [a b]\n           (cons a (lazy-seq (rfib b (+ a b)))))\n           1 1)))","problem":26,"user":"51db0d99e4b06aa4d4669a9d"},{"problem":26,"code":"(fn fib [num]\n  (letfn [(inner-fib [num current]\n            (cond (= 1 num) current\n                  :else (let [[a_0 a_1] (take-last 2 current)\n                              a_2 (+ a_0 a_1)]\n                          (recur (dec num) (conj current a_2)))))]\n    (rest (inner-fib num [0 1]))))","user":"5508b405e4b06e50f9beb110"},{"code":"(fn [n]\n  (take n (\n    map first (iterate\n               (fn [[a b]] [b (+ a b)]) [1 1])\n           )\n        )\n  )","problem":26,"user":"5132b1f3e4b039bac947cbbb"},{"code":"(fn fib [n]\r\n  (loop [x 1\r\n         y 1\r\n         n n\r\n         result []]\r\n    (if (zero? n)\r\n      result\r\n      (recur y (+ x y) (dec n) (conj result x)))))","problem":26,"user":"4fe54ee8e4b0e8f79898fec3"},{"problem":26,"code":"(fn [x]\n  (map first (take x (iterate (fn [[a,b]] [b, (+ a b)]) [1, 1]))))","user":"55dd91c9e4b050e68259b3ca"},{"problem":26,"code":"#(loop [a 0 b 1 res []]\n   (if (>= (count res) %)\n     res\n     (recur b (+ a b) (conj res b))))","user":"578fc072e4b0ebec4cfb759a"},{"problem":26,"code":"(fn fib\n  [c]\n  (loop [coll [1]\n         \t n 0\n             i 1]\n    (if (>= i c)\n      coll\n      (recur (conj coll (+ (last coll) n))\n                 (last coll)\n                 (inc i)))))","user":"5bab49bbe4b0a20761a23474"},{"problem":26,"code":"(fn [count]\n  (map (fn fib [x]\n         (cond\n           (= 0 x) 1\n           (= 1 x) 1\n           :else (+ (fib (- x 2))\n                    (fib (- x 1))))) (range 0 count)))","user":"5382b433e4b06839e8705ed7"},{"problem":26,"code":"(fn get-nth-fibonachi [n]\n  (take n  ((fn fib [a b]\n              (lazy-seq (cons a (fib b (+ a b)))))\n            1 1)))","user":"5cab0766e4b048ec896c5c45"},{"problem":26,"code":"#(loop [counter % xs '() prev-elem 1 next-elem 0]                                                                                                                                             \n    (if (zero? counter)                                                                                                                                                                        \n      xs                                                                                                                                                                                       \n      (recur (dec counter) (concat xs [(+ prev-elem next-elem)]) next-elem (+ next-elem prev-elem))))","user":"57ade6fce4b0b8559636fca5"},{"problem":26,"code":"(fn [n]\n    (loop [count n, fibs [], a 0, b 1]\n      (if (zero? count)\n        fibs\n        (let [p (+ a b)]\n          (recur (dec count) (conj fibs b) b p)))))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":26,"code":"#(take %\n      ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b)))))\n       1 1))","user":"545a2da7e4b01be26fd74634"},{"problem":26,"code":"#(->> (iterate (fn [[x y]] [y (+' x y)]) [0 1]) (take %) (map last))","user":"5de65feee4b0986d99407f68"},{"problem":26,"code":"(fn fib\n  ([n fib-seq one-before two-before]\n    (cond\n      (< n 1) '()\n      (= (count fib-seq) n) (reverse fib-seq)\n      :else (let [new-num (+ one-before two-before)]\n              (fib n (conj fib-seq new-num) new-num one-before))))\n  ([n] (fib n '(1) 1 0)))","user":"5cd639b4e4b0ccb061962940"},{"problem":26,"code":"(fn x [n]\n  (if (> n  2)\n    (let [fb (x (dec n))]\n      (conj fb (+ (last fb) (last (drop-last fb)))))\n    [1 1]\n    ))","user":"57a497e8e4b0a966079561e4"},{"problem":26,"code":"(fn [cnt]\n  (take cnt\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5433eecae4b0b6b47310fce6"},{"code":"#(loop [n %, acc '()]\n  (cond (= 0 n)               (reverse acc)\n         (empty? acc)         (recur (- n 1) '(1))\n         (empty? (rest acc)) (recur (- n 1) '(1 1))\n         :else                 (recur (- n 1) (cons (+ (first acc) (second acc)) acc))))","problem":26,"user":"519d66d2e4b037b32803f9b2"},{"code":"(fn fib [n] (take n (map first\n  (iterate #(list (second %) (+ (first %) (second %))) '(1 1)\n))))","problem":26,"user":"4e6dc95a535d5021c1a895f1"},{"problem":26,"code":"(fn fibo [x]\n  (if (= 1 x)\n    [1]\n    (if (= 2 x)\n      [1 1]\n      (conj (fibo(- x 1)) (+ (last (fibo(- x 1))) (last(fibo (- x 2)))))\n    )\n  )\n)","user":"56ce8728e4b0ea9b8538f760"},{"problem":26,"code":"#(take % (map (fn fib [n]\n   (if (or (= n 1) (= n 0))\n    n\n   (+ (fib (- n 1)) (fib(- n 2)))\n\n )) (iterate inc 1)))","user":"54ae231de4b09f271ff37ced"},{"problem":26,"code":"#(map (fn fib [x] (if (<= x 2) 1 (+ (fib (dec x)) (fib (- x 2)) ) ) )  (range 1 (inc %)))","user":"56304db8e4b073c1cf7a9be5"},{"problem":26,"code":"(fn [n]\n  (take n (map (fn fib [x]\n                 (case x\n                   0 0\n                   1 1\n                   (+ (fib (dec x)) (fib (- x 2)))))\n               (iterate inc 1))))","user":"561a2940e4b053970a773b04"},{"problem":26,"code":"(fn fib [n] \n  (if (= 1 n)\n    [1]\n     (if (= 2 n)\n       [1 1]\n       (let [nm1 (fib (dec n))]\n         (conj nm1 (+ \n                    (get nm1 (- n 2))\n                    (get nm1 (- n 3))                    \n                    ) \n         )\n       )\n       \n    )\n  )\n)","user":"5795bddbe4b0e215f87e8488"},{"problem":26,"code":"#(take % (map (fn fib [n] \n  (if (< n 3) \n    1\n    (+ (fib (dec n)) (fib (- n 2))))) (range 1 1000)))","user":"540b851fe4b0addc1aec66f9"},{"problem":26,"code":"(fn [n] \n     (reverse (loop [i 2 res '(1 1)]\n                    (if (>= i n)\n                        res\n                        (recur (inc i) \n                               (cons (apply + (take 2 res)) res))))))","user":"5a07fefee4b01bb0ae8afde5"},{"problem":26,"code":"#(for [x (range %1)] ((fn fib [n] (case n 0 1 1 1 (+ (fib (- n 1)) (fib (- n 2))))) x))","user":"5d63ba44e4b0c9e5857d5026"},{"code":"(fn [n] (let [foo (fn foo [x y] (let [z (+ x y)] (lazy-seq (cons y (foo y z)))))] (take n (foo 0 1))))","problem":26,"user":"52dfc89be4b09f7907dd1405"},{"problem":26,"code":"(fn [x]\n    (take x\n          ((fn fib [a b]\n              (cons a (lazy-seq (fib b (+ a b))))) 1 1)) )","user":"5695b86de4b0dcc4269f412b"},{"problem":26,"code":"(fn [x] ((fn [s n] (if (= n 0) s (recur (conj s (+ (last s) (last (butlast s)))) (dec n)))) [1 1] (- x 2)))","user":"58fdd7b7e4b0438e51c2cfc0"},{"code":"#(map (fn myfib [x]\n  (if (= x 0)\n    1\n    (if (= x 1)\n      1\n      (+ (myfib (- x 1))\n         (myfib (- x 2)))))) (range %))","problem":26,"user":"518a8c4be4b0df82f5685903"},{"problem":26,"code":"(fn [count] \n  (case count\n    2 '(1 1)\n    1 '(1)\n    0  '()\n     ((fn [ x count]\n                (if (= count 0)\n                  (seq x)\n                  (recur (conj x (+ (last x) (last (butlast x)) ))(- count 1)) )\n    \t\t   ) [1 1] (- count 2))\n   )\n )","user":"55fa6ca9e4b03cbcff9738d1"},{"problem":26,"code":"(fn [n] (let [fib+1 (fn [[f1 f2]] [f2 (+ f1 f2)]) fibs (iterate fib+1 [0 1])] (map first (take n (drop 1 fibs)))))","user":"60b616e1e4b0e0fa5f1b4243"},{"problem":26,"code":"#(case %\n   1 '(1)\n   (reverse (loop [n (- % 2)\n                   mid-seq '(1 1)]\n              (if (<= n 0)\n                mid-seq\n                (recur (dec n) (conj mid-seq (+ (first mid-seq) (second mid-seq))))))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [lim]\n  (loop [c '(1 1) n 2]\n     (if (< lim (inc n))\n         (reverse c)\n\t       (recur (conj c (+ (first c) (second c))) (inc n)))))","problem":26,"user":"4f52ae00e4b03ad3f0c10d42"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-seq [a b]\n             (cons a (lazy-seq (fib-seq b (+ a b))))) 1 1)))","user":"570459a9e4b0b0fb43fd0662"},{"problem":26,"code":"(fn [n]\n  (->> (iterate #(vector (second %) (apply + %)) [1 1])\n       (take n)\n       (map first)))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn [n]\n  (loop [fib [], [a b] [0 1], n n]\n    (if (= n 0)\n        fib\n        (recur (conj fib b)\n               [b (+ a b)]\n               (dec n)))))","problem":26,"user":"4e7e4d5c535db169f9c7970f"},{"code":"(fn my_fib [n] (rest (reverse (nth (iterate #(conj % (+ (first %) (second %))) '(1 0)) (dec n)))))","problem":26,"user":"51ddcd9ae4b0de53e6370c49"},{"code":"#(take %1 ((fn fib[a b](cons a(lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"52e807b3e4b09f7907dd1490"},{"problem":26,"code":"(fn [n] (reverse (reduce (fn [[f s &r :as acc] itm] (conj acc (+ f s))) '(1 1) (range (- n 2)))))","user":"593e4b1fe4b069cdc2982bbb"},{"problem":26,"code":"(fn fib\n  [x]\n  (case x\n    1 '(1)\n    2 '(1 1)\n    (let\n      [prev (reverse (fib (dec x)))]\n      (reverse (conj prev (reduce + (take 2 prev)))))))","user":"5a584ca2e4b05d388ecb6c7d"},{"problem":26,"code":"(fn fib2 [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      (seq x))))","user":"5755e66ee4b02ea1147992cf"},{"problem":26,"code":"(fn [n]\n   (loop [count 0, ans []]\n     (cond (= count n) ans\n           (< count 2) (recur (inc count) (conj ans 1))\n           :else (let [n1 (last ans)\n                       n2 (last (drop-last ans))\n                       ne (+ n1 n2)] \n                   (recur (inc count) (conj ans ne))))))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":26,"code":"(fn [how-many] \n    (loop [so-far [1 1]]\n      (if (>= (count so-far) how-many)\n        so-far\n        (recur (conj so-far (+ (last so-far) (nth so-far (- (count so-far) 2 ))))))))","user":"54febf4be4b07d26eda61d45"},{"problem":26,"code":"(fn fibseq [a]\n  (map (fn fib [x]\n\t\t(case x\n          0 1\n          1 1\n          (+ (fib (- x 1)) (fib (- x 2)))\n\t\t)\n\t) (range a))\n  )","user":"5f22dabbe4b0f565ad99828a"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 result []]\n    (let [cur-val (case i\n                    0 1\n                    1 1\n                    (+ (nth result (- i 1)) (nth result (- i 2)))\n                       )]\n      (if (= i n)\n        result\n        (recur (inc i) (conj result cur-val)) )\n      )\n    )\n  )","user":"5d590500e4b02ba5928a6824"},{"problem":26,"code":"(fn [n]\n  (loop [out []\n         cnt 1]\n    (if (= cnt (inc n))\n      (reverse out)\n      (cond \n       (= 1 cnt)\n       (recur (cons 1 out)(inc cnt))\n       (= 2 cnt)\n       (recur (cons 1 out) (inc cnt))\n       :else\n       (recur\n        (cons (+ (first out) (second out)) out) (inc cnt))))))","user":"57275755e4b0c5bde472c13b"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [x1 x2] (cons x1 (lazy-seq (fib x2 (+ x1 x2)))))]\n    (take n (fib 1 1))))","user":"559f06bae4b0acc240e314e6"},{"code":"(fn first-fib [n]\n  (let [fib (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fib 1 1))))","problem":26,"user":"5151c184e4b03e678e393add"},{"problem":26,"code":"(fn [n]\n  (letfn [(iter [i result]\n                (cond (= i n) result\n                      :else (recur (inc i) (conj result (+ (nth result (- i 1))\n                                                           (nth result (- i 2)))))))]\n    (iter 2 [1 1])))","user":"56e31aaae4b03a7c14b85a3e"},{"problem":26,"code":"(fn [up-to-index]\n    (loop [sequence [1] x 0 y 1]\n     (if (= (count sequence) up-to-index)\n      sequence\n      (recur (conj sequence (+ x y)) y (+ x y))\n     )))","user":"53ce8cb5e4b00fb29b2212f2"},{"problem":26,"code":"(fn fibin [n]\n  (if (= n 2) [1 1] \n  (let [l (fibin (dec n))] \n    (conj (vec l) (reduce + (take-last 2 l))))\n  )\n)","user":"587a2356e4b01531a375eade"},{"problem":26,"code":"(partial (fn f [col,n] (if (= n 0) col (f (let [s (butlast col)] (concat col (list (if (empty? s) 1 (+ (last s) (last col)) ))) ) (dec n)))) '())","user":"53f9fe41e4b0de5c41848575"},{"problem":26,"code":"(fn [n]\n  (letfn [(rec [n a b]\n               (if (zero? n)\n                 ()\n                 (cons a (rec (dec n) b (+ a b)))))]\n    (rec n 1 1)))","user":"564b3730e4b0284900eef665"},{"code":"(fn [n]\n  (let [fib (fn fint [n] \n              (if (<= n 1)\n                1\n                (+ (fint (- n 1)) (fint (- n 2)))))]\n    (map fib (range 0 n))))","problem":26,"user":"4f7f0827e4b06e829148e1d5"},{"problem":26,"code":"(fn [x] \n  (loop [n x, result '(1 1)]\n    (if (< n 3) (reverse result)\n        (recur (dec n) (conj result (+ (first result) (second result))))\n        )\n    )\n  )","user":"589037b4e4b00487982d51d0"},{"code":"(fn fibn [n]\n  (take n\n        ((fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs))))))))","problem":26,"user":"53691dc7e4b0243289761e97"},{"problem":26,"code":"(fn fib [arr num]\n\n   (if (> num 2)\n     (fib (conj arr (+ (first arr) (first (next arr))  )  ) (dec num))\n      (reverse arr)\n     )\n\n   ) '(1 1)","user":"5f082d9ee4b0cf489e8d7f5c"},{"problem":26,"code":"(fn f [x]\n   (cond \n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else \n    (let [prev (f (dec x))\n          new (+ (last (butlast prev)) (last prev))]\n      (concat prev (list new)))))","user":"508daac4e4b0f17d83ea26c0"},{"problem":26,"code":"(fn [x]\n  (reverse\n   (loop [[last-el second-last-el :as acc] '()]\n     (if  (= x (count acc))\n       acc\n       (if (and last-el second-last-el)\n         (recur (conj acc (+ last-el second-last-el)))\n         (recur (conj acc 1)))))))","user":"534cf749e4b084c2834f4a97"},{"problem":26,"code":"(fn list-fib [c]\n  (map (fn fib [n]\n            (cond\n             (< n 0) 0\n             (= n 1) 1\n             :else (+ (fib (- n 1)) (fib (- n 2)))))\n       (take c (iterate inc 1))))\n;; Naive version only numeric","user":"563b236ce4b0bfe05bf1180b"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 1 b 1 v [1] i 1]\n    (if (= n i) \n      v\n      (recur b (+ a b) (conj v b) (+ i 1)))))","user":"603fae99e4b0d5df2af22322"},{"problem":26,"code":"#(if (= % 1)\n      1\n      (if (= % 2)\n          '(1 1)\n          (loop [result '(1 1) n (- % 2)]\n           (if (= n 0)\n               result\n               (recur (concat result [(+ (last result) (nth result (- (count result) 2) ))]) (- n 1))\n           )\n          )\n      )\n  )","user":"583c8bd4e4b089d5ab817d81"},{"problem":26,"code":"(fn [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n  \t(loop [fibs\t[1 1]\n           ord\t2]\n    (if (>= ord n)\n      fibs\n      (recur (conj fibs (+ (nth fibs (- (count fibs) 2)) (last fibs))) (+ ord 1))))))","user":"5468033ee4b00cfc9eacc133"},{"code":"(fn fib[n]\n  (take n \n    (map\n      first\n        (iterate (fn fib-pair [[a b]] [b (+ a b)]) [1 1])))\n)","problem":26,"user":"4e653558535d8ccf87e9fe6f"},{"code":"#(loop [a 1\n          b 1\n          n %1\n          xs '()]\n          (if (= 0 n) \n              (reverse xs)\n              (recur b (+ a b) (- n 1) (conj xs a))))","problem":26,"user":"4f724e56e4b07046d9f4f027"},{"problem":26,"code":"(fn fib [n]\n    (take n\n          (reduce \n            (fn [coll n] \n              (concat coll (list (apply + (take 2 (reverse coll))))))\n            '(1 1)\n            (range n))))","user":"50ec409ce4b04edc33777045"},{"problem":26,"code":"; using recursion\n\n;(fn fib [n]\n;  (cond\n;    (= n 1) '(1)\n;    (= n 2) '(1 1)\n;    :else\n;      (let [lastfib (fib (- n 1))]\n;        (reverse (conj (reverse lastfib) (+ (last lastfib) (last (butlast lastfib))))))))\n\n; cleaner way using iterate\n(fn [n] (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":26,"code":"(fn fibs\n  ([n] (fibs '(1 1) (- n 2)))\n  ([xs n] \n   (if (= 0 n)\n     xs\n   \t (recur\n      (concat xs (list (reduce + (take-last 2 xs))))\n      (dec n)))))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [n]\n   (take n ((fn rfib [a b]\n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","problem":26,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn [n] (loop [nn n ls [1 1]]\n    (if (zero? n) []\n      (if (< nn 2)\n        (take n ls)\n        (recur (dec nn) (conj ls (apply + (take-last 2 ls))))))))","problem":26,"user":"53069e16e4b02e8216869798"},{"problem":26,"code":"#(loop [n (dec (dec %))\n       fibs [1 1]]\n  (cond (pos? n) (recur (dec n) (conj fibs (reduce + (take-last 2 fibs))))\n        :else fibs))","user":"53b1db8ee4b047364c044495"},{"code":"#(loop [a 1 b 1 fibs []]\n    (if (= (count fibs) %)\n      fibs\n      (recur b (+ a b) (conj fibs a))))","problem":26,"user":"4e3bcca9535deb9a81d77f54"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib-recur [a b]\n             (cons a(lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5daeb6bce4b0f8c104ccfc8b"},{"problem":26,"code":"#(loop [target [] a 1 b 1 count %]\n         (if (= count 0) target\n           (recur (conj target a) b (+ a b) (dec count))))","user":"5d2c779be4b01671435dbc8d"},{"problem":26,"code":"#(map first (take %1 (iterate (fn [[a, b]] [b (+ a b)]) [1 1])))","user":"5f9f032fe4b0715f5002d839"},{"problem":26,"code":"(fn [n] \n  (take n \n        (map (fn fib [x]\n                 (cond\n                   (= x 0) 1\n                   (= x 1) 1\n                   :else (+ (fib (- x 1)) (fib (- x 2)))))\n               \n              (range n))))","user":"5601a32ee4b04bb52996e193"},{"code":"(fn [ok] (map (fn ! [n] (if (>= 2 n) 1 (+ (!(- n 1)) (!(- n 2))))) (range 1 (+ ok 1))))","problem":26,"user":"5318f85ae4b08068f379ed76"},{"code":"(fn [x]\n   (let [fib-seq \n  ((fn rfib [a b] \n\t   (lazy-seq (cons a (rfib b (+ a b)))))\n\t 1 1)] (take x fib-seq)))","problem":26,"user":"4eb0afed535d7eef3080733e"},{"problem":26,"code":"(fn fib [cnt] (loop [res [1 1]] (if (>= (count res) cnt) res (recur (conj res (+ (last res) (last (butlast res))))))))","user":"591d9870e4b09b4ee5954c1b"},{"code":"#(take % \n       ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)\n)","problem":26,"user":"52bf29fde4b07a9af579232e"},{"code":"#((fn [n s]\n  (if (= 1 n)\n    s                 \n\t(recur (dec n) (conj s (apply + (take-last 2 s))))\n)) % [1])","problem":26,"user":"511b900ae4b00c2a1fa7ff6a"},{"code":"#(loop [a 1 b 1 c % r []]\n    (if (= c 0)\n      r\n      (recur b (+ a b) (dec c) (conj r a))))","problem":26,"user":"530cb5b8e4b02e82168697e0"},{"problem":26,"code":"(fn [n]\n  (loop [r [1 1] c 2]\n    (if (= c n)\n      r\n      (recur (conj r (+ (last r) (r (- c 2)))) (inc c)))))","user":"569ff6dbe4b0542e1f8d149c"},{"problem":26,"code":"(fn fib [n] (cond\n             (= n 1) '(1)\n             (= n 2) '(1 1)\n             :else (let [p1 (fib (- n 1))\n                         p2 (fib (- n 2))]\n                     (concat p1 (list (+ (last p1) (last p2)))))))","user":"5ee93720e4b029a2061bbeb7"},{"problem":26,"code":"(fn myfib [n]\n  (if (< n 3)\n    (vec (take n [1 1]))\n    (let [prev (myfib (dec n))]\n      (conj prev (apply + (take-last 2 prev))))))","user":"551ecb76e4b08d5046aa8a4c"},{"code":"(fn [n]\n  (letfn [(fib [i] (if (>= 2 i) 1 (+ (fib (dec i)) (fib (- i 2))) ))]\n    (map fib (range 1 (+ 1 n)))))","problem":26,"user":"52b20257e4b0c58976d9ace8"},{"problem":26,"code":"(fn [n]\n    (loop [n (dec n)\n           a 0\n           b 1\n           acc [1]]\n      (let [c (+ a b)]\n        (if (zero? n)\n          acc\n          (recur (dec n) b c (conj acc c))))))","user":"5ce97826e4b0a17bb84e2bc0"},{"code":"(letfn [(fib [n] (condp = n\n                         0 1\n                         1 1\n                         (+ (fib (dec n)) (fib (- n 2)))))\n         (fibs [n] (map fib (range n)))] fibs)","problem":26,"user":"4ed0e139535d44c135fd68c7"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1) \n    '(1)\n    (loop [result '(1 1) a 1 b 1 i (- x 2)]\n      (if (= i 0)\n        result\n\t    (recur (concat result (list (+ a b))) b (+ a b) (dec i)))\n    )\n  ))","user":"5515ab42e4b055c2f668d4ec"},{"problem":26,"code":"(fn fib [n] (if (= n 1) '(1) (if (= n 2) '(1 1) (concat (fib (- n 1)) [(+ (last (fib (- n 1))) (last (fib (- n 2))))]))))","user":"5778694fe4b0979f89651660"},{"problem":26,"code":"#(seq (loop [cnt % l [1 1]]\n  (if (<= cnt 2) \n    l\n    (recur (dec cnt) (conj l (apply + (take-last 2 l)))))))","user":"547e6fd2e4b0c51c1f4d730b"},{"code":"#(loop [fibs '(1 1) count 2] \n    (if (= count %) \n        (reverse fibs) \n        (recur (conj fibs (apply + (take 2 fibs))) (inc count))))","problem":26,"user":"4fc18846e4b081705acca331"},{"problem":26,"code":"(fn fib [n]\n  (take n (map first (iterate \n                       (fn fib-step [[a b]] \n                         [b (+ a b)])\n                       [1 1]))))","user":"54f53d3ce4b0f2f3c5226e90"},{"code":"(fn [n]\n  (rest (take (inc n) ((fn f [] (lazy-cat [0 1] (map + (rest (f)) (f))))))))","problem":26,"user":"50361b6be4b0fbe0a74d26be"},{"code":"(fn fibo [n]\n        (let [ret (transient (vec (replicate n nil)))\n              _ (assoc! ret 0 1)\n              _ (assoc! ret 1 1)\n              internal (fn internal [n]\n                           (if (nil? (ret n))\n                               (do (assoc! ret n (+ (internal (dec n))\n                                                    (internal (- n 2))))\n                                   (ret n))\n                             (ret n)))]\n          (internal (dec n))\n          (persistent! ret)))","problem":26,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn [x]\n  (loop [col '() n 0]\n    (if (= n x)\n      (reverse col)\n      (if (< n 2)\n        (recur (cons 1 col) (+ n 1))\n        (recur (cons (+ (first col) (first (rest col))) col) (+ n 1))))))","problem":26,"user":"5166b716e4b060c690c1f4bf"},{"problem":26,"code":"(fn\n            [args]\n            (loop [col []\n                   n 0]\n              (if (= n args)\n                col\n                (let [nn (inc n)\n                      rcol (reverse col)\n                      i  (if (< n 2)\n                           1\n                           (+ (nth rcol 0) (nth rcol 1) ))]\n                  (recur (conj col i) nn)))))","user":"54e336f3e4b024c67c0cf7da"},{"problem":26,"code":"(fn [n]\n  (loop [result (conj [] 1 1)\n         a (first result)\n         b (second result)\n         end 0]\n    (if (= end (- n 2))\n      result\n      (recur (conj result (+ a b)) b (+ a b) (+ end 1)))))","user":"5be0b916e4b0ed4b8aab4c8f"},{"problem":26,"code":"(fn my-fib-seq [n]\n    (map\n        (fn fib[x]\n            (if (< x 2) 1\n                (+ (fib (- x 1)) (fib (- x 2)) ) ))\n                (range 0 n)))","user":"56ef0a2ee4b04a395b9a045a"},{"problem":26,"code":"(fn fib-seq [n]\n  (loop [m (if (< n 3) n 3)\n         s [1 1]]\n    (cond\n      (= m 1) (list 1)\n      (= m 2) (list 1 1)\n      (> m n) (apply list s)\n      :else (recur (inc m) (conj s (+ (last s) (last (butlast s))))))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":26,"code":"#(loop [s 1 a 1 b 1 xs [1]] (if (= % s) xs (recur (inc s) b (+ a b) (conj xs b))))","user":"577832f4e4b0979f8965165b"},{"code":"(fn [n] (take n \n  ((fn fibseq [penult ult]\n    (lazy-seq (cons ult (fibseq ult (+ penult ult))))) 0 1)))","problem":26,"user":"4f50cadce4b03ad3f0c10d0f"},{"code":"(fn [x]  \n  (map first (take x \n    (iterate (fn [[p q]] [q, (+ p q)]) [1 1])\n  )))","problem":26,"user":"4e6def42535d5021c1a895f7"},{"problem":26,"code":"(fn [n] (take n (rest (map first (iterate (fn [[f s]] [s, (+ f s)]) [0, 1])))))","user":"586bc870e4b01531a375e964"},{"problem":26,"code":"#(take\n  % (map\n      last\n      (iterate\n        (fn\n          [[x y]]\n          [y (+ x y)]\n        )\n        [0 1]\n      )\n    )\n )","user":"5b549e61e4b02d533a91bd24"},{"problem":26,"code":"#(loop [i 0 res '()]\n\n    (if (= i %)\n\n      res\n\n      (recur (inc i) (if (= res '())\n\n                       '(1)\n\n                       (if (= res '(1))\n\n                         '(1 1)\n\n                         (concat res (list (+ (last res) (second (reverse res))))))))))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn [x]\n  (letfn [(fib [a b]\n               (cons a (lazy-seq (fib b (+ a b)))))]\n    (take x (fib 1 1))))","problem":26,"user":"53480973e4b084c2834f4a52"},{"problem":26,"code":"(fn [x]\n    (loop [fib 1\n           result [0]]  \n      (let [last-fib (last result)\n            result (conj result fib)]\n        (if (< (dec (count result)) x)\n          (recur (+ last-fib fib) result)\n          (rest result)))))","user":"57023e92e4b08d47c97781da"},{"problem":26,"code":"#(reverse ((fn fib [x] (or (if (= x 1) '(1)) (if (= x 2) '(1 1)) (cons (+ (first (fib (- x 1))) (first (fib (- x 2) )) ) (fib (- x 1) ) ))) %))","user":"5a8d55a8e4b05369db4d2514"},{"problem":26,"code":"(fn fib [num] (for [x (range num)] (if (<= x 1) 1 (reduce + (take-last 2 (fib x))))))","user":"5f309144e4b0574c87022c23"},{"code":"(fn fib [n]\n  (if (= n 3)\n    '(1 1 2)\n    (concat (fib (- n 1)) (list (+ (last (fib (- n 1))) (last (butlast (fib (- n 1)))))))\n    )\n  )","problem":26,"user":"50ae5659e4b0a40c9cfb08d2"},{"problem":26,"code":"(fn [x] \n  (letfn [(fib2 [n] (if (< n 2) 1 (+ (fib2 (- n 1)) (fib2 (- n 2)))))]\n    (map fib2 (range x))))","user":"54530382e4b0e397800069cc"},{"problem":26,"code":";; if n = 1 => '(1), if n = 2 => '(1 1), if n =3 (conj <prev> <sum of last 2>)\n;; Can we use take and iterate here?\n;; To generate, all we need is: val at cur-idx = (val at cur-idx - 2) + (val at cur-idx - 1)\n;; So we can generate a sequence of two element vectors \n;;([1 1] [1 2] [2 3] [3 5] [5 8] ...)\n\n(fn [n]\n  ;; Skipping n = 0 -> 2 as not being tested; we would include conditionals for these\n  (loop [i 2\n         res [1 1]\n         a 1\n         b 1]\n    \n    (if (= n i)\n      res\n      (recur (inc i)\n             (conj res (+ a b))\n             b\n             (+ a b)\n             ))))","user":"5c618140e4b0fca0c162262f"},{"code":"#(take %1\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ea84f48535d7eef308072f6"},{"code":"(fn fibo [n]\n  (cond\n\t\t(= 1 n) [1]\n\t\t(= 2 n) [1 1]\n\t\t:else (conj (fibo (dec n)) \n\t\t\t\t\t(+  (last (fibo (- n 2))) \n\t\t\t\t\t\t(last (fibo (- n 1)))\n\t\t\t\t\t)\n\t\t\t  )\n\t)\n\n)","problem":26,"user":"4faacc04e4b081705acca201"},{"problem":26,"code":"(fn [x]\n  (loop [fib [] c x]\n    (if (= c 0)\n      fib\n      (recur \n       (conj fib\n             (if (< (count fib) 2) 1\n               (+ \n                (last fib)\n                (nth fib (- (count fib) 2)))))\n       (- c 1)))))","user":"54381729e4b032a45b869310"},{"code":"(fn fib [n]\n  (map second \n       (reduce \n         (fn [fibs i] \n           (conj fibs\n                 [(second (last fibs)), (apply + (last fibs))])\n           )\n        [[0 1]] \n        (range 1 n)\n        )\n       )\n  )","problem":26,"user":"514677dce4b04ef915e3731a"},{"problem":26,"code":"( fn fib\n     [i]\n     (case i\n       0 []\n       1 [1]\n       2 [1 1]\n       (let [prevs (fib (dec i))]\n         (conj prevs (+ (last prevs) (second(reverse prevs)) ) ) ) ) )","user":"551da715e4b030e6a24d00de"},{"code":"#(loop [fibs []\n         i 0]\n    (println \"fibs:\" fibs)\n    (cond \n     (= i 0) (recur (conj fibs 0) (+ i 1))\n     (= i 1) (recur (conj fibs 1) (+ i 1))\n     (> i %) (rest fibs)\n     :else (recur (conj fibs (+ (last fibs) (last (butlast fibs)))) (+ i 1))))","problem":26,"user":"4fc6d2c1e4b0ee37620e181b"},{"code":"#((fn fib [n x y]\n   (when (pos? n)\n       (cons x (fib (dec n) y (+ x y))))) % 1 1)","problem":26,"user":"5141bc82e4b02fd87f5064c5"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (f 1 1))))","user":"559b55d6e4b066d22e731f54"},{"code":"#(take % ((fn fib\n  ([] (fib 1 0))\n  ([n p] (lazy-seq (cons n (fib (+ n p) n)))))))","problem":26,"user":"4e5bff2b535d8a8b8723a2bd"},{"code":"#(take % ((fn rfib [a b]\n(lazy-seq (cons a (rfib b (+ a b)))))\n1 1))","problem":26,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn [x]\n  (reverse (loop [a 0 b 1 ct (dec x) acc '(1)]\n    (if (zero? ct)\n      acc\n      (recur b (+ a b) (dec ct) (conj acc (+ a b)))))))","problem":26,"user":"4f592f83e4b0030a34fb2ad2"},{"problem":26,"code":"#(take % ((fn fib [a b](lazy-seq\n                       (cons a (fib b (+ b a)))\n                       )\n           ) 1 1)\n       )","user":"56f15eade4b04a395b9a048e"},{"code":"(fn [len]\n        (loop [s (list)]\n                (if (= (count s) len)\n                        (reverse s)\n                        (if (or (= (count s) 0) (= (count s) 1))\n                                (recur (conj s 1))\n                                (recur (conj s (+ (first s) (first (rest s)))))\n                        )\n                )\n        )\n)","problem":26,"user":"4eeb2b3c535d93acb0a668a7"},{"problem":26,"code":"(fn fibelements [n] (map (fn fibo [nx] (if (= nx 2) 1 (if (= nx 1) 1 (+ (fibo (- nx 2)) (fibo (- nx 1)))))) (range 1 (+ 1 n))))","user":"57497708e4b009280f9f2b9a"},{"code":"#(map \n  (fn fib [x]\n              (cond\n                (= x 1) 1\n                (= x 2) 1\n                :else (+ (fib (dec x)) (fib (- x 2)))))\n  (range 1 (inc %) 1))","problem":26,"user":"4ffb61a1e4b0678c553fc3d1"},{"code":"(fn [n]\n  ((fn [c r pv cv]\n     (if (= 0 c)\n       r\n       (recur (dec c)\n              (conj r (+ pv cv))\n              cv\n              (+ pv cv))))\n   (dec n) [1] 0 1))","problem":26,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":26,"code":"(let [fibboIter (fn fibbo-iter [x, y, n] (if (= n 0) x (fibbo-iter y (+ x y) (dec n))))\n        nthElementInFibbo (fn [n] (fibboIter 0 1 n))]\n    (fn [n] (map nthElementInFibbo (range 1 (inc n)))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":26,"code":"#(take % ((fn fib\n           ([] (fib 1 1))\n           ([a b]\n            (lazy-seq (cons a (fib b (+ a b))))))))","user":"5eb7b41ee4b00a66d4a9523c"},{"problem":26,"code":"#(take % (cons 1 (cons 1((fn fib\n    [pre cur]\n    (let [nex (+ pre cur)]\n      (cons nex (lazy-seq (fib cur nex))))) 1 1)))\n)","user":"5455a6d3e4b0e397800069e2"},{"problem":26,"code":"(fn [l n] \n (if (> n (count l)) \n        ( recur (conj l \n              (+ (last l) (last (butlast l)))        \n        ) n) l\n )\n) [1 1]","user":"55ed962ae4b0121d4835fddd"},{"problem":26,"code":"(fn\n  [n']\n  (loop [prev 0\n         cur 1\n         n n'\n         res []]\n    (if (zero? n)\n      res\n      (recur cur (+ prev cur) (dec n) (conj res cur)))))","user":"5cd1f5dae4b0ccb0619628f7"},{"problem":26,"code":"(fn f [n] (cond\n           (= 0 n) '()\n           (= 1 n) '(1)\n           (= 2 n) '(1 1)\n           :else (let [r (f (dec n))\n                       new (+ (last (butlast r)) (last r))]\n                            (reverse (conj (reverse r) new))\n                            )))","user":"554c0adde4b0a04f7929959e"},{"problem":26,"code":"(fn [n]\n    (if (= n 1)\n        [1]\n        (loop [prev1   1\n               prev2   1\n               rem-cnt 3\n               result  [1 1]]\n          (if (<= rem-cnt n)\n              (recur prev2\n                 (+ prev1 prev2)\n                 (inc rem-cnt)\n                 (conj result (+ prev1 prev2)))\n              result))))","user":"5803cd8fe4b0a837a8b30c96"},{"problem":26,"code":"#(take % \n    (map last\n       (iterate \n        \t(fn [prev] \n              (conj prev (+ \n                          (last prev) \n                          (last (butlast prev))\n                         )\n              )\n            ) \n        \t[0 1]\n       )\n    )\n)","user":"53fcb8f7e4b0de5c418485d4"},{"code":"(fn fibo [x]\n            (take x (map first (iterate (fn [[A B]] [B (+ A B)]) [1 1]))))","problem":26,"user":"4e6a4641535d8ccf87e9feb9"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (->> [2 '(1 1)]\n       (iterate (fn [[n result]]\n                  [(inc n) (cons  (+ (second result) (first result)) result) ]))\n       (drop-while #(not= (first %) x))\n       first second reverse\n       ))","user":"5bbbcf9ee4b0a20761a23614"},{"code":"(fn [z]\n  (reverse (loop [a 1, b 1, n z, s '()]\n    (if (= n 0)\n      s\n      (recur b (+ a b) (- n 1) (conj s a))))))","problem":26,"user":"4ff24a1ae4b0678c553fc337"},{"problem":26,"code":"(fn [n]\n  (cond\n    (<= n 0) '()\n    (= n 1)  '(1)\n    (= n 2)  '(1 1)\n    :else (loop [l [1 1]\n                 cnt (count l)]\n            (if (= cnt n)\n              l\n              (let [last-two (take-last 2 l)]\n                (recur (conj l (+ (first last-two) (second last-two))) (inc cnt)))))))","user":"5405fdcce4b0addc1aec6683"},{"problem":26,"code":"#(let [fibbo (fn fib \n                ([n] (fib [0 1] n))\n                ([x n] (if (< (count x) n) (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n) x)))] \n   (rest (fibbo (inc %))))","user":"55228c3ce4b0882d96d091a2"},{"problem":26,"code":"#(map (fn fib [x] (cond (< x 2) 1\n                  :else (+ (fib (- x 1)) (fib (- x 2)))\n                           )) (range %))","user":"5f419985e4b0955706451fab"},{"code":"#(take %  ((fn fib \n           ([] (fib 1 1))\n           ([a b] (cons a (lazy-seq (fib b (+ a b))))))))","problem":26,"user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn hoge [x]\n  (if (= x 1) '(1)\n   (if (= x 2) '(1 1)\n    (reverse (conj (reverse (hoge (- x 1))) (+ (last (hoge (- x 1)))\n                   (last (hoge (- x 2)))))))))","problem":26,"user":"4e2e6460535deb9a81d77f0b"},{"code":"(fn fib [n]\n  (loop [l [1 1]]\n    (if (= n (count l))\n      l\n      (recur (conj l (reduce + (take-last 2 l)))))))","problem":26,"user":"50c2fbebe4b00e537d00253c"},{"code":"(fn fib [n]\r\n  (if (= n 2)\r\n    [1 1]\r\n    (let [f (fib (dec n))]\r\n      (conj f (+ (last f) (last (butlast f)))))))","problem":26,"user":"4e994541535dbda64a6f6b64"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         c []\n         res [1 1]]\n    (cond (= n 1) (conj c a)\n          (= n 2) (conj c a b)\n          (= (count res) n) res\n          :else (recur b (+' a b) c (conj res (+' a b))))))","user":"56449c90e4b0284900eef5f8"},{"code":"(fn [x]\n (next (map first \n  (take (inc x) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))\n  )))","problem":26,"user":"507e5cf8e4b085af06e3afd1"},{"code":"#(loop [n % list '(1 1)]\n   (cond \n     (= n 2) list\n     :else (recur \n       (dec n)\n       (concat \n         list \n         [(+ \n            (last list) \n            (second (reverse list))\n            )]\n         )\n       )\n     )\n   )","problem":26,"user":"4ff54bfbe4b0678c553fc369"},{"code":"#(map\n   (fn fib [x]\n     (if (< x 3)\n       1\n       (+ (fib (- x 1))\n          (fib (- x 2)))))\n   (range 1 (+ 1 %)))","problem":26,"user":"506c0a02e4b0eda3100c090d"},{"problem":26,"code":"#(loop [x [1 1] y 2] (if (= y %) x (recur (conj x  (+  (last x)   (second (reverse x))  ) ) (inc y) )    )    )","user":"5dd69c8ce4b0948ae9d9ad83"},{"problem":26,"code":"(fn [n]\n   (let [vals (map #(+ % 1) (range n))\n         fib' (fn fib'' [n']\n                        (cond (= n' 1) 1\n                        (= n' 2) 1\n                        :otherwise (+ (fib'' (- n' 1)) (fib'' (- n' 2)))))]\n       (map fib' vals)))","user":"5717ad6fe4b07c98581c3b14"},{"code":"#(\n(fn fibo [a b count max & rest]\n\t(let [f (conj (first rest) b)]\n\t  (if (= count max)\n\t    (reverse f)\n\t    (fibo b (+ a b) (inc count) max f))))\n      0 1 1 %)","problem":26,"user":"5339af7de4b0e30313ee6cab"},{"problem":26,"code":"(fn [n] \n   (take n\n         (map second \n              (iterate (fn [[a b]] [b (+ a b)] ) [0 1]))))","user":"55efdc97e4b066087aa94542"},{"problem":26,"code":"(fn  [x]\n  (loop [number x\n         f 1\n         s 1\n         res '(1 1)\n         order 2]\n    (let [nextItem (+ f s)]\n      (conj res nextItem)\n    (if (= order x)\n      (reverse res)\n      (recur number s nextItem (conj res nextItem) (inc order))\n      )\n    )))","user":"550fb0bfe4b06e50f9beb17b"},{"problem":26,"code":"(fn fibs [n] (case n\n               1 [1]\n               2 [1 1]\n               (let [r (fibs (dec n))\n                     l (last r)\n                     m (nth r (- (count r) 2))]\n                 (conj r (+ l m)))))","user":"5dc40814e4b02f9375f4e1ae"},{"problem":26,"code":"#(map (fn fib[n] ( if (<= n 2) 1 (+ (fib (- n 2)) (fib (- n 1))))) (range 1 (inc %)))","user":"596f6683e4b069c0a1a19877"},{"problem":26,"code":"(fn[n] (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1]) (map first) (take n)))","user":"55da18d5e4b0e31453f64ad1"},{"code":"(fn fib [s n]\n  (if (= n 2)\n\t\t(reverse s)\n\t\t(fib \n\t\t\t(cons (+ (first s) (second s)) s) \n\t\t\t(dec n)))) '(1 1)","problem":26,"user":"4fb57e06e4b081705acca2bf"},{"problem":26,"code":"(fn [n]\n  (loop [res '(1)\n         m n]\n    (if (= 1 m)\n      (reverse res)\n      (recur (cons (apply + (take 2 res))\n                   res)\n             (dec m)))))","user":"5f2d6bc4e4b033932238a66e"},{"code":"(fn [n] (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (reduce \n            (fn [xs x] (conj xs (apply + (take-last 2 xs))))\n            [1 1]\n            (range 2 n)))\n)","problem":26,"user":"524740e7e4b05ef8e38e635d"},{"problem":26,"code":"(fn [x]\n  (drop-last \n   (reduce #(conj %1 (+ (%1 %2) (%1 (dec %2)))) \n           [1 1] \n           (range 1 x))))","user":"54f773bfe4b01ecee9d8881f"},{"code":"(fn [n]\n  (reverse (loop [n  n\n         xs (list 1 1)]\n    (if (= n 2) xs\n      (recur (dec n) \n             (conj xs (+ (first xs) (second xs))))))))","problem":26,"user":"509eeb3be4b08df8156e9e37"},{"code":"#(reverse\n   (loop [n1 1\n          n2 1\n          cnt %\n          acc ()]\n     (if (zero? cnt) acc\n         (recur n2 (+ n1 n2) (dec cnt) (conj acc n1)))))","problem":26,"user":"52c25645e4b07a9af579237d"},{"problem":26,"code":"(fn [n]\n  (loop [nums '(1 1)\n         iterations (- n 2)]\n    (if (<= iterations 0)\n      (reverse nums)\n      (recur (cons (apply + (take 2 nums)) nums) (dec iterations)))))","user":"56098ccbe4b0053d1b86c7e4"},{"problem":26,"code":"#(loop [idx 0 acc []]\n   (if (= idx %)\n     acc\n     (recur (inc idx)\n            (conj acc\n                  (case idx\n                    (0 1) 1\n                    (let [last-idx (dec (count acc))\n                          pre-last-idx (dec last-idx)]\n                      (+ (nth acc last-idx)\n                         (nth acc pre-last-idx))))))))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":26,"code":"(fn [x]\n  (loop [pos x\n         prev 0\n         next 1\n         acc []]\n    (if (zero? pos)\n      acc\n      (recur (dec pos) next (+ prev next) (conj acc next)))))","user":"556a6137e4b09a3098a524e0"},{"problem":26,"code":"#(let [n %] (loop [fib '(1 1)] (if (>= (count fib) n) (reverse fib) (recur (conj fib (+ (first fib) (second fib)))))))","user":"5a972643e4b0d174b936c778"},{"code":"(fn [i] (reverse (nth (iterate #(conj % (apply + (take 2 %))) '(1)) (dec i))))","problem":26,"user":"50e3fe8fe4b0463d32072488"},{"problem":26,"code":"(fn sk-take-fib [n]\n  (letfn [(fib [h t]\n             (lazy-seq (cons t (fib t (+ h t)))))]\n          (take n (fib 0 1))))","user":"5884f377e4b0f1effa3b76a8"},{"code":"(fn [n]\n  (loop [acc [1 1]]\n    (let [c (count acc)\n          back (fn [i] (nth acc (- c i)))]\n\t  (if (>= c n)\n        acc\n        (recur (conj acc (+ (back 1) (back 2))))))))","problem":26,"user":"516abecae4b081287f204e9f"},{"problem":26,"code":"(fn [n]\n  (letfn [(lazy-seq-fibo\n            ([]\n             (concat [1 1] (lazy-seq-fibo 1 1)))\n            ([a b]\n             (let [n (+ a b)]\n               (lazy-seq\n                (cons n (lazy-seq-fibo b n))))))]\n      (take n (lazy-seq-fibo))))","user":"565654dae4b0f9d632dd849f"},{"code":"#(take % ((fn f[] (lazy-cat [1 1] (map + (rest (f)) (f))))))","problem":26,"user":"52d66152e4b09f7907dd1357"},{"problem":26,"code":"#(take %\n   (map second\n     (iterate\n          (fn [[x y]] [y (+ x y)])\n          [0 1])))","user":"5e2bea53e4b05b4b015161d2"},{"problem":26,"code":"(fn [max_fib_num]  \n  (loop [a 0\n         b 1\n         curr_fib_num (- max_fib_num 1)\n         result [1]]  \n  (if (= curr_fib_num 0) \n    result\n    (recur b (+ a b) (dec curr_fib_num) (conj result (+ a b))))))","user":"54aa2462e4b09f271ff37cb4"},{"problem":26,"code":"#(take % ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"5a51e029e4b05d388ecb6bf0"},{"code":"(fn [a]\n  (loop [b [1 1] c 1 d 1 e 2]\n    (if (> a e)\n      (recur (conj b (+ c d))\n            (last b)\n            (+ c d)\n            (inc e))\n      b)))","problem":26,"user":"503279b1e4b0e78df07b0930"},{"code":"(fn[n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"53212063e4b09d4e7a9b54ae"},{"problem":26,"code":"(fn fib [n] (loop [i 2 fseq '(1 1)] \n               (if (= i n) \n                 (reverse fseq)\n                 (let [t1 (first fseq) t2 (first (rest fseq))]\n                     (recur (inc i) (conj fseq (+ t1 t2)))\n                   ) \n                 )\n               )\n   )","user":"574ec787e4b02ea114799249"},{"code":"#(\n  loop [x1 1\n        x2 1\n        result '[1 1]]\n  (\n    let [som (+ x1 x2)]\n    (\n      if (= (count result) %)\n        result\n        (recur x2 som (conj result som))\n    )\n  )\n)","problem":26,"user":"4ff2f0a9e4b0678c553fc341"},{"problem":26,"code":"#(loop [x '(1 1) n  2] (if (== n %) (reverse x) (recur (conj x (+ (first x) (second x))) (inc n))))","user":"5c950334e4b048ec896c5a44"},{"code":"#(\n  loop [cnt (- %1 1) seq [1]]\n  (if (zero? cnt)\n    seq\n    (recur (dec cnt) (conj seq (reduce + (take-last 2 seq))))\n    )\n  )","problem":26,"user":"4f99ae4ae4b0dcca54ed6d00"},{"problem":26,"code":"#(reverse (nth (iterate (fn [x] (conj x (+ (first x) (second x)))) '(1 1)) (- % 2)))","user":"549188f6e4b0b312c081ff3a"},{"code":"#(take % (map last(iterate (fn [[x y]] [y (+ x y)]) [0 1])))","problem":26,"user":"51ab1718e4b04e3dc0c27b2f"},{"code":"#(take % \n    (map first\n    \t(iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    )\n )","problem":26,"user":"525f51bde4b0cb4875a45dc8"},{"problem":26,"code":"(letfn [(fib [n]\n             (if (= n 1)\n    \t\t\t1\n    \t\t\t(if (= n 2)\n      \t\t\t1\n                  (+ (fib (dec n)) (fib (dec (dec n)))))))]\n  (fn [n]\n    (map fib (range 1 (inc n)))))","user":"556c70b6e4b09a3098a524fc"},{"code":"#(if (> %2 2) (recur (conj % (+ (last %)  (first (rest (reverse %)))\n  \t\t\t       )) (dec %2)) %) [1 1]","problem":26,"user":"4fa9da14e4b081705acca1e7"},{"problem":26,"code":"(fn [x]\n  (take x \n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"56990b68e4b0542e1f8d143a"},{"problem":26,"code":"(fn [n]\n  (loop [fib '(1 1)]\n    (if (= (count fib) n)\n      (reverse fib)\n      (recur (conj fib (let [[a b] fib] (+ a b)))))))","user":"5338e33fe4b0e30313ee6ca1"},{"code":"(fn [n]\n  (loop [fibs [1 1], c (- n 2)]\n    (if (pos? c)\n    (recur (conj fibs (reduce + (take-last 2 fibs))) (dec c))\n    fibs)))","problem":26,"user":"52a9b086e4b0c58976d9ac4e"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))]\n\t(take n (fib 1 1))))","user":"5a09ce8ce4b0eab8c0448930"},{"problem":26,"code":"(fn [n]\n  (take n    (drop 1 (map first (iterate\n                  (fn [[a b]] [b (+ a b)])\n                  [0N 1N])))\n        ))","user":"567ea403e4b0feffd0d18eb5"},{"problem":26,"code":"#(map\n  first\n  (take\n   %\n   (iterate\n    (fn \n     [[a b]]\n     [b (+ a b)])\n    [1 1])))","user":"58db7ae7e4b0a4d5acaab67f"},{"problem":26,"code":"(fn fib [n] \n    (drop 1 (reduce (fn [a b]       \n      (if (= 0 a) \n        (conj [] 0 1) \n        (conj a (+ (get a (- (count a) 2)) (last a))))) \n    (range (+ n 1)))))","user":"5f012a2ee4b0cf489e8d7f1e"},{"code":"(fn fib [x]\n  (if (or (= x 1) (= x 2))\n    [1 1]\n    (let [n (fib (- x 1)) a (last n) b (last (butlast n))] \n      (conj n (+ a b)))) )","problem":26,"user":"52824143e4b0757a1b171453"},{"code":"(fn fib [x]\n  (reverse\n    (last\n      (take\n        (- x 1)\n        (iterate\n          (fn [[a b & _ :as sequence]]\n            (conj sequence (+ a b)))\n          '(1 1))))))","problem":26,"user":"52e0e646e4b09f7907dd1416"},{"problem":26,"code":"(fn fib-seq [n]\n  (map first \n    (take n\n      (iterate (fn [[n0 n1]] [n1 (+ n0 n1)]) [1 1]))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":26,"code":"(fn [length]\n   (reduce\n    (fn [sequence _]\n      (conj sequence \n            (apply + (take-last 2 sequence))))\n    [1 1]\n    (range (- length 2))))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 0 b 1 coll [] cnt 0]\n    (if (= cnt n)\n      coll\n      (recur b (+ a b) (conj coll b) (inc cnt)))))","user":"583667c7e4b089d5ab817cfb"},{"problem":26,"code":"#(take %1 (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","user":"544fbabce4b0e39780006999"},{"code":"(fn f ([a] (concat [1 1] (f (- a 2) 1 1))) ([a b c] (if (= a 0) [] (cons (+ b c) (f (dec a) c (+ b c))))))","problem":26,"user":"520b67b5e4b0b022ef140c83"},{"problem":26,"code":"(fn fib\n  ([] \n   (fib 1 1) )\n  \n  ([n] \n   (take n (fib)))\n  \n  ([n0 n1] \n   (cons n0 (lazy-seq (fib n1 (+ n0 n1)))))\n  )","user":"5ac37d0fe4b0e27600da7718"},{"problem":26,"code":"(fn f [n1 n2 x]\n  (if (< x 1) '()\n   (cons n1 (f n2 (+ n1 n2) (dec x))) ))\n  1 1","user":"594c1baae4b07ddc2dafae59"},{"problem":26,"code":"(fn [n]\n  (loop [elems '(1 1)]\n    (if (= (count elems) n)\n      (reverse elems)\n      (recur (conj elems (+ (first elems)\n                            (second elems)))))))","user":"537cb3ade4b06839e8705e7d"},{"problem":26,"code":"(fn [x] (reverse (reduce (fn [fib s] (conj fib (+ (first fib) (first (rest fib))))) '(1 1) (repeat (- x 2) 1))))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":26,"code":"(fn [n]\n  (letfn [(helper [f1 f2]\n                   (lazy-seq (cons f1 (helper f2 (+ f1 f2)))))]\n    (take n (helper 1 1))))","user":"56a76f36e4b07966d5a8a05b"},{"problem":26,"code":"(fn [cnt] (take cnt (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5aa4a1ffe4b0d174b936c886"},{"problem":26,"code":"(fn \n  [n]\n  (->> (iterate (fn [[a b]] (vector b (+ a b))) '(1 1)) (map first) (take n)))","user":"597d0e43e4b0dbe32238d095"},{"code":"(fn fib [n] (loop [se [1 1]] (if (= n (count se)) se (recur (conj se (+ (last se) (second (reverse se))))))))","problem":26,"user":"53383c74e4b0e30313ee6c92"},{"problem":26,"code":"#(map (fn fib\n    [n]\n    (if (<= n 1)\n        n\n        (+' (fib (- n 1)) (fib (- n  2))))) (drop 1 (range (+ % 1))))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":26,"code":"#(take %\n       ((fn fib-seq [a b]                                  \n          (lazy-seq (cons a (fib-seq b (+ a b)))))\n         1 1))","user":"54e3bd3fe4b024c67c0cf7e0"},{"problem":26,"code":"#(loop [x [1 1]]\n   (if (= (count x) %)\n     x\n     (recur (conj x (apply + (take 2 (reverse x)))))))","user":"5873eb5ae4b01531a375ea45"},{"problem":26,"code":"(fn [size] (loop [size-left size fibo []] (cond (zero? size-left) fibo (< (count fibo) 2) (recur (dec size-left) (conj fibo 1)) :else (recur (dec size-left) (conj fibo (apply + (take-last 2 fibo)))))))","user":"57af4a93e4b0fbc9809a2733"},{"code":"(fn [iter] (take iter (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"504f3fa3e4b0a02f9cffde62"},{"problem":26,"code":"(comp\n reverse\n (fn fib \n   ([x] (fib x (list 1 1)))\n   ([x prev-fibs]\n    (if \n      (<= x (count prev-fibs))\n      (take x prev-fibs)\n      (let\n        [found-fibs (fib (- x 1) prev-fibs)]\n        (cons (reduce + (take 2 found-fibs)) found-fibs))))))","user":"54f904c2e4b01ecee9d88832"},{"code":"(fn fib [n] (take n  \n     (concat [1] ((fn rfib [a b] \n       (lazy-seq (cons (+ a b) (rfib b (+ a b))))) \n   0 1))))","problem":26,"user":"4efc4210535dced4c769f280"},{"code":"(fn [n]\n  (loop [fibs [1 1]]\n    (cond (= n 0) []\n          (= n 1) [1]\n          (= n (count fibs) n) fibs\n          :else (recur (conj fibs (+ (nth fibs (- (count fibs) 2))\n                                     (last fibs)))))))","problem":26,"user":"52963cc7e4b02ebb4ef7502d"},{"problem":26,"code":"(fn [x]\n  (loop [i 1\n         lista [0 1]]\n    (if (= i x)\n      (rest lista)\n      (recur \n       (inc i)\n       (conj lista (+ (nth lista (dec i)) (nth lista i)))))))","user":"56d3bc2de4b0ea9b8538f7b0"},{"problem":26,"code":"(fn [n]\n  (->> [0N 1N]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map second)\n       (take n)))","user":"55e1bb20e4b050e68259b41f"},{"code":"(fn fib [x] (if (= x 3) '(1 1 2) (if (= x 6) '(1 1 2 3 5 8) (if (= x 8) '(1 1 2 3 5 8 13 21)))))","problem":26,"user":"4f4d44f8e4b03ad3f0c10ca5"},{"code":"(fn [n]\n  (if (= 2 n)\n    [1 1]\n    (loop [iter 2\n           result [1 1]]\n      (if (= iter n)\n        result\n        (let [fib-n (reduce + (take-last 2 result))]\n        (recur (+ 1 iter) (conj result fib-n)))))))","problem":26,"user":"535d2e21e4b04ce2eb3ed2bd"},{"code":"(fn fib [n]\n  (take n '(1 1 2 3 5 8 13 21))\n)","problem":26,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":26,"code":"#(last\n  (take \n  %\n  (iterate\n   (fn [nums]\n    (cond\n     (empty? nums) '(1)\n     (= 1 (count nums)) '(1 1)\n     :else (let [reversed-list (reverse nums)\n                 last-fib (first reversed-list)\n                 second-to-last-fib (second reversed-list)]\n             (reverse (conj reversed-list (+ last-fib second-to-last-fib))))))\n   '(1))))","user":"4f4fc570e4b03ad3f0c10cea"},{"problem":26,"code":"#(take % (map second (iterate (fn[[a,b]] [b (+ a b)]) [0 1] )))","user":"55f8ad54e4b03cbcff9738b9"},{"problem":26,"code":"#(take %((fn fib [a b] \n       (cons a \n             (lazy-seq (fib b \n                            (+ a b)\n                            )\n                       )\n             )\n           )\n    1 1)\n       )","user":"55998d0ce4b031d6649c9bac"},{"code":"(fn [n]\n  (loop [fs '(1 1)]\n    (if (= n (count fs))\n      fs\n      (recur \n        (reverse (conj (reverse fs)\n                       (+ (first (reverse fs)) \n                          (second (reverse fs)))))))))","problem":26,"user":"4e970e6a535dbda64a6f6b4e"},{"problem":26,"code":"(fn [mx]  \n  (loop [x (- mx 2) result '(1 1)] \n    (if (> x 0)\n      (recur (dec x) \n        (conj result \n          (+ (first result) (second result))))\n      (reverse result))))","user":"5097cf53e4b00ad8bab4e976"},{"problem":26,"code":"#(loop [fibs [1 1] n %]\n   (if (<= n 0)\n     (take % fibs)\n     (recur (conj fibs (apply + (take-last 2 fibs))) (dec n))))","user":"5e144bd5e4b0a047bd49f6e7"},{"code":"(fn fib[n]\r\n  ( (fn [n i c]\r\n    (if (zero? n) c\r\n\t\t(recur (dec n) (inc i) (conj c (+ (last c) (first (rest (reverse c))))))\r\n\t  )\r\n\t) (- n 2) 0 [1 1]\r\n  )\r\n)","problem":26,"user":"4e7650c5535d324fb2983d68"},{"problem":26,"code":"#( loop [result [1 1] n 2 ] (if (= n %) (apply list result) (recur ( conj result (+ (nth result (- n 1) ) (nth result (- n 2)))) (inc n))))","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":26,"code":"(fn fib [n]\n  (loop [fib-nums [1 1]]\n    (if (>= (count fib-nums) n)\n      (subvec fib-nums 0 n)\n      (let [[n1 n2] (reverse fib-nums)]\n        (recur (conj fib-nums (+ n1 n2)))))))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn fibn [n]\n  (cond\n    (= 2 n) '(1 1)\n    :else\n      (let [fib (reverse (fibn (- n 1)))]\n        (reverse (conj fib (+ (first fib) (second fib)))))))","problem":26,"user":"505cc50ce4b0e6aca564be00"},{"code":"(fn [x]\r\n  ((fn fibon [f]\r\n    (cond \r\n      (= x 0) '()\r\n      (= x 1) '(1)\r\n      (= x 2) '(1 1)\r\n      (= (count f) x) f\r\n:else\r\n(fibon (reverse\r\n  (conj \r\n    (reverse f) (+ (last f) (last (butlast f))))))\r\n)) '(1 1)))","problem":26,"user":"4df30f76535d08e6dec9fe28"},{"code":"#(map (fn fib [n] (if (<= n 1) n (+ (fib (dec n)) (fib (- n 2))))) (take % (iterate inc 1)))","problem":26,"user":"4e6fa38b535d5021c1a89622"},{"problem":26,"code":"(fn fib [x]\n  (loop [count 0 fibs '(1 1)]\n    (if (< count x)\n      (recur (inc count) \n      (conj fibs (apply + (take 2 fibs))))\n      (take x (reverse fibs)))))","user":"5d4320fde4b07c84aa5ae690"},{"code":"(fn [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"52bd9cb7e4b07a9af5792304"},{"problem":26,"code":"(fn [num] \n  (loop [res [1 1] a 1 b 1 cnt (- num 2)]\n    (if (>= 0 cnt)\n      res\n      (recur (conj res (+ a b)) (+ a b) a (dec cnt))\n    )\n  )\n)","user":"5a4dbc97e4b05d388ecb6bae"},{"problem":26,"code":"(fn [x]\n  (map\n    (fn fib [x]\n      (case x\n        1 1\n        2 1\n        (+ (fib (- x 1)) (fib (- x 2))))) (map inc (range x))))","user":"55b24240e4b0da326a65cf7b"},{"code":"(fn n-fibs [n]\n  (let [fibs (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))]\n  (take n \n    fibs)))","problem":26,"user":"4ed98b40535d10e5ff6f5307"},{"problem":26,"code":"(fn fibonacci [n]\n  (if (= n 1)\n    [1]\n    (loop [coll [1 1]\n           i 2]\n      (if (< i n)\n        (recur (conj coll (+ (last coll) (nth coll (- i 2)))) (inc i))\n        coll))))","user":"5b2c76c8e4b025bcb146f2b6"},{"problem":26,"code":"(fn FibonacciSequence\n  [limit]\n  (loop [currLimit 1 output []]\n    (if (> currLimit limit)\n      output\n      (if (= currLimit 1)\n        (recur 2 [1])\n        (if (= currLimit 2)\n          (recur 3 [1 1])\n          (recur (inc currLimit) (conj output (+ (nth output (- currLimit 2)) (nth output (- currLimit 3)))))\n        )\n      )\n    )\n  )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":26,"code":"#(loop [n %\n        acc [1 1]]\n   (if (= n 2)\n     (seq acc)\n     (recur (dec n) (conj acc (reduce + (take-last 2 acc))))))","user":"56b2300ce4b0982f16b37dff"},{"code":"(fn [n]\n  (if (< n 2)\n    (if (= n 0)\n      '()\n      '(1))\n    ((fn auxfib [X i]\n      (if (= i n)\n        X\n        (auxfib (concat X [(+ (last X) (nth X (- (count X) 2)))]) (inc i))))\n      '(1 1) 2)))","problem":26,"user":"52bb2fc0e4b07a9af57922e0"},{"problem":26,"code":"(fn [x] \n  (take x\n        ((fn fib [a b]\n             (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"54a0be2fe4b0f3d1d8e70fba"},{"problem":26,"code":"(fn [sz]\n  (loop [maxim (- sz 2)\n          sofar [1 1]]\n     (if (= maxim 0)\n       sofar\n       (recur (dec maxim) (let [[a b] (drop (- (count sofar) 2) sofar)]\n                               (conj sofar (+ a b)))))))","user":"54159032e4b01498b1a719f5"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [fib-vec (fib (dec n))]\n      (conj fib-vec (+ (last fib-vec) (nth fib-vec (- (count fib-vec) 2)))))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"code":"(fn [n] (loop [x 0 y 1 coll [] i 0] \n  (if (< i n)\n(recur y (+ x y) (conj coll y) (inc i))\ncoll)))","problem":26,"user":"4ebf45c3535dfed6da9c6d9d"},{"problem":26,"code":"#(let [lazy-fibs ((fn f [a b]\n                    (lazy-seq (cons a (f b (+ a b)))))\n                  0 1)]\n   (rest (take (inc %1) lazy-fibs)))","user":"53e66df9e4b036ad0777e472"},{"problem":26,"code":"(fn g \n  ( [c] (g c [1 1] ))\n  ( [c d]\n    (if (= c 2) (seq d)\n    (recur (dec c) (conj d (reduce + (take-last 2 d))))      \n    )\n  )\n)","user":"5ac92dc3e4b0e27600da77bf"},{"problem":26,"code":"#(map (fn fib\n  [num]\n  (cond\n    (= num 0) 0\n    (= num 1) 1\n    (= num 2) 1\n    :else (+ (fib (- num 1)) (fib (- num 2))))) (range 1 (inc %)))","user":"53b2e953e4b047364c04449e"},{"code":"(fn [n]\n  (letfn [(fib [x]\n    (if (or (= x 0) (= x 1))\n         1\n         (+ (fib (- x 1)) (fib (- x 2)))))]\n    (map fib (range n))))","problem":26,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":26,"code":"(fn [n]\n        (condp = n\n          1 [1]\n          2 [1 1]\n          (loop [i 2\n                 acc [1 1]]\n            (if (= i n)\n              acc\n              (recur (inc i) (conj acc (+ (last acc) (last (butlast acc)))))))))","user":"5daa0d56e4b000c986472c3c"},{"problem":26,"code":";#(take %\n;       ((fn fib\n;          ([] (fib 1 1))\n;          ([x y] (lazy-seq (cons x (fib y (+ x y))))))))\n; daowen\n#(take % ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y))))) 1 1))","user":"5a544eeee4b05d388ecb6c24"},{"code":"(fn [n] (take n (map last (iterate #(vector (last %) (apply + %)) [0 1]))))","problem":26,"user":"53498f88e4b084c2834f4a64"},{"code":"#(loop [count 0 x 0 y 1 l '(1)]                                   \n  (if (< % 1)\n      '()\n    (if (= count %)                                               \n        (take % l)                                                          \n      (recur (inc count) y (+ x y) (concat l (cons (+ x y) '()))))))","problem":26,"user":"4f06f1db535dcb61093f6c19"},{"code":"#(map \n  (fn fib [x] (if (> x 2) (+ (fib (- x 1)) (fib (- x 2))) 1))\n  (range 1 (inc %)) \n)","problem":26,"user":"4e86a443535dc036d0eaab83"},{"code":"#(loop [o [] a 1 b 0]\n   (if (< (count o) %)\n       (recur (conj o a) (+ a b) a)\n       o))","problem":26,"user":"4f1d1d95535d64f603146488"},{"code":"(fn [n] \n  (loop [k 0, u 1, v 1, res ()]\n    (if (= k n) (reverse res)\n                (recur (inc k) v (+ u v) (conj res u)))))","problem":26,"user":"4e49a7bb535dc968683fc4c6"},{"problem":26,"code":"(fn [n] (take n (map last (iterate #(list (last %) (reduce + %)) '(0 1)))))","user":"559eb160e4b0acc240e314e1"},{"code":"(fn my-fib \n  [n]\n  (loop [i (dec (dec n)) res [1 1]]\n    (cond\n      (<= i 0) res\n      :else (recur (dec i) (conj res (+ (last res) (second (reverse res))))))))","problem":26,"user":"5300b750e4b0d8b024fd3711"},{"code":"#(take % ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) 1 1))\n\n;one of my favorites is dbyrne's solution:\n; (fn f [a b n] (if (> n 0) (cons a (f b (+ a b) (- n 1))))) 1 1","problem":26,"user":"530e5469e4b08068f379ecb7"},{"code":"(fn fib [n]\n  (map first(take n (iterate (fn [[x,y]] [y,(+ x y)]) [1,1]))))","problem":26,"user":"50d4309de4b09cc622d65a66"},{"problem":26,"code":"(fn [n](\n          map \n            (fn [r] (first (nth (iterate \n                                  (fn [[a b]][(+ a b) a])\n                                  [1 0]) r))) \n            (range n)))","user":"5da05bcce4b000c986472bd0"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        ((fn ! [a b]\n           (cons a (lazy-seq (! b (+ a b)))))\n          1 1)\n        ))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn [start] \r\n     (loop [n start, result '(1 1)]\r\n       (cond (zero? n) result\r\n             (= 1 n) result\r\n             (= 2 n) result\r\n            :else\r\n               (recur (dec n) \r\n                 (reverse (conj (reverse result) (+ (first (reverse result)) (second (reverse result)))))))))","problem":26,"user":"4e4c1e8c535dc968683fc4db"},{"code":"(fn [n]\n  (let [fib2 [1 1]]\n    (letfn [(fib [lst n]\n                 (let [revlst (reverse lst)]\n                   (if (zero? n)\n                     lst\n                     (recur (conj lst (+ (first revlst) (second revlst))) (dec n)))))]\n      (fib fib2 (- n 2)))))","problem":26,"user":"516f06dce4b06aac486e5b39"},{"code":"(fn fib [x]\n  (loop [prev 1 curr 1 acc [1 1] n 2]\n    (if (= n x)\n      acc\n      (recur curr (+ curr prev) (conj acc (+ curr prev)) (inc n)))))","problem":26,"user":"4ff548dee4b0678c553fc368"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fibs\n            ([] (fibs 1 1))\n            ([n m] (lazy-seq (cons n (fibs m (+ n m))))))]\n    (take n (f))))","user":"55955c0be4b0c79f6e1db967"},{"problem":26,"code":"#(loop [x [1] n %] (if (= 1 n) x (recur (conj x (apply + (take-last 2 x))) (dec n))))","user":"561a4769e4b053970a773b05"},{"problem":26,"code":"(fn [num]\n    (loop [result (list 1 1) count 2]\n        (if (or (= num 1) (= num 0))\n            (1))\n        (if (= count num)\n            (reverse result)\n            (recur (conj result (+ (first result) (second result))) (inc count)))))","user":"5896735fe4b00487982d529d"},{"code":"(fn [upperBound]\n  (loop [seqLength 2\n         acc [1 1]]\n    (if (= seqLength upperBound)\n      acc\n      (recur (inc seqLength) \n             (conj acc (apply + (take-last 2 acc)))))))","problem":26,"user":"535f295fe4b04ce2eb3ed2da"},{"problem":26,"code":"(fn [n]\n   (nth \n    (iterate \n      (fn [ & [xs] ]\n        (cond \n          (= [] xs) [1]\n          :else \n          (conj xs (apply + (take-last 2 xs)))))\n    [])\n    n))","user":"573a0ecce4b0cd1946bd1088"},{"code":"(fn [l] \n\t(loop [i (- l 2) res '(1 1)]\n\t\t(if (= i 0)\n\t\t\t(reverse res)\n\t\t\t(recur (dec i) (conj res (+ (first res) (second res)) ))\n\t\t)\n\t)\n\n)","problem":26,"user":"5242e1dae4b076204b44fa96"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib-recur [a b]\n           (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"609c1db9e4b00e9e6653c416"},{"problem":26,"code":"#(loop [r [1 1]]\n        (if (= (count r) %) \n          r\n          (recur (conj r (apply + (take 2 (reverse r))))))\n        )","user":"5880d686e4b0f1effa3b7623"},{"code":"#(reduce (fn [x y] (concat x [(+ (last x) (last (butlast x)))])) '(1 1) (range (- % 2)))","problem":26,"user":"4f85b7b5e4b033992c121c49"},{"code":"(fn f [x]\n  (take x\n        ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)))","problem":26,"user":"4fe8e719e4b0547ebccb2430"},{"code":"(fn [x]\n  (reverse ((fn [x s a b]\n    (if (= x 0)\n        s\n        (recur (dec x) (cons b s) b (+ a b))))\n  x '() 0 1)))","problem":26,"user":"504e1fdde4b0f6ff3350c468"},{"problem":26,"code":"#(loop [n (dec %1), acc [1]]\n    (if (<= n 0)\n      acc\n      (let [l (reverse acc)\n            f (first l)\n            s (or (second l) 0)]\n        (recur (dec n) (conj acc (+ f s))))))","user":"56e02c1ce4b0ca2494a09602"},{"problem":26,"code":"#(reverse (loop [n % xs '(1 1)] (let [[x y &res] xs] (if (< n 3) xs (recur (dec n) (conj xs (+ x y)))))))","user":"561039e0e4b05f002753df6c"},{"problem":26,"code":"(fn fib\n ([n]\n  (fib n 1 1))\n ([n a b]\n  (lazy-seq\n   (when (pos? n)\n    (cons a (fib (dec n) b (+ a b)))))))","user":"5de44684e4b0948ae9d9ae03"},{"problem":26,"code":"(fn [N]\n    (case N\n      [1] 1\n      [2] [1 1]\n      (loop [so-far [1 1] n 3 N N]\n         (if (<= n N)\n           (recur (conj so-far (+ (so-far (- n 3)) (so-far (- n 2)))) (inc n) N)\n           so-far))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq(fib b (+ a b))))) 1 1)))","user":"5610eda6e4b05f002753df78"},{"problem":26,"code":"(fn fib\n  ([n] (fib [1] n))\n  ([x, n] (if (< (count x) n) (recur (conj x (apply + (take-last 2 x))) n) x)))","user":"5515b68de4b055c2f668d4ef"},{"code":"(fn [n] (take n ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b) ) ) ) )  1 1)))","problem":26,"user":"4f5612f9e4b0a7574ea71812"},{"problem":26,"code":"#(take % ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"59ac0965e4b08cbb53654da6"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] [b (+ a b)]) [1 1])\n            )\n       )","user":"567b2f20e4b05957ce8c61a2"},{"problem":26,"code":"#(map first (take %1 (iterate (fn[[a b]] [b (+ a b)]) [1 1])))","user":"588e64ebe4b00487982d518a"},{"code":"#(loop [r [] x 1 y 0]\n  (if (< (count r) %)\n    (recur (conj r x) (+ x y) x)\n    r))","problem":26,"user":"4fe868d1e4b07c9f6fd12c3f"},{"problem":26,"code":"(fn [x] \n  (loop [cnt x acc [] lst 0 cur 1]\n    (if (= cnt 0)\n      acc\n      (recur (- cnt 1) (conj acc cur) cur (+ lst cur)))))","user":"565b941ce4b068f2fe63dc07"},{"problem":26,"code":"#(map \n  (fn fib [n]\n     (if (or (= n 0) (= n 1))\n       1\n       ( + (fib ( dec n )) (fib ( - n 2)))))\n  (range %))","user":"556880dae4b0c656e3ff1856"},{"problem":26,"code":"(fn [n] (reduce\n    #(conj %1\n      (+\n        (last %1) \n        (last (butlast %1))\n        %2))\n     [1 1]\n     (take (- n 2) (iterate identity 0))))","user":"5167e8ace4b0c5a4140a309a"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[val1 val2]]\n                       [val2 (+ val1 val2)]\n                       )\n                     [1 1]\n                     )\n            )\n       )","user":"5d4df658e4b0776584bd6f41"},{"code":"#(take % [1 1 2 3 5 8 13 21]) ; hehe","problem":26,"user":"4ede8789535d10e5ff6f5337"},{"problem":26,"code":"(fn [n]\n   (let [fib\n         (fn [i]\n           (Math/round (/ (- (Math/pow (+ 1 (Math/sqrt 5)) i)\n                             (Math/pow (- 1 (Math/sqrt 5)) i))\n                          (* (Math/pow 2 i)\n                             (Math/sqrt 5)))))]\n     (map (comp fib inc) (range n))))","user":"52475451e4b05ef8e38e6362"},{"code":"#(let [f (fn f [x] (if (< x 3) 1 (+ (f (- x 1)) (f (- x 2)))))]\n  (loop [s () c %]\n    (if (= c 0) s\n      (recur (cons (f c) s)\n        (- c 1)))))","problem":26,"user":"4f0ce26c535d0136e6c22312"},{"problem":26,"code":"(let [f (promise)]\n(deliver f (lazy-cat '(1 1) (map + @f (rest @f))))\n#(take % @f))","user":"55af7e21e4b03311e7b732cc"},{"code":"(fn fib [depth]\n   (if (= 2 depth)\n    [1 1]\n  (let [f (fib (dec depth))]\n         (concat f [(+ (last f) (nth f (- (count f) 2)))]))))","problem":26,"user":"4fe8a3bde4b07c9f6fd12c61"},{"code":"(fn [k] (map (fn [n] ((fn fib [x] (if (> x 2) (+ (fib (- x 1)) (fib (- x 2))) 1)) n)) (rest (range (+ k 1)))))","problem":26,"user":"4e89de60535d3e98b8023285"},{"problem":26,"code":"(fn [nterms]    \n    (loop [cnt    0\n           f-elem 1\n           s-elem 1\n           res []]\n      (if (= cnt nterms)\n        res\n        (recur (inc cnt) s-elem (+' f-elem s-elem) (conj res f-elem)))\n      )\n    )","user":"5c7d590ae4b0d597f478caaa"},{"code":"#(loop [counter % result '() a 1 b 1]\n   (if (= counter 0)\n       (reverse result)\n       (recur (dec counter) (conj result a) b (+ a b))))","problem":26,"user":"5194243be4b0142f60b4aed9"},{"code":"(fn [n]\n  (loop [n n, a 1, b 1, acc [1 1]]\n    (if (= n 2)\n      acc\n      (let [next (+ a b)]\n        (recur (dec n) b next (conj acc next))))))","problem":26,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":26,"code":"#(loop [[a b] [1 1] \n     \tacc []\n     \tn (dec %1)]\n   (if (= n 0)\n     (conj acc a)\n     (recur [b (+ a b)] (conj acc a) (dec n))\n     )\n   )","user":"5b284375e4b063e2438bcc53"},{"code":"#(loop [a 0 b 1 n % s []]\n    (if (zero? n) \n      s\n      (recur b (+ a b) (dec n) \n        (conj s b))))","problem":26,"user":"4f06dcad535dcb61093f6c16"},{"problem":26,"code":"#(reduce (fn [x y] (conj x (apply + (nthrest x y)))) [1 1] (take (- % 2) (range)))","user":"57a5f1e3e4b0a96607956200"},{"problem":26,"code":"(fn [n]\n  ( loop [ nu 1\n          nu1 0\n          n n\n          numbs [1]]\n    (if (< n 2)\n      numbs\n      (recur (+ nu nu1) nu (dec n) (conj numbs (+ nu nu1)))\n      )\n    )\n)","user":"5ce44ee2e4b0a17bb84e2b57"},{"problem":26,"code":"(fn [n] (loop [nums [1 1] n (- n 2)] (if (zero? n)\n                                        (reverse (into () nums))\n                                        (recur (conj nums (+ (last nums) (last (butlast nums)))) (dec n)))))","user":"55cd95b4e4b0e31453f64a1e"},{"code":"#(take % (map first\n       (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn fib [n]\n (loop [v [1 1]]\n  (if (= (count v) n) v ; return vector\n    (recur (conj v (+ (last v) (nth v (- (count v) 2))) )))))","problem":26,"user":"536c35c3e4b0fc7073fd6e3a"},{"problem":26,"code":"(fn fibo-seq [n]\n  (loop  [a 0\n          b 1\n          ans [1]]\n    (if (= (count ans) n) \n      ans \n      (recur b (+ a b) (conj ans (+ a b))))))","user":"5634995fe4b0bfe05bf117be"},{"problem":26,"code":"#(letfn [(fibs [a b] (cons a (lazy-seq (fibs b (+ a b)))))] (take % (fibs 1 1)))","user":"60225c2ae4b0d5df2af22201"},{"code":"(fn [x] (letfn [(fib [n] (if (< n 2) 1 (+ (fib (dec n)) (fib (- n 2)))))]\n          (map fib (range x))))","problem":26,"user":"51307b84e4b08c712d3fae39"},{"problem":26,"code":"(fn [a b acc c n] (if (= c (+ n 1)) (rest (reverse acc)) (recur b (+ a b) (conj acc a) (+ c 1) n))) 0 1 '() 0","user":"554d01a8e4b0a04f792995b3"},{"problem":26,"code":"(fn [n] \n  (loop [i 1\n         j 0\n         k 1\n         result [1]]\n         (if (<= n i)\n            result\n            (recur (inc i) k (+ j k) (conj result (+ j k))))))","user":"52e12ac5e4b09f7907dd141a"},{"code":"(fn [ n ]\n  (take n ((fn [] (map first (iterate (fn [ [a,b] ] [b (+ a b)]) [1 1]))))))","problem":26,"user":"4f1f1a9d535d64f60314649d"},{"code":"#(take % \r\n  ((fn fibo\r\n  ( []  ( fibo 1 1) )\r\n  ([x y]\r\n      (lazy-seq ( cons x (fibo y (+ x y) )))))))","problem":26,"user":"4fb23582e4b081705acca28a"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (< n 1) '(1)\n    (= n 2) '(1 1)\n    :else (loop [i 2 agg '(1 1)] (if (< i n) (recur (inc i) (conj agg (apply + (take 2 agg)))) (reverse agg)))))","user":"5dcd7933e4b0b296f82db5ae"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1, 1] )))","user":"56018b59e4b04bb52996e18c"},{"problem":26,"code":"#(loop [p 1 q 1 r [] s %]\n   (if (<= s 0)\n     r\n     (recur q (+ p q) (conj r p) (dec s))))","user":"53fa3524e4b0de5c41848578"},{"code":"(fn [r] (reverse (reduce (fn [i j] (conj i (+ (first i) (second i)))) '(1 1) (range 1 (- r 1)))))","problem":26,"user":"508c33ece4b0f17d83ea26b1"},{"problem":26,"code":"(fn fibseq\n  ([x]\n   (if (< x 1)\n     nil\n     (if (= x 1)\n       '(1)\n       (if (= x 2)\n         '(1 1)\n         (if (> x 2)\n           (fibseq x [1 1]))))))\n  ([x fib]\n   (if (= x (count fib))\n     fib\n     (fibseq x (conj fib (+ (last fib) (second (reverse fib))))))))","user":"5d896a64e4b0915913b1d3b8"},{"problem":26,"code":"(fn fib [n] (cond (= n 1) [1] (= n 2) [1 1] :else (let [s (fib (- n 1))] (conj s (+ (nth s (- n 2)) (nth s (- n 3)))))))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":26,"code":"(fn [n] \n  (take n \n    ((fn fib [a b] \n      (lazy-seq \n       (cons a (fib b (+ a b)))))\n     1 1)))","user":"57462a4de4b009280f9f2b5d"},{"problem":26,"code":"(fn [n]\n  (loop [fst 0\n         snd 1\n         cnt (- n 1)\n         output [1]]\n    (if (= cnt 0)\n      (seq output)\n      (recur snd (+ fst snd) (dec cnt) (conj output (+ fst snd))))))","user":"56b755b5e4b0982f16b37e46"},{"code":"(fn [n]\n  (take n (map first (iterate\n    (fn [[a b]]\n      [b (+ a b)])\n    [1 1]))))","problem":26,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"problem":26,"code":"(fn [x]\n  (loop [res [1 1]]\n        (if (>= (count res) x)\n          res\n          (recur (conj res (+' (inc (last res)) (dec (last (butlast res)))))))))","user":"5dfb7f6de4b0a607a9a45cdc"},{"problem":26,"code":"#(take %\n   (map first\n        (iterate (fn [[a b]]\n                   [b (+ a b)])\n                 [1 1])))","user":"550f1c99e4b06e50f9beb171"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 0 fir 0 sec 1 ans []]\n    (if (= i n)\n      ans\n      (recur (inc i) sec (+ fir sec) (conj ans sec))\n      )\n    )\n  )","user":"60337f1fe4b0d5df2af222c1"},{"problem":26,"code":"(fn [x]\n          (take x (apply (fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) '(1 1))))","user":"556e3b73e4b09a3098a52514"},{"problem":26,"code":"(fn [x] (loop [i 1 a 1 p 0 l '(1)] (if (= i x) (reverse l) (recur (inc i) (+ a p) a (conj l (+ a p))))))","user":"55c5820be4b0e31453f649b0"},{"problem":26,"code":"(fn fib2 [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"56c1d2dae4b0839206b9d68a"},{"problem":26,"code":"(fn [v]\n   (let [n (- v 2)]\n     (reduce (fn [acc item]\n               (let [lastv (last acc) \n                     prevlastv (get acc (- (count acc) 2))]\n                 (conj acc (+ lastv prevlastv)))) \n             [1 1] (range n))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"#(take % \n  ((fn fib [a b]\n    (lazy-seq (cons a (fib b (+ a b))))) \n      1 1))","problem":26,"user":"4ef2da4f535dced4c769f224"},{"problem":26,"code":"(fn [x]\n  (loop [res [] n x a 1 b 1]\n    (if (= 0 n)\n      res\n      (recur (conj res a) (- n 1) b (+ a b))\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":26,"code":"(fn fib [x]\n  (reverse\n\t((fn aux [n]\n  \t\t(if (= n 1)\n    \t\t'(1)\n    \t\t(if (= n 2)\n      \t\t\t'(1 1)\n      \t\t\t(#(conj % (+ (first %) (second %))) (aux (- n 1)))))) \n \tx)))","user":"56eb3f9de4b04a395b9a0420"},{"problem":26,"code":"(fn [c] (take c ((fn foo [a b]\n  (let [n (+ a b)]\n    (cons a (lazy-seq (foo b n))))) 1 1)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn fib [x]\n  (cond (= 1 x) [1]\n        (= 2 x) [1 1]\n    :else\n      (let [arr     (fib (dec x))\n            nlast   (- (count arr) 2)]\n        (conj arr (+ (last arr) (nth arr nlast))))))","problem":26,"user":"4fd718cee4b0dab7d829f37d"},{"problem":26,"code":"#(reduce \n  (fn [c n]\n    (if (> 2 (count c))\n      (conj c 1)\n      (conj c (+ (last c)\n                 (last (butlast c))))))\n  []\n  (range %))","user":"53bd7225e4b0d9a98559a6d2"},{"problem":26,"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (reduce (fn [fs _] (conj fs (reduce + (take-last 2 fs))))\n            [1 1]\n            (range 2 n))))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":26,"code":"(fn[x]\n    (loop [limit x custom-list [1 1]]\n\t(if (= limit 2)\n          custom-list\n          (recur\n           (dec limit)\n           (conj custom-list\n                 (+ (last custom-list)\n                    (first (take-last 2 custom-list))\n                 ) \n           )\n          )\n        )\n    ) \n)","user":"5d8c8175e4b0915913b1d3e1"},{"problem":26,"code":"(fn t [cnt]\n  (letfn [(fib [x]\n            (cond\n              (<= x 1) 1\n              :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (->> cnt range (map fib))))","user":"504e2d18e4b0f6ff3350c47a"},{"code":"#( loop [acc '(1), prev 1, n (- % 2)]\n   (let [nextacc (concat acc [prev])]\n   (if (<= n 0)\n     nextacc\n     (recur nextacc (+ prev (last acc)) (dec n)))))","problem":26,"user":"536c1119e4b0fc7073fd6e34"},{"code":"(fn [n]\n  (loop [curr [1], next 1, count 1]\n    (if (< count n)\n      (recur (conj curr next) (+ (last curr) next) (inc count))\n      curr)))","problem":26,"user":"4ffe3349e4b0678c553fc3f0"},{"code":"(fn [x] (loop [acc '() i 0]\n          (if (< i x) \n            (if (< i 2)\n                (recur (cons 1 acc) (inc i))\n                (recur (cons (reduce + (take 2 acc)) acc) (inc i)))\n            (reverse acc))))","problem":26,"user":"4f9754d4e4b0dcca54ed6ce9"},{"problem":26,"code":"(fn fibSeq [x]\n  (if (= x 1)\n    [1]\n    (conj (fibSeq (dec x)) ((fn fib [n]\n                              (case n\n                                1 1\n                                2 1\n                                (+ (fib (dec n)) (fib (- n 2))))) x))))","user":"57027310e4b08d47c97781e2"},{"code":"(fn [n]\n  (loop [n n\n         a 1\n         b 1\n         f []]\n    (if (zero? n)\n      f\n      (recur (- n 1) b (+ a b) (conj f a)))))","problem":26,"user":"51e58e02e4b0efabf93c02d0"},{"problem":26,"code":"#(loop [acc 1 output [1] c 1] (if (= c %) output (recur (+ acc (last output)) (conj output acc) (inc c))))","user":"57f17cb5e4b0bfb2137f5c0b"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"5958a0c8e4b066ee0a44af8c"},{"code":"(fn fib [n] \n  (if (< n 3) \n    (take n '(1 1))\n    (conj (vec (fib (dec n))) (apply + (take-last 2 (fib (dec n)))) )))","problem":26,"user":"524be8e0e4b09eba1c0223f1"},{"problem":26,"code":"(fn [n]\n  ((fn [n l]\n     (if (zero? n)\n       (reverse l)\n       (recur (dec n) (conj l (+ (first l) (second l))))))\n   (- n 2) '(1 1)))","user":"5e50012ae4b027a2e10ac0bd"},{"problem":26,"code":";; (fn [n] (map last (take n (iterate (fn [[a b]][b (+ a b)]) [0 1]))))\n\n;; use lazy-seq\n(fn [n]\n  (letfn [(fib [a b]\n               (lazy-seq (cons b (fib b (+ a b)))))]\n    (take n (cons 1 (fib 1 1)))))","user":"594bc16be4b07ddc2dafae39"},{"problem":26,"code":"(fn [n] (take n ((fn fib \n                  ([] (fib 1 1))\n                  ([a b] (lazy-seq (cons a (fib b (+ a b)))))))))","user":"514a3fa5e4b0829bd132edb6"},{"problem":26,"code":"#(loop [n 0\n               acc []]\n           (if (< n 2)\n             (recur (inc n) (conj acc 1))\n           (if (= n %)\n             acc\n             (recur (inc n) (conj acc (+ (last acc) (last (drop-last 1 acc))))))))","user":"60ab1536e4b00e9e6653c47e"},{"code":"(fn [x]\r\n  (loop [fib-seq '(1 1)\r\n         counter x]\r\n         (if (> counter 2)\r\n             (recur (conj fib-seq (+ (first fib-seq) (nth fib-seq 1)))\r\n                    (dec counter))\r\n             (reverse fib-seq))))","problem":26,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":26,"code":"#(take % \n       (map \n        first \n        (iterate \n         (fn [[b a]] [(+ b a) b]) \n         [1 0])\n        )\n       )","user":"59ee3060e4b0966464fe6a12"},{"problem":26,"code":"; using take, map, and iterate\n; iterate the function starting from the vector [1 1]\n; where the function changes [a b] to [b (+ a b)]\n; take 3 on the function without the map, produces ([1 1] [1 2] [2 3])\n; map first takes the first element out of each vector produced by the function (e.g., 1, 1, and 2)\n; - (map first (list [1 1] [1 2] [2 3])) produces (1 1 2)\n; - (map second (list [1 1] [1 2] [2 3])) produces (1 2 3)\n; take n trips through the map function\n; \n;fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n; switching map and take works just as well and is a little less confusing to me.\n; iterate creating the vectors n times and then use map to pull the fibonacci sequence\n(fn [n] (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n; using loop & recur\n;(fn [index] \n;   (loop [index index\n;          return []]\n;     (if (= 0 index)\n;       return\n;       (if (empty? return)\n;         (recur (- index 2) (conj return 1 1))\n;         (recur (dec index) (conj return (reduce + (take-last 2 return))))))))","user":"57c44053e4b05aa3c4741ccb"},{"problem":26,"code":"(fn [x] (loop [n x result '(1 1)]\n  (if (> n 2)\n    (recur (dec n) (conj result (+ (first result) (second result))))\n    (reverse result))\n  ) )","user":"5b754a5ae4b047b03b2036c8"},{"code":"(fn [n] (take n (\n  (fn fibo-seq []\n    ((fn fib [a b] \n      (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))))","problem":26,"user":"514dbd08e4b019235f6c058d"},{"problem":26,"code":"(fn [n] \n  (loop [s [1 1] a 1 b 1]\n    (if (= n (count s)) \n      s \n      (recur (conj s (+ a b)) \n             b\n             (+ a b)))))","user":"5a4caa20e4b05d388ecb6b94"},{"problem":26,"code":"(\n    fn\n    [n]\n    ((\n        fn\n        helper\n        [a,b, n]\n        (\n            cond\n            (= n 0)\n            '()\n            :else\n            (\n                let\n                [\n                    newvalue\n                    (+ a b)\n                ]\n                (\n                    conj\n                    (\n                        helper\n                        b\n                        newvalue\n                        (- n 1)\n                    )\n                    newvalue                    \n                )\n            )\n        )\n    )\n    1\n    0\n    n\n    )\n)","user":"4e6aacad535d8ccf87e9fefa"},{"problem":26,"code":"(fn cheat [n] (take n [1 1 2 3 5 8 13 21]))","user":"54c19c5be4b0ed20f4ff6f28"},{"code":"(fn [x]\n  (loop [f [1 1]]\n    (if (= x (count f)) f\n      (recur \n        (conj f (apply + (take-last 2 f)))\n      )\n    )\n  )\n)","problem":26,"user":"4e7e93f5535db169f9c7971a"},{"problem":26,"code":"(fn [n]\n  (take n (map second (iterate (fn [ [prev cur] ]\n             [cur (+ prev cur)]) [0 1]))))","user":"57934c67e4b0e215f87e8456"},{"problem":26,"code":"(fn [x]\n    (loop [i '(1 1)]\n        (if (= x (count i))\n            (reverse i)\n            (recur \n             (conj i (reduce + (take 2 i))))\n            )\n        )\n  )","user":"55129636e4b06e50f9beb1ab"},{"code":"(fn [n]\n    (let [nextfib\n           (fn [acc]\n             (conj acc (apply + (take 2 acc))))]\n      (reverse (nth (iterate nextfib '(1)) (dec n)))))","problem":26,"user":"4ff3df0fe4b0678c553fc355"},{"problem":26,"code":"#(take % (rest ((fn fib [] (lazy-cat '(0 1) (map + (fib) (rest (fib))))))))","user":"55af3e6be4b03311e7b732c7"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 2)) (fib (- x 1))))) (range 0 %))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [x] (reverse (\n(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n(let [fibo (fib (dec n))]\n  (cons (+ (first fibo) (second fibo)) fibo)))) x)))","problem":26,"user":"51960b79e4b04c0af7ff3c13"},{"problem":26,"code":"(fn [x]\n  (if (= 1 x)\n    [1]\n    (loop [acc [1 1] i 2]\n      (if (= i x)\n        (reverse acc)\n        (recur (concat [(+ (first acc) (first (rest acc)))] acc) (inc i))\n      )\n    )\n  )\n)","user":"5a8e9fb5e4b05369db4d2529"},{"problem":26,"code":"(fn [i] (rest (reduce (fn [acc x] (do (conj acc (+ (last acc) (or (second (reverse acc)) 1))))) [0] (repeat i 1))))","user":"56bfd8ade4b060a8e693e3a2"},{"problem":26,"code":"(fn [n]\n\t(let [func (fn iter [f1 f2 cnt seq]\n\t\t(if (= n cnt)\n\t\t\t(reverse seq)\n\t\t\t(iter f2 (+ f1 f2) (inc cnt) (conj seq f1))))]\n\t(func 1 1 0 nil)))","user":"5583888ae4b05c286339e117"},{"code":"(fn [n] (take n  (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"5217c26fe4b0a4bccb16cab8"},{"code":"(fn [num]\n  (let [fib (fn fib [n]\n              (if (< n 2)\n                1\n                (+ (fib (- n 1)) (fib (- n 2)))))]\n    (for [x (range num)]\n      (fib x))))","problem":26,"user":"4fdb881ee4b05e33b9224f5e"},{"code":"#(loop [seq []\n        x1 1\n        x2 1\n        num %]\n   (if (= 0 num)\n     seq\n     (recur (conj seq x1) x2 (+ x2 x1) (dec num))))","problem":26,"user":"52d6120ee4b09f7907dd134c"},{"problem":26,"code":"(fn fib [x] (if (= x 1) '[1] (let [f (fib (dec x))] (conj f (reduce + (take-last 2 f))))))","user":"56992162e4b0542e1f8d143c"},{"problem":26,"code":"#(loop [pos %\n        prev 0\n        curr 1\n        nums [1]]\n   (if (<= pos 1)\n     nums\n     (recur (dec pos) curr (+ prev curr) (conj nums (+ prev curr)))))","user":"5b5bc8e9e4b0c6492753e6b7"},{"code":"(fn [cnt]\n  (let [fib (fn [cnt a b accum]\n              (if (= cnt 0)\n                accum\n                (recur (dec cnt) (+ a b) a (conj accum a))))]\n    (fib cnt 1 0 [])))","problem":26,"user":"519be011e4b0a1d87b00344e"},{"code":"#(take % \n       (map first \n            (iterate (fn [[a b]] [b (+ a b)])\n                     [1 1])))","problem":26,"user":"4fd5418ee4b0d4de60cee372"},{"problem":26,"code":"#((fn fib [coll x0 x1 n]\n    (if (= n 0)\n      coll\n      (fib (conj coll (+ x0 x1)) x1 (+ x0 x1) (dec n))\n      )\n    )\n  [1 1] 1 1 (- % 2))","user":"5727031ee4b0c5bde472c12f"},{"code":"(fn fib [n] \n  (if (< n 3) \n    (if (= n 1) \n      [1] \n      [1 1]) \n    (let [rr (fib (dec n))]\n\t    (conj rr \n    \t      (apply + (take-last 2 rr))))))\n; this is insane\n\n;(fn fib [n]\n;  (let [dofib (fn dofib [n]\n;                (if (or (= n 0) (= n 1))\n;                  1\n;                  (+ (dofib (- n 1)) (dofib (- n 2)))))]\n;    (map dofib (range n))))\n\n;(fn fib [n]\n;  (let [dofib (fn dofib [i a b]\n;                (if (= i n)\n;                  '()\n;                  (conj (dofib (inc i) b (+ a b)) a)))]\n;    (dofib 0 1 1)))","problem":26,"user":"50f2e5cee4b0ec8ee6fa8643"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        ((fn fib-recur [a b] \n    \t\t(lazy-seq (cons a (fib-recur b (+ a b)))))\n   \t\t  1 1)))","user":"5aefedc0e4b0cc2b61a3bc42"},{"code":"(fn [x] (\n  if (= x 3)\n    '(1 1 2)\n    (if (= x 6)\n      '(1 1 2 3 5 8)\n      '(1 1 2 3 5 8 13 21))\n))","problem":26,"user":"4f73054fe4b07046d9f4f03e"},{"problem":26,"code":"(fn [n]\n  (take n \n        ((fn fib [a b]\n        \t(cons a\n                  (lazy-seq (fib b (+ a b)))))\n         1 1)))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":26,"code":"(fn [n] (nth (iterate #(conj % (apply +' (take-last 2 %))) '[1 1]) (- n 2)))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":26,"code":"(fn [m]\n  (letfn [(fib [n]\n            (cond\n              (= n 0) 1\n              (= n 1) 1\n              :else (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range 0 m))))","user":"53b6b6c8e4b047364c0444ca"},{"code":"(fn fib2 [x]\n  (loop \n    [i 0\n    last-fib 1\n    result [0]]\n       (if (= x i)\n         (rest result)\n         (do \n           (recur \n             (inc i) \n             (last result) \n             (conj result (+ last-fib (last result))))))))","problem":26,"user":"4ebbf772535dfed6da9c6d76"},{"problem":26,"code":"(fn fib ([len]\n           (println (str \"1-arity branch and len=\" len))\n           (fib len '()))\n  ([len myCurrFibList]\n   (println (str \"2-arity branch and len=\" len))\n   (println (str \"count of myCurrFibList=\"  (count myCurrFibList)))\n   (if (= (count myCurrFibList) len)\n     (do\n       (println \"made it to terminal branch\")\n       myCurrFibList)\n     (if (< (count myCurrFibList) 2)\n       (fib len (conj myCurrFibList 1))\n       (do (let [myNewTerm (reduce + (take 2 (reverse myCurrFibList)))]\n             (println (str \"my new term is \" myNewTerm))\n             (println (str \"my next FibList is \"\n                           (reverse (conj (reverse myCurrFibList) myNewTerm ))))\n             (fib len (reverse (conj (reverse myCurrFibList) myNewTerm ))))))\n     )\n   )\n  \n  )","user":"59a2d49de4b066c664927d30"},{"problem":26,"code":"(fn [n]\n  (loop [acc '(1 1), n n]\n    (if (< n 3)\n      (reverse acc)\n      (recur (cons (+ (first acc) (second acc)) acc) (- n 1)))))","user":"55fbf6cae4b0f488688e066c"},{"code":"(fn [n]\n  (loop [m n a [1 1] i 1 j 1]\n    (if (= m 2)\n      a\n      (recur (dec m) (conj a (+ i j)) j (+ i j)))))","problem":26,"user":"504e1abee4b0f6ff3350c45d"},{"problem":26,"code":"(fn fibn\n  [x]\n  (map (fn fh \n         [n]\n         (cond (<= n 2) 1 :else (+ (fh (- n 1)) (fh (- n 2)))))\n       (range 1 (inc x))))","user":"5a16da30e4b0ff51aa4b31cc"},{"problem":26,"code":"#(map (fn f_ [n]\n  (cond (<= n 1) 1\n        :else (+ (f_ (- n 1)) (f_ (- n 2))))) (range %))","user":"5794fd7be4b0e215f87e8476"},{"problem":26,"code":"(fn fib [n] \n\t(loop [i 1 result []]\n\t\t(if (<= i 2)\n\t\t\t(recur (inc i) (conj result 1))\n\t\t\t(if (> i n)\n\t\t\t\tresult\n\t\t\t\t(recur (inc i) (conj result (+ (last result) (last (butlast result)))))))))","user":"54b4046de4b05787c3b16389"},{"problem":26,"code":"#(take % ((fn fib ([n m] (cons n (lazy-seq (fib m (+ n m)))))) 1 1))","user":"55041b5ee4b086ebe8a79c78"},{"problem":26,"code":"(fn [n](loop [n (- n 2) col [1 1]]\n            (if (zero? n)\n            col\n            (recur (dec n)\n                   (conj col (apply + (take-last 2 col)))))))","user":"51fa90aae4b0f1313d4689e0"},{"problem":26,"code":"(fn [n] (if (<= n 2) (repeat n 1) (reverse (reduce (fn [a e] (conj a (apply + (take 2 a)))) '(1 1) (range (- n 2)) ))) )","user":"5ccf21c4e4b0ccb0619628c1"},{"code":"#((fn [res num cur]\n       (cond (= 1 num) 1\n             (= cur num) (reverse res)\n             :else (recur (cons (+ (first res)\n                                   (second res))\n                                res)\n                          num\n                          (inc cur))))\n     '(1 1)\n     %\n     2)","problem":26,"user":"4f71347ae4b07046d9f4f009"},{"problem":26,"code":"(fn [l]\n   (vec\n   (map \n    (fn fib [x] \n      (if (< x 2) \n        1\n        (+ (fib (- x 1))\n           (fib (- x 2))\n        )\n      )\n    )\n    (take l (range))\n   ))\n)","user":"5bca2c71e4b07a9b28b100e7"},{"problem":26,"code":"#(take % ((fn fib [a b] \n           (cons a \n                 (lazy-seq (fib b (+ a b))))) 1 1))","user":"55aa67eae4b0988bba2ad94c"},{"problem":26,"code":"(fn [z] (let[n (fn [x] (conj x (+ (first x) (second x))))]\n          (reverse (last (take (- z 1) (iterate n '(1 1)))))))","user":"5fdd15f7e4b05ac5b16ea141"},{"problem":26,"code":"(fn fib [n]\n  (if (= 1 n) '(1)\n   (if (= 2 n) '(1 1)\n     (let [prev-fib (fib (dec n)), new_element (+ (last prev-fib) (nth prev-fib (- (count prev-fib) 2)))]\n       (concat prev-fib (list new_element)\n        )\n      )\n     )\n    )\n  )","user":"578acd37e4b0ebec4cfb7541"},{"code":"(fn fib \n  ([n] (fib 0 1 (dec n) '(1)))\n  ([prev n count acc]\n     (let [new (+ prev n)]\n       (if (== count 0)\n         (reverse acc)\n         (fib n new (dec count) (cons new acc))))))","problem":26,"user":"5123f099e4b02c3f2a072cca"},{"problem":26,"code":"(fn fib2 [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      (into '() (reverse x)))))","user":"53ac2d45e4b047364c04445b"},{"code":"(fn fib [n]                                                               \n         (loop [n n                                                                \n                a 1                                                                \n                b 2                                                                \n                acc '(1)]                                                          \n           (if (= 1 n)                                                             \n             (reverse acc)                                                         \n             (recur (dec n) b (+ a b) (cons a acc)))))","problem":26,"user":"4fd11132e4b04c3a95aa0409"},{"code":"#(loop [n1 0 n2 1 acc '[] c %]\n(if (>= 0 c) acc \n(recur n2 (+ n1 n2) (conj acc n2) (dec c))))","problem":26,"user":"4e6cf61a535de274dd8d818c"},{"problem":26,"code":"(fn [len]\n  (loop [start 1\n         acc [1 1]]\n     (if (= len (count acc))\n       acc\n       (recur (inc start)  (conj acc (apply + (take-last 2 acc)))))))","user":"52c03baee4b07a9af5792347"},{"problem":26,"code":"#(loop [coll [1 1]]\n   (if (= (count coll) %)\n     coll\n     (recur (conj coll (+ (inc (last coll)) (dec (last (butlast coll))))))))","user":"4f925791e4b0dcca54ed6cac"},{"problem":26,"code":"(fn [x]\n  (loop [coll [1 1]]\n    (if (= (count coll) x)\n      coll\n      (recur (conj coll (apply + (take-last 2 coll)))))))","user":"5665ef78e4b0e91d5f5c5664"},{"problem":26,"code":"(fn fib [end]\n  (loop [size 2 result [1 1]]\n    (if (>= size end)\n      result\n      (recur (inc size) (concat result (list (+ (nth result (- size 2)) (nth result (- size 1)))))))))","user":"55076bf6e4b021ccfedb96a6"},{"problem":26,"code":"(fn fib [n] \n  (loop [nSoFar 2\n         items [1 1]]\n    (if (= nSoFar n)\n      items\n      (recur (inc nSoFar) (conj items (+ (last items) (nth items (- nSoFar 2))))))))","user":"54336443e4b0b6b47310fcde"},{"problem":26,"code":"(fn [n]\n  {:pre [(pos? n)]}\n  (letfn [(fibonacci [a b]\n                     (lazy-seq\n                      (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"5785de4ce4b0ebec4cfb74e6"},{"problem":26,"code":"(fn [x]\n  (->> [1 1]\n  (iterate (fn [[a b]] [b (+ a b)]))\n  (map first)\n  (take x)))","user":"528e441be4b0239c8a67aed8"},{"problem":26,"code":"(fn [n]\n  (loop [x 0 y 1 nums '() n n]\n    (if (= 0 n)\n      (reverse nums)\n      (recur y (+ x y) (conj nums y) (dec n)))))","user":"5771b155e4b0979f896515ba"},{"problem":26,"code":"(fn fib4 [n]\n    (map second (take n (iterate (fn [[x y]] [y (+ x y)]) [0 1]))\n    ))","user":"5d1cf523e4b02ea6f0fb6994"},{"code":"(fn [n] (map (fn ! [i] (case i\n                         1 1\n                         2 1\n                         (+ (! (dec i))\n                            (! (- i 2)))\n                       ))\n             (range 1 (inc n))))","problem":26,"user":"52d4004ae4b09f7907dd1328"},{"code":"(fn [n] (loop [c (- n 3) s [1 1 2]] (if (= c 0) s (recur (- c 1) \n                                                  ((fn [x] (if (<=(count x) 2)\n               (take (+ 1 (count x)) [1 1 2])\n               (conj x (+ (nth x (- (count x) 2)) (nth x (- (count x) 1)))))) s)))))","problem":26,"user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":26,"code":"(fn [x]\n  (loop [i 1, j 1, acc [1 1]]\n    (if (= (count acc) x)\n      acc\n      (recur j (+ i j) (conj acc (+ i j))))))","user":"5d9475e4e4b0d3f9b434ad25"},{"code":"#(loop [a 0\n        b 1\n        l []]\n  (if (= % (count l))\n    l\n    (recur b (+ a b) (conj l b))))","problem":26,"user":"52753740e4b03e8d9a4a74c1"},{"code":"#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"4daed74dedd6309eace4d163"},{"problem":26,"code":"#(reduce \n  (fn [a b] (conj a (+ (last a) (last (butlast a)))))  \n  [1 1]                      \n  (range (- % 2)))","user":"5890799be4b00487982d51d6"},{"problem":26,"code":"(fn fib [x] \n   (loop [n x fibnums '()]\n     (if (> n 0)\n       (if (= 0 (count fibnums)) \n         (recur (- n 1) '(1))\n         (if (= 1 (count fibnums))\n           (recur (- n 1) '(1 1))\n           (recur (- n 1) (conj fibnums (+ (first fibnums) (nth fibnums 1))))))\n           (reverse fibnums))))","user":"5c8aa1b5e4b048ec896c5959"},{"problem":26,"code":"(fn [n]\n   (loop [i 1 result '(1)]\n     (if (>= i n)\n       (reverse result)\n      (recur (+ i 1) (conj result (reduce + (take 2 result)))))))","user":"570577bbe4b0b0fb43fd0672"},{"problem":26,"code":"#(loop [sofar '(1, 1)]\n   (if (= % (count sofar))\n     sofar\n     (let [rev (reverse sofar) nextnum (+ (first rev) (second rev))]\n       (recur (reverse (conj rev nextnum))))))","user":"576584c1e4b0994c1922fc0e"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (loop [res [] i 0 newe 1 preve 0]\n    (if (< i x )\n      (recur (conj res newe) (inc i) (+ newe preve) newe)\n      res\n      )))","user":"572bc7cae4b0cd1946bd0f45"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [n-param]\n         (if (= n-param 0) 1\n           (if (= n-param 1) 1\n             (+ (fib (- n-param 2)) (fib (- n-param 1)))))) (range n)))","user":"58a953dae4b01a0c0b232968"},{"problem":26,"code":"(fn [i] \n  (reduce\n   (fn [vs x]\n     (let [back1 (nth vs x 0)\n           back2 (nth vs (inc x) 0)] \n       (conj vs (+ back1 back2))))\n   [1 1]\n   (range (- i 2))))","user":"5cec07fce4b0a17bb84e2bf0"},{"problem":26,"code":"(fn [y] (loop [x 2\n         r [1 1]]\n    (if (< x y)\n      (recur (inc x) (conj r (+ (nth r (- x 2)) (nth r (- x 1)) )))\n      r)))","user":"544e8369e4b0e39780006987"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1] n n]\n    (if (= n 2)\n      result\n      (recur (conj result (+ (last result) (last (butlast result)))) (dec n))\n      )\n    )\n  )","user":"57a13745e4b0c3d858beb8e3"},{"problem":26,"code":"(fn [n]\n  (loop\n    [n n\n     a 0\n     b 1\n     acc []]\n    (if (= n 0)\n      acc\n      (recur (dec n) b (+ a b) (conj acc b)))))","user":"55c66d3de4b0e31453f649c1"},{"problem":26,"code":"#(map (fn fib [x]\n  (cond\n   (= 0 x) 1\n   (= 1 x) 1\n   :else (+ (fib(- x 1)) (fib(- x 2))))) (range %))","user":"54ab502fe4b09f271ff37cc4"},{"problem":26,"code":"(fn fib\n  [limit]\n  (take limit\n        ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5e172edce4b054039d6af22b"},{"code":"(fn myfiblist [n]\n  (do\n\t (println n)\n\t (cond (= n 1) '(1)\n\t       (= n 2) '(1 1)\n\t       true  (let [a (myfiblist (- n 1))]\n\t\t       (println (str a\" \" n \" \" (count a) \": \" (last a) \", \" (nth a (- (count a) 1))))\n\t\t       (concat  a (list(+ \n\t\t\t\t(nth a (- (count a) 2))\n\t\t\t\t(last a))))\n\t       )\n\t       )))","problem":26,"user":"4e6cf2be535de274dd8d818a"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [y (+' x y)]) [1 1])))","user":"5512c935e4b055c2f668d4b8"},{"problem":26,"code":"(fn [n] (loop [i n r []] \n          (if (= i 0) r\n            (if (>= i (- n 1)) (recur (dec i) (conj r 1)) \n              (recur (dec i) (conj r (+ (nth r (- (count r) 1)) (nth r (- (count r) 2)) )) )\n              )\n            ) ))","user":"598229d6e4b021a7a535fdfb"},{"problem":26,"code":"(fn [n]\n  (loop [prev 1\n         prev2 0\n         result nil\n         acc 0]\n    (if (= acc n)\n      (reverse result)\n      (recur (+ prev prev2) prev \n             (conj result prev) \n             (inc acc)))))","user":"5560f39ce4b0c656e3ff17c2"},{"code":"(fn my-fib [n]\n  (loop [prev0 1 prev1 1 lst [1 1]]\n\t\t(if (= (count lst) n)\n          lst\n          (recur prev1 (+ prev0 prev1)\n                 (conj lst (+ prev0 prev1))))))","problem":26,"user":"50720885e4b0e3170b5a8689"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (> n 2) (let [last-fib (fib (dec n))]\n              (concat last-fib (list (apply + (drop (- (count last-fib) 2) last-fib)))))\n    (= n 2) '(1 1)\n    (= n 1) '(1)))","user":"5d90190ce4b0915913b1d3f7"},{"problem":26,"code":"(fn [n] (take n (\n  (fn fibonacci\n    ([] (fibonacci 1 1))\n    ([a b] (cons a (lazy-seq (fibonacci b (+ a b)))))))))","user":"52dc55e2e4b09f7907dd13cd"},{"problem":26,"code":"(fn [n] (map #(get % 1) (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5672925fe4b05957ce8c6114"},{"problem":26,"code":"(fn [n]\n  (loop [l '(1) s 0 c 1]\n    (if (not (< c n))\n      (reverse l)\n      (recur (conj l (+ s (first l))) (first l) (inc c)))))","user":"52979551e4b02ebb4ef75043"},{"problem":26,"code":"(fn [n]\n  (reduce \n   (fn [a b]\n     (conj a (+' (last a)\n                  (last (butlast a)))))\n   [1 1]\n   (range (- n 2))))","user":"5dbf6016e4b0e59a23173d79"},{"problem":26,"code":"#(take % ((fn fib [f1 f2]\n            (lazy-seq (cons f1 (fib f2 (+' f1 f2))))) 1 1))","user":"5cf115eee4b0aaa82f112a08"},{"problem":26,"code":"(fn [n]\n  (let [fib-seq (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))]\n    (take n (drop 1 fib-seq))))","user":"51cf0993e4b0e42293a2256a"},{"code":"(fn fib [num]\n  (take num (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"53713ed9e4b0fc7073fd6eaf"},{"problem":26,"code":"(fn [z] (reduce (fn [v, f] (f v)) [1,1] (map (fn [i] (fn [x] (conj x (+ (first (reverse x)) (second (reverse x)))))) (take (- z 2) (range)))))","user":"5d87cc7ee4b0915913b1d3a3"},{"problem":26,"code":"(fn [x]\n  (loop [n 2\n         result [1 1]]\n    (if (= (count result) x)\n      result\n      (recur (inc n)\n             (conj result (+ (nth result (dec n))\n                             (nth result (- n 2))))))))","user":"5e5fa1ffe4b0fd0acd15867d"},{"problem":26,"code":"(fn [fs]\n  (let [fib (fn [s] (let [l (reverse s)\n                         x (cons (+ (first l) (second l)) l)]\n                    (reverse x)))\n       fib-seq (iterate fib '(1 1))\n       nfibs (fn [n] (last (take (- n 1) fib-seq)))]\n  (nfibs fs)))","user":"54431b6ee4b032a45b869385"},{"code":"(fn fibbonachi \n  ([count] (fibbonachi (- count 2) '(1 1)))\n  ([count result-sec] \n     (if (= count 0)\n       (reverse result-sec)\n       (recur (dec count)  (conj result-sec (+ (first result-sec) (second result-sec)))))))","problem":26,"user":"51f297a3e4b0210f90e74552"},{"problem":26,"code":"(fn [n]\n  (let [gen (fn [count nums]\n    (if (zero? count)\n      nums\n\t  (recur (dec count)\n             (cons (reduce + (take 2 nums)) nums)\n             )))]\n    (take n (reverse (gen n '(1 1))))))","user":"4f29d9abe4b0d6649770a034"},{"code":"(fn [n]\n       (let [fibs \n             (fn fibs \n               ([] (concat '(1 1) (fibs 1 1)))\n               ([x y]\n                 (let [n (+ x y)]\n                   (cons n\n                     (lazy-seq (fibs y n))))))]\n         (take n (fibs))))","problem":26,"user":"4db2f208535df7e46ed9b6c9"},{"code":";; Let's try something new...\n(fn lazy-seq-fib\n  ([] \n   (concat [1 1] (lazy-seq-fib 1 1)))\n  ([a b]\n   (let [n (+ a b)]\n     (lazy-seq\n      (cons n (lazy-seq-fib b n)))))\n  ([n]\n   (take n (lazy-seq-fib))))","problem":26,"user":"53322cece4b019098a6f8b73"},{"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (loop [fibs '(1 1)]\n      (if (= n (count fibs))\n         fibs\n         (recur \n           (let [rfibs (reverse fibs)]\n             (sort (conj fibs (+ (first rfibs) (second rfibs))))\n           )  ; end let\n         )  ; end recur\n      )  ; end if\n    )  ; end loop\n  )  ; end if\n) ; end fn","problem":26,"user":"530c462ae4b02e82168697d9"},{"code":"#(loop [cnt % result '()]                                                                                                                                                                                                                                                      \n            (if (> cnt 0)                                                                                                                                                                                                                                                              \n                      (if (< (count result) 2) (recur (dec cnt) (conj result 1))                                                                                                                                                                                                       \n                                    (recur (dec cnt)                                                                                                                                                                                                                                   \n                                           (reverse (conj (reverse result) (+ (nth result (- (count result) 1)) (nth result (- (count result) 2))))))) result ))","problem":26,"user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [x]\n  (letfn [(fib-seq [a b]                                                                                      \n            (cons a (lazy-seq (fib-seq b (+ b a)))))]                                                         \n    (take x (fib-seq 1 1))))","problem":26,"user":"52b43708e4b0c58976d9ad1d"},{"problem":26,"code":"(fn fib [ct]\n  (let [fv (fn fv [ct]\n    (if\n      (< ct 3) 1\n      (+ (fv (dec ct)) (fv (dec (dec ct))))))]\n    (for [rv (range 1 (inc ct))] (fv rv))))","user":"59780ee5e4b01722bebd4d01"},{"problem":26,"code":"(fn [n]\n  (loop [results '(1 1) size 2]\n    (if (>= size n)\n      \t(take n (reverse results))\n         (recur \n            (cons (reduce + (take 2 results)) results)\n            (+ 1 size)\n           )\n      )\n    )\n  )","user":"5e078ba7e4b0978307768fb6"},{"problem":26,"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (loop [res [1 1]]\n      (let [[a b] (reverse res)]\n      (if (= (count res) n)\n        res\n        (recur (conj res (+ a b))))))))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [x]\n  (take x ((fn fib [ a b ]\n             (cons a (lazy-seq(fib b (+ a b))))) 1 1)))","problem":26,"user":"50997a2be4b0cae2931060b6"},{"code":"(fn fib [n]\n  ((fn fa [a i x y]\n    (if (= i n) a\n        (fa (conj a (+ x y)) (+ i 1) y (+ x y))))\n    [1 1] 2 1 1))","problem":26,"user":"4f039cd3535dcb61093f6b3b"},{"code":"(fn [n]\n  (take n ((fn fib [a b]\n  (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"51ea4e35e4b0f1f103a0d148"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 0) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (loop [nn 2 res [1 1]]\n           (if (= n nn)\n             res\n             (recur (inc nn) (conj res (+ (last (pop res)) (last res))))))))","user":"5c15537ae4b01240ff5671bf"},{"code":"(fn addNext[coll limit] (if (= limit (count coll)) coll (addNext (conj coll (+ (peek coll) (peek (pop coll)) )) limit ) ) ) [1 1]","problem":26,"user":"4ee8fc1e535d93acb0a66887"},{"problem":26,"code":"#(loop [a1 1 a2 1 res [1 1] ix 3 cnt %]\n   (if (< cnt ix)\n     res\n     (let [n2 (+ a1 a2)]\n       (recur a2 n2 (conj res n2) (inc ix) cnt))\n     ))","user":"560794bde4b08b23635d3182"},{"problem":26,"code":"(fn [n] \n  (loop [cnt n res [] a 1 b 1] \n    (if (= cnt 0) res \n      (recur (dec cnt) (conj res a) b (+ a b)))))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [n]\n  (if (= n 1) '(1)\n  (loop [e1 1\n         e2 1\n         c 2\n         l '(1)]\n    (if (< c n)\n      (recur e2 (+ e1 e2) (+ c 1) (concat l [e2]))\n      (concat l [e2])))))","problem":26,"user":"533ee560e4b085b17e897d98"},{"code":"#(map (fn fib [n]\n\t(if (<= n 2)\n\t  1\n  (+ (fib (dec n)) (fib (- n 2))))\n  )\n (map inc (range %)))","problem":26,"user":"52d8eb78e4b09f7907dd139d"},{"code":"#(take %\n  ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y))))) 1 1))","problem":26,"user":"50cb4cf6e4b0f78a8e1645b4"},{"code":"; Only works for n >= 2\n\n(fn f ([n] (f [1 1] (- n 2))) ([xs n] (if (= 0 n) xs (recur (conj xs (reduce + (drop (- (count xs) 2) xs))) (dec n)))))","problem":26,"user":"50ee851ee4b06330c1f87c5b"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib-seq \n      ([] (fib-seq 0 1))\n      ([a b]\n       (lazy-seq\n        (cons b (fib-seq b (+ a b)))))))))","user":"5447e5b7e4b032a45b8693c4"},{"problem":26,"code":"#(map (fn myfn [n] (case n 0 1 1 1 (+ (myfn (- n 1)) (myfn (- n 2))))) (range %))","user":"5a2cfa85e4b09cafd31c7f61"},{"problem":26,"code":"(fn f [n](loop [ret [1 1]]\n         (if (>= (count ret) n )\n           ret\n           (recur (conj ret (reduce + (take 2 (reverse ret))) ) ) ) ))","user":"544ac9b5e4b0e39780006959"},{"code":"(fn [num] (reverse (loop [x 1 y 1 c '()] \n  (if (= (count c) num)\n    c \n    (recur y (+ x y) (conj c x)))\n  )))","problem":26,"user":"52c52ef2e4b0c2d177d620ef"},{"code":"(fn [n]\n(map first\n(take n\n(iterate (fn [[a b]] [b (+ a b)]) [1 1])\n)))","problem":26,"user":"504ec4d3e4b069badc5a33c9"},{"problem":26,"code":"(fn [c]\n  (loop [x [1 1]]\n    (if (< (count x) c)\n      (recur (conj x (apply + (take-last 2 x))))\n      x)))","user":"574abbfbe4b02ea114799200"},{"code":"(fn [n]\n     (loop [seq [1 1],\n        size (- n 1)]\n        (if  (> (count seq) size)\n           seq\n           (recur (conj seq (+  (nth seq (- (count seq) 2)) (last seq) ) ) size )\n         )\n       )\n    )","problem":26,"user":"52dced9de4b09f7907dd13d7"},{"code":"(fn [n] (take n ((fn ls-fib ([] (concat [1 1] (ls-fib 1 1)))\n  ([a b] \n   (let [n (+ a b)]\n     (lazy-seq\n      (cons n (ls-fib b n)))))))))","problem":26,"user":"52446511e4b0d8acf9ed6a9a"},{"problem":26,"code":"(fn [numbers]\n  (take numbers (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5b6962c1e4b0c6492753e787"},{"problem":26,"code":"#(reverse ((fn fib [x] (cond (= x 1) (cons 1 '()) (= x 2) (cons 1 (fib 1)) (> x 2) (cons (+ (first (fib (- x 1))) (second (fib (- x 1)))) (fib (- x 1))))) %))","user":"5b632851e4b0c6492753e72d"},{"code":"#(take % ((fn fibo\n  ([] (concat [1 1] (fibo 1 1)))\n  ([a b]\n    (let [n (+ a b)] \n      (lazy-seq (cons n (fibo b n))))))))","problem":26,"user":"5032a96ae4b0e78df07b0932"},{"problem":26,"code":"#(loop [cnt %\n        lst '()]\n   (if (= cnt 0)\n     (reverse lst)\n     (cond\n      (= (count lst) 0) (recur (dec cnt) '(1))\n      (= (count lst) 1) (recur (dec cnt) '(1 1))\n      :else (recur (dec cnt)\n                   (conj lst \n                         (apply + (take 2 lst)))))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":26,"code":"#(loop [x % result '(1 1)]\n    (if (> x 2)\n      (recur (dec x) (conj result (+ (first result) (second result))))\n      (reverse result)))","user":"580c8fcee4b0849f6811b721"},{"code":"(fn [x]\r\n  (take x\r\n    ((fn fib [a b]\r\n        (cons a (lazy-seq (fib b (+ a b))))) \r\n      1 1)))","problem":26,"user":"4e1158aa535d04ed9115e7c6"},{"problem":26,"code":"(fn [k] (reverse ((fn fib\n[n]\n  (if (= n 1)\n    '(1)\n    (conj  (fib (dec n)) ((fn fibn [x]\n  \t(if (< x 3)\n    \t1\n    \t(+ (fibn (- x 1)) (fibn (- x 2)))\n    \t)\n \t) n)))\n) k)))","user":"550fd845e4b06e50f9beb17c"},{"problem":26,"code":"(fn [x] \n  (take x \n    ((fn fib [m n]\n      (cons m (lazy-seq (fib n (+ m n))))) 1 1)))","user":"53cc5c88e4b00fb29b2212d8"},{"code":"#(take % (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4e410033535dc968683fc49c"},{"problem":26,"code":"(fn [n] (take n (map first (iterate #(vector (second %) (apply + %)) [1 1]))))","user":"5956c6dae4b066ee0a44af61"},{"problem":26,"code":"(fn [n]\n  (loop [numbers [1] n1 0 n2 1]\n    (let [fib (+ n1 n2)]\n      (if (= (count numbers) n)\n        numbers\n        (recur (conj numbers fib) n2 fib)))))","user":"55842c7ee4b05c286339e11d"},{"problem":26,"code":"#(take % (map second (iterate (fn [[x y]] [y (+ y x)]) [0 1])))","user":"54149f2fe4b01498b1a719ec"},{"problem":26,"code":"(fn fibo[x]\n  (loop [res [1 1] cpt 1]\n    (if (< cpt x)\n      (do (println res)\n          (println cpt)\n      (recur (conj res (+ (last res) (last (butlast res)))) (inc cpt)))\n      (butlast res))))","user":"5a6cb2eae4b0512ff01cda57"},{"problem":26,"code":"(fn [n]\n  (loop [c [1 1]]\n    (if \n      (< (count c) n)\n      (recur (conj c (apply + (take-last 2 c))))\n      c)))","user":"523578efe4b0a643f2dcb74c"},{"problem":26,"code":"(fn fib \n  [n]\n  (cond\n   (not (integer? n)) \"Error: non integer argument\"\n   (<= n 0) nil\n   (= n 1) [1]\n   (= n 2) [1, 1]\n   :else (let [prev (fib (dec n))]\n           (conj prev\n                 (let [r (rseq prev)]\n                   (+ (first r) (second r)))))))","user":"540ff039e4b01498b1a7199b"},{"code":"#(rest (map (fn fib [n]\n             (cond\n              (= 0 n) 0\n              (= 1 n) 1\n              :else (+ (fib (dec n)) (fib (- n 2)))))\n           (range (inc %))))","problem":26,"user":"515c9f14e4b069911535cf16"},{"problem":26,"code":"(fn fib[n]\n  (take n (map first (iterate \n                      (fn [[a b]]\n                        [b (+ a b)]) [1 1]))))","user":"5f65bdfde4b02876ed9fd025"},{"problem":26,"code":"(fn [n]\n      (rest (take (+ n 1)\n                  (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"595b7c12e4b066ee0a44afda"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1 1]\n         i   2]\n    (if (= i n) acc\n        (recur (conj acc (+ (first (reverse acc))\n                            (second (reverse acc)))) (inc i)))))","user":"54ef4a1de4b024c67c0cf882"},{"problem":26,"code":"(fn [n] \n    (let [f (fn fibs [x] \n              (if (<= x 2) \n                1 \n                (+ (fibs (- x 1)) (fibs (- x 2)))))\n         ]\n   (map f (range 1 (+ n 1)))\n  )\n)","user":"54f97e22e4b01ecee9d8883a"},{"problem":26,"code":"(fn [x]\n  (letfn [(iterated-fibonacci [n-1 n-2 counter]\n              (cond (= counter 0) n-1\n                    :else (iterated-fibonacci (+ n-1 n-2) n-1 (- counter 1))))\n          (fibonacci [x]\n                     (iterated-fibonacci 1 0 x))]\n     (map fibonacci (range x))))","user":"55e3e7a8e4b050e68259b44a"},{"problem":26,"code":"(fn [v]\n\n      (loop [a 1\n             b 1\n             c v\n             res [1 1]]\n        (if (< c 3)\n          res\n          (recur b (+ a b) (- c 1) (conj res (+ a b))))\n\n        )\n\n      )","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"#(reverse\r\n  (\r\n    (fn [result n]\r\n      (if (> n 0)\r\n        (recur\r\n          (conj\r\n            result\r\n            (+\r\n              (first result)\r\n              (second result)\r\n            )\r\n          )\r\n          (dec n)\r\n        )\r\n        result\r\n      )\r\n    ) '(1 1) (- % 2)\r\n  )\r\n)","problem":26,"user":"5075d655e4b09049dea827a3"},{"code":"(fn \n  [x]\n  (reverse (nth \n    (iterate #(conj % (+ (first %) (first (rest %))))\n             '(1 1)) \n    (- x 2))))","problem":26,"user":"5078d366e4b08327cd804a5b"},{"code":"(fn [n]\n    (take n \n        ((fn rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))\n                1 1)))","problem":26,"user":"4ee251e9535d10e5ff6f5365"},{"problem":26,"code":"#(take %\n  ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"5f998847e4b0715f5002d813"},{"problem":26,"code":"#(take % (map last (iterate (fn  [[a b]]\n  [b (+ a b) ]) [0 1])))","user":"55c917a1e4b0e31453f649e9"},{"code":"(fn [n] (take n (map (fn [[a b]] b) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"52c1f404e4b07a9af5792370"},{"problem":26,"code":"(fn [number]\n  (map first\n       (take number\n             (iterate (fn [[a b]] [b (+ a b)])\n                      [1 1]))))","user":"545c2d07e4b01be26fd7465c"},{"problem":26,"code":"(fn [x]\n  (condp = x\n    1 [1]\n    2 [1 1]\n    (loop [res [1 1]]\n      (if (>= (count res) x)\n        res\n        (recur (conj res (+ (peek res) (peek (pop res)))))))))","user":"5e95c88de4b0fbed045a380e"},{"problem":26,"code":"#(nth (iterate (fn [xs] (conj xs (reduce + 0 (take-last 2 xs)))) [1 1]) (- % 2))","user":"5a257747e4b07f18be40aa1f"},{"problem":26,"code":"(fn [m] \n  (map (fn f [n]\n         (if (zero? n) \n           0\n           (if (= 1 n)\n             1\n             (+ (f (- n 1)) (f (- n 2)))))) \n       (range 1 (inc m))))","user":"59636b37e4b066ee0a44b0c3"},{"problem":26,"code":"(fn [n]\n  (let [base '(1 1)]\n    (if (> 3 n)\n      (take n base)\n      (reverse (loop [i (- n 2)\n                      fib base]\n                 (if-not (zero? i)\n                   (recur (dec i)\n                          (->> (take 2 fib)\n                               (apply +)\n                               (conj fib)))\n                   fib))))))","user":"5974d2ede4b01722bebd4cb6"},{"code":"(partial\n (fn [l p c n]\n   (cond\n    (= n 0) l\n    :else (recur (conj l c) c (+ c p) (- n 1)))) [] 0 1)","problem":26,"user":"52318843e4b0e2e8de81d1e8"},{"problem":26,"code":"(fn [n]\n (rest\n  (loop [res '[0 1]]\n   (if (> (count res) n) res\n    (->> (last (butlast res))\n         (+' (last res))\n         (conj res)\n         recur)))))","user":"5a7a09e6e4b03baeef9276ca"},{"problem":26,"code":"(fn fib ([x, s] \n  (if (< (count s) x) (fib x (conj s (+ (last s) (last (butlast s))))) s))\n  ([x] (fib x [1 1])))","user":"561e8b11e4b064ca9f4b16c0"},{"problem":26,"code":"(fn fibseq [i]\n  (map (fn fib [n] \n    (if(< n 3)\n      1 \n      (+ (fib(- n 1)) (fib(- n 2)))))\n      (map inc (range i))))","user":"5c59b1d3e4b01df32ab73261"},{"problem":26,"code":"(fn [n] (reverse (last  (take (dec n) (iterate #(cons (+ (first %) (second %)) %) '(1 1))))))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":26,"code":"(fn [x]\n  (loop [x (dec x)\n         col [1]\n         prev 0 curr 1]\n    (if (zero? x) col\n        (recur (dec x) (conj col (+ prev curr)) curr (+ prev curr)))))","user":"5ea970d1e4b00a66d4a951c6"},{"problem":26,"code":"(fn [n] (loop [fib-index 2\n         fib-series '(1 1)]\n    (if (>= fib-index n)\n      (reverse fib-series)\n      (recur (inc fib-index) (conj fib-series (reduce + (take 2 fib-series)))))))","user":"554bc64ae4b0a04f79299598"},{"code":"(fn [n]\n  (let [fibs (fn []\n               (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))]\n    (take n (drop 1 (fibs)))))","problem":26,"user":"50ec4ed7e4b04edc33777046"},{"problem":26,"code":"#(loop [acc [] i % a 0 b 1]\n   (if (zero? i)\n     acc\n     (recur (conj acc b)\n            (dec i)\n            b\n            (+ a b))))","user":"553a43cae4b09218d5f44ff2"},{"code":"#(loop [i % a 0 b 1 l '[1]]\n   (if (= i 1) l\n      (let [x (+ a b)]\n      (recur (- i 1) b x (conj l x)))))","problem":26,"user":"52d1e364e4b0d9f9285948e7"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (loop [fibs '(1 1)\n          prev (first fibs)\n          curr (second fibs)]\n     (if (= n (count fibs)) \n       fibs  \n       (recur\n        (conj fibs \n              (+ prev curr)) \n        curr (+ prev curr))))))","user":"60b3b8a9e4b0e0fa5f1b4233"},{"code":"#(nth   (iterate (fn [c] (concat c (vector (apply + (take-last 2 c))))) [1 1]) ( -  % 2))","problem":26,"user":"517945dce4b0684c1c981a43"},{"problem":26,"code":"(fn fibonacci\n   [quantity]\n   (loop [f1 1 f2 1 k 0 result '()]\n      (if (< k quantity)\n         (recur f2 (+ f1 f2) (inc k) (conj result f1))\n         (sort result))))","user":"5e595637e4b027a2e10ac10e"},{"code":"(fn fib \n  ([a b] \n  (cons a (lazy-seq (fib b (+ b a)))))\n  ([a]\n   (take a (fib 1 1))))","problem":26,"user":"535afd76e4b04ce2eb3ed2ab"},{"code":"(fn fib-seq\n  [x]\n  (if (< x 2)\n    (repeat x 1)\n    (concat (fib-seq (- x 1)) (list (apply + (take-last 2 (fib-seq (- x 1))))))))","problem":26,"user":"523c819ee4b07becd5be222a"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons\n            a \n            (lazy-seq (fib b (+ a b)))\n        )\n      ) 1 1)\n  )\n)","problem":26,"user":"4f4ff451e4b03ad3f0c10cf2"},{"code":"#(cond\n  (= % 1) [1]\n  (= % 2) [1 1]\n  (> % 2) (do\n            ((fn ! [lst x]\n              (if (= (count lst) x)\n                lst\n                (! (into lst (list (+ (lst (- (count lst) 1)) (lst (- (count lst) 2))))) x)\n                )\n              )\n             [1 1] %)\n            )\n  )","problem":26,"user":"50d6d7eee4b0159555a1fc76"},{"problem":26,"code":"(fn fib [n] (case n\n              1 [1]\n              2 [1 1]\n              (let [sofar (fib (dec n))]\n                (conj sofar (+ (last sofar) (second (reverse sofar))))\n                )\n              ))","user":"59967c40e4b0b211ea3aaaf2"},{"problem":26,"code":"(fn [i]\n  (map\n    (fn fib [x]\n      (if (or (= 0 x) (= 1 x))\n        1\n        (+\n          (fib (dec x))\n          (fib (- x 2)))\n        )\n      )\n    (range i)\n    )\n  )","user":"550320f8e4b086ebe8a79c68"},{"code":"(fn [x]\n  (loop [ seed 0 acc 1 fib () c x ]\n  (if \n    (zero? c)\n      (reverse fib)\n    (recur acc (+ acc seed) (conj fib acc) (dec c)\n    ))))","problem":26,"user":"5068c203e4b0c0169921a8e4"},{"problem":26,"code":"(fn [first-n]\n  (loop [seqs ()\n         n    1]\n    (if (= first-n (dec n)) (reverse seqs)\n      (recur \n       (cond\n        (= 1 n) '(1)\n        (= 2 n) '(1 1)\n        :else (into seqs (list (+ (first seqs) (second seqs))))) (inc n)))))","user":"531571ece4b08068f379ed27"},{"problem":26,"code":"(fn [n]\n  (take n \n    ((fn fib\n     [f f']\n     (cons f' (lazy-seq(fib f' (+ f f'))))) 0 1)))","user":"55c6fd60e4b0e31453f649c9"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib n [1 1]))\n  ([n coll]\n    (if (>= 2 n)\n      (take n [1 1])\n      (let [dec-fib (fib (dec n))]\n        (concat dec-fib\n                [(+ (last dec-fib) (last (butlast dec-fib)))])))))","user":"53f42471e4b0742d9025b0fb"},{"problem":26,"code":"#(into [] (take % (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"51864ee8e4b0da5a5be3bacc"},{"code":"(fn [x]\n  (take x\n    (map first\n      (iterate\n        (fn [n] [(n 1) (+ (n 0) (n 1))])\n        [1 1]))))","problem":26,"user":"50589113e4b06522596eba7f"},{"problem":26,"code":"#(take % ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b) )))) 1 1))","user":"55aa1637e4b0988bba2ad949"},{"problem":26,"code":"(fn [n]\n    (loop [acc [1 1]\n           i (- n 2)]\n      (let [n1 (last acc)\n           n2 (second (reverse acc))]\n        (if (= i 0)\n           acc\n          (recur (conj acc (+ n1 n2)) (dec i))))))","user":"5cc75ffce4b0ccb061962836"},{"problem":26,"code":"(fn fibseq\n  [n]\n  (loop [m n a 0 b 1 res []]\n    (if (zero? m)\n      res\n      (recur (dec m) b (+ a b) (conj res b)))))","user":"57b5dc52e4b0fbc9809a27b3"},{"code":"(fn fib [s n] \n  (if \n    (< (count s) n)\n    (fib \n      (conj s (+ (last s) (nth s (- (count s) 2))))\n      n)\n    s))\n  [1 1]","problem":26,"user":"52dde81fe4b09f7907dd13eb"},{"code":"(fn [n] (reduce (fn [a b] (concat a (list (+ (last a) (last (butlast a)))))) '(1 1) (repeat (- n 2) 0)))","problem":26,"user":"53638ed2e4b0243289761e5b"},{"problem":26,"code":"(fn fib\n  ([n] \n   (fib 0 1 n []))\n  ([f1 f2 n l]\n   (if (<= n 0)\n     l\n     (fib f2 (+ f1 f2) (dec n) (conj l  f2)))))","user":"574f1c24e4b02ea114799255"},{"problem":26,"code":"(fn \n  [n]\n  (cond\n   (= 1 n) '(1)\n   (= 2 n) '(1 1)\n   :else (loop [x 2\n                r [1 1]]\n           (if (= x n)\n             r\n             (recur (inc x) (conj r (apply + (subvec r (- (count r) 2)))))))))","user":"59b71b4fe4b05c620303ca3d"},{"problem":26,"code":"(fn [n]\n  (loop [a 0 b 1 cnt n coll '()]\n    (if (= cnt 0)\n      (reverse coll)\n      (recur b (+ a b) (- cnt 1) (conj coll b)))))","user":"55e1a205e4b050e68259b41e"},{"problem":26,"code":"#(loop [acc [1 1]]\n    (if (= (count acc) %)\n      acc\n      (recur (conj acc (apply + (take 2 (reverse acc)))))))","user":"57addf3ae4b0b8559636fca4"},{"code":"(fn [n] (last (take (dec n) (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1]))))","problem":26,"user":"4f973fb9e4b0dcca54ed6ce8"},{"code":"(fn fib [x]\n  (if (> x 2)\n    (let [fib-n-1 (fib (dec x))]\n      (conj fib-n-1 (+ (last fib-n-1)\n                       (last (drop-last fib-n-1)))))\n    [1 1]))","problem":26,"user":"5095a0a4e4b087f34d351ab5"},{"problem":26,"code":"(fn [n]\n (reduce \n  (fn [p n] (conj p\n   (+\n    (first (rest (reverse p)))\n    (last p))))\n  [1 1]\n  (range 2 n))\n)","user":"57410964e4b05c31a32c085f"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         step n\n         coll []]\n    (if (zero? step)\n      coll\n      (recur b (+ a b) (dec step) (conj coll a)))))","user":"56c2c342e4b05cc29241ee85"},{"problem":26,"code":"(fn [n]\n  (take n\n    (map first \n         (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n         )))","user":"53ecaf1ce4b0d648e757f4b4"},{"problem":26,"code":"(fn fib\n  ([index fa fb result]\n   (if (zero? index)\n     result\n     (fib (dec index) fb (+ fa fb) (conj result fa))))\n  ([index] (fib index 1 1 [])))","user":"55e7d06ee4b050e68259b496"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [coll]\n               (if (= n (count coll))\n                 coll\n                 (fib (conj coll (+ (last coll) (last (butlast coll))) ))) )]\n    (fib [1 1])))","user":"54f4ab86e4b0f2f3c5226e84"},{"problem":26,"code":"(fn fib[n]\n  (let[f ((fn fi[a b](lazy-seq (cons a (fi b (+ a b))))) 1 1)]\n    (take n f)))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn fib2 [n]\n  (let [ff (fn fb [n]\n            (if (= n 1) 1\n              (if (= n 2) 1\n                (+ (fb (- n 1))\n                   (fb (- n 2))))))]\n   (map ff (range 1 (+ n 1))) ))","problem":26,"user":"52247d56e4b01819a2de42db"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate\n    (fn [[a b]] [b (+ a b)]) \n    [1 1])\n         )))","user":"56ca2f25e4b0ea9b8538f716"},{"code":"(fn fib [num]\n  (reverse ((fn fib_in[n]\n    (cond \n     \t(= n 1) '(1)\n     \t(= n 2) '(1 1)\n     \t:else (let [ s  (fib_in (dec n))]\n                (conj s (+ (first s) (second s)))))) num)))","problem":26,"user":"5101192ae4b0bef64c30e266"},{"problem":26,"code":"(fn [n] (loop [i 2 c [1 1]] (if (= n (count c)) c (recur (inc i) (conj c (+ (first (reverse c)) (second (reverse c))))))))","user":"56ebcbf6e4b04a395b9a0428"},{"problem":26,"code":"(fn [num]\n  (loop [x 0 s '() prev 1 curr 1]\n    (if (= x num)\n      s\n      (recur (inc x) (concat s [prev]) curr (+ prev curr) ))))","user":"5751fda4e4b02ea114799295"},{"code":"(fn fib [n]\n   (if (= n 3)\n     [1 1 2]\n     (let [tmp (fib (- n 1))]\n       (conj tmp (+ (last tmp) (last (drop-last tmp)))))))","problem":26,"user":"516282c3e4b0e6d3c4734711"},{"code":"(fn fibonacci [count]\n  (or\n    ({1 [1], 2 [1 1], 3 [1 1 2]} count)\n    (let [coll (fibonacci (dec count))]\n      (conj coll (apply + (take-last 2 coll))))\n    )\n  )","problem":26,"user":"51b38769e4b026427ecf067f"},{"code":"(fn [n]\n  (let [fibonacci (map first\n                       (iterate (fn [[a b]]\n                                  [b (+ a b)])\n                                [1 1]))]\n    (take n fibonacci)))","problem":26,"user":"529f71aae4b04e0c58e87bac"},{"code":"(fn fib [n]\n  (take n ((fn rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))\n            1 1)))","problem":26,"user":"4ff2430ae4b0678c553fc336"},{"code":"(fn [n]\n  (into ()  (loop [n (- n 2) l '(1 1)]\n             (if (= n 0)\n               l\n               (recur (- n 1) (conj l (+ (first l) (first (rest l)))))))))","problem":26,"user":"52fac708e4b047fd55836fff"},{"problem":26,"code":"(fn [len]\n  (last \n   (take \n    len\n    (iterate \n     (fn [arr] \n       (conj \n        arr \n        (reduce + (take-last 2 arr)))) \n     [1]))))","user":"586a657de4b0f14aab7c88bd"},{"code":"#(take % (map first (iterate (fn [x] (list (second x) (+ (first x) (second x)))) '(1 1))))","problem":26,"user":"5246e945e4b0644eb7b0783b"},{"code":"#(let [fib (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))] (take % (fib 1 1)))","problem":26,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [x]\n  (map (fn fib [x] (if (or (= x 1) (= x 2)) 1 (+ (fib (dec x)) (fib (- x 2))))) (take x (iterate inc 1))))","problem":26,"user":"51377c10e4b04059df19f305"},{"problem":26,"code":"(fn [n] \n (take n \n  (map first \n   (iterate \n    (fn nf [v] \n     (let [[a b] v] [b (+ a b)])\n    ) [1 1]\n   )\n  )\n )\n)\n\n\n\n;using loop\n;\n;(fn [n] \n;  (loop [c 1 f [1 1]] \n;    (if (= c (dec n)) \n;      f \n;      (recur (inc c) (conj f (+ (nth f c) (nth f (dec c)))))\n;    )\n;  )\n;)","user":"55e01f4ee4b050e68259b406"},{"problem":26,"code":"(fn [n]\n   (let [fib-seq ((fn fib [a b]\n                    (lazy-seq (cons a\n                                    (fib b (+ a b)))))\n                  1 1)]\n     (take n fib-seq)))","user":"5515b138e4b055c2f668d4ed"},{"problem":26,"code":"(fn fib [r] \n  (take r \n        (map first (iterate \n                    (fn [[a b]] \n                      [b (+ a b)]) \n                    [ 1 1]))))","user":"4e70a7c1535d5021c1a8963c"},{"code":"(fn [n] (letfn [(fib \n         ([] (concat [1 1] (fib 1 1)))\n         ([a b] (let [c (+ a b)] (lazy-seq (cons c (fib b c))) ))\n         )] (take n (fib))))","problem":26,"user":"51729002e4b044b2ef48a850"},{"problem":26,"code":"(fn [n] (\n       let [fib (fn rec [a b n] (\n                  if (= n 0) nil\n                  (cons (+ a b) (rec b (+ a b) (dec n)))\n                ))] \n       (\n         cons 1 (fib 0 1 (dec n))\n     \n       )\n     \n     ))","user":"560c31b4e4b05f002753df2d"},{"problem":26,"code":"#(last\n  (take (dec %)\n        (iterate\n         (fn [s] (conj s (reduce + (take-last 2 s))))\n         [1 1])))","user":"5d4b2155e4b0776584bd6f28"},{"problem":26,"code":"(fn fib-seq \n  [quantity]\n  (if (= quantity 1)\n    (vector 1)\n    (if (= quantity 2)\n      (vector 1 1)\n      (let [smaller (fib-seq (dec quantity))]\n                             (conj smaller (+ (last smaller) (first (take-last 2 smaller))))))))","user":"53bc279ae4b047364c04450e"},{"code":"#(letfn [(fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))] (take % (fibs)))","problem":26,"user":"53720c5ce4b0493c815db704"},{"problem":26,"code":"(fn [n]\n\t(letfn [(fib [current next n fiblist]\n\t\t(if (zero? n)\n\t\t\t(reverse fiblist)\n\t\t(recur next (+ current next) (dec n) (cons next fiblist))))]\n\t(fib 0 1 n '())))","user":"53573d70e4b04ce2eb3ed278"},{"problem":26,"code":"(fn [input]\n  (loop [n 1, result [1]]\n    (if (= n input)\n      result\n      (recur (+ n 1) (conj result (apply + (take-last 2 result)))))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn [x]\n  \n  (map #((fn fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2))))) (+ % 1)) (range x))\n)","problem":26,"user":"522ef7a2e4b01e6a0e6e5daf"},{"problem":26,"code":"#(map\n(fn fib [n] (cond (= n 0) 0 (< n 3) 1 true (+ (fib (- n 2)) (fib (- n 1)))))\n((fn mk-list [sz] (if (= sz 0) () (concat (mk-list (- sz 1)) (list sz)))) %1))","user":"5e010c58e4b0a607a9a45d33"},{"code":"(fn [n]\n   (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f849f76e4b033992c121c36"},{"problem":26,"code":"(fn fibo-sequence\n  [n]\n  (drop 1\n        (reduce\n            (fn [c, i] (concat c (list (+ (last c) (last (butlast c))))))\n            (list 0 1)\n            (range (dec n)))))","user":"59b62f8de4b05c620303ca1f"},{"problem":26,"code":"(fn fib [n]\n  (reverse (nth (iterate #(conj % (+ (first %) (second %)))\n                         (list 1 1)\n                )         \n                (- n 2)\n           )     \n  )         \n)","user":"54468ebfe4b032a45b8693b1"},{"problem":26,"code":"(fn [n] \n     (loop [fib-nums [0 1]]\n    (if (> (count fib-nums) n)\n      (drop 1 (subvec fib-nums 0 (inc n)))\n      (let [[n1 n2] (reverse fib-nums)]\n        (recur (conj fib-nums (+ n1 n2)))))))","user":"5b1619e4e4b0cc2b61a3be77"},{"code":"(fn fib [n] (cond (> n 2) ( let [x (fib (- n 1))] (conj x (+ (second(reverse x)) (last x)))) :else [1 1]))","problem":26,"user":"4f6e1c40e4b07046d9f4efd4"},{"problem":26,"code":"(fn [n] \n  (take n ((fn fib [x y]\n    (lazy-seq (cons x (fib y (+ x y))))) 1 1)))\n\n;(fn [n] (take n (map first (iterate \n;  (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n;((fn [n] (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n;              (map first) \n;              (take n))) 10)","user":"553e3260e4b0a04f792994eb"},{"problem":26,"code":"#(take % ((fn fibo [a b]\n           (cons a (lazy-seq (fibo b (+ a b)))))\n          1 1))","user":"5bc82994e4b07a9b28b100b9"},{"problem":26,"code":"#(reduce \n  (fn [acc x]\n   (conj acc (apply + (take 2 (reverse acc)))))\n  [1 1] \n  (take (- %1 2) (range))\n  )","user":"5b9db58be4b0c0b3ffbd4b41"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))]\n(take n (fib 1 1))))","user":"5840178ee4b089d5ab817de0"},{"problem":26,"code":"(fn [x] (let [fibo (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2)))))] (map #(fibo (+ 1 %)) (range x))))","user":"574f1780e4b02ea114799254"},{"problem":26,"code":"#(seq (loop [rval [1 1] n %] \n   (if (= n 2) \n     rval \n     (recur (conj rval (apply + (take-last 2 rval))) (dec n)))\n   ))","user":"559ff3b1e4b0acc240e314ed"},{"problem":26,"code":"#(let [fib1 1 fib2 1 result [1 1]] (loop [fib1 fib1 fib2 fib2 result result] (if (= (count result) %) result (recur fib2 (+ fib1 fib2) (concat result [(+ fib1 fib2)] )))))","user":"5cb11a72e4b026601754b8c6"},{"problem":26,"code":"(fn fibseq [num] (map (fn fib [n]\n  (if\n    (< n 2)\n    1\n    (+ (fib (- n 1)) (fib (- n 2)) )))\n(range num)))","user":"5450c81fe4b0e397800069a4"},{"code":"(fn fiblist [m]                                                                                                                                             \n  (loop [res [1 1] n m]                                                                                                                                       \n    (if (= n 2)                                                                                                                                               \n      (seq res)                                                                                                                                               \n      (recur (conj res (+ (last res) (last (butlast res)))) (dec n)))))","problem":26,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn fib2 [x]\n    (if (= x 2)\n        '(1 1)\n        (reduce (fn [acc first-el]\n                    (concat   \n                            acc\n                            (list (+ (first (take-last 2 acc)) (last acc)))\n                    )\n                )\n                '(1 1)\n                (repeat (- x 2) 1)\n        )\n    )\n)","problem":26,"user":"4f547d2ce4b0a7574ea717e3"},{"problem":26,"code":"#(take % (\n               (fn fib-seq\n                 ([] (fib-seq 1 1))\n                 ([a b] (lazy-seq (cons a (fib-seq b (+ a b))))))\n               ))","user":"5b8db323e4b0c0b3ffbd49da"},{"problem":26,"code":"#(nth (iterate (fn [x] (conj x (+ (last x) (second (reverse x))))) [1 1]) (- % 2))","user":"5410cb36e4b01498b1a719b8"},{"problem":26,"code":"(fn fbn [x]\n  (loop [arr x fin_res [1] result [0 1] ]\n    (if (> arr 1)\n      (recur (dec arr) (conj fin_res (apply + result)) [(last result) (apply + result)])\n      fin_res\n      )\n    )\n  )","user":"5b98f174e4b0c0b3ffbd4ac1"},{"code":"(fn my-fib [max]\n  (letfn [(fib [n]\n    (if (or (= n 0) (= n 1))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))]\n  (take max (map fib (range (* 2 max))))))","problem":26,"user":"4fd769a1e4b0dab7d829f382"},{"code":"#(letfn [(fib [n p1 p2 col] \n              (if (< n 1) \n                col \n                (recur (dec n) p2 (+ p1 p2) (conj col p1))))] \n   (fib % 1 1 []))","problem":26,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":26,"code":"(fn [n] (loop [x 0\n       acc []]\n  (let [prev2 (take-last 2 acc)\n        prev-sum (if (nil? prev2) 1 (apply + prev2))\n        _ (println prev-sum)]\n    (if (= x n)\n      acc\n      (recur (inc x) (conj acc prev-sum)))))\n  )","user":"571543bbe4b07c98581c3ad4"},{"problem":26,"code":"(fn fib-seq [n]\n  (take n \n    ((fn rfib [a b] \n         (cons a (lazy-seq (rfib b (+ a b)))))\n      1 1)))","user":"598e7998e4b02b9968b84d34"},{"code":"(fn [n]\n     (take n \n          ((fn fib [a b] \n               (lazy-seq (cons a (fib b (+ b a)))))\n          1 1)))","problem":26,"user":"4f96a5e8e4b0dcca54ed6cdf"},{"problem":26,"code":"#(->> (iterate (fn [[fst snd]] [snd (+ fst snd)]) [1 1])\n  (map first)\n  (take %))","user":"55f48d1be4b06e875b46ce7b"},{"problem":26,"code":"(fn fib\n  ([n] (take n (rest (fib n [0 1]))))\n  ([n series]\n   (if (zero? n)\n     series\n     (fib (dec n) (conj series\n                        (+ ((comp first reverse) series)\n                           ((comp second reverse) series)))))))","user":"5eac172fe4b00a66d4a951dd"},{"code":"(fn fib \n  ([n] (fib [1 1] n))\n  ([v n]\n    (if (= (count v) n)\n      v\n      (fib (conj v (+ (last v) (last (butlast v)))) n)\n    )\n  )\n)","problem":26,"user":"4f073429535dcb61093f6c23"},{"code":"(fn fib [n]\n    ((fn fibrec [xs m] \n        (if (>= m n)\n            (reverse xs)\n            (if (< m 2)\n                (fibrec (cons 1 xs) (inc m))\n                (fibrec \n                    (cons\n                        (+ (first xs) (second xs)) xs)\n                    (inc m))))\n    ) nil 0)\n)","problem":26,"user":"4ed6238d535d10e5ff6f52de"},{"problem":26,"code":"#(loop [i 1 results [0 1]]\n   (if (>= i %)\n     (rest results)\n     (recur (inc i)\n            (conj results (+ (last results) (last (butlast results)))))))","user":"5f60daafe4b02876ed9fcffe"},{"problem":26,"code":"(fn [z] (take z \n              ((fn iter [[x y]] \n                 (cons x\n                 \t   (lazy-seq (iter [y (+ y x)]))))\n               [1 1])))\n\n;;(fn fib [x]\n;;  (if (< x 2)\n;; \tx\n;; \t(+ (fib (dec x))\n;;     (fib (- x 2)))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn fab [n]\n  (if (< n 3)\n    [1 1]\n    (conj (fab (- n 1)) (apply + (take-last 2 (fab (- n 1))))  )))","problem":26,"user":"513cb853e4b0b86ece9f322b"},{"problem":26,"code":"#(loop [n % re [] lastnum 1 last2num 1]\n   (cond\n     (= n 0) re\n     :else\n        (cond\n          (> (count re) 2) (recur (dec n) (conj re (+ lastnum last2num)) (+ lastnum last2num) lastnum)\n          (= (count re) 2) (recur (dec n) (conj re 2) 2 1)\n          (= (count re) 1) (recur (dec n) (conj re 1) 1 1)\n          (= (count re) 0) (recur (dec n) (conj re 1) 1 1)\n         )))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":26,"code":"(fn [x]\n  (take x \n       ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)))","user":"53e40b17e4b036ad0777e40c"},{"problem":26,"code":"#(reverse (last (take (dec %) (iterate (fn [coll] (let [x (first coll), y (nth coll 1)] (conj coll (+ x y)))) '(1 1)))))","user":"5d46a3c1e4b07c84aa5ae6ad"},{"problem":26,"code":"#(take % ((fn fib\n           ([] (fib 1 1))\n           ([x y]\n            (lazy-seq (cons x (fib y (+ y x))))))))","user":"576d6266e4b0979f89651563"},{"problem":26,"code":"(fn fib[n] (->> [1 1] (iterate (fn [[a b]] [b (+ a b)])) (map first) (take n)))","user":"54f296efe4b024c67c0cf8c8"},{"code":"#(rest (take (+ 1 %) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":26,"code":"#(case %\n   0 '()\n   1 '(1)\n   (loop [pending (- % 2)\n          current [1 1]]\n     (if (= pending 0)\n       current\n       (recur (dec pending) (conj current (reduce + (take-last 2 current)))))))","user":"525523e3e4b0541d1855b9cc"},{"problem":26,"code":"(fn [x]\n    (loop [cnt x\n           acc [1]\n           prev 0]\n      (if (zero? cnt)\n        (take x acc)\n        (recur (dec cnt) (conj acc (+ prev (last acc))) (last acc))\n        )))","user":"5eb1a80ce4b00a66d4a951ff"},{"code":"(fn [n]\n    (let [fibs-rec (fn this [a b] (lazy-seq (cons a (this b (+ a b)))))]\n    (take n (fibs-rec 1 1))))","problem":26,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn fibs [x]\n  (let [fib (fn fibo [i]\n              (if (<= i 1)\n                1\n                (+ (fibo (- i 1)) (fibo (- i 2)))))]\n\n\n    (take x (map fib (range)))\n    ))","problem":26,"user":"51c6d415e4b07ef393169e3a"},{"problem":26,"code":";#(loop [n % \n;        data '(1 1)]\n;   (let [[a b & rest] data]\n;     (if (zero? n)\n;       (reverse rest)\n;       (recur (dec n)\n;              (cons (+ a b) data)))))\n#(take % \n       (map first \n            (iterate (fn [[a b]]\n                         [b (+ a b)])\n                     [1 1])))","user":"595fd721e4b066ee0a44b06e"},{"code":"#(take %1 ((fn r [a b] (lazy-seq (cons a (r b (+ a b))))) 1 1))","problem":26,"user":"4f0d5338535d0136e6c22316"},{"problem":26,"code":"(let [f (fn [f a b] (cons a (lazy-seq (f f b (+ a b)))))] #(take % (f f 1 1)))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":26,"code":"#(map (fn [x]\n        (loop [a 1 b 0 cnt x]\n          (if (zero? cnt)\n            b\n            \n            (recur (+ a b) a (dec cnt))))) (range 1 (inc %)))","user":"5d3e8c3de4b01671435dbd73"},{"code":"#(list*\n  (last\n  (take (- % 1)\n        (iterate\n         (fn\n           [lst]\n           (let [ult (last lst)\n                 penult (lst (- (count lst) 2))\n                 new (+ ult  penult)]\n             (conj lst new)))\n         [1 1]))))","problem":26,"user":"52b9cfb9e4b07a9af57922c5"},{"problem":26,"code":"(fn [n]\n  (letfn [(gen [n acc a b]\n               (if (= 0 n)\n                 acc\n                 (recur (dec n) (conj acc a) b (+ a b))))]\n    (gen n [] 1 1)))","user":"57377ae8e4b0cd1946bd1046"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn rec [a b]\n            (cons a (lazy-seq (rec b (+ a b))))) 1 1)))","user":"5e3f291ae4b01d43a70e8e33"},{"problem":26,"code":"(fn [n]\n  (->> [1 0]\n       (iterate (fn [[a b]] [(+ a b) a]))\n       (map first)\n       (take n)))","user":"59ee6801e4b0966464fe6a1f"},{"problem":26,"code":"#(next(take (+ % 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"58617a1fe4b0f14aab7c87f0"},{"problem":26,"code":"#(loop [result [0 1]]\n  (if (= (dec (count result)) %)\n    (rest result)\n    (recur (conj result (reduce + (take-last 2 result))))\n    )\n  )","user":"5510d948e4b06e50f9beb18d"},{"code":"#(take % \n\t(map first \n\t\t(iterate \n\t\t\t(fn [[a, b]] [b, (+ a b)]) [1, 1]\n\t\t)\n\t)\n)","problem":26,"user":"52373f36e4b0477af6280328"},{"code":"(fn fib [x]   (  )    ( if ( = x 1) \r\n  1  ( if (= x 2)   [1 1]  ( conj ( fib (- x 1) ) ( + (last  ( fib (- x 1) )  )\r\n   (nth  ( fib (- x 1) )  (- x 3) ))  ))))","problem":26,"user":"50646c01e4b007509339a58b"},{"code":"(fn [n] (last (take (dec n) \n  (iterate #( conj % (reduce + (take-last 2 %))) [ 1 1])\n)))","problem":26,"user":"4fccdc75e4b0ee37620e186d"},{"problem":26,"code":"(fn [numbers]\n  (loop [coll '() n numbers a 0 b 1]\n    (if (= n 0) (reverse coll)\n      (recur \n       (conj coll b)\n       (dec n)\n       b (+ a b))\n  )))","user":"5bfbf75ee4b0bdcf453d15df"},{"problem":26,"code":"(fn [n]\n  (println \"n:\" n)\n  (loop [n0 0 n1 1 accum [1]]\n    (println \"n0:\" n0 \"n1:\" n1 \"accum\" accum)\n    (if (< (count accum) n)\n      (let [n-next (+ n0 n1)]\n        (recur n1 n-next (conj accum n-next)))\n      accum)))","user":"6004c750e4b074f607df6645"},{"code":"(fn [i]\n  (cond (= i 3)\n       '(1 1 2)\n       (= i 6)\n       '(1 1 2 3 5 8)\n       (= i 8)\n       '(1 1 2 3 5 8 13 21)))","problem":26,"user":"52c23344e4b07a9af5792379"},{"problem":26,"code":"(fn [depth]\n     (nth \n           (iterate (fn [x] \n                      (conj x (apply +\n                             (take 2 (reverse x)\n                                   )\n                             )\n                      ))\n                    [1 1])\n            (- depth 2))\n     )","user":"56ef11efe4b04a395b9a045b"},{"problem":26,"code":"(fn fib\n  ([n] (take n (fib)))\n  ([] (fib 1 1))\n  ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"57985f98e4b039eba2ecb114"},{"problem":26,"code":"(fn f [x] (take x (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"58e762d3e4b056aecfd47ccc"},{"problem":26,"code":"#(reverse\n    (reduce\n     (fn [[a b & _ :as lst] _]\n       (cons (+ a b) lst))\n     [1 1]\n     (range (- % 2))))","user":"5b8f0861e4b0c0b3ffbd49f4"},{"code":"#( loop [c 0 b [1]] (\n  if (= % (count b))\n    b\n    (recur (last b) (conj b (+ c (last b))))\n  )\n)","problem":26,"user":"4ed845a8535d10e5ff6f52f8"},{"problem":26,"code":"(fn [n]\n  (loop [iter n\n         results [1 1]]\n    (let [last* (reverse results)]\n      (if (<= iter 2)\n        results\n        ;; (recur (inc iter) (conj results (reduce + results)))\n        (recur (dec iter)\n               (conj results (+ (first last*) (second last*))))))))","user":"539118b2e4b0b51d73faaea1"},{"problem":26,"code":"(fn  [n]\n  (take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5b55b15ae4b02d533a91bd35"},{"code":"#(reverse (nth (iterate (fn [x] (cons (apply + (take 2 x)) x)) [1 1])(- % 2)))","problem":26,"user":"4e6a3b79535d8ccf87e9feb3"},{"code":"(fn fib [x]\n(cond             \n(= x 1) [1] \n(= x 2) [1 1]\n:else (let [oldfib (fib (dec x))]\n(conj oldfib (+ (last oldfib) (last (butlast oldfib))))\n)\n)\n)","problem":26,"user":"4f2acb29e4b0d6649770a040"},{"problem":26,"code":"(fn [n]\n  (nth \n   (iterate \n     #(conj % (+ (peek %) (peek (pop %)))) \n     [1 1])\n   (- n 2)))","user":"5ed9c2cde4b0c7845d86b0e4"},{"problem":26,"code":"(fn [x]\n(loop\n  [iteration 1\n   rock x\n   result []]\n  (if (> iteration rock)\n    result\n    (if (< iteration 3)\n      (recur (inc iteration) rock (conj result 1))\n      (recur (inc iteration) rock (conj result \n                                        (+ \n                                         (last result)\n                                         (nth result (- (count result) 2))\n                                         )\n                                        ))\n      )\n    )\n  )\n      \n      )","user":"544fb010e4b0e39780006997"},{"problem":26,"code":"#(reduce \n  (fn [fibs idx]\n    (if (= idx 0)\n      (conj fibs 1)\n      (if (= idx 1)\n        (conj fibs 1)\n        (conj fibs (+ (last fibs) (second (reverse fibs)))))))\n  []\n  (range %))","user":"55eaca20e4b0121d4835fdb4"},{"problem":26,"code":"#(take % ((fn fib [x y]\n            (cons x (lazy-seq (fib y (+ x y))))) \n          1 1))","user":"5e2f73e5e4b05b4b01516204"},{"problem":26,"code":"(fn fib [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54c15722e4b0ed20f4ff6f22"},{"problem":26,"code":"#(take % (map last\n              (iterate (fn [[x y]]\n                         [y (+ x y)])\n                       [0 1])))","user":"56047160e4b0c80df0ca265d"},{"code":"(fn [times] \n  (loop [ times times\n            a 1 b 1\n            res []]\n       (if (pos? times)\n         (recur (dec times) b (+ a b) (conj res a));)\n         res)))","problem":26,"user":"502904e0e4b0feaf66e22fad"},{"code":"#(loop [l []\n        c %\n        f 0\n        s 1]\n        (if (not (= c 0))\n          (recur (conj l s) (dec c) s (+ f s))\n          l))","problem":26,"user":"4ddacd94535d02782fcbe9f6"},{"code":"#(map (fn fib [x] (if (< x 2) 1 (+ (fib (dec x)) (fib (- x 2))))) (range %))","problem":26,"user":"51e61772e4b0efabf93c02e2"},{"code":"(fn my-fib\n    [num]\n  (let [fib-helper (fn fib-helper [x]\n                      (cond\n                        (= x 0) 0\n                        (= x 1) 1\n                        :else (+ (fib-helper (- x 1))\n                                 (fib-helper (- x 2)))))]\n    (map #(fib-helper %) (range 1 (+ 1 num)))))","problem":26,"user":"4fceb350e4b03432b189f403"},{"code":"(fn fib\n  ([n] (fib n '(1 1 2)))\n  ([n fib-list]\n    (if (= (count fib-list) n)\n      fib-list\n      (fib n (flatten (cons fib-list (list (+ (last fib-list) (nth fib-list (- (count fib-list) 2))))))))))","problem":26,"user":"532cb870e4b019098a6f8b34"},{"problem":26,"code":"(fn [c]\n    (reverse \n     (reduce (fn [s n]\n                (conj s (+ (first s) (second s))))\n             '(1 1)\n             (map inc (range (- c 2))))))","user":"5e4beca9e4b0889a8790a560"},{"problem":26,"code":"(fn fibo [num]\n            (loop [ret () bbefe 1 befe 0 index 1]\n              (if (> index num)\n                (reverse ret)\n                (let [sum (+ bbefe befe)]\n                  (recur (conj ret sum) befe sum (+ index 1))))))","user":"56305383e4b073c1cf7a9be6"},{"problem":26,"code":"(fn\n  [n]\n  (loop [iter 1 \n         seq [1]]\n    (if (= iter n)\n      seq\n      (recur (inc iter)\n             (conj seq (reduce + (take-last 2 seq)))))))","user":"5bb0fc08e4b0a20761a234f3"},{"code":"#(loop [a 1 b 1 f []] (if (< (count f) %) (recur b (+ a b) (conj f a)) f))","problem":26,"user":"520c9489e4b0b022ef140c98"},{"problem":26,"code":"(fn [n]\n (take n\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54580586e4b01be26fd74616"},{"code":"(fn [n] (take n \n  (map last (iterate #(conj % (+ (last %) (last (butlast %)))) \n[ 0 1 ]))))","problem":26,"user":"4e9fde3c535d7eef3080729b"},{"problem":26,"code":"(fn [x] (reverse ( (fn fib [n]\n  (if (== 1 n) '(1)\n    (if (== 2 n) '(1 1) (let [fib1 (fib (dec n)) l (first fib1) s (first (rest fib1)) ] (conj fib1 (+ l s))))))\n  x) ) )","user":"526f670ce4b03e8d9a4a7365"},{"problem":26,"code":"(fn fib\n  ([cnt] (fib (- cnt 2) [1 1]))\n  ([cnt f]\n   (if (= cnt 0)\n     f\n     (fib (dec cnt) (conj f (+ (last f) (nth f (- (count f) 2))))))))","user":"544e6b7fe4b0e39780006986"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ b a)] ) [1 1])))","user":"5c91ae79e4b048ec896c59eb"},{"problem":26,"code":"(fn fib [n]\n  (if (== 2 n)\n    [1 1]\n    (let [f (fib (dec n))]\n      (conj \n       f\n       (+ \n        (last f)\n        (last (butlast f)))))))","user":"51d55795e4b01da06753aa8f"},{"code":"(fn fib[x] \n  (if (= 1 x) '(1) \n    (if (= 2 x) '(1 1) \n      (let [prev (fib (- x 1))] \n        (concat prev (list (reduce + (take-last 2 prev))))))))","problem":26,"user":"53307a23e4b019098a6f8b5d"},{"problem":26,"code":"(fn [n] (take n (loop [i 2 o [1 1]] (if (>= i n) o (recur (inc i) (let [b (reverse o)] (conj o (+ (first b) (nth b 1)))))))))","user":"57b35a19e4b0fbc9809a277d"},{"code":"(fn f [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    true    (let [l (f (- n 1))\n                  a (last l)\n                  b (last (butlast l))]\n                  (conj l (+ a b)))))","problem":26,"user":"50352431e4b0a84c1d88f620"},{"problem":26,"code":"#(nth\n  (iterate \n   \t(fn [s] \n       (->> \n        (take-last 2 s)\n        (apply + )\n        (conj s )\n       ) \n     ) \n   [1]\n  )\n  (dec %)\n )","user":"54f3970fe4b050824f58f5c5"},{"problem":26,"code":"(fn [nr]\n   (let [fibrec \n         (fn [counter acc nums]\n           (let [[f s & _] nums]\n             (if (= acc counter)\n                (reverse nums)\n               (recur counter (inc acc) (if (< acc 2) (cons 1 nums) (cons (+ f s) nums)))\n               )\n             ))\n         ]\n     (fibrec nr 0 [])\n     ))","user":"56f0ecf4e4b04a395b9a0484"},{"code":"#(take % ((fn fib [a b]\n  (lazy-seq\n    (cons a (fib b (+ a b)))))\n1 1))","problem":26,"user":"50366589e4b0fbe0a74d26c3"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b ]] [b (+ a b)]) [1 1])))","user":"5372e7d9e4b06d7f452d9e02"},{"problem":26,"code":"(fn [n]\n      (let [\n        fib*    (fn fib* [n]\n                  (cond\n                    (= n 1) 1\n                    (= n 2) 1\n                    :else (+ (fib* (- n 1)) (fib* (- n 2)))))\n\n        fib     (memoize fib*)\n\n        fib-seq (fn [n]\n                  (mapv fib (range 1 (inc n))))\n      ]\n        (fib-seq n)))","user":"532f7e12e4b019098a6f8b4e"},{"code":"#( loop[a 1 b 1 n % liczby (vector)]\r\n  ( if (> n 0\t) \r\n\t\t(recur b (+ a b) (dec n) (conj liczby a) )\r\n\tliczby\r\n\t))","problem":26,"user":"4f00c74f535dcb61093f6a31"},{"problem":26,"code":"#(let [fib (\n             fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2)))))]\n    (map fib (range %)))","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":26,"code":"#(loop [[i j] [0 1] l []] (if (< (count l) %) (recur [j (+ i j)] (conj l j)) l))","user":"54d6c80ce4b0a52adc2e2020"},{"code":"(fn fib\n  ([input]\n   (fib (- input 2) '(1 1)))\n  ([input i]\n   (if (zero? input)\n     (reverse i)\n     (fib (- input 1) (conj i (+ (first i) (first (rest i))))))))","problem":26,"user":"537cf454e4b06839e8705e82"},{"problem":26,"code":"(fn fib\n ([] (fib 1 1))\n ([n] (take n (fib)))\n ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1)))))\n)","user":"5e189cc8e4b0dc95940084f7"},{"code":"(fn [n]\n   (loop [result [] f1 1 f2 1 value n]\n     (if (zero? value)\n       result\n       (recur (conj result f1) f2 (+ f1 f2) (dec value) )\n     )\n     )\n  )","problem":26,"user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn myFib [n] (case n\n                    1 '(1)\n                    2 '(1 1)\n                    (let [fib (myFib (- n 1))]\n                         (concat fib\n                                 (list (+ (nth fib (- n 2))\n                                          (nth fib (- n 3))))))))","problem":26,"user":"52161db6e4b0bf4bffd29cb8"},{"code":"#(loop [xs [1 1]] (if (= % (count xs)) xs (recur (conj xs (apply + (take-last 2 xs))))))","problem":26,"user":"513d121fe4b0e544971636a2"},{"code":"(fn [x] (reduce (fn [a b] (conj a (apply + (take-last 2 a)))) [1 1] (range 1 (- x 1))))","problem":26,"user":"4f1d1299535d64f603146487"},{"code":"(fn fibn [n] (take n ((fn ffib [a b] (cons a (lazy-seq (ffib b (+ a b))))) 1 1)))","problem":26,"user":"4e4d4841535dc968683fc4e2"},{"problem":26,"code":"(fn fibonacci [x]\n  (if (= x 1) [1]\n    (if (= x 2) [1, 1]\n      (let [fib (fibonacci (- x 1))]\n        (conj fib\n          (+ (nth (reverse fib) 1)\n             (last fib)))))))","user":"5a292efde4b07f18be40aa77"},{"problem":26,"code":"(fn [n]\n  (loop [elem (list 1 1)\n         len n]\n    (cond\n      (= len 1) (first elem)\n      (= len 2) elem\n      :else\n        (let [lst (last elem)\n              sndlst (last (drop-last elem))]\n          (recur (concat elem [(+ lst sndlst)]) (- len 1))))))","user":"55265376e4b0ffed3738f91b"},{"problem":26,"code":"#(reverse (loop [x 0 y 1 result '() i 0]\n   (if (< i %)\n   \t(recur y (+ x y) (conj result y) (inc i))\n     result\n           )\n     ))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":26,"code":"(fn fib [fib-count]\n  (loop [ fib-list '(1 1)\n          n 2]\n    (if (=  n fib-count) (reverse fib-list)\n      (recur  (conj fib-list (+ (first fib-list) (second fib-list)))(inc n)))))","user":"56ede653e4b04a395b9a0449"},{"code":"#(reduce (fn [coll _] (conj coll (apply + (take-last 2 coll)))) [1 1] (range (- % 2)))","problem":26,"user":"528d1094e4b0239c8a67aebe"},{"problem":26,"code":"(fn fibo\n  [xnum]\n  (if (= xnum 1)\n    [1]\n    (if (= xnum 2)\n      [1 1]\n      (conj (fibo (dec xnum)) (+ (last (fibo (dec xnum))) (last (butlast (fibo (dec xnum)))))\n      )\n    )\n  )\n)","user":"5ced79abe4b0aaa82f1129d0"},{"problem":26,"code":"(fn [x]\n  (loop [frst 1\n         scnd 1\n         cnt 0\n         fibo_collection []]\n    (if (= cnt x)\n      fibo_collection\n      (recur scnd (+ frst scnd) (inc cnt) (conj fibo_collection frst)))))","user":"5d42c88ae4b05dd059a5437e"},{"problem":26,"code":"#(seq (cond (= % 1) '(1)\n                      (= % 2) '(1 1)\n                      :else (loop [c 2 l [1 1]]\n                               (if (= % c)\n                                 l\n                                 (recur (inc c) (conj l (+ (last l) (last (butlast l)))))\n                                 )\n                               )\n\n                       ))","user":"584aa803e4b089d5ab817ee9"},{"problem":26,"code":"(fn [n]\n  (if (< n 1)\n    []\n    (if (= n 1)\n      [1]\n      (if (= n 2)\n        [1 1]\n        (loop [count (- n 2) fibs [1 1]]\n          (if (> count 0)\n            (recur (dec count) (conj fibs (reduce + (take 2 (reverse fibs)))))\n            fibs))))))","user":"561cb6cfe4b064ca9f4b169e"},{"code":"(fn fibset [n]\n  (loop [x n acc '[1 1]]\n    (if (= x 1)\n      '[1]\n      (if (= x 2)\n        acc\n        (recur (- x 1)\n          (conj acc (+ (nth acc (- (count acc) 2))\n            (last acc))))))))","problem":26,"user":"4eaed3a7535d7eef30807328"},{"problem":26,"code":"(fn [pos] \n  (loop [fib [1 1] idx 2]\n    (if (> idx pos)\n      (take pos fib)\n      (recur \n       (conj fib (+ (first(reverse fib)) (second(reverse fib))))\n       (+ idx 1)\n       )\n      )\n    )\n  )","user":"5c527129e4b0fb8c5ffd99de"},{"problem":26,"code":"(fn [x] (letfn [(fib [n] (if (or (zero? n) (= n 1)) 1 (+ (fib (dec n)) (fib (- n 2)))))] (loop [i 0, acc '()] (if (= i x) (reverse acc) (recur (inc i) (conj acc (fib i)))))))","user":"554ba1d3e4b0a04f79299595"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         acc0 0\n         acc1 1\n         acc [1]]\n    (if (= (- n 1) i)\n      (do \n        acc)\n      (do\n        (println acc0)\n        (println acc1)\n        (recur (inc i) acc1 (+ acc0 acc1) (conj acc (+ acc0 acc1)))\n      )\n    )\n  )\n)","user":"58224c53e4b04b46fc4b0f92"},{"problem":26,"code":"(fn fib\n  [len]\n\t(loop [lst [1]]\n    \t(let [new-lst (->> lst \n                       \treverse \n                       \t(take 2)\n                       \t(apply +)\n                       \t(conj lst))]\n    \t(if (= (count new-lst) len)\n          new-lst\n          (recur new-lst)))))","user":"5761513fe4b0994c1922fb87"},{"problem":26,"code":"(fn [x]\n  (loop [x (- x 2)\n         fib '[1 1]]\n    (if (= 0 x)\n      fib\n      (recur (dec x) (conj fib (+ (nth fib (- (count fib) 2)) (nth fib (- (count fib) 1)))))))\n  )","user":"5530b827e4b076ab5578f818"},{"problem":26,"code":"#(letfn [(fibs [] (cons \n                  1 (cons\n                     1 (lazy-seq\n                        (map + (fibs) (rest (fibs)))))))]\n  (take % (fibs)))","user":"5652f23ce4b0f9d632dd846b"},{"code":"#(take % '(1 1 2 3 5 8 13 21 33))","problem":26,"user":"4fee8061e4b0678c553fc30a"},{"code":"#(map (fn f [i] (if (< i 3) 1 (+ (f (- i 1)) (f (- i 2))))) (range 1 (inc %)))","problem":26,"user":"52308649e4b0035e815da387"},{"code":"(fn fib [n]\n  (if (<= n 0)\n      []\n      (if (= n 1)\n          [1]\n          (if (= n 2)\n              [1 1]\n              (let [prev (fib (- n 1))]\n                (conj prev (+ (first (reverse prev))\n                              (second (reverse prev)))))))))","problem":26,"user":"4f03edd7535dcb61093f6b80"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]) ) )","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1) '(1)\n  (if (= n 2) '(1 1)\n  (let [p (fib (- n 1))\n        toadd (drop (- n 3) p)]\n    (concat p (list (+ (first toadd) (last toadd))))))))","user":"5498c4cfe4b0b312c081ff85"},{"code":"(fn oi [l k0 k1 n] (if (= 1 n) (reverse l) (oi (cons (+ k0 k1) l) k1 (+ k0 k1) (- n 1)))) '(1) 0 1","problem":26,"user":"4e7f4147535db966e863cc3d"},{"problem":26,"code":"(fn fib [n]\n    (loop [a 1 b 1 num 2 acc [1 1]]\n      (if (= n num) acc\n        (recur b (+ a b) (inc num) (conj acc (+ a b))))))","user":"5f82cfcce4b0c071e6c840fb"},{"code":"(fn fib [x](   if(= x 0) [0]     (if(= x 1) [1]   (sort <(conj  (flatten (fib (- x 1)))(+ (last (fib (- x 1))) (last (fib (- x 2))))))   )   ) )","problem":26,"user":"5001dd97e4b0678c553fc421"},{"code":"(fn fib [n]\n    (if (= n 1)\n      [1]\n      (let [prev (fib (- n 1))]\n        (conj prev (reduce + 0 (take-last 2 prev))))))","problem":26,"user":"521c6a1ae4b0c4ef0be83083"},{"problem":26,"code":"(fn [n]\n  (reverse\n   ((fn aux [m]\n      (cond\n       (= m 0) '()\n       (= m 1) '(1)\n       (= m 2) '(1 1)\n       :else (\n              let [xs (aux (- m 1))]\n              (conj xs (+ (first xs) (second xs)))\n              )\n       )) n))\n  )","user":"5fef5ccce4b05ac5b16ea1d9"},{"problem":26,"code":"(fn [x]\n (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5ac6f7f7e4b0e27600da777a"},{"problem":26,"code":"#(let [fib (fn f\n            ([] (f 0 1))\n            ([x y] (lazy-seq (cons [x y] (f y (+ x y))))))]\n  (map second (take % (fib))))","user":"5a082ce4e4b01bb0ae8afdec"},{"problem":26,"code":"(fn [n]\n  (if (or (= n 1))\n    [1]\n    (loop [pp 0 p 1 c 1 fib [1]]\n      (if (= c n)\n       fib\n       (let [nxt (+ pp p)]\n      \t(recur p nxt (inc c) (conj fib nxt))\n       )\n      )\n    )\n   )\n  )","user":"56004deee4b04bb52996e164"},{"problem":26,"code":"(fn [n] (reduce (fn [s, i] (if (> i 1) (conj s (+ (last s) (nth s (- (count s) 2)))) (conj s 1))) [] (range n)))","user":"5519c157e4b00ace28fe6e32"},{"problem":26,"code":"(fn [n] (reverse (last (take (dec n) (iterate (fn [sequence] (conj sequence (reduce + (take 2 sequence)))) (seq [1 1]))))))","user":"5e6df58ee4b04a83ad7cd297"},{"problem":26,"code":"(fn fibonacci\n  [num]\n\n  (map second\n       (take num\n             (iterate\n               (fn [[val acc]]\n                 [acc (+ acc val)])\n               [0 1]))))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":26,"code":"(fn fib [x]\n  (if (<= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (let [previous-terms (fib (dec x))]\n        (conj previous-terms (+ (last previous-terms) (last (butlast previous-terms))))))))","user":"579563ffe4b0e215f87e847e"},{"code":"(fn [N] \n  (letfn [(fib-seq\n           ([] (concat (list 1 1) (fib-seq 1 1)))\n           ([n_2 n_1] (let [n (+ n_2 n_1)] (lazy-seq (cons n (fib-seq n_1 n)))))\n           )]\n    (take N (fib-seq)))\n  )","problem":26,"user":"52c2106fe4b07a9af5792374"},{"problem":26,"code":"(fn fibo [k]\n  (loop [n (- k 2)\n         nums [1 1]]\n    (if (<= n 0)\n      nums\n      (recur (dec n) (conj nums (+(nth (reverse nums) 0) (nth (reverse nums) 1)))))))","user":"53b4344de4b047364c0444b4"},{"code":"(fn [n]\n(loop [i 0 fib []]\n(if (= i n)\nfib\n(recur (inc i)\n(cond (= i 0) (conj fib 1)\n(= i 1) (conj fib 1)\n:else (conj fib (+ (fib (- i 1))\n(fib (- i 2)))))))))","problem":26,"user":"508c3d42e4b0f17d83ea26b2"},{"problem":26,"code":"(fn fib [n] (take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"58d1fe17e4b03c36ff7e58f5"},{"problem":26,"code":";(last (drop-last [2 6 5]))\n;(conj [1] 2)\n\n(fn [n]\n  (reduce \n   (fn [acc _]\n     (case acc\n       [] [1]\n       [1] [1 1]\n       (conj acc\n         (+ (last acc) \n            (last \n             (drop-last acc))))))\n   []\n   (range n)))","user":"5b38d2f3e4b02d533a91bbaf"},{"code":"(fn [x]\n    ( loop [fibs [1 1]]\n        (if (= (count fibs) x)\n            (reverse fibs)\n            (recur (cons (+ (first fibs) (second fibs)) fibs)))))","problem":26,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":26,"code":"(fn fib-n\n  [n]\n  (map (fn fib\n    [n]\n    (if (or (= n 0) (= n 1))\n      1\n      (+ (fib (- n 1)) (fib (- n 2))))) (range n)))","user":"5add1fede4b0837691e92c0a"},{"code":"#(reduce (fn [xs x]\n  (cond\n    (= 0 x) [1]\n    (= 1 x) [1 1]\n    :default (conj xs \n      (+ (xs (- x 2)) \n         (xs (- x 1)))))) [] (range %))","problem":26,"user":"4f0f36a7535d0136e6c22336"},{"code":"(fn [n]\n  (loop [i 1 fibs '(1 1)]\n    (if (= i (- n 1))\n      fibs\n      (recur (+ i 1)\n             (reverse (cons (+ (nth fibs i)\n                               (nth fibs (- i 1)))\n                            (reverse fibs)))))))","problem":26,"user":"51991a89e4b068aa333628fd"},{"problem":26,"code":"(fn fb [x]\n  (if (= 2 x)\n    [1 1]\n    (let [f1 (fb (dec x))]\n     (conj f1\n          (+\n           (last f1)\n           (first (rest (reverse f1)))\n           )\n          )\n           \n          \n   ))\n  )","user":"5c4a08c5e4b0f9f7a8770e4f"},{"code":"#(reverse (last (take (dec %) (iterate (fn [[a b :as coll]] (cons (+ a b) coll)) [1 1]))))","problem":26,"user":"50e3e108e4b01912b3285c48"},{"problem":26,"code":"(fn fibonacci [x]\n     (take x (map first(\n              iterate (\n                       fn [[y z]]\n                           [z (+ y z)]) [1 1]))\n      )\n)","user":"5f837b30e4b01aacbe7a2714"},{"code":"#(take % \n  (map first\n    (iterate\n      (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e781a2e535d324fb2983d74"},{"problem":26,"code":"(fn fib [f n]\n  (if (= n 2)\n    (reverse f)\n    (fib\n     (conj f (+ (first f) (first (rest f))) )\n     (- n 1))\n    ))\n(list 1 1)","user":"5e7374ace4b085ba37836dd0"},{"code":"(fn  [x]\n  (if (< x 2) '(1 1)  \n    (loop [counter (- x 2) \n          accum [1 1]]\n      (if (= counter 0) accum\n        (recur (dec counter) \n          (conj accum (+ (last accum) (last (butlast accum))))\n)))))","problem":26,"user":"4f617f66e4b0defedf855fc0"},{"problem":26,"code":"#(reduce conj [] (map (fn -fib [x] (cond (< x 2) 1 (> x 1) (+ (-fib (- x 1)) (-fib (- x 2)) ))) (range %)))","user":"546113ffe4b01be26fd74699"},{"code":"(fn [fibn]\n  (loop [a 1, b 1, fibs [1], n fibn]\n    (if (zero? n)\n      (take fibn fibs)\n      (recur b (+ a b) (conj fibs b) (dec n)))))","problem":26,"user":"4e2edb0e535deb9a81d77f0d"},{"code":"#(letfn [(fib [n] \n  (if (<= n 1)\n  1\n  (+ (fib (dec n)) (fib (dec (dec n))))))]\n (map fib (range %)))","problem":26,"user":"4e6dc5f5535d5021c1a895f0"},{"problem":26,"code":"(fn [n]\n  (let [lazy \n        ((fn fib-gen [x y]\n           (lazy-seq (cons x (fib-gen y (+ x y))))) 0 1)]\n        (rest (take (inc n) lazy))))","user":"5d9515a9e4b0d3f9b434ad2c"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [y (+ x y)]) [ 1 1 ])))","user":"57c647bbe4b05aa3c4741cf3"},{"problem":26,"code":"(fn\n  [n]\n  (take n\n        (map last (iterate (fn \n                             [[a b]] \n                             [b (+ a b)]) \n                           [0 1]))\n        )\n  )","user":"5bbbce99e4b0a20761a23610"},{"problem":26,"code":"#(take %\n((fn fibb [a b] (lazy-seq (cons b (fibb b (+ b a))))) 0 1))","user":"553f70cae4b0a04f792994f8"},{"problem":26,"code":"(fn fib \n         ([]\n           (fib 1 1))\n        ([n] (take n (fib)))\n         ([a b]\n           (lazy-seq (cons a (fib b (+ a b))))))","user":"5e83a273e4b09a7a73c8bbbb"},{"problem":26,"code":"(partial (fn fib [result a b n]\n  (if (= n 0)\n    result\n    (fib (conj result b)\n         b\n         (+ a b)\n         (- n 1)))) [] 0 1)","user":"572a35a9e4b0f4d77e65122f"},{"code":"(fn fib [n] (cond \n  (= n 2) [1 1] \n  :else (let \n    [l (fib (- n 1))] \n    (conj l (+ (l (- n 2)) (l (- n 3)))))))","problem":26,"user":"4dbecb06535d020aff1edf6a"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"52dcd378e4b09f7907dd13d6"},{"problem":26,"code":"(fn [l]\n   (reduce (fn [acc item]\n             (if (< (count acc) 2)\n               (conj acc 1)\n               (conj acc (apply + (drop (- (count acc) 2) acc)))))\n           [] (range 1 (+ l 1))))","user":"53214efbe4b09d4e7a9b54b2"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 i 0 s []]\n    (if (< i n)\n      (recur b (+ a b) (inc i) (conj s a))\n      s)))","user":"551ee974e4b08d5046aa8a50"},{"problem":26,"code":"(fn fib [x]\n  (case x\n    1 '(1)\n    2 `(1 1)\n    (let [fibs (fib (- x 1))]\n      (concat fibs [(+ (last fibs) (nth fibs (- (count fibs) 2)))]))))","user":"581e8b86e4b04b46fc4b0f2b"},{"problem":26,"code":"(fn fib\n  ([n] \n   (cond\n    (<= n 0) ()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (fib '(1 1) n)))\n  ([acc n]\n   (if (= n 2 )\n     (reverse acc)\n     (recur (conj acc (+ (first acc) (second acc) ) ) (dec n)))))","user":"554edb85e4b00713264bd99a"},{"code":"(fn [limit]\n  (loop [s [1 1]]\n    (let [next (count s)]\n      (if (= next limit)\n        s\n        (recur (conj s (+ (nth s (- next 1)) (nth s (- next 2)))))))))","problem":26,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":26,"code":"(fn fib\n  ([x]\n    (if (= x 0)\n      0\n      (if (= x 1) \n        [1]\n        (if (>= x 2)\n          (fib (dec x) [1 1])\n          []))\n    )\n  )\n  ([x res]\n    (if (= x 1)\n      res\n      (recur (dec x) (conj res (+ (last res) (last (drop-last res)))))\n    )\n  )\n)","user":"556be3dce4b09a3098a524f7"},{"code":"(fn [num] (rest (take (+ 1 num)\n                (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"5146fd44e4b0d12420447958"},{"problem":26,"code":"(fn [n] (cond \n           (<= n 1) '(1)\n           (= n 2) '(1 1)\n           (> n 2) (loop [result '(1 1)] \n                     (let [reversed (reverse result) newest (+ (first reversed) (second reversed)) current (reverse (cons newest reversed))] \n                                           (if (= (count current) n)\n                                             current\n                                             (recur current)\n                                             )) )\n           ))","user":"556f443be4b09a3098a5251e"},{"problem":26,"code":"#(loop [f [1 1]]\n   (if (= % (count f))\n     f\n     (recur (conj f (+ (last f) (nth f (- (count f) 2)))))))","user":"56cf115de4b0ea9b8538f765"},{"problem":26,"code":"#(take % \n\t((fn fib\n  \t\t([ ] (fib 1 1))\n  \t\t([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"5ed4482be4b016b56eae05ca"},{"code":"(fn [x] (loop [n (- x 2) r '(1 1)]\n  (if (pos? n)\n    (recur (dec n)\n           (conj r (+ (first r) (second r))))\n    (reverse r))))","problem":26,"user":"50c99e3ee4b0bed41a122997"},{"problem":26,"code":"(fn fib [lst cnt]\n  (if (< (count lst) cnt)\n    (let [i (- (count lst) 2) rst (drop i lst)]\n      (recur (conj lst (+\n                    (first rst)\n                    (second rst)))\n             cnt))\n      lst))\n'[1 1]","user":"55b77c7ce4b01b9910ae29a3"},{"problem":26,"code":"(fn myfib1 [n]\n  (loop [cnt n acc [0 1]]\n    (if (zero? cnt)\n      (drop-last (rest acc))\n      (recur (dec cnt) (conj acc (reduce + [(nth acc (- (count acc) 2))  (nth acc (- (count acc) 1))]))))))","user":"54caaa48e4b057c6fda3a267"},{"problem":26,"code":"(fn [len]\n   (loop [cnt 2\n          val [1 1]]\n     (if (= cnt len)\n       val\n       (recur (inc cnt) (conj val (reduce + (take-last 2 val)))))))","user":"5bf06734e4b0a6d31fed2153"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first\n  \t  (iterate\n  \t    (fn [[x y]] [y (+ x y)])\n  \t    [1 1]))))","user":"5afecee2e4b0cc2b61a3bd28"},{"problem":26,"code":"#(loop [fibo [1 1] pnum 1 lnum 1]\n    (if (not= (count fibo) %1)\n      (recur (conj fibo (+ pnum lnum)) lnum (+ pnum lnum))\n      fibo))","user":"58a6806ee4b01a0c0b23292f"},{"code":"(fn prob-0026\n  [n]\n  (letfn [(fib-seq\n            ([]    (fib-seq 1 1))\n            ([a b] (lazy-seq (cons a (fib-seq b (+ a b)))))) ]\n\n    (take n (fib-seq))))","problem":26,"user":"4f047c07535dcb61093f6bcd"},{"code":"#(take % ((fn rfib [a b]\n           (lazy-seq (cons a (rfib b (+ a b))))\n           ) 1 1)\n       )","problem":26,"user":"52e59ca5e4b09f7907dd1464"},{"problem":26,"code":"(fn [x]\n  (loop [fib [1] remaining (- x 1) nm1 1 nm2 0]\n    (if (= remaining 0)\n      fib\n      (recur (conj fib (+ nm1 nm2)) (dec remaining) (+ nm1 nm2) nm1)\n    )\n  )\n)","user":"57b55290e4b0fbc9809a27a9"},{"code":"(fn fib [n]\n  (loop [i 0\n         a 0\n         b 1\n         res []]\n    (if (= i n)\n      res\n      (recur (inc i)\n             b\n             (+ a b)\n             (conj res b)))))","problem":26,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":26,"code":"(fn [x]\n  (reverse\n\t(loop [fib '(1 1) ]\n          (if (= (count fib) x)\n            fib\n\t\t\t(recur (conj fib (+ (first fib) (second fib) ) ))\n          )\n\t)\n\t)\n  )","user":"605b1197e4b000d535e6f548"},{"problem":26,"code":"(fn [n]\n\t(cond (= n 1) [1]\n\t\t  (= n 2) [1 1]\n\t:else \n\t(loop [i 3\n\t\t   n n\n\t\t   acc [1 1]]\n\t\t   (if (> i n)\n\t\t   \tacc\n\t\t    (recur (inc i) n (conj acc (+ (nth acc (- (count acc) 2)) \n\t\t   \t\t \t\t\t\t\t\t\t\t   (last acc))))))))","user":"57c0393be4b05aa3c4741c90"},{"code":"(fn [x]\r\n      (take x\r\n            ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4e028764535d04ed9115e790"},{"code":"#(loop [coll [1 1]]\r\n    (if (< (count coll) %) \r\n      (recur (conj coll (+ (last coll) (last (drop-last coll)))))\r\n      coll))","problem":26,"user":"4eb171d7535d7eef30807340"},{"problem":26,"code":"(fn n-fib [n]\n  (cond\n  (= n 1) [1]\n  (= n 2) [1 1]\n  :else (let [prev-fib (n-fib (dec n))] \n          (concat prev-fib (vector (apply + (take-last 2 prev-fib)))))))","user":"563c7f98e4b0bfe05bf11836"},{"problem":26,"code":"(fn [arg] (loop [x arg ret [] fib1 1 fib2 1]\n            (if (= 0 x) \n              ret\n              (recur (dec x) (conj ret fib1) fib2 (+ fib1 fib2)))))","user":"57e572b5e4b0bfb2137f5ad7"},{"problem":26,"code":"(fn\n  [n]\n  (if (= n 1)\n    '(1)\n    (reverse\n      (loop [lst '(1 1)]\n        (if (= (count lst) n)\n          lst\n          (recur (conj lst (+ (first lst) (second lst))))\n        )\n      )\n    )\n  )\n)","user":"5c9b07cde4b048ec896c5abd"},{"code":"(fn [x]\n  (if (= 0 x) []\n    (if (= 1 x) [1]\n      (loop [s [1 1] n-2 1 n-1 1 y 2]\n        (if (= x y) s\n          (recur (concat s [(+ n-2 n-1)]) n-1 (+ n-2 n-1) (+ 1 y)))))))","problem":26,"user":"50e4a5a9e4b0cb9ec68fbca3"},{"problem":26,"code":";;(fn fibo [size] \n;;(loop [pre 1, cur 1, result [1 1]] \n;;    (if (>= (count result) size) \n;;       result \n;;       (recur cur, (+ pre cur), (conj result (+ pre cur)))  \n;;)))\n\n#(take \n  %\n  (map \n   first\n   (iterate \n    (fn [[a b]]\n     [b (+ a b)])\n    [1 1])))","user":"56899934e4b0dcc4269f4080"},{"problem":26,"code":"(fn fib\n  [n]\n  ((fn fib_list\n     [i s]\n     (cond (<= i 2) (fib_list (inc i) (conj s 1))\n           (<= i n) (fib_list (inc i) (conj s (+ (last s) (last (butlast s)))))\n           :else s)) 1 []))","user":"55664950e4b0c656e3ff1832"},{"code":"(fn [cnt]\n    (loop [acc '() i 0]\n          (if (= i cnt)\n              (reverse acc)\n            (recur \n                   (cond\n                    (= i 0) '(1)\n                    (= i 1) '(1 1)\n                    :else (cons\n                           (+ (first acc) (second acc))\n                           acc))\n                   (inc i)))))","problem":26,"user":"4e43c91f535dc968683fc4a5"},{"problem":26,"code":"(fn [n] (loop [f1 0 f2 1 cnt n acc '()] \n           \t(if (= cnt 0)\n           \t\t(reverse acc)\n             \t(recur f2 (+ f1 f2) (dec cnt) (conj acc f2))\n             )\n          )\n        )","user":"5471f2fbe4b094393f72dd70"},{"problem":26,"code":"#(take % \n  ((fn fib [a b] \n     (cons a \n         (lazy-seq (fib b (+ b a))))) \n   1 1))","user":"53d00195e4b00fb29b221305"},{"problem":26,"code":"(fn fibseqp [n]\n  (loop [s 0 fibseq [1]]\n    (if (= (inc s) n) fibseq\n      (recur (inc s) (into fibseq (list (reduce + (take 2 (reverse fibseq)))))))))","user":"5e4d2506e4b0889a8790a570"},{"problem":26,"code":"(fn fib [k]\n  (cond\n    (= k 1) '(1)\n    (= k 2) '(1 1)\n    :else (let [prev (fib (dec k))\n                new-el (+ (nth prev (- k 3)) (nth prev (- k 2)))]\n            (concat prev (list new-el)))))","user":"5f63684be4b02876ed9fd012"},{"code":"(fn fibs [n] \n  (map (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (+ n 1))))","problem":26,"user":"4f13047d535d64f60314642c"},{"problem":26,"code":"(fn[n] \n  (if (= n 1) '(1) \n  (loop[s '(1 1) count (- n 2) fib-2 1 fib-1 1]\n    (if (= count 0) \n      (reverse s)\n      (recur (conj s (+ fib-2 fib-1)) (- count 1) fib-1 (+ fib-2 fib-1))))))","user":"56483f45e4b0284900eef62b"},{"code":"(fn[n] (map first (take n \n  (iterate #(list (last %) (+ (first %) (last %))) '(1 1))))\n)","problem":26,"user":"4f0365fd535dcb61093f6aa5"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) '(1 1)))))","problem":26,"user":"4f15de56535d64f603146448"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 n n acum ()]\n    (cond\n       (zero? n) (reverse acum)\n       :else (recur b (+ a b) (dec n) (conj acum a)))))","user":"55efb51ee4b066087aa9453b"},{"problem":26,"code":"#(take % ((fn fib [prev cur] \n            (cons prev (lazy-seq (fib cur (+ cur  prev)))))\n          1 1))","user":"58d4e73ce4b03c36ff7e594d"},{"problem":26,"code":"(fn [cnt]\n     ((fn [itr cnt arr x y]\n          (if (= itr cnt)\n              arr\n              (recur (+ 1 itr) \n                     cnt\n                     (conj arr (+ x y))\n                     y\n                     (+ x y))))\n          1 cnt [1] 0 1))","user":"58dadf46e4b0a4d5acaab66b"},{"problem":26,"code":"(fn [elem]\n  (loop [a 0 b 1 number 1 lst []]\n    (if (= number elem)\n      (conj lst b)\n      (recur b (+ a b) (inc number) (conj lst b)))))","user":"57c2d66ae4b05aa3c4741cb9"},{"problem":26,"code":"(fn [n]\n  (->> (range n)\n       (reduce\n         (fn [f i] (prn i f)\n           (conj f\n                 (if (< i 2)\n                   (inc i)\n                   (reduce + 0 (take 2 f)))))\n         '(1)) reverse (take n)))","user":"58a3279fe4b02bd94d917ee9"},{"code":"#(take % \n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))","problem":26,"user":"4e6eff83535d5021c1a89615"},{"code":"(fn fib[x] (take x ((fn fibacc [a b] (cons a (lazy-seq (fibacc b (+ b a))))) 1 1)))","problem":26,"user":"536234a5e4b0243289761e4d"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n             (fn [[n-2 n-1]]\n               [n-1 (+ n-2 n-1)])\n             [1 1])))","user":"58c5ad55e4b021aa9917ed42"},{"problem":26,"code":"(fn fib\n  [anum]\n  (let [calc (fn fibfn [n]\n               (cond\n                 (= n 2) 1\n                 (= n 1) 1\n                 :else (+ (fibfn (- n 2)) (fibfn (- n 1)))))]\n    (for [x (range 1 (+ 1 anum))]\n      (calc x))))","user":"573e4be9e4b05c31a32c0829"},{"code":"#(take % ((fn fib [x y] (cons x (lazy-seq(fib y (+ x y))))) 1 1))","problem":26,"user":"534f1c94e4b084c2834f4ac5"},{"code":"(fn fibo\n  [n] \n  (take n (reduce (fn [acc x] \n          (let [rev (reverse acc)\n                nth (first rev)\n                nth-minus-1 (second rev)]\n            (concat acc (list (+ nth nth-minus-1))))) \n        [1 1] \n        (range (max 0 (- n 2))))))","problem":26,"user":"539e717fe4b0ca733b974488"},{"code":"(fn [n]\n    (take n\n      ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n      ))","problem":26,"user":"51950793e4b09df09a77a3e4"},{"problem":26,"code":"(fn [num]\n  (let [sq (atom '())]\n    (loop [current 2 sq '(1 1)]\n      (if (>= current num)\n        sq\n        (recur (inc current) (concat sq [(apply + (take 2 (reverse sq)))])))))\n\n  )","user":"60436423e4b02d28681c77a3"},{"problem":26,"code":"(fn fib ([n]\n               (fib [] n 1 0))\n        ([coll n num prev_num]\n         (if (zero? n)\n           coll\n           (recur (conj coll num) (dec n) (+ num prev_num) num))))","user":"5d915f01e4b0915913b1d401"},{"code":"#(loop [a 0 b 1 n % lst nil]\n   (if (<= n 0) (reverse lst)\n     (recur b (+ a b) (dec n) (conj lst b))))","problem":26,"user":"534efe66e4b084c2834f4ac1"},{"problem":26,"code":"(fn [num]\n  (loop [alist [1 1]\n         counter 2]\n    (if (= counter num)\n      alist\n      (recur (conj alist (+ (first (reverse alist)) (second (reverse alist)))) (inc counter)))))","user":"557e2eafe4b05c286339e0d2"},{"problem":26,"code":"#(loop [nums [], a 0, b 1, more %]\n   (if (= 0 more)\n     nums\n     (recur (conj nums b) b (+ a b) (dec more))))","user":"540c8f3fe4b0addc1aec6705"},{"problem":26,"code":"(fn fib [cnt]\n  (loop [x cnt\n      newSe '[1]\n      prevNum 1\n      prevTwo 0]\n  (println x)\n  (println newSe)\n  (if (> x 1)\n    (recur (dec x) (conj newSe (+ prevNum prevTwo) ) (+ prevTwo prevNum) prevNum)\n     newSe\n  )\n)\n  )","user":"5c337305e4b0d62ef62d9f48"},{"code":"(fn [n]\n  (letfn [(rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))]\n    (take n (rfib 1 1)))\n  )","problem":26,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn somefib\n([n] (list* 1 1 (somefib 1 1 (- n 2))))\n([x y n] (if (> n 0)\n(cons (+ x y) (somefib y (+ x y) (dec n))))))","problem":26,"user":"50a8cc97e4b0a9a42786e8db"},{"problem":26,"code":"(fn fib [n]\n\n  (if (= n 1)\n    [1])\n\n  (if (= n 2)\n    [1 1])\n\n  (if (> n 2)\n\n    (loop [i 2\n           result [1 1]]\n\n      (if (< i n)\n        (recur (inc i) (conj result (+ (last result) (last (drop-last result)))))\n        result)\n      )\n\n    )\n\n  )","user":"5c24c654e4b07e362c2305a7"},{"problem":26,"code":"(fn fib [size]\n  (loop [fibs [1] next-fib 1 target (dec size)]\n    (if (= 0 target)\n      fibs\n      (recur (conj fibs next-fib) (+ (last fibs) next-fib) (dec target)))))","user":"564b1ff8e4b0284900eef663"},{"problem":26,"code":"(fn [x]\n  (loop [fib [1 1]]\n    (if (>= (count fib) x)\n      fib\n      (recur (conj fib (+ (last fib)\n                          (last (butlast fib))))))))","user":"5d431c77e4b07c84aa5ae68f"},{"problem":26,"code":"#(loop [result [1 1]\n         cnt \t%]\n         (if (zero? cnt)\n           (take % result)\n       (recur (conj result (apply + (take-last 2 result))) (dec cnt))))","user":"5646bb8fe4b0284900eef614"},{"problem":26,"code":"(fn [x]\n  (loop [n 2 l '(1 1)] \n    (if (= n x)\n      (reverse l)\n      (recur (inc n) (cons (apply + (take-last 2 (reverse l))) l))\n    )\n  )\n)","user":"55bbb28be4b01b9910ae29ea"},{"problem":26,"code":"#(letfn [(fib [x y] \n              (lazy-seq (cons x (fib y (+ x y)))))]\n   (take % (fib 1 1)))","user":"5ad63a34e4b0ea6055cfac01"},{"problem":26,"code":"#(loop [x1 1 x2 1 arr [1 1] n (- % 2)] (if (zero? n) arr (recur x2 (+ x1 x2) (conj arr (+ x1 x2)) (dec n))))","user":"5c8319c3e4b0c8042a70ce45"},{"problem":26,"code":"(fn fibo\n  [n]\n  (loop [lst '(1 1)]\n    (if (= n (count lst))\n      (reverse lst)\n      (recur (cons (reduce + (take 2 lst)) lst)))))","user":"57f81534e4b0d3187e900915"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    (seq 1)\n    (loop [result '(1 1)\n           left (dec (dec n))]\n      (if (= left 0)\n        (reverse result)\n        (recur (conj result (+ (first result) (second result))) (dec left))))))","user":"53838b9ee4b06839e8705ee1"},{"code":"#(reverse (loop [x 1 newlist []]\n             (cond\n              (= x (+ 1 %1)) newlist\n              (= x 1) (recur (inc x) (conj newlist 1))\n              (= x 2) (recur (inc x) (conj newlist 1))\n              :else\n              (recur (inc x) (cons (apply + (take 2 newlist)) newlist)))))","problem":26,"user":"53838742e4b06839e8705ee0"},{"problem":26,"code":"(fn [n] \n  (->> [1 1] \n    (iterate (fn [[a b]] [b (+' a b)]))\n    (map first)\n    (take n)))","user":"55ef2f27e4b066087aa94532"},{"code":"(fn [n]\n  (loop [x 1\n         coll [1]]\n    (if (= n (count coll))\n      coll\n      (recur (+ x (last coll)) (conj coll x))\n      )))","problem":26,"user":"4eae2f9e535d7eef30807324"},{"problem":26,"code":"(fn [x]\n  (reduce (fn [acc _] (conj acc (apply +' (take-last 2 acc))))\n          [1 1]\n          (repeat (- x 2) 0)))","user":"5b772ad7e4b047b03b2036e8"},{"problem":26,"code":"(fn fib [n]\n  (loop [ x [1 1]]\n    (if (< (count x) n)\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"5d517784e4b0776584bd6f60"},{"code":"(fn [n] (loop [i n lst '()]\n          (if (= i 0)\n            lst\n            (if (= i n)\n              (recur (dec i) '(1))\n              (recur (dec i) (concat lst (list (reduce + (take 2 (reverse lst))))))))))","problem":26,"user":"511e3454e4b028ee16def195"},{"code":"#(take % ((fn fib [x y]\n  (lazy-seq (cons y (fib y (+ x y))))) 0 1))","problem":26,"user":"4ecfb458535d44c135fd68bb"},{"problem":26,"code":"(fn [n] \n  (take n\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n  1 1)))","user":"55ede35ce4b0121d4835fde1"},{"code":"#(map (fn [n]\n\t    (loop [a 1, b 1, i n]\n\t\t  (if (zero? i)\n\t\t     a\n\t\t     (recur b (+ a b) (dec i)))))\n      (range %))","problem":26,"user":"536c99c5e4b0fc7073fd6e46"},{"code":"#(take % \n      (map first \n           (iterate (fn [[a b]] \n                      [b (+ a b)]) \n                    [1 1])))","problem":26,"user":"506d5e4ce4b0a302964c5493"},{"problem":26,"code":"(fn f[n]\n  (reduce (fn [a b]\n            (if (or (= b 1)\n                    (= b 2))\n              (conj a 1)\n              (conj a (+ (last a)\n                         (last (butlast a))))))\n          [] (range 1 (inc n))))","user":"5978305be4b01722bebd4d03"},{"problem":26,"code":"(fn fibo [n]\n     (loop [a 1 b 1 c 0 res ()]\n          (if (= c n)\n              res\n              (recur\n                b\n                (+ a b)\n                (inc c)\n                (concat res [a])))))","user":"568a743ee4b0dcc4269f408e"},{"problem":26,"code":"(fn [y]\n  (map \n    (fn x [n]\n      (case n\n        0 1\n        1 1\n        (+ (x (- n 1)) (x (- n 2)))))\n    (range y)))","user":"605b49b7e4b079a07f8593f8"},{"problem":26,"code":"(fn fibs [n]\n  (letfn [(fib [x y zs m]\n               (if (= m n)\n                 zs\n                 (fib y (+ x y) (cons x zs) (+ m 1))))]\n    (reverse (fib 1 1 '() 0))))","user":"58cf00c8e4b03c36ff7e58ac"},{"code":"#(reverse (loop [a 1 b 0 c % ret '() ]  (if (= c (count ret)) ret  (recur b (+ b a) c (cons (+ a b) ret)))))","problem":26,"user":"50463347e4b011c5dfee771e"},{"problem":26,"code":"(fn [x] (take x \n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","user":"56a22d4ae4b0542e1f8d14ba"},{"code":"#(take % ((fn fib-seq []\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))\n      )","problem":26,"user":"528cc69fe4b0239c8a67aeb7"},{"code":"(fn [n]\n  (if (< n 2)\n    '(1)\n    (reverse \n     (reduce \n      (fn [xs _] (conj xs (apply + (take 2 xs)))) '(1 1) (range 2 n)))))","problem":26,"user":"525078b6e4b0541d1855b832"},{"problem":26,"code":"#(take % ((fn fib \n         ([]\n           (fib 1 1))\n         ([a b]\n           (lazy-seq (cons a (fib b (+ a b))))))))","user":"5a137364e4b0ff51aa4b3185"},{"code":"(fn fib [n] \n  (if (< n 3) (subvec [1 1] 0 n)\n    (let [f (fib (dec n))]\n      (conj f (apply + (subvec f (- n 3)))))))","problem":26,"user":"4fb2101ce4b081705acca284"},{"problem":26,"code":"(fn fib\n    ([n] \n        (fib [1 1] n)\n    )\n    \n    ([x n]\n        (if (< (count x) n) \n            (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n) \n            \n            (apply list x)   ;else\n        )\n    )\n)","user":"5f0cb4f3e4b0f30dddfb5d4e"},{"problem":26,"code":"#(loop [x 1\n        result '(1)]\n    (if (= (count result) %)\n      (reverse result)\n      (recur (+ x (first result))\n             (conj result x))))","user":"56f68677e4b08e7d20b96826"},{"code":"(fn fib [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5220a770e4b0e6a83c8925a3"},{"problem":26,"code":"(fn fib [x] (reduce (fn [a b] \n            (if (< b 2)\n              (conj a 1)\n              (conj a (+ (last a) (nth a (- b 2))))))\n          []\n          (range x)))","user":"58c3af4de4b021aa9917ed1b"},{"problem":26,"code":"(fn [x] (loop [a 0 b 1 cnt 0 result []] (if (< cnt x) (recur b (+ a b) (inc cnt) (conj result b)) result)))","user":"569c40cee4b0542e1f8d1462"},{"problem":26,"code":"(fn fibo [size] \n  (take size ((fn fibo-recur [start end]\n             (cons start (lazy-seq (fibo-recur end (+ start end))))) 1 1)\n        ))","user":"58597562e4b0f14aab7c8734"},{"code":"#(take % (map second (iterate (fn [[f2 f1]] [(+ f2 f1) f2]) [1 1])))","problem":26,"user":"51e89428e4b006d205356a51"},{"code":"(fn fib3 [n] \n  (rest (take (+ 1 n)\n      (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"50981062e4b04e098a4c7268"},{"problem":26,"code":"(fn [n]\n      (loop [r []\n             i 1]\n        (cond\n          (> i n)\n          r\n          :else\n          (recur (if (or (= 1 i) (= 2 i))\n                   (conj r 1)\n                   (conj r (+ (last r) (last (butlast r))))) (inc i)))))","user":"5379946be4b06839e8705e56"},{"problem":26,"code":"#(take %1 (map first (iterate (fn[[a b]] [b (+ a b)]) [1 1])))","user":"54d4ba98e4b0a52adc2e2004"},{"code":"(fn [x]\n  (loop [i 1 col [1]]\n    (if (not= i x)\n      (recur (inc i) (conj col (+ (or (second (reverse col)) 0) (or (last col) 0))))\n      col)))","problem":26,"user":"538a2930e4b0640c7a9a58b7"},{"problem":26,"code":"(fn [n]\n  (cond (= 0 n) []\n        (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else\n        (loop [n (- n 2) fb-1 1 fb-2 1 acc [1 1]]\n          (if (zero? n) acc\n            (let [fb (+ fb-1 fb-2)]\n              (recur (- n 1) fb fb-1 (conj acc fb)))))))","user":"57f80350e4b0d3187e90090c"},{"code":"(fn [x] \n  (map first (take x \n    (iterate \n      #(vector (second %)(reduce + %))\n      [1 1]))))","problem":26,"user":"5047bbd1e4b0ec70b3ef8d90"},{"problem":26,"code":"(fn fib [n] \n    (if (= n 2) '(1 1) \n      (concat (fib (dec n)) \n              (list (+ (first (reverse (fib (dec n)))) \n                       (first (rest (reverse (fib (dec n)))))\n                    )))))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [n] \n  (condp = n\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    (loop [m (- n 2) fib '(1 1)]\n       (if (= m 0) (reverse fib)\n           (recur (- m 1) (conj fib (+ (first fib)\n                                       (second fib))))))))","problem":26,"user":"4e7dbe0c535db169f9c796e3"},{"code":"(fn [x] (take x ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1)))","problem":26,"user":"4f341320e4b0e243712b1eb4"},{"problem":26,"code":"(fn [x] (take x (map second \n          (iterate (fn [[a b]] [b (+' a b)]) \n                        [0 1]))))","user":"5422c959e4b01498b1a71ac7"},{"problem":26,"code":"(fn [x] (loop [a 0 b 1 r []]\n                     (if (= (count r) x)\n                       r\n                       (recur b (+ a b) (conj r b)))))","user":"569d095fe4b0542e1f8d1470"},{"code":"#(loop [i 0 a 1 b 1 r []] (if (< i %) (recur (inc i) b (+ a b) (conj r a)) r))","problem":26,"user":"5194ea33e4b05be8c43d2383"},{"code":"(fn f [x] (\n  if (== x 1)\n   '(1)\n   (if (== x 2)\n    '(1 1)\n    (\n      let [r (f (dec x))]\n      (concat r (list (+ (last r) (last (butlast r)))))\n    )\n   )\n))","problem":26,"user":"4fc7b079e4b0ee37620e1827"},{"code":"#(loop [x 1 v1 0 v2 1 res '()] \n  (if(<= x %)\n    (recur (inc x) v2 (+ v1 v2) (concat res (list v2)))\n    res\n))","problem":26,"user":"4fccd906e4b0ee37620e186c"},{"problem":26,"code":"(fn [n] \n       (loop [iter 1 seq [1] two-ago 0]\n         (if (= n iter)\n           seq\n           (recur (inc iter) (conj seq (+ two-ago (last seq))) (last seq)))))","user":"55457b73e4b0a04f79299536"},{"code":"#(loop [a 1 b 1 n % f []] (if (= n 0) f (recur b (+ a b) (- n 1) (conj f a))))","problem":26,"user":"4e6a48d5535d8ccf87e9febd"},{"problem":26,"code":"#(loop [a 1\n        b 1\n        xs []]\n   (if (= % (count xs))\n     xs\n     (recur b (+ a b) (conj xs a))))","user":"5fbb010ae4b03f550f448233"},{"problem":26,"code":"#(loop [n 0\n        ls []] (if (= n %) \n                 (seq ls) \n                 (let [one (or (second (reverse ls)) 0)\n                       two (or (last ls) 1)]\n                 \t(recur (inc n) (conj ls (+ one two))))))","user":"5a64ce4ee4b0512ff01cd9a6"},{"problem":26,"code":"#(take % (map second (iterate (fn [[a, b]] [b (+ a b)]) [0 1])))","user":"53751c5ee4b06839e8705e11"},{"code":"(fn [num] (loop [x 1 y 1 fibs [1 1] sofar 2]                                                                                                                \n             (if (>= sofar num)                                                                                                                              \n               fibs                                                                                                                                          \n               (let [new (+ x y)]                                                                                                                            \n                 (recur y new (conj fibs new) (inc sofar))))))","problem":26,"user":"4ffa2009e4b0678c553fc3b6"},{"code":"(fn fib [n]\n  (\n    (fn fib_list [terms, final_count, a, b]\n      (if\n        (= final_count (count terms))\n        terms\n        (fib_list (conj terms (+ a b)), final_count, b, (+ a b))\n      )\n    )\n  [1, 1], n, 1, 1\n  )\n)","problem":26,"user":"52624348e4b03e8d9a4a707e"},{"problem":26,"code":"(fn [n]\n    (loop [prev 0\n           curr 1\n           memo []\n           i n]\n      (if (zero? i)\n        memo\n        (let [nxt (+ curr prev)]\n          (recur curr nxt (conj memo curr) (dec i) )))))","user":"53c3397be4b00fb29b221279"},{"code":"#(take % ((fn fib [a b] (cons a (lazy-seq b (fib b (+ a b))))) 1 1))","problem":26,"user":"50eafeaae4b0346a3e988cbb"},{"problem":26,"code":"(fn [n]\n  (map (fn fib-gen [x]\n    (if (or (= x 0) (= x 1))\n      x\n      (+ (fib-gen (- x 1)) (fib-gen (- x 2)))\n      )\n    ) (rest (range (inc n)))\n  )\n  )","user":"53d2afede4b00fb29b221321"},{"problem":26,"code":"(fn [n]                                                                              \n  (loop [acc []                                                                              \n         rem (dec n)]                                                                        \n    (cond                                                                                    \n      (empty? acc) (recur [1 1] (dec rem))                                                   \n      (zero? rem) acc                                                                        \n      :else (recur (conj acc (reduce + (take-last 2 acc))) (dec rem)))))","user":"5e3d183fe4b01d43a70e8e11"},{"problem":26,"code":"(fn [n]\n  (loop [fibList [1]\n         index 2\n         f-2 0\n         f-1 1\n         target n] \n    (if (>= index target)\n      (conj fibList (+ f-1 f-2))\n      (recur (conj fibList (+ f-1 f-2)) (inc index) f-1 (+ f-1 f-2) target)\n      )\n    )\n  )","user":"57974504e4b039eba2ecb0f5"},{"code":"(fn [x]\n   (letfn [(fibs [] (lazy-cat '(1 1)\n                \t\t      (map + (fibs) (rest (fibs)))))]\n     (take x (fibs))))","problem":26,"user":"4f0b3c88535d0136e6c22301"},{"code":"(fn my-fibonacci [n]\n\t(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n\t(take n (fib 1 1))))","problem":26,"user":"52e657e4e4b09f7907dd1472"},{"problem":26,"code":"#(reverse (reduce (fn [a _] (cons (+ (first a) (second a)) a)) '(1 1) (range (- %1 2))))","user":"543cd93ce4b032a45b869342"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    true (let [prev (fib (dec n))]\n           (conj prev (+ (get prev (- n 2)) (get prev (- n 3)))))))","user":"58a0fc33e4b02bd94d917ea3"},{"code":"(fn [x]\n  (take x\n    (map\n      first\n      (iterate \n        (fn internalfib [[a b]]\n          [b (+ b a)])\n        [1 1]))))","problem":26,"user":"51d49b75e4b013d740b70de6"},{"code":"(\n  fn [n]\n  ( reverse(\n    (fn [a b s]\n    (\n      if (= n (count s)) s (\n        recur b (+ a b) (conj s a)\n      )\n    )\n  )\n  1 1 '()))\n)","problem":26,"user":"538de1ede4b0b51d73faae77"},{"problem":26,"code":"(fn myFib [i]\n  (reverse ((fn fib [i]\n\t  (if (< i 3)\n    \t'(1 1)\n\t    (let [prev (fib (dec i))\n    \t      operands (take 2 prev)\n    \t      newVal (apply + operands)]\n\t      \t(conj prev newVal)))) i)))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":26,"code":"(fn fibs [n]\n  (letfn [(lazy-fib [a b]\n            (cons a\n                  (lazy-seq (lazy-fib b (+ a b)))))]\n    (take n (lazy-fib 1 1))))","user":"60704214e4b069485764de24"},{"problem":26,"code":"(fn [n] \n  (loop [i 0, res []]\n    (if (= i n)\n      res\n      (if (< i 2)\n        (recur (inc i) (conj res 1))\n        (recur (inc i) (conj res (+ (last res) (get res (dec (dec (count res)))))))))))","user":"5a7ae674e4b03baeef9276d5"},{"code":"(fn fib [n] (if (= n 2) '(1 1) (let [L (fib (dec n))] (concat L (list (+ (last (drop-last L)) (last L)))))))","problem":26,"user":"53811c2de4b06839e8705ec8"},{"problem":26,"code":"(fn fibSeq [x]\n  (loop [fib []\n         cnt 0]\n    (if (= cnt x)\n      fib\n      (recur (if (or (= cnt 1) (= cnt 0))\n               (conj fib 1)\n               (conj fib (reduce + (take-last 2 fib))))\n        (inc cnt)))))","user":"60beb061e4b0e0fa5f1b428d"},{"problem":26,"code":"(fn [f]\n(cond \n    (= f 1) '(1)\n    (= f 2) '(1 1)\n    :else\n      (apply list (loop [n-2 1\n             n-1 1\n             fib '[1 1]\n             k f] \n        (let [n (+ n-2 n-1)]\n          (if (= k 2) \n            fib \n            (recur n-1 n (conj fib n) (dec k))))))))","user":"561047eae4b05f002753df6d"},{"problem":26,"code":"(fn [n]\n  (flatten (conj [1] \n  (loop [iter 2\n         prior 1\n         lst [1]]\n    (if (>= iter n)\n      lst\n      (recur (+ iter 1)\n             (last lst)\n             (conj lst (+ (last lst) prior))))))))","user":"5642b939e4b08d4f616f5f1b"},{"problem":26,"code":"(fn [n]\n  (if (= n 1) '(1)\n  (loop [i 2 l '(1 1)]\n    (if (= i n)\n        (reverse l)\n        (recur (inc i) (cons (+ (first l) (second l)) l))))))","user":"55dfacb7e4b050e68259b3fc"},{"code":"(fn [n]\n  (take n ((fn fib [a b]\n    (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","problem":26,"user":"5027f37be4b01614d1633ff1"},{"problem":26,"code":"(fn [f] (take f (map first (iterate #(-> [(%1 1) (+ (%1 1) (%1 0))]) [1 1]))))","user":"4f188db6535d64f60314645c"},{"problem":26,"code":"(fn fibonacci [n]\n  (let [lazy-fib\n        (fn lazy-fib [a b] (lazy-seq (cons a (lazy-fib b (+' a b)))))]\n    (take n (lazy-fib 1 1))))","user":"56d2a103e4b0ea9b8538f7a3"},{"problem":26,"code":"(fn [n] (reverse ((fn fib [num]\n                     (if (= num 1)\n                       '(1)\n                       (if (= num 2)\n                         '(1 1)\n                         (let [fib-result (fib (dec num))]\n                           (conj fib-result (+ (first fib-result) (second fib-result))))))) n)))","user":"5dc9c4f2e4b02f9375f4e1f0"},{"problem":26,"code":"#(loop [n %\n        l '(1)\n        fn-1 1\n        fn-2 0]\n   (let [it (+ fn-1 fn-2)\n         l (concat l (list it))]\n         (cond\n          (= n 2) l\n          :else (recur (- n 1)\n                       l\n                       it\n                       fn-1))))","user":"550f2333e4b06e50f9beb173"},{"problem":26,"code":"(fn [n]\n  (map #(first %) (take n (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"562268dce4b03f08ee9a9224"},{"problem":26,"code":"#( rest (map (fn fi [y]\n                       (cond\n                         (= y 0) 0\n                         (= y 1) 1\n                         :else\n                         (+ (fi (- y 1)) (fi (- y 2))))\n                       ) (range (+ % 1)))\n          )","user":"56684356e4b04acd4f672de4"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","user":"57617c20e4b0994c1922fb8c"},{"code":"(fn fib [x] (cond \r\n               (= x 2) '(1 1)\r\n            :else   (reverse (conj (reverse (fib (dec x))) (+ (last (fib (dec x))) (-> (fib (dec x)) reverse rest first))))\r\n          ))","problem":26,"user":"4f0369a2535dcb61093f6ab0"},{"problem":26,"code":"#(letfn [(ifib [n1]\n            (if (or (= n1 1) (= n1 2))\n              1\n              (+ (ifib (- n1 1)) (ifib (- n1 2)))))]\n        (loop [col [] cn 1]\n          (if (> cn %1)\n            col\n            (recur (conj col (ifib cn)) (inc cn)))))","user":"5b11449ce4b0cc2b61a3be2d"},{"problem":26,"code":"#(reduce (fn [acc x] (reverse (conj (reverse acc) (+ (last acc) (second (reverse acc)))))) '(1 1) (range 1 (- % 1)))","user":"51bd78c3e4b0ff155d51d2b0"},{"code":"#(loop [i %1, fib-1 0, fib 1 rs  '()]\n    (if (zero? i) rs\n\t\t(recur (dec i) fib (+ fib-1 fib) (concat rs (list fib)))))","problem":26,"user":"53300924e4b019098a6f8b55"},{"code":"(fn fib [n]\n  (reverse\n   ((fn fibb [nn]\n      (cond\n       (zero? n) nil\n       (= nn 1) '(1)\n       (= nn 2) '(1 1)\n       :else   (let [s (fibb (dec nn))]\n                 (conj s (apply + (take 2 s)))))) n)))","problem":26,"user":"5012da69e4b0c8732600222d"},{"code":"(fn [n]\n  (loop [a 1 b 1 acc []]\n    (if (>= (count acc) n)\n      acc\n      (recur b (+ a b) (conj acc a)))))","problem":26,"user":"4fc7ddffe4b0ee37620e182b"},{"code":"(fn [anz]\n  (map first \n    (take anz\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fc93728e4b0ee37620e1844"},{"problem":26,"code":"(fn [qty] (loop [i 2 fibo [1 1]]\n    (cond\n     (= qty 1) [1]\n     (>= i qty) fibo\n     :else (recur\n        (inc i)\n        (conj fibo (+ (last fibo) (last (pop fibo)))) \n      )\n    )     \n  )\n)","user":"5a285a38e4b07f18be40aa67"},{"code":"(fn fibb\n  ([x]\n   (let [start '(1 1)]\n   (if (= (count start) x)\n     start\n     (fibb x (concat start [2])))))\n  ([x y]\n   (if (= (count y) x)\n     y\n     (recur x (concat y [(+ (last y) (last (butlast y)))])))))","problem":26,"user":"52e6975de4b09f7907dd147a"},{"code":"(fn [n] (take n (conj (map peek (iterate (fn [[a b]] [b (+ a b)]) [1 1])) 1)))","problem":26,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":26,"code":"(fn [x]\n  (loop [arr [1] prev 1 nextt 1 y (dec x)]\n    (if (= y 0)\n      arr\n      (recur (conj arr nextt) nextt (+ prev nextt) (dec y)))))","user":"568c2d96e4b0dcc4269f40af"},{"problem":26,"code":"#(take %\n        (map first\n             (iterate\n              (fn [[x y]] [(+' x y), x])\n              [1 0])))","user":"5aeca4c9e4b0cc2b61a3bc0a"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","user":"52c5d094e4b0c2d177d620ff"},{"problem":26,"code":"(fn [x]\n  (loop [i 0 c 0 nextfib 1 fibseq '()]\n    (if (= i x)\n      (reverse fibseq)\n      (recur (inc i) nextfib (+ c nextfib) (into fibseq (list nextfib))))\n      )\n  )","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn fib [n]\n  (if (= n 2) \n    '(1 1)\n    (let [arr (fib (dec n))\n          len (dec (count arr))]\n      (concat arr [(+ (nth arr len) (nth arr (dec len)))]))))","problem":26,"user":"52c8a8b9e4b0c2d177d62139"},{"problem":26,"code":"#(take  % ((fn fib \n         ([]\n           (fib 1 1))\n         ([a b]\n           (lazy-seq (cons a (fib b (+ a b))))))))","user":"5e7a5d56e4b085ba37836e0a"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n\n         fibs '(1)]\n    (if (= cnt 1)\n      (reverse fibs)\n      (recur (dec cnt)\n             (conj fibs (apply + (take 2 fibs)))))))","user":"54246fcce4b01498b1a71aed"},{"code":"#(take %1\n      (map first (iterate (fn [[x y]] [y (+ x y)])[1 1])))","problem":26,"user":"52bda384e4b07a9af5792305"},{"problem":26,"code":"(fn [n]\n          (loop [result []\n                 n n]\n            (if (zero? n)\n              result\n              (cond\n                (empty? result) (recur [1] (dec n))\n                (== (count result) 1) (recur [1 1] (dec n))\n                :else (let [n1 (last (butlast result))\n                            n2 (last result)]\n                        (recur (conj result (+ n1 n2)) (dec n)))))))","user":"5c995fa4e4b048ec896c5a96"},{"code":"#(map (fn fib [n]\n         (if (or (= n 1)\n                 (= n 2))\n           1\n           (+ (fib (- n 1)) (fib (- n 2)))))\n       (range 1 (inc %)))","problem":26,"user":"4f2e2ad8e4b0d6649770a066"},{"code":"(fn [x] (loop [a 1 b 1 acc '() i 0]\n\t\t    (if (= i x)\n\t\t\t(reverse acc)\n\t\t      (recur b (+ a b) (cons a acc) (inc i)))))","problem":26,"user":"4eeccfc0535d93acb0a668b5"},{"code":"(fn fib [n]\n        (if (= n 2) [1 1]\n          (let [f- (fib (- n 1))\n                fl (reverse f-)\n                ft (+ (first fl) (second fl))]\n            (conj f- ft))))","problem":26,"user":"4eb9c82d535dfed6da9c6d5c"},{"code":"(fn [a] (take a \n  ((fn rfib [a b]\n     (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4f54ecf1e4b0a7574ea717f0"},{"problem":26,"code":"(fn fib-seq [n]\n  (let [fib (fn f [x] (if (or (= 1 x) (= x 2)) 1\n                          (+ (f (dec x)) (f (- x 2)))))]\n    (let [fib-seq-helper (fn f [acc n] (if (zero? n) acc\n                                           (f (cons (fib n) acc) (dec n))))]\n      (fib-seq-helper [] n))))","user":"5897dda4e4b00487982d52c8"},{"code":"(fn [n]\n  (loop [m n acc '(1 1)]\n    (if (< m 3)\n      (reverse acc)\n      (recur (dec m) \n             (conj acc (+ (first acc) (first (rest acc)))))\n)))","problem":26,"user":"4f8ac2bde4b02e764a0a5172"},{"problem":26,"code":"(fn [x] \n  \t(loop [n 1\n           a 0\n           b 1\n           coll [1]]\n      (if (= x n)\n        (seq coll)\n        (let [na b\n              nb (+ a b)]\n        \t(recur (inc n) na nb (conj coll nb)))\n        )))","user":"5b59c513e4b02d533a91bd81"},{"code":"(fn fib [n]\n  (letfn [(fib* [x y z] \n            (if (= n (count z))\n               z\n               (fib* y (+ x y) (conj z (+ x y)))))]\n    (fib* 1 1 [1 1])))","problem":26,"user":"4eb298c1535d7eef3080734b"},{"code":"#(loop [a 1 b 0 count (- % 1) li [1]]\n  (if (zero? count)\n    (seq li)\n  (recur (+ a b) a (dec count) (conj li (+ a b)))))","problem":26,"user":"4ef43233535dced4c769f233"},{"code":"(fn [x] (reverse\n  (nth\n    (iterate #(cons (+ (first %) (second %)) %) '(1 1))\n    (- x 2))))","problem":26,"user":"4ff07229e4b0678c553fc323"},{"code":"#(map\n  (fn ! [x] (cond (> 2 x) 1 :else (+ (! (- x 1)) (! (- x 2)))))\n  (range %1))","problem":26,"user":"4ebede00535dfed6da9c6d9a"},{"problem":26,"code":"(fn [x] (nth (iterate (fn [y] (conj y (reduce + (take-last 2 y)))) [1 1] ) (- x 2) ))","user":"5bc2df19e4b07a9b28b10038"},{"problem":26,"code":"#(loop [iter 1\n         collect [1]]\n    (if (< iter %)\n      (recur\n       (inc iter)\n       (if (= iter 1)\n         (conj collect 1)\n         (conj collect (+ (second(reverse collect)) (last collect)))))\n      collect\n      ))","user":"5fa56352e4b0fa27300f3dc2"},{"code":"(fn fib\n  ([n]\n     (fib [1 1] n))\n  ([x, n]\n     (if (< (count x) n) \n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       x)))","problem":26,"user":"50b64b55e4b0a86f8358ca6b"},{"problem":26,"code":"(fn [n]\n  (rest\n    (take (+ n 1)\n          (map first (iterate\n                       (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"5ad76df9e4b0ea6055cfac18"},{"code":"(fn [x] (take x ((fn fib [s l] (cons s (lazy-seq (fib l (+ s l)))))  1 1)))\n\n\n\n;; (#(+ (first (reverse %)) (second (reverse %))) '(1 1)) ;;computes values\n\n;; lazy evaluation, can compute infite list and sublist it.\n\n;; recursively pass list to the value compute fuction","problem":26,"user":"536a52f1e4b0243289761eac"},{"code":"(fn fibonacci [x] (take x ((fn fib-rec [a b] (cons a(lazy-seq(fib-rec b (+ a b)))))1 1)))","problem":26,"user":"4ff92cd2e4b0678c553fc3a5"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b)))))\n        1 1))","user":"5c967845e4b048ec896c5a60"},{"problem":26,"code":"(defn :fib [it]\n  (conj\n   (if (= it 1)\n     '(1 1)\n     (fib (- it 1))\n   )\n  )\n)","user":"53a68c5ae4b0ef122a8689c8"},{"code":"(fn [n]\n  (reverse \n    (loop [i 0, a 1, b 1, s '()]\n      (if (= i n) s\n        (recur\n          (inc i) b (+ a b) (cons a s))))))","problem":26,"user":"4ed152d5535d44c135fd68cc"},{"problem":26,"code":"(fn [n]\n    (->> (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n         (map second)\n         (take n)))","user":"5bab5440e4b0a20761a23475"},{"problem":26,"code":"(fn fibonacci-sequence\n  [n] \n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (seq (conj (vec (fibonacci-sequence (- n 1)))\n            (+ (last (fibonacci-sequence (- n 1))) (last (fibonacci-sequence (- n 2)))))))))","user":"55dfac5fe4b050e68259b3f9"},{"problem":26,"code":"#(take %\n     (map first\n          (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5cbe5fdfe4b0ccb061962750"},{"code":"(fn fib [n]\n  (if (<= n 2) [1 1]\n    (let [before (fib (dec n))]\n      (conj before (+ (last before) (last (butlast before)))))))","problem":26,"user":"5119f3d5e4b06c8af0111818"},{"problem":26,"code":"(fn [n & fib]\n  (if (nil? fib)\n    (if (= n 1)\n      (recur 0 [1])\n      (recur (- n 2) [1 1])\n    )\n  \t(if (= n 0)\n\t  fib\n      (recur (- n 1) \n        (conj fib \n          (+ (last fib) (second (reverse fib)))\n        )\n      )\n    )\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"(fn [n]\n(map\n(fn fib [x]\n  (if (<= x 2)\n    1\n    (+ (fib (- x 1)) (fib (- x 2)))\n    )\n  )\n  (range 1 (+ 1 n))\n  )\n  )","problem":26,"user":"4f2004a1535d64f6031464a7"},{"problem":26,"code":"(fn [x]\n  (loop [a 0 b 1 acc [] n 0]\n    (let [c (+ a b)]\n      (if (= n x) acc\n        (recur b c (conj acc b) (inc n))))))","user":"5a03652ae4b01bb0ae8afd83"},{"problem":26,"code":"(fn [num] (loop [coll '(1 1) counter 2] \n            (if (= num counter)\n              (reverse coll)\n              (let [recur-coll (conj coll (+ (first coll) (second coll))) recur-num (inc counter)] \n                (recur recur-coll recur-num)))))","user":"593db05ae4b069cdc2982bab"},{"problem":26,"code":"#(take % (map second (iterate (juxt second (partial apply +)) [0 1])))","user":"573d58c8e4b05c31a32c0811"},{"code":"#(take % ((fn fibo \n([] (concat [1 1] (fibo 1N 1N)))\n([a b] \n  (let [n (+ a b)]\n    (lazy-seq \n      (cons n (fibo b n))))\n  )\n)))","problem":26,"user":"52a7634ae4b0c58976d9ac16"},{"code":"(fn fibo [n]\n  (case n\n    1 '(1)\n    2 '(1 1)\n    (reverse\n      (cons (+ (last (fibo (- n 1)))\n               (last (fibo (- n 2))))\n            (reverse (fibo (- n 1)))))))","problem":26,"user":"5097cd83e4b00ad8bab4e974"},{"problem":26,"code":"(fn [mx]\n  (loop [n 2 res [1 1]]\n    (if (= n mx)\n      res\n      (recur (inc n) (conj res (+ (nth res (- n 2)) (nth res (- n 1))))))))","user":"57c176abe4b05aa3c4741ca2"},{"code":"#(loop [f1 1 f2 1 n % result [1]]\n  (if (> n 1)\n    (recur f2 (+ f1 f2) (dec n) (conj result f2))\n    result))","problem":26,"user":"5036eba7e4b0af0658af77a5"},{"problem":26,"code":"(fn take-fibonacci\n  ([n]\n   (take n (take-fibonacci 1 1))\n    )\n  ([a b]\n   (lazy-seq (cons a (take-fibonacci b (+ a b))))\n    )\n  )","user":"5b92f178e4b0c0b3ffbd4a41"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)])[1 1])))","problem":26,"user":"5148bcbee4b05514c84b7cc6"},{"problem":26,"code":"(fn [x]\n    (loop [fib [1 1], x x]\n          (if (= x 2)\n            (reverse fib)\n            (recur (cons (reduce + (take 2 fib)) fib) (dec x)))))","user":"56cc34aee4b0ea9b8538f73c"},{"problem":26,"code":"(fn [n]\n    (take n\n          ((fn fib-seq\n             ([] (lazy-seq (cons 1 (fib-seq 0 1))))\n             ([a] (lazy-seq (fib-seq 1 1)))\n             ([a b]\n              (lazy-seq\n               (let [n (+ a b)] (cons n (fib-seq b n)))))))))","user":"5bb25684e4b0a20761a2350d"},{"problem":26,"code":"(fn [n]                                                                                                   \n(map (fn fib                                                                                               \n [n]                                                                                                   \n  (if (or (= n 1) (= n 2))                                                                              \n    1                                                                                                   \n  (+ (fib (- n 1)) (fib (- n 2)))))     (range 1 (+ n 1))))","user":"5b59b89be4b02d533a91bd7d"},{"code":"(fn fibor [m]\n    (map (fn fibo [n] \n\t\t   (if (or (= n 1)\n\t\t\t   (= n 2))\n\t\t       1\n\t\t       (+ (fibo (dec n)) (fibo (dec (dec n))))))\n\t       (range 1 (inc m))))","problem":26,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"(fn [n] (take n \n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51416934e4b03d51af0d04f0"},{"code":"(fn fibi [x](reverse ( \n  (fn fib [x](\n      if (= 1 x) \n         '(1)\n         (if (= 2 x)\n             '(1 1)\n             (conj \n                 (fib (- x 1)) \n                 (+ (first (fib (- x 1))) (second (fib (- x 1))))\n             )\n        )\n  )) x)\n))","problem":26,"user":"4fcf5292e4b03432b189f40e"},{"problem":26,"code":"(fn [num]\n  (let\n    [ sumAtIndex (fn [seq i] (+ (seq i) (seq (inc i))))\n      fibHelper (fn [fibs i] (conj fibs (sumAtIndex fibs i)))\n    ]\n  \t(reduce fibHelper [1 1] (range (- num 2)))))","user":"5d123457e4b02c15ef021996"},{"problem":26,"code":"#( take %\n    (map first \n         (iterate \n            (fn [[a b]] [b (+ a b)])\n             [ 1 1]\n          )\n         )\n   )","user":"53d5d43ce4b0e771c302544d"},{"problem":26,"code":"(fn fib\n  ([n] (fib 0 1 '() n))\n  ([a b xs n] (if (= 0 n)\n                (reverse xs)\n                (fib b (+ a b) (conj xs b) (dec n)))))","user":"53f74528e4b0de5c4184855c"},{"problem":26,"code":"(fn fibonacci [n]\n  (take n\n    ((fn fib [nxt nnxt]\n      (cons nxt (lazy-seq (fib nnxt (+ nxt nnxt)))))\n        1 1)))","user":"5454bd9be4b0e397800069db"},{"code":"(fn [n]\n  (loop [a 1, b 1, n n, lst [1 1]]\n    (if (<= n 2)\n      lst\n      (let [b' (+ a b)]\n        (recur b b' (dec n) (conj lst b'))))))","problem":26,"user":"53070615e4b02e821686979e"},{"problem":26,"code":"(fn [n]\n  (let [base [1]\n        acc-fib\n        (fn [n prev1 prev2 pos ls]\n          (if (> pos n)\n            ls\n            (let [nx (+ prev1 prev2)]\n              (recur n\n                     nx\n                     prev1\n                     (inc pos)\n                     (conj ls nx)))))]\n    (if (= n 1)\n      base\n      (acc-fib n 1 0 2 base))))","user":"59750a68e4b01722bebd4cba"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n x 1 y 0 l []]\n     (if (zero? cnt)\n       l\n       (recur (dec cnt) y (+ x y) (conj l (+ x y))))))","user":"53da1e2ce4b0e771c3025487"},{"code":"(fn f2 [n]\n  (map first (take n (iterate #(vec [(last %) (+ (last %) (first %))]) [1 1])))\n  )","problem":26,"user":"51750fc5e4b07031762f2ee6"},{"code":"(fn [n]\n  (loop [n n, a 1, b 1, r '()]\n    (if (= n 0)\n      (reverse r)\n      (recur (dec n) b (+ a b) (conj r a)))))","problem":26,"user":"4f856adfe4b033992c121c44"},{"code":"(fn [x]\n  (map\n    (fn fib [i]\n      (if (= i 0) 0\n        (if (= i 1) 1\n          (+ (fib (- i 1)) (fib (- i 2))))))\n  (range 1 (+ x 1))))","problem":26,"user":"4f49202ce4b0d56e7bb92be6"},{"code":"#((fn fib [x y n]\n    (if (> n 0)\n      (conj (fib y (+ x y) (dec n)) x)\n      (list x y))) 1 1 (- %1 2))","problem":26,"user":"5125834ae4b05d10e3e395fa"},{"problem":26,"code":"(fn fib\n  ([n] (fib (- n 2) [1 1]))\n  ([n result] (if (= n 0) result (fib (- n 1) (conj result (reduce + (take-last 2 result))\n                                                    )))))","user":"5dfb538ee4b0a607a9a45cda"},{"problem":26,"code":"; make sure 0 as input still exits\n\n(fn [x] (loop [fa 0 fb 1 l 1 r [1]] (if (<= x l) r (recur fb (+ fa fb) (inc l) (conj r (+ fa fb))))))","user":"557cf48be4b05c286339e0ca"},{"problem":26,"code":"(fn [cnt]\n  (loop [cnt-left cnt values [1 1]]\n    (if (= (- cnt-left 2) 0)\n      values\n      (recur (- cnt-left 1)\n             (conj values\n                   (+ (last values)\n                      (last (drop-last values))))))))","user":"5911aa1de4b0163c97b36ed8"},{"problem":26,"code":"(fn fib \n   ([n] (fib n (vec '(1 1))))\n   ([n s]\n    (let [c (count s)]\n    (if (>= c n)\n      (take n s)\n      (fib n\n           (conj s (+ (nth s (- c 2)) (nth s (- c 1)))))))))","user":"545e9cf1e4b01be26fd7467f"},{"code":"(fn [n]\n  (cons 1\n  (take (- n 1) ((fn fibo [a1 a2] (lazy-seq (cons (+ a1 a2) (fibo a2 (+ a1 a2))))) 0 1))))","problem":26,"user":"51227e00e4b068a9582e656c"},{"code":"(fn [f]\n  ((fn [l c p n]\n    (if (= f c)\n      l\n      (recur (conj l n) (inc c) n (+ p n)))) [] 0 0 1))","problem":26,"user":"511f1434e4b0cf8688794046"},{"code":"(fn [x]\n  (loop [a 0 b 1 nums ()]\n    (if (= x (count nums))\n      (reverse nums)\n      (recur b (+ a b) (cons b nums)))))","problem":26,"user":"4f604bdee4b0defedf855fa7"},{"code":"(fn fib [x]\n  (cond (= x 1) '(1)\n        (= x 2) '(1 1)\n   :else\n   (loop [y 3 prev 1 prev2 1 stored '(1 1)]\n(if (= x y)\n(reverse (cons (+ prev prev2) stored))\n(recur (inc y) (+ prev prev2) prev (cons (+ prev prev2) stored))))))","problem":26,"user":"504f5804e4b0a02f9cffde72"},{"code":"#(reverse \n  ((fn fibo [k, s]\n    \"return fibonacci sequence up to k\"\n    (if (= k 0)\n      s\n      (fibo (- k 1) \n        (if (< (count s) 2) \n          (conj s 1)\n          (conj s (+ (first s) (second s)))))))\n% '()))","problem":26,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":26,"code":";#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))\n#(map first \n      (take % \n            (iterate (fn [[a b]] [b (+ a b)])\n                     [1 1])))","user":"5547793be4b0a04f7929954c"},{"problem":26,"code":"(fn fib [x]\n  (loop [i 0 a 0 b 1 result []]\n    (if (>= i x)\n      result\n      (recur (inc i) b (+ a b) (conj result b)))))","user":"5b067ae1e4b0cc2b61a3bd97"},{"problem":26,"code":"(fn fib [n]\n  {:pre [pos? n]}\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"57474aa4e4b009280f9f2b71"},{"problem":26,"code":"(fn [c] (take c (map first (iterate #(let [a (second %) b (apply + %)] (list a b)) '(1 1)))))","user":"54864662e4b0e286459a11b8"},{"code":"(fn f[n] (cond \n(= n 1) [1] \n(= n 2) [1 1] \n:else (conj  (f (- n 1))       (+ (last (f (- n 1))) (last (f (- n 2))))     )))","problem":26,"user":"52e73b36e4b09f7907dd1483"},{"code":"#(take % ((fn fib [p u] \n            (cons p (lazy-seq (fib u (+ p u))))) \n          1 1))","problem":26,"user":"51dc1190e4b09c47a74ce106"},{"problem":26,"code":"(fn [n] (take n (map first (iterate #(let [[x y] %] [y (+ x y)]) [1 1]))))","user":"565a280be4b068f2fe63dbf7"},{"problem":26,"code":"#(map (fn fib-iter [n] (case n 0 1 1 1 (+ (fib-iter (- n 1)) (fib-iter (- n 2))))) (range 0 %))","user":"559057c4e4b027778923766e"},{"code":"(fn fib [n] (loop [fib [1], count 2, fibn 0, fibn1 1]\n  (if (< n count)\n    fib\n    (recur (conj fib (+ fibn fibn1))(inc count)(+ 0 fibn1)(+ fibn fibn1)))\n))","problem":26,"user":"5089860de4b037578f03c8b5"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b]\n        (cons b (lazy-seq (fib b (+ a b)))))\n      0 1)))","problem":26,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn fibseq\n\t\t\t([count FNminus1 FNminus2]\n\t\t\t\t(if (= count 0)\n\t\t\t\t\t'()\n\t\t\t\t\t(conj (fibseq (- count 1) (+ FNminus1 FNminus2) FNminus1) (+ FNminus1 FNminus2))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t([count]\n\t\t\t\t(if (= count 0)\n\t\t\t\t\t[]\n\t\t\t\t\t(if (= count 1)\n\t\t\t\t\t\t'(1)\n\t\t\t\t\t\t(if (= count 2)\n\t\t\t\t\t\t\t'(1 1)\n\t\t\t\t\t\t\t(concat '(1 1) (fibseq (- count 2) 1 1))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)","problem":26,"user":"5048bcf8e4b06e644c63f1ae"},{"code":"(fn fibn \n  ([n] (fibn n 1 1 []))\n  ([n a b l] \n     (if (= 0 n) l\n         (fibn (dec n) b (+ a b) (conj l a)))))","problem":26,"user":"510dc185e4b078ea71921146"},{"problem":26,"code":"(fn fib [n] \n  (loop [l [], last 1, sec-last 0, c 1] \n  (if (= n c) \n    (conj (apply list l) 1) \n    (recur (conj l (+ last sec-last)) (+ last sec-last) last (inc c)))))","user":"5e4fae60e4b027a2e10ac0b9"},{"code":"(fn [num]\n  (loop [seq [1 1]]\n    (if (>= (count seq) num)\n      seq\n      (recur (conj seq (apply + (take-last 2 seq)))))))","problem":26,"user":"4faafccde4b081705acca209"},{"problem":26,"code":"#(map first (\n          take %1\n       (iterate (fn [[a b]]\n                  [b (+ a b)])\n                [1 1])))","user":"59e8a952e4b0249b72820733"},{"code":"; LOL\n#(take % '(1 1 2 3 5 8 13 21))","problem":26,"user":"52fa8f71e4b047fd55836ffb"},{"problem":26,"code":"#(loop [ind (- % 2) fib '(1 1)]\n   (if (= 0 ind)\n     (reverse fib)\n     (recur (dec ind) (conj fib (+ (first fib) (first (rest fib))))) ))","user":"5688d6a8e4b0dcc4269f4071"},{"problem":26,"code":"(fn [x]\n  (loop [n (- x 2)\n         nums '(1 1)]\n    (if (zero? n)\n      (reverse nums)\n      (recur (dec n) (conj nums (+ (first nums) (second nums)))))))","user":"56082adae4b046a4fc0ac008"},{"problem":26,"code":"#(reverse (nth (iterate (fn [[a b :as f]] (conj f (+ a b))) '(1 1)) (- % 2)))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn fib [lim]\n    (loop [curlast 1 cursecondtolast 0 acc '()]\n          (if (= lim (count acc))\n                  (reverse acc)\n                  (recur (+ curlast cursecondtolast)\n                                      curlast\n                                      (conj acc curlast)))))","problem":26,"user":"4ee95013535d93acb0a6688d"},{"problem":26,"code":"(fn fib\n  ([n]\n     (fib [1 1] n))\n  ([x, n]\n     (if (< (count x) n) \n       (recur (conj x (apply + (take-last 2 x))) n)\n       x)))","user":"542c1f73e4b0dad94371f29d"},{"problem":26,"code":"#(loop [n %\n        lst (list 1 1)]\n   (if (= 2 n)\n     (reverse lst)\n     (recur (dec n) (cons (+ (second lst)(first lst)) lst))))","user":"5f77d470e4b02876ed9fd0be"},{"problem":26,"code":"(fn [x] \n  (if (<= x 2)\n    (if (= x 2) '(1 1) (if (= x 1) '(1) '()))\n    (loop [n (dec (dec x)) sofar '(1 1)]\n    (if (<= n 0) \n      sofar\n        (recur (dec n) (into (list (reduce + (take-last 2 sofar))) \n           (reverse sofar)))))))","user":"58ed8f4ce4b056aecfd47d86"},{"code":"#(take %\n  (map first\n    (iterate\n      (fn [v] (let [[a b] v] [b (+ a b)]))\n      [1 1])))","problem":26,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn [n]\n(letfn [(fib\n  ([] (concat [1] (fib 0 1)))\n  ([a b] (cons (+ a b) (lazy-seq (fib b (+ a b))))))]\n  (take n (fib))\n  ))","problem":26,"user":"50b29029e4b03ea880433563"},{"problem":26,"code":"(fn fib\n  [n]\n  (nth\n    (iterate\n      (fn fibiterate\n        [coll]\n        (let [[n1 n2] (take-last 2 coll)]\n          (conj coll (+ n1 n2))))\n      [1 1])\n    (- n 2)))","user":"56edf2dde4b04a395b9a044b"},{"problem":26,"code":"(fn fib [n]\n  (loop [s [1 1] l 1 n n]\n   (if (= n (inc l))\n     s\n     (recur (conj s (reduce + (take-last 2 s))) (inc l) n))))","user":"5b774e66e4b047b03b2036ec"},{"code":"(fn useFib [x] ( take x ( (fn fib [a b] ( lazy-seq ( cons a ( fib b (+ a b))))) 1 1)))","problem":26,"user":"5020d2aee4b0cb6ebc0a42fb"},{"problem":26,"code":"(fn [i]\n  \n  (take i (map first (iterate (fn [[ a b ]] [b (+ a b)]) [ 1 1 ])))\n  \n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":26,"code":"(fn [amount]\n  (if (< amount 1) \n    nil\n    (if (= amount 1)\n      (list 1)\n      (loop [am amount\n             retList (list 1 1)]\n        (let [[first second] retList]\n          (if (= am 2)\n            (reverse retList)\n            (recur (- am 1) (cons (+ first second) retList))\n            ))))))","user":"58a216e8e4b02bd94d917ed1"},{"code":"(fn f [x]\n  (if (<= x 1) [1]\n    (if (= x 2) [1 1]\n      (let [prev (f (- x 1))\n            k (- (count prev) 1)]\n       (conj prev (+ (nth prev k) (nth prev (- k 1))))\n      )\n    )\n  )\n)","problem":26,"user":"50aa777fe4b056ee01935866"},{"problem":26,"code":"#(take % (map second (iterate (fn[[x y]] [y (+ x y)]) [0 1] ) ) )","user":"600201bce4b074f607df662b"},{"code":"(fn [n]\n  (cond\n    (<= n 0) () \n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    true (loop [i 2 a '(1 1)]\n               (if (= i n)\n                   (reverse a)\n                   (recur (inc i) (cons (+ (first a) (second a)) a))))))","problem":26,"user":"4f03d0fe535dcb61093f6b6d"},{"problem":26,"code":"(fn [n]\n  (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take n)))","user":"5cb41c40e4b026601754b911"},{"problem":26,"code":"#(loop [n % a 1 b 1 r '()] (if (= n 0) (reverse r) (recur (dec n) b (+ a b) (conj r a))))","user":"54677c3de4b01be26fd746ec"},{"problem":26,"code":"#((fn [i seqfib] (if (= i 2) seqfib (recur (dec i) (conj seqfib (reduce + 0 (take-last 2 seqfib)))))) % [1 1])","user":"5a525b25e4b05d388ecb6bf8"},{"problem":26,"code":"(fn [x] (map \n         (fn fib [n]\n           (or (if (= n 0) 1)\n               (if (= n 1) 1)\n               (+ (fib (- n 2))\n                  (fib (- n 1)))))\n         (range x)))","user":"5931e498e4b072a2710fd024"},{"code":"(fn fibs [n]\n  (letfn [(fib-help [a b x]\n    (if (= 0 x) \n        '()\n        (conj (fib-help b (+ a b) (- x 1)) a)))]\n    (fib-help 1 1 n)))","problem":26,"user":"4f07ad89535dcb61093f6c2a"},{"problem":26,"code":"#(map first (take % (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]) [1 1])))","user":"53e9dce1e4b036ad0777e4bc"},{"problem":26,"code":"(fn [end]\n   (loop [x [1 1]]\n     (if (>= (count x) end)\n       (reverse (into () x))\n       (recur (#(conj % (reduce + (take-last 2 %))) x))))\n   )","user":"5ffe6082e4b074f607df6600"},{"problem":26,"code":"#(reduce (fn [result _]\n          (conj result (case (count result)\n                  0 1\n                  1 1\n                  (+ (last result) (second (reverse result)))))\n          )\n        []\n         (range %))","user":"5fae3d8ae4b08cb800c85afa"},{"code":"(fn [a] (reverse (loop [c a result '(1 1)] (if (= c 2) result (recur (dec c) (cons (+(first result)(second result))  result))))))","problem":26,"user":"510931ede4b0c71f76895663"},{"problem":26,"code":"(fn [length]\n  (loop [i 0 fibs '()]\n    (if (>= i length)\n      (reverse fibs) \n      (if (or (= 0 i) (= 1 i))\n        (recur (inc i)(conj fibs 1))\n        (recur (inc i)(conj fibs (+ (first fibs) (second fibs))))))))","user":"58c072d1e4b021aa9917eced"},{"code":"(fn [n] (nth (iterate #(conj % (+ (peek %) (peek (pop %)))) [1 1]) (- n 2)))","problem":26,"user":"4e72187b535d5021c1a8965b"},{"code":"(fn [n]\n  (loop [i 1\n         acc ()]\n    (cond\n      (> i n) (reverse acc)\n      (< i 3) (recur (+ 1 i) (conj acc 1))\n      :else (recur (+ 1 i) (conj acc (apply + (take 2 acc)))))))","problem":26,"user":"4ee63d8d535d93acb0a66859"},{"problem":26,"code":";#(take % '(1 1 2 3 5 8 13 21))\n#(take % \n       ((fn fib [] (lazy-cat [1 1] (map + (fib) (rest (fib)))))))","user":"5d2201b8e4b02ea6f0fb69ed"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n;#(take %  '(1 1 2 3 5 8 13 21))","problem":26,"user":"534ab3f5e4b084c2834f4a6e"},{"code":"(fn [n]\n  (take n (drop 1\n        ((fn fib-seq [a b]\n           (lazy-seq (cons a (fib-seq b (+ a b))))) 0 1))))","problem":26,"user":"4f68c485e4b07046d9f4ef7c"},{"code":"(fn fib\n  ([size] (fib size 1  1))\n  ([size a b] (if (zero? size) nil (cons a (fib (dec size) b (+ a b))))))","problem":26,"user":"5272669de4b03e8d9a4a742e"},{"problem":26,"code":"(fn [n]\n  (loop [idx 2\n         accum [1 1]]\n    (if (= n idx)\n      accum\n      (recur (inc idx)\n             (conj accum \n                   (+ (get accum (dec idx))\n                      (get accum (- idx 2))))))))","user":"58ef93ece4b056aecfd47dca"},{"problem":26,"code":"(fn  [x]\n  ((fn [remainingVals currentVal previousVal fibList]\n    (if (zero? remainingVals)\n      fibList\n      (recur (dec remainingVals) (+ currentVal previousVal) currentVal (conj fibList currentVal)))) x 1 0 []))","user":"59e0f839e4b08badc2a0c502"},{"problem":26,"code":"(fn [n]\n    (loop [i 0 cur 1 lst 0 acc nil]\n        (if (= n i)\n        (reverse acc)\n        (recur (inc i) (+ cur lst) cur (conj acc cur)))))","user":"5dce0151e4b0b296f82db5b5"},{"code":"(fn [n]\n  (letfn [(fib [n]\n    (if (<= n 1)\n      1 \n      (+ (fib (- n 1)) (fib (- n 2)))))]\n  (map fib (range n))))","problem":26,"user":"50369122e4b0af0658af779e"},{"problem":26,"code":"#(map (fn [x] \n        (letfn [(fib [n] \n                  (if (< n 2) \n                    1 \n                    (+ (fib (- n 1)) (fib (- n 2)))))]\n          (fib x))) (range %))","user":"513e8141e4b02b2a3d8235c1"},{"problem":26,"code":"(fn xf [n] \n (loop [index 0 fib 1 prefib 0 fibs []]\n  (if (< index n)\n   (recur (inc index) (+ fib prefib) fib (conj fibs fib))\n   (seq fibs))))","user":"579601c8e4b0e215f87e8492"},{"problem":26,"code":"(fn [size]\n  (loop [n 1 coll []]\n    (if (> n size)\n      coll\n      (recur (inc n) (conj coll (if  (<= n 2) 1 (+ (last coll) (second (reverse coll))))))\n    )\n  )\n)","user":"5e09fd26e4b099d064962f60"},{"problem":26,"code":"(fn [n]\n  (map\n    (fn fib [n]\n      (if (> n 1)\n        (+ (fib (- n 1)) (fib (- n 2)))\n        1))\n  (range n)))","user":"57d6c5cae4b0bd073c2023ce"},{"code":"(fn [n]\n  (letfn [(fib1 [[a b]] [b (+ a b)])]\n    (concat '(1) (take (dec n) (map second (iterate fib1 [1 1]))))))","problem":26,"user":"4f98ead0e4b0dcca54ed6cf8"},{"code":"(fn [n]\n   (take n\n   ((fn fib [a b]\n   (cons a (lazy-seq (fib b (+ a b)))))\n    1 1) ) \n   )","problem":26,"user":"50c5546de4b0951b67b28c18"},{"problem":26,"code":"(fn [n] (take n (reduce (fn [fib r] (conj fib (+ (last fib) (nth fib (- (count fib) 2))))) [1 1] (range n))))","user":"58bf1cf8e4b021aa9917eccf"},{"problem":26,"code":"(fn [n] (take n\n              ((fn fib [a b] \n                 (lazy-seq (cons a (fib b (+ a b)))))\n               1 1)))","user":"51647faae4b003cf19fdde3b"},{"code":"#(let [a ()]\n  (if (= %1 1)\n      '(1)\n      (loop [ret a cnt %1 las 0 cur 1]\n            (if (= 0 cnt)\n             ret\n             (recur (flatten (list ret cur)) (dec cnt) cur (+ las cur))))))","problem":26,"user":"4ffe8193e4b0678c553fc3f4"},{"code":"(fn [x] \n  (take x \n    (map first\n    (iterate \n     (fn [[a b]] [b (+ a b)]) \n     [1 1]))))","problem":26,"user":"4e74e119535d7a570dd295bc"},{"problem":26,"code":"(fn fib [n]\n  (reverse\n    (loop [a 0\n           b 1\n           c 0\n           res '()]\n      (if (<= n c)\n        res\n        (recur b (+ a b) (inc c) (cons b res))))))","user":"5455c2f3e4b080a794c2c87d"},{"problem":26,"code":"(fn \n  [size]\n  (loop [new-vector [1 1]\n         index 2]\n    (if (= size (count new-vector))\n      new-vector\n      (recur (conj new-vector (+ (nth new-vector (dec index)) (nth new-vector (- index 2)))) (inc index)))))","user":"5f9c3f63e4b0715f5002d820"},{"problem":26,"code":"#(loop [s [1 1]]\n   (if (= % (count s)) s\n     (let [f1 (-> s butlast last)\n           f2 (last s)]\n       (recur (conj s (+ f1 f2))))))","user":"552a793ee4b0ffed3738f955"},{"problem":26,"code":"(fn [n]\n  (let [f (fn [[acc n]]\n            (if (= 0 n)\n              [1 1]\n              [(+ acc n) acc]))]\n    (take n (map first (iterate f [1 0])))))","user":"54dc49d3e4b024c67c0cf780"},{"code":"(fn fib [n] (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"51af4cf6e4b0c53cf2e68a4c"},{"code":"(fn [x]   \n  (take x ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"52e4cc2ee4b09f7907dd1455"},{"code":"(fn f\n  [a b n]\n  (if (= 1 n)\n   [a]\n   (cons a\n         (f b (+ a b) (- n 1))))) 1 1","problem":26,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"#(take %\n  (loop [n (- % 2) fibs '(1 1)]\n    (if (> n 0) \n      (recur (dec n) (cons (reduce + (take 2 fibs)) fibs))\n      (reverse fibs))))","problem":26,"user":"4ecf42b4535d1f5ad70dba3c"},{"problem":26,"code":"(fn fib [x] \n  (cond \n    (= x 1) [1] \n    (= x 2) [1 1] \n    :else (let [prev (fib (dec x)) \n                sum (apply + (take 2 (reverse prev)))] \n            (conj prev sum)) \n  ))","user":"56627acde4b0e91d5f5c5648"},{"problem":26,"code":"(fn [n]\n   (loop [n (- n 2) fibs [1 1] sl 1 lt 1]\n     (if (= n 0)\n       fibs\n       (recur (dec n) (conj fibs (+ sl lt)) lt (+ sl lt)))))","user":"4f847f0ee4b033992c121c33"},{"problem":26,"code":"#(take % ((fn fib [one two] (lazy-seq (cons one (fib two (+ one two))))) 1 1))","user":"5a342188e4b0ddc586f153bd"},{"problem":26,"code":"(fn list-fib [n]\n  (let [fib\n          (fn fib [x]\n            (cond\n              (= x 0) 0\n              (= x 1) 1\n              (> x 1) (+ (fib (- x 1)) (fib (- x 2)))))]\n    (take n (map fib (iterate inc 1)))))","user":"5bc4f266e4b07a9b28b10066"},{"code":"(fn \n  [x]\n  \t(loop [s '()\n           f1 1\n           f2 0\n           n x]\n      (if (= n 0)\n      \t(reverse s)\n        (recur (cons (+ f1 f2) s)\n               f2 \n               (+ f1 f2)\n               (dec n)\n        )\n      )\n    )\n)","problem":26,"user":"52299d14e4b04c906c9c6a7e"},{"problem":26,"code":"; fib(0) is 1, right?\n(fn[n]\n  (loop [x 1 fib [1]]\n  \n     (if (< x n)\n      (recur \n       (inc x)\n       ;(conj fib (reduce + 0 (take-last 2 fib) ) )\n       (->> fib (take-last 2) (reduce + ) (conj fib) )\n      )\n     fib\n     )     \n  )\n)","user":"558ed227e4b0277789237658"},{"code":"(fn [n]\n  (rest\n    (take (+ n 1)\n      (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"5139ff96e4b067e25a345ec1"},{"problem":26,"code":"(fn [n] (reverse (loop [b 1 a 1 x n d '()] (if (zero? x) d (recur a (+ b a) (dec x) (conj d b))))))","user":"5657fc1ae4b0f9d632dd84ad"},{"problem":26,"code":"(fn [n]\n  (map first (take n (iterate (fn [[a b]]\n                                [(+ a b) a]) [1 0]))))","user":"55f8180fe4b06e875b46ceba"},{"problem":26,"code":"(fn fib [x]\n\t(if (= x 1)\n      '(1)\n      (if (= x 2)\n        '(1 1)\n        (let [ls (fib (- x 1))]\n        (concat (fib (- x 1)) \n                (list (+ (nth ls (- x 2))\n                         (nth ls (- x 3))\n                         )\n                      )\n                )\n          )\n          )\n        )\n      )","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn f [v a b c]\n  (if (= c 0) v\n    (f (conj v a) b (+ a b) (dec c))))\n[] 1 1","problem":26,"user":"4f03f42b535dcb61093f6b86"},{"code":"(fn [s]\n   ((fn i [s x v]\n        (if (= s x)\n            v\n        (if (or (empty? v) (= 1 (count v)))\n           (i s (inc x) (conj v 1))\n        (i s (inc x) (conj v (+ (get v (- x 1)) (get v (- x 2))))  ) ) )) s 0 []) )","problem":26,"user":"530c15f7e4b02e82168697d6"},{"problem":26,"code":"(fn [iterations]\n  ((fn fib [i items]\n      (if (= i 0)\n        items\n        (fib\n          (dec i)\n          (conj items (+ (last items) (second (reverse items))))\n        )\n      )\n      )\n      (- iterations 2) [1 1]\n  )\n)","user":"53ff602fe4b0de5c418485ff"},{"code":"(fn f [n] \n    (map #(if (= % 1) 1 \n          (if (= % 2) 1\n          (+ (last (f (- % 1))) (last (f (- % 2)))))) \n    (range 1 (+ n 1)))\n)","problem":26,"user":"4e39c710535deb9a81d77f45"},{"problem":26,"code":"(fn [in]\n  (loop [n in\n         out []\n         x1 1\n         x2 1]\n    (if (= n 0)\n      out\n      (recur (- n 1) (conj out x1) x2 (+ x1 x2)))))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn fib [n]\n  ((fn inner [a b n]\n    (if (= n 1)\n        (list a)\n        (conj (inner b (+ a b) (- n 1)) a)))\n  1 1 n))","problem":26,"user":"504ed58ce4b069badc5a33d2"},{"problem":26,"code":"(fn [number]\n   (loop [x 0\n          result []]\n     (if (< x number)\n       (recur\n         (inc x)\n         (conj result (if (= x 0) 1 (if (= x 1) 1 (+ (get result (- x 1)) (get result (- x 2)))))))\n       result)))","user":"5c2692d2e4b07e362c2305c2"},{"code":"(fn [x]\n   (take x\n     ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b))))) \n       1 1)))","problem":26,"user":"4f4be1cae4b03ad3f0c10c81"},{"problem":26,"code":"(fn fib \n  ([x a b] (if \n      (zero? x)\n      []\n      (concat \n        [(max 1 (+ a b))] \n        (fib (- x 1) \n             b \n             (max 1 (+ a b))\n        )\n      )\n  ))\n  ([x] (fib x 0 0))\n)","user":"589c12c2e4b00487982d5353"},{"code":"(fn [x] \n  (take x \n        ((fn fib [a b] \n          (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","problem":26,"user":"52161028e4b0bf4bffd29cb4"},{"code":"(fn [x]\n  (take x\n    ((fn rfib [a b]\n      (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1)\n  )\n)","problem":26,"user":"4f6b4237e4b07046d9f4efa9"},{"problem":26,"code":"(fn [n]\n   (if (> n 1)\n     (loop [x (- n 2)\n            v [1 1]]\n       (if (> x 0)\n         (recur (dec x) (conj v (+ (peek v) (peek (pop v)))))\n         v))\n     ))","user":"5d41de31e4b05dd059a54379"},{"problem":26,"code":"(fn fib-seq [n]\n  (take n (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5f6a266ae4b02876ed9fd042"},{"code":"(fn [n] (map first (take n (iterate #(list (second %) (apply + %)) '(1 1)))))","problem":26,"user":"53527551e4b084c2834f4af0"},{"problem":26,"code":"(fn f [x]\n  (if (= 2 x)\n    [1 1]\n    (let [y (f (dec x))]\n      (conj y (+ (last y) (last (pop y)))))))","user":"53abf519e4b047364c044456"},{"problem":26,"code":"(fn [n]\n   (cond \n     (zero? n) []\n     (= n 1) [1]\n     (= n 2) [1 1]\n     :else (loop [counter (- n 2)\n                  o [1 1]]\n             (print counter \"-\" o)\n             (if (> counter 0) \n             (recur (dec counter) (conj o (+ (last o) (last (butlast o)))))\n               o))))","user":"55f9b2b6e4b03cbcff9738c8"},{"code":"#(reduce\n  (fn[a,i] (conj a (apply + (take-last 2 a))))\n  [1 1]\n  (range(- % 2))\n)","problem":26,"user":"4ec6cd4f535d6d7199dd36d7"},{"problem":26,"code":"(fn [n]\n(take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1] ) ))\n)","user":"57513f88e4b02ea114799283"},{"problem":26,"code":"(fn fib [x]\n\t(if (= x 2)\n\t  (list 1 1)\n\t  (let [f (fib (- x 1))]\n\t\t(concat f (list (reduce + (take-last 2  f)))))))","user":"54fae43ae4b0cf870d934708"},{"problem":26,"code":"#(take % ((fn fib \n           [a b]\n           (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"54dfbacae4b024c67c0cf7b1"},{"problem":26,"code":"(fn [x] (->> '(1 1) (iterate #(conj % (+ (first %) (second %)))) \n             (take (dec x)) last reverse))","user":"53572176e4b04ce2eb3ed276"},{"problem":26,"code":"#(take % (map first (iterate (fn [x] (list (last x) (+ (last x) (first x)))) '(1 1))))","user":"5596af34e4b04c1e5c31d758"},{"problem":26,"code":"(fn [n]\n       (take n (map last (iterate (fn [[f s]] [s (+ f s)]) [0 1]))))","user":"5585f088e4b001b0851d7513"},{"code":"(fn fib [n] (if (= n 1) \n          [1] \n          (if (= n 2) \n            [1 1]\n            (concat (fib (- n 1)) \n                    [(+ (last (fib (- n 1)))\n               \t\t   (last (fib (- n 2))))]\n            ))))","problem":26,"user":"52cbe5dfe4b07d0d72b27352"},{"code":"(fn fib [n]\n  (cond \n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else   (let [f (fib (dec n))\n                      fib-1 (last f)\n                      fib-2 (nth f (- n 3))\n                      newVal (+ fib-1 fib-2)]\n                     (conj f newVal))))","problem":26,"user":"529f739fe4b04e0c58e87bad"},{"problem":26,"code":"(fn [x]\n    (let [iter (fn [n a b seq] (if (= x n) seq (recur (inc n) b (+ a b) (conj seq b))))]\n      (take x (iter 0 0 1 []))))","user":"55d29fb6e4b0e31453f64a59"},{"problem":26,"code":"(fn fib\n   ([n a b]\n      (if (= n 1)\n        (list a)\n        (conj (fib (- n 1) b (+ a b)) a)))\n   ([n]\n      (fib n 1 1)))","user":"545d881de4b01be26fd7466f"},{"problem":26,"code":"(fn [num]\n  (loop [first 0 second 1 \n         result () rem num]\n    (if (zero? rem)\n      (reverse result)\n      (recur second (+ first second)\n             (conj result second) (dec rem)))))","user":"547fbe01e4b0c51c1f4d7321"},{"problem":26,"code":"#(take % \n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n            ))","user":"5c8ecb58e4b048ec896c59b0"},{"problem":26,"code":"#(map second (take %1 (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"541096bde4b01498b1a719b2"},{"problem":26,"code":"(fn it [li il] (if (= il 0) \n                 \n                 li\n                 \n                 (it (conj li \n                           (\n                           \t\t(fn fib[x] (if (< x 3) \n                                             1 \n                                             (+ \n                                                (fib (dec x)) \n                                                (fib (- x 2)) \n                                              )\n                                           )\n                                )\n                           \t\til\n                           )\n                      )\n                     (dec il)\n                 )\n              )\n) '()","user":"55429859e4b0a04f7929951f"},{"code":"#(map (fn fib [n] \n  (if (< n 2) \n    1 \n    (+ (trampoline fib (- n 2)) (trampoline fib (- n 1)) )))\n (take % (iterate inc 0)))","problem":26,"user":"523327fce4b0f0b72fabf3fc"},{"problem":26,"code":"(fn fib3\n  [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54c3747de4b045293a27f60e"},{"problem":26,"code":"(fn [n] (loop [n n a 0 b 1 xs []] (if (= n 0) xs (recur (- n 1) b (+ a b) (conj xs b)))))","user":"54c641f8e4b045293a27f628"},{"code":"#(take % ((fn f [a b] (lazy-seq (cons a (f b (+ a b))))) 1 1))","problem":26,"user":"4eca40cd535d6d7199dd3703"},{"code":"(fn fib [x]\n  (if (> 2 x)\n    [1]\n    (let [x-1 (fib (- x 1))]\n      (println x-1)\n      (conj\n        x-1\n        (reduce + (take-last 2 x-1))\n        ))\n    ))","problem":26,"user":"535a170ae4b04ce2eb3ed2a3"},{"code":"(fn myfib [n]\n  (if (= n 2 )\n    [1 1]\n    (concat \n      (myfib (- n 1))\n      [(+\n        (last (myfib (- n 1)))\n        (second (reverse (myfib (- n 1))))\n      )]\n    )\n  )\n)","problem":26,"user":"4f0d6686535d0136e6c22318"},{"problem":26,"code":"(fn fibs [n]\n  (take n ((fn fib-seq [] (lazy-cat [1 1] (map + (fib-seq) (rest (fib-seq))))))))","user":"53b39d82e4b047364c0444a6"},{"problem":26,"code":"(fn fibonnacci-sequence [n]\n  ((fn fibonnacci [elts n]\n     (if (= (count elts) n)\n       elts (recur (conj (vec elts) (+ (last elts) (last (drop-last elts)))) n))) '(1 1) n))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [n] (loop [i n, x 0, y 1, rs '()]\n  (if (= 0 i) (reverse rs) \n              (let [r (+ x y)] (recur (dec i) y r (cons y rs)))\n)))","problem":26,"user":"4ed500bb535d10e5ff6f52d3"},{"problem":26,"code":"(fn\n    [x]\n    (loop [result [1 1] x x]\n        (if (= 2 x)\n            result\n            (recur (concat result (list (+ (second (reverse result)) (last result)))) (dec x)))))","user":"6078ce29e4b0a637ed78035a"},{"code":"(fn [n]\n  (loop [i 2 a 1 b 1 fibs [1 1]]\n    (if (< i n) (recur (inc i) b (+ a b) (conj fibs (+ a b))) fibs)))","problem":26,"user":"5207d70ae4b03bd50ef54675"},{"code":"(fn fib [n] (\n  if (= 2 n) '(1 1)\n     (let [x (fib (- n 1))] (concat x (list (+ (last x) (last (drop-last x))))))\n  ))","problem":26,"user":"4f3e05a8e4b0e243712b1f79"},{"problem":26,"code":"(fn [amount]\n  (loop [previous 0 current 1 n 0 results []]\n    (if (>= n amount)\n      results\n      (recur current (+ previous current) (inc n) (conj results current)))))","user":"5cf62ecce4b087f62be35aa7"},{"problem":26,"code":"(fn [x]\n  (let [myFun (fn [[a b]] [b (+ a b)]),\n        fibo (map first (iterate myFun [1 1]))]\n    (take x fibo)))","user":"55e7fc2ce4b0121d4835fd86"},{"problem":26,"code":"(fn [n] \n   (let [fab (fn fab [a b] (cons a (lazy-seq (fab b (+ b a)))))] \n     (take n (fab 1 1))))","user":"5c46bdbde4b0e06e1360a3a4"},{"problem":26,"code":"(fn [c]\n  (loop [c' c r []]\n    (if (<= c' 0)\n      r\n      (recur (dec c') (conj r (if (<= (count r) 1)\n                                1\n                                (+ (last r) (nth r (- (count r) 2)))))))))","user":"57ae3345e4b0fbc9809a271e"},{"problem":26,"code":"(fn fb [n] (cond \n         (= n 1) [1]\n         (= n 2) [1 1]\n         :else (let [prev (fb (dec n))]\n                 (conj prev (reduce + (take-last 2 prev))))))","user":"58b1f51de4b0ebc645576d05"},{"problem":26,"code":"#(loop [fs [1 1], n (- % 2)] (if (= n 0) fs (recur (conj fs (+ (last fs) (-> fs butlast last))) (- n 1))))","user":"4f84a4a4e4b033992c121c39"},{"problem":26,"code":"#(take % ((fn rfib [a b]\n         (cons a (lazy-seq (rfib b (+ a b)))))\n       1 1))","user":"52d84ea7e4b09f7907dd1390"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 1\n         n1 1\n         n2 1\n         result [1]]\n    (if (= i n)\n      result\n      (recur (inc i) n2 (+ n1 n2) (conj result n2)))))","user":"563b1553e4b0bfe05bf1180a"},{"code":"(fn [coll n] \n   (if (> n 2)\n     (recur (conj coll (+ (last coll) (last (butlast coll)))) \n            (dec n))\n     coll\n   )\n ) [1 1]","problem":26,"user":"525ee103e4b0cb4875a45dbb"},{"problem":26,"code":"(fn fib [x]\n  (loop [new [1]]\n    (if (= x (count new))\n      new\n      (recur (if (= 1 (count new)) (conj new 1) (conj new (+ (last new) (last (drop-last new)))))\n\n))))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(fn [n] (let [start [1 1 2]] (do (if (<= n 3) (take n start) (loop [cnt 1 end start] (do (if (<= cnt (- n 3)) (recur (inc cnt) (conj end (+ (last end) (last (butlast end))))) (seq end))))))))","problem":26,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn [n]\n    (loop [i 1  a 1 s [1]]\n      (if (< i n)\n        (recur (inc i) (+ a (last s)) (conj s a))\n        s)))","problem":26,"user":"4f51b9f3e4b03ad3f0c10d2b"},{"problem":26,"code":"(fn [y] (loop [fib [1 1] counter (- y 2)] \n\t(if \n\t\t(zero? counter)\n\t\t(flatten fib)\n\t\t(recur (conj fib (+ (get fib (- (count fib) 2))(get fib (dec (count fib)))))(dec counter))\n\t)))","user":"53d5d24de4b0e771c302544a"},{"code":"(let\n  [rev-fibo\n   (fn self [n]\n     (cond\n      (= 0 n) ()\n      (= 1 n) '(1)\n      (= 2 n) '(1 1)\n      (> n 2) (let [rest-fib (self (dec n))]\n                (cons\n                 (+ (first rest-fib) (second rest-fib))\n                 rest-fib))))]\n  (comp reverse rev-fibo))","problem":26,"user":"5315ec83e4b08068f379ed39"},{"code":"(fn [x] (take x (map first (iterate (fn [[j k]] [(+ j k) j]) [1 0]))))","problem":26,"user":"521249f5e4b06aa6d1666ba2"},{"problem":26,"code":"(fn [num-take] \n  (->> (iterate #(vector (second %) (apply + %)) [1 1])\n  (take num-take)\n  (map first)))","user":"5afb3426e4b0cc2b61a3bcf5"},{"code":"#(take %\n    ((fn fib-seq [curr next]\n      (lazy-seq (cons curr (fib-seq next (+ curr next))))) 1 1 ))","problem":26,"user":"4e5af45e535d8a8b8723a2b1"},{"code":"#(reverse (loop [coll '(1 1) n %]\n            (if (= 2 n)\n              coll\n              (recur (cons (+ (first coll) (second coll)) coll) (dec n)))))","problem":26,"user":"524025bce4b0ad64fa01030f"},{"code":"(fn diego\n  ([c]\n   (diego c '(1 1)))\n  \n  ([c f]\n   (if (= c 2)\n     f\n     (diego (- c 1) (concat f [(+ (last f) (second (reverse f)))])))))","problem":26,"user":"5212a062e4b0d32679a50641"},{"code":"#(loop [col [1], idx 1, tail 1]\n     (if (= idx %1) \n       col\n       (recur (conj col tail) (inc idx) (+ tail (last col)))\n     )\n )","problem":26,"user":"4fa7de4ce4b081705acca1c9"},{"problem":26,"code":"#(take % ((fn fib\n            [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) 1 1))","user":"542d2385e4b0dad94371f2b2"},{"code":"#(loop [xs [1 1]]\n    (if (= % (count xs))\n      xs\n      (recur (conj xs (apply + (take-last 2 xs))))))","problem":26,"user":"4e3456f9535deb9a81d77f2a"},{"problem":26,"code":"#(if (= %2 (count %1)) (reverse %1) (recur (conj %1 (reduce + (take 2 %1))) %2)) '(1 1)","user":"5501de12e4b07d26eda61d7b"},{"problem":26,"code":"(fn [count] (map #((fn fac [n]\n               (if (<= n 1)\n                 n\n                 (+ (fac (- n 1)) (fac (- n 2))))) (inc %)) (range count)))","user":"55f27bf9e4b06e875b46ce45"},{"problem":26,"code":"(fn [n] \n  (loop [n (- n 2) fib [1 1]]\n    (if (zero? n)\n      fib\n      (recur (dec n) (conj fib (apply + (take-last 2 fib)))))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":26,"code":"(fn [len]\n  (rest\n   (#(let [l (count %)] \n       (if (< len l)\n         %\n         (recur (conj % (+ (last %) (nth % (- l 2)))))))\n    [0 1])))","user":"5ed52854e4b016b56eae05d2"},{"problem":26,"code":"#(reverse ((fn fff [n] (cond \n  (< n 1) ()\n  (= n 1) '(1)\n  (= n 2) '(1 1)\n  :else (let [ \n               prv (fff (dec n)), \n               [a b & rst] prv\n             ] \n          (conj prv (+ a b))\n        )\n)) %))","user":"55f5625de4b06e875b46ce86"},{"problem":26,"code":"(fn fibo-list\n  [n]\n  (loop \n      [ret [1 1]]\n    (if (> n (count ret))\n      (recur (conj ret (apply + (take-last 2 ret)))) \n      ret )))","user":"5514534ce4b055c2f668d4d3"},{"code":"(fn [x]\n  (take x\n        ((fn fib[a b]\n        \t(cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","problem":26,"user":"52481875e4b05ef8e38e63c3"},{"code":"(fn t[n] (\n    if (= n 1)\n    [1]\n    (if (= n 2)\n        [1 1]\n        (\n            let [sl (reverse (t (- n 1)))]\n            (\n            conj (t (- n 1)) (+ (first sl) (first (rest sl)))\n            )\n        )\n    )\n))","problem":26,"user":"4f03c039535dcb61093f6b5e"},{"code":"(fn fib-n [n]\r\n  (let [fib (fn j [k]\r\n              (if (<= k 2) 1\r\n                  (+ (j (- k 1)) (j (- k 2)))))]\r\n    (if (zero? n)\r\n      []\r\n      (conj (fib-n (dec n)) (fib n)))))","problem":26,"user":"4ee40938535d10e5ff6f5375"},{"problem":26,"code":"; Well, my solution probably isn't as nice as the leaders, but at least I know how it works!\n(fn genfibs [n] (map (fn fibly [x] (if (< x 3) 1 (+ (fibly (- x 1)) (fibly(- x 2)) ))) (range 1 (inc n))))","user":"5535e822e4b09218d5f44fb2"},{"problem":26,"code":"(fn [x] \n  (loop [c '(1 1)]\n    (if (> x (count c))\n      (recur (concat c (list (apply + (take-last 2 c)))))\n      c)\n    )\n)","user":"54c779bee4b045293a27f63b"},{"code":"(fn [n]\n  (letfn [ (fib-step [[a b]]\n             [b (+ a b)])\n           (fib-seq []\n            (map first (iterate fib-step [1 1])))]\n  (take n (fib-seq))))","problem":26,"user":"5125745ae4b05d10e3e395f9"},{"code":"(fn [X] (let [ \n  fib-step (fn [[a b]]\n  [b (+ a b)]),\n  fib-seq (fn []\n  (map first (iterate fib-step [0 1])))\n]\n(rest (take (+ X 1) (fib-seq)))\n)\n)","problem":26,"user":"4f031883535dcb61093f6a5e"},{"problem":26,"code":"(fn new-fib-num [num]\n  ((fn new-fib-num-helper [counter\n                           limit\n                           result1\n                           result2\n                           r-seq]\n    (cond\n      (= counter limit) (seq r-seq)\n      :default (recur (inc counter)\n                      limit\n                      result2\n                      (+ result1 result2)\n                      (conj r-seq result2))))\n  \t\t\t\t\t  1\n                      num\n                      1\n                      1\n                      [1]))","user":"57d174ede4b0bd073c20236c"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [p (fib (dec n))\n            l (last p)\n            bl (nth p (- n 3))]\n        (conj p (+ l bl))))))","user":"55d36d3ae4b0e31453f64a64"},{"code":"(fn [n]\n  (take n\n    (concat\n      [1 1]\n      ((fn fib [x y]\n        (let [z (+ x y)]\n          (cons z (lazy-seq (fib y z)))))\n        1 1))))","problem":26,"user":"4f32ef71e4b0d6649770a098"},{"problem":26,"code":"#(\n  take % (\n          map last (\n                    iterate (fn [[x y]] [y (+ x y)]) [0 1]\n                    )\n          )\n  )","user":"56119b53e4b05f002753df81"},{"problem":26,"code":"(fn\n  [target]\n  (loop [two-ago 0\n         one-ago 1\n         current 1\n         fibs [1]]\n    (if (= target current)\n      fibs\n      (recur one-ago (+ two-ago one-ago) (inc current) (conj fibs (+ two-ago one-ago)))\n     )\n   )\n )","user":"54d0f744e4b0e8a36923e5d7"},{"problem":26,"code":"(fn list-fibo [n]\n  (map (fn fibo[n]\n    (if (< n 2)\n      1\n      (+ (fibo (- n 2))(fibo (dec n)))))(range n)))","user":"587cbebbe4b01531a375eb24"},{"problem":26,"code":"#(take \n  %\n  (concat [1 1]\n  ((fn fib [a b]\n    (lazy-seq (cons (+ a b) (fib b (+ a b))))) 1 1)))","user":"5f265bd9e4b0857314092c8c"},{"problem":26,"code":"(fn fib \n  ([n] (fib (range (- n 2)) (list 1 1) ))\n  ([arg fib_list]\n   (if (empty? arg)\n     (reverse fib_list)\n     (fib (rest arg) (conj fib_list (+ (first fib_list) (second fib_list))))\n    ))\n  )","user":"5ae71f14e4b0837691e92ca7"},{"code":";(defn fib-stream [prev curr] (lazy-seq (cons curr (fib-stream curr (+ prev curr)))))\r\n;(def fibs (fib-stream 0 1))\r\n\r\n(fn [x]\r\n  (reverse\r\n  (loop [prev 0, curr 1, lst '()]\r\n    (if (= (count lst) x) lst\r\n        (recur curr (+ prev curr) (cons curr lst))))))","problem":26,"user":"4e0febe6535d04ed9115e7be"},{"code":"(fn [n]\r\n  (let [fib (fn [x, self]\r\n    (cond\r\n      (= 1 x) 1\r\n      (= 2 x) 1\r\n      :else (+ (self (- x 1) self) (self (- x 2) self))\r\n    ))]\r\n    (map (fn [x] (fib x fib)) (range 1 (+ 1 n)))\r\n  )\r\n)","problem":26,"user":"4e6e10d8535d5021c1a895fd"},{"problem":26,"code":"#(reverse ((fn [x s] \n  (if (<= x 2)\n    s\n    (recur (dec x) (conj s (+ (first s) (second s))) )))\n    % '(1 1)))","user":"58566b42e4b0f14aab7c86f4"},{"problem":26,"code":"#(take % ((fn fib\n        \t([] \n          \t  (cons 1 (cons 1 (fib 1 1))))\n            ([a b] \n              (let [c (+ a b)]\n                (cons c (lazy-seq (fib c a))))))))","user":"5a7deab5e4b03baeef927703"},{"problem":26,"code":"(fn [n]\n  (loop [i n acc [1 1]]\n    (cond\n      (= 1 i) (vector (first acc))\n      (= 2 i) acc\n      :else (recur (dec i) (conj acc (+ (last acc) (nth acc (- (count acc) 2))))))))","user":"5865c8f0e4b0f14aab7c884e"},{"code":"(fn fibo\n  ([n]\n     (fibo n [1 1]))\n  ([n coll]\n     (if (= n (count coll)) coll\n         (fibo n (#(conj (vec %) (+ (last %) (last (butlast %)))) coll)))))","problem":26,"user":"5058493ae4b06522596eba75"},{"problem":26,"code":"(fn my-fibo\n  [n]\n  ;; 1 is first by this defn\n  (take n (map first (iterate #(vector (last %) (reduce + %)) [1N 1N]))))","user":"59234753e4b0a390037439ef"},{"problem":26,"code":"#(take % ((fn fibo \n           [x y]\n           (cons y (lazy-seq (fibo y (+ x y)))))\n         0 1))","user":"557e6b73e4b05c286339e0d6"},{"code":"(fn [x] (take x \n  ((fn fib [a b] \n    (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4f9fb08ae4b0dcca54ed6d3c"},{"problem":26,"code":"(fn fib [x] (let [fib (fn fib\n              [a b]\n              (lazy-seq (cons a (fib b (+ a b)))))]\n    (rest  (take (+ x 1) (fib 0 1)))))","user":"5acc961ae4b0e27600da7810"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [i 1 last 0 curr 1 final '()]\n    (println i last curr final)\n    (if (> i n)\n      (reverse final)\n      (recur (inc i) curr (+ last curr) (into final [curr])))))","user":"58f7dfe6e4b0438e51c2cf1f"},{"code":"(fn [n]\n    (loop [x n\n           [a b] [1 1]\n           acc [1]]\n      (if (= x 1)\n        acc\n        (let [x (dec x)\n              t [b (+ a b)]]\n          (recur x t (conj acc b))))))","problem":26,"user":"4fe99c8ee4b0547ebccb2467"},{"problem":26,"code":"(fn fibo [n]\n  (case n\n    1 '(1)\n    2 '(1 1)\n    (concat (fibo (dec n)) (list (apply + (drop (- n 3) (fibo (dec n))))))))","user":"56761ab1e4b05957ce8c6154"},{"problem":26,"code":"(fn [n]\n   (take n\n         (map first (iterate (fn [[a b]]\n                               [b (+ a b)])\n                             [1 1]))))","user":"53c0f4dee4b00fb29b221259"},{"problem":26,"code":"(fn gen-fib [number]\n   (loop [res [1]\n          n (dec number)\n          last-n 1\n          pen-n 0]\n     (if (= n 0)\n       res\n       (recur (conj res (+ last-n pen-n))\n              (dec n)\n              (+ last-n pen-n)\n              last-n))))","user":"55860905e4b001b0851d7516"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    :else (loop [c (- n 2)\n                 xs [1 1]]\n            (if (zero? c) xs\n                (recur (dec c)\n                       (conj xs (+ (last xs)\n                                   (last (butlast xs)))))))))","user":"58bc08fee4b0888cdc949d08"},{"problem":26,"code":"(fn fib [x]\n  (loop [a 0 b 1 cnt x l []]\n    (if (= cnt 0)\n      l\n\t(recur (+ a b) a (dec cnt) (conj l (+ a b))))))","user":"5a19d181e4b0ff51aa4b3207"},{"code":"(fn [n]\n    (loop [i 2\n           result '(1 1)]\n      (let [tluser (reverse result)]\n        (if (= i n)\n          tluser\n          (recur (inc i) (conj result (+ (nth tluser (dec i))\n                                         (nth tluser (- i 2)))))))))","problem":26,"user":"511e763ce4b03e81d390ac29"},{"problem":26,"code":"(fn [x]\n  (loop [cnt (- x 2)  f 1  s 1  res '(1 1)]\n    (if (= cnt 0)\n      (reverse res)\n      (recur (- cnt 1) s (+ s f) (conj res (+ s f)))) ))","user":"5700ec08e4b08d47c97781cd"},{"code":"#(rest (take (inc %) (letfn [(fib [n nplus] (lazy-seq (cons n (fib nplus (+ n nplus)))))] (fib 0 1))))","problem":26,"user":"4fba77fae4b081705acca2df"},{"problem":26,"code":"(fn fibseq [n] \n  (letfn \n    [\n     (helper [xs a b n] \n        (if (= n 0) \n          xs \n          (helper (conj xs (+ a b)) b (+ a b) (- n 1))\n        )\n     )\n    ]\n  \t(helper [1 1] 1 1 (- n 2))\n  )\n)","user":"552a672de4b0ffed3738f954"},{"problem":26,"code":"(fn\n  [max-num]\n  (seq (loop [acc [] fib-num 0]\n         (if (<= max-num fib-num)\n           acc\n           (if (< fib-num 2)\n             (recur (conj acc 1) (inc fib-num))\n             (recur (conj acc (reduce + (take-last 2 acc))) (inc fib-num))))\n         )))","user":"53a511aae4b0b62ce3005735"},{"problem":26,"code":"(fn [a] (seq (drop 1 (nth (iterate (fn [y] (conj y (reduce + (#(take 2 (reverse %)) y)))) [0 1]) (dec a)))))","user":"57b45257e4b0fbc9809a2796"},{"code":"(fn first-n-fibs [n]\r\n  (take n ((fn fib [a b]\r\n            (cons a (lazy-seq (fib b (+ a b)))))\r\n            1 1)))","problem":26,"user":"50c336dde4b00e537d002542"},{"problem":26,"code":"#(reduce (fn [s n]\n            (if (< n 1) []\n                (let [n1 (dec (dec n))\n                      n2 (dec n1)]\n                  (conj s (+ (nth s n1 1)\n                             (nth s n2 0))))\n                )\n            )\n          '()\n          (range (inc %)))","user":"56f9392ae4b07572ad1a88ac"},{"code":"#(loop [l [1] n1 0 n2 1]\n    (if (= (count l) %) \n      l\n      (recur (conj l (+ n1 n2)) n2 (+ n1 n2)) \n     \n   ))","problem":26,"user":"52cbcad6e4b07d0d72b27351"},{"problem":26,"code":"(fn fib\n  ([end]\n   (fib 2 end (list 1 1)))\n  ([cur end lst]\n   (if (= cur end)\n     lst\n     (recur (inc cur) end (concat lst (list(+ (last lst)(last(butlast lst)))))))))","user":"56618424e4b068f2fe63dc67"},{"problem":26,"code":"#(loop [n      %\n        fib-1  0\n        fib-2  1\n        result []]\n   (if (zero? n)\n     result\n     (recur (dec n) fib-2 (+ fib-1 fib-2) (conj result fib-2))))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":26,"code":"(fn my-fibonacci [n]\n  (letfn[(fib-pairs [n] \n           (take n \n             (iterate \n               (fn [[a b]] \n                 (list b (+ a b))) \n               '(0 1))))]\n \n  (map last (fib-pairs n))) \n)\n;(fn [n]\n;  (letfn [(fib-pairs [n]\n;           (if (> 1 n)\n;             '() \n;             (loop [[[a b] :as xs] '((0 1)) i n]\n;               (if (== 1 i)\n;                 xs\n;                 (recur (cons (list b (+ a b)) xs) (dec i))))))]\n;  (reduce \n;    (fn [xs x] (cons (last x) xs)) \n;    '()\n;    (fib-pairs n))))","user":"5661e09ae4b068f2fe63dc70"},{"problem":26,"code":"(fn fib-seq [x]\n  (loop [x' x\n         result [0 1]]\n    (if (= 1 x') \n      (rest result)\n      (recur \n       (dec x') \n       (conj result (+ \n                 (last result)\n                 (last (butlast result))))))))","user":"567bf820e4b05957ce8c61ad"},{"problem":26,"code":"(fn fib [n]\n  (let [f0 '(1 1)\n        fib-rec (fn fib-rec [n s]\n                  (if (> n 2)\n                    (fib-rec (dec n) (conj s (+ (first s) (second s))))\n                    s))]\n    (take n (reverse (fib-rec n f0)))))","user":"5ca3def0e4b048ec896c5bb0"},{"problem":26,"code":"(fn [x]\n  (loop [acc [1 1]\n         a 1\n         b 1\n         x (dec (dec x))]\n    (if (zero? x)\n      acc\n      (recur (conj acc (+ a b)) b (+ a b) (dec x)))))","user":"51ca5378e4b08b1cbd0d9480"},{"problem":26,"code":"#((fn [n acc]\n   (if (> 0 (- n 2))\n     (take %1 acc)\n     (recur (- n 1) (conj acc (reduce + 0 (take-last 2 acc))))))\n  %1 [1 1])","user":"545cfbb0e4b01be26fd74669"},{"problem":26,"code":"(fn [howmany]\n\t(loop [arr [1 1] c 2]\n      (if (>= c howmany)\n        arr\n        (recur (conj arr (apply + (take-last 2 arr))) (inc c)))))","user":"534e60c2e4b084c2834f4ab2"},{"problem":26,"code":"(fn [n]\n    (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n        (take n (fib 1 1))))","user":"548f5086e4b0e286459a1239"},{"problem":26,"code":"(fn fib [n]\n  \"calculates a sequence of the first n fib numbers\"\n  (loop [acc '() i 0 x 0 y 1]\n    (if (= i n)\n      (reverse acc)\n      (recur (conj acc y) (inc i) y (+ x y)))))","user":"5689fd03e4b0dcc4269f4088"},{"code":"(fn [n]\n  (letfn [(f [a b]\n            (lazy-seq\n              (let [x (+ a b)]\n                (cons x (f b x)))))]\n    (take n (cons 1 (cons 1 (f 1 1))))))","problem":26,"user":"4e68c434535d8ccf87e9fe89"},{"code":"#(nth (iterate (fn [x] (conj x (apply + (take 2 (reverse x))))) [1]) (- % 1))","problem":26,"user":"520797ebe4b03bd50ef5466d"},{"problem":26,"code":"#(map (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (+ 1 %)))","user":"5bb5cd43e4b0a20761a23575"},{"problem":26,"code":"(fn [x]\n  (map (fn fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2)))))\n       (range 1 (+ x 1))))","user":"526e1bd0e4b03e8d9a4a730b"},{"problem":26,"code":"(fn [x]\n  (loop [i 1 \n         x x\n         l [1 1]]\n    (if (> i (- x 2))\n     l\n      (recur (inc i) x (conj l (+ (nth l (- i 1)) (nth l i)))) )))","user":"593744abe4b02506e01a299b"},{"problem":26,"code":"(fn takeFib [n]\n  (take n (\n           (fn fibb\n  \t\t\t\t([] (cons 1 (lazy-seq (fibb 1))))\n  \t\t\t\t([a] (cons a (lazy-seq (fibb a a (+ a a)))))\n  \t\t\t\t([a b c] (cons c (lazy-seq (fibb b c (+ b c)))))))))","user":"56c0aeb8e4b060a8e693e3af"},{"code":"#(map second (take % (iterate (juxt second (partial apply +)) [0 1])))","problem":26,"user":"4fa5ddfde4b081705acca1b1"},{"problem":26,"code":"(fn [x] (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))] (take x (fib 0 1))))","user":"603e29d4e4b0d5df2af22310"},{"problem":26,"code":"(fn fib [n] \n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [start (fib (- n 1))\n                n1 (last start)\n                n2 (last (pop start))]\n               (conj start (+ n1 n2)))))","user":"582a2d4fe4b051871117bf55"},{"code":"(fn fibseq [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else\n    (reverse\n      (cons\n        (+\n          (last (fibseq (- n 1)))\n          (last (fibseq (- n 2))))\n        (reverse (fibseq (- n 1)))))))","problem":26,"user":"504e48ace4b0f6ff3350c498"},{"code":"(fn [x](take x((fn fib [a b](cons a (lazy-seq (fib b (+ a b)))))1 1)))","problem":26,"user":"4e982877535dbda64a6f6b5b"},{"code":"(fn collect-fibs [n]\r\n           (letfn [(fib [n]\r\n                      (if (or (= n 0) (= n 1))\r\n                          1\r\n                          (+ (fib (- n 1)) (fib (- n 2)))))\r\n                    (collect [n acc]\r\n                      (if (> n 0)\r\n                          (collect (- n 1) (cons (fib (- n 1)) acc))\r\n                          acc))]\r\n             (collect n nil)))","problem":26,"user":"4e68fe94535d8ccf87e9fe94"},{"code":"#(map (fn fib [nth]\n        (condp = nth\n          1 1\n          2 1\n          (+ (fib(- nth 1)) (fib(- nth 2)))))  (range 1 (+ % 1)))","problem":26,"user":"4f030af7535dcb61093f6a49"},{"problem":26,"code":"(fn [c]\n  (loop [c (- c 2)\n         r [1 1]\n         a 1\n         b 1]\n    (if (= 0 c)\n      r\n      (recur (dec c) (conj r (+ a b)) b (+ a b)))))","user":"569b885de4b0542e1f8d1455"},{"problem":26,"code":"#(loop [n-1 1\n        n 1\n        acc [1 1]\n        count (- % 2)]\n   (if (= 0 count) (seq acc)\n     (recur n (+ n-1 n) (conj acc (+ n-1 n)) (dec count))))","user":"570ad386e4b0b0fb43fd06b9"},{"code":"#(let [f (fn [[a b]] [b (+ a b)])]\n   (take % (map first (iterate f [1 1]))))","problem":26,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":26,"code":"(fn [x]\n  (loop [a 0\n         b 1\n         sq (list 1)]\n    (if (= x (count sq))\n      (into (list) sq)\n      (recur b (+ a b) (cons (+ a b) sq)))))","user":"60919828e4b00e9e6653c3d8"},{"problem":26,"code":"#(let [ans (atom [])]\n      (dotimes [i %]\n        (if (<= i 1)\n          (swap! ans conj 1)\n          (swap! ans conj (+ (last @ans) (second (reverse @ans))))))\n      @ans)","user":"5ebc9feae4b00a66d4a95268"},{"problem":26,"code":"(fn main [x] (take x ((fn  fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"55382530e4b09218d5f44fdd"},{"problem":26,"code":"(fn [x] (loop [n x acc '(1 1)]\n          (if (<= n 2)\n            (reverse acc)\n            (recur (dec n) (cons (+ (first acc) (second acc)) acc)))))","user":"557dbc9de4b05c286339e0cd"},{"code":"#(take % ((fn fib [x y]\n             (lazy-seq (cons x (fib y (+ x y)))))\n            1 1))","problem":26,"user":"504f2efae4b0e7ad84dbc4c9"},{"code":"(fn myfib [x] \n    (cond (= 1 x) '(1) \n    (= 2 x) '(1 1) \n\t  :default (loop \n\t\t     [result '(1 1) limit (- x 2)] \n\t\t     (if (> limit 0) \n\t\t       (let [p (first result) pp (first (rest result)) next (+ p pp)] \n\t\t\t (recur (conj result next) (dec limit))) \n\t\t       (reverse result)))))","problem":26,"user":"4f16ef8a535d64f603146451"},{"code":"#(loop [a 1\n        b 1\n        n %\n        fseq []\n        ]\n   (if (zero? n)\n     fseq\n     (recur b (+ a b) (dec n) (conj fseq a))))","problem":26,"user":"53224d45e4b09d4e7a9b54c0"},{"code":"(fn fibs [x]\n   (cond (= x 2) '(1 1)\n         :else ((fn [x y] \n                  \t(reverse (cons x (reverse y))))\n                (+ (last (fibs (dec x)))\n                   (last (butlast (fibs (dec x)))))\n\t\t(fibs (dec x)))))","problem":26,"user":"52fe3a9de4b047fd55837039"},{"problem":26,"code":"(fn [in]\n   (take in (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5489dd4de4b0e286459a11ef"},{"code":"#(loop [acclist '()]\n  (cond \n    (= (count acclist) %) (reverse acclist)\n    (= (count acclist) 0) (recur '(1))\n    (= (count acclist) 1) (recur '(1 1))\n    (> (count acclist) 1) (recur (concat [(+ (first acclist) (second acclist))] acclist))\n  )\n)","problem":26,"user":"4fe588b6e4b0e8f79898fec5"},{"problem":26,"code":"(fn [n]\n  \n  (loop [sofar []]\n    \n    (if (= (count sofar) n)\n      sofar\n      \n      (recur \n             (conj sofar (case (count sofar)\n               0 1\n               1 1\n               (+ (last sofar) (last (butlast sofar)))\n               )))\n      \n      )\n    \n    )\n  \n  )","user":"57afd36de4b0fbc9809a273c"},{"problem":26,"code":"(fn fibs [x]\n  (map (fn fib [n] (if (<= n 1) 1 (+ (fib (- n 1)) (fib (- n 2)))))\n       (range x)))","user":"537e4432e4b06839e8705e9f"},{"code":"(fn [c]\n  (loop \n    [res [] n0 0 n1 1 ct c]\n      (if (= ct 0)\n        res\n        (recur (conj res n1) n1 (+ n0 n1) (dec ct) )\n      )\n))","problem":26,"user":"50bf74c7e4b0ffd967a66cc0"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] (list b (+ a b))) [1 1])))","user":"54d893a4e4b0a52adc2e2039"},{"code":";#(reverse\n;  (loop [i % result '(1 1)] \n;   (if (= i 1)\n;     '(1) \n;     (if (= i 2) \n;       result\n;       (recur \n;        (dec i)\n;        (cons (+ (first result) (second result)) result)\n;        )))))\n\n#(take % ((fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))))","problem":26,"user":"533b9cace4b0e30313ee6cd1"},{"problem":26,"code":"#(loop [times (- % 2) coll [1 1]]\n (if (zero? times)\n   (apply list coll) \n   (recur (dec times) (conj coll (+ (last coll) (last (butlast coll)))))))","user":"51412b0ae4b0694e2952b79d"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= n 0) '()\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [f (fib (dec n)), fr (reverse f)]\n           (reverse (conj fr (+ (first fr) (second fr)))))))","user":"5c22c861e4b07e362c230590"},{"problem":26,"code":"(fn NFib [n]\n  (loop [ numbers [1 1]] \n       (if (< (count numbers) n) \n         (recur (conj numbers (+ (last numbers) (nth numbers (- (count numbers) 2)))))\n         numbers)))","user":"5f8330b8e4b01aacbe7a270f"},{"problem":26,"code":"#(take % ((fn fib [a b]\n\t(lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5891bddce4b00487982d5201"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    (let [l (fib (- n 1))\n          [x y] (take-last 2 l)]\n      (conj l (+ x y)))))","user":"600ae927e4b074f607df6689"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate \n              (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5db19599e4b010eb3c36cd05"},{"code":"(fn fib-n\r\n     ([n]\r\n        (fib-n (- n 2) [1 1]))\r\n     ([n xs]\r\n        (if (= n 0)\r\n          xs\r\n          (recur (dec n) (conj xs (+ (last xs)\r\n                                     (last (drop-last xs))))))))","problem":26,"user":"501668b4e4b052339a490e77"},{"problem":26,"code":"(fn fib [n]\n  (loop [col [0 1] n (- n 1)]\n    (if (= n 0)\n      (rest col)\n      (recur (conj col (+ (last col) (last (butlast col)))) (dec n) ))))","user":"5b855800e4b047b03b2037cd"},{"code":"(fn [num] (apply list\r\n   (butlast (last (take num (iterate \r\n (fn [fibSeq] \r\n   (conj fibSeq (apply + (take-last 2 fibSeq))))\r\n         [1 1]))))))","problem":26,"user":"50c46cfde4b08bdb2b9270a1"},{"problem":26,"code":"(fn fib [x]\n  (take x\n    ((fn fibr [a b]\n    \t(lazy-seq (cons b (fibr b (+ a b)))))\n   \t0 1)))","user":"5f6b5d83e4b02876ed9fd050"},{"problem":26,"code":"(fn [number] \n  (loop [la number\n         li nil\n         f 1\n         l 0]\n    (if (= la 0)\n      (reverse li)\n      (recur (dec la) (conj li f) (+ f l) f ))))","user":"5ac9c737e4b0e27600da77d2"},{"problem":26,"code":"(fn [x]\n    (loop [result [1]\n            s 0\n            d 1\n            left x]\n       (if (= left 1)\n          result\n         (recur (conj result (+ s d)) d (+ s d) (dec left)))))","user":"552f6e8ee4b076ab5578f802"},{"code":"#(take % ((fn fb [a b] \n            (cons a \n                  (lazy-seq (fb b (+ a b))))) 1 1))","problem":26,"user":"50e7dd5de4b077ad597af36b"},{"problem":26,"code":"(fn [n]\n  (let [fibs (fn [[a b]] [b (+ a b)])]\n    (into [] (->> (iterate fibs [1 1])\n                  (map first)\n                  (take n)))))","user":"5d217b1de4b02ea6f0fb69e6"},{"problem":26,"code":"(fn fibonacci [n]\n  (if (= n 1) '(1)\n    (if (= n 2) '(1 1)\n      (concat (fibonacci (- n 1))\n        [(reduce + (take-last 2 (fibonacci (- n 1))))]))))","user":"5a8d1eade4b05369db4d2511"},{"problem":26,"code":"(fn fib [n]\n  (take n (map first (iterate (fn [[a b]]\n                                [b (+ a b)]) [1 1]))))","user":"5b61279ce4b0c6492753e70e"},{"problem":26,"code":"; I should learn how to use memoization\n#(map (fn fib [n]\n        (if (or (= n 0) (= n 1))\n          1\n          (+ (fib (- n 1)) (fib (- n 2)))))\n      (range 0 %))","user":"55d5e80ee4b0e31453f64a91"},{"problem":26,"code":"(fn fib [l a b i] (if (> i 0)\n                (fib (conj l a) b (+ a b) (- i 1))\n                l)) [] 1 1","user":"559e25fde4b08a52bd4f97d0"},{"problem":26,"code":"(fn [n]\n  (->> [1 1]\n       (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]))\n       (map first)\n       (take n)))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn [x]\r\n  (let [fibonatti (fn fib [n]\r\n                    (cond\r\n                     (< n 1) 1\r\n                     (= n 1) 1\r\n                     :else (+ (fib (dec n)) (fib (dec (dec n))))))]\r\n    (for [n (range x)] (fibonatti n))))","problem":26,"user":"503ee85ce4b06c4e0e1fa26e"},{"code":"(fn [n]\n  (letfn [(f [a b n]\n            (if (> n 0)\n              (cons a (f b (+ a b) (dec n)))))]\n    (f 1 1 n)))","problem":26,"user":"4dada426c9a9d6ed2a99dc57"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a) (nth a (- (count a) 2))))) [1 1] (range (- % 2)))","user":"5485b402e4b0e286459a11b0"},{"code":"(fn [fibn]\n\n(loop [n 2, c [1 1]]\n  (if (= n fibn)\n    (apply list c)\n    (recur (inc n) (conj c (+ (last (butlast c)) (last c)))))))","problem":26,"user":"52ba2af3e4b07a9af57922cc"},{"problem":26,"code":"(fn sequence-fib [x]\n  (map (fn [n] ((fn fibo [n]\n                  (if (= n 0) 0\n                      (if (= n 1) 1\n                          (+ (fibo (dec n)) (fibo (dec (dec n))))))) n)) (range 1 (inc x))))","user":"5a1ef1abe4b0ff51aa4b327c"},{"problem":26,"code":"(fn[x](take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"608819b6e4b0ae75613dcedd"},{"code":"(fn [n]\r\n  (loop [n (- n 1), l1 0, l2 1, acc '(1)]\r\n    (if (zero? n)\r\n      (reverse acc)\r\n      (let [x (+ l1 l2)]\r\n        (recur (dec n) l2 x (cons x acc))))))","problem":26,"user":"4e1772b1535d04ed9115e7ee"},{"code":"(fn [i]\n      (loop [x '(1 1)]\n   (if (= (count x) i)\n     (reverse x)\n    (recur (cons (reduce + (take 2 x)) x)))))","problem":26,"user":"51bd255ce4b0df1216cefd94"},{"problem":26,"code":"(fn fib [n & [l]]\n  (if (zero? n)\n    l\n    (if l\n      (fib (- n 1) (concat l (list (+ (nth l (- (count l) 2))\n                                      (nth l (- (count l) 1))))))\n      (fib (- n 2) '(1 1))\n    )\n  )\n)","user":"5743578fe4b0c285004e8aa2"},{"code":"(fn [n]\n  (loop [result [1 1] n n]\n    (cond \n     (= n 1)\n      [1]\n     (= n 2)\n      result\n     :else\n      (recur (conj result (+ (-> result reverse first) (-> result reverse second))) (dec n)))))","problem":26,"user":"537e860ae4b06839e8705ea7"},{"code":"(fn [l] \n  (loop [i l s []]\n    (if (= i 0)\n      s\n      (if (< (count s) 2)\n        (recur (dec i) (conj s 1))\n        (recur (dec i) (conj s (apply + (take-last 2 s))))\n      )\n    )\n  )\n)","problem":26,"user":"4f039a8b535dcb61093f6b36"},{"code":"#(take % ((fn self [a b] (lazy-seq (cons a (self b (+ a b))))) 1 1) )","problem":26,"user":"5282f54be4b0239c8a67ada0"},{"code":"(fn [x] (take x (map second (iterate (fn fib [[a b]]\n           [b (+ a b)])\n         [0 1]))))","problem":26,"user":"4f39c08ae4b0e243712b1efb"},{"problem":26,"code":"(fn fib [x]\n  (loop [nums [1 1]]\n    (if (>= (count nums) x)\n      nums\n      (recur (conj nums (+ (last nums) (first (take-last 2 nums))))))))","user":"54d5343fe4b0a52adc2e200a"},{"code":"(fn [n] \n  (loop [acc [1] cnt 1] \n    (if (= cnt n) \n     acc \n     (recur (conj acc (reduce + (take-last 2 acc))) (inc cnt)))))","problem":26,"user":"509c2c55e4b085ae113522ab"},{"code":"(fn [x]\n  ((fn hoge [x res] \n  (let [r (drop (- (count res) 2) res)]\n  (if (= x (count res))\n    res\n    (recur x (conj res (apply + r))))))\nx [1 1]))","problem":26,"user":"4eb02674535d7eef30807338"},{"problem":26,"code":"(fn [n]\n  (loop [xs [] c 1 acc 0 x n]\n    (if (= x 0)\n      xs\n      (recur (conj xs (+ c acc)) acc (+ c acc) (- x 1)))))","user":"53e55de1e4b036ad0777e458"},{"problem":26,"code":"(fn[n]\n  (loop [given n keep-count 2 acc [1 1] checker n]\n    (if (= 0 checker)\n      '()\n      (if (= (count acc) checker)\n        acc\n        (recur (- given 1) (+ (count acc) 1) (conj acc (+ (acc (- keep-count 1)) (acc (- keep-count 2)))) checker)))))","user":"5668aad0e4b04acd4f672df5"},{"code":"(fn [n]\n  (loop [m 2, fib [1 1]]\n    (if (>= m n) \n     (take n fib)\n     (recur (inc m) (conj fib (apply + (take-last 2 fib)))))))","problem":26,"user":"52cb6bb0e4b07d0d72b2734c"},{"problem":26,"code":"(fn [n]\n  (let [lazy-fib (fn lazy-fib\n                   ([] (cons 1 (lazy-fib 0 1)))\n                   ([n1 n2]\n                      (let [num (+ n1 n2)]\n                        (cons num (lazy-seq (lazy-fib n2 num))))))]\n    (take n (lazy-fib))))","user":"51803613e4b04f45bde7d8fd"},{"code":"(fn [i] ( take i '(1 1 2 3 5 8 13 21)))","problem":26,"user":"50b68375e4b08fb537db98f4"},{"code":"(fn fib [n] (loop [ans [], fore 1, aft 1, to-do n]\n  (if (zero? to-do) ans (recur (conj ans fore) aft (+ fore aft) (dec to-do)))))","problem":26,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn sb [x]\n  (loop [a1 0\n         a2 1\n         coll []\n         x x]\n    (if (> x 0)\n      (recur a2 (+ a1 a2) (conj coll a2) (- x 1))\n      coll)))","problem":26,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn [n]\n  (when (>= n 2)\n    (loop [c (- n 2) x 1 y 1 coll [1 1]]\n      (if (= c 0)\n        coll\n        (let [z (+ x y)]\n          (recur (dec c) y z (conj coll z)))))))","problem":26,"user":"4fc66c43e4b0ee37620e1812"},{"problem":26,"code":"(fn [x]\n  (loop [y x\n         coll [1 1]]\n    (let [last-two (take-last 2 coll)]\n      (if (<= (- y 2) 0)\n        coll\n        (recur (dec y) (conj coll (apply + last-two)))))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn\n  [howmany]\n  (cond\n    (= howmany 0) '()\n    (= howmany 1) '(1)\n    (= howmany 2) '(1 1)\n    :else (loop [current 2 numbers [1 1]]\n      (if (= current howmany)\n        (reverse (into '() numbers))\n        (let [lst (last numbers) penultimate (second (reverse numbers))]\n          (recur (inc current) (conj numbers (+ lst penultimate))))))))","problem":26,"user":"52b94f15e4b07a9af57922ba"},{"problem":26,"code":"(fn \n  [n] \n  (take n ((fn fib \n            [a b] \n            (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5c6e7cc1e4b0fca0c1622752"},{"problem":26,"code":"#(loop [ctr % nums [1 1]]\n    (if (< ctr 3)\n      (take % nums)\n      (recur (dec ctr) (conj nums (apply + (take-last 2 nums))))))","user":"509b1204e4b0412cdea6eb1d"},{"problem":26,"code":"#(loop [times %\n       fib [1]]\n  (if (> times  1)\n    (recur (dec times) (conj fib (+ (last fib) \n                        (if (nil? (last (butlast fib)))\n                          0\n                          (last (butlast fib))))))\n    fib)\n  )","user":"5517331ae4b06a49daca83c0"},{"problem":26,"code":"(fn fibonacci [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"59e68254e4b0249b728206fc"},{"code":"(fn fib \n\t([n] (fib n 2 '(1 1)))\n\t([n c res] (if (>= c n)\n\t\t(reverse res)\n\t\t(fib\n\t\t\tn\n\t\t\t(+ c 1)\n\t\t\t(cons\n\t\t\t\t(+ (first res) (second res))\n\t\t\t\tres\n\t\t\t) \n\t\t)\n\t))\n)","problem":26,"user":"52bf936ee4b07a9af579233b"},{"code":"(fn [x]\n  (if (== x 1)\n    [1]\n    (loop [i 2 out [1 1]]\n      (if (== i x)\n        out\n        (recur (inc i) (conj out (+ (last (butlast out)) (last out))))))))","problem":26,"user":"4e955b95535dbda64a6f6b33"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] (list b (+ a b))) '(1 1))))","user":"594bdadce4b07ddc2dafae43"},{"code":"(fn [x] (loop [a 1 b 1 coll (vector) counter 1]\n          (if (= counter x)\n            (conj coll a)\n            (recur b (+ a b) (conj coll a) (inc counter))\n                    )\n                    )\n                    )","problem":26,"user":"524e9918e4b0541d1855b7e6"},{"code":"(fn make-fib [n]\n  ((fn make-fib-impl [n rs]\n    (if (= n 0)\n      (reverse rs)\n      (make-fib-impl (- n 1)\n                     (cons (+ (first rs) (first (next rs))) rs))))\n   (- n 2) '(1 1)))","problem":26,"user":"521392bce4b0d32679a5065e"},{"code":"(fn fib [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev (fib (dec n))]\n             (conj prev \n                   (+ (last prev) (nth prev (- n 3)))))))","problem":26,"user":"4e243bcb535d04ed9115e825"},{"problem":26,"code":"(fn zz [x] \n (loop [x (- x 2) c [1 1]]\n  (if (> x 0)\n   (recur (dec x)\n ((fn [x] (let [a (peek x)\n                  b (peek (pop x))]\n              (conj x (+ a b))))\nc))\n   c)))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"code":"(fn [n] \n  (take n (map first \n    (iterate #(let [[x y] %] [y (+ x y)]) [1 1]))))","problem":26,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":26,"code":"#(take %\n  (map first\n       (iterate\n        (fn [[i1 i2]] [i2 (+ i1 i2)])\n        [1 1])))","user":"56826ebce4b0945ebc182a93"},{"problem":26,"code":"(fn fib\n  ([n]\n   (take n (fib 0 1)))\n  ([a b]\n   (cons b (lazy-seq (fib b (+ a b))))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":26,"code":"(fn fibonacci\n  ([seq-length]\n   (fibonacci seq-length [1]))\n  ([seq-length seq-so-far]\n   (if (= seq-length 1)\n     1\n     (if (= (count seq-so-far) seq-length)\n       seq-so-far\n       (recur seq-length (conj seq-so-far (apply + (take-last 2 seq-so-far))))))))","user":"5ac6099ee4b0e27600da7757"},{"code":"(fn [n]\n  (loop [cnt (- n 2), a 1, b 1, result [1 1]]\n\t(if (zero? cnt)\n\t  (lazy-seq result)\n\t  (recur (dec cnt) b (+ a b) (conj result (+ a b))))))","problem":26,"user":"515d6f49e4b00901442db1dd"},{"code":"(fn f[c]  \r\n(\r\n  (fn ff [n1, n2, c]\r\n  (if (zero? c) \r\n    []\r\n    (concat  [n1] (ff n2 (+ n1 n2) (dec c)))\r\n   )\r\n  ) 1 1 c\r\n))","problem":26,"user":"4f245d77e4b0d66497709feb"},{"code":";(fn fib [x]\n;  (loop [cur x\n;         t1 0\n;         t2 1\n;         xs nil]\n;    (if (= cur 0)\n;      (reverse xs)\n;      (recur (dec cur) t2 (+ t1 t2) (conj xs t2)))))\n\n(fn [x]\n  (let [fib (fn fib [n]\n              (if (< n 3)\n                1\n                (+ (fib (- n 1)) (fib (- n 2)))))]\n    (take x (map fib (drop 1 (range))))))","problem":26,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":26,"code":"(fn fib [arg] \n  (reverse \n  (loop [x1 1\t\n         x2 1\n         lst '(1 1)\n         cnt (- arg 2)]\n    (if (= cnt 0)\n      lst\n      (let [x3 (+ x1 x2)]\n        (recur x2 x3 (conj lst x3) (dec cnt)))))))","user":"53c1ce3ee4b00fb29b221268"},{"code":"(fn [n]\r\n  (letfn [(fib [x]\r\n          (if (> 2 x)\r\n            1\r\n            (+(fib (- x 1)) (fib (- x 2)))))]\r\n  (map fib (range n))))","problem":26,"user":"4faf897be4b081705acca257"},{"problem":26,"code":"(fn [l] (map (fn [x] ((fn fib [f] (if (< f 2) f (+ (fib (- f 1)) (fib (- f 2)))))x)) (range 1 (inc l))))","user":"56686edce4b04acd4f672dea"},{"code":"(fn [x]\n  (take x \n    (map first \n         (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"(fn [n]\n\t   (take n\n\t\t (map first\n\t\t      (iterate (fn [[a b]] [(+ a b) a])\n\t\t\t       [1 0]))))","problem":26,"user":"515ef58be4b02c55805ea237"},{"problem":26,"code":"(fn [n]\n  (loop [acc '(1 1)\n         idx 2]\n    (cond (< n 2) acc\n          (= idx n) acc\n          :else (recur (concat acc (list (+ (last acc) (nth acc (- idx 2)))))\n                       (inc idx)))))","user":"56002c2de4b04bb52996e161"},{"code":"(fn [n] \n  \n  (take n (map first (iterate (fn [[b a]] [(+ a b) b]) [1 0]))))","problem":26,"user":"504e71cbe4b0f6ff3350c4b3"},{"problem":26,"code":"(fn this [arg]\n  (letfn [(fib ([]\n                (concat [1 1] (fib 1 1)))\n               ([p a]\n                (let [sum (+ p a)]\n                  (lazy-seq (cons sum (fib a sum))))))]\n    (take arg (fib))))","user":"5cc092d1e4b0ccb061962790"},{"code":"(fn[x]\n  (loop [l [1 1] n 0]\n\t(if(> n (- x 3))\n\t\tl\n      \t(recur (conj l (+ (nth l (- (count l) 2)) (last l))) (+ 1 n)))))","problem":26,"user":"517e6671e4b0329b27fa9f56"},{"code":"#(map (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"523b1a65e4b02f719975bdbd"},{"problem":26,"code":"(fn [n] (loop [fib-nums [1 1]] (if (>= (count fib-nums) n) (subvec fib-nums 0 n) (let [[n1 n2] (reverse fib-nums)] (recur (conj fib-nums (+ n1 n2)))))))","user":"591770dae4b09b4ee5954b9c"},{"code":"(fn [n]\n  (loop [i n, x 0, y 1, buf (list 1)]\n    (if (= i 1)\n      (reverse buf)\n      (recur (dec i) y (+ x y) (conj buf (+ x y))))))","problem":26,"user":"4f80a906e4b033992c121bf7"},{"problem":26,"code":"(fn [x]\n   (->> (loop [b [0] a 1]\n        (if (= (count b) (+ x 1)) \n               b\n              (let [preceeding ((comp first reverse) b)]\n              (recur \n                (conj b a)\n                (+ a preceeding) ))))\n                (drop 1)))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":26,"code":"(fn [x] (take x ((fn fib [y z] (cons y (lazy-seq (fib z (+ z y))))) 1 1)))","user":"5233564ae4b0f0b72fabf403"},{"problem":26,"code":"#(loop [i 1, out [], s 1] (if (> i %) out (cond (< i 3) (recur (inc i) (conj out 1) s), (> i 2) (recur (inc i) (conj out (+ s (last out))) (last out)))))","user":"58cff8b0e4b03c36ff7e58c0"},{"code":"(fn fibonacci [n]\n  \"Return the first n numbers of the Fibonacci sequence.\"\n  (loop [fibs [1 1] len 2]\n    (if (<= n len)  ;; E.g., if n is 0, 1, or 2 when len is 2.\n      (take n fibs)\n      (let [last-fib (get fibs (- len 1))\n            last-last-fib (get fibs (- len 2))\n            next-fib (+ last-fib last-last-fib)]\n        (recur (conj fibs next-fib) (inc len))))))","problem":26,"user":"527aba40e4b03e8d9a4a7565"},{"code":"(fn[n](take n(map first(iterate(fn[[a b]][b (+ a b)])[1 1]))))","problem":26,"user":"5017eface4b02f523d7cc5e7"},{"problem":26,"code":"(fn fib-loop [n]\n  (loop [a 0\n         b 1\n         index 0\n         result []]\n    (if (< index n)\n      (recur b (+ a b) (inc index) (conj result b))\n      result)))","user":"5a786f6be4b013a48d39976e"},{"code":"#(drop 2\n  (reverse\n    (reduce\n      (fn [s x]\n        (conj s (+ (first s) (second s))))\n      '(0 1) (range %))))","problem":26,"user":"4ec5a6ee535d6d7199dd36ae"},{"code":"(fn fibn [n]\n  (cond\n   (< n 1) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else \n   (loop [c 2\n          a 1\n          b 1\n          arr [a b]]\n     (let [s (+ a b)]\n       (if (>= c n)\n        arr\n        (recur (inc c) b s (conj arr s)))))))","problem":26,"user":"52c2f10de4b07a9af5792386"},{"problem":26,"code":"(fn fibs [x]\n  (letfn [(fib [x]\n            (cond\n              (= x 0) 0\n              (= x 1) 1\n              :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (for [i (range 1 (inc x))]\n      (fib i))))","user":"5a059b33e4b01bb0ae8afdb5"},{"code":"(fn [n] \n  (loop [lst [1 1] curr (- n 2)] \n    (if (zero? curr) \n      lst \n      (recur \n        (conj lst (+ (last lst) (last (butlast lst))))\n        (dec curr)))))","problem":26,"user":"5065b810e4b0148eb3925aec"},{"code":"#(map (fn fib [n]\r\n    (if (< n 2)\r\n\t      1\r\n\t    (+ (fib (dec n)) (fib (-> n dec dec)))\r\n\t    )\r\n\t  )\r\n      (range %1)\r\n      )","problem":26,"user":"500b6685e4b03d00572d2d82"},{"problem":26,"code":"(fn [x]\n  (loop [fib-seq [1 1]\n         prev-one 1\n         prev-two 1\n         fib-index 2]\n    (if (= fib-index x)\n      fib-seq\n      (recur (conj fib-seq (+ prev-one prev-two))\n             prev-two\n             (+ prev-one prev-two)\n             (+ fib-index 1)\n      )\n    )\n    ))","user":"570f41f8e4b0b0fb43fd0702"},{"code":"(fn [n]\r\n  (map \r\n  (fn fib [n]\r\n    (if (< n 2)\r\n      n\r\n      (+ (fib (dec n)) (fib (- n 2))))) (range 1 (inc n))))","problem":26,"user":"509c03f3e4b085ae113522a8"},{"problem":26,"code":"(fn [fibs-count]\n      (take fibs-count ((fn fib [a b]\n                          (lazy-seq (cons a (fib b (+ a b)))))\n                        1 1)))","user":"5d5c2730e4b09db18d4482ea"},{"code":"(fn [max]\n    (loop [acc (list) idx 1]\n      (cond (= idx 1) (recur (concat (list 1) acc) (inc idx))\n            (= idx 2) (recur (concat (list 1) acc) (inc idx))\n            (> idx max) acc\n            :else (let [new-val (+ (last acc)\n                                   (last (drop-last acc)))]\n                    ;(println (str new-val \", \" acc ))\n                    (recur (concat acc (list new-val)) (inc idx))))))","problem":26,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn [n]\n  (loop [n (- n 2) acc [1 1]]\n    (if (= n 0) acc\n        (let [len (.length acc)] \n          (recur (dec n) (conj acc (+ (acc (- len 2)) (last acc))))))))","problem":26,"user":"4eb0a757535d7eef3080733d"},{"problem":26,"code":"(fn [n] \n  (\n   (fn [n k r]\n     (if (>= k n)\n       r\n       (recur n \n              (inc k) \n              (conj r \n                    (+ (last r) (last (butlast r)))\n              )\n       )\n     )\n    )\n   n 2 [1 1])\n )","user":"57dfe173e4b0bd073c20246b"},{"problem":26,"code":"(fn\n  [n]\n  (loop [x 2 fib [1 1]]\n    (if (< x n)\n      (recur (inc x) (conj fib (+ (fib (- x 2)) (last fib))))\n      (seq fib))))","user":"5adbbf89e4b0837691e92bf4"},{"problem":26,"code":"(fn fib [n]\n  (loop [l '(1 1)\n         m (- n 2)]\n    (if (zero? m)\n      (reverse l)\n      (recur (conj l (+ (first l) (second l))) (dec m) )))         \n)","user":"53b9bb15e4b047364c0444ed"},{"code":"(fn [n](take n\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f5595d4e4b0a7574ea71805"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[b a :as x]] (take 2 (conj x (+ a b)))) '(1 0)))))","user":"55478ce2e4b0a04f7929954e"},{"code":"#(map first\n  (take %\n    (iterate\n      (fn [[f1 f2]] [f2 (+ f1 f2)]) \n    [1 1])))","problem":26,"user":"4f03d4dc535dcb61093f6b6e"},{"problem":26,"code":"(fn fib\n   ([size]\n   (fib [] (dec size) 0 1))\n\n   ([coll size pred next]\n    (let [newterm (+ pred next)]\n      (if (= 0 size)\n        (cons 1 coll)\n        (fib (conj coll newterm) (dec size) next newterm)))\n    ))","user":"56fa972be4b07572ad1a88c2"},{"code":"(fn fib [n]\r\n  \"Generate the n first terms of the Fibonacci sequence\"\r\n  (loop [i (- n 3) t1 1 t2 1 acc [t1 t2]]\r\n    (if (neg? i)\r\n      acc\r\n      (recur (dec i) t2 (+ t2 t1) (conj acc (+ t1 t2))))))","problem":26,"user":"4f629697e4b0defedf855fd6"},{"code":"#(take %\n  ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"509b89b3e4b03049c49bd678"},{"code":"(fn [n]\r\n(take\r\n n\r\n((fn fib [n1 n2]\r\n     (lazy-seq\r\n       (cons \r\n        n1      \r\n        (fib n2 (+ n1 n2) )\r\n       )\r\n     )\r\n  ) 1 1)\r\n )\r\n)","problem":26,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn fibo2 [n]\n  (loop [m n acc [1 1] res 1]\n    (if (> m 2)\n      (recur (- m 1) (conj acc (+ (last acc) res)) (last acc))\n      acc)))","problem":26,"user":"5376966ae4b06839e8705e27"},{"problem":26,"code":"(fn fib [n] (cond (= n 1) [1] \n                 (= n 2) [1 1] \n                 :else (let [res (fib (dec n))] \n                 (concat res [(+ (first (reverse res)) (second (reverse res)))]))))","user":"5dd53859e4b0948ae9d9ad76"},{"code":"(fn fib [n]                       \n  (case n                         \n    1 '(1)                        \n    2 '(1 1)                      \n    (concat                       \n      (fib (dec n))               \n      (list (apply + (take-last 2 (fib (dec n))))))))","problem":26,"user":"521b73f5e4b0c4ef0be83043"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n  (take n (fib 0 1))))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":26,"code":"(fn fib-seq [n]\n  (letfn [\n          (fib-recur [a b]\n                     (cons a (lazy-seq (fib-recur b (+ a b)))))]\n          (take n (fib-recur 1 1))))","user":"52b9e920e4b07a9af57922c9"},{"problem":26,"code":"#( map ( fn g [n] (if (< n 2) 1 (+ (g (- n 2)) (g (- n 1 ))) )) (range %))","user":"57487084e4b009280f9f2b8c"},{"problem":26,"code":"#(last (take (dec %) (iterate (fn [v] (conj v (+ (last v) (last (pop v))))) [1 1])))","user":"5499e23de4b03163384f4706"},{"problem":26,"code":"(fn [x]\n  (loop [n x y [1] z 1]\n    (if (= n 1)\n      y\n      (recur (dec n) (conj y z) (+ (last y) z)))))","user":"59c91fa4e4b0a024fb6ae573"},{"problem":26,"code":"(fn [x]\n    (loop [c 0 l [0 1]]\n      (if (< c (- x 1))\n        (recur (inc c) (conj l (apply + (take-last 2 l))) )\n        (rest l)\n        )\n        \n      )\n    )","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":26,"code":"(fn fib\n  ([n] (reverse (fib n '() 1 1)))\n  ([n acc x y] (if (= n 0) acc\n           (fib (- n 1) (conj acc x) y (+ x y))))\n  )","user":"543cf826e4b032a45b869345"},{"problem":26,"code":"(fn fib [n]\n     (let [n (inc n)]\n       (drop  1 (map \n                  (fn fibo-item [n]\n                    (int\n                      (*\n                        (/ 1 (Math/sqrt 5))\n                        (-\n                          (Math/pow\n                            (/ (+ 1 (Math/sqrt 5)) 2) n)\n                          (Math/pow\n                            (/ (- 1 (Math/sqrt 5)) 2) n))))) (range n)))))","user":"5f4eb036e4b0102c75033969"},{"code":"(fn fib-times\n      ([t] (fib-times [1 1] t))\n      ([v t] (if (<= t 2) v\n               (recur (conj v (+ (last v) (last (butlast v)))) (dec t)))))","problem":26,"user":"4f7c2ac4e4b06e829148e1ad"},{"problem":26,"code":"(fn [input]\n  (reverse \n    (let [acc-in '(1 1) n-in (- input 2)]\n      (loop [acc acc-in n n-in]\n        (cond\n          (= n 0) acc\n          :else (recur (conj acc (+ (first acc) (second acc))) (- n 1))\n        )\n      )\n    )\n  )\n)","user":"5e7aba9fe4b085ba37836e0c"},{"problem":26,"code":"(fn [n]\n\n\t(case n\n\t\t1 [1]\n\t\t2 [1 1]\n\t\t(loop [fib [1 1] i 3]\n\t\t\t(if (> i n)\n\t\t\t\tfib\n\t\t\t\t(recur (conj fib (+ (last (pop fib)) (last fib))) (inc i))\n\t\t\t)\n\t\t)\n\t)\n)","user":"597b88bae4b02382a38ad1fc"},{"problem":26,"code":"(fn recursive-fib [x & y] \n  (if y\n    (if (>= (count (first y)) x)\n      (first y)\n      (recursive-fib x (conj (first y) (+ (first (reverse (first y))) (second (reverse (first y)))))))\n    (recursive-fib x [1 1])))","user":"577feed1e4b0d36ec5835e71"},{"code":"(fn [x]\n  (letfn [(fib [current next n lst]\n            (if (= n 1) (reverse (cons next lst))\n                (fib next (+ current next) (dec n)\n                     (cons next lst))))]\n     (fib 0 1 x [])))","problem":26,"user":"4eb6f065535d7eef30807372"},{"problem":26,"code":"(fn [x]\n  ((fn [l n]\n     (cond (= (count l) 0) (recur [1] (dec n))\n           (= n 0) l\n           :else (recur \n                  (conj l (apply + (take-last 2 l)))\n                  (dec n))))\n   [] x))","user":"58384bc4e4b089d5ab817d27"},{"problem":26,"code":"#((fn fibn \n  [n c l] \n  (if (>= c n) (apply list l) (fibn n (+ c 1) (conj l (+ (nth l (- c 2)) (nth l (- c 1))))))\n) % 2 [1 1])","user":"5d0aab50e4b0cc9c91588220"},{"problem":26,"code":"(fn [n] (let [fib (iterate (fn [fiblist] (conj fiblist (+ (first fiblist) (second fiblist))))'(1 1))]\n          (reverse (nth fib (- n 2)))))","user":"5d1a1082e4b0902706380e0e"},{"code":"(fn [x] \n      (if (< x 3)\n      (take x '(1 1))\n      (reverse ((fn fibsh [N fs]\n          (if (= N 0)\n              fs\n              (fibsh (- N 1) \n                (cons (+ (nth fs 0) (nth fs 1)) fs )\n              )\n          )\n        ) \n        (- x 2) '(1 1) ))))","problem":26,"user":"4f859146e4b033992c121c46"},{"code":"(fn [n]\n  (loop [a 1\n         b 1\n         n n\n         r ()]\n    (if (zero? n)\n      (reverse r)\n      (recur b (+ a b) (dec n) (cons a r)))))","problem":26,"user":"4e8a170c535d3e98b802328f"},{"problem":26,"code":"(fn [coll] (reverse ((fn fib [n] (if (= n 1)\n               `(1)\n               (cons (reduce + (take 2 (fib (- n 1)))) (fib (- n 1))))) coll)))","user":"5759cd46e4b02ea11479932e"},{"problem":26,"code":"(fn fib ([n]\n\t\t (if (> n 1) (fib [1, 1] n) 1))\n\t  ([x, n]\n\t\t (if (< (count x) n) \n\t\t   (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n\t\t   x)))","user":"57949eb0e4b0e215f87e846f"},{"code":"(fn fib [n]  (loop [cnt n,  next 1, nl '( 1)] \n  \t\t\t\t\t( if (< cnt 2) \n\t\t\t\t\t\t\tnl \n\t\t\t\t\t\t\t(recur (dec cnt) (+ next (last nl)) (reverse (cons next (reverse nl))))  \n\t\t\t\t\t\t)\n\t\t\t\t\t) \n\t\t\t)","problem":26,"user":"4f9a0f71e4b0dcca54ed6d04"},{"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) )","problem":26,"user":"52f9ce6de4b047fd55836ff0"},{"problem":26,"code":"(fn [num]\n  (letfn [(fib [i]\n            (cond\n              (= i 0) 0\n              (= i 1) 1\n              (> i 1) (+ (fib (- i 2)) (fib (- i 1))) ))\n          (counter [n coll]\n            (if (= n 0) coll (conj coll (counter (dec n) [(fib n)] )) ))]\n    (->> (counter num [])\n         flatten\n         reverse)  ))","user":"60af5fe2e4b0245e5b1b35c0"},{"problem":26,"code":"(fn [n]\n  ((fn [n acc]\n    (cond (= 0 n) 0\n           (= 1 n) 1\n           (= 2 n) acc\n           (< 2 n) (recur (- n 1) (concat acc (list (+ (last acc) (second (reverse acc))))))\n          ))\n   n '(1 1)))","user":"5d398d4de4b01671435dbd53"},{"problem":26,"code":"#(take % ((fn fib\n    [a b]\n    (lazy-seq\n      (let [sum (+ a b)]\n           (cons a \n             (fib b sum)\n           )\n      )\n    )\n) 1 1)\n)","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn [n] (reverse (loop [acc '(1 1) count n] (if (= count 2) acc (recur (conj acc (+ (first (rest acc)) (first acc))) (dec count))))))","problem":26,"user":"51c80dd0e4b07ef393169e4a"},{"problem":26,"code":"#(nth (iterate (fn [r] (cond (< (count r) 2) (conj r 1) :else (conj r (+ (last r) (-> r reverse second))))) []) %)","user":"5dcfdf23e4b0948ae9d9ad43"},{"problem":26,"code":"(fn fibb [x]\n  (map (fn fib [x]\n    (case x\n      1 1\n      2 1\n      (+ (fib (dec x)) (fib (dec (dec x))))\n    )\n  ) (range 1 (inc x)))\n)","user":"574d0574e4b02ea114799227"},{"problem":26,"code":"(fn [amount]\n  (loop [todo (- amount 2) result [1 1] last 1 current 1 ]\n    (let [rest-runs (dec todo) new-result (conj result (+ last current))]\n      (if (> rest-runs 0) (recur rest-runs new-result current (+ last current)) new-result))))","user":"54b2d392e4b09f271ff37d2f"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x,y]] [y,(+ x y)]) [1,1])))","user":"5e954b9ee4b0fbed045a3809"},{"code":"(fn fibn\n  ([n] (reverse (fibn n '(1 1))))\n  ([n acc]\n    (if (= n (count acc))\n        acc\n        (fibn n (cons (+ (first acc) (second acc)) acc)))))","problem":26,"user":"504e3afae4b0f6ff3350c488"},{"problem":26,"code":"(fn [x]\n  (cond (= x 0) []\n        (= x 1) [1]\n        (= x 2) [1 1]\n        :else (loop [scope (- x 2) vect [1 1]]\n                (if (= scope 0) vect\n                  (recur (dec scope) (conj vect (reduce + (take-last 2 vect))))))))","user":"5ebaa4a3e4b00a66d4a95258"},{"problem":26,"code":"(fn fiblist\n    [x]\n    (if (= x 0)\n      (vector)\n      (conj (fiblist (- x 1)) ((fn fib\n    [x]\n    (if (<= x 2)\n      1\n      (+ (fib (- x 1)) (fib (- x 2))))) x))))","user":"4f9e0000e4b0dcca54ed6d2a"},{"problem":26,"code":"#(reduce (\n\tfn [x n] (\n\t\tconj x (+ (get x (- n 1)) (get x (- n 2)))\n\t))\n\t[1 1]\n\t(range 2 %)\n)","user":"5ed80d50e4b016b56eae05eb"},{"code":"( fn [x] \n   (loop [c 1\n          l '(1)]\n     \n     (if (= x (count l))\n       (reverse l)\n       (recur (+ c (first l)) (conj l c))\n     )\n   )\n  )","problem":26,"user":"51ff6379e4b0f1313d468a98"},{"code":"(fn fib ([n]\n         (cond\n           (= n 0) []\n           (= n 1) [1]\n           (= n 2) [1 1]\n           :else\n           ((\n              fn ifib ([s c]\n                       (cond\n                         (= c 0) s\n                         :else\n                          (ifib (conj s (+ (last s) (last (butlast s)))) (- c 1))\n                         )\n                       )\n              ) [1 1] (- n 2))\n           )\n           )\n  )","problem":26,"user":"53307da1e4b019098a6f8b5e"},{"problem":26,"code":"#(take % (map first (iterate (fn latest-fib-pairs [[a b]] [b (+ a b)]) [1 1])))","user":"5a1c94dee4b0ff51aa4b3249"},{"problem":26,"code":"#(map first (take % (iterate (fn fib [[a b]] [b (+ a b)]) [1 1])))","user":"550001d0e4b07d26eda61d57"},{"code":"(fn [fin]\n  (loop [numbers '(1 1) number 2]\n     (if (< fin (inc number))\n\t       (reverse numbers)\n\t       (recur (conj numbers (+ (first numbers) (second numbers))) (inc number)))))","problem":26,"user":"50ee145de4b06330c1f87c53"},{"problem":26,"code":"(fn [x]\n\t\t\t(loop [fibo-series '(1) limit (dec x)]\n\t\t\t\t(if (not= 0 limit)\n\t\t\t\t\t(recur (conj fibo-series (+ (first fibo-series) (if (nil? (second fibo-series)) 0 (second fibo-series)))) (dec limit))\n\t\t\t\t\t(reverse fibo-series))))","user":"5414dccbe4b01498b1a719f1"},{"problem":26,"code":"#(loop [fibseq '(1 1)]\n   (if (= (count fibseq) %)\n     fibseq\n     (recur (concat fibseq (list (+ (last fibseq) (nth fibseq (- (count fibseq) 2)))))\n            )))","user":"55eeeb81e4b0121d4835fdf7"},{"code":"(fn [n]\n    (loop [x 0, s []]\n      (if (< x n)\n        (recur (inc x)\n          (conj s\n            (if (<= x 1)\n              1\n              (+ (last s) (last (butlast s))))))\n        s)))","problem":26,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"#(take  % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"534d639ae4b084c2834f4a9e"},{"problem":26,"code":"(fn [n]\n(let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))]\n    (take n (fib 1 1))))","user":"57583451e4b02ea114799304"},{"problem":26,"code":"(comp reverse (fn fib\n                 ([x] (fib x `() 1 1))\n                 ([x li f s] (\n                               if (= x 0) li\n                                          (fib (- x 1) (conj li f) s (+ f s))\n                                          )\n                   )\n                 ))","user":"57a89ae9e4b0a96607956221"},{"problem":26,"code":"#(take %(map first (iterate(fn [[a b]] [b (+ a b)]) [1 1])))","user":"53cd421ce4b00fb29b2212dd"},{"problem":26,"code":"(fn [a b fib-sec n] \n  (if (zero? n) \n    ; Base case\n    (apply list fib-sec)\n    ; Recursive case\n    (recur b (+ a b) (conj fib-sec b) (dec n) )\n    )\n  ) 0 1 []","user":"575ef4b6e4b08062f99a4e78"},{"problem":26,"code":"(fn [i]\n  (take i\n        (map first\n             (iterate\n              (fn [[a b]] [b (+ a b)])\n              [1 1]))))","user":"5c718e6ce4b0fca0c1622796"},{"code":"(fn fib-len[l]\n  (map (fn fib [n]\n       (if (or (= n 0) (= n 1)) 1\n         (+ (fib (- n 1)) (fib (- n 2)))))\n  (range l)))","problem":26,"user":"4fad77a6e4b081705acca23a"},{"problem":26,"code":"(fn fib-seq [n]\n  (loop [idx 1\n         fib1 1\n         fib2 1\n         numbers []]\n    (if (<= idx n)\n      (recur (inc idx) fib2 (+ fib1 fib2) (conj numbers fib1))\n      (seq numbers))))","user":"5515c8b1e4b055c2f668d4f2"},{"code":"(fn fiblist [size]\n (loop [n 0\n        l [] ]\n   (cond (= n size) (reverse l)\n         (= n 0) (recur (inc n) [1])\n         (= n 1) (recur (inc n) [1 1])\n         true (recur (inc n) (cons (+ (first l) (second l)) l)))))","problem":26,"user":"4eff81ca535dcb61093f6a2d"},{"problem":26,"code":"(fn [y]\n\t(\n\t\t(fn acc[y accum]\n\t\t\t(if\n\t\t\t\t(= 0 y)\n\t\t\t\taccum\n\t\t\t\t(acc (- y 1) \n\t\t\t\t\t(conj accum \n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(fn fib[x]\n\t\t\t\t\t\t\t\t(case x\n\t\t\t\t\t\t\t\t\t0 1\n\t\t\t\t\t\t\t\t\t1 1\n\t\t\t\t\t\t\t\t\t(+\n\t\t\t\t\t\t\t\t\t\t(fib (- x 1))\n\t\t\t\t\t\t\t\t\t\t(fib (- x 2))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t(- y 1)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\ty '()\n\t)\n)","user":"5838d5ede4b089d5ab817d32"},{"code":"(fn [cnt]\n  (loop [re (list 1) before 1 second-before 0]\n    (if (= (count re) cnt)\n      (reverse re)\n      (recur (conj re (+ before second-before)) (+ before second-before) before)\n      )\n    )\n  )","problem":26,"user":"4db7da66535d1e037afb2187"},{"code":"(fn fibo [rank]\n  (if (= rank 1)\n  \t'(1)\n  (if (= rank 2)\n    '(1 1)\n    (concat \n    \t(fibo (- rank 1)) \n    \t(list (+ (last (fibo (- rank 1))) (last (fibo (- rank 2)))))\n  \t)\n  )\n  )\n)","problem":26,"user":"50d3317ee4b049d4ed5650da"},{"problem":26,"code":"#(loop [f [] n 0] (if (= n %) f (recur (conj f (if (<= n  1) 1 (reduce + (take 2 (reverse f))))) (inc n))))","user":"5505d137e4b086ebe8a79c8c"},{"problem":26,"code":"#(loop [n %1 fst 1 sec 1 res '(1 1)]\n    (if (<= n 2)\n      (reverse res)\n      (recur (dec n) sec (+ fst sec) (conj res (+ fst sec)))))","user":"584a44e6e4b089d5ab817ee3"},{"problem":26,"code":"(fn [x] ((fn [x a b c] (if (= x 2) c (recur (- x 1) b (+ a b) (conj c (+ a b))))) x 1 1 [1 1]))","user":"53ba0d1be4b047364c0444f1"},{"code":"(fn [nm]\n  (reverse ((fn [lst anum]\n\t\t\t     (if (= anum 0)\n                   lst\n                   (let [length (count lst)\n                         new-num (- anum 1)]\n                     (if (= 0 length)\n                       (recur '(1) new-num)\n                       (if (= 1 length)\n                         (recur '(1 1) new-num)\n                         (recur (cons (+ (first lst)\n                                         (second lst))\n                                      lst)\n                                new-num)))))) '() nm)))","problem":26,"user":"51c76864e4b07ef393169e3f"},{"code":"(fn [n]\n  (let [lazy-fib (fn lazy-fib [a b]\n                   (cons b (lazy-seq (lazy-fib b (+ a b)))))]\n    (take n (lazy-fib 0 1))))","problem":26,"user":"53695439e4b0243289761e9a"},{"code":"#(take % (->> [1 1]\n              (iterate (fn [[a b]]\n                         [b (+ a b)]))\n              (map first)))","problem":26,"user":"510d9d61e4b078ea71921141"},{"code":"; #(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))\n#(take % '(1 1 2 3 5 8 13 21))","problem":26,"user":"513f98f9e4b00f13ea1bd88f"},{"problem":26,"code":"(fn \n\n  [fibo] \n\n  (loop \n\n    [n 0 result []]\n\n    (if (= n fibo)\n\n      result\n\n      (if (< n 2)\n\n        (recur (inc n) (conj result 1))\n\n        (recur (inc n) (conj result (+ \n\n                                       (last result) \n\n                                       (nth result (- (count result) 2)))))))))","user":"59c5093ce4b0a024fb6ae50c"},{"problem":26,"code":"(fn [n] (loop [c 1 s [1]] \n          (if (= (count s) n) \n            (seq s)\n            (recur (+ c (last s)) (conj s c))\n          )\n          )\n  )","user":"59473583e4b07ddc2dafad98"},{"problem":26,"code":"(fn [n] (take n (map last(iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"5715b67fe4b07c98581c3ae1"},{"code":"#(map (fn recur-fibo [n]\n (letfn [(fib\n [current next n]\n (if (zero? n)\n current\n (recur next (+ current next) (dec n))))]\n (fib 0 1 n))) (range 1 (inc %)))","problem":26,"user":"502a9fdee4b095a7adb898b4"},{"problem":26,"code":"(fn fibonacci [quantity]\n (take quantity (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) \n)","user":"5a99d28ee4b0d174b936c7b3"},{"code":"(fn nfibs [n]\n  (cond\n   (<= n 0) '()\n   (= n 1)  '(1)\n   (= n 2)  '(1 1)\n   :else (let [s (nfibs (dec n))]\n           (concat s (list (apply + (take-last 2 s)))))))","problem":26,"user":"530bf87ee4b02e82168697d5"},{"problem":26,"code":"(fn [x]\n  (loop [n 1\n         out []]\n    (if (> n x)\n      out\n      (recur (+ n 1) (if (< n 3)\n                       (conj out 1)\n                       (conj out (+ (last out) (first (rest (reverse out))))))))\n    ))","user":"56171eade4b06b1bb2182a0c"},{"code":"#(take % ((fn fib-seq [a b] (lazy-seq (cons a (fib-seq b (+ b a))))) 1 1))","problem":26,"user":"5004d5d0e4b0678c553fc456"},{"code":"(fn [x]\n  (letfn [(fib \n           ([]\n   (concat [0 1] (fib 0N 1N)))\n  ([a b]\n   (let [n (+ a b)]\n     (lazy-seq\n      (cons n (fib b n))))))]\n    (drop 1 (take (inc x) (fib)))))","problem":26,"user":"51857e64e4b0da5a5be3babe"},{"problem":26,"code":"(fn [times]\n  (loop [i 0 results '()]\n    (if (= i times)\n      (reverse results)\n      (recur (inc i) (conj results \n                           (if \n                             (< (count results) 2) \n                             1 \n                             (+ (first results) (fnext results))))))))","user":"53f5f740e4b0db01ade6f9d8"},{"problem":26,"code":"(fn fibs [n]\n (letfn [(step [[a b]] [b (+ a b)])\n         (fib-seq [] (map first (iterate step [1 1])))]\n  (take n (fib-seq))))","user":"606b16b8e4b069485764ddf7"},{"code":"#(take % (map first  (iterate (fn [ [a b] ] [b (+ a b)]) [1 1])))","problem":26,"user":"52808897e4b0757a1b171404"},{"problem":26,"code":"#(loop [i 0 limit % s [1 1]]\n   (if (< i (- limit 2))\n     (recur (inc i) limit (cons (+ (first s) (second s)) s))\n     (reverse s)))","user":"55d1ec3ee4b0e31453f64a4c"},{"problem":26,"code":"(fn [x]\n  (loop [c [1] i (dec x)]\n    (if (> i 0)\n      (recur (concat c [(apply + (take-last 2 c))]) (dec i))\n      c\n      )\n    )\n  )","user":"577ab41fe4b0d3393e5deb05"},{"problem":26,"code":"(fn fib [x]\n    (cond\n      (number? x) ( condp = x\n        0 '()\n        1 '(1)\n        (concat (fib (- x 1)) \n                (list (fib (list (- x 1)) )))\n      )\n      :else (condp = (first x)\n        0 1\n        1 1\n        (+  (fib (list (- (first x) 1))) \n            (fib (list (- (first x) 2))))        \n      )\n    )\n  )","user":"5e1d01b5e4b0dc9594008542"},{"problem":26,"code":"(fn [num] (loop [fibnum 1 nextfibnum 1 fibseq []] (if (= (count fibseq) num) fibseq (recur nextfibnum (+ fibnum nextfibnum) (conj fibseq fibnum)))))","user":"56fbcc1fe4b07572ad1a88d5"},{"code":"#(reverse (loop [a 1 b 1 c '(1 1)]\n              (if (= (count c) %)\n                 c\n                 (recur b (+ a b) (conj c (+ a b)))\n              )\n           )\n )","problem":26,"user":"51d28e15e4b0d13b04db0d9b"},{"code":"(fn [n]\r\n  (let [fibs (fn fibs\r\n               ([] (cons 1 (fibs 0 1)))\r\n               ([a b] (lazy-seq (cons (+ a b) (fibs b (+ a b))))))]\r\n  (take n (fibs))))","problem":26,"user":"4e049a06535d04ed9115e7a0"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b]\n            (lazy-seq\n              (cons\n                b\n                (fib b (+ a b)))))]\n    (take n (fib 0 1))))","user":"56f9982ce4b07572ad1a88b8"},{"code":"(fn [time]\n  (loop [x1 0 x2 1 total time times 0 ret '()]\n    (if (= total times)\n      (reverse ret)\n      (recur\n        x2\n        (+ x1 x2)\n        total\n        (+ times 1)\n        (cons x2 ret)\n      )\n    )\n  )\n)","problem":26,"user":"4fc8f671e4b0ee37620e1840"},{"problem":26,"code":"(fn [n](reverse(nth\n (iterate \n \t#(conj % (+ (first %) (second %)))\n \t\t'(1 1) ) \n \t(- n 2))))","user":"5649615be4b0284900eef641"},{"code":"(fn [max]\n    (loop [i 1\n           fibonacci '[1]]\n      (if (< i max)\n        (recur (inc i) (conj fibonacci (reduce + (take-last 2 fibonacci)))) \n        fibonacci)))","problem":26,"user":"504f0036e4b0e7ad84dbc4aa"},{"problem":26,"code":"(fn [a] (loop [sumlist '() cnt a fst 1 scd 0] (if (zero? cnt) (reverse sumlist) (recur (conj sumlist (+ scd fst)) (dec cnt) scd (+ scd fst)))))","user":"54c93206e4b045293a27f65d"},{"code":"(fn [n]\n  (if (> n 0)\n    (loop [f '(1 1) n (- n 2)]\n      (if (= n 0)\n        (reverse f)\n        (recur (conj f (+ (first f) (second f))) (dec n))))\n    '(1)))","problem":26,"user":"4e8dc25f535d65386fec213a"},{"problem":26,"code":"(fn [x]\n  (reduce (fn [acc elt]\n            (if (< (count acc) 2)\n              (concat acc (list 1))\n              (concat acc (list (apply + (take-last 2 acc))))))\n          '()\n          (take x (repeat 1))))","user":"5c284f14e4b07e362c2305d6"},{"problem":26,"code":"(fn fib [n]\n        (cond\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          :else (let [f (fib (- n 1))]\n                  (concat f \n                          (list (+ (last f) \n                             (last (butlast f)))))\n                  )))","user":"5ca3695fe4b048ec896c5ba9"},{"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [f (fib (- n 1))]\n      (conj f (apply + (drop (- (count f) 2) f))))))","problem":26,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn F [x] (case x\n  0 []\n  1 [ 1 ]\n  2 [ 1 1]\n  (let [ xp (F (dec x) )]\n       (conj xp (+ (last xp) (-> xp butlast last) ) )\n  )\n))","problem":26,"user":"4e952463535dbda64a6f6b31"},{"code":"(fn [d]\n  (loop [a 1\n         b 1\n         c (- d 2)\n         res '(1 1)]\n    (let [n (+ a b)]\n      (if (pos? c)\n        (recur b n (dec c) (concat res (list n)))\n        res))))","problem":26,"user":"500e6ddee4b04a05d36fcc06"},{"problem":26,"code":"(fn [n] (loop [cnt (- n 2) res [1 1]] (if (zero? cnt) res (recur (dec cnt) (conj res (+ (last res) ((comp second reverse) res)))))))","user":"559a8816e4b066d22e731f41"},{"problem":26,"code":"(fn [num] (loop [n (- num 2) acc [1 1] last_two [1 1]] (if (pos? n) (let [next (reduce + last_two)] (recur (dec n) (conj acc next) [(second last_two) next])) acc)))","user":"542db41be4b0dad94371f2bb"},{"problem":26,"code":"#(loop [a 1\n        b 1\n        n (- % 2)\n        acc [1 1]]\n    (if (= n 0)\n      acc\n      (recur b (+ a b) (dec n) (conj acc (+ a b)))))","user":"543c5200e4b032a45b86933e"},{"code":"#(take %\n  (map first\n    (iterate\n      (fn [[x y]] [(+ x y) x])\n    [1 0])))","problem":26,"user":"4f062d4a535dcb61093f6c08"},{"code":"(fn fibo-seq [n]\n    (cond \n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else   (let [f (fibo-seq (dec n))\n                      r (reverse f)\n                      a (first r)\n                      b (first (rest r))]\n                 (conj f (+ a b)))))","problem":26,"user":"4e7263a1535d5021c1a8965f"},{"problem":26,"code":"#(reverse (loop [a 1 b 1 n % arr ()]\n            (if (zero? n)\n              arr\n              (recur b (+ a b) (dec n) (cons a arr))\n              )\n            )\n          )","user":"56814cbce4b0945ebc182a81"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4f047dbf535dcb61093f6bce"},{"problem":26,"code":"(fn fibo [n]\n  (loop [seq [1] a 1 b 1 i 1]\n    (if  (= i n)\n      seq\n      (recur (conj seq b) b (+ a b) (inc i)))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n        \t(cons a (lazy-seq (fib b (+ b a)))))\n        1 1)))","user":"54dbb21be4b024c67c0cf76f"},{"code":"#((fn fib [x p pp] \n  (if (zero? x) \n      () \n      (conj (fib (dec x) (+ p pp) p) (+ p pp) \n      )\n  )\n) % 0 1)","problem":26,"user":"4f706cc3e4b07046d9f4eff7"},{"problem":26,"code":"#(take % ((fn fib ([] (fib (bigint 1) (bigint 1))) ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"52ea7d3ae4b09f7907dd14bf"},{"code":"(fn fib [n]\n  (letfn [(next-pair [[a b]]\n            [b (+ a b)])]\n    (map first (take n (iterate next-pair [1 1])))))","problem":26,"user":"51ac6360e4b09397d510976c"},{"code":"#(nth (iterate (fn ([seed] (conj seed ( + (last seed) ((comp last butlast) seed))))) [1 1]) (- % 2))","problem":26,"user":"5119ef37e4b06c8af0111817"},{"problem":26,"code":"(fn fib [n]\n  (rest (take (inc n) ;; ignore the leading 0, but take n other values from the lazy sequence\n              ((fn re-fib [a b]\n                         (lazy-seq (cons a (re-fib b (+ a b))))) 0 1))))","user":"5705f569e4b0b0fb43fd0677"},{"code":"#(map (fn [N] (loop [i 0\n                     fib-i-1 0\n                     fib-i 1]\n                (if (= i N)\n                  fib-i\n                  (recur (inc i) fib-i (+ fib-i-1 fib-i))))) (range %))","problem":26,"user":"531b641ce4b08068f379ed8e"},{"problem":26,"code":"(fn fib \n  ([x] (reverse(fib '(1 1) (- x 2))))\n  ([s i] (cond (= i 0) s\n               :else (fib (cons (+ (first s) (second s))s) (- i 1)))))","user":"578163bee4b0d36ec5835e85"},{"code":"(fn [c] (take c (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f7c0ab8e4b06e829148e1ac"},{"problem":26,"code":"(fn fib [x]\n  (loop [a 0\n         b 1\n         n x\n         r [1]]\n    (if (= n 1)\n      r\n      (recur b (+ a b) (- n 1) (conj r (+ a b))))))","user":"56ee0691e4b04a395b9a044c"},{"code":"(fn [num]\n  (reduce\n    #(if (= 0 %2)\n      (conj % 1)\n      (conj % (+ (nth % (- %2 1) 0) (nth % (- %2 2) 0))))\n    [] (range num)))","problem":26,"user":"4ecd912e535d23f036227706"},{"problem":26,"code":"(fn [stop]\n  (loop [first 1\n         second 1\n         acc ()\n         s stop]\n    (if (zero? s)\n      (reverse acc)\n      (recur second (+ first second) (conj acc first) (dec s)))))","user":"57a1f401e4b0c3d858beb8f4"},{"problem":26,"code":"(fn [i] (rest (reduce (fn [acc el] (conj acc (+ (last acc) (get acc (- (count acc) 2) )) )) [0 1] (range (- i 1)))))","user":"5ae56da2e4b0837691e92c8f"},{"code":"(fn [n] \n  (letfn [ (fib [] \n          (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))]\n  (take n (fib))))","problem":26,"user":"4ed60c9c535d10e5ff6f52dd"},{"problem":26,"code":"(fn f [n]\n  (let [fib (fn fib [i]\n              (cond\n                (< i 2) 1\n                :else (+ (fib (- i 1)) (fib (- i 2)))))]\n    (map fib (range 0 n))))","user":"55274467e4b0ffed3738f92b"},{"problem":26,"code":"(fn fib [n] \n  (case n \n    (1) '(1)\n    (2) '(1 1)\n    (let [fv (fib (- n 1))]\n       (concat fv [(+ (last fv) ( last (butlast fv)))]))))","user":"55f04526e4b06e875b46ce20"},{"problem":26,"code":"#(loop [i (dec %) a 0 b 1 r [1]] \n   (if (> i 0)\n     (recur (dec i) b (+ a b) (conj r (+ a b)))\n     r))","user":"4f1ef6a0535d64f60314649b"},{"problem":26,"code":"(fn [n]\n    (loop [i 0 xs []]\n      (if (< i n)\n        (if (< i 2)\n          (recur (+ 1 i) (conj xs 1))\n          (recur (+ 1 i) (conj xs\n                          (+ (nth xs (- i 1))\n                             (nth xs (- i 2))))))\n        xs)))","user":"57a5da5ee4b0a966079561fe"},{"code":"#(take % (map first (iterate \n    (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ec53831535d6d7199dd3684"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)] ) [1 1])))","problem":26,"user":"4e44510b535dc968683fc4aa"},{"code":"(let [fib-pair (fn [[a b]] [b (+ a b)])]\n  #(->> [1 1] (iterate fib-pair) (map first) (take %)))","problem":26,"user":"52cca96ae4b07d0d72b2736e"},{"code":"(fn [x] (take x (map first (iterate (fn [[a,b]] [b (+ a b)]) [1 1] ))))","problem":26,"user":"4ea11921535d7eef308072af"},{"problem":26,"code":"(fn [n] \n  (loop [acc [] i n a 1 b 1]\n    (if-not (> i 0) acc (recur (conj acc a) (dec i) b (+ a b)))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":26,"code":"#(last (take (dec %) (iterate (fn [fib] (let [s (reverse fib) f1 (first s) f2 (second s)] (conj fib (+ f1 f2))) ) [1 1])))","user":"57c6aa0be4b05aa3c4741cf7"},{"problem":26,"code":"(fn [n]\n  (loop [a 0 \n         b 1 \n         i n \n         r []]\n    (if (<= i 0)\n      (seq r)\n      (recur b (+ a b) (dec i) (conj r b)))))","user":"5b799354e4b047b03b203706"},{"code":"(fn [x]\n  ((fn do-things [a b n]\n    (if (= n 0)\n      '()\n      (cons b \n            (do-things b \n                       (+ a b) \n                       (dec n))))) 0 1 x))","problem":26,"user":"4f5c344be4b0030a34fb2b1d"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib \n         ([]\n           (fib 1 1))\n         ([a b]\n           (lazy-seq (cons a (fib b (+ a b)))))))))","user":"5c72c2b9e4b0fca0c16227ab"},{"problem":26,"code":"#(take\n %\n (map\n  first\n  (iterate\n   (fn [[x y]]\n    [y (+ x y)])\n   [1 1])))","user":"55381162e4b09218d5f44fda"},{"code":"(fn [length]\n  (loop [sequence [1]\n         i 0\n         n-1 0\n         n 1]\n    (if (< i (- length 1))\n      (recur (conj sequence (+ n n-1))\n             (inc i)\n             n\n             (+ n n-1))\n      sequence))\n  )","problem":26,"user":"537d366de4b06839e8705e87"},{"problem":26,"code":"(fn [n]\n  (loop [cnt 1\n         a 1\n         b 1\n         acc (list 1)]\n    (if (= cnt n)\n      (reverse acc)\n      (recur (inc cnt)\n             b\n             (+ a b)\n             (conj acc b)))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":26,"code":"(fn [x]\n  (reverse \n   ((fn fib [len]\n    \t(if (= len 2) \n          '(1 1)\n          (#(conj % (+ (first %) (second %)) ) (fib (- len 1)) )\n         )\n     ) \n    x)\n   ))","user":"554a270fe4b0a04f79299570"},{"code":"(fn fib [n] (take n \n  (map first (iterate (fn [ [a b] ] [b (+ a b)]) [1 1]))))","problem":26,"user":"504dff92e4b078edc5f5938a"},{"problem":26,"code":"(fn[x]\n(loop [counter x final [] a 1 b 0]\n(if (zero? counter) final\n(recur (dec counter) (conj final a) (+ a b) a)\n      )))","user":"55e2004de4b050e68259b426"},{"code":"(fn fib [n]\n  (cond \n    (zero? n) '() \n    (= 1 n) '(1)\n    (= 2 n) '(1 1)\n    :else \n      (loop [cnt (- n 2) coll '(1 1)]\n      (if (zero? cnt)\n          (reverse coll)\n        (recur (dec cnt) (conj coll (+ (first coll) (second coll))))))))","problem":26,"user":"4fea7594e4b0140c20fb9c06"},{"code":"#(loop [x [1 1] y 2 z %] \n   (if (== 3 z) \n     (conj x y) \n     (recur (conj x y) (+ (last x) y) (dec z))\n    )\n  )","problem":26,"user":"51beb32ae4b013aa0d74b7fd"},{"code":"(fn [n] (rest (reverse (reduce (fn [a b] (conj a (+ (first a) (second a)))) '(1 0) (range (- n 1))))))","problem":26,"user":"50696bace4b01dc6af13f830"},{"code":"(fn [x]\n   (letfn [(fib-seq [a b] (lazy-seq (cons a (fib-seq b (+ a b)))))]\n      (let [fib (fib-seq 1 1)]\n        (take x fib))))","problem":26,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":26,"code":"(fn my-fibonacci\n    ([n]\n     (if (= n 0)\n       []\n       (my-fibonacci n 1 [1])\n       )\n      )\n    ([n i fibs]\n     (if (= i n)\n       fibs\n       (recur n (inc i) (conj fibs (+ (nth fibs (- i 1) 0) (nth fibs (- i 2) 0))))\n       )\n      )\n    )","user":"59fa5fe0e4b0ca45a743a35f"},{"problem":26,"code":"(fn fib [x]\n  (case x\n    1 [1]\n    2 [1 1]\n    (let [last-fib (fib (dec x)) ]\n      (conj last-fib (+ (last last-fib) (last (butlast last-fib)))))))","user":"542a7c9be4b01498b1a71b41"},{"problem":26,"code":"(fn [n]\n  (take n\n    (map first\n      (iterate (fn [[x y]] [(+ x y) x])\n[1 0]))))","user":"5694284de4b0dcc4269f410f"},{"code":"(fn fib\n  ([n]\n    (fib (- n 2) [1 1]))\n  ([n seq]\n    (if (zero? n) seq\n        (fib (dec n)\n             (conj seq\n               (reduce +\n                 (take-last 2 seq)))))))","problem":26,"user":"50970f51e4b00ad8bab4e950"},{"code":"(fn fib-iter\n       ([curList a b curCount]\n              (if (= curCount 0)\n                  curList\n                  (fib-iter (concat curList [a]) (+ a b) a (- curCount 1))))\n       ([n] (fib-iter [] 1 0 n)))","problem":26,"user":"4f03b3fb535dcb61093f6b52"},{"problem":26,"code":"(fn [n]\n    (#(if (= 1 %2)\n       (reverse %1)\n       (recur\n         (conj %1 (+ %3 %4))\n         (dec %2)\n         %4\n         (+ %3 %4)))\n      '(1) n 0 1))","user":"56503470e4b0284900eef6ba"},{"problem":26,"code":"#(loop [c (- % 2) res '(1 1)]\n            (if (= 0 c) (reverse res) (recur (dec c) (conj res (+ (first res) (second res)))))\n            )","user":"555c38d9e4b0b056612e2249"},{"problem":26,"code":"(fn [n] (reverse (drop 2 (nth (iterate #(conj % (+ (first %) (second %))) '(1 1)) n))))","user":"5424f5c3e4b01498b1a71b06"},{"problem":26,"code":"#(reduce \n (fn \n  [acc x] \n  (conj \n   acc \n   (+ \n    (last acc) \n    (last (butlast acc)))))\n   [1 1] \n   (range (- % 2)))","user":"54a1c22fe4b09f271ff37c4c"},{"code":"#(take % ((fn fib \n  ([] (fib 1 1)) \n  ([a b] (cons a (lazy-seq (fib b (+ b a))))))))","problem":26,"user":"50f53694e4b057d4c52de881"},{"problem":26,"code":"(fn fibonacci-list [n]\n  (if (= n 1)\n    [1] \n    (if (= n 2)\n      '[1 1]\n      (conj \n        (fibonacci-list (dec n))\n        (+ (last (fibonacci-list (dec n)))\n           (last (fibonacci-list (- n 2))))))))","user":"573c57ace4b0cd1946bd10c0"},{"code":"(fn[x](take x \n            (map last \n                 (iterate \n                  (fn[[x y]][y (+ x y)])\n                  \t[0 1]))))","problem":26,"user":"529952a4e4b02ebb4ef75081"},{"code":"(fn fib\n  [n]\n  (if (= 2 n)\n    '[1 1]\n    (let [short (fib (- n 1))]\n      (conj short (reduce + (take-last 2 short))))))","problem":26,"user":"512e58cae4b0b740abc59825"},{"problem":26,"code":"#((fn [cnt x y coll] (if (= cnt 0) coll (recur (dec cnt) y (+ x y) (conj coll x)))) % 1 1 [])","user":"58172161e4b0c0e9c07b8389"},{"problem":26,"code":"#(map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib (- n 1)) (fib (- n 2))))))\n\t  (range 1 (+ % 1)))","user":"52ba2639e4b07a9af57922cb"},{"problem":26,"code":"(fn [n] \r\n  (letfn [(fib [i] \r\n                (cond \r\n                  (= 1 i) 1\r\n                  (= 2 i) 1\r\n                   :else (+ (fib (- i 1)) (fib (- i 2)))\r\n                  ))\r\n          ]\r\n    (map fib (range 1 (inc n)))\r\n    )\r\n  )","user":"56ebe773e4b04a395b9a042a"},{"problem":26,"code":"(fn [n]\n   ((fn fib [a b n acc]\n     (if (= n 0) acc\n         (fib b (+ a b) (- n 1) (conj acc a)))) 1 1 n []))","user":"5fb544f6e4b08cb800c85b4e"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b)))))1 1 )))","user":"544faecfe4b0e39780006996"},{"problem":26,"code":"(fn x [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"58eed4c5e4b056aecfd47db7"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 0) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    (> n 2) (loop [i 3\n                   r [1 1]]\n;              (println i r)\n              (if (> i n)\n                r\n                (recur (+ i 1) (conj r (reduce + (take-last 2 r))))))\n    )\n)","user":"5d6fae1ee4b04d129b00f2d4"},{"code":"(fn [x] (rest (take (+ 1 x) ((fn fibs ([] (concat [0 1] (map + (lazy-seq (fibs)) (lazy-seq (rest (fibs)))))))))))","problem":26,"user":"518ec633e4b0cd6ff516769e"},{"code":"(partial (fn fibn [x n]\n                          (loop [a 1 b 1 x x n n]\n                            (cond (= n 0) x\n                                  :else\n                                  (recur b (+ a b) (conj x a) (dec n))))) [])","problem":26,"user":"524a74b3e4b05ef8e38e64a7"},{"problem":26,"code":"(fn [n]\n    (take n '(1 1 2 3 5 8 13 21)))","user":"5c250900e4b07e362c2305ab"},{"problem":26,"code":"(fn\n  [el]\n  (loop [cur     1\n         prev    0\n         results []\n         el      el]\n    (if (= el 0)\n      results\n      (recur (+ cur prev) cur (conj results cur) (dec el)))))","user":"5d51216ae4b0776584bd6f5b"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [x]\n            (if (<= x 1)\n              x\n              (+ (fib (- x 2)) (fib (- x 1)))))]\n    (map fib (range 1 (+ n 1)))))","user":"5f313d01e4b0574c87022c28"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1) [1]\n    (if (= x 2) [1 1]\n      (let [f (fib (- x 1))]\n        (concat f [(+ (last f) \n                      (last (drop-last f)))])\n        )\n      )\n    )\n  )","user":"598a4ff7e4b02b9968b84cda"},{"problem":26,"code":"(fn fibneu\n  [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else (loop [i 3 r [1 1] m1 1 m2 1]\n            (if (= x i)\n              (conj r (+ m1 m2))\n              (recur (inc i) (conj r (+ m1 m2)) (+ m1 m2) m1)))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"#(loop [i (- % 2) vec [1 1] acc 1]\n  (if (<= i 0) \n    vec \n    (recur (dec i) (conj vec (+ (last vec) acc)) (last vec))))","problem":26,"user":"5301a13ae4b0d8b024fd371e"},{"code":"(fn fib \n  ([n] (if (= n 1) '(1) (if (= n 2) '(1 1) (cons 1 (cons 1 (fib n 2 1 2)))))) \n  ([n cur p1 p2] (if (= n cur) '() (cons p2 (fib n (inc cur) p2 (+ p1 p2))))))","problem":26,"user":"533e45a7e4b085b17e897d8c"},{"code":"#(reverse \n  (loop [fibs '(1 1) n %]\n    (if (zero? n) \n      (rest (rest fibs)) \n      (recur (conj fibs (+ (first fibs) (second fibs))) (dec n)))))","problem":26,"user":"4fe8a1f8e4b07c9f6fd12c5f"},{"problem":26,"code":"(fn fib [x] (loop [cnt 1 vec [1 1]] (if (= cnt (dec x) ) (list* vec) (recur (inc cnt) (conj vec (reduce + (take-last 2 vec) )) ))))","user":"53cf88c9e4b00fb29b2212fe"},{"problem":26,"code":"#(loop [x '(1) i 1 n %]\n  (if (= i n)\n    x\n    (recur \n     (reverse (conj (reverse x) (reduce + (take-last 2 x)) ) )\n     (inc i)\n     n\n    )\n  )\n)","user":"5992de05e4b0866487ed0d7e"},{"code":"(fn [n]\r\n  (loop [f [1 1]\r\n         s 1]\r\n        (if (= (count f) n)\r\n            f\r\n            (recur (conj f (+ (last f) s))\r\n                   (last f))\r\n          )))","problem":26,"user":"4ea09441535d7eef308072a7"},{"code":"(fn [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (loop [x (- x 2) a 1 b 1 fibs '(1 1)]\n        (if (zero? x)\n          fibs\n          (recur (dec x) b (+ a b) (concat fibs (vector (+ a b)))))))))","problem":26,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [n] (reduce (fn [arr, n] (conj arr (+ (last arr) (first (take-last 2 arr))))) [1 1] (range (dec (dec n)))))","problem":26,"user":"52f84c94e4b047fd55836fcf"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))] (take n (fib 1 1))))","user":"54cd651be4b057c6fda3a2a2"},{"problem":26,"code":"(fn [num-desired]\n    (loop [completed-list [1]]\n      (if (>= (count completed-list) num-desired)\n        completed-list\n        (recur (conj completed-list (apply + (take-last 2 completed-list)))))))","user":"60bf6452e4b0e0fa5f1b4295"},{"code":"(fn [fibn] \r\n  (loop [n fibn res [1 1]]\r\n    (if (= n 2) res\r\n     (let  [last (dec (count res))] \r\n                  (recur (dec n) (conj res  (+ (res (dec last)) (res last))))))))","problem":26,"user":"4f29cdc8e4b0d6649770a033"},{"problem":26,"code":"(fn \n [i]\n (letfn \n  [(fib\n    [n]\n    (if (or (= n 1) (= n 2))\n        1\n        (+ (fib (- n 1))\n           (fib (- n 2)))))]\n  (map fib (range 1 (inc i)))))","user":"578df8fee4b0ebec4cfb7574"},{"problem":26,"code":"(fn fib-mf2 [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take n)))","user":"5f9f0e77e4b0715f5002d83b"},{"problem":26,"code":"(fn [n]\n  (when (<= n 0) [])\n  (when (= 1 n) [1])\n  (loop [i 2 result [1 1]]\n    (if (= i n)\n      result\n      (recur (inc i) \n             (conj result (+ (get result (dec i)) (get result (- i 2))))))))","user":"5d0b210ee4b0cc9c9158822b"},{"problem":26,"code":"#(apply list\n  (loop [res [0 1]]\n   (if (> (count res) %)\n    (next res)\n    (recur (conj res (+ (last (drop-last res)) (last res)))))))","user":"577caf73e4b0c8d87281f6c6"},{"problem":26,"code":"(fn fib\n  ([n] (fib 1 1 n))\n  ([n1 n2 n]\n   (if (= n 0) ()\n     (concat (conj () n1) (fib n2 (+ n1 n2) (- n 1)))\n     )\n   )\n  )","user":"560c404fe4b05f002753df30"},{"code":"#(take % (map first\n              (iterate (fn [[a b]] [b (+ a b )]) \n                       [1 1])))","problem":26,"user":"50d86fe2e4b01f0871336e67"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) '(1 1))))","user":"56a1c646e4b0542e1f8d14b3"},{"code":"#(drop-last (- 8 %) '(1 1 2 3 5 8 13 21))","problem":26,"user":"4df7cb14535d04ed9115e776"},{"code":"(fn [n] \n  (take n ((fn fib [a b] \n                  (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"4ff769bce4b0678c553fc38f"},{"problem":26,"code":"(fn [n] (take n (map last(iterate (fn [[x y]] [y (+ x y)]) [0 1]))))\n\n;;#(take % (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1])))","user":"573ddfc2e4b05c31a32c081b"},{"code":"(fn fib\n  ([] (cons 1N (cons 1N (lazy-seq (let [fs (fib)] (map + fs (rest fs)))))))\n  ([n] (take n (fib))))","problem":26,"user":"5095f761e4b0ba05ca7aebfd"},{"problem":26,"code":"#(map (fn f ([x] (if (< x 2) 1 (+ (f (- x 1)) (f (- x 2)))))) (range %))","user":"56fdd9a1e4b08d47c97781a8"},{"problem":26,"code":"(fn fibonacci [n]\n  (if (= n 1) '(1)\n    (if (= n 2) '(1 1)\n      (reverse (loop [x    n\n             res  (list 1 1)]\n        (if (= x 2) res (recur (dec x) (conj res (+ (first res) (second res))))))))))","user":"56a94562e4b07966d5a8a074"},{"problem":26,"code":"(fn [n]\n  (take n \n    ((fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs))))))\n  )\n)","user":"54aad6c0e4b09f271ff37cbc"},{"problem":26,"code":"(fn [x]\n  (loop [i 0 F '()]\n    (cond\n      (= i x) F\n      (= i 0) (recur 1 '(1))\n      (= i 1) (recur 2 '(1 1))\n      :else (recur (inc i) (concat F (list (+ (last F) (last (butlast F))))))\n    )\n  )\n)","user":"5f574662e4b0a0bc16850a90"},{"code":"(fn fib [n] (cond (= n 1) '(1)\n                  (= n 2) '(1 1)\n                  :else (let [f (fib (- n 1))] (concat f (list (+ (last f) (second (reverse f))))))\n))","problem":26,"user":"4f039f14535dcb61093f6b3e"},{"problem":26,"code":"#(take % (->> [1 1]\n              (iterate (fn [[a b]] [b (+ a b)]))\n              (map first)))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":26,"code":"#(map first (take %(iterate (fn [[a b]][b (+ a b)]) [1 1])))","user":"53ada652e4b047364c04446d"},{"problem":26,"code":"(fn f\n    ([c]\n     (take c (cons 1 (cons 1 (f 1 1)))))\n    ([x y]\n     (lazy-seq (cons (+ x y) (f y (+ x y))))))","user":"52e1c276e4b09f7907dd142b"},{"code":"#(take %\n  (map first \n       (iterate \n         (partial apply (fn [c p] [(+ p c) c])) \n         [1 0]\n       )\n  ))","problem":26,"user":"51473a70e4b0d520409ed394"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] (lazy-seq (cons b (fib b (+ a b))))) 0 1)))","user":"566e3af2e4b0a866af6896d5"},{"code":"(fn [y]\n(loop [x (- y 2) xs '(1 1)]\n  (if (> x 0)\n    (recur (dec x) (conj xs (reduce + (take 2 xs))))\n    (reverse xs))))","problem":26,"user":"51004dabe4b0e0dde55c17f0"},{"problem":26,"code":"(fn [n] (loop [i 1 ys [1] fib1 0 fib2 1] (if (= i n) ys (recur (inc i) (conj ys (+ fib1 fib2)) fib2 (+ fib1 fib2)))))","user":"57b65420e4b0fbc9809a27be"},{"problem":26,"code":"#(loop [result [1] cur 1 cntr %]\n   (cond\n    (= cntr 1) result\n    (= cntr 2) (conj result cur)\n    :else (recur (conj result cur) (+ (last result) cur) (dec cntr))))","user":"564a5a09e4b0284900eef656"},{"problem":26,"code":"(fn fib-seq [x]\n  (cond (= x 1) '(1)\n        (= x 2) '(1 1)\n        (>= x 3) (loop [out '(1 1)]\n                       (if (= (count out) x) out\n                           (recur (concat out [(reduce + (take-last 2 out))]))))))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":26,"code":"#(loop [lst [1 1] n %] (if (= (count lst) n) lst (recur (conj lst (+ (last lst) (nth lst (dec (dec (count lst)))))) n)))","user":"5979cd36e4b02382a38ad1d8"},{"problem":26,"code":"(fn [n] (take n (map first(iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"problem":26,"code":"(fn [n]\n    (reverse\n     (loop [a 1, b 1, acc '(1)]\n       (if (>= (count acc) n)\n         acc\n         (recur b (+ a b) (conj acc b))))))","user":"529e3258e4b04e0c58e87b8d"},{"code":"(fn static-fib [n] (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4fa4f2f2e4b081705acca1aa"},{"problem":26,"code":"#(loop [fib [1 1] i 2]\n   (if (= i %)\n     fib \n     (recur (conj\n             fib \n             (+ (last fib)\n                (last (butlast fib)))) \n            (inc i))))","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"#(loop [s '(1 1) n 2] (if (>= n %) (reverse s) \n                        (recur (cons (+ (first s) (second s)) s) (inc n))))","problem":26,"user":"51b90b88e4b050a1176cd6a2"},{"problem":26,"code":"(fn [n]\n  (loop [z [1 1]]\n    (if (>= (count z) n)\n      (apply list z)\n      (recur (conj z (apply + (take-last 2 z)))))))","user":"59a80652e4b0bcf4e9a43aeb"},{"code":"(fn [x] (nth (iterate #(concat % [(reduce + (take-last 2 %))]) '(1 1)) (- x 2)))","problem":26,"user":"5319d9ade4b08068f379ed84"},{"problem":26,"code":"(fn fibonacci [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5f96fa49e4b0715f5002d7e9"},{"code":"(partial (fn [coll val prev n]\n (if (< n 0)\n (rest (reverse coll))\n (recur (conj coll val) (+ val prev) val (dec n))))\n'() 0 1)","problem":26,"user":"506929ffe4b01dc6af13f82b"},{"code":"(fn n-fib [x]\n  (map (fn fib [n] \n      (cond \n        (= 0 n) 0 \n        (= 1 n) 1                              \n        :else (+ (fib (- n 1)) (fib (- n 2)))))\n    (rest (range (inc x)))))","problem":26,"user":"503bb73de4b07a1917cc34e2"},{"problem":26,"code":"(fn fib \n  ([n] (fib n 0 1))\n  ([n prev cur]\n   \t(if (<= n 0)\n      nil\n   \t(cons cur (lazy-seq (fib (dec n) cur (+ cur prev)))))))","user":"5820cc33e4b04b46fc4b0f60"},{"problem":26,"code":"#(reverse (first (drop %\n           (iterate\n             (fn [fibseq]\n              (let [next (if (< (count fibseq) 2)\n                             1\n                             (+ (nth fibseq 0) (nth fibseq 1)))]\n                (cons next fibseq)))\n              nil))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":26,"code":"#(loop [a 1\n         b 1\n         r []\n         c 1]\n    (if (= c %)\n      (conj r a)\n      (recur b\n             (+ a b)\n             (conj r a)\n             (inc c))))","user":"5466aabbe4b01be26fd746e8"},{"code":"#(take % ((fn fib[x y](cons x (lazy-seq(fib y (+ x y))))) 1 1))","problem":26,"user":"50b2e824e4b03ea880433567"},{"code":"(fn [n]\n  (loop [cnt (- n 2) fib [1 1]]\n    (println \"I am on\" cnt)\n    (if (zero? cnt)\n      fib\n      (recur (dec cnt) (conj fib (+ (last fib) (last (butlast fib))))))))","problem":26,"user":"51547920e4b084ca81ee2e1c"},{"code":"(fn [n] (take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"4e50b67b535dc968683fc4ed"},{"problem":26,"code":"(fn [n]\n  (loop[l '() a 0 b 1 i 0]\n    (if (= i n)\n      (reverse l)(recur\n        (conj l b) b (+' a b) (inc i)))))","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn f [a b n] (if (> n 0) (cons a (f b (+ a b) (dec n))))) 1 1","problem":26,"user":"535526a2e4b04ce2eb3ed259"},{"problem":26,"code":"#(letfn [(fib-seq []\n    ((fn rfib [a b] \n        (cons a (lazy-seq (rfib b (+ a b)))))\n            1 1))]\n    (take % (fib-seq)))","user":"55306b8ae4b076ab5578f812"},{"problem":26,"code":"(fn [x] (if (> 3 x)\n  (take x '(1 1))\n  (loop [l '(1 1)\n         c 2]\n    (if (= x c)\n      (reverse l)\n      (recur (conj l (+ (first l) (second l))) (inc c))\n      ))))","user":"5c308385e4b0d62ef62d9f1c"},{"code":"(fn [n]\n  (letfn [(helper [y a b fs]\n            (if (= y 0)\n              fs\n              (helper (- y 1) b (+ a b) (conj fs b))))]\n    (helper n 0 1 [])))","problem":26,"user":"4fb804f7e4b081705acca2d6"},{"code":"(fn [n]\n  (if (= n 1) '(1)\n  (loop [out [1 1] n (- n 2)]\n    (if (= n 0) out\n      (recur (conj out (+ (last out) (last (butlast out)))) (dec n))))))","problem":26,"user":"51c342e9e4b0851ac09658f3"},{"code":"(fn flist [xx]\n   (letfn [(fib [yy]\n   (cond (= 1 yy) 1 \n         (= 2 yy) 1 \n    :else (+ (fib (dec yy)) (fib (- yy 2)))))]\n   (cond (= 0 xx) nil\n         :else (sort (conj (flist (dec xx)) (fib xx))))\n   ))","problem":26,"user":"5325cf91e4b09d4e7a9b54e8"},{"problem":26,"code":"(fn fib [x] \n        (if (= x 2) '(1 1)\n          (let [a (fib (- x 1))]\n            (concat\n             a\n             (list (+ (last a) (nth a (- (count a) 2))))))))","user":"57fc4a63e4b0d3187e900993"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]]\n    (if (= n (count res))\n      res\n      (recur (conj res (+ (last res) (last (butlast res))))))))","user":"58254a11e4b051871117bed9"},{"problem":26,"code":"#(letfn [(impl [n lst x0 x1] (if (== n 0) lst (impl (- n 1) (conj lst x1) x1 (+ x0 x1))))] (impl % [] 0 1))","user":"55c20bd0e4b0e31453f64972"},{"problem":26,"code":"#(loop [x % y [1 1] c %] (if (< x 3) (take c y) (recur (dec x) (conj y (+ (first (reverse y)) (second (reverse y)))) c)))","user":"5ae47c1de4b0837691e92c81"},{"code":"(fn [x]\r\n  (letfn [(fib [x acc]\r\n            (if (= x 0)\r\n                acc\r\n                (recur (- x 1) (cons (+ (first acc)\r\n                                        (second acc))\r\n                                        acc))))]\r\n    (reverse (fib (- x 2) '(1 1)))))","problem":26,"user":"4fb37882e4b081705acca2a0"},{"problem":26,"code":"(fn fib [n]\n  (loop [fib '(1 0) m 1]\n    (if (= m n)\n      (rest (reverse fib))\n      (recur (conj fib (+ (first fib) (second fib))) (inc m)))))","user":"5d68fc2fe4b0db5d338d1606"},{"problem":26,"code":"(fn fib[n]\n  (loop [a 1 b 1 s n result []]\n    (if (= s 0)\n      result\n      (recur b (+ a b) (dec s) (conj result a)))))","user":"52aaabf7e4b0c58976d9ac68"},{"code":"#(->> (iterate (fn [[a b]] [b (+ a b)] ) [0 1])\n     (take %)\n     (map second))","problem":26,"user":"539c54b3e4b0b51d73faaf27"},{"code":"(fn fib [x]  \n  (cond \n    (< x 2) '(1)\n    (< x 3) '(1 1)\n    (> x 2)  (conj ( vec (fib(- x 1))) \n              (+\n                (last (fib(- x 1)))\n                (second(reverse (fib(- x 1)))))\n            )))","problem":26,"user":"5045ac21e4b01f6c9a8b2371"},{"problem":26,"code":"#(loop [x 2 r [1 1]]\n   (cond\n    (= % 1) [1]\n\t(= % x) r\n    :else (recur (inc x) (conj r (reduce + (take-last 2 r))))))","user":"56815e2fe4b0945ebc182a84"},{"problem":26,"code":"(fn \n  [firstX]\n  (loop [counter 2\n         outSeq  [1 1]\n         n-curr  1\n         n-prev  1]\n    (if (< counter firstX)\n      (recur (inc counter) (conj outSeq (+ n-curr n-prev)) (+ n-curr n-prev) n-curr)\n      outSeq)))","user":"5b69bf95e4b0c6492753e790"},{"code":"(fn my-fib\n  ([n] (if (zero? n) '() \n           (if (= n 1) '(1) \n               (my-fib '(1 1) (- n 2)))))\n  ([[a b & xs :as s] n] \n    (if (zero? n) (reverse s)\n        (recur (conj s (+ a b)) (dec n)))))","problem":26,"user":"4fe8d862e4b0547ebccb2428"},{"problem":26,"code":"(fn fib\n  ([n] \n   (fib [1 1] n))\n  ([x, n] \n   (if (< (count x) n) \n     (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n) x))\n)","user":"5de6c094e4b0986d99407f6f"},{"problem":26,"code":"(fn [n]\n  (cond\n     (== n 1) [1]\n     (== n 2) [1 1]\n     :else (loop [n n, fib [1 1]]\n             (cond \n               (> n 2) (let [pen (last (drop-last fib)),\n                             actual (+ pen (last fib))]\n                         (recur (dec n) (conj fib actual)))\n               :else fib))))","user":"556fe0fee4b09a3098a52525"},{"problem":26,"code":"(fn [target]\n\t(if (= target 1)\n\t\t'(1))\n\t(loop [prev 1 cur 1 i 1 lst '(1)]\n\t(if (= i target)\n\t\t(reverse lst)\n\t\t(recur cur (+ prev cur) (inc i) (conj lst cur)))))","user":"54a8fdcee4b09f271ff37ca9"},{"code":"(fn fib [n]\n  (if (< n 3) (repeat n 1)\n    (let [prev (fib (dec n))]\n      (concat prev [(+ (last prev) (last (butlast prev)))]))))","problem":26,"user":"4f61f05ae4b0defedf855fc9"},{"code":"#(take % (map first\n  (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f038499535dcb61093f6b09"},{"code":"(fn fibs [n] (take n [1 1 2 3 5 8 13 21]))","problem":26,"user":"535920b2e4b04ce2eb3ed294"},{"problem":26,"code":"(fn [n] (nth (iterate #(let [rev (reverse %)] (conj % (+ (first rev) (second rev)))) [1 1]) (- n 2)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]]\n                       [b (+ a b)]\n                       )\n                     [1 1])))","user":"5ea580a3e4b00a66d4a951a7"},{"code":"(fn [x]\r\n    (if (== x 1)\r\n      '(1))\r\n    (if (== x 2)\r\n      '(1 1))\r\n    (if (> x 2)\r\n      (loop [r '(1 1) c 2]\r\n        (if-not (== c x)\r\n          (recur (sort (conj r (+ (last r) (nth r (- (count r) 2))))) (inc c))\r\n           r))))","problem":26,"user":"4de08793535d08e6dec9fde2"},{"problem":26,"code":"(fn fib[n]\n  (loop [acc [0 1]\n         i 1]\n    (if (= i n)\n      (subvec acc 1)\n      (recur (conj acc (apply + (take-last 2 acc))) (inc i)))))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n       (take n)\n       (map last)))\n\n#_(fn [n]\n  (take n ((fn lp [a b]\n             (cons a (lazy-seq (lp b (+ a b))))) 1 1)))","problem":26,"user":"53684a2fe4b0243289761e8c"},{"code":"(fn [x] \n (take x (map first \n       (iterate \n         (fn [[a b]] [b (+ a b)]) \n         [1 1])\n       )))","problem":26,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"; First attempt: This actually computes the Nth\n; fibonacci number and not a sequence.  Desk slapping\n; mistake.\n;(fn fib [n]\n;  (if (< n 2)\n;    n\n;    (+ (fib (- n 1)) (fib (- n 2)))))\n\n; I realized iterate would need to be used and was\n; lucky that the clojuredocs.org entry for iterate\n; has a fibonacci example.  The one final item\n; was the addition of seq to have the fib fn return\n; a sequence.  take would have returned a lazy\n; sequence.\n(fn fib [n]\n  (seq (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))\n\n; NOTE: I need to work on clojure code formatting.\n; The solution above just doesn't seem to read well.","problem":26,"user":"4f831fd3e4b033992c121c17"},{"code":"(fn [n]\n        (map\n            (fn fibn [n]\n                (  \n                    (fn [n]\n                        (if (or (= n 0) (= n 1))\n                            1\n                            (+ (fibn (- n 1)) (fibn (- n 2))))) n))\n            (range n)))","problem":26,"user":"4ddb696b535d02782fcbe9fa"},{"problem":26,"code":"(fn [x]\n  (loop [cnt 0\n         b 0\n         a 1\n         xs []]\n    (if (< cnt x)\n      (do\n        (let [xsn (conj xs a)]\n        (recur (inc cnt) a (+ a b) xsn)))\n      xs)))","user":"5e1c24f4e4b0dc959400852d"},{"code":"(fn [n]\n  (take n ((fn helper [a b]\n            (cons a (lazy-seq (helper b (+ b a))))) 1 1)))","problem":26,"user":"5042bb9ae4b034ff00315d16"},{"code":"(fn [x]\n    (loop [res [] a 1 b 1 c x]\n      (if (< 0 c)\n        (recur (conj res a) b (+ a b) (dec c))\n        res)))","problem":26,"user":"4e8c1d97535d65386fec2127"},{"problem":26,"code":"(fn fibo\n  ([n]\n   (fibo n [1 1]))\n  ([n acc]\n   (if (< n 3)\n     (apply list acc)\n     (recur (dec n) (conj acc (+ (last acc) (last (butlast acc))))))))","user":"5d92b543e4b0915913b1d414"},{"code":"(fn [size]\n  (loop [iter (range 1 (+ 1 size)) n_1 1 n_2 1 result ()]\n    (if (seq iter)\n      (let [current (if (< (first iter) 3)\n                      1\n                      (+ n_1 n_2))]\n        (recur (rest iter) current n_1 (cons current result)))\n      (reverse result))))","problem":26,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":26,"code":"#(if (< % 3)\n   (take % (repeat 1))\n   (loop [l '(1 1) c (- % 2)]\n     (if (= 0 c)\n       (reverse l)\n       (recur (conj l (+ (first l) (second l)))\n              (dec c)))))","user":"5609866ee4b0053d1b86c7e3"},{"code":"(fn fib [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [xs (fib (- n 1))]\n                (conj xs (reduce + (take-last 2 xs))))))","problem":26,"user":"4fc04d75e4b081705acca324"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibs [] (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1])))]\n    (take n (fibs))))","user":"56499a5de4b0284900eef644"},{"problem":26,"code":"(fn fibb_i [n]\n  (cond (= n 0) []\n        (= n 1) [1]\n        (= n 2) [1 1]\n        true (conj (fibb_i (- n 1)) \n                   (+ (nth (fibb_i (- n 1)) (- n 3))\n                      (nth (fibb_i (- n 1)) (- n 2))\n                   )\n             )\n            \n  )\n)","user":"54d707bde4b0a52adc2e2025"},{"code":"(letfn [(fib [a b]\n     (lazy-seq\n       (cons a (fib b (+ a b)))))]\n   #(take % (fib 1 1)))","problem":26,"user":"507fe6fee4b089ade05efbd6"},{"problem":26,"code":"(fn fib\n  ([n] (fib n []))\n  ([n acc]\n   (let [ultimate (or (last acc) 1)\n         penultimate (or (last (butlast acc)) 0)]\n     (if (= 0 n)\n       acc\n       (recur (dec n) (conj acc (+ ultimate penultimate)))))))","user":"54cb378be4b057c6fda3a273"},{"problem":26,"code":"#(map(fn rfib [n]\n          (if (= n 0) 0\n              (if (or (= n 1) (= n 2)) 1\n                  (+ (rfib (- n 2)) (rfib (- n 1)) )\n                  ))\n          ) (range 1 (inc %)))","user":"53d8da61e4b0e771c3025471"},{"code":"(fn [n]\n  (loop [s [], x 0, y 1]\n    (if (= n (count s))\n      s\n     (recur (conj s y) y (+ x y)))))","problem":26,"user":"50aab057e4b056ee0193586b"},{"problem":26,"code":"#(reverse\n   (loop [xs '()\n          c 0]\n     (prn xs c)\n     (if (= c %) xs\n                 (if (< c 2)\n                   (recur (cons 1 xs) (inc c))\n                   (recur (cons (+ (first xs) (second xs)) xs) (inc c))\n                   ))\n     ))","user":"5896ade8e4b00487982d52a9"},{"problem":26,"code":"(fn [n]\n  (let [fibs (map (fn [pair] (first pair)) (iterate (fn [pair] [(last pair) (+ (first pair) (last pair))]) [1 1] ))]\n    (take n fibs)))","user":"580b216fe4b0a837a8b30d45"},{"problem":26,"code":"(fn [x]\n  (let [s (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))]\n    (rest (take (+ x 1) s))))","user":"594cb88be4b07ddc2dafae6e"},{"code":"(fn [n] (last (take (dec n) (iterate (fn [s] (let [a (last s) b (last (butlast s))] (conj s (+ a b)))) [1 1]))))","problem":26,"user":"521d709ae4b050d5da0427ef"},{"code":"(fn [n]\n  (loop [nums [1 1]]\n  (if (= (count nums) n)\n    nums\n    (recur\n      (conj nums\n          (+ (last nums)\n             (nth nums (- (count nums) 2))))))))","problem":26,"user":"4f88e3eee4b033992c121c72"},{"problem":26,"code":"(fn fib [n] (if (< n 3) [1 1] (#(conj % (+ (nth % (- n 2)) (nth % (- n 3)))) (fib (- n 1)))))","user":"5b465b8be4b02d533a91bc65"},{"problem":26,"code":"(fn\n  [number]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n       (map second)\n       (take number)))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [x] (if (< x 2)\n          1\n          (loop [final-seq [1 1]\n                 i 2]\n            (if (= x i)\n              final-seq\n              (let [left (- i 2)\n                    right (dec i)]\n                (recur (conj final-seq (+ (nth final-seq left) (nth final-seq right))) (inc i)))))))","problem":26,"user":"507a33dee4b08327cd804a68"},{"problem":26,"code":"(fn [i]\n  ((fn fib2 [start curr l]\n   (if (<= curr 1) \n     (fib2 start (+ curr 1) (conj l 1))\n     (if (< curr start) (fib2 start (+ curr 1) (conj l (reduce + (take-last 2 l)))) l)\n   ))\n  i 0 []))","user":"59e337dae4b08badc2a0c52d"},{"problem":26,"code":"(fn [x] (reduce\n           (fn [a b] (conj a (+' (last a) (last (butlast a)))))\n           [1 1]\n           (range (- x 2))))","user":"5ff5bc1ae4b06df49cee1490"},{"code":"(fn fibseries [index] (take index ((fn fibser [a b] (lazy-seq (cons a (fibser b (+ a b))))) 1 1)))","problem":26,"user":"537610eee4b06839e8705e1a"},{"code":"#(take %\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))\n    ) 1 1)\n  )","problem":26,"user":"4fc4f040e4b081705acca35a"},{"problem":26,"code":"(fn [n] (take n ((fn fib\n                               ([] (fib 1 1))\n                               ([a b] (lazy-seq (cons a (fib b (+ a b)))))\n                               ))))","user":"5be909bae4b0f319e2d7ec6d"},{"problem":26,"code":"#(loop [n % fib [1 1]]\n  (cond (zero? n) '()\n        (= n 1) (rest fib)\n        (= n 2) fib\n        :else (recur (dec n) \n               (conj fib (+ (last fib) (second (reverse fib))) \n  ))))","user":"5742d82ae4b05c31a32c0881"},{"code":"#(take % (map first(iterate (fn [[a b]] [b (+ a b)])[1 1])))","problem":26,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"(fn [n]\n  ((fn fib [seq n]\n    (if (= n 0)\n      seq\n      (fib\n        (if (< (count seq) 2)\n          (conj seq 1)\n          (conj seq \n            (+ \n              (last seq) \n              (nth seq (- (count seq) 2))\n            )\n          )\n        )\n        (- n 1)\n      )\n    )\n  ) [] n)\n)","problem":26,"user":"4fc4fe59e4b081705acca36a"},{"code":"#(for [x (range %) :let [y ((fn f [z] (if (< z 2) 1 (+ (f (- z 1)) (f (- z 2))))) x)]] y)","problem":26,"user":"5017f840e4b02f523d7cc5e8"},{"problem":26,"code":"(fn fibonacci-sequence-solution\n  [number] ;; update args as needed\n  ;; Write a function which returns the first X fibonacci numbers.\n  (take number\n      (map first(iterate(fn [[a b]][b (+ a b)])[1 1]))))","user":"58445c3ce4b089d5ab817e49"},{"problem":26,"code":"(fn fibb [cnt] \n  (loop [acc [1 1], fst 1, snd 1] \n    (let [sum (+ fst snd)] \n      (if (= (count acc) cnt) \n          acc\n          (recur (conj acc sum) snd sum)))))","user":"5c13da47e4b01240ff5671a6"},{"problem":26,"code":"#(loop [fs '(0)\n        next 1\n        result %]\n   (if (= result 0)\n     (reverse (butlast fs))\n     (recur (conj fs next) (+ (first fs) next) (dec result))))","user":"4ec549e1535d6d7199dd3691"},{"problem":26,"code":"(fn [n] (reverse (reduce (fn [a x] (cons (+ (first a) (second a)) a)) [1 1] (range 0 (- n 2)))))","user":"56050f06e4b08b23635d3161"},{"code":"(fn [n] (take n (map last (iterate #(list (last %) (+ (first %) (last %))) '(0 1)))))","problem":26,"user":"5189dbabe4b0288ada3dbdb3"},{"problem":26,"code":"(fn [n]\n  (let [fibs (fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fibs 1 1))))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn [x] \n  (take x \n        (map last \n             (iterate (fn [[a b]]  [b (+ a b)]) [0 1]))))","problem":26,"user":"5164867fe4b003cf19fdde3e"},{"code":"(fn [n]\n  (loop [i 3 col [1 1]]\n    (if (> i n)\n      (take n col)\n      (recur (inc i) (conj col (reduce #(+ %1 %2) (take-last 2 col)))))))","problem":26,"user":"512b7a05e4b04d059cf1fd14"},{"code":"(fn f [v a b c]\n(if (= c 0) v\n(f (conj v a) b (+ a b) (dec c))))\n[] 1 1","problem":26,"user":"4e931ebb535dbda64a6f6b08"},{"code":"(fn fibo [x]\n  (loop [f0 0\n         f1 1\n         s '(1)\n         c 1]\n    (if (= c x)\n      s\n      (recur f1\n             (+ f1 f0)\n             (concat s (list (+ f1 f0)))\n             (inc c)))))","problem":26,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":26,"code":"(fn [n] ((fn fib [a b] (take n (lazy-seq (cons a (fib b (+ a b)))))) 1 1))","user":"57e30d38e4b0bfb2137f5a92"},{"code":"(fn [number]\n  (reduce (fn [r n] (cond (= n 1) [1]\n                          (= n 2) [1 1]\n                          :else (conj r (apply + (take-last 2 r)))))\n          []\n          (range 1 (+ number 1))))","problem":26,"user":"4fb01e53e4b081705acca260"},{"code":"(fn [length] \n  (let [fibseqs (iterate #(conj % (+ (first %) (second %))) '(1 0))\n        fibseq (nth fibseqs (dec length))]\n  (rest (reverse fibseq))))","problem":26,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":26,"code":"#(take % (map first (iterate (fn [ [x y]] [y (+ y x)]) [1 1])))","user":"55c77070e4b0e31453f649d0"},{"problem":26,"code":"(fn nfib [n]\n  (map \n    (fn fib [n]\n      (if (< n 2)\n        1\n        (+ (fib (- n 1)) (fib (- n 2)))\n      )\n    )\n   (range n)\n  )\n)","user":"5ff88607e4b06df49cee14a6"},{"code":"#(take %((fn fi [a b]\n           (cons a\n                 (lazy-seq (fi b (+ a b))))) 1 1) )","problem":26,"user":"53862316e4b06839e8705f0e"},{"problem":26,"code":"(fn c [x]\n  (cond\n    (= 1 x) [1]\n    (= 2 x) [1 1]\n    :else (let [prev (c (dec x))\n                prev2 (c (- x 2))]\n            (conj prev (+ (last prev) (last prev2) )))))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":26,"code":"#(take % (map last\n              (iterate (fn [[x y]] [y (+' x y)])\n                       [0 1])))","user":"568e1871e4b0dcc4269f40cc"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n    1 '(1)\n    2 '(1 1)\n    (let [\n          fib-1 (reverse (fib (dec n)))\n          n-1 (first fib-1)\n          n-2 (nth fib-1 1)\n          ]\n      (concat (reverse fib-1) (list (+ n-1 n-2))))))","user":"583f0b82e4b089d5ab817dc6"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b ]] [b (+ a b)]) [1 1 ] )))","user":"5674477ce4b05957ce8c6134"},{"problem":26,"code":"(fn [input]\n  (loop [in input out [1]]\n    (if (= 1 in)\n      out\n      (recur(dec in) \n        (conj out \n         (reduce + (take 2 (reverse out))\n         )\n        )\n      )\n    )\n   )\n  )","user":"5a6dbaf5e4b0512ff01cda63"},{"problem":26,"code":"(fn [n] (reduce (fn [c e]\n                          (cond (<= e 1) [1]\n                                (= e 2) [1 1]\n                                (> e 2) (let [e0 (dec (count c))\n                                              e1 (dec e0)\n                                              ne (+ (c e0) (c e1))]\n                                          (conj c ne))))\n                        [] (range 1 (inc n))))","user":"55773cbae4b05c286339e07f"},{"problem":26,"code":"(fn fib [n] (loop [a 1 b 1 res [] cnt n] \n              (if (= cnt 0)\n                res\n                (recur (+ a b) a (conj res b) (dec cnt)))))","user":"5a89ee2de4b05369db4d24c9"},{"problem":26,"code":"(fn [n]\n    (letfn [(get-second-latest-value [counter res]\n            (cond\n              (= counter 0) 0\n              :else (second (reverse res))))\n          (get-latest-value [counter res]\n            (cond\n              (= counter 0) 1\n              :else (first (reverse res))))]\n    (loop [counter 0\n           result [0]]\n      (cond\n        (= counter n) (rest result)\n        :else (recur (inc counter)\n                     (conj result (+ (get-second-latest-value counter result)\n                                     (get-latest-value counter result))))))))","user":"5a912080e4b002d099cae6ea"},{"problem":26,"code":"(fn [n]\n  (loop [n n \n         acc 1\n         fib [1]]\n    (if (= 1 n)\n      fib\n      (recur (dec n) (+ acc (last fib)) (conj fib acc)))))","user":"560dfa8de4b05f002753df46"},{"code":"(fn [x]\n  (take x\n       ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"521b17c5e4b0c4ef0be83027"},{"problem":26,"code":"(fn [max]\n     (loop [l [1]]\n\t   (println l)\n\t   (if (>= (count l) max)\n\t     l\n\t     (let [c (count l)\n\t\t     pprev (nth l (- c 2) 0)\n\t\t     prev (nth l (- c 1) 0)]\n\t       (println pprev prev)\n\t       (recur  (conj l (+ pprev prev))   )))))","user":"59473563e4b07ddc2dafad97"},{"problem":26,"code":"(fn fib [x]\n  (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"556873cee4b0c656e3ff1853"},{"code":"#(loop [fibs []\n        k 0\n        n %]\n   (if (= n k)\n         fibs\n         (condp = k\n           0  (recur [1]   1 n)\n           1  (recur [1 1] 2 n)\n           (recur (conj fibs (+ (last fibs) (nth (reverse fibs) 1))) (inc k) n))))","problem":26,"user":"4ee7fe83535d93acb0a66874"},{"problem":26,"code":"#(first (split-at % '(1 1 2 3 5 8 13 21)))","user":"5954cea2e4b066ee0a44af0a"},{"problem":26,"code":"(fn[n](loop [res [1 1]]\n\t\t\t\t\t\t (if (>= (count res) n)\n\t\t\t\t\t\t\t (seq res)\n\t\t\t\t\t\t\t (recur (conj res (+' (inc (last res)) (dec (last (butlast res))))))))\n\t\t )","user":"59346d29e4b072a2710fd077"},{"code":"(fn [i]                                                                                                                                             \n          (loop [x 1                                                                                                                                        \n                  temp 1                                                                                                                                     \n                  times 1                                                                                                                                    \n                  res '(1)]                                                                                                                                  \n            (if (< times i)                                                                                                                               \n              (recur (+ temp x) x (inc times) (conj res x))                                                                                                 \n              (seq (reverse res)))))","problem":26,"user":"52a3c66ce4b04e0c58e87c04"},{"problem":26,"code":"(fn [n]\n  (take n\n   (map first\n        (iterate \n         (fn [[x0 x1]] [x1 (+ x0 x1)])\n         [1 1]))))","user":"55ab07e0e4b0988bba2ad953"},{"code":"(fn fibonacci\n  [n]\n  (loop [prev 0\n         cur 1\n         ret []\n         iter 0]\n    (if (= iter n)\n      ret\n      (recur cur (+ cur prev) (conj ret cur) (inc iter)))))","problem":26,"user":"501f36dde4b0cb6ebc0a42e4"},{"code":"(fn [n] (map (fn fib [i]\n               (if (< i 2)\n                 1\n                 (+ (fib (- i 1)) (fib (- i 2)))))\n             (range n)))","problem":26,"user":"4ff9cfd6e4b0678c553fc3af"},{"code":"(fn [x y zs c] (if (zero? c) zs (recur y (+ x y) (conj zs y) (dec c)))) 0 1 []","problem":26,"user":"4f8c3697e4b02e764a0a518d"},{"problem":26,"code":"(fn [n]\n  (loop [list '(1 1) i 2]\n    (if (== i n)\n      (reverse list)\n      (recur (conj list (apply + (take 2 list))) (inc i)))))","user":"58dede54e4b0a4d5acaab702"},{"code":"#(loop[a [1 1]] \n         (if (>= (count a) %) \n           a\n           (recur (conj a \n                         (+ \n                           (last a) \n                           (last (butlast a)))))\n           ))","problem":26,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":26,"code":"#(rest\n\t(loop [res [0 1]]\n\t  (if (> (count res) %)\n\t    res\n\t    (recur (conj res (+ (last res) (last (butlast res))))))))","user":"572f09f2e4b0cd1946bd0f94"},{"code":"(fn [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5173726be4b098276e74652c"},{"code":"(fn [n]\r\n  (->>\r\n    (lazy-seq\r\n      (loop [x [] a 1 b 1 n n]\r\n        (if\r\n          (= n 0) x\r\n          (recur (conj x [a b]) b (+ a b) (dec n)))))\r\n    (map first)))","problem":26,"user":"4e02bee8535d04ed9115e791"},{"problem":26,"code":"(fn fib [fibs nextn]\n  (if (= nextn 0)\n    fibs\n    (if (< (count fibs) 2)\n      (fib (conj fibs 1) (dec nextn))\n      (fib (conj fibs (reduce + (take-last 2 fibs))) (dec nextn))\n    )\n  )\n) []","user":"54ce6eede4b057c6fda3a2ad"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n             \t(fn [[a b]] [b (+ a b)])\n             \t[1 1])\n            )\n       )","user":"5c493046e4b0e06e1360a3cb"},{"code":"(fn fib [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      (concat (fib (- x 1)) '(1))\n      (concat (fib (- x 1)) (repeat 1 (+ (last (fib (- x 1))) (last (fib (- x 2))))))\n    )\n  )\n)","problem":26,"user":"53749685e4b06d7f452d9e23"},{"problem":26,"code":"(fn [x]\n  (loop [need x a 0 b 1 ans [1]]\n    (if (<= need 1)\n      ans\n      (recur (dec need) b (+ a b) (conj ans (+ a b))))))","user":"5a962c09e4b0d174b936c765"},{"problem":26,"code":"(fn [seed]\n  (take seed\n        (map first\n             (iterate\n               (fn [[a b]]\n                 [b (+ a b)])\n               [1 1]))))","user":"550309b9e4b086ebe8a79c65"},{"problem":26,"code":"(fn [n] \n\t(->> [1 1] \n    \t(iterate (fn [[a b]] [b (+ a b)]))\n    \t(map first)\n    \t(take n)))","user":"597bac8be4b02382a38ad202"},{"code":"(fn [cnt] \n  ((fn foo [s pre cur i cnt]\n    (if (<= i cnt)\n      (foo (conj s cur) cur (+ pre cur) (inc i) cnt)\n      s)) [] 0 1 1 cnt))","problem":26,"user":"524ab5f2e4b09eba1c02239d"},{"code":"#(take % ((fn ! [x y] (cons x (lazy-seq (! y (+ x y)))))\n                    1 1))","problem":26,"user":"50410452e4b06d8231e4faca"},{"problem":26,"code":"#(take % (map first (iterate (fn[[x y]] [y (+ x y)]) [1 1])))","user":"55154abce4b055c2f668d4e0"},{"problem":26,"code":"(fn\n  [n]\n  (loop [vals '(1 1)\n         i (- n 2)]\n    (if (= i 0)\n      (reverse vals)\n      (recur (conj vals (+ (first vals) (second vals)))\n             (dec i)))))","user":"54d21e6de4b0e8a36923e5ee"},{"problem":26,"code":"(fn sk-n-fib [n]\n   (letfn [(fibs [x y]\n             (lazy-seq\n               (cons x (fibs y (+ x y)))))\n            (all-fibs []\n              (fibs 1 1))]\n     (take n (all-fibs))))","user":"51d42f44e4b013d740b70ddb"},{"problem":26,"code":"(fn fib2 [n]\n  (let [start '(1 1)]\n    (if (< n 2)\n      start\n      (loop [xs start]\n        (if (>= (count xs) n)\n          (reverse xs)\n          (recur (conj xs (apply + (take 2 xs)))))))))","user":"57210b6de4b0c5bde472c0a6"},{"problem":26,"code":"(fn [n]\n (loop [f1 1\n        f2 1\n        x n\n        r '[]]\n      (if (pos? x) (recur f2 (+ f1 f2) (dec x) (conj r f1)) r)))","user":"5fc9d967e4b0689391cc77ce"},{"code":"(fn fibs [x]\n  (loop [coll []]\n    (if (< (count coll) x)\n      (if-not (< (count coll) 2)\n        (recur (conj coll (+ (last coll) (last (drop-last coll)))))\n        (recur (conj coll 1)))\n      coll)))","problem":26,"user":"5383668ee4b06839e8705edd"},{"problem":26,"code":"(fn [n] \n  (loop [y [1 1]] \n    (if (< (count y) n)\n      (recur (conj y (+ (last y) (last (butlast y)))))\n      y)))","user":"552c1a0fe4b076ab5578f7d7"},{"code":"(fn [x]\r\n              (cond\r\n                (= 1 x) '(1)\r\n                (= 2 x) '(1 1)\r\n                :else (loop [cou 2 nl '(1 1)] \r\n                  (cond \r\n                    (= x cou) (reverse nl)\r\n                    :else (recur (inc cou) (concat [(+ (first nl) (first (rest nl)))] nl))))))","problem":26,"user":"4e920f44535dbda64a6f6afd"},{"problem":26,"code":"#(loop [sec 1 counter (dec %) result '(1)]\n   (if (= counter 0)\n    (reverse result)\n     (recur (+ sec (first result)) (dec counter) (conj result sec)) \n     )\n   )","user":"558d43f1e4b0277789237640"},{"problem":26,"code":"(fn [n] (seq (loop [acc-vec [1 1]]\n          (if (= (count acc-vec) n)\n            acc-vec\n            (let [last2 (take-last 2 acc-vec)]\n              (recur (conj acc-vec (+ (first last2) (last last2)))))))))","user":"563f4c47e4b08d4f616f5ed2"},{"code":"(fn [x n]\n   (if (< n 3)\n       (reverse x)\n       (recur (cons (+ (first x) (second x)) x) (- n 1))))\n   '(1 1)","problem":26,"user":"4f4a17ffe4b0d56e7bb92c05"},{"code":"(fn fib [i]\r\n  (let [nextfib (fn [seq]\r\n                  (let [[x y] (take 2 (reverse seq))]\r\n                    (conj seq (+ x y))))\r\n        fibs (concat [[1]] (iterate nextfib [1 1]))]\r\n    (nth fibs (dec i))))","problem":26,"user":"4eecdd66535d93acb0a668b9"},{"code":"(fn [n]\n  (letfn [(fibo [] (letfn [(next-fibo [a b] (lazy-seq (cons (+ a b) (next-fibo b (+ a b)))))]\n        (cons 1 (cons 1 (next-fibo 1 1)))))]\n    (take n (fibo))))","problem":26,"user":"4f0b2028535d0136e6c222ff"},{"code":"#(take % (map first (iterate (fn [[a b]] [(+ a b) a])[1 0])))","problem":26,"user":"50ac81b9e4b071b89ef2622f"},{"code":"(fn fib [n]\n  (let [f-help (fn f-n [m] \n                 (if (< m 2)\n                   1\n                   (+ (f-n (- m 1)) (f-n (- m 2)))))]\n    (map f-help (range n))))","problem":26,"user":"52e41c22e4b09f7907dd144b"},{"problem":26,"code":"(fn [num]\n  (if (= num 1)\t\n    '(1)\n    (loop [i 2\n           lst '(1 1)]\n      (if (= i num)\n        (reverse lst)\n        (recur (inc i) (cons (+ (first lst) (second lst)) lst))))))","user":"55838353e4b05c286339e116"},{"problem":26,"code":"#(take % (\n          (fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b)))))\n          1 1))","user":"5d81b40ce4b0915913b1d379"},{"problem":26,"code":"(fn fib\n  ([n]\n   (if (> n 1)\n    (fib [1 1] n)\n    [1]))\n  ([x, n]\n     (if (< (count x) n)\n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       x\n       )))","user":"5697fda8e4b0542e1f8d142c"},{"code":"#(map (fn fib [n]   \n  (cond (= n 0) 1\n        (= n 1) 1\n        :else (+ (fib (- n 1)) (fib (- n 2))))) (range %))","problem":26,"user":"533160a1e4b019098a6f8b68"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n;;(fn [n] (reverse (reduce (fn [a _] (conj a (+ (first a) (first (rest a)) ))) '(1 1) (range (- n 2)))))","user":"577202d2e4b0979f896515c0"},{"problem":26,"code":"(fn [n]\n  (loop [fib 0 lis '()]\n    (if (= fib n)\n      (reverse lis)\n      (recur \n       (inc fib)\n       (cons\n        (+ \n         (if (nil? (first lis))\n           1\n           (first lis))\n         (if (nil? (second lis)) \n           0 \n           (second lis)))\n        lis)))))","user":"57f904c5e4b0d3187e900936"},{"code":"(fn fibo [lim]\n  (loop  [x [1 1] ind 2]\n    (if (> lim ind)\n      (recur(conj x (+ (last x) (nth x (- (count x) 2)))) (inc ind))\n      x\n      )\n    )\n  )","problem":26,"user":"5029131ae4b0b6c928ad61ff"},{"problem":26,"code":"#(loop [n % s '(1 1)] (if (<= n 2) s (recur (dec n) (concat s (list (+ (last s) (last (drop-last s))))))))","user":"5550dec6e4b00713264bd9b2"},{"problem":26,"code":"(fn [x]\n(take x\n(map first\n(iterate \n  (fn [[a b]]\n    [b (+ a b)])\n  [1 1]))))","user":"555c78abe4b0b056612e224f"},{"code":"(fn fib\n  ([n]\n     (cond\n      (= 0 n) '()\n      (= 1 n) '(1)\n      :else (fib (- n 2) '(1 1))))\n  ([n items]\n     (if (zero? n)\n       (reverse items)\n       (let [next-item (+ (first items) (second items))]\n         (recur (- n 1) (cons next-item items))))))","problem":26,"user":"511720eae4b0063b4e3e16da"},{"problem":26,"code":"(fn\n  [n]\n  (cond (= n 0) '()\n        (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else  (loop [res '[1 1]\n                      num 2]\n                 (if (= num n)\n                   (list* res)\n                   (recur (conj res (+ (last res)\n                                      (nth res (- (count res) 2))))\n                          (inc num))))))","user":"5c706232e4b0fca0c162277e"},{"problem":26,"code":"#(reverse\n    (loop [x 0 coll '()] \n        (if (= x %) \n          coll \n          (recur (inc x) \n                 (conj coll \n                       (if (or (= x 0) (= x 1))\n                          1\n                          (do\n                          (+ (nth coll 1)\n                          (first coll)))))))))","user":"5a182c9de4b0ff51aa4b31e0"},{"code":"(fn [n]\n  (loop [r [] a 1 b 1]\n    (if (>= (count r) n)\n      r\n      (recur (conj r a) b (+ a b)))) )","problem":26,"user":"4ebe766d535dfed6da9c6d94"},{"code":"(fn fib [s, n, m]\n  (if (= n m)\n    (reverse s) \n    (fib (conj s (apply + (take 2 s))) (inc n) m))) '(1 1) 2","problem":26,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn helper [n]\n  (if (zero? n)\n    []\n    (conj (helper (dec n)) ((fn fib [x]\n                               (cond\n                                (= x 0) 0\n                                (= x 1) 1\n                                :else (+ (fib (dec x)) (fib (- x 2))))) n))))","problem":26,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":26,"code":"#(take %1 ((fn fib [a b] (lazy-seq (cons a (fib b ( + a b )) ))) 1 1))","user":"5f714ae2e4b02876ed9fd084"},{"problem":26,"code":"(fn fibs [x]\n              (loop [n (dec x) ,a 0,b 1,rets[1] ]\n                (if (= 0 n)\n                  rets\n                  (recur (dec n) b (+ a b) (conj rets (+ a b))))))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":26,"code":"#(reverse (reduce (fn [x _] (conj x \n                                  (+ (first x) \n                                     (nth x 1)))) \n                  '(1 1) \n                  (range 2 %)))","user":"5e66c144e4b0e171e1033683"},{"code":"(fn [n] (map last (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e7d9257535db169f9c796dd"},{"code":"(fn [x]\n  (take x\n    ((fn fibs [a b]\n        (cons a (lazy-seq (fibs b (+ a b)))))\n      1 1)))","problem":26,"user":"4e52777f535d302ef430da76"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2)\n         s [1 1]]\n    (if (= 0 n)\n      s\n      (recur (dec n) (conj s (+ (last s) (last (butlast s))))))))","user":"54c7f5cce4b045293a27f642"},{"problem":26,"code":"(fn [y] (map (fn fib [x] (if (< x 3) ((constantly 1) 1) (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (inc y))))","user":"54461393e4b032a45b8693a5"},{"problem":26,"code":"(fn [x]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       (map first)\n       (take x)))","user":"5c59b836e4b01df32ab73263"},{"problem":26,"code":"#(take % (map first (iterate (fn [x] (conj (-> x next vec) (apply + x))) [1 1])))","user":"56ecc4b5e4b04a395b9a043e"},{"problem":26,"code":"(fn fib-seq [n] (if (= n 0)\n\t[]\n\t(conj (fib-seq (- n 1)) ((fn fib [n] (if (= n 1)\n              1(if (= n 2) 1 \n                 (+ (fib (- n 1)) (fib (- n 2)) ) ))) n))))","user":"55599ae4e4b0deb715856e3a"},{"code":"#(loop [cnt (- % 2) s [1 1]] (if (= cnt 0) s (recur (dec cnt) (conj s (reduce + (take-last 2 s))))))","problem":26,"user":"50a4f36be4b0344e360f3bc9"},{"problem":26,"code":"#(loop [fib [1 1]]\n   (if (< (count fib) %)\n     (recur (conj fib (apply + (take-last 2 fib))))\n     fib))","user":"53a12b57e4b0ca733b9744ba"},{"code":"(fn recfib [c] \n     (let [startseq [1 1] ] \n       (loop [remaining_count (- c 2), currseq startseq] \n         (if (= remaining_count 0) \n           currseq \n           (recur \n             (dec remaining_count) \n             (conj currseq (+ (last currseq) (nth currseq (- (count currseq) 2))))\n             )))))","problem":26,"user":"524c7fcfe4b0752c4cb68cbd"},{"problem":26,"code":"(fn [n] (loop [a 0\n               b 1\n               e n\n               r []]\n          (if (= (count r) e)\n            r\n            (recur b (+ a b) e (conj r b)))))","user":"5753b6c6e4b02ea1147992af"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])) ) )","user":"58ac513fe4b0005cfeb1a746"},{"code":"(fn fibo [i]\n  (reduce\n    (fn [liste _] (conj liste (+ (last liste) (last (butlast liste)))))\n    [1 1]\n    (range (- i 2))\n    )\n  )","problem":26,"user":"4ec4d723535dcc7ae8597d65"},{"code":"(fn b1 [x] \n  (map first (take x \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"50b4d258e4b0c464d223d1bd"},{"code":"#(loop [a 1 b 1 i 1 result []] (if (<= i %) (recur b (+ a b) (inc i) (conj result a)) result))","problem":26,"user":"4fb1d7ace4b081705acca281"},{"code":"(fn f ([n] (f n 0 1 []))\n     ([n a b acc] (if (= n 0)\n                    acc\n                    (recur (dec n) b (+ a b) (conj acc b)))))","problem":26,"user":"50e82c31e4b0ebbe794eb7da"},{"code":"#(take % ((fn [] \n  (map first (iterate (fn [[a b]] \n    [b (+ a b)]) [1 1])))))","problem":26,"user":"4edfd846535d10e5ff6f5345"},{"problem":26,"code":"(fn fib\n  ([n]\n\t(case n\n      0 ()\n      1 '(1)\n      (fib (- n 2) [1 1])))\n  ([n li]\n\t(if (= n 0)\n      li\n      (recur (dec n) (conj li (+ (last li) (last (butlast li))))))))","user":"557a1e18e4b05c286339e09e"},{"problem":26,"code":"#(for [i (map inc (range %))]\n    (\n     (fn fib [n]\n      (cond\n       (= n 0)\n       0\n       (= n 1)\n       1\n       :else\n       (+ (fib (dec n)) (fib (- n 2))))) i))","user":"5f38eecce4b0574c87022c72"},{"problem":26,"code":"(fn [n] (drop 1 (take (inc n) ((fn fib [one two] \n                  (cons \n                   one \n                   (lazy-seq (fib two (+ one two)))\n                   )\n                  ) 0 1))\n  ))","user":"53e1040be4b0d874e779ae4e"},{"problem":26,"code":"(fn [x]\n  (->> [0 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map last)\n       (take x)))","user":"4db1b3951254ad5b4805fa6f"},{"problem":26,"code":"(fn\n            [n]\n            (take n ((fn fib\n                      ([] (concat [1 1] (fib 1 1)))\n                      ([x1 x2]\n                       (let [x3 (+ x1 x2)]\n                         (lazy-seq\n                          (cons x3 (fib x2 x3)))))))))","user":"53c39a9ae4b00fb29b22127d"},{"problem":26,"code":"(fn \n  [n] \n  (let \n    [internal (fn \n                [n1 n2 c xs] \n                (if (> c 0) \n                  (recur n2 \n                         (+ n1 n2)\n                         (dec c)\n                         (conj xs n1))\n                  xs))] \n    (internal 1 1 n [])))","user":"5a37b6dbe4b001c08efc0c88"},{"code":"(fn fib\n  ([n]\n     (fib [1 1] n))\n  ([x n]\n     (if (< (count x) n)\n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       x)))","problem":26,"user":"4ed2a31c535d44c135fd68db"},{"problem":26,"code":"(fn [n] (loop [i 0 f [1 1]] (if (= i (- n 2)) f (recur (inc i) (conj f (apply + (take-last 2 f) )))) ))","user":"5cd9dc85e4b05ee0cb31170d"},{"code":"(fn fibonacci [n]\n  (loop [a 1 b 1 c (- n 2) s [1 1]]\n    (if (<= c 0)\n      s\n      (recur b (+ a b) (dec c) (conj s (+ a b))))))","problem":26,"user":"53791ab7e4b06839e8705e4d"},{"problem":26,"code":"#(reduce (fn[s x](conj s (if (> x 1) (reduce + (take-last 2 s)) 1))) [] (range %))","user":"575dda55e4b02ea11479938c"},{"code":"(fn [n] (reverse (reduce (fn [e f] (conj e (+ (first e) (second e)))) '(1 1) (repeat (- n 2) 1))))","problem":26,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":26,"code":"(fn fib [n] \n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    ((fn [fibs] \n      (conj fibs \n            (+ (fibs (- n 2)) (fibs (- n 3)))))\n     (fib (- n 1))\n    )\n  )\n)","user":"5606d71ce4b08b23635d317a"},{"problem":26,"code":"(fn [num]\n  (take num ((fn fib-in [a b]\n    (lazy-seq (cons a (fib-in b (+ a b))))) 1 1)))","user":"58354124e4b089d5ab817cd6"},{"problem":26,"code":"#(reverse (loop [curk 1 lastk 0 klist '() i %]\n          (if (= i 0)\n            klist\n            (recur (+ curk lastk) curk (conj klist curk) (dec i)))))","user":"5f2c94b4e4b033932238a669"},{"code":"(fn [n]\n  (last (take n (iterate\n                  #(conj % (apply + (take-last 2 %)))\n                  [1]))))","problem":26,"user":"4f3b2b28e4b0e243712b1f26"},{"code":"(fn [cnt]\n  (loop [a 1 b 1 i 1 res [1]]\n    (if (= i cnt)\n      res\n      (recur b (+ a b) (inc i) (conj res b)))))","problem":26,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn [n] \n  (last (take (dec n) (iterate #(conj % (+ (peek %) (peek (pop %)))) [1 1]))))","problem":26,"user":"52cca65be4b07d0d72b2736b"},{"problem":26,"code":"(fn fibo [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else   (loop [f 1\n                   s 1\n                   l 2\n                   res '(1 1)]\n                 (if (= n l)\n                     (reverse res)\n                     (recur (first res)\n                            (+ f s)\n                            (inc l)\n                            (concat (list (+ f s)) res))))))","user":"57f8151ce4b0d3187e900912"},{"code":"(fn [i]\n(let [f\n(fn fib [x]\n  (if (= 0 x) \n    1 \n    (if (= 1 x) \n      1 \n    (+ (fib (- x 1)) (fib (- x 2))))))\n] (map f (range i))))","problem":26,"user":"4f946be7e4b0dcca54ed6cc3"},{"code":"(fn \n  [n]\n  (loop [len n\n         fibs [1 1]]\n    (if (= (count fibs) len)\n      (reverse (into () fibs))\n      (recur n (conj fibs (+ (last fibs) (nth fibs (- (count fibs) 2))))))))","problem":26,"user":"531e5c81e4b08068f379edba"},{"code":"(fn fib [x] (cond (= x 1) [1] (= x 2) [1 1] :else (conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (fib (- x 2)))))))","problem":26,"user":"51c330a9e4b0851ac09658f2"},{"problem":26,"code":"(fn fib\n  ([x] (fib x [1 1]))\n  ([x l]\n   (cond (zero? x) []\n         (= 1 x) [1]\n         (= x (count l)) l\n         :else (recur x (conj l (+ (last l) (last (butlast l))))))))","user":"59f4c9c7e4b0966464fe6ab7"},{"problem":26,"code":"#((fn [x s]\n      (if (= 2 x)\n         s\n         (recur (dec x)\n                   (conj s (+ (last s) (last (butlast s))))))) % [1 1])","user":"5c13ce5ee4b01240ff5671a4"},{"problem":26,"code":"(fn [x]\n  (loop [acc [1 1 2]]\n    (if (= (count acc) x)\n      acc\n      (recur (conj acc (+ (last acc) (get acc (- (count acc) 2))))))))","user":"57a7f7d8e4b0a96607956218"},{"problem":26,"code":"(fn fib [n]\n (let [f (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))](take n f)))","user":"55597b84e4b0deb715856e36"},{"problem":26,"code":"(fn [x] (map \n(fn fb [n] (if (= n 0)\n 0\n (if (= n 1) 1 (+ (fb (- n 1)) (fb (- n 2)))))) (range 1 (inc x))))","user":"551d5cb9e4b07993ea3788e9"},{"code":"(fn fib [n]\n  (if (<= n 2) '[1 1] (let [t (fib (dec n))] (conj t (+ (first (reverse t)) (second (reverse t)))))))","problem":26,"user":"510130d4e4b0bef64c30e268"},{"code":"#(take % ((fn [e1 e2]\n            (letfn [\n                    (fib [f s]\n                      (cons f (lazy-seq (fib s (+ f s)))))]\n              (fib e1 e2))) 1 1))","problem":26,"user":"52c49401e4b0c2d177d620de"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range 0 %1))","user":"54cd53dae4b057c6fda3a29f"},{"code":"(fn fib [x]\n  (loop [xs [1 1]]\n    (if (= (count xs) x)\n      (seq xs)\n      (recur (conj xs (apply + (take-last 2 xs)))))))","problem":26,"user":"4fb79872e4b081705acca2d2"},{"problem":26,"code":"#(reduce \n  (fn [a b] (conj a (+' (last a) (last (butlast a)))))  \n  [1 1]                      \n  (range (dec (dec %))))","user":"5b757b39e4b047b03b2036cd"},{"problem":26,"code":"(fn [num]\n              (letfn [(fib [n] \n                         (cond\n                           (= n 1) '(1)\n                           (= n 2) '(1 1)\n                           (> n 2) (let [res (fib (dec n))]\n                                     (conj res (+ (first res) (second res))))))]\n                (reverse (fib num))))","user":"58f49268e4b0438e51c2cec0"},{"problem":26,"code":"(fn [n] (take n ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"54c75959e4b045293a27f63a"},{"problem":26,"code":"(fn [x]\n  (loop [resultseq '(1 1) decriment (- x 2)]\n   (if (= decriment 0)\n     (reverse resultseq)\n     (recur (conj resultseq (reduce + (take 2 resultseq))) (dec decriment)))))","user":"57a2328ae4b0c3d858beb8f8"},{"code":"(fn [x] (#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) x))","problem":26,"user":"52d7f7efe4b09f7907dd1380"},{"code":"(fn [x]\n\t\n\t(loop [steps [1 1]]\n\t\t(if (<= x (count steps))\n\t\t\t(take x steps)\n\t\t\t(recur (conj steps (+ (peek steps) (peek (pop steps)) ))))))","problem":26,"user":"532db3e7e4b019098a6f8b3d"},{"code":"(fn fib [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       (map first)\n       (flatten)\n       (take n)\n))","problem":26,"user":"512e0f36e4b0b740abc59820"},{"problem":26,"code":"(fn [n] (take n (map second (iterate #(list (+ (first %) (second %)) (first %)) '(1 1)))))","user":"5142154ce4b0b50abeb46b2b"},{"code":"(fn [n] (if (< n 3) \n                ( take n [1 1]) \n                (loop [cur 2, pprev 1, prev 1, coll [1 1]]\n                  (if (= cur n)\n                    coll\n                    (recur (inc cur) prev, (+ prev pprev), (conj coll (+ prev pprev)))\n                    ))))","problem":26,"user":"5156e767e4b04360f2428e6b"},{"code":"(fn [n]\n  (let [nums [1 1 2 3 5 8 13 21]]\n    (take n nums)))","problem":26,"user":"538d0d66e4b0b51d73faae66"},{"code":"(fn fibs [x] (if (< x 3) [1 1] \n(concat [1 1] \n        (map + (fibs (- x 1))\n               (rest (fibs (- x 1)))\n        )\n)\n)\n)","problem":26,"user":"5062bc46e4b05ac47bc68d68"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0 curr 1 fibs [] left n]\n    (if (= left 0)\n      fibs\n      (recur curr (+ prev curr) (conj fibs curr) (dec left)))))","user":"58a72bafe4b01a0c0b23293d"},{"problem":26,"code":"#(loop [lst '(1 1) n (- % 2)]\n\t\t(if (zero? n)\n\t\t\t(reverse lst)\n\t\t\t(recur (cons (+ (first lst) (second lst)) lst) (dec n))))","user":"54296802e4b01498b1a71b38"},{"problem":26,"code":"(fn [n]\n  (loop [lst [] h1 1 h2 1]\n    (if (< n (- (count lst) 2))\n      (take n (reverse lst))\n      (recur (cons h1 lst)\n        h2\n        (+ h1 h2)))))","user":"5625f678e4b00e49c7cb47b8"},{"problem":26,"code":"(fn [cnt]\n  (loop [cc cnt\n         acc []]\n    (if (zero? cc)\n      acc\n      (recur (dec cc) (conj acc (if (< (count acc) 2)\n                                  1\n                                  (apply + (take-last 2 acc))))))))","user":"542c22bde4b0dad94371f29e"},{"problem":26,"code":"#(->> \n    [1 1]\n    (iterate (fn [[a b]] [b (+ a b)]))\n    (take %)\n    (map first))","user":"5bbbce0ee4b0a20761a2360d"},{"problem":26,"code":"(fn\n  [x]\n  (loop\n   [i 0 r '()]\n    (cond \n     (= i x) (reverse r)\n     (or (= i 0) (= i 1)) (recur (inc i) (cons 1 r))\n     :else\n     (recur (inc i) (cons (+ (int (first r)) (int (second r))) r))\n     )\n   )\n  )","user":"6074f5ede4b069485764de52"},{"problem":26,"code":"(fn [n]\n  (take n\n  \t(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"509fda73e4b08df8156e9e41"},{"code":"#(loop [fib [1 1] a 1 b 1 i 2] (if (= i %) fib\n  (let [sum (+ a b)] (recur (conj fib sum) b sum (inc i)))))","problem":26,"user":"4ee7ef87535d93acb0a66872"},{"code":"#(reverse (loop [x '(1 1) n %]\n  (if (= 2 n) x\n    (recur\n      (conj x\n        (+ (first x) (nth x 1)))\n      (dec n)))))","problem":26,"user":"4f3afdd0e4b0e243712b1f20"},{"problem":26,"code":"(fn  [x]\n  (first(take-last 1 (take (inc x) (iterate (fn [n] (if (< (count n) 2)\n                                        (conj n 1)\n                                        (conj n (reduce + (take-last 2 n)))\n                                        )) []))\n             ))\n  )","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":26,"code":"(fn [n] \n    (rest (take (inc n) \n            ((fn lazy-fib [a b]\n                (lazy-seq (cons a (lazy-fib b (+ a b))))) 0 1))))","user":"56a7be01e4b07966d5a8a05e"},{"problem":26,"code":"(fn [x]\n  (map last (take x (iterate (fn [[a b]] (list b (+ a b))) '(0 1)))))","user":"5bba703fe4b0a20761a235eb"},{"code":"#(take %\n  (map first\n    (iterate \n      (fn [[a b]] [b (+ a b)])\n      [1 1])))","problem":26,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":26,"code":"#(loop [n %\n        acc '(1 1)]\n   (cond (= n 0) '()\n         (= n 1) '(1)\n         (= n 2) (reverse acc)\n         :else (recur (- n 1) (cons (+ (first acc) (first (rest acc))) acc))))","user":"561b04e8e4b053970a773b0f"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a) (last (butlast a))))) [1 1] (range 2 %))","user":"5751f2a2e4b02ea114799292"},{"code":"(fn [x] \n  (loop [e1 1 e2 1 el [] n x] \n    (if (pos? n) \n      (recur e2 (+ e1 e2) (conj el e1) (dec n))\n      el)))","problem":26,"user":"4f31ad57e4b0d6649770a089"},{"code":"(fn [max]\n  (loop [cur 1\n         prev 1\n         res '(1 1)]\n    (if (= (count res) max)\n      (reverse res)\n      (let [new (+ cur prev)]\n        (recur new cur (conj res new))))))","problem":26,"user":"4e8a8720535d65386fec210c"},{"problem":26,"code":"#(take % ((fn fib ([]\n\t(fib 1 1))\n \t([f s] \n            (lazy-seq (cons f (fib s (+ f s))))\n            )\n )))","user":"5c7bb8c0e4b0fca0c1622864"},{"code":"(fn [n]                                                                                                                                       \r\n   (letfn [(create-seq [f initial-a initial-b]                                                                                                \r\n             ((fn rfib [a b]                                                                                                                   \r\n                (lazy-seq (cons a (rfib b (f a b)))))                                                                                         \r\n              initial-a initial-b))]                                                                                                          \r\n     (take n (create-seq + 1 1))))","problem":26,"user":"4f149e0f535d64f60314643d"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate \n           (fn [[a b]]\n             [b (+ a b)] )[1 1]))))","user":"54b64fbbe4b05787c3b163b8"},{"code":"(fn [x]\n  (let [fib ((fn rfib [a b] \n                (lazy-seq (cons a (rfib b (+ a b)))))\n                  0 1)]\n    (take x (next fib))))","problem":26,"user":"4db016af838c48654951d9b9"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [coll '(1 1)\n         i (- n 2)]\n    (let [[a b] coll]\n     (if (> i 0)\n       (recur (conj coll (+ a b)) (dec i))\n       (take n (reverse coll))))))","user":"56d15251e4b0ea9b8538f78c"},{"problem":26,"code":";;#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"60794173e4b0a637ed78035d"},{"code":"(fn foo [x] (loop [i 2, r [1 1] ] \n  (if (> x i) \n    (recur (inc i) (conj r (reduce + (take-last 2 r))))\n    r)))","problem":26,"user":"4edf40d5535d10e5ff6f533f"},{"code":"(fn [n]\n  (nth\n    (iterate\n      (fn [all]\n        (conj all (->> all (take-last 2) (apply +)))) [1 1])\n      (- n 2)))","problem":26,"user":"506c8116e4b0a302964c548a"},{"problem":26,"code":"(fn fibouter [x]\n  (map \n    (fn fib [i] \n      (if (< i 2)\n        1\n        (+ \n         (fib (dec i))\n         (fib (dec (dec i))))))\n   (range x) ))","user":"53dfb864e4b0d874e779ae43"},{"problem":26,"code":"(fn [x]\n  (loop [fibs '(1 1)\n         cnt 2]\n    (if (= cnt x) (reverse fibs) (recur (conj fibs (+ (first fibs) (first (next fibs)))) (inc cnt)))))","user":"5b7608c9e4b047b03b2036da"},{"code":"(fn fib-seq\n  ([x] (take x (fib-seq)))\n         \n  ([] (fib-seq 1 1))\n  ([a b] (cons a (lazy-seq (fib-seq b (+ a b))))))","problem":26,"user":"53972755e4b0b51d73faaee5"},{"problem":26,"code":"#(loop [a 1\n        b 1\n        y '()\n        i %]\n   (if (= i 0)\n     y\n     (recur b (+ a b) (concat y (list a)) (dec i))))","user":"5ea2e6bfe4b00a66d4a95197"},{"problem":26,"code":"(fn [n] (take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"595d0897e4b066ee0a44b00f"},{"code":"(fn fibn [x]\n  (if (= x 3) \n    '(1 1 2) \n    (reverse (conj (reverse (fibn (dec x))) (reduce + (take-last 2(fibn (dec x))))))))","problem":26,"user":"4ee01905535d10e5ff6f534c"},{"code":"(fn fib\n      ([ln] (fib (dec ln) '(1 1)))\n      ([ln lst] (if (= ln 1)\n                  (reverse lst)\n                  (fib  (dec ln) (conj lst (+ (first lst) (second lst))))))\n      )","problem":26,"user":"52727d52e4b03e8d9a4a7439"},{"code":"(fn [x]\n   (take x \n     ((fn fib [a b] \n       (cons a \n         (lazy-seq (fib b (+ a b)))\n        )\n      ) 1 1)\n   )\n  )","problem":26,"user":"52fe869be4b047fd5583703f"},{"problem":26,"code":"(fn fibc [n]\n  (loop [x 1\n         result '(1)]\n    (if (= x (inc n))\n        result\n        (recur (inc x)\n               (case x\n                     1 '(1)\n                     2 '(1 1)\n                     (concat result (list (+ (last result) (last (butlast result))))))))))","user":"557af43ae4b05c286339e0a8"},{"code":"(fn fibs [n]\n  (let [fib (fn fib [n]\n              (if (< n 2)\n                1\n                (+ (fib (- n 1)) (fib (- n 2)))))\n        fibs (fn fibs[n]\n               (cons (fib n) (lazy-seq (fibs (+ n 1)))))]\n    (take n (fibs 0))))","problem":26,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"(fn fi [n]\n  (take n \n    (map first\n      (iterate \n        #(list (+ (second %) (first %)) (first %) (second %))\n        (list 1 0)))\n))","problem":26,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn fib ([n] (fib [1 1] n)) ([x, n] (if (< (count x) n) (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n) x)))","problem":26,"user":"4ff6ed6ae4b0678c553fc384"},{"problem":26,"code":"(fn[num] (reverse (loop [a1 0 a2 1 index 0 result '()] (if (>= index num) result (recur a2 (+ a1 a2) (inc index) (cons a2 result))))))","user":"5002c798e4b0678c553fc42d"},{"problem":26,"code":"#(map (fn fun [n]\n    (cond\n        (<= n 0) 0\n        (= n 1) 1\n        :else (+ (fun (- n 1)) (fun (- n 2)))\n    )) (range 1 (+ 1 %)))","user":"53882352e4b0640c7a9a5898"},{"problem":26,"code":"#((fn fib-seq [n f s]\n      (if (= 0 n)\n        nil\n        (conj (fib-seq (- n 1)\n                       s\n                       (+ f s))\n              f)))\n  % 1 1)","user":"551ed214e4b08d5046aa8a4d"},{"problem":26,"code":"(fn nth-fib [n]\n  (letfn [(fib-seq [oldval currval]\n            (lazy-seq\n             (cons (+ oldval currval)\n                   (fib-seq currval (+ oldval currval)))))]\n   (take n (cons 1 (cons 1 (fib-seq 1 1))))))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"#(loop [a 0 b 1 c 0 d []]\n  (if (< c %) \n      (recur b (+ a b) (+ 1 c) (conj d b))\n      d))","problem":26,"user":"4f504739e4b03ad3f0c10d00"},{"problem":26,"code":"(fn [n]\n  (loop [iter (- n 2)\n         acc '(1 1)]\n    (if (> iter 0)\n      (recur (- iter 1)\n             (conj acc (apply + (take 2 acc))))\n      (reverse acc))))","user":"58fb381ae4b0438e51c2cf71"},{"code":"(fn [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (loop [a 1\n                b 1\n                i 2\n                feb [1 1]]\n           (if (= i n)\n             feb\n             (let [new (+ a b)]\n               (recur b new (+ i 1) (conj feb new)))))))","problem":26,"user":"52526161e4b0541d1855b8a6"},{"problem":26,"code":"(fn [n]  \n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"560b483ee4b05f002753df16"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn[[a b]] (vector b (+ a b))) [1 1]))))","user":"5a135573e4b0ff51aa4b3180"},{"problem":26,"code":"(let [fib-acc (fn [x acc1 acc2 cnt]\n                (cond (zero? x) 0\n                      (= 1 x) 1\n                      (= cnt x) acc1\n                      :else (recur x (conj acc1 (+ (last acc1) acc2)) (last acc1) (inc cnt))))]\n  #(fib-acc % [1] 0 1))","user":"5136bc52e4b04ac1f358dd58"},{"problem":26,"code":"(fn [n] (loop [a 1 b 1 res []] (if (= (count res) n) res (recur b (+ a b) (conj res a))  )  ))","user":"5666c2dbe4b04acd4f672dc3"},{"code":"(fn fib\r\n  ([i] (fib i 0 [1]))\r\n  ([i previous current]\r\n     (if (zero? i)\r\n       (butlast current)\r\n       (recur (dec i)\r\n              (last current)\r\n              (conj current (+ previous (last  current)))))))","problem":26,"user":"4ecac3ab535d6d7199dd370b"},{"code":"(fn fibo [n] (loop [s [1 1] limit n]     \n  (if (< (count s) n)\n    (recur\n      (conj s (+ (last s)  (last (butlast s)) ) )\n      limit \n      )\n    s\n    )\n  )\n)","problem":26,"user":"4e9de526535dbda64a6f6b8e"},{"problem":26,"code":"#((fn fib [n] (if (< n 3) [1 1] (let [x (fib (dec n))] (conj x (+ (last x) (last (butlast x))))))) %)","user":"5659679ae4b068f2fe63dbeb"},{"problem":26,"code":"(fn [n]\n (loop [l [1 1] counter 2]\n   (if (= counter n)\n     l\n   (recur (conj l (+ (last l) (last (butlast l)) )) (inc counter))\n   )))","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn [n]\n(letfn [(F [n xs a b]\n           (cond (zero? n) xs\n                 :else (recur (dec n) (conj xs a) b (+ a b))))]\n  (F n [] 1 1)))","problem":26,"user":"51a4416ae4b0def3c5c5868c"},{"problem":26,"code":"#(map first (take %  \n\t    (iterate\n\t     (fn [[a b]]  [b (+ a b)])\n\t     [1 1])))","user":"562b57c7e4b058fa18c5a6cc"},{"problem":26,"code":"(fn [n]\n  (loop [index 1\n         fib []]\n    (if (> index n)\n      fib\n      (recur (inc index)\n             (if (< index 3)\n               (conj fib 1)\n               (let [rev (reverse fib)\n                     n1 (first rev)\n                     n2 (second rev)]\n                 (conj fib (+ n1 n2))))))))","user":"5b7ef8e6e4b047b03b203765"},{"problem":26,"code":"(fn [m]\n   (map  (fn fib [n]\n           (if(= n 0)\n             0\n             (if (= n 1)\n               1\n               (+ (fib (- n 1)) (fib (- n 2))))))\n         (range 1 (inc m))))","user":"59636b43e4b066ee0a44b0c4"},{"code":"(fn [n]\n  (loop [i 2\n         c [1 1]]\n    (if (= i n)\n      c\n      (recur (inc i) (conj c (+ (c (- (count c) 2)) (c (- (count c) 1))))))))","problem":26,"user":"5336a339e4b0e30313ee6c7d"},{"code":"(fn [depth & current]\n  (if (= depth 0) current\n  (if (nil? current)\n    (recur (dec (dec depth)) [1 1])\n    (recur (dec depth) (conj current (apply + (take 2 (reverse current)))))\n    )\n    )\n  )","problem":26,"user":"519291c1e4b08962174cf74b"},{"code":"(fn [n]\r\n  (loop [n (- n 2)\r\n         r '(1 1)]\r\n    (if (= n 0)\r\n      (reverse r)\r\n      (recur (- n 1) (conj r (+ (first r) (first (rest r))))))))","problem":26,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn fib [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [f (fib (- n 1))]\n           (concat f (list (reduce + (take-last 2 f)))))))","problem":26,"user":"52bb4be0e4b07a9af57922e2"},{"code":"#(take % (map first (rest (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","problem":26,"user":"531308c1e4b08068f379ed04"},{"problem":26,"code":"(fn [num] (loop [i 0 result [1 1]]\n            (if (< i (- num 2))\n            (recur (+ i 1) (conj result (+ (nth (reverse result) 0) (nth (reverse result) 1))))\n            result\n            ))\n  )","user":"5a9e3698e4b0d174b936c7fc"},{"problem":26,"code":"(fn\n  [n]\n  (loop [a 0\n         b 1\n         i 0\n         res ()]\n    (if (= i n)\n      (reverse res)\n      (recur b (+ a b) (inc i) (cons b res)))))","user":"59e8cd8be4b0249b72820739"},{"problem":26,"code":"(fn [x] (take x ((fn fibn [a b] (lazy-seq (cons a (fibn b (+ a b))))) 1 1)))","user":"4f18f65d535d64f603146462"},{"code":"(fn fib\n  ([n] (fib n 0 []))\n  ([n c acc]\n    (if (= n c)\n      acc\n      (if (= 0 c)\n        (fib n 1 [1])\n        (if (= 1 c)\n          (fib n 2 [1 1])\n          (fib n (+ c 1) (conj acc (+ (nth acc (- c 1)) (nth acc (- c 2)))))\n        )\n      )\n    )\n  )\n)","problem":26,"user":"4fff00ede4b0678c553fc3fc"},{"problem":26,"code":"(fn [n]                                                                                                                                                                                                    \n  (loop [result [1]                                                                                                                                                                                              \n         i 1]                                                                                                                                                                                                    \n    (if (= i n)                                                                                                                                                                                                  \n      result                                                                                                                                                                                                     \n      (recur (conj result (apply + (take-last 2 result))) (inc i)))))","user":"53403f42e4b085b17e897da8"},{"code":"(fn [n]\n  (->> [1 0]\n    (iterate\n      (fn [[x y]] [(+ x y) x]))\n    (map first)\n    (take n)))","problem":26,"user":"5201ada5e4b0b2e020a18f14"},{"code":"#( reverse (\r\n       (fn [x]\r\n          (loop [a '(1 1) count x]\r\n             (let [[a1 a2 & as] a]\r\n                  (if (= 2 count)\r\n                      a\r\n                      (recur (conj a (+ a1 a2)) (dec count))\r\n                      ))))\r\n       %))","problem":26,"user":"4e6f8431535d5021c1a8961e"},{"problem":26,"code":"(fn fib [i]\n   (if (<= i 1)\n     [1]\n     (if (<= i 2)\n       [1 1]\n       (let [prv (fib (- i 1))]\n         (conj \n          prv \n          (+ (prv (- i 2)) \n             (prv (- i 3))))))))","user":"55216b7ee4b0882d96d09193"},{"code":"(fn [n]\r\n    (loop [inx 0 last1 0 last2 1 acc '()]\r\n      (if (= inx n)\r\n        (reverse acc)\r\n        (recur (inc inx) \r\n                  (+ last2 last1) \r\n                  last1 \r\n                  (cons (+ last2 \r\n                          last1)\r\n                        acc)))))","problem":26,"user":"4ff8fb9ae4b0678c553fc3a4"},{"problem":26,"code":"#(take % (map last (iterate \n          (fn [[x y]] [y (+ x y)]) [0 1])))","user":"5aed87a1e4b0cc2b61a3bc1a"},{"problem":26,"code":"#(take % (map first \n           (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [1 1])))","user":"560ee566e4b05f002753df57"},{"problem":26,"code":"(fn fibo [y] (if (> 3 y) (if (= y 1) '(1) '(1 1))\n              (loop [x (- y 2) acc [1 1]]\n                (if (= x 0)\n                  (reverse (into '() acc))\n                  (recur (dec x) (conj acc (+ (last acc) (last (drop-last acc)))))\n                  )\n                )\n               ))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn [n]\n\t(take n \n    \t((fn fib [a b] \n           (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"525941f9e4b0cb4875a45cd6"},{"problem":26,"code":"(fn [inp]\n  (loop [ret [1]\n         i 1]\n    (if (= i inp)\n      ret\n      ;;else\n      (recur (conj ret (reduce + (take-last 2 ret)))\n             (inc i)))))","user":"5ef77cc1e4b09b61f08553c1"},{"code":"(fn fib \n  ([cnt] (fib (- cnt 2) '(1 1)))\n  ([cnt s] (if (= 0 cnt) (reverse s) (fib (dec cnt) (conj s (+ (first s) (second s))))))\n)","problem":26,"user":"51c214bce4b0d204dbe2ca1c"},{"code":"#(if (< % 3)\n    [1 1]\n    ((fn fib [col length]\n      (if (= length 0)\n        col\n        (fib (conj col (+ (last col) (nth col (- (count col) 2)))) (dec length))\n      ))\n    [1 1] (- % 2)))","problem":26,"user":"5311b367e4b08068f379eced"},{"problem":26,"code":"(fn  [fib-num]\n    (loop [fib-list [1 1]\n            county 0]\n        (if (= county fib-num)\n            (take fib-num fib-list)\n            (recur (conj fib-list (apply + (take-last 2 fib-list))) (inc county)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":26,"code":"(fn [n]\n  (sort (into '()\n   (reduce \n    (fn [oldVec nth_iteration]\n      (if (= (count oldVec) 1)\n        [1 1]\n        (conj oldVec (+\n                      (nth oldVec (- (count oldVec) 1))\n                      (nth oldVec (- (count oldVec) 2))))))\n    [1]\n    (range (- n 1))))))","user":"54c120d7e4b0ed20f4ff6f1c"},{"problem":26,"code":"(fn [n] ((fn iter [k a b] (if (== k n) '() (cons a (iter (inc k) b (+ a b))))) 0 1 1))","user":"5dee144ae4b093ff71727591"},{"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"50604918e4b08f2a82ad10bb"},{"problem":26,"code":"#(reverse ((fn fib [L n] (if (= n 2) L (fib (cons (+ (first L) (second L)) L) (dec n)))) [1 1] %))","user":"569c07b9e4b0542e1f8d145d"},{"problem":26,"code":"(fn fibs [n]\n  (cond\n   (= n 1) (list 1)\n   (= n 2) (list 1 1)\n   :else (let [fib (fibs (dec n))\n               x (last fib)\n               y (nth fib (- n 3))]\n           (concat fib [(+ x y)]))))","user":"5db5d09be4b010eb3c36cd31"},{"code":"(fn fib[n]  ( \n  let[f (fn fibo[a b t](if (= t 0) nil \n     (cons a (fibo b (+ a b) (dec t) ))))] (f 1 1 n) ))","problem":26,"user":"4e6279e3535d8ccf87e9fe60"},{"code":"#(loop [i 0 s '()]\n   (if (< i %)\n     (if (< i 2)\n       (recur (+ i 1) (cons 1 s))\n       (recur (+ i 1) (cons (+ (second s) (first s)) s))\n     )\n     (reverse s)\n   )\n  )","problem":26,"user":"51c9a705e4b09ce160bef5ab"},{"problem":26,"code":"(fn [x] (loop [a 1, b 1, r '(1, 1), n x] (if (= n 2) r (recur b (+ a b) (conj (vec r) (+ a b)) (dec n)))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":26,"code":"(fn  [n]                                                                                \n        (loop [x [1 1]]                                                                            \n          (if (< (count x) n)                                                                      \n            (recur (conj x (+ (last x) (nth x (- (count x) 2)))))                                  \n            x)))","user":"5423dc6ae4b01498b1a71ad5"},{"problem":26,"code":"(fn [x] ((fn f [a b n] (if (= n 1) (list a) (conj (f b (+ a b) (- n 1)) a))) 1 1 x))","user":"5826ed1fe4b051871117bf0e"},{"problem":26,"code":"#(take % (map first \n       (iterate \n           (fn [[ a, b       ]]  \n                [ b, (+ a b) ]) \n           [1 1])))","user":"5543553fe4b0a04f79299523"},{"code":"(fn [index]\n\t(loop [a 1 b 1 n index acc '()]\n\t\t(if (> n 0)\n\t\t\t(recur b (+ a b) (dec n) (cons a acc))\n\t\t\t(reverse acc)\n\t\t)\n\t)\n)","problem":26,"user":"4ede0511535d10e5ff6f5330"},{"problem":26,"code":"#(loop [p 0\n        pp 1\n        out []\n        l %1]\n   (if (zero? l)\n     out\n     (recur pp (+ pp p) (conj out pp) (dec l))))","user":"5871175de4b01531a375e9f7"},{"code":"(fn fibb [x] (if (= x 1) '(1)  (if (= x 2) '(1 1) (reverse (conj (reverse( fibb (- x 1))) (+ (last( fibb (- x 1))) (last(fibb (- x 2))))) ) ))  )","problem":26,"user":"5296008fe4b02ebb4ef7502a"},{"problem":26,"code":"(fn fib [x]\n   (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (conj (fib (dec x)) (+\n                               (last (fib (- x 1)))\n                               (last (fib (- x 2)))))))","user":"575c23d3e4b02ea114799369"},{"problem":26,"code":"(fn [x](take x((fn fib [a b] (lazy-seq(cons a (fib b (+ b a)) ) ))1 1)))","user":"575e7335e4b0846ea39baf28"},{"code":"(fn [times] (loop [out [1] a 1 b 1] (if (= (count out) times) out (recur (conj out b) b (+ a b)))))","problem":26,"user":"524feb3fe4b0541d1855b81f"},{"code":"(fn fibonacci [n]\n ( if (= n 2 )\n    '( 1 1 )\n    ( let [ lastList ( fibonacci ( - n  1 ) ) ]\n      ( concat lastList \n        (list ( + ( last lastList ) ( nth lastList ( - n 3 ) ) )\n)))))","problem":26,"user":"5026916fe4b0c969f0b056e1"},{"code":"(fn [n]\n  (reverse\n    (loop [my-n n acc '(1 1)]\n      (cond\n        (= my-n 1) (rest acc)\n        (= my-n 2) acc\n        :else (recur (- my-n 1) \n                    (cons (+ (first acc) (second acc)) \n                          acc))))))","problem":26,"user":"4f122bfe535d64f603146426"},{"problem":26,"code":"(fn f [x] (if (= x 2) [1 1] (let [r (f (dec x))] (conj r (+ (last r) (last (butlast r)))))))","user":"553bc237e4b09218d5f4500a"},{"problem":26,"code":"(partial (fn [coll n]\n  (if (= (count coll) n)\n    coll\n    (recur \n      (conj coll \n            (+ (last coll) (last (drop-last coll)))) n\n      )\n    )\n  ) [1 1])","user":"5a61bf79e4b0512ff01cd97b"},{"problem":26,"code":"(fn myfib [x]\n  (take x (reduce (fn [coll _] \n                      (conj coll (apply + (take-last 2 coll))\n                            )\n                      ) [1 1] (repeat x 1)\n             )                 \n     )\n   )","user":"5cee4bc9e4b0aaa82f1129dc"},{"code":"(fn [n & sIn] (let [s (if sIn sIn '())] (if (< n 1) (reverse s) (if (< (count s) 2) (recur (- n 1) (conj s 1) ) (recur (- n 1) (conj s (+ (first s) (first (rest s)))))))))","problem":26,"user":"51cf126ae4b0e42293a2256b"},{"code":"#(take %\n  (map first\n    (iterate\n      (fn [[a b]] [b (+ a b)])\n      [1 1]\n)))","problem":26,"user":"4fe89db2e4b07c9f6fd12c59"},{"problem":26,"code":"(fn [x] \n  (loop [counter x\n         first 0\n         second 1\n         fibseq '()]\n    (if (= counter 0)\n      (reverse fibseq)\n      (recur (dec counter)\n             second\n             (+ first second)\n             (conj fibseq second)))))","user":"557775a3e4b05c286339e084"},{"problem":26,"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [0 1]) (map second) (take %))","user":"5722b6ece4b0c5bde472c0d4"},{"code":"#(take % (map first (iterate (fn [[fib-n-1 fib-n ]] [fib-n (+ fib-n fib-n-1 )] ) [1 1])))","problem":26,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn [n]\n  (loop [fibs '[1 1]\n         cnt (- n 2)]\n    (if (= cnt 0)\n      (reverse (into () fibs))\n      (recur (conj fibs (+ (last fibs) (last (butlast fibs))))\n             (dec cnt)))))","problem":26,"user":"4f03f3b7535dcb61093f6b85"},{"code":"(fn [idx]\n  (loop [lst '(1) cnt 2 last 1]\n    (if (= idx cnt)\n      (reverse (cons last lst))\n      (recur (cons last lst) (+ cnt 1) (+ last (first lst))))))","problem":26,"user":"4ff743fde4b0678c553fc38d"},{"problem":26,"code":"(fn fib [cnt]\n  (cond\n   (== cnt 1) '(1)\n   (== cnt 2) '(1 1)\n   :else (let [prev (fib (- cnt 1))]\n           (concat prev (list (reduce + (take-last 2 prev)))))))","user":"5887518ae4b0f1effa3b76f5"},{"code":"(fn fbl [x]\n\n (letfn [\n  \n     (fibb [x] \n       (cond (= x 0) 0 \n             (= x 1) 1\n             :else (+ (fibb (- x 1)) (fibb (- x 2)) )))\n    \n     (fib-list [x,lst]\n        (if (> x 0)\n        (fib-list (- x 1)(cons (fibb x) lst)) lst ))\n   \n         ]\n         \n  (fib-list x '())))","problem":26,"user":"5180dc04e4b06b8caf33fa01"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib-lazy [a b] \n                    (cons a (lazy-seq (fib-lazy b (+ a b)))))]\n    (take x (fib-lazy 1 1))))","user":"53a6e646e4b0ef122a8689cd"},{"problem":26,"code":"(fn [n]\n  (loop [i n\n         a 1\n         b 1\n         c []]     \n    (if (= i 0) \n        c\n        (let [next (+ a b)]  \n          (recur (- i 1) b next (conj c a))\n        )        \n    ) \n  ))","user":"5c272f82e4b07e362c2305cb"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map first\n  \t(iterate \n   (fn [[a b]] [b (+ a b)])\n   '(1 1)))))","user":"598ff38ce4b0fcebec4de869"},{"problem":26,"code":"(fn [s] (letfn [(fib[n] (cond (< n 2) 1 :else (+ (fib (- n 1))(fib (- n 2)))))] (map fib (range s))))","user":"56011393e4b04bb52996e178"},{"problem":26,"code":"(fn fib\n  ([i]\n   (fib i [1 1]))\n  ([i my-arr]\n   (if (< (count my-arr) i)\n    (fib i (conj my-arr (+ (last my-arr) (nth my-arr (- (count my-arr) 2))))) \n     my-arr))\n )","user":"59636b6de4b066ee0a44b0c6"},{"problem":26,"code":"(fn [n]\n      (take n ((fn fib []\n                 ((fn fib-rec [a b]\n                    (cons a (lazy-seq (fib-rec b (+ a b)))))\n                   1 1)))))","user":"5d06499ae4b0cc9c915881ec"},{"code":"(fn [n]\n  (if (< n 3) 1\n    (loop [acc [] i 3 x 1 y 1]\n      (if (> i n) (concat acc [x y]) (recur (conj acc x) (inc i) y (+ x y))))))","problem":26,"user":"52199105e4b0c4ef0be82ff9"},{"code":"(fn* [p1__2673#] (take p1__2673# ((fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs))))))))","problem":26,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [n] (if (= 1 n) [1] (if (= 2 n) [1 1] (nth (iterate (fn [l] (let [rl (reverse l)] (conj l (+ (first rl)(second rl)))))\n [1 1]) (- n 2)))))","problem":26,"user":"51421cd5e4b0b50abeb46b2c"},{"problem":26,"code":"(fn [n1]\n  (->>\n    (iterate (fn [c] (cons (+ (first c) (first (rest c))) c)) '(1 0))\n    (take n1)\n    last\n    reverse\n    rest))","user":"559a9a3de4b066d22e731f45"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn rfib [a b] \n             (lazy-seq (cons a (rfib b (+ a b))))) \n           1 1)))","user":"56efc9fde4b04a395b9a0464"},{"code":"#(loop [a 0 b 1 c % acc '()]\n  (if (= c 0)\n    (reverse acc)\n    (recur b (+ a b) (- c 1) (conj acc b)))\n)","problem":26,"user":"534c469ee4b084c2834f4a8e"},{"problem":26,"code":"(fn fun [n]\n\t(loop [i 2\n           dataList '(1 1)]\n      \t(cond          \n         \t(= i n) (reverse dataList)\n         \t:else (recur (inc i) (conj dataList (apply + (take 2 dataList))))\n)))","user":"5da20e73e4b000c986472be1"},{"code":"(fn fib [x] (if (> x 2) (let [cur (fib (dec x))](conj cur (+ (last cur) (last (butlast cur))))) [1 1]))","problem":26,"user":"505d4b21e4b0e6aca564be07"},{"problem":26,"code":"#(take % ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b)))))\n         1 1))","user":"5e348945e4b0650de70e2b1d"},{"code":"#(take %\n   ((fn f [a b] (cons a (lazy-seq (f b (+ a b)))))\n   1 1))","problem":26,"user":"4fc863a9e4b0ee37620e1831"},{"problem":26,"code":"#(loop[x 1 y '(1) i 1 z %1] \n          ( \n            if(not= i z)\n              \t\t(recur (+ (first y) x) (conj y x) (inc i) z)\n            (reverse y)\n          )\n    )","user":"55129667e4b06e50f9beb1ac"},{"problem":26,"code":"(fn [x]\n            (loop [accum [1 1]\n                   i 3]\n              (prn accum i)\n              (if (> i x)\n                accum\n                (recur \n                 (conj accum (+ (last accum) (nth accum (- (count accum) 2))))\n                 (inc i)))))","user":"53b14289e4b047364c04448b"},{"code":"(fn [num]\n  (take num (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52a779fce4b0c58976d9ac1a"},{"problem":26,"code":"(fn fib\n  ([]  (fib 1 1))\n  ([n] (take n (fib)))\n  ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"55b118fae4b002ce9d5cbc2d"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"5fe9169ce4b05ac5b16ea1a0"},{"problem":26,"code":"(fn\n  [n]\n  (loop [x 1 coll []]\n    (if (= (- x 1) n)\n      coll\n      (recur (inc x) (concat coll (if (< x 3)\n                                    [1]\n                                    [(+ (nth coll (- x 2)) (nth coll (- x 3)))]))))))","user":"576a972ce4b0a07e8fc1811a"},{"problem":26,"code":"(fn fibseq [n] (map (fn fstfib [n] (case n\n                                             0 1\n                                             1 1\n                                             (+ (fstfib (- n 1)) (fstfib(- n 2)))\n                                             ))\n                      (range n)\n                      ))","user":"54bc0b0ee4b0ed20f4ff6ec7"},{"code":"(fn fib [x] (#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) x))","problem":26,"user":"52b11742e4b0c58976d9acd5"},{"problem":26,"code":"( fn [x]\n  (loop [i 1, fib '(1 1)]\n    (if (= i (dec x)) (reverse fib)\n      (recur (inc i) (cons (+ (first fib) (second fib)) fib))\n      )\n    )\n  )","user":"53bd6fcfe4b0d9a98559a6d0"},{"code":"(letfn [(fib [x] (cond (= x 1) 1\n                       (= x 2) 1\n                       :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    #(map fib (range 1 (+ % 1))))","problem":26,"user":"5141abf1e4b02fd87f5064c3"},{"problem":26,"code":"(fn [fib] (loop [acc [1] n 1 i 1] (if (> (count acc) (- fib 1)) acc (recur (conj acc n) (+ n (acc (- i 1))) (inc i)))))","user":"54f6f00fe4b01ecee9d88814"},{"problem":26,"code":"#(take % (map second (iterate (fn [[fst snd]] [snd (+ fst snd)]) [0 1])))","user":"58e7229fe4b056aecfd47cc4"},{"code":"#(take % (map first (iterate (fn [[a,b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn fib [x]\n    (case x\n      1 [1]\n      2 [1 1]\n      (let [prev (fib (dec x))\n            n (count prev)]\n        (conj prev (+ (last prev) (-> prev butlast last))))))","problem":26,"user":"50232eeae4b0b5d8b1bd2397"},{"problem":26,"code":"(fn fibo [n]\n  \"Return fibonacci series\"\n  (loop [cnt 2, acc [1 1]]\n    (cond\n      (= n cnt) acc\n      (< n 3) [1]\n      :else (recur\n              (inc cnt)\n              (conj acc (apply +' (take-last 2 acc)))))))","user":"5d614059e4b0c9e5857d500e"},{"problem":26,"code":"#(letfn [(fib [a b] (lazy-seq (cons a (fib b (+ b a)))))]\n    (take % (fib 1 1)))","user":"56d1afd9e4b0ea9b8538f791"},{"code":"#(take % (rest (map first (iterate (fn [[a b]] [(+ a b) a]) [0 1]))))","problem":26,"user":"528a3e14e4b0239c8a67ae72"},{"problem":26,"code":"(fn [n] (->> n (inc) (range) (drop 1) (map (fn f [x] (if (<= x 2) 1 (+ (f (- x 1)) (f (- x 2))))))))","user":"53d032ace4b00fb29b221306"},{"problem":26,"code":"(fn\n  [remainder]\n  (loop [remaining remainder\n         pre [1 1]]\n    (if (> remaining 2)\n    (recur (- remaining 1) (conj pre (apply + (take-last 2 pre))))\n    pre\n    )))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [x]\n\t(loop [ fibs [] n 1 ]\n\t\t(if (> n  x )\t\t\t;; x <= n --> fibs=[]\n\t\t\t(reverse fibs)\n\t\t\t(recur\n\t\t\t\t(cons\n\t\t\t\t\t(+ (or (first fibs) 1)\n\t\t\t\t\t\t(or (second fibs) 0) )\n\t\t\t\t\tfibs )\n\t\t\t\t(+ n 1) ) ) ) )","problem":26,"user":"52e8ecbbe4b09f7907dd14a0"},{"problem":26,"code":"(fn [n]\n  (if (< n 1) (throw (Exception. \"must be positive integer\"))\n    (loop [c 0\n           acc '(1)]\n      (cond\n        (= c n) (reverse acc)\n        (= c 0) (recur (+ c 1) '(1))\n        (= c 1) (recur (+ c 1) '(1 1))\n        :else   (recur (+ c 1) (conj acc (+ (first acc) (second acc)))\n   )))))","user":"596e2a70e4b069c0a1a19861"},{"problem":26,"code":"(fn [sx] (for [x (range 1 (+ 1 sx))]\n            ((fn fib [n]\n               (cond\n                 (= n 1) 1\n                 (= n 2) 1\n                 (> n 2) (+ (fib (- n 1)) (fib (- n 2)))\n                 )) x)))","user":"59fcc31fe4b01bb0ae8afcef"},{"code":"(fn [n]\n  (take n ((fn fib\n            ([] (fib 1 1))\n            ([a b] (cons a (lazy-seq (fib b (+ a b)))))))))","problem":26,"user":"5252ee94e4b0541d1855b8db"},{"code":"(fn [n]\n  (take n \n    (drop 1 \n      (map first \n        (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4ee3afde535d10e5ff6f5370"},{"problem":26,"code":"(fn [n] (take n (map #(% 0) (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"53161a56e4b08068f379ed3e"},{"code":"(fn [cnt]\n  (take cnt \n    (map second\n      (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","problem":26,"user":"50af3393e4b0a40c9cfb08d7"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [x]\n    (if (< x 2) \n      1 \n      (+ (fib (dec x))\n       (fib (- x 2)))))\n   (range n)))","user":"56946d43e4b0dcc4269f411e"},{"problem":26,"code":"(fn [n]\n  (let [ret '(1)]\n    (loop [n n, prev 0, ret ret]\n      (if (>= 1 n)\n        (reverse ret)\n        (recur (dec n) (first ret) (cons (+ prev (first ret)) ret))))))","user":"563d1648e4b0bfe05bf11846"},{"code":"#(take % ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y))))) 1 1))","problem":26,"user":"4f6160a7e4b0defedf855fbe"},{"problem":26,"code":"(fn [m]\n    (loop [curr 2\n           m m\n           r [1 1]]\n      (if (= curr m)\n        r\n        (recur (inc curr) m (conj r (reduce + (take-last 2 r))))\n        )\n      )\n    )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":26,"code":"#(reduce (fn [v c] (concat v (list (+ (nth v c) (last v))))) '(1 1) (range 0 (- % 2)))","user":"5dbd51cfe4b09f47823971bb"},{"code":"#(letfn [(lazy-seq-fib\n                                 ([]\n                                   (concat [1 1] (lazy-seq-fib 1 1)))\n                                 ([a b]\n                                   (let [n (+ a b)]\n                                     (lazy-seq\n                                       (cons n (lazy-seq-fib b n))))))]\n                       (take % (lazy-seq-fib)))","problem":26,"user":"52b36925e4b0c58976d9ad0b"},{"code":"(fn [x] \n (loop [n x, a 1, b 1, res [] ]\n   (if (= n 0) res\n     (recur (dec n) b (+ a b) (conj res a))\n   )\n )\n)","problem":26,"user":"527c040be4b03e8d9a4a75a7"},{"problem":26,"code":"(fn fibonacci [idx]\n  (if (= 1 idx)\n    (list 1)\n    (if (= 2 idx)\n      (list 1 1)\n      (let [previous (fibonacci (- idx 1))\n            before-previous (fibonacci (- idx 2))\n            sum-of-previous (+ (last previous) (last before-previous))]\n        (concat previous (list sum-of-previous))))))","user":"58ac01f7e4b0005cfeb1a73b"},{"problem":26,"code":"(fn fibn2\n  ([n]\n   (fibn2 [1 1] (- n 2)))\n  ([coll n]\n   (if (< (- n 1) 0)\n     coll\n     (recur (conj coll (+ (last coll) (nth coll (-> (count coll) dec dec)))) (- n 1)))))","user":"569ed695e4b0542e1f8d1488"},{"problem":26,"code":"(fn [x]\n  (loop [r [],n 0]\n    (if (= n x) r\n      (recur (concat r (if (or (= 0 n) (= 1 n)) (list 1)\n        (list (+ (nth r (- n 1)) (nth r (- n 2)))))) (+ n 1)))))","user":"55486ee6e4b0a04f7929955a"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [y,(+ x y)]) '(1 1))))","user":"525d318fe4b0cb4875a45d63"},{"code":"#(map (fn fib [n]\n           (if (> 2 n) 1\n             (+ (fib (- n 1)) (fib (- n 2)))))\n         (range %))","problem":26,"user":"513dcc1ce4b0825f97f7f964"},{"code":"(fn [acc cnt]\n  (if (<= cnt 2) (reverse acc)\n    (recur (cons (+ (first acc) (second acc)) acc)\n           (dec cnt)))) '(1 1)","problem":26,"user":"509251f3e4b09a7d0b586de5"},{"problem":26,"code":"(fn fibon\n  ([cnt]\n   (fibon cnt [1]))\n  ([cnt coll]\n   (if (= (count coll) cnt)\n     coll\n     (if (= (count coll) 1)\n        (fibon cnt (conj coll 1))\n        (fibon cnt (conj coll (+ (first (reverse coll)) (second (reverse coll)))))))))","user":"5dcbe1d7e4b02b31cc3da3bf"},{"problem":26,"code":"( fn [x] ( loop [fibs (vec '(1 1)) i 2] ( if (< i x) ( recur ( conj fibs (+ (last fibs) (last (drop-last 1 fibs)))) (inc i) ) fibs ) ) )","user":"5b3aa98be4b02d533a91bbca"},{"problem":26,"code":"(fn f [n] (rest (reverse \n((fn r [n]\n  (if (> n 1)\n    (let [ret (r (dec n))]\n      (cons (+ (first ret) (second ret)) ret)\n      )\n    [1 0]\n    )\n  ) n)\n      )))","user":"5813a2efe4b0f478707a0614"},{"problem":26,"code":"(fn myfib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (letfn [(lol [n c [x1 x2 & xs :as acc]]\n                (if (= n c)\n                  acc\n                  (lol n (+ c 1) (cons (+ x1 x2) acc))))]\n        (reverse (lol n 2 '(1 1)))))))","user":"54b07c1ee4b09f271ff37d16"},{"code":"(fn foo [index]\n  (loop [prev 1\n         next 1\n         i 1\n         acc [1]]\n    (if (= i index)\n      acc\n    (recur next (+ next prev) (+ 1 i) (conj acc next)))))","problem":26,"user":"4e657c05535d8ccf87e9fe72"},{"problem":26,"code":"(fn [x]\n  (loop [n1 1\n        n2 1\n        acc []]\n    (if (= x (count acc))\n      acc\n      (recur n2\n              (+ n1 n2)\n              (conj acc n1))))\n)","user":"5b9da7fbe4b0c0b3ffbd4b3f"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 2 c 2 r [1 1]]\n    (if (= c n)\n      r\n      (recur b (+ a b) (+ 1 c) (conj r b)))))","user":"58844d43e4b0f1effa3b7696"},{"problem":26,"code":"(fn sol [n]\n  (letfn [[fib [x] (if (<= x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))]]\n    (map fib (range 1 (inc n)))))","user":"5de3661be4b0948ae9d9adfd"},{"code":"(fn [ s ]\n   (reverse\n    (loop [i (- s 2)\n           r '(1 1)]\n      (if (<= i 0)\n        r\n        (recur (dec i) (conj r (+ (first r) (first (rest  r)))))))))","problem":26,"user":"4f2673d7e4b0d6649770a002"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n fib [] a 1 b 1]\n    (if (zero? cnt) fib\n      (recur (dec cnt) (conj fib a) b (+ a b)))))","user":"5c03e927e4b0bdcf453d167b"},{"problem":26,"code":"(fn fibo\n  [n]\n  (map (fn fib [n]\n         (if (< n 2)\n           n\n           (+ (fib(- n 1)) (fib(- n 2))))) (range 1 (+ 1 n))))","user":"57f814fbe4b0d3187e900911"},{"problem":26,"code":"(fn [n] \n  (reverse (loop [n n result '(1 1)] \n    (if (> n 2) \n      (recur (dec n) (cons (+ (first result) (second result)) result)) \n      result))))","user":"56d5bc66e4b0ea9b8538f7c2"},{"code":"(fn [n] \n  (take n \n        ((fn fib [a b] \n           (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"50e647cde4b09e4d78444226"},{"problem":26,"code":"#((fn [n lst] (if (= n 0) lst (recur (dec n) (concat lst [(reduce + (take-last 2 lst))])))) (- % 2) '(1 1))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn [x] (reverse (loop \n          [c (- x 2) acc '(1 1)] \n          (if (= c 0) \n            acc \n            (recur\n             (dec c) \n             (conj acc\n              (+ (first acc) (nth acc 1))\n              ) \n             )))))","problem":26,"user":"50e0d5a3e4b061dbdced723d"},{"problem":26,"code":"(fn [z] (drop 1 (reduce (fn [fib z] (conj fib (apply + (take-last 2 fib)))) [0 1] (range (- z 1)))))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":26,"code":"#(map (fn fib [n]\n       (cond\n         (= n 1) 1\n         (= n 0) 1\n         :else (+ (fib (- n 1)) (fib (- n 2))))\n       ) (range 0 %))","user":"56035cb1e4b04bb52996e1ba"},{"code":"(fn F [n] (take n ((fn f [] (lazy-cat [1 1] (map + (f) (rest (f))))))))","problem":26,"user":"4f038355535dcb61093f6b04"},{"problem":26,"code":"(fn [n]\n  \n  \n  (loop [a 1 b 1  cnt 0 res []]\n    (if (= cnt n)\n      res\n     \n    (recur b (+ a b) (inc cnt  ) (conj res a))\n       \n    )\n  \n  \n  )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn fibs [nfibs]                                                                \n  (map                                                                          \n    (fn fib [n]                                                                 \n      (if (< n 2)                                                               \n        (if (zero? n) 0 1)                                                      \n        (+ (fib (- n 1)) (fib (- n 2)))))                                       \n    (take nfibs (iterate inc 1))))","problem":26,"user":"526397f1e4b03e8d9a4a70b6"},{"problem":26,"code":"(fn [x]\n  (reverse \n    ((fn [n items]\n      (cond\n       (= n (count items)) items\n       (< (count items) 2) (recur n (cons 1 items))\n       :else (recur n (cons (+ (first items) (second items)) items))))\n     x '())))","user":"57ce6090e4b0c746388ab8ab"},{"code":"#(take % (letfn [(f [n m] (cons n (lazy-seq (f m (+ n m)))))] (f 1 1)))","problem":26,"user":"51b3f109e4b0f094dd986fa9"},{"problem":26,"code":"(fn [n]\n      (loop [previous 1\n             current 1\n             n n\n             acc (list previous)]\n        (cond\n          (= n 1) (reverse acc)\n          :else (recur current (+ previous current) (- n 1) (conj acc current)))))","user":"56e11125e4b03a7c14b85a1f"},{"problem":26,"code":"(fn [fib-num]\n  (loop\n    [nums [1 1], remaining (- fib-num 2)]\n    (if (= 0 remaining)\n      nums\n      (let [\n            end (last nums)\n            end2 (nth nums (- (count nums) 2))]\n        (recur (conj nums (+ end end2))\n               (dec remaining))))))","user":"5c7c78c9e4b0d597f478ca94"},{"problem":26,"code":"(fn fl[x] (map (fn f[y] (if (or (= y 1) (= y 0)) 1 (+ (f (- y 1))(f (- y 2))))) (range x)))","user":"559477bce4b0c79f6e1db956"},{"code":"#(take % (map first (iterate (fn x [[s n]] [(+ s n) s]) [1 0])))","problem":26,"user":"4e8df08f535d65386fec213e"},{"code":"(fn [dest]\n      (cond\n       (== dest 1) ([1])\n       (== dest 2) ([1 1])\n       (> dest 2) ((fn [cur last2 last ret]\n                      (if (= cur dest) ret\n                          (recur (inc cur) last (+ last last2)\n                                 (conj ret (+ last last2)))))\n                    2 1 1 [1 1]\n                    )))","problem":26,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":26,"code":"#(\n  loop [x 2, result [1 1]]\n    (if (= % 1) '(1)\n        (if (= % 2) '(1 1) (\n            if (< x %) (recur (inc x) (conj result (+ (last result) (last (butlast result))))) (apply list result)\n        )\n        )\n    )\n )","user":"5e85d0bde4b09a7a73c8bbd6"},{"problem":26,"code":"(fn [v] (reverse ((fn fib [n] (if (= 2 n) '(1 1) (let [l (fib (- n 1))] (conj l (+ (first l) (second l)))))) v)))","user":"5ab3edf0e4b073f17744260d"},{"problem":26,"code":"(fn [n]\n       (rest(map (fn \n  [n]\n  (loop [a 0\n         b 1\n         i 0]\n    (if (= i n)\n      a\n      (recur b \n             (+' a b) \n             (inc i))))) (range (inc n))) ))","user":"5f737899e4b02876ed9fd099"},{"code":"(fn [n]\n  (loop [f 1\n         s 1\n         results '(1 1)\n         i 2]\n    (if (= i n)\n      (reverse results)\n      (recur s (+ f s) (conj results (+ f s)) (inc i)))))","problem":26,"user":"4efb92ce535dced4c769f27a"},{"problem":26,"code":"(fn [n] (loop [i (- n 2)\n               s [1 1]] (if (= i 0)\n                           s\n                           (recur (dec i) (conj s (apply + (take-last 2 s)))))))","user":"54c951b3e4b045293a27f668"},{"problem":26,"code":"#(take \n  %\n  ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)\n  )","user":"5696ed98e4b0dcc4269f4137"},{"problem":26,"code":"(fn [n]\n  (loop [x 0\n         y 1\n         n n\n         fibs []]\n    (if (= n 0)\n      fibs\n      (recur y (+ x y) (dec n) (conj fibs y)))))","user":"5a125a38e4b04bbd27e6da39"},{"code":"(fn [n]\n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"501c1492e4b086d93747d180"},{"problem":26,"code":"(fn fib [x]\n  (loop [y 0 z 1 result [1]]\n    (if (= (count result) x)\n      result\n      (recur z (+ y z) (conj result (+ y z))))))","user":"52cf1e25e4b07d0d72b2739c"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]][y (+ y x)])[1 1])))","user":"60845eb8e4b0736b099e42ef"},{"code":"(fn [n]\n  (loop [x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","problem":26,"user":"5130cb2ae4b08c712d3fae3b"},{"code":"#(take %\n       ((fn fib\n          ([] (fib 1 1))\n          ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","problem":26,"user":"4eb70649535d7eef30807373"},{"problem":26,"code":"(fn [n]\n\t(case n\n\t\t1 '(1)\n\t\t2 '(1 1)\n\t\t(\n\t\t\t(fn [x acc]\n\t\t\t\t(if (<= x (count acc))\n\t\t\t\t\tacc\n\t\t\t\t\t(recur x (concat acc (list (reduce + (take 2 (reverse acc))))))))\n\t\t\tn '(1 1))))","user":"598af379e4b02b9968b84ce6"},{"problem":26,"code":"(fn [x] \n   (loop [counter x final [] nexta 1 nextb 0] \n     (if (zero? counter) final\n      (recur (dec counter) (conj final nexta) (+ nexta nextb) nexta))))","user":"55e20059e4b050e68259b427"},{"problem":26,"code":"#(loop [n %\n      acc []\n      i 1] \n      (cond \n      (= i n) (conj acc (+ (last acc) (nth acc (- (count acc) 2))))\n      (< i 3) (recur n (conj acc 1) (inc i))\n      :else (recur n (conj acc (+ (last acc) (nth acc (- (count acc) 2)))) (inc i) )\n      )\n)","user":"51545663e4b084ca81ee2e18"},{"code":"(fn fib [n]\n  (cond (< n 1) '()\n        (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else\n          (let [fibs (fib (- n 1))]\n             (concat fibs (list (+ (last fibs)\n                                   (last (butlast fibs))))))))","problem":26,"user":"4e2d84bf535deb9a81d77f09"},{"code":"(fn my-fib-seq [n] \n(cond\n    (= n 1) (vector 1)\n    (= n 2) (vector 1 1)\n    :else (let [prev (my-fib-seq (dec n))]\n          \t(vec (conj \n                  \tprev\n                  \t(apply + (take-last 2 prev))\n          ) )    ) \n)\n)","problem":26,"user":"5273b883e4b03e8d9a4a748f"},{"code":"(fn [i]\n  (map (fn f [n]\n         (condp = n \n           0 0 \n           1 1 \n           (+ (f (- n 1)) \n              (f (- n 2)))))\n       (range 1 (inc i))))","problem":26,"user":"4ec74de3535d6d7199dd36df"},{"problem":26,"code":"(fn\n  [x]\n  (reduce \n    (fn [acc i]\n      (if (or (= i 0) (= i 1))\n        (conj acc 1)\n        (conj acc (+ (nth acc (dec i)) (nth acc (- i 2))))))\n   []\n   (range x)))","user":"59b93cd7e4b0a024fb6ae3c7"},{"problem":26,"code":"#(reverse (loop [n (- % 2), s '(1 1)]\n   (if (> n 0)\n     (recur (dec n) (conj s (apply + (take 2 s))))\n     s)))","user":"5453b522e4b0e397800069d0"},{"problem":26,"code":"#(map (fn fib [n]\n\t\t\t(if (<= n 2)\n\t\t\t 1\n\t\t\t (+ (fib (- n 1))\n\t\t\t    (fib (- n 2)))))\n\t\t  (range 1 (+ 1 %1))\n\t\t  )","user":"57614948e4b0994c1922fb83"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (reduce (fn [c _]            \n            (conj c (+' (last c) (last (butlast c))))) \n          [1 1]\n          (range (- n 2))))","user":"562e2c5ce4b0a45d2ff83024"},{"problem":26,"code":"#((fn fib [res a b n]\n    (if (= n 2)\n      res\n      (fib (conj res (+ a b)) (+ a b) a (- n 1)))) [1 1] 1 1 %)","user":"5520af03e4b08d5046aa8a64"},{"code":"#((fn [s i n]\r\n  \t  (if (> i n) s (recur \r\n\t\t\t\t\t    (conj s (+ (nth s (- i 3))\r\n\t\t\t\t\t\t     (nth s (- i 2)))\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t    (+ i 1)\r\n\t\t\t\t\t    n))) [1 1] 3 %)","problem":26,"user":"4e6b04ae535d8ccf87e9ff09"},{"code":"(fn [n]\n  (->>\n   (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n   (map first)\n   (take n)))","problem":26,"user":"515e38ace4b049add99a0538"},{"problem":26,"code":"(fn func [n]\n  (let [fib-seq-iterate\n          (map first (iterate \n                       (fn [[a b]] [b (+ a b)]) [1 1]))]\n  (take n fib-seq-iterate )\n  ))","user":"5bba6571e4b0a20761a235e9"},{"problem":26,"code":"(fn take-fibs\n   [quantity]\n   (loop [fibs [1 1]]\n     (if (= quantity (count fibs))\n       fibs\n       (recur (conj fibs (+ (last fibs) (second (reverse fibs))))))))","user":"5deeb6fde4b093ff7172759f"},{"code":"(let [fib (fn [n acc](if ( < n 2) acc (recur (dec n) (conj acc (+ (first acc) (second acc))))))]\n  #(drop 2 (reverse (fib % '(1 0 0)))))","problem":26,"user":"52077e37e4b03bd50ef5466c"},{"code":"(fn [n] \n  (loop [pos n acc '(1 1)]\n    (if (= pos 2) \n      (reverse acc) \n      (recur (dec pos) (conj acc (+ (first acc) (second acc))))\n    )\n  )\n)","problem":26,"user":"4f40f055e4b0e243712b1fc2"},{"code":"(fn [num]\n           (reverse (cond\n             (= 0 num) '()\n             (= 1 num) '(1)\n             (= 2 num) '(1 1)\n             :else (loop [lst '(1 1)]\n                (if (= num (count lst))\n                  lst\n                  (recur (conj lst (+ (first lst) (first (rest lst))))))))))","problem":26,"user":"4eadc217535d7eef30807321"},{"code":"#(next\n  (loop [t [0 1]]\n    (if (> (count t) %1)\n      t\n    (recur\n      (conj t\n        (+ (nth t (- (count t) 2)) (last t)))))))","problem":26,"user":"4fcc70b3e4b0ee37620e1862"},{"code":"(fn fibonacci22 [x] \n(map (fn fibonacci21 [n] \n  (cond\n                (> 0 n) (prn \"wrong argument\")\n                (= 0 n) 0\n                (= 1 n) 1\n                :else (+ (fibonacci21 (- n 2)) (fibonacci21 (- n 1)))\n    )) (range 1 (+ x 1)))\n)","problem":26,"user":"500c5b4ae4b03d00572d2d88"},{"problem":26,"code":"(fn [cnt] \n  (loop [x () y 1 z cnt]\n   (if (= 0 z) (reverse x) (recur (conj x y) (+ (if (first x) (first x) 0) y) (- z 1)))\n  )\n)","user":"56668386e4b0e91d5f5c5672"},{"code":"(fn [n]\n  (loop [coll [1 1]\n         n (- n 2)\n         a 1\n         b 1]\n    (if (= n 0)\n      coll\n      (let [c (+ a b)]\n      \t(recur (conj coll c) (dec n) b c)))))","problem":26,"user":"536d260be4b0fc7073fd6e55"},{"problem":26,"code":"(fn [n]\n  (take n (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"5edc645ae4b0c7845d86b0f2"},{"problem":26,"code":"(fn [n] (reverse (reduce (fn [a b] (conj a (+ (first a) (second a)))) '(1 1) (range 1 (- n 1)))))","user":"59636cc2e4b066ee0a44b0c7"},{"problem":26,"code":"(fn [m]\n   (map \n    (fn f [n]\n      (if (zero? n)\n        0\n        (if (= n 1)\n          1                   \n          (let [a (f (dec n))\n                b (f (- n 2))]\n            (+ a b)))))(range 1 (inc m)))\n   )","user":"59636b49e4b066ee0a44b0c5"},{"code":"#( take % '(1 1 2 3 5 8 13 21))","problem":26,"user":"504eb604e4b069badc5a33c4"},{"problem":26,"code":"(fn fib [n]\n  ((fn fib-aux [n res a b]\n    (if (= n 0)\n      (reverse res)\n      (recur (dec n) (cons b res) b (+ a b)))) n '() 0 1))","user":"55b25970e4b0da326a65cf7e"},{"problem":26,"code":"#(loop [n % f-seq [] last-v 1 slast-v 1] (if (= n 0) f-seq (recur (dec n) (conj f-seq slast-v) (+ last-v slast-v) last-v)))","user":"5f548678e4b0a0bc16850a7e"},{"code":"#((fn fib [now before nums n] (if (> n 1) (fib (+ before now) now (concat nums (list (+ before now))) (dec n)) nums)) 1 0 '(1) %)","problem":26,"user":"52e4f06be4b09f7907dd1456"},{"problem":26,"code":"(fn [x] (take x \n      (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n      )))","user":"6034e358e4b0d5df2af222d1"},{"code":"(fn [n]\n  (loop [result [1 1] size 2]\n    (if (= size n)\n        result\n        (recur \n          (conj result \n                (reduce #(+ %1 %2) 0 (take 2 (rseq result))))\n          (inc size)))))","problem":26,"user":"4ff35e60e4b0678c553fc350"},{"problem":26,"code":"(fn [n]\n\t(if (< n 0)\n\t\tnil\n\t\t(case n\n\t\t\t0 '(0)\n\t\t\t1 '(1)\n\t\t\t(loop [cnt n acc [1 1]]\n\t\t\t\t(if (= cnt 2)\n\t\t\t\t\tacc\n\t\t\t\t\t(recur (dec cnt) (conj acc (apply + (take-last 2 acc)))))))))","user":"55bb6107e4b01b9910ae29e4"},{"code":"#(take-nth \n  2 \n  (rest \n    (apply \n      concat \n      (take % \n        (iterate (fn [[x y]] [y (+ x y)]) [0 1])))))","problem":26,"user":"5089ebfee4b03217b26a539f"},{"problem":26,"code":"(fn f [n]\n(take n (cons 1 (map #(apply + %) (iterate (fn [[a b]] [b (+ a b)]) '(0 1))))))","user":"551c66dae4b07993ea3788de"},{"code":"(fn [x]\n  (loop [f [1 1]]\n    (if (>= (count f) x) f\n      (recur (conj f (+ (last f) (last (butlast f))))))))","problem":26,"user":"4fcbc18ae4b0ee37620e185c"},{"code":"(fn [n]\n  (loop [iter n\n         lst  []\n         a    1\n         b    1]\n    (if (= iter 0)\n      lst\n      (recur (dec iter) (conj lst a) b (+ a b)))))","problem":26,"user":"53948e96e4b0b51d73faaecc"},{"code":"(fn fibo-list [n]\n  (if (< n 3)\n    (take n '(1 1 2))\n    (let [save (fibo-list (- n 1))]\n       (concat save (list (+ (last save)\n                             (last (butlast save))))))))","problem":26,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":26,"code":"(fn b [x]\n  (for [y (range 1 (inc x))]\n    \n     ((fn fib [z]\n        (case z\n          0 0\n          1 1\n          (+ (fib (- z 2)) (fib (- z 1)))\n        )\n      )\n     y)\n    \n  )\n)","user":"5cc28739e4b0ccb0619627d8"},{"problem":26,"code":"#(take % ((fn fib [a b]\n              (lazy-seq (cons a (fib b (+ a b)))))\n             1 1))","user":"5c79030be4b0fca0c1622830"},{"problem":26,"code":"(fn fib [x] (case x 1 [1] 2 [1 1] (let [bla (fib (dec x))] (conj bla (reduce + (take-last 2 bla))))))","user":"4f035fbe535dcb61093f6a92"},{"problem":26,"code":"(fn [n]\n    (let [fib-seq (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))]\n      (take n fib-seq)))","user":"5c3a896be4b0d62ef62d9f94"},{"code":"#(take \n  %  \n  (map \n    first \n    (iterate \n      (fn \n        [[a b]] \n        [b (+ a b)]) \n      [1 1])))","problem":26,"user":"50be4823e4b0594b91591c8d"},{"code":"(fn f [n]\n  (cond\n    (= n 1) (list 1)\n    (= n 2) (list 1 1)\n    :else (concat (f (- n 1)) (list (reduce + (take-last 2 (f (- n 1)))) ))))","problem":26,"user":"5368a275e4b0243289761e8f"},{"problem":26,"code":"#(take % ((fn fib\n            ([]\n             (lazy-seq\n               (cons 1\n                     (fib 0 1))))\n            ([prev n]\n             (lazy-seq\n               (cons (+' prev n)\n                     (fib n (+' prev n))))))))","user":"4f04664a535dcb61093f6bc1"},{"code":"#(let [f (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))]\n  (map f (range %)))","problem":26,"user":"4fda01cde4b05e33b9224f43"},{"problem":26,"code":"(fn f [n] \n  (if (= n 0) \n    []\n    (if (= n 1)\n      [1]\n      (if (= n 2)\n        [1 1]\n        (loop [iter 2 finals [1 1]]\n          (if (>= iter n)\n            finals\n            (recur \n              (inc iter)\n              (let [x (nth finals (- iter 1))\n                    y (nth finals (- iter 2))]\n                (into finals (vector (+ x y)))))))))))","user":"57b35ecbe4b0fbc9809a277e"},{"code":"(fn [n]\r\n  (loop [a 1, b 1, xs [a b]]\r\n    (if (= n (count xs))\r\n      xs\r\n      (recur b (+ a b) (conj xs (+ a b))))))","problem":26,"user":"4e113a81535d04ed9115e7c5"},{"code":"(fn [n]\n  (reverse\n    (loop [cnt n accum (list) prev 0 cur 1]\n      (if (zero? cnt)\n        accum\n        (recur (dec cnt) (conj accum cur) cur (+ prev cur))))))","problem":26,"user":"50a935b9e4b0a9a42786e8de"},{"code":"(let [fib (fn [xs] (conj xs (+ (last xs) (last (butlast xs)))))]\n  (fn[n] ((apply comp (repeat (- n 2) fib)) [1 1])))","problem":26,"user":"51a768e0e4b0da5f497bde84"},{"problem":26,"code":"(fn fib [x] \n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","user":"57ee9ffbe4b0bfb2137f5bc2"},{"problem":26,"code":"(fn [n]\n   (loop [a 1 b 1 n n result []]\n     (if (= n 0)\n       result\n       (recur b (+ a b) (dec n) (conj result a) ))))","user":"602b90c1e4b0d5df2af22266"},{"code":"#(letfn [(ff [a b] (cons a (lazy-seq (ff b (+ b a)))))]\n    (take % (ff 1 1)))","problem":26,"user":"5161c6a7e4b009fba0926e38"},{"problem":26,"code":"(fn fib\n  ([n] (fib n []))\n  ([n nums]\n   (if (= n 0)\n     nums\n     (if (< (count nums) 2)\n       (recur (dec n) (conj nums 1))\n       (recur (dec n) (conj nums (apply + (take-last 2 nums))))))))","user":"56e4991fe4b03a7c14b85a4f"},{"code":"#(reverse (loop [xs '(1 1) x %] (if (> x 2) (recur (cons (+ (first xs) (second xs)) xs) (dec x)) xs)))","problem":26,"user":"4ef4e5fa535dced4c769f242"},{"problem":26,"code":"(fn [n]\n  (->>\n   [0 1]\n   (iterate (fn [[a b]] [b (+ a b)]))\n   (drop 1)\n   (take n)\n   (map first)))","user":"5abc5a09e4b073f1774426e9"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] [b (+ a b)]) [1 1])))","user":"56df7440e4b0ca2494a095fb"},{"problem":26,"code":"(fn [x]\n      ((fn fibl [x l]\n        (case x\n          0 nil\n          1 (list 1)\n          2 (list 1 1)\n          (let [fl (fibl (- x  1) l)]\n            (let [fb 5]\n              (flatten (cons  fl (list (+ (last fl) (last (drop-last fl))))))\n            )\n          )\n          )\n        ) x nil)\n      )","user":"54ec7f52e4b024c67c0cf853"},{"problem":26,"code":"(fn [n]\n    (take n (map first (rest (iterate (fn [[a b]] [b (+' a b)]) [0 1])))))","user":"5ff64845e4b06df49cee1495"},{"problem":26,"code":"(fn [n]\n  (if (= n 0)\n    ()\n    (if (= n 1)\n      (1)\n      (if (= n 2)\n        (1 1)\n        (loop [fib [1 1]\n         i 2]\n    (if (= i n)\n    (seq fib)\n    (recur (conj fib (reduce + (take-last 2 fib))) (inc i))))))))","user":"5eb46c9de4b00a66d4a9521e"},{"code":"(fn [n]\n  (letfn [(fs [f-2 f-1]\n            (lazy-seq\n              (let [f0 (+ f-2 f-1)]\n                (cons f0\n                      (fs f-1 f0)))))]\n    (take n (cons 1 (fs 0 1)))))","problem":26,"user":"4fa4ef2ee4b081705acca1a9"},{"problem":26,"code":"(fn fib [x]\n  (cond\n  \t(= x 1) [1]\n    (= x 2) [1 1]\n    :else (let [l (fib (dec x))]\n            (conj l (apply + (take-last 2 l)))\n            )))","user":"53ecac57e4b0d648e757f4b3"},{"problem":26,"code":"#(apply list (reduce (fn [a v] (conj a (+ (nth a (- (count a) 2)) (nth a (- (count a) 1))))) [1 1] (range (- % 2))))","user":"5ddd7359e4b0948ae9d9adc5"},{"problem":26,"code":"(fn fib [n]\n    (cond\n      (= 1 n) [1]\n      (= 2 n) [1 1]\n      (> n 2) (conj\n              (fib (- n 1))\n              (+\n                (last (fib (- n 1)))\n                ((comp first rest reverse)(fib (- n 1)))))))","user":"5d9edc21e4b000c986472bc6"},{"problem":26,"code":"(fn fib[n]\n    (cond\n      (= n 1) '(1)\n      (= n 2) '(1 1)\n      (> n 2) (seq (conj\n                (vec (fib (- n 1)))\n                (+\n                  (last (fib (- n 1)))\n                  (last (fib (- n 2)))\n                )\n              ))\n    )\n  )","user":"58d96bdce4b0a4d5acaab638"},{"problem":26,"code":"(fn [x] (loop [x-left (- x 2) current-seq [1 1]]\n          (if (< x-left 1)\n          \t(seq current-seq)\n          \t(recur \n             (dec x-left) \n             (conj current-seq (+\n             \t(nth current-seq (dec (count current-seq)))\n             \t(nth current-seq (- (count current-seq) 2)))))\n             )))","user":"5f1eebcee4b0f565ad998273"},{"problem":26,"code":"(fn fib [n]\n   (if (= n 1)\n       '(1)\n       (if (= n 2)\n           '(1 1)\n           (let [result (fib (dec n))]\n                (sort (conj result\n                     (+ (last (fib (- n 2)))\n                        (last result))))))))","user":"543f1765e4b032a45b86935a"},{"code":"(fn fibo-seq [n]\n     (map (fn fibo [n]\n            (cond \n              (= n 1) 1\n              (= n 2) 1\n              :else (+ (fibo (dec n)) (fibo (dec (dec n)))))) \n          (range 1 (inc n))))","problem":26,"user":"52c8758be4b0c2d177d62135"},{"problem":26,"code":"(fn fib \n  ([n] \n   (if (= n 1) '(1)\n     (if (= n 2) '(1 1) (fib (- n 2) '(1 1)))))\n   ([n s]\n    (if (= n 0) s\n      (fib (- n 1) (reverse (conj (reverse s) (reduce + (take 2 (reverse s)))))))))","user":"57fe840ae4b0d3187e9009d3"},{"problem":26,"code":"(fn\n  [n]\n  (loop [cnt 1\n         fn-2 0\n         final-result [1]]\n    (let [fn-1 (last final-result)]\n      (if (< cnt n)\n        (recur\n          (inc cnt)\n          fn-1\n          (conj final-result (+ fn-2 fn-1)))\n        final-result\n        ))\n    )\n  )","user":"5e300655e4b05b4b01516209"},{"problem":26,"code":"#(map last (take % (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"558466fce4b04192f3441eee"},{"problem":26,"code":"(fn fibo [x]\n  (if (= x 1)\n    '(1)\n    (concat\n      (fibo (dec x))\n      [(reduce + (take-last 2 (fibo (dec x))))])))","user":"59f4c42ce4b0966464fe6ab6"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1,1])))","user":"591aceeee4b09b4ee5954bde"},{"code":"#(take % (\n           (fn fib [f1 f2] (cons f1 (lazy-seq \n                                     (fib f2 (+ f1 f2))\n                                    )\n                           )) 1 1)\n   )","problem":26,"user":"52f021c1e4b05e3f0be25edb"},{"problem":26,"code":"#(map (fn fib [x] (if (or(zero? x)\n                            (= 1 x))\n                       1\n                       (+ (fib (- x 1)) (fib  (- x 2))))) (range %))","user":"5f3989cfe4b0574c87022c79"},{"code":"#(take % (\n          (fn fib [] \n            (lazy-cat [1 1] \n                      (map + (fib) (rest (fib)))\n                      )\n            )\n          )\n       )","problem":26,"user":"519b7d76e4b02a926d9a436e"},{"problem":26,"code":"(fn [n]\n  (map\n   (fn fib [x]\n     (if (< x 3)\n       1\n       (+ (fib (- x 1)) (fib (- x 2)))))\n   (range 1 (inc n))))","user":"5a084a24e4b01bb0ae8afdf2"},{"code":"(fn [num-fibs]\n  (loop [x (- num-fibs 2)\n         fibs [1 1]]\n    (if (zero? x)\n        fibs\n        (recur (dec x) (conj fibs (apply + (take-last 2 fibs)))))))","problem":26,"user":"4eb25069535d7eef30807348"},{"problem":26,"code":"(fn fib [nums]\n  (if  (= nums 0)\n    ()\n    (rest (reverse (loop [nums nums\n           fibseq '(1 0)]\n      (if (= nums 1)\n        fibseq\n        (recur (dec nums) (conj fibseq (+ (first fibseq) (second fibseq))))))\n    )))\n  )","user":"57131dfbe4b07c98581c3a98"},{"problem":26,"code":"(fn [elements]\n  (loop [n elements a 1 b 1 fib []]\n    (if (zero? n) fib\n      (recur (dec n) b (+ a b) (conj fib a)))))","user":"5f393bd6e4b0574c87022c76"},{"problem":26,"code":"#(take %\n ((fn rfib [a b]\n    (cons a (lazy-seq (rfib b (+ a b)))))\n 1 1))","user":"574eb3b1e4b02ea114799247"},{"problem":26,"code":"(fn [s]\n  (reverse\n   ((fn f [i m n a]\n      (if (= i s)\n        a\n        (f (+ i 1)\n           n\n           (+ m n)\n           (cons n a))))\n    0 0 1 '())))","user":"5740f821e4b05c31a32c085e"},{"code":"(fn fib\n\t([c] (reverse (fib (- c 2) '(1 1))))\n\t([c s]\n\t  (if (> c 0)\n\t  \t(fib (dec c) (conj s (+ (first s) (second s))))\n\t  \ts\n\t  \t)))","problem":26,"user":"53981cbce4b0b51d73faaef5"},{"problem":26,"code":"(fn fibo [x]\n  (loop [awal 1 result [1] ]\n    (if (= x (count result))\n      result\n      (recur (+ awal (last result)) (conj result awal)))))","user":"5643ba10e4b0018b46ad8bff"},{"problem":26,"code":"#(loop [iter 1 fib [0 1]]\n     (if (= iter %)\n         (rest fib)\n         (recur (inc iter) (conj fib (+ (last (pop fib)) (last fib))))\n         )\n     )","user":"5d6d7e0de4b04d129b00f2bf"},{"code":"(fn [n]\n  (reverse\n    (loop [n n a 1 b 1 acc []]\n      (if (< n 1) acc\n        (recur (dec n) b (+ a b) (cons a acc))))))","problem":26,"user":"53800d99e4b06839e8705ebd"},{"problem":26,"code":"(fn myfib\n  [cnt]\n  (case cnt\n    1 [1]\n    2 [1 1]\n    (let [pfib (myfib (dec cnt))\n          pfibr (reverse pfib)]\n      (conj pfib (+ (first pfibr) (second pfibr))))))","user":"584cc92be4b0b7285a6f4e2b"},{"problem":26,"code":"#(loop [res [1 1] i 2 n 1 m 1]\n  (if (< i %)\n    (recur (conj res (+ n m)) (inc i) m (+ n m))\n    res))","user":"577c12dfe4b0d3393e5deb2f"},{"problem":26,"code":"#(take % (map first (iterate (fn[[x,y]] [y (+' x y)]  ) [1,1] ) ))","user":"575bd5f9e4b02ea114799365"},{"problem":26,"code":"(fn take-first-x-fibo [x]\n  (take x \n        (map first (iterate (fn [[a b]] [b (+ a b)])[1N 1N]))))","user":"566e5e8de4b0a866af6896d9"},{"code":"(fn [x]\n  (take x\n    ((fn fib [y z]\n      (cons y (lazy-seq (fib z (+ z y)))))\n      1 1\n    )\n  )\n)","problem":26,"user":"4fb7b80ae4b081705acca2d4"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1 \n         n (- n 2)\n         acc [a b]]\n    (let [c (+ a b)]\n      (if (> n 0) (recur b c (dec n) (conj acc c))\n      (apply list acc)))))","user":"5f37839ee4b0574c87022c59"},{"problem":26,"code":"(fn my-fib [n]\n (loop [fib1 1\n         fib2 1\n         result []]\n    (if (= (count result) n)\n      result\n      (recur fib2 (+ fib1 fib2) (conj result fib1)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn fib [n] \n  (if (< n 3)\n    (repeat n 1)\n    (let [fibd (fib (dec n))]\n      (concat fibd (list (+ (last fibd) (second (reverse fibd))))))))","problem":26,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":26,"code":"(fn fib [x] \n  (let [f0 1\n        f1 1]\n        ((fn [lst n] \n          (let [len \n                  (- (count lst) 1)\n                newlst \n                  (conj lst (+ (lst len) (lst (- len 1))))]\n            (if (> n 0) \n              (recur newlst (- n 1)) \n              lst\n            )))\n          [f0 f1] (- x 2))\n  ))","user":"5b02ab12e4b0cc2b61a3bd53"},{"problem":26,"code":"(fn [number]\n  (loop [mem []\n         cur 0\n         before-before-last 0\n         before-last 0]\n    (cond\n      (= cur number) mem\n      (= cur 0) (recur (conj mem 1) (inc cur) 0 1)\n      (= cur 1) (recur (conj mem 1) (inc cur) 1 1)\n      :else (recur (conj mem (+ before-before-last before-last ))\n                   (inc cur)\n                   before-last\n                   (+ before-last before-before-last)\n             )\n      )\n    ))","user":"5ccaed31e4b0ccb061962877"},{"problem":26,"code":"(fn [number]\n  (apply list (loop [fib-seq [1 1]\n                     counter (- number 2)]\n                (if (= counter 0)\n                  fib-seq\n                  (let [first (last fib-seq)\n                        second (nth fib-seq (- (count fib-seq) 2))]\n                    (recur (conj fib-seq (+ first second))\n                           (dec counter)))))))","user":"55e22f54e4b050e68259b42e"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"5545eebee4b0a04f79299539"},{"problem":26,"code":"(fn [x] (reverse (reduce (fn [r i] (conj r (apply + (take 2 r) ))) '(1 1) (range 2 x))))","user":"595131bee4b066ee0a44aea9"},{"code":"(fn [l] (take l ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","problem":26,"user":"4fea08a9e4b0547ebccb2484"},{"code":"#(cond (= % 1) '(1)\n\t      (= % 2) '(1 1)\n\t      :else\n\t      (loop [num 2\n\t\t     lst [1 1]]\n\t\t(if (= % num)\n\t\t  lst\n\t\t  (recur (inc num) (conj lst (+ (last lst) (last (butlast lst))))))))","problem":26,"user":"503539dee4b0ed9c821488f6"},{"problem":26,"code":"(fn\n  [n]\n  (let [fib (fn aff [a b] (lazy-seq (cons a (aff b (+ a b)))))]\n    (take n (fib 1 1))))","user":"56e24e68e4b03a7c14b85a34"},{"problem":26,"code":"#(take % \n   ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"573678eae4b0cd1946bd1034"},{"code":"#(reduce (fn [n c] (let [x (last n) y (last (butlast n))] (conj n (+ x y)))) [1 1] (range 2 %))","problem":26,"user":"4fc5e24ee4b0ee37620e1801"},{"problem":26,"code":"(fn [X]\n  (loop [remain (- X 2)\n         result [1 1]]\n    (if (= remain 0) (seq result)\n      (recur (dec remain) (conj result (+ (last result) (nth result (- (count result) 2))))))))","user":"5632365ce4b0bfe05bf1179d"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) acc '(1 1)]\n    (if (zero? n) (reverse acc)\n      (recur (dec n) (cons (+ (first acc) (second acc)) acc)))))","user":"5409f8eae4b0addc1aec66e6"},{"problem":26,"code":"(fn fibonacci-seq\n  [n]\n  (let [fib (fn fib [n] (cond (= n 1) 1\n                          (= n 2) 1\n                          :default (+ (fib (- n 1))\n                                      (fib (- n 2)))\n                              ))]\n    (map fib (take n (iterate inc 1))))\n  )","user":"550ff2a3e4b06e50f9beb17f"},{"code":"#(take %\r\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"50b47c46e4b0c464d223d1b8"},{"problem":26,"code":"(fn self [x] \n   (if (= x 2) \n     [1 1] \n     (let [y (self (- x 1))]\n         (conj \n           y\n           (+ \n             (last y) \n             ((comp second reverse) y)\n           ) \n         )\n     ) \n   )\n  )","user":"568cdedce4b0dcc4269f40bb"},{"problem":26,"code":";#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a)))))1 1))\n;#(take %3 (#(lazy-seq (cons % (fib %2 (+ %2 %))))[1 1])))","user":"57ee46c7e4b0bfb2137f5bb3"},{"code":"(fn fib[n]\n  (case n\n  0 '()\n  1 '(1)\n  2 '(1 1)\n  (let [prev (fib (- n 1))]\n    (flatten (list prev (+ (nth prev (- n 2)) (nth prev (- n 3))))))))","problem":26,"user":"52b63875e4b0c58976d9ad41"},{"code":"(fn[n](loop [level n x 1 y 1 z [1 1]]   \n  (if (= level 2) z (recur (dec level) y (+ x y) (conj z (+ x y))))))","problem":26,"user":"4ec75829535d6d7199dd36e1"},{"code":"#(map (fn f [n]\n  (if (<= n 2)\n    1\n    (+ (f (- n 1)) (f (- n 2))))) (range 1 (+ % 1)))","problem":26,"user":"4e1fe7f1535d04ed9115e810"},{"problem":26,"code":"(fn [n] (letfn [(fib \n          ([]\n          (fib 0 1))\n          ([a b]\n           (lazy-seq (cons b (fib b (+ a b))))))]\n  (take n (fib))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn my-fib\n  ([index] (my-fib index 1 0))\n  ([index n-1 n-2]\n    (if (= index 0) \n      []\n      (let [n (+ n-1 n-2)]\n        (cons n-1 (my-fib (- index 1) n n-1))))))","problem":26,"user":"4ffc89e9e4b0678c553fc3dc"},{"code":"(fn\n  [idx]\n  (last (take (- idx 1) (iterate #(let [a (second (reverse %)) b (first (reverse %))] (conj % (+ a b))) [1 1]))))","problem":26,"user":"53207e3de4b09d4e7a9b54a3"},{"code":"#(take % ((fn fib [a1 a2]\r\n  (cons a1 (lazy-seq (fib a2 (+ a1 a2))))) 1 1))","problem":26,"user":"505dd5c4e4b0e6aca564be0e"},{"problem":26,"code":"#(reverse (loop [x 0\n                 acc '()]\n            (if (= x %) \n              acc \n              (if (< x 2) \n                (recur (+ x 1) (conj acc 1)) \n                (recur (+ x 1) (conj acc (+ (nth acc 0) (nth acc 1))))))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":26,"code":"(fn [a] (loop [arr (- a 1) rev [1]] (if (zero? arr) (reverse rev) (recur (- arr 1) (cons (+ (first rev) (or (second rev) 0)) rev)))))","user":"544ff52fe4b0e3978000699b"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         b [1 1]]\n    (if (= i n)\n      b\n      (recur (inc i)\n             (conj b (+ (last b) (last (butlast b))))))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":26,"code":"#(map \n  (fn fib [n]\n     (if (< n 2)\n       1\n       (+ (fib (- n 1)) (fib (- n 2)))))\n  (range %))","user":"54857e3be4b0e286459a11ad"},{"problem":26,"code":"(fn [j] ((fn fib [i coll m n] (if (= 0 i) coll (recur (dec i) (conj coll m) n (+ m n)))) j [] 1 1))","user":"53ed6befe4b0d648e757f4c5"},{"problem":26,"code":"(fn [x] (nth(iterate #(conj % (+ (last(butlast %))(last %)))[1 1])(- x 2)))","user":"557e8326e4b05c286339e0d7"},{"problem":26,"code":"(fn [n]\n      (letfn [(fib [x y]\n                (lazy-seq (cons x (fib y (+ x y)))))]\n        (take n (fib 1 1))))","user":"5ebc7c13e4b00a66d4a95267"},{"problem":26,"code":"(fn [x] (loop [members x result [1 1] ]\n               (if (= members 2) result\n               \t(recur (dec members) (conj result (reduce + (take-last 2 result))))\n               )\n          )\n  )","user":"57d588a5e4b0bd073c2023b6"},{"code":"(fn fibs\n  [x]\n  (loop [y 1 result [1]]\n    (if (= (count result) x)\n      result\n      (recur (+ y (last result)) (conj result y)))))","problem":26,"user":"527c9c08e4b0757a1b171366"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 2)\n    [1 1]\n    (let [f (fib (dec x))] (conj f (apply + (take-last 2 f))))))","user":"57763002e4b0979f89651631"},{"problem":26,"code":"(fn nfib [n] (take n ((fn fib-seq []\n  (letfn [(fib-internal [curr next]\n            (lazy-seq (cons curr (fib-internal next (+ curr next)))))]\n    (fib-internal 1N 1N))))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [n]\n  (letfn [(fib [n]\n\t\t\t\t(if (< n 2)\n\t\t\t\t1\n\t\t\t\t(+ (fib (dec n)) (fib (- n 2)))))]\n\t\t(map #(fib %) (range n))))","problem":26,"user":"500854c4e4b028e089d3518c"},{"code":"(fn [n] (loop [cnt 0\n               result []]\n          (if (< cnt n)           \n            (recur (+ cnt 1) (cons (if (< cnt 2)\n                                     1\n                                     (+ (nth result 1) (first result)))\n                               result))\n            (reverse result))))","problem":26,"user":"52f304b4e4b05e3f0be25f07"},{"code":"(\n fn [x]\n (\n  reverse\n  ((\n   fn fiblist [y]\n    (\n     if\n     (= y 1)\n     [1]\n     (\n      if\n      (= y 2)\n      [1 1]\n      (#( cons ( + (first %1) (second %1)) %1 ) (fiblist (- y 1)))\n     )\n    )\n    \n    )\n   x\n  )\n )\n)","problem":26,"user":"51f687c2e4b06ff1c25c52cb"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    (let [fibs (fib (- n 1))]\n      (conj fibs (+ (last fibs) (last (pop fibs)))))))","user":"596296e9e4b066ee0a44b0b6"},{"code":"(fn fib [n]\n  (loop [i 0\n         coll []]\n    (cond\n      (> i n) coll\n      (< i 3) (recur (inc i) (vec (take i [1 1])))\n      :else   (recur (inc i) (conj coll (->> coll (take-last 2) (apply +))))\n      )\n    )\n  )","problem":26,"user":"51e24a04e4b01e5198146430"},{"problem":26,"code":"(fn [x]\n  (loop [i []\n         x x\n         previous 0]\n     (if (= x 0)\n       i\n       (recur\n        (if (empty? i)\n         (conj i 1)\n         (conj i (+ (last i) previous)))\n        (dec x)\n        (if (empty? i)\n          0\n          (last i))))))","user":"5c34f7efe4b0d62ef62d9f5b"},{"code":"#(for [fibn (range 1 (inc %))] ((fn fib [n] (if (< n 2) n (+ (fib (dec n)) (fib (- n 2))))) fibn))","problem":26,"user":"5137c3b0e4b0509a8b470482"},{"code":"(fn [n]\n  (loop [i n a 0 b 1 s ()]\n    (if (= i 0)\n      (reverse s)\n      (recur (dec i) b (+ a b) (cons b s)))))","problem":26,"user":"4f1d467c535d64f60314648a"},{"problem":26,"code":"(fn fib-seq [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else (concat (fib-seq (- n 1))\n                      [(+ (last (fib-seq (- n 1)))\n                          (last (fib-seq (- n 2))))])))","user":"5826a3b7e4b051871117befc"},{"problem":26,"code":"(fn [x]\n  (loop [i 2 seq [1 1]]\n    (if (= i x) \n      (for [num seq] num) \n      (recur (inc i) (conj seq (apply + (take-last 2 seq)))))))","user":"56081222e4b046a4fc0ac004"},{"code":"(fn fib\r\n  [n]\r\n  (if (= n 2)\r\n    [1 1]\r\n    (let [p (fib (- n 1))]\r\n      (conj p (+ (last p) (last (butlast p)))))))","problem":26,"user":"4f17ab99535d64f603146457"},{"problem":26,"code":"(fn [n] ( let [fib (fn fibo [a b] (cons a (lazy-seq (fibo b (+ b a)))))] (take n (fib 1 1))))","user":"5b36eae0e4b02d533a91bba2"},{"code":"#(loop [fs [1] fa 0 fb 1 n (dec %)]\n  (if (pos? n)\n    (recur (conj fs (+ fa fb)) fb (+ fa fb) (dec n))\n    fs))","problem":26,"user":"4ed06ea6535d44c135fd68c4"},{"code":"(fn [x]\n  (loop [ms [1] mx x my 1 mz 1]\n    (if (= mx 1) (seq ms)\n        (recur (conj ms mz) (dec mx) mz (+ my mz)))))","problem":26,"user":"4e9629c2535dbda64a6f6b3f"},{"code":"x","problem":26,"user":"52e635b3e4b09f7907dd146f"},{"code":"#(take %\n       (map last\n            (iterate\n             (fn [[a b]]\n               [b (+ a b)])\n             [0 1])))","problem":26,"user":"537e104ce4b06839e8705e9a"},{"problem":26,"code":"#(loop [cnt % result [0 1]]\n    (if (= 1 cnt)\n      (rest result)\n      (recur (dec cnt) (conj result (+ (last (butlast result)) (last result))))))","user":"543a84a1e4b032a45b869328"},{"problem":26,"code":"(fn [x]\n\t(loop [a 0\n\t\t   s [0 1]]\n\t\t(if (> (+ 2 a) x)\n\t\t\t(rest s)\n          (do\n\t\t\t(recur (inc a) (conj s (+ (last s) (nth s (- (count s) 2)))))))))","user":"51a4d802e4b0def3c5c5869a"},{"code":"#(take %  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"50b51c06e4b0c464d223d1c1"},{"code":"#(take %1 (map first (iterate (fn [[a b]]  [b (+ a b)]) [1 1])))","problem":26,"user":"537b1083e4b06839e8705e64"},{"code":"(fn fib [n]\n  (cond (< n 1) []\n        (= n 1) [1]\n        (= n 2) [1 1]\n        (> n 2) (let [old (fib (dec n))]\n                  (conj old (reduce + (take-last 2 old))))))","problem":26,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":26,"code":"(fn fib \n  [x] \n  (if (= 1 x) \n    '(1) \n    (if (= 2 x) \n      '(1 1) \n      (let [y (fib (- x 1))] \n        (concat y (list (apply + (take 2 (reverse y)))))))))","user":"5463fbbde4b01be26fd746ca"},{"code":"(fn fib [x]\n     (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n     )","problem":26,"user":"4fe9ef2fe4b0547ebccb2479"},{"code":"(fn [n] (reverse (last\n              (take (- n 1) (iterate (fn [s] (conj s (+ (first s) (second s)))) '(1 1))))))","problem":26,"user":"4fb6918ae4b081705acca2c9"},{"code":";; Erased my original soln awhile back. I'm sure it was some long monstrosity of righteous recursion.\n\n;; let's start with (range n). since n is parameter that is passed, (range 1 n) will return a list\n;;  (1 2 ...n-1)\n;; Now, let's pass that along with an initial vector of [1 1] to a function that takes a vector and\n;; multiple elements in a list (hence the underscore) so\n;; fn [[1 1] (1 2)] returns [1 (+ 1 1)] -> [1 2]\n;; since we are using reductions, that will be our first element in our list. Next element is:\n;; fn [[1 2] (1 2)] returns [2 (+ 1 2)] -> [2 3]\n;; We get a list ([1 1] [1 2] [2 3])\n;; Now we take the first of each of those by mapping and get (1 1 2)\n(fn [n]\n  (map first (reductions \n              (fn [[a b] _] [b (+ a b)]) [1 1] (range 1 n))))","problem":26,"user":"50955676e4b087f34d351ab1"},{"code":"(fn [x] \n  (reverse\n   (drop (- 8 x) (reverse '(1 1 2 3 5 8 13 21)))\n  )\n)","problem":26,"user":"52e80e87e4b09f7907dd1492"},{"problem":26,"code":"(fn [montako] (take montako ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","user":"553e2da3e4b0a04f792994ea"},{"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fib 1 1))))","problem":26,"user":"52950ab6e4b02ebb4ef7501a"},{"problem":26,"code":"(fn [n]\n  (take n \n        (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"(fn f [n] (if (< n 3) (vec (take n [1 1])) (let [p (f (dec n))] (conj p (+ (last p) (p (- (count p) 2)))))))","problem":26,"user":"50ed4626e4b01236b1d4983c"},{"code":"#(take %1 '(1 1 2 3 5 8 13 21))","problem":26,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":26,"code":"#(reverse (reduce (fn [result value] (conj result (+ (first result) (second result)))) '(1 1) (range 3 (+ % 1))))","user":"603ba3a8e4b0d5df2af22300"},{"problem":26,"code":"#(take %\n  (map first\n    (iterate \n     (fn [[i1 i2]] [i2 (+ i1 i2)])\n      [1 1]\n    )\n  )\n )","user":"5bd999cce4b0ed4b8aab4bf4"},{"code":"(fn [counter]\n  (loop [c (- counter 2)\n         acc '(1 1)]\n    (if (or (neg? c) (zero? c))\n      (reverse acc)\n      (recur (dec c) (conj acc (+ (first acc) (second acc)))))))","problem":26,"user":"51502056e4b098b221effc25"},{"code":"(fn [x] \n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n    1 1 )))","problem":26,"user":"506c2006e4b080c1a96bd6bc"},{"problem":26,"code":"(fn fib-nth [n] (first (drop (- n 2) (iterate #(conj % (+ (last %) (second (reverse %)))) [1 1]))))","user":"5463c824e4b01be26fd746c5"},{"problem":26,"code":"(fn [n]\n  (if (< n 3)\n    (into [] (repeat 1))\n    (loop [c 2, acc [1 1], n1 1, n2 1]\n      (if (= c n)\n        acc\n        (let [next (+ n1 n2)]\n          (recur (inc c) (conj acc next) n2 next))))))","user":"541b1f25e4b01498b1a71a63"},{"problem":26,"code":"#(reverse (reduce (fn [[x y :as r] n] (cons (+' x y) r)) [1 1] (range 2 %)))","user":"5a9bfd57e4b0d174b936c7d0"},{"problem":26,"code":"(fn [x]\n  (loop [result '()\n         n 1]\n    (if (= x (count result)) (reverse result)\n      (recur (cons n result)\n             (if (empty? result) n\n               (+ n (first result)))))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":26,"code":"(fn -fibs [n]\n  (loop [n n xs '(1 1)]\n    (if (< n 3) \n      (reverse xs)\n      (recur (dec n) (cons (+ (first xs) (second xs)) xs)))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"problem":26,"code":"(fn [t]\n    (let [a (atom 1) b (atom 1) r (atom [1 1])] (do\n        (dotimes [n (- t 2)] (let [a1 @a] (reset! a @b) (reset! b (+ @b a1)) (reset! r (conj @r @b)) ))\n        (identity @r)\n    ))\n)","user":"5669eb9ae4b04acd4f672e02"},{"code":"(fn [n] (take n (map #(first %) (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [1 1]))))","problem":26,"user":"4f702dcae4b07046d9f4eff4"},{"problem":26,"code":"(fn [x]\n  (cond\n   \t(= x 0)\n    []\n    (= x 1)\n    [1]\n    :else\n    (loop [res [1 1]]\n      (if (= x (count res))\n        res\n       \t(recur (conj res (+ (last res) (first (rest (reverse res))))))\n      )\n    )\n  )\n)","user":"55fd0d19e4b0f488688e067a"},{"problem":26,"code":"(fn [r k n]\n  (if (> k n)\n    (reverse r)\n    (if (< k 3)\n      (recur (cons 1 r) (inc k) n)\n      (recur (cons (reduce + (take 2 r)) r) (inc k) n))))\n  [] 1","user":"564dc062e4b0284900eef68c"},{"problem":26,"code":"(fn  [n]  (cond (= n 1) [1]  (= n 2)[1 1]\n                                      :else\n                                        (loop [ c 2\n                                               seq [ 1 1]\n                                           ]\n                                         (  if(= n c)\n                                           (reverse seq)\n                                           (\n                                             recur (inc c) \n                                             (cons  (+ (first seq) (second seq) ) seq\n                                                   )\n                                             )\n                                            \n                                          )\n                                          )\n                                        )\n                                    )","user":"5b9d3913e4b0c0b3ffbd4b37"},{"code":"(fn [n]\r\n    (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f9c4080e4b0dcca54ed6d1a"},{"problem":26,"code":"#(take % (letfn [(a [b c] (lazy-seq (cons b (a c (+ b c)))))] (a 1 1)))","user":"55b6a63ae4b01b9910ae299b"},{"code":"#(map (fn fib [i]\n  (if (<= i 1)\n    i\n    (+ (fib (- i 1)) (fib (- i 2)))))\n  (range 1 (inc %)))","problem":26,"user":"4f77dc7be4b0fbe0118ec584"},{"problem":26,"code":"(fn [x]\n  (map (fn f [y]\n         (if (<= y 2)\n           1\n           (+ (f (- y 2)) (f (- y 1)))\n          )\n        ) (map inc (range x)))\n )","user":"592ac550e4b072a2710fcf27"},{"problem":26,"code":"(fn [m]\n  (map (fn fib [n]\n  \t\t\t(if (<= n 1) 1\n  \t\t\t(+ (fib (- n 1) ) (fib (- n 2)))))\n       (range 0 m)))","user":"532f8569e4b019098a6f8b4f"},{"code":"(fn [n]\n    (reduce (fn [v, n] \n                (conj v \n                      (+ (last v) (last (butlast v))))) \n            [1 1] \n            (range (- n 2))))","problem":26,"user":"5140b7bae4b076604f1aa55b"},{"problem":26,"code":"#(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  (take %1 (fib 1 1)))","user":"54c9ced5e4b045293a27f680"},{"code":"#(loop [result [1 1] n %1] (if (= n 2) result (recur (conj result (+ (last result) (last (drop-last result)))) (dec n))))","problem":26,"user":"50e7cef1e4b077ad597af36a"},{"problem":26,"code":"(fn [x] \n  (loop [out '(1 1)\n         num (- x 2)]\n    (if (< 0 num)\n      (recur (concat out (list (+ (last out) (nth out (- (count out) 2))))) (dec num)) out)))","user":"53b685e0e4b047364c0444c7"},{"problem":26,"code":"(fn fib [x]\n   ((fn subfib [nm1 nm2 n]\n      (when (> n 0)\n\t    (cons (+ nm1 nm2)\n              (subfib (+ nm1 nm2) nm1 (- n 1))\n        )\n      )\n     )\n     0 1 x)\n)","user":"5ff214e7e4b05ac5b16ea1fa"},{"code":"(fn\n  [x]\n  (map\n    (fn fib\n      [y]\n      (if (<= y 1)\n        y\n        (+ (fib (- y 1)) (fib (- y 2)))))\n    (take x (iterate inc 1))))","problem":26,"user":"4ea95e56535d7eef30807302"},{"code":"(fn fibo [x]\n  \n  (if (= x 1)\n    [1]\n    (if (= x 2 )\n      [1 1]\n  \t\t(\n     \t\n   \t\tconj (fibo (- x 1)) ( + (last (fibo (- x 1))) (last (fibo (- x 2))) )\n     \n\t    )\n      )\n   \n   \n   \n   )\n  \n  )","problem":26,"user":"5372c830e4b06d7f452d9dff"},{"problem":26,"code":"#(take % (map first \n              (iterate (fn [[a b]]\n                     [b (+ a b)]) [1 1])))","user":"562e05e0e4b0a45d2ff83023"},{"problem":26,"code":"(fn \n  [x]\n  (case x\n\n    1 [1]\n\n    2 [1 1]\n\n    (loop\n        [tot [1 1]\n         times (- x 2)]\n      (if (= times 0)\n        tot\n        (recur (conj tot (+ (last tot) (last (butlast tot)))) (dec times))))))","user":"57bf8e39e4b05aa3c4741c7f"},{"problem":26,"code":"(fn fib [n]\n  (loop [cnt 2 acc '(1 1)]\n    (cond (= n cnt) (reverse  acc)\n          (= n 1)   '(1)\n          (= n 2)   '(1 1)\n          :else     (recur (inc cnt) (conj acc (+ (first acc) (second acc)))))))","user":"5762bf13e4b0994c1922fbae"},{"code":"(fn fib [x] (if (= x 2) (vector 1 1) (conj (fib (dec x)) (reduce + (drop (- x 3) (fib (dec x)))))))","problem":26,"user":"50e86794e4b0ebbe794eb7e4"},{"problem":26,"code":"#(loop [x 1 y 0 acc [] len %]\n   (if (= len 0) acc (recur (+ x y) x (conj acc x) (dec len))))","user":"591a7ce9e4b09b4ee5954bd8"},{"problem":26,"code":"#(loop [n 0, result []]\n   (if (= % n)\n     result\n     (let [next (case n 0 1, 1 1, (apply + (take-last 2 result)))]\n       (recur (inc n) (conj result next)))))","user":"504e15a8e4b078edc5f593c1"},{"code":"(fn [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n))","problem":26,"user":"504d0116e4b022602c20b089"},{"problem":26,"code":"(fn [x] (map (fn fib [n]\n  (if (<= n 1)\n    1\n    (+ (fib (- n 1)) (fib (- n 2))))) (range x)))","user":"54fa1641e4b0cf870d9346fc"},{"problem":26,"code":"(fn [m] (rest (map (fn [n] (loop [k 0 b 1 a 0] (if (= k n) a (recur (inc k) (+ b a) (- (+ b a) a) )) )) (range (inc m)))))","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn fib [len]\n  ((fn fib-next [i j len]\n      (if (= 0 len)\n          '()\n          (list* i \n            (fib-next j (+ i j) (- len 1)))))\n    1 1 len))","problem":26,"user":"4f03818e535dcb61093f6b00"},{"problem":26,"code":"(fn fib [limit] (reduce (fn [acc _] (concat acc [(apply + (take-last 2 acc))]) ) '(1 1) (range 2 limit)))","user":"6031926ae4b0d5df2af222ac"},{"problem":26,"code":"(fn [n]\n  (cond\n   (<= n 0) ()\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (loop [fs [1 1] i 3]\n           (let [new-fs (conj fs (+ (fs (- i 3)) (fs (- i 2))))]\n             (if (= i n)\n               new-fs\n               (recur new-fs (inc i)))))))","user":"5fef4292e4b05ac5b16ea1d7"},{"code":"(fn [size]\n  (loop [remaining size acc [] prelast 0 lst 0]\n    (if (= 0 remaining)\n      acc\n      (if (= 0 (count acc))\n        (recur (- remaining 1) (conj acc 1) lst 1)\n        (recur (- remaining 1) (conj acc (+ prelast lst)) lst (+ prelast lst))))))","problem":26,"user":"513294fce4b039bac947cbb8"},{"problem":26,"code":"(fn [n] \n    (loop [seq [1 1]]\n      (if (< n 3)\n        1\n      (if (= n (count seq))\n        seq\n        (recur (conj seq (apply + (subvec seq (- (count seq) 2)))))\n      ))))","user":"5b8aa82ee4b0c0b3ffbd49b3"},{"problem":26,"code":"(fn [n]\n      (map\n           (fn f [m]\n               (if (<= m 2)\n\t\t   1\n                   (+ (f (- m 2)) (f (- m 1)) )\n               )\n           )\n           (range 1 (+ 1 n) )\n      )\n)","user":"568513c4e4b04eec3ec5cfc5"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([a b] (lazy-seq (cons a (fib b (+ a b)))))\n  ([n] (take n (fib))))","user":"5af3aa42e4b0cc2b61a3bc8c"},{"code":"#(map\n  (fn fib [n]\n  \t(if (or (zero? n) (= 1 n))\n      1\t\n      (+ (fib (dec n)) (fib (dec (dec n))))))\n  (range %))","problem":26,"user":"51740b65e4b0d277d717bc67"},{"problem":26,"code":"(fn [n]\n\t\t (map (fn fib[X]\n\t\t\t\t(cond \n\t\t\t\t\t(= X 0) 0\n\t\t\t\t\t(= X 1) 1\n\t\t\t\t\t(= X 2) 1\n\t\t\t\t\t:else (+ (fib (- X 2)) (fib (dec X)))))\n\t\t(range 1 (inc n))))","user":"5f0dfa48e4b0f30dddfb5d55"},{"problem":26,"code":"(fn fibos [n]\n\t(take n (map\n\t\t\t#(second %)\n\t\t\t(iterate (partial apply #(vector %2 (+ %1 %2))) [0 1]))))","user":"5779556de4b0979f8965166e"},{"problem":26,"code":"#(take %(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5417385fe4b01498b1a71a08"},{"problem":26,"code":"(fn [i]\n  (if (< i 3)\n    (take i [1 1])\n\t(loop [fibs [1 1]]\n      (if (= (count fibs) i)\n        fibs\n        (let [n-1 (last fibs)\n              n-2 (nth fibs (- (count fibs) 2))\n              n (+ n-1 n-2)]\n          (recur (conj fibs n)))))))","user":"53fb5256e4b0de5c4184857f"},{"problem":26,"code":"(fn [n] \n  (take n \n    (map \n     first\n     (iterate (fn [[a b]]\n                [b (+ a b)])\n              [1 1]))))","user":"55380eeae4b09218d5f44fd9"},{"problem":26,"code":"#(loop [i 1 a 0 b 1 acc []] (if (>= i %1) (conj acc b) (recur (+ i 1) b (+ a b) (conj acc b))))","user":"58a31ecee4b02bd94d917ee7"},{"code":"#(if (= %3 1) % (recur (conj % %2) (+ (peek %) %2) (- %3 1))) [1] 1","problem":26,"user":"4ef2d243535dced4c769f221"},{"code":"#(loop [n % s '(1)]\n  (if (= (count s) n)\n    s\n    (recur n (concat s (list (apply + (take-last 2 s)))))))","problem":26,"user":"4f7c4eb7e4b06e829148e1af"},{"problem":26,"code":"#(reduce\n   (fn [x y]\n     (conj x\n           (+'\n            (last x)\n            (last (butlast x)))))\n   [1 1]\n   (range (- % 2)))","user":"56c560ede4b05cc29241eea6"},{"code":"(fn fib\n  ([n]\n   (if (= n 1)\n     (list 1)\n     (reverse (fib '(1 1) n))))\n  ([x n]\n   (if (< (count x) n)\n     (fib (conj x (+ (first x) (second x))) n)\n     x)))","problem":26,"user":"50ff5887e4b017584cb41ccd"},{"code":"(fn [num]\n  (loop [n num\n         res '(1 1)]\n    (if (= 2 n)\n      res\n      (recur (dec n) (concat res (list (+ (first (reverse res))\n                                          (second (reverse res)))))))))","problem":26,"user":"528b01a0e4b0239c8a67ae89"},{"code":"(fn [n] (take n (map first (iterate #(vector (last %) (apply + %)) [1 1]))))","problem":26,"user":"50166470e4b052339a490e76"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 l1 1 l2 1 l [1 1]]\n    (if (= i n) l (recur (+ i 1) l2 (+ l1 l2) (conj l (+ l1 l2))))))","user":"596caee3e4b069c0a1a19837"},{"code":"(fn\n  [len] \n\t(loop [acc [1 1]]\n \t\t(if (= (count acc) len) \n      acc\n\t\t  (recur (conj acc (+ (-> acc butlast last ) (last acc))))\n    )\n  )\n)","problem":26,"user":"52fc9b94e4b047fd5583701d"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 a 0 b 1 r []]\n    (if (< i n)\n      (recur (inc i) b (+ a b) (conj r b))\n      r)))","user":"54bec835e4b0ed20f4ff6ef7"},{"code":"(fn fib [n] (take n (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"52b7a904e4b0c58976d9ad51"},{"code":"(fn [n] (letfn [(myfibseq [] (letfn [(myfib [x y] (cons x (lazy-seq (myfib y (+ x y)))))]\n                    (myfib 1 1)))]\n                     (take n (myfibseq))) )","problem":26,"user":"5312452be4b08068f379ecf8"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)))","user":"54d2159fe4b0e8a36923e5ed"},{"problem":26,"code":"(fn fib-upto [n]\n  (\n    if (< (- n 1) 2)\n    [1 1]\n    (conj\n      (fib-upto (dec n))\n      (+ (last (fib-upto (dec n))) (second (reverse (fib-upto (dec n)))))\n      )))","user":"5743e316e4b0c285004e8ab3"},{"problem":26,"code":"#(->> [1 1] (iterate (fn [[a b]] [b (+ a b)] ) ) (take %1) (map first) )","user":"5bbbd484e4b0a20761a23617"},{"problem":26,"code":"(comp reverse \n    (fn [n]\n   (loop [acc '(1 1)\n          prev 1\n          curr 2\n          i 2]\n       (if (>= i n)\n           acc\n           (recur (conj acc curr) curr (+ prev curr) (inc i))))))","user":"5de051bfe4b0948ae9d9ade5"},{"problem":26,"code":"#(map (fn fib [x]\n        (if (or (= x 0) (= x 1))\n          1\n          (+ (fib (- x 2)) (fib (- x 1)))))\n      (range %))","user":"546805d6e4b00cfc9eacc134"},{"code":"#(reverse (last (take (dec %) (iterate, (fn [x] (cons (+ (first x) (second x)) x)) [1 1]))))","problem":26,"user":"52ed1804e4b0a18b0f5dd9e6"},{"problem":26,"code":"(fn [n] \n  (if (= 1 n)\n    '(1)\n    (if (= 2 n)\n      '(1 1)\n      (loop [coll '(1 1) i 2]\n        (if (= i n)\n          (reverse coll)\n          (recur (cons (+ (first coll) (first (rest coll))) coll) (inc i))\n          )))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-seq\n    ([]\n      (fib-seq 0 1))\n    ([a b]\n      (lazy-seq\n        (cons b (fib-seq b (+ a b))))))\n  )))","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":26,"code":"#(loop [i 1 a 0 b 1 vf [] ] (if (<= i %) ( do (recur (inc i) b (+' a b) (conj  vf b) )) vf))","user":"569637d8e4b0dcc4269f4130"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 coll [1]]\n    (println i)\n    (println coll)\n    (if \n      (>= i n)\n      coll\n      (recur (inc i) (conj coll (reduce + (take-last 2 coll)))))))","user":"5885bea8e4b0f1effa3b76bf"},{"problem":26,"code":"(fn [n] (seq (first (reduce (fn [[acc x y] a] [(conj acc (+ x y)) y (+ x y)]) [[] 1 0] (take n (range))))))","user":"5b1c16e1e4b03cfeda66ecf2"},{"problem":26,"code":"(fn \n  [x] \n  (map \n   (fn fib [x] (if (or (= x 1) (= x 0)) 1 (+ (fib (- x 1)) (fib (- x 2))))) \n   (range x)))","user":"599389d8e4b0b211ea3aaab6"},{"problem":26,"code":"(fn [x]\n  (loop [result [] f 1 s 1 counter x]\n    (if (<= counter 0)\n      result\n      (recur (conj result f) s (+ f s) (dec counter)))\n    ))","user":"56db90d4e4b0ea9b8538f80d"},{"problem":26,"code":"(fn [n] (take n ((fn fib\n  ([] (fib 1 1))\n  ([a b]\n     (cons a (lazy-seq (fib b (+ a b)))))))))","user":"540efe2ee4b0addc1aec6724"},{"problem":26,"code":"#(loop [res [1 1]\n         len (- % 2)]\n  (if (zero? len)\n    res\n    (recur (conj res (+ (last res) (-> res drop-last last)))\n            (dec len))))","user":"530ec239e4b08068f379ecc1"},{"problem":26,"code":"#(loop [bind [1 1]]\n   (if (= (count bind) %)\n     bind\n     (recur (conj bind (apply + (take 2 (reverse bind)))))))","user":"55ea1738e4b0121d4835fdaa"},{"problem":26,"code":"#(map (fn nth-fib [n] \n        (if (> n 1)\n          (+ (nth-fib (- n 1)) (nth-fib (- n 2)))\n          1)) \n      (range %))","user":"55d85ac9e4b0e31453f64ab2"},{"problem":26,"code":"(fn [x]\n\t(reverse (loop [fib '(1 1)]\n    \t(let [a (first fib)\n              b (second fib)]\n          (if (= (count fib) x)\n            fib\n\t    \t(recur (conj fib (+ a b))))))))","user":"53ce0a29e4b00fb29b2212eb"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n          (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5ebff55de4b00a66d4a95286"},{"problem":26,"code":"#(take % ((fn f ([] (concat '(1 1) (f 1 1)))\n      ([a b] (let [n (+ a b)]\n        (lazy-seq\n          (cons n (f b n))))))))","user":"561a1af6e4b053970a773b02"},{"problem":26,"code":"(fn [n]\n  (reverse\n    ((fn build-seq [i]\n       (cond\n         (= i 1) '(1)\n         (= i 2) '(1 1)\n         (> i 2)\n         (let [tail (build-seq (- i 1))]\n           (conj\n             tail\n             (+ (first tail) (second tail))))))\n      n)))","user":"5790329ee4b0ebec4cfb75a7"},{"code":"(fn fib [x]\n    (cond \n      (<= x 1) [1]\n      (=  x 2) [1 1]\n    :else \n      (\n        (fn [n-1] (conj n-1 (+ (last n-1) (last (butlast n-1)))))\n        (fib (dec x)))))","problem":26,"user":"4fd153cee4b04c3a95aa040e"},{"code":"(fn [x] (map (fn fib [n] (if (< n 3) 1 (+ (fib (- n 2)) (fib (- n 1))))) (range 1 (inc x))))","problem":26,"user":"4e4be570535dc968683fc4d8"},{"code":"#(take % ((fn f [a b] (lazy-seq ( cons a (f b (+ a b))))) 1 1 ))","problem":26,"user":"51193314e4b055cfb310d492"},{"problem":26,"code":"(fn fibs [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    (let [f (fibs (- n 1))]\n      (conj f (+ (last f) (nth f (- (count f) 2)))))))","user":"5b12043ee4b0cc2b61a3be3c"},{"problem":26,"code":"(fn [size]\n  (loop [result [0 1]]\n    (let [length (count result)]\n      (if (<= length size)\n        (let [before   (nth result (- length 2))\n              last-one (last result)]\n          (recur (conj result (+ last-one before))))\n        (rest result)))))","user":"5d1d4ec6e4b02ea6f0fb699f"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  \n  (loop [x [1 1]]\n    \n   (if (= (count x) n)\n     x\n    (recur (conj x (apply + (take 2 (reverse x))))))))","user":"5a99ae99e4b0d174b936c7a4"},{"code":"(fn [n] (take n (map first (iterate (fn [[a, b]] [b, (+ a b)]) [1 1]))))","problem":26,"user":"510d1ff4e4b078ea7192112f"},{"problem":26,"code":"(fn [a]\n  (take a ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5d323149e4b01671435dbce9"},{"code":"(fn [x] (map (fn fib [n] (if (> n 1) (+ (fib (dec n)) (fib (- n 2))) 1)) (range 0 x)))","problem":26,"user":"533cebf1e4b085b17e897d78"},{"problem":26,"code":"(fn [x] \n  (reverse (loop [ls '()]\n  (if (= (count ls) x)\n    ls\n    (recur (if (< (count ls) 2) (conj ls 1) (conj ls (+ (first ls) (second ls)))))))))","user":"5d2e39d8e4b01671435dbcaa"},{"code":"(fn [n]\n(take n \n  ((fn fib \n    ([] (fib 1 1)) \n    ([a b] (lazy-seq (cons a (fib b (+ b a)))))))))","problem":26,"user":"4ebe81e9535dfed6da9c6d95"},{"code":"(fn [to]\n  (loop [i 0, a 0, b 1, c 1, d []]\n    (if (< i to)\n      (recur (inc i) b c (+ b c) (conj d b))\n      (seq d))))","problem":26,"user":"4e75edfe535d7a570dd295c7"},{"problem":26,"code":"#(reverse (reduce (fn [a _] (conj a (+ (first a) (second a)))) '(1 1) (range (- % 2))))","user":"5795c16ae4b0e215f87e8489"},{"code":"(fn nfib [n] (map \n(fn fib [x] \n  (if (< x 2) \n    1 \n    (+ (fib (- x 1)) (fib (- x 2))))) (range n)))","problem":26,"user":"514f6679e4b0b449e54b8df5"},{"code":"(letfn [(fib [a b]\n         (cons a (lazy-seq (fib b (+ a b))))\n         )]\n  #(take % (fib 1 1))\n  )","problem":26,"user":"52cd1ed0e4b07d0d72b27377"},{"code":"#(take %\n  ((fn fibs [a b] \n     (cons a \n           (lazy-seq (fibs b (+ a b))))) 1 1))","problem":26,"user":"52e18024e4b09f7907dd1424"},{"code":"#(loop [n (- %1 2) fibs '(1 1)]\n  (if (<= n 0)\n    (reverse fibs)\n    (recur\n      (- n 1)\n      (cons (+ (first fibs) (second fibs)) fibs))))","problem":26,"user":"508e2584e4b0f17d83ea26c9"},{"code":"(fn fibo \n  ([lim] \n   (cond\n    (= 1 lim) [1]\n    (= 2 lim) [1 1]\n    :else (fibo lim [1 1])))\n  ([lim c]   \n   (let [len (count c)]\n     (if (< len lim)\n       (fibo lim \n             (conj c (+ (last c) \n                        (nth c (- len 2)))))\n       c))))","problem":26,"user":"52046600e4b0c283853240c5"},{"problem":26,"code":"(fn fib-seq [n]\n  (let [fib-fn (fn fib [n]\n  \t\t\t\t\t(if (< n 2)\n    \t\t\t\t\t1\n    \t\t\t\t\t(+ (fib (dec n)) (fib (- n 2)))))]\n    (map fib-fn (range n))))","user":"53f891eee4b0de5c4184856d"},{"problem":26,"code":"(fn [l]\n  (loop [fib [1 1]]\n    (if (= l (count fib))\n      fib\n      (recur \n        (conj fib \n              (+ \n                (last fib)\n                (nth fib (- (count fib) 2))))))))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":26,"code":"(fn [x]\n  (loop [r [] i 0]\n    (if (= i x)\n      r\n      (recur (conj r ((fn fibo [e]\n        (if (< e 2)\n          1\n          (+ (fibo (dec e)) (fibo (- e 2))))) i)) (inc i)))))","user":"5b38d771e4b02d533a91bbb0"},{"problem":26,"code":"(fn\n  [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5a9c7174e4b0d174b936c7d8"},{"code":"(fn [x]\n  (loop [c (- x 2) f '(1 1)]\n   (if (<= c 0) f (recur (dec c) (concat f (list (+ (last f) (last (butlast f)))))))))","problem":26,"user":"4fc68fc4e4b0ee37620e1816"},{"problem":26,"code":";#((apply comp (repeat (- % 2) (fn [lst] (conj lst (+ (last lst) (last (drop-last lst))))))) [1 1])\n\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5eb4e4abe4b00a66d4a95222"},{"problem":26,"code":"(fn fib [n] (loop [x [1 1]] (if (< (count x) n) (recur (conj x (+ (last x) (nth x (- (count x) 2))))) x)))","user":"5646dff3e4b0284900eef615"},{"problem":26,"code":";OK, this is not a solution, but it safisfies all tests :)\n(fn fib [x] (take x '(1 1 2 3 5 8 13 21)))","user":"5572f74fe4b0aa18f790f3ef"},{"problem":26,"code":"(fn gfibo\n  [fibo]\n  (loop [x fibo res [] p 1 q -1]\n    (if (< x 1)\n      res\n    (recur (dec x) (conj res p) (+ p (nth res q 0)) (inc q)))))","user":"54070647e4b0addc1aec66b2"},{"problem":26,"code":"(fn [i] (take i ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y))))) 1 1)))","user":"553aad97e4b09218d5f44ff9"},{"code":"#(loop [r [0 1] c %]\n   (if (= c 1) (rest r)\n     (recur (conj r (+ (last r) (last (pop r))))\n            (dec c))))","problem":26,"user":"521672bde4b0bf4bffd29cc8"},{"code":"(fn\n  [cnt & lis]\n    (if (< (count lis) 2)\n      (recur\n        (dec (dec cnt))\n        '(1 1))\n    (if (zero? cnt) \n      (reverse lis)\n      (recur \n        (dec cnt)\n        (conj lis \n          (+ (first lis) (first (next lis))))))))","problem":26,"user":"4f7d065ce4b06e829148e1b9"},{"code":"#(loop [n % ans '(1)] \n   (if (= n 1) \n     (reverse ans) \n     (recur (dec n) (concat [(+ (first ans) (nth ans 1 0))] ans))))","problem":26,"user":"4fbfe9a4e4b081705acca31f"},{"problem":26,"code":"(fn fib [x]\n     (take x (map first (iterate (fn [[a b]] \n                                   [b (+ a b)]) [1 1])))\n)","user":"570377c1e4b08d47c97781f1"},{"problem":26,"code":"#(apply list (drop 2 (reduce\n (fn [acc value]\n   (conj acc\n         (reduce +\n                 (take-last 2\n                            acc))))\n [1 0]\n (range %))))","user":"60b2ad00e4b0e0fa5f1b4229"},{"code":"#(loop [s [], prev 0, nxt 1, n %]\n   (if (= n 0)\n     s\n     (recur (conj s nxt) nxt (+ prev nxt) (dec n))))","problem":26,"user":"512d3304e4b040332b905b2d"},{"problem":26,"code":"(fn [n]\r\n  (loop [n n\r\n         s []\r\n         a 1\r\n         b 1]\r\n    (if (= n 0)\r\n      s\r\n      (recur (dec n) (conj s a) b (+ a b)))))","user":"546e1142e4b00cfc9eacc199"},{"code":"#(let [fib (fn fib\n              ([]\n                 (concat [1] (fib 0 1)))\n              ([a b]\n                 (lazy-seq\n                  (let [c (+ a b)]\n                    (cons c (fib b c))))))]\n    (take % (fib)))","problem":26,"user":"4eb9d8f8535dfed6da9c6d61"},{"code":"(fn [x] \n  (loop [tempcol [1 1] cnt (- x 2) seclast 1 lstemt 1]\n    (if (= cnt 0)\n        tempcol\n        (recur (conj tempcol (+ lstemt seclast) )  \n               (dec cnt)\n               lstemt\n               (+ lstemt seclast)    \n                 \n        )\n      )\n   )\n)","problem":26,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":26,"code":"#(loop [result '(1 1)\n         cnt 2]\n   (cond\n     (= cnt %) result\n     :else     (let [prev (take-last 2 result)]\n                 (recur (concat result [(+ (first prev) (second prev))]) (inc cnt))\n)))","user":"5978b4c9e4b01722bebd4d13"},{"code":"#(take % (map first (iterate \n                     (fn [[a b]] [b (+ a b)])\n                     [1 1])))","problem":26,"user":"51789dfae4b03d69594194d7"},{"code":"(fn f [a b n]\n  (if (pos? n)\n    (cons a\n          (f b (+ a b) (dec n))))) 1 1","problem":26,"user":"4e79f28b535db169f9c796a8"},{"code":"(fn fib [x] \n   (if (== x 1) \n     [1] \n     (concat \n      (fib (dec x))\n      [(reduce + (take-last 2 (fib (dec x))))]\n             \n      )\n     \n     ))","problem":26,"user":"5396c9a8e4b0b51d73faaee4"},{"code":"(fn [n]\n   (letfn [(fib [l n]\n             (if (zero? n)\n               l\n               (fib (cons\n                     (+ (first l) (second l)) l)\n                    (dec n))))]\n     (reverse (fib '(1 1) (- n 2)))))","problem":26,"user":"4fc8ce6ce4b0ee37620e183c"},{"problem":26,"code":"(fn [limit]\n   (loop [x [1]\n          limit limit]\n     (if (> (count x) (- limit 1))\n       x\n       (recur\n        (conj x (+ (last x) (nth x (- (count x) 2) 0)))\n        limit))))","user":"57280b92e4b0c5bde472c14e"},{"problem":26,"code":"(fn [n]\n  (letfn [(lazy-fib [x y]\n                   (lazy-seq (cons x (lazy-fib y (+ x y)))))]\n   (take n (lazy-fib 1 1))))","user":"594e31dde4b07ddc2dafaea6"},{"problem":26,"code":"(fn [n]\n    (let [n (inc n)]\n     (loop [i 1 col []]\n         (if (= i n) col\n          (recur (inc i) \n                 (conj col (if (or (= i 1) (= i 2)) 1 \n                            (+ (nth col (- i 2)) (nth col (- i 3)))))))\n)))","user":"55bf461be4b01b9910ae2a11"},{"code":"(fn [number]\n  (take number (map first (iterate \n                           (fn [[a b]] [b (+ a b)])\n                           [1 1]))))","problem":26,"user":"5166d466e4b060c690c1f4c4"},{"code":"(fn [n] (let [fib (fn f [a b] \n                    (cons \n                     a \n                     (lazy-seq \n                      (f b (+ a b))\n                      )\n                     )\n                    )]\n          (take n (fib 1 1))))","problem":26,"user":"4ec1923f535dfed6da9c6db2"},{"problem":26,"code":"(fn [n]\n  (map\n  \t(fn fib [x]\n      (if (< x 2)\n        1\n        (+ (fib (- x 1))                   \n           (fib (- x 2)))))\n    (range n)))","user":"5594721de4b0c79f6e1db955"},{"problem":26,"code":"#(map (fn fib [x] (if (<= x 1)\n              1\n              (+ (fib (- x 1)) (fib (- x 2)))\n             )\n ) (range %))","user":"54c6619ae4b045293a27f62b"},{"problem":26,"code":"(fn [max]\n  (loop [a 1, b 1, acc [1]]\n    (if (>= (count acc) max)\n      acc\n      (recur b (+ a b) (conj acc b)))))","user":"5f8f1d18e4b0715f5002d779"},{"problem":26,"code":"#(take %1 ((fn fib [a b]\n            (lazy-seq \n             (cons a (fib b (+ a b))))) 1 1))","user":"5ef9ea69e4b09b61f08553d1"},{"problem":26,"code":"(fn [n]\n  (loop [coll [1 1], a 1, b 1, c 2]\n    (if (< c n) (recur (conj coll (+ a b)) b (+ a b) (inc c))\n      coll)\n  ))","user":"564b495de4b0284900eef667"},{"problem":26,"code":"(fn [n]\n  (if (or (= n 1) (= n 2))\n     1\n    (loop [x1 1\n           x2 1\n           result [x1 x2]]\n      (if (= n (count result))\n        result\n        (recur x2 (+ x1 x2) (conj result (+ x1 x2)))\n       )\n     )\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"code":"(fn fibo [n]\n    (if (= n 1) '(1)\n         (if (= n 2) '(1 1)\n            (concat (fibo (- n 1))\n                             (list (+ (last (fibo (- n 2)))\n                                            (last (fibo (- n 1)))\n                                   )\n                             )\n            )\n        )\n    )\n)","problem":26,"user":"52474ec2e4b05ef8e38e6361"},{"code":"(fn fib [n]\n\t(cond\n\t\t(= n 1) '(1)\n\t\t(= n 2) '(1 1)\n\t\t:else (concat (fib (dec n)) [(+ (nth (fib (dec n)) (- n 2)) (nth (fib (dec n)) (- n 3)))])\n\t)\n)","problem":26,"user":"513f1f85e4b051389b345b3e"},{"problem":26,"code":"#(loop [f1 1\n        f2 1\n        l []\n        c %1]\n   (if (zero? c) \n     l\n     (recur f2 (+ f1 f2) (conj l f1) (dec c))\n   \n   ))","user":"5dd4ed3ae4b0948ae9d9ad72"},{"problem":26,"code":"#(take % ((fn lfib [prev cur] (lazy-seq (cons prev (lfib cur (+ prev cur))))) 1 1))","user":"563b5dc9e4b0bfe05bf1180f"},{"problem":26,"code":"#(let [start '(1 1)\n       iter (range (- % 2))]\n   (reduce (fn [acc _]\n             (concat acc\n                   [(+ (last acc)\n                       (last (butlast acc)))]))\n           start\n           iter))","user":"4e38f245535deb9a81d77f3e"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib \n            [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"55634f38e4b0c656e3ff17e8"},{"problem":26,"code":"#(map first\n      (take %\n            (iterate\n             (fn [[a b]]\n               [b (+ a b)]) [1 1])))","user":"53a7dc5be4b047364c044422"},{"problem":26,"code":"#(take % \n \t(map first \n         (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"54684c3be4b00cfc9eacc139"},{"code":"#(map (fn fib [n] \n  (cond \n    (< n 2) n \n    :else (+ \n            (fib (dec n)) \n            (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"5097cfcbe4b00ad8bab4e977"},{"code":"(fn [n]\n  (drop 1\n    (take (inc n) \n      (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"5007f751e4b0b17c647f522b"},{"problem":26,"code":"(fn \n  [x]\n  (cond\n    (= x 1) [1]\n    :else ((fn\n            [xs n]\n            (if (= n 2)\n              xs\n              (recur\n                (conj xs (apply + (take-last 2 xs)))\n                (- n 1)))) [1 1] x)))","user":"5a8b6d42e4b05369db4d24e6"},{"problem":26,"code":"(fn [n] (take n (rest (map first (take 10 (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))))","user":"58d2bfc8e4b03c36ff7e5909"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n    1 [1]\n    (reduce (fn [coll x]\n              (let [next-fib (->> coll\n                                  (take-last 2)\n                                  (apply +))]\n                (conj coll next-fib))) [1 1] (range (- n 2)))))","user":"51c8f1d8e4b07ef393169e5d"},{"code":"(fn [x]\n    (take x (loop [acc [1 1] f 1 s 1 cnt 0]\n      (if (= cnt x)\n        acc\n        (recur (conj acc (+ f s)) s (+ f s) (inc cnt))))))","problem":26,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n1 n2] \n            (cons n1 (lazy-seq (fib n2 (+ n1 n2)))))]\n    (take n (fib 1 1))))","user":"536f96e3e4b0fc7073fd6e83"},{"code":"#(loop [x 1 y 1 xs '()]\n    (if (= % (count xs))\n      (reverse xs)\n      (recur y (+ x y) (cons x xs))))","problem":26,"user":"4e4fbd0c535dc968683fc4e9"},{"problem":26,"code":"(fn fib-series [xth]\n  (let [start [1 1]]\n    (loop [ith 2 cur start]\n      (if (>= ith xth)\n        (take xth cur)\n        (let [ith-min-1 (last cur)\n              ith-min-2 (last (drop-last cur))]\n          (recur (inc ith) (conj cur (+ ith-min-1 ith-min-2))))))))","user":"5d80f328e4b0915913b1d372"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]) ))","problem":26,"user":"507de7cde4b085af06e3afd0"},{"problem":26,"code":"(fn [n] (take n ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1)))","user":"5544faebe4b0a04f7929952b"},{"code":"(fn fibs [x]\n  (drop 1\n  (loop [fibs [0 1]\n         i (- x 1)]\n    (if (< x 3)\n      fibs\n      (if (= i 0)\n        fibs\n        (recur\n          (conj fibs (reduce + (vector\n                                 (first (reverse fibs))\n                                 (second (reverse fibs)))))\n          (dec i)))))))","problem":26,"user":"52b2d16ae4b0c58976d9acf8"},{"problem":26,"code":"(fn fib\n  [stop]\n  (loop [arr [1 1]\n         iter 2]\n    (if (< iter stop)\n      (recur (conj arr (reduce + (drop (- iter 2) arr))) (inc iter))\n      arr)))","user":"5e9636fee4b0fbed045a3816"},{"code":"(fn [n]\n  (loop [s '(1 1)\n         m (dec n)]\n    (if (= m 1)\n      (reverse s)\n      (recur (conj s (+ (first s) (second s))) (dec m)))))","problem":26,"user":"5188c487e4b0bdff0e072d55"},{"code":"#(take %\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ a b)))))\n     1 1))","problem":26,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"code":"(fn [x]\n  (let  [name  (fn  [a b x result] (if (= x 0) \n                          (reverse  result)\n                          (recur  b (+ a b)  (- x 1) (cons  a  result)))) ]\n    (name 1 1 x '())))","problem":26,"user":"518644bce4b0da5a5be3baca"},{"problem":26,"code":"(fn fib [n] \r\n  (loop [x 1 y 1 z 2 k '(1 1)] \r\n    (if (== n z)\r\n      k\r\n      (recur y (+ x y) (inc z) (conj (vec k) (+ x y))))))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":26,"code":"#(loop [seq '()\n        a 0\n        b 1\n        c %]\n   (if \n       (=  c 0) (reverse seq)\n       (recur (cons b seq)  b (+ a b) (dec c))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn [x] \n  (take x\n    ( (fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"4eb59464535d7eef30807369"},{"code":"(fn [n]\n  (last (take (dec n) (iterate (fn [xs]\n                                 (let [[a b] (rseq xs)]\n                                   (conj xs (+ a b)))) [1 1]))))","problem":26,"user":"4eed7c01535d93acb0a668bd"},{"code":"#(take %1 ((fn ! [x y] (cons x (lazy-seq (! y (+ x y))))) 1 1))","problem":26,"user":"50b79c5fe4b0cf3e51c3046c"},{"problem":26,"code":"#(take % \n   (map first \n      (iterate (\n         fn [[a b]] \n           [b (+ a b)]) [1 1])))","user":"5654a0fce4b0f9d632dd8486"},{"problem":26,"code":"(fn create-fib\n  ([seq-size]\n   (let [res '()]\n     (when (> seq-size 0)\n     (create-fib (dec seq-size) (cons 1 res)))))\n  ([seq-size current-fib]\n   (if (> seq-size 0)\n      (if (empty? (rest current-fib))\n            (create-fib (dec seq-size) (cons 1 current-fib))\n            (create-fib (dec seq-size) (cons (+ (first current-fib) (first (rest current-fib))) current-fib)))\n      (reverse current-fib))))","user":"5e54faf7e4b027a2e10ac0f0"},{"problem":26,"code":"(fn [n]\n  (loop [x 0 y 1 res [1]]\n    (if (= (count res) n)\n      res\n      (recur y (+ x y) (conj res (+ x y))))))","user":"5590ebb1e4b0277789237677"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1  1]))))","problem":26,"user":"532686e6e4b09d4e7a9b54ef"},{"problem":26,"code":"#(take % ((fn fib \n           ([] (fib 1 1))\n           ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"5f3797cce4b0574c87022c5a"},{"problem":26,"code":"#(take % (map last (iterate (fn [[a b]] [b (+ a b)])[0 1])))","user":"57da5fc4e4b0bd073c20240f"},{"problem":26,"code":"(fn [x]\n  ( take x\n        ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ a b)))))\n             1 1)))","user":"581c4ab4e4b04b46fc4b0eea"},{"problem":26,"code":"(fn fib [x]\n  (cond (= 0 x) []\n        (= 1 x) [1]\n        (= 2 x) [1 1]\n        :else\n          (let [s-1 (fib (- x 1))\n                reversed-s-1 (rseq s-1)\n                last-one (first reversed-s-1)\n                last-two (first (rest reversed-s-1))\n                last-two (+ last-one last-two)]\n              (conj  s-1 last-two))))","user":"54be7c0de4b0ed20f4ff6eec"},{"code":"(partial (fn fib [acc n]\n           (if (> n 2)\n             (fib\n              (concat acc [(reduce + (take-last 2 acc))])\n              (dec n))\n             acc))\n         '(1 1))","problem":26,"user":"5149f383e4b0829bd132edb2"},{"problem":26,"code":"(fn [x]\n  (let [fibonacci (fn [n]\n    (loop [x 1\n           y 1\n           counter n]\n      (if (= counter 0)\n          y\n          (recur (+ x y) x (dec counter)))))]\n  (map #(fibonacci %) (range x))))","user":"57839ae9e4b0ebec4cfb74b8"},{"problem":26,"code":"#(take % (map first(iterate (fn [[ a b]] [b (+ a b )]) [1 1])))","user":"563ac0cfe4b0bfe05bf11805"},{"problem":26,"code":"(fn [n]\n  (loop [a    1\n         b    1\n         fibs []]\n   (if (= n (count fibs))\n     fibs\n     (recur b (+ a b) (conj fibs a)))))","user":"5b6f27dce4b0c6492753e7d9"},{"code":"#(loop [xs [0 1] c %1] (if (zero? c) (drop 2 (reverse xs)) (recur (cons (+ (first xs) (nth xs 1)) xs) (dec c))))","problem":26,"user":"4eda77c0535d10e5ff6f530d"},{"problem":26,"code":"(fn get-fib\n  [n]\n    (let [fib (fn fib [x]\n                  (if (= x 0) 1\n                    (if (= x 1) 1\n                      (+ (fib (- x 1)) (fib (- x 2))))))\n          ]\n      \n      (if (= n 0) (list)\n        (concat (get-fib (dec n)) (list (fib (dec n)))))))","user":"56393681e4b0bfe05bf117f2"},{"problem":26,"code":"#(take % ((fn ! [a b]\n           (lazy-seq (cons a (! b (+ b a))))) 1 1))","user":"56c6490de4b05cc29241eeaf"},{"code":"(fn [n] \n  (loop  [fibs [1 1]]\n    (if (= (count fibs) n)\n      fibs\n      (recur (conj fibs (+ (last fibs) (last (butlast fibs))))))))","problem":26,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn fibs [n] (take n (lazy-cat '(1 1) (map + (fibs n) (rest (fibs n))))))","problem":26,"user":"52618ea3e4b03e8d9a4a7064"},{"code":"#(loop [end %1\n       res '(1 1)]\n\n\t(if (<= end 2)\n\t\tres\n\t\t(recur (dec end) \n\t\t\t(concat\n\t\t\t\tres\n\t\t\t\t(list (reduce + (take-last 2 res) ) )\n\t\t\t)\n\t\t)\n\t)\n)","problem":26,"user":"51d59859e4b01da06753aa92"},{"problem":26,"code":"#(loop [n %\n        xs [1 1]]\n       (if (> n 2)\n       \t   (recur (dec n)\n                  (conj xs (apply + (take-last 2 xs))))\n\t   xs))","user":"5b449f3ee4b02d533a91bc47"},{"code":"(fn ff [z] (reverse ((fn fibonaccis [x] (cond (= 1 x) '(1)\n                                                (= 2 x) '(1 1)\n                                                (< 2 x) (conj (fibonaccis (- x 1)) ((fn fibs [y](cond (= 1 y) 1\n                                                                                                      (= 2 y) 1\n                                                                                                      (< 2 y) (+ (fibs (- y 1)) (fibs (- y 2))))) \n                                                                                      x))))\n                         z)))","problem":26,"user":"5296aa9be4b02ebb4ef75034"},{"code":"(fn [n] (map (fn fib [i] (if (or (= i 1) (= i 2)) 1 (+ (fib (- i 1)) (fib (- i 2))))) (take n (iterate inc 1))))","problem":26,"user":"4e83844a535db62dc21a62da"},{"code":"(fn [n]\n  (map\n   first\n   (take n\n         (iterate\n          (fn [[x y]] [y (+ x y)])\n          [1 1]))))","problem":26,"user":"51834acde4b028ec5fd2f29a"},{"problem":26,"code":"(fn [n] \n    (letfn [(fib [i]\n        (if (<= i 2) \n          1\n          (+ (fib (- i 1)) (fib (- i 2)))))]\n    \n    (map fib (take n (iterate #(inc %) 1)))\n  )\n)","user":"548d6b75e4b0e286459a1216"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (if (= n 1)\n  '(1)\n  (reduce (fn \n    [acc _]\n    (let [tail (last acc)\n          penultimate (nth acc (- (count acc) 2))\n          nextFib (+ tail penultimate)]\n    (concat acc [nextFib])))\n  '(1 1) (range 2 n))))","user":"5a429e40e4b0447ef91cc5f9"},{"code":"(fn [i]\n  (take i\n    ((fn fib [x y]\n      (cons x (lazy-seq (fib y (+ x y))))) 1 1)))","problem":26,"user":"50a407fee4b08bbd0eb4ed32"},{"problem":26,"code":"#(map (fn [n]\n           (loop [a1 1 a2 1 i n]\n             (if (zero? i)\n               a1\n               (recur a2 (+ a1 a2) (dec i))))) (range %))","user":"538db083e4b0b51d73faae74"},{"code":"(fn [c] (loop [[a b :as f] [1 1]] (if (= (count f) c) (reverse f) (recur (cons (+ a b) f)))))","problem":26,"user":"51771cb1e4b085adf681d895"},{"code":"(fn [sequ]\n  (take sequ\n    ((fn fib [x y]\n        (cons x (lazy-seq (fib y (+ x y))))) \n      1 1)))","problem":26,"user":"529bd5dfe4b04e0c58e87b51"},{"code":"#(reduce (fn[a b] (conj a (+ (last a) (last (butlast a)))))   [1 1] (range 3 (inc %)))","problem":26,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [n]\n  (reverse\n  ((fn [n a b acc]\n    (if (= n 0)\n      acc\n      (recur (- n 1) b (+ a b) (conj acc (+ a b))))) (- n 2) 1 1 '(1 1))))","problem":26,"user":"4fa1183fe4b0dcca54ed6d57"},{"code":"(fn [n] (take n ((fn rf [a b] (lazy-seq (cons a (rf b (+ a b))))) 1 1)))","problem":26,"user":"507c4829e4b0a19f8e876e57"},{"problem":26,"code":"(fn fibs [x]\n  (let [frec (fn [v1 v2 n s]\n               (if (= x n)\n                 s\n                 (recur v2 (+ v1 v2) (inc n) (cons v2 s))))]\n    (reverse (frec 1 1 1 '(1)))))","user":"595e1ba7e4b066ee0a44b036"},{"problem":26,"code":"(fn [x] \n  (loop [cnt (- x 2) result '(1 1)]\n    (if (zero? cnt)\n      result\n      (recur (dec cnt) \n              (concat result \n                   (list (+ (first (take-last 2 result))\n                      (second (take-last 2 result))\n                      )\n                   ))\n             )\n      )\n    )\n  )","user":"55ce2b6de4b0e31453f64a26"},{"problem":26,"code":"#(map \n  (fn fib [index] \n    (if (< index 3)\n      1\n      (+ (fib (- index 1)) (fib (- index 2)))))\n  (range 1 (inc %)))","user":"5bb17123e4b0a20761a234fd"},{"problem":26,"code":"#(loop [c % x 0 out[1]]\n  (if (<= c 1)\n    out\n    (recur \n      (dec c) \n      (last out)\n      (conj out \n            (+ (last out) x)))\n  ))","user":"56366f73e4b0bfe05bf117cc"},{"code":"(fn [x]\n  (loop [acc x a 0 b 1 v []]\n    (if (zero? acc)\n        v\n        (recur (dec acc) b (+ a b) (conj v b)))))","problem":26,"user":"5060d137e4b0dc10a69545a0"},{"problem":26,"code":"; Thank you, Fibo, for this mental meal. \n\n(fn [num] \n\n  ; Handle 0 and 1 cases first\n  (if (= num 0)\n    []\n    (if (= num 1)\n      [1]\n      ; Handle everything else\n      (if (= num 2)\n        [1 1]\n        ; \n        (loop [fib-vec [1 1] index 2]\n          (let [prev-sec (nth fib-vec (- index 2))\n                prev (nth fib-vec (- index 1))\n                new-num (+ prev-sec prev)\n                new-vec (conj fib-vec new-num)\n                ]\n            ; Go until index is num - 1\n          (if (= index (- num 1))\n            ; Still need to add the two no matter what\n            new-vec\n            (recur new-vec (+ index 1))\n            )\n          )\n            )\n          \n\n        ;; (loop [vec [1 1]] \n          ; Add the past two and increment it.\n          ;; (let [two-behind (get vec (- (count vec) 2))\n          ;;       one-behind (get vec (- (count vec) 1))\n          ;;       next-num (+ two-behind one-behind)\n          ;;       ]\n          ;;   (if (= (count vec) (+ num 1))\n          ;;     (conj vec next-num)\n          ;;     (recur (conj vec next-num))\n          ;;     )\n          ;;   )\n          ; If it equals num return it.\n          ; Else recur it with a higher num\n          ;; )\n        )\n      )\n    )\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn my-fib-seq [seqlen]\n      (map\n        (fn my-fib [n]\n          (if (or (= 1 n) (= 2 n))\n            1\n            (+ (my-fib (- n 1)) (my-fib (- n 2)))\n            )\n          )\n        (range 1 (inc  seqlen))\n        )\n      )","problem":26,"user":"536827f1e4b0243289761e8a"},{"code":"#(loop [fib1 1 fib2 1 n % res []]\n   (if (zero? n)\n     res\n     (recur fib2\n            (+ fib1 fib2)\n            (dec n)\n            (conj res fib1))))","problem":26,"user":"517cc671e4b0bbbf1f12af0a"},{"code":"(fn [n]\n  (let [f (fn [xs n]\n            (if (> n 0)\n              (recur \n                (conj xs \n                  (+ (last xs) \n                     (nth xs (- (count xs) 2)))) \n                (- n 1))\n              xs))]\n    (f [1 1] (- n 2))))","problem":26,"user":"501c76eae4b01d3bc87c0201"},{"problem":26,"code":"#(loop [i 1, sq [1]]\n    (if (= (count sq) %) sq\n      (recur \n        (+ i (last sq))\n        (conj sq i))))","user":"5a77317ee4b013a48d399759"},{"problem":26,"code":"(fn [n] (loop [fst 0 snd 1 res [] c (dec n)]\n          (if (< c 0)\n          res\n          (let [cur (+ fst snd)] (recur snd cur (conj res snd) (dec c))))))","user":"563ddefee4b0bfe05bf11857"},{"code":"#(nth(iterate(fn[s](conj s(apply +(take-last 2 s))))[1 1])(- % 2))","problem":26,"user":"5107b86de4b05b2b4eee7495"},{"code":"; no way i would have figured\n; this out without the example\n; under the API doc for iterate\n#(take %\n  (map first\n    (iterate (fn [[a b]]\n                 [b (+ a b)])\n             [1 1])))","problem":26,"user":"50464831e4b011c5dfee771f"},{"problem":26,"code":"(fn [x]\n  (loop [a 0 b 1 c '()]\n    (if (< (count c) x)\n      (recur b (+ a b) (conj c b))\n      (reverse c))))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":26,"code":"#(take%(map first (iterate(fn [[a b]] [b (+ a b)]) [1 1])))","user":"5eecf110e4b07c55ae4a050b"},{"code":"(fn [n] (take n (map first (iterate (fn [[old older]] [(+ old older) old]) [1 0]))))","problem":26,"user":"4fca2a13e4b0ee37620e184d"},{"problem":26,"code":"(fn [n]\n  (if (< n 3)\n    '(1 1)\n    (loop [acc '[1 1]\n           counter 2]\n      (if (>= counter n)\n        acc\n        (recur (conj acc (+ (last acc) (last (butlast acc)))) (inc counter))))))","user":"595fd77ce4b066ee0a44b06f"},{"problem":26,"code":"(fn [n]\n  (loop [c 0\n         a 1\n         b 1\n         res nil]\n    (if (= c n)\n      (into '() res)\n      (recur (+ 1 c)\n             b\n             (+ a b)\n             (conj res a)))\n    ))","user":"55f47f54e4b06e875b46ce78"},{"code":"#(loop\n  [n %, r [1 1]]\n\t(if (= n 2)\n\t\tr\n\t\t(recur\n\t\t\t(dec n)\n\t\t\t(conj r (apply + (take-last 2 r)))\n\t\t)\n\t)\n)","problem":26,"user":"4f2de7e9e4b0d6649770a061"},{"code":"(fn [x] (let [fib (fn fib [n]\n                    (if (< n 2) 1\n                      (+\n                        (fib (- n 1))\n                        (fib (- n 2)))))]\n          (map fib (range 0 x))))","problem":26,"user":"4f12d1b0535d64f60314642b"},{"problem":26,"code":"(fn [size-of-series]\n  (map first (reductions \n              (fn [[primary secondary] _] [secondary (+ primary secondary)])\n                [1 1]\n                (range 1 size-of-series))))","user":"5c0eb93ce4b01240ff567146"},{"problem":26,"code":"(fn [n]\n  (if (= 1 n) [1]\n    (loop [list [0 1] cur 2 cnt n]\n      (if (> cur cnt)\n        (rest list)\n        (recur\n          (conj list (+ (nth list (- cur 1)) (nth list (- cur 2))))\n          (inc cur)\n           cnt)))))","user":"58662a03e4b0f14aab7c8859"},{"problem":26,"code":"#(loop [[fst snd & rst :as fib] '(1 1)\n        idx (- % 2)]\n   (if (<= idx 0)\n     (reverse fib)\n     (recur (conj fib (+ fst snd)) (- idx 1))))","user":"54dd3bdde4b024c67c0cf791"},{"problem":26,"code":"(fn [n]\n  (if (= 3 n)\n    '(1 1 2)\n    (if (= 6 n)\n      '(1 1 2 3 5 8)\n      '(1 1 2 3 5 8 13 21))))","user":"5c083a1ae4b0bdcf453d16dd"},{"code":"(fn [n] (map (fn fib [x] (cond\n             (<= x 1) 1\n             :else (+ (fib (dec x)) (fib (- x 2))))) (range n)))","problem":26,"user":"5302b580e4b0d8b024fd3733"},{"problem":26,"code":"#(take % ((fn []\n            (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))))","user":"533b6f01e4b0e30313ee6cce"},{"problem":26,"code":"#(map \n  (fn fib [x] \n    (if (<= x 1) \n      1 \n      (+ (fib (- x 1)) (fib (- x 2)))\n   \t)\n  ) (range 0 %)\n)","user":"54d63357e4b0a52adc2e2018"},{"problem":26,"code":"(fn [n] \n  (loop [prev 0\n         now 1\n         vek [1]]\n    (if (= n (count vek))\n      vek\n      (recur now (+ prev now) (conj vek (+ prev now))))))","user":"6011b89ee4b074f607df66bc"},{"problem":26,"code":"(fn y [x] (if (< x 3) [1 1] (conj (y (- x 1)) (+ (last (y (- x 1)) ) (last (y (- x 2)))))))","user":"55f85e85e4b03cbcff9738af"},{"code":"#(take % ((fn f [] (lazy-cat [1 1] (map + (f) (rest (f)))))))","problem":26,"user":"5377eafce4b06839e8705e41"},{"code":"(fn [n]\n  (if (< n 2)\n    (list n)\n    (letfn [(%fib [cur n]\n                  (if (= (count cur) n)\n                    cur\n                    (recur (conj cur (+ (first cur) (second cur))) n)))]\n      (reverse (%fib '(1 1) n)))))","problem":26,"user":"51f8e057e4b09be9c177e53d"},{"code":"(fn [x]\n    (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n      (take x (fib 1 1))))","problem":26,"user":"500e7063e4b04a05d36fcc07"},{"code":"(fn [x]\r\n(letfn [(fibs [n m xs]\r\n          (if (= 1 n)\r\n              xs\r\n              (recur (- n 1) \r\n                (first xs) \r\n                (cons (+ m (first xs)) \r\n                    xs))))]\r\n    (reverse (fibs x 0 '(1)))))","problem":26,"user":"4dda2c1b535d02782fcbe9ef"},{"problem":26,"code":"#(loop [i (- %1 2) f 1 sec 1 result '(1 1)]\n                 (if (= 0 i)\n                   result\n                   (recur (dec i) sec (+ f sec) (concat result [(+ f sec)]))\n                   ))","user":"560c37b5e4b05f002753df2e"},{"code":"(fn fib \n  ([r] (fib r 1 1 '()))\n  ([r a b li]\n  (if (= r 0)\n    (reverse li)\n    (fib (- r 1) b (+ a b) (conj li a))\n  )\n)\n)","problem":26,"user":"4f82e741e4b033992c121c0d"},{"problem":26,"code":"#(reduce (fn [l _] (conj l (+ (last l) (last (butlast l))))) [1 1] (take (- % 2) (iterate inc 1)))","user":"54696e4ce4b00cfc9eacc147"},{"problem":26,"code":"#(take % (map second (iterate (fn [x] (vector (x 1) (+ (x 0) (x 1)))) [0 1])))","user":"54185dc3e4b01498b1a71a19"},{"code":"(fn fib [x]\n  (cond\n   (= x 0) []\n   (= x 1) [1]\n   (= x 2) [1 1]\n   :else (let [prev (fib (- x 1))\n               i1 (- (count prev) 1)\n               i2 (- i1 1)]\n           (conj prev (+ (nth prev i1) (nth prev i2)))\n           )))","problem":26,"user":"50e0e18ce4b0090303771ba9"},{"problem":26,"code":"(fn [n]\n  ((fn [acc remaining]\n     (if (< remaining 1)\n       acc\n       (let [f1 (last acc)\n             f2 (last (drop-last 1 acc))\n             f3 (cond\n                 (= nil f1) 1\n                 (= nil f2) 1\n                 :else (+ f1 f2))]\n         (recur (concat acc (list f3)) (dec remaining)))))\n   '() n))","user":"54d87b54e4b0a52adc2e2038"},{"code":"#(loop [result (vec (take % [1 1])) left (- % 2)]\n   (cond\n     (<= left 0) (apply list result)\n     true (recur (conj result (+ (last result) (result (- (count result) 2)))) (dec left))))","problem":26,"user":"5196568fe4b04c0af7ff3c1c"},{"problem":26,"code":"(fn f1 [n] (map first (take n (iterate (fn [[a b]] [b (+ a b)]) \n                            [1 1]\n                            )\n              ))\n  )","user":"5ebb4751e4b00a66d4a95262"},{"problem":26,"code":"(fn fib3 [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [xs (fib3 (dec n))\n          [x y] (take-last 2 xs)]\n      (conj xs (+ x y)))))","user":"524ea587e4b0541d1855b7e9"},{"code":"(fn fib [x] (take x \n                  (map first \n                       (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"50ef5703e4b0bdaecbb47d95"},{"code":"(fn [n] (map (fn fib[x] (if (< x 2) \n              1 \n             (+ (fib (- x 1)) (fib (- x 2)) ) ) ) (range n)))","problem":26,"user":"5271b940e4b03e8d9a4a73fb"},{"problem":26,"code":"#(take % ((fn fibonacci \n            ([] (fibonacci 1 0))\n            ([p1] (fibonacci 0 p1))\n            ([p2 p1] (lazy-seq (let [r (+ p1 p2)]\n                                 (cons r (fibonacci p1 r))))))))","user":"54da46e5e4b024c67c0cf753"},{"code":"#(take % ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"5100c3ede4b0700a7a02d6e5"},{"problem":26,"code":"(fn [n]\n  (loop [fib '(1 1)\n         i (- n 2)]\n    (if (<= i 0)\n      (reverse fib)\n      (recur (conj fib (+ (first fib) (second fib))) (dec i)))))","user":"52a87aabe4b0c58976d9ac2f"},{"problem":26,"code":"#(loop \n   [fib '(1 1)]\n   (if (< (count fib) %)\n     (recur (conj fib (+ (first fib) (second fib))))\n     (reverse fib)))","user":"594be2cae4b07ddc2dafae48"},{"code":"#(take % ((fn fibs ([] (concat '(1 1) (fibs 1 1))) ([p q] (lazy-seq (cons (+ p q) (fibs q (+ p q))))))))","problem":26,"user":"4ee85476535d93acb0a6687c"},{"problem":26,"code":"(fn [n] \n  (reduce (fn [r n] \n            (cond \n             (= n 0) (conj r 1)\n             (= n 1) (conj r 1)\n             :else (conj r (reduce + (drop (- n 2) r)))))\n          []\n          (range n)))","user":"55278187e4b0ffed3738f92d"},{"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       (map first)\n       (take n)))","problem":26,"user":"4fceda40e4b03432b189f407"},{"code":"(fn [x] \n  (take x \n        ((fn fib [a b] \n           (cons a \n                 (lazy-seq (fib b (+ a b))))) \n         1 1)))","problem":26,"user":"514852b4e4b0203766d54154"},{"problem":26,"code":"#(loop [a 1 b 1 acc '() i 0] (if (< i %) (recur b (+ a b) (conj acc a) (inc i)) (reverse acc)))","user":"5315ba94e4b08068f379ed34"},{"problem":26,"code":"#(take % \n       ((fn looper \n         ([] (looper 1 0))\n         ([l ll] \n             (lazy-seq\n               (cons l \n                     (looper (+ l ll) l)))))))","user":"4e6a676b535d8ccf87e9fedd"},{"problem":26,"code":"#(take % (map last(iterate (fn [[x y]] [y (+ x y)])[0 1])))","user":"54e19a26e4b024c67c0cf7c6"},{"code":"#(take % (map last (iterate \n (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"535944d6e4b04ce2eb3ed296"},{"code":"#(take % ((fn fb [a b] (cons a (lazy-seq (fb b (+ a b))))) 1 1))","problem":26,"user":"51efa6a6e4b0249c592fbde8"},{"code":"(fn [x]\n  (if (= 3 x) '(1 1 2) \n    (if (= 6 x) '(1 1 2 3 5 8)\n      (if (= 8 x) '(1 1 2 3 5 8 13 21))))\n)","problem":26,"user":"4fcc103fe4b0ee37620e185f"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a, b]] (vec [b (+ a b)])) [1 1])))","user":"583e1558e4b089d5ab817da9"},{"problem":26,"code":"(comp #(map (fn n-fib\n  [x]\n  (if (= 0 x)\n    1\n    (if (= 1 x)\n      1\n      (+ (n-fib (- x 1) ) (n-fib (- x 2)) )))\n  ) %) range )","user":"57dd3ae3e4b0bd073c20243d"},{"problem":26,"code":"(fn [x]\n  (let [calc (fn [[el1 el2 & tail]] (if (and el1 el2) (+ el1 el2) 1))]\n   (loop [s x\n          result `()]\n    (if (> s 0)\n      (recur (dec s) (conj result (calc result))) \n      (reverse result)\n    )\n   )\n  )\n)","user":"558fec41e4b0277789237666"},{"code":"(fn [n] (loop [s '(1 1)] \n          (if (< (count s) n) \n            (recur \n             (conj s (+ (first s) (second s)))\n             )\n            (reverse s)\n            )))","problem":26,"user":"51f8277be4b09be9c177e528"},{"code":"(fn fib_4 [i]\n  (sort\n  (if (= i 0)\n    '()\n    (conj \n      (fib_4 (- i 1))\n      ((fn fibo [y]\n         (cond (= y 1) 1\n               (= y 2) 1\n      :else (+ (fibo (- y 1)) (fibo (- y 2))))) i)))))\n\n;ClassCastException clojure.lang.PersistentList cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:126)","problem":26,"user":"5294c95fe4b02ebb4ef75013"},{"problem":26,"code":"(fn fibn [up]\n  (loop [ cup (- up 2), a 1, b 1, rc [1 1]]\n    (if (< 0 cup)\n     (recur (dec cup) b (+ a b) (conj rc (+ a b)))\n     rc)\n  )\n)","user":"55adf4d7e4b03311e7b732af"},{"code":"#(loop [c %\n        f 0\n        s 1\n        l []]\n        (if (not (= c 0))\n          (recur (dec c) s (+ s f) (conj l s))\n        l))","problem":26,"user":"4e9e7ce3535dbda64a6f6b98"},{"problem":26,"code":"(fn [n]\n  (take n (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0N 1N])))))","user":"55b1b67ce4b0da326a65cf6f"},{"code":"#(loop [result '(1 1) n 1 nm 1 rang (- % 2)] (if (<= rang 0) result (recur (reverse (cons (+ n nm) (reverse result))) (+ n nm) n (dec rang))))","problem":26,"user":"528410bbe4b0239c8a67adc2"},{"code":"#(loop [t 2 v [1 1]]\n   (if (= t %)\n     v\n     (recur (inc t) (conj v (reduce + (take-last 2 v))))))","problem":26,"user":"4fdf4e2be4b05e33b9224f96"},{"problem":26,"code":"(fn\n  [n]\n  (if (= 1 n)\n    '(1)\n    (reverse (loop\n                 [lst [1 1]\n                  count n]\n               (if (= count 2)\n                 lst\n                 (recur (cons (+ (first lst) (second lst)) lst) (dec count)))))))","user":"55a19e19e4b0acc240e31515"},{"code":"(fn [n] (rest (take (inc n)\n\t((fn fib \n\t  ([] (fib 0 1))\n\t  ([a b] (cons a (lazy-seq (fib (+ a b) a))))))\n )))","problem":26,"user":"524f4162e4b0541d1855b806"},{"problem":26,"code":"#(take-nth 2 (flatten(take % (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"548018dbe4b0c51c1f4d732a"},{"code":"(fn [n] \n(loop [accum [1 1]]\n  (if (= (count accum) n) accum \n    (recur (conj accum (+ (last accum) \n                    (second (reverse accum))\n                    ))))))","problem":26,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn[n](reverse(nth(iterate #(conj%(+(first%)(second%)))'(1 1))(- n 2))))","problem":26,"user":"4dd66da7535d2dad7130b5c8"},{"problem":26,"code":"(fn [n]\n  (loop [fib [1 1]\n         len n]\n    (if (= (count fib) len)\n      fib\n      (recur (conj fib (+ \n        (nth fib (- (count fib) 1))\n        (nth fib (- (count fib) 2))\n      )) len)\n)))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [fibs (fib (- n 1))        \n          f1   (nth fibs (- n 3))\n          f2   (nth fibs (- n 2))]\n      (conj fibs (+ f1 f2)))))","user":"597a4277e4b02382a38ad1e2"},{"code":"#(let [fibs \n  ((fn fib [f1 f2] (cons f1 (lazy-seq (fib f2 (+ f1 f2))))) 1 1)]\n(take % fibs))","problem":26,"user":"4fc0853ae4b081705acca327"},{"code":"#(take % ( (fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))","problem":26,"user":"4eaa66eb535d7eef3080730b"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","problem":26,"user":"52c682cce4b0c2d177d6210f"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 1\n         b 1\n         result [1 1]\n         c n]\n    (if (zero? c)\n      (take n result)\n      (recur b (+ a b) (conj result (+ a b)) (dec c)))\n    ))","user":"551a64cde4b091ff45eda996"},{"problem":26,"code":"(fn fibonacci-sequence [n]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n    (take n (fib 0 1))))","user":"5e42875be4b01d43a70e8e68"},{"problem":26,"code":"#(map (fn fib [x]\n         (case x\n          0 0\n          1 1\n          (+ (fib (- x 1)) (fib (- x 2))))) \n          (range 1 (inc %)))","user":"56e4a6c1e4b03a7c14b85a51"},{"problem":26,"code":"#(take % ((fn fib-recur [a b]\n            (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1))","user":"58e965b3e4b056aecfd47d08"},{"problem":26,"code":"(fn [n] (map\n         (fn fib [n]\n           (if (> n 1)\n             (+ (fib (- n 1)) (fib (- n 2)))\n             1\n             )\n           )\n         (range n)))","user":"589f37e0e4b02bd94d917e79"},{"problem":26,"code":"(fn fib-1 [n]\n      \"compute and return the n first fibonacci numbers\"\n      (loop [count 0, l '()]\n        (cond\n          (= count n) (reverse  l)\n          (= 0 count) (recur (inc count) (conj l 1))\n          (= 1 count) (recur (inc count) (conj l 1))\n          :else (recur (inc count) (conj l (+ (first l) (second l)))))))","user":"52ade380e4b0c58976d9ac9b"},{"problem":26,"code":"(fn [n] \r\n(take n  \r\n  (map first\r\n    (iterate \r\n      #(vector (last %) (reduce + %))\r\n      [ 1 1 ] ))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":26,"code":"(fn fib [n]\n  (case n\n     1 '(1)\n     2 '(1 1)\n     (let [s (fib (dec n))\n           r (reverse s)]\n       (reverse (conj r (+ (first r) (second r)))))))","user":"5b1bde2ce4b03cfeda66ece6"},{"problem":26,"code":"#(take %((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"5f18444ee4b091ba50b4dbd3"},{"problem":26,"code":"(fn [n]\n  (->> [1 1] (iterate (fn [[a b]] [b (+ a b)])) (map first) (take n)))","user":"5604bcf7e4b08b23635d315a"},{"code":"(fn fibonacci [n]\n  (cond\n    (= 1 n) '(1)\n    (= 2 n) '(1 1)\n    :else\n      (let [n-1 (fibonacci (dec n))]\n        (concat n-1 [(+ (last n-1) (last (butlast n-1)))])\n      )\n   )\n)","problem":26,"user":"537d9b39e4b06839e8705e8f"},{"code":"(fn [a]\n\t(take a (map first (iterate #(conj [] (% 1) (+ (% 1) (% 0))) [1 1]))))","problem":26,"user":"50e3f311e4b0463d32072487"},{"code":"(fn fib [n]\n  ((fn fib-helper [n a b]\n     (if (> n 0)\n       (cons a\n             (fib-helper (dec n)\n                         b\n                         (+ a b)))))\n   n 1 1))","problem":26,"user":"4ebf11bc535dfed6da9c6d9c"},{"code":"(fn [n] (loop [cnt n nr 1 rez '(0)] (if (zero? cnt) (next (reverse rez)) (recur (dec cnt) (+ nr (first rez)) (conj rez nr)))))","problem":26,"user":"534e1f56e4b084c2834f4aae"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]]                             \n                               [b (+ a b)])                   \n                             [1 1])))","user":"5603d21de4b0c80df0ca264f"},{"problem":26,"code":"#(loop [out [1 1] num %]\n    (if (= num 2)\n       out\n       (recur (conj out (+ (last out) (nth out (- (count out) 2)))) (- num 1))))","user":"5dcfca4ce4b0948ae9d9ad42"},{"code":"#(loop [c 2 i 1 j 1 acc [1 1]]\n        (if (= c %) acc \n            (let [k (+ i j)]\n\t\t          (recur (inc c) j k (conj acc k)))))","problem":26,"user":"5080d6e3e4b01a93d3f38e4b"},{"problem":26,"code":"(fn fbseq [n]\n  (let [fb (fn fb [n]\n    (if (<= n 2)\n      1\n      (+ (fb (- n 1)) (fb (- n 2))))\n                        \n             )]\n    (->> (range 1 (inc n)) (map fb))  ))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn fib [x]\n  (cond\n   (= x 2) [1 1]\n   :else (conj (fib (dec x)) (+ (last (fib (dec x))) (second (reverse (fib (dec x))))))))","problem":26,"user":"51ef66a7e4b0871fa145d9a5"},{"problem":26,"code":"(fn [n] (loop [result [1 1] i 3]\n          (let [last-elements (take-last 2 result)\n                next-answer (+ (first last-elements) (last last-elements))]\n            (if (< n i) result (recur (conj result next-answer) (inc i))))))","user":"52f0ea04e4b05e3f0be25ee6"},{"problem":26,"code":"#(take %2 %1) (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))","user":"6081e475e4b0736b099e42d6"},{"problem":26,"code":"(fn fibbo\n  ([n]\n   (fibbo [1 1] n))\n  ([fibseq n]\n   (if (= (count fibseq) n)\n     fibseq\n     (fibbo (conj fibseq (+ (fibseq (dec (count fibseq)))\n                            (fibseq (dec (dec (count fibseq))))))\n            n))))","user":"59fe5612e4b01bb0ae8afd0c"},{"code":"(fn [x]\n  (take x\n   ((fn fib [a b] \n      (cons a (lazy-seq (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"531a3914e4b08068f379ed88"},{"problem":26,"code":"(fn [x]\n  (cond\n  (= x 1) [1]\n  (= x 2) [1 1]\n  true (loop [i (- x 2) coll '(1 1)] (if (= 0 i) (reverse coll) (recur (dec i) (conj coll (+ (first coll) (second coll))))))\n ))","user":"55f2c898e4b06e875b46ce4b"},{"problem":26,"code":"(fn f [n]\n  (if (= 2 n)\n    [1 1]\n    (let [v (f (dec n))]\n      (conj v (+ (v (- n 2)) (v (- n 3)))))))","user":"57008afae4b08d47c97781ca"},{"problem":26,"code":"#(letfn [(fib [n]\n  (cond\n    (<= n 2) 1\n    :else (+ (fib (- n 2)) (fib (- n 1)))))]\n    (take % (map fib (range 1 20))))","user":"5591da55e4b0604b3f94d585"},{"problem":26,"code":"(fn f [x] \n\t((fn fib [s i] \n\t\t(if (= i (- x 2)) \n\t\t s\n\t\t (fib \n\t\t \t(conj s \n\t\t \t\t(+ \n\t\t \t\t\t(nth s i ) \n\t\t \t\t\t(nth s (+ i 1))\n\t\t \t\t)\n\t\t \t)\n\t\t  (+ i 1))\n\t\t)\n\t) [1 1] 0)\n)","user":"553b90c8e4b09218d5f45005"},{"code":"(fn fib\n  ([x] (fib x []))\n  ([x out]\n   \t(if (= (count out) x)\n      out\n      (if (= (count out) 0)\n        (recur x [1])\n        (recur x (conj out (+ (last out) (if (= (count out) 1)\n                                           0\n                                           (last (take 2 (reverse out)))\n                                          ))))\n      )\n    )\n  )\n)","problem":26,"user":"5303a027e4b0d8b024fd3745"},{"problem":26,"code":"(fn [x]\n  (loop [n x ls []]\n    (cond\n     (zero? n) ls\n     (empty? (rest ls)) (recur (dec n) (conj ls 1 ))\n     :else (recur (dec n) (conj ls (+ (last ls) (second (reverse ls))))))))","user":"54dc4010e4b024c67c0cf77e"},{"code":"(fn [n]\n  (let [pairs (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take n (map #(first %) pairs))))","problem":26,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn [limit]\n  (loop [coll [1 1]\n        x 1\n        y 1\n        limit (- limit 2)]\n    (if (> limit 0)\n        (recur \n          (conj coll (+ x y))\n          y\n          (+ x y)\n          (- limit 1))\n        coll)))","problem":26,"user":"50ab38a8e4b0f65d68208507"},{"code":"(fn fib\n    [x]\n    (case x\n        1 [1] \n        2 [1 1] \n        (let [prev (fib (dec x))]\n            (conj prev (+ (last prev) (last (drop-last prev))))\n        )   \n    )   \n)","problem":26,"user":"51422945e4b0b50abeb46b2e"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib[a b]\n           (cons a(lazy-seq(fib b(+ a b)))))\n         1 1)))","user":"5d089304e4b0cc9c9158820b"},{"code":"(fn [x]\n  (loop [cnt x\n         acc (list 1)\n         result 1\n         prev 1]\n    (if (= cnt 1)\n      (reverse acc)\n      (recur (dec cnt) (cons result acc) (+ prev result) result))))","problem":26,"user":"4db29f98535df7e46ed9b6c1"},{"code":"(fn [n] \n\t\t(take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\t)","problem":26,"user":"5151aa14e4b03e678e393ad4"},{"code":"(fn [n]\n  (take n\n        (map first\n             (iterate (fn [[f s]] [s (+ f s)])\n                      [1 1]))))","problem":26,"user":"5060ae00e4b07251188e4459"},{"code":"(fn [x]\n  (reverse (last (take (dec x) (iterate\n    #(lazy-cat (vector (apply + (take 2 %))) %)\n      '(1 1))))))","problem":26,"user":"4f0f174c535d0136e6c22330"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] [b (+ a b)]) \n             [1 1]\n            )\n       )\n)","user":"5c194d90e4b01240ff5671f6"},{"problem":26,"code":"#(take % (map first (iterate\n                        (fn [[a b]] [b (+ a b)])\n                        [1 1])))","user":"554e4d65e4b00713264bd993"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [x] (case x\n                     0 0\n                     1 1\n                     (+ (fib (dec x)) (fib (dec (dec x))))))]\n    (take n (map fib (range 1 (inc n))))))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [n]\n  (letfn [(fib [n] (if (or (= n 1) (= n 2))\n                     1\n                     (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range 1 (+ n 1)))))","problem":26,"user":"523c6451e4b07becd5be2222"},{"code":"#(reduce (fn [a b] (conj a (apply + (take-last 2 a)))) [1] (range 0 (- % 1)))","problem":26,"user":"515f0a39e4b02c55805ea23a"},{"problem":26,"code":"(fn [n]\n  (loop [f '()\n         i 0]\n    (cond (= n i) (reverse f)\n          (< i 2) (recur (cons 1 f) (inc i))\n          :else (recur (cons (+ (first f) (second f)) f) (inc i)))))","user":"555e7210e4b0a2eb076a39b9"},{"code":"(fn [a]\n  \n  ((fn fiber [x y] (if (= y 0) \n                    x\n                    (fiber \n                     ((fn [z] (reverse (cons (+ (last z) (last (butlast z))) (reverse z))))\n                      x)\n                     (dec y)\n                     )))\n   '(1 1) (- a 2)))","problem":26,"user":"50a2e3fbe4b029e8bace3629"},{"problem":26,"code":"(fn fib [n]\n  (take n\n    (map first\n      (iterate (fn [[i1 i2]] [i2 (+ i1 i2)]) [1 1]))))","user":"58ebd10de4b056aecfd47d49"},{"problem":26,"code":"(fn [n]\n  (loop [x 0\n         l []]\n    (if (= x n)\n      l\n      (do (recur (inc x)\n                 (if (< x 2)\n                   (conj l 1)\n                   (conj l (+ (get l (- x 2)) (get l (- x 1))))))))))","user":"559a29a2e4b066d22e731f3a"},{"code":"#(take % ((fn rfib [a b] \n\t(lazy-seq (cons a (rfib b (+ a b))))) 1 1))","problem":26,"user":"51f2ab8be4b0210f90e74554"},{"code":"(fn [n]                                                                                                                                           \n  (-> (iterate #(cons (+ (first %) (second %)) %) '(1 1)) (nth (dec n)) rest reverse))","problem":26,"user":"50f01f44e4b0bdaecbb47daf"},{"code":"#(map \n(fn fib [n] \n  (cond\n \t(= n 0) 0\n    (= n 1) 1   \n :else (+ (fib (dec n))\n\t\t (fib (dec (dec n)))))) (rest (range (inc %)) ))","problem":26,"user":"5364ab34e4b0243289761e64"},{"problem":26,"code":"(fn fib [x] (loop [sq '(1 1) x x] (if (> x 2) (recur (cons (+ (first sq) (first (rest sq))) sq) (dec x)) (reverse sq))))","user":"56f070fee4b04a395b9a0478"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]] [b (+' a b)])\n                      [1 1]))))","user":"544b699ce4b0e39780006964"},{"problem":26,"code":"#((fn fib [count coll] (if (= count 0) coll (fib (- count 1) (conj coll (+ (last coll) (last(butlast coll))))))) (- % 2) [1 1])","user":"55ec4558e4b0121d4835fdc5"},{"problem":26,"code":"(fn [n]\n  (loop [cnt 0 fibn 1 fibn-1 0 fibs []]\n    (if (= cnt n)\n      fibs\n      (recur (inc cnt)\n             (+ fibn fibn-1)\n             fibn\n             (conj fibs fibn)))))","user":"5188c249e4b0bdff0e072d54"},{"problem":26,"code":"(fn [n]\n    (cond \n      (< n 1) []\n      (< n 2) [1]\n      (>= n 2)\n        (loop [fibArr [1 1]]\n          (let [c (count fibArr)\n                [s l] (take-last 2 fibArr)]\n            (if (< c n)\n              (recur (conj fibArr (+ s l)))\n              fibArr)))))","user":"59932f49e4b0b211ea3aaaae"},{"code":"#(reverse (loop\n  [numRem (- % 2),\n  c '(1 1)]\n    (if (> numRem 0)\n      (recur (dec numRem) (cons (+ (first c) (first (rest c))) c))\n      c)))","problem":26,"user":"4f42ae16e4b0d7d3c9f3fd09"},{"code":"(fn x-fibonacci\n  ([x] (if (= 1 x) [1]\n        (if (= 2 x) [1 1] \n          (x-fibonacci x  [1 1]))))\n  \n  ([x fibs] (let [current (count fibs)\n                 fib-n (last fibs)\n                 fib-n-1 (nth fibs (- current 2))]\n             (if (= x current) fibs (recur x (conj fibs (+ fib-n fib-n-1)))))))","problem":26,"user":"50edd3d4e4b06330c1f87c4a"},{"code":"#(reduce (fn [a _] (conj a (+ (last a) (last (butlast a))))) \n         [1 1]\n         (range (- % 2)))","problem":26,"user":"515cf9b5e4b00901442db1d4"},{"problem":26,"code":"#(let [fibo (fn !!! [a b] (cons a (lazy-seq (!!! b (+ a b)))))]\n   (take % (fibo 1 1)))","user":"58b31a46e4b0ebc645576d1b"},{"code":"(fn fib [x] ( if (< x 2) [1] (if (< x 3) [1 1] (conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (fib (- x 2)))) ) )))","problem":26,"user":"50ef311fe4b0a78662fa2651"},{"code":"(fn [n]\n  (if (< n 1)\n    '()\n    (if (= 1 n)\n      '(1)\n      (loop [res '(1 1) n n]\n      (if (zero? (- n 2))\n        (reverse res)\n        (recur (conj res (+ (first res) (first (rest res)))) (dec n)))))))","problem":26,"user":"4e71a12c535d5021c1a8964f"},{"problem":26,"code":"(fn fib [x] \n  (loop [in x out []]\n    (cond\n     (= 0 in) out\n     (= x in) (recur (dec in) (concat out '(1)))\n     (= (- x 1) in) (recur (dec in) (concat out (list (first out))))\n     :else (recur (dec in) (concat out  (list (+ (first (reverse out)) (second (reverse out)))))))))","user":"55b705fce4b01b9910ae29a0"},{"problem":26,"code":"#(rest (map (fn fib [n] (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))) (range (+ % 1))))","user":"549d7e16e4b0f3d1d8e70f96"},{"problem":26,"code":"#(loop [coll []]\n   (let [c (count coll)]\n   (if (= c %)\n      coll\n \t(recur (conj coll (if (< c 2) \n                   1 \n                   (+ (nth coll (- c 1)) \n                      (nth coll (- c 2))\n                      )) \n                  )))))","user":"5e10d1e6e4b099d064962fcf"},{"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fec51b4e4b0681fd128dca4"},{"problem":26,"code":"(fn [n]\n  (loop [acc 0\n         prev 0\n         cur 1\n         fib []]\n    (cond\n     (= acc n) fib\n     (= acc 0) (recur (inc acc) cur (+ cur prev) [cur])\n     (= acc 1) (recur (inc acc) cur (+ cur prev) [prev cur])\n     :else (recur (inc acc) cur (+ cur prev) (conj fib cur)))))","user":"55fe997be4b00f4cabc57653"},{"problem":26,"code":"(fn fib [num]\n  ( let [get-first (fn [l]\n                      (if (< (count l) 1)\n                        1\n                        (first l)))\n          get-second (fn [l]\n                      (if (< (count l) 2)\n                      1\n                      (first (rest l))))]\n  \n    (loop [n num\n        out '()]\n        \n    (cond\n     (= n 0) (sort (lazy-seq out))\n     (= n 1) (recur (dec n) (conj out 1))\n     (= n 2) (recur (dec n) (conj out 1))\n     :else (recur (dec n) (conj out (+ (get-first out) (get-second out))))\n      )\n    )\n)\n\n)","user":"579d1567e4b05b1deef9ae12"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 1 b 0 c 0 ls []]\n    (if (= c n)\n      ls\n      (recur (+ a b) a (+ c 1) (conj ls a)))))","user":"549b84a9e4b0f3d1d8e70f7e"},{"problem":26,"code":"(fn [num]\n  (loop [fib '(1 1)]\n    (println fib)\n    (cond\n      (= (count fib) num) (reverse fib)\n      :else (recur (conj fib (+ (first fib) (nth fib 1))))\n      )\n    )\n  )","user":"576d24ede4b0979f8965155b"},{"problem":26,"code":"(fn fib ([n] (take n (fib 1 1)))\n ([a n] (lazy-seq (cons a (fib n(+ a n))))))","user":"54bc539be4b0ed20f4ff6eca"},{"problem":26,"code":"(fn fib [n] \n  (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take n)))","user":"54377355e4b032a45b869305"},{"problem":26,"code":"(let [next-fib-vec (fn [fib-vec]\n                     (conj fib-vec\n                           (+ (peek fib-vec)\n                              (peek (pop fib-vec)))))]\n  \n  (fn [n]\n    (nth (iterate next-fib-vec [1 1]) (- n 2))))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn [n]\n  (loop [s [1 1]\n         nn-1 1\n         nn 1]\n         (if (<= n (count s))\n             (take n s)\n(recur (conj s (+ nn-1 nn)) nn (+ nn-1 nn)))))","problem":26,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn f ([arg] (take arg \n                  (map first \n                       (iterate (fn [[a b]] [b (+ a b)]) \n                                [1 1]\n                                )\n                       ))))","problem":26,"user":"52140b53e4b0961f15ac4d7e"},{"problem":26,"code":"(fn fibonacci [x]\n  (loop [x x, acc1 1, acc2 1, acc '()]\n    (if (= x 0)\n      (rseq (vec acc))\n      (recur (dec x) acc2 (+ acc1 acc2) (conj acc acc1)))))","user":"573b487de4b0cd1946bd10a1"},{"problem":26,"code":"#(loop [sum 1, vec [1], n (dec %)]\n   (if (= n 0)\n     vec\n     (recur (+ sum (last vec)) (conj vec sum) (dec n))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn fseq [n]\n    ((fn fibs [n a b xs]\n      (if (= n 0)\n          (reverse xs)\n          (fibs (dec n) b (+ a b) (conj xs a))))\n     n 1 1 ()\n))","problem":26,"user":"4fc5ee4fe4b0ee37620e1804"},{"problem":26,"code":"#(\n reduce \n (\n fn [p c] (conj p (reduce + (take-last 2 p) ) )\n ) [1] (range (dec %))\n)","user":"59c243bae4b0a024fb6ae4aa"},{"problem":26,"code":"(fn [n]\n   (last (take (dec n) (iterate (fn [s] (let [[b a] (rseq s)] \n                     (conj s (+ b a)))) [1 1]))))","user":"5b2689e3e4b063e2438bcc33"},{"problem":26,"code":"#(loop [fib '(1 1)]\n     (if (= (count fib) %) \n         (reverse fib) \n   \t\t (recur (conj fib (+ (first fib) (second fib))))))","user":"552712e7e4b0ffed3738f92a"},{"problem":26,"code":"(fn fib [x]\n (if (<= x 2)\n   [1 1]\n   (#(conj %\n           (apply + (take-last 2 %)\n           )\n         ) (fib (dec x))\n   )\n ))","user":"586b6d51e4b01531a375e958"},{"code":"#(loop [n % l '()]\n    (println n)\n    (println l)\n    (if (> n 0)\n      (recur (dec n) (conj l\n                           \n                           ((fn fib [n]\n  (loop [n n, v1 1, v2 1]\n    (if (< n 3)\n      v2\n      (recur (dec n) v2 (+ v1 v2))))) n)))\n      l))","problem":26,"user":"4fc524aae4b081705acca37e"},{"problem":26,"code":"(fn [n]\n   (let [base '(1 1)]\n     (condp = n\n       0 (rest base)\n       1 base\n       (loop [result base]\n         (if (= n (count result)) (reverse result) (recur (conj result (apply + (take 2 result)))))))))","user":"55c1eb52e4b0e31453f64970"},{"problem":26,"code":"(fn fib ([] (fib 1 1)) ([n] (take n (fib))) ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"54de7948e4b024c67c0cf7a4"},{"code":"(fn [n]\n  (letfn [(fib [i]\n               (if (>= 2 i)\n                 1\n                 (+ (fib (dec i)) (fib (- i 2)))))]\n    (map fib (take n (iterate #(inc %) 1)))))","problem":26,"user":"4edb1774535d10e5ff6f5315"},{"code":"(fn fib [n]\n  (take n ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))\n)","problem":26,"user":"4f718ce5e4b07046d9f4f00d"},{"problem":26,"code":"#(reduce (fn[x y] (conj x (+ (last x) (last(butlast x))))) '[1 1] (range (- % 2)\n                                                                       ))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn f [a b n] (if (pos? n) (cons a (f b (+ a b) (dec n))))) 1 1","problem":26,"user":"4ec65213535d6d7199dd36c8"},{"code":"#( let [val %]\n                                   (letfn [\n                                            (fib [current next n]\n                                              (if (zero? n)\n                                                current\n                                                (recur next (+ current next) (dec n))))\n\n                                            (take-fib [x] (fib 0 1 x))\n                                            ]\n\n\n                                     (map take-fib (range 1 (+ val 1)))\n\n                                    )\n                                 )","problem":26,"user":"50ee68fce4b06330c1f87c59"},{"problem":26,"code":"#(take % '(1 1 2 3 5 8 13 21 34 55 89 144 233))","user":"5600bed5e4b04bb52996e170"},{"problem":26,"code":"#(map (memoize (fn fibb\n  [n]\n  (cond\n   (= n 0) 1\n   (= n 1) 1\n   (> n 1) (+ (fibb (- n 1)) (fibb (- n 2)))))) (range %))","user":"54d267e0e4b0e8a36923e5f3"},{"code":"(fn [n]\n  (let [fibs \n        (map first \n          (iterate\n            (fn [[a b]] [b (+ a b)])\n            [1 1]))]\n  (take n fibs)))","problem":26,"user":"4fc40b0be4b081705acca344"},{"problem":26,"code":"(fn [n] (take n \n  \t\t\t((fn fib\n              ([] (fib 0 1))\n              ([x y]\n               (let [n (+ x y)]\n                 (lazy-seq (cons y (fib y n)))))))))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn fib-wrapper [n] \n  (if (= n 1) \n    [1]\n    (if (= n 2)\n      [1 1]\n      ((fn fib [i fib-seq]\n         (if (= 0 i)\n           fib-seq\n           (recur (- i 1) (conj fib-seq (+ (nth fib-seq (- (count fib-seq) 1)) (nth fib-seq (- (count fib-seq) 2)))))\n             )) (- n 2) [1 1]))))","problem":26,"user":"5395a79be4b0b51d73faaed9"},{"problem":26,"code":"#(reverse ((fn foo [n]\r\n               (if (== n 2)\r\n                 '(1 1)\r\n                 (let [f (foo (dec n))]\r\n                   (conj f (+ (first f) (second f)))))) %))","user":"57a9b2dbe4b0a96607956233"},{"problem":26,"code":"#(loop [i '(1 1)] (if (= % (count i)) (reverse i) (recur (conj i (apply + (take 2 i))))))","user":"57073037e4b0b0fb43fd0689"},{"problem":26,"code":"#(take %\n       (->> (iterate\n             (fn [[a b]] [b (+' a b)])\n             [0 1])\n            (drop 1)\n            (map first)))","user":"57c94c6ee4b05aa3c4741d2d"},{"code":"(fn fib [n] (let [next-fib-pair (fn [[a b]] [b (+ a b)])\n                  fib-pairs (iterate next-fib-pair [1 1])\n                  fibs (map first fib-pairs)]\n             (take n fibs)))","problem":26,"user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn [x]\n  (map (fn fibo[y] \n        (cond\n          (= y 0) 0\n          (= y 1) 1\n          :else (+ (fibo (- y 1)) (fibo (- y 2))))) (range 1 (+ x 1))))","problem":26,"user":"4f761a78e4b0fbe0118ec56c"},{"code":"(fn [n]\n  (take n\n    ((fn fibs-aux [a b]\n      (lazy-seq \n        (cons b \n              (fibs-aux b (+ a b)))))\n      0 1)))","problem":26,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":26,"code":"#(loop [r [1 1] n (- % 2)] (if (<= n 0) (sort (into '() r)) (recur (conj r (apply + (drop (- (count r) 2) r))) (dec n))))","user":"55afa977e4b002ce9d5cbc15"},{"code":"#(loop [cnt % fibs [1, 1]]\n    (if (< cnt 1)\n      (take % fibs)\n    (recur (dec cnt) (conj fibs (apply + (take-last 2 fibs))))))","problem":26,"user":"502cb310e4b0532a782a5e38"},{"problem":26,"code":"(fn fibonacci [limit]\n  (cond\n   (= limit 1) '(1)\n   :else\n   (loop [fibo-list '(1 1)\n          counter (- limit 2)]\n    (if-not (= counter 0)\n     (let [reverse-fibo (reverse fibo-list)]\n      (recur (reverse (conj reverse-fibo (+ (peek reverse-fibo)\n                                            (peek (pop reverse-fibo)))))\n             (dec counter)))\n     fibo-list))))","user":"57343747e4b0cd1946bd1006"},{"problem":26,"code":"(fn\n  [x]\n  (let [my-fn (fn my-fn\n                [a b]\n                (lazy-seq (cons b (my-fn b (+ a b)))))]\n    (take x (my-fn 0 1))))","user":"5d7670c4e4b02e6b30c93525"},{"problem":26,"code":"#(loop [n % fs [1] new 1]\n   (if (= n 1) fs\n   (recur (- n 1) (conj fs new) (+ (last fs) new))))","user":"5605b5e9e4b08b23635d316e"},{"problem":26,"code":"#(loop [sqc [1 1] i 2]\n                             (if(= % i)\n                             sqc\n                             (recur (conj sqc (+ (sqc (- i 2)) (sqc (- i 1)))) (inc i))))","user":"5495b2dee4b0b312c081ff5f"},{"problem":26,"code":"(fn [n] (->>\n         (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n         (take n)\n         (map second)))","user":"55f081bbe4b06e875b46ce25"},{"code":"(fn ! [x]\n  (if (>= 2 x)\n    '[1 1]\n    (let [prev (! (dec x))]\n      (conj prev (+ (last prev) (last (pop prev)))))))","problem":26,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn fib [n] ((fn fib2 [n, L] (if (= n 0) (reverse L) (recur (- n 1) (conj L (+ (first L) (second L)))))) (- n 2) '(1 1)))","problem":26,"user":"522dd30ee4b0a102974208c3"},{"problem":26,"code":"(fn fib [n]\n  ((fn iter [s]\n    (let [len (count s)]\n    \t(if (= n len) s (iter (conj s (+ (nth s (- len 1)) (nth s (- len 2))))))\n      )) [1 1]))","user":"5901158de4b0438e51c2d039"},{"code":"(fn fib [x]\n  (cond\n   (= x 1) [1]\n   (= x 2) (conj (fib (dec x)) 1)\n   :else \n   \t(let [ls (fib (dec x))]\n  \t (conj ls (+ (last ls) (last (butlast ls)))))))","problem":26,"user":"523b82efe4b07becd5be21f0"},{"problem":26,"code":"(fn[fiboNum](loop [fiboLst '(1 0) it 1] (if (< it fiboNum) (recur (conj fiboLst (+ (first fiboLst) (second fiboLst))) (inc it)) (rest (reverse fiboLst)))))","user":"59692530e4b069c0a1a197e4"},{"problem":26,"code":"(fn [n]\n  (rest (reverse (reduce (fn [res _]\n            (cons (+ (nth res 0) (nth res 1)) res)) '(1 0) (range (dec n))))))","user":"5e394c33e4b01d43a70e8dd1"},{"code":"#(take % (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1])))\n\n;; it's quite nice to use iterate here!!!","problem":26,"user":"517bbbfce4b07ef0e56148cf"},{"problem":26,"code":"(fn [end] \n   ((fn [x y i s]\n     (let [n (+ x y)] \n       (if (< i end)\n         (recur y n (inc i) (conj s n))\n         (reverse s))))\n   0 1 1 '(1)))","user":"53c349f5e4b00fb29b22127a"},{"problem":26,"code":"(fn [n]\n  (loop [ls [1 1]\n         c (- n 2)]\n    (if (zero? c)\n      ls\n      (recur (conj ls  (+ (last ls) (last (butlast ls))))\n                (dec c))\n     )\n   )\n  )","user":"60228147e4b0d5df2af22202"},{"problem":26,"code":"(fn fib [n]\n  (if (< n 2)\n    '[1]\n    (let [fib1 (fib (- n 1))\n          ff (take-last 2 fib1)]\n      (conj fib1 (+ (nth ff 0 0) (nth ff 1 0))))))","user":"5681afaae4b0945ebc182a87"},{"problem":26,"code":"(fn f [n]\n  (loop [i 0 f' 1 f'' 0 r []]\n    (if (= i n)\n      r\n      (let [f''' (+ f' f'')]\n        (recur (inc i) f'' f''' (conj r f'''))))))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn [n] \n  (take n [1 1 2 3 5 8 13 21]))","problem":26,"user":"52a32876e4b04e0c58e87bfb"},{"problem":26,"code":"(fn f [n] \n  (if (= n 1) \n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [prev (f (dec n))]\n        (conj \n           prev \n         (+ (last prev)\n            (second (reverse prev)))))\n        )\n         ))","user":"5e98e338e4b0157ca96647db"},{"code":"(fn f [n] (reverse ((fn fibo [n] (cond (= n 0) () (= n 1) '(1) (= n 2) '(1 1) (> n 2) (conj (fibo (- n 1)) ((fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) n)))) n)))","problem":26,"user":"4e72430c535d5021c1a8965d"},{"problem":26,"code":"(fn [n] \n  (let [fibn (fn fib [m] \n               (if (< m 2)\n                 1 \n                 (+ (fib (- m 1)) (fib (- m 2)))))]\n    (map fibn (range n))))","user":"5f6796d2e4b02876ed9fd036"},{"problem":26,"code":"(fn [n] \n  (loop [coll '(1) x 1 y n]\n    (if (= y 1)\n      (reverse coll)\n      (recur (cons x coll) (+ x (first coll)) (dec y))\n      )\n    )\n  )","user":"55fea1a1e4b00f4cabc57657"},{"problem":26,"code":"#(loop [fibo-seq [1 1]\n        counter 2]\n   (if (= counter %)\n     fibo-seq\n     (recur (into fibo-seq (vector (apply + (take 2 (reverse fibo-seq)))))\n            (inc counter))))","user":"53d50d33e4b00fb29b22133c"},{"problem":26,"code":"(fn fibo [n]\n     (loop [i 1\n              j 1\n              l [1]\n              c n]\n           (if (= c 1)\n             l\n             (recur j (+ i j) (conj l j) (- c 1)))))","user":"4f867b25e4b033992c121c51"},{"problem":26,"code":"(fn [i]\n  (loop [cnt (- i 2) out '[1 1]]\n    (if (zero? cnt)\n      out\n      (recur (- cnt 1)\n        (conj out (+ ((vec (reverse out)) 0) ((vec (reverse out)) 1)))))))","user":"554707bae4b0a04f79299544"},{"problem":26,"code":"#(rest (take (+ % 1)\n((fn fib [p n] \n   (cons p (lazy-seq (fib n (+ p n))))) 0 1)))","user":"5976da27e4b01722bebd4ce3"},{"problem":26,"code":"(fn [n]\n  (loop [x 1\n         y 1\n         xs [1]]\n    (if (= (count xs) n)\n      xs\n      (recur y (+ x y) (conj xs y)))))","user":"588053cae4b0f1effa3b7612"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [a 0\n         b 1\n         step 0\n         result []]\n    (if (= step n)\n      result\n      (recur b (+ a b) (+ step 1) (conj result b)))))","user":"5922a36ce4b026ae38521285"},{"code":"(fn fib\n  ([n]\n     (fib n 0 [1]))\n  ([n sec-last coll]\n     (cond\n      (= 1 n) coll\n      :else (fib (dec n) (last coll) (conj coll (+ (last coll) sec-last))))))","problem":26,"user":"507e68abe4b085af06e3afd2"},{"problem":26,"code":"(fn fibs [n]\n  (let [fib (fn fib [n]\n              (cond\n                (= n 0) 1\n                (= n 1) 1\n                :default (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map (fn [x] (fib x)) (range n))))","user":"553638bae4b09218d5f44fba"},{"code":"(fn [n] \n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ebd4448535dfed6da9c6d8f"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         r [1]]\n    (if (>= i n)\n      r\n      (recur (inc i) (conj r (apply + (take 2 (reverse r))))))))","user":"54157dace4b01498b1a719f4"},{"problem":26,"code":"(fn fib-list [x]\n  (map (fn fib [n] (cond (<= n 0) 0\n                     (< n 2) 1\n                     :else (+ (fib (- n 1)) (fib (- n 2)))))\n       (range 1 (+ 1 x))))","user":"5716540fe4b07c98581c3af3"},{"code":"(fn fib3 [n] \n  (cons 1\n    (take (dec n)\n      (map first (iterate (fn [[a b]] [b (+ a b)]) [1 2])))))","problem":26,"user":"504f44cfe4b0a02f9cffde65"},{"code":"#(take % (map first (iterate (fn fib [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"5186571de4b0da5a5be3bad1"},{"code":"#(map (fn fib [x] (if (> x 1) (+ (fib (- x 1)) (fib (- x 2))) 1)) (range 0 %))","problem":26,"user":"5349ac2be4b084c2834f4a67"},{"problem":26,"code":"(fn [i] (reverse ((fn fib [acc n] (if (= n (- i 1)) acc (fib (cons (+ (first acc) (second acc)) acc) (+ n 1)))) [1 1] 1)))","user":"54f4e286e4b0f2f3c5226e8c"},{"problem":26,"code":"(fn [search-index]\n(loop [prev 0 current 1 index 0 lst []] \n\t(println prev current)\n\t(if (= index search-index)\n\t\tlst\n\t\t(recur current (+ prev current) (inc index) (conj lst current))))\n)","user":"5b3de9a7e4b02d533a91bbf4"},{"code":"#(letfn [(fibs\n           ([] (fibs 0 1))\n           ([a b] (lazy-seq (cons b (fibs b (+ a b))))))]\n   (take % (fibs)))","problem":26,"user":"5017d9a9e4b0adbf98d88a3f"},{"code":"#(loop [n (- % 2), a [1 1]]\n   (if (zero? n)\n     a\n     (recur (dec n)\n            (conj a (+ (last a) (nth a (- (count a) 2)))))))","problem":26,"user":"530caf86e4b02e82168697df"},{"problem":26,"code":"(fn [x] \n  (for [j (range 1 (inc x))] \n    (let [fib (fn fib [i] \n              (cond (= 1 i) 1 \n                    (= 2 i) 1 \n                    :else (+ (fib (- i 1)) (fib (- i 2)))\n                    )\n              )] (fib j) ))\n )","user":"608b5c32e4b03bd49d9f36ae"},{"problem":26,"code":"(fn [x]\n  (loop [acc [1 1]]    \n    (cond (<= x 0) nil\n          (= x 1) [1]    \n          (= x (count acc)) acc\n      :otherwise (recur (conj acc (+ (last acc) (last (butlast acc))))) \n     )\n   )\n)","user":"54dce62fe4b024c67c0cf78c"},{"problem":26,"code":"(fn [x] (take x\n              (map first (iterate \n                          (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5f8e2a08e4b0715f5002d767"},{"code":"#(loop [c % out '(1 1)]\n   (if (= c 2)\n     (reverse out)\n     (recur (dec c)\n            (conj out (+ (first out) (second out))))))","problem":26,"user":"51b965dde4b0e871ca495905"},{"problem":26,"code":"#(loop [result [1 1] x 1 y 1 n (- % 2)] (if (= n 0) result (recur (conj result (+ x y)) (+ x y) x (- n 1))))","user":"585dc682e4b0f14aab7c87a0"},{"code":"(fn [n]\r\n  (let [all-fibs (fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))]\r\n  (take n (all-fibs))))","problem":26,"user":"4f1abbfb535d64f60314646e"},{"problem":26,"code":"(fn fibonacci [n]\n  (let [fib (fn [[a b]] [b (+ a b)])]\n    (take n\n       (map first\n         (iterate fib [1 1])))))","user":"54f03f8ce4b024c67c0cf891"},{"problem":26,"code":"#(take % ((fn fib-seq [a b] (cons a (lazy-seq (fib-seq b (+ b a))))) 1 1))","user":"58eb11afe4b056aecfd47d29"},{"problem":26,"code":"(fn [n]\n  (let [\n        append (fn append [s i]\n                 (if (= s '())\n                   (cons i nil)\n                   (cons (first s) (append (rest s) i))))\n        fibo-in (fn fibo-in [n a x y]\n                  (if (= n 0)\n                    a\n                    (fibo-in\n                     (- n 1)\n                     (append a (+ x y))\n                     y\n                     (+ x y))))\n        ]\n    (assert (> n 2))\n    (fibo-in (- n 2) '(1 1) 1 1)))","user":"557734d3e4b05c286339e07d"},{"code":"#(take % (\n          (fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"51d96ad0e4b02ceefd94774f"},{"problem":26,"code":"(fn [n] \n  (if (< n 3) \n    '(1 1)\n\t(reverse\n    (loop [i 2 fibs '(1 1)]\n      (if (= i n)\n        fibs\n        (recur (+ i 1) \n               (conj fibs (+ (first fibs) (second fibs)))))))))","user":"541c47bbe4b01498b1a71a72"},{"problem":26,"code":"#(reverse \n\t(\n\t\t(fn \n\t\t\tfib \n\t\t\t[upto]\n  \t\t\t(if (= upto 0) '()\n    \t\t\t(if (= upto 1) '(1)\n   \t\t\t\t\t(if (= upto 2) '(1 1) \n   \t\t\t\t\t\t(let [prev (fib (- upto 1))] \n   \t\t\t\t\t\t\t(conj prev (+ (first prev) (second prev)))\n   \t\t\t\t\t\t)\n   \t\t\t\t\t)\n   \t\t\t\t)\n   \t\t\t)\n   \t\t) %\n   \t)\n)","user":"56449e4de4b0284900eef5f9"},{"problem":26,"code":"(fn [x]\n  (loop [fibo [1 1]\n         i 2]\n    (if (= i x)\n      fibo\n      (recur (conj fibo \n                   (+ (get fibo (- i 1))\n                      (get fibo (- i 2))))\n             (inc i)))))","user":"5ee7cf92e4b029a2061bbea9"},{"problem":26,"code":"(fn \n  [num]\n\n\n  (loop [i 1 b 0 c 1 list '(1)]\n    (if (< i num)\n      (recur (inc i) c (+ b c) (conj list (+ b c)))\n      (reverse list)\n      )\n    ))","user":"5772ddb0e4b0979f896515d4"},{"problem":26,"code":"#(take%(map first(iterate(fn[[x y]][y(+ x y)])[1 1])))","user":"5d1de7b2e4b02ea6f0fb69ad"},{"code":"(fn fib [l]\n  (condp = l\n    1 [1]\n    2 [1 1]\n    (let [prev-fib (fib (dec l))]\n      (conj prev-fib (apply + (take-last 2 prev-fib))))))","problem":26,"user":"4eaa5c51535d7eef3080730a"},{"problem":26,"code":"#(take % (map first(iterate(fn[[a b]][b (+ a b)])[1 1])))","user":"57ecf8b2e4b0bfb2137f5b8b"},{"code":"(fn fib [n]\n  (loop [fibseq [] cur 1]\n    (cond (or (< n 1) (> cur n)) fibseq\n          (or (= cur 1) (= cur 2)) (recur (conj fibseq 1) (inc cur))\n          :else (recur (conj fibseq (+ (peek fibseq) (nth fibseq (- cur 3)))) (inc cur)))))","problem":26,"user":"5396c94be4b0b51d73faaee3"},{"problem":26,"code":"(fn [cnt] \n     (loop [i 0\n            count cnt\n            ans []]\n       (if-not (< i count)\n         ans\n         (if (< i 2)\n           (recur (inc i) count (conj ans 1))\n           (let [one-back-val (nth ans (- i 1))\n                 two-back-val (nth ans (- i 2))]\n               (recur (inc i) count (conj ans (+ one-back-val two-back-val))))))))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":26,"code":"(fn [n] \n    (loop [lst '(1 1)]\n        (if (= n (count lst))\n            (reverse lst)\n            (recur \n              (conj lst (apply + (take 2 lst)))))))","user":"56e9a56ae4b04a395b9a03fc"},{"code":"(fn [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))\n\n  )","problem":26,"user":"522a1248e4b0590a43906cf3"},{"code":"#(loop [p 1 c 1 n 0 r []] \n  (if (= n %) \n    r \n    (recur c (+ c p) (inc n) (conj r p))\n  ))","problem":26,"user":"4e588e84535d8a8b8723a294"},{"problem":26,"code":"#(loop [dataset '(1 1) cnt %]\n    (if (> cnt 2)\n      (recur (conj dataset (+ (first dataset)(fnext dataset)))(dec cnt))\n      (reverse dataset)))","user":"553093bee4b076ab5578f817"},{"code":"(fn [nbr] (loop [stop nbr z '(1 1)] (if (= (count z) stop) z (recur stop (concat z (list (apply + (take-last 2 z))))))) )","problem":26,"user":"4fb5033ce4b081705acca2b5"},{"code":"(fn [n]\n  (take n ((fn fib \n               [a b] \n               (cons a (lazy-seq (fib b (+ b a))))) \n            1 1)))","problem":26,"user":"50eebf46e4b06330c1f87c61"},{"problem":26,"code":"(fn fib-seq\n  ([size]\n   (fib-seq size (list 1)))\n  ([size fib-list]\n   (if (= size (count fib-list))\n     (sort fib-list)\n     (recur size (conj fib-list (reduce + (take 2 fib-list)))))))","user":"5fdba25ae4b05ac5b16ea135"},{"code":"(fn [y]\n(map (fn fib [x]\n  (if (or (= 0 x) (= 1 x))\n1\n(+ (fib (dec x)) (fib (- x 2)))))\n(range y)))","problem":26,"user":"4eb27fad535d7eef3080734a"},{"problem":26,"code":"(fn [nthfib] \n  (loop [is [1 1] c 0]\n    (if (>= c (- nthfib 2))\n      is\n      (recur (conj is (+ (last is) (last (drop-last is)))) \n             (inc c)))))","user":"50f02de7e4b0bdaecbb47db0"},{"code":"(fn [n] (map (fn fib [k] (if (< k 2) 1 (+ (fib (- k 1)) (fib (- k 2))))) (range 0 n)))","problem":26,"user":"50d242c0e4b06ad58337ed0f"},{"problem":26,"code":"(fn [x]\n   \n   (seq (reduce\n     (fn [a, i] (conj a (+\n                          (nth a (dec (count a)) 1)\n                          (nth a (dec (dec (count a))) 0)))\n       )\n     []\n     (range x)\n     )\n   ))","user":"5a2a0cb6e4b09cafd31c7f2c"},{"problem":26,"code":"(fn [x] (drop-last 2 (reduce (fn [a b] (conj a (+' (last a) (last (butlast a))))) [1 1] (range x))))","user":"560152dee4b04bb52996e186"},{"problem":26,"code":"#(take % (map second (iterate (fn [[a b]][b (+ a b)]) [0 1])))","user":"55e1d34ae4b050e68259b421"},{"problem":26,"code":"#(take %\n  ((fn fib-seq []\n    ((fn rfib [a b] \n         (cons a (lazy-seq (rfib b (+ a b)))))\n      1 1))))","user":"5638f61ce4b0bfe05bf117ed"},{"code":"(fn [x]\n  (letfn [(fibo [m n]\n            (let [o (+ m n)]\n              (lazy-cat [o] (fibo n o))))]\n    (take x (lazy-cat [1 1] (fibo 1 1)))))","problem":26,"user":"4faa8de0e4b081705acca1f8"},{"problem":26,"code":"(fn [c]\n  (letfn [\n          (fib [x y] (cons x (lazy-seq (fib y (+ x y)))))]\n    (take c (fib 1 1))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn [n]\n  (reverse\n    (loop [a 1 b 1 c n r '()]\n      (if (zero? c)\n        r\n        (recur b (+ a b) (dec c) (conj r a))))))","problem":26,"user":"5219e575e4b0c4ef0be82ffd"},{"problem":26,"code":"(fn [n] (if (= n 1) [1] (loop [counter 2 fibs [1 1]] (if (= counter n) fibs (recur (inc counter) (conj fibs (+ (last fibs) (last (butlast fibs)))))))))","user":"5e1cc888e4b0dc959400853d"},{"code":"(fn fib [n]\n    (case n\n    1 '(1)\n    2 '(1 1)\n    (reverse\n      (loop [col '(1 1) c 2]\n        (if (= c n) \n          col\n          (recur (cons (+ (first col) (second col)) col) (inc c)))))))","problem":26,"user":"50c7431ae4b00bb60fe0c531"},{"problem":26,"code":"(fn fib [f]\n  (reverse ((fn fib-iter [x]\n    (case x\n      1 '(1)\n      2 '(1 1)\n      (let [fs (fib-iter (dec x))]\n        (cons (+ (first fs) (second fs)) fs)))) f)))","user":"53ff8c31e4b0de5c41848603"},{"problem":26,"code":"(fn [x] (loop [a 1 b 1 acc [] n x] (if (= n 0) acc (recur b (+ a b) (conj acc a) (dec n)))))","user":"59f4c9c8e4b0966464fe6ab8"},{"code":"#( if (= %4 0) %3\n (recur %2 (+ %2 %1) (concat %3 (list %2)) (- %4 1))\n) 0 1 '()","problem":26,"user":"50fc9f6fe4b0d10d794c19fa"},{"problem":26,"code":"(fn [x]\n  (loop [prev 0 curr 1 iter 1 nums []]\n    (if(<= iter x)\n      (recur curr (+ curr prev) (inc iter) (conj nums curr))\n      nums)))","user":"5f3ddc71e4b004f08c61c551"},{"problem":26,"code":"#(take % '(1 1 2 3 5 8 13 21 ))","user":"5b18f2d2e4b00d69b768e777"},{"problem":26,"code":"(fn [listCount] (reverse (loop [current 1 templist (list 1)] (if (= listCount (count templist)) templist (recur (+ current (first templist)) (conj templist current))))))","user":"5439c3cee4b032a45b869323"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1]) (map first) (take n)))","user":"58aee148e4b0ebc645576cc3"},{"code":"#((fn [a b acc n] (if (pos? n) (recur b (+ a b) (conj acc (+ a b)) (dec n)) acc)) 1 1 [1 1] (- % 2))","problem":26,"user":"51a2a376e4b00957e520db7f"},{"code":"(fn t [a & rest] (if (nil? rest) (t  a 2 '(1 1)) (if (> a (first rest)) (t a (inc (first rest)) (conj (second rest) (+ (first (second rest)) (second (second rest))))) (reverse (second rest)))))","problem":26,"user":"5162891ee4b0e6d3c4734712"},{"code":"(fn [n]\n  (loop [acc [1 1] n1 1 n2 1 c 2]\n    (if (== c n)\n      acc\n      (recur (conj acc (+ n1 n2)) n2 (+ n1 n2) (inc c)))))","problem":26,"user":"4e99819a535dbda64a6f6b66"},{"code":"(fn [limit]\n  (loop [seq '(1 1)]\n    (if (= (count seq) limit)\n      (reverse seq)\n      (recur (cons (+ (first seq) (second seq)) seq)))))","problem":26,"user":"4e9c3648535dbda64a6f6b7d"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1] a 0 b 1 x n]\n    (if (= x 1)\n      acc\n      (let [next (+ a b)]\n        (recur (conj acc next) b next (dec x))))))","user":"55e70e8de4b050e68259b490"},{"problem":26,"code":"(fn [x]\n  (letfn\n    [(next-fib [[n-1 n-2]] [(+ n-1 n-2) n-1])]\n    (take x (map first (iterate next-fib [1 0])))))","user":"5df70ee8e4b0a607a9a45c8a"},{"problem":26,"code":"#(take % (loop [x 2 r [1 1] a 1 b 1]\n  (if (> x %)\n    r\n    (recur (inc x) (conj r (+ a b)) b (+ a b)))))","user":"5947c6a6e4b07ddc2dafada7"},{"problem":26,"code":"(fn [x] ((fn gitFibNs [x a b fibNs] (if (= x 0) (reverse fibNs) (gitFibNs (- x 1) b (+ a b) (cons b fibNs)))) x 0 1 '()))","user":"5cdc3c69e4b05ee0cb311741"},{"code":"(fn fibonicca [x]\n  (take x '(1 1 2 3 5 8 13 21))\n)","problem":26,"user":"5125029de4b0ce9225d2ed3e"},{"problem":26,"code":"(fn [len] (map (fn nth-fib [n] (if (< n 2) 1 (+ (nth-fib (- n 1)) (nth-fib (- n 2))))) (range len)))","user":"56041d21e4b0c80df0ca2656"},{"problem":26,"code":"(fn [x]\n         (letfn [(fib [n] \n                   (cond (= n 0) 0\n                         (= n 1) 1\n                         :else (+ (fib (- n 1))\n                                  (fib (- n 2)))))]\n           (loop [n x\n                  result '()]\n             (if (= n 1)\n               (conj result 1)\n               (recur (dec n) (conj result (fib n)))))))","user":"566f0ff6e4b0a866af6896e5"},{"problem":26,"code":"(fn [n] (take (+ n 0) ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1)))","user":"5713c575e4b07c98581c3aab"},{"problem":26,"code":"#(map (fn f [n] (if (or (= n 1) (= n 2)) 1 (+ (f (- n 1)) (f (- n 2)))))\n\t\t (range 1 (+ 1 %)))","user":"53ba41c2e4b047364c0444f3"},{"code":"(fn fib-list [nn]\n  (let [fib-f (fn fib [n] \n              (cond \n                (= n 0) 1\n                (= n 1) 1\n                (> n 1) (+ (fib (dec n)) (fib (- n 2)))))]\n    (map fib-f (range 0 nn))))","problem":26,"user":"50aa8776e4b056ee01935867"},{"problem":26,"code":"(fn\n  [n]\n  (loop [x 1\n         y 1\n         nums [1 1]]\n    (if (= (count nums) n)\n      nums\n      (recur y (+ x y) (conj nums (+ x y))))))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":26,"code":"#(map (fn foo [x]\n  (if (< x 2) 1\n    (+ (foo (- x 1)) (foo (- x 2)))))\n      (range %))","user":"54133900e4b01498b1a719de"},{"problem":26,"code":";;Not My Work\n(fn [numberOfFibs]\n\t(letfn [(lazyFib [a b] (cons a (lazy-seq (lazyFib b (+ b a)))))]\n    \t(take numberOfFibs (lazyFib 1 1))))","user":"552689cfe4b0ffed3738f91e"},{"problem":26,"code":"#(loop [l 0 y 1 n 0 c []] (if (= n %) c (recur y (+ l y) (inc n) (conj c y))))","user":"5b22d30ee4b08b1df1c36750"},{"code":"#(map (fn [n] ((fn [a b n] \n  (if (= n 0)\n    (+ a b)\n    (recur (+ a b) a (- n 1)))) 0 1 (- n 1))) (range 1 (+ % 1)))","problem":26,"user":"5152020de4b03e678e393ae7"},{"code":"(fn [x]\n  (loop [fibList [1 1]\n         x x]\n    (if (= x (count fibList))\n      fibList\n      (recur (conj fibList (+ (last fibList) (nth fibList (- (count fibList) 2)))) x)\n    )\n  )\n)","problem":26,"user":"53a36fd7e4b0f1fc74538834"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) result [1 1]]\n    (if (zero? n)\n      (reverse result)\n      (recur (- n 1) (cons (+ (first result) (second result)) result)))))","user":"53b780b8e4b047364c0444cf"},{"code":"(fn [num]\n  (let [ lazy-fib (fn lazy-fib [a b]\n                    (lazy-cat (list a) (lazy-fib b (+ a b))))]\n    (take num (lazy-fib 1 1))))","problem":26,"user":"536f871de4b0fc7073fd6e7f"},{"problem":26,"code":"#(take % ((fn fibonnaci [x, y]\n           (cons x (lazy-seq (fibonnaci y (+ x y))))\n         ) 1 1)\n)","user":"5683fc85e4b0945ebc182aa7"},{"problem":26,"code":"(fn fib [n]\n  (cond (<= n 1) '(1)\n        (<= n 2) '(1 1)\n        true (let [f (fib (dec n)) r (reverse f)]\n               (concat f (list (+ (first r) (second r)))))))","user":"59663e77e4b069c0a1a1979f"},{"problem":26,"code":"#(reduce (fn [acc _] \n           (let [n1 (or (last acc) 1)\n                 n2 (or ((comp second reverse) acc) 0)]\n             (conj acc (+ n1 n2))))\n         [] (range %))","user":"4fc4e9b5e4b081705acca352"},{"problem":26,"code":"(fn fib-n [n]\n  (loop [a 1\n         b 1\n         n n\n         acc []]\n    (if (= n 0)\n      acc\n      (recur b (+ a b) (- n 1)\n             (conj acc a)))))","user":"5671ccb5e4b05957ce8c610d"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  \t(take n (fib 1 1))))","user":"55f9c245e4b03cbcff9738ca"},{"code":"(fn [n]\r\n  (loop [n (- n 2) a 1 b 1 coll [1 1]]\r\n    (if (< n 1)\r\n      coll\r\n      (recur (dec n) b (+ a b) (conj coll (+ a b))))))","problem":26,"user":"4f2d5246e4b0d6649770a059"},{"code":"#(loop [n % x 1 y 1 acc []]\n  (if (zero? n)\n    acc\n    (recur (dec n) y (+ x y) (conj acc x))))","problem":26,"user":"4f141dee535d64f603146434"},{"code":"(fn [x]\n    (if (<= x 2)\n      1\n      (loop [xx (- x 2) fib '(1 1)]\n        (if (zero? xx)\n          (reverse fib)\n          (recur\n            (dec xx)\n            (conj\n              fib\n              (+ (first fib) (second fib))))))))","problem":26,"user":"50d8de3fe4b01f0871336e72"},{"code":"#(take % \n      (map \n       last\n       (iterate\n       (fn\n         [[x y]] \n         [y (+ x y)]) \n       [0 1])))","problem":26,"user":"51c1b644e4b0d204dbe2ca12"},{"problem":26,"code":"(fn fib2 [n]\n\t(case n\n\t\t1 [1]\n\t\t2 [1 1]\n\t\t(let [prec (fib2 (- n 1))]\n\t\t\t(conj prec (+ (last prec) (second (reverse prec)))))\n\t))","user":"54a70484e4b09f271ff37c91"},{"problem":26,"code":"(fn fib [n]\n  ((fn iter [c res]\n     (if (= c n)\n        (reverse res)\n        (let [next (if (< c 2) 1 (reduce + 0 (take 2 res)))]\n        \t(iter (inc c) (conj res next)))\n     )) 0 ()))","user":"567d132ee4b05957ce8c61c3"},{"problem":26,"code":"(fn fib [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n   \t(let [s (fib (- n 1))\n          cur (+ (last s) (second (reverse s)))]\n      (conj s cur))))","user":"52860baae4b0239c8a67ae09"},{"problem":26,"code":"#(take % \n\t(map first\n         (iterate\n          (fn [[i1 i2]] [i2 (+ i1 i2)])\n          [1 1])\n         ))","user":"5b602a66e4b0c6492753e6fc"},{"problem":26,"code":"(fn fib\n   ([] (fib 1 1))\n   ([n] (take n (fib)))\n   ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"5cc6b681e4b0ccb061962828"},{"problem":26,"code":"(fn [n]\n  (if (= n 0)\n    '())\n  (if (= n 1)\n    '(1))\n  (loop [n (- n 2) s '(1 1)]\n    (if (zero? n)\n      (reverse s)\n      (recur (dec n) (conj s (+ (first s) (second s)))))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":26,"code":"(fn\n  [n]\n  (loop [curr 1\n         next 1\n         n n\n         result []]\n    (if-not (zero? n)\n      (recur next (+ curr next) (dec n) (conj result curr))\n      result)))","user":"5d2de4cde4b01671435dbca4"},{"problem":26,"code":"(fn fib\n  ([n] (fib n 0 1 '()))\n  ([n a b l]\n   (if (= n 0)\n     l\n     (let [newterm (+ a b)]\n       (fib (- n 1) b newterm (conj (vec l) b))))))","user":"5875daaee4b01531a375ea74"},{"code":"(fn fib [n] (reverse (loop [lst '(1) n1 1 n2 0] (if (= n (count lst)) lst (recur (conj lst (+ n1 n2)) (+ n1 n2) n1)))))","problem":26,"user":"4fecebe1e4b0681fd128dcac"},{"code":"(fn [n]\n  (take n\n  \t((fn fib [a b] (cons a (lazy-seq(fib b (+ a b)))))\n       1 1)))","problem":26,"user":"51479245e4b0541f4bec05ce"},{"code":"#(map\n(fn fib [n] (if (< n 3)\n              1\n              (+ (fib (- n 1))\n                 (fib (- n 2))\n              )\n            )\n)\n(range 1 (+ % 1))\n)","problem":26,"user":"51f00589e4b0249c592fbdfb"},{"problem":26,"code":"(fn [n]\n  (loop [n n l []]\n  \t(cond (= n 0) l\n          (< (count l) 2) (recur (- n 1) (conj l 1))\n          :else (recur (- n 1)\n                       (conj l (+ (last l) \n                                  (nth l (- (count l) 2))))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":26,"code":"(fn [x]\n  (loop [fibs-remaining (- x 2)\n         fibs [1 1]]\n    (if(= fibs-remaining 0)\n      fibs\n      (recur (dec fibs-remaining) (concat fibs [(+ (last fibs) (second (reverse fibs)))])))))","user":"5550dad4e4b00713264bd9b0"},{"problem":26,"code":"(fn [len] (map last (take len (iterate (fn [x] [(second x) (+ (first x) (second x))]) [0 1]))))","user":"563e7a33e4b0da801c4e466d"},{"problem":26,"code":"#(loop [i %1 list '(1 1)] (if (< i 3) (reverse list) (recur (dec i) (cons (+ (first list) (second list)) list))))","user":"56c6a3c3e4b05cc29241eeb3"},{"problem":26,"code":"(fn [n]\n  (map last (take n\n        (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"540c54a7e4b0addc1aec6700"},{"problem":26,"code":"(fn f [ n ] (if  (= n 1  )  [1]  (if (= n 2) [1 1] (let [l (f (dec n))] (conj l (apply + (take-last 2 l)))))))","user":"53b2a7f8e4b047364c04449c"},{"problem":26,"code":"(fn [n] (map (fn fib [n] (if (< n 2) 1  (+ (fib (- n 1)) (fib (- n 2))))) (range n)))","user":"57783e59e4b0979f8965165d"},{"problem":26,"code":"(fn fib\n([] (fib 1 1))\n([n] (take n (fib)))\n([n0 n1]  (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"5c196184e4b01240ff5671f8"},{"problem":26,"code":"#(map (fn fi [x]  (if (>   x 1)      (+ (fi (dec x))  (fi (- x 2)) )     1     )    ) (range %))","user":"5da98129e4b000c986472c33"},{"problem":26,"code":"(fn [n]\n  (loop [lst '(1 1)\n         n n]\n    (if (= n 1)\n      (first lst)\n      (if (= n 2)\n        (reverse lst)\n        (recur (cons (+ (first lst) (first (rest lst))) lst) (dec n))))))","user":"57f81549e4b0d3187e900918"},{"problem":26,"code":"#(map first (take %1 (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"511036c5e4b04c71fce993ee"},{"problem":26,"code":"(fn f [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [fib (f (dec n))\n \t           next (apply + (take 2 (reverse fib)))]\n           (concat fib (list next)))))","user":"5db92996e4b010eb3c36cd50"},{"problem":26,"code":"(fn [n]\n  (loop [a 0, b 1, fib [1]]\n    (if (= n (count fib))\n      fib\n      (let [nfib (+ a b)]\n        (recur b nfib (conj fib nfib))))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"#(loop [n % a 1 b 1 c []] (if (> n 0) (recur (dec n) b (+ a b) (conj c a)) c))","problem":26,"user":"4e68be01535d8ccf87e9fe88"},{"problem":26,"code":"(fn [n]\n    (loop [s [] i 0] \n        (if (= i n)\n            (seq s)\n            (if (< i 2)\n                (recur (conj s 1) (inc i))\n                (recur (conj s (+ (last s) (last (butlast s)))) (inc i))))))","user":"55975569e4b031d6649c9b8e"},{"problem":26,"code":"#(loop [n (- % 2) ret [1 1] ]\n   (if (zero? n)\n   ret\n   (recur (dec n) (conj ret (apply + (take-last 2 ret))))\n))","user":"5c805d45e4b0c8042a70ce13"},{"problem":26,"code":"(fn [n]\n  (loop [terms [1 1]]\n    (if (= n (count terms))\n        terms\n        (recur\n          (conj terms (apply + (take-last 2 terms)))))))","user":"573b440ce4b0cd1946bd10a0"},{"code":"(fn fib [x]\n  (if (< x 3)\n      (apply list (repeat x 1))\n      (let [sub (fib (dec x))]\n        (concat sub (list (apply + (take-last 2 sub)))))))","problem":26,"user":"4f70afb8e4b07046d9f4effb"},{"problem":26,"code":"#(loop [n %\n        current 0\n        next 1\n        result []]\n   (if (= (count result) n)\n     result\n     (recur n next (+ current next) (conj result next))))","user":"54dc2c3ae4b024c67c0cf77d"},{"code":"(fn [x]\r\n  (take x ((fn fibo [a b]\r\n    (cons a (lazy-seq (fibo b (+ a b))))) 1 1)))","problem":26,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn [n]\r\n    (cond (= n 1) '(1)\r\n          (= n 2) '(1 1)\r\n          :else (reverse (loop [curr (- n 2) acc '(1 1)]\r\n                    (if (= curr 0) acc\r\n                                    (recur (dec curr) (conj acc (+ (peek acc) (peek (pop acc)) ))))))))","problem":26,"user":"523dd963e4b06956f8342ca1"},{"code":"(fn [m]\n  (loop [i 0\n         c 1\n         n 1\n         acc '()]\n    (if (= i m)\n      (reverse acc)\n      (recur (inc i)\n        \tn\n        \t(+ c n)\n        \t(conj acc c)))))","problem":26,"user":"517d755ce4b0f5e87c18f263"},{"problem":26,"code":"(fn fib \n([len]\n  (fib [] len))\n([coll numleft]\n    (if (zero? numleft) \n      coll \n      (if (< (count coll) 2) \n        (fib (conj coll 1) (dec numleft))\n        (let [s1 (nthrest coll (- (count coll) 2))\n             s2 (conj coll (+ (first s1) (second s1)))]\n             (fib s2 (dec numleft)))))))","user":"6033f8e9e4b0d5df2af222c6"},{"problem":26,"code":"(fn [x]\n   (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"571bc0a1e4b07c98581c3b6c"},{"problem":26,"code":"(fn [num] (loop [viewed []]\n             (if (= (count viewed) num)\n               viewed\n               (recur (conj viewed (apply + (or (take-last 2 viewed) [1])))))))","user":"606c87aae4b069485764de0d"},{"code":"(fn [x]\n  (loop [i (- x 2) fibs '(1 1)]\n    (if (not (pos? i))\n      (reverse fibs)\n      (recur (dec i) (conj fibs \n       (+ (first fibs) (second fibs)))))))","problem":26,"user":"4fe4c09ee4b0e8f79898febb"},{"code":"#(letfn [(fib [a b] \n           (lazy-seq (cons a (fib b (+ a b)))))]\n   (take % (fib 1 1)))","problem":26,"user":"5002b6e5e4b0678c553fc42c"},{"problem":26,"code":"#(loop [a 1 b 1 cnt % res []]\n         (if (> cnt 0)\n           (recur b (+ a b) (dec cnt) (conj res a))\n           res\n           ))","user":"55dd8c25e4b050e68259b3c7"},{"code":"#(loop [n (- % 2) r '[1 1]]\n   (if (<= n 0)\n       r\n       (recur (dec n) (conj r (+ (last r)\n                                 (nth r (- (count r) 2)))))))","problem":26,"user":"4e8ad247535d65386fec2111"},{"problem":26,"code":"(fn fibs [n] (cond (zero? n) [] (= 1 n) [1] (= 2 n) [1 1] (< 2 n) (conj (fibs (dec n)) (apply + (drop (- n 3) (fibs (dec n)))))))","user":"54965534e4b0b312c081ff65"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (fib 1 1)) \n  )  \n)","user":"5700f1f0e4b08d47c97781ce"},{"code":"#(loop [x % ls '(1 1)] (if (< x 3) (reverse ls) (recur (dec x) (conj ls (+ (first ls) ((comp first rest) ls))))))","problem":26,"user":"5301157ae4b0d8b024fd3717"},{"problem":26,"code":"(fn foo [n] (if (= 2 n) [1 1] (let [lst (foo (- n 1))] (conj lst (+ (last lst) (nth lst (- (count lst) 2)))))))","user":"56e227a8e4b03a7c14b85a31"},{"code":"#(nth\n (iterate \n  (fn addfib [coll] (conj \n   coll\n   (+ (last coll) (last (butlast coll)))))\n  [1 1])\n (- % 2))","problem":26,"user":"51424028e4b0b50abeb46b31"},{"code":"(fn fib [x] ( if (= x 1) '(1) (if (= x 2) '(1 1) ( \n                                                      \n                                                   concat (fib (dec x)) (list (+ (last (fib (dec x)))  (last (butlast (fib (dec x))))  ))   \n                                                      \n                                                      ) )   )    )","problem":26,"user":"5210e5c5e4b080a8d9b9d63f"},{"problem":26,"code":"(fn[n]\n    (loop [x (dec n)\n           result [1]]\n      (if (zero? x)\n          result\n        (recur\n          (- x 1)\n          (conj result (reduce + (take-last 2 (seq result))))\n          ))))","user":"515b03fee4b0a102a3e5262a"},{"code":"(fn fib [n] (rest (nth \n                    (iterate \n                      (fn [l] (conj l (+ (first (reverse l)) (second (reverse l)))))\n                      [0 1])\n                    (- n 1))))","problem":26,"user":"51352899e4b082aeb3a3f03b"},{"problem":26,"code":"(fn fib [n]\n  (loop [result [1 1]\n         n n]\n    (if (= n 2)\n      result\n      (recur (conj result (+ (last result) (last (pop result)))) (- n 1)))))","user":"53acca34e4b047364c044460"},{"problem":26,"code":"(fn fib [x] (loop [y 0 res []] (if (= x y) (seq res) (recur (inc y) (if (< y 2) (conj res 1) (conj res (+ (get res (- y 1)) (get res (- y 2)))))))))","user":"5e035030e4b0a607a9a45d59"},{"problem":26,"code":"(fn fiblist [x]\n  (map (fn fib [n]\n         (if (<= n 1) \n          1\n          (+ (fib (- n 2)) (fib (dec n))))) \n       (range 0 x)))","user":"5b9263ece4b0c0b3ffbd4a37"},{"problem":26,"code":"(fn my-fib [x]\n    (reduce\n      (fn [a b]\n          (conj a (+' (last a) (last (butlast a)))))\n      [1 1]\n      (range (- x 2))))","user":"56020b3fe4b04bb52996e19b"},{"problem":26,"code":"#(loop [prev 0 out [1]] (if (> % (count out)) (recur (last out) (conj out (+ prev (last out)))) out))","user":"5ebaf687e4b00a66d4a9525b"},{"problem":26,"code":"(fn [input]\n\n       (reduce (fn [sofar value]\n                 (conj sofar\n\n                       (if (< value 2)\n                         1\n                         (+ (last sofar) (last (butlast sofar))))\n\n                       ))\n\n               []\n\n               (range input)\n\n               )\n\n       )","user":"54ef4a1ee4b024c67c0cf883"},{"problem":26,"code":"#(->> [1 1] \n      (iterate (fn [[a b]] [b (+ a b)]))\n      (map first)\n      (take %))","user":"55f2b42be4b06e875b46ce4a"},{"code":"(fn [m] (map #((fn fib [n] \n  (if \n    (< n 1) 1 \n    (+ \n      (fib (- n 1)) \n      (fib (- n 2))))) %) (range -1 (- m 1))))","problem":26,"user":"4fa68ed4e4b081705acca1bb"},{"code":"#(take % (map first\r\n     (iterate (fn [[a b]] [b, (+ a b)]) [1 1])\r\n   ))","problem":26,"user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn fibo [x]\n  (loop [num x\n         result []]\n    (if (> num 0)\n      (if (or (empty? result) (= (count result) 1))\n        (recur (dec num) (conj result 1))\n        (recur (dec num) (conj result (+ (last result) (nth result (- (count result) 2))))))\n      result)))","problem":26,"user":"52d6c849e4b09f7907dd1368"},{"problem":26,"code":"(fn fib [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"535d8d8fe4b04ce2eb3ed2c4"},{"code":"(fn fib-n [n] (map (fn fib [x]\n                     (if (or (= x 1) (= x 2))\n                       1\n                       (+ (fib (dec x)) (fib (- x 2)))\n                       )\n                     ) (range 1 (inc n))\n                   )\n  )","problem":26,"user":"529d4f4be4b04e0c58e87b79"},{"problem":26,"code":"(fn [x]\n    (let [fib (fn fib [n]\n                (if (or (= n 0) (= n 1))\n                  1\n                  (+ (fib (- n 1)) (fib (- n 2)))))]\n      (take x (map fib (range)))))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":26,"code":"(fn [amount]\n  (loop [n amount x 1 y 1 res []]\n    (if (= 0 n)\n        res\n        (recur (dec n) y (+ x y) (conj res x)))))","user":"571fb6a0e4b0145328a762b5"},{"code":"(fn [x]\r\n  (loop [t 1 i 1 j 0 k 0 lista '()]\r\n    (if (= k x)\r\n       lista\r\n       (recur (+ i j) j (+ i j) (inc k) (concat lista (list (+ i j))))\r\n    )\r\n  )\r\n)","problem":26,"user":"4e94aa18535dbda64a6f6b1e"},{"problem":26,"code":"(fn myfic[n]\n  (let [fic (fn fic[n arr](let [addone (fn [arr](if (empty? arr) \n                  [1]\n                  (if (= 1 (count arr))\n                    [1 1]\n                    (conj arr (+ (arr (- (count arr) 2)) (+ (arr (- (count arr) 1))))))))]\n  (if (= n 0) arr (fic (dec n) (addone arr)))\n  ))]\n   (fic n [])\n   ))","user":"55aba8f4e4b03311e7b7328c"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn [n]\n  (take n\n    (map first (iterate\n      (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fa659f3e4b081705acca1b6"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 0) nil\n    (or (= n 1) (= n 2)) (repeat n 1))\n  \t:else (last (take (- n 1) (iterate #(concat % [(+ (last %) (first (take-last 2 %)))]) '(1 1)))))","user":"595d224de4b066ee0a44b016"},{"problem":26,"code":"(fn fibo [n]\n  (cond\n    (= n 1) '(1)\n    :else (loop [a 1, b 1, s 2, res '(1 1)]\n            (if-not (= n s)\n              (recur b (+ a b) (inc s) (conj (vec res) (+ a b)))\n              (seq res)))))","user":"587bead1e4b01531a375eb0d"},{"code":"(fn [x]\n   (loop [n (- x 2) result [1 1]] \n    (if (zero? n) \n      result \n      (recur \n       (dec n) \n       (conj result\n             (+ \n              (last result) \n              (nth result (- (count result) 2))))))))","problem":26,"user":"52616198e4b03e8d9a4a705e"},{"code":"#(take % \n  ((fn fib \n    ([] (fib 1 1))\n    ([f s]\n      (lazy-seq (cons f (fib s (+ f s))))))))","problem":26,"user":"4f608f0ee4b0defedf855faa"},{"problem":26,"code":"#(loop [i 2 cur 2 res [1 1]]\n      (if (= i %)\n        res\n        (recur (inc i) (+ (last res) cur) (conj res cur))))","user":"57cc5a79e4b0c746388ab87d"},{"problem":26,"code":"(fn fib ([counter] (fib counter [])) \n  ([counter lst] (if (= counter 0) lst \n   (fib (dec counter) \n     (conj lst (if (empty? lst) 1 (apply + (take-last 2 lst))))\n       ))))","user":"5461873de4b01be26fd746a3"},{"problem":26,"code":"#(take %((fn fib [a b] \n  (cons a (lazy-seq (fib b (+ b a))))) 1 1 ))","user":"54380631e4b032a45b86930f"},{"code":"(fn fib [n] (cond (= n 1) '(1)\n                  (= n 2) '(1 1)\n                  true (reverse (conj (reverse (fib (dec n))) \n                                      (reduce + (take 2 \n                                (reverse (fib (dec n)))))))))","problem":26,"user":"4f567cdbe4b0a7574ea71824"},{"code":"(fn [x]\r\n (let [fib (iterate (fn [y] [(y 1) (apply + y)]) [1 1])] \r\n  (take x (map first fib))\r\n )\r\n)","problem":26,"user":"4e15c301535d04ed9115e7e5"},{"problem":26,"code":"(fn \n    [number]\n    (loop [i (range number)\n           result []]\n      (cond\n        (empty? result)\n            (recur (rest i) (conj result 1))\n        (= 1 (first i))\n            (recur (rest i) (conj result 1))\n        (empty? i)\n            result\n        :else \n            (recur (rest i) (conj result (reduce + (take-last 2 result)))))))","user":"54391a55e4b032a45b869319"},{"code":"#(loop [cnt % x 0 acc [1]]\n   (if (= cnt (count acc))\n     acc\n     (let [next_value (last acc)]\n\t   (recur (int cnt) next_value (conj acc (+ x next_value)))\n   \t   )\n     )\n   )","problem":26,"user":"5181cf74e4b06547fbae1159"},{"code":"(fn [size]\n  (take size\n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5057852ce4b0012181721992"},{"problem":26,"code":"(fn [num]\n  (reverse\n  ((fn fib  [n [a b & args :as v]]\n  (if (= n (count v)) v\n      (fib n (conj args b a (+ a b))))\n  ) num [1 1])))","user":"5b857411e4b047b03b2037ce"},{"code":"(fn [howMany] \n  (take howMany ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"538c6db7e4b0b51d73faae5a"},{"code":"(fn [n]\n  (loop [fibs []]\n\t(cond\n     (= n (count fibs)) fibs\n     (or (not (seq fibs)) (= 1 (count fibs))) (recur (conj fibs 1))\n         :else \n         (recur (conj fibs (+ (last (butlast fibs)) (last fibs)))))))","problem":26,"user":"511a5328e4b09045b2b16946"},{"code":"#(take %\n        ((fn fib' [a b]\n        (lazy-seq (cons a (fib' b (+ b a)))))\n         1 1))","problem":26,"user":"506b0a9ce4b0a2a5463de380"},{"problem":26,"code":"#(take % \n       ((fn fib \n          [n m] \n          (cons n (lazy-seq (fib m (+ n m))))) 1 1))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":26,"code":"(fn\n[cnt]\n(letfn [(fibo\n\t\t\t([] (fibo 1 1))\n\t\t\t([a b] (cons a (lazy-seq (fibo b (+ a b) ))))\t\n\t\t\t)]\n\t\t\t(take cnt (fibo)))\n)","user":"53c6c9dfe4b00fb29b2212a1"},{"problem":26,"code":"#(reverse ((fn fib-helper [l, n]\n  (if (= n 0)\n    l\n    (if (< (count l) 2)\n      (fib-helper (conj l 1) (- n 1))\n      (fib-helper (conj l (+ (first l) (first (rest l)))) (- n 1))))) '() %))","user":"53e92821e4b036ad0777e499"},{"problem":26,"code":"#(loop [i1 0 i2 1 n % out []] \n   (cond (<= n 0) out\n         :else (recur i2 (+ i1 i2) (dec n) (conj out i2))))","user":"56f51879e4b046a417f92069"},{"problem":26,"code":"#(map (fn fib [n]\n        (if (> n 2)\n          (+ (fib (- n 1)) (fib (- n 2)))\n          1))\n      (map inc (range %)))","user":"54d753ebe4b0a52adc2e2029"},{"problem":26,"code":"(fn [n] \n  (let [fib-fun (fn fib [n] \n         (if (< n 2) 1 \n             (+ (fib (- n 1)) (fib (- n 2)) )\n       ))]\n       (map fib-fun (take n (iterate inc 0)))\n  )\n)","user":"54ac5ad7e4b09f271ff37cd6"},{"code":"#(reverse (nth (iterate (fn [xs] (conj xs (+ (first xs) (second xs)))) '(1 1)) (- % 2)))","problem":26,"user":"5311079de4b08068f379ece2"},{"problem":26,"code":"#(map second (take %1 (iterate (fn [[x y]] [y (+ x y) ]) '[0 1]  )))","user":"5ed30cb6e4b016b56eae05c2"},{"code":"#(take % ((fn fib [f1 f2] (cons f1 (lazy-seq (fib f2 (+ f1 f2))))) 1 1))","problem":26,"user":"51b0fc95e4b0c53cf2e68a72"},{"code":"(fn [iter]\n         (loop [coll [0 1]\n                c (dec iter)]\n           (let [add (take-last 2 coll)]\n             (if (= c 0)\n               (rest coll)\n               (recur\n                (conj coll \n                      (+ (nth add 0) (nth add 1)))\n                (dec c))))))","problem":26,"user":"50a6a8d2e4b0aa96157e2628"},{"code":"(fn [n] (loop [cnt n a 1 b 1 lst '()] (if (zero? cnt) lst (recur (dec cnt) b (+ a b) (concat lst [a])))))","problem":26,"user":"50a4b6a7e4b0344e360f3bb8"},{"problem":26,"code":"(fn [lvl] (reverse \n  (loop [top lvl n1 1 n2 1 i 3 result '(1  1)]\n    (if (= i top) \n        (conj result (+ n1 n2))\n        (recur top n2 (+ n1 n2) (+ 1 i) (conj result (+ n1 n2)))\n    )\n  ))\n)","user":"556f2009e4b09a3098a52519"},{"problem":26,"code":"(fn [n] (last (take (- n 1) (iterate #(conj % (apply + (take-last 2 %))) [1 1]))))","user":"5587cd86e4b059ccff29b1e6"},{"code":"(fn fib [n]\n  (loop [a 1 b 1 ls '(1 1)]\n    (if (> n (count ls))\n      (recur b (+ a b) (concat ls (list (+ a b))))\n      ls\n      )\n    )\n  )","problem":26,"user":"4ecc147b535d23f0362276f7"},{"problem":26,"code":"(fn [n]\n  (apply list\n    (loop [fibs [] current 1]\n      (if (>= (count fibs) n)\n        fibs\n        (let [next (+ current (or (last fibs) 0))]\n          (recur (conj fibs current) next))))))","user":"594d4c57e4b07ddc2dafae87"},{"problem":26,"code":"#(loop [n % lst []]\n   (if (= n 0)\n     lst\n     (if (or (= lst []) (= lst [1]))\n       (recur (dec n) (conj lst 1))\n       (recur (dec n) (conj lst (+ (lst (- (count lst) 1))\n                               \t(lst (- (count lst) 2))))))))","user":"59fea630e4b01bb0ae8afd10"},{"problem":26,"code":"#(take % (map first (iterate (fn [[cur nxt]] [nxt (+ cur nxt)]) [1 1])))","user":"54db0ab8e4b024c67c0cf75a"},{"code":"#(loop [n % c 0 r []]\n  (if (= n c)\n      r\n      (recur n (inc c)\n      (if (or (= c 0) (= c 1))\n          (conj r 1)\n          (conj r (+ (last r) (last (pop r))))))))","problem":26,"user":"4f4bbda0e4b03ad3f0c10c7b"},{"problem":26,"code":"(fn [x] (loop [a 1, b 1, result [1]] (if (>= (count result) x) result (recur b (+ a b) (conj result b)))))","user":"59024826e4b0438e51c2d053"},{"code":"#(reverse ((fn [n s]\n            (if (zero? n)\n            s\n            (recur (dec n) (cons (+ (first s) (second s)) s))))\n          (- % 2) '(1 1)))","problem":26,"user":"4f359c7ee4b0e243712b1ec4"},{"problem":26,"code":"(fn [n]\n  (cond \n   (< n 0) '()\n   (and (> n 0)  ( < n 2) ) (cons n '())\n   :else (reverse (loop [n n\n                fibList '(1)\n                ll 0]\n           (if (= 1 n)\n             fibList\n             (recur (dec n) (conj fibList (+ ll (first fibList))) (first fibList)))))))","user":"54297741e4b01498b1a71b39"},{"problem":26,"code":"(fn firstXFib [x]   \n   (cond\n     (< x 1) \"Invalid input, x must be an integre >= 1\"\n\n     (= x 1) [1]\n     (= x 2) [1 1]\n     :else ((fn myHelper [count result]\n              (if (<= count x)\n                (myHelper (inc count)\n                          (conj result (apply + (take-last 2 result))))\n                result))\n            3 [1 1])                ; start from 3\n     )\n   )","user":"5ee75f8be4b029a2061bbea5"},{"code":"(fn z [a] (case a \n              0 '() \n              1 '(1) \n              2 '(1 1) \n              (let [b (z (dec a))] \n                (concat b (list (apply + (take-last 2 b)))))))","problem":26,"user":"50f07b21e4b0bdaecbb47dc2"},{"code":"(fn fib [num]\n  (loop [fib '(1 1)\n         num' (- num 2)]\n    (if (= 0 num')\n      (reverse fib)\n      (recur (cons (+ (first fib)\n                      (second fib))\n                   fib)\n             (dec num')))))","problem":26,"user":"516ff477e4b034fe8eaf70f3"},{"problem":26,"code":"(fn __\n  ([]\n   (__ 1 1))\n  ([n] (take n (__)))\n  ([a b]\n   (lazy-seq (cons a (__ b (+ a b))))))","user":"5be2e670e4b0ed4b8aab4ccc"},{"problem":26,"code":"(fn fib [n]\n  ((fn [n coll v1 v2]\n     (if (= n 0) coll\n       (recur (- n 1) (conj coll (+ v1 v2)) v2 (+ v1 v2))))\n   (- n 1) [1] 0 1))","user":"5421f74fe4b01498b1a71abb"},{"problem":26,"code":"#( \n    (fn fib1 [a b x] (if (= x 1) (list b) (conj (fib1 (+ a b) a (dec x)) b) ) ) 1 1 % \n  )","user":"548d1d82e4b0e286459a1215"},{"problem":26,"code":"(fn [n]\n    (loop [k 2\n           a 1 \n           b 1\n           s [1 1]]\n      (if (= k n)\n        (seq s)\n        (let [c (+ a b)]\n          (recur (inc k)\n                 b\n                 c\n                 (conj s c))))))","user":"506f1e12e4b09350ab4199f9"},{"code":"#(take % \n  ((fn rfib [a b]\n    (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))","problem":26,"user":"4ec5a5f9535d6d7199dd36ad"},{"problem":26,"code":"(fn fib[x]\n  (let [temp '()\n\t\ta 0\n\t\tb 1]\n    (loop [iteration 2\n           temp (conj temp b)\n           c a\n           a b\n           b (+ c a)]\n      (println b)\n      (if (> iteration x)\n        (reverse temp)\n        (recur (inc iteration)\n          (conj temp b) a b (+ a b))))))","user":"53d0d7a9e4b00fb29b22130c"},{"code":"(fn [n]\n  (take n\n        (map first\n             (iterate\n              (fn [[a b]] [b (+ a b)])\n              [1 1]))))","problem":26,"user":"51670895e4b013fc800656c1"},{"code":"#(\n   (fn ! [n a b l]\n     (if (= n %)\n       l\n       (let [c (+ a b)] (! (inc n) b c (concat l (list c))))\n       )\n     ) 2 1 1 '(1 1)\n   )","problem":26,"user":"52c2d900e4b07a9af5792382"},{"problem":26,"code":"(fn [n]\n  (loop [cnt 0, a 1, b 1, fs []]\n  (if (= cnt n)\n    fs\n    (recur (inc cnt) b (+ a b) (conj fs a))\n  )\n ))","user":"527282f5e4b03e8d9a4a743a"},{"code":"(fn [n]\n  (map first\n    (take n\n      (iterate\n        (fn [[a b]]\n          [b (+ a b)])\n        [1 1]\n      )\n    )\n  )\n)","problem":26,"user":"4f7fc9a1e4b033992c121bee"},{"problem":26,"code":"(fn [x] \n      (take x ((fn fib ([] (fib 1 1))\n           ([a b]\n            (cons \n             a \n             (lazy-seq \n              (fib \n               b \n               (+ b a)))))))))","user":"54d9366ce4b0a52adc2e204e"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate\n                      (fn [[a b]] [b (+ a b)])\n                      [1 1]))))","user":"586c122ae4b01531a375e96f"},{"code":"(fn [x] \n  (map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib (- n 1)) (fib (- n 2))))))\n  (range 1 (+ x 1))))","problem":26,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":26,"code":"(fn [x]\n(reverse ((fn fib [x] \n(if (> x 2)\n(let [y (fib (dec x))]\n(cons (+ (first y) (second y)) y))\n'(1 1))) x)))","user":"592bb806e4b072a2710fcf46"},{"code":"#(loop [x [1 1]]\n   (if (= % (count x)) x\n          (recur (conj x (apply + (take-last 2 x))))))","problem":26,"user":"5226ef37e4b04e78ff2e1997"},{"problem":26,"code":"#(letfn [(fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2)))))] (map fib (range 0 %)))","user":"5dde6251e4b0948ae9d9add3"},{"problem":26,"code":"(fn fib\n  ([x]\n   (if (= x 3) \n   \t[1 1 2]\n    (let [y (fib (dec x))]\n      (conj y (+ (last y) (last (butlast y))))))))","user":"5fa5a6b1e4b0fa27300f3dc8"},{"problem":26,"code":"#(case %1\n    1 '(1)\n    2 '(1 1)\n    (loop [coll [1 1] i 1]\n      (if (= (+ i 1) %1)\n        coll\n          (recur (conj coll (+ (nth coll (dec i))(nth coll i))) (inc i)))))","user":"5684e200e4b04eec3ec5cfc4"},{"code":"(fn this \n  ([n] (if (= n 1) [1] (this (- n 2) [1 1])))\n  ([n f] (if (= n 0)\n           f\n           (recur\n             (- n 1)\n             (conj f\n               (apply + (take-last 2 f)))))))","problem":26,"user":"4f038017535dcb61093f6afa"},{"problem":26,"code":"(fn fib \n\t([n] (fib '(1 1) (- n 2)))\n\t([out n]\n\t\t(if (zero? n)\n\t\t\t(reverse out)\n\t\t\t(recur \n\t\t\t\t(cons (+ (first out) (second out)) out) (dec n))\n\t\t)\n\t)\n)","user":"57c99a45e4b05aa3c4741d31"},{"code":"(fn[x]\n  (flatten\n  (loop [top x\n         cnt 1\n         result [1 1]]\n    (if (== (+ cnt 1) top)\n      result\n      (recur top \n             (+ cnt 1)\n             (conj result (+ (last result) (first (rest (reverse result))))))))\n))","problem":26,"user":"4eef3afe535d305ff5cb7f1d"},{"code":"(fn [x] (take x ((fn fb [n n2] (cons n (lazy-seq (fb n2 (+ n n2))))) 1 1)))","problem":26,"user":"52c1bd29e4b07a9af579236a"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (conj (fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)) ))))))","user":"4dd5fdb0535d2dad7130b5c5"},{"problem":26,"code":"#(loop [x 2 res [1 1]]\n(if (< x %) \n(recur (inc x) (conj res (reduce + (take-last 2 res)))) res))","user":"58b84c28e4b0ebc645576d94"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(rec [a b n]\n               \t (if (zero? n)\n                   []\n                   (cons a \n                         (rec b (+ a b) (dec n)))))]\n    (rec 1 1 n)))","user":"5895477fe4b00487982d527c"},{"problem":26,"code":"(fn [x]\n  (take x(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5ecf55dae4b016b56eae05a8"},{"problem":26,"code":"(fn \n  [n] \n  (map (fn fib \n         [x]\n         (if (< x 2) 1\n             (+ (fib (- x 1)) (fib (- x 2)))))\n       (range n)))","user":"52561295e4b0541d1855ba03"},{"code":"(fn [n]\n  (loop [a 1 b 1 i n result '()]\n    (if (zero? i)\n        (reverse result)\n        (recur b (+ a b) (dec i) (cons a result)))))","problem":26,"user":"4e699b20535d8ccf87e9fe9d"},{"code":"(fn f [n]\n  (take n\n    (map first\n      (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn [pos]\n  (loop [fib [1 1] n (- pos 2)]\n    (if(= n 0)\n      fib\n    (recur (conj fib (apply + (take-last 2 fib))) (dec n))\n    ))\n)","problem":26,"user":"4f00f997535dcb61093f6a34"},{"problem":26,"code":"(fn [n] (take n (map first (iterate(fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5fa58531e4b0fa27300f3dc6"},{"code":"(fn [num]\n  (take num \n    (map second (iterate\n      (fn [[a b]] [b (+ a b)])\n      [0 1]))))","problem":26,"user":"4e71920f535d5021c1a8964e"},{"code":"#(map\n  (fn fib [n]\n    (if (> n 1)\n      (+ (fib (- n 1)) (fib (- n 2)))\n      1\n    )\n  )\n  (range %)\n)","problem":26,"user":"52b5137de4b0c58976d9ad36"},{"code":"(fn fib [x]\n  (let [lp (fn [accum i]\n             (let [next (cons (+ (first accum) (second accum)) accum)]\n               (if (= i x) (reverse next) (recur next (inc i)))))]\n    (cond\n      (= x 1) [1]\n      (= x 2) [1 1]\n      :else (lp [1 1] 3))))","problem":26,"user":"5287f66be4b0239c8a67ae45"},{"problem":26,"code":"(fn [n]\n  (loop [i n\n         f 1\n         s 1\n         xs [1]]\n    (if (= i 2)\n      (conj xs s)\n      (recur (- i 1)\n             s\n             (+ f s)\n             (conj xs s)))))","user":"55f7ca86e4b06e875b46ceb1"},{"problem":26,"code":"#(letfn [(fib [x y n acc] \n              (if (= n 1) \n                (conj acc x)\n                (recur y (+ x y) (dec n) (conj acc x))))] \n   (fib 1 1 % []))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":26,"code":"(fn fib \n      ([x] (fib [1 1] (- x 2)))\n      ([ac x] (if (= x 0) \n                (->> ac (into '()) reverse)\n                (fib (conj ac (+(last ac) (-> ac pop last))) (dec x)))))","user":"4f045d0e535dcb61093f6bbc"},{"problem":26,"code":"(fn [num]\n    (case num\n      1 '(1)\n      (loop [result '(1 1)]\n        (if (= (count result) num)\n          (reverse result)\n          (recur (conj result (apply + (take 2 result))))))))","user":"57ca338de4b05aa3c4741d37"},{"problem":26,"code":"(fn [n] (reverse (nth (iterate (fn [coll] (concat [(+ (first coll) (second coll) )] coll )) [1 1]) (- n 2))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":26,"code":"(fn \n  [num]\n  ((fn\n    fib\n    [stop cur acc]\n    (if\n     (= stop cur)\n      (reverse acc)\n      (fib stop (+ cur 1) (conj acc (+ (first acc) (first (rest acc))))))) num 2 '(1 1)))","user":"59a09b1de4b0871e7608b83a"},{"code":"(fn [n]\n  (let [fib (fn fib-fn [f1 f2]\n               (lazy-seq (cons f2 (fib-fn f2 (+ f1 f2)))))]\n    (take n (fib 0 1))))","problem":26,"user":"4e71e7b7535d5021c1a89654"},{"problem":26,"code":"(fn [x] (drop 1 \n               (take  (inc x)  \n               (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))) ))","user":"591cbc30e4b09b4ee5954c08"},{"code":"(fn [n]\n  (loop [a 1, b 1, count n, xs []]\n    (if (zero? count)\n      xs\n      (recur (+ a b) a (dec count) (conj xs b)))))","problem":26,"user":"4f128865535d64f603146428"},{"problem":26,"code":"(fn [n]\n  {:pre [(pos? n)]}\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"5694e9c5e4b0dcc4269f4123"},{"problem":26,"code":"(fn [i]\n   (let [fib-impl (fn fib-impl [i]\n     (if (= i 2)\n       '(1 1)\n       (let [prev (fib-impl (dec i))]\n         (let [p1 (first prev)\n               p2 (first (rest prev))]\n           (conj prev (+ p1 p2))))))]\n     (reverse (fib-impl i))))","user":"54d412e2e4b0a52adc2e1ffe"},{"code":"(fn [n] (reduce (fn [last _] (conj last (apply + (take 2 (reverse last))))) [1 1] (repeat (- n 2) nil)))","problem":26,"user":"4e9646f2535dbda64a6f6b40"},{"problem":26,"code":"(fn fibs [n] (if (= n 2)\n               '(1 1)\n               ((fn [xs] (concat xs [(+ (last xs) (last (butlast xs)))])) (fibs (- n 1)))))","user":"53c051a5e4b0c98a41f5ccae"},{"problem":26,"code":"#(loop [a 1 b 1 fib [1 1]]\n        (if (= % (count fib)) \n          fib\n          (recur b (+ a b) (conj fib (+ a b)))\n        ))","user":"5a9db513e4b0d174b936c7f0"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate\n                (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"605a876be4b000d535e6f53c"},{"code":"(fn[num] (map last (take num (iterate (fn[[a b]] [b (+' a b)]) [0 1]))))","problem":26,"user":"518c1079e4b0f028e99addf8"},{"code":"(fn fibs [i] (map \n(fn fib [n] \n  (cond (= n 0) 1\n        (= n 1) 1\n        :else (+ (fib (- n 1)) (fib (- n 2)))))\n (range i)))","problem":26,"user":"5002ad40e4b0678c553fc42b"},{"problem":26,"code":"(fn [length]\n    (letfn [(fib1 [n1 n2 cur]\n              (if (= cur length)\n                ()\n                (conj (fib1 n2 (+ n1 n2) (+ 1 cur)) (+ n1 n2))))]\n      (conj (fib1 1 1 2) 1 1)))","user":"588e8133e4b00487982d5191"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib\n            ([] (fib 1 1))\n            ([a b] (cons a (lazy-seq (fib b (+ a b))))))]\n    (take n (fib))))","user":"5b47874be4b02d533a91bc70"},{"problem":26,"code":"(fn f [a b n](if (> n 0 ) (cons a (f b (+ a b) (dec n))))) 1 1","user":"59de4b38e4b01968742fed71"},{"problem":26,"code":"(fn fib [result current n]\n  (if (> current n)\n    result\n    (recur (conj result (+ (last result) (nth (reverse result) 1))) (inc current) n)))\n[1 1] 3","user":"54b2ec84e4b09f271ff37d33"},{"problem":26,"code":"(fn [a] (loop [cnt 0 fir 0 las 1 s ()] \n          (if (= cnt a) (reverse s) (recur (inc cnt) las (+ las fir) (conj s las)) ) ))","user":"53b3ea79e4b047364c0444ab"},{"problem":26,"code":"(fn [n]\n  (loop [x n, result [1 1]]\n    (cond (= x 1) '(1)\n          (< x 3) (seq result)\n          (>= x 3) (recur (dec x) (conj result (+ (last result) (second (reverse result))))))))","user":"5ccf99fbe4b0ccb0619628c8"},{"problem":26,"code":"(fn fib ([] (fib 1 1)) ([n] (take n (fib))) ([x y] (cons x (lazy-seq (fib y (+ x y))))))","user":"56f3e77ee4b046a417f92058"},{"problem":26,"code":"(letfn [(fib\n          ([]\n           (cons 1 (cons 1 (fib 1 1))))\n          ([pprev prev]\n           (let [curr (+ pprev prev)]\n             (lazy-seq (cons curr (fib prev curr))))))]\n  (let [inf (fib)]\n    (fn [n]\n      (take n inf))))","user":"5c1bee41e4b01240ff567218"},{"problem":26,"code":"(fn [x] \n  (take x (map first (iterate (fn [[a b]] \n                                [b (+ a b)]) [1 1]))))","user":"581e76dfe4b04b46fc4b0f29"},{"problem":26,"code":"(fn [max-count]\n    (condp = max-count\n      0 '()\n      1 '(1)\n      (loop [curr-coll '(0 1)]\n        (if (= max-count (- (count curr-coll) 1))\n          (next curr-coll)\n          (let [[last-2 last-1] (take-last 2 curr-coll)\n                next-coll (concat curr-coll (list (+ last-2 last-1)))]\n            (recur next-coll))))))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":26,"code":"(fn[n] \n  (take n (\n           (fn fibb[a b] \n             (cons a (lazy-seq (fibb b (+ a b)))\n                   )\n             ) \n           1 \n           1\n           )\n        )\n  )","user":"567952b3e4b05957ce8c6185"},{"code":"#(map (fn fib [n] (if (< n 2) 1 (+ (fib (- n 2)) (fib (- n 1))))) (range %))","problem":26,"user":"536793b5e4b0243289761e7f"},{"code":"#(take %  ( map first (iterate (fn [[p c]] [c (+ p c)]) [1 1])))","problem":26,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":26,"code":"(fn [N]\n    (loop [Ret '() Index 1]\n      (if (> Index N)\n        (reverse Ret)\n        (recur\n          (conj Ret\n            (if (<= Index 2)\n              1\n              (+ (first Ret) (first (rest Ret) ))\n            )\n          )\n          (inc Index)\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":26,"code":"(fn fib \n  ([] (fib 1 1))\n  ([x] (take x (fib)))\n  ([a b] (cons a (lazy-seq (fib b (+ a b))))))","user":"5dccbde4e4b0b296f82db5a5"},{"code":"(fn [n] (let [fib1 (fn [result p2 p1 c]\n          (if (= 0 c) \n            (concat result (list p2 p1))\n            (recur (concat result \n                         (list p2))\n                 p1\n                 (+ p2 p1)\n                 (dec c)\n             )\n          )\n       )] (fib1 '() 1 1 (- n 2))))","problem":26,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":26,"code":"#(reverse (loop [n 2, fs '(1 1)] (if (= n %) fs (recur (+ n 1) (cons (+ (first fs) (second fs)) fs)))))","user":"5e5864e4e4b027a2e10ac107"},{"problem":26,"code":"(fn fib \n    ([n] (fib (- n 2) [1 1]))\n    ([n arr] (if (= n 0) arr \n               (fib (- n 1)\n                    (conj arr\n                          (+ (nth arr (- (count arr) 1))\n                             (nth arr (- (count arr) 2))))))))","user":"541475afe4b01498b1a719eb"},{"code":"(fn fib\n  [x]\n  (if (= x 3)\n    '(1 1 2)\n    (if (=  x 6 ) \n      '(1 1 2 3 5 8)\n      '(1 1 2 3 5 8 13 21))))\n\n;; lol","problem":26,"user":"4e64ae65535d8ccf87e9fe6d"},{"problem":26,"code":"(fn \n  [length]\n  (loop [\n         fib 1\n         fibs [1]\n        ]\n    (if (= (count fibs) length)\n    \tfibs\n      \t(recur (+ (last fibs) fib) (conj fibs fib))\n    )\n  )\n)","user":"55ba3666e4b01b9910ae29cc"},{"code":"#(take % (map first ((fn fib [a,b] (cons [a b] (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"511d11d7e4b022853b0e079f"},{"problem":26,"code":"(fn [index]\n  (loop [i 2 a-2 1 ans '(1 1)]\n    (if (= i index)\n      ans\n      (recur (inc i) (last ans) (reverse (conj (reverse ans) (+ (last ans) a-2)))))))","user":"556ff203e4b09a3098a52526"},{"problem":26,"code":"(fn fib\n  ([x] \n   (when (> x 0) (fib (dec x) '(1 0))))\n  ([x lst]\n  (if (= x 0) (rest (reverse lst)) (fib (dec x) (conj lst (+ (first lst) (second lst)) ) ) ) ))","user":"54257124e4b01498b1a71b09"},{"problem":26,"code":"#(take % ((fn _ [a b] (cons b (lazy-seq (_ b (+ a b))))) 0 1))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn [n]\n  (loop [s [1], x 1, c 1]\n    (if (= c n)\n      s\n      (recur (conj s x) (+ (last s) x) (inc c)))))","problem":26,"user":"52745629e4b03e8d9a4a74a0"},{"problem":26,"code":"(fn [x] \n  (loop [fib '()\n         lp x]\n    (if (= lp 0)\n      (take x (reverse fib))\n      (cond \n       (= (count fib) 0) (recur (conj fib 1) (dec lp))\n       (= (count fib) 1) (recur (conj fib 1) (dec lp))\n       :else (recur (conj fib (+ (first fib) (second fib))) \n                    (dec lp))))))","user":"5baa1b58e4b0a20761a2344e"},{"problem":26,"code":"#(map\n  (fn [n] \n    (loop [n n a 1 b 1]\n      (if (= n 1)\n          b\n          (recur (dec n) (+ a b) a))))\n  (range 1 (inc %)))","user":"54187e84e4b01498b1a71a1b"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-r [a b] \n     (lazy-seq (cons a (fib-r b (+ a b))))) 1 1)))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn f26 [a]\n  (loop [a a\n         b [1 1]]\n    (if (= a 2)\n      b\n      (recur (dec a) (conj b (+ (first (rest (reverse b))) (last b)))))))","problem":26,"user":"52c08c59e4b07a9af5792351"},{"code":"(fn [n] \n  (take n (map #(get % 0) \n   \t(iterate (fn [item] [(get item 1) (apply + item)]) [1 1]))))","problem":26,"user":"4f085a31535dcb61093f6c35"},{"problem":26,"code":"#(take % ((fn r [a b] (cons a (lazy-seq (r b (+ a b))))) 1 1))","user":"54e956d9e4b024c67c0cf831"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [1 1] n))\n  ([l n]\n   (if (= n 2)\n     l\n     (fib (conj l (+ ((comp first reverse) l) ((comp second reverse) l))) (- n 1)))))","user":"59e32913e4b08badc2a0c52c"},{"code":"(fn [x] (take x ((fn []\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))))","problem":26,"user":"4f07056c535dcb61093f6c1d"},{"problem":26,"code":"#(reduce \n   (fn [coll next] (conj coll (+ (last coll) (last (butlast coll)))))\n   [1 1]\n   (range (- % 2)))","user":"5dd3383be4b0948ae9d9ad5e"},{"code":"(fn [x]\n  (loop [s [1] last1 0 last2 1 x (dec x)]\n    (if (> x 0)\n      (recur (conj s (+ last1 last2)) last2 (+ last1 last2) (dec x))\n      s)))","problem":26,"user":"4ee88269535d93acb0a6687f"},{"problem":26,"code":"(fn fib [n]\n  (if (< n 3)\n      (repeat n 1)\n    (loop [memo '[1 1] i 2]\n      (if (= i n)\n          memo\n        (recur (conj memo (+ (nth memo (- i 1)) (nth memo (- i 2))))\n               (inc i))))))","user":"58fb87efe4b0438e51c2cf7b"},{"code":"(fn fib [n] (cond (= 1 n) [1] (= 2 n) [1 1] \n:else (let [l (fib (dec n)) c (count l)] \n(conj l (+ (last l) (nth l (- c 2)))))))","problem":26,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":26,"code":"#(take %\n      ((fn fib\n        ([] (fib 1 1))\n        ([x y] (cons x (lazy-seq (fib y (+ x y))))))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":26,"code":"(fn fib \n  ([a1] \n   (fib a1 '() 1 1))\n  ([a1 a2 a3 a4]\n   (when (> a1 0) \n     (conj (fib (dec a1) (conj a2 a3) a4 (+ a3 a4) ) a3))\n))","user":"54d37e4ce4b0e8a36923e608"},{"code":"(fn [n & coll]\n  (let [lcol (if (nil? coll) '(1 1)\n              coll)\n        c (count coll)]\n    (cond (= n c) coll\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          :else (recur n  (conj (vec lcol) (apply + (drop (- c 2) lcol)))))))","problem":26,"user":"4f343e60e4b0e243712b1eb5"},{"problem":26,"code":"(fn [input]\n  (loop [result '(1 1),]\n    (if (= input (count result))\n     (reverse result)\n     (recur (conj result (+ (first result) (second result)))     )\n      )\n    )      \n  )","user":"59228b00e4b026ae38521281"},{"problem":26,"code":"(let [fib (fn [[a b]] [b (+ a b)])\n        itr (iterate fib [1 1])\n        fib-seq (map first itr)]\n     #(take % fib-seq))","user":"4ff8487be4b0678c553fc397"},{"code":"(fn [n] \n  (let [fib (fn ! [n] (if (< n 2)\n                                    n\n                                        (+ (! (- n 1)) (! (- n 2)))))]\n        (map fib (range 1 (inc n)))))","problem":26,"user":"50c4baa6e4b0210b849018b0"},{"code":"#(reverse\n  (loop [ans '(1 1) arg %]\n    (if (< arg 3)\n      ans\n      (recur (conj ans (+ (first ans) (second ans)))\n             (dec arg)))))","problem":26,"user":"522e4baae4b01cdb292c5f00"},{"code":"(fn [x] (loop [a 0 b 1 i 0 acc []] (if (= i x) acc (recur b (+ b a) (inc i) (conj acc b)))))","problem":26,"user":"5042de0de4b034ff00315d1b"},{"problem":26,"code":"(fn [n]\n  (->> [0 1]\n       (iterate (fn [[a b]]\n                  [b (+ a b)]))\n       (map second)\n       (take n)))","user":"5f08ed43e4b09a3f05b717fc"},{"code":"(fn [x] \n  (take x\n    ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n  )\n)","problem":26,"user":"4f329974e4b0d6649770a093"},{"problem":26,"code":"(fn [x]\n(into () (reverse (loop [lst [1 1] n 2]\n    (if (= n x)\n    lst\n    (recur (conj lst (+ (nth lst (- n 2)) (nth lst (- n 1)))) (inc n))))))\n)","user":"57440f77e4b0c285004e8ab5"},{"problem":26,"code":"(fn fib[n] (\n            cond\n            \t(= n 1) [1]\n                (= n 2) [1 1]\n                :else (concat (fib (- n 1)) [(reduce + (take-last 2 (fib (- n 1))))])))","user":"548f3ed8e4b0e286459a1236"},{"code":"#(loop [counter %, next-num 0, a 0, b 1, result []]\n          (if (= counter 0)\n            result\n            (recur (dec counter) \n                   (+ a b) \n                   b \n                   (+ a b)\n                   (conj result \n                         (if (= counter %) 1 next-num)))\n            ))","problem":26,"user":"53a26cede4b0f1fc7453882a"},{"code":"(fn fbn [n]\n  (for [i (range 1 (+ 1 n))]\n    ((fn fib [x]\n\t  (if (< x 1) 0\n\t    (if (<= x 2) 1\n\t\t  (+ (fib (- x 2)) (fib (- x 1)))\n\t\t)\n\t  )\n\t) i)\n  )\n)","problem":26,"user":"51ad20eee4b09397d510977e"},{"problem":26,"code":"#(let [getFibs (fn f [[prev1 prev2 :as ls]] \n  (if (> % (count ls)) (f (cons (+ prev1 prev2) ls)) ls)\n)] (reverse (getFibs '(1 1))))","user":"57915ba4e4b0ebec4cfb75ba"},{"code":"(fn [x] (take x (map first (iterate (fn [[y z]] [z (+ y z)]) [1 1]))))","problem":26,"user":"511dada0e4b0a5c68a34840c"},{"problem":26,"code":"(fn [how-many]\n  (take how-many\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","user":"4fe9cc68e4b0547ebccb2470"},{"problem":26,"code":"(fn [n]\n      (let [fib (fn fib*\n                  ([] (fib* 1 1))\n                  ([prev next]\n                    (cons prev (lazy-seq (fib* next (+ prev next))))))]\n        (take n (fib))))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":26,"code":"#(take % (cons 1 ((fn f [a b] (cons (+ a b) (lazy-seq (f b (+ a b))))) 0 1)))","user":"512700c4e4b083bb8f88cf14"},{"code":"#(loop [prev 1 cur  1 acc  [1 1]]\n  (if (= % (count acc))\n    acc\n    (let [next (+ prev cur)]\n      (recur cur next (conj acc next)))))","problem":26,"user":"5236cd89e4b0e010857b4e45"},{"code":"#(loop [r [1 1]] (if (= (count r) %1) r (recur (conj r (apply + (take-last 2 r))))))","problem":26,"user":"4f77b68de4b0fbe0118ec581"},{"problem":26,"code":"#(take % ((fn fib [a b]\n            (lazy-seq\n             (cons b (fib b (+ a b)))))\n          0 1))","user":"5faa75c1e4b0fa27300f3dfa"},{"problem":26,"code":"#(loop [x 1 y 1 l '(1 1) n (- % 2)] (if (zero? n) (reverse l) (recur y (+ x y) (cons (+ x y) l) (dec n))))","user":"5595071ae4b0c79f6e1db95d"},{"code":"(fn  [x]\n  (loop [cnt 0 a 0 b 1 list '(1)]\n    (if (= cnt (- x 1))\n      (reverse list)\n      (let [c (+ a b)]\n        (recur (inc cnt) b c (conj list c))\n      )\n    )\n  )\n)","problem":26,"user":"5017a3a6e4b0adbf98d88a3e"},{"problem":26,"code":"#(->> [0 1] (iterate (fn [[y x]] [(+ y x) y])) (map first) (drop 1) (take %))","user":"580c1e9ae4b0849f6811b719"},{"problem":26,"code":"#(take % \n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","user":"4f1ff504535d64f6031464a6"},{"code":"(fn [x]\n  (loop [cnt 1 x1 1 x2 1 ret '()]\n    (if (> cnt x) (reverse ret)\n(recur (inc cnt) x2 (+ x1 x2) (conj ret x1)\n))))","problem":26,"user":"4fdf5403e4b05e33b9224f98"},{"problem":26,"code":"(memoize (fn myfib [x] \n   (case x \n     1 [1]\n     2 [1 1]\n     (conj (myfib (dec x)) (reduce + (take-last 2 (myfib (dec x))))))))","user":"588ce4aee4b05c141a2560a1"},{"code":"#(reduce (fn [ls x] (conj ls \n                          (+ (last ls)\n                             (last (pop ls)))\n                          ))\n         [1 1]\n         (repeat (- % 2)1))","problem":26,"user":"517dc49be4b0fcc7c5d37d38"},{"problem":26,"code":"(fn g [n] (take n (map (fn f [x]\n  (if (< x 2) 1\n  (+ (f (dec (dec x))) (f (dec x))))) (iterate inc 0))))","user":"5ed15e23e4b016b56eae05ba"},{"code":"(fn [size]\n  (if (= 0 size)\n    '()\n    (loop [current '(1)\n           total (dec size)]\n      (if (= 0 total)\n        (reverse current)\n        (recur (conj current (reduce + (take 2 current))) \n               (dec total))\n    ))))","problem":26,"user":"5336ca32e4b0e30313ee6c80"},{"code":"(fn [n]\n  (take n \n    (map first \n      (iterate \n        (fn [[a b]] [b (+ a b)]) [1 1]\n      )\n    )\n  )\n)","problem":26,"user":"504e1ddae4b0f6ff3350c466"},{"problem":26,"code":"#((fn myfib [left fibs]\n  (if (<= left 0)\n    fibs\n    (myfib\n     (dec left)\n     (conj (vec fibs)\n           (+ (last fibs) (last (drop-last fibs)))))))\n  (- % 2) '(1 1))","user":"54775b13e4b0c51c1f4d72b2"},{"problem":26,"code":"(fn fib' [a]\n  (if (= a 1)\n   '(1)\n    (if (= a 2)\n     '(1 1)\n      (let [s (fib' (dec a)) \n            x (last s)\n       \t\ty (last (butlast s))]\n        (concat s [(+ x y)])))))","user":"53d612cbe4b0e771c3025452"},{"problem":26,"code":";(fn [n]\n;   (loop [rez [1 1]]\n;     (if (= n (count rez))\n;       rez\n;       (recur (conj rez (+ (first (reverse rez)) (second (reverse rez))))))))\n\n;(fn [n]\n;  (letfn [(fib [i]\n;            (if (>= 2 i)\n;              1\n;              (+ (fib (dec i)) (fib (- i 2)))))]\n;  (map fib (take n (iterate #(inc %) 1)))))\n\n(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5839efeae4b089d5ab817d47"},{"code":"(fn [n] \n  (take n\n        (map first \n             (iterate (fn [[f s]] [s (+ f s)]) \n                      [1 1]))))","problem":26,"user":"4ef49c2c535dced4c769f238"},{"code":"#(reverse (reduce (fn [acc _]\n  (conj acc (+ (first acc) (second acc))))\n'(1 1)\n(range (- % 2))))","problem":26,"user":"4e99a255535dbda64a6f6b67"},{"problem":26,"code":"(fn fib [num]\n  (if (zero? num)\n    []\n    (if (= 1 num)\n      [1]\n      (if (= 2 num)\n        [1 1]\n        (let [prev (fib (dec num))]\n          (conj prev (+ (last prev)\n                        (last (butlast prev)))))))))","user":"56557d2de4b0f9d632dd8498"},{"problem":26,"code":"(fn [n] \n  (reverse \n   \t((fn [sq k]\n      (if (<= k 0)\n          sq\n          (recur (cons (+ (nth sq 0) \n                          (nth sq 1)) \n                       sq)\n                 (- k 1)\n                 )))\n    '(1 1)\n     (- n 2))))","user":"54e4ef4de4b024c67c0cf7f4"},{"problem":26,"code":"(fn [n]\n  (loop [c 0 result '()]\n    (if (< c n)\n      (recur (inc c) (conj result (if (or (= c 0) (= c 1))\n                                    1\n                                    (+ (first result) (second result)))))\n      (reverse result))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [n]\n  (let [fib-helper\n         (fn [n sofar a b]\n           (if (= n 0) sofar\n             (recur (dec n) (cons (+ a b) sofar) b (+ a b))))]\n   (reverse (fib-helper (dec n)'(1) 0 1))))","problem":26,"user":"4e4b911f535dc968683fc4d6"},{"problem":26,"code":"#(reverse (into () (reduce\n                      (fn [a b] (conj a (+ (last a) (last (butlast a)))))\n                      [1 1]\n                      (range (- % 2)))))","user":"5ab28d5be4b073f1774425eb"},{"problem":26,"code":"#(reduce (fn [acc, n]\n  (cond\n    (> n 1) \n    (conj acc (apply + (take-last 2 acc)))\n    :else (conj acc 1))\n  ) [] (range %))","user":"54a2b2e8e4b09f271ff37c5d"},{"code":"(fn [n] (loop [a 1 b 1 res '(1 1)] (if (= (count res) n) (reverse res) (recur b (+ a b) (cons (+ a b) res)))))","problem":26,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 count 1 r [1]]\n    (if (= count n) r\n      (recur b (+ a b) (inc count) (conj r b)))))","user":"571077e8e4b09c608db70434"},{"problem":26,"code":";(def fib-seq-iter \n;  (map first (iterate\n;              (fn [[a b]] [b (+ a b)]) [0 1])))\n;(fn [x] (take x (rest fib-seq-iter)))\n(fn [x] \n  (take x\n        ((fn fib [a b] \n         (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5761984fe4b0994c1922fb91"},{"problem":26,"code":"(fn fib\n\t([index]\n\t\t(fib index '() 0 1))\n    ([index accum prevfib currentfib]\n     \t(if (= index 0)\n          (reverse accum)\n          (let [new-accum (conj accum currentfib)]\n            (fib (dec index) new-accum currentfib (+ prevfib currentfib))))))","user":"59f242b2e4b0966464fe6a7a"},{"code":";(fn [n]\n;  (map\n;   (fn fib [n]\n;     (if (< n 2)\n;       1\n;       (+ (fib (- n 1)) (fib (- n 2)))))\n;   (range 0 n)))\n(fn [n]\n  (take\n   n\n   ((fn fib [a, b]\n     (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"534da51fe4b084c2834f4aa4"},{"code":"#(take % (map first (iterate (fn [[i1 i2]] [i2 (+ i1 i2)]) [1 1])))","problem":26,"user":"5003ee7de4b0678c553fc446"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]] [b (+ a b)])\n                      [1 1]))))","user":"54d000c7e4b018d918be98d7"},{"code":"(fn [x]\n  (take x (\n      (fn rfib \n          ([] (rfib 1 1))\n          ([a b] (cons a (lazy-seq (rfib b (+ a b)))))\n      )\n)  )       )","problem":26,"user":"534bfa81e4b084c2834f4a87"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    (concat (fib (dec n)) [(reduce + (take-last 2 (fib (dec n))))])))","user":"5caa5e42e4b048ec896c5c35"},{"problem":26,"code":"(fn prob26 [x]\n  (let [f (fn [x]\n            (if (< x 2)\n              1\n              (loop [a (bigint 1) b (bigint 1) n x]\n                (if (= n 2)\n                  (+ a b)\n                  (recur b (+ a b) (dec n))))))\n        mf (memoize f)]\n    (map mf (range x))))","user":"4f0554aa535dcb61093f6bf5"},{"code":"#(loop [myseq '[1 1]]\n     (if (= (count myseq) %) \n         myseq \n     (recur (conj myseq (reduce + (take-last 2 myseq)))) ))","problem":26,"user":"5290ffaee4b0239c8a67af10"},{"problem":26,"code":"(fn [n]\n  (loop [n n, result [1 1]]\n    (if (<= n 2)\n      result\n      (recur (- n 1) (conj result (+ (last result) (nth result (- (count result) 2))))))))","user":"59225498e4b09b4ee5954c8c"},{"problem":26,"code":"(fn [n]\n     (take n (map first (iterate (fn [[x y]]\n        (cons y (cons (+ x y) '()))) '(1 1)))))","user":"5e9683f1e4b0157ca96647c7"},{"code":"(fn [i]\n(map (fn f [n]\n(if (= 1 n)\n1\n(if (= 2 n)\n1\n(+ (f (- n 1)) (f (- n 2)))\n)\n)\n)\n(range 1 (+ i 1))\n)\n)","problem":26,"user":"4e9dd9ab535dbda64a6f6b8d"},{"code":"#(loop [n %, out '(1 1)]\n   (if (= n 2)\n       (reverse out)\n       (recur (- n 1) (cons (+ (first out) (second out)) out))))","problem":26,"user":"4ee673cf535d93acb0a66860"},{"problem":26,"code":"(fn [x]\n  (loop [i x result '(1 1)]\n    (if (< i 3)\n      (reverse result)\n      (recur (dec i) (conj result (+ (first result)(second result)) ) )))\n  )","user":"592dbbd5e4b072a2710fcf7f"},{"problem":26,"code":"(fn [n]\n  (loop [x n y 0 z 1 res []]\n    (if (= x 0)\n      res\n     (recur (dec x) z (+ y z) (conj res z)))))","user":"541df619e4b01498b1a71a87"},{"code":"(fn [n]\n  (take n ((fn rfib [a b]\n     (cons a (lazy-seq (rfib b (+ a b)))))\n     1 1)))","problem":26,"user":"517fcd45e4b073af738d8b4a"},{"problem":26,"code":"(fn [i] (loop [x 0 ic [1 1]]\n          (if (= (count ic) i)\n            ic\n            (recur\n              (inc x)\n              (conj ic\n                    (+ (get ic (inc x)) (get ic x)))\n              ))))","user":"598d0dc3e4b02b9968b84d18"},{"problem":26,"code":"(fn [x]\n  (loop [it x\n         fibs nil\n         prev 1\n         cur 0]\n    (if (= it 0)\n      (reverse fibs)\n      (recur (dec it) (cons (+ cur prev) fibs) cur (+ cur prev)))))","user":"58bfa57ae4b021aa9917ecd8"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (loop [m (- n 2) acc '(1 1)]\n           (if (zero? m)\n             (reverse acc)\n             (recur (dec m) (cons (+ (first acc) (second acc)) acc))))))","user":"5b975c6ee4b0c0b3ffbd4a91"},{"problem":26,"code":"(fn [times]\n\t(map (fn fib [x]\n\t\t(if (< x 2)\n\t\t\tx\n\t\t\t\t(+ (fib (- x 1)) (fib (- x 2))))) (range 1 (inc times))))","user":"55b4b0f5e4b01b9910ae297d"},{"code":"(fn [x] (loop [count 1 fibseq [1 1]]\n(if (= count (dec x)) fibseq\n(recur\n  (inc count)\n  (conj fibseq (+ (nth fibseq (dec count)) \n    (nth fibseq count)))))))","problem":26,"user":"4ea9b80c535d7eef30807306"},{"code":"#(map second (take % (iterate (fn [p] [(second p) (apply + p)]) [0N 1N])))","problem":26,"user":"52a229e0e4b04e0c58e87be9"},{"code":"(fn [n]\n  (loop [c n n2 0 l '(1)]\n    (if (zero? c)\n      (reverse (rest l))\n      (recur (dec c) (first l) (conj l (+ n2 (first l)))))))","problem":26,"user":"51897709e4b0288ada3dbdaa"},{"problem":26,"code":"#(take % (letfn [(nval [x y] (lazy-seq (cons (+ x y) (nval y (+ x y)))))] (lazy-seq (cons 1 (cons 1 (nval 1 1))))))","user":"56baa68ce4b0f26550335947"},{"problem":26,"code":"(fn [X] (take X (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5fada7cce4b08cb800c85af5"},{"code":";; http://stackoverflow.com/a/7405947\n\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"52251473e4b01819a2de42f7"},{"problem":26,"code":"#(loop [x 0 result []]\n    (cond\n     (= x %) result\n     (< x 2) (recur (inc x) (conj result 1))\n     :else (recur (inc x) (conj result (+ (first (reverse result)) (second (reverse result)))))\n    )\n  )","user":"575e71a2e4b0846ea39baf26"},{"problem":26,"code":"(fn fib [n] (if (== n 2) [1 1]\n  \t\t(let [a (fib (dec n))] (conj a (+ (.get a (- n 3)) (.get a (- n 2)))))\n))","user":"53da70a4e4b0e771c302549d"},{"problem":26,"code":"(fn [k] (map first (take k (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5ccb3792e4b0ccb061962882"},{"problem":26,"code":"#(take % (map last (iterate (fn [x] (conj x (reduce + (take-last 2 x)))) [1])))","user":"513facf5e4b00f13ea1bd892"},{"code":"(fn fib [x] (if (< x 3) (if (= x 1) '(1) '(1 1) )\n  (concat (fib (- x 1)) (list (+ (last (fib (- x 1))) (last (fib (- x 2))) ) ))))","problem":26,"user":"4f5100cfe4b03ad3f0c10d15"},{"code":"nth (cons 0 (iterate #(conj % (apply + (take-last 2 %))) [1]))","problem":26,"user":"4fa11204e4b0dcca54ed6d56"},{"problem":26,"code":"#(loop [times % a 1 b 1 rt [a b]]\n   (if(neg? (- times 3))\n     rt\n     (recur (dec times) b (+ a b) (conj rt (+ a b) ))))","user":"5d270111e4b092dab7f59c62"},{"problem":26,"code":"(fn [x] (\n     reduce\n     (fn [a _] (conj a (+' (last a) (last (butlast a)))))\n     [1 1]\n     (range (- x 2)))\n)","user":"57168a0de4b07c98581c3afb"},{"problem":26,"code":"#(take %\n       ((fn f [a b]\n         (lazy-seq (cons a (f b (+ a b))))\n         ) 1 1)\n  )","user":"524a9556e4b05ef8e38e64b1"},{"problem":26,"code":"#(loop [i 1\n        num1 1\n        num2 1\n        result []]\n   (if (<= i %)\n     (recur (inc i) num2 (+ num1 num2) (conj result num1))\n     (apply list result)))","user":"5d3f50d7e4b09d9322bc20a6"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n    (1) '(1)\n    (2) '(1 1)\n    (loop [iLast 1\n           iAcc  '(2 1 1)\n           iCnt  1]\n      (if (= iCnt (- n 2))\n        (reverse iAcc)\n        (recur (first iAcc) \n               (conj  iAcc (+ (first iAcc) iLast))\n               (inc   iCnt))))))","user":"5a798ac5e4b03baeef9276c0"},{"problem":26,"code":"(fn [n] (nth (iterate (fn [s] (concat s (list (reduce + (take-last 2 s))))) '(1)) (dec n)))","user":"546dd4f6e4b00cfc9eacc194"},{"problem":26,"code":"(fn [n] (loop [a [1] b 1 i n] (if (= i 1) a (recur (conj a b) (+ b (last a)) (- i 1)))))","user":"59468de7e4b07ddc2dafad88"},{"code":"(fn [n] (rest (take (+ n 1) ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 0 1))))","problem":26,"user":"53333e7be4b019098a6f8b7e"},{"problem":26,"code":"(fn [of]\n  (letfn [(fib [of]\n               (if (< of 2)\n                 1\n                 (+ (fib (- of 1)) (fib (- of 2)))))]\n    (reduce #(conj %1 (fib %2)) [] (range of))))","user":"55c5bdffe4b0e31453f649b6"},{"code":"#(take % (cons 1 (map (fn [[x,y]] (+ x y)) (iterate (fn [[x,y]] [y,(+ x y)]) [0,1]))))","problem":26,"user":"4e1ec17a535d04ed9115e80a"},{"code":"(fn fibo [n] (case n\n                       1 (concat '(1))\n                 2 (concat '(1) (fibo 1))\n                 (concat (fibo (- n 1)) (list (apply + (take-last 2 (fibo (- n 1)))) ))))","problem":26,"user":"5321008ee4b09d4e7a9b54aa"},{"code":"#(loop [seq [1 1] cnt (- % 2)]\n  (if (= cnt 0)\n  seq\n  (recur (conj seq (reduce + (take-last 2 seq)))\n    (dec cnt))))","problem":26,"user":"4faec810e4b081705acca24e"},{"code":"(fn calc [n]\n  (reverse \n    ((fn fibn [x]\n      (if (= x 0)\n        '()\n        (if (> 2 (count (fibn (- x 1))))\n          (conj (fibn (- x 1)) 1)\n          (conj (fibn (- x 1)) \n                (+ (first (fibn (- x 1)))\n                   (second (fibn (- x 1)))))))) n)))","problem":26,"user":"4fe610fde4b0e8f79898fece"},{"code":"(fn fib-seq [n]\n  (loop [a 1, b 0, coll [], n n]\n    (if (zero? n)\n      coll\n      (recur (+ a b) a (conj coll a) (dec n)))))","problem":26,"user":"531ccb1fe4b08068f379eda7"},{"problem":26,"code":"(fn fib\n  [n]\n  (reduce (fn [acc i]\n            (if (or (zero? i) (= i 1))\n              (conj acc 1)\n              (conj acc (+ (last acc) (last (butlast acc))))))\n          [] (range n)))","user":"5777c3d6e4b0979f8965164f"},{"problem":26,"code":"#(take %\n  ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b))))) \n   1 1))","user":"59566d1de4b066ee0a44af54"},{"code":"(letfn [(nth-fib [n]\n          (if (< n 2)\n            1\n            (+ (nth-fib (- n 1)) (nth-fib (- n 2)))))\n        (n-fibs [n]\n          (map nth-fib (range n)))]\n  n-fibs)","problem":26,"user":"50435852e4b034ff00315d22"},{"code":"(fn [n]\n  (let [next-fib-pair (fn [[a b]] [b (+ a b)])]\n    (take n (map first (iterate next-fib-pair [1 1])))))","problem":26,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"problem":26,"code":"#(loop [fibseq [1] \n        i 0 \n        j 1]\n   (if (= (count fibseq) %)\n     fibseq\n     (recur (conj fibseq (+ i j)) \n            j \n            (+ i j))))","user":"599475aae4b0b211ea3aaac8"},{"problem":26,"code":"(fn [n] (\n\ttake n \n    \t((fn fib[a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n         \n    )\n)","user":"5e5d9e62e4b0fd0acd15866b"},{"problem":26,"code":"(fn fib-seq [n]\n\t(if (= n 1)\n\t\t[1]\n\t\t(if (= n 2)\n\t\t\t[1 1]\n\t\t\t(conj (fib-seq (- n 1)) \n\t\t\t\t(+ (nth (fib-seq (- n 1)) (- n 2)) (nth (fib-seq (- n 1)) (- n 3))\n\t\t\t\t)\n\t\t\t))))","user":"5a025edde4b01bb0ae8afd64"},{"code":"#((fn [x y acc nend] \n  (if (= (count acc) nend) \n    (reverse acc) \n    (recur y (+ x y) (cons (+ x y) acc) nend))) 1 1 '(1 1) %)","problem":26,"user":"4f039bbe535dcb61093f6b39"},{"problem":26,"code":"(fn fibonacci-sequence \n  [x]\n  (take x \n        ((fn recur-util \n           [a b] \n               (cons a (lazy-seq \n                        (recur-util b \n                                    (+ a b))))) \n         1 1))\n  )","user":"5a99b861e4b0d174b936c7ad"},{"code":"#(take %\n       ((fn fib [x y]\n          (cons x (lazy-seq (fib y (+ x y)))))\n        1 1))","problem":26,"user":"4fea9154e4b0140c20fb9c0a"},{"problem":26,"code":"(fn fib [n]\n  \"Returns the first X Fibonacci numbers\"\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"5bbbcecee4b0a20761a23611"},{"code":"(fn [n]\n  (loop [lst [], a 0, b 1, m n]\n    (if (= m 0)\n\t  lst\n      (recur (conj lst b) b (+ a b) (dec m)))))","problem":26,"user":"523f1245e4b01c266ffa7f95"},{"code":"(fn fbseq [n]\r\n   (letfn [(iter [n]\r\n   (cond\r\n    (= n 1) '(1) \r\n    (= n 2) '(1 1)\r\n    :else (let [prev (iter (dec n))]\r\n            (cons\r\n             (apply + (take 2 prev))\r\n             prev))))]\r\n     (reverse (iter n))))","problem":26,"user":"507a396be4b08327cd804a69"},{"code":"#(let [fibbit \n      (fn fibbit[n] \n          (if (= 0 n)\n            1\n            (if (= 1 n)\n              1\n              (+ (fibbit (- n 1))(fibbit (- n 2)))\n            )\n          )\n        )\n]\n  (reverse\n      (reduce\n        (fn [s m] (conj s (fibbit m)))\n        '()\n        (range %1)\n      )\n  )\n)","problem":26,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":26,"code":"(fn [n]\n  ((fn [cnt a b l]\n     (if (= cnt 0) \n       l\n       (recur (dec cnt) (+ a b) a (conj l a))))\n   n 1 0 []))","user":"56532ff4e4b0f9d632dd846e"},{"problem":26,"code":"(fn fib [x]\n      (let [fibm (memoize fib)]\n      (case x\n        1 [ 1]\n        2 [ 1 1]\n        (conj (fibm (- x 1)) (+ (last (fibm (- x 1)))\n                 (last (fibm (- x 2))))\n              ))))","user":"56fe665be4b08d47c97781af"},{"problem":26,"code":"(fn fib \n  ([x] (fib x '(1 1)))\n  ([x lst]\n   (if (= (count lst) x)\n     (reverse lst)\n     (fib x \n          (conj \n            lst \n            (reduce + (take 2 lst)))))))","user":"57ee88bbe4b0bfb2137f5bbe"},{"problem":26,"code":"(fn\n  [terms]\n  (map (fn nth-fib\n         [n]\n         (if (<= n 1)\n           n\n           (+ (nth-fib (- n 1)) (nth-fib (- n 2))))) (range 1 (+ 1 terms))))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":26,"code":"(fn [x]\n(loop [col [] t 0]\n    (if (< t x)\n      (recur (conj col (if (>= (count col) 2) (+ (first (reverse col)) (second (reverse col))) 1)) (inc t))\n      col)))","user":"554d0511e4b0a04f792995b5"},{"problem":26,"code":"#(take \n   % \n   ((fn lazy-fib\n      ([] (lazy-fib 1 1))\n      ([a b]\n       (lazy-seq\n        (cons a (lazy-fib b (+ a b))))))))","user":"589c6914e4b00487982d535d"},{"problem":26,"code":"(fn fib [n]\n\t(case n\n\t\t1 [1]\n\t\t2 [1 1]\n\t\t(let [p (fib (dec n))]\n\t\t\t(conj p\n\t\t\t\t(+ (last p) (-> p reverse rest first)))\n\t\t))\n\t)","user":"5cc9b7dfe4b0ccb061962864"},{"code":"(fn fibonacci-list [x]\n  (letfn [(fibo [x]\n                (condp = x\n                  0 0\n                  1 1\n                  (+ (fibo (- x 1))\n                     (fibo (- x 2)))))]\n    (map fibo (map #(+ % 1) (range x)))))","problem":26,"user":"5202c9b6e4b030ee0c5b2701"},{"problem":26,"code":"(fn fibs [n]\n  (loop [i n nums [1 1]]\n    (if (= i 2)\n      (reverse (into '() nums))\n      (recur (dec i) (conj nums (+ (first (reverse nums)) (second (reverse nums))))))))","user":"543823f1e4b032a45b869311"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (loop [coll [1 1 2]\n           fib 3\n           n-1 2\n           n-2 1]\n      (if (= fib n)\n        coll\n        (let [new-n (+ n-2 n-1)]\n          (recur (conj coll new-n) (inc fib) new-n n-1))))))","user":"574bd367e4b02ea114799210"},{"problem":26,"code":"(fn\n[n]\n(loop [coll '(1 1) n (- n 2)]\n  (if (= n 0)\n    (reverse coll)\n    (recur  (cons (+ (first coll) (second coll)) coll) (dec n)))))","user":"5426fb8fe4b01498b1a71b1f"},{"problem":26,"code":"(fn [x]\n           (let [fb (fn [fibs f]\n                      (+ (nth fibs (- f 1)) (nth fibs (- f 2))))]\n             (loop [result [1 1] curr 2]\n               (if (= curr x)\n                 result\n                 (recur (conj result (fb result curr)) (inc curr) )\n                 )\n               )\n             )\n           )","user":"58c93089e4b021aa9917ed9b"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn ff [fibnum]\n              (if (or (= 1 fibnum) (= 2 fibnum))\n                  1\n                  (+ (ff (- fibnum 1)) (ff (- fibnum 2)))))]\n    (loop [i 1, fibseq []]\n      (if (= i (+ 1 n))\n          fibseq\n          (recur (inc i) (conj fibseq (fib i)))))))","user":"567695c2e4b05957ce8c6157"},{"problem":26,"code":"(fn fib [n]\n  (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"58821372e4b0f1effa3b764d"},{"code":"(fn fib [n0]\n  (loop [a 1, b 1, n n0, r []]\n    (if (= n 0)\n      r\n      (recur b (+ a b) (dec n) (conj r a)))))","problem":26,"user":"4ef0a39b535dced4c769f20c"},{"problem":26,"code":"(fn [n] (reduce \n         (fn [ans _] (conj ans (reduce + (take-last 2 ans))))\n           [1 1]\n           (range (- n 2))\n         )\n  )","user":"5c8025d6e4b0c8042a70ce11"},{"code":"(fn [c]\n  (loop [n 0\n         a 1\n         b 1\n         res []]\n    (cond\n     (= c n) res\n     :else (recur (inc n) b (+ a b) (conj res a)))))","problem":26,"user":"4f230dfbe4b0d66497709fe0"},{"code":"(fn [x]\n  (loop\n    [n 0\n     fibseq []]\n    (if (= n x)\n      fibseq\n      (recur\n       (+ n 1)\n       (if (< n 2)\n         (conj fibseq 1)\n         (conj fibseq (+ (last fibseq) (second (reverse fibseq)))))))))","problem":26,"user":"530d85dee4b08068f379eca8"},{"problem":26,"code":"(fn [n] (take n (reduce #(conj % (apply + (conj (take-last 2 %) %2))) [1 1] (repeat n 0))))","user":"58c04ca5e4b021aa9917ece6"},{"problem":26,"code":"(fn [n] (take n (let [f (fn [[a b]] [b (+ a b)])]\n    (map first (iterate f [1 1])))))","user":"55756d34e4b05c286339e062"},{"problem":26,"code":"(fn fib\n  [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (loop [out [1 1]]\n        (if (= x (count out))\n          out\n          (recur (conj out (reduce + (drop (- (count out) 2) out)))))))))","user":"5dc9e5bfe4b03836ba07d826"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"5a1ef970e4b0ff51aa4b327d"},{"problem":26,"code":"#(take %\n  (map first\n       (iterate\n         (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5b985fe5e4b0c0b3ffbd4ab1"},{"problem":26,"code":"(fn [n]\n  (loop [xs [1 1] iter 2]\n    (if (= iter n)\n      xs\n      (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2)))) (inc iter)))))","user":"54734a0de4b0c51c1f4d727b"},{"problem":26,"code":"(fn\n  [nbr]\n  (if (< nbr 1) \n    [] \n    (loop [x 1 arr [1]] \n      (if (<= nbr x) \n        arr \n        (recur \n         (inc x) \n         ((fn \n            [arrIn] \n            (conj \n             arrIn \n             (+ \n              (#(if % % 0) (second (reverse arrIn))) \n              (#(if % % 0) (first (reverse arrIn))))))\n          arr)))))\n  )","user":"5e1b0140e4b0dc959400851c"},{"problem":26,"code":"(fn fibo[number] \n  (loop [n 0 fibo []]\n    (if (= n number) fibo\n    (recur\n     (inc n)\n     (conj fibo (if (>= n 2) \n                  (apply + (take-last 2 fibo))\n                  1\n                  ))))))","user":"568e450fe4b0dcc4269f40d0"},{"problem":26,"code":"(fn [n]\n\t(loop [n (dec n) a 1 b 1 arr [1]]\n\t\t(if (zero? n)\n\t\t\tarr\n\t\t\t(recur (dec n) b (+ a b) (conj arr b)))))","user":"58409e47e4b089d5ab817dee"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib\n                  ([]\n                   (fib 1 1))\n                  ([a b]\n                   (lazy-seq (cons a (fib b (+ a b)))))))))","user":"5ea516e1e4b00a66d4a951a6"},{"problem":26,"code":"(fn fib [n] \n  (case n \n    1 '(1)\n    2 '(1 1)\n    (loop [iter 2\n         prev-1 1\n         prev-2 1\n         fib-vec [1 1]]\n    (if (= iter n)\n      fib-vec\n      (do \n        (let [nth-fib (+ prev-1 prev-2)]\n          (recur (+ iter 1) nth-fib prev-1 (conj fib-vec nth-fib))))))))","user":"5c196dc3e4b01240ff5671fa"},{"code":"#(if (= 1 %) [1]\n    (loop [x (- % 2) acc [1 1]]\n      (if (zero? x)\n        acc\n        (recur (dec x) (conj acc (->> acc (take-last 2) (apply +)))))))","problem":26,"user":"52160dbee4b0bf4bffd29cb3"},{"code":"(fn [x] (loop [terms [1 1]]\n\t\t\t(cond \n\t\t\t\t\t(= (count terms) x) terms ; no need to recur, we have the right number of terms\n\t\t\t\t\t(< (count terms) x) (recur (conj terms (apply + (subvec terms (- (count terms) 2))))) ; let's do the time warp again!\n\t\t\t\t\t(> (count terms) x) 1)))","problem":26,"user":"52eee533e4b05e3f0be25ecb"},{"code":"(fn fibonacci-sequence-solution\n  [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fib 1 1))))","problem":26,"user":"50c113bee4b096f585049c37"},{"code":"(fn hallo \n  ([x] (hallo (- x 2) [1 1] [1 1]))\n  ([x [n1 n2] se] \n    (if (= x 0)\n      se\n      (let [n3 (+ n1 n2)]\n        (hallo (dec x) [n2 n3] (conj se n3))))))","problem":26,"user":"4e72175d535d5021c1a89658"},{"code":"(fn [n]\n  (take n \n    ((fn fib\n\t\t([] (fib 1 1))\n\t\t([a b] (cons a (lazy-seq (fib b (+ b a)))))\n\t))\n  )\n)","problem":26,"user":"53153466e4b08068f379ed23"},{"problem":26,"code":"(fn fib [n]\n  (loop [res [], i n, f-2 0, f-1 1]\n    (if (zero? i)\n      res\n      (recur (conj res f-1) (dec i) f-1 (+ f-1 f-2)))))","user":"5cf935f4e4b0b71b1d808a8f"},{"problem":26,"code":"(fn [n]\n  (reduce\n   (fn [c i]\n     (if (< (count c) 2)\n      (conj c 1)\n      (let [[a b] (take-last 2 c)]\n        (conj c (+ a b))\n      )\n     )\n   )\n   []\n   (range n)\n  )\n)","user":"589a8dace4b00487982d5311"},{"code":"(fn [len] \n  (reverse \n    (loop [remain (- len 2) values '(1 1)]\n      (if (zero? remain)        \n        values\n        (recur\n          (dec remain) \n          (conj values \n            (+ (first values) \n            (first (rest values)))))))))","problem":26,"user":"4f4becd8e4b03ad3f0c10c83"},{"problem":26,"code":"#(take % ((fn fib\n   ([] (fib 1 1))\n   ([x y]\n    (cons x (lazy-seq (fib y (+ x y))))))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"(fn fibsy-fn\r\n  ([x] (fibsy-fn (dec x) 1 1 [1]))\r\n  ([x prev next acc]\r\n     (if (= x 0) acc\r\n         (recur (dec x) next (+ prev next) (conj acc next)))))","problem":26,"user":"4e81e29b535db62dc21a62bd"},{"problem":26,"code":"(fn fibn [n]\n  (->>\n   ((fn fib [i p1 p2]\n      (lazy-seq\n       (let [s (+ p1 p2)]\n         (cons s (fib (inc i) p2 s)))))\n   0 1 0)\n  (take n)))","user":"5b4cd94ce4b02d533a91bcb1"},{"problem":26,"code":"(fn [n]\n  (loop [x n result [1 1]]\n    (if (<= x 2)\n      (seq result)\n      (recur (dec x) (conj result (apply + (take-last 2 result) )))\n    )))","user":"57e396cde4b0bfb2137f5a9e"},{"problem":26,"code":"#(loop [n (- % 2) acc [1 1]] (if (zero? n) acc (recur (dec n) (conj acc (apply + (take 2 (reverse acc)))))))","user":"563249dee4b0bfe05bf1179f"},{"code":"(fn f [x y n]\n  (if (= 0 n)\n    ()\n    (conj (f y (+ x y) (- n 1)) x)\n  )\n) 1 1","problem":26,"user":"4f01c938535dcb61093f6a39"},{"problem":26,"code":"(fn [n] \n  (loop [left (- n 2) res [1 1] l 1 ll 1]\n    (if (= left 0)\n      res \n      (recur (- left 1)\n              (conj res (+ l ll))\n              ll (+ l ll)))))","user":"53e634ede4b036ad0777e470"},{"problem":26,"code":"#(take % (next (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"5c3ec6dbe4b08cd430848e8a"},{"problem":26,"code":"(fn [n]\n    (->> [1 1]\n         (iterate (fn [[a b]] [b (+ a b)]))\n         (map first)\n         (take n)))","user":"55568a7de4b0deb715856e1c"},{"code":"(fn [n]\n  (take n\n    (map first (iterate\n          (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e223bd6535d04ed9115e81c"},{"problem":26,"code":";; #(take % '(1 1 2 3 5 8 13 21)) ;; o haha ...\n(fn [n] \n(cond \n (<= n 1) '(1) \n (= n 2) '(1 1) \n :else (reverse (reduce \n                 (fn [agg n] (conj agg (+ (first agg) (second agg)))) \n                 '(1 1) (repeat (- n 2) 1)))))","user":"55158345e4b055c2f668d4e8"},{"code":"#(take % (drop 1 (apply concat (iterate (fn [[a b]] [(+ a b) (+ a b b)]) [0 1]))))","problem":26,"user":"50d3ec8be4b030b634c368bb"},{"problem":26,"code":"#(map second (take %1 (iterate (fn [[a b]] [b (+ a b)]) '(0, 1))))","user":"56824e1be4b0945ebc182a91"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fib\n            ([p c] (lazy-seq (let [s (+ p c)]\n                               (cons c (fib c s)))))\n            ([] (fib 0 1)))]\n    (take n (f))))","user":"5454bb07e4b0e397800069da"},{"problem":26,"code":"(fn [n]\n    (loop [n1 0 n2 1 n n r []]\n      (if (zero? n)\n        r\n        (recur n2 (+ n1 n2) (dec n) (conj r n2))\n        )))","user":"557c6ca6e4b05c286339e0c4"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib-seq [a b] (cons a (lazy-seq (fib-seq b (+ b a)))))]\n    (take n (fib-seq 1 1))))","user":"5c987160e4b048ec896c5a82"},{"code":"(fn hey [x] (if (= x 2) [1 1] (concat (hey (- x 1)) (list (+ (last (hey (- x 1))) (last (drop-last (hey (- x 1)))))))))","problem":26,"user":"52e17e66e4b09f7907dd1423"},{"problem":26,"code":"(fn [n]\n  (if (<= n 2)\n    (repeat n 1)\n    ((fn [i n s]\n       (if (<= i n)\n         (recur (+ i 1) n (conj s (+ (last s) (second (reverse s)))))\n         s\n        )\n      ) 3 n [1 1])\n   )\n  )","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(fn [x]\n  (reverse (( fn fib_r[n]\n  (if (= n 1) '(1)\n    (if (= n 2) '(1 1)\n      (let [res (fib_r (dec n))\n            ne (+ (first res) (first (rest res)))]\n        (cons ne res))))) x)))","problem":26,"user":"5060c117e4b024449d699b5d"},{"code":"#(loop [n % prev 0 xs [1]]\n   (if (= 1 n) xs (recur (dec n) (last xs) (conj xs (+ prev (last xs))))))","problem":26,"user":"516ea313e4b06aac486e5b2c"},{"problem":26,"code":"(fn [x]\n    (loop [to-go x result [] prev 1 pprev 0]\n       (if (= to-go 1)\n            (cons 1 result)\n          (recur (dec to-go) (conj  result (+ prev pprev)) (+ prev pprev) prev))))","user":"56427910e4b08d4f616f5f19"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b] \n             (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5ada1f12e4b0ea6055cfac43"},{"code":"#(take % ((fn fb[] (lazy-cat [1 1] (map + (fb) (next (fb)))))))\n;#(reverse (reduce (fn [s _] (conj s (apply + (take 2 s)))) '(1 1) (range 2 %)))","problem":26,"user":"4effb663535dcb61093f6a2e"},{"code":"#(loop [n % ret [1 1]] (if (> n 2) (recur (dec n) (conj ret (apply + (take 2 (reverse ret))))) ret))","problem":26,"user":"4f04b66b535dcb61093f6bdd"},{"problem":26,"code":"#((fn [acc current-item next-item counter]\n     (println acc)\n     (if (= counter\n            0)\n       (reverse acc)\n       (recur (conj acc\n                    current-item)\n              next-item\n              (+ current-item\n                 next-item)\n              (dec counter))))\n   ()\n   1\n   1\n   %)","user":"5bacfa46e4b0a20761a234a2"},{"problem":26,"code":"#(take % ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n            1 1))","user":"560ac5cae4b05f002753df09"},{"code":"#(take % (map last (iterate (fn [[p0 p1]] [p1 (+ p0 p1)]) [0 1])))","problem":26,"user":"52bb81d7e4b07a9af57922e8"},{"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] [b (+ a b)]) \n             [1 1]\n             )\n            )\n       )","problem":26,"user":"5267a5e8e4b03e8d9a4a7176"},{"code":"#(take % \n      ((fn fib2 [x y] \n        (cons y (lazy-seq (fib2 y (+ x y))))) 0 1))","problem":26,"user":"534d5ab7e4b084c2834f4a9c"},{"problem":26,"code":"#(map first\n       (take % \n            (iterate \n             (fn [[a b]] [b (+ a b)]) [1 1])\n            )\n       )","user":"5f85e160e4b0ad2c9bc62a43"},{"problem":26,"code":"(fn [x]\n  (cond (zero? x) '()\n        (= 1 x)   '(1)\n        :else (loop [x (- x 2)\n                     y '(1 1)]\n                (if (zero? x)\n                  y\n                  (recur (dec x) \n                         (concat y (list (+ (last y)\n                                            (last (butlast y))))))))))","user":"5c538cb5e4b0fb8c5ffd99fb"},{"problem":26,"code":"(fn [n] (take n (let [x (atom 0)] (iterate #(+ @x (reset! x %)) 1))))","user":"53d2fb7ae4b00fb29b221326"},{"problem":26,"code":"(fn [x]\n  (map (fn fibonacci [n]\n         (if (or (= n 0) (= n 1))\n           1 (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) (take x (range))))","user":"569ad037e4b0542e1f8d144f"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 []\n    1 [1]\n\t(let [prev (fib (dec n))]\n    \t(conj prev (apply + (take-last 2 prev))))))","user":"55048182e4b086ebe8a79c7c"},{"code":"(fn [n]\n  (take n\n    ((fn rfib [a b]\n      (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4e5914e0535d8a8b8723a29b"},{"code":"(fn[n]\n  (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"523ab749e4b0aa37f082ed8d"},{"problem":26,"code":"(fn [limit]\n  (take limit\n        ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"53a7637de4b047364c044419"},{"code":"(fn f[x](if (= x 1) \n          '(1)\n          (if (= x 2)\n           '(1 1)\n(let [z (f (dec x))\n      l (count z)]\n(concat z (list (+ (last z) (nth z (- l 2)))))))))","problem":26,"user":"4f2c2ccbe4b0d6649770a050"},{"code":"#(take %\n(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n)","problem":26,"user":"4dfe65a1535d04ed9115e787"},{"problem":26,"code":"(fn [n]\n  (loop [a 0 b 1 n n v []]\n    (if (zero? n)\n      v\n      (recur b (+ a b) (- n 1) (conj v b)))))","user":"54e6762be4b024c67c0cf809"},{"problem":26,"code":"(fn [y]\n  (loop [result [1 1]\n         n 2]\n    (if (= n y)\n\t\tresult\n\t\t(recur (conj result (+ (nth result (- n 1)) (nth result (- n 2))))\n               (+ n 1)))))","user":"54d26316e4b0e8a36923e5f2"},{"code":"#(if(= 0%4)(reverse%1)(recur(conj%1%2)(+%2%3)%2(-%4 1)))'()1 0","problem":26,"user":"4eb07be3535d7eef3080733b"},{"problem":26,"code":"#(loop [i (- % 2), result [1 1]]\n   (if (= i 0) result (recur (dec i) (conj result (+ (first (reverse result)) (second (reverse result)))))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":26,"code":"#(let [fib-seq \n       (fn fib-seq [coll] \n         (conj coll (+ (first (reverse coll)) (second (reverse coll)))))]\n         (nth (iterate fib-seq [1 1]) (- % 2)))","user":"55bb1b26e4b01b9910ae29e0"},{"code":"(fn [n]\n  (loop [fib-seq (list) cnt 0]\n    (if (= cnt n)\n      (reverse fib-seq)\n    (condp = cnt\n      0 (recur (list 1) (+ 1 cnt))\n      1 (recur (cons 1 fib-seq) (+ 1 cnt))\n      (let [nth-1 (first fib-seq)\n            nth-2 (second fib-seq)]\n        (recur (cons (+ nth-1 nth-2) fib-seq) (+ 1 cnt)))))))","problem":26,"user":"4f0379ef535dcb61093f6ae7"},{"code":"(fn [n]\n  (loop [n n acc [0 1]]\n  (if (get acc n)\n    (rest acc)\n    (recur n (conj acc \n                   (apply + (subvec acc (- (count acc) 2))))))))","problem":26,"user":"51750cd4e4b07031762f2ee5"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [fib _]\n            (conj fib (+ (last fib) (last (butlast fib)))))\n          [1 1]\n          (range (- n 2))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn [n]\r\n  (drop 1 (take (inc n)\r\n    (map first \r\n      (iterate \r\n        (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4fdc067fe4b05e33b9224f69"},{"code":"(fn fib\n\t([n] (take n (fib 0 1)))\n\t([x0 x1] (cons x1 (lazy-seq(fib x1 (+ x1 x0))))))","problem":26,"user":"531dfaf5e4b08068f379edb3"},{"code":"#(take % (map last (iterate (fn [[f l]] [l (+ f l)]) [0 1])))","problem":26,"user":"5228b015e4b0186687e23a8a"},{"code":"(fn [x]\n  (loop [idx 0 f0 0 f1 1 flist []]\n     (if (< idx x)\n        (recur (inc idx) f1 (+ f0 f1) (conj flist f1))\n        flist\n     )\n  )\n)","problem":26,"user":"4e5cac7c535d8a8b8723a2c3"},{"code":"(fn [x]\n  (loop [xs nil n x]\n    (if (= n 0)\n      xs\n      (recur \n        (cond \n          (not (seq xs)) [1]\n          (= (count xs) 1) [1 1]\n          :else (conj xs \n              (+ \n                (last xs) \n                (nth xs (- (count xs) 2)))))\n            (dec n)))))","problem":26,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":26,"code":"(fn [n]\n  (loop [acc [] n n a 0 b 1]\n    (if (zero? n)\n      acc\n      (recur (conj acc b) (dec n) b (+ a b)))))","user":"5006c169e4b0678c553fc48d"},{"problem":26,"code":"(fn fib [n]\n  (if (= 2 n)\n    '(1 1)\n    (concat (fib (dec n)) (list (+ \n                                 (last (fib (dec n)))\n                                 (last (butlast (fib (dec n))))\n                                 )))\n  )\n)","user":"58a3c6aae4b02bd94d917f00"},{"code":"(fn fib [n & col]\n  (if (nil? col)\n      (fib n 1 1)\n  (if (> n 0)\n     (cons (first col)\n     (fib (- n 1) (fnext col) (+ (first col) (fnext col))))\n)))","problem":26,"user":"50adcfe6e4b0a40c9cfb08cb"},{"problem":26,"code":"#(take % ( map first (iterate (fn[[x y]] [y ( + x y )]) [1 1] )))","user":"5e8308abe4b09a7a73c8bbb4"},{"code":"(fn [n] (nth (iterate #(conj % (+ (nth % (- (count %) 1)) (nth % (- (count %) 2)))) [1 1]) (- n 2)))","problem":26,"user":"4ef0a39b535dced4c769f20d"},{"code":"(fn [n]\n  (loop [x1 0 x2 1 xs [] n n]\n    (if (= n 0)\n      (seq xs)\n      (recur x2 (+ x1 x2) (conj xs x2) (dec n)))))","problem":26,"user":"533018b2e4b019098a6f8b56"},{"problem":26,"code":"(fn [x]\n  (nth (iterate \n        (fn [l]\n          (conj \n           l\n           (+ (last l)\n              (last (butlast l)))))\n        [1 1]) \n       (- x 2)))","user":"55d8eed3e4b0e31453f64ac3"},{"code":"#((fn fib [start range]                                                                                                                                                                                               \n  (if (<= range 0)                                                                                                                                                                                                                         \n    start                                                                                                                                                                                                                                  \n    (recur (let[subvector (subvec start (- (count start) 2))                                                                                                                                                                               \n                x (nth subvector 0)                                                                                                                                                                                                        \n                y (nth subvector 1)                                                                                                                                                                                                        \n                z (+ x y)]                                                                                                                                                                                                                 \n             (conj start z))                                                                                                                                                                                                               \n           (- range 1)))\n  ) \n  [1 1] (- % 2)\n)","problem":26,"user":"50e4f4e9e4b049a987753896"},{"code":"(fn [n]\n  (nth \n    (iterate \n      #(->>\n        %\n        (take-last 2)\n        (apply +)\n        (conj %)\n      )\n      [1]\n    )\n    (dec n)\n  )\n)","problem":26,"user":"4ece7617535d23f03622770c"},{"problem":26,"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n      (take %)\n      (map first))","user":"55e3479be4b050e68259b441"},{"problem":26,"code":"#(take %\n       (map first \n       (iterate\n        (fn [[a b]] [b (+ a b)]) [1 1])))","user":"4ee7c6dd535d93acb0a6686c"},{"code":"(fn f [x] (loop [i 2 j 1 k 1 acc [1 1]] (if (= x i) acc\r\n  (recur (inc i) k (+ j k) (conj acc (+ j k))))))","problem":26,"user":"4ddbd934535d02782fcbe9fc"},{"problem":26,"code":"(fn f [n]\n  (if\n    (= n 2)\n    [1 1]\n    (let [g (f (dec n))]\n      (conj\n       g\n       (+\n        (nth g (- n 3))\n        (nth g (- n 2))\n       )\n      )\n    )\n  )\n)","user":"5551b492e4b0deb715856ded"},{"problem":26,"code":"(fn [n]\n (take n\n       (map first\n            (iterate \n        (fn [[a b]] [b (+ a b)])\n        [1 1]))\n       ))","user":"55469eede4b0a04f79299542"},{"code":"(fn [x] \n  (take x \n    (\n      (fn fib [a b] \n        (lazy-seq \n          (cons a \n            (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4ec5569f535d6d7199dd3695"},{"problem":26,"code":"#(take % \n  (map first \n    (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"55ad59cde4b03311e7b732a7"},{"problem":26,"code":"#(map\n  (fn fibo [index] \n    (if (< index 2)\n      1\n      (+ (fibo (dec index)) (fibo (-> index dec dec)))\n    )\n  )\n  (range %)\n)","user":"5d79165ae4b02e6b30c9353e"},{"code":"(fn [n]\n  (let [fibs\n          (fn fibs [n]\n            (cond\n              (= n 1) '(1)\n              (= n 2) '(1 1)\n              true    (let [f (fibs (dec n))]\n                        (cons (+ (nth f 0) (nth f 1))\n                              f))))]\n    (reverse (fibs n))))","problem":26,"user":"4e8338d6535db62dc21a62d3"},{"problem":26,"code":"#(take %\n\t(map\n     \t(fn [[x y]] y) \n        (iterate \n         (fn fibo [ [x1 x2] ] [ x2 (+ x1 x2) ]) \n         [ 0 1 ])))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn [n] (letfn [(fib [n]\r\n                (cond (= n 0) 0\r\n                      (= n 1) 1\r\n                      :else (+ (fib (- n 1)) (fib (- n 2)))))]\r\n          (map fib (range 1 (+ 1 n)))))","problem":26,"user":"4f2893d0e4b0d6649770a019"},{"code":"(fn fib [x]\n  (if (< x 3)\n    ; base cases\n    (if (= x 2)\n      `(1 1)\n      `(1)\n    )\n    ; recursive case\n    (concat\n      (fib (- x 1))\n      (list (+\n        (last (fib (- x 1)))\n        (last (fib (- x 2)))\n      ))\n    )\n  )\n)","problem":26,"user":"4ffbc28ce4b0678c553fc3d4"},{"problem":26,"code":"#(loop [arr [0 1] i 0 ]\n    (if (= (inc i) %) \n      (drop 1 arr)\n      (recur\n       (conj arr (apply + (take-last 2 arr)))\n       (inc i)\n       )))","user":"529de065e4b04e0c58e87b84"},{"problem":26,"code":"(fn fibs [n]\n  ((fn fib [n i prevs]\n     (if (= n i)\n       prevs\n       (fib n\n            (+ i 1)\n            (conj prevs\n              (+ (nth prevs (- i 1))\n                 (nth prevs (- i 2))))))) n 2 [1 1]))","user":"55f5c118e4b06e875b46ce8e"},{"code":"(fn [n]\n  (letfn [(fibs \n           ([]    (concat [1 1] (fibs 1 1)))\n           ([a b] (let [m (+ a b)]\n                    (lazy-seq (cons m (fibs b m))))))]\n    (take n (fibs))))","problem":26,"user":"50b9d991e4b04934c218a4a9"},{"problem":26,"code":"(fn fib [numElems]\n  ((fn [a b elemsSoFar numLeft]\n    (if (= 0 numLeft)\n      (reverse elemsSoFar)\n      (recur b (+ a b) (cons b elemsSoFar) (dec numLeft))))\n  0 1 '() numElems))","user":"59738d98e4b01722bebd4ca1"},{"code":"(fn [n]\n  \"26. Write a function which returns the first X fibonacci numbers.\"\n  (loop [i 2\n         acc [1 1]]\n    (if (>= i n)\n      acc\n      (recur (inc i) (conj acc (+ (last acc) (fnext (reverse acc))))))))","problem":26,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":26,"code":"(fn [n]\n  (loop [acc []\n         n n\n         x 1\n         y 1]\n    (cond\n     (zero? n) acc\n     :else (recur (conj acc x)\n                  (dec n)\n                  y\n                  (+ x y)))))","user":"51c116d4e4b0c9c822882942"},{"problem":26,"code":"#(take % ((fn hax [a1 a2] (lazy-seq (cons a1 (hax a2 (+ a1 a2)))))1 1))","user":"587b8bdee4b01531a375eaff"},{"problem":26,"code":"(fn fibo\n  ([n]\n   (fibo n 1 1))\n  ([n a b]\n   (if (pos? n)\n     (cons a (fibo (dec n) b (+ a b))))))","user":"55c4e48be4b0e31453f649a7"},{"problem":26,"code":"(fn [n]\n  (->> (range (- n 2))\n       (reduce (fn [[a b :as coll] _] \n                     (conj coll (+ a b))) \n                   '(1 1))\n       (reverse)))","user":"5954108ae4b066ee0a44aef4"},{"problem":26,"code":"(fn [amount]\n  (loop [depth (dec amount) result [1] prev 0 cur 1]\n    (if-not (> depth 0)\n      result\n      (recur (dec depth)\n        (conj result (+ prev cur))\n        cur\n        (+ prev cur)))))","user":"56d902c3e4b0ea9b8538f7ed"},{"problem":26,"code":"#(take % (map last (iterate (fn[[x y]] [y (+ x y)]) [ 0 1])))","user":"4fabbd3ee4b081705acca21e"},{"code":"(fn fib [n]\n  (\n    (fn fib-inner [k]\n      (condp = k\n        0 []\n        1 [1 1]\n        (let\n          [\n            ks\n            \t(fib-inner (dec k))\n            last\n            \t(first (reverse ks))\n            second-last\n           \t\t(second (reverse ks))\n          ]\n          (conj ks (+ last second-last))\n        )\n      )\n    )\n    (dec n)\n  )\n)","problem":26,"user":"50e4ff72e4b049a987753897"},{"problem":26,"code":"(let [fib (fn fib [n] (if (< n 2) 1 (+ (fib (dec n)) (fib (- n 2)))))\n      mem-fib (memoize fib)]\n  (fn [n]\n    (map mem-fib (range n))))","user":"57e0f30ae4b0bfb2137f5a66"},{"problem":26,"code":"(fn [fib]\n  (cond (= fib 1) [1]\n        (= fib 2) [1 1]\n        :else\n  \t\t\t(loop [f0 1 f1 1 idx 3 results [1 1]]\n    \t\t\t(if (> idx fib) results\n                  \t(recur f1 (+ f0 f1) (inc idx) (conj results (+ f0 f1)))))))","user":"56e53d2fe4b02e7e935eb6bc"},{"problem":26,"code":"#(take % ((fn fib [a b]\n              (lazy-seq (cons a (fib b (+ a b)))))\n            1 1))","user":"5e0f5ccee4b099d064962fb8"},{"problem":26,"code":"(fn [n]\n  (let [fibs (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))]\n    (take n fibs)))","user":"548ade6de4b0e286459a11f6"},{"problem":26,"code":"(fn fibo[n]\n  (->> (iterate #(let [[a b] %] [ b (+ a b)]) [1 1])\n       (map first)\n       (take n)))","user":"59395adfe4b02506e01a29fb"},{"problem":26,"code":"#(loop \n   [ret [1] cnt %] \n   (if (= 1 cnt) \n     (reverse ret) \n     (recur (cons (reduce + (take 2 ret)) ret) (dec cnt))\n     )\n)","user":"555f6224e4b0a2eb076a39c5"},{"problem":26,"code":"(fn [n] (loop [result [0 1]]\n            (if (= (count result) (+ n 1))\n              (rest (seq result))\n              (recur (conj result (apply + (take-last 2 result) ) ) )\n            )\n          )\n)","user":"5433d3ebe4b0b6b47310fce4"},{"code":"(fn [n]\n  (letfn [(fibs [acc] (conj acc (+ (nth acc (- (count acc) 2)) (last acc))))] (nth (iterate fibs [1 1]) (- n 2))))","problem":26,"user":"50a7f2a8e4b090657f4a5ce1"},{"problem":26,"code":"#(\n\tloop [end % l []]\n\t\t(if (= % (count l))\t\t\n\t\t\tl\n\t\t\t(recur \tend  \n\t\t\t\t\t(if (or (empty? l) (= (count l) 1))\n\t\t\t\t\t\t(conj l 1)\n\t\t\t\t\t\t(conj l (+ (last l) (nth l (dec (dec (count l))))))\n\t\t\t\t\t)\n\t\t\t)\n\t\t)\n)","user":"57b2ca30e4b0fbc9809a2768"},{"code":"(fn self [x]\n  (if (= x 2)\n    [1 1]\n    (conj (self (- x 1)) (+ (last (self (- x 1))) (last (butlast (self (- x 1))))))))","problem":26,"user":"50dc1689e4b02e6ac9592c83"},{"code":"(fn [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n      (loop [n1 1, n2 1, acc [1 1]]\n        (if (= (count acc) n)\n          acc\n          (let [n3 (+ n2 n1)]\n            (recur n2 n3 (conj acc n3)))))))","problem":26,"user":"4f7a9416e4b06e829148e19b"},{"problem":26,"code":"(fn [n]\n  (letfn\n    [\n     (fib-step\n      [[a b]]\n      [b (+ a b)])\n     ]\n    (take n (map first (iterate fib-step [1 1])))\n    )\n  )","user":"56acc4b9e4b03c432f18734b"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (reduce #(or (conj %1 (apply + (take-last 2 %1))) %2) [1 1] (range 2 x)))","user":"5e14e396e4b0a047bd49f6f7"},{"problem":26,"code":"#(take % \n       (map last \n            (iterate \n         \t\t(fn [[a b]] [b (+ a b)]) [0, 1]\n)))","user":"55e8a85be4b0121d4835fd98"},{"problem":26,"code":"(fn [num] \n    (loop [n 1\n           res [1]\n           i (- num 1) ]\n        (println n res i)\n        ( if (= i 0) (identity res) (recur (+ n (last res) ) (conj res n) (- i 1) ) ))\n\n )","user":"55ba6d52e4b01b9910ae29d3"},{"code":"(fn [n] (map (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc n))))","problem":26,"user":"4e72dd5d535d5021c1a89667"},{"code":"#(take % ((fn fabseq [a b]\n  (lazy-seq (cons b (fabseq b (+ a b))))) 0 1))","problem":26,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":26,"code":"(fn fib [x] (reverse (loop  [i 1 res (list 1 1)] (if (= i (dec x)) res (recur (inc i) (conj res (+ ( first res) (second res) ) ) )  ))))","user":"6076adb2e4b069485764de60"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b]\n  (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5477056de4b0c51c1f4d72ac"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b] \n(cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"585a9a16e4b0f14aab7c8752"},{"problem":26,"code":"(fn fib\n  [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (reverse  (conj (reverse (fib (- x 1))) (+ (first (reverse (fib (- x 1)))) (second (reverse (fib (- x 1))))))))))","user":"56ebfb93e4b04a395b9a042e"},{"code":"(fn fib [x & [x1, x2]] (if(<= x 0)\n    ()\n    (if(nil? x1)\n    (cons 1 (fib (dec x) 1 1))\n    (cons x2 (fib (dec x) x2 (+ x1 x2))\n    )))\n  )","problem":26,"user":"5368fedee4b0243289761e93"},{"code":"(fn fib [n]\n  (doall (map (fn fib [n] (cond\n                          (= n 0) 1\n                          (= n 1) 1\n                          :else (+ (fib (- n 1)) (fib (- n 2))))) (range n))))","problem":26,"user":"53762466e4b06839e8705e1e"},{"code":"(fn fib [n]\n        (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"537cd1dce4b06839e8705e7e"},{"code":"(fn [n]\n  (take n\n    (\n      map first\n      (iterate\n        (fn [[a b]] [b (+ a b)])\n        [1 1]\n      )\n    )\n  )\n)","problem":26,"user":"5227eacee4b0186687e23a5e"},{"problem":26,"code":"(fn fcoll [n] \n  (cond\n   (<= n 0) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [head (fcoll (- n 1))]\n     (conj head (+ (last head) (nth head (- (count head) 2))) )\n     )\n   )\n  )","user":"54cb3497e4b057c6fda3a272"},{"problem":26,"code":"(fn [n] (cond (= n 0) []\n                (= n 1) [1]\n                (= n 2) [1 1]\n                :else (last (take (- n 1) (iterate (fn [seq] \n                  (conj seq \n                    (+ (last seq) (nth seq (- (count seq) 2)))\n                  )\n                ) [1 1])))\n          ))","user":"55cfdfc9e4b0e31453f64a35"},{"code":"(fn [amount] (take amount (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51baa1cae4b0fe3ecfb46438"},{"code":"(fn [n]\n  (letfn [(rest-of-fibs [x y]\n            (lazy-seq\n             (cons x (rest-of-fibs y (+ x y)))))\n          (all-fibs []\n            (rest-of-fibs 1 1))]\n    (take n (all-fibs))))","problem":26,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":26,"code":"(fn [x]\n       (loop [seqs [1 1] temp 2 l1 1 l2 1]\n         (if (= temp x)\n           seqs\n           (recur (conj seqs (+ l1 l2)) (inc temp) l2 (+ l1 l2)))))","user":"5e4ba8e8e4b0889a8790a55a"},{"code":"#(take % [1 1 2 3 5 8 13 21]) ; cheating","problem":26,"user":"4f0fe835535d64f60314640e"},{"problem":26,"code":"#(map (fn f [x] (if (<= x 1)\n                    x\n                    (+ (f (- x 1)) (f (- x 2)))))\n      (range 1 (+ 1 %)))","user":"5c51ac2fe4b0fb8c5ffd99cb"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 i 0 res []]\n    (if (= i n)\n      res\n      (recur b (+ a b) (inc i) (conj res a)))))","user":"59abd1d8e4b08cbb53654da4"},{"problem":26,"code":"(fn [number]\n  (map\n    (fn fib-number [number]\n      (cond (= number 0) 1\n            (= number 1) 1\n            :else (+ (fib-number (- number 2)) (fib-number (- number 1)))))\n    (range number)))","user":"5645a7f9e4b0284900eef609"},{"code":"#(reverse (take %\n  (loop [m % fibs '(1 1)]\n    (if (< m 3)\n      fibs\n      (recur\n        (dec m)\n        (cons (+ (first fibs) (-> fibs rest first)) fibs))))))","problem":26,"user":"504c8165e4b09724c857af31"},{"problem":26,"code":"#(map (fn fib \n   [some-num]\n    (if (< some-num 2)\n      some-num\n      (+ (fib (- some-num 1)) (fib (- some-num 2)))))\n(range 1 (inc %)))","user":"5553b729e4b0deb715856e05"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib-seq2\n           ([] (fib-seq2 0 0))\n           ([n1 n2]\n            (if (= [0 0] [n1 n2])\n              (lazy-seq (cons 1 (fib-seq2 1 0)))\n              (let [n (+ n1 n2)]\n                (lazy-seq (cons n (fib-seq2 n n1))))))))))","user":"58d48df8e4b03c36ff7e5941"},{"problem":26,"code":"(fn [n & coll] \n    (let [coll (or coll '(1 1))]\n    (if (= (count coll) n) \n      (reverse coll)\n      (recur n (cons (+ (first coll) (second coll)) coll)))))","user":"55fc838be4b0f488688e0674"},{"problem":26,"code":";; I'd say this is \"Medium\"\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"58136679e4b0f478707a060d"},{"problem":26,"code":"(fn [n] \n  (loop [i 0\n         result '()]\n    (cond\n     \t(< i 2) (recur (inc i) (conj result 1) )\n     \t(= i n) result\n     \t:else (recur (inc i) (concat result (list (+ (last result) (nth result (- (count result) 2)))) )))))","user":"6074df6fe4b069485764de4b"},{"code":"(fn [num]\n  ((fn [sq l1 l2 num]\n     (let [next (+ l1 l2)]\n       (if (= num 0)\n         sq\n         (recur (conj sq next) l2 next (dec num))))) [] 1 0 num))","problem":26,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":26,"code":"(fn[x]\n   (map (fn fib[a]\n        (if(or(= a 1) (= a 0))\n          1\n          (+ (fib(- a 1)) (fib(- a 2))))) (range x)))","user":"59637028e4b066ee0a44b0ca"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map\n          first\n          (let [f (fn [[a b]] [b (+ a b)])]\n            (iterate f [1 1]))\n            \n          )\n        )\n  )","user":"54e84d1ee4b024c67c0cf822"},{"code":"#(map (fn fib [n]\r\n  (cond \r\n    (= 0 n) 1\r\n    (= 1 n) 1\r\n    :else  (+ (fib (- n 2)) (fib (- n 1))))) \r\n(range %))","problem":26,"user":"50bfe725e4b080409b860f26"},{"problem":26,"code":"(fn [n]\n  (reverse (loop [i 2\n         n1 1\n         n2 1\nl (list n1 n2)]\n(if (< i n) (recur (inc i) n2 (+ n1 n2) (cons (+ n1 n2) l)) l))))","user":"55d84919e4b0e31453f64ab0"},{"problem":26,"code":"(fn [x]\n  (loop [feb [1 1] cnt (- x 2)]\n  (if (> cnt 0)\n    (recur\n      (conj feb (+ (nth feb (- (count feb) 1)) (nth feb (- (count feb) 2))))\n      (dec cnt))\n    feb)))","user":"5d4256bae4b05dd059a5437d"},{"problem":26,"code":"(fn [n] (let [myvec (vector 1 1 2 3 5 8 13 21)]\n          (seq (subvec myvec 0 n))))","user":"53d977f1e4b0e771c302547a"},{"problem":26,"code":"#(nth (iterate (fn [s] (reverse (conj (reverse s) (+ (last s) (last (drop-last s)))))) '(1 1)) (- %1 2))","user":"53d920d9e4b0e771c3025475"},{"problem":26,"code":"(fn [n] \n  (loop [cnt n out [] prev 0 curr 1]\n    (if (= cnt 0)\n      out\n      (recur (dec cnt) (conj out curr) curr (+ prev curr)))))","user":"5599cc64e4b031d6649c9bb3"},{"problem":26,"code":"(fn [to]\n  (loop [res [1]\n         last-two [0 1]]\n    (if\n     (= (count res) to) res\n     (let [new-el (apply + last-two)]\n     (recur \n      (conj res new-el)\n      (concat \n       (rest last-two) [new-el])\n      )))))","user":"592334c7e4b0a390037439ee"},{"problem":26,"code":"#(last \n  (take (- % 1) \n       (iterate (fn [coll]\n                  (let [x (last (butlast coll))\n                        y (last coll)]\n                  (conj coll (+ x y))))\n                [1 1])))\n\n;; this is painfully inefficient, in that it builds up a collection of collections -- e.g.\n;; '([1 1] [1 1 2] [1 1 2 3]) instead of just '(1 1 2 3).","user":"55344b75e4b09218d5f44f99"},{"problem":26,"code":"(fn [n] (take n ((fn fib [a b] (lazy-seq(cons a (fib b (+ a b))))) 1 1)))","user":"57434339e4b0c285004e8a9f"},{"problem":26,"code":"(fn[x]\n  (take x\n  (\n   (fn fib [a b] \n     (cons a \n           (lazy-seq \n            (fib b (+ a b))\n           )\n     )\n   \t)\n   \t1 1\n   )\n  ))","user":"544623f3e4b032a45b8693a9"},{"problem":26,"code":"(fn [x] (loop [index 0 cur 1 pre 1 coll '(1)] (if (= index (- x 1)) (reverse coll) (recur (+ 1 index) (+ cur pre) cur (list* cur coll)))))","user":"5924009ce4b072a2710fce45"},{"code":"#(for [x (range 1 (inc %))] ((fn f [n] (cond (= n 0) 0 (= n 1) 1\n:else (+ (f (- n 1)) (f (- n 2))))) x))","problem":26,"user":"4ff673b3e4b0678c553fc37d"},{"problem":26,"code":"(fn[z] (take z (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"585030cbe4b0b7285a6f4e78"},{"problem":26,"code":"#(reverse (reduce (fn [[f-2 f-1 :as a] _] (cons (+ f-2 f-1) a)) '(1 1) (range 2 %)))","user":"54f26266e4b024c67c0cf8c5"},{"problem":26,"code":"(fn [n] (loop [x n, fibo '(1 1)]\n          (if (> x 2)\n            (recur (dec x) (conj fibo (+ (nth fibo 0) (nth fibo 1))))\n            (reverse fibo))))","user":"5c30da5ae4b0d62ef62d9f23"},{"problem":26,"code":"(fn fib [n]\n  (loop [fibs '()\n         a 0\n         b 1\n         cnt n]\n    (if (= 0 cnt)\n      (reverse fibs)\n      (recur (conj fibs (+ a b)) (+ a b) a (dec cnt)))))","user":"58975725e4b00487982d52b7"},{"code":"(fn [n] \n  (take n (map first (iterate \n    (fn [[a b]]\n     [b (+ a b)]) [1 1]\n))))","problem":26,"user":"4eb9353f535dfed6da9c6d4e"},{"problem":26,"code":"#(map (fn fib [n]\n  (if (> n 1)  ; if n=0 or n=1 return n\n    (+ (fib (dec n)) (fib (- n 2)))\n    n)) (range 1 (inc %)))\n\n#_(map (fn[n]\n  (loop [a 1 b 1 cnt n]\n   (if (= cnt 0)\n      b\n    (recur(+ a b)a(- cnt 1))))) (range %))\n#_(fn fibby [n]\n  (for[[v1 v2] (take n (iterate (fn[[a b]][b (+ a b)])[0 1]))]\n         v2))\n#_(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"52faf67ce4b047fd55837005"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [x]\n               (cond (= x 0) 0\n                     (= x 1) 1\n                     :else (+ (fib (- x 2)) (fib (- x 1)))))]\n    (loop [result [] y n]\n      (if (zero? y) (reverse result)\n        (recur (conj result (fib y)) (dec y))))))","user":"5c678b6ee4b0fca0c16226bc"},{"problem":26,"code":"#(map (fn fib\n  [n]\n  (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 0 %))","user":"5b679bf9e4b0c6492753e769"},{"code":"(fn [n] (map\n             (fn fibno [x]\n               (cond \n                (= x 0) 1\n                (= x 1) 1\n                :else (+ (fibno (- x 1)) (fibno (- x 2)))))\n             (range n)))","problem":26,"user":"52b6365de4b0c58976d9ad40"},{"code":"#(loop [r [1 1]] (if (= (count r) %) (list* r) (recur (conj r (apply + (subvec r (- (count r) 2)))))))","problem":26,"user":"4f6a2ff2e4b07046d9f4ef98"},{"code":"#(take % (rest (map first (iterate (fn [[a b]] (list b (+ a b))) '(0 1)))))","problem":26,"user":"4e929dd0535dbda64a6f6b05"},{"problem":26,"code":"(fn fib [x] (\n             if (= x 2)\n             [1 1]\n             (let [s (fib (- x 1))]\n               (conj s (+ (last s) (nth s (- (count s) 2))))\n             )\n            )\n)","user":"593f88dce4b069cdc2982be2"},{"problem":26,"code":"(fn generate-fibonacci-sequence\n  ([index] (generate-fibonacci-sequence (dec index) [1]))\n  ([index fib-vector]\n    (if\n     (< index 1)\n       (seq fib-vector)\n       (generate-fibonacci-sequence\n         (dec index)\n         (conj fib-vector (apply + (take-last 2 fib-vector)))))))","user":"60898748e4b0ae75613dcef3"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]]\n                          [b (+ a b)]) [1 1]))))","user":"5c5d2e90e4b01df32ab732af"},{"code":"(fn fbfib [n]\n(take n (map first (iterate \n  (fn fbseq [[a b]]\n    [b (+ a b)])\n  [1 1]))))","problem":26,"user":"4e70c0b1535d5021c1a89640"},{"code":"(fn [x] \n  (take x ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 prev1 1 prev2 0 result '(1)]\n    (clojure.pprint/pprint {:prev1 prev1 :prev2 prev2 :curr (+ prev1 prev2) :result result})\n    (if (= i n)\n      (reverse result)\n      (let [curr (+ prev1 prev2)]\n        (recur (+ i 1) curr prev1 (cons curr result))))))","user":"57b39fbee4b0fbc9809a2783"},{"problem":26,"code":"(fn fib ([cnt] (fib cnt [1 1])) ([cnt acc ] (\n                                               if (= cnt 2) acc\n                                               (fib (dec cnt) (conj acc (+ (last acc) (last (butlast acc))))))))","user":"559ff9eee4b0acc240e314ee"},{"code":"(fn [n]\n    (if (= n 1) (1) \n        (loop [i (- n 2), ret '(1 1)]\n            (if (= i 0) \n                (reverse ret)\n                (recur (dec i) (cons (+ (first ret) (fnext ret) ) ret) )\n            )\n        )\n    )\n)","problem":26,"user":"4f2965ffe4b0d6649770a029"},{"problem":26,"code":"#(take\n %\n (map\n  second \n  (iterate\n   (fn [[a b]]\n     [b (+ a b)])\n   [0 1])))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":26,"code":"(fn [count]\n  (let\n      [fib (fn fib [n]\n             (if (= n 0) 0\n                 (if (= n 1) 1\n                     (+ (fib (- n 1)) (fib (- n 2))))))]\n   (loop\n       [x 0\n        acc []]\n     (if (= x count)\n       acc\n       (recur (inc x) (conj acc (fib (inc x))))))))","user":"54636b05e4b01be26fd746c0"},{"code":"(fn fib [n] \n  (if (= n 1) \n    '(1)\n  \t(if (= n 2) \n      '(1 1)\n      (reduce (fn fib [l _]\n                (conj l \n        \t\t   (+ (last l) \n           \t\t\t  (last (butlast l)))))\n              [1 1] (range (- n 2)))\n    ))\n  )","problem":26,"user":"5263dca8e4b03e8d9a4a70bd"},{"problem":26,"code":"(fn f\n  ([n] (f n '(1 1)))\n  ([n l] (if (= n (count l)) (reverse l) (f n (conj l (+ (first l) (second l)))) ))\n)","user":"5602ab92e4b04bb52996e1a3"},{"problem":26,"code":"#(take % (map last\n       (iterate (fn fib [[a b]] [b (+ a b)]) [0 1])))","user":"545b9dd9e4b01be26fd74654"},{"problem":26,"code":"(fn fib [x]\n  (case x\n    0 []\n    1 [1]\n    2 [1 1]\n    (loop [counter (- x 2)\n         elems [1 1]] \n      (if (> counter 0)\n        (let [_last (last elems)\n              _prelast (-> elems reverse (nth 1))]\n          (recur (- counter 1) (conj elems (+ _last _prelast))))\n        elems))))","user":"57597fade4b02ea11479931d"},{"problem":26,"code":"#(loop [a 1 b 1 acc [] counter %]\n  (if (= counter 0)\n    acc\n    (recur b (+ a b) (conj acc a) (- counter 1))))","user":"566899f4e4b04acd4f672df4"},{"problem":26,"code":"(fn fibseq\n  [n]\n  (loop\n    [ix 0\n     fibs []]\n    (cond\n     (= ix n) fibs\n     (< ix 2) (recur (inc ix) (conj fibs 1))\n     true (recur (inc ix) (conj fibs (+ (last fibs)\n                                        (last (butlast fibs))))))))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":26,"code":"(fn n-fib\n  [n]\n  (cond\n    (= n 1) (list 1)\n    (= n 2) (list 1 1)\n    :else\n    (reduce\n     (fn [accum value]\n       (concat accum\n               (list (+ (last accum)\n                        (last (butlast accum))))))\n     (list 1 1)\n     (range (- n 2)))))","user":"5c222b7de4b07e362c230588"},{"problem":26,"code":"#(loop [up-to %1 out [1 1]]\n   (if (< up-to 3) out\n          (recur (dec up-to) (conj out (reduce + (take-last 2 out)) ))))","user":"56391b7ce4b0bfe05bf117ef"},{"code":"#(loop [result '(1 1)]\n   (if (= % (count result))\n     result\n     (recur (concat result (list (apply + (take-last 2 result)))))))","problem":26,"user":"4ece9ca9535d23f03622770f"},{"problem":26,"code":"(fn fib\n  ([s, start, end] (if (= start end) s (fib (conj s (+ (last s) (last (butlast s)) ) ) (+ start 1) end) ))\n  ([e] (fib [1 1] 2 e))\n)","user":"5a214798e4b0ff51aa4b32aa"},{"problem":26,"code":"(fn[x]\n  (loop [x x\n         fib [1 1]]\n    (if (<= x 2)\n    \tfib\n    (recur (dec x) (conj fib (+ (nth fib (dec (dec(count fib)))) (last fib) ))))))","user":"53ea4492e4b036ad0777e4e0"},{"problem":26,"code":"#(loop [n %, fibs [], f1 1, f2 1]\n  (if (zero? n)\n    fibs\n    (recur (dec n)\n           (conj fibs f1)\n           f2\n           (+ f1 f2))))","user":"56dc34a3e4b0ea9b8538f816"},{"problem":26,"code":"(fn fib [n]\n  (if\n    (= n 2)\n    '(1 1)\n    (let [sq (fib (- n 1))]\n      (concat sq (list (+ (last sq) (nth sq (- (count sq) 2))))))))","user":"5f2c5912e4b033932238a664"},{"problem":26,"code":"#(loop [f 1 s 1 n 2 r [1 1]] (if (= n %) r (let [t (+ f s)] (recur s t (inc n) (conj r t)))))","user":"5b37a3b4e4b02d533a91bba9"},{"problem":26,"code":"(fn [n]\n  (loop [fib 1\n         counter n\n         fibs [1]]\n    (if (<= counter 1)\n      fibs\n      (recur (+ fib (last fibs))\n             (dec counter)\n             (conj fibs fib)))))","user":"5579eed7e4b05c286339e09b"},{"problem":26,"code":"(fn fib\n    [x]\n    (if (= x 2) \n        '(1 1)\n        (let [prev (fib (- x 1))]\n            (concat prev (list (+ (last (butlast prev)) (last prev)))))))","user":"5ea6fe98e4b00a66d4a951b2"},{"code":"#(take % ((fn fib [a b] \n           (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"5145832be4b0e8879607340a"},{"problem":26,"code":"#(take % ((fn fib [a b] (lazy-seq( cons a (fib b (+ a b))))) 1 1))","user":"5dbac8ebe4b010eb3c36cd62"},{"code":"#(reverse (loop [n 3 fm1 1 fm2 1 acc '(1 1)]\n  (cond (= %1 1) '(1)\n    (= %1 2) '(1 1)\n    (< %1 n) acc\n    :else (recur (inc n) (+ fm1 fm2) fm1 (conj acc (+ fm1 fm2))))))","problem":26,"user":"50afa883e4b0c3f5ed5c29a2"},{"problem":26,"code":"(fn [x] \n    (take x ((fn rfib [a b]\n     (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"5a21c3f9e4b0ff51aa4b32b7"},{"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [prev (fib (- n 1))\n          rev (reverse prev)]\n      (conj prev (+ (first rev) (second rev))))))","problem":26,"user":"4ec6c878535d6d7199dd36d5"},{"code":"(fn [n] (take n ( (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)) ))) 1 1 ) ) )","problem":26,"user":"537bca8be4b06839e8705e71"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n    (loop [a 1 b 1\n           result [1 1]\n           i 3]\n      (let [c (+ a b)]\n        (if (> i n)\n          result\n          (recur b c (conj result c) (inc i)))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"(fn fib [x] \n   (if (<= x 2) \n     (vec (repeat x 1))\n     (let [sf (fib (dec x))]\n       (conj sf \n         (apply + (take-last 2 sf))))))","problem":26,"user":"52c1ede2e4b07a9af579236d"},{"code":"(fn fib [x]\n  (if (= x 1) [1]\n    (if (= x 2) [1 1]\n      (let [f (fib (- x 1)) rev_f (reverse f)]\n        (concat \n          f \n        [(+ (first rev_f) (second rev_f))]\n        ) \n      )\n    )\n  )\n)","problem":26,"user":"50013694e4b0678c553fc417"},{"code":"(fn fib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (flatten (list (fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)))))))))","problem":26,"user":"51f28a64e4b0210f90e7454e"},{"problem":26,"code":"#(map first (take %\n                 (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"555add85e4b0deb715856e4a"},{"code":"(fn [n]\n  (letfn [(fib [i]\n            (if (>= 2 i)\n              1\n              (+ (fib (dec i)) (fib (- i 2)))))]\n    (first (conj () (for [x (range 1 (+ n 1))] (fib x))))))","problem":26,"user":"525636dfe4b0541d1855ba0d"},{"code":"(fn fib [x] (map (fn fibn [x] (cond (= x 0) 0 (= x 1) 1 :else (+ (fibn (- x 1)) (fibn (- x 2))))) (range 1 (+ 1 x))))","problem":26,"user":"4eb83593535dd6025b394d1b"},{"problem":26,"code":"#(loop [a 1 b 1 count 0 acc []]\n    (if (= count %)\n      acc\n      (recur b (+ a b) (inc count) (conj acc a))))","user":"5576f299e4b05c286339e077"},{"problem":26,"code":"(fn fib [d]\n  ((fn fibRec [x y deg curList]\n     (cond (= deg 0)\n     \tcurList\n     :else\n        (fibRec y (+ x y) (- deg 1) (conj curList y))\n     ))\n   0 1 d []\n   ))","user":"548f3ee4e4b0e286459a1237"},{"code":"#(letfn                                                                                                                                    \n     [(fib [a b]                                                                                                                           \n        (lazy-seq (cons a (fib b (+ a b)))))]                                                                                              \n   (take (int %1) (fib 1 1)))","problem":26,"user":"4f601623e4b0defedf855fa3"},{"code":"#(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n   (take % (fib 1 1)))","problem":26,"user":"52a9406de4b0c58976d9ac43"},{"problem":26,"code":"#((fn [n x y acc]\n     (if (>= (count acc) n)\n       acc\n       (recur n y (+ x y) (conj acc x)))) % 1 1 [])","user":"5d672bd7e4b0db5d338d15f1"},{"code":"(fn [x] (take x (flatten (iterate (fn [pair] (let [n1 (+ (first pair) (second pair)) n2 (+ (second pair) n1)] [n1, n2])) [1 1]))))","problem":26,"user":"536f2faee4b0fc7073fd6e79"},{"problem":26,"code":"(fn\n        [t] \n        (rest (reduce (fn \n                  [x y]\n                  (conj x (reduce + (take-last 2 x)))) \n                [0 1]  \n                (range (- t 1)))))","user":"58c54e2ee4b021aa9917ed3a"},{"problem":26,"code":"(fn [n]\n (map first \n  (take n   \n   (iterate\n    (fn [[a b]] [b (+ a b)])\n    [1 1]))))","user":"5581747fe4b05c286339e0fa"},{"problem":26,"code":"(fn [n]\n  (loop [cnt (- n 1) acc [0 1]]\n    (if (< cnt 1) (subvec acc 1) (recur (dec cnt) (conj acc (+ (last acc) (-> acc reverse second)))))\n    )\n  )","user":"5a9ac061e4b0d174b936c7c1"},{"problem":26,"code":"(fn [i]\n  (rest\n   (reduce\n    (fn [r e] (conj r (+ (last r) (last (butlast r)))))\n    [0 1]\n    (take (dec i) (repeat 1))\n    )))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":26,"code":"(fn [x] (letfn [(worker [acc n] (if (>= (count acc) n)\n                                  (reverse (take n acc))\n                                  (let [[v1 v2 & rst] acc]\n                                    (recur (conj acc (+ v1 v2)) n))))]\n          (worker '(1 1) x)))","user":"53dad484e4b0e771c30254ac"},{"problem":26,"code":"(\n   fn [n] \n         (take n \n             (map first\n                 (iterate \n                     (fn [[a b]]\n  \t\t\t\t\t     [b (+ a b)]\n                      )\n                     [1 1]         \n                  )\n                 \n             )\n         )          \n)","user":"585d2c1fe4b0f14aab7c8797"},{"code":"(fn fib[x]\n  (if (= x 1)\n    [1]\n    (if (= x 2) \n      [1 1]\n      (conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (fib (- x 2)))))\n    )\n  )\n)","problem":26,"user":"50512f61e4b0b30bd8f4f83f"},{"code":"(partial \n (fn [acc n] \n   (if (= 0 n) (reverse acc) \n     (recur \n      (if (< (count acc) 2) \n        (conj acc 1) \n        (conj acc ( + (first acc) (second acc)))) (dec n)))) '())","problem":26,"user":"5273e006e4b03e8d9a4a7495"},{"code":"#(take % (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)))","problem":26,"user":"531f1e63e4b08068f379edc2"},{"code":"(fn n-fibs [n]\n  (map \n     first\n     (take n\n           (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fa09916e4b0dcca54ed6d4e"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fibo [a b]\n           (cons a (lazy-seq (fibo b (+ a b)))))\n         1 1)))","user":"5a172b76e4b0ff51aa4b31d4"},{"code":"(fn [n0]\n  (loop [n n0\n         num 0\n         lst [1]]\n    (if (= n 1)\n      lst\n      (recur \n        (dec n) \n        (last lst) \n        (conj lst (+ num (last lst)))))))","problem":26,"user":"4f90e238e4b0dcca54ed6c94"},{"problem":26,"code":"(fn [count] (loop [a 1 b 1 c count result []]\n    (if (zero? c)\n      result\n      (recur b (+ a b) (- c 1) (conj result a)))))","user":"591ed05de4b09b4ee5954c3a"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)] ) [1 1]))))","user":"5534795ee4b09218d5f44f9e"},{"problem":26,"code":"(fn [n]\n  (reverse (reduce (fn [b a] (conj b (+ (first b) (first (rest b)))))\n                   '(1 1) (range (- n 2)))))","user":"5ab96075e4b073f177442694"},{"problem":26,"code":"(fn [n]\n  (loop [nums [1]]\n    (if (= n (count nums))\n      nums\n      (recur (conj nums (apply + (take-last 2 nums)))))))","user":"5486e317e4b0e286459a11c0"},{"problem":26,"code":"#(take % ((fn fib ([] (fib 1 1)) ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"5515649fe4b055c2f668d4e3"},{"problem":26,"code":"(fn fib [n]\n  (cons 1 ((fn iter2 [x y np] \n    (if (<= np 0)\n      (list (+ x y))\n      (cons (+ x y) (iter2 y (+ x y) (- np 1))))) 0 1 (- n 2))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":26,"code":"#(nth (iterate \n      (fn [last-fib] (concat last-fib (list (apply + (take-last 2 last-fib)))))\n      '(1 1)) (- % 2))","user":"5492164ee4b0b312c081ff3e"},{"code":"(fn [n] (loop [count n\r\n               a 1\r\n               b 0\r\n              result []]\r\n          (if (= count 0)\r\n              result\r\n              (recur (dec count) (+ a b) a (conj result a)))))","problem":26,"user":"4ff8a89de4b0678c553fc39d"},{"problem":26,"code":"(fn [x] \n  (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","user":"56db8fbde4b0ea9b8538f80c"},{"code":"(fn [n] \n  (drop 1 (take ( inc n) \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"5142e808e4b0c172af7558c9"},{"problem":26,"code":"(fn [loopnox]\n  (loop [xfirstv 0\n         xsecondv 1\n         loopcnt 1\n         lst '(1)]\n    (if (= loopnox loopcnt)\n      (reverse lst)\n      (recur xsecondv\n             (+ xfirstv xsecondv)\n             (inc loopcnt)\n             (cons (+ xfirstv xsecondv) lst)))))","user":"5bed84b1e4b0a6d31fed2120"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib* [a b] (lazy-seq (cons a (fib* b (+ a b))))) 1 1)))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"code":"#(reverse ((fn fib [x] \n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (conj (fib (- x 1))\n        (+  (first (fib (- x 1)))\n            (second (fib (- x 1)))\n        )\n      )\n    )\n  )\n) %))","problem":26,"user":"52c7fce9e4b0c2d177d6212a"},{"problem":26,"code":"(fn fib [n]\n    (loop [n n f2 1 f1 1 fs (list)]\n      (if (zero? n) (reverse fs)\n        (recur (- n 1) f1 (+ f2 f1) (cons f2 fs)))))","user":"5839f079e4b089d5ab817d48"},{"code":"#(take % ((fn [] (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))","problem":26,"user":"4e725d20535d5021c1a8965e"},{"code":"(fn fib \n  ([n] (take n (fib 1 1)))\n  ([a b]\n    (lazy-seq (cons a (fib b (+ a b)\n)))))","problem":26,"user":"5020d033e4b0cb6ebc0a42fa"},{"problem":26,"code":"#(case \n     %2 0 \n        %\n        (recur\n          (conj % (if (next %) (apply + (take 2 (reverse %))) (+ 1)))\n          (- %2 1))) []","user":"542f574be4b0dad94371f2d0"},{"problem":26,"code":"(fn [x] \n  (loop [curNum 1         \n         acc [] ]    \n   (cond\n    (> curNum x) acc\n    (= 1 curNum) (recur 2 (conj acc 1))\n    (= 2 curNum) (recur 3 (conj acc 1))\n    :else (recur (inc curNum) (conj acc (+ (nth acc (- curNum 2)) (nth acc (- curNum 3)))))\n   )\n  )\n)","user":"5877e40ee4b01531a375eaab"},{"problem":26,"code":"(fn [x] (loop [arr [1 1]] (if (= x (count arr)) arr (recur (conj arr (+ (last arr) (last (butlast arr))))))))","user":"58d9772de4b0a4d5acaab63c"},{"problem":26,"code":"(fn [x]\n  (last\n  \t(take (dec x)\n  \t  (iterate #(conj % (apply + (take-last 2 %))) [1 1])\n  \t)\n  )\n)","user":"57d031d6e4b0bd073c202354"},{"problem":26,"code":"(fn [c]\n   (loop [x 1 y 1 z []]\n     (if (< (count z) c)\n       (do\n         (recur y (+ y x) (conj z (+ x))\n                )\n         )\n       z\n       )\n     ))","user":"54f3e216e4b050824f58f5cc"},{"code":"(fn fib\n  ([n] (cond\n       (= n 0) '()\n       (= n 1) '(1)\n       (= n 2) '(1 1)\n        :else (fib (- n 2) [1 1] 1 1)))\n  ([n acc x prex] (cond\n                   (= n 0) (seq acc)\n                   :else (let [i (+ x prex)] (recur (- n 1) (conj acc i) i x)))))","problem":26,"user":"50e9d21ce4b02d54280826cf"},{"problem":26,"code":"(fn fib\n  ([n]\n   \t(fib 0 1 n))\n  ([prev next n]\n   (if (= n 0)\n     '()\n     (cons next (fib next (+ prev next) (- n 1))))))","user":"59a90b2ae4b0bcf4e9a43aff"},{"code":"#(take %\r\n  (rest \r\n    ((fn rfib [a b]\r\n      (cons a (lazy-seq (rfib b (+ a b)))))\r\n      0 1)))","problem":26,"user":"4dee4a9c535d08e6dec9fe11"},{"problem":26,"code":"; tweaked from Programming Clojure\n(fn\n  [n]\n  (->> [1 1]\n       (iterate (fn [[f1 f2]] [f2 (+ f2 f1)]))\n       (map first)\n       (take n)))","user":"529735cbe4b02ebb4ef7503c"},{"code":"(fn fib [n]\n   (take n\n         (map first (iterate (fn [[a b]]\n                               [b (+ a b)]) [1 1]))))","problem":26,"user":"535056a7e4b084c2834f4adb"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first \n     \t\t(iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54764a8fe4b0c51c1f4d72a3"},{"code":"(fn [n] (\n         loop [ n n\n                acc '()]\n         \t(cond (= n 0) acc\n                (< (count acc) 2) (recur (dec n) (concat acc '(1)))\n                :else (recur (dec n) (concat acc (list (+ (last acc) (last (butlast acc)))))))))","problem":26,"user":"52394c03e4b0d705d026ef09"},{"code":"(fn [x]\n    (loop [acc [1 1] f1 1 f2 1 n (dec (dec x))]\n       (if (= n 0) \n           (seq acc)      \n        (recur (conj acc (+ f1 f2) ) f2 (+ f1 f2) (dec n)))))","problem":26,"user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [n]\n  (loop [p1 1 p2 1 cnt 2 r [1 1]]\n    (if (= cnt n)\n      (seq r)\n      (recur (+ p1 p2) p1 (inc cnt) (conj r (+ p1 p2))))))","problem":26,"user":"4ff505c8e4b0678c553fc364"},{"problem":26,"code":"(fn [num]\n  (->>\n    (iterate\n      (fn [[x y]]\n        [y (+ x y)]) [1 1])\n    (map first)\n    (take num)))","user":"56c44c34e4b05cc29241ee96"},{"problem":26,"code":"#(take % (drop 1 ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b)))))\n         0 1)))","user":"5fc4d277e4b06ffabd1ef72a"},{"problem":26,"code":"(fn [num]\n  (->> (iterate (fn [v]\n                  (conj v (apply + (take-last 2 v))))\n                [1 1])\n       (take (dec num))\n       (last)))","user":"50e90813e4b033b0e80d11e7"},{"problem":26,"code":"(fn first-n-fib [n]\n  ((fn [c a b seq]\n    (if (= c n)\n      seq\n      (recur (inc c) b (+ a b) (conj seq a))))\n   0 1 1 []))","user":"5688a01be4b0dcc4269f406d"},{"problem":26,"code":"(fn [x] (let [f (fn [n] (int (/ (- (Math/pow (+ 1 (Math/sqrt 5)) n) (Math/pow (- 1 (Math/sqrt 5)) n)) (* (Math/pow 2 n) (Math/sqrt 5)))))] (map f (range 1 (inc x)))))","user":"5a38f70be4b001c08efc0ca7"},{"code":"(fn fib [x] \n    (cond \n        (= x 1) [1]\n        (= x 2) [1 1]\n        :else\n            (let [prev (fib (dec x))]\n                (conj \n                    prev\n                    (+ (last prev) (second (reverse prev)))))))","problem":26,"user":"4fd8544be4b0dab7d829f390"},{"problem":26,"code":"(let [fib ((fn f\n             [x y]\n             (lazy-seq (cons y (f y (+ x y)))))\n           0 1)]\n  (fn [x] (take x fib)))","user":"5829d9f8e4b051871117bf4d"},{"problem":26,"code":"(fn [x] (letfn [(fib [x1 x2 result n]\n                  (if (zero? n)\n                    result\n                    (recur x2 (+ x1 x2) (cons x2 result) (dec n))))]\n           (reverse (fib 0 1 '() x))))","user":"5576961be4b05c286339e06f"},{"problem":26,"code":"(fn [n]\n  (loop [accum [1]\n         a     1\n         b     1\n         i     1]\n    (let [sum (+ a b)]\n      (if (= i n)\n        accum\n        (recur (conj accum b)\n               b\n               sum\n               (inc i))))))","user":"597f8984e4b0dbe32238d0bf"},{"code":"(fn [ n ]\n  (take n \n    (map second \n      (iterate \n        (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"50086dafe4b028e089d3518d"},{"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)] ) [1 1])))","problem":26,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn [n]\n  (map last (take n (iterate #(vector (last %) (+ (first %) (last %))) [0 1]))))","problem":26,"user":"50f10f7be4b06d9538fe211a"},{"problem":26,"code":"(fn [n]\n  (loop [x n s [1 1]]\n    (if (< (count s) x)\n        (recur x (conj s (reduce + 0 (take-last 2 s))))\n        (apply list s)\n        )))","user":"5d078e2de4b0cc9c915881fa"},{"problem":26,"code":"#(loop [n 1 l [0 1]]\n   (println (conj l (+ (l n) (l (dec n)))))\n   (if (>= n %)\n     (rest l)\n     (recur (inc n) (conj l (+ (l n) (l (dec n)))))\n   )\n)","user":"5bb23cf1e4b0a20761a2350a"},{"problem":26,"code":"(fn[n] (letfn [(fib[x] (if (< x 2) 1 (+ (fib (dec x)) (fib (- x 2)))))] (for [x (range n)] (fib x))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"problem":26,"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (loop [result [1 1]]\n      (if (= n (count result)) result\n          (let [a (last result)\n                b (last (butlast result))\n                c (+ a b)]\n            (recur (conj result c)))))))","user":"596aaeefe4b069c0a1a19808"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"55d70b8fe4b0e31453f64a9c"},{"code":"#(loop [i 0 j 0 k 1 acc ()]\n  (if (= i %)\n      (reverse acc)\n      (recur (+ i 1) k (+ j k) (cons k acc))))","problem":26,"user":"4ee3b586535d10e5ff6f5371"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) sequ [1 1]]\n    (if (zero? n)\n      sequ\n      (recur (dec n) (conj sequ (+ (last sequ) (last (butlast sequ))))))))","user":"5f3ab5ece4b004f08c61c52a"},{"code":"(fn fib [n]\n  (loop [s '(2 1 1) i (- n 3)]\n    (if (zero? i)\n      (reverse s)\n      (recur (conj s (+ (first s) (second s))) (dec i))\n    )\n  )\n)","problem":26,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn [c]\n    (->> [1]\n       (iterate #(->> %\n                      (take-last 2)\n                      (apply +)\n                      (conj % )))\n       (take c)\n       last))","problem":26,"user":"4f1b120f535d64f603146476"},{"code":"(fn [x] \n  (loop [n x i 0 fib []] \n    (if (< i n) \n      (if (or (= i 0) (= i 1)) \n        (recur n (+ i 1) (cons 1 fib)) \n        (recur n (+ i 1) (cons (+ (nth fib 0) (nth fib 1)) fib)) )\n      (reverse fib) )\n    )\n  )","problem":26,"user":"51b77c9be4b0d906fcd71d37"},{"code":"(fn fib2 [x] (if (= x 3)\r\n                  '(1 1 2)\r\n                  (if (= x 6)\r\n                      '(1 1 2 3 5 8)\r\n                      '(1 1 2 3 5 8 13 21))))","problem":26,"user":"503a5623e4b07a1917cc34d3"},{"problem":26,"code":"(fn [n] (cond (= n 0) nil (= n 1) (seq [1]) (= n 2) (seq [1 1]) :else ((fn mf [c s] (if (= s n) (seq c) (mf (conj c (+ (last c) (nth c (- (count c) 2) ))) (inc s)))) [1 1] 2)))","user":"5339b53fe4b0e30313ee6cac"},{"code":"(fn get-nth-fib [x]\n  (loop [fib_seq []]\n    (if (= x (count fib_seq))\n      fib_seq\n    (if (< (count fib_seq) 2)\n      (recur (conj fib_seq 1))\n      (recur (conj fib_seq (+ (first (reverse fib_seq)) (first (rest (reverse fib_seq))))))))))","problem":26,"user":"4f0f03ce535d0136e6c2232a"},{"problem":26,"code":"(fn fibo [n] (\n          if (= 2 n)\n              '(1 1)\n\t\t\t  (lazy-cat (fibo (- n 1))\n                              (take-last 1 (map + (fibo (- n 1)) (rest (fibo (- n 1)))))\n                              )\n))","user":"57395f32e4b0cd1946bd1070"},{"code":"#(take % ((fn fib [a b] (lazy-seq (cons b (fib b (+ a b))))) 0 1))","problem":26,"user":"4dad51418e77d6ed55f12a44"},{"code":"(fn [x] (take x (filter (fn [x] (> x 0)) (map first (iterate (fn [[x y]] [y (+ x y)]) [0 1])))))","problem":26,"user":"50ba714ae4b03e68e4411c83"},{"code":"(fn [n]\n  (loop [fib_n n cur 0 next 1 flist '()]\n    (if (= fib_n 0)\n      flist\n      (recur (dec fib_n) next (+ cur next) (concat flist (list next))))))","problem":26,"user":"4f61be97e4b0defedf855fc5"},{"problem":26,"code":"#(loop [u %1 r-1 [1] r-2 [1 1]]\n    (cond\n      (= u 1) r-1\n      (= u 2) r-2\n      :else (recur (- u 1) r-2 (conj r-2 (+ (last r-2) (last r-1))))))","user":"5a3c5c54e4b001c08efc0ce3"},{"problem":26,"code":"#(map (fn ff [n] (if (< n 2) 1 (+ (ff (dec n)) (ff (- n 2))))) (range 0 %))","user":"57d8a1dee4b0bd073c2023ee"},{"problem":26,"code":"(fn fibonacci-seq [n]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n         (take n (fib 0 1))) )","user":"59fa0bb6e4b0ca45a743a352"},{"problem":26,"code":"(fn [num] (take num ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"591610d4e4b09b4ee5954b7e"},{"code":"(fn [n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"51c73959e4b07ef393169e3e"},{"code":"(fn fib [length]\n  (cond\n   (<= length 0) []\n   (<= length 2) (vec(take length [1 1]))\n   :else (let [sub (fib (- length 1))]\n           (conj sub (reduce + (take-last 2 sub))))))","problem":26,"user":"4fc4f347e4b081705acca35d"},{"code":"(fn [initial-x]\n    (loop [coll [1 1] x initial-x]\n        (if (< x 3)\n            coll\n            (recur \n                (conj coll (+ (last coll) (last (butlast coll)))) \n                (dec x)))))","problem":26,"user":"5038381ce4b0803468ea2c6b"},{"code":"(fn [count]\n\t(take count ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n                 1 1)))","problem":26,"user":"5204f2b1e4b0bf4f1882c7f5"},{"code":"(fn fibo  ; (1-я строка)\n  ([] ; (2-я строка)\n    (concat [1 1] (fibo 1 1))) ; (3-я строка)\n  ([a b] ; (4-я строка)\n    (let [n (+ a b)]                    ; (5-я строка)\n      (lazy-seq                         ; (6-я строка)\n        (cons n (fibo b n))))) ; (7-я строка)\n  ([n]\n    (take n (fibo))\n    ))","problem":26,"user":"516bc02ce4b005fd0cdf85c5"},{"problem":26,"code":"(fn [x]\n  (loop [i 0\n         result []]\n    (if (= i x)\n      result\n      (recur\n       (inc i)\n       (conj result (if (< i 2)\n                      1\n                      (+ (get result (- i 1))\n                         (get result (- i 2)))))))))","user":"55495318e4b0a04f79299566"},{"problem":26,"code":"(fn[x](->(take x\n (iterate \n #(conj %(+  (last %)\n      (last (butlast %))) )\n   [0 1]) ) last rest\n))","user":"552800d7e4b0ffed3738f93a"},{"code":"#(\n  loop [f [1 1] , i 2, a 1, b 1]\n    (if (< i %) \n      (recur (conj f (+ a b)), (inc i), b, (+ a b))\n      f\n    )\n  )","problem":26,"user":"51eca2ace4b069f463c22cd0"},{"problem":26,"code":"(fn fibo [limit]\n  (let [fib (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take limit fib)))","user":"5877a553e4b01531a375eaa5"},{"code":"(fn [n]\n  (loop [count n\n         total []]\n      (if (= count 0)\n        (reverse total)\n        (recur (dec count) (apply (fn\n                                    ([] [1])\n                                    ([_] [1 1])\n                                    ([a b & more] (conj more b a (+ a b)))) total)))))\n\n;; #(->>  [1 1]\n;;        (iterate (fn [[a b]] [b (+ a b)]))\n;;        (map first)\n;;        (take %))","problem":26,"user":"503f4759e4b00d1a725ff2a9"},{"code":"(fn [x]\n   (loop [a 1 b 1 n x fib []]\n     (if (= n 0)\n       fib\n       (recur b (+ a b) (dec n) (conj fib a))\n       )\n     ))","problem":26,"user":"518279abe4b0353c468deb65"},{"problem":26,"code":"(fn [n] (letfn [\r\n               (fib [n]\r\n                 (if (or (= n 0)\r\n                         (= n 1))\r\n                     1\r\n                     (+ (fib (- n 1)) (fib (- n 2)))))]\r\n(map fib (range n))))","user":"505a0a15e4b03d2efce48c5a"},{"problem":26,"code":"(fn [n] (drop 1 (take (inc n) (map first\n  (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n))))","user":"54d0c32de4b0e8a36923e5cf"},{"code":"#(map \n  (fn fib [x]\n    (cond (= 1 x) 1\n          (= 2 x) 1\n          :else\n          (+ (fib (- x 1)) (fib (- x 2)))))\n  (range 1 (+ 1 %)))","problem":26,"user":"4ffe4d43e4b0678c553fc3f1"},{"code":"#(map (fn fibo [n] \n        (if (< n 2) \n          1 \n          (+ (fibo (- n 1)) (fibo (- n 2))))) \n      (range %))","problem":26,"user":"5210ac52e4b080a8d9b9d63e"},{"problem":26,"code":"(fn [laenge] \n\t(loop [cnt (dec laenge)\n\t\tResult '(1 0)]\n\t\t(if (zero? cnt)\n\t\t\t(rest (reverse Result))\n\t\t\t(recur (dec cnt) (conj Result (+ (first Result) (second Result)))))))","user":"5b35de7be4b02d533a91bb97"},{"code":"(fn [n] (loop [m (- n 2)\n  f [1 1]]\n    (if (= m 0)\n(seq f)\n(recur (- m 1) (conj f (+ ((comp last butlast) f) (last f)))))))","problem":26,"user":"4fec550de4b0681fd128dca6"},{"problem":26,"code":"#(take % ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n       )","user":"56a7ef10e4b07966d5a8a067"},{"problem":26,"code":"(fn fib [a b i]\n  (if (= i 0) ()\n  (conj (fib b (+ a b) (- i 1))\n  (+ a b)))) 1 0","user":"5b4b58f2e4b02d533a91bc9c"},{"code":"(fn [x] (\r\n\t(fn fibo [a b l n] \r\n\t\t(if (== n 0)\r\n\t\t\tl\r\n          \t(fibo b (+ a b) (conj l (+ a b)) (- n 1))))\r\n          \t\t1 1 [1 1] (- x 2)\r\n \t))","problem":26,"user":"510a6bece4b06956752d35af"},{"problem":26,"code":"(fn [total]\n  (loop [i 1\n         res [1]]\n    (if (>= i total)\n      res\n      (recur (+ 1 i)  (conj res (reduce + (nthrest res (- (count res) 2))))))))","user":"53844970e4b06839e8705eef"},{"problem":26,"code":"(fn [s i]\n  (if (= i (count s))\n    s\n    (recur (conj s (reduce + (take-last 2 s))) i)))\n[1 1]","user":"58247423e4b051871117bec5"},{"problem":26,"code":"#(take %\r\n  ((fn fib\r\n    ([] \r\n      (fib 1 1))\r\n    ([l1 l2] \r\n      (lazy-seq (cons l1 (fib l2 (+ l1 l2))))))))","user":"58cbdc3be4b03c36ff7e5856"},{"problem":26,"code":"(fn f [n]\n  (condp = n\n    1   [1]\n    2   [1 1]\n    (conj (f (dec n)) (+ (peek (f (- n 2))) (peek (f (dec n)))))))","user":"55377460e4b09218d5f44fc9"},{"code":"#(\n   loop [n %1 a 1 b 1 lst [1 1]] \n\t (if (= n 2) \n\t     lst\n\t   (recur (dec n) b (+ a b) (conj lst (+ a b))))\n\t \n)","problem":26,"user":"52aa16d1e4b0c58976d9ac5a"},{"code":"(fn [a]\r\n (map\r\n  (fn fib [x]\r\n    (cond (= x 1) 1\r\n        (= x 2) 1\r\n        :else   (+ (fib (- x 2)) (fib (- x 1)) )\r\n    )\r\n  )\r\n  (range 1 (+ 1 a))))","problem":26,"user":"508eea7de4b0706b2ed3ef8e"},{"problem":26,"code":"(fn f [n]\n  (->> [0 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take (inc n))\n       rest))","user":"60537cd1e4b04c8f2157d152"},{"code":"#(reverse ((fn fibo [n]\n                   (case n\n                     1 '(1)\n                     2 '(1 1)\n                     (let [lst (fibo (- n 1))]\n                       (cons (+ (first lst) (first (rest lst))) lst)))) %))","problem":26,"user":"517a0d1fe4b01aacecbecbe8"},{"problem":26,"code":"#(loop [n % res '(1 1)]\n   (if (> n 2)\n     (recur (dec n) (conj res (+ (first res) (second res)))) (reverse res)))","user":"5d21b91ee4b02ea6f0fb69e9"},{"code":"#(take %1 (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [n]\n  (loop [counter 1\n         result []]\n    (if (> counter n)\n      result\n      (let [first (- counter 2)\n            second (- counter 1)\n            next (condp = counter \n                  1 1\n                  2 1\n                  (reduce + (take-last 2 result)))]\n        (recur (inc counter) (conj result next))))))","problem":26,"user":"50b61e7ae4b0e3a8b79a9a68"},{"code":"(fn fact [n]\n  (letfn [(fact2 [solution n progress]\n            (cond (= n 1) (list 1)\n                  (= n 2) (list 1 1)\n                  (< progress n) (fact2\n                                  (concat solution (list (+ (last solution) (last (butlast solution)))))\n                                  n\n                                  (inc progress))\n                  true solution))]\n    (fact2 '(1 1) n 2)))","problem":26,"user":"4ea01955535d7eef3080729f"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1) '(1)\n    (if (= x 2) '(1 1)\n      (loop [n 2 result '(1 1)]\n        (if (= n x)\n          (reverse result)\n          (recur (inc n) (conj result (+ (first result) (second result)))))))))","user":"572b5916e4b0cd1946bd0f39"},{"problem":26,"code":"#(take % ((fn fib \n                  [a b]\n                  (lazy-seq (cons a (fib b (+ a b)))))\n                1 1))","user":"5e054752e4b0a607a9a45d78"},{"problem":26,"code":"#(take % (apply concat (iterate (fn [[x y]] [(+ x y) (+ x y y)]) [1 1])))","user":"56b2573ce4b0982f16b37e02"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (loop [n 2 f [1 1] a 1 b 1]\n            (if (= n x)\n              f\n              (recur (inc n) (conj f (+ a b)) b (+ a b))))))","user":"5998643de4b07157cc8daae3"},{"problem":26,"code":"(fn [l] (loop [accum [1 1]\n              i     2]\n         (if (= i l)\n           accum\n           (recur (conj accum\n                        (reduce + (take-last 2 accum)))\n                  (inc i)))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":26,"code":"(letfn [(f [n]\n  (if (= n 2)\n    [1 1]\n    (\n     #(conj\n       %\n       (\n        (fn [L] (+ (first L) (nth L 1)))\n        (reverse %)\n        ))\n     (f (dec n))\n     )\n           ))] f)","user":"570005efe4b08d47c97781c4"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (let [prev (fib (- x 1))]\n        (conj prev (+ (last prev) (last (drop-last prev))))))))","user":"54d03026e4b018d918be98de"},{"problem":26,"code":"(fn [num] (loop [previous-val 1\n                 current-val 1\n                 next-val (+ previous-val current-val)\n                 coll [1 1]]\n           (if (< num (count coll))\n             (take num coll)\n             (recur current-val next-val (+ current-val next-val) (conj coll next-val)))\n           ))","user":"56689103e4b04acd4f672df0"},{"problem":26,"code":"#(\n     loop [l '(1 1) n %]\n     (if (= n 2)\n       (reverse l)\n       (recur (conj l (+ (first l) (second l)))  (dec n))\n       )\n     )","user":"5d99dc47e4b0d3f9b434ad42"},{"problem":26,"code":"(fn [x]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b, (+ a b)]))\n       (map first)\n       (take x)))","user":"5c376638e4b0d62ef62d9f74"},{"code":"(fn fibonacci [n]\r\n  (letfn [(fibonacci- [n a b acc]\r\n            (if (zero? n)\r\n              acc\r\n              (recur (dec n) b (+ a b) (conj acc a))))]\r\n    (fibonacci- n 1 1 [])))","problem":26,"user":"4e7e4a1f535db169f9c7970c"},{"problem":26,"code":"#(take % ((fn fib [x y] (cons x (lazy-seq (fib y (+ y x))))) 1 1))","user":"5462dc5ae4b01be26fd746b9"},{"code":"#(loop [num %, lst0 '(0), lst1 '(1)]\n  (if (= 0 num) lst0\n    (recur\n      (- num 1),\n      lst1,\n      (concat\n        lst1\n        (list (+ (last lst0) (last lst1)))))))","problem":26,"user":"5099198ce4b0cae2931060ac"},{"code":"(fn [n]\n  (take n (map first \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":26,"code":"(fn [x]\n    (map (fn fib\n      [x]\n      (if (or (= x 0)\n              (= x 1))\n              1\n             (+ (fib (- x 1)) (fib (- x 2))))) (range x)))","user":"51b01309e4b0c53cf2e68a57"},{"code":"#(loop [coll [1]\n       x 1]\n  (if (>= (count coll) %)\n    (take % coll)\n    (recur (conj coll x) (+ x (last coll)))))","problem":26,"user":"51f66891e4b06ff1c25c52c1"},{"code":"#(map\n  (fn fibo [n]\n    (if (< n 2)\n      1\n      (+ (fibo (- n 1)) (fibo (- n 2))))) (range %))","problem":26,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn fi [x]\n   (cond\n    (<= x 0) [0]\n    (= x 1) [1]\n    :else\n    (let [a (fi (- x 1))\n           b (fi (- x 2))]\n       (conj a (+ (last a) (last b)))\n     )\n    ))","problem":26,"user":"50392966e4b088a6a14ca764"},{"problem":26,"code":"#(take % (map peek (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"554b8572e4b0a04f79299589"},{"problem":26,"code":"(fn fibo\n  ([pos] (fibo (- pos 2) '(1 1)))\n\t([pos col] \n\t(if (zero? pos)\n\t\t(reverse col)\n\t\t(recur (dec pos) (cons (+ (first col) (second col)) col)))))","user":"56f4976ce4b046a417f9205f"},{"code":"(fn [value] (loop [n value f1 0 f2 1 lst '()]\n  (if (zero? n)\n    (sort lst)\n    (recur (dec n) f2 (+ f1 f2) (into (list f2) lst)))))","problem":26,"user":"4f294dffe4b0d6649770a024"},{"code":"(fn fib [n] (reverse((fn rfib [n fib1 fib2 alist](if (<= n 2) alist (rfib (- n 1) fib2 (+ fib1 fib2) (conj alist (+ fib1 fib2))))) n 1 1 '(1 1))))","problem":26,"user":"4e6a79ca535d8ccf87e9feeb"},{"problem":26,"code":"(fn[x] \n  (take x\n    ((fn fib[a b]\n       (cons a (lazy-seq (fib b (+ a b)))))\n      \n     1 1)          \n  )\n)","user":"53c2409de4b00fb29b22126c"},{"problem":26,"code":"(fn [n]\n  (loop [res [1]\n         n1 0\n         n2 1\n         nx (- n 1)]\n    (if-not (> nx 0)\n      res\n      (recur (conj res (+ n1 n2)) \n             n2\n             (+ n1 n2)\n             (dec nx)\n             )\n    )))","user":"5da07698e4b000c986472bd3"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib4 [a b] (lazy-seq (cons a (fib4 b (+ a b)))))]\n    (take n (fib4 1 1))))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn [x] \n  (take x (reverse (reduce (fn [fib x] (cons (reduce + (take 2 fib)) fib)) [1 1] (range x)))))","problem":26,"user":"52278a79e4b0186687e23a51"},{"problem":26,"code":"(fn fib\n  ([m] (fib 1 1 2 m))\n  ([a b c m] \n   (if (= m c)\n\t (list a b)\n     (cons a (fib b (+ b a) (inc c) m)))))","user":"55dd0aebe4b050e68259b3bf"},{"code":"#(take % ((fn fib [a b] \n            (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":26,"code":"(fn [n] \n  (take n \n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))  ))","user":"52c911dde4b0c2d177d6213a"},{"code":"(fn [n] \n  (take n \n    (map second \n      (map \n        (fn [x] \n          (reduce \n            (fn [v _] [(second v) (reduce + v)]) \n            [0 1] \n            (range x)\n          )\n        )\n        (range)\n      )\n    )\n  )\n)","problem":26,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":26,"code":"(fn [n] (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"567b903be4b05957ce8c61a8"},{"problem":26,"code":"#(take % ((fn fib [n1 n2]\n            (cons n2 (lazy-seq (fib (+ n1 n2) n1))))\n          1 1))","user":"5a9829e5e4b0d174b936c788"},{"code":"(fn [n]\n    (loop [cnt n fibseq '(1 0)]\n      (if (> 2 cnt)\n         (-> fibseq reverse rest)\n        (recur (dec cnt) (cons (+ (first fibseq) (nth fibseq 1)) fibseq))\n        )))","problem":26,"user":"4eef1164535d305ff5cb7f19"},{"problem":26,"code":"(fn fibon [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    ((fn fibonrec [number x]\n       (if (= 0 number)\n        x\n        (fibonrec (dec number) (conj x (reduce + (take-last 2 x))))))\n      (+ n -2)\n      [1 1])))","user":"56548fd3e4b0f9d632dd8485"},{"problem":26,"code":"(fn [n]\n    (loop [i '(1 1)]\n      (if (= n (count i))\n        (reverse i)\n        (recur\n         (conj i (apply + (take 2 i)))))))","user":"50a3bf08e4b0ceace084d495"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         result [1 1]]\n    (if (> n 2)\n      (recur (dec n) (conj result (+ (nth result (- (count result) 2)) (last result))))\n      result)))","user":"53dfe311e4b0d874e779ae47"},{"code":"#(loop [seq [1] cnt (- % 1)] (if(zero? cnt) seq (recur (conj seq (reduce + (take-last 2 seq))) (dec cnt))))","problem":26,"user":"4e721857535d5021c1a8965a"},{"code":"(fn [n] \n  (let [fib-seq ((fn temp [a b] \n                    (lazy-seq (cons a (temp b (+ a b)))))\n                    1 1)]\n    (take n fib-seq)))","problem":26,"user":"527c166de4b03e8d9a4a75b3"},{"code":"; Lazy seq--the progression of implementations at \n; http://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci\n; rewards study\n#(take % ((fn f [a b] (lazy-seq (cons a (f b (+ a b))))) 1 1))\n\n; 4lolz\n; #(take % [1 1 2 3 5 8 13 21])\n\n; Closed form\n;#(let [φ (/ (+ 1 (Math/sqrt 5)) 2),\n;       fib (fn [n] \n;             (Math/round\n;              (/ (- (Math/pow φ n) (Math/pow (- 1 φ) n))\n;                 (Math/sqrt 5))))\n;       ]\n;   (map fib (range 1 (inc %))))","problem":26,"user":"50d4c626e4b09cc622d65a70"},{"problem":26,"code":"(fn [x] (reduce (fn [arr, item]\n\t(if (<= item 1)\n    \t(conj arr item)\n        (conj arr (reduce + (take-last 2 arr))))\n    )\n    []\n    (range 1 (inc x))))","user":"5c6d0e51e4b0fca0c1622735"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [in acc]\n               (if (= in (- n 2))\n                 acc\n                 (fib (+ 1 in)\n                      (cons (+ (first acc) (second acc)) acc))))]\n    (reverse (fib 0 '(1 1)))))","user":"551c6bcee4b07993ea3788df"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1]) ))","user":"512b07f7e4b078b06821febb"},{"problem":26,"code":"(fn fibto \n   ([x] (fibto x '()))   \n   ([x y]\n      (cond (= (count y) x) (reverse y)\n            (empty? y) (fibto x '(1 1))\n            true (fibto x (cons (+ (first y) (second y)) y)))\n    ))","user":"579b24d0e4b05b1deef9adee"},{"code":"(fn fib [max]\r\n  (loop [a 1, b 1, acc [1]]\r\n    (if (>= (count acc) max)\r\n      acc\r\n      (recur b (+ a b) (conj acc b)))))","problem":26,"user":"4dbde951535d020aff1edf53"},{"problem":26,"code":"#(map (fn fib [x] \n\t\t(cond (= x 1) 1 \n\t\t(= x 2) 1 \n\t\t:else (+ (fib (- x 2)) (fib (- x 1))))) \n \t  (range 1 (inc %)))","user":"59fa5773e4b0ca45a743a35e"},{"problem":26,"code":"(fn \n  [n]\n  (loop [i n a 0 b 1 col []]\n    (if (= i 0)\n      (list* col)\n      (recur (dec i) b (+ a b) (conj col b))\n      )\n    )\n  )","user":"58745926e4b01531a375ea50"},{"problem":26,"code":"#(loop [cur 0\n        limit %\n        fib []]\n   (if (> cur limit) fib\n\t(case cur\n\t\t0 (recur 1 limit [])\n\t    1 (recur 2 limit [1])\n\t    2 (recur 3 limit [1 1])\n     \t(let [a (get fib (- (count fib) 1))\n              b (get fib (- (count fib) 2))]\n\t\t\t(recur (+ cur 1) limit (conj fib (+ a b)))))))","user":"54c5e36ee4b045293a27f626"},{"problem":26,"code":"(fn fib-seq\n  ([n]\n     (take n (fib-seq 0 1)))\n  ([a b]\n     (lazy-seq\n      (cons b (fib-seq b (+ a b))))))","user":"6059d9c8e4b07e92fa001ad0"},{"code":"#((fn f [r n x y]\n    (if (= n %)\n      r\n      (f (conj r x) (+ n 1) y (+ x y))))\n  [] 0 1 1)","problem":26,"user":"53500869e4b084c2834f4ad3"},{"code":"(fn [x]\n(let [foo\n(fn foo [x]\n  (cond\n   (<= x 2) 1\n   :else (+ (foo (dec x)) (foo (- x 2)))))\n   ]\n\n   (map foo (range 1 (inc x))))\n   )","problem":26,"user":"50b65966e4b0a86f8358ca6c"},{"problem":26,"code":"#(loop [result []\n        c %]\n  (if (= % (count result))\n    result\n    (recur (conj result (if (<= (count result) 1)\n                          1\n                          (apply + (take 2 (reverse result)))))\n           (dec c))))","user":"502ea967e4b06efe12e8cc76"},{"problem":26,"code":"(fn fibo [n] (take n(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5683e0c6e4b0945ebc182aa3"},{"problem":26,"code":"(fn fibo-nums [n]\n  (cond\n  (= n 1) '(1)\n  (= n 2) '(1 1)\n  :else (loop [a 1 b 1 n (- n 2) fibos '[1 1]]\n          (if (= n 0)\n            fibos\n            (recur b (+ a b) (dec n) (conj fibos (+ a b)))))))","user":"5c6314c5e4b0fca0c1622658"},{"code":"(fn fib [n] (take n (  (fn fibr [a b] (cons a (lazy-seq (fibr b (+ a b))))) 1 1)  ))","problem":26,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":26,"code":"(fn [n]\n  (reverse (case n\n             0 ()\n             1 '(1)\n             2 '(1 1)\n             (loop [result '(1 1)\n                    counter 2]\n               (if (= counter n)\n                 result\n                 (recur (conj result (+ (first result) (first (rest result))))\n                        (inc counter)))))))","user":"5fe25678e4b05ac5b16ea175"},{"problem":26,"code":"#(loop [seq '(1 1) i (- % 2)]\n   (if (zero? i)\n     (reverse seq)\n     (recur (conj seq (apply + (take 2 seq))) (dec i))))","user":"53e76363e4b036ad0777e47b"},{"problem":26,"code":"(fn fib-seq [x]\n  (map \n    (fn fib [n] (if (< n 3) 1 (+ (fib (- n 1)) (fib(- n 2)))))\n    (range 1 (inc x))))","user":"53ef78bee4b0742d9025b0cd"},{"problem":26,"code":"(fn fibnext \n([index coll]\n(if (>= (count coll) index)\n(reverse coll)\n(let [[lst blst] coll]\n    (fibnext index (conj coll (+ lst blst))))\n))\n([n] (fibnext n '(1 1)))\n)","user":"5a7f77fae4b00b71e582a041"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (> n 2) (let [old (fib (dec n))]\n      (conj old (+ (last (butlast old)) (last old))))\n    (= n 2) [1 1]\n    (= n 1) [1]))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":26,"code":"#(loop [result [1]\n           x 0\n           y 1\n           len (- %1 1)]\n      (if (zero? len)\n        result\n        (recur (conj result (+ x y)) y (+ x y) (dec len))))","user":"5840c068e4b089d5ab817df8"},{"problem":26,"code":"(fn\n  [x]\n  (cond\n    (= x 0) []\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (loop \n            [result [1 1]\n             counter (- x 2)]\n            (if (= counter 0) result\n                              (recur (conj result (+\n                                                    (last result)\n                                                    (nth result (- (count result) 2))))\n                                     (- counter 1))))))","user":"55ad2379e4b03311e7b732a1"},{"problem":26,"code":"#(map \n (fn fib [n]\n  (cond\n   (= n 1) 1 \n   (= n 2) 1\n   :else (+ (fib (- n 1)) (fib (- n 2)))))\n (range 1 (inc %)))","user":"5b77d3c8e4b047b03b2036f1"},{"problem":26,"code":"#(loop [size %\n       i 2\n       result [1 1]]\n  (if (< i size)\n    (recur size (+ i 1) (conj result (+ (last (drop-last result)) (last result))))\n    (sort result))\n)","user":"56e93576e4b04a395b9a03f6"},{"code":"(fn [n]\n  (if (= 1 n) \n    '(1)\n    (if (= 2 n) \n      '(1 1)\n      (loop [act 3\n            fib [1 1]]\n        (if (= act n)\n          (conj fib (+ (last fib ) (last (butlast fib))))\n          (recur\n            (inc act)\n            (conj fib (+ (last fib ) (last (butlast fib))))\n        ))))))","problem":26,"user":"5027bbe3e4b01614d1633fef"},{"code":"#(loop\n   [f0 1 f1 1 res [] n %1]\n   (if (< n 1)\n     res\n     (recur\n      f1\n      (+ f0 f1)\n      (conj res f0)\n      (dec n)\n      )\n     )\n   )","problem":26,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":26,"code":"#(loop [a 0\n        b 1\n        n %\n        vs []]\n   (if (= n 1)\n     (conj vs b)\n     (recur b (+ a b) (dec n) (conj vs b)))\n )","user":"5ce41d1be4b0a17bb84e2b50"},{"code":"(fn [n]\n  (letfn [(fib [i]\n               (if (<= i 2)\n                 1\n                 (+ (fib (dec i)) (fib (- i 2)))))]\n    (map fib (take n (iterate #(inc %) 1)))))","problem":26,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"(fn [x]\n  (loop [i 0 col [1 1]]\n    (cond (= i (- x 2)) col\n          :else (recur (inc i) (conj col (+ (nth col i) (nth col (inc i))))))))","problem":26,"user":"515b28b6e4b0a102a3e5262c"},{"code":"(fn [n]\n  (loop [n n\n         fib '(1 1)]\n    (if (> n 2)\n      (recur (dec n) (conj fib (+ (first fib) (second fib))))\n      (reverse fib))))","problem":26,"user":"50eb4c32e4b0346a3e988cbf"},{"problem":26,"code":"(fn fib\n  ([num] (take num (fib 1 1)))\n  ([curr next] (lazy-seq (cons curr (fib next (+ curr next))))))","user":"5d1c14cde4b02ea6f0fb698a"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n          (lazy-seq (cons a (fib b (+ a b)))))\n          1 1)\n        )\n  )","user":"5d68bfd0e4b0db5d338d1602"},{"problem":26,"code":"(fn [x] (take x ((fn rfib [a b] \n         (cons a (lazy-seq (rfib b (+ a b)))))\n      1 1)))","user":"5875f2c5e4b01531a375ea77"},{"code":"#(loop [[a b & _ :as fib] '(1 1)] \n  (if (= (count fib) %) \n    (reverse fib) \n      (recur (cons (+ a b) fib))))","problem":26,"user":"4ea1c349535d7eef308072ba"},{"problem":26,"code":"(fn [n] (loop [x n sq []] (if (<= x 0) sq (if (< (- n x) 2) (recur (- x 1) (conj sq 1)) (recur (- x 1) (conj sq (+ (nth sq (- (- n x) 1)) (nth sq (- (- n x) 2)))))))))","user":"5a527c16e4b05d388ecb6bff"},{"problem":26,"code":"#(take %\n  ((fn fib\n     ([] (fib 1 1))\n     ([a b] (lazy-seq (cons a (fib b (+ a b))))))) )","user":"58134ba8e4b0f478707a060b"},{"problem":26,"code":"#(take % \n       (map last \n            (iterate \n             (fn [[x y]] [y (+ x y)])\n             [0 1]\n             )\n       )\n)","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn f [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52b0323ee4b0c58976d9acc6"},{"code":"(fn [x] \n  (take x \n    (map first \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    )\n  )\n)","problem":26,"user":"4f85a75ce4b033992c121c48"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [1 1] last-index 1]\n    (if (= last-index (dec n)) (reverse (into '() fibs))\n      (recur (conj fibs (+ (nth fibs last-index)\n                           (nth fibs (dec last-index))))\n             (inc last-index)))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn [x] \n  (map \n    (fn fib [n] \n      (if (> n 1) \n        (+ (fib (- n 1)) (fib (- n 2))) \n        1)) (range x)))","problem":26,"user":"504f3f13e4b0a02f9cffde60"},{"problem":26,"code":"(fn fib [n] (if (< n 2) '(1)\n          (if (< n 3) '(1 1)\n            \n          \t(let [a (fib (dec n))]\n              (concat a (list (+ (last a) (last (butlast a))))))\n            )\n                )\n  )","user":"5466199ce4b01be26fd746e2"},{"problem":26,"code":"(fn [x] (reduce #(conj %1 ((fn fib [n]\n                              (if (< n 2)\n                                n\n                                (+ (fib (- n 2)) (fib (- n 1)))))\n                            %2)) [] (range 1 (+ x 1))))","user":"564652b1e4b0284900eef611"},{"problem":26,"code":"#(take % ((fn fib ([] (fib 1 1)) ([x y] (cons x (lazy-seq (fib y (+ x y))))))))","user":"5ef381a3e4b07c55ae4a053c"},{"code":"(fn fib ([n] (if (zero? n) '() (reverse (fib (dec n) '(1)))))\n    ([n coll]\n      (if (zero? n)\n          coll\n          (recur (dec n)\n                 (conj coll (reduce + (take 2 coll)))))))","problem":26,"user":"4fab0b6be4b081705acca20c"},{"problem":26,"code":"#(loop [vec [1]]\n    (if (= (count vec) %)\n      vec\n      (recur\n       (conj vec\n             (reduce + (take-last 2 vec))))))","user":"5c4c74efe4b0f9f7a8770e76"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))                ))","user":"5eb84ef4e4b00a66d4a95244"},{"code":"(fn [length]\n  (loop [fib [1 1] len (- length 2)]\n    (if (> len 0)\n      (recur (cons (+ (first fib) (second fib)) fib) (dec len))\n      (reverse fib))))","problem":26,"user":"525a643be4b0cb4875a45cf1"},{"problem":26,"code":"(fn spotfib [n]\n   (cond\n    (= n 0) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (let [begin (spotfib (dec n))]\n            (concat begin (list (reduce + (take 2 (reverse begin))))))))","user":"60882700e4b0ae75613dcedf"},{"problem":26,"code":"(fn fibs [n]\n  (letfn [(fib [i]\n            (if (< i 3)\n              1\n              (+ (fib (dec i)) (fib (dec (dec i))))))]\n    (map fib (range 1 (inc n)))))","user":"5e60a0cae4b0fd0acd158689"},{"problem":26,"code":"(fn [rng]\n      (let [fs (fn f [a b] \n            (lazy-seq \n             (cons a (f b \n                         (+ a b)))))]\n      (take rng (fs 1 1))))","user":"52fbbadde4b047fd5583700f"},{"problem":26,"code":"(fn [n]\n  (loop [numbs '(1) acc 1]\n    (if (= acc n)\n      numbs\n      (recur\n        (concat numbs (vector (reduce + (take-last 2 numbs)))) (inc acc) ))))","user":"6040f595e4b0d5df2af2232f"},{"code":"#(map (fn f [n] (cond (= n 1) 1\n                  (= n 0) 0\n                  :else (+ (f (- n 1)) (f (- n 2)))\n            )\n) (range 1 (+ % 1)))","problem":26,"user":"50a3f23ae4b08bbd0eb4ed2f"},{"code":"(fn lala [n] (loop [x '(1 1)] (if (= (count x) n) (reverse x) (recur (conj x (apply + (take 2 x)))))))","problem":26,"user":"4f85d497e4b033992c121c4b"},{"problem":26,"code":"#(loop [x %\n        output [1 1]]\n   (if (< x 3)\n     \toutput\n     \t(recur (- x 1) (conj output\n                             (+ (last output)\n                                (last (butlast output)))))))","user":"55f344afe4b06e875b46ce5a"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    '[1 1]\n    (let [f (fib (- n 1))]\n      (conj f (+ (last f) (second (reverse f)))))))","user":"56f53962e4b046a417f9206c"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[x y]] [y (+' x y)]) [1 1]))))","user":"56481722e4b0284900eef628"},{"problem":26,"code":"#(loop [n (dec %)\n           x [0 1]]\n   (if (> n 0)\n     (recur (dec n) (conj x (+ (last x) (second (reverse x)))))\n     (rest x)))","user":"5535d34be4b09218d5f44fb0"},{"problem":26,"code":"(fn fibs [end]\n  (letfn [(fib [x]\n \t\t\t (if (< x 2)\n    \t\t\tx\n\t\t\t    (+ (fib (- x 1))\n\t\t    \t   (fib (- x 2))\n \t\t   \t   )))]\n    (map (comp fib inc) (range 0 end))))","user":"56205609e4b064ca9f4b16df"},{"code":"#(reverse\n   ((fn [a b n fibs]\n      (if (= 0 n)\n        fibs\n        (recur b (+ a b) (dec n) (cons b fibs)))) 0 1 % '()))","problem":26,"user":"51460e4ce4b04ef915e37314"},{"problem":26,"code":"#(reverse (loop [i 0 \n\t      \t\t acc '()]\n            (if (< i %)\n              (if (< i 2)\n                (recur (inc i) (conj acc 1))\n                (recur (inc i) (conj acc (+ (first acc) (second acc)))))\n              acc)))","user":"60511ccfe4b056659d6341ff"},{"code":"(fn fib [x]\n  (loop [a 0 b 1 n x acc '()]\n    (if (= n 0)\n      (reverse acc)\n      (recur\n        b\n       (+ a b)\n       (- n 1)\n       (conj acc b)\n      )\n    )\n   )\n )","problem":26,"user":"531276a4e4b08068f379ecfb"},{"code":"(fn fib\n  ([x] (fib x 0 1))\n  ([x, a, b]\n    (if (= 0 x) '() (cons b \n      (fib (dec x) b (+ a b)))\n    )\n  )\n)","problem":26,"user":"4fcf642ee4b03432b189f410"},{"code":"(fn genF[len]\n  (loop[n len, a 1, b 1, result []]\n    (if (= n 0) result\n      (recur (- n 1) b (+ a b) (conj result a))\n    )\n  )\n)","problem":26,"user":"5151a6bee4b03e678e393ad3"},{"problem":26,"code":"(fn fib [x]\n  (cond (= x 1) [1]\n        (= x 2) [1 1]\n        :else (conj (fib (- x 1)) (+ (last (fib (- x 1)))\n                                     (last (fib (- x 2))))\n                    )\n        )\n  )","user":"576000fce4b08062f99a4e8b"},{"code":"(fn fib [n]\n  (loop [s [1 1], sl 1, i 2]\n    (if (> n i)\n      (recur (conj s (+ sl (last s))) (last s) (inc i))\n      s)))","problem":26,"user":"4e7dcdb5535db169f9c796e9"},{"problem":26,"code":"(fn fibo\n  [n]\n  (loop [a 0\n         b 1\n         i -1\n         out ()]\n    (if (= i n)\n      (reverse(butlast out))\n      (recur b (+ a b) (inc i) (cons a out)))))","user":"59e8fef3e4b0249b72820743"},{"problem":26,"code":"#(map (partial (fn my-fib [x y z]\n                 (if (= z 1)\n                   x\n                   (my-fib y (+ x y) (- z 1)))) 1 1)\n      (range 1 (+ % 1)))","user":"5606ea56e4b08b23635d317b"},{"problem":26,"code":"#(loop [n %1\n         first 1\n         second 1\n         resList '()]\n    (if (= n 0)\n      (reverse resList)\n      (recur (- n 1 ) second (+ first second) (conj resList first))))","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":26,"code":"#(map first (take % (iterate (fn [[x y]] [(+ x y) x]) [1 0])))","user":"57155980e4b07c98581c3ad7"},{"code":"(fn [n]\n  (#(let [s (+%1 %2)] \n\t    (if (= 2 %3) %4 \n\t\t(recur %2 s (dec %3) (conj %4 s))))\n\t\t\t 1 1 n [1 1]))","problem":26,"user":"50668a06e4b03d366d7cb2b2"},{"problem":26,"code":"#(loop [r '(1 1)]\n    (if (= (count r) %)\n      (take % (reverse r))\n      (recur (conj r (+ (first r) (second r)))))\n    )","user":"5f429fdfe4b0955706451faf"},{"problem":26,"code":";(fn [k]\n;  (map (fn fib [n]\n;  \t\t (loop [a 1 b 0 c 1]\n;   \t\t       (cond (>= c n) a\n;                     true  (recur (+ a b) a (+ 1 c)))))\n;       (range 1 (+ 1 k))))\n\n\n(fn [n]\n  (loop [a 1 b 0 c 1 r []]\n    (if (> c n) r\n         (recur (+ a b) a (inc c) (conj r a)))))","user":"59156f0be4b0163c97b36f3d"},{"code":"#(letfn [(fib-seq\n           ([] (concat [0 1] (fib-seq 0 1)))\n           ([a b] (let [n (+ a b)]\n                     (lazy-seq (cons n (fib-seq b n))))))]\n  (take % (rest (fib-seq))))","problem":26,"user":"4e80aa10535db62dc21a62b1"},{"problem":26,"code":"(fn [n] \n  (let [fib (fn fib [n acc] \n              (cond (zero? n) acc\n                    (empty? acc) \n                      (fib (dec n) '(1))\n                    (empty? (rest acc))\n                      (fib (dec n) '(1 1))\n                    :default \n                      (fib (dec n) \n                           (cons (+ (first acc)\n                                    (first (rest acc)))\n                                 acc))))]\n    (reverse (fib n '()))))","user":"57df2722e4b0bd073c20245e"},{"problem":26,"code":"#(letfn [(fib-seq\n                   ([] (fib-seq 0 1))\n                   ([pre2, pre1] (lazy-seq (cons pre1 (fib-seq pre1 (+ pre2 pre1))))))\n                 ]\n           (take % (fib-seq)))","user":"5c17467fe4b01240ff5671df"},{"problem":26,"code":"#(loop \n  [init-1 1\n   init-2 1\n   rset [init-1 init-2]]\n  (let [cnt (count rset)\n        sum (+ init-1 init-2)]\n    (if (= cnt %1)\n      rset\n      (recur init-2 \n             sum\n             (conj rset sum)))))","user":"55938d28e4b0c79f6e1db93f"},{"problem":26,"code":"(fn [n]\n  (take n \n        ((fn fibo[a b]\n          (cons a (lazy-seq(fibo b (+ a b))))) 1 1))\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"#(loop [a 1 b 1 n# 0 c []]\n     (if (= n# %)\n       c\n       (recur b (+ a b) (inc n#) (conj c a))))","problem":26,"user":"5127e504e4b03a34742b4302"},{"problem":26,"code":"(fn [n]\n  (loop [fib [1 1]]\n    (if (>= (count fib) n)\n      (subvec fib 0 n)\n      (let [[n1 n2] (reverse fib)]\n        (recur (conj fib (+ n1 n2)))))))","user":"5820cca0e4b04b46fc4b0f62"},{"problem":26,"code":"#(take % (cons 1 ((fn fib [u v] (lazy-seq (cons (+ u v) (fib v (+ u v))))) 0 1)))","user":"5abeb697e4b073f177442725"},{"code":"#(take % ((fn c [a b] (lazy-seq (cons a (c b (+ a b))))) 1 1))","problem":26,"user":"4e58dd23535d8a8b8723a298"},{"problem":26,"code":"(fn [x] (loop [data x cnt 1 result []]\n        \t(if (< data cnt)\n              result\n              (if (< cnt 3)\n                (recur data (inc cnt) (conj result 1))\n                (recur data (inc cnt) (conj result (reduce + (take-last 2 result))))))))","user":"567f034be4b0feffd0d18eba"},{"problem":26,"code":"#(loop [coll [1 1]]\n   (if (= (count coll) %)\n     coll\n     (recur (conj coll (+ (last coll) (first (rest (reverse coll))))))))","user":"5f0c8b0de4b0f30dddfb5d4c"},{"code":"(fn [x] (last (take x (iterate (fn [l] (conj l (apply + (take-last 2 l)))) [1]))))","problem":26,"user":"53504437e4b084c2834f4ad8"},{"code":"(fn [x]\n  (loop [y 0 z 1 r [1]]\n    (let [sum (+ y z)]\n      (if (= (count r) x)\n        r\n        (recur z sum (conj r sum))))))","problem":26,"user":"52b9c62ce4b07a9af57922c3"},{"code":"(fn [n]\r\n  (reverse \r\n    (loop [ls (list)]\r\n      (if (< (count ls) n)\r\n        (if (< (count ls) 2)\r\n          (recur (conj ls 1))\r\n          (recur (conj ls (+ (first ls) (first (rest ls)))))) \r\n        ls))))","problem":26,"user":"4dd61f98535d2dad7130b5c6"},{"code":"#((fn fibseq [n n1 d] (if (= d 0) '() (into (fibseq n1 (+ n n1) (dec d)) (list n1)))) 0 1 %)","problem":26,"user":"534eecaee4b084c2834f4abf"},{"problem":26,"code":";#(take % ( 1, 1 , 2 2 2 2 2))\n\n#(take % '(1 1 2 3 5 8 13 21))","user":"5b819312e4b047b03b20378d"},{"problem":26,"code":"(fn f [y]\n  (map\n    (fn fib [x]\n      (if (< x 2)\n        1\n        (+ (fib (- x 2)) (fib (- x 1)))))\n   (range y)))","user":"575fbe58e4b08062f99a4e87"},{"problem":26,"code":"(fn [n]\n  (loop [a 0 b 1 result [1]]\n    (if \n      (= n (count result))\n      result\n      (recur b (+ a b) (conj result (+ a b))))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn fib-seq [x]\n  (letfn [(fib-iter [a b]\n            (cons a (lazy-seq (fib-iter b (+ a b)))))]\n    (take x (fib-iter 1 1))))","problem":26,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn [numX]\n   (take numX\n     ((fn ! [a b]\n    (cons a (lazy-seq (! b (+ b a))))\n    ) 1 1))                      \n)","problem":26,"user":"5106dc1be4b01150e115ebf0"},{"code":"#(map\n  (fn fib [n] \n    (if (<= n 1) \n        1\n        (+ (fib (- n 1)) (fib (- n 2)))\n    ))\n  (take % (iterate inc 0)))","problem":26,"user":"4eeae8f0535d93acb0a668a2"},{"code":"#(take %1 \n       (\n        (fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)\n       )","problem":26,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n    1 '(1)\n    (reverse (loop [i 2 rv '(1 1)]\n               (if (= i n)\n                 rv\n                 (recur (inc i) (conj rv (+ (first rv) (second rv))))\n               )\n             )\n    )\n  )\n)","user":"54dae16de4b024c67c0cf758"},{"problem":26,"code":"#(take % ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1))","user":"57b4779de4b0fbc9809a279a"},{"problem":26,"code":"#(take %\n      ((fn fib [a b]\n        (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5a94a38ce4b0d174b936c73e"},{"problem":26,"code":"#(take % (map first\n               (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"606d75f5e4b069485764de13"},{"problem":26,"code":"(fn [n]\n  (loop [counter (dec n)\n         result [1]]\n    (if (zero? counter)\n      result\n      (recur (dec counter)\n             (conj result (reduce + (take-last 2 result)))))))","user":"55b6afc6e4b01b9910ae299c"},{"problem":26,"code":"#(take % ((fn fibonacci\n                     ([] (fibonacci 1 1))\n                     ([a b] (lazy-seq (cons a (fibonacci b (+ a b))))))))","user":"58db097fe4b0a4d5acaab66f"},{"code":"(fn [i]\n  (take i\n        ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b)))))\n         1 1)))","problem":26,"user":"522e6c01e4b01cdb292c5f01"},{"code":"(fn\n  fib-seq[num]\n  (let\n    [fib\n      (fn\n        fib[n]\n        (cond\n          (< n 1) 0\n          (< n 3) 1\n          :else (+ (fib (- n 2)) (fib (- n 1)))\n        )\n      )\n    ]\n    (if (< num 1) '()\n      (concat (fib-seq (- num 1)) (list (fib num)))\n    )\n  )\n)","problem":26,"user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn [num]\n  (let [start (list 1 1)\n        fibs (fn [nums length]\n               (let [cur (reverse nums)]\n                 (if (= (count nums) length)\n                   nums\n                   (recur (reverse (cons (+ (first cur) (second cur)) cur)) length))))]\n    (if (< num 3)\n      (take num start)\n      (fibs start num))))","problem":26,"user":"4f036c4b535dcb61093f6ab9"},{"problem":26,"code":"(fn [num] (take num (map first (rest (iterate (fn [[x y]] [y (+ x y)]) [0 1])))))","user":"55f09e7be4b06e875b46ce28"},{"problem":26,"code":"#(loop [output [1]]                                                                    \n        (if (= (count output) %)                                             \n          output                                                                               \n          (recur (conj output (apply + (take-last 2 output))))))","user":"565b4d7fe4b068f2fe63dc01"},{"problem":26,"code":"(fn [fibs] \n (loop [result '(1 1)]\n  (if (= (count result) fibs)\n   (reverse result)\n   (recur (conj result (+ (first result) (second result)))))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":26,"code":"(fn fib [l] (reduce \n  (fn [c n] \n    (concat c \n            (let [\n                   r (reverse c) \n                   f (first r) \n                   s (second r)\n                 ] \n              [(+ f s)]))) \n  (case l 0 '(1) 1 '(1) '(1 1)) ;;initial value \n  (range 2 l)))","user":"577da4eae4b0c8d87281f6d7"},{"code":"(fn [n]\n  (loop [x 2 result '(1 1)]\n    (cond (< n 1) '()\n          (= n 1) '(1)\n          (>= x n) (reverse result)\n          true (recur (inc x)\n                      (conj result\n                            (+ (first result)\n                               (second result)))))))","problem":26,"user":"51ab70c3e4b04e3dc0c27b33"},{"code":"#(loop [n % a 0 b 1 f []] (if (= 0 n) f (recur (dec n) b (+ a b) (conj f b))))","problem":26,"user":"53244c9de4b09d4e7a9b54db"},{"code":"#(loop [fib [1] i 0 j 1 k %]\n  (if (= 1 k)\n    fib\n    (recur (conj fib (+ i j)) j (+ i j) (dec k))))","problem":26,"user":"4e521cef535d302ef430da6d"},{"problem":26,"code":";(fn [qnt]\n;  (loop [times 2 fib [1 1]]\n;    (if (= times qnt)\n;      fib\n;      (recur (inc times) (conj fib (+ (last fib) (get fib (- (count fib) 2))))))))\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn ff [n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"51f7dd27e4b06ff1c25c52dc"},{"code":"(letfn [(fib [x]\n(if (< x 2)\n1\n(+ (fib (dec x)) (fib (- x 2)))))]\n#(map fib (range %)))","problem":26,"user":"4fabb1dce4b081705acca21a"},{"problem":26,"code":"#(loop [nth %\n           coll []\n           a 1\n           b 1]\n      (if (= 0 nth)\n        coll\n        (recur (dec nth) (conj coll a) b (+ a b))))","user":"5b1ec003e4b03cfeda66ed13"},{"code":"(fn [x]\n  (loop [l [1 1], n 2]\n  (if (= n x)\n  l\n  (recur \n    (conj l (+ (nth l (- n 1)) (nth l (- n 2))))\n    (inc n) ))))","problem":26,"user":"500b61b1e4b03d00572d2d81"},{"problem":26,"code":"(fn \n[x] \n(loop [result '(1 1), cnt x]\n   (if (= cnt 2) \n     (reverse result)\n     (recur (conj result (reduce + (take 2 result))) (dec cnt)))))","user":"5a2185c6e4b0ff51aa4b32b1"},{"code":"(fn\n  [n]\n  (loop [res [] i n x 0 y 1]\n    (if (= i 0)\n      (apply list res)\n      (recur (conj res y) (dec i) y (+ x y)))))","problem":26,"user":"5289bba9e4b0239c8a67ae69"},{"code":"(fn [len]\n\t\t(if (= len 1)\n\t\t\t[1]\n\t\t(loop [pos 2 items [1 1]]\n\t\t\t(if (= pos len)\n\t\t\t\titems\n\t\t\t(recur (+ pos 1) (conj items (+ (nth items (- pos 1)) (nth items (- pos 2)))))))))","problem":26,"user":"52f31489e4b05e3f0be25f0b"},{"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n      (take %)\n      (map second))","problem":26,"user":"518696c1e4b0c40be512d708"},{"code":"(fn [n]\n  (loop [r [] p 0 v 1 x n] \n    (if (= 0 x) \n      r\n      (recur (conj r v) v (+ p v) (dec x))\n      )))","problem":26,"user":"51b9b5ace4b0e871ca495908"},{"problem":26,"code":"(fn fib [x]\n  (cond\n   (= 2 x) [1 1]\n   :else (conj (fib (dec x)) (+ (last (fib (dec x))) (nth  (fib (dec x)) (- (count (fib (dec x))) 2))))\n   )\n  )","user":"59165082e4b09b4ee5954b88"},{"code":"(fn fib-seq\n  ([lmt]\n    (fib-seq lmt '(1 1) 2))\n  ([lmt l a]\n    (if (> lmt a)\n      (let [nxt (last l)\n            scd (last (butlast l))]\n        (fib-seq\n          lmt\n          (concat l (list (+ nxt scd)))\n          (inc a)))\n      l)))","problem":26,"user":"4f8d340be4b02e764a0a51a8"},{"problem":26,"code":"(fn fib  \n  ([n]\n   (loop [n2 0 n1 1 res [1]]\n     (if (< (count res) n)\n       (recur n1 (+ n1 n2) (conj res (+ n1 n2)))\n       res\n       )\n     )\n   )\n  )","user":"5de6e291e4b0986d99407f72"},{"code":"#(take % ((fn f [a b] (cons a (lazy-seq (f b (+ a b))))) 1 1))","problem":26,"user":"4e6093c9535d8ccf87e9fe54"},{"problem":26,"code":"#(loop [acc [] cnt % x 1 y 1] (if (= cnt 0) acc (recur (conj acc x) (dec cnt) y (+ x y))))","user":"59497f51e4b07ddc2dafaddd"},{"code":"(fn [n]\n  (take n\n    (map first\n      (iterate\n        (fn [[a b]] [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn [n]\n    (let [fibs\n          (fn fibs [a b]\n            (lazy-seq\n             (cons (+ a b)\n                   (fibs b (+ a b)))))]\n      (take n (concat '(1 1) (fibs 1 1)))))","problem":26,"user":"4e326f34535deb9a81d77f21"},{"code":"(fn [n]\n  (map last (take n (iterate \n         (fn [[a b]] \n           (list b (+ b a)))\n        [0 1])\n   )))","problem":26,"user":"4e6a4ab9535d8ccf87e9fec2"},{"code":"#(take % (map first (iterate (fn [[f1 f2]] [f2 (+ f1 f2)]) [1 1])))","problem":26,"user":"4e170143535d04ed9115e7ed"},{"problem":26,"code":"(fn [y] \n  (cond\n       (= y 1) [1]\n       (= y 2) [1 1]\n       (> y 2) (loop [fib [1 1] index(- y 2)]\n          (if (zero? index) fib (recur (conj fib (+ (nth (reverse fib) 0) (nth (reverse fib) 1))) (dec index))))\n  )\n)","user":"57ea79d9e4b0bfb2137f5b4f"},{"problem":26,"code":"(fn [n]\n  (loop [it n\n         lst '()]\n    (if (= it 0)\n      (reverse lst)\n      (recur (dec it)\n             (if (or (= it n) (= it (- n 1)))\n               (cons 1 lst)\n               (cons (+ (first lst)\n                        (second lst))\n                     lst))))))","user":"559d33b3e4b0ec2b359424d9"},{"code":"(fn [numb] ((fn [coll numb] (if (zero? numb) coll (recur (conj coll (+ (last coll) (last (butlast coll)))) (dec numb))))[1 1] (- numb 2)))","problem":26,"user":"50621cbde4b0341461c88951"},{"code":"(fn fib [n]\n  (loop [col []\n         f 1\n         s 1\n         n n]\n    (if (zero? n)\n        col\n        (recur (conj col f)\n               s\n               (+ f s)\n               (dec n)))))","problem":26,"user":"501577ade4b0aaedd199e911"},{"problem":26,"code":"(fn\n  [x]\n  (loop [fibs [1 1]]\n    (if (= (count fibs) x)\n      fibs\n      (recur (conj fibs (+ (last fibs) (second (reverse fibs))))))))","user":"53e3e852e4b036ad0777e407"},{"problem":26,"code":"#(reduce (fn [c x] (conj c (apply + (take-last 2 c)))) [1] (range 1 %))","user":"5458a729e4b01be26fd74622"},{"problem":26,"code":"(fn [nth]\n  (let [f (fn f [x]\n              (case x\n                1 1\n                2 1\n                (+ (f (- x 1)) (f (- x 2)))))]\n    (#(loop [cnt % , acc '()]\n       (if (= cnt 2)\n         (conj acc 1 1)\n         (recur (- cnt 1) (conj acc (f cnt)))\n         )\n       ) nth)\n    )\n  )","user":"56263f3fe4b00e49c7cb47bc"},{"problem":26,"code":"(fn [total]\n  (loop [cnt 2 coll '(1 1)]\n    (if (< cnt total)\n      (recur\n       (inc cnt)\n       (cons (+ (first coll) (second coll)) coll))\n      (reverse coll))))","user":"56a79eb0e4b07966d5a8a05d"},{"code":"#(loop [a [1] b 1 c %] (if (= 1 c) a (recur (conj a b) (+ (last a) b) (- c 1))))","problem":26,"user":"4e55b3dc535d8a8b8723a27f"},{"problem":26,"code":"(fn find[n] (take n ((fn fibo[a b] (lazy-seq (cons a (fibo b (+ a b))))) 1 1)))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [1 1] prev 1 pprev 1]\n    (if (= (count fibs) n)\n      fibs\n      (recur (conj fibs (+ prev pprev)) (+ prev pprev) prev))))","user":"53edb464e4b0d648e757f4c7"},{"code":"(fn [n]\n  (loop [i 1 j 1 l n fibs [i j]]\n    (if (= l 2)\n      fibs\n      (recur j (+ i j) (dec l) (concat fibs [(+ i j)])\n             )\n      )\n    )\n  )","problem":26,"user":"511907a4e4b046de85f62a4d"},{"code":"(fn foo [x] \n   (loop [n 1 lst (list 1) xx 1] \n     (if (< xx x)\n     (recur \n  \t\t(if (nil? (first lst)) \n\t\t\t\t1 \n\t\t\t\t(if (= n 1) 2 (+ n (last lst)))\n\t\t\t)\n\t\t\t(reverse (conj (reverse lst) n)) \n\t\t\t(inc xx))\n\t\tlst)))","problem":26,"user":"4ec3072a535dcc7ae8597d50"},{"problem":26,"code":"(fn [c] (reduce (fn [a _] (concat a [(+ (or (last a) 1) (or (-> a butlast last) 0))])) [] (range c)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn [x]\n  (loop [cnt 1 n 1 acc  [1 1]] \n  (if (= (count acc) x) acc\n    (recur (inc cnt) (last acc) (conj acc (+ n (last acc)))))))","problem":26,"user":"526c669be4b03e8d9a4a728f"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n          1 1)))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn [x]\n  (loop [i (- x 2)\n         l '(1 1)]\n   (if (<= i 0)\n       l\n       (let [next-n (reduce + 0 (take-last 2 l))]\n          (recur (dec i)\n                 (reverse (cons next-n (reverse l))))))))","problem":26,"user":"4f934325e4b0dcca54ed6cb8"},{"problem":26,"code":"(fn [nn] \n  (loop [n (- nn 2) a 1 b 1 f [1 1]]\n    (if (<= n 0) \n     f\n     (recur (dec n) b (+ a b) (conj f (+ a b)))\n)))","user":"59a0262ee4b0871e7608b82d"},{"problem":26,"code":"(fn [n] ((fn fib [n a b ac] (if (= n 0) (reverse ac) (fib (- n 1) (+ a b) a (conj ac a)))) n 1 0 '()))","user":"56662275e4b0e91d5f5c566a"},{"problem":26,"code":"(fn [_k]\n  (map first\n       (take _k \n             (iterate\n              (fn [[a b]] [b (+ a b)])\n              [1 1]\n             )\n        )\n  )\n)","user":"56ecf2e6e4b04a395b9a0440"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         prev 0\n         cur 1\n         res nil]\n    (if\n      (> i n) res\n      (recur (inc i) cur (+ prev cur) (concat res (list cur))))\n  )\n)","user":"5bb905dce4b0a20761a235c7"},{"problem":26,"code":"(fn [n]\n  (loop [result '() i 0]\n    (if (= i n)\n      (reverse result)\n      (recur (conj result (if (or (= i 0) (= i 1))\n                            1\n                            (reduce + (take 2 result))))\n             (inc i)))))","user":"56dbe1f4e4b0ea9b8538f813"},{"problem":26,"code":"#(loop [r []]\n        (cond\n          (< (count r) 2) (recur (conj r 1))\n          (< (count r) %) (recur (conj r (apply + (take-last 2 r))))\n          :else r))","user":"4ff3113ae4b0678c553fc345"},{"code":"#(map last (take % (iterate \n       (fn [c]\n     (list (second c) (+ (first c) (second c)))) '(0 1))))","problem":26,"user":"4f02fdc9535dcb61093f6a42"},{"code":"(fn [x]\n  (rest\n  (reverse\n  (nth\n  (take x (iterate #(cons (+ (first %) (second %)) % ) '(1 0))) (- x 1)))))","problem":26,"user":"4faa7f87e4b081705acca1f6"},{"problem":26,"code":"(fn fib [n]\n  (loop [acc '() i 0]\n    (if (= i n)\n     (reverse acc)\n     (recur (conj acc (+ (or (first acc) 1) (or (second acc) 0)))\n            (inc i)))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"#(loop [i 0\n        sq [1]]\n   (if (>= i (- % 1))\n     sq\n     (recur (inc i) (conj sq (apply + (take-last 2 sq))))))","problem":26,"user":"51b41150e4b0f094dd986fac"},{"problem":26,"code":"(fn [x]\n  (sort (loop [j 1 y 1 coll '() count 0]\n    (if (= count x)\n      coll\n      (recur y (+ j y) (conj coll j) (inc count))))))","user":"59e4fc25e4b08badc2a0c54f"},{"code":"(fn fib [x] \n  (cond\n    (= 0 x) '()\n    (= 1 x) '(1)\n    (= 2 x) '(1 1)\n    true\n      (concat\n        (fib(dec x))\n        (list\n          (+\n            (last(fib (dec x)))\n            (last(butlast(fib (dec x))))\n          )\n        )\n      )\n  )\n)","problem":26,"user":"4ea1ecfa535d7eef308072bb"},{"code":"(fn [n] \n  (loop [x (- n 2)\n        se '(1 1)]\n      (if (= x 0)\n        (reverse se)\n        (recur (dec x) (conj se\n                         (+ (first  se) \n                            (second se)\n                          )                        \n                        )\n        )\n      )\n  )\n)","problem":26,"user":"4f891abde4b033992c121c77"},{"code":"(let [f (fn f [n] (if (< n 3) 1 (+ (f (dec n)) (f (- n 2)))))]\n #(take % (map f (rest (range)))))","problem":26,"user":"503917a0e4b088a6a14ca763"},{"problem":26,"code":"(fn fib-seq [n]\n    (case n\n      1 [1]\n      2 [1 1]\n      (let [prev-seq (fib-seq (- n 1))\n            last-seq (take-last 2 prev-seq)\n            next-fib (reduce + last-seq)]\n        (conj prev-seq next-fib))))","user":"5c68f931e4b0fca0c16226ea"},{"problem":26,"code":"#(take % ((fn fib\n          ([] (fib 1 1))\t\n          ([x y] (cons x (lazy-seq (fib y (+ x y))))))))","user":"56e4427ce4b03a7c14b85a4c"},{"problem":26,"code":"(fn [n] \n  (take n \n        ((fn [] (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"problem":26,"code":"#(take % ((fn f [a b]\n  (lazy-seq (cons a (f b (+ b a))))) 1 1))","user":"53d92964e4b0e771c3025476"},{"code":"#(take % ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","problem":26,"user":"4e78dc98535db95036265724"},{"problem":26,"code":"#(loop [accum (list 1 1) i (- % 2)]\n   (if (= 0 i) (reverse accum)\n     (let [[h1 h2 & rest] accum]\n       (recur (conj accum (+ h1 h2)) (dec i)))))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn [n] (map (fn fib [n] (cond (or (= n 1) (= n 2))\n         \t              1\n            \t          :else\n                \t      (+ (fib (- n 1))\n                    \t     (fib (- n 2)))))\n             (range 1 (inc n))))","problem":26,"user":"4fc6104ae4b0ee37620e1808"},{"problem":26,"code":"(letfn [(fibn [n]\n          (if (< n 2)\n            1\n            (+ (fibn (- n 1)) (fibn (- n 2)))))]\n  #(map fibn (range %)\n  ))","user":"5b4a0ce3e4b02d533a91bc92"},{"problem":26,"code":"(fn fib [number] (if (= number 1) [1]\n                 (if (= number 2) \n                   [1 1]\n                   (conj (fib (- number 1)) \n                           (#(+ (last %) (last (butlast %)))\n                             (fib (- number 1))\n                           ) \n                    ))\n                  )\n)","user":"55893b09e4b059ccff29b1fe"},{"problem":26,"code":"(fn [n]\n  (for [x (range n)]\n    ((fn fib-element [e]\n      (cond (< e 0) nil\n            (or (= e 0)\n                (= e 1)) 1\n            :else (+ (fib-element (- e 2))\n                     (fib-element (- e 1))))) x)))","user":"5800ab1ee4b0a837a8b30c41"},{"code":"(fn fib \n  ([x] (fib x 1 1 0))\n  ([x a b c] (if (< c x)\n               (conj (fib x b (+ a b) (inc c)) a)\n               nil)))","problem":26,"user":"5069d8c5e4b01dc6af13f838"},{"problem":26,"code":"#(->> [0 1] \n      (iterate (fn [[a b]] [b (+ a b)]))\n      (take %) \n      (map second))","user":"53ea5851e4b036ad0777e4e4"},{"code":"(fn [n] (take n (drop 1 (map first (iterate #(let [[a b] %] [b (+ a b)]) [0 1])))))","problem":26,"user":"4f6010e7e4b0defedf855fa1"},{"code":"(fn fibooo [x]\n  (loop [k 1 t 1 i 0 j 1 lista '()]\n    (if(> k x)\n      lista\n      (recur (inc k) (+ i j) j (+ i j) (concat lista (list j)))    \n    )\n  )    \n)","problem":26,"user":"4e94aab8535dbda64a6f6b1f"},{"problem":26,"code":"#(take % (\n  map first (iterate (fn [[a b]] [b (+ a b)] ) [1 1])))","user":"59135c11e4b0163c97b36f02"},{"problem":26,"code":"#(loop [result '() n 1 nth 1] (if (> nth %) result (recur (concat result (list n)) (+ n (or (last result) 0)) (inc nth))))","user":"57b59d77e4b0fbc9809a27ae"},{"problem":26,"code":"#(loop [i 2 xs '(1 1)]\n   (if (> % i)\n     (recur (inc i) (conj xs (+ (first xs) (second xs))))\n     (reverse xs)))","user":"56c4f43ce4b05cc29241ee9c"},{"problem":26,"code":"(fn fib [n]\n  (let [f (fn f-rec [ls m]\n            (if (>= m n) ls\n              (f-rec (conj ls (+ (last ls)\n                                 (last (drop-last ls))))\n                     (inc m))))]\n    (f [1 1] 2)))","user":"605f5c69e4b03746e80ebf5e"},{"problem":26,"code":"(fn [x] \n  (take x \n        ((fn ! [i j] (cons i \n                          (lazy-seq (! j (+ i j)))\n                          )\n          ) 1 1)\n        )\n  )","user":"544c1b05e4b0e3978000696e"},{"code":"(fn [x]\n   (reverse ((fn [acc L]\n  (if (empty? L) acc\n    (cond\n       (= 0 (first L)) (recur '(1) (rest L))\n       (= 1 (first L)) (recur '(1 1) (rest L))\n    :else (recur (cons (+ (first acc) (second acc)) acc) (rest L))\n     )\n    )\n  )\n () (range x))))","problem":26,"user":"50293245e4b08353e5d459cf"},{"problem":26,"code":"(fn myfib [y]\n               (let [add-fib (fn [x]\n                                 (let [last-value (last x)\n                                       second-last-value (nth x (dec (dec (count x))))\n                                       total (+ last-value second-last-value)]\n                                      (conj x total)\n                                      ))\n                     ]\n                    (case y\n                          1 [1]\n                          2 [1 1]\n                          (add-fib (myfib (dec y))))\n                    ))","user":"587c845ae4b01531a375eb1f"},{"problem":26,"code":"(fn me [x]\n  (loop [a 1 b 1 c [1 1]]\n    (if (= (count c) x)\n    c\n    (recur b (+ a b) (conj c (+ a b))))))","user":"57086931e4b0b0fb43fd069e"},{"problem":26,"code":"#(loop [i % \n         coll [] \n         last 0 \n         next 1]\n    (if (= i 0) \n        (seq coll)\n        (recur (dec i) (conj coll next) next (+ last next))))","user":"5ac7f980e4b0e27600da779f"},{"problem":26,"code":"(fn [n]\n    (cond\n      (= n 1) (list 1)\n      (= n 2) (list 1 1)\n      :else (loop [res (list 1 1)\n                   i (- n 2)]\n              (if (zero? i)\n                (reverse res)\n                (recur (conj res (+ (first res) (second res))) (dec i))\n                )\n             )\n      )\n    )","user":"5959c72ae4b066ee0a44afac"},{"problem":26,"code":"#(map first (take % (iterate (fn[[f r]][r (+ f r)]) [1 1])))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn fib [n]\n    ((fn fibseq [lst n]\n\t (cond \n\t  (= (count lst) n) (reverse lst)\n\t   :else\n\t   (fibseq (cons (+ (first lst)(second lst)) lst) n))) '(1 1) n))","problem":26,"user":"534f8c9ae4b084c2834f4acd"},{"problem":26,"code":"(fn [n] (reverse ((fn fib [s n] (cond (= n 0) s (< (count s) 2) (fib (cons 1 s) (- n 1)) :else (fib (cons (+ (first s) (second s)) s) (- n 1)))) nil n)))","user":"556766c1e4b0c656e3ff1840"},{"problem":26,"code":"(fn [x] (loop [acc [1,1] ct 2]\n        (let [[a,b] (rseq acc)]\n        (cond\n              (= ct x) acc\n               :else  (recur (conj acc (+ a b)) (inc ct))\n        ))\n))","user":"5b5afe87e4b0c6492753e6a4"},{"code":"#(loop [n (dec %)\n        i 1\n        j 1\n        ret '(1)]\n   (if (zero? n)\n      ret\n     (recur (dec n) j (+ i j) (concat ret [j]))\n     ))","problem":26,"user":"538d73c1e4b0b51d73faae6f"},{"code":"#(take % ((fn rfib [a b]\r\n  (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","problem":26,"user":"4e8a0c82535d3e98b802328d"},{"problem":26,"code":"(fn fib [n] (loop [cnt (- n 2) acc '(1 1)]\n          (if (zero? cnt)\n            (reverse acc)\n            (recur (dec cnt) (conj acc (+ (first acc) (first (rest acc))))))))","user":"565233f2e4b0f9d632dd8461"},{"problem":26,"code":"#(take % (lazy-seq\n\t((fn fib\n\t([] (fib  1 1))\n\t([a b] (cons a (lazy-seq (fib b (+ a b)))))))))","user":"583c4482e4b089d5ab817d7e"},{"code":"(fn f [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) (concat '(1) (f (- n 1)))\n    :else (let [l (f (- n 1))\n                last (dec (count l))]\n            (concat l (list (+ (nth l last) (nth l (dec last))))))))","problem":26,"user":"4f0364d5535dcb61093f6a9e"},{"problem":26,"code":"#(take % ((fn fib [n m] (cons n (lazy-seq (fib  m (+ n m))))) 1 1))","user":"5f32f69ae4b0574c87022c35"},{"problem":26,"code":"(fn [x]\n  (loop [c 2\n         result [1 1]]\n    (if (= c x)\n      result\n      (let [n1 (result (dec (count result)))\n            n2 (result (dec (dec (count result))))]\n        (recur (inc c) (conj result (+ n1 n2)))))))","user":"4e6ffaa3535d5021c1a8962e"},{"problem":26,"code":"(fn [x] (loop [acc [1]\n               n 1\n               nPlusOne 2\n               counter 1\n               x x]\n          (if (= counter x)\n            acc\n            (recur (conj acc n) nPlusOne (+ n nPlusOne) (inc counter) x))))","user":"571cd9dce4b0145328a76271"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (<= n 0) []\n  \t(= n 1) [1]\n    (= n 2) [1 1]\n    :else\n   \t\t(let [fiblist (fib (dec n))\n              reverse-fiblist (reverse fiblist)\n              x (first reverse-fiblist)\n              y (second reverse-fiblist)]\n          (conj fiblist (+ x y)))\n   )\n)","user":"54c82b27e4b045293a27f645"},{"code":"(fn fib\n  ([n]\n     (fib [1 1] n))\n  ([x, n]\n     (if (< (count x) n)\n       (let [reverse_x (reverse x)]\n        ( fib (conj x (+ (first reverse_x) (second reverse_x))) n )\n       )\n       x\n      )\n   )\n)","problem":26,"user":"4f542fd9e4b0a7574ea717db"},{"code":"(fn fib-seq\n  ([n] (fib-seq n 1 0 []))\n  ([n b a sq]\n    (let [f (+ a b)]\n      (if (zero? n) sq\n        (recur (dec n) a f (conj sq f))))))","problem":26,"user":"4fead955e4b0140c20fb9c10"},{"code":"#(\n\n  letfn [\n    (next-fib [list] (+ (last list) (second(reverse list))) )\n  ]\n  \n  (loop [acc [1 1]]\n    (if (>= (count acc) %) \n      (take % acc)\n      (recur (conj acc (next-fib acc)))\n    )\n  )\n)","problem":26,"user":"52cbe910e4b07d0d72b27353"},{"problem":26,"code":"#(take % (map first (iterate (fn ([[x y]] [y (+ x y)] )) [1 1])))","user":"55e46caae4b050e68259b451"},{"code":"#((fn fibseq [numto sq]\n    (if (= 0 numto)\n      sq\n      (fibseq (- numto 1) (cons ((memoize (fn fib [n] (case n\n                           1 1\n                           2 1\n                           (+ (fib (- n 1)) (fib (- n 2)))))) numto) sq)))) % nil)","problem":26,"user":"529ce629e4b04e0c58e87b6e"},{"problem":26,"code":"(fn  fibo-loop\n  [n]\n  (loop [a 1\n         b 1\n         i 0\n         res ()]\n    (if (= i n)\n      (reverse res)\n      (recur b (+ a b) (inc i) (conj res a)))))","user":"59e0111ae4b08badc2a0c4e4"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n              (fn [[x y]] [y (+ x y)])\n              [1 1])))","user":"5400fc30e4b0de5c4184861b"},{"code":"(fn fib[nm]\r\n (let [inner\r\n    (fn inner [n acc c]\r\n        (if (> n 1)\r\n          (concat (list c) (inner (dec n) c (+ acc c)))\r\n          (list c))\r\n    )]\r\n (inner nm 0 1))\r\n)","problem":26,"user":"4e1f60a6535d04ed9115e80b"},{"problem":26,"code":"(fn [n]\n  (loop [fibs '(2 1 1)\n         i 3]\n    (if (= i n)\n      (reverse fibs)\n      (recur (conj fibs (+ (first fibs) (second fibs))) (inc i)))))","user":"554f817ce4b00713264bd9a2"},{"problem":26,"code":"(fn fib [target]\n\t(loop [fibs '(1 1) len 2]\n\t\t(if (= target len)\n\t\t\t(reverse fibs)\n\t\t\t(recur (conj fibs (+ (first fibs) (second fibs))) (+ len 1)))))","user":"500e3238e4b068062f6e8d8f"},{"problem":26,"code":"(fn f [n]\n  (if (= n 2)\n    '(1 1)\n    (let [ff (reverse (f (dec n)))]\n      (reverse (conj ff (+ (first ff) (first (rest ff))))))))","user":"57bfb321e4b05aa3c4741c83"},{"problem":26,"code":"(fn fib [n] \n  (cond \n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (reverse (conj \n                    (reverse (fib (dec n)))\n                    (+ (last (fib (dec n))) (last (fib (dec (dec n) ))))\n                         ))))","user":"54797964e4b0c51c1f4d72c6"},{"problem":26,"code":"(fn f28\n  [n]\n  (cond\n    (= n 0) 0\n    (= n 1) '(1)\n    :else (loop [res '(1 1)\n                 cnt n]\n            (if (= cnt 2)\n              res\n              (recur (concat res (cons (+ (last (butlast res)) (last res)) '())) (dec cnt))))))","user":"5bd75870e4b0ed4b8aab4bc0"},{"code":"#(map first\n      (take\n       %\n       (let [next (fn [[i j]]     \n                     [j (+ i j)])]     \n        (iterate next [1 1]) )))","problem":26,"user":"4eb2d0ae535d7eef3080734e"},{"code":"(fn fibo [x]\n  (if (= x 1)\n         [1]\n         (if (= x 2)\n            [1 1]\n           (let [prev (fibo (dec x)), b (last prev), a (last (butlast prev))]\n             (conj prev (+ a b))\n           )\n         )\n    )\n)","problem":26,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"#(take % ((fn fib [a b] (lazy-seq(cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"503c02e5e4b0fc0f99c2e54e"},{"code":"(fn [c]\n  (take c ((fn rfibo [a b]\n    (cons a (lazy-seq (rfibo b (+ a b))))) 1 1) )\n  )","problem":26,"user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"#(reverse ((fn fib [x]\r\n  (condp = x\r\n    1 '(1)\r\n    2 '(1 1)\r\n    (let [f (fib (dec x))]\r\n      (cons (apply + (take 2 f)) f)))) %))","problem":26,"user":"4df7278a535d04ed9115e774"},{"problem":26,"code":"(fn [n] (take n (map second (iterate (fn ([[x y]] [y (+ x y)])) [0 1]))))","user":"566669d8e4b0e91d5f5c566f"},{"problem":26,"code":"#(loop [quantity % numbers '[]]\n  (if (>= (count numbers) quantity)\n    numbers\n    (if (>= (count numbers) 2)\n      (recur quantity (conj numbers (reduce + (take-last 2 numbers))))\n      (recur quantity (conj numbers 1)))))","user":"5ecda821e4b016b56eae0598"},{"problem":26,"code":"(fn fib [x]\n     (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"59e62655e4b08badc2a0c568"},{"problem":26,"code":"#(for [x (range %)]\n \t((fn fib [n] (if (<= n 1) n(+ (fib (dec n)) (fib (- n 2)) ) ) ) (inc x))\n  )","user":"602abb59e4b0d5df2af2225e"},{"problem":26,"code":"#(loop [x 1 alist [1] n_1 0 n_2 1] (if (= x %1) alist (recur (+ x 1) (conj alist (+ n_1 n_2)) n_2 (+ n_1 n_2))))","user":"5deab1b2e4b0986d99407f9f"},{"code":"(fn [x] (loop [n (- x 2)\n               lst '(1,1)]\n(if (zero? n)\n(reverse lst)\n(recur (dec n) (cons (+ (first lst) (second lst)) lst)))))","problem":26,"user":"50563ae2e4b0ce54f56f0405"},{"code":"#(loop [a 0 b 1 i % v []]\n    (if (= i 0) v\n        (recur b (+ a b) (dec i) (conj v b))))","problem":26,"user":"4e735545535d6912a4457f75"},{"problem":26,"code":"(fn fibonacci [s n]\n   (if (> n 2)\n     (fibonacci (conj s (+ (first s) (second s))) (dec n))\n     (reverse s)))\n '(1 1)","user":"5fcdb9f5e4b07e53c2f3effe"},{"problem":26,"code":"#(take %\n       (map last\n            (iterate\n             (fn [[x y]] [y (+ x y)])\n             [0 1])))","user":"55ee62dde4b0121d4835fdeb"},{"code":"(fn [x] (take x (apply (fn lazyfib ([] (concat [1 1] (lazyfib 1 1))) ([a b] (let [n (+ a b)] (lazy-seq (cons n (lazyfib b n)))))) ())))","problem":26,"user":"4dea9fae535d08e6dec9fe02"},{"code":"(fn [n] (rest (take (inc n)\n                     ((fn fib \n                        ([] (fib 0 1))\n                        ([a b] (cons a (lazy-seq (fib (+ a b) a))))))\n                     )))","problem":26,"user":"524f0deee4b0541d1855b7fd"},{"code":"(fn fibonacci [n]\n  (if (= n 1) '(1)\n    (if (= n 2) '(1 1)\n      (concat (fibonacci (- n 1))\n        (list \n        (+ (last (fibonacci (- n 1)))\n           (last (drop-last (fibonacci (- n 1))))))))))","problem":26,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn fib [x]\n  (cond\n   (= x 1)\n   (list 1)\n   (= x 2)\n   (list 1 1)\n   :else\n   (let [fib-1 (fib (dec x))]\n     (concat fib-1\n             (list (+ (last fib-1) (last (butlast fib-1))))\n           ))))","problem":26,"user":"50b53b6ae4b0c464d223d1c4"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b]\n  (cons a (lazy-seq (fib b (+ a b)))))]\n  (take n (fib 1 1))))","user":"53eaa804e4b036ad0777e4ea"},{"problem":26,"code":"(fn fib [n]\n      (cond (= n 1) [1]\n            (= n 2) [1 1]\n            :default (conj\n                      (fib (dec n))\n                      (+\n                       (last (fib (- n 2)))\n                       (last (fib (dec n)))))))","user":"5a062e07e4b01bb0ae8afdc5"},{"code":"#(take %\n(map\nfirst\n(iterate (fn fib-pair [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"50e9ed1de4b02d54280826d5"},{"code":"#(take % (map (fn fib [x]\n           (cond\n            (= x 0) 0\n            (= x 1) 1\n            :else (+ (fib (- x 1)) (fib (- x 2))) \n            )\n           ) (iterate inc 1)))","problem":26,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":26,"code":"#(take % (map first\n     (iterate (fn [[p pp]] [(+ p pp) p])\n              [1 0])))","user":"5a0a04eee4b0eab8c0448935"},{"problem":26,"code":"#(loop [r [1 1]\n        pp 1\n        p 1\n        n (- % 2)]\n  (if (= n 0)\n    r\n    (let [next (+ p pp)]\n      (recur (conj r next)\n             p\n             next\n             (dec n)\n             ))))","user":"5746d767e4b009280f9f2b6b"},{"code":"(fn [ct]\r\n  (letfn [(fib\r\n    ([] (fib 1 1))\r\n    ([a b]\r\n      (lazy-seq (cons a (fib b (+ a b))))))]\r\n  (take ct (fib))))","problem":26,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn fibonasty [n]\n  (loop [ls '(1 1)]\n    (if (= (count ls) n)\n      ls\n      (recur (concat ls [(+ (last ls) (last (drop-last ls)))])))))","problem":26,"user":"52ec1dfbe4b0705949c4444b"},{"code":"(fn [n]\n  (->> [0 1]\n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map second)\n    (take n)))","problem":26,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":26,"code":"#(take %\n       ((fn rfib [a b]\n         (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","user":"5aef6084e4b0cc2b61a3bc34"},{"problem":26,"code":"#(loop [n % v [0 1]]\n    (if (zero? (dec n))\n      (rest v)\n      (recur (dec n)  (conj v (+ (last v) \n                               (last (butlast v)))))))","user":"57226290e4b0c5bde472c0c8"},{"code":"#(loop [fab [1 1]  r 1] (if (= r %) (take r fab) (recur (conj fab (reduce + (take-last 2 fab))) (inc r))  ))","problem":26,"user":"5171f684e4b0d70c8bbbf248"},{"code":"#(map (fn [n]\n  (let [fib-helper\n       (fn fib-helper [n a b]\n    (if (= 0 n) b\n      (fib-helper (- n 1) b (+ a b))))]\n  (fib-helper n 0 1))) (range 0 %))","problem":26,"user":"504e108ce4b078edc5f593b3"},{"problem":26,"code":"(fn [y] (map (fn [n] \n  (if (zero? n) 0\n    (loop [f-n 1 f-n1 0 indx n]\n      (cond (> indx 1 )\n          (recur  (+ f-n f-n1) f-n (dec indx))\n           :else f-n))))\n\n\n      (range 1 (inc y))))","user":"52fdbf3ae4b047fd55837032"},{"problem":26,"code":"#(take % (map first(iterate (fn [[x y]] [y(+ x y)])[1 1])))","user":"5eeb1cc3e4b029a2061bbecc"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fibonacci\n            ([] (fibonacci 1 1))\n            ([a b] (lazy-seq (cons a (fibonacci b (+ a b)))))))))","user":"55d3780ee4b0e31453f64a66"},{"code":"(fn [n]\n  (letfn [(fibo\n            ([]\n              (concat [1 1 2] (fibo 1 2)))\n            ([a b]\n              (let [n (+ a b)]\n                (lazy-seq\n                  (cons n (fibo b n))))))]\n(take n (fibo))))","problem":26,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn fibo[x]\n  (\n    if (= 1 x)\n    '(1)\n    (\n      if ( = 2 x)\n      '(1 1)\n      (\n        sort (conj (fibo (dec x)) (+ (last (fibo (dec x))) (last (fibo (- x 2))) ))\n      )\n    )\n  )\n)","problem":26,"user":"4e94accb535dbda64a6f6b20"},{"problem":26,"code":"(fn [num] (loop [lst '(1 1) x 1 fib 1] \n  (if (= num (count lst)) \n    (reverse lst) \n    (recur (conj lst (+ fib x)) fib (+ fib x)))))","user":"5f558a76e4b0a0bc16850a84"},{"problem":26,"code":"#(loop [l 0 n 1 cnt 0 acc []]\n   (if (= cnt %) \n       acc\n       (recur n (+ n l) (inc cnt) (conj acc n))))","user":"56be8649e4b0f26550335983"},{"code":"#(reverse ((fn f [n] (case n 2 '(1 1) (let [p (f (- n 1))] (conj p (+ (first p) (second p)))))) %))","problem":26,"user":"51cbc435e4b08d8387cbeddd"},{"problem":26,"code":"(fn fi [n] \n  (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take n)))","user":"57227f10e4b0c5bde472c0cd"},{"code":"(fn fib-seq [n]\n  (take n\n        (map first\n             (iterate\n               (fn [[a b]] [b (+' a b)])\n               [1 1]))))","problem":26,"user":"4f0412f8535dcb61093f6b99"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (if (>= n 2)\n      (loop [k 2\n             n-1 1\n             n-2 1\n             s (list n-2 n-1)]\n        (if (< k n)\n          (recur (inc k) n-2 (+ n-1 n-2) (conj s (+ n-1 n-2)))\n          (reverse s))))))","user":"5701f886e4b08d47c97781d9"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [n1]\n         (if (< n1 3) 1\n           (+ (fib (- n1 1)) (fib (- n1 2))))) \n       (range 1 (inc n))))","user":"54fd93bbe4b07d26eda61d36"},{"problem":26,"code":"#(map (fn fib [n] (cond (= n 0) 1 (= n 1) 1 :else (+ (fib (- n 1)) (fib (- n 2))))) (range 0 %))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"code":"#(take % (map first\n              (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"5213d81de4b0961f15ac4d73"},{"code":"(fn fib ([n] (fib [1 1] n)) ([x n] (if (< (count x) n) (fib (conj x (+ (last x) (second (reverse x)))) n) x)))","problem":26,"user":"52166e50e4b0bf4bffd29cc6"},{"problem":26,"code":"#(map (fn fib [n]\n    (if (< n 3) 1 \n      (+ (fib (dec n)) (fib (- n 2)))\n    )\n  )\n  (range 1 (inc %)))","user":"54cfb5abe4b018d918be98d3"},{"code":"(fn [num]\n    (map \n      (fn fib [num]\n        (cond\n          (.contains [0 1] num) 1\n          :else (+ (fib (- num 1)) (fib (- num 2)))))\n      (range num)))","problem":26,"user":"4e2f9e71535deb9a81d77f11"},{"problem":26,"code":"#(take %  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","user":"5df0c29ce4b093ff717275c1"},{"code":"(fn [x]\r\n  (map \r\n   (fn fib [n]\r\n     (if (>= n 2)\r\n       (+ (fib (- n 1)) (fib (- n 2)))\r\n       n))\r\n   (range 1 (+ x 1))))","problem":26,"user":"4fd7a223e4b0dab7d829f387"},{"problem":26,"code":"(fn [n]\n            (loop [res (list  1 1)\n                   m n]\n              (cond\n                (= m 1) (rest res)\n                (= m 2) res\n                :else (recur (concat res [(apply + (take-last 2 res))]) (dec m)))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn fibn[x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"50982769e4b04e098a4c726a"},{"problem":26,"code":"(fn fib [x]\n  (loop [x x\n         y []]\n    (if(= x 0)\n      y\n      (recur\n        (dec x)\n        (if (> 2 (count y))\n          (conj y 1)\n          (conj y (+ (last y) (last (butlast y)))))))))","user":"56f85849e4b08e7d20b96836"},{"code":"#(map (fn fib [x] (if (or (= x 0) (= x 1)) 1 (+ (fib (dec x)) (fib  (dec (dec x)))))) (range %))","problem":26,"user":"534c734de4b084c2834f4a93"},{"problem":26,"code":"#(loop [a 1 b 1 s '() n %] (if (= 0 n) s (recur b (+ a b) (concat s [a]) (- n 1))))","user":"55280930e4b0ffed3738f93b"},{"problem":26,"code":"(fn fib [n] (cond \n  (= n 1) '(1)\n  (= n 2) '(1 1)\n  :else (let [f (fib (- n 1))] \n          (concat f (list (+ (nth f (- n 2)) (nth f (- n 3))))))))","user":"5413adfee4b01498b1a719e4"},{"problem":26,"code":"#(take %1 ((fn fib-seq [a b] (cons a (lazy-seq (fib-seq b (+ a b))))) 1 1))","user":"55e2d527e4b050e68259b43a"},{"code":"#(loop\n  [prev 0 this 1 cnt % coll nil]\n    (cond\n      (= cnt 0)\n        (reverse coll)\n      :else (recur this (+ prev this) (dec cnt) (cons this coll))))","problem":26,"user":"4f6688d6e4b07046d9f4ef5d"},{"code":"(fn [n] (reverse (reduce (fn [acc _] (conj acc (+ (first acc) (second acc)))) '(1 1) (range (- n 2)))))","problem":26,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":26,"code":"#(loop [result []] (do\n                     (when (< % 0) (throw (IllegalArgumentException.)))\n                     (cond\n                       (= (count result) %) result\n                       (<= (count result) 1) (recur (conj result 1))\n                       :else (recur (conj result (reduce + (take-last 2 result)))))))","user":"5b6002c2e4b0c6492753e6fb"},{"problem":26,"code":"(fn [n]\n  (loop [fib-seq '(1 1) idx (- n 2)]\n    (if (zero? idx)\n      fib-seq\n      (recur (concat fib-seq (list (apply + (take-last 2 fib-seq)))) (dec idx)))))","user":"55fe7e15e4b00f4cabc57651"},{"problem":26,"code":"(fn xfib [n]\n  (take n\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","user":"58ac1135e4b0005cfeb1a73f"},{"problem":26,"code":"#(reduce (fn [fs x] (conj fs (+ (fs (- x 1)) (fs (- x 2))))) [1 1] (range 2 %))","user":"57b1b8c8e4b0fbc9809a2756"},{"problem":26,"code":"(fn fibb[a]\n  (loop [fs [0 1] n a]\n    (if (<= n 1)\n      (drop 1 fs)\n      (let [nxt (+ (get fs (- (count fs) 1)) (get fs (- (count fs) 2)))]\n        (recur (conj fs nxt) (dec n))))))","user":"5032748ae4b0e78df07b092f"},{"code":"#(take % (map first (iterate (fn [[x y]](vector (+ x y) x)) [1 0])))","problem":26,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n          (fib-n [a b n] (take n (fib a b)))]\n    (fib-n 1 1 n)))","problem":26,"user":"5133e51ae4b0d7a043de8cf6"},{"code":"(fn [x]\n        (loop [count (- x 2)\n              result '(1 1)]\n              (if (zero? count)\n                (reverse result)\n                (recur (dec count) \n  (conj result (+ (first result) (second result)))))))","problem":26,"user":"4e7e241a535db169f9c79705"},{"problem":26,"code":"(fn [lst]\n  (map\n   \t(fn fib [n]\n      (if (<= n 1)\n        1\n        (+ (fib (- n 1)) (fib (- n 2))))) (range lst)))","user":"5938bca5e4b02506e01a29eb"},{"problem":26,"code":"#(reverse (loop [c %\n                 res '(1 1)]\n            (if (= c 2)\n              res\n              (recur (dec c) (conj res (apply + (take 2 res))) ))))","user":"60046db8e4b074f607df6642"},{"code":"(fn [x]\n  (->> (iterate #(vector (% 1) (+ (% 0) (% 1))) [1 1])\n        (map first) \n        (take x)))","problem":26,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         x 1\n         y 1\n         nums '()]\n       (if (= n 0)\n           (reverse nums)\n           (recur (dec n) y (+ x y) (conj nums x)))))","user":"548f37c7e4b0e286459a1234"},{"problem":26,"code":"(fn fibonacci-sequence [n]\n  (let [fib-seq ((fn fib [a b] (lazy-seq (cons b (fib b (+ a b))))) 0 1)]\n    (take n fib-seq)))","user":"58a58c50e4b01a0c0b232914"},{"problem":26,"code":"#(loop [n % acc [] x 1 y 1] (if (zero? n) (seq acc) (recur (dec n) (conj acc x) y (+ x y))))","user":"53b71b94e4b047364c0444cd"},{"problem":26,"code":"#(if (= 0 %)\n   0\n   (map first (take % (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"5e950178e4b0fbed045a3801"},{"code":"(fn [n]\n  (take n ((fn fib [a,b]\n    (cons a (lazy-seq(fib b (+ a b))))) 1 1)))","problem":26,"user":"50b0804de4b009df37c708bb"},{"problem":26,"code":"(fn [n]\n  (let [fibo (fn fibo [n]\n               (cond\n                (= n 0) 1\n                (= n 1) 1\n                :else (+ (fibo (- n 1)) (fibo (- n 2)))))]\n    (map fibo (range n))))","user":"53729c50e4b06d7f452d9dfe"},{"problem":26,"code":"#(loop [result ()]\n   (if (= (count result) %1)\n     (reverse result)\n     (case (count result)\n       0 (recur (list 1))\n       1 (recur (list 1 1))\n       (recur (conj result (+ (first result) (second result))))\n     )\n   )\n)","user":"54635083e4b01be26fd746bd"},{"problem":26,"code":"#(take %1 (map (fn [n]\n  (loop [x 1 a 1 n n]\n    (if (< n 2)\n      a\n      (recur a (+ x a) (dec n))))) (range)))","user":"60b8b9dae4b0e0fa5f1b425d"},{"problem":26,"code":"(fn [n]\n  (reverse\n    (reduce\n      (fn [coll x]\n        (conj\n          coll\n          (+ (nth coll 0) (nth coll 1))))\n      '(1 1)\n      (range (- n 2)))))","user":"55349c67e4b09218d5f44fa0"},{"code":"(fn [n]\n  (loop [cnt 0\n         x 1\n         y 1\n         result []]\n         (if (< cnt n)\n            (recur (inc cnt)\n                   y\n                   (+ x y)\n                   (conj result x))\n            (seq result))))","problem":26,"user":"4daf1076edd6309eace4d16f"},{"problem":26,"code":"#(loop [val 1 cnt % fibs [1]]\n    (if (= cnt 1)\n      fibs\n      (recur (+ val (last fibs)) (dec cnt) (conj fibs val))))","user":"58a7b7cbe4b01a0c0b232946"},{"problem":26,"code":"(fn [x]\n   (loop [out [1 1]]\n     (if (= (count out) x)\n       out\n       (recur (conj out (+ (last out) (nth out (- (count out) 2))))))))","user":"57a9eddae4b0b8559636fc5f"},{"code":"(fn [limit] (seq  (loop [lim limit a 1 b 1 coll [1]] (if (> lim 1) (recur (dec lim) b (+ a b) (conj coll b)) coll))))","problem":26,"user":"50abb8cde4b01d6eb43ce9ad"},{"code":"(fn [t] \n  (loop [o [1] i (dec t) l 0]\n    (if \n      (zero? i) \n      o\n      (recur \n        (conj o (+ l (last o))) \n        (dec i)\n        (last o) \n      )\n    )\n  )\n)","problem":26,"user":"52f1bc81e4b05e3f0be25eef"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibs []\n                ((fn next-fib [a b]\n                   (cons a (lazy-seq (next-fib b (+ a b)))))\n                 0 1))]\n    (take n (rest (fibs)))))","user":"571c2babe4b07c98581c3b73"},{"code":"#(loop [n (- % 2) coll-to-return [1 1]]\n  (if (zero? n) \n    (apply list coll-to-return)\n    (recur \n      (dec n) \n      (conj coll-to-return \n        (+ (last coll-to-return) (second (reverse coll-to-return)))))))","problem":26,"user":"5071b614e4b0e3170b5a867d"},{"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n      (map first)\n      (take %))","problem":26,"user":"4fe98ddae4b0547ebccb2463"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (vec (concat (fib (dec n)) (vector (apply + (take 2 (reverse (fib (dec n)))))))))))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [n]\n  (loop [ct n result '(1 1)]\n    (if (= ct 2)\n      result\n      (recur (dec ct) (concat result (list (+ (last result) (last (butlast result)))))))))","problem":26,"user":"4ef4c1ff535dced4c769f23e"},{"problem":26,"code":"#(let [fib (fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))] (take % (fib 1 1)))","user":"53fe1c3be4b0de5c418485f2"},{"problem":26,"code":"(fn [n] (into [] (take n (reduce (fn [s _] (conj s (apply + (drop (- (count s) 2) s)))) [1 1] (range 3 (inc n))))))","user":"58bb736be4b0888cdc949cf9"},{"problem":26,"code":"(fn [xs x]\n      (if \n        (= x 0)\n        xs \n        (recur (conj xs ((fn fib [n]\n                            (if \n                              (< n 2) \n                                n\n                              (+ (fib (- n 2)) (fib (- n 1))))) x)) (dec x)))) '()","user":"5562bd71e4b0c656e3ff17dc"},{"problem":26,"code":"(fn [n]\n  (loop [fib [1 1]]\n    (if (= n (count fib))\n      fib\n      (let [[ll l] (nthrest fib (- (count fib) 2))]\n        (recur (conj fib (+ ll l)))))))","user":"565eb771e4b068f2fe63dc36"},{"problem":26,"code":"#(loop [n %\n        l '(1 1)]\n   (if (= n 2)\n     (reverse l)\n     (recur (- n 1) (cons (+ (first l) (second l)) l)))\n   )","user":"594263cbe4b060784b3b790a"},{"code":"(fn [x]\n  (map\n    (fn fib [n]\n      (if (< n 2)\n        n\n        (+\n          (fib (- n 1))\n          (fib (- n 2)))))\n    (take x (range 1 10))))","problem":26,"user":"4e6e97ca535d5021c1a8960c"},{"problem":26,"code":"#(take % \n    (map first \n        (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"54324be1e4b0dad94371f2ed"},{"code":"(fn [n] \n  (reduce (fn [a b] (conj a (reduce + (take 2 (reverse a))))) [1 1] (range (- n 2))) \n)","problem":26,"user":"53736ffce4b06d7f452d9e11"},{"code":"(fn [n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"524fafdfe4b0541d1855b818"},{"problem":26,"code":"#(if (= % 1) \n   [1]\n   (loop [result [1 1]]\n          (if (= % (count result))\n            result\n            (recur (conj result (apply + (take-last 2 result)))))))","user":"56f514cee4b046a417f92068"},{"problem":26,"code":"#(take % ((fn fib [a b]\n               (lazy-seq\n                 (cons a (fib b (+ b a)))))\n           1 1))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":26,"code":"(fn [len]\n      (loop [cnt len\n             acc [1 1]]\n            (if (< cnt 3)\n              acc\n              (recur (dec cnt) (let [last-el (last acc)]\n                                    (->> (count acc)\n                                         (+ -2)\n                                         (get acc)\n                                         (+ last-el)\n                                         (conj acc)))))))","user":"5dfbe0eae4b0a607a9a45ce2"},{"problem":26,"code":"#(reverse ((fn fib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (let [fiblist (fib (- n 1))] (conj fiblist (+ (first fiblist) (second fiblist))))\n    ))) %))","user":"53aef31ce4b047364c04447b"},{"code":"(fn [nElems]\n  (loop [x 1 y 1 result [1 1]]\n    (if (= (count result) nElems)\n      result\n      (recur y (+ x y) (conj result (+ x y))))))","problem":26,"user":"4f6ba647e4b07046d9f4efaf"},{"problem":26,"code":"(fn [n]\n  (reduce\n  (fn [acc curr]\n    (conj acc (apply + (take-last 2 acc)))\n      )\n  [1 1]\n  (#(repeat % 1)(- n 2))))","user":"50bc759ae4b0594b91591c58"},{"code":"(fn [x] (take x\n        (map #(first %)\n             (iterate\n               (fn [[f s]] [s (+ f s)])\n               [1 1]))))","problem":26,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n     1 1)))","problem":26,"user":"4e2ef93d535deb9a81d77f0f"},{"problem":26,"code":"#(reduce (fn [acc e] (conj acc (+ (nth acc (- e 2)) (last acc)))) [1 1]  (range 2 %1))","user":"5b23b14ae4b08b1df1c3675c"},{"code":"(fn [i] (reduce #(conj %1 (cond (> 2 %2) 1 :else (+ (last %1) (last(drop-last %1))) )) [] (range i)))","problem":26,"user":"4dbf0cd2535d020aff1edf72"},{"code":"(fn fib [num]\n  (loop [x 1, y 1, res [1 1], acc 2]\n    (if (= acc num)\n      res\n      (let [z (+ x y)]\n        (recur y z (conj res z) (+ 1 acc))))))","problem":26,"user":"51dc80b7e4b09c47a74ce10f"},{"code":"#( take %\n  ( map first \n(iterate (fn [[a b]] [b (+ a b)] ) [1 1] )\n  ) \n  )","problem":26,"user":"52628bb0e4b03e8d9a4a7089"},{"problem":26,"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (reverse (\n      loop [s '(1 1) c (- n 2)]\n      (if (= 0 c)\n        s\n        (recur (conj s (+ (first s) (first (rest s)))) (dec c)))))))","user":"54750ca3e4b0c51c1f4d7294"},{"code":"#(map last (take % (iterate (fn [[n_1 n]] [n (+ n n_1)]) [0 1])))","problem":26,"user":"5203bc27e4b0fb7e47ea5204"},{"problem":26,"code":"(fn [n]\n  (loop [n n coll '()]\n   (letfn [(fib [n]\n             (cond \n               (= n 1) 1\n               (= n 2) 1\n               :else   (+ (fib (dec n)) \n                          (fib (- n 2)))))]\n     (if (pos? n)\n       (recur (dec n) (cons (fib n) coll))\n       coll)\n    )\n   )\n)","user":"556008aee4b0c656e3ff17be"},{"problem":26,"code":"(fn [x] (reverse (reduce (fn [acc val] (conj acc (+ (first acc) (second acc)))) '(1 1) (range (- x 2)))))","user":"5d6d2172e4b04d129b00f2b9"},{"code":"#(take %\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))","problem":26,"user":"514d2c7ee4b019235f6c0582"},{"code":"(partial \n    (fn [\n     acc\n     e1   \n     e2 \n     n ]\n    (if (<= n 0)\n      acc\n      (recur (conj acc e1)\n             (+ e1 e2)\n             e1\n             (- n 1)))) \n\n[] 1 0)","problem":26,"user":"530e74c9e4b08068f379ecb9"},{"problem":26,"code":"(fn [n]\n  (rest (take (+ n 1)\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"602b6cf7e4b0d5df2af22265"},{"problem":26,"code":"#(loop[i %, r '()]\n   (if (< i 1)\n     (reverse r)\n     (recur (dec i)\n       (conj r (+\n         (or (first r) 1)\n         (or (second r) 0))))))","user":"5b6473eee4b0c6492753e73f"},{"code":"(fn [n]\n  (take n\n    ((fn rfib [a b]\n      (lazy-seq (cons a (rfib b (+ a b)))))\n     1 1)))","problem":26,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":26,"code":"(fn [x]\n  (take x \n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"589560d8e4b00487982d5281"},{"code":"#(loop [x % a [1 1]]\n  (let [l last] (if (< x 3) a\n    (recur (- x 1)\n           (conj a (+ (l (drop-last a)) (l a)))\n    )\n  ))\n)","problem":26,"user":"4f1595da535d64f603146444"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 0) \n   []\n   \n   (= n 1) \n   [1]\n   \n   :else \n   (loop [fib [1 1]\n          n (- n 2)]\n     (if (= n 0)\n       fib\n       (recur (conj fib (+ (last fib) (nth fib (- (count fib) 2)))) (dec n))))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn h [y] (\n    (fn f [x n] (if (= n 2) x \n      \t\t\t(f (\n            \t\t\t(fn g [z] (conj z (+ (last z) ((comp last butlast) z))))\n         \t\t\t\tx) (- n 1))\n        \t\t) \n    ) \n    [1 1] y)\n)","problem":26,"user":"504efb61e4b0e7ad84dbc4a8"},{"code":"(fn [x]\n   (->> (range 1 (+ 1 x))\n       (map (fn fibonacci [n]\n  (cond (= n 0) 0\n        (= n 1) 1\n\n        :else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))\n       ))","problem":26,"user":"4f942227e4b0dcca54ed6cbe"},{"code":"(fn fib [x] \n  (if (<= x 1) (vec '(1))\n  (let [result (fib (- x 1))]\n     (conj result (reduce + (take 2 (reverse result)))))))","problem":26,"user":"52d96f7ce4b09f7907dd13a8"},{"problem":26,"code":"#(loop [acc '(1 1) n (- % 2)]\n    (let [x (+ (first acc) (second acc))]\n      (if (zero? n)\n        (reverse acc)\n        (recur (conj acc x) (dec n)))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":26,"code":"(fn [n]\n   (let [fibo (fn fibo\n                ([] (fibo 0 1))\n                ([n m] (cons m (lazy-seq (fibo m (+ m n)))))\n                )\n         ]\n     (take n (fibo))\n     )\n   )","user":"56804d03e4b0966858e4d8ec"},{"code":"(fn [n]\n    (take n (map first (iterate (fn [[l r]]\n                                  [r (+ l r)])\n                                [1 1]))))","problem":26,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn fib-list [n] ((fn fub [a n] (if (= n 0)\n                                  a\n                                  (fub (if (< (count a) 2)\n                                  \t\t(concat a (list 1))\n                                  \t\t(concat a (list (+ \n                                                 (last a) \n                                                 (nth a (- (count a) 2))))))\n                                     (dec n))))\n                    '() n))","problem":26,"user":"51037468e4b00c483ae17702"},{"problem":26,"code":"(fn fib\n  [x]\n  (loop [i 1 y 0 z 1 result '()]\n    (if (> i x)\n      (reverse result)\n      (recur (inc i) z (+ y z) (conj result z)))))","user":"54091b82e4b0addc1aec66d5"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib_rec [a b] (cons a (lazy-seq (fib_rec b (+ b a)))))]\n    (take n (fib 1 1))))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"code":"(fn [n]\n  (reduce\n    (fn [r i]\n      (->>\n        (- (count r) 2)\n        (subvec r)\n        (apply +)\n        (conj r)))\n    [1 1] (range (- n 2))))","problem":26,"user":"504e0517e4b078edc5f5939a"},{"problem":26,"code":"(fn my-fib [%] \n    (map ( fn nth-fib[%] \n             ( if (= % 0) 0 \n               (if (= % 1) 1 \n               (+ (nth-fib (- % 1)) (nth-fib (- % 2)) )\n               )     \n               )\n                )\n          (range 1 (+ 1 %))\n))","user":"53d64811e4b0e771c3025456"},{"problem":26,"code":"(fn fib [x]\n  ((fn a [x li]\n    (if (= x (count li))\n      (reverse li)\n      (a x (cons (+ (first li) (second li)) li))\n    )\n  ) x '(1 1))\n)","user":"55034bf0e4b086ebe8a79c6d"},{"code":"(fn [n]\n    (loop [x 0, y 1, result []]\n      (if (= (count result) n)\n        result\n        (recur y (+ x y) (conj result y)))))","problem":26,"user":"4f4023d9e4b0e243712b1fa9"},{"code":"#(take %\n  ((fn rfib [a b]\n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","problem":26,"user":"50772e6ae4b0fc74642bff5d"},{"code":"(fn fib\r\n([n] (fib 1 0 n '()))\r\n([a b i z] (cond (= 0 i) (sort z) :else (fib (+ a b) a (- i 1) (cons a z)))))","problem":26,"user":"4f041af6535dcb61093f6ba3"},{"problem":26,"code":"(letfn [\n        (fib [n] \n             (cond \n              (< n 2) 1 \n              :default (+ (fib (dec n)) \n                          (fib (- n 2)))\n              ))\n        (fib-seq [n] (map fib (range n)))] fib-seq)","user":"5675a817e4b05957ce8c614a"},{"problem":26,"code":"(fn fibo2\n  [index]\n  (let [inital [1 1] x\n        (loop [result inital i (- index 2)]\n          (if (< i 1) result\n                      (recur\n                        (conj result (+ (nth result (dec (count result))) (nth result (dec (dec (count result))))))\n                        (dec i)\n                        )\n                      )\n          )]\n    (take index x)\n    ))","user":"5e9d99f9e4b0157ca9664806"},{"code":"(fn [n]\n    (reverse (drop 2 (loop [cnt n acc '(1, 1)]\n       (if (zero? cnt)\n              acc\n          (recur (dec cnt) (conj acc (+ (first acc) (first (drop 1 acc))))))))))","problem":26,"user":"5191a9e6e4b0d428d29dc1b5"},{"code":"#(take %\n  (map first\n    (iterate (fn [[i1 i2]]\n      [i2 (+ i1 i2)])\n      [1 1])))","problem":26,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn [n]\n   (take n \n         (map first \n              (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51cacda3e4b068dadb8f2227"},{"code":"(fn [n] \n  (loop [result [1 1]\n         len n]\n    (if (> 3 len)\n      result\n      (let [last (last result)\n            lastbut (first (rest (reverse result)))\n            next (+ last lastbut)]\n        (recur (conj result next) \n               (dec len))))))","problem":26,"user":"52ee46e5e4b05e3f0be25ec5"},{"problem":26,"code":"(fn fib [n]\n  (take n (map first (iterate #(conj % (apply + (take 2 %))) '(1 0)))))","user":"569ab3e2e4b0542e1f8d144a"},{"problem":26,"code":"#(loop [acc [], n-1 0, n-2 1, cnt 0]\n   (if (= cnt %)\n     (seq acc)\n \t (recur (conj acc (+ n-1 n-2)) (+ n-1 n-2) n-1 (inc cnt))\n     ))","user":"5bd1b23ae4b0e9689409ee52"},{"problem":26,"code":"(fn fib [n] (let [myloop (fn myfib [a b count] (if (= count n) (list b) (cons b (myfib b (+ a b) (+ count 1)))))] (myloop 0 1 1)))","user":"5601bb7ee4b04bb52996e195"},{"code":"(fn fibo [x](rest (take (+ x 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4fedec00e4b0d2a5fc2962eb"},{"problem":26,"code":"(fn [n] (last (take (- n 1) (iterate (fn [lst] (let [rev (reverse lst)] (reverse (conj rev (+ (first rev) (nth rev 1)))))) '(1 1))  )))","user":"59d72207e4b0ef0a1e9b5c2c"},{"code":"(fn [n] (loop [i 0 o []] (cond (= i n) o (= i 0) (recur 1 [1]) (= i 1) (recur 2 [1 1]) :else (recur (inc i) (conj o (+ (last o) (last (butlast o))))))))","problem":26,"user":"508a2c2fe4b016a2107004a1"},{"code":"(fn [n] (take n (reduce (fn [x y] (let [dummy (reverse x)] (conj x (+ (first dummy) (second dummy))))) [1 1] (range n))))","problem":26,"user":"50223ee2e4b0846bc458ae48"},{"code":"#(loop [l [1] a 0 b 1 c 1]\n  (if (= c %)\n    l\n    (recur (conj l (+ a b)) b (+ a b) (+ c 1))))","problem":26,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn [x]\n  (loop [i 2, n x, l '(1 1)]\n   (cond\n     (= i n) (reverse l)\n     :else\n     (let\n         [i (+ i 1)\n          l (conj l (+ (first l) (second l)))]\n       (recur i n l)))\n))","problem":26,"user":"4f0e0aee535d0136e6c22320"},{"code":"(fn [n]\r\n  (let [next-fib-pair (fn [[a b]] [b (+ a b)])\r\n        fib (fn [] (map first (iterate next-fib-pair [1 1])))]\r\n    (take n (fib))))","problem":26,"user":"4de6f806535d08e6dec9fdf7"},{"code":"#(take % ((fn [] (map first (iterate    (fn [[a b]]      [b (+ a b)])    [1 1])))))","problem":26,"user":"4e68323a535d8ccf87e9fe86"},{"code":"(fn [x]\n  (loop [s '(1 1) o 1 p 1 n 2 c 2]\n    (if (= x c) (reverse s)\n      (recur (cons n s) p n (+ p n) (inc c))\n    )\n  ) \n)","problem":26,"user":"4fd11a93e4b04c3a95aa040a"},{"problem":26,"code":"#(take % (concat '(1 1)         \n(\n  (fn fiboseq [a b]\n      (cons 1 '(1 1))\n      (let [c (+ a b)]\n         (cons c (lazy-seq (fiboseq b c)))\n      )\n   ) 1 1\n)\n)\n)","user":"56fa2905e4b07572ad1a88be"},{"problem":26,"code":"(fn \n  [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    :else (loop [cnt 2 fibs [1 1]]\n            (let [next-fib (+ (last fibs) (last (butlast fibs)))]\n              (if (= cnt n)\n                fibs\n                (recur (inc cnt) (conj fibs next-fib)))))))","user":"548db64ce4b0e286459a121c"},{"code":"(partial\n  (fn f [x0 x1 n]\n    (when (> n 0)\n      (cons x0 (f x1 (+ x0 x1) (- n 1)))))\n  1 1)","problem":26,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":26,"code":"(fn fi [x] (if (< x 3) '(1 1) (let [fin (fi (- x 1))] (seq (conj (vec fin) (+ (last fin) (last (butlast fin))))))))","user":"5be182eae4b0ed4b8aab4c9d"},{"code":"#(take % ((fn fibs [] ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))))","problem":26,"user":"530e9729e4b08068f379ecbc"},{"code":"#(reverse ((fn fib [x] (cond\n             (= x 0) '()\n             (= x 1) '(1)\n             (= x 2) '(1 1)\n             :else (let [lst (fib (dec x))]\n                     (conj lst (+ (first lst) (second lst)))))) %))","problem":26,"user":"5168d4ebe4b03f62cda68cdf"},{"problem":26,"code":"#(reverse ((fn ! [n]\n  (if (< n 3) (take n '(1 1))\n   (let [x (! (- n 1))]\n     (conj\n      x\n      (+ (first x) (second x)))))) %))","user":"54c271b9e4b045293a27f602"},{"problem":26,"code":"(fn [n]\n  (loop [count n\n         last 0\n         current 1\n         out []]\n    (if (= 0 count)\n      out\n      (recur \n        (dec count)\n        current\n        (+ last current)\n        (conj out current)))))","user":"5d84f5e6e4b0915913b1d38f"},{"problem":26,"code":";;#(take % (map first(iterate (fn [[x y]] [y (+ x y)]) [ 1 1])))\n;;http://www.iteye.com/topic/624085  介绍函数的各部分意义\n#(take % (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1])))","user":"53be3ee7e4b0d9a98559a6df"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1]\n         x n]\n    (if (= (count result) n)\n      result\n      (recur (conj result\n                   (+ (last result)\n                      (-> result reverse second)))\n             (dec x)))))","user":"5d5166d9e4b0776584bd6f5e"},{"problem":26,"code":"(fn fib [n]\n   (if (<= n 2)\n     (vec (repeat (max n 0) 1))\n     (let [prev (fib (dec n))]\n      (conj prev (+ (last prev) (last (butlast prev)))))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":26,"code":"#(take % \n       ((fn fibo [a b] \n        (cons a (lazy-seq (fibo b (+ a b)))))\n        1 1\n        )\n       )","user":"5443a894e4b032a45b869388"},{"code":"(fn fib-seq [n]\n  (\n   map (fn fib [i]\n    (case i\n      1 1\n      2 1\n      (+ (fib (dec i)) (fib (- i 2)) )))\n   (take n (iterate inc 1))\n  )\n)","problem":26,"user":"52deb735e4b09f7907dd13f7"},{"code":"#(let [fib (fn fib [n]\n             (if (<= n 1) 1 \n                (+ (fib (dec n)) (fib (- n 2)))))]\n  (map fib (range %)))","problem":26,"user":"4e5676b2535d8a8b8723a282"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [1] 0 n))\n  ([xs x n]\n   (let [lastn (peek xs)]\n     (if (= (count xs) n)\n       xs\n       (recur (conj xs (+ lastn x)) lastn n)))))","user":"5ecfd429e4b016b56eae05a9"},{"code":"(fn [limit]\n  (let [fib [0 1] ]\n   (loop [fib fib n 2]\n     (if (<= n limit)\n       (recur \n         (conj fib (reduce + (take-last 2 fib)))\n         (inc n))\n       (next fib)))))","problem":26,"user":"4ed19e90535d44c135fd68d0"},{"problem":26,"code":"#(loop [cur 1 backwardsfib '(1)]\n   (if (= cur %)\n     (reverse backwardsfib)\n     (if (= backwardsfib '(1))\n       (recur (inc cur) '(1 1))\n       (recur (inc cur) (conj backwardsfib (+ (first backwardsfib) (second backwardsfib)))\n ))))","user":"556fa11ae4b09a3098a52524"},{"problem":26,"code":"#(take %1 (map first (take 10 (iterate (fn [[x y]] [y (+ x y)]) '(1 1)))))","user":"571d9669e4b0145328a7627f"},{"problem":26,"code":"(fn [n]\n    (loop [x 2 v [1 1]]\n      (if (>= x n)\n        (lazy-seq v)\n      (recur (inc x) (conj v (+ (nth v (- (count v) 2)) (last v)))))))","user":"57f4ace3e4b07bbd65c32b2b"},{"problem":26,"code":"(fn [n]\n    (loop [acc [1 1]]\n      (cond\n        (>= (count acc) n) acc\n        :else (recur (conj acc (apply + (take-last 2 acc)))))))","user":"54e79094e4b024c67c0cf818"},{"code":"(fn fib \n  ([n] (fib [1 1] n))\n  ([acc n]\n   (if (<= n 2)\n     acc\n     (let [last-elem (last acc)\n           second-last (get acc (- (count acc) 2))]\n       (fib (conj acc (+ last-elem second-last)) (- n 1))))))","problem":26,"user":"512a7c70e4b0ff5c4bc1f99d"},{"code":"(fn [n] (rest (take (inc n) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn [num]\n  (loop\n    [ret '(1 1)]\n    (if (>= (count ret) num)\n      (reverse ret)\n      (recur (conj ret (+ (first ret) (second ret)))))))","problem":26,"user":"4f98da04e4b0dcca54ed6cf7"},{"problem":26,"code":"#(loop [rng % fib [1 1]]\n\t(if (<= rng (count fib))\n\t\tfib\n   \t\t(recur rng (conj fib (+ (peek fib) (nth fib (- (count fib) 2)))))))","user":"5707e579e4b0b0fb43fd0694"},{"code":"#(loop [s [] i 0 x 1 y 1]\n          (if (< i %)\n            (recur (conj s x) (inc i) y (+ x y))\n            s))","problem":26,"user":"522eb5cce4b01cdb292c5f0c"},{"code":"(fn [length]\n  (take\n   length\n   (reverse\n    (loop [n length, result (list 1 1)]\n      (if (> n 2)\n        (recur\n         (- n 1)\n         (conj result (+ (first result) (second result))))\n        result)))))","problem":26,"user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [n]\n  (reduce\n    #(if (or (= %2 0) (= %2 1))\n       (conj %1 1)\n       (conj %1 (apply + (take-last 2 %1))))\n    []\n    (range n)))","problem":26,"user":"500e91aae4b00fff93030f99"},{"problem":26,"code":"(partial\n  (fn fib [n m x]\n    (if (= x 0)\n      '()\n      (let [o (+ n m)]\n        (cons o\n              (fib o\n                   n\n                   (- x 1))))))\n  0 1)","user":"59273eefe4b072a2710fcec6"},{"problem":26,"code":"(fn fib\n  ([n] (fib 1 1 [1 1] (- n 2)))\n  ([a b coll n]\n   (if (= 0 n)\n     coll\n     (fib b (+ a b) (conj coll (+ a b)) (dec n)))))","user":"5a346d73e4b0ddc586f153c8"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e31a101535deb9a81d77f1d"},{"problem":26,"code":"(fn fibo ([a b] (lazy-seq (cons a (fibo b (+ a b))))) ([n] (take n (fibo 1 1))))","user":"51c84a9ce4b07ef393169e54"},{"problem":26,"code":"(fn [num]\n  (take num ((fn fib-rec [a b]\n              (cons a (lazy-seq (fib-rec b (+ a b))))) 1 1)))","user":"594ad6aae4b07ddc2dafae0e"},{"problem":26,"code":"(fn\n  [n]\n  (loop [f 1\n         s 1\n         i (- n 2)\n         c [1 1]]\n    (if (<= i 0)\n      (seq c)\n      (recur s (+ f s) (dec i) (conj c (+ f s))))))","user":"5eeb03dde4b029a2061bbeca"},{"code":"(fn [x]\n (take x\n  ((fn fib [a b]\n     (cons a (lazy-seq (fib b (+ a b)))))\n   1 1)))","problem":26,"user":"5189bf9ee4b0288ada3dbdaf"},{"code":"(fn [n] (loop [fibvec [1 1] elcnt (- n 2)]\n  (if (> elcnt 0)\n    (recur (conj fibvec (+ (last fibvec) \n        (last (butlast fibvec)))) (- elcnt 1))\n    fibvec\n  )))","problem":26,"user":"4e4870d1535dc968683fc4bc"},{"problem":26,"code":"(fn [length]\n  (loop [acc [1] last 1 second-last 0]\n    (if (= (count acc) length)\n      acc\n      (let [cur (+ last second-last)]\n        (recur (conj acc cur) cur last)))))","user":"58e45a2ce4b056aecfd47c69"},{"problem":26,"code":"#_\n(fn [n]\n  (seq\n   (nth\n    (iterate\n     (fn [xs]\n       (let [[a b] (take-last 2 xs)]\n         (conj xs (+ a b))))\n     [1 1])\n    (- n 2))))\n\n#_\n(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n(fn [n]\n  (->> [1 1]\n      (iterate (fn [[a b]] [b (+ a b)]))\n      (map first)\n      (take n)))","user":"5344fe13e4b084c2834f4a32"},{"problem":26,"code":"(fn [X] (take X (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5e16006be4b0a047bd49f711"},{"code":"#(take % ((fn rfib [a, b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","problem":26,"user":"4f031a53535dcb61093f6a63"},{"problem":26,"code":"#(last (take % (iterate (fn [v] (conj v (apply + (take-last 2 v)))) [1])))","user":"54165291e4b01498b1a719fb"},{"code":"(fn [n] (map (fn fib [x] (if (<= x 2) 1 ( + (fib (dec x)) (fib (dec (dec x)))))) (range 1 (inc n))))","problem":26,"user":"51d381b5e4b099f3b6acde01"},{"problem":26,"code":"(fn fib\n  [x]\n  (->> (list 1 1)\n       (iterate #(list (second %) (reduce + %)))\n       (map first)\n       (take x)\n       ))","user":"5a90395ce4b05369db4d254a"},{"problem":26,"code":"(fn [input_number]\n    (map (fn myfib [input_number] (cond (= input_number 0) 1 (= input_number 1) 1 :else (+ (myfib (- input_number 1)) (myfib (- input_number 2))))) (range 0 input_number))\n)","user":"562d6385e4b0a45d2ff8301b"},{"code":"(fn fib [n]\n  (let [fibr (fn fibr [n]\n               (cond (< n 2) (list 1)\n                     (= n 2) (list 1 1)\n                     :else (let [fibs (fibr (dec n))\n                                 fibn-1 (first fibs)\n                                 fibn-2 (second fibs)]\n                             (conj fibs (+ fibn-1 fibn-2)))))]\n    (reverse (fibr n))))","problem":26,"user":"52aa4a67e4b0c58976d9ac62"},{"problem":26,"code":"(fn [n]\n  (reverse\n    (reduce (fn [accum cnt]\n              (condp = (count accum)\n                0 (cons 1 accum)\n                1 (cons 1 accum)\n                (cons (+ (first accum) (second accum)) accum)\n                ))\n            ()\n            (range n)\n            )))","user":"5e207f12e4b05b4b01516112"},{"code":"(fn [n] \n  (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take n)))","problem":26,"user":"521b481de4b0c4ef0be83037"},{"problem":26,"code":"#(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n  (take % (fib 1 1)))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn fib [x]\n  (reverse\n    (if (= x 1) '(1)\n      (if (= x 2) '(1 1)\n        (let [lastseq (reverse (fib (- x 1)))]\n          (conj lastseq\n            (+ (first lastseq)\n               (nth lastseq 1)\n            )\n          )\n        )\n      )\n    )\n  )\n)","problem":26,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"problem":26,"code":"#(last (take % (iterate (fn [coll] \n                          (if (empty? coll)\n                          \t[1 1]\n                          \t(conj (vec coll) \n                            \t  (+ (last coll) (last (butlast coll))))))\n                         [])))","user":"5f21d172e4b0f565ad998286"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (last\n    (take (- n 1)\n          (iterate\n           #(conj %\n                  (+ (first %) (second %)))\n           '(1 1))))))","user":"609e9b64e4b00e9e6653c426"},{"problem":26,"code":"(fn ok [c]\n  (loop [curr 1\n         prev 1\n         fibs [1 1]]\n    (if (< (count fibs) c)\n      (let [nxt (+ curr prev)]\n        (recur\n         nxt\n         curr\n         (conj fibs nxt)))\n      fibs)))","user":"5fb3bd04e4b08cb800c85b3a"},{"code":"#(take % ((fn \n            fib \n            [a b] \n            (cons a \n                  (lazy-seq (fib (+ a b) a))))\n          1 0))","problem":26,"user":"52890634e4b0239c8a67ae5e"},{"code":"#(map (fn f [x]\n  (cond (= x 0) 1\n       (= x 1) 1\n       :else (+ (f (dec x)) (f (- x 2))))) (range %))","problem":26,"user":"507fbd77e4b089ade05efbd3"},{"problem":26,"code":"#(loop [a 1 b 1 fib [a b] n %]\n   (if (= n 2) fib (recur b (+ a b) (conj fib (+ a b)) (dec n))))","user":"58acca5ee4b0005cfeb1a753"},{"code":"(fn [y](take y (flatten (iterate #(let[[a b] %] [(+ a b)(+ a b b)]) [1 1]))))","problem":26,"user":"4f296a80e4b0d6649770a02a"},{"problem":26,"code":"(fn fibonacci [ n ] (reduce (fn [fib n] (conj fib (if (< n 2) 1 (+ (nth fib (dec n)) (nth fib (- n 2)))))) [] (range n)))","user":"57e56da8e4b0bfb2137f5ad6"},{"code":"(fn [x]\n  (take x\n    ((fn rfib [a b]\n      (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4f9d87fce4b0dcca54ed6d24"},{"code":"(fn [n]\r\n  (drop 1 (take (inc n) (map first (iterate (fn [[a b]] [(+ a b) a]) [0 1])))))","problem":26,"user":"4e18ed7a535d04ed9115e7f6"},{"problem":26,"code":"#(take %\n  ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"596a66cde4b069c0a1a19803"},{"code":"#( take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"52d00a05e4b07d0d72b273b5"},{"problem":26,"code":"(fn [number]\n  (let [iter (fn [result number counter]\n               (if (= counter number)\n                 (reverse result)\n                 (recur (conj result (+ (first result) (second result))) number (inc counter))))]\n    (cond (= number 1) '(1)\n        (= number 2) '(1 1)\n        :else (iter '(1 1) number 2))))","user":"60b34c5de4b0e0fa5f1b422e"},{"code":"#(take % \n  ((fn fib [f-2 f-1]\n    (lazy-seq\n      (cons f-2 (fib f-1 (+ f-2 f-1))) ))\n    1 1))","problem":26,"user":"4f3fdf11e4b0e243712b1fa1"},{"problem":26,"code":"(fn [n] (loop [lst [1 1] i (- n 2)] (if (= i 0) (reverse lst) (recur (cons (+ (first lst) (second lst)) lst) (dec i)))))","user":"5a5800e1e4b05d388ecb6c76"},{"problem":26,"code":"#(take %  ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","user":"5537de22e4b09218d5f44fd5"},{"problem":26,"code":"(fn [n]\n      (let [fib (fn fib [n]\n                  (cond\n                    (= n 0) 1\n                    (= n 1) 1\n                    :else (+ (fib (dec n)) (fib (- n 2)))))]\n        (map fib (range n))))","user":"5db35f85e4b010eb3c36cd22"},{"code":"(fn sol0026-iterate\n  [n]\n  {:pre [(integer? n)\n         (not (neg? n))]}\n  (let [fibs (->> (iterate (fn [[a b]] [b (+ a b)]) '[0 1])\n                  (map (partial apply +))\n                  (cons 1))]\n    (take n fibs)))","problem":26,"user":"4fc6305de4b0ee37620e180b"},{"problem":26,"code":"(fn fib [n]\n  (if (= 2 n) '(1 1)\n      (let [r (reverse (fib (dec n)))]\n        (reverse (conj r (+ (first r) (second r)))))))","user":"542b764ae4b0dad94371f28d"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n        1 1\n        )))","user":"53e35265e4b036ad0777e400"},{"problem":26,"code":"(fn [x]\n   (loop [i '(1 1)]\n     (if (= x (count i))\n       (reverse i)\n       (recur\n         (conj i (apply + (take 2 i)))))))","user":"60b68974e4b0e0fa5f1b424b"},{"problem":26,"code":"(fn fibonacci [n] \n  (if (= n 1) \n    '(1) \n    (if (= n 2) \n      '(1, 1)\n      (let [fib (fibonacci (- n 1))] \n        (concat fib\n                (list (+ (nth fib (- n 2))\n                         (nth fib (- n 3)))))))))","user":"5d81c244e4b0915913b1d37a"},{"code":"(fn [n]\n  (loop [result []\n         a 1\n         b 1\n         i 0]\n    (if (= i n)\n      result\n      (recur (conj result a)\n             b\n             (+ a b)\n             (inc i)))))","problem":26,"user":"50b67515e4b08fb537db98f3"},{"code":"(fn fib2\n  ([n] (fib2 [1 1] n))\n  ([acc, n]\n     (if (> n 2)\n       (fib2 (conj acc (+ (last acc) (nth acc (- (count acc) 2)))) (dec n))\n       acc)))","problem":26,"user":"4f5d5202e4b0030a34fb2b38"},{"code":"#(take % (map first\n     (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"5150a7d7e4b03e678e393abb"},{"code":"(fn [x] (take x (map first (iterate #(vector (second %) (apply + %)) [1 1]))))","problem":26,"user":"511aa2a4e4b0c87c59c9670a"},{"problem":26,"code":"(fn fib [acc x]\n     (if (= x (count acc))\n       acc\n       (fib\n         (conj acc\n               (+\n                 (first (reverse acc))\n                 (first (next (reverse acc)))))\n         x)\n       )\n     ) [1 1]","user":"5bdc4a76e4b0ed4b8aab4c30"},{"code":"#(take % \n   ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":26,"code":"(fn [n]\n  (loop [x [1 1]]\n    (if (= (count x) n)\n      x\n      (recur (conj x (apply + (take 2 (reverse x))))))))","user":"59ed823ee4b0249b728207a1"},{"problem":26,"code":"(fn [num]\n  (loop [max_counter num f_result [1 1]]\n    (if (= (count f_result) max_counter)\n      f_result\n      (recur max_counter (conj f_result (+ (last f_result) (first (take-last 2 f_result)))))\n      )\n    )\n  )","user":"56826c2fe4b0945ebc182a92"},{"problem":26,"code":"#(->> (iterate (fn [[x y]] [y (+ x y)]) [1 1])\n       (map first)\n       (take %))","user":"55e55810e4b050e68259b46a"},{"problem":26,"code":"(fn [initial-x] (loop [x initial-x, result '(1 1)]\n                 (if (pos? (- x 2))\n                   (recur (dec x)(conj result (+ (first result) (second result))))\n                   (reverse result)\n                   )))","user":"57d60d83e4b0bd073c2023c2"},{"code":"#(let [fib-acc (fn [values size]\n                (if (= (count values) size)\n                    (reverse values)  \n                    (let [next (+ (first values) \n                                  (second values))]\n                      (recur (cons next values) \n                             size))))]\n  (fib-acc '(1 1) %))","problem":26,"user":"4e6defcc535d5021c1a895f8"},{"problem":26,"code":"(fn [how-many?]\n   (take how-many?\n         (reduce (fn [inicial _]\n                   (conj inicial (apply + (take-last 2 inicial))))\n                 [1 1]\n                 (range how-many?))))","user":"58a34442e4b02bd94d917ef2"},{"problem":26,"code":"(fn fib [n] (if (= n 1) [1]\n                (if (= n 2) [1,1]\n                  (let [s (fib (- n 1))] (conj s (+ (nth s (- n 2)) (nth s (- n 3))))))))","user":"5651de3ee4b0f9d632dd845b"},{"code":"(fn fib [n]\n  (if (= n 2) '(1 1)\n    (let [prev (fib (- n 1))]\n      (concat prev (list (+ (last prev) (second (reverse prev))))))))","problem":26,"user":"529dc421e4b04e0c58e87b80"},{"code":"#(take % ((fn fib[x y] (cons x (lazy-seq (fib y (+ x y))))) 1 1))","problem":26,"user":"4ec82bd8535d6d7199dd36f2"},{"problem":26,"code":"(fn [x]\n  (loop [n 2 fib '(1 1)]\n    (if (>= n x)\n      (reverse fib)\n      (recur (inc n) (conj fib (+ (first fib) (second fib)))))))","user":"56032173e4b04bb52996e1b3"},{"problem":26,"code":"#(take %\n  (map first \n       (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       ) \n       )","user":"55d64526e4b0e31453f64a97"},{"problem":26,"code":"(fn fib [x] (\n             if (= x 2) \n             [1 1] \n             (let [f (fib (dec x))] (conj f (apply + (take-last 2 f))))\n            )\n)","user":"57762befe4b0979f8965162f"},{"problem":26,"code":"(fn [a] \n   (take a ((fn fib ([] (fib 1))\n\t              ([x] (fib x 1))\n\t\t\t\t  ([x y] (cons x (lazy-seq (fib y (+ x y)))))))))","user":"546a65fce4b00cfc9eacc153"},{"problem":26,"code":"(fn [n] \n  (reduce \n   (fn \n     [acc _] \n     (conj acc (+ (last acc) (last (butlast acc))))) \n   [1 1]\n   (range 3 (inc n))))","user":"60ade833e4b00e9e6653c494"},{"code":"(fn f [x] (\r\n(fn t [ x & [li i tmp] ] \r\n\t( if (== x i) (list (+ (first tmp) (second tmp)))\r\n\t\t(if (< i 3) (cons 1 (t x li (+ 1 i) (list 1 (first tmp))))\r\n\t\t\t(cons (+ (first tmp) (second tmp)) (t x li (+ 1 i) (list (+ (first tmp) (second tmp)) (first tmp))))))\r\n) x () 1 '(0,1)))","problem":26,"user":"4f8dbae2e4b02e764a0a51b3"},{"problem":26,"code":"#(loop [x 1 y 1 xs nil n %] (if (= n 0) (reverse xs) (recur (+ x y) x (cons y xs) (dec n))))","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn [x]\n  (take x\n     ((fn  fib [a b]\n        (cons  a (lazy-seq  (fib b (+ a b))))) 1 1 )))","problem":26,"user":"51696bcde4b03f62cda68ce7"},{"code":"(fn  [x]\n\t(loop [lx 2\n\t\t   res '(1 1)]\n\t\t(if (<= x lx) (reverse res)\n\t\t\t(recur (inc lx) (conj res (+ (first res) (first (next res))))))\n\t)\n)","problem":26,"user":"5356a324e4b04ce2eb3ed269"},{"code":"(fn fib [a b n] (if (= n 0) () (cons a (fib b (+ a b) (dec n))))) 1 1","problem":26,"user":"52f882c4e4b047fd55836fd1"},{"problem":26,"code":"; Ah, the fibonacci sequence. A sequence made for recursion. This'll be fun.\n(fn fibo [n]\n  (if (= 1 n)\n    [1]\n    (if (= 2 n)\n      [1 1]\n      ;else, recursively solve up to the last element, then generate that from the previous ones.\n      (let [allbutone (fibo (- n 1))]\n        (conj allbutone (+ (nth allbutone (- n 2)) (nth allbutone (- n 3))))\n      )\n    )\n  )\n)","user":"569f99cce4b0542e1f8d1497"},{"problem":26,"code":"#(loop [cnt % acc '(1 1)]\n  (if (<= cnt 2)\n    (reverse acc)\n    (recur (dec cnt) (conj acc (+ (first acc) (second acc))))))","user":"56798d83e4b05957ce8c618b"},{"problem":26,"code":"(fn [x]\n   (let [fib-fn (fn [n acc prev curr]\n                  (let [next (+ prev curr)]\n                    (if (= x n)\n                      acc\n                      (recur (+ n 1) (conj acc next) curr next))))]\n      (cond\n         (= x 1) [1]\n         (= x 2) [1 1]\n         (> x 2) (fib-fn 2 [1 1] 1 1))))","user":"5243233fe4b076204b44faac"},{"problem":26,"code":"(fn [limit]\n  (reverse (into () (loop [coll [1 1]]\n                      (if (< (count coll) limit)\n                        (recur (conj coll (+ (last coll) (get coll (- (count coll) 2)))))\n                        coll)))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":26,"code":"(fn [numFib]\n            (reduce \n                    (fn [fibList number]\n                        (conj fibList \n                            (+   \n                            \n                                (nth fibList \n                                    (- (count fibList) 1)\n                                )\n                                (nth fibList \n                                    (- (count fibList) 2)\n                                )   \n                            )\n                        )\n                    ) \n                    [1 1] (range (- numFib 2))\n            )\n        )","user":"5e23ca7fe4b05b4b01516144"},{"code":"(fn fibo [fib] (loop [res [1 1]] (if (= fib (count res)) (reverse res) (recur (cons (+ (first res) (second res)) res)))))","problem":26,"user":"52a5f1e6e4b0c58976d9abf4"},{"code":"#(loop [s '(1 1)]\n  (cond\n    (<= % 0) \n      '()\n    (= % 1) \n      '(1)\n    (= % (count s))\n      (reverse s)\n    :else\n      (recur (cons (+ (first s) (second s)) s))))","problem":26,"user":"4eee5459535d93acb0a668c5"},{"problem":26,"code":"(fn [fibcount]\n  (if (< fibcount 2)\n    (if (= fibcount 1)\n      '(1)\n      '())\n    (loop [fibseq [1 1]]\n      (if (= fibcount (count fibseq))\n        (seq fibseq)\n        (let [next (+ (last fibseq) (last (pop fibseq)))]\n          (recur (conj fibseq next)))))\n    ))","user":"57c4a231e4b05aa3c4741cd5"},{"problem":26,"code":"#(loop [prevSum 0, currSum 1, currIdx 0, ret []]\n   (if (= currIdx %)\n     ret\n     (recur currSum (+ currSum prevSum) (+ currIdx 1) (conj ret currSum))))","user":"566cd399e4b0a866af6896c3"},{"code":"(fn fib [n] (condp = n 1 [1] 2 [1 1] (let [xs (fib (dec n))] (conj xs (+ (last xs) (last (butlast xs)))))))","problem":26,"user":"508157b2e4b0946d0443855c"},{"problem":26,"code":"(fn [x]\n  (if (= x 1)\n    '(1)\n    (loop [counter 2\n           fiblist '(1 1)]\n      (if (= counter x)\n        (reverse fiblist)\n        (recur (+ counter 1)\n               (conj fiblist (+ (first fiblist)\n                                (first (rest fiblist)))))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":26,"code":"(fn [length] (map first (take length (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"550174b5e4b07d26eda61d73"},{"problem":26,"code":"#(take % ((fn fib \n          ([]\n           (fib 1 1))\n          ([a b]\n           (lazy-seq (cons a (fib b (+ a b))))))))","user":"58740c18e4b01531a375ea49"},{"problem":26,"code":"(fn [n]\n(loop [ x [1 1]] \n    (if (<= (count x) (dec n)) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"573eb8f2e4b05c31a32c082f"},{"problem":26,"code":"#(letfn [(fib \n          ([]\n            (fib 1 1))\n          ([a b]\n            (lazy-seq (cons a (fib b (+ a b))))))]\n   (take % (fib)))","user":"5578c67fe4b05c286339e08d"},{"problem":26,"code":"#(map (fn fib [n] (case n 1 1 2 1 (+ (fib (dec n)) (fib (- n 2))))) (range 1 (inc %)))","user":"53286f84e4b09d4e7a9b5505"},{"code":"#(take % \n       ((fn fib [a b] \n          (cons b (lazy-seq (fib b (+ a b))))) 0 1))","problem":26,"user":"52090654e4b0e152394d76ee"},{"problem":26,"code":"(fn fibo [x] \n  (if (= x 1) [1]\n    (if (= x 2) [1 1]\n      (conj (fibo (- x 1)) \n                  (+ \n                   (last (fibo (- x 1)))\n                   (last \n                    (fibo (- x 2)\n                          )\n                    )\n                   )\n                  )\n            \n      )\n    )\n  )","user":"57126104e4b09c608db70458"},{"problem":26,"code":"(fn fib [x]\n             (loop [n 0, x (dec x), res [1]]\n               (if (zero? x)\n                 res\n                 (recur (last res) (dec x) (conj res (+ (last res) n))))))","user":"548166b3e4b0e286459a116d"},{"problem":26,"code":"(fn [x]\n  (loop [seq [1 1]]\n    (if (>= (count seq) x)\n      (take x seq)\n      (recur (conj seq (+ (last seq), (last (drop-last seq)))))\n      )))","user":"5e266943e4b05b4b01516178"},{"problem":26,"code":"(fn fib [n] \n (letfn [(fib-iter [n result]\n  (if (= n 2)\n    result\n    (let [ct (count result)]\n      (let [last (nth result (- ct 1))\n        penultimate (nth result (- ct 2))]\n        (recur (- n 1) (conj result (+ last penultimate)))))))]\n   (fib-iter n [1 1])))","user":"55c5153de4b0e31453f649ad"},{"problem":26,"code":"(\n            fn [count]\n            (loop [cnt (- count 1)\n                   prev 1\n                   prev-prev 0\n                   seq [1]]\n              (if (zero? cnt)\n                seq\n                (recur (dec cnt) (+ prev-prev prev) prev (conj seq (+ prev-prev prev)) )))\n            )","user":"5ab575f8e4b073f17744263d"},{"problem":26,"code":"(fn fibx [n]\n  (case n\n    1 '(1)\n    2 (concat (fibx 1) '(1))\n    (let [l (fibx (- n 1))]\n        (concat l (list (+ (last l) (last (butlast l))))))))","user":"58b86162e4b0ebc645576d97"},{"problem":26,"code":"(fn [n]\n  (loop [fib [1 1]]\n    (if (= (count fib) n)\n      fib\n      (recur (conj fib (reduce + (take-last 2 fib)))))))","user":"5aa7e6eae4b0d174b936c8c0"},{"problem":26,"code":"(fn check [x & [y]] \n   (if (= x 0) \n     (do (reverse y)) \n     (do (if (= y nil) \n           (do (check (- x 1)  (conj '() 1))) \n           (do (if (= (butlast y) nil) \n                 (do (check (- x 1)  (conj y 1))) \n                 (do (check (- x 1) (conj y (+ (first y) (second y)))))\n                 )\n            )\n           )\n     )\n   )\n  )","user":"580014d7e4b0a837a8b30c32"},{"problem":26,"code":"#(loop [counter % result '(1 1)]\n      (if (= counter 2)\n        (reverse result)\n        (recur (dec counter)\n          (conj result (+ (first result) (second result))\n          ))))","user":"56747b46e4b05957ce8c613b"},{"problem":26,"code":"(fn [n] (loop [r [1 1]] (if (<= n (count r)) r (recur (conj r (apply + (take 2 (reverse r))))))))","user":"5995f8ade4b0b211ea3aaae9"},{"code":"(fn [x]\n  (last (take\n   (- x 1)\n   (iterate\n    #(conj\n      %\n      (apply + (take-last 2 %)))\n    [1 1]))))","problem":26,"user":"524f61bee4b0541d1855b80f"},{"problem":26,"code":"(fn fibo-2 [k]\n  (if (= k 0)\n    (list)\n    (if (= k 1)\n      (list 1)\n      (seq (reduce (fn [x y]\n                (let [last-element (last x)\n                      previous-last-element (get x (- (count x) 2))]\n                  (conj x (+ last-element previous-last-element))\n                  ))\n              [1 1] (range (- k 2))\n              )))))","user":"5c9b848fe4b048ec896c5acf"},{"problem":26,"code":"(fn [n]\n  (loop [out '(1 1)]\n    (if (= n (count out))\n      (reverse out)\n      (recur (cons (+ (first out) (first (rest out))) out)))))","user":"5993b28ee4b0b211ea3aaaba"},{"code":"#(map (fn fib [n] (if (<= n 2) 1 (+ (fib (dec n)) (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"510fe537e4b04c71fce993dd"},{"problem":26,"code":"(fn [y] (map (fn fib [x] (if (or (= x 0) (= x 1)) x (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ 1 y))))","user":"5509b434e4b06e50f9beb11e"},{"code":"#(loop [n %\n        acc '(1 1)]\n   (let [number (+ (first acc) (second acc))]\n     (cond \n      (<= n 2) (reverse acc)\n      :else (recur (dec n) (conj acc number)))))","problem":26,"user":"51d67516e4b0154f82ab92f0"},{"code":"#((fn [n col]\n     (if (zero? n) (drop 1 col)\n         (recur (dec n) (conj col (apply + (take 2 (reverse col)))))))\n   (dec %) [0 1])","problem":26,"user":"534e9ed4e4b084c2834f4ab8"},{"problem":26,"code":"(fn [n] (letfn [(fib [n]\n                     (if (or\n                           (= n 1)\n                           (= n 2))\n                       1\n                       (+ (fib (- n 1)) (fib (- n 2)))\n                       ))\n                     (numbers [] (iterate inc 1))\n                     (fibs [] (map fib (numbers)))\n                      ] (take n (fibs))))","user":"54857657e4b0e286459a11ac"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate\n             (fn [[x y]] [y (+ x y)]) \n             [1 1])))","user":"5be70bd5e4b0f319e2d7ec53"},{"problem":26,"code":"(fn fib [x] \n  (if (= 1 x) [1]\n  \t(if (= 2 x) [1 1]\n      (conj (fib (dec x)) (+ ( (comp first reverse) (fib (dec x))) ( (comp second reverse) (fib (dec x))) )    )\n    )\n  )\n  \n)","user":"553b8fdbe4b09218d5f45004"},{"code":"(fn [n] \r\n  (loop [cnt n acc '(1 1)]\r\n    (if (zero? cnt)\r\n      (take n (reverse acc))\r\n      (recur (dec cnt) \r\n             (conj acc \r\n                   (+ (first acc) (second acc)))))))","problem":26,"user":"4dea9406535d08e6dec9fe01"},{"code":"(fn [x]\n  (reduce (fn [xs x]\n      (conj xs (+ (last xs) (nth xs (- (count xs) 2))))\n   ) [1 1] (range (dec (dec x)))))","problem":26,"user":"52c61564e4b0c2d177d62109"},{"problem":26,"code":"(fn\n  [n]\n (take n (map first (iterate (fn [[z x]] [x (+ z x)]) [1 1] )) )\n )","user":"57f81532e4b0d3187e900914"},{"problem":26,"code":"(fn fib [n]\n  (loop [out [1 1] ]\t;binds values each time called, initially out is empty\n    (if (>= (count out) n)\n      out  ;done\n      (recur\n        ; pass in current output\n        (conj out (+ (last out) (last (drop-last out)) ) )\n        )\n    )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"code":"(fn [x]\n  (loop [s  [1]\n         c  1\n         y  0\n         z  1]\n    (if (< c x)\n      (recur (conj s (+ y z)) (inc c) z (+ y z))\n      s)))","problem":26,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"code":"(fn fib [n]\n  (take n ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","problem":26,"user":"4f611127e4b0defedf855fb4"},{"code":"#(take %1   ((fn rfib [a b]    \n    (lazy-seq \n      (cons a (rfib b (+ a b))))) \n1 1))","problem":26,"user":"513caa36e4b0b86ece9f3229"},{"problem":26,"code":"(fn [c] \n  (take c (map first (iterate (fn [[f l]] [l (+ f l)]) [1 1]))))","user":"5880e38fe4b0f1effa3b7625"},{"code":"(fn [x]\n   (letfn [(fib_r [x] \n              (if (< x 2) \n                (identity 1)\n                (+ (fib_r (- x 1)) (fib_r (- x 2)))\n                )\n           )]\n          (map fib_r (range x))\n     )\n   )","problem":26,"user":"521f0106e4b0e6c71e0c0bc4"},{"problem":26,"code":"(fn fib [c]\n  (loop [acc [1]\n         n 1]\n    (if (= c (count acc)) acc\n      (recur (conj acc n) (+ n (nth acc (dec (count acc))))))))","user":"595bbab7e4b066ee0a44afe0"},{"problem":26,"code":"(comp (partial map (fn fib [n]\n  (case n\n    0 1\n    1 1\n    (+\n      (fib (- n 1))\n      (fib (- n 2))\n      )\n    ))) range)","user":"5fe85417e4b05ac5b16ea194"},{"code":"#(loop [n % xs [1 1]]\n  (if (= n 2)\n    xs\n    (recur (dec n) (conj xs (reduce + (take-last 2 xs))))))","problem":26,"user":"4fca4c37e4b0ee37620e184f"},{"code":"(let [fib-fn (fn [x self]\n                   (if (<= x 1)\n                     1\n                     (+ (self (- x 1) self) (self (- x 2) self))))\n        calc-fib (fn [x] (fib-fn x fib-fn))\n        seq-fib (fn [size x xs]\n                  (if (= (count xs) size)\n                    xs\n                    (recur size (- x 1) (concat xs [(calc-fib (- x 1))]))))]\n    \n    (fn [x]\n      (reverse (seq-fib x x []))))","problem":26,"user":"4feaa579e4b0140c20fb9c0b"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a)(last (butlast a))))) [1 1] (range (- % 2)))","user":"52c48ec6e4b0c2d177d620dd"},{"problem":26,"code":"#(map (fn fab [x] \n       (if(or (zero? x)\n              (= 1 x)\n              )\n         1\n         (+ (fab (dec x))\n            (fab (dec (dec x))))\n         ))\n       (for [ y (range %)] y))","user":"5cbd5b42e4b026601754b9f6"},{"problem":26,"code":"(fn [n] \n  (loop [i (list 1 1)] \n    (if \n      (= n (count i)) \n      (reverse i) \n      (recur (conj i (+ (first i) (second i) ) ) ) \n      ) \n    ) \n  )","user":"548018efe4b0c51c1f4d7335"},{"code":"(fn [max] (loop [fib '[1 1] cnt 2]\n  \t(if (= cnt max)\n  \t fib\n     (recur (conj fib (+ (first (reverse fib)) (second (reverse fib)))) (inc cnt)))))","problem":26,"user":"5251b11be4b0541d1855b87b"},{"code":"(fn fibseq [n](if (<= n 1)'(1)(concat(fibseq (dec n))[((fn fib [m](if (<= m 2)1(+ (fib (- m 1)) (fib (- m 2)))))n)])))","problem":26,"user":"4f566178e4b0a7574ea71820"},{"code":"(partial #(if (= %2 0)\n             (reverse %1)\n             (recur (conj % (+ (or (first %1) 1)\n                               (or (second %1) 0)))\n                    (dec %2)))\n          '())","problem":26,"user":"51105c7fe4b04c71fce993ef"},{"problem":26,"code":"#(take %\n        (letfn\n          [(fib-go [a b] \n             (lazy-seq (cons a (fib-go b (+ a b)))))]\n          (fib-go 1 1)))","user":"5ca19c10e4b048ec896c5b81"},{"code":"(fn [n]\n    (loop [result '(1 1)]\n      (if (= (count result) n)\n        (reverse result)\n        (recur (conj result (apply + (take 2 result)))))))","problem":26,"user":"4e7e8684535db169f9c79717"},{"problem":26,"code":"(fn fib-gen [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) 1 1 )))","user":"56942939e4b0dcc4269f4114"},{"problem":26,"code":"(fn [n]\n  (take n\n\t((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","user":"57644395e4b0994c1922fbf2"},{"problem":26,"code":"(fn fib [n] (take n (map :a (reductions (fn [{:keys [a b]} _] {:a b :b (+ a b)}) {:a 1 :b 1} (range)))))","user":"5b0d5619e4b0cc2b61a3bdf0"},{"code":"(fn [n] (loop [n n i 2 s '(1 1)] (if (>= i n) (reverse s) (recur n (inc i) (conj s (apply + (take 2 s)))))))","problem":26,"user":"515624efe4b04360f2428e5f"},{"code":"#(loop [current %\n         result [1]]\n    (if (= 1 current)\n      result\n      (recur (dec current) (conj result (reduce + (take-last 2 result))))))","problem":26,"user":"5006b262e4b0678c553fc48a"},{"problem":26,"code":"(fn fib\n    ([] (fib 1 1))\n    ([n] (take n (fib)))\n    ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n1 n0))))))","user":"558053b1e4b05c286339e0e9"},{"problem":26,"code":"#(loop [a 1\n        b 1\n        n %\n        r []]\n       (if (= 0 n)\n         r\n         (recur b (+ a b) (- n 1) (conj r a))))","user":"58b36131e4b0ebc645576d21"},{"problem":26,"code":"(fn [x] \n\t(when (= x 1) [1])\n\t(loop [start 2 ret [ 1 1 ]]\n\t\t(if (= x start) \n\t\t\tret \n\t\t\t(recur (inc start)  (conj ret (+ (first (reverse ret)) (second (reverse ret))))))))","user":"5737edb0e4b0cd1946bd1050"},{"code":"(fn [n] (loop [fsmall 1 flarge 1 i 0 result []]\n          (if (= i n) result\n            (recur flarge (+ fsmall flarge) (inc i) (conj result fsmall)))))","problem":26,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":26,"code":"(fn fib [n]\n  (loop [n n\n         x 1\n         y 1\n         fibs []]\n    (if-not (> n 0)\n      fibs\n      (recur (dec n) \n             y \n             (+ x y) \n             (conj fibs x)))))","user":"524cd06ae4b0752c4cb68cca"},{"code":"(fn fibonacci-list [x]\r\n    (loop [count x\r\n            list '()]\r\n        (if (> count 0)\r\n            (recur (dec count) (conj list (\r\n                (fn fibonacci [xs]\r\n                (if (<= xs 2)\r\n                  1\r\n                  (+ (fibonacci (- xs 1)) (fibonacci (- xs 2))))\r\n                )\r\ncount) ))\r\n        list)))","problem":26,"user":"4fc56e68e4b0ee37620e17f5"},{"code":";((fn fibn [l,i, stop] (if (> stop 0) (fibn (conj l i ) (+ (last l) i ) (dec stop))  ) l ) [1] 1 5)\n\n\n(partial (fn fibn [l,i, stop] (if (> stop 1) (fibn (conj l i ) (+ (last l) i ) (dec stop)) l ) ) [1] 1)","problem":26,"user":"533a2f7be4b0e30313ee6cb8"},{"code":"(fn fib [n]\n  (if (= n 1)\n    (list 1)\n    (if (= n 2)\n      (list 1 1)\n      (let [theLast (last (fib (dec n)))\n            nextToLast (last (fib (dec (dec n))))]\n      (concat (fib (dec n))\n              (list (+ theLast nextToLast)))))))","problem":26,"user":"504dffe2e4b078edc5f5938b"},{"code":"#(map \n (fn fib [n] (\n\tif (or (= 1 n) (= 2 n))\n         1\n         (+ (fib (- n 1)) (fib (- n 2)))))\n (range 1 (+ 1 %)))","problem":26,"user":"5118acfbe4b046de85f62a4b"},{"problem":26,"code":"(fn [n]\n  (loop [a 0, b 1, s []]\n   (if (= n (count s))\n     s\n     (recur b (+ a b) (conj s b)))))","user":"549931fbe4b0b312c081ff8a"},{"code":"#(loop [n % i 2 res [1 1]] \n  (if (= n i) res \n    (recur n (inc i) (conj res (reduce + (take-last 2 res))))))","problem":26,"user":"4f1427f8535d64f603146435"},{"code":"(fn fibs [x]\n  (loop [vals [1], n 1, a 1, b 1]\n    (if (= n x)\n      vals\n    (recur (conj vals b) (inc n) b (+ a b)))))","problem":26,"user":"4ecbff2f535df97575fdabe4"},{"code":"(fn [n]\n  (take n\n        (map first ((fn fib [a b]\n                      (lazy-seq\n                       (cons [a b] (fib b (+ a b))))) 1 1))))","problem":26,"user":"52f8f4d1e4b047fd55836fde"},{"problem":26,"code":"#(take % (map first (iterate\n        (fn [[a b]][b (+ a b) ])\n        [1 1])))","user":"58ff76a5e4b0438e51c2cff2"},{"code":"#(map\n(fn fib [x]\n  (if (< x 2)\n    1\n    (+ (fib (- x 2))\n       (fib (dec x)))))\n(range %))","problem":26,"user":"4e6a6d12535d8ccf87e9fee2"},{"problem":26,"code":"#(cond\n  (= % 1) [1]\n  (= % 2) [1 1]\n  (> % 2) (reduce (fn [v _]\n                    (into v [(+\n                              (last v)\n                              (last (butlast v)))]))\n                  [1 1]\n                  (range (- % 2)))\n  )","user":"57a9e274e4b0b8559636fc5d"},{"code":"(fn fib [n]\n  (loop [seq [1 1] first 1 second 1 rem (- n 2)]\n    (if (= 0 rem) seq\n      (let [next (+ first second)]\n        (recur (conj seq next) second next (dec rem))))))","problem":26,"user":"4fb266a5e4b081705acca28c"},{"code":"(fn [x]\n  (let [fibs ((fn rfib [a b]\n    (cons a (lazy-seq \n      (rfib b (+ a b)))))\n    1 1)]\n    (take x fibs)))","problem":26,"user":"4fae0b85e4b081705acca245"},{"code":"(fn [n]\n  (loop [n n\n         acc [1 1]]\n    (if (<= n 2) acc\n        (recur (dec n) (conj acc\n                             (reduce +\n                                     (take-last 2 acc)))))))","problem":26,"user":"4dbba163535d3f4042261ecc"},{"problem":26,"code":"(fn [i]\n  (loop [ r []\n         x 1\n         y 1\n         nbr 1]\n    (if (> nbr i) r\n                   (recur (conj r x) y (+ x y) (inc nbr)))))","user":"503c90aae4b06c4e0e1fa24b"},{"problem":26,"code":"#(take % \n       (map first\n            (iterate (fn [[a b]] (vec [b (+ a b)])) [1 1])\n       )  \n )","user":"585481e0e4b07779d46863fe"},{"code":"(fn fibseq [x]\r\n  (if (= x 1)\r\n    [1]\r\n    (conj\r\n      (fibseq (- x 1))\r\n      ((fn fib [y]\r\n  (cond\r\n    (= y 1) 1\r\n    (= y 2) 1\r\n    :else (+\r\n            (fib (- y 1))\r\n            (fib (- y 2))\r\n            )\r\n    )\r\n  ) x)\r\n    )\r\n  )\r\n)","problem":26,"user":"4ddbd600535d02782fcbe9fb"},{"code":"(fn main [n]\r\n    (\r\n      (fn fib [s n] \r\n        (if (= n 0) \r\n          s \r\n          (fib \r\n            ((fn fibnext [s] (reverse (conj (reverse s) (apply + (take 2 (reverse s)))))) s) (dec n) )\r\n        )\r\n) '(1 1) (- n 2))\r\n\r\n)","problem":26,"user":"4e70b881535d5021c1a8963f"},{"problem":26,"code":"(fn gen-fib [n] \n  (let [fib (fn [[x y]] [y (+' x y)])\n        fib-xs (map first (iterate fib [1 1]))\n        ]\n    (take n fib-xs)))","user":"5a08f951e4b01bb0ae8afdfd"},{"code":"(fn fib \n  ([num] (fib num 1 ()))\n  ([num current output]\n    (if (> current num)\n      (reverse output)\n   (if (or (= current 1) (= current 2))\n     (fib num (+ current 1) (conj output 1))\n     (fib num (+ current 1) \n          (conj output (+ (nth output 1) (nth output 0))))))))","problem":26,"user":"4fd9d162e4b05e33b9224f3c"},{"code":"(fn [n]\n  (let [fib (fn fib[n]\n              (if (or (zero? n)\n                      (== 1 n))\n                1\n                (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range n))))","problem":26,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":26,"code":"(fn [x]\n  (cond\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (loop [n (- x 2) fs [1 1]]\n            (if (<= n 0)\n              fs\n              (let [a (last fs)\n                    b (last (butlast fs))]\n                (recur (dec n) (conj fs (+ a b))))))))","user":"5a3d7afae4b0447ef91cc5a6"},{"problem":26,"code":"(fn [n]\n  (take n \n    ((fn fib [x y]\n      (lazy-seq\n        (cons x \n          (fib y (+ x y))\n))) 1 1)))","user":"51508905e4b098b221effc2d"},{"problem":26,"code":"#(take % ((fn fib\n  ([] \n   (fib 1 1))\n  ([x y] \n   (lazy-seq (cons x (fib y (+ x y))))))))","user":"5e4d98dce4b027a2e10ac0a7"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 1 j 1 acc [1 1]]\n    (if (= (count acc) n)\n      acc\n     (recur j (+ i j) (conj acc (+ i j))))))","user":"53ad2bbbe4b047364c044464"},{"problem":26,"code":"(fn fib [n] \n  ((fn fibp [n xs a b]\n     (if (= n 0)\n       (reverse xs)\n       (fibp (- n 1) (conj xs (+ a b)) (+ a b) a))) n '() 0 1))","user":"5856980de4b0f14aab7c86f7"},{"code":"#(take % ((fn fib-seq [a b] (cons a (lazy-seq (fib-seq b (+ a b))))) 1 1))","problem":26,"user":"52a1c6cee4b04e0c58e87be1"},{"problem":26,"code":"#(loop [x '(1 1)]\n  (if (< (count x) %)\n    (recur (conj x (+ (first x) (second x))))\n    (reverse x)))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [x] (map first (take x (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5261aebbe4b03e8d9a4a7066"},{"problem":26,"code":"#(rest (take (inc %) ((fn rfib [a b]\n                         (cons a (lazy-seq (rfib b (+ a b)))))\n                        0 1)))","user":"5a2c20c3e4b09cafd31c7f51"},{"problem":26,"code":"(fn [length] (loop [fib-list [1 1]]\n               (if (= (count fib-list) length)\n                      fib-list \n                      (recur (conj fib-list (+ (last fib-list) (last (butlast fib-list)))))\n                        )))","user":"5bb3c9a8e4b0a20761a2352f"},{"problem":26,"code":"(fn [l c] \n  (if (= c 2) \n      (reverse l) \n      (recur (conj l (+ (first l) (second l))) (dec c)))) \n'(1 1)","user":"56c26880e4b05cc29241ee81"},{"problem":26,"code":"#(map \n  (fn fib [x] (cond\n (= x 0) 1\n (= x 1) 1\n (> x 1) (+ \n        (fib (dec x)) \n        (fib (dec (dec x))))))\n  (range %))","user":"587c738de4b01531a375eb1a"},{"code":"#(take % ((fn fib [a b]\n  (lazy-seq (cons a (fib b (+ b a)))))\n1 1))","problem":26,"user":"4fbef9a6e4b081705acca316"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib [i]\n            (if (>= 2 i)\n              1\n              (+ (fib (dec i)) (fib (- i 2)))))]\n    (map fib (take x (iterate #(inc %) 1)))))","user":"5da70ceee4b000c986472c11"},{"code":"(fn [n]\n  (cond (== n 3) '(1 1 2)\n        (== n 6) '(1 1 2 3 5 8)\n        (== n 8) '(1 1 2 3 5 8 13 21)))","problem":26,"user":"50e317a9e4b056122d085d01"},{"code":"(fn fib [n]\n  (cond\n    (= 1 n) \n      [1]\n    (= 2 n) \n      [1 1]\n    :else\n      (conj \n        (fib (- n 1)) \n        (+ \n          (last (fib (- n 1)))\n          (last (fib (- n 2)))))))","problem":26,"user":"508dbd56e4b0f17d83ea26c2"},{"code":"(fn fib [n] \n  \t(cons 1 ((fn fibseq [a b l]\n\t\t\t(if (< l 1) (list ) (cons (+ a b) (fibseq b (+ a b) (- l 1))))        \n\t\t ) 0 1 (- n 1)))\n\t)","problem":26,"user":"4f3bfce2e4b0e243712b1f38"},{"code":"(fn fib [n]\n  (reduce \n    (fn [coll x]\n      (conj coll \n        (+ \n          (last coll) \n          (nth coll (- (count coll) 2))))) \n    [1 1] \n    (range (- n 2))))","problem":26,"user":"4ec34578535dcc7ae8597d51"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (<= n 0) nil\n    (= n 1) '(1)\n    :else (loop [x '(1 1) k 2]\n            (if (= k n)\n              (reverse x)\n              (recur (cons (+ (first x) (second x)) x) (inc k))))))","user":"56714922e4b05957ce8c6107"},{"problem":26,"code":"(fn [n] (map (fn f [i] (if (< i 2) 1 (+ (f (- i 1)) (f (- i 2))))) (range n)))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":26,"code":"#(loop [index 1 result [1]] (if (>= index %) result (recur (inc index) (conj result (reduce + (take-last 2 result))))))","user":"5c275d18e4b07e362c2305cd"},{"problem":26,"code":"(fn [n] (let [fib (iterate \n                   #(cons \n                     (+ (first %) (second %))\n                     %)\n                   '(1 1))]\n          (reverse (nth fib (- n 2)))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"code":"(fn [n]\n           (let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n             (take n fibs)))","problem":26,"user":"4db6d993535d1e037afb2180"},{"problem":26,"code":"(fn [length] \n    (map-indexed\n      (fn fib [index item]\n          (if (= index 1) \n              1\n            (if (= index 0)\n                1\n              (+ (fib (- index 1) 0) (fib (- index 2) 0)))))\n      (repeat \n       length\n       1\n)\n\n      )\n     )","user":"5524f21fe4b0882d96d091c7"},{"problem":26,"code":"#(loop [r '(1 1) n (- % 2)]\n   (if (= n 0)\n     (reverse r)\n     (recur (cons (+ (first r) (second r)) r) (dec n))))","user":"553d86cfe4b0a04f792994e2"},{"code":"#(take % '(1 1 2 3 5 8 13 21 34))","problem":26,"user":"4f580a9fe4b0a7574ea71844"},{"code":"#(map (fn rfib\n  [n]\n  (if (or (= 1 n) (= 0 n))\n    1\n    (+ (rfib (dec n)) (rfib (- n 2)))\n    ))\n   (range %1))","problem":26,"user":"536aa86de4b0243289761eb1"},{"code":"#(loop [n 1 n1 0 l [] nn 0]\n  (if (= nn %)\n    l\n    (recur (+ n n1) n (conj l n) (+ nn 1))))","problem":26,"user":"4e634eb9535d8ccf87e9fe63"},{"problem":26,"code":"(fn fibonacci \n  ([length]\n   (if (< length 0)\n     []\n     (fibonacci (dec length) [1])))\n  ([length series]\n   (if (= length 0)\n     series \n     (recur \n      (dec length)\n      (let \n        [n1 (dec (count series))\n         n2 (dec n1)]\n        (conj series (+ (last series) (nth series n2 0))))))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":26,"code":"(fn fib [x]\n  (take x\n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","user":"54cbd6bae4b057c6fda3a282"},{"code":"(fn [xcount]\n  (loop [first 1 second 1 fib-seq [1] c xcount]\n    (if (< c 2)\n      fib-seq\n      (recur second (+ first second) (conj fib-seq second) (- c 1)))))","problem":26,"user":"4f046d70535dcb61093f6bc5"},{"problem":26,"code":"(fn fib [k] (take k (flatten (iterate (fn [[m n]] [(+ m n), (+ m (* 2 n))]) [1 1]))))","user":"5e30dbd5e4b05b4b0151621d"},{"problem":26,"code":"(fn my-fib\n  ([n] (my-fib '() n))\n  ([out c]\n    (cond\n      (= c 0)           out\n      (= '() out)       (my-fib '(1) (dec c))\n      (= '(1) out)      (my-fib '(1 1) (dec c))\n      true              (my-fib (concat out [(reduce + (take-last 2 out))]) (dec c))\n    )\n  )\n )","user":"53edb628e4b0d648e757f4c8"},{"problem":26,"code":"#(reduce (fn [fiblist n] (cond \n                          (= n 0) [1]\n                          (= n 1) [1 1]\n                          :else (conj fiblist (+ (last fiblist) (nth fiblist (- n 2))))\n                          )\n           )\n         [] (range %))","user":"5744d088e4b009280f9f2b41"},{"code":"(fn [nn] (loop [n (- nn 2) r '(1 1)] (if (= n 0) (reverse r) (recur (- n 1) (conj r (+ (first r) (nth r 1) ) ) ) ) ) )","problem":26,"user":"4e5206ec535d302ef430da6c"},{"code":"(fn first-n-fib [n]\r\n  (take n \r\n    (map second \r\n      (iterate (fn [coll] (vector (second coll) (+ (first coll) (second coll)))) [0 1] ))))","problem":26,"user":"4fd170fce4b04c3a95aa0411"},{"code":"(fn [n] \n  (loop [result [] x n a 1 b 0]\n    (if (> x 0)\n      (recur (conj result a) (dec x) (+ a b) a)\n      result)))","problem":26,"user":"517d1018e4b0f5e87c18f25e"},{"problem":26,"code":"(fn [n]\n    (rest (reverse \n      (loop [cnt n res '(0) prev 1 prev2 0 ]\n       (if (zero? cnt)\n          res\n          (recur (dec cnt) (conj res prev) (+ prev prev2) prev)\n       )\n      )\n    )))","user":"574986cae4b009280f9f2b9c"},{"problem":26,"code":"(fn [i]\n  (seq (loop [v [1 1]]\n         (if (= (count v) i)\n         v\n         (recur (conj v (reduce + (take-last 2 v))))))))","user":"59f38703e4b0966464fe6a9e"},{"problem":26,"code":"(fn [n]\n  (loop [previous 0, current 1, numbers []]\n    (if (= (count numbers) (- n 1))\n      (conj numbers current)\n      (recur current (+ previous current) (conj numbers current)))))","user":"54bd91d7e4b0ed20f4ff6ee2"},{"problem":26,"code":"(fn [n] (map first (reductions (fn [[a b] _] (conj [] b (+ a b))) [1 1] (range 1 n))))","user":"555ac933e4b0deb715856e49"},{"problem":26,"code":"#(take % ((fn fib [a b]\n                      (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"553706d1e4b09218d5f44fc7"},{"problem":26,"code":"#(loop [col [1 1] n %] \n(if (> n 2) \n(recur (conj col (apply + (take 2 (reverse col)))) (dec n) ) \ncol) )","user":"57c7cef5e4b05aa3c4741d0d"},{"code":"(fn [x]\n  (take x\n    ((fn fib\n      ([]    (fib 1 1))\n      ([a b] (cons a (lazy-seq (fib b (+ b a)))))))\n  )\n)","problem":26,"user":"52cdc676e4b07d0d72b2737f"},{"problem":26,"code":"(fn [idx]\n  (take idx\n        ((fn fib [a b]\n            (lazy-seq\n             (cons a (fib b (+ a b)))))\n         1 1)))","user":"55d68726e4b0e31453f64a99"},{"problem":26,"code":"(fn fib [n]\n  (reverse \n   ((fn fib-acc [n l]\n      (if (> n 2) \n        (fib-acc (dec n) (conj l (+ (first l) (first (rest l)))))\n        l)\n      ) n '(1 1))))","user":"594ce8e5e4b07ddc2dafae76"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n)","user":"551e7267e4b030e6a24d00e9"},{"code":"(fn [n] (rest (map first (take (inc n) (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"51030edbe4b00c483ae17700"},{"problem":26,"code":"(fn [n] (loop [a 1 b 1 cnt n acc []] (if (<= cnt 0) acc (recur b (+ a b) (dec cnt) (concat acc [a])))))","user":"57a22c85e4b0c3d858beb8f6"},{"code":"(fn fib [n]\n  (reverse (\n  (fn this [m items]\n    (if (= m 0)\n      items\n      (this (- m 1) \n            (cons (+ \n                   (first items) \n                   (second items)) \n                  items))))\n            (- n 2) '(1 1))))","problem":26,"user":"50dee6bbe4b061dbdced721e"},{"problem":26,"code":"(fn [x]\n\t(letfn [(fibint [target n acc]\n\t\t\t\t(if (= target n) acc\n\t\t    \t  (recur target (inc n) (conj acc (+ (last acc) (second (reverse acc))))))\n\t )]\n\t(case x \n\t 0 []\n\t 1 [1]\n\t 2 [1 1]\n\t (fibint x 2 [1 1])\n\t)))","user":"54227fc6e4b01498b1a71ac0"},{"problem":26,"code":"(fn fib[n] (cond \n        (= n 2) '( 1 1)\n        :else (let [prv (fib (dec n))] (concat prv  [(apply + (take-last 2 prv))]))  \n        ))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":26,"code":"(fn myfibo [x] (if (= x 1) [1] \n                   (if (= x 2) [1 1]\n                               (let [prevfibo (myfibo(- x 1))] (conj prevfibo (+ (last prevfibo) (last (butlast prevfibo) ) ) )  )\n                   )  \n                ))","user":"557db87fe4b05c286339e0cc"},{"code":"(fn [c] (loop [result [] x1 1 x2 1 n c]\n  (if (= 0 n) \n  result\n    (recur (conj result x1) x2 (+ x1 x2) (- n 1))))\n)","problem":26,"user":"4e6e1756535d5021c1a895fe"},{"code":"(fn [index]\n  (map \n    (fn fib [x]\n      (if\n        (> x 2)\n          (+ (fib (- x 1)) (fib (- x 2)))\n          1)) \n    (map (partial + 1)  (range index))))","problem":26,"user":"506afdafe4b0a2a5463de37e"},{"code":"(partial \n  (fn [fibs n]\n    (if (= (count fibs) n)\n      (reverse fibs)\n      (recur \n        (conj fibs \n          (+ \n            (first fibs)\n            (second fibs)))\n        n))) '(1 1))","problem":26,"user":"4ec12577535dfed6da9c6da8"},{"problem":26,"code":";;(fn [n] \n;;  (take n \n;;        (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))\n\n#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","user":"59944e73e4b0b211ea3aaac2"},{"code":"(fn fib\n  [n]\n  (loop [x 1\n         acc '()]\n    (cond\n     (> x n) (reverse acc)\n     (< x 3) (recur (inc x) (conj acc 1))\n     :else (recur (inc x) (conj acc (+ (first acc) (first (rest acc))))))))","problem":26,"user":"515efd01e4b02c55805ea238"},{"problem":26,"code":"(fn f([x](f x 0 1))([x y z](if (pos? x)(conj (f (dec x) (+ z) (+ y z))  z) )))","user":"6096e2d4e4b00e9e6653c3f1"},{"code":"(fn [n] (concat [1 1]\n  (loop [n (- n 2) curr 1 prev 1 result '[]]\n    (if (= n 0)\n        result\n        (recur (dec n) (+ curr prev) curr (conj result (+ curr prev)))))))","problem":26,"user":"50ce09e6e4b0ffc302be4bc6"},{"code":"#(map first (take % (reductions (fn [[a b] _] [(+ a b) a]) [1 0] (repeat nil))))","problem":26,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":26,"code":"#(loop [n1 0\n        n2 1\n        s  []\n        i  0]\n   (if (< i %)\n     (let [sum (+ n2 n1)]\n       (recur n2\n              sum\n              (conj s n2)\n              (inc i)))\n     (seq s)))","user":"55a0ea7de4b0acc240e31505"},{"code":"#(map (fn fibonacci [n]\n  \t\t(if (<= n 2)\n            1\n            (+ (fibonacci (dec n))\n               (fibonacci (- n 2)))))\n      (map (fn [x] (inc x))\n           (range %)))","problem":26,"user":"512e8f5ce4b0b740abc59829"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 a '(1 1)]\n    (if (= i n)\n      a\n      (recur (inc i) (concat a (list (+ (last (butlast a)) (last a))))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(partial\n      #(if (> %2 2)\n   (recur (conj %1\n\t\t      (+ (last %1)\n\t\t\t (last (pop %1))))\n\t\t(- %2 1))\n\t %1) [1 1])","problem":26,"user":"4ec6157b535d6d7199dd36c2"},{"problem":26,"code":"#(loop [x (- % 2)\n        y [1 1]]\n   (if (zero? x)\n     y\n     (recur (dec x) (conj y (apply + (take-last 2 y))))))","user":"5638d2d1e4b0bfe05bf117eb"},{"problem":26,"code":"(fn [n] \n(take n\n  (loop [r [1 1]] \n    (if (< (count r) n)\n      (recur \n      (conj r \n        (+ (last r) (nth r (- (count r) 2)))\n      ))\n      r\n    )\n  )\n)\n)","user":"5f686436e4b02876ed9fd03c"},{"problem":26,"code":"(fn [n]\n  (loop\n    [a 0 b 1 collected [] r n]\n    (if (= r 0)\n      collected\n      (recur b (+ a b) (conj collected b) (dec r)))))","user":"6045582fe4b02d28681c77b6"},{"code":"(fn [n]\n  (let [nums '(1 1 2 3 5 8 13 21)]\n   (take n nums)))","problem":26,"user":"4f039c67535dcb61093f6b3a"},{"problem":26,"code":"(fn FIB [n]\n(let [fib (fn fib [a b]\n  (cons a (lazy-seq (fib b (+ a b)))))]\n\t(take n (fib 1 1))\n  ))","user":"54d1b6ffe4b0e8a36923e5e6"},{"problem":26,"code":"(comp reverse\n      (fn fib\n        [n] (case n\n              0 '()\n              1 '(1)\n              2 '(1 1)\n              (let [[f s & rest] (fib (dec n))]\n                (conj rest s f (+ f s))))))","user":"5a6af351e4b0512ff01cda2e"},{"code":"(fn [n]\r\n     (loop[f1 0 f2 1 resul '()]\r\n        (if(= (count resul) n)\r\n            (reverse resul)\r\n            (recur f2 (+ f1 f2) (cons f2 resul)))))","problem":26,"user":"4e932523535dbda64a6f6b09"},{"code":"(fn kfib\n  [num]\n  (loop [lst [1 1] one 1 two 1]\n    (if (< (count lst) num)\n      (recur (conj lst (+ one two)) two (+ one two))\n      lst)))","problem":26,"user":"534ff8a6e4b084c2834f4ad1"},{"code":"(fn [x] (\r\n        take x\r\n        ((fn fib [a b] \r\n          (cons a (lazy-seq(fib b (+ a b))))) 1 1)))","problem":26,"user":"502113cee4b0ef1d2d4433b8"},{"problem":26,"code":"#(loop [current 1\n        previous 0\n        numbs '()]\n   (if (>= (count numbs) %)\n     (reverse numbs)\n     (recur (+ current previous)\n            current\n            (conj numbs current))))","user":"5dcc4b4ae4b02b31cc3da3c6"},{"code":"#(take % ((fn fibs [x y] (lazy-seq (cons x (fibs y (+ x y))))) 1 1))","problem":26,"user":"4ded27db535d08e6dec9fe0a"},{"code":"#(take % '( 1 1 2 3 5 8 13 21 34))","problem":26,"user":"520b55e2e4b0b022ef140c82"},{"problem":26,"code":"(fn fib [n]\n  (case n\n   \t0 []\n    1 [1]\n    2 [1 1]\n    (let [prev (fib (dec n))]\n      (conj prev (apply + (take-last 2 prev))))))","user":"605b7a90e4b079a07f8593fc"},{"problem":26,"code":"(fn fib\n  ([x] (fib x 1 1 '()))\n  ([x f1 f2 s]\n   (if (= (count s) x)\n     (reverse s)\n     (fib x f2 (+ f1 f2) (conj s f1)))))","user":"60b7ef35e4b0e0fa5f1b4254"},{"code":"(fn fibs\n  ([n] (fibs n 1 1))\n  ([n a b]\n      (if (zero? n)\n        []\n        (cons a (fibs (dec n) b (+ a b))))))","problem":26,"user":"4e7a5395535db169f9c796ab"},{"problem":26,"code":"(fn [n]\n  (loop [times n\n         fib []]\n    (if (> times 0)\n      (let [rev (reverse fib)]\n        (recur (dec times) (conj fib ((fnil + 1 0) (first rev) (second rev)))))\n      fib)))","user":"5d6f063de4b04d129b00f2d1"},{"problem":26,"code":"(fn fibonacci [number]\n  (->> [1 1]\n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take number)))","user":"5712418fe4b09c608db70455"},{"problem":26,"code":"#(if (< % 2)\n  [1]\n  (loop [s [1], n %, a 0, b 1]\n    (if (< n 2)\n      s\n      (recur (conj s (+ a b))\n             (- n 1)\n             b\n             (+ a b)))))","user":"5ad002f2e4b0ea6055cfab87"},{"problem":26,"code":"(fn fib\n  ([len]\n   (fib (- len 2) [1 1]))\n  ([len s]\n   (if (= len 0)\n     (identity s)\n     (fib (dec len) (conj s (+ (first (reverse s)) (second (reverse s))))))))","user":"56f9890be4b07572ad1a88b5"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [x 1 y [0 1]]\n    (if (< x n)\n      (recur (inc x) (conj y (reduce + (take-last 2 y))))\n      (drop 1 y))))","user":"5d6febe6e4b04d129b00f2d5"},{"code":"(fn [n] \n    (loop [x (- n 2) xs [1 1]] \n        (if (= 0 x) \n            xs \n            (recur (dec x) (conj xs (+ (last xs) (nth xs (- (count xs) 2))))))))","problem":26,"user":"4fb4303fe4b081705acca2ac"},{"code":"#(loop [result [1] x 1 y %]\n    (if (< y 2)\n      result\n      (recur (conj result x)\n\t     (+ x (last result))\n\t     (dec y))))","problem":26,"user":"51f2b8f1e4b0210f90e74556"},{"problem":26,"code":"(fn [y] (last (take (dec y) (iterate (fn [x] (conj x (reduce + (take-last 2 x)))) [1 1]))))","user":"573ed018e4b05c31a32c0833"},{"code":"(fn [m]\n  (\n    ( fn fibinacci [ p n c m v]\n      (if (< c (- m 1))\n              (fibinacci n (+ p n) (+ c 1) m (conj v n))\n              (conj v n)\n       )\n     ) 0 1 0 m [])\n)","problem":26,"user":"52e980b3e4b09f7907dd14af"},{"problem":26,"code":"#(take % ((fn fib [a b] (cons b (lazy-seq (fib b (+ a b))))) 0 1))","user":"55c49394e4b0e31453f6499e"},{"problem":26,"code":"(fn fib [n] (apply list ((fn fibs [n] \n                           (if (= n 0) [] \n                             (if (= n 1) [1] \n                               (if (= n 2) [1 1] \n                                 (let [x (fibs (- n 1))] (conj x (+ (last x) (last (butlast x))))))))) n)))","user":"5e03fd15e4b0a607a9a45d66"},{"problem":26,"code":"(fn [n] \n  (take n \n    (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"56cbb352e4b0ea9b8538f738"},{"problem":26,"code":"#(loop [x 1 y 1 coll (vec nil) n %]\n   (if (zero? n) \n     coll\n     (recur y (+ x y) (conj coll x) (dec n))))","user":"5706d8dfe4b0b0fb43fd0685"},{"code":"(letfn [(genfib [a b] (lazy-seq (cons a (genfib b (+ a b)))))]\n(fn [n] (take n (genfib 1 1))))","problem":26,"user":"4e6a4950535d8ccf87e9febf"},{"problem":26,"code":"(fn [n]\n  (loop [fib '(1 1) index (- n 2)]\n    (if (= index 0)\n      (reverse fib)\n      (recur \n        (conj fib (+ (first fib) (second fib))) \n        (dec index)))))","user":"57861b0ce4b0ebec4cfb74ef"},{"problem":26,"code":"#(loop [rst [1] num 0 sub 1]\n         \t(if (= num (- % 1)) rst\n         \t\t(recur (conj rst sub) (inc num) (+ (last rst) sub))))","user":"5996fd2be4b07157cc8daac5"},{"problem":26,"code":"(fn fib [num-fibs]\n  \"Find the first num-fibs fibonnaci numbers\"\n  (reverse (loop [n 0, accum nil]\n    (cond (= n num-fibs) accum\n          (< n 2) (recur (inc n) (cons 1 accum))\n          :else (let [[p1 p2] accum]\n                  (recur (inc n) (cons (+ p1 p2) accum)))))))","user":"55f6e7ece4b06e875b46ce9e"},{"problem":26,"code":"(fn [size]\n  (reduce (fn [%1 _] (conj %1 (+ (last %1) (nth %1 (- (count %1 ) 2))) )) [1 1] (range (- size 2))))","user":"5a64d12de4b0512ff01cd9a7"},{"problem":26,"code":"(fn fib [n] (take n\n              (map first (iterate \n                          (fn [[a b]] (list b (+ a b)))\n                          '(1 1)))))","user":"5bcf95ace4b0e9689409ee2e"},{"code":"(fn [n](\n   take n(\n      map first(\n         iterate(\n            fn [[a b]] [b (+ a b)])[1 1]))))","problem":26,"user":"5294b190e4b02ebb4ef75011"},{"problem":26,"code":"(fn fibo\n     ([] (fibo 1 1))\n     ([numb] (take numb (fibo)))\n     ([numb0 numb1] (cons numb0 (lazy-seq (fibo numb1 (+ numb0 numb1)))))\n     )","user":"58f547b1e4b0438e51c2ced4"},{"problem":26,"code":"(fn [n] \n  (loop [prev 0 curr 1 round 1 akk '(1)] \n    (if (<= n round) akk (recur \n                            curr \n                            (+ curr prev) \n                            (inc round) \n                            (concat akk (list (+ curr prev)))))))","user":"5c97821be4b048ec896c5a70"},{"code":"(fn fibonacci  \n  [n]\n  (loop [v [1 1] n (- n 2)]\n    (if (= n 0)\n      v\n      (recur \n       (conj v (+ (last v) (last (pop v))))\n       (dec n)))))","problem":26,"user":"5287f34ee4b0239c8a67ae43"},{"code":"(fn f [a b n]\n  (if (> n 0)\n    (cons a (f b (+ a b) (dec n)))))\n 1 1","problem":26,"user":"4f244f26e4b0d66497709fea"},{"problem":26,"code":"(fn [n]\n  (loop [x n cont (fn [x] x) p 1 pp 0]\n    (if (zero? x)\n      (cont () )\n      (recur (- x 1) (fn [x] (cont (cons p x))) (+ p pp) p)\n      )))","user":"57035ccfe4b08d47c97781ef"},{"problem":26,"code":"(fn fibb ([counter] (fibb [1 1] counter)) ([acc counter] (if (>= (count acc) counter) \n                                                             acc (fibb (concat acc [(+ (nth acc (- (count acc) 1)) (nth acc (- (count acc) 2)))]) counter))))","user":"5e88a676e4b0cb016954630a"},{"code":"(fn [n]\n  (reduce\n    (fn [s _] (if (empty? s) [1] (conj s (apply + (take-last 2 s)))))\n    []\n    (repeat n nil)\n   )\n  )","problem":26,"user":"51a7b4fee4b0da5f497bde8b"},{"problem":26,"code":"#(loop [n (- % 2) result [1 1]] (if (= n 0) (reverse result) (recur (- n 1) (cons (+ (first result) (second result)) result))))","user":"60db702ae4b02d404a3b4372"},{"problem":26,"code":"(fn [x]\n  (loop [cpt 1, fib1 0, fib2 1, res '(1)]\n    (if (= cpt x)\n      (reverse res)\n      (recur (inc cpt) fib2 (+ fib1 fib2) (conj res (+ fib1 fib2))))))","user":"5a786397e4b013a48d39976c"},{"code":"(fn [n]\r\n  (map (fn fibo [x] \r\n         (if (<= x 1)\r\n           1\r\n           (+ (fibo (- x 1)) (fibo (- x 2)))))\r\n       (range n)))","problem":26,"user":"4fabbb97e4b081705acca21d"},{"code":"(fn [x](take x\n  ((fn rfib [a b]\n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","problem":26,"user":"50e69c7ce4b0140bc92c0a8b"},{"problem":26,"code":"#(reverse (reduce (fn [r e] (cons (reduce + (take 2 r)) r)) [1 1] (take (- % 2) (range))))","user":"53aa67e0e4b047364c044442"},{"problem":26,"code":"#(for [i (range %)]\n   ((fn fib [n]\n      (if (< n 2)\n        1\n        (+ (fib \n            (dec n))\n           (fib\n            (dec \n             (dec n))))))\n    i))","user":"5969bb32e4b069c0a1a197ed"},{"problem":26,"code":"#(loop [x % \n        y []]\n   (if (= x 0)\n     (reverse y)\n     (recur (- x 1)\n            (cons (if (second y)\n                    (+ (first y) (second y))\n                    1)\n                  y))))","user":"53c74cfce4b00fb29b2212a7"},{"problem":26,"code":"(fn fibonacci-seq\n  ([n] (fibonacci-seq n 0 1))\n  ([n f1 f2] (if (> n 0) (cons f2 (lazy-seq (fibonacci-seq (dec n) f2 (+' f1 f2)))))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":26,"code":";(fn [n]\n;  (if \n;    (= 0 n)\n;    [0]\n;    (loop [xs [0 1]] \n;      (if (<= (count xs) n) \n;        (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2)))))\n;      xs))))\n(fn [n]\n    (loop [xs [1 1]]\n      (if (< (count xs) n) \n        (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2)))))\n      xs)))","user":"55150524e4b055c2f668d4d9"},{"code":"(fn fib [n]                                                                                                                                                   \n  (take n ((fn rfib [a, b]                                                                                                                                      \n             (lazy-seq (cons a (rfib b (+ a b)))))                                                                                                              \n           1 1)))","problem":26,"user":"52091d57e4b0e152394d76f0"},{"problem":26,"code":"#(take % (drop 1 ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 0 1)))","user":"58c50b3de4b021aa9917ed33"},{"problem":26,"code":"(fn [n]\n  (let [fib '(1 1 2 3 5 8 13 21)]\n    (take n fib)))","user":"543b5bc6e4b032a45b86932d"},{"problem":26,"code":"(fn [x] (take x (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1]))))","user":"54f5746de4b0f2f3c5226e92"},{"code":"(fn fib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (reverse (cons (+ (first (reverse (fib (- n 1)))) (second (reverse (fib (- n 1))))) (reverse (fib (- n 1))))))))","problem":26,"user":"510cd1dde4b078ea71921124"},{"code":"#(map first (take % (iterate (fn [ [a  b] ] \n                    [b (+ a b) ]) [1 1] )))","problem":26,"user":"5273562ae4b03e8d9a4a7479"},{"problem":26,"code":"(fn fibonacci [n]\n  (letfn [(fibo [] (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))]\n   (take n (fibo))\n   )\n)","user":"58a17511e4b02bd94d917eb4"},{"problem":26,"code":"#(take % ((fn fb [a b] (cons a (lazy-seq (fb b (+ b a))))) 1 1))","user":"53f31dafe4b0742d9025b0f0"},{"problem":26,"code":"(fn foo\n  ([n] (foo n [1 1]))\n  ([n fibs]\n    (if (> n (count fibs))\n      (recur n (conj fibs (apply + (take-last 2 fibs))))\n      (seq fibs))))","user":"59199cc3e4b09b4ee5954bc8"},{"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1, 1]) ))","problem":26,"user":"532afdc5e4b09d4e7a9b552e"},{"problem":26,"code":"#(take % (drop 1  (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"55e6c3f5e4b050e68259b48c"},{"problem":26,"code":"#(take % ((fn fib-seq\n  [a b] (cons a (lazy-seq (fib-seq b (+ a b))))) 1 1))","user":"53dae029e4b0e771c30254ae"},{"code":"#(loop [fib '(1 0) s (drop 1 (range %))]\n    (if (first s)\n      (recur (conj fib (+ (first fib) (second fib))) (rest s)) (rest (reverse fib))))","problem":26,"user":"5348276de4b084c2834f4a55"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","problem":26,"user":"506c273ae4b080c1a96bd6bd"},{"code":"(fn [n]\n  ((fn [res current]\n   (if (= current n)\n      res\n      (recur (conj res (reduce + (take-last 2 res))) (inc current))))\n[1 1] 2))","problem":26,"user":"4e8a0d5d535d3e98b802328e"},{"code":"#(loop [a [1 1]\n        b %]\n        (if (> b 2)\n        (recur (conj a (+ (last a) (last (butlast a)))) (dec b))\n        a))","problem":26,"user":"4dfd018c535d04ed9115e77f"},{"problem":26,"code":"#(map (fn fib [n] \n  (if (or (= n 0) (= n 1)) \n    1\n    (+ (fib (dec n)) (fib (- n 2))))) (range %))","user":"5674f874e4b05957ce8c6144"},{"problem":26,"code":";(defn fib [n]\n;  (let [fib-seq (lazy-cat [1 1] (map + (rest fib-seq) fib-seq))]\n;    (take n fib-seq)))\n\n(fn [n]\n  (loop [i 2 ret [1 1]]\n    (if (= i n) \n      ret\n      (recur (inc i) (conj ret (+ (last ret) (second (reverse ret))))))))","user":"539c88e1e4b0b51d73faaf2c"},{"problem":26,"code":"#(loop [counter 0\n         fibo [1]]\n    (if (= counter %)\n      (drop-last fibo)\n      (recur (inc counter) (conj fibo (reduce + (take-last 2 fibo))))))","user":"57942207e4b0e215f87e8469"},{"problem":26,"code":"(fn [cnt] (let [f (fn fibonacci [a b c vect] (if (= c cnt) (seq vect) (fibonacci b (+ a b) (inc c) (conj vect (+ a b)))))] (f 1 1 2 '[1 1])))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn [x]\n  (let [fib (fn [[a,b]] [(+ a b) a])]\n    (take x\n      (map first (iterate fib [1 0]))\n    )\n  )\n)","problem":26,"user":"501b212ee4b0b12d9c5f4d83"},{"problem":26,"code":"(fn [n]\n  (loop [xs \n\t\t  []\n         a 1\n          b 1\n          i n]\n\t(if (= i 0)\n\t\txs\n        (recur (conj xs a), b, (+ a b), (dec i))\n     )\n  )\n)","user":"5bf0b940e4b0a6d31fed215c"},{"problem":26,"code":"(fn fib [cnt]\n  (loop [n 0 n1 1 output []]\n    (if (= (count output) cnt)\n      output\n      (recur (+ n n1) n (conj output (+ n n1)))\n    )\n  )\n)","user":"53beacf9e4b0d9a98559a6e3"},{"code":"#(map first (take %\n  (iterate\n    (fn [ab] [(reduce + ab) (first ab)])\n    [1 0])))","problem":26,"user":"50657775e4b0deb876850599"},{"problem":26,"code":"(fn [n]\n  (loop [vs []\n         a 0\n         b 1\n         n n]\n    (if (zero? n)\n      vs\n      (recur (conj vs b)\n             b\n             (+ a b)\n             (dec n)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":26,"code":"(fn [x]\n  (take x\n  \t(loop [fib [1] prev 1 cur 1]\n      (if (= (count fib) x)\n        fib\n      \t(recur (conj fib cur) cur (+ prev cur))))))","user":"588e6a17e4b00487982d518c"},{"code":"(fn fib[n]\n(if (< n 3) (take n '(1 1))\n(reverse (conj\n  (reverse (fib (- n 1)))\n  (+ \n    (last (fib (- n 1))) \n    (last (butlast (fib (- n 1)))))\n))))","problem":26,"user":"4ea365e2535d7eef308072c5"},{"problem":26,"code":"(fn\n  [n]\n  (let [fib (fn fib [] (memoize (fn [x] \n                                  (if (or (= x 1) (= x 0))\n                                    1\n                                    (+ ((fib) (- x 1)) ((fib) (- x 2)))))))]\n    (map (fib) (range n))))","user":"5844e6f4e4b089d5ab817e5a"},{"problem":26,"code":"(fn [n]\n    (let [f (fn [[a b]] [b (+ a b)])]\n      (->> [1 1]\n           (iterate f)\n           (map first)\n           (take n))))","user":"5920c191e4b09b4ee5954c61"},{"problem":26,"code":"(fn [x] (loop [ f '(1 1) j (- x 2)] (if (== 0 j) (reverse f) (recur (conj f (+ (first f) (nth f 1))) (dec j)))))","user":"5cfff788e4b0cc9c91588196"},{"code":"#(->> [1 1]\n      (iterate (fn [[a b]] [b (+ a b)]))\n      (map first)\n      flatten\n      (take %))","problem":26,"user":"4e3f480c535dc968683fc497"},{"problem":26,"code":"(fn [x]\n  (loop [i 0\n         out []]\n    (if (= i x)\n      out\n      (recur (+ i 1)\n             (conj out (if (< i 2)\n                         1\n                         (reduce + (take-last 2 out)\n                            )\n                         )\n                   )\n             )\n      )\n    )\n  )","user":"554b2151e4b0a04f79299580"},{"code":"(fn fib-seq [n]\n  \n  (map (fn fib [n]\n    (if (< n 3) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc n))))","problem":26,"user":"4ef0eaef535dced4c769f211"},{"code":"#(loop [a 1 b 1 seq '()] (if (= % (count seq)) (reverse seq) (recur b (+ a b) (cons a seq))))","problem":26,"user":"52727ba4e4b03e8d9a4a7438"},{"code":"#(take % '(1 1 2 3 5 8 13 21)) ;mount cleverest -> (╯°□°）╯︵ ┻━┻","problem":26,"user":"525b1e15e4b0cb4875a45d08"},{"code":"(fn [n]\n  (loop [i n a 0 b 1 s []]\n    (if (> i 0)\n      (recur (dec i) b (+ b a) (conj s b))\n      (seq s))))","problem":26,"user":"4f56e322e4b0a7574ea7182d"},{"code":"(fn [num]\n    (take num (map first\n                   (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5317d78ee4b08068f379ed63"},{"problem":26,"code":"(fn fx [x]\n  (if (= x 1) [1]\n    (if (= x 2) [1 1]\n      (let [r (fx (dec x))] (lazy-cat r [(apply +' (take-last 2 r))])\n      ))\n    )\n  )","user":"535ca812e4b04ce2eb3ed2b7"},{"problem":26,"code":"(fn [n]\n (take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5bcad61fe4b07a9b28b100f6"},{"problem":26,"code":"(fn [x]\n    (loop [cnt x\n            acc '()]\n            \n        (if (= cnt 0)\n            acc\n            (recur (dec cnt)\n                    (cond (= (count acc) 0)\n                        '(1)\n                         (= (count acc) 1)\n                         '(1 1)\n                         :else    \n                        (concat acc (list (+ (last acc) (nth acc (- (count acc) 2)))))\n                    )\n            )\n        )\n    )\n)","user":"5c3f6322e4b08cd430848e97"},{"code":"(fn [x]\n  (loop [a [] b 1 c 0 d x]\n    (if (< d 1)\n      a\n      (let [i (+ b c) j (conj a i) k (dec d)]\n        (recur j c i k)))))","problem":26,"user":"531488f3e4b08068f379ed16"},{"problem":26,"code":"#(take \n  %\n  (map\n  (fn fib [x]\n    (if (or (= x 1) (= x 0))\n      1\n      (+ (fib (- x 1)) (fib (- x 2)))))\n  (range)))","user":"5e839edde4b09a7a73c8bbba"},{"problem":26,"code":"(fn [n] \n   ((comp reverse last)\n    (take \n     (- n 1) \n     (iterate \n      #(cons  (+ (first %) (second %)) %) \n      [1 1]))))","user":"567476bde4b05957ce8c6139"},{"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n(take n (fib 1 1))))","problem":26,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":26,"code":"(fn [n] (nth (iterate \n      #(conj %1 (+ (last %1) (last (pop %1)))) [1 1]) (- n 2)))","user":"56e30cefe4b03a7c14b85a3d"},{"code":"(fn [N] (reduce (fn [a b] (let [r (reverse a)] (conj a (+ (first r) (second r) )))) [1 1] (take (- N 2) (range))))","problem":26,"user":"4f3c0c0fe4b0e243712b1f3d"},{"code":"#(loop [n 2 rv [1 1]]\n   \t\t(if (= n %)\n          rv\n          (recur (inc n) (conj rv (apply + (take-last 2 rv))))))","problem":26,"user":"534f13b2e4b084c2834f4ac4"},{"problem":26,"code":";#(loop [i 2 s [1 1]]\n;  (if (&amp;lt; i %)\n;    (recur (inc i) (conj s (apply + (take 2 (reverse s)))))\n;    s))\n\n#(loop [i 2 s '(1 1)]\n    (if (= i %)\n      (reverse s)\n      (recur (inc i) (conj s (apply + (take 2 s))))))","user":"57533bc1e4b02ea1147992a6"},{"code":"(fn fib [len]\r\n  (if (== len 2)\r\n    '(1 1)\r\n    (let [prev (fib (- len 1))]\r\n      (concat prev\r\n        (list (+ (nth prev (- len 2) )\r\n                 (nth prev (- len 3))))))))","problem":26,"user":"4e234588535d04ed9115e821"},{"problem":26,"code":"(fn fib-ls [k]\n   (loop [x (- k 1), ls '()]\n    (if (>= x 0)\n      (recur (- x 1)\n             (cons ((fn fib [i]\n                      (if (<= i 1)\n                        1\n                        (+ (fib (- i 1))\n                           (fib (- i 2)))))\n                    x) ls))\n      ls)))","user":"554bc026e4b0a04f79299597"},{"code":"(fn [ind] (map (fn fib [x] (if (<= x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) (map #(+ 1 %) (range ind))))","problem":26,"user":"51fa852ee4b0f1313d4689dd"},{"code":"#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a)))))1 1))","problem":26,"user":"4f4bd422e4b03ad3f0c10c7e"},{"code":"#(reverse (\n (fn [arr] \n   (if (= % (count arr)) arr \n     (recur (conj arr (+ (first arr) (nth arr 1)))))) '(1 1)\n))","problem":26,"user":"52ca720fe4b071a8d36bd3e2"},{"problem":26,"code":"#(map (fn [x] (last x)) (take % (iterate (fn [[x y]] [y (+ y x)]) [0 1] )))","user":"504e5333e4b0f6ff3350c4a2"},{"problem":26,"code":"(fn fib \n  ([num] (fib [1 1] (- num 2)))\n  ([fibSeq num] \n    (if (= num 0)\n        fibSeq\n        (fib (concat fibSeq [(+ (last fibSeq) (last (drop-last fibSeq)))]) (dec num))\n    ))\n  )","user":"51ad808ee4b09397d5109784"},{"code":"(fn x-fibs [N]\r\n  (condp = N\r\n    0 []\r\n    1 [1]\r\n    (let [prev (x-fibs (- N 1))]\r\n      (conj\r\n        prev\r\n        (apply + (map #(if (nil? %) 0 %) [(last prev) (second (reverse prev))])))\r\n      )\r\n    )\r\n  )","problem":26,"user":"4eccb190535d23f0362276fe"},{"problem":26,"code":"#(reverse (reduce (fn [x y] (cons (+ (first x) (second x)) x)) '(1 1) (range 2 %)))","user":"546280d8e4b01be26fd746b0"},{"code":"(fn fib[x]\n  (if (= x 1) '(1)\n    (if (= x 2) '(1 1)\n      (concat (fib(dec x)) (list (apply + (take 2 (reverse (fib (dec x)))))))        \n      )\n    )\n  )","problem":26,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":26,"code":";;Binet's Formula for the nth Fibonacci number (approximation)\n(fn fibo [n] (rest (reduce\n                     #(conj  %1 (Math/round (/ (Math/pow 1.618033988749894 %2) (Math/pow 5 0.5))))\n                     []\n                     (range (+ n 1))\n                     ))\n  )","user":"560a8ccde4b05f002753defc"},{"problem":26,"code":"(fn [counter]     \n    (loop [x 1 y 1 fibVect [x y]]\n    (if (= counter 1)\n      (1)\n      (if (and (>= counter 2) (= (count fibVect) counter))\n        fibVect\n        (recur y (+ x y) (conj fibVect (+ x y)))\n        )\n      )\n\n    )\n  )","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn [n] (take n (map first (iterate (fn [[x y]] (vector y (+ y x))) [1 1]))))","problem":26,"user":"516db4f6e4b046df6fbb76a0"},{"problem":26,"code":"(fn[n] (letfn [(fib [a b]\n                   (cons a (lazy-seq (fib b (+ a b)))))]\n         (take n (fib 1 1))))","user":"54b10d08e4b09f271ff37d18"},{"problem":26,"code":"(fn fib2 [n]\n  ((fn fibn [x n]\n    (cond\n      (= (count x) n) x\n      :else (fibn (conj x (+ (last x) (second (reverse x)))) n )\n      )) [1 1] n)\n    )","user":"584d99c5e4b0b7285a6f4e42"},{"code":"(fn fib3 [n]\n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"506ec408e4b09350ab4199f1"},{"problem":26,"code":"#(take % (drop 1 (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"551d8796e4b07993ea3788ec"},{"code":"#(take % \n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)\n)","problem":26,"user":"4f461e57e4b0d56e7bb92b92"},{"code":"(fn [cnt] \n  (reverse (loop [index cnt collected '()]\n   (if (= index 0) collected\n     (recur (dec index) \n\t      (cons \n\t       (if (> (count collected) 1)\n\t           (+ (first collected) (second collected))\n\t\t   1)\n\t       collected))))))","problem":26,"user":"5146df5ae4b04ef915e3731d"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (loop [fibonacci-list [1 1]]\n      (if (= (count fibonacci-list) n)\n        fibonacci-list\n        (recur (conj fibonacci-list (+ (last fibonacci-list) (last (butlast fibonacci-list)))))))))","user":"526e84b5e4b03e8d9a4a732d"},{"code":"(fn [length]\n  (seq (loop [len length num-sequence [1 1]]\n\t\t(if (<= len 2) \n\t\t\tnum-sequence\n\t\t\t(recur (- len 1) \n\t\t\t\t(conj num-sequence (+ (peek num-sequence) (peek (pop num-sequence)))))))))","problem":26,"user":"4f284e7ce4b0d6649770a015"},{"code":"(fn [x] (map #(% 1) (take x (iterate #(vector (% 1) (+ (% 0) (% 1))) '[0 1]))))","problem":26,"user":"4ec53cef535d6d7199dd3686"},{"problem":26,"code":"(fn\n   [n]\n   (take n ((fn f[a b] (lazy-seq (cons b (f b (+ a b))))) 0 1 )))","user":"5d05fdece4b0cc9c915881e8"},{"code":"(fn fibs ([n] (take n (cons 1 (cons 1 (fibs 1 1)))))\n         ([a b] (cons (+ a b) (lazy-seq (fibs b (+ a b))))))","problem":26,"user":"52a1acb2e4b04e0c58e87bdb"},{"code":"(fn fibo [x]\n  (take x\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e697e41535d8ccf87e9fe9c"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"5cd17bf1e4b0ccb0619628eb"},{"problem":26,"code":"(fn fib\n  ([x] (fib (- x 1) '(1)))\n  ([x lst] (if (= x 0)\n             (reverse lst)\n             (fib (- x 1) (if (= (count lst) 1)\n                            '(1 1) \n                            (conj lst (+ (first lst) (second lst))))))))","user":"5db5f16ce4b010eb3c36cd34"},{"problem":26,"code":"#(take % \n       ((fn fib [a b]\n          (cons a\n                (lazy-seq \n                 (fib b (+ a b))))) 1 1))","user":"54f49c39e4b0f2f3c5226e81"},{"problem":26,"code":"#(reverse (reduce (fn [lst x] (cons (+ (first lst) (second lst)) lst)) '(1 1) (range (- % 2))))","user":"56b86e64e4b0f26550335924"},{"problem":26,"code":"(fn [n] (loop [a 1 b [1]] (if (>= a n) b (recur (inc a) (conj b (reduce + (take 2 (reverse b))))))))","user":"5c8fa41be4b048ec896c59c1"},{"code":"#(take % \n       (\n        (fn fib [a b] \n          (cons a (lazy-seq (fib b (+ b a))))\n          ) 1 1))","problem":26,"user":"514f0723e4b019235f6c0599"},{"code":"#(letfn [(f [a b] (lazy-seq (cons a (f b (+ a b)))))] (take % (f 1 1)))","problem":26,"user":"5088082ae4b0198722bd9854"},{"problem":26,"code":"(fn [n] \n  (take n\n   (map first (iterate \n    (fn [[a b]] [b (+ a b)])\n   [1 1]))\n   )\n )","user":"58a6bd35e4b01a0c0b232931"},{"problem":26,"code":"(fn fibonacci [x]\n  (if (>= 2 x)\n    [1 1]\n    (concat\n      (fibonacci (- x 1))\n      [\n        (+\n          (last (fibonacci (- x 1)))\n          (last (fibonacci (- x 2)))\n        )\n      ]\n    )\n  )\n)","user":"56152a26e4b05f002753dfc1"},{"code":"(fn [x] \n  (take x \n    (letfn [(fib [a b] \n      (let [n (+ a b)] \n        (lazy-seq \n          (cons n (fib b n)))))] \n(concat [1] (fib 0 1)))))","problem":26,"user":"4f60ed88e4b0defedf855fb2"},{"code":"(fn fibonacci [x]\n  (loop [curr 0\n         fib '()]\n    (if (>= curr x)\n      (reverse fib)\n      (if (< curr 2)\n        (recur (inc curr) (conj fib 1))\n        (recur (inc curr) (conj fib (+ (first fib) (first (rest fib)))))))))","problem":26,"user":"533431e4e4b019098a6f8b8d"},{"problem":26,"code":"(fn [n]\n  (loop [cseq '(1 1) n (- n 2)]\n    (if (zero? n) cseq\n        (recur (concat cseq [(+ (last cseq) (last (drop-last cseq)))]) (- n 1))\n    )\n    )\n  )","user":"5831846ae4b051871117c02c"},{"problem":26,"code":"(fn [x]\n  (loop [n x \n         ret [] \n         a 0 \n         b 1]\n    (if (= 0 n)\n      ret\n      (recur (dec n) (conj ret b) b (+ a b)))))","user":"5883584ae4b0f1effa3b7674"},{"problem":26,"code":"#(take % (map first (iterate (fn ([[p n]] [n, (+ n p)])) [1 1])) )","user":"52f1bd89e4b05e3f0be25ef0"},{"problem":26,"code":"(fn [pp p o n]\n  (if (zero? n)\n    o\n    (recur\n     p\n     (+ p pp)\n     (conj o p)\n     (dec n)))) 0 1 []","user":"55c0a40be4b01b9910ae2a26"},{"code":"(fn fibo [number]\n\t(loop [i 0, n number, lista '()]\n      (if (< i n)\n        (if (or (= i 0) (= i 1))\n          (recur (inc i) n (conj lista 1))\n          (recur (inc i) n (conj lista (+ (first lista) (second lista)) )) \n        )\n        (reverse lista)\n      )\n    )\n)","problem":26,"user":"4ea5b8ae535d7eef308072d8"},{"problem":26,"code":"(fn fib [i]\n  (condp = i\n    1 '(1)\n    2 '(1 1)\n    (let [bif (reverse (fib (dec i)))\n          [a b & more] bif]\n      (reverse (conj bif (+ a b))))))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":26,"code":"(fn g [n]\n  (let [fib (fn f [n i i_1]\n              (if (<= n 0)\n                '()\n                (conj (f (- n 1) i_1 (+ i i_1)) i)))]\n    (fib n 1 1)))","user":"56acca9ae4b03c432f18734c"},{"problem":26,"code":"(fn fibo [n]\n  (case n\n    0 []\n    1 [1]\n    (conj\n     (fibo (- n 1))\n     (+ (last (fibo (- n 1)))\n        (or\n         (last (fibo (- n 2)))\n         0)))))","user":"5d73fb31e4b02e6b30c93516"},{"problem":26,"code":"(partial\n   (fn [fibs n]\n     (if (= n 2) (reverse fibs)\n         (recur\n          (conj fibs (->> fibs (take 2) (apply +)))\n          (- n 1)))) '(1 1))","user":"54042a19e4b0df28a13c62e4"},{"code":"#((fn fib [n a b acc] (if (> n 0) (fib (dec n) b (+ a b) (conj acc b)) acc)) % 0 1 [])","problem":26,"user":"52747090e4b03e8d9a4a74a5"},{"problem":26,"code":"(fn fib [dd]\n  (apply list\n         ((fn fibl [data index end]\n            (if (= index end)\n              data\n              (recur (conj data (+ (.get data (- index 2)) (.get data (- index 1)))) (inc index) end)\n              )\n            ) [1 1] 2 dd)\n         )\n  )","user":"5f693778e4b02876ed9fd03f"},{"problem":26,"code":"#(let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))]\n    (take %1 (fib 1 1)))","user":"5d65814be4b0db5d338d15db"},{"code":"(fn fib [n] \n  (rest (take (+ n 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]) ))) \n  )","problem":26,"user":"514c2e78e4b02b8cbb2a9279"},{"problem":26,"code":"(fn fib\n  ([n] (fib [1 1] 2 n))\n  ([result current max] (if (= current max)\n                result\n                (let [last (last result)\n                      before-last (nth result (-> result (count) (- 2)))]\n                  (println result)\n                  (fib (conj result (+ last before-last)) (inc current) max)))))","user":"53ecd01fe4b0d648e757f4b9"},{"code":"#(take % (map (fn fib [n]\n           (cond (== n 0) 1\n        (== n 1) 1\n        :else (+ (fib (- n 1)) (fib (- n 2))))) (range)))","problem":26,"user":"4ef89fb0535dced4c769f260"},{"problem":26,"code":"(fn [n]\n     (take n\n           (map first (iterate (fn [[x y]]\n                                 [y (+ x y)])\n                               [1 1]))))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":26,"code":"(fn [n]\n  (apply list\n  (reduce\n   (fn [x y]\n     (cond\n      (= y 0) [1]\n      (= y 1) [1 1]\n      :else (conj x (+ (last x) (second (reverse x))))))\n   [] (range n))))","user":"562c15d3e4b058fa18c5a6d5"},{"code":"(fn [n]\n   (reverse (loop [xs '(1 1)]\n     (if (<= n (count xs))\n       xs\n       (recur (cons (+ (first xs) (second xs)) xs))))))","problem":26,"user":"50f48298e4b004d364930527"},{"problem":26,"code":"(fn fib [N]\n(\n (fn fibaux [a b n]\n   (if (= n 2)\n     (list a b)\n    (cons a (fibaux b (+ a b) (- n 1 ) ) )\n)\n )\n1 1 N ))","user":"53fbf9bce4b0de5c41848586"},{"code":"(fn [x] \n  (loop [c 0 f 0 s 1 fib []]\n    (if (= c x)\n      fib\n      (recur (+ c 1) s (+ f s) (conj fib s)))))","problem":26,"user":"52173464e4b082aa80a88c75"},{"problem":26,"code":"(fn fib [x]\n   (if (= 1 x)\n     [1]\n     (if (= 2 x)\n       [1 1]\n       (let [w (fib (- x 1))\n             y (last w)\n             z (second (reverse w))] (conj w (+ y z)))\n       )\n     )\n   )","user":"56b1b59be4b0982f16b37df2"},{"code":"#(map (fn fib [n] (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"52c804dee4b0c2d177d6212b"},{"problem":26,"code":"#( take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","user":"53483a32e4b084c2834f4a57"},{"problem":26,"code":"(fn [count]\n  (loop [c count\n         n-2 1\n         n-1 1\n         final [n-2 n-1]]\n    (if (< c 3)\n      final\n      (recur (dec c) n-1 (+ n-2 n-1) (conj final (+ n-2 n-1))))))","user":"54271c6de4b01498b1a71b20"},{"code":"(fn [x] (take x \n          ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n)\n)","problem":26,"user":"4f7b1c63e4b06e829148e19e"},{"code":"(fn [n]\n  (if (= n 0) '()\n    (if (= n 1) '(1)\n      (reverse\n       ((fn iter [l i]\n          (if (= n i) l\n            (iter (conj l (+ (first l) (second l))) (+ i 1)))) '(1 1) 2)))))","problem":26,"user":"51da631be4b02ceefd947766"},{"problem":26,"code":"; none of the tail-recursive fibbs look nice :(\n(fn [n]\n  (reverse (loop [c n, l (), pp 0, p 1]\n    (if (= c 0)\n      l\n      (recur (dec c) (cons p l) p (+ pp p))))))","user":"54995298e4b0b312c081ff8b"},{"problem":26,"code":"(fn fib\n  ([n] (fib n [1 1]))\n  ([n memo]\n    (if (= n 2)\n      memo\n      (recur \n        (dec n)\n        (conj memo (apply + (take-last 2 memo)))))))","user":"4fe54675e4b0e8f79898fec1"},{"code":"(fn [x]\n  (take x\n    ((fn rfib [a b] \n      (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"50517ebfe4b0a561d07d8f06"},{"problem":26,"code":"(fn [n]\n  (loop [res []]\n    (if (>= (count res) n)\n      res\n      (recur (conj res (+ (or (last res) 1)\n                          (or (last (butlast res)) 0)))))))","user":"512e31e9e4b0b740abc59823"},{"problem":26,"code":"(fn [n]\n  (let [arr (atom [])]\n    (loop [n n]\n      (when (> n 0)\n        (swap! arr conj\n\t\t  (if (< (count @arr) 2)\n            1\n            (+ (last @arr) (nth @arr (- (count @arr) 2)))\n          )\n        )\n      (recur (dec n))))\n    @arr))","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":26,"code":"(fn [n]\n  (loop [cnt '() acc n current 1 next 1]\n    (if (zero? acc)\n      (reverse cnt)\n      (recur (conj cnt current) (dec acc) next (+ current next)))))","user":"554884d4e4b0a04f7929955c"},{"problem":26,"code":"(fn [count]\n\t(if (= count 2)\n\t\t'(1 1)\n\t\t(reverse (last (take (dec count) (iterate #(conj % (reduce + (take 2 %))) '(1 1)))))\n\t))","user":"547e5efbe4b0c51c1f4d7306"},{"code":"(fn [n] (take n (map second (iterate #(vector (second %) (+ (first %) (second %))) [0 1]))))","problem":26,"user":"4f253a49e4b0d66497709ff3"},{"problem":26,"code":"(fn [length]\n    (loop [result (vector 1)\n           idx (dec  length)\n           n1 0\n           n2 1]\n      (if (= idx 0)\n        result\n        \n        (let [n3 (+ n1 n2)]\n          (recur \n           (conj result n3)\n           (dec idx)\n           n2\n           n3)))))","user":"554a75c9e4b0a04f79299575"},{"problem":26,"code":"(fn [x] ((-> (fn [y] \n                  (loop [ans y]\n                        (if (= (count ans) x)\n                            ans\n                            (recur (conj ans (reduce + (take-last 2 ans))))\n                        )\n                  )\n              )\n          ) [1 1])\n  )","user":"56e9555fe4b04a395b9a03f7"},{"code":"(fn [x]\n    (let [countx x]\n        (case countx\n            0 '()\n            1 '(1)\n            2 '(1 1)\n            (loop [count-y 2 fib-list [1 1]]\n                (if (= count-y x)\n                    (into () (reverse fib-list))\n                    (recur (inc count-y) (conj fib-list (+ (last fib-list) (second (reverse fib-list)))) )) ))))","problem":26,"user":"5262efade4b03e8d9a4a709f"},{"code":"(fn [n]\n  (letfn [(fib-seq []\n            (lazy-cat [1 1] (map + (fib-seq)\n                                   (rest (fib-seq)))))]\n    (take n (fib-seq))))","problem":26,"user":"4efa3d4b535dced4c769f270"},{"code":"(fn [n] (take n (map first (iterate (fn [[k1 k2]] (list k2 (+ k1 k2))) [1 1]))))","problem":26,"user":"4e50e2a0535dc968683fc4ef"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (nth \n    (iterate #(cons (+ (first %) (second %)) %) [1 1]) (- n 2))))","user":"58edaa3be4b056aecfd47d89"},{"problem":26,"code":"#(map first (take % (iterate\n              (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5e36ca7de4b0650de70e2b3c"},{"code":"(fn [x] (letfn \n  [(fib [n] \n    (if (< n 2) 1 \n     (+ (fib (dec (dec n))) (fib (dec n)))))] \n(map fib (range 0 x))))","problem":26,"user":"4f5a10d8e4b0030a34fb2ae5"},{"code":"(fn [n]\n   (loop [coll '(1 1) x (- n 2)]\n     (if (<= x 0)\n       (take n (reverse coll))\n       (recur (conj coll (+ (first coll) (second coll))) (dec x)))))","problem":26,"user":"515a6151e4b0394f658fe241"},{"problem":26,"code":"(fn fib \n  ([n] (take n (fib 1 1)))\n  ([f s] (lazy-seq (cons f (fib s (+ f s))))))","user":"5d6d76ffe4b04d129b00f2be"},{"problem":26,"code":"(fn [x]\n  (loop [answer [] n-1 1 n 1]\n    (if (< (count answer) (- x 2))\n      (recur (conj answer n-1) n (+ n n-1))\n      (conj answer n-1 n))))","user":"57894e30e4b0ebec4cfb752b"},{"problem":26,"code":"(fn f[i] (if (= i 1)\n                [1]\n                (let [col (f (dec i))]\n                  (conj col (+ (nth col (- (count col) 2 ) 0) (last col)))\n                  )))","user":"5c6e8b57e4b0fca0c1622755"},{"problem":26,"code":"(fn [n]\n  (loop [round 2\n         prev 1\n         nxt 1\n          arr [1 1]]\n     (if (or (= n round))\n       arr\n       (recur (inc round) nxt (+ nxt prev) (conj arr (+ prev nxt))))))","user":"58b54852e4b0ebc645576d52"},{"code":"#(if (== 0 %) '()\n  (loop [fibs '(1) cnt %\n         val1 0 val2 1]\n  (if (<= cnt 1)\n    fibs\n    (let [val3 (+ val1 val2)]\n      (recur (concat fibs (list val3))\n             (dec cnt)\n             val2 val3)))))","problem":26,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn fib [y] (if (= y 2) [1 1] ((fn [a] (reverse (cons (reduce + (take-last 2 a)) (reverse a)))) (fib (dec y)))))","problem":26,"user":"528f1057e4b0239c8a67aeec"},{"problem":26,"code":"(fn fib-iter [ct]\n  (loop [n (- ct 2) ret [1 1]]\n    (if (= 0 n)\n      ret\n      (recur (dec n) (conj ret (reduce + (take-last 2 ret)))))))","user":"4ff0e01fe4b0678c553fc328"},{"code":"(fn [s] \n  (loop [fibo '(1) mylast 0]\n\t\t(if (= s (count fibo))\n\t\t\tfibo\n\t\t\t(recur (concat fibo [(+ (last fibo) mylast)]) (last fibo))\n\t\t)\n\t)\n)","problem":26,"user":"4ee74e2a535d93acb0a66866"},{"problem":26,"code":"(fn n-fibs\n  [range]\n  (loop [coll []\n         range range]\n    (println (str \"coll:\" coll \"range:\" range))\n    (println (count coll))\n    (if (= 0 range)\n      coll\n      (let [coll-count (- (count coll) 1)\n            x (if (<= coll-count 0)\n                0\n               (nth coll (- coll-count 1)))\n            y (if (<= coll-count 1)\n                1\n               (last coll))\n           z (+ x y)]\n        (println (str \"coll:\" coll \" x:\" x \" y:\" y \" z:\" z))\n       (recur (conj coll z) (dec range))))))","user":"542098afe4b01498b1a71aa7"},{"code":"#(map (fn gen [x] (if (< x 2) x (do (+ (gen (- x 2)) (gen (- x 1)))))) (next (range (+ 1 %))) )","problem":26,"user":"50feab26e4b03cd852b4e850"},{"code":"#(loop [n % r '(1 1)]\n  (cond (< n 3) (reverse r)\n    true (recur (dec n)\n              (conj r (+ (first r)\n                      (second r))))))","problem":26,"user":"4fcaa4bae4b0ee37620e1854"},{"problem":26,"code":"(fn rfn [n]\n          (cond\n            (= n 1) '(1)\n            (= n 2) '(1 1)\n            :else (let [before (rfn (dec n))]\n                    (concat before [(+ (last before) (last (butlast before)))])\n                    )\n            )\n          )","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn [n]\n  (#(take % (map first\n      (iterate\n          (fn [[a b]] [b (+ a b)]) [1 1]))) n))","problem":26,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":26,"code":"(fn [x]\n  (rest\n    (reduce\n      (fn [a b] (conj a (+ (last a) (last (butlast a)))))\n      [0 1]\n      (range (dec x)))))","user":"59cd351ee4b0ef0a1e9b5b35"},{"code":"#(loop [res '[1 1]\n        n %]\n   (if (< n 3) res\n   (recur (conj res (apply + (take-last 2 res))) (dec n))))","problem":26,"user":"53820087e4b06839e8705ecf"},{"code":"(fn [n]\n  (letfn [(zip-plus [xs ys] (map + xs ys))]\n    (letfn [(fib [] (lazy-cat '(1 1) (zip-plus (fib) (rest (fib)))))]\n      (take n (fib)))))","problem":26,"user":"53217912e4b09d4e7a9b54b3"},{"code":"#((fn fib [n xs]\r\n  (if (not (zero? n))\r\n    (fib\r\n      (dec n)\r\n      (conj xs (+ (first (reverse xs)) (fnext (reverse xs)))))\r\n    xs)) (- % 2) [1 1])","problem":26,"user":"4e8dd6cb535d65386fec213b"},{"code":"(fn [x]\n  (take x\n    (map\n      (fn fib [n]\n        (cond\n         (= 0 n) 0\n         (= 1 n) 1\n         :else (+ (fib (dec n)) (fib (dec (dec n)))))) (drop 1 (range)))))","problem":26,"user":"50cfcad6e4b00b15ecee9752"},{"code":"(fn [n]\n  (reverse ((fn fib [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) (cons 1 (fib 1))\n    :else (cons (+ (first (fib (dec n))) (first (rest (fib (dec n))))) (fib (dec n))))) n)))","problem":26,"user":"4f8c50f9e4b02e764a0a5195"},{"problem":26,"code":"#(take %1 [1 1 2 3 5 8 13 21])","user":"4f847bf2e4b033992c121c32"},{"problem":26,"code":"(fn fibo\n  ([n] (fibo n 0 1 [] 0))\n  ([n prev1 prev2 res cnt]\n    (if (> n cnt)\n      (fibo n prev2 (+ prev1 prev2) (conj res prev2) (inc cnt))\n      res\n    )\n  )\n)","user":"5bb4baace4b0a20761a23552"},{"code":"(fn [size]\n  (loop [arr []\n        s size]\n    (if (= s 0)\n      arr\n      (recur (conj arr (let [sum (reduce + (take 2 (reverse arr)))] (if (= sum 0) 1 sum))) (dec s)))\n  ))","problem":26,"user":"52bdd135e4b07a9af579230a"},{"problem":26,"code":"(fn fibonacci [n] \n  (loop [x n, f (vector 1)]\n    (if (> x 1)\n      (recur\n        (- x 1)\n        (conj f (+ (last f) (if-let [last-but-one (second (reverse f))] last-but-one 0))))\n      f)))","user":"5ae75ccbe4b0837691e92ca9"},{"code":"(fn [n] \n\t(loop [result '(1) iter 1] \n\t\t(cond \n\t\t\t(>= iter n) (reverse result)\n\t\t\t(= 1 (count result)) (recur '(1 1) (inc iter)) \t\n\t\t\t:else (recur (cons (+ (first result) (first (rest result))) result) (inc iter))\n\t\t\t)))","problem":26,"user":"52711255e4b03e8d9a4a73d7"},{"problem":26,"code":"(fn fibo [x]\n  (loop [x x \n         col [1 1]]\n    (if (= x 2) \n      col\n      (recur (- x 1) \n             (conj col (reduce + (take-last 2 col)))))))","user":"518261a4e4b0f2adb7336523"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib* [x1 x2] (cons x1 (lazy-seq (fib* x2 (+ x1 x2)))))]\n    (take n (fib 1 1))))","user":"579e15a6e4b05b1deef9ae20"},{"code":"(fn fib [num]\n  (loop [c 2 f [1 1]]\n    (if (= num c) f\n      (recur (inc c) \n        (conj f (+ (first (reverse f)) (second (reverse f)))) \n      ))))","problem":26,"user":"5030f16fe4b05b7df5a0b84b"},{"problem":26,"code":"(fn [n]\n  (\n   (fn fib [nn s]\n     (if (= nn n)\n       s\n       (case nn\n         0 (fib (inc nn) '(1))\n         1 (fib (inc nn) '(1 1))\n         (fib (inc nn) (reverse (conj (reverse s) (+ (last s) (second (reverse s)))))))))\n   0 '()))","user":"5c7ef3f3e4b0d597f478cad7"},{"code":"#(map (fn fibo [n]\n\t(if (< n 2)\n\t\tn\n\t\t(+ (fibo (- n 1)) (fibo (- n 2))))) (range 1 (inc %)))","problem":26,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn fib [n] \n     (take n \n            \n             (map first \n               (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":26,"code":"(fn[x]\n (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","user":"54117417e4b01498b1a719c5"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n;;#(take % (map first (iterate (fn [a b] (b (+ a b))) (1 1))))","user":"5dfa1c67e4b0a607a9a45cc5"},{"code":"(fn [x]\n  ((comp rest reverse)\n    (loop [x (- x 1)\n          fib '(1 0)]\n      (if (= x 0)\n        fib\n        (recur (- x 1) \n               (cons\n                 (+ (first fib)\n                    (second fib))\n                 fib))))))","problem":26,"user":"4fbf2818e4b081705acca317"},{"code":"(fn fib \n  ([m] (fib '(1 1) 1 1 m))\n  ([cur x y m] (if (< (count cur) m) \n                    (fib (conj cur (+ x y) ) y (+ x y) m)\n  \t\t\t\t(reverse cur))))","problem":26,"user":"4e967c4a535dbda64a6f6b47"},{"problem":26,"code":"#(rest (take (+ %1 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5955625fe4b066ee0a44af2f"},{"problem":26,"code":"#(reverse (reduce (fn [xs n] (cond\n                              (= 0 (count xs)) '(1)\n                              (= 1 (count xs)) '(1 1)\n                              :else (conj xs (+ (first xs) (second xs))))\n                    ) '() (range %)))","user":"55e558e3e4b050e68259b46b"},{"problem":26,"code":"(fn  [x]\n    (loop [inx x out '(0 1)]\n      (if (= inx 0)\n        (rest (rest (reverse out)))\n        (recur (- inx 1) (cons (+ (first out) (second out)) out)))))","user":"566d71b1e4b0a866af6896ca"},{"problem":26,"code":"(fn [c] (loop [a 0 b 1 f [] c c] (if (= c 0) f (recur b (+ a b) (conj f b) (dec c) ))))","user":"560d491ae4b05f002753df3b"},{"problem":26,"code":"(fn fib\n   ([n]\n    (fib n 1 1 []))\n   ([n a b coll]\n    (if (= n 0)\n      coll\n      (fib (dec n) b (+ a b) (conj coll a))\n    ))\n   \n  )","user":"581fe550e4b04b46fc4b0f4c"},{"problem":26,"code":"(fn q26\n  ([n coll left right]\n   (if (= n 2)\n     coll\n     (let [k (+ left right)]\n       (recur (dec n) (conj coll k) right k))))\n  ([n]\n   (cond\n     (= n 0) nil\n     (= n 1) '(1)\n     true (q26 n [1 1] 1 1))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0\n         cur 1\n         ind 1\n         final [1]]\n    (if (= n ind)\n      final\n      (let [val (+ cur prev)]\n        (recur cur val (inc ind) (conj final val))))))","user":"5b34aba7e4b025bcb146f352"},{"problem":26,"code":"(fn [cnt] (take cnt (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"59074b7ce4b047aa04b19951"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n;;(take 3 (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"5c86b769e4b0c8042a70ce9b"},{"problem":26,"code":"#(loop [l %, v '(1 1)]\n   (if (= l 2)\n     (reverse v)\n     (recur (dec l) (conj v (+ (first v) (second v))))))","user":"57481f1fe4b009280f9f2b82"},{"problem":26,"code":"#(take % \n  (map first \n   (iterate \n    (fn [[a b]] [b (+ a b)]) [1 1]\n   )\n  )\n )","user":"56777934e4b05957ce8c6167"},{"problem":26,"code":"(fn finonacci\n  [n]\n  (loop [lst '(1 1)]\n    (if (= n (count lst))\n      (reverse lst)\n      (recur (cons (reduce + (take 2 lst)) lst)))))","user":"59dd3930e4b0a0ac046f2504"},{"code":"(fn [z] (map\n    (fn fib [n] (\n\t\tif (or (zero? n) (= n 1))\n      \t\t1\n     \t(+ (fib (dec n)) (fib (- n 2))))\n  \t)\n  (range z)))","problem":26,"user":"52452225e4b0d8acf9ed6ae6"},{"problem":26,"code":"(fn fib [n] \n  (cond\n   (= 1 n) []\n   (= 2 n) [1 1]\n   :else (conj (fib (dec n))\n            (+ \n             (last (fib (dec n)))\n             (-> (fib (dec n))\n                 reverse\n                 second\n                 )\n             ))\n              ))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":26,"code":"(fn fibonacci\n  [num]\n  (loop [num (- num 1)\n         seq [1]]\n    (if (= num 0)\n      seq\n      (recur (dec num) (conj seq (reduce + (take-last 2 seq)))))))","user":"5e0a6916e4b099d064962f65"},{"problem":26,"code":"(fn [n]\n  (loop [f 1 s 1 \n         i 2 \n         result [1 1]]\n    (if (> i n)\n      (take n result)\n      (recur s (+ f s) (inc i) (conj result (+ f s)) ))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":26,"code":"(fn fibonacci [n]\n  (loop [remain n\n         x0 0\n         x1 1\n         result [1]]\n    (let [fib (+ x0 x1)]\n      (if (= remain 1)\n        result\n        (recur (dec remain) x1 fib (conj result fib))))))","user":"5b1d61b3e4b03cfeda66ecfe"},{"problem":26,"code":"(fn first-n-fib [n]\n  (letfn \n    [(fiblist [a b] (lazy-seq (cons a (fiblist b (+ a b)))))]\n    (take n (fiblist 1 1))))\n;(fn [n] (take n ((fn fibgen [i j] (lazy-seq (cons i (fibgen j (+ i j))))) 1 1)))\n; #(take % ((fn fibgen [i j] (lazy-seq (cons i (fibgen j (+ i j))))) 1 1))","user":"5d9a49c4e4b0d3f9b434ad45"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [acc e]\n                      (let [size (count acc)]\n                        (conj acc (if (or (= e 0) (= e 1))\n                                    1\n                                    (reduce + (subvec acc (- size 2) size))))))\n                      []\n                      (range n)))","user":"52d38c51e4b099d49816f0c5"},{"problem":26,"code":"(fn fib\n  ([n]\n     (fib (subvec [1 1] 0 (min n 2)) n))\n  ([x, n]\n     (if (< (count x) n) \n       (recur (conj x (apply + (take-last 2 x))) n)\n       x)))","user":"54ca130ce4b057c6fda3a250"},{"code":"(fn fibo [n]\r\n  (reverse (loop [coll '(1 1)]\r\n    (if (<= n (count coll)) coll\r\n      (let [a (first coll) b (second coll) c (+ a b)]\r\n      (recur (conj coll c)))))))","problem":26,"user":"523aa92ae4b081681ca7adcd"},{"problem":26,"code":"(fn [num] (take num ((fn f [a b]\n               (lazy-seq (cons a (f b (+ a b))))\n               )\n             1 1\n             )\n        ))","user":"53ef5c13e4b0742d9025b0cb"},{"code":"(fn [x] (loop [counter 3 result '(1 1) previous 1] (if (= counter x) (reverse (cons (+ previous (first result)) result)) (recur (inc counter) (cons (+ previous (first result)) result) (first result)))))","problem":26,"user":"4e8aef69535d65386fec2114"},{"problem":26,"code":"#(reverse (loop [n 3, s '(2 1 1)] (if (= n %) s (recur (inc n) (cons (apply + (take 2 s)) s)))))","user":"55670a05e4b0c656e3ff1838"},{"code":"(fn fib [x]\n  (if (< x 3)\n    (if (= x 2) [1 1] [1])\n    (let [xs (fib (- x 1))]\n      (conj xs (apply + (take-last 2 xs))))))","problem":26,"user":"524b90fae4b09eba1c0223df"},{"problem":26,"code":"(fn [n] (drop-last (last (take n ((fn [col] (iterate (fn [col] (conj col (+ (last col) (last (drop-last col))))) col)) [1 1])))))","user":"575c3592e4b02ea11479936c"},{"code":"(fn [n]                                                                   \n     (loop [counter 0                                                     \n            result [1 0]]                                                          \n       (if (= counter n)                                                           \n         (rest (reverse (rest result)))                                            \n         (let [f1 (first result)                                                   \n              f2 (second result)]                                                 \n          (recur (inc counter)                                                    \n                 (cons (+ f1 f2) result))))))","problem":26,"user":"5092fe10e4b097f48cc3857e"},{"problem":26,"code":"(fn fb [n] (if (= n 1) '(1) (reverse \n                             (conj (reverse (fb (- n 1))) \n                                   (+ (first (reverse (fb (- n 1)))) \n                                      (if (empty? (rest (reverse (fb (- n 1))))) \n                                        0 (first (rest (reverse (fb (- n 1)))))\n                                        )\n                                      )\n                                   )\n                             )\n             )\n  )","user":"56b36283e4b0982f16b37e18"},{"problem":26,"code":"(fn [x]\n  (loop [n 0 n1 1 out ()]\n    (if (= (count out) x)\n      (reverse out)\n      (recur n1 (+ n n1) (cons n1 out)))))","user":"54a97853e4b09f271ff37cae"},{"code":"(fn [n] (take n (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4f43894ee4b0d7d3c9f3fd21"},{"problem":26,"code":"#(loop [nn % f0 1 f1 1 r '[]]\n                  (if (zero? nn)\n                    (seq  r)\n                    (recur (dec nn) f1 (+ f0 f1) (conj r f0))))","user":"56a1fce9e4b0542e1f8d14b7"},{"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (#(conj % (apply + (take-last 2 %)))\n     (fib (- n 1))\n    )\n  )\n)","problem":26,"user":"5136f659e4b04059df19f2fd"},{"problem":26,"code":"(fn [n]\n          (loop [counter (- n 2)\n                 out [1 1]]\n            (println (str \"Counter:\" counter \", List: \" out))\n            (cond \n            (= counter 0) (reverse (into '() out))\n            (> counter 0) (recur (dec counter) (conj out (+ ((comp first reverse) out) ((comp second reverse) out)))))))","user":"575086e7e4b02ea114799276"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"53576356e4b04ce2eb3ed27a"},{"problem":26,"code":"(letfn [(fib\n          ([]    (fib 1 1))\n          ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n  #(take % (fib)))","user":"5800edaae4b0a837a8b30c48"},{"problem":26,"code":"(fn fib ([n] (fib n 0 1))\n        ([n a b] (if (= 0 n) '() (cons b (fib (dec n) b (+ a b))))))","user":"58cfb517e4b03c36ff7e58b9"},{"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","problem":26,"user":"50608ea0e4b07251188e4456"},{"problem":26,"code":"(fn fibo [sz]\n (map first (reductions \n  (fn fib [[a b] _]\n   [b (+ a b)])\n    [1 1](range 1 sz))))","user":"5ff19fe0e4b05ac5b16ea1f4"},{"problem":26,"code":"(fn [n] \n  (loop [ret '(1) \n         n (- n 1)] \n    (if (zero? n)\n      ret\n      (recur (concat ret (list (reduce + (take-last 2 ret)))) (- n 1)))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":26,"code":"#(take %\n  (map first \n    (iterate \n     (fn [[x1 x2]]\n      [x2 (+ x1 x2)])\n      [1 1])))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"#(take %\n     ((fn f [a b]\n        (lazy-seq\n          (cons b (f b (+ a b))))) 0 1))","problem":26,"user":"4fdc3065e4b05e33b9224f6b"},{"code":"(fn t [n] (take n (#((fn r [a b] (cons a (lazy-seq (r b (+ a b))))) 1 1))))","problem":26,"user":"4ea00469535d7eef3080729d"},{"problem":26,"code":"(fn [count] (loop [i 1 fib '(1)] (if (= i count) (reverse fib) (recur (inc i) (conj fib (apply + (take 2 fib)))))))","user":"5f6f8327e4b02876ed9fd075"},{"code":"#(loop [n (- % 2) acc '(1 1)]\n    (if (zero? n)\n      (reverse acc)\n      (recur (dec n) (conj acc (+ (first acc) (second acc))))))","problem":26,"user":"50d04a92e4b00b15ecee975a"},{"problem":26,"code":"(fn fib [y]\n  (if (= y 1) '(1) \n  (loop [x y acc '(1 1)]\n  (if (> x 2)\n        (recur (dec x)\n               (conj acc (+' (first acc) (second acc))))\n        (reverse acc)))))","user":"5ff2091ce4b05ac5b16ea1f8"},{"code":"(fn [limit]\n  (loop [results [] \n         x 1\n         y 1]\n    (if (<= limit (count results))\n      results\n      (recur (conj results y) (+ x y) x))))","problem":26,"user":"4f7cbf4ae4b06e829148e1b7"},{"code":"(fn fs[n] \n    (if (= n 1)\n      '(1)\n      (if (= n 2)\n        '(1 1)\n        (loop [result [1 1]\n               p1      1\n               p2      1]\n               (if (= n (count result))\n                  result\n                  (recur (conj result (+ p1 p2)) p2 (+ p1 p2))))\n)))","problem":26,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn my-fab [n]\n        (cond\n         (<= n 1) [1]\n         (= n 2) [1 1]\n         :else (let [prev (my-fab (dec n))]\n                 (conj prev (+ (last prev) (second (reverse prev)))))))","problem":26,"user":"5145c116e4b099c3fbe2884a"},{"problem":26,"code":"#(take %\n       ((fn this []\n          (lazy-cat [1 1]\n                    (map + (this) (rest (this)))))))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":26,"code":"(fn fib[n]\n   (cond (= n 1)\n       [1]\n       (= n 2)\n       [1 1]\n       :else\n       (let [l (fib (dec n)) rl (reverse l) a (first rl) b (second rl)]\n         (conj l (+ a b)))))","user":"5f3f6570e4b004f08c61c563"},{"problem":26,"code":"#(loop [f [1 1]\n        i 2]\n   (if (= i %)\n     f\n     (recur (conj f (apply + (take-last 2 f))) (inc i))))","user":"54bc6c75e4b0ed20f4ff6ed0"},{"code":"(fn [n]\n  (map \n    (fn fib [i]\n      (if (nil? (#{0 1} i))\n        (+ (fib (- i 1)) (fib (- i 2)))\n        1)) (range n)))","problem":26,"user":"4fc50441e4b081705acca36f"},{"code":"(fn [y] (loop [x [1 1]\n  fib y] (if (<= fib 2) x\n    (recur \n      (conj x (+ (last x) (last (butlast x)))) \n(dec fib)))))","problem":26,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":26,"code":"(fn [n]\n  (loop [c 2 a 1 b 1 r [1 1]]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          (= c n) r\n          :else (recur (inc c) b (+ a b) (conj r (+ a b))))))","user":"520e37cfe4b066f3ea161c96"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 0) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    (> n 2) (let [pre (fib (dec n))]\n              (concat pre [(+ (last pre) (last (butlast pre)))]))))","user":"54889b50e4b0e286459a11d4"},{"code":"#(condp = %\n  3 '(1 1 2)\n  6 '(1 1 2 3 5 8)\n  8 '(1 1 2 3 5 8 13 21))","problem":26,"user":"4e80d71b535db62dc21a62b7"},{"problem":26,"code":"(fn [x]\n  (cond (<= 0 x) 0\n        (= 1 x) '(1)\n        (= 2 x) '(1 1))\n  ((fn [x coll]\n            (if (<= x 0) coll\n              (recur (dec x) (conj coll (reduce + (take 2 (reverse coll))))))\n        )\n   (- x 2) [1 1]))\n\n;; not-mine\n;; #(take % ((fn fib [a b] \n;;            (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"60ad1b70e4b00e9e6653c48d"},{"code":"#(take % ((fn rfib [prev curr]\n            (lazy-seq (cons prev (rfib curr (+ prev curr)))))\n          1 1))","problem":26,"user":"5383865ce4b06839e8705edf"},{"code":"#(loop [c '(1 1)] (if (< (count c) %) (recur (reverse (conj (reverse c) (apply + (take-last 2 c))))) c))","problem":26,"user":"4f902831e4b0dcca54ed6c8b"},{"code":"#(rest (take (inc %) (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","problem":26,"user":"52d2f457e4b099d49816f0ba"},{"problem":26,"code":"#(map (fn fib [n]\n        (case n   \n            0 1\n            1 1\n            (+ (fib (- n 1))\n               (fib (- n 2)))))\n    (range %))","user":"5853582fe4b0b7285a6f4ec5"},{"problem":26,"code":"(fn fib\n  [acc n]\n  (if (= n 2)\n    acc\n    (fib (conj acc (+ (last acc) (second (reverse acc)))) (dec n)))) [1 1]","user":"5a3ece62e4b0447ef91cc5b9"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [i    2\n         prev 1\n         s    [1 1]]\n    (if (= i n)\n      s\n      (let [newprev (last s)\n            sum     (+ prev newprev)]\n        (recur (inc i) (last s) (conj s sum))))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":26,"code":"(fn [x]\n  (loop [i (- x 2)\n         so_far [1 1]]\n    (let [next_number (reduce + (take 2 (reverse so_far)))]\n    \t(if (= i 0)\n      \t\tso_far\n      \t\t(recur (- i 1) (conj so_far next_number))))))","user":"5601cd19e4b04bb52996e197"},{"problem":26,"code":"(fn fib\n  ([x] (fib x []))\n  ([x fseq]\n   (if (= (count fseq) x)\n     fseq\n     (let [lid (- (count fseq) 1)\n           slid (- lid 1)\n           li (nth fseq lid 1)\n           sli (nth fseq slid 0)\n           sum (+ li sli)\n           nfseq (conj fseq sum)]\n       (fib x nfseq)))))","user":"5c37d6fce4b0d62ef62d9f7b"},{"code":"(fn fib [x]\n  (take x\n        (map first (iterate (fn fib-inner [[y z]] [z (+ y z)]) [1 1]))))","problem":26,"user":"50ed1ce7e4b01236b1d49839"},{"code":"(fn [limit]\n   (loop [\n          seq [1]\n          last 1\n          pre-last 0]\n     (if (> limit (count seq))\n       (let [fibo (+ last pre-last)]\n         (recur (conj seq fibo) fibo last ))\n       seq\n       )\n     )\n   )","problem":26,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn [n]\n  (loop [counter n\n         output [1]]\n    (if (> counter 1) \n      (recur (dec counter) \n             (conj output \n                   (+ (last output) \n                      (or (first (next (reverse output))) 0))\n             )\n      )\n      output\n    )\n  )\n)","problem":26,"user":"4fd1fa71e4b04c3a95aa0418"},{"code":"(fn f\n  ([n] (f 1 1 n))\n  ([x y n]\n     (if (= 0 n)\n       ()\n       (cons x (f y (+ x y) (- n 1))))))","problem":26,"user":"4ee9ddb8535d93acb0a66896"},{"problem":26,"code":"(fn\n  [x]\n  (loop [i 2 fib [1 1]]\n    (if (< i x)\n      (recur (inc i) (conj fib (+ (nth fib (- i 2)) (nth fib (- i 1)))))\n      fib)))","user":"5e668d87e4b0e171e1033681"},{"code":"(fn fibOne [x]\n  (letfn [(fib3 [z] (\n                       if (> z 0)\n                       (if (< z 3) 1\n                         (+ (fib3 (- z 1)) (fib3 (- z 2))))\n                       )\n               )\n        ]\n  (for [i (range x)] (fib3(inc i))\n  )\n))","problem":26,"user":"52132f8de4b0d32679a50651"},{"code":"(fn [n]\n    (loop [x [1 1]]\n      (if (= (count x) n)\n        x\n        (recur\n         (conj x (+\n                  (last x)\n                  (last (butlast x))))))))","problem":26,"user":"4f8cb9b2e4b02e764a0a51a6"},{"code":"#(let [x [1 1]]\n  (loop [xs x]\n    (if-not (< (count xs) %)\n      xs\n      (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2))))))))","problem":26,"user":"536bd4dee4b0fc7073fd6e30"},{"code":"(fn fibo [x] \n  (loop [col [1 1] idx x] \n    (if (= idx 2) \n      col\n      (recur \n        (conj col (reduce + (take-last 2 col)))\n        (dec idx)\n        )\n      )\n  ))","problem":26,"user":"510b704ee4b078ea71921100"},{"problem":26,"code":"#(take % \n  ((fn fib [a b] \n     (cons a (lazy-seq (fib b (+ a b))))\n  ) 1 1)\n)","user":"55916764e4b0604b3f94d57b"},{"problem":26,"code":"#(take % ((fn F [a b] (cons a (lazy-seq (F b (+ a b))))) 1 1))","user":"55f6fe09e4b06e875b46cea2"},{"code":";infinate lazy sequence for the win. \n;this is quite beautiful\n#(take %  \n    (map first \n      (iterate \n        (fn [[a b]] \n            [b (+ b a)]) [1 1])))","problem":26,"user":"4ee7d113535d93acb0a6686e"},{"problem":26,"code":"(fn fibonacciSequence [n] \n    (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    (conj \n        (fibonacciSequence (- n 1))\n        (+  (last (fibonacciSequence (- n 1))) \n            (last (fibonacciSequence (- n 2))) \n        )\n    )\n    )\n)","user":"5be2e5b2e4b0ed4b8aab4ccb"},{"problem":26,"code":"(fn fibb[x] (lazy-seq (if (= x 2) [1 1] (conj (vec (fibb (dec x))) (reduce + (take 2 (reverse (fibb (dec x)))) )) )))","user":"58a38d37e4b02bd94d917ef9"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)] ) [1 1] ) ) )","user":"5603c31fe4b04bb52996e1c1"},{"problem":26,"code":"(fn my-fib\n  [n]\n  (let [inner (fn inner [x]\n    (cond\n      (= 1 x) '(1)\n      (= 2 x) '(1 1)\n      :else (conj (inner (dec x)) (+ (first (inner (dec x))) (second (inner (dec x)))))))]\n  (reverse (inner n))))","user":"5599abc9e4b031d6649c9bb0"},{"problem":26,"code":"#(take %(map first(iterate(fn[[a b]] [b(+ a b)]) [1 1])))","user":"5b6e1649e4b0c6492753e7ce"},{"problem":26,"code":"(fn [n]\n  (loop [fir 0\n         sec 1\n         ans []\n         curr-n n]\n      (if  (= curr-n 0)\n        ans\n        (recur sec (+ fir sec) (conj ans sec) (dec curr-n)))))","user":"5cdbb1b2e4b05ee0cb311732"},{"problem":26,"code":"(fn fib [n]\n  (case n \n    1 '(1 1)\n    2 '(1 1)\n    (let [prev-xs (fib (- n 1))]\n      (concat prev-xs [(+ (last prev-xs) (-> prev-xs butlast last))]))))","user":"58d63b99e4b03c36ff7e596b"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 cnt n res []]\n    (if (= cnt 0)\n      res\n      (recur b (+ a b) (- cnt 1) (conj res a)))))","user":"579c7db7e4b05b1deef9ae0a"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x0 x1]] [x1 (+ x0 x1)]) [1 1])))","user":"585d9558e4b0f14aab7c879c"},{"code":"#(take %\n       ((fn f [a b]\n          (cons a\n                (lazy-seq (f b (+ a b)))))\n        1 1))","problem":26,"user":"52c73194e4b0c2d177d6211e"},{"problem":26,"code":"(fn Fibonacci [n] = (map (fn f [n] = (if (= n 1) 1 (if (= n 2) 1 (+ (f (- n 1)) (f (- n 2)))))) (range 1 (+ n 1))))","user":"60c86bbde4b0e0fa5f1b42fb"},{"problem":26,"code":"(fn fiblist [n]\n  \"returns first n fibonacci numbers\"\n  (map (fn fib [n]\n  \"returns nth fibonacci number\"\n  (cond \n    (<= n 2) 1\n    :else (+ (fib (- n 1)) (fib (- n 2)))\n  )\n) (range 1 (inc n)))\n)","user":"5d828b7ee4b0915913b1d382"},{"code":"(fn [n]\n  (loop [i 2 res [1 1] n1 1 n2 1]\n    (if (= i n) res (let [r (+ n1 n2)]\n      (recur (inc i) (conj res r) r n1)))))","problem":26,"user":"5092425ee4b09a7d0b586de4"},{"code":"(fn [n]\n  (take n\n    (map first\n      (iterate (fn [[a b]]\n                 [b (+ a b)])\n                [1 1]))))","problem":26,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"#(rest (take (inc %) ((fn []\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    0 1)))))","problem":26,"user":"4ed8715c535d10e5ff6f52f9"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else (sort (conj (fib (dec x)) ( + (last (fib (dec x))) (last (fib (- x 2))))))))","user":"562d7854e4b0a45d2ff8301d"},{"problem":26,"code":"(fn fib [n] \n  (case n\n     1 [1]\n     2 [1 1]\n     (let [fs (fib (dec n))]\n       (conj fs (+ (last fs) (last (butlast fs)))))))","user":"5f300f28e4b033932238a682"},{"problem":26,"code":"(fn [n]\n            (take n (map second (iterate #(list (second %) (+ (first %) (second %)))\n                                        '(0 1)))))","user":"57abff53e4b0b8559636fc81"},{"problem":26,"code":"(fn fib [i] (loop [fibs [1,1] c (- i 2)] (if (= c 0) fibs (recur (conj fibs (+ (last fibs) (nth fibs (- (count fibs) 2)))) (dec c)))))","user":"550772cee4b021ccfedb96a8"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1] )))","user":"57822efce4b0d36ec5835e91"},{"code":"(comp reverse (fn nfibs [x]\n  (let [fib (fn fib [x] (if (<= x 1) x (+ (fib (- x  1)) (fib (- x 2)))))]\n    (if (<= x 1) '(1) \n      (conj (nfibs (- x 1))\n            (fib x))))))","problem":26,"user":"52d6889ae4b09f7907dd1361"},{"problem":26,"code":"(fn fibonacci\n  ([n, s]\n   (if (<= n 2)\n     '(1 1)\n     (let [smaller-seq (fibonacci (- n 1) s)\n           previous (first smaller-seq)\n           previous-previous (first (rest smaller-seq))]\n       (cons (+ previous previous-previous) smaller-seq))))\n\n  ([n]\n   (reverse (fibonacci n '()))))","user":"5f735915e4b02876ed9fd097"},{"problem":26,"code":"#(loop [x 1 \n       y 1 \n       v [x y] \n       cnt 2]\n  (if(= cnt %)\n  v\n  (recur y (+ x y)   (conj v (+ x y)) (inc cnt))\n  )\n  )","user":"55b1c62de4b0da326a65cf72"},{"code":"(fn[n](take n (map second \n  (iterate (fn[[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e58bcd4535d8a8b8723a296"},{"problem":26,"code":"(fn [length] (nth (iterate #(conj %\n                                  (reduce + (take-last 2 %)))\n                           [1 1])\n                   (- length 2)\n             )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"code":"#(loop [a 0 coll [1]]\n    (if (= (count coll) %)\n      coll\n     \t(recur (last coll)\n             (conj coll (+ a (last coll)))\n     \t)\n    )\n)","problem":26,"user":"4fe8d1b5e4b0547ebccb2425"},{"code":"#(take % ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","problem":26,"user":"4eb01df4535d7eef30807337"},{"code":"#(map (fn fibo [n] (if (<= n  1) n (+ (fibo (- n 1)) (fibo (- n 2) )))) (range 1 (inc %)))","problem":26,"user":"51c03929e4b0c9c82288292c"},{"problem":26,"code":"#(map (fn fib [y] (case y \n                   0 0 \n                   1 1\n                   (+ (fib (- y 2)) (fib (- y 1))))\n       ) (range 1 (+ % 1))\n     )","user":"54e0e6e1e4b024c67c0cf7bb"},{"problem":26,"code":"(fn [n]\n  (let [fib (map first (iterate (fn [[a b]] (vector (+ a b) a)) [1 0]))]\n    (take n fib)))","user":"5defc177e4b093ff717275af"},{"problem":26,"code":"(fn\n  [n]\n  (loop [n (- n 2)\n         coll [1 1]]\n    (if (= n 0)\n      coll\n      (recur (dec n)\n             (conj coll (reduce + (take-last 2 coll)))))))","user":"58817d3ae4b0f1effa3b763b"},{"problem":26,"code":"(fn [n] (take n\n               ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n               \t1 1)))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn fib [n]\n  ((fn [n xs a b]\n    (if (= n 0)\n      xs\n      (recur (dec n) (conj xs a) b (+ a b)))) n [] 1 1))","problem":26,"user":"530578ede4b0d8b024fd3760"},{"problem":26,"code":"(fn\n  [final_length]\n  (loop [fibs '()]\n    (let [current_length (count fibs)]\n      (if (< current_length final_length)\n        (if (= current_length 0)\n          (recur '(1))\n          (if (= current_length 1)\n            (recur '(1 1))\n            (let [a (nth fibs (- current_length 2))\n                  b (nth fibs (- current_length 1))]\n              (recur (concat fibs [(+ a b)])))))\n        fibs))))","user":"53de7484e4b0d874e779ae35"},{"problem":26,"code":"(fn [id] ((fn fibrec [idx all] (if (= idx 0) all (recur (dec idx) (conj all (+ (last all) (second (reverse all))))))) (- id 2) [1 1]))","user":"569bfc43e4b0542e1f8d145c"},{"problem":26,"code":"(fn [n]\n  (loop [iter 0\n         fibseq []]\n    (if (= iter n)\n      fibseq\n      (recur (inc iter)\n             (if (= iter 0) [1]\n               (if (= iter 1) [1 1]\n                 (conj fibseq (+ (last fibseq) (first (take-last 2 fibseq))))))))))","user":"5b2a559be4b063e2438bcc74"},{"code":"(fn my-fib [n]\n    (case n\n      1 [1]\n      2 [1 1]\n      (let [prev-fib (my-fib (dec n))]\n        (conj prev-fib (+ (last prev-fib) ((comp second reverse) prev-fib))))))","problem":26,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn [n] (if (< n 1) '()\n          ((fn fib [n fn-1 fn-2]\n            (if (= n 1) (list fn-1)\n              (cons fn-1 (fib (dec n) (+ fn-1 fn-2) fn-1))\n             )\n            ) n 1 0)))","problem":26,"user":"525372ade4b0541d1855b8f3"},{"problem":26,"code":"(fn  [n]                                                                                                                               \n  (letfn [(lazy-fib [lo hi]                                                                                                                 \n            (lazy-seq                                                                                                                       \n             (cons hi (lazy-fib hi (+ lo hi)))))]                                                                                           \n    (take n (lazy-fib 0 1))))","user":"58e2e11ce4b005f69f193ca0"},{"problem":26,"code":"(fn [x]\n  (take x [1 1 2 3 5 8 13 21]))","user":"59f1d218e4b0966464fe6a68"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [b (+ b a)]) [1 1])\n       (map first)\n       (take n)))","user":"53e6120de4b036ad0777e46c"},{"code":"#(take %1 ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","problem":26,"user":"53a068cbe4b0ca733b9744ae"},{"problem":26,"code":"(fn [n]\n  (letfn [(h [col x] (if (= x 0) col (h (conj col (+ (second (reverse col)) (last col))) (dec x))))]\n    (if (< n 3) (take n [1 1]) (h [1 1] (- n 2)))))","user":"5ce3e239e4b0a17bb84e2b46"},{"code":"(fn [ith] (loop [i ith s '() a 1 b 1] (if (> i 0) (recur (dec i) (conj s a) b (+ a b)) (reverse s))))","problem":26,"user":"51bd8c53e4b0ff155d51d2b2"},{"problem":26,"code":"(fn [n] \n  (nth \n   (iterate \n    #(conj % \n           (apply + (take-last 2 %))) \n    '[1 1]) \n   (- n 2)))","user":"561c0278e4b064ca9f4b1691"},{"code":"(fn fib [n]\n  (take n\n        ((fn fibs [x y]\n          (lazy-seq (cons x (fibs y (+ x y)))))\n        1 1)))","problem":26,"user":"5180c69ae4b06b8caf33fa00"},{"problem":26,"code":"(fn [n]\n  (loop [counter (- n 1)\n         first-fib 1 \n         second-fib 1\n         fib-sequence [1]]\n    (if (= counter 0)\n      fib-sequence \n      (recur (- counter 1) second-fib (+ first-fib second-fib) (conj fib-sequence second-fib)))))","user":"53b05a36e4b047364c044481"},{"code":"(fn [n] \n  (loop [x [1 1]\n        n (- n 2)] \n  (if (= n 0)\n   x\n   (recur (conj x (+ (last x) (last (butlast x)))) (dec n))\n   )))","problem":26,"user":"52d6767ee4b09f7907dd135d"},{"problem":26,"code":"(fn [x]\n  (let [fibo (fn fibo [x]\n               (if (or (= x 0) (= x 1))\n                 1\n                 (+ (fibo (dec x)) (fibo (- x 2)))))]\n  (map fibo (range x))))","user":"54800885e4b0c51c1f4d7323"},{"problem":26,"code":"(fn [x] \n  (loop [cur 3 fib1 1 fib2 1 fib [1 1]]\n    (if (= cur x)\n      (conj fib (+ fib1 fib2))\n      (recur (inc cur) fib2 (+ fib1 fib2) (conj fib (+ fib1 fib2))\n             )\n             \n      )\n    )\n  )","user":"54975e99e4b0b312c081ff72"},{"code":"#(nth  (iterate \n (fn [s] (conj s (apply + (take-last 2 s)))) [1])\n      (dec %))","problem":26,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn [n]\n  (loop [n-1 0\n         n-2 0\n         c n\n         fib []]\n    (let [n0 (if (zero? n-1) 1 (+ n-1 n-2))]\n      (if (zero? c) fib\n        (recur n0 n-1 (dec c) (conj fib n0))))))","problem":26,"user":"4f58d92fe4b0a7574ea71858"},{"code":"#(take % (letfn [(fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))] (fibs)))","problem":26,"user":"52f89125e4b047fd55836fd4"},{"problem":26,"code":"#(rest(map (fn\n  [n]\n  (first\n    (first\n      (drop n\n            (iterate (fn [[a b]] [b (+' a b)]) \n                     [0 1]))))) (range (inc %))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"(fn fib [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [l (fib (dec n))]\n            (conj l (apply + (take 2 (reverse l)))))))","problem":26,"user":"4fde492be4b05e33b9224f8a"},{"problem":26,"code":"(fn fib [a] (loop [x [1]\n                     y 1]\n               (if (= (count x) a)\n                 x\n                 (recur (conj x y) (+ (last x) y)))))","user":"5470b3d0e4b00cfc9eacc1bb"},{"code":"(fn [x]\n  (map first (take x\n        (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"4eae5fe4535d7eef30807325"},{"problem":26,"code":"#(reduce (fn[x y](conj x (apply + (take-last 2 x)))) [1 1] (range (- % 2)))","user":"54103c69e4b01498b1a719a4"},{"problem":26,"code":"(fn nfib [x]\n                (take x\n                      ((fn fib [a b]\n                         (cons a (lazy-seq (fib b (+ a b)))))\n                       1 1)))","user":"541f89a5e4b01498b1a71a99"},{"code":"(fn [x] (loop [a [] n 0] (if (>= n x) a (recur (if (< n 2) (merge a 1) \n                                                   (merge a (+ (first (reverse a)) (second (reverse a)))\n                                                   )) (inc n)))))","problem":26,"user":"526fce6fe4b03e8d9a4a7383"},{"code":"#(take % (map first (iterate (fn [[a b]] [b, (+ a b)]) [1 1])))","problem":26,"user":"52f9c68ce4b047fd55836fef"},{"problem":26,"code":"(fn [x] (loop [res [1 1]] (if (>= (count res) x) (seq res) (recur (conj res (+ (second (reverse res)) (first (reverse res))))))))","user":"5cf938a5e4b0b71b1d808a90"},{"problem":26,"code":"(fn [limit]\n  (loop [first 1\n         second 1\n         count 2\n         current-list (conj [] first second)]\n    (if (= count limit)\n      current-list\n      (let [third (+ first second)\n            current-list (conj current-list third)]\n        (recur second third (inc count) current-list)))))","user":"54513516e4b0e397800069af"},{"code":"(fn fib [n] \n  (let [fib-nth (fn fib-nth [n] \n    (if (== n 0) 0\n      (if (== n 1) 1 \n        (+ (fib-nth (- n 2)) \n           (fib-nth (- n 1))))))]\n\n  (loop [count n res '()]\n    (if (= count 0) \n      res\n      (recur (dec count) \n             (cons (fib-nth count) res))))))","problem":26,"user":"526fc549e4b03e8d9a4a7380"},{"problem":26,"code":"(fn [n]\n  (loop [fs '()\n         k n]\n    (if (zero? k)\n      (reverse fs)\n      (let [a (or (first fs) 1)\n            b (or (second fs) 0)]\n        (recur (conj fs (+ a b))\n               (dec k))))))","user":"579fc29fe4b0264b925669ff"},{"problem":26,"code":"(fn\n  [n]\n  (take n ((fn rfib\n             [a b]\n             (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"54570d08e4b080a794c2c888"},{"code":"(fn fib [n]\n  (let [rfib\n        (fn rfib [n]\n          (cond\n           (= n 1) (lazy-seq '(1))\n           (= n 2) (lazy-seq '(1 1))\n           :else (conj (rfib (dec n)) (+ (first (rfib (dec n))) (second (rfib (dec n)))))))]\n    (reverse (rfib n))))","problem":26,"user":"52323a4ae4b035af41902a79"},{"code":"(fn [x] (if (= x 3)(list 1 1 2)(if (= x 6)(list 1 1 2 3 5 8)(list 1 1 2 3 5 8 13 21))))","problem":26,"user":"4e18c553535d04ed9115e7f4"},{"problem":26,"code":"(fn fib\n  ([x y n]\n    (if (> n 0)\n      (cons (+ x y) (fib y (+ x y) (- n 1)))\n      []\n    )\n  )\n  ([n] (fib 1 0 n))\n)","user":"562add6de4b00e49c7cb4834"},{"code":"#(if (= 2 %2) %1 \n    (recur ((fn [s](reduce conj s \n          (list (+ (last s) (second (reverse s))))))\n  %1) (dec %2))) [1 1]","problem":26,"user":"4fe91fa2e4b0547ebccb2440"},{"code":"(fn [x]\n  (loop [c x nl 0 s '(1)]\n    (if (= c 1)\n      (reverse s)\n      (recur (dec c) (first s) (conj s (+ nl (first s)))))))","problem":26,"user":"506b18c8e4b0a2a5463de383"},{"problem":26,"code":"(fn fib [sofar s x]\n  (if (= s x)\n    sofar\n    (fib (conj sofar (reduce + (take-last 2 sofar))) (+ s 1) x)))\n    [1 1] 2","user":"5f3adcf4e4b004f08c61c531"},{"problem":26,"code":"(fn [n] (\n  reduce (fn [rval index] (conj rval (+ (nth rval index) (nth rval (dec index))))) \n                                [1 1] (map dec (drop 2 (range n)))\n))","user":"578d0ec0e4b0ebec4cfb7563"},{"problem":26,"code":"#(loop [n % res [1]]\n   (if (> n 1)\n     (recur (dec n) (conj res (reduce + (take-last 2 res))))\n     res))","user":"55868660e4b059ccff29b1d4"},{"problem":26,"code":"(fn [n]\n  (if (< n 3)\n    (vec (take n [1 1]))\n    (loop [v [1 1]\n           i 2]\n      (if (< i n)\n        (recur (conj v (+ (get v (- i 1))\n                          (get v (- i 2))))\n               (inc i))\n        v))))","user":"5e80edc3e4b09a7a73c8bba9"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]]\n                        [b (+ a b)])\n                      [1 1]))))","user":"56180d83e4b06b1bb2182a18"},{"problem":26,"code":"(fn fibonacci [n]\n  (loop [start [0 1] i 1]\n     (if (< i n)\n      (recur (conj start (reduce + (take-last 2 start)))\n              (inc i))\n      (rest start))\n  ))","user":"6092c0a9e4b00e9e6653c3dc"},{"problem":26,"code":"(fn d [e] \n\t(take e \n\t\t((fn a [b,c] \n\t\t\t(cons b (lazy-seq (a c (+ b c))))\n\t\t) 1 1)\n\t)\n)","user":"5710e574e4b09c608db7043b"},{"problem":26,"code":"(fn [n]\n   (take n (map first\n                (iterate (fn [[a b]]\n                           (vector b (+ a b)))\n                         [1 1]))))","user":"595a2ab5e4b066ee0a44afb2"},{"problem":26,"code":"#(letfn [(fib [n]\n         (case n\n           (1 2) 1\n           (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range 1 (inc %))))","user":"58f8d79ee4b0438e51c2cf39"},{"problem":26,"code":"(fn [n]\n  (take n\n    (map first\n      (iterate\n        #(vector (apply + %) (first %))\n        [1 0]))))","user":"5e75f723e4b085ba37836de9"},{"code":"(fn [n]\n  (let [lazy-fibs ((fn fibs [a b]\n                    (lazy-seq (cons a (fibs b (+ a b))))) 1 1)]\n    (take n lazy-fibs)))","problem":26,"user":"51d08d67e4b067c365486351"},{"problem":26,"code":"(fn [n]\n  ((fn [l c t x1 x2]\n    (if (= c t)\n      l\n      (recur \n       (if (< c 2)\n        (concat l [1])\n        (concat l [(+ x1 x2)])\n       )\n       (+ c 1)\n       t\n       x2\n       (if (< c 2)\n          1\n          (+ x1 x2)\n       )\n      )\n     )\n   ) [] 0 n 0 1)\n )","user":"577aacf2e4b0d3393e5deb03"},{"problem":26,"code":"(fn [x] \n  (seq (loop [cntr x\n         prev 0\n         cur 1\n         result [1]]\n             (if (= 1 cntr) \n               result\n               (let [fib (+ cur prev )]\n               \t\t(recur (dec cntr)\n                      cur\n                      fib\n                      (conj result fib)))))))","user":"5e0d1947e4b099d064962f92"},{"problem":26,"code":"(fn fib [x] (if (= x 1) '[1] (if (= x 2) '[1 1] (let [pre (fib (- x 1))] (conj pre (+ (last pre) (last (butlast pre))))))))","user":"5528a8cae4b0ffed3738f940"},{"code":"(fn fib [n] (last (take (dec n)\n                        (iterate (fn next-fib [fibs]\n                                   (conj fibs (+ (last fibs) (last (butlast fibs)))))\n                                 [1 1]))))","problem":26,"user":"500ea957e4b00fff93030f9b"},{"problem":26,"code":"#(->>\n (iterate (fn [[prev nex]] [nex (+ nex prev)]) [1 1])\n (map first)\n (take %))","user":"58ee84e5e4b056aecfd47dab"},{"problem":26,"code":"#(take % (letfn [(fibs [x y] (lazy-seq (cons x (fibs y (+ x y)))))] (fibs 1 1)))","user":"555b35f7e4b0deb715856e4b"},{"code":"(fn f ([i] (f 1 1 [1 1] (- i 2)))\n      ([p2 p1 v i] (if (= i 0)\n                       v\n                       (let [np2 p1, np1 (+ p2 p1)]\n                         (recur np2 np1 (concat v [np1]) (dec i))))))","problem":26,"user":"5069c09be4b01dc6af13f837"},{"problem":26,"code":"(fn [n]\n      (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"570794d8e4b0b0fb43fd068b"},{"code":"(fn [r] (map (fn fib [n] (cond (= n 1) 1\n    \t  (= n 2) 1\n\t\t\t  :else (+ (fib (- n 1)) (fib (- n 2))))) (map inc (range r))))","problem":26,"user":"4fb86dc9e4b081705acca2d8"},{"problem":26,"code":"#(take \n  % \n  ((fn fib \n  \t\t([] \n        \t(fib 1 1))\n        ([a b] \n            (lazy-seq \n            \t(cons a (fib b (+ a b))))))))","user":"5a68f374e4b0512ff01cda05"},{"problem":26,"code":"#(loop [acc [] f1 1 f2 1 iter 1]\n   (if (> iter %)\n   acc\n   (recur (conj acc f1) f2 (+ f1 f2) (inc iter))\n))","user":"5b210749e4b03cfeda66ed48"},{"problem":26,"code":"#(take % ((fn fib [a b]\n        \t(cons a (lazy-seq (fib b (+ a b))))) \n      \t  1 1))","user":"5768fec7e4b0a07e8fc180e2"},{"problem":26,"code":"(fn [x] (loop [count x a 1 b 1 acc '()] ( if (zero? count) (reverse acc) ( recur (dec count) b (+ a b) (cons a acc)      )    )     )     )","user":"56979bb7e4b0e0b3d3318cac"},{"problem":26,"code":"(fn [x] (reduce (fn [a b] (concat a (list (+ (first (take-last 2 a)) (second (take-last 2 a)))))) (list 1 1) (range (- x 2))))","user":"567e6d24e4b0feffd0d18eb4"},{"problem":26,"code":"(fn [n]\n    (let [f (fn [n xs]\n              (if (= 0 n)\n                xs\n                (recur\n                  (dec n)\n                  (cons (+ (first xs) (second xs)) xs))))]\n\n      (reverse (f (- n 2) '(1 1)))))","user":"56bcc2b2e4b0f26550335965"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1 1]]\n    (if (= n (count acc)) acc\n      (recur (conj acc (+ (last acc) (nth (reverse acc) 1)))))))","user":"53d6024ae4b0e771c3025450"},{"code":"(letfn ((fibo\n          [x]\n          (cond\n           (= x 1) 1\n           (= x 2) 1\n           :else\n           (+ (fibo (- x 2)) (fibo (- x 1))))))\n  (fn [x] (for [n (range x)\n        :let [fibo-value (fibo (+ n 1))]]\n    fibo-value)))","problem":26,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn [num-fibs]\n  (loop [fibs [1 1]\n         ctr (- num-fibs 2)]\n     (if (<= ctr 0)\n         fibs\n         (recur (conj fibs (+ (last fibs) (last (butlast fibs)))) (dec ctr)))))","problem":26,"user":"4ec601ff535d6d7199dd36be"},{"code":"(fn fibs [n]\n  (letfn [(fibs-h [a b]\n            (cons a (lazy-seq (fibs-h b (+ a b)))))]\n    (take n (fibs-h 1 1))))","problem":26,"user":"4ede8e1d535d10e5ff6f5339"},{"problem":26,"code":"(fn [x]\n   (take x ((fn fib [a b] \n              (lazy-seq (cons a (fib b (+ a b)))))\n            1 1)))","user":"5aafde49e4b073f1774425a1"},{"problem":26,"code":"(fn [x] (if (= x 1) '[1]\n\t \t\t(reduce \n\t \t\t\t(fn [a b] \n\t \t\t\t\t(conj a (+ (last a) (nth a (- (count a) 2))) )) [1, 1] (range 2 x) \t\t\t\n\t \t\t))\n\t \t)","user":"583048d9e4b051871117c007"},{"code":"#(loop [f '(1 1)\n        t (- % 2)\n        i 0]\n  (if (= t 0) (into () f) (recur (conj f (+ (nth (into () f) i) (nth (into () f) (+ i 1)))) (dec t) (inc i))))","problem":26,"user":"4e1fe800535d04ed9115e811"},{"code":"(fn [n]\n  (let [p (iterate (fn [[a b]] [b (+ a b)]) [1 1])]\n    (take n (map first p))))","problem":26,"user":"505aa653e4b021387fb89857"},{"code":"#(take % \n       ((fn fib-seq [a b]\n                    (lazy-seq (cons a \n                                (fib-seq b \n                                     (+ a b))))) \n         1 1))","problem":26,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn [n]\n  (let [pairs (iterate (fn [[a b]] [b (+ a b)]) [0 1]) ;\n        fibs (map first pairs)]\n    (rest (take (inc n) fibs)))\n)","problem":26,"user":"5201ff99e4b0b2e020a18f26"},{"problem":26,"code":"#(loop [cnt 2\n         a 1\n         b 1\n         res '(1 1)]\n    (if (= cnt %)\n      (reverse res)\n      (recur (inc cnt) b (+ a b) (conj res (+ a b)))))","user":"559067ace4b0277789237670"},{"problem":26,"code":"(fn [X] (seq (loop [a 0 b 1 acc [1] c (dec X)]\n          (if (zero? c) \n            acc\n            (let [n (+ a b)]\n              (recur b n (conj acc n) (dec c)))))))","user":"565cc7a6e4b068f2fe63dc19"},{"problem":26,"code":"(fn [n] \n  (reduce \n   (fn [acc _]\n          (conj acc (+ (last acc) (last (butlast acc)))))\n        [1 1]\n        (range (dec (dec n)))))","user":"5ade6bafe4b0837691e92c23"},{"problem":26,"code":"#(loop [n % x [1] y 0]\n   (if (zero? (- n 1))\n     x\n     (recur\n      (dec n)\n      (conj x (+ y (last x))) \n      (last x))))","user":"5a929426e4b002d099cae70d"},{"problem":26,"code":"(fn [n]\n  (letfn [(stack-consuming-fibo [n]\n            (cond\n              (= n 0) 0\n              (= n 1) 1\n              :else (+ (stack-consuming-fibo (- n 1))\n                       (stack-consuming-fibo (- n 2)))))]\n    (map stack-consuming-fibo (take n (range 1 (+ n 1))))))","user":"5db658ebe4b010eb3c36cd39"},{"code":"#(map first (take % (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","problem":26,"user":"531cdafbe4b08068f379edaa"},{"problem":26,"code":"(fn [x] \n  (take x\n        ((fn fib [valueOne valueTwo]\n           (cons valueOne (lazy-seq (fib valueTwo (+ valueOne valueTwo)))))\n           1 1)))","user":"5a5dbe9de4b0512ff01cd92b"},{"problem":26,"code":"(fn fib [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [prev (fib (dec n))\n          nfib (+ (last prev) (nth prev (- n 3)))]\n      (conj prev nfib))))","user":"5a48f53de4b05d388ecb6b6a"},{"code":"(fn fib [x] (if (= x 2)\n              [1 1]\n              (conj (fib (- x 1))\n                    (+ (first (reverse (fib (- x 1)))) (second (reverse (fib (- x 1))))\n                       ))))","problem":26,"user":"52bebdbfe4b07a9af5792326"},{"problem":26,"code":"(fn [n]\n  (take n (map first\n               (iterate\n                (fn [[a b]] [(+ a b) a])\n                [1 0]))))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":26,"code":"(fn [iter] (reverse (reduce (fn [l x] (cons (+ (first l) (second l)) l)) '(1 1) (repeat (- iter 2) 1))))","user":"5c76577ae4b0fca0c16227ea"},{"problem":26,"code":"(fn [num]\n    (loop [cur 1\n           prev 0\n           count num\n           ret   [1]]\n      (if (= count 1)\n        ret\n        (recur (+ cur prev) cur (dec count) (conj ret (+ cur prev))))))","user":"54de6820e4b024c67c0cf79f"},{"problem":26,"code":"#(if \n    (< %1 2)\n    [1]\n    (loop [a 3\n          res [1, 1]]\n      (if (> a %1)\n        res\n        (recur (+ a 1) \n          (conj res \n            (+\n              (nth res (- a 3))\n              (nth res (- a 2))\n            )\n          )\n        )\n      )\n    )\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [coll value]\n            (cond\n             (= value 0) '(1)\n             (= value 1) '(1 1)\n             't (concat coll (list (+ (last coll) (last (butlast coll)))))))\n          '()\n          (range n)))","user":"547f8736e4b0c51c1f4d731d"},{"code":"(fn fibs [x]\n  (let [fib (fn fib2 [y]\n         (if (<= y 2) 1 (+ (fib2 (dec y)) (fib2 (- y 2)))))]\n    (map fib (range 1 (inc x)))))","problem":26,"user":"503be1f0e4b0fc0f99c2e549"},{"code":"(fn[n]  \n  (loop [x (- n 2) f [1 1]]   \n     (if (zero? x)\n       f\n      (recur (dec x) (conj f (+ (last f) (last (drop-last f)))))\n     )\n  )\n)","problem":26,"user":"5240e8ebe4b0ad64fa010349"},{"code":"(fn fib [n] (if (< n 3)\n                [1 1]\n                (conj (fib (dec n)) (apply + (take-last 2 (fib (dec n)))))\n             ))","problem":26,"user":"4f89d489e4b033992c121c7e"},{"problem":26,"code":"(fn [x]\n  (take x \n    (map \n      first \n      (iterate \n        (fn [[x y]] [y (+ x y)]) \n        [1 1]))))","user":"601f508ce4b0bf4ca6b10959"},{"problem":26,"code":"#(map (fn fib [n]\n  (if (<= n 2)\n    1\n    (+ (fib (- n 1))\n       (fib (- n 2)))))\n      (range 1 (+ % 1)))","user":"60919461e4b00e9e6653c3d7"},{"code":"(fn run [amt]\n  (let [fib (fn fib\n \t\t\t\t([] (fib 1 1))\n \t\t\t\t([a b] (cons a (lazy-seq (fib b (+ a b))))))]\n    (take amt (fib))))","problem":26,"user":"52c42f6be4b0c2d177d620d1"},{"problem":26,"code":"#(->> [0 1] (iterate (fn [[x y]] [y (+ x y )]))  (map last) (take %))","user":"5a71c89ee4b0512ff01cda93"},{"problem":26,"code":"(fn [n]\n  (loop [s [1 1] i 2]\n    (if (= (count s) n)\n      (seq s)\n      (recur (conj s (+ (get s (- i 1)) (get s (- i 2)))) (+ i 1)))))","user":"5cc74e44e4b0ccb061962833"},{"code":"(fn [n]\r\n  (let [fib (fn fib [x] (if (or (= x 0) (= x 1)) 1 (+ (fib (dec x)) (fib (- x 2)))))]\r\n     (take n (map fib (range)))))","problem":26,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn fib[x]\n  (if (== x 1) '(1) (if (== x 2) '(1 1) \n                      (concat (fib (- x 1))\n                              (list (+ (last (fib (- x 1))) \n                                       (last (fib (- x 2)))\n                                       ))\n                              ))))","problem":26,"user":"4fe8b85be4b07c9f6fd12c77"},{"code":"#(take % ((fn f [x y] (lazy-seq (cons x (f y (+ x y))))) 1 1))","problem":26,"user":"4f047542535dcb61093f6bc7"},{"code":"#(take %\n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","problem":26,"user":"5208a3a2e4b0301979a6c235"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(fibval [n]\n    (if (< n 2)\n      1\n      (+ (fibval (- n 2)) (fibval (- n 1)))))]\n     (map fibval (range n))))","user":"548c8115e4b0e286459a120c"},{"code":"(fn [x]\n  ((fn [lst]\n    (if (= (count lst) x) \n      (reverse lst)\n      (recur (conj lst (+ (first lst) (second lst)))))) '(1 1)))","problem":26,"user":"51f629dde4b06ff1c25c52ba"},{"code":"(fn [n] (reverse (last (take n (iterate #(conj % (apply + (take 2 %))) '(1))))))","problem":26,"user":"5220ef05e4b0e6a83c8925b8"},{"problem":26,"code":"(fn [x]\n      \"Returns the first X fibonacci numbers.\"\n      (loop [a 0\n             b 1\n             n 0\n             l []]\n          (if (>= n x)\n            l\n            (let [b (+ b a)\n                  a (- b a)]\n            (recur a b (inc n) (conj l a) )))))","user":"5957cc41e4b066ee0a44af76"},{"problem":26,"code":"(fn [n]\n  (take n (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"56c1e720e4b0839206b9d68b"},{"code":"#(take % \n    (map first \n      (iterate \n        (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4dd88803535d2dad7130b5d9"},{"code":"(fn [N] (map (fn F [n] (if (< n 2) 1 (+ (F (- n 1)) (F (- n 2))))) (range 0 N)))","problem":26,"user":"4fa3f91fe4b081705acca196"},{"problem":26,"code":"(fn fib-seq-to [n]\n  (if (< n 3)\n    (vec (repeat n 1))\n    (let [seq-to (fib-seq-to (dec n))]\n      (conj seq-to (+ (last seq-to) (-> seq-to butlast last))))))","user":"5687b6abe4b0dcc4269f4061"},{"code":"(fn [n]\n  ((fn [n1 n2 N lst]\n    (if (= N 0) (reverse lst) (recur n2 (+ n1 n2) (- N 1) (conj lst n2)))) 0 1 n '()))","problem":26,"user":"539755d9e4b0b51d73faaee8"},{"code":"#(take % (map first (iterate (fn [[m n]] [n (+ m n)]) [1 1])))","problem":26,"user":"4e65f9d4535d8ccf87e9fe73"},{"code":"(fn f2 [x]\n  (loop [a 0 b 1 c [1] d 1]\n    (if (= d x)\n      c\n      (recur b (+ a b) (conj c (+ a b)) (+ 1 d)))))","problem":26,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [coll (fib (dec n))]\n      (conj coll (reduce + (take-last 2 coll))))))","user":"542cb77ae4b0dad94371f2aa"},{"problem":26,"code":"(fn [n] (take n\n        ((fn fib ([] (fib 1 1))\n           ([x y] (cons x (lazy-seq (fib y (+ x y)))))))))","user":"56fc9a2de4b08d47c977819b"},{"code":"(fn [n]\n     (map #(get %1 0) (take n (iterate #(vector (get %1 1) (+ (get %1 1) (get %1 0))) [1 1]))))","problem":26,"user":"51f5539fe4b0abb92f97f9cd"},{"problem":26,"code":"#(loop [res [1] i 1 n %]\n      (if (= n 1)\n        res\n        (recur (conj res i) (+ (last res) i) (dec n))))","user":"60759e51e4b069485764de5a"},{"problem":26,"code":"(fn fibonacci [n]\n  (if (= n 0)\n    ()\n    (if (= n 1)\n      (conj (fibonacci 0) 1)\n      (if (= n 2)\n        (concat (fibonacci 1) '(1))\n        (concat\n          (fibonacci (dec n))\n          (list (reduce + (take-last 2 (fibonacci (dec n)))))\n          )\n        )\n      )\n    )\n  )","user":"5c51d700e4b0fb8c5ffd99d1"},{"code":"#(take % (cons 1 ((fn fib [a b] (lazy-seq (cons (+ a b) (fib b (+ a b))))) 0 1)))","problem":26,"user":"532c0507e4b09d4e7a9b553c"},{"problem":26,"code":"(fn [x] (map (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range x)))","user":"5d55305ce4b02ba5928a680d"},{"problem":26,"code":"(fn [n]\n  (->> (repeat nil)\n       (reductions (fn [[a b] _] [b (+ a b)]) [0 1])\n       (map second)\n       (take n)))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"#(take %1 ((fn fib [a b] ( lazy-seq (cons a (fib b (+ a b))) ) ) 1 1))","problem":26,"user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n     1 1)))","problem":26,"user":"50705072e4b07bd6ad9b9f27"},{"code":"#(take % (map first (iterate (fn [[a b]] [(+ a b) a]) [1 0])))","problem":26,"user":"4df20dda535d08e6dec9fe23"},{"problem":26,"code":"(fn [n]\n  (loop [f [1]]\n    (if (>= (count f) n)\n      f\n      (recur (conj f (apply + (take 2 (reverse f))))))))","user":"56e7ebcce4b02e7e935eb6e2"},{"problem":26,"code":"#(reverse (loop [a 1 b 0 c '(1) d 1]\n     (if (= d %) c\n     \t(recur (+ a b) \n               a \n               (conj c (+ a b)) \n               (inc d)))))","user":"5d20677be4b02ea6f0fb69d3"},{"problem":26,"code":"(fn fibonacci [number]\n  (let [fib-nums [1 1]]\n    (if (= number 1)\n      [1]\n      (if (= number 2)\n        fib-nums\n        (loop [ret-nums fib-nums num 0]\n          (if (= num (- number 2))\n            ret-nums\n            (recur (conj ret-nums\n                         (+ (last ret-nums)\n                            (last (pop ret-nums)))\n                         )(inc num))))))))","user":"5d6e5ec6e4b04d129b00f2c7"},{"code":"(fn [n]\n  (loop [i 0 seq []]\n    (if (= i n)\n      (list* seq)\n      (if (< i 2)\n        (recur (+ 1 i) (conj seq 1))\n        (recur (+ 1 i) (conj seq (+ (get seq (- i 1)) (get seq (- i 2)))))))))","problem":26,"user":"51a132cee4b0b292b01ee3ff"},{"problem":26,"code":"#(loop [pre 1 pred 1 fib [1 1] x (- % 2)]\n   (if (= x 0)\n     fib\n     (recur pred (+ pre pred)(conj fib (+ pre pred)) (- x 1))))","user":"574f3a40e4b02ea114799258"},{"problem":26,"code":"(fn fstFib [x] \n  (take x ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ a b)))))1 1)))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":26,"code":"(fn [x]\n  (loop [reeks '(1 1)]\n    (if (= x (count reeks))\n      (reverse reeks)\n \t  (recur (conj reeks (+ (first reeks) (first (rest reeks))))))))","user":"5a21a5ace4b0ff51aa4b32b4"},{"problem":26,"code":"(fn fibonacci-sequence [n] \n  (cond (= n 1)\n        '(1)\n        (= n 2)\n        '(1 1)\n        true\n        (conj \n         ((fn fib-pass-values [value1, value2, n] \n          (if (= n 1)\n            (list (+ value1 value2))\n            (conj (fib-pass-values value2\n                                   (+ value1 value2)\n                                   (dec n))\n                  (+ value1 value2)))) 1 1 (- n 2))\n         1 1)))","user":"5a7ba4bbe4b03baeef9276e5"},{"problem":26,"code":"#(take%\n  (map\n   first(\n    iterate\n     (fn[[a b]][b(+ a b)])\n            [1 1])))","user":"6085edade4b0736b099e42fc"},{"problem":26,"code":"(fn [x]\n  (loop [c 0 st 0 nd 1 l '()]\n    (if (>= c x)\n      (reverse l)\n      (recur (inc c) nd (+ st nd) (conj l nd)))))","user":"55cb4e11e4b0e31453f64a02"},{"code":"(fn [l] \n  (loop [i 1, c 1, lst '(1)]\n    (if (>= i l)\n      (reverse lst)\n      (recur (inc i) (+ c (first lst)) (conj lst c)))))","problem":26,"user":"52a0fa82e4b04e0c58e87bd1"},{"problem":26,"code":"#(loop [c (dec %) a 0 b 1 acc [1]]\n   (if (= 0 c)\n     acc\n     (recur (dec c) b (+ a b) (conj acc (+ a b)))))","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn [n]\n  (loop [xs [1 1] acc 2]\n    (let [[a b] (take-last 2 xs)]\n      (if (= acc n)\n        xs\n        (recur (conj xs (+ a b)) (inc acc))))))","problem":26,"user":"52b65f26e4b0c58976d9ad43"},{"code":"#(loop [\n        start-seq '(1 1)\n        index (- % (count start-seq))]\n   (if (zero? index)\n     (reverse start-seq)\n     (recur\n      (conj start-seq (reduce + (take 2 start-seq)))\n      (dec index))))","problem":26,"user":"52271a85e4b04e78ff2e19a7"},{"code":"(fn [n]                                                                                                                                                                                       \n  (take n ((fn fib [x y]                                                                                                                                                                       \n          (cons x (lazy-seq (fib y (+ x y))))) 1 1)))","problem":26,"user":"4fc0f5b8e4b081705acca329"},{"problem":26,"code":"(fn fibo \n  ([no-of-times] (fibo no-of-times 1 1))\n  ([no-of-times num1 num2] (take no-of-times (lazy-seq (cons num1 (fibo no-of-times num2 (+ num1 num2)))))))","user":"5d1b2a1ee4b02ea6f0fb6979"},{"problem":26,"code":"(fn fib [len]\n  (if (= 2 len)\n    [1 1]\n    (let [\n      dlen (dec len)\n      fibdlen (fib dlen)]\n      (conj fibdlen (+ (nth fibdlen (- dlen 1)) (nth fibdlen (- dlen 2))))\n    )\n  )\n)","user":"56a2777be4b0542e1f8d14bf"},{"code":"#(map\n  (fn fib [n]\n    (cond\n      (= n 0) 0\n      (= n 1) 1\n      :else (+ (fib (dec n)) (fib (- n 2)))))\n  (range 1 (inc %)))","problem":26,"user":"4f49e869e4b0d56e7bb92c02"},{"problem":26,"code":"(fn [start]\n    (seq (loop [curr start n1 0 n2 1 s []]\n      (if (> curr 0)\n        (recur (dec curr) n2 (+ n1 n2) (conj s n2))\n        s))))","user":"536046a9e4b063bf7a5f8fe1"},{"problem":26,"code":"#(let [acc (transient [])]\n  (dotimes [idx %]\n    (conj! acc\n      (condp = idx\n        0 1\n        1 1\n        (+ (get acc (- idx 1))\n           (get acc (- idx 2))))))\n  (persistent! acc))","user":"596a5711e4b069c0a1a19802"},{"problem":26,"code":"(fn [x] (let [fib (fn lazy-seq-fibo\n                    ([]\n                     (concat [1] (lazy-seq-fibo 0 1)))\n                    ([a b]\n                     (let [n (+ a b)]\n                       (lazy-seq\n                         (cons n (lazy-seq-fibo b n))))))]\n          (take x (fib))))","user":"54e1939ce4b024c67c0cf7c5"},{"problem":26,"code":"(fn [n]\n  (if (= 0 n)\n    nil\n  \t(loop [res [1] a 0 b 1]\n      (if (= n (count res))\n        (seq res)\n      \t(recur (conj res (+ a b)) b (+ a b))))))","user":"58327a08e4b089d5ab817c7c"},{"problem":26,"code":"#(take % ((fn fib[a b](cons a (lazy-seq (fib b (+ a b)))))1 1))","user":"562f2985e4b0ab312c17ebc5"},{"problem":26,"code":"(fn my-fib\n  ([n accum]\n  (if (> n 0)\n    (my-fib (dec n) (conj accum (+ (last accum) (second (reverse accum)))))\n    accum))\n  ([n]\n  (cond\n   \t(= n 0) '()\n    (= n 1) '(1)\n    :else (my-fib (- n 2) [1 1]))))","user":"56607bbfe4b068f2fe63dc58"},{"problem":26,"code":"#(loop [current 0\n         n (dec %)\n         accum [1]]\n       (if (zero? n) accum\n           (recur (peek accum) (dec n) (conj accum (+ current (peek accum))))))","user":"56d8a63fe4b0ea9b8538f7e8"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4eecdb33535d93acb0a668b8"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a \n        (lazy-seq\n          (fib b (+ a b))))) 1 1)))","problem":26,"user":"4e53d441535d8a8b8723a276"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (let [f (fib (- n 1))\n                  len (count f)\n                  next-to-last-f (nth f (- len 2))\n                  last-f (nth f (- len 1))]\n              (conj f (+ last-f next-to-last-f)))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn [n] (take n (drop 1 (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1])))))","problem":26,"user":"504457c0e4b01f6c9a8b2360"},{"problem":26,"code":"(fn my-fib\n  [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [fib (my-fib (dec n))]\n      (conj fib (+ (last fib) (nth fib (- n 3)))))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":26,"code":"(fn [n]\n  (let [myfn (fn fib [x]\n              (if (< x 2) 1 (+ (fib (- x 2)) (fib (- x 1)))))]\n    (take n (map myfn (range))))\n  )","user":"56936547e4b0dcc4269f4101"},{"problem":26,"code":"#(reverse (loop [cnt 2 acc [1 1]]  (if (< cnt %) (recur (inc cnt) (concat [(+ (first acc) (second acc))] acc)) acc )))","user":"586aa811e4b0f14aab7c88c4"},{"problem":26,"code":"(fn fibonacci-sequence [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take n)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":26,"code":"(fn f ([n] (f n '(1 1))) ([n c] (if (< n 3) (take n c) (if (= n (count c)) (reverse c) (f n (conj c (+ (first c) (first (rest c)))))))))","user":"57b5ed94e4b0fbc9809a27b4"},{"problem":26,"code":"#(loop [o [1 1] a 1 b 1]\n   (if (= % (count o)) o\n     (recur (conj o (+ a b)) b (+ a b))))","user":"59ddae03e4b01968742fed65"},{"code":"#(map (fn fib [x]\n  (if (< x 2)\n    x\n    (+ (fib (- x 1)) (fib (- x 2))))) (map inc (range %)))","problem":26,"user":"4e976f79535dbda64a6f6b55"},{"problem":26,"code":"#(take % [1 1 2 3 5 8 13 21 34 55 89])","user":"5dcc7338e4b02b31cc3da3cb"},{"code":"(fn fib [n]\n (if (< n 3)\n   [1 1]\n   (let [x1 (fib(dec n))]\n  (conj x1 (+ (peek x1) (peek (pop x1))))\n   )))","problem":26,"user":"4ff5a42ae4b0678c553fc36c"},{"code":"(fn fibo [n]\n  (take n ((fn lazy-fibo [a b]\n     (lazy-seq (cons a (lazy-fibo b (+ a b)))))\n    1 1)))","problem":26,"user":"4faa6184e4b081705acca1f1"},{"code":"(fn [x] (loop [cnt x acc '(0 1)] (if (zero? cnt) (drop 1 (take (+ x 1) acc))(recur (dec cnt)(reverse (conj (reverse acc)(+ (first(reverse acc))(first(rest(reverse acc))))))))))","problem":26,"user":"4ed2dd98535d44c135fd68e2"},{"code":"#(loop [x 1 all [] y 0 z 1]\n    (if (> x %)\n      all\n      (recur (inc x) (conj all z) z (+ y z))))","problem":26,"user":"4f50d933e4b03ad3f0c10d11"},{"problem":26,"code":";#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))","user":"5822e082e4b04b46fc4b0fa9"},{"code":"(fn[x](reverse(nth (iterate #(conj % (+  (first %) (second %)  )  ) '(1 1) ) (- x 2) )))","problem":26,"user":"4e8d5edd535d65386fec2134"},{"problem":26,"code":"(fn [num]\n  (loop [n 0 acc '()]\n    (if (= n num)\n      (reverse acc)\n      (case n\n        0 (recur (inc n) '(1))\n        1 (recur (inc n) '(1 1))\n        (recur (inc n) (conj acc (+ (first acc) (second acc))))))))","user":"59a0286be4b0871e7608b82f"},{"problem":26,"code":"#(take % (map (fn [[a b]] b) (iterate (fn [[a b]] (list b (+ a b))) '(0 1))))","user":"542fa0dde4b0dad94371f2d2"},{"code":"#(take % (map first (iterate (fn[[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":26,"code":"#(loop\n  [s []\n   n %]\n  (if (zero? n)\n    s\n    (case (count s)\n      0 (recur [1] (dec n))\n      1 (recur [1 1] (dec n))\n      (recur\n        (conj s (+ (last s) (last (butlast s))))\n        (dec n)))))","user":"5a8aa992e4b05369db4d24d8"},{"code":"(fn [x]\n  (loop [n x \n         a 0\n         b 1 \n         coll []]\n    (if (= n 0)\n      coll\n      (recur (dec n) b (+ a b) (conj coll b)))))","problem":26,"user":"505bd09fe4b032b709c81373"},{"problem":26,"code":"(fn fib [len] (loop [coll '()] (if (= len (count coll)) (reverse coll) (recur (if (< (count coll) 2) (conj coll 1) (conj coll (+ (first coll) (second coll))))))))","user":"56a69451e4b0542e1f8d14ec"},{"problem":26,"code":"(fn [n] (loop [n n\n        val1 1\n        val2 1\n        fiblist '()\n               ]\n   \t\t(if (= n 0)\n   \t\t(reverse fiblist)\n   \t\t(recur (dec n) val2 (+ val1 val2) (conj fiblist val1)))))","user":"570d8418e4b0b0fb43fd06de"},{"problem":26,"code":"(fn [n]\n  (if (< n 2)\n    [1]\n    (loop [n n\n           seq [1 1]]\n      (if (= n 2)\n        seq\n        (recur (dec n)\n               (conj seq (reduce + (drop (- (count seq) 2) seq))))))))","user":"5b59c2bde4b02d533a91bd80"},{"code":"(\nlet [\nnextfib (fn [s] (\n  if (< (count s) 2)\n     1\n     (+ (first s) (nth s 1))\n  ))\n\nfib (fn fib [s, lim] (\n  if (= lim (count s))\n     (reverse s)\n     (fib (cons (nextfib s) s) lim)\n))\n]\n\n(fn f [n] ( fib '() n))\n)","problem":26,"user":"4f06f90a535dcb61093f6c1b"},{"problem":26,"code":"(fn [n]\n  (if (< n 3) '(1 1)\n    (loop [the-list '(1 1) nth-fib (- n 2)] \n      (if (= nth-fib 0) \n        the-list\n        (recur (concat the-list (list (reduce + (take-last 2 the-list)))) (- nth-fib 1))))))","user":"504e0a1de4b078edc5f593a7"},{"problem":26,"code":"(fn [n]\n   (loop [x 2, c [1 1]]\n     (if (>= x n)\n       c\n       (recur (inc x) (conj c (+ (nth c (- x 1)) (nth c (- x 2)))) )) ))","user":"5f6b35c3e4b02876ed9fd04d"},{"problem":26,"code":"(fn [count]\n(loop [fib1 1\n       fib2 1\n       result []\n       iter count]\n  (if (= iter 0)\n    result\n    (recur fib2 (+ fib1 fib2) (conj result fib1) (dec iter)))))","user":"5ec91154e4b08d0ec38692ed"},{"problem":26,"code":"#(take % ((fn fib [a b]\n          (lazy-seq (cons a (fib b (+ a b)))))\n          1 1))","user":"5d9c9446e4b0eb781811cdae"},{"problem":26,"code":"(fn fib-n2 [n] \n  (let [helper (fn fib [a b] (lazy-seq (cons a (fib b (+ b a)))))]\n    (take n (helper 1 1))))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn [n] (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ff66816e4b0678c553fc37a"},{"problem":26,"code":"#(map (fn kiss [n] (case n 0 1 1 1 (+ (kiss (- n 1)) (kiss (- n 2))))) (range %))","user":"5cb62652e4b026601754b949"},{"code":"(fn [x]\n            (loop [x x\n                   ret '()\n                   n1 0\n                   n2 1]\n              (if (zero? x)\n                (reverse ret)\n                (recur (dec x)  (cons n2 ret) n2 (+ n1 n2)))))","problem":26,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else (let [f (fib (- x 1))]\n    (concat f [(reduce + (take-last 2 f))]))))","user":"603eb408e4b0d5df2af22319"},{"problem":26,"code":"(fn fib [n] \n  (letfn [\n      (fibs [] \n        (\n          lazy-cat [1 1] (map + (fibs) (rest (fibs)))\n        )      \n      )\n    ]\n    (take n (fibs))\n  )\n)","user":"516ee939e4b06aac486e5b34"},{"problem":26,"code":"#(cond \n  (= 1 %) [1] \n  (= 2 %) [1 1] \n  :else \n  (loop [col [1 1] n %] \n    (if (>= (count col) n) \n      col\n      (recur (conj col (apply + (take 2 (reverse col)))) n))))","user":"55632016e4b0c656e3ff17e4"},{"code":"#(loop [x % result[]]\n  (if (== x %)\n    (recur (dec x)(conj result 1))\n    (if (== x (- % 1))\n      (recur (dec x)(conj result 1))\n      (if (> x 0)\n      (recur (dec x) (conj result (+ \n                    (nth result (- (count result) 1)) \n                    (nth result (- (count result) 2))\n                    )))\n      result\n      )\n      )\n    )\n  )","problem":26,"user":"52d42021e4b09f7907dd132a"},{"problem":26,"code":"#(take %\n       (loop [[elt1 elt2 :as lst] '(1 1)\n               n (- % 2)]\n   \t       (if (<= n 0)\n               (reverse lst)\n               (recur (cons (+ elt1 elt2) lst)\n                      (dec n)))))","user":"539fa040e4b0ca733b97449f"},{"problem":26,"code":"(fn \n  [n]\n  (cond\n    (= n 0) [0]\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (loop [fibs [1 1]]\n            (if (>= (count fibs) n)\n              (seq fibs)\n              (recur (conj fibs\n                           (apply + (take-last 2 fibs))))))))","user":"566f3e18e4b0a866af6896e7"},{"problem":26,"code":"(fn [n]\n (if (> n 1)\n   (loop [x (- n 2)\n          v [1 1]]\n     (if (> x 0)\n       (recur (dec x) (conj v (+ (peek v) (peek (pop v)))))\n       v))\n  [1]))","user":"5d6f8b4de4b04d129b00f2d3"},{"code":"#(loop [i %1 acc [1 1]]\r\n  (if (= i 2)\r\n    acc\r\n    (do\r\n      (let [next-acc (conj acc (+ (peek acc) (peek (pop acc))))]\r\n      (recur (dec i) next-acc)))))","problem":26,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"#(loop [x 1 y [1]] (if (= (count y) %) y (recur (+ x (last y)) (conj y x))))","problem":26,"user":"4e79a143535db169f9c796a2"},{"problem":26,"code":"#(loop [cnt 2 result '(1 1) end %]\n   (if (= end 1)\n     '(1)\n     (if (= cnt end)\n       (reverse result)\n       (recur (inc cnt) \n              (cons \n               (+ (first result) (first (rest result)))\n               result) end))))","user":"53829b28e4b06839e8705ed6"},{"code":"(fn fibs [n]\n  (if (<= n 1) [1]\n    (let [fs (fibs (dec n))]\n      (conj fs (apply + (take 2 (reverse fs)))))))","problem":26,"user":"4e5b192e535d8a8b8723a2b3"},{"problem":26,"code":"(fn [n]\n  (reduce\n   (fn [sum a] (conj sum (+ (last sum) (last (butlast sum)))))\n   [1 1]\n   (range 0 (- n 2))))","user":"571e5c9ee4b0145328a76290"},{"problem":26,"code":"#(case %\n   3 '(1 1 2)\n   6 '(1 1 2 3 5 8)\n   8 '(1 1  2 3 5 8 13 21))","user":"584917a1e4b089d5ab817ec9"},{"problem":26,"code":"(fn [i] (loop [res []\n       idx 0]\n  (if (< idx i)\n    (recur (conj res\n                 (cond (or (= idx 0) (= idx 1))\n                       1\n                       :else\n                       (+ (last res) (second (reverse res)))))\n           (inc idx))\n    res)))","user":"58c1b4f5e4b021aa9917ed01"},{"problem":26,"code":"(fn test [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (let  [l (reverse (test (dec n)))]\n             (sort (conj l (+ (first l) (second l))))\n             )\n      )\n    )\n  )","user":"5a80b934e4b00b71e582a05b"},{"code":"(fn [x] \r\n  (letfn [(fibo [left current]\r\n    (if (= left 0)\r\n    (reverse current)\r\n    (fibo\r\n      (- left 1)\r\n      (cons (+ (first current) (second current)) \r\n        current))))]\r\n  (fibo (- x 2) '(1 1))))","problem":26,"user":"4f0365fc535dcb61093f6aa4"},{"problem":26,"code":"(fn [ens] (map (fn fibonacci [n]\n  (if (< n 2) 1\n    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) (range ens)))","user":"59f37776e4b0966464fe6a9d"},{"problem":26,"code":"#(loop[i %, r '(1 1)]\n   (if (= i 2)\n     (reverse r)\n     (recur (dec i) (conj r (+ (first r) (second r))))))","user":"556c70dae4b09a3098a524fd"},{"code":"(comp reverse (fn f [n] (if (= n 2) '(1 1) (conj (f (- n 1)) (+ (first (f (- n 1))) (second (f (- n 1))))))))","problem":26,"user":"50ba5113e4b03e68e4411c7d"},{"problem":26,"code":"(fn [n]\n   (loop [cur 1 prev 0 res [] cnt 0]\n     (if (= cnt n)\n       res\n       (recur (+ cur prev) cur (conj res cur) (inc cnt)))))","user":"5e9f38cce4b00a66d4a9517e"},{"problem":26,"code":"(fn [n]\n  (map (fn f [n]\n  \t\t(if (< n 3)\n    \t1\n    \t(+ (f (- n 1)) (f (- n 2))))) (range 1 (+ 1 n))))","user":"529cabd5e4b04e0c58e87b68"},{"code":"#(rest (last (take % (iterate (fn add-five [coll] (   conj coll (+ (last coll) (last(butlast coll)))      ))[0 1]))))","problem":26,"user":"4fe5c35ce4b0e8f79898fec9"},{"problem":26,"code":"(fn fibonacci-sequence\n  ([n] (fibonacci-sequence n [] 1 1))\n  ([n xs x y]\n   (if (= n 0)\n     xs\n     (recur (dec n)\n            (conj xs x)\n            y\n            (+ x y)))))","user":"518b8561e4b0f028e99addef"},{"problem":26,"code":"(fn [n]\n\t(letfn [(fib* [acc next-2 n]\n                  (cond\n                   (= n 0) acc\n                   (= n 1) (conj acc (first next-2))\n                   :else (let [one (first next-2)\n                               two (second next-2)]\n                           (recur (conj acc\n                                        one)\n                                  [two\n                                   (+ one two)]                                  \n                                  (dec n)))))]\n      (fib* [] [1 1] n)))","user":"501948b3e4b0b6630b101db5"},{"problem":26,"code":"(fn [x] \n  (loop [t x, result [1 1]] \n    (if \n      (zero? (- t 2))\n      result\n      (recur (dec t)\n             (conj result (reduce + (take-last 2 result)))))))","user":"55bb3f89e4b01b9910ae29e2"},{"code":"#(take % ((fn f[a b] (lazy-seq (cons a (f b (+ a b))))) 1 1))","problem":26,"user":"4e7e0bdc535db169f9c796ff"},{"problem":26,"code":"(fn fibonacci [n]\n  (let [fibonacci-seq\n        (fn fibonacci-seq\n         ([]\n          (fibonacci-seq 1 1))\n         ([a b]\n          (let [result (+ a b)]\n            (lazy-seq\n              (cons\n                a\n                (fibonacci-seq b result))))))]\n    (take n (fibonacci-seq))))","user":"5d0eed51e4b0cc9c91588262"},{"problem":26,"code":"#(take %\n       ((fn fib [n1 n2]\n          (lazy-seq (cons n1 (fib n2 (+ n1 n2))))) 1 1))","user":"57ffd1a9e4b0a837a8b30c2a"},{"code":"#(loop [f0 0\n       \tf1 1\n       \tx %\n       \ty []]\n  \t(if (= x 0) y (recur f1 (+ f0 f1) (dec x) (conj y f1))))","problem":26,"user":"5397ecf6e4b0b51d73faaef2"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [1 1]))))","user":"54b18029e4b09f271ff37d1f"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 0) []        ;;; revisamos toadas las posibles condiciones\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (let [fibP (fib (- x 1))] ;;; la resta \n            (conj fibP (->> fibP (drop (- x 3)) (apply +))))))","user":"6075c214e4b069485764de5b"},{"problem":26,"code":"(fn [x]\n     (take x ((fn fib [a b]\n                (cons a (lazy-seq (fib b (+ a b)))))\n              1 1)))","user":"569d3f9ae4b0542e1f8d147a"},{"problem":26,"code":"(fn fibonacci [x] \n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (if (> x 2)\n        (conj (fibonacci (- x 1)) (+ (first (reverse (fibonacci (- x 1))) ) (second (reverse (fibonacci (- x 1))) ) )\n        )\n      )\n    )\n  )\n)","user":"56d09e8ee4b0ea9b8538f782"},{"code":"(fn [n] (let [fib-step (fn [[a b]] [b (+ a b)]) fib-seq (fn [] (map first (iterate fib-step [1 1])))] (take n (fib-seq))))","problem":26,"user":"5348236ee4b084c2834f4a54"},{"problem":26,"code":"(fn  [n]\n  (loop [n1 1 n2 1 n3 0 ls '()]\n    (if (= n n3) (reverse ls) (recur  n2 (+ n1 n2) (inc n3) (cons n1 ls)))))","user":"57fc08d8e4b0d3187e900988"},{"problem":26,"code":"(fn fib [n] \n  (if (= n 1) \n    '(1) \n    (if (= n 2) \n      '(1 1) \n      (let [last-fib (fib (dec n)),\n            curr (reduce + (take-last 2 last-fib))]\n        (concat last-fib (list curr))))))","user":"5912477be4b0163c97b36eec"},{"code":"(fn[x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn [n] \n  (reverse \n    (loop [i 0 f '(1 1)]\n      (if (= i (- n 2))\n        f\n        (recur (inc i) (conj f (apply + (take 2 f))))\n      )\n    )\n  )\n)","problem":26,"user":"4f0f01c0535d0136e6c22329"},{"problem":26,"code":"#(loop [prev 0\n         curr 1\n         counter 1\n         result (list curr)]\n    (if (= counter %)\n      (reverse result)\n      (let [sum (+ prev curr)]\n        (recur curr sum (inc counter) (cons sum result)))))","user":"545b486ae4b01be26fd7464f"},{"code":"#(loop [cur 0\n        fib [0 1]]\n   (if (= (inc cur) %)\n     (next fib)\n     (recur (inc cur) (conj fib (reduce + (take-last 2 fib))))))","problem":26,"user":"51d872dde4b0154f82ab930e"},{"code":"(fn fib\n  ([x] (fib x 1 1 '()))\n  ([x a b l]\n    (if (= x 0)\n      l\n      (fib (- x 1) b (+ a b) (concat l (list a))))))","problem":26,"user":"4e84f77c535db62dc21a62e5"},{"problem":26,"code":"(fn fib [ct]\n  (->> (iterate\n        (fn [i]\n          (let [[a b] i]\n            [b (+ a b)]))\n        [0 1])\n       (take ct)\n       (map last)))","user":"5fb8fe30e4b03f550f448223"},{"code":"#(rest (take (+ % 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e503aea535dc968683fc4ea"},{"code":"#(reduce \n  (fn [s i]\n    (let [rs (reverse s)\n          a1 (first rs)\n          a2 (second rs)]\n      (conj s (+ a1 (if a2 a2 0)))))\n  [1] \n  (range (dec %)))","problem":26,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":26,"code":"#(take % (map last (iterate (fn [[x y]] [y (+ y x)]) [0 1])))","user":"55116582e4b06e50f9beb192"},{"problem":26,"code":"(fn [n]\n    (loop [x n\n           acc [1 1]]\n       (if (= (count acc) x)\n            (seq acc)\n          (recur x (conj acc (apply + (take-last 2 acc)))))))","user":"5d8a3f3ee4b0915913b1d3c9"},{"code":"(fn [i] (for [n (range i)] ((fn fib [x] (if (<= x 1) 1 (+ (fib (- x 1)) (fib (- x 2))))) n)))","problem":26,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":26,"code":"(fn fib-list [x]\n  (loop [i (- x 2) acc '(1 1)]\n    (if (> i 0)\n    (recur (- i 1)\n      \t   (conj acc (+ (first acc)\n                        (second acc))))\n    (reverse acc))))","user":"57614a42e4b0994c1922fb85"},{"code":"#(take %2 %) [1 1 2 3 5 8 13 21]","problem":26,"user":"539c9d7ee4b0b51d73faaf2d"},{"problem":26,"code":"(fn fi\n        ([x] (fi x [1 1]))\n        ([x, coll] (if (= x (count coll))\n                     (seq coll)\n                     (fi x (conj coll (+ (last coll) (last (butlast coll)))))\n                   )\n       )\n  )","user":"56b280e3e4b0982f16b37e06"},{"problem":26,"code":"(fn [n] \n(reduce \n  (fn [a b] (conj a (+' (last a) (last (butlast a)))))  \n  [1 1]                      \n  (range (- n 2))))","user":"57bc722ce4b05aa3c4741c41"},{"problem":26,"code":"#(take % ((fn rfib [a b]\n            (lazy-seq \n             (cons a (rfib b (+ a b))))) 1 1))","user":"5037534de4b0af0658af77aa"},{"code":"(fn f26 [n] (map (fn f26f [n]\n              (if (<= n 2) 1\n                  (+ (f26f (- n 2)) (f26f (- n 1)))\n              )\n) (range 1 (inc n))))","problem":26,"user":"52bf0116e4b07a9af5792328"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [fs (fib (dec n))\n                fs' (reverse fs)]\n            (conj fs (+ (first fs') (second fs'))))))","user":"5943abb6e4b060784b3b792b"},{"code":"#(loop [n1 0 n2 1 vect []]\n   (if (= (count vect) %)\n     vect\n     (recur n2 (+ n1 n2) (conj vect n2))))","problem":26,"user":"51bf0ccee4b013aa0d74b811"},{"code":"#(take % ((fn fib-seq [a b]\n           (lazy-seq (cons b (fib-seq b (+ a b))))) 0 1))","problem":26,"user":"52393e16e4b0d705d026ef06"},{"problem":26,"code":"(fn fibbo\n  [num]\n  (loop [n num a 1 b 1 res [1 1]]\n    (if (= n 2) res\n      (recur (dec n) b (+ a b) (conj res (+ a b))))))","user":"550d9452e4b06e50f9beb15d"},{"problem":26,"code":"(fn [n]\n  (map first\n       (reduce (fn [acc _]\n                 (let [[i j] (last acc)]\n                   (conj acc [j (+ i j)])))\n               [[1 1]]\n               (repeat (dec n) 1))))","user":"552e4c0de4b076ab5578f7ef"},{"code":"(fn f [n]\r\n  (letfn [(fib [c l]\r\n                (if (= c 2)\r\n                    l\r\n                    (fib (- c 1) (cons (+ (first l) (second l)) l))))]\r\n      (reverse (fib n '(1 1)))))","problem":26,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":26,"code":"(fn [n] (loop [n1 n x1 1 x2 1 rv []] (if (<= n1 1) (conj rv x1) (recur (dec n1) x2 (+ x1 x2) (conj rv x1))) ))","user":"55809cb9e4b05c286339e0ef"},{"problem":26,"code":"(fn [n]\n  (loop [en n\n         s [1 1]]\n    (if (= en 2)\n      s\n      (recur (dec en) (conj s (apply + (take-last 2 s)))))))","user":"5dcc152ae4b02b31cc3da3c3"},{"problem":26,"code":"(fn [n] (loop [n (dec n)\n               fib [1]]\n          (if (< n 1) fib\n            (recur (dec n)\n                   (conj fib (reduce + (take 2 (reverse fib)))\n                         )\n                   )\n            )\n          )\n  )","user":"5c5732c8e4b0fb8c5ffd9a3f"},{"problem":26,"code":"#((fn [n a ap] (if (= n 1) (reverse a) (recur (- n 1) (conj a (+ (first a) ap) ) (first a) ))) % '(1) 0)","user":"4f7121cae4b07046d9f4f007"},{"code":"(fn [n]\n  (loop [fibs [1 1] n n result []]\n    (if (= n 0)\n      result\n      (recur [(first (rest fibs)) (reduce + fibs)] (dec n) (conj result (first fibs))))))","problem":26,"user":"53077c67e4b02e82168697a4"},{"problem":26,"code":"#(reverse (reduce (fn [acc, el] (conj acc (if (> el 1) (+ (first acc) (second acc)) 1))) '() (range 0 %)))","user":"564faadce4b0284900eef6b2"},{"problem":26,"code":"(fn [x] (rest (#(take (inc %1) (map first (iterate (fn [%] vec [(last %) (+ (first %) (last %))]) [0 1]))) x)))","user":"573ecb77e4b05c31a32c0832"},{"problem":26,"code":"(fn fibo [n]\n  (loop [c 0         \n         res []]\n    (if (= c n)\n      res\n      (if (< c 2)\n        (recur (inc c) (conj res 1))\n        (recur (inc c) (conj res (+ (nth res (- (count res) 2)) (last res))))))))","user":"573f3ccfe4b05c31a32c083f"},{"code":"(fn [x]\n  (take x\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"520e32a2e4b066f3ea161c93"},{"problem":26,"code":"(fn fib [n] (loop [i n \n                   l [1 1]]\n              (if (= i 2)\n                    l\n                    (recur (- i 1) (conj l (+ (last l) (last (drop-last l))))))))","user":"561fc0cee4b064ca9f4b16d1"},{"problem":26,"code":"(fn fibo \n  ([n] \n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (fibo (- n 2) 1 1)))\n  ([remaining a b]\n    (println remaining a b)\n    (cond\n      (= remaining 0) [a b]\n      :else (into [a] (fibo (- remaining 1) b (+ a b) )) \n    )\n  )  \n  )","user":"5b58b271e4b02d533a91bd6e"},{"problem":26,"code":"(fn fib [x] (if (<= x 0) '() (if (= x 1) '(1) (if (= x 2) '(1 1) (let [fiblist (fib (- x 1))] (flatten (conj (list (+ (first (reverse fiblist)) (second (reverse fiblist)))) (seq fiblist))))))))","user":"58950f29e4b00487982d5270"},{"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [l (fib (- n 1))]\n        (conj l (reduce + (take-last 2 l))) \n      )\n    )\n  )\n)","problem":26,"user":"4fb3fec7e4b081705acca2a7"},{"code":"(fn fib [n]\r\n    (letfn\r\n      [(fibr [n]\r\n       (if (= n 2)\r\n\t       '(1 1)\r\n\t       (let [r (fibr (- n 1))]\r\n\t\t (cons (+ (first r) (second r)) r))))]\r\n      (reverse (fibr n))))","problem":26,"user":"4e1b2cd9535d04ed9115e7fd"},{"code":"(fn [n]\r\n  (letfn [(fib ([n] (fib (- n 2) [1 1]))\r\n               ([n xs] (if (= n 0) xs (recur (dec n) (conj xs (+ (last xs)\r\n                                  (last (drop-last xs))))))))]\r\n   (fib n)))","problem":26,"user":"4df168bd535d08e6dec9fe1d"},{"problem":26,"code":"(fn [x] (map (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)) ))) (range 0 x)))","user":"59bdeb22e4b0a024fb6ae42d"},{"problem":26,"code":"(fn [x] (map (fn fibonacci [n] (if (<= n 2) 1 (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) (range 1 (inc x)) ) )","user":"57a9db97e4b0b8559636fc5b"},{"problem":26,"code":"#(loop [f \n        (fn fib \n  [n] \n  (if (= 0 n) 0\n    (if (= 1 n) 1\n      (if (> n 1)\n        (+ (fib (dec n)) (fib (dec (dec n))))))))\n        \n        x %\n        y '()]\n   (if (zero? x)\n     y\n     (recur f (dec x) (conj y (f x))))\n   \n   )","user":"57d21102e4b0bd073c202375"},{"code":"(fn [x] (take x (rest ( map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))) )","problem":26,"user":"51227a00e4b068a9582e656b"},{"problem":26,"code":"#(map \n   (fn fib\n  ([n]\n   (fib n 0 1))\n  ([n a b]\n   (if (< n 3)\n     (+ a b)\n     (recur (dec n) b (+ a b)))))\n   \n   (range 1 (inc %)))","user":"5e6a9d8ee4b04a83ad7cd276"},{"code":"(fn f [a b n] (if (= 0 n) () (conj (f b (+ a b) (- n 1)) a))) 1 1","problem":26,"user":"4f89311ce4b033992c121c78"},{"problem":26,"code":"(fn fibo [n]\n  (if (> n 2)\n    (let [prev (fibo (dec n))]\n      (conj prev (+ (last prev) (second (reverse prev)))))\n    [1 1]))","user":"5b7f2d75e4b047b03b203768"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib\n            ([] (concat [1 1] (fib 1 1)))\n            ([a b]\n             (let [n (+ a b)]\n               (lazy-seq\n                (cons n (fib b n))))))]\n          (take n (fib))))","user":"55164856e4b06a49daca83b3"},{"code":"#(rest (loop [l1 '()\r\n        p1 0\r\n        p2 1\r\n        x  %1]\r\n   (if (< x 0)\r\n     l1\r\n     (recur\r\n       (concat l1 (list p1))\r\n       p2\r\n       (+ p2 p1)\r\n       (- x 1)))))","problem":26,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn [n]\n  (reverse \n    (reduce \n      (fn [r s]      \n        (let [[x y & _] r]\n          (cons (+ x y) r)))\n    [1 1] (range 2 n))))","problem":26,"user":"4f3c0734e4b0e243712b1f3c"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib\n             ([] (fib 1 1))\n             ([a b]\n                 (lazy-seq\n                  (cons a (fib b (+ a b)))))))))","user":"59946856e4b0b211ea3aaac7"},{"code":"(fn [n] \n      (letfn [(fibo-helper [currentn orign result]\n                (cond (= 0 currentn) (seq result)\n                  (= orign currentn) (recur (- currentn 1) orign [1])\n                  (= (- orign 1) currentn) (recur (- currentn 1) orign [1 1])\n                  :else (recur (- currentn 1) orign (conj result (+ (last result) (last (butlast result)))))))]\n             (fibo-helper n n [])))","problem":26,"user":"52000564e4b023d2eb508ca8"},{"code":"(fn [i]\n   (condp = i\n     0 [1]\n     1 [1 1]\n     (reduce (fn [s i]\n               (conj s (+ (first (drop (- i 2) s))\n                          (last s))))\n             [1 1]\n             (range 2 i))))","problem":26,"user":"4e8742d4535dceadca46984f"},{"problem":26,"code":"#(map \n   first \n   (take % (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"55bbd179e4b01b9910ae29eb"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [m] (case m\n                     0 1\n                     1 1\n                     (+ (fib (- m 1)) (fib (- m 2)))))]\n    (take n (map fib (range)))))","user":"59eb63e3e4b0249b7282077c"},{"problem":26,"code":"(fn [lim] (map second (take lim\n                            (iterate (fn [[a b]]\n                                       [b (+ a b)]) [0 1]))))","user":"5d45bd1de4b07c84aa5ae6a4"},{"code":"(fn my-fib [n]\n  (cond\n    (= n 0) `()\n    (= n 1) `(1)\n    :else\n    (conj\n      (vec (my-fib (- n 1)))\n      (apply + (take-last 2 (my-fib (- n 1)))))))","problem":26,"user":"4f03857e535dcb61093f6b0d"},{"problem":26,"code":"(fn [x] \n    (letfn [(lazyFib [a b] (cons a (lazy-seq (lazyFib b (+ b a)))))]\n      (take x (lazyFib 1 1))))","user":"565fe434e4b068f2fe63dc45"},{"problem":26,"code":"(fn [n]\n  (case\n   (= n 1) 1\n   (= n 2) 2\n   :else (loop [n n\n                acc '(1 1)]\n           (if (= n 2)\n             (reverse acc)\n             (recur (dec n) (cons (+ (first acc) (second acc)) acc))))))","user":"5b673832e4b0c6492753e760"},{"code":"(fn [n] (map first (take n (iterate (fn [[a b]] [b (+ a b)])  [1 1] ))))","problem":26,"user":"503b6995e4b07a1917cc34dd"},{"problem":26,"code":"(fn fib[x] ( if (<= x 2) (take x '(1 1)) (let [y (reverse (fib (dec x)))] (reverse (conj y (+ (first y) (second y)))))))","user":"548485f5e4b0e286459a119f"},{"problem":26,"code":"(let [next-fib-pair (fn [[a b]] [b (+ a b)])\n      fibs (map first (iterate next-fib-pair [1 1]))]\n  #(take % fibs))","user":"5fc4e1f0e4b036c570ed8145"},{"problem":26,"code":"(fn fib\n  ([n] (fib n [0 1]))\n  ([n a] (if (= (+ 1 n) (count a))\n           (rest a)\n           (fib n (concat a [(+ (last a) (second (reverse a)))]))\n           )\n   )\n  )","user":"5d2f5ba5e4b01671435dbcbf"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map peek\n             (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5f1c0447e4b0f565ad99825c"},{"code":"(fn [n] \r\n       (take n \r\n         (map first \r\n           (iterate #(vector (apply + %) (first %)) [1 0]))))","problem":26,"user":"4deb529a535d08e6dec9fe04"},{"problem":26,"code":"(fn [limit]\n  (loop [idx 2 coll [1 1]]\n    (if (= idx limit)\n      (reverse coll)\n      (recur\n        (inc idx)\n        (cons\n          (+ (first coll) (first (rest coll)))\n         coll)\n      )\n    )\n  )          \n)","user":"5a244240e4b0ff51aa4b32e9"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (loop [res [1 1] iter 2]\n    (if (= iter n)\n      res\n      (recur (conj res (+ (last res) (last (drop-last res)))) (inc iter))\n      )\n    )\n  )","user":"5d5950c1e4b02ba5928a6827"},{"problem":26,"code":"(fn [n]\n  (loop [fib-1 1 fib-2 1 iter 0 n n sent [1]]\n    (if (= iter (- n 2))\n      (conj sent fib-2)\n      (recur fib-2 (+ fib-1 fib-2) (inc iter) n (conj sent fib-2)))))","user":"5f238a59e4b0f565ad99828d"},{"code":"#(loop [x 0 c % r [1]]\n    (if (= c 1)\n      r\n      (recur (last r) (dec c)\n             (conj r (+ x (last r))))))","problem":26,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":26,"code":"(fn fibonacci [xs i]\n  (if (<= i 2)\n    (reverse xs)\n    (fibonacci (cons (+ (first xs) (second xs)) xs) (- i 1)))) [1 1]","user":"55453f8ee4b0a04f79299530"},{"problem":26,"code":"(fn [cnt] (take cnt (map first (iterate (fn [a] [(get a 1) (+ (get a 0) (get a 1))]) [1 1]))))","user":"5eb4927fe4b00a66d4a95221"},{"problem":26,"code":"(fn [x]\n  (loop [ret '(1 1)]\n    (if (= x (count ret))\n      (reverse ret)\n      (recur (conj ret (apply + (take 2 ret)))))))","user":"58f273d9e4b08e1cf3471d01"},{"problem":26,"code":"(fn rec [n]\n  ;; naive and really ugly impl\n  (letfn [(fib [n]\n    (if (= n 0)\n      0\n      (if (= n 1)\n        1\n        (+ (fib (- n 1)) (fib (- n 2))))))]\n  (if (<= n 1)\n    '(1)\n    (concat (rec (dec n)) (list (fib n))))))","user":"55e246c2e4b050e68259b431"},{"code":"(fn [n] (#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) n))","problem":26,"user":"50e67597e4b09e4d78444228"},{"code":"(fn fib [n]\n  (let [lazy-fib (fn lazy-fib [a b]\n                   (cons a\n                         (lazy-seq (lazy-fib b (+ a b)))))]\n    (take n (lazy-fib 1 1))))","problem":26,"user":"5264b4a9e4b03e8d9a4a70e0"},{"problem":26,"code":"#(for [n (range 1 (inc %))]\n  ((fn fib [n]\n    (cond\n     (= n 1) 1\n     (= n 2) 1\n     :else (+ (fib (- n 1)) (fib (- n 2))))) n))","user":"56e2c62fe4b03a7c14b85a37"},{"code":"(fn [n] \n    (take n \n         ((fn fib [n1 n2]\n             (cons n1 (lazy-seq(fib n2 (+ n1 n2))))\n         )1 1)\n    )\n)","problem":26,"user":"51d1111ce4b067c36548635f"},{"problem":26,"code":"(fn [n] (loop [s '(1 1) i 0] (if (= i (- n 2)) (reverse s) (recur (cons (apply + (take 2 s)) s) (inc i)))))","user":"54c97a56e4b045293a27f676"},{"code":"(fn [n]\n  (take n ( (fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"538e864ee4b0b51d73faae87"},{"problem":26,"code":"#(take % ((fn fib [n1 n2] (lazy-seq (cons n1 (fib n2 (+ n1 n2))))) 1 1))","user":"56eff7c1e4b04a395b9a0468"},{"code":"(fn [n] (loop\n          [a 1\n           b 1\n           xs [1 1]\n           n (- n 2)]\n          (if (= 0 n)\n            (seq xs)\n            (recur b (+ a b) (conj xs (+ a b)) (dec n)))))","problem":26,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":26,"code":"#(take % (map peek (iterate (fn [[a b]] (list b (+ a b))) '(1 1))))","user":"56b3146ae4b0982f16b37e0f"},{"problem":26,"code":"#(loop [x 1, current 1, prev 0, result '(1)]\n    (if (== x %)\n      (reverse result)\n      (recur (+ x 1) (+ current prev) current (conj result (+ current prev)))\n      )\n    )","user":"5cbdadeee4b026601754b9ff"},{"code":"(fn f [n] (if (= n 2) [1 1] (let [l (f (dec n))] (conj l (+ (l (- n 2)) (l (- n 3))))) ))","problem":26,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn [n]\n  (letfn [(fibseq\n            ([] (fibseq 1 1))\n            ([a b] (lazy-seq (cons a (fibseq b (+ b a))))))]\n    (take n (fibseq))))","problem":26,"user":"4fa82277e4b081705acca1d0"},{"code":"(fn[x] (take x (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"528365e2e4b0239c8a67adb3"},{"code":"(fn fibs \n  ([] (lazy-cat (list 0 1) (map + (rest (fibs)) (fibs))))\n  ([n] (rest (take (inc n) (fibs)))))","problem":26,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":26,"code":"(fn ! [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [p (! (- n 1))\n                x (first (reverse p))\n                y (nth (reverse p) 1)]\n            (conj p (+ y x)))))","user":"556086a2e4b0c656e3ff17c1"},{"code":"#(loop [arr [1 1] n (- %1 1)]\n   (if (< n 2)\n     arr\n     (do (let [x (count arr)]\n           (recur (conj arr (+ (nth arr (- x 1)) (nth arr (- x 2)))) (- n 1))))))","problem":26,"user":"52f07ccee4b05e3f0be25edf"},{"problem":26,"code":"(fn fibs [x]\n  (loop [items [1] prev [0 1] n (dec x)]\n    (if (zero? n)\n      items\n      (let [next (apply + prev)]\n        (recur (conj items next) [(second prev) next] (dec n))))))","user":"5f648ef1e4b02876ed9fd01b"},{"problem":26,"code":"(fn [n] (loop [s []\n               l1 0\n               l2 1\n               i 1]\n               (if (> i n) s (recur (conj s l2) l2 (+ l1 l2) (+ i 1)))))","user":"5ac91d90e4b0e27600da77bd"},{"code":"(fn [x]\n  (loop [n 2, fibs [1 1], fib1 1, fib2 1]\n    (if (>= n x)\n      fibs\n      (let [fib1' (+ fib1 fib2)]\n        (recur (inc n) (conj fibs fib1') fib1' fib1)))))","problem":26,"user":"500ff421e4b0ae202717946f"},{"problem":26,"code":"(fn\n  fibo\n  ([n]\n   (fibo n '(1 1)))\n  ([n acc]\n   (if (< n 3)\n     (reverse acc)\n     (let [[l1 l2 & rst] acc]\n       (recur (dec n) (into acc [(+ l1 l2)]))))))","user":"580fb8e0e4b0f478707a05bc"},{"code":"(fn fib\n   ([n]\n      (fib n 2 '(1 1)))\n   ([n i acc]\n      (cond (= 1 n) '(1)\n            (>= i n) (reverse acc)\n            :else (recur n (inc i) (cons (+ (first acc) (second acc)) acc)))))","problem":26,"user":"524f213be4b0541d1855b7ff"},{"problem":26,"code":"(fn [x] (map #((fn fib [n] (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))) %) (range 1 (+ 1 x))))","user":"5686e652e4b0dcc4269f4059"},{"problem":26,"code":"(fn [n]\n  (loop [l '(1 1)\n         x n]\n    (if (= x 2) \n      (reverse l)\n      (recur (conj l \n                   (+ (first l) \n                      (first (rest l)))) \n             (dec x)))))","user":"541c2ae0e4b01498b1a71a71"},{"problem":26,"code":"(fn [x] (reverse ((fn [coll n] (if (zero? n) coll (recur (conj coll (+ (first coll) (second coll))) (dec n)))) '(1 1) (- x 2))))","user":"557ed664e4b05c286339e0d9"},{"problem":26,"code":"(fn [n]\n   (letfn [(fib\n             ([] (fib 1 1))\n             ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n     (take n (fib))))","user":"5ad4c3d2e4b0ea6055cfabe1"},{"problem":26,"code":"(fn [n]\n  (loop [current (- n 2) result '(1 1)]\n    (if (zero? current)\n      (reverse result)\n      (recur (dec current) (conj result (+ (first result) (second result)))))))","user":"5446158ce4b032a45b8693a6"},{"problem":26,"code":"#(take % (map first (iterate (fn [a] [(second a) (+ (first a) (second a))]) [ 1 1 ])))","user":"55b0f5bfe4b002ce9d5cbc28"},{"code":"(fn fib [n]\n  (if (= n 2) '(1 1) \n  (reverse (let [l (fib (- n 1))]\n    (conj (reverse l) (+ (last (butlast l)) (last l)))))))","problem":26,"user":"4e28ddd1535deb9a81d77efd"},{"problem":26,"code":"(fn\n [x]\n (letfn [(fib [x]\n           (cond\n            (= 0 x) 1\n            (= 1 x) 1\n            :else (+ (fib (- x 1)) (fib (- x 2)))))]\n   (loop [res [] count 0]\n     (if (>= count x)\n       res\n       (recur (conj res (fib count)) (inc count))))))","user":"54926752e4b0b312c081ff44"},{"code":"(fn [a] (map \n(fn fib [n] (if (= n 1) 1 (if (= n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))\n((fn [y] ((fn [x] (take x (rest (range)))) y)) a)))","problem":26,"user":"50ebedfde4b04edc3377703d"},{"problem":26,"code":"(fn [x]\n  \t(loop [i x, result [1 1]]\n  \t  (if (> i 2)\n        (recur (dec i) (conj result (+ (last result) (second (reverse result)))))\n        result\n        )\n      )\n  )","user":"56874171e4b0dcc4269f405c"},{"code":"(fn [x] (letfn [(get-next-fibs [n1 n2 iteration end fibs]\n          (if (= iteration end)\n            (identity fibs)\n            (get-next-fibs n2 (+ n1 n2) (inc iteration) end (conj fibs (+ n1 n2)))))]\n        (get-next-fibs 0 1 1 x [1])))","problem":26,"user":"4fa38e3fe4b081705acca190"},{"code":"(fn f [n]\n  (let [mfib1 (memoize (fn fib1 [m] (if (<= m 2) 1 (+ (fib1 (- m 1)) (fib1 (- m 2))))))]\n    (map mfib1 (range 1 (inc n)))))","problem":26,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":26,"code":"(fn\n [x]\n (loop [result '() cnt 0]\n    (if (= cnt x)\n      (reverse result)\n      (recur\n        (conj\n          result\n          (if (< cnt 2)\n            1\n            (+ (first result) (second result))))\n        (inc cnt)))))","user":"5894aee1e4b00487982d5260"},{"code":"#(take % ((fn f [x y] (lazy-cat [x] (f y (+ x y)))) 1 1))","problem":26,"user":"4f0891a2535dcb61093f6c3b"},{"code":"(fn [n] (take n ((fn this [a b] (lazy-seq (cons a (this b (+ a b))))) 1 1)))","problem":26,"user":"52baea85e4b07a9af57922d9"},{"code":"#(if (= % 1) '(1) (loop [x 0 y 1 z [1] m (dec %)] (if (zero? m) z (recur y (+ x y) (conj z (+ x y)) (dec m)))))","problem":26,"user":"50921f9ae4b09a7d0b586de1"},{"code":"(fn [x] (loop [a 0 b 1 out [1] n x]\n  (if (> n 1)\n    (recur b (+ a b) (conj out (+ a b)) (- n 1))\n    out)))","problem":26,"user":"504f87e0e4b0a02f9cffde91"},{"problem":26,"code":"(fn fibonacci [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (do\n      (let [fseq (fibonacci (- n 1))]\n        (concat fseq [(+ (last fseq) (nth fseq (- (count fseq) 2)))])\n        )\n      )\n    )\n  )","user":"5673db87e4b05957ce8c6125"},{"problem":26,"code":"#(reverse((fn fi [acc x y z]\n             (if (= z 1)\n               (conj acc x)\n               (fi (conj acc x) y (+ x y) (dec z))))() 1 1 %1))","user":"58b80ec1e4b0ebc645576d89"},{"problem":26,"code":"#(take % (mapcat (comp list first) (iterate (fn [lst] (let [[Fn-1 Fn] lst] [Fn (+ Fn-1 Fn)])) [1 1])))","user":"60a9a829e4b00e9e6653c470"},{"problem":26,"code":"#(take %2 %) '(1 1 2 3 5 8 13 21)","user":"5a0e9a54e4b04bbd27e6d9ef"},{"problem":26,"code":"(fn [y x]\n   (if (= (count y) x)\n     y\n     (recur (conj y (apply + (take-last 2 y))) x))) [1 1]","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":26,"code":"(fn [x] \n  (loop [a 0 b 1 t 1 fib-num [1]] \n    (let [next (+ a b)] \n      (if (>= t x)\n        fib-num\n        (recur b next (inc t) (conj fib-num next))))))","user":"5b19cdf2e4b03cfeda66ecbf"},{"problem":26,"code":";(fn [n]\n;  (take n [1 1 2 3 5 8 13 21]))\n\n#(loop [n %1 r '(1 1)]\n\t(if (< n 3)\n\t\t(take %1 (reverse r))\n\t\t(recur (dec n) (conj r (+ (first r) (second r))))))","user":"55b8c339e4b01b9910ae29b9"},{"problem":26,"code":"(fn [max_] (loop [r [] a 1 b 1] (if (= (count r) max_) r (recur (conj r a) b (+ a b)))))","user":"59ac757fe4b00adcf69795d3"},{"code":"(fn [n] (map #(loop [a 1 b 0 count %] (if (zero? count) b (recur (+ a b) a (dec count)))) (range 1 (inc n))))","problem":26,"user":"4f856171e4b033992c121c42"},{"code":"(fn [x]\n  (take x (map (fn [[a b]] a) \n               (iterate (fn [[c d]] [d (+ c d)]) [1 1]))))","problem":26,"user":"5013193ae4b0f26a0e3320ab"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))1 1)))","problem":26,"user":"52016690e4b0b2e020a18f0f"},{"code":"(fn f [x] \n  (if (= x 2) \n    '(1 1) \n    (concat (f (- x 1)) \n            (list (reduce + \n                    (take-last 2 (f (- x 1) ) ))\n            ))\n    )\n  )","problem":26,"user":"5149c2f1e4b0829bd132edb0"},{"code":"(fn [y](rest\n  (reverse(\n    (fn fibl[x](\n      cond\n      (= x 0) (list 0)\n      (= x 1) (list 1 0)\n      :else\n      (conj (fibl (- x 1)) \n            (+ (first (fibl (- x 1))) (second (fibl (- x 1))))\n      )\n    ))\n  y))\n))","problem":26,"user":"4fb069b1e4b081705acca266"},{"code":"#(take %\n  (map second (iterate \n    (fn [[x y]]\n  \t   [y (+ x y)]) \n\t[0 1])))","problem":26,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [i]\n  (reverse\n   (loop [result '(1 1) count (- i 2)]\n    (if (= count 0) result\n        (recur (cons (+ (first result) (second result))\n                      result)\n               (dec count))))))","problem":26,"user":"502a4fdfe4b09dd42f6f3644"},{"problem":26,"code":"(fn [counter]\n  (loop [arr [1 1]]\n    (if (= counter (count arr))\n      arr\n      (recur (concat arr [(+ (last arr) (nth arr (- (count arr) 2)))])))))","user":"5796e0afe4b039eba2ecb0f0"},{"problem":26,"code":"(fn [n] ( map (fn fib [x] ( if (< x 2) 1 (+ (fib (- x 2)) (fib (- x 1))) )) (take n ( iterate inc 0))))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":26,"code":"(fn fib\n  ([n]\n   (take n (fib 1 1)))\n  ([l r]\n   (cons l (lazy-seq (fib r (+ l r))))\n   ))","user":"58e37946e4b005f69f193cae"},{"problem":26,"code":"(fn [count] \n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  (take count (fib 1 1))))","user":"55eff16ce4b06e875b46ce16"},{"problem":26,"code":"(fn fib-seq [n] (take n \n    ((fn fib [a b] (cons a \n            (lazy-seq(fib b (+ a b))))) 1 1)))","user":"56f57481e4b046a417f92072"},{"problem":26,"code":"#(concat\n  ((fn fib [n s]\n     (if (< n 3) s\n         (fib (- n 1)\n              (conj s (apply + (take-last 2 s))))))\n   % [1 1]))","user":"57d711c5e4b0bd073c2023d5"},{"code":"(fn something [x] (\n                       (fn my-fib [n lst] (if (= n 0) (reverse lst) (my-fib (- n 1) (conj lst (+ (first lst) (second lst)))))) \n                       (- x 2) '(1 1)))","problem":26,"user":"4e62294c535d8ccf87e9fe5f"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (loop [coll [1 1]\n         n (- n 2)]\n    (if (zero? n)\n      coll\n      (recur (conj coll (+ (last coll) (last (butlast coll))))\n             (dec n)))))","user":"56cd110ee4b0ea9b8538f747"},{"code":"(fn __\n  ([limit] (__ (dec limit) '(1)))\n  ([limit output] (if (zero? limit) (reverse output)\n                      (if (= output '(1))\n                        (recur (dec limit) '(1 1))\n                        (recur (dec limit) (cons (+ (first output) (nth output 1)) output))))))","problem":26,"user":"4fe8b1d9e4b07c9f6fd12c71"},{"problem":26,"code":"#(loop [cnt % result [1 1]]\n    (if (zero? cnt)\n      (take % result)\n      (recur (dec cnt)(conj result (+ (last result) (second (reverse result)))))))","user":"53a46c4ae4b0b62ce300572f"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (<= n 1)\n    [1]\n    (conj (fib (dec n)) (reduce + (take-last 2 (fib (dec n)))))))","user":"5a6a32b6e4b0512ff01cda22"},{"problem":26,"code":"(fn fib\n  ([n] (fib 1 1 n))\n  ([x y n]\n   (if (= 0 n) []\n       (cons x (fib y (+ x y) (dec n))))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":26,"code":"(fn [x]\n  (cons 1\n  (reverse\n  (loop [fib2 0\n         fib1 1\n         out '()\n         cout (- x 1)]\n    (if (= cout 0)\n      out\n      (let [fib0 (+ fib1 fib2)]\n        (recur fib1 fib0 (cons fib0 out) (- cout 1))))))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn fib [x]\n          ((fn fibrec [a b i s]\n             (if (< i x) (fibrec b (+ a b) (+ i 1) (conj s (+ a b))) (reverse s))\n          )\n          0 1 1 '(1)))","problem":26,"user":"4f0399c4535dcb61093f6b34"},{"code":"#(map \n    (fn f [x] \n      (case x \n        0 1 \n        1 1 \n        (+ (f (- x 1)) (f (- x 2)))\n      )\n    )\n    (range 0 %)\n)","problem":26,"user":"50cc30c5e4b0f78a8e1645bf"},{"code":"(fn [count]\n  (loop [result [1 1]]\n    (if (<= count (.size result))\n      (take count result)\n      (recur (conj result \n        (apply + (take-last 2 result)))))))","problem":26,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":26,"code":"(fn fib3 [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"56092a8de4b0053d1b86c7da"},{"problem":26,"code":"#(take % (map first (iterate\n              (fn [[a b]] [b (+ a b)]) [1 1])) )","user":"5d6523ace4b0db5d338d15cd"},{"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]]\n    [b (+ a b)]) [1 1]))))","problem":26,"user":"50cf66ffe4b0e61f11ddcd92"},{"code":"(fn [x]\n  (loop [first 1\n         second 1\n         remaining (- x 2)\n         res []]\n    (if (= 0 remaining)\n      (conj res first second)\n      (recur second (+ first second) (dec remaining) (conj res first)))))","problem":26,"user":"5165a235e4b079ad97ec44ac"},{"code":"(letfn [\n   (fib [n]\n\t      (if (<= n 1)\n\t\t1\n\t\t(+ (fib (- n 1)) (fib (- n 2)))))]\n     (fn [x]\n       (map fib (range x))))","problem":26,"user":"4e89ff3d535d3e98b802328a"},{"problem":26,"code":"#(take %\n       ((fn fib[]\n         (lazy-cat [1 1]\n                   (map +(fib)(rest(fib)))))))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn [x] (take x ((fn r-fib[a b] (lazy-seq (cons a (r-fib b (+ a b))))) 1 1)))","problem":26,"user":"531576b4e4b08068f379ed29"},{"code":"(fn [n]\n  (loop [xs () res ()]\n    (cond \n      (= (count res) n) (reverse res)\n      (< (count xs) 2) (recur (cons 1 xs) (cons 1 res))\n      :default (recur (list (apply + xs) (first xs)) (cons (apply + xs) res)) \n      \n    )))","problem":26,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [x] (#(if (= 1 %1)\n            %2\n            (recur (dec %1) (let [revseq (reverse %2)] (reverse (cons (apply + (take 2 revseq)) revseq))))) x '(1)))","problem":26,"user":"5328e449e4b09d4e7a9b550c"},{"code":"(fn f [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else \n          (let [r1 (f (- n 1))\n               r2 (f (- n 2))]\n            (conj r1 (+ (last r1) (last r2))))))","problem":26,"user":"5054c7e1e4b0b1b9d1860eb2"},{"code":"(fn [i & options]\n  (let [\n        s (nth options 0 (list))\n        l (nth options 1 0)\n        l2 (last s)]\n    (if (= i 0) (concat s (list l))\n        (if (= l 0) (recur (- i 1) [(list) 1])\n            (if (nil? l2) (recur (- i 1) [(list l) l])\n                (recur (- i 1) [(concat s (list l)) (+ l l2)])\n    )))))","problem":26,"user":"4f5f484be4b0030a34fb2b5f"},{"problem":26,"code":"(fn [n]\n  (loop [s [1] i 1]\n    (if (= i n) s (recur (conj s (apply + (take-last 2 s))) (inc i)))))","user":"5ec7550ce4b08d0ec38692dd"},{"problem":26,"code":"(fn [n]\n   (reduce (fn [acc _]\n             (println acc)\n             (if (> 2 (count acc))\n               (conj acc 1)\n               (conj acc (apply + (take-last 2 acc)))))\n           [1]\n           (range 1 n)))","user":"5c896f46e4b048ec896c5940"},{"problem":26,"code":"#(\n   loop [n %, \n         fibb [1], \n         prev 1, \n         curr 1\n         ]\n   (\n    if (= n 1 )\n    fibb\n    (\n     recur \n     (- n 1)\n     (conj fibb curr)\n     curr\n     (+ prev curr)\n     )\n    )\n   )","user":"56f97711e4b07572ad1a88b2"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]\n                     )\n          )\n  )","problem":26,"user":"52b2a819e4b0c58976d9acf1"},{"problem":26,"code":"(partial (fn fac [[x xx & xs] n] (if (= n 2) (reverse (conj xs xx x)) (fac (conj xs xx x (+ x xx)) (dec n)))) [1 1])","user":"5aeec90fe4b0cc2b61a3bc31"},{"problem":26,"code":"(fn n26\n  [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (let\n          [prev-list (n26 (dec x))]\n        (conj\n         prev-list\n         (+ (last prev-list)\n            (last (butlast prev-list))))))))","user":"5893c64ce4b00487982d524b"},{"code":"(fn [x]\n  \"TODO: fix it :)\"\n  (loop [i 2, fib [1 1]]\n    (if (= i x)\n      fib\n      (recur (+ i 1) (conj fib (+ (last fib) (fib (- (count fib) 2))))))))","problem":26,"user":"51583ee4e4b0a069fd272c72"},{"code":"(fn [n]\n  (loop [fs [1 1]\n         i  n]\n    (let [rfs (reverse fs)]\n      (if (= i 0)\n        (butlast (butlast fs))\n        (recur (conj fs (+ (first rfs) (second rfs))) (dec i))))))","problem":26,"user":"525ab6cfe4b0cb4875a45cf9"},{"problem":26,"code":"(fn [x] \n  (if (= x 1)\n    `(1)\n    (if (= x 2)\n      `(1 1)\n      (loop [l1 [1 1]\n             prev 1 \n             c (- x 2)]\n        (if (= c 0)\n          l1\n          (recur (conj l1 (+ (last l1) prev)) (last l1) (dec c))\n          )\n       )\n      )\n    )\n  )","user":"58d28c70e4b03c36ff7e5901"},{"problem":26,"code":"#(map (fn fib [n] (if (or (= 0 n) (= 1 n)) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range %))","user":"5df98dc8e4b0a607a9a45cbc"},{"problem":26,"code":"(fn [n]\n  (loop [r () i 1]\n    (if (> i n)\n      (reverse r)\n      (if (> i 2)\n        (recur (conj r (+ (first r) (second r))) (inc i))\n        (recur (conj r 1) (inc i))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":26,"code":"(fn [x]\n    (loop [left (- x 2)\n           fibs [1 1]]\n      (if (= left 0)\n        fibs\n        (recur (dec left)\n               (conj fibs (+ (last fibs) (nth fibs (- (count fibs) 2))))))))","user":"586b6753e4b01531a375e956"},{"problem":26,"code":"(fn f [c & [a]]\n      (if (= 0 c)\n        (reverse a)\n        (f\n          (dec c)\n          (conj (or a '()) (+ (or (first a) 1) (or (first (rest a)) 0))))))","user":"5540fe42e4b0a04f7929950a"},{"code":"(fn [x]\n   (take x\n         ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) \n          1 1)))","problem":26,"user":"4db51ce0535d87e67b28fe06"},{"code":"#(loop [a 0, b 1, cnt %, acc '()]\n  (if (zero? cnt)\n    (reverse acc)\n    (recur b (+ a b) (dec cnt) (cons b acc))))","problem":26,"user":"4f1ef703535d64f60314649c"},{"problem":26,"code":"#(if (< % 3) (if (= % 1) '(1) '(1 1))\n    (reverse (loop [i (- % 2) x '(1 1)]\n               (if (= i 0)\n                   x\n                   (recur (dec i) (conj x (+ (first x) (second x)))) )\n               )) \n    )","user":"56fc7cb4e4b08d47c977819a"},{"problem":26,"code":"(fn [a] (take a ( map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54edfebbe4b024c67c0cf869"},{"problem":26,"code":"(fn fibn \n  ([n] (fibn n 0 1 []))\n  ([n p1 p2 v]\n     (if (zero? n)\n       v\n       (fibn (dec n) p2 (+ p1 p2) (conj v p2))\n     )))","user":"574e7be7e4b02ea114799242"},{"code":"(fn fib [x]\n  (if (= x 1) [1]\n  (if (= x 2) [1 1]\n  (conj (fib (- x 1))\n        (+ (last (fib (- x 1)))\n           (last (fib (- x 2))))))))","problem":26,"user":"502d3912e4b0d96a44ab2030"},{"code":"(fn fib [n] (loop [n (- n 2) a 1 b 2 accum [1 1]]\n  \t       (cond\n\t\t\t (= n 0) accum\n\t\t\t :else (recur (- n 1) b (+ b a) (conj accum b)))))","problem":26,"user":"4df39b50535d08e6dec9fe29"},{"problem":26,"code":"(fn fib ([n] (fib (- n 2) '(1 1)))\n  ([n lst]\n   (if (= n 0) (reverse lst)\n     (fib (dec n) (cons (+ (first lst) (second lst)) lst)))))","user":"565a3e25e4b068f2fe63dbfb"},{"problem":26,"code":"(fn\n  [n]\n  (loop [n n\n         coll [1]\n         sum 1\n         new-fib 1]\n    (if (= 1 n)\n      coll\n      (recur (dec n) (conj coll new-fib) new-fib (+ sum new-fib)))))","user":"5cf48f04e4b087f62be35a86"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [xs] [(last xs) (apply + xs)]) [1 1]))))","user":"4fdb0c0ae4b05e33b9224f57"},{"problem":26,"code":"#(reverse (let [r (- % 2)] (reduce (fn [f _] (conj f (+ (first f),(second f)))),'(1 1),(range r))))","user":"5c395c65e4b0d62ef62d9f8a"},{"code":"(fn [nm]\n  (loop [n 0 a 0 b 1 fib []]\n    (if (= n nm) fib\n      (recur (inc n) b (+ a b) (conj fib b)))))","problem":26,"user":"4e7d1c22535db169f9c796c5"},{"problem":26,"code":"(fn fibo-seq\n  [n]\n  (if (= n 1) [1]\n    (if (= n 2) [1 1]\n      (let [prev (fibo-seq (dec n))]\n        (conj prev (+ (last prev) (nth (reverse prev) 1)))\n        ))))","user":"5d8c7a16e4b0915913b1d3e0"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ a b))))\n       ) 1 1)))","user":"535558b9e4b04ce2eb3ed25a"},{"problem":26,"code":"(fn [c] (letfn [(fbi [s c]\n                 (if (= 0 c)\n                   (reverse s)\n                   (fbi (conj s (+ (nth s 0) (nth s 1))) (dec c))))]\n        (fbi '(1 1) (- c 2))))","user":"5a58ae01e4b05d388ecb6c82"},{"problem":26,"code":"#(let [want %]\n   (loop [fibs [1 1]]\n     (if (= want (count fibs))\n       (seq fibs)\n       (recur (conj fibs (+ (last fibs) (get fibs (- (count fibs) 2))))))))","user":"5537f30fe4b09218d5f44fd8"},{"code":"(fn [n]\n  ((fn [v step]\n    (if (= 0 step)\n      v\n      (let [c (count v)]\n        (recur (conj v (apply + (subvec v (- c 2) c)))\n          (dec step)))))\n    [1 1] (- n 2)))","problem":26,"user":"502873a8e4b01614d1633ff8"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (= 2 n) \n   [1 1]\n   (let [prior (fib (dec n))] (conj prior (reduce + (take-last 2 prior))))\n  )\n)","user":"54c11fdae4b0ed20f4ff6f1b"},{"code":"#(reduce (fn [y _] (conj y (+ (last y) (second (reverse y))))) [1 1] (repeat (- % 2) 1))","problem":26,"user":"508e13abe4b0f17d83ea26c7"},{"problem":26,"code":"(fn [number]\n  (loop [n number iter 1 last1 1 last2 0 result '(1)]\n    (if (= iter n)\n      (reverse result)\n      (recur\n        n\n        (inc iter)\n        (+ last1 last2)\n        last1\n        (cons (+ last1 last2) result)\n      )\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"problem":26,"code":"(fn [x]\n ((fn [max x acc]\n    (condp = x\n      0 (recur max (inc x) (conj acc 0))\n      1 (recur max (inc x) (conj acc 1))\n      (if (> x max)\n        (drop 1 acc)\n        (recur max (inc x) (conj acc (reduce + (take-last 2 acc)))))))\n  x 0 [])\n)","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":26,"code":"#(take %1 ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1))","user":"5589a941e4b059ccff29b207"},{"problem":26,"code":"#(loop [n % acc [1 1]]\n\t(if (> n 2)\n\t\t(recur (dec n) (conj acc (apply + (take-last 2 acc))))\n\t\tacc))","user":"54dbbe4fe4b024c67c0cf772"},{"problem":26,"code":"#(map first(take % (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"54e0bb4fe4b024c67c0cf7b8"},{"problem":26,"code":"(fn [n] \n   (loop [fi [1 1] i 3]\n     (if (> i n)\n       fi\n       (recur \n        (conj fi \n              (+ (last fi)\n                 (last (butlast fi)))) \n        (inc i)))))","user":"5bff74a2e4b0bdcf453d162b"},{"code":"#( loop [ l [] n % a 1 b 1 ] \n   (if  \n     (= n 0) l\n     (recur (conj l a) (dec n) b (+ a b))))","problem":26,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"#(loop [n (- % 2), fs '(1 1)] \n    (if (= n 0) \n      fs\n      (recur (- n 1) \n             (concat fs (list (+ (last fs) (last (butlast fs))))))))","problem":26,"user":"4f6d09c5e4b07046d9f4efc3"},{"code":"#(take % \n   (map first\n     (iterate\n       (fn [[a b]]\n         [b (+' a b)])\n       [1 1])))\n#_#(take %\n   ((fn fib [a b]\n      (lazy-seq \n        (cons a \n          (fib b (+ a b)))))\n    1 1))\n\n#_(fn [n]\n  (if (<= n 2)\n    (take n [1 1])\n    (loop [a 1\n           b 1\n           c 2\n           r [1 1]]\n      (if (<= n c)\n        r\n        (recur b\n               (+ a b)\n               (inc c)\n               (conj r (+ a b)))))))","problem":26,"user":"51e5a627e4b0efabf93c02db"},{"problem":26,"code":"(fn [n] (loop [c 2 acc [1 1]] (if (= c n) acc (recur (inc c) (conj acc (+ (last acc) (last (butlast acc))))))))","user":"552b6ddbe4b0ffed3738f965"},{"problem":26,"code":"(fn [n]\n  (loop [i n p []]\n    (if (zero? i)\n      p\n      (recur (dec i) (cons ((fn fib [n]\n                              (if (<= n 2)\n                                1\n                                (+ (fib (- n 2)) (fib (- n 1))))) i) p)))))","user":"54d15e4ae4b0e8a36923e5e2"},{"problem":26,"code":"(fn [n]\n  (take n\n    ((fn fib\n      ([] (fib 1 1))\n      ([a b] (lazy-seq (cons a (fib b (+ a b)))))))))","user":"5c0e58bfe4b01240ff567140"},{"code":"(fn fib [x]\n  (letfn [(fibo [n] \n\t\t(cond \n     \t\t(<= n 0) '()\n\t\t\t(= n 1) '(1)\n\t\t\t(= n 2) '(1 1)\n\t\t\t:else (let [fib1 (fibo (dec n))\n                    \tt1 (first fib1)\n\t                \tt2 (first (rest fib1))] (conj fib1 (+ t1 t2)))))]\n\t\t\t (into '() (fibo x))))","problem":26,"user":"4fc5019ae4b081705acca36d"},{"problem":26,"code":"(fn [n]\n  (loop [x 1\n         coll []]\n    (if (< x (inc n))\n      (if (< x 3)\n        (recur (inc x) (conj coll 1))\n        (recur (inc x) (conj coll (+ (last coll) (nth coll (- (count coll) 2))))))\n      coll\n      )\n    )\n)","user":"5cbf5148e4b0ccb06196276a"},{"problem":26,"code":"(fn [x] (loop [xi x a 0 b 1 fib []] (if (zero? xi) fib (recur (dec xi) b (+ a b) (conj fib b)))))","user":"589f2cefe4b02bd94d917e75"},{"problem":26,"code":"(fn fib\n  [num-of-digits]\n  \n  (loop [num num-of-digits\n         n 1\n         n-minus-1 1\n         n-minus-2 0\n         seq-to-return nil]\n    (if (zero? num) \n      (reverse seq-to-return)\n      (recur \n        (dec num) \n        (+ n-minus-1 n)\n        n\n        n-minus-1\n         (cons n-minus-1 seq-to-return)))))","user":"568aa458e4b0dcc4269f4092"},{"problem":26,"code":"(fn [n] (letfn [(\n                         fibn-lazy [a b] (let [sum (+ a b)] (cons b (lazy-seq (fibn-lazy b sum))))\n                         )] (take n (fibn-lazy 0 1))))","user":"5654e024e4b0f9d632dd848d"},{"problem":26,"code":"#(loop [t (- % 1)\n          r [0 1]]\n     (if (> t 0)\n       (recur (dec t) (into r [(apply + (drop (- (count r) 2) r))]))\n       (drop 1 r)))","user":"5b6ccc58e4b0c6492753e7bb"},{"code":"(fn [n] \n  (loop [i 0, j 0, k 1, fib-vec []]\n    (if (= i n)\n      fib-vec\n      (recur (inc i) k (+ j k) (conj fib-vec k)))))","problem":26,"user":"4f1872a2535d64f60314645a"},{"problem":26,"code":"(fn [cnt]\n   (loop [lst [1] n 1 p1 0 p2 1]\n     (if (= n cnt)\n       lst\n       (recur (conj lst (+ p1 p2)) (inc n) p2 (+ p1 p2)))))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn [n]\n  (take n\n  \t(map first \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52c4af71e4b0c2d177d620e1"},{"problem":26,"code":"#(take %1 ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"5d1e37e2e4b02ea6f0fb69b1"},{"code":"#(loop [c (- % 2) s '(1 1)]\n      (if (= c 0)\n  (reverse s)\n\t(recur (- c 1) (conj s (+ (first s) (first (rest s)))))))","problem":26,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":26,"code":"(fn fib[x] (if (= x 1) '(1) (if (= x 2) '(1 1) (concat (fib (- x 1)) (list (+ (last (fib (- x 1))) (last (fib (- x 2))))))  )))","user":"544b9df2e4b0e39780006968"},{"problem":26,"code":"(fn \n  [n]\n  (loop [c (- n 2)\n         col [1 1]]\n    (if (zero? c)\n      (seq col)\n      (recur (dec c) (conj col (reduce + (take 2 (reverse col))))))))","user":"58ec8c7ae4b056aecfd47d64"},{"code":"(fn fib [n] (take n ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","problem":26,"user":"501688f7e4b052339a490e7a"},{"problem":26,"code":"#(take %1 (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"52a267c6e4b04e0c58e87bef"},{"problem":26,"code":"#(take %\n  (map first\n    (iterate\n     (fn [[a b]] \n       [b (+ a b)])\n     [1 1])))","user":"553b0d95e4b09218d5f44fff"},{"code":"(fn [n]\n  (take n ((fn ee [a b]\n  \t\t\t(lazy-seq (cons a (ee b (+ a b))))) 1 1)))","problem":26,"user":"504e3f22e4b0f6ff3350c48e"},{"problem":26,"code":"(fn fibs [x] \n  (take x ((fn acc [a b] \n             (lazy-seq (cons a (acc b (+ a b))))) 1 1)))","user":"5779bc87e4b0979f89651677"},{"problem":26,"code":"(fn [x]\n  ((fn [[f1 f2] fibos c] \n   (if (= x c)\n     fibos\n     (recur [f2 (+ f1 f2)] (conj fibos f1) (inc c))))\n   [1 1] [] 0)\n)","user":"5aa998c6e4b0d174b936c8e5"},{"code":"#(reduce (fn [l v](conj l (reduce + (take-last 2 l)))) [1 1] (range (- % 2)))","problem":26,"user":"511ffbabe4b0e88f5a20c40c"},{"problem":26,"code":"#(loop [lista '() i % cur 1 prev 0] \n       (if (= i 0) \n         (reverse lista)\n         \n         \t(recur (cons cur lista) (- i 1) (+ cur prev)(+ prev (- cur prev)))\n         )\n     \t)","user":"5451eb12e4b0e397800069b8"},{"problem":26,"code":"#(letfn [(f [a b] (lazy-seq (cons a (f b (+ b a)))))] (take % (f 1 1)))","user":"575556fae4b02ea1147992c3"},{"problem":26,"code":"(fn fib [x]\n  (take x\n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","user":"5624a374e4b00a550fc90283"},{"problem":26,"code":"(fn\n  [c]\n  (loop [a 0\n         b 1\n         n c\n         l []]\n    (if (zero? n)\n      l\n      (recur b (+ a b) (dec n) (conj l b))\n      )))","user":"5ab9904ce4b073f177442695"},{"code":"#(take % (map first (iterate \n  (fn [x] [(nth x 1) (+ (first x) (last x))]) [1 1])))","problem":26,"user":"502d39c5e4b0d96a44ab2031"},{"code":"(fn fib [n] \n  (let  [fibnum   (fn fibn [m] (cond (= m 1) 1 \n                            (= m 2) 1\n                            :els (+ (fibn (dec m))(fibn (- m 2)))))]\n                       (if (= n 0) [] (conj (fib (dec n)) (fibnum n) )))\n                  )","problem":26,"user":"523c61b2e4b07becd5be2220"},{"problem":26,"code":"(fn [n]\n  (reverse \n    (last \n      (take (dec n)\n            (iterate #(cons (+ (first %) (second %)) %)\n                     '(1 1))))))","user":"5cdda90ce4b05ee0cb311766"},{"code":"(fn [x]\n  (map (fn f [i]\n         (if (<= i 1) \n           1 \n           (+ \n            (f (- i 1)) \n            (f (- i 2)))))\n       (range x)))","problem":26,"user":"5110b8bae4b04c71fce993f4"},{"problem":26,"code":"(fn fib [n] (if (= n 1) [1] (let [r (fib (- n 1))] (conj r (+ (nth r (- n 2)) (if (= n 2) 0 (nth r (- n 3))))))))","user":"59614d9ce4b066ee0a44b09d"},{"problem":26,"code":"(fn [x] \n  (loop [n 2\n         result [1 1]]\n    (cond (= 1 x) [1]\n          (= x n) result\n          :else (recur (inc n) (conj result (apply + (take 2 (reverse result) ))))\n    )\n  )\n)","user":"56448dc1e4b0284900eef5f6"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (loop [a 0\n         b 1\n         counter x\n         newLst ()]\n    (if (= counter 0)\n      (reverse (conj newLst a))\n      (recur (+ a b) a (dec counter)  (if (not (= 0 a))\n                                        (conj newLst a))))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [n]\n  (letfn [(fib [x]\n            (if (>= 2 x)\n              1\n              (+ (fib (dec x)) (fib (- x 2)))))]\n    (map fib (range 1 (inc n)))))","problem":26,"user":"538b1644e4b0640c7a9a58c0"},{"code":"(fn fibos\n  [n]\n  (take n\n        (map first (iterate (fn [[a b]]\n                              [b (+ a b)])\n                            [1 1]))))","problem":26,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"4ec3b393535dcc7ae8597d59"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]] [b (+ a b)]) [1, 1])))","user":"563afd5ae4b0bfe05bf11809"},{"code":"#(rest (map first (take (inc %) (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","problem":26,"user":"4e15f248535d04ed9115e7e6"},{"problem":26,"code":"(fn fib [n]\n  (take n (rest \n  (->> [0 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)))))","user":"520a796be4b01da9d47a99dc"},{"problem":26,"code":"(fn [n]\n    (loop [coll [1 1]]\n      (if (= (count coll) n)\n        coll\n        (recur (conj coll (apply + (take-last 2 coll)))))))","user":"5e62444fe4b0fd0acd158694"},{"problem":26,"code":"#(for [i (range 1 (inc %))] ((fn fib [x] (cond\n          (= 1 x) 1\n          (= 2 x) 1\n          :else (+ \n                 (fib (dec x))\n                 (fib ((comp dec dec) x))\n                ))) i))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":26,"code":"(fn fidon_nums [n]\n  (cond\n    (< n 1) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (\n            loop [result [1 1] i 2]\n            (if (< i n)\n              (recur\n                (let [i1 (- i 1)  i2 (- i 2)\n                      x1 (get result i1)\n                      x2 (get result i2)\n                      x (+ x1 x2)]\n                  (conj result x)\n                  )\n                (inc i)\n                )\n              result\n              )\n\n            )\n\n    )\n  )","user":"5c52f3fce4b0fb8c5ffd99e9"},{"problem":26,"code":"#(\n    loop [res [1] x1 0 x2 1 counter (dec %)]\n      (if (> counter 0)\n        (recur\n          (conj res (+ x1 x2))\n          x2\n          (+ x1 x2)\n          (dec counter)\n        )\n        res\n      )\n\n   )","user":"5675f2f4e4b05957ce8c6153"},{"problem":26,"code":"(fn first-n-fibonacci\n  [N]\n  (map last\n    (take N \n      (iterate \n         (fn[[p q]] [q (+ p q)]) [0 1]))))","user":"555df9c8e4b0a2eb076a39b2"},{"problem":26,"code":"(fn fib [n]\n  (if (<= n 2)\n    (vec (repeat n 1))\n    (let [oldfib (fib (- n 1))]\n      (conj oldfib (reduce + (drop (- n 3) oldfib) ) ))))","user":"54df7922e4b024c67c0cf7ad"},{"code":"#(take % (map first (iterate (fn [[a b]] (list b (+ a b))) [1 1])))","problem":26,"user":"502ad2cae4b0614b5299611f"},{"problem":26,"code":"(fn [l c] \n  (if (<= c 1) \n    ((comp rest reverse) l) \n    (recur (conj l (+ (second l)(first l))) (dec c) ) ) ) \n '(1 0)","user":"567798afe4b05957ce8c6169"},{"problem":26,"code":"(fn fib [n] (if (= n 1) [1] (if (= n 2) [1 1] (conj (fib (- n 1))(+ (nth (fib (- n 1)) (- n 2)) (nth (fib (- n 1)) (- n 3)))  ))))","user":"54453f83e4b032a45b86939a"},{"problem":26,"code":"(fn [_x] \n  (loop [x _x \n         p1 0 \n         p2 1\n         acc []]\n    (if (pos? x)\n      (recur (dec x) p2 (+ p1 p2) (conj acc p2)) \n      acc\n      )))","user":"57c4e8dce4b05aa3c4741cd7"},{"problem":26,"code":"(fn [i]\n(into '() (reduce (fn [coll _] (conj coll (reduce + (take 2 coll)))) '(1 1) (range (- i 2)))))","user":"52da4532e4b09f7907dd13b6"},{"code":"#(map (fn fib [n]\n        (cond (= n 0) 1\n              (= n 1) 1\n              :else (+ (fib (- n 1)) (fib (- n 2)))))\n      (take % (range)))","problem":26,"user":"4f36f5f2e4b0e243712b1ece"},{"code":"(fn fibs [x]\n (letfn [(fib [x]\n   (cond \n    (= 1 x) 1\n    (= 0 x) 0\n    :else\n     (+ (fib (- x 2)) (fib (dec x)))\n   ))\n  ]\n   \n  (rest (map fib (range (inc x))))\n  )\n )","problem":26,"user":"5191045ee4b0f8ef0be96bf3"},{"problem":26,"code":"(fn fibs [n]\n  (if (= 1 n) \n      [1]\n      (let [results (fibs (dec n))]\n         (conj results (apply + (take-last 2 results))))))","user":"54d6f22de4b0a52adc2e2023"},{"code":"(fn [n]\n  ((fn [a b n l]\n     (if (= n 1)\n       (conj l a)\n       (recur b (+ a b) (dec n) (conj l a))))\n    1 1 n []))","problem":26,"user":"52828298e4b0757a1b17145b"},{"code":"(fn fib [i x n]\n    (cond \n        (= i (dec n)) (conj x (+ (last x) (last (butlast x))))\n        (< i 2) (fib (inc i) (conj x 1) n)\n        true    (fib (inc i) (conj x (+ (last x) (last (butlast x)))) n)\n    )\n) 0 []","problem":26,"user":"52bb55e8e4b07a9af57922e3"},{"code":"(fn [x] \n    (loop [num x out '(1 1)]\n      (if (= num 2)\n        (reverse out)\n        (recur (dec num) \n          (conj out (+ (first out) (nth out 1)))))))","problem":26,"user":"4f9b27d7e4b0dcca54ed6d12"},{"problem":26,"code":"(fn [x]\n  (loop [i 1\n         result []]\n  (if (> i x)\n    result \n    (if (or (= i 1) (= i 2))\n      (recur (inc i) (conj result 1))\n      (recur (inc i) (conj result (+ (get result (- (count result) 2)) (get result (- (count result) 1)))))))))","user":"5a23cabce4b0ff51aa4b32df"},{"problem":26,"code":"{3 '(1 1 2) 6 '(1 1 2 3 5 8) 8'(1 1 2 3 5 8 13 21)}","user":"59537716e4b066ee0a44aee5"},{"problem":26,"code":"(fn [n]\n  (loop [z '(1 1)\n         a 1\n         b 1\n         nn n]\n    \n  \t(if (= nn 2)\n    \tz\n    \t(recur (concat z [(+ a b)]) b (+ a b) (- nn 1)))\n   )\n)","user":"5e265173e4b05b4b01516175"},{"code":"#((fn fib [remaining acc]\n  (if (> remaining 0)\n    (fib (- remaining 1) (conj acc (+ (peek acc) (peek (pop acc)))))\n    acc\n  )) (- % 2) [1 1])","problem":26,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn [n]\n\n\n\n(take n ( ( fn fib [a b]\n  (lazy-seq (cons a (fib b (+ a b))))  \n) 1 1)))","problem":26,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [n]\n  (case n\n    (1 '(1))\n    (2 '(1 1))\n    (reverse (loop [k 2 acc '(1 1)]\n              (if (< k n)\n                (recur (+ k 1) (conj acc (+ (first acc) (second acc))))\n                acc)))))","problem":26,"user":"4f8e155ae4b0d4e659cdde63"},{"problem":26,"code":"(fn[x] (loop [i 2 result '(1 1)] (if (>= i x) (reverse result) (recur (inc i)  (conj result (+ (first result) (second result))))) ))","user":"53f1c05ee4b0742d9025b0e1"},{"problem":26,"code":"(fn [i] (if (< i 2) [1]\n        (reduce (fn help [a _] (conj a (+ (last a) (nth a (- (count a) 2)))))\n\t\t(conj (range (- i 2)) [1 1]))))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [n]\n    (take n\n          (map last\n                (iterate (fn [[a b]] [(+ a b) a]) [1 1]) )))","problem":26,"user":"4e964f4a535dbda64a6f6b42"},{"problem":26,"code":"(fn [n] (loop [res [1 1] cur 2]\n    (if (= cur n)\n      res\n      (recur\n        (conj res (reduce + (take-last 2 res))) (+ cur 1) ; Doesn't work when n < 2 :P\n      )\n    )\n  )\n)","user":"5c05cae7e4b0bdcf453d16a3"},{"code":"(fn\n  [n]\n  (loop [a 0\n         b 1\n         n n\n         acc []]\n    (if (zero? n)\n      acc\n      (let [c (+ a b)]\n        (recur b c (dec n) (conj acc b))))))","problem":26,"user":"539f45dce4b0ca733b974497"},{"code":"; Inspired by a popular Haskell one-liner\n(fn [x]\n  (take x \n    (map first \n          (iterate (fn [[a b]] ;; [x, f(x), f(f(x)),...]\n                      [b (+ a b)]) \n                   [1 1]))))","problem":26,"user":"4ee75ec2535d93acb0a66867"},{"problem":26,"code":"#(loop [c % f []] \n   (if (zero? c) \n     f \n     (recur (dec c) (conj f (if (> 2 (count f)) 1 (reduce + (take-last 2 f)))))))","user":"556a7b14e4b09a3098a524e4"},{"problem":26,"code":"#(loop [i 0 a 1 b 1 res []]\n   (if (= i %1)\n     res\n     (recur (inc i) b (+ a b) (conj res a))))","user":"55dedb0de4b050e68259b3e8"},{"code":"(fn [inicio]\n (loop[ini inicio, sequencia[]]\n  (\n   if (= 0 ini) sequencia\n    (cond (empty? (rest sequencia))\n           (recur (- ini 1) (conj sequencia 1))\n     :else (recur (- ini 1) (conj sequencia (+ (last sequencia) (second (reverse sequencia)))))\n    )\n )\n)\n)","problem":26,"user":"527c0388e4b03e8d9a4a75a6"},{"problem":26,"code":"(fn fib-seq [x]\n  (map (fn fib [x] (cond (= x 1) 1 (= x 2) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ x 1))))","user":"609117bbe4b03bd49d9f36cf"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [0 1] n))\n  ([x, n]\n   (if (<= (count x) n)\n     (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n     (rest x))))","user":"591e1dc7e4b09b4ee5954c2a"},{"code":"#(map \r\n  first \r\n  (take % \r\n    (iterate \r\n      (fn \r\n        [x] \r\n          (let \r\n            [a (first x) b (first (rest x))] \r\n            (list b (+ a b)))) \r\n    '(1 1))))","problem":26,"user":"4fdf566fe4b05e33b9224f99"},{"code":"(fn [m]\n    (map (fn fib [n]\n           (cond (< n 1) 0\n                 (= n 1) 1\n                 (= n 2) 1\n                 :else (+ (fib (- n 1))\n                          (fib (- n 2))))) (range 1 (+ m 1))))","problem":26,"user":"52033e2ce4b030ee0c5b2716"},{"problem":26,"code":"#(loop [prev 0 this 1 acc  [1]]\n  (if (>= (count acc) %)\n  \tacc\n    (recur this (+ this prev) (conj acc (+ this prev)))))","user":"55bc2322e4b01b9910ae29f0"},{"code":"#(map (fn fib [n] \n        (if (< n 0) 0 \n        (if (= n 0) 1\n        (+ (fib (- n 2)) (fib (- n 1))))))\n      (range %))","problem":26,"user":"4f067029535dcb61093f6c12"},{"code":"#(map first( take % (iterate (fn [[a b]] [b (+ a b)] ) [1 1]) ) )","problem":26,"user":"53350264e4b0656e627bfd73"},{"problem":26,"code":"(fn fib \n  ([n] (fib n 0 []))\n  ([n current seq]\n   (if (<= n current)\n      seq\n     (do\n       (println seq)\n       (fib n \n            (inc current) \n            (conj seq (if (or (= current 0) (= current 1))\n                        1\n                        (+ (get seq (- current 1)) (get seq (- current 2)))))\n\n            )))))","user":"602f56c5e4b0d5df2af22297"},{"problem":26,"code":"(fn fib2 [times]\n  (map first (take times (iterate (fn [[x, y]] [y (+ x y)]) [1 1])))\n  )","user":"574ed2f7e4b02ea11479924a"},{"problem":26,"code":"(fn foo\n\n   ([x] (foo '(1 1) (- x 2)))\n\n   ([y x]\n\n\n    (if (> x 0)\n\n\n      (foo (conj y  (+ (first y) (first (rest y)))) (dec x))\n\n     (reverse y))\n     ))","user":"5bed1e4ae4b0a6d31fed2118"},{"code":"#(map\n  (fn f [x]\n    (if (= x 0) 1\n    (if (= x 1) 1\n    (+ (f (- x 2)) (f (- x 1))))))\n  (range %))","problem":26,"user":"4e823f41535db62dc21a62c8"},{"code":"(fn [s]\r\n    (sort\r\n\t   (loop [size s,idx 0,n 1,m 0,arr (list)]\r\n\t      (if (= size idx)\r\n\t\t  arr\r\n\t\t  (recur size (inc idx) (+ n m) n (conj arr n))))))","problem":26,"user":"4ef2d6c5535dced4c769f222"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib\n    ([n]\n      (cond\n        (= n 0) []\n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else (fib [1 1] n)))\n    ([l n]\n      (if (< (count l) n)\n        (fib (conj l (+ (last l) (nth l (- (count l) 2)))) n)\n        l)))]\n    (fib n)))","user":"5a23c4b0e4b0ff51aa4b32de"},{"code":"(fn [x]\r\n  (loop [cnt 0 fs []]\r\n    (if (= cnt x)\r\n      (list* fs)\r\n      (recur (inc cnt) \r\n             (if (< (count fs) 2) \r\n  \t\t\t\t      (conj fs 1)\r\n\t\t\t\t\t      (conj fs (apply + (take-last 2 fs))))))))","problem":26,"user":"4fd9f5dbe4b05e33b9224f41"},{"problem":26,"code":"(fn fib\n  ([n] \n    (fib [1 1] n))\n  ([x, n]\n   (if (< (count x) n) \n     (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n     x)))","user":"57064231e4b0b0fb43fd067a"},{"code":"(fn fib [n] \n  (if (= n 1) \n    '(1)  \n    (concat\n      (fib (- n 1))\n      (list \n        (if (= n 2) \n          1 \n          (+ (last (fib (- n 1))) (last (fib (- n 2))))\n        )\n      )\n    )\n  )\n)","problem":26,"user":"4e8b98fc535d65386fec2124"},{"problem":26,"code":"#(loop [l [] remain %]\n   (if (> remain 0)\n     (recur (if (< (count l) 2) (conj l 1) (conj l (+ (last l)(nth l (- (count l) 2))))) (dec remain))\n     l))","user":"5662a5eee4b0e91d5f5c564b"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib [a b]\n              (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"608256d7e4b0736b099e42da"},{"code":"#((fn fib [vect n] \n          (if (= 0 n)\n            vect\n            (fib (conj vect (reduce + (take-last 2 vect))) (- n 1)))\n          \n    ) [1 1] (- % 2))","problem":26,"user":"51ccc92ce4b02254fc79487a"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1]))))","user":"57376dcbe4b0cd1946bd1044"},{"problem":26,"code":"(fn fib-seq [n]\n  (letfn [(fib-seq-h [a b] (lazy-cat [a] (fib-seq-h b (+ b a))))]\n          (take n (fib-seq-h 1 1))))","user":"5cb556f9e4b026601754b934"},{"code":"(fn fib\n  ([a b] (cons a (lazy-seq (fib b (+ a b)))))\n  ([n] (take n (fib 1 1))))","problem":26,"user":"51a97f7ae4b08d8ec191b827"},{"problem":26,"code":"(fn [n0]\n(let  [xs (range n0)]\n  (map  \n    (fn Fi [n]\n      (if (or (= n 0) (= n 1)) \n        1\n        (+ (Fi (- n 2)) (Fi (- n 1)))\n      ))  xs)\n  ))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":26,"code":"(fn fib [x] (loop [n x first 0 second 1 a []] (if (> n 0) (recur (- n 1) second (+ first second) (conj a second)) a)))","user":"54d0e6c5e4b0e8a36923e5d4"},{"problem":26,"code":"(fn fibo\n  [num]\n  (loop [a   1\n         b   1\n         c   0\n         result  '()]\n    (if (= num c)\n      (reverse result)\n      (recur b\n             (+ a b)\n             (inc c)\n             (cons a result)))))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn ! [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [sublist (! (dec n))]\n                (conj sublist (+ (last sublist) (last (drop-last sublist)))))\n        \n        ))","problem":26,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"#(reverse (reduce (fn [r _] (cons (apply + (take 2 r)) r)) '(1 1) (range (- % 2)) ))","problem":26,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn [y]\n  (map\n    (fn fib [x]\n      (if (> 3 x)\n        1\n        (+ (fib (- x 2)) (fib (- x 1)))))\n    (range 1 (+ y 1))))","problem":26,"user":"4ec56b5b535d6d7199dd369f"},{"problem":26,"code":"(fn [n] (take n ((fn fib \n     ([] (fib 1 1))\n     ([a b] (lazy-seq (cons a (fib b (+ a b)))))))))","user":"5d51377be4b0776584bd6f5d"},{"code":"(fn [n]\n          (take n (map first  (iterate (fn [[c l]] [(+ c l) c]) [1 0]))))","problem":26,"user":"52d83c2ce4b09f7907dd138d"},{"problem":26,"code":"(fn [x] (take x\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"55f6f1d3e4b06e875b46cea0"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             (fn [[a b]] [b (+ a b)])\n             [1 1])))","user":"5536c324e4b09218d5f44fc1"},{"code":"(fn [n]\n  (loop [a 1 b 1 count (- n 2) acc [1 1]]\n    (if (= 0 count) acc\n                (recur b (+ a b) (dec count) (conj acc (+ a b)))))\n)","problem":26,"user":"4fadbc3fe4b081705acca23f"},{"problem":26,"code":"(fn fib [n]\n  (loop [f1 1\n         f2 1\n         i 0\n         result []]\n    (if (= i n)\n      result\n      (recur f2 (+ f1 f2) (inc i) (conj result f1)))))","user":"52ca6520e4b071a8d36bd3e0"},{"problem":26,"code":"(fn [a]\n    (map \n     (fn fib [x]\n       (cond\n         (= x 0) 0\n         (= x 1) 1\n         :else (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (inc a))))","user":"54b67463e4b05787c3b163bc"},{"problem":26,"code":"#(loop [res [1 1]]\n   (if (= (count res) %)\n     res\n     (recur (conj res (+ (peek res) (nth res (- (count res) 2)))))))","user":"586b1482e4b0f14aab7c88cf"},{"code":"(fn  [x]\n  (loop [ cnt 2\n          top x\n          acc [1 1]\n        ]\n    (if (== top cnt)\n        (reverse acc)\n        (recur (inc cnt) top (cons (+ (first acc) (second acc)) acc) )\n)))","problem":26,"user":"529012a5e4b0239c8a67af01"},{"problem":26,"code":"#(loop [n % seq [] l1 1 l2 0] (if (zero? n) seq (recur (dec n) (conj seq l1) (+ l1 l2) l1)))","user":"576cd1fae4b0979f89651554"},{"problem":26,"code":"(fn [num] (loop [curr 1 prev 0 c 0 acc []] (if (>= c num) acc (recur (+ curr prev) curr (inc c) (conj acc curr)))))","user":"5e5c425ae4b0fd0acd158662"},{"problem":26,"code":"(fn fib\n  ([]\n    (fib 1 1))\n  ([n]\n    (take n (fib)))\n  ([a b]\n    (lazy-seq (cons a (fib b (+ a b))))))","user":"59f77dfae4b0966464fe6af4"},{"code":"(fn [x]\n  (loop [x x\n         s (list 1 1)]\n    (if (= x 2)\n           (reverse s)\n           (recur (dec x) (cons (+ (first s) (second s)) s)))))","problem":26,"user":"517401d6e4b0d277d717bc66"},{"code":"(fn [x] \n          (map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib (- n 1)) (fib (- n 2))))))\n          (range 1 (+ x 1))))","problem":26,"user":"525d7090e4b0cb4875a45d7e"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","problem":26,"user":"517a025ce4b01aacecbecbe6"},{"problem":26,"code":"#(take % ((fn fib [_] (lazy-cat [1 1] (map + (rest (fib _)) (fib _)) )) 0))","user":"53f035c2e4b0742d9025b0d2"},{"code":"(fn [x]\n\t(rest (take (+ x 1) (map first (iterate (fn [[a b]]\n                               [b (+ a b)])\n                             [0 1])))\n    )\n)","problem":26,"user":"5246adcde4b09dbe66b561dc"},{"code":"(fn fibseq [n]\n\t\t\t(letfn [(fib [n]\n\t\t\t\t         (if (contains? #{1, 2} n) 1\n\t\t\t\t         \t(+ \t(fib (- n 1))\n\t\t\t\t         \t\t(fib (- n 2)))))]\n\t\t\t\t(map fib (range 1 (inc n))))\n\t\t)","problem":26,"user":"5252b59de4b0541d1855b8cf"},{"code":"(fn [m] (letfn [(fib [n]\n             (if (<= n 2)\n              1\n              (+ (fib (- n 1))\n                 (fib (- n 2)))\n              ))\n        ]\n  (map fib (range 1 (+ m 1)))\n          ))","problem":26,"user":"53162640e4b08068f379ed40"},{"problem":26,"code":"(letfn [(fibs-from [a b] \n         (lazy-seq\n          (cons a (fibs-from b (+ a b)))))]\n  (let [fibs (fibs-from 1 1)]\n    #(take % fibs)))","user":"5446c89ce4b032a45b8693b5"},{"code":"(fn [N] (map (fn fib [n]\n  (if (<= n 1)\n    1\n    (+ (fib (dec n)) (fib (dec (dec n)))))) (range 0 N)))","problem":26,"user":"538d4926e4b0b51d73faae6a"},{"code":"(fn [N] (loop [a 0 b 1 n 0 lst []] (if (= n N) lst (recur b (+ a b) (inc n) (conj lst b)))))","problem":26,"user":"4fbbb6ede4b081705acca2ed"},{"problem":26,"code":"(fn [n]\n    (let [hfn (fn [i n1 n2 res]\n                (cond (> i n) res\n                      (< i 3) (recur (inc i) 1 1 (conj res 1))\n                      :else (let [nn1 n2\n                                  nn2 (+ n1 n2)]\n                              (recur (inc i) nn1 nn2 (conj res nn2)))))]\n      (hfn 1 0 0 [])))","user":"55ac07afe4b03311e7b7328f"},{"problem":26,"code":"#(loop [seq [1 1]] \n   (if (>= (count seq) %) seq\n       (recur (conj seq (apply + (take 2 (reverse seq)))))))","user":"57168db0e4b07c98581c3afc"},{"code":"#(take % (map last (iterate (fn [[x y]] [y (+ x y)])[0 1])))","problem":26,"user":"52ac2db3e4b0c58976d9ac82"},{"problem":26,"code":"#(take % ((fn fib [a b]\n   (cons a (lazy-seq (fib b (+ a b))))) 1 1))","user":"544e9022e4b0e3978000698b"},{"problem":26,"code":"#(loop [seq [1 1] n 2]\n   (cond\n     (>= n %) seq\n     :else (recur (conj seq (reduce + (drop (- (count seq) 2) seq))) (inc n))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn [s]\n  ((fn fib0 [x r]\n    (if (= 2 x) (reverse r)\n        (fib0 (dec x) (cons (+ (first r) (first (rest r))) r)))\n\n) s '(1 1)))","problem":26,"user":"5099283ce4b0cae2931060af"},{"problem":26,"code":"(fn fibonacci [n]\n   (loop [in (range (- n 2))\n          out [1 1]]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (conj out\n                    (+ (last out) (nth out (- (count out) 2))))))))","user":"5a8e9a7ae4b05369db4d2528"},{"code":"(fn fib [N]\n    (if (= N 1)\n      '(1)\n      (if (= N 2)\n        (reverse (cons 1 (fib (dec N))))\n        (reverse (cons (+ (last (fib (dec N))) (last (fib (dec (dec N))))) (reverse (fib (dec N))) ))\n      )\n    )\n  )","problem":26,"user":"4f554f4de4b0a7574ea717fa"},{"code":"#(take % ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))","problem":26,"user":"4db13ff51254ad5b4805fa68"},{"problem":26,"code":"(fn foo [x]\n  (take x\n   ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"53ae79f3e4b047364c044475"},{"problem":26,"code":"#(let [fib-sq [1 1 2 3 5 8 13 21]] (take % fib-sq))","user":"504dfc75e4b078edc5f59387"},{"code":"(fn [x]\r\n  (let [len x]\r\n    (loop [col '(1)]\r\n      (if (= (count col) len)\r\n        (reverse col)\r\n        (recur (conj col (reduce + (take 2 col))))))))","problem":26,"user":"4fd0af0ee4b04c3a95aa0405"},{"problem":26,"code":"(fn [y] (map (fn  fib [x] (if (< x 2) 1 (+ ( fib(- x 1)) (fib (- x 2))))) (range y)))","user":"56d439d4e4b0ea9b8538f7b6"},{"problem":26,"code":"(fn [n]\n  (loop [prev 1\n         curr 0\n         x n\n         res '()]\n    (if (= 0 x)\n      (reverse res)\n      (recur curr (+ curr prev) (dec x) (conj res (+ curr prev))))))","user":"54973b58e4b0b312c081ff70"},{"problem":26,"code":"(fn [x]\n  (let [helper (fn [acc n]\n        (if (= n x) acc\n            (recur (cons (+ (first acc) (second acc)) acc) (inc n))))]\n    (cond\n     (= x 0) '()\n     (= x 1) '(1)\n     (= x 2) '(1 1)\n     :else (reverse (helper [1 1] 2)))))","user":"554c5affe4b0a04f792995a3"},{"code":"(fn [N] (reverse                 ((fn fib [n]\n                  (condp = n\n                    0 '()\n                    1 '(1)\n                    2 '(1 1)\n                    (let [sub (fib (dec n))\n                          a   (first sub)\n                          b   (first (next sub))]\n                      (cons (+ a b) sub)))) N)))","problem":26,"user":"4e71705e535d5021c1a89649"},{"problem":26,"code":"(fn fib [n] (if (= n 1) '(1) \n              (if (= n 2) '(1 1)\n                 (concat (fib (- n 1)) \n                         (list \n                          (+ (last (fib (- n 1))) \n                             (last (fib (- n 2)))\n                             )) \n              )\n  ))\n)","user":"56a75810e4b0542e1f8d14fc"},{"problem":26,"code":"(fn my-fibonacci-seq [x]\n  (case x\n    1 '(1)\n    2 '(1 1)\n    (let [prev (my-fibonacci-seq (- x 1))\n          rev-prev (reverse prev)]\n      (concat prev (list (+ (first rev-prev) (second rev-prev)))))))","user":"56e32696e4b03a7c14b85a40"},{"problem":26,"code":"(fn [n]\n  (let [fib-add (fn [[a b]] [b (+ a b)])]\n  (take n (map first (iterate fib-add [1 1])))))","user":"5846804de4b089d5ab817e91"},{"problem":26,"code":"(fn [count]\n    (let [init-list [1 1] zero-list (repeat (- count 2) 0)]\n        (reduce (fn [foo bar]  (conj foo (+ (first (reverse foo))  (second (reverse foo)))))\n            init-list zero-list)))","user":"56548885e4b0f9d632dd8483"},{"code":"#(map (fn fib [x]\n  (case x\n    0 1\n    1 1\n    (+ (fib (- x 2)) (fib (- x 1))))) (range %))","problem":26,"user":"50928084e4b097f48cc3856c"},{"code":"(fn [cnt] \n  (if (= 1 cnt) '(1)\n    (if ( = 2 cnt) '(1 1)\n      (loop [c (- cnt 2) res '(1 1)]\n        (if (= c 0)\n          (reverse res)\n          (let [newval (+ (first res) (second res) )]\n            (recur (- c 1) (conj res newval )\n            )\n          )\n        )\n      )\n    )\n  )\n)","problem":26,"user":"500c0393e4b03d00572d2d85"},{"code":"(fn [n]\n  (loop [result [1 1]]\n    (cond\n      (= n 1) (take 1 result)\n      (= n (count result)) result\n      :else (recur (conj result (apply + (take-last 2 result)))))))","problem":26,"user":"5189a51ae4b0288ada3dbdad"},{"problem":26,"code":"#(take % (map first (iterate (fn next-fib-pair [[n0 n1]] [n1 (+ n0 n1)]) [1 1])))","user":"585c5b21e4b0f14aab7c8786"},{"code":"(fn [n]\r\n  (loop [n n a 1 b 1 acc '()]\r\n    (if (zero? n)\r\n      (reverse acc)\r\n      (recur (dec n) b (+ a b) (conj acc a)))))","problem":26,"user":"4f6a36eee4b07046d9f4ef99"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    [1]\n    (loop [i 2\n            result [1 1]]\n        (if (= i n)\n        result\n        (let [rev (reverse result)\n              last (first rev)\n              pen (first (rest rev))\n              new-value (+ last pen)]\n\n            (recur (inc i) (conj result new-value)\n                ))))))","user":"5ef78fdae4b09b61f08553c4"},{"problem":26,"code":"(fn [n]\n  (if (or (= n 0) (= n 1))\n    1\n    (let [iter (fn [acc counter n]\n                     (if (= counter 0)\n                       (reverse acc)\n                       (let [[curr prev] acc\n                             new-n (+ curr prev)]\n                         (recur (cons new-n acc) (dec counter) n))))]\n      (iter '(1 1) (- n 2) n)))\n  )","user":"587100d6e4b01531a375e9f0"},{"problem":26,"code":"(fn [n]\n  (loop [counter 0\n         arr [0]]\n    (cond \n     (>= counter n) (take-last n arr)\n     (= counter 0) (recur (inc counter) [0 1])\n     :else (recur (inc counter) (conj arr (+ (get arr (- counter 1)) (get arr (- counter 0)))))\n    )\n  )\n)","user":"5f29837ee4b033932238a64f"},{"problem":26,"code":"#(take % ((fn fib\n            [a b]\n            (lazy-seq (cons a (fib b (+ a b)))))\n          1 1))","user":"540c6a8ae4b0addc1aec6702"},{"problem":26,"code":"(fn [n] (let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))] (take n (fib 1 1))))","user":"5d9bda4fe4b0d3f9b434ad50"},{"problem":26,"code":"(fn fib [n]\n  (loop [col [1 1] i 2]\n    (if (>= i n) col (recur (conj col (+ (last col) (last (butlast col)))) (inc i)) )))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [n] \n      (reverse \n\t\t(loop [i (dec n) s '(1)] \n        (if (zero? i) s \n          (recur (dec i) \n                 (conj s (apply + (take 2 s))))))))","problem":26,"user":"51870799e4b057e3860ab7dc"},{"code":"#(take % ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n      1 1))","problem":26,"user":"4e823629535db62dc21a62c3"},{"code":"#(take % (map first (iterate (fn [[a b]]\n           [b (+ a b)])\n           [1 1])))","problem":26,"user":"536b2048e4b0243289761eb7"},{"problem":26,"code":"(fn fibb\n  ([x] \n   (fibb x [1 1]))\n  ([x y]\n   (if (= (count y) x)\n     y\n     (fibb x \n       (conj y (+ (nth y (- (count y) 2)) (last y)))))))","user":"542c2de0e4b0dad94371f29f"},{"problem":26,"code":"(fn [limit]\n  (let [fib (fn fib [lim]\n     (if (> 2 lim)\n       (+ 0 1)\n       (+ (fib (- lim 2)) (fib (- lim 1)))\n     )\n    )]\n \n  \t(map fib (range limit))\n  )\n)","user":"58694f69e4b0f14aab7c889f"},{"problem":26,"code":"(fn fibs\n  [n]\n  (cond\n   (= n 0) '()\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (seq (conj (vec (fibs (- n 1)))\n               \t\t(reduce + (take-last 2 (fibs (- n 1))))))))","user":"53ab94cae4b047364c044450"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map first \n             (iterate #(vector (last %) (+ (first %) (last %))) [1 1]))))","user":"56dc483fe4b0ea9b8538f81b"},{"problem":26,"code":"(fn[z](take z (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1]))))","user":"6001460ce4b074f607df6611"},{"code":"(fn sol [n]\n    (loop [m 0\n           p1 0\n           p2 1\n           p3 1\n           res []]\n      (if (>= m n)\n        res\n        (recur (inc m) p2 p3 (+ p2 p3) (conj res p2)))))","problem":26,"user":"5374cbf4e4b06d7f452d9e29"},{"code":"(fn [n] \n  (loop [a 1 b 1 result []]\n    (if (<= n (count result)) result\n      (recur b (+ a b) (conj result a)))))","problem":26,"user":"4ef4ab95535dced4c769f23b"},{"problem":26,"code":"(fn fib-seq [n]\n      ((fn rec [n n1 n2 acc]\n         (if (<= n 0)\n           (reverse acc)\n           (rec (- n 1) n2 (+ n1 n2) (conj acc n2)))) n 0 1 '()))","user":"601004d6e4b074f607df66b2"},{"code":"#(take % \n  ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)\n)","problem":26,"user":"509d528de4b0bb99d6371049"},{"problem":26,"code":"(fn [n]\n    (let [fib (fn fib [n]\n\t  (if (or (zero? n) (= n 1)) \n    \t\t\t1\n\t\t\t    (+ (fib (- n 2)) (fib (- n 1)))))]\n      (map fib (range n))))","user":"547c2c6ce4b0c51c1f4d72e3"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib [a b]\n             (cons a\n                   (lazy-seq (fib b (+ a b))))) 1 1)))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn fibs [n]\n  (cond\n    (= 1 n) [1]\n    (= 2 n) [1 1]\n    :else (let [old-fibs (fibs (dec n))]\n            (conj old-fibs (+ (peek old-fibs) (peek (pop old-fibs)))))))","problem":26,"user":"4ec3674b535dcc7ae8597d57"},{"problem":26,"code":"(fn fibonacci [n]\n   (last\n     (take\n       (- n 1)\n       (iterate (fn [fib]\n                  (->> fib\n                       reverse\n                       (take 2)\n                       (reduce +)\n                       list\n                       (concat fib)))\n                '(1 1))))\n   )","user":"5922a513e4b026ae38521286"},{"problem":26,"code":"(fn [n]\n  (let [fib-seq (fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (fib-seq 1 1))))","user":"59ad8695e4b0e1f4e384c887"},{"code":"(fn [num]\n  (loop [n num\n    a 0\n    b 1\n    s nil]\n    (if (> n 0)\n(recur (dec n) b (+ a b) (cons b s))\n(reverse s))))","problem":26,"user":"504e9011e4b069badc5a33b7"},{"code":"(fn [n]\n  ((fn [n s]\n     (if (= 0 n)\n       s\n       (recur (dec n)\n              (conj s\n                    (if (> (count s) 1)\n                      (+ (peek s) (peek (pop s)))\n                      1))))) n []))","problem":26,"user":"50bb646de4b03e68e4411ca3"},{"code":"#(reverse (\n   (fn nfib [cnt lst]\n    (if (= cnt 2) lst (nfib (dec cnt) (cons (+ (first lst) (second lst)) lst)))\n   )\n    % '(1 1)\n    ))","problem":26,"user":"5256c8c7e4b0541d1855ba37"},{"code":"(fn [n]\n  (reverse ((fn fibs [a b acc cnt]\n      (if (= 0 cnt)\n        acc\n        (fibs b (+ a b) (cons b acc) (- cnt 1))))\n    0 1 () n)))","problem":26,"user":"4f047902535dcb61093f6bcc"},{"problem":26,"code":"(fn [x]\n  (let [fib\n        (fn rec [x]\n          (cond \n           (= 0 x) 1\n           (= 1 x) 1\n           :else (+ (rec (- x 1)) (rec (- x 2))))\n          )]\n           (map fib (range 0 x))))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn fib [x] (for [y (range 1 (inc x))] ((fn fib_ [z] (cond (= z 1) 1 (= z 2) 1 :else (+ (fib_ (dec z)) (fib_ (- z 2))))) y)))","problem":26,"user":"526c6e08e4b03e8d9a4a7290"},{"code":"(fn [n]\n   (let [fibonacci (fn [p c i fibonaccis]\n                     (if (= 0 i)\n                       (reverse fibonaccis)\n                       (recur c (+ p c) (dec i) (cons c fibonaccis))))]\n         (fibonacci 0 1 n '())))","problem":26,"user":"52e4a40ae4b09f7907dd1453"},{"code":"(fn [n]\n  (loop [sq [1 1] a 1 b 1 counter (- n 2)]\n    (if (= counter 0)\n        sq\n        (recur (conj sq (+ a b)) b (+ b a) (dec counter)))))","problem":26,"user":"523ea111e4b057c4b7cd0a65"},{"problem":26,"code":"(fn [n]\n (reverse\n  (loop [i 0\n         at 1\n         prev 0\n         result nil]\n   (if (= i n)\n     result\n     (recur (inc i) (+ at prev) at (conj result at))))))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":26,"code":"(fn [cnt]\n  (loop [c (- cnt 2)\n         nums [1 1]]\n    (if (= c 0)\n      nums\n      (let [last-num (last nums)\n            second-to-last (last (pop nums))]\n        (recur (dec c) (conj nums (+ last-num second-to-last)))))))","user":"59d3eb2fe4b0ef0a1e9b5bd7"},{"problem":26,"code":"(fn [n]\n    (loop [cnt 2\n            res [1 1]]\n        (if (= cnt n)\n          res\n          (recur (inc cnt) (conj res (+ (nth res (- cnt 1)) (nth res (- cnt 2)))))\n    )\n  )\n  )","user":"5d301c95e4b01671435dbcca"},{"problem":26,"code":"(fn fibo\n  ([n] (fibo 1 1N n))\n  ([x y n]\n      (take n (lazy-seq (cons x (fibo y (+ x y) n))))))","user":"54ecd716e4b024c67c0cf85a"},{"code":"(fn [x] (take x ((fn fib [a b](cons a (lazy-seq(fib b (+ a b)))))1 1)))","problem":26,"user":"51cec7b1e4b0e42293a2255b"},{"problem":26,"code":"(fn [x]\n  (loop [fib [1 1]]\n    (if (>= (count fib) x)\n      (subvec fib 0 x)\n      (let [[n1 n2] (reverse fib)]\n      \t(recur (conj fib (+ n1 n2)))))))","user":"59644d2ae4b069c0a1a19764"},{"problem":26,"code":"(fn [n]\n  (loop [result []\n         a 1\n         b 1\n         length 0]\n    (if (= length n)\n      result\n      (recur (conj result a) b (+ a b) (inc length)))))","user":"55ae7adae4b03311e7b732bd"},{"problem":26,"code":"(fn [x]\n  (map (fn fib[n]\n         (if (<= n 1) 1\n           (+ (fib (- n 1)) (fib (- n 2)))))\n       (range x)))","user":"543a8256e4b032a45b869327"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 2\n         s '(1 1)]\n    (if (<= n i)\n      (take n (reverse s))\n      (recur (inc i) (cons (apply + (take 2 s)) s)))))","user":"5cf8864be4b0b71b1d808a84"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (loop [i 3 s '(1 1)]\n           (if (= i n)\n             (concat s (list (reduce + 0 (drop (- (count s) 2) s))))\n             (recur (inc i) (concat s (list (reduce + 0 (drop (- (count s) 2) s)))))))))","user":"53bab6fae4b047364c0444fb"},{"problem":26,"code":"#(loop [x % res '(1 1)]\n  (if (= x 2)\n\t(reverse res)\n    (recur (dec x) (conj res (+ (first res) (second res))))\n  )\n)","user":"5a78cd9ee4b013a48d399777"},{"code":"(fn [n]\n  (let [fib-inner (fn fib-inner [a b]\n                    (lazy-seq\n                      (cons a\n                        (fib-inner b (+ a b)))))\n        fib (fib-inner 1 1)]\n    (take n fib)))","problem":26,"user":"4daf36c2edd6309eace4d175"},{"problem":26,"code":"(fn mfib ([n] (map #(first %) (take n (iterate #(list (second %) (reduce + %)) '(1 1))))))","user":"5900d5cde4b0438e51c2d02e"},{"problem":26,"code":"#(take % (map last (iterate (fn [[x y]] [y(+ x y)])[0 1])))","user":"5a534241e4b05d388ecb6c0a"},{"problem":26,"code":"#(drop 1 (reduce (fn fib-reducer [acc _]\n  (let [lst (last acc)\n        be4lst ((comp last pop vec) acc)\n        next (+ be4lst lst)]\n      \t\t(conj acc next)))\n   [0 1] \n   (range (- % 1))))","user":"59b8ee96e4b0a024fb6ae3c0"},{"problem":26,"code":"(fn [n] \n  (loop [previous 0 current 1 r []]\n    (if (<  (count r) n)\n      (recur current (+ current previous) (conj r current))\n      r)))","user":"55996253e4b031d6649c9baa"},{"code":"#(loop [fst 1 snd 1 cnt % fib []]\n   (if (zero? cnt) (seq fib)\n     (recur snd (+ fst snd) (dec cnt) (conj fib fst))))","problem":26,"user":"51929214e4b08962174cf74c"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1 1]\n         a 1\n         b 1]\n    (if (>= (count acc) n)\n      acc\n      (recur (conj acc (+ a b)) b (+ a b)))))","user":"55fbc657e4b0f488688e0666"},{"problem":26,"code":"#(loop [i %, res '(1 0)]\n\t(if (= i 1)\n\t\t(reverse (take (dec (count res)) res))\n\t\t(recur\n\t\t\t(dec i)\n\t\t\t(cons (+ (first res) (first (rest res))) res)\n\t\t)\n\t)\n\t)","user":"5d73530ce4b02e6b30c93514"},{"problem":26,"code":"(fn [k]\n  (loop [k k\n         c 1\n         a-seq []]\n    (cond (< k 1) (println \"indexing starts at 1. no neg fib numbers\")\n          (= (inc k) c) (reverse a-seq)\n          :else (let [new (if (> c 2)\n                              (+ (first a-seq) (second a-seq))\n                              1)]\n                  (recur k (inc c) (cons new a-seq))))))","user":"59a58bf0e4b066c664927d64"},{"code":"(fn [n]\n  (loop [n1 1\n         n2 0\n         todo n\n         accum []]\n    (if (= todo 0)\n      accum\n      (recur (+ n1 n2) n1 (- todo 1) (concat accum [n1])))))","problem":26,"user":"51113eb8e4b09ff0d31c7ca9"},{"problem":26,"code":"(fn [n] (cond (= n 1) [1]\n              (= n 2) [1 1]\n              :else (let [fibr (fn [m x] \n                         (if (> m 2) (recur (dec m) (conj x \n                                   (+ (last x) (last (drop-last x)))\n                                 )) x))\n                           ]\n                                 (fibr n [1 1]))))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [n]\n  (map first (reductions\n    (fn [[a b] _] [b (+ a b)]) [1 1] (range 1 n))))","problem":26,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn [n]\n  (take n \n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"5390110de4b0b51d73faae94"},{"code":"(fn fib [n]\n  (loop [index 1\n         sum 1\n         result '(1)]\n    (if (= n index)\n      (reverse result)\n      (recur (inc index)\n             (+ sum (first result))\n             (cons sum result)))))","problem":26,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"#(map first (rest (take (inc %) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":26,"code":"(fn [n]\n  (map first\n        (take n\n              (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5ba15075e4b0a20761a2339e"},{"problem":26,"code":"(fn [len]\n  (loop [a 1\n         b 1\n         r [1]]\n    (if (= (count r) len)\n      r\n      (recur b (+ a b) (conj r b)))))","user":"56521a26e4b0f9d632dd845f"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"562d6fb9e4b0a45d2ff8301c"},{"problem":26,"code":"(fn fuck-me \n  ([nr] (fuck-me [0 1] 0 1 (dec nr)))\n  ([vect frst-num sec-num nr] \n   (if (= nr 0)\n     (drop 1 vect)\n     (let [new-frst sec-num\n           new-sec  (+ frst-num sec-num)]\n       (fuck-me (conj vect new-sec) new-frst new-sec (dec nr))))))","user":"5655e056e4b0f9d632dd849b"},{"problem":26,"code":"#(cons 1 ((fn fr [a b r] (if (> r 0) (lazy-seq (cons (+ a b) (fr b (+ a b) (dec r)))))) 0 1 (dec %)))","user":"5408ec4de4b0addc1aec66d0"},{"problem":26,"code":"(fn [n]\n     (take n\n           (map\n            (fn fibnum\n                [x]\n                (if (< x 3)\n                    1\n                  (+ (fibnum (- x 2)) (fibnum (- x 1)))))\n            (iterate inc 1))))","user":"54d2892fe4b0e8a36923e5f7"},{"problem":26,"code":"(fn [m] (map (fn fib\n               [n]\n               (case n\n                 0 1\n                 1 1\n                 (+ (fib (- n 1)) (fib (- n 2))))) (range m)))","user":"5185ad63e4b0da5a5be3bac2"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]]\n                       [b (+ a b)])\n                     [1 1]\n                     )\n            )\n       )\n\n;; this is mostly cribbed from https://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci  :(","user":"5962af8ce4b066ee0a44b0b8"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","problem":26,"user":"510cba32e4b078ea71921121"},{"problem":26,"code":"(fn fibs [x] \n  (->> (range x)\n    (map \n      (fn fib [n] \n        (if (or (= n 0) (= n 1))\n \t\t\t1\n  \t  \t(+ (fib (- n 1)) (fib (- n 2))))))))","user":"5bb7c9e3e4b0a20761a235b0"},{"problem":26,"code":"(fn fib ([n] (fib n '(1 1))) ([n v] (if (< n 3) (reverse v) (recur (dec n) (conj v (+ (first v) (first (rest v))))))))","user":"530fbbaee4b08068f379eccf"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [(+ a b) a]) '(1 0))))","user":"4e8b5cb8535d65386fec211b"},{"problem":26,"code":"#(reverse (reduce (fn [xs _] (conj xs (+ (first xs) (second xs)))) '(1 1) (repeat (- % 2) 0)))","user":"56771b31e4b05957ce8c6163"},{"code":"(fn f [n]\n    (cond\n     (= n 1) [1]\n     (= n 2) [1 1]\n     :else (let [v (f (dec n))]\n             (conj v (+ (first (rseq v)) (second (rseq v)))))))","problem":26,"user":"52d6a9c2e4b09f7907dd1365"},{"problem":26,"code":"(fn [x] (loop [f [1] c 1 i 1 j 2] (if (>= c x) f (recur (conj f i) (inc c) j (+ i j)))))","user":"5dbecfefe4b09f47823971cc"},{"problem":26,"code":"(fn \n  fibb [x] \n  (if \n    (= 2 x) \n    '[1 1]\n    (let \n      [f (fibb (- x 1))] \n      (conj \n        f \n        (+ \n          (nth f (- x 2)) \n          (nth f (- x 3))\n        )\n      )\n    )\n  )\n)","user":"571aad45e4b07c98581c3b59"},{"problem":26,"code":"(fn [count] (loop [c count, out '(1 1)] (if (= c 2) (reverse out) (recur (dec c) (conj out (+ (first out) (second out)))))))","user":"5886e8bde4b0f1effa3b76ea"},{"problem":26,"code":"#(take % \n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n)","user":"5b12f5b6e4b0cc2b61a3be49"},{"problem":26,"code":"(fn [n]\n  (loop [fib1 1 fib2 1 coll [] cnt 0]\n    (if (= cnt n) \n      coll\n      (recur fib2 (+ fib1 fib2) (conj coll fib1) (+ cnt 1)))))","user":"5b5462b5e4b02d533a91bd20"},{"problem":26,"code":"(fn fib\n  ([n]\n    (fib n [1 1]))\n  ([n nums]\n    (if (= n 2) ; because [1 1]\n      (reverse nums)\n      (fib (- n 1)\n           (cons\n             (+ (first nums) (second nums))\n             nums)))))","user":"5a9181c5e4b002d099cae6f6"},{"code":"(fn [n]\n  (letfn [(add-fib [l]\n                   (cons\n                   \t(if (< (count l) 2)\n                     1\n                     (+ (first l) (second l)))\n                    l))\n          (rfib [l n]\n                (if (= n 0)\n                  l\n                  (recur (add-fib l) (dec n))))]\n    (reverse (rfib [] n))))","problem":26,"user":"53134005e4b08068f379ed07"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) result [1 1]]\n    (if (= n 0)\n      result\n      (let [x (last result)\n            y (last (butlast result))]\n        (recur (dec n) (conj result (+ x y)))))))","user":"565e0934e4b068f2fe63dc30"},{"problem":26,"code":"(fn [n] \n  (reduce (fn [a b] \n            (conj a (apply + (take-last 2 a)))) \n          [1 1] \n          (range 2 n)))","user":"5649b1b0e4b0284900eef646"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n]\n            (condp = n\n              0 1\n              1 1\n              (+ (fib (- n 1)) \n                 (fib (- n 2)))))]\n    (map fib (range n))))","user":"573cb87fe4b05c31a32c0807"},{"code":"(fn [x] (if (= x 1) [1] \n  (if (= x 2) [1 1]\n    (loop [s [1 1] i1 1 i2 1 n (- x 2)]\n      (if (= n 0) s (let [i0 (+ i1 i2)] \n        (recur (conj s i0) i0 i1 (dec n))))))))","problem":26,"user":"50b24a2fe4b03ea88043355c"},{"problem":26,"code":"#(loop [num % fib [1 1]]\n  (if (= 2 num)\n    fib\n    (recur (dec num)\n           (into fib [(+ (last fib) (last (drop-last fib)))]))\n    )\n  )","user":"5876c0c5e4b01531a375ea8e"},{"problem":26,"code":"#(reverse (loop [fib '(1 1)] \n            (if (< (count fib) %) \n              (recur (conj fib (+ (first fib) (second fib)))) \n              fib)))","user":"5436e0a8e4b032a45b8692fd"},{"problem":26,"code":"(fn [x] \n  (loop [n- 0\n         n  1\n         i 0\n         s []]\n    (if (= x i)\n      s\n      (recur n (+ n n-) (+ i 1) (conj s n)))))","user":"556405e5e4b0c656e3ff17fb"},{"problem":26,"code":"(fn [n] (reverse (reduce (fn [acc el] (conj acc (+ (first acc) (second acc))))\n                '(1 1)\n                (range 2 n))))","user":"5836bc20e4b089d5ab817d03"},{"code":"(fn [num]\n  (loop [x 0 p0 0 p1 1 result [1]]\n    (println x p0 p1 result)\n    (if (< x (dec num))\n      (let [val (+ p0 p1)]\n      (recur (inc x) p1 val\n             (conj result val)\n                   )) result )))","problem":26,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"#(take % ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1))","problem":26,"user":"4f032977535dcb61093f6a6c"},{"code":"#(reverse ((fn fib [n]\n        (cond\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          :else  \n            (let [lastfib (fib (dec n))]\n             (conj lastfib (+ (peek lastfib) (peek (pop lastfib))))\n            )\n        )\n   ) %))","problem":26,"user":"502ade49e4b0614b52996120"},{"problem":26,"code":"#(take %\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n          1 1))","user":"57ea107ae4b0bfb2137f5b3e"},{"problem":26,"code":"(fn [num] (map #'second\n              (take num (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5f3f2281e4b004f08c61c561"},{"problem":26,"code":"(fn [N]  (loop [seq '(1, 1) n (- N 2)] (if (= n 0) (reverse seq) (recur (cons (+ (first seq) (nth seq 1)) seq) (dec n)))))","user":"54fa60dfe4b0cf870d934704"},{"problem":26,"code":"(fn [seqCnt]\n   (loop [ resVec []\n           curCnt 0]\n     (if (= curCnt seqCnt)\n       resVec\n       (if (< curCnt 2)\n         (recur (conj resVec 1) (+ curCnt 1))\n         (recur (conj resVec (+ (nth resVec (- curCnt 2)) (nth resVec (- curCnt 1)))) (+ curCnt 1))\n       )\n     )\n   )\n)","user":"5cf7215ce4b0b71b1d808a67"},{"problem":26,"code":"#(loop [c 2, coll '[1, 1]] \n   (if (> %1 c) \n     (recur (inc c) (conj coll (+ (last coll) (nth coll (- (count coll) 2) )) )) \n     coll))","user":"5ffe889ce4b074f607df6603"},{"problem":26,"code":"#(loop [n %, last 0, current 1, acc '()]\n    (if (< n 1)\n      acc\n      (recur (dec n) current (+ current last) (concat acc `(~current)))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":26,"code":"(fn fib [n] \n  (take n ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","user":"57f6bd5de4b0d3187e9008ee"},{"problem":26,"code":"(fn [n] (loop [f1 1 f2 1 s '(1)] (if (< (count s) n) (recur f2 (+ f1 f2) (cons f2 s)) (reverse s))))","user":"5385e633e4b06839e8705f08"},{"code":"(fn [a] (reverse (nth (iterate #(cons (apply + (take 2 %)) %) '(1 1)) (- a 2))))","problem":26,"user":"52c45ac8e4b0c2d177d620d9"},{"problem":26,"code":"(fn [n]\n  (let [f (fn rec [i cur nxt res]\n            (if (>= i n)\n              res\n              (rec (inc i) nxt (+ cur nxt) (conj res nxt))))]\n    (f 0 0 1 [])))","user":"5e47bc6fe4b043cd24807a34"},{"code":"#(loop \n  [res '(1 1)  k 2]\n  (cond \n    (= % 1 ) '(1)\n    (= % k) (reverse res)\n    :default (recur (conj res (+ (first res) (first (rest res)))) (inc k))\n  ))","problem":26,"user":"4e6a6be7535d8ccf87e9fee1"},{"code":"(fn fibm [number]\n  (let [fib (fn fib [n] (if (<= n 2)\n   1\n   (+ (fib (- n 1)) (fib (- n 2)))))]\n  (map fib (range 1 (+ number 1)))))","problem":26,"user":"50ba5084e4b03e68e4411c7c"},{"code":"(fn [x]\n  (if (or (= x 1) (= x 2))\n          1\n          (loop [fibs '(1 1)\n                 cnt x]\n            (if (= 2 cnt)\n              (reverse fibs)\n              (recur (conj fibs (+ (first fibs) (second fibs))) (dec cnt))))))","problem":26,"user":"4fe72924e4b0e8f79898fedb"},{"code":"(fn [n] (take n (seq [1 1 2 3 5 8 13 21])))","problem":26,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"(fn fibs [x]\n\t(for [num (range x)]\n          ((fn fib [n]\n             (if (< n 2) n\n                 (+ (fib (- n 1)) (fib (- n 2)))\n                 )\n             )\n           (inc num))\n          )\n        )","problem":26,"user":"5194f482e4b05be8c43d2385"},{"code":"(fn fbnq \r\n        ([num] (fbnq num 1 []))\r\n        ([num curr coll]\r\n          (cond (= 0 curr) (fbnq num 1 [1])\r\n                (= 1 curr) (fbnq num 2 [1 1])\r\n                (= curr num) coll\r\n                :else (fbnq num (inc curr) (conj coll (+ (last coll) (second (reverse coll))))))))","problem":26,"user":"4dddff47535d08e6dec9fdd4"},{"code":"(fn [n]\n  (reverse ((fn [c n1 n2 s]\n\t\t(if \t(< c n)\n\t\t\t(recur (inc c) n2 (+ n1 n2) (conj s n1))\n\t\t\ts\n\t\t)\n\t) 0 1 1 ()))\n)","problem":26,"user":"4f951375e4b0dcca54ed6cc8"},{"problem":26,"code":"(fn [n]\n  (loop [s [1 1] nn-1 1 nn 1]\n    (if (<= n (count s)) (take n s)\n      (recur (conj s (+ nn-1 nn)) nn (+ nn-1 nn)))))","user":"555287a4e4b0deb715856df5"},{"problem":26,"code":"#(reverse (loop [ans '() a 0 b 1 i %]\n  (if (zero? i)\n    ans\n    (recur (conj ans b) b (+ a b) (dec i)))))","user":"594a1475e4b07ddc2dafadf2"},{"code":"(fn [cnt]\n  (if (> cnt 2)\n    (loop [n (- cnt 2)\n           fnm2 1\n           fnm1 1\n           acc [1 1]]\n      (if (= n 0)\n        acc\n        (recur (dec n) fnm1 (+ fnm1 fnm2) (conj acc (+ fnm1 fnm2)))))\n    (subvec [1 1] 0 cnt)))","problem":26,"user":"52d7f9a8e4b09f7907dd1381"},{"problem":26,"code":"#(take % [1 1 2 3 5 8 13 21 34])","user":"54d5fbe9e4b0a52adc2e2014"},{"code":"(fn fibo [n] \n  (letfn [(fiboRev [n] \n                 (cond \n                  (= n 1) '(1) \n                  (= n 2) '(1 1) \n                  :else (let [tail (fiboRev (- n 1))] (cons (+ (first tail) (first (rest tail)))\n                                                              tail)\n                        )\n                 )\n         \n       )] (reverse (fiboRev n))\n  )\n)","problem":26,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":26,"code":"#(loop [x 1 y 1 z 1 a '(1)]\n   (if (= x %) (reverse a) (recur (inc x) z (+ y z) (conj a z))\n   )\n)","user":"55f68360e4b06e875b46ce93"},{"problem":26,"code":"(fn fibs\n  ([n] (take n (fibs 1 1)))\n  ([a b] (lazy-seq (cons a (fibs b (+ a b))))))","user":"56c21eafe4b05cc29241ee7e"},{"code":"(fn [x]\n  (take x\n    ((fn fib [y z] (cons y (lazy-seq (fib z (+ y z))))) 1 1)))","problem":26,"user":"5102f4f9e4b00c483ae176fd"},{"problem":26,"code":"(fn fibo [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (let [prev (fibo (- n 1)) rev (reverse prev)]\n              (concat prev [(+ (nth rev 0) (nth rev 1))])\n              )\n    :else []\n    )\n  )","user":"59f78b49e4b0ca45a743a30e"},{"code":"#(take %\r\n  (map first (iterate\r\n              (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f7d5328e4b06e829148e1bf"},{"problem":26,"code":"(fn [n]\n  (let [fib (iterate (fn [[x y]] [y (+ x y)]) [0 1])]\n    (map last (take n fib))\n    )\n  )","user":"5612d91ee4b05f002753df97"},{"problem":26,"code":"(fn fab [x]\n           (if (= x 1)\n             '(1)\n             (if (= x 2)\n               '(1 1)\n               (conj (map + (fab (dec x)) (conj (fab (- x 2)) 0)) 1))))","user":"53c9d29ae4b00fb29b2212c2"},{"problem":26,"code":"(fn fibs\n  ([n a b]\n   (if (= n 0)\n     '()\n     (conj (fibs (dec n) (+ a b) a) a)))\n  ([n] (fibs n 1 0)))","user":"5c2d1f63e4b0d62ef62d9ef0"},{"code":"(fn f [x] (if (= x 2) '[1 1] (let [fx (f (- x 1))] (conj fx (+ (last fx) (last (butlast fx)))))))","problem":26,"user":"519964cbe4b0aa09cbc0b849"},{"code":"(fn fib [n] (case n 1 [1] 2 [1 1] (let [prev (fib (dec n))] (conj prev (apply + (take-last 2 prev))))))","problem":26,"user":"53629381e4b0243289761e54"},{"problem":26,"code":"(fn fibb [x] \n  (if (= x 1) '(1)\n    (if (= x 2) '(1 1)\n      (let \n [pre (fibb (- x 1))] \n (concat \n   pre \n   (#(list (+ (first %) (last %))) (take 2 (reverse pre)))))\n      )\n   )\n  )","user":"5528ecd1e4b0ffed3738f942"},{"problem":26,"code":"(fn [max] \n  (loop [res [1 1]]\n        (if (>= (count res) max)\n            res\n            (recur (conj res\n                (+\n                    (last res)\n                    (nth res (- (count res) 2))\n                )\n        )\n    )\n)))","user":"5df54584e4b03c219ef1a38f"},{"code":"(fn [n]\n  (loop [l [1 1] c 3]\n    (if (> c n)\n      (take n l)\n      (recur (let [[a b] (take-last 2 l)]\n                  (conj l (+ a b))) (inc c)))))","problem":26,"user":"4e568873535d8a8b8723a283"},{"problem":26,"code":"(fn [k] (take k (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"55c9bcb8e4b0e31453f649f2"},{"problem":26,"code":"#(loop [fib [1] cnt % current 1]\n     (if (= cnt 1)\n       fib\n       (recur (conj fib current) (dec cnt) (+ current (first (reverse fib))))))","user":"5565d5e4e4b0c656e3ff181f"},{"problem":26,"code":"(fn [x] (take x ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","user":"545db6e3e4b01be26fd74675"},{"code":"#(take % \n  (map first\n    (iterate\n      (fn [[n-2 n-1]]\n        [n-1 (+ n-2 n-1)])\n      [1 1])))","problem":26,"user":"4fb1d907e4b081705acca282"},{"problem":26,"code":"(fn fib\n  ([n] (fib [] 0 1 n))\n  ([fib-seq prev cur n]\n   (if (= n 0)\n     fib-seq\n     (fib (conj fib-seq cur) cur (+ prev cur) (- n 1)))))","user":"5dc9d4ede4b03836ba07d823"},{"code":"#(loop [fibs [1], n (dec %), fn-1 0, fn 1]\n    (if (zero? n)\n      fibs\n      (recur (conj fibs (+ fn-1 fn)) (dec n) fn (+ fn-1 fn))))","problem":26,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn [n]\n  (take n ((fn fib[a, b]\n             (cons a (lazy-seq (fib b, (+ b a)))))\n           1 1)))","problem":26,"user":"50d18d00e4b05a71a896ef57"},{"problem":26,"code":"(fn [target]\n  (loop [current [1 1]]\n    (if\n      (>= (count current) target)\n      (take target current)\n      (recur (conj current (+ (last current) (second (reverse current))))))))","user":"564348e1e4b08d4f616f5f26"},{"problem":26,"code":"(fn fib\n  ([n]\n   (if (= 1 n) [1] (fib [1 1] 1 1 n)))\n  ([res i1 i2 n]\n   (if (= n (count res)) \n     res \n     (recur (conj res (+ i1 i2)) i2 (+ i1 i2) n))))","user":"58f25609e4b08e1cf3471cff"},{"problem":26,"code":"(fn get-first-fibonacci\n  (\n   [num]\n   (get-first-fibonacci (dec num) [1 1])\n    )\n  (\n   [num col]\n   (if (= 1 num) col (get-first-fibonacci (dec num) (conj col (+ (last col) ((fn [col] (second (reverse col)))\n                                                                              col)))))\n    )\n  )","user":"5c48757fe4b0e06e1360a3c3"},{"problem":26,"code":"(fn fib\n  ([n]\n   (cond\n     (= n 1) [1]\n     (= n 2) [1 1]\n     :else (let [r (fib (dec n))]\n             (conj r (reduce + (take-last 2 r)))\n             )\n     )\n   )\n  )","user":"6096d37be4b00e9e6653c3f0"},{"problem":26,"code":"(fn f [n]\n  (if (= n 2)\n    [1 1]\n    (let [fs (f (- n 1))]\n      (into fs [(+ (last fs) (last (drop-last 1 fs)))]))))","user":"56483562e4b0284900eef629"},{"problem":26,"code":"#(map (fn fib\n  [n]\n  (if\n    (or (= 1 n) (= 0 n))\n    1\n    (+ (fib (- n 1)) (fib (- n 2))))) (range %))","user":"5483ace0e4b0e286459a1192"},{"code":"(fn fib\r\n  ([n] (fib n [1 1]))\r\n  ([n s]\r\n   (if (= n (count s))\r\n     s\r\n     (fib n (conj s (apply + (take 2 (rseq s))))))))","problem":26,"user":"4e7dfab0535db169f9c796f9"},{"code":"(fn [n]\n  (take n (map first\n    (iterate (juxt last (partial apply +)) [1 1]))))","problem":26,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":26,"code":"#(map (fn fib [n]\n       (if (or (= n 0)\n               (= n 1))\n         1\n         (+ (fib (- n 1))\n            (fib (- n 2)))))\n     (range %))","user":"5438795ee4b032a45b869313"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibonacci\n            ([] (fibonacci 1 1))\n            ([a b] (lazy-seq (cons a (fibonacci b (+ a b))))))]\n    (take n (fibonacci))))","user":"5d5824fae4b02ba5928a681f"},{"problem":26,"code":"(fn [x]                                                                                                                                 \n  (letfn [(fib-recur [a b]                                                                                                                                    \n                     (lazy-seq (cons a (fib-recur b (+ a b)))))                                                                                               \n          (fib []                                                                                                                                             \n            (fib-recur 1 1))]                                                                                                                                 \n    (take x (fib))))","user":"52d9e126e4b09f7907dd13b1"},{"problem":26,"code":"(fn fib [n] \n  (loop [i 2\n         lst '(1 1)\n         nth-2 1\n         nth-1 1]\n    (cond \n     (= n 1) '(1)\n     (= n 2) '(1 1)\n     (= i n) (reverse lst)\n     :else (recur (inc i) (cons (+ nth-2 nth-1) lst) nth-1 (+ nth-2 nth-1)  )     \n     )   \n    )\n  )","user":"57f81045e4b0d3187e90090f"},{"code":"(fn gib [i] \n  (map \n  (fn fb [n]\n  (if (< n 2) n\n      (+ (fb (- n 1)) (fb (- n 2)))))\n  (range 1 (+ i 1))))","problem":26,"user":"4ff4c9dae4b0678c553fc360"},{"code":"#(take % \n       ((fn fib\n           ([] (fib 1 1))\n           ([n m] (cons n (lazy-seq (fib m (+ n m))))))))","problem":26,"user":"52fafd5ce4b047fd55837006"},{"problem":26,"code":"(fn [x] \n  (loop [size (- x 2) col '(1 1)] \n    (if (zero? size) \n      (reverse col) \n      (recur (dec size) (conj col (+ (first col) (second col)))))))","user":"5bf45b4ce4b0b326c961d88c"},{"problem":26,"code":"(fn [n]\n  (loop [x 1\n         y 1\n         acc '()]\n    (if (< (count acc) n)\n      (recur y \n             (+ x y) \n             (concat acc [x]))\n      acc)))","user":"5399c864e4b0b51d73faaf0b"},{"problem":26,"code":"(fn [num]\n  (loop [fib [1 1] counter 2]\n    (if (= counter num)\n      fib\n    (recur (conj fib (apply + (take 2 (reverse fib)))) (inc counter)))))","user":"5ba19969e4b0a20761a233a4"},{"code":"(fn fib [v n]\n    (if (= (count v) n)\n      v\n      (fib (concat v [(+ (last v) (last (butlast v)))]) n))) '(1 1)","problem":26,"user":"4faccddae4b081705acca22e"},{"problem":26,"code":"(fn fib-range [n]\n  (map\n  (fn fib [N] \n   (cond (<= N 1) \n         1 \n   :else \n         (\n          + \n          (fib (- N 1)) \n          (fib (- N 2))\n         )\n   )\n  )\n  (range n))\n)","user":"550cbb3be4b06e50f9beb155"},{"problem":26,"code":"(fn\n  [x]\n  (loop [a 0\n         b 1\n         index 0\n         r ()]\n    (if (= index x)\n      (reverse r)\n      (recur b (+ a b) (inc index) (cons b r)))))","user":"5a99b81be4b0d174b936c7a9"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]]\n                                  [b (+ a b)]) [1 1]))))","user":"54d100abe4b0e8a36923e5d8"},{"code":"(fn [n]\n     (let [help (fn help [i fi-1 fi-2]\n                  (cond (= i n) '()\n                        (= i 0) (concat '(1) (help (inc i) 1 0))\n                        (> i 0) (let [fi (+ fi-1 fi-2)]\n                                  (concat (list fi) (help (inc i) fi fi-1)))))]\n       (help 0 0 0)))","problem":26,"user":"51b91b08e4b0e871ca4958f8"},{"problem":26,"code":"(fn fibo [n]\n  (loop [n n, res [], der 0, avantder 0]\n    (if (zero? n)\n      res\n      (if (zero? der)\n        (recur (dec n) [1] 1 0)\n        (let [x (+ der avantder)]\n          (recur (dec n) (conj res x) x der))))))","user":"5a481e05e4b05d388ecb6b64"},{"problem":26,"code":"(fn fib [n] (if (< n 3) [1 1] (conj \n\n(fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)))) \n\n) ) )","user":"602bca69e4b0d5df2af22267"},{"code":"(fn [n]\n(letfn\n  [(fib [a b]\n  \t(cons a (lazy-seq (fib b (+ a b)))))]\n  (take n (fib 1 1))))","problem":26,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":26,"code":"#(letfn [(fib [x] (if (< x 3) 1\n                  (+ (fib (dec x)) (fib (dec (dec x))))\n                        ))]\n                (map fib (range 1 (inc %))))","user":"53bd8d27e4b0d9a98559a6d6"},{"problem":26,"code":"#(map second (take % (iterate (fn [x] (conj [] (second x) (+ (first x) (second x)))) [0 1])))","user":"54497569e4b032a45b8693d2"},{"problem":26,"code":"(fn [n]\n    (nth\n      (iterate\n        #(conj % (reduce + (take 2 (reverse %))))\n        [1 1])\n      (- n 2)))","user":"5e17bb46e4b00200644e3d5a"},{"problem":26,"code":"(fn [n]\n(take n ((fn fibo [x y]\n  (cons x (lazy-seq (fibo y (+ x y))))) 1 1)))","user":"556bbaaee4b09a3098a524f0"},{"problem":26,"code":"(fn [n]\n  (loop [current-count 1\n         current-seq [1]\n         current-next 1]\n    (if (= current-count n)\n      current-seq\n      (let [new-next (+ current-next (last current-seq))]\n        (recur (inc current-count) (conj current-seq current-next) new-next)))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn [n]\n  (seq\n    (reduce\n            (fn [l el]\n              (conj l (+ \n                (nth l (- (count l) 1))\n                (nth l (- (count l) 2)))))\n            [1 1]\n            (range (- n 2)))))","problem":26,"user":"5141c8e4e4b0b50abeb46b16"},{"problem":26,"code":"(fn [n]\n   (reduce #(into [%2] %1)\n           '()\n            (cond\n              (= n 1) '(1)\n              (= n 2) '(1 1)\n              :else (reduce (fn [fib-v num] (conj fib-v (+ (first fib-v) (second  fib-v)))) '(1 1) (take (- n 2) (range))))))","user":"5b69529be4b0c6492753e786"},{"code":"(fn [n]\n  (loop [s [1]\n         n n]\n    (if (= n 1)\n      s\n      (recur (conj s (apply + (take-last 2 s))) (dec n)))))","problem":26,"user":"5256cd77e4b0541d1855ba39"},{"code":"(fn fibseries [n] (let [fib (fn fib [i] (if (< i 3) 1 (+ (fib (- i 2)) (fib (- i 1)))))] (map fib (range 1 (+ 1 n)))))","problem":26,"user":"53388e2de4b0e30313ee6c9c"},{"code":"(fn [n] (take n (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","problem":26,"user":"4fc4f668e4b081705acca362"},{"problem":26,"code":"(fn [x, n]\n   (if (< (count x) n)\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n      x\n   )\n) [1 1]","user":"56040b64e4b0c80df0ca2653"},{"problem":26,"code":"(fn fibs [n]\n  (cond\n   (< n 1) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev (last (fibs (dec n)))\n               prevprev (last (fibs (- n 2)))]\n           (conj (fibs (dec n)) (+ prev prevprev)))))\n\n\n;; def first_fibs(n):\n;;   if n < 1:\n;;     return []\n;;   if n == 1:\n;;     return [1]\n;;   fibs = [1, 1]\n;;   for i in xrange(2, n):\n;;     fibs.append(sum(fibs[-2:]))\n;;   return fibs","user":"55b7ca4ae4b01b9910ae29b1"},{"problem":26,"code":"(fn [n]\n    (map \n     (fn fib [x]\n       (if (<= x 1)\n         1\n         (+ (fib (dec x)) (fib (- x 2)))))\n     (range 0 n 1)))","user":"54696109e4b00cfc9eacc146"},{"problem":26,"code":"#(take % (map first \n              (iterate \n               (fn [[a b]] \n                 [b (+ a b)]) [1 1])))","user":"5415d115e4b01498b1a719f7"},{"problem":26,"code":"#(take  % ((fn calc [a b] (cons a (lazy-seq (calc b (+ a b))))) 1 1))","user":"58cb7525e4b03c36ff7e584a"},{"problem":26,"code":"(fn fib [x] (cond\n             (= x 1) '(1)\n             (= x 2) '(1 1)\n             :else\n             (let [p (fib (- x 1)) rp (reverse p)]\n               (reverse (conj rp (+ (first rp) (second rp)))))))","user":"55993deee4b031d6649c9ba5"},{"code":"(fn [n] \n  (take n\n        (map first\n             (iterate (fn [[a b]] [(+ a b) a])\n                      [1 0]))))","problem":26,"user":"51d19c24e4b0cfcf579466c3"},{"problem":26,"code":"(fn [n] (loop [out '(1 1) n (- n 2)] (if (= 0 n) (reverse out) (recur (conj out (+ (first out) (second out))) (- n 1)))))","user":"5da71eaee4b000c986472c15"},{"code":"(fn [x]\n  (loop [acc [1] a 0 b 1 count 0]\n    (if (= (inc count) x)\n      acc\n      (recur (conj acc (+ a b)) b (+ a b) (inc count)))\n    ))","problem":26,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"#(nth (iterate    (fn [x] (conj x (->> (take-last 2 x) (apply +))))\n                             [1]) \n           (dec %) )","problem":26,"user":"5123cbbae4b061b4c6f0e0b5"},{"problem":26,"code":"(fn [num]\n  (loop \n    [a 0\n     b 1\n     col [1]\n     n (- num 1)]\n    (if (= n 0)\n      col\n      (recur b (+ a b) (conj col (+ a b)) (- n 1)))))","user":"5eeeaf56e4b07c55ae4a0514"},{"problem":26,"code":"(fn fib [times]\n  (take times ((fn fib-array [num1 num2]\n                 (cons num1 (lazy-seq (fib-array num2 (+ num1 num2)))))  1 1)))","user":"57e15244e4b0bfb2137f5a70"},{"problem":26,"code":"#(take % (let [f (fn f [] (cons 1 (cons 1 (map + (lazy-seq (f)) (lazy-seq (rest (f)))))))] (f)))","user":"5a4de614e4b05d388ecb6bb1"},{"code":"(fn [n]\n  (letfn \n     [(fibonacci [n]  [n]\n  \t\t(cond (= n 0) 1\n        \t(= n 1) 1\n        \t:else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))]\n  \t(map fibonacci (range 0 n))))","problem":26,"user":"500e9d2fe4b00fff93030f9a"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n]\n            (loop [f1 0\n                   f2 1\n                   i  1]\n               (if (>= i n)\n                  f2\n                  (recur f2 (+ f1 f2) (inc i))))\n          )] \n     (for [i (range 1 (inc n))]\n       (fib i))))","user":"5dcbe0dbe4b02b31cc3da3be"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [] a 1 b 1]\n    (if (= n (count fibs)) fibs\n      (recur (conj fibs a) b (+ a b)))))","user":"54a7336be4b09f271ff37c95"},{"code":"(fn fib\n  ([n] (fib [1 1] (- n 2)))\n  ([f n] (if (= n 0)\n    f\n    (fib (conj f (+ (last f) (last (butlast f)))) (dec n)))))","problem":26,"user":"4ec4ac86535dcc7ae8597d64"},{"problem":26,"code":"(fn fib\n    ([n a] (if (= n 0) a (fib (dec n) (concat a [(+ (nth a (- (count a) 2)) (last a))]))))\n    ([n] (fib (- n 2) '(1 1))))","user":"5d5b06a9e4b02ba5928a683a"},{"problem":26,"code":"(fn [len] (take len (reduce (fn [v k] (k v)) [1, 1] (map (fn [y] (fn [seq] (\n  conj seq (+ (first (reverse seq)) (second (reverse seq)))\n))) (range len)))))","user":"5d84545ee4b0915913b1d38b"},{"problem":26,"code":"(fn fib [x]\n\t(case x\n\t\t0 nil\n\t\t1 '(1)\n\t\t2 '(1 1)\n\t\t(reverse\n\t\t\t(cons\n\t\t\t\t(+ (last (fib (dec x)))\n\t\t\t\t\t (last (fib (- x 2))))\n\t\t\t\t(reverse (fib (dec x)))))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":26,"code":"(fn fib [n]\n    (let \n      [fib-seq \n        ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)]\n      (take n fib-seq)))","user":"5acd235ae4b0e27600da7824"},{"problem":26,"code":"(fn [x]\n  (letfn [(fibo\n           ([]\n            (concat [1 1] (fibo 1N 1N)))\n           ([a b]\n            (let [n (+ a b)]\n              (lazy-seq\n               (cons n (fibo b n))))))]\n    (take x (fibo)) \n    ))","user":"553527ede4b09218d5f44fab"},{"problem":26,"code":"(fn [n] (loop [n n, s [], a 1, b 1] (if (= 0 n) s (recur (dec n) (conj s a) b (+ a b)))))","user":"4e268c6e535deb9a81d77ef4"},{"code":"#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))","problem":26,"user":"4f4a03cce4b0d56e7bb92c03"},{"problem":26,"code":"(fn [x] \n  (loop [cnt x out [] curr 1 nxt 1]\n    (if (= cnt 0)\n      out\n      (recur (- cnt 1) (conj out curr) nxt (+ curr nxt)))))","user":"57936970e4b0e215f87e8458"},{"code":"#(take\n  %\n  (map first\n    (iterate\n      (fn [[m n]] [n (+ m n)]) \n      [1 1])))","problem":26,"user":"4f0c84ce535d0136e6c2230e"},{"code":"(fn fib [n]\r\n  (reverse\r\n  (loop [n n s '(1 1)]\r\n    (if (= n (count s)) s\r\n      (recur n (conj s (+ (nth s 0) (nth s 1))))))))","problem":26,"user":"502f4c89e4b0842eb223d8b9"},{"code":"(fn [n]\n    (letfn [(fib [n]\n              (if (or (= n 0) (= n 1)) 1\n                  (+ (fib (dec n)) (fib (dec (dec n))))))]\n      (map fib (range n)))\n    )","problem":26,"user":"4f16213f535d64f603146449"},{"problem":26,"code":"; #(loop [n (dec %) f1 0 f2 1 fibs [1]] (if (zero? n) fibs (recur (dec n) f2 (+ f1 f2) (conj fibs (+ f1 f2)))))\n;; nastyyy :D\n;; still feels weird :D\n;(fn [max] (cons 1 (take (dec max) ((fn hej [f1 f2] (lazy-seq (cons (+ f1 f2) (hej f2 (+ f1 f2))))) 0 1))))\n;; just a few parens shorter :D\n#(take % ((fn fib [f1 f2] (lazy-seq (cons f1 (fib f2 (+ f1 f2)))))  1 1))","user":"58aa8083e4b01a0c0b232985"},{"problem":26,"code":"(fn fibo [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)])  [1 1]))))","user":"57ff7d88e4b0a837a8b30c20"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib* [xs] (conj xs (apply + (take 2 (reverse xs)))))]\n    (seq (last (take (dec x) (iterate fib* [1 1]))))))","user":"57d418b4e4b0bd073c20239a"},{"code":"(fn [x]\n  (if (= x 3) '(1 1 2) (if (= x 6) \n'(1 1 2 3 5 8) (if (= x 8) '(1 1 2 3 5 8 13 21)))))","problem":26,"user":"50989786e4b04e098a4c7274"},{"code":"(fn [i]\n        (first (drop (dec i)\n              (iterate (fn [lst]\n                           (let [tail (reverse lst)]\n                             (conj lst (+ (first tail) (or (second tail) 0))))) [1]))))","problem":26,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn fib\n  ([n]\n     (cond\n      (= n 0) '()\n      (= n 1) '(1)\n      (= n 2) '(1 1)\n      (> n 2) (fib n '(1 1))\n      :else nil))\n  ([n l]\n     (cond\n      (= n 2) l\n      :else (fib (- n 1) (concat l (list (+ (last l) (first (take-last 2 l)))))))))","problem":26,"user":"52f8b2a2e4b047fd55836fda"},{"code":"(fn [p] \n   (let [fib-i (fn fib[x]\n    (if (= x 0) 0 \n    (if (= x 1) 1\n      (+ (fib (- x 1)) (fib (- x 2))))))] \n     (map fib-i (range 1 (+ p 1))))\n)","problem":26,"user":"52ab61f5e4b0c58976d9ac75"},{"problem":26,"code":"(fn [n]\n  (take \n   n\n   ((fn fib [a b]\n     (cons a\n           (lazy-seq\n            (fib b (+ b a))))) 1 1)))","user":"53065acbe4b02e8216869792"},{"problem":26,"code":"(fn [n] (map last \n  (take n \n    (iterate\n      (fn [p] (list (last p)(+ (first p) (last p))))\n      (list 0 1)))))","user":"600b385ce4b074f607df668d"},{"problem":26,"code":"(fn [n]\n   (take n (map last (iterate (fn [x] (let [[a b] x]\n                            [b (+ a b)])\n                     ) [0 1]))))","user":"5ab07d63e4b073f1774425af"},{"code":"(fn [n]\n  (let [fib (fn fib [n]\n    (if (< n 2)\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range n))))","problem":26,"user":"536123d6e4b0243289761e3f"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         coll [1 1]]\n    (if (= n i)\n      coll\n      (recur (inc i)\n             (conj coll\n                   (reduce + (take-last 2 coll)))))))","user":"5898f299e4b00487982d52e1"},{"code":"(fn [num] (reduce (fn [current next] (if (= (sequential? current) false) '(1) (if (< (count current) 2) '(1 1) (concat current [(apply + (take-last 2 current))])))) (range (+ 1 num))))","problem":26,"user":"4dddf817535d08e6dec9fdd3"},{"problem":26,"code":"#(loop [c %\n        k 1\n        l 1\n        n [k l]]\n   (if (= c 2)\n     n\n     (recur (dec c) l (+ k l) (conj n (+ k l)))))","user":"5b20cd02e4b03cfeda66ed37"},{"code":"(fn [n]\n  (map first\n       (take n\n             (iterate\n              (fn [[a b]] [b (+ a b)]) [1 1]\n             )\n       )\n  )\n)","problem":26,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":26,"code":"(let [xs ((fn fib [x y]\n            (lazy-seq (cons y (fib y (+ x y)))))\n          0 1)]\n  #(take % xs))","user":"5bc15685e4b07a9b28b10016"},{"code":"(fn fib \r\n  ([x] (fib x 1 1))\r\n  ([x a b]\r\n    (if (zero? x) \r\n      []\r\n      (cons a (fib (dec x) b (+ a b))))))","problem":26,"user":"4f20c040e4b0d66497709fcb"},{"problem":26,"code":"(fn fibo [length]\n  (loop [fib [1 1]]\n    (if (< (count fib) length)\n      (recur (conj fib (+ (second (reverse fib)) (last fib))))\n      fib)))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":26,"code":"#(map last (take % (iterate (fn  [[a b]] (list b (+ a b))) '(0 1))))","user":"58969076e4b00487982d52a2"},{"code":"(fn fib [max]\n  (loop [a 1, b 1, acc [1]]\n    (if (>= (count acc) max)\n      acc\n      (recur b (+ a b) (conj acc b)))))","problem":26,"user":"4ec72817535d6d7199dd36de"},{"code":"(fn [n] (map second  (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e3f595d535dc968683fc498"},{"problem":26,"code":"(fn [x] \n\t\t\t\t\t(case x\n\t\t\t\t\t \t3 '(1 1 2)\n\t\t\t\t\t\t6 '(1 1 2 3 5 8)\n\t\t\t\t\t\t8 '(1 1 2 3 5 8 13 21)\n\t\t\t\t\t\t0))","user":"55c2a323e4b0e31453f6497f"},{"code":"(fn [x]\n  (take x (map first ( iterate (fn [[x,y]] [y (+ x y)]) [ 1 1 ]))))","problem":26,"user":"518c5236e4b087e178201de0"},{"problem":26,"code":"#(loop [a 1 b 1 result [1 1]] (if (= (count result) %) result (recur b (+ a b) (conj result (+ a b)))))","user":"5ebd63dee4b00a66d4a95271"},{"problem":26,"code":"#(reduce (fn [sum x] (conj sum (reduce + (take-last 2 sum)))) [1 1] (range 2 %))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":26,"code":"(fn [xx] (map (fn fib [x]\n  (if (= x 1)\n    1\n    (if (= x 0)\n      1\n      (+ (fib (- x 2)) (fib (- x 1)))))) (range xx)))","user":"54801febe4b0c51c1f4d733c"},{"problem":26,"code":"(fn [n] (reduce (fn [coll e] (conj coll (reduce + (take 2 (reverse coll))))) [1] (range 1 n)))","user":"5bc28638e4b07a9b28b10033"},{"code":"(fn [total] (loop [n total r []] (if (= n 0) r (recur (dec n) (case r [] [1] [1] [1 1] (conj r (apply + (take-last 2 r))))))))","problem":26,"user":"50e111f7e4b084616e11c663"},{"problem":26,"code":"(fn my-fibb\n  ([n] (my-fibb n [0 1]))\n  ([n coll] (if (= n 0) (drop-last (rest coll)) (recur (dec n) (conj coll (+ (last coll) (last (drop-last coll))))))))","user":"5b421edce4b02d533a91bc2c"},{"code":"(fn [length]\n  (loop [x [0 1]]\n    (if (< (count x) (+ length 1))\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      (rest x))))","problem":26,"user":"4fb045dfe4b081705acca263"},{"code":"(fn [n] \n  (loop [fs [1 1] n n]\n    (if (< n 3)\n      fs\n      (recur \n        (conj fs \n          (+ (first (reverse fs)) \n             (second (reverse fs)))) \n        (dec n)))))","problem":26,"user":"4dc1bd76535d020aff1edf8d"},{"problem":26,"code":"(fn [n]\n   (loop [lst '(1 1)]\n     (if (= n (count lst))\n       (reverse lst)\n       (recur (conj lst (apply + (take 2 lst)))))))","user":"57f81524e4b0d3187e900913"},{"problem":26,"code":"(fn [i]\n  (letfn [(infbn [j]\n            (if (= j 0)\n              (quote (1))\n              (cons (fbn j) (infbn (dec j)))\n              )\n            )\n          (fbn [n]\n            (if (< n 2)\n              1\n              (+ (fbn (dec n)) (fbn (dec (dec n))))\n              )\n            )\n          ]\n    (reverse (infbn (dec i))))\n  )","user":"5a89997de4b05369db4d24c4"},{"problem":26,"code":"(fn [n]\n   (letfn \n     [(fib [a b acc counter]\n        (if (< counter 1)\n          acc\n          (recur b (+ a b) (conj acc (+ a b)) (dec counter))))]\n        (seq (fib 1 1 [1 1] (- n 2)))))","user":"552281cae4b0882d96d0919f"},{"problem":26,"code":"(fn [n] (loop [accum [1 1]\n       i 2]\n        (if (< i n)\n          (recur (conj accum (+ (last accum) (last (butlast accum))))\n                (inc i))\n          accum)))","user":"5c925cb3e4b048ec896c5a05"},{"problem":26,"code":"#(let [f (atom [1])]\n    (loop [v (reduce + (take-last 2 @f))]\n      (if (or (< (count @f) %) (>= 1 %))\n        (do\n          (swap! f conj v)\n          (recur (reduce + (take-last 2 @f))))\n  @f)))","user":"5f6e23e6e4b02876ed9fd064"},{"code":"(fn fib [n] \n  (if (= n 2)\n    [1 1]\n    (conj (fib (- n 1)) (+ (last (fib (- n 1))) (first (rest (reverse (fib (- n 1)))))))\n)\n)","problem":26,"user":"4f84400de4b033992c121c2e"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  \n  (loop [x 0\n         y 1\n         i 1\n         lst '(1)]\n    \n    (if (= i n)\n      lst\n      (recur y (+ x y) (inc i) (sort (cons (+ x y) lst)))\n      )\n    )\n  )","user":"5f84f110e4b0375e81f54e79"},{"problem":26,"code":"#(reduce\n  (fn [x _]\n    (conj \n     (vec x) \n     (apply + (take 2 (reverse x)))))\n  '(1 1)\n  (range 2 %))","user":"5566434ee4b0c656e3ff182f"},{"problem":26,"code":"(fn [n] (nth (iterate #(conj % (apply + (take-last 2 %))) [1 1]) (- n 2)))","user":"56403765e4b08d4f616f5edc"},{"problem":26,"code":"#(reverse (last (take (dec %) (iterate (fn [[x y :as z]] (conj z (+ x y))) '(1 1)))))","user":"5576006ae4b05c286339e068"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b]\n            (lazy-seq (cons b (fib b (+ a b)))))]\n    (take n (fib 0 1))))","user":"580bd81ee4b0849f6811b711"},{"problem":26,"code":"#(take %\n  (map first\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n  )\n)","user":"5b6e83e0e4b0c6492753e7d0"},{"problem":26,"code":"(fn fib [n] (if (= n 2) [1 1]\n                        (conj (fib (dec n)) (+ (last (fib (dec n))) (last (drop-last (fib (dec n))))))))","user":"5f4303cfe4b0955706451fb3"},{"code":"(fn [x] (take x \n  (map first \n    (iterate \n      (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f0404df535dcb61093f6b91"},{"code":"(fn f ([n] (f 0 1 n)) ([a b n] (if (= n 0) [] (cons b (f b (+ a b) (- n 1))))))","problem":26,"user":"5216933be4b000d124d989cf"},{"problem":26,"code":"(fn [x] (take x '(1 1 2 3 5 8 13 21)) )","user":"558ee1c9e4b0277789237659"},{"code":"(fn fib-seq [n]\r\n  (take n ((fn rfib [a b] \r\n       (cons a (lazy-seq (rfib b (+ a b)))))\r\n    1 1)))","problem":26,"user":"4e123905535d04ed9115e7ce"},{"code":"#(->>\n  [1 1]\n  (iterate (fn [[a b]] [b (+ a b)]))\n  (map first)\n  (take %))","problem":26,"user":"527236d4e4b03e8d9a4a741f"},{"code":"(fn [idx] (take idx (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5394162be4b0b51d73faaec5"},{"problem":26,"code":"(fn [c] (map second (take c (iterate (fn [[o t]] [t (+ o t)]) [0 1]))))","user":"588906a9e4b0f1effa3b772a"},{"problem":26,"code":"#(take % \n  ((fn fibo [x y] (lazy-seq (cons x (fibo y (+ x y))))) 1 1)\n)","user":"546e4ab8e4b00cfc9eacc19c"},{"code":"(fn fib [n]\n            (loop [ \n\t\t\t\t\tn' n\n\t\t\t\t\tprev-fib  1\n\t\t\t\t\tnext-fib  1\n\t\t\t\t\tacc-seq  [prev-fib next-fib]\n                  ]\n\t\t\t\t  \n\t\t\t\t  (if (<= n' 2)\n\t\t\t\t      \n\t\t\t\t\t   acc-seq\n\t\t\t\t\t   (recur (dec n') next-fib (+ prev-fib next-fib) (conj acc-seq (+ prev-fib next-fib)))\n\t\t\t\t  )\n\t\t\t\t\t   \n\t\t\t)\n\t\t\t\n)","problem":26,"user":"52fc9bc9e4b047fd5583701e"},{"problem":26,"code":"#(map (fn fib [n]\n       \t(if (< n 2)\n       \t  n\n       \t  (+ (fib (- n 2)) (fib (- n 1))))) (range 1 (inc %)))","user":"5d7aa22ee4b02e6b30c9354e"},{"problem":26,"code":"(fn f [p] (if (= p 0) '[0](if (= p 1) '[1] (conj (f (- p 1)) (+ (last (f (- p 1))) (last (f (- p 2)))) ) )))","user":"557bd432e4b05c286339e0bb"},{"problem":26,"code":"(fn fibonacci [x]\n     (if (= x 0)\n       []\n       (if (= x 1)\n         [1]\n         (if (= x 2)\n           [1 1]\n           (conj (fibonacci (dec x))\n                 (+ (last (fibonacci (dec x)))\n                    (last (butlast (fibonacci (dec x))))))))))","user":"5f23efc8e4b0f565ad99828f"},{"code":"(fn [n] \r\n  (take n\r\n        (map first \r\n             (iterate (fn [[f s]] [s (+ f s)]) \r\n                      [1 1])\r\n)\r\n)\r\n)","problem":26,"user":"4f91c9b2e4b0dcca54ed6ca2"},{"problem":26,"code":"#(loop [s [1 1] c 1 i %]\n       (if (= c (- i 1))\n         (reverse s)\n         (recur (cons (+ (second s) (first s)) s) (inc c) i)))","user":"56743413e4b05957ce8c612e"},{"problem":26,"code":"(fn fib [n]\n  (condp = n\n    0 []\n    1 [1]\n\t2 [1 1]\n\t(let [prev (fib (dec n))]\n\t  (conj prev (+ (last (butlast prev))\n\t                (last prev))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":26,"code":"(fn [x]\n  (loop [fib []\n         n 0]\n    (cond\n     (= n x)\tfib\n     (< n 2)\t(recur (conj fib 1)\n                     (inc n))\n     :else\t\t(recur (conj fib (+ (nth fib (- n 1))\n                           \t\t    (nth fib (- n 2))))\n                     (inc n)))))","user":"5af1e1b1e4b0cc2b61a3bc67"},{"code":"(fn [n]\n  (loop [i 0\n         j 1\n         k 0\n         coll '()]\n    (if (= n k)\n      (reverse coll)\n      (recur j (+ i j) (inc k) (conj coll j)))))","problem":26,"user":"50f0ec9ce4b0d527ce5b30df"},{"code":"#(loop [dalist '(1 1)\n         remaining (- % 2)\n         finale (first dalist)\n         penultimate (first (rest dalist))]\n    (if (< remaining 1)\n    (reverse dalist)\n    (recur (cons (+ finale penultimate) dalist) \n           (dec remaining)\n           (+ finale penultimate)\n           finale)))","problem":26,"user":"4fecd35fe4b0681fd128dcab"},{"code":"#(map last (take %1 (iterate (fn [[curr next]] [next (+ curr next)]) [0 1])))","problem":26,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":26,"code":"(fn [dig] \n   (rest (take (+ 1 dig) (map first ( iterate ( fn [[a b]] [b ( + a b)]) [0 1])))))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":26,"code":"#(reduce (fn [a c]\n            (if (= c 1)\n              (conj a 1)\n              (conj a (+ (last a) (second (reverse a)))))) [1] (range 1 %1))","user":"5874d5ace4b01531a375ea5b"},{"problem":26,"code":"#(map last (take % (iterate (fn [[a b]] [(+ a b) a]) [1 1])))","user":"5714e82ae4b07c98581c3ac9"},{"problem":26,"code":"(fn [x]\n      (loop [ accum  [0 1]\n              i       1 ]\n         (if (= i x)\n            (rest accum)\n         (recur (conj accum\n                    (+  (last accum)\n                        (last (pop accum))))\n            (inc i)))))","user":"58e325f3e4b005f69f193ca7"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= 1 n) '(1)\n   (= 2 n) '(1 1)\n   :else (let[\n              l (fib (- n 1))\n              a (last l)\n              b (nth l (- n 3))\n              c (+ a b)\n          ]\n           (concat l (list c))\n           )\n  )\n)","user":"55aa5f73e4b0988bba2ad94b"},{"problem":26,"code":"(fn [n]\r\n    (loop [acc [1 1]\r\n           i   2]\r\n      (if (= i n)\r\n        acc\r\n        (recur (conj acc (+ (peek acc) (nth acc (- i 2))))\r\n                     (inc i)))))","user":"540459bfe4b0addc1aec6656"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n  )","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn f [prev next left]\n  (if (> left 0)\n    (cons prev (f next (+ prev next) (dec left))))) 1 1","problem":26,"user":"4db85c8e535d1e037afb218f"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib [a b] \n           (lazy-seq \n            (cons a (fib b (+ a b)))))\n                              1 1)))","user":"54058af3e4b0addc1aec6669"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         acc [0 1]]\n   (if (= i n)\n     (rest acc)\n     (recur (inc i) (conj acc (+ (nth acc i) (nth acc (dec i))))))))","user":"5619a4d0e4b053970a773afd"},{"problem":26,"code":"(fn [n]\n  (loop [fibmumbers [1 1]]\n    (if (< (count fibmumbers) n)\n      (recur (conj fibmumbers (apply + (take-last 2 fibmumbers))))\n      fibmumbers)))","user":"57ac7710e4b0b8559636fc88"},{"code":"(fn [n]\n  (let [next-fib-pair (fn [[a b]] [b (+ a b)])\n         fib-pairs (iterate next-fib-pair [1 1])\n         all-fibs (map first fib-pairs)]\n     (take n all-fibs)))","problem":26,"user":"50bd6033e4b0594b91591c66"},{"problem":26,"code":"(fn [n]\n    (if (or (= n 1) (= n 2))\n      1\n      (loop [xs [1 1] i (- n 2)]\n        (if (zero? i)\n          xs\n          (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2))))\n                 (dec i)\n                 )))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn fib [n] (if (= n 2) '(1 1)\n                    (let [f1 (fib (- n 1))]\n                      (concat f1 (list (+ (last f1) (second (reverse f1))))))))","problem":26,"user":"51bf4560e4b013aa0d74b817"},{"problem":26,"code":";#(loop[g 1 s 0 fib nil]\n;    (if (= (count fib) %) (reverse fib)\n;     (recur (+ g s) g (cons g fib))))\n\n\n(fn f\n  ([n] (take n (f 1 1)))\n  ([a b] (cons a (lazy-seq (f b (+ a b))))))","user":"59c77511e4b0a024fb6ae545"},{"code":"(fn [n]\n  (take n ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","problem":26,"user":"52382dd6e4b0fae3832e99f1"},{"problem":26,"code":"(fn fib-seq [x] \n  (take x ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) \n         1 1)))","user":"58934052e4b00487982d523a"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ a b)))))\n     1 1)))","user":"53e2381ce4b036ad0777e3ee"},{"problem":26,"code":"(fn \n  [x]\n  (loop [counter x\n         a 0\n         b 1\n         acc []]\n    (if (= counter 0)\n      acc\n      (recur (dec counter) b (+ a b) (conj acc b))\n      )))","user":"5854580ce4b07779d46863f9"},{"code":"(fn [y] (\n  (fn [x l] \n    (let [c (count l)\n          e1 (l (- c 1)) e2 (l (- c 2))\n          ]\n    (if (= x 0) \n      l \n      (recur (dec x) (conj l (+ e1 e2)))))\n  ) \n  (- y 2) '[1 1]) )","problem":26,"user":"4dad86e0c9a9d6ed0f99dc57"},{"problem":26,"code":"(fn [x]\n   (letfn [(fib [x y]\n             (cons x (lazy-seq (fib y (+ x y)))))]\n   (take x (fib 1 1))))","user":"540e17c3e4b0addc1aec6719"},{"code":"#(loop [fib-nums [1 1]]\n    (if (>= (count fib-nums) %)\n      (subvec fib-nums 0 %)\n      (let [[n1 n2] (reverse fib-nums)]\n        (recur (conj fib-nums (+ n1 n2))))))","problem":26,"user":"52d23a39e4b099d49816f0a6"},{"problem":26,"code":"(fn [b] (((fn [a]\n  (partial nth\n           (iterate\n            #(conj % (reduce + (take-last 2 %)))\n            [1])\n           (dec a)))\n          b)\n         )\n  )","user":"550340d9e4b086ebe8a79c6b"},{"problem":26,"code":"(fn [n] \n  (let [fibn (fn fibn [N] (cond (= N 1) 1\n                                (= N 2) 1\n                                :else (+ (fibn (- N 1))\n                                         (fibn (- N 2)))))]\n    (map fibn (range 1 (+ n 1)))))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":26,"code":"(fn get-fib \n  ([n] (take n (get-fib 0 1)))\n  ([a b] (lazy-seq (cons b (get-fib b (+ a b))))))","user":"524a7c1ae4b05ef8e38e64ac"},{"problem":26,"code":"(fn [n]\n  (loop [i n, fibo '()]\n    (if (zero? i)\n      fibo\n      (if (= i n)\n        (recur (dec i) (concat fibo (list 1)))\n        (if (= i (- n 1))\n          (recur (dec i) (concat fibo (list 1)))\n          (recur (dec i) (concat fibo (list (reduce + (take-last 2 fibo))))))))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":26,"code":"(fn [x]\n    (loop [n x prev2 0 prev1 1 acc []]\n      (if (<= n 0)\n        acc\n        (recur (dec n) prev1 (+ prev1 prev2) (conj acc prev1)))))","user":"58ca613de4b021aa9917edb7"},{"problem":26,"code":"#(take % \n       (lazy-seq\n        (loop[x1 1 x2 1 res [1]]\n          (if (= (count res) %) res\n            (recur x2 (+ x1 x2) (conj res x2))))))","user":"541619e8e4b01498b1a719f9"},{"problem":26,"code":"(fn fib [index] (\n                   (fn fibInternal [col index target]\n                     (let [newCol (conj col (+ (last col) (last (butlast col))))]\n                       (if (= (inc index) target)\n                         newCol\n                         (fibInternal newCol (inc index) target)\n                         )\n                       )) [1 1] 2 index\n\n                   )\n   )","user":"56153b39e4b05f002753dfc4"},{"code":"(fn [n] \n  (take n \n    ((fn f [c p] (lazy-seq (cons c (f (+ c p) c)))) 1 0)))","problem":26,"user":"4ec75077535d6d7199dd36e0"},{"code":"(fn [n] (loop [result [] prev1 1 prev2 1 acc 1]\n          (cond (= acc 1) (recur (conj result 1) prev1 prev2 (inc acc))\n                (= acc 2) (recur (conj result 1) prev1 prev2 (inc acc))\n                (= acc n) (conj result (+ prev1 prev2))\n                true (recur (conj result (+ prev1 prev2)) prev2 (+ prev1 prev2) (inc acc)))))","problem":26,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"#(reverse\n  (loop [n % fibs '()]\n    (if (= n 0)\n        fibs\n        (recur (dec n) (conj fibs (if (not-empty fibs) \n                                      (+ (first fibs) (or (second fibs) 0))\n                                      1))))))","problem":26,"user":"50310b8be4b05b7df5a0b84d"},{"code":"#(nth\n  (iterate\n    (fn [x] (->> x reverse (take 2) (apply +) (conj x)))\n    [1 1])\n  (- % 2)\n)","problem":26,"user":"50976c84e4b00ad8bab4e961"},{"problem":26,"code":"(fn fib [counts]\n  (loop [p1 1\n         p2 1\n         result [p1 p2]\n         counter (- counts 2)]\n    (if (= 0 counter)\n      result\n      (let [sum (+ p1 p2)]\n                (recur p2 sum (conj result sum) (dec counter))))))","user":"54ba8076e4b0ed20f4ff6eb5"},{"code":"(fn [n]\n   (take n ((fn rfib [a b]\n              (lazy-seq (cons a (rfib b (+ a b)))))\n            1 1)))","problem":26,"user":"4f301d02e4b0d6649770a072"},{"problem":26,"code":"(fn [i]\n  (let [fibSeq (fn fibSeq\n                    ([] (fibSeq 1 1))\n                    ([n1 n2] (cons n1 (cons n2 (lazy-seq (fibSeq (+ n1 n2) (+ n1 (* n2 2))))))))\n       i i] \n    (take i (fibSeq))))","user":"55c461d3e4b0e31453f64999"},{"code":"(fn fibonacci [n]\n   (case n\n     1 [1]\n     2 [1 1]\n     (let [previous (fibonacci (dec n))\n           previous-r (rseq previous)]\n       (conj previous (+ (first previous-r) (second previous-r))))))","problem":26,"user":"531c7f0de4b08068f379eda4"},{"problem":26,"code":"(fn [n] (#(if (< (count %3) n) (recur %2 (+ %1 %2) (conj %3 %1)) %3) 1 1 []))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":26,"code":"(fn [x]\n  (loop [n x\n         acc [1 1]]\n    (if (= 0 n)\n      (take x acc)\n      (recur (dec n) (conj acc (+ (second (reverse acc)) (last acc)))))))","user":"53f5666ee4b0db01ade6f9cf"},{"code":"(fn [n]\n  (loop [n n, a 0, b 1, xs []]\n    (if (zero? n)\n        xs\n        (recur (dec n) b (+ a b) (conj xs b)))))","problem":26,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"#(loop [n % [x y] '(1 1) acc ()]\n  (if (zero? n)\n    (reverse acc)\n    (recur \n        (dec n) \n        [y (+ x y)] \n        (cons x acc))))","problem":26,"user":"4f58de86e4b0a7574ea7185b"},{"problem":26,"code":"(fn [num] \n  (let \n    [fib (fn [xs] \n           (conj xs (reduce + (take 2 xs)\n                    )\n           )\n         )\n     ]\n    ((fn [xs n] (if (= n 0) (reverse xs) (recur (fib xs) (dec n)))) '(1 1) (- num 2))\n    ))","user":"56b35565e4b0982f16b37e16"},{"code":"(fn [n]\n  (loop [i 0, result []]\n    (if (>= i n) result\n      (if (< i 2) (recur (inc i) (conj result 1))\n        (recur (inc i) (conj result \n          (+ (nth result (- i 2))\n             (nth result (- i 1)))))))))","problem":26,"user":"4ea348ad535d7eef308072c4"},{"problem":26,"code":"(fn f [n] (if (< n 3) (vec (repeat 2 1)) (conj (f (dec n)) (+ (last (f (dec n))) (last (f (- n 2)))))))","user":"53fddd71e4b0de5c418485eb"},{"code":"(fn [n]\n  (let [fib (fn f [x]\n            (if (<= x 1)\n              1\n              (+ (f (- x 1)) (f (- x 2)))))]\n  (for [x (range n)] (fib x))))","problem":26,"user":"4e6a2e83535d8ccf87e9fea7"},{"problem":26,"code":"#(loop [a 1 b 1 c [1]] (\n                      if (>= (count c) %)\n                      c\n                      (recur b (+ a b) (conj c b))\n                      \n                      ))","user":"5e138826e4b099d064962ffd"},{"problem":26,"code":"(fn [x] (reverse (loop [counter 0 result '()] (if (= x counter) result (recur (inc counter) (conj result (if (> (count result) 1) (+ (first result) (nth result 1)) 1)))))))","user":"5d662fb5e4b0db5d338d15e1"},{"code":"(fn [x]\n  (loop [a 1 b 1 result '(1) n x]\n    (if (= n 1)\n      (reverse result)\n      (recur b (+ a b) (cons b result) (dec n)))))","problem":26,"user":"50b0cffae4b009df37c708c5"},{"problem":26,"code":"(fn [x]\n  ((fn [l a b cnt]\n     (if (= cnt x)\n       l\n       (recur (conj l b) b (+ a b) (+ cnt 1))))\n       [] 0 1 0))","user":"5d6a975be4b04d129b00f29b"},{"problem":26,"code":"(fn [n] (loop [n (- n 2) l '(1 1)] (if (= n 0) l (recur (- n 1) (concat l [(+ (last l) (last (drop-last l)))])))))","user":"58186016e4b0c0e9c07b83ad"},{"problem":26,"code":"(fn fibs [n]\n  (loop [result [1 1]]\n    (if (= (count result) n) \n      result\n      (recur \n       (conj result (+ (last result) (nth result (- (count result) 2))))))))","user":"56742817e4b05957ce8c612d"},{"problem":26,"code":"(fn [n]\n  (loop [fibonacci-sequence [1 1]\n         index n]\n    (if (<= index 2)\n      fibonacci-sequence\n      (recur\n       (conj fibonacci-sequence (+ (last fibonacci-sequence) (second (reverse fibonacci-sequence))))\n       (dec index)))))","user":"55b69e37e4b01b9910ae2999"},{"problem":26,"code":"(fn first-n-fibs\n  ([n]\n   (first-n-fibs n [1 1]))\n  ([n res]\n   (println \"n\" n \"res\" res)\n   (if (= n 2)\n     res\n   (first-n-fibs (dec n) (conj res (+ (last res) (last (butlast res))))))))","user":"5e00752fe4b0a607a9a45d24"},{"problem":26,"code":"#(take % (map (fn fib [n] (if (< n 2) n (+ (fib (- n 2)) (fib (- n 1))))) (range 1 10)))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn [n]\r\n  (loop [count 1 [a b & others :as result] [1 1]]\r\n    (if (> (+ count 2) n)\r\n      (reverse result)\r\n      (recur (+ count 1)\r\n             (cons (+ a b) result)))))","problem":26,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn fib [n]\n  (if (= 1 n)\n    '(1)\n    (let [prev (fib (dec n))]\n      (concat prev\n              (list (apply + (take-last 2 prev)))))))","problem":26,"user":"527fd663e4b0757a1b1713de"},{"problem":26,"code":"(fn [x]\n  (loop [lst [1 1]\n         num1 1\n         num2 1\n         counter 2]\n    (if (= counter x)\n      lst\n      (recur (conj lst (+ num1 num2)) num2 (+ num1 num2) (inc counter)))))","user":"589cb617e4b00487982d536a"},{"code":"(fn [n]\n  (map (fn fib [x]\n          (if (or (= x 0) (= x 1))\n              1\n              (+ (fib (- x 2))\n                 (fib (- x 1)))))\n       (range n)))","problem":26,"user":"4e444c11535dc968683fc4a9"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (< n 1) nil\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [acc (fib (dec n))] (conj acc (+ (last acc) (second (reverse acc)))))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":26,"code":"(fn [n] (map (fn fib [n] (if (< n 2) (if (= n 0) 0 1) (+ (fib (- n 2)) (fib (dec n)) ))) (range 1 (inc n))))","user":"5512967ee4b06e50f9beb1ae"},{"problem":26,"code":"(fn [n]\n  (loop [coll [1 1]\n         n-2 1\n         n-1 1]\n   (if (= n (count coll))\n     coll\n     (recur (into coll [(+ (last coll) (nth (reverse coll) 1))])\n            (nth (reverse coll) 1)\n            (last coll)))))","user":"5716cc16e4b07c98581c3b02"},{"problem":26,"code":"(fn fibs\n  ([n] (fibs n [1 1]) )\n  ([n result]\n   (let [a (last result) b (last (butlast result))]\n     (if (>= (count result) n)\n       result\n       (fibs n (conj result (+ a b)))))))","user":"606e0e95e4b069485764de1a"},{"problem":26,"code":"#(loop [r [1 1]]\n   (if (> % (count r))\n     (recur (conj r (+ (last r)\n                       (last (pop r)))))\n     r))","user":"539f4e9ee4b0ca733b974498"},{"code":"#(take %\n        (map first\n            (iterate\n              (fn [[a b]] [b (+ a b)])\n              [1 1])))","problem":26,"user":"50a2f901e4b029e8bace362a"},{"code":"(fn fibonacci* [n]\n  (rest (take (+ n 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4e4e5b91535dc968683fc4e5"},{"problem":26,"code":"#((fn f [c r] (if (= c 0) (reverse r) (f (- c 1) (conj r (+ (first r) (second r)))))) (- % 2) '(1 1))","user":"5f3567d6e4b0574c87022c44"},{"problem":26,"code":"(fn fibn\n  [num]\n  (map (fn fib\n         [n]\n         (if (or (= n 1)\n                 (= n 2))\n           1\n           (+ (fib (- n 1))\n              (fib (- n 2)))))\n       (range 1 (+ 1 num))))","user":"5ed6e0eee4b016b56eae05e4"},{"problem":26,"code":"(fn [n]\n  (let [nxt \n        (fn nx [f s]\n          (let [t\n                (+ f s)]\n            (lazy-seq (cons f (nx s t)))\n          )\n        )\n       ]\n    (take n (nxt 1 1))\n  )\n)","user":"555b672ce4b0deb715856e50"},{"problem":26,"code":"(fn fib\n  [n]\n  (letfn [(fib\n           ([] (fib 1 1))\n           ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n    (take n (fib))))","user":"4eb92051535dfed6da9c6d4c"},{"problem":26,"code":"(fn [n] (loop [res [1 1]] \n          (if (= (count res) n) \n            res \n            (recur (conj res \n                         (+ (last res) \n                            (last (butlast res))))))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn fib \n  [n] \n  (take n\n        ((fn nfib [a b]\n           (cons \n             a   \n             (lazy-seq (nfib b (+ a b)))\n             )   \n           ) 1 1)\n        )   \n  )","problem":26,"user":"5228f870e4b0186687e23a98"},{"code":"#(reduce (fn [col _] (conj col (+ (last col) (last (butlast col))))) [1 1] (range 2 %))","problem":26,"user":"4ecbafbf535df97575fdabde"},{"problem":26,"code":"(fn [n]\n  (let [fibs (fn fibs [a b] (lazy-seq (cons (+ a b) (fibs b (+ a b)))))]\n    (take n (lazy-cat [1 1] (fibs 1 1)))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"#(take % '(1 1 2 3 5 8 13 21))","problem":26,"user":"4df1e213535d08e6dec9fe20"},{"code":"(fn fib [x]\n  (let [fib2 (fn fib2 [a b n]\n    (if (zero? n)\n        '()\n        (cons (+ a b) (fib2 b (+ a b) (- n 1)))))]\n  (if (zero? x) '()\n      (cons 1 (fib2 0 1 (- x 1))))))","problem":26,"user":"4e342671535deb9a81d77f29"},{"problem":26,"code":"(fn [x] (reverse ((fn fib [y z] (if (> y 0) (fib (dec y) (conj z (+ (first z) (second z)))) z) ) (- x 2) '(1 1))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn [n]\n  (loop [cnt (- n 1) a 0 b 1 fib [1]]\n    (if (= cnt 0)\n      (apply list fib)\n      (recur (dec cnt) b (+ a b) (conj fib (+ a b))))))","problem":26,"user":"4f030cff535dcb61093f6a4d"},{"problem":26,"code":"(fn [n]\n\t(loop [sec [1 1]\n         a 1\n         b 1]\n    (if (= n (count sec))\n      sec\n      (recur (conj sec (+ a b)) b (+ a b)))))","user":"59826556e4b021a7a535fdfe"},{"problem":26,"code":"(fn Fib\n   [acc n]\n   (if (< 2 n)\n     (Fib (cons (+ (first acc) (second acc)) acc) (dec n))\n     (reverse acc))) [1 1]","user":"58a55694e4b01a0c0b23290b"},{"problem":26,"code":"(fn [n]\n    (take n\n          (letfn [(mjl-fib [x y] \n                    (cons x (lazy-seq (mjl-fib y (+ x y)))))]\n            (mjl-fib 1 1))))","user":"54468fd3e4b032a45b8693b2"},{"problem":26,"code":"(fn [n] (take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"55e0326ce4b050e68259b407"},{"problem":26,"code":"(fn [a]\n  (loop [x 1\n         y 1\n         result [x y]]\n    (if (= a (count result))\n      result\n      (recur y\n             (+ x y)\n             (conj result (+ x y))))))","user":"59df2b8ee4b01968742fed87"},{"problem":26,"code":"(fn [x] (take x (map first (iterate #(vector (+ (first %) (second %)) (first %)) [1 0]))))","user":"54e345a1e4b024c67c0cf7db"},{"code":"#(take % (map last(iterate (fn [[x y]] [y (+ x y)]) [ 0 1])))","problem":26,"user":"4f7d25b4e4b06e829148e1ba"},{"code":"(fn [n]\n  (let [fab (fn [x v]\n     (cond\n       (<= x 2)  v\n       :esle (recur (dec x) (cons (apply + (take 2 v)) v))    ))]\n\n    (into '()  (fab n '(1 1))  )      )     )","problem":26,"user":"4ef19836535dced4c769f217"},{"problem":26,"code":"(fn fb [x] (cond (= x 0) '() (= x 1) [1] (= x 2) [1 1] :else (let [js (fb (dec x))] (conj js (reduce + (take-last 2 js))))))","user":"5d6a9b96e4b04d129b00f29d"},{"problem":26,"code":"(fn fib\n    ([] (fib 1 1))\n    ([n] (take n (fib)))\n    ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn [i]\n  (take i '(1 1 2 3 5 8 13 21)))","problem":26,"user":"505a3706e4b021387fb89855"},{"code":"(fn fib [i]\n              (cond (< i 1) nil\n                    (= i 1) [1]\n                    (= i 2) [1 1]\n                    :else (let [r (fib (dec i))] (conj r (+ (get r (- i 3)) (get r (- i 2)))))))","problem":26,"user":"5063fe48e4b075d771da6f9e"},{"code":"#(loop [i 2\n        c [1 1]]\n   (if (= i %) \n     c\n     (recur (inc i) (conj c (+ (last (butlast c)) (last c))))) \n   )","problem":26,"user":"51fefe8ae4b0f1313d468a7d"},{"code":"(fn [m]\n  (let [fib (fn f [n]\n              (if (<= n 2) 1\n                (+ (f (dec n)) (f (dec (dec n))))))]\n    (for [i (range (inc m)) :when (> i 0)] (fib i))))","problem":26,"user":"4e88feef535d8b9bb0147ca8"},{"problem":26,"code":"(fn [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (loop [fs '(1 1)\n             rx x]\n        (if (<= rx 2)\n          (reverse fs)\n          (recur (conj fs (+ (first fs) (second fs))) (dec rx)))))))","user":"4fffa422e4b0678c553fc404"},{"code":"(fn fib [n] \n  (let [fibnum (fn fibnum [n] (if (> n 1) (+ (fibnum (- n 1)) (fibnum (- n 2))) 1))\n        fibseq (fn fibseq [n] (if (> n 0) (cons (fibnum n) (fibseq (- n 1))) '(1)))\n        ] (reverse (fibseq (- n 1)))))","problem":26,"user":"4fad20cfe4b081705acca235"},{"code":"(fn[in_n]\n    (loop [a 0 b 1 n in_n result '()]\n     (if (zero? n)\n        (reverse result)\n       (recur b (+ a b) (dec n) (cons b result)))))","problem":26,"user":"4ea85846535d7eef308072f9"},{"problem":26,"code":"(comp reverse (fn fib [n]\n                 (cond\n                   (= n 1) '(1)\n                   (= n 2) '(1 1)\n                   :else (cons (apply + (take 2 (fib (dec n)))) (fib (dec n))))))","user":"54b5b3cce4b05787c3b163ab"},{"code":"(fn [n] (map (fn fib [x]\n   (cond \n     (= 0 x) 1\n     (= 1 x) 1\n     :else (+ (fib (- x 1)) (fib (- x 2))))) (range n)))","problem":26,"user":"4e6ebd4a535d5021c1a89610"},{"problem":26,"code":"(fn fibo [n]\n\n\t(cond\n\t (= 1 n) '(1)\n\t (= 2 n) '(1 1)\n\t :else\n\t (sort (conj (fibo (dec n))\n\t\t     (+ (last (fibo (dec n)))\n\n\t\t\t(second (reverse( fibo (dec n))))\n\t\t\t)\n\n\t\t     ))\n\t  )\n)","user":"55a65872e4b09e57187da299"},{"code":"(fn [x]\n  (loop [acc [1] rem (dec x) a 1 b 0]\n    (if (= 0 rem)\n      acc\n      (recur (conj acc (+ a b)) (dec rem) (+ a b) a))))","problem":26,"user":"50b11fbce4b009df37c708cb"},{"problem":26,"code":"(fn fib [n]\n  {:pre [(pos? n)]}\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n             (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"548018d1e4b0c51c1f4d7326"},{"code":"(fn fib-finder ([index] (fib-finder (dec (dec index)) 1 1))\r\n    ([index start more] (if (= -1 index)\r\n                         '(1)\r\n                         (if (and (= 0 index) (= 1 more))\r\n                             '(1 1)\r\n                             (when (> index 0)\r\n                                (if (= 1 more)\r\n                                    (concat [1 1] (fib-finder index 1 2))\r\n                                    (cons more (fib-finder (dec index) more (+ start more)))))))))","problem":26,"user":"4e9a3a03535dbda64a6f6b70"},{"code":"#(loop [nums [1 1]]\n    (let [size (count nums)\n          x (dec size)\n          x-1 (dec x)]\n    (if (= size %1)\n      nums\n      (recur (conj nums (+ (nums x) (nums x-1)))))))","problem":26,"user":"4ebb20c0535dfed6da9c6d6f"},{"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e6a6b83535d8ccf87e9fee0"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-seq [] (lazy-cat [1 1] (map + (fib-seq) (rest (fib-seq))))))))","user":"5412d5d2e4b01498b1a719d9"},{"code":"#((fn [n pp p result]\n    (if (zero? n)\n      result\n      (recur (dec n) p (+ p pp) (conj result pp)))) % 1 1 [])","problem":26,"user":"50e88080e4b0ebbe794eb7ea"},{"problem":26,"code":"#(reduce (fn [l, i] (conj l (apply + (take-last 2 l)))) [1 1] (repeat (- % 2) \"\"))","user":"5873dd1ce4b01531a375ea42"},{"problem":26,"code":"#(loop [l '(1 0) i %]\n        (if (> i 1)\n            (recur\n                (conj l (+ (first l) (first (rest l))))\n                (dec i))\n            (reverse (butlast l))))","user":"5b083513e4b0cc2b61a3bdb4"},{"code":"#(take % (map first (iterate (fn [[x, y]] [y (+ x y)]) [1 1] )))","problem":26,"user":"4fc5eb7fe4b0ee37620e1803"},{"code":"(fn fib-seq\n  [n]\n    (let\n      [fib (fn fib [n]\n        (if (< n 3) 1\n            (+ (fib (- n 1)) (fib (- n 2)))))]\n      (if (= 0 n) []\n          (conj (fib-seq (- n 1)) (fib n)))))","problem":26,"user":"4e6ac7a8535d8ccf87e9ff03"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibs [a b] (cons a (lazy-seq (fibs b (+ a b)))))]\n    (take n (fibs 1 1))))","user":"5b7e2417e4b047b03b203755"},{"problem":26,"code":"(fn [n] \n  (rest (take (inc n) ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   0 1))))","user":"53c6a2fde4b00fb29b22129d"},{"problem":26,"code":";(fn [amount] \n;  (rest \n;   (reduce (fn [arr _] \n;             (conj arr (apply + (take-last 2 arr)))) \n;           [0 1] \n;           (repeat (dec amount) 1))))\n\n(fn [amount]\n   (last \n    (take (dec amount) (iterate (fn [arr] \n                            (conj arr (apply + (take-last 2 arr)))) \n                          [1 1]))))","user":"55dd7f72e4b050e68259b3c4"},{"problem":26,"code":"(fn [X] (loop [f 2 fibs '(1 1)]\n          (if (= X (count fibs))\n            fibs\n            (recur (+ f (last fibs)) (concat fibs [f]))\n            )\n          )\n  )","user":"56885c32e4b0dcc4269f4068"},{"code":"#(take % ((fn f [a b] (lazy-seq (cons b (f b (+ a b))))) 0 1))","problem":26,"user":"4e8612f8535db62dc21a62f2"},{"code":"(fn [x]\n  (loop [mylist [1]\n         curval 1\n         lastval 0\n         counter 1]\n    (let [newval (+ curval lastval)]\n      (if (= x counter)\n        mylist\n        (recur (conj mylist newval) newval curval (inc counter))))))","problem":26,"user":"51f82769e4b09be9c177e527"},{"problem":26,"code":"(fn [x] (reverse (nth (iterate (fn [l] (conj l (+ (first l) (second l)))) '(1 1)) (- x 2))))","user":"5550bcece4b00713264bd9ae"},{"problem":26,"code":"(fn fibo [x] (take x ((fn fib \n  ([]\n   (fib 1 1))\n  ([a b]\n   (lazy-seq (cons a (fib b (+ a b)))))))))","user":"581829cce4b0c0e9c07b83a9"},{"problem":26,"code":"(fn [n]\n  (loop [ result [1 1]\n          ind-previous 0\n          ind-current 1              \n        ]\n    (if (< ind-current (- n 1))\n      (recur (conj result \n        (+ (nth result ind-previous) (nth result ind-current)))\n        (inc ind-previous)\n        (inc ind-current)\n      )\n      (reverse (into '() result))\n    )\n  )\n)","user":"5d72ad8fe4b02e6b30c93512"},{"code":"#((fn fibs [xs]\n  (if (= (count xs) %)\n    xs\n    (fibs\n      (sort (conj\n        xs \n        (apply + (take-last 2 xs))))))) '(1 1))","problem":26,"user":"4fab1ea1e4b081705acca210"},{"problem":26,"code":"(fn [nn] (reverse (loop [col '(1 1) n (- nn 2)] (if (= n 0) col (recur (conj col (+ (first col) (second col))) (dec n))))))","user":"5cb39440e4b026601754b903"},{"problem":26,"code":"(fn take-fib [n]\n  (take n\n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a) ) )  ))\n          1 1) ))","user":"4e8385d8535db62dc21a62db"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n      [1]\n    (if (= n 2)\n        [1 1]\n      (loop [i 3 prev1 1 prev2 1 out [1 1]]\n            (if (<= i n)\n                (recur (inc i) (+ prev1 prev2) prev1 (conj out (+ prev1 prev2)))\n              (lazy-seq out)\n              )\n            )\n      )\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":26,"code":"#(loop [a 0 b 1 res [1]]\n   (if (< (count res) %)\n     (recur b (+ a b) (conj res (+ a b)))\n     res))","user":"5fa2a3afe4b0f0ebd91b77f1"},{"problem":26,"code":"(fn fibo ([x] (fibo x [1] 1)) \n  ([x y z] (if (= (count y) x) y\n               (fibo x (conj y z) (+ z (last y)))\n               )))","user":"599b457ae4b07157cc8dab1f"},{"problem":26,"code":"(fn fibo [x](take x ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"53b890e1e4b047364c0444df"},{"problem":26,"code":"(fn myfib [n]\n  (letfn [(fib [x y]\n            (cons x (lazy-seq (fib y (+ x y)))))]\n    (take n (fib 1 1))))","user":"547365d4e4b0c51c1f4d727d"},{"code":"(fn fib [n]\n  (letfn [(fibs [a b]\n            (cons a (lazy-seq (fibs b (+ a b)))))]\n    (take n (fibs 1 1))))","problem":26,"user":"50afdf00e4b0c3f5ed5c29a5"},{"code":"(fn fib [n]\n  (loop [counter n accu '(1) lastsum 1]\n    (if (= counter (count accu)) (reverse accu)\n      (recur counter (conj accu lastsum) (+ lastsum (first accu))))))","problem":26,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [n]\n            (take \n             n \n             (map first \n                  (iterate \n                   (fn [[a b]] [b (+ a b)])\n                   [1 1]))))","problem":26,"user":"51e38568e4b0c611d6113e43"},{"problem":26,"code":"(fn [n]\n      (reduce (fn [acc item]\n                        (conj acc ((fn fib [x]\n                                     (if (<= x 2)\n                                       1\n                                       (+ (fib (- x 1)) (fib (- x 2))))) item))) [] (range 1 (inc n))))","user":"5fcf86c2e4b07e53c2f3f00d"},{"code":"(fn n-fibonacci \n  ([n] (n-fibonacci n [1 1]))\n  ([n coll]\n     (if (> n (count coll))\n       (n-fibonacci n (conj coll (reduce + (take-last 2 coll))))\n       coll)))","problem":26,"user":"5328b1ece4b09d4e7a9b5508"},{"problem":26,"code":"(fn fib_to_n [n]\n  (if (< n 1) [] (conj (fib_to_n (- n 1)) (\n                                          (fn fib_nth [x]\n                                            (if (< x 3) 1 (+ (fib_nth (- x 1)) (fib_nth (- x 2))))) \n                                          n))))","user":"5e33e399e4b0650de70e2b11"},{"code":"(fn fib\n           ([n] (fib [1 1] n))\n           ([coll n]\n            (if (= (count coll) n)\n                coll\n              (fib (conj coll (+ (last coll) (nth coll (- (count coll) 2)))) n))))","problem":26,"user":"503be880e4b0fc0f99c2e54a"},{"code":"(fn [n]\n  (loop [i 2 j 1 acc [1 1]]\n    (if (= n i)\n      acc\n      (recur (inc i) \n             (last acc) \n             (conj acc (+ (last acc) j)\n             )\n      )\n    )\n  )\n)","problem":26,"user":"50e3cf55e4b01912b3285c45"},{"problem":26,"code":"(fn rfib [a b n]\n  (if (= n 0)\n    ()\n    (lazy-seq (cons a (rfib b (+ a b) (- n 1)))))) 1 1","user":"55ed9108e4b0121d4835fddc"},{"problem":26,"code":"(fn [n]\n  (lazy-seq\n  (loop [i 2 fib [1 1]]\n    (if (= i n)\n      fib\n      (recur (inc i) (conj fib (+ (nth fib (dec i)) (nth fib (dec (dec i))))))))))","user":"574e8975e4b02ea114799244"},{"problem":26,"code":"(fn fib [n]\n  (loop [cur 1 prev 0 acc 0 res []]\n    (if (= acc n)\n      res\n      (recur (+ cur prev) cur (inc acc) (conj res cur)))))","user":"5590e55de4b0277789237676"},{"problem":26,"code":"#(loop [n %1 coll [] x 0 y 1]\n   (if (= 0 n)\n     coll\n     (recur (dec n) (conj coll y) y (+ x y) )\n     )\n   )","user":"54bb9730e4b0ed20f4ff6ebf"},{"code":"(fn fiblist [count]\n  (cond\n   (= 1 count) [1]\n   (= 2 count) [1 1]\n   :else (loop [c count a [1 1] idx 2]\n           (if (= idx c)\n             a\n             (recur c (conj a (+ (get a (dec idx))\n                                 (get a (- idx 2))))\n                    (inc idx))))))","problem":26,"user":"4e7ddcc2535db169f9c796f0"},{"code":"(fn [n]\n  ((fn [nn n1 n2 r]\n      (if (= 0 nn)\n        r\n        (recur (- nn 1) n2 (+ n1 n2) (conj r n1))))\n    n 1 1 []))","problem":26,"user":"504f2071e4b0e7ad84dbc4be"},{"problem":26,"code":"(fn \n  [n]\n  (let [all-fibonacci-sequences\n        (iterate\n         (fn [previous-fibonacci]\n           (if (= 1 (count previous-fibonacci))\n             [1 1]\n             (let [[last last-but-one] (rseq previous-fibonacci)]\n               (conj previous-fibonacci (+ last last-but-one))))\n           )\n         [1])]\n    (nth all-fibonacci-sequences (dec n))))","user":"551bdefde4b07993ea3788d7"},{"problem":26,"code":"#(take % (map first (rest (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5db6cc4ae4b010eb3c36cd3b"},{"problem":26,"code":"(fn [n] (loop [a 0 b 1 v []] (if (= (count v) n) v (recur b (+ a b) (conj v b)))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":26,"code":"(fn \n           [n]\n           (reverse (loop [result () i n u1 1 u0 0]\n              (cond \n               (= i 1) (cons u1 result)\n               :else  (let [result (cons u1 result)] \n                           (recur result (dec i) (+ u1 u0) u1)))))\n           )","user":"55edc088e4b0121d4835fde0"},{"code":"(fn fib [x]\n  (case x\n    1  [1]\n    2 [1 1]\n\t(let [y (reverse (fib (- x 1)))]\n    (reverse (cons (+ (first y) (second  y)) y)))))","problem":26,"user":"51f630cee4b06ff1c25c52bd"},{"problem":26,"code":"#(reduce(fn [acc x] (conj acc (+ (last acc) (second (reverse acc))))) \n         [1 1]\n         (range (- % 2)))","user":"60420ee4e4b04b4f332c3e71"},{"problem":26,"code":"(fn fib\n   ([n] (fib (dec n) 0 1 [1]))\n   ([n a b result] (if (pos? n)\n                     (recur (dec n) b (+ a b) (conj result (+ a b)))\n                     result)))","user":"5712854ce4b07c98581c3a89"},{"problem":26,"code":";#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n#_(loop [i 1\n         result '(1 1)]\n    (let [add (conj result (+ (peek result) (peek (pop result))))]\n      (if (< i (dec %))\n        (recur (inc i) add)\n        (reverse result))))\n\n;#(take % '(1 1 2 3 5 8 13 21))\n\n(fn fib \n  ([x] (take x (fib 1 1)))\n  ([a b] (lazy-seq (cons a (fib b (+ a b))))))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":26,"code":"(fn [n] (take n (lazy-seq (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))","user":"5f081f6de4b0cf489e8d7f5a"},{"code":"(fn [n]\n   (reverse (loop [a 0 \n          b 1 \n          n n \n          ret '()]\n     (cond \n      (zero? n) ret \n      :else (recur b (+ a b) (- n 1) (conj ret b))))))","problem":26,"user":"530c4903e4b02e82168697da"},{"code":"(fn fib-list [n]\n  (case n\n    1 [1]\n    (let [lower (-> n dec fib-list)]\n      (->>\n          lower\n          (take-last 2)\n          (apply +)\n          (conj lower)))))","problem":26,"user":"4ff6aea8e4b0678c553fc381"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b))))) 1 1))","user":"53bb512ce4b047364c044503"},{"code":"(fn [num]\n  (take num (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1]))))","problem":26,"user":"4ea03a3a535d7eef308072a0"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [1] (dec n)))\n  ([fibs n]\n   (if (= n 0)\n       fibs\n       (let [[n-2 n-1] (take-last 2 fibs)]\n         (fib (conj fibs (+ n-2 (or n-1 0))) (dec n))))))","user":"55395241e4b09218d5f44fe8"},{"code":"(fn fib\n  ([x] (cond (= 1 x) [1]\n             (= 2 x) [1 1]\n             :else (fib (- x 2) [1 1])))\n  ([x L] (cond (= 0 x) L\n               :else (fib (dec x) (conj L (+ (last L)(second (reverse L))))))))","problem":26,"user":"52153bdde4b0961f15ac4daa"},{"code":"(fn a [n]\n  (loop [fibs '(1 1)]\n    (if (= n (count fibs))\n      fibs\n      (recur (concat fibs (list (+ (last fibs) (nth fibs (dec (dec (count fibs)))))))))))","problem":26,"user":"4e7b6e49535db169f9c796b1"},{"problem":26,"code":"#(take %((fn f[](lazy-cat[1 1](map +(f)(next(f)))))))","user":"50e896a5e4b0ebbe794eb7eb"},{"code":"(fn[x]\n (loop [a 1 b 1 num 1 result []]\n    (if (= (- num 1) x)\n      (seq result)\n      (recur b (+ a b) (+ 1 num) (conj result a)))))","problem":26,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":26,"code":"(fn [n]\n  (loop [ret [1 1]]\n      (if (= (count ret) n)\n        ret\n        (recur (conj ret (+ (last ret) (last (butlast ret))))))))","user":"57089f82e4b0b0fb43fd06a2"},{"problem":26,"code":"(fn [x] (reverse (nth (iterate #(conj % (+ (first %) (second %))) '(1 1)) (- x 2))))","user":"5b77248ae4b047b03b2036e7"},{"code":"(fn fiblist [i] (map #((fn fib [n] (cond (= n 1) 1 (= n 2) 1 :else (+ (fib (- n 1)) (fib (- n 2))))) (inc %)) (range i)))","problem":26,"user":"5311cd03e4b08068f379ecef"},{"code":"(fn [n]\n  (loop [i 0 j 1 nn n acc '()]\n    (if (zero? nn) (reverse acc)\n      (recur j (+ i j) (dec nn) (conj acc j)))))","problem":26,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":26,"code":"#(reduce (fn [fibs num] (conj fibs (+ (last fibs) (second (reverse fibs))))) [1 1] (repeat (- % 2) 1))","user":"53da3fcde4b0e771c3025497"},{"code":"(fn [nn]\n  (map (fn [x] (loop [a 0 b 1 n -1]\n    (if (= n x) a (recur b (+ a b) (inc n)))))\n    (range 0 nn)))","problem":26,"user":"4eaf08ce535d7eef3080732d"},{"problem":26,"code":"(fn [n] \n  (loop [a 1 b 1 s '(1) c (- n 1)]\n    (if (= c 0)\n      s\n      (recur b (+ a b) (concat s [b]) (dec c)))))","user":"548a3dc6e4b0e286459a11f2"},{"code":"#(reverse ((fn [n]\n    (loop\n      [acc () f1 1 f2 1 c 0]\n      (if (= c n)\n          acc\n          (recur (cons f1 acc)\n                 f2\n                 (+ f1 f2)\n                 (+ 1 c))))) %))","problem":26,"user":"535f9604e4b04ce2eb3ed2dd"},{"code":"(fn f [n]\n  (if (= 1 n)\n    '[1]\n    (if (= 2 n)\n      '[1 1]\n      (let [previous (f (dec n))]\n        (conj previous (+ (last previous) (second (reverse previous))))))))","problem":26,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn fib [n]\n  (loop [i 1\n         j 1\n         k 1\n         r '(1)]\n    (cond\n      (< n 2) r\n      (< i n) (recur (inc i) \n                     k \n                     (+ j k) \n                     (conj r k))\n      true (reverse r))))","problem":26,"user":"4eb99b3d535dfed6da9c6d57"},{"code":"#(reduce \n  (fn [fib _] (conj fib (+ (last fib) (last (butlast fib)))))\n  [1 1] (range (- % 2)))","problem":26,"user":"4f12ab23535d64f603146429"},{"code":"(fn [n]\n    (loop [fibs [1 1]\n           x (- n 2)]\n      (if (= x 0)\n        fibs\n        (recur (conj fibs (+ (first (reverse fibs)) (second (reverse fibs)))) (dec x)))))","problem":26,"user":"4fe89297e4b07c9f6fd12c4c"},{"code":"(fn [n] \n  ((fn recr [lst]\n     (if (= n (count lst))\n       lst\n       (let [rev (reverse lst)]\n         (recr (conj lst (+ (first rev) (second rev))))))) [1 1]))","problem":26,"user":"5193db52e4b04df54c09802a"},{"problem":26,"code":"#(-> (loop [count (- % 2) result '(1 1 )] (if (zero? count) (reverse result) (recur (dec count) (cons (+ (first result) (second result)) result)))))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn\n  [x]\n  (take x (map first\n       (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"53737e6ce4b06d7f452d9e13"},{"problem":26,"code":"(fn\n\t[x]\n\t(seq\n\t(reduce \n\t\t(fn [p col]\n\t\t\t(conj p (+ (last p) (last (drop-last p))))\n\t\t\t)\n\t\t[1 1] (range 3 (inc x))))\n)","user":"51e8ee6be4b07cae92c04bfd"},{"code":"#(take %1 (map first\n               (iterate \n                        (fn [[a b]] [b (+ a b)])\n                [1 1])))","problem":26,"user":"5183f5d7e4b02826a645f393"},{"problem":26,"code":"(fn [n]\n  (if (= n 1) [1]\n    (if (= n 2) [1, 1]\n    (loop [n n, sequ [1, 1]]\n      (if (= (count sequ) n) sequ\n      (recur n (conj sequ (+ (last sequ) (first (take-last 2 sequ))))))))))","user":"5ffee617e4b074f607df6605"},{"problem":26,"code":"#(loop [i 1 coll [1]]\n  (if (>= i %)\n    coll\n    (recur\n      (inc i)\n        (conj coll (reduce + (take-last 2 coll))))))","user":"5d6691cee4b0db5d338d15e9"},{"problem":26,"code":"(fn [c]\n  ((fn fib [c s]\n  (if (nil? s)\n    (fib (- c 2) [1 1])\n    (if (> c 0)\n      (fib (- c 1) (conj s (+ (last s) (nth s (- (count s) 2)))))\n      (seq s)))) c nil))","user":"55d1f231e4b0e31453f64a4e"},{"code":"#(let [fib (fn fib [x y] (cons x (lazy-seq (fib y (+ x y)))))]\n\t(take % (fib 1 1)))","problem":26,"user":"52cfe059e4b07d0d72b273af"},{"code":"(fn [n]\n  (loop [fibber '()  a 1 b 0 index n]\n    (if (<= index 0 )\n        (reverse fibber)\n        (recur (cons a fibber) (+ a b) a (dec index))\n)))","problem":26,"user":"51b08df5e4b0c53cf2e68a67"},{"problem":26,"code":"(fn [x]\n  (cond\n   (= x 0) '()\n   (= x 1) '(1)\n   (= x 2) '(1 1)\n   :else (reverse ((fn f [fib n]\n                     (if (= n 0)\n                       fib\n                       (f (conj fib (+ (first fib) (second fib))) (- n 1))))\n                   '(1 1) (- x 2)))))","user":"5a74bf3ae4b0512ff01cdabd"},{"problem":26,"code":"(fn [x]\n    (cond (= x 1) '(1)\n          (= x 2) '(1 1)\n          :else (loop [x (- x 2) acc '(1 1)]\n                  (if (zero? x)\n                    (reverse acc)\n                    (recur (dec x) (conj acc (+ (first acc) (second acc))))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [n] \n  (->> [0 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map second)\n    (take n)))","problem":26,"user":"53489329e4b084c2834f4a5b"},{"code":";#(take % ((fn it[x y] \n;  (cons x (lazy-seq (it y (+ x y))))) 1 1))\n\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn [k] (reduce  \n    (fn [s n] (conj s (+ (last s) (first (take-last 2 s)))))\n    [1 1] (take (- k 2) (range))))","problem":26,"user":"4f084e44535dcb61093f6c34"},{"problem":26,"code":"(fn [n]\n    (last\n\t    (take (- n 1)\n\t      (iterate\n\t        #(concat % [(+ (last %) (last (butlast %)))])\n\t        '(1 1)\n\t      )\n\t    )\n    )\n  )","user":"53ef3adfe4b0742d9025b0c9"},{"problem":26,"code":"(fn [number-of-elements]\n  (loop\n    [index 3\n     result [1 1]]\n    (if (> index number-of-elements)\n      result\n      (recur\n        (inc index)\n        (conj result (reduce + (take-last 2 result)))))))","user":"581badbde4b04b46fc4b0ed9"},{"problem":26,"code":"; cheating, not valid solution\n; real solution https://clojuredocs.org/clojure.core/lazy-seq\n#(take % '(1 1 2 3 5 8 13 21))","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn [n] (loop [fib [1 1]] \n  (if (< (count fib) n)\n    (recur (conj fib (+ (last fib) (last (drop-last fib)))))\n    fib)))","problem":26,"user":"4e31c695535deb9a81d77f20"},{"problem":26,"code":"#(first\n  (reduce \n   (fn [[m l] _]\n     [(conj m (+ (m l) \n                 (m (dec l))))\n      (inc l)])\n   [[1 1] 1]\n   (range (- % 2))))","user":"5c9c79a6e4b048ec896c5ae8"},{"code":"#((fn [lens]\n  (loop [ans [], l lens]\n    (println (take-last 2 ans))\n    (if (> l 0)\n      (recur (conj ans (if-let [last-two (take-last 2 ans)]\n                         (apply + last-two)\n                         1))  (- l 1))\n      ans))) %)","problem":26,"user":"5322d364e4b09d4e7a9b54c6"},{"problem":26,"code":"(fn [n] (\n  (fn [n il xs] (\n             if (= il 0)\n             (recur n (inc il) (conj xs 1))\n             (if (= il 1)\n               (recur n (inc il) (conj xs 1))\n                    \t\t\t\t;take last and add with second to last\n               (if (< il n)\n                   (recur n (inc il) (conj xs (+  (last xs) (nth xs (- il 2))) ) )\n                   xs\n                   )\n              )\n    )) n 0 [])\n)","user":"59f85d78e4b0ca45a743a31a"},{"problem":26,"code":"#(take % ((fn rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1))","user":"573102bbe4b0cd1946bd0fbb"},{"problem":26,"code":"(fn \n  [n]\n  (loop [x1 1\n         x2 1\n         iter (- n 2)\n         curcoll '(1 1)]\n    \t(if (= iter 0)\n          (reverse curcoll)\n          (recur x2 (+ x1 x2) (dec iter) (conj curcoll (+ x1 x2)) )\n          \n          )\n   ))","user":"5fc5c303e4b02c825b0c8c1a"},{"code":"#(take % ((fn fib [x y] (cons x (lazy-seq (fib y (+ x y))))) 1 1))","problem":26,"user":"51bd1a0de4b0df1216cefd93"},{"problem":26,"code":"(fn [n] \n        (loop [cnt 2 out [1 1]]\n          (if (>= cnt n)\n            out\n            (recur (inc cnt) (conj out (+ (first (reverse out)) (second (reverse out)))))\n          )\n        )\n)","user":"59313dc1e4b072a2710fd00a"},{"problem":26,"code":"(fn fib [n] (loop [a 1 b 1 s [1]] (if (= (count s) n) s (recur b (+ a b)(conj s b)))))","user":"550fdc1de4b06e50f9beb17d"},{"problem":26,"code":"(fn [n]\n   (let [fib (fn fib [x] (if (<= x 2) 1 (+ (fib (- x 1)) (fib (- x 2)))))]\n     (->>\n       (range 1 (inc n))\n       (map fib)\n       )))","user":"57e10705e4b0bfb2137f5a6a"},{"code":"(fn [n]\n  (map #((fn fib [depth]                                                               \n   (if (< depth 2)                                                             \n      depth                                                                     \n      (+ (fib (- depth 1)) \n         (fib (- depth 2))))) %)\n(range 1 (inc n))))","problem":26,"user":"4f3a7e50e4b0e243712b1f0d"},{"problem":26,"code":"(fn [n] (reduce (fn [a b] (conj a (reduce + (take-last 2 a)))) [1 1] (range 2 n)))","user":"5a14a48fe4b0ff51aa4b31a1"},{"problem":26,"code":"(fn [n] (loop [i 1 a 1 b 1 result [1]] (if (< i n) (recur (inc i) b (+ a b) (conj result b)) result)))","user":"563dfc02e4b0da801c4e4662"},{"problem":26,"code":"#(loop [cnt (- % 2) fiblst '(1 1)]\n  (if (= cnt 0)\n    (reverse fiblst)\n    (recur \n       (dec cnt) \n       (conj fiblst \n             (+ (first fiblst) \n                (first (rest fiblst)) \n             )\n       )\n     )\n   )\n )","user":"5885e90de4b0f1effa3b76c5"},{"problem":26,"code":"(fn [x]\n  (loop [i '(1 1)]\n    (if (= (count i) x)\n      (reverse i)\n      (recur\n         (conj i (apply + (take 2 i)))))))","user":"59c76402e4b0a024fb6ae542"},{"code":"(fn [n]\n  (loop [i 1 n n f1 0 f2 1 acc [1]]\n    (if (= i n)\n      acc\n      (recur (inc i) n f2 (+ f1 f2) (conj acc (+ f1 f2))))))","problem":26,"user":"4fcb5d1fe4b0ee37620e1858"},{"problem":26,"code":"(fn [n]\n (reverse\n (loop [cnt (- n 2)\n        fib '(1 1)]\n   (if (zero? cnt)\n     fib\n     (recur (dec cnt) \n          (conj fib \n            (+ (first (rest fib))\n               (first fib)\n            )      \n          )\n     )\n   )\n ))\n)","user":"5c0d0537e4b0bdcf453d173d"},{"problem":26,"code":"(fn [n]\n    (loop [p 1 nm2 0 nm1 1 out []]\n        (cond\n            (> p n) out\n            (= 1 n) [1]\n            \"default\" (recur (inc p) nm1 (+ nm1 nm2) (conj out nm1)))))","user":"558306dfe4b05c286339e110"},{"problem":26,"code":"(fn [x]\n\n(take x\n\n((fn fib [a b]\n\n(cons a (lazy-seq (fib b (+ a b)))))\n\n1 1)))","user":"57a6552ce4b0a96607956208"},{"code":"(fn [n]\n  ((fn fib [count ls]\n    (if (= count 0)\n        ls\n        (fib (- count 1) (conj ls (+ (last ls)\n                                     (last (butlast ls)))))))\n   (- n 2) [1 1]))","problem":26,"user":"5097ea89e4b087ccf61a7af4"},{"code":"#(rest \n  (reverse \n    (loop [cnt (- % 1) acc '(1 0)] \n      (if (zero? cnt) \n        acc   \n        (recur (dec cnt) (cons (apply + (take 2 acc)) acc))))))","problem":26,"user":"4fec1d3be4b0681fd128dca0"},{"problem":26,"code":"(fn [n]\n  (loop [n n a 1 b 1 fibs []]\n    (if (zero? n)\n      fibs\n      (recur (dec n) b (+ a b) (conj fibs a)))))","user":"5aad2bd2e4b073f177442573"},{"code":";#(loop [n %\n;        result []]\n;    (if (= n 0)\n;      (reverse (into '() result))\n;      (let [lasttwo (or (take-last 2 result) '(1))\n;            nextfib (apply + lasttwo)]\n;        (recur (dec n) (conj result nextfib)))))\n\n(fn [num] \n  (loop [fibs [1]\n         n 1]\n    (if (= n num)\n       (reverse (into '() fibs))\n       (let [next-fib (apply + (take-last 2 fibs))]\n          (recur (conj fibs next-fib) (inc n))))))","problem":26,"user":"52810ceae4b0757a1b17141b"},{"problem":26,"code":"(fn [n] \n  (loop [s 2 a 1 b 1 res '(1 1)]\n    (if (= s n) \n      (reverse res)\n      (recur (+ s 1) b (+ a b) (conj res (+ a b))))))","user":"55f5b657e4b06e875b46ce8c"},{"code":"(fn [n]\n  (letfn [(fib [cur nex n xs]\n    (if (= n 0)\n        (reverse xs)\n        (recur nex (+ cur nex) (dec n) (conj xs nex))))]\n  (fib 0 1 n '())))","problem":26,"user":"4fef76ece4b0678c553fc319"},{"code":"(fn fib [max]\n  (cond\n   (= max 1) [1]\n   :else\n   (loop [n 2\n          res [1 1]]\n     (if (< n max)\n       (recur (inc n)\n              (conj res (+ (last res)\n                           (last (drop-last res)))))\n       res))))","problem":26,"user":"4fa3c137e4b081705acca193"},{"code":"(fn fib [n] \n  (reverse ((fn fibRev [k]\n              (if (= 2 k)\n                '(1 1)\n                (let [l (fibRev (- k 1))] (cons (+ (first l) (first (rest l))) l))\n                )\n    ) n))\n  )","problem":26,"user":"5349a39de4b084c2834f4a65"},{"code":"(fn fib\n ([num-elements] (fib num-elements [1 1]))\n ([num-elements fib-seq]\n  (if (= (count fib-seq) num-elements)\n    fib-seq\n    (let [new-element \n        (+ (last fib-seq) \n           ((comp second reverse)\n            fib-seq))]\n    (fib num-elements (conj fib-seq new-element))))))","problem":26,"user":"5269877de4b03e8d9a4a71f0"},{"code":"(fn fib [x]\n  ((fn fib-iter [a b fibs left]\n    (if (<= left 0)\n      fibs\n      (fib-iter b (+ a b) (conj fibs (+ a b)) (- left 1))))\n   0 1 [1] (- x 1)))","problem":26,"user":"4fe8e771e4b0547ebccb2431"},{"code":"(fn f[n]\n   (nth (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1]) (- n 2)))","problem":26,"user":"4facd2fae4b081705acca22f"},{"problem":26,"code":"(fn [integer] (take integer (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]) )))","user":"5d08dfe7e4b0cc9c91588210"},{"code":"(fn fib [n]\n   (if (<= n 2)\n     (vec (take n [1 1])) \n     (let [acc (fib (dec n))\n     a   (nth acc (- n 3))\n\t   b   (last acc)]\n       (print a b acc \"\\n\")\n       (conj acc (+ a b)))))","problem":26,"user":"4ecaaa25535d6d7199dd3708"},{"code":"#(loop [c % x 1 y 1 l [1]] (if (= 1 c) l (recur (dec c) y (+ x y) (conj l y))))","problem":26,"user":"5117c31ee4b0e0897831a60c"},{"problem":26,"code":"#(loop\n    [i 0\n     f0 0\n     f1 1\n     f []]\n       (if (= i %)\n         f\n         (recur (inc i) f1 (+ f0 f1) (conj f f1))))","user":"538d70abe4b0b51d73faae6e"},{"problem":26,"code":"(fn [n]\n    (loop [iteration 2 sentences [1 1]]\n        (if (= n iteration)\n            sentences\n        (recur (+ 1 iteration)  (conj sentences ( + (first (reverse sentences)) (second (reverse sentences)))))\n            )))","user":"5f3b54c0e4b004f08c61c53b"},{"problem":26,"code":"#(conj \n\t((fn fib [n p1 p2]\n            (if (= n 0) nil (conj (fib (- n 1) (+ p1 p2) p1) (+ p1 p2))))\n     (- % 1) 1 0\n     )\n\t1\n)","user":"53ba5475e4b047364c0444f4"},{"problem":26,"code":"(fn [x]\n  ( map (fn fib [n]\n          (cond\n           (= n 0) 1\n           (= n 1) 1\n           (> n 1) (+ (fib (- n 1))\n                      (fib (- n 2)))))\n        (range x)))","user":"5aa15ec0e4b0d174b936c848"},{"problem":26,"code":"(fn [n] (take n (flatten (iterate (fn [xs] (let [f1 (first xs) f2 (last xs)] (list (+ f1 f2) (+ f1 f2 f2) ))) '(1 1) ))))","user":"58110705e4b0f478707a05df"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib n [1 1]))\n  ([n x]\n   (if (< (count x) n)\n     (recur n (conj x (apply + (take-last 2 x))))\n     x)))","user":"5ddd134ae4b0948ae9d9adc0"},{"code":"#(loop [out [1 1]]\n  (if (>= (count out) %) out\n    (recur (conj out (apply + (take-last 2 out))))))","problem":26,"user":"51c7d82be4b07ef393169e47"},{"code":"#((fn fib [n xs] (if (not (zero? n)) (fib (dec n) (conj xs (+ (first (reverse xs)) (fnext (reverse xs))))) xs)) (- % 2) [1 1])","problem":26,"user":"4f035c39535dcb61093f6a90"},{"problem":26,"code":"#(map (fn fib \n        [n]\n        (cond \n             (zero? n) 0\n             (= n 1) 1\n             :else (+ (fib (- n 1)) (fib (- n 2)))\n         )\n        )\n   (range 1 (inc %))\n)","user":"5306bceee4b02e821686979b"},{"code":"(fn [n]\n  (loop [fib [] n n a 0 b 1]\n    (if (zero? n)\n      fib\n      (recur (conj fib b) (dec n) b (+ a b)))))","problem":26,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":26,"code":"(fn [in-x]\n  (letfn [(fib [x]\n            (if (< x 2)\n              1\n              (+ (fib (- x 2)) (fib (- x 1)))))]\n    (map fib (range in-x))))","user":"4dbd7107535d020aff1edf42"},{"problem":26,"code":"(fn [n]\n  (take n\n  \t(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n  )\n)","user":"54f0433ce4b024c67c0cf893"},{"problem":26,"code":"(fn fiblist \n  [n]\n  (loop [ls [1 1], l 1, ll 1 c 2]\n    (if (= c n)\n      (sort ls)\n      (recur (conj ls (+ l ll)) (+ l ll) l (inc c) ))))","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"#(loop [i 2 p 1 n 1 c '(1 1)] (if (< i %) (let [v (+ p n)] (recur (+ i 1) n v (concat c (list v)))) c))","problem":26,"user":"4e21d76a535d04ed9115e81a"},{"problem":26,"code":"(fn fib [x] (letfn [(fibo [a] (if (= a 2) 1 (if (= a 1) 1 (+ (fibo (- a 1)) (fibo (- a 2))))))] (map fibo (range 1 (+ x 1)))))","user":"53504a7de4b084c2834f4ad9"},{"problem":26,"code":"(fn fibonacci [n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","user":"545188ebe4b0e397800069b2"},{"problem":26,"code":";(fn [n]\n;   (loop [rez [1 1]]\n;     (if (= n (count rez))\n;       rez\n;       (recur (conj rez (+ (first (reverse rez)) (second (reverse rez)))))))\n\n; (defn fib      ;ukradeno sa clj docs za lazy-seq, ali nesto ne radi..\n;         ([]\n;          (fib 1 1))\n;         ([a b]\n;           (lazy-seq (cons a (fib b (+ a b))))))\n; (take 5 (fib))\n\n(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))) ;ukradeno sa clj docs za iterate, ali wooow :D","user":"597af3f7e4b02382a38ad1f0"},{"problem":26,"code":"#(loop [prev 0\n        cur 1\n        res [1]]\n   (if (= % (count res))\n     res\n     (recur cur (+ prev cur) (conj res (+ prev cur)))))","user":"542ce413e4b0dad94371f2ae"},{"problem":26,"code":"(fn fib [x]\n\t(if (= x 2)\n\t'(1 1)\n\t(concat (fib (dec x))\n\t\t(list\n\t\t\t(+ (last (fib (dec x)))\n\t\t\t(nth (fib (dec x)) (- x 3)))))))","user":"54651faee4b01be26fd746d6"},{"problem":26,"code":"(fn [input]\n  (loop [n 2 out [1 1]]\n    (if (= n input)\n      out\n      (recur (inc n) (conj out (reduce + (take-last 2 out)))))))","user":"5e71f267e4b085ba37836dc1"},{"code":"#(reverse (loop [n %, l '(1 1)]\n  (if (= 2 n)\n    l\n    (recur (dec n) (conj l (+ (first l) (first (rest l))))))))","problem":26,"user":"4ed1f84f535d44c135fd68d3"},{"code":"(fn [x] \n  (letfn [(seq0 [a b] (lazy-seq (cons a (seq0 b (+ a b)))))]\n    (take x (seq0 1 1))))","problem":26,"user":"4f173f8a535d64f603146453"},{"problem":26,"code":"(fn [n] (loop [n (- n 2) a [1 1]] (if (pos? n) (recur (dec n) (conj a (let [[a1 a2 & more] (reverse a)] (+ a1 a2)))) a)))","user":"5934a43ce4b072a2710fd07e"},{"problem":26,"code":"(fn fib [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5919d209e4b09b4ee5954bcc"},{"problem":26,"code":"(fn fibs [n]\n  (if (zero? n)\n    []\n    (if (= 1 n)\n      [1]\n      (loop [i 2 l [1 1]]\n      \t(if (= i n)\n          l\n          (recur (inc i) (conj l (+ (l (dec i)) (l (- i 2))))))))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn [n]\n  (take n ((fn fib\n    ([] (fib 1 1))\n    ([a b] (cons b (lazy-seq (fib (+ a b) a))))))))","problem":26,"user":"4fe8a39ee4b07c9f6fd12c60"},{"problem":26,"code":"(fn [n]\n  (->>\n   (iterate (fn [[x y]]\n              [y (+ x y)]) [1 1])\n   (take n)\n   (map first)))","user":"55afe57ae4b002ce9d5cbc1c"},{"code":"(fn  [totaltimes]\n  (do\n    (loop [x 1\n           y 1\n           times 0\n           fib []\n           ]\n      (if (< times totaltimes)\n        (recur y (+ x y) (+ 1 times) (conj fib x))\n        (apply list fib)))\n    ))","problem":26,"user":"532be2e1e4b09d4e7a9b553a"},{"problem":26,"code":"#(loop [a 1 b 0 n % r []] (if (<= n 0) r (recur (+ a b) a (dec n) (conj r a))))","user":"5b507222e4b02d533a91bce7"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))1 1)))","problem":26,"user":"51a49b21e4b0def3c5c58694"},{"code":"#(map (fn fib [n]\n  (if (<= n 2)\n    1\n    (+ (fib (- n 1)) (fib (- n 2)))))(range 1,(inc %)))","problem":26,"user":"510ee996e4b07438aa321462"},{"code":"#(take %\n'(1 1 2 3 5 8 13 21)\n)","problem":26,"user":"50a482c1e4b0344e360f3bb7"},{"code":"#(reverse (reduce (fn [acc item] (conj acc (+ (first acc) (first (rest acc)))) ) '(1 1) (range (- % 2)) ))","problem":26,"user":"516d7efde4b0fddc7b37210e"},{"code":"#(take %\n       (let [fib (fn fib [a b]\n                  (cons a (lazy-seq (fib b (+ b a)))))]\n         (fib 1 1)))","problem":26,"user":"52facb9de4b047fd55837002"},{"problem":26,"code":"(fn [i]\n    (loop [c 2 r [1 1]]\n      (if (= c i)\n        r\n        (recur (inc c) (conj r (+ (nth r (- c 1)) (nth r (- c 2)))))\n        )\n      )\n    )","user":"55c5261ee4b0e31453f649ae"},{"code":"#(take %1 (map first (rest (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"(fn [x] (take x (map second (iterate \n    (fn [[a b]] [b (+ a b)]) [0 1] ))))","problem":26,"user":"4ec79f99535d6d7199dd36e4"},{"problem":26,"code":"#(take % \n          (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5e85163be4b09a7a73c8bbd0"},{"problem":26,"code":"(fn\n  [x]\n  (loop [s []\n         i x]\n    (if (= i 0)\n      s\n      (do (if (or (empty? s) (= (count s) 1))                                                                                                                     (recur (conj s 1) (- i 1))\n            (recur (conj s (+ (last s) (nth s (- (count s) 2)))) (- i 1)))))))","user":"55a7e096e4b0988bba2ad934"},{"problem":26,"code":"(fn [y]\n  (map \n   (fn fib [x]\n    (cond\n     (= x 0) 1\n     (= x 1) 1\n     :else (+ (fib (- x 1)) (fib (- x 2)))\n    )\n   )\n   (range y)\n  )\n)","user":"59cc6c1ee4b0a024fb6ae5d2"},{"problem":26,"code":"(fn [n] \n          (letfn [(fibs [remaining l] \n            (let [len (count l)]\n              (if (zero? remaining)\n                l\n                (if (< len 2)\n                  (fibs (dec remaining) (conj l 1))\n                  (fibs (dec remaining) (conj l (+ (nth l (- len 2)) (last l))))))))]\n            (fibs n [])))","user":"540470dae4b0addc1aec6658"},{"code":"(fn [x]\n        (loop [n x fibo [1 1]]\n                (if (<= n 2)\n                        fibo\n                        (recur\n                                (dec n)\n                                (conj\n                                        fibo\n                                        (+\n                                                (second (reverse fibo))\n                                                (last fibo)\n                                        )\n                                )\n                        )\n                )\n        )\n)","problem":26,"user":"53512b55e4b084c2834f4ae0"},{"code":";; both as ugly and as inefficient as sin...\n;; I am not a proud man\n(fn my-fib [num]\n  (for [x (range 1 (+ num 1))]\n    ((fn fib\n      ([n]\n       (if (< n 3)\n         1\n         (+ (fib (- n 1)) (fib (- n 2)))))) x)))","problem":26,"user":"512da425e4b040332b905b34"},{"problem":26,"code":"(fn [x] (take x (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5a022949e4b01bb0ae8afd60"},{"code":"(fn fib-seq ([x] \t\t(rest (take (inc x) (fib-seq 0 1))))\n    \t\t\t\t\t([x y] \t(lazy-seq (cons x (fib-seq y (+ x y)))))\n    )","problem":26,"user":"5029f263e4b023940c84aa45"},{"problem":26,"code":"(fn fibo \n  ([x] (fibo x '(1 1)))\n  ([x f]\n   (if (= x (count f))\n     (reverse f)\n     (fibo x (conj f (+ (first f) (second f)))))))","user":"599b845ee4b010b4cc4bca09"},{"problem":26,"code":"(fn fibseq [n]\n  (if\n    (= n 0)\n    []\n    (conj\n     (fibseq (- n 1))\n     (\n       (fn fib [i]\n         (if\n           (= i 0)\n           0\n           (if\n             (= i 1)\n             1\n             (+ (fib (- i 1)) (fib (- i 2)))\n           )\n         )\n       )\n       n\n     )\n    )\n  )\n)","user":"563758e3e4b0bfe05bf117d5"},{"problem":26,"code":"(fn fib\n  ([x]\n   (fib (dec x) '(1)))\n  ([x coll]\n   (if (= x 0)\n     coll\n     (recur (dec x) (concat coll (list (reduce + (take-last 2 coll))))))))","user":"57c8208ce4b05aa3c4741d16"},{"problem":26,"code":"(fn [x]\n  (loop [prev 1 \n         twoprev 0\n         pos 0\n         results []]\n    (if(>= pos x)\n      results\n      (recur (+ prev twoprev) prev (inc pos) (conj results prev)))))","user":"53f50c03e4b0db01ade6f9ca"},{"code":"(fn [n]\n  (take n\n        (map first\n             (iterate #(let [[a b] %] [b (+ a b)]) [1 1])\n        )\n  )\n)","problem":26,"user":"52479487e4b05ef8e38e6373"},{"problem":26,"code":"#(loop [n %,\n        output []]\n   (if (= n 0)\n     output\n     (recur (dec n)\n            (let [[b, l] (take-last 2 output),\n                  bval (if (nil? b) 0 b),\n                  lval (if (nil? l) 0 l),\n                  nval (max 1 (+ bval lval))]\n              (conj output nval)))))","user":"56732c84e4b05957ce8c611c"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         fibs [1 1]]\n    (if (<= n 1)\n      (drop-last fibs)\n      (recur\n       (dec n)\n       (conj fibs (apply + (take-last 2 fibs)))))))","user":"555f3bfde4b0a2eb076a39c1"},{"code":"(fn fibo [n]\n  (take n ((fn rfib [a b] \n             (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","problem":26,"user":"50fc48dde4b0d10d794c19f6"},{"problem":26,"code":"#(take % ((fn fib [a b]\n  (cons a (lazy-seq (fib b (+ a b))))) 1 1))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn fib\n  ([n] (fib '(1) n 0 1))\n  ([xs n a b]\n   (if (= n 1) (reverse xs) (recur (conj xs (+ a b)) (- n 1) b (+ a b))))\n)","problem":26,"user":"5200054de4b023d2eb508ca7"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a) (last (butlast a))))) [1 1] (range (dec (dec %))))","user":"5d6d4463e4b04d129b00f2bd"},{"code":"(fn [x] \n  (reverse \n    (nth \n      (iterate \n        #(cons \n          (+ (first %) (second %)) %) '(1 1))\n    (- x 2))))","problem":26,"user":"4f944f60e4b0dcca54ed6cc2"},{"code":"(fn [x]\n  (if (= x 1)\n    [1]\n    (loop [this_x x, pval 1, tval 1, result [1 1]]\n      (let [tsum (+ pval tval)]\n        (if (= this_x 2)\n          result\n          (recur (dec this_x) tval tsum (conj result tsum)))))))","problem":26,"user":"4ec5cdb0535d6d7199dd36b8"},{"problem":26,"code":"(fn my-fib2\n([n] (my-fib2 (- n 2) [1 1]))\n([n output_list] \n(if (<= n 0)\noutput_list\n(my-fib2 (dec n) (conj output_list (+ (last output_list) ((comp second reverse) output_list))))\n))\n)","user":"5d64508de4b0c9e5857d5031"},{"problem":26,"code":"( fn fib [x]  (case x 1 [1] 2 [1 1] (conj (fib (dec x)) (apply + (take-last 2 (fib (dec x)))))) )","user":"56afb527e4b061e3ca319ad7"},{"problem":26,"code":"(fn [n] \n   (loop [sum [1 1], xn1 1, xn 1, x (- n 2)] \n     (if (pos? x) \n       (recur (conj sum (+ xn1 xn)) xn (+ xn1 xn) (dec x))   \n       sum)))","user":"5619b22ee4b053970a773afe"},{"problem":26,"code":";;#(take % (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1])))\n\n#(take % (loop [fibo [1 1]]\n           (if (> (count fibo) %)\n             fibo             \n             (recur (conj fibo (+ (last fibo) (second (rseq fibo))))))))","user":"56ff0ef3e4b08d47c97781ba"},{"code":"(fn\n  [num]\n  (map first\n    (take num\n      (iterate (fn [[x y]] [y (+ x y)]) [1 1])\n      )))","problem":26,"user":"536f9436e4b0fc7073fd6e82"},{"code":"(fn fibonacci \n  ([first next]\n      (lazy-seq (cons first (fibonacci next (+ first next))))\n  )\n  ([n]\n    (take n (fibonacci 1 1))\n  ))","problem":26,"user":"525d44bfe4b0cb4875a45d6d"},{"code":"(fn [n] ((fn [n a] (if (= n 0) (rest (rest (reverse a))) (recur (- n 1) (conj a (+ (first a) (first (rest a))))))) n '(0 1)))","problem":26,"user":"52b43468e4b0c58976d9ad1b"},{"code":"#(loop [p 1 pp 1 i %1 ac [1 1]]\r\n  (if (< i 3)\r\n    ac\r\n    (let [n (+ p pp)]\r\n      (recur pp n (dec i) (conj ac n)))))","problem":26,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn [n]\n  (take n \n    (rest\n    (map first \n      (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4ffb529be4b0678c553fc3cd"},{"problem":26,"code":"(fn fibs [n] \n  (case n \n    1 [1] \n    2 [1 1] \n    (let [\n          head (fibs (dec n)), \n          n1 (last head), \n          n2 (first (rest (reverse head)))\n         ] \n       (concat head [(+ n1 n2)]))))","user":"5465febde4b01be26fd746e1"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])) )","user":"5480ec9ee4b0e286459a1163"},{"problem":26,"code":"#(cond\n  (= % 1) [1]\n  (= % 2) [1 1]\n  :else\n    (loop [col [1 1]\n                n    %]\n      (if (< (count col) n)\n        (recur (conj col (apply + (take-last 2 col))) n)\n        col)))","user":"595c02a9e4b066ee0a44afeb"},{"code":"#(letfn\n  [(fib-seq\n    [a b]\n    (lazy-seq (cons a (fib-seq b (+ b a)))))]\n  (rest (take (inc %) (fib-seq 0 1))))","problem":26,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [n]\n  (let [fib-step (fn [[a b]]\n    [b (+ a b)])]\n  (take n (map first (iterate fib-step [1 1])))))","problem":26,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn [n]\r\n  (letfn [(fibs-from [x y]\r\n              (lazy-seq\r\n                (cons (+ x y) (fibs-from y (+ x y)))))]\r\n    (let [all-fibs (cons 1 (cons 1 (fibs-from 1 1)))]\r\n      (take n all-fibs))))","problem":26,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"#(loop [x % result []] (if (> x 0) (recur (dec x) (conj result (cond (< (count result) 2) 1 true (+ (last result) (first (drop 1 (reverse result))))))) result))","problem":26,"user":"4e975bce535dbda64a6f6b53"},{"problem":26,"code":"#(loop [s [1 1]\n        i 2]\n  (if (= i %)\n     s\n     (recur (conj s (+ (peek s)\n                       (-> s pop peek)))\n            (inc i))))","user":"542af3a2e4b0dad94371f285"},{"code":"(fn [x] (take x ((fn fib [a b]\n    (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4f1b1f31535d64f603146477"},{"problem":26,"code":"(fn [x] (loop [x  x\n               acc [1 1]]\n          (if (= x 2)\n            acc\n            (recur (dec x) (conj  acc (+ (last acc) (last(butlast acc))))            )\n          )\n                                        \n        )\n                                 \n)","user":"5650ac8be4b0284900eef6c2"},{"code":"(fn my-fibs [n]\n  (cond (= n 0) []\n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [s (my-fibs (- n 1))\n                    last-two (take-last 2 s)]\n                   (conj s (+ (first last-two) (second last-two))))))","problem":26,"user":"5310e7aee4b08068f379ecdc"},{"problem":26,"code":"#(map (fn fib [n] (if (= n 0) 0 (if (= n 1) 1 (+ (fib (- n 1)) (fib (- n 2)))))) (range 1 (inc %)))","user":"56ef0203e4b04a395b9a0457"},{"problem":26,"code":"(fn d\n   ([x] (d x '(1 1)))\n   ([x y]\n    (let [rev (reverse y)\n          a (first rev)\n          b (second rev)\n          c (+ a b)\n          n (reverse (conj  (reverse y) c))\n          ]\n      (if (> x 3)\n        (d (dec x) n)\n        n\n        )\n      )))","user":"5a43347ee4b0447ef91cc603"},{"code":"(fn fib-n [n] (let [cfib (fn cfib [n xs penult-el last-el] \n                           (if (= 0 n) xs (cfib (- n 1) (conj xs (+ penult-el last-el)) last-el (+ penult-el last-el))))]\n  (cond \n   (= 0 n) []\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   :else (cfib (- n 2) [1 1] 1 1))))","problem":26,"user":"519ca227e4b0a1d87b003460"},{"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)])[1 1])))","problem":26,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn [num]\n  (loop [result [1 1]\n         x 2]\n    (if (= x num)\n      result\n      (recur (conj result (apply + (take-last 2 result)))\n             (+ x 1)))))","problem":26,"user":"504ed350e4b069badc5a33d1"},{"problem":26,"code":"(fn [n]\n   (loop [a 0 b 1 it n res (list)]\n     (if (= 0 it)\n       (reverse res)\n       (recur b (+ a b) (- it 1) (cons b res)))))","user":"509fa9b5e4b08df8156e9e3f"},{"problem":26,"code":"(fn [t] (loop \n          [x 0 \n           g '()\n           ] \n          (if (= x t) \n            g \n            (recur \n             (+ x 1) \n             (cond \n              (= x 0) [1]\n              (= x 1) [1 1] \n              :else (conj g (+ (first (reverse g)) (second (reverse g))))\n              )))))","user":"56af842de4b061e3ca319ad2"},{"problem":26,"code":"(fn fib-seq\n   ([n] (take n (fib-seq 0 1)))\n   ([a b]\n    (cons b (lazy-seq (fib-seq b (+ a b))))))","user":"5b82eec6e4b047b03b2037a4"},{"code":"#(take % ((fn fibo [a b] (cons a (lazy-seq (fibo b (+ a b))))) 1 1))","problem":26,"user":"51ca15bfe4b09ce160bef5b8"},{"code":"(fn [n]\n  (letfn [(fibo\n            [current nextseq n lista]\n            (if (zero? n)\n              lista\n              (recur nextseq (+ nextseq current) (dec n) (conj lista current))))]\n    (fibo 1 1 n [])))","problem":26,"user":"50a991dce4b07e35d68b27b3"},{"problem":26,"code":"(fn fib-n [c]\n  (letfn [(fib [n]\n               (if (< n 3)\n                 1\n                 (+ (fib (- n 1)) (fib (- n 2)))))]\n    (if (= c 0)\n      []\n      (conj (fib-n (- c 1)) (fib c)))))","user":"503777a4e4b0af0658af77ac"},{"code":"(fn [n] \n  (map \n    (fn [x] \n      (let [sq5 (Math/sqrt 5)\n            phi (/ (+ 1 sq5) 2)] \n      (Math/round (/ (Math/pow phi x) sq5))))\n  (range 1 (inc n))))","problem":26,"user":"4ef5c847535dced4c769f249"},{"code":"(fn [n]\n  (take n \n    \t(map first (iterate (fn [[x y]] [(+ x y) x]) [1 0]))))","problem":26,"user":"5197f674e4b068aa333628f6"},{"problem":26,"code":"(fn [n]\n  (let [f (iterate (fn [[a b]] [b (+ a b)]) [0N 1N])]\n    (take n (map last f))))","user":"551747e0e4b06a49daca83c1"},{"problem":26,"code":"(fn [n] (map first (take n (iterate (fn [s] [(last s) (reduce + s)]) [1 1]))))","user":"577fa91ee4b0d36ec5835e6a"},{"problem":26,"code":"(fn [x] \n  (nth \n   (iterate \n     (fn [ls] \n       (conj\n         ls\n         (+ (last ls) (last (butlast ls) ) )\n       )\n     )\n    [1 1 2]\n    )\n  (- x 3)) \n)","user":"5cf11680e4b0aaa82f112a09"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (loop [cnt 2 acc [1, 1]]\n      (if (= cnt n)\n        acc\n        (let [len (count acc)\n              i0 (nth acc (- len 2))\n              i1 (nth acc (dec len))]  \n          (recur (inc cnt) (conj acc (+ i0 i1))))))))","user":"59c147afe4b0a024fb6ae481"},{"code":"(fn all-fibonacci [x] (take x (map first (iterate #(list (+ (first %) (second %)) (first %)) '(1 0)))))","problem":26,"user":"52f5f8b4e4b09b582c12c9cc"},{"code":"(fn revfib [num]\r\n  (reverse ((fn fib [n]\r\n              (condp = n\r\n                1 '(1)\r\n                2 '(1 1)\r\n                (let [fibprev (fib (- n 1))\r\n                      prev (first fibprev)\r\n                      prevprev (first (rest fibprev))]\r\n                  (conj fibprev (+ prev prevprev))))) num)))","problem":26,"user":"4dd023dd535d5973398f92ad"},{"problem":26,"code":"(fn [x]\n  (map first\n    (take x\n          (iterate\n              (fn [[a b]]\n                  [b (+ a b)])\n           [1 1]))))","user":"58092258e4b0a837a8b30d1b"},{"code":"(fn [n]\n   (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n     (take n (fib 1 1))))","problem":26,"user":"4f409e29e4b0e243712b1fb6"},{"problem":26,"code":"#(map (fn fib \n       [%]\n       (if (<= % 2) 1\n       (+ (fib (- % 1)) (fib (- % 2))))) (range 1 (+ % 1)))","user":"55e1fc42e4b050e68259b424"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [[left right]]\n                              [right (+ left right)])\n                            [1 1])))\n  )","user":"558e963ae4b0277789237653"},{"code":"#(take % \n       (map first\n            (iterate (fn [[a b]] [b (+ a b)])\n                     [1 1])))","problem":26,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":26,"code":"(fn [x]\n  (reverse\n   ((fn fib [l n]\n     (if (> n 2)\n       (fib (cons (+ (first l) (second l)) l) (- n 1))\n       l))\n   '(1 1) x)))","user":"57716e11e4b0979f896515b2"},{"problem":26,"code":";not working for x less then 3, I know but I dont care now :-)\n#(loop [x % fibonacci [1 1]]\n   (if (= x (count fibonacci)) fibonacci\n     (recur x (conj fibonacci (+ (last fibonacci) (second (reverse fibonacci)))))))","user":"5582dfb6e4b05c286339e10d"},{"problem":26,"code":"#(reverse (reduce (fn [x, y] (conj x (+ (first (rest x)) (first x)))) '(1 1) (repeat (- % 2) 1)))","user":"55673be4e4b0c656e3ff183c"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 0 b 1 results [1]]\n    (if (= (count results) n)\n      results\n      (recur b (+ a b) (conj results (+ a b)))\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [n] ((fn fib [n a b l] (if (= 0 n) l (fib (dec n) b (+ a b) (conj l a)))) n 1 1 []))","problem":26,"user":"4ebbffbd535dfed6da9c6d79"},{"problem":26,"code":"(fn [n]\n   (loop [result [1 1]]\n     (if (= n (count result))\n       result\n       (recur (conj result (+ (first (take-last 2 result)) (last result)))))))","user":"57958dace4b0e215f87e8484"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         result []]\n    (if (< i n)\n    \t(if (or (= i 0) (= i 1))\n          (recur (inc i) (conj result 1))\n          (recur (inc i) (conj result (+ (last result) (nth result (- i 2))))))\n      result)))","user":"55b1d0b5e4b0da326a65cf73"},{"code":"(fn fibonacci [n]\n  (let [fib-next (fn [[a b]] [b (+ a b)])\n        fib-pairs (fn [n]\n                    (loop [fib-pair [1 1] accum [] n n]\n                      (if (zero? n)\n                        accum\n                        (recur (fib-next fib-pair) (conj accum fib-pair) (dec n)))))]\n    (map first (fib-pairs n))))","problem":26,"user":"4f0ef874535d0136e6c22328"},{"problem":26,"code":"#(map (fn fibo [x] (if (>= x 2) (do (+ (fibo (- x 1)) (fibo (- x 2)))) x)) (range 1 (inc %)))","user":"604dc59ee4b0b7ec0ac60ac5"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n    (take n (fib 0 1))))","user":"573b664ce4b0cd1946bd10a7"},{"problem":26,"code":"(fn [x](map (fn fibo [n](cond\n              (= n 0) 0\n              (= n 1) 1\n              :else (+ (fibo (- n 1)) (fibo (- n 2)))))\n            (range 1 (+ 1 x))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn fib\n  ([num] (fib num [1 1]))\n  ([num v]\n    (if (= num 2)\n      v\n      (fib \n        (- num 1) \n        (conj v (reduce + (take-last 2 v)))))))","problem":26,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"#(if (= 1 %) [1]\n     (loop [v [1 1]\n            n (- % 2)]\n       (if (= n 0) v\n           (recur (conj v (+ (last v) (last (butlast v)))) (dec n)))))","problem":26,"user":"50015be1e4b0678c553fc41a"},{"code":"(fn\n  [count]\n  (loop [x 1 y 0 results [1] idx 1]\n    (if (= idx count)\n      results\n      (recur (+ x y) x (conj results (+ x y)) (inc idx)))))","problem":26,"user":"4eddc5f4535d10e5ff6f532c"},{"problem":26,"code":"#(let [arg %]\n   (reverse (loop [first 1\n        second 1\n        result '()]\n   (if (< (count result) arg) (recur second (+ first second) (conj result first)) result))))","user":"5c481764e4b0e06e1360a3ba"},{"problem":26,"code":"(fn [k] (let [fib (fn fib* [x y] (cons x (lazy-seq (fib* y (+ y x)))))] (take k (fib 1 1))))","user":"593e01cde4b069cdc2982bb3"},{"code":"(fn [x]\n  (reduce (fn [val next]\n            (conj val \n              (reduce + (take-last 2 val))))\n    [1 1]\n    (range (- x 2))))","problem":26,"user":"4f4175ffe4b0d7d3c9f3fce8"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b]\n             (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5cf9180fe4b0b71b1d808a8c"},{"problem":26,"code":"(fn [num]\n\n\n     (loop [fib [1 1]\n          cur 2]\n\n     ;    (println fib)\n     (if (= cur num)\n       fib   ; terminal condition\n       (recur\n         (conj  ; build sequence\n           fib\n            (+ ; add the previous two elements\n              (nth fib (dec cur))\n              (nth fib (dec (dec cur)))))\n         (inc cur))))\n     )","user":"53d10553e4b00fb29b22130f"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n                 (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"50f95755e4b0e7c80cb15a4b"},{"problem":26,"code":"#((fn [prev1 prev2 acc c] (cond (= 0 c) (reverse acc)\n                               (= 1 c) (cons 1 (reverse acc))\n                               :else (recur (+ prev1 prev2) prev1 (cons (+ prev1 prev2) acc) (- c 1))))\n 1 0 '() %)","user":"5bfa3e02e4b0bdcf453d15ca"},{"code":"#(take % \n     ((fn rfib [a b] \n        (lazy-seq (cons a (rfib b (+ a b)))))\n      1 1))","problem":26,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"#(loop [a 1 b 1 n % acc []]\n   (if (= n 0) acc (recur b (+ b a) (dec n) (conj acc a))\n     ))","problem":26,"user":"5127ca90e4b03a34742b42ff"},{"problem":26,"code":"(fn fibseq [n]\n  (let [lazy-fib\n    ((fn build-lazy-fib [a b]\n       (lazy-seq (cons a (build-lazy-fib b (+ a b))))\n      ) 0 1)\n     ]\n    (rest (take (+ 1 n) lazy-fib))\n   )\n  )","user":"600777a3e4b074f607df6667"},{"problem":26,"code":"#(loop [index 1 result [1 1]]\n      (if (= index (dec %))\n        result\n        (recur (inc index) (conj result (+ (nth result (- (count result) 2)) (last result))))))","user":"556a7626e4b09a3098a524e3"},{"code":"(fn [n]\n  (seq (loop\n    [i n, a 1, coll []]\n    (if (zero? i)\n      coll\n      (recur\n        (dec i)\n        ((fnil + 0 0) a (peek coll))\n        (conj coll a))))))","problem":26,"user":"4f7f9665e4b033992c121bea"},{"problem":26,"code":"(fn fib [n] (cond \n             (= n 1) [1]\n             (= n 2) [1 1]\n             :else (let [n1 (fib (- n 1))\n                         n2 (fib (- n 2))]\n                        (conj n1 (+ (last n1) (last n2))))))","user":"4f6de600e4b07046d9f4efd1"},{"code":"(fn f [n] (if (= n 2) [1 1] (let [s (f (dec n))]\r\n(conj s (+ (last s) (last (butlast s))))\r\n)))","problem":26,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":26,"code":"(fn [n](loop [fibs '(1 1)]\n      (if (>= (count fibs) n)\n          (reverse fibs)\n          (let [[fn1 fn2] fibs]\n               (recur (conj fibs (+ fn1 fn2)))))))","user":"56163cc1e4b06b1bb21829ff"},{"problem":26,"code":"(fn [x] (loop [nums [], a 0, b 1, count 1] (if (<= count x) (recur (conj nums b), b, (+ b a), (inc count)) nums)))","user":"559c4236e4b066d22e731f67"},{"problem":26,"code":"(fn [nums]\n  (take nums ((fn fibs [a b] (cons a (lazy-seq (fibs b (+ a b))))) 1 1)))","user":"5511b44be4b06e50f9beb197"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])) )","problem":26,"user":"50d8739ae4b01f0871336e68"},{"problem":26,"code":"#(map (fn foo [n]\n(case n\n0 1\n1 1\n  (+(foo (- n 1))  (foo (- n 2))\n)\n)\n) (range %))","user":"5f1aade6e4b091ba50b4dbe4"},{"problem":26,"code":"#(loop [count-left %\n                  result []]\n             (if (< count-left 1)\n               result\n               (recur (dec count-left) (let [last1 (or (last result) 1)\n                                             last2 (or (last (butlast result)) 0)]\n                                         (conj result (+ last1 last2))))))","user":"5bef3e88e4b0a6d31fed213f"},{"problem":26,"code":"#(take % (reduce concat (take % (iterate (fn [[a b]] [(+ a b) (+ b (+ a b))]) [1 1]))))","user":"5ac383b8e4b0e27600da7719"},{"code":"(fn [x]\n  (loop [fib-count 0 coll []]\n    (if (<= x fib-count)\n      coll\n      (if (< fib-count 2)\n        (recur (inc fib-count) (conj coll 1))\n        (recur (inc fib-count) (conj coll (+ (last coll) (last (butlast coll)))))\n    ))))","problem":26,"user":"52f32c24e4b05e3f0be25f0d"},{"problem":26,"code":"(fn [n]\n  (loop [x 0 y 1 fibs [] n n]\n    (if (zero? n)\n      fibs\n      (recur y (+ x y) (conj fibs y) (dec n)))))","user":"5616f411e4b06b1bb2182a0a"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    ((fn [subcoll] (concat subcoll [(+ (last subcoll) (nth subcoll (- (count subcoll) 2)))]))\n     (fib (- n 1)))))","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn \n  [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))\n  )","problem":26,"user":"513dfe2ce4b0825f97f7f966"},{"code":"(fn [numFibs] (loop [cnt 0 fibs '()] (if (<= numFibs 0) '() (if (= numFibs cnt) (reverse fibs) (if (= 0 cnt) (recur 1 '(1)) (if (= 1 cnt) (recur 2 '(1 1)) (recur (inc cnt) (conj fibs (+ (first fibs) (second fibs))))))))))","problem":26,"user":"50723bbae4b0e3170b5a868b"},{"problem":26,"code":"(fn [n]\n  (loop [fib [0 1] num 1]\n    (if (= n num) (rest (seq fib))\n      (let [last (last fib) next-last (nth (reverse fib) 1)]\n        (recur (conj fib (+ last next-last)) (inc num)))\n        )))","user":"5d25578de4b02ea6f0fb6a33"},{"code":"(fn fib [n]\n  (take n (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))\n;Starts with 0 and 1. The iterate function makes the next set of numbers to go through the function what the current y was and then what (x + y) is,\n;making the fibonacci sequence. This iterate pattern would go on indefinitely. It then takes the last part of each pair of x and y, then takes the first\n;n of those.","problem":26,"user":"53713ebee4b0fc7073fd6ead"},{"problem":26,"code":"#(reduce\n    (fn [v i]\n      (cond\n        (= 0 i) [1]\n        (= 1 i) [1 1]\n        :else (conj v (+ (last v) (last (butlast v))))))\n    [] (range %))","user":"5ddb8a6ee4b0948ae9d9adb2"},{"problem":26,"code":"(fn [max] (loop [x 1 current 1 previous 1  fibo-seq [1]] (if (= x max) fibo-seq (recur (inc x) (+ current previous) current (conj fibo-seq current)))))","user":"564a0698e4b0284900eef64b"},{"problem":26,"code":"#(take % (map first (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]) [1 1])))","user":"5540cc0ce4b0a04f79299505"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         acc '()]\n    (if (= i n)\n      (reverse acc)\n      (let [v1 (first acc)\n            v2 (second acc)]\n        (if (and v1 v2)\n          (recur (inc i) (conj acc (+ v1 v2)))\n          (recur (inc i) (conj acc 1)))))))","user":"5461c402e4b01be26fd746a6"},{"problem":26,"code":"(fn [count]\n  (loop [col (list 1 1) cnt count]\n    (if (= cnt 2)\n      (reverse col)\n      (recur (conj col (+ (first col) (second col))) (dec cnt)))))","user":"60bca877e4b0e0fa5f1b4287"},{"problem":26,"code":"(fn [n](\n        take n( reverse(\n                        (fn [n acc] (\n                    if (< n 1)\n                             acc\n                             (recur (- n 1) (conj acc (+ (first acc) (first (next acc)))))\n                    ))\n        (- n 2) '(1 1)\n                         ))\n))","user":"56ae4c21e4b03c432f18735c"},{"problem":26,"code":"(fn [s] (loop [r s coll '() fibo 1 previous 0] (if (= 0 r) (reverse coll) (recur (- r 1) (conj coll fibo) (+ fibo previous) fibo))))","user":"5292feb4e4b0239c8a67af39"},{"problem":26,"code":"(let\n  [\n   secondToLast (fn [x] (if (< (count x) 2) 0 (nth x (- (count x) 2))))\n   fibHelper\n     (fn x [n vecAcc]\n       (if (= 0 n)\n         vecAcc\n         (x\n          (- n 1)\n          (conj vecAcc (+ (secondToLast vecAcc) (or (last vecAcc) 1)))\n         )\n       )\n     )\n   fib (fn [n] (lazy-seq (fibHelper n [])))\n  ]\n  fib\n  )","user":"54ba8206e4b0ed20f4ff6eb6"},{"problem":26,"code":"(fn [count]\n   (loop [x (- count 2)\n          l [1 1]]\n     (if (zero? x)\n       l\n       (recur (dec x) (conj l (+ (peek l) (peek (pop l))))))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn [n]\n  (loop [a 1 b 1 k n c []]\n    (condp = k\n      0 c\n      1 (conj c a)\n      2 (conj c a b)\n      (recur b (+ a b) (- k 1) (conj c a)))))","problem":26,"user":"500933a6e4b046cdb195e074"},{"problem":26,"code":"#(loop [n % a 1 b 1 results []] (if (= n 0) results (recur (dec n) b (+ a b) (conj results a))))","user":"569ef93de4b0542e1f8d148b"},{"problem":26,"code":"#((fn [coll n]\n   (if (zero? n)\n     coll\n     (recur\n      (conj coll (+ (last coll)\n                    (nth coll (- (count coll) 2)))) (dec n)))) [1 1] (- % 2))","user":"5cec049ce4b0a17bb84e2bef"},{"code":"(fn fib \n  ([a b n]\n    (if (= 0 n)\n      '()\n      (conj\n        (fib b (+ a b) (dec n))\n        b)))\n  ([n] (fib 0 1 n)))","problem":26,"user":"4de165f3535d08e6dec9fde6"},{"problem":26,"code":"(fn fibonacci [x]\n  (let [init [1 1]]\n    (if (<= x (count init))\n      (subvec init 0 x)\n      (loop [series [1 1]\n             y 2]\n        (if (= y x)\n          series\n          (recur (conj series (+ (last series) (nth series (- (count series) 2)))) (inc y)))))))","user":"59301509e4b072a2710fcfd6"},{"problem":26,"code":"(fn [n] \n (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))\n)","user":"546d41bde4b00cfc9eacc18c"},{"problem":26,"code":"(fn fib [x] \n  (if (= x 2) \n    '(1 1) \n    (let [fib-1 (fib (- x 1))]\n      (concat fib-1 [(+ (last fib-1) (second (reverse fib-1)))])\n      )\n    )\n  )","user":"5ab1665de4b073f1774425c0"},{"problem":26,"code":"#(reverse ((fn fb [x] (if (= x 1) '(1) (if (= x 2) '(1 1) (let [prev (fb (dec x))] (conj prev (+ (first prev) (second prev))))))) %))","user":"5c7bc0a5e4b0fca0c1622865"},{"problem":26,"code":"(fn [x]\n  (take x\n  ((fn fib[a b ]\n    (cons a (lazy-seq(fib b (+ a b) ))))   \n     1 1 ) ))","user":"55b9ce15e4b01b9910ae29c1"},{"problem":26,"code":"(fn p26\n\t( [x] (p26 [1 1] x))\n\t( [s x] \n\t\t(loop [seq s num x]\n\t\t\t(if (< num 3) seq\n\t\t\t\t(recur (conj seq (reduce + (take-last 2 seq))) (- num 1))\n\n\t\t))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":26,"code":"(fn [X]\n  (take X\n        ((fn fib\n          [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","user":"5f3c2284e4b004f08c61c545"},{"problem":26,"code":"(fn [n]\n  (loop [p 2 col '(1 1)]\n    (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    (= n p) col\n    :else  (recur (inc p) (concat col \n                           (list (+ (last col) \n                                    (last (butlast col))\n)))))))","user":"5766fbb7e4b0a07e8fc180b6"},{"code":"(fn myfib [n]\n  (letfn [(myfibrecr [fseq n]\n                     (if (= n 0)\n                       fseq\n                       (myfibrecr (conj fseq (+ (last fseq) (nth fseq (- (count fseq) 2) 0))) (dec n))\n                       )\n                     )]\n    (myfibrecr [1] (dec n))\n    )\n  )","problem":26,"user":"537a620be4b06839e8705e5f"},{"problem":26,"code":"#(let[ fib1\n      (fn fib [a b]\n           (lazy-seq (cons a (fib b (+ b a))))  ) ]\n        (take % (fib1 1 1))\n        )","user":"57bffed6e4b05aa3c4741c89"},{"problem":26,"code":"(fn [fib-num]\n    (drop 1 (reduce\n      (fn [items i]\n        (let\n          [new-item (reduce + (take-last 2 items))]\n            (conj items new-item)))\n      [0 1]\n      (range (- fib-num 1)))))","user":"5f009162e4b0cf489e8d7f1a"},{"problem":26,"code":"(fn [n] \n  (take n \n        (map first \n             (iterate (fn [[x y]] [y (+ x y)]) [1 1])\n        )\n        \n        ))","user":"518ba795e4b0f028e99addf0"},{"problem":26,"code":"(fn [x] (take x (map first (iterate #(vector (second %1) (reduce + %1)) [1 1]))))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":26,"code":"#(loop [n %\n        a 1\n        b 1\n        acc []]\n  (if (<= n 0)\n    acc\n    (recur\n      (dec n)\n      b\n      (+ a b)\n      (conj acc a))))","user":"53a074a4e4b0ca733b9744af"},{"problem":26,"code":"(fn [n] (take n (cons 1 (letfn [(fibo-acc [a b] (lazy-seq (cons (+ a b) (fibo-acc b (+ a b)))))] (fibo-acc 0 1)))))","user":"57f9011ee4b0d3187e900935"},{"problem":26,"code":"(fn [n]\n  (loop [result []\n         a 1\n         b 1\n         remain n]\n    (if (= 0 remain)\n      (lazy-seq result)\n      (recur (conj result b)\n             (+ a b)\n             a\n             (- remain 1)))))","user":"5c272a4de4b07e362c2305ca"},{"problem":26,"code":"(fn fib-take [n]\n  (let [fibs (map first (iterate \n               (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take n fibs)))","user":"587fb546e4b0f1effa3b75f9"},{"problem":26,"code":"(fn [n]\n  (loop [x [1 1]] \n  (if (< (count x) n)\n  (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n   x)))","user":"4f03e60d535dcb61093f6b7a"},{"code":"#(loop [i 0 result (vector)]\n   (if (= i %)\n     result\n     (if (< i 2)\n       (recur (inc i) (conj result 1))\n       (recur (inc i) (conj result (apply + (take-last 2 result))))\n     )\n   )\n )","problem":26,"user":"518e7d3be4b051adb72789f0"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)) \n)","user":"5b8ec146e4b0c0b3ffbd49f0"},{"code":"(fn [n]\n  (seq\n   (loop [i 2\n          a 1\n          b 2\n          acc [1 1]]\n     (if (>= i n)\n       acc\n       (recur (inc i) b (+ a b) (conj acc b))))))","problem":26,"user":"4ee8b9c9535d93acb0a66884"},{"code":"#(map (fn !!![n] (if (< n 2)\n                       1\n                       (+ (!!! (- n 1)) (!!! (- n 2))))\n               ) \n             (range 0 %1))","problem":26,"user":"4f73f78de4b044e54cd9a8f3"},{"problem":26,"code":"#(rest (take (inc %1) (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"57bf2aace4b05aa3c4741c73"},{"code":"(fn [c] (take c '(1 1 2 3 5 8 13 21)))","problem":26,"user":"50956c2be4b087f34d351ab2"},{"problem":26,"code":"(fn [n] (loop [apn 0 pn 1 fib []] (if (< (count fib) n) (recur pn (+ apn pn) (conj fib pn)) fib)))","user":"52725fa4e4b03e8d9a4a742b"},{"code":"#(take % \n    (map first \n      (iterate \n        (fn [[l r]] [r (+ l r)]) \n        [1 1]\n      )\n    )\n  )","problem":26,"user":"4ec5fb83535d6d7199dd36bd"},{"problem":26,"code":"#(->> [1 1]\n         (iterate (fn [[a b]] [b (+ a b)]))\n         (take %)\n         (map first) \n\t)","user":"5595c60ee4b0c79f6e1db96f"},{"problem":26,"code":"#(map (fn fib [n] (if (> n 2)\n                     (+ (fib (- n 1)) (fib (- n 2)))\n                     1)) (range 1 (+ 1 %)))","user":"5cbe21eee4b0ccb06196274b"},{"problem":26,"code":"(fn fib [n] (if (= n 1) '(1) ((fn [seq] (concat seq (list (reduce + (take-last 2 seq))))) (fib (- n 1)))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":26,"code":"#(->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (take %)\n       (map first))","user":"5c435a9fe4b0e06e1360a367"},{"problem":26,"code":"(fn [n]\n    (letfn [(fib\n              ([] (fib 1 1))\n              ([f1 f2] (lazy-seq (cons f1 (fib f2 (+ f1 f2))))))]\n      (take n (fib))))","user":"5c165d3ee4b01240ff5671d1"},{"code":"#(take %1 ((fn f[a b] (cons a (lazy-seq (f b (+ a b))))) 1 1))","problem":26,"user":"504e96f0e4b069badc5a33ba"},{"code":"(fn [n] (take n (reverse\n  (loop [i 1 result '()]\n    (cond\n      (= 1 i) (recur 2 '(1))\n      (= 2 i) (recur 3 '(1 1))\n      (<= i n) (recur (inc i)\n                (conj result\n                  (+ (first result) (second result))))\n      :else result)))))","problem":26,"user":"4fd6f4d8e4b0dab7d829f37b"},{"problem":26,"code":"#(loop [ x [1 1]] \n    (if (< (count x) %) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x))","user":"5cda72ffe4b05ee0cb311714"},{"problem":26,"code":"(fn fib[n] (take n [1 1 2 3 5 8 13 21]))","user":"5546704be4b0a04f7929953d"},{"code":"(fn lfib [x]\n  (letfn [(fib [n]\n                (if (<= n 1)\n                  1 (+ (fib (dec n)) (fib (- n 2)))))]\n    (map (memoize fib) (range x))))","problem":26,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [y] (rest (reduce (fn [val x] (conj val (+ (last val) (last (butlast val))))) [0 1] (repeat (- y 1) 1))))","problem":26,"user":"4e80e0f2535db62dc21a62b8"},{"code":";; Not an exact solution. The first error occurs for n>=43\n(fn [n]\n  (rest\n    (map\n      (fn [x]\n        (Math/round\n          (* 0.44721359624646532237\n             (Math/pow 1.6180339887498948482 x)\n          )\n        )\n      )\n      (range (+ 1 n))\n    )\n  )\n)","problem":26,"user":"52ecb1efe4b0705949c44454"},{"problem":26,"code":"(fn [n]\n  (loop [i   2\n         acc '(1 1)]\n    (if (= i n)\n      (reverse acc)\n      (recur (inc i)\n             (conj acc (reduce + (take 2 acc)))))))","user":"552356fae4b0882d96d091af"},{"code":"(fn [x] (loop [a 2 result '(1 1)]\n   (cond\n     (< a x) (recur (+ a 1) (conj result (+ (first result) (first (rest result)))))\n     :e (reverse result)\n     )\n))","problem":26,"user":"4eea1a41535d93acb0a66899"},{"problem":26,"code":"(fn [n]\n  (map\n   (fn fib [n] \n     (if (<= n 1) \n       1 \n       (+ (fib (- n 1)) (fib (- n 2))))) \n   (range n)))","user":"5d629ed9e4b0c9e5857d501d"},{"problem":26,"code":"#(reverse\n(loop [count 0 curr 0 next 1 arr []]\n  (if (= count %) arr\n  (recur (inc count) next (+ next curr) (cons next arr) ))))","user":"5f0a4904e4b09a3f05b71805"},{"problem":26,"code":"(fn [n] (map (fn f [n]\n              (if (= n 0) 0\n                  (if (= n 1) 1\n                      (+ (f (- n 2)) (f (- n 1)))))) (range 1 (+ n 1))))","user":"577f635be4b0d36ec5835e64"},{"problem":26,"code":"( fn [y] (\n                      letfn [\n                             (fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2 ) ))))]\n                       (map fib (range 1 (+ 1 y)))))","user":"55a0e139e4b0acc240e31504"},{"code":"(fn [size]\n  ((fn fib [size aList]\n    (if (= size 0)\n        (reverse aList)\n        (fib (- size 1) (conj aList (+ (first aList) (second aList)))))) (- size 2) '(1 1)))","problem":26,"user":"4f1c2336535d64f60314647f"},{"problem":26,"code":"(fn [n]\n  (let [fn-fib\n        (fn fib\n          [n]\n          (if (<= n 2)\n            1\n            (+ (fib (- n 1))\n               (fib (- n 2)))))]\n    (take n (map fn-fib (range 1 (inc n))))))","user":"5593b10ce4b0c79f6e1db943"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fibo [a b] (cons a (lazy-seq (fibo b (+ a b))))) 1 1)))","user":"5191a763e4b0d428d29dc1b4"},{"code":"(fn [n] (last (take (dec n) (iterate #(conj % (reduce + (take 2 (reverse %)))) [1 1]))))","problem":26,"user":"50897033e4b037578f03c8b3"},{"code":"#(map (fn fibs [i] (cond (= i 1) 1\n                                    (= i 2) 1\n                                    true (+ (fibs (- i 2)) (fibs (dec i))))) (range 1 (inc %)))","problem":26,"user":"50e3ec87e4b0463d32072486"},{"problem":26,"code":"(fn fibseq [c & curr]\n  (if (= c 0)\n    curr\n    (flatten (fibseq (dec c) (conj curr ((fn fib[x]\n                                  (if (= 0 x)\n                                    0\n                                   (if (= 1 x) \n                                     1\n                                     (+ (fib (- x 1)) (fib (- x 2))) ))) c))))))","user":"55f6fafbe4b06e875b46cea1"},{"problem":26,"code":"#(loop [amount %\n        fibonacci [1 1]]\n   (if (< amount 3)\n     fibonacci\n     (recur (dec amount)(conj fibonacci (+ (last fibonacci)(second (reverse fibonacci)))))\n     )\n   )","user":"5915a0a5e4b09b4ee5954b73"},{"problem":26,"code":"(fn [n] ((fn [i a b res] (if (<= i 1) (seq (conj res a)) (recur (dec i) (+ a b) a (conj res a)))) n 1 0 []))","user":"543897e7e4b032a45b869314"},{"problem":26,"code":"(fn fib\n  ([n]\n   (take n (fib 0 1)))\n  ([a-2 a-1]\n   (cons a-1 (lazy-seq (fib a-1 (+ a-2 a-1))))))","user":"5e7291a2e4b085ba37836dca"},{"problem":26,"code":"(fn [n']\n  (let [f (memoize (fn fibb [n]\n                     (if (<= n 1)\n                       1\n                       (+ (fibb (- n 1)) (fibb (- n 2))))))]\n    (map f (range n'))))","user":"58c5a08be4b021aa9917ed40"},{"problem":26,"code":"#(take % ((fn f [] (lazy-cat '(1 1) (map + (f) (rest (f)))))))","user":"53dfdf01e4b0d874e779ae46"},{"code":"(fn fibs \n  ([n] (fibs n 1 1))\n  ([n a b]\n      (if \n        (= 0 n) nil\n        (cons a (fibs (- n 1) b (+ a b)))\n      )\n  )\n)","problem":26,"user":"4e283bae535deb9a81d77efb"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n      [1 1]\n      (let [prev (fib (- n 1))]\n        (concat prev [(apply + (take-last 2 prev))]))))","user":"56ec3a97e4b04a395b9a0433"},{"code":"(fn [n]\n  (take n ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) \n           1 1)))","problem":26,"user":"4eb1dd39535d7eef30807345"},{"problem":26,"code":"#(loop [i1 1,i2 1,r [1 1]] (if (< (count r) %) (recur i2 (+ i1 i2) (conj r (+ i1 i2))) r))","user":"555e9dbfe4b0a2eb076a39bc"},{"problem":26,"code":"(fn [x]\n  (loop [n 1\n         s []]\n    (cond\n      (> n x) s\n      (< n 3) (recur (inc n) (conj s 1))\n      true (recur (inc n) (conj s (apply + (take-last 2 s)))))))","user":"565f8fd2e4b068f2fe63dc41"},{"code":"(fn [n]\n  (map (fn fib [n]\n         (cond\n          (= n 0) 1\n          (= n 1) 1\n          :else (+ (fib (- n 1)) (fib (- n 2)) ) ))\n       (range n)))","problem":26,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [n]\r\n  ((fn  [l n]\r\n     (if (= n 2)\r\n       (reverse l)\r\n       (recur (cons (+ (first l) (second l)) l) (dec n))))\r\n   '(1 1) n))","problem":26,"user":"507437c2e4b054001656acd0"},{"problem":26,"code":"#(loop [starting-seq [1 1]\n        l starting-seq\n        x (- % 2)]\n   (if (= 0 x)\n    (reverse l)\n    (recur starting-seq (cons (+ (first l) (second l)) l) (dec x))))","user":"58248186e4b051871117bec6"},{"problem":26,"code":"(fn [x]\n    (cond (= x 1) '(1)\n          (= x 2) '(1 1)\n          :else (loop [a 1 b 1 i 3 f '(1 1)]\n                      (if (> i x)\n                          (reverse f)\n                          (recur b (+ a b) (inc i) (cons (+ a b) f))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [n]\n  (letfn [(helper [f1 f2]\n                  (let [f0 (+ f1 f2)]\n                  \t(lazy-seq (cons f0 (helper f0 f1)))))]\n    (take n (helper 0 1))))","problem":26,"user":"4ea03f70535d7eef308072a1"},{"problem":26,"code":"(fn fibo [numb]\n  (take numb '(1 1 2 3 5 8 13 21)))","user":"5761724de4b0994c1922fb89"},{"problem":26,"code":"#(map (fn fibonacci [n]\n  (let [x 1.6180339887 y -0.6180339887]\n    (Math/round (/ (- (Math/pow x n) (Math/pow y n)) (Math/sqrt 5))))) (range 1 (inc %)))","user":"5ac0dab7e4b073f177442746"},{"problem":26,"code":"(fn [n] (map first \n             (take n \n                   (iterate (fn [[a b]] \n                              [b (+ a b)]) [1 1]))))","user":"517e9526e4b09104ecebe7e2"},{"problem":26,"code":"(fn [x]\n(reverse ((fn [n, acc]\n  (if (= n 0) acc\n    (if (= (count acc) 0) (recur (dec n) '(1))\n      (if (= (count acc) 1) (recur (dec n) '(1 1))\n        (recur (dec n) (cons (+ (first acc) (second acc)) acc))\n        )\n      )\n    )\n  ) x [])))","user":"59a180b3e4b0871e7608b852"},{"problem":26,"code":";;base case is acc is 0\n;; when acc = return 1\n;; otherwise take return acc \n(fn [n]\n  (if (zero? n)\n    0\n \t(loop [cnt n l [1] acc 0]\n   \t\t(if (= 1 cnt)\n    \t(seq l)\n    \t(recur (dec cnt) (conj l (+ (last l) acc)) (last l))))))","user":"52ca7711e4b071a8d36bd3e3"},{"code":"(fn [x]\n  (reduce \n    (fn [acc _] \n      (let [[n-1 n] (take-last 2 acc)]\n        (if n\n          (conj acc (+ n-1 n))\n          (conj acc 1)))) [] (range x)))","problem":26,"user":"4e47f4f3535dc968683fc4bb"},{"problem":26,"code":"(fn [n]\n  (loop [prec1 1, prec2 0, res []]\n    (if(< (count res) n)\n      (recur (+ prec1 prec2) prec1 (conj res prec1))\n      res)))","user":"5a786223e4b013a48d39976b"},{"problem":26,"code":"(fn better\n   ([n]\n      (better n 0 0 []))\n   ([n a b xs]\n      (if (= n 0)\n        xs\n        (let [next-nbr (cond\n                        (= 0 a) 1\n                        (= 0 b) 1\n                        :else (+ a b))]\n          (better (dec n) b next-nbr (concat xs (list next-nbr)))))))","user":"504e0fdfe4b078edc5f593ae"},{"code":"(fn [n] \n  (if (< n 1)\n    '()\n    (if (= n 1)\n      '(1)\n      (loop [x 2 s '(1 1)]\n        (if (>= x n)\n          s\n          (recur (inc x) (conj (vec s) (+ (last s) (last(butlast s)))))\n        )\n      )\n    )\n  )\n)","problem":26,"user":"50982cc7e4b04e098a4c726c"},{"problem":26,"code":"(fn fib\n  ([maxi] (fib [1 1] maxi))\n  ( [acc maxi]\n    (if (= (count acc) maxi)\n      acc\n    (recur (conj acc (+ (peek acc) (peek (pop acc)))) maxi))))","user":"5e5096c6e4b027a2e10ac0c6"},{"code":"(fn [n]\n  (map first \n       (take n (iterate (fn [[i1 i2]]\n                          [i2 (+ i1 i2)]) [1 1]))))","problem":26,"user":"52e44a22e4b09f7907dd144e"},{"code":"#(take % ((fn f [a b] (cons a (lazy-seq (f b (+ a b)))))\n  1 1))","problem":26,"user":"52cd093fe4b07d0d72b27376"},{"code":"(fn [n] (take n (map (fn [x] (x 1))  (iterate (fn [[a b]] [(+ a b) a]) '[1 1]))))","problem":26,"user":"52bb27fee4b07a9af57922df"},{"problem":26,"code":"(fn [l]\n   (map (fn fib [n]\n          (if (or (= n 1) (= n 2))\n            1\n            (+ (fib (- n 1)) (fib (- n 2)))))\n       (range 1 (inc l))))","user":"59a39440e4b066c664927d40"},{"problem":26,"code":"(fn nth-fib [n]\n  (last (take (dec n) \n              (iterate (fn [coll] \n                         (let [last2 (drop (- (count coll) 2) coll) \n                               x (first last2)\n                               y (second last2)]\n                           (conj coll (+ x y)))) [1 1])\n              )\n        )\n  )","user":"5a388675e4b001c08efc0ca2"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 0\n         numbers []]\n    (if (>= i n)\n      numbers\n      (if (< i 2)\n        (recur (inc i) (conj numbers 1))\n        (let [last-num (first (reverse numbers))\n              second-last-num (second (reverse numbers))]\n          (recur (inc i) (conj numbers (+ last-num second-last-num))))))))","user":"5720a2b0e4b0c5bde472c099"},{"problem":26,"code":"(fn fib [n] (letfn [(fibn [n] \n        (cond \n          (< n 1) ()\n          (< n 2) (list 1)\n          (= n 2) (list 1 1)\n          true (let [x (fibn (dec n))] (cons (+ (first x) (first (rest x))) x)))) ]\n                    (reverse (fibn n))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":26,"code":"#(let [n (- % 2)]\n   (loop [fibs '(1 1)\n          n n]\n     (if (= n 0)\n       (reverse fibs)\n       (recur (conj fibs\n                    (+ (first fibs)\n                       (first (rest fibs))))\n              (dec n)))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":26,"code":"(fn [fibonacci-length]\n  (reduce\n   (fn [fibonacci-list _]\n     (conj fibonacci-list (reduce + (take-last 2 fibonacci-list)))\n     ) '[1 1] (repeat (- fibonacci-length 2) 0))\n)","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn [n]\n  (letfn [(fib-gen [a b]\n              (lazy-seq\n               (let [c (+ a b)]\n                 (cons c (fib-gen b c)))))]\n    (take n (concat [1 1] (fib-gen 1 1)))))","problem":26,"user":"50d93c53e4b0fd36a4b89223"},{"problem":26,"code":"(fn sm-fib [x] (if (= x 1)\n                 '(1)\n                 (if (= x 2)\n                   '(1 1)\n                   (concat \n                    \t   (sm-fib (dec x)) \n                    \n                           (list \n                            \t(+ (last (sm-fib (- x 1)) ) \n                                   (last (sm-fib (- x 2)) ) )\n                                ) \n                            )\n                    )\n                  )\n                )","user":"5575aae2e4b05c286339e065"},{"code":"#(rest (map first (take (+ % 1) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4ec1619b535dfed6da9c6dab"},{"code":"(fn [x]\n  (loop [result '(1 1)]\n    (if (= x (count result))\n      result\n      (recur (reverse (conj (reverse result) (reduce + (take 2 (reverse result)))))))))","problem":26,"user":"4f036894535dcb61093f6aad"},{"code":"(fn [n] (take n\n  ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)\n  )\n)","problem":26,"user":"524ac536e4b09eba1c0223a1"},{"problem":26,"code":"(fn fib [n]\n  (loop [n   n\n         i   1\n         i1  1\n         acc [1 1]]\n    (if (= n 2)\n      acc\n      (recur (dec n)\n             i1\n             (+ i i1)\n             (conj acc (+ i i1))))))","user":"5617a540e4b06b1bb2182a12"},{"problem":26,"code":"#(loop [amount %1 start 0 next 1 res []]\n  (if (<= amount 0)\n    res\n    (recur (dec amount) next (+ start next) (into res (list next)))))","user":"5cea925ce4b0a17bb84e2bd2"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 out-vec []]\n    (if (= i n)\n      out-vec\n      (recur (inc i)\n             (conj out-vec \n                   (if (or (zero? i) (= i 1))\n                     1\n                     (+ (out-vec (- i 1)) (out-vec (- i 2)))))))))","user":"5f15a50fe4b091ba50b4dbbc"},{"code":"(let [fibo (fn fib [n] (if (<= n 1) 1 (+ (fib (- n 1)) (fib (- n 2)))))]\n  #(map fibo (range %)))","problem":26,"user":"5328febee4b09d4e7a9b550d"},{"code":"#(map last (take % (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4e6ac593535d8ccf87e9ff02"},{"problem":26,"code":"#(take %\n       ((fn fib [a b] \n         (lazy-seq \n          (cons a (fib b (+ b a))))) 1 1))","user":"54bcd12be4b0ed20f4ff6ed7"},{"code":"#( apply list ( take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"515ebde3e4b01e5d11ccd0a8"},{"problem":26,"code":"#(loop [i 0 n % v []]\n    (if (< i n)\n      (do\n        ;(def first-prev (nth v (- i 1) 1))\n        ;(def second-prev (nth v (- i 2) 0))\n        ;(def new-value (+ first-prev second-prev))\n        (recur\n         (inc i)\n         n\n         (conj v (+ (nth v (- i 1) 1) (nth v (- i 2) 0)))))\n      v))","user":"5446ebc2e4b032a45b8693b8"},{"code":"#(take % \n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e16bdef535d04ed9115e7e9"},{"problem":26,"code":"(fn[n] (take n (map first (iterate (fn [[b a]] (vector a (+ b a))) [1 1]))))","user":"56aad332e4b03c432f187337"},{"problem":26,"code":"(fn[n] (take n (map first (iterate (fn[[a b]] [b (+ a b)]) [1 1]))))","user":"5580da74e4b05c286339e0f1"},{"code":"(fn [n] (reverse (nth (iterate\n  #(cons (reduce + (take 2 %)) %) '(1 1)) (- n 2))))","problem":26,"user":"4f38b7d9e4b0e243712b1ee0"},{"code":"(fn [x]\n  (loop [ cnt x a 0 b 1 l [] ]\n    (if (zero? cnt)\n      l\n      (recur (dec cnt) b (+ b a) (conj l b) )))\n  )","problem":26,"user":"504e90bae4b069badc5a33b8"},{"problem":26,"code":"#(take %(map last (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"57720e85e4b0979f896515c1"},{"code":"(fn fib[n]\n  (if (= n 1) '(1)\n    (if (= n 2) '(1 1)\n      (let [nxt (fib (- n 1))]\n        (concat nxt (list (+ (last nxt) (second (reverse nxt)))))\n      )\n    )\n  )\n)","problem":26,"user":"501b4af5e4b0ae3ec3946093"},{"code":"#(take % ((fn fib \n  ([n1 n2]\n    (let [current n2 next (+ n1 n2)]\n  (cons next (lazy-seq (fib current next)))))\n  ([]\n  (cons 1 (cons 1 (fib 1 1)))))))","problem":26,"user":"4f9174d0e4b0dcca54ed6c9b"},{"code":"#(letfn [(f [n1 n2 c]\n            (if (> c 0)\n              (cons n1 (f n2 (+ n1 n2) (dec c)))))]\n         (f 1 1 %))","problem":26,"user":"4fd54f80e4b0d4de60cee374"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib [a b]\n             (lazy-seq (cons a\n                             (fib b (+ a b)))))\n           1 1)))","user":"596f01a5e4b069c0a1a19870"},{"code":"(let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n  #(take % fibs))","problem":26,"user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn fib [n]\n  ((fn [s a b n]\n     (if (= 0 n)\n       s\n       (recur (conj s a) b (+ a b) (dec n)))) [] 1 1 n))","problem":26,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":26,"code":"(fn [num]\n  (map\n   (fn fib [n]\n     (if (> n 1)\n       (+ (fib (- n 1)) (fib (- n 2)))\n       1)\n     )\n   (range num)))","user":"5e0a6cf0e4b099d064962f66"},{"problem":26,"code":"#(take % ((fn f[a b] (cons b (lazy-seq (f b (+ a b))))) 0 1))","user":"5568a1bde4b0c656e3ff1857"},{"problem":26,"code":"(fn fib\n  [index]\n  (if (<= index 1)\n    [1]\n    (if (= index 2)\n      [1 1]\n      (let [arr (fib (dec index))]\n        (conj arr (reduce + (nthrest arr (- (count arr) 2))))))))","user":"5e9f3c2ce4b00a66d4a9517f"},{"code":"(fn[c](let [count c] \r\n  (loop [cnt (- count 2) vec [1 1]]\r\n\t   (if \r\n\t    (<= cnt 0)\r\n\t    vec \r\n\t    (recur\r\n\t     (dec cnt)\r\n\t     (conj vec (+ (last vec)(last(butlast vec)))))))))","problem":26,"user":"4e244ed5535d04ed9115e826"},{"code":"#(take % ((fn fib [n m] (cons n (lazy-seq (fib m (+ n m))))) 1 1))","problem":26,"user":"5268f5b4e4b03e8d9a4a71cf"},{"problem":26,"code":"#(take % ((fn fib-seq\n  ([]\n   (fib-seq 0 1))\n  ([a b]\n   (lazy-seq\n    (cons b (fib-seq b (+ a b))))))))","user":"5c1840eae4b01240ff5671eb"},{"problem":26,"code":"(fn [x]\n  (loop [li [1 1]\n         i 1\n         j 1]\n    (if (= (count li) x)\n      li\n      (recur (conj li (+ i j)) j (+ i j)))))","user":"53b22df6e4b047364c044497"},{"problem":26,"code":"(fn [count]\n  (loop [counter 0\n         first 1\n         second 1\n         result '[]]\n    (if (= count counter)\n      result\n      (let [sum (+ first second)]\n        (recur (inc counter)\n               second\n               sum\n               (conj result first))))))","user":"58ed0198e4b056aecfd47d72"},{"problem":26,"code":"#(take %1\n      ((fn fib' [a b]\n       (cons a (lazy-seq (fib' b (+ a b)))))\n    1 1))","user":"5433a07be4b0b6b47310fce0"},{"code":"#(take %\n  (concat [1 1]\n    ((fn f [i j ] (lazy-cat [(+ i j )] (f j (+ i j )))) 1 1)))","problem":26,"user":"4ec51590535d6d7199dd3683"},{"problem":26,"code":"(fn [x] (take x (( fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5953949be4b066ee0a44aeea"},{"code":"#(take %\n       ((fn foo [x y] \n          (cons y \n                (lazy-seq (foo y (+ x y)))))\n          0 1))","problem":26,"user":"51823a97e4b0f2adb733651e"},{"problem":26,"code":"(fn [n] (rest (last (take n (iterate (fn [x] (conj x (+ (first (reverse x)) (second (reverse x))))) [0 1])))))","user":"5de2f356e4b0948ae9d9adfb"},{"code":"#(map (fn fib [n]\n  (condp = n\n    0 1\n    1 1\n    (+ (fib (- n 1)) (fib (- n 2))))) (range 0 %))","problem":26,"user":"4fe83efbe4b07c9f6fd12c3b"},{"code":"(fn [n]\n  (loop [n n acc '[1] a 0 b 1]\n    (let [s (+ a b)] \n      (cond (< n 2) acc\n            :else (recur (dec n) (conj acc s) b s)))))","problem":26,"user":"5351980ce4b084c2834f4ae5"},{"code":"#(take % (map first \n       (iterate \n           (fn [[ a, b       ]]  \n                [ b, (+ a b) ]) \n           [1, 1])))","problem":26,"user":"4ff58b05e4b0678c553fc36b"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]] [b (+' a b)])\n                     [1 1])))","user":"56ae214ce4b03c432f18735a"},{"code":"#(take % ((fn f [x y] (cons x (lazy-seq (f y (+ x y))))) 1 1))","problem":26,"user":"50c11f5ae4b096f585049c39"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n  )  \n)","user":"560b8741e4b05f002753df1d"},{"code":"(fn [n]\n  (loop [coll '(1 1) left n]\n    (if (< left 3)\n      (reverse coll)\n      (recur (cons (+ (first coll) (second coll)) coll)\n             (dec left)))))","problem":26,"user":"4fdbc075e4b05e33b9224f61"},{"problem":26,"code":"(fn [s] \n  (loop [i (- s 2) t [1 1] a 1 b 1]\n    (if (= i 0)\n      t\n      (let [n (+ a b)] (recur (- i 1) (conj t n) b n))\n    )\n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":26,"code":"(fn [x]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take x)))","user":"60a39b80e4b00e9e6653c450"},{"code":"(fn [limit]\n  (take limit\n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fc13433e4b081705acca32b"},{"problem":26,"code":"(fn [n]\n  (->>\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    (map first)\n    (take n)))","user":"55aa7c5ce4b0988bba2ad94d"},{"code":"#(letfn [(myfib [n]\n                            (if (= n 1)\n                              1\n                              (if (= n 2)\n                                1\n                                (+ (myfib (dec n)) (myfib (- n 2)))\n                                )\n                              )\n                            )\n\n                     ]\n              (map myfib (range 1 (inc %)))\n\n              )","problem":26,"user":"526698c9e4b03e8d9a4a7144"},{"problem":26,"code":"(fn [n]\n  (loop [l [1 1]]\n    (let [length (count l)]\n      (cond\n       (<= n 2) (take n l)\n       (= n length) (seq l)\n       :else (recur (conj l (+ (nth l (- length 1)) (nth l (- length 2)))))))))","user":"5ac67b47e4b0e27600da776e"},{"problem":26,"code":"#(take % (( fn fib [ a b ] ( lazy-seq ( cons a ( fib b ( + a b ) ) ) ) ) 1 1))","user":"53bfd8c4e4b0c98a41f5cca8"},{"problem":26,"code":"(fn fib [cnt] (if (= 2 cnt) [1 1] (conj (vec (fib (dec cnt))) (apply + (take-last 2 (fib (dec cnt)))))))","user":"58e6e624e4b056aecfd47cc1"},{"problem":26,"code":"(fn [n]\n    (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"6026d2cae4b0d5df2af22232"},{"problem":26,"code":"(fn [num] \n    (\n        loop [amnt num seq [1 1]] \n        (\n            if (> amnt 0) \n            (\n                let [[a b] (take-last 2 seq)] (\n                recur (dec amnt) (conj seq (+ a b))\n                )\n            )\n            (take num seq)\n        )\n    )\n)","user":"5d40493ae4b05dd059a54364"},{"code":"(fn [n] \n    ((fn [x y n a]\n        (if (= n 1)\n            (reverse (cons x a))\n            (recur y (+ x y)\n              (- n 1) (cons x a))))\n    1 1 n []))","problem":26,"user":"4f404dcee4b0e243712b1fb0"},{"code":"#(take % ((fn f [a b] (lazy-cat [a] (f (+ a b) a))) 1 0))","problem":26,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":26,"code":"(fn[it] (take it (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"57fe2d6fe4b0d3187e9009c8"},{"problem":26,"code":"(fn fibseq [nnn]\n  (map (fn fib [n]\n     (cond\n       (= n 1) 1\n       (= n 2) 1\n       :else (+\n              (fib (- n 1))\n              (fib (- n 2)))))\n       (range 1 (+ nnn 1))))","user":"5bce439fe4b0e9689409ee17"},{"problem":26,"code":"(fn fib \n ([n] (fib n []))\n ([n xs] (if (<= n 0) xs (fib (dec n) (conj xs (+ (or (last xs) 1) (or (last (butlast xs)) 0))))))\n)","user":"5b7d03a0e4b047b03b20373d"},{"code":"#(if (= 2 %2) (reverse %1) (recur (conj %1 (+ (first %1) (second %1))) (- %2 1))) '(1 1)","problem":26,"user":"4fad041ee4b081705acca231"},{"code":"#(map (fn [x] \n    (case x \n    1 1\n    2 1\n    (loop [i 3 pre 1 cur 2]\n      (if (= x i) cur (recur (inc i) cur (+ pre cur)))))) (range 1 (inc %)))","problem":26,"user":"52990271e4b02ebb4ef7506d"},{"code":"(fn fibs [n]\n  (take n \n    (map first\n      (iterate (fn [a] (list (second a) (apply + a))) '(1 1)))))","problem":26,"user":"4ef41f26535dced4c769f230"},{"problem":26,"code":"#( loop [x 0\n         y 1\n         acc []]\n   (if (= (count acc) %)\n     acc\n    (recur y (+ x y) (conj acc y))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn fib [n]  \n  (cond \n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else \n   (let [fib-prev (fib (- n 1))] \n     (concat fib-prev [(reduce + (take 2 (reverse fib-prev)))])           \n   )\n  )\n)","problem":26,"user":"4fb710f4e4b081705acca2cd"},{"code":"(fn fibs [a] \n  (if (= a 2) [1 1] \n  (let [aa (- a 1)\n        l (fibs aa)]\n    (conj l (+ (nth l (- aa 1)) (nth l (- aa 2))))\n  )))","problem":26,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [acc i]\n            (concat acc (if (= i 0)\n                          '(1)\n                          (list (reduce + (take-last 2 acc)))\n                          ))\n            ) '() (range n))  \n  )","user":"55b28b57e4b01b9910ae296c"},{"problem":26,"code":"(fn fib\n  ([n]     (fib (- n 2) '(1 1)))\n  ([n lst] (if (= n 0)\n             lst\n             (fib (dec n) (concat lst (list (reduce + (take-last 2 lst))))))))","user":"53ddd44be4b0d874e779ae2e"},{"problem":26,"code":"#(take % ((fn fib [a b] \n  (cons a (lazy-seq (fib b (+ b a))))) 1 1))","user":"548cd637e4b0e286459a1210"},{"problem":26,"code":"(fn fib [n]\n  ((fn iter [c res]\n     (if (= c n)\n       (reverse res)\n       (let [next (if (< c 2) 1 (reduce + 0 (take 2 res)))]\n         (iter (inc c) (conj res next)))\n       )) 0 ()))","user":"5deab868e4b0986d99407fa1"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 acc '(1 1)]\n    \t(if (= i n) acc\n          (recur (inc i) (concat acc (list (reduce + (take-last 2 acc)))))\n    ))\n  )","user":"5996b419e4b07157cc8daab5"},{"code":"(fn [x]\n  (loop [n 1 x x lst '(1)]\n    (if (>= n x) (reverse lst)\n      (recur (inc n) x (conj lst (+ (first lst) (if (> (count lst) 1) (second lst) 0)))))))","problem":26,"user":"52718620e4b03e8d9a4a73f5"},{"problem":26,"code":"(fn [n]\n  (loop [fib [1 1] i 1]\n    (if (= i (- n 1))\n      fib\n      (recur (conj fib (+ (nth fib (- i 1)) (nth fib i))) (inc i))))\n  )","user":"5694292ee4b0dcc4269f4113"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)])\n                             [1 1])))","user":"5c26c9b3e4b07e362c2305c5"},{"problem":26,"code":"(fn xxx [m]\n  (letfn [(fibb [n]\n  \t\t    (cond\n     \t\t  (<= n 2) 1\n     \t\t  :else (+ (fibb (- n 1)) (fibb (- n 2)))))]\n    (for [i (range m)] (fibb (inc i)))))","user":"59dec79ee4b01968742fed81"},{"problem":26,"code":"(fn fib\n  [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5bb6166fe4b0a20761a23579"},{"code":"(fn [x] (reverse(last( take (- x 1) (iterate #(into % (list(+ (first %)(second %))))'(1 1))))))","problem":26,"user":"52bbd09ee4b07a9af57922ee"},{"problem":26,"code":"(fn [n] (->>\n          (iterate (fn [xs] (let [[a b] xs] [b (+ a b)])) [1 1])\n          (map #(first %))\n          (take n)\n          ))","user":"5e1754abe4b00200644e3d53"},{"problem":26,"code":"(fn fib-to-n [n]\n  (letfn [(fibs []\n            ((fn rfibs [a b]\n               (cons b (lazy-seq (rfibs b (+ a b)))))\n               0 1))]\n    (take n (fibs))))","user":"55d204abe4b0e31453f64a4f"},{"problem":26,"code":"#( take % (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"5335cab9e4b0e30313ee6c70"},{"code":"(fn collect-elts [elts]\n  (map (fn fib [x]\n         (if (< x 2)\n           x\n           (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ 1 elts))))","problem":26,"user":"502940a9e4b061fd216be4b8"},{"problem":26,"code":"(fn __\n  ([n] (__ n [0 1]))\n  ([n c]\n    (if (= (count c) (inc n))\n      (rest c)\n      (__ n (conj c (apply + (take-last 2 c)))))))","user":"55e206f3e4b050e68259b429"},{"problem":26,"code":"#(loop [fib [1 1]] (if (= (count fib) %) fib (recur (conj fib (reduce + (take-last 2 fib)) ))))","user":"5f727cb0e4b02876ed9fd08e"},{"problem":26,"code":"(fn fib [x] \n  (if (= x 2) \n    [1 1]\n    (let [l (fib (- x 1))]\n      (conj \n       \tl\n       \t(+ (first (reverse l)) (second (reverse l)))\n       )\n      )\n    )\n  )","user":"5626447fe4b00e49c7cb47bd"},{"problem":26,"code":"(fn [result-count]\n  (loop [cnt result-count res '(1 1)]\n    (if (= cnt (count res))\n      (reverse res)\n      (recur cnt (conj res (+ (first res) (second res)))))))","user":"57efb417e4b0bfb2137f5bdc"},{"problem":26,"code":"#(take %\n       (->> [1 1]\n            (iterate (fn [[a b]] [b (+ a b)]))\n            (map first)))","user":"595ebf46e4b066ee0a44b04f"},{"problem":26,"code":"(fn [x] (map (fn fib [x] (cond (= x 0) 1 (= x 1) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) (seq(range x))))","user":"5be8bc2de4b0f319e2d7ec66"},{"problem":26,"code":"(fn [x]\n  (loop [n x v1 0 v2 1 coll []] \n    (if (= 0 n)\n      coll \n      (recur (dec n) \n             v2 \n             (+ v1 v2)\n             (conj coll v2)))))","user":"6014ccd3e4b074f607df66cd"},{"problem":26,"code":"(fn fib [n] (\n  \tif (<= n 1) '(1) (concat (fib (- n 1)) [(reduce + (take-last 2 (fib (- n 1))))] )\n))","user":"54c0ce91e4b0ed20f4ff6f18"},{"problem":26,"code":"(fn [x]\n  (map last (take x (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"591f5124e4b09b4ee5954c45"},{"problem":26,"code":"(fn [n]\n  (let [next-fibs (fn [[a b]] [b (+ a b)])]\n    (map first (take n (iterate next-fibs [1 1])))))","user":"5f247827e4b0f565ad998292"},{"problem":26,"code":"#(reverse (reduce (fn [l _] (conj l (+ (first l) (second l)))) \n                         '(1 1) (range 0 (- % 2))))","user":"5361d423e4b0243289761e49"},{"problem":26,"code":"(fn [X]\n  (sequence\n  \t(loop [result []]\n      (let [length (count result)]\n      \t(if (= length X)\n          result\n          (recur (conj result \n                       (if (< length 2)\n                         1\n                         (+ (last result) (last (butlast result)))))))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":26,"code":"(fn [n]\n  (loop [a 0\n         b 0\n         c 1\n         l 1\n         r []]\n    (if (<= l n)\n      (recur b c (+ b c) (inc l) (conj r c))\n      r)))","user":"5ec21ef0e4b00a66d4a95299"},{"code":"#(map first (reductions (fn [[x y] _] [y (+ x y)]) [1 1] (range (dec %))))","problem":26,"user":"51095588e4b0e34872b3efa5"},{"problem":26,"code":"(fn fibo\n\t([x]\n\t(fibo x 0 1 []))\n\t([x y z v]\n\t(if (= x 0)\n\t  v\n\t  (recur (dec x) z (+ y z) (conj v z)))))","user":"549ffeade4b0f3d1d8e70fb2"},{"problem":26,"code":"(fn a [n] (if (= n 2) [1 1] (conj (a (- n 1)) (reduce + (drop (- n 3) (a (- n 1)))))))","user":"5521c33ce4b0882d96d0919a"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n;#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5939bcb4e4b069cdc2982b3e"},{"problem":26,"code":"#(loop [xs [1 1] counter 2] (if (= % (count xs)) xs (recur (conj xs (+ (last xs) (nth xs (- (count xs) 2)))) (inc counter))))","user":"5aa88c12e4b0d174b936c8d1"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [(+ x y) x]) [1 0])))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn fib\n  [n]\n  (map (fn nth-fib\n  [n]\n  (case n\n    1 1\n    2 1\n    (+ (nth-fib (dec n)) (nth-fib (- n 2))))) (range 1 (inc n))))","problem":26,"user":"528e25b9e4b0239c8a67aed5"},{"problem":26,"code":"#(loop [n %, l [0 1]] (if (<= n 1) (subvec l 1) (recur (dec n) (conj l (apply + (subvec l (- (count l) 2)))))))","user":"58923efce4b00487982d521c"},{"problem":26,"code":"(fn [n] \n  (\n  \tloop [x 1 y 1, i n, result []]\n   \t(\n       if (= i 0)\n     \tresult\n     \t(recur y (+ x y) (dec i) (conj result x))\n    )\n   \t  \n  )\n)","user":"5df175bce4b03c219ef1a34d"},{"problem":26,"code":"(fn [n] (if (< n 3) 1\n            (reduce (fn [a c] (concat a [(+ (last a) ((comp first (partial drop 1) reverse) a))])) [1 1] (take (- n 2) (repeat 1)))))","user":"5aca79a7e4b0e27600da77e4"},{"problem":26,"code":"(fn [start]\n (loop [i start \n        list '(1 1)\n        ]\n   \t\t(if (<= i 2)\n          (reverse list)\n          (recur (dec i) (conj list (+ (first list) (second list))\n          ))))\n   )","user":"5d81fc4fe4b0915913b1d37d"},{"problem":26,"code":"(fn  [n] (loop [i 1 r [1 1]]\n                  (if (>= (+ i 1) n)  r (recur (inc i) (conj r (+ (last r) (last (butlast r))))))))","user":"582a6a85e4b051871117bf5d"},{"problem":26,"code":"#(reduce (fn [s e] (conj s (+ (s (- e 2)) (s (- e 1))))) [1 1] (range 2 %1))","user":"5eac6a63e4b00a66d4a951e0"},{"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))\n           )\n         1 1\n         )))","problem":26,"user":"533e7f63e4b085b17e897d8e"},{"problem":26,"code":"(fn ! [n] \n  (if (= 2 n) \n    [1 1] \n    (conj \n      (! (dec n))\n      (reduce + (take-last 2 (! (dec n)) ) )\n    )\n  )\n)","user":"566e6850e4b0a866af6896da"},{"code":"(fn fib [x] (loop [a []] (if (>= (count a) x) a (recur (conj a (if (< (count a) 2) 1 (+ (last a) (fnext (reverse a)))))))))","problem":26,"user":"52dad8bde4b09f7907dd13be"},{"problem":26,"code":"(fn [x] \n  (take x (\n           (fn fib [a b] \n             (cons a (lazy-seq (fib b (+ a b)))))1 1)))","user":"56efef12e4b04a395b9a0467"},{"problem":26,"code":"(fn [n]\n  (loop [prev 1 result [1] n n]\n    (if (= 1 n)\n      result\n      (recur (+ prev (last result)) (conj result prev) (dec n)))))","user":"566a6e38e4b0a866af68969b"},{"problem":26,"code":"#(loop [i %, s [1 1]] (if (<= i 2) s (recur (dec i) (conj s (+ (last s) (second (reverse s)))))))","user":"57539e04e4b02ea1147992ab"},{"problem":26,"code":"(fn fibonacci\n   ([number]\n    (fibonacci [1 1] number))\n   ([list number]\n    (if (= number 2)\n      list\n      (recur (conj list (+ (last list) (first (rest (reverse list))))) (dec number)))))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn fib [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (concat (fib (- n 1))\n        [(+ (last (fib (- n 1))) (last (fib (- n 2))) )]\n      )\n    ) \n  )\n)","problem":26,"user":"5250af8be4b0541d1855b83c"},{"problem":26,"code":"(fn [n] (take n ((fn getNext [a b] (lazy-seq (cons a (getNext b (+ a b))))) 1 1)))","user":"595eaa8fe4b066ee0a44b04b"},{"code":"(fn [number] (loop [number number, list [], counter 0]  (if (= number (count list)) list (recur number (conj list (nth [1 1 2 3 5 8 13 21] counter)) (inc counter)))))","problem":26,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn fib [n]\n  (loop [x n\n         result '(1 1)]\n    (if \n      (<= n (count result))\n      (reverse result)\n      (recur n (conj result (+ (nth result 0) (nth result 1)))))))","problem":26,"user":"51c9c6cde4b09ce160bef5b1"},{"problem":26,"code":"#(loop [i 1, fib '(), f1 1, f2 1]\n\t(if (<= i %)\n    (recur (+ i 1) (conj fib f1) f2 (+ f1 f2))\n    (reverse fib)))","user":"5e0e0131e4b099d064962fa1"},{"problem":26,"code":"(fn [n]\n  (loop [i (- n 1) s [0 1]]\n    (if (= i 0)\n      (rest s)\n      (do\n      (recur (dec i) (conj s (+ (last s) (nth s (- (count s) 2)))))))))","user":"58ebd6b3e4b056aecfd47d4c"},{"code":"(fn [c] (take c (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","problem":26,"user":"4ec927e8535d6d7199dd36f9"},{"problem":26,"code":"#(loop [f '(1 1) n %]\n   (if (= 2 n)\n     (reverse f)\n     (recur (conj f (+ (first f) (second f))) (dec n))))","user":"5ef4677ce4b07c55ae4a0542"},{"problem":26,"code":"(fn fibo [x]\n  (loop [c x\n         f nil\n         s 1\n         result []]\n    (if (> c 0)\n      (if (= f nil)\n        (recur (dec c) s s (conj result s))\n        (recur (dec c) s (+ f s) (conj result s)))\n      result)))","user":"56a3c89ae4b0542e1f8d14cf"},{"problem":26,"code":"; Let's cheat a little :P\n#(take % [1 1 2 3 5 8 13 21])","user":"541f6bc0e4b01498b1a71a98"},{"code":"(fn fib [n]\n  (take n '(1 1 2 3 5 8 13 21) )\n)","problem":26,"user":"531cd41ee4b08068f379eda9"},{"code":"#(\n  \n loop[ ret [], p 0, pre1 0, pre2 1 ] (\n   if( = p % )\n    ret\n    ( recur (concat ret [pre2] ) (inc p) pre2 (+ pre1 pre2) )\n )\n)","problem":26,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":26,"code":"#( reverse\n  ((fn [a b]\n    (if (= a 0)\n      b\n      (recur (- a 1)\n        (if (empty? b)\n          '(1)\n          (if (= (count b) 1)\n            '(1 1)\n            (conj b (+ (first b) (first (rest b))))\n          )\n        )\n      )\n    )\n  ) % '())\n)","user":"54973374e4b0b312c081ff6f"},{"code":"(fn fibo [n]\n  (loop [x (- n 2) v1 1 v2 1 ret '(1 1)]\n    (if (> x 0)\n      (recur (dec x) v2 (+ v1 v2) (concat ret (list (+ v1 v2))))\n      ret)))","problem":26,"user":"4f03fb59535dcb61093f6b89"},{"problem":26,"code":"(fn [x]\n  (loop [n (- x 2)\n         acc '(1 1)]\n    (if (< n 1) \n      (reverse acc)\n      (recur \n       (- n 1)\n       (conj acc (+ (first acc)\n                    (second acc)\n                 )\n       )\n      )\n     )\n   )\n  )","user":"5cb3a8c3e4b026601754b904"},{"code":"(fn [i]\n  (take i [1 1 2 3 5 8 13 21]))","problem":26,"user":"4e7d4544535db169f9c796d0"},{"code":"(fn [cnt]\r\n  (letfn [(fib ([] (concat [1 1] (fib 1 1)))\r\n        ([a b] (lazy-seq (cons (+ a b) (fib b (+ a b))))))]\r\n    (take cnt (fib))))","problem":26,"user":"4dd0e8f7535da60f04a96e57"},{"problem":26,"code":"(fn myfunc\n  ([x] (myfunc x '()))\n  ([x, y] (\n            if (zero? x)\n            (reverse y)\n            (recur (dec x) (conj y \n              (if (< (count y) 2) 1\n                                   (+ (nth y 1) (first y)\n                                     )))))))","user":"5a0a3473e4b0eab8c0448941"},{"code":"(fn [n] (map (fn F [i]\n                          (cond\n                           (< i 2) i\n                           :else (+ (F (- i 1)) (F (- i 2)))))\n                        (range 1 (+ n 1))))","problem":26,"user":"4ea322fe535d7eef308072c2"},{"code":"(fn fib [n]\n  (loop [n n c 1 p 0 s []]\n    (if (= 0 n)\n        s\n        (recur (- n 1) (+ c p) c (conj s c)))))","problem":26,"user":"4f03ebf7535dcb61093f6b7f"},{"problem":26,"code":"(fn [x]\n(loop [fibs  [1 1]\n       num_el  x]\n  (if (<= num_el 2)\n    fibs\n    (recur (conj fibs (+ (last fibs) (last (pop fibs))))\n           (dec num_el)))\n  )\n)","user":"592ac17ae4b072a2710fcf26"},{"problem":26,"code":"#(loop [i %\n        fib [1 1]]\n   (if (< i 3) fib\n     (recur (dec i) (conj fib (->> fib reverse (take 2) (reduce +))))))","user":"560039cce4b04bb52996e162"},{"code":"(fn fibs [x]\n(let [fib (fn fib [n]\n  (if (< n 2)\n1\n(+ (fib (- n 1)) (fib (- n 2)))\n))]\n(map fib (range x))\n))","problem":26,"user":"4fcebce4e4b03432b189f404"},{"problem":26,"code":"(fn [x]\n  (reduce\n   (fn [c _]\n     (conj c (apply + (take-last 2 c)))) [1] (repeat (- x 1) 1)))","user":"5567f164e4b0c656e3ff184d"},{"problem":26,"code":"(fn[n] (map first (rest (take (inc n) (iterate (fn [[x,y]] [y (+ x y)]) [0,1])))))","user":"4e1e89a2535d04ed9115e809"},{"problem":26,"code":"(fn [n]\n  (loop [x 0\n         y 1\n         i 1\n         result [1]]\n    (if (< i n)\n      (recur y (+ x y) (inc i) (conj result (+ x y)))\n      result)))","user":"55ed37ebe4b0121d4835fdd6"},{"problem":26,"code":"(fn [x]\n  (take x\n    (map second\n        (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5bb948f5e4b0a20761a235d5"},{"problem":26,"code":"#(reverse (reduce (fn [acc _] (cons (+ (first acc) (second acc)) acc)) [1 1] (range (- % 2))))","user":"5553b924e4b0deb715856e06"},{"code":"(fn fibo                                                                                                                               \n  ([n] (fibo 0 () n))                                                                                                                    \n  ([c a n]                                                                                                                               \n    (if (= c n) a                                                                                                                        \n      (if (< c 2) (fibo (inc c) (sort (cons 1 a)) n) (fibo (inc c) (sort (cons (+ (nth a (- c 1)) (nth a (- c 2))) a)) n)))))","problem":26,"user":"50b8de6ce4b0cba0e598b652"},{"problem":26,"code":"(fn [n & acc]\n  (let [acc (or acc [1 1])]\n    (if (= (count acc) n)\n      acc\n      (recur n (conj acc (+ (last acc) (last (butlast acc))))))))","user":"595e8728e4b066ee0a44b047"},{"problem":26,"code":"(fn fib [x] \n  (if (or (= x 1) (= x 2))\n    1\n    (loop [prev 0\n           curr 1\n           idx 1\n           ret []]\n      (if (= idx (+ x 1))\n        ret\n        (recur curr (+ prev curr) (inc idx) (conj ret curr))))))","user":"564f84f4e4b0284900eef6b0"},{"code":"(fn [quant]\r\n   (loop [cont quant, fib_elements [1 1]]\r\n       (if (<= cont 2)\r\n          fib_elements\r\n           (recur (dec cont) \r\n                  (conj fib_elements \r\n                      (+ (last fib_elements)\r\n                         (last (butlast fib_elements))))))))","problem":26,"user":"4e10a8e4535d04ed9115e7c2"},{"problem":26,"code":"(fn ffib [n]\n  (let [f (fn [[a b]]\n            [b (+ a b)])]\n    (->>\n       (iterate f [1 1])\n       (map first)\n       (take n))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [a]\n         (if (< a 2)\n                1\n                (+ (fib (- a 1)) (fib (- a 2)))))\n       (range 0 n)))","user":"53fc88e7e4b0de5c418485be"},{"problem":26,"code":"(fn [n] \n  (take n (map first (iterate (fn [[p pp]] [(+ pp p) p]) [1 0]))))","user":"552d9b31e4b076ab5578f7eb"},{"code":"(fn fib[n] \n  (if (<= n 2) \n    [1 1]\n    (let [r (fib (- n 1))]\n         (conj r (reduce + (take-last 2 r))))))","problem":26,"user":"4fe8aba5e4b07c9f6fd12c68"},{"code":"(partial (fn fib [lst x]\n                   (if (zero? x)\n                       (rest (butlast lst))\n                       (fib (conj lst\n                                  (+ (second (reverse lst)) (last lst)))\n                            (dec x)))) [0 1])","problem":26,"user":"4fb591aee4b081705acca2c0"},{"problem":26,"code":"#(reverse (last (take (- % 1) (iterate (fn [lst] (conj lst (+ (first lst) (second lst)))) '(1 1)))))","user":"57300c19e4b0cd1946bd0fa1"},{"problem":26,"code":"(fn b [a](reverse (reduce (fn [c d] (conj c (+ (first c) (second c)))) '(1 1) (range 1 (- a 1))))\n)","user":"59636ec9e4b066ee0a44b0c8"},{"problem":26,"code":"(fn [iterations]\n  (take iterations \n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n  )\n)","user":"5b513bd4e4b02d533a91bcf2"},{"problem":26,"code":"(fn [x]\n  (loop [fibs '(1)\n         x (dec x)\n         n-1 1\n         n-2 0]\n    (if (zero? x)\n      (reverse fibs)\n      (recur (conj fibs\n                   (+ n-1 n-2))\n             (dec x)\n             (+ n-1 n-2)\n             n-1))))","user":"56b9c644e4b0f2655033593a"},{"problem":26,"code":"#(loop\n          [ ix 2 result [1 1]]\n          (if (= ix %)\n            result\n            (recur (inc ix) \n                   (conj result (+ \n                                           (get result (- ix 1))\n                                           (get result (- ix 2)))))\n          ))","user":"5e03a1bbe4b0a607a9a45d5f"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) '(1 1)))))","user":"5cf5775ce4b087f62be35a98"},{"problem":26,"code":"(let [fib-helper (fn [n fibs]\n                        (if (zero? n)\n                          fibs\n                          (recur (dec n) (conj fibs (+ (last fibs) ((comp first rest reverse) fibs))))))]\n           #(fib-helper (- % 2) [1 1]))","user":"5455510fe4b0e397800069df"},{"problem":26,"code":"(fn fib [x]\n   (cond \n      (= x 1) [1]\n      (= x 2) [1 1]\n      :else (loop [f [1 1] n x]\n               (if (= n 2)\n               f\n               (recur (conj f (reduce + (take-last 2 f))) (dec n))))))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn fib\n  [n]\n  (map (fn get-nth-fib\n         [x]\n         (if (or (= 0 x) (= 1 x))\n           x\n           (+ (get-nth-fib (- x 1)) (get-nth-fib (- x 2)))))\n\n    (take n (iterate inc 1))))","problem":26,"user":"5233adf7e4b07e3ee2be83ad"},{"problem":26,"code":"(fn fib [x]\n  (take x\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ b a)))))\n     1 1)))","user":"54c31f1be4b045293a27f609"},{"problem":26,"code":"(fn [n] \n    (reduce (fn [result i] \n              (conj result \n                    (cond\n                     (= 1 i) 1\n                     (= 2 i) 1\n                     :else\n                     (let [[prev1 prev2] (take-last 2 result)]\n                       (+ prev1 prev2))))) [] (range 1 (+ n 1))))","user":"547cd90ee4b0c51c1f4d72ec"},{"problem":26,"code":"(fn [x] (reverse (reduce (fn [a b] (cons (+ (first a) (second a)) a) ) `(1 1) (repeat (- x 2) 1))))","user":"58fb5a03e4b0438e51c2cf77"},{"problem":26,"code":"#(map (fn fib [n] (if (< n 2)\n              \t1\n              \t(+ (fib (- n 1))\n                   (fib (- n 2)))))\n(range %))","user":"5694a50fe4b0dcc4269f4121"},{"problem":26,"code":"(fn fibb [x] \n  (if (or (= 2 x) (= 1 x)) [1 1]\n      (let [sofar (fibb (- x 1))\n            prev1 (last sofar)\n            prev2 (or (second (reverse sofar)) 1)]\n        (conj sofar (+ prev1 prev2))\n        ))\n  )","user":"603ae21de4b0d5df2af222fb"},{"problem":26,"code":"(fn [n]\n  (loop [acc '(1 1)]\n    (if (= (count acc) n)\n      (reverse acc)\n      (recur (conj acc \n                   (+ (first acc)\n                      (second acc)))))))","user":"53e30fcae4b036ad0777e3fc"},{"problem":26,"code":"(fn [num]\n  (loop [prev 1\n         current 1\n         rm (- num 2)\n         out [1 1]]\n  (if (<= rm 0)\n    out\n    (let [next (+ prev current)]\n      (recur current next (dec rm) (conj out next))))))","user":"56a9ea17e4b07966d5a8a07c"},{"problem":26,"code":"(fn fib \n    ([] (fib 1 1))\n    ([x] (take x (fib)))\n    ([a b] (lazy-seq (cons a (fib b (+ a b)))))\n  )","user":"5ec825eee4b08d0ec38692e3"},{"problem":26,"code":";(fn fib\n;  ([n] (fib (- n 2) '(1 1)))\n;  ([n xs] (case n\n;           0 (reverse xs)\n;           (fib (dec n) (conj xs (+ (first xs) (second xs)))))))\n\n(fn fib\n  ([n] (fib (- n 2) '(1 1)))\n  ([n xs] (case n\n            0 (reverse xs)\n            (recur (dec n) (conj xs (+ (first xs) (second xs)))))))","user":"5de12192e4b0948ae9d9aded"},{"problem":26,"code":"(fn [x] \n  (loop [res '(1)\n         prev 0]\n    (if (= x (count res))\n      (reverse res)\n      (recur (conj res (+ prev (first res))) (first res)))))","user":"564054a9e4b08d4f616f5edf"},{"problem":26,"code":"#(take % \n\n((fn fib \n  ([] \n   (fib 1 1))\n  ([a b]\n     (lazy-seq (cons a (fib b (+ a b))))) \n  ))\n \n )","user":"5e44c804e4b01d43a70e8e89"},{"problem":26,"code":"(fn fs [n]\n  (take n ((fn f [a b] \n       (cons a (lazy-seq (f b (+ a b)))))\n    1 1)))","user":"554f7ef2e4b00713264bd9a1"},{"problem":26,"code":"(fn\n  [n]\n  (loop [lst [1 1], x 2] \n    (if \n        (= x n) (flatten (list lst))\n        (recur \n         (conj lst\n               (+\n                (nth lst (- x 1))\n                (nth lst (- x 2))))\n         (+ x 1)))))","user":"5756efc3e4b02ea1147992e6"},{"code":"(fn _ [n]\n  (cond\n   (= n 1) [1]\n   :else (conj (_ (- n 1)) \n               ((fn ! [n] (cond\n                        (= n 1) 1\n                        (= n 2) 1\n                        :else (+ (! (- n 1)) (! (- n 2))))) n))\n   ))","problem":26,"user":"52be0263e4b07a9af579230e"},{"problem":26,"code":"(fn fib\n  ([n a b accum]\n   (if (zero? n)\n     accum\n     (recur (dec n) b (+ a b) (concat accum [(+ a b)]))))\n  ([n] (fib (- n 2) 1 1 [1 1])))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn [n]\n  (let\n    [fib (fn fib [n]\n          (if (< n 2)\n              1\n          (+ (fib (- n 1)) (fib (- n 2)))))]\n    (take n (map fib (range)))))","problem":26,"user":"516385cee4b055933a9ca02d"},{"code":"#(reverse (reduce (fn [acc v] (cons (+ (first acc) (first (rest acc))) acc)) '(1 1) (range 2 %)))","problem":26,"user":"535bd464e4b04ce2eb3ed2ad"},{"code":"(fn [n]\n        (reduce (fn [fib i]\n                    (conj fib\n                          (if (< i 2)\n                              1\n                              (+ (nth fib (- i 1))\n                                (nth fib (- i 2))))))\n                []\n                (range 0 n)))","problem":26,"user":"52a32b52e4b04e0c58e87bfc"},{"code":"#(take % \n  (drop 1 \n        (map first \n          (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e6acc33535d8ccf87e9ff05"},{"code":"#(loop [n % fib [1 1]]\n   (if (< n 3)\n     fib\n     (recur (dec n) (conj fib (+ (nth fib (- (count fib) 2)) (nth fib (- (count fib) 1)))))))","problem":26,"user":"52cdec6ce4b07d0d72b27383"},{"problem":26,"code":"(fn [length]\n(take length  (map first (iterate (fn [[x y]]\n             [y (+ x y)])\n           [1 1])))\n  )","user":"561a9e3be4b053970a773b09"},{"problem":26,"code":"#(map (fn fib [x](if (or (= x 1) (= x 2)) 1 (+(fib (- x 1))(fib (- x 2))))) (range 1 (inc %)))","user":"575ab695e4b02ea114799350"},{"problem":26,"code":"#(reverse (loop [x %  fib '(1 1)]\n\t(if(> x 2)\n\t(recur (dec x) (conj fib (+ (first fib) (second fib))))\n\tfib)))","user":"55a2b008e4b0acc240e31526"},{"problem":26,"code":"(fn [n]\n  (loop [fib-nums [1 1]]\n    (if (>= (count fib-nums) n)\n      (subvec fib-nums 0 n)\n      (let [ [f s] (reverse fib-nums)] (recur (conj fib-nums (+ f s))))\n     )\n    )\n    )","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1 1]]\n    (if (= (count acc) n)\n      acc\n      (recur (conj acc\n                   (+ ((comp second reverse) acc) \n                      (last acc)))))))","user":"5c6448d6e4b0fca0c1622674"},{"problem":26,"code":"(fn [n]\n\t(let [fib (fn fib [n]\n  \t\t(cond (= 1 n) 1\n      \t\t  (= 2 n) 1\n      \t\t  :else (+ (fib (- n 1)) (fib (- n 2)))))]\n  (map #(-> % (+ 1) (fib)) (range n))))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":26,"code":"#(take % ((fn fib \n            [a b] \n            (lazy-seq \n             (cons a (fib b (+ b a))))) \n          1 1))","user":"57a9b00be4b0a96607956232"},{"problem":26,"code":"(fn [num] (\n  (fn [num seq last current]\n    (let [next (+ last current)]\n    (if (= num 0) (reverse seq) (recur (dec num) (conj seq current) current next))\n  ))\n  num '() 0 1\n))","user":"5cb47a0fe4b026601754b91b"},{"code":"(fn fibs [n]\n  (loop [xs '(1 1), l 2]\n    (if (= l n) (reverse xs)\n      (recur (cons (+ (first xs) (first (rest xs))) xs)\n            (+ l 1)))))","problem":26,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":26,"code":"(fn [m]\n(letfn [(fib [n l]\n          (let [r (reverse l)]\n            (cond\n              (= n 1) '(1)\n              (= n 2) l\n              :else (fib (dec n) (reverse (cons (+ (first r) (second r)) r))))))]\n  (fib m '(1 1)))\n)","user":"541e6d40e4b01498b1a71a8c"},{"code":"(fn [n] \n  (take n \n  \t((fn fib [a b] \n       (cons a (lazy-seq (fib b (+ a b))))) \n     1 1)))","problem":26,"user":"51cc5f20e4b02254fc794870"},{"problem":26,"code":"(fn [n] \n  (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn fib [n]\n  (cond\n    (<= n 1)\n      '[1]\n    (= n 2)\n      '[1 1]\n    :else\n      (let\n        [x (fib (- n 2))\n         y (last (fib (dec n)))]\n        (conj x y (+ (last x) y)))))","problem":26,"user":"504ece87e4b069badc5a33ce"},{"problem":26,"code":"(fn [n]\n    (seq (loop [current-pos 1\n           items []]\n        (if (= current-pos 1)\n            (recur 2 (conj items 1))\n            (if (= current-pos 2)\n                (recur 3 (conj items 1))\n                (if (<= current-pos n)\n                    (recur (inc current-pos) (conj \n                        items\n                        (+ (nth items (- current-pos 2)) (nth items (- current-pos 3)))\n                        )\n                    )\n                    items\n                )\n            )\n        )\n    ))\n)","user":"54996971e4b0b312c081ff8d"},{"code":"(fn fib[n]\n  (loop [x 0\n         y 1\n         n n\n         out '()]\n    (if (= 1 n)\n      (reverse (conj out y ))\n      (recur y (+ x y) (- n 1) (conj out y))\n    ))\n)","problem":26,"user":"530e0e4ee4b08068f379ecb4"},{"problem":26,"code":"#(loop [result [1] a 1 b 0 n (dec %) i 0]\n   (if (= n 0)\n     '()\n     (if (= n i)\n     \tresult\n       \t(recur (conj result (+ a b)) (+ a b) a n (inc i)))))","user":"5b199fd4e4b03cfeda66ecbd"},{"problem":26,"code":"(fn [x] \n    (loop [i [1 1]]\n        (if (= x (count i))\n            i\n            (recur \n              (conj i (apply + (take-last 2 i)  ))))))","user":"5e23d513e4b05b4b01516145"},{"code":"(fn [x] (take x (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"5372eaf2e4b06d7f452d9e03"},{"problem":26,"code":"(fn [x]\n  (let \n    [f (fn fib [x]\n      (cond\n        (= x 1) 1\n        (= x 2) 1\n        :else (+ (fib (- x 1)) (fib (- x 2)) )))]\n    (map f (range 1 (inc x)))))","user":"5b15ab32e4b0cc2b61a3be72"},{"problem":26,"code":"(fn fib [n] (reduce #(cond (= 0 %2) (conj % 1)\n                           (= 1 %2) (conj % 1)\n                           :else (conj % (+ (last %) (last (butlast %))))) [] (range n)))","user":"54bff194e4b0ed20f4ff6f0d"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [v (fib (- n 1))]\n            (conj v (+ (last v) (nth v (- (count v) 2)))))))","user":"60bf4e5de4b0e0fa5f1b4293"},{"code":"(fn [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f107e0e535d64f60314641c"},{"code":"(fn fib [n]\n  (loop [s [1 1]\n         i 2]\n    (if (= i n)\n      s\n      (recur \n        (conj s (+ (last s) (second (reverse s))))\n        (inc i)))))","problem":26,"user":"4e7f32ee535db966e863cc3a"},{"code":"(fn [k] ( apply list \n  ((fn [ l j ] \n    (if (= j 2 ) l (recur ( conj l (apply + (take-last 2 l)) ) (dec j)) ) ) [ 1 1 ] k )))","problem":26,"user":"4fc43a8ee4b081705acca346"},{"problem":26,"code":"(fn [n] (->> (iterate (fn [[v1 v2]] [v2 (+ v1 v2)]) [1 1]) (map first) (take n)))","user":"5a66fddee4b0512ff01cd9d7"},{"problem":26,"code":"(fn\n  [n]\n  (loop [a 0\n         b 1\n         i 0\n         lst '(1)]\n    (if (= i (- n 1))\n      (reverse lst)\n      (recur b (+ a b) (inc i) (cons (+ a b) lst)))))","user":"59dfd369e4b08badc2a0c4dd"},{"problem":26,"code":"(fn [z] (loop [accum [] iter z]\n          (if (= iter 0)\n           accum\n          (recur (cons ((fn fib [x] \n                               (if (< x 3)\n                                 1\n                                 (+ (fib (- x 1)) (fib (- x 2)))\n                               )\n                              ) iter) accum\n                 ) (dec iter))\n          )\n          )\n)","user":"51fea7d7e4b0f1313d468a74"},{"problem":26,"code":"#(reverse ((fn fibb [y]\n  (if \n    (> y 1)\n    (conj\n     (fibb (- y 1))\n     ((fn fib [x] (if (> x 2) (+ (fib (- x 1)) (fib (- x 2))) 1)) y)    \n    )\n    '(1)\n  )\n)%))","user":"57501c83e4b02ea11479926b"},{"code":"(fn fib [n] (cond\n         (= n 1) [1]\n         (= n 2) (conj (fib (dec n)) 1)\n         (> n 2) (let [fibp (fib (dec n))]\n                   (conj fibp (+ (last fibp) (peek (pop fibp))))\n                   )\n             )\n  )","problem":26,"user":"525efc76e4b0cb4875a45dbd"},{"problem":26,"code":"(fn [n]\n  (cond\n   (<= n 0) nil\n   (= n 1) 1\n   (= n 2) 1\n   :default (loop [i 2\n          \t  \t   acc [1 1]]\n               (if (= i n)\n                 acc\n                 (recur (inc i) (conj acc (+ (nth acc (- i 2)) (last acc))))))))","user":"4fd4bddce4b0d4de60cee36e"},{"code":"(fn [x] (reverse (\n\n(fn fibs [n] (if (< n 3) '(1 1) \n(let [pre (fibs (- n 1))] \n( conj pre (reduce + (take 2 pre)) ))))\n\nx)))","problem":26,"user":"4f2a6169e4b0d6649770a03d"},{"code":"(fn nfibs \n  ([n] (nfibs 0 1 [1] n))\n  ([x y result n] \n    (if (= n (count result))\n      result\n      (nfibs y (+ x y) (conj result (+ x y)) n))\n  )\n)","problem":26,"user":"4ea08b30535d7eef308072a5"},{"problem":26,"code":"(fn fibonacci [n]\n  (take n ((fn fib-seq [a b] \n             (lazy-seq (cons a (fib-seq b (+ a b)))))\n           1 1)))","user":"58ed713de4b056aecfd47d84"},{"problem":26,"code":"(fn [n]\n  (loop [x '(1 1)]\n    (if (= (count x) n)\n      (reverse x)\n      (recur\n       (cons\n        (+ (first x) (second x)) x)))))","user":"55855f00e4b001b0851d750b"},{"problem":26,"code":"#(loop [i 0 x 0 y 1 c []] (if (= i %) c (recur (inc i) y (+ x y) (conj c y))))","user":"57286f16e4b0c5bde472c159"},{"problem":26,"code":"(fn\n  [n]\n  (if (= n 1)\n    [1]\n    (loop [a 1\n           b 1\n           res [1 1]]\n      (if (= n (count res))\n        res\n        (recur b\n               (+ a b)\n               (conj res (+ a b)))))))","user":"55c423e1e4b0e31453f64994"},{"problem":26,"code":"(fn [n] (reduce (fn [a b] (conj a (+ (last a) (last (butlast a))))) [1 1] (range (- n 2))))","user":"5daec18ae4b0f8c104ccfc8c"},{"code":"(fn[x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4e8cf3ef535d65386fec2130"},{"code":"#(letfn [(f [n]\n            (cond (= n 0) 1\n                  (= n 1) 1\n                  :else (+ (f (dec n))\n                           (f (- n 2)))))]\n   (map f (range %)))","problem":26,"user":"5102489de4b00c483ae176f6"},{"code":"(fn fib [x]\n  (if (< x 3)\n    [1 1]\n    (conj (fib (- x 1)) (+ (nth (fib (- x 1)) (- x 2)) (nth (fib (- x 1)) (- x 3))))\n    )\n  )","problem":26,"user":"52586d24e4b0cb4875a45cb0"},{"code":"#(take % (drop 1 (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e5d0e96535d8a8b8723a2c8"},{"code":"#(take %1 (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4ee7d177535d93acb0a6686f"},{"code":"#(let [fib (fn f [n]\n                (case n\n                  1 1\n                  2 1\n                  (+ (f (- n 1)) (f (- n 2)))))]\n  (map fib (range 1 (+ % 1))))","problem":26,"user":"504ec46de4b069badc5a33c8"},{"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a) )))) 1 1))","problem":26,"user":"51a865dfe4b08d8ec191b80f"},{"code":"(fn [l]\n  (take l\n        ((fn fib\n           [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","problem":26,"user":"52527192e4b0541d1855b8af"},{"code":"(fn [N]\n  (loop [n1 1, n2 1, res [1 1], counter 2]\n    (if (= counter N)\n      res\n      (recur n2 \n             (+ n1 n2)\n             (conj res (+ n1 n2))\n             (inc counter)))))","problem":26,"user":"4e117dea535d04ed9115e7c9"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 (list 1)\n    2 (list 1 1)\n    (let [prevSeq (fib (- n 1))]\n      (\n       concat prevSeq \n       \t(list (+ \n         \t(last prevSeq) \n        \t(nth (reverse prevSeq) 1)\n        ))\n      )\n    )\n  )\n  \n)","user":"55bb7546e4b01b9910ae29e7"},{"code":"(fn [lim]\n  (loop [c '(1 1) n 2]\n    (if (< lim (inc n))\n            (reverse c)\n            (recur (conj c (+ (first c) (second c))) (inc n)))))","problem":26,"user":"4f4e6d21e4b03ad3f0c10cc5"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         fibs []]\n    (if (= 0 n)\n      fibs\n      (if (< (count fibs) 2) \n        (recur (dec n) (conj fibs 1))\n        (recur (dec n) (conj fibs (+ (nth fibs (- (count fibs) 1))\n                                     (nth fibs (- (count fibs) 2)))))))))","user":"5ca1f2b2e4b048ec896c5b8b"},{"problem":26,"code":"#(reverse (reduce (fn [coll _] (conj  coll (apply + ((juxt first second) coll)))) '(1 1) (drop 2 (range %))))","user":"52e5f810e4b09f7907dd1468"},{"problem":26,"code":"#(rest(reduce (fn [x y] (conj x (+ (last x) (last (butlast x))))) [0 1] (range (dec %))))","user":"550df95ce4b06e50f9beb161"},{"problem":26,"code":"#(\n  ->> [1, 1]\n  (iterate (fn[[a, b]] [b, (+ a b)]))\n  (map first)\n  (take %)\n )","user":"5de44e22e4b0948ae9d9ae04"},{"problem":26,"code":"#(take % ((fn fib\n  [a b] (cons a (lazy-seq (fib b (+' b a))))) 1 1))","user":"53940b5ee4b0b51d73faaec4"},{"problem":26,"code":"(fn [x]\n   (take x\n         (\n           (fn fib[a b]\n             (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","user":"567b62fce4b05957ce8c61a6"},{"problem":26,"code":"(fn [x] \n  (loop [i 0 fib 1 fib2 1 result [1]] \n    (if (= i (- x 1)) (seq result) \n      (recur (+ i 1) fib2 (+ fib fib2) (conj result fib2)))\n    )\n  )","user":"5d03944de4b0cc9c915881c5"},{"problem":26,"code":"(fn fi [x]\n  (take\n   x\n   (map\n    first\n    (iterate\n     (fn [[a b]]\n       [b (+' a b)])\n     [1 1]))))","user":"59736b0de4b01722bebd4c9e"},{"problem":26,"code":"(fn [n] (take n (map first (drop 1 (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"56466fb1e4b0284900eef613"},{"problem":26,"code":"(fn fib [x] (loop [fib [1] num1 0 num2 1]\n (if (= (count fib) x) fib (recur (conj fib (+ num1 num2)) num2 (+ num1 num2)) )))","user":"55c9bc1ee4b0e31453f649f1"},{"problem":26,"code":"(comp reverse (fn f [x]\n  (if (== x 1) \n    '(1) \n    (if (== x 2) \n      '(1 1) \n      (conj \n       (f (dec x)) \n       (+ \n        (first (f (dec x))) \n        (second (f (dec x)))\n        )\n       )\n      )\n    )\n  ))","user":"54ff2342e4b07d26eda61d49"},{"problem":26,"code":"(partial\n  (fn f1 [l a b c]\n    (let [a2 b\n          b2 (+ a b)\n          c2 (- c 1)]\n       (if (zero? c)\n        l\n        (recur (conj l a2) a2 b2 c2))))\n  \n  [] 0 1)","user":"5f30296fe4b0574c87022c22"},{"code":"(fn [n]\n   (take n ((fn f [a b]\n              (cons a (lazy-seq (f b (+ a b))))) 1 1)))","problem":26,"user":"52b48f04e4b0c58976d9ad29"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([n] (take n (fib)))\n  ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1)))))\n)","user":"5f310542e4b0574c87022c25"},{"problem":26,"code":"#(reverse(reduce (fn [x y] (cons (+ (first x) (second x)) x)) '(1 1) (range (- % 2))))","user":"5dc98501e4b02f9375f4e1e6"},{"code":"(fn lazy-fib\n  ([n]\n    (take n (lazy-fib)))\n  ([]\n    (concat [1] (lazy-fib 0 1)))\n  ([a b]\n    (let [n (+ a b)]\n    (lazy-seq\n      (cons n (lazy-fib b n))))))","problem":26,"user":"4eb7b049535d7eef30807377"},{"problem":26,"code":"(fn [x]\n       (drop 1 (reverse (reduce\n                          (fn [acc v]\n                            (cons\n                              (+ (first acc) (second acc))\n                              acc\n                              )\n                            )\n                          [1 0]\n                          (take (- x 1) (repeat :true))\n                          ))\n             )\n       )","user":"5a55114ae4b05d388ecb6c37"},{"code":"(fn[l]\n  (map\n  (fn fib[n] (if (<= n 1) 1 (+ (fib (- n 1)) (fib (- n 2)))))\n  (range l))\n)","problem":26,"user":"4e3ae7cd535deb9a81d77f4e"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 0) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else\n    (concat (fib (dec n))\n            (list\n             (+ (last (fib (dec n)))\n                (last (butlast (fib (dec n)))))))))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn [n]\n   (let [fibo (fn fibo [n]\n     (if (or (= n 1)\n             (= n 2))\n       n\n       (+ (fibo (- n 2)) (fibo (- n 1)))))]\n   (loop [i 1\n          r '(1)]\n     (if (< i n)\n       (recur (inc i) (conj r (fibo i)))\n       (reverse r)))))","problem":26,"user":"525947f1e4b0cb4875a45cd8"},{"code":"(fn [n]\n  (reverse\n    (loop [a 1, b 1, accum nil, i n]\n      (if (= i 0)\n          accum\n          (recur b (+ a b) (cons a accum) (dec i))))))","problem":26,"user":"4f5030a9e4b03ad3f0c10cfd"},{"problem":26,"code":"(fn [x]\n  (loop [result (list 1 1)\n         len 2]\n    (if (= len x)\n      (reverse result)\n      (recur (conj result (+ (first result)\n                             (second result)))\n             (inc len)))))","user":"55b54ecbe4b01b9910ae2987"},{"problem":26,"code":"#(take % (map first (iterate (fn [xs] [(second xs) (reduce + xs)]) [1 1])))","user":"5f0a65dae4b09a3f05b71806"},{"problem":26,"code":"(fn [n] \n  (map \n   (fn fib [m] \n     (if (or (= m 1) (= m 2)) \n       1 \n       (+ (fib (dec m)) (fib (dec (dec m)))\n          )\n       )\n     ) \n   (range 1 (inc n))\n   )\n  )","user":"5a621702e4b0512ff01cd983"},{"problem":26,"code":"(fn [x]\n(reduce (fn [x1 x2] \n          \n          (if (>= (count x1) 1)\n          (conj x1 (apply + (take-last 2 x1)))\n          (conj x1 1))\n                      ) [] (range x)))","user":"53f4c3d6e4b0db01ade6f9c5"},{"problem":26,"code":"#(take % [1 1 2 3 5 8 13 21 0])","user":"53a2be95e4b0f1fc7453882d"},{"code":"#(->> [1 1] (iterate (juxt last (partial apply +))) (take %) (map first))","problem":26,"user":"51f9527fe4b09be9c177e549"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [1 1]\n         amt (- n 2)]\n    (if (= amt 0)\n      (seq fibs)\n      (recur (conj fibs (apply + (take 2 (reverse fibs))))\n             (dec amt)))))","user":"54084784e4b0addc1aec66c9"},{"problem":26,"code":"(fn [length] (loop [a 0 b 1 current length result []]\n               (if (> current 0)\n                   (recur b (+ a b) (dec current) (conj result b))\n                   result)))","user":"5f1328dee4b091ba50b4dbb1"},{"code":"#(take % ((fn fib\n  ([] (fib 1 1))\n  ([a b] (lazy-cat [a] (fib b (+ a b)))))))","problem":26,"user":"531f7a2de4b08068f379edc6"},{"code":"(fn [x]\n   (let [fib\n         (fn ! [x acc]\n           (if (= x 1)\n             [1]\n             (if (= x 2)\n               [1 1]\n               (let [prev (! (- x 1) acc)]\n                 (conj prev (+ (last prev) (last (butlast prev))))))))]\n     (fib x [])))","problem":26,"user":"50fe2420e4b03cd852b4e84a"},{"problem":26,"code":"(fn [n] \n  (cond (< n 1) 0\n        (< n 3) 1\n        true (loop [i 3 carry '(1 1) ]\n                (if (> i n)\n                   (reverse carry)\n                   (recur (inc i) (conj carry (+ (first carry) (second carry))))))))","user":"53e91473e4b036ad0777e495"},{"problem":26,"code":"(fn [n]\n  (take n\n   \t((fn fibo [a b]\n     (lazy-seq (cons a (fibo b (+ a b))))) \n    1 1)))","user":"56fc0601e4b07572ad1a88db"},{"code":"(fn [n]\n   (loop [a 1 b 0 count n res []]\n     (if (zero? count)\n       res\n       (recur (+ a b) a (dec count) (conj res a)))\n     )\n   )","problem":26,"user":"4f04ac77535dcb61093f6bdc"},{"code":"(fn [n] (loop [ i 0 , x [1 1] ] (if (= (- n 2) i) (apply list x) (recur (inc i) (conj x ( + (x ( - (count x ) 1 )) (x (- (count x) 2))))))))","problem":26,"user":"521b3f2fe4b0c4ef0be83034"},{"problem":26,"code":"(fn [n]\n  (loop [numb n, fib '(1), curr 1, prev 0]\n    (if (= numb 1)\n    fib\n    (recur (dec numb) (concat fib [(+ curr prev)]) (+ curr prev) curr ))\n  )\n)","user":"58a72f71e4b01a0c0b23293f"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n]\n               (case n\n                 1 1\n                 2 1\n                 (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range 1 (inc n)))))","user":"5619cd91e4b053970a773aff"},{"problem":26,"code":"#(let [nums (atom [1 1])]\n    (while (< (count @nums) %)\n      (let [last-num (last @nums)\n            second-last-nums (nth @nums (- (count @nums) 2))]\n        (reset! nums (concat @nums [(+ last-num second-last-nums)]))))\n    @nums)","user":"5baa5f53e4b0a20761a23459"},{"problem":26,"code":"#(take % (map last (iterate (fn [[i s]] [s (+ i s)]) [0 1])))","user":"59874ff6e4b021a7a535fea1"},{"problem":26,"code":"(fn fib\n  [x]\n  (rest (take (+ 1 x) (map \n                        first\n                        (iterate\n                          (fn [[a b]] [b (+ a b)])\n                          [0 1])))))","user":"5574c172e4b05c286339e059"},{"problem":26,"code":"(fn fib [x] (loop [prev 1 curr 1 s [1 1] n x] \n  (if (<= n 2) \n  s \n  (recur curr (+ prev curr) (conj s (+ prev curr)) (dec n)) )))","user":"57b15381e4b0fbc9809a2751"},{"code":"#(map (fn [n] (loop [n n a 0 b 1] (if (zero? n) a (recur (dec n) b (+ a b))))) (range 1 (inc %)))","problem":26,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":26,"code":"#(reverse\n  (\n    (fn fib [i]\n      (if (= i 2)\n        '(1 1)\n         (let [c (fib (- i 1))] (conj c (+ (first c) (second c))))))\n    %))","user":"59a24c92e4b066c664927d20"},{"problem":26,"code":"(fn [n]\n  (take n((fn rfib [a b]\n           (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1)))","user":"572ca54ae4b0cd1946bd0f59"},{"code":"#(take % \r\n  (map first \r\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4ddeb916535d08e6dec9fdd9"},{"code":"(fn [nums]\n  (loop\n    [n nums, l [], a 1, b 1]\n    (if (zero? n)\n      l\n      (recur \n        (dec n)\n        (conj l a)\n        b\n        (+ a b)))))","problem":26,"user":"4ed47f1e535d10e5ff6f52cd"},{"problem":26,"code":"(fn fib [max]\n\n  (loop [f0 0, f1 1, current (+ f0 f1), result [f1] , counter 1]\n    (if (< counter max)\n      (recur f1 , current , (+ f1 current) , (conj result current), (+ counter 1))\n      result)\n\n    )\n  )","user":"5aa11b37e4b0d174b936c840"},{"problem":26,"code":"(fn fb[j]\n   (let [ r(loop [i 2 m '(1 1)]\n     (if (= i j) m\n       (recur (inc i) (cons (+ (first m) (second m)) m))))]\n     (reduce conj '() r)  \n     \n    ))","user":"56fa8984e4b07572ad1a88c1"},{"problem":26,"code":"(fn fib [nu]\n  (if (= 1 nu) '(1) (if (= 2 nu) '(1 1) (let [\n  prev_fib (reverse (fib (- nu 1)))\n]\n  (seq (reverse (cons (+ (first prev_fib) (second prev_fib)) prev_fib)))\n )))\n)","user":"54c9f165e4b045293a27f687"},{"problem":26,"code":"(fn fib [n]\n  (cond \n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else\n   \t(let [prev (fib (- n 1))\n          reversed (reverse prev)]\n    \t(concat prev [(+ (nth reversed 0) (nth reversed 1))]))))","user":"5797748ce4b039eba2ecb0fb"},{"problem":26,"code":"#(loop [cn 1 fibs [1] nfib 1] (if (< cn %)\n                 (recur (inc cn) (conj fibs nfib) (+ (last fibs) nfib))\n                 fibs))","user":"575d5831e4b02ea114799381"},{"code":"(fn [x]\n   (reverse\n    (loop [x x acc '(1 1)]\n      (cond\n       (= 0 x) '()\n       (= 1 x) '(1)\n       (= 2 x) acc\n       :else (recur (- x 1) (cons (+ (first acc) (second acc)) acc))))))","problem":26,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn [x]\r\n ((fn inner-fibo [n coll]\r\n  (if (< n 1)\r\n   coll\r\n   (if (< (count coll) 2)\r\n    (inner-fibo (dec n) (conj coll 1))\r\n    (inner-fibo (dec n) (conj coll (+ (last coll) (nth coll (- (count coll) 2)))))\r\n))) x [])\r\n)","problem":26,"user":"505caadfe4b0bcb5664c3d3e"},{"problem":26,"code":"(fn [n] \n  (cond\n   (<= n 0) []\n   (= n 1) [1]\n   :else (loop [i (- n 1) acc [1]]\n     (if (>= (count acc) n) \n       (vec (reverse acc)) \n       (recur (inc i) (if (= 1 (count acc))\n                        (cons 1 acc)\n                        (cons (+ (first acc) (second acc)) acc)))))))","user":"4e7d5eb8535db169f9c796d6"},{"code":"#(loop[c % x '(1 0)] (if(> c 1) (recur (dec c) (cons (+ (first x) (second x)) x)) (drop 1 (reverse x))))","problem":26,"user":"4e25bd69535d04ed9115e82c"},{"problem":26,"code":"(fn fib-seq [x]\n  (reverse\n  ((fn sub-f [acc x]\n     (if (= x 2)\n       acc\n       (sub-f (conj acc\n                    (+ (first acc)\n                       (second acc)))\n              (dec x))))\n   '(1 1) x)))","user":"5b79481de4b047b03b203704"},{"problem":26,"code":"#(mapcat (fn fib [x]\n            (if (<= x 1)\n              (list 1)\n              (list (+ (first (fib (- x 2))) (first (fib (- x 1)))))\n              )) (range %))","user":"5ab170c2e4b073f1774425cb"},{"problem":26,"code":"(fn [x] \n  (loop [k 3\n         v [1 1]\n         a 1\n         b 1]\n    \t(if (> k x)\n          v\n         (recur (+ k 1) (conj v (+ a b)) b (+ a b))\n         )\n   \n   )\n)","user":"57cc14aae4b05aa3c4741d4a"},{"problem":26,"code":"(fn [n] ((fn [first-val second-val cnt res]\n    (if (zero? cnt)\n     res\n      (recur second-val (+ first-val second-val) (dec cnt) (conj res second-val)))) 0 1 n [])\n)","user":"5e807fcae4b085ba37836e46"},{"code":"(fn [num] (take num ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"50bcfab0e4b0594b91591c64"},{"code":"(fn [x]\r\n  (loop [result [] idx 1]\r\n    (cond\r\n      (> idx x) result\r\n      (< idx 3) (recur (conj result 1) (inc idx))\r\n      :else (recur (conj result (reduce + (take 2 (clojure.core/reverse result)))) (inc idx)))))","problem":26,"user":"50045388e4b0678c553fc44e"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [(+ b a) a]) [1 0])))","user":"56f9b953e4b07572ad1a88b9"},{"problem":26,"code":"(fn [x] \n  (loop [curr 1, nxt 1, limit x, fib '()]\n    (if (= 0 limit) (reverse fib)\n      (recur nxt (+ curr nxt) (dec limit) (cons curr fib)))))","user":"55074092e4b021ccfedb96a4"},{"code":"(fn [x]\r\n   (take x\r\n     ((fn fib [a b]\r\n         (cons a (lazy-seq (fib b (+ a b))))) \r\n       1 1)))","problem":26,"user":"4eb80ce6535d7eef3080737d"},{"problem":26,"code":"(fn [n] (last ( take (dec n)\n         (iterate \n            (fn[s](\n                   conj s (+ \n                           (nth s (- (count s) 1))\n                           (nth s (- (count s) 2))\n                          )\n             ))\n            [1 1]\n         )\n        )\n))","user":"56039843e4b04bb52996e1be"},{"code":"(fn [x]\n  (take x\n    (rest\n     (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"52f4580de4b05e3f0be25f21"},{"problem":26,"code":"#(let [fib-seq (fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b)))))]\n           (take % (drop 1 (fib-seq 0 1))))","user":"58949f8de4b00487982d525e"},{"problem":26,"code":"(fn [i] \n(loop [x i acc [1 1]]\n  (if (< x 3)\n    acc\n    (recur (- x 1)(conj acc (+ (last acc)(second (reverse acc))))))))","user":"57f2bf56e4b0511f1d294df8"},{"code":"#(loop [x [1 1]]\n  (if (= (count x) %) x\n   (recur \n     (conj x\n       (+ \n         (nth x (- (count x) 2)) \n         (last x)) ))))","problem":26,"user":"50856bd1e4b004985b776e4c"},{"problem":26,"code":"(fn [remaining & fibs]\n  (if (empty? fibs)\n    (recur (- remaining 2) [1 1])\n    (if (zero? remaining)\n      fibs\n      (recur (- remaining 1) (conj fibs (+ (last fibs) (nth fibs (- (count fibs) 2)))))\n    )\n  )\n)","user":"55990d3ce4b031d6649c9ba3"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fb\n            ([] (fb 0 1))\n            ([x y] (cons y (lazy-seq (fb y (+ x y)))))\n          ))))","user":"58c7131be4b021aa9917ed6d"},{"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n  \n)","problem":26,"user":"4e333091535deb9a81d77f25"},{"code":"(fn fibonaccis [n] (take n ((fn lazy-fibonacci [a b] (lazy-seq (cons a (lazy-fibonacci b (+ a b))))) 1 1)))","problem":26,"user":"53028354e4b0d8b024fd372b"},{"problem":26,"code":"#(take %\n       ((fn fib []\n          (lazy-cat [1 1]\n                    (map + (fib) (rest (fib)))))))","user":"5652dd89e4b0f9d632dd8469"},{"problem":26,"code":"(fn [n] (drop 1 (reduce #(if (> n %2) (conj %1 (+ (nth %1 %2) (nth %1 (dec %2)))) %1) [0 1] (map inc (range n)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":26,"code":"(fn fib\n  ([n] \n   (fib (- n 2) '(1 1)))\n  ([n lst]\n   (if (= n 0)\n     (reverse lst)\n     (fib\n      (dec n)\n      (conj lst (+ (first lst) (first (rest lst))))))))","user":"59089229e4b047aa04b1997c"},{"problem":26,"code":"(fn [x] \n  (nth (iterate #(conj % (apply + (take-last 2 %))) \n                [1 1]) \n       (- x 2)))","user":"5f2c04dde4b033932238a660"},{"code":"#(take % (list* 1 (map first\r\n    (iterate (fn [[m n]] [(+ m n) m]) [1 1]))))","problem":26,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [n]\r\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4dd59d8b535dae65d5c462eb"},{"problem":26,"code":"(fn fibber [n] \n  (map (fn fib [x] (if (< x 3) 1 (+ (fib (dec x)) (fib (- x 2)) ) )) \n       (range 1 (inc n))))","user":"56f188e9e4b04a395b9a0494"},{"problem":26,"code":"#(take % ((fn fib\n    [a b]\n    (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5a99b863e4b0d174b936c7ae"},{"problem":26,"code":"#(reduce (fn [acc x] (conj acc (+ (last acc) (first (take-last 2 acc))))) [1 1] (take (- % 2) (range)))","user":"57299c57e4b0c6e51e0d2b1e"},{"problem":26,"code":"#(->> [1 1] \n      (iterate (fn [[a b]] [b (+ a b)]) ) \n      (map first ) \n      (take % ))","user":"5b118b7be4b0cc2b61a3be34"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 0\n         xs '()]\n    (if (> i n)\n      (-> xs butlast reverse)\n      (recur (inc i)\n             (if (#{0 1} i)\n               (conj xs i)\n               (conj xs (+ (first xs) (second xs))))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":26,"code":"(fn [n]\n  (let \n    [fib-next-pair (fn [[a b]] [b (+ a b)])\n     fib-pairs (iterate fib-next-pair [0 1])\n     fib-seq (map first fib-pairs)]\n   (take n (rest fib-seq))))","user":"5458c74de4b01be26fd74623"},{"code":"(fn [x]\n  (let [lazy-fib (fn l-fib [a b] (lazy-seq (cons a (l-fib b (+ a b)))))]\n    (take x (lazy-fib 1 1))))","problem":26,"user":"534941d1e4b084c2834f4a60"},{"code":"(fn [n]\r\n    (loop [fibonacci-seq [1 1] remaining (- n 2)]\r\n      (if (zero? remaining)\r\n        fibonacci-seq\r\n        (let [length (count fibonacci-seq)\r\n              a (nth fibonacci-seq (- length 2))\r\n              b (nth fibonacci-seq (- length 1))]\r\n          (recur (conj fibonacci-seq (+ a b))\r\n            (dec remaining))))))","problem":26,"user":"4ef3f5b0535dced4c769f22f"},{"code":"(fn [fibs]\r\n  (loop [x [1 1]\r\n       n fibs]\r\n  (if (< n 3)\r\n    x\r\n    (recur (conj x (+ (last x) (last (butlast x)))) (dec n)))))","problem":26,"user":"4f9aa97ae4b0dcca54ed6d0e"},{"code":"#(loop [v '[1 1] cnt 1] \n   (if (= (- % 1) cnt) \n     (reverse v)\n     (recur (cons (+ (second v) (first v)) v) (+ 1 cnt))))","problem":26,"user":"4e72a717535d5021c1a89665"},{"code":"#(let [limit %](loop [p 2 a 1 b 1 r [1 1]]\n  (if (= p limit)\n     r\n     (recur (inc p) b (+ a b) (conj r (+ a b))))))","problem":26,"user":"4f3ad7f0e4b0e243712b1f1d"},{"code":"(fn fiblist [n] (map (fn fib [n] (if (<= n 1) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range n)))","problem":26,"user":"53710c09e4b0fc7073fd6ea5"},{"problem":26,"code":"(fn Fibonacci-Sequence\n  [n]\n  (loop [i 0\n         x n\n         a 1\n         b 1\n         lst ()]\n    (cond\n      (= i (- x 1) ) (cons 1 (reverse lst))\n      :else (recur (inc i) x b (+ a b) (cons b lst)))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":26,"code":"(fn [it]\n              (loop [iterations it, acc []]\n                (if (= iterations 0)\n                  acc\n                  (let [acc-size (count acc)\n                        last-element (nth acc (dec acc-size) 1)\n                        next-to-last-element (nth acc (- acc-size 2) 0)\n                        new-acc (conj acc (+ last-element next-to-last-element))]\n                    (recur (dec iterations) new-acc))\n                  )))","user":"53b0765ae4b047364c044484"},{"problem":26,"code":"(fn\n  [nfibs]\n  (loop [n nfibs fibs '(1 1)]\n    (cond      \n      (= nfibs 1) '(1)\n      (= nfibs 2) '(1 1)\n      (= n 2) (reverse fibs)\n      :else\n      \t(recur (dec n) (cons (+ (first fibs) (second fibs)) fibs)))))","user":"572a997ce4b0f4d77e65123e"},{"code":"#(map first (take % (iterate (fn [[a b]]\n           [b (+ a b)]) [1 1])))","problem":26,"user":"4fc8769be4b0ee37620e1833"},{"problem":26,"code":"#((fn f [s p n] (if (= 0 n) (list s p) (concat (list s) (f p (+ s p) (dec n))))) 1 1 (- % 2))","user":"553c05b7e4b09218d5f45011"},{"code":"#(map % (range %2)) (fn fib [x]\n                        (if (< x 2) 1 (+ (fib (- x 2)) (fib (dec x)))))","problem":26,"user":"53528cd3e4b084c2834f4af2"},{"code":"(fn [n]\n  (take n\n    (map\n      last\n      (iterate \n        (fn [[a b]] [b (+ a b)]) \n        [0 1]))))","problem":26,"user":"4e7f7e48535db966e863cc42"},{"code":"#(take % \n       ((fn f [a b] \n          (lazy-seq \n           (cons a \n                 (f b (+ a b)))\n           )\n          ) 1 1)\n       )","problem":26,"user":"4edd038c535d10e5ff6f5327"},{"problem":26,"code":"(fn [n] (loop [amt n res [1 1]] (if (= 2 amt) res (recur (dec amt)(conj res (+ (nth res (dec (count res))) (nth res (- (count res) 2))))))))","user":"5a67069ce4b0512ff01cd9d9"},{"problem":26,"code":"(fn [x] (loop [cnt (- x 2) coll '(1 1)] (if (zero? cnt) coll (recur (dec cnt) (concat coll [(+ (nth coll (- (count coll) 1)) (nth coll (- (count coll) 2)))])))))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn [x] \n  (map\n    (fn fib [n]\n      (cond\n       (= n 0) 0\n       (= n 1) 1\n       :else (+ (fib (- n 1)) (fib (- n 2)))))\n   (range 1 (inc x))))","problem":26,"user":"51c2fc7de4b0d204dbe2ca2e"},{"problem":26,"code":"(fn [x]\n (letfn [(fib ([] (fib 1 1))\n  ([n m] (lazy-seq \n   (cons n (fib m (+ m n))))))]\n  (take x (fib))))","user":"5a8ebd9ae4b05369db4d252b"},{"problem":26,"code":"(fn first-fibs-2 [x]\n  (if (< x 1) []\n      (loop [i 1 f1 0 f2 1 result [1]]\n        (if (= i x) result\n            (recur (inc i) f2 (+ f1 f2) (conj result (+ f1 f2)))))))","user":"5e3e0b3fe4b01d43a70e8e1e"},{"problem":26,"code":"#(loop [fibs [1 1]]\n   (if (= (count fibs) %)\n     fibs\n     (recur (conj fibs (+ (last fibs) (last (butlast fibs)))))))","user":"5a099c98e4b01bb0ae8afe11"},{"code":"(fn [n]\n  (take n (map first \n               (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"50630247e4b05ac47bc68d6b"},{"code":"(fn [n]\n  (loop [n n a 0 b 1 xs nil]\n    (if (zero? n) (reverse xs)\n      (recur (dec n) b (+ a b) (conj xs b)))))","problem":26,"user":"526f2e16e4b03e8d9a4a7353"},{"problem":26,"code":"#(last (take (dec %) (iterate (fn [s] (conj s (+ (last s) (last (butlast s))))) [1 1])))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [n] (reduce #(conj % (reduce + (drop (dec %2) %))) [1] (range (dec n))))","problem":26,"user":"4e6b3fc8535d8ccf87e9ff0f"},{"problem":26,"code":"(fn  [n]\n  (loop [i 1 f [0 1]]\n    (if (== i n) (rest f)\n      (recur  (inc i) (conj f (+ (last f) (last (pop f))))))))","user":"58606948e4b0f14aab7c87d5"},{"problem":26,"code":"(fn [n] (take n ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)\n      ))","user":"556204c2e4b0c656e3ff17d2"},{"code":"(fn my-fib [c]\n(take c (drop 1 ((fn fib [a b]\n                  (cons a (lazy-seq (fib b (+ a b))))) 0 1))))","problem":26,"user":"4f6e7073e4b07046d9f4efd8"},{"problem":26,"code":"(fn [th]\n  (loop [a 1 b 2 n 1 col '(1)]\n    (if (= n th)\n      (reverse col)\n      (recur b (+ b a) (inc n) (conj col a)))))","user":"52946307e4b02ebb4ef7500a"},{"problem":26,"code":"#(loop [v [1]]\n   (if (= (count v) %)\n     v\n     (recur (conj v (reduce + (take-last 2 v))))))","user":"58e9e7c0e4b056aecfd47d11"},{"problem":26,"code":"(fn [x]\n (if (< x 3)\n  (repeat x 1)\n    (nth  (iterate #(conj % (+ (nth (reverse %) 1) (last %))) [1 1]) (- x 2))))","user":"57af6cf4e4b0fbc9809a2735"},{"problem":26,"code":"(fn fib [n] (if (= n 2) (vector 1 1) \n                                 (conj (fib (- n 1)) (reduce + (take-last 2 (fib (- n 1))))\n                                                             )))","user":"5dbd86bce4b09f47823971bf"},{"code":"(fn [n]\n  (loop [x n a 0 b 1 acc []]\n    (if (= x 0)\n      acc\n    (recur (dec x) b (+ a b) (conj acc b)))))","problem":26,"user":"516199bbe4b009fba0926e36"},{"problem":26,"code":"(fn fib \n  ([n] \n   (reverse (fib '(1 1) n)))\n  ([acc n]\n   (if (< (count acc) n)\n     (fib (cons (+ (first acc) (second acc)) acc) n)\n     acc\n     )\n   )\n  )","user":"5713e307e4b07c98581c3aaf"},{"problem":26,"code":"(fn [n] \n  ((fn f [a b k xs]\n    (if (= k 0)\n      xs\n      (f b (+ a b) (- k 1) (conj xs b))\n    )\n  ) 0 1 n []))","user":"55e60a45e4b050e68259b481"},{"problem":26,"code":"(fn f \n  ([n] \n    (f [] 0 1 n))\n  ([ls x y n] \n    (if (zero? n) \n      ls \n      (recur (conj ls y) y (+ x y) (dec n)))))","user":"5f3ca097e4b004f08c61c546"},{"problem":26,"code":"(fn [num] (loop [x num\n                   y 0\n                   z 1\n                   result []]\n              (if-not (> x 0)\n                result\n                (recur (dec x)\n                       (+ z y)\n                       (+ y 1)\n                       (conj result z)))))","user":"5e70c16de4b085ba37836dae"},{"code":"(fn [c]\n  (loop [z c f '(1 1)]\n    (if (< z 3)\n        (take c (reverse f))\n        (recur (dec z) (conj f (+ (first f) (second f)))))))","problem":26,"user":"4fbe400be4b081705acca30e"},{"code":"#(reverse\n         (cond\n          (zero? %) nil\n          (= 1 %) '(1)\n          (= 2 %) '(1 1)\n          :else (loop [s '(1 1)\n                   n (- % 2)]\n                   (if (zero? n) s\n               (recur (cons (+ (first s) (second s)) s) (dec n))))))","problem":26,"user":"4f1af7e4535d64f603146471"},{"code":"(fn fib [n]   (cond    (== n 1) '[1]    (== n 2) '[1 1]    :else (let [r (fib (- n 1))]              (conj r (+ (nth r (- n 2)) (nth r (- n 3)))))))","problem":26,"user":"509a5884e4b0efbae1fbc0aa"},{"problem":26,"code":"(fn fib [n]\n  (loop [i n\n         res '(1 1)]\n    (if (< i 3) (take n (reverse res))\n      (recur (dec i) (conj res (+ (first res) (second res)))))))","user":"5c7d5463e4b0d597f478caa9"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1]))))","problem":26,"user":"4eb3fcba535d7eef30807359"},{"problem":26,"code":"#((fn [a b c lst] (if (= c 0) lst (recur b (+ b a) (- c 1) (conj lst a)))) 1 1 % [])","user":"56d6c18ee4b0ea9b8538f7d1"},{"problem":26,"code":"#(take % \n       ((fn fib [a b] \n           (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"553fa883e4b0a04f792994f9"},{"problem":26,"code":"(fn [n]\n  (take n  ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"57df4cb5e4b0bd073c202463"},{"code":"(fn [n]\n  (loop [x 1\n         coll []]\n    (if (= x (+ n 1)) \n      coll\n      (case x\n        1 (recur (inc x) (conj coll 1))\n        2 (recur (inc x) (conj coll 1))\n        (let [[l1 l2] (take-last 2 coll)\n              v (+ l1 l2)]\n        (recur (inc x) (conj coll v)))))))","problem":26,"user":"5180af54e4b0e3fc13e244e9"},{"code":"(fn fib [n] (cond (= n 1) [1]\n  \t(= n 2) [1 1] \t\n\t\t:else (let [p (fib (- n 1))] (conj p (+ (last p) (-> p drop-last last))))))","problem":26,"user":"500ec491e4b00fff93030f9e"},{"problem":26,"code":"(fn fib [idx]\n  (loop [a '(1 1)\n         idx (- idx 2)]\n    (if (zero? idx)\n      (reverse a)\n      (recur (conj a (+' (first a) (second a)))\n             (dec idx)))))","user":"5faece16e4b08cb800c85b02"},{"problem":26,"code":"(fn fib [n]\n  (take n ((fn fibo [x y] \n               (cons x \n                     (lazy-seq \n                      (fibo y (+ x y))))) \n           1 1)))","user":"5e95013fe4b0fbed045a3800"},{"problem":26,"code":"#(take % (map first (iterate (fn[[x y]] [y (+ x y)]        \n                 )[1 1] )))","user":"5ed8bd07e4b0c7845d86b0d8"},{"problem":26,"code":"#(take % ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b)))))1 1))","user":"54708efce4b00cfc9eacc1b9"},{"problem":26,"code":"#(take % (map first (iterate \n               (fn [[a b]] [b (+ a b)]) [1 1])))","user":"57a1ef58e4b0c3d858beb8f3"},{"problem":26,"code":"#(reduce\n  (fn [a b] (conj a (+' (last a) (last (butlast a)))))  \n  [1 1]                      \n  (range (- % 2)))","user":"5e121a89e4b099d064962fe4"},{"code":"(fn fib\r\n  ([num]\r\n    (fib num 1 1))\r\n  ([num n1 n2]\r\n    (if (> num 0)\r\n    (cons n1 (fib (- num 1) n2 (+ n1 n2))))))","problem":26,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"#(take %\n       (map first\n            (iterate (fn [[i j]] [j (+ i j)])\n                     [1 1])))","problem":26,"user":"538557aee4b06839e8705f02"},{"problem":26,"code":"#(loop [numbers [] n 1 before-sum 0 previous-sum 1] (if (<= n %) (recur (conj numbers previous-sum) (+ n 1) previous-sum (+ previous-sum before-sum)) numbers))","user":"5f757c1ce4b02876ed9fd0aa"},{"problem":26,"code":"(fn\n\t[n]\n\t(map\n\t\tlast\n\t\t(take n\n\t\t\t(iterate\n\t\t\t\t(fn [[x y]] [y (+ x y)])\n\t\t\t\t[0 1]\n\t\t\t)\n\t\t)\n\t)\n)","user":"550b5a53e4b06e50f9beb142"},{"problem":26,"code":"(fn [i]\n  (cond (= i 0) '()\n        (= i 1) '(1)\n        (= i 2) '(1 1)\n        :else\n        (loop [coll '(1 1)\n               count-coll 2]\n          (if (= count-coll i)\n            (reverse coll)\n            (recur (conj coll (+ (first coll) (second coll)))\n                   (inc count-coll))))))","user":"5e724492e4b085ba37836dc7"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([n] (take n (fib)))\n  ([n1 n2] (cons n1 (lazy-seq (fib n2 (+ n1 n2))))))","user":"5c63e034e4b0fca0c1622668"},{"code":"(fn [x]\n  (letfn [(f [n]\n            (cond (= n 0) 0\n                  (= n 1) 1\n                  :else (+ (f (- n 1)) (f (- n 2)))))]\n    (map f (range 1 (+ x 1)))))","problem":26,"user":"4f5dae33e4b0030a34fb2b41"},{"problem":26,"code":"[1 1 1 [1 1 2] 1 1 [1 1 2 3 5 8] 1 [1 1 2 3 5 8 13 21]]","user":"54665910e4b01be26fd746e5"},{"code":"(fn fib\n    ([n] (fib n [1, 1]))\n    ([n acc]\n        (if (= (count acc) n)\n            acc\n            (fib n (concat acc [\n                (+ (first (reverse acc))\n                   (first (rest (reverse acc))))])))))","problem":26,"user":"501306dee4b0c87326002231"},{"code":"(fn fibseq [x]\n  (cond \n    (< x 1) []\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (let [prev (fibseq (dec x))]\n            (conj prev (apply + (take-last 2 prev))))))","problem":26,"user":"53834ed3e4b06839e8705edb"},{"problem":26,"code":"(fn fib [in]\n   (if (= in 1)\n      [1]\n\t  (if (= in 2)\n\t  [1 1]\n\t  (let [x (fib (- in 1))] \n\n\t\t(conj x (+ (last x) (first (rest (reverse x))))))\n\t  )))","user":"5f3e58dae4b004f08c61c555"},{"code":"(fn fib [x]\n  (take x\n    (map first\n      (iterate (fn fib-iter [[a b]]\n                  [b (+ a b)])\n               [1 1]))))","problem":26,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"#(loop [curr 1 times (- % 1) result [1]]\n      (if (zero? times)\n          result\n        (recur (+ curr (last result)) (dec times) (conj result curr))))","problem":26,"user":"5331205fe4b019098a6f8b64"},{"problem":26,"code":"(fn [n]\n  (reverse (case n\n     1 '(1)\n     2 '(1 1)\n     (loop [result '(1 1)]\n       (if (< (count result) n)\n         (recur (cons (+ (first result) (first (rest result))) result))\n         result)))))","user":"577629abe4b0979f8965162e"},{"problem":26,"code":"(fn fib ([n] (if (<= n 0) '() (if (= 1 n) '(1) (reverse (fib n '(1 1) ))))) ([n l] (if (<= n 2) l (fib (dec n) (cons (+ (first l) (second l)) l)))))","user":"5d1e19c4e4b02ea6f0fb69af"},{"problem":26,"code":"(fn [x] (map (fn fibb [n] (if (< n 3)\n                    1\n                    (+ (fibb (- n 1)) (fibb (- n 2)))))\n     (range 1 (+ x 1))))","user":"551ebcd7e4b08d5046aa8a4a"},{"problem":26,"code":"#(map\n  (fn fib [n]\n  (cond (= n 1) 1\n        (= n 2) 1\n        :else (+ (fib (- n 1))\n           \t     (fib (- n 2)))))\n  (range 1 (inc %)))","user":"602bfcefe4b0d5df2af22268"},{"problem":26,"code":"(fn [index]\n  (cond (= 1 index) [1]\n        (= 2 index) [1 1]\n        :else (loop [cur-index 3\n                     acc [1 1 2]]\n                (if (= index cur-index) \n                  acc\n                  (recur (inc cur-index) (conj acc (+ (last acc) (nth acc (- (count acc) 2)))))))))","user":"53cb30f0e4b00fb29b2212d0"},{"problem":26,"code":"(fn [n]\n   (cond\n  \t(= n 1) (seq 1)\n  \t(= n 2) (seq 1 1)\n  \t:else\n      (loop [x1 1 x2 1 l [1 1]]\n        (if (< (count l) n)\n          (recur x2 (+ x1 x2) (conj l (+ x1 x2)))\n          (seq l)))))","user":"5ca04cc3e4b048ec896c5b69"},{"problem":26,"code":"#(take % \n       (map last\n            (iterate\n             (fn [[x y]] [y (+ x y)])\n             [ 0 1])))","user":"550fa523e4b06e50f9beb17a"},{"problem":26,"code":";(fn [n]\n;  (if (< n 3)\n;    (cond = n\n;          0 '()\n;          1 '(1)\n;          2 '(1 1))\n;    (loop [l '(1 1)\n;           x (- n 2)]\n;      (println l x)\n;      (if (zero? x)\n;        (reverse l)\n;        (recur (conj l (+ (first l) (second l))) (dec x))))))\n\n#(take %\n       (map first\n            (iterate (fn [[i1 i2]]\n                       [i2 (+ i1 i2)])\n                     [1 1])))","user":"5f6a583ae4b02876ed9fd046"},{"problem":26,"code":"(fn [n]\n                      (cond \n                        (= n 1) [1]\n                        (= n 2) [1 1]\n                        true (loop [i 2 s [1 1]]\n                               (let [n-1 (first (reverse s))\n                                     n-2 (second (reverse s))]\n                                 (if (= i n)\n                                   s\n                                   (recur (inc i) (conj s (+ n-2 n-1))))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":26,"code":"(fn[N]\n    (reverse (loop [n 0 l '()]\n    (if  (< n N)\n      (recur (+ n 1) (if (or (= n 0) (= n 1))\n             (conj l 1)\n             (conj l (+ (first l) (nth l 1)))))\n      l)\n    )))","user":"508fda91e4b0ea685a20f76f"},{"problem":26,"code":"(fn [n]\n  (if (= 0 n)\n    '()\n    (if (= 1 n)\n      '(1)\n      (loop [n-left (- n 2)\n             fib '(1 1)]\n        (let [reversed (reverse fib)]\n          (if (= n-left 0)\n            fib\n            (recur (dec n-left)\n                   (reverse (conj reversed\n                                  (+ (first reversed)\n                                     (second reversed)))))))))))","user":"540d0087e4b0addc1aec670b"},{"code":"(fn [n]\n      (take n\n            ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y)))))\n             1 1)))","problem":26,"user":"509e62a8e4b08df8156e9e2e"},{"problem":26,"code":"(fn [n] (nth (iterate (fn [s] (conj s (+ (last s) (last (butlast s))))) [1 1]) (- n 2)))","user":"54c968bfe4b045293a27f66f"},{"code":"(fn fib  ([idx] (fib idx '(1 1)))\n        ([idx lst]\n           (cond\n            (= idx 2) (reverse lst)\n            :else (recur (- idx 1) (conj lst (reduce + (take 2 lst)))))))","problem":26,"user":"534f3c57e4b084c2834f4ac7"},{"code":"(fn [n] (loop [a 0 b 1 n n s []] (if (zero? n) s (recur b (+ a b) (dec n) (conj s b)))))","problem":26,"user":"4f0cc259535d0136e6c22310"},{"code":"(fn fib [i]\n  (condp = i\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    (concat (fib (- i 1)) (list (+ (last (butlast (fib (- i 1)))) (last (fib (- i 1))))))))","problem":26,"user":"4e9e12b2535dbda64a6f6b92"},{"code":"#(condp = %\n  1 '(1)\n  2 '(1 1)\n  (reverse (loop [acc '(1 1) n 2]\n    (if (= n %)\n      acc\n      (recur (conj acc (+ (first acc) (nth acc 1))) (inc n))))))","problem":26,"user":"507a08e4e4b08327cd804a67"},{"code":"(fn [x] \n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f03ba9c535dcb61093f6b58"},{"problem":26,"code":"(fn f [n]\n  (take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])) ))","user":"54f5aa4ce4b0f2f3c5226e94"},{"problem":26,"code":"(fn f ([n] (case n \n1 [1]\n2 [1 1]\n(f (- n 2) (f 2))))\n([n prev]\n  (if (= 0 n) prev\n  (let [[n1 n2] (rseq prev)]\n     (recur (- n 1) (conj prev (+ n2 n1)))))))","user":"5e373c08e4b0650de70e2b41"},{"code":"(fn fib\n  [i]\n  (cond (= i 1) [1]\n        (= i 2) [1 1]\n    \t:else (let [p (fib (- i 1))]\n                   (conj p (+ (p (- (count p) 1)) \n                              (p (- (count p) 2)))))))","problem":26,"user":"4ff937f2e4b0678c553fc3a6"},{"code":"(fn [n]\r\n  (loop [cnt 0, a 0, b 1, fib []]\r\n    (if (= cnt n)\r\n      fib\r\n      (recur (inc cnt) b (+ a b) (conj fib b)))))","problem":26,"user":"4e131d5b535d04ed9115e7d4"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0 act 1 size 1 res [1]]\n    (if (= size n) \n      res\n      (let [new (+ prev act)]\n        (recur act new (inc size) (conj res new))\n        )\n      )\n    )\n  )","user":"602cc4d4e4b0d5df2af22274"},{"problem":26,"code":"(fn fibb [x]                                                                \n    (loop [n 1                                                                \n           l '[0 1]]                                                          \n          (if (>= n x)                                                         \n              (take-last x l)                                                 \n              (recur (+ n 1) (conj l (+ (last l) (nth l (- (count l) 2))))))))","user":"5b9acb23e4b0c0b3ffbd4aef"},{"problem":26,"code":"(fn [n] (take n (map first (iterate #(let [[a b] %] [b (+ a b)]) [1 1]))))","user":"5510aa92e4b06e50f9beb188"},{"problem":26,"code":"#(loop [m '(1 1)]\n   (if (= % (count m))\n     (reverse m)\n     (recur (conj m (apply + (take 2 m))))))","user":"55c3c1b0e4b0e31453f6498c"},{"code":"(fn [cou] ( \n  let [ li '(1 1) \n         cou (- cou 2)\n         fib ( fn fib1[ cou li]                                                     \n                 ( if ( = cou 0 ) \n                 ( reverse li) \n                 ( fib1 (dec cou) (conj li (+ (first li) (first(rest li)))))))   ] (fib cou li) \n                ))","problem":26,"user":"4f030775535dcb61093f6a43"},{"code":"(fn [x](take x [1 1 2 3 5 8 13 21]))","problem":26,"user":"4e2ab05e535deb9a81d77f01"},{"code":"(fn [n]\n  (let [fib (map second (iterate #(vector (second %) (+ (first %) (second %))) '(0 1)))]\n    (take n fib)))","problem":26,"user":"5163b06be4b055933a9ca030"},{"problem":26,"code":"(fn\n  [n]\n  (cond\n    (= n 0) nil\n    (= n 1) (seq [1])\n    :else (loop [f2 0 f1 1 c 0 acc []]\n            (if (= c n)\n              (seq acc)\n              (recur f1 (+ f2 f1) (inc c) (conj acc f1))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":26,"code":"(fn [x]\n    (loop [c 1 c1 0 c2 1 res []]\n      (cond (> c x) res            \n          (= c 1) (recur (inc c) 1 1 (conj res 1))\n            (= c 2) (recur (inc c) 1 1 (conj res 1))\n          :else (recur (inc c) c2 (+ c1 c2) (conj res (+ c1 c2)))\n      )\n    )\n  )","user":"57f28b22e4b0511f1d294def"},{"problem":26,"code":"(fn [x] (rest (take (+ x 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]) ))) )","user":"55253c20e4b0882d96d091d1"},{"code":"(fn [n] (map (fn f [x] \n               (cond \n                (zero? x) 1 \n                (= x 1) 1 \n                :else (+ (f (- x 1)) (f (- x 2)))\n                )\n               )\n             (range n)))","problem":26,"user":"515c75b0e4b069911535cf0f"},{"problem":26,"code":"#(loop\n   [a 1\n    b 1\n    acc []\n    n %]\n   (if (= 0 n)\n     acc\n     (recur b (+ a b) (conj acc a) (dec n))))","user":"5daa1fc8e4b000c986472c3e"},{"problem":26,"code":"(fn [n]\n  (if (= n 1) [1])\n  (if (= n 2) [1 1])\n  (loop [ct 2 fib [1 1] ret [1 1]]\n    (if (= ct n)\n      ret\n      (recur (inc ct) [(last fib) (apply + fib)] (concat ret [(apply + fib)])))))","user":"5a6a7cc5e4b0512ff01cda27"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [prev (fib (dec n))]\n           (conj prev (+ (last prev) (last (butlast prev)))))))","user":"58ef4db9e4b056aecfd47dc6"},{"problem":26,"code":"(fn tom [a b n] (if (= n 0) () (cons b (tom b (+ a b) (- n 1)) ))) 0 1","user":"57e404a3e4b0bfb2137f5ab1"},{"code":"(fn[x] ( take x (map first \n  (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4eb0175b535d7eef30807336"},{"code":"(fn [n] (reverse (reduce (fn [xs x] (cons (reduce + (take 2 xs)) xs)) '(1) (range 1 n))))","problem":26,"user":"4ef8d47c535dced4c769f261"},{"problem":26,"code":"(fn [n]\n  (map first\n       (take n\n             (iterate (fn [[a b]]\n                        [b (+ a b)])\n                      [1 1]))))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":26,"code":"#(loop [x % res [1 1] n 1 pren 1]\n   (    if (not= 2 x)  (   recur (dec x)  (conj res (+ n pren))  pren  (+ n pren)  )  res  )   )","user":"594e3723e4b07ddc2dafaea8"},{"problem":26,"code":"(fn [n]\n  (reverse\n    (reduce (fn [acc _x] (let [[a b & _] acc n (+ a b)] (cons n acc)))\n            '(1 1)\n            (range 1 (- n 1)))))","user":"5f0ccff2e4b0f30dddfb5d4f"},{"code":"(fn [n] \r\n  (let [fib-step (fn [[a b]] [b (+ a b)])]\r\n    (take n (map first (iterate fib-step [1 1])))))","problem":26,"user":"4ddcabcb535d6ebe9be03f52"},{"problem":26,"code":"(fn fb [n]\n  (take n '(1 1 2 3 5 8 13 21)))","user":"562c4b79e4b058fa18c5a6db"},{"problem":26,"code":"(fn fib-seq [x] (if (= 1 x) '(1) (if (= 2 x ) '(1 1)  (reverse (cons (+ (last (fib-seq (- x 1))) (last (fib-seq (- x 2)))) (reverse (fib-seq (- x 1))))))))","user":"5edb9dd2e4b0c7845d86b0ef"},{"problem":26,"code":"(fn [size]\n  (take size\n        ((fn fib-seq [a b] (cons a (lazy-seq (fib-seq b (+ a b))))) 1 1)))","user":"53571732e4b04ce2eb3ed275"},{"problem":26,"code":"(fn print-fib [n]\n    (map \n      (fn fib [x]\n        (case x\n        1 1\n        2 1\n        (+ (fib (dec x)) (fib (dec (dec x)))))) \n      (range 1 (inc n))))","user":"56bb652ae4b0f26550335953"},{"problem":26,"code":"#(take % ( map last (iterate (fn [[x y]] [y (+ x y)] )[0 1])))","user":"5758bd91e4b02ea114799311"},{"problem":26,"code":"#(take % (map first (iterate(fn [[a b]] [b (+ a b)]) [1 1])))","user":"53d91412e4b0e771c3025474"},{"problem":26,"code":"(fn f [n] (if (= n 1) [1] (if (= n 2) [1 1] (let [s (f (dec n))] (conj s (reduce + (take-last 2 s)))))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [count]\n  (let\n    [gen\n      (fn gen \n        [a b] (lazy-seq (cons (+ b a) (gen b (+ b a)))))]\n    (take count (concat [1 1] (gen 1 1)))))","problem":26,"user":"4e6f578c535d5021c1a8961b"},{"problem":26,"code":"(fn fab [n]\n  (map\n   (fn fib [i]\n     (if (= 1 i) 1\n       (if (= 2 i) 1\n         (+ (fib (- i 1)) (fib (- i 2)))\n            )))\n   (range 1 (+ 1 n))\n   ))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":26,"code":"#(loop [x 0\n       y [0 1]]\n  (if-not (> x (- % 2))\n    (recur\n     (inc x)\n     (conj y\n           (+ (nth y x) (nth y (inc x)))))\n    (seq (rest y))))","user":"5b9783dae4b0c0b3ffbd4a93"},{"problem":26,"code":"(fn [x](take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5b445421e4b02d533a91bc40"},{"problem":26,"code":"(fn [x] (reduce (fn [s x] (conj s ((fn fibo [n] (if (= 0 n) 1 (if (= 1 n) 1 (+ (fibo (- n 1)) (fibo (- n 2)))))) x)))  [] (range x)))","user":"5a5894d9e4b05d388ecb6c81"},{"code":"(fn [fab]\n  (loop [count fab acc [] m 0 n 1]\n    (if (zero? count)\n      (list* acc)\n      (recur (dec count) (conj acc n) n (+ m n))\n    )\n  )\n)","problem":26,"user":"525b4e8de4b0cb4875a45d0f"},{"problem":26,"code":"#(take %\n       ((fn fib [a b] \n          (cons a (lazy-seq \n                         (fib b (+ a b)))))\n        1 1))","user":"5609816ee4b0053d1b86c7e1"},{"problem":26,"code":"(fn [x]\n (condp = x\n   \t0 (list)\n    1 '(1)\n    (loop [i '(1 1) c (- x 2)]\n      (if (zero? c)\n        (reverse i)\n        (recur (cons (+ (first i) (second i)) i)\n               (dec c))))))","user":"56012cd7e4b04bb52996e17d"},{"code":"(fn [n] \n  (let [f1 (fn [l i]  \n            (if (= i 0)  (reverse l)\n              (recur (conj l (+ (first l) (second l))) (dec i))))]\n    (f1 '(1 1) (- n 2))\n  ) )","problem":26,"user":"531902b1e4b08068f379ed77"},{"code":"#(reverse (reduce (fn [l _] (cons (+ (first l) (second l)) l)) [1 1] (range (- % 2))))","problem":26,"user":"4edb4c7c535d10e5ff6f5318"},{"problem":26,"code":"(fn [n]\n  (loop [n n ret '()]\n    (if (= n 0)\n      (reverse ret)\n      (if (empty? ret)\n        (recur (dec n) '(1))\n        (if (= ret '(1))\n          (recur (dec n) '(1 1))\n          (recur (dec n) (conj ret (+ (first ret) (second ret))\n                )))))))","user":"56a1227fe4b0542e1f8d14ac"},{"code":"#(take %\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4fefd624e4b0678c553fc31b"},{"problem":26,"code":"#(->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take %))","user":"5f663bc0e4b02876ed9fd02d"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (loop [k 3\n          fibs '(1 1)]\n     (if (> k n)\n       fibs\n       (recur (inc k) (cons (+ (first fibs) (first (rest fibs))) fibs))))))","user":"545944a2e4b01be26fd74627"},{"problem":26,"code":"#(loop [n % u 1 v 1 f [1 1]]\n   (if (= 2 n)\n     f\n     (recur (dec n) (+ u v) u (conj f (+ u v)))))","user":"54349368e4b0b6b47310fcf1"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 0\n         cnt n\n         res ()]\n    (if (= cnt 0)\n      (reverse res)\t\t\n      (recur (+ a b) a (dec cnt) (conj res a)))))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":26,"code":"(fn [cnt]( take cnt ((fn fibo []\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))))","user":"5463c452e4b01be26fd746c4"},{"code":"(fn [x]\n  (rest (reduce (fn [x _] (conj x (+ (last x) (second (reverse x))))) [0 1] (range (dec x))))\n  )","problem":26,"user":"51980f7ce4b068aa333628f7"},{"problem":26,"code":"(fn [x] (map first (take x (iterate (fn [[a,b]] [b,(+ a b)]) [1,1]))))","user":"547e48bee4b0c51c1f4d7304"},{"problem":26,"code":"(fn [n]\n  (loop [result []\n         a 1\n         b 1]\n    (if (= (count result) n) result\n      (recur (conj result a) b (+ a b)))))","user":"59cc8d8de4b0a024fb6ae5d5"},{"problem":26,"code":"(fn fibr \n    ([x]\n        (fibr x '(1 1)))\n    ([x v]\n    (dec x)\n    (if (= 2 x)\n        (reverse v)\n        (fibr (dec x) (conj v (+ (first v) (second v)))))))","user":"5cb4e764e4b026601754b929"},{"problem":26,"code":"(fn [x]\r\n  (->>\r\n    (iterate (fn [[a b]] [b (+ a b)])\r\n             [1 1])\r\n    (map first)\r\n    (take x)))","user":"606e0a42e4b069485764de19"},{"code":"(fn fib-seq3 [n] \n (cond\n  (= 1 n) '(1)\n  :else (let [prev (fib-seq3 (dec n))]\n    (concat prev (list (reduce + (take-last 2 prev)))))))","problem":26,"user":"4e2d562c535deb9a81d77f07"},{"code":"(fn [n] (let [fib (promise)]\r\n             (deliver fib (lazy-cat [1 1] (map + @fib (rest @fib)))) (take n @fib)))","problem":26,"user":"4ddbf54e535d02782fcbe9ff"},{"problem":26,"code":"(fn [n] (loop [n n \n                r '()]\n           (if (<= n 1)\n             (conj r n)\n             (recur (- n 1) (conj r ((fn f [i] (if (> i 1) (+ (f (- i 1)) (f (- i 2)))i)) n)) ))))","user":"57dba312e4b0bd073c202426"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b ))))) 1 1)))","problem":26,"user":"5224060de4b01819a2de42c3"},{"code":"#(letfn [(fib ([] (cons 1 (fib 0 1)))\n              ([a b] (cons (+ a b) (lazy-seq (fib b (+ a b))))))]\n  (take % (fib)))","problem":26,"user":"50f94727e4b0e7c80cb15a49"},{"problem":26,"code":"(fn [n] (take n (reverse (loop [i (- n 2)\n                         result '(1 1)]\n                    (if (> i 0)\n                      (recur (dec i)\n                             (conj result\n                                   (+ (first result)\n                                      (second result))))\n                      result)))))","user":"5992dc6ae4b0866487ed0d7d"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","user":"57c2d0c1e4b05aa3c4741cb8"},{"code":"(fn [init-n]\n  (loop [n init-n v0 0 v1 1 out [1]]\n    (if (= n 1)\n      out\n      (let [v2 (+ v0 v1)]\n        (recur (dec n) v1 v2 (conj out v2))))))","problem":26,"user":"4e55958a535d8a8b8723a27e"},{"problem":26,"code":"(fn [n]\n  ((fn conj-fib [s]\n    (if (= (count s) n)\n      \t(reverse s)\n    \t(conj-fib (conj s (+ (first  s) (second s)))))) '(1 1)))","user":"559468cbe4b0c79f6e1db954"},{"code":"(fn fib\n  ([n] (cons 1 (cons 1 (take (- n 2) (fib 1 1)))))\n  ([n m] \n     (cons (+ n m) (lazy-seq (fib (+ m n) n)))))","problem":26,"user":"50d2f044e4b03c62ef244483"},{"code":";(fn [x] (let [a 0 b 1] (recur [a b]))) \n\n(fn [x] (take x ((fn fibbo [a b] (cons a (lazy-seq (fibbo b (+ a b))))) 1 1)))","problem":26,"user":"53340d3ce4b019098a6f8b89"},{"problem":26,"code":"#(loop [result '[1 1] n %1] (if (<= n 2) result (recur (conj result (+' (nth result (- (count result) 2))(nth result (- (count result) 1)))) (dec n))))","user":"5751aeabe4b02ea11479928a"},{"problem":26,"code":"(fn [i] (take i (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":26,"code":"#(loop [f1 1\n        f2 1\n        cnt 2 \n        res [1 1]]\n   (if (= cnt %)\n     res\n     (recur f2 (+ f1 f2) (inc cnt) (conj res (+ f1 f2)))\n   )\n)","user":"53f7820be4b0de5c41848560"},{"code":"(fn [x]\n  (take x\n    (map first\n      (iterate \n        (fn [[a b]] [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4e260220535deb9a81d77ef0"},{"code":"(fn [nb]\n  (loop [iter 0\n         prev 0\n         tot 1\n         tab ()]\n    (if (= nb iter)\n      (reverse tab)\n      (recur\n         (inc iter)\n         tot\n         (+ tot prev)\n         (conj tab tot)\n       )\n      )\n    )\n  )","problem":26,"user":"52271091e4b04e78ff2e19a1"},{"code":"(fn fib [n]\n  (rest(take (+ n 1)\n          (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"520bade3e4b0b022ef140c85"},{"problem":26,"code":"(fn [number]\n  (map \n (fn fib [x]\n  (cond (= x 0) 1\n        (= x 1) 1\n        :else (+ (fib (- x 1)) (fib (- x 2))))) (range number)))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":26,"code":"(fn fibo [n] \n  (loop [x 1 lastfibo 0 curfibo 1 result []]\n    (if (> x n)\n      result\n      (recur (inc x) curfibo (+ lastfibo curfibo) (conj result curfibo)))))","user":"5da9662ce4b000c986472c30"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate \n             (fn [[a b]] [b (+ a b)]) [1 1])))","user":"57509096e4b02ea114799277"},{"problem":26,"code":"(fn [n]\n  (loop [counter 0\n         accumulated-output [1 1]\n         a 1\n         b 1]\n    (if (= counter (- n 2))\n      (apply list accumulated-output)\n      (recur (inc counter)\n             (conj accumulated-output (+ a b))\n             b\n             (+ a b)))))","user":"5e95ddeae4b0fbed045a3810"},{"problem":26,"code":"(fn fib [x]\n (cond\n  (= x 1) [1]\n  (= x 2) [1 1]\n  :else (let [a (fib (dec x)) cnt (count a)] (conj a (+ (a (- cnt 1))(a (- cnt 2)))))\n  ))","user":"54299d4be4b01498b1a71b3d"},{"problem":26,"code":"#(loop [fibs [0 1]]\n   (if (= (inc %) (count fibs))\n     (rest fibs)\n     (recur (conj fibs (+ (first (take-last 2 fibs)) (last fibs))))))","user":"53fdbe0fe4b0de5c418485e9"},{"problem":26,"code":"#(map (fn fib\n   [n]\n   (if (= n 0)\n     0\n     (if (= n 1)\n       1\n       (+ (fib (- n 1)) (fib (- n 2)))))) (range 1 (+ % 1)))","user":"5dc64aafe4b02f9375f4e1c2"},{"code":"(fn [n]\n  (loop [x1 1  x2 1 acc [1 1] n (- n 2)]\n    (if (= 0 n)\n        acc\n        (let [sum (+ x1 x2)]\n        (recur x2 sum (conj acc sum) (dec n))))))","problem":26,"user":"4e51c67a535d302ef430da6a"},{"code":"(fn [n]\n  (take n\n        (rest\n         (let [s5 (Math/sqrt 5)\n               g1 (/ (+ 1 s5) 2)\n               a1 (/ 1 s5)]\n           (map #(int (Math/round %))\n                (iterate (partial * g1) a1))))))","problem":26,"user":"4e31a15c535deb9a81d77f1e"},{"code":"(fn [x] (loop [n 0 r '()] (if (= n x) r (recur (inc n) (if (= n 0) '(1) (if (= n 1) '(1 1) (concat r (list (+ (nth r (- n 1)) (nth r (- n 2)))))))))))","problem":26,"user":"523bc0e6e4b07becd5be21f9"},{"code":"#(take % \n       (map last \n            (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","problem":26,"user":"5164d97ee4b003cf19fdde43"},{"code":"#(take %1 ( (fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"53410c24e4b00652c8746eca"},{"problem":26,"code":"(fn test [x]\n  (let [fibs (map first \n                  (iterate \n                    (fn [[a b]]\n                      [b (+ a b)])\n                    [1 1]))]\n    (take x fibs)))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn k \r\n  ([n] (reverse (k (- n 2) '(1 1))))\r\n  ([n fns]\r\n    (if (zero? n) \r\n      fns\r\n      (k (dec n) (conj fns (+ (first fns) (second fns)))))))","problem":26,"user":"4f0da4e4535d0136e6c22319"},{"problem":26,"code":"(partial nth (iterate (fn [coll]\n                    (if (< (count coll) 2)\n                      (conj coll 1)\n                      (conj coll (+ (last coll) (last (butlast coll)))))) []))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":26,"code":"(fn [x]\n\t(loop [a 0 b 1 n 0 res [1]]\n\t\t(if (= n x)\n\t\t\t(butlast res)\n\t\t\t(recur b (+ a b) (inc n) (conj res (+ a b))))))","user":"531dc21be4b08068f379edb1"},{"problem":26,"code":"(fn [x] \n  (take x\n        (seq '(1 1 2 3 5 8 13 21))))","user":"5a29ee57e4b09cafd31c7f2b"},{"problem":26,"code":"(fn [n]\n  (letfn [(lazy-fib [one two]\n                    (lazy-seq (cons one (lazy-fib two (+ one two)))))]\n    (take n (lazy-fib 1N 1N))))","user":"550e0951e4b06e50f9beb163"},{"problem":26,"code":"#(loop [i % p1 0 p2 1 r []]\n   (if (= i 0)\n     r\n     (recur (dec i) (+ p1 p2) p1 (conj r (+ p1 p2)))))","user":"563799f8e4b0bfe05bf117db"},{"problem":26,"code":"#(drop 1 (take (+ % 1) (map first (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"5694290fe4b0dcc4269f4110"},{"code":"(fn [n]\n  (if (= n 1) '(1))\n  (if (= n 2) '(1 1)\n    (loop [a 1 b 1 num n acc '(1 1)]\n      (if (= num 2)\n        (reverse acc)\n        (recur b (+ a b) (- num 1) (conj acc (+ a b)))))))","problem":26,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":26,"code":"#(loop [c 2 a [1 1]]\n    (if (= c %)\n      a\n      (recur (inc c)\n             (conj a (+ (last(drop-last a)) (last a))))\n    )\n  )\n\n;#(take % (map first (iterate (fn[[x y]] [y (+ x y)]) [1 1])  ))\n\n;#((fn fib [x] (if (= % (count x))\n;             x\n;             (fib (conj x (+(last x)(last (drop-last x)))))\n;             )) [1 1])","user":"5c683fb5e4b0fca0c16226d5"},{"problem":26,"code":"(fn fibo [n-th]\n  (cond (= n-th 1)\n        '(1)\n        (= n-th 2)\n        '(1 1)\n        :else (loop [idx 2, result [1, 1]]\n                (if (= idx n-th)\n                  (seq result)\n                  (recur (inc idx) (conj result (+ (nth result (- (count result) 2)) (last result))))))))","user":"584f1397e4b0b7285a6f4e5e"},{"code":"#(take % (map first (iterate (fn [[a b]] [b,(+ a b)]) [1 1])))","problem":26,"user":"4fe9efe5e4b0547ebccb247a"},{"code":"#(map (fn fib [x]\n        (if (or (= x 0)(= x 1))\n          x\n          (+ (fib (- x 1))(fib (- x 2))))) (range 1 (inc %)))","problem":26,"user":"51facf22e4b0f1313d4689f0"},{"code":"(fn [len]\n  (loop [i 1 fib-seq '(1 1)]\n    (if (= (inc i) len)\n      (reverse fib-seq)\n      (recur (inc i)\n             (cons\n              (+ (first fib-seq) (second fib-seq)) fib-seq))\n      )\n    )\n  )","problem":26,"user":"4ebc64db535dfed6da9c6d82"},{"problem":26,"code":"(fn fibonacci\n  ([index] (fibonacci index []))\n  ([index result]\n   (case index\n     0 []\n     1 (conj (fibonacci (- index 1) result) 1)\n     2 (conj (fibonacci (- index 1) result) 1)\n     (conj (fibonacci (- index 1)) (+ (last (fibonacci (- index 1))) (last (drop-last (fibonacci (- index 1)))))))))","user":"556c94afe4b09a3098a524fe"},{"problem":26,"code":"#(take % ((fn rfib [a b]\n              (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1))","user":"53b40181e4b047364c0444ae"},{"problem":26,"code":"(fn fib [n]\n  (if (< n 3)\n    (repeat n 1)\n    ((fn [a, b, c, fibs] (if (= c 0) fibs (recur b (+ a b) (dec c) (conj fibs b)))) \n     0, 1, n, [])))","user":"57006957e4b08d47c97781c8"},{"code":"#(rest (take (inc %) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e58c019535d8a8b8723a297"},{"problem":26,"code":"(fn fib [index]\n  ((fn logic [elLast elFirst index]\n     (if (= index 0)\n       '()\n        (conj (logic elFirst (+ elLast elFirst) (- index 1))\n        elLast))) 1 1 index))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":26,"code":"#(loop [cnt (- % 1)\n\tsqnc [1 1]] \n\t(if (> (count sqnc) cnt)\n\t\tsqnc\n\t\t(let [sqlen (count sqnc)] \n\t\t\t(recur cnt (conj sqnc (reduce + (subvec sqnc (- sqlen 2) sqlen))))))\n\t)","user":"5578f292e4b05c286339e08f"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n res [] prv 1 nxt 1]\n    (if (zero? cnt)\n      res\n      (recur (dec cnt)\n             (conj res prv)\n             nxt\n             (+ prv nxt)\n      )\n    )\n  )\n)","user":"5437d022e4b032a45b869309"},{"problem":26,"code":"#((fn [fib i] \n    (if (= i 1)\n      (reverse fib)\n      (recur (concat [(apply + (take 2 fib))] fib) (dec i))))\n  [1 1] (- % 1))","user":"56e6d049e4b02e7e935eb6cd"},{"code":"#(letfn [(fib [n]\n              (if (< n 3) 1\n                (+ (fib (dec n)) (fib (- n 2)))))]\n   (map (comp fib inc) (range %)))","problem":26,"user":"53973e7be4b0b51d73faaee6"},{"code":"(fn [x]\n  (map (fn this [y]\n         (if (> 2 y)\n          1\n          (+ (this (- y 1)) (this (- y 2))))) (range x)))","problem":26,"user":"4f2f7e87e4b0d6649770a06f"},{"problem":26,"code":"(fn [n] \n(map\n#(int \n(*\n  (/ 1 (Math/sqrt 5 )) \n    (-\n      (reduce * (repeat %1 \n        (/ (+ 1 (Math/sqrt 5)) 2))\n      )\n      (reduce * (repeat %1 \n        (/ (- 1 (Math/sqrt 5)) 2))\n      )\n))) (range 1 (inc n)) ))","user":"5999648ce4b07157cc8daaf3"},{"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (let [more (fib (- n 1))]\n      (conj more (apply + (take-last 2 more))))))","problem":26,"user":"4f0d093b535d0136e6c22313"},{"code":"#(loop [n 0\n        result '()]\n   (if (= n %)\n     result\n     (recur (inc n)\n            (if (= n 0)\n              '(1)\n              (if (= n 1)\n                '(1 1)\n                (concat result (list (+ (last result) (last (butlast result))))))))))","problem":26,"user":"51caca2ae4b068dadb8f2226"},{"code":"#(take % ((fn fib [x y] (lazy-seq (cons x (fib (+ x y) x)))) 1 0))","problem":26,"user":"52c69672e4b0c2d177d62110"},{"problem":26,"code":"(fn \n  [amount]\n  (loop [fibonacci [] length (count fibonacci)]\n    (if (= length amount)\n      fibonacci\n      (recur (conj fibonacci (if (<= length 1) 1 (reduce + (drop (- length 2) fibonacci))))\n             (inc length)\n))))","user":"58a1d00ae4b02bd94d917ec6"},{"problem":26,"code":"(fn fib\n  [x]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take x)))","user":"5ff454a1e4b05ac5b16ea20d"},{"problem":26,"code":"(fn fib-sequence\n      ([n]\n       (fib-sequence (- n 1) nil))\n      ([n result]\n       (if (< n 0)\n         result\n         (fib-sequence (- n 1)\n                       (cons ((fn fib\n                               [n]\n                               (if (or (= n 0) (= n 1))\n                                 1\n                                 (+ (fib (- n 1)) (fib (- n 2))))) n)\n                             result)))))","user":"54a27b05e4b09f271ff37c5c"},{"problem":26,"code":"#(last (take (- % 1) (iterate  (fn [l] (conj l (+ (last l) (last (butlast l))))) [1 1])))","user":"54094824e4b0addc1aec66da"},{"problem":26,"code":"(fn [n]\n  (loop [remaining-counts n\n         result []]\n    (if (= remaining-counts 0)\n      result\n      (recur (dec remaining-counts) (conj result (+ (or (last result) 1) (or (second (reverse result)) 0))))\n      )\n    )\n  )","user":"5df79420e4b0a607a9a45c9a"},{"code":"#((fn [x y z] (if (= x (+ 2 z)) y (recur x (concat y (list (+ (last y) (nth y z)))) (+ z 1)))) % [1 1] 0)","problem":26,"user":"4eebfd03535d93acb0a668ab"},{"code":"(fn [v]\n  (loop [curI 0 retval [1]]\n    (if (= curI (- v 1))\n      retval\n      (recur (inc curI) (conj retval (+ (last retval)\n                                        (if (= curI 0) 0 (second (reverse retval))\n\n\n                                        )))))))","problem":26,"user":"5020a3fbe4b0cb6ebc0a42f8"},{"code":"(fn fib\n  ([n] (fib n (list 1 1)))\n  ([n s] (if (>= (count s) n)\n           (take n (reverse s))\n           (fib n (conj s (+ (first s) (second s)))))))","problem":26,"user":"4f9a5e1ee4b0dcca54ed6d09"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))) \n  1 1)))","problem":26,"user":"50270618e4b01614d1633feb"},{"code":"(fn fib ([i] (fib [1 1] (- i 2))) ([x i] (#(if (zero? i) x (fib (conj x (+ (last (butlast x)) (last x))) (dec i))))))","problem":26,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn [x] (rest (take (inc x) ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b)))))  0 1))))","problem":26,"user":"5242d5c3e4b076204b44fa95"},{"code":"(fn fib [idx]\n  (cond\n    (= idx 1) [1]\n    (= idx 2) [1 1]\n    :default (let [a1 (fib (dec idx))]\n      (conj a1 (+ (last a1) (first (take-last 2 a1)))))))","problem":26,"user":"4edd9d79535d10e5ff6f532b"},{"problem":26,"code":"#(loop [f [1 1]] (if (= % (count f))\n                  f\n                  (recur (conj f (+ (last f) (last (butlast f)))))))","user":"5a096063e4b01bb0ae8afe0b"},{"code":"(fn f [n] (cond (= n 1) [1] (= n 2) [1 1] :else (let [o (f (- n 1))] (conj o (+ (first (reverse o)) (second (reverse o))) ) )))","problem":26,"user":"534d1173e4b084c2834f4a98"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first\n             (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n        )\n  )\n)","user":"5803ba6de4b0a837a8b30c95"},{"problem":26,"code":"#(take %1 (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1])))","user":"5446ea11e4b032a45b8693b7"},{"problem":26,"code":"#(rest (take (inc %) ( map first  (iterate (fn [[a b]] [ b (+ a b)]) [0 1]))))","user":"54d13d43e4b0e8a36923e5df"},{"code":"(fn [x] (take x (map first (iterate #(let [a (first %), b (second %)] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fe88cc1e4b07c9f6fd12c42"},{"problem":26,"code":"#(reverse (loop [lst '(1 1)]\n(if (>= (count lst) %) lst\n(recur  (conj lst (+ (first lst) (second lst))  )\n)\n)\n))","user":"54c98ac0e4b045293a27f679"},{"problem":26,"code":"( fn [n] ( reverse ( last ( take ( dec n )  ( iterate #( cons ( + (first %) (second %) ) %) [1,1]  ) ) ) ) )","user":"54fc7d89e4b07d26eda61d2b"},{"code":"#(loop [k (- % 2) s [1 1]]\n   (if (pos? k)\n     (recur (dec k) (conj s (reduce + (take-last 2 s))))\n     s))","problem":26,"user":"521e8227e4b0dd19981ad082"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b) ] ) [1 1])))","problem":26,"user":"5384197fe4b06839e8705eed"},{"code":"(fn fib-seq [n]\n  (if (= n 2)\n    '(1 1)\n    (let [previous-rev (reverse (fib-seq (dec n)))]\n      (reverse (cons (+ (first previous-rev) (second previous-rev)) previous-rev))\n      )\n    )\n  )","problem":26,"user":"52f8b86de4b047fd55836fdb"},{"problem":26,"code":"; clojure is awesome, but evil\n(fn [x] \n\t(loop [n 1 prev 0 result []] \n\t\t(if (< x (+ (count result) 1)) (seq result) \n\t\t\t(recur (+ prev 1) (+ n prev) (conj result n))\n\t\t) \n\t)\n)","user":"591d7ef9e4b09b4ee5954c18"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib [x]\n              (cond\n                (= x 1) 1\n                (= x 2) 1\n                :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (map fib (range 1 (inc n)))))","user":"56a45fcee4b0542e1f8d14dc"},{"code":"(fn [x] (\n  loop [a 0 b 1 c x l []]\n  (if (< c 1)\n    l\n    (recur b (+ a b) (dec c) (conj l b))\n  )))","problem":26,"user":"4daea587edd6309eace4d15a"},{"problem":26,"code":"(fn [n]\n  (case n\n    1 '(1)\n    (loop [ret '(1 1) i 2]\n      (if (= i n)\n        (reverse ret)\n        (recur \n         (cons (+ (nth ret 0) (nth ret 1)) ret)\n         (inc i))))))","user":"55f73078e4b06e875b46cea4"},{"problem":26,"code":"#(loop [n (dec %) n-1 1 n-2 0 result [1]]\n   (if (= 0 n)\n     result\n     (recur (dec n) (+ n-1 n-2) n-1 (into result [(+ n-1 n-2)]))))","user":"6090e617e4b03bd49d9f36ce"},{"problem":26,"code":"(fn fib [n]\n  (if (<= n 0) '()\n    (if (= n 1)\n      '(1)\n      (let [ans (fib (- n 1))]\n        (concat ans [(apply + (take-last 2 ans))])\n        )\n      )\n    )\n  )","user":"56c72507e4b0ed865f9758b7"},{"problem":26,"code":"#(take % ((fn fibPoslLazy [x y] (lazy-seq (cons x (fibPoslLazy y (+ x y))))) 1 1))","user":"5576e78de4b05c286339e075"},{"code":"(fn [x] (condp = x \n3 (list 1 1 2)\n6 (list 1 1 2 3 5 8)\n8 (list 1 1 2 3 5 8 13 21)))","problem":26,"user":"507ddf55e4b0a03698d01ca8"},{"problem":26,"code":"(fn [n]\n  (if (= n 1) '(1))\n  (if (= n 2) '(1 1))\n\n  (loop [i 2\n         r '(1 1)]\n    (if (= i n)\n      (reverse r)\n      (do\n        (println \"i: \" i \" | r: \" r)\n        (recur (inc i) (conj r (reduce + (take 2 r))))))))","user":"59ea07c9e4b0249b72820756"},{"code":"(fn\n\t[n]\n      (loop [a 1 b 1 vctr [1 1]]\n            (if (= (count vctr) n) vctr\n             (recur b (+ a b) (conj vctr (+ a b))))))","problem":26,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":26,"code":"#(take % ((fn fibonacci\n            ([]\n              (fibonacci 1 1))\n            ([n m]\n              (cons n (lazy-seq (fibonacci m (+ n m))))))))","user":"54357066e4b0b6b47310fcfd"},{"problem":26,"code":"#(loop [n1 0 n2 1 i % fib '(1)]\n     (if (= i 1)\n       (reverse fib)\n       (recur n2 (+ n1 n2) (dec i) (conj fib (+ n1 n2)) )))","user":"53a83c74e4b047364c044426"},{"problem":26,"code":"(fn [n]\n  (loop [x 0\n         acc [1 1]]\n    (if-not (>= x (dec n))\n      (recur (inc x) \n             (conj acc (+ (nth acc x) (last acc))))\n      (drop-last acc))))","user":"51316a63e4b0431ba07e7feb"},{"code":"(fn [c] \n  (loop [c c a 0 b 1 acc []]\n    (if (= c 0)\n      acc\n      (recur (dec c) b (+ a b) (conj acc b)))))","problem":26,"user":"4f26d6d9e4b0d6649770a007"},{"code":"(fn [x] (nth\n           (iterate\n             (fn [x] (flatten\n                       (list x (+\n                                 ((comp first rest reverse) x)\n                                 (last x)))))\n             '(1 1))\n           (- x 2)))","problem":26,"user":"535aba96e4b04ce2eb3ed2a8"},{"code":"#(take % \n  (map first\n    (iterate\n      (fn [[a b]]\n        [b (+ a b)])\n    [1 1])))","problem":26,"user":"4e68d816535d8ccf87e9fe8e"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib []\n            (letfn [(lazy-fib [n1 n2]\n                      (lazy-seq\n                       (cons n1 (lazy-fib (+ n1 n2) n1))))]\n              (lazy-fib 1 0)))]\n    (take n (fib))))","user":"5a512929e4b05d388ecb6be2"},{"code":"(fn [n]\n  (loop [cnt n\n         acc '(1)\n         h 0]\n    (if (<= cnt 1)\n\t\t(reverse acc)\n      \t(recur (dec cnt)\n             (cons (+ (first acc) h) acc)\n             (first acc)\n          )\n      )\n    )\n  \n  )","problem":26,"user":"52ba43d0e4b07a9af57922cd"},{"problem":26,"code":"#(take %\n((fn fib [a b] (lazy-seq (cons a (fib b (+ b a)))))\n      1 1))","user":"555d4421e4b0a2eb076a39a8"},{"problem":26,"code":"#(loop [i 2\n        l '(1 1)]\n    (if (= i %)\n      (reverse l)\n      (recur (inc i) (conj l (+ (first l) (second l))))))","user":"55ecac8ee4b0121d4835fdcc"},{"problem":26,"code":"(fn [n]\n    (loop [col [1 1] ] \n        (if (= n (count col)) (reverse col) \n         (recur (cons (+ (first col) (first (rest col))) col )))))","user":"5e12327ee4b099d064962fe5"},{"code":";; A naive solution\n#(letfn [(fib [x] \n          (cond (= x 0) 0 \n                (= x 1) 1 \n                :else (+ (fib (- x 1)) (fib (- x 2)))))]\n    (map fib (range 1 (+ 1 %))))","problem":26,"user":"5005b57de4b0678c553fc46a"},{"problem":26,"code":"(fn [n]\n   (reduce \n     (fn [a b] (conj a (+ (last a) (first (take-last  2 a))))) [1 1]\n      (map inc (repeat (- n  2) 0))\n     \n   )\n)","user":"5b2d1103e4b025bcb146f2bf"},{"code":"(fn [c]\n  (letfn [(fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))]\n    (take c (fibs))))","problem":26,"user":"5027b41ee4b01614d1633fee"},{"problem":26,"code":"#(take % ((fn fibs [a b] \n            (cons a (lazy-seq (fibs b (+ a b)))))\n          1 1))","user":"5715b929e4b07c98581c3ae2"},{"code":"(fn fib [n]\n  (loop [cur 0 coll []]\n    (cond \n      (= cur n) coll\n      (< cur 2) (recur (inc cur) (conj coll 1))\n      :else \n        (recur (inc cur) \n          (conj coll\n            (+ (peek coll) (peek (pop coll))))))))","problem":26,"user":"4ed2918f535d44c135fd68d8"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (loop [numbers '(1 1) idx (- x 2)]\n    (if (<= idx 0)\n          (take x (reverse numbers))\n          (recur \n            (conj numbers\n              (+ (first numbers) (second numbers) ))  \n            (dec idx))\n          )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"code":"(fn [length]\n  (loop [col '(1) a 0 b 1]\n    (if (= (count col) length)\n      (reverse col)\n      (recur (conj col (+ a b)) b (+ a b)))))","problem":26,"user":"4ef9b021535dced4c769f269"},{"code":"#(map\n  (fn fib [n]\n    (if (<= n 1)\n      n\n      (+ (fib (- n 1)) (fib (- n 2))))\n  )\n  (range 1 (inc %)))","problem":26,"user":"4e3a2761535deb9a81d77f48"},{"problem":26,"code":"#(take % (cons 1 ((fn fib [prev2 prev1] (cons (+ prev1 prev2) (lazy-seq (fib prev1 (+ prev1 prev2))))) 0 1)))","user":"5e909685e4b0cb016954634d"},{"code":"(fn [n] (take n\n  (map first\n    (iterate\n      (fn [[a b]]\n        [b (+ a b)])\n      [1 1]))))","problem":26,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn\n     [n]\n     (nth (iterate #(conj % (+ (last %) (second (reverse %)))) [1 1]) (- n 2)))","problem":26,"user":"5153316ce4b0252ac4b16611"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate #(let [[x y] %1] [y (+ x y)]) [1 1]))))","user":"554dfe97e4b00713264bd98c"},{"problem":26,"code":"#(loop [result [1 1]]\n  (if-not (= (count result) %)\n    (recur (conj result (apply + (take-last 2 result))))\n    result))","user":"55577fcce4b0deb715856e24"},{"problem":26,"code":"(fn [x]\n    (letfn [(nextv [l] \n                (cond (empty? l) 1\n                      (empty? (rest l)) 1\n                      :else (+ (first l) (second l))))\n             (nextl [l] (cons (nextv l) l))\n        ]\n        (reverse (reduce (fn [y, _] (nextl y)) '() (range x)))))","user":"54f8b6f4e4b01ecee9d8882c"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (conj (fib (- n 1))\n                  (+\n                    (last (fib (- n 1)))\n                    (last (fib (- n 2)))\n                    ))))","user":"55e9842ae4b0121d4835fda1"},{"problem":26,"code":"(fn [n]\n  (loop [fibo [1 1]]\n    (let [pre-last-e (last (drop-last fibo))\n          last-e (last fibo)]\n      (if (= n (count fibo))\n        fibo\n        (recur (conj fibo (+ last-e pre-last-e)) )))))","user":"56795625e4b05957ce8c6186"},{"code":"#(take % \n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))","problem":26,"user":"4ed6dbdd535d10e5ff6f52eb"},{"problem":26,"code":"(fn [n]\n  (loop [f0 1 f1 1 n n result [f0 f1]]\n    (if (< n 3) result\n        (let [r (+ f0 f1)]\n          (recur f1 r (- n 1) (conj result r))))))","user":"5a98ab58e4b0d174b936c78e"},{"code":"#(take % ((fn fibo\n     ([] (fibo 1 1)) \n     ([n-2 n-1]\n       (lazy-seq (cons n-2 (fibo n-1 (+ n-1 n-2))))))))","problem":26,"user":"5028cd0fe4b01614d1633ffc"},{"problem":26,"code":"(fn [n]\n  (reverse ((fn [pp p acc]\n    (if (= n (count acc)) acc\n      (recur p (+ pp p) (cons (+ pp p) acc)))) 0 1 '(1))))","user":"5c96f3dde4b048ec896c5a67"},{"code":"#(map (fn [n]\n       (let [fib-iter (fn [a b c]\n                        (if (= c 0)\n                          b\n                          (recur (+ a b) a (dec c))))]\n         (fib-iter 1 0 n)))\n   (rest (range (inc %))))","problem":26,"user":"4e7c4290535db169f9c796bc"},{"problem":26,"code":"(fn [n]\n  (loop [k n res []]\n    (if (= k 0)\n      (seq res)\n      (recur (- k 1) (conj res (+ (or (first (reverse res)) 1) (or (first (rest (reverse res))) 0)))))))","user":"56719c3ce4b05957ce8c610c"},{"problem":26,"code":"(fn [x]\n  (when (= x 1) '(1))\n  (when (= x 2) '(1))\n  (loop [i (- x 2) result [1 1]]\n    (if (> i 0)\n      (recur (- i 1) (conj result (reduce + (take-last 2 result))))\n      result)))","user":"5c113df2e4b01240ff56716f"},{"problem":26,"code":"(fn f\n  ( [n] (reverse(f n 1 1 ())))\n  ( [n a b l] \n    (if (= n 0) \n      l\n      (recur (dec n)\n             b\n             (+ a b)\n             (cons a l)))))","user":"54b45938e4b05787c3b1638f"},{"code":"(fn [n] (take n (map first (iterate #(vector (% 1) (+ (% 0) (% 1))) [1 1]))))","problem":26,"user":"4ec347af535dcc7ae8597d53"},{"problem":26,"code":"(fn [x]\n  (loop [cnt (dec x)\n         fib [1]]\n    (if (> cnt 0)\n      (recur (dec cnt) (conj fib (reduce + (take-last 2 fib))))\n      fib)))","user":"52540bcce4b0541d1855b952"},{"code":"(fn [x] (take x (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"535376a7e4b084c2834f4b01"},{"problem":26,"code":"#(loop [retlist '(1 1), n %]\n                (if (< n 3)\n                  (reverse retlist)\n                  (recur \n                   (conj retlist (+ (first retlist) (first (rest retlist))))\n                   (dec n)\n                   )\n                  )\n )","user":"5653a3e6e4b0f9d632dd8476"},{"code":"(fn fib\n  ([n]   (case n 0 '() 1 '(1) 2 '(1 1) 3 '(1 1 2) (fib '(1 1 2) n)))\n  ([x n] (if (= (count x) n) x (fib (concat x (list (+ (last x) (nth x (- (count x) 2))))) n))))","problem":26,"user":"50df6dd0e4b061dbdced7225"},{"problem":26,"code":"#(loop [x '(1 1)]\n    (if (= (count x) %)\n      (reverse x)\n      (recur (conj x\n                   (reduce + (take 2 x))))))","user":"59a3f3dce4b066c664927d48"},{"code":"#(map (fn f [X]\n  (cond \n   (<= X 2) 1\n   :else (+ (f (- X 1)) (f (- X 2)))))\n     (range 1 (inc %)))","problem":26,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"#(take % ( \n  (fn fi[a b] (cons a (lazy-seq (fi b (+ a b))))) 1 1)\n)","problem":26,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":26,"code":"(fn [i] \n  (loop [sequ [] cnt i] \n    (if \n      (= cnt (count sequ)) \n      sequ \n      (recur \n      \t(conj sequ \n              (+ (or (last sequ) 1) (or (get sequ (- (count sequ) 2)) 0)))\n        cnt\n      )\n    )\n  )\n)","user":"5a5f91d4e4b0512ff01cd94a"},{"problem":26,"code":"(fn fb-seq [n]\n  (take n ((fn fb [a b]\n    \t\t\t(lazy-seq \n    \t\t\t\t(cons a (fb b (+ a b)))))\n        \t1 1)\n   ))","user":"561eb82fe4b064ca9f4b16c7"},{"problem":26,"code":"(fn [x]\n  (loop [counter 2 temp '(1 1) result '(1 1)]\n    (cond\n     (= x 1)\n     '(1)\n     (= x counter)\n     result\n     true\n     (recur (+ 1 counter)\n            (concat\n             (rest temp)\n             (list\n              (+ (first temp) (second temp))))\n            (concat\n             result\n             (list\n              (+ (first temp) (second temp))))))))","user":"5936a67de4b02506e01a2982"},{"problem":26,"code":"#(take % (map last(iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"5882ac4ee4b0f1effa3b7661"},{"code":"#(loop [lst '(1 1) i (- % 2)]\n    (if (zero? i)\n      (reverse lst)\n      (recur (conj lst (+ (first lst)\n                          (first (rest lst))\n                       ))\n             (dec i)\n      )\n    )\n  )","problem":26,"user":"533b36c0e4b0e30313ee6ccb"},{"code":"#(loop [n (- %1 2) l '(1 1)]\n  (if (> n 0)\n    (recur (dec n) (cons (reduce + (take 2 l)) l))\n    (reverse l)))","problem":26,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"(fn [c]\n  (loop [c c, n1 1, n2 0, ns []]\n    (if (zero? c) ns\n      (let [n3 (+ n1 n2)]\n        (recur (dec c) n2 n3 (conj ns n3))))))","problem":26,"user":"4ee67d74535d93acb0a66861"},{"code":"#(take % ( map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"51dbba34e4b0e067a9bbadce"},{"problem":26,"code":"(fn fib [n]\n  (loop [i 2 acc [1 1]]\n    (if (< i n)\n      (recur (inc i) (conj acc (+ (get acc (dec i)) (get acc (dec (dec i))))))\n      acc)))","user":"560843dee4b046a4fc0ac00e"},{"problem":26,"code":"(fn [n] \n  (->> (iterate\n        (fn [[x y]] [(+ x y) x])\n        [1 0])\n       (take n) \n       (map first)))","user":"5da8fa72e4b000c986472c2d"},{"problem":26,"code":"#(take %\n (rest\n  (map first\n   (iterate (fn [[x y]] [y (+ x y)])\n          [0 1]))))","user":"5a984616e4b0d174b936c789"},{"code":"(fn fib [n] (case n\n              1 [1]\n              2 [1 1]\n              (let [p (fib (- n 1))] (conj p (reduce + (take-last 2 p))) ) ))","problem":26,"user":"519e70d5e4b0acf32bc6a42c"},{"code":"(fn[x]   (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52810225e4b0757a1b171418"},{"problem":26,"code":"#(take % ((fn f[a b](cons b (lazy-seq (f b (+ a b))))) 0 1))","user":"53d4dadde4b00fb29b221337"},{"code":"(fn [n]\n  (loop [res '(1) nextn 1 iter 1]\n    (if (= n iter) res\n      (recur (concat res (list nextn)) (+ nextn (last res)) (inc iter)))))","problem":26,"user":"51b3b22ce4b0f094dd986fa7"},{"problem":26,"code":"(fn fib [top]\n  (loop [coll []\n         idx 0]\n    (cond\n      (= idx 0) (recur [1] 1)\n      (= idx 1) (recur [1 1] 2)\n      (= top idx) coll\n      :else (recur (conj coll (+ (last coll) (nth coll (- idx 2)))) (inc idx)\n      )\n    )\n  ))","user":"5b250773e4b063e2438bcc21"},{"code":"#(take % ((fn fib [a b] \n\t         (lazy-seq (cons a (fib b (+ a b)))))\n           1 1))","problem":26,"user":"52e18d9ce4b09f7907dd1428"},{"code":"(fn fibseq \n  ([] (fibseq 1 1))\n  ([n] (take n (fibseq)))\n  ([a b] (lazy-seq (cons a (fibseq b (+ a b))))))","problem":26,"user":"5225a0f5e4b01819a2de430e"},{"problem":26,"code":"(fn [n]\n (reverse\n  (reduce\n   (fn [coll v]\n    (conj coll (+ (or (first coll) 1) (or (second coll) 0))))\n   '()\n   (range n))))","user":"525599bfe4b0541d1855b9e8"},{"code":"(fn fib [x]\n  (cond\n   (= x 1) [1]\n   (= x 2) [1 1]\n   :else (let [x1 (fib (- x 1))\n               x2 (fib (- x 2))]\n           (conj x1 (+ (last x1) (last x2)))\n         )\n  )\n)","problem":26,"user":"525cc6c4e4b0cb4875a45d47"},{"problem":26,"code":"(fn [m](map (fn ! [n] (if (> 2 n) n  (+ (!(- n 2))(!(dec n)))))  (map #(+ % 1)(range m))))","user":"545d5c3be4b01be26fd7466d"},{"problem":26,"code":"(fn [x]\n  (let [fib (fn f [n] \n              (case n \n                1 1 \n                2 1 \n                (+ \n                 (f (- n 1)) \n                 (f (- n 2)))))]\n   (map fib (range 1 (+ x 1)))))","user":"5537cbaee4b09218d5f44fd3"},{"code":"(fn\n  [n]\n   (loop [i 2\n          s 1\n          r [1 1]]\n     (if (= i n)\n       r\n       (recur (inc i) (last r) (conj r (+ s (last r)))))))","problem":26,"user":"52d469c8e4b09f7907dd1330"},{"problem":26,"code":"(fn [n]\n  (loop [series [1 1] near-last 1 index 1]\n    (if (= index (- n 1))\n      series\n      (recur (conj series (+ near-last (last series))) (last series) (+ index 1) )\n    )\n  )\n)","user":"5cd67eb2e4b0ccb061962943"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]) [1 1])))","user":"54485749e4b032a45b8693c7"},{"code":"#(loop [n % fibs ()]\n   (if (> n 0)\n     (recur (dec n) (conj fibs (+ (or (first fibs) 1) (or (second fibs) 0))))\n     (reverse fibs)))","problem":26,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"#(loop [f 0 s 1 l '()] (if (= % (count l)) (reverse l) (recur s (+ f s) (conj l s))))","problem":26,"user":"52570aeae4b0541d1855ba42"},{"code":"#(loop [a 1\r\n       b 1\r\n       c %\r\n       res nil]\r\n  (if (= c 0)\r\n    (reverse res)\r\n    (recur b (+ a b) (- c 1) (conj res a))))","problem":26,"user":"50868795e4b004985b776e5e"},{"problem":26,"code":"(fn fibseq [x]\n                  (if (= 1 x) [1]\n                              (if (= 2 x) [1 1]\n                                          ((fn fibmoresteps [seqsofar nMoreSteps]\n                                             (if (= 0 nMoreSteps)\n                                               seqsofar\n                                               (fibmoresteps\n                                                 (conj seqsofar (+ (nth seqsofar (- (count seqsofar) 1))\n                                                                   (nth seqsofar (- (count seqsofar) 2))))\n                                                 (- nMoreSteps 1))\n                                               ))\n\n                                            [1 1] (- x 2))\n\n                                          )\n                              )\n                  )","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn fibs\n  ([n] (fibs (dec n) '(1)))\n  ([n lst] \n    (let [fst (first lst)\n          rst (rest lst)\n          snd (if (empty? rst) 0 (first rst))]\n      (if (> n 0) \n        (recur (dec n) (conj lst (+ fst snd)))\n        (reverse lst)))))","problem":26,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn [x]\n  (loop [x x\n         s '()]\n    (if (= 0 x)\n      (reverse s)\n      (recur (dec x) (conj s (if (> (count s) 1)\n                               (+ (first s) (second s))\n                               1\n                               ))))))","problem":26,"user":"53778b90e4b06839e8705e36"},{"code":"#(take %\n  ((fn fib [x y]\n    (lazy-seq (cons x (fib y (+ x y))))) 1 1))","problem":26,"user":"53513d28e4b084c2834f4ae3"},{"problem":26,"code":"(fn fib-list [x]\n   (rest (reduce (fn [x y] (conj x (+ (last x)  (last (butlast x)))))\n           [0 1]\n           (range (- x 1)))))","user":"5715349be4b07c98581c3ad2"},{"code":"(fn [n]\n  (loop [t [1]]\n    (if (< (count t) n)\n        (recur (conj t (apply + (take-last 2 t))))\n        t)))","problem":26,"user":"53402a19e4b085b17e897da5"},{"code":"(fn fibo-list [n]\n  (reduce (fn fibo-red [acc-list n]\n            (case n\n              1 (conj acc-list 1)\n              2 (conj acc-list 1)\n              (let [rev-list (rseq acc-list)]\n                (conj acc-list (+ (first rev-list) (second rev-list)))))) \n          [] \n          (range 1 (inc n))))","problem":26,"user":"50e063f3e4b061dbdced7230"},{"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [prev (fib (dec n))]\n        (conj prev (+ (last prev)\n          (last (butlast prev))))))))","problem":26,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn [x] (reduce (fn [seed item] (concat seed (cons (+ (last seed) (last (drop-last 1 seed))) '()))) '(1 1) (drop 2 (range x))))","problem":26,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":26,"code":";better\n(fn fib-seq [tot]\n  (letfn [(fib [cnt]\n    (if (< cnt 3)\n       1\n       (+ (fib (- cnt 1)) (fib (- cnt 2)))))]\n    (map fib (range 1 (inc tot)))))\n\n;;hackish\n#_(fn fib-seq [cnt]\n   (if (= cnt 1)\n     '(1)\n     (if (= cnt 2)\n       '(1 1)\n       (let [prior (fib-seq (- cnt 1))]\n         (let [latest (+ (first (reverse prior)) (first (rest (reverse prior))))]\n           (reverse (cons latest (reverse prior))))))))","user":"5c534431e4b0fb8c5ffd99f2"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [ b (+ a b)]) [1 1]))))","problem":26,"user":"4e86d3cf535dceadca46984c"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [y (+ y x)]) [1 1])))","user":"590b055ae4b047aa04b199c9"},{"code":"#(loop [i 1 r []]\n   (if (> i %) r\n     (case i\n       1 (recur (inc i) [1])\n       2 (recur (inc i) [1 1])\n       (recur (inc i) (conj r (+ (last r) (-> r butlast last)))))))","problem":26,"user":"51284226e4b03a34742b4308"},{"problem":26,"code":"(fn\n  [n]\n  (let [fib (fn [res n]\n              (if (<= n 0)\n                res\n                (recur (conj res (+ (last res) (last (butlast res))))\n                       (dec n))))]\n    (fib [1 1] (- n 2))))","user":"534bfc71e4b084c2834f4a88"},{"problem":26,"code":"(fn [n] (take n ((fn fibo ([] (fibo 1 1)) ([sfl l] (concat [sfl l] (lazy-seq (fibo (+ sfl l) (+ sfl l l)))))))))","user":"5ed875abe4b016b56eae05f2"},{"problem":26,"code":";(fn [n]\n ; (let [fib (fn fib [m] (if (< m 3)\n  ;                          1\n   ;                         (+ (fib (- m 1)) (fib (- m 2)))))\n    ;     one-to-n (range 1 (inc n))]\n     ;   (map fib one-to-n)))\n     \n    (fn [n] (let [fib (fn fib [n]\n             (if (< n 3)\n              1\n              (+ (fib (- n 1)) (fib (- n 2)))))\n      one_to_n  (range 1 (+ n 1))]          \n  (map fib one_to_n)))","user":"55465b20e4b0a04f7929953b"},{"code":"(fn [n] \r\n    (reverse \r\n      (loop [a '(1 1)\r\n             c (- n 2)]\r\n        (if (zero? c)\r\n          a\r\n          (recur (cons (+ (first a) (second a)) a) \r\n                 (dec c))))))\r\n\r\n;#(take % \r\n;   (map first \r\n;        (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e1047ad535d04ed9115e7bf"},{"code":"; this seems way too long, but it works\n(fn [y] (take y (map (fn fib [x] (if (or (= 1 x) (= 2 x)) 1 (+ (fib (- x  1)) (fib (- x 2))))) (iterate inc 1))))","problem":26,"user":"536b9d8ae4b0243289761ebe"},{"code":"(fn fib [n]\n  (if (= n 1) [1]\n    (if (= n 2) [1 1] \n      (\n       #(conj % (+ (last %) (last (butlast %))))\n                   (fib (- n 1)) ))))","problem":26,"user":"513b77f3e4b00f740c76c403"},{"code":"#(letfn [(worker [n l1 l2 v]\r\n           (if (zero? n)\r\n             v\r\n             (recur (dec n) l2 (+ l1 l2) (conj v l1))))]\r\n   (worker % 1 1 []))","problem":26,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":26,"code":"(fn [n] (reduce (fn [r x] (concat r (list (+ (last (butlast r)) (last r))))) (list 1 1) (take (- n 2) (range))))","user":"52f23d85e4b05e3f0be25ef6"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn fib [[a,b]] [b (+ a b)]) [1 1]))))","user":"54eb97c8e4b024c67c0cf84d"},{"problem":26,"code":"#(if (<= % 0)\n    []\n    (loop [n 1 v [1] x (dec %)]\n      (if (= 0 x)\n        v\n        (recur (+ n (if (empty? v) 1 (last v))) (conj v n) (dec x)))))","user":"559ffd74e4b0acc240e314f0"},{"code":"(fn [x] (loop [acc [] a 0 b 1 count 0]\r\n  (if (= count x)\r\n      acc\r\n      (recur (conj acc b) b (+ a b) (inc count)))\r\n))","problem":26,"user":"4df0524e535d08e6dec9fe17"},{"problem":26,"code":"#(take % \n       (map first (\n                   iterate (\n                            fn [[a b]] [b (+ a b)]) \n                   \t\t\t\t\t\t\t\t   [1 1]\n                   )\n            )\n       )","user":"5f0cdb08e4b0f30dddfb5d50"},{"problem":26,"code":"#(map (fn ! [x] \n  (if (or (= x 1) (= x 2))\n    1\n    (+ (! (- x 2)) (! (- x 1)))\n   )) (take % (iterate inc 1)))","user":"55129632e4b06e50f9beb1aa"},{"code":"(fn [x] (reverse ((fn fib [n]\n  (cond\n   (= 0 n) '(1)\n   (= 1 n) '(1)\n   (= 2 n) '(1 1)\n   :else (let [fs (fib (- n 1))]\n           (conj fs (+ (first fs) (first (rest fs))))))) x)))","problem":26,"user":"52e276d9e4b09f7907dd1436"},{"code":"(fn [x] (loop [result [] a 1 b 1 i x] (\n           if (= i 2)  (concat [1 1] result) \n            (recur (conj result (+ a b)) b (+ a b) (dec i)))))","problem":26,"user":"51623490e4b009fba0926e42"},{"code":"#(take\n    %1\n    ((fn fib [x y] (lazy-seq (cons x (fib y (+ x y)))))\n      1 1))","problem":26,"user":"52b42d7ee4b0c58976d9ad19"},{"code":"(fn fibseq [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (concat (fibseq (dec n)) \n                  [(+ (last (fibseq (dec n))) \n                      (last (fibseq (dec (dec n)))))])))","problem":26,"user":"4fe2501ae4b0dd6cd5ce3644"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[prev cur]] [cur (+ prev cur)]) [1 1]))))","user":"55205564e4b08d5046aa8a60"},{"problem":26,"code":"(fn [x]\n   (last (take (dec x)\n               (iterate #(conj % (reduce + (take-last 2 %))) [1 1])\n               ))\n   )","user":"5c665311e4b0fca0c16226a7"},{"problem":26,"code":"(fn fibonacci[n]\n  (letfn [\n          (rfib [a b]\n                 (lazy-seq\n                  (cons a(rfib b (+ a b)))))]\n    (take n (rfib 1 1))))","user":"5018878ce4b029375d2a5056"},{"problem":26,"code":"(fn a[x]\n   (if (< x 3)\n     '(1 1)\n     (let [l (reverse (a (- x 1)))]\n       (reverse (\n        conj l (+ (first l) (second l) )\n     \t))\n      )\n    )\n )","user":"54283a7ae4b01498b1a71b2f"},{"problem":26,"code":"(fn fibn [x]\n(letfn [(genfn [n]\n  (cond\n    (<= n 2) 1\n    :else (+ (genfn (- n 1)) (genfn (- n 2)))))]\n  (if (= x 1)\n    [1]\n    (conj (fibn (- x 1)) (genfn x)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1) '(1)\n   (if (= x 2) '(1 1)\n     (let [done (reverse (fib (- x 1)))]\n       (reverse (conj done (+ (first done) (second done) )  ))\n       )\n     )\n    )\n  )","user":"53b12c76e4b047364c04448a"},{"problem":26,"code":"#(take % ((fn fib [m n] (lazy-seq (cons m (fib n (+ m n))))) 1 1))","user":"54026d7de4b0df28a13c62cf"},{"code":"(fn [n] (map first (take n (iterate (fn [fib-pair] [(second fib-pair) (apply + fib-pair)]) [1 1]))))","problem":26,"user":"4f94dab7e4b0dcca54ed6cc6"},{"code":"(fn [x]\r\n  (take x\r\n    ((fn fib [a b]\r\n        (cons a (lazy-seq (fib b (+ a b))))) \r\n      1 1))) \r\n;","problem":26,"user":"4e14b925535d04ed9115e7df"},{"problem":26,"code":"#(->> (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1])) (take %1))","user":"527bd988e4b03e8d9a4a759d"},{"code":"(fn [n] \n  (take n\n        ((fn fibo \n          ([] (cons 1 (lazy-seq (fibo 1 2))))\n          ([x1 x2] (cons x1 (lazy-seq (fibo x2 (+ x1 x2)))))))))","problem":26,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn fibb [x] (if(= 0 x) '() \n               (if(= 1 x) '(1) \n                 (if(= 2 x) [1 1] \n                   (if(< 2 x) (conj (fibb(dec x)) (reduce + (take 2 (reverse (fibb(dec x)))))))\n                   )\n               )\n             ) \n)","problem":26,"user":"51c9d8a6e4b09ce160bef5b3"},{"problem":26,"code":"#(reverse ((fn fibonacci [n]\n              (if (>= n 1) '(1))\n              (if (= n 2)\n                '(1 1)\n                (let [res (fibonacci (- n 1))]\n                  (conj res (+ (first res) (second res)))\n                  )\n                )\n              ) %1))","user":"5cead199e4b0a17bb84e2bd4"},{"problem":26,"code":"#(take % (map first (iterate (fn\n                                [[fst snd]]\n                                [snd (+ fst snd)])\n                              [1 1])))","user":"5de5fd64e4b0948ae9d9ae20"},{"problem":26,"code":"#(reverse ((fn fib [x]\n   (case x \n     0 ()\n     1 '(1)\n     2 '(1 1)\n     (let [xs (fib (dec x))] \n       (cons\n        (+ (first xs) (second xs))\n           xs)))) %))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":26,"code":"(fn [x]\n      (loop [n 2 v '[1 1] fl 1 f 1]\n        (cond\n          (= x 1) '( 1 )\n          (= x 2) '( 1 1 )\n          ;(= n 3) ()\n          (= n x) (into () (reverse v))\n          (< n x) (recur (inc n) (conj v (+ fl f)) f (+ fl f) )\n          )))","user":"53f6566ee4b0db01ade6f9de"},{"problem":26,"code":"(fn fib\n  ([number] (if (= 1 number)\n              [1]\n              (fib (- number 2) [1 1])))\n  ([number lst] (if (= 0 number)\n                  (reverse lst)\n                  (fib (- number 1) (cons (+ (first lst) (second lst)) lst)))))","user":"54196d63e4b01498b1a71a34"},{"code":"(fn [len]\n  (loop [nums (vector 1 1)]\n    (if (>= (count nums) len)\n      nums\n      (let [a (get nums (- (count nums) 2)) b (get nums (- (count nums) 1))]\n      \t(recur (conj nums (+ a b)))\n      \t)\n      )\n    )\n  )","problem":26,"user":"5166b79ae4b060c690c1f4c0"},{"code":"(fn [N] (loop [F '(1 1) n N] (if (= n 0) (take N (reverse F)) (recur (conj F (+ (first F) (second F))) (dec n)))))","problem":26,"user":"4fc52d79e4b081705acca386"},{"problem":26,"code":"#(take % (map \n                   (fn fib [n] (\n                                 if (< n 2) \n                                 n \n                                 (+ (fib (- n 2)) (fib (- n 1)))\n                                 )) (range 1 9)))","user":"5df79c31e4b0a607a9a45c9b"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] (vector b (+ b a))) [1 1]))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":26,"code":"(fn fib\n ([x] (fib [1 1] (- x 2)))\n ([accum x]\n\t(if (> x 0)\n       (let [[y z] (take-last 2 accum)]\n          (recur (conj accum  (+ y z)) (dec x)))\n       accum)))","user":"538f89bbe4b0b51d73faae8f"},{"problem":26,"code":"(fn fib ([x] (take x (fib 1 1)))\n  ([a b] (cons a (lazy-seq (fib b (+ a b))))))","user":"55921c21e4b0604b3f94d588"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         c [1 1]]\n    (if (>= i n)\n        (take i c)\n        (recur (inc i)\n               (conj c (apply + (take-last 2 c)))))))","user":"574c3a7ce4b02ea114799219"},{"problem":26,"code":"(fn [n]\n  (if (= 1 n)\n    '(1)\n    (if (= 2 n)\n      '(1 1)\n      (loop [b '(1 1) c (- n 2)]\n        (if (= c 0)\n          b\n          (recur (concat b (list (+ (last b) (nth b (- (count b) 2))))) (- c 1)))))))","user":"58bd219be4b0888cdc949d29"},{"code":"(fn fib [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)])\n                [1 1])\n       (map first)\n       (take n)))","problem":26,"user":"535bf08fe4b04ce2eb3ed2af"},{"problem":26,"code":"(fn fib [fib-arr len]\n  (if (> len 2)\n    (-> fib-arr\n        (lazy-cat [(+ (last fib-arr) (last (butlast fib-arr)))])\n        (fib (dec len)))\n    fib-arr))\n[1 1]","user":"5760d426e4b08062f99a4e9f"},{"problem":26,"code":"(fn [x] \n  (reverse (\n     #(if (= (count %2) x)\n        %2 \n     (recur %1 (conj %2 (+ (first %2) (second %2))))) x '(1 1))))","user":"5a4aa17fe4b05d388ecb6b7c"},{"problem":26,"code":"(fn [n]\n  (loop [r [] n n a 1 b 1]\n    (if (> n 0)\n      (recur (conj r a) (dec n) b (+ a b))\n      r)))","user":"5709eacde4b0b0fb43fd06b3"},{"code":"(fn [n] (take n (map #(% 0)\n                     (iterate (fn [[a b]] [b (+ a b)])\n                              [1 1]))))","problem":26,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [n] (take n (map first (iterate (fn [[l r]] [r (+ l r)]) [1 1]))))","problem":26,"user":"536be48ee4b0fc7073fd6e31"},{"code":"(fn fib-take [n]\n  \"return Fibonacci sequence of first n terms\"\n  (loop [a 1 b 1 s [a b] cnt 2]\n    (let [c (+ a b)]\n    (if (>= cnt n)\n\t    s\n      (recur b c (conj s c) (inc cnt))))))","problem":26,"user":"4f24957ae4b0d66497709fed"},{"problem":26,"code":"(fn [n]\n  ((fn [n r a b]\n     (if (zero? n)\n       (reverse r)\n       (recur (dec n) (cons b r) b (+ a b))))\n   n '() 0 1))","user":"5e178fbee4b00200644e3d57"},{"problem":26,"code":"(fn [maxn]\n    (if (< maxn 2)\n        (if (= maxn 1)\n            [1])\n        (loop [n 1 fib [1 1]]\n            (if (= n (- maxn 1))\n                fib\n                (recur (inc n) (conj fib (+ (get fib n) (get fib (- n 1)))))))))","user":"5b5b1b61e4b0c6492753e6a7"},{"problem":26,"code":"#(reverse (reduce (fn [coll _] (cons (+ (nth coll 0 1) (nth coll 1 0)) coll)) '() (range %)))","user":"5a4993c0e4b05d388ecb6b71"},{"problem":26,"code":"(fn fib [limit]\n  (loop [prev 0 s []]\n    (if (= (count s) limit)\n      s\n      (if (empty? s)\n        (recur 0 (conj s 1))\n        (recur (last s) (conj s (+ (last s) prev)))))))","user":"580b79e4e4b0a837a8b30d4a"},{"problem":26,"code":"#(loop [m % res [] f1 1 f2 0]\n     (if (zero? m)\n       res\n       (recur (dec m) (conj res f1)\n              (+ f1 f2)\n              f1)))","user":"5cd4c3dae4b0ccb061962925"},{"problem":26,"code":"(fn [x] \n  (loop [fib [] idx 0]\n    (if (= idx x)\n      fib\n      (if (or (= (count fib) 0) (= (count fib) 1))\n        (recur (conj fib 1) (inc idx))\n        (recur (conj fib (+ (nth fib (- (count fib) 2)) (last fib))) (inc idx))))))","user":"56f5e6d5e4b046a417f92079"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [[a b]] [b (+ a b)])\n          (fibs [] (map first (iterate fib [1 1])))]\n    (take n (fibs))))","user":"55088bb3e4b06e50f9beb10c"},{"code":"(fn [n]\n   (nth (iterate (fn [all]\n                   (conj all (->> all (take-last 2) (apply +)))) [1 1])\n        (- n 2)))","problem":26,"user":"4e951f2c535dbda64a6f6b2f"},{"code":"(fn [n] (loop [i 2 result [1 1] pp 1 p 1 ] (if (< i n) (recur (inc i) (conj result (+ p pp)) p (+ p pp)) result)))","problem":26,"user":"4efd98fa535de96065cf5086"},{"code":"#(take %\n\t((fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n\t1 1)\n)","problem":26,"user":"51b9d1f0e4b0e871ca49590b"},{"code":"#(take % ((fn rfib [a b] \r\n  (lazy-seq (cons a (rfib b (+ a b)))))\r\n   1 1))","problem":26,"user":"4e0cdc6f535d04ed9115e7b4"},{"problem":26,"code":"(fn fib \n  ([n] (case n\n    1 '(1)\n    (fib '(1 1) n)))\n  ([x n] (\n    if (= (count x) n) x\n    (fib (concat x\n      (list (+ (last x) \n        (nth x (- (count x) 2))))\n     ) n))))","user":"5fdc6ad4e4b05ac5b16ea13a"},{"problem":26,"code":"#(take %\n        (map first\n         \t\t(iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"5785de43e4b0ebec4cfb74e5"},{"problem":26,"code":"#(reverse ((fn fib [n] (if (= 2 n) '(1 1) (let [ff (fib (dec n))] (cons (+ (first ff) (fnext ff)) ff  ) ) )) %))","user":"55deeface4b050e68259b3ea"},{"problem":26,"code":"(fn [n]\n  (let [f (fn [n a b l]\n            (if (zero? n)\n              l\n              (recur (dec n) b (+ a b) (conj l a))))]\n    (f n 1 1 [])))","user":"5703cb87e4b08d47c97781f9"},{"problem":26,"code":"(fn\n  nth-fib\n  [n]\n  (letfn\n    [(fibonacci\n     ([] (fibonacci 1 1))\n     ([n-2 n-1] (lazy-seq (cons n-2 (fibonacci n-1 (+' n-2 n-1))))))]\n    (take n (fibonacci))))","user":"5c6227fee4b0fca0c1622641"},{"problem":26,"code":"#(map (fn fib [n]\n        (if (< 1 n)\n          (+ (fib (- n 1)) (fib (- n 2)))\n          1)) (range %))","user":"5643a11ee4b0018b46ad8bfb"},{"problem":26,"code":"#(map (fn [x]\n  (loop [f 1 s 1 px x]\n    (cond (= px 0) 0\n          (= px 1) f\n          :else (recur s (+ f s) (dec px))))) (drop 1 (range (+ 1 %))))","user":"58969420e4b00487982d52a4"},{"problem":26,"code":"(fn [t]\n  (loop [i 2 a 1 b 1 r [1 1]]\n    (if (= i t)\n      r\n      (recur (inc i) b (+ a b) (conj r (+ a b))))))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn fibnums [n]\n  (last (take n (iterate #(conj % (reduce + (take-last 2 %))) [1]))))","problem":26,"user":"52244a77e4b01819a2de42d1"},{"code":"(fn fib\n  [n]\n  (letfn  [(f [a1 a2]\n             (cons a1 (lazy-seq (f a2 (+ a1 a2)))))]\n    (take n (f 1 1))))","problem":26,"user":"4f3e2fbbe4b0e243712b1f7e"},{"problem":26,"code":"(fn [d](loop [x 0 y 1 n d c 1 lst []]\n           (if (>= c n) (conj lst y) \n             (recur y (+ x y) n (inc c) (conj lst y)))))","user":"52b7e163e4b0c58976d9ad54"},{"code":"(fn fib [n] (if (= n 2) [1 1] (let [f (fib (dec n))] (conj f (apply + (take-last 2 f))))))","problem":26,"user":"5134973ce4b0230e9f713b42"},{"problem":26,"code":"#(last (take (dec %) (iterate (fn [l]\n                   (conj l (apply + (take-last 2 l)))) [1 1])))","user":"55129c5ce4b06e50f9beb1b5"},{"problem":26,"code":"(fn fib [ct]\n  (loop [accum [1]]\n    (if (< (count accum) ct)\n      (let [[curr prev] (reverse accum)]\n        (recur (conj accum (+ curr (or prev 0)))))\n      (seq accum))))","user":"52d81642e4b09f7907dd1387"},{"problem":26,"code":"(fn algo \n  [n]\n  (reverse (last (take (- n 1) (iterate (fn [lst]\n                   (cons (+ (first lst) (second lst)) lst)\n                   ) '(1 1)))))\n  )","user":"59e56c75e4b08badc2a0c556"},{"problem":26,"code":"(fn [n] \n  (loop [list '(1) prev 0]\n          (if (= (count list) n)\n            (list* list)\n            (if (= list '(1))\n              (recur (conj (vec list) 1) 1)\n              (recur (conj (vec list) (+ (last list) prev)) (last list))))))","user":"5756e218e4b02ea1147992e5"},{"problem":26,"code":"(fn [times]\n    (loop [current_value 0\n           coll_fib [1]]\n        (if (= (count coll_fib) times)\n            coll_fib\n            (recur (last coll_fib) (conj coll_fib (+ (last coll_fib) current_value))))\n))","user":"5885eb2de4b0f1effa3b76c6"},{"problem":26,"code":"(fn [n] \n      (loop [x n, col '(1 1)]\n        (if (> x 2)\n          (recur (dec x) (conj col (+ (first col) (second col))))\n          (reverse col))))","user":"52149e21e4b0961f15ac4d94"},{"problem":26,"code":"(fn [a]\n  (loop [i a\n         acc '(1)]\n    (if (= i 1)\n      (reverse acc)\n      (recur (dec i) \n             (conj acc (reduce + (take 2 acc)))))\n    ))","user":"5f7603a8e4b02876ed9fd0ad"},{"code":"#(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f713878e4b07046d9f4f00a"},{"code":"#(map (fn fib [i] (if (< i 2) 1 (+ (fib (- i 2)) (fib (dec i))))) (range %))","problem":26,"user":"4fedd2cae4b0198f34b063ba"},{"problem":26,"code":"(fn [x]\n  (loop [i x\n         res []\n         prec nil\n         prec-2 nil]\n\t(if (<= i 0)\n      res\n      (if (nil? prec)\n        (recur (dec i) (conj res 1) 1 prec-2)\n        (if (nil? prec-2)\n          (recur (dec i) (conj res 1) 1 1)\n          (recur (dec i) (conj res (+ prec-2 prec)) (+ prec-2 prec) prec))))))","user":"5afa9de0e4b0cc2b61a3bcf1"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] (vector b (+ a b))) [1 1]) ) ) )","user":"5bc50870e4b07a9b28b10069"},{"code":"#(take %\n       ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))1 1))","problem":26,"user":"518139bee4b06547fbae1149"},{"code":"(fn [n]((fn fi [s i j p](if (<= p (- n 3))(fi (conj s (+ i j)) j (+ i j) (inc p)) s)) [1 1] 1 1 0))","problem":26,"user":"516e2246e4b092a6408c5bc5"},{"code":"(fn fibo [x]\n  (loop [cnt 0 fseq '() lstb 0 lst 0]\n    (if (= cnt x)\n      fseq\n      (if (< cnt 2)\n        (recur (+ cnt 1)\n               (concat fseq (list 1))\n               lst\n               1)\n        (recur (+ cnt 1)\n               (concat fseq (list (+ lstb lst)))\n               lst\n               (+ lstb lst))))))","problem":26,"user":"52c0101fe4b07a9af5792343"},{"code":"#(loop [acc [] nm % old 0 new 1]\n   (if (zero? nm)\n     acc\n     (recur (conj acc new) (- nm 1) new (+ old new))))","problem":26,"user":"52d9ba39e4b09f7907dd13af"},{"problem":26,"code":"(fn fibonacci\n  ([num]\n   (cond\n     (= num 1) [1]\n     (= num 2) [1 1]\n     :else (fibonacci (- num 2) [1 1])))\n  ([num sum] (if (= num 0)\n               sum\n               (recur (dec num) (conj sum (reduce + (take-last 2 sum)))))))","user":"609beb06e4b00e9e6653c412"},{"problem":26,"code":"(fn [n]\n  (cond\n  (= n 1) '(1)\n  (= n 2) '(1 1)\n  :else\n  (reverse (reduce (fn [s e] (conj s (+ (first s) (second s)))) '(1 1) (take (- n 2) (range)))) )\n)","user":"5b4ff637e4b02d533a91bce0"},{"problem":26,"code":"#(loop [r [] c % n1 1 n2 1]\n       (if (= c 0)\n         r\n         (recur (conj r n1) (- c 1) n2 (+ n1 n2))))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn [n]\n  (loop [n n o 0 f [0 1]]\n    (if (== n 0)\n      (into '() 0)\n      (if (== o n)\n        (sort (into '() (subvec f 1 (inc n))))\n        (recur n (inc o) (conj f (+ (last f) (nth f (- (count f) 2)))) )))))","problem":26,"user":"51071f2ee4b05b2b4eee748e"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1] )))","problem":26,"user":"4ffb335ee4b0678c553fc3c5"},{"problem":26,"code":"#(take % ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b)))))\n          1 1))","user":"54c944b1e4b045293a27f666"},{"code":"(fn fib [x] \n\t\t\t(concat [1 1] ((fn innerFib [a b n] \n\t\t\t\t\t\t\t(cond \n\t\t\t\t\t\t\t\t(< n 0) ()\n\t\t\t\t\t\t\t\t(= n 0) [(+ a b)]\n\t\t\t\t\t\t\t\t:else (cons (+ a b) (innerFib b (+ a b) (- n 1))))) 1 1 (- x 3))))","problem":26,"user":"522ff396e4b032bbe3424172"},{"problem":26,"code":"(fn [n] (reverse \n          (loop [n1 0\n                 n2 1\n                 count 0\n                 list '()]\n            (if (= count n)\n              list\n              (recur n2 (+ n1 n2) (inc count) (conj list n2))))))","user":"5e64f44de4b0fd0acd1586ae"},{"problem":26,"code":"(fn [size]\n  ((fn [size col]\n    (cond\n      (<= size 0) []\n      (= size 1) [1]\n      (= size 2) [1 1]\n      :else ((fn [size col]\n               (if (<= size 0)\n                  col\n                  (recur (dec size) (conj col (reduce + (take-last 2 col)))))) (- size 2) [1 1]))) size []))","user":"570708fce4b0b0fb43fd0687"},{"code":"#(reduce (fn [acc x] (if (<= x 2) \n                       (conj acc 1) \n                       (conj acc (+ (last acc) (second (reverse acc))))))\n         [] (range 1 (+ % 1)))","problem":26,"user":"524717a9e4b05ef8e38e6352"},{"problem":26,"code":"(fn\n   [n]\n   (loop\n     [i 0\n      sequence []]\n     (let\n       [fibNMinusOne \n        (if (<= (count sequence) 1)\n          1\n          (last sequence))\n        fibNMinusTwo\n        (if (<= (count sequence) 1)\n          0\n          (last (butlast sequence)))\n        ]\n       (if (= i n)\n         sequence\n         (recur (inc i) (conj sequence (+ fibNMinusOne fibNMinusTwo)))))))","user":"55f9b634e4b03cbcff9738c9"},{"code":"(fn [n]\n  (let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take n fibs)))","problem":26,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn fibs [n]\n  (loop [fibs [1 1], a 1, b 1, n n]\n    (cond (= n 1) [1]\n    (= n 2) fibs\n\t  :else (recur (conj fibs (+ a b))\n\t\t       b\n\t\t       (+ a b)\n\t\t       (dec n)))))","problem":26,"user":"4e615cd2535d8ccf87e9fe58"},{"code":"(fn fib [n]\n  (loop [n n, res [1 1]]\n    (if (= n 2)\n      res\n      (recur (dec n)\n             (conj res (apply + (take-last 2 res)))))))","problem":26,"user":"4f0f9df7535d0136e6c22342"},{"problem":26,"code":"#(letfn [(fibo-me\n            ([] (concat [0 1] (fibo-me 0 1)))\n            ([a b]\n             (let [n (+ a b)]\n               (lazy-seq\n                 (cons n (fibo-me b n))))))]\n    (drop 1 (take (inc %) (fibo-me))))","user":"5ab23c99e4b073f1774425e2"},{"problem":26,"code":"(fn [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (loop [i 2 res '(1 1)]\n        (if (>= i n)\n          res\n          (recur (inc i) (concat res (list (reduce + (take-last 2 res))))))))))","user":"58ee2c14e4b056aecfd47d9e"},{"problem":26,"code":"(fn[x](take x (map first (iterate (fn [[a b]][b(+ a b)])[1 1]))))","user":"5826a843e4b051871117befd"},{"code":"(fn\r\n  [x]\r\n\t(loop [cnt 2 coll [1 1] a 1 b 1]\r\n\t\t(if (= x cnt)\r\n\t\t\tcoll\r\n\t\t\t(recur (inc cnt) (conj coll (+ a b)) b (+ a b)))))","problem":26,"user":"4edbae0d535d10e5ff6f531c"},{"problem":26,"code":"(fn fib [n]\n  (if (= 1 n) [1]\n  (if (= 2 n) [1 1]\n  (conj (fib (- n 1)) (reduce + (take 2 (reverse (fib (- n 1)))))))))","user":"54c74a78e4b045293a27f637"},{"code":"#(reverse ((fn [xs n]\n  (if (zero? n)\n    xs\n    (recur (cons (+ (first xs) (first (rest xs))) xs)\n           (dec n)))) [1 1] (- % 2)))","problem":26,"user":"4faae01ae4b081705acca206"},{"code":"#(take % (map last (iterate (fn [[a,b]] [b (+ a b)]) [0,1])))","problem":26,"user":"5102ef6be4b00c483ae176fc"},{"code":"#(map\n  (fn fib [n]\n    (cond\n      (= n 1) 1\n      (= n 2) 1\n      :else (+ (fib (- n 1)) (fib (- n 2)))))\n  (rest (range (inc %))))","problem":26,"user":"4f5155a3e4b03ad3f0c10d1b"},{"problem":26,"code":"(fn fibo-loop2 [n]\n  (loop [rslt () a 0 b 1 i 0]\n    (if (= i n)\n      (reverse rslt)\n      (recur (cons b rslt) b (+ a b) (inc i)))))","user":"59dd387be4b0a0ac046f2502"},{"problem":26,"code":"(fn fib [n] (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5619a388e4b053970a773afc"},{"problem":26,"code":"#(take %1 (cons 1 ((fn fib [a b] (cons (+ a b) (lazy-seq (fib b (+ a b))))) 0 1)))","user":"54f9920ee4b01ecee9d8883f"},{"code":"(fn [x] \n  (take x \n     ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a)\n                                          )\n                                     )\n                         )\n       )1 1) \n        )\n  )","problem":26,"user":"4e2164ff535d04ed9115e815"},{"code":"(fn [n]\n  (loop [n (- n 2)\n         acc '(1 1)]\n    (if (zero? n)\n      (reverse acc)\n      (recur (dec n) (conj acc (+ (first acc) (second acc)))))))","problem":26,"user":"5371a0fce4b0493c815db700"},{"problem":26,"code":"(comp reverse\n      (fn fab [n]\n                       (if (= n 2)\n                         '(1 1)\n                         (let [ls (fab (dec n))]\n                           (conj ls\n                                 (+ (first ls) (second ls)))))))","user":"5649542fe4b0284900eef63f"},{"problem":26,"code":"(fn [n] (take n (map #(first %) (iterate #(vector (last %) (apply + %)) [1 1]))))","user":"55249f64e4b0882d96d091c6"},{"problem":26,"code":"(fn fi [n] (flatten (if (= n 1) (list 1) (cons (fi (- n 1)) (list ((fn fib [y] (if (<= y 2) 1 (+ (fib (- y 1)) (fib (- y 2))))) n))))))","user":"59078134e4b047aa04b1995c"},{"problem":26,"code":"#(take % (reduce (fn [a b] (conj a (+ (last a) (last (butlast a))))) [1 1] (range %)))","user":"6040e6dbe4b0d5df2af2232a"},{"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"52cdc539e4b07d0d72b2737e"},{"code":"(fn fibnb [n]\n  (loop [xs '(1 1) nb (- n 2)]\n    (if (= 0 nb)\n      (reverse xs)\n      (recur (conj xs (+ (first xs) (second xs))) (dec nb)))))","problem":26,"user":"51d1e840e4b0d13b04db0d91"},{"problem":26,"code":"(fn [n]\n  (take n\n    ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"54258a7fe4b01498b1a71b0c"},{"code":"(fn [n]\n\t(loop [cn (- n 2) out [1 1]]\n\t\t(if (= 0 cn)\n\t\t\t(into '() (reverse out))\n\t\t\t(recur\n\t\t\t\t(dec cn) \n\t\t\t\t(conj out\n\t\t\t\t\t(+ (last out) (get out (- (count out) 2)))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","problem":26,"user":"51aefceee4b09397d5109797"},{"problem":26,"code":"(partial\n (fn [s a b n]\n   (if (zero? n)\n     s\n     (recur (conj s a) b (+ a b) (dec n))))\n [] 1 1)","user":"572db6d5e4b0cd1946bd0f78"},{"problem":26,"code":"(letfn [(fib [n]\n          (condp = n\n            1 '(1)\n            2 '(1 1)\n            (let [fib' (fib (dec n))]\n              (conj fib' (+ (first fib') (second fib'))))))]\n  (comp reverse fib))","user":"59fa241ee4b0ca45a743a358"},{"problem":26,"code":"(fn [n]\n     (cond\n       (= n 1) '(1)\n       (= n 2) '(1 1)\n       :else (loop [xs '(1 1)]\n               (if (= n (count xs))\n                 xs\n                 (recur (concat xs [(+ (last xs) (second (reverse xs)))]))))))","user":"54c8d4a8e4b045293a27f654"},{"problem":26,"code":"#(loop [x [1] y %]\n   (if (= 1 y)\n     x\n     (recur (conj x (apply + (take-last 2 x))) (dec y))))","user":"583f23dce4b089d5ab817dc9"},{"code":"#(map first (take % \n   (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n ))","problem":26,"user":"5306b349e4b02e8216869799"},{"problem":26,"code":"#((fn fibo [coll max-c] \n    (if (= max-c (count coll)) \n      coll \n      (fibo \n       (conj coll (reduce + (take-last 2 coll))) max-c)\n      )\n    ) [1 1] %)","user":"53f1dbede4b0742d9025b0e4"},{"code":"(fn [n]\n   (loop [result [1 1]]\n     (if (> n (count result))\n       (recur (conj result (+ (last result) (nth result (- (count result) 2))) ))\n       (take n result)\n       ) \n   ))","problem":26,"user":"52c98e7ae4b0c2d177d6213d"},{"problem":26,"code":"(fn\n  [n]\n  (loop [res ()\n         i 0]\n    (cond\n      (zero? n) res\n      (> i n) (reverse res)\n      (= i 0) (recur () (inc i))\n      (= i 1) (recur '(1) (inc i))\n      (= i 2) (recur '(1 1) (inc i))\n      :else (recur (cons (+ (first res) (second res)) res) (inc i)))))","user":"56df636ae4b0ca2494a095f4"},{"problem":26,"code":"#(map (memoize (fn fib [n] (case n\n          0 0\n          1 1\n          (+ (fib (- n 1)) (fib (- n 2)))\n          ))\n  ) (range 1 (inc %)))","user":"54c54d7ce4b045293a27f622"},{"problem":26,"code":"#(take % (map last (iterate (fn [x] (cons (last x) (list (reduce + x)))) '(0 1))))","user":"56fee4c0e4b08d47c97781b5"},{"code":"#(map (fn f [y]\n        (if (< y 3)\n          1\n          (+ (f (dec y)) (f (- y 2))))) (range 1 (inc %)))","problem":26,"user":"507ef25ce4b0f753b6f9788e"},{"problem":26,"code":"(fn [x]\n  (let [fibseq\n  ((fn recurfib [a b]\n      (lazy-seq (cons a (recurfib b (+ a b))))\n  ) 0 1)]\n  (rest (take (+ x 1) fibseq)))\n)","user":"5822b578e4b04b46fc4b0fa4"},{"problem":26,"code":"(fn [n]\n  (take n ((fn rfib [a b]\n            (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"5965eb8de4b069c0a1a19796"},{"code":"(fn fib[n] \n  (if (< n 3) \n    [1 1]\n    (let [f (fib (dec n))\n          [a b] (take-last 2 f)] \n      (conj f \n        (+ a b)))))","problem":26,"user":"4f1fd734535d64f6031464a5"},{"problem":26,"code":"(fn fib\n  [max]\n  (loop [a 1 b 1 sequence [1]]\n    (if (>= (count sequence) max)\n      sequence\n      (recur b (+ a b) (conj sequence b)))))","user":"55e9494ae4b0121d4835fd9e"},{"problem":26,"code":"(fn [n]\n  (let [fib ((fn rfib [a b]\n               (lazy-seq (cons a (rfib b (+ a b)))))\n             1 1)]\n    (take n fib)))","user":"5a861aafe4b05369db4d2496"},{"problem":26,"code":"(fn [iter]\n  (loop [prev 1 curr 1 count (- iter 2) accum `(1 1)]\n    (if (= count 0) (reverse accum)\n      (recur curr (+ curr prev) (- count 1) (conj  accum (+ prev curr))))))","user":"57f3f2bee4b07bbd65c32b1a"},{"problem":26,"code":"(fn fib_seq [x]\n  (take x\n    (map \n    \t(fn fib [x]\n      \t\t(case x\n        \t\t0 1\n        \t\t1 1\n        \t\t(+ (fib (- x 1)) (fib (- x 2)))\n             )\n         )\n     \t(range)\n     )\n   )\n)","user":"55d564ece4b0e31453f64a85"},{"problem":26,"code":"(fn [n]\n    (loop [a 1\n           b 1\n           result []\n           c n]\n      (if (= 0 c)\n        result\n        (recur b (+ a b) (conj result a) (dec c)))))","user":"58fff18be4b0438e51c2d00c"},{"code":"(fn [n]\n  (loop [accu '[1]\n         adder 0\n         step 1]\n    (if (= n step) accu\n        (let [last (last accu)]\n          (recur\n           (conj accu (+ last adder))\n           last\n           (+ step 1))))))","problem":26,"user":"504e2011e4b0f6ff3350c469"},{"problem":26,"code":"(fn fib-seq [n]\n  (loop [a 1 b 1 c n s []]\n    (if (zero? c)\n      s\n      (recur b (+ a b) (dec c) (conj s a)))))","user":"566b57e9e4b0a866af6896ad"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n             (fn [[a b]]\n               [b (+ a b)]) [1 1])))","user":"57bf6ca7e4b05aa3c4741c7c"},{"code":"#(loop [a 1 b 1 ans []]\n  (if (= % (count ans))\nans\n(recur b (+ a b) (conj ans a))))","problem":26,"user":"5012614ee4b02a085b99dc79"},{"code":"(fn [x]\n  (loop [x x a 0 b 1 r []]\n    (if (= x 0) r\n        (recur (dec x) b (+ a b) (conj r b)))))","problem":26,"user":"4f0660ee535dcb61093f6c0d"},{"problem":26,"code":"#(if (or (= % 1) (= % 2))\n   1\n   (loop [i % cur 1 prev 1 res [1]]\n     (if (= i 1)\n       res\n       (recur (dec i) (+ cur prev) cur (conj res cur)))))","user":"5964c614e4b069c0a1a19770"},{"problem":26,"code":"#(\n  loop [i %1 r '(1 1)]\n  (if (= i 2)\n    (reverse r)\n    (recur (dec i) (conj r (+ (first r) (second r))))\n    )\n  )","user":"55dc30d4e4b050e68259b3ad"},{"code":"(fn [x]\n  (loop [col [1 1] len (count col)]\n    (if (< len x)\n      (recur (conj col (+ (nth col (- len 2))\n                          (nth col (- len 1))))\n             (+ 1 len))\n      col)))","problem":26,"user":"51891c96e4b04c2714a2670e"},{"problem":26,"code":"(fn myfibo\n   ([n]\n     (rest (take (inc n) (myfibo 0 1))))\n   ([a b] \n     (lazy-seq (cons a (myfibo b (+ a b))))))","user":"544257b4e4b032a45b869379"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 num [0 1]]\n    (if (< i n)\n      (recur (inc i) (conj num (+ (last num) (nth num (dec i)))))\n      (rest num))))","user":"5e6556fbe4b0fd0acd1586b5"},{"problem":26,"code":"(fn [x] (map (fn fib [x]\n  (if (or (= x 0) (= x 1)) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range x)))","user":"506f0968e4b09350ab4199f5"},{"problem":26,"code":"#(take % (map first (iterate (fn [[n, l]] [l (+ n l)]) [1 1])))","user":"563536f8e4b0bfe05bf117c5"},{"code":"(fn [n] (loop [penultimatenumber 0 lastnumber 1 fib [1]]\n          (if (= (count fib) n)\n            fib\n            (let [currentnumber (+ penultimatenumber lastnumber)]\n              (recur lastnumber currentnumber (conj fib currentnumber))))))","problem":26,"user":"520f46f9e4b0101e4be6fcee"},{"code":"(fn [n] \r\n  (loop [rez [1 1]]\r\n    (if (>= (count rez) n)\r\n      rez\r\n      (recur (conj rez (apply + (take-last 2 rez)))))))","problem":26,"user":"508453abe4b0c98812d07891"},{"problem":26,"code":"(fn fib [n] \n  (if (= n 1) '(1)\n  \t(if (= n 2) '(1 1)\n      (let [prev (fib (- n 1))] \n       \t(concat\n         prev\n         (list\n          \t(+ \n            \t(last prev)\n            \t(last (drop-last prev))\n          \t)\n          )\n          \n        ) \n      )\n    )\n  )\n)","user":"53d5e45ae4b0e771c302544e"},{"problem":26,"code":"#(loop [idx %, r [1]]\n    (if (= idx (count r)) \n        r\n        (recur idx\n             (conj r \n                   (+ (nth r (- (count r) 1) 0) (nth r (- (count r) 2) 0)))\n                   )))","user":"5511ac85e4b06e50f9beb196"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 2)) (fib (- x 1))))) (range %))","user":"53ea9871e4b036ad0777e4e9"},{"code":"(fn fib [i] (take i\n  (map first (iterate\n    (fn [v] [(v 1) (+ (v 0) (v 1)) ]) [1 1 ]\n))))","problem":26,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(comp reverse\n    (fn fib [n]\n        (cond\n            (= n 0) '()\n            (= n 1) '(1)\n            (= n 2) '(1 1)\n            :else (let [xs (fib (- n 1)) prev1 (first xs) prev2 (second xs)]\n                (cons (+ prev1 prev2) xs)\n                ))))","problem":26,"user":"4fb4099be4b081705acca2a9"},{"problem":26,"code":"(fn fib\n  ([n] (reverse (fib [1 1] (- n 2))))\n  ([xs n] (if (> n 0)\n            (fib (cons (+ (first xs) (second xs)) xs) (dec n))\n            xs)))","user":"57fe836ee4b0d3187e9009d2"},{"problem":26,"code":"(fn fibs [count]\n  (seq ((fn inner-fibs [count]\n    (cond (= count 1) [1]\n          (= count 2) [1 1]\n          :else (conj (inner-fibs (dec count))\n                      (+ (last (inner-fibs (dec count)))\n                         (last (inner-fibs (dec (dec count))))))))\n        count)))","user":"56889672e4b0dcc4269f406c"},{"problem":26,"code":"#(take % ((fn fib [a b]\n          (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn[ numFibs ] ( (fn[ previous, current, fibList ] (cond (< (count fibList) numFibs) (let [nxt (+ previous current)] (cond (= nxt 1) (recur current nxt (conj fibList nxt nxt)) :else (recur current nxt (conj fibList nxt))) ) :else (reverse fibList)) ) 0 1 '()))","problem":26,"user":"52867936e4b0239c8a67ae16"},{"problem":26,"code":"(fn fibonnacciSequence\n  [n]\n  (map (fn fibonnacci\n  [n]\n  (cond\n    (= n 0) 1\n    (= n 1) 1\n    :else (+ (fibonnacci (- n 1)) (fibonnacci (- n 2))))) (range n)))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [c] (let [fib (fn f [c]\n  (if\n    (= c 1)\n    '(1)\n    (if\n      (= c 2)\n      '(1 1)\n      (conj (f (- c 1)) (+\n         (first (f (- c 1)))\n         (second (f (- c 1))))))))]\n  (reverse (fib c))))","problem":26,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":26,"code":"#(take % (map second (iterate (fn [[a b]] (vector b (+ a b))) [0 1])))","user":"5717e367e4b07c98581c3b1d"},{"problem":26,"code":"(fn [n]\n  (loop [xs [] ln n]\n    (if (<= ln 0)\n      xs\n      (recur (conj xs \n                  (if (< (count xs) 2)\n                    1\n                    (let [rxs (reverse xs)]\n                      (+ (first rxs) (second rxs)))))\n             (dec ln)))))","user":"5b796594e4b047b03b203705"},{"code":"#(rest (map (fn fib [x] (cond (= x 0) 0 (= x 1) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) (range (inc %))))","problem":26,"user":"51ec9114e4b069f463c22ccd"},{"problem":26,"code":"#(take %\n  (map first\n    (iterate (fn [[x y]]\n      [y (+ x y)])\n      [1 1])))","user":"52ad1d00e4b0c58976d9ac90"},{"problem":26,"code":"(fn [n]\n  (map #(loop\n  [n %\n   current 1\n   x1 0\n   x2 1]\n\n  (if (= n current)\n    x2\n    (recur n (inc current) x2 (+ x1 x2)))) (range 1 (inc n))))","user":"4eb47bb1535d7eef30807362"},{"code":"#(take % ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"51b3d998e4b0f094dd986fa8"},{"code":"#(take %\r\n  (map first\r\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4dd7d040535d2dad7130b5d6"},{"problem":26,"code":"#(take % \n    (map first \n        (iterate \n            (fn \n                [x] \n                (list \n                    (+ (first x) (second x)) \n                    (first x)\n                 )\n             )\n            (list 1 0))))","user":"569a29e1e4b0542e1f8d1444"},{"problem":26,"code":"(fn fib\n   ([n] (fib n 0 []))\n   ([total count acc]\n    (if (zero? (- total count))\n      acc\n      (if (or (= count 0)(= count 1))\n        (recur total (inc count) (conj acc 1))\n        (recur total (inc count) (conj acc (reduce + (take-last 2 acc))))))))","user":"58ffc6cfe4b0438e51c2d008"},{"code":"#( \n(\n    fn fib* [index prev1 prev2 out] (\n                                     if (> index %) (vec out) (fib*\n                                                             (+ index 1)\n                                                             prev2\n                                                             (+ prev1 prev2)\n                                                             (conj out (+ prev1 prev2))\n                               )))\n   2 0 1 [1]\n)","problem":26,"user":"52500c9ae4b0541d1855b825"},{"problem":26,"code":"(fn fib [n] (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"55844125e4b05c286339e121"},{"problem":26,"code":"(fn [n]\n  (loop [s [1] j 1 i 0 c 1]\n    (if (>= c n) s\n      (recur\n       (conj s (+ j i))\n       (+ j i)\n       j\n       (inc c)))))","user":"5a306073e4b09cafd31c7f9f"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n          (lazy-seq (cons a (fib b (+ a b)))))\n        1 1))","user":"579fa28fe4b0264b925669fb"},{"code":"#(take %\n    (map first\n         (iterate\n           (fn [[f s]] [s (+ f s)])\n           [1 1])))","problem":26,"user":"4ed15f60535d44c135fd68cd"},{"code":"(fn [n]\n  (letfn [(fib [past] [(reduce + past) (first past)])]\n    (->> [1 0]\n      (iterate fib)\n      (map first)\n      (take n))))","problem":26,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":26,"code":"(fn [n] \n  (take n\n        (reduce (fn [coll i] (conj coll\n                                   (+ (peek coll)\n                                      (peek (pop coll)))))\n                [1 1]\n                (range (- n 2)))))","user":"550f1e51e4b06e50f9beb172"},{"code":"(fn fibos [n]\n  (loop [a 1 b 1 cnt (dec n) res [1]]\n    (if (= cnt 0) res\n      (recur b (+ a b) (dec cnt) (conj res b)))))","problem":26,"user":"51721aefe4b0d70c8bbbf24a"},{"code":"(fn [n] \n  (take n (rest (map first (iterate (fn [[x y]] [y (+ x y)]) [0 1])))))","problem":26,"user":"52be0c48e4b07a9af5792311"},{"code":"(fn [n]\n\t(take n\n\t      ((fn fibonacci [a b]\n\t\t (cons a (cons b (lazy-seq (fibonacci (+ a b) (+ a b b)))))) 1N 1N)))","problem":26,"user":"51937eb3e4b04df54c098022"},{"code":"(fn \n  [n] \n  (last (take (dec n) \n              (iterate \n               (fn [s] \n                 (conj s (+ (last s) (last (drop-last s))))) \n               [1 1]))))","problem":26,"user":"5235a902e4b0a643f2dcb750"},{"problem":26,"code":"(fn [number]\n  (loop [list [1 1]]\n    (let [n (last list)\n          n-minus-1 (last (butlast list))\n          res (+ n n-minus-1)]\n      (if (= (count list) number)\n        list\n        (recur (conj list res))))))","user":"573b8f67e4b0cd1946bd10ae"},{"problem":26,"code":"(fn fab\n  ([a b k coll n]\n  \t(if (= k n)\n      coll\n      (fab b (+ a b) (+ k 1) (conj coll b) n)))\n  ([n]\n   (fab 0 1 0 [] n)))","user":"56822f37e4b0945ebc182a8d"},{"code":"(fn [n]\r\n  (loop [f [1 1]\r\n\t       x 1\r\n\t       y 1\r\n\t       i (- n 2)]\r\n\t   (if (= 0 i)\r\n\t       f\r\n\t       (recur (conj f (+ x y))\r\n\t\t      y\r\n\t\t      (+ x y)\r\n\t\t      (- i 1)))))","problem":26,"user":"4e07eac0535d04ed9115e7a9"},{"code":"(fn [n] (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))1 1)))","problem":26,"user":"504e72cee4b0f6ff3350c4b4"},{"problem":26,"code":"(fn fib [n]\n  (case n\n   1 [1]\n   2 [1 1]\n   (let [f (fib (dec n))]\n     (conj f (+ (last f) (last (butlast f)))))))","user":"5fa8424ce4b0fa27300f3de5"},{"problem":26,"code":"(fn [it] (take it (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"556cc24ae4b09a3098a52502"},{"code":"(fn my-fib \n  ([how-many] (my-fib how-many '()))\n  ([how-many fib-coll] \n    (cond\n          (= how-many (count fib-coll)) (reverse fib-coll)\n          (or (empty? fib-coll) (= 1 (count fib-coll))) (my-fib how-many (conj fib-coll 1))\n          :else (recur how-many (conj fib-coll (+ (first fib-coll) (second fib-coll))))\n)))","problem":26,"user":"4eee3e6a535d93acb0a668c3"},{"code":"#(take % (\n  (fn f [a b]\n    (lazy-seq\n      (cons a (f b (+ a b)))))\n  1 1))","problem":26,"user":"4db85bdd535d1e037afb218d"},{"code":"(fn [x] \n  (loop [count (- x 2) f 1 s 1 fib [1 1]]\n    (if (= 0 count) fib (recur (dec count) s (+ f s) (conj fib (+ f s))))))","problem":26,"user":"51a61484e4b0740bfd1afd1e"},{"problem":26,"code":"(fn [n] \n\n  (letfn [(fib [n] (cond (= n 1) 1 (= n 2) 1 :else (+ (fib (- n 1)) (fib (- n 2)))))]\n  \n    (map fib (range 1 (+ n 1)))\n  \n  )\n)","user":"54a7d707e4b09f271ff37c9b"},{"problem":26,"code":"#(reduce\n  (fn [a b] (conj a (reduce + (take-last 2 a) )))\n  [1 1]\n  (range (- % 2))\n)","user":"56436194e4b0018b46ad8bf2"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)])'[1 1])))","user":"557819dce4b05c286339e088"},{"problem":26,"code":"(fn fib [x]\n  (loop [acc '(1 1) i 2]\n    (if (>= i x)\n      (reverse acc)\n      (recur (cons (+ (first acc) (first (rest acc))) acc) (inc i)))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":26,"code":"(fn [x] \n  (loop [cnt (- x 2) r [1 1]] \n    (if (= cnt 0)\n      r\n      (recur (dec cnt) (conj r (+ (first (reverse r)) (nth (reverse r) 1))))\n    \n   )))","user":"541c1e46e4b01498b1a71a70"},{"problem":26,"code":"(fn [x] \n  (\n   (fn [arr cnt] \n     (cond \n      (< cnt 2)\n      \t(recur (conj arr 1) (inc cnt)) \n      (< cnt x) \n      \t(recur (conj arr (+ (peek arr) (peek (pop arr)))) (inc cnt))\n      :else \n      \tarr\n     )\n   ) [] 0\n  )\n)","user":"564d936ee4b0284900eef681"},{"code":"#(rest (take (+ % 1)((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   0 1)))","problem":26,"user":"4faa7c76e4b081705acca1f5"},{"problem":26,"code":"(fn [i] (reverse (reduce #(into [(apply + (take 2 %1))] (and %2 %1)) [1 1] (repeat (- i 2) 1))))","user":"57ce3fede4b0c746388ab8a6"},{"problem":26,"code":"(fn [x] ( \n  (fn fib [start range]\n    \"Creates a vector of fibonnaci numbers\"                                                                                                                                                                                                  \n  \t(if (<= range 0)                                                                                                                                                                                                                         \n   \tstart                                                                                                                                                                                                                                  \n   \t\t(recur (let[subvector (subvec start (- (count start) 2))                                                                                                                                                                               \n                x (nth subvector 0)                                                                                                                                                                                                        \n                y (nth subvector 1)                                                                                                                                                                                                        \n                z (+ x y)]                                                                                                                                                                                                                 \n             (conj start z))                                                                                                                                                                                                               \n           (- range 1)))) [1 1] (- x 2)))","user":"5661292fe4b068f2fe63dc63"},{"problem":26,"code":"(fn a [n]\n  (loop [res '() num n b 1 c 2]\n    (if (zero? num) (take n (cons 1 (cons 1 (reverse res))))\n      (recur (cons c res) (dec num) c (+ c b)))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":26,"code":"(fn fib\n  ([x]   \n   (condp = x\n     0 [0]\n     1 [1]\n     (fib (- x 2) [1 1])))\n  ([x res]\n   (if (zero? x)\n     res\n     (recur (dec x)\n            (conj res (apply + (take-last 2 res)))))))","user":"580d2788e4b0849f6811b730"},{"problem":26,"code":"(fn my-fib [x]\n  (if (= 2 x)\n    '(1 1)\n    (let [y (my-fib (dec x))] \n      (concat y [(+ (last y) (last (butlast y)))]))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":26,"code":"(fn fib\n  [size] \n  (case size\n    0 nil\n    1 [1]\n    2 [1 1]\n    (let [left (fib (- size 1)) \n          last-two (take-last 2 left)] \n      (conj left (+ (first last-two) (last last-two))))))","user":"560d98cee4b05f002753df43"},{"problem":26,"code":"(fn [x]\n  (loop [counter x ans [] a 1 b 0]\n    (if (<= counter 0) ans\n    (recur (dec counter) (conj ans a) (+ a b) a))))","user":"55dfac9de4b050e68259b3fa"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (loop [a 1 b 1 i 2 result [1 1]]\n      (if (= i n)\n        result\n        (recur b (+ a b) (inc i) (conj result (+ a b)))))))","user":"55d354e0e4b0e31453f64a62"},{"code":"(fn [count] \n  (loop [result [] curr 0 next 1 count count]\n    (if (= count 0)\n      result\n      (recur (conj result next) next (+ curr next) (dec count))\n    )\n  )\n)","problem":26,"user":"52aabeffe4b0c58976d9ac6b"},{"problem":26,"code":"#(take\n  %\n  ((fn fib [x y]\n     (cons\n      x\n      (lazy-seq\n       (fib y (+ x y)))))\n   1 1))","user":"590b8607e4b047aa04b199db"},{"code":"(fn take-n-fib [n] (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4ef6f5ea535dced4c769f250"},{"problem":26,"code":"(fn fib [x]\n  (let [toReturn [1 1]]\n    (let [x (- x 2)]\n      (loop [toReturn toReturn x x]\n        (if (< x 1)\n          toReturn\n          (recur\n            (conj toReturn (+ (last toReturn) (last (drop-last toReturn))))\n            (dec x)\n          )\n        )\n      )\n    )\n  )\n)","user":"5972198ee4b01722bebd4c7d"},{"problem":26,"code":"(fn\n   [x]\n   (loop [cx x\n          r []]\n     (println \"x:cx:r\" x cx r)\n     (if (= cx 0)\n       (vec r)\n       (if (>= cx (dec x))\n         (recur (dec cx) (conj r 1))\n         ;(println \"r\" (dec cx) (conj r 1))\n         (recur (dec cx) (conj r (+ (get r (dec (count r))) (get r (- (count r) 2)))))\n         ;(println \"r\" (dec x) (conj r (+ (get r (dec (count r))) (get r (- (count r) 2)))))\n         )\n       )\n     )\n   )","user":"60631c2ee4b069485764ddbd"},{"code":"(fn fib [n]\r\n  (loop [a 0 b 1 n n r []]\r\n    (let [current (conj r b)]\r\n      (if (= n 1)\r\n        current\r\n        (recur b (+ a b) (dec n) current)))))","problem":26,"user":"4e111538535d04ed9115e7c3"},{"code":"(fn [x]\n  (if (= x 1) '(1)\n    (loop [r '(1 1) steps x]\n      (if (= steps 2)\n        (reverse r)\n        (recur (conj r (+ (first r) (second r))) (dec steps))))))","problem":26,"user":"536eb396e4b0fc7073fd6e74"},{"code":"#(loop [a 1 b 1 c 2 r [1 1]](if (= c %) r (recur b (+ a b) (inc c) (conj r (+ a b)))))","problem":26,"user":"52dbfe84e4b09f7907dd13c9"},{"problem":26,"code":"#(take % (( fn fibo ([] (fibo 1 1)) ([m n] (cons m (lazy-seq (fibo n (+ m n)))))     )))","user":"585e7c60e4b0f14aab7c87b3"},{"problem":26,"code":"(fn [n]\n (letfn [(fibonacci [n]\n  (cond\n   (= n 0) 0\n   (= n 1) 1\n   :else (+ (fibonacci (- n 2)) (fibonacci (- n 1)))))]\n  (for [i (range 1 (inc n))] (fibonacci i))))","user":"53f35c34e4b0742d9025b0f4"},{"code":"#(take % (map second (iterate (fn [[n,np1]] [np1 (+ n np1)]) [0,1])))","problem":26,"user":"4ed27f9f535d44c135fd68d5"},{"problem":26,"code":"#(take %\n       (map second\n            (iterate (fn [[a b]] [b (+ a b)])\n                     [0 1])))\n;; better: second --> first\n;;         [0 1] --> [1 1]","user":"55952410e4b0c79f6e1db962"},{"code":"(fn [x] (take x (map last (iterate (fn [[a b]] [b (+ a b)]) [0,1]))))","problem":26,"user":"5166b491e4b060c690c1f4be"},{"code":"(fn [n]\n  (letfn [(fib [a b]\n              (cons a (lazy-seq b (fib b (+ a b)))))]\n    (take n (fib 1 1))))","problem":26,"user":"5312cdaae4b08068f379ed03"},{"problem":26,"code":"(fn fib [n]\n  (map first (take n (iterate (fn [[a b]]\n           [b (+ a b)]) [1 1]))))","user":"54f4adc8e4b0f2f3c5226e86"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (nth\n    (iterate\n     #(cons (+ (nth % 0) (nth % 1)) %)\n     '(1 1))\n    (- n 2))))","user":"5d0e9931e4b0cc9c91588258"},{"code":"(fn [n] (map first (take n (iterate (fn [pair] (list (nth pair 1) (reduce + pair))) '(1 1)))))","problem":26,"user":"52872d54e4b0239c8a67ae32"},{"code":"#(letfn [(fib-seq [first second]\n           (lazy-seq (cons first (fib-seq second (+ first second)))))]\n  (take % (fib-seq 1 1)))","problem":26,"user":"4e7c8fd1535db169f9c796be"},{"code":"(fn [n] (map\n         (fn fib[x]\n           (if (< x 1)\n             (+ x 1)\n             (+ (fib (- x 1)) (fib (- x 2)))\n           )\n         )\n         \n         (range n)\n        )\n)","problem":26,"user":"520aaac2e4b01da9d47a99e6"},{"problem":26,"code":"(fn r [n] (reverse  (\n(fn fiboList [n]\n  (if (<= n 1)\n    '(1)\n    (conj (fiboList (- n 1)) ( \n                              (fn fibo [x] \n                                (if (= x 1) 1\n                                  (if (= x 2) 1\n                                    (+ (fibo (- x 1)) \n                             (fibo (- x 2)) ))))  n))) )n)))","user":"567debb5e4b05957ce8c61ce"},{"problem":26,"code":"(fn fibonacci_sequence [n]\n  (if (= n 2)\n    [1 1]\n    (let [sequence (fibonacci_sequence (- n 1))]\n      (conj\n        sequence\n        (+ (last sequence) (last (butlast sequence)))\n      )\n    )\n  )\n)","user":"58e980dfe4b056aecfd47d0b"},{"problem":26,"code":"(fn [n]\n  (if (= n 1) '(1) (reverse\n    ((fn [fibs m]\n      (if (= m 2) fibs\n          (recur (cons (+ (first fibs)(second fibs))\n                       fibs)\n                 (- m 1))))\n         '(1 1) n))))\n\n\n;; Any sequence can be expressed as a (trivial) \n;; reduction, by adding elements to a list!\n;; Fibonacci seq as a reduction!\n;;(reduce (fn [a _] \n;;            (cons (+ (first a)(second a))a))[1 1]\n;;          (repeat 20 -1))","user":"5627444fe4b00e49c7cb47cd"},{"problem":26,"code":"#(reverse (if (= % 1) [1] (if (= % 2) [1 1] (reduce (fn [buffer rng](cons (+ (first buffer)(second buffer))buffer))[1 1] (range (- % 2))))))","user":"59406b94e4b069cdc2982bfd"},{"code":"#(loop [i % x [1 1] ] (if (= i 2) x (recur (dec i) (conj x (+ (last x) (-> x reverse second))))))","problem":26,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":26,"code":"(fn\n  [x]\n  (loop [i x a 0 b 1 res '()]\n    (if (= i 0)\n      (reverse res)\n      (recur (dec i)\n             b\n             (+ a b)\n             (conj res b)))))","user":"5523fce8e4b0882d96d091b4"},{"code":"(fn [n]\n  (letfn [(fib [n]\n              (if (< n 2) \n               1\n               (+ (fib (- n 2))\n                  (fib (- n 1)))))]\n    (map fib (range n))))","problem":26,"user":"4f75469ee4b0fbe0118ec55a"},{"problem":26,"code":"(fn [n] \n    (loop [fib [1] i 1 ] \n        (if(= i n)\n            fib\n            (if (< i 2)\n                (recur \n                 (conj fib 1)\n                 (inc i)\n                 )\n                (recur \n                    (conj fib (+ (get fib (- i 1) 1) (get fib (- i 2) 1)))\n                     (inc i)\n                 )\n            \n            ))))","user":"5fa9fd9be4b0fa27300f3df5"},{"code":"#(map first \n \t(take % (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"521679e9e4b0bf4bffd29cca"},{"problem":26,"code":"(fn [list-length] \n  (loop [a 1, b 1, acc [1]] \n    (if (>= (count acc) list-length) \n      acc\n      (recur b (+ a b) (conj acc b)))))","user":"5545f713e4b0a04f7929953a"},{"code":"#(letfn [(fib [n] \r\n  (cond\r\n   (= n 0) 1\r\n   (= n 1) 1\r\n  :else (+ (fib (dec n)) (fib (dec (dec n))))))]\r\n (for [x (range %)] (fib x)))","problem":26,"user":"4ee17ecc535d10e5ff6f535a"},{"problem":26,"code":"(fn fib [n] \n  (cond\n   (== n 1) '(1)\n   (== n 2) '(1 1)\n   :else (let [pre (fib (- n 1))]\n           (concat \n            pre\n            (list (+ (nth pre (- n 2)) (nth pre (- n 3))))))))","user":"5dbbf77ce4b09f47823971ab"},{"code":"(fn firstfib [n]\n  (if (< n 3)\n    (subvec [1 1] 0 n)\n    (let [nums (firstfib (dec n))]\n      (conj\n        nums \n        (+ (nth nums (- n 3))\n           (nth nums (- n 2)))))))","problem":26,"user":"526ee63de4b03e8d9a4a733f"},{"problem":26,"code":"(fn [x]\n  (loop [c (dec x)\n         pre 1\n         prepre 0\n         a [1]]\n    (print c)\n    (let [cur (+ pre prepre)]\n      (if (> c 0)\n        (recur (- c 1) cur pre (conj a cur))\n        (seq a)))))","user":"57c314f3e4b05aa3c4741cba"},{"problem":26,"code":"#(take % ((fn fibs [a b] (cons a (lazy-seq (fibs b (+ a b))))) 1 1))","user":"567b4641e4b05957ce8c61a5"},{"problem":26,"code":"(fn fib [n]\n                     (if (< n 2)\n                       [1]\n                       (if (< n 3)\n                         [1 1]\n                         (conj (fib (dec n)) (+ (last (fib (- n 1))) (last (fib (- n 2))))))))","user":"587ee260e4b052da650a6353"},{"problem":26,"code":"#(loop [x [1 1]]\n  (if (= (count x) %)\n    x\n    (recur (conj x (apply + (take 2 (reverse x)))))))","user":"592db566e4b072a2710fcf7c"},{"problem":26,"code":"#(if (= % 1) [1]\n  ((fn [xs x] (if (= x 0) (reverse xs) \n              (recur \n               (cons \n                (+ (first xs) (first (rest xs))) \n                xs)  \n               (- x 1)))) [1 1] (- % 2))\n   )","user":"5af0c1ede4b0cc2b61a3bc57"},{"problem":26,"code":"(fn [x] (map (fn myfib [x] (cond \n       (= x 0) 0\n       (= x 1) 1\n       :else (+ (myfib (- x 1)) (myfib (- x 2))))) (range 1 (inc x))))","user":"534b57bbe4b084c2834f4a78"},{"problem":26,"code":"(fn [n]\n  (reverse\n   ((fn fib [sq]\n      (if (= (count sq) n)\n        sq\n        (fib (conj sq\n                   (+ (first sq)\n                   (second sq))))))\n    '(1 1))))","user":"5751eb97e4b02ea11479928e"},{"problem":26,"code":"(fn [n] (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","user":"56fc1d61e4b07572ad1a88de"},{"problem":26,"code":"(fn [n] \n  (->> [1 1]\n      (iterate (fn [[a b]] [b (+' a b)]))\n      (map first)\n      (take n)))","user":"5bd7b8b8e4b0ed4b8aab4bc6"},{"problem":26,"code":"(fn [times]\n  (drop 1 (take (inc times) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"54dbe183e4b024c67c0cf778"},{"problem":26,"code":"(fn [n] \n   (take n ((fn fb\n     ([] (lazy-seq (cons 1 (fb 1))))\n  \t ([n] (lazy-seq (cons n (fb 1 n))))\n  \t ([n1 n2] (let [nn (+ n1 n2)] (lazy-seq (cons nn (fb n2 nn)))))))))","user":"566096bee4b068f2fe63dc59"},{"code":"(fn [n]\n  (map first (take n (iterate (fn [v] [(apply + v) (first v)]) [1 0]))))","problem":26,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn listaFi [x]\r\n    (map (fn f [u] (if (< u 2) \r\n   u \r\n   (+ (f(- u 2) ) ( f (- u 1) ) )\r\n         ) ;;end if \r\n             ) (range 1 (+ x 1) ) ;; primeiro faz uma lista de 1 -> x\r\n))","problem":26,"user":"4e94b4f7535dbda64a6f6b27"},{"code":"(fn [x]\n  (loop [x x\n    y 0\n    z 1\n    coll []]\n      (if (< (count coll) x)\n(recur x z (+ y z) (conj coll z))\ncoll)))","problem":26,"user":"504e2333e4b0f6ff3350c46c"},{"problem":26,"code":"(fn fib ([n] (fib n [] 1 1 0)) ([n acc prev last i] (if (= i n) acc (fib n (conj acc prev) last (+ prev last) (inc i)))))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"#(loop[x % z [1 1]](if(zero? (- x 2))z(recur (dec x)(conj z (+ (last z) (last (drop-last z)))))))","problem":26,"user":"52ce4c32e4b07d0d72b2738d"},{"problem":26,"code":"(fn [n]\n   (let [fib\n         (fn f [n] (cond\n                    (zero? n) 0\n                    (or (= 1 n) (= 2 n)) 1\n                    :else (+ (f (dec n)) (f (- n 2)))))]\n       (map fib (range 1 (inc n)))))","user":"5ce05561e4b0a17bb84e2b08"},{"code":"(fn [n]\n    (take n (rest\n              ((fn rfib [a b]\n                 (lazy-seq\n                   (cons a (rfib b (+ a b))))) 0 1))))","problem":26,"user":"4e36425c535deb9a81d77f33"},{"code":"(fn u [x] (if (= x 3) '(1 1 2)\n          (if (= x 6) '(1 1 2 3 5 8)\n          '(1 1 2 3 5 8 13 21))))","problem":26,"user":"502d39f8e4b0d96a44ab2032"},{"problem":26,"code":"(fn fib [n]\n  (loop [acc []\n         curr 1\n         before 0\n         number n]\n    (if (= number 0)\n      (seq acc)\n      (recur (conj acc curr) (+ curr before) curr (- number 1)))))","user":"55bbfd60e4b01b9910ae29ed"},{"code":"(fn [n] (cond (= n 0) '()\n                 (= n 1) '(1)\n                 true ((fn fib-iter [v i]\n                         (if (= i n)\n                           (reverse v)\n                           (fib-iter (conj v (+ (first v) (second v))) (inc i))))\n                '(1 1) 2)))","problem":26,"user":"526143b7e4b03e8d9a4a705a"},{"code":"(fn [n]\n  (loop [i 2, n-1 1, n-2 1, fib [1 1]]\n    (if (= i n)\n      fib\n      (let [res (+ n-1 n-2)]\n        (recur (inc i) res n-1 (conj fib res))))))","problem":26,"user":"4f8c6bf6e4b02e764a0a519b"},{"problem":26,"code":"#(take % (map first (drop 1 (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"55d93d24e4b0e31453f64ac6"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq   b (fib b (+ a b))))) \n      1 1)))","user":"566e5a03e4b0a866af6896d8"},{"code":"(fn fib [n]\n\t(take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","problem":26,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":26,"code":"(fn [n] (loop [rs '(1)\n                       lst 0\n                       x 1]\n                  (if (>= x n)\n                    rs\n                    (recur (concat rs [(+ (last rs) lst)]) (last rs) (inc x)))))","user":"5da5a1eee4b000c986472c04"},{"problem":26,"code":"(fn fib [x]\n  (take x (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"54610355e4b01be26fd74696"},{"code":"(fn [n]\n  (loop [\n        x 1\n        y 1\n        result [1 1]\n        ]\n    (if (= n (count result))\n        (reverse (into '() result))\n        (recur y (+ x y) (conj result (+ x y)))\n    )\n  )\n)","problem":26,"user":"52bc7ea6e4b07a9af57922f7"},{"problem":26,"code":"(fn [n]\n  (case n\n  0 [1]\n  1 [1]\n  ((fn  nx [s c]\n     (if (= c n)\n        s\n       (nx (conj s  (+ (last s) (nth s (- (count s) 2)))) (inc c))))  [1 1] 2)))","user":"5e32b010e4b05b4b01516242"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n] \n     (cond\n      (< n 1) 0\n      (< n 3) 1\n      :else\n      \t(+\n         (fib (- n 2)) \n         (fib (- n 1)) ) ))]\n    \n  (map fib (range 1 (inc n)))))","user":"581a703de4b0e114eb51a005"},{"problem":26,"code":"(fn [n]\n         (loop [a 0\n                b 1\n                m [1]\n                n n]\n           (if (= n 1)\n             m\n             (recur b (+ a b) (conj m (+ a b)) (dec n) ))))","user":"58455b05e4b089d5ab817e65"},{"code":"#(loop [x 1\n        y 1\n        s []]\n   (if (= % (count s))\n     (seq s)\n     (recur y (+ x y) (conj s x))))","problem":26,"user":"52f685eae4b047fd55836fb8"},{"problem":26,"code":"(fn [num] \n  (take num ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)) )","user":"53e4bc2ee4b036ad0777e44d"},{"code":"#(->> (iterate (fn [[old new]]\n                   [new (+ old new)])\n                 [1 1])\n      (take %)\n      (map first))","problem":26,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [n]\n  (loop [s [1] v 1 t n]\n    (if (> t 1)\n      (recur (conj s v) (+ v (last s)) (dec t))\n      s)))","problem":26,"user":"4fac80d1e4b081705acca22a"},{"problem":26,"code":"(fn [n] (map first (take n (iterate (fn [[x y]] (vector y (+ x y))) [1 1]))))","user":"56cda514e4b0ea9b8538f74e"},{"code":"(fn [n]\n  (loop [fibs '[1 1] it 2]\n    (if (= it n)\n      fibs\n      (recur (conj fibs (+ (last fibs) (last (butlast fibs)))) (+ 1 it)))))","problem":26,"user":"4f99cfc2e4b0dcca54ed6d02"},{"problem":26,"code":"(fn [n]\n  (loop [cur 0\n         nxt 1\n         ctr 0\n         builder []]\n    (if (= ctr n)\n      builder\n      (recur nxt (+ cur nxt) (inc ctr) (conj builder nxt)))))","user":"58e56154e4b056aecfd47c92"},{"problem":26,"code":"#(rest (reverse (reduce (fn [acc v] (conj acc (+ (first acc) (second acc)))) (list 1 0) (range (dec %)))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":26,"code":"(fn fib\n  ([n] (fib 0 1 n))\n  ([a b n]\n  (cond\n   (= n 0) '()\n   :else\n    (cons b\n          (fib b\n               (+ a b)\n               (- n 1))))))","user":"58138439e4b0f478707a0611"},{"problem":26,"code":"(fn [y x]\n      (if (= (count y) x)\n        y\n        (recur (conj y (+\n                         (nth y\n                           (- (count y) 1) )\n                         (nth y\n                           (- (count y) 2)))) (+ x 0))\n        ))[1 1]","user":"5400e918e4b0de5c41848619"},{"code":"(fn fib [n]\n     (reverse (if (< n 3)\n       (repeat n 1)\n       (let [fib-1 (fib(- n 1))\n             fib-2 (fib(- n 2))]\n       (conj (reverse fib-1) (+ (last fib-1) (last fib-2) ))))))","problem":26,"user":"50fd027be4b0d10d794c19fe"},{"problem":26,"code":"(fn [x] (loop [x x a 0 b 1 res []] (if (= x 0) res (recur (dec x) b (+ a b) (conj res b)))))","user":"5e04ce34e4b0a607a9a45d71"},{"problem":26,"code":"(fn fib [x]\n     (loop [s 0 v1 0 v2 1 end []]\n         (cond\n             (= s x) (seq end)\n             :else (recur (inc s)\n                            v2\n                            (+ v1 v2)\n                            (conj end v2)))))","user":"53b42b9ce4b047364c0444b3"},{"problem":26,"code":"(fn [x] (take x ((fn fib\n  ([] (fib 0 1))\n  ([n-1 n-2] (lazy-seq (cons n-2 (fib n-2 (+ n-1 n-2)))))))))","user":"587a3babe4b01531a375eae2"},{"problem":26,"code":"(fn [x]\n    (loop [i 1 result [1]]\n      (if (< i x)\n        (recur \n         (inc i) \n         (conj result (if (= i 1) 1 (+ (nth result (- i 2)) (last result)))\n               )\n         )\n        result\n        )\n      )\n    )","user":"571a282ae4b07c98581c3b46"},{"problem":26,"code":"#(loop [built [] a 0 b 1]\n   (if (= (count built)  % ) (lazy-seq built)\n     (recur (conj built b) b (+ a b))))","user":"58cd4949e4b03c36ff7e5886"},{"code":"(fn [x] (loop [n 1 m 1 res [1 1]] (if (< (count res) x) (recur m (+ m n) (conj res (+ m n))) res)))","problem":26,"user":"4daec4a0edd6309eace4d15e"},{"problem":26,"code":"(letfn [(fib ([]    (fib 1 1))\n             ([a b] (cons a (lazy-seq (fib b (+ b a))))))]\n  #(take % (fib)))","user":"55d0e76ae4b0e31453f64a40"},{"problem":26,"code":"#(take %\n  ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n    1 1))","user":"58c7a80fe4b021aa9917ed7b"},{"code":"(fn [n] (conj (take (dec n) (map first (iterate (fn [[x y]] [y (+ x y)]) [1 2]))) 1))","problem":26,"user":"4ee9d697535d93acb0a66895"},{"problem":26,"code":"(fn [n] (take n (\n (fn fib-r [a b] (cons a (lazy-seq b (fib-r b (+ b a)) ) ) ) 1 1\n )))","user":"56cd67c1e4b0ea9b8538f74a"},{"code":"(fn f2  [d]\n  (loop [ ant 1 suma 0 indice 0 res ()]\n          (if (< indice d )\n\n                   (recur  \n                     suma (+ ant suma) (inc indice)  (conj res (+ ant suma)))                \n\n            (sort res)\n          )\n       )  \n)","problem":26,"user":"50255bafe4b0b0b8afb15aa8"},{"problem":26,"code":"(fn fib [n]\n  (let [calc (fn calc [n]\n               (if (= n 0)\n                 0\n                 (if (= n 1)\n                   1\n                   (+ (calc (- n 1)) (calc (- n 2))))))]\n    (for [x (range 1 (+ n 1))]\n      (calc x))))","user":"572010a4e4b0c5bde472c08c"},{"problem":26,"code":"(fn[x]\n  (loop[i 1\n        rtn [0 1]]\n    (if(>= i x) (rest rtn)\n              (recur(inc i)\n                    (conj rtn (+ (last (pop rtn)) (last rtn)))))))","user":"54a11042e4b09f271ff37c49"},{"problem":26,"code":"(fn fib [n]\n  (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"51e24905e4b01e519814642e"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    (let [s (reverse (fib (- n 1)))\n          x (apply + (take 2 s))]\n      (reverse (cons x s)))))","user":"55253217e4b0882d96d091ce"},{"problem":26,"code":"#( loop [col   '(1 1)\r\n          cnt   (- % 2)]\r\n    (if (zero? cnt)\r\n      (reverse col)\r\n      (recur (conj col (+ (first col) (second col))) (dec cnt)\r\n             )\r\n      )\r\n    )","user":"58a0e9bfe4b02bd94d917ea1"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0\n         curr 1\n         result []\n         counting 0]\n    (if (= counting n) \n      result\n      (recur curr (+ curr prev) (conj result curr) (inc counting)))))","user":"5dbe63bde4b09f47823971c7"},{"problem":26,"code":"(fn fib ([n] (reverse (fib (- n 2) '(1 1)))) ([n acc] (if (= n 0) acc (recur (- n 1) (conj acc (+ (first acc) (second acc)))))))","user":"5a29d658e4b09cafd31c7f29"},{"problem":26,"code":"(fn [n]\n  (reverse (reduce (fn [coll not-needed]\n          (cons (+ (first coll) (second coll)) coll))\n          '(1 1)\n          (range (- n 2)))))","user":"5ff61113e4b06df49cee1492"},{"problem":26,"code":"#(take % (\n      (fn rfib [a b] \n         (cons a (lazy-seq (rfib b (+ a b)))))\n      1 1)\n    )","user":"5564c113e4b0c656e3ff180d"},{"problem":26,"code":"#(take %1 (map second (iterate (fn([[x y]] [y (+ x y)])) [0 1])))","user":"55d50a38e4b0e31453f64a80"},{"code":"(fn [n] (into [] (take n ((fn fib-nums [n nn] (lazy-seq (cons n (fib-nums nn (+ n nn))))) 1 1))))","problem":26,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [n]\n  (loop [fib [1 1] i 2]\n    (if (= i n) fib\n      (recur (conj fib (+ (peek fib)\n                          (nth fib (- i 2))))\n             (inc i)))))","problem":26,"user":"4ec59ce4535d6d7199dd36ab"},{"code":"#(map first\n  (take %\n    (iterate (fn [[p pp]] [(+ p pp) p]) [1 0])))","problem":26,"user":"4f03688d535dcb61093f6aac"},{"problem":26,"code":"(fn [x] (seq ((fn [_prev _cur _result _goal] (if (= 0 _goal) _result (recur _cur (+ _prev _cur) (conj _result (+ _prev _cur)) (- _goal 1)))) 0 1 [1] (- x 1))))","user":"59cf6fbce4b0ef0a1e9b5b6c"},{"problem":26,"code":"(fn fib-seq [x]\n  (cond\n   (= x 1)\n    '(1)\n   (= x 2)\n   \t'(1 1)\n   (> x 2)\n   \t(loop [counter 2, limit x, fib [1 1]]\n      (if (= counter limit)\n        fib\n        (recur (inc counter) limit (conj fib (+ (nth fib (- counter 1)) (nth fib (- counter 2)) )) )))\n   :else\n   \t'() ))","user":"57040195e4b08d47c9778202"},{"problem":26,"code":"#(loop [x [1 1] n %]\n   (if (>= (count x) n)\n     (take n x)\n     (recur (conj x (+ (last x) (second (reverse x)))) n)))","user":"549e5e52e4b0f3d1d8e70f9e"},{"code":"#(take % (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"513a37e0e4b067e25a345ec7"},{"code":";; not mine but I have spent too much time playing with this \n(fn fib [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"528e7740e4b0239c8a67aee0"},{"problem":26,"code":"#(take % \n  (map first\n   (iterate\n    (fn [[a b]] [b (+ a b)])\n     [1 1])))","user":"568b781be4b0dcc4269f40a5"},{"problem":26,"code":"(fn [x]\n    (loop [res [1 1]]\n           (if (>= (count res) x)\n             res\n             (recur (conj res (+ (inc (last res)) (dec (last (butlast res)))))))))","user":"5e1cb653e4b0dc959400853b"},{"problem":26,"code":"#(loop [l '(1 1) a 1 b 1 n %] (if (= n (count l)) l (recur (concat l (take 1 (repeat(+ a b)))) b (+ a b) n)))","user":"545da759e4b01be26fd74672"},{"code":"(fn [n]\n  (letfn [(fib [x]\n              (cond \n                (= x 0) 1\n                (= x 1) 1\n                :else\n                (+ (fib (- x 1)) (fib (- x 2)))))\n          (gen-fib [rt c]\n            (if (= c n)\n                 rt\n                 (recur (conj rt (fib c)) (+ c 1))))]\n   (gen-fib '[] 0)))","problem":26,"user":"4ef992c8535dced4c769f268"},{"problem":26,"code":"(fn [i] (take i ((fn fibs [a b]\n                   (cons a (lazy-seq (fibs b (+ a b)))))\n                 1 1)\n              )\n  )","user":"5488872ee4b0e286459a11d3"},{"code":"(fn [y] (reverse ((fn fib [x] (if (= x 2) '(1 1)  (conj (fib (- x 1)) (+ (last (reverse(fib (- x 1)))) (last (butlast (reverse (fib (- x 1))))) ) )) ) y)))","problem":26,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":26,"code":"(fn [x]\n  (map (fn [n]\n     (int (quot \n    (- \n    (Math/pow (+ 1 (Math/sqrt 5)) n)\n    (Math/pow (- 1 (Math/sqrt 5)) n))\n    (* (Math/pow 2 n) (Math/sqrt 5))))) (range 1 (inc x))))","user":"52a9c2efe4b0c58976d9ac50"},{"problem":26,"code":"(fn [n*]\n  (loop [first-n [1 1] n (dec (dec n*))]\n    (if (= n 0)\n      first-n\n      (recur (conj first-n (+ (last first-n) (second (reverse first-n)))) (dec n)))))","user":"609282f6e4b00e9e6653c3da"},{"problem":26,"code":"#(map second (take %1 (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"587f8393e4b0f1effa3b75f2"},{"problem":26,"code":"(fn [n]\n  (loop [accum '(1 1) i 3]\n    (if (> i n)\n      accum\n      (recur (concat accum (list (apply + (take-last 2 accum)))) (inc i)))\n  )\n)","user":"56b506d5e4b0982f16b37e2d"},{"code":"(fn [x]\n  (take x\n    (\n      (fn fib [a b]\n        (cons a\n          (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"4fc559eae4b0ee37620e17f3"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1]\n         prev-prev 1\n         prev 1\n         iterations-left (- n 2)]\n    (if-not (zero? iterations-left)\n      (let [next-fib (+' prev prev-prev)]\n        (recur (conj result next-fib)\n               prev\n               next-fib\n               (dec iterations-left)))\n      (take n result))))","user":"55e274b4e4b050e68259b436"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib-iter\n           [a b]\n           (cons a\n                 (lazy-seq\n                  (fib-iter b (+ a b)))))]\n    (take x (fib-iter 1 1))))","user":"5a95c639e4b0d174b936c75e"},{"problem":26,"code":"#(take % (map\n          last\n          (iterate\n           (fn [a] [(last a) (+ (first a) (last a))])\n           [0 1])))","user":"4df9d3b0535d04ed9115e77b"},{"code":"(fn [n]\n  (map (fn fib [n]\n    (cond\n     (= 0 n) 0\n     (= 1 n) 1\n     :else (+ (fib (- n 1)) (fib (- n 2)))\n     )\n    ) (range 1 (+ n 1))))","problem":26,"user":"4e720985535d5021c1a89655"},{"problem":26,"code":"(fn fib [n] \n\t(take n \n    \t((fn fibo [a b]\n               (cons a (lazy-seq (fibo b (+ a b))))) 1 1)))","user":"5d48d5d1e4b0776584bd6f12"},{"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [1 1]) (map first) (take %))","problem":26,"user":"52c60945e4b0c2d177d62108"},{"problem":26,"code":"(fn fib-seq [n]\n   \n    (map (fn fib [x] (cond\n   \t\t\t\t\t\t(> 2 x) 1\n   \t\t\t\t\t\t:else (+ (fib (- x 1)) (fib (- x 2)))        \n                      )\n           )\n         (range n)\n         )\n  )","user":"5640c967e4b08d4f616f5ee9"},{"code":"(fn fib\n  ([v n]\n    (if (> n 2)\n      (fib (conj v (+ (peek v) (peek (pop v)))) (dec n))\n      v))\n  ([n]\n    (fib [1 1] n)))","problem":26,"user":"4e89f9e5535d3e98b8023289"},{"problem":26,"code":"(fn fib [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (let [lastfib (fib (dec n))]\n                (conj lastfib (+ (last lastfib) (last (drop-last lastfib)))))))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":26,"code":"#(loop [n (- % 2) result [1 1]]\n     (if (= n 0)\n      result\n      (recur (dec n) (conj result (+ (first (reverse result)) (first (drop 1 (reverse result))))))))","user":"5edb07dde4b0c7845d86b0ed"},{"problem":26,"code":"(fn [n]\n  (loop [c 1\n         p 0\n         n n\n         f []]\n    (if (= n 0)\n      f\n      (recur (+ c p) c (dec n) (into f [c])))))","user":"5801eed1e4b0a837a8b30c63"},{"problem":26,"code":"#(take % ((fn[](map first (iterate (fn[[a b]] [b (+ a b)]) [1 1])))))","user":"60195030e4b0bf4ca6b10920"},{"problem":26,"code":"; Probably better done with recursion but idk.\n(fn gen-fib \n  [n] \n  (reduce (fn \n            [acc val] \n            (conj acc (cond (= val 0) 1 (= val 1) 1 (> val 1)\n                            (+ (get acc (- val 1))                                                                            \n                               (get acc (- val 2)))))) \n          [] \n          (range n)))","user":"5b2d1c1de4b025bcb146f2c0"},{"code":"(fn [n]\n  (for [x (range n)]\n    ((fn fibonacci [n]\n       (if (<= n 1)\n           1\n           (+ (fibonacci (- n 1))\n              (fibonacci (- n 2))))) x)))","problem":26,"user":"506a1985e4b01dc6af13f83e"},{"problem":26,"code":"(fn\n  [n]\n  (loop [pre 1 current 1 counter 2 r '(1 1)]\n    (if (< counter n)\n      (recur current (+ pre current) (inc counter) (conj r (+ pre current)))\n      (reverse r))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":26,"code":"(fn [n] (loop [x [1 1]] (if (= (count x) n) x (recur (conj x (apply + (take 2 (reverse x))))))))","user":"5a5be4ebe4b0512ff01cd912"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 acc 1 acc2 0 items [1]]\n  (if (= n i) \n    items\n    (recur (inc i) (+ acc acc2) acc (conj items (+ acc acc2 ))))))","user":"583166c1e4b051871117c025"},{"code":"(fn [n]\n  (loop [result [1 1] i 2]\n    (if (= n i)\n      (seq result)\n      (recur (conj result (+ (last result) (last (butlast result))\n                             )\n                   )\n             (inc i)) \n      )\n   ))","problem":26,"user":"51da7e49e4b02ceefd947768"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) `(1 1)))))","user":"573c8377e4b0cd1946bd10c7"},{"code":"(fn [x] (loop [fib x result '()] \n          (if (= fib 0) (reverse result) (recur (dec fib)\n                                      (if (< (count result) 2) \n                                        (conj result 1) \n                                        (conj result (+ (first result) (second result) ) ) ) ) ) ) )","problem":26,"user":"50fec710e4b0219f3bc8bd97"},{"problem":26,"code":"(fn [x]\n  ((fn foo [a b x]\n      (if (= x 0) nil\n        (conj (foo b (+ a b) (dec x)) a))) 1 1 x))","user":"5760715de4b08062f99a4e96"},{"code":"(fn  [n]\n  (loop [coll [1 1]]\n    (if (< (count coll) n)\n      (recur (conj coll ( + (first (reverse coll ))(second (reverse coll )))))\n      (seq coll))))","problem":26,"user":"52dfe1d2e4b09f7907dd1406"},{"problem":26,"code":"(fn [len]\n  (loop [fib [1 1]]\n    (if (< (count fib) len)\n      (recur (conj fib (reduce + (take 2 (reverse fib)))))\n      fib)))","user":"5d28c6dce4b092dab7f59c85"},{"code":"#(take %\n  (map first\n    (iterate\n      (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4fba0877e4b081705acca2dd"},{"code":"#(loop \n  [n (- % 2) result [1 1]] \n    (if (zero? n) \n      result \n      (recur \n        (dec n)\n        (conj result \n          (+ (nth result (- (count result) 2)) (last result))))))","problem":26,"user":"50992197e4b0cae2931060ae"},{"problem":26,"code":"#(take\n  %\n  (letfn [(fib [x y]\n               (lazy-seq (cons x (fib y (+ x y)))))]\n    (fib 1 1)))","user":"5479c58de4b0c51c1f4d72c7"},{"problem":26,"code":"(fn f \n   ([n l]    (if (< n 2) \n               l \n               (f (dec n) (concat l (list (reduce + 0 (take-last 2 l)))))\n              ))\n   ([n] (f (dec n) (list 1 1)))\n  )","user":"54494159e4b032a45b8693d1"},{"problem":26,"code":"(fn [times]\n(let [list [1 1] length (count list)]\n(loop [result list]\n  (if (= times (count result))\n    result\n    (recur (conj result (reduce + (take-last 2 result))))\n  ))\n))","user":"55d79b87e4b0e31453f64aa8"},{"problem":26,"code":"(fn fib\n  ([n]\n   (case n\n     0 '()\n     1 '(1)\n     2 '(1 1)\n     (fib '(1 1) n)))\n  ([r n]\n   (if (< n 3)\n     r\n     (let [nxt (->> r reverse (take 2) (apply +))]\n       (fib (concat r (list nxt)) (dec n))))))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":26,"code":";; bad complexity\n(fn fib [n]\n  (case n\n    0 '()\n    (let [fs (conj (fib (dec n)) 0 1)]\n      (map + fs (rest fs)))))\n\n;; good complexity\n;; #(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"54d1cf2ee4b0e8a36923e5eb"},{"code":"#(rest (map first (take (+ % 1) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))\n\n; Pourquoi (fn [[a b]] ([b (+ a b)])) ne fonctionne pas ?\n; Pourquoi je ne peux pas / comment écrire (#([%2 (+ %1 %2)]) [0 1]) à la place de fn","problem":26,"user":"513d09cbe4b0b86ece9f322e"},{"problem":26,"code":"(fn fib [myList countdown]\n  (if (= countdown 2)\n    (reverse myList)\n    (fib \n     (cons (+ (first myList) (second myList)) myList)\n     (dec countdown) ))) '(1 1)","user":"53df9f47e4b0d874e779ae42"},{"problem":26,"code":"#(take % (flatten (iterate (fn [[a b]] [(+ a b) (+ a (* 2 b))]) [1 1])))","user":"549def9ce4b0f3d1d8e70f99"},{"problem":26,"code":"(fn fib [n]\n   (cond (= n 1) [1]\n         (= n 2) [1 1]\n         :else\n         (loop [i 2\n                result [1 1]]\n           (if (= i n)\n             result\n             (recur (+ i 1) (conj result (+ (result (- i 1)) (result (- i 2)))))))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"problem":26,"code":"#(take % (map first (iterate (fn [[prev curr]] [curr (+ prev curr)]) [1 1])))","user":"5e155173e4b0a047bd49f6fd"},{"problem":26,"code":"(fn [x] (loop [x x res [1 1]]\n    (if (= (count res) x)\n      res\n      (recur x (conj res (+ (second (reverse res)) (last res)))))))","user":"59d1e9cfe4b0ef0a1e9b5b95"},{"problem":26,"code":"(fn fib [x]\n  (case x\n    \t1 '(1)\n    \t2 '(1 1)\n    \t(let [prev-fib (fib (dec x))]\n          (concat prev-fib\n                  (list (+ (nth prev-fib (- x 2))\n\t                       (nth prev-fib (- x 3))))))))","user":"5d1231dde4b02c15ef021995"},{"code":"(fn [n]\n  (loop [a 1 b 1 l [a b]]\n    (if (< (count l) n)\n      (recur b (+ a b) (conj l (+ a b)))\n      l)))","problem":26,"user":"50b1d166e4b03ea880433554"},{"code":"#( let [fibs \n(fn [n fib] \n  (if (= n (count fib))\n    fib\n    (recur n (cons (+ (first fib) (nth fib 1)) fib ))))\n]\n(reverse (fibs % [1 1]))\n)","problem":26,"user":"4de8a7d7535d08e6dec9fdfe"},{"problem":26,"code":"(\n   fn [max]\n   (loop [a 1, b 1, acc [1]]\n     (if (>= (count acc) max)\n       acc\n       (recur b (+ a b) (conj acc b)))\n     )\n   )","user":"5eccbce6e4b016b56eae058e"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn fib* [a b]\n           (cons \n             a \n             (lazy-seq (fib* b (+ a b))))\n           )\n          1 1)\n  )\n)","user":"55ddc5cbe4b050e68259b3d0"},{"code":"(fn [n] (map (fn fib [i] \r\n         (if (> i 1) \r\n          (+ (fib (dec i)) (fib (dec (dec i))))\r\n          1))\r\n       (take n (range))))","problem":26,"user":"4ff9a200e4b0678c553fc3ab"},{"problem":26,"code":"#(take % ((fn fib\n  ([] \n    (fib 1 1))\n  ([a b]\n    (lazy-seq (cons a (fib b (+ a b))))))))","user":"5d0e311de4b0cc9c91588251"},{"code":"(fn fib [n]\n  (if (= 1 n) '(1)\n  (if (= 2 n) '(1 1)\n  (let [s (reverse (fib (- n 1)))\n        a (first s)\n        d (nth s 1)]\n    (reverse (conj s (+ a d)))))))","problem":26,"user":"4edffe54535d10e5ff6f5347"},{"problem":26,"code":"(fn [x]\n    (loop [i x, acc [1], next 0]\n      (if (zero? (dec i))\n        acc\n        (recur\n         (dec i)\n         (conj acc (+ (last acc) next))\n         (last acc)\n         ))))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":26,"code":"(fn [n] (reduce (fn [acc p] (conj acc (+ (nth acc (- p 1)) (nth acc (- p 2))))) [1 1] (range 2 n)))","user":"5cfd5a93e4b0cc9c91588168"},{"problem":26,"code":"(fn [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else\n   (loop [fibs [1 1]]\n     (let [len (count fibs)]\n       (if (= n len)\n         fibs\n         (recur (conj fibs (+ (last fibs) (nth fibs (- len 2))))))))))","user":"53dd37aee4b0d874e779ae28"},{"problem":26,"code":"(fn fib [x]\n  (loop [x x, acc 1, f1 1, f 1, res '()]\n    (if (<= acc x)\n      (recur x, (inc acc), f, (+ f1 f), (conj res f1))\n      (reverse res))))","user":"593d6793e4b069cdc2982ba6"},{"problem":26,"code":"(fn [final_x]\n  (loop [so-far [1 1 2] curr 2 one-before 1]\n    (let [new-curr (+ one-before curr)]\n      (if (< (count so-far) final_x)\n        (recur (conj so-far new-curr) new-curr curr)\n        so-far\n        )\n      )\n    )\n  )","user":"52a803cee4b0c58976d9ac26"},{"problem":26,"code":"#(take % (map last (iterate (fn [[x, y]] [y, (+ x y)]) [0 1])))","user":"57678ca9e4b0a07e8fc180c0"},{"problem":26,"code":"(fn [n]\n  (if (= 1 n)\n    '(1)\n    (if (= 2 n)\n      '(1 1)\n      (loop [results '(1 1)]\n        (if (= n (count results))\n          (reverse results)\n          (recur (conj results (+ (first results) (second results)))))) \n      )))","user":"56f70fb2e4b08e7d20b9682b"},{"problem":26,"code":"(fn [x]\n     (reverse\n       ((fn [result ct]\n          (if (= x ct)\n            result\n            (recur (conj result\n                     (+ (first result) (second result)))\n              (inc ct))))\n         '(1 1) 2)))","user":"549ac3cde4b0f3d1d8e70f71"},{"code":"#(reverse\n((fn fib [n]\n  (if (< n 3)\n    '(1 1)\n    (let [s (fib (- n 1))]\n      (cons (+ (first s) (second s)) s))))\n%))","problem":26,"user":"503e6047e4b06c4e0e1fa266"},{"code":"#(rest (map (fn fib [n]\n             (if (or (= n 1) (= n 2) (= n 0))\n               1\n               (+ (fib (- n 1)) (fib (- n 2))))) (range (inc %))))","problem":26,"user":"50ca2faee4b0a409464667dc"},{"problem":26,"code":"(fn [len] (loop [fib []\n                             remaining len]\n                        (cond\n                          (= (count fib) len) fib\n                          (or (empty? fib)\n                              (= (count fib) 1))\n                          (recur (conj fib 1) (- remaining 1))\n                          :else (recur (conj fib (+ (last fib) (second (reverse fib))))\n                                       (- remaining 1)))))","user":"5fa7c574e4b0fa27300f3ddf"},{"problem":26,"code":"#(take %1 (map second (iterate (fn [[a b]] (list b (+ a b))) (list 0 1))))","user":"556238bce4b0c656e3ff17d3"},{"code":"(fn fib [n]\n  (cond (= n 1) [1]\n\t\t(= n 2) (conj (fib 1) 1)\n\t\t:default (let [previous (fib (dec n))]\n\t\t\t(conj previous (reduce + (take-last 2 previous))))))","problem":26,"user":"4edd4b77535d10e5ff6f5328"},{"problem":26,"code":"(fn p26\n  ([n] (if (< n 2) 1 (p26 n '(1 1))))\n  ([n l]\n   (if (= n 2)\n     (reverse l)\n     (recur (dec n) (cons (+ (first l) (second l)) l)))))","user":"5f968f4ee4b0715f5002d7d2"},{"problem":26,"code":"(fn [coll n] \n  (if (zero? (- n 2))\n    (reverse coll)\n    (let [fs (take 2 coll)]\n      (recur (conj coll (apply + fs)) (dec n))))) '(1 1)","user":"56fa3f7ae4b07572ad1a88bf"},{"problem":26,"code":"(fn [n]\n  (let [fib [1 1]]\n    (if (<= n 2)\n      (subvec fib 0 n)\n      (loop [acc fib]\n        (let [cnt (count acc)]\n          (if (= cnt n)\n            acc\n            (recur (conj acc (+ (last acc) (nth acc (- cnt 2)))))))))))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn fnfib [n]\n  (letfn [(fib [x]\n               (if (or (= x 0)\n                       (= x 1))\n                 1\n                 (+ (fib (- x 1))\n                    (fib (- x 2)))))]\n    (map fib (range 0 n))))","problem":26,"user":"51430fd9e4b0c172af7558cf"},{"problem":26,"code":"(fn [size]\n  (take size (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1]))))","user":"5830377ee4b051871117c004"},{"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51508efce4b0c51f0585bbb4"},{"problem":26,"code":"(fn [myfib]\n   (loop [fib myfib, thelast 1, last-again 0, theseq '(1)]\n     (if (> fib 1)\n       (recur (- fib 1) (+ thelast last-again) thelast (conj theseq (+ thelast last-again)))\n       (take myfib (reverse theseq))\n       )\n     )\n   )","user":"53f3b216e4b0742d9025b0f8"},{"code":"#(map (fn fib[n]\n   \t(if (< n 3) \n        1\n  \t\t(+ (fib (- n 1)) \n           (fib (- n 2))\n        )\n    )\n  ) (range 1 (inc %)) )","problem":26,"user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [n]\r\n\t\t (loop [n (- n 2)\r\n\t\t\t\t  a 1\r\n\t\t\t\t  b 1\r\n\t\t\t\t  res [1 1]]\r\n\t\t\t(if (> n 0)\r\n\t\t\t  (recur (dec n) b (+ a b) (conj res (+ a b)))\r\n\t\t\t  res)))","problem":26,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":26,"code":"(fn [n] (drop 1 (reverse (reduce (fn [s _] (conj s (apply + (take 2 s))))\n                                 '(1 0)\n                                 (range (dec n))))))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":26,"code":"(fn fib-seq\n  [n]\n  (cond \n     (= n 1) '(1)\n     (= n 2) '(1 1)\n    :else ( let [col (fib-seq (dec n)) rev-col (reverse col)]\n            (concat col (list (+ (first rev-col) (first (rest rev-col))))))\n  )\n  \n\n)","user":"547b4ec6e4b0c51c1f4d72d5"},{"code":"#(loop [plast 0 last 1 index % resseq '(1)]\n  (let [newsum (+ plast last)]\n    (if (= index 1) resseq\n        (recur last newsum (dec index) (concat resseq (list newsum))))))","problem":26,"user":"50f07f6ae4b0bdaecbb47dc4"},{"problem":26,"code":"#(map (fn fib [n]\n        (if (or (= n 0) (= n 1))\n          1\n          (+ (fib (dec n)) (fib (- n 2)))))\n      (range %))","user":"5b4bfd04e4b02d533a91bca2"},{"problem":26,"code":"(fn [x] (last (take (dec x) (iterate #(conj %1 (+ (peek %1) (last (butlast %1)))) [1 1]))))","user":"54a6baaee4b09f271ff37c8a"},{"problem":26,"code":"(fn [n]\n  (cond\n    (< n 1) '()\n    (= n 1) '(1)\n    :else (reverse (loop [idx 2\n                 res '(1 1)]\n            (if (= idx n)\n              res\n              (let [[a b] res]\n                (recur (inc idx) (conj res (+ a b)))))))))","user":"5e976fa8e4b0157ca96647cf"},{"code":"(fn [n] (map\n  (fn fib [x]\n    (if (< x 2) \n      1 \n      (+ \n          (fib (- x 1)) \n          (fib (- x 2))\n       )\n     )\n    )\n  (range n)\n))","problem":26,"user":"522454f4e4b01819a2de42d3"},{"problem":26,"code":"#(loop [n % a 0 b 1 acc '[]]\n   (if (zero? n)\n     acc\n     (recur\n      (dec n)\n      b\n      (+ a b)\n      (conj acc b))))","user":"5f665d45e4b02876ed9fd02f"},{"problem":26,"code":"#(loop [c 0 xs []] (if (= % c) xs (recur (inc c) (conj xs (int (+ (get xs (- c 2) 0.5) (get xs (- c 1) 0.5)))))))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [n] \n  (loop [n n result [1 1]]\n    (if (= 2 n)\n        result\n        (recur\n          (dec n)\n          (conj result\n            (apply + (take 2 (reverse result))))))))","problem":26,"user":"4f017b4e535dcb61093f6a37"},{"problem":26,"code":"(fn [n]\n  (map (fn f [i]\n         (case i\n           0 1\n           1 1\n           (+ (f (- i 1)) (f (- i 2)))))\n       (range n)))","user":"56ee905be4b04a395b9a044f"},{"problem":26,"code":"#(take % ((fn fib\n  ([m n] (cons m (lazy-seq (fib n (+ m n)))))) 1 1))","user":"54ae331ce4b09f271ff37cee"},{"problem":26,"code":"(fn [n]\n (->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take n)\n )\n)","user":"5fe876ade4b05ac5b16ea195"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 i 0 fs []]\n    (if (= i n)\n      \tfs\n        (recur b (+ a b) (inc i) (conj fs a)))))","user":"5572fdd7e4b0aa18f790f3f1"},{"problem":26,"code":"(fn [y] (map (fn fib [x]\n     (if (< x 2)\n       1\n       (+ (fib (- x 1)) (fib (- x 2)) )))  (range y)))","user":"581a5fdbe4b0e114eb51a002"},{"problem":26,"code":"#(reverse \n\t(loop [x 2 a '(1 1)]\n\t\t(if (= x %)\n\t\t\ta\n\t\t\t(recur \n\t\t\t\t(inc x)\n\t\t\t\t(conj \n\t\t\t\t\ta\n\t\t\t\t\t(+ \n\t\t\t\t\t\t(first a)\n\t\t\t\t\t\t(second a)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","user":"5af9b2cee4b0cc2b61a3bce2"},{"code":"(fn\n  [n]\n  (loop [a 0 b 1 v [b]]\n    (if (= (count v) n)\n      v\n      (recur b (+ a b) (conj v (+ a b))))))","problem":26,"user":"525fffb8e4b03e8d9a4a702b"},{"problem":26,"code":"(fn [x] \n  (loop [current 2 fib [1 1]]\n    (if (= current x)\n      fib\n    (recur (inc current) (conj fib (+ (last fib) (nth fib (dec (dec (count fib)))) ))\n    ))\n  )\n)","user":"607e09bee4b03d835a6eaed7"},{"problem":26,"code":"(fn [n]\n  (loop [x 0 y 1 c 1 s [1]]\n    (if (= c n)\n      s\n    (recur y (+ x y) (inc c) (conj s (+ x y))))))","user":"551b8e2ae4b07993ea3788d3"},{"code":"(fn [amount]\n  (loop [init '()\n         cur 1\n         nxt 1\n         step 0]\n         (if (= step amount)\n               (reverse init)\n               (recur (cons cur init) nxt (+ cur nxt) (inc step)))))","problem":26,"user":"50618c62e4b0a30dc9a35d33"},{"problem":26,"code":"(fn [n] (loop [counter (- n 2) result [1 1] i 1 prev-i 1]\n          (if (= counter 0) result (recur (dec counter) (conj result (+ i prev-i)) (+ i prev-i) i) ) ))","user":"55647a31e4b0c656e3ff1808"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] (list y (+ x y))) [1 1])))","user":"5e85fa2ce4b09a7a73c8bbd9"},{"problem":26,"code":"(fn fib [a]\n  (loop [arr []\n         i 0]\n    (if (= i a)\n      arr\n      (if (< i 2)\n        (recur (conj arr 1) (inc i))\n        (recur (conj arr (+ (last arr) (last (butlast arr)))) (inc i))))))","user":"5bf0aefde4b0a6d31fed215a"},{"code":"#(take %\n  ((fn fib [a b]\n    (cons a (lazy-seq (fib b (+ a b)))))\n      1 1))","problem":26,"user":"50812debe4b01a93d3f38e4c"},{"problem":26,"code":"#(take %1 (reduce \n                      (fn [s _]\n                         (let [x (peek s)\n                               y (peek (pop s))]\n                           (conj s (+' x y)))) [1 1] (range 100)))","user":"56fde58ae4b08d47c97781aa"},{"problem":26,"code":"(fn fib\n    ([rem-count] (fib (- rem-count 2) [1 1]))\n    ([rem-count generated-numbers]\n        (if (= rem-count 0)\n            generated-numbers\n            (fib\n                (- rem-count 1)\n                (conj\n                    generated-numbers\n                    (reduce + (take-last 2 generated-numbers)))))))","user":"59aeff12e4b0e1f4e384c8af"},{"problem":26,"code":"#(->>(loop [x '(1 0) y %]\n          (if (zero? y) x\n              (recur (conj x (+ (first x) (second x))) (dec y))))\n            (reverse)\n            (rest)\n            (take %))","user":"579ea15ee4b05b1deef9ae2a"},{"problem":26,"code":"#(loop [x [1 1] i %] (if (> i 2) (recur (conj x (+ (last x) (last (butlast x)))) (dec i)) x))","user":"52541fe6e4b0541d1855b964"},{"problem":26,"code":"(fn [x]\n  (take x '(1 1 2 3 5 8 13 21)))","user":"56193c6ee4b053970a773af2"},{"problem":26,"code":"(fn \n    [n]\n    (loop [n n cnt 2 fibb '(1 1)]\n      (if (= n cnt)\n        fibb\n        (recur\n          n\n          (inc cnt)\n          (concat fibb \n            (list (\n              + (nth fibb (- (count fibb) 1) ) (nth fibb (- (count fibb) 2))))\n          )\n        )\n      )\n    )\n  )","user":"5c9419fae4b048ec896c5a2b"},{"problem":26,"code":"(fn [n] (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1] ))))","user":"55ed71dae4b0121d4835fdd9"},{"code":"(fn f\n  ([c] (f 1 1 c))\n  ([a b c]\n    (if (> c 1)\n        (lazy-seq (cons a (f b (+ a b) (- c 1))))\n        (list a))))","problem":26,"user":"4e5a66d3535d8a8b8723a2ad"},{"problem":26,"code":"(fn [n] (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1]) (take n) (map first)))","user":"5f0e8312e4b0f30dddfb5d5b"},{"problem":26,"code":"#(reverse ((fn [max]\n                   (loop [curr 2 lst '(1 1)]\n                     (if\n                         (= curr max)\n                       lst\n                       (recur (inc curr) (cons (+ (first lst) (second lst)) lst))))) %))","user":"55527251e4b0deb715856df3"},{"code":"(fn [n]\n  (loop [curr-n (dec n) a 0 b 1 rslt '(1)]\n    (if (= curr-n 0)\n      (reverse rslt)\n      (recur (dec curr-n) b (+ a b) (cons (+ a b) rslt)))))","problem":26,"user":"526f9715e4b03e8d9a4a7372"},{"problem":26,"code":"(fn [n]\n  (loop [xs []\n         x 1\n         y 1\n         n' n]\n    (if (= n' 0)\n      xs\n      (recur (conj xs x) y (+ x y) (dec n')))))","user":"5f37da09e4b0574c87022c5e"},{"code":"(fn [n]\n  (loop [fiblist [1], i 0, inext 1]\n    (if (= (count fiblist) n)\n      (seq fiblist)\n      (recur (conj fiblist (+ i inext)) (+ 0 inext) (+ i inext)))))","problem":26,"user":"4ec5b713535d6d7199dd36b2"},{"code":"(fn [n]\n  (loop [x 1 res [1]]\n    (if (= x n) res\n      (recur (inc x) (conj res (if (= (count res) 1) 1\n                                 (+ (last res) (last (butlast res)))))))))","problem":26,"user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn fib [n]\n  (map second \n       (take n (iterate (fn [acc] \n                          [(second acc) (+ (first acc) (second acc))]) \n                        [0 1]))))","problem":26,"user":"508e26c2e4b0f17d83ea26ca"},{"code":"#(take %\n       ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n        1 1))","problem":26,"user":"52d885afe4b09f7907dd1398"},{"problem":26,"code":"#(cond \n  (= 0 %) [0]\n  (= 1 %) [1]\n  :else (loop [n (dec %) xs [0 1]]\n          (if (= n 0)\n            (rest xs)\n            (recur (dec n) (conj xs (+ (last xs) (last (butlast xs)))))\n            )))","user":"550609b3e4b021ccfedb9695"},{"problem":26,"code":"(fn\n  [n]\n  (loop [x 1, y 1, cnt n, ret []]\n    (if (zero? cnt)\n      ret\n      (recur y (+ x y) (dec cnt) (conj ret x)))))","user":"56e22366e4b03a7c14b85a30"},{"code":"#(take % (map first \r\n              (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"5302b580e4b0d8b024fd3732"},{"problem":26,"code":"(let [next-fib #(+ (first (reverse %)) (second (reverse %)))]\n  (fn [n] (reduce (fn [ex ign] (conj ex (next-fib ex))) [1 1] (range (- n 2))))\n  )","user":"5f5b624de4b05ea7b9adc42f"},{"code":"(fn [x] (map second (take x (iterate (fn [x] [ (x 1) (+ (x 0) (x 1))]) [0 1]))))","problem":26,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn [n]\n  (->>\n    (iterate\n        (fn [[p1 p2]] [p2 (+ p1 p2)])\n        [1 1])\n    (map first)\n    (take n)))","problem":26,"user":"4ecab3b7535d6d7199dd3709"},{"problem":26,"code":"#(take % (map first (iterate (fn [[f r]] [r (+ f r)]) [1 1])))","user":"53e92f82e4b036ad0777e49d"},{"problem":26,"code":"(fn\n  [n]\n  (case n\n   \t\t0 '()\n    \t1 '(1)\n    \t2 '(1 1)\n    \t  ((fn fuckonacci\n            [fiblist fibcount]\n            (if\t(= fibcount n)\n              fiblist\n              (fuckonacci (concat fiblist [(+ (nth fiblist (- fibcount 2)) (nth fiblist (dec fibcount)))]) (inc fibcount))\n            )\n          ) '(1 1) 2)\n   )\n\n)","user":"5a514e68e4b05d388ecb6be5"},{"problem":26,"code":"(fn fibo\n  ([x]\n   (take x (concat [1] (fibo 1 1)))\n   )\n  \n  ([x y]\n   (let [nxt (+ x y)]\n     (lazy-seq (cons y (fibo y nxt)))\n     )\n   )\n  )","user":"56de0db0e4b0ea9b8538f83a"},{"problem":26,"code":"(fn [n]\n  (cond\n    (< n 1) nil\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else\n      (loop [m 2 ans '(1 1)]\n        (if (= m n)\n           (reverse ans)\n           (recur (inc m) (conj ans (apply + (take 2 ans))))))))","user":"587abe0de4b01531a375eaef"},{"problem":26,"code":"(fn [x] \n  (loop \n    [s [1 1] \n     n 2] \n    (if (= n x) \n      (seq s) \n      (recur (conj s (+ (nth s (dec n)) (nth s (- n 2)))) (inc n)))))","user":"5ab9fe71e4b073f17744269d"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))) \n; we first recursively construct a lazy sequence of infinite number of \n; fibonacci numbers","user":"54d0f654e4b0e8a36923e5d6"},{"problem":26,"code":"#(reverse (loop [prev 0\n                 nxt 1\n                 end %\n                 accu ()]\n            (if (= end 0) accu\n              (recur nxt (+ prev nxt) (dec end) (cons nxt accu)))))","user":"5872935ce4b01531a375ea1d"},{"problem":26,"code":"#(loop\n  [result '(1 1)\n   number (- % 2)]\n  (if (<= number 0)\n    (reverse result)\n    (recur (conj result (+ (first result) (first (next result)))) (dec number))\n    )\n  )","user":"566639f4e4b0e91d5f5c566b"},{"code":"#(loop [x 2 result '(1 1)]\n    (if (= x %) (reverse result)\n      (recur (inc x) (conj result (+ (first result) (second result))))))","problem":26,"user":"536e5055e4b0fc7073fd6e6b"},{"code":"#(map (fn [n]\n        (loop [x 0, a 1, b 1]\n          (if (= x n)\n            a\n            (recur (inc x) b (+ a b)))))\n      (range %))","problem":26,"user":"4db1f7d223724b71670a9c07"},{"code":"(fn fib [n]\n  (if (= n 1) \n      '(1)\n      (if (= n 2)\n          '(1 1)\n          (concat (fib (- n 1)) \n                  [ (+ (nth (fib (- n 1)) (- n 2))\n                       (nth (fib (- n 2)) (- n 3))) ]))))","problem":26,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"#(take % ((fn fib[a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"529599dce4b02ebb4ef75027"},{"code":"(fn fib [n]\n  (if (< n 3)\n    (repeat n 1)\n    (let [lst (fib (- n 1))]\n      (concat lst (list (+ (last lst) (last (butlast lst))))))))","problem":26,"user":"4faa9593e4b081705acca1f9"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 s []]\n    (if (< i n)\n      (recur (inc i) (conj s (cond\n                               (= i 0) 1\n                               (= i 1) 1\n                               :else (+ (nth s (- i 1)) (nth s (- i 2))))))\n      (seq s))))","user":"57addbcce4b0b8559636fca3"},{"problem":26,"code":"(fn [n] (loop [n-to-add n\n                     [fst snd & remaining :as acc] '(1 1)]\n                (if (= n-to-add 2)\n                  (reverse acc)\n                  (recur (- n-to-add 1)\n                         (conj acc (+ fst snd))))))","user":"58a47197e4b01a0c0b2328f9"},{"problem":26,"code":"(fn [x]\n  (loop [i x acc [1] prev 0]\n    (let [y (last acc)]\n      (if (= 1 i)\n        acc\n        (recur (dec i) (conj acc (+ y prev)) y)))))","user":"567c2322e4b05957ce8c61af"},{"problem":26,"code":"(fn my-fibonacci\n  ([n] \n    (cond \n     (<= n 0) '()\n     (= n 1) '(1)\n     (= n 2) '(1 2)\n      :else (my-fibonacci n '(1 1))))\n   ([n sx]    \n     (if (< (count sx) n)        \n       (recur n (cons (+ (first sx) (second sx)) sx))\n       (reverse sx))))","user":"53b85932e4b047364c0444db"},{"problem":26,"code":"(fn fibo2\n  [index]\n  (loop [i 1\n         v [0 1]]\n    (if (> i index)\n      (reverse (into '() (subvec v 1 (dec (count v)))))\n      (let [moinsUn (get v i)\n            moinsDeux (get v (- i 1))\n            curr (+ moinsUn moinsDeux)\n            vect (conj v curr)]\n        (recur (inc i) vect)))))","user":"59d77634e4b0ef0a1e9b5c34"},{"problem":26,"code":"#(reduce \n  (fn [a b] (conj a (+' (last a) (last (butlast a)))))  \n  [1 1]                      \n  (range (- % 2)))","user":"562f45e6e4b0ab312c17ebc8"},{"code":"(fn [n] (loop [z 2 k (- n 2) x 1 y 1 v [1 1]] (if (> k 0) (recur (+ z y) (dec k) y z (conj v z)) v)))","problem":26,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":26,"code":"(fn [p]\n  (reverse ((fn r [acc n]\n    (if (= n p) acc\n    (if (< n 2) \n      (recur (conj acc 1) \n             (inc n))\n      (recur (conj acc \n                 (+ (first acc)\n                    (second acc)))\n             (inc n)))))\n  '() 0)))","user":"5a3e0e44e4b0447ef91cc5ad"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 x [1 1] acc []]\n   (if (<= i n)\n     (recur \n      (+ i 1) \n      [(last x) (reduce + 0 x)] (conj acc (first x))\n     )\n     acc\n   )\n  )\n)","user":"5bc8afb9e4b07a9b28b100c9"},{"problem":26,"code":"#(take % (map first (iterate (fn fibs [[m n]] [n (+ m n)]) [1 1])))","user":"54893618e4b0e286459a11e0"},{"problem":26,"code":"(fn [n]\n  (loop [result [1]]\n    (if (= n (count result))\n      (apply list result)\n      (recur (conj result (apply + (take-last 2 result)))))))","user":"60e2aca7e4b002d5a55d5f3b"},{"problem":26,"code":"(fn [x] \n  (loop [count (- x 1)\n         x1 0\n         x2 1\n         result [1]]\n    (if (> count 0)\n      (recur (dec count) x2 (+ x1 x2) (conj result (+ x1 x2)))\n      result)))","user":"5f6c331ae4b02876ed9fd054"},{"problem":26,"code":"#(loop [num 2\n        fib '(1 1)]\n   (if (= num %)\n     fib\n     (recur (inc num)\n            (flatten (cons fib [(+ (nth fib (- num 2)) (nth fib (dec num)))])))\n     )\n   )","user":"595a3b41e4b066ee0a44afb7"},{"code":"(fn [i]\n  (map (fn f [n] (if (< n 3) 1\n                   (+ (f (- n 1)) (f (- n 2)))\n                 )\n         )\n       (range 1 (+ i 1) )\n  )\n)","problem":26,"user":"4ea3f035535d7eef308072ca"},{"problem":26,"code":"#(loop [result [1 1] x 1 y 1] \n   (if (>= (count result) %)\n     result \n     (recur (conj result (+ x y))\n            y\n            (+ x y))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":26,"code":"#(take % ((fn step [a b] (lazy-seq (cons a (step b (+ a b)))))\n            1 1))","user":"57635e2de4b0994c1922fbbf"},{"code":"(fn [x] \n  (take x \n  ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"50046d7be4b0678c553fc451"},{"problem":26,"code":"(fn fib [n]\n  (if (= 1 n) [1]\n    (if (= 2 n) [1 1]\n      (let [prev (fib (- n 1))]\n        (conj prev \n              (+ (last prev) (-> prev drop-last last)))))))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn fibs [n]\n\t(take n\n\t\t((fn calcFib [x y]\n\t\t\t(cons x (lazy-seq (calcFib y(+ x y)))))\n\t\t\t1 1)\n\t\t)\n\t)","problem":26,"user":"537d4a69e4b06839e8705e8a"},{"code":"#(take % (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0N 1N]))))","problem":26,"user":"50bfb5fbe4b05ae8c1cbbd9a"},{"problem":26,"code":"#(for [x (range 1 (inc %))\r\n       :let [fibonacci (fn fib [x]\r\n                         (cond\r\n                           (= x 1) 1\r\n                           (= x 2) 1\r\n                          :else (+ (fib (- x 2)) (fib (- x 1)))))]]\r\n  (fibonacci x))","user":"5f9df1d8e4b0715f5002d832"},{"problem":26,"code":"(fn fibs [n] \n  (take n ((fn rfib [a b] \n   (cons a (lazy-seq (rfib b (+ a b)))))\n          1 1)))","user":"58800fd4e4b0f1effa3b7606"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] \n       (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5ec03772e4b00a66d4a95289"},{"problem":26,"code":"(fn [n] (nth (iterate #(conj % (+ (last %) (second (reverse %)))) [1 1]) (- n 2)))","user":"5722d621e4b0c5bde472c0d9"},{"code":"#(loop [i % acc [1 1]]\r\n    (if (<= i 2)\r\n      acc\r\n    (recur (dec i)(conj acc (+ (last acc) (nth acc (- (count acc) 2)))))))","problem":26,"user":"5006e494e4b0678c553fc492"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b )]) [1 1])))","user":"5604ae27e4b0c80df0ca2663"},{"code":"(fn [n] \n  (take n\n        ((fn fib [a b] \n          (cons a (lazy-seq (fib b (+ a b))))\n        ) 1 1)\n  )\n)","problem":26,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":26,"code":"#(reduce (fn [x y] (conj x (apply + (take-last 2 x)))) [1 1] (take (- % 2) (repeat 0)))","user":"5f6caa19e4b02876ed9fd056"},{"code":"(fn fibon [cnt]\n  (loop [a 1 b 1 cnt1 cnt s []]\n    (if (= cnt1 0) \n    s \n    (recur b (+ a b) (dec cnt1) (conj s a) ))))","problem":26,"user":"4eba93c7535dfed6da9c6d65"},{"code":"#(map (fn f [x] (if (< x 2) x (+ (f (dec x)) (f (- x 2))))) (map inc (range %)))","problem":26,"user":"53874820e4b06839e8705f1b"},{"code":"(fn fibo-seq [x] (take x ((fn fibo []\n(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))))","problem":26,"user":"4f048f67535dcb61093f6bd3"},{"problem":26,"code":"(fn [n] \n  (rest \n   ((fn [n c] \n      (if (< n 1) \n        c \n        (recur (dec n) \n               (reverse \n                (cons \n                 (+ (last c) (second (reverse c)))\n                 (reverse c))))))\n    (dec n)\n    [0 1])))","user":"56472ff8e4b0284900eef618"},{"code":"(fn my-fib\n  [n]\n  (letfn [(go [n]\n              (case n\n                0 1\n                1 1\n                (+ (go (dec n)) (go (- n 2)))))]\n    (for [i (range n)]\n      (go i))))","problem":26,"user":"52dc3bc8e4b09f7907dd13cb"},{"problem":26,"code":"(fn [n]\n  (let [rn (range 0 (- n 2))]\n    (reduce \n     \t(fn [acc _]\n          (let [c (apply + (take-last 2 acc))]\n        \t(conj acc c)))\n     \t[1 1]\n     \trn)))","user":"5c1ca3dbe4b0efcb0b05b23b"},{"code":"(fn [x]\n  (take x\n        (map first\n             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52c1566fe4b07a9af5792364"},{"problem":26,"code":"#(loop [one 1 two 1 x [] c %] (if (> c 0) (recur two (+ one two) (conj x one) (dec c)) x))","user":"58dbfb24e4b0a4d5acaab690"},{"code":"(fn [n]\n  (loop [fib-nums [1 1]]\n    (if (<= n (count fib-nums))\n      (subvec fib-nums 0 n)\n      (let [[n1 n2] (reverse fib-nums)]\n\t  \t(recur (conj fib-nums (+ n1 n2)))))))","problem":26,"user":"5398123ee4b0b51d73faaef3"},{"problem":26,"code":"(fn n-fibonacci [x] \n  (if (<= x 2) [1 1] \n    (let [fib (n-fibonacci (- x 1))\n          rfib (reverse fib)]\n      (concat fib [(+ (first rfib) (first (rest rfib)))]))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":26,"code":"#(take % \n       ((fn rfib [a b] \n         (lazy-seq \n          (cons a \n                (rfib b (+ a b))\n           )\n          )\n        ) 1 1)\n )","user":"57e59d2be4b0bfb2137f5ad9"},{"problem":26,"code":"(fn [x] (loop [lis [1] c 0 c1 1]\n          (if (> (count lis) (- x 1))\n            lis\n            (recur (concat lis (list (+ c1 c))) c1 (+ c1 c)))))","user":"53cdb2c4e4b00fb29b2212e5"},{"code":"(fn fib [a b n] \n  (if (> n 0) \n    (cons a (fib b (+ a b) (- n 1)))))\n1 1","problem":26,"user":"4ec7def0535d6d7199dd36e9"},{"code":"(letfn [(fib [x]\n  (case x\n   2 '(1 1)\n   (let [xs (fib (dec x))]\n     (conj xs (+ (first xs) (second xs))))))] (comp reverse fib))","problem":26,"user":"52437703e4b076204b44fabf"},{"problem":26,"code":"(fn [numbers]\n  (loop [x 1\n         result []]\n    (if (< x (+ numbers 1))\n      (recur (inc x) (conj result (if (or (= x 1) (= x 2)) 1 (reduce + (take-last 2 result)))))\n      result)))","user":"55635886e4b0c656e3ff17e9"},{"problem":26,"code":"(fn [x] (take x ((fn fu [z y] (lazy-seq (cons z (fu y (+ z y))))) 1 1)))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":26,"code":"(fn [n]\n  (if (<= n 1)\n    (list n)\n    (loop [start 2\n           end n\n           acc [0 1]]\n      (let [last-idx (dec (count acc))\n            second-to-last-idx (dec last-idx)\n            sum (+ (nth acc last-idx) (nth acc second-to-last-idx))]\n        (if (= start end)\n          (rest (conj acc sum))\n          (recur (inc start) end (conj acc sum)))))))","user":"58bc8cbee4b0888cdc949d1b"},{"problem":26,"code":"(fn [x] ( take x (map first (iterate (fn [[a b]] [b (+ a b)] ) [1 1]))))","user":"55c2367ee4b0e31453f64978"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n\n         n2 0\n         n1 1\n         result []]    \n    (if (= cnt 1)\n      (cons 1 result)\n      (recur (dec cnt) n1 (+ n1 n2) (conj result (+ n1 n2))))))","user":"53e3e353e4b036ad0777e406"},{"problem":26,"code":"(fn  [n]\n  (take n (map first (iterate (fn [[l r]]\n                                [r (+ l r)]) [1 1]))))","user":"52bc0dade4b07a9af57922f1"},{"code":"(fn fib [init-n]\n  (loop [l [1,1], n init-n]\n    (if (> n 2)\n      (recur (conj l (+ (last l) (second (reverse l)))) (- n 1))\n      l)))","problem":26,"user":"4e89ddf9535d3e98b8023284"},{"problem":26,"code":"(fn [x]\n  (loop [i x fib-nums []]\n    (if (< i 1)\n      fib-nums\n      (if (empty? fib-nums)\n        (recur (- i 2) [1 1])\n        (recur (dec i) (conj fib-nums (+ (last fib-nums) (second (reverse fib-nums)))))))))","user":"60b79ed6e4b0e0fa5f1b4250"},{"problem":26,"code":"(fn [count] (loop [cnt 2, out [1 1], lastPrev 1, last 1] (if (= cnt count) out (let [newLast (+ lastPrev last)] (recur (inc cnt) (conj out newLast) last newLast)))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"problem":26,"code":"(fn [n]\n  (if (<= n 1)\n    [1]\n    (loop [m n, acc '(1 1)]\n      (if (<= m 2)\n        (reverse acc)\n        (recur (dec m) (cons (+ (first acc) (second acc)) acc))))))","user":"5fd9bf47e4b05ac5b16ea125"},{"code":"#(letfn [(make-fibs [e1 e2]\r\n    (lazy-seq (cons e1\r\n                    (make-fibs e2 (+ e1 e2)))))]\r\n  (take % (make-fibs 1 1)))","problem":26,"user":"4eca5391535d6d7199dd3704"},{"code":"#(loop [a 1 b 1 c [1 1] i (- % 2)]\r\n  (if (= i 0)\r\n\tc\r\n\t(recur b (+ a b) (conj c (+ a b)) (dec i))))","problem":26,"user":"5018eb4ee4b011a2e0bf6411"},{"code":"#(take %\n    (map first\n        (iterate\n            (fn [[a b]]\n                [b (+ a b)]\n            )\n            [1 1]\n        )\n    )\n)","problem":26,"user":"53409368e4b085b17e897daf"},{"code":"#(take % \r\n      ((fn fib[x y] \r\n          (lazy-seq \r\n             (cons x \r\n                  (fib\r\n                   \ty (+ y x)\r\n                   )\r\n            )\r\n          )\r\n        ) 1 1)\r\n\t)","problem":26,"user":"4fe8c7dbe4b0547ebccb2423"},{"problem":26,"code":"#(map (fn fib [x] (if (<= x 1) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range %))","user":"569381a5e4b0dcc4269f4104"},{"problem":26,"code":"(fn [n] \n  (loop [res [1 1] i 2] \n    (if (< i n) \n      (recur \n       (conj res \n             (+ \n              (res (- (count res) 2))\n              (res (- (count res) 1))\n             )\n       ) \n       (+ i 1)\n      )\n      res)))","user":"57c7fa03e4b05aa3c4741d12"},{"problem":26,"code":"(fn [n]\n                    (case n\n                      1 '(1)\n                      2 '(1 1)\n                      (loop [out '(2 1 1)\n                             i 3]\n                        (if (= i n)\n                          (reverse out)\n                          (recur (conj out (+ (first out) (second out)))\n                                 (inc i))))))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":26,"code":"#(loop [n 1 n1 1 l [] c %1]\n   (if (zero? c)\n     l\n     (recur n1 (+ n n1) (conj l n) (dec c))))","user":"545ded41e4b01be26fd74678"},{"code":"(fn [nfibs]                                                                                                                                                                            \n  (loop [counter 2 fibs [1 1]]                                                                                                                                                                 \n    (if (= counter nfibs)                                                                                                                                                                      \n      fibs                                                                                                                                                                                     \n      (recur (inc counter)                                                                                                                                                                     \n             (conj fibs (+ (last fibs)                                                                                                                                                         \n                        (first (rest (reverse fibs)))))))))","problem":26,"user":"509331d9e4b097f48cc38580"},{"problem":26,"code":"(fn fib [cnt] (reverse (reduce (fn inner [a b] (conj a (apply + (take 2 a)))) '(1 1) (range 2 cnt))))","user":"5511dfafe4b06e50f9beb19c"},{"problem":26,"code":"(fn[n]  (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"55757e81e4b05c286339e063"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         fibs [1 1]]\n    (if (= n (count fibs))\n      fibs\n      (recur b (+ a b) (conj fibs (+ a b))))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn fib [x] \n  (take x\n    ((fn fib-s [a b]\n      (lazy-seq (cons a (fib-s b (+ a b))))) 1 1)))","problem":26,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn [nb]\n  (loop [n nb\n         res '()\n         prev 1\n         prevprev 0\n         i 0]\n    (cond\n     (= 0 n) (reverse res)\n     :else (recur (dec n)\n                  (conj res (+ prevprev prev))\n                  (+ prevprev prev)\n                  (if (< i 1) 0 prev)\n                  (inc i)))))","problem":26,"user":"5154fa3fe4b0179c5115f4e6"},{"code":"(fn [n] (case n\n          1 '(1)\n          2 '(1 1)\n          (loop [n (- n 2)\n                 [i j :as all] '(1 1)]\n            (if (zero? n)\n              (reverse all)\n              (recur (dec n) (conj all (+ i j)))))))","problem":26,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":26,"code":"(fn [n]\n  (loop [x n\n         r '()]\n    (if (<= x 0) (reverse r)\n                (if (= (count r) 0) (recur (dec x) '(1))\n                                    (if (= (count r) 1) (recur (dec x) '(1 1))\n                                                        (recur (dec x) (conj r (+ (first r) (second r)))))))))","user":"590253e3e4b0438e51c2d055"},{"problem":26,"code":"#(map first (take %(iterate (fn fib [[a b]][b (+ a b)]) [1 1])))","user":"57b8f784e4b0fbc9809a27ea"},{"problem":26,"code":"(fn [len]\n  (let [fib '(1 1 2 3 5 8 13 21) x len]\n    (take x fib)))","user":"593bccfae4b069cdc2982b7f"},{"problem":26,"code":"(fn my-fib [fib-count]\n  (loop [i 1\n         fib-vec [1]]\n    (if (= i fib-count)\n      fib-vec\n      (recur (inc i) (conj fib-vec (apply + (take-last 2 fib-vec)))))))","user":"5845720de4b089d5ab817e68"},{"problem":26,"code":"#(take % \n       (map first\n            (iterate (fn [[a b]]\n                   [b (+ a b)])\n                 [1 1])))","user":"5bb46f84e4b0a20761a23549"},{"code":"#(rest (take (+ % 1) (map first (iterate (fn [[x y]] (cons (+ x y) [x])) '(0 1)))))","problem":26,"user":"50a3fbc4e4b08bbd0eb4ed31"},{"code":"(fn [n] ( take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51d9eb05e4b02ceefd947755"},{"problem":26,"code":"#(take % (map first (iterate \n              (fn [[a b]] [b (+ a b)]) [1 1]) ))","user":"5f5f2eafe4b02876ed9fcff5"},{"code":"(fn fibo [n]\r\n  (loop [i (- n 2), result (vector 1 1)]\r\n    (if (> i 0)\r\n      (recur (dec i) (conj result (+ (last result) (-> result butlast last))) )\r\n      result\r\n    )\r\n  )\r\n)","problem":26,"user":"4e919b43535dbda64a6f6afb"},{"problem":26,"code":"#(take % ((fn f ([] (f 1 1)) ([a b] (lazy-seq (cons a (f b (+ a b))))))))","user":"58fdbf59e4b0438e51c2cfbc"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib [n]\n  \t(if (< n 3)\n   \t\t1\n    \t(+ (fib (- n 2)) (fib (- n 1)))))]\n\t(map (comp fib inc) (range x))))","user":"50784ae5e4b0fc74642bff68"},{"code":"(fn fib\n  ([n] (fib (- n 2) '(1 1) 1 1))\n  ([n l a b]\n   (if (= n 0)\n     l\n     (fib (- n 1) (concat l (list (+ a b))) b (+ a b)))))","problem":26,"user":"51684318e4b03f62cda68cd6"},{"problem":26,"code":"#(apply list (map last (take % (iterate (fn [[a b]]  [b (+ a b)]) [0 1]))))","user":"5f3388ade4b0574c87022c38"},{"problem":26,"code":"(fn [x]\n  (loop [x (dec (dec x))\n         fib [1 1]]\n  (if (> x 0)\n    (recur (dec x) (conj fib (+ (last fib) (last (butlast fib)))))\n    fib)))","user":"56491d05e4b0284900eef63a"},{"code":";(fn fibseq [n]\n;\t(letfn [(fib [x y] (lazy-seq (cons x (fib y (+ x y)))))]\n;\t(take n (fib 1 1))))\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1N 1N])))","problem":26,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         acc []]\n    (if (= i n)\n      acc\n    (if (or (= 1 i) (= 0 i))\n      (recur (inc i) (conj acc 1))\n      (recur (inc i) (conj acc (+ (nth acc (- i 1)) (nth acc (- i 2)))))))))","user":"543c39e0e4b032a45b86933d"},{"code":"#(take % ( (fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1 ))","problem":26,"user":"51b2e850e4b026427ecf067b"},{"code":"(fn fib [n] (cond (= n 1) [1]\n                  (= n 2) [1 1]\n                  true (conj (fib (- n 1))\n                             (+ (last (fib (- n 1)))\n                                (last (fib (- n 2)))))))","problem":26,"user":"5298c83de4b02ebb4ef75064"},{"problem":26,"code":"(fn [len]\n  (loop [cnt 2 xs (vector 1 1)]\n    (if (= cnt len)\n      xs\n      (recur (inc cnt) (conj xs (+ (first(take-last 2 xs)) (last xs)))))))","user":"54dbb009e4b024c67c0cf76e"},{"problem":26,"code":"(fn ans-25 [len]\n  (if (> len 2)\n    (let [lastArr (ans-25 (- len 1))]\n      (conj lastArr\n            (+ (nth lastArr (- (count lastArr) 2))\n               (last lastArr))))\n    [1 1]))","user":"608fac60e4b03bd49d9f36c7"},{"problem":26,"code":"(fn [steps]\n  (loop [qtd 1 coll [1]]\n    (if (= qtd steps)\n      coll\n      (recur (inc qtd) (conj coll \n                             (reduce + (take-last 2 coll)))))))","user":"5e34318be4b0650de70e2b15"},{"problem":26,"code":"#(last (take (- % 1) (iterate (fn [x] (conj x (+ (last x) (second (reverse x))))) [1 1])))","user":"552621d0e4b0ffed3738f914"},{"problem":26,"code":"(fn [output length]\n  (if (>= (count output) length)\n    output\n    (recur (conj output (apply + (take-last 2 output))) length)))\n[1 1]","user":"5ddecfe5e4b0948ae9d9adda"},{"code":"(fn [n]\n  (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4f0a4e7e535d0136e6c222f4"},{"problem":26,"code":"#(\n  (fn fib [acc n m k]\n    (if (= k 0) \n      acc \n      (fib (conj acc (+ n m))\n           m (+ n m)\n           (- k 1)))) [1] 0 1 (- % 1)\n    )","user":"567ffd69e4b0966858e4d8e7"},{"problem":26,"code":"(fn [x]\n   (apply list (loop [a 1 b 1\n          n x\n          r []\n          ]\n     (if (zero? n)\n       r\n       (recur b (+ a b) (dec n) (conj r a))\n       )\n     )\n   ))","user":"5e12b21be4b099d064962feb"},{"code":"(fn [x] \n  (loop [l 1\n         c 1\n   \t     total_length (- x 2)\n         result [1 1]]\n    (if (= total_length 0)\n      result\n      (recur c (+ c l) (- total_length 1) (conj result (+ c l))))))","problem":26,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn fib[n]\n  (loop [x [1 1]]\n    (if (< (count x) n)\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x\n      )\n    ))","problem":26,"user":"52e0d23ce4b09f7907dd1415"},{"problem":26,"code":"(fn\n  [n]\n  (loop [fs '(1 1)]\n    (if (= (count fs) n)\n      (reverse fs)\n      (recur (conj fs (+ (first fs) (second fs)))))))","user":"5ec02e20e4b00a66d4a95288"},{"problem":26,"code":"(fn [n](last\n  \t\t(take n \n              (iterate #(conj % (apply + (take-last 2 %)))[1])     \n   \t\t)))","user":"5a80ad4be4b00b71e582a058"},{"problem":26,"code":"(fn fib-gen\n  ([n]\n   (fib-gen n 0 1 []))\n  ([n f s tar]\n   (if (= 0 n)\n     tar\n     (fib-gen (- n 1) s (+ f s) (conj tar s)))\n   )\n  )","user":"5d4cf3e9e4b0776584bd6f38"},{"problem":26,"code":"(fn fib-seq [n] (take n ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","user":"5474d1f4e4b0c51c1f4d728c"},{"problem":26,"code":"(fn [n] ; Not the most elegant solution but it works!\n  (when (= n 1)\n    [1])\n  (when (= n 2)\n    [1 1])\n  (loop [x 1 y 1 counter 2 result [1 1]]\n    (if (= counter n)\n      result\n      (recur y (last result) (inc counter) (conj result (+ (last result) y))))))","user":"5c06f6e3e4b0bdcf453d16bb"},{"problem":26,"code":"(fn fib-coll [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else\n   (let [prev (fib-coll (dec n))]\n    (conj prev (+ (last prev) (last (butlast prev)))))))","user":"574ff497e4b02ea114799266"},{"problem":26,"code":"#(map first(take % (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"5d148581e4b0902706380dc6"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))] (take n (fib 1 1))))","user":"53d88bd5e4b0e771c302546e"},{"problem":26,"code":"(fn [x]\n\t(loop [i x f1 0 f2 1 fs []]\n\t\t(if (> i 0)\n\t\t\t(recur (dec i) f2 (+ f1 f2) (concat fs [f2]))\n\t\t\tfs)))","user":"564d02cde4b0284900eef679"},{"problem":26,"code":"#(reduce (fn [r _] (concat r (list (apply + (take-last 2 r)))))\n         '(1 1)\n         (range (- % 2)))","user":"56372798e4b0bfe05bf117d0"},{"code":"(fn\n    [n]\n\n    (loop [acc []\n           i   0]\n      (if (= i n)\n        acc\n        (recur (let\n                 [prev (- (count acc) 1)]\n                 (conj acc\n                       (if (< prev 1)\n                         1\n                         (+ (nth acc prev)\n                            (nth acc (dec prev))))))\n               (inc i)))))","problem":26,"user":"5383c054e4b06839e8705ee8"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))\n        1 1)))","problem":26,"user":"52797546e4b03e8d9a4a7536"},{"problem":26,"code":"(fn fib [n]\n  ((fn fib-helper [a b x]\n    (cond (= x 0) '()\n          :else (cons a (fib-helper b (+ a b) (dec x))))) 1 1 n))","user":"5a2b7f4ee4b09cafd31c7f4a"},{"code":"(fn [y]\n    (into '() (into '() ((fn [x] \n      (if (> (count x) (- y 1)) x (recur\n        (conj x (+\n          (first (subvec x (- (count x) 2)))\n          (last (subvec x (- (count x) 2)))\n          )\n        ))\n      ))\n    [1 1])\n  )))","problem":26,"user":"503efe01e4b06c4e0e1fa26f"},{"code":"(fn [n]\n    (loop [l1 0 l2 1  result []]\n       (if (>= (count result) n)\n            result\n          (recur (+ l2 l1) (+ l1) (conj result (+ l2 l1))))))","problem":26,"user":"4ec5c948535d6d7199dd36b7"},{"problem":26,"code":";#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n;#(take % ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))\n#(take %\n((fn fib[]\n(lazy-cat [1 1]\n(map +(fib)(rest(fib)))))))\n;#(loop [n 1 arr []](cond(< n 3)(recur(inc n)(conj arr 1))(= n (+ % 1)) arr:else(recur(inc n)(conj arr(+(last arr)(second (reverse arr)))))))","user":"580d7e53e4b0849f6811b73e"},{"problem":26,"code":"(fn my-fib [n]\n  (take n ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"6051bcfae4b056659d634203"},{"problem":26,"code":"(fn [n]\n  (loop [l [1 1]\n         i 2\n         a 1\n         b 1]\n    (if (>= i n)\n      l\n      (recur (conj l (+ a b)) (inc i) b (+ a b)))))","user":"5d4a6511e4b0776584bd6f21"},{"problem":26,"code":"(fn [n]\n  (loop [f0 0\n         f1 1\n         fib-seq []]\n    (if (= n (count fib-seq))  fib-seq\n        (recur f1 (+ f0 f1) (conj fib-seq f1)))))","user":"592883f1e4b072a2710fceea"},{"problem":26,"code":"(fn fibonacci-sequaence [n]\n  (loop [res [1]\n         x0 0\n         x1 1\n         cnt 1]\n    (if (= cnt n)\n      (seq res)\n      (recur (conj res (+ x0 x1))\n             x1\n             (+ x0 x1)\n             (+ cnt 1)))))","user":"5b596d0ce4b02d533a91bd7a"},{"problem":26,"code":"#(loop [acc [1] curr 1 cnt %]\n   (if (= 1 cnt)\n     acc\n     (recur (conj acc curr) (+ (last acc) curr) (dec cnt))))","user":"55afc197e4b002ce9d5cbc18"},{"problem":26,"code":"(fn [n]\n  ((fn [n c]\n    (if (< (count c) n)\n      (recur n (conj c (+ (last c) (nth c (- (count c) 2)))))\n      c))\n   n [1 1]))","user":"5ae9b23fe4b0cc2b61a3bbd8"},{"problem":26,"code":"(fn fibonacci-seq [size]\n  (loop [acc [1 1]\n         ele-at 2]\n    (if (= ele-at size)\n      acc\n      (let [prior-val (nth acc (dec ele-at))\n            prior-prior-val (nth acc (- ele-at 2))\n            next-val (+ prior-val prior-prior-val)]\n        (recur (conj acc next-val) (inc ele-at))))))","user":"561d8936e4b064ca9f4b16b2"},{"code":"#(map\n  (fn [[a b]] a)\n    (take %\n      (iterate\n        (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4eb2e6ca535d7eef3080734f"},{"problem":26,"code":"(fn [x] (take x ((fn fibo [a b] (cons a (lazy-seq (fibo b (+ a b))))) 1 1)))","user":"55ba33afe4b01b9910ae29cb"},{"code":"#(map\n  \n (fn Fibonacci [n]\n \t(if (or \n       (= 1 n)\n       (= 2 n))\n    1\n    (+ (Fibonacci (- n 1)) (Fibonacci (- n 2))))\n   ) \n (take % (iterate inc 1))\n)","problem":26,"user":"533e8b54e4b085b17e897d8f"},{"problem":26,"code":"(fn [n] \n  (take n ((fn fib \n             ([] (fib 0 1)) \n             ([x y] (lazy-seq (cons y (fib y (+ x y)))))))))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":26,"code":"#(reverse \n  (loop [n %\n         acc '(1 1)]\n    (if (> n 2)\n      (recur (dec n) (conj acc (+ (first acc) (second acc))))\n      acc)))","user":"55ec4d30e4b0121d4835fdc6"},{"code":"#(take %\n  ((fn fib[a b]\n    (cons a (lazy-seq (fib b (+ a b)))))\n   1 1))","problem":26,"user":"529e558ce4b04e0c58e87b95"},{"code":"(fn fibonacci [x]\n   (if (= 1 x) [1]\n     (if (= 2 x) [1 1] \n       (let [y (fibonacci (- x 1))] \n         (let [z (reverse y)]\n         (conj y (+ (first z) (second z)))))))\n   )","problem":26,"user":"50909368e4b084db37c1e074"},{"problem":26,"code":"(fn [x]\n  (let [acc [1 1]]\n    (if (< x 3)\n      acc\n\n      (loop [c (- x 2)\n             ac acc]\n        (if (> c 0)\n          (recur (- c 1) (conj ac (reduce + (take-last 2 ac))))\n          ac)))))","user":"5e5f83a2e4b0fd0acd15867b"},{"problem":26,"code":"(fn fib [num]\n  (loop [prev 0\n         curr 1\n         coll nil\n         it 0]\n    (if (< it num)\n      (let [new (+ prev curr)]\n        (recur curr new (conj coll curr) (inc it))\n        )\n      (reverse coll)\n      )\n    )\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":26,"code":"#(take % (drop 1 ((fn fibo-f\n     ([] (fibo-f 0 1))\n     ([a b] (cons a (lazy-seq (fibo-f b (+ a b)))))))))","user":"60606490e4b03746e80ebf67"},{"problem":26,"code":"#(loop [res [1 1]] (if (>= (count res) %) res (recur (conj res (+ (last res) (last (butlast res)))))))","user":"571eeb49e4b0145328a7629c"},{"problem":26,"code":"#(take %\n((fn fibo\n  ([] \t\t(fibo 1 1))\n  ([a b]\t(lazy-seq (cons a (fibo b (+ a b)))))))\n)","user":"55ee84c0e4b0121d4835fdf0"},{"code":"(fn [n]\n        (letfn [(fib [n]\n                  (if (< n 2)\n                    1\n                    (+ (fib (dec n)) (fib (- n 2)))))]\n          (map fib (range n))))","problem":26,"user":"532bce35e4b09d4e7a9b5536"},{"problem":26,"code":"(fn [max]\n  (loop [coll [1 1]]\n    (if (= (count coll) max)\n      coll\n      (recur (conj coll (+ (last coll) (last (drop-last coll))))))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [n] (map second (take n (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4ffdca56e4b0678c553fc3e9"},{"problem":26,"code":"#(loop [c % l '(1 1)]\n    (if (= c 2)\n      (reverse l)\n      (recur (dec c) (conj l (+ (first l) (second l))))))","user":"55acab76e4b03311e7b73294"},{"code":"#(cond (== % 3) '(1 1 2) (== % 6) '(1 1 2 3 5 8) (== % 8) '(1 1 2 3 5 8 13 21))","problem":26,"user":"51c4690fe4b06b70b3e207e1"},{"code":"#(take % (\n           (fn fib[a b] ( cons a (lazy-seq (fib b (+ b a)\n                                          )\n                                )\n                        )\n             ) 1 1\n         )\n  )","problem":26,"user":"52be404ee4b07a9af579231a"},{"problem":26,"code":"(fn [n] (take n ( (fn f [x y] (lazy-seq (cons x (f y (+ x y) ) )) ) 1 1 )))","user":"568bd448e4b0dcc4269f40a9"},{"code":"#(loop [i (- % 2) \n        acc [1 1]\n        a 2 b 3 ] \n   (if (= i 0) acc\n     (recur (dec i) (conj acc a) b (+ a b))))","problem":26,"user":"5115e112e4b0ce5098ee73c4"},{"code":"#(take %\n    ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)\n  )","problem":26,"user":"52c54c84e4b0c2d177d620f0"},{"problem":26,"code":"(fn fibby [n]\n  (loop [i 2 res [1 1]]\n    (if (= i n)\n      res\n      (recur\n       (inc i)\n       (conj res (+ (last res) (nth res (- (count res) 2) )))))))","user":"5d13c5d2e4b0902706380dbf"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       )\n)","user":"56db549be4b0ea9b8538f808"},{"code":"#(loop [c % r '(1 1)]\n   (if (= 2 c)\n     (reverse r)\n     (recur (dec c) (cons (+ (first r) (second r)) r))))","problem":26,"user":"51662183e4b05e5ef6a5e807"},{"problem":26,"code":"(fn fib \n  ([n]\n   (fib [1, 1] n))\n  ([xs, n]\n   (if (= (count xs) n)\n     xs\n     (fib (conj xs (+ (last xs) (nth xs (- (count xs) 2))))\n          n))))","user":"54fce8bde4b07d26eda61d30"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n  )\n)","problem":26,"user":"5298bd13e4b02ebb4ef75063"},{"code":"#(take %\n       ((fn f\n          [x y]\n          (lazy-seq (cons x (f y (+ x y)))))\n          1 1))","problem":26,"user":"529b44afe4b02ebb4ef7509d"},{"problem":26,"code":"#(loop [iteration 2 collected-fibs [1 1]]\n  (if (== iteration %)\n    collected-fibs\n    (recur (inc iteration) \n           (conj collected-fibs (+ (last collected-fibs) (nth collected-fibs (- (count collected-fibs) 2)))))))","user":"5fe1589ee4b05ac5b16ea16c"},{"problem":26,"code":"#(last (take (dec %) (iterate (fn [x] (conj x (apply + (take-last 2 x)))) [1 1])))","user":"5a84cf8de4b00b71e582a095"},{"code":"(fn fib [n]\n  (loop [a 1 b 1 i 1 res [] ]\n    (if (= n i)\n      (conj res a)\n      (recur b (+ a b) (inc i) (conj res a)))))","problem":26,"user":"51f42e66e4b0fca5e8b48230"},{"problem":26,"code":"(fn [x] (loop [i (- x 2) result [1 1] p 1 c 1] (if (= i 0) result (recur (dec i) (conj result (+ p c)) c (+ p c)))))","user":"5ad6ad5de4b0ea6055cfac0e"},{"code":"(fn f [n]\n  (if \n    (< n 3)\n    (vector 1 1)\n    (conj (f (- n 1))\n\n\t(+ (second (reverse (f (- n 1)))) (last (f(- n 1)))\n        )\n    ) \n  ) \n)","problem":26,"user":"524c8893e4b0752c4cb68cbf"},{"problem":26,"code":"#(map (fn fib [n]\n  \t\t(if (or (= 1 n) (= 2 n))\n    \t1\n    \t(+ (fib (- n 1)) (fib (- n 2)))))\n\t(range 1 (inc %)))","user":"5eb3d02be4b00a66d4a95215"},{"code":"#(take % ((fn fib[a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"52e54040e4b09f7907dd145c"},{"problem":26,"code":"(fn [n]\n  (loop [l 0\n         c 1\n         v [1]]\n    (if (= (count v) n)\n      v\n      (recur c \n             (+ l c)\n             (conj v (+ l c))))))","user":"57262710e4b0c5bde472c120"},{"problem":26,"code":"(fn f\n  ([] (f 1 1))\n  ([n] (take n (f)))\n  ([n0 n1] (cons n0 (lazy-seq (f n1 (+ n0 n1))))))","user":"5617db88e4b06b1bb2182a16"},{"problem":26,"code":"#(loop [max %1 current 1 fib [1]]\n      (if (= current max)\n        fib\n        (recur max (inc current) \n         (conj fib \n         (+ (last fib) \n           (if (> (count fib) 1) \n             (nth fib (- (count fib) 2)) \n              0) ))))\n)","user":"5841872be4b089d5ab817e06"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 2\n         result [1 1]]\n    (if (>= i n)\n      result\n      (recur (+ i 1) (conj result (reduce + (take-last 2 result)))))))","user":"5ed65b59e4b016b56eae05df"},{"problem":26,"code":"(fn [x] (->> (range x)\n              (map\n                (fn fib [n]\n                  (if (<= n 1)\n                    1\n                    (+ (fib (- n 1)) (fib (- n 2))))))))","user":"58447708e4b089d5ab817e4b"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         a 0\n         b 1\n         fibs [1]]\n    (if (= i n)\n        fibs\n        (let [c (+ a b)]\n          (recur (+ i 1) b c (conj fibs c))))))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn [n]\n  (loop [n n\n         a 1\n         b 0\n         acc []]\n    (if (zero? n)\n      acc\n      (recur (dec n)\n             (+ a b)\n             a\n             (conj acc a)))))","problem":26,"user":"519db0ede4b037b32803f9b9"},{"problem":26,"code":"(fn [n] (loop [i n\n               x [1 1]]\n               (if (= i 2) x\n                 (recur (dec i) (conj x (+ (last x) (nth x (- (count x) 2))))))))","user":"5eb741e4e4b00a66d4a9523b"},{"problem":26,"code":"#(loop[i 1, s 1, r '(0)]\n   (if(> i %)\n     (rest(sort r))\n     (recur(+ i 1)(+ s (first r))(cons s r))))","user":"5654e8ade4b0f9d632dd848e"},{"code":"#(map (fn f [n] (if (> n 2) (+ (f (dec n)) (f (- n 2))) 1)) (range 1 (inc %)))","problem":26,"user":"539ec9f9e4b0ca733b974491"},{"problem":26,"code":"(fn [n]\n   (loop [c 1 a 0  result (vector 1)]\n     (if (> c (- n 1))\n       result\n       (recur (inc c) (last result) (conj result (+ a (last result)))))\n     ))","user":"5ccc2a03e4b0ccb06196288f"},{"problem":26,"code":"#(take % ((fn fib\n            ([]\n             (fib 1 1))\n            ([a b]\n             (lazy-seq (cons a (fib b (+ a b))))))))","user":"5d10c1a8e4b04b4faecf4449"},{"code":"#(clojure.core/hello (map (fn [n] (loop [n n a 1 b 1] (if (= n 0) a (recur (dec n) b (+ a b))))) (range %)))","problem":26,"user":"4db2903f535df7e46ed9b6bf"},{"code":"(fn [n]\n     (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51ce3cd0e4b0e42293a22553"},{"problem":26,"code":"#(take % ((fn fiboi\n  ([] (concat [1] (fiboi 0 1)))\n  ([a b]\n    (let [n (+ a b)]\n      (lazy-seq\n        (cons n (fiboi b n))\n      )\n    )\n  )\n)))","user":"566b8946e4b0a866af6896b0"},{"code":"(fn [times]\n  (cond (= 0 times) []\n        (= 1 times) [1]\n    :else\n      (loop [remaining (- times 2)\n             fib [1 1]]\n        (if (= remaining 0) fib\n          (recur (dec remaining) (conj fib (+ (last fib) (last (pop fib)))))))))","problem":26,"user":"507d28cfe4b00f5b3a6e1a13"},{"code":"(fn [howmany] \n  (reverse (loop [x howmany result '(1 1)]\n    (if (= x 2) \n      result\n      (let [sum (+ (first result) (first (rest result)))] \n        (recur (- x 1) (cons sum result)))))))","problem":26,"user":"4e45b002535dc968683fc4ae"},{"problem":26,"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])) ) )","user":"575fec91e4b08062f99a4e89"},{"problem":26,"code":"(fn [n] \n  (loop [a nil \n         b 1\n         c nil\n         n n] \n    (if (> n 0)\n      (recur (conj a b)\n             (+ b (or c 0))\n             b\n             (dec n))\n      (reverse a))))","user":"566835fde4b04acd4f672de3"},{"problem":26,"code":"(fn [c]\n  (loop [r [1 1] n 1]\n    (if (= (count r) c) r\n        (recur (conj r (+ (nth r n) (nth r (- n 1))))\n               (inc n)))))","user":"57b6edf6e4b0fbc9809a27c8"},{"problem":26,"code":"(fn fib\n\t([x]\n   (if (= x 1 )\n     [1]\n     (fib x [1 1])))\n   ([x y]\n    (if (= x (count y))\n      y\n      (recur x (conj y (+ (nth y (- (count y) 2)) (last y)))))))","user":"5787ce76e4b0ebec4cfb750e"},{"problem":26,"code":"(fn [n] (map (fn fib [x] (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (inc n))))","user":"60ddc7cbe4b0abd5a8cdd531"},{"problem":26,"code":"(fn [num]\n  (cond\n   (= 1 num) [1]\n   :else (loop [last 1 curr 1 out [1 1]]\n               (if (= (count out) num)\n                   out\n                 (recur curr (+ last curr) (conj out (+ last curr)))))))","user":"532ae82be4b09d4e7a9b552b"},{"problem":26,"code":";(fn [n] (let [fib (cons 1 (lazy-seq (map + fib (rest  fib))))] (take n fib)))\n\n\n(fn [n]\n  (letfn [(fib [i]\n            (if (>= 2 i)\n              1\n              (+ (fib (dec i)) (fib (- i 2)))))]\n    (map fib (take n (iterate #(inc %) 1)))))","user":"57e91413e4b0bfb2137f5b20"},{"code":"(fn [n]\n  (loop [v [] i n a 0 b 1]\n    (if (< i 1) v (recur (conj v b) (dec i) b (+ a b)))))","problem":26,"user":"52015698e4b0d7096e99ddba"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]]\n    (if (> n (count res))\n      (recur (conj res (+ (last res) (last (butlast res)))))\n      res)))","user":"591e0782e4b09b4ee5954c25"},{"code":"#(let [f (fn f [a b]\r\n    (lazy-seq (cons a (f b (+ b a)))))]\r\n  (take % (f 1 1)))","problem":26,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn ! [x] (loop [y (- x 2)\n                 z (conj (conj () 1) 1)]\n            (if (>= 0 y)\n              (seq z)\n              (recur (dec y)\n\t\t\t\t\t (conj (vec z) (+ (last z) (nth z (dec (dec (count z))))) )))))","problem":26,"user":"5143824ae4b0b4fb4ace5f36"},{"problem":26,"code":"(fn [n]\n  (map (fn fib [n]\n         (cond\n           (= n 1) 1\n           (= n 2) 1\n           :else (+ (fib (- n 1)) (fib (- n 2)))))\n       (range 1 (inc n))))","user":"5c8aa02de4b048ec896c5958"},{"problem":26,"code":"(fn FiboSeq\n  [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    (> n 2) (let [bef (FiboSeq (dec n))]\n              (conj bef (+ (last bef) (last (butlast bef)))))))","user":"5b02a170e4b0cc2b61a3bd52"},{"problem":26,"code":"(fn [X]\n  (take X\n        (map first\n             (iterate\n              (fn step [[a b]] [b (+' a b)])\n              [1 1]))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":26,"code":"#(take \n  %\n  ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n       1 1))","user":"5602bdf9e4b04bb52996e1a7"},{"code":"#(map (fn fib [i]\r\n   (cond (= i 0) 1\r\n        (= i 1) 1\r\n        :else (+ (fib (dec i)) (fib (- i 2))))) (range 0 %))","problem":26,"user":"4dda61dd535d02782fcbe9f3"},{"problem":26,"code":"(fn fib \n  ([] (fib 1 1))\n  ([n] (take n (fib)))\n  ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1)))))\n  )","user":"5fcb665ae4b07e53c2f3efee"},{"code":"(fn  [lim]\n  (loop [f 1\n         s 1\n         a [1 1]]\n    (if (<= lim (count a))\n        a\n        (recur s \n               (+ f s)\n               (conj a (+ f s))))))","problem":26,"user":"516081e7e4b009fba0926e28"},{"code":"(fn [x]\n  (reverse (\n(fn fib \n  [x]\n  (if (= x 2)\n    '(1 1)\n    (let [s (fib (dec x))]\n      (conj s (+ (first s) (second s))))))\n      x)))","problem":26,"user":"523ed522e4b057c4b7cd0a78"},{"problem":26,"code":"(fn fib [n]\n  ((fn fib-seq [coll, a, b, n]\n    (if\n      (= n 0)\n      coll\n      (recur (conj coll b) b (+ a b) (dec n))\n    )\n  )\n  \n [] 0 1 n)\n)","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [x] \n  ((fn [x l]\n     (if (= (count l) x)\n       l\n       (recur x (concat l [(+ (last l) (second (reverse l)))]))\n       )\n     )\n   x [1 1]\n   )\n  )","problem":26,"user":"50a95127e4b07e35d68b27af"},{"code":"(fn [n]\n  (condp = n\n    0 []\n    1 [1]\n    (loop [s [1 1] n (- n 2)]\n      (if (zero? n)\n        s\n        (recur\n          (let [x (count s)]\n            (conj s (+ (s (- x 1)) (s (- x 2)))))\n          (dec n))))))","problem":26,"user":"4fb4f42ae4b081705acca2b4"},{"code":"(fn fib \n  [n]\n  (letfn [ (fib-iter \n    [n out] \n      (if (> n 0)\n      (fib-iter (- n 1) \n        (conj out \n          (+ \n            (nth out \n              (- (count out) 1)) \n            (nth out \n              (- (count out) 2)))))\n      out))]\n    (fib-iter (- n 2) [1 1] )))","problem":26,"user":"501d0321e4b066e56b9d0b1d"},{"code":"(fn [n] \n  (take n \n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"52680eace4b03e8d9a4a7194"},{"problem":26,"code":"#((fn [x] (if (= (count x) %) \n           x \n          (recur \n           (conj x (+ (last x) (nth x (- (count x) 2 )))\n           )\n           )\n            )) [1 1])","user":"57011eb3e4b08d47c97781d1"},{"problem":26,"code":"(fn [x]\n  (take x ((fn rfib [a b]\n               (lazy-seq (cons a (rfib b (+ a b)))))\n             1 1)))","user":"58fc52cee4b0438e51c2cf95"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b] \n    (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"58376b71e4b089d5ab817d18"},{"problem":26,"code":"#(map first (take % ((fn f [x y]\n                   (lazy-seq (cons [x y]\n                                   (f y (+ x y)))))\n                 1 1)))","user":"53da1540e4b0e771c3025482"},{"problem":26,"code":"#(map first\n  (take % \n    (iterate \n      (fn [[a b]] (vector b (+ a b))) \n      [1 1])))","user":"5af4446de4b0cc2b61a3bc93"},{"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"4fb18c7be4b081705acca27d"},{"problem":26,"code":"(fn fibonacci [ind]\n  (loop [sq [] ind ind n1 1 n2 0]\n    (cond (zero? ind) sq\n          (= 1 ind)   (cons 1 sq)\n          :else (recur (conj sq (+ n1 n2)) \n                       (dec ind)\n                       (+ n1 n2)\n                       n1))))","user":"59b7120fe4b05c620303ca3b"},{"problem":26,"code":"(fn fib [n]\n    (cond \n        (= n 0) '()\n        (= n 1) '(1)\n        (= n 2) '(1 1)\n        \"default\" (let [s (fib (dec n))] (concat s (list (reduce + (take-last 2 s)))))\n     ))","user":"5fafa44ee4b08cb800c85b0e"},{"problem":26,"code":"(fn [m] (reverse ((fn fib [n] (if (> n 0)\n              (#(conj % (+ (nth % 0) (nth % 1))) (fib (- n 1)))\n                '(1 1))) (- m 2))))","user":"5d2ca236e4b01671435dbc94"},{"problem":26,"code":"(fn fib[x & [y]]\n   (if (= x 0)\n     (reverse y)\n     (if-not y\n       (fib (dec (dec x)) '(1 1))\n       (fib (dec x) (conj y (+ (first y) (second y))))\n       )\n         )\n   )","user":"5632abbee4b0bfe05bf117a7"},{"code":"(fn fib [x]\n  (if (= x 1)\n   [1]\n  (if (= x 2)\n    [1 1]\n  (let [prev (fib (- x 1))]\n    (conj prev (+ \n      (nth prev (- (count prev) 1))\n      (nth prev (- (count prev) 2))))))))","problem":26,"user":"4ea0c284535d7eef308072ad"},{"problem":26,"code":"(fn [c] \n  (take \n   c \n   ((fn fib [a b] \n      (cons a \n            (lazy-seq \n             (fib b (+ a b))\n            )\n      )\n     )\n    1\n    1\n   )\n  )\n)","user":"5624b2aee4b00a550fc90285"},{"problem":26,"code":"#(loop [fibS [1 1] toAdd (- % 2)] (if (zero? toAdd) fibS (recur (into fibS [(reduce + (take-last 2 fibS))]) (dec toAdd))))","user":"57986b76e4b039eba2ecb116"},{"problem":26,"code":"#(take % (map last( iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"58b51aeae4b0ebc645576d4b"},{"code":"#(take % \n         ((fn fib[x y] \n            (cons x (lazy-seq (fib y (+ x y))))) \n          1 1))","problem":26,"user":"4dbf7a31535d020aff1edf75"},{"problem":26,"code":"(fn [num-fibs]\n  (loop [result [1 1]\n         loops (- num-fibs 2)]\n    (if (= 0 loops) result\n      (recur (conj result (+ (last result) (last (butlast result)))) (- loops 1)))))","user":"562c2fc2e4b058fa18c5a6d7"},{"code":"#(take % (rest (map first (iterate (fn [[a b]]\n  [b (+ a b)]) [0 1]))))","problem":26,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn fib[len]\n  (loop [res '(1 1) _addNo (- len 2)] (\n    if (zero? _addNo)\n      res\n      (recur\n        (concat res\n          [(+ (nth res (- (count res) 1)) ; F(N - 1)\n            (nth res (- (count res) 2)) ; + F(N - 2)\n          )]\n        )\n        (dec _addNo)\n      )\n  ))\n)","problem":26,"user":"4fe4cefce4b0e8f79898febd"},{"problem":26,"code":"(fn fibs [x]\n    (if (= x 0) [] (if (= x 1) [1] (if (= x 2) [1 1] (let [o (fibs (- x 1))] (concat o (list (reduce + (take 2 (reverse o)))) ) ) )))\n    )","user":"55805a2ee4b05c286339e0ea"},{"problem":26,"code":"#(take % (map first (iterate (fn[[a b]][b (+ a b)]) [1 1])))","user":"55dab408e4b0e31453f64ad9"},{"code":"(fn fibb [m]\r\n  (let [ff (fn fib [n]\r\n  (cond \r\n    (= n 0) 0\r\n    (= n 1) 1 \r\n    (= n 2) 1\r\n    :else (+ (fib (- n 1)) (fib (- n 2)))))]\r\n  (map ff (range 1 (+ m 1)))))","problem":26,"user":"4f625f68e4b0defedf855fd2"},{"code":"(fn f [n] (nth (iterate #(conj % (+ (last (butlast %)) (last %))) [1 1]) (- n 2)))","problem":26,"user":"53578543e4b04ce2eb3ed280"},{"problem":26,"code":"(fn [cnt] \n  (take cnt ((fn fib\n    ([]\n     (fib 1 1))\n    ([m n]\n     (lazy-seq (cons m (fib n (+ n m)))))))))","user":"5a6bf911e4b0512ff01cda4c"},{"code":"(fn [n]\n  (reverse\n\t  (loop [a 0, b 1, left n, accum ()]\n    \t(if (zero? left)\n      \t\taccum\n      \t\t(recur b (+ a b) (dec left) (cons b accum))))))","problem":26,"user":"51515a19e4b03e678e393acc"},{"problem":26,"code":"(fn [x]\n  (loop [i 1 seq [1]]\n\n    (if (< i x)\n\n      (do\n        (if (> i 1)\n          (recur (inc i)(conj seq (+ (nth seq (- i 1)) (nth seq (- i 2)))))\n          (recur (inc i)(conj seq 1))\n          )\n\n        )\n      seq\n    ))\n  \n  )","user":"5c8bc8b4e4b048ec896c5978"},{"problem":26,"code":"(fn [n] \n         (reduce \n           (fn [accum x]\n            (conj accum (+ (last accum) (last (butlast accum)))))\n           [1 1]\n        (range (- n 2))))","user":"5ea8bed8e4b00a66d4a951c2"},{"problem":26,"code":"(fn [n] (loop [cnt n acc '(1 1)] (if (= cnt 2)\n                                 acc \n                                (recur (dec cnt) (seq (conj (vec acc) (reduce + (take-last 2 acc))))) \n                                 )))","user":"5616c78ee4b06b1bb2182a07"},{"problem":26,"code":"(fn [n]\n  ((fn [lst n]\n     (if (= n 0) lst\n       (recur (conj lst (+ (first (reverse lst)) (second (reverse lst)))) (dec n)))) [1 1] (- n 2)))","user":"57902cd8e4b0ebec4cfb75a6"},{"problem":26,"code":"(fn fib ([n] (fib n 0 1 [])) ([n fa fb f] (if (< n 1) f (recur (- n 1) fb (+ fa fb) (concat f [fb])))))","user":"54a634abe4b09f271ff37c84"},{"problem":26,"code":"(fn [x]\n  (loop [li [1 1] cnt 2]\n    (if (= cnt x) li\n      (recur (conj li (+ (last li) (last (take (- (count li) 1) li)))) (+ cnt 1)))))","user":"562d869be4b0a45d2ff8301f"},{"problem":26,"code":"(fn [x]\n  (letfn [(fibo [i l]\n                (if (= i 0)\n                  (reverse l)\n                  (fibo (dec i) (cons (+ (first l) (first (rest l))) l))))]\n    (fibo (- x 2) '(1 1))))","user":"56eaf8f1e4b04a395b9a0419"},{"problem":26,"code":"#(loop [n % acc `(1 1)]\n      (if (= n 0) []\n          (if (= n 1) [1]\n              (if (= n 2) (reverse acc)\n                  (recur (dec n) (conj acc (+ (first acc) (second acc))))))))","user":"56b2652ae4b0982f16b37e04"},{"problem":26,"code":"(fn [n] (letfn [(fib [i] (if (>= 2 i) 1 (+ (fib (dec i)) (fib (- i 2)))))] (map fib (take n (iterate #(inc %) 1)))))","user":"56942962e4b0dcc4269f4117"},{"problem":26,"code":"#(take % (map first (iterate (fn [[l r]] [r (+ l r)]) [1 1])))","user":"55f2fdc3e4b06e875b46ce51"},{"code":"#(letfn [(fib [x] \n              (loop [a 1 b 1 n x]\n                (if (zero? n) a\n                  (recur b (+ a b) (dec n)))))]\n  (map fib (range %)))","problem":26,"user":"52530b4be4b0541d1855b8e4"},{"code":"(fn [n]\n  (take n (map first\n            (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"53315c78e4b019098a6f8b67"},{"code":"(fn[x] (if (= x 3) '(1 1 2) (if (= x 6) '(1 1 2 3 5 8) '(1 1 2 3 5 8 13 21))))","problem":26,"user":"4e080562535d04ed9115e7aa"},{"problem":26,"code":"#(loop [a 1 b 1 n 0 tmp []] (if (= n %) tmp (recur b (+ a b) (inc n) (conj tmp a))))","user":"5640b135e4b08d4f616f5ee8"},{"code":"(fn fib [x] (\n  if (= x 2) \n    [1 1]\n    (conj  (fib (- x 1))\n            (+ (nth (fib (- x 1)) (- x 2))\n            (nth (fib (- x 1)) (- x 3)))\n          \n    )\n))","problem":26,"user":"4f0d1cf3535d0136e6c22314"},{"problem":26,"code":"(fn [x]\n  (loop [output []]\n    (let [index (count output)]\n    (if (= index x)\n      output\n      (let [val (if (or (= index 0)\n                        (= index 1))\n                  1\n                  (+ (nth output (- index 1))\n                     (nth output (- index 2))))]\n        (recur (conj output val)))))))","user":"5130c26fe4b08c712d3fae3a"},{"code":"(fn [n] (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"511c91ace4b00c2a1fa7ff7a"},{"code":"(fn fib-upto [target]\n  ((fn fib-coll [target coll]\n     (cond\n       (= target (count coll)) coll\n       (< (count coll) 2) (fib-coll target (conj coll 1))\n       :else (fib-coll target (conj coll (+ (last coll) (last (butlast coll)))))))\n     target []))","problem":26,"user":"52e32906e4b09f7907dd143d"},{"problem":26,"code":"(comp reverse (fn rfib [n]\n                (let [step (fn [n] (cond\n                                     (< n 1) ()\n                                     (< n 2) '(1)\n                                     (< n 3) '(1 1)\n                                     :else (let [p (rfib (dec n))]\n                                             (cons (+ (first p) (second p)) p))))]\n                  (lazy-seq (step n)))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":26,"code":"#(take % (map first \n    (iterate \n        (fn [[a b]] \n            [b (+ a b)]) \n        [1 1])))","user":"5b081ff2e4b0cc2b61a3bdb3"},{"code":"(fn [x]\n  (reverse (reduce (fn [[f1 f2 & _ :as acc] i]\n            (conj acc (+ f1 f2)))\n          '(1 1)\n          (range 2 x))))","problem":26,"user":"513fab65e4b00f13ea1bd891"},{"problem":26,"code":"(fn([x](letfn[(fib[n](case n 0 0 1 1(+(fib(- n 1))(fib(- n 2)))))](map #(fib %)(range 1 (inc x))))))","user":"5481be5fe4b0e286459a1172"},{"problem":26,"code":"(fn my-fib [i]\n  (let [fib-producer (fn this [j, accumulator]\n                      (cond\n                        (= j i) accumulator\n                        (= j 0) (this (+ j 1) [1])\n                        (= j 1) (this (+ j 1) [1 1])\n                        :else (this (+ j 1) (conj accumulator\n                                                  (+ (last accumulator)\n                                                     (nth accumulator (- (count accumulator) 2)))))\n                        ))]\n    (fib-producer 0 [1 1]))\n  )","user":"56530a1ce4b0f9d632dd846c"},{"problem":26,"code":"(fn fib [n]\n              (loop [a 1, b 1, acc [1]]\n                (if (>= (count acc) n)\n                  acc\n                  (recur b (+ a b) (conj acc b))\n                  )\n                )\n              )","user":"5eee9352e4b07c55ae4a0512"},{"problem":26,"code":"(fn [n]\n  (loop [prevn 0\n         nextn 1\n         fseq []]\n    (if (>= (count fseq) n)\n      fseq\n      (recur nextn (+ nextn prevn) (conj fseq nextn)))))","user":"5a47423be4b05d388ecb6b52"},{"code":"(fn [n]\n  (reverse (last (take (dec n) (iterate (fn [fs]\n                     (conj fs (apply + (take 2 fs)))) '(1 1))))))","problem":26,"user":"50e3ddd4e4b01912b3285c47"},{"problem":26,"code":"#( \n  loop [nums [1 1]]\n  \t(if (>= (count nums) %)\n      (take % nums)\n      (recur\n      \t(conj nums (+ (last nums) (nth nums (- (count nums) 2)))\n              )\n       )\n      )\n    )","user":"5ab5f60be4b073f177442643"},{"code":"(fn [n]\n  (letfn [(fib [x y] (cons x (lazy-seq (fib y (+ x y)))))]\n    (take n (fib 1 1))))","problem":26,"user":"52d0902ee4b07d0d72b273bd"},{"code":"#(take % ((fn fib [i j] (cons i (lazy-seq (fib j (+ i j))))) 1 1))","problem":26,"user":"5006474ce4b0678c553fc481"},{"code":"(fn bob [z]\r\n  (butlast\r\n    (\r\n      (fn this [w]\r\n;        (println \"w: \" w)\r\n        (if\r\n          (> w 1)\r\n          (conj\r\n            (this (dec w))\r\n            (+ (last (this (dec w))) (last (this (- w 2))))\r\n          )\r\n          [1 1]\r\n        )\r\n      )\r\n      z\r\n    )\r\n  )\r\n)","problem":26,"user":"501819efe4b02f523d7cc5eb"},{"problem":26,"code":"(fn fib [max-i]\n    (loop [i 1 v1 0 v2 1 seq [1]]\n      (if (= i max-i)\n        seq\n        (recur (inc i) v2 (+ v1 v2) (conj seq (+ v1 v2))))))","user":"57f6e666e4b0d3187e9008f2"},{"problem":26,"code":"#(loop [counter 2 s [1 1]]\n   (if (>= counter %) s\n     (recur (+ counter 1) (concat s [(+ (first (reverse s)) (second (reverse s)))]))))","user":"558378dce4b05c286339e115"},{"code":"#(take % (map first(iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"5373066be4b06d7f452d9e04"},{"code":"(fn [x] (reduce (fn [xs _] (let [t (apply + (take-last 2 xs)) v (max 1 t)] (conj xs v))) [] (range x)))","problem":26,"user":"51ca7906e4b08b1cbd0d9487"},{"code":"(fn [c]\n\t(loop [r [], but-last 1, last 1, i (- c 2)]\n\t\t(if (zero? i)\n\t\t\t(conj r but-last last)\n\t\t\t(recur (conj r but-last) last (+ but-last last) (dec i)))))","problem":26,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":26,"code":"(fn\n  [numNumbers]\n  (loop [first 1\n         second 1\n         count 2\n         result [first second]]\n    (println first second count)\n    (if (>= count numNumbers)\n      result\n      (let [next (+ first second)]\n        (recur second next (inc count) (conj result next))))))","user":"54b17a49e4b09f271ff37d1e"},{"problem":26,"code":"(fn\n  [n]\n  (loop [col '(1 1)]\n    (if (= (count col) n)\n      (reverse col)\n      (recur\n       (conj col\n             (+\n              (first col)\n              (second col)))))))","user":"5b94c507e4b0c0b3ffbd4a5a"},{"code":"(fn fib [n]\n  (let [gen-fib (fn [xs] (conj xs (apply + (take 2 (reverse xs)))))\n        fib-list (iterate gen-fib [1 1])]\n    (last (take (dec n) fib-list))))","problem":26,"user":"4f2a35ace4b0d6649770a03a"},{"code":"(fn fib [n]\n  (loop [a 1, b 1, acc []]\n    (if (= n (count acc))\n      acc\n      (recur b (+ a b) (conj acc a)))))","problem":26,"user":"4e4c238f535dc968683fc4dc"},{"code":"#(take % ((fn fib [x y]\n             (lazy-seq\n                (cons x (fib y (+ x y))))) 1 1))","problem":26,"user":"51131da8e4b0350614f07a83"},{"problem":26,"code":"(fn[x](reduce #(conj %1(+ (nth %1(- %2 2))(nth %1(- %2 1))))[1 1](range 2 x)))","user":"5830cfe6e4b051871117c016"},{"code":"(fn [n] (reduce \n         (fn [accum e] (conj\n                        accum\n                        (+ (last accum) (last (butlast accum)))\n                       )\n         )\n         [1 1]\n         (range (- n 2))\n        ) \n)","problem":26,"user":"516ed04ee4b06aac486e5b30"},{"problem":26,"code":"(fn [n]\n  (loop [fibs '(1 1)\n         n (- n 2)]\n    (if (= n 0)\n      (reverse fibs)\n      (recur (conj fibs (+\n                         (first fibs)\n                         (second fibs)))\n             (dec n)))))","user":"5af047b8e4b0cc2b61a3bc48"},{"problem":26,"code":"(fn [x] ( take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"56a1b854e4b0542e1f8d14b2"},{"problem":26,"code":"(fn[n]\n   (seq \n     (reduce (fn[r x]\n               (if (<= x 2)\n                 (conj r 1)\n                 (conj r (reduce + (take-last 2 r))))) \n             []\n             (range 1 (+ n 1)))))","user":"577e54bbe4b0c8d87281f6e5"},{"problem":26,"code":"(fn [n]\n  (take n (map first \n               (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"603d5f2ae4b0d5df2af2230c"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n          (lazy-seq\n           (cons a (fib b (+ a b))))) 1 1))","user":"602aa5f1e4b0d5df2af2225d"},{"code":"(fn [n]\n  (cond \n   (= n 0) '()\n   (= n 1) '(1) \n   (= n 2) '(1 1) \n   :else \n   (reverse\n    ((fn fib [n i acc] \n       (\n        if (= n i) \n        acc\n        (fib \n         n \n         (+ i 1)\n         (cons (+ (first acc) (first (rest acc))) acc)\n         )\n       ) \n      ) n 2 '(1 1)   \n     )\n    )\n   )\n )","problem":26,"user":"535197f2e4b084c2834f4ae4"},{"problem":26,"code":"#(loop\n   [[x y result i] [0, 1, [], 0]]\n   (if (= i %)\n     result\n     (recur [y (+ x y) (conj result y) (inc i)])))","user":"55fc07d3e4b0f488688e066e"},{"code":"(fn [n]\n   (take n (map first (iterate (fn [[x y]][y (+ x y)])[1 1]))))","problem":26,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn fib [n]\n  (take n ((fn []\n            (map first (iterate\n                          (fn [[a b]]\n                            [b (+ a b)])\n                          [1 1]))))))","problem":26,"user":"4f8dc9dce4b02e764a0a51b6"},{"problem":26,"code":"#(take % ((fn f[a b] (lazy-seq (cons a (f b (+ b a))))) 1 1))","user":"574a9132e4b02ea1147991fd"},{"problem":26,"code":"(fn fi \n  ([am] (fi 1 1 am []))\n  ([one two am res] \n   (if (= (count res) am) \n     res\n     (recur two (+ one two) am (conj res one)))))","user":"57b6231ae4b0fbc9809a27b7"},{"code":"#(loop [a 1 \n\t\tb 1 \n\t\taccum [1]]\n   (if (>= (count accum) %) \n     accum \n     (recur b (+ a b) (conj accum b))))","problem":26,"user":"52f3af46e4b05e3f0be25f14"},{"code":"#(take % (drop 1 ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 0 1)))","problem":26,"user":"5166e80de4b060c690c1f4c5"},{"code":"(fn [n]\n  (take n ((fn f [a b]\n  \t\t\t  (lazy-seq (cons a (f b (+ a b)))))\n           1 1)))","problem":26,"user":"536c92eae4b0fc7073fd6e43"},{"problem":26,"code":"#(last (take (- % 1) (iterate (fn [L] (conj L (+ (nth L (- (count L) 1)) (nth L (- (count L) 2))))) [1 1])))","user":"53caddbae4b00fb29b2212cc"},{"problem":26,"code":"(fn [n] (reverse (loop [i 1 s '(1)] (if (= i n) s (recur (inc i) (conj s (+ (first s) (if-not (empty? (rest s)) (second s) 0))))))))","user":"5ce56db6e4b0a17bb84e2b72"},{"problem":26,"code":"(fn fib [x]\n  (loop [a 0 b 1 i 0 res []]\n    (if (< i x)\n      (recur b (+ a b) (inc i) (conj res b))\n      res)))","user":"53fc4561e4b0de5c4184859a"},{"problem":26,"code":"(fn [num]\n  (loop [result '(1 1) currentNum (- num 2)]\n      (if (= 0 currentNum)\n         (reverse result)\n         (recur (conj result (+ (first result) (first (rest result)))) (dec currentNum)))\n  )\n)","user":"506af7d8e4b0a2a5463de37d"},{"code":"#(loop [n 2 l [1 1]]\n  (if (= n %) l\n      (let [r (reverse l)]\n(recur\n  (inc n)\n  (conj l\n(+ (first r) (second r)))))))","problem":26,"user":"4da8dd6e30acd6ed12482a68"},{"problem":26,"code":"#(loop [i % final '(1 1)]\n   (if (= i 2)\n     (reverse final)\n     (recur (dec i) (conj final (+ (first final) (second final))))))","user":"55304523e4b076ab5578f810"},{"problem":26,"code":"#(take % \n    (map \n    \tfirst\n    \t(iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    ))","user":"542d95f0e4b0dad94371f2b9"},{"code":"(fn [n]\n  (take n ((fn rfib [a b]\n    (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","problem":26,"user":"4e50c894535dc968683fc4ee"},{"problem":26,"code":"(fn [n] (take n (flatten (take-nth 2 (iterate #(vector (get % 1) (+ (get % 0) (get % 1))) [1 1])))))","user":"5abe2fc2e4b073f17744271e"},{"problem":26,"code":"(fn [x]\n  (loop [s []\n         n 0]\n    (if (= n x)\n      s\n      (recur\n       (conj s\n             (condp = n\n               0 1\n               1 1\n               (apply + (take 2 (reverse s)))))\n       (inc n)))))","user":"5d6042f2e4b0c9e5857d5006"},{"code":"(partial (fn fibo-new [x n]\n         (loop [a 1 b 1 x x n n]\n           (cond\n            (= n 0) x\n            :else\n            (recur b (+ a b) (conj x a) (dec n))))) [])","problem":26,"user":"520332f7e4b030ee0c5b2714"},{"problem":26,"code":"(letfn [(fibfun [] (lazy-cat [1 1] (map + (fibfun) (rest (fibfun)))))]\n  #(take % (fibfun)))","user":"53dadf1de4b0e771c30254ad"},{"problem":26,"code":"(fn [fib-length]\n  (take fib-length ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1)))","user":"5d68f5e6e4b0db5d338d1605"},{"problem":26,"code":"(fn fib [x]\n  (cond\n   (= x 1) '(1)\n   (= x 2) '(1 1)\n   :else (let\n           [coll (fib (dec x))]\n           (concat coll [(+ (last coll) (nth coll (- x 3)))]))))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":26,"code":"(fn fib [n]\n  (loop [result [] x 1 y 1 num 0]\n    (if (zero? (- n num))\n      result\n      (recur (conj result x) (+ y) (+ x y) (inc num)))))","user":"5f8d76c3e4b0715f5002d758"},{"code":"(fn [x]\n  (take x\n    (map first\n      (iterate\n        (fn [[x y]]\n          [y (+ x y)]) [1 1]))))","problem":26,"user":"4e6a4541535d8ccf87e9feb8"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 1) \n   '(1)\n   (concat (fib (dec x)) \n           (list (reduce + (drop (- x 3) (fib (dec x))))))))","user":"564452d1e4b0018b46ad8c0d"},{"code":"#(take % (map first \n              (iterate \n                (fn [[a b]] \n                  [b (+ a b)]) \n                [1 1])))","problem":26,"user":"4fcd5958e4b065de69964ca7"},{"code":"(fn anon [x]\n  (\n(fn fibonacci [numbers remain]\n  (cond \n    (= remain 0) numbers\n    (< (count numbers) 2) (fibonacci (conj numbers 1) (- remain 1))\n    true (fibonacci (conj numbers (+ (nth numbers (- (count numbers) 1)) (nth numbers (- (count numbers) 2)))) (- remain 1))))\n[] x))","problem":26,"user":"503cc8cae4b06c4e0e1fa251"},{"problem":26,"code":"#(\n  (fn [count list]\n    (if (= count 0)\n      (reverse list)\n      (recur\n        (dec count)\n         (cons\n           (+ (first list)\n              (second list))\n                list))))\n    (- % 2) '(1 1))","user":"4dce9252535d5973398f92a3"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first\n             (iterate\n              (fn [[prev post]] [post (+ prev post)])\n              [1 1])\n             )\n        )\n  )","user":"60752ef6e4b069485764de55"},{"code":"#(take % (map first (iterate (fn [vals] (list (second vals) (+ (first vals) (second vals)))) (list 1 1))))","problem":26,"user":"4f88f57ae4b033992c121c73"},{"problem":26,"code":"#(take %\n       ((fn fib [x y]\n         (lazy-seq\n          (cons x\n                (fib y (+ y x))))) 1 1))","user":"56a44067e4b0542e1f8d14da"},{"problem":26,"code":"#(reverse ((fn fib [n] (cond (= n 0) '() (= n 1) '(1) (= n 2) '(1 1) :else (let [f (fib (- n 1))] (cons (+ (first f) (first (rest f))) f)))) %))","user":"56800ba1e4b0966858e4d8e8"},{"problem":26,"code":"(fn [n]\n  (loop [s '(1 1) acc 2]\n    (if (= acc n)\n      (reverse s)\n      (recur \n       (conj s (#(+ (first %) (first (rest %))) s))\n       (+ acc 1)))))","user":"5392500ae4b0b51d73faaeaf"},{"code":"(fn fib [v]\n  (loop [i 0, xs '()]\n    (cond (= i v) xs\n          (= i 0) (recur (inc i) '(1)) \n          (= i 1) (recur (inc i) '(1 1))\n          (< i v) (recur (inc i) (concat xs (list (+ (last xs) (first (take-last 2 xs)))))))))","problem":26,"user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn fib [n]\n  (seq\n    (loop [i 0, x 1, y 0, res []]\n      (if (= i n)\n        res\n        (recur (inc i) y (+ x y) (conj res (+ x y)))))))","problem":26,"user":"539a2901e4b0b51d73faaf0f"},{"code":"#(take % \n   (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4db1b5841254ad5b4805fa70"},{"problem":26,"code":"#(take % (map last (iterate (fn [[a b]] [b (+' a b)]) [0 1])))","user":"564b1f34e4b0284900eef662"},{"problem":26,"code":"(fn fibonacci [x]\n  (cond \n    (= x 1) [1]\n    (= x 2) [1 1]\n    (>= x 3) (concat (fibonacci (- x 1)) [(#(+ (last %) (last (butlast %))) (fibonacci (- x 1)))])))","user":"534fa9dae4b084c2834f4acf"},{"problem":26,"code":"(fn f [num]\n  (if (= num 2)\n    '(1 1)\n    (if (= num 1)\n      '(1)\n      (let [arr (f (- num 1))\n            a (last arr)\n            b (last (butlast arr))]\n       (concat arr [(+ a b)])))\n      )\n    )","user":"541404c2e4b01498b1a719e7"},{"problem":26,"code":"#(take % (reduce (fn [a b] (conj a (+' (last a) (last (butlast a))))) [1 1] (range 98)))","user":"5d6d2e11e4b04d129b00f2ba"},{"problem":26,"code":"(fn fibl [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [l (fibl (dec n))\n          ]\n      (conj l (apply + (take-last 2 l))))))","user":"56327168e4b0bfe05bf117a5"},{"problem":26,"code":"(fn [n]\n   (reverse (cond\n          (= n 0) '()\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          :else (loop [i n x 1 y 2 result '(2 1 1)]\n                  (if (< i 4)\n                    result\n                    (recur (dec i) y (+ x y) (conj result (+ x y))))))))","user":"5da760ebe4b000c986472c1a"},{"problem":26,"code":"#(loop [i (- % 2) f [1 1] n1 1 n2 1] \n   (if (= i 0) f \n     (recur (dec i) (conj f (+ n1 n2)) n2 (+ n1 n2))))","user":"5510f734e4b06e50f9beb18f"},{"code":"#(take % (map first (iterate (fn [x] [(+ (first x) (second x)) (first  x)] ) [1 0])))","problem":26,"user":"507ab268e4b08327cd804a6f"},{"code":"#(rest (take (inc %) (map first (iterate (fn [[a b]]  [b (+ a b)]) [0 1]))))","problem":26,"user":"4efb0ae1535dced4c769f273"},{"problem":26,"code":"(fn [x] \n  (take x \n        ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a)\n                                          )\n                                  )\n                        )\n          )\n        1 1)\n  )\n)","user":"5f875a0ae4b020286baa5e94"},{"problem":26,"code":"#(take % ((fn fbr [a b] (cons a (lazy-seq (fbr b (+ a b))))) 1 1))","user":"58a7215de4b01a0c0b23293c"},{"problem":26,"code":"#(loop [n % result []] \n    (if (= 0 n) \n      result \n      (recur \n        (dec n) \n        (conj result \n          (+ \n            (or (get result (- (count result) 1) 1)) \n            (or (get result (- (count result) 2) 0)))))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":26,"code":"(fn [n]\n   \n   (loop [num  1   ;; fibonacci sequence number starting with 1\n          acc []]\n         \n      (if (> num n)\n        acc\n        \n        (if (<= num 2)\n          (recur (inc num)\n                 (conj acc 1))\n\n            (let [next-num (+ (nth acc (- num 2))   ;; because vectors\n                              (nth acc (- num 3)))] ;; are zero based\n              \n              (recur (inc num)\n                     (conj acc next-num)))))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"code":"(fn [n] (loop [i 0 x []] (if (>= i n) x (recur (inc i) ((fn [y] (conj y (if (< (count y) 2) 1 (+ (last y) (second (reverse y)))))) x)))))","problem":26,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":26,"code":"(fn problem26-fibs [x]\n  (let [fibs\n         ((fn fibs [so-far]\n            (let [next (+ (first so-far) (second so-far))]\n                (lazy-seq\n                        (cons next (fibs (cons next so-far)))\n                        )))\n            '(1 1))]\n          (into [1 1] (take (- x 2) fibs))))","user":"57717915e4b0979f896515b3"},{"problem":26,"code":"(fn [n] (loop [i n x 0 y 0 c []] (if (= 0 i) c (recur (dec i) y (max (+ x y) 1) (conj c (max (+ x y) 1))))))","user":"5614ebc5e4b05f002753dfbc"},{"code":";(fn first-x-fib-nums [x]\n;  (let [fib-next-pair (fn [pair] [(last pair) (reduce + pair)])\n;        fib (iterate fib-next-pair [1 1])]\n;    (map first (take x fib))))\n\n(fn first-x-fib-nums [x]\n  (let [fib-next-pair (fn [[a b]] [b (+ a b)])\n        fib (iterate fib-next-pair [1 1])]\n    (map first (take x fib))))","problem":26,"user":"4f55f4b1e4b0a7574ea7180d"},{"problem":26,"code":"(fn fibonacci\n  [len]\n  (loop [fibon [1 1] lencum 2]\n    (if (< lencum len)\n      (let [fibon1 (last fibon) fibon2 (last (butlast fibon))]\n        (recur\n          (conj fibon (+ fibon1 fibon2)) (inc lencum)\n        )\n      )\n      fibon\n    )\n  )\n)","user":"5c8b6c64e4b048ec896c596f"},{"code":"(fn fib[n] \n  (if (= 2 n) '(1 1) \n    (let [f (fib (dec n))]\n    (concat \n     f\n     (list \n      (+ \n       (first (reverse  f ) )\n       (second (reverse  f ) )\n      ) \n     )\n    )\n  )))","problem":26,"user":"513f53c6e4b051389b345b40"},{"problem":26,"code":"(fn ! [n] \n   (if (= n 1) '(1) \n     (if(= n 2) '(1 1) \n       (concat (!(- n 1)) \n               (list (+ (nth (!(- n 1)) (- n 2) ) (nth  (! (- n 1)) (- n 3))))))))","user":"546fa7a7e4b00cfc9eacc1b1"},{"code":"(fn [n]\n     (loop [n-2 0\n            n-1 1\n            i (- n 1)\n            acc '[1]]\n       (if (>= 0 i) acc\n         (recur n-1 (+ n-1 n-2) (- i 1) (conj acc (+ n-1 n-2))))))","problem":26,"user":"50b19a91e4b03ea880433552"},{"problem":26,"code":"(fn [x] (take x (map first (iterate #(conj [] (nth % 1) (+ (nth % 0) (nth % 1))) [1 1]))))","user":"582c986ee4b051871117bf9b"},{"code":"#(take % ((fn fib [a b]\n            (lazy-seq\n             \t(cons a (fib b (+ a b)))))\n          1 1))","problem":26,"user":"52be5d55e4b07a9af579231e"},{"code":"(fn fib [n]\n\t(take n ((fn fib_base [x y]\n(cons x (lazy-seq (fib_base y (+ x y))))) 1 1)))","problem":26,"user":"50ef3e5de4b0a78662fa2652"},{"problem":26,"code":"(fn [n] (conj (map (fn [x] (+ (first x) (last x))) (take (- n 1) (iterate (fn [[x y]] [y (+ x y)]) [0 1]))) 1)\n   )","user":"5e7d0bc9e4b085ba37836e2a"},{"problem":26,"code":"(fn [n]\n  (let \n    [ fib (fn fib* [a b]\n            (cons a (lazy-seq (fib* b (+ b a)))))]\n    (take n (fib 1 1))))","user":"5954edcbe4b066ee0a44af15"},{"code":"(fn [n]\n  (reverse\n    ((fn fibo [xs n]\n     (if (= n 0)\n       xs\n       (fibo (conj xs (+ (first xs) (first (rest xs))))\n             (- n 1)))) '(1 1) (- n 2))))","problem":26,"user":"4f0381db535dcb61093f6b02"},{"code":"(fn f ([n] (f n [1 1]))\n([n s] (if (= n (count s)) s (f n (conj s (+ (last s) (nth s (- (count s) 2))))))))","problem":26,"user":"4ecbb249535df97575fdabdf"},{"problem":26,"code":"(fn [n] (reverse (loop [n n\n               f 0\n               s 1\n               acc ()]\n          (if(zero? n)\n            acc\n            (recur (dec n) s (+ f s) (conj acc s))))))","user":"606f005ae4b069485764de1b"},{"problem":26,"code":"(fn [ind] (map (fn fib [x] \n\t(if (= 1 x)\n\t 1 \n\t (if (= 2 x)\n\t  1 \n\t  (apply + (map fib [(dec x) (dec (dec x))]))\n\t \t))) (map inc (range ind))))","user":"5ac04101e4b073f177442737"},{"code":"(fn [n]\n  (loop [ack [1 1] num (- n 2)]\n     (if (zero? num)\n            ack\n            (recur\n              (conj ack (reduce + (drop (- (count ack) 2) ack)))\n              (dec num)))))","problem":26,"user":"50a7b76de4b090657f4a5cdc"},{"problem":26,"code":"(fn [x] \n  (take x (\n           (fn fibo [a b] \n             (cons a (lazy-seq (fibo b (+ a b))))) 1 1)))","user":"5630a51de4b0bfe05bf11781"},{"problem":26,"code":"(fn [m]\n\t(let [f \n\t\t(fn fib [n] (if (> n 1)\n\t\t\t  (+ (fib (- n 2)) (fib (- n 1)))\n\t\t\t  (if (= n 1)\n\t\t\t\t1\n\t\t\t\t0\n\t\t\t  )\n\t\t  )\n\t\t)]\n\t\t(for [i (range 1 (+ m 1))] (f i)\n\t\t)\n\t)\n)","user":"592018d2e4b09b4ee5954c55"},{"code":"#(take % ((fn fib ([] (fib 1 1))\n              ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","problem":26,"user":"4f25fc7ee4b0d66497709ffe"},{"problem":26,"code":"(fn\n  [fib-to-calc]\n  (reduce \n \t(fn \n   \t  [calculated-fibonacci _] \n   \t\t(conj calculated-fibonacci \n        \t(+ (if (> (count calculated-fibonacci) 0)\n              (last calculated-fibonacci)\n              0)\n            (if (> (count calculated-fibonacci) 1) \n              (last (butlast calculated-fibonacci)) \n              0))\n         \t)) [1] (range (- fib-to-calc 1))))","user":"5bdb0b4ce4b0ed4b8aab4c10"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n fib [1 1]]\n       (if (= (.length fib) cnt)\n            fib\n        (recur cnt (conj fib (+' (inc (last fib)) (dec (last (butlast fib)))))  )\n)))","user":"57b35772e4b0fbc9809a277c"},{"problem":26,"code":"#(loop [counter 0, a 1, b 0, elems []]\n   (if (>= counter %)\n     elems\n     (let [new-a (+ a b), new-b a]\n       (recur (inc counter)\n              new-a\n              new-b\n              (conj elems a)\n              ))))","user":"53d20e14e4b00fb29b22131a"},{"problem":26,"code":"#(loop [n [1] m 1 p %] (if (> p 1) (recur (conj n m) (+ m (last n)) (dec p)) n))","user":"59ef5280e4b0966464fe6a2b"},{"problem":26,"code":"(fn [x] \n  (if (= x 1)\n    x\n    (loop [y [1 1]]\n      (if (= (count y) x)\n        y\n        (recur (conj y (apply + (take 2 (reverse y)))))))))","user":"596fb563e4b01722bebd4c55"},{"problem":26,"code":"(fn fibonacci [x] \n  (if \n    (== x 1) \n    ('(1))\n    (if \n      (== x 2)\n      ('(1 1))\n \t  (\n       reverse ((fn inner [acc n] \n         (if \n           (== n 0) \n           acc\n           (let \n             [lastElem (nth acc 0)\n              oneButLastElem (nth acc 1)\n              ]\n             (inner (conj acc (+ lastElem oneButLastElem)) (- n 1))\n           )\n         )\n       )\n       '(1 1) (- x 2))\n      )\n    )\n  )\n)","user":"5183bccae4b028ec5fd2f2aa"},{"code":"#((fn inner_fibo [n result] (if (= n 0) \n\t\t\t\t\t\tresult \n\t\t\t\t\t\t(inner_fibo (dec n) (conj result (+ (last result) (nth result (- (count result) 2))))  )\n\t\t\t\t\t)\n) (- % 2) [1 1])","problem":26,"user":"51b5e5f6e4b0f094dd986fd1"},{"problem":26,"code":"(fn fib [i] (\n               loop [count 2 res [1 1]]\n                (if (< count i)\n                  (recur (inc count) (conj res (+ (last res) (last (butlast res)))))\n                  res\n                  )\n\n))","user":"52c70127e4b0c2d177d6211a"},{"code":"(fn [n]\n  (reverse (loop [n n acc (list 1)]\n    (if (= 1 n)\n        acc\n        (recur (dec n)\n                (if (empty? (rest acc))\n                    (cons 1 acc)\n                    (cons (+ (first acc)\n                             (second acc)) acc)))))))","problem":26,"user":"4fd16778e4b04c3a95aa040f"},{"problem":26,"code":"#(take %\n       ((fn fibonacci [a b]\n          (cons a\n                (lazy-seq (fibonacci b (+ a b)))))\n        1 1))","user":"546ed28be4b00cfc9eacc1a5"},{"code":"(fn [n] (take n ((fn fib-seq [a b] (lazy-seq (cons a (fib-seq b (+ a b))))) 1 1)))","problem":26,"user":"4fc7db47e4b0ee37620e182a"},{"problem":26,"code":"#(loop [res [], a 1, b 1, remain %]\n  (if (zero? remain)\n    res\n    (recur\n      (conj res a)\n      b\n      (+ a b)\n      (- remain 1))))","user":"54a0ae0fe4b0f3d1d8e70fb8"},{"code":"(fn f [a b n]\n  (if (> n 0)\n    (cons a (f b (+ a b) (- n 1))))) 1 1","problem":26,"user":"4da3e51330acd6ed10482a68"},{"problem":26,"code":"(fn fib\n  ([n] (fib 1 1 n))\n  ([a b n]\n   (take n (cons a (lazy-seq (fib b (+ a b) n))))))","user":"53a2a259e4b0f1fc7453882c"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(gen-fibs [prev cur]\n            (lazy-seq (cons cur (gen-fibs cur (+ prev cur)))))]\n    (take n (gen-fibs 0 1))))","user":"5879d577e4b01531a375ead8"},{"code":"(fn [x]\n  (loop [prev 1\n         cur  1\n         acc  [1 1]]\n  (if (= x (count acc))\n    acc\n    (let [next (+ prev cur)]\n      (recur cur next (conj acc next))))))","problem":26,"user":"4ed68752535d10e5ff6f52e2"},{"problem":26,"code":"#(map (fn aaa[x] (if(< x 3) 1 (+ (aaa (dec x)) (aaa (- x 2))))) (range 1 (+ 1 %) ) )","user":"564a985be4b0284900eef65c"},{"problem":26,"code":"(fn fib \n  ([n] (fib n '(1 1)))\n  ([n l] (cond\n           (= n 1) '(1)\n           (= n 2) '(1 1)\n           (> n 2)\n             (if (= (count l) n)\n               (reverse l)\n               (fib n (cons (+ (first l) (second l)) l))\n             )\n         )\n  )\n)","user":"5b8b326de4b0c0b3ffbd49b8"},{"problem":26,"code":"(fn [n]\n  (take n \n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ b a)))))\n      1 1)))","user":"543bd52be4b032a45b869336"},{"problem":26,"code":"(fn [n]\n  (let [fibs (iterate (fn [[a b]] [b (+ a b)]) [1 1])]\n    (take n (map first fibs))\n    )\n  )","user":"545eb56be4b01be26fd74682"},{"code":"(fn [x] (seq (nth (iterate #(conj %1 (+ (last %1) (last (butlast %1)))) '[1 1]) (- x 2))))","problem":26,"user":"4fde0365e4b05e33b9224f7f"},{"problem":26,"code":"(fn fib [n]\n (last (take (dec n) (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1]))))","user":"54d341f7e4b0e8a36923e603"},{"problem":26,"code":"(fn [n]\n  (loop [res []\n         i 0]\n    (if (< i n)\n      (recur (case i\n               0 (conj res 1)\n               1 (conj res 1)\n               (conj res (reduce + (take-last 2 res))))\n             (inc i))\n      res)))","user":"567abc97e4b05957ce8c619d"},{"code":"(fn [n]\n  (let [f (fn fib [a b] \n              (cons a (lazy-seq (fib b (+ b a)))))]\n        (take n (f 1 1))))","problem":26,"user":"52ccc2bde4b07d0d72b27371"},{"problem":26,"code":"(fn [n]\n  (loop [i (- n 2) res [1 1]]\n    (if (= i 0) res (recur (dec i) (conj res (+ (nth res (- (count res) 2)) (last res)))))\n  )  \n)","user":"54e85a7fe4b024c67c0cf823"},{"code":"(fn [limit]\n      ( loop [ turns (- limit 2) fibs [1 1] ]\n             ( if ( > turns 0 )\n                  ( recur (dec turns) (conj fibs ( + (last fibs ) (second (reverse fibs )))))\n                  fibs ) ))","problem":26,"user":"51aa4eede4b04e3dc0c27b25"},{"problem":26,"code":"(fn [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"566888e4e4b04acd4f672ded"},{"problem":26,"code":"(fn [n] \n\t( map \n      (fn fibo \n        [nu] \n        (if (< nu 2 ) nu (+ (fibo(- nu 1)) (fibo( - nu 2))))) \n      \n      (range 1 (+ 1 n))))","user":"5b6f72ede4b0c6492753e7dc"},{"problem":26,"code":"(fn fibo2\n  [n]\n  (loop [s [1 1]\n         i 2]\n    (if (< i n)\n      (recur  (conj s (+ (nth s (- i 1)) (nth s (- i 2))  )) (+ i 1))s)))","user":"55d3b030e4b0e31453f64a6b"},{"problem":26,"code":"(fn fib [x]\n  (take x\n  ((fn rec [y z]\n     (cons y (lazy-seq (rec z (+ y z)))))\n        1 1)))","user":"58eac340e4b056aecfd47d24"},{"code":"(fn [n](let [s (take n\r\n                (iterate \r\n                  #(vector \r\n                    (second %) \r\n                    (+ (first %) (second %)))\r\n                  [1 1]))]\r\n       (for [i (range(count s))] (first (nth s i)))))","problem":26,"user":"4de18de7535d08e6dec9fde8"},{"code":"(fn [n] (take n (map long (map first (iterate (fn [[a b]] [b (+ a b)]) [1N 1N])))))","problem":26,"user":"4f83dd78e4b033992c121c24"},{"problem":26,"code":"(fn fib [n]\n(rest \n      ((fn fib-aux \n           [n a b] \n           (if (= n 0) \n               '() \n             (conj (fib-aux (- n 1) b (+ a b))\n                   a)))\n       (+ n 1) 0 1)))","user":"57d5ac4de4b0bd073c2023bc"},{"code":"(fn [n] (loop [iter 0 fibs '()] (cond\n                                   (= iter n) (reverse fibs)\n                                   (= iter 0) (recur (inc iter) (conj fibs 1))\n                                   (= iter 1) (recur (inc iter) (conj fibs 1))\n                                   :else  (recur (inc iter) (conj fibs (reduce + (take 2 fibs))))\n                                   )))","problem":26,"user":"51c15fe9e4b0c9c82288294c"},{"problem":26,"code":"(fn [times] (reverse (last (take (dec times) (iterate #(cons (+ (first %) (first(rest %))) %) '(1 1))))))","user":"55cdd76ae4b0e31453f64a20"},{"code":"(fn fib [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (fib (dec n)) (apply + (take-last 2 (fib (dec n)))))))","problem":26,"user":"4fc92595e4b0ee37620e1843"},{"code":"(fn fibo\r\n  ([final n res]\r\n    (letfn [(add-next-num [res]\r\n              (conj res (apply + (take 2 (reverse res)))))]\r\n      (if (= final n)\r\n        (drop 2 res)\r\n        (fibo final (inc n) (add-next-num res)))))\r\n  ([final]\r\n    (fibo final 0 [1 0])))","problem":26,"user":"4e49fc29535dc968683fc4cb"},{"code":"(fn [n]\n           (if \n               (= n 1) 1\n               (loop [l '(1 1)\n                      c (- n 2)]\n                 (if (= 0 c)\n                   l\n                   (let [n1 (last l)\n                         n2 (second (reverse l))]\n                     (recur (concat l (list (+ n1 n2)))\n                            (- c 1)))))))","problem":26,"user":"53487737e4b084c2834f4a59"},{"problem":26,"code":"(fn fib [x] \n  (if (= x 3) \n    (cons 1 '(1 2)) \n    (let [f (fib (- x 1))] \n      \t(concat f (cons  \n                        (+ (.get f (- (count f) 1)) (.get f (- (count f) 2)))\n                        nil)\n                )\n      )\n    )\n  )","user":"5772bd3be4b0979f896515cf"},{"code":"(fn [n]\n    (loop [n n fst 1 sec 1 nrs []]\n        (cond\n            (zero? n) nrs\n            true (recur (dec n) sec (+ fst sec) (conj nrs fst)))))","problem":26,"user":"51059d33e4b0380e797c7d5c"},{"problem":26,"code":"(fn [cnt]\n  (loop [result '(1 1)]\n    (if (= (count result) cnt)\n      (reverse result)\n      (recur (conj result (+ (first result) (second result))))\n      )\n    ))","user":"57d0e185e4b0bd073c202360"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"52d02380e4b07d0d72b273b7"},{"problem":26,"code":"(fn [x] \n (\n  (fn [x v]\n    (if (== x 0)\n      (reverse v)\n      (if (= v ())\n        (recur (dec x) (conj v 1))\n        (if (= (rest v) ())\n          (recur (dec x) (conj v 1))\n          (recur (dec x) (conj v (+ (first v) (second v))))\n         )\n       )\n      )\n         \n ) x '())\n)","user":"55188c5de4b06a49daca83cc"},{"code":"(fn [n] \n  (take n (map second \n               (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n               )))","problem":26,"user":"51696ee7e4b03f62cda68ce8"},{"problem":26,"code":"#(loop [n % cur 0 nxt 1 result []]\n   (if (= 0 n)\n     result\n     (recur (dec n) nxt (+ cur nxt) (conj result nxt))))","user":"55e26417e4b050e68259b433"},{"code":"(fn fiblist [n]\n  (letfn [(newfib [n] \n                  (if (< n 2)\n                  1  \n                  (+ (newfib (- n 1)) (newfib (- n 2)))))]\n    (map newfib (take n (range))))\n)","problem":26,"user":"4fe49706e4b0e8f79898feb7"},{"code":"(fn [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take n)))","problem":26,"user":"528c381ce4b0239c8a67aeb2"},{"problem":26,"code":"(fn [x]\n  (loop [i 0 fib '()]\n    (if (>= i x)\n      (reverse fib)\n      (recur (+ i 1)\n             (if (< i 2)\n               (conj fib 1)\n               (conj fib (+ (nth fib 0) (nth fib 1))))))))","user":"553b87abe4b09218d5f45003"},{"code":"(fn [n]\n  (letfn [(fib [n]\n             (if (or (= n 1) (= n 2))\n                 1\n                 (+ (fib (- n 1)) (fib (- n 2)))))]\n    (map fib (range 1 (+ n 1)))))","problem":26,"user":"51dd6a7ce4b0c33a4e1da409"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([limit] (take limit (fib)))\n  ([a b]\n   (cons a (lazy-seq (fib b (+ a b))))))","user":"54125eeee4b01498b1a719d3"},{"code":"#(map  (fn fib[y](cond \n          (or (= y 1) (= y 2)) 1 \n          :else (+ (fib (- y 1)) (fib (- y 2)))\n         )) (range 1 (+ 1 %)))","problem":26,"user":"522f39a8e4b032bbe3424159"},{"problem":26,"code":"(fn my-fib [n]\n  (take n\n  ((fn fib [n1 n2]\n    (cons n1 (lazy-seq (fib n2 (+ n1 n2))))) 1 1)))","user":"5703d21ae4b08d47c97781ff"},{"code":"(fn fb [n]\n  (loop [i 0, n2 n, z []]\n    (if (= i n2) z\n      (recur (inc i) n2 (conj z\n                              ((fn fib [nt]\n                                (if (= 0 nt) 0 (if (= 1 nt) 1\n                                                 (+ (fib (dec nt))\n                                                    (fib (- nt 2))))))\n                              (inc i)))))))","problem":26,"user":"50d4c940e4b09cc622d65a71"},{"code":"#(take % ((fn fib\r\n  ([] (concat [1 1] (fib 1 1)))\r\n  ([a b] (lazy-seq (cons (+ a b) (fib b (+ a b))))))\r\n))","problem":26,"user":"5028bce0e4b01614d1633ffb"},{"problem":26,"code":"(fn fibonacci-sequence [n]\n\t(if (= 1 n)\n\t\t[((fn nth-fibonacci [n]\n\t\t(if (<= n 2)\n\t\t\t1\n\t\t\t(+ (nth-fibonacci (- n 1)) (nth-fibonacci (- n 2)))\n\t\t)\n\t) n)]\n\t\t(merge (fibonacci-sequence (- n 1)) ((fn nth-fibonacci [n]\n\t\t(if (<= n 2)\n\t\t\t1\n\t\t\t(+ (nth-fibonacci (- n 1)) (nth-fibonacci (- n 2)))\n\t\t)\n\t) n))\n\t)\n)","user":"5e3b6ae9e4b01d43a70e8df4"},{"problem":26,"code":"(fn first-n-fib [n]\n  (loop [cur 1\n         result []]\n    (if (> cur n)\n      result\n      (recur (+ cur 1)\n             (if (< cur 3)\n               (conj result 1)\n               (conj result (+\n                             (last result)\n                             (first (take-last 2 result))))\n               )))))","user":"5658b9bde4b00d315579610e"},{"problem":26,"code":"(fn fibon\n  ([x] (fibon (list 1 1) 1 1 (- x 2)))\n  ([acc x y index]\n   (if (= 0 index)\n     (reverse acc)\n     (fibon (conj acc (+ x y)) y (+ x y) (- index 1)))))","user":"5bbd1876e4b07a9b28b0ff96"},{"code":"(fn [x]\n  (loop [x x acc [1 1]]\n    (cond\n      (= x 0) '()\n      (= x 1) '(1)\n      (= x 2) (seq acc)\n      (> x 2) (recur (dec x) (conj acc (+ (last acc) (last (butlast acc))))))))","problem":26,"user":"4ec55ab5535d6d7199dd3697"},{"problem":26,"code":"(fn [i] (take i (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"4f070ce6535dcb61093f6c1e"},{"problem":26,"code":"#(map \n (fn fib [n]\n  (if (< n 3)\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n (range 1 (inc %)))","user":"54361d92e4b032a45b8692f7"},{"problem":26,"code":"(fn [n] (loop [n n\n                   acc '(1 0)]\n              (if (= n 1)\n                (drop 1 (reverse acc))\n                (recur (- n 1) (conj acc (+ (first acc) (second acc)))))))","user":"5cd99946e4b05ee0cb311706"},{"problem":26,"code":"(fn \n [x]\n ((fn [x col]\n   (if (= x 0) col\n     (recur(dec x)\n         (conj col (+(last col)(last(butlast col)))))))\n    (- x 3) [1 1 2]))","user":"563cce5be4b0bfe05bf1183f"},{"problem":26,"code":"(fn [n]\n      (case n\n        0 '()\n        1 (1)\n        2 (1 1)\n        (reverse (loop [i 3\n                        r '(1 1)]\n                   (if (> i n)\n                     r\n                     (recur (inc i) (conj r (+ (first r) (second r)))))))))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn [X]\n  (loop [fib [1 1],n 2]\n    (if (< n X)\n      (recur (conj fib (+ (fib (- n 2)) (fib (- n 1)))) (+ n 1))\n      fib)))","problem":26,"user":"4fda016ae4b05e33b9224f42"},{"code":"(fn [num]     \n   (letfn [(fb [n]\n             (if (< n 2)\n                 n\n                 (+ (fb (- n 1)) (fb (- n 2)))))]\n     (reduce\n       (fn [acc curr]\n         (conj acc (fb curr)))\n       []\n       (range 1 (inc num)))))","problem":26,"user":"50f1dedbe4b0897c4366dcd8"},{"problem":26,"code":"#(take %  ((fn fib\n              ([] (fib 1 0))\n              ([l s] (cons l (lazy-seq\n                              (fib (+ l s) l)\n                              )\n                           ))\n              )))","user":"552e1c98e4b076ab5578f7ee"},{"problem":26,"code":"(fn fib                                                                                                                  \n      [number]                                                                                                               \n      (map (fn fibpos [pos] (case pos                                                                                        \n        0  1                                                                                                                 \n        1  1                                                                                                                 \n        (+ (fibpos  (- pos 2))  (fibpos  (- pos 1)))                                                                         \n        ))                                                                                                                   \n             (range number)))","user":"5509bf71e4b06e50f9beb122"},{"problem":26,"code":"(fn fib [n]\n  (rest (reduce (fn [a b] \n            (conj a (reduce + (take-last 2 a)))) \n            [0 1] (range (- n 1))))\n  )","user":"586c6462e4b01531a375e97b"},{"problem":26,"code":"(fn [x]\n  (loop [res [1 1]]\n  \t(if (= (count res) x)\n    \tres\n    \t(let [a (nth res (- (count res) 2)) b (last res)]\n      \t\t(recur (conj res (+ a b)))))))","user":"5d7b90ede4b02e6b30c93552"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]] [b (+ a b)])\n                     [1 1])))","user":"5868ef15e4b0f14aab7c8895"},{"problem":26,"code":"(comp seq #(reduce (fn [fib-acc c] (conj fib-acc (apply + (take-last 2 fib-acc)))) [1 1] (range (- % 2))))","user":"5ced0ca0e4b0a17bb84e2bfd"},{"code":"(fn [n]\n  (take n\n    (map first\n      (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn  [n]\n  (cond (= 1 n) '(1)\n        (= 2 n) '(1 1)\n        :else (loop [counter 2, n-2 1, n-1 1, acc [1 1]]\n                (cond (= counter n) (seq acc)\n                      :else (let [ n (+ n-2 n-1)]\n                              (recur (inc counter) n-1 n (conj acc n)))))))","problem":26,"user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [n]\n  (let [fib (fn [[a b]] [b (+ a b)]),\n        fibs (map first (iterate fib [1 1]))]\n  (take n fibs)))","problem":26,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"code":"(fn f [i] (map last (take i (iterate\n  #(vector (last %) (+ (first %) (last %)))\n  [0 1]))))","problem":26,"user":"4e8a460e535d65386fec2109"},{"code":"(fn f [x]\n    (loop [cnt (- x 2) acc [1 1] n1 1 n2 1]\n      (if (zero? cnt)\n        acc\n        (recur (dec cnt) (conj acc (+ n1 n2)) (+ n1 n2) n1))))","problem":26,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn [n] \n  (last \n   (take (dec n) \n         (iterate #(concat % \n                           (conj '() \n                                 (reduce + \n                                         (take-last 2 \n                                                    %)))) \n                  '(1 1)))))","problem":26,"user":"50d4593ee4b09cc622d65a68"},{"problem":26,"code":"(fn [desiredDepth]\n  ((fn [result depth desiredDepth]\n     (let [last2 (take-last 2 result)\n           s (+ (first last2) (last last2))\n           newResult (conj result s)]\n           (if (= depth desiredDepth)\n             result\n             (recur newResult (inc depth) desiredDepth))))\n     [1 1] 2 desiredDepth))","user":"56c23ca6e4b05cc29241ee7f"},{"problem":26,"code":"(fn fib [count]\n  (take count\n\t  ((fn f [a, b] \n\t       (cons a (lazy-seq (f b (+ a b))))\n\t     ) 1, 1)\n   )\n)","user":"53ef55eee4b0742d9025b0ca"},{"code":"(fn [i] \n  (map (fn f [n] \n          (if (= 1 n)\n            1\n            (if (= 2 n)\n              1\n              (+ (f (- n 1)) (f (- n 2)))\n            )\n          )\n  )\n  (range 1 (+ i 1))\n)\n)","problem":26,"user":"4eb593e6535d7eef30807368"},{"problem":26,"code":"(fn [n] (last (take (- n 1) (iterate (fn [lst] (concat\n                                        lst\n                                        (list (+ (last lst)\n                                                 (first (drop (- (count lst) 2) lst)))))) '(1 1)))))","user":"5a99b83fe4b0d174b936c7aa"},{"problem":26,"code":"#(\n  \n    loop [fibocoll [1 1]\n         a 1\n         b 1]\n    \n    (if (= % (count fibocoll))\n     fibocoll\n     (recur (conj fibocoll  (+ a b)) b (+ a b)))\n  \n  )","user":"598085e6e4b021a7a535fdd3"},{"code":"(comp reverse \n  (fn f [n] \n    (if (= n 1) \n      '(1) \n      (let [p (f (- n 1))] (cons (apply + (take 2 p)) p)))))","problem":26,"user":"506e0e5ae4b09350ab4199eb"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib' ([] \t(fib' 1 1))\n                ([a b] \t(lazy-seq (cons a (fib' b (+ a b))))))]\n    (take n (fib'))))","user":"5db1969be4b010eb3c36cd06"},{"problem":26,"code":"#(take %(map last(iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"53cdbad1e4b00fb29b2212e6"},{"problem":26,"code":"#(loop [fib-seq [1 1]]\n    (cond\n        (<= % 2) (take % fib-seq)\n        (not= (count fib-seq) %) \n            (recur \n                (conj fib-seq (apply + (take-last 2 fib-seq))))\n        :else fib-seq))","user":"5fb2eac0e4b08cb800c85b2f"},{"problem":26,"code":"(fn [x] (map (fn f [n] (cond (= n 1) 1\n                                   (= n 2) 1\n                                   :else (+ (f (- n 1)) (f (- n 2)))))\n             (range 1 (+ x 1))))","user":"59d4a160e4b0ef0a1e9b5be7"},{"code":"(fn [n] (loop [a 0\n               b 1\n               i 1\n               accum [1]]\n          (if (= i n)\n            accum\n          \t(recur b (+ a b) (inc i) (conj accum (+ a b))))))","problem":26,"user":"5302bb37e4b0d8b024fd3734"},{"code":"(fn [n]\n  (let [fib-step (fn [[a b]] [b (+ a b)])\n        fib-seq (map first (iterate fib-step [1 1]))]\n    (take n fib-seq)))","problem":26,"user":"4fc3a72ae4b081705acca342"},{"problem":26,"code":"(fn fibs [size]\n  (loop [fib [1 1]]\n    (if (< (count fib) size)\n      (recur (conj fib (+ (second (reverse fib))(last fib))))\n    \tfib)))","user":"5cbf7b0de4b0ccb06196276e"},{"code":"(fn fibseq [n]\n  (take n\n     \t((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"5245fbbbe4b09dbe66b56183"},{"code":"(fn [n]\n  (let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n      (take n fibs)))","problem":26,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn fib [n]\n  (map \n   #(loop [a 1 b 0 count %]\n     (if (zero? count)\n       a\n       (recur (+ a b) a (dec count)))) (range n)))","problem":26,"user":"4f25c4c4e4b0d66497709ffc"},{"code":"(fn [x]\n  (map (fn f [n] (if (< n 2) n (+ (f (- n 1)) (f (- n 2)))))\n       (range 1 (inc x))))","problem":26,"user":"4e85cda3535db62dc21a62f0"},{"code":"(fn fib [n]\n  (take n\n        (reverse\n         (reduce\n          (fn [a x]\n            (conj a (+ (first a) (second a))))\n          '(1 1)\n          (repeat (- n 2) 0)))))","problem":26,"user":"5175616ae4b0dea9bbfba576"},{"problem":26,"code":"#(take % ((fn f [a b] (cons a (lazy-seq (f b (+ b a))) ))1 1))","user":"54af6fb0e4b09f271ff37d08"},{"problem":26,"code":"(fn fib\n      ([n]\n       (fib (- n 2) 1 1 [1 1]))\n       ([n a b result]\n        (if (= n 0)\n          result\n          (fib (dec n)\n               b (+ a b)\n               (conj result (+ a b))))))","user":"57147cd9e4b07c98581c3abf"},{"code":"#(take % (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","problem":26,"user":"4ed94d69535d10e5ff6f5303"},{"problem":26,"code":";; #(take % '(1 1 2 3 5 8 13 21)) ;; ha-ha\n\n  #(last (take % \n   (iterate \n     (fn [lst] \n       (if (< (count lst) 2) \n         (concat lst [1]) \n         (concat lst [(+ (first(reverse lst)) (second (reverse lst)))]))) \n     [1])))","user":"57eb7a97e4b0bfb2137f5b62"},{"code":"(fn [n]\n  (loop [i n a 0 b 1 ret '()]\n    (if (> i 0)\n      (recur (dec i) b (+ a b) (conj ret b))\n      (into '() ret))))","problem":26,"user":"4f050dec535dcb61093f6bef"},{"code":"(fn [n]\n  (loop [numbers [1 1], i n]\n    (if (zero? i)\n      (take n numbers)\n      (recur (conj numbers (apply + (take 2 (reverse numbers)))) (dec i)))))","problem":26,"user":"4edab806535d10e5ff6f5311"},{"problem":26,"code":"(fn [n] (map #(first %) \n     (take n \n           (iterate \n            (fn [x] (conj [] (second x) (+ (second x) (first x)))) \n            [1 1]))))","user":"5447e08ce4b032a45b8693c3"},{"problem":26,"code":"#(reverse (reduce (fn [x y] (conj x (+ (first x) (if (= y 0) 0 (second x))))) '(1) (range (- % 1))))","user":"564e719ee4b0284900eef69b"},{"problem":26,"code":"(fn fibonacci [n] (case n\n                    0 []\n                    1 [1]\n                    2 [1 1]\n                    (let [f (fibonacci (- n 1))]\n                      \n                      (conj f (+\n                               (f (- n 2))\n                               (f (- n 3))\n                               )\n                            )\n                      )\n                    )\n  )","user":"58333b19e4b089d5ab817c94"},{"code":"(fn fib-seq [n]\n  (take n\n        (rest ((fn rfib [a b]\n           (lazy-seq (cons a (rfib b (+ a b))))) 0 1))))","problem":26,"user":"4f6cf933e4b07046d9f4efc2"},{"problem":26,"code":"(fn [n]\n    (take n\n          ((fn fib [a b]\n             (cons a\n                   (lazy-seq (fib b (+ a b)))))\n           1 1)))","user":"560434cfe4b0c80df0ca2658"},{"code":"#(loop\r\n    [n   (- % 2)\r\n     acc '(1 1)]\r\n    (if (= n 0)\r\n      acc\r\n      (recur\r\n        (dec n)\r\n        (reverse (conj (reverse acc) (+ (first (reverse acc)) (second (reverse acc))))))))","problem":26,"user":"50c0a98ee4b096f585049c2e"},{"code":"(fn [x]\n  (letfn [(fib [n-2 n-1]\n            (cons n-2 \n              (lazy-seq (fib n-1 (+ n-2 n-1)))))]\n    (take x (fib 1 1))))","problem":26,"user":"4e7e032b535db169f9c796fc"},{"code":"#(take % ((fn fib [a b] \n            (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"52f94752e4b047fd55836fe6"},{"code":"#(reduce (fn [r x] (conj r (+(last r) ( nth r (- (count r) 2))))) [1 1] (range (- % 2 )   ))","problem":26,"user":"5153b1bce4b0252ac4b16639"},{"problem":26,"code":"#(loop [x 1\n        y 1\n        s [x y]]\n   (if (= (count s) %)\n     s\n     (recur y (+ x y) (conj s (+ x y)))))","user":"54a1f494e4b09f271ff37c52"},{"code":"(fn [n]\n  (case n\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    (reverse (loop [n (- n 2) acc '(1 1)]\n               (if (= n 0)\n                 acc\n                 (recur (- n 1) (cons (+ (first acc) (second acc)) acc)))))))","problem":26,"user":"524cdd51e4b0752c4cb68ccc"},{"problem":26,"code":"(fn [x] (map (fn fib [n] (cond (= n 1) 1 (= n 2) 1 :else (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc x))))","user":"586e47dee4b01531a375e9a9"},{"problem":26,"code":"(fn [n] (reverse (reduce (fn [res val] (conj res (apply + (take 2 res)))) '(1 1) (range (- n 2)))))","user":"53e9a15be4b036ad0777e4ae"},{"problem":26,"code":"(fn fib \n  \t([x] (fib (- x 2) [1 1]))\n    ([x f] \n     (if (> x 0)\n        (fib (- x 1) (conj f (reduce + (take 2 (reverse f)))))\n        f\n    ))\n)","user":"597780c7e4b01722bebd4cf1"},{"problem":26,"code":"(fn f [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [xs (f (- n 1))\n          x  (+ (last xs) (last (butlast xs)))]\n      (concat xs [x]))))","user":"5bcddaeee4b0e9689409ee07"},{"problem":26,"code":"(fn fibrev [n]\n  (if (== n 2)\n    '(1 1)\n    (reverse (conj (reverse (fibrev (dec n))) (+ (first (reverse (fibrev (dec n)))) (first (rest (reverse (fibrev (dec n))))))))))","user":"59b21070e4b0e1f4e384c8f2"},{"problem":26,"code":"#(reduce (fn [fibs n] (conj fibs (+ (fibs (- n 1)) (fibs (- n 2))))) [1 1] (range 2 %))","user":"602c30e3e4b0d5df2af2226f"},{"problem":26,"code":"#((fn custom2\n    [sequence, actual, max]\n    (if (< actual max)\n      (custom2 (conj sequence (apply + (take-last 2 sequence))) (+ actual 1) max)\n      sequence\n      )\n    ) [1] 1 %)","user":"583f1533e4b089d5ab817dc8"},{"problem":26,"code":"#(loop [x % y 1 z 1 w [1]]\n  (if (< x 2)\n    w\n    (recur (- x 1) z (+ y z) (conj w z))\n   ))","user":"5d60ea3ae4b0c9e5857d500a"},{"problem":26,"code":"(fn [x] (loop [n 0 p0 1 p1 1 result '()] (if (= n x) (reverse result) (if (or (= n 0) (= n 1)) (recur (inc n) p0 p1 (conj result 1)) (recur (inc n) p1 (+ p0 p1) (conj result (+ p0 p1) ) ) ) )))","user":"551daeb9e4b030e6a24d00df"},{"problem":26,"code":"(fn [count] (loop [fibo [1] n (dec count)] (if (> n 0) (recur (conj fibo (reduce + (take-last 2 fibo))) (dec n))\n                                       (reverse (into (list) fibo))\n                                       )))","user":"53a6a599e4b0ef122a8689cc"},{"code":"(fn fib [n]\n  (cond\n   (or (= n 0) (= n 1)) [1]\n   (= n 2) [1 1]\n   true (let [current-list (fib (- n 1))]\n          (conj current-list (+ (last current-list) (last (butlast current-list)))))))","problem":26,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn fibo [n] \n  (rest \n    ((fn [n] \n    (loop [x 0, result []]\n      (if (> x n)\n        result\n        (recur \n          (+ x 1) \n          (conj result (cond\n                         (= x 0) 0\n                         (= x 1) 1\n                         :else (let [a (last result), b (first (take-last 2 result))] (+ a b))\n        )))\n      ))) \n    n)))","problem":26,"user":"52cf084ce4b07d0d72b27399"},{"code":"(fn fib[x] \n  (case x \n    0 '(0)\n    1 '(1)\n    (let [x-1 (fib (- x 1))]\n      (concat\n         x-1\n         (list (reduce + (take-last 2 x-1)))\n       )\n      )\n    )\n  )","problem":26,"user":"51eec1a6e4b0871fa145d98d"},{"problem":26,"code":"(fn [val] (map\n            (fn fib [n]\n              (if (<= n 1)\n                1\n                (+\n                 (fib (- n 1))\n                 (fib (- n 2)))))\n            (range val)))","user":"557b3f29e4b05c286339e0ac"},{"problem":26,"code":"(fn [n] (reverse (loop [acc nil a 1 b 1 i 0] (if (= i n) acc (recur (conj acc a) b (+ a b) (+ i 1))))))","user":"587e43d2e4b052da650a633f"},{"code":"(fn [i]\n   (loop [v [1 1], i i]\n     (if (> i (count v))\n       (recur (conj v (+ (peek v) (peek (pop v)))) i)\n       v)))","problem":26,"user":"511937e1e4b055cfb310d494"},{"code":"(fn [x]\n  (take x (map first\n               (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":26,"code":"(fn fibonacci-2\n  [n]\n  (let [aux (fn aux [x y]\n             (lazy-seq (cons y (aux y (+ x y)))))]\n       (take n (aux 0 1))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"#(map (fn fib[n] \n              (if (> n 2) \n                  (+ (fib (- n 1)) (fib (- n 2))) \n                  1)) \n          (range 1 (inc %)))","problem":26,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn [x] (letfn [(fib\n  ([] (concat [1 1] (fib 1 1)))\n  ([a b] (lazy-cat  [(+ a b)] (lazy-seq (fib b (+ a b))))))]\n  (take x (fib))))","problem":26,"user":"4e50fb2c535dc968683fc4f1"},{"code":"(fn my-n-fibs [n]\n  (reverse\n   ((fn my-n-fibs-reversed [n]\n      (if (= n 1)\n        '(1)\n        (if (= n 2)\n          '(1 1)\n          (cons\n           (+\n            (first (my-n-fibs-reversed (- n 1)))\n            (second (my-n-fibs-reversed (- n 1))))\n           (my-n-fibs-reversed (- n 1))))))\n    n )))","problem":26,"user":"533ce38ce4b085b17e897d77"},{"problem":26,"code":"(fn [n] (loop [count (- n 2)\n                   l [1 1]]\n              (if (= count 0) l\n                (recur (dec count) (conj l (apply + (take-last 2 l)))))))","user":"5c3ee9bde4b08cd430848e8b"},{"code":"(fn [n]\r\n    (loop [cnt (- n 2) acc '(1,1)]\r\n       (if (zero? cnt)\r\n            acc\r\n          (recur (dec cnt) (concat acc (list (+ (last acc) (last (butlast acc)) )))))))","problem":26,"user":"4ffd92e7e4b0678c553fc3e3"},{"problem":26,"code":"(fn [n]\n  ;; f1 = f2 = 1\n  (loop [fibs [1 1]]\n    (if (< (count fibs) n)\n      (let [[n-1 n-2] (take-last 2 fibs)]\n        (recur (conj fibs (+ n-1 n-2))))\n      ;; we have to make sure to return the correct list for n=1\n      (take n fibs))))","user":"56175cf9e4b06b1bb2182a0f"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n \t     (fn [[x1, x2]]\n   \t\t [x2 (+ x1 x2)])\n \t\t[1 1])))","user":"57275898e4b0c5bde472c13e"},{"code":"#(loop [num %1 result () cur 0 st 1 nd 0]\n            (if (= cur num)\n            \t result\n              (recur num (concat result (list (+ st nd))) (inc cur) nd (+ st nd))))","problem":26,"user":"518ccf6be4b05e6c8537e386"},{"code":"#((fn fib [first second count]\n  (if (> count 0)\n    (cons first (fib second (+ first second) (- count 1)))\n    [])) 1 1 %)","problem":26,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn [n] (reverse (nth (iterate #(conj % (apply + (take 2 %))) '(1)) (dec n))))","problem":26,"user":"4fb0a1e0e4b081705acca269"},{"problem":26,"code":"(fn fibo \n [n]\n (loop [i n\n        res '(1 1)]\n   (if (< i 3) \n     (take n (reverse res))\n     (recur (dec i) (conj res (+ (first res) (second res)))))))","user":"5c9d0a0be4b048ec896c5afc"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n)","user":"58670d13e4b0f14aab7c8871"},{"code":"(fn [n]\n  (letfn [(fib [a b]\n               (cons a (lazy-seq \n                        (fib b (+ b a)))))]\n    (take n (fib 1 1))))","problem":26,"user":"5240512ee4b0ad64fa010319"},{"problem":26,"code":"(fn fib [n] (case n\n              1 '(1)\n              (concat (fib (dec n))\n                      (list (reduce + (take-last 2 (fib (dec n))))))))","user":"598dc40ce4b02b9968b84d2c"},{"problem":26,"code":"(fn fib [x]\n         (last (take (dec x)  (iterate \n                               (fn[xls] \n                                 (let [r (drop (- (count xls) 2) xls)\n                                       n (+ (first r) (last r))]\n                                   (conj xls n)))\n                               [1 1]))))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn fib-seq [x] \n  (loop [result '(1), a 0, b 1, count x]\n    (if (= count 1)\n       (reverse result)\n       (recur (cons (+ a b) result) b (+ a b) (dec count)))))","problem":26,"user":"4f17df72535d64f603146458"},{"problem":26,"code":"#(loop [fibs '()\n        left %\n        x 1\n        y 1]\n   (if (> left 0)\n     (recur (concat fibs (list x)) (- left 1) y (+ x y))\n     fibs))","user":"5f3ce2c7e4b004f08c61c548"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2)\n     x\n    (+ (fib (dec x)) (fib (- x 2))))) (range 1 (inc %)))","user":"536fd48be4b0fc7073fd6e88"},{"code":"(let [penultimate #(nth % (- (count %) 2))] (fn fib ([n] (fib (- n 2) [1 1])) ([n so-far] (if (= n 0) so-far (fib (- n 1) (conj (vec so-far) (+ (last so-far) (penultimate so-far))))))))","problem":26,"user":"50d1aaafe4b05a71a896ef58"},{"code":"(fn [n] (map (fn fib[x] (if (= x 0) 0 (if (= x 1) 1 (+ (fib (- x 1)) (fib (- x 2)))))) (range 1 (inc n))))","problem":26,"user":"51db27dbe4b094966a2cd688"},{"problem":26,"code":"#(loop [a (- % 2) z [1 1]]\n    (if (> a 0)\n      (recur (dec a) (conj z (+ (first (reverse z)) (second (reverse z)))))\n      z\n      )\n    )","user":"5f1eec36e4b0f565ad998274"},{"problem":26,"code":"(fn fib [n]\n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5cd06cfbe4b0ccb0619628d2"},{"problem":26,"code":"(fn [n] \n  (take n \n        (map #(get % 0) \n             (iterate #(vector (get % 1) (+ (get % 0) (get % 1))) [1 1])\n)))","user":"54239171e4b01498b1a71ad2"},{"code":"#((fn [xs n] (if (= 0 n) (reverse xs) (recur (conj xs (+ (first xs) (second xs))) (- n 1)))) '(1 1) (- % 2))","problem":26,"user":"514def61e4b019235f6c0591"},{"code":"(fn [lst]\n    ((fn fib [x y lst]\n    \t(if (= lst 0)\n    \t  []\n    \t  (cons x (fib y (+ x y) (dec lst)))))\t\n       1 1 lst)\n   )","problem":26,"user":"5280d4bbe4b0757a1b171415"},{"problem":26,"code":"(fn fib\n\t[num]\n\t(loop [x 1 p1 1 p2 1 out [1 1]] \n\t\t(if (> x (- num 2))\n\t\t\tout\n\t\t\t(recur (inc x) p2 (+ p1 p2 ) (conj out (+ p1 p2) )))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [n]\r\n  (let [fibo-fn (fn [[x y]] [y (+ x y)])\r\n        fibo  (map first (iterate fibo-fn [1 1]))]\r\n    (take n fibo)))","problem":26,"user":"50435689e4b034ff00315d21"},{"code":"(fn fibonacci [x]\n  (loop [fibseq '(1 1) counter 0]\n    (if (= x (+ counter 2))\n      (reverse fibseq)\n        (recur (cons (+ (first fibseq) (nth fibseq 1)) fibseq) (inc counter))\n        )      \n      )\n    )","problem":26,"user":"51377188e4b04059df19f303"},{"code":"#(map (fn fib [n] \n  (if (or (= n 2) (= n 1))\n    1\n    (+ (fib (dec n)) (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"4e7f5a0b535db966e863cc41"},{"problem":26,"code":"(fn [x]\n   (loop [y x\n          l 0\n          r 1\n          acc []]\n     (if (zero? y)\n       acc\n       (recur (dec y)\n              r\n              (+ l r)\n              (conj acc r))\n       )\n     )\n)","user":"541168dee4b01498b1a719c3"},{"problem":26,"code":"(fn [x]\n        (loop [a (- x 2) r '(1 1) ]\n        (if (> a 0)\n                (recur (dec a) (cons (+ (first r) (second r)) r))\n                (reverse r)\n        ))\n)","user":"5661b0a9e4b068f2fe63dc6f"},{"problem":26,"code":"#(take % ((fn fib [a b]\n       \t\t(cons a \n                  (lazy-seq (fib b (+ a b))))) 1 1))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn get-fibs\n  [n]\n  (take n \n        ((fn fib\n          [a b]\n          (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"5194675fe4b0142f60b4aedf"},{"problem":26,"code":"#(take % (\n          (fn fib [a b]\n           (lazy-seq \n            (cons a \n             (fib b (+ a b))\n            )\n           )\n         ) \n       1 1))","user":"4f73591be4b07046d9f4f045"},{"problem":26,"code":"(fn k [x]\n  (loop [cnt 2 acc '(1 1)]\n    (if (= x cnt)\n      (reverse acc)\n      (recur (inc cnt)  (conj acc (+ (first acc) (first (rest acc)))  )))))","user":"52d2d7e9e4b099d49816f0b6"},{"code":"(fn [n] (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      (> n 2) \n        (loop [x 1 y 1 retval [1 1]]\n        (if (>= (count retval) n) retval\n        (recur y (+ x y) (conj retval (+ x y)))))))","problem":26,"user":"50e448bae4b0463d3207248d"},{"code":"(fn fib\n  ([n]\n     (cond\n      (zero? n) []\n      (= n 1) [1]\n      (= n 2) [1 1]\n      :else (let [prev (fib (dec n))] \n                 (conj prev (apply + (take-last 2 prev)))))))","problem":26,"user":"511d6a01e4b022853b0e07a5"},{"problem":26,"code":"(fn fibbo [n] (take n \n                      (map second \n                           (iterate (fn [[f s]] [s (+ f s)]) [0 1]))))","user":"5e21c933e4b05b4b01516128"},{"problem":26,"code":"(fn fibo [n]\n  (cond\n   (zero? n) '()\n   (= 1 n)   '(0)\n   (= 2 n)   '(0 1)\n   (= 3 n)   '(1 1 2)\n   (= 6 n)   '(1 1 2 3 5 8)\n   (= 8 n)   '(1 1 2 3 5 8 13 21)\n   )\n  )","user":"54b04ce4e4b09f271ff37d12"},{"code":"#(map (fn fb [n]\n        (cond (<= n 1) 1\n          :else (+ (fb (- n 1)) (fb (- n 2)))))\n(range 0 %))","problem":26,"user":"5034374de4b062bc5d7ae161"},{"code":"#(reduce\n  (fn [x,y]\n    (if (> (count x) 1)\n      (concat x  (list (+ (last x) (last (butlast x))))  )\n\n      (repeat  (inc (count x)) 1)\n\n      )\n    )\n  (repeat (+ 1 %) ())\n  )","problem":26,"user":"51b5a6e0e4b0f094dd986fce"},{"problem":26,"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ b   a))))) 1 1)))","user":"53e150e5e4b0d874e779ae53"},{"problem":26,"code":"#(let [lazy-fib-seq\n       ((fn build-fib [a b]\n          (lazy-seq (cons a (build-fib b (+ a b))))) 0 1)]\n   (rest (take (+ % 1) lazy-fib-seq)))","user":"5fbc8747e4b03f550f448239"},{"problem":26,"code":"(fn [n] \n (let [fib (fn fib [x] \n  (if (or (= x 0) (= x 1)) \n   1\n   (+ (fib (- x 1)) (fib (- x 2)))\n  )\n )]\n (\n  map fib (range n)\n ) \n))","user":"5d4c83b7e4b0776584bd6f34"},{"problem":26,"code":"(fn [n] \n  (loop [x [1 1] c (- n 2)] \n    (if (> c 0)\n      (recur (conj x (+ (last x) (last (butlast x)))) \n             (dec c))\n      x)))","user":"5550b5a0e4b00713264bd9ad"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [n1 (fib (- n 1))\n          n  (+ (last (butlast n1))(last n1))] \n      (conj n1 n)\n          )))","user":"53b42472e4b047364c0444b2"},{"problem":26,"code":"(fn[x]\n  (take x ((fn rfib [a b]\n   (cons a (lazy-seq (rfib b (+ a b)))))\n  1 1)))","user":"5b97c521e4b0c0b3ffbd4a9a"},{"code":"(fn g [n]\n  (take n\n        ((fn h [a b]\n             (cons a (lazy-seq (h b (+ a b)))))\n         1 1)))","problem":26,"user":"4fd2789ee4b04c3a95aa0422"},{"code":"(fn fib [n]\n  (loop [xs [] a 1 b 1 n n]\n    (if (zero? n)\n      xs\n      (recur (conj xs a)\n             b\n             (+ a b)\n             (dec n)))))","problem":26,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"(fn [n]\r\n   (cond (= n 1) [1]\r\n   (= n 2) [1 1]\r\n\t :else\r\n\t (reverse (loop [i 2 xs '(1 1)]\r\n\t   (if(= n i)\r\n\t   xs\r\n\t   (recur (+ i 1) (cons (+ (first xs) (first (rest xs))) xs)\r\n\t\t\t\t ))))))","problem":26,"user":"4ddc620d535d02782fcbea06"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4dd6fa35535d2dad7130b5cd"},{"problem":26,"code":"(fn fib [n]\n (if (< n 3) [1 1]\n  (conj (fib (- n 1)) (reduce + (take 2 (reverse (fib (- n 1))))))))","user":"560368a6e4b04bb52996e1bb"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 1, b 1, acc [1]]\n    (if (>= (count acc) n)\n      acc\n      (recur b (+ a b) (conj acc b)))))","user":"5a47ce68e4b05d388ecb6b5d"},{"code":"(fn [limit]\n  (loop [fibnums '(1), curr 1, prev 0]\n    (if (= limit (count fibnums))\n      (reverse fibnums)\n      (recur (cons (+ prev curr) fibnums) (+ prev curr) curr))))","problem":26,"user":"512c0f84e4b03a42b6300232"},{"problem":26,"code":"(fn [n] (let [add-next-fib (fn [coll _] (let [reversed (reverse coll) my-last (first reversed) my-butlast (second reversed)] (conj coll (+ my-last my-butlast))))]\n                (reduce add-next-fib [1 1] (range (- n 2)))))","user":"5d89427ae4b0915913b1d3b5"},{"code":"(fn [n]\n  ((fn [fib n]\n     (if (= n 0)\n       (reverse fib)\n       (if (< (count fib) 2)\n         (recur (cons 1 fib) (dec n))\n         (recur (cons (+ (first fib) (second fib)) fib) (dec n))))) '() n))","problem":26,"user":"5041bdf3e4b06d8231e4fad0"},{"problem":26,"code":"(fn fib \n\t([upto] (fib [0 1] upto)) \n\t([fibnos upto] \n\t\t   (if (= (count (rest fibnos)) upto) (rest fibnos)\n\t \t   \n\t \t   \t\t(fib (conj fibnos (+ (last fibnos) (nth fibnos (-(count fibnos) 2))) ) upto)\n\t \t   )\n\t)\n)","user":"5513dec7e4b055c2f668d4cd"},{"code":"#(take % ((fn rfib [a b] \n  \t   (cons a (lazy-seq (rfib b (+ a b)))))\n\t       1 1))","problem":26,"user":"4e726575535d5021c1a89660"},{"code":"(fn fibs\n  ([n]\n    (cond (= n 1) [1]\n          (= n 2) [1 1]\n          :else (fibs (- n 2) [1 1])))\n  ([n f]\n    (let [n1 (first (reverse f))\n          n2 (second (reverse f))]\n    (if (zero? n)\n      f\n      (fibs (dec n) (conj f (+ n1 n2)))))))","problem":26,"user":"4f382eb7e4b0e243712b1ed9"},{"problem":26,"code":"(fn [n]\n  (->> (iterate\n         (fn [[a b]]\n           [b (+' a b)])\n         [1 1])\n       (map first)\n       (take n)))","user":"5d28d935e4b092dab7f59c88"},{"problem":26,"code":"(fn [n] (assert (> n 1) \"fibonacci not defined for less than two\") (loop [s (list 0 1)] (if (= (count s) (inc n)) (drop 1 s) (recur (concat s (list (reduce + (take-last 2 s)))))  )))","user":"5460832ce4b01be26fd74693"},{"code":"(fn fib_seq [n] (map #((fn fib [n] (if (> n 2) (+ (fib (- n 1)) (fib (- n 2))) 1)) %) (range 1 (+ n 1))))","problem":26,"user":"52e295fae4b09f7907dd1437"},{"code":"(fn [n]\n  (loop [p 0 c 1 cnt 1 r []]\n    (cond (< n cnt) r\n          :else (recur c (+ p c) (inc cnt) (conj r c)))))","problem":26,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [x]\n  (take x \n        (map first \n              (iterate (fn [[a b]]\n                            [b (+ a b)]) \n                       [1 1]))))","problem":26,"user":"4e77c1db535d324fb2983d72"},{"problem":26,"code":"(fn\n  [n]\n  (let [f\n        (fn fs\n          ([]\n           (fs 1 1))\n          ([a b]\n           (lazy-seq\n              (cons a\n                    (fs b\n                        (+ a b))))))]\n    (take n (f))))","user":"60036736e4b074f607df663b"},{"code":"(fn fibseq\n  ([n] (fibseq n 1 1 []))\n  ([n a b s]\n     (if (= n 0)\n       s\n       (recur (dec n) b (+ a b) (conj s a)))))","problem":26,"user":"4f03e7b3535dcb61093f6b7c"},{"problem":26,"code":"(fn fib-list [x]\n  (map (fn fib\n         [n]\n         (if (< n 2) n\n                     (+ (fib (- n 1)) (fib (- n 2)))))\n       (range 1 (+ x 1))))","user":"55b42706e4b01b9910ae297b"},{"code":"#(map (fn f [n] (case n 1 1 2 1 (+ (f (- n 2)) (f (- n 1))))) (range 1 (+ % 1)))","problem":26,"user":"50a6c0fbe4b0aa96157e262c"},{"problem":26,"code":"(let [fib (fn fib\n            ([] (fib 0 1))\n            ([a b] (lazy-seq (cons b (fib b (+ a b))))))\n     ]\n  #(take % (fib)))","user":"567b39b6e4b05957ce8c61a3"},{"problem":26,"code":"(fn kuche [num] (map (fn [n] (loop [a 1 b 0 counter n] (if (= 0 counter) a (recur (+ a b) a (dec counter))))) (range num)))","user":"57b167afe4b0fbc9809a2752"},{"problem":26,"code":"(fn [N]\n  (cond\n   (< N 2) '(1)\n   (= N 2) '(1 1)\n   :else (loop [cnt 2 rslt [1 1]]\n           (if (< cnt N) \n             (recur (inc cnt) (conj rslt (reduce + (take-last 2 rslt))))\n             (seq rslt)))))","user":"56197b47e4b053970a773af8"},{"code":"(fn [n]\n  (letfn [(fib [a b]\n            (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","problem":26,"user":"509e8da7e4b08df8156e9e2f"},{"code":"#(loop [n %\n        acc '[1 1]]\n  (if \n    (= n 2)  acc\n    (recur (dec n) (conj acc (+ (last acc) (last (butlast acc)))))))","problem":26,"user":"4e6aba11535d8ccf87e9feff"},{"problem":26,"code":"#(loop [n %\n        cur 1\n        fibos [1]]\n    (if (= cur n)\n      fibos\n      (recur n (inc cur) (conj fibos (apply + (take-last 2 fibos))))))","user":"5eb193fde4b00a66d4a951fe"},{"code":"(fn [n] (take n (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4daef21cedd6309eace4d169"},{"problem":26,"code":"(fn fib ([x] (fib (- x 2) '( 1 1) ))\n       ([n x] \n              (if (= n 0)  \n                        x  \n                        (fib  (dec n) (concat x [(+ (last (butlast x)) (last x) )]   )   )\n              )\n      )\n  )","user":"59a34ec9e4b066c664927d37"},{"problem":26,"code":"(fn fib [n]\n  (loop [xs [1 1] n (- n 2)]\n    (if (= n 0)\n      xs\n      (recur (conj xs (+ (last xs) (second (reverse xs)))) (dec n)))))","user":"580fbaade4b0f478707a05c0"},{"problem":26,"code":"(fn [x]\n  (loop [n 2 prvi 1 drugi 1 coll '(1)]\n    (if (> n x)\n      (sort coll)\n      (recur (inc n) drugi (+ prvi drugi) (conj coll drugi)))))","user":"5a9482b7e4b0d174b936c737"},{"problem":26,"code":"#(take % (map (fn f [x] (if (< x 2) 1 (+ (f (- x 1)) (f (- x 2))))) (range)))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"problem":26,"code":"(fn fib [x]\n  (loop [a [1 1], l (- x 2)]\n    (if (zero? l)\n      a\n      (recur (conj a (apply + (take-last 2 a))) (dec l)))))","user":"5ce52271e4b0a17bb84e2b69"},{"problem":26,"code":"#(take % \n  ((fn lazy-fib \n    ([] (lazy-fib 1 1))\n    ([a b] (cons a (lazy-seq (lazy-fib b (+ a b))))))))","user":"550615c0e4b021ccfedb9696"},{"problem":26,"code":"(fn [y]\n  (let [fibo (fn [x length]\n    (if (= length (count x))\n      x\n      (recur\n        (conj x (+ (first x) (second x))) length)\n    ) \n  )]\n  (reverse (fibo '(1 1) y))\n  )\n)","user":"5d7faa52e4b0915913b1d365"},{"problem":26,"code":"#(loop [agg '() num %]    \n   (if (== num 0)\n     agg\n     (recur (concat agg [(max (apply + (take-last 2 agg)) 1)]) (dec num))))","user":"51f38193e4b0fca5e8b48226"},{"code":"(fn [x]\n(loop [fib [1 1]]\n\t(if (= (count fib) x) fib\n\t(recur (conj fib (+ (last fib) (last (butlast fib))))))))","problem":26,"user":"521368ece4b0d32679a50659"},{"problem":26,"code":"(fn [num]\n  (take num (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"5b71ee18e4b047b03b20369b"},{"code":"#((fn [acc n a b]\n   (if (zero? n)\n    acc\n    (recur (conj acc a) (dec n) b (+ a b))))\n  [] % 1 1)","problem":26,"user":"4ead6418535d7eef3080731f"},{"code":"#(map first \n  (take % (iterate (fn [[a b]] [b (+ a b)]) \n                       [1 1])))","problem":26,"user":"4efec33f535dcb61093f6a2a"},{"problem":26,"code":"(fn [n]\n  (cond \n   (or (< n 0) (= n 0)) '()\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else \n   (reduce \n    (fn [part val] \n      (let [\n            partlen (count part)\n            x (nth part (- partlen 1))\n            y (nth part (- partlen 2))\n            ]\n        (reverse (conj (reverse part) (+ x y)))))\n    '(1 1) (range (- n 2)))\n   )\n  )","user":"5bc6ef7ce4b07a9b28b1009f"},{"code":"#(if (= 2 %2) %1 (recur (conj %1 (+ (last %1) (last (butlast %1)))) (dec %2))) [1 1]","problem":26,"user":"4f2858ece4b0d6649770a016"},{"code":"(fn [n]\n(letfn [(fib [i]\n          (if (>= 2 i)\n            1\n            (+ (fib (dec i)) (fib (- i 2)))))]\n  (map fib (take n (iterate #(inc %) 1)))))","problem":26,"user":"502f6c56e4b0842eb223d8bb"},{"problem":26,"code":"(fn [c] (loop [i 2, acc [1 1]] (if (= i c) acc (recur (inc i) (conj acc (+ (nth acc (- i 1)) (nth acc (- i 2))))))))","user":"56cad309e4b0ea9b8538f720"},{"problem":26,"code":"(fn [k] (letfn [(fib [a b]\n    (cons a (lazy-seq (fib b (+ a b)))))]\n(take k (fib 1 1))))","user":"53e76728e4b036ad0777e47c"},{"problem":26,"code":"(fn fib [n]\n\t(if (= n 1) \n\t\t'(1)\n\t\t(if (= n 2)\n\t\t\t'(1 1)\n\t\t\t(#(reverse (\n\t\t\t\tconj (reverse %) (+ (first (reverse %)) (second (reverse %))))) (fib (dec n))))))","user":"53a94b63e4b047364c044434"},{"code":"(fn fib\n\t([x] (take x (fib 1 1)))\n\t([y z] (cons y (lazy-seq (fib z (+ y z))))))","problem":26,"user":"51a89081e4b08d8ec191b814"},{"problem":26,"code":"(fn [n] (loop [a 0 b 1 x [1] n1 n] (if (= n1 1) x (recur b (+ a b) (conj x (+ a b)) (- n1 1)))))","user":"5ad6d0c9e4b0ea6055cfac11"},{"code":"(fn [x] \r\n  (loop [tempcol [1 1] cnt (- x 2) seclast 1 lstemt 1]\r\n    (if (= cnt 0)\r\n        tempcol\r\n        (recur (conj tempcol (+ lstemt seclast) )  \r\n               (dec cnt)\r\n               lstemt\r\n               (+ lstemt seclast)    \r\n                 \r\n        )\r\n      )\r\n   )\r\n)","problem":26,"user":"4ec8dc17535d6d7199dd36f7"},{"problem":26,"code":"(fn Fab\n  [n] (loop [xs [1 1] cnt 2]\n        (if (>= cnt n)\n          (take n xs)\n          (recur (conj xs (apply + (drop (- cnt 2) xs))) (+ 1 cnt)))))","user":"59e04fc7e4b08badc2a0c4e8"},{"problem":26,"code":"(fn [x]\n\t(cond \n\t\t(= x 0) []\n\t\t(= x 1) [1]\n\t\t(= x 2) [1 1]\n\t\t(> x 2) (loop [x (- x 2) fibv [1 1]]\n\t\t\t(if (zero? x)\n\t\t\t\tfibv\n\t\t\t\t(recur (dec x) (conj fibv (+ (last fibv) (last (butlast fibv)))))))))","user":"551cade8e4b07993ea3788e2"},{"code":"(fn[x] (loop[a x ans '(1 1)]\n(if(= 0 (- a 2)) (reverse ans)\n(recur (dec a)\n(conj ans (+ (first ans) (second ans)))\n))))","problem":26,"user":"4fe1279fe4b0dd6cd5ce3630"},{"problem":26,"code":"#(loop [x [1 1] n 2]\n (if (= n %)\n  x\n  (recur (conj x (+ (nth x (- (count x) 2)) (last x))) (inc n))))","user":"5f9c4113e4b0715f5002d821"},{"code":"#(loop [res [1 1]\n        n 2]\n   (if (= n %)\n     res\n     (recur (conj res (+ (res (- n 1)) (res (- n 2))))\n            (inc n))))","problem":26,"user":"4dc21233535d020aff1edf92"},{"problem":26,"code":"(fn [x]\n  (let [fib-step\n           (fn [[a b]] [b (+ a b)])]\n    (take x (map first (iterate fib-step [1 1])))))","user":"589b98fae4b00487982d533c"},{"code":"(fn [x]\n  (take x '(1 1 2 3 5 8 13 21 34)))","problem":26,"user":"4e36e647535deb9a81d77f36"},{"problem":26,"code":"(fn [x] (take x (list 1 1 2 3 5 8 13 21)))","user":"55327ad3e4b09218d5f44f7f"},{"code":"#(take %\n      ((fn fib [a, b]\n         (cons a (lazy-seq (fib b (+ a b)))))\n       1 1))","problem":26,"user":"52221b07e4b0e6a83c8925ef"},{"code":"#(take %\n  (\n    (fn rfib [a b]\n      (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1))","problem":26,"user":"4fff57f1e4b0678c553fc3fe"},{"problem":26,"code":"(fn fib\n        [fibcount]\n        (loop [prev1 1\n               prev2 1\n               sequence [1 1]\n               iterations (- fibcount 2)]\n          (let  [sequence (conj sequence (+ prev1 prev2))]\n            (if (= iterations 1)\n              sequence\n              (recur prev2 (+ prev1 prev2) sequence (- iterations 1))\n            )\n          )\n        )\n)","user":"53fe459ae4b0de5c418485f4"},{"problem":26,"code":"(fn [n]\n  (loop [ x [1 1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (nth x (- (count x) 1)) (nth x (- (count x) 2)))))\n      (seq  x))))","user":"55079757e4b021ccfedb96a9"},{"problem":26,"code":"(fn [r] (map (fn fibo [n] (case n 0 1, 1 1, (+ (fibo (dec n)) (fibo (- n 2))))) (range r)))","user":"576da825e4b0979f8965156c"},{"problem":26,"code":"#(reduce (fn f [coll iii]\n          (if (empty? coll) (list 1)\n                            (if (empty? (rest coll)) (list 1 1)\n                                                     (concat coll (list (+ (last coll) (last (drop-last coll)))))\n                                                     )\n                            )\n          )\n        '() (range %))","user":"5680fff3e4b0966858e4d8f6"},{"problem":26,"code":"#(loop [f [1 1]]\n  ( if (= % (count f))\n    f\n    (recur (conj f (+(nth f (- (count f) 2))(last f))))\n  )\n  )","user":"5e161799e4b0a047bd49f713"},{"problem":26,"code":"(fn fib [n]\n\t(take n (map first \n         (iterate \n          (fn [[c n]] \n            [n (+ c n)]) [1 1]))))","user":"5edd6eb7e4b0c7845d86b0f7"},{"problem":26,"code":"(fn fib [n]\n (cond\n    (= n 0) ()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else   (let [p (fib (dec n))\n                  r1 (reverse p)\n                  r2 (rest r1)\n                  nx (+ (first r1) (first r2))\n                 ]\n                 (concat p (list nx))\n            )\n )\n)","user":"6087cb25e4b0ae75613dced8"},{"code":"(fn [a b] \n  (take b a))\n((fn fib [a b] \n   (lazy-seq (cons a (fib b (+ a b))))) \n \t\t1 1)","problem":26,"user":"52097551e4b0e152394d76f3"},{"problem":26,"code":"(fn [n]\n  (let [arr [1, 1]]\n    (loop [res arr]\n     (if (= (count res) n)\n       res\n       (let [a (last res)\n             b (nth res (- (count res) 2))]\n        (recur (conj res (+ a b)))\n       )\n     )\n    )\n  )\n)","user":"54d35746e4b0e8a36923e606"},{"problem":26,"code":"#(map (fn fib [i] (cond (= i 0) 0\n                    (= i 1) 1\n                    (= i 2) 1\n                    (> i 2) (+ (fib (dec i)) (fib (dec (dec i)))))) (range 1 (inc %)))","user":"508fabf9e4b0ea685a20f769"},{"problem":26,"code":"(fn [x] (reverse (loop [a 1 b 1 res '(1 1)] \n    (if (= (count res) x) \n      res \n      (recur b (+ a b) (conj res (+ a b)))\n    )\n )))","user":"59a0ceeae4b0871e7608b840"},{"code":"(fn fib [n]\r\n(\r\n  if (= n 1)\r\n\t'(1)\r\n\t(if (= n 2)\r\n\t'(1 1)\r\n\t\t(concat (fib (dec n)) [(+ (last (fib (dec n))) (last (fib (- n 2))))] \r\n\t\t\t\r\n\t\t)\r\n\t)\r\n)\r\n)","problem":26,"user":"4e1582f0535d04ed9115e7e4"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [p] [(last p) (+ (first p) (last p))]) [1 1]))))","user":"4dadb5f4c9a9d6ed3399dc57"},{"problem":26,"code":"(fn [n]\n  (take n\n   \t(map \n      first \n      (iterate \n       (fn [[a,b]] [b,(+ a b)]) \n       [1 1]\n      )\n     \n    )\n  )\n)","user":"5fdb51fae4b05ac5b16ea12f"},{"problem":26,"code":"(fn [n]\n  (map second (take n \n        (iterate (fn [[x1 x2]] [x2 (+ x1 x2)]) [0 1]))))","user":"53213810e4b09d4e7a9b54b0"},{"problem":26,"code":"#(take %1\n      (map last \n           (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"5fa6db67e4b0fa27300f3dd2"},{"code":"(fn [n]\n  (loop [c 0 l []]\n    (if (= c n)\n      l\n      (if (<= c 1)\n        (recur (inc c) (conj l 1))\n        (recur (inc c) (conj l (+ (last l) (second (reverse l)))))))))","problem":26,"user":"538be6afe4b0640c7a9a58c9"},{"code":"#(map \n (fn fib \n   ([n] (if (<= n 1) 1 (+ (fib (- n 2)) (fib (- n 1))) ))\n )\n(range %))","problem":26,"user":"508fd6bae4b0ea685a20f76b"},{"code":"(fn [n]\n  (let [tf (fn [a1 a2 cn rst]\n             (if (= cn 0)\n               rst\n               (recur a2 (+ a1 a2) (- cn 1) (concat rst (list a1)))))]\n    (tf 1 1 n ())))","problem":26,"user":"516d2a46e4b06f078fab252f"},{"code":"#(take % (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","problem":26,"user":"4f954dbce4b0dcca54ed6ccd"},{"problem":26,"code":"#(loop [x 1\n        y 1\n        xs []]\n   (if (= % (count xs))\n     xs\n     (recur y (+ x y) (conj xs x)))\n   )","user":"56f7ecdfe4b08e7d20b96834"},{"code":"(fn [x] (reverse (reduce (fn [acc y] (cons (+ (first acc) (second acc)) acc)) [1 1] (repeat (- x 2) 0))))","problem":26,"user":"510c123be4b078ea7192110e"},{"problem":26,"code":"#(drop 1 (last (take % (iterate (fn [f-list] (conj f-list (+ (last f-list) (last (butlast f-list)))) )\n                          '[0 1]))))","user":"5913fde8e4b0163c97b36f13"},{"code":"#(take % ((\r\n    fn fib [o p]\r\n       (cons o (lazy-seq (fib p (+ o p))))\r\n    ) 1 1)\r\n)","problem":26,"user":"5043a536e4b034ff00315d24"},{"problem":26,"code":"#(loop [n % x 1 y [1 1]]\n  (if (= (count y) n)\n    (reverse (into '() y))\n    (recur n (inc x) (conj y (reduce + (subvec y (- (count y) 2) (count y)))))))","user":"5eba9c34e4b00a66d4a95256"},{"code":"(fn [n]\n  (reverse \n   ((fn fib [x]\n     (cond\n      (= x 1) '(1)\n      (= x 2) '(1 1)\n      :else (let [xs (fib (dec x))] (conj xs (+ (first xs) (second xs))))))\n     n)))","problem":26,"user":"5392bfdee4b0b51d73faaeb2"},{"code":"#(let [fibs '(1 1 2 3 5 8 13 21)]\r\n  (take % fibs))","problem":26,"user":"4fa58500e4b081705acca1ae"},{"code":"(fn [n]\n  (map \n   (fn fib [i]\n     (if (<= i 1)\n       i\n       (+ (fib (dec i)) (fib (- i 2))))) \n   (range 1 (inc n))))","problem":26,"user":"52de249ae4b09f7907dd13ed"},{"code":"(fn my-fib [n]\n  (loop [fibs '(1 1)]\n    (if (>= (count fibs) n)\n      (reverse fibs)\n      (recur (cons (reduce + (take 2 fibs)) fibs)))))","problem":26,"user":"5110249ae4b04c71fce993ea"},{"problem":26,"code":"#((fn [n]\n    (if (< (count n) %)\n      (recur (conj n (+ (peek n) (second (reverse n)))))\n      n)) [1 1])","user":"5e63ffa0e4b0fd0acd1586a6"},{"code":"(fn [n]\n  (cond (= n 3) '(1 1 2)\n        (= n 6) '(1 1 2 3 5 8)\n        (= n 8) '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4e1e1576535d04ed9115e806"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         ret '(1)]\n  \t(if (< i n)\n  \t     (recur \n  \t        (inc i)\n  \t        (conj ret \n  \t           (+ (first ret) (nth ret 1 0))\n  \t        )\n  \t     )\n    \t (reverse ret)\n    )\n  )\n)","user":"588b4bd0e4b05c141a25607a"},{"problem":26,"code":"(fn [i] (take i\n        (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"57aa053fe4b0b8559636fc61"},{"problem":26,"code":"(fn [n]\n  (take n\n        (->> [1 1]\n             (iterate (fn [[a b]] [b (+ a b)]))\n             (map first))))","user":"50f4eee0e4b004d36493052d"},{"problem":26,"code":"(fn fib\n  ([n1 n2 mx vc] (if (= mx 0)\n                   vc\n                   (recur n2 (+ n1 n2) (dec mx) (conj vc n2))))\n  ([mx]\n   (fib 0 1 mx [])))","user":"58a3ba31e4b02bd94d917eff"},{"problem":26,"code":"(fn [ran]\n  (map \n   (fn fib [n]\n     (if (<= n 2)\n       1\n       (+ (fib (- n 1)) (fib (- n 2)))\n       )\n     )\n   (range 1 (+ ran 1))\n   )\n  )","user":"564716e6e4b0284900eef616"},{"problem":26,"code":"(fn [x] (\n         let [\n              fib (\n                   fn fib* [a b] (\n                                  cons a (\n                                          lazy-seq (\n                                                    fib* b (+ b a)\n                                                    )\n                                          )\n                                  )\n                   )\n              ] (\n                 take x (fib 1 1)\n                 )\n         )\n)","user":"58d5359ce4b03c36ff7e5959"},{"problem":26,"code":"#(reverse (reduce (fn [v _] (conj v (+ (first v) (second v)))) '(1 1) (range (- % 2))))","user":"569a60c7e4b0542e1f8d1445"},{"problem":26,"code":"(fn [n] (map \n         (fn fib [n] (if (> n 2) (+ (fib (- n 1)) (fib (- n 2))) 1))\n         (range 1 (+ n 1))))","user":"5dc9b2c7e4b02f9375f4e1eb"},{"code":"(fn [n]\n    (reverse ((fn rev_fib [n]\n        (if (= n 2) [1 1]\n            (let [[n1 n2 & more :as all] (rev_fib(- n 1))]\n                (cons (+ n1 n2) all))\n                )) n)\n    ))","problem":26,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":26,"code":"(fn [n]\n           (loop [r [1]]\n             (if (= (count r) n)\n               r\n               (recur (conj r (apply + (take-last 2 r)))))))","user":"5ea806d5e4b00a66d4a951b9"},{"code":"(fn [n] (loop [s '(1 1)]  (if (= (count s)  n) s (recur (flatten (cons s (list (+ (last s) (last (drop-last 1 s))))))))))","problem":26,"user":"5078dedae4b08327cd804a5d"},{"problem":26,"code":"(fn fib [n]\n    (if (< n 3)\n        (case n\n            0 ()\n            1 '(1)\n            2 '(1))\n        (reverse ((fn [current-n limit prev]\n            (if (= current-n limit)\n                (conj prev (+ (first prev) (second prev)))\n                (recur (+ current-n 1) limit (conj prev (+ (first prev) (second prev)))))\n        ) 3 n '(1 1)))\n    )\n)","user":"573c4d9be4b0cd1946bd10bf"},{"problem":26,"code":"(fn fib [n]\n  (loop [x 2 f1 1 f2 1 y '(1 1)]\n   (if (= x n)\n     (reverse y)\n     (recur (inc x)\n\t\tf2\n     \t(+ f1 f2)\n     \t(conj y (+ f1 f2)))\n    )\n   )\n )","user":"58b48db1e4b0ebc645576d3e"},{"code":"(fn fib [x]\n  (loop [k 1 t 1 i 0 j 1 lista '()]\n    (if(> k x)\n      lista\n      (recur (inc k) (+ i j) j (+ i j) (concat lista (list j)) )\n    )\n  ) \n)","problem":26,"user":"4edf92f0535d10e5ff6f5341"},{"problem":26,"code":"(fn [x] \n\t(loop [c 2 l '(1 1)] \n\t\t(cond \n\t\t\t(> c x) (rseq (into [] l))\n\t\t\t(< c 3) (recur (inc c) l)\n\t\t\t:else (recur (inc c) (conj l (+ (first l) (fnext l)))))))","user":"56bdda49e4b0f26550335977"},{"code":"(fn fib [y](\n        reverse ((fn sfib [x]\n        (cond \n        (= x 0) '()\n        (= x 1) '(1)\n        (= x 2) '(1 1)'\n        :else (conj (sfib (- x 1)) (+ \n                 (first (sfib (- x 1)))\n                 (second (sfib (- x 1))))))) y)))","problem":26,"user":"4f6b1457e4b07046d9f4efa6"},{"code":"(fn f[len]\n    (cond \n\t    (= len 0) '()\n\t    (= len 1) '(1)\n\t    (= len 2) '(1 1)\n\t    :else (let [l (f (- len 1))]\n\t\t       (concat l\n\t\t\t       (list (+ (last l)\n\t\t\t\t\t(last (butlast l))))))))","problem":26,"user":"4e53bf5e535d8a8b8723a275"},{"problem":26,"code":"(fn[x] (loop[n 2\n              lst '(1 1)]\n            (if (= n x)\n            (reverse lst)\n            (recur (+ n 1) (conj lst (+ (first (rest lst)) (first lst)))))))","user":"5f727d2fe4b02876ed9fd08f"},{"problem":26,"code":"(fn [m] (loop [l '()\n               n 0]\n          (if (= n m)\n            l\n          (if (empty? l)\n            (recur (conj l 1)\n                   (+ n 1))\n            (if (= (count l) 1)\n              (recur (concat l [1]) (+ n 1))\n              (recur (concat l (list (+ (last l) (first (drop 1 (reverse l)))))) (+ n 1)))))))","user":"550bac80e4b06e50f9beb14a"},{"problem":26,"code":"(fn [cnt] (loop [seq [1 1]\n                                       stop (- cnt 2)]\n                                  (if (not (zero? stop))\n                                    (recur (conj seq (+ (last seq) (last (butlast seq)))) (- stop 1))\n                                    seq)))","user":"56018dd4e4b04bb52996e18f"},{"problem":26,"code":"(fn [x]\n  \t(loop [a   1\n           b   1\n           acc [1 1]\n           i   2]\n      (if (= i x)\n        acc\n        (recur b (+ a b) (conj acc (+ a b)) (inc i)))))","user":"544e5b22e4b0e39780006983"},{"code":"#(take % (map first (iterate (fn [[a, b]] [b,(+ a b)]) [1, 1])))","problem":26,"user":"50c0fac8e4b096f585049c34"},{"problem":26,"code":"(fn fib \n  ([n] (fib [1 1] n))\n  ([x n] \n   (\n    if (< (count x) n) \n    (fib \n     (conj x (+ (last x) (nth x (- (count x) 2)))) n\n    )\n    x\n   )\n  )\n)","user":"5d24671ce4b02ea6f0fb6a23"},{"problem":26,"code":"(fn fib\n  [n]\n  (cond \n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev (fib (dec n))]\n            (conj prev (reduce + (take 2 (reverse prev)))))))","user":"5f5358b7e4b0a0bc16850a77"},{"problem":26,"code":"(fn [n]\n  (rest (take (+ n 1) \n              (map first \n                   (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"558d7dd3e4b0277789237647"},{"problem":26,"code":"#(reduce (fn [o n] (conj o (reduce + (take-last 2 o)))) [1] (range (- %1 1)))","user":"5632e850e4b0bfe05bf117ac"},{"problem":26,"code":"(fn [x] \n  (loop [cnt x prv 0 nxt 1 fibs []]\n    (if (= cnt 0)\n    fibs\n    (recur \n     (dec cnt) \n     nxt\n     (+ prv nxt ) \n     (conj fibs nxt)))))","user":"58136dcfe4b0f478707a0610"},{"code":"(fn build-fibonacci-seq \n  ([n] (build-fibonacci-seq n (vector 1 1)))\n  ([n s]\n  (if (= (count s) n)\n    (seq s)\n\t(build-fibonacci-seq n (conj s (apply + (take-last 2 s)))))))","problem":26,"user":"52b71bd2e4b0c58976d9ad4d"},{"problem":26,"code":"(fn fibo [n]\n (take n ((fn fib [a b]\n   (cons a (lazy-seq (fib b (+ a b)))))\n  1 1)))","user":"55a161d1e4b0acc240e31511"},{"problem":26,"code":"(fn [x](loop [cnt (- x 2) lst '(1 1)](if (zero? cnt)(reverse lst) (recur (- cnt 1) (conj lst (+ (first lst) (first (rest lst) )))))))","user":"563130e4e4b0bfe05bf1178d"},{"problem":26,"code":"(fn [n]\n  (take n (map (fn fib [n] (if (< n 2) n (+ (fib (- n 2)) (fib (- n 1))))) (range 1 10))))","user":"6023a3abe4b0d5df2af22212"},{"code":"(fn [n]\n  (->> [1 1] \n    (iterate #(cons (+ (first %) (second %)) %))\n    (take (dec n))\n    last\n    reverse))","problem":26,"user":"4f7207d3e4b07046d9f4f019"},{"problem":26,"code":"(fn [count] \n  (take  count\n  (loop [x [1 1] c 0]\n  \t(if (= c 8) \n    \tx\n    \t(recur (conj x (+ (first (reverse x)) (second (reverse x)))) (inc c))\n    ))\n))","user":"5642f094e4b08d4f616f5f1f"},{"problem":26,"code":"(fn [n]\n  (\n   let [fib (fn fib* [a b] (\n                           cons a (\n                                   lazy-seq (\n                                             fib* b (+ b a)\n                                             )\n                                   )\n                           )\n             )\n        ]\n    (take n (fib 1 1))\n  )\n)","user":"5d1a92d6e4b0902706380e11"},{"problem":26,"code":"#(take % (map first(iterate (fn [[x y]] [(+ x y) x]) [1 0])))","user":"5c1e96dde4b0efcb0b05b256"},{"problem":26,"code":"(fn fib\n                     [n]\n                     (letfn [(fib [i]\n                               (if (>= 2 i)\n                                 1\n                                 (+ (fib (dec i)) (fib (- i 2)))))]\n                       (map fib (take n (iterate #(inc %) 1)))))","user":"55fb04e0e4b0f488688e0657"},{"code":"#(last (take (- % 1) (iterate (fn [a] (conj a (+ (first (reverse a)) (second (reverse a))))) [1 1])))","problem":26,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":26,"code":"#(->> (reduce\n   (fn [x _]\n     (conj x (+ (first x)\n                (second x))))\n   '(1 0) (range (dec %)))\n       reverse\n       rest)","user":"54588070e4b01be26fd74620"},{"problem":26,"code":"(fn fib [n] (loop [fib1 0 fib2 1 iter n result []]\n  (if (= iter 0)\n    result\n    (recur fib2 (+ fib1 fib2 ) (dec iter) (conj result fib2)\n  )\n  )\n\n))","user":"5f06d26ae4b0cf489e8d7f53"},{"problem":26,"code":"#(loop [x [1] r %] (if (= r 1) x (recur (conj x (reduce + (take-last 2 x))) (- r 1))))","user":"5ddd6cfae4b0948ae9d9adc4"},{"problem":26,"code":"(fn [n]\n  (loop [index 1 val 1 newVal 1 accum []]\n    (let [newAccum (conj accum val)]\n      (if (= index n)\n        newAccum\n        (recur (inc index) newVal (+ val newVal) newAccum)))))","user":"5ed3f2b9e4b016b56eae05c6"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         x 1\n         y 1\n         result '()]\n    (print result)\n    (if (= i n)\n      (reverse result)\n      (recur (inc i) y (+ x y) (conj result x))\n      )\n    )\n  )","user":"547adcb0e4b0c51c1f4d72cf"},{"problem":26,"code":"(fn fibo \n\t([n]\n\t\t(if (< n 2)\n\t\t\t[1]\n\t\t\t(fibo (- n 1) [1 1])))\n\t([n l]\n\t\t(if (> n 1)\n\t\t\t(fibo (- n 1) (conj l (+ (last l) (nth l (- (count l) 2)))))\n\t\t\tl)))","user":"56058d64e4b08b23635d3169"},{"problem":26,"code":"(fn [n]\n  (let [fnx (iterate (fn [coll]\n                       (conj coll \n                             (+  (last coll) (last (butlast coll))\n                              ))) \n                     [1 1])]\n    (last (take (- n 1) fnx))))","user":"5e84b48ee4b09a7a73c8bbc8"},{"problem":26,"code":"(fn [t]\n   (loop [d [1 1]\n          x t]\n     (if (<= x 2)\n       d\n       (recur (#(conj d (+(last d)(last (butlast d)))))\n              (dec x)))))","user":"5d6c2b80e4b04d129b00f2ae"},{"problem":26,"code":"#(take % ((fn fib2 [x y] (cons x (lazy-seq (fib2 y (+ x y))))) 1 1) )","user":"541e774de4b01498b1a71a8d"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        (map second\n             (iterate (fn [[prev curr]]\n                        [curr (+ prev curr)])\n                      [0 1]))))","user":"57d4f225e4b0bd073c2023a6"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(fib-seq [a b]\n            (cons a (lazy-seq (fib-seq b (+ b a)))))]\n    (take n (fib-seq 1 1))))","user":"55586905e4b0deb715856e2b"},{"code":"#(map (fn fib [n]\n  (if (= n 0) 0\n    (if (= n 1) 1\n    (+ (fib (- n 1)) (fib (- n 2)))))) \n       (range 1 (+ 1 %)))","problem":26,"user":"5167e4a2e4b0c5a4140a3099"},{"problem":26,"code":"#(take %2 %1) [1 1 2 3 5 8 13 21]","user":"50d0d2dde4b00b15ecee9768"},{"problem":26,"code":"(fn [nth]\n   (loop [i nth\n          fibonachi-list '(1)]\n     (if ( > i 1 )\n       (recur (- i 1)\n              (cons (+ (first fibonachi-list)\n                       (or (second fibonachi-list) 0)) \n                    fibonachi-list))\n       (reverse fibonachi-list))))","user":"59edc518e4b0966464fe6a08"},{"code":"(fn fib [x]\n  (for [_n (range x)\n        :let [n (+ _n 1)\n              _fib (fn single-fib [n]\n                     (if (or (= 1 n) (= 1 (- n 1)))\n                       1\n                       (+ (single-fib (- n 1)) (single-fib (- n 2)))))]]\n    (_fib n)))","problem":26,"user":"522d0360e4b0806774ddfef7"},{"problem":26,"code":"(fn fibonacci [n]\n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [prev (fibonacci (dec n))\n                value (reduce + (take-last 2 prev))]\n      (conj prev value))))","user":"5773f3a9e4b0979f896515f2"},{"code":"#(take %\r\n  (map first\r\n    (iterate\r\n      (fn [[a b]] [b (+ b a)]) [1 1])))","problem":26,"user":"4f2b1893e4b0d6649770a047"},{"code":"(fn fib [x]\n    (take x ((fn rfib [a b]\n                 (lazy-seq (cons a (rfib b (+ a b)))))\n               1 1)))","problem":26,"user":"52471ac0e4b05ef8e38e6354"},{"problem":26,"code":"(fn[x] (rest (map first (take (inc x) (iterate (fn [[a b]] [b (+' a b)]) [0 1])))))","user":"55b8d186e4b01b9910ae29ba"},{"problem":26,"code":";; Took me far too long. Also works for case where n < 2\n;; Also, doesn't fibonacci start with zero?\n(fn [n]\n   (if (= 0 n)\n     []\n   (loop [cnt n\n          acc [1]]\n     (if (< cnt 2)\n       acc\n       (recur (dec cnt) (conj acc (+ (last acc) (nth acc (- (count acc) 2) 0))))))))","user":"5a1f85ffe4b0ff51aa4b3284"},{"problem":26,"code":"(fn [n]\n    (->> [1 1]\n         (iterate (fn [[a b]] [b (+ a b)]))\n         (take n)\n         (map first)))","user":"53613db8e4b0243289761e41"},{"problem":26,"code":"(fn [pos] (rest (take (inc pos) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"51b1f2d4e4b02f8f128bb95f"},{"problem":26,"code":"(fn fiblist [n]\n  (loop [i n\n         fib '(1)]\n    (if (<= i 1)  ;NB: no bounds checking. TODO.\n      fib\n      (recur\n       (- i 1)\n       (concat fib\n               (list\n                (+ (last fib)\n                   (nth fib (- (count fib) 2) 0)) ; Sneaky use of not-found param of 'nth'\n                ))))))","user":"5674607ae4b05957ce8c6137"},{"code":"(fn fib [n] (take n\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","problem":26,"user":"51ed09b6e4b0bb507043158b"},{"code":"(fn fib [length]\n    (letfn [(fibs [f s]\n              (lazy-seq\n         (let [sum (+ f s)]\n                 (cons sum (fibs s sum)))))]\n      (take length (concat '(1 1) (fibs 1 1)))))","problem":26,"user":"50057f23e4b0678c553fc466"},{"code":"#(take %\n  (concat [1 1] \n    ((fn fib [n-2 n-1]\n      (lazy-seq (let [f (+ n-2 n-1)] (cons f (fib n-1 f)))))\n      1 1)))","problem":26,"user":"4dac61e18cc9d6edb9beb0b3"},{"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","problem":26,"user":"518a59b3e4b02bf06f6bbb4b"},{"code":"#(take %\n        (rest ((fn rfib [a b] \n                 (lazy-seq (cons a (rfib b (+ a b)))))\n               0 1)))","problem":26,"user":"529f5a23e4b04e0c58e87baa"},{"code":"(fn fb-lst [n]\n  (letfn [(fb [i]\n            (cond\n             (= i 1) 1\n             (= i 2) 1\n             :else (+ (fb (- i 1)) (fb (- i 2)))))]\n    (map fb (range 1 (+ n 1)))))","problem":26,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn [n]\n\t(last\n\t(take (dec n) (iterate (fn [x]\n    \t\t(conj x (+ (nth x (- (count x) 2)) (last x)))) [1 1]))))","problem":26,"user":"51794ec2e4b0684c1c981a45"},{"problem":26,"code":"(fn abc\n  (\n    [n]\n    (abc '(1 1) (- n 2))\n  )\n  (\n    [L n]\n    (if (= n 0)\n      L\n      (abc\n        (concat L (list (apply + (take 2 (reverse L)))))\n        (dec n)\n      )\n    )\n  )\n)","user":"56bb3a4be4b0f26550335951"},{"problem":26,"code":"(fn [x]\n  (let [ones (vec (repeat (min 2 x) 1))\n        fibs (fn [n xs] (if (= n x) xs (recur (inc n) (conj xs (apply + (take-last 2 xs))))))]\n    (if (< x 3) ones (fibs 2 ones))))","user":"58d71ef5e4b03c36ff7e597f"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))] (take n (fib 1 1))))","user":"5112500ee4b0350614f07a72"},{"problem":26,"code":"(fn [n] (map #(second %) (take n (iterate\n #(let [sth (second %)]\n  [sth (+ (first %) sth)])\n [0 1])))\n)","user":"549a999be4b0f3d1d8e70f6f"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1, 1]))))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":26,"code":"(fn [n]\n  ((fn helper [acc]\n    (if (= (count acc) n)\n      acc\n      (if (< (count acc) 2)\n        (helper (conj acc 1))\n        (helper (conj acc\n                      (+ (second (reverse acc)) (last acc))))))) []))","user":"5456e4e7e4b080a794c2c883"},{"code":"(fn fib [numTerms]\n  (loop [n 2 t1 1 t2 1 s [1 1]]\n    (if (>= n numTerms)\n      s\n      (let [sum (+ t1 t2)]\n        (recur (inc n) t2 sum (conj s sum))))))","problem":26,"user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn [lim]\n  (take lim (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"52cee992e4b07d0d72b27395"},{"code":"(fn fibo [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (concat (fibo (- n 1)) (list (+ (last (fibo (- n 1))) (last (fibo (- n 2))))))\n    )\n  )\n)","problem":26,"user":"4fa7ef54e4b081705acca1ca"},{"problem":26,"code":"(fn fibonacci [n]\n  (take n (map last (iterate (fn [[a b]]\n                                [b (+ a b)]) [0 1]))))","user":"5ad3d730e4b0ea6055cfabc8"},{"problem":26,"code":"(fn fibs [size]\n  (loop [fib [1 1]]\n    (if (< (count fib) size)\n           (recur (conj fib (+ (second (reverse fib)) (last fib))))\n    \t\tfib)))","user":"6033c42ce4b0d5df2af222c3"},{"problem":26,"code":"(fn [n]\n  (take n \n        (map first \n             (iterate (fn [[a b]] [b (+' a b)]) [1 1]\n                      )\n             )\n        )\n  )","user":"5ee738dee4b029a2061bbea2"},{"problem":26,"code":"(fn fibonacci [n]\n  (cond\n  \t(= n 0) '()\n \t(= n 1) '(1)\n \t(= n 2) '(1 1)\n\t:else (let [previous (fibonacci (dec n))\n                current (+ (last previous)  (nth previous (- n 3)))]\n            (concat previous (list current)))))","user":"5645a7d6e4b0284900eef608"},{"problem":26,"code":"(fn [x]\n  (take x\n            ((fn fib [a b]\n               (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"529a3c37e4b02ebb4ef75094"},{"code":"(fn firstnfib [x] (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","problem":26,"user":"5029481ee4b0b33e9bf6fdee"},{"code":"#(loop [s [1 1] cnt %] \n  (if (> cnt 2) \n      (recur \n          (conj s (+ (last s) (last(butlast s))))\n          (dec cnt))\n      s))","problem":26,"user":"4f1052b9535d64f603146418"},{"problem":26,"code":"#(->>\n   (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n   (map first))","user":"5beadeb5e4b0f319e2d7ec88"},{"problem":26,"code":"(fn [n]\n  (loop [seq [1 0]]\n    (if (>= (- (count seq) 1) n)\n      (drop 1 (reverse seq))\n      (recur (cons (+ (first seq) (second seq)) seq)))))","user":"55183a11e4b06a49daca83ca"},{"code":"(fn fibo [n]\n  ((fn ! [l nl]\n    (cond\n      (= 0 nl) l\n      :else (! (reverse\n                  (cons (+ (last l) \n                         (second (reverse l))) (reverse l)\n                ))\n               (dec nl)\n))) '(1 1) (- n 2)))","problem":26,"user":"4f22e667e4b0d66497709fdb"},{"problem":26,"code":"(fn [n]\n  (\n(fn [acc n]\n  (let [len (count acc)]\n  (if (<= n 0)\n    acc\n    (recur (if (< len 2)\n             (conj acc 1)\n             (conj acc (+ (last acc) (nth acc (- len 2)))))\n           (dec n)))))\n   []\n   n\n))","user":"53ae3e01e4b047364c044474"},{"code":"#(reduce\n   (fn [f i]\n     (if (< i 2)\n       (conj f 1)\n       (conj f (+ (nth f (- i 2)) (nth f (- i 1))))))\n   []\n   (range %))","problem":26,"user":"4f031773535dcb61093f6a5c"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a\n        (lazy-seq (fib b (+ b a)))))\n    1 1)))","problem":26,"user":"4f4ee649e4b03ad3f0c10cd4"},{"code":"#(take %((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))","problem":26,"user":"4e10a14d535d04ed9115e7c1"},{"problem":26,"code":"#(map (fn fibo [n]\n  (if (<= n 1) n \n    (+ (fibo (- n 1)) (fibo (- n 2))))) (range 1 (inc %)))","user":"549c181ce4b0f3d1d8e70f83"},{"problem":26,"code":"(fn [x]\n  (seq (loop [result [1 1] n x]\n          (if (= n 2) result\n              (recur (conj result (reduce + (take-last 2 result))) (dec n))))))","user":"57af41bce4b0fbc9809a2731"},{"problem":26,"code":"#(loop [lim 0 result '(1 1)]\n   (if (>= lim % )\n     (take lim (reverse result))\n     (recur (+ 1 lim) (conj result \n                            (+ (first result)\n                               (second result))))))","user":"50dfc83fe4b061dbdced7229"},{"problem":26,"code":"(fn get-fib [count] (take count ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","user":"55f330dde4b06e875b46ce56"},{"problem":26,"code":"(fn [n]\n   (loop [result [1 1]]\n     (if (= (count result) n)\n         result\n         (recur (conj result (+ (nth result (- (count result) 1)) (nth result (- (count result) 2))))))))","user":"57501de0e4b02ea11479926c"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate (fn [[a b]]\n                       [b (+ a b)])\n                     [1 1])))","user":"58b3388ae4b0ebc645576d1e"},{"code":"(fn f[n]\n  (loop [a 1 b 1 m 1 ff [1]]\n    (if (= m n)\n      ff\n      (recur b (+ a b) (inc m) (conj ff b)))))","problem":26,"user":"4e842ebb535db62dc21a62df"},{"code":"#(reverse ((fn fib[x] (if (= x 2) '(1 1) (let [v (fib(- x 1))\n                                             a (first v)\n                                             b (nth v 1)] \n                                           (conj v (+ a b))))) %))","problem":26,"user":"52a93d48e4b0c58976d9ac42"},{"problem":26,"code":"(fn[n]\n  (let [init '(1 1)]\n    (cond (= n 1) (rest init)\n          (= n 2) init\n          :else (loop [fib init i 2]\n                  (cond (= n i) (reverse fib)\n                        :else (recur (cons (+ (first fib) (second fib)) fib) (inc i)))))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [f (fib (- n 1))]\n      (conj f (+ (nth f (- n 3)) (nth f (- n 2)))))))","problem":26,"user":"4f65f537e4b07046d9f4ef4a"},{"problem":26,"code":"#(map first (take % (iterate (fn [[x y]] [y (+' x y)]) [1 1])))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn [n] \n  (let [fib-seq ((fn rfib [a b] \n         (lazy-seq (cons a (rfib b (+ a b)))))\n         1 1)]\n    (take n fib-seq)))","problem":26,"user":"504e7b88e4b069badc5a33ad"},{"problem":26,"code":"(fn fibArr [n] \n  (if (= n 1)\n   '(1)\n   (if (= n 2)\n    '(1 1)\n    ((fn [prev] \n     (concat prev\n      (list\n       (+ (last prev)\n        (nth prev\n         (-(count prev) 2)\n        )\n       )\n      )\n     ) \n    ) (fibArr (- n 1)))\n   )\n  )\n )","user":"57cc7d96e4b0c746388ab882"},{"code":"(fn [n]\n  (take n\n    (map first\n      (iterate (fn [[cur prev]] [(+ cur prev) cur])\n[1 0]))))","problem":26,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn fib[n]\n      (case n\n        1 '(1)\n        2 '(1 1)\n        (conj (vec (fib (- n 1))) (+ (last (fib (- n 1))) (last (butlast (fib (- n 1))))))\n             ))","problem":26,"user":"52713288e4b03e8d9a4a73e7"},{"code":"#(reverse ((fn fibs ([n x y & xs] (if (= 0 n) \n                                    (concat [x y] xs) \n                                    (apply fibs (dec n) (+ x y) x y xs)))\n         \t\t\t ([n] (fibs (- n 2) 1 1))) \n          %)\n )","problem":26,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) '[1 1]))))","user":"5dc72a9ce4b02f9375f4e1cd"},{"code":"(fn [n]\n  \n  (loop [x n l [1 1]]\n    \n    (if (< x 3) \n      l\n      (recur (dec x) (conj l (+ (last l) (last (pop l)))))\n      )))","problem":26,"user":"518d1b5be4b070277754617b"},{"problem":26,"code":"#(loop [ile % huj1 1 huj2 1 a [1 1]] (if (< ile 3) a (recur (dec ile) huj2 (+ huj1 huj2) (conj a (+ huj1 huj2))) ) )","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn fib [n] \n   (if (= n 0) []\n     (if (= n 1) [1] \n       (if (= n 2) [1 1]\n          (let [res (fib (- n 1))]\n           (conj res \n                 (+ (nth res (- n 3)) (nth res (- n 2)))))\n            ))))","problem":26,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":26,"code":"#(map (fn fib [n] (if (or (= n 0) (= n 1)) 1 (+ (fib (dec n)) (fib (dec (dec n)))))) (range %1))","user":"554d48d3e4b00713264bd988"},{"problem":26,"code":"#(take % (map first (iterate \n                       (fn [xs] [(reduce + xs) (first xs)]) \n                       [1 0])))","user":"563cdfdfe4b0bfe05bf11840"},{"code":"(fn fib [n]\n  ((fn inner-fib [currentList upTo]\n    (if (= upTo n)\n      currentList\n      (inner-fib (conj currentList (+ (last currentList)(first(take-last 2 currentList))))(+ upTo 1))\n      )\n    ) [1 1] 2)\n  )","problem":26,"user":"4f299ad8e4b0d6649770a02c"},{"problem":26,"code":"(fn fib[n]\n  \"return first n fibonacci numbers\"\n  (cond (= n 1)\n        [1] \n        (= n 2)\n        [1 1]\n        true\n       (reduce (fn[accum item] (conj accum (+ (last accum) \n                                        (nth accum (- (count accum) 2)))\n                              ))  \n        [1 1] (range (- n 2)))))\n;;; I like this solution   #(map first (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"539f9f79e4b0ca733b97449e"},{"code":"#(map\n  (fn fib [x]\n    (if (> 3 x)\n      1\n      (+ (fib (- x 1)) (fib (- x 2)))\n    )\n  )\n  (range 1 (inc %))\n)","problem":26,"user":"4eb80353535d7eef3080737c"},{"code":"(fn [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fib 1 1))\n  )\n)","problem":26,"user":"4e749e84535d7a570dd295b9"},{"problem":26,"code":"(fn fib [nbr] \n  (reverse \n    (reduce \n      (fn [lst _] (conj lst ( + (first lst) ((comp first rest) lst) ) ))  \n      '(1 1)\n      (range (- nbr 2))\n    )\n  )\n)","user":"528b3f5ae4b0239c8a67ae93"},{"problem":26,"code":"(fn [n]\n    (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n      (take n (fib 1 1))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":26,"code":"(fn [n] (reverse (nth (iterate #(conj % (apply + (take 2 %))) '(1 1)) (- n 2))))","user":"5e9b7aefe4b0157ca96647f1"},{"problem":26,"code":"(fn [n & fibs]\n  (if (= n 0) fibs\n    (if (nil? fibs) (recur (dec n) [1])\n    \t(recur (dec n) (conj fibs (reduce + (take-last 2 fibs)))))))","user":"58c66990e4b021aa9917ed53"},{"code":"(fn foo [n] (case n 1 '(1) 2 '(1 1) \n(let [z (foo (- n 1))] (concat z (list (+ (nth z (- n 3)) (last z)))))\n))","problem":26,"user":"52cc92e9e4b07d0d72b27368"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 e1 0 e2 1 result []]\n    (let [current (+ e1 e2)\n          new-result (conj result e2)]\n      (if (= i n)\n        new-result\n        (recur (inc i) e2 current new-result)))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":26,"code":"(fn fib\n  ([n] (fib [1 1] 1 n))\n  ([lst i n]\n  \t(if (= i n)\n      (butlast lst)\n      (fib (conj lst (+ (last lst) (second (reverse lst)))) (inc i) n))))","user":"5e6ff368e4b04a83ad7cd2a8"},{"problem":26,"code":"(fn fib [n]\n  (take n (->> (iterate (fn [[a b]] [(+ a b)\n                                      (+ a b b)]) \n                        [1 1])\n               (apply concat))))","user":"5e856736e4b09a7a73c8bbd2"},{"problem":26,"code":"(fn [n] \n \t(->> [1 1]\n         (iterate (fn [[a b]] [b (+ a b)]))\n         (map first) \n         (take n)))","user":"5592bf9fe4b0c79f6e1db933"},{"code":"(fn first-fib\n  [n]\n  (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n)","problem":26,"user":"53951c75e4b0b51d73faaed4"},{"problem":26,"code":"(fn [x] \n  (let [iter (fn iter [i f] \n               (let [[a b] (reverse f)] \n                 (if (> i x) \n                   f \n                   (iter (inc i) (conj f (+ a b))))))] \n    (cond \n     (= x 1) [1] \n     (= x 2) [1 1] \n     :else (iter 3 [1 1]))))","user":"5ee09da9e4b029a2061bbe6f"},{"problem":26,"code":"#(map (fn fib [n]\n        (cond\n         (= n 0) 1\n         (= n 1) 1\n         :else (+ (trampoline fib (- n 1))\n                  (trampoline fib (- n 2)))))\n      (range %))","user":"57dda21be4b0bd073c202445"},{"problem":26,"code":"(fn fib\n  ([nums]\n     (fib '(1 1) (- nums 2)))\n  ([fib-list nums]\n     (if (= nums 0)\n       (reverse fib-list)\n       (fib (conj fib-list (+ (first fib-list) (nth fib-list 1)))\n            (dec nums)))))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [x]\n  ((fn [n pp p l]\n    (if (= n 0) (reverse (conj l pp p))\n(recur (- n 1) p (+ p pp) (conj l pp))))\n(- x 2) 1 1 '()))","problem":26,"user":"4ed2b168535d44c135fd68dd"},{"problem":26,"code":"(fn fib\n  ([n] (fib n [1 1]))\n  ([n v] \n    (if (= (count v) n) \n      (lazy-seq v)\n      (recur n (conj v (apply + (take-last 2 v))))\n    )\n  )\n)","user":"5cc1584de4b0ccb0619627ad"},{"problem":26,"code":"(fn [len]\n   (reverse (loop\n       [i 0 fib '(1 1)]\n     (if (< (count fib) len)\n       (recur (inc i) (conj fib (+ (first fib) (second fib) )))\n       fib\n       )\n   )))","user":"604ccb9fe4b0b7ec0ac60ac1"},{"problem":26,"code":"#(rest (take (inc %)\n            ((fn rfib [a b] \n               (cons a (lazy-seq (rfib b (+ a b)))))\n             0 1)))","user":"568a13eae4b0dcc4269f4089"},{"problem":26,"code":"#(map (fn [n] (loop [a 0 b 1 i n] (if (zero? i) a (recur b (+ a b) (dec i))))) (range 1 (+ 1%)))","user":"555b43dfe4b0deb715856e4d"},{"problem":26,"code":"#(reverse ((fn fib [x] (if (< x 3) [1 1] (let [[f1 f2 & fs :as f] (fib (- x 1))] (cons (+ f1 f2) f)))) %))","user":"60067b71e4b074f607df6655"},{"problem":26,"code":"(fn [num] (reduce #(cond (= %2 0) [1] (= %2 1) [1 1] :else (conj %1 (+ (%1 (- %2 1)) (%1 (- %2 2))))) [] (range num)))","user":"560e9a2de4b05f002753df52"},{"problem":26,"code":"#(loop [a 1 b 1 c 1 arr [1]] \n  (if (= c %1)\n    arr\n    (recur b (+ a b) (inc c) (conj arr b))\n  )\n)","user":"5651654be4b0f9d632dd845a"},{"problem":26,"code":"#(take % \n      ((fn fib\n ([] (fib 1 1))\n ([a b] \n     (cons \n      a \n      (lazy-seq \n       (fib b (+ a b))))))))","user":"55fe5dfae4b00f4cabc57650"},{"problem":26,"code":"#(loop [limit %1 out [1 1] penultimate 1]\n  (if (= limit 2)\n    out\n    (recur (- limit 1) (conj out (+ (last out) penultimate) ) (last out))\n    )\n  )","user":"55664334e4b0c656e3ff182e"},{"code":"(fn [x] (reverse (nth (iterate #(cons (+ (first %) (fnext %)) %) '(1 1)) (- x 2))))","problem":26,"user":"4f4fac2ae4b03ad3f0c10ce5"},{"code":"#(take % (map first (iterate (fn[x] [(apply + x) (first x)]) [1 0])))","problem":26,"user":"52419ee6e4b076e5d3121f22"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn inner-fib [n]\n    \t\t  (if (< n 2) \n      \t      1\n      \t\t  (+ (inner-fib (dec n)) (inner-fib (- n 2)))))]\n       (map fib (range n))))","user":"5dc6e7f9e4b02f9375f4e1ca"},{"code":"(fn fibs [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4e2608d6535deb9a81d77ef1"},{"problem":26,"code":"(fn [num]\n  (rest \n   (nth (iterate\n         (fn [c] (conj c (apply + (take-last 2 c))))\n         [0 1 ])\n        (dec num))))","user":"554b8b78e4b0a04f7929958d"},{"problem":26,"code":"(fn [n]\n  (loop [num n\n         coll [1]]\n    (cond \n      (= num 1) coll\n      :else (recur (dec num)\n                   (let [n1 (last coll)\n                         n2 (if (= 1 (count coll))\n                              0\n                              (nth coll (- (count coll) 2)))]\n                     (conj coll (+ n1 n2)))))))","user":"56478a82e4b0284900eef61e"},{"problem":26,"code":"(fn [z](map first (take z (iterate (fn [[a b]] [b, (+ a b)])  [1 1]))))","user":"54aa665fe4b09f271ff37cb8"},{"problem":26,"code":"(fn  [n]\n        (reverse\n        (cond\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          :else (loop [xs '(1 1) n (- n 2)]\n                  (if (= n 0)\n                    xs\n                    (recur (conj xs (+ (first xs) (second xs))) (dec n)))))))","user":"557c647ce4b05c286339e0c3"},{"code":"#(take %1 (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f2ef48be4b0d6649770a06c"},{"code":"#(reverse (nth (iterate (fn [[f s & r :as a]] (cons (+ f s) a)) [1 1]) (- % 2)))","problem":26,"user":"53908e6be4b0b51d73faae9a"},{"code":"(fn [n]\n  (take n (\n  (fn fib\n  ([] (fib 0 1))\n  ([a b] (lazy-seq (cons b (fib b (+ a b))))))\n)))","problem":26,"user":"4daf4d2fedd6309eace4d178"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [ 1 1])))","user":"5da7176ae4b000c986472c13"},{"code":"(fn [x]\n  (loop [acc '(1) n 1 i 1]\n    (if (= i x)\n      (reverse acc)\n      (recur (conj acc n) (+ (first acc) n) (inc i)))))","problem":26,"user":"51757af0e4b085adf681d873"},{"problem":26,"code":"(fn [x]\n  (loop [i 1\n         j 1\n         result [i]\n         remaining (dec x)]\n    (if (zero? remaining)\n      result\n      (recur j (+ i j) (conj result j) (dec remaining)))))","user":"51d46747e4b013d740b70de3"},{"code":"#(loop [i % f '(1 0)]\n     (if (<= i 1) (rest (reverse f))\n         (recur (dec i) (cons (+ (first f) (second f)) f ))))","problem":26,"user":"4ea4e98a535d7eef308072ce"},{"code":"(fn [x] \n  (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4e5fb634535d8ccf87e9fe4a"},{"problem":26,"code":"(fn [no-of-terms]\n   (if (< no-of-terms 2)\n     (if (= no-of-terms 1)\n        '(1)\n         nil\n     )\n     (\n       (fn fib [fiblist]\n\t  (if (> (count fiblist) (dec no-of-terms))\n    \t   (reverse fiblist)\n\t     (fib (conj fiblist (+ (first fiblist) (second fiblist))))\n\t  )\n       )\n       '(1 1)\n      )\n    )\n)","user":"55c387e4e4b0e31453f6498b"},{"code":"(fn fibs \n  ([n] (fibs [] 1 1 n))\n  ([xs a b n] (if (zero? n)\n                xs\n                (recur (concat xs (list a)) b (+ a b) (dec n)))))","problem":26,"user":"52d660eae4b09f7907dd1356"},{"problem":26,"code":"(fn [n]\n  (rest (take (inc n)\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"56f1b558e4b04a395b9a049a"},{"problem":26,"code":"(fn [n]\r\n  (let [fib-seq (fn fib-seq [n]\r\n                  (cond\r\n                    (>= 0 n) 0\r\n                    (= n 1) 1\r\n                    (= n 2) 1\r\n                    :else   (+ (fib-seq (- n 1))\r\n                               (fib-seq (- n 2)))))]\r\n    (reduce (fn [acc n] (conj acc\r\n                              (fib-seq n)))\r\n            []\r\n            (range 1 (inc  n)))))","user":"5f5396d4e4b0a0bc16850a79"},{"code":"(fn [n]\n  (take n\n    (map\n      first\n        (iterate\n          (fn [[a b]]\n            [b (+ a b)]) [1 1]))))","problem":26,"user":"523de33de4b06956f8342ca8"},{"problem":26,"code":"(fn [i]\n  (take i\n        (map first\n             (iterate\n              (fn [vec]\n                [(+ (first vec)\n                    (second vec))\n                 (first vec)])\n              [1 0]))))","user":"607b04e5e4b0a637ed780373"},{"problem":26,"code":"(fn [times] (loop [out [1 1]] (if (< (count out) times) (recur (#(conj % (reduce + (take-last 2 %))) out)) out)))","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn [n]\n  (loop [n n\n         x 1\n         y 1\n         res '()]\n    (if (> n 0)\n      (recur (dec n)\n             y\n             (+ x y)\n             (conj res x))\n      (reverse res))))","problem":26,"user":"52ce4cafe4b07d0d72b2738e"},{"problem":26,"code":"(fn [fibNum] \n\t (loop [fibIterIndex 1 actualFib 1 nextFib 1 fibListAccu [] ] (\n       let [extendedFibList (conj fibListAccu actualFib)] (\n       if (= fibIterIndex fibNum)\n            extendedFibList\n            (recur (inc fibIterIndex) nextFib (+ actualFib nextFib) extendedFibList)\n       )))\n)","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn [n]  \n (let [f (fn fibr[n] (cond\n            \t(= n 0) '()\n            \t(= n 1) '(1)\n            \t(= n 2) '(1 1)\n            \t:default (let [prev (fibr (- n 1))]\n                                            (cons \n                               \t\t\t\t\t(+ \n                                \t\t\t\t\t(first prev)\n                                                 \t(second prev)\n                                                 ) \n                          \t\t\t\t\t\t prev\n                                             );cons\n                          );let\n                            ) ;cond                                   \n                  \n             );fn\n        lst (f n)\n  \t] \n    (reduce (fn [acc,el] (cons el acc)  ) '() lst)\n   ) ;let\n ) ;fn","problem":26,"user":"4fb03cf4e4b081705acca262"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(fib-gen [a b] (cons a (lazy-seq (fib-gen b (+ a b)))))]\n    (take n (fib-gen 1 1))))\n\n;(fn [n]\n;  (loop [result [1 1]]\n;    (if (<= n (count result))\n;      (take n result)\n;      (recur (conj result (apply + (take-last 2 result)))))))","user":"5d27da09e4b092dab7f59c75"},{"code":"(fn [n]\n  (->>\n   (reduce\n    (fn [xs i]\n      (if (<= i 1)\n        (conj xs 1)\n        (let [n-1 (last xs)\n              n-2 (last (butlast xs))]\n          (conj xs (+ n-1 n-2)))))\n    []\n    (range 0 n))\n   reverse\n   (into '())))","problem":26,"user":"511688d5e4b0b3e208dba05a"},{"problem":26,"code":"(fn [upto]\n  (loop [seq [1 1]\n         pre-last 1]\n    (if (= upto (count seq))\n      seq\n      (recur\n        (conj seq (+ pre-last (last seq))) (last seq))        \n        )))","user":"587cebf3e4b01531a375eb28"},{"problem":26,"code":"(fn [quantity]\n  (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n    (take quantity (fib 0 1))))","user":"5f0e32a1e4b0f30dddfb5d59"},{"code":"(fn [n] (last (take (dec n) (iterate #(reverse (cons (reduce + (take 2 (reverse %))) (reverse %))) '(1 1)))))","problem":26,"user":"4f0397ee535dcb61093f6b30"},{"code":"#(take % (map first \r\n  (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f9970b3e4b0dcca54ed6cfd"},{"problem":26,"code":"#(take % ((fn fib\n             ([]\n              (fib 1 1))\n             ([a b]\n              (lazy-seq (cons a (fib b (+ a b))))))))","user":"5c87217de4b0c8042a70cea1"},{"code":"#(case %\n   0 '()\n   1 '(1)\n   (reverse\n    (loop [fib '(1 1) counter (- % 2)]\n      (if (zero? counter)\n        fib\n        (recur (cons (+ (first fib) (second fib)) fib) (dec counter))))))","problem":26,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":26,"code":"(fn fib ([n] (if (< n 1) 1 (fib [] n)))\n  ([y z]\n   (loop [l 0 n 1 r y c z]\n     (if (= 0 c)\n       r\n       (recur n (+ l n) (conj r n) (dec c))))))\n\n; Like this solution\n;\n; #(take % (map (fn fib [n] (if (< n 2) n (+ (fib (- n 2)) (fib (- n 1))))) (range 1 10)))","user":"5eccc5c2e4b016b56eae058f"},{"problem":26,"code":"(fn [n]\n  (flatten (conj\n             ((fn r [a b x]\n                (if (> x 1)\n                  (conj (r b (+ a b) (dec x)) (list (+ a b)))\n                  (list (+ a b)))) 1 1 (- n 2))\n            '(1 1))))","user":"553c4614e4b09218d5f45014"},{"problem":26,"code":"(fn fib [n]\n  (take n [1 1 2 3 5 8 13 21]))","user":"505223fae4b0a561d07d8f17"},{"code":"(fn [x] (take x((fn rfib [a b] \n  (lazy-seq (cons a (rfib b (+ a b)))))\n1 1)))","problem":26,"user":"50838c06e4b0902986d69e0f"},{"problem":26,"code":"(fn fibo [n]\n  (letfn [\n          (fibo-helper [n rsf]\n                       (cond \n                        (<= n (count rsf)) (take n rsf)\n                        :else (let [\n                                    x1 (last rsf)\n                                    x2 (last (butlast rsf))\n                                    ]\n                                (fibo-helper n (concat rsf (list (+ x1 x2)))))))]\n                                \n    (fibo-helper n [1 1])))","user":"55e357dae4b050e68259b442"},{"problem":26,"code":"(fn [limit]\n (take limit \n  ((fn fib [a b]\n   (cons a (lazy-seq (fib b (+ a b)))))\n   1 1\n  )\n )\n)","user":"5df39a6fe4b03c219ef1a36d"},{"code":"(fn [n] (reduce (fn [x y] (conj x (let [rev (reverse x)] (+ (first rev) (second rev))))) [1 1] (repeat (- n 2) 1))\n)","problem":26,"user":"4f65eec7e4b07046d9f4ef48"},{"problem":26,"code":"(fn\n   [n]\n   (loop [fib-numbers [1 1]\n          size 2]\n     (if (= n size)\n       (seq fib-numbers)\n       (recur (conj fib-numbers\n                    (+ (nth fib-numbers (- size 2))\n                       (nth fib-numbers (- size 1))))\n              (inc size)))))","user":"562fb774e4b0ab312c17ebd9"},{"problem":26,"code":"(fn[n]\n  (if (or (= n 1) (= n 2))\n    1\n    (loop [a 0 b 1 counter 1 fibs []]\n      (if (= counter n)\n        (conj fibs b)\n        (recur b (+' a b) (inc counter) (conj fibs b))  ; the ' forces it to do bigint comparisons otherwise you get an int overflow exception\n        )\n      )\n\n    )\n  )","user":"54bd17f7e4b0ed20f4ff6eda"},{"code":"(fn [n]\n  (loop [res [] i 0 a 1 b 1]\n    (if (= i n) res\n      \t(recur (conj res a) (inc i) b (+ a b)))))","problem":26,"user":"50fc299ee4b0d10d794c19f2"},{"code":"#(loop [n (- % 2), res [1 1], a 1, b 1]\n   (if (zero? n)\n     res\n     (recur (dec n) (conj res (+ a b)) b (+ a b))))","problem":26,"user":"52b405e1e4b0c58976d9ad15"},{"problem":26,"code":"(fn fibcount [n]\n   (let [fib (fn fib [n]\n               (if (<= n 2)\n                 1\n                 (+ (fib (- n 1)) (fib (- n 2)))))]\n     ((fn dofib [i]\n        (if (= n i)\n          (list (fib i))\n          (conj (dofib (inc i)) (fib i) )))\n       1)))","user":"53aaaf7ae4b047364c044444"},{"problem":26,"code":"(fn [x]\n(let\n[fib-step\n(fn [coll]\n (conj coll\n  (apply +\n   (take-last 2 coll))))\n    \n fibs\n  (fn [n]\n   (last\n    (take n\n     (iterate fib-step [1])\n    )))]\n \n (fibs x)))","user":"510608ebe4b01150e115ebe3"},{"problem":26,"code":"(fn [x]\n  (loop [cnt x\n         result '(1 1)]\n    (if (= 2 cnt)\n      (reverse result)\n      (recur (dec cnt) (conj result (+ (first result) (second result))))\n      )))","user":"59175adde4b09b4ee5954b9a"},{"code":"(fn [x]\n  (map first (take x (iterate #(vector (second %1) (+ (first %1) (second %1))) [1 1]))))","problem":26,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"(fn [n]\n  (take n\n        ((fn fib[x y]\n           (cons x (lazy-seq (fib y (+ x y))))) 1 1)))","problem":26,"user":"51f2851fe4b0210f90e7454b"},{"code":"(fn fib [x]\r\n  (loop [ls '(1 1) i (- x 2)]\r\n    (if (zero? i)\r\n      (reverse ls)\r\n      (recur (cons (+ (first ls) (second ls)) ls) (dec i)))))","problem":26,"user":"4fe1597fe4b0dd6cd5ce3633"},{"problem":26,"code":"(fn [x]\n  (let [fibs (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))]\n    (take x fibs)))","user":"5565f616e4b0c656e3ff1823"},{"problem":26,"code":"(fn [x]\n   (loop [x x res []]\n     (if (= x 0) (apply list res) \n                 (do (println (str \"X: \" x \" Res: \" res))\n                     (println (str \"Prvi sabirak: \" (nth res (- (count res) 1) 1) \" Drugi sabirak: \" (nth res (- (count res) 2) 0)))\n                     (recur (- x 1)\n                            (conj res\n                                  (+\n                                    (nth res (- (count res) 1) 1)\n                                    (nth res (- (count res) 2) 0)))))\n                 )))","user":"5a0a1748e4b0eab8c0448937"},{"problem":26,"code":"(fn [n] \n  (loop [i 2 r [1 1]]\n\t(if (>= i n)\n\t\tr \n  \t\t(recur (inc i) (conj r (+ (last r) (last (butlast r)))))\n    )\n )\n)","user":"53f152bce4b0742d9025b0dc"},{"code":"(fn [x]\n  (letfn [(fib [i]\n               (if (>= 2 i)\n                 1\n                 (+ (fib (- i 1)) (fib (- i 2)))))]\n  (map fib (range 1 (inc x)))\n  ))","problem":26,"user":"514066e3e4b076604f1aa553"},{"code":"#(\n  (fn r [l n]\n    (if (> n 2)\n      (r \n        (conj l (+ (last l) (last (butlast l))))\n        (dec n))\n    l))\n  [1 1]\n  %)","problem":26,"user":"50c4a354e4b0210b849018af"},{"problem":26,"code":"(fn [x]\n   (letfn [(fib [n current prev-two seqs]\n             (if (= current n)\n               seqs\n               (let [[f s] prev-two\n                     new-i (+ f s)]\n                 (prn new-i)\n                 (fib n (inc current) [s new-i] (conj seqs new-i)))))]\n     (fib x 1 [0 1] [1])))","user":"57689c23e4b0a07e8fc180d6"},{"code":"#(loop [out '() c %] \n  (if (= c 0) \n    out \n    (recur \n      (if (< (count out) 2) \n        (concat out [1]) \n        (concat out [(+ (nth out (- (count out) 2)) (last out))])\n      ) \n      (- c 1)\n    )\n  )\n)","problem":26,"user":"4f75f498e4b0fbe0118ec567"},{"problem":26,"code":"#(loop[n %, c 0, l '()]\n   (cond\n    (= c n) (reverse l)\n    (= c 0) (recur n (inc c) (conj l 1))\n    (= c 1) (recur n (inc c) (conj l 1))\n    :else   (recur n (inc c) (conj l (+ (first l) (second l))))))","user":"55fd9dffe4b07755b13145fa"},{"code":"(fn fib\n    ([x] (if (= x 0) [] (fib x [1])))\n    ([x nums] (if (< (count nums) x) (fib x (conj nums (apply + (take-last 2 nums)))) nums)))","problem":26,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":26,"code":"(fn [n]\n                   (letfn [(f ([] (concat '(1 1) (f 1 1)))\n                             ([a b] (lazy-seq (cons (+ a b) (f b (+ a b))))))]\n                     (take n (f))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"#(loop [x 0\r\n         res []]\r\n  (if (= x %) \r\n    (apply list res)\r\n    (recur   (inc x)\r\n             (conj res \r\n                   (if (or (= x 0) (= x 1))\r\n                   1\r\n                   (+ (last res) (nth res (- (count res) 2)))\r\n                   )))))","problem":26,"user":"4ee6166e535d93acb0a66854"},{"problem":26,"code":"#(loop [result [1 1] init 2]\n  (if (>= (count result) %)\n    result\n    (recur (conj result (+ (nth result (- init 1)) (nth result (- init 2)))) (inc init))))","user":"55a0d79fe4b0acc240e31502"},{"code":"#(loop [s []\n        c 1\n        l1 0\n        l2 0]\n    (if (= % (count s))\n      s\n      (recur (conj s c) (+ c l1) c l1)))","problem":26,"user":"532df9c5e4b019098a6f8b42"},{"problem":26,"code":"(fn \n  [x] \n  (map first \n     (take x \n           (iterate \n              (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5f5e166ce4b02876ed9fcfed"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 result [1]]\n      (if (= n (count result)) result\n                            ( recur (last result) (conj result (+ i (last result)))))))","user":"556358c6e4b0c656e3ff17ea"},{"problem":26,"code":"(fn [n]\n  (loop [acc '(1)]\n\t(if (= n (count acc))\n      (reverse acc)\n      (recur (conj acc (apply + (take 2 acc)))))))","user":"54570dfae4b080a794c2c889"},{"code":"(fn [n]\n  (loop [acc '(1 1)]\n    (if (= (count acc) n)\n      acc\n      (let [v (apply + (take-last 2 acc))]\n        (recur (concat acc [v]))))))","problem":26,"user":"4fba7d1ee4b081705acca2e0"},{"problem":26,"code":"(fn[n](reduce (fn[coll _](conj coll (+ (-> coll reverse first) (-> coll reverse second)))) [1 1] (take (- n 2) (range))))","user":"5e29cb4ce4b05b4b015161ae"},{"code":"(fn [x & fiblist]\n  (if (= x 0) (reverse fiblist)\n    (if (empty? fiblist) (recur (dec x) '(1))\n      (if (empty? (rest fiblist)) (recur (dec x) (conj fiblist 1))\n        (recur (dec x) (conj fiblist (+ (first fiblist) (first (rest fiblist)))))))))","problem":26,"user":"5306e4b4e4b02e821686979d"},{"code":"(fn fib [n]\n  (if (< n 3)\n      [1 1]\n      (let [thisfib (fib (- n 1))]\n       (println thisfib)\n       (into thisfib [(+ (last thisfib) (last (butlast thisfib)))])\n      )\n  )\n)","problem":26,"user":"52ac41fee4b0c58976d9ac85"},{"code":"(fn [n]\n  (let [helper (fn [index a b accu]\n    (if (= index n)\n      (reverse accu)\n      (let [new-a (+ a b)\n            new-b a\n            new-accu (conj accu b)]\n        (recur (+ 1 index) new-a new-b new-accu))))]\n   (helper 0 1 1 ())))","problem":26,"user":"5052f384e4b0a561d07d8f25"},{"problem":26,"code":"(fn fib [iterCount]\n        (loop [result [1 1]]\n          (if (>= (count result) iterCount)\n            result\n            (recur (conj result (+ (last result) (last (butlast result))))))))","user":"5e692be9e4b04a83ad7cd269"},{"problem":26,"code":"(fn [x]\n   (loop [list '()\n          f1 0\n          f2 1\n          n x]\n     (let [f3 (+ f1 f2)]\n       (if (pos? n)\n         (recur (cons f2 list) f2 f3 (dec n))\n         (reverse list)))))","user":"56669819e4b0e91d5f5c5674"},{"problem":26,"code":"(fn \n  [s] \n  (map (fn fib [n]\n        (cond \n         (= 0 n) 1\n         (= 1 n) 1\n         :else (+ (fib (- n 2)) (fib(dec n)) ))) (range s))\n  )","user":"582cbf48e4b051871117bfa6"},{"problem":26,"code":"(fn foo [n]\n    (loop [i n result []]\n        (if (> i 0)\n            (recur (dec i)\n                (if (> (count result) 1)\n                    (conj result\n                        (+ (last result) (second (reverse result))))\n                    (conj result 1))\n            )\n            (seq result))\n    ))","user":"5b0546eae4b0cc2b61a3bd7e"},{"problem":26,"code":"(fn fib                                                                                                                  \n  ([n] (take n (fib 1 1)))                                                                                               \n  ([a b] (cons a (lazy-seq (fib b (+ a b))))))","user":"56488119e4b0284900eef632"},{"code":"(fn fibonacci [n] (take n (map first (iterate (fn [v] [(v 1) (+ (v 1) (v 0))]) [1 1]))))","problem":26,"user":"519697a2e4b04c0af7ff3c21"},{"code":"(fn [x] (loop [fiblst '(1)\n               fib2 1\n               number (- x 1)] \n          (if (zero? number)\n            (reverse fiblst)\n            (recur (conj fiblst fib2) (+ (first fiblst) fib2) (- number 1)))))","problem":26,"user":"51da5552e4b02ceefd947764"},{"code":"#(take % ((fn fac [] (cons 1 (cons 1 (lazy-seq (map + (fac) (rest (fac)))))))))","problem":26,"user":"52bad920e4b07a9af57922d7"},{"code":"(fn [to]\n  \t(map (fn fib [a]\n\t\t\t(if (<= a 2)\n\t\t\t\t1\n\t\t\t\t(+ (fib (- a 2)) (fib (- a 1)))))\n\t\t\t(range 1 (+ to 1))))","problem":26,"user":"4e6a5bbe535d8ccf87e9fed1"},{"problem":26,"code":"#(loop [fib-list [1 1] i %]\n  (if (= i 2)\n    fib-list\n    (recur (conj fib-list (apply + (take-last 2 fib-list))) (dec i))))","user":"560d4994e4b05f002753df3c"},{"problem":26,"code":"(fn [n] (loop [k 2 seq '(1 1)]\n              (if (>= k n) (reverse seq)\n              (recur (inc k)\n                     (conj seq (+ (first seq) (first (rest seq))))))))","user":"5acbb7afe4b0e27600da77ff"},{"problem":26,"code":"#(loop [n % a 1 b 1 x []] (if (zero? n) x (recur (dec n) b (+ a b) (conj x a))))","user":"5799ff45e4b05b1deef9add1"},{"problem":26,"code":"#(take % ((fn myFib [x y]\n           (lazy-seq (cons x (myFib y (+ x y)))))\n       1 1))","user":"57f8ba80e4b0d3187e90092f"},{"code":"#(loop [a 1\n       b 1\n\t   acc []]\n  (if (= (count acc) %)\n    acc\n\t(recur b (+ a b) (conj acc a))))","problem":26,"user":"514a13cee4b0829bd132edb4"},{"problem":26,"code":"(fn [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [(+ a b) a]))\n       (map second)\n       (take n)))","user":"604a30c6e4b02d28681c77f0"},{"code":"(fn fib-seq [n]\n  (take n ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","problem":26,"user":"51d8f711e4b02ceefd947748"},{"code":"(fn [n] (\n  loop [n n\n        f1 0\n        f2 1\n        y []] (\n    if (= 0 n)\n     y\n     (recur (- n 1) f2 (+ f1 f2) (conj y f2))\n)\n)\n)","problem":26,"user":"4ee88f29535d93acb0a66882"},{"code":"(fn [arg]\n  (loop [n arg, coll [1 1], a 1, b 1]\n    (if (= n (count coll))\n      coll\n      (recur n (conj coll (+ a b)) b (+ a b)))))","problem":26,"user":"50a83794e4b054305ba5a831"},{"problem":26,"code":"(fn [x] (take x (loop [lst [1, 1] coll [1, 1] n 1] (if (= n x) lst (recur (conj lst (+ (first coll) (last coll))) [(last coll) (+ (first coll) (last coll))] (inc n))))))","user":"5df08767e4b093ff717275bf"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ b a)))))]\n    (take n (fib 1 1))))","user":"57f7c74ee4b0d3187e900902"},{"problem":26,"code":"(fn [n] (seq (nth (iterate #(conj % (+ (last %) (second (reverse %)))) [1 1]) (- n 2))))","user":"53d86564e4b0e771c302546b"},{"problem":26,"code":"(fn f [n] (map (fn fib [n] (if (= n 0)\n                             1\n                             (if (= n 1)\n                               1\n                               (+ (fib (- n 1)) (fib (- n 2)))\n                               )\n                             )\n                 )\n               (range n)\n               )\n  )","user":"595930f6e4b066ee0a44af9c"},{"code":"(fn [i]\n  (loop [s [0 1]]\n    (if (< (count s) (inc i))\n      (recur (conj s (reduce + 0 (take-last 2 s))))\n      (take-last i s))))","problem":26,"user":"50b81a93e4b0cba0e598b64b"},{"problem":26,"code":"(fn fib \n   ([n] \n    (take n (fib 1 1)))\n   \n   ([a b] \n    (cons a (lazy-seq b (fib b (+ a b)))))\n)","user":"55e06f82e4b050e68259b40d"},{"problem":26,"code":"(fn problem-26 [n]\n  (letfn [(fib [n]\n      (cond (= n 0) 0\n            (= n 1) 1\n            :else (+ (fib (dec n)) (fib (-> n dec dec)))))]\n    (map fib (range 1 (inc n)))))","user":"59362afee4b0d6bb3c60df69"},{"problem":26,"code":"#(loop [count (- % 2)\n        n1 1\n        n2 1\n        r [1 1]]\n   (if (zero? count)\n     r\n     (recur (dec count)\n            n2\n            (+ n1 n2)\n            (conj r (+ n1 n2)))))","user":"54a627bce4b09f271ff37c83"},{"code":"#(take %\n  (map last\n    (iterate (fn [[n_1 n_2]] [n_2 (+ n_1 n_2)]) [0 1])))","problem":26,"user":"4eb41884535d7eef3080735d"},{"code":"(fn [x] (take x ((fn fib [n1 n2] (lazy-cat [n1] (fib n2 (+ n1 n2)))) 1 1)))","problem":26,"user":"524e8ee6e4b0541d1855b7e2"},{"code":"#(take % (map (fn fib [x] (if (= x 0) 0  (if (= x 1) 1  (+ (fib (- x 1)) (fib (- x 2))) )))  (iterate inc 1) ) )","problem":26,"user":"4e78c208535db95036265722"},{"problem":26,"code":"(fn fib [ct]\n  (cond\n    (= ct 1) [1]\n    (= ct 2) [1 1]\n    :else (loop [vsf [1 1] ctd (- ct 2)]\n      (if (= ctd 0)\n        vsf\n        (recur (conj vsf (+ (last vsf) (last (butlast vsf)))) (dec ctd))))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":26,"code":"(fn fibo [x]\n(take x (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1])))\n  )","user":"57f5a5a5e4b0d3187e9008d5"},{"code":"(fn [n]\n     (loop [fibs [1 1]\n            i 2]\n       (if (= i n)\n         fibs\n         (recur (conj fibs (+ (last fibs) (last (drop-last fibs))))\n                (+ i 1)))))","problem":26,"user":"4e6dfe57535d5021c1a895fc"},{"problem":26,"code":"#(map first (take % (iterate (fn [[n1 n2]] [(+ n1 n2) n1]) [1 0])))","user":"54c29697e4b045293a27f604"},{"code":"#(loop [out_set '(1 1) num_left (- %1 2)]\n  (if (= num_left 0)\n  out_set\n  (recur \n      (reverse (conj (reverse out_set) \n        (+ (last out_set) (last (butlast out_set)))\n      ))\n      (dec num_left)\n    ))\n  )","problem":26,"user":"4fbd6210e4b081705acca303"},{"problem":26,"code":"(fn [i] (drop 1 (reverse (nth (iterate #(cons (+ (first %) (second %)) %) '(1 0)) (dec i)))))","user":"58951903e4b00487982d5274"},{"code":"(fn [c] (take c ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":26,"code":"#(loop [li [1 1], r (- %1 2)]\n    (if (> r 0)\n      (recur (cons (reduce + (take 2 li)) li) (dec r))\n      (reverse li)))","user":"5901731ae4b0438e51c2d03d"},{"code":"(fn [x]\n  (take x\n  \t((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"51a87d28e4b08d8ec191b811"},{"problem":26,"code":"(fn [n]\n  (rest\n   (reverse \n   (loop [d 1 result '(1 0)]\n    (cond \n          (= d n) result\n          :else (recur (inc d) (cons (+ (first result) (first (rest result)))\n                                     result)))))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn fib [c]\n  (take c\n    (map first\n     (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn [n]\n  (take n \n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"523b4e91e4b07becd5be21ef"},{"problem":26,"code":"(fn[cnt]\n\t (reverse (loop [ acc '(1 1)]\n\t\t(if (= (count acc) cnt)\n    \t\tacc\n        \t(recur \n         \t\t(cons \n             \t\t(+ (first acc) (second acc)) \n             \t\tacc\n             \t)\n         \t)\n      \t)\n  \t) )\n   \n)","user":"56b94357e4b0f2655033592e"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1])))","problem":26,"user":"4e6a61d8535d8ccf87e9fed8"},{"problem":26,"code":"(fn [y z] (if (= z (count y)) y (recur (conj y (+ (last y) (first (rest (reverse y))))) z))) [1 1]","user":"555b5ae4e4b0deb715856e4f"},{"problem":26,"code":"(fn [x]\n  (loop [y 0 z 1 x x c '()]\n    (if (zero? x)\n      (sort c)\n      (recur (+ y z) y (dec x) (conj c (+ y z))))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":26,"code":"(fn [n] \n  (take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"55f7ebeae4b06e875b46ceb7"},{"problem":26,"code":"(fn [a] (reverse (reduce (fn [s n] (conj s (apply + (take 2 s)))) '(1) (range 1 a))))","user":"5a42d6a8e4b0447ef91cc5fb"},{"problem":26,"code":"#((fn fib [s l n](let [c (concat s (list l))](if (zero? n) c (fib c (+ l (last s)) (dec n))))) '(1) 1 (- % 2))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [computed (fib (dec n))]\n      (conj\n       \tcomputed\n       \t(+\n          (nth computed (- (count computed) 1))\n          (nth computed (- (count computed) 2))\n         )\n       ))\n   \t))","problem":26,"user":"52335d7ce4b0f0b72fabf404"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"5225271fe4b01819a2de42f9"},{"code":"#(take % (reduce (fn [fibseq count] (conj fibseq (+ (get fibseq count) (get fibseq (+ count 1)))))[1 1] (range (- % 2))))","problem":26,"user":"534d6524e4b084c2834f4a9f"},{"code":"(fn [count]\n  (loop [results [1 1], x 1, y 1, i (- count 2)]\n  (if (= 0 i)\n      results\n      (recur (conj results (+ x y)) y (+ x y) (dec i)))))","problem":26,"user":"50a01937e4b08df8156e9e47"},{"problem":26,"code":"(fn [n]\n  (let [fib-gen (fn l [n-minus n] (lazy-seq (cons n-minus (l n (+ n n-minus)))))]\n    (take n (fib-gen 1 1))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":26,"code":"#(take % ((fn fib \n  ([] (concat [1 1] (fib 1 1)))\n  ([a b] \n       (let [n (+ a b)]\n       (lazy-seq (cons n (fib b n))))))))","user":"572e43f7e4b0cd1946bd0f83"},{"problem":26,"code":"(fn [x] (nth (iterate #(conj % (+ (last %) (last (butlast %)))) [1 1]) (- x 2)))","user":"558aabbfe4b0277789237621"},{"code":"#(take % (map first \n    (iterate \n      (fn [[a b]] [b (+ a b)]) [1 1])\n  )\n)","problem":26,"user":"5093ef2ce4b097f48cc38586"},{"problem":26,"code":"(fn\n\t[n]\n\t(loop\n\t\t[lst '(1 1)\n\t\taux 2]\n\t\t(cond\n\t\t\t(= n 0) ()\n\t\t\t(= aux n) (reverse lst)\n\t\t\t:else (recur (cons (+ (first lst) (second lst)) lst) (inc aux)))))","user":"57f81544e4b0d3187e900917"},{"code":"#(map (fn fib [x]\n        (loop [i 0 j 1 cnt x]\n          (if (= 0 cnt)\n            j\n            (recur j (+ i j) (dec cnt))))) (range %))","problem":26,"user":"50602bc6e4b08f2a82ad10ba"},{"problem":26,"code":"(fn fib [n]\n  ((fn rec [i a b]\n    (if (< i 2)\n       (list b) \n       (cons b (rec (- i 1) b (+ a b))))) n 0 1))","user":"53ed1778e4b0d648e757f4bd"},{"code":"(fn [n] \r\n   (if (= n 3) '(1 1 2)\r\n   (if (= n 6) '(1 1 2 3 5 8)\r\n   (if (= n 8) '(1 1 2 3 5 8 13 21)))))","problem":26,"user":"4e4bf20e535dc968683fc4d9"},{"code":"(fn fib [n] \n  (loop [fib [1], iter (dec n), cur 1, back 0] \n    (if (pos? iter)\n      (recur (conj fib (+ cur back)) (dec iter) (+ cur back) cur)\n      fib)))","problem":26,"user":"4feddf2ee4b0198f34b063be"},{"code":"#(letfn [(fib [a b] (lazy-seq (cons a (fib b (+ b a)))))]\n   (take % (fib 1 1)))","problem":26,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"#(map (fn my-fib [x] (if (<= x 1) 1 (+ (my-fib (- x 1)) (my-fib (- x 2))))) (range %))","problem":26,"user":"4e75d6b6535d7a570dd295c6"},{"problem":26,"code":"(fn [n] (loop [m 1 lastfib 0 thisfib 1 accum (vector 1)]\n          (if (= m n) accum\n            (let [nextfib (+ lastfib thisfib)]\n              (recur (+ m 1) thisfib nextfib (conj accum nextfib))))))","user":"554d386ee4b0a04f792995b8"},{"problem":26,"code":"(fn [n]\n  (take\n   n\n   ((fn fib [a b]\n      (lazy-seq (cons a (fib b (+ a b)))))\n    1 1)))","user":"568d2ca5e4b0dcc4269f40c0"},{"problem":26,"code":"(fn\n  [n]\n    (println n)\n    (loop [x [1 1]]\n      (if (= (count x) n)\n        x\n        (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      )\n    )\n)","user":"5d2564d2e4b02ea6f0fb6a34"},{"code":"(fn [len] \n  (take len ((fn fib [i j]\n    (lazy-seq (cons i (fib j (+ i j))))) 1 1)))","problem":26,"user":"4f1c2a3a535d64f603146480"},{"code":"#(loop [s [1 1]]\n    (if (< (count s) %)\n      (recur (cons (+ (first s) (second s)) s))\n      (reverse s)))","problem":26,"user":"50377d53e4b0af0658af77ad"},{"code":"#(take % ((fn f [a b]\n            (cons a (lazy-seq (f b (+ a b))))) 1 1))","problem":26,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":26,"code":"(fn [x]\n  (take x (reverse\n \t((fn [x y]\n   \t\t(if (> 0 (dec x))\n       \t\ty\n       \t\t(recur (dec x) (conj y (+ (first y) (second y))))))\n   \t\t(- x 2) '(1 1)))))","user":"55e856bae4b0121d4835fd8d"},{"problem":26,"code":"(fn [x]\n  (reverse\n  (loop [n (dec x) l1 1 l2 0 acc '(1)]\n    (if (= n 0)\n      acc\n      (recur (dec n) (+ l1 l2) l1  (conj acc (+ l1 l2)))))))","user":"53c6e25ee4b00fb29b2212a4"},{"code":"(fn fib[n]\n  (loop [i n res [] prev 1 sum 1]\n    (if (zero? i) res\n      (recur (dec i) (conj res prev) sum (+ prev sum)))))","problem":26,"user":"4e7bc07c535db169f9c796b9"},{"problem":26,"code":"(fn [n]\n    (loop [n (- n 2)\n           res '(1 1)\n           ]\n      (if (= n 0)\n        (reverse  res)\n        (recur (dec n) (cons (+(first res)(second res)) res))\n      )\n      ))","user":"540217e1e4b0df28a13c62cb"},{"problem":26,"code":"(fn tail-fibo [n]\n  (loop [x n\n         result '(1 1)]\n    (if (> x 2)\n      (recur (dec x) (concat result [(+ (last result) (second (reverse result)))]))\n      result)))","user":"5d321852e4b01671435dbce8"},{"code":"(fn [n]\n    (loop [i 2 l [1 1]]\n    (if (= i n)\n\t      l\n\t    (recur (inc i) (conj l (+ (last (butlast l)) (last l)))))))","problem":26,"user":"4e7d2448535db169f9c796c8"},{"problem":26,"code":"(fn [n]\n  (take n\n    ((fn fibo [a b] (lazy-seq(cons a (fibo b (+ a b)))))1 1)))","user":"5fa358a1e4b0f0ebd91b77fd"},{"problem":26,"code":"#(letfn [(m-fib [n]\n           (condp = n\n             0 1\n             1 1\n             (+ (m-fib (dec n)) (m-fib (- n 2))))\n           )]\n   ((fn [xx] (loop [x xx\n                   s []]\n              (if (= x 0)\n                s\n                (recur (dec x) (conj s (m-fib (- xx x))))\n                ))) %))","user":"577a0dc3e4b0979f8965167b"},{"problem":26,"code":"(fn fib\n  ([n] (take n (fib 1 1)))\n  ([v0 v1] (cons v0 (lazy-seq (fib v1 (+ v0 v1))))))","user":"54dcbc6ee4b024c67c0cf787"},{"code":"(fn [limit]\n  (take limit\n    ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4e7e8694535db169f9c79718"},{"problem":26,"code":"(fn [x]\n  (take x ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"54af500fe4b09f271ff37d06"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibs [x y] (cons y (lazy-seq (fibs y (+' x y)))))]\n    (take n (fibs 0 1))))","user":"5ab16992e4b073f1774425c4"},{"problem":26,"code":"#(\n  loop [out [1 1]\n        a 1\n        b 1\n        todo (- % 2)\n        ]\n  (if (zero? todo)\n    (seq out)\n    (recur (conj out (+ a b)) b (+ a b) (dec todo))\n    )\n  )","user":"54903056e4b0b312c081ff2e"},{"problem":26,"code":"#(->> [1 1]\n     (iterate (fn [[a b]] [b (+ a b)]))\n     (map first)\n     (take %))","user":"5e5f2c17e4b0fd0acd158678"},{"problem":26,"code":"(fn [sizer]\n  (loop [mylist ()]\n    (if (< (count mylist) sizer)\n      (recur (conj mylist ((fn [numb]\n                             (loop [counter 0 fibprev 1 fib 1]\n                               (if (= counter (- numb 1))\n                                 fibprev\n                                 (recur\n                                  (inc counter)\n                                  (+ fibprev (- fib fibprev))\n                                  (+ fib fibprev)))))\n                           (+ (count mylist) 1))))\n      (reverse mylist))))","user":"5fabe67be4b08cb800c85ade"},{"code":"(fn [n] \r\n    (nth\r\n     (iterate #(concat % [(reduce + (take-last 2 %))]) [1 1])\r\n     (- n 2)))","problem":26,"user":"4fd65b2be4b0d4de60cee37e"},{"code":"(fn [n] (loop [acc [1 1] cnt n] (if (= 2 cnt) acc \n(recur (conj acc (+ (last (pop acc)) (last acc))) (dec cnt)))))","problem":26,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":26,"code":"(fn [n](nth (iterate #(concat % (list (reduce + (take-last 2 %)))) '(1)) (dec n)))","user":"5bc8c033e4b07a9b28b100ca"},{"problem":26,"code":"(fn [len] (take len ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1))  )","user":"57b3027fe4b0fbc9809a276c"},{"problem":26,"code":"#(take  % ((fn fibs\n  ([] (fibs 1 1))\n               ([a b] (lazy-seq\n                       (cons a (fibs b (+ a b))))))))","user":"58ef0b8ce4b056aecfd47dbf"},{"problem":26,"code":"(fn\n  [n]\n  (if (<= n 2)\n    (take n [1 1])\n    (loop [current [1 1]\n           m 2]\n      (if (= m n)\n        current\n        (recur (conj current (+ (last current) (second (reverse current))))\n               (inc m))))))","user":"5cb703e8e4b026601754b95b"},{"code":"#(loop [sqn [1 1] n (- % 2)] \n   (if (= n 0) sqn\n     (recur (conj sqn (+ (last sqn) (last (butlast sqn)))) (dec n))))","problem":26,"user":"529f3f1ae4b04e0c58e87ba5"},{"problem":26,"code":"(fn [n] \n  (loop [current (- n 2) fibs '(1 1)]\n    (if (= current 0)\n      fibs\n      (recur \n       (dec current)\n       (#(concat % \n          (list (+ (last %) (last (butlast %))))) fibs)\n       ))))","user":"53c126fce4b00fb29b22125b"},{"problem":26,"code":"#(nth (iterate (fn f_next [x] (concat x [(+ (last x) (first (rest (reverse x))))])) '(1 1)) (- % 2))","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn [n]\n  (loop [current 2 fib-nums '(1 1)]\n    (if (= current n)\n      fib-nums\n      (recur (inc current) (concat fib-nums (list (+ (nth fib-nums (- (count fib-nums) 2)) (last fib-nums))) ) ) ) ) )","problem":26,"user":"4ff9e827e4b0678c553fc3b2"},{"problem":26,"code":"(fn [x] (reverse \n    (if (= x 1) \n      '(1)\n      (loop [n 2 o '(1 1)]\n        (if (= n x) o\n          (recur (inc n) \n                 (cons (+ (first o) (second o)) o)))))))","user":"5470cb10e4b094393f72dd65"},{"code":"(fn fib[x] \n  (take x \n    (map first \n      (iterate \n    (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fbd12a5e4b081705acca2fd"},{"problem":26,"code":"#(loop [n % a [1] prev 0] (if (= n (count a)) a (recur n (conj a (+ prev (last a))) (last a))))","user":"5516d26de4b06a49daca83b9"},{"problem":26,"code":"#(loop [stop %\n        a 1\n        b 0\n        out '[]]\n    (if (zero? stop)\n      out\n      (recur (dec stop)\n             (+ a b)\n             a\n             (conj out a))))","user":"50a122a1e4b08df8156e9e54"},{"problem":26,"code":"#(loop [a '(1 1 2) i 2 b %] (if (= b  (inc i)) a (recur (concat a (list (+ (last a) (nth a (- (count a) 2))))) (inc i) b)))","user":"51456858e4b0e88796073408"},{"problem":26,"code":"(fn func [x] (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1)))","user":"56cef5e8e4b0ea9b8538f762"},{"problem":26,"code":"#(->>\n  [0 1]\n  (iterate (fn [[x y]] [y (+ x y)]))\n  (map second)\n  (take %))","user":"5d6b5c42e4b04d129b00f2a7"},{"problem":26,"code":"#(reverse ((fn fib-lst\n        [x]\n        (let [fib (fn fib\n                    [x]\n                    (cond\n                     (= x 1) 1\n                     (= x 2) 1\n                     :else (+ (fib (- x 1)) (fib (- x 2)))))]\n          (cond\n           (= x 0) '()\n           :else (conj (fib-lst (- x 1)) (fib x))))) %))","user":"5f317ae4e4b0574c87022c2a"},{"code":"(fn fib [n]\n  (if (<= n 2)\n    '(1 1)\n      (reverse (cons (+ (last (fib (- n 1)))\n                        (second (reverse (fib (- n 1)))))\n                     (reverse (fib (- n 1)))))))","problem":26,"user":"518ee4f9e4b0cd6ff51676a5"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 fibs []]\n    (if (= (count fibs) n)\n      fibs\n      (recur b (+ a b) (conj fibs a)))))","user":"5b58d012e4b02d533a91bd71"},{"problem":26,"code":"(fn [n]\n  (loop [fib-nums [0 1]]\n    (if (> (count fib-nums) n)\n      (rest fib-nums)\n      (let [[n1 n2] (reverse fib-nums)]\n        (recur (conj fib-nums (+ n1 n2)))))))","user":"5a7ed0c7e4b03baeef92770e"},{"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n           1 1)))","problem":26,"user":"514e0417e4b019235f6c0593"},{"problem":26,"code":"(fn fib\n\t([n] (if (< n 3) (if (= n 2) '(1 1) (if (= n 1) '(1) '())) (fib (- n 2) '(1 1))))\n\t([n l] (if (> n 0) (recur (dec n) (conj l (+ (first l) (first (rest l))))) (reverse l))))","user":"543be8f0e4b032a45b869337"},{"problem":26,"code":"#(take % (map first\n              (iterate (fn [[a b]] [b (+ a b)])\n                       [1 1])))","user":"5ff93da9e4b06df49cee14af"},{"code":"#(loop [l [0 1] x 1]\n   (if (= x %)\n     (rest l)\n     (recur (conj l (+ (nth l x) (nth l (dec x))))\n            (inc x))\n    )\n   )","problem":26,"user":"52253004e4b01819a2de42fa"},{"problem":26,"code":"(fn[n](last (take (dec n) (iterate (fn[x](conj x (apply + (flatten (take-last 2 x))))) [1 1]))))","user":"560331dee4b04bb52996e1b5"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a]\n            (if (< a 3)\n              1\n              (+ (fib (- a 1)) (fib (- a 2)))))\n          (xfib [x]\n            (loop [i x result '()]\n              (if (zero? i)\n                result\n                (recur (dec i) (conj result (fib i))))))]\n    (xfib n)))","user":"57762e67e4b0979f89651630"},{"code":"(fn [n]\n  (take n \n        ((fn fib-seq\n\t\t ([] (fib-seq 1 1))\n \t\t ([a x] (cons a\n         \t          (lazy-seq (fib-seq x\n            \t\t\t\t\t(+ a x)))))))))","problem":26,"user":"52b94e26e4b07a9af57922b9"},{"problem":26,"code":"(fn fibo\n     [n]\n     (letfn [(fibo_nth \n               [n]\n               (cond\n                (= n 1) 1\n                (= n 2) 1\n                :else (+ (+ (fibo_nth (- n 1)) (fibo_nth (- n 2))))))]\n       (cond\n        (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else (concat (fibo (- n 1)) (list (fibo_nth n))))))","user":"58cf8f97e4b03c36ff7e58b7"},{"problem":26,"code":"(fn [n] (seq (reduce (fn [a b] (conj a (+' (last a) (last (butlast a))))) [1 1] (range (dec (dec n))))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":26,"code":"#(map \n    (fn fibonacci [num]\n      (cond\n       (= num 0) 0\n       (= num 1) 1\n       :default (+ (fibonacci (- num 2)) (fibonacci (- num 1)))))\n       (range 1 (+ % 1)))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn [n]\n    (loop [nums [] cnt 1]\n          (if (= cnt n)\n              (conj nums (+ (last nums) (last (butlast nums))))\n            (if (< cnt 3)\n                (recur (conj nums 1) (inc cnt))\n              (recur (conj nums (+ (last nums) (last (butlast nums)))) (inc cnt))))))","problem":26,"user":"4edb314d535d10e5ff6f5317"},{"problem":26,"code":"(fn [n] (letfn [(rfib [a b] (lazy-seq (cons a (rfib b (+ a b)))))]\n  (take n (rfib 1 1))))","user":"5600f8c7e4b04bb52996e176"},{"problem":26,"code":"(fn [n]\n  (loop [c 1 f1 0 f2 1 ans '()]\n    (if (> c n)\n      (reverse ans)\n      (recur (inc c) f2 (+ f1 f2) (cons f2 ans)))))","user":"561bcf94e4b064ca9f4b168a"},{"code":"(fn [n] (take n (map first (iterate (fn [p] (let [[x y] p] [y (+ x y)])) [1 1]))))","problem":26,"user":"5199ca05e4b022efe2b3ba88"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else\n   \t (loop [i 2\n            accum '(1 1)]\n       (if (>= i n)\n         (reverse accum)\n         (recur (inc i) (conj accum (+ (first accum) (second accum))))))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":26,"code":"#(map first (take % (iterate (fn [[x y]] (vec (concat (vector y) (vector (+ x y))))) [1 1])))","user":"55c5e781e4b0e31453f649b8"},{"problem":26,"code":"#(loop [counter % prev 0 curr 1 stream '()]\n    (if (<= counter 0)\n      (reverse stream) \n      (recur (dec counter) curr (+ prev curr) (cons curr stream))))","user":"5eb41273e4b00a66d4a9521b"},{"code":"(fn fib [n]\n  (if (< n 3)\n    (vec (repeat n 1))\n    (let [f1 (fib (- n 1))\n          f2 (fib (- n 2))]\n      (conj f1 (+ (last f1) (last f2))))))","problem":26,"user":"536254a5e4b0243289761e50"},{"problem":26,"code":"#(loop [curr 1\n        nex 1\n        r %\n        result []]\n   (if (pos? r)\n     (recur nex\n            (+ curr nex)\n            (dec r)\n            (conj result curr))\n     result))","user":"5595ffabe4b0c79f6e1db972"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1 )))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":26,"code":"#(loop [i 1 j 1 ret []]\n   (if (< (count ret) %)\n     (recur j (+ i j) (conj ret i))\n     ret))","user":"55058a4fe4b086ebe8a79c89"},{"problem":26,"code":"#(reverse \n  (reduce \n  (fn [l n] \n    \n      (conj l (if (< n 2) 1 (+ (first l) (second l)))))\n  () (range %)))","user":"59fedc26e4b01bb0ae8afd17"},{"problem":26,"code":"(fn [f]\n  (loop [prev 0\n         curr 1\n         idx f\n         s [curr]\n        ]\n    (if (<= idx 1)\n      s\n      (let [next (+ prev curr)]\n        (recur curr next (- idx 1) \n               (conj s next)\n        )\n      )\n    )\n  )\n)","user":"59073e0fe4b047aa04b19950"},{"problem":26,"code":"#(loop [cnt 2 fib [1 1]] (if (>= cnt %) fib (recur (inc cnt) (conj fib (let [rfib (reverse fib)] (+ (first rfib) (second rfib)))))))","user":"56e811e1e4b02e7e935eb6e3"},{"problem":26,"code":"#(take % (map first (iterate (fn \n                               [[x y]] [y (+ y x)]) \n                             [1 1])))","user":"57fd7344e4b0d3187e9009b6"},{"problem":26,"code":"(fn fib [n]\n  (let [next-fib (fn [fib-seq]\n                   (+ (last fib-seq)\n                      (last (butlast fib-seq))))\n        next-fib-seq (fn [fib-seq]\n                       (conj fib-seq\n                             (next-fib fib-seq)))]\n    (if (< n 2)\n      (nth [1 1] n)\n      (loop [ctr n\n             fib-seq [1 1]]\n        (if (= ctr 2)\n          fib-seq\n          (recur (dec ctr)\n                 (next-fib-seq fib-seq)))))))","user":"54c72b19e4b045293a27f636"},{"problem":26,"code":"#(take % (map second (iterate (fn [[a b]] [b (+' a b)]) [0 1])))","user":"50666699e4b03d366d7cb2b0"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [1]\n         prev-a 0\n         prev-b 1\n         remaining (dec n)]\n    (if (pos? remaining)\n      (let [next-fib (+ prev-a prev-b)]\n        (recur (conj fibs next-fib) prev-b next-fib (dec remaining)))\n      fibs)))","user":"56c427bbe4b05cc29241ee94"},{"problem":26,"code":"(fn fib [n]\n     (loop [v [1 1] i 1 m (dec n)]\n       (if (< i m)\n         (recur (conj v\n                      (+ (last v) (second (reverse v))))\n                (+ i 1) m)\n         (apply list v))))","user":"5fd92743e4b05ac5b16ea11f"},{"code":"#(letfn [(fibs [] (lazy-cat [1] (reductions + 1 (fibs))))] (take % (fibs)))","problem":26,"user":"51e00020e4b01188f0627534"},{"problem":26,"code":"(fn [n]\n  (loop [a 0\n         b 1\n         r []]\n    (if (= (count r) n)\n      r\n      (recur b (+ b a) (conj r b)))))","user":"57e8f54be4b0bfb2137f5b1d"},{"code":"(fn fib [n]\n  (take n\n    ((fn sfib[a b]\n      (lazy-seq (cons a (sfib b (+ a b))))\n    ) 1 1)\n  )\n)","problem":26,"user":"502fb9bee4b0f8db655c4ee2"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 3) 1 (+ (fib (dec x)) (fib (dec (dec x)))))) (range 1 (inc %)))","user":"55df2752e4b050e68259b3ed"},{"problem":26,"code":"(fn [n]\n  ((fn inner [counter partial_seq a b]\n     (if (= 0 counter)\n     partial_seq\n     (inner (- counter 1) (conj partial_seq (+ a b)) b (+ a b)))) (- n 2) [1 1] 1 1))","user":"576aa367e4b0a07e8fc1811e"},{"problem":26,"code":"(fn [limit]\n  (pop (reduce (fn [coll _] (conj coll (apply + (vec (take-last 2 coll))))) [1] (repeat limit 1)))\n)","user":"53ae16e2e4b047364c044472"},{"problem":26,"code":"#(loop [i 0 f 1 s 1 acc []] (if (< i %) (recur (inc i) s (+ f s) (conj acc f)) acc))","user":"5e67ab18e4b0e171e103368a"},{"code":"(fn fi [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (let [f (fi (- x 1))]\n        (conj f (+ (last f) (last (butlast f))))))))","problem":26,"user":"51a671d4e4b0740bfd1afd21"},{"problem":26,"code":"(fn [n]\n  (let [f (fn [n f']\n            (if (or (= n 0) (= n 1))\n              1\n              (+ (f' (- n 2) f')\n                 (f' (- n 1) f'))))]\n        (map #(f % f) (range n))))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":26,"code":"#(take % ((fn fib\n  [a b] (lazy-seq (cons a (fib b (+ a b))))\n) 1 1))","user":"5e41c371e4b01d43a70e8e59"},{"code":"#(map (fn f [n]\n  (if (< n 2)\n    1\n    (+ (f (dec n)) (f (- n 2)))))\n    (range %))","problem":26,"user":"506617c3e4b03d366d7cb2ab"},{"problem":26,"code":"(fn [n] ;fib sequence of length n\n  (take n ;take sequence of lenght n from infinite fib sequence to be generated in next statement...\n    (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"5430b3b6e4b0dad94371f2db"},{"problem":26,"code":"#((fn fibs [n b a]\n      (when (pos? n)\n        (cons a (fibs (dec n) a (+ a b)))))\n    % 0 1)","user":"5a5d0726e4b0512ff01cd91b"},{"problem":26,"code":"#(take %\n       ((fn fib [a b]\n         (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"566812f0e4b04acd4f672de1"},{"code":"#(map (fn fib[x]\n(if (< x 3)\n    1\n    (+ (fib (- x 1)) (fib (- x 2))))\n    )   (range 1 (inc %)))","problem":26,"user":"4eaa96e1535d7eef3080730d"},{"problem":26,"code":"(fn fib [n]\n  (if (<= n 2)\n      [1 1]\n   \t  (conj (fib (- n 1))\n       \t\t(+ (last (fib (- n 1)))\n               (last (fib (- n 2)))))))","user":"545801f6e4b01be26fd74615"},{"code":"#(take % \n  (map first \n    (iterate \n      (fn [[n m]] [(+ n m) n]) \n      [1 0])))","problem":26,"user":"4f0388e8535dcb61093f6b17"},{"problem":26,"code":"(fn [n]\n  (map\n   \tfirst\n   \t(take\n      n\n      (rest (iterate\n       \t(fn [[prev-2 prev]]\n          [prev (+ prev-2 prev)])\n       \t[0 1])))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1] ) ) )","user":"55cc56bee4b0e31453f64a0f"},{"problem":26,"code":"(fn [f] \n  (let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))] \n   (take f (fib 1 1))))","user":"56942923e4b0dcc4269f4112"},{"problem":26,"code":"#(map first (take % (iterate (fn [[acc v]] \n                               [(+ acc v) acc])\n                             [1 0])))","user":"5712a404e4b07c98581c3a8d"},{"problem":26,"code":"#(loop \n   [n % l [1 1]]\n   (if \n     (= n 2)\n     l\n     (recur\n      (dec n)\n      (conj\n       l \n       (+\n        (first (reverse l))\n        (second (reverse l))\n        )\n       )\n      )\n     )\n   )","user":"5cc7692ce4b0ccb061962837"},{"problem":26,"code":"(fn [anzahl] (take anzahl \n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n   ))\n  )","user":"56fee925e4b08d47c97781b7"},{"code":"(fn fib [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [seq (fib (dec n))]\n      (conj seq (reduce +\n                        (take 2 (reverse seq)))))))","problem":26,"user":"5225fa79e4b0f4c7e20d29c7"},{"code":"(fn fib \n  ([n acc]\n    (if (= 2 n)\n        acc\n        (recur (dec n)\n               (cons (+ (first acc)\n                     (second acc)) acc))))\n  ([n] (reverse (fib n '(1 1)))))","problem":26,"user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":26,"code":"#(loop [num (- % 2) acc '(1 1)] (case %  1 '(1) 2 '(1 1) (if (> num 0) (recur (dec num) (cons (+ (first acc) (first (rest acc))) acc)) (reverse acc))))","user":"5720ba36e4b0c5bde472c09c"},{"problem":26,"code":"(fn [n] (reverse (last (take (dec n) (iterate (fn [[f s & _ :as l]] (conj l (+ f s))) '(1 1))))))","user":"5454b84ce4b0e397800069d9"},{"code":"#(reverse \n((fn f [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (let [g (f (dec x))]\n        (cons (+ (nth g 0) (nth g 1)) g))))) %))","problem":26,"user":"4ed578d1535d10e5ff6f52d9"},{"problem":26,"code":"#(->> [1 0]\n      (iterate (fn [[x y]] [(+ x y) x]))\n      (take %)\n      (map first))","user":"5504dd64e4b086ebe8a79c83"},{"problem":26,"code":"(fn [x]\n  \t(for [z (range x)] \n    \t((fn fib [y] \n\t\t\t(if (<= y 0) \n\t\t\t\t(if (< y 0) 0 1)\n\t\t\t\t(+ (fib (- y 1)) (fib (- y 2))))\n\t\t) z)\n\t)\n)","user":"57b9bfdae4b0fbc9809a27f5"},{"problem":26,"code":"(fn [n]\n  (loop [acc (vector 1)\n         i1 1\n         i2 0\n         i (- n 1)]\n    (if (<= i 0)\n      acc\n      (recur (conj acc (+ i1 i2)) (+ i1 i2) i1 (- i 1)))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":26,"code":"#(loop [a [1 1]\n         i %]\n    (if (= i 2)\n      a\n      (recur (conj a (apply + (take-last 2 a)))\n             (- i 1))))","user":"604f9a8be4b039075cafcf65"},{"problem":26,"code":"#(take %\n  ((fn loopHer [a b]\n     (lazy-seq (cons a (loopHer b (+ a b)))))1 1)\n  )","user":"58dd21a9e4b0a4d5acaab6b3"},{"problem":26,"code":"#(loop [a 1\n          n %\n          f []]\n    (if (= n 0)\n      f\n      (recur (+ a (or (last f) 0)) (dec n) (conj f a))))","user":"579aff09e4b05b1deef9ade7"},{"problem":26,"code":";; Standard implementation for Fibonacci using iteration\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5d0eda66e4b0cc9c9158825f"},{"problem":26,"code":"#(take % (map second (iterate (fn [[x y]] [y (+ x y)]) [0 1])))\n\n;#( first (reduce (fn [[coll x y] _] [(conj coll y) y (+ x y) ]) [[] 0 1] (range %)) )","user":"5db7376fe4b010eb3c36cd43"},{"problem":26,"code":"(fn fibs [n]\n  (if (<= n 2)\n    (vec (replicate n 1))\n    (let [prev (fibs (dec n))]\n      (conj prev (+ (last prev) (last (butlast prev)))))))","user":"57c70189e4b05aa3c4741cfb"},{"problem":26,"code":"(fn fib [n]\n  (reverse\n   (loop [fibs '(1 1)]\n     (if (= n (count fibs))\n         fibs\n         (recur (cons (+ (first fibs) (second fibs))\n                      fibs))))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn [x] (take x [1 1 2 3 5 8 13 21]))","problem":26,"user":"4f7250cce4b07046d9f4f02a"},{"problem":26,"code":"(fn stuff\n\t([num]\n\t\t\t(for [i (range num)]\n\t\t\t\t((fn fib [num] \n\t\t\t\t\t(cond \n\t\t\t\t\t(= num 0) 1\n\t\t\t\t\t(= num 1) 1\n\t\t\t\t\t:else\n\t\t\t\t\t(+ (fib (- num 2)) \n\t\t   \t\t\t   (fib (- num 1))\n\t\t   \t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t) i)\n\t\t\t)\n\t)\n)","user":"5a663a32e4b0512ff01cd9c2"},{"problem":26,"code":"(fn fibonacci\n  [num]\n  (if (= num 1)\n    [1]\n    (if (= num 2)\n      [1 1]\n      (let [seq (fibonacci (- num 1))]\n        (conj seq (+ (last seq) (last (butlast seq)))))\n      )))","user":"55bd87ede4b01b9910ae29fe"},{"problem":26,"code":"(fn [fib ] (butlast \n            (last \n              (take fib \n                (iterate #(conj % (+ (last(butlast % )) (last %)))\n                  [1 1]))))  )","user":"5af1cbb8e4b0cc2b61a3bc65"},{"code":"(fn [n] (take n ((fn rfib [a b] \r\n  \t    (cons a (lazy-seq (rfib b (+ a b)))))\r\n\t\t1 1)))","problem":26,"user":"4e059278535d04ed9115e7a5"},{"code":"(fn [x] (reverse ((fn fib [n] (if (> n 2) (let [t (fib (dec n))](conj t (+ (nth t 0) (nth t 1)))) '(1 1))) x)))","problem":26,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn [z] (take z (map first (iterate (fn [[a b]] [b (+ a b)])[1 1]))))","problem":26,"user":"4ff8aa3fe4b0678c553fc39e"},{"code":"(fn fib\r\n  ([n] (fib (- n 2) [1 1]))\r\n  ([n v] (if\r\n    (= 0 n)\r\n    v\r\n    (fib\r\n      (- n 1)\r\n      (conj v (+ (peek v) (-> v pop peek)))))))","problem":26,"user":"4ff889f2e4b0678c553fc399"},{"problem":26,"code":"(fn [x] (last (take (- x 1) (iterate #(conj % (+ ((comp last butlast) %) (last %))) [1 1]))))","user":"586d4d63e4b01531a375e98e"},{"code":"(fn [n] \n  (reverse \n   (loop [\n          i (- n 2) \n          c '(1 1)]\n     (if (zero? i)\n       c \n       (recur (dec i) (cons (+ (first c) (second c)) c))))))","problem":26,"user":"537943c0e4b06839e8705e52"},{"code":"(fn [num]\n  (loop [numy (- num 2) res [1 1]]\n    (if (= 0 numy)\n      res\n      (recur \n        (dec numy) \n        (conj res (+ (last res) (second (reverse res))))\n      )\n    )\n  )\n)","problem":26,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":26,"code":"(fn [n]\n  (loop [n  n\n         v0 1\n         v1 1\n         result []]\n    (if (<= n 0)\n      result\n      (recur (dec n) v1 (+ v0 v1) (conj result v0)))))","user":"57a4fa50e4b0a966079561f1"},{"code":"#(reduce (fn [res item] (let [last-index (- (count res) 1)]\n\t\t\t (conj res (+ (nth res last-index 0)\n\t\t\t\t      (nth res (- last-index 1) 0))))) [1] (range 1 %))","problem":26,"user":"5016ac54e4b052339a490e7b"},{"problem":26,"code":"(fn [x] (take x ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"58e5180ae4b056aecfd47c82"},{"code":"(fn [x]\r\n  (take x\r\n    ((fn fib [a b]\r\n        (cons a (lazy-seq (fib b (+ a b))))) \r\n     1 1)))","problem":26,"user":"50a0d1e4e4b08df8156e9e51"},{"problem":26,"code":"; note not solved myself\n(fn [numberOfFibs]\n    (letfn [(lazyFib [a b] (cons a (lazy-seq (lazyFib b (+ b a)))))]\n      (take numberOfFibs (lazyFib 1 1))))","user":"5e633940e4b0fd0acd15869f"},{"problem":26,"code":"(fn [n] (rest (reduce (fn [v x] (conj v (+(last v) (second (reverse v))))) [0 1] (range (- n 1)))))","user":"59b1a1b2e4b0e1f4e384c8eb"},{"problem":26,"code":"(fn fibo\n [n]\n (loop [x 1 y 1 ret [] cnt 0]\n   (if (= cnt n)\n     ret\n     (recur y (+ x y) (into ret [x]) (inc cnt)))) )","user":"599ed08fe4b0871e7608b812"},{"problem":26,"code":"#(loop [i 1 prod `(1 1)]\n    (println prod)\n    (if (= (+ i 1) %)\n      prod\n      (recur (inc i) (concat prod [(+ (nth prod i) (nth prod (- i 1)))]))))","user":"5d6e6a2de4b04d129b00f2c8"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] (list b (+ a b))) '(1 1))))","user":"56598476e4b068f2fe63dbec"},{"code":"(fn [n]\n  (loop [xs [] max n]\n    (cond\n     (= (count xs) n) xs\n     (= xs []) (recur [1] max)\n     (= xs [1]) (recur [1 1] max)\n     :else (recur (conj xs (+ (last xs) (last (butlast xs)))) max))))","problem":26,"user":"4fc8f1fee4b0ee37620e183f"},{"problem":26,"code":"(fn [x] ((fn [x y] (if (< (count x) y) (recur (conj x (apply + (take-last 2 x))) y) (lazy-seq x) )) [1 1] x )  )","user":"55818b0ee4b05c286339e0fb"},{"code":"(fn [num]\n  (loop [x 0 y 1 n num acc '()]\n    (if (= n 0)\n      acc\n      (recur y (+ x y) (dec n) (concat acc (list y))))))","problem":26,"user":"5163a7bbe4b055933a9ca02f"},{"code":"(fn [n]\n  (map \n    (fn fibs [num]\n      (cond\n        (= num 0) 1\n        (= num 1) 1\n        (> num 1)\n        (+ (fibs (- num 1)) (fibs (- num 2)))))\n      (range 0 n)))","problem":26,"user":"4dadba4dc9a9d6ed3899dc57"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n    (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"50458888e4b01f6c9a8b236d"},{"problem":26,"code":"#(loop [li [1 1] prev [1 1]]\n   (let [c (count li)]\n    (if (= c %)\n      li\n      (recur (conj li (apply + prev)) (vector (last prev) (apply + prev))))))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":26,"code":"(fn [n]\n  (map second (take n (iterate (fn [[a b]] (list b (+ a b)))\n                               [0 1]))))","user":"54145050e4b01498b1a719ea"},{"code":"(fn fib2 [y]\n  (letfn [(fib [x]\n  (if (< x 2)\n      1\n      (+ (fib (- x 2)) (fib (- x 1)))))]\n    (map fib (range y))\n  )\n)","problem":26,"user":"50588af1e4b06522596eba7d"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fib 1 1))))","user":"598210a6e4b021a7a535fdf7"},{"problem":26,"code":"#(loop [v [1] cnt %]\n       ; If count reaches 1 then exit the loop and return sum\n       (println v)\n       (if (= cnt 1)\n         v\n         (recur (conj v (reduce + (take-last 2 v))) (dec cnt))))","user":"587cf147e4b01531a375eb29"},{"problem":26,"code":"(fn n-fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [prev (n-fib (dec n))\n          elem1 (nth prev (- n 2))\n          elem2 (nth prev (- n 3))]\n      (conj prev (+ elem1 elem2)))))","user":"55f9acade4b03cbcff9738c7"},{"problem":26,"code":"#(take %\n        ((fn rfib [a b]\n           (lazy-seq (cons a (rfib b (+ a b)))))\n         1 1))","user":"54458995e4b032a45b86939e"},{"problem":26,"code":"#(take % ((fn fib [] (concat [1 1] (lazy-seq (map + (fib) (rest (fib))))))))","user":"54f5fb57e4b0f2f3c5226e9f"},{"problem":26,"code":"(fn [x]\n  (loop [s [1] cur x p1 0 p2 1]\n    (if (< cur 2)\n      s\n      (recur (conj s (+ p1 p2)) (dec cur) p2 (+ p1 p2)))))","user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn fib [n] \n  ((fn inner [acc n]\n    (if (= n 0)\n      acc\n      (if (< (count acc) 2) \n        (inner (conj acc 1) (- n 1))\n        (inner (conj acc (reduce + (take-last 2 acc))) (- n 1))\n      )\n    ))\n    [] n)\n)","problem":26,"user":"531ba143e4b08068f379ed91"},{"code":"(fn fibseq [x] (map (fn fib [x] (cond (= x 0) 0 (= x 1) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ x 1))))","problem":26,"user":"52319066e4b0e2e8de81d1e9"},{"problem":26,"code":"#( loop [s %1 v %2 d %3]\n  (if (< s d)\n    (recur (inc s)\n     (conj v (+ (last v)\n      (nth v \n       (- (count v) 2) ) ) ) d )\n    v\n  )\n) 2 [1 1]","user":"5b5b0bb9e4b0c6492753e6a5"},{"problem":26,"code":"#(take % \n       (map \n        first \n         (iterate \n          (fn [[a b]]\n            [b (+ a b)]) [1 1])))","user":"55101237e4b06e50f9beb181"},{"problem":26,"code":"#(let [l ((fn fib [n] (cond\n               (= n 1) '(1)\n               (= n 2) '(1 1)\n               :else (let [pfib (fib (- n 1))\n                       [a b & _] pfib]\n                                 (cons (+ a b) pfib)))) %)]\n                   (reverse l))","user":"5bc935bde4b07a9b28b100d8"},{"problem":26,"code":"(fn fib \n  ([n] (fib n 0 1 []))\n\t([n a b res]\n\t (if-not (> n 0)\n\t   res\n\t\t (recur (dec n) b (+ a b) (conj res b)))))","user":"4f6543cae4b07046d9f4ef41"},{"problem":26,"code":"(fn [x]\n  (loop [result [1]\n         num-to-add 0]\n    (if (= (count result) x)\n      (seq result)\n      (let [last-result (last result)\n            new-result (+ num-to-add last-result)]\n        (recur (conj result new-result) last-result)))))","user":"600d9808e4b074f607df669c"},{"problem":26,"code":"#(take % \n  (lazy-seq\n    (list* 1 1\n      (\n        (fn f [a b]\n          (let [c (+ a b)]\n            (lazy-seq\n              (cons\n                c\n                (f b c)\n              )\n            )\n          )\n        )\n        1 1\n      )\n    )\n  )\n)","user":"580e7761e4b0849f6811b753"},{"code":"(fn [x]\n  (take x (map first \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"501b1efee4b0b12d9c5f4d82"},{"problem":26,"code":"(fn [n]\n  (loop [c 0\n         x 1\n         xp1 1\n       \t xp2 2 \n         s '()]\n    (if (= c n)\n      (reverse s)\n      (recur (inc c) xp1 xp2 (+ xp1 xp2) (conj s x)))))","user":"5f6f461ae4b02876ed9fd06f"},{"problem":26,"code":"(fn fibo [x] (if (< x 3)(if (= x 2) (list 1 1) (list 1) )(concat (fibo (- x 1))(list(+ (last (fibo (- x 1))) (last (butlast (fibo (- x 1)))) )))    ) )","user":"53fdc4b8e4b0de5c418485ea"},{"code":"#(map \n(fn fib [x] \n  (if (< x 2) \n    x \n    (+ (fib (- x 1)) (fib (- x 2)))))\n(range 1 (inc %)))","problem":26,"user":"4f30896ce4b0d6649770a07b"},{"problem":26,"code":"(fn fib [x]\n (last\n  (take (- x 1)\n   (iterate\n     (fn [coll] (conj\n                 coll\n                 (+ (last coll) (last (butlast coll)))))\n    [1 1]))))\n;;\n;;I'm not sure why this produces the set of vectors, and thus needs the last, but I am happy to have solved it. Will return to it later.","user":"58ffbabce4b0438e51c2d002"},{"code":"(fn fib [x] ((fn fib1 [m n] (if (= n 0) m (fib1 (reverse (conj (reverse m) (+ (first (reverse m)) (second (reverse m))))) (- n 1) ) )) '(1 1) (- x 2) )  )","problem":26,"user":"5150ae58e4b03e678e393abe"},{"code":"(fn fib [k]\n  (loop [a 1 b 1 seq [1 1] todo (- k 2)]\n    (if (= todo 0)\n      seq\n      (recur b (+ a b) (conj seq (+ a b)) (- todo 1)))))","problem":26,"user":"4f5eda39e4b0030a34fb2b56"},{"problem":26,"code":"#(loop [in % \n        out [1 1]]\n   (if (>= 2 in)\n     out\n     (recur (dec in) (conj out (+ (last out) ((comp first rest reverse) out)) ) ))\n   )","user":"5650082fe4b0284900eef6b7"},{"code":"(fn [x]\n  (reverse (nth (iterate #(cons (+ (first %) (second %)) %) '(1 1)) (- x 2))))","problem":26,"user":"53110f32e4b08068f379ece4"},{"code":"(fn [end] (loop [prev 1 cur 1 acc '() n 0] (if (< n end) (recur cur (+ prev cur) (cons prev acc) (+ n 1)) (reverse acc))))","problem":26,"user":"508e9ed8e4b0996e1a8a53bf"},{"code":"#(take % (map (fn[x](first x)) (iterate (fn[[a b]][b (+ a b)]) [1 1])))","problem":26,"user":"4e8849c5535d8b9bb0147ca4"},{"problem":26,"code":"#(take % ((fn fib [a b] \n            (lazy-seq (cons a (fib b (+ a b))))) \n          1 1))","user":"58637221e4b0f14aab7c881d"},{"code":"(fn [n] (loop [sq '(1 1)]\n  (if (= (count sq) n)\n    sq\n    (recur (concat sq (conj '() (+ (last sq) (last (butlast sq))))))\n  )\n))","problem":26,"user":"4e6daa22535d5021c1a895ef"},{"problem":26,"code":"(fn fib [a b n]\n  (when (> n 0)\n    (cons a (fib b (+ a b) (- n 1))))) 1 1","user":"5644149de4b0018b46ad8c07"},{"problem":26,"code":"#(loop [x 2 res [1 1]]\n    (if (< x %)\n      (recur (inc x) (conj res (+ (second (reverse res)) (last res))))\n      res))","user":"5a18488ee4b0ff51aa4b31e5"},{"code":"(fn get-fibs                                                       \n  [num]                                                              \n  (take num                                                          \n        (map (fn myfib                                                 \n               [c]                                                   \n               (case c                                               \n                 0 0                                                 \n                 1 1                                                 \n                 (+ (myfib (dec c)) (myfib (dec (dec c))))))         \n             (iterate inc 1))))","problem":26,"user":"50573ed8e4b0012181721987"},{"code":"(fn [k]\n  (if (= k 1) '(1)\n    (if (= k 2) '(1 1)\n      (loop [n 0 seq '(1 1)]\n        (if (= n (- k 2)) seq\n          (recur\n            (inc n)\n            (conj (vec seq)\n              (+ (first (reverse seq)) (second (reverse seq))))))))))","problem":26,"user":"4f1e4ab5535d64f603146496"},{"code":"(letfn [(fibs [a b] \n              (cons a (lazy-seq (fibs b (+ a b)))))]\n  #(take % (fibs 1 1)))","problem":26,"user":"537bde5de4b06839e8705e73"},{"code":"(fn fib [n] \n   (reduce \n    (fn nf [s t] (reverse (cons (+ (first (reverse s)) (first (rest (reverse s)))) (reverse s))))\n    [1 1]\n    (range (- n 2))\n    )\n  )","problem":26,"user":"50f84d85e4b0aafb827eb1f7"},{"problem":26,"code":"(fn [n] (take n\n  ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b))))) \n   1 1)))","user":"5c852e3ae4b0c8042a70ce78"},{"problem":26,"code":"(fn [size] (\n  reverse (\n   reduce (\n     fn [prev _] (\n       conj prev (+ (first prev) (if (second prev) (second prev) 0))\n     )\n   ) '(1) (repeat (- size 1) 1)))\n)","user":"552456e3e4b0882d96d091c2"},{"problem":26,"code":"(fn fib [x]\n  (take x ((fn fib [a b] \n     (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n  )\n)","user":"5ac74b34e4b0e27600da777f"},{"problem":26,"code":"(fn [x]\n    (loop [cnt 1\n           list []]\n      (if (= cnt (+ 1 x))\n        list\n        (cond\n          (= 1 cnt)\n          (recur (inc cnt) (conj list 1))\n\n          (= 2 cnt)\n          (recur (inc cnt) (conj list 1))\n\n          :else\n          (recur (inc cnt) (conj list (+ (last list) (last(butlast list)))))\n          ))\n      )\n    )","user":"5b269cf3e4b063e2438bcc35"},{"code":"(fn [n]\n  (loop [N  n, k1 1, k2 1, result [1]]\n    (if (= 1 N)\n      result\n      (recur (dec N), k2, (+ k1 k2) (conj result k2)))))","problem":26,"user":"4dcc2435535d5973398f9290"},{"problem":26,"code":"(fn fib [n]\n   (loop [n n]\n     (cond\n       (<= n 0) []\n       (= n 1) [1]\n       (= n 2) [1 1]\n       :else (let [prev-fibs (fib (dec n))]\n               (conj prev-fibs (+ (last prev-fibs) (second (reverse prev-fibs))))\n               )\n       )\n     )\n   )","user":"5c6253abe4b0fca0c1622646"},{"problem":26,"code":"#(loop [n 0 fibs '()]\n   (if (< n %)\n     (recur (inc n)\n            (if (< (count fibs) 2)\n            \t(conj fibs 1)\n            \t(conj fibs (+ (first fibs) (first (rest fibs))))))\n     (reverse fibs)))","user":"529f9bf2e4b04e0c58e87bb4"},{"problem":26,"code":"(fn [x]\n  (loop [i x p 1 n 1 f ()]\n    (if (<= i 0)\n      f\n      (recur (dec i) n (+ n p) (concat f [p])\n             )\n      )\n    )\n  )","user":"571ac0b8e4b07c98581c3b5b"},{"code":"#(loop [[a b & rest :as l] [1 1] n (- % 2)]\n  (if (zero? n)\n    (reverse l)\n    (recur (cons (+ a b) l) (dec n))))","problem":26,"user":"5097b556e4b00ad8bab4e970"},{"problem":26,"code":"(fn [X] (take X (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"55f20e4be4b06e875b46ce40"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[cur nxt]] [nxt (+ cur nxt)]) [1N 1N])\n       (map first)\n       (take n)))","user":"5f82609ae4b0c071e6c840f9"},{"problem":26,"code":"#(take % ((fn fib [a b]\n            (lazy-seq (cons a (fib b (+ b a))))) 1 1))","user":"57de5f0ee4b0bd073c202450"},{"code":"(fn fibs [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ed72e51535d10e5ff6f52ee"},{"code":"(fn [n] \n  (let [fib (fn [fib1]\n              (if (= (count fib1) n)\n               fib1\n               (recur (flatten (cons fib1 (list (apply + (take-last 2 fib1))))))))] (fib '(1))))","problem":26,"user":"516a9dbee4b081287f204e9c"},{"problem":26,"code":"#(map \n  (fn fb [n]\n    (if (< n 2)\n      n\n      (+ (fb (- n 2)) (fb (- n 1)))))\n  (rest (range ( + 1 %))))","user":"5776f39de4b0979f89651643"},{"code":"(fn [x](take x (map first (iterate (fn [[a b]][b (+ a b)]) [1 1]))))","problem":26,"user":"4efcac3a535de96065cf507e"},{"problem":26,"code":"(fn xfib [count]\n  (loop [count count list [1 1]]\n    (if (= 2 count)\n      list\n      (recur (dec count) (conj list (+ (last list) (second (reverse list))))))))","user":"54653e3be4b01be26fd746da"},{"problem":26,"code":"(fn [x]\n\t(loop [result '(1 1)]\n\t\t(if (>= (count result) x)\n\t\t\t(take x (reverse result))\n\t\t\t(recur (cons (+ (first result) (second result)) result))\n\t\t)\n\t)\n)","user":"598d746ae4b02b9968b84d23"},{"problem":26,"code":"(fn fib\n     ([n]\n      (case n\n        0 []\n        1 [1]\n        (fib [1 1] n)))\n     ([x n]\n      (if (< (count x) n)\n        (fib (conj x (+ (last x) (x (- (count x) 2)))) n)\n        x)))","user":"5d887d27e4b0915913b1d3a8"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":26,"code":"(fn [n] ( let [go (fn go [i j] (lazy-seq (cons i (go j (+ i j)))))] (take n (go 1 1))))","user":"5fa416ece4b0f0ebd91b7803"},{"code":"#(map (fn fib [n]\n       (cond (<= n 1) 1\n        :else (+ (fib (- n 1))\n                 (fib (- n 2)))))\n     (range 0 %))","problem":26,"user":"4fee04a0e4b0678c553fc308"},{"code":"(fn [n] (map #(% 1) (take n (iterate #(vector (% 1) (+ (% 0) (% 1))) [0 1]))))","problem":26,"user":"526c2340e4b03e8d9a4a7281"},{"problem":26,"code":"#((fn [n acc x y]  (if (zero? n) acc (recur (dec n) (conj acc x) y (+ x y)))) % [] 1 1)","user":"5f49482ae4b0102c75033940"},{"code":"(fn[x] (take x (map first (iterate (fn [[a, b]] [b, (+ a b)]) [1 1]))))","problem":26,"user":"513c51f2e4b0d636b627c968"},{"problem":26,"code":"(fn [n]\n  \n    (take n (first (reduce (fn [[fibs p1 p2] _]\n              (let [p0 (+ p1 p2)]\n                  [(conj fibs p0) p0 p1]\n              )) [[1 1] 1 1] (range n))\n  )))","user":"58bd1ab9e4b0888cdc949d27"},{"problem":26,"code":"(fn [n] (letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n    (take n (fib 0 1))))","user":"5d1380cbe4b0902706380dba"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]]\n                              [b (+ a b)] ) [1 1])))","user":"546b24a0e4b00cfc9eacc166"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[n m]] [m (+ n m)]) [1 1]))))","user":"57131a8ee4b07c98581c3a97"},{"problem":26,"code":"(fn [n-max] \n  (loop [n 2 s '(1 1)]\n    (if (= n n-max)\n      (reverse s)\n      (recur (inc n) (conj s (+ (first s) (second s)))))))","user":"5691ef12e4b0dcc4269f40f8"},{"code":"(fn fib\n  ([target index last last_but_one current_list]\n    (cond (= target index)\n      current_list\n    :else\n      (fib\n        target\n        (+ index 1)\n        (+ last last_but_one) last\n        (concat current_list (list (+ last last_but_one)) )\n      )\n    )\n  )\n  ([target]\n    (cond\n      (< target 0) \"Fibonacci is not pleased. Try again knave.\"\n      (= target 0) '(0)\n      (= target 1) '(1)\n      :else\n        (fib target 2 1 1 '(1 1))\n    )\n  )\n)","problem":26,"user":"502be4fae4b08f5602f232eb"},{"problem":26,"code":"#((fn fib [f s li n] (if (= 0 n) \n                      (reverse li) \n                      (fib (+ f s) f (conj li (+ f s)) (dec n))))\n 1 1 '(1 1) (- % 2))","user":"5749ce09e4b009280f9f2ba0"},{"code":"#(take %\n  ((fn fib [a b]\n    (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"4ee91d00535d93acb0a6688b"},{"code":"(fn [limt] (reverse\n    (loop [x (concat [1 1]) cnt 3]\n      (if (< limt cnt)\n        x\n        (recur (conj x (+ (first x) (nth x 1)))\n               (inc cnt))))))","problem":26,"user":"50cf2267e4b0e61f11ddcd8c"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 0) []\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else (let [fib-prev (fib (- x 1))]\n            (conj fib-prev (->> fib-prev (drop (- x 3)) (apply +))))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":26,"code":"(fn fib [num]\n  (loop [x 0\n         fibs [1 1]]\n    (if (= x (- num 2))\n      fibs\n      (recur (inc x)\n             (conj fibs\n                   (+ (last fibs)\n                      (second (reverse fibs))))))))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"(fn fib[n]\n  (reverse (\n\t\t(fn fib-r[ n coll ]\n\t\t\t(if (= n 1) (rest coll) \n       \t\t\t(if (= n 2) coll\n           \t\t\t(if (= (count coll) n) coll\n               \t\t\t(fib-r n\n                   \t\t\t(cons (+ (first coll) (first (rest coll))) coll)\n                \t\t)\n            \t\t)\n        \t\t)\n    \t\t)\n\t\t)\n\t\tn '(1 1)\n\t))\n)","problem":26,"user":"4ec17677535dfed6da9c6dad"},{"code":"(fn [x]\n  ((fn fib [minus1, minus2, curEl, maxEl, l]\n     (let [cur\n       (if\n        (or (= curEl 0) (= curEl 1))\n         1\n         (+ minus1 minus2))]\n       \n       (if\n         (= curEl maxEl)\n         l\n         (fib\n          cur\n          minus1\n          (+ curEl 1)\n          maxEl\n          (conj l cur)))))\n   0 0 0 x []))","problem":26,"user":"50d2fa5ce4b049d4ed5650cf"},{"problem":26,"code":"(fn [n]\n      (take n\n            (map first\n                 (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"575117f8e4b02ea11479927e"},{"problem":26,"code":"(fn [x]\n  (letfn [(fibo [] (lazy-cat [1 1] (map + (fibo) (rest (fibo)))))]\n  (take x (fibo))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":26,"code":"(fn [x] (take x\n              ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))\n   \t\t\t\t1 1)))","user":"54d127b7e4b0e8a36923e5de"},{"problem":26,"code":";#(loop [n % out [] n1 1 n2 0]\n;  (if (= n 0) \n;    out\n;    (recur (dec n) (conj out  n1) (+ n1 n2) n1)))\n\n#(map first (take % (iterate (fn [[i1 i2]] [i2 (+ i1 i2)]) [1 1]  )))","user":"5bec37e2e4b0f319e2d7ec96"},{"problem":26,"code":"(fn [n] (loop [x '(1 1)]\n          (if (= (count x) n)\n            x\n            (recur (reverse (conj (reverse x) (+ (first (reverse x)) (second (reverse x)))))))))","user":"55f8f82be4b03cbcff9738bb"},{"problem":26,"code":"(fn fib [n]\n    (case n\n      1 '(1)\n      2 '(1 1)\n      (let [lasts (reverse (fib (dec n)))]\n        (reverse (cons (+\n                        (first lasts)\n                        (first (rest lasts)))\n                       lasts)))\n      ))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":26,"code":"#(loop [n %\n        r '(0 1)]\n  (if (= n 0)\n    (drop 2 (reverse r))\n    (recur (dec n) (conj r (+ (first r) (second r))))))","user":"5d46fbc6e4b07c84aa5ae6af"},{"code":"(fn [n]\n  (let [fib (fn [a b c]\n              (if (zero? c)\n                a\n                (recur b (+ a b) (- c 1))))]\n    (map #(fib 1 1 %) (range n))))","problem":26,"user":"529b5301e4b02ebb4ef7509f"},{"problem":26,"code":"(fn fib [n]\n(cond\n  (= n 1) [1]\n  (= n 2) [1 1]\n  :else (conj (fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)))))))","user":"552d2e4fe4b076ab5578f7e1"},{"problem":26,"code":"(fn [n] (loop [n (- n 2) fibo [1 1]] (if (= n 0) fibo (recur (dec n) (conj fibo (+ (last fibo) (last (butlast fibo))))) )))","user":"56b33058e4b0982f16b37e12"},{"problem":26,"code":"(fn fib [n] \n  (take n\n        (map first\n             (iterate (fn [[a b]] \n                        [b (+ a b)]) [1 1]))))","user":"6059f25de4b07e92fa001ad1"},{"code":"(fn [n]\n  (let [f (fn self [n]\n           (cond (<= n 1) '(1)\n                 (= n 2) '(1 1)\n                 :else (let [[a b :as xs] (self (dec n))]\n                         (conj xs (+ a b)))))]\n    (reverse (f n))))","problem":26,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn f [x] (if (< x 1) '() (if (< x 3) (concat (f (dec x)) '(1)) (concat (f (dec x)) (list (reduce + (take 2 (reverse (f (dec x))))))))))","problem":26,"user":"514d398ee4b019235f6c0583"},{"code":"(fn fib [n] (condp = n\n              1 [1]\n              2 [1 1]\n              (let [f (fib (dec n))] \n                (conj f (+ (last f) (last (butlast f)))))))","problem":26,"user":"51424cc8e4b0b50abeb46b34"},{"problem":26,"code":"(fn [n]\n  (loop [x [1 1]]\n    (if (< (count x) n)\n     (recur (conj x (+ (last x) (first (rest (reverse x)))))) x)\n    ))","user":"5be9d530e4b0f319e2d7ec79"},{"code":"#(reverse (reduce (\n  fn [acc _] (cons (+ (first acc) (second acc )) acc)\n)\n'(1 1) (range 2 %)))","problem":26,"user":"4ffa893fe4b0678c553fc3bc"},{"problem":26,"code":"(fn [n]\n  (loop [acc 2\n         ret '(1 1)]\n    (if (= acc n)\n      (reverse ret)\n      (recur (inc acc) (conj ret (reduce + (take 2 ret)))))))","user":"5d30ba40e4b01671435dbcd4"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"4ebed069535dfed6da9c6d99"},{"problem":26,"code":"(fn [n]\n  (if (< n 2)\n    [1]\n    (let [r (fn [acc e]\n             (cons (+ (first acc) (second acc)) acc))]\n      (reverse (reduce r [1 1] (range (- n 2)))))))","user":"53fd0a22e4b0de5c418485e1"},{"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    (concat (fib (- n 1)) \n            (cons (+ (last (fib (- n 1)))\n               \t\t(nth (fib (- n 1)) \n                    \t(- (count (fib (- n 1))) 2)\n               \t\t)\n            \t  )\n            '())\n\t)\n  )\n)","problem":26,"user":"51701a9ce4b034fe8eaf70f5"},{"code":"#(loop [[a b] [0 1] c % s []] (if (zero? c) s (recur [b (+ a b)] (dec c) (conj s b))))","problem":26,"user":"4f6b9d0ae4b07046d9f4efad"},{"problem":26,"code":"#(map (fn f [x] (if (< x 2)x(+ (f (- x 2))(f(- x 1)))))(range 1 (+ 1 %)))","user":"542a348be4b01498b1a71b3f"},{"problem":26,"code":"#(letfn [(fib-seq [x y]\n                  (lazy-seq\n                   (cons x (fib-seq y (+ x y)))))]\n   (take % (fib-seq 1 1)))","user":"4e7be091535db169f9c796ba"},{"problem":26,"code":"(fn generate [x]\n    (rest\n        (map (fn fbn [n]\n                (if (or (= n 1) (= n 0))\n                    n\n                    (+ (fbn (- n 1)) (fbn (- n 2))))) (range (+ 1 x)))))","user":"5f6580e7e4b02876ed9fd023"},{"code":"(fn takeFibo\n  [x]\n    (letfn [(fibo [coll a b x]\n      (if (zero? x)\n        coll\n        (recur (conj coll b) b (+ a b) (- x 1))))]\n      (fibo [1] 1 1 (- x 1))))","problem":26,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":";(fn [x] (take x '(1 1 2 3 5 8 13 21)))\n\n(fn [amount]\n  (loop [a 1\n         res [1]]\n    (if (< (count res) amount) \n      (recur (+ a (last res)) \n             (conj res a)) \n      res)))","problem":26,"user":"5231d8fae4b0e2e8de81d1fb"},{"problem":26,"code":"(fn fib\n  [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n    (let [prev-fib (fib (- n 1))\n          last-fib (last prev-fib)\n          penult-fib (second (reverse prev-fib))]\n      (concat prev-fib [(+ last-fib penult-fib)]))))","user":"59863a26e4b021a7a535fe87"},{"problem":26,"code":"(partial (fn [tail n] \n  (cond (= n 2) tail \n        :else (recur \n               (concat tail \n                     [(+ (last tail) (second (reverse tail)))]) (dec n)))) '(1 1))","user":"520fca70e4b080a8d9b9d631"},{"code":"(fn [n]\n  (loop [i 0\n         a 0\n         b 1\n         nums []]\n    (if (= i n)\n      nums\n      (recur (inc i) b (+ a b) (conj nums b)))))","problem":26,"user":"526e5be8e4b03e8d9a4a731c"},{"code":"(fn fibb [c]\n  (loop [c c f []]\n    (if (zero? c)\n      (reverse f)\n      (recur (dec c) (cons (if (< (count f) 2)\n                             1\n                             (+ (first f) (second f)))\n                           f)))))","problem":26,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn f [n] \n  (cond \n    (= n 1) [1] \n    (= n 2) [1 1] \n    :else (let [fb (f (dec n))] \n            (conj fb (apply + (take-last 2 fb))))))","problem":26,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn [n]\r\n(if (= n 3)\r\n  '(1 1 2)\r\n  (if (= n 6)\r\n    '(1 1 2 3 5 8)\r\n    '(1 1 2 3 5 8 13 21))))","problem":26,"user":"4e86fd2d535dceadca46984d"},{"problem":26,"code":"(fn [x]\n  (loop [prev 0, curr 1, i 1, res []]\n    (if (> i x)\n      res\n      (recur curr (+ prev curr) (inc i) (conj res curr)))))","user":"57e37f90e4b0bfb2137f5a9c"},{"problem":26,"code":"#(take %1 ((fn fib [a b] \n  (cons a \n    (lazy-seq (fib b (+ a b))))) 1 1))","user":"55627de1e4b0c656e3ff17d9"},{"problem":26,"code":"(fn f [n]\n  ((fn fibo [n x1 x2]\n    (if (= n 0) '()\n      (conj (fibo (dec n) x2 (+ x1 x2)) x1\n      )\n    )\n  ) n 1 1)\n)","user":"55de6fb4e4b050e68259b3e1"},{"code":";; The difficulty here is that I have\n;; no idea how to generate a sequence.\n;; I also don't know how to reference\n;; an earlier part of a sequence\n;; Also fib(0) = 0, these guys are jerks\n(fn [num]\n  (loop [index 1\n         prev 0\n         cur 1\n         result [1]]\n    (if (= index num)\n       (seq result)\n       (recur (+ 1 index) cur (+ prev cur) \n              (conj result (+ prev cur))))))","problem":26,"user":"4dc0f7ff535d020aff1edf82"},{"problem":26,"code":"(fn [x] \n  (take x (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"58a35b1ee4b02bd94d917ef3"},{"problem":26,"code":"#(loop [gen [1 1] step 2 dst %]\n   (if (> step dst) (take dst gen)\n     (recur (conj gen (reduce + 0 (take-last 2 gen))) (+ 1 step) dst)))","user":"5736e12ee4b0cd1946bd103a"},{"code":"(fn fib [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (let [f (fib (dec n))]\n      (concat f [(apply + (take-last 2 f))]))))","problem":26,"user":"4faac363e4b081705acca200"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibo [n]\n            (if (<= n 1)\n              1\n              (+ (fibo (dec n))\n                 (fibo (dec (dec n))))))]\n    (map fibo (range n))))","user":"52606318e4b03e8d9a4a7036"},{"code":"(fn [n]\n  (loop [ns '(1) i 1]\n\t(if (= n i)\n\t  (reverse ns)\n      (recur (conj ns (reduce + (take 2 ns))) (inc i)))))","problem":26,"user":"536f62aee4b0fc7073fd6e7c"},{"problem":26,"code":"(fn  [n]\n      (loop [x 1 y 1 count n res []]\n            (if (zero? count)\n                  res\n                  (recur y (+ x y) (dec count) (conj res x))\n                  )\n            )\n      )","user":"5d809b4fe4b0915913b1d36c"},{"problem":26,"code":"(fn [x] (take x (map last (iterate (fn [a] [(last a) (+ (first a) (last a))]) [0 1]))))","user":"5568749ae4b0c656e3ff1854"},{"problem":26,"code":";;(fn fib\n;;  ([n]\n;;   (fib [1 1] (- n 2)))\n;;  ([xs n]\n;;   (if (zero? n)\n;;    xs\n;;    (recur (conj xs (+ (last xs) ((comp last butlast) xs))) (dec n)))))\n;;\n\n(fn fib-seq[length]\n  (letfn [(fib[length]\n            (loop [a 1\n                   b 1\n                   c length]\n              (if (zero? c) a\n                  (recur b (+ a b) (dec c)))))]\n  (map fib (range length))))","user":"5980f91ae4b021a7a535fddd"},{"code":"(let [f (fn fib [n]\r\n          (if (< n 2)\r\n            n\r\n            (+ (fib (- n 1)) (fib (- n 2)))))]\r\n  #(map f (range 1 (inc %))))","problem":26,"user":"4dfd4ba8535d04ed9115e781"},{"problem":26,"code":"#_(fn fib [x] (if (or (= 1 x) (= 2 x)) 1 (+ (fib (dec x)) (fib (- x 2)))))\n\n(fn fib \n  ([n] (fib 2 1 1 n [1 1]))\n  ([i a1 a2 n l]\n   (if (< i n)\n     (recur (inc i) a2 (+ a1 a2) n (conj l (+ a1 a2)))\n     l)))","user":"55e87696e4b0121d4835fd93"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a) (last (butlast a))))) [1 1] (range (- % 2)))","user":"58cba946e4b03c36ff7e584f"},{"problem":26,"code":"(fn fibo [inte]\n  (let [stop inte]\n    (loop [i 0\n           acc []]\n      (if (= i stop)\n        acc\n        (recur (inc i) (conj acc ((fn fib [nums]\n                                    (if (<= nums 2)\n                                      1\n                                      (+ (fib (- nums 1)) (fib (- nums 2))))) (inc i))))))))","user":"5b611666e4b0c6492753e70d"},{"code":"#(case % 3 '(1 1 2) 6 '(1 1 2 3 5 8) 8 '(1 1 2 3 5 8 13 21))","problem":26,"user":"5315a4f0e4b08068f379ed2e"},{"problem":26,"code":"#(map (fn f [x]\n         (if (< x 2) 1\n           (+ (f (- x 1)) (f (- x 2)))))\n      (range %))","user":"5c53127ee4b0fb8c5ffd99ef"},{"problem":26,"code":"(fn [n] \n  (->> (iterate (fn [[a b]] \n                  [b (+ a b)]) \n                [1 1])\n       (map first) \n       (take n)))","user":"55507a1ae4b00713264bd9a7"},{"problem":26,"code":"(fn [x](reduce\n  (fn [a b] (conj a (+' (last a) (last (butlast a)))))\n  [1 1]\n  (range (- x 2))))","user":"5ffd3422e4b074f607df65f7"},{"code":"(fn fib [n]\n  (cond\n    (= n 0) nil\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else \n      (let \n        [prev (fib (- n 1))\n         rprev (reverse prev)\n         next (+ (first rprev) (second rprev))\n         rresult (conj rprev next)]\n         (reverse rresult))))","problem":26,"user":"4fea34bde4b0140c20fb9c00"},{"problem":26,"code":"(fn [n] (map #(first %) (take n (iterate #( conj [] (+ (first %) (second %)) (first %) ) [1 0]))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":26,"code":"(fn fib \n  ([x] (fib x 1 1))\n  ([x y z] (if (= x 1) (list y) (cons y (fib (dec x) z (+ y z))))))","user":"5747e22ce4b009280f9f2b7c"},{"code":"#(reduce (fn [a e] (conj a\n  (+ (a e) (a (inc e))))) [1 1] (range (- % 2)))","problem":26,"user":"4f1bb9d8535d64f60314647d"},{"code":"#(take %\n      ((fn fib[] (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]) ))))","problem":26,"user":"52a144b0e4b04e0c58e87bd6"},{"problem":26,"code":"(fn [n]\n   (loop [f1 1 f2 1 r '(1 1) k 2]\n      (if (= k n)\n         (reverse r)\n         (recur f2 (+ f1 f2) (cons (+ f1 f2) r) (inc k)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"(fn fib [n]\n  (if (= 1 n) [1]\n    (if (= 2 n) [1 1]\n      (conj (fib (- n 1)) (+ (first (reverse (fib (- n 1))))\n                      (second (reverse (fib (- n 1)))))))))","problem":26,"user":"50bddea1e4b0594b91591c85"},{"code":"#(loop [fib () n % pre 0 cur 1]\n  (if (= n 0)\n    (reverse fib)\n    (recur (cons cur fib) (dec n) cur (+ pre cur))))","problem":26,"user":"4ff5a525e4b0678c553fc36d"},{"code":"(fn fb\n  [i]\n  ;Defaults first\n    (if (= i 1) [1]\n\t  (if (= i 2) [1 1]\n        ;Now we're going to build up the list from the start\n        ;We start with the [1 1] list\n        ;and then we reduce it in i - 2 steps (we already had the 1st 2)\n        ;to the full vector. Each step adds one number\n        (reduce (fn \n                  [l nr] \n                  ( conj l \n                    (+ \n                     (nth l ( - (count l) 1 ) )\n                     (nth l ( - (count l) 2 ) ) ) ) )\n                [1 1] \n                (repeat (- i 2) :foo) ) ) ) )","problem":26,"user":"5230d490e4b0035e815da396"},{"code":"(fn [n]\n      (loop [cnt n seq '(1) ppv 0 pv 1]\n    (if (zero? cnt)\n      (take n (reverse seq))\n      (recur (dec cnt) (cons (+ ppv pv) seq) pv (+ ppv pv))\n    )))","problem":26,"user":"4e8f5dd1535d65386fec214b"},{"problem":26,"code":"#(for [cnt (range %)] \n   (loop [n 1 m 1 c cnt] \n     (if (not (zero? c))\n       (recur m (+ n m) (dec c)) n)))","user":"545537c1e4b0e397800069dd"},{"code":"(fn fib [x]\n  (let [last1 #(last %)\n  last2 #(first (rest (reverse %)))\n        fib1 (fn [i x coll]\n                 (if (>= i x)\n                   coll\n                   (recur (inc i) x\n                         (conj coll\n                               (+ (last1 coll) (last2 coll)))))\n                 )]\n    (condp = x\n      0 [1]\n      1 [1 1]\n      (fib1 2 x [1 1]))))","problem":26,"user":"4e4bd94b535dc968683fc4d7"},{"code":"(fn first-n-fib [n]\n  (map (memoize (fn fib [m] (cond (= m 0) 1 (= m 1) 1 :else (+ (fib (dec m)) (fib (- m 2)))))) (range n))\n)","problem":26,"user":"51f09f3de4b0274c496158d7"},{"problem":26,"code":"#(loop [v [1 1]]\n   (if (= (count v) %)\n     (apply list v) \n     (recur (conj v (apply + (subvec v (- (count v) 2)))))\n     )\n   )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":26,"code":"#(take % (map first (iterate (fn\n [[a b]] [b (+ a b)]) [1 1])))","user":"5fedff0ee4b05ac5b16ea1d0"},{"code":"#(loop [n %, acc [1 0]]\n  (if (< n 2)\n(rest (reverse acc))\n(recur (- n 1)\n(cons (+ (first acc)\n(second acc))\nacc))))","problem":26,"user":"4e36df14535deb9a81d77f35"},{"problem":26,"code":"#(let [c %] (loop [i 0 a 1 b 1 r []] (if (>= i c) r (recur (inc i) b (+ a b) (conj r a)))))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn [n]\n  (loop [n n s '[1 1]]\n    (if (< (count s) n)\n      (recur n (conj s (+ (first (reverse s)) (second (reverse s))  ) ))\n      s)))","problem":26,"user":"51000111e4b00d7ad4cab15e"},{"problem":26,"code":"(fn fib\n   ([x]\n      (fib [1 1] x)\n   )\n   ([xs, x]\n       (if (< (count xs) x)\n          (fib \n            (conj xs \n                  (+ (nth xs (- (count xs) 1)) (nth xs (- (count xs) 2)))) \n                     x)\n       xs\n          )  \n   ))","user":"54258e71e4b01498b1a71b0e"},{"problem":26,"code":"(fn [final-length]\n  (let [fibonacci-counter (fn [remaining so-far]\n                            (if (= 0 remaining) so-far\n                              (recur (dec remaining) (conj so-far (+\n                                                                   (last so-far)\n                                                                   (last (butlast so-far)))))))]\n        (fibonacci-counter (- final-length 2) [1 1])))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1)))","user":"58cd65fae4b03c36ff7e5889"},{"code":"(fn fib [n]\n  (let [n (int (Math/abs n))]\n    (case n\n      0 []\n      1 [1]\n      2 [1 1]\n      (let* [p (- n 1) prev (fib p)]\n            (conj prev (+' (nth prev (- p 1)) (nth prev (- p 2))))))))","problem":26,"user":"51f55bdae4b0abb92f97f9d0"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b] \n\t(cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5869a49fe4b0f14aab7c88a9"},{"code":"(fn [n]\n  (take n\n        ((fn fib [a b] \n           (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"51469a3ae4b04ef915e3731b"},{"code":"(fn [n]\n  (map (fn fib [n2]\n    (if (< n2 2) 1\n      (+ (fib (- n2 2)) (fib (- n2 1)))))\n  (range 0 n)))","problem":26,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":26,"code":"#(loop [a % i 2 x [1 1]]\n  (if (= a i)\n  x\n  (recur\n    a\n    (inc i)\n    (conj x (reduce + (take-last 2 x))))\n  )\n  )","user":"59551e04e4b066ee0a44af20"},{"problem":26,"code":"#(let [fibs (fn fibs [a b]\n                (lazy-seq\n                 (cons b (fibs (+ a b) a))))]\n  (take % (fibs 1 1)))","user":"4db863d7535d1e037afb2190"},{"problem":26,"code":"(fn [n]\n  (loop [fib0 1, fib1 1, fibos []]\n    (if (= n (count fibos))\n      fibos\n      (recur fib1 (+ fib0 fib1) (conj fibos fib0)))))","user":"5e76274ce4b085ba37836deb"},{"code":"(fn [n] (map last (map first (take n (iterate (fn f [x] (list (list (last (last x)) (+ (first (last x)) (last (last x))) ))) '((0 1)))))))","problem":26,"user":"4ded582d535d08e6dec9fe0c"},{"code":"(fn fib [x]\n  (loop [li '(), i x]\n    (if (< 0 i)\n      (if (< (count li) 2)\n        (recur (conj li 1) (dec i))\n        (recur (conj li (+ (first li) (second li))) (dec i)))\n      (reverse li))))","problem":26,"user":"526f0a68e4b03e8d9a4a7348"},{"problem":26,"code":"(fn fib\n  ([x] (fib x [1 1]))\n  ([x l]\n   (if (= x (count l))\n     l\n     (recur x (conj l (+ (last l) (nth l ((comp dec dec)(count l))) )) ))))","user":"56d8fa43e4b0ea9b8538f7ec"},{"problem":26,"code":"(fn fib [n] (if (< n 3)\n              (if (= 1 n)\n                [1]\n                [1 1])\n              (let [prev (fib (- n 1))] (conj prev (+ (last prev) (second (reverse prev)))))))","user":"54eee3a3e4b024c67c0cf879"},{"code":"#(take %\n  (map first\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f734e93e4b07046d9f4f043"},{"problem":26,"code":"(fn [n]\n  (loop [x 1\n        ls []] \n        (println ls \" + \" x)\n      (if (> x n)\n        ls\n        (recur (inc x) (if (< x 3) (conj ls 1) (conj ls (+ (nth ls (- x 2)) (nth ls (- x 3) )))))\n          \n        )\n      )\n  )","user":"5e6e98dfe4b04a83ad7cd29c"},{"problem":26,"code":"(fn [x]\n\t(reverse\n           (loop [cnt (- x 2) acc '(1 1)]\n             (if (zero? cnt)\n               acc\n\t(recur (dec cnt) (conj acc (reduce + (take 2 acc))))))))","user":"53c06438e4b0c98a41f5ccb0"},{"problem":26,"code":"#(loop [i 0 out '(1 1)] (if (>= i (- % 2)) (reverse out) (recur (inc i) (conj out (+ (first out) (second out))))))","user":"54b2e881e4b09f271ff37d32"},{"code":"(fn [n] (letfn [(fib [a b] (lazy-seq (cons a (fib b (+ b a)))))] (take n (fib 1 1 ))))","problem":26,"user":"4ffa213ee4b0678c553fc3b7"},{"code":"(fn [x] \n  (->> (iterate (fn [[x y]] [y (+ x y)]) [1 1])\n       (map first)\n       (take x)))","problem":26,"user":"4e50ad74535dc968683fc4ec"},{"problem":26,"code":"(fn [n]\n        (let [f (fn fib [a b]\n                  (concat [a b]\n                          (lazy-seq (fib (+ a b) (+ a b b)))))]\n          (take n (f 1 1))))","user":"546c4377e4b00cfc9eacc177"},{"problem":26,"code":"(fn fib [size] (if (< size 2) [1] (let [prev (fib (dec size))] (conj prev (apply + (take-last 2 prev))))))","user":"58791973e4b01531a375eac5"},{"problem":26,"code":"(fn\n  [quantidade]\n  (loop [posicao (dec quantidade) \n         lista-fibonatti [1]\n         ultimo-numero 0]\n    (if (= posicao 0)\n      lista-fibonatti\n      (recur (dec posicao) (conj lista-fibonatti (+ ultimo-numero (last lista-fibonatti))) (last lista-fibonatti)))\n    )\n\n  )","user":"5777bb7ee4b0979f8965164d"},{"code":"(fn [x]\n  (loop [n x l [1 1]]\n    (if (<= n 2) \n      l\n      (recur (- n 1) (conj l (+ (last l) (first (rest (reverse l)))))))))","problem":26,"user":"51a4b5dee4b0def3c5c58697"},{"problem":26,"code":"(fn [n]\n(loop [x 1 y 1 res [] cnt 0 n n]\n  (if (>= cnt n)\n    res\n    (recur y (+ x y) (conj res x)(+ cnt 1) n)))\n  )","user":"563933a6e4b0bfe05bf117f1"},{"code":"#(take % ((fn fibonacci-numbers []\n        ((fn this [a b] (lazy-seq (cons a (this b (+ a b))))) 1 1))))","problem":26,"user":"5279096ce4b03e8d9a4a752d"},{"code":"(fn fib-seq [max]\n  (take max\n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1)))","problem":26,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn fib [n] \n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"510967aae4b07c05fdf6dc0f"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [i]\n            (if (>= 2 i)\n              1\n              (+ (fib (- i 1)) (fib (- i 2)))))]\n    (map fib \n         (take n \n               (iterate \n                #(inc %) 1)))))","user":"55096255e4b06e50f9beb116"},{"problem":26,"code":";; review\n#(take % (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1])))","user":"59e5b6a1e4b08badc2a0c55b"},{"code":"(fn [n]   \n (reverse ((fn  [x coll] \n   (cond\n     (= x 0) coll\n     true (recur \n       (dec x)\n       (cons \n         (+ (first coll) (first (rest coll)))\n         coll\n       )\n     )\n   )\n ) (- n 2) (list 1 1) )\n))","problem":26,"user":"50217818e4b00bba4502f7a7"},{"code":"#(reduce (fn [x y]\n           (conj x (+ (last (butlast x)) (last x))))\n        [1 1]\n        (range (- % 2)))","problem":26,"user":"5339edfbe4b0e30313ee6cb3"},{"problem":26,"code":"(fn [n]\n   (->> [1 1]\n        (iterate (fn [[a b]] [b (+' a b)]))\n        (map first)\n        (take n))\n   )","user":"5dd90651e4b0948ae9d9ad97"},{"problem":26,"code":"(fn [n] \n        (take n \n            (map first\n                (iterate #(list (last %) (apply + %) ) '(1 1))\n            )\n        ))","user":"59f67819e4b0966464fe6ad3"},{"problem":26,"code":"(fn [times]\n  (loop [iter (- times 2), fibs '(1 1)]\n        (if (= iter 0)\n          (reverse fibs)\n          (recur (dec iter) (conj fibs (+ (first fibs) (nth fibs 1)))))))","user":"514872f5e4b05514c84b7cbe"},{"code":"#(map (fn $ [i] (if (<= i 1) 1 (+ ($ (- i 1)) ($ (- i 2))))) (range 0 %))","problem":26,"user":"53712c03e4b0fc7073fd6ea9"},{"problem":26,"code":"(fn [x] (nth (iterate #(conj %1 (+ (last %1) (last (butlast %1)))) [1 1]) (- x 2)))","user":"5b03063de4b0cc2b61a3bd5b"},{"problem":26,"code":"(fn [n] (case n\n          (1) '(1) \n          (2) '(1 1) \n          (reverse \n          \t(reduce\n            \t(fn [col _] (cons (+ (first col) (second col)) col))\n             \t'(1 1) \n             \t(range 3 (inc n))))))","user":"505fdf63e4b08f2a82ad10b9"},{"problem":26,"code":"#((fn fib [n xs] (if (> n 0) (fib (dec n) (conj xs (+ (last xs) (second (reverse xs))))) xs)) (- % 2) [1 1])","user":"56ffeafee4b08d47c97781c2"},{"code":"(fn fib\n  ([x] (take x (concat [1 1] (fib 1 1))))\n  ([a b]\n     (let [n (+ a b)]\n       (lazy-seq (cons n (fib b n))))))","problem":26,"user":"53396c03e4b0e30313ee6ca7"},{"code":"(fn [n]\n  (letfn [(make-fib [n0 n1]\n            (lazy-seq (cons n0 (make-fib n1 (+ n0 n1)))))]\n    (take n (make-fib 1 1))))","problem":26,"user":"4ef0a38e535dced4c769f20b"},{"problem":26,"code":"(fn fib [x] \n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"57a8eba2e4b0a96607956225"},{"code":"(fn fibonacci [num]\n  (loop [iter 0\n         a 0\n         b 1\n         res []]\n    (if (= iter num)\n      res\n      (recur (inc iter) b (+ a b) (conj res b)))))","problem":26,"user":"50763574e4b0a894bb95bf3d"},{"problem":26,"code":"(fn fibo [n]\n  (loop [i 1\n         result nil\n         ]\n    (if (> i n)\n      (reverse result)\n      (let [current (cond\n                      (= i 1) 1\n                      (= i 2) 1\n                      :else (+ (first result) (second result)))]\n        (recur (inc i) (cons current result))\n\n        )\n\n      )\n\n    )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b) )))) 1 1) )","problem":26,"user":"534adc16e4b084c2834f4a73"},{"problem":26,"code":"#(loop [a 1\n        b 1\n        n %\n        ans `()]\n   (if (= n 0)\n     (reverse ans)\n     (recur b (+ a b) (dec n) (conj ans a))))","user":"55c4b23de4b0e31453f649a3"},{"problem":26,"code":"(fn [n]\n  (loop [sec [1 1]]\n    (if (>= (count sec) n)\n      sec\n      (recur (conj sec (+ (last sec) (nth sec (- (count sec) 2))))))))","user":"56f8bc1de4b07572ad1a88a6"},{"problem":26,"code":"(fn [m]\n  (letfn [(append-fibo [n acc] \n                       (cond\n                        (= n 0) (vector 1)\n                        (= n 1) (conj acc 1)\n                        (= n 2) (conj acc 2)\n                        :else (conj acc (+ (second (reverse acc)) (last acc)))))\n          (recur-fibo [n maxv acc]\n                      (if (= n maxv)\n                        acc\n                        (recur (inc n)\n                               maxv\n                               (append-fibo n acc))))]\n    (recur-fibo 0 m [])))","user":"55a1ba5ee4b0acc240e31517"},{"code":"(fn [x] \n  (take x\n        ((fn fib [a b]\n        \t(cons a (lazy-seq (fib b (+ a b))))) \n\t      1 1)))","problem":26,"user":"53036d2ce4b0d8b024fd3741"},{"problem":26,"code":"(fn omg [am] (take am ((fn lol [fir sec] (cons fir (lazy-seq (lol sec (+ fir sec))))) 1 1)))","user":"5485d169e4b0e286459a11b2"},{"code":"(fn [x] (map (fn [f]\n               (if (zero? f)\n                 0\n                 (if (= f 1)\n                   1\n                   (loop [i 2 r1 0 r2 1]\n                     (if (= i f)\n                       (+ r1 r2)\n                       (recur (inc i) r2 (+ r1 r2))))))) (range 1 (inc x))))","problem":26,"user":"52d809bde4b09f7907dd1384"},{"code":"#(->> [1 1] (iterate (fn [[a b]] [b (+ a b)])) (map first) (take %))","problem":26,"user":"4ef3db04535dced4c769f22e"},{"code":"(fn [x] \n  (for [v  (iterate (fn [[a b c]] [b (+ a b) (inc c)]) [1 1 0])\n        :while (< (nth v 2) x)]\n    (first v)))","problem":26,"user":"5050b107e4b063148f524126"},{"problem":26,"code":"(fn\n  [n]\n  (loop [res ()\n         a 1\n         b 1\n         index 1]\n    (if (> index n)\n      (reverse res)\n      (recur (cons a res) b (+' a b) (inc index)))))","user":"5aa2f1dee4b0d174b936c865"},{"problem":26,"code":"#(take %1 (map first(iterate (juxt second (partial apply +)) [1 1])))","user":"5c712fcce4b0fca0c162278e"},{"problem":26,"code":"#(loop [x 2\n       fib [1 1]]\n  (if (< x %)\n    (recur (inc x) (conj fib (apply + (take-last 2 fib))))\n    fib))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [n] (loop [fib [1 1] mn 2] (if (= n mn) fib (recur (conj fib (apply + (take-last 2 fib))) (+ mn 1)))))","problem":26,"user":"4f307b02e4b0d6649770a079"},{"code":"#(take % (map first (iterate (fn [[f s]] [s (+ f s)]) [1 1])))","problem":26,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [n] \n    ((fn fib [n v] \n    \t(if (>= (count v) n) \n\t    v \n\t    (fib n (conj v (reduce + (take-last 2 v))))))\n    n [1 1]))","problem":26,"user":"539e5d76e4b0ca733b974486"},{"code":"(fn fib\n  ([n] (fib (- n 2) '(1 1)))\n  ([n result] ( if (= n 0) (reverse result) (recur (- n 1) (cons (+ (first result) (second result))  result))))\n)","problem":26,"user":"50aca31fe4b071b89ef26230"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1]\n         i 2]\n    (if (= i n)\n      result\n      (recur (conj result (+ (last result) (nth result (- (count result) 2)))) (inc i)))))","user":"5d9e8e40e4b000c986472bc2"},{"problem":26,"code":"(fn [n]\n    (loop [result []\n           previous '()\n           i 1]\n      (if (> i n)\n        result\n        (let [s (reduce + previous)\n              current (if (= 0 s) 1 s)]\n          (recur\n            (conj result current)\n            (conj\n              (if (< (count previous) 2)\n                previous\n                (take 1 previous))\n              current)\n            (inc i))))))","user":"579dd954e4b05b1deef9ae1b"},{"code":"#(map \n (fn f [n]\n  (case n\n    0 0\n    1 1\n    (+ (f (dec n)) (f (- n 2)))))\n (range 1 (inc %)))","problem":26,"user":"5272e1b6e4b03e8d9a4a745a"},{"problem":26,"code":"#(take % ((fn fib\n           ([] (fib 1 1))\n           ([pprev prev]\n            (lazy-seq (cons pprev (fib prev (+ pprev prev))))))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":26,"code":"#(loop [nums [1 1]\n        iter (- % 2)]\n   (if (<= iter 0)\n     nums\n     (recur (conj nums (apply + (take-last 2 nums))) (dec iter))))","user":"56685a73e4b04acd4f672de5"},{"problem":26,"code":"(fn [x]\n  (reduce (fn [fib-list _]\n            (concat fib-list [(reduce + (take-last 2 fib-list))]))\n          '(1 1) (range (- x 2))))","user":"58042984e4b0a837a8b30ca3"},{"problem":26,"code":"(fn [x]\n  (cond\n   (= x 1) 1\n   (= x 2) '(1 1)\n   :else\n   (loop [i 3 n '(1 1)]\n     (if (> i x)\n       (reverse n)\n       (recur (inc i) (conj n (+ (second n) (first n))))))))","user":"55aaa36fe4b0988bba2ad94f"},{"problem":26,"code":"#(reverse (reduce (fn [a b] (conj a ((fn fib [x] (if (= x 0) 1 (if (= x 1) 1 (+ (fib (- x 1)) (fib (- x 2)))))) b))) () (range %)))","user":"54246d6de4b01498b1a71aec"},{"problem":26,"code":";; I looked up the function to generate the fibs.\n;; Sue me.\n\n#(take % \n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5646276de4b0284900eef60e"},{"problem":26,"code":"(fn [x]\n  (take x ((fn fib[a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"5a5d693ce4b0512ff01cd923"},{"problem":26,"code":"(fn [x]\n  ( take x (map first (iterate (fn [ [ a b] ] [ b (+ a b) ]) [ 1 1]))) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":26,"code":"#(letfn [(fib-seq []\n           ((fn rfib [a b] \n              (cons a (lazy-seq (rfib b (+ a b)))))\n            1 1))]\n   (take % (fib-seq)))","user":"541fcf1ee4b01498b1a71a9c"},{"problem":26,"code":"#(let [fib ((fn f [] (list* 1 1 (lazy-seq (map + (f) (drop 1 (f)))))))] (take % fib))","user":"5bc20634e4b07a9b28b10022"},{"problem":26,"code":"(fn [n]\n  (let [fib-step (fn my-fib [n]\n                   (cond (= n 0) 1 \n                         (< n 4) n\n                         :else\n                     (+ (my-fib (- n 1))\n                        (my-fib (- n 2)))))\n        fibs (map fib-step (range))]\n    (take n fibs)))","user":"54f14aa6e4b024c67c0cf8af"},{"code":"(fn [n]\n  (map (fn fib [x] (if (or (= 1 x) (= 2 x)) 1 (+ (fib (dec x)) (fib (- x 2))))) (range 1 (inc n))))","problem":26,"user":"50ebd63ce4b04edc3377703c"},{"code":"(fn [x] (loop [n x\n               p 0\n               acc 1\n               result []]\n          (if (zero? n)\n            result\n            (recur (dec n) acc (+ p acc) (conj result acc)))))","problem":26,"user":"52865f41e4b0239c8a67ae15"},{"problem":26,"code":"#(loop [i % coll '(1 1)]\n   (if (= i 2)\n     (reverse coll)\n     (recur (dec i)\n            (conj coll (+ (first coll) (second coll))))))","user":"58dcae01e4b0a4d5acaab6a4"},{"problem":26,"code":"(let [n-fib (fn fibs [x] (if  (or (= 1 x) (= 2 x)) 1 (+ (fibs (- x 1)) (fibs (- x 2)))))] #(map n-fib (range 1 (+ 1 %))))","user":"57c58ad6e4b05aa3c4741ce7"},{"code":"(fn fib[num]\n      (reverse (\n  (fn infib [n]\n\t\t(cond\n\t\t\t(= n 1) '(1)\n\t\t\t(= n 2) '(1 1)\n\t\t\t:else (\n\t\t\t\tlet [f (infib (dec n))]\n\t\t\t\t(conj \n\t\t\t\t\tf \n\t\t\t\t\t(+ (first f) (first (rest f)))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n       num))\n)","problem":26,"user":"4f044e44535dcb61093f6bb9"},{"problem":26,"code":"(fn [n]\n  (let [f (fn [n sq]\n            (if (= (count sq) n)\n              sq\n              (recur n (conj sq (if (< (count sq) 2)\n                                  1\n                                  (reduce + (take-last 2 sq)))))))]\n    (f n [])))","user":"58328117e4b089d5ab817c7d"},{"problem":26,"code":"#(->(map first (take % (iterate (fn [v] (vector (second v) (+ (first v) (second v)))) [1 1]))))","user":"55b544e2e4b01b9910ae2986"},{"code":"#(take % (map first (iterate (fn [[x y]]\n                        [y (+ x y)]) [1 1])))","problem":26,"user":"52eb400ee4b0705949c4443b"},{"problem":26,"code":"#(loop [x %\n           y 1\n           xs '(1)]\n      (cond\n        (= x 1) (reverse xs)\n        :else (recur (- x 1) (+ y (first xs)) (conj xs y))))","user":"5a8bc2a1e4b05369db4d24ef"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b]\n              (lazy-seq\n               (cons a\n                     (lazy-seq (fib b (+ a b))))))]\n    (let [fibseq (fib 1 1)]\n      (take n fibseq))))","user":"571d063ee4b0145328a76272"},{"code":"; take number\n; add to previous\n; add to end of list\n\n#(take % (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"50481532e4b0ec70b3ef8d96"},{"code":"(fn [n] \n  (take n\n    (map second\n    (iterate (fn [x] (list (second x) \n                      (reduce + x)))\n    '(0 1)))))","problem":26,"user":"4ff9f5c5e4b0678c553fc3b4"},{"problem":26,"code":"(fn fib-seq [n]\n  (map (fn fib [x] (if (or (= x 1) (= x 0))\n                 1\n                 (+ (fib (- x 1)) (fib (- x 2)))) )\n       (range n)))","user":"57756264e4b0979f89651619"},{"problem":26,"code":"(fn\n    [x]\n    (map\n      first\n      (take\n        x\n        (iterate (fn [[x y]] [(+ x y) x]) [1 0]))))","user":"5c9dcb36e4b048ec896c5b1d"},{"code":"(fn fibonacci [x]\n  (loop [nums '(1 0)]\n    (if (= (count nums) (+ x 1))\n      (rest (reverse nums))\n      (recur (cons (+ (nth nums 0) (nth nums 1)) nums))\n    )\n  )\n)","problem":26,"user":"527c2ac9e4b03e8d9a4a75b7"},{"code":"#(loop [  output [1 1] ] \n  (if (< (count output) %1)\n     (recur  (conj output (+ (last output) (get output (- (count output) 2) ) ) ) )\n      output\n  )\n)","problem":26,"user":"52da7ae5e4b09f7907dd13b8"},{"code":"#(take % \n  ((fn f [n n2]\n    (lazy-seq (cons n2 (f n2 (+ n2 n)))))0 1))","problem":26,"user":"4f7869c2e4b0fbe0118ec589"},{"problem":26,"code":"(fn fibo\n  [n]\n  (cond\n    (= n 1) [1]\n    (= n 2)  [1 1]\n      :else (let [previous (fibo (dec n))\n                  nn (get previous (- n 2))\n                  nnn (get previous (- n 3 ))]\n              (conj previous (+ nn nnn)))))","user":"5df53ab7e4b03c219ef1a38e"},{"problem":26,"code":"(fn [s] (take s ((fn f [a b] (lazy-seq (cons a (f b (+ a b))))) 1 1)))","user":"5addadfce4b0837691e92c13"},{"problem":26,"code":"(fn [count]\n                 (letfn [(fibs-from [n m]\n                         (cons m (lazy-seq (fibs-from m (+ m n)))))]\n                   (take count (fibs-from 0 1))))","user":"5461dc79e4b01be26fd746a8"},{"problem":26,"code":";(fn [x]\n;  (loop [n 1\n;         r []]\n;    (cond\n;     (= n 1) (recur 2 (conj r 1))\n;     (= n 2) (recur 3 (conj r 1))\n;     (> n x) r\n;     :else (recur (inc n) (conj r (+ (r (- n 2)) (r (- n 3))))))))\n\n#(take % (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"55236ad6e4b0882d96d091b1"},{"problem":26,"code":"#(->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n\t  (map first)\n\t  (take %))","user":"55cdc576e4b0e31453f64a1f"},{"problem":26,"code":"(fn fib [n]\n   (if (zero? (dec (dec n)))\n     '(1 1)\n     (let [res (fib (- n 1))]\n       (concat res (list (reduce + (take-last 2 res)))))))","user":"5d7d17ece4b02e6b30c93558"},{"problem":26,"code":"#(loop [cnt 2 res [1 1]]  \n    ( cond \n      (= % 1) [1]\n      (= cnt %) res\n      :else \n      (recur (inc cnt) (conj res (+ (last (butlast res)) (last res))))\n   \n ))","user":"59f58103e4b0966464fe6ac0"},{"code":"#(reverse (nth (iterate (fn [x] (cons (+ (first x) (or (second x) 0)) x)) '(1)) (dec %1)))","problem":26,"user":"4ea87a83535d7eef308072fb"},{"problem":26,"code":"#( sequence (loop [i 3 y [1 1] ] \n\t(if (>  i  % ) y    \n\t\t(recur (inc i)  \n\t\t\t\t\t(\n\t\t\t\t\t  (fn[ x]  \n\t\t\t\t\t\t  (conj x  \n\t\t\t\t\t\t\t(+ (last x) (last (butlast x)) )\n\t\t\t\t\t\t  )\n                                           ) \n\t\t\t\t\t   y \n\t\t\t\t\t)\n \t\t\t\t    \n\t\t\t\t\n\t\t)\n\t )  \n    ) \t\n    )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":26,"code":"(fn fib [n]\n  (take n '(1 1 2 3 5 8 13 21)))","user":"578e8192e4b0ebec4cfb7585"},{"problem":26,"code":"(fn fibonacci [x] (rest ((fn internal-fibonacci [x] (if (<= (+ 1 x) 1) [1] (conj (internal-fibonacci (- x 1)) (reduce + (internal-fibonacci (- x 2)))))) x)))","user":"6093cc08e4b00e9e6653c3e1"},{"code":"(fn [n] (reverse ((fn [a b n acc] (if (= n 0) acc (recur b (+ a b) (- n 1) (cons b acc)))) 0 1 n '())))","problem":26,"user":"5137efaae4b0a5db03d727d2"},{"code":"(fn fib [n]\n  (take n\n    (map first\n      (iterate\n        (fn [[a b]]\n          [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4ee2da14535d10e5ff6f536c"},{"code":"(fn [n]\r\n  (loop [a 1\r\n         b 1\r\n         c 1\r\n         acc [a]]\r\n    (if (= c n)\r\n      acc\r\n      (recur b (+ a b) (inc c) (conj acc b)))))","problem":26,"user":"4e22b78b535d04ed9115e81e"},{"problem":26,"code":"#(reverse (loop [l '(1 1) n %] (if (= n 2) l (recur (conj l (+ (first l) (second l))) (- n 1)))))","user":"5ccf2dc3e4b0ccb0619628c2"},{"problem":26,"code":"#(loop [n 0 l [] a 1 b 1]\n   (if (= n %)\n     l\n     (recur (inc n) (conj l a) b (+ a b))))","user":"5d439775e4b07c84aa5ae696"},{"code":"(fn [x] \n  (cond\n    (= x 3) `(1 1 2)\n    (= x 6) `(1 1 2 3 5 8)\n    (= x 8) `(1 1 2 3 5 8 13 21)))","problem":26,"user":"5052ab7ee4b0a561d07d8f20"},{"code":"(fn fib [n]\n  (if (= n 2)\n    '(1 1)\n    (let [s (fib (dec n))]\n      (concat s [(+ (last s) (last (drop-last s)))]))))","problem":26,"user":"50748923e4b054001656acd3"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2) x (+ (fib (- x 2)) (fib (- x 1))))) (range 1 (+ 1 %)))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":26,"code":"(fn [n]\n     (take n (\n              (fn fib ([] (fib 1 1))\n                ([n1 n2] (cons n1 (lazy-seq (fib n2 (+ n1 n2)))))\n                )\n              )))","user":"5e317676e4b05b4b01516229"},{"problem":26,"code":"(fn [n] (loop [c (- n 2) ss '(1 1)]\n        (if (> c 0)\n          (recur (dec c) (conj ss (+ (first ss) (second ss))))\n          (reverse ss))))","user":"5679a4d0e4b05957ce8c618d"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"55b0cc57e4b002ce9d5cbc25"},{"problem":26,"code":"(fn fib [depth]\n  (if (< depth 2) \n    [1]\n    ((fn fib- [run depth list]\n  (if (= run depth)\n    list\n    (if (< run 2)\n      (recur (inc run) depth (conj list 1))\n      (let [number (+ (last list) (nth list (dec (dec (count list)))))]\n        (recur (inc run) depth (conj list number))))))\n 0 depth [])))","user":"55ae1b68e4b03311e7b732b4"},{"problem":26,"code":"(fn [n] (loop [a 0\n               b 1\n               x n\n               acc []]\n          (if (pos? x)\n            (let [v (+ a b)]\n              (recur b v (dec x) (conj acc b)))\n            acc)))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":26,"code":"(fn fib [to]\n  (loop [current_pos (- to 2) result [1 1]]\n    (if (pos? current_pos)\n      (recur (dec current_pos) \n             (conj result (apply + (take-last 2 result))))\n      result)))","user":"5b3ef412e4b02d533a91bc06"},{"code":"(fn [n]\n  (loop [cnt (- n 2) a 1 b 1 fs '(1 1)]\n    (if (zero? cnt)\n      fs\n      (recur (dec cnt) b (+ a b) (concat fs (list (+ a b)))))))","problem":26,"user":"52a7c82ae4b0c58976d9ac21"},{"code":"(fn[z]( for [a  (range 0 z)]  ((fn f[x] (if (> x 1) (+ (f (dec x)) (f (dec (dec x)))) 1 )) a)))","problem":26,"user":"506ee0f4e4b09350ab4199f2"},{"problem":26,"code":"(fn [n] \n  (take n\n        (map second (iterate (fn [[prev curr]]\n           [curr (+ prev curr)]) [0 1]))))","user":"578d230fe4b0ebec4cfb7564"},{"problem":26,"code":"(fn [limit] \n  ((fn fibseq [cnt s] \n    (cond \n     (= cnt limit) (reverse s)\n     :else (fibseq (inc cnt) (conj s (reduce + (take 2 s)))))) 2 '(1 1)))","user":"5a14228fe4b0ff51aa4b3193"},{"code":"(fn fib [n]\n  (take n ((fn fib_rek [a b]\n\t\t(cons a (lazy-seq (fib_rek b (+ a b))))\n\t) 1 1))\n)","problem":26,"user":"4ffb3c50e4b0678c553fc3c8"},{"code":"(fn [x]\n  (loop [p 0 f 1 n 0 xs nil]\n    (if (> x n)\n      (recur f (+ f p) (inc n) (cons f xs))\n      (reverse xs))))","problem":26,"user":"50478418e4b0371827a27bc3"},{"code":"#(map (fn fib [n]\n     (cond \n       (== 0 n) 1\n       (== 1 n) 1\n       :else (+ (fib (- n 1)) (fib (- n 2))))) (range 0 %))","problem":26,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":26,"code":"(fn my-fib [n]\n  (cond\n    (= n 0) '()\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    :else (let [prior (my-fib (- n 1))\n                last-two (take-last 2 prior)]\n            (conj (vec prior)\n                  (+ (first last-two)\n                     (second last-two))))))","user":"59971dcbe4b07157cc8daacb"},{"problem":26,"code":"(fn [n]\n  (loop [fib '(1 1)]\n    (if (>= (count fib) n)\n      (reverse fib)\n      (recur (conj fib (+ (first fib) (second fib)))))))","user":"5aeafd96e4b0cc2b61a3bbeb"},{"problem":26,"code":"(fn[n]( map first ( take n ( iterate (fn[[a b]] [b (+ a b)]) [1 1])) ))","user":"56c85700e4b0ed865f9758d0"},{"code":"(fn fib [n]\n  (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) [1 1]\n    true (conj (fib (- n 1)) (+ (last (fib (- n 1))) (last (fib (- n 2)))))))","problem":26,"user":"4fff72b6e4b0678c553fc400"},{"problem":26,"code":"(fn fib\n  [n]\n  (cond\n    (= n 1) '(1)\n    (= n 2) '(1 1)\n    (> n 2) (concat (fib (dec n))\n                    [(+ (last (fib (dec n)))\n                        (last (drop-last (fib (dec n)))))])))","user":"5b14475be4b0cc2b61a3be5a"},{"problem":26,"code":"#(take %\n       ((fn fib []\n         (lazy-cat [1 1]\n                   (map + (fib) (rest (fib)))))))","user":"57dd47f4e4b0bd073c20243e"},{"code":"#(take % (map second\n    (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn [x]\r\n  (map\r\n    (fn fib [n]\r\n      (if (<= n 1)\r\n        1\r\n       (+ (fib (- n 1)) (fib (- n 2)))))\r\n    (range x)))","problem":26,"user":"4dfe5a93535d04ed9115e786"},{"code":"#(take % (->> [1 1]\n              (iterate (fn[[a b]] [b (+ a b)]))\n              (map first)))","problem":26,"user":"51269362e4b083bb8f88cf09"},{"problem":26,"code":"(fn [n] \n(cond \n(= 1 n)\n'(1)\n(= 2 n)\n'(1 1)\n:else\n(reverse (into '()\n(loop [n (- n 2) \n       s [1 1]]\n     \n(if (= 0 n)\n s\n (recur\n  (- n 1)\n  \n  \n  (conj s\n     (+ \n      (nth s (- (count s) 2)) \n      (last s)\n     )\n  )\n  \n  \n ) ;recur\n  \n  \n); if\n  \n);loop\n\n))\n\n) ; cond\n\n);fn","user":"5647ffdae4b0284900eef626"},{"problem":26,"code":"(fn myfib\n  [n]\n  ( case n\n      1 [1]\n      2 [1 1]\n      (conj (myfib (dec n)) (reduce + (take-last 2 (myfib (dec n)))))\n      )\n  )","user":"5a91988ae4b002d099cae6f9"},{"code":"(fn __ [x]\r\n  (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fe9b372e4b0547ebccb246b"},{"problem":26,"code":"(fn [n]\n  (loop [iteration 1 fibs '(1 1)]\n    (if (> iteration (- n 2))\n      (reverse fibs)\n      (recur (inc iteration)(cons (reduce + (take 2 fibs)) fibs))\n      )\n    )\n  )","user":"54c6e78ae4b045293a27f634"},{"problem":26,"code":"#(\n\t(fn fib [cur prev n res]\n  \t\t(if (zero? n)\n      \t\t(reverse res)\n      \t\t(let [ncur (+ cur prev)]\n      \t\t\t(fib ncur cur (- n 1) (conj res cur)))))\n  1 1 (- % 1) '(1))","user":"5773e5b0e4b0979f896515ef"},{"problem":26,"code":"(fn fibb [n] \n  (loop [acc '(1 1)]\n    (if (= n (count acc)) \n      (reverse acc)\n      (recur (conj acc (+ (first acc) (second acc))))\n      )))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn myfib [n]\r\n  (let [fib (fn fib2[x]\r\n    (if (<= x 2) 1\r\n      (+ (fib2 (- x 1)) (fib2 (- x 2)))\r\n    ))]  \r\n  (map fib (range 1 (+ 1 n)))\r\n  )  \r\n)","problem":26,"user":"4f3242bae4b0d6649770a08f"},{"problem":26,"code":"#(map (fn [y] ((fn fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2))) )) y)) (range 1 (+ % 1)) )","user":"5b72b36ce4b047b03b2036a9"},{"problem":26,"code":"#(loop [prev 0\n        nxt  1\n        res [1]]\n   (if (= (count res) %)\n     res\n     (recur nxt (+ prev nxt) (conj res (+ nxt prev)))))","user":"534678b9e4b084c2834f4a3d"},{"problem":26,"code":"(fn fibs [n]\n  (cond \n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [end (fibs (dec n)) \n               lst (last end)\n               slst (nth end (- (count end) 2))]\n           (conj end (+ lst slst)))))","user":"58bef28be4b021aa9917ecca"},{"problem":26,"code":"#(map\n   (fn [n]\n     (loop [n (+ n 1) n1 1 n2 0]\n      (if\n        (= 1 n) n1\n        (recur (dec n) (+ n1 n2) n1)))) \n    (range %))","user":"54ad4863e4b09f271ff37ce0"},{"code":"#(reverse (loop [N % R '(1 1)]\n      (if (> 3 N)\n        R\n        (recur (dec N) (conj R (+ (first R) (nth R 1)))))))","problem":26,"user":"52454e2be4b08ba2393080e9"},{"problem":26,"code":"(fn [x]\n(loop [n x previous 0 current 1 output []]\n(cond\n(zero? n) output\n:else (recur (dec n) current (+ current previous) (conj output current)))))","user":"580d1da7e4b0849f6811b72f"},{"problem":26,"code":"(fn\n  [ix]\n  (loop [prev-seq [1 1]\n         iter (- ix 2)]\n    (let [next-num (reduce + (take-last 2 prev-seq))]\n      (if (< 0 iter)\n        (recur (conj prev-seq next-num) (dec iter))\n        prev-seq))))","user":"565ddeb9e4b068f2fe63dc2c"},{"code":"(fn [n] (map first (take n (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":26,"code":"#(loop [n % previous 0 result [1]]\n   (if (= n 1)\n     result\n     (recur (dec n) (last result)\n            (conj result (+ previous (last result))))))","user":"56cccd99e4b0ea9b8538f743"},{"problem":26,"code":"(fn [size] \n  (if (= size 0)\n    []\n    (loop [cnt 1 prev 0 ans [1]]\n      (if (= cnt size)\n        ans\n        (recur (inc cnt) (last ans) (conj ans (+ prev (last ans))))\n      )\n    )\n  )\n)","user":"5746061ae4b009280f9f2b5b"},{"problem":26,"code":"(fn fib [n]\n (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"543bb568e4b032a45b869334"},{"problem":26,"code":"(fn\n  [n]\n  (loop [c (- n 2)\n         l '(1 1)]\n        (if (= c 0)\n          (reverse (into '() l))\n          (recur (dec c) (reverse (cons (+ (first (reverse l)) (second (reverse l))) (reverse l))))))\n        )","user":"5683b67ce4b0945ebc182a9f"},{"code":"(fn [x]\n  (reverse ((fn fibs [n]\n    (if (< n 3)\n        (list 1 1)\n        (let [prev-fibs (fibs (dec n))]\n          (cons (+ (first prev-fibs) (second prev-fibs)) prev-fibs)))) x)))","problem":26,"user":"53940789e4b0b51d73faaec3"},{"problem":26,"code":"(fn [n]\n\t(loop [a 1 b 1 fl () i 0]\n\t (if (< i n)\n\t \t(recur b (+ a b) (cons a fl) (inc i))\n\t  (reverse fl))))","user":"52ea764ee4b09f7907dd14be"},{"code":"#(loop [seq [1 1]]\n  (if (= (count seq) %)\n    seq\n    (recur (conj seq (+ (last seq)\n                        (nth seq (- (count seq) 2)))))))","problem":26,"user":"4e6a2f93535d8ccf87e9feaa"},{"code":"#(map first (take % (iterate (fn [[x y]] [y (+ x  y)]) [1 1])))","problem":26,"user":"4e6f1b7a535d5021c1a89618"},{"problem":26,"code":"(fn fib [n]\n  (loop [i n, x 1, y 0, r []]\n    (if (zero? i)\n      (seq r)\n      (recur (dec i) (+ x y) x (conj r x)))))","user":"50b42cbbe4b001349b2f4abe"},{"code":"#(take %  (map last (iterate (fn [[x y]] [y (+ x y)] ) [0 1] )))","problem":26,"user":"4f23196ee4b0d66497709fe1"},{"code":"(fn fib [n]\r\n     (loop [items 2,\r\n            fibvec [1 1]]\r\n       (if (<= n items)\r\n         (take n fibvec)\r\n         (recur (inc items)\r\n                (conj fibvec\r\n                      (+ (last fibvec) (last (butlast fibvec))))))))","problem":26,"user":"4e7dfd48535db169f9c796fa"},{"problem":26,"code":"(fn fibb\n  ([n] (fibb (- n 2) '(1 1)))\n  ([n sq] ( \n    if(= n 0) \n      (reverse sq)\n      (fibb (- n 1) (conj sq (+ (first sq) (first (rest sq)) )))\n  ))\n)","user":"5280a1ece4b0757a1b171407"},{"code":"#(rest (take (inc %) ((fn fib-seq [] ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 0 1)))))","problem":26,"user":"4e678231535d8ccf87e9fe7e"},{"problem":26,"code":"(fn [n]\n  (cond (= n 0) '()\n        (= n 1) '(1)\n        (> n 1)\n    (loop [i 2\n           [f s & r :as fib] '(1 1)]\n      (if (= i n) (reverse fib)\n        (recur (inc i)\n               (cons (+ f s) fib))))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":26,"code":"(fn fib [n]\n  (let [s [1 1]]\n    (cond\n      (= 1 n) [1]\n      (= 2 n) s\n      :else ((fn fib0 [i fibs]\n              (let [sbif (reverse fibs)\n                    nfibs (conj fibs (+ (first sbif) (second sbif)))]\n                (if (= 0 i)\n                  nfibs\n                  (fib0 (dec i) nfibs)))) (- n 3) s))))","user":"57a49951e4b0a966079561e5"},{"problem":26,"code":"(comp \n reverse\n (fn fib\n  [n]\n  (cond\n   (<= n 2) (take n '(1 1))\n   :else (let [[p pp & r :as last-fib] (fib (dec n))]\n           (conj last-fib (+ p pp))))))","user":"5df4cb3be4b03c219ef1a381"},{"problem":26,"code":"(fn my-fib\n  [n]\n  (loop [x 0\n         y 1\n         c 0\n         fibs []]\n    (if (= c n)\n      fibs\n      (recur y (+ x y) (inc c) (conj fibs y)))))","user":"5c411df3e4b08cd430848ebf"},{"code":"#(reduce\n  (fn [a b]\n    (concat a (list (+ (last a) (second (reverse a)))))\n    )\n  '(1 1)\n  (range (- % 2)))","problem":26,"user":"4fc4dca8e4b081705acca350"},{"problem":26,"code":"#(loop [cnt %1\n        before 0\n        now 1\n        result [1]]\n   (if (= cnt 1)\n     result\n     (recur (- cnt 1) now (+ before now) (conj result (+ before now)))))","user":"5eeeb000e4b07c55ae4a0515"},{"code":"(fn [x]\n  (take x\n        ((fn fib [one two]\n          (cons one (lazy-seq (fib two (+ one two)))))1 1)))","problem":26,"user":"52daf558e4b09f7907dd13c1"},{"problem":26,"code":"#(take % ((fn fib [a b]\n            (cons a\n                  (lazy-seq (fib b (+ a b))))) 1 1))","user":"556189a6e4b0c656e3ff17c9"},{"code":"(fn fib [n]\n  ((fn fib_ [n a b]\n    (if (= 0 n)\n       '()\n       (cons a (fib_ (- n 1) b (+ a b)))))\n   n 1 1))","problem":26,"user":"4f04d011535dcb61093f6be5"},{"code":"(fn [n & {:keys [add result numbers] \n          :or {add 1 result 1 numbers [1]}}]\n  (if (> n 1)\n      (recur (dec n) {:add result \n                      :result (+ add result) \n                      :numbers (conj numbers result)})\n      numbers))","problem":26,"user":"5079fd71e4b08327cd804a66"},{"problem":26,"code":"#(take \n   %\n   ((fn fib [a b]\n      (lazy-seq (cons a (fib b (+ a b)))))\n    1 1))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":26,"code":"#(map first (take % (iterate (fn fib [[a b]]\n                               [b (+ a b)])[1 1])))","user":"5aefdc8de4b0cc2b61a3bc40"},{"problem":26,"code":"(fn fib [x] \n  (cond (= x 1) '(1)\n        (= x 2) '(1 1)\n        (> x 2) (reverse (conj (reverse (fib (dec x))) (+ (last (fib (dec x))) (last (butlast (fib (dec x)))))))))","user":"4e246abe535d04ed9115e827"},{"problem":26,"code":"#(take %\n ((fn fab\n   ([] (fab 1 1))\n   ([fab-2 fab-1] \n   \t(cons fab-2 (lazy-seq (fab fab-1 (+ fab-2 fab-1)))))))\n )","user":"563f2eaae4b08d4f616f5ed1"},{"code":"(letfn [(fib [a b]\n          (cons (+ a b)\n            (lazy-seq (fib b (+ a b)))))]\n  #(take % (lazy-cat [1 1] (fib 1 1))))","problem":26,"user":"504f57c7e4b0a02f9cffde71"},{"problem":26,"code":"(fn f [x]\n  (if (= 2 x) \n    [1 1]\n    (let [xs (f (dec x))]\n      (conj xs (apply + (take-last 2 xs))))))","user":"55d87324e4b0e31453f64ab4"},{"code":"#(map (fn fib [x]\n        (if (<= x 2)\n          1\n          (+ (fib (dec x)) (fib (dec (dec x)))))) (range 1 (inc %)))","problem":26,"user":"5369d072e4b0243289761ea1"},{"problem":26,"code":"(fn fib [n]\n  (if (== 1 n) [1]\n    (if (== 2 n) [1 1]\n      (conj (fib (- n 1)) \n            (apply + (drop (- n 3) (fib (- n 1))))\n      )\n    )\n  )\n)","user":"55a59ebae4b0acc240e3154d"},{"problem":26,"code":"#(loop [i 0 coll []] (if (= i %) coll (recur (inc i) (conj coll (cond (= i 0) 1 (= i 1) 1 :else (apply + (take-last 2 coll)))))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn fibber \n  ([depth] (fibber depth '(1) 0 1))\n\t([depth result pp p]\n    (let [new_p (+ pp p)]\n\t\t  (if (= depth 2) \n        (reverse (conj result new_p))\n        (fibber (dec depth) \n                (conj result new_p ) \n                p \n                new_p)))))","problem":26,"user":"4e5d1912535d8a8b8723a2c9"},{"problem":26,"code":"(fn fib\n  ([n] (fib '(1) n))\n  ([acc n]\n   (cond\n     (zero? (- n 1)) (reverse acc)\n     :else (recur (cons (reduce + 0 (take 2 acc)) acc) (dec n)))))","user":"5d9d10d5e4b0eb781811cdb4"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [ b (+ a b)]) [1 1])))","user":"55896a0ce4b059ccff29b204"},{"problem":26,"code":"( fn\n  [fibleng]\n  ( loop [ start '(1 1) it 0 ] \n    \t(if  ( = (- fibleng 2 )  it ) (reverse start) \n  \t\t( recur  \n         (cons  (+ (nth (reverse start) it) (nth (reverse start) (inc it))) start ) (inc  it ) \n        \n       )) \n  ))","user":"516d227fe4b06f078fab252d"},{"problem":26,"code":"(fn [nums]\n\t(loop [n nums prev1 0 prev2 0 res []]\n\t\t(if (= n 0)\n\t\t\tres\n\t\t\t(if (= prev1 0)\n\t\t\t\t(recur (- n 1) 1 0 (conj res 1))\n\t\t\t\t(recur (- n 1) (+ prev1 prev2) prev1 (conj res (+ prev1 prev2)))\n\t\t\t))))","user":"58b985e0e4b0888cdc949ccc"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= 1 n) `(1)\n   (= 2 n) `(1 1)\n   :else (let [prev (fib (dec n))]\n           (concat prev [(+ (last prev) ((comp second reverse) prev))]))))","user":"576c2ecae4b07c67f59d1fbb"},{"problem":26,"code":"(fn fib\n  ([n] (fib [1 1] n))\n  ([xs n]\n   (if (<= n (count xs))\n     xs\n     (let [x' (+ (last xs) (nth xs (- (count xs) 2)))\n           xs' (conj xs x') ]\n       (recur xs' n)))))","user":"56629a7de4b0e91d5f5c5649"},{"code":"(fn [x] (reduce (fn [c _] (conj c (+ (last c) (second (reverse c))))) [1 1] (repeat (- x 2) 1)))","problem":26,"user":"52d7a930e4b09f7907dd1379"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    '(1)\n    (let [curr-fib (fib (dec n))]\n      (concat curr-fib [(reduce + (take-last 2 curr-fib))]))))","user":"551f1781e4b08d5046aa8a52"},{"problem":26,"code":"#(map first (take % (iterate (fn [[prev curr]] [curr (+ prev curr)] ) [1 1])))","user":"5ece3d25e4b016b56eae059b"},{"problem":26,"code":"#(loop [x [1 1]]\n   (if (< (count x) %)\n     (recur (conj x (+ (last x) (second (reverse x)))))\n            x))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":26,"code":"(fn fib\n  ([num]\n    (fib 0 1 num [1])\n    )\n  ([prev current num result]\n    (if (> num 1)\n      (let [new_current  (+ prev current)]\n        (recur current new_current  (dec num) (conj result new_current)))\n      result\n      )))","user":"5a55c713e4b05d388ecb6c43"},{"problem":26,"code":"(fn fibonacci\n  ([n] (fibonacci n '(1 1)))\n  ([n coll]\n   \t(if (= (count coll) n)\n      \t(reverse coll)\n      \t(fibonacci n (conj  \n                      \tcoll\n                      \t(+ (first coll) (first (rest coll)))\n                      ))\n    )\n  )\n)","user":"5759e317e4b02ea114799330"},{"code":"(fn first-x-fibonacci [n]\n  (loop [x [0 1]]\n    (if (<= (count x) n)\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      (rest x))))","problem":26,"user":"4f81fcbfe4b033992c121c03"},{"problem":26,"code":"(fn [n]\n  (let [fib ((fn f [a b]\n              (lazy-seq (cons a (f b (+ a b)))))\n             1 1)]\n   (take n fib)))","user":"5e9b6471e4b0157ca96647f0"},{"problem":26,"code":"#(loop [n 1 y [1] one 0 two 1]\n   (if (= n %)\n       (seq y)\n       (recur (inc  n) (conj y (+ one two)) two (+ one two))\n   ))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn [n]\n  (rest\n    (reverse\n      ((fn fib [n lst]\n        (if (<= n 1)\n          lst\n          (fib \n            (- n 1)\n            (cons\n              (+ (first lst)\n                 (second lst))\n              lst))))\n       n '(1 0)))))","problem":26,"user":"4e8f5eba535d65386fec214c"},{"problem":26,"code":"(fn fib [n]\n  (loop [fibs [] a 1 b 1 i 0]\n    (if (= i n) fibs\n      (recur (conj fibs a) b (+ a b) (inc i))\n      )\n    )\n  )","user":"5a2e39fce4b09cafd31c7f77"},{"problem":26,"code":"#(loop [f1 1 f2 1 s [] n %]\n   (if\n     (= n 0) s\n     (recur f2 (+ f1 f2) (conj s f1) (dec n))\n     )\n   )","user":"559fefb4e4b0acc240e314ec"},{"problem":26,"code":"#(take % ((fn fibb [a b]\n            (cons a (lazy-seq (fibb b (+ a b)))))\n          1 1))","user":"5d126728e4b02c15ef02199a"},{"problem":26,"code":"#(take % ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b)))))1 1))","user":"5b78302ce4b047b03b2036fa"},{"problem":26,"code":"#(map (fn fibonacci [x]\n  (if (= x 0)\n  \t1\n  \t(if (= x 1)\n  \t\t1\n  \t\t(+ (fibonacci (dec x)) (fibonacci (- x 2))))))\n  (range %))","user":"53fcd574e4b0de5c418485d9"},{"code":"(fn [x]\n  (loop [times (- x 2) output [1 1]]\n    (if (not (= times 0))\n      (recur (dec times) (conj output (+ (peek output) (get output (- (count output) 2)))))\n      (seq output))))","problem":26,"user":"5008b795e4b0144d4f561e3e"},{"problem":26,"code":"(fn fib [n]\n  (let [f (\n    fn [n a b coll]\n      (if (= n 0)\n         coll\n         (recur (dec n) b (+ a b) (conj coll a))))]\n    (f n 1 1 [])))","user":"53d78b64e4b0e771c3025466"},{"code":"#(loop \n    [coll [1 1]]\n    (if (= (count coll) %) \n    coll\n    (recur (conj coll (+ (first (reverse coll)) (second (reverse coll)))))))","problem":26,"user":"4ec6f4ee535d6d7199dd36dc"},{"code":"(fn [i]\n  (->> ((fn rfib [a b]\n          (cons a (lazy-seq (rfib b (+ a b)))))\n       1 1)\n  (take i)))","problem":26,"user":"51ab4082e4b04e3dc0c27b31"},{"code":"(fn [n]\n  (loop [n n fbs '()]\n    (if (= n 0) \n      fbs\n      (cond \n       (empty? fbs) (recur (- n 1) (concat fbs [1]))\n       (= (count fbs) 1) (recur (- n 1) (concat fbs [1]))\n       :else (recur (- n 1)\n                    (concat fbs [(+ (last fbs) (last (butlast fbs)))]))))))","problem":26,"user":"4dbe04b2535d020aff1edf56"},{"code":"(fn [x]                                                                                               (take x                                                                                                  ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n        )                                                                                           )","problem":26,"user":"5195b8cce4b04c0af7ff3c08"},{"problem":26,"code":"(fn fib [x] (cond\n                (= x 1) [1]\n                (= x 2) [1 1]\n              \t:else (let [y (fib (- x 1))]\n                          (conj y (+ (last y) ((fn reduce-seq [x] (cond\n                      (= () (rest (rest x))) (first x)\n                      :else (reduce-seq (rest x))\n                   )\n) y)))\n                      )\n            )\n)","user":"58f92297e4b0438e51c2cf43"},{"problem":26,"code":"(fn fib-seq [x]\n  (reduce\n   (fn [coll _] (conj coll (reduce + (take-last 2 coll))))\n   [1]\n   (range (- x 1))))","user":"5a35d515e4b0ddc586f153e1"},{"problem":26,"code":"(fn fib [len]\n  ((fn calcfib [x]\n    (if (>= (count x) len)\n      x\n      (calcfib (reverse (conj (reverse x)\n                              (+\n                              \t(last x)\n\t\t\t\t\t\t\t\t(first (rest (reverse x)))\n                        \t\t)\n                        )\n                        )))\n    \t\n    ) '(1 1))\n)","user":"595ed97fe4b066ee0a44b051"},{"code":"#(take % (map (fn fib [x]\n                (if (< x 2) 1\n                  (+ (fib (dec (dec x))) (fib (dec x))))) (iterate inc 0)))","problem":26,"user":"504e127fe4b078edc5f593b6"},{"problem":26,"code":"(fn [n]\n  (let [col (reduce\n              (fn [a b] (conj a (+' (first a) (second a))))\n              '(1 1)\n              (range (- n 2)))]\n    (reverse col)\n    )\n  )","user":"5a984657e4b0d174b936c78a"},{"problem":26,"code":"#(take % ((fn fib2 [a b] (cons a (lazy-seq (fib2 b (+ a b))))) 1 1))","user":"540e0637e4b0addc1aec6717"},{"problem":26,"code":"(fn fib [x] \n              (loop [i 0 c [] x0 1 x1 1 ]\n                (if (< i x)\n                  (recur (inc i) (conj c x0) (+ x1 0) (+ x0 x1))\n                  (apply list c ))))","user":"5941f6e3e4b060784b3b7904"},{"problem":26,"code":"(fn myFibbo [n]\n  \n  (if (= n 1) \n    '(1)\n   (if (= n 2)\n     '(1 1)\n     ((fn xfibo [n x]\n         (if (= n 0)\n           ((fn xrev [x y]\n    \t\t\t (if (empty? x)\n    \t\t\t   y\n     \t\t\t  (xrev (rest x) (conj y (first x) ))\n     \t\t\t  )\n     \t\t) x '())\n           (xfibo (- n 1) (conj x (+ (first x) (first (rest x)))))\n\n           )\n         ) (- n 2) '(1 1))\n     )\n   )\n\n\n)","user":"556ddbeae4b09a3098a5250a"},{"problem":26,"code":"(fn fibs [n]\n  (map (fn fib [n]\n         (cond\n           (<= n 2) 1\n           :else (+ (fib (- n 1)) (fib (- n 2)))\n           )\n         ) (range 1 (inc n))))","user":"564ecc9ee4b0284900eef6a1"},{"code":"(fn [n] (map first (reductions (fn [[a b] _] [b (+ a b)]) [1 1] (range 1 n))))","problem":26,"user":"5033ed65e4b062bc5d7ae15a"},{"problem":26,"code":"(fn fib\n  [count]\n  (take count\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"6062e1bde4b03746e80ebf75"},{"code":"(fn [vi]\r\n  ((fn [i acc]\r\n    (if (= i 0)\r\n      acc\r\n      (recur\r\n        (dec i)\r\n        (concat acc [(+ \r\n          (nth acc (- (count acc) 2))\r\n          (nth acc (- (count acc) 1)))])))) (- vi 2) [1 1]))","problem":26,"user":"4e6a48da535d8ccf87e9febe"},{"problem":26,"code":"(fn[n] \n  (take n (map first (iterate (fn[[a b]] [b (+ a b)]) [1 1]))))","user":"5fa52497e4b0fa27300f3dbf"},{"code":"(fn [c] (rest (rest (reverse (reduce \n   (fn [v _] \n    (list* (+ (first v) (second v)) v)) '(0 1) (range c))))))","problem":26,"user":"5170ea06e4b0d70c8bbbf235"},{"code":"(fn fib[n] (take n (map first (iterate (fn fibn[[n1 n2]] [n2 (+ n2 n1)]) [1 1]))))","problem":26,"user":"4f03bd9d535dcb61093f6b5b"},{"code":"(fn [n]\n  (letfn [(fib [n]\n            (cond\n             (zero? n) 0\n             (= n 1) 1\n             :else (+ (fib (dec n)) (fib (- n 2)))))]\n    (rest (map fib (range (inc n))))))","problem":26,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":26,"code":"(fn [length] \n  (loop [a 1 b 1 fib [1 1]] \n    (if (= (count fib) length) \n      (list* fib) \n      (recur \n         b \n         (+ a b) \n         (conj fib (+ b a))\n      )\n    )\n  )\n)","user":"5726adf8e4b0c5bde472c12b"},{"problem":26,"code":"#(rest (loop [counter % result [0 1]] (if (> counter 1) (recur (dec counter) (conj result (+ (last result) (last (butlast result))))) result)))","user":"51671557e4b013fc800656c4"},{"code":"(fn fib [n] (if (<= n 2)\n              [1 1]\n              (let [n-1  (fib (- n 1))\n                    fn   (peek n-1)\n                    penultimate (comp peek pop)\n                    fn-1 (penultimate n-1)]\n                (conj n-1 (+ fn fn-1)))))","problem":26,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"#(nth (iterate (fn [s] (conj s (apply + (take-last 2 s)))) [1]) (dec %1))","problem":26,"user":"504e9f5ce4b069badc5a33bd"},{"problem":26,"code":"#(seq (reduce (fn [coll,x] (conj coll (apply + (take-last 2 coll)))) [1 1] (range (- % 2))))","user":"4f598c87e4b0030a34fb2ada"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])\r\n))","problem":26,"user":"4de85c5d535d08e6dec9fdfc"},{"problem":26,"code":"(fn [n]\n  (loop [a [1 1] i (- n 2)] \n    (if (zero? i)\n      a\n      (recur (conj a (apply + (take-last 2 a))) (dec i)))))","user":"563e022be4b0da801c4e4664"},{"problem":26,"code":"#(take %\n    ((fn fib_seq [x y]\n       (lazy-seq (cons x (fib_seq y (+ x y)))))\n     1 1))","user":"576e607ae4b0979f89651579"},{"problem":26,"code":"#(let [rest-fibonacci (fn rest-fibonacci [a b]\n                         (let [new-elem (+ a b)]\n                           (cons (+ a b) (lazy-seq (rest-fibonacci b (+ a b))))))]\n    (take % (cons 1 (rest-fibonacci 0 1))))","user":"5fd2e391e4b07e53c2f3f049"},{"code":"(fn fib [n]\n  (if (= 2 n)\n    [1 1]\n    (let [prev (fib (- n 1))]\n      (conj prev (+ (last prev) (last (drop-last prev)))))))","problem":26,"user":"4f5694cae4b0a7574ea71827"},{"code":"(fn [n]\n  (letfn [(fib [acc n]\n      (if (zero? n)\n        acc\n        (recur (conj acc \n                     (+ (first acc)\n                     (second acc)))\n               (dec n))))]\n    (rest (reverse (fib '(1 0) (dec n))))))","problem":26,"user":"4f03afcc535dcb61093f6b4d"},{"code":"#(letfn [(fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n  (take % (fib 1 1)))","problem":26,"user":"50431cbce4b034ff00315d1c"},{"problem":26,"code":"(fn fib \n  ([] (lazy-cat [1 1] (map + (fib) (rest (fib)))))\n  ([n] (take n (fib))))","user":"56df254be4b0ca2494a095ea"},{"code":"(fn [x] (map (fn fib [y] (if (> y 1) (+ (fib (- y 2)) (fib (dec y))) 1)) (range 0 x)))","problem":26,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":26,"code":"(fn [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else (loop [result [1 1] counter (- n 2)\n                     f1 1 f2 1]\n                (if (= counter 0)\n                  result\n                  (recur (conj result (+ f1 f2))\n                         (dec counter)\n                         f2 (+ f1 f2))))))","user":"5965a773e4b069c0a1a1978a"},{"code":"#(loop [n1 1, n2 1, total %, acc []]\n  (if (zero? total)\n    acc\n    (recur n2 (+ n1 n2) (- total 1) (conj acc n1))))","problem":26,"user":"51d7efc3e4b0154f82ab9302"},{"code":"(fn myfn [n]\n\t(reduce\n    \t(fn [x y]\n        \t(conj x (apply + (take-last 2 x))\n            )\n        )\n     \t[1 1]\n    \t(repeat (- n 2) 1)\n    )\n)","problem":26,"user":"525ba7bbe4b0cb4875a45d28"},{"problem":26,"code":"#(take % (map (fn f [i] (if (<= i 1) 1 (+ (f (- i 1)) (f (- i 2))))) (range %)))","user":"4ecf5ee1535d44c135fd68b7"},{"code":"(fn fib [n] \n  (take n \n    (map first \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ec1b80c535dfed6da9c6db6"},{"code":";; Stolen outright from Programming Clojure.\n;; I take no joy in that.\n(fn [n]\n  (take n (map first\n            (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n\n;; (iterate f x)\n;; Returns a lazy sequence of x, (f x), (f (f x)) etc.\n\n;; So, here, the iterate call is returning a lazy seq of\n;; fibonacci pairs: ([1 1] [2 1] [3 2] [5 3] ...)\n;; Then we use map to lazily make a seq of the first of\n;; each pair.  See?","problem":26,"user":"4e42f930535dc968683fc49f"},{"problem":26,"code":"(fn [n] (loop [res [1 1] k (- n 2)]\n          (if (= k 0)\n            res\n            (recur (conj res (apply + (take-last 2 res))) (dec k)))))","user":"59da6480e4b0ef0a1e9b5c68"},{"code":"(fn [cnt]\n  (let [next-fib-pair #(list (apply + %) (first %))]\n    (map second (take cnt (iterate next-fib-pair '(1 1))))))","problem":26,"user":"52692e3be4b03e8d9a4a71d6"},{"problem":26,"code":"#(reduce (fn [l _] (conj l (+ (last l) (last (butlast l))))) [1 1] (range (dec (dec %))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":26,"code":"(fn [n]\n  (loop [k 1 res [1]]\n    (if (= k n)\n      res\n      (recur (inc k)\n             (conj res (apply + (take-last 2 res)))))))","user":"5426a59ee4b01498b1a71b1b"},{"problem":26,"code":"(fn [x]\n\t(let [rfibs (fn fibs [n]\n  (let [n-1 (dec n)]\n\t(cond (= n 1)  '(1)\n        (= n 2) '(1 1)\n        :else (cons (+ (first (fibs n-1)) (second (fibs n-1)) ) (fibs n-1))\n        )\n  )\n)]\n\t(reverse (rfibs x))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":26,"code":"#(rest (reduce (fn [a i] (conj a (reduce + (take-last 2 a))))  [0 1] (range 1 %)))","user":"5bece6a5e4b0a6d31fed2114"},{"problem":26,"code":"(fn [x] (map\n                 (fn fib\n                   [n]\n                   (cond (= n 0) 1\n                         (= n 1) 1\n                         :else (+ (fib (dec n)) (fib (dec (dec n)))) )\n                   )\n                 (take x (range))))","user":"553a1475e4b09218d5f44fef"},{"problem":26,"code":"(fn fibo-numbers\n  [x]\n  (let\n    [fib-generator\n     ((fn fib\n       [a b]\n       (lazy-seq (cons a (fib b (+ a b))))) 1 1)]\n    (take x fib-generator)))","user":"5d9c8a85e4b0eb781811cdad"},{"code":"(fn fib [x](\n  if(= x 0) [0]\n    (if(= x 1) [1]\n  \t\t(sort <(conj  (flatten (fib (- x 1)))(+ (last (fib (- x 1))) (last (fib (- x 2))))))\n  \t)\n  )\n)","problem":26,"user":"50054b5ce4b0678c553fc45f"},{"code":"#(rest ((fn fib [x]\n          (if (= x 0)\n            [0 1]\n            (let [f (fib (dec x))]\n              (conj f (+ (last f) (last (butlast f))))))) (dec %)))","problem":26,"user":"527268a5e4b03e8d9a4a7431"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (loop [a 0\n         b 1\n         out []]\n    (if (< (count out) n)\n      (recur b (+ a b) (conj out b))\n      out)))","user":"5eb22708e4b00a66d4a95204"},{"code":"(fn [x] (loop [z 0 fA '()](if(= z x) (reverse fA) (recur(+ z 1)(if(= z 0) (conj fA 1) (if(= z 1) (conj fA 1) (conj fA (+ (first fA)(second fA))) )  )) )))","problem":26,"user":"5177cacde4b0261ae665b877"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate \n             (fn [pair]\n               [(second pair) \n                (reduce +' pair)]) \n             [1 1])))","user":"54194782e4b01498b1a71a29"},{"code":"(fn [x] \n  (take x \n        ((fn fib ([] \n                  (concat [1 1] (fib 1 1) ) ) \n           ([a b] (lazy-seq (cons (+ a b) (fib b (+ a b))) ) ) ))) )","problem":26,"user":"51838e8be4b028ec5fd2f2a0"},{"problem":26,"code":"#(take % (map first (iterate (fn [[t x]] [x (+ t x)])  [1 1])))\n;#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"603af0ade4b0d5df2af222fc"},{"problem":26,"code":"(fn [idx]\n    (loop [pp 0\n           p  1\n           l  (range (- idx 1))\n           acc [1]]\n      (if (empty? l) acc\n          (recur p (+ p pp) (rest l) (conj acc (+ p pp))))))","user":"57aa290de4b0b8559636fc65"},{"problem":26,"code":"(fn\n  [num]\n\t\t\t\t\t\t\t\t\t\t (loop\n\t\t\t\t\t\t\t\t\t\t\t\t [sum [1 1]\n                                                  count 0\n\t\t\t\t\t\t\t\t\t\t\t\t\tfirstNum 1\n\t\t\t\t\t\t\t\t\t\t\t\t\tlastNum 1]\n\t\t\t\t\t\t\t\t\t\t\t (if (> count (- num 3))\n\t\t\t\t\t\t\t\t\t\t\t\t sum\n\t\t\t\t\t\t\t\t\t\t\t\t (recur (conj sum (+ lastNum firstNum)) (+ count 1) lastNum (+ lastNum firstNum))\n\t\t\t\t\t\t\t\t\t\t\t\t ))\n)","user":"53cd1a9be4b00fb29b2212dc"},{"code":"(fn [x]\n    (take x \n      (map first \n        (iterate \n          (fn [[a b]] [b (+ a b)]) \n          [1 1]\n        )\n      )\n    )\n)","problem":26,"user":"5255bf1ee4b0541d1855b9f1"},{"code":"#(if (= % 1) \n    '(1)\n    (reduce (fn [s _] (concat s (list (apply + (take-last 2 s))))) (list 1 1) (range 3 (inc %))) )","problem":26,"user":"511b9e81e4b00c2a1fa7ff6e"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0 nxt 1 acc []]\n    (cond\n      (= n (count acc)) acc\n      :else (recur nxt (+ prev nxt) (conj acc nxt))\n      )))","user":"5adcc688e4b0837691e92c05"},{"code":"(fn [n] (take n (map (fn fib [n]    \n      (condp = n 0 1\n                  1 1\n                n (+ (fib (- n 1)) (fib (- n 2)))))\n  (iterate inc 0))))","problem":26,"user":"5398305fe4b0b51d73faaef6"},{"problem":26,"code":"#(take % ((fn lazy-fib [a b]\n            (lazy-seq\n             (cons a (lazy-fib b (+ a b))))) 1 1))","user":"54b817eee4b0ed20f4ff6e93"},{"code":"(fn [i] (take i '(1 1 2 3 5 8 13 21)))","problem":26,"user":"506b437de4b0eda3100c0906"},{"problem":26,"code":"(fn [n] (loop [i 1\n                     f 1\n                     result [1]]\n                (if (< i n)\n                  (let [prev (nth result (dec i))]\n                    (recur (inc i)\n                           (+ f prev)\n                           (conj result f)))\n                  result)))","user":"60ae0ac5e4b00e9e6653c495"},{"code":"(fn [n]\n  ((fn [xs n a b]\n    (if (zero? n)\n        xs\n        (recur (concat xs (cons b (empty xs)))\n                 (dec n)\n                 b\n                 (+ a b))))\n  '() n 0 1))","problem":26,"user":"4f94d3a5e4b0dcca54ed6cc5"},{"code":"(fn [acc n]\n  (if (< n 3)\n    acc\n    (recur (concat acc (list (+ (last acc) (last (butlast acc)))))\n\t   (dec n))))\n  '(1 1)","problem":26,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":26,"code":"(fn fbn-of[n] (last (take (inc n) (iterate \n  (fn fbn-seq [origseq]\n    (if (= 0 (count origseq))(conj origseq 1)\n          (if (= 1 (count origseq))(conj origseq 1)\n                (conj origseq (reduce + (take-last 2 origseq))))))[]))))","user":"564d55bce4b0284900eef67e"},{"code":"(fn [n] (take n (map last (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","problem":26,"user":"539b4268e4b0b51d73faaf1c"},{"problem":26,"code":"(fn [x] (#(take x%) (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"559bdf16e4b066d22e731f5a"},{"problem":26,"code":"(letfn [(fib [n] (if (<= n 1) 1 (+ (fib (dec n)) (fib (- n 2)))))]\n   #(apply list (map fib (range %))))","user":"4ff0c419e4b0678c553fc327"},{"problem":26,"code":"(fn fib [x] (take x ((fn do-fib [x y] (lazy-seq (cons x (do-fib y (+ x y))))) 1 1)))","user":"5ec66326e4b08d0ec38692d5"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]\n         digits n]\n    (if (<= digits 2)\n      res\n      (let [last-two (take-last 2 res)\n            next (apply + last-two)]\n        (recur (conj res next) (dec digits))))))","user":"4f213e2ee4b0d66497709fcf"},{"code":"(fn [num]\n  (loop [iter 2\n         result [1 1]]\n    (if (>= iter num)\n      result\n      (recur (inc iter)\n             (sort (cons (+ (last result)\n                             (second (reverse result)))\n                         result))))))","problem":26,"user":"4fea1f9ee4b0547ebccb248b"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) f [1 1]]\n    (if (> n 0)\n \t  (recur (dec n) (concat f [(+ (last f) (last (butlast f)))]))\n      f      \n    )\n  )\n)","user":"54c97cb3e4b045293a27f677"},{"code":"(fn [c] (reverse (last (take (- c 1) (iterate #(cons (+ (first %) (first (rest %))) %) '(1 1))))))","problem":26,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"(fn fibo-sec [x n]\r\n  (if (= n 1)\r\n    (conj x 1)\r\n    (fibo-sec \r\n              (conj \r\n               x \r\n               ((fn fibo [n]\r\n                  (if (< n 2)\r\n                    1\r\n                    (+ (fibo (dec n)) (fibo (- n 2)))\r\n                  )\r\n                ) (dec n)\r\n               )\r\n              )\r\n              (dec n) \r\n    )\r\n  )\r\n) ()","problem":26,"user":"4fa313bbe4b081705acca188"},{"code":"(fn [x] \n  (loop [l '(1 1)]\n    (if (<= x (count l) )\n      (take x (reverse l) )\n      (recur (cons (+ (first l) (second l) ) l ) )\n    )\n  )\n)","problem":26,"user":"4ea0a7c7535d7eef308072ab"},{"code":"(fn fib\n  ([n]\n     (fib [0 1] n))\n  ([x, n]\n     (if (<= (count x) n) \n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       (rest x))))","problem":26,"user":"5092f940e4b097f48cc3857b"},{"code":"#(take % ((fn Fib [x1 x2] (cons x1 (lazy-seq (Fib x2 (+ x1 x2))))) 1 1))","problem":26,"user":"518f9e14e4b08646f171ca07"},{"problem":26,"code":"#(loop [fs [1 1] count (- % 2)]\n   (if (> count 0)\n     (recur\n      (conj fs\n            (+ (last (butlast fs))\n               (last fs)))\n      (dec count))\n     fs))","user":"55fb41a6e4b0f488688e065f"},{"problem":26,"code":"(fn [n]\n  (loop [returned []\n         i 0\n         f0 1\n         f1 1]\n    (if (< i n)\n      (recur (conj returned f0) (inc i) f1 (+ f0 f1))\n      returned)))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"(fn f\n  ([n] (f 1 1 n))\n  ([a b n] (if (> n 0) (cons a (f b (+ a b) (- n 1)) )) ))","problem":26,"user":"522a01ade4b0590a43906ced"},{"code":"#(loop [ix 1 result [1]]\n   (if (= % ix)\n     result\n     (recur (inc ix) (conj result (apply + (take-last 2 result))))))","problem":26,"user":"4f171e7d535d64f603146452"},{"code":"#(loop [coll [1 1] n %]\n  (if (< n 3)\n    coll\n    (recur (conj coll (+ (nth coll (- (count coll) 2)) (last coll))) (dec n))))","problem":26,"user":"5031eb3be4b000fc67a99a84"},{"code":"(fn [n]\n      (loop [i 1 a 1 b 1 acc [a]]\n            (if (= i n)\n              acc\n              (recur (+ 1 i) b (+ a b) (concat acc (list b))))))","problem":26,"user":"515828b8e4b0a069fd272c71"},{"problem":26,"code":"#(take % ((fn fibonacci\n              ([] (fibonacci 1 1))\n              ([a b]\n               (cons a (lazy-seq (fibonacci b (+ a b)))))\n              )))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":26,"code":"(fn thing\n  [sequences, a, b, limit]\n  \n  (if (= limit 0) (reverse sequences) (thing (cons b sequences) b (+ a b) (dec limit)))\n  \n  ) () 0 1","user":"55625903e4b0c656e3ff17d7"},{"problem":26,"code":"(fn [n]\n  (reverse (last\n            (take (- n 1)\n             (iterate\n               (fn [lst]\n                 (cons\n                   (+ (first lst) (second lst)) lst)) '(1 1))))))","user":"59dd38a8e4b0a0ac046f2503"},{"problem":26,"code":"#(loop [input %\n        output [1 1]]\n    (if (zero? (- input 2))\n      output\n      (recur (dec input)\n              (conj output (+ (last (butlast output))\n                              (last output))))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn fib \n    ([i] \n      (fib i 1 0 []))\n    ([i n-1 n-2 lst]\n      (if (= i (count lst)) \n        lst\n        (let [n (+ n-2 n-1)]\n          (println n n-1 n-2)\n          (recur i n n-1 (conj lst n-1)) ))))","problem":26,"user":"4e5f08c7535d8a8b8723a2da"},{"code":"#(letfn [(f [a b] (lazy-seq (cons a (f b (+ a b)))))]\n    (take % (f 1 1)))","problem":26,"user":"4e52d815535d302ef430da77"},{"problem":26,"code":"(fn [l]  \n  (map\n    (fn fibo [x] \n      (if (or (= x 0) (= x 1))\n        x \n        (+ (fibo (- x 1)) (fibo (- x 2))))) \n    (range 1 (+ l 1))))","user":"5ba7dac4e4b0a20761a23422"},{"problem":26,"code":"(fn [N](take N \n  ((fn\n  \t[f & more]\n  (letfn [(recurse\n             [coll args]\n             (let [next-val (apply f args)]\n               (lazy-cat coll (recurse [next-val] (conj (butlast args) next-val)))))]\n    (recurse more (reverse more)))) + 1 1)))","user":"55f274b2e4b06e875b46ce44"},{"problem":26,"code":"(fn [n]\n  (loop [i 1\n         result [1 1]]\n    (if (= (count result) n)\n      result\n      (recur (last result)\n             (conj result (+ (last result) i))))))","user":"596b5f27e4b069c0a1a19813"},{"problem":26,"code":"(fn [x]\n     (loop [r [1 1]]\n       (if (= x (count r))\n         r\n         (recur (conj r (+ (last r) (last (butlast r)))))\n         )))","user":"5d35fb9be4b01671435dbd1c"},{"code":"(fn [num]\n  (if (= num 0) '()\n      (if (= num 1) '(1)\n          (loop [flist '(1 1)]\n            (if (= num (count flist)) (reverse flist)\n                (recur (cons (+ (first flist) (first (rest flist))) flist)))))))","problem":26,"user":"5213348ae4b0d32679a50652"},{"code":"(fn [x]\n   (loop [x x cur 1 next 1 acc '()]\n     (if (zero? x) \n       (reverse acc)\n       (recur (dec x) next (+ cur next) (conj acc cur)))))","problem":26,"user":"52d019ede4b07d0d72b273b6"},{"code":"(fn [n]\n  (take n\n        ((fn rfib [a b]\n           (cons a (lazy-seq (rfib b (+ a b)))))\n         1 1)))","problem":26,"user":"52864dbce4b0239c8a67ae12"},{"code":"(fn [x] (map \n (fn fibonacci [n]\n  (if (<= n 1) \n    n\n    (+ \n     (fibonacci (- n 1))\n     (fibonacci (- n 2)))))\n (range 1 (+ x 1))))","problem":26,"user":"50c13f77e4b096f585049c3b"},{"problem":26,"code":";; engineered to allow num as low as 1\n(fn [num]                                                                                                                                               \n  (rest                                                                                                                                                 \n    (nth (iterate                                                                                                                                       \n           (fn [c] (conj c (apply + (take-last 2 c))))                                                                                                  \n           [0 1])                                                                                                                                       \n         (dec num))))","user":"562e8b2be4b0ab312c17ebbb"},{"problem":26,"code":"(fn \n  [n]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"53cb321fe4b00fb29b2212d1"},{"problem":26,"code":"#_#(take-nth 2 (rest (flatten (take % (iterate (fn [a] [(nth a 1) (+ (nth a 0) (nth a 1))]) [0 1])))))\n\n#(last (take (dec %)(iterate (fn [a] (conj a (reduce + (take-last 2 a)))) [1 1])))","user":"5cd16529e4b0ccb0619628e7"},{"problem":26,"code":"(fn fib [x]\n   (cond\n     (= x 1) '(1)\n     (= x 2) '(1 1)\n     :else (let [fib-1 (fib (dec x))]\n             (concat fib-1 (list (+ (last fib-1) (nth fib-1 (- (count fib-1) 2))))))))","user":"545ddac3e4b01be26fd74676"},{"code":"(fn [c] \n  (take c\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","problem":26,"user":"52ccc231e4b07d0d72b27370"},{"problem":26,"code":"(fn [x] (reverse (filter #(> % 0) (loop [cnt (- x 1) l '(1 0)] (if (zero? cnt) l (recur (dec cnt) (#(conj % (+ (first %) (second %))) l)))))))","user":"571d1234e4b0145328a76274"},{"problem":26,"code":"(fn [n]\n              (cond\n                (= n 1) [1]\n                (= n 2) [1 1]\n                :else (loop [a 1\n                             b 1\n                             list [1 1]\n                             counter 3]\n                        (if (<= counter n)\n                          (let [next-number (+ a b)]\n                            (recur b next-number (conj list next-number) (inc counter)))\n                          list)))\n              )","user":"5e491182e4b043cd24807a46"},{"problem":26,"code":"#(loop [s [1 1]] (if (= % (count s)) s (recur (conj s (reduce + (take-last 2 s))))))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn [n]\n    (reverse \n     (loop [list '(1 1) n (- n 2)]\n      (if (= n 0)\n        list\n        (recur (cons (+ (first list) (second list)) list) (dec n))))))","problem":26,"user":"526302eee4b03e8d9a4a70a2"},{"problem":26,"code":"(fn list-fib [n]\n                (letfn [(fib [n]\n                          (cond (or (= n 0) (= n 1)) n\n                                :else (+ (fib (- n 1)) (fib (- n 2)))))\n                        (helper [cur n]\n                          (if (> cur n)\n                            '()\n                            (cons (fib cur) (helper (inc cur) n))))]\n                  (helper 1 n)))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn\n            [n]\n            (loop [number (- n 2) sequence [1 1]]\n                (if (zero? number) \n                    (reverse sequence)\n                (recur (dec number) (cons (+ (first sequence) (second sequence)) sequence)))))","problem":26,"user":"4f4daa4ae4b03ad3f0c10cac"},{"problem":26,"code":"(fn [x]\n     (let [x (inc x)]\n     (rest (map #(loop [a 0\n                   b 1\n                   i 0]\n                (if (= % i)\n                    a\n                    (recur b \n                           (+' a b) (inc i)))) (range x)))))","user":"5f77890ae4b02876ed9fd0b9"},{"problem":26,"code":"(fn fibonacci [x]\n  (take x (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":26,"code":";; Fn = Fn-1 + fn-2/\n\n(fn [n]\n   (loop [f1 1\n          f2 1\n          a [f1 f2]]\n     (if (= n (count a))\n       a\n       (recur (+ f1 f2) f1 (conj a (+ f1 f2))))))","user":"56308326e4b073c1cf7a9be9"},{"problem":26,"code":"#(letfn [(f [a b] (cons (+ a b) (lazy-seq (f b (+ a b)))))]\n  (take % (concat [1 1] (f 1 1))))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":26,"code":"#(take % ((fn rfib [a b]\n              (lazy-seq (cons a (rfib b (+ a b)))))\n             1 1))","user":"5d164829e4b0902706380de0"},{"code":"(fn [n] (map (fn fib [x]\n            (if (< x 2)\n                x\n                (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ 1 n))))","problem":26,"user":"52104003e4b080a8d9b9d637"},{"code":"#(map second\r\n  (take % (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4de760a3535d08e6dec9fdf9"},{"code":"(fn fibo [x]\n  (if (= 1 x) [1]\n    (if (= 2 x) [1 1]\n      (loop [n (- x 3), coll [1 1]]\n        (if (neg? n)\n          coll\n          (recur (dec n) (conj coll (reduce + (take-last 2 coll))))\n         )\n       )\n     )\n   )\n )","problem":26,"user":"537b9b0ce4b06839e8705e6b"},{"code":"(let [fib\n      (fn [x y acc n]\n        (if (= (count acc) n)\n          acc\n          (recur y (+ x y) (conj acc (+ x y)) n)\n        )\n      )]\n  (fn [z] (fib 0 1 [1] z))\n)","problem":26,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":26,"code":"#(reduce \n  (fn [a b] \n    (conj a (+ (peek a) (peek (pop a)))))\n  [1 1] (range (- % 2)))","user":"5a1fb7d0e4b0ff51aa4b328c"},{"problem":26,"code":"(fn [n]\n  (loop [fib '(1)\n         pre 1\n         cur 1\n         cnt 1]\n    (if (>= cnt n)\n      fib\n      (recur (concat fib [cur]) cur (+ pre cur) (inc cnt)))))","user":"55e6809ee4b050e68259b48a"},{"code":"(fn fib [X]\n  (cond\n   (= X 1) '(1)\n   (= X 2) '(1 1)\n   (>= X 3) (let [prev (vec (fib (dec X)))]\n              (conj \n               prev\n               (apply + (take-last 2 prev))\n               )\n             )\n   :else '()\n   )\n  )","problem":26,"user":"5231c38fe4b0e2e8de81d1f8"},{"problem":26,"code":"(fn [n] (last (take (- n 1)\n                   (iterate (fn [acc] (conj acc (apply +'\n                                                      (take-last 2 acc))))\n                            [1 1]))))","user":"56aad4f7e4b03c432f187338"},{"code":"(fn [m]\n  (loop [result [1]\n         x 0\n         y 1\n         n m]\n    (if (< n 2) result\n        (recur (conj result (+ x y)) y (+ x y) (dec n)))))","problem":26,"user":"50799992e4b08327cd804a62"},{"problem":26,"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) '(1 1)))))","user":"5987f5b1e4b021a7a535fead"},{"code":"(fn fib [n]\n  (if (= n 2)\n    [1 1]\n    (let [s (fib (- n 1))]\n      (conj s (apply + (take-last 2 s)))\n    )))","problem":26,"user":"4e68c465535d8ccf87e9fe8a"},{"code":"#(first (reduce\n  (fn [acc x]\n    [\n      (conj (first acc) (+ (last (first acc)) (last acc))) \n      (last (first acc))\n    ]      \n  )\n  [[1 1] 1 ]\n  (range (- % 2))\n))","problem":26,"user":"4ea57300535d7eef308072d5"},{"problem":26,"code":"#(map (fn fib [x] (if (or (= x 0) (= x 1))\n                     1\n                     (+ (fib (dec x)) (fib (- x 2)))))\n      (range %))","user":"55796743e4b05c286339e095"},{"problem":26,"code":"#(take % ((fn fib [a b] \n     (cons a (lazy-seq (fib b (+ a b)))))\n   1 1))","user":"53e9681de4b036ad0777e4a4"},{"problem":26,"code":"#(loop [i 1 fib-0 1 fib-1 1 result nil]\n   (if (> i %)\n     (reverse result)\n   (recur (inc i) fib-1 (+ fib-0 fib-1) (cons fib-0 result))))","user":"57dd651ee4b0bd073c202441"},{"code":"(fn [n]\n  (loop [res [1 1] i n a 1 b 1]\n    (if (<= i 2)\n      res\n      (recur (conj res (+ a b)) (- i 1) b (+ a b)))))","problem":26,"user":"51b920bfe4b0e871ca4958f9"},{"code":"(fn fib [n]\n  (let [fibn (fn fibn [n] \n               (cond (= n 0) 1\n                     (= n 1) 1\n                     :else\t(+ (fibn (- n 1)) (fibn (- n 2)))\n                    )\n               )\n             ]\n    (map fibn (range 0 n))))","problem":26,"user":"50dfb660e4b061dbdced7228"},{"problem":26,"code":"(fn [x] (loop [coll [1 1]]\n          (if (< x 3)\n            (case ()\n              0 '()\n              1 '(1)\n              2 '(1 1))\n            (if (= (count coll) x)\n              coll\n              (let [rcoll (reverse coll)\n                    l (first rcoll)\n                    p (first (rest rcoll))]\n                (recur (conj coll (+ l p))))))))","user":"54e2a5f7e4b024c67c0cf7d1"},{"problem":26,"code":"#(take % ((fn fibonacci\n    ([]\n     (fibonacci 0 1))\n    ([old new]\n     (let [result (+ old new)]\n       (cons new (lazy-seq (fibonacci new result))))))))","user":"58cc204ce4b03c36ff7e5860"},{"problem":26,"code":"#(loop [i 0 f [1 1]] (if (= i (- % 2)) f (recur (inc i) (conj f (+ (last f) (nth f (- (count f) 2)))))))","user":"55c3f19de4b0e31453f64991"},{"problem":26,"code":"#(rest (reduce\n         (fn [a _] (conj a (apply + (take-last 2 a))))\n         [0 1]\n         (range (-  % 1))))","user":"55664bb5e4b0c656e3ff1833"},{"problem":26,"code":"(let [fib (fn [goal result counter]\n              (if (= counter goal)\n                  result\n                  (let [addition (if (< counter 2)\n                                     1\n                                     (reduce + (take-last 2 result)))]\n                      (recur goal (into result [addition]) (inc counter)))))]\n    (fn [goal] (fib goal [] 0)))","user":"56491050e4b0284900eef639"},{"code":"#(take % ((fn fib [a b]\n  (lazy-seq (cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"50c32086e4b00e537d00253d"},{"code":"(fn [x] \n    (let [fibb-help \n        (fn fi [acc y] \n            (cond \n                (or (= y 0) (= y 1)) (fi (conj acc 1) (+ y 1))\n                (= y x) acc \n                true (fi (conj acc (+ (get acc (- y 1)) (get acc (- y 2)))) (+ y 1))))]\n    (fibb-help '[] 0)\n    )\n)","problem":26,"user":"52c17e42e4b07a9af5792367"},{"problem":26,"code":"(fn fib3\n  ([n] (fib3 1 1 (- n 2) [1 1]))\n  ([f s n acc] (if (= n 0) (reverse (flatten acc) ) (fib3 (+ f s) f (- n 1) (conj [(+ f s)] acc))))\n  )","user":"595fe942e4b066ee0a44b075"},{"problem":26,"code":"(fn [n] \n  (loop [n n a 1 b 0 c []] \n    (if (= 0 n) c\n      (recur (dec n) (+ a b) a (conj c a)))))","user":"5360e9ade4b0243289761e3b"},{"problem":26,"code":"(fn myFib [n]\n  (loop [x (vec '(1 1))\n         c n]\n        (if (= c 2)\n            x\n            (recur (conj x (reduce + (drop (- n c) x))) (dec c)))))","user":"5ba6d337e4b0a20761a23414"},{"code":"#(nth (iterate (fn [prev-seq] (conj prev-seq (last (map + prev-seq (rest prev-seq))))) [1 1]) (- % 2))","problem":26,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":26,"code":"(fn probl26\n  [x]\n  (letfn [(fib [a b]\n            (lazy-seq\n             (cons a (fib b (+ a b)))))]\n    (take x (fib 1 1))))","user":"5d2e5065e4b01671435dbcae"},{"problem":26,"code":"(fn Fib [n]\n  (take n\n        (map second\n             (iterate (fn[ [prev, cur] ]\n                        [cur (+ prev cur)] ) [0 1]))))","user":"57b82f20e4b0fbc9809a27d9"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [res i]\n                (case i\n                  0 [1]\n                  1 [1 1]\n                  (conj res (+ (last res) (nth res (- (count res) 2))))))\n          []\n          (range n)))","user":"5169d422e4b051e2a73aba53"},{"code":"(fn fibs \n  [n]\n  (take n \n    (map first \n      (iterate (fn [[a b]] \n                  [b (+ a b)]) \n               [1 1]))))","problem":26,"user":"4f6bab49e4b07046d9f4efb1"},{"code":"(fn fib [n]\n  (if (= n 2) [1 1]\n  (let [ret (fib (dec n))]\n    (conj ret (reduce + (take-last 2 ret))))))","problem":26,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":26,"code":"(fn [x] (map first (take x  (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"543272b8e4b0dad94371f2ef"},{"problem":26,"code":"#(take % ((fn fib\n      ([] (fib 1 1))\n      ([x y] (lazy-seq \n         (cons x (fib y (+ x y\n                            ))))))))","user":"5a319634e4b0e23b2502f9c9"},{"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [g (fib (- n 1))\n          a (nth g (- n 3))\n          b (nth g (- n 2))]\n      (conj g (+ a b)))))","problem":26,"user":"504db141e4b021508a333965"},{"problem":26,"code":"(fn [amount]\n  (loop [x amount prev 0 next 1 total []]\n    (if\n      (> x 0)\n      (recur\n       (dec x)\n       next\n       (+ prev next)\n       (conj total next))\n      total)))","user":"59c3a7e9e4b0a024fb6ae4df"},{"problem":26,"code":"(fn fibA [y] ( \n              take y (\n                      (\n                      fn fib [a b] (\n \t\t\t\t\t\t\t\t  lazy-seq (cons a (fib b (+ a b)))\n                                   )\n                      ) 1 1\n                     )\n              )\n)","user":"55d1a2b8e4b0e31453f64a46"},{"problem":26,"code":"(fn [n]\n  (loop [fib []\n         i 0\n         cur 0\n         nxt 1]\n    (if (>= i n)\n      fib\n      (recur (conj fib nxt)\n             (inc i)\n             nxt\n             (+ cur nxt)))))","user":"5db35c6ee4b010eb3c36cd20"},{"code":"#(take % (map (fn [[_ b]] b) (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4f01ff83535dcb61093f6a3a"},{"problem":26,"code":"(\n fn\n [param]\n (\n  loop[nr param result [1 1]]\n  (\n   if(= nr 2)\n   result\n   (recur (dec nr) (conj result (+ (last result) (second (reverse result)))))\n )))","user":"55995d88e4b031d6649c9ba8"},{"code":"#(reverse (last (take (- % 1) (iterate (fn [x] (conj x (+ (first x) (second x)))) '(1 1)))))","problem":26,"user":"537e4259e4b06839e8705e9e"},{"code":"#(letfn\r\n  [(f[a b]\r\n    (lazy-seq (cons a (f b (+ b a)))))]\r\n  (take % (f 1 1)))","problem":26,"user":"4fb54e50e4b081705acca2bb"},{"problem":26,"code":"(fn [x]\n  (loop [c 2 f 1 s 1 result [1 1]]\n    (if (>= c x)\n      (seq result)\n      (recur (inc c) s (+ f s) (conj result (+ f s))))))","user":"5694129de4b0dcc4269f410c"},{"problem":26,"code":"(fn [n]\n  (loop [i n\n         values [1]\n          a 1\n          b 2]\n    (if (= 1 i)\n      values\n      (recur (dec i) (conj values a) b (+ a b)))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":26,"code":"(fn [x]\n  (reverse\n   (reduce\n    (fn [a _]\n      (cons (apply + (take 2 a))\n            a))\n    [1 1]\n    (range (- x 2)))))","user":"5b21ad60e4b03cfeda66ed54"},{"problem":26,"code":"#(loop [times %\n       coll [1]]\n  (if (= times 1)\n    coll\n    (recur (dec times)\n           (conj coll (apply + (take-last 2 coll))))))","user":"59f192e0e4b0966464fe6a5e"},{"code":"(fn fibo [m]\n  ((fn fibo-iter [l m]\n    (if (< m 1)\n      l \n      (fibo-iter \n        (conj l (reduce + (take-last 2 l))) (- m 1)))) [1 1] (- m 2)))","problem":26,"user":"517531c6e4b07031762f2eea"},{"code":"#(take %\n       ((fn fib[a b]\n          (cons a (lazy-seq (fib b (+ a b)))))\n                1 1))","problem":26,"user":"51b9dc12e4b0e871ca49590c"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn rfib [a b]\n           (cons a (lazy-seq (rfib b (+ a b))))) 1 1)))","user":"5944abd0e4b0b03edd0057af"},{"problem":26,"code":"(fn\n  [how-many]\n  (let [fib [1 1]]\n    (if (<= how-many 2)\n      (take how-many fib)\n      (let [how-many (- how-many 2)]\n      (loop [currfib  fib\n             remaining how-many]\n        (if (<= remaining 0)\n          currfib\n          (recur (conj currfib (apply + (take-last 2 currfib))) (dec remaining))))))))","user":"53ac4719e4b047364c04445c"},{"problem":26,"code":"#(take % ((fn fib [x y]\n              (lazy-seq (cons x (fib y (+ x y))))) 1 1))","user":"53ebd5fee4b036ad0777e4fd"},{"code":"(fn [x]\n  (loop [result []]\n\t    (if (>= (count result) x)\n\t\tresult\n\t      (if (empty? result)\n\t\t  (recur (concat result (list 1)))\n\t\t  (recur (concat result \n                         (list \n                          \t(+ (last result) \n                               (nth result (- (count result) 2) 0)))))))))","problem":26,"user":"520ed237e4b0101e4be6fcd9"},{"problem":26,"code":"(fn [x]\n  (loop [n 0 a 0 b 1 f []]\n    (if (= n x)\n      f\n      (recur (inc n) b (+ a b) (conj f b)))))","user":"55c68089e4b0e31453f649c4"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"53fe255ce4b0de5c418485f3"},{"problem":26,"code":"(fn fibonacci-recur\n   ([x] (if (< x 1) nil (if (== x 1) [1] (if (== x 2) [1 1] (fibonacci-recur (- x 2) [1 1] 1 1)))))\n   ([x the-vector the-first the-second] (if (== x 0) the-vector (let [new-value (+ the-first the-second)] (fibonacci-recur (- x 1) (conj the-vector new-value) the-second new-value))))\n   )","user":"57b356c2e4b0fbc9809a277b"},{"code":"#(->> [0 1]\n      (iterate (fn [[a b]] [(+ a b) a]))\n      (map first)\n      rest\n      (take %))","problem":26,"user":"4f036d9b535dcb61093f6ac1"},{"problem":26,"code":"(fn [x]\n  (loop\n   [index 0 result []]\n    (println index)\n    (if (= index x)\n      result\n      (recur (inc index) (if (< (count result) 2)\n                           (conj result 1)\n                           (conj result (+ (nth result (- index 2)) (nth result (- index 1)))))))))","user":"5e7f62cce4b085ba37836e3b"},{"code":"#(take %\n  (map first\n    (iterate (fn [[n1 n2]][(+ n1 n2) n1])\n             [1 0])))","problem":26,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) \n         1 1)))","problem":26,"user":"4f2a7174e4b0d6649770a03e"},{"problem":26,"code":"(fn [n]\n    (if (= n 0)\n        []\n        (if (= n 1)\n            [1]\n            (last (take (dec n) (iterate\n                (fn [xs] (conj xs (+ (last xs) (nth xs (- (count xs) 2)))))\n                [1 1]))))))","user":"5eec1001e4b07c55ae4a0502"},{"problem":26,"code":"(fn [n]\n   (take n \n     (loop [iteration 2\n             list-fib [1 1]\n             s-lst 1\n             lst 1]\n       (if (>= iteration n)\n         list-fib\n         (let [new-lst (+ s-lst lst)\n                new-s-lst lst]\n           (recur (inc iteration)\n             (conj list-fib new-lst)\n             new-s-lst\n             new-lst))))))","user":"5eecd339e4b07c55ae4a0507"},{"code":"(fn [x] (loop [increment 0 fib-seq []]\n          (if (= increment x)\n            fib-seq\n            (if (or (= increment 0) (= increment 1))\n           \t  (recur (inc increment) (conj fib-seq 1))\n              (recur (inc increment) (conj fib-seq (+ (get fib-seq (- increment 1)) (get fib-seq (- increment 2)))))))))","problem":26,"user":"527634d1e4b03e8d9a4a74d6"},{"problem":26,"code":"(fn fib [x]\n  (loop [n x c 0 prev1 0 prev2 0 out '() ]\n    (cond\n     (= n c) (reverse out)\n     (= c 0) (recur n (+ c 1) 0 1 (conj out 1))\n     :else (recur n (+ c 1) prev2 (+ prev1 prev2) (conj out (+ prev1 prev2)))\n     )\n    )\n  )","user":"56942b5fe4b0dcc4269f411c"},{"code":"(fn fibn \n  [a] \n    (take a (\n      (fn fib \n        [a b] \n          (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"503f923fe4b00d1a725ff2ad"},{"code":"(fn [n]\n  (loop [n n, v 1, p 0, acc ()]\n    (if (zero? n) (reverse acc)\n      (recur (dec n) (+ v p) v (conj acc v)))))","problem":26,"user":"53597288e4b04ce2eb3ed29c"},{"code":"(fn [len]\n  (loop [nb (- len 2)\n         res (list 1 1)]\n   (if (= 0 nb)\n     res\n     (let [one (last (butlast res))\n           two (last res)]\n       (recur (dec nb) (concat res (list (+ one two))))))))","problem":26,"user":"537881a4e4b06839e8705e46"},{"problem":26,"code":"(fn fib-seq\n  ([n] (fib-seq (dec n) [0 1]))\n  ([n result] \n   (if (zero? n)\n     (rest result)\n     (fib-seq (dec n) (conj result (+ (last result) (second (reverse result))))))))","user":"57f10279e4b0bfb2137f5c00"},{"code":"(fn [x]\n  (reverse (loop [curr (- x 2)\n         accum '(1 1)]\n    (if (= curr 0)\n      accum\n      (recur (dec curr) (conj accum (+ (first accum)\n                        (first (rest accum)))))))))","problem":26,"user":"4ee271e2535d10e5ff6f5369"},{"problem":26,"code":"(fn [n] \n  (map first (take n (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","user":"60b98974e4b0e0fa5f1b4271"},{"code":"#(loop [n (- % 2) p1 1 p2 1 res '(1 1)]\r\n  (if (= 0 n)\r\n    (reverse res)\r\n    (recur (dec n) p2 (+ p1 p2) (conj res (+ p1 p2)))))","problem":26,"user":"4dbe5975535d020aff1edf5d"},{"problem":26,"code":"(fn fibo [x]\n  (loop [cnt 1 end x seqe [0 1]]\n  (if (= cnt end)\n  (rest seqe)\n  (recur (inc cnt) end (conj seqe (reduce + (take-last 2 seqe))))\n  \n  )))","user":"55b1ab40e4b0da326a65cf6e"},{"code":"(fn [x]\n  (map\n    (fn fib [n]\n      (cond\n        (= n 1) 1\n        (= n 2) 1\n        :else (+ (fib (- n 1)) (fib (- n 2)))))\n   (range 1 (inc x))))","problem":26,"user":"529e2383e4b04e0c58e87b8b"},{"problem":26,"code":"(fn [n] (nth (iterate (fn [all] (let [[x y] (take-last 2 all)](conj all (+ x y)))) [1 1]) (- n 2)))","user":"559d3d22e4b0ec2b359424da"},{"problem":26,"code":"(fn [len]\n  (loop [to-go len\n         result []]\n    (if (= 0 to-go)\n      (seq result)\n      (recur (- to-go 1)\n             (cond\n               (= (count result) 0) [1]\n               (= (count result) 1) [1 1]\n               :else (conj result (+ (nth result (- (count result) 2)) (nth result (- (count result) 1)))))))))","user":"55c4cda5e4b0e31453f649a5"},{"code":"(fn fib [n]  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        :else (conj (fib (dec n))\n                    (+ (last (fib (- n 2))) (last (fib (- n 1)))))))","problem":26,"user":"4f050377535dcb61093f6bed"},{"problem":26,"code":"( fn fib\n  [ x ]\n  ( let [ fib-elt\n         ( fn f [ t ]\n           ( if ( <= t 1 ) 1 ( + ( f ( - t 1 ) ) ( f ( - t 2 ) ) ) )\n         ) ]\n    ( map fib-elt ( range x ) )\n  )\n)","user":"57561529e4b02ea1147992d3"},{"problem":26,"code":"(fn [n] \n  (loop [res [1 1]] \n    (if (>= (count res) n)\n      (seq res)\n      (let [x (count res)\n            k (+ (last res) (nth res (- x 2)))] \n        (recur (conj res k) )))))","user":"5756f324e4b02ea1147992e8"},{"code":"(fn [n]\n\t(let [n2 (map inc (range n))]\n\n      (map (fn b [n3]\n             (if (< n3 3) 1\n        \t\t(+ (b (dec (dec n3))) (b (dec n3)) )\n        \t\t) \n        )\tn2)\n     )\n  )","problem":26,"user":"500a214de4b03d00572d2d74"},{"problem":26,"code":"#(take\n  %\n  ((fn fibs\n     ([] (fibs 1 1))\n     ([current nextNum] (cons current (lazy-seq (fibs nextNum (+ nextNum current))))))))","user":"5aeb4c10e4b0cc2b61a3bbf6"},{"problem":26,"code":"(fn [n]\n  (cond \n      (zero? n) []\n      (= 1 n) [1]\n      (= 2 n) [1 1]\n      :else   (loop [sq [1 1]\n                     a 1\n                     b 1\n                     counter (- n 2)]\n                (if (> counter 0)\n                 (recur (conj sq (+ a b))\n                   b\n                   (+ a b)\n                   (dec counter))\n                 sq))))","user":"5d046f7ce4b0cc9c915881d5"},{"problem":26,"code":"(fn [num]\n  (loop [res [1 1]\n         i 2]\n    (if (= i num)\n      res\n      (recur (conj res (+ (nth res (- (count res) 2)) (nth res (- (count res) 1)) )) (inc i)))))","user":"59f75327e4b0966464fe6aec"},{"code":"#(map \n  (fn fib [x]\n    (if (< x 2)\n      1\n      (+ (fib (- x 1)) (fib (- x 2)))\n    )\n  )\n  (range 0 %)\n)","problem":26,"user":"532cb6bbe4b019098a6f8b33"},{"problem":26,"code":"(fn fib [n]\n  (loop [fiblist [1 1]\n         i (- n 2)]\n    (if (pos? i)\n    (recur (conj fiblist (reduce + (take-last 2 fiblist))) (dec i))\n      fiblist\n      )))","user":"584574a1e4b089d5ab817e69"},{"problem":26,"code":"(fn [n]\n  (loop [a 0 b 0 c 1 p 1 s '(1)]\n    (if (>= p n)\n      (reverse s)\n      (let [d (+ b c)]\n      \t(recur b c d (+ p 1) (cons d s))))))","user":"4eb9d8e0535dfed6da9c6d60"},{"problem":26,"code":"#(take %\n  (map first\n    (iterate (fn [[i1 i2]]\n                 [i2 (+ i1 i2)])\n             [1 1])))","user":"56b41972e4b0982f16b37e1f"},{"problem":26,"code":"(fn [n] (loop [n1 1 n2 1 acc [1 1] r (- n 2)] (if (= r 0) acc (recur n2 (+ n1 n2) (conj acc (+ n1 n2)) (- r 1)))))","user":"58152157e4b0f478707a0631"},{"problem":26,"code":"(fn fib-seq-iterate [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5f3103aee4b0574c87022c24"},{"code":"(fn [n]\n  (letfn [(fiboloop [n]\n                    (if (or (= n 1) (= n 2))\n                      1\n                      (+ (fiboloop (- n 1)) (fiboloop (- n 2)))))]\n    (map fiboloop (take n (iterate inc 1)))))","problem":26,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn [x] \n  (loop \n    [last 1 second-to-last 0 increment 0 list-so-far []]\n    (if (= x increment)\n      list-so-far\n      (recur (+ last second-to-last) last (inc increment) (conj list-so-far last)))))","problem":26,"user":"523d06aae4b0dbf0c301728b"},{"problem":26,"code":"(fn [x]\n  (map first (take x\n                          (iterate\n                            (fn [y] [(second y) (+ (first y) (second y))])\n                            [1 1])\n                          )))","user":"56128c54e4b05f002753df93"},{"problem":26,"code":"(fn [n]\n  (loop [x 2\n         result '(1 1)]\n    (if (= n x)\n      (reverse result)\n      (let [[a b & _] result]\n        (recur (inc x) (cons (+ a b) result))))))","user":"5524120fe4b0882d96d091b7"},{"problem":26,"code":"#(loop [xs [1 1], cnt %]\n   (if (= cnt 2)\n     xs\n     (recur (conj xs (apply + (take-last 2 xs))) (dec cnt))))","user":"5f1a0ca2e4b091ba50b4dbe0"},{"problem":26,"code":"(fn [length]\n (map (fn fib [n]\n (if (= n 0)\n 0\n (if (= n 1)\n 1\n (+ (fib (dec n)) (fib (- n 2)))))) (range 1 (inc length))))","user":"5522a795e4b0882d96d091a7"},{"problem":26,"code":"#(loop [a 0 b 1 i 1 v []]\n  (if (> i %)\n    v\n    (recur b (+ a b) (inc i) (conj v b))\n    )\n  )","user":"5e259d05e4b05b4b01516169"},{"problem":26,"code":"(fn [n]\n  (loop [fibs []\n         first 0\n         second 1\n         cnt 0]\n    (if (= cnt n) fibs\n      (recur (conj fibs second)\n             second\n             (+ first second)\n             (inc cnt)))))","user":"576186a5e4b0994c1922fb8e"},{"problem":26,"code":"(fn iter\n  [x]\n  (let [fibo (fn fibo [x]\n                (cond\n                  (= x 1) 1\n                  (= x 2) 1\n                  :else (+ (fibo (- x 2))\n                           (fibo (- x 1)))))]\n\n    (if (zero? x)\n      []\n      (conj (iter (dec x)) (fibo x)))\n    ))","user":"5a067f26e4b01bb0ae8afdcc"},{"code":"(fn [n] (nth (iterate #(conj % (apply + (take 2 (rseq %)))) [1 1]) (- n 2)))","problem":26,"user":"519ef784e4b087743fad2198"},{"problem":26,"code":"#(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))] (take % (fib 1 1)))","user":"4f5599dfe4b0a7574ea71806"},{"code":";(fn fib [n]\n;  (take n '(1 1 2 3 5 8 13 21))) ; Ahaha!\n\n(fn fib [n]\n  (if (< n 3)\n    (take n '(1 1))\n    (concat (fib (- n 1))\n      (list (reduce +\n        (take-last 2 (fib (- n 1))))))))","problem":26,"user":"4fc50bcbe4b081705acca375"},{"problem":26,"code":"#(cond\n  (= 0 %) \"n大于1\"\n  (= 1 %) 1\n  (= 2 %) '(1 1)\n  (>= % 3) (loop [x 1 fib [1 1]]\n                 (if (= (count fib) %)\n                   fib\n                   (recur (inc x) (conj fib (+ (fib (dec x)) (fib x))) )\n                   )))","user":"582c526ae4b051871117bf88"},{"problem":26,"code":"#(take % ((fn a [x y] (lazy-seq (cons y (a y (+ x y))))) 0 1))","user":"577aea7be4b0d3393e5deb09"},{"code":"#(map \n   (fn fibb [x]\n        (cond\n          (= x 1) 1\n          (= x 2) 1\n          :else (+ (fibb (- x 1)) (fibb (- x 2)))))\n   (range 1 (+ % 1) 1))","problem":26,"user":"4ff520dee4b0678c553fc367"},{"code":"#(loop [fib '(1 1), cur 2] (if (not= cur %) (recur (concat fib [(+ (last fib) (second (reverse fib)))]) (inc cur)) fib))","problem":26,"user":"51c9fe91e4b09ce160bef5b6"},{"code":"(fn [n]\n  (map second\n    (take n\n      (iterate (fn [[a0 a1]] [a1 (+ a0 a1)]) [0 1]))))","problem":26,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [x]\n  (loop [a [1 1] n (- x 2)]\n    (if (zero? n)\n      (seq a)\n      (recur \n        (conj a (+ (last a) (nth a (- (count a) 2))))\n        (dec n)))))","problem":26,"user":"4f040bbf535dcb61093f6b95"},{"code":"(fn [n]\n  (loop [n (dec (dec n)) a [1 1]]\n    (if (= n 0)\n      a\n      (recur (dec n) (conj a (apply + (subvec a (- (count a) 2)))))\n      )\n    )\n  )","problem":26,"user":"4fa7b013e4b081705acca1c8"},{"code":"(fn fib [n]\n        (loop [n n\n               prev 0\n               result [1]]\n          (if (= 1 n )\n            result\n            (recur (dec n) (last result) (conj result (+ (last result) prev)))\n           )))","problem":26,"user":"536581e4e4b0243289761e6d"},{"problem":26,"code":"(fn[rank] (take rank (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1] ))))","user":"5272645de4b03e8d9a4a742c"},{"problem":26,"code":"#(letfn [(fib [n]\n            (cond (zero? n) n\n                  (= n 1) n\n                  :else (+ (fib (- n 2)) (fib (dec n)))))]\n    (map fib (range 1 (inc %)))\n   )","user":"5bd9549ee4b0ed4b8aab4bf0"},{"problem":26,"code":"(fn [x] ( take x ( concat [1 1] \n\t\t\t(take (- x 1) \n\t\t\t\t(\n\t\t\t\t\t(fn lazy-seq-fibo \n\t\t\t\t\t\t[a b] \n\t\t\t\t\t\t(let [n (+ a b)] \n\t\t\t\t\t\t\t(lazy-seq \n\t\t\t\t\t\t\t\t(cons n (lazy-seq-fibo b n)\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t) 1 1 \n\t\t\t\t)\n\t\t\t)\n\t\t)\n    )\t\t\n)","user":"56503c4ee4b0284900eef6bb"},{"problem":26,"code":"#(take % (cons 1 ((fn fib [n-2 n-1] (cons (+ n-1 n-2) (lazy-seq (fib n-1 (+ n-1 n-2))))) 0 1)))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":26,"code":";; #(loop [i % f '() x 1 y 1] (if (zero? i) (reverse f)\n;;  (recur (dec i) (conj f x) y (+ x y))))\n\n#(take % \n  ((fn fib [x y] (cons x (lazy-seq (fib y (+ x y))))) 1 1))","user":"591d182ee4b09b4ee5954c10"},{"problem":26,"code":"(fn fibonacci [n] (cond\n                   (= n 1) '(1)\n                   (= n 2) '(1 1)\n                   :else (let [coll (fibonacci (- n 1))]\n                           (concat coll (list (+ (last coll) (last (butlast coll)))))\n                           )\n                   )\n  )","user":"5ceca436e4b0a17bb84e2bf8"},{"problem":26,"code":"#(take % \n       ((fn fib [a b] \n          (lazy-seq \n           (cons a (fib b (+ a b))))) \n        1 1))","user":"5630ce72e4b0bfe05bf11786"},{"problem":26,"code":"#(loop [c 1 l [1]]\n    (if (= c %)\n      l\n      (recur (+ c 1) (conj l (reduce + (take-last 2 l))))))","user":"570dc955e4b0b0fb43fd06e0"},{"problem":26,"code":"(fn [n]\n                (loop [fib-nums [1 1]]\n                    (if (>= (count fib-nums) n)\n                        (subvec fib-nums 0 n)\n                        (\n                            let [[n1 n2] (reverse fib-nums)]\n                            (recur (conj fib-nums (+ n1 n2)))\n                        )\n                    )\n                )\n            )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn fib [x]\n  (if (= x 2)\n      [1 1]\n      (conj\n        (fib (- x 1))\n        (+ (last (fib (- x 1)))\n           (last (butlast (fib (- x 1))))))\n))","problem":26,"user":"4fa67030e4b081705acca1b7"},{"problem":26,"code":"(comp reverse (fn fib [x]\n  (if (= x 2)\n    '(1 1)\n    (let [f (fib (- x 1))]\n      (conj f (+ (first f) (second f)))))))","user":"56897739e4b0dcc4269f407d"},{"problem":26,"code":"(fn fib [x]\n  (cond (= 1 x) [1]\n        (= 2 x) [1 1]\n        :else   (let [d (fib (dec x))]\n                  (conj d (apply + (take-last 2 d)))\n                  )))","user":"5b81139fe4b047b03b203782"},{"problem":26,"code":"(fn [x] \n  (loop [n x\n         rst [1 1]]\n  (if (> n 2)\n    \n    (recur (- n 1)\n           (conj rst (+ (last rst) (first (rest (reverse rst)\n                                                )\n                                          )\n                        )\n                 )\n           )rst\n    )\n    )\n  )","user":"591ac8ece4b09b4ee5954bdd"},{"problem":26,"code":"(fn [n] \n  (letfn [(fib\n           [cur-coll current next n]\n           (if (zero? n)\n             cur-coll\n             (recur (conj cur-coll next) next (+ current next) (dec n))))]\n    (fib [] 0N 1N n)))","user":"53bb95d0e4b047364c044508"},{"problem":26,"code":"#(take % ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"50c385a8e4b00e537d00254d"},{"problem":26,"code":"(fn fib-seq [n]\n  (if (= n 0) []\n    (let [nxt (fn f [x]\n                (cond\n                  (= x 0) 0\n                  (= x 1) 1\n                  :else\n                   (+ (f (- x 1)) (f (- x 2)))))] \n      (conj (vec (fib-seq (dec n))) (nxt n)))))","user":"5501f45fe4b07d26eda61d7f"},{"code":"(fn fib \n  ([n]\n   (if (> n 1) \n     (fib n [1 1])\n     [1]))\n  ([n xs]\n   (if (= n 2)\n     xs\n     (fib (dec n)(conj xs (+ (last xs)(second(reverse xs)) ) ) ))))","problem":26,"user":"53120cb5e4b08068f379ecf0"},{"problem":26,"code":"(fn [c]\n  (loop [r '(1)\n         o 0\n         a 1]\n    (if (= (count r) c)\n      (reverse r)\n      (recur (conj r (+ o a)) a (+ a o)))))","user":"54d321b3e4b0e8a36923e602"},{"code":"#(loop [fibs [1 1] i %] (if (< i 3) fibs (recur (conj fibs (+ (last fibs) (last (butlast fibs)))) (dec i))))","problem":26,"user":"5150600de4b098b221effc29"},{"code":"(fn funct [x]\n(drop 1 (map (fn fib [n]\n  (if\n   (<= n 1) n\n     (+ (fib(- n 1)) (fib(- n 2))) \n    ) )(range (+ 1 x)))))","problem":26,"user":"51427a8be4b0b50abeb46b37"},{"code":"(fn [x]\n  (loop [a 0 b 1 c '() d x] \n    (if (= d 1)\n      (concat (list 1) (vec c) )\n      (recur b (+ a b) (concat c (list (+ a b))) (dec d))\n    )\n  )\n)","problem":26,"user":"4e8b73e4535d65386fec2120"},{"code":"(fn [x]\n\n(let [fib (fn fib[n]\n  (cond\n   (= n 0) 0\n   (= n 1) 1\n   :else (+ (fib (dec n)) (fib (- n 2)))))]\n  (map fib (range 1 (inc x)))))","problem":26,"user":"51ef31dfe4b0871fa145d9a0"},{"code":"(fn f[x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4eeb8f68535d93acb0a668a9"},{"problem":26,"code":"(fn [n] \n\t\t(take n (map first (iterate \n\t              (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"5dc85f8ae4b02f9375f4e1da"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"573d8658e4b05c31a32c0814"},{"problem":26,"code":"(fn fibs [n]\n  (let [nth-fib (fn nth-fib [n]\n                  (if (< n 2) n\n                      (+ (nth-fib (- n 1)) (nth-fib (- n 2)))))]\n    (map nth-fib (range 1 (+ n 1)))))","user":"5c196e7be4b01240ff5671fb"},{"code":"(fn [x]\n(loop [e1 1, e2 1, n x, r []]\n   (if (= n 0)\n     r\n     (recur e2 (+ e1 e2) (dec n) (conj r e1))\n     )\n  )\n)","problem":26,"user":"531f0a26e4b08068f379edbf"},{"code":"(fn [x]\n  (letfn [[f  [x y]\n      (cons y (lazy-seq (f y (+ x y))))]]\n  (take x (cons 1 (f 1 1)))))","problem":26,"user":"507db411e4b03c76e5499e06"},{"problem":26,"code":"(fn [fct]\n  (loop [ct fct acc '()]\n    (if (= 0 ct)\n      (reverse acc)\n      (recur (dec ct) (if (empty? acc)\n                        '(1)\n                        (cons (apply + (take 2 acc)) acc))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":26,"code":"#(loop [fibs [1 1]]\n          (if (<= % (count fibs))\n            (take % fibs)\n            (recur (conj fibs (reduce + (take-last 2 fibs))))))","user":"5ee888a4e4b029a2061bbeb2"},{"problem":26,"code":"(fn [x]\n  (loop [n 1 fib '(1)]\n  \t(if (= n x)\n      (reverse fib)\n      (recur (inc n) (cons (apply + (take 2 fib)) fib))\n      )\n  ))","user":"5c46e6dde4b0e06e1360a3a7"},{"problem":26,"code":"#(take % (letfn [(fib-step [[a b]]\n  [b (+ a b)])\n                (fib-seq []\n  (map first (iterate fib-step [1 1])))]\n          (fib-seq)))","user":"54ecd709e4b024c67c0cf859"},{"code":"(fn fibo* [n]\n  (loop [a 1 b 1 n1 2 res '(1 1)]\n    (if (= n1 n) (reverse res)\n      (recur\n        b (+ a b) (+ n1 1)\n                 (conj res (+ a b))))))","problem":26,"user":"4f04a06d535dcb61093f6bd9"},{"problem":26,"code":"(fn [n]\n  (take n\n        ((fn lazy-fib [a b] \n           (lazy-seq (cons a (lazy-fib b (+ a b))))) 1 1)))","user":"5899c54de4b00487982d52fa"},{"problem":26,"code":"(fn fib [n] \n  (loop [idx 0\n         myseq [1]\n         head 1\n\t\t head1 0]\n      (if (> idx (- n 2))\n\t    myseq\n\t\t(recur (inc idx)\n\t\t       (conj myseq (+ head head1))\n\t\t\t   (+ head head1)\n\t\t\t   head))))","user":"54df3c94e4b024c67c0cf7aa"},{"problem":26,"code":"(fn [amount]\n  ((fn [seq]\n    (if\n      (= amount (count seq))\n      seq\n      (recur (conj seq (if\n                         (< (count seq) 2)\n                         1\n                         (+ (nth seq (dec (count seq))) (nth seq (- (count seq) 2))))))\n      )\n    ) [])\n  )","user":"58bef424e4b021aa9917eccb"},{"problem":26,"code":"(fn [n] (let [helper (fn [n acc f1 f2]\n                       (if (= n 0)\n                         acc\n                         (recur (dec n) (conj acc (+ f1 f2)) f2 (+ f1 f2))))]\n          (helper (- n 2) [1 1] 1 1)))","user":"53de622ce4b0d874e779ae34"},{"problem":26,"code":"(fn [n]\n  (take n ((fn lazy-fib\n             ([]\n              (lazy-seq (cons 1 (lazy-fib 1 (+ 0 1)))))\n             ([prev-val next-val]\n              (lazy-seq (cons next-val (lazy-fib next-val (+ prev-val next-val)))))))))","user":"5d49ec5ee4b0776584bd6f1c"},{"code":"#(reduce (fn [l _] (conj l (apply + (take-last 2 l)))) [1 1] (range 0 (- % 2)))","problem":26,"user":"52d63e89e4b09f7907dd134e"},{"code":"(fn my-fib\n  ([n]\n     (my-fib n (list)))\n  ([n coll]\n     (if (zero? n)\n       coll\n       (recur (dec n)\n              (conj coll\n                    ((fn calc-fib [n]\n                      (cond\n                        (>= n 2) (+ (calc-fib (- n 1)) (calc-fib (- n 2)))\n                        (= n 1) 1\n                        :else 0))\n                     n))))))","problem":26,"user":"4fa27e18e4b0dcca54ed6d68"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= 0 n) []\n    (= 1 n) [1]\n    :else (loop [iter 2\n                 fibon [1 1]\n                 penultimate 1\n                 ultimate 1]\n            (if (>  n iter)\n              (let [new-ultimate (+ penultimate ultimate)]\n              \t(recur (+ 1 iter)\n                       (conj fibon new-ultimate)\n                       ultimate\n                       new-ultimate))\n              fibon))))","user":"5c62f1cde4b0fca0c1622655"},{"problem":26,"code":"#(take % ((fn fib\n            [a b]\n            (lazy-seq\n             (cons a (fib b (+ a b)))))\n              1 1))","user":"5677f5dee4b05957ce8c616e"},{"code":"(fn fibonacci\n        ([] (concat [1 1] (fibonacci 1 1)))\n        ([n] (take n (fibonacci)))\n        ([a b] (lazy-seq (cons (+ a b) (fibonacci b (+ a b))))))","problem":26,"user":"4e589bdc535d8a8b8723a295"},{"problem":26,"code":"#(take % (map first \n              (iterate (fn [[a b]] \n                         [b (+ a b)]) \n                       [1 1])))","user":"54848141e4b0e286459a119e"},{"problem":26,"code":"(fn fib [initial-n]\n  (loop [a 0, b 1, n initial-n, l []]\n    (if (> n 0)\n      (recur b (+ a b) (dec n) (conj l (+ a b)))\n      (cons 1 (drop-last l)))))","user":"5400407de4b0de5c4184860a"},{"problem":26,"code":"(fn [x] (map (fn fibo [x] (case x 0 0 1 1 (let [fib1 (fibo (- x 1)) fib2 (fibo (- x 2))] (+ fib1 fib2)))) (range 1 (+ x 1))))","user":"60901a6be4b03bd49d9f36c9"},{"problem":26,"code":"#(map second (take % (iterate (fn [[a b]] (vector b (+ b a))) [0 1])))","user":"576a987be4b0a07e8fc1811b"},{"problem":26,"code":"(fn [limit]\n  (loop [x 2\n         result [1 1]]\n    (if (= x limit)\n      result\n      (recur (inc x) (conj result (+ (nth result (- x 2)) (nth result (- x 1))))))))","user":"561fc0d0e4b064ca9f4b16d2"},{"problem":26,"code":"#(loop [i 2 j [1 1]] (if (< i %) (recur (inc i) (conj j (+ (last j) (last (butlast j))))) j))","user":"54543484e4b0e397800069d4"},{"code":"#(reverse (loop [acc (), i 1, a 0, b 1]\n              (if (<= i %)\n                  (recur (cons b acc) (inc i) b (+ a b))\n                  acc)))","problem":26,"user":"4e9e0640535dbda64a6f6b91"},{"problem":26,"code":"#(loop [rang % fibo [1] iter 1 u 0 v 1]\n   (if (= iter rang)\n     fibo\n     (recur rang (conj fibo (+ u v)) (inc iter) v (+ u v))))","user":"55d34273e4b0e31453f64a60"},{"code":"#(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))] (take % (fib 1 1)))","problem":26,"user":"4ed286d4535d44c135fd68d7"},{"problem":26,"code":"(fn [n] (take n (map last (iterate (fn [[a b]] [(+ b a) a]) [1 1 ]))))","user":"60836285e4b0736b099e42e4"},{"code":"(fn fib\n  ([cnt] (fib cnt '(1 1)))\n  ([cnt sq]\n        (if (= cnt (count sq))\n          sq\n          (fib cnt (conj (vec sq) (reduce + (take-last 2 sq)))))))","problem":26,"user":"52efd3d9e4b05e3f0be25ed4"},{"problem":26,"code":"(fn [y] \n  (reverse ((fn [x]\n              (reduce\n               (fn [a b] (conj a (+ (first a) (first (rest a)))))\n               '(1 1)\n               (range (- x 2)))) y)))","user":"585a7b05e4b0f14aab7c874d"},{"problem":26,"code":"(fn _fibo [n]\n         (cond (= n 1) [1]\n               (> n 1) (let [x (_fibo (dec n))]\n                         (conj x (apply + (take-last 2 x))))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"#(map (fn [n] (cond (= n 1) 1 (= n 2) 1 :else (loop [i 2 a 1 b 1]\n   (if  (= i n) b (recur (inc i) b (+ a b)))))) (range 1 (inc %)))","problem":26,"user":"4f8ab084e4b02e764a0a5171"},{"problem":26,"code":"(fn [n]\n  (loop [previous 0 current 1 n n output []]\n    (if (zero? n)\n      output\n      (recur\n        current (+ current previous) (dec n) (conj output current)))))","user":"5784ff88e4b0ebec4cfb74d4"},{"problem":26,"code":"#(map (fn myfib [n]\n        (if (< n 2)\n          n\n          (+ (myfib (- n 1)) (myfib (- n 2))))) (map (fn [x] (+ x 1))(range %)))","user":"5549394fe4b0a04f79299565"},{"problem":26,"code":"(fn fibo [n] (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"589ec900e4b02bd94d917e65"},{"code":"#(loop [seq [1]\n        a 0\n        b 1]\n  (if (= (count seq) %)\n    seq\n    (let [n (+ a b)]\n      (recur (conj seq n) b n))))","problem":26,"user":"52bb123ae4b07a9af57922de"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1)))","problem":26,"user":"4e40529b535dc968683fc49a"},{"code":"(fn fibonacci [n]\n  (apply\n   (fn rec [fiblist]\n    (cond\n      (= n (count fiblist)) fiblist\n      :else (rec\n              (conj\n                fiblist\n                (apply + (take-last 2 fiblist))))))\n\n  \t[[1 1]])\n)","problem":26,"user":"516fc530e4b0b86e66597f00"},{"problem":26,"code":";#(take % (loop [m 0 n 1] (cons n (recur n (+ m n)))))\n(fn [x] (letfn [(fib [m n] (cons n (lazy-seq (fib n (+ m n)))))]\n   (take x (fib 0 1))))","user":"52c00e32e4b07a9af5792341"},{"code":"(fn fib [n]\n  (letfn [(fib-step [[a b]]\n            [b (+ a b)])\n          (fib-seq []\n            (map first (iterate fib-step [1 1])))]\n    (take n (fib-seq))))","problem":26,"user":"51fda906e4b0f1313d468a4f"},{"problem":26,"code":"(fn my-fib\n  [n]\n  (condp = n\n    1 [1]\n    2 [1 1]\n    (let [fib (my-fib (dec n))]\n      (conj fib (+ (last fib) (nth fib (- n 3))) ))))","user":"5c36d110e4b0d62ef62d9f6a"},{"code":"#(letfn [(fib [a b depth]\n              (if (zero? depth)\n                []\n                (cons a (fib b (+ a b) (dec depth)))))]\n   (fib 1 1 %))","problem":26,"user":"50f9739ce4b0e7c80cb15a4d"},{"problem":26,"code":"#(loop [i (- % 2) x [1 1]]\n   (if (= i 0) x\n     (recur (dec i) (conj x (+ (last x) (first(take-last 2 x)))))))","user":"586631a2e4b0f14aab7c885a"},{"code":"#(take %\n(map first \n       (iterate \n         (fn [[a b]] [b (+ a b)]) \n         [1 1])\n         ))","problem":26,"user":"4f8490fae4b033992c121c34"},{"problem":26,"code":"(fn [n] (-> ((fn  [acc n]\n                 (if (= n 0)\n                   acc\n                   (recur (conj acc (+ (first acc) (second acc))) (dec n)))) '(1 1) (- n 2))\n              reverse))","user":"53b49c2ce4b047364c0444b7"},{"code":"(fn fibonacci [n]\n  (loop [a 1 b 1 fib []]\n    (if (< (count fib) n)\n        (recur b (+ a b) (conj fib a))\n        fib)))","problem":26,"user":"4f043bbd535dcb61093f6bb2"},{"code":"(fn fib [n]\n  (take n \n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51bfc1f0e4b0e49ef9037dd4"},{"problem":26,"code":"(fn [x]\n  (take x(map first(iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"5e563c88e4b027a2e10ac0f6"},{"problem":26,"code":"#(take % (\n         (fn fibi [x y]\n           (lazy-seq (cons x (fibi y (+ x y))))) \n         1 \n         1))","user":"55170dd9e4b06a49daca83bd"},{"code":"(fn fib [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1) ) )","problem":26,"user":"52b9c5e8e4b07a9af57922c2"},{"code":"#(nth\n  (iterate (fn [x] (conj x (apply + (take-last 2 x)))) '[1])\n  (dec %))","problem":26,"user":"4f3cc2fbe4b0e243712b1f55"},{"problem":26,"code":"(fn [x] (loop [n (- x 2) a [1 1]] (if (zero? n) a (recur (dec n) (conj a (reduce + (take-last 2 a)))))))","user":"593c71cbe4b069cdc2982b90"},{"code":"(fn fib-list [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else (concat (fib-list (- n 1)) (list (+ (last (fib-list (- n 1)))\n                                                  (last (fib-list (- n 2)))\n                                                  ))))\n  )","problem":26,"user":"51b76227e4b0d906fcd71d35"},{"problem":26,"code":"(fn fib\n  [x]\n  (if (= x 2) \n    [1 1]\n    (let [rec (fib (- x 1))]\n      (conj  rec (apply + (take-last 2 rec))))))","user":"535f9a5ce4b04ce2eb3ed2de"},{"problem":26,"code":"(fn [cnt]\n  (map\n   (fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2)))))\n   (range cnt))\n  )","user":"59932dc1e4b0b211ea3aaaad"},{"problem":26,"code":"(fn [n] \n        (cond\n          (= n 1) '(1)\n          (= n 2) '(1 1)\n          (> n 2) \n          ((fn [k lst] (if (= k 2) lst (recur (dec k) (concat lst (list (+ (last lst) (first (take-last 2 lst)))))))) n '(1 1))))","user":"544285dde4b032a45b869380"},{"problem":26,"code":"(fn[x](take x (map first (iterate (fn [[a b]] [b ( + a b)]) [ 1 1 ] ))))","user":"5762b38ce4b0994c1922fbad"},{"code":"(partial (fn fib-seq [cum n]\n           (cond\n             (= n 0) (reverse cum)\n             (nil? (seq (rest cum))) \n               (fib-seq (cons 1 cum) (dec n))\n             :else   \n               (fib-seq (cons (+ (first cum) (first (rest cum))) cum) (dec n))))\n         '())","problem":26,"user":"521a4ff5e4b0c4ef0be83004"},{"code":"#(map (fn fib [n]\n    (if (or (= 1 n) (= 0 n))\n      1\n      (+ \n       (fib (- n 1))\n       (fib (- n 2)))))\n  (range 0 %))","problem":26,"user":"517bf28de4b07ef0e56148d5"},{"problem":26,"code":"#(->> [1 1] \n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)\n    (take %))","user":"55caabd1e4b0e31453f649fb"},{"code":"(fn [n]\n  (loop [i 2 s '(1 1)]\n    (if (>= i n) \n      (reverse s)\n      (recur (inc i) (cons (+ (first s) (second s)) s)))))","problem":26,"user":"52976262e4b02ebb4ef75041"},{"code":"#(take %\n  ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))","problem":26,"user":"4e570f47535d8a8b8723a287"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         res []\n         a 0\n         b 1]\n    (if (zero? n)\n      res\n      (recur (dec n) (conj res b) b (+ a b)))))","user":"56a655dbe4b0542e1f8d14eb"},{"code":"(fn [x]\n  (if (< x 3)\n    (repeat x 1)\n    (loop [n2 1\n           n1 1\n           c (- x 2)\n           acc [1 1]]\n      (if (zero? c)\n        (seq acc)\n        (let [a (+ n1 n2)]\n          (recur n1 a (dec c) (conj acc a)))))))","problem":26,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn [x] (let \n  [fib \n    (fn acc-fib \n\t  [x lst]\n\t  (cond   (zero? x) '(0)\n\t          (= 1 x) '(1 0)\n\t          :else (let [fib-lst1 (acc-fib (- x 1) lst) fib-lst2 (acc-fib (- x 2) lst) fib1 (first fib-lst1) fib2 (first fib-lst2)] \n\t                  (cons (+ fib1 fib2) fib-lst1))))\n\tacc (fib x '())] (rest (reverse acc))))","problem":26,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":26,"code":"(fn fibs\n  [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"55355397e4b09218d5f44fae"},{"code":"(fn fibs [n]\n  (loop [a 1 b 1 left n result []]\n    \t(if (= left 0)\n      \t\tresult\n          \t(recur b (+ a b) (dec left) (conj result a)))))","problem":26,"user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn [n]\n  (letfn [(fib []\n(map first (iterate (fn [[a b]][b (+ a b)])[1 1])))]\n(take n (fib))))","problem":26,"user":"5202cfe7e4b030ee0c5b2702"},{"code":"(fn [n]\n  (let [fibs \n        (fn fibs []\n          (concat '(1 1) (lazy-seq (map + (fibs) (rest (fibs))))))]\n    (take n (fibs))))","problem":26,"user":"4dad8a6dc9a9d6ed1399dc57"},{"problem":26,"code":"(fn fibonacci-seq [n]\n  (loop [ip2 1\n         ip1 1\n         i 2\n         nth 3\n         result [1 1 2]]\n    (cond\n      (= n 1) [1]\n      (= n 2) [1 1]\n      (= n 3) [1 1 2]\n      (= n nth) result\n      true (recur ip1 i (+ ip1 i) (inc nth) (conj result (+ ip1 i))))))","user":"5711ca24e4b09c608db7044b"},{"problem":26,"code":"(fn [x]\n  (if (> 1 x)\n    nil\n    (loop [result '()]\n      (if (= (count result) x)\n        (reverse result)\n        (if (< (count result) 2)\n          (recur (conj result '1))\n          (recur (conj result\n                       (+ (first result)\n                          (first (rest result))))))))))","user":"56c55fbce4b05cc29241eea5"},{"problem":26,"code":"(fn fib ([x]\n         (if (= x 1)(vector 1)\n           (if (= x 2)\n             (vector 1 1)\n             (let [f (fib (dec x))]\n             (conj  f (+ (last f)(get f (- (count f) 2)))))))))","user":"5c486dece4b0e06e1360a3c0"},{"code":"#(loop [ coll []\n         x    0\n         y    1\n         i    % ]\n    (if (zero? i)\n       coll\n       (recur (conj coll y) y (+ x y) (dec i))))","problem":26,"user":"51057b2be4b06d28cacc92e8"},{"problem":26,"code":"(fn [x]\n  (let [add-last-2 #(conj % (apply + (take-last 2 %) ))\n       fib (fn [y curr-array]\n      (if (= y 2)\n        curr-array\n        (recur (dec y) (add-last-2 curr-array) )))\n\n        ]\n    (fib x [1 1])\n    )\n  )","user":"53c73e8ae4b00fb29b2212a5"},{"problem":26,"code":"#(take % \n  (map first (iterate (fn [[a b]]\n    [b (+ a b)]) [1 1]))\n)","user":"5c01ba2ce4b0bdcf453d1656"},{"code":"(fn [num] (reverse (nth (iterate #(cons (+ (first %)(second %)) %) (list 1 1)) (- num 2))))","problem":26,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":26,"code":"(fn fibboman\n  ([n] (fibboman 0 1  n '() ) )\n   ([f1 f2 n l]\n     (if (= n 0)\n       (reverse l) (fibboman f2 (+ f1 f2) (dec n) (conj l f2) )\n       )\n     )\n    )","user":"56f18d0ce4b04a395b9a0496"},{"code":"(fn fibs [n]\n  \"return list of first n fibonacci numbers\"\n  (loop [a 0 b 1 i 0 fibs '()]\n    (if (= i n) (reverse fibs)\n        (recur b (+ a b) (inc i) (conj fibs b)))))","problem":26,"user":"53287dace4b09d4e7a9b5507"},{"problem":26,"code":"(fn [n] (loop [res [] a 1 b 1] (if (= (count res) n) res (recur (conj res a) b (+ a b)))))","user":"56f8b6efe4b07572ad1a88a5"},{"problem":26,"code":"(fn [n] \n  (loop [i 0 fib []]\n    (if (< i n)\n        (if (>= i 2)\n          (recur (inc i) (conj fib (reduce + (last (split-at (- (count fib) 2) fib)))))\n          (recur (inc i) (conj fib 1)))\n      fib\n      )\n    )\n  )","user":"558b494ce4b0277789237629"},{"problem":26,"code":"#(take %\n       (map first\n       (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"57ab41dde4b0b8559636fc79"},{"code":"(fn [s]\n(concat '(1)\n((fn fib [x y ssize] \n    \n    (if (> ssize 0) \n     (concat (list (+ x y)) (fib y (+ y x) (dec ssize)) )\n             \n      )\n    ) \n\n    0 1 (dec s) ))\n)","problem":26,"user":"513f400ae4b051389b345b3f"},{"problem":26,"code":"#(map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range %))","user":"54ad9d76e4b09f271ff37ce6"},{"problem":26,"code":"(fn fib ([a] (fib [1 1] 1 1 a))\n  ([x y z t] \n   (if (= 2 t) x\n     (recur (conj x (+ y z)) z (+ y z) (dec t)))))","user":"5842d06be4b089d5ab817e22"},{"problem":26,"code":"(fn [x]\n  ((fn getFibNs [x a b fibNs]\n     (if (= x 0)\n       (reverse fibNs)\n       (getFibNs (- x 1) b (+ a b) (cons b fibNs)))) x 0 1 '()))\n;(fn [x] (cond (= x 0) '() (= x 1) '(1) (= x 2) '(1 1) :else ((fn getFibNs [x fibNs] (if (= x 0) (reverse fibNs) (getFibNs (- x 1) (cons (+ (first fibNs) (second fibNs)) fibNs)))) (- x 2) '(1 1))))\n;(fn [x] (if (= x 0) '() (if (= x 1) '(1) (if (= x 2) '(1 1) ((fn getFibNs [x fibNs] (if (= x 0) (reverse fibNs) (getFibNs (- x 1) (cons (+ (first fibNs) (second fibNs)) fibNs)))) (- x 2) '(1 1))))))\n;(fn [x] ((fn getFibNs [x fibNs] (if (= x 0) (reverse fibNs) (getFibNs (- x 1) (cons (+ (if (= (first fibNs) nil) 1 (first fibNs)) (if (= (second fibNs) nil) 0 (second fibNs))) fibNs)))) x '()))","user":"5d1cd478e4b02ea6f0fb6991"},{"problem":26,"code":"(fn fib \n  ([n fibs] \n   (if (= n 0) fibs\n    (fib \n      (dec n) \n      (conj \n        fibs \n        (+ \n          (peek (pop fibs))\n          (peek fibs)\n        )\n      )\n    )\n   )\n  )\n  ([n] (fib (dec (dec n)) [1 1]))   \n)","user":"5906d7e9e4b047aa04b1993f"},{"code":"(fn [n]\n  (reduce (fn [seq, elem] (let [fib-1 (or (last seq) 1)\n                                fib-2 (or (last (drop-last seq)) 0)]\n                            (conj seq (+ fib-1 fib-2))))\n          []\n          (repeat n 1)))","problem":26,"user":"4eb51942535d7eef30807365"},{"code":"#(take % ((fn fibo [] (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))","problem":26,"user":"4e8b557c535d65386fec2119"},{"problem":26,"code":"(fn [x] \n(take x\n  ((fn fib [a b]\n    (lazy-seq (cons a (fib b (+ b a)))))\n      1 1)))","user":"567c63f6e4b05957ce8c61bb"},{"code":"#(take % \n  ((fn fib [a b] \n    (cons a (lazy-seq \n      (fib b (+ a b))))) 1 1))","problem":26,"user":"4e7e33a3535db169f9c79708"},{"code":"(fn [x] (loop [cnt 0 ret '() ]\n  \t       (if (< cnt x)\n\t\t\t    (recur\n\t\t\t    (inc cnt) (conj ret (+ (if (empty? ret) 1 (first ret)) (if (empty? (rest ret)) 0 (first (rest ret))))))\n\t\t\t   (reverse ret))))","problem":26,"user":"4e8d5911535d65386fec2133"},{"problem":26,"code":"#(map (fn foo [x] (if (< x 2) 1 (+ (foo (- x 1)) (foo (- x 2))))) (range %))","user":"5d1ef23ee4b02ea6f0fb69bb"},{"code":"(fn [n]\n  ( take n\n    (\n    (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n    1 1 )\n  )\n)","problem":26,"user":"52da0712e4b09f7907dd13b2"},{"problem":26,"code":"(fn [n ](take n ((fn fib [a b]\n     (lazy-seq\n               (cons a (fib b (+ a b))))) 1 1)))","user":"603a6c40e4b0d5df2af222f7"},{"code":"(fn [x] \n  (take x \n      ((fn fib [a b] \n          (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4e580746535d8a8b8723a28c"},{"code":"(fn fib\n  [n]\n  (let [memfib (fn [num seen]\n                 (cond\n                  (= (count seen) num) seen\n                  :else (recur num (conj seen (+ (first seen) (second seen))))))]\n    (reverse (memfib n '(1 1)))))","problem":26,"user":"52b5edd1e4b0c58976d9ad3c"},{"problem":26,"code":"(fn [x]\n\t(let [next-fib (fn next-fib [seqn] \n\t(conj seqn (+\n\t\t(last seqn)\n\t\t(last (drop-last seqn))\n\t))\n\t\n)]     \n(nth (iterate next-fib [1 1]) (- x 2))\n\t)\n\t\n)","user":"585bcd51e4b0f14aab7c8771"},{"problem":26,"code":"(fn fibonacci [number]\n  (loop [fibs []]\n    (if (= number (count fibs))\n      fibs\n      (if (> 2 (count fibs))\n        (recur (conj fibs 1))\n        (recur (conj fibs (+ (last fibs)\n                             (nth fibs (- (count fibs) 2)))))))))","user":"5464dd11e4b01be26fd746d2"},{"problem":26,"code":"(fn fib [n]\n  (loop [prev 0 curr 1 iter n xs []]\n    (if (= 0 iter)\n      xs\n      (recur curr (+ prev curr) (dec iter) (conj xs curr)))))","user":"54a31fdae4b09f271ff37c64"},{"code":"( fn [nn]\n                        ( into '() ( reverse\n                        (\n                                (fn fib [l x y n]\n                                        ( if (= 0 n)\n                                          l\n                                          (fib (conj l x) y (+ x y) (- n 1))\n                                        )\n                                ) [] 1 1 nn\n                        )\n                        ))\n                )","problem":26,"user":"537fa02ce4b06839e8705ebc"},{"problem":26,"code":"#(take % ((fn fibonacci-numbers [a b] (cons a (lazy-seq (fibonacci-numbers b (+ a b))))) 1 1))","user":"52ce1abfe4b07d0d72b27389"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 s '(1 1)]\n    (if (= i n)\n      (reverse s)\n      (recur (inc i) (conj s (+ (first s) (second s)))))))","user":"569429c7e4b0dcc4269f411a"},{"code":"(fn fib\n      ([n]\n       (fib [1 1] n))\n      ([x, n]\n       (if (< (count x) n)\n         (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n         x)))","problem":26,"user":"51f2a491e4b0210f90e74553"},{"code":"(fn [len] (reverse (reduce (fn [x,y] (conj x (if\n                               (> 2 (count x))\n                               1\n                               (+ (first x) (second x))))) (list) (range 0 len))))","problem":26,"user":"4f751a54e4b0fbe0118ec555"},{"problem":26,"code":"(fn [x] (reduce (fn [s i] (conj s (+ (nth s i) (nth s (inc i))))) [1 1] (range (- x 2))))","user":"549c3e0ce4b0f3d1d8e70f87"},{"code":"#(take % ((fn _nfib[a b] (lazy-seq (cons a (_nfib b (+ a b))))) 1 1))","problem":26,"user":"52e68e61e4b09f7907dd1479"},{"code":";#(loop [fibs '(1 1)] (if (= (count fibs) %) (reverse fibs) (recur (conj fibs (reduce + (take 2 fibs))))))\n#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"536a37efe4b0243289761eaa"},{"problem":26,"code":"(fn [number]  \n  (loop [acc '()\n         c (dec number)]\n    (if (< c 0) \n      acc\n      (recur (conj acc ((fn fibo [n]\n   \t\t\t\t\t\t (if (<= n 1) \n     \t\t\t\t\t   1 \n                           (+ (fibo (dec n)) (fibo (- n 2)) )\n                         )\n                        ) c)) (dec c))\n    )\n  )\n)","user":"55aa8276e4b0988bba2ad94e"},{"problem":26,"code":"(fn [x] \n   (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5c748bf5e4b0fca0c16227cb"},{"code":"#(loop [n 0 li []]\n    (if (< n %)\n      (if (>= (count li) 2)\n        (recur (inc n) (conj li (+ (last li)\n                                   (last (butlast li)))))\n        (recur (inc n) (conj li 1)))\n      (lazy-seq li)))","problem":26,"user":"4f62ef0ce4b0defedf855fdc"},{"problem":26,"code":"(fn [n] (loop[n n\n              s '()\n              fib1 1\n              fib2 1]\n          (if (< 0 n)\n            (recur (dec n) (conj s fib1) fib2 (+ fib1 fib2))\n            (reverse s))))","user":"5a6b15e9e4b0512ff01cda32"},{"problem":26,"code":"(fn [x]\n      (reverse \n        (loop [x x \n               fibo '()]\n          (if (= 0 x)\n            fibo\n            (recur \n              (dec x)\n              (conj fibo (if (> 2 (count fibo))\n                           1\n                           (+ (first fibo) (first (rest fibo))))))))))","user":"53c69ebce4b00fb29b22129c"},{"code":"#(loop [c [] x 0 y 1 f %]\n  (if (= f 0)\n  c\n  (recur (conj c (+ x y))\n    (+ x y)\n    x\n    (dec f))\n))","problem":26,"user":"4e814706535db62dc21a62bb"},{"code":"(fn [x]\n  (let [fuck (fn tmp [s a b n]\n               (if (> n x)\n                 s\n                 (tmp (concat s (list (+ a b))) b (+ a b) (inc n))))]\n    (cond (= x 0) '()\n          (= x 1) '(1)\n          (= x 2) '(1 1)\n          :else (fuck '(1 1) 1 1 3))))","problem":26,"user":"51c1229be4b0c9c822882944"},{"problem":26,"code":"(fn [x] (map (fn fib [x] (cond (= 0 x) 1 (= 1 x) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) (range x)))","user":"5422e975e4b01498b1a71ac9"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [1 1]\n         n' 2]\n    (if (= n n')\n      fibs\n      (let [n-1 (fibs (dec n'))\n            n-2 (fibs (- n' 2))]\n        (recur (conj fibs (+ n-1 n-2)) (inc n'))))))","user":"578f1edae4b0ebec4cfb7590"},{"problem":26,"code":"(fn fib ([c] (fib c [1 1])) ([c a] (if (<= c (count a)) (seq a) (fib c (conj a (reduce + (take-last 2 a)))))))","user":"564066dee4b08d4f616f5ee2"},{"code":"(fn [x]\n  (loop [x1 1 x2 1 n 2 result [1 1]]\n    (if (< n x)\n      (recur x2 (+ x1 x2) (inc n) (conj result (+ x1 x2)))\n      result )))","problem":26,"user":"502952c9e4b0b33e9bf6fdf1"},{"problem":26,"code":"(fn [n]\n  (loop [s []\n         i 0\n         p 0\n         c 1]\n    (if (> n i)\n      (recur (conj s c) (inc i) c (+ p c))\n      (seq s))))","user":"5571d6e5e4b09a3098a5253f"},{"problem":26,"code":"(fn fibonacci-sequence [s]\n(loop [sequencer s new-sequence [] increment 1]\n  (if (< increment (+ s 1))\n    (let [[part & remaining] (range (- increment 1) (+ sequencer 1))]\n      (recur sequencer\n             (if (= (count new-sequence) 0)\n               (conj (vec new-sequence) 1)\n               (if (= (count new-sequence) 1)\n                 (conj new-sequence part)\n                 (conj new-sequence (+ (last new-sequence) (nth new-sequence (- part 2))))))\n             (inc increment)))\n    new-sequence)))","user":"5af865a9e4b0cc2b61a3bcd1"},{"code":"(fn fib [n]\n  (->> (rest (fib n))\n       (map + (fib n))\n       (lazy-cat [1 1])\n       (take n)))","problem":26,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn fib [x] (if (< x 2) [1] (if (= x 2) [1 1] (let [y (fib (- x 1))] (conj y (+ (last y) (last (butlast y))))))))","problem":26,"user":"526bd542e4b03e8d9a4a7274"},{"problem":26,"code":"#(reverse(reduce \n (fn [col _ ]\n   (conj col ((fn [c] (+(first c) (second c))) col))) '(1 1) (range (- % 2))))","user":"5beebdb7e4b0a6d31fed2132"},{"problem":26,"code":"(fn fib [n] (loop [x 1 y 0 l [] c 0]\n              (if \n                (= c n) l\n                (recur (+ x y) x (conj l x) (inc c)))))","user":"55ff2f89e4b00f4cabc5765e"},{"problem":26,"code":"(fn [n]\n \t(reduce \n \t\t(fn [acc i]\n\t \t\t(if (< i 2)\n\t \t\t\t(conj acc 1)\n\t \t\t\t(conj acc (reduce + (take-last 2 acc))))\n \t\t) [] (range n)))","user":"57220050e4b0c5bde472c0c1"},{"code":"(fn [m] (map (fn nth-fib [n]\n               (cond (= n 1) 1\n                     (= n 2) 1\n                     :else (+ (nth-fib (- n 2)) (nth-fib (- n 1)))))\n             (range 1 (inc m))))","problem":26,"user":"4f5c68c6e4b0030a34fb2b23"},{"code":"(fn [n]\n  (loop [ x [1]] \n    (if (< (count x) n) \n      (recur (conj x (+ (last x) (get x (- (count x) 2) 0))))\n      x)))","problem":26,"user":"532a111ee4b09d4e7a9b5520"},{"problem":26,"code":"(fn finonacci\n  [x]\n  (loop [lst '(1 1)]\n    (if (= x (count lst))\n      (reverse lst)\n      (recur (cons (reduce + (take 2 lst)) lst)))))","user":"57f8153de4b0d3187e900916"},{"problem":26,"code":"(fn fab [n]\n  (take n\n        (map first (iterate (fn [[a b]] [b (+ a b)])\n                            [1 1]))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [x]\n  (loop [a 1, b 1, result [1]]\n    (if (>= (count result) x)\n      result\n      (recur b (+ a b) (conj result b)))))","problem":26,"user":"51b9f5a6e4b0e871ca49590e"},{"code":"#(loop [sq '(1) cnt (dec %)] (if (= 0 cnt) (reverse sq) (recur (cons (+ (first sq) (or (second sq) 0)) sq) (dec cnt))))","problem":26,"user":"51f13b80e4b06a20a2523f38"},{"code":"(fn f3\n  ([n]\n    (f3 n [1]))\n  ([n s]\n    (if (>= (count s) n)\n      s\n      (if (= (count s) 1)\n        (f3 n [1 1])\n        (f3\n          n\n          (conj s (+ (last s) (nth s (- (count s) 2)))))))))","problem":26,"user":"52387f46e4b0fae3832e9a07"},{"problem":26,"code":"(fn fib\n  ([n] (take n (fib 0 1)))\n  ([a b] (cons b (lazy-seq (fib b (+ a b))))))","user":"5764457ae4b0994c1922fbf3"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map first (iterate\n                    (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"587e80a0e4b052da650a6346"},{"code":"(fn [t]\n  (take t\n    (map first \n      (iterate (fn [[a b]]\n                 [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4ea3826c535d7eef308072c6"},{"code":"(fn [n]\r\n    (loop [n1 1, n2 1, i (- n 2), acc [1 1]]\r\n\t     (if (= 0 i)\r\n\t\t acc\r\n\t\t (recur n2 (+ n1 n2) (dec i) (conj acc (+ n1 n2))))))","problem":26,"user":"4f34eb87e4b0e243712b1eba"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [i]\n          (if( >= 2 i) 1\n          (+  (fib (dec i)) (fib (- i 2 )))))\n          ]\n    (map fib (take n (iterate #(inc %) 1)))\n    )\n  )","user":"5c31517de4b0d62ef62d9f28"},{"code":"(letfn [(fibonacci [n m]\n          (cons n (lazy-seq (fibonacci m (+ n m)))))]\n  #(take % (fibonacci 1 1)))","problem":26,"user":"50996a38e4b0cae2931060b3"},{"problem":26,"code":"(fn fibo\n  [n]\n  (let [helper (fn simple-fibo\n                 [x]\n                 (if (> 3 x)\n                   1\n                   (+ (simple-fibo (dec x))\n                      (simple-fibo (- x 2)))))]\n    (loop [out []\n           i 1]\n      (if (> i n)\n        out\n        (recur (conj out (helper i)) (inc i))))))","user":"5d110abee4b02c15ef021983"},{"problem":26,"code":"#(loop [iter 2\n        res [1 1]\n        flast 1\n        slast 1]\n   (if (= iter %)\n     res\n     (recur (inc iter)\n            (conj res (+ flast slast))\n            slast\n            (+ flast slast))))","user":"5862a8a9e4b0f14aab7c880f"},{"problem":26,"code":"(fn [n]\n  (take n \n        ((fn fib [a b] \n           (cons a \n                 (lazy-seq (fib b \n                                (+ b a)))))\n         1 1)))","user":"54b5ce67e4b05787c3b163ac"},{"problem":26,"code":"(fn\n  [x]\n  (loop [i 2, a 1, b 1, lst [1 1]]\n    (if (= x i)\n      lst\n      (let [c (+ a b)]\n        (recur (+ i 1) b c (conj lst c))))))","user":"5e65bfe4e4b0fd0acd1586b9"},{"code":"(fn [n]\n  (loop [v1 1 v2 1 i (- n 2) fibs [1 1]]\n    (if (= i 0) fibs\n      (let [v3 (+ v1 v2)]\n        (recur v2 v3 (dec i) (conj fibs v3))))))","problem":26,"user":"4db2cd84535df7e46ed9b6c6"},{"code":"(fn fibonacci [n]\n  (let [fib (fn fib [i j] (->> (+ i j) (fib j) (cons i) lazy-seq))]\n    (take n (fib 1 1))))","problem":26,"user":"5131104ae4b09e21d785bdfe"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (lazy-seq (cons a (fib b (+ a b)))))\n      1 1)))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn fib2 [n] \n  (take n (loop [i 1 r [1 1]] \n    (if (>= i n) \n      r \n      (recur (inc i) (conj r (+ (last r) (last (butlast r)))))))))","problem":26,"user":"4ef2eb4d535dced4c769f226"},{"problem":26,"code":"(fn fib [x] (cond \n             (= x 1) '(1)\n             (= x 2) '(1 1)\n             :else (let [yx (fib (dec x))]\n                     (->> yx \n                          reverse \n                          (take 2)\n                          (apply +)\n                          (conj '())\n                          (concat yx)))))","user":"58d2b7b3e4b03c36ff7e5908"},{"problem":26,"code":"(fn [n]\n  (reverse (loop [len n\n         out '(1 1)]\n    (if (= len 2)\n      out\n      (recur (dec len) \n             (cons (+ (second out) (first out)) out))))))","user":"55fb1c77e4b0f488688e065c"},{"problem":26,"code":"(fn [x]\n    (loop [res (list 1 1)]\n      (if (= (count res) x)\n        (reverse res)\n        (recur (cons (reduce + (take 2 res)) res))\n        )))","user":"608ee2f7e4b03bd49d9f36c1"},{"problem":26,"code":"#(loop [f [1 1] n 2]\n        (if (= n %)\n          f\n          (recur (conj f (+ (get f (- n 1)) (get f (- n 2)))) (inc n))))","user":"558f4fbae4b0277789237661"},{"problem":26,"code":"; Neida, det er ikke juks\n#(take % '(1 1 2 3 5 8 13 21))","user":"5253de67e4b0541d1855b939"},{"problem":26,"code":"(fn fib [n] (loop [res [1 1]]\n              (if (= (count res) n) res \n                (recur (conj res (+ (last res) (last (butlast res))))))))","user":"58988cbbe4b00487982d52d7"},{"code":"(fn ! [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(1 1)\n        :else (let [n_1 (! (- n 1))\n                    n_2 (! (- n 2))]\n                (concat n_1 (list (+ (last n_1) (last n_2)))))))","problem":26,"user":"5139656ce4b0a5db03d727e3"},{"problem":26,"code":"(fn [x]\n  (loop [output [1 1]]\n    (if (= (count output) x)\n      (apply list output)\n      (recur (conj output (apply + (take 2 (reverse output))))))))","user":"5b15e881e4b0cc2b61a3be75"},{"code":"(fn aasdf [x] (nth '(0 1 2 (1 1 2) 4 5 (1 1 2 3 5 8) 7 (1 1 2 3 5 8 13 21))x))","problem":26,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn [n] (take n (drop 1 (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4fe9d647e4b0547ebccb2472"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (= 0 n) ()\n    (= 1 n) '(1)\n    (= 2 n) '(1 1)\n    (> n 2) (loop [vec1 [1 1] index 2]\n              (if (< index n)\n                (recur (conj vec1 (+ (nth  vec1 (- index 2)) (nth vec1 (- index 1)))) (inc index) )\n                vec1\n                ))))","user":"5be79b5be4b0f319e2d7ec5a"},{"problem":26,"code":"(fn [limit]\n  (loop [counter 1 previous 0 current 1 limit limit result [1]]\n    (if (= limit counter)\n      result\n      (recur (inc counter) current (+ previous current) limit (conj result (+ previous current))))\n   )\n  )","user":"5ee66158e4b029a2061bbe98"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate\n             (fn [[a b]] [b (+ a b)])\n             [1 1])))","user":"568f0db0e4b0dcc4269f40dd"},{"code":"#(take % (letfn\n    [(fib [a b]\n      (lazy-seq (cons a (fib b (+ a b)))))]\n    (fib 1 1)))","problem":26,"user":"4f3e5e87e4b0e243712b1f83"},{"problem":26,"code":"(fn fib-n\n  ([n] (fib-n n 0 '()))\n  ([n items building-seq]\n    (if (< items n)\n      (let [fibfn (fn fib [n]\n        (if (< n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2)))\n          ))]\n        (conj (fib-n n (inc items) building-seq) (fibfn items)))\n      building-seq)))","user":"59c1c169e4b0a024fb6ae492"},{"problem":26,"code":"(fn [n]\n   (loop [res [1 1]\n          m n]\n     (case m\n       1 (drop-last res)\n       2 res\n       (recur (conj res (+ (last (drop-last res)) (last res))) (dec m)))))","user":"5a8fd113e4b05369db4d2542"},{"problem":26,"code":"#((fn fibonacci [n numbers] (if (> n 0) (fibonacci (dec n) (conj numbers (+ (last numbers) (nth numbers (- (count numbers) 2))))) numbers)) (- % 2) [1 1])","user":"568d4742e4b0dcc4269f40c2"},{"problem":26,"code":"(fn fibs [n]\n  (loop [result ()\n         i 0]\n    (if (< i n)\n      (recur (conj result\n                   (if (<= i 1)\n                     1\n                     (apply + (take 2 result))))\n             (inc i))\n      (reverse result))))","user":"56ba1406e4b0f2655033593c"},{"problem":26,"code":"#(reduce\n (fn [fib number]\n   (conj fib (+ (last fib) (nth fib (- (count fib) 2)))))\n [1 1]\n (take (- % 2) (range)))","user":"53e0001be4b0d874e779ae48"},{"problem":26,"code":"(fn fibonacci\n  ([n]\n   (if (= n 1)\n     [1]\n     (if (= n 2)\n      [1 1]\n      (fibonacci (- n 2) [1 1]))))\n  ([n acc]\n   (if (= n 1)\n     (conj acc (+ (last acc) (last (butlast acc))))\n     (recur (dec n) (conj acc (+ (last acc) (last (butlast acc)))))\n     )))","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn [n]\n  (loop [s [1] p0 0 p1 1 l (dec n)]\n    (if (zero? l) \n      s\n      (recur (conj s (+ p0 p1)) p1 (+ p0 p1) (dec l)))))","problem":26,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"(fn [n]\n  (->\n    (reduce (fn [acc _]\n              (println acc)\n              (cons (+ (first acc) (second acc)) acc))\n            '(1 1)\n            (range 2 n))\n    reverse))","problem":26,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":26,"code":"#(loop [x %\n        y '(1 1)]\n    (cond\n    (= x 0) '()\n    (= x 1) '(1)\n    (= x (count y)) y\n    :else (recur x (into ()(conj (into '() y) (reduce + (nthnext y (- (count y) 2))))))))","user":"566a3a26e4b0a866af689699"},{"problem":26,"code":"(fn [n]\n  (loop [res [1 1]]\n    (if (= n (count res))\n      res\n      (recur (conj res (apply + (take-last 2 res)))))))","user":"55912230e4b027778923767a"},{"problem":26,"code":"(fn [x] (map #((fn a [b] (if (< b 2) 1 (+ (a (- b 1)) (a (- b 2)) ) )) %) (range x)))","user":"54344721e4b0b6b47310fcea"},{"code":"#(take %1 ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","problem":26,"user":"50dcb2f4e4b02e6ac9592c91"},{"problem":26,"code":"(fn fib [a]\n  (let [fb (fn fibx [x]\n             (if (or (= x 1) (= x 2)) 1\n              (+ (fibx (- x 1)) (fibx (- x 2)))\n             ))\n        v (range 1 (+ 1 a))]\n    (map fb v)\n    )\n  )","user":"4fd9cc7ee4b05e33b9224f3a"},{"problem":26,"code":"(fn f\n     ([x]\n      (f x []))\n     ([x li]\n      (if (> x 0)\n        (if (< (count li) 2)\n          (recur (dec x) (conj li 1))\n          (recur (dec x) (conj li (+ (last li) (last (drop-last li))))))\n        li)))","user":"59005094e4b0438e51c2d01e"},{"code":"(fn [n] (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1]) (map first) (take n)))","problem":26,"user":"52491cc8e4b05ef8e38e6417"},{"problem":26,"code":"#(reverse (into '() (reduce (fn [x _] (let [a (last (butlast x)) b (last x)] (if (nil? a) 1 (conj x (+ a b))))) [1 1] (repeat (- % 2) 1))))","user":"57733764e4b0979f896515e0"},{"problem":26,"code":"( fn [x] (reverse (last (take (- x 1) (iterate #(conj % (+ (first %) (second %))) (list 1 1))))))","user":"548ef1dee4b0e286459a1229"},{"code":"(fn fib ([x] (fib x 1 0))\n        ([x a b] \n          (if (zero? x) \n                '() \n                (cons (+ a b) (fib (dec x) b (+ a b))))))","problem":26,"user":"4f88942be4b033992c121c6a"},{"problem":26,"code":"(fn fibonacci\n  [number]\n  (loop [result '(1 1)\n         number (- number 2)]\n    (if (zero? number)\n      (reverse result)\n      (recur (conj result (+ (first result) (second result))) (- number 1)))))","user":"54411506e4b032a45b869369"},{"problem":26,"code":"#(take % ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1))","user":"5977bb05e4b01722bebd4cf9"},{"problem":26,"code":"(fn nth-fib\n[n]\n(loop [iteration n\n       first-num 0\n       second-num 1\n       final-seq '[1]]\n(if (> iteration 1)\n  (recur (dec iteration) \n         second-num \n         (+ first-num second-num)\n         (conj final-seq (+ first-num second-num)))\n  final-seq\n)\n)\n)","user":"5c1d9f05e4b0efcb0b05b24c"},{"code":"(fn [n] \r\n  (cond\r\n    (= n 1) [1]\r\n    (= n 2) [1 1]\r\n    true (loop [s [1 1] i2 1 i1 1 max-n (- n 2)]\r\n           (if (zero? max-n)\r\n             s\r\n             (recur (conj s (+ i2 i1)) i1 (+ i2 i1) (dec max-n))))))","problem":26,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":26,"code":"(fn foo [x] (if (= 1 x) '(1) (if (= 2 x) [1 1] (conj (vec (foo (dec x))) (+ (last (foo (dec x))) (last (foo (- x 2))))))))","user":"54078851e4b0addc1aec66bd"},{"problem":26,"code":"#(loop [n % \n        xs []]\n\t(if (zero? n)\n      xs\n      (recur (dec n) \n             (conj xs \n                   (apply + (take-last 2 (concat [1 0] xs)))\n                          ))))","user":"558ea13be4b0277789237654"},{"code":"(fn f [a b n] (if (> n 0) (cons a (f b (+ a b) (- n 1))))) 1 1","problem":26,"user":"4db858d1535d1e037afb218c"},{"problem":26,"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1) )","user":"549831b0e4b0b312c081ff7d"},{"code":"#(nth\n  (iterate (fn [s] (conj s (apply + (take-last 2 s)))) [1])\n  (dec %))","problem":26,"user":"4db85282535d1e037afb218a"},{"code":"(fn fib \n  ([n] (take n (fib 1 1)))\n  ([a b] (cons a (lazy-seq (fib b (+ a b)))))\n)","problem":26,"user":"514282c8e4b0b50abeb46b38"},{"problem":26,"code":"(fn fi\n  ([n]\n     (fi [1 1] n))\n  ([x, n]\n     (if (< (count x) n) \n       (recur (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       x)))","user":"589714cbe4b00487982d52b1"},{"code":"(fn [y]\n    (\n      (fn [x acc] (if (= x 1) acc (recur (dec x) (conj acc (+ (last acc) (last (butlast acc)))))))\n      (dec y) [1 1]\n      )\n    )","problem":26,"user":"528f82d8e4b0239c8a67aef4"},{"code":"#(take %1\n    ((fn fib [a b]\n       (cons a (lazy-seq (fib b (+ a b)))))\n     1 1))","problem":26,"user":"4f29afc7e4b0d6649770a02e"},{"problem":26,"code":"#(map  (fn fib [x] (if (< x 3) 1 (+ (fib (- x 2)) (fib (- x 1) )) ))  (range 1 (+ 1 %)))","user":"54d22860e4b0e8a36923e5ef"},{"code":"#(take % (apply concat (iterate (fn fib [x] (let [fib1 (+ (first x) (second x))] [fib1 (+ (second x) fib1)] ) )  '(1 1) ) ) )","problem":26,"user":"52bf6946e4b07a9af5792334"},{"problem":26,"code":"(fn fibs [x]\n  (loop [xs [1 1] i (- x 2)]\n    (if (> i 0)\n      (recur\n        (conj xs (reduce + (take-last 2 xs)))\n        (dec i))\n      xs)))","user":"557bcce4e4b05c286339e0b9"},{"code":"(fn [n]\r\n    (take n\r\n          (cons 1\r\n                ((fn fib [a b]\r\n                   (lazy-seq\r\n                    (let [c (+ a b)]\r\n                      (cons c (fib b c)))))\r\n                 0 1))))","problem":26,"user":"4f047177535dcb61093f6bc6"},{"problem":26,"code":"(fn fibseq [x] (map (fn fib [n] (cond (= n 0) 1 (= n 1) 1 :else (+ (fib (- n 1)) (fib (- n 2))))) (range x)))","user":"53c15f08e4b00fb29b221261"},{"problem":26,"code":"#(let [prelast (comp last drop-last)\n       nf      (fn [a] (+ (last a) (prelast a)))]\n   (loop [n    (- % 2)\n          fibs [1 1]]\n     (if (>= 0 n)\n       fibs\n       (recur (dec n)\n              (conj fibs (nf fibs))))))","user":"5999fe10e4b07157cc8dab02"},{"code":"(fn [n]\n    (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"52cf2b96e4b07d0d72b273a0"},{"code":"(fn [n]\n  (loop [fib []\n         x 0\n         y 1\n         n n]\n    (if (zero? n)\n      fib\n      (recur\n        (conj fib y)\n        y\n        (+ x y)\n        (dec n)))))","problem":26,"user":"4e4ad154535dc968683fc4d1"},{"problem":26,"code":"#(take % (map (fn [[a b]] b) (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"5884f77ee4b0f1effa3b76a9"},{"problem":26,"code":"(fn [n]\n  (loop [i 1 acc [1]]\n    (if (= i n) acc (recur (inc i) (conj acc (reduce + (take-last 2 acc)))))))","user":"5a932f63e4b0d174b936c71b"},{"problem":26,"code":"(fn fib\n  [n]\n  (->> [0 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map second)\n       (take n)))","user":"5d609ddde4b0c9e5857d5008"},{"code":"#(take % [1 1 2 3 5 8 13 21])","problem":26,"user":"4dce6e41535d5973398f92a2"},{"problem":26,"code":"(fn f\n  ([n] (f n [] [1 0]))\n  ([n result prevs]\n   (if (zero? n)\n     result\n     (recur (dec n) (conj result (first prevs))\n            [(+ (first prevs) (second prevs)) (first prevs)]))))","user":"58b06b7ce4b0ebc645576cdc"},{"code":"(fn [n]\n  (->> (iterate (fn [xs] \n                 (conj xs (apply + (take-last 2 xs)))) \n               [1])\n       (take n)\n       last\n       list*))","problem":26,"user":"518b54c6e4b05711021000b1"},{"problem":26,"code":"#(map (fn fib\n    [x] \n    (if (<= x 1) \n        1 \n        (+ (fib (dec (dec x))) (fib (dec x))))) (range %))","user":"55ad1221e4b03311e7b7329d"},{"code":"(fn fibo [n] \n  (loop [a 1 b 1 times 2 nums (list 1 1)]\n    (if (>= times n)\n      nums\n      (recur b (+ a b) (inc times) (concat nums (list (+ a b)))))))","problem":26,"user":"4e0d5a5a535d04ed9115e7b5"},{"code":"(fn my-fib\n  ([n] (take n (cons 1 (cons 1 (my-fib 1 1)))))\n  ([a b] (lazy-seq (cons (+ a b) (my-fib b (+ a b)))))\n  )","problem":26,"user":"52bc6f5ee4b07a9af57922f6"},{"problem":26,"code":"#(loop [x % coll [1 1]]\n   (cond\n    (< x 2) (take-last x coll)\n    (= x 2) coll\n    :else (recur (dec x) (conj coll (reduce + (take-last 2 coll))))))","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn [lim]\r\n  (loop [fibs [1 1]]\r\n    (if (= lim (count fibs))\r\n      fibs\r\n      (recur (conj fibs (+ (last (butlast fibs)) (last fibs)))))))","problem":26,"user":"502d4ea0e4b02fc10c6c6e46"},{"code":"(fn [n] (take n (map first (iterate #(vector (second %) (reduce + %)) [1 1]))))","problem":26,"user":"4eb44d78535d7eef30807360"},{"problem":26,"code":"(fn fib [length]\n  (->> (range (- length 2))\n       (reduce (fn [acc i] (cons (+ (first acc) (second acc)) acc)) '(1 1))\n       (reverse)))","user":"516064e5e4b009fba0926e26"},{"code":"(fn [x] (loop [result [1 1]] (if (<= x (count result)) (take x (reverse result)) (recur (cons (+ (second result) (first result)) result)))))","problem":26,"user":"4ddabc33535d02782fcbe9f5"},{"code":"(fn [x]\n  (loop [lst [1 1] acc (- x 2)]\n    (if (zero? acc)\n      lst\n      (recur (conj lst (+ (last lst) (last (drop-last lst)))) (dec acc)))))","problem":26,"user":"512934dde4b03a34742b4315"},{"problem":26,"code":"(fn [n]  ((fn fib [fibs prev prevprev nmore]    (if (> nmore 0)      (let [current (+ prev prevprev)]        (fib (conj fibs current) current prev (dec nmore)))      fibs))   [1] 1 0 (dec n))  )","user":"542a8d07e4b01498b1a71b43"},{"problem":26,"code":"(fn fib\n   ([] (fib 1 1))\n   ([n] (take n (fib)))\n   ([a b]\n    (lazy-seq (cons a (fib b (+ a b))))))","user":"5bbbce60e4b0a20761a2360e"},{"problem":26,"code":"(fn my-fib [n]\n  ( if (= n 1) '(1)\n               (loop [ i 2 col '(1 1)]\n                 (if (= n i) (reverse col)\n                             (recur  (inc i) (cons (+ (first col ) (second col) ) col))))))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":26,"code":"(fn [x]\n  (map first (take x (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"53ae0c50e4b047364c044471"},{"problem":26,"code":"(fn [x]\n  (loop [i '(1 1)]\n    (if (= x (count i))\n      (reverse i)\n      (recur\n        (conj i (apply + (take 2 i)))))))","user":"57a774e4e4b0a96607956213"},{"problem":26,"code":"(fn [nmax]\n  (loop [n 2 s (list 1 1)]\n    (if (= n nmax)\n     (reverse s)\n    (recur (inc n) (conj s (+ (first s) (second s)))))))","user":"550e8e04e4b06e50f9beb167"},{"code":"(fn [n]\n  (take n\n    ((fn fib-recur [a b]\n      (cons a\n            (lazy-seq (fib-recur b (+ a b))))) 1 1)))","problem":26,"user":"4daee8e9edd6309eace4d166"},{"problem":26,"code":"(fn [until]\n  (take until (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"#(loop [fib [1 1]\n        n %]\n   (if (<= n 2)\n     fib\n     (recur (conj fib (+ (last fib) (last (drop-last fib)))) (dec n))\n     )\n  )","problem":26,"user":"4db03885838c48654951d9bd"},{"problem":26,"code":"(fn [howmany]\n  (loop [n howmany a [1]]\n    (if (= 1 n)\n      a\n      (recur (dec n) \n             (conj a (reduce + (take-last 2 a)))\n             )\n      )\n    )\n  )","user":"540b4c4de4b0addc1aec66f6"},{"problem":26,"code":"(fn [no]\n  (take no '(1 1 2 3 5 8 13 21 34)))","user":"56e71333e4b02e7e935eb6d2"},{"problem":26,"code":"(fn [x] (if (= x 3) '(1 1 2) (loop [r [1 1 2]\n                                    x (- x 3)]\n                               (if (= x 0) r (let [len (count r)] (recur (conj r (+ (nth r (- len 1)) (nth r (- len 2)))) (dec x)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":26,"code":"(fn [x]\n  (map last (vec (take x (iterate (fn [[x y]] [y (+ x y)]) [0 1])))))","user":"541735b3e4b01498b1a71a07"},{"code":"(fn fibonacci [x] \n  ((fn fib [n first second] \n    (if (= n 0) \n      '()\n      (if (= n 1)\n        (list second)\n        (cons\n          second\n          (fib (- n 1) second (+ second first))))))\n  x 0 1))","problem":26,"user":"4f0a2ed1535d0136e6c222f3"},{"problem":26,"code":"(fn[nterms](reduce(fn[accum,x](if (< (count accum) 2) (conj accum 1)(conj accum (+ (get accum (- (count accum) 2)) (get accum (- (count accum) 1)) ) ))) [] (range  nterms)))","user":"57e3d30be4b0bfb2137f5aab"},{"problem":26,"code":"(fn fib\n  [n]\n  (->> (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n       (take n)\n       (map first)))","user":"55a0a278e4b0acc240e314ff"},{"problem":26,"code":"(fn fib\n  ([n] (take n (fib 1 1)))\n  ([a b] (lazy-seq (cons a (fib b (+ a b))))))","user":"578ce779e4b0ebec4cfb7561"},{"code":"(fn fibonacci [n]\n  (loop [i 1 p2 0 p1 1 ret [1]]\n    (if (= i n)\n      ret\n      (recur (inc i) (identity p1) (+ p2 p1) (conj ret (+ p2 p1))))))","problem":26,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":26,"code":"(fn [n]\n  (let [colls (range n)]\n    (reduce (fn [res i]\n              (if (or (= i 0) (= i 1))\n                (conj res 1)\n                (do\n                  (conj res (+ (nth res (- i 1))\n                               (nth res (- i 2))))))) [] colls)))","user":"551e6526e4b030e6a24d00e8"},{"problem":26,"code":"(fn [n] \n  (take n\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5e18bd30e4b0dc95940084fa"},{"problem":26,"code":"#(take % ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5e66f501e4b0e171e1033686"},{"problem":26,"code":"(fn fib [n]\n(case n\n1 [1]\n2 [1 1]\n(let [p (fib (dec n))]\n(conj p (reduce + (take-last 2 p))))))","user":"57e20474e4b0bfb2137f5a82"},{"code":"(fn [n]\r\n  (loop [i 1 llast 0 last 1 fibs [1]]\r\n    (let [f (+ llast last)] \r\n      (if (= i n)\r\n        fibs\r\n        (recur (inc i) last f (conj fibs f))))))","problem":26,"user":"4e131443535d04ed9115e7d3"},{"problem":26,"code":"#(letfn [(fib [x y n]\n              (cons y (lazy-seq\n                       (if (> n 1)\n                         (fib y (+ x y) (dec n))))))]\n   (fib 0 1 %))","user":"5658c357e4b00d3155796111"},{"problem":26,"code":"#(loop [count % f1 1 f2 1 result []] (if (= count 0) result (recur (- count 1) f2 (+ f1 f2) (conj result f1))))","user":"60622c6ee4b03746e80ebf72"},{"problem":26,"code":"#(loop [[x y c] [1 1 2] r [1 1] ] \n          (if (= c %)\n            r\n            (recur [y (+ x y) (inc c)] (conj r (+ x y)))\n))","user":"54a677a9e4b09f271ff37c88"},{"problem":26,"code":"#(cond\n  (= % 0) '()\n  (= % 1) '(1)\n  :else (loop [number %\n               current 2\n               result '(1 1)]\n          (if (> (inc current) number)\n            result\n            (recur number (inc current) (seq (conj (vec result) \n                                                   (+ (last result) (first (rest (reverse result))))\n                                                   ))) )))","user":"57acbe5fe4b0b8559636fc8e"},{"code":"(fn fib-seq [n]\n  (take n\n    ((fn rfib [a b]\n       (lazy-seq (cons a (rfib b (+ a b)))))\n      1 1)\n  )\n)","problem":26,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"#(take %\n  (map first \n    (iterate \n      (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"5232d047e4b035af41902a95"},{"problem":26,"code":"#(loop [result [1 1]\n        first 1\n        second 1]\n   (if (< (count result) %)\n     (recur (conj result (+ first second)) second (+ first second))\n     (apply list result)))","user":"54aec099e4b09f271ff37cf5"},{"code":"(fn fib \n  [x]\n  (take x((fn rfib \n            [a b]\n            (lazy-seq (cons a (rfib b (+ a b)))))\n          1 1)))","problem":26,"user":"529223cbe4b0239c8a67af26"},{"problem":26,"code":"(fn [n] ((fn f [x y l n] (if (= n 2) (reverse l) (let [v (+ x y)] (f y v (conj l v) (- n 1) )) )) 1 1 '(1 1) n))","user":"5815b957e4b0f478707a0641"},{"code":"(fn [n]\n  (take n\n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ec5aa1f535d6d7199dd36b0"},{"code":"(fn [x]\n  (loop [a 1 b 1 col nil n x]\n    (if (= n 0)\n      (reverse col)\n      (recur b (+ a b) (conj col a) (dec n)))))","problem":26,"user":"51bdebece4b0ff155d51d2b7"},{"problem":26,"code":"#(loop [i 2 r [1 1]] (if (>= i %) (seq r) (recur (inc i) (conj r (+ (last r) (last (butlast r)))))))","user":"551e2cade4b030e6a24d00e4"},{"problem":26,"code":"(fn\n  ([n]\n   (cond (= n 0) '()\n         (= n 1) '(0)\n         :else (loop [[n-2 n-1] [1 1]\n                      result [1 1]\n                      index (- n 2)]\n                 (if (= 0 index)\n                   result\n                   (let [new-elem (+ n-2 n-1)]\n                     (recur [n-1 new-elem]\n                            (conj result new-elem)\n                            (dec index))))))))","user":"5dd65ea4e4b0948ae9d9ad7f"},{"problem":26,"code":"(fn fib\n   ([n] (fib n [1 1]))\n   ([n c]\n    (if (= (count c) n)\n      c\n      (fib n (conj c (+ (last (drop-last c)) (last c)))))))","user":"59da2569e4b0ef0a1e9b5c62"},{"problem":26,"code":"(fn [x] \n  (map first (take x (iterate (fn [[a b]] [b (+ a b)])[1 1]))))","user":"5852801ee4b0b7285a6f4eb1"},{"code":"(fn [x] (letfn [(fib [p n] (lazy-seq (cons (+ p n) (fib n (+ p n)))))](take x (cons 1 (fib 0 1)))))","problem":26,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn [n]\n  (take n\n    (map\n      first\n      (iterate\n        (fn [[a b]] [b (+ a b)])\n        [1 1]))))","problem":26,"user":"4ea67906535d7eef308072e4"},{"code":"(fn fib [n] (cond (= n 2) [1 1]\r\n                  :else (let [n1 (fib (- n 1))]\r\n                          (conj n1 (+ (first (reverse n1)) (second (reverse n1)))))))","problem":26,"user":"4ff9624ce4b0678c553fc3a8"},{"problem":26,"code":"#(loop [x 1 y 1 z '()]\n   (cond (= (count z) %) (reverse z)\n         :else (recur y (+ x y) (conj z x))))","user":"572ee822e4b0cd1946bd0f91"},{"problem":26,"code":"(fn f ([n] (f n 0 1 [])) ([n a b s] (if (>= (count s) n) s (recur n b (+ a b) (conj s b)))))","user":"561223e5e4b05f002753df8b"},{"problem":26,"code":"(fn fib \n  ([n] (fib n 1 1 [1 1]))\n  ([n n-1 n-2 nums]\n   (cond\n    (= n 0) []\n    (= n 1) [1]\n    (= n 2) nums\n    :else\n       (fib (- n 1) (+ n-1 n-2) n-1  (conj nums (+ n-1 n-2))))))","user":"5aa5951ae4b0d174b936c899"},{"problem":26,"code":"#(take % ((fn fibo [a b] (lazy-seq (cons a (fibo b (+ a b))))) 1 1))","user":"565dcec9e4b068f2fe63dc29"},{"problem":26,"code":"#(take % ((fn fiby [x y] (lazy-seq (cons x (fiby y (+ x y))))) 1 1))","user":"5884e807e4b0f1effa3b76a6"},{"problem":26,"code":"(fn fib [n]\n  (map (fn fb [n]\n    (if (<= n 2)\n          1\n          (+ (fb (- n 1)) (fb (- n 2)))\n                    )\n        )\n       (range 1 (+ n 1)))\n  )","user":"580f9585e4b0f478707a05b5"},{"problem":26,"code":"#(loop [coll '(1 1) cnt (dec (dec %))]\n   (if (= cnt 0)\n     (reverse coll)\n     (recur (conj coll (+ (first coll) (second coll)))\n            (dec cnt))))","user":"5c813b27e4b0c8042a70ce22"},{"problem":26,"code":"(fn fib [x]\n\n            (let [r (atom [])]\n              (loop [i 1]\n                (when (<= i x)\n                  ;(println \"i\" i \"conj\" )\n                  (cond\n                    (<= i 2) (swap! r conj 1)\n                    (> i 2) (swap! r conj (+ (nth @r (- i 2)) (nth @r (- i 3)) ))\n                    :else \"meh\"\n                    )\n                  (recur (inc i))\n                  )\n                )\n              @r)\n            )","user":"5d974b1de4b0d3f9b434ad36"},{"problem":26,"code":"#(map (fn fib [n]\n        (cond\n          (= n 1) 1\n          (= n 2) 1\n          :else (+ (fib (dec (dec n))) (fib (dec n)))))\n      (range 1 (inc %)))","user":"54bd9a60e4b0ed20f4ff6ee3"},{"problem":26,"code":"(fn [n] (loop [pv 0 \n               v 1 \n               iter 0 \n               coll []]\n          (if (= iter n)\n          coll\n          (recur v (+ pv v) (inc iter) (conj coll v)))))","user":"5966a214e4b069c0a1a197ab"},{"problem":26,"code":"#(map (fn fibonacci [n]\n       (if (< n 2)\n         1\n         (+ (fibonacci (- n 1)) (fibonacci (- n 2))))\n       ) (range 0 %))","user":"5955158be4b066ee0a44af1e"},{"code":"(fn [n] (take n (map first (iterate (fn [pair] (-> pair (#(conj % (apply + %))) butlast)) '(1 0)))))","problem":26,"user":"50fe91c1e4b03cd852b4e84e"},{"code":"#(letfn [(fib-n [x]\n          (cond \n           (= x 0) 0\n           (= x 1) 1\n           :else (+ (fib-n (- x 1)) \n                    (fib-n (- x 2)))))\n        (list-of-fibs [size]\n          (if (= size 0)\n            ()\n            (conj (list-of-fibs (- size 1)) (fib-n size))))]\n  (reverse (list-of-fibs %)))","problem":26,"user":"51177fbce4b0e0897831a60b"},{"code":"(fn [n] (last (take (dec n) (iterate #(conj % (apply + (take-last 2 %))) [1 1]))))","problem":26,"user":"4e6b6294535d8ccf87e9ff11"},{"problem":26,"code":"#(loop [p1 0\n        p2 1\n        final [1]]\n   (if (= (count final) %)\n     final\n     (let [new (+ p1 p2)]\n       (recur p2 new (conj final new)))))","user":"5cae5247e4b026601754b884"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 3) '(1 1 2)\n    (= n 6) '(1 1 2 3 5 8)\n    :else '(1 1 2 3 5 8 13 21)\n   )\n  )","user":"59c22fbae4b0a024fb6ae4a3"},{"problem":26,"code":"(fn [i]\n   (loop [result [1 1] index i]\n          (if (= 2 index) result\n            (recur \n             (conj result \n                         (+ (last result) \n                            (second (reverse result)))\n                   )\n                         (dec index))\n                   )\n            )\n     )","user":"600e7113e4b074f607df66a3"},{"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n      (conj\n        (fib (- n 1))\n        (+ (last (fib (- n 2))) (last (fib (- n 1))))\n        )))\n)","problem":26,"user":"4ff10dd2e4b0678c553fc32a"},{"problem":26,"code":"(fn [n]\n  (loop [t1 0, t2 1, coll [], n n]\n    (if (zero? n) coll\n      (recur t2 (+ t1 t2) (conj coll t2) (dec n)))))","user":"5550c6e0e4b00713264bd9af"},{"problem":26,"code":"(fn [num]\n     (cond\n       (= num 1) [1]\n       (= num 2) [1 1]\n       :else (loop [int 3 out '(1 1)]\n                   (if (> int num)\n                     out\n                     (recur (+ int 1) ((fn [x] (let [y (reverse x)]\n                                                    (reverse (conj y (+ (first y) (first (next y)))))\n                                                    )) out))))))","user":"5c81c933e4b0c8042a70ce2d"},{"problem":26,"code":"#(take % ((fn f [x y]\n            (cons x (lazy-seq (f y (+ x y))))) 1 1))","user":"5416b4a2e4b01498b1a71a01"},{"problem":26,"code":"(fn [n]\n  ((fn fib [n curr acc]\n     (let [val (if (< curr 2)\n                 1\n                 (+ (nth acc\n                       (- (count acc) 2))\n                    (nth acc\n                         (- (count acc) 1)\n                         )\n                      ))]\n       (if (< curr n)\n         (recur n (inc curr) (conj acc val))\n         acc)\n       )\n     ) n 0 [])\n  )","user":"59a5b3f4e4b066c664927d69"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 1\n    2 [1 1]\n    (let [s (fib (dec n))\n          c (count s)]\n       (conj s (+ (last s) (nth s (- c 2)))))))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn x [n]\n  (if (= n 3) '(1 1 2)\n    (if(= n 6) '(1 1 2 3 5 8) '(1 1 2 3 5 8 13 21))))","problem":26,"user":"4e6a33fc535d8ccf87e9feac"},{"problem":26,"code":"#(reverse (loop [lis '(1 1)] (if (>= (count lis) %) \n                                     (take % lis)\n                                     (recur (conj lis (+ (first lis) (second lis)))))))","user":"54d2c4c5e4b0e8a36923e5fa"},{"code":"(fn [n] (map first (take n (iterate #(vector (second %) (+ (first %) (second %))) [1 1]))))","problem":26,"user":"4f0c4518535d0136e6c2230b"},{"code":"(fn [n] (reverse\n  (loop [i (- n 2) c '(1 1)]\n  (if (> i 0)\n      (recur (- i 1) (conj c (+ (first c) (second c))))    \n      c))))","problem":26,"user":"502a3ffbe4b01f0b5e5efaa5"},{"problem":26,"code":"(fn fib-n [n] \n  (loop [seq [1 1] \n         i 2]\n    (if (< i n)\n      (recur (conj seq (+ (nth seq (- i 2)) (nth seq (- i 1)))) (inc i))\n      seq)))","user":"5c195cb2e4b01240ff5671f7"},{"problem":26,"code":"#(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1 ))","user":"55913b57e4b0604b3f94d575"},{"code":"(fn [y] (map (fn [x] (loop [idx 0 n1 0 n2 1] (if (< (- x 2) idx) n2 (recur (inc idx) n2 (+ n1 n2))))) (range 1 (inc y))))","problem":26,"user":"527c4071e4b0757a1b17135a"},{"problem":26,"code":"(fn [x]\n  (loop [res [1], count 1, prev 0, curr 1]\n    (if (= count x)\n      res\n      (recur (conj res (+ prev curr)) (inc count) curr (+ prev curr)))))","user":"60cb3836e4b0e0fa5f1b4315"},{"problem":26,"code":"(fn fib-seq [n]\n  (if (< n 3) (repeat n 1)\n    (reverse (loop [s '(1 1)\n                    rem (- n 2)]\n               (if (zero? rem) s\n                 (recur (conj s (+ (first s) (second s))) (dec rem)))))))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn [x] \n   (loop [x x y [1 1]]\n     (if (< x 3)\n     y\n     (recur (dec x) (conj y (reduce + (take 2 (reverse y)))))\n                 )))","problem":26,"user":"5244380fe4b076204b44fb12"},{"code":"(fn fiblst [len] (map (fn [k] ((fn fib [i] (if (or (= i 0) (= i 1)) 1 (+ (fib (- i 1)) (fib (- i 2))))) k)) (range len)))","problem":26,"user":"511937eee4b055cfb310d495"},{"code":"(fn [n] (loop [a 1 b 1 n n retr []]\n          (if (= n 0) retr\n            (recur b (+ a b) (dec n) (conj retr a)))))","problem":26,"user":"532347dde4b09d4e7a9b54cc"},{"problem":26,"code":"(fn fibonacci\n  [n]\n  (take n (map first (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]) [1 1]))))","user":"60460824e4b02d28681c77bc"},{"problem":26,"code":"(fn [nums]\n  (reduce (fn [result [_ number]] (conj result number))\n          []\n   \t\t  (take nums (iterate (fn [[a b]] (conj [] b (+ a b)))\n                              [0 1]))))","user":"59d9186be4b0ef0a1e9b5c50"},{"problem":26,"code":"(fn fib\n    ([x] (fib '(1 1) x))\n    ([cc x] \n     (if (> x 2) \n       (recur (conj cc  (+ (first cc) (second cc))) (dec x))\n       (reverse cc))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"code":"#(reverse ((fn fib [n s] \r\n ( if (= n 0) s \r\n (fib \r\n  (- n 1) \r\n  (cons (+ \r\n    (first s)\r\n    (second s)\r\n   ) \r\n   s\r\n  )\r\n ))\r\n) (- % 2) '(1 1)))","problem":26,"user":"50807940e4b01a93d3f38e44"},{"code":"(fn [i] (nth (iterate #(conj % (reduce + (take-last 2 %))) [1]) (- i 1)))","problem":26,"user":"51b3a2c8e4b0f094dd986fa6"},{"problem":26,"code":"#(take % ((fn f [a b] (cons a (lazy-seq (f b (+ b a))))) 1 1))","user":"559279b7e4b0604b3f94d58c"},{"code":"(fn [n] (map (fn rec [y] \n               (if (< y 2)\n                 y\n                 (+ (rec (- y 2)) (rec (- y 1)))))\n        (range 1 (+ n 1))))","problem":26,"user":"5051e2abe4b0a561d07d8f0a"},{"problem":26,"code":"(fn [n]\n  (take n (reverse (reduce (fn [x _] (conj x (+ (first x) (second x)))) '(1 1) (range (- n 2))))))","user":"55f335f4e4b06e875b46ce57"},{"code":"(fn [n]\r\n  (->> [0 1]\r\n    (iterate (fn [[a b]] [b (+ a b)]))\r\n    (map second)\r\n    (take n)))","problem":26,"user":"5041b3c0e4b06d8231e4facf"},{"problem":26,"code":"(fn fib\n  [n]\n  (let [\n        sq (fn fib\n             ([] (fib 1 1))\n             ([a b] (lazy-seq (cons a (fib b (+ a b))))))\n        ]\n    (take n (sq))))","user":"588e4e05e4b00487982d5188"},{"code":"(fn [n]\n  (reverse\n    (loop [n n\n         acc '(1) \n         p1 1\n         p2 0]\n    (if (= n 1) acc\n      (let [v (+ p1 p2)]\n        (recur (dec n) \n               (cons v acc)\n               v p1))))))","problem":26,"user":"500cc693e4b05f7c30cfa69a"},{"code":"(fn [count]\n\t(loop [rounds 2\n\t\t   nums [1 1]]\n\t\t(if (< rounds count)\n\t\t\t(recur (inc rounds) \n\t\t\t\t   (let [y (dec rounds)\n\t\t\t\t         x (dec y)]\n\t\t\t\t        (conj nums (+ (nth nums x) (nth nums y)))))\n\t\t\tnums)))","problem":26,"user":"51205867e4b0e88f5a20c40f"},{"code":"(partial (fn [v n]\n          (if (< n 3)\n            v\n            (recur (conj v (apply + (take-last 2 v))) (dec n)))) \n         [1 1])","problem":26,"user":"5370d152e4b0fc7073fd6e9d"},{"problem":26,"code":"(fn [n] (take n ((fn f [a b] (lazy-seq (cons a (f b (+ a b))))) 1 1)))","user":"572c1f65e4b0cd1946bd0f4a"},{"problem":26,"code":"(fn [n]\n  (loop [fib-seq [1 1]]\n    (if (= n (count fib-seq))\n      fib-seq\n      (recur (conj fib-seq (+ (nth fib-seq (- (count fib-seq) 1)) (nth fib-seq (- (count fib-seq) 2))))))))","user":"5f5a57dee4b0a0bc16850aa5"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         prev 0\n         res [1]]\n    (if (= n 0)\n      (pop res)\n      (let [next (+ prev (or (last (pop res)) 1))]\n        (recur (dec n) next (conj res next))))))","user":"5335c083e4b0e30313ee6c6e"},{"problem":26,"code":"#(take %\n   (map first\n     (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"559c13c5e4b066d22e731f61"},{"problem":26,"code":"(fn [n]\n  (reverse (reduce (fn [col _]\n            (if (<= (count col) 1)\n               (conj col 1)\n               (conj col (reduce + (take 2 col)))))\n          '() (range 1 (inc n)))))","user":"56d30497e4b0ea9b8538f7a8"},{"problem":26,"code":"(fn fib [num]\n  (condp = num\n        0 '()\n        1 '(1)\n        (loop [cnt (- num 2) acc [1 1]]\n          (if (= cnt 0) acc\n      \t\t(recur (dec cnt) (conj acc (apply + (take 2 (reverse acc)))))))\n  )\n)","user":"51388e86e4b0a5db03d727d7"},{"code":"#(loop [a [1 1]] (if (>= (count a) %) a (recur (concat a [(apply + (take-last 2 a))]))))","problem":26,"user":"5315b53ee4b08068f379ed31"},{"problem":26,"code":"#(reverse (loop [s '(1 1)] (if (= % (count s)) s (recur (conj s (+ (first s) (second s)))))))","user":"53ced9fee4b00fb29b2212f8"},{"problem":26,"code":"(fn fib\n  [lim] \n  (case lim \n    1 '(1)     \n    2 '(1 1)\n    (let \n    \t[f (reverse (fib (dec lim)))]\n        (reverse (conj f (+ (first f) (first (rest f)))))\n    )\n  )\n)","user":"54bb0f63e4b0ed20f4ff6ebc"},{"problem":26,"code":"(fn [n] \n (reduce (fn [a x] (conj a (if (< x 2) 1 (apply + (take-last 2 a))))) [] (range n)))","user":"5493d908e4b0b312c081ff52"},{"problem":26,"code":"(fn [x] (map #(first %) (take x (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"5926c254e4b072a2710fceb8"},{"problem":26,"code":"#(nth (take % (iterate (fn [n] (conj n (apply + (take-last 2 n)))) [1 1])) (- % 2))","user":"5c06fab7e4b0bdcf453d16bd"},{"problem":26,"code":"#(reduce\n  (fn [a b] (concat a (list (+ (last (butlast a)) (last a))))) \n '(1 1) (range (- % 2)))","user":"5797d3d2e4b039eba2ecb106"},{"code":"#(reduce \n     (fn [fibs x]\n       (let [l (count fibs)\n             a (nth fibs (- l 1))\n             b (nth fibs (- l 2))]\n         (conj fibs (+ a b))\n       ))\n     [1 1]\n     (range (- % 2))\n   )","problem":26,"user":"52011018e4b0d7096e99ddaf"},{"problem":26,"code":"(fn f [n] (cond (= n 1) '(1) (= n 2) '(1 1) true (let [x (f (- n 1))] (concat x (list (+ (first (reverse x)) (second (reverse x))))))))","user":"5ae7ed7ce4b0837691e92cb0"},{"problem":26,"code":"(fn [n]\n  (loop [n n x 1 fibs [1]]\n    (if (zero? n) (butlast fibs)\n        (recur (dec n)\n               (+ x (last fibs))\n               (conj fibs x)))))","user":"5db0d470e4b0f8c104ccfc9e"},{"problem":26,"code":"#(take % (map last (iterate (fn [[a b]] (conj [b] (+ a b))) [0 1])))","user":"52e16face4b09f7907dd1421"},{"code":"(fn fib [n]\r\n  (loop [c n col-fib '(1) second-last 0 last 1]\r\n    (if (= c 1)\r\n\t    col-fib\r\n\t    (recur (dec c) (concat col-fib (list (+ second-last last))) last (+ second-last last))\r\n\t  )\r\n  )\r\n)","problem":26,"user":"50845d3ee4b0fb8f40674bf3"},{"code":"(fn gen-fibo [n] \n  (if (= n 1) \n    (list 1)\n    (if (= n 2)\n        (list 1 1)\n        (reverse\n         (cons\n          (+ \n            (last (gen-fibo (- n 1)))\n            (nth (gen-fibo (- n 1)) (- n 3))\n          )\n          (reverse (gen-fibo (- n 1)))\n         )\n        )\n    )\n  )\n)","problem":26,"user":"4e3df106535deb9a81d77f58"},{"code":"(fn [x]\n\t(take x\n    \t(map first \n             (iterate (fn [[y z]] [z (+ y z)])\n             [1 1])\n        )\n    )\n)","problem":26,"user":"5113e492e4b0029845b11c58"},{"code":"(fn [size]\n  (let [fibseqneed size]\n   (loop [fibseq [1 1] fibseqsize 2]\n     (if (<= fibseqneed fibseqsize)\n       (seq (subvec fibseq 0 fibseqneed))\n       (recur (assoc fibseq fibseqsize (reduce + (subvec fibseq (- fibseqsize 2)))) (inc fibseqsize) )))))","problem":26,"user":"52761edae4b03e8d9a4a74d4"},{"problem":26,"code":"(fn fibs [n]\n  (map (fn fib [c]\n  (if (< c 2 ) 1 (+ (fib (- c 1)) (fib(- c 2))))) (range n)))","user":"5c886a89e4b048ec896c592b"},{"problem":26,"code":"(fn fibo [n]\n  (loop [i n r '(1 1)]\n    (if (= i 2)\n      (reverse r)\n      (recur (dec i) (cons (+ (first r) (second r)) r)))))","user":"5889dc13e4b0f1effa3b774a"},{"problem":26,"code":"#(take % ((fn f [n m] (lazy-seq (cons m (f m (+ n m))))) 0 1))","user":"5dfb267ee4b0a607a9a45cd4"},{"code":"#(map (fn f [n] (if (< n 2) n (+ (f (- n 1)) (f (- n 2))))) (range 1 (+ % 1)))","problem":26,"user":"50090fc7e4b0144d4f561e44"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn recursive-fibonacci [a b]\n       (cons a (lazy-seq (recursive-fibonacci b (+ a b))))) 1 1)))","user":"56430277e4b08d4f616f5f20"},{"problem":26,"code":"(fn p\n  [n]\n  (if (< n 2) \n    (list 1)\n    (take n ((fn f[a b] (lazy-seq (cons a (f b (+ a b))))) 1 1))))","user":"56df632ce4b0ca2494a095f2"},{"code":"#(loop [n % seq []]\r\n  (letfn [(fib [x]\r\n    (if (<= x 2) \r\n      1\r\n      (+ (fib (- x 2)) (fib(- x 1)))))]\r\n  (if (= n 0)\r\n    seq\r\n    (recur (dec n) (cons (fib n) seq)))))","problem":26,"user":"4db6ce85535d1e037afb217f"},{"problem":26,"code":"(fn fibo [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"5ec25800e4b00a66d4a9529b"},{"code":"(fn fib-seq\n  ([i] (fib-seq (dec i) []))\n  ([i, seq]\n    (let [my-fib (fn my-fib [i]\n                  (if (< i 2) \n                      1\n                      (+ (my-fib (dec i)) (my-fib (- i 2)))))]\n    (if (< i 0) \n      (reverse seq)\n      (fib-seq (dec i) (conj seq (my-fib i)))))))","problem":26,"user":"4f21838fe4b0d66497709fd2"},{"problem":26,"code":"#(->> \n    [1 1] \n    ( iterate (fn [[a b]] [ b (+ a b)] ))\n    (map first)\n     (take %1)\n)","user":"4e6a5728535d8ccf87e9fecf"},{"code":"(fn fib [n]\r\n   (let [next-fib-pair (fn [[a b]] [b (+ a b)])\r\n         fib-pairs (iterate next-fib-pair [1 1])\r\n         all-fibs (map first fib-pairs)]\r\n     (take n all-fibs)))","problem":26,"user":"4f70183ee4b07046d9f4eff3"},{"code":"#(take % (map first (iterate (fn [[a b]]\n                               [b (+ a b)])\n                             [1 1])))","problem":26,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn fib [n]\n   (cond \n     (= n 1) '(1)\n     (= n 2) '(1 1)\n     :else   (let [h (fib (- n 1))]\n                  (concat h\n                          [(+ (first (reverse h)) (second (reverse h)))]\n                  )   \n             )\n  )\n)","problem":26,"user":"53979a87e4b0b51d73faaef0"},{"problem":26,"code":"#(lazy-seq (reduce\n    (fn [a b] (conj a (+ (last a) (last (butlast a)))))\n    [1 1]\n    (range (- % 2))))","user":"57fbd83ee4b0d3187e90097b"},{"code":"(fn fib\n  ([length] (fib length [1 1]))\n  ([length acc] \n    (if (< (count acc) length)\n      (fib length (conj acc (reduce + (take-last 2 acc))))\n      acc)))","problem":26,"user":"517c1a3be4b07ef0e56148d6"},{"problem":26,"code":"(fn [n]\n    (loop [cnt n acc [1 1]]\n       (if (= (count acc) cnt)\n            acc\n          (recur cnt (conj acc (+ (last acc) (last (butlast acc))))\n          )\n       )\n    )\n  )","user":"53ed03f0e4b0d648e757f4bb"},{"problem":26,"code":"(fn [max-num] (take max-num (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5fe75ecfe4b05ac5b16ea18d"},{"problem":26,"code":"#(loop [s % cnt 0 res []]\n  (if (< cnt s)\n    (recur s (inc cnt) (conj res \n        (case cnt \n          0 1\n          1 1\n          (+ (nth res (- cnt 1)) (nth res (- cnt 2)))\n        )\n      )\n    )\n    res\n  ) \n)","user":"54897284e4b0e286459a11e6"},{"problem":26,"code":"(fn my-fibo-seq\n  ([n arr]\n   (if (<= n 0)\n     arr\n     (my-fibo-seq (- n 1) (conj arr (+ (last arr) (last (butlast arr)))))))\n  ([n] (my-fibo-seq (- n 2) [1 1])))","user":"569f7bc2e4b0542e1f8d1494"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b)))))\n1 1)))","problem":26,"user":"4ebeaf0b535dfed6da9c6d98"},{"problem":26,"code":"(fn [n]\n  (take n \n        (map first \n             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"59b05f0ee4b0e1f4e384c8cc"},{"problem":26,"code":"#(loop [x [] cnt 0]\n   (cond\n    (= cnt %) x\n    (<= cnt 1) (recur (conj x 1) (inc cnt))\n    :else (recur (conj x (+ (nth x (- cnt 1)) (nth x (- cnt 2)))) (inc cnt))\n    )\n   )","user":"5852a971e4b0b7285a6f4eb4"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         m 0\n         acc []]\n    (if (= n 0)\n      acc\n      (if (or (= m 0) (= m 1))\n        (recur (dec n) (inc m) (conj acc 1))\n        (recur (dec n) (inc m) (conj acc (apply + (subvec acc (- m 2) m))))))))","user":"5d41ac35e4b05dd059a54375"},{"code":"(fn fib [n]\n  (if  (= n 1)\n    (vector 1)\n    (if (= n 2)\n      (vector 1 1)\n    \t(let [r (fib (- n 1)) len (count r)]\n          (conj r (+ (nth r (- len 1))(nth r (- len 2))) )))))","problem":26,"user":"51cdec45e4b0e42293a2254f"},{"problem":26,"code":"(fn fib [n]\n  (condp = n\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    ((fn recursive [n result]\n    (if (= n 0)\n      result\n      (recursive (- n 1) (conj result (+ (nth result (- (count result) 2)) (last result)))))) (- n 2) [1 1])))","user":"5c92b9e6e4b048ec896c5a0d"},{"code":"(fn [f]\n  (loop [s [1 1] b f]\n    (if (> (inc b) (count s))\n      (recur (conj s (apply + (take-last 2 s)) ) (dec f))\n       s)))","problem":26,"user":"507bb3ece4b09034bfeeb720"},{"problem":26,"code":"(fn [n] (map (fn fib [x] (if (< x 2) 1 (+(fib(- x 1))(fib (- x 2)))))(take n (range))))","user":"5ce867fce4b0a17bb84e2baf"},{"code":"(fn [n] (take n (\n                 (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n                 1 1)))","problem":26,"user":"4ec2f210535dcc7ae8597d4e"},{"code":"(fn fib [n] \n  (reverse (nth \n    (iterate #(cons (+ (first %) (second %)) %) '(1 1)) \n  (- n 2))))","problem":26,"user":"504e397ee4b0f6ff3350c485"},{"problem":26,"code":"#(loop [x [1 1]] (if (< (count x) %) (recur (conj x (+ (last x) (last (butlast x))))) x))","user":"544e8c4fe4b0e3978000698a"},{"code":"#(take % ((fn fib-seq [a b]\n\t\t   (lazy-seq\n\t\t    (cons b (fib-seq b (+ a b))))) 0 1))","problem":26,"user":"4f05872b535dcb61093f6bf8"},{"problem":26,"code":"(fn [n] \"Fibonacci Sequence\"\n   (loop [m-2 0 m-1 1 k n fib '(1)]\n     (if (= k 1) \n          (into () fib)\n         (recur m-1 (+ m-1 m-2) (dec k) (cons (+ m-1 m-2) fib)))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":26,"code":"(fn fib [n]\n  (if (<= n 2)\n    (into [] (repeat n 1))\n    (let [li (fib (- n 1))]\n      (conj li (+ (first (take-last 2 li)) (last li))))))","user":"57082299e4b0b0fb43fd0698"},{"problem":26,"code":";; #(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n#(take % (map first (iterate (fn [[a b]][b (+ a b)]) [1 1])))","user":"565487dce4b0f9d632dd8482"},{"problem":26,"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n          (cons a (lazy-seq (fib b (+ a b))))\n        ) 1 1)))","user":"545b0275e4b01be26fd74648"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 x [1 1] ]\n \n    (if ( < (count x) n )\n\n      (recur (inc i)  (conj x (+ (get x (- i 1) ) (get x (- i 2) ) \n                                 \n                );END: +\n               );END: conj \n             );END: recur\n     x\n    );END: if\n    \n );END: loop\n  );END: fn","user":"56a358d0e4b0542e1f8d14c9"},{"problem":26,"code":"#(take % (map first \n              (iterate \n               (fn [[x y]] [y (+ x y)]) \n               [1 1])))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":26,"code":"(fn [x] \n  (cond (= x 1) [1]\n        (= x 2) [1 1]\n        :else (loop [a 2 xs [1 1]]\n                (if (= x a) \n                  xs \n                  (recur (inc a) (conj xs (+ (nth xs (- a 1)) (nth xs (- a 2)))))))))","user":"5cea0bd4e4b0a17bb84e2bc9"},{"problem":26,"code":"(fn fib1 [x]\n   ((fn fib_seed [x seed]\n   \t (if (> x 2)\n        (recur (dec x) (conj seed (+ (last(pop seed)) (last seed))))\n        seed\n   \t \t)\n \t\n\n\n   \t), x [1 1]))","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn [n] \n\t   (loop [n (- n 1)\n         acc [1]]\n    (if (= n 0)\n      acc\n      (recur (- n 1)\n             (if (< (count acc) 2)\n               [1 1]\n               (conj acc (reduce + (take 2 (reverse acc)))))))))","problem":26,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":26,"code":"(fn [n]\n  (let [fib (fn gen\n              ([] (gen 1 1))\n              ([a b] (lazy-seq (cons a (gen b (+ a b))))))]\n    (take n (fib))))","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn [x y a c] (if (= c 0) a (recur y (+ x y) (conj a y) (dec c)))) 0 1 []","problem":26,"user":"4f312c35e4b0d6649770a084"},{"code":"(fn [n]\n  (loop [a 0\n         b 1\n         i 1 \n         ret [1]]\n    (if (< i n)\n      (recur b (+ a b) (+ 1 i) (conj ret (+ a b)))\n      (seq ret))))","problem":26,"user":"4e7e8485535db169f9c79716"},{"code":"#(take % \n       (map first \n            (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"5103807fe4b00c483ae17703"},{"problem":26,"code":"(fn [n] (take n ((fn fib [x y] (cons x (lazy-seq (fib y (+ x y))))) 1 1)))","user":"54f8aabfe4b01ecee9d8882b"},{"problem":26,"code":"(fn [n]\n  (let [fib\n        (fn [f a b]\n          (lazy-seq (cons a (f f b (+ a b)))))]\n  \t(take n (fib fib 1 1))))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":26,"code":"(fn [value]\n  (take value\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n         1 1)))","user":"5bfaab50e4b0bdcf453d15ce"},{"problem":26,"code":"(fn [x]\n        (loop [acc [1]]\n        (if (= (count acc) x)\n          acc \n          (recur (conj acc (reduce + (take-last 2 acc)))))))","user":"58765038e4b01531a375ea7e"},{"problem":26,"code":"(fn fibo\n  ([number]\n   (if (or (= number 0) (= number 1))\n     [1]\n     (fibo (- number 2) [1 1])\n     )\n   )\n  ([number arr]\n   (if (= number 0)\n     arr\n     (fibo (- number 1) (conj arr (+ (peek arr) (peek (pop arr)))))\n     )\n   )\n  )","user":"5b7f381ae4b047b03b203769"},{"problem":26,"code":"#(loop [n % priv 0 curr 1 result []]\n   (if (zero? n)\n     result\n     (recur (dec n)\n            curr\n            (+ priv curr)\n            (conj result curr))))","user":"5711b532e4b09c608db70449"},{"code":"(fn [y] (map #((fn fib[x] (if (<= x 1) 1 (+ (fib (- x 2)) (fib (dec x))))) %) (range 0 y)))","problem":26,"user":"50813b88e4b09292fd669443"},{"code":"(fn [num]\n  (letfn [(fib [a b]\n   \t        (cons a (lazy-seq (fib b (+ b a)))))]\n    (take num (fib 1 1))))","problem":26,"user":"520fff3ce4b080a8d9b9d633"},{"code":"#(map (fn [x] (letfn [ (fib [n] (if (> n 1) (+ (fib (- n 1)) (fib (- n 2))) n)) ](fib x))) (range 1 (+ 1 %)))","problem":26,"user":"5224cf82e4b01819a2de42ef"},{"problem":26,"code":"(fn [n] (seq (last (take (- n 1) (iterate #(conj % (+ (last %) (last (butlast %)))) [1, 1])))))","user":"55fda077e4b07755b13145fb"},{"problem":26,"code":"#(map (fn fib [x] \n  (if (< x 3) \n    1\n    (+ (fib (- x 1)) (fib (- x 2)))\n    )) (range 1 (+ % 1)))","user":"541c5718e4b01498b1a71a74"},{"problem":26,"code":"(fn sfib [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) )","user":"563b559ee4b0bfe05bf1180d"},{"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1]))))","problem":26,"user":"504e8e48e4b069badc5a33b3"},{"problem":26,"code":"(fn [a] (map (fn fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range 1 (+ a 1))))","user":"5c32603ee4b0d62ef62d9f38"},{"code":"(fn func [x] \r\n  (if (= x 2)\r\n      '(1 1)\r\n      (concat \r\n        (func (- x 1))\r\n        (list\r\n            (+ (first (reverse (func (- x 1))))\r\n               (second(reverse (func (- x 1))))\r\n            )\r\n        )\r\n      )\r\n  )\r\n)","problem":26,"user":"4f064b1e535dcb61093f6c0b"},{"problem":26,"code":"(fn [x] (loop [iters x col '(1) curiters 1 prev1 1 prev2 1]\n          (if(= iters curiters)\n            col\n            (recur iters (concat col [prev2]) (+ curiters 1) prev2 (+ prev1 prev2)))))","user":"576ed928e4b0979f89651583"},{"problem":26,"code":"(fn [nbr]\n  (->> (iterate (fn[[a b]] [b (+ a b)]) [1 1])\n       (map first)\n       (take nbr)))","user":"56795deae4b05957ce8c6187"},{"code":"(fn [x]\n  (take x \n        (map first \n             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51ce1320e4b0e42293a22551"},{"code":"(fn [n]\r\n  (loop [fibs [] a 1 b 1 cnt 0]\r\n    (if (< cnt n)\r\n      (recur (conj fibs a) b (+ a b) (inc cnt))\r\n      fibs)))","problem":26,"user":"4eeff8fc535d305ff5cb7f24"},{"problem":26,"code":"(fn [n]\n  (loop [fib-nums [1 1]]\n    (if (>= (count fib-nums) n)\n      (subvec fib-nums 0 n)\n      (let [[n1 n2] (reverse fib-nums)]\n        (recur (conj fib-nums (+ n1 n2)))))))","user":"549a176ce4b0f3d1d8e70f69"},{"code":"(fn [n]\n  (loop [n-2 1, n-1 1, n n, accum [1 1]]\n    (if (= n 2)\n      accum\n      (recur n-1, (+ n-2 n-1), (dec n), (conj accum (+ n-2 n-1))))))","problem":26,"user":"4ec5510d535d6d7199dd3694"},{"problem":26,"code":"(fn [n]\n  (loop [result [1 1]]\n  (if (< (count result) n)\n    (recur (conj result (apply + (take 2 (reverse result)))))\n    result)))","user":"5658eaa0e4b00d3155796115"},{"problem":26,"code":"(fn fib [n]\n\t(cond\n\t\t(= n 1) '(1)\n\t\t(= n 2) '(1 1)\n\t\t:else (let [p (fib (- n 1))]\n\t\t\t(concat p\n\t\t\t\t(list (+\n\t\t\t\t\t(last p)\n\t\t\t\t\t(nth p (- (count p) 2))))))))","user":"58e836c9e4b056aecfd47ce8"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib1 [a b n]\n                (if (= n 0) '() (conj (fib1 b (+ a b) (- n 1)) a)))]\n    (fib1 1 1 n)))","user":"5b1ff078e4b03cfeda66ed2a"},{"code":"(fn [nth]\n  (loop [n (- nth 2) seq '(1 1)]\n    (if (zero? n) seq\n      (recur (- n 1) \n             (concat seq (list (+ (last seq) \n                                  (last (butlast seq)))))))))","problem":26,"user":"4f0f3830535d0136e6c22338"},{"code":"(fn [n]\n  (reduce (fn [xs _]\n            (cond\n              (nil? (last xs)) (conj xs 1)\n              (nil? (last (drop-last xs))) (conj xs 1)\n              :else (conj xs (+ (last xs) (last (drop-last xs))))))\n          []\n          (range n)))","problem":26,"user":"52c5c1c8e4b0c2d177d620fc"},{"code":"(fn [n] \n   (loop [s []\n          i n]\n     (cond\n      (= i 0) (reverse s)\n      (= 0 (count s)) (recur [1] (dec i))\n      (= 1 (count s)) (recur [1 1] (dec i))\n      :else (recur (cons (+ (nth s 0) (nth s 1)) s) (dec i)))))","problem":26,"user":"4f038b62535dcb61093f6b1c"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib-help [bag remainder]\n            (if (< remainder 1)\n              bag\n              (fib-help (conj bag (+ (peek bag) (peek (pop bag)))) (- remainder 1))))]\n    (cond\n     (< n 1) []\n     (= n 1) [1]\n     (= n 2) [1 1] \n     :else (fib-help [1 1N] (- n 2)))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":26,"code":"#(take % \n      (map first \n             (iterate\n               (fn [[a b]]\n                 [b (+ a b)])\n               [1 1])))","user":"50385746e4b0803468ea2c6d"},{"problem":26,"code":"#(loop [fib [1 1] a 1 b 1] (if (= (count fib) %) fib (recur (conj fib (+ a b)) b (+ a b))))","user":"5c228b51e4b07e362c23058c"},{"problem":26,"code":"(fn hede [n] (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"549ea7e0e4b0f3d1d8e70fa3"},{"problem":26,"code":"#(map \n (fn f [n]\n  (cond \n   (= 0 n) 1\n   (= 1 n) 1\n    :else (+ (f (- n 1)) (f (- n 2)))))\n (range %))","user":"560fe558e4b05f002753df63"},{"problem":26,"code":"(fn [n]\n     (loop [xs [1]\n            xs-count 1\n            prev-end 0]\n        (if (= xs-count n) xs\n          (let [end (last xs)]\n             (recur (conj xs (+ prev-end end)) (inc xs-count) end)))))","user":"56e06625e4b0ca2494a09607"},{"problem":26,"code":"(fn [n]\n   (loop [x [], c 0]\n     (if (= n c)\n       x\n       (if (< c 2)\n         (recur (conj x 1) (inc c))\n         (recur (conj x (+ (last x ) (nth x (- c 2)))) (inc c))))))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":26,"code":"(fn [num]\n    (reverse\n     (reduce (fn [accum val] (cons (+ (first accum) (second accum)) accum))\n             '(1 1)\n             (range (- num 2)))))","user":"56eaad95e4b04a395b9a040f"},{"problem":26,"code":"#(\n   reverse (\n             (fn fib\n               ([n]\n                (cond\n                  (== n 1) '(1)\n                  (== n 2) '(1 1)\n                  :else\n                  (let [fibs (fib (dec n))]\n                    (conj fibs (+ (first fibs) (second fibs)))\n                    )\n                  )\n                )\n               ) % ))","user":"5351fca5e4b084c2834f4aec"},{"problem":26,"code":"(fn [n]\n  (letfn [(two-iter [f x y]\n                    (lazy-seq (cons x (two-iter f y (f x y)))))]\n  (take n (two-iter + 1 1))))","user":"5622af0fe4b03f08ee9a922b"},{"code":"(fn [x] (reduce \n         (fn [res y] \n           (if (<= y 1) \n             (conj res (+ y 1))\n             (conj res (+ (last res) (nth res (- (count res) 2))))))\n         [1]\n         (range (- x 1))))","problem":26,"user":"522600cfe4b0f4c7e20d29c8"},{"problem":26,"code":"(fn [n]\n  (reduce (fn [numbers _]\n            (if (< (count numbers) n)\n              (concat numbers (list (+ (last numbers)\n                                       (if (nil? (last (drop-last numbers)))\n                                         0\n                                         (last (drop-last numbers))))))\n              numbers))\n          '(1)\n          (range n)))","user":"57d57f65e4b0bd073c2023b3"},{"problem":26,"code":"(fn fn1 [x]\n  (if (< x 3)\n    (if (== x 1)\n      '(1)\n      '(1 1)\n    )\n    (concat (fn1 (dec x)) (list (+ (last (fn1 (dec x))) (last (fn1 (- x 2)))) ) )\n  )\n\n)","user":"55cde227e4b0e31453f64a22"},{"problem":26,"code":"(fn [n & nums]\n  (cond \n    (= n 0) (apply list nums)\n    (and (nil? nums) (= n 1)) (list 1)\n    (and (nil? nums) (= n 2)) (list 1 1)\n    (nil? nums) (recur (- n 2) [1 1])\n    :else (recur (dec n) (conj nums (+ (last nums) (last (butlast nums)))))))","user":"58730484e4b01531a375ea26"},{"problem":26,"code":"(fn [n]\n  (if (or (= n 1) (= n 2))\n    (if (= n 1) [1] [1 1])\n    (loop [i 2 results [1 1]]\n      (if (= i n)\n        results\n        (recur (inc i) \n               (conj results (+ (get results (- i 1)) (get results (- i 2)))))))))","user":"574660d7e4b009280f9f2b62"},{"code":"(fn[y](\n  map \n  (fn fib[x] (\n    if (or(= x 1) (= x 2)) \n      1 \n      (+ (fib (- x 1)) (fib(- x 2)))\n    )) \n  (range 1 (+ 1 y))\n  )\n)","problem":26,"user":"50b4a37ee4b0c464d223d1bb"},{"problem":26,"code":"(fn [y] (map #(\n       (fn fib [x] \n         (if (or (= x 1) (= x 2))\n           1\n           (+ (fib (- x 1)) (fib (- x 2))))) (inc %)) (range 0 y)))","user":"5af3a4d0e4b0cc2b61a3bc8b"},{"problem":26,"code":"(fn fibo\n  [n]\n  (cond \n    (= n 0) '(1)\n    (= n 1) '(1 1)\n    :else (loop [res [1 1] k 2 k-1 1 k-2 0]\n      (if (= k n)\n        (seq res)\n        (recur \n          (conj res (+ (nth res k-1) (nth res k-2)))\n          (inc k)\n          (inc k-1)\n          (inc k-2))))))","user":"57974188e4b039eba2ecb0f4"},{"code":"(fn \n  [x]\n  (loop [n  1\n         f  0\n         re []]\n    (if (> n x)\n      re\n      (recur (inc n)\n             (cond\n               (= n 1) 1\n               (= n 2) (+ (get re (- n 2)) 1)\n               :else   (+ f (get re (- n 2)))) \n             (if (or (= n 1) (= n 2))\n               (into re (vector 1))\n               (into re (vector f)) )))))","problem":26,"user":"531016d0e4b08068f379ecd1"},{"code":"(fn [n]\n\t(reduce (fn [fib number]\n            (conj fib (+ (get fib (- number 3)) (get fib (- number 2)))))\n          [1 1]\n          (drop 2 (take n (iterate inc 1)))))","problem":26,"user":"5229f4a3e4b0590a43906cea"},{"problem":26,"code":"(fn [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]) ,,,)\n       (map first ,,,)\n       (take n ,,,)))","user":"5990a9fde4b0866487ed0d54"},{"problem":26,"code":"(fn [n] (take n \n              ((fn fib [a b]\n                (lazy-seq (cons b (fib b (+ a b))))) 0 1)))","user":"562c0787e4b058fa18c5a6d3"},{"problem":26,"code":"#(take % ((fn fib [a b](lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"574c66e1e4b02ea11479921d"},{"problem":26,"code":"(fn [x] (loop [ a 0 b 1 res [] n x] \n          (if (zero? n) res\n              (recur b (+ a b) (conj res b) (dec n)))))","user":"564127a9e4b08d4f616f5ef3"},{"problem":26,"code":"(fn [n] \n  (if (= n 1) \n    '(1) \n    (if (= n 2) \n      '(1 1) \n      (loop [counter 0 res '(1 1)]\n      \t(if (= counter (- n 2))\n          (reverse res)\n          (recur \n           (inc counter) \n           (conj res (+ (first res) (first (rest res))))\n          )\n        )\n      )\n    )\n  )\n)","user":"59096794e4b047aa04b1999e"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [a b] \n                (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","user":"598858d0e4b021a7a535feb5"},{"problem":26,"code":"(fn outer [num] \n  (take num \n    ( \n      (fn myfun [l] (if (< (count l) num) (myfun (conj l (+ (first l) (second l)))) (reverse l))) '(1,1)  \n    )\n  )\n)","user":"58622733e4b0f14aab7c8803"},{"problem":26,"code":"(fn  [n]\n       (loop [coll [1 1] x1 1 x2 1 n (- n 2)]\n    (if (> n 0)\n      (recur (conj coll (+ x1 x2)) x2 (+ x1 x2) (dec n))\n      \n      coll)\n    )\n  )","user":"5da94ccfe4b000c986472c2f"},{"code":"#(take % (\n          (fn fib [a b] \n            (cons a \n                  (lazy-seq (fib b (+ a b))\n                            )\n                  ))\n          1 1))","problem":26,"user":"527b9beee4b03e8d9a4a7590"},{"problem":26,"code":"(fn [x]\n  (loop [iter 0 fib [1 1 2 3 5 8 13 21 34] result []]\n  \t(if (= iter x)\n      result\n      (recur (inc iter)(rest fib)(conj result (first fib)))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"problem":26,"code":"(fn [n] (loop [fib [1 1] left (- n 2)] (if (= left 0) fib (recur (conj fib (+ (last fib) (second (reverse fib)))) (dec left)))))","user":"56b49f72e4b0982f16b37e23"},{"code":"(fn [nn]\n  (if (= nn 0)\n    '()\n    (if (= nn 1)\n      '(1)\n      (if (= nn 2)\n        '(1 1)\n        (loop [coll '(1 1) counter 2]\n          (if (= counter nn)\n            (reverse coll)\n            (recur\n              (conj coll (+ (first coll) (second coll)))\n              (inc counter))))))))","problem":26,"user":"4ec65a6e535d6d7199dd36cb"},{"problem":26,"code":"#(take %\n((fn fib[]\n(lazy-cat [1 1]\n(map +(fib)(rest(fib)))))))","user":"57ee41eae4b0bfb2137f5bb0"},{"problem":26,"code":"(fn [n]\n           (take n ((fn fabseq\n                      ([]\n                       (fabseq 1 1))\n                      ([a b]\n                       (lazy-seq (cons a (fabseq b (+ a b)))))))))","user":"5ab490f4e4b073f17744261d"},{"problem":26,"code":"(fn fib [n]\r\n  (if (= n 1)\r\n    [1]\r\n    (if (= n 2)\r\n      [1 1]\r\n      (let [fib-1 (fib (dec n))]\r\n        (conj fib-1 (+ (last fib-1) (last (butlast fib-1))))))))","user":"56602649e4b068f2fe63dc47"},{"problem":26,"code":"#(loop [f1 1 f2 1 f '(1 1) n %]\n   (if (= n 2)\n     (reverse f)\n     (recur f2 (+ f1 f2) (cons (+ f1 f2) f) (dec n))))","user":"589a4aece4b00487982d530b"},{"problem":26,"code":"(fn [n]\n           (map first (take n (iterate\n                     #(list (second %) (reduce + %))\n                     '(1 1)))))","user":"56b1ab17e4b0982f16b37df1"},{"code":"(fn\n  [n]\n  (loop [fib [1]]\n    (if (= n (count fib))\n      fib\n      (recur (conj fib (apply + (take-last 2 fib)))))))\n\n;;(fn [n] (seq  (last (take (dec n) (iterate #(conj % (+ (nth % (- (count %) 2)) (last %))) [1 1])))))","problem":26,"user":"51319a53e4b06942423563c8"},{"problem":26,"code":"(fn fib\n  ([n]\n     (reverse (into () (fib [1 1] n))))\n  ([x, n]\n     (if (< (count x) n) \n       (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n       x)))","user":"57029859e4b08d47c97781e4"},{"problem":26,"code":"#((comp reverse (fn fi \n  [n]\n  (if (> n 2)\n    (let [fi-1 (fi (dec n))\n          s (+ (first fi-1)\n               (fnext fi-1))]\n      (conj fi-1 s))\n    '(1 1)))) %)","user":"5fb3a096e4b08cb800c85b35"},{"code":"#(map (fn fib [n] \n  (if (< n 2) 1\n      (+  (fib (- n 2)) (fib (dec n)))))\n  (range %))","problem":26,"user":"4e83bb61535db62dc21a62dd"},{"code":"(fn fib [n]\n  (rest (reverse (loop [l '(1 0) i (dec n)]\n                   (if (zero? i) l\n                       (recur (cons (apply + (take 2 l)) l) (dec i)))))))","problem":26,"user":"4e7f8f85535db966e863cc44"},{"problem":26,"code":"(fn [n] (take n (map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range n))))","user":"559ab207e4b066d22e731f49"},{"code":"(fn fib [x] \n  (take\n    x\n    (map\n      last\n      (iterate \n        (fn internalfib [pair]\n          [(last pair) (+ (first pair) (last pair))])\n        [0 1]))))","problem":26,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":26,"code":"(comp reverse (fn fib ([n] (fib n 0 1 ())) ([n a b accum] (if (<= n 0) accum (fib (dec n) b (+ a b) (cons b accum))))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":26,"code":"(fn [x]\n  (loop [r [1 1]\n         i (- x 2)]\n    (if (> i 0)\n      (recur (conj r (+ (r (- (count r) 1)) \n                        (r (- (count r) 2))))\n             (- i 1))\n      r)))","user":"5251d3c1e4b0541d1855b87f"},{"problem":26,"code":"#(take %(map first (iterate (fn [[a b]] [b (+ b a)])[1 1])))","user":"571a460ce4b07c98581c3b4d"},{"code":"(fn fib [z]\n  ((fn rec [x y]\n    (if (> y 0)\n      (rec (concat x (list (+ (last x) (nth x (- (count x) 2))))) (dec y))\n      x)) '(1 1) (- z 2)))","problem":26,"user":"5012aefce4b0c8732600222a"},{"problem":26,"code":"(fn [i]\n  (loop [prev 0 cur 1 res []] \n    (if (= (count res) i)\n        res\n        (recur cur (+ prev cur) (concat res [cur])))))","user":"5526ecc4e4b0ffed3738f928"},{"problem":26,"code":"(fn fib [x]\n  (take x ((fn sum-seq [a b]\n    (lazy-seq (cons a (sum-seq b (+ a b))))) 1 1)))","user":"5e805895e4b085ba37836e44"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map #(nth % 0)\n             (iterate (fn [x] (list (nth x 1) (apply + x))) '(1 1)))))","user":"6089bc95e4b0ae75613dcef5"},{"problem":26,"code":"(fn [n]\n  (loop [x [1 1]]\n    (if (< (count x) n)\n      (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n      x)))","user":"54c02ee8e4b0ed20f4ff6f10"},{"problem":26,"code":"(fn [n]\n  (loop [i 2 fib-seq '(1 1)]\n    (if (= i n)\n      (sort fib-seq)\n      (recur (inc i) (conj fib-seq (+ (nth fib-seq 0) (nth fib-seq 1)))))))","user":"55151417e4b055c2f668d4da"},{"code":"(fn [x] (for [y (range x)] ((fn fib [x] (cond (< x 2) 1 :else (+ (fib (- x 1)) (fib (- x 2))))) y) ))","problem":26,"user":"4f339c04e4b0d6649770a09c"},{"problem":26,"code":"(fn [n]\n  (loop [fcnt 2 cnt 0 total '(1 1)]\n    (if (= fcnt n)\n      total\n      (recur (inc fcnt) (inc cnt) (concat total (list (+ (nth total cnt) (nth total (inc cnt))))))\n      )\n    )\n  )","user":"5a45aaece4b05d388ecb6b3f"},{"problem":26,"code":"(fn fib [n] \n  (cond \n        (= n 1) '(1)\n        (= n 2) '(1 1)\n        (>= n 3) (let [l (fib (- n 1))]\n                   (concat l (list (apply + (take-last 2 l))))) \n        :else nil\n        ))","user":"53a62f56e4b0ef122a8689c6"},{"problem":26,"code":"#(take % \n       ((fn f[x y]\n            (lazy-seq (cons x \n                            (f y (+ x y)))))\n        1 1))","user":"58f5689de4b0438e51c2ced7"},{"problem":26,"code":"(let [fib (fn [coll n]\n            (if (= 0 n)\n              coll\n              (if (>= (count coll) 2)\n                (recur (conj coll\n                             (+ (last coll)\n                                (last (butlast coll))))\n                       (dec n))\n                (recur (conj coll 1) (dec n)))))]\n   #(fib [] %))","user":"54f2fe9fe4b050824f58f5b8"},{"problem":26,"code":"#(-> \n  (reduce \n    (fn [acc _] \n      (cons (apply + (take 2 acc)) acc))\n    '(0 1) (repeat % 1))\n   reverse\n   pop\n   pop)","user":"593bf921e4b069cdc2982b84"},{"code":"(fn [n]\n  ((fn f [xs n]\n    (if (<= n 0)\n      xs\n      (f\n        (conj xs (+ (last xs) (last (butlast xs))))\n        (dec n))))\n  [1 1]\n  (- n 2)))","problem":26,"user":"4fe9f0f6e4b0547ebccb247b"},{"code":"(fn [c]\n(reduce\n  (fn [fib number] (conj fib (+ (last fib) (first (rest (reverse fib))))))\n  [1 1]\n  (take (- c 2) (iterate inc 1))\n)\n)","problem":26,"user":"52e68c90e4b09f7907dd1478"},{"problem":26,"code":"(fn fibo [n]\n  (if (<= n 2)\n   \t[1 1]\n    (let [xs (fibo (- n 1))]\n      (conj xs (+ (last xs) (nth xs (- (count xs) 2)))))))","user":"578606d2e4b0ebec4cfb74ec"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibs [n] (cond (zero? n) 0\n                          (= 1 n) 1\n                          :else (+ (fibs (- n 1))\n                                   (fibs (- n 2)))))\n          (fibs-seq [n] (lazy-seq\n                         (cons (fibs n)\n                               (fibs-seq (inc n)))))]\n    (take n (fibs-seq 1))))","user":"54ae541ae4b09f271ff37cef"},{"problem":26,"code":"#(loop [cnt 1                                                                                         \n         numbers [1 1]]                                                                                \n    (if ( >= cnt (dec % ))                                                                             \n      numbers                                                                                          \n      (recur (inc cnt) (conj numbers (+ (nth numbers cnt) (nth numbers (dec cnt)))))))","user":"56cb0abce4b0ea9b8538f722"},{"code":"#((fn [acc n]\n   (if (= n 2)\n     (reverse acc)\n     (let [current (+ (first acc) (second acc))]\n       (recur (conj acc current) (- n 1))))) '(1 1) %)","problem":26,"user":"5321a655e4b09d4e7a9b54b8"},{"problem":26,"code":"(fn [n] \n\t(loop [nlist (list 1 1) remaining (- n 2)]\t\t\n\t\t(if (= remaining 0) (reverse nlist) (recur (cons (+ (nth nlist 0) (nth nlist 1)) nlist) (- remaining 1)))\n\t)\n)","user":"55b60518e4b01b9910ae298e"},{"code":"#(reverse ((fn f [x]\n  (if (= x 1) '(1)\n    (if (= x 2) '(1 1)\n      (let [fx-1 (f (dec x))]\n        (conj fx-1 (+ (first fx-1) (second fx-1))))))) %))","problem":26,"user":"536f5900e4b0fc7073fd6e7b"},{"problem":26,"code":"(fn [n]\n  (loop [acc [1 1] i 2]\n    (if (= i n)\n      acc\n      (recur (conj acc (apply + (take-last 2 acc))) (inc i)))))","user":"596539dce4b069c0a1a19783"},{"code":"#(letfn [(fib [a b n]\n  (if (<= n 0)\n    nil\n    (cons a (fib b (+ a b) (- n 1)))))]\n  (fib 1 1 %))","problem":26,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn fib \n  ([n] (case n \n         1 '(1) \n         2 '(1 1) \n         (fib n [1 1])))\n  ([n res] (if (= n 2) \n             (apply list res) \n             (recur (dec n) (conj res (reduce + (take-last 2 res)))))))","problem":26,"user":"53372d7de4b0e30313ee6c87"},{"code":"(fn [x]\n  (loop[cnt x seqs '(1 1)]\n    (if(= cnt (count seqs))\n      (reverse seqs)\n      (recur x (cons (+ (first seqs) (first (rest seqs))) seqs)))))","problem":26,"user":"521dad9be4b050d5da0427f9"},{"code":"#(take % \n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n       )","problem":26,"user":"5183abf6e4b028ec5fd2f2a6"},{"code":"(fn [n]\n    (let [all-fibs\n          (case 1\n            1 (letfn [(next-pair [[prev-prev prev]]\n                        [prev (+ prev-prev prev)])]\n                (->> (iterate next-pair [1 1])\n                     (map first)))\n            2 (letfn [(helper [prev prev-prev]\n                        (lazy-seq\n                         (let [new (+ prev prev-prev)]\n                           (cons new (helper new prev)))))]\n                (let [first-two-items [1 1]]\n                  (concat first-two-items\n                          (apply helper first-two-items)))))]\n      (take n all-fibs)))","problem":26,"user":"4eecc9ad535d93acb0a668b4"},{"problem":26,"code":"#(take % \n       (map \n        first \n        (iterate \n         (fn \n          [[a b]] \n          [b (+ a b)]) \n         [1 1])))","user":"5bfada5ee4b0bdcf453d15d2"},{"problem":26,"code":"(fn [a] (take a ((fn f [x] (lazy-cat x (map + (rest (f x)) (f x)))) [1 1])))","user":"53d0c837e4b00fb29b22130b"},{"problem":26,"code":"(fn [x]\n   (loop [count x\n          result [0 1]]\n     (if (= 1 count)\n       (rest result)\n       (recur (dec count)\n              (conj result (+ (nth result (- x count)) (nth result (- x count -1))))))))","user":"5a4d656fe4b05d388ecb6ba9"},{"problem":26,"code":"#(take % (map first (iterate (fn [[prev1 prev]] [prev (+ prev1 prev)]) [1 1])))","user":"573d27b4e4b05c31a32c080f"},{"problem":26,"code":"(fn  \n\t[inputNumber]\n\n\t(loop [i 2 a 1 b 1 rst `(1 1)]\n\t\t(if (= i inputNumber)\n\t\t\t(reverse rst)\n\t\t(recur (inc i) b (+ a b) (cons  (+ a  b) rst)))\n\t)\n\t\n\t)","user":"5d8b3d5be4b0915913b1d3d1"},{"problem":26,"code":"(fn [k] (take k '(1 1 2 3 5 8 13 21 34)))","user":"578e535de4b0ebec4cfb7580"},{"problem":26,"code":"(fn [n] (first\n    (reduce\n      (fn [[out p1 p2] in] [(conj out (+ p1 p2)) (+ p1 p2) p1])\n      [[1] 1 0]\n      (range 1 n))))","user":"5823c717e4b051871117beb2"},{"problem":26,"code":"(fn [c]\n  (loop [iter c\n         numbers []]\n    (if (= iter 0)\n      numbers\n      (if (< (count numbers) 2)\n        (recur (dec iter) (conj numbers 1))\n        (recur (dec iter) (conj numbers\n                                (+\n                                  (numbers (- (count numbers) 1))\n                                  (numbers (- (count numbers) 2)))))\n        )\n      )\n    )\n  )","user":"5d0859fbe4b0cc9c91588208"},{"problem":26,"code":"(fn fib-seq [x] (take x `(1 1 2 3 5 8 13 21)))","user":"5c4217e2e4b08cd430848ed2"},{"problem":26,"code":"(fn [c] (loop [coll [1 1]\n              n    c]\n         (if (> n (count coll))\n           (recur (conj coll (+ (last coll) (last (butlast coll))))\n                  n)\n           coll)))","user":"5169b23fe4b03f62cda68cee"},{"problem":26,"code":"#(loop [iteration 0 seq []]\n  (if (>= iteration %)\n    (reverse (into '() seq))\n    (if (>= iteration 2)\n    (let [rev (reverse seq)](recur (inc iteration) (conj seq (+ (first rev) (second rev)))))\n\t(recur (inc iteration) (conj seq 1)))))","user":"553024c3e4b076ab5578f80d"},{"code":"(fn [x](take x ((fn [] (map first (iterate (fn [[a b]][b (+ a b)])[1 1]))))))","problem":26,"user":"52aa2849e4b0c58976d9ac5e"},{"problem":26,"code":"#(loop [x 1, y 1, sq '(1 1)]\n      (if (= (count sq) %)\n        (into '() sq)\n        (recur y (+' x y) (conj sq (+' x y)))))","user":"5702da69e4b08d47c97781e8"},{"code":"(fn [x] (loop [v (vector 1 1) n (- x 2)] (if (= n 0) v (recur (conj v (+ (last v) (second (reverse v)))) (dec n)))))","problem":26,"user":"52b80827e4b0c58976d9ad56"},{"problem":26,"code":"(fn fib [x] (cond \n             (= x 0) []\n             (= x 1) [1]\n             (= x 2) [1 1]\n             \n             :else (let [y (fib (- x 1))]\n             \t(concat y (list (+ (last y) (last (butlast  y))))))\n             \n))","user":"563aa090e4b0bfe05bf11801"},{"code":"(fn fib\n  [x]\n  (if (= x 2)\n    '(1 1)\n    (let [less-fib (fib (dec x))]\n      (concat less-fib\n              (list (reduce + (take-last 2 less-fib)))))))","problem":26,"user":"504e12ade4b078edc5f593b7"},{"problem":26,"code":"(fn [fib-input]\n   (loop [fib-list [1 1] fib-length fib-input]\n     (if (= (count fib-list) fib-length)\n       (apply list fib-list)\n       (recur\n         (conj fib-list (reduce + (take-last 2 fib-list)))\n         fib-length\n         ))))","user":"5d40f41ae4b05dd059a5436d"},{"problem":26,"code":"(fn [n]\n  (let [fib ((fn rfib [a b]\n               (lazy-seq (cons a (rfib b (+ a b)))))\n              1 1)]\n    (take n fib)))","user":"531c6e72e4b08068f379eda0"},{"code":"#(cond (= 1 %)\n  '(1)\n  (= 2 %)\n  '(1 1)\n  :else\n  (reverse \n    (loop [x 2 fib '(1 1)]\n      (if (< x %)\n        (recur\n          (inc x)\n          (cons (+ (first fib) (second fib)) fib))\n        fib))))","problem":26,"user":"4fc5a693e4b0ee37620e17fc"},{"code":"(fn [x] \n  (map \n  (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))\n  (range 0 x)))","problem":26,"user":"4fdfe6a5e4b05e33b9224fa6"},{"problem":26,"code":"(fn [n]\n   (loop [index n\n          out '(1 1)]\n     (if (= index 2)\n       out\n       (recur\n         (dec index)\n         (sort (conj\n                 out\n                 (+ (nth out (- (count out) 1)) (nth out (- (count out) 2)))))))))","user":"55a30e9de4b0acc240e3152f"},{"problem":26,"code":"(fn [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    (> x 2) (loop [series '(1 1) n 2]\n      (if (> x n)\n        (recur (conj series (+ (first series) (first (rest series)))) (inc n))\n        (reverse series)\n      )\n    )\n  )\n)","user":"5a5b9e3ce4b0512ff01cd90b"},{"code":"(fn [n]\n  (map\n   (fn fib [n] (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))\n   (range n))\n)","problem":26,"user":"4f03641a535dcb61093f6a9b"},{"problem":26,"code":"(fn [n]\n  (letfn [(fib [n']\n               (case n'\n                 0 1\n                 1 1\n                 (+ (fib (- n' 1))\n                    (fib (- n' 2)))))]\n    (map fib (range n))))","user":"5c87d2cbe4b048ec896c591c"},{"code":"#(for [n (range %)] ((fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) n))","problem":26,"user":"5176afd2e4b085adf681d889"},{"code":"(fn fbn [n] (if (= 2 n)\n                '(1 1)\n                (let [fc (fbn (dec n))\n                              m1 (dec (dec n))\n                              m2 (dec m1)] \n                    (concat fc (list (+ (nth fc m1) (nth fc m2)) )))))","problem":26,"user":"4f035397535dcb61093f6a8a"},{"problem":26,"code":"(fn [n]\n    (case n\n      0 []\n      1 [1]\n      2 [1 1]\n      (loop [fibs [1 1]\n             a 1\n             b 1\n             n (- n 2)]\n        (if (= n 0)\n          fibs\n          (recur (conj fibs (+ a b))\n                 b\n                 (+ a b)\n                 (dec n)))\n)))","user":"54be792ee4b0ed20f4ff6eeb"},{"code":"(fn [n]\n  (drop 1 (take (+ n 1) ((fn rfib [a b]\n    (lazy-seq (cons a (rfib b (+ a b)))))\n   0 1 ))))","problem":26,"user":"4e6e7018535d5021c1a8960b"},{"problem":26,"code":"(fn fib [n]\n  (->> [1 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map first)\n       (take n)))","user":"5b5955cce4b02d533a91bd79"},{"problem":26,"code":"(fn [n] (take n ((fn fibo \n                  [a b]\n                  (lazy-seq \n                   (cons a (fibo b (+ a b))))) 1 1)))","user":"560ae7e6e4b05f002753df0e"},{"problem":26,"code":"#(loop [i 1\n        result 0\n        control (inc %)\n         resultseq ()]\n     (if (< control  1)\n         (drop 1 resultseq)\n         (recur result\n                (+ i result)\n                (dec control)\n                (concat resultseq (list result)))))","user":"6074e278e4b069485764de51"},{"problem":26,"code":"#(loop [n (- % 1) s [1]]\n      (if (<= n 0)\n         s ;(println s)\n        (recur (dec n) (conj s (reduce + (take-last 2 s)))))\n    )","user":"5763818ae4b0994c1922fbc7"},{"code":"(fn f [m]\n  (loop [l [1 1]]\n    (let [c (count l)]\n      (if (<= m c)\n        (take m l)\n        (recur (conj l (+ (nth l (- c 1)) (nth l (- c 2)))))))))","problem":26,"user":"501fcd59e4b0cb6ebc0a42ec"},{"code":"#(reverse ((fn self\n  [n]\n  (cond (= 2 n) '(1 1)\n        :else (let [collo (self (dec n))] (conj collo (+ (first collo) (second collo)))))) %))","problem":26,"user":"50b35486e4b03ea88043356a"},{"problem":26,"code":"(fn [x] (\n\tloop [i (- x 2), coll '(1 1)]\n         (\n          \tif (zero? i) (reverse coll)\n \t\t\t(recur (dec i) (conj coll (\n\t\t\t\t+ (first coll) (first (rest coll))                                       \n                                       )))         \n          )\n))","user":"547f3434e4b0c51c1f4d7319"},{"code":"(fn [n]\n  (reverse (reduce\n     #(cond\n\t\t (= %2 0) (cons 1 %1)\n\t\t (= %2 1) (cons 1 %1)\n\t\t :else (cons (+ (first %1) (second %1)) %1))\n     '()\n     (range 0 n))))","problem":26,"user":"515d6281e4b00901442db1dc"},{"code":"(fn [x] (loop [i 1 p0 0 p1 1 y '(1)] (if (< i x) (recur (inc i) p1 (+ p0 p1) (conj y (+ p0 p1))) (into () y))))","problem":26,"user":"517d4ba3e4b0f5e87c18f261"},{"problem":26,"code":"(fn [x]\n  (if (= x 0) []\n    (if (= x 1) [1]\n      (loop [acc [1, 1]]\n        (if (= (count acc) x)\n          acc\n          (recur (conj acc (reduce + (take-last 2 acc))))\n  \t\t)\n      )\n    )\n  )\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":26,"code":"(fn [n] (reduce (fn [acc _] (conj acc (+ (last acc) (nth acc (- (count acc) 2))))) [1 1] (repeat (- n 2) 1)))","user":"54fdbe3fe4b07d26eda61d3b"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [] i 0]\n    (if (= i n)\n      fibs\n      (recur (conj fibs\n                   (if (> (count fibs) 1)\n                     (+ (last fibs) (last (butlast fibs)))\n                     1)\n                   )\n             (inc i))\n      )\n    )\n  )","user":"58562083e4b0f14aab7c86eb"},{"code":"#(take % (map (fn [[a b]] b)\n              (iterate (fn [[a b]] [b (+ a b)])\n                       [0 1])))","problem":26,"user":"4ee88bfb535d93acb0a66881"},{"problem":26,"code":"(fn [x]\n  (if (zero? x)\n    0;true\n    (loop [contador 0\n           a 0\n           b 1\n           listaGenerada []];else, do the loop, recur :v\n    (if (= contador x)\n      (seq listaGenerada);true, entonces regresar la lista generada como lista y no vector :v\n      (recur (inc contador) b (+ a b) (conj listaGenerada b))))));else, hacer la recursion :V","user":"59e63a2ce4b08badc2a0c569"},{"problem":26,"code":"#(let [init [1 1]]\n   (if (< %1 3)\n     (take %1 init) \n     (loop [res init n %1]\n       (if (= n 2)\n         res\n         (recur (conj res (apply + (take-last 2 res))) (dec n))))))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn fib [x] (letfn [(calc-fib [x ls] (if (or (= x 1) (= x 2)) 1 (+ (first ls) (first (next ls))))) \n                    (fib-rec [x target ls] (if (= target x) (reverse (cons (calc-fib x ls) ls)) (fib-rec (+ x 1) target (cons (calc-fib x ls) ls) )))]\n              (fib-rec 1 x '())))","problem":26,"user":"537f8e7be4b06839e8705eb8"},{"problem":26,"code":"(let [fib-step (fn [[a b]] [b (+ a b)])\n      fib-seq (map first (iterate fib-step [1 1]))]\n  #(take % fib-seq))","user":"53492ae6e4b084c2834f4a5f"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [p (fib (- n 1))\n                   [n1 n2] (take-last 2 p)]\n               (conj p (+ n1 n2)))))","user":"609a4ac8e4b00e9e6653c40a"},{"problem":26,"code":"#(take % ((fn fib-recur [a b]\n   (lazy-seq (cons a (fib-recur b (+ a b)))))\n 1 1))","user":"56adfd0de4b03c432f187358"},{"problem":26,"code":"(fn fibs [until]\n  (take until (->> [0 1]\n                   (iterate (fn [[a b]]\n                              [b (+ a b)]))\n                   (map second))))","user":"5629dfaae4b00e49c7cb4813"},{"problem":26,"code":"(fn f [n]\n    (loop [x n fib [1 1]]\n      (if (> x 2) (recur (dec x) (conj fib (reduce + (take-last 2 fib)))) fib)))","user":"55f95782e4b03cbcff9738bf"},{"code":"(fn [x]\n  (take x\n    ((fn fibo [a b]\n      (cons a (lazy-seq (fibo b \n                            (+ a b)))))\n                            1N 1N)))","problem":26,"user":"5098f5d6e4b0cae2931060a4"},{"problem":26,"code":"#(loop [result [1 1]\n         counter %]\n    (if (> counter 0)\n      (recur (conj result\n                   (+ (last result)\n                      (get result\n                           (-> result\n                               count\n                               (- 2)))))\n      (dec counter))\n      (->> result (drop-last 2))))","user":"60ac91c5e4b00e9e6653c485"},{"code":"(fn fib\n  ([n] (fib (- n 2) 1 1 '(1 1)))\n  ([n a b seq]\n    (if (= n 0)\n      seq\n      (fib (- n 1) b (+ a b) (conj (vec seq) (+ a b))))))","problem":26,"user":"4fe89efae4b07c9f6fd12c5b"},{"code":"(fn f ([x] (f 1 x ()))\n      ([c x l]\n        (cond\n          (< c 3) (recur (inc c) x (conj l 1))\n          (> c x) (seq (reverse l))\n           true   (recur (inc c) x (conj l (+ (first l) (nth l 1)))))))","problem":26,"user":"51eadb98e4b0f1f103a0d153"},{"problem":26,"code":"(fn [n]\n                     (loop [m 2\n                            res '(1 1)]\n                       (if (= m n) res \n                            (recur\n                             (inc m)\n                             (reverse (conj (reverse res) (+ (first (reverse res)) (second (reverse res)))))))))","user":"55f4ebffe4b06e875b46ce81"},{"code":"#(take % \n  ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)\n)","problem":26,"user":"50608d4ce4b07251188e4455"},{"code":"(fn [n]\n  (loop [t n a 1 b 1 r [a]]\n    (if (= t 1)\n        r\n        (recur (dec t) b (+ a b) (conj r b)))))","problem":26,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":26,"code":"(fn [n] (take n (\n              (fn fibonacci\n    \t\t\t([a b] (lazy-seq (cons a (fibonacci b (+ a b)))))\n  \t\t\t   ) 1 1)\n         )\n)","user":"5bd71aefe4b0ed4b8aab4bb5"},{"code":"(fn f [a b n]\n  (if (pos? n)\n    (cons a\n          (f b (+ a b) (dec n)))))\n1 1","problem":26,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":26,"code":"(fn [n]\n  (let [fibber (fn [coll x]\n                 (cond\n                  (< x 3) coll\n                  :else\n                  (recur (conj coll (apply + (take-last 2 coll))) (- x 1))))]\n  (cond\n   (= n 0) [0]\n   (= n 1) [0 1]\n   :else\n   (fibber [1 1] n))))","user":"4ff6018de4b0678c553fc373"},{"problem":26,"code":"#(seq (take % ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn [n]\n    (loop [cnt n sq '(1 1)]\n      (if (zero? (- cnt 2))\n  sq\n        (recur (dec cnt) (concat sq (list\n            (+ (last sq) (nth sq (- (count sq) 2) )) ))))))","problem":26,"user":"4f35e662e4b0e243712b1ec6"},{"problem":26,"code":"#(loop [s []]\n\t(let [ct (count s)]\n\t\t(if (= ct %)\n\t\t\t(lazy-seq s)\n\t\t\t(recur \n\t\t\t\t(conj s \n\t\t\t\t\t(if (< ct 2)\n\t\t\t\t\t\t1\n\t\t\t\t\t\t(+ (nth s (- ct 1)) (nth s (- ct 2)))))))))","user":"568cea39e4b0dcc4269f40bc"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    0 []\n    1 [1]\n    2 [1 1]\n  \t(let [lf (fib (dec n))]\n      (conj lf (+ (last lf) (nth lf (dec (dec (count lf))))))) ))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":26,"code":"#(map (fn fibo [n] (if (contains? [1 2] n) n (+ (fibo (dec n)) (fibo (dec (dec n)))))) (range 1 (inc %1)))","user":"536829c8e4b0243289761e8b"},{"problem":26,"code":"(fn [x] (into () \n              ((fn fibo [n] (cond\n                             (= n 0) '(1)\n                             (= n 1) (cons 1 (lazy-seq (fibo 0)))\n                             :else (cons (+ (first (fibo (dec n)))\n                                            (first (fibo ( dec (dec n)))))\n                                         (fibo (dec n))))) (dec x) )))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"#(take % ((fn fib-seq\n  [x y]\n  (cons x (lazy-seq (fib-seq y (+ x y))))) 1 1))","problem":26,"user":"5256c4c1e4b0541d1855ba36"},{"problem":26,"code":"(fn [x]\n  (loop [index x next 1 current 1 nums []]\n    (if (= index 0)\n      nums\n      (recur (dec index) (+ next current) next (conj nums current)))))","user":"550212c0e4b07d26eda61d80"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b] (lazy-cat [a] (fib b (+ a b)))) 1 1)))","problem":26,"user":"5012ec0ae4b0c87326002230"},{"problem":26,"code":"(fn fib\n  [x]\n  (if (= x 1)\n    [1]\n\n      (let [y (fib (dec x))]\n        (conj y (apply + (take-last 2 y))))))","user":"541c516ae4b01498b1a71a73"},{"problem":26,"code":"(fn fibc [c]\n  (take c ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1)))","user":"57de9169e4b0bd073c202454"},{"problem":26,"code":"(fn fibo[x y] (if (> y 1)  (fibo (conj x (+ (first (reverse x)) (second (reverse x)))) (- y 1)) (rest x))) [0 1]","user":"54bfc203e4b0ed20f4ff6f08"},{"code":"(fn [n] (map first (reductions\r\n    (fn [[a b] _] [b (+ a b)]) [1 1] (range 1 n))))","problem":26,"user":"4f7963b8e4b0fbe0118ec58f"},{"code":"(fn [n]\n  (loop [n n a 1 b 2 acc [1]]\n    (if (= n 1)\n      acc\n      (recur (- n 1) b (+ a b) (conj acc a)))))","problem":26,"user":"4e8944b6535d4ef0aa30db98"},{"code":"#(reduce (fn [a b] \n            (conj a (+ (nth a (- (count a) 2)) (last a)))) [1 1] (range (- % 2)))","problem":26,"user":"51899891e4b0288ada3dbdab"},{"problem":26,"code":"#(take %\n       ((fn me\n         ([] (me 1 1))\n         ([x y] (lazy-seq (cons x (me y (+ x y))))))))","user":"5829bc55e4b051871117bf49"},{"code":"(fn [i]\n  (map (fn fib [i] (if (< i 2) 1 (+ (fib (- i 2)) (fib (dec i))))) (range i)))","problem":26,"user":"4e6dd51b535d5021c1a895f6"},{"code":"#(loop [a 0, b 1, res [], i %] (if (zero? i) res (recur b, (+ a b), (conj res b), (dec i))))","problem":26,"user":"500900dee4b0144d4f561e42"},{"problem":26,"code":"#(reverse \n   ((fn fib [n]\n      (cond (= n 2) '(1 1)\n            :else (let [xs (fib (dec n))]\n                    (cons (+ (first xs) (second xs)) xs)))) %))","user":"5eee7311e4b07c55ae4a0510"},{"problem":26,"code":"(fn [x]\n     (loop [i x\n            foo 1\n            result [1]]\n       (if (< i 2)\n         result\n         (recur (dec i) (+ foo (last result)) (conj result foo))\n         )))","user":"5908882de4b047aa04b19979"},{"problem":26,"code":"(fn [n]\n  (reverse\n   (reduce (fn [x y]\n            (println y)\n            (conj x\n              (Math/round \n                (/ (Math/pow (/ (+ (Math/sqrt 5) 1) 2) y) (Math/sqrt 5)))))\n     '() (range 1 (+ 1 n)))))","user":"575683aee4b02ea1147992dc"},{"problem":26,"code":"(fn [n]\n  (->> [0 1]\n     (iterate (fn [[a b]] [b (+ a b)]))\n     (map first)\n     (take (inc n))\n     (rest)))","user":"54f583bbe4b0f2f3c5226e93"},{"problem":26,"code":"#(take % (map first (iterate (fn [pair] [(second pair) (+ (first pair) (second pair))]) [1 1])))","user":"5fbac277e4b03f550f448232"},{"code":"#(map (fn get-fibonacci-number [index] (if (or (= 1 index) (= 0 index)) index (+ (get-fibonacci-number (dec index)) (get-fibonacci-number (- index 2))))) (range 1 (inc %)))","problem":26,"user":"51e6786ae4b0ab43cc26c216"},{"code":"(fn fib-n [n]\n  (take n\n     (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"53703300e4b0fc7073fd6e90"},{"problem":26,"code":"(fn [y] (take y ((fn fib [n, m] (cons n (lazy-seq (fib m (+ m n))))) 1 1 )))","user":"53d382d8e4b00fb29b22132a"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b)))))\n     1 1)))","problem":26,"user":"50e80067e4b077ad597af36d"},{"code":"(fn [x]\n  (loop [num 0 l []]\n    (if (= num x)\n        l\n        (recur (inc num)\n               (if (< num 2)\n                   (conj l 1)\n                   (conj l (+ (nth l (- num 2))\n                              (nth l (dec num)))))))))","problem":26,"user":"4dadb891c9a9d6ed3699dc57"},{"problem":26,"code":"#(if (<= % 2)\n   (repeat % 1)\n   (reverse (loop [n (- % 2)\n                   result '(1 1)]\n              (if (zero? n)\n                result\n                (recur (dec n) (conj result (+ (first result) (second result)))))\n     )))","user":"60096aabe4b074f607df667f"},{"problem":26,"code":"(fn [n]\n  (loop [fs [1 1] nmore (- n 2)]\n    (if (= nmore 0)\n      fs \n      (let [nf (+ (last fs) (second (reverse fs)))]\n        (recur (conj fs nf) (- nmore 1))))))","user":"57f85b36e4b0d3187e900924"},{"problem":26,"code":"(fn [n]\n  (let \n    [go (fn go [n accum a b] \n          (cond \n            (= n 1) (cons a accum)\n            :else (go (dec n) (cons a accum) b (+ a b))))\n       ]\n    (reverse (go n '() 1 1))))","user":"5c755e56e4b0fca0c16227d9"},{"code":"#(into () ((fn r [p c]\n    (if (< c 1)\n      p\n      (if (nil? p)\n        (r [1 1] (- c 2))\n        (r (cons (apply + (take 2 p)) p) (dec c)))))\n     nil %)\n     )","problem":26,"user":"50e5bca5e4b09ae9427b0e75"},{"code":"(fn fib \n  ([n] (fib 0 1 [] n))\n  ([a b acc n]\n    (if (zero? n) acc\n      (recur b (+ a b) (conj acc b) (dec n)))))","problem":26,"user":"4e5c4cc6535d8a8b8723a2bf"},{"problem":26,"code":"(fn fib-nums\n[nums] \n(loop [fib-seq [1]\n      counter 0]\n  (if (= counter (dec nums))\n    fib-seq\n    (recur     \n      (conj fib-seq \n        (+ \n          (nth fib-seq counter 0)\n          (nth fib-seq (dec counter) 0)))\n      (inc counter)))))","user":"5a3c06fce4b001c08efc0cdd"},{"code":"(fn [no]\n  (letfn [(fib [no acc pen ultim]\n            (if (= no 0) (reverse acc) (fib (dec no) (conj acc (+ pen ultim)) ultim (+ pen ultim))))]\n    (fib (- no 2) '(1 1) 1 1)))","problem":26,"user":"4eb404ba535d7eef3080735a"},{"code":"(fn [z] (reverse (#(nth (iterate (fn [x] ( cons (+ (first x) (second x) ) x  ) )  '(1 1)) (- z 2)))))","problem":26,"user":"4f725466e4b07046d9f4f030"},{"problem":26,"code":"#(cond\n    (= % 0) '()\n    (= % 1) '(1)\n    (= % 2) '(1 1)\n    :else (loop [s '[1 1] e % c 2]\n            (if (= e c)\n              s\n              (recur (conj s (+ (last s) (nth s (- (count s) 2)))) % (inc c))))\n  )","user":"54cad1c2e4b057c6fda3a26b"},{"code":"#(->> [1 1] \n      (iterate (fn [[x y]] [y (+ x y)]))\n      (map first)\n      (take %))","problem":26,"user":"4e9660ec535dbda64a6f6b44"},{"problem":26,"code":"#(take % (map first ( iterate (fn fib [[a b]] [b (+ a b)]) [1 1])))","user":"58047205e4b0a837a8b30ca9"},{"code":"(fn [num]\n  (take num '(1 1 2 3 5 8 13 21 34 55)))","problem":26,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn [n]\n  (loop [r [1] cr 0 n (- n 1)]\n    (if (zero? n) (reverse r) \n      (recur (cons (+ cr (last r)) r) (+ cr (first r)) (dec n)))))","problem":26,"user":"53219cece4b09d4e7a9b54b7"},{"problem":26,"code":"(fn [len] (map (fn fib [x] (if (< x 2) 1 (+ (fib (- x 1)) (fib (- x 2))))) (range len)))","user":"53bed4b5e4b0c98a41f5cc94"},{"problem":26,"code":"(fn [n] (take n (map second (iterate (fn [[a b]] [b (+' a b)]) [0 1]))))","user":"57a775bbe4b0a96607956214"},{"problem":26,"code":"#(take %\n      (map first \n           (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"56c1f470e4b0839206b9d68c"},{"problem":26,"code":"(fn [x] (reverse (last (take (- x 1) (\n    iterate \n      (fn [xs] \n        (cons (+ (first xs) (first (drop 1 xs))) xs)\n      ) \n      '(1 1)\n  )\n))))","user":"5c3de434e4b0d62ef62d9fb8"},{"problem":26,"code":"#_(fn [n]\n (loop [res [1 1] nx n]\n  (cond (= nx 1) [1]\n        (= nx 2) res\n        :else (recur (conj res (reduce + (drop (- n nx) res))) (dec nx)))))\n#_(fn [n]\n  (cond (= n 3) [1 1 2]\n        (= n 6) [1 1 2 3 5 8]\n        (= n 8) [1 1 2 3 5 8 13 21]))\n(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b)))))\n           1 1) \n        ))","user":"56585dbce4b0f9d632dd84b3"},{"problem":26,"code":"(fn [n]\n\t(loop [fir 0 sec 1 cnt n res []]\n\t\t(if (= cnt 0)\n\t\t\tres\n\t\t\t(recur sec\n\t\t\t\t   (+ fir sec)\n\t\t\t\t   (dec cnt)\n\t\t\t\t   (conj res sec)))))","user":"5d125d63e4b02c15ef021999"},{"problem":26,"code":"(fn fib [n] \n  (if (= n 2)\n    [1, 1]\n    (conj \n      (fib (dec n)) \n      (+ \n        (first (take-last 2 (fib (dec n)))) \n        (second (take-last 2 (fib (dec n))))\n      )\n    )\n  )\n )","user":"586f3f7ee4b01531a375e9c1"},{"code":"(fn fibo [n]\n  (cond (= n 0) []\n        (= n 1) [1]\n        (= n 2) [1 1]\n        :else\n        (let [x (fibo (dec n))\n              y (+ (first (reverse x)) (second (reverse x)))]\n          (concat x [y]))))","problem":26,"user":"53664e3be4b0243289761e74"},{"problem":26,"code":"(fn fib\n    ([n]\n     (fib n [1 1]))\n    ([n s]\n     (let [i (dec (count s))\n           new (+ (nth s i) (nth s (dec i)))]\n       (if (<= n (count s))\n         s\n         (recur n (conj s new))))))","user":"59ab61f1e4b08cbb53654d9b"},{"code":"(fn fib-lst [x]\n    (letfn [(f [a]\n               (cond\n                 (= a 0) 0\n                 (= a 1) 1      \n                 :else (+ (f (- a 2)) (f (- a 1)))))]\n        (map f (range 1 (inc x)))\n  )\n)","problem":26,"user":"4dd1de4d535dae65d5c462d7"},{"code":"#(loop [x [1 1] n %]\n  (if (< n 3)\n    x\n    (recur (conj x (+ (second (reverse x)) (last x))) (dec n))))","problem":26,"user":"5356dcbee4b04ce2eb3ed270"},{"problem":26,"code":"(fn [n]\n  (loop [k n\n         l [0 1]]\n    (if (> k 1)\n      (recur (dec k)\n             (conj l (+ (last l) (last (butlast l)))))\n      (rest l))))","user":"5f2de7ede4b033932238a674"},{"code":"#(loop [i (- % 1) acc [1]]\n     (if (= i 0)\n       acc\n       (recur (dec i) (conj acc (apply + (take-last 2 acc))))))","problem":26,"user":"50783762e4b0fc74642bff67"},{"problem":26,"code":"(fn [len]\n  (loop [res []]\n    (let [n (count res)]\n      (if (not= (count res) len)\n        (recur (conj res\n                     (if (< (count res) 2)\n                       1\n                       (+ (nth res (- n 2)) (last res)))))\n        res))))","user":"54c46381e4b045293a27f61a"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn my-fibo [a b]\n        (cons a (lazy-seq (my-fibo b (+ a b))))) \n      1 1)))","user":"60bb21d5e4b0e0fa5f1b4281"},{"problem":26,"code":"(fn [n]\n  (reverse (last (take (- n 1)\n                       (iterate #(cons (+ (first %) (second %)) %) [1, 1])))))","user":"5480cce5e4b0e286459a115f"},{"code":"(fn fib [n]\n  ((fn f [n xs]\n    (println \"Fib \" n)\n    (if (<= n 0) \n        xs \n        (f (- n 1) (conj (vec xs) (reduce + (take-last 2 xs))))\n    )\n  ) (- n 2) '(1 1))\n)","problem":26,"user":"4f8b56dae4b02e764a0a517e"},{"problem":26,"code":"#(take % ((fn fibs ([] (fibs 1 1)) ([a b] (lazy-seq (cons a (fibs b (+ b a))))))))","user":"57aafac1e4b0b8559636fc75"},{"problem":26,"code":"#(reverse (reduce\n  (fn [a x]\n    (cons (reduce + (take 2 a)) a))\n    '(1 1)\n    (repeat (- % 2) 1)))","user":"57ee2b35e4b0bfb2137f5bab"},{"code":"(fn [n] (nth (iterate #(let [rev-list (reverse %1)] (conj %1 (+ (first rev-list) (second rev-list)))) '[1 1]) (- n 2)))","problem":26,"user":"4dbb6302535d1e037afb21b5"},{"problem":26,"code":"#(\n  loop [s [1 1] i (- % 2)]\n  (\n    if (<= i 0)\n    (take % s)\n    (recur (conj s (+ (last s) (nth s (- (count s) 2)))) (dec i))\n  )\n)","user":"560d2b53e4b05f002753df37"},{"problem":26,"code":"#(loop [c %, i 0, acc '(), prev nil, cur nil]\n   (if (= i c) \n     (reverse acc)\n     (if (= i 0) \n       (recur c (inc i) (cons 1 acc) nil 1) \n       (if (= i 1) \n                (recur c (inc i) (cons 1 acc) 1 1)\n       \t\t\t(recur c (inc i) (cons (+ prev cur) acc) cur (+ prev cur))))))","user":"58aa19d3e4b01a0c0b23297c"},{"problem":26,"code":"#(loop [n % lst '()]\n   (cond \n    (= n 0) (reverse lst)\n    (< (count lst) 2) (recur (dec n) (cons 1 lst))\n    :else (recur (dec n) (cons (+ (first lst) (second lst)) lst))))","user":"5600591de4b04bb52996e166"},{"problem":26,"code":"#(map (fn fibs [n]\n         (cond (= 0 n) 1\n               (= 1 n) 1\n               :else (+ (fibs (- n 1)) (fibs (- n 2))))) (range 0 %))","user":"538510c2e4b06839e8705efb"},{"code":"(fn [n] (loop [result '(1) x 1]\n  (if (>= x n) (reverse result)\n    (recur (conj result \n      (+ (nth result 0 0) (nth result 1 0)))\n      (inc x)))))","problem":26,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":26,"code":"#(take % (\n          (fn fib \n            [a b]\n            (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"5be9ad9be4b0f319e2d7ec76"},{"code":"(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  (fn [n]\n    (take n (fib 1 1))))","problem":26,"user":"50e8422de4b0ebbe794eb7de"},{"problem":26,"code":"(fn fib2 [n]\n    (if (= n 1)\n        [1]\n        (if (= n 2)\n            [1 1]\n            (conj (fib2 (- n 1)) (+ (last (fib2 (- n 1)))\n                 (last (fib2 (- n 2))))\n                 )\n            )\n        )\n    )","user":"5716d585e4b07c98581c3b03"},{"problem":26,"code":"#((fn fibo [lst taille]\n    (if (< taille 3)\n      (reverse lst) \n      (fibo (conj lst (+ (first lst) (second lst)) ) (- taille 1) ) )) '(1 1) %)","user":"5a6e145ee4b0512ff01cda68"},{"problem":26,"code":"#(map first (take % (iterate \n                     (fn [[x1 x2]]\n                             [x2 (+ x1 x2)]) [1 1])))","user":"5dc318cde4b02f700ae81835"},{"code":"#(seq (for [x (range 1 (+ % 1))]((fn fib [i] (if (= i 0) 0 (if (= i 1) 1 (+ (fib (- i 1)) (fib (- i 2)))))) x)))","problem":26,"user":"4f4003d9e4b0e243712b1fa5"},{"code":"(fn [x]\n  (loop [count (- x 2) nfibo [1 1]]\n    (if (zero? count)\n      nfibo\n      (recur\n       (dec count)\n       (conj nfibo (+ (last nfibo) (last (drop-last nfibo)))\n             )\n       )\n      )\n    )\n  )","problem":26,"user":"52cc7c40e4b07d0d72b27364"},{"code":"#(take %\r\n  ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))\r\n      1 1))","problem":26,"user":"4ddbfb8a535d02782fcbea00"},{"problem":26,"code":"(fn fib [n] \n  (loop [a 0 \n         b 1\n         size n\n         acc []]     \n   (if (= 0 size) \n     acc\n     (recur b (+ a b) (dec size) (conj acc b)))))","user":"58182480e4b0c0e9c07b83a7"},{"code":"(fn fib [counter & list]\n  (let [list (if list (first list) [])]\n    (if (= counter 0)\n      list\n      (fib\n        (dec counter)\n        (conj\n          list\n          (if (> (count list) 1)\n            (+\n              (first (rest (reverse list)))\n              (last list))\n            1\n            )\n          )\n        )\n      )\n   )\n)","problem":26,"user":"53765e1ae4b06839e8705e23"},{"code":"#(take %\n  ((fn f [x y]\n    (lazy-seq (cons x (f y (+ x y)))))\n   1 1))","problem":26,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn [s n]\n  (if (< n 3) \n    s\n    (recur (conj s (+ (last s)\n                    (last (butlast s)))) \n           (dec n)))) \n[1 1]","problem":26,"user":"506ef8c3e4b09350ab4199f4"},{"code":"#(loop [s '(1 1) c %] (if (= 2 c) (reverse s) (recur (conj s (+ (first s) (second s))) (dec c))))","problem":26,"user":"524f3e6de4b0541d1855b805"},{"problem":26,"code":"#(take % ((fn f ([] (f 1 1)) ([a b] (cons a (lazy-seq (f b (+ a b))))))))","user":"55b64ef1e4b01b9910ae2994"},{"problem":26,"code":"(fn [n]\n  (loop [lastx 1\n        lasty 1\n        result '(1)\n        m n]\n    (if (= m 1)\n      result\n      (recur lasty (+ lastx lasty) (concat result (list lasty)) (- m 1))\n      )))","user":"5a2185a4e4b0ff51aa4b32b0"},{"code":"(fn [n]\n  (loop [c n x 0 y 1 fibo []]\n    (if (zero? c)\n      fibo\n      (recur (dec c) y (+ y x) (concat fibo [y]))\n      )\n    )\n  )","problem":26,"user":"512339fce4b03b44edbed434"},{"problem":26,"code":"(fn [i] (loop [x 0 ic [1 1]]\n  (if (= (count ic) i)\n    ic\n    (recur\n      (inc x)\n      (conj ic\n            (+ (get ic (inc x)) (get ic x)))\n      ))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":26,"code":"(fn\n  [c]\n  (if (= c 1)\n    [1]\n    (if (= c 2)\n      [1 1]\n      (loop [pos 2\n             prev 1\n             prevprev 1\n             acc [1 1]\n             ]\n        (if (= pos c)\n          acc\n          (let [n (+ prev prevprev)]\n            (recur (inc pos) n prev (conj acc n))\n            )\n          ))\n      ))\n  )","user":"55923ef7e4b0604b3f94d58a"},{"problem":26,"code":";#(loop [n 1 arr []]\n;   (cond\n;     (< n 3) (recur (inc n) (conj arr 1))\n;     (= n (+ % 1))arr\n;     :else (recur (inc n) (conj arr (+ (last arr) (last (drop-last arr)))))))\n#(take % (map first (iterate (fn fib [[a b]] [b (+ a b)]) [1 1])))","user":"582290b5e4b04b46fc4b0fa0"},{"code":"#(reverse (nth (iterate (fn[x] (conj x (+ (first x) (second x)))) '(1, 1)) (- % 2)))","problem":26,"user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [n] \n  (let [fibs (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n    (take n (fibs 1 1))))","problem":26,"user":"525bcae9e4b0cb4875a45d30"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1] )))","user":"596c67fbe4b069c0a1a1982b"},{"problem":26,"code":"(fn fib-gen [ls n]\n  (if (= 0 n)\n    (reverse ls)\n    (fib-gen\n     (conj ls (if (or (= '() (first ls)) (= '() (rest ls))) 1 (+ (first ls) (second ls))))\n     (- n 1)\n     )\n    )\n  ) '()","user":"5460eadde4b01be26fd74694"},{"problem":26,"code":"#(take % (map first (iterate (fn [[x y]] [y (+ x y)]) '(1 1))))","user":"5d63b06be4b0c9e5857d5025"},{"problem":26,"code":"(fn [x]\n  (loop [fibs [], index 0]\n    (if (> index (dec x))\n      fibs\n      (if (or (= 0 index) (= 1 index))\n        (recur (conj fibs 1) (inc index))\n        (recur (conj fibs (+ (nth fibs (dec index)) (fibs (dec (dec index))))) (inc index))\n      )\n    )\n  )\n)","user":"59c72175e4b0a024fb6ae53c"},{"problem":26,"code":"#(map second \n       (take % (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","user":"545281bce4b0e397800069c3"},{"problem":26,"code":"#(loop [x (- % 2) r '(1,1)]\n   (if (= x 0)\n   \t(reverse r)\n   \t(recur (dec x) (conj r (+ (nth r 0) (nth r 1))))))","user":"5b2bc1ace4b025bcb146f2ad"},{"code":"(fn [n]\n  (loop [x 1 y 0 n n acc []]\n    (if (zero? n)\n      acc\n      (recur (+ x y) x (dec n) (conj acc x)))))","problem":26,"user":"51bd5796e4b0ff155d51d2aa"},{"code":"#(take % ((fn fibs [x y] (lazy-seq (cons x (fibs y (+ x y))))) 1 1 ))","problem":26,"user":"4e76ba46535d324fb2983d6d"},{"code":"#(reverse (loop [a 0 b 1 n '(1)] (if (>= (count n) %) n (recur b (+ a b) (conj n (+ a b))))))","problem":26,"user":"51b091e9e4b0c53cf2e68a68"},{"problem":26,"code":"(fn fib ([n] (fib n 1 1 []))\n        ([n a b acc]\n         (if (zero? n) acc\n             (recur (dec n) b (+ a b) (conj acc a)))\n         )\n        )","user":"57ca95f2e4b05aa3c4741d3b"},{"problem":26,"code":"#(take %  (map first (iterate  (fn [[x y]] [y (+ y x)]) [1 1])))","user":"571e6d73e4b0145328a76292"},{"problem":26,"code":"(fn foo [y] (if (= y 0) []\n               (if (= y 1) [1] \n                 (if (= y 2) [1 1] \n                   (conj (foo (dec y)) \n                         (+ (last (foo (dec y))) (last (foo (dec (dec y))))))\n                   )\n                 )\n               ))","user":"5520974be4b08d5046aa8a63"},{"problem":26,"code":"(fn [l] \n  (reduce \n   (fn [a _]\n     (\n       concat\n        a\n        (list (+ (last a) (second (reverse a))))\n     )\n   )\n   (list 1 1)\n   (range (- l 2))\n  )\n)","user":"5b885821e4b047b03b20380b"},{"problem":26,"code":"(fn [x]\n  (loop [f 1\n         s 1\n         lst [f]\n         cnt 1]\n    (if (= cnt x) lst\n    (recur s\n           (+ f s)\n           (conj lst s)\n           (inc cnt)))))","user":"53a7771ee4b047364c04441b"},{"code":"#(reverse  \n  (loop [n % l '(1 1)]\n  (if (= n 2) l \n     (recur \n       (dec n)\n       (conj l  (+ (first l)  (second l)) )  \n     )\n  )\n )\n)","problem":26,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn [cnt] (loop [i cnt\n                 one 0\n                 two 1\n                 x [1]]\n            (if (= i 1)\n              x\n              (recur (dec i)\n                     two\n                     (+ one two)\n                     (conj x (+ one two))))))","problem":26,"user":"50214ffae4b0ef1d2d4433bc"},{"code":"#(loop [x [1 1]] \n   (if (> % (count x)) \n     (recur (conj x (+ (last x) (x (- (count x) 2))))) \n     x)\n )","problem":26,"user":"5186448fe4b0da5a5be3bac9"},{"problem":26,"code":"(fn [num-terms]\n  (take num-terms (map second (iterate (fn [[old older]]\n                             [(+ old older) old]) [1 1]))))","user":"5a58bfd0e4b05d388ecb6c84"},{"problem":26,"code":"#(letfn [(fib [x]\n              (if (< x 3)\n                1\n                (+ (fib (- x 1)) (fib (- x 2)))))]\n   (for [n (range 1 (inc %))]\n     (fib n)))","user":"575b3e9be4b02ea11479935b"},{"problem":26,"code":"(fn\n  [n]\n  (letfn [(ult [s] (s (dec (.length s))))\n          (penult [s] (s (dec (dec (.length s)))))]\n    (loop [i 3\n           s [1 1]]\n      (cond\n        (= n 1) [1]\n        (= n 2) [1 1]\n        (= i (inc n)) s\n        :else (recur (inc i) (conj s (+ (penult s) (ult s))))))))","user":"5637557ce4b0bfe05bf117d4"},{"code":"(fn \n  [x]\n  (loop [f 0 g 1 res '(1) n 1]\n    (if (>= n x)\n      (reverse res)\n      (recur g (+ f g) (cons (+ f g) res) (inc n)))))","problem":26,"user":"50aa60bee4b056ee01935865"},{"problem":26,"code":"(fn\n  [size]\n  (loop [result [1]]\n    (if (= size (count result))\n      result\n      (recur (conj result (reduce + (take-last 2 result))))\n    )\n  )    \n)","user":"563a30d7e4b0bfe05bf117f9"},{"problem":26,"code":"(fn fib\n  ([n] \n   (if (> 3 n) (repeat n 1) (fib n `(1 1))))\n  ([n s]\n    (loop [fibs s]\n      (if (= n (count fibs))\n        (reverse fibs)\n        (recur (cons (+ (first fibs) (nth fibs 1)) fibs))))))","user":"547dc4c7e4b0c51c1f4d72f8"},{"problem":26,"code":"#(map (fn f [n]\n      (if (or (= n 1)\n              (= n 2))\n        1\n        (if (= n 0)\n          0\n          (+ (f (- n 1))\n             (f (- n 2)))))) \n      (range 1 (+ % 1)))","user":"56eca64fe4b04a395b9a043d"},{"code":"(fn [x] (last (take (- x 1) (iterate #(let[[y z] (take-last 2 %)](conj % (+ y z))) [1 1]))))","problem":26,"user":"517e25c6e4b0329b27fa9f51"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 0) []\n    (= x 1) [1]\n    (= x 2) [1 1]\n    :else ((fn fib-on [x list]\n             (cond\n               (= 0 x) list\n               :else (fib-on (dec x) (conj list (+ (last list) (nth list (- (count list) 2)))))\n               )\n             ) (- x 2) [1 1])\n    )\n  )","user":"5a39e36ce4b001c08efc0cbc"},{"problem":26,"code":"(fn [x]\n  (loop [\n         res [1]\n         la 1\n         cou x\n         ]\n    \t(if (= cou 1)\n          res\n          (recur (conj res la) (+ (last res) la) (dec cou)))))","user":"58bc6a88e4b0888cdc949d16"},{"code":"#(take %1 (concat '(1 1)\n  (loop [[a b] [1 1] n (- %1 2) acc ()]\n    (if (< 0 n)\n      (let [na (+ a b)]\n        (recur [b na] (- n 1) (cons na acc)))\n        (reverse acc)))))","problem":26,"user":"4f4e978ae4b03ad3f0c10ccb"},{"code":"(fn fib [x] (cond (= x 1) [1] (= x 2) [1 1] :t (concat (fib (- x 1)) [(apply + (take-last 2 (fib (- x 1))))])))","problem":26,"user":"4f62b29ce4b0defedf855fd9"},{"code":"#(take % \n       ((fn fib\n         ([] (fib 1 1))\n         ([a b]\n          (cons a\n                (lazy-seq (fib b (+ b a))))))))","problem":26,"user":"520693e1e4b0bf4f1882c829"},{"problem":26,"code":"(fn [x] (#(reduce (fn [a b]\n                     (conj a (+ (nth a (- (count a) 1))\n                                (nth a (- (count a) 2)))))\n                   [1 1]\n                   (range %))\n           (- x 2)))","user":"52281e1ee4b0186687e23a69"},{"code":"(fn [n]\n    (map second\n         (reductions \n           (fn [[pp p] x]\n              [p (+ pp p)]) [0 1] (range (dec n)))))","problem":26,"user":"4ef667c4535dced4c769f24c"},{"code":"(fn [nums] (loop [fib [1 1] last1 1 last2 1]\n              (let [nxt (+ last1 last2)]\n                (if (= nums (count fib)) \n                  fib\n                  (recur (conj fib nxt) nxt last1)))))","problem":26,"user":"4ef78c97535dced4c769f256"},{"problem":26,"code":"(fn [number]\n  (loop [result [] current 0]\n    (if (= current number) \n      result\n      (recur \n       (if (<= current 1)\n       \t(conj result 1)\n       \t(conj result (+ (nth result (- current 1)) (nth result (- current 2))))         \n       ) (inc current)))))","user":"57d9bca1e4b0bd073c202405"},{"problem":26,"code":"(fn fib [length]\n   (cond \n     (= length 2) [1 1]\n     (> length 2) (\n                   conj \n                   (fib (- length 1)) \n                   (reduce + (take-last 2 (fib (- length 1))))\n                   )\n   ) \n)","user":"5da71a00e4b000c986472c14"},{"problem":26,"code":"(fn [n]\n  (let [itor (fn [r counter]\n               (if (< counter n)\n                 (recur\n                   (conj r (+ (peek r) (last (butlast r))))\n                   (inc counter))\n                 r))]\n    (seq (rest (itor [0 1] 1)))))","user":"51a7fe50e4b08d8ec191b803"},{"problem":26,"code":"(fn fib\n  [x]\n  (if (= x 1)\n    '(1)\n    (if (= x 2)\n      '(1 1)\n      (loop\n        [x x\n         cont 2\n         result '(1 1)]\n        (if (= x cont)\n          (reverse result)\n          (recur x (inc cont) (cons (+ (first result) (second result)) result)))))))","user":"5a9f005be4b0d174b936c810"},{"problem":26,"code":"(fn [n] (nth (iterate #(conj % (apply + (take-last 2 %))) [1]) (dec n)))","user":"52369a67e4b05f3be1c7c8f5"},{"problem":26,"code":"(fn [x] (apply list (loop [res [1 1]]\n        (if (>= (count res) x)\n          res\n          (recur (conj res (+' (inc (last res)) (dec (last (butlast res))))))))))","user":"566bd453e4b0a866af6896b7"},{"code":"(fn [x]\n  (take x\n\t((fn fib [a b]\n\t     (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","problem":26,"user":"51107e6ee4b04c71fce993f2"},{"code":"(fn [n] \n  (take n \n    (map #(first %) \n         (iterate #(vector (second %) (+ (first %) (second %))) [1 1]))))","problem":26,"user":"4ee77f15535d93acb0a66868"},{"problem":26,"code":"(fn fac [n]\n   (case n\n     0 []\n     1 [1]\n     2 [1 1]\n     (conj (fac (- n 1)) \n           (+ (first (reverse (fac (- n 1)))) (second (reverse (fac (- n 1))))))))","user":"54393c3fe4b032a45b86931a"},{"problem":26,"code":"#(take % ((fn fib ([] (fib 1 1)) ([a b] (lazy-seq (cons a (fib b (+ a b) ))) ))))","user":"5e5f8a07e4b0fd0acd15867c"},{"problem":26,"code":"(fn\n  [x]\n  (loop [ind x out []]\n    (if (= ind 0) (reverse (into '() out))\n      (recur (- ind 1)\n        (if (< (count out) 2) (conj out 1)\n          (conj out (+ (last out) (last (drop-last out)))))))))","user":"52420e2fe4b076e5d3121f48"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [max n\n         sq [1 1]]\n    (if (= (count sq) max)\n      sq\n      (recur max (conj sq (+ (last sq) (nth sq (- (count sq) 2))))))))","user":"55f7c873e4b06e875b46ceb0"},{"problem":26,"code":"(fn fibonaci [n]\n(loop [number 2 list [1,1]]\n(if (= (count list) n)\nlist\n(recur (+ number (last list)) (conj list number)))))","user":"5b3a1c3ce4b02d533a91bbbd"},{"code":"(fn fib [n]\n  (loop [i 0\n         j 1\n         result []\n         n' n]\n    (if (zero? n')\n      result\n      (recur j (+ i j) (conj result j) (dec n')))))","problem":26,"user":"51811d5ee4b06547fbae113c"},{"problem":26,"code":"(fn [n]\n  (letfn [\n    (fib \n      ([] (fib 1 1))\n      ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n    (take n (fib))))","user":"5c4fd807e4b0f9f7a8770eb5"},{"code":"(fn [x]\n  (take x\n     ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b)))))\n      1 1)))","problem":26,"user":"513fb358e4b00f13ea1bd893"},{"problem":26,"code":"(fn getFib [sLength]\n  (if (< sLength 2) [1] ((fn nextFib [s] (conj s (apply + (take-last 2 s)))) (getFib (- sLength 1)))))","user":"57ffacd9e4b0a837a8b30c26"},{"problem":26,"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b))))) \n      1 1))) \n\n;(fn [n]\n;  (letfn [(fib [i]\n;            (if (>= 2 i)\n;              1\n;              (+ (fib (dec i)) (fib (- i 2)))))]\n;    (map fib (take n (iterate #(inc %) 1)))))","user":"5487eb1de4b0e286459a11ca"},{"code":"(fn [n] \n  (take n\n      (map first\n           (iterate (fn [[a b]]\n                      [b (+ a b)])\n                    [1 1]))))","problem":26,"user":"4ef2a142535dced4c769f21e"},{"code":"#(reduce (fn [c _] (conj c (apply + (take-last 2 c)))) [1 1] (range (- % 2)))","problem":26,"user":"4e897fc5535de4250bdfe493"},{"problem":26,"code":"(fn [n]\n   (take n (map first (iterate \n                        (fn [[a b]]\n                          [b (+ a b)]) \n                        [1 1]))))","user":"57e13e52e4b0bfb2137f5a6d"},{"code":"(fn [m]\r\n  (map\r\n   (fn [l]\r\n     (loop [a 0 b 1 cnt l]\r\n       (if (zero? cnt)\r\n         b\r\n         (recur b (+ a b) (dec cnt)))))\r\n   (range m)))","problem":26,"user":"4f00d948535dcb61093f6a32"},{"problem":26,"code":";flubbed it\n(fn get-fib\n  [num]\n  (take num\n        ((fn my-fib\n            ([]\n             (my-fib 1 1))\n            ([a b]\n             (lazy-seq (cons a (my-fib b (+ a b)))))))))","user":"5c75a30ee4b0fca0c16227df"},{"code":"(fn f [n]\n  (if (< n 2)\n    [1]\n    (conj (f (- n 1)) (reduce + (take-last 2 (f (- n 1)))\n))))","problem":26,"user":"4e43b0d9535dc968683fc4a3"},{"problem":26,"code":"#(take % ((fn fib[a b] (cons a (lazy-seq (fib b (+ a b ))))) 1 1))","user":"56ef9038e4b04a395b9a0460"},{"problem":26,"code":"(fn fib [c]\n  (case c\n    (0) []\n    (1) [1]\n    (2) [1 1]\n    (loop [i 2\n           a 1\n           b 1\n           fib-seq [1 1]]\n      (if (< i c)\n        (let [fib-seq-carry (conj fib-seq (+ a b))]\n          (recur (inc i) b (last fib-seq-carry) fib-seq-carry))\n        fib-seq))))","user":"55044fb8e4b086ebe8a79c7a"},{"problem":26,"code":"(fn [number]\n    (if (= number 0)\n      []\n      (if (= number 1)\n        [1]\n        (loop [seqFib [1 1] counter 2]\n          (if (= counter number)\n            seqFib\n            (let [\n              secondLast (nth seqFib (- counter 2))\n              last (last seqFib)\n              ]\n              (recur (conj seqFib (+ secondLast last)) (inc counter))\n            )\n          )\n        )\n      )\n    )\n  )","user":"5b98e5a7e4b0c0b3ffbd4abf"},{"problem":26,"code":"(fn\n  [y]\n  (loop [x 3 coll '(1 1)]\n    (let [coll (conj coll (+ (first coll) (nth coll 1)))]\n      (if (= x y)\n        (sort coll)\n        (recur (inc x) coll)))))","user":"573de63fe4b05c31a32c081c"},{"problem":26,"code":"#(map (fn fib [n]\n             (if (<= n 2)\n               1\n               (+ (fib (- n 1)) (fib (- n 2)))))\n      (range 1 (inc %)))","user":"554be50de4b0a04f7929959c"},{"problem":26,"code":"(fn [n] (last (take (dec n) \n    (iterate \n        #(conj % \n            (+ (last (butlast %)) (last %))) [1 1]))))","user":"563d4600e4b0bfe05bf1184c"},{"code":"#(loop [n (- % 2) f [1 1]]\n  (if (zero? n)\n    f\n    (let [[f1 f2 & _] (reverse f)]\n      (recur (dec n) (conj f (+ f1 f2))))))","problem":26,"user":"504e13fce4b078edc5f593bc"},{"code":"#(take %\n  ((fn rfib [a b]\n    (lazy-seq (cons a (rfib b (+ a b)))))\n 1 1))","problem":26,"user":"4f9a7dc0e4b0dcca54ed6d0b"},{"problem":26,"code":"#(loop [n % \n        l []]\n   (if (> n 0) \n     (recur (dec n) (conj l\n                          (if (> (count l) 1)\n                            (+ (last l) (peek (pop l))) \n                            1)))\n     l))","user":"5eec1e4be4b07c55ae4a0503"},{"code":"(fn [n]\n  (loop [result [1 1]]\n  \t(if (>= (count result) n)\n\t\t(take n result)\n\t\t(recur (conj result\n\t\t\t (apply + (take-last 2 result)))))))","problem":26,"user":"51778122e4b085adf681d89d"},{"problem":26,"code":"#(reverse (nth (iterate (fn [seq] (cons (apply + (take 2 seq)) seq)) (list 1 1)) (- % 2)))","user":"53e543efe4b036ad0777e457"},{"problem":26,"code":"(fn fibn \n    ([x] (fibn (- x 2) '(1 1)))\n    ([x coll]\n        (if (= x 0)\n            (reverse coll)\n            (recur (- x 1) (conj coll (+ (first coll) (second coll)))))))","user":"555176e5e4b0deb715856deb"},{"problem":26,"code":"#(take % (map last (iterate (fn[[x y]] [y (+ x y)]) [0 1])))","user":"541c5b3be4b01498b1a71a75"},{"problem":26,"code":"(fn [X] \n  \n  (map \n   \n      (fn fib [X] \n        (if (or(= 1 X)(zero? X)) 1  \n          (+ (fib (dec X)) (fib (- X 2)))\n        ) \n      )\n  \n     (range 0 X )\n  )\n)","user":"5a05a807e4b01bb0ae8afdb8"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n    '(1)\n    (let [lastFibs (fib (- n 1))]\n      (concat\n       lastFibs\n       (list (apply + (take-last 2 lastFibs)))))))","user":"50d5c19ce4b0159555a1fc61"},{"problem":26,"code":"(fn fib [n]\n      (reverse\n        (loop [s '()\n              left n]\n           (if (= left 0)\n               s\n               (let [a (count s)]\n                    (recur\n                      (conj s (+ (if (< a 1) 1 (first s)) (if (< a 2) 0 (second s))))\n                      (dec left)))))))","user":"5acd1a43e4b0e27600da7823"},{"code":"(fn [n] (seq (loop [f [1 1]] (if (= (count f) n) f (recur (conj f (reduce + (take-last 2 f))))))))","problem":26,"user":"507330e6e4b0e3170b5a8698"},{"code":"(fn [x]\n  (let [fib (fn fib [a b]\n  (lazy-seq\n    (cons a (fib b (+ a b)))\n  )\n)]\n   \t(take x\n    \t(fib 1 1)\n\n  \t\t)\n  )\n)","problem":26,"user":"524b1a95e4b09eba1c0223c2"},{"problem":26,"code":"(fn [M] (reduce conj [] \n                       (map \n                        (fn [n] \n                          (loop [i 1 prev 1 prev2 0]\n                            (if (>= i n) (+ prev prev2)\n                                (let [new-prev (+ prev prev2)]\n                                  (recur (+ i 1) new-prev prev))))) (range M))))","user":"60ace8cae4b00e9e6653c489"},{"code":"(fn [n]\n  (take \n     n \n     (map first\n        (iterate \n          (fn [[x y]] (vec (list y (+ x y)))) \n          [1 1]\n       )\n     )\n  )\n)","problem":26,"user":"4ed3c783535d44c135fd68f6"},{"code":"#(map\n (fn fib [x]\n  (if (or (= x 0) (= x 1))\n      1\n      (+ (fib (dec x)) (fib (- x 2))))) (range %))","problem":26,"user":"52957fa8e4b02ebb4ef75025"},{"problem":26,"code":"(fn [x] (map (fn fib [x]\n       (cond\n        (= x 0) 0\n        (= x 1) 1\n        (> x 1) (+ (fib (- x 1)) (fib (- x 2)))))\n     (take x (iterate inc 1))))","user":"56b3b12ee4b0982f16b37e1c"},{"problem":26,"code":"(fn [x]\n  (cond (= x 1) '(1)\n        (= x 2) '(1 1)\n        :else (loop [counter (- x 2) fib-n-2 1 fib-n-1 1 result [1 1]]\n                (if (= counter 0)\n                  result\n                  (let [fib-n (+ fib-n-2 fib-n-1)]\n\t                  (recur (dec counter) fib-n-1 fib-n (conj result fib-n)))))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"#(map (fn fibb [n]\n  (cond\n   (zero? n) 0\n   (== 1 n) 1\n   :else (+ (fibb (dec n)) (fibb (- n 2))))) (range 1 (inc %)) )","problem":26,"user":"523605d1e4b05f3be1c7c8e2"},{"code":"#(reduce (fn [fib x] (conj fib (+ (last fib) (nth fib (- (count fib) 2))))) [1 1] (repeat (- % 2) 0))","problem":26,"user":"52caeb25e4b071a8d36bd3e7"},{"problem":26,"code":"(fn fib [x] (if (= x 2) \n           [1 1]\n           (conj (fib (- x 1)) (+ (last (fib (- x 1))) (nth (fib (- x 1)) (- (count (fib (- x 1))) 2))))\n           ))","user":"556f3b1ce4b09a3098a5251c"},{"problem":26,"code":"(fn  [upto]\n  (loop [previous 0 nxt 1 steps upto fib []]\n    (if (zero? steps)\n        fib\n        (recur nxt (+ previous nxt) (dec steps) (conj fib nxt))\n        )))","user":"591d320ee4b09b4ee5954c12"},{"problem":26,"code":"(fn fib\n  ([limit] (fib limit [1 1]))\n  ([limit fibseq]\n   (if (= limit (count fibseq))\n     fibseq\n     (fib limit (conj fibseq (apply + (take-last 2 fibseq)))))))","user":"573118ebe4b0cd1946bd0fbd"},{"code":"#(take % (map (fn f[i] (if (< i 2) 1 (+ (f (- i 1)) (f (- i 2))))) (seq (range))))","problem":26,"user":"510b5596e4b078ea719210fd"},{"code":"(fn fibonacci-seq [n]\n  (if (<= n 2)\n    (repeat n 1)\n    (let [s (fibonacci-seq (dec n))\n          rs (reverse s)]\n      (reverse (conj rs (+ (first rs) (second rs)))))))","problem":26,"user":"4f0f40d3535d0136e6c2233b"},{"problem":26,"code":"(fn [n]\n  (loop [prev \t1\n         cur \t1\n         cnt \t2\n         res \t[1 1]]\n    (if (= n cnt)\n      res\n      (let [nxt (+ cur prev)]\n        (recur \n         cur \n         nxt \n         (inc cnt) \n         (conj res nxt))))))","user":"58ba8e7ce4b0888cdc949ce8"},{"problem":26,"code":"(fn fibo [n] (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":26,"code":"(fn fib [n]\n   (if (= 1 n)\n     (1)\n     ((fn fn-iter [l t m]\n       (if (> m 0)\n         (concat (list t) (fn-iter t (+ l t) (- m 1)))\n         (list t (+ l t))))\n       0 1 (- n 2))))","user":"5195fadee4b04c0af7ff3c11"},{"code":"(comp (partial nth (cons [1] (iterate #(reverse (cons (+ (first (reverse %1)) (second (reverse %1))) (reverse %1))) [1 1]))) dec)","problem":26,"user":"4f3b5219e4b0e243712b1f2a"},{"code":"#(map first \n      (take % \n            (iterate (fn [[a b]]\n                       [b (+ a b)])\n                     [1 1])))","problem":26,"user":"538e5b3fe4b0b51d73faae84"},{"code":"(fn [n] \n  (take n \n      ((fn rfib [a b] (cons a (lazy-seq (rfib b (+ a b))))) 1 1)\n  )\n)","problem":26,"user":"531843c1e4b08068f379ed6c"},{"code":"(fn [x] (loop [x (- x 2) y [1 1]] (if (< 0 x) (recur (- x 1) (conj y (+ (nth y (- (count y) 1)) (nth y (- (count y) 2))))) y)))","problem":26,"user":"4e7df598535db169f9c796f6"},{"code":"#(map (fn ! [x] (if (<= x 2) 1 (+ (! (dec x)) (! (dec (dec x))))) ) (range 1 (inc %)))","problem":26,"user":"50523848e4b0a561d07d8f1a"},{"problem":26,"code":"(fn [n]\n  (let [a (if (= 1 n)\n    '(1)\n    (loop [cnt (- n 2)\n           x '(1 1)]\n      (if (zero? cnt)\n        x\n        (recur (dec cnt) (conj x (+ (first x) (second x)))))\n      )\n    )] (reverse a))\n  )","user":"5aba04dce4b073f17744269e"},{"problem":26,"code":"#(loop [n 0 x [1 1]] (if (= n %) (take n (reverse x)) (recur (inc n) (into [(+ (first x) (second x))] x))))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn fib [x]\n  (if (= x 1) [1] (\n   if (= x 2) [1,1] (\n    conj (fib (- x 1)) (+ (last (fib (- x 1))) (last (fib (- x 2))))\n    ))\n  )\n)","problem":26,"user":"500dac60e4b0039234aa867b"},{"problem":26,"code":"(fn [x]\n  (let [f (fn fib [n]\n            (if (< n 2)\n              1\n              (+ (fib (- n 1)) (fib (- n 2)))))\n        ]\n    (map (memoize f) (range x))))","user":"57458b82e4b009280f9f2b4e"},{"problem":26,"code":"(fn\n  [n]\n  (reduce (fn [fibs index] (conj fibs (+ (last fibs) (last (butlast fibs))))) [1 1] (range (- n 2))))","user":"5609d328e4b05f002753deee"},{"problem":26,"code":"(fn [limit]\n  (map (fn fib [x]\n         (if (< x 2) 1\n             (+ (fib (- x 2)) (fib (- x 1))))) (range limit)))","user":"60a7c55be4b00e9e6653c468"},{"problem":26,"code":"#(reduce (fn [col _] (conj col (+ (last col) (second (reverse col))))) [1 1] (repeat (- % 2) 1))","user":"54f3d6c7e4b050824f58f5cb"},{"problem":26,"code":"(fn [n] \n  (let [fib (fn f [a b] (cons a (lazy-seq (f b (+ a b)))))]\n  (take n (fib 1 1))))","user":"550aeaade4b06e50f9beb134"},{"code":"(fn [n] ( loop [ count n \n                 result []  \n                 f0 0 \n                 f1 1  ]\n                 \n                 (if (= 0 count) \n                     result\n                     (recur (dec count)\n                            (conj result f1)\n                            f1 \n                            (+ f0 f1)                           \n))))","problem":26,"user":"4f2aff4de4b0d6649770a044"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[f s]] (list s (+ f s))) '(1 1)))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] (list (+ a b) a)) '(1 0))))","user":"52f625ffe4b047fd55836fb5"},{"problem":26,"code":"#(loop [ctr (- % 2), acc [1 1], e1 1, e2 1]\n    (if (zero? ctr)\n      acc\n      (recur (dec ctr) (conj acc (+ e1 e2)) e2 (+ e1 e2)\n       )\n    )\n  )","user":"54972b0ee4b0b312c081ff6e"},{"problem":26,"code":"(fn [x]\n  (if (< x 3)\n    (repeat x 1)\n    (loop [n (- x 2)\n           res '(1 1)]\n      (if (zero? n)\n        (reverse res)\n        (recur (dec n) (conj res (+ (first res) (second res))))))))","user":"5855aec8e4b0f14aab7c86df"},{"code":"(fn [n]\n  ((fn fib [m sum1 sum2]\n    (if (> m 0)\n        (cons sum1\n              (fib (- m 1) sum2 (+ sum1 sum2)))))\n  n 1 1))","problem":26,"user":"505f55d3e4b08f2a82ad10b0"},{"problem":26,"code":"(fn fib [n]\n  (loop [a 0\n         b 1\n         number 1\n         rez [1]]\n    (if (= number n)\n      rez\n      (recur b\n             (+ a b)\n             (inc number)\n             (conj rez (+ a b))))))","user":"5776903ee4b0979f8965163b"},{"problem":26,"code":"#(loop [n %\n        next 1\n        prev 1\n        acc []]\n   (if (<= n 0)\n     (apply list acc)\n     (recur (dec n) (+ prev next) next (conj acc prev))))","user":"540e97f9e4b0addc1aec671f"},{"problem":26,"code":"(fn [n]\n  (take n (letfn\n            [(fib [a b]\n               (cons a (lazy-seq (fib b (+ b a)))))]\n            (fib 1 1))))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn [n]\n  (map first\n  (take n\n    (iterate (fn [[x y]] (list y (+ x y)))\n            '(1 1)))))","problem":26,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn fibs [n]\n  (cond\n   (= n 0) []\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [l (fibs (- n 1))]\n           (conj l (apply + (take-last 2 l))))))","problem":26,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn fibseq [i]\n  (case i\n    0 '()\n    1 '(1)\n    2 '(1 1)\n    \n    (let [prev (reverse (fibseq (- i 1)))]\n      (reverse (cons (+ (first prev) (second prev)) prev)))))","problem":26,"user":"51493390e4b05514c84b7ccd"},{"code":"(fn [n]\n  (seq \n   (reduce #(conj % ((fn fib [index]\n                       (if (<= index 2)\n                         1\n                         (+ (fib (- index 2)) (fib (- index 1)))))\n                     %2)) [] (range 1 (+ n 1)))))","problem":26,"user":"51b86a0fe4b09e0e347b2e78"},{"problem":26,"code":"#(take % ((fn my-fib [a b] (lazy-seq (cons a (my-fib b (+ a b))))) 1 1))","user":"5480e5a1e4b0e286459a1162"},{"problem":26,"code":"(fn fib\n   ([count]\n    (fib (- count 1) [0 1])\n    )\n   ([count acc]\n    (if (= count 0)\n      (drop 1 (apply list acc))\n      (recur\n       (- count 1)\n       (conj acc\n             (+ (last acc)\n                (first (take-last 2 acc )))\n             )\n       )\n      )\n\n    )\n   )","user":"58db48a5e4b0a4d5acaab679"},{"problem":26,"code":"#(cond\n    (= 1 %) '(1)\n    (= 2 %) '(1 1)\n    :else\n      (loop [cnt 3, fib [1 1]]\n        (if (> cnt %)\n          fib\n          (recur (inc cnt) (concat fib [(+ (last fib) (last (butlast fib)) )])) )))","user":"5e8cdc60e4b0cb0169546327"},{"problem":26,"code":"(fn fibby [n]\n  (if\n   (<= n 2)\n   '(1 1)\n   (let\n    [c (fibby (dec n))]\n    (concat\n     c\n     [(apply + (take-last 2 c))]))))","user":"57fd085ce4b0d3187e9009a9"},{"code":"#(take-nth 2 (flatten (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"5260341ee4b03e8d9a4a7034"},{"code":"; from Programming Clojure :-D\n\n#(take % \n  (map first \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4eecc3a0535d93acb0a668b3"},{"problem":26,"code":"(fn [fibnum]\n  (if (< fibnum 2)\n    (take fibnum (1 1))\n    (loop [iters-left (- fibnum 2)\n           fibnums (list 1 1)]\n      (if (= 0 iters-left )\n        (reverse fibnums)\n      (recur (- iters-left 1)\n             (cons (apply + (take 2 fibnums)) fibnums))))))","user":"5235493ee4b05e80434a5064"},{"problem":26,"code":"(fn fibo [n] (cond\n              (= n 1) [1]\n              (= n 2) [1 1]\n              :else (let [fin (fibo (- n 1))\n                          ult (peek fin)\n                          penult (peek (pop fin))]\n                      (conj fin (+ ult penult)))))","user":"541df0b5e4b01498b1a71a86"},{"problem":26,"code":"#(letfn [(f [n]\n               (cond\n                 (= 0 n) 0\n                 (= 1 n) 1\n                 :else (+ (f (dec n))\n                          (f (dec (dec n))))))]\n      (map f (range 1 (inc %))))","user":"57d93437e4b0bd073c2023f9"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [i 1 fibs [1]]\n    (if (= i n)\n      fibs\n      (recur\n       (+ i 1)\n       (conj fibs (reduce + (take-last 2 fibs)))))))","user":"5a5be4a6e4b0512ff01cd910"},{"problem":26,"code":"(fn [n]\n  (last\n (take (- n 1)\n (iterate \n  (fn [x] \n   (conj x \n    (+\n     (last x) \n     (-> x butlast last)\n     )\n    ) \n    )\n[1 1])))\n  )","user":"534ffbafe4b084c2834f4ad2"},{"code":"(fn fib [x]\n  (loop [a 1, b 1, lst [], n x]\n    (if (= 0 n)\n      (reverse lst)\n      (recur b (+ a b) (cons a lst) (- n 1)))))","problem":26,"user":"526866d1e4b03e8d9a4a71a1"},{"code":"(fn [x] \n  (take x ((fn fib [a b]\n            (cons a (lazy-seq (fib b (+ a b))))) 1 1))\n            )","problem":26,"user":"52bcf698e4b07a9af57922fe"},{"problem":26,"code":"(fn [n]\n  (cond (= 1 n) '(1)\n        (= 2 n) '(1 1)\n        :otherwise (loop [a 1 b 1 c (- n 2) r [1 1]]\n                     (if (zero? c) (seq r)\n                                   (recur b (+ a b) (dec c) (conj r (+ a b)))\n                     )\n                   )  \n  )\n)","user":"563747e9e4b0bfe05bf117d2"},{"code":"(fn [n]\n  (map first (take n \n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4fccb31be4b0ee37620e1868"},{"problem":26,"code":"(fn fibo4 [n]\n  (map (fn fibo5 [x]\n         (if (< x 3) 1\n             (+ (fibo5 (- x 1)) (fibo5 (- x 2)))))\n       (range 1 (inc n))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":26,"code":"(fn [n]\n    (loop [i 2\n           output [1 1]]\n      (if (= n i)\n        ;; return output\n        output\n        ;; loop\n        (let [x (nth output (- (count output) 1))\n              y (nth output (- (count output) 2))]\n          (recur (inc i) (conj output (+ x y)))))))","user":"5683fcafe4b0945ebc182aa8"},{"problem":26,"code":"(fn [n]\n  (loop [l []]\n    (if (= (count l) n)\n      l\n      (if (< (count l) 2)\n        (recur (conj l 1))\n        (let [c (count l)]\n          (recur (conj l (+ (nth l (- c 1)) (nth l (- c 2))))))))))","user":"560e685be4b05f002753df4e"},{"problem":26,"code":"(fn [n] (reduce (fn [memo _] (conj memo (apply + (take-last 2 memo)))) [1 1] (range 0 (- n 2))))","user":"4f0f3725535d0136e6c22337"},{"code":"(fn [n]\n  (loop [l [1 1]]\n    (if (= n (count l))\n      l\n      (recur (conj l (apply + (take-last 2 l)))\n             )\n      )\n    )\n  )","problem":26,"user":"51b6f4f9e4b04fc00976d479"},{"problem":26,"code":"#(loop [x % a [0 1]]\n  (if (< x 2)\n    (drop 1 a)\n  (recur\n    (dec x)\n    (conj a (reduce + (take-last 2 a))))))","user":"5938be98e4b02506e01a29ec"},{"problem":26,"code":"#(loop [i 1\n        results '()]\n   (if (> i %)\n     (reverse results)\n     (if (or (= i 1) (= i 2))\n       (recur (inc i) (conj results 1))\n       (recur (inc i) (conj results (+ (nth results 0)\n                                         (nth results 1)))))))","user":"55e2f502e4b050e68259b43c"},{"problem":26,"code":"#(loop [n1 1 n2 0 cnt 0 out '()]\n    (if (>= cnt %)\n      (reverse out)\n    (recur (+ n1 n2) n1 (inc cnt) (cons n1 out))))","user":"592fa9f8e4b072a2710fcfcb"},{"code":"#(take % (map first (iterate (fn [[n1 n2]] [n2 (+ n1 n2)]) [1N 1N])))","problem":26,"user":"505345d9e4b0517ede0d0a06"},{"code":"(fn fib [n] (condp = n\n  0 '(0)\n  1 '(1) \n  2 '(1 1)\n  (concat (fib (dec n)) \n    (list (+ (last (fib (dec n))) \n       (last (fib (dec (dec n)))))))))","problem":26,"user":"4f036d6e535dcb61093f6ac0"},{"problem":26,"code":"(fn [x] (take x\n    ((fn fibi [a b]\n        (cons a (lazy-seq (fibi b (+ a b))))) 1 1)))","user":"56942944e4b0dcc4269f4115"},{"code":"(fn [count]\n  (reverse (loop [acc '(1 1) c (- count 2)]\n           (if (= c 0) acc\n               (recur (conj acc (+ (first acc) (first (rest acc))))  (dec c))))))","problem":26,"user":"523e12bde4b09833704079a2"},{"code":"(fn fibo [n] (if(= n 1)  [1] \r\n                  (if(= n 2) [1 1] \r\n                    (conj (fibo (- n 1)) (+ \r\n        (last (fibo (- n 1))) (last (fibo (- n 2))))))))","problem":26,"user":"4eb885a8535dfed6da9c6d49"},{"code":"(fn fib [n]\n  ((fn inner [x] \n    (if (= (count x) n)\n\t  (reverse (into '() x))\n      (inner (conj x (+ (last x) (nth x (- (count x) 2)))))\n\t)\n  ) '[1 1])\n)","problem":26,"user":"50f4894be4b004d364930528"},{"problem":26,"code":"(fn [n] (reverse ((fn fib [s c] (if (< c 1) s    (fib (cons (+ (first s) (first (rest s))) s) (dec c))   )) '(1 1) (- n 2))))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":26,"code":"(fn [length]\n  (loop [coll [1 1], length (- length 2)]\n    (if (= length 0)\n      coll\n      (recur (conj coll (+ (last coll) (second (reverse coll))) ) (dec length)))))","user":"54a1d047e4b09f271ff37c4f"},{"problem":26,"code":"(fn [n] \n  (reverse \n   (\n    (fn [x y]\n     (if (= x 0) \n       y \n       (recur \n        (- x 1) \n        (conj y (+ (first y) (second y))) ))) \n    (- n 2) '(1 1))\n   )\n  )","user":"53c90510e4b00fb29b2212b6"},{"problem":26,"code":"(fn [n] \n  (map \n    (fn fibonacci-number [n] \n      (cond\n\t\t (= n 0) 1\n\t\t (= n 1) 1\n\t\t :else (+ (fibonacci-number (dec n)) (fibonacci-number (- n 2)))))\n    (range n)))","user":"595b00f4e4b066ee0a44afd2"},{"problem":26,"code":"#(take % ((fn rfib [a b] \n     \t\t(lazy-seq (cons a (rfib b (+ a b)))))\n   \t\t\t 1 1))","user":"542d8ba4e4b0dad94371f2b8"},{"code":"(fn [n]\n  (take n\n        ((fn fib [a b]\n           (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"52ce2aace4b07d0d72b2738b"},{"problem":26,"code":"(fn fib\n  ([n] (take n (fib 1 1)))\n  ([n-2 n-1]\n   (lazy-seq (cons n-2\n                   (fib n-1 (+ n-2 n-1))))))","user":"59b1c2eae4b0e1f4e384c8ec"},{"problem":26,"code":"(fn [nn]\n   (loop [n nn s '(1 1)]\n     (if (zero? n)\n       (take nn (reverse s))\n       (recur (dec n) (cons (reduce + (take 2 s)) s)))))","user":"54774ae8e4b0c51c1f4d72b0"},{"code":"(fn f [n] (cond (= n 1) [1] (= n 2) [1 1] :else (let [current (f (- n 1)) lst (last current) lst2 (last (butlast current))] (conj current (+ lst lst2)))))","problem":26,"user":"5162d424e4b004547eb5eaaa"},{"problem":26,"code":"(fn fibs [length-of-series]\n   (loop [fib [1 1]]\n     (if (< (count fib) length-of-series)\n       (recur (conj fib (+ (second (reverse fib)) (last fib))));;; true\n       fib)));;;false\n;;;; example with (1 1 2) \n;;; count 1 1 < 3 = true\n;;; recur ( conj [ 1 1] (+ second (reverse [1 1]) (last [1 1])))=> ( conj [ 1 1] (+ 1 1));;fib becomes [ 1 1 2]='(1 1 2)","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":26,"code":"(fn [n]\n  (loop [sq [0 1]]\n    (if (<= (count sq) n)\n      (recur (conj sq (+ (last sq) (nth sq (- (count sq) 2)))))\n      (rest sq))))","user":"57457b1ce4b009280f9f2b4c"},{"problem":26,"code":"(fn fibo [n]\n  (loop [acc []\n         num1 0\n         num2 1]\n    (if (= (count acc) n)\n      acc\n      (let [sum (+ num1 num2)]\n        (recur (if (= (count acc) 0)\n                 (conj acc 1 sum)\n                 (conj acc sum))\n               num2\n               sum)))))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"code":"#(loop [n % fib [1 1]]\n   (if (< n 3)\n     fib\n     (recur (dec n) (conj fib (+ (nth fib (- (count fib) 1)) (nth fib (- (count fib) 2)))))))","problem":26,"user":"52cdec62e4b07d0d72b27382"},{"problem":26,"code":"(fn [n]\n  (loop [fib-nums [1 1]]\n    (if (< (count fib-nums) n)\n      (recur (conj fib-nums (+ (last fib-nums) (first (rest (reverse fib-nums))))))\n      (seq fib-nums))))","user":"5ca1c45ae4b048ec896c5b85"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (= n 1)\n    [1]\n    (if (= n 2)\n      [1 1]\n  \t  (loop [n (- n 2) s [1 1]]\n        (if (= n 0)\n          s\n          (let [n1 (last s) n2 (last (butlast s))]\n            (recur (dec n) (conj s (+ n1 n2)))\n          )\n        )\n      )\n    )\n  )\n)","user":"5f6b8222e4b02876ed9fd052"},{"code":"#(loop [i %\n        first 0\n        second 1\n        xs []]\n   (if (= i 0)\n     xs\n     (recur (dec i) second (+ first second) (conj xs second))))","problem":26,"user":"5098db05e4b0cae2931060a2"},{"code":"(fn fibo\n    ([x] (fibo (- x 2) '(1 1)))\n\t  ([x l] (if (= x 0) \n      l \n      (fibo (- x 1) (concat \n        l \n        (list (apply + (take 2 (reverse l)))))))))","problem":26,"user":"4ef355e3535dced4c769f228"},{"problem":26,"code":"(fn [f] (take f (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])) ))","user":"56671996e4b04acd4f672dc9"},{"problem":26,"code":"(fn fib [x]\n  (if (= 2 x)\n    [1 1]\n    (let [p (fib (dec x))]\n      (conj p (+ (last p) (last (butlast p)))))))","user":"4f392fc8e4b0e243712b1ee7"},{"problem":26,"code":"(\n fn fib [x]\n  (if (= 1 x) \n    [1] \n    (if (= 2 x) \n      [1 1] \n      (let [next (dec x)]\n        (\n          let [fibBefore (fib next)]\n               (conj fibBefore \n                       (+  (last fibBefore) (nth fibBefore (- (count fibBefore) 2)\n             )         \n          )\n      )\n    )\n))))","user":"5aad79d9e4b073f177442578"},{"code":"(fn fibonacci [n]\n  (let [before-last (fn [c]\n                      (first (rest (reverse c))))\n        next-val (fn [c i]\n                   (conj c (+ (last c) (before-last c))))]\n    (take n (reduce next-val [1 1] (range 2 n)))))","problem":26,"user":"5160195ae4b0e2be8aa20be3"},{"code":"(fn [number]\n    (map \n        (fn fib [n]\n            (if (<= 0 n 1)\n                1\n                (+ (fib (- n 1)) (fib (- n 2)))))\n            \n        (range 0 number)))","problem":26,"user":"529ca7dae4b04e0c58e87b67"},{"problem":26,"code":"(fn [acc n] (if (zero? (- n 2)) acc (recur (conj acc (reduce + (take-last 2 acc))) (dec n)))) [1 1]","user":"5b5f2566e4b0c6492753e6e9"},{"problem":26,"code":"(fn [n] (map (fn fib [i]\n               (if (<= i 1) 1 (+ (fib (- i 1)) (fib (- i 2)))))\n             (range n)))","user":"56ac81ace4b03c432f187347"},{"problem":26,"code":"(fn [fibNum] (loop [x (+ fibNum 1) y [0, 1]] (if (<= x (count y)) (into '() (reverse (subvec (vec y) 1 x)) ) (recur x (concat y [(+ (nth y (- (count y) 2)) (last y))])) )))","user":"60904332e4b03bd49d9f36ca"},{"problem":26,"code":"{3 `(1 1 2) 6 `( 1 1 2 3 5 8) 8 `(1 1 2 3 5 8 13 21)}","user":"558eebf9e4b027778923765b"},{"problem":26,"code":"#(map (fn f[x] (if (< x 2) 1 (+ (f (- x 1)) (f (- x 2))))) (range %))","user":"5373451fe4b06d7f452d9e0b"},{"problem":26,"code":"(fn fib\n  ([n] (cond \n           (= n 1) [1]\n           (= n 2) [1 1] \n           :else (let [prev (fib (dec n))]\n                   (conj prev (+ (last prev) (nth prev (- (count prev) 2))))\n                   ))))","user":"57ffe094e4b0a837a8b30c2c"},{"problem":26,"code":"(fn [remaining] \n  (loop [a 0 \n         b 1\n         result []\n         x remaining]\n    (if (zero? x)\n      result\n      (recur b \n             (+ a b) \n             (conj result b) \n             (dec x)))))","user":"55c216dde4b0e31453f64974"},{"problem":26,"code":"(fn fib [x]\n  (if (= x 2)\n    (list 1 1)\n    (concat \n     (fib (- x 1)) \n     (list (+ \n            (last (fib (- x 1))) \n            (first (rest (reverse (fib (- x 1)))))\n           )\n     )\n    )\n  )\n)","user":"56ea8b75e4b04a395b9a0409"},{"problem":26,"code":"(fn fib [x] \n       (if (= x 1)\n         [1]\n         (let [y (fib (dec x))]\n             (let [z (take-last 2 y)]\n               (let [k (if (= (count z) 1)\n                          (first z)\n                          (+ (first z) (last z)))]\n               (conj y k))))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":26,"code":"#(loop [cnt %\n        fibs '(1 1)]\n   (cond\n    (= 0 cnt) nil\n    (= 1 cnt) '(1)\n    (= 2 cnt) (reverse fibs)\n   \t:else (recur (dec cnt) (cons (+ (first fibs) (second fibs)) fibs))\n   ))","user":"5974b12be4b01722bebd4cb1"},{"problem":26,"code":"#(loop [prev 0 acc [1] i %1] (if (= i 1) acc (recur (last acc) (conj acc (+ prev (last acc))) (dec i))))","user":"578b140be4b0ebec4cfb7545"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= n 0) '()\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [last-fib (reverse (fib (dec n)))]\n     (reverse (conj last-fib (+ (first last-fib) (second last-fib)))))))","user":"57ef7f0ee4b0bfb2137f5bd9"},{"problem":26,"code":"(fn [n] (take n (map peek (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"5935b010e4b04f87174def55"},{"problem":26,"code":"(fn fib [n]\n  (letfn [(-fib [a b]\n             (lazy-seq (cons a (-fib b (+ a b)))))]\n    (take n (-fib 1 1))))","user":"5d11618de4b02c15ef021985"},{"problem":26,"code":"#(take % (map \n\t\n\t(fn fibo [n]\n     (if (<= n 1) n\n      (+ (fibo (- n 1)) (fibo (- n 2)))\n     ) \t  \n\t  \n    )\n\t\n\t\n\t(range 1 10)))","user":"5faca2e4e4b08cb800c85ae8"},{"code":"#((fn [n f n0 n1] (if (zero? n) f (recur (- n 1) (conj f n1) n1 (+ n0 n1)))) % [] 0 1)","problem":26,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":26,"code":"(fn [n]\n  (take n \n    (map first \n         (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"50c6052ce4b0c9dc10d15c56"},{"code":"#((fn [fbs n] (if (= n 0) fbs (recur (conj fbs (reduce + 0 (take-last 2 fbs))) (- n 1)))) \n[1 1] (- % 2))","problem":26,"user":"4f51e8a4e4b03ad3f0c10d2d"},{"code":"(fn  [n]\n  ((fn [p0 p1 Acc]\n    (let [sum (+ p0 p1)]\n      (if (< (count Acc) n)\n        (recur sum p0 (conj Acc sum))\n        Acc\n    ))\n  ) 0 1 [])\n  )","problem":26,"user":"50a173e4e4b08df8156e9e68"},{"problem":26,"code":"(fn [x]\n  (loop [n 2 r [1 1]]\n    (if (= n x)\n      (reverse (into () r))\n      (recur (inc n)(conj r (reduce + (take-last 2 r)))))))","user":"550111d3e4b07d26eda61d6f"},{"problem":26,"code":"; def fib(n)\n;   return 1 if n < 3\n;   return fib(n - 2) + fib(n - 1)\n; end\n; \n; range(n).map{|i| fib(i+1)}\n\n\n; #(take % ...all fib numbers...)\n\n; (fn fibo\n;   ([] (fib 1 1))\n;   ([a b] (+ a b)))\n\n; #(nth (iterate (fn [f] (conj f (+ (last f) (->> f (take-last 2) first)))) [1 1]) (- % 2))\n\n#_#(take % ((fn fib\n            ([] (fib 1 1))\n            ([n2 n1]\n             (lazy-seq (cons n2 (fib n1 (+ n1 n2))))))))\n\n; #(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n(letfn [(cons-fib [ns] (cons (+ (first ns) (second ns)) ns))\n        (bif [n] (if (< n 3) '(1 1) (cons-fib (bif (dec n)))))\n        (fib [n] (reverse (bif n)))]\n  fib)","user":"59ad2fcee4b00adcf69795de"},{"problem":26,"code":"(fn fib [x]\n  (loop [a 0 b 1 xp x r []]\n    (if (zero? xp)\n      r\n      (recur b (+ a b) (dec xp) (conj r b)))))","user":"5fa5b72ee4b0fa27300f3dca"},{"problem":26,"code":"#(nth (iterate (fn [x] (conj x (reduce + (take-last 2 x)))) '[1 1]) (- % 2))","user":"5254b45fe4b0541d1855b9a0"},{"problem":26,"code":"(let [fib (fn [[a b]] [b (+ a b)])]\n  #(take % (map last (iterate fib [0 1]))))","user":"5d929ceae4b0915913b1d412"},{"problem":26,"code":"#(take %\n  ((fn fib-seq [i j]\n    (cons i \n     (lazy-seq\n      (fib-seq j (+ i j)) )))\n  1 1)\n )","user":"58acce0ae4b0005cfeb1a754"},{"problem":26,"code":"(fn fib [n]\n  (loop \n    [a 1 b 1 i 0 fibs []]\n  \t(if (>= i n)\n      (reverse (into () fibs))\n      (recur\n       b\n       (+ a b)\n       (+ i 1)\n       (conj fibs a)\n       )\n      )\n    )\n  )","user":"5907a736e4b047aa04b1995e"},{"code":"(fn fib [n]\n  (let [fibn (fn fibn [n]\n               (if (< n 3)\n                 1\n                 (+ (fibn (- n 1)) (fibn (- n 2)))))]\n    (if (= n 1)\n      '(1)\n      (concat (fib (dec n)) (list (fibn n)))\n      )))","problem":26,"user":"536e6fe2e4b0fc7073fd6e6f"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 acc [1 1] n n]\n    (if (= n 2)\n      acc\n      (recur b (+ a b) (conj acc (+ a b)) (- n 1)))))","user":"60065677e4b074f607df6651"},{"problem":26,"code":"(fn fibs [n]\n  (letfn [(fib-iter [[a b]] [b, (+ a b)])]\n    (take n (map first (iterate fib-iter [1 1])))))","user":"5719465fe4b07c98581c3b36"},{"problem":26,"code":"(fn fib [x] (loop [i 0 r []]\n                   (if (= i x)\n                     r\n                     (if (< i 2)\n                       (recur (inc i) (conj r 1))\n                       (recur (inc i) (conj r (+ (nth r (- i 2)) (last r))))))))","user":"550e0373e4b06e50f9beb162"},{"problem":26,"code":"(fn f[n] ( reverse ((fn fib[n] (if (<= n 2) '(1 1) (let [[x y & q] (fib (- n 1))] (let [z (+ x y)] (concat (list z x y) q)) )) ) n ) ))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [n]\n    (take n\n        (map second\n            (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"50996376e4b0cae2931060b2"},{"problem":26,"code":"(fn [n]\n  (let [impl (fn [i v1 v2 r]\n               (if (= i 1)\n                 r\n                 (recur (- i 1) v2 (+ v1 v2) (conj r v2))))]\n               (impl n 1 1 [1])))","user":"5c50048ae4b0f9f7a8770eb9"},{"code":"(fn fib[x]\n  (take x ((fn prod\n    ([] (prod 1 1))\n    ([a b] (cons a (lazy-seq b (prod b (+ a b))))\n)) )))","problem":26,"user":"5065bd94e4b0148eb3925aed"},{"problem":26,"code":"(fn fib [n]\n (loop [nums [1 1]]\n   (if (< (count nums) n)\n     (recur (conj nums (apply + (take 2 (reverse nums)))))\n     nums)))","user":"536d24ece4b0fc7073fd6e54"},{"code":"(fn [n] (\n         loop [i 0 a 1 b 1 s (seq ())]\n         (if (= i n) (reverse s)\n          \t (recur (+ i 1) b (+ a b) (cons a s)))\n        \n         ))","problem":26,"user":"511a0374e4b06c8af011181a"},{"code":"#(take %\n  (map first\n    (iterate\n      (fn [[a b]]\n        [b (+ a b)])\n[1 1])))","problem":26,"user":"50521b1fe4b0a561d07d8f14"},{"problem":26,"code":"(fn [n] (if (= n 0) '()\n          (if (= n 1) '(1)\n            (loop [v n lst '(1 1)]\n              (if (= v 2) (reverse lst)\n                (recur (- v 1) (conj lst (+ (first lst) (second lst)))))))))","user":"54908cc1e4b0b312c081ff32"},{"code":"#(rest (reverse (reduce (fn [[a b & c :as d] _] (conj d (+ a b))) '(1 0) (range (dec %)))))","problem":26,"user":"4f0664bd535dcb61093f6c0f"},{"problem":26,"code":"#( rest(map first (take ( inc %) (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"55ec879ae4b0121d4835fdc8"},{"problem":26,"code":"#((fn [seq x] (if (zero? (- x 2)) (reverse seq) (recur (conj seq (+ (first seq) (second seq))) (dec x)))) '(1 1) %1 )","user":"5cf72682e4b0b71b1d808a68"},{"problem":26,"code":"(fn [x] (loop [in (repeat (- x 2) 1) out [1 1]]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (conj out (+ (last out) (first (take-last 2 out))))\n    )\n  )\n))","user":"5784ec65e4b0ebec4cfb74d1"},{"problem":26,"code":"(fn [n] \n  (loop [a 1 b 1 res [1 1]] \n    (if (= (count res) n) \n      res \n      (let [c (+ a b)] \n        (recur b c\n                (conj res c))))))","user":"5c35acffe4b0d62ef62d9f62"},{"problem":26,"code":"(fn [n]\n  (loop [x   1\n         y   1\n         xs  [x y]]\n    (if (<= n (count xs))\n      xs\n      (recur y (+ x y) (conj xs (+ x y))))))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn fib-coll [n]\n  (let [fib (fn myfib [n]\n              (if (<= n 2)\n                1\n                (+ (myfib (- n 1)) (myfib (- n 2)))))]\n    (map fib (range 1 (+ n 1)))))","problem":26,"user":"4ea0c105535d7eef308072ac"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 left '()]\n    (if (= i n)\n      left\n      (recur (+ i 1) (concat left (list \n                        (if (or (= i 0) (= i 1))\n                          1\n                          (apply + (take-last 2 left)))))))))","user":"5cafaa0fe4b026601754b89e"},{"problem":26,"code":"(fn fibonacci1 [n]\n  {:pre [(> 1000 n 0)]}\n    (cond\n     (= n 1) [1]\n     (= n 2) [1 1]\n     :else\n       (let [f-1 (fibonacci1 (- n 1))\n             n-2 (last (butlast f-1))\n             n-1 (last f-1)]\n         (conj f-1 (+ n-2 n-1)))))","user":"54100c73e4b01498b1a7199e"},{"problem":26,"code":"#(mapcat (fn[x] (take 1 x)) (take % (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5cc6f982e4b0ccb06196282d"},{"code":"#(take % ((fn fib [x y] \n            (cons x \n                  (lazy-seq \n                     (fib y (+ x y))))) 1 1))","problem":26,"user":"50e1bdd8e4b019fc399ce17f"},{"problem":26,"code":"#(loop [c %\n         acc '()\n         l 0\n         n 1]\n    (if (= c 0)\n      (reverse acc)\n      (recur (dec c) (conj acc n) n (+ l n))))","user":"5d29c06be4b01671435dbc6b"},{"problem":26,"code":"(fn fib-seq [n]\n  (let [fib (fn inner [n]\n        (cond\n          (= n 1) 1\n          (= n 2) 1\n          :else\n          (+ (inner (- n 1)) (inner (- n 2)))))]\n    (if (= n 0)\n      []\n      (conj (fib-seq (- n 1)) (fib n)))))","user":"55fb5b89e4b0f488688e0662"},{"problem":26,"code":"(fn [x] (loop [fibseq [1 1] cntr 2] (if (<= x cntr) (take x fibseq) (recur (conj fibseq (reduce + (take-last 2 fibseq))) (inc cntr)))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [n]\n  (let [fib (fn [lst] (cons (+ (first lst) (second lst))\n                            lst))]\n    (-> (iterate fib [1 1])\n        (nth (- n 2))\n        reverse)))","problem":26,"user":"4f2cdd42e4b0d6649770a055"},{"problem":26,"code":"(fn fib [n]\n  (cond (= n 0) [0]\n        (= n 1) [1]\n        :else (conj (fib (dec n))\n                    (+ (last (fib (dec n))) (last (fib (- n 2)))))))","user":"543d07e8e4b032a45b869346"},{"code":"(fn fib [n]\n  (reduce\n   (fn [a b]\n     (conj a \n           (cond\n             (>= (count a) 2) (apply + (take-last 2 a))\n             :else 1)))\n   [] (range n)))","problem":26,"user":"4f31519ae4b0d6649770a086"},{"code":"#(take %\r\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"509160dae4b0742c82730aef"},{"code":"(fn fib\n  ([n] (fib n '(1 1)))\n  ([n l] (if (= 2 n)\n           (reverse l)\n           (recur (- n 1)\n                  (cons (+ (first l) (second l)) l)))))","problem":26,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"#(take %1\n  ((fn fibi [a b] (lazy-seq (cons a (fibi b (+ a b)))))\n  1 1))","problem":26,"user":"501fed56e4b0cb6ebc0a42f0"},{"code":"(fn [n]\r\n  (take n \r\n    (map first\r\n      (iterate\r\n        (fn[[x y]] [y (+ x y)]) [1 1]))))","problem":26,"user":"4ddee37c535d08e6dec9fddc"},{"problem":26,"code":"#(loop [accum [1 1]\n       i 2]\n  (if (= i %)\n    accum\n    (recur (conj accum (+ (last accum) (nth accum (- (count accum) 2))))\n           (inc i))))","user":"584b6a2be4b089d5ab817efd"},{"problem":26,"code":"(fn [n]\n  (reverse \n   (loop [ls '()]\n    (if (= n (count ls))\n      ls\n      (recur \n       (case (count ls)\n         0 '(1)\n         1 '(1 1)\n         (conj ls (+ (first ls) (second ls)))))))))","user":"58b997afe4b0888cdc949cd1"},{"problem":26,"code":"(fn [b] (map \n\t   (fn fib [x] (if (or (= x 1) (= x 2)) \n                        1 \n                        (+ (fib (- x 1)) (fib (- x 2))))) \n         (range 1 (+ 1 b))))","user":"589c7c8ce4b00487982d5361"},{"problem":26,"code":"#(take % (map first(iterate(fn [[a,b]] [b,(+ b a)]) [1,1])))","user":"5b337ff4e4b025bcb146f339"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 1 counter n fibos [1 1]]\n        (if (= counter 2)\n          (seq fibos)\n          (recur b (+ a b) (- counter 1) (conj fibos (+ a b))))))","user":"54aede47e4b09f271ff37cfd"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a,b]] [b, (+ a b)]) [1 1] )))","user":"60689984e4b069485764dde6"},{"problem":26,"code":"#(reverse \n  (loop [n % fibs [1 1]]\n   (if (= n 2)\n     fibs\n     (recur\n      (dec n)\n      (cons \n       (+ (first fibs) (second fibs)) \n       fibs)))))","user":"5e471203e4b043cd24807a2a"},{"code":"#(loop [x   %1\n        fib []\n        n   1\n        m   1]\n   (cond\n    (= x 0) fib\n    :else   (recur (- x 1) (conj fib n) m (+ n m))))","problem":26,"user":"52fc89b2e4b047fd55837019"},{"problem":26,"code":"#(loop [coll [1] i 1 n (dec %)] (if (zero? n) coll (recur (conj  coll i) (+ i (last coll)) (dec n))))","user":"57f9e0bce4b0d3187e900956"},{"problem":26,"code":"(fn f [x]\n  (if (= x 1)\n    '(1)\n  (if (= x 2)\n    '(1 1)\n    (reverse\n      (#(conj % (+ (first %) (first (rest %))))\n       (reverse (f (- x 1))))\n    ))\n  )\n)","user":"5bf8b5a5e4b0bdcf453d15bb"},{"problem":26,"code":"#(letfn [( fib [a b]\n              (cons a\n                    (lazy-seq (fib b (+ a b)))) )]\n  (take % (fib 1 1))\n )","user":"54df955ee4b024c67c0cf7af"},{"code":"(fn calc-fibnacci-seq [x]\n\n  (map   (fn fibonacci [x]\n    (if (or (= 0 x) (= 1 x))\n      (if (= 0 x)\n        0\n        1)\n     (+ (fibonacci (dec x)) (fibonacci (dec (dec x)))) \n    )\n  ) (range 1 (inc x)) )\n)","problem":26,"user":"51215927e4b05ae5a5823c10"},{"problem":26,"code":"#(map (fn fib [x] (if (or (= x 0) (= x 1)) 1 (+ (fib (dec (dec x))) (fib (dec x))))) (range %))","user":"55ee894de4b0121d4835fdf1"},{"problem":26,"code":"(fn [x] \n  (case x\n    1 [1]\n    2 [1 1]\n    (loop [a x n [1 1]]\n      (if (= a 2)\n         n\n         (recur (dec a) (conj n (+ (last n) (last (drop-last n)))))))))","user":"53eade35e4b036ad0777e4ec"},{"code":"(fn fibo_\n  ([n] (fibo_ (dec n) '(0 1)))\n  ([n x]\n    (if\n      (== 0 n)\n      (rest x)\n      (fibo_ \n        (dec n)\n        (concat x\n          (list\n            (+\n              (last x)\n              (last (butlast x)))))))))","problem":26,"user":"4fa5406fe4b081705acca1ac"},{"problem":26,"code":"#(take % (map first (iterate (fn [[ x y]] [y (+ x y)]) [1 1])))","user":"5c0e22cae4b01240ff56713b"},{"problem":26,"code":"(fn f [n] \n\t(if (= n 1)\n\t\t'(1)\n\t\t(if (= n 2)\n\t\t\t'(1 1)\n\t\t\t(concat \n\t\t\t\t(f (dec n))\n\t\t\t\t[(+\n\t\t\t\t\t(nth (f (dec n)) (- n 2) )\n\t\t\t\t\t(nth (f (dec n)) (- n 3))\n\t\t\t\t)]\n\t\t\t)\n\t\t)\n\t)\n)","user":"5693cc39e4b0dcc4269f4108"},{"code":";(fn [x] (let [a 0 b 1] fib [a b])) \n ; (defn fib [a b] (println b) fib( b (+ a b)))\n \n (fn [x] (take x ((fn fibbo [a b] (cons a (lazy-seq (fibbo b (+ a b))))) 1 1)))","problem":26,"user":"52a28e1ce4b04e0c58e87bf0"},{"problem":26,"code":"(fn [x]\n  (loop [n 2 s [1 1]]\n    (if (= n x) s\n        (recur\n         (inc n)\n         (conj s\n               (+ (nth s (dec (count s)))\n                  (nth s (- (count s) 2))))))))","user":"5e9364f0e4b0fbed045a37f4"},{"problem":26,"code":"(fn [n]\n    (cond\n        (zero? n) '(0)\n        (= n 1) '(1)\n        :else\n        (loop [k 1, acc 0, curr 1, res '()]\n            (if (= k (inc n))\n               res\n               (recur (inc k) curr (+ curr acc) (concat res (list curr)))))))","user":"5a640a37e4b0512ff01cd9a2"},{"problem":26,"code":"(fn [y] (map \n         (fn fib [x] (if (<= x 1) x (+ (fib (- x 1)) (fib (- x 2)))))\n           (range 1 (+ y 1))\n           ))","user":"5eaba9c0e4b00a66d4a951d6"},{"problem":26,"code":"#(reverse (loop [n %\n       last 0\n       curr 1\n       answ ()]\n   (if (zero? n)\n     answ\n     (recur (dec n) curr (+ last curr) (cons curr answ)))))","user":"597768d0e4b01722bebd4cee"},{"problem":26,"code":"#(loop [n 1 fib '(1 1)]\n    (if (= n %)\n        (reverse (rest fib))\n        (recur (inc n) \n            (conj fib \n                (+ (first fib) (second fib))))))","user":"548392fce4b0e286459a1191"},{"problem":26,"code":"#(take % (map first(iterate (fn [[i1 i2]][i2 (+ i1 i2)])[1 1])))","user":"562326cbe4b03f08ee9a9230"},{"problem":26,"code":"(fn [x]\n  (loop [sequ [1 1]\n         x (- x 2)\n         llastN 1\n         lastN 1]\n    (if (<= x 0)\n      sequ\n      (recur (conj sequ (+ lastN llastN))\n             (dec x)\n             (+ lastN llastN)\n             (last sequ))\n    )\n  )\n)","user":"56195e57e4b053970a773af6"},{"problem":26,"code":"#(nth (iterate\n (fn [l]\n  (let [rl (reverse l)]\n    (reverse (conj rl (+ (first rl) (second rl))))))\n '(1 1)) (- % 2))","user":"589f4387e4b02bd94d917e7b"},{"problem":26,"code":"(fn nth-fib [n]\n  (cond (= n 1) [1]\n        (= n 2) [1 1]\n        (> n 2) (let [previous-fibs (nth-fib (- n 1))]\n                     (conj previous-fibs\n                           (+ (last previous-fibs)\n                              (first (rest (reverse previous-fibs))))))\n        :else []))","user":"591addcee4b09b4ee5954be1"},{"problem":26,"code":"#(loop [i %\n        fib '(1 1)]\n   (if (= i 2)\n     (reverse fib)\n     (recur (dec i) (conj fib (+ (first fib) (second fib))))))","user":"559622cee4b0c79f6e1db975"},{"problem":26,"code":"#(reduce (fn [m i] (conj m (reduce + (take-last 2 m) ))) \n\t\t[1] \n\t\t(range (- % 1)))","user":"5587d8b3e4b059ccff29b1e8"},{"code":"(fn fib [n]\n         (loop [result [1 1] i 3]\n             (if (<= i n) (recur (cons (+ (first result) (second result)) result) (inc i))\n                          (reverse result))))","problem":26,"user":"4eed6b32535d93acb0a668bc"},{"problem":26,"code":"(fn [num]\n    (letfn [(fib [n]\n              (condp = n\n                0 1\n                1 1\n                (+ (fib (dec n)) (fib (- n 2)))))]\n      (map fib (range num))))","user":"5a00cb31e4b01bb0ae8afd36"},{"code":"(fn [length]\n  (loop [result '(1)\n         num1 1\n         num2 0\n         count length]\n    (if (= count 1)\n      (reverse result)\n      (recur (conj result (+ num1 num2)) (+ num1 num2) num1 (dec count)))))","problem":26,"user":"4f5c78e5e4b0030a34fb2b25"},{"problem":26,"code":"#(take % ((fn generator [a b] (lazy-seq (cons a (generator b (+ a b))))) 1 1))","user":"543f854fe4b032a45b86935b"},{"code":"(fn [n]\n  (loop [ct 0 acc []]\n    (cond\n      (= ct 0) (recur (inc ct) (conj acc 1))\n      (= ct 1) (recur (inc ct) (conj acc 1))\n      (= ct n) acc\n      :else (recur \n              (inc ct) \n              (conj acc (+ (last (butlast acc)) (last acc)))))))","problem":26,"user":"5177f89ae4b0f89a8f53839a"},{"problem":26,"code":"#(take % (letfn [(fib [x y] (cons x (lazy-seq (fib y (+ x y)))))] (fib 1 1)))","user":"4f8be895e4b02e764a0a5184"},{"problem":26,"code":"(fn fib \n    ([n]\n    (fib [1 1] n))\n    ([x, n] \n    (cond                      \n        (= (count x) n) x\n        :else (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n)\n    )))","user":"561a4c60e4b053970a773b06"},{"problem":26,"code":"(fn n-fib [n]\n  (loop [iter 1\n         l []]\n    (if (<= iter n)\n      (recur (inc iter)\n             (conj l ((fn fib [x]\n                        (if (<= x 1)\n                          x\n                          (+ (fib (dec x)) (fib (- x 2)))))\n                      iter))) ;; calls the function\n      l))) ;; return the list","user":"55845fb6e4b04192f3441eed"},{"code":"#(loop [limit %, start 2, st '(1 1)]\n    (cond \n      (= limit 0) '()\n      (= limit 1) '(1) \n      (= limit 2) '(1 1) \n      (= limit start) st \n      :else (recur limit (inc start) (concat st [(reduce + (take 2 (reverse st)))]))\n      )\n  )","problem":26,"user":"5229211be4b04c906c9c6a63"},{"code":"#(take  % ((fn f [n m] (lazy-seq (cons n (f m (+ m n)) ))) 1 1))","problem":26,"user":"5007c7c7e4b0b17c647f5226"},{"problem":26,"code":"(fn [x] (\n  loop [coll (range x)\n        prev 0\n        act  1\n        res '()]\n        (if (empty? coll) \n            (reverse res)\n            (recur (rest coll) act (+ prev act) (conj res act)))))","user":"55bb6a19e4b01b9910ae29e5"},{"problem":26,"code":"(fn fn26P1 [n] \n  (cond      \n      (= 0 n) '()\n      (= 1 n) '(1)\n      :else (loop [result [1 1]]\n               (if (= n (count result)) (seq result)\n                   (recur (conj result (->> result (partition 2 1) (last) (reduce +))))))))","user":"5e42ba49e4b01d43a70e8e6c"},{"code":"(fn [n]\n   (reverse\n     (loop [cnt n acc '(1 1)]\n        (if (= 2 cnt)\n             acc\n           (recur (dec cnt) (cons (+ (first acc) (second acc)) acc))))))","problem":26,"user":"527675cbe4b03e8d9a4a74e2"},{"problem":26,"code":"(fn fib [n]\n  (if (<= n 2)\n    (if (<= n 0)\n      '()\n      (nth '((1) (1 1)) (dec n)))\n    (concat (fib (- n 1))\n            (list (+ (last (fib (- n 2)))\n                     (last (fib (- n 1))))))))","user":"55e4487ce4b050e68259b44c"},{"problem":26,"code":"#(loop [n % a 0 b 1 r []]\n   (if (= 0 n)\n     r\n     (recur (dec n) b (+ a b) (conj r b))))","user":"58cfbd7ae4b03c36ff7e58ba"},{"problem":26,"code":"#(loop [acc [] cnt %] \n   (if (zero? cnt) \n     acc \n     (recur (conj acc (if (> 2 (count acc)) \n                        1 \n                        (reduce + (take 2 (reverse acc))))) \n            (dec cnt))))","user":"5af61443e4b0cc2b61a3bcb1"},{"code":"(fn [n]\n  (case n\n    (1) '(1)\n    (2) '(1 1)\n    (reverse\n      (loop [n (- n 2)\n             sq '(1 1)]\n        (if (= n 0) \n          sq\n          (recur (- n 1) (cons (+ (first sq) (first (rest sq))) sq)))))))","problem":26,"user":"527cd633e4b0757a1b17136f"},{"problem":26,"code":"(fn [ingreso]\n\t(reverse (loop [counter 2  lastfibo '(1 1)]\n\t\t(if (= counter ingreso)\n\t\t\tlastfibo\n\t\t\t(recur (inc counter) \n\t\t\t\t\t\t\t(conj lastfibo \n\t\t\t\t\t\t\t\t\t\t\t(+ (first lastfibo) \n\t\t\t\t\t\t\t\t\t\t\t\t\t(nth lastfibo 1))))))))","user":"5bc64843e4b07a9b28b10091"},{"code":"#( \n (fn fibb [acc n]\n    (if\n      (= n 0)\n      (reverse acc)\n      (fibb (conj\n            acc\n            (if\n              (< (count acc) 2)\n              1\n              (+ (first acc) (second acc))\n              )\n            )\n           (- n 1)\n           )\n      ))\n'() %)","problem":26,"user":"515f8a0de4b0e2be8aa20bce"},{"problem":26,"code":"#(take %\n  (map first \n       (iterate \n        (fn [[a b]] \n          (vector b (+ a b))) [1 1])))","user":"53aebc94e4b047364c044478"},{"problem":26,"code":"#(map (fn fib\n        [n]\n        (if (< n 2)\n          1\n          (+ (fib (dec n)) (fib (dec (dec n))))))\n      (range 0 %))","user":"5ae429fae4b0837691e92c79"},{"code":"(fn [x] (map first \n  (take x (iterate (fn [[a b]] (list b (+ a b))) [1 1]))))","problem":26,"user":"4fd0cb0ee4b04c3a95aa0407"},{"code":"#(loop [fib [1,1] num %] (if (>= (count fib) num) fib (recur (conj fib (apply + (take-last 2 fib))) num ) ) )","problem":26,"user":"4fea2de5e4b0140c20fb9bfe"},{"problem":26,"code":"(fn my-fib\n  ([x] (my-fib (dec x) '(1)))\n  ([x s]\n   (if (= 0 x)\n     (reverse s)\n     (if (= 1 (count s))\n       (recur (dec x) (conj s 1))\n       (recur (dec x) (conj s (+ (first s) (second s))))))))","user":"5b3a60c7e4b02d533a91bbc5"},{"problem":26,"code":"#(loop [x (- % 2)\n        prev 1\n        fib [1]]\n   (if (zero? x)\n     (conj fib prev)\n     (recur (dec x) (+ prev (peek fib)) (conj fib prev))))","user":"5f5b9529e4b02876ed9fcfda"},{"problem":26,"code":"(fn [n] (loop [s [1 1]] (if (= (count s) n) s (recur (conj s (reduce + 0 (take 2 (reverse s))))))))","user":"55f1d5dfe4b06e875b46ce38"},{"code":"(fn [n]\r\n    \t(cond (= n 3) '(1 1 2)\r\n\t      (= n 6) '(1 1 2 3 5 8)\r\n\t      (= n 8) '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4e821ca5535db62dc21a62c2"},{"problem":26,"code":"#(take % ((fn fib [a b]\n             (lazy-seq (cons a (fib b (+ a b)))))\n            1N 1N))\n\n; Another solution, creates a list of fibonacci series.\n;(fn [n]\n;    (let [fib (fn [v]\n;                (let [n (count v)]\n;                  (conj v (+ (get v (- n 1)) (get v (- n 2))))))]\n;      (take n (last (take n (iterate fib [1 1]))))))","user":"589e22fae4b02bd94d917e56"},{"code":"(fn [x] ((fn fib [z p y] (if (> y 0) (conj (fib p (+ p z) (dec y)) z))) 1 1 x))","problem":26,"user":"515a46d3e4b0394f658fe23f"},{"problem":26,"code":"#(reverse ((fn fib [n]\n                       (if (< n 3)\n                         (take n (repeat 1))\n                         (let [fibn1 (fib (- n 1))]\n                           (cons (+ (first fibn1) (first (rest fibn1))) fibn1)\n                           )\n\n                         )\n                       ) %))","user":"5fc241c1e4b0edf42a5593d1"},{"problem":26,"code":"#(loop [ens [] cnt 0 f2 1 f1 1]\n   (if (= cnt %)\n     (reverse (into () ens))\n     (recur (conj ens f1) (inc cnt) (+ f1 f2) f2) \n   )\n)","user":"55acb648e4b03311e7b73296"},{"code":"(fn fibo [n]\n  (if (< n 1) '()\n  (if (= n 1) '(1)\n  (if (= n 2) '(1 1)\n    (reverse\n      (\n         #(loop [lst '(1 1) , i 2]\n            (\n               if (= n i) lst\n                 (recur (conj lst (+ (first lst) (second lst))) (inc i) )\n             )\n           )\n       )\n     )\n)))\n)","problem":26,"user":"51c0bfdbe4b0c9c82288293f"},{"problem":26,"code":"(\n fn[x] (\n        loop[a 2 arr [1 1]] (if (= a x) arr (recur (inc a) (conj arr (+ (last (butlast arr)) (last arr) ))))\n       )\n)","user":"53ad28ede4b047364c044462"},{"code":"(fn fib [x] (cond \n             (<= x 1) [1]\n             (= x 2) [1 1]\n             :else (let [v (fib (dec x)) r (vec (reverse v))] (conj v (+ (first r) (second r))))\n             \n             ))","problem":26,"user":"52bef782e4b07a9af5792327"},{"code":"(fn [n]\n    (take n\n      ((fn lazy-fib [a b]\n        (cons a\n          (lazy-seq\n            (lazy-fib b (+ a b)))))\n      1 1)))","problem":26,"user":"4e8e8c24535d65386fec2143"},{"problem":26,"code":"(fn [n]\n(loop [f1 1\n       f2 1\n       i 1\n       ls []]\n  (if (> i n)\n    ls\n    (recur f2 (+ f1 f2) (inc i) (conj ls f1)))))","user":"53d87449e4b0e771c302546d"},{"problem":26,"code":"#(take % ((fn fibo\n   ([] (fibo 1 1))\n   ([p n] (cons p (lazy-seq (fibo n (+ p n))))))))","user":"554b7056e4b0a04f79299583"},{"problem":26,"code":"(fn [x] (map\n  (fn fib [n]\n    (if (or (= n 1)\n            (= n 2))\n      (+ 1)\n      (+ (fib (- n 2))\n         (fib (- n 1)))\n     )\n   ) (range 1 (+ x 1)))\n )","user":"5bff87fbe4b0bdcf453d162c"},{"code":"(fn [n]\n  (letfn [\n    (iter [xs c]\n      (cond\n        (> c n) xs\n        (= c 0) (recur [] 1)\n        (= c 1) (recur [1] 2)\n        (= c 2) (recur [1 1] 3)\n        :else   (recur (conj xs (+ (last xs)\n                                   (last (butlast xs))))\n                       (inc c))))]\n    (iter [] 0)))","problem":26,"user":"4f8345c6e4b033992c121c1b"},{"problem":26,"code":"(fn\n  [n]\n  (take n \n        (map first \n             (iterate \n               (fn [[a b]] [b (+ a b)]) \n               [1 1]))))","user":"5484143de4b0e286459a1197"},{"code":"(fn[x] (take x ((fn fib[a b](cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"52e614b8e4b09f7907dd1469"},{"problem":26,"code":"(fn\n  fibo\n  [x]\n  (loop [res '(1 1)\n         cnt (- x 2)]\n    (if (zero? cnt)\n      (reverse res)\n      (recur (conj res (+ (first res) (second res))) (dec cnt)))))","user":"5c73bcf9e4b0fca0c16227bb"},{"problem":26,"code":"#(map (fn fib [n]\n  (if (<= n 1) \n    1\n    (+ (fib (- n 2)) (fib (- n 1))))) (range %))","user":"550babf3e4b06e50f9beb149"},{"problem":26,"code":"(fn [n] \n  (reverse\n   (loop [c n result [1 1]]\n     (if (= c 2 ) \n       result\n       (recur (dec c) \n              (into [(+  (first result) (second result))] result)))))\n)","user":"522724bde4b04e78ff2e19aa"},{"problem":26,"code":"(fn fibo\n  ([n] (fibo [1 1] 1 1 (- n 2)))\n  ([l n m t]\n      (if (= t 0)\n        (apply list l)\n        (fibo\n         (conj l (+ n m))\n         m\n         (+ n m)\n         (dec t)))))","user":"57f291a8e4b0511f1d294df0"},{"problem":26,"code":"(fn [x] (loop [y 0\n                 z 1\n                 result []]\n             (println (str \"y:\" y \"||z: \" z))\n            (if (= (count result) x)\n              result\n              (recur z (+ y z) (conj result z)))))","user":"5ff82adae4b06df49cee14a4"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [m 0\n         f1 0\n         f2 1\n         acc []]\n    (if (< m n)\n      (recur (inc m)\n             f2\n             (+ f1 f2)\n             (conj acc f2))\n      acc)))","user":"58582dade4b0f14aab7c8713"},{"problem":26,"code":"(fn [n] \n  (take n \n        ((fn fibbi [a b]\n           (cons a \n                 (lazy-seq (fibbi b (+' a b))))) 1 1)))","user":"54961073e4b0b312c081ff62"},{"problem":26,"code":"#(loop [n 2\n        acc0 1\n        acc1 1\n        result [1 1]]\n   (if (>= n %)\n     result\n     (let [next-item (+ acc0 acc1)]\n       (recur (inc n)\n              acc1\n              next-item\n              (conj result next-item)))))","user":"4f9e830ae4b0dcca54ed6d2c"},{"code":"(fn [n]\n  (loop [fib0 0, fib1 1, n n, out '(1)]\n    (if (= n 1)\n      (reverse out)\n      (let [next-fib (+ fib0 fib1)]\n        (recur fib1 next-fib (dec n) (conj out next-fib))))))","problem":26,"user":"5346db4be4b084c2834f4a45"},{"code":"(fn [X]\n  (loop [xs [1]\n         m 0\n         n 1\n         X X]\n    (if (> X 1)\n      (recur (conj xs (+ m n)) n (+ m n) (dec X))\n      xs)))","problem":26,"user":"511442d0e4b0e9c109bb74d5"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map last\n             (iterate\n              (fn [[a b]]\n                [b (+ a b)]) [0 1]))))","user":"55a1683ce4b0acc240e31513"},{"problem":26,"code":"#(map\n  (fn nth-fib [n]\n   (if (< n 2)\n    1\n    (+ (nth-fib (- n 1))\n       (nth-fib (- n 2)))))\n   (range 0 %))","user":"5bcf0b1be4b0e9689409ee24"},{"code":"(fn [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1)))","problem":26,"user":"51181009e4b0e0897831a60f"},{"code":"(fn fib3 [n]\n  (reverse (reduce \n              (fn miniFib [x,y]\n                (conj x (+ (first x) (second x))))\n              '(1 1)\n              (range 1 (- n 1))\n  ))\n)","problem":26,"user":"52af7a5ce4b0c58976d9acbd"},{"code":"#(take % ((fn fib \n  [x y] \n  (cons x (lazy-seq (fib y (+ x y))))) 1 1))","problem":26,"user":"52a04f0ee4b04e0c58e87bc1"},{"code":"(fn fib [n]\n  (loop [n n sequence [1 1]]\n    (if (= n 2) sequence\n      (recur (dec n) (conj sequence (+ (last sequence) (last (drop-last sequence))))))))","problem":26,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [nbr] (take nbr (map first (iterate (fn [[a b]] [b (+ a b)]) [1N 1N]))))","problem":26,"user":"5391ab43e4b0b51d73faaea6"},{"problem":26,"code":"(fn [n]\n   (take n ((fn fibonacci []\n              (concat '(1 1)\n                      (lazy-seq (let [f (fibonacci)]\n                                  (map + f (rest f)))))))))","user":"594783bee4b07ddc2dafada1"},{"problem":26,"code":"(fn fib-seq [n]\n  (map (fn fib-num [n]\n         (if (or (= n 1) (= n 2))\n           1\n           (+ (fib-num (- n 1)) (fib-num (- n 2)))))\n       (range 1 (inc n))))","user":"4f0366b0535dcb61093f6aa9"},{"problem":26,"code":"#(map (fn fib [n] (case (inc n) 0 0 1 1 (+ (fib (- n 1)) (fib (- n 2))) )) (range 0 %) )","user":"5566463ee4b0c656e3ff1831"},{"code":"(fn [n]\n            (loop [acc [1 1] cnt (count acc)]\n              (if (= n cnt)\n                (reverse acc)\n                (recur (cons (apply + (take 2 acc)) acc) (inc cnt)))))","problem":26,"user":"4edee6a2535d10e5ff6f533e"},{"problem":26,"code":"(fn [n]\n  (letfn [(inner-fibo [n]\n            (case n\n              1 '(1)\n              2 '(1 1)\n              (let [beg (inner-fibo (dec n))]\n                (conj beg (+ (first beg) (second beg)))) ))]\n    (reverse (inner-fibo n))))","user":"551e8627e4b08d5046aa8a45"},{"code":"(fn [x] \n  (let [fib (fn [group] (cond (= (count group) 0) (recur [1]) (= (count group) 1) (recur [1 1]) (> (count group) x) group :else (recur (cons (+ (first group) (second group)) group))))]\n   \n   (take x (reverse(fib [])))))","problem":26,"user":"5137e11ce4b0a5db03d727d0"},{"problem":26,"code":"(fn [x] (if (< x 2)\n          (if (= x 1)\n            '(1)\n            '())\n           (loop [x   (- x 2)\n                  lst [1 1]]\n           (if (= x 0)\n             lst\n             (recur (dec x) (conj lst (+ (last lst) (last (butlast lst)))))))))","user":"607e1d9de4b03d835a6eaedb"},{"code":"#(map (fn f [i]\n  (if (> i 2)\n  (+ (f (- i 1)) (f (- i 2)))\n  1)) \n  (range 1 (+ % 1))\n  )","problem":26,"user":"4e67b0aa535d8ccf87e9fe80"},{"code":"(fn take-fib [n] \n  (letfn [(fib [x y] (cons x (lazy-seq (fib y (+ y x)))))] (take n (fib 1 1))))","problem":26,"user":"50c62e72e4b00bb60fe0c51b"},{"code":"(fn jet [x] (if (<= x 2) (take x '(1 1)) (let [j (jet (dec x))] (concat j (list (+ (last j) (first (rest (reverse j)))))))))","problem":26,"user":"4e1e7f88535d04ed9115e808"},{"problem":26,"code":"(fn fibonacci\n  ([n]\n   (cond\n     (neg? n) '(0)\n     (zero? n) '(0)\n     (= n 1) '(1)\n     :else (fibonacci (dec n) '(1 1))))\n  ([n coll]\n   (if (= n 1)\n     (reverse  coll)\n     (recur (dec n) (cons (+ (first coll) (second coll)) coll)))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn fib\n  [x]\n  (let [fib-int (fn fib-int [acc a b n]\n    (if (= 0 n)\n      acc\n      (fib-int (conj acc b) b (+ a b) (dec n))))]\n    (fib-int [] 0 1 x)))","problem":26,"user":"50fe9d60e4b03cd852b4e84f"},{"problem":26,"code":"(fn [n]\n  (loop [cnt n cur 0 nxt 1 result []]\n    (if (zero? cnt)\n      (drop 1 (conj result cur))\n      (recur (dec cnt) nxt (+ nxt cur) (conj result cur)))))","user":"58e90258e4b056aecfd47cfd"},{"problem":26,"code":"(fn  [arg1]\n      (loop [fib [1 1] ]\n            (if (= arg1 (count fib))\n              (into '() (reverse fib))\n              (recur (conj fib (+ (last fib) (first (rest (reverse fib)))))))))","user":"5cb6256ce4b026601754b947"},{"problem":26,"code":"(fn [n]\n           (reduce \n            (fn [acc x]\n              (if (< (count acc) 2)\n                (concat acc '(1))\n                (let [[n1 n2] (take 2 (reverse acc))]\n                  (concat acc (list (+ n1 n2))))))\n            '()\n            (range 0 n)))","user":"568c4bc8e4b0dcc4269f40b2"},{"problem":26,"code":"(fn fibo [times]\n  (let [fib-seq-seq ((fn fib [a b]\n                       (lazy-seq (cons a (fib b (+ a b)))))\n                     1 1)]\n    (take times fib-seq-seq)))","user":"5bab8c06e4b0a20761a2347e"},{"problem":26,"code":"#(loop [n 2 a 1 b 1 lst [1 1]]\n   (if (= % n)\n     lst\n     (let [c (+ a b)] (recur (inc n) b c (conj lst c)))))","user":"560a7b46e4b05f002753defb"},{"problem":26,"code":"(fn fib\n  ([n] (fib 1 1 '() n))\n  ([a b xs n] (if (= n 0)\n                (reverse xs)\n                (fib b (+ a b) (conj xs a) (dec n) ))))","user":"548cd813e4b0e286459a1211"},{"problem":26,"code":"(fn n-fib [n]\n  (loop [result []\n         i 0         \n         p 0\n         q 1]\n    (if (= i n)\n      result\n      (recur (conj result q) (inc i) q (+ p q)))))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"(fn [n] (loop [accu '() f0 0 f1 1 n n] (if (= n 0) (reverse accu) (recur (cons f1 accu) f1 (+ f0 f1) (- n 1)))))","problem":26,"user":"4e82c062535db62dc21a62cc"},{"problem":26,"code":"(fn [n]\n  (cond\n    (= n 0) (list* [])\n    (= n 1) (list* [1])\n    (= n 2) (list* [1 1])\n    :else (loop [c (- n 2) acc [1 1]]\n            (if (= c 0) (list* acc)\n              (recur (dec c) (conj acc (+ (peek acc) (peek (pop acc)))))\n              )\n\n            )\n    )\n  )","user":"515d414be4b00901442db1db"},{"code":"(fn [n] (letfn [(fib [x y] (cons x (lazy-seq (fib y (+ x y)))))] (take n (fib 1 1))))","problem":26,"user":"5314318ee4b08068f379ed13"},{"problem":26,"code":"(fn\n  [x]\n  (loop [idx 2\n         a 1\n         b 1\n         result [1 1]]\n    (if (>= idx x)\n      (take x result)\n      (let [new-value (+ a b)]\n        (recur (inc idx)\n               b\n               new-value\n               (conj result (+ a b)))))))","user":"55c734a5e4b0e31453f649cb"},{"code":"(fn [x]\r\n  (let [fib (fn [a b]\r\n\t\t      (if (= a 0)\r\n\t\t\t  b\r\n\t\t\t  (let [n (+ (last b) (last (butlast b)))]\r\n\t\t\t       (recur (- a 1) (conj b n)))))]\r\n\t  (seq (fib (- x 2) [1 1]))))","problem":26,"user":"4db342d7535df7e46ed9b6cd"},{"code":"#(loop [target %1\n        x 0\n        current []]\n    (if (= target x)\n      current\n      (if (or (= 0 x) (= 1 x))\n        (recur target (+ x 1) (conj current 1))\n        (recur target (+ x 1) (conj current (+ (nth current (- x 2)) (nth current (- x 1))))))))","problem":26,"user":"52fa250ee4b047fd55836ff3"},{"code":"(fn [n]\n  (let [sub_fib \n        (fn sub_fib [x]\n                  (cond \n                   (= 1 x) 1\n                   (= 2 x) 1\n                   :else (+ (sub_fib(- x 2)) (sub_fib(- x 1)))\n                   )\n                 )]\n    \n    (map sub_fib (range 1 (+ n 1)))\n   \n    \n  \n    \n)\n  \n  )","problem":26,"user":"4edf95a8535d10e5ff6f5342"},{"problem":26,"code":"#(loop [result []\n        fir 0\n        sec 1\n        num %]\n   (if (zero? num)\n     result\n     (recur (conj result sec) sec (+ fir sec) (dec num))))","user":"571dd145e4b0145328a76283"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2) '(1 1)\n    (let [p (reverse (fib (dec n)))]\n      (reverse (cons (+ (first p) (second p)) p)))))","user":"573f63bfe4b05c31a32c0842"},{"problem":26,"code":"#(rest (reduce (fn [x y] (conj x (+ (second (reverse x)) (first (reverse x))))) [0 1] (range (- % 1))))","user":"56efec81e4b04a395b9a0466"},{"code":"(fn fibonacci [cnt]\n    (loop [res [] j 1 i 0 cnt cnt]\n     (if (= 0 cnt)\n       res\n            (recur\n             (conj res j)\n             (+ i j)\n             j\n             (dec cnt)))))","problem":26,"user":"4fae4c11e4b081705acca248"},{"code":"(fn [n] (rest (take (+ n 1) \n    (#(map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))))","problem":26,"user":"4fb2f9b2e4b081705acca294"},{"code":"(fn [x] (take x (\n  (fn foo [a b] \n     (lazy-seq (cons a (foo b (+ b a))))) 1 1)\n))","problem":26,"user":"5009fd0ae4b03d00572d2d70"},{"code":"#(do (loop [n % i 2 col [1] la 0] (if (> i n) col (do (recur n (inc i) (conj col (+ la (last col))) (last col))) )) )","problem":26,"user":"51bec919e4b013aa0d74b800"},{"code":"(fn f [a b n]\n  (if (> n 0) (cons a (f b (+ a b) (- n 1))))\n)\n1 1","problem":26,"user":"4e307313535deb9a81d77f14"},{"problem":26,"code":"#(take % (reduce (fn[a b](conj a (+ (last a) (second(reverse a)))))[1 1](range %)))","user":"6045e761e4b02d28681c77bb"},{"code":"#(let [fib-iter (iterate (fn [[a b]] (vector b (+ a b))) [1 1])]\n   (take % (map first fib-iter)))","problem":26,"user":"511f88eee4b085952a83535f"},{"problem":26,"code":"(fn [n]\n  (loop [n n x1 0 x2 1 acc []]\n    (if (zero? n)\n      acc\n      (recur (dec n) x2 (+ x1 x2) (conj acc x2)))))","user":"59d8f23ae4b0ef0a1e9b5c49"},{"code":"(fn [i]\n  (reduce\n    (fn [x y]\n    (cond\n      (= (count x) 0) '(1)\n      (= (count x) 1) '(1 1)\n      true (concat x (list (apply + (take-last 2 x))))))\n  '() (range i)))","problem":26,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn fib [x] (take x ((fn subfib [a b] (lazy-seq (cons a (subfib b (+ b a))))) 1 1)))","problem":26,"user":"4fc2e302e4b081705acca33a"},{"code":"#(loop [a 1  b 1  n 1  A '()] (if (> n %) (reverse A) (recur b (+ a b) (inc n) (conj A a))))","problem":26,"user":"4f8b27b3e4b02e764a0a5179"},{"problem":26,"code":"(fn [fibs]\n  (loop [n 3 result [1 1]]\n    (if (> n fibs) \n      (take fibs result) \n      (recur (inc n) \n             (conj result (+ (peek result) (peek (pop result))))))))","user":"53c649d3e4b00fb29b221297"},{"code":"(fn [cnt] ( loop [fibs '(1 0)\r\n                    cnt cnt]\r\n              (if (> cnt 1)\r\n                (recur (cons (+ (first fibs) (second fibs)) fibs) (dec cnt))\r\n                (drop 1 (reverse fibs))\r\n              )))","problem":26,"user":"4f3543eee4b0e243712b1ebd"},{"problem":26,"code":"(fn fib [x]\n  (loop [coll []\n         i 0]\n    (cond\n      (= i x) coll\n      (< i 2) (recur (conj coll 1) (inc i))\n      :else (recur (conj coll (+ (last coll) (nth coll (- i 2))))\n                   (inc i))\n      )))","user":"55a12cb1e4b0acc240e3150d"},{"problem":26,"code":"#(reverse (loop [c '(1 1)\n                 n (- % 2)]\n  (if (pos? n)\n    (recur (conj c (+ (first c)(second c)))(dec n))\n    c)))","user":"578f9a18e4b0ebec4cfb7598"},{"code":"(fn fib [x]\n  (let [sub (fn [res x]\n                (if (= x 0)\n                    (reverse res)\n                    (recur (conj\n                             res\n                             (+ (first res) (first (next res)))) \n                           (dec x))))]\n  (sub '(1 1) (- x 2))))","problem":26,"user":"4e851955535db62dc21a62e9"},{"problem":26,"code":"#(loop [prev 0\n         cur  1\n         counter %\n         result []]\n    (if (= counter 1)\n      (conj result cur)\n      (recur cur (+ prev cur) (dec counter) (conj result cur)) )\n   )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":26,"code":"#(loop [fibseq [0 1]]\n    (if (= % (dec (count fibseq)))\n      (rest fibseq)\n      (recur (conj fibseq (+ (nth fibseq (dec (count fibseq)))\n                             (nth fibseq (- (count fibseq) 2)))))))","user":"57af3bace4b0fbc9809a2730"},{"problem":26,"code":"#(reduce \n  (fn [f i]\n    (conj f\n          (+\n           (nth f (- (count f) 1))\n           (nth f (- (count f) 2)))))\n  '[1 1] (range (- % 2)))","user":"56efb3a3e4b04a395b9a0463"},{"code":"#(loop [res '(1 1)]\r\n    (if (= %1 (count res))\r\n      (reverse res)\r\n      (recur (cons (+ (first res)(first (next res))) res))))","problem":26,"user":"4ebbb6bc535dfed6da9c6d71"},{"problem":26,"code":"(fn fib-seq [x]\n   (loop [counter 0\n          fib ()]\n     (if (= counter x)\n       fib\n       (recur (inc counter) (concat fib (if (< (count fib) 2)\n                                            '(1)\n                                            `(~(+ (last fib) (nth fib (- (count fib) 2))))))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":26,"code":"#(loop [depth %\n        fibs '()]\n   (if (zero? depth)\n     (reverse fibs)\n     (recur (dec depth)\n            (let [a (or (first fibs) 1)\n                  b (or (second fibs) 0)]\n              (cons (+ a b) fibs)))))","user":"56f413b2e4b046a417f9205a"},{"problem":26,"code":"(fn\n  [n]\n  (loop [i 0\n         a 1\n         b 1\n         results []]\n    (if (< i n)\n      (recur (inc i)\n             b\n             (+ b a)\n             (conj results a))\n      results)))","user":"542725fce4b01498b1a71b22"},{"code":"#(loop [ends % rst [1 1]]\n  (if (= ends (count rst))\n    rst\n    (recur ends (conj rst (+ (last rst) (last (butlast rst)))))))","problem":26,"user":"50399468e4b088a6a14ca768"},{"problem":26,"code":"(fn fibber [x]\n    (case x\n      1 '(1)\n      2 '(1 1)\n      (concat (fibber (dec x)) [(+ (last (fibber (dec x))) \n                                   (last (fibber (- x 2))))])))","user":"582625d3e4b051871117bef2"},{"problem":26,"code":"#(take %\n  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"559e38b2e4b08a52bd4f97d2"},{"problem":26,"code":"(fn fib [c]\n  ((fn fib-help [c f s]\n    (if (= c 0)\n      '()\n      (cons f (fib-help (- c 1) s (+ s f)))))\n    c 1 1))","user":"55a35ef4e4b0acc240e31535"},{"problem":26,"code":"(fn [x] (loop [res '()\n               first 0\n               second 1\n               index 0]\n          (if (= index x)\n            (reverse res)\n            (let [new (+ first second)]\n              (if (= index 0)\n                (recur (conj res new) first second (inc index))\n                (recur (conj res new) second new (inc index)))))))","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"#(take % \n  (map first \n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e25176e535d04ed9115e829"},{"problem":26,"code":"(fn fib\n  ([x y]\n   (let [add-one (last y)\n         add-two (last (butlast y))\n         new-seq (conj y (+ add-one add-two))]\n     (if (pos? x)\n       (fib (dec x) new-seq)\n       (seq y))))\n  ([x]\n   (fib (- x 2) [1 1])))","user":"53cf278ce4b00fb29b2212fb"},{"problem":26,"code":"(fn fib1\n  ([n] (fib1 [1 1] n))\n  ([fin n]\n   (if (>= (count fin) n)\n     fin\n     (fib1 (conj fin (+ (last fin) (last (drop-last fin)))) n))))","user":"5471f0f3e4b094393f72dd6f"},{"problem":26,"code":"(fn fib [n] ( let [fibo (fn fibo1 [n] (cond (< n 1) 0 (= n 1) 1 :else (+ (fibo1 (- n 1)) \n         (fibo1 (- n 2))))) , gen (fn gen1 [x acc] (if (= 0 x) acc (gen1 (dec x) (cons (fibo x) acc))))] (gen n [])))","user":"56b5019ce4b0982f16b37e2c"},{"problem":26,"code":"#(loop [result '(), n %, x 0, y 1, c 0] \n   (if (<= n c) \n     (reverse result) \n     (recur (conj result y) \n            n \n            y \n            (+ x y) \n            (inc c))))","user":"590aaa78e4b047aa04b199c0"},{"problem":26,"code":"(fn\n  [n-max]\n  (loop [n 2 s '(1 1)]\n    (if (= n n-max)\n      (reverse s)\n      (recur (inc n)(conj s (+ (first s)(second s)))))))","user":"5c815c33e4b0c8042a70ce24"},{"problem":26,"code":"(fn fibonacci [n]\n  (cond\n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [tmp (fibonacci (dec n))\n         [a b] (take-last 2 tmp)]\n     (concat tmp [(+ a b)]))))","user":"5680104ae4b0966858e4d8ea"},{"code":"(fn fib [n]\n  (if (< n 3)\n    [1 1]\n    (conj (fib (- n 1))(+ (last (fib (dec n))) (last (butlast(fib (dec n))))))))","problem":26,"user":"51c20b14e4b0d204dbe2ca1b"},{"code":"(fn [len]\n  (loop [i 0 x 1 y 1 acc []]\n    (if (= i len)\n      acc\n      (recur (inc i) y (+ x y) (conj acc x)))))","problem":26,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn [n]\r\n  (loop [a 0 b 1 i 0 s []]\r\n    (if (= i n)\r\n        s\r\n        (recur b (+ a b) (inc i) (conj s b)))))","problem":26,"user":"5116e176e4b0063b4e3e16d7"},{"problem":26,"code":"(fn fib [x]\n  (loop [prev2 0\n         prev 1\n         result '()\n         i 0]\n   (if (>= i x)\n      (reverse result)\n      (recur prev (+ prev prev2) (conj result prev) (inc i)))))","user":"59837909e4b021a7a535fe16"},{"code":";; TDD principle: Write the minimum amount of code required to make the test pass :)\n(fn [i] (take i '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4f1b92d1535d64f60314647b"},{"problem":26,"code":"(fn fibonacci\n  ([n] (cond (= n 1) [1]\n             (= n 2) [1 1]\n             :else (fibonacci (- n 2) [1 1])))\n  ([n llist] (if (zero? n)\n               llist\n               (recur (dec n) (conj llist (+ ((comp last butlast) llist)\n                                             (last llist)))))))","user":"561ca6ebe4b064ca9f4b169c"},{"code":"#(take %\n       ((fn fib [ a b ]\n          (cons a (lazy-seq (fib b (+ b a)))))\n        1 1))","problem":26,"user":"52286b19e4b0186687e23a7e"},{"problem":26,"code":"(fn [x] (map second (take x (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","user":"54eea988e4b024c67c0cf875"},{"problem":26,"code":"(fn fibonacci\n  [num]\n  (loop \n    [n (- num 2)\n    series [1 1]\n    a 1\n    b 1]\n    (if (= n 0)\n      series\n      (recur (dec n) (conj series (+ a b)) (+ a b) a))))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [n]\n  (take n\n    (map last (iterate\n      (fn [[a b]]\n        (vector b (+ a b)))\n      [0 1]))))","problem":26,"user":"5014754de4b094324338f8e5"},{"code":"(fn fib-list [n]\n  (map (fn fib [n]\n    (cond\n     (= 0 n) 0\n     (= 1 n) 1\n     :else (+ (fib (- n 1)) (fib (- n 2)))\n     )\n    ) (range 1 (+ n 1))))","problem":26,"user":"4f868d88e4b033992c121c52"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)])[1 1] )))","user":"5695b589e4b0dcc4269f412a"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map last\n             (iterate (fn [[x y]] [y (+ x y)])\n                      [0 1]))))","user":"576a42e6e4b0a07e8fc1810e"},{"code":"(fn [limit]\n   (take limit ((fn fibb [one two]\n                   (lazy-seq (cons one (fibb two (+ one two))))\n                   ) 1 1)))","problem":26,"user":"511d4a52e4b022853b0e07a1"},{"code":"(fn [c] (loop [l '(1 1)\n               r (- c 2)] (if (= 0 r) (reverse l) (recur (conj l (+ (first l) (second l))) (dec r)))))","problem":26,"user":"4ff78679e4b0678c553fc392"},{"code":"(fn [n & xs]\n  (let [s (or xs [1 1])]\n    (if (= n 2)\n      s\n      (recur (dec n) (conj s (reduce + (take-last 2 s)))))))","problem":26,"user":"4fd2529ae4b04c3a95aa041f"},{"code":"(fn fib [N]\n  (letfn [(_fib [M N N1 N2]\n    (if (= N 0)\n      '()\n      (if (= N 1)\n        '(1)\n      (if (= N (- M 1))\n        (list (+ N1 N2))\n        (cons (+ N1 N2) (_fib (+ M 1) N N2 (+ N1 N2)))\n        ))))]\n    (_fib 2 N 1 0)))","problem":26,"user":"51f67858e4b06ff1c25c52c5"},{"code":"#(reverse ((fn fib [n]\n             (if (> n 2)\n               (let [shorter (fib (- n 1))]\n                 (conj shorter (+ (first shorter) (second shorter))))\n               '(1 1))) %))","problem":26,"user":"5133af1de4b0d7a043de8cf2"},{"code":"#(take % '(1 1 2 3 5 8 13 21 34 55))","problem":26,"user":"4ec1f3ea535dfed6da9c6db9"},{"problem":26,"code":"(fn [x]\n  (let [lazy-fib-seq\n  ((fn build-fib [a b]\n      (lazy-seq (cons a (build-fib b (+ a b))))\n  ) 0 1)]\n  (rest (take (+ x 1) lazy-fib-seq)))\n)","user":"5e14175be4b0a047bd49f6e5"},{"problem":26,"code":"#(reverse\n  (loop [ls '(1 1)]\n    (if (= (count ls) %)\n      ls\n      (recur (conj ls (+ (first ls) (second ls) ))))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 0)\n    '()\n  (if (= n 1)\n    '(1)\n  (if (= n 2)\n    '(1 1)\n  (loop [i n acc '(1 1)]\n    (if (= i 2)\n      (reverse acc)\n    (recur (dec i) (cons (+ (nth acc 0) (nth acc 1)) acc))))))))","user":"56039a9de4b04bb52996e1bf"},{"problem":26,"code":"(fn fib\n  [position]\n  (loop [count 1\n         lili [1 1]]\n    (if (>= count (- position 1))\n      lili\n      (recur (inc count) (conj lili\n                               (+\n                                 (last (butlast lili))\n                                 (last lili)))))))","user":"5df0f338e4b093ff717275c6"},{"problem":26,"code":"(fn [n]\n  (let [b (fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))]\n    (take n (b 1 1))))","user":"5c50154be4b0f9f7a8770ebc"},{"code":"(fn [n]\n(letfn [(fib [x]\n             (case x\n               1 1\n               2 1\n               (+ (fib (- x 1)) (fib (- x 2)))))]\n  (map fib (range 1 (inc n)))))","problem":26,"user":"51a4767fe4b0def3c5c58691"},{"code":"(fn [x]\n               (take x (map first\n                            (iterate\n                        (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":26,"code":"#(->>\n (iterate (fn [[p n]] (vector n (+ p n))) [1 1])\n (take %)\n (map first))","user":"54ca35c6e4b057c6fda3a254"},{"problem":26,"code":"(let [fib-step (fn [[a b]] [b (+ a b)])\n      fibs (map first (iterate fib-step [0 1]))]\n  #(take % (drop 1 fibs)))","user":"57a178ade4b0c3d858beb8ec"},{"code":"(fn [n]\r\n    (loop [i 0 result []]\r\n      (cond (>= i n) result\r\n            (< i 2) (recur (inc i) (conj result 1))\r\n            :else (let [prev (result (dec i))\r\n                        prevprev (result (dec (dec i)))]\r\n                    (recur (inc i) (conj result (+ prev prevprev)))))))","problem":26,"user":"4dfceeb9535d04ed9115e77e"},{"problem":26,"code":"(fn [n] (map\n         (fn fib [n]\n           (if\n             (> 2 n)\n             1\n             (+ (fib (- n 1)) (fib (- n 2)))\n             )\n           )\n         (range n)\n         )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"code":"#(loop [i 0 n (inc %) r []]\r\n    (if (= n 0) (rest r)\r\n      (recur (inc i) (dec n) (cond\r\n                               (= i 0)\r\n                               (conj r 0)\r\n                               (= i 1)\r\n                               (conj r 1)\r\n                               :else\r\n                               (conj r\r\n                                 (+\r\n                                   (first\r\n                                     (reverse r))\r\n                                   (second\r\n                                     (reverse r))))))))","problem":26,"user":"4e5a3891535d8a8b8723a2aa"},{"code":"(fn [n]\n  ((fn fib [v] \n    (cond (= n (count v)) v\n          (contains? [1 2] (count v)) (conj (vec v) 1)\n          :else (fib \n                 (conj\n                  (vec v)\n                  (+ (last v) (second (reverse v))))))) [1 1]))","problem":26,"user":"51f01925e4b0249c592fbdfc"},{"code":"(fn fibs\n  ([n] (fibs 1 n '(1)))\n  ([i n col] (if (= n 1)\n                 (reverse col)\n                 (recur (+ i (first col)) (- n 1) (conj col i)))))","problem":26,"user":"4e5a460f535d8a8b8723a2ab"},{"code":"#(let [fib-inner (fn [[n n+1]] [n+1 (+ n n+1)])] \n  (map first (take % (iterate fib-inner [1 1]))))","problem":26,"user":"4e96557d535dbda64a6f6b43"},{"problem":26,"code":"(fn fib\n  ([coll i]\n    (if (pos? i)\n      (fib (conj coll (+ (first coll) (second coll))) (dec i))\n      (reverse coll)))\n  ([i] (fib '(1 1) (dec (dec i)))))","user":"56c792ace4b0ed865f9758c4"},{"problem":26,"code":"(fn\n  [nth]\n  (letfn [(fib-seq\n            [nth]\n            (letfn [(fib [n]\n                      (if (<= n 1) 1 (+ (fib (- n 1)) (fib (- n 2)))))]\n              (cond\n                (= nth 1) '(1)\n                (= nth 2) '(1 1)\n                :else (conj (fib-seq (- nth 1)) (fib (- nth 1))))))]\n    (reverse (fib-seq nth))))","user":"55a5e2f7e4b0acc240e31550"},{"code":"(fn fibb [x]\n   (loop [fib-seq [0 1] counter x]\n     (if (= 1 counter)\n       (drop 1 fib-seq)\n       (recur (conj fib-seq (+ (last fib-seq) (second (reverse fib-seq))))\n              (dec counter)))))","problem":26,"user":"5029faf6e4b023940c84aa46"},{"code":"(fn fib [n]\n  (if (= n 1) [1]\n    (if (= n 2) [1 1]\n      (let [last-fib (fib (dec n))\n            last-two (take-last 2 last-fib)]\n        (conj last-fib (reduce + last-two))))))","problem":26,"user":"50ba3acae4b03e68e4411c78"},{"problem":26,"code":"(fn [n] \n  (loop [i 1 j 1 c [] n n]\n    (if (zero? n) c (recur j (+ i j) (conj c i) (dec n)))))","user":"53b7c21ae4b047364c0444d4"},{"problem":26,"code":"(fn [n]\n  (loop [fibseries [1 1]]\n    (if (< n (count fibseries))\n      (subvec fibseries 0 n)\n      (let [[n1 n2] (reverse fibseries)]\n        (recur (conj fibseries (+ n1 n2)))))))","user":"60726211e4b069485764de36"},{"code":"(fn [c] \n  (take \n   \tc \n   \t(map first \n     \t (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    )\n  )\n)","problem":26,"user":"522d3a16e4b0e26240291d50"},{"problem":26,"code":"(fn [n] (loop [a1 1 a2 1 n n s '()] \n              (if (> n 0)\n                (recur a2 (+ a1 a2) (dec n) (conj s a1))\n                (reverse s)\n                )\n            )\n    )","user":"59419bdfe4b060784b3b78f7"},{"problem":26,"code":"(fn [n]\n  (reverse (loop [act 0 reslist '()]\n   (if (= act n)\n    reslist\n    (if (< act 2)\n     (recur (inc act) (conj reslist 1))\n     (recur (inc act) (conj reslist (+ (first reslist) (nth reslist 1)))))))))","user":"5da8b8ece4b000c986472c28"},{"problem":26,"code":"(fn [num] (take num (map first (iterate #(let [this (first %)\n                                                next (second %)]\n                                            (vector next (+ this next))) [1 1]))))","user":"5fa28e2be4b0f0ebd91b77f0"},{"problem":26,"code":"(fn [X]\n  (loop [coll []\n         X X\n         x1 0\n         x2 1]\n    (if (zero? X)\n      coll\n      (recur (conj coll x2) (dec X) x2 (+ x1 x2)))))","user":"5d9e1006e4b0eb781811cdbd"},{"problem":26,"code":"(fn fib\n  [num]\n  (cond\n   (= num 1) [1]\n   (= num 2) [1 1]\n   :else (conj (fib (dec num)) (+ (last (fib (dec num))) (last (butlast (fib (dec num))))))))","user":"57665f00e4b0a07e8fc180a5"},{"code":"#(loop [x % result [1 1]]\n    (if (> x 2)\n      (recur (dec x) (conj result (apply + (take-last 2 result))))\n      result\n    )\n   )","problem":26,"user":"53038619e4b0d8b024fd3742"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         i 0\n         res []]\n    (if (= i n)\n      res\n      (recur b (+ a b) (inc i) (conj res a)))))","user":"577f0b0ee4b0c8d87281f6f3"},{"code":"(fn [n] (rest (take (inc n) ((fn [] (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])) )))))","problem":26,"user":"51cf99bce4b0e42293a22576"},{"problem":26,"code":"(fn fib [n]\n  (reverse ((fn fb [i n acc]\n    (if (= i n) acc\n      (fb (inc i) n (cons\n                      (#(if\n                          (or (= (first %) nil) (= (second %) nil)) 1\n                          (+ (first %) (second %))\n                          ) acc) acc))\n      )\n    ) 0 n '()))\n)","user":"55815973e4b05c286339e0f6"},{"code":"(fn fib [x]\n  (if (= x 1)\n    [1]\n  (if (= x 2)\n    [1 1]\n  ((fn fib_loop [array, n]\n  (if (= n 0)\n    array\n    (fib_loop (conj array (+ (last array) (last (butlast array)) )) (- n 1))\n    )) [1 1] (- x 2))\n  )))","problem":26,"user":"4fd24729e4b04c3a95aa041e"},{"problem":26,"code":"(fn [c]\n  (loop [res [1 1]]\n    (if (or (= c (count res)) (<= c 2))\n      res\n      (recur (conj res (+ (last res)\n                          (last (drop-last res))))))))","user":"5398d042e4b0b51d73faaf00"},{"problem":26,"code":"(fn [n]\n  ((fn fib [s a b n]\n    (if (zero? n)\n      s\n      (fib (conj s a) b (+ a b) (dec n))\n    )\n  ) [] 1 1 n)\n)","user":"5a208195e4b0ff51aa4b32a3"},{"problem":26,"code":"(fn [n] (loop [in 1 out '(1)] (if (= in n) (reverse out) (recur (inc in) (conj out (apply + (take 2 out)))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":26,"code":"(fn [n] (letfn [(fib [x y] (lazy-seq (cons x (fib y (+ x y)))))] (take n (fib 1 1))))","user":"5c30d90de4b0d62ef62d9f22"},{"code":"(fn fib [x]\n  (loop [n 2\n         acc [1 1]]\n    (if (= n x) acc\n      (recur (inc n) (conj acc (+ (last acc) (last (butlast acc))))))))","problem":26,"user":"5269c150e4b03e8d9a4a71f8"},{"problem":26,"code":"#(map (fn fb [x] (if (> x 1) (+ (fb (dec x)) (fb (- x 2))) 1)) (range %))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":26,"code":"(fn fib\n  [n]\n  (take n\n    ((fn fib-in \n      [a b]\n        (cons a (lazy-seq (fib-in b (+ a b)))))\n    1 1)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":26,"code":"#(loop [s '(1 1) c %] \n    (if (< c 3) \n      (reverse s) \n      (recur (cons (+ (first s) (second s)) s) \n             (dec c))))","user":"514f0a28e4b019235f6c059a"},{"code":"#(loop [n %\n        res [1 1]]\n   (if (< n 3)\n     res\n     (recur (dec n) (conj res (reduce + (take-last 2 res))))\n   ))","problem":26,"user":"52efc98de4b05e3f0be25ed2"},{"code":"#(take %     \n\t(map first (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","problem":26,"user":"4fbbcf0ce4b081705acca2ee"},{"problem":26,"code":"(fn fib\n  ([x] (fib (+ x 1) [0 1]))\n  ([x l] \n   \t(if (< (count l) x)\n    \t(fib x (concat l (list (+ (last l) (last (butlast l))))))\n      (rest l))))","user":"57be6dcfe4b05aa3c4741c6a"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b)))))1 1)))","problem":26,"user":"5300aa1de4b0d8b024fd3710"},{"problem":26,"code":"(fn [n]\n  (loop [v [1 1]]\n    (let [x (+ (last v)\n               (nth v (- (count v) 2)))]\n     (if (= (count v) n)\n       v\n     (recur (conj v x))\n))))","user":"5f985283e4b0715f5002d800"},{"code":"#(drop 1 (take (inc %) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"4e8768f6535dceadca469850"},{"problem":26,"code":"(fn fib [len & [res]]\n  (let [curr (if (nil? res) '(1 1) res)]\n    (if (= len (count curr))\n      curr\n      (fib len (concat \n                curr \n                (list (apply + (take-last 2 curr))))))))","user":"5a6bc345e4b0512ff01cda46"},{"problem":26,"code":"#(loop [x [1 1]]\n  (if (< (count x) %)\n    (recur (conj x (+ (last x) (nth x (- (count x) 2)))))\n    x))","user":"5af1cb6be4b0cc2b61a3bc64"},{"problem":26,"code":"#(map\n  (fn fib [x]\n    (if (or (= 1 x) (= 2 x))\n      1\n      (+\n        (fib (- x 1))\n        (fib (- x 2))\n      )\n    )\n  )\n  (map inc (range %))\n)","user":"56339e23e4b0bfe05bf117b1"},{"problem":26,"code":"(fn fib-seq\n  [X]\n  (map (fn fib \n  [X]\n  (if (or (= X 1) (= X 2))\n      1\n      (+ (fib (- X 1)) (fib (- X 2))))\n  ) (range 1 (inc X)))\n)","user":"55acd080e4b03311e7b73298"},{"problem":26,"code":"(fn [x]\n  (loop [cnt 1 result []]\n    (cond \n     (> cnt x) result\n     (<= cnt 2) (recur (inc cnt) (conj result 1))\n     :else (recur \n     \t(inc cnt)\n        (conj result (reduce + (take-last 2 result)))))))","user":"60482e53e4b02d28681c77d3"},{"problem":26,"code":"(fn [n]\n  (loop [n n n1 0 n2 1 result []]\n    (if (= n 0)\n      result\n      (recur (dec n) n2 (+ n1 n2) (conj result n2)))))","user":"550aeddae4b06e50f9beb135"},{"code":"(fn [a] \n  (map first \n    (reductions \n      (fn [[x y] z] [y (+ x y)]) [1 1] (range 1 a))))","problem":26,"user":"4f4c8faae4b03ad3f0c10c93"},{"code":"(fn  [n]\n     (seq (reduce #(conj %1 (+ (* 0 %2)\n                          (last %1) (last (butlast %1)))) [1 1] (range (- n 2)))))","problem":26,"user":"50611456e4b0dc10a69545a5"},{"code":"#(letfn [(fib [n]\n  (cond\n    (= n 0) 1\n    (= n 1) 1\n    :else (+ (fib (- n 1)) (fib (- n 2)))))] \n  (map fib (range %))\n  )","problem":26,"user":"4f93539de4b0dcca54ed6cba"},{"code":"(fn [n]\n  ((fn [i l]\n    (cond \n      (= i n) (reverse l)\n      (or (= i 0) (= i 1)) (recur (+ i 1) (cons 1 l))\n      :else (recur (+ i 1) (cons (reduce + 0 (take 2 l)) l))))\n    0 (list)))","problem":26,"user":"4f03f044535dcb61093f6b83"},{"problem":26,"code":"(fn [x] \n\t(if (= x 0) nil \n\t\t(if (= x 1) '(1)\n\t\t\t(if (= x 2) '(1 1)\n\t\t\t\t(loop [acc '(1 1) pp 1 p 1 i 3] \n\t\t\t\t\t(if (= i x) (concat acc [(+ pp p)])\n\t\t\t\t\t\t(recur (concat acc [(+ pp p)]) p (+ pp p) (inc i))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","user":"583dacc2e4b089d5ab817d9f"},{"problem":26,"code":"(fn [k]\n  (loop [i (- k 2)\n         r '(1 1)\n         r1 1\n         r2 1]\n    (if (= i 0)\n      (sort r)\n      (recur (dec i) (cons (+ r1 r2) r) r2 (+ r1 r2))\n      )\n    )\n  )","user":"55252392e4b0882d96d091cc"},{"problem":26,"code":"#(take % \n       ((fn fib [a b] \n          (lazy-seq \n           (cons a \n                 (fib \n                  b \n                  (+ a b))))) \n        1 1))","user":"58b26da4e4b0ebc645576d0a"},{"code":"#(take %\n  ((fn fib [a b] \n    (lazy-seq(cons a (fib b (+ a b))))) 1 1))","problem":26,"user":"4e6e3aac535d5021c1a89603"},{"code":"(fn fib[n]\n  (loop [c 1 p 0 n n fib []]\n    (if (<= n 0)\n      fib\n      (recur (+ c p) c (dec n) (conj fib c)))))","problem":26,"user":"529a73bde4b02ebb4ef75096"},{"problem":26,"code":"(fn fib \n  ([n]   (fib '(1 1) (- n 2)))\n  ([f n] (if (= n 0) \n           (reverse f)\n           (fib (conj f (apply + (take 2 f))) (dec n)))))","user":"57ed8315e4b0bfb2137f5b9a"},{"problem":26,"code":"#(reverse ((fn fib [n] \n  (if (= 1 n)\n    '(1)\n  (if (= 2 n)\n    (cons 1 '(1))\n    (let [fibs (fib (dec n))\n          fib-1 (first fibs)\n          fib-2 (first (rest fibs))\n          fib-next (+ fib-1 fib-2)]\n      (cons fib-next fibs))))) %))","user":"5b62764ae4b0c6492753e725"},{"code":"(fn fib [x]\r\n   (if (= x 2)\r\n      [1 1]\r\n      (let [v (fib (dec x)) cnt (count v)]\r\n         (conj v (+ (nth v (dec cnt))(nth v (- cnt 2))) ) \r\n      )\r\n   )\r\n)","problem":26,"user":"4f4aa932e4b0d56e7bb92c14"},{"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1, 1])))","problem":26,"user":"521dceeae4b050d5da042802"},{"code":"#(loop [idx %1 result [1 1]] (if (= 2 idx) result (recur (dec idx) (conj result (+ (last result) (nth result (- (count result) 2)))))))","problem":26,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn [x]\n  (letfn [(rfib [a b]\n                (cons a (lazy-seq (rfib b (+ b a))))\n                )]\n    (take x (rfib 1 1))\n    )\n  )","problem":26,"user":"522f483ce4b032bbe342415a"},{"code":"#(letfn [(fib [n] (cond (= n 1) 1 (= n 2) 1 :else (+ (fib (- n 2)) (fib (dec n)))))] (for [x (range %)] (fib (inc x))))","problem":26,"user":"50733b31e4b0e3170b5a869a"},{"problem":26,"code":"(fn [n]\n  (loop\t[count 2\n         a 1\n         b 1\n         all [1 1]]\n    (if\t(= n count)\n      all\n      (recur (inc count) b (+ a b) (conj all (+ a b))))))","user":"57a499dae4b0a966079561e6"},{"code":"#(take % (map last (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4e8516d0535db62dc21a62e8"},{"code":"#(loop [fib []\n        n1 1\n        n2 1\n        i 0]\n  (if (= i %)\n    fib\n    (recur (conj fib n2)\n           (+ n1 n2) n1 (inc i))))","problem":26,"user":"4f04f847535dcb61093f6beb"},{"problem":26,"code":"(fn [x]\n  (loop [i 0, sum 1, newl []]\n    (if (= i x)\n      newl\n      (if (empty? newl)\n        (recur (inc i) 1 [1])\n      \t(recur (inc i) (+ (last newl) sum) (conj newl sum))\n      )\n     )\n   )\n )","user":"588fb3a7e4b00487982d51b9"},{"code":"(fn [cnt]\n    (reduce\n      (fn [sq rn]\n        (do\n          rn\n          (let\n            [rev (reverse sq)]\n            (conj sq (+ (first rev) (second rev))))))\n      [1 1]\n      (range (- cnt 2))))","problem":26,"user":"4eb30868535d7eef30807355"},{"code":"(fn [x] \n  (loop [result [1 1]]\n    (if (= x (count result))\n      result\n      (recur (conj result (+ (last result) (last (butlast result))))))))","problem":26,"user":"4ecdb0bb535d23f036227709"},{"problem":26,"code":"(fn fib[x] ((fn fib1 [n acc] (if (= n 2) acc (fib1 (- n 1) (concat acc (list (+ (last acc) (second (reverse acc)))))))) x '(1 1)))","user":"574b008ce4b02ea114799203"},{"code":"#((fn [a b count list]\n            (if (zero? count)\n                list\n                (recur b (+ a b) (dec count) (conj list b)))) 0 1 % [])","problem":26,"user":"4e3bccb1535deb9a81d77f55"},{"problem":26,"code":"(fn [n]\n            (case n\n              0 '(1)\n              1 '(1)\n              2 '(1 1)\n            (reverse ((fn [n p1 p2 lst]\n                        (if (= n 0)\n                          lst\n                          (let [nxt (+ p1 p2)]\n                            (recur (dec n) nxt p1 (conj lst nxt)))))\n\n                       (- n 2) 1 1 '(1 1)))))","user":"5b0fe3f4e4b0cc2b61a3be14"},{"code":"(fn [n]\n  (loop [n n\n         col []]\n    (if (= n 0)\n      col\n      (recur (dec n) (conj col\n                       (case (count col)\n                         0 1\n                         1 1\n                         (+ (last col) (second (reverse col)))))))))","problem":26,"user":"50608236e4b07251188e4454"},{"code":"(fn [x] \n  (take x ((fn fib [a b] \n    (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4f17aa97535d64f603146456"},{"problem":26,"code":"(fn [n] (loop [n n x 1 y 1 a []] (if (zero? n) a (recur (dec n) y (+ x y) (conj a x)))))","user":"4e11b92a535d04ed9115e7cb"},{"problem":26,"code":"(fn [x]\n  (let [fibo (fn fib [i] \n              (if (< i 2)\n                1\n                (+ (fib (dec i)) (fib (dec (dec i))))))]\n    (map fibo (range x))))","user":"540cde77e4b0addc1aec6709"},{"problem":26,"code":"(fn [max]\n  (loop [fib [1 1]\n         count 2]\n    (let [[first second] fib]\n      (if (not (< count max))\n        (reverse fib)\n        (recur (cons (+ first second) fib) (inc count))))))","user":"5e5f75a0e4b0fd0acd15867a"},{"problem":26,"code":"#(loop [part '(1) nth 1 index 1]\n    (if (= index %)\n      (reverse part)\n      (recur (conj part nth) (+ (first part) nth) (inc index))))","user":"584948fce4b089d5ab817ecc"},{"problem":26,"code":"(fn\n   [n]\n   (reduce\n     (fn [arr num]\n       (conj arr (+ (last arr) (last (butlast arr)))))\n     [1 1]\n     (range (- n 2))))","user":"5cdd3589e4b05ee0cb311756"},{"code":"(fn [n]\n  (take n\n    (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1]))))","problem":26,"user":"4fd0d058e4b04c3a95aa0408"},{"problem":26,"code":"( fn [cnt]\n  (loop [acc [],\n         n cnt \n         f0 1\n         f1 1]\n\t(if (> n 0)\n      (recur (conj acc f0) (dec n) f1 (+ f0 f1))\n      acc\n)))\n\n;;#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5c1b82bce4b01240ff567211"},{"code":"(fn [x] (last (take (- x 1) (iterate (fn [s] (conj s (+ (last s) (s (- (count s) 2))))) [1 1]))))","problem":26,"user":"5138da28e4b0a5db03d727dd"},{"problem":26,"code":"(fn [n] (loop [i 2 n n lst '(1 1)]\n    (if (or (<= n 2) (>= i n))\n      lst\n      (recur (inc i) n (reverse (conj (reverse lst) (+ (first (reverse lst)) (second (reverse lst)))))))))","user":"590d715ae4b047aa04b19a05"},{"code":"#(map second (take % (iterate (fn [[a b]] [b (+ a b)]) [0 1])))","problem":26,"user":"4e513758535dc968683fc4f3"},{"problem":26,"code":"#(take % (map first (iterate (fn [[i j]] [j (+' i j)]) [1 1])))","user":"556a3243e4b09a3098a524de"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([n] (take n (fib)))\n  ([n0 n1] (cons n0 (lazy-seq (fib n1 (+ n0 n1))))))","user":"5141a8f2e4b02fd87f5064c1"},{"problem":26,"code":"#(letfn [(fib [current next len]\n          (if (= len 0) '() (cons current (fib next (+ current next) (dec len))\n                                 ))\n          )]\n         (fib 1 1 %)\n  )","user":"54edcf96e4b024c67c0cf866"},{"code":"#(reverse (loop [c % a 1 b 1 s nil]\n   (if (= c 0)\n    s\n   (recur (- c 1) (+ a b) a (conj s b)))))","problem":26,"user":"5322d370e4b09d4e7a9b54c7"},{"code":"#(->> [1 1]\n      (iterate (fn [[a b]] [b (+ a b)]))\n      (map first)\n      (take %))","problem":26,"user":"51bb970be4b0fe3ecfb4644e"},{"problem":26,"code":"(fn [x ] (last (take (dec x) (iterate (fn [v] (conj v (+ (last v) (last (butlast v))) )) [1 1]))))","user":"56aed78fe4b03c432f187363"},{"problem":26,"code":"(fn [n]\n  (loop [c 0 l 0 r []]\n    (if (< (count r) n)\n      (if (= c 0)\n        (recur 1 0 [1])\n        (recur (+ c l) c (conj r (+ c l))))\n      r\n    )))","user":"51dafedee4b09f6bc204eee2"},{"problem":26,"code":"(fn fibs[n]\n  (map \n    (fn fib[n]\n      (if (< n 2)\n        1\n        (+ (fib (- n 1)) (fib (- n 2)))))\n    (range n)))","user":"56069006e4b08b23635d3174"},{"code":"(fn [n] \n  (let [fibo (fn fibo [a b]\n               (lazy-seq\n                (cons a\n                      (fibo b (+ a b)))))\n        fib-seq (fibo 1 1)]\n    (take n fib-seq)))","problem":26,"user":"511179a2e4b03f43822243d0"},{"problem":26,"code":"(fn [x]\n  (take x\n        (map first (iterate (fn [[a b]] (list b (+ a b))) '(1 1)))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":26,"code":"(fn fib [x z y] (if (< (count x) y)\n                (fib (conj  x (+ (first x) z))\n                     (first x) y)\n                (reverse x))) '(1 1) 1","user":"59129074e4b0163c97b36ef1"},{"problem":26,"code":"(fn fib\n      ([n] (if (= n 1) (vector 1) (fib (- n 2) (vector 1 1))))\n      ([n r] (if (= n 0) r (fib (- n 1) (conj (vec r) (+ (last r) (nth r (- (count r) 2))))))))","user":"540271aee4b0df28a13c62d0"},{"code":"(fn [x]\n  (last\n   (take (- x 1)\n         (iterate (fn [l] (concat l [(+ (last l) (last (butlast l)) ) ]) )  [1 1]                 \n         )\n   )\n  )\n )","problem":26,"user":"51e1c176e4b06a68e693eafb"},{"problem":26,"code":"(fn fib [n]\n   (cond\n     (= n 1) '(1)\n     (= n 2) '(1 1)\n     :else (let [rev (reverse (fib (dec n)))]\n             (reverse (conj rev (+ (first rev) (second rev)))))))","user":"5d931a58e4b0d3f9b434ad10"},{"code":"(fn f [n]\n  (if (= n 0)  \n    '() \n    (concat (f (dec n))\n          (list((fn fab [a]\n            (if (< a 3)\n              1\n              (+ (fab (- a 2)) (fab (- a 1))))) \n            n)))))","problem":26,"user":"52196842e4b0890f2f822bfa"},{"problem":26,"code":"(fn fibo\n  [n]\n  (rest (take (+ n 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","user":"5c7dad57e4b0d597f478caba"},{"problem":26,"code":"#(reverse (nth (iterate (fn fib [x] (conj x (+ (first x) (nth x 1 0)))) '(1)) (dec %)))","user":"5421cd6be4b01498b1a71ab7"},{"code":"#(map \n  (fn fib [x] \n    (if (< x 2)\n      1\n      (+ (fib (- x 1)) (fib (- x 2)))\n    )\n  ) \n  (range %)\n)","problem":26,"user":"5089fc3ae4b016a21070049f"},{"code":"#(loop [o [] a 1 b 0]\n  (if (< (count o) %)\n    (recur (conj o a) (+ a b) a)\n    o))","problem":26,"user":"4f727023e4b07046d9f4f035"},{"code":"(fn fibo [n]\n  (loop [s (), x 0]\n    (if (= x n)\n      s\n      (if (< x 2)\n        (recur (conj (vec s) 1) (inc x))\n        (recur (conj (vec s) (+ (last s) (second (reverse s)))) (inc x))))))","problem":26,"user":"4fd93c42e4b05e33b9224f35"},{"code":"(fn fb\n  ([n] (fb (- n 2) [1 1] 1 1))\n  ([n fseq i j]\n   (if (zero? n)\n       fseq\n       (let [k (+ i j)]\n         (recur (dec n)\n                (conj fseq k)\n                j k)))))","problem":26,"user":"4f2861eee4b0d6649770a017"},{"code":"#(loop [x 0 y 1 acc '[]]\n   (if (= % (count acc))\n     acc\n     (recur y (+ x y) (conj acc y))))","problem":26,"user":"50f3bd98e4b041536e2eca3a"},{"problem":26,"code":"#(loop [x 1\n        y 1\n        a [1]]\n   (if (= (count a) %) a\n   (recur y (+ x y) (conj a y))\n     ))","user":"566734c4e4b04acd4f672dcc"},{"problem":26,"code":"(fn [num]\n (loop [res [1 1]]\n        (if (>= (count res) num)\n          res\n          (recur (conj res (+ (inc (last res)) (dec (last (butlast res)))))))))","user":"57995ac1e4b05b1deef9adbf"},{"code":"#(loop [v [1]]\n  (if (= (count v) %)\n    v\n    (recur (conj v (apply + (take-last 2 v))))\n  )\n)","problem":26,"user":"4ec53f8c535d6d7199dd368b"},{"problem":26,"code":"(fn fib [nb]\n\t(loop [n 0 res []]\n\t\t(if (= n nb)\n\t\t\tres\n\t\t\t(recur (inc n) (conj res \n\t\t\t\t(if (< n 1) \n\t\t\t\t\t1 \n\t\t\t\t\t(apply + (take-last 2 res)) ))))))","user":"54be7e93e4b0ed20f4ff6eed"},{"problem":26,"code":"(fn [n]\n\t(reverse\n\t\t((fn [m s]\n\t\t\t(if (> m 0)\n\t\t\t\t(recur (dec m) (conj s (+ (first s) (second s))))\n\t\t\t\ts\n\t\t\t)\n\t\t)\n\t\t(- n 2)\n\t\t(list 1 1)\n\t\t)\n\t)\n)","user":"5b7bc82ce4b047b03b203726"},{"code":"(fn fibo\n  ([n] (take n (fibo 1 1)))\n  ([a b]\n   (cons a (lazy-seq (fibo b (+ a b))))))","problem":26,"user":"53733312e4b06d7f452d9e0a"},{"problem":26,"code":"(fn[x](reverse(loop [N x fibs '(1 1)]\n    (if (< N 3)\n      fibs\n      (let [nextfib (+ (first fibs)(second fibs))]\n       (recur (- N 1) (cons nextfib fibs))\n)\n      )\n    \n    )\n  \n  ))","user":"522b1993e4b0d34ee08e71b6"},{"problem":26,"code":"(fn fibonacci\n  ([] (cons 1 (lazy-seq (fibonacci 1 1))))\n  ([x] (take x (fibonacci)))\n  ([a b] (cons b (lazy-seq (fibonacci b (+ a b))))))","user":"555521a5e4b0deb715856e12"},{"problem":26,"code":"(fn [x] (\n  (fn [number items] (if \n    (= number 2) \n    items \n    (recur \n      (dec number) \n      (conj \n        items \n        (+ \n          (\n            (comp \n              first \n              reverse) \n            items) \n          (\n            (comp \n              second \n              reverse) \n            items)))))) x [1 1]))","user":"53d2b10de4b00fb29b221322"},{"code":"(fn [n]\n  (loop [result (list 1 1)\n         n      (- n 2)]\n    (if (zero? n)\n      (reverse result)\n      (recur \n        (conj result (+ (first result) (second result)))\n        (dec n)))))","problem":26,"user":"4dd29ede535dae65d5c462da"},{"code":"(fn [n]\n  (for [x (range n)]\n    ((fn fib [i] (if (> i 1) (+ (fib (- i 1)) (fib (- i 2))) 1)) x)))","problem":26,"user":"4f46df00e4b0d56e7bb92bac"},{"problem":26,"code":"#(loop [fib [1 1]\n         cn 2]\n    (if (= % cn)\n      (seq fib)\n      (recur (conj fib (+ (peek fib) (peek (pop fib)))) (inc cn))))","user":"5432df22e4b0dad94371f2f5"},{"code":"(fn [i]\r\n  (letfn [(_ [i]\r\n  (cond\r\n     (= i 1) '(1)\r\n     (= i 2) '(1 1)\r\n     :else (conj (_ (dec i)) (+ (first (_ (dec i))) (nth (_ (dec i)) 1)))\r\n     )\r\n    )]\r\n  \t(reverse (_ i))\r\n  )\r\n)","problem":26,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [n]\n  (loop [x n \n         result []]\n    (if (> x 0)\n      (recur (dec x) (conj result (if (< (count result) 2)\n                                    1 \n                                    (+ (last result) (nth result (- (count result) 2))))))\n      result)))","problem":26,"user":"51e7abeae4b0a3e081b8cbee"},{"problem":26,"code":"#(reverse (loop [r () n %] (if (< (count r) n) (recur (conj r (if (< (count r) 2) 1 (+ (first r) (second r)))) n) r)))","user":"5a6b8a9ae4b0512ff01cda3f"},{"problem":26,"code":"(fn fibo [n]\n  (rest (reduce (fn [a i] (conj a (+ (nth a i) (nth a (- i 1))))) (vector 0 1) (range 1 n))))","user":"579e75fbe4b05b1deef9ae29"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4f726dd2e4b07046d9f4f034"},{"code":"(fn fib [n] \n  (if (= 0 n) ()\n    (if (= 1 n) '(1) \n      (if (= 2 n) '(1 1)\n        (concat (fib (- n 1)) [(+ (last (fib (- n 2))) (last (fib (- n 1))))])))))","problem":26,"user":"5130795ce4b08c712d3fae38"},{"problem":26,"code":"(fn temp\n  [n]\n  (map (fn fib\n         [n]\n         (cond\n           (<= n 1) 1\n           :else (+ (fib (dec n)) (fib (- n 2))))) (range n)))","user":"5a3b5cfde4b001c08efc0cd4"},{"problem":26,"code":"#((fn fib [a b n]\n  (if (= n 0)\n  '()\n   (conj\n    (fib\n     b\n     (+ a b)\n     (- n 1)) b))) 0 1 %)","user":"598ab445e4b02b9968b84ce0"},{"code":"#(take %1 ((fn fib [a b] (lazy-seq (cons a (fib b (+ b a))))) 1 1))","problem":26,"user":"4fd15334e4b04c3a95aa040d"},{"problem":26,"code":"#(loop [res [1 1]]\n        (if (>= (count res) %)\n          res\n          (recur (conj res (+' (inc (last res)) (dec (last (butlast res))))))))","user":"58eba423e4b056aecfd47d40"},{"code":"(fn [x] \n  (let [r '(1 1)\n       fibstep (fn [x r] (if (= x 2) r (recur (- x 1) (conj r (+ (first r) (second r))))))]\n  \t   (reverse (fibstep x r))))","problem":26,"user":"5337a020e4b0e30313ee6c8b"},{"problem":26,"code":"(fn tt [nn]\n  (let [ff (fn fib [n]\n    (cond\n     (= n 0) 1\n     (= n 1) 1\n     :else (+ (fib (- n 1)) (fib (- n 2)))\n    ))]\n    (map ff (range nn))\n    ))","user":"570d0548e4b0b0fb43fd06d2"},{"problem":26,"code":"(fn [n]\n  ((fn fib [xs n x1 x2]\n     (let [x3 (+ x1 x2)]\n       (if (= 0 n) xs\n         (fib (conj xs x3) (- n 1) x2 x3)))) [1 1] (- n 2) 1 1))","user":"54565558e4b080a794c2c87f"},{"code":"(fn [n]\n  (loop [newseq []\n         n n\n         n-1 1\n         n-2 0]\n    (if (zero? n)\n      newseq\n      (if (empty? newseq)\n        (recur (conj newseq 1) (dec n) 1 0)\n        (recur (conj newseq (+ n-1 n-2)) (dec n) (+ n-1 n-2) n-1)))))","problem":26,"user":"538d464ee4b0b51d73faae69"},{"problem":26,"code":"(fn fib-list [x]\n  (let [fib\n        (fn fib [num]\n          ((memoize\n             (fn fib-recur [n]\n               (cond\n                 (<= n 0) 0\n                 (= n 1) 1\n                 :otherwise (+ (fib-recur (dec n)) (fib-recur (- n 2)))))) num))]\n    (loop [result '()\n           x       x]\n      (cond\n        (<= x 0) result\n        :otherwise (recur (conj result (fib x)) (dec x))))))","user":"524b827ce4b09eba1c0223d7"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))\n))","problem":26,"user":"4ff99f47e4b0678c553fc3aa"},{"code":"#(take %\n        ((fn fib\n           [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))","problem":26,"user":"527ed32ce4b0757a1b1713b5"},{"problem":26,"code":"(fn [x]\n  (take \n   x\n   ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n    1\n    1)))","user":"5721dfc3e4b0c5bde472c0bb"},{"code":"(fn [n]\n  (loop [a 1 b 1 fibs '() k n]\n    (if (zero? k)\n        (reverse fibs)\n        (recur b (+ a b) (conj fibs a) (dec k)))))","problem":26,"user":"4f035bfd535dcb61093f6a8f"},{"problem":26,"code":"(fn fibonacci [n] (case n 1 '(1) 2 '(1 1) (let [f (fibonacci (- n 1))] (concat f (list (reduce + (take-last 2 f)))))))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn nfib [n] (if (<= n 2) \n                 (if (= n 2) [1 1] [1]) \n                 (conj (nfib (- n 1))\n                       (+ \n                        (last (nfib (- n 1)))\n                        (second (reverse (nfib (- n 1))))))))","problem":26,"user":"50b80cd9e4b01d868da6351a"},{"code":"(fn [n]\n  (take n ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"513dca07e4b0825f97f7f962"},{"problem":26,"code":"(fn [z] (loop [x 2 y [1 1]]\n    (if (= x z)\n      y\n      (recur (+ x 1) (into y [(+ (last y) (last (butlast y)))])))))","user":"570362ece4b08d47c97781f0"},{"problem":26,"code":"(fn [n] (take n\n      ((fn fib-recur [a b]\n         (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"5d4c4de9e4b0776584bd6f2f"},{"code":"#(take % ((fn rec [a b] (cons a (lazy-seq (rec b (+ a b))))) 1 1))","problem":26,"user":"52cc09c1e4b07d0d72b27356"},{"code":"#(take % \n  (apply concat \n    (iterate \n      (fn[[a b]] [(+ a b) (+ a b b)]) \n      [1 1])))","problem":26,"user":"508d8ab2e4b0f17d83ea26be"},{"problem":26,"code":"#(reverse ((fn fibg [n] (if (= n 2) '(1 1) \n                          (cons (+ (first (fibg (- n 1)))\n                                   (first (rest (fibg (- n 1))))\n                                ) \n                                (fibg (- n 1))\n                          )\n                         )\n            ) %)\n )","user":"59fec82be4b01bb0ae8afd14"},{"problem":26,"code":"(fn fibn [n] \n  \t(loop [t 2, fib [1, 1]]\n      (if (= t n) \n        fib\n        (recur (inc t) (conj fib  (+ (last fib) (last (butlast fib))))))))","user":"57887de2e4b0ebec4cfb751c"},{"problem":26,"code":"#(take % ((fn fib [a b] \n            (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn[n]\n  (loop [a 0 b 1 fibs []]\n    (if (= (count fibs) n)\n      fibs\n      (recur b (+ a b) (conj fibs b)))))","problem":26,"user":"4ec64981535d6d7199dd36c7"},{"problem":26,"code":"(fn fibonacci [upper-cap]\n  (letfn [(fibonacci-c [a b values]\n                       (if (= upper-cap (count values))\n                         values\n                         (fibonacci-c b (+ a b) (cons a values))))]\n    (reverse (fibonacci-c 1 1 []))))","user":"5ad351a5e4b0ea6055cfabc0"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n\n;; from ch 4 of Miller Halloway & Bedra, Programming Clojure (couldn't unsee it once read)","user":"5e9154c1e4b0cb0169546354"},{"code":"(fn fib [x]\n  (if (> x 2)\n    (let [s (fib (dec x))]\n      (concat s (list (apply + (take 2 (reverse s))))))\n    (repeat x 1)))","problem":26,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":26,"code":"(fn [n]\n  (loop [acc []\n         f1 0\n         f2 1\n         n n]\n    (if (zero? n)\n      acc\n      (recur (conj acc f2) f2 (+ f2 f1) (dec n)))))","user":"54638c8fe4b01be26fd746c2"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take x (fib 1 1))))","user":"57aa4752e4b0b8559636fc6a"},{"code":"#(take % ((fn lfib [a b] (lazy-seq (cons b (lfib b (+ a b))))) 0 1))","problem":26,"user":"4ed9fe5f535d10e5ff6f5308"},{"code":"#(take %\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ a b))))) 1 1))","problem":26,"user":"4eb01582535d7eef30807335"},{"problem":26,"code":"(fn fib [n]\n\t(if (= n 2)\n\t\t[1 1]\n\t\t(let [x (fib (- n 1))] \n\t\t\t(conj x (+ (last x) (.get x (- (count x) 2)))))))","user":"5bad07eee4b0a20761a234a4"},{"problem":26,"code":";(fn fib [n] (if (= n 1) [1] (conj (fib (dec n)) (reduce + (take-last 2 (fib (dec n)))))))\n(fn [n] (take n ((fn rfib [a b] (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","user":"562b1a7be4b058fa18c5a6cb"},{"problem":26,"code":"#(letfn [(fib [a b] (lazy-seq (cons b (fib b (+ a b)))))]\n    (take % (fib 0 1)))","user":"5c374db6e4b0d62ef62d9f73"},{"problem":26,"code":"(fn fib-inline\n    ([x] (remove nil? (flatten (vector 1 (fib-inline x 1)))))\n      ([x i] (vector 1 (fib-inline x 2 1 1)))\n        ([x i prev0 prev1]\n             (when (> x i)\n                    (if-let [thisvar (+ prev0 prev1)]\n                            (vector thisvar (fib-inline x (inc i) prev1 thisvar))))))","user":"570ab24fe4b0b0fb43fd06b7"},{"code":"(fn fibb [n]\n  (loop [result [1 1]\n         y 2\n         ]\n        \n        (if (< y n)\n          (recur (conj result (+ (nth result (- y 2)) (nth result (- y 1))))\n                 (inc y) \n                 )\n          ;else\n          (if (= n 1)\n            [1]\n            ;else\n            result\n            )\n          )\n        )\n  )","problem":26,"user":"50fb084ee4b0d10d794c19dd"},{"problem":26,"code":"(fn [n] \n  (take n ((fn fib [a b] \n     (cons a (lazy-seq (fib b (+ a b)))))\n    1 1))\n  )","user":"5630fd6fe4b0bfe05bf1178b"},{"problem":26,"code":"(fn fib [x] \n  (loop [s [1 1] ]\n    (if( = x (count s))\n      s\n      (recur (conj s (reduce + (take-last 2 s))))\n      )\n    )\n  )","user":"54c7b7c5e4b045293a27f63f"},{"code":"(fn [n] \r\n  (cond (= 1 n) '(1)\r\n        (= 2 n) '(1 1)\r\n        :else \r\n        (loop [p1 1 p2 1 c_n (- n 2) fib [1 1]]\r\n          (if (= c_n 0)\r\n            fib\r\n            (recur p2 (+ p1 p2) (dec c_n) \r\n                  (conj fib (+ p1 p2)))))))","problem":26,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"code":"(fn [limit]\r\n  ((fn [current acc]\r\n    (condp = limit\r\n      0 []\r\n      1 [1]\r\n      2 [1 1]\r\n      (if (= current limit) \r\n        acc\r\n        (let [secondlast (nth acc (- (count acc) 2))]\r\n          (recur (+ current 1) (conj acc (+ (last acc) secondlast)))))))\r\n    2 [1 1]))","problem":26,"user":"4e9528ef535dbda64a6f6b32"},{"code":"#(loop [i % n1 1 n2 1 elem '()]\n   (if (= i 0) (reverse elem) (recur (dec i) (+ n1 n2) n1 (conj elem n2))))","problem":26,"user":"527c0513e4b03e8d9a4a75ab"},{"code":"(fn fibo\n        ([n] (if (<= n 2) \n               (list)\n               (fibo n 3 [1 1])))\n        ([n c vs]\n           (if (< n c)\n             (apply list vs)\n             (fibo n (inc c) (conj vs (+ (vs (- c 3)) (vs (- c 2))))))))","problem":26,"user":"52c58561e4b0c2d177d620f8"},{"code":"(fn fib\n  [n]\n  (cond (<= n 1) [1]\n        (== n 2) [1 1]\n        :else (loop [accum (fib 2)\n                     m 2]\n                (if (< m n)\n                  (let [n1 (peek accum)\n                        n2 (peek (pop accum))]\n                    (recur (conj accum (+ n1 n2)) (inc m)))\n                  accum))))","problem":26,"user":"5339eb56e4b0e30313ee6cb2"},{"problem":26,"code":"#(take %\n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b))))) 1 1))","user":"5461500be4b01be26fd7469f"},{"code":"(fn this\n  ([i] (cond (zero? i) []\n             (= 1 i) [1]\n             (= 2 i) [1 1]\n             :else (this (- i 2) 1 1 [1 1]))) \n  ([i x y a] (if (zero? i) a (let [n (+ x y)] \n    (recur (dec i) y n (conj a n))))))","problem":26,"user":"4f614976e4b0defedf855fbb"},{"problem":26,"code":"(fn calc-fib [fib-num]\n  (cond\n     (= fib-num 1) [1]\n     (= fib-num 2) [1 1]\n     :else\n     (loop [i 3 coll [1 1]]\n       (if (= i fib-num)\n         (conj coll (+ (last coll)\n                       (last (drop-last 1 coll))))\n         (recur (inc i) (conj coll (+ (last coll) (last (drop-last 1 coll)))))))))","user":"5a055eace4b01bb0ae8afdb1"},{"problem":26,"code":"(fn [fib_n]\n  (loop [f0 1\n         f1 1\n         n fib_n\n         res []]\n    (if (= n 0)\n      res\n      (recur f1 (+ f1 f0) (dec n) (conj res f0)))))","user":"5d64013ce4b0c9e5857d502d"},{"code":"(fn [x]\r\n  (nthrest (reverse (loop [s '(1 0) l 0] \r\n         (if (= l (dec x)) s\r\n              (recur (conj s (+ (nth s 0) (nth s 1))) (inc l))))) 1))","problem":26,"user":"5184f9e9e4b02826a645f39e"},{"code":"(fn [x] (take x (rest (map first (iterate (fn [[a b]]\n  [b (+ a b)]) [0 1])))))","problem":26,"user":"4fa6a491e4b081705acca1bc"},{"problem":26,"code":"#(map (fn fib [n] (if (< n 2) 1 (+ (fib (dec n)) (fib (- n 2))))) (range %))","user":"55d95be7e4b0e31453f64ac9"},{"problem":26,"code":"(fn fibo [n]\n  (take n (map second \n                            (iterate (fn [ [prev cur] ]\n             [cur (+ prev cur)]) [0 1]))))","user":"579c8ad1e4b05b1deef9ae0c"},{"code":"(fn fib [x]\n  (cond\n    (= x 1) '(1)\n    (= x 2) '(1 1)\n    :else (\n      let [fx1 (fib (- x 1))]\n      (println x \"? \" fx1)\n      (reverse (list* (+ (last fx1) (second (reverse fx1))) (reverse fx1)))\n)))","problem":26,"user":"50bfd849e4b042992946c649"},{"problem":26,"code":"(fn [n] \n   (take n ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1))\n   )","user":"5fef5c6de4b05ac5b16ea1d8"},{"code":"(fn [x]\n  (loop [i 1 n_2 0 n_1 1 coll [1]]\n    (if (= i x) \n      coll\n      (recur (inc i) n_1 (+ n_2 n_1) (conj coll (+ n_2 n_1)))   \n     )))","problem":26,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn revfib [x] \n  (reverse((fn fib [x]\n  (if (= x 1) \n    '(1)\n    (if (= x 2)\n      (cons 1 (fib (- x 1)))\n      (cons (+\n             (nth (fib (- x 1)) 0) \n             (nth (fib (- x 1)) 1)\n             )\n            (fib (- x 1))\n            )\n      )\n    )\n  ) x)))","problem":26,"user":"52cefb7ee4b07d0d72b27397"},{"problem":26,"code":"(fn [cnt]\n  (loop [x 0\n         fnums []]\n    (if (= x cnt)\n      (seq fnums)\n      (recur (+ x 1)\n             (conj fnums (cond\n                           (= x 0) 1\n                           (= x 1) (get fnums 0)\n                           :else (+ (get fnums (- x 1)) (get fnums (- x 2)))))))))","user":"589e0024e4b02bd94d917e4e"},{"problem":26,"code":"#(take %\n       (map last(iterate (fn [[x y]] [y (+ x y)])\n                         [0 1])))","user":"57b88091e4b0fbc9809a27e1"},{"code":"#(loop [i 1 col '() a1 1 a2 1]\n  (if(<= i %1)\n    (if(= i 1)\n      (recur(inc i)(conj col a1)(inc (dec a1))(inc (dec a2)))\n      (if(= i 2)\n        (recur(inc i)(conj col a1)(inc (dec a1))(inc (dec a2)))\n        (recur(inc i)(conj col (+ a1 a2))(inc (dec a2))(+ a1 a2))\n      )\n    )\n    (reverse col)\n  )\n)","problem":26,"user":"527c0509e4b03e8d9a4a75aa"},{"code":"#(loop [c 0 s [1]]\n        (if (= % (inc c)) (sort s)\n            (recur (inc c) (conj s (apply + (take-last 2 s)))) \n        )\n    )","problem":26,"user":"52fba50ce4b047fd5583700d"},{"code":"#(map (fn fib [n] (if (<= n 1) n (+ (fib (- n 1)) (fib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"53722b80e4b0493c815db707"},{"problem":26,"code":"(fn [x] \n\t  (map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib (- n 1)) (fib (- n 2))))))\n\t  (range 1 (+ x 1))))","user":"55e46371e4b050e68259b44f"},{"code":"(fn [n] (take n '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":26,"code":"#(take % (map first (iterate (fn [ [a b] ] [b (+ a b)]) [1 1])))","user":"5e83696ce4b09a7a73c8bbb7"},{"problem":26,"code":"(fn fib [n]\n  (loop [s '(1 1) x (- n 2)]\n    (if (= x 0)\n      (reverse s)\n      (recur (cons (+ (first s)\n                      (second s))\n                   s)\n             (dec x)))))","user":"598601f9e4b021a7a535fe79"},{"problem":26,"code":"#(->> [1 1]\n      (iterate (fn [[m n]] [n (+ m n)]))\n      (map first)\n      (take %))","user":"5fe0d4d4e4b05ac5b16ea164"},{"problem":26,"code":"(fn [x] (reverse (reduce #(if (> %2 1) (conj %1 (+ (first %1) (second %1)))(conj %1 1)) '() (range  x ))))","user":"54d4b3a7e4b0a52adc2e2003"},{"problem":26,"code":"(fn [x] (loop [i  0\n       l1 0\n       l2 0\n       r  []]\n     (if (< i x)\n         (if (= l1 0)\n             (recur (inc i) 1 l1 (conj r 1))\n             (recur (inc i) (+ l1 l2) l1 (conj r (+ l1 l2))))\n         r)))","user":"53a0b730e4b0ca733b9744b5"},{"problem":26,"code":"#(letfn \n  [(f [n a b] \n    (if (= n 0) \n      '() \n      (cons b (f \n               (dec n) b (+ a b)\n               )\n       \n      )\n      )\n   )\n   ] (f % 0 1))","user":"5ddcf10ae4b0948ae9d9adbe"},{"code":"(fn [n]\n  (take n (map first (iterate (fn [[a b]] \n                        (list b (+ a b)))\n                        [1 1]))))","problem":26,"user":"4e73a9dc535dff18050a9c77"},{"code":"#(take %1\n  (->>\n    [1 1]\n    (iterate (fn [[a b]] [b (+ a b)]))\n    (map first)))","problem":26,"user":"4fab259ae4b081705acca212"},{"problem":26,"code":"#(take % (map first (iterate\n             (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5d764e52e4b02e6b30c93524"},{"code":"(fn [n]\n   ((fn fib [acc m]\n      (if (= m 0)\n        (take n (reverse acc))\n        (fib (cons (+ (first acc) (second acc)) acc) (- m 1)))) '(1 1) n))","problem":26,"user":"4ff355a1e4b0678c553fc34d"},{"problem":26,"code":"(fn\n  [n]\n  (map\n   first\n   (take\n    n\n    (iterate\n     (fn\n       [arr]\n       [(arr 1) (reduce + arr)]\n     )\n     [1 1]))))","user":"555f4bade4b0a2eb076a39c2"},{"problem":26,"code":"#(loop [c [1] q % n 1]\n   (if (= q 1)\n     c\n     (recur (conj c n) (dec q) (+ n (last c)))))","user":"5d62ce13e4b0c9e5857d501f"},{"problem":26,"code":"(fn\n  [n]\n  (loop [a 1\n         b 1\n         result ()]\n    (if (= n (count result))\n      (reverse result)\n      (recur b (+ a b) (cons a result)))))","user":"60593916e4b07e92fa001acc"},{"problem":26,"code":"(fn [n]\n  (loop [curr [1 1]]\n    (if (= n (count curr))\n      curr\n      (recur (conj curr \n                   (+ (first (reverse curr)) \n                      (second (reverse curr))))))))","user":"524379a4e4b076204b44fac0"},{"problem":26,"code":"#(take %\n  ((fn fib\n  ([] (fib 1 1))\n  ([a b] (lazy-seq (cons a (fib b (+ a b))))))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":26,"code":"(fn fibs [n]\n  (let [fib\n     (memoize (fn fib [n]\n\t\t(cond (= n 0) 1\n        \t  (= n 1) 1\n              :else (+ (fib (- n 2)) (fib (- n 1))))))]\n    (for [x (range n)] (fib x))))","user":"5cab33e7e4b048ec896c5c48"},{"problem":26,"code":"(fn [x] (letfn [(fib [a b ] (lazy-seq (cons b (fib b (+ a b))))  )] (take x (fib 0 1))     ))","user":"58060dace4b0a837a8b30cd5"},{"code":"(fn [n]\n  (loop [result [1 1]\n         i 2]\n    (if (< i n)\n      (recur (conj result (+ (last result) (last (drop-last result))))\n             (inc i))\n      result)))","problem":26,"user":"527818f7e4b03e8d9a4a7519"},{"problem":26,"code":"(fn \n  [n]\n     (take n(map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))\n )","user":"53e5736ce4b036ad0777e45a"},{"code":"(fn [x]\n (take x \n \t((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) \n \t1 1)))","problem":26,"user":"5203bc5be4b0fb7e47ea5205"},{"code":"#(take % \r\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"503d129fe4b06c4e0e1fa254"},{"problem":26,"code":"(fn [n] (seq (nth (iterate #(conj % (+ (last %) (last (butlast %)))) '[1 1]) (- n 2))))","user":"562117b4e4b064ca9f4b16ed"},{"problem":26,"code":"(fn fibo\n  ([x] (fibo x []))\n  ([x coll] (if (= (count coll) x)\n              coll\n              (fibo  x (conj coll (if ( < (count coll) 2)\n                                         1\n                                         (+ (last coll) (nth coll (- (count coll) 2))))\n                                  )\n                    )\n              )\n   )\n  )","user":"5564709ee4b0c656e3ff1807"},{"code":";; Horrible\n\n(fn [initial-x]\n      (reverse\n       (loop [fib '(1 1), x (- initial-x 2)]\n         (if (= x 0)\n           fib\n           (recur (cons (+ (first fib) (second fib)) fib) (dec x))))))","problem":26,"user":"5146f343e4b04ef915e3731e"},{"problem":26,"code":"(fn fib [x] (if (= x 1) [1] \n                (if (= x 2) [ 1 1]\n                  (conj (fib(- x 1))  (reduce + (take-last 2 (fib (- x 1)))))\n                )))","user":"55d35a01e4b0e31453f64a63"},{"code":"#(take % ((fn fibseq\n            [a b]\n            (lazy-seq\n              (cons a (fibseq b (+ a b)))))\n           1 1))","problem":26,"user":"50afc0f9e4b0c3f5ed5c29a3"},{"code":"(fn [x]\n  \"return the first x fibonacci numbers\"\n  (loop [remaining x a 1 b 1 result []]\n    (if (= 0 remaining)\nresult\n(recur \n  (dec remaining) \nb \n(+ a b) (conj result a)))))","problem":26,"user":"4e6ab9cb535d8ccf87e9fefe"},{"code":"(fn [n] (loop [l [1 1] i 3]\n      (cond\n        (> i n) l\n        :else (recur (conj l (apply + (take 2 (reverse l)))) (inc i))\n        )))","problem":26,"user":"4dbac43b535d1e037afb21ac"},{"problem":26,"code":"(fn [x]\n  (loop [acc 1\n         result []]\n    (cond (> acc x) (lazy-seq result)\n          (< acc 3) (recur (inc acc) (conj result 1))\n          :else\n          (recur (inc acc)\n                 (conj result\n                       (+ (last (butlast result))\n                          (last result)))))))","user":"4f0f7339535d0136e6c2233e"},{"problem":26,"code":"(fn [x]\n  (let [f (fn [x a b xs]\n            (if (= x 0)\n              xs\n              (recur (- x 1) b (+ a b) (concat xs [a]))))]\n    (f x 1 1 [])))","user":"5f5e7158e4b02876ed9fcff0"},{"problem":26,"code":"#(loop [i 2\n        acc [1 1]]\n   (if (= % i)\n     acc\n     (recur (inc i) (conj acc (reduce + (take-last 2 acc))))))","user":"5cbc9dace4b026601754b9eb"},{"code":"(fn [n]\n  (map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f608e38e4b0defedf855fa8"},{"code":"(fn [n]\n(take n\n    ((fn []\n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n    ))","problem":26,"user":"4ec92a04535d6d7199dd36fa"},{"code":"#(take % ((fn fib [n m] (lazy-seq (cons n (fib m (+ n m))))) 1 1))","problem":26,"user":"4fef481ce4b0678c553fc314"},{"code":"#(let [n (- % 1)]\n  \t\t(loop [i 2 r [1 2]]\n\t\t\t\t(if (>= i n) \n\t\t\t\t\t(cons 1 r)\n\t\t\t\t\t(recur (inc i) (conj r (+ (last r) (last (butlast r)))))\n\t\t\t\t)\n\t\t\t)\n\t)","problem":26,"user":"4f56d6f3e4b0a7574ea7182c"},{"code":"#(map \r\n   (fn fib2 [i] \r\n     (if (<= i 1)\r\n     i \r\n     (+ (fib2 (- i 1)) (fib2 (- i 2)))))\r\n  (range 1 (+ 1 %)))","problem":26,"user":"4e73debb535d7a570dd295b7"},{"code":"(fn fib [n]\r\n  (map #(second %) (take n \r\n    (iterate\r\n      (fn [pair]\r\n        (let [a (pair 0) b (pair 1)]\r\n          [b (+ a b)]\r\n        )\r\n      )\r\n      [0 1])\r\n    )))","problem":26,"user":"4f0348b4535dcb61093f6a84"},{"code":"#( map second ( take % (iterate ( fn  [ [ a  b ] ] [ b (+ a b) ] ) [0 1] )))","problem":26,"user":"53029281e4b0d8b024fd372e"},{"problem":26,"code":"(fn [x] \n  (lazy-seq\n    ((fn fib\n      [a, b, acc]\n      (if (= x (count acc))\n           acc \n           (fib b (+ a b) (conj acc (+ a b)))))\n   0 1 [1])))","user":"545f7b09e4b01be26fd74689"},{"code":"(fn [n]\r\n  (take n\r\n    (map first (iterate\r\n           (fn [sq]\r\n                [(second sq) (+ (first sq) (second sq))])\r\n           [1 1]))))","problem":26,"user":"4f71db68e4b07046d9f4f015"},{"code":"(fn fib [c]\n  (cond\n    (= c 1) [1]\n    (= c 2) [1 1]\n    :else (conj (fib (dec c))\n                      (+ (last (fib (dec c))) (last (fib (- c 2))) ) \n                      )))","problem":26,"user":"50b32252e4b03ea880433568"},{"problem":26,"code":"#(loop [n % l [1]]\n   (if (= 1 n)\n     l\n     (recur (- n 1) \n            (conj l (apply + (take-last 2 l))))))","user":"54f0c18ee4b024c67c0cf8a4"},{"problem":26,"code":"(fn [n]\n  (->> '(1 1)\n    (iterate #(conj % (+ (first %) (second %))))\n    (take (dec n))\n    (last)\n    (reverse)))","user":"5c24671be4b07e362c2305a1"},{"code":"#(reverse ((fn fib [n]\n  (if (<= n 2)\n    '(1 1)\n    (let [f (fib (dec n))\n          p1 (first f)\n          p2 (first (rest f))\n          val (+ p1 p2)]\n      (conj f val)))) %1))","problem":26,"user":"524a3003e4b05ef8e38e6496"},{"problem":26,"code":"(fn [n]\n  (take n [1 1 2 3 5 8 13 21]))","user":"4f47daade4b0d56e7bb92bc4"},{"problem":26,"code":"(fn [n]\n(take n ((fn fibonacci[a, b]\n  (cons a (lazy-seq (fibonacci b (+ b a))))\n  )\n1 1)))","user":"552d487ee4b076ab5578f7e4"},{"problem":26,"code":"#(loop [my-count 1 my-fib [0 1]]\n     (if (= my-count %)\n        (rest my-fib)\n        (recur (inc my-count)\n               (conj my-fib (+ (last my-fib)\n                              (nth my-fib (- my-count 1)))))))","user":"55dfada4e4b050e68259b3fd"},{"code":"#(map (fn ffib [n] (cond (= n 1) 1 (= n 2) 1 :else (+ (ffib (- n 1)) (ffib (- n 2))))) (range 1 (inc %)))","problem":26,"user":"4f1c9652535d64f603146483"},{"problem":26,"code":"(fn [x]\n  (map\n   (fn fib [n] (if (< n 3)\n      1\n      (+\n       (fib (- n 1))\n       (fib (- n 2)))))\n   (range 1 (+ x 1))))","user":"58836dbee4b0f1effa3b7679"},{"problem":26,"code":"(fn fibo\n  [x]\n  (if (> x 2)\n    (seq (conj (vec (fibo (dec x))) (+ (first (reverse (fibo (dec x)))) (second (reverse (fibo (dec x)))))))\n    (if (= 2 x)\n      '(1 1)\n      (if (= 1 x)\n        '(1)\n        '()\n     \t)\n      )\n    )\n  )","user":"56de78fde4b0ea9b8538f83c"},{"problem":26,"code":"(fn [n]\n  (loop [i 0\n         result []]\n    (cond\n     (= i n) result\n     (= i 0) (recur (inc i) (conj result 1))\n     (= i 1) (recur (inc i) (conj result 1))\n     :else (recur (inc i) (conj result (+ (nth result (- i 2)) (nth result (- i 1))))))))","user":"56156feee4b05f002753dfc5"},{"problem":26,"code":"(fn [x]\n  (loop [a 1\n         b 1\n         n x\n         l '()]\n    (if (= n 0)\n      (reverse l)\n      (recur b (+ a b) (- n 1) (cons a l)))))","user":"54651982e4b01be26fd746d4"},{"problem":26,"code":"(fn [x]\n  (loop [x x c 0 d 1 fib []]\n    (if (= 0 x)\n      (seq fib)\n      (recur (dec x) d (+ c d) (conj fib d)))))","user":"57f0a9fde4b0bfb2137f5bf6"},{"code":"(fn this\n  ([n] (if (= n 1) [1]\n         (if (= n 2) '[1 1]\n           (this (- n 2) 1 1 [1 1]))))\n  ([n i j s] (if (< n 1) s (this (dec n) j (+ i j) (conj s (+ i j))))))","problem":26,"user":"525f66c6e4b03e8d9a4a7007"},{"problem":26,"code":"#(loop [n 2 f [1 1]]\n              (if (< n %)\n                (recur (inc n) (conj f (+ (f (- n 1)) (f (- n 2)))))\n                f))","user":"545bdf75e4b01be26fd7465b"},{"problem":26,"code":"(fn [x]\n  (loop [l x\n  \t\t prev 0\n  \t\t cur 1\n  \t\t res '(1)]\n    (if (> l 1)\n      (let [n (+ prev cur)]\n    \t(recur (- l 1) cur n (concat res [n])))\n      res)))","user":"5554ae14e4b0deb715856e0e"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 1)\n      '(1)\n      (if (= n 2)\n          '(1 1)\n          (let [res (reverse (fib (- n 1)))]\n            (reverse (cons (+ (first res) (second res))\n                  res))))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"(fn [k]\n  (reverse (loop [coll '() n k m 1]\n    (cond \n      (<= n 0) coll\n      (<= m 2) (recur (cons 1 coll) (- n 1) (inc m))\n      true (recur (cons (+ (first coll) (second coll)) coll) (- n 1) (inc m)) ))))","problem":26,"user":"531792d9e4b08068f379ed5e"},{"code":"#(take %1 \n  ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   1 1))","problem":26,"user":"52d81990e4b09f7907dd1388"},{"code":"#(take %1 ((fn fab [a b] \n            (cons a \n                  (lazy-seq (fab b (+ a b)))\n                  )\n             ) 1 1))","problem":26,"user":"50655366e4b0c838e409d557"},{"code":"(fn [y]\n  (reverse ((fn fibo-to [stopAt, countedTo, soFar]\n     (cond (> countedTo stopAt) soFar\n           :else (fibo-to stopAt (+ 1 countedTo) (cond (= 0 countedTo) (conj soFar 1)\n                                                 (= 1 countedTo) (conj soFar 1)\n                                                 :else (conj soFar (+ (first soFar) (first (rest soFar))))))))\n   (- y 1) 0 '())))","problem":26,"user":"53407963e4b085b17e897dad"},{"problem":26,"code":"(fn fibo [n]\n  \"Evaluates nth element of Fibonacci sequence\"\n  (case n\n        1 `[ 1 ]\n        2 `[ 1 1 ]\n        (let [result (fibo (dec n))]\n          (conj result (+ (last result) (last (butlast result)))))))","user":"55a016fde4b0acc240e314f1"},{"code":"(fn fib\n  [x]\n  (map first (take x (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"51f549c4e4b0abb92f97f9cb"},{"problem":26,"code":"(fn [s] (take s (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5ebd3e7ae4b00a66d4a9526f"},{"problem":26,"code":"(fn fib [n]\n  (loop [index 0, acc []]\n    (if (= index n)\n        acc\n        (recur (inc index)\n               (conj acc (cond\n                           (= index 0) 1\n                           (= index 1) 1\n                           :else (+ (get acc (- index 1)) (get acc (- index 2)))))))))","user":"5812eb8fe4b0f478707a0602"},{"problem":26,"code":"(fn [n]\n    (loop [\n       n n\n       a 0\n       b 1\n       fibs []]\n    (if (> n 0)\n        (recur (dec n) b (+ a b) (conj fibs b))\n        fibs)))","user":"563a79e5e4b0bfe05bf117fe"},{"problem":26,"code":"#(reverse (loop [[p c r res] [0 1 % '()]]\n   (if (= r 0)\n     res\n     (recur [c (+ p c) (- r 1) (conj res c)]))))","user":"5c1edf23e4b0efcb0b05b25d"},{"problem":26,"code":"#(take % ((fn r [a b] (lazy-seq (cons a (r b (+ a b))))) 1 1))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn [n] \n  (take n \n        (map first \n             (iterate \n              (fn [[a b]] [b (+ a b)]) \n              [1 1])\n             )\n        )\n  )","problem":26,"user":"53864493e4b06839e8705f10"},{"code":"#(take % ((fn i2 [x y] (lazy-cat [x] (i2 y (+ x y)))) 1 1))","problem":26,"user":"5281a445e4b0757a1b17143a"},{"problem":26,"code":"(fn [x] (\n\tletfn [ \n          (fib-h [a fibs]\n           \t(cond \n               (<= a 0) fibs\n               :else (fib-h (- a 1) \n                                   (conj fibs (+ (nth fibs 0) \n                                                          (nth fibs 1))))))]\n         (reverse (fib-h (- x 2) (list 1 1)))))","user":"521f24ebe4b0e6c71e0c0bcd"},{"problem":26,"code":"(fn fib [v p1 p2 i] \n  (if (= i (count v))\n    v\n    (recur (conj v p2) p2 (+ p1 p2) i)\n  )\n) [] 0 1","user":"5f81de6ce4b0c071e6c840f5"},{"code":"(fn [n]\n  (loop [result '()]\n    (cond\n      (= (count result) n) (reverse result)\n      (= (count result) 0) (recur (conj result 1))\n      (= (count result) 1) (recur (conj result 1))\n      :else (recur (conj result (+ (first result) (second result))))\n    )\n  )\n)","problem":26,"user":"5230ba23e4b0035e815da393"},{"problem":26,"code":"#(loop [a 1 b 1 n % acc nil]\n   (if (= n 0)\n     (reverse acc)\n     (recur b (+ a b) (dec n) (cons a acc))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn fib [n]\n  (if (= n 0)\n    []\n    (if (= n 1)\n      [1]\n      (if (= n 2)\n        [1 1]\n        (let [prev (fib (- n 1))]\n          (conj prev (+ (nth prev (- n 2))\n                     (nth prev (- n 3)))))))))","problem":26,"user":"4fd73610e4b0dab7d829f37e"},{"code":"#(take % (map first (iterate\r\n  (fn [[x y]] [(+ x y) x])\r\n  [1 0])))","problem":26,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn fib [n]\n  (take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","problem":26,"user":"518ad8fce4b06da86c1973c1"},{"code":"(fn fib [x]\n  (if (= x 1) '(1) \n    (if (= x 2) '(1 1)\n      (let [p (fib (dec x))]\n       (concat p [(reduce + (take-last 2 p))])\n      )\n    )\n  )\n)","problem":26,"user":"50959df3e4b087f34d351ab4"},{"code":"(fn [n]\n  (loop [acc [1]]\n    (if (= (count acc) n)\n      acc\n      (let [n1 (acc (dec (count acc)))\n            n2 (if (>= (count acc) 2)\n                 (acc (- (count acc) 2))\n                 0)\n            next-fibonacci (+ n1 n2)]\n        (recur (conj acc next-fibonacci))))))","problem":26,"user":"52c4756fe4b0c2d177d620db"},{"problem":26,"code":"#(map (fn [[x y]] x) (take %1 (iterate (fn [[x y]] [y (+ x y)] ) [1 1] )))","user":"53fcdd1ae4b0de5c418485dd"},{"problem":26,"code":"#(letfn [(fab [n]\n             (if (< n 2)\n               1\n               (+ (fab (dec n)) (fab (dec (dec n))))))]\n (map fab (range %1)))","user":"576aea4fe4b0a07e8fc18126"},{"problem":26,"code":"(fn fib [n]\n  (if (= n 2)\n      '(1 1)\n      (let [prev (fib (dec n))\n            l1 (last prev)\n            l2 (last (butlast prev))]\n        (concat prev (list (+ l1 l2))))))","user":"548fa2dfe4b0e286459a1240"},{"problem":26,"code":"(fn [x] (loop [ start_sequence [1,1] nums 2 ] \n          (if (> nums x) \n            (first (split-at x start_sequence))\n            (recur (conj start_sequence (+ (last(drop-last start_sequence)) (last start_sequence) )) (+ nums 1))\n            )\n          ) \n)","user":"542baf7ce4b0dad94371f291"},{"code":"(fn fib\n    ([x]\n     (if (= x 1)\n         [1]\n         (if (= x 2)\n             [1 1]\n             (concat [1 1] (fib 1 1 (dec (dec x)))))))\n    ([x y c]\n     (if (= c 1)\n         [(+ x y)]\n         (concat [(+ x y)] (fib y (+ x y) (dec c)))))\n  )","problem":26,"user":"53201eece4b08068f379edce"},{"problem":26,"code":"(fn [arg]\n  (loop [s []\n         n arg\n         f1 1\n         f2 1]\n    (if (< n 1)\n      s\n      (recur (conj s f1)\n             (dec n)\n             f2\n             (+ f1 f2))\n      )\n    )\n  )","user":"60486e8ae4b02d28681c77db"},{"code":"(fn fib-seq [n]\n  (take n ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4ed7b617535d10e5ff6f52f3"},{"code":"(fn [x] (loop [result [] i -1] (if (= x (count result)) \n                                (sort (into () result)) \n                                (if (or (= [] result) (= [1] result)) \n                                  (recur (conj result 1) (inc i)) \n                                  (recur (conj result (+ (get result (- i 1)) (get result i))) (inc i))))))","problem":26,"user":"513ca934e4b0b86ece9f3228"},{"problem":26,"code":"(fn [x] \n  (take x \n    ((fn fib [a b] \n       (cons a (lazy-seq (fib b (+ a b))))\n      ) 1 1)\n   )\n )","user":"53a19dece4b0ca733b9744c0"},{"problem":26,"code":"#(loop [arr [1 1]]\n\t(if (= (count arr) %)\n       (seq arr)\n       (recur\n        (conj arr (+ (nth arr (- (count arr) 1)) (nth arr (- (count arr) 2)))\n        )\n       )\n     )\n   )","user":"59a06dbce4b0871e7608b834"},{"problem":26,"code":"(fn [n]\n  (let [f (fn fib[n]\n            (cond \n            (= 0 n) '(1)\n            (= 1 n) '(1 1)\n            :else\n            (let [x2 (fib (- n 2))\n                  x1 (fib (- n 1))]\n              (conj x1 (+ (first x2) (first x1))))))]\n    (reverse (f (- n 1)))))","user":"602049b8e4b0bf4ca6b10961"},{"problem":26,"code":"#(reduce (fn [s _]\n           (conj s (reduce + (take 2 (reverse s)))))\n         [1 1]\n         (repeat (- % 2) nil))","user":"5c1fe56ae4b07e362c23056e"},{"problem":26,"code":"(fn [n]\n  (loop [out []\n         i n\n         a 0\n         b 1]\n    (if (= i 0)\n      (seq out)\n      (recur (conj out b) (- i 1) b (+ a b)))))","user":"57650419e4b0994c1922fc09"},{"code":"(fn [n] (map #(let [phi (/ (+ 1 (Math/sqrt 5)) 2)] (Math/round (/ (- (Math/pow phi %) (Math/pow (- phi) (- %))) (Math/sqrt 5)))) (range 1 (+ n 1))))","problem":26,"user":"53137526e4b08068f379ed09"},{"problem":26,"code":"#(reduce (fn [a c] (conj a (reduce + (take 2 (reverse a))))) [1] (range 1 %))","user":"5d63f1c2e4b0c9e5857d502b"},{"code":"(fn fib \n  ([n]\n\t\t(cond   (= n 1) '(1)\n\t\t\t\t(= n 2) '(1 1)\n\t\t\t\ttrue (fib 1 1 (- n 2) (fib 2))))\n\t([x y n lst]\n\t\t(cond\t(= n 0) lst\n\t\t\t\ttrue (fib y (+ x y) (dec n) (reverse (conj (reverse lst) (+ x y)))))))","problem":26,"user":"4e5fda32535d8ccf87e9fe4e"},{"problem":26,"code":"(fn [n]\n  (loop [prev 0 cur 1 count n res (list 1)]\n    (if (= count 1)\n      (reverse res)\n      (recur cur (+ prev cur) (dec count) (conj res (+ prev cur))))))","user":"55f1f0d1e4b06e875b46ce3b"},{"code":"(fn [x] (take x ((fn lfib [a b] (cons a (lazy-seq (lfib b (+ a b))))) 1N 1N)))","problem":26,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":26,"code":"(fn \n  [x]\n  (loop [f1 0\n         f2 1\n         i x\n         fib []]                                                                \n    (if (= i 0)\n      fib\n      (recur f2 (+ f1 f2) (dec i) (conj fib f2))))\n  )","user":"571b900ae4b07c98581c3b69"},{"problem":26,"code":"(fn [n]\n  (loop [rem (dec n)\n           second-last-elem 0\n           last-elem 1\n           acc [1]]\n      (if (zero? rem)\n        acc\n        (let [new-elem (+ second-last-elem last-elem)\n              acc (conj acc new-elem)\n              second-last-elem last-elem\n              last-elem new-elem\n              rem (dec rem)]\n          (recur rem second-last-elem last-elem acc)))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":26,"code":"(fn [n](take n ((fn fib-recur [a b] \n               (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"607f3336e4b05857a65e7747"},{"problem":26,"code":"#(loop [size % \n        res [1 1] \n        l (last res)]\n   (if-not (= size 2)\n     (recur (dec size) (conj res (+ l (last res))) (last res))\n     res))","user":"55614155e4b0c656e3ff17c4"},{"problem":26,"code":"(fn [x]\n  (let [f (memoize\n           (fn fib [num]\n             (case num\n               0 0\n               1 1\n               (+ (fib (- num 1))\n                  (fib (- num 2))))))]\n    (map f (take x (iterate inc 1)))))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":26,"code":"(fn\n    [num]\n    (reverse (loop [idx 2\n                    p 1\n                    pp 1\n                    result '(1 1)]\n               (if (<= num idx)\n                 result\n                 (recur (+ 1 idx) (+ p pp) p (conj result (+ p pp)))))))","user":"56f8055ee4b08e7d20b96835"},{"code":"(fn fib [n]\n  (if (= n 1)\n    [1]\n  (if (= n 2)\n    [1 1]\n  (loop [i 3 acc [1 1]]\n    (if (> i n)\n      acc\n    (recur (inc i) (conj acc (reduce + (take-last 2 acc)))))))))","problem":26,"user":"51df505be4b01188f062752a"},{"problem":26,"code":"(fn [n]\n  (reverse (loop [x 1\n         acc '(1)]\n    (if (= n (count acc))\n         acc\n         (recur (+ x (first acc)) (cons x acc))))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":26,"code":"(fn fib [n]\n  (if (< n 3)\n    [1 1]\n    (let [previous (fib (dec n))]\n      (conj previous (+ (last previous) (second (reverse previous)))))))","user":"58f00639e4b056aecfd47ddc"},{"problem":26,"code":"(fn [n] (take n\n  (map first\n    (iterate #(vector (second %) (+ (first %) (second %))) [1 1]))))","user":"4f577f25e4b0a7574ea71839"},{"problem":26,"code":"(fn [x]\n  (letfn [(fib [n]\n            (if (or (= n 1)\n                    (= n 0))\n              1\n              (+ (fib (dec n))\n                 (fib (- n 2)))))]\n    (map #(fib %) (range 0 x))))","user":"534fa1a8e4b084c2834f4ace"},{"problem":26,"code":"(fn [z]\n  (loop [x z y ()]\n    (if (> x 0)\n      (if (> x (- z 2)) (recur (dec x) (concat y [1]))\n          (recur (dec x) (concat y [(+ (last y) (last (butlast y)))]))\n          )\n      y\n      )\n    )\n  )","user":"5512b15ae4b055c2f668d4b5"},{"code":"(fn nfib [n]\n  (let [fib (memoize (fn fib\n          [x]\n          (cond\n           (= x 1) 1\n           (= x 2) 1\n           :default (+ (fib (- x 1)) (fib (- x 2))))))]\n    (map fib (drop 1 (range (+ n 1))))))","problem":26,"user":"5257e2ace4b0cb4875a45c9a"},{"problem":26,"code":"(fn [acc a b n] \n  (if (<= n 2) \n    (conj acc a b) \n    (recur (conj acc a) b (+ a b) (dec n)))) [] 1 1","user":"57a4bb65e4b0a966079561eb"},{"problem":26,"code":"(fn [n]\n  (loop [i 0 pprev 1 prev 1 fib []] \n    (if (= i n) fib\n      (recur (inc i) prev (+ prev pprev) (conj fib pprev))\n      )))","user":"53e76bb2e4b036ad0777e47d"},{"code":"#(take % \n  (map first \n    (iterate (\n      fn [[x y]] [y (+ x y)])\n      [1 1])))","problem":26,"user":"4e584256535d8a8b8723a28e"},{"problem":26,"code":"(fn [n]\n  (loop [a 1 b 0 n n s []]\n    (if (> n 0)\n      (recur (+ a b) a (dec n) (conj s a))\n      (seq s))))","user":"5703cbbee4b08d47c97781fb"},{"problem":26,"code":"#(letfn [(fib [n] (cond (= 0 n) 1 (= 1 n) 1 true (+ (fib (- n 1)) (fib (- n 2)))))] (map fib (range %)))","user":"5703eda3e4b08d47c9778200"},{"problem":26,"code":"(fn \n  [num & res]\n  (if (> num 0)\n    (case (count res)\n      0 (recur (- num 1) [1])\n      1 (recur (- num 1) (conj res 1))\n      (recur (- num 1) (conj res (+ (last res) (-> res pop last))))\n      )\n    res))","user":"5412646de4b01498b1a719d4"},{"problem":26,"code":"#(take % (map first (iterate (fn [initial] [(last initial) (reduce + initial)]) [1 1])))","user":"55e3a685e4b050e68259b446"},{"code":"(fn fib [n]\n  ((fn [acc prev1 prev2 n]\n     (if (zero? n)\n       acc\n       (recur (conj acc prev1) prev2 (+ prev1 prev2) (dec n))))\n   [] 1 1 n\n     ))","problem":26,"user":"51b8e0dce4b050a1176cd69f"},{"problem":26,"code":"(fn [iters] \n  (loop [result [1 1]] \n    (if (= (count result) iters) \n      result \n      (recur (concat result  [(+ (last result) (second (reverse result)))])))))","user":"56066e82e4b08b23635d3173"},{"code":"(fn [x] (take x ((fn fib [a b] (cons a (lazy-seq (fib b (+' b a))))) 1 1)))","problem":26,"user":"535a80b1e4b04ce2eb3ed2a7"},{"code":"(fn fi [n] (\n               loop [ n n a [1] b [0] ]\n                (if (= n 1)\n                  a\n                  (recur (dec n) (conj a (+ (last a) (last b)))\n                         (conj b (last a)))\n                  )  \n                )\n      )","problem":26,"user":"51f81925e4b09be9c177e526"},{"problem":26,"code":"#(take % ((fn []\n       ((fn rfib [a b]\n          (lazy-seq (cons a (rfib b (+ a b)))))\n        1 1))))","user":"53342e21e4b019098a6f8b8c"},{"problem":26,"code":"(fn [n]\n          (loop [i 0 r []]\n            (cond\n             (= i n) r\n             (#{0 1} i) (recur (inc i) (conj r 1))\n             :else (let [rr (reverse r)]\n                     (recur (inc i) (conj r (+ (first rr) (second rr))))))))","user":"54b13dbce4b09f271ff37d1c"},{"problem":26,"code":"(fn [num]\n  (reverse\n    (reduce \n      (fn [coll n] (conj coll (+ (first coll) (second coll))))\n      '(1 1)\n      (range (- num 2))\n      )))","user":"5bf1b957e4b0a6d31fed216f"},{"code":"(fn [n]\n  (loop [a 1 b 1 fibs [1 1]]\n    (if (= n (count fibs))\n        fibs\n        (recur b (+ a b) (conj fibs (+ a b))))))","problem":26,"user":"4ee645f8535d93acb0a6685d"},{"code":"(fn [n]\n  (loop [i 0 acc nil]\n    (if (= i n)\n        acc\n        (recur\n          (+ i 1)\n          (concat acc (if (= i 0)\n                           '(1)\n                           (list (reduce + (take-last 2 acc)))))))))","problem":26,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":26,"code":"(fn [n]\n  (reverse \n   ((fn fibo [x y res counter]\n    (if (= counter n)\n      res\n      (recur y (+ x y) (conj res y) (inc counter))))\n   1 1 '(1) 1)))","user":"607a1523e4b0a637ed78036a"},{"problem":26,"code":"(fn [x] (loop [a [1 1] b 2] (if (>= b x) a (recur (conj a (+ (last a) (last (butlast a)))) (inc b)))))","user":"55a02d8ae4b0acc240e314f2"},{"problem":26,"code":"(fn fib [n]\n  (\n    (fn innerFib [fibSequence n]\n      (if (= n 0)\n        fibSequence\n        (innerFib\n          (conj fibSequence (+\n            (last fibSequence)\n            (last (butlast fibSequence))\n          ))\n          (- n 1)\n        )\n      )\n    )\n    [1 1] (- n 2)\n  )\n)","user":"5f7251b9e4b02876ed9fd08a"},{"code":"#(take % (map first\n              (iterate (fn [[a b]]\n                           [b (+ a b)])\n                       [1 1])))","problem":26,"user":"5363f11be4b0243289761e5f"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         i 0\n         res (list)]\n    (if (= i n) (reverse res)\n      (recur b (+ a b) (inc i) (conj res a)))))","user":"55ad0e18e4b03311e7b7329c"},{"problem":26,"code":"#(letfn [(fac [n] (cond (= 0 n) 1\n                        (= 1 n) 1\n                        :else (+ (fac (- n 1)) (fac (- n 2)))))]\n        (map fac (range %))\n        )","user":"548af5b5e4b0e286459a11f8"},{"problem":26,"code":"(fn[num]\n  (loop [s [1] prev 0]\n    (if (= (count s) num)\n      s\n      (recur (conj s (+ (last s) prev)) (last s))\n    )\n  )\n)","user":"571172ece4b09c608db70446"},{"code":"(fn [n]\n  (letfn [(fib [x]\n            (if (or (= x 0) (= x 1))\n              x\n              (+ (fib (- x 1)) (fib (- x 2)))))]\n     (map #(fib %) (range 1 (+ n 1)))))","problem":26,"user":"4e667f67535d8ccf87e9fe77"},{"code":"(fn [l]\n  (loop [n 1\n         p [1] \n         l l]\n    (cond\n     (= l 1) p\n     (> l 0) (recur (+ (last p) n) (conj p n) (- l 1)))))","problem":26,"user":"52e4361fe4b09f7907dd144d"},{"problem":26,"code":"#(take %\n      (map first\n           (iterate (fn [[n-2 n-1]] [n-1 (+ n-2 n-1)])\n                    [1 1])))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"#(loop [a 1 b 1 n % l '()]\n  (if (pos? n)\n      (recur b (+ a b) (dec n) (conj l a))\n      (reverse l)))","problem":26,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":26,"code":"(fn fo [numb]\n        (loop [f1 0 f2 1 cont 1 temps '(1 )] \n          (if (< cont numb)\n            (recur f2 (+ f2 f1) (inc cont) (conj temps (+ f2 f1 ))) \n            (reverse temps)\n            )\n          )\n        )","user":"6038b6b4e4b0d5df2af222ef"},{"problem":26,"code":"(fn [n] (loop [r [1] a 0 b 1 i (- n 1)] (if (zero? i) r (recur (conj r (+ a b)) b (+ a b) (- i 1)))))","user":"54f14538e4b024c67c0cf8ae"},{"problem":26,"code":"#(loop [coll (reverse %1) x (dec %2)]\r\n    (if (zero? x)\r\n      (rest (reverse coll))\r\n      (recur (cons (reduce + (take 2 coll)) coll) (dec x)))) '(0 1)","user":"5dbf0281e4b0e59a23173d75"},{"problem":26,"code":"(fn [x]\n  (loop [counter 2 fib [1 1]]\n    (if (< counter x)\n      (recur \n       (inc counter) \n       (conj fib (+ (last fib) (last (butlast fib))))\n      )\n      fib \n    )\n   )\n)","user":"5d62da51e4b0c9e5857d5020"},{"problem":26,"code":"#(take % (letfn [(fib-seq [prev-n next-n]\n                    (cons next-n (lazy-seq (fib-seq next-n (+ prev-n next-n)))))]\n      (fib-seq 0 1)))","user":"55df1985e4b050e68259b3eb"},{"code":"(fn [n]\n  (loop [xs '(1 1) m n]\n  (let [f ((fn [xs]\n    (concat xs (list (+ (last xs) (last (drop-last xs))))\n            )) xs)] \n   (if (= m 2) xs (recur \n    f (- m 1)  \n ))\n)\n)\n)","problem":26,"user":"52d829a8e4b09f7907dd1389"},{"code":"(fn [n]\r\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\r\n)","problem":26,"user":"5184f4fce4b02826a645f39d"},{"code":"(fn fib [n]\n  (nth \n   (iterate \n    (fn [s] \n      (conj s (reduce + (take-last 2 s)))) \n    [1 1]) \n   (- n 2)))","problem":26,"user":"5245e25ae4b09dbe66b56176"},{"problem":26,"code":"(fn [x] (reduce (fn [c n] (cond (= n 0) (conj c 1)\n                                (= n 1) (conj c 1)\n                                :else (conj c (+ (last c)\n                                                 (nth c (- (count c) 2))))))\n                          [] (range x)))","user":"5d0af5cbe4b0cc9c91588228"},{"problem":26,"code":"(fn my-fib [n]\n  (loop [i 0\n        a 0 \n        b 1\n        l []]\n    (if (< i n)\n      (recur (inc i) b (+ a b) (conj l b))      \n      (seq l)\n    )          \n  )\n)","user":"60335b35e4b0d5df2af222bf"},{"code":"(fn fib [x]\n  (if (> 3 x)\n    (if (= 2 x) [1 1] [1])\n    (conj\n      (fib (- x 1))\n      (+\n        (first (reverse (fib (- x 1))))\n        (second (reverse (fib (- x 1))))))))","problem":26,"user":"517f5db1e4b09104ecebe7ef"},{"code":"#(take % (map (fn fib [n] (if (< n 2) 1 (+ (fib (dec n)) (fib (- n 2))))) (range)))","problem":26,"user":"4f030bb4535dcb61093f6a4a"},{"problem":26,"code":";; I guess this will take me a little more time ^^;\n;; step 1: look up the fibonacci algorithm, cause I don't have it memorized\n\n;; source: https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\n;; The Fibonacci numbers are the numbers in the following integer sequence.\n;; 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..\n;; In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation \n;; Fn = Fn-1 + Fn-2\n;; with seed values \n;; F0 = 0 and F1 = 1.\n;; ... OK, I'm ready to start :)\n\n;; note: I had to go to an external editer to do some REPL driven development ;)\n(fn fib-range [x]\n  (map\n   (fn fib [n]\n     (cond\n      (= n 0) 0\n      (= n 1) 1\n      (> n 1) (+ (fib (dec n))\n                 (fib (dec (dec n))))))\n      (range 1 (inc x))))","user":"60917abde4b00e9e6653c3d5"},{"problem":26,"code":"(fn [x] (loop [c 2 ans [1 1] f 1 s 1] (if (= c x) (apply list ans) (recur (+ 1 c) (conj ans (+ f s)) s (+ f s)))))","user":"56ccbeb7e4b0ea9b8538f740"},{"problem":26,"code":"(partial (fn [curr next output n]\n           (if (zero? n)\n             (into '() output)\n             (recur next (+ curr next) (cons curr output) (dec n)))) 1 1 '())","user":"58db362be4b0a4d5acaab675"},{"code":"#(take %\n  (map last (iterate\n   (fn [v]\n     (conj v (+ (last v) (nth v (- (count v) 2))))) [0 1])))","problem":26,"user":"509ecefde4b08df8156e9e35"},{"code":"(fn fib[n]\n  (take n \n    ((fn rfib[a b] \n       (lazy-seq (cons a (rfib b (+ a b))))) 1 1)))","problem":26,"user":"525d490ae4b0cb4875a45d70"},{"code":"#(loop [a 1 b 1 circle (- % 2) result [1 1]]\n              (cond\n                (<= % 0) (seq [])\n                (= % 1) (seq [1])\n                (= % 2) (seq [1 1])\n                (> % 2) (if (= circle 0) (seq result)\n                          (recur b (+ a b) (dec circle) (conj result (+ a b))\n                          ))\n                ))","problem":26,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn [x]\n  ((fn [cur-a cur-b acc n]\n    (if (= 0 n)\n      acc\n      (recur cur-b (+ cur-a cur-b) (conj acc (+ cur-a cur-b)) (dec n)))) 1 1 [1 1] (- x 2)))","problem":26,"user":"529227cfe4b0239c8a67af27"},{"problem":26,"code":"(fn [len]\n  (apply list\n         (loop [n len fib [1 1]]\n           (if (= (- n 2) 0) fib\n               (recur (dec n) (conj fib (+ (peek fib) (peek (pop fib)))))))))","user":"5bcee7d9e4b0e9689409ee22"},{"problem":26,"code":"(fn fibo-list\n  ([value]\n    (fibo-list value '()))\n  ([value listus]\n   (if (= value 0)\n      listus\n      (fibo-list (- value 1) (cons ((fn fibo \n  [value]\n  (cond\n    (= value 1)\n      1\n    (= value 0)\n      0\n    :else (+ (fibo (- value 1)) (fibo (- value 2))))) value) listus)))))","user":"5577b403e4b05c286339e086"},{"problem":26,"code":"#(take % (list 1 1 2 3 5 8 13 21))","user":"4f528f70e4b03ad3f0c10d3f"},{"problem":26,"code":"(fn [x] \n  (let [fib (fn fib [x1 x2] [(+ x1 x2) x1])\n        fibseq (fn [s] (conj s (apply fib (last s))))]\n  (->> x dec (range 0) (reduce (fn [s _] (fibseq s)) [[1 0]]) (map first))))","user":"5ecc0831e4b016b56eae058c"},{"code":"#(take % (map \n  first \n  (iterate \n    (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [x] (loop [fibs '(1 1) n x]\n           (if (= n 2)\n             (reverse fibs)\n             (recur (cons (apply + (take 2 fibs)) fibs) (dec n)))))","problem":26,"user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":26,"code":"#(loop [n % result [1 1]] (if (= n 2) result (recur (dec n) (conj result (reduce + (take-last 2 result))))))","user":"5a8b2e58e4b05369db4d24e0"},{"code":"(fn [n]\n   (rest\n     (take (+ n 1)\n           ((fn []\n              ((fn fib [x y]\n                 (cons x\n                       (lazy-seq\n                         (fib y (+ x y)))))\n                 0 1))))))","problem":26,"user":"4fbe42b7e4b081705acca30f"},{"problem":26,"code":"(fn [l] (reduce (fn [x, y] (conj x (+ (last x) (-> x butlast last)))) [1 1] (range 2 l)))","user":"5717d674e4b07c98581c3b1a"},{"problem":26,"code":"#(take %\n      (map first (iterate\n                   (fn [[x y]] [y (+ x y)])\n                   [1 1]))\n      )","user":"54ca9311e4b057c6fda3a263"},{"problem":26,"code":"(fn fib [n] \n  (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else (let [nm1 (fib (- n 1))]\n             (conj nm1 (+ (nth nm1 (- n 2)) (nth nm1 (- n 3)) ) )) ))","user":"5b0bea6de4b0cc2b61a3bdda"},{"code":"(fn fibon [q] \n  (next (loop [start [0 1] cont 1]\n\t   (if (<=  q cont)\n\t       start\n\t       (recur \n\t\t(conj start \n\t\t      (+ (last start) (second\n\t\t\t\t       (reverse start)))) (inc cont))))))","problem":26,"user":"4e739e13535dff18050a9c76"},{"problem":26,"code":"(fn fib-seq [n]\n  (map (fn fib [n]\n  (cond\n    (= n 0) 1\n    (= n 1) 1\n    :else (+ (fib (- n 1)) (fib (- n 2))))) (range 0 n)))","user":"5c8cfff8e4b048ec896c5996"},{"problem":26,"code":"(fn fib [n]\n  (take n\n        ((fn fib [a b]\n           (lazy-seq (cons a (fib b (+ a b)))))\n         1 1)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":26,"code":"(fn [a] (reverse (loop [n 2, res '(1 1)] (if (= a n) res (recur (inc n) (conj res (apply + ((juxt first second) res))))))))","user":"57bc50c7e4b05aa3c4741c40"},{"code":"#(map (fn fib [n] (if (or (= n 1) (= n 0)) 1 (+ (fib (- n 1)) (fib (- n 2))))) (range 0 %))","problem":26,"user":"52d92f13e4b09f7907dd13a2"},{"problem":26,"code":"(fn [len]\n  (loop [coll [] index 1 prev1 1 prev2 1]\n    (if (> index len)\n      (apply list coll)\n      (recur (conj coll prev2) (inc index) (+ prev1 prev2) prev1)\n      )\n   )\n )","user":"5de6484ce4b0986d99407f66"},{"code":"#(take % ((fn fibs [] (lazy-cat [1 1] (map + (fibs) (rest (fibs)))))))","problem":26,"user":"52d03f55e4b07d0d72b273b8"},{"code":"(fn [n]\n  (if (< n 3)\n    [1 1]\n    (loop [cnt (- n 2) acc [1 1]]\n      (if (zero? cnt)\n        acc\n        (recur\n          (dec cnt) (conj acc (apply + (take-last 2 acc)))\n        )\n      )\n    )\n  )\n)","problem":26,"user":"4e75334b535d7a570dd295be"},{"problem":26,"code":"(fn [x]                                                                              \n  (let [fib-add (fn [[a b]] [b (+ a b)])\n        fib-seq (map last (iterate fib-add [0 1]))]                                 \n     (take x fib-seq)))","user":"60460876e4b02d28681c77bd"},{"problem":26,"code":"#(take % \n  (map first \n   (iterate \n    (fn [[a b]] [b (+ a b)])\n    [1 1]\n   )\n  )\n)","user":"5e08c3dde4b0978307768fc8"},{"code":"(letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  #(take % (fib 1 1)))","problem":26,"user":"5356d00ee4b04ce2eb3ed26f"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)])[1 1]))))","user":"54c94376e4b045293a27f665"},{"code":"(fn [n]\n  (if (> n 0)\n    (loop [current 1\n           acc0 0\n           acc1 [1]]\n      (if (= current n)\n        (seq acc1)\n        (recur (inc current)\n               (last acc1)\n               (conj acc1 (+ (last acc1) \n                             acc0))))))\n  )","problem":26,"user":"5315d4bfe4b08068f379ed37"},{"code":"(fn [N] \n  ((fn doit [n-1 n-2 acc] \n     (let [newn1 (+ n-1 n-2) newn2 n-1]\n     (if (= (count acc) N)\n       acc\n       (doit newn1 newn2 (conj acc newn1)))))\n   1 1 [1 1]))","problem":26,"user":"502aaadee4b0614b52996117"},{"code":"#(loop [i 0\r\n         result []]\r\n    (let [n (reduce + (take-last 2 result))] \r\n      (cond\r\n        (> (inc (count result)) %) result\r\n        (zero? i) (recur 1 (conj result 1))\r\n        :else (recur n (conj result n)))))","problem":26,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":26,"code":"#(take %  (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1])))","user":"55350bdae4b09218d5f44fa8"},{"code":"(fn [n]\n(map first (take n (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","problem":26,"user":"504e0f78e4b078edc5f593ac"},{"code":"(fn [n] \n  (letfn [(nel [n1 n2]\n               (let [n3 (+ n1 n2)]\n                 (lazy-seq (cons n3 (nel n2 n3)))))\n          (fib [n1 n2] (concat (list n1 n2) (nel n1 n2)))]\n    (take n (fib 1 1))))","problem":26,"user":"52474de3e4b05ef8e38e6360"},{"problem":26,"code":"(fn [n] (loop [acc [1 1]]\n          (if (>=(count acc) n)\n            acc\n            (recur (conj acc (reduce + (take-last 2 acc)))))))","user":"566713e0e4b04acd4f672dc7"},{"code":"#(map\n  (fn fib [i]\n          (if (= i 0) 0\n            (if (= i 1) 1\n              (+ (fib (- i 1)) (fib (- i 2)))))\n         )\n  (range 1 (+ % 1)))","problem":26,"user":"4fc3b0d4e4b081705acca343"},{"problem":26,"code":"(fn [number]\n  (loop [result [1 1]]\n    (if (= (count result) number)\n      result\n      (recur (conj result (+ (last result) (last (butlast result))))))))","user":"57344edbe4b0cd1946bd1008"},{"problem":26,"code":"#(take % (map last(iterate (fn [[x y]] [y (+ x y)] )[0 1])))","user":"5a4443cae4b0447ef91cc60f"},{"problem":26,"code":"#(reverse \n  (reduce \n   (fn [y x] \n     (cons (+ (or (first y) 1) \n              (or (second y) 0)) \n           y)) \n   nil \n   (range 0 %)))","user":"53b91803e4b047364c0444e5"},{"problem":26,"code":"(fn [x]\n  ((fn f [count res]\n     (if (< count 2)\n       (rest res)\n       (f (dec count) \n          (concat res (list (+ (last res) (last (butlast res))))))))\n   x '(0 1)))","user":"5a52f2cbe4b05d388ecb6c06"},{"problem":26,"code":"(fn [x]\n  (loop [lis '[1]\n         a 0\n         b 1\n         iter 1]\n    (let [new-el (+ a b)]\n      (if (>= iter x)\n        lis\n        (recur (conj lis new-el)\n               b\n               new-el\n               (inc iter))))))","user":"5a373b80e4b001c08efc0c7c"},{"code":"(fn [m] (take m \n        (map (fn [n]\n               (let [s (Math/sqrt 5)\n                     phi (/ (+ 1 s) 2)\n                     psi (/ (- 1 s) 2)]\n                 (int (/ (- (Math/pow phi n)\n                            (Math/pow psi n))\n                         s)))) (iterate inc 1))))","problem":26,"user":"4fb73af2e4b081705acca2d0"},{"code":"#(loop [n %, out '(1), fibn 0]\n  (if (<= n 1)\n    (reverse out)\n    (recur (dec n) (conj out (+ fibn (first out))) (first out)) ))","problem":26,"user":"4ec5c81f535d6d7199dd36b6"},{"problem":26,"code":"(fn [n]\n  (loop [n (dec n) s [0 1]]\n    (if (zero? n)\n      (rest s)\n        (recur (dec n) (conj s (apply + (take-last 2 s)))))))","user":"55929e89e4b0604b3f94d58e"},{"code":"(fn fib [n] \n\t(reverse (reduce #(conj % (+ (first %) (second %) %2)) '(1 1) (take (- n 2) (repeat 0)))))","problem":26,"user":"517ecab1e4b09104ecebe7e8"},{"problem":26,"code":"(fn [fib]\n  (if (< fib 3)\n    (repeat fib 1)\n    (loop \n      [lst '(1 1)\n       n\t2]\n      (if (= fib n)\n        (reverse lst)\n        (recur (cons (+ (first lst) (first (rest lst))) lst) (inc n))))))","user":"57f8104ce4b0d3187e900910"},{"problem":26,"code":"(fn [n]\n  (cond\n    (<= n 0) '()\n    :else (loop [i n f1 1 f2 0 s []]\n            (if (zero? i)\n              (seq s)\n              (recur (dec i) (+ f1 f2) f1 (conj s f1))))))","user":"59a31c55e4b066c664927d34"},{"problem":26,"code":"(fn [x]\n    (loop [times x num 1 num2 1 set '()]\n      (if (< times 1)\n        (reverse set)\n        (recur (- times 1) num2 (+ num num2) (cons num set))\n        )\n      )\n    )","user":"57aa103be4b0b8559636fc64"},{"code":"(fn [n] \n  (let [fib (fn ! [x y] (cons (+ x y) (lazy-seq (! (+ x y) x))))]\n  (take n (cons 1 (fib 1 0)))))","problem":26,"user":"5094057fe4b097f48cc38593"},{"problem":26,"code":"#(map (fn fib [x] (if (or (= x 0) (= x 1)) x (+ (fib (- x 1)) (fib (- x 2)) ))) (range 1 (+ % 1)))","user":"557954aae4b05c286339e092"},{"problem":26,"code":"(fn fib [n] \n  (cond \n   (= n 1) '(1)\n   (= n 2) '(1 1)\n   :else (let [p (fib (- n 1))] \n           (concat p (list (+ (last p) (nth p (- (count p) 2)))))\n           )\n   )\n  )","user":"60471241e4b02d28681c77c9"},{"problem":26,"code":"#(take % \n       (map first\n            (iterate \n             (fn [[a b]][b (+ a b)])\n             [1 1])))","user":"548f05ace4b0e286459a122b"},{"problem":26,"code":"(fn [n]\n  (->> [1 1] \n  (iterate (fn [[a b]] [b (+ a b)]))\n  (map first)\n  (take n)))","user":"60c558e9e4b0e0fa5f1b42ce"},{"problem":26,"code":"(fn [x]\n  (take x \n        (loop [acc [1 1] n-1 1 n 1]\n          (if (= (count acc) x)\n          acc\n          (recur (conj acc (+ n-1 n)) n (+ n-1 n))))))","user":"56b6a50ae4b0982f16b37e3c"},{"code":"(fn [count]\n  (cond\n    (= count 1) '(1)\n    (= count 2) '(1 1)\n    :else (\n            (fn\n              [still soFar]\n              (if (= still 0)\n                soFar\n                (recur\n                  (- still 1)\n                  (concat soFar (list (+ (last soFar) (last (drop-last soFar))))\n                    ))\n                )\n              )\n            (- count 2) '(1 1))\n    )\n  )","problem":26,"user":"50f924bbe4b0e7c80cb15a47"},{"problem":26,"code":"#(take % ((fn fibonacci [a b] (cons a (lazy-seq (fibonacci b (+ a b))))) 1 1))","user":"55729a78e4b09a3098a52547"},{"code":"(fn [x] (take x '(1 1 2 3 5 8 13 21)))","problem":26,"user":"4dd579b5535dae65d5c462ea"},{"problem":26,"code":"(fn flist\n  [number]\n  (cond\n   (= number 1) [1]\n   (= number 2) [1 1]\n   :else (concat (flist (dec number)) [(+ (last (flist (dec number))) (last (flist (- number 2))))])))","user":"5462ce20e4b01be26fd746b8"},{"problem":26,"code":"(fn [n]\n  (take n\n  (map first\n       (iterate (fn [[a b]] [b (+' a b)]) [1 1])\n)))","user":"56f73913e4b08e7d20b9682d"},{"problem":26,"code":"(fn [num]\n  (loop [frst 1\n         scnd 1\n         fib []\n         acc num]\n    (if (zero? acc) \n      fib\n      (recur scnd (+ frst scnd) (conj fib frst) (dec acc)))))","user":"5be33a16e4b0ed4b8aab4cd6"},{"problem":26,"code":"(fn fib [n]\n    (if (< n 3)\n      (repeat n 1)\n      (let\n        [prev (reverse (fib (dec n)))]\n        (reverse (conj prev (+ (first prev) (second prev)))))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn [n]\n  (loop [n n\n         a 1\n         b 1\n         acc []]\n    (if (zero? n)\n      acc\n      (recur (dec n) b (+ a b) (conj acc a)))))","problem":26,"user":"4f28c979e4b0d6649770a01a"},{"code":"(fn f [n] (if (= 1 n) [1]\n            (let [f_ (f (dec n))]\n              [1]\n              (conj f_ (apply + (take-last 2 f_))))))","problem":26,"user":"510acd6ee4b078ea719210f4"},{"problem":26,"code":"#(cond\n    (= % 1) '(1)\n    (= % 2) '(1 1)\n   :else (loop [x 1\n                y 1\n                n (- % 2)\n                res [1 1]]\n           (if (= n 0)\n             (seq res)\n             (recur y (+ x y) (dec n) (conj res (+ x y))))))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"#(take % ((fn fib [prev1 prev2] (lazy-seq (cons prev1 (fib prev2 (+ prev1 \n prev2))))) 1 1))","problem":26,"user":"539d4cdae4b0b51d73faaf33"},{"code":"(fn [n] \n (case n\n   1 '(0)\n   (loop [fib [1 1]] \n     (if (= (count fib) n)\n       fib\n       (recur (conj fib (reduce + (take-last 2 fib))))))))","problem":26,"user":"4f98c161e4b0dcca54ed6cf5"},{"code":"#(reduce (fn [a x] (conj a (Math/round (* (peek a) 1.6))))[1 1] (range (- % 2)))","problem":26,"user":"4e6ea1f5535d5021c1a8960e"},{"code":"(fn [x]\n  (take x (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))","problem":26,"user":"52474133e4b05ef8e38e635e"},{"code":"(fn [n] (drop 1 (take (+ n 1) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"4f6f777de4b07046d9f4efe5"},{"code":"#(letfn [ (fibo [n] (cond \n   (< n 2) 1\n   :else (+ (fibo (- n 1)) (fibo (- n 2)))\n   ))]\n\t(take % (map fibo (range 0 %)))\n  )","problem":26,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"#(reverse ((fn fib [x]\n  (if (= x 2) '(1 1)\n    (let [f (fib (- x 1))]\n      (cons (+ (first f) (second f)) f)))) %))","problem":26,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":26,"code":"(fn [n]\n  (reverse \n   (loop [i (- n 2) r '(1 1)]\n     (cond \n      (= i 0) r\n      :else (recur (dec i) (cons (+ (first r) (second r)) r))))))","user":"545e7ab0e4b01be26fd7467c"},{"code":"(fn [n] (nth (iterate #(conj % (apply + (take 2 (rseq %)))) [1]) (dec n)))","problem":26,"user":"4e59f00b535d8a8b8723a2a5"},{"problem":26,"code":"(fn [n]\n  (take n \n        (map first\n             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"56e2ca59e4b03a7c14b85a38"},{"code":"(fn [c]\n  (loop [i 1 cur 1 prev 0 fibs '(1)]\n    (if (< i c)\n      (let [value (+ cur prev) tmp cur]\n        (recur (inc i)\n               value\n               tmp\n               (conj fibs value)))\n      (reverse fibs))))","problem":26,"user":"511aa6f5e4b0c87c59c9670c"},{"code":"(fn [x]\n  (loop [n 0 p1 1 p2 0 acc '()]\n    (cond (= n x) (reverse acc)\n      :else (let [fib (+ p1 p2)]\n              (recur (inc n) p2 fib (cons fib acc))))))","problem":26,"user":"4fbd1ebbe4b081705acca2fe"},{"code":"(fn [n]\n  \t(loop [acc (list 1 0)]\n\t\t\t(if (= (+ n 1) (count acc))\n\t\t\t    (rest (reverse acc))\n\t\t\t    (recur  \n\t\t\t\t   (conj acc \n\t\t\t\t\t (+ (first acc)\n\t\t\t\t\t    (second acc)))))))","problem":26,"user":"50a6b5e8e4b0aa96157e262a"},{"problem":26,"code":"#(let [n %] (loop [\n        output '(1 1)]\n   (cond (< n 1) '()\n         (< n 2) '(1)\n         (< n 3) '(1 1)\n         (<= n (count output)) output\n         true (recur (concat output\n                             (list (+ (last output)\n                                (second (reverse output)))))))))","user":"57a310b4e4b0c3d858beb90c"},{"code":"#(letfn [(fib [coll length]\n  (if (= (count coll) length)\n    (reverse coll)\n    (recur (cons (+  (first coll) (first (rest coll))) coll) length)\n    )\n  )] (fib `(1 1) %)  )","problem":26,"user":"4df11fb2535d08e6dec9fe1a"},{"problem":26,"code":"#(if (< % 3)\n   (repeat % 1)\n   (loop [fib [1 1]\n          left %]\n     (if (< left 3)\n       fib\n       (recur (conj fib (apply + (take-last 2 fib))) (dec left)))))","user":"56d63729e4b0ea9b8538f7ca"},{"problem":26,"code":"(fn [n] (seq (reduce #(conj %1 (+ (nth %1 %2) (nth %1 (inc %2)))) [1 1] (range 0 (- n 2)))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"#(loop [x 1 y 1 li []]\n    (if (= % (count li))\n      li\n      (recur y (+ x y) (conj li x))))","problem":26,"user":"529da890e4b04e0c58e87b7e"},{"problem":26,"code":"(fn fibonacci\n  [x]\n  (cond\n    (= x 1)\n       [1]\n    (= x 2)\n       [1 1]\n    :else\n    (loop [coll [1 1]\n           pos (- x 2)]\n      (if (zero? pos)\n        coll\n        (recur\n          (conj coll (+ (last coll) (nth coll (- (count coll) 2))))\n          (dec pos))))))","user":"56e09e01e4b0ca2494a0960c"},{"code":"(fn fibonacci [n]\n     \"Returns the first n Fibonacci numbers.\"\n     (if (= n 1)\n       [1]\n       (if (= n 2)\n         [1 1]\n         (loop [counter 2, fibo [1 1]]\n           (if (< counter n)\n             (recur (inc counter) (conj fibo (+ (peek fibo) (peek (pop fibo)))))\n             fibo)))))","problem":26,"user":"532727bae4b09d4e7a9b54fa"},{"problem":26,"code":"#(loop [fibSeq [1 1]]\n   (if (= (count fibSeq) %)\n     fibSeq\n     (recur (conj fibSeq (+ (last fibSeq) (last (pop fibSeq)))))))","user":"55a68518e4b09e57187da29b"},{"problem":26,"code":"(fn fibonacci [n]\n  (if (> n 1)\n    (loop [x 2\n           r [1 1]]\n      (if (< x n)\n        (recur\n          (inc x)\n          (cons (+ (first r) (first (rest r))) r))\n        (reverse r)))\n    n))","user":"5f03550ce4b0cf489e8d7f33"},{"problem":26,"code":"(fn fib [n]\n  (cond\n    (> n 2) (loop [ n (- n 2) aseq '[1 1]]\n              \n              (if (= n 0)\n                aseq\n                (recur (dec n) (conj aseq (+ (last aseq) (last (butlast aseq))) )))\n              )\n    ))","user":"533c2605e4b0e30313ee6cd7"},{"code":"#(loop [res '(1 1), cnt %]\n  (if (= 2 cnt) (reverse res)\n  (recur \n    (cons (+ (first res) (second res)) res) \n    (- cnt 1))))","problem":26,"user":"4eabb245535d7eef30807319"},{"code":"#(map (fn a [x] (if (< x 2) 1 (+ (a (- x 1)) (a (- x 2))))) (take % (iterate (fn[x] (+ x 1)) 0)))","problem":26,"user":"509ebf39e4b08df8156e9e33"},{"code":"(fn [x] \n  (take x (lazy-seq\n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1])))))","problem":26,"user":"4e739795535dff18050a9c75"},{"problem":26,"code":"(fn fib\n  [n]\n  (if (= n 2)\n    '(1 1)\n    (let [pre-fib (fib (dec n))\n          sum (+ (last pre-fib) (last (butlast pre-fib)))]\n      (concat pre-fib (list sum)))))","user":"53e57ba2e4b036ad0777e45c"},{"problem":26,"code":"(fn [x] (reverse \n          ((fn q [x] (if (= x 0) nil (cons ((fn p [x] (if (> x 2) (+ (p (- x 1)) (p (- x 2))) 1)) x) (q (- x 1))))) x)))","user":"544e1794e4b0e39780006980"},{"problem":26,"code":"(fn [n & numbers]\n  \n  (if (= n 0) \n    \n    numbers \n    \n    (let [ size (count numbers)\n           e1   (nth   numbers (- size 1) 1)\n           e2   (nth   numbers (- size 2) 0)]\n      \n      (recur (dec n) (concat numbers [(+ e1 e2)]))\n  \n    )\n  )\n)","user":"5b3189e5e4b025bcb146f308"},{"problem":26,"code":"(fn fib [n] \n    (take n \n        ( (fn fb [a b]\n            (cons a (lazy-seq (fb b (+ b a) ) ) ) \n        ) 1 1 ) \n    )   \n  \n\n)","user":"564633a1e4b0284900eef60f"},{"code":"(fn fib [x]\r\n  (loop [left (- x 2) acc [1 1] a 1 b 1]\r\n    (if (zero? left)\r\n      acc\r\n      (recur (dec left) (conj acc (+ a b)) b (+ a b)))))","problem":26,"user":"4e46e48b535dc968683fc4b7"},{"problem":26,"code":"(fn [n] (take n\n     (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"5fb46916e4b08cb800c85b46"},{"problem":26,"code":"(fn [n]\n  (map-indexed (fn [idx itm]\n    ((fn fib [n]\n      (case n\n        1 1\n        0 1\n        (+\n          (fib (- n 1))\n          (fib (- n 2))))) idx)) (repeat n n)))","user":"5629e651e4b00e49c7cb4814"},{"problem":26,"code":"#(loop [xs [1 1]] (if (< (count xs) %) (recur (conj xs (apply + (take-last 2 xs)))) xs))","user":"54bc575ce4b0ed20f4ff6ecb"},{"problem":26,"code":"(fn [n]\n  (loop [i 2\n         lst '(1 1)]\n    (if (> n i)\n      (recur (inc i) (conj lst (apply + (take 2 lst))))\n      (reverse lst))))","user":"530e75d5e4b08068f379ecba"},{"code":"(fn bob [x] (reverse ((fn fib [n]\n  (cond\n    (= n 2) '(1 1)\n    (= n 1) '(1)\n    (< n 1) '()\n    :else (let [prev (fib (- n 1))]\n      (cons (+ (first prev) (second prev)) prev)))) x)))","problem":26,"user":"4ec07699535dfed6da9c6da2"},{"problem":26,"code":"(fn [n] (loop [n n a 0 b 1 c []] (if (= 0 n) c (recur (dec n) b (+ a b) (conj c b)))))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"#(rest (loop [a 1 b [0] c %] (if (<= c 0) b (recur (last b) (conj b (+ a (last b))) (- c 1)))))","problem":26,"user":"538d7e2ee4b0b51d73faae70"},{"problem":26,"code":";; tail-recursion for life\n(fn [n] \n  (let [fs [1 1]]\n  \t(if (< n 2)\n    \t(take n fs)\n   \t\t(loop [i 2 fibs fs]\n      \t\t(if (= i n)\n      \t\t\tfibs\n        \t\t(recur (+ i 1) \n                       (concat fibs [(reduce + (take-last 2 fibs))])))))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn fib\n  ([x] (conj (fib (- x 2) 1 1) 1 1))\n  ([x prev1 prev2]\n    (let [next (+ prev1 prev2)]\n      (if (= 1 x)\n        (list next)\n        (cons next (fib (- x 1) prev2 next))))))","problem":26,"user":"4eb66737535d7eef3080736b"},{"problem":26,"code":"(fn fibs [n]\n  (case n\n   0 []\n   1 [1]\n   2 [1 1]\n  (let [f (fibs (- n 1))\n        [a b :as all] (reverse f)]\n    (conj f (+ a b)))))","user":"5776b47ce4b0979f8965163d"},{"code":"(fn fib[n] (nth (iterate #(conj % (reduce + (nthrest % (- (count %) 2)))) [1 1]) (- n 2)))","problem":26,"user":"525de512e4b0cb4875a45d8a"},{"problem":26,"code":"(fn [elems]\n (loop [target elems iter 0 prev 0 pprev 1 acc '[]]\n   (if (= target iter)\n     acc\n     (let [newhead (+ prev pprev)]  \n       (recur target (inc iter) newhead prev (conj acc newhead))))))","user":"5563a94be4b0c656e3ff17f2"},{"code":"(fn [amount & [a & [b & fibs]]]\n  (cond\n   (zero? amount) (reverse fibs)\n   (empty? fibs) (recur (dec amount) [2 1 1])\n   :else (recur (dec amount) \n                (concat [(+ a b) a b] fibs))))","problem":26,"user":"5356ac72e4b04ce2eb3ed26a"},{"problem":26,"code":"#(take % \n       ((fn fib [a b]\n         (cons a (lazy-seq (fib b (+ a b))))\n      \t) 1 1))","user":"55ec1048e4b0121d4835fdc3"},{"code":"(fn [n] \n   (let [t (inc n)]\n     (loop [k 2\n            seq [0 1]]\n       (if (>= k t)\n         (subvec seq 1 t)\n         (recur (inc k) (conj seq (+ (last (butlast seq))\n                                     (last seq))))))))\n\n;; austintaylor's solution:\n#_(fn [n]\n  \t(map first (reductions\n    \t(fn [[a b] _] [b (+ a b)]) [1 1] (range 1 n))))","problem":26,"user":"51392535e4b0a5db03d727e1"},{"problem":26,"code":"#(loop [lis [1 1] x %] (if (= x 2) lis (recur (conj lis (apply + (take-last 2 lis))) (- x 1))))","user":"5de7377ee4b0986d99407f75"},{"code":"(fn [n] (take n (map first (iterate (fn [[x y]] [y (+ x y)]) [1N 1N]))))","problem":26,"user":"4eed26af535d93acb0a668bb"},{"code":"(fn fibs [n]\n  (nth\n    (iterate\n      (fn [all]\n        (conj\n          all\n          (->>\n            all\n            (take-last 2)\n            (apply +)\n          )\n        )\n      )\n      [1 1]\n    )\n    (- n 2)))","problem":26,"user":"518e6966e4b051adb72789ec"},{"problem":26,"code":"#(loop [previous 0 current 1 limit %1 result []]\n  \t(if (<= limit 0)\n      result\n      (recur current (+ previous current) (dec limit) (conj result current))))","user":"57320c8de4b0cd1946bd0fce"},{"code":"(fn [n] (take n ((fn fib [a b]\n  (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"50c7e98ee4b00bb60fe0c53a"},{"code":"#(take %\n       (map first\n            (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"5046ee3ee4b03b02161376b4"},{"problem":26,"code":"#(loop [n % a 1 b 1 r []] (if (= n 0) r (recur (dec n) b (+ a b) (conj r a))))","user":"5628cb07e4b00e49c7cb47ef"},{"code":"(fn [number] (loop [n 2 l '[0 1]]\n  (if (= n (inc number))\n  (rest l)\n  (recur (inc n) (conj l (+ (l (- n 2)) (l (- n 1))))))))","problem":26,"user":"4fd7f892e4b0dab7d829f38d"},{"problem":26,"code":"(fn [n]\n   (take n ((fn fib\n              ([] (fib 1 1))\n              ([x1 x2]\n               (let [sum (+ x1 x2)]\n                 (cons x1 (lazy-seq (fib x2 sum)))))))))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":26,"code":"#(take % ((fn fib [] (lazy-cat [1 1] (map + (rest (fib)) (fib))))))","user":"549dd591e4b0f3d1d8e70f98"},{"problem":26,"code":"(fn [x]\n  (loop [fib [] i 1]\n    (if (<= i x)\n      (if (or (= i 1) (= i 2)) \n        (recur (conj fib 1) (inc i))\n        (recur (conj fib (+ (last fib) (nth fib (- (count fib) 2))))\n               (inc i)))\n      fib)))","user":"56b965d9e4b0f26550335931"},{"code":"(fn [x] (rest (take (inc x) (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))))","problem":26,"user":"523eb110e4b057c4b7cd0a67"},{"problem":26,"code":"(fn [x] \n  (let [fibo \n        (fn fib-seq\n  \t\t\t([]\n     \t\t\t(fib-seq 0 1))\n  \t\t\t([a b]\n     \t\t\t(lazy-seq\n      \t\t(cons b (fib-seq b (+ a b))))))]\n   (take x (fibo))))","user":"57af36eae4b0fbc9809a272e"},{"code":"(fn [n]\n  (let [fib (fn fib* [a b] (cons a (lazy-seq (fib* b (+ b a)))))]\n    (take n (fib 1 1))))","problem":26,"user":"51d662fce4b0154f82ab92ef"},{"problem":26,"code":"(fn fib-seq [n]\n  (letfn [(fib [n]\n  \t(if (> n 1)\n    \t(+ (fib (dec n)) (fib (- n 2)))\n    \t1))]\n    (loop [i 0\n           coll []]\n      (if (< i n)\n        (recur (inc i) (conj coll (fib i)))\n        coll))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"#(take % \n  (map first \n    (iterate \n      (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4f089f1a535dcb61093f6c3c"},{"problem":26,"code":"(fn [count] \n  (loop [iteration 0\n         first 1\n         second 1\n         acc []]\n    (if (= iteration count)\n      acc\n      (recur (inc iteration) second (+ first second) \n             (conj acc first)))))","user":"5e99cbd4e4b0157ca96647e6"},{"code":"(fn fib [x] \n  (loop [count 2 result '(1 1)]\n    (if (>= count x)\n      (reverse result)\n      (recur (inc count) \n             (conj result (+ (first result) \n                             (second result)))))))","problem":26,"user":"4f528bcde4b03ad3f0c10d3e"},{"code":"(fn [n]\n  (letfn [(fib  [m]\n              (cond\n                 (< m 1) 0\n                 (or (= m 1) (= m 2)) 1\n                 (> m 2) (+ (fib (- m 1)) (fib (- m 2)))\n               )\n         )\n        ] \n    \t(map fib (range 1 (+ 1 n)))\n  )\n)","problem":26,"user":"52bf8e35e4b07a9af579233a"},{"problem":26,"code":"#(loop [x1 1\n        x2 1\n        acc [1 1]\n        n 2]\n   (cond\n    (= % 1) [1]\n    (= % 2) [1 1]\n    (= % n) acc \n    :else (recur x2 (+ x1 x2) (conj acc (+ x1 x2)) (inc n))))","user":"5592dc6be4b0c79f6e1db935"},{"code":"(fn [n]\r\n  (loop [result [1] next 1]\r\n    (if (= (count result) n)\r\n        result\r\n        (recur (conj result next) (+ (last result) next)))))","problem":26,"user":"4fdb02aae4b05e33b9224f56"},{"problem":26,"code":"#(take % \n       (map first \n            (iterate \n             \t(fn [[a b]] [b (+ a b)]) [1 1])))","user":"595e5bdbe4b066ee0a44b041"},{"problem":26,"code":"(fn [x]\n  (loop [series [1 1]\n         counter 2]\n    (if (= counter x)\n      series\n      (recur (conj series (+ (second (reverse series)) (last series))) (inc counter)))))","user":"56b18445e4b0982f16b37dee"},{"problem":26,"code":"(fn [n]\n    (loop [cnt (- n 2) acc [1 1]]\n       (if (zero? cnt)\n            acc\n          (recur (dec cnt) (conj acc (+ (second (reverse acc)) (last acc)))))))","user":"5aca2adce4b0e27600da77d6"},{"code":"(fn [n]\n  (nth (iterate \n        #(conj % (+ (last %) (last (drop-last %))))\n        [1 1]) \n    (- n 2)))","problem":26,"user":"4ede361a535d10e5ff6f5332"},{"code":"(fn [ n ]  \n    (loop  [nn n    answer [1 1] ]\n        (if  (> 3 nn)\n            (doall (seq  answer))\n            (recur \n                (dec nn)   \n                (conj  answer  (+ (first (reverse answer))   (fnext (reverse answer )) )  ) \n            )\n        )\n    )\n)","problem":26,"user":"4fdf750be4b05e33b9224f9c"},{"code":"(fn fibi [l] \r\n  (loop[x []]\r\n\t\t(if (= (count x) l)\r\n\t\t\tx\r\n\t\t\t(if (< (count x) 2) \r\n\t\t\t\t(recur (conj x 1))\r\n\t\t\t(recur (conj x (apply + (take 2 (reverse x)))))))))","problem":26,"user":"4f71ba6ee4b07046d9f4f012"},{"code":"(fn j[x,c] (if (= c 0) x (j(conj x ((fn f[n](if(or(= n 1)(= n 0))n(+(f(- n 1))(f(- n 2))))) c) )(- c 1) ))) '()","problem":26,"user":"4f935f94e4b0dcca54ed6cbb"},{"problem":26,"code":"(fn fib-seq [n]\n  (if (> n 1) ; fib(1) is [0]\n    (loop [x (- n 2)\n           v [1 1]]\n      (if (> x 0)\n        (recur (dec x) (conj v (+ (peek v) (peek (pop v)))))\n        v))\n    [0]))","user":"5e7bb000e4b085ba37836e1d"},{"problem":26,"code":"(fn [n]\n  (take n \n        (reduce (fn [l _] \n                  (conj l (apply + (take-last 2 l)))) \n                [1 1] \n                (range n))))","user":"5f597522e4b0a0bc16850a9e"},{"problem":26,"code":"#(map (fn [n]\n    (loop [x 0 y 1 counter 1]\n        (if (= n counter)\n            y\n            (recur y (+ x y) (inc counter)))))\n    (range 1 (inc %)))","user":"54e4a1dce4b024c67c0cf7e8"},{"problem":26,"code":"#_(take % '(1 1 2 3 5 8 13 21))\n#_(take % ((fn f [x y] (lazy-seq (cons x (f y (+ x y))))) 1 1))\n#_(take % ((fn f [a b] (cons a (lazy-seq (f b (+ a b))))) 1 1))\n#_(take % ((fn f [x y] (lazy-cat [x] (f y (+ x y)))) 1 1))\n\n;; remove space\n #(take%((fn f[x y](lazy-cat[x](f y(+ x y))))1 1))","user":"57ba55c1e4b0fbc9809a2801"},{"problem":26,"code":"(fn [n] \n    (loop [i 2 a 1 b 1 r [1 1]]\n      (cond \n        (= n 1) [1]\n        (= i n) r\n        :else (recur (inc i) b (+ a b) (conj r (+ a b))))))","user":"5a45a73ae4b05d388ecb6b3d"},{"problem":26,"code":"#(loop [result [1 1] ]\n  (if (> (count result) (dec %) ) result\n    (recur (conj result (+ (last result) (nth result (- (count result) 2)) )))))","user":"5a40eb64e4b0447ef91cc5d8"},{"problem":26,"code":"(fn [x]\n  (map\n   \t(fn fib [y]\n      (if (<= y 2)\n        1\n        (+ (fib (- y 1)) (fib (- y 2)))))\n     (range 1 (+ x 1))))","user":"5c5bee9be4b01df32ab73294"},{"problem":26,"code":"#(loop [fib '(1 1)\n        x 2]\n   (if (= x %)\n     (reverse fib)\n     (recur (conj fib (apply + (take 2 fib))) (inc x))))","user":"5e790f6be4b085ba37836e01"},{"problem":26,"code":"#(loop [i (- % 2)\n        fibs [1 1]] \n   (if (= 0 i)\n     fibs\n     (let [reverse-fibs (reverse fibs)\n           n-1 (first reverse-fibs) \n           n-2 (second reverse-fibs)]\n     (recur (dec i) (conj fibs (+ n-1 n-2))))))","user":"54a96a15e4b09f271ff37cad"},{"problem":26,"code":"(fn fib [n]\n  (cond\n   (= 1 n) [1]\n   (= 2 n) [1 1]\n   :else (let [c (fib (dec n))]\n           (conj c (apply + (take-last 2 c))))))","user":"51441ce7e4b0b4fb4ace5f41"},{"problem":26,"code":"(fn funky [start]\n\t(let [\n\t\tstart start\n\t\tanswer ((fn fib [coll iterationCount stop]\n\t\t\t\t\t(if (= stop iterationCount)\n\t\t\t\t\t\tcoll\n\t\t\t\t\t\t(let [\n\t\t\t\t\t\t\tprev1 (nth coll (- iterationCount 2) 0)\n\t\t\t\t\t\t\tprev2 (nth coll (- iterationCount 1) 1)\n\t\t\t\t\t\t\tadd (+ prev1 prev2)\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t(fib (conj coll add) (+ 1 iterationCount) stop)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) [] 0 start)\n\t\t]\n\t\t\tanswer\n  )\n )","user":"5dcc651de4b02b31cc3da3c8"},{"code":"(fn my-fib [x]\n  (take x\n   ((fn rfib [a b]\n      (lazy-seq (cons a (rfib b (+ a b)))))\n    1 1)))","problem":26,"user":"4e7f51eb535db966e863cc3f"},{"problem":26,"code":"#(map last \n       (take %1 (iterate (fn [[a b]] [b (+ a b)]) [0 1])\n                  ))","user":"55efc44ee4b066087aa9453e"},{"problem":26,"code":"#(take % [1 1 2 3 5 8 13 21 34 55 89 154]\n       )","user":"541709b0e4b01498b1a71a06"},{"code":"(fn [cnt]\n  (loop [l-cnt cnt, v1 1, v2 1, res '(1 1)]\n    (if (= l-cnt 2)\n      res\n      (recur (dec l-cnt) v2 (+ v1 v2) (concat res (list (+ v1 v2)))))))","problem":26,"user":"4eac5bc1535d7eef3080731b"},{"problem":26,"code":"(fn [n]\n  (take n\n                (map second (iterate (fn [ [p c] ]\n                           [c (+ p c)]) [0 1]))))","user":"579f4812e4b05302be0b72fb"},{"problem":26,"code":"(fn fib-2\n      [num]\n      (cond\n        (= num 0)\n        [0]\n        (= num 1)\n        [1]      :else\n         (let [A (fib-2 (- num 1))\n               B (fib-2 (- num 2))]\n              (conj A (+ (last A) (last B))))))","user":"599e3677e4b0871e7608b809"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"4eda05c1535d10e5ff6f5309"},{"problem":26,"code":"#(take %\n  ((fn fib [a b]\n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1))","user":"5f5a2cc6e4b0a0bc16850aa4"},{"problem":26,"code":"#((fn lo [x c] (if (< c %)(lo (cons (+ (first x) (second x)) x) (+ c 1) )(reverse x))) [1 1] 2)","user":"55bedd93e4b01b9910ae2a0d"},{"problem":26,"code":"#(take %\n  (map \n    first \n      (iterate \n        (fn [[f0 f1]]\n          [f1 (+ f0 f1)]\n          )\n        [1 1]\n      )\n  )\n)","user":"58334d18e4b089d5ab817c97"},{"problem":26,"code":"(fn fib\n  ([n] (fib [1 1] (- n 2)))\n  ([col n] (if (= 0 n)\n             (reverse col)\n             (fib (cons (+ (first col) (second col)) col) (dec n)))))","user":"5367bc60e4b0243289761e81"},{"problem":26,"code":"(fn [n] \n  (take n\n   ((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"5b8f77a8e4b0c0b3ffbd49fa"},{"code":"(fn [n]\n  (loop [fibs [1 1] i 2]\n    (if (= i n)\n      fibs\n      (recur (conj fibs (+ (fibs (- i 1)) (fibs (- i 2))))\n(inc i)))))","problem":26,"user":"4e5c3612535d8a8b8723a2be"},{"problem":26,"code":"; (fn fib\n;   ([n coll]\n;    (if (zero? n) (reverse coll)\n;        (if (< (count coll) 2)\n;          (fib (dec n) (cons 1 coll))\n;          (fib (dec n) (cons (+ (first coll) (second coll)) coll)))))\n;   ([n]\n;    (fib n '())))\n\n(fn fib [i]\n  (loop [i (- i 2)\n         c [1 1]]\n    (if (zero? i) (reverse c)\n      (recur (dec i) (cons (+ (first c) (second c)) c)))))","user":"5d83b9aae4b0915913b1d386"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n      (cons a (lazy-seq (fib b (+ b a)))))\n     1 1)))","problem":26,"user":"50097962e4b03d00572d2d6c"},{"code":"#(take %\n       (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4dcd327b535d5973398f929b"},{"code":"(fn fibber [n]\n  (cond\n   (= n 1) [1]\n   (= n 2) [1 1]\n   :else (let [xs (fibber (- n 1))]\n           (conj xs (reduce + (take-last 2 xs))))))","problem":26,"user":"52e55e16e4b09f7907dd1460"},{"problem":26,"code":"#(take % (map (fn fib[x](if (>= 1 x) 1 (+ (fib (- x 2)) (fib (- x 1))))) (iterate (partial + 1) 0)))","user":"5677f9ffe4b05957ce8c616f"},{"problem":26,"code":"(fn fib ([n] (fib [1 1] n)) ([x n] (if (< (count x) n) (fib (conj x (+ (last x) (nth x (- (count x) 2)))) n) x)))","user":"53e9a56ce4b036ad0777e4af"},{"code":"(fn [i]\n  (take i (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"517b59b8e4b0925c997201d0"},{"code":"(fn \n [max]\n (loop [cnt 1 a 0 b 1 acc []]\n  (if (< max  cnt) acc\n     (recur (inc cnt) b (+ a b) (conj acc b))))\n )","problem":26,"user":"4e6ff01e535d5021c1a8962b"},{"problem":26,"code":"#(loop [iterate '(1 1)]\n     (if (< (count iterate) %)\n         (recur (conj iterate (+ (first iterate) (first (next iterate)))))\n       (reverse iterate)\n       )\n     )","user":"5d5b2678e4b06a698e928ee2"},{"code":"(fn [x]\n  (loop [s 1 curr []]\n    (cond\n     (> s x) curr\n     (= s 1) (recur (inc s) (conj curr 1))\n     (= s 2) (recur (inc s) (conj curr 1))\n     :else\n     (recur\n      (inc s)\n      (conj curr (+ (nth curr (- s 2)) (nth curr (- s 3)))))\n     )))","problem":26,"user":"5226f8e9e4b04e78ff2e199a"},{"problem":26,"code":"#(take %\n       (map first\n            (iterate \n             (fn [[x y]] [y (+ x y)])\n             [1 1]\n             )\n             )\n           )","user":"57c62aece4b05aa3c4741cf1"},{"problem":26,"code":"(fn [amount]\n   (loop [ x [1 1]]\n     (if (< (count x) amount)\n       (recur (conj x (+ (last x) (second (reverse x)))))\n       (take amount x))))","user":"5f6e5c58e4b02876ed9fd067"},{"problem":26,"code":"(fn [z] \n  (take z \n        (map first \n             (iterate \n              (fn [[x y]] \n                [y (+ x y)]) \n              [1 1]))))","user":"5579d60ce4b05c286339e099"},{"code":"(fn [x]\n        (loop\n            [a 0\n             b 1\n             index 0\n             acc ()\n             ]\n          (if (>= index x) (reverse acc) (recur b (+ a b) (+ 1 index) (conj acc b)))\n            ))","problem":26,"user":"5288b06de4b0239c8a67ae55"},{"code":"(fn [n]\n    (loop [fib-n 1\n           fib-next 1\n           acc [fib-n]]\n      (if (= n (count acc))\n          acc\n          (recur fib-next\n                 (+ fib-n fib-next)\n                 (conj acc fib-next)))))","problem":26,"user":"4ecaa5da535d6d7199dd3707"},{"code":"(fn [x]\n  (loop [y [1 1], acc 2]\n    (let [fibn (+ (last (drop-last y)) (last y))]\n      (if (= acc x)\n        y\n        (recur (conj y fibn) (inc acc))))))","problem":26,"user":"50706287e4b07bd6ad9b9f2b"},{"code":"(fn [n] \n  (rest (map (fn fib [x]\n  \n    (cond (< x 1) 0\n          (= x 1) 1\n          :else (+ (fib (- x 1)) (fib (- x 2)))\n     )\n   \n) (range (inc n)))))","problem":26,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":26,"code":"(fn [x] \n  (conj (\n    (fn my-fib [twoprev oneprev n]\n      (if (= n 1) '()\n        (conj (my-fib oneprev (+ twoprev oneprev) (dec n))\n              (+ twoprev oneprev))))\n   0 1 x) 1)\n)","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":26,"code":"(fn recur-fib\n  [count]\n  (if (= count 0)\n    []\n    (if (= count 1)\n      [1]\n      (let [remaining-count (- count 1)\n            prior (recur-fib remaining-count)\n            last-el (reduce + (take-last 2 prior))]\n         (conj prior last-el)))))","user":"5dc9ccf8e4b02f9375f4e1f1"},{"problem":26,"code":"#(take % (map(fn fib [x](if(or(= 0 x)(= 1 x)) 1 (+ (fib (- x 2)) (fib (- x 1))))) (range)))","user":"59c734e3e4b0a024fb6ae53f"},{"problem":26,"code":"(fn [a] \n  (take a \n        (rest \n         (map first \n              (iterate \n               (fn [[a b]] [b (+' a b)])\n               [0 1]\n               )))))","user":"58273e82e4b051871117bf1b"},{"problem":26,"code":"(fn [n]\n  (loop [series [1 1]]\n    (if (= n (count series)) series\n      (recur (conj series (+ (last series) (nth series (dec (dec (count series))))))))\n    )\n  )","user":"552e0f47e4b076ab5578f7ed"},{"problem":26,"code":"(fn fib\n  ([n]\n   (case n\n         1 [1]\n         2 [1 1]\n         (fib (- n 2) [1 1])))\n  ([n xs]\n   (if (= n 0)\n     xs\n     (recur (dec n) (conj xs (apply + (take-last 2 xs)))))))","user":"590e5e8ae4b047aa04b19a25"},{"problem":26,"code":"(fn fib\n  [num]\n  (if (= num 1)\n    (vector 1)\n    (if (= num 2)\n      (vector 1 1)\n      (let [old (fib (- num 1))]\n        (conj old (reduce + (take-last 2 old)))))))","user":"595bc925e4b066ee0a44afe2"},{"code":"(fn [n]\n  (loop [i 0\n         fa 0\n         fb 1\n         res []]\n    (if (= i n)\n      res\n      (recur (inc i) fb (+ fb fa) (conj res fb)))))","problem":26,"user":"5234870ee4b05e80434a505c"},{"code":"#(rest (take (inc %1) ((fn lazy-seq-fibo \r\n    ([] \r\n        (concat [0 1] (lazy-seq-fibo 0 1))) \r\n    ([a b] \r\n        (let [n (+ a b)] \r\n            (lazy-seq \r\n                (cons n (lazy-seq-fibo b n)))))))))","problem":26,"user":"4f037bb5535dcb61093f6aec"},{"problem":26,"code":"(fn nth-fibo\n\t([numero]\n  \t(nth-fibo [1 1] numero))\n  ([x numero]\n  \t(if (< (count x) numero) \n\t\t\t(nth-fibo (conj x (+ (last x) (nth x (- (count x) 2)))) numero)\n\t\t\tx))\n)","user":"5f22e8c9e4b0f565ad99828b"},{"problem":26,"code":"#(loop [n % r [0 1]]\n   (if (= n 1)\n     (rest r)\n     (recur \n      \t(dec n)\n      \t(conj r\n           (+ (last r) \n              (last (drop-last r)))))))","user":"5367f0a7e4b0243289761e88"},{"problem":26,"code":"#(if (< %2 3) (reverse %1) \n   (recur (conj %1 (+ (first %1) (second %1))) (dec %2))) '(1 1)","user":"5654d0e1e4b0f9d632dd848c"},{"problem":26,"code":"(fn [n]\n  (->> (iterate (fn [[a b]] [(+ a b) a]) [0 1])\n      (drop 1)\n      (take n)\n      (map first)))","user":"583369e6e4b089d5ab817c9c"},{"problem":26,"code":"(fn [arg] (take arg ((fn fibo ([] (fibo 0 1))\n            ([fib1 fib2] (lazy-seq (cons fib2 (fibo fib2 (+ fib1 fib2)))))))))","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn fib-seq [n]\n  (let [fiby\n\t\t\t(fn fib [x]\n\t\t  (cond (= x 1) 1\n\t\t        (= x 2) 1\n\t\t        :else (+ (fib (- x 1)) (fib (- x 2)))))]\n\t\t(if (= n 0)\n\t\t\t[]\n\t\t\t(conj (fib-seq (- n 1)) (fiby n))))\n\t)","problem":26,"user":"4f442cdfe4b0d7d3c9f3fd34"},{"problem":26,"code":"(fn fib [x]\n  (cond\n   (= x 1) [1]\n   (= x 2) [1 1]\n   :else (let [fib-rest (fib (- x 1))]\n           (conj fib-rest (+ (last fib-rest) (second (reverse fib-rest))))) \n   )\n  )","user":"51eda45ce4b0bb507043159b"},{"code":"(fn [n]\n  \"returns fib sequence\"\n  (loop [last 0\n         next 1\n         index 0\n         fib '()]\n    (if (= n index)\n      (reverse fib)\n      (recur next (+ last next) (inc index) (conj fib next)))))","problem":26,"user":"4feacba7e4b0140c20fb9c0e"},{"problem":26,"code":"#(reverse (reduce (fn [s _] (conj s (apply +' (take 2 s)))) '(1) (range 1 %)))","user":"5531e445e4b09218d5f44f76"},{"problem":26,"code":"#(map \n  \n(fn fib[n]\n    (letfn [(f[current next left]\n      (if (= left 0) \n        current\n        (recur next (+ current next) (dec left))))]\n    (f 1 1 n))\n )\n  \n(range %))","user":"55654e17e4b0c656e3ff1818"},{"problem":26,"code":"(fn [x]\n  (loop [cnt 1,\n         res [1],\n         a 1\n         b 0]\n    (if (= cnt x)\n      res\n      (recur (inc cnt)\n             (conj res (+ a b))\n             (+ a b)\n             (nth res (- cnt 1))))))","user":"55810c73e4b05c286339e0f2"},{"problem":26,"code":"(fn [x]\n          (loop [n-1 1\n                 n-2 1\n                 seq [1 1]]\n            (if (= x (count seq))\n              seq\n              (let [next-n1 (+ n-1 n-2)\n                    next-n2 n-1\n                    next-seq (conj seq next-n1)]\n                (recur next-n1 next-n2 next-seq )))))","user":"52b065dbe4b0c58976d9acc9"},{"problem":26,"code":"(fn [n]\n  (seq (loop [res '[1 1]]\n        (if (= (count res) n)\n          res\n          (let [[l1 l2] (take-last 2 res)]\n            (recur (conj res (+ l1 l2))))))))","user":"54d90b36e4b0a52adc2e2049"},{"code":"(fn [n]\n  (let [fib (fn fib [n]\n    (cond\n     (= n 1) 1\n     (= n 2) 1\n     :else (+ (fib (- n 1)) (fib (- n 2)))\n    )\n  )]\n  \n  (map fib (range 1 (+ n 1)))\n  )\n)","problem":26,"user":"51365524e4b04ac1f358dd52"},{"problem":26,"code":"(fn fib \n  ([a b]\n    (lazy-seq (cons a (fib b (+ a b)))))\n  ([i]\n    (take i (fib 1 1))))","user":"56fe2a2fe4b08d47c97781ad"},{"problem":26,"code":"(fn [n]\n  (let [fib \n    (fn fib \n      ([]\n        (fib 1 1))\n      ([a b]\n        (lazy-seq (cons a (fib b (+ a b))))))]\n    (take n (fib))))","user":"59279a89e4b072a2710fced3"},{"code":"(fn [n] \r\n   (take n\r\n           (map\r\n\t     (fn [n]\r\n\t       (letfn [(fibonacci [n a b]\r\n\t\t     (if (= n 0)\r\n\t\t\t a\r\n\t\t\t (fibonacci (- n 1) b (+ a b))))]\r\n\t       (fibonacci n 0 1)))\r\n             (iterate #(+ % 1) 1)\r\n\t)))","problem":26,"user":"4ef60a02535dced4c769f24b"},{"problem":26,"code":"(fn fibls [len] (map (fn fib [n] (if (< n 3) 1 \n                                   (+ (fib (- n 1)) \n                                      (fib (- n 2))))) (range 1 (inc len))))","user":"5f15b1e2e4b091ba50b4dbbd"},{"problem":26,"code":"#(take % ((fn fib\n            ([] (lazy-seq (cons 1 (fib 1 0))))\n            ([a b] (lazy-seq\n                    (let [s (+ a b)]\n                      (cons s (fib s a))))))))","user":"5bc09ebae4b07a9b28b10005"},{"problem":26,"code":"(fn [n] \n  (reduce \n    (fn [result v] \n      (conj \n        result \n        ((fn fib [n] \n          (if (< n 2)\n            1\n            (+ (fib (- n 1)) (fib (- n 2))))) v)))\n   [] \n   (range n)))","user":"5e2586afe4b05b4b01516167"},{"code":"#(letfn [(fib [[a b]] [b (+ a b)])]\n  (->> (iterate fib [1 1]) (map first) (take %)))","problem":26,"user":"5300158ae4b0d8b024fd370f"},{"problem":26,"code":"(fn [n]\n  (->> [1 1]\n    (iterate (fn [[a b]] [b (+ a b)]))\n    (take n)\n    (map first)))","user":"5a065388e4b01bb0ae8afdcb"},{"code":"(fn [n]\n  (condp = n\n    0 []\n    1 [1]\n    ((fn [m accum]\n      (condp = m\n        (- n 1) accum\n        (recur \n          (inc m) \n          (conj accum (reduce + (take-last 2 accum))))\n    )) 0 [1])))","problem":26,"user":"4ee26926535d10e5ff6f5367"},{"problem":26,"code":"( partial\n(fn [fiblist secondlastfib lastfib numfibs]\n  (if (<= numfibs 0)\n    fiblist\n  (recur (concat fiblist (list secondlastfib)) lastfib (+ secondlastfib lastfib) (dec numfibs))))\n  '() 1 1)","user":"556e1712e4b09a3098a52511"},{"problem":26,"code":"(fn [limit]\n  (loop [res [1 1] end (- limit 2)]\n    (if (zero? end)\n    \tres\n    \t(recur (conj res (+ (last res) (first (rest (reverse res))))) (dec end)))))","user":"55d332f5e4b0e31453f64a5f"},{"code":"#(map (fn [n] (int (Math/floor (/ (- (Math/pow (/ (+ 1 (Math/sqrt 5)) 2) n) (Math/pow (/ (- 1 (Math/sqrt 5)) 2) n)) (Math/sqrt 5))))) (range 1 (+ % 1)))","problem":26,"user":"50580b7ae4b06522596eba74"},{"problem":26,"code":"(fn [i] (take i ((fn fib [a b] \n  (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","user":"55f7bd07e4b06e875b46ceaf"},{"problem":26,"code":"#(reduce (fn [l n] (conj l (+ (last l) (last (butlast l))))) [1 1] (range (- % 2)))","user":"57c796b4e4b05aa3c4741d08"},{"problem":26,"code":"(fn fibo [n]\n  (if (< n 3)\n    (take n '(1 1))\n    (do\n      (loop [m 3 fibs '(1 1)]\n        (if (> m n)\n          fibs\n          (recur (inc m) (reverse (cons (+ (first (reverse fibs)) (second (reverse fibs))) (reverse fibs)))))))))","user":"550b1c2ce4b06e50f9beb13b"},{"problem":26,"code":"#(rest (reduce (fn [result _] (concat result (list (apply + (take-last 2 result))))) '(0 1) (range (- % 1))))","user":"59a8a4dce4b0bcf4e9a43af7"},{"problem":26,"code":"(fn [x] (loop [n 2 fib [1 1]] (if (>= n x) fib (recur (inc n) (conj fib (reduce + (take-last 2 fib)))))))","user":"56e6ef89e4b02e7e935eb6d0"},{"code":"(fn fib [i]\n  (cond\n   (<= i 2) (list 1 1)\n\t:else (let\n            [earlier-fibs (fib (- i 1))\n             rev-fibs (reverse earlier-fibs)\n             this-fib (+ (first rev-fibs) (second rev-fibs))]\n             (concat earlier-fibs (list this-fib)))))","problem":26,"user":"5364697ce4b0243289761e62"},{"problem":26,"code":"(fn fibs [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n        :else (conj (fibs (dec n))\n                    (+ (last (fibs (dec n)))\n                       (last (butlast (fibs (dec n))))))))","user":"541b41d1e4b01498b1a71a65"},{"problem":26,"code":"; https://clojuredocs.org/clojure.core/lazy-seq\n(fn [x] (take x ((fn fib [a b] (lazy-seq (cons a (fib b (+ a b))))) 1 1)))","user":"57465526e4b009280f9f2b61"},{"code":"(fn [n] (loop [arr [1 1] cnt 2] (if (< cnt n) \n                                  (recur (conj arr (+ (nth arr (- cnt 1)) (nth arr (- cnt 2)))) (inc cnt)) \n                                  arr)))","problem":26,"user":"52a5d1f3e4b0c58976d9abf1"},{"code":"(fn [findex]\n  (loop [i 0 coll []]\n    (cond \n      (= i findex) coll\n      (= i 0) (recur (inc i) [1])\n      (= i 1) (recur (inc i) [1 1])\n      :else (recur (inc i) (conj coll (+ (last coll) (nth coll (- (count coll) 2))) )))))","problem":26,"user":"50843a4ae4b0c98812d0788b"},{"code":"#(reverse \n  (loop [fibs '(1 1)]\n    (if (= (count fibs) %)\n      fibs\n      (recur (cons (+ (first fibs) (second fibs)) fibs)))))","problem":26,"user":"4f9b3532e4b0dcca54ed6d13"},{"code":"#(drop 1(take (+ % 1) (letfn [(fib [f s] (let [n (+ f s)]\r\n                    (lazy-seq (cons n (fib s n) ) ) ))] (fib -1 1))) )","problem":26,"user":"4fe9cea4e4b0547ebccb2471"},{"code":"#(take %1 [1 1 2 3 5 8 13 21 34])","problem":26,"user":"51eab308e4b0f1f103a0d150"},{"problem":26,"code":"(fn fib [n]\n  (let [fibn (fn fibn [a b nn] (if (<= nn 0) '() (cons a (fibn b (+ a b) (dec nn)))))]\n    (fibn 1 1 n)))","user":"55330d7fe4b09218d5f44f88"},{"problem":26,"code":"#(if (> 3 %2) \n   %1 \n   (recur (conj %1 \n                (+ (last %1) \n                   (last (drop-last %1)))) \n          (dec %2))) \n[1 1]","user":"56e044ade4b0ca2494a09603"},{"problem":26,"code":"(fn fib\n  [n]\n  (loop [cur 0\n         prev1 1\n         prev2 0\n         sofar []]\n    (if (= cur n)\n      sofar\n      (recur (inc cur) \n             (+ prev1 prev2) \n             (if (and (= 0 prev2) (= cur 0))\n               0 \n               prev1) \n             (conj sofar (+ prev1 prev2))))))","user":"5426bd40e4b01498b1a71b1c"},{"code":"#(loop [n 1 n-1 0 count % i 0 result ()] (if (= i count) (reverse result) (recur (+ n n-1) n count (inc i) (conj result n))))","problem":26,"user":"527bfb9fe4b03e8d9a4a75a4"},{"code":"(fn [x]\r\n  (loop [a 1 b 1 acc [] x x]\r\n    (if (zero? x)\r\n       acc\r\n       (recur b (+ a b) (conj acc a)(dec x)))))","problem":26,"user":"4dc54eb2535d8a4b2fd74284"},{"code":"(fn [n]\n     (loop [s [1 1]]\n       (if (= (count s) n)\n         s\n         (recur\n           (conj s        \n             (apply + (take 2 (reverse s))))))))","problem":26,"user":"525431dfe4b0541d1855b970"},{"problem":26,"code":"(fn foo [x]\n((fn helper [i a b s] (if (< i 3) s (helper (- i 1) b (+ a b) (conj s (+ a b))))) x 1 1 [1 1])\n  )","user":"557bc06ae4b05c286339e0b8"},{"code":"#(map (fn f [n] (if (< n 2) n (+ (f (- n 1)) (f (- n 2))))) (range 1 (+ 1 %)))","problem":26,"user":"4fb3b865e4b081705acca2a2"},{"code":"#(letfn [(fibo [a b]\n                        (lazy-seq\n                         (cons a (fibo b (+ a b)))))]\n                (take % (fibo 1 1)))","problem":26,"user":"50142490e4b07d18bdaaf70a"},{"problem":26,"code":"(fn [n]\n\t(map (fn fib [n]\n  \t\t\t(cond\n    \t\t\t(< n 3) 1\n    \t\t\t:else   (+ (fib (dec n)) (fib (- n 2)))\n         \t)\n         )\n         (map inc (range n))\n    )\n)","user":"53ac0e52e4b047364c044457"},{"code":"(fn this \n  ([x] (this x 0 []))\n  ([x n fseq]\n    (cond \n      (= x n) fseq\n      (< n 2) (recur x (inc n) (conj fseq 1))\n      :else\n        (let [f (fseq (- n 1))\n              s (fseq (- n 2))]\n          (recur x (inc n) (conj fseq (+ f s)))))))","problem":26,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (loop [k 2\n           seqn [1 1]]\n      (if (= k n)\n        seqn\n        (recur (inc k) (conj seqn (+ (nth seqn (- k 1)) (nth seqn (- k 2)))))))))","problem":26,"user":"53889587e4b0640c7a9a589e"},{"problem":26,"code":"(fn [n]\n  (loop [arr [1]\n           x 1\n           fib0 0\n           fib1 1]\n      (if (< x n)\n        (recur\n         (conj arr (+ fib0 fib1))\n         (inc x)\n         fib1\n         (+ fib0 fib1))\n        arr))\n    )","user":"609c503ee4b00e9e6653c419"},{"problem":26,"code":"(fn [num]\n  (loop [n num [head tail] [0 1] result []]\n    (if (= n 0)\n      result\n      (recur\n        (dec n)\n        [tail (+ head tail)]\n        (conj result tail)\n      )\n    )\n  )\n)","user":"5d97b033e4b0d3f9b434ad39"},{"code":"(fn fibs [n]\n  (cond\n  \t(< n 1) '()\n   \t(= n 1) '(1)\n   \t(= n 2) '(1 1)\n   \t:else (let\n            [x (fibs (dec n))]\n    \t\t(sort (conj x (+ (last x) (nth x (- n 3))))))))","problem":26,"user":"51ad0ab8e4b09397d510977b"},{"problem":26,"code":"#(loop [output '(1 1) n %]\n   (if (= 2 n)\n     (reverse output)\n     (recur (conj output (+ (first output) (second output))) (dec n))))","user":"5ec6b354e4b08d0ec38692d8"},{"code":"(fn fibs [n]\n  (if (< n 3)\n    (vec (take n [1 1]))\n    (let [fibl (fibs (dec n))]\n      (conj fibl (+ (last fibl) (last (butlast fibl)))))))","problem":26,"user":"5353afa0e4b084c2834f4b03"},{"code":"#((fn glist [a b l n] (if (= 0 n)\n                       (reverse l)\n                       (glist b\n                              (+ a b)\n                              (conj l b)\n                              (dec n)\n                              )\n                       )\n    )\n   0 1 '() %)","problem":26,"user":"51448607e4b0d29bc9e5e336"},{"problem":26,"code":"(fn [n]\n  \n  (loop [fib-acc [1 1]\n         last-num 1\n         next-to-last-num 1]\n    (if (= n (count fib-acc))\n      fib-acc\n      (recur (conj fib-acc (+ next-to-last-num last-num))\n             (+ next-to-last-num last-num)\n             last-num))))","user":"54508859e4b0e397800069a3"},{"code":"(fn fibs [n]\n  (let\n    [fibs-1 (fn [a b c fibs]\n      (if (= c 0)\n        fibs\n        (recur b (+ a b) (dec c) (conj fibs a))))]\n    (fibs-1 1 1 n [])))","problem":26,"user":"4e951f44535dbda64a6f6b30"},{"code":"(fn my-fib [x]\n  (take x \n    ((fn fib [a b]\n       (concat [a] (lazy-seq (fib b (+ a b))))\n    ) 1 1)))","problem":26,"user":"52d7412ce4b09f7907dd1371"},{"problem":26,"code":"#(take % (cons 1 ((fn f [x y] (lazy-seq (cons y (f y (+ x y))))) 1 1)))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":26,"code":"#(reduce (fn [acc n]\n           (if (< (count acc) 2)\n             (conj acc n)\n             (conj acc (apply + (take-last 2 acc)))))\n         []\n         (repeat % 1))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn fib \n  ([n] (fib (dec n) [1])) \n  ([n coll] \n    (if (> n 0)\n      (fib (dec n) (conj coll (apply + (take-last 2 coll))))\n      coll)))","problem":26,"user":"50378996e4b0af0658af77ae"},{"code":"(fn [n] ( #(if (= 0 %1) %2 (recur (- %1 1) (conj %2 (+ (last %2) (last (butlast %2)))))) (- n 2) [1 1]))","problem":26,"user":"539c9e26e4b0b51d73faaf2e"},{"problem":26,"code":"(fn fibonacci [n]\n  (loop [l '(1 1) n (- n 2)]\n    (if (= n 0)\n      (reverse l)\n      (recur\n        (conj l (+ (first l) (second l)))\n        (dec n)))))","user":"5141e978e4b0b50abeb46b20"},{"problem":26,"code":"(fn fib-seq\n  [n]\n  (if (= n 1)\n    '(1)\n    (if (= n 2)\n      '(1 1)\n      (let [fib-prev-seq (fib-seq (- n 1))\n            fib-prev-prev-seq (fib-seq (- n 2))]\n        (concat fib-prev-seq (list (+ (last fib-prev-seq) (last fib-prev-prev-seq))))))))","user":"56cf9d4fe4b0ea9b8538f76c"},{"code":"#(loop [n % fib [1 1]]\n    (if (<= n 2)\n      (sequence fib)\n      (recur (dec n) (conj fib (+ (last fib) (first (reverse (butlast fib))))))))","problem":26,"user":"534b0598e4b084c2834f4a75"},{"code":"(fn ! [x]\n  (if (= x 1)\n    [1]\n    (if (= x 2)\n      [1 1]\n      (let [s (! (- x 1))]\n        (conj s (+ (get s (- (count s) 1)) (get s (- (count s) 2))))))))","problem":26,"user":"4fc9cba3e4b0ee37620e1849"},{"problem":26,"code":"(fn\n  [n]\n  (if (= n 1)\n    '(1)\n   \t(loop\n      [x 1\n       y 1\n       result '(1 1)\n       z 2]\n      (if (= n z)\n        (reverse result)\n        (recur y (+ x y) (conj result (+ x y)) (+ z 1))))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":26,"code":"(fn fib [n] \n\t(loop [lis '() cnt n] \n\t  (if (= cnt 0) (reverse lis )\n\t      (if (< (count lis) 2) \n\t\t(recur (conj lis 1) (dec cnt))\n\t\t(recur (conj lis (+ (first  lis) (second lis))) (dec cnt))))))","user":"52457931e4b08ba239308107"},{"problem":26,"code":"(fn [n]\n  (take n ((fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b))))) 1 1)))","user":"53623eaee4b0243289761e4f"},{"problem":26,"code":"(fn [len]\n  (let [fib (fn fib* [p1 p2]\n              (lazy-seq\n               (cons p1\n                     (fib* p2 (+ p1 p2)))))]\n    (take len (fib 1 1))))","user":"5e62c405e4b0fd0acd15869b"},{"code":"(fn fib [n]\n  (loop [i 0 a 1 b 1 res []]\n    (if (< i n)\n      (recur (inc i) b (+ a b) (cons a res))\n      (reverse res))))","problem":26,"user":"52c4d327e4b0c2d177d620e6"},{"problem":26,"code":"(fn [n]\n  (loop [fibs [] counter 0]\n    (cond\n     (= counter n) fibs\n     (> 2 counter) (recur (conj fibs 1) (inc counter))\n     :else (recur (conj fibs (+ (last fibs) (second (reverse fibs)))) (inc counter)))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":26,"code":"#(map first (take % (iterate (fn [[a b]] (vector b (+ a b))) [1 1])))","user":"5790e62ae4b0ebec4cfb75b0"},{"code":"(fn fib [n]\n  (reverse\n    ((fn rfib [n]\n      (loop [n n]\n        (cond\n          (= n 1) (list 1)\n          (= n 2) (list 1 1)\n          :else (let [result (rfib (- n 1))]\n                  (cons (+ (first result)\n                            (second result))\n                        result)))))\n      n)))","problem":26,"user":"4fcc6cb3e4b0ee37620e1861"},{"code":"#(if (= % 0) '(0)\n   (if (= % 1) '(1)\n     (if (= % 2) '(1 1)\n       (loop\n         [f [1 1 2] c 3]\n         (if (= c %)\n           f\n           (recur (conj f (+ (last f) (last (butlast f)))) (inc c)))))))","problem":26,"user":"515896f2e4b059418b97f0a8"},{"problem":26,"code":"(fn fib\n  ([n] (fib n '(1 1) 2))\n  ([n acc count]\n   (if (= n count)\n     (reverse acc)\n     (recur n (conj acc\n                    (+ (first acc)\n                       (nth acc 1)))\n                    (inc count)))))","user":"5d3e66d4e4b01671435dbd72"},{"problem":26,"code":"(fn [n]\n  (loop [n (- n 2) coll [1 1]]\n    (if (<= n 0)\n      coll\n      (recur (dec n) (conj coll (+ (last coll) (last (pop coll))))))))","user":"5971a017e4b01722bebd4c75"},{"problem":26,"code":"(fn [x]\n  (loop [i 2\n         a 1\n         b 1\n         r [1 1]]\n    (if (= i x)\n      r\n      (recur (inc i) b (+ a b) (conj r (+ a b))))))","user":"5459f13be4b01be26fd74631"},{"problem":26,"code":"#(loop[a '(1 1)]\n  (if (= (count a) %)\n    (reverse a)\n    (recur (conj a (reduce + (take 2 a))))))","user":"5ea1e99de4b00a66d4a9518d"},{"problem":26,"code":"(fn [x] (loop [i 1\n               j 1\n               result [i j]]\n          (if (= (count result) x)\n            result\n            (let [new (+ i j)]\n              (recur j new (conj result new))))))","user":"540c288ae4b0addc1aec66ff"},{"code":"(fn [x]\n  (reverse\n  (\n    (fn fibs [x]\n       (case x\n        0 '()\n        1 '(1)\n        2 '(1 1)\n        (\n            (fn [p]\n                (cons\n                    (+ (first p) (first (rest p)) )\n                    p\n                )\n            )\n            (fibs (dec x))\n         )\n        )\n      )\n      x\n   )\n   )\n)","problem":26,"user":"52b49aebe4b0c58976d9ad2b"},{"code":"#(take % (map second\n  (iterate (fn [[a b]] [b (+ a b)])\n  [0 1])))\n\n; (fn [m]\n;   (reverse \n;    (loop [n 3\n;           res (list 1 1)]\n;      (if (> n m)\n;        res\n;        (recur (+ n 1) (conj res (+ (first res) (second res))))))))","problem":26,"user":"4ec6297b535d6d7199dd36c4"},{"code":"(fn fib [n]\n  (cond (= n 1) '(1)\n        (= n 2) '(1 1)\n        true (concat (fib (- n 1)) (list (+ (nth (fib (dec n)) (- n 3))\n                                            (nth (fib (dec n)) (- n 2)))))))","problem":26,"user":"51e0198ee4b01188f0627539"},{"code":"#(loop [n % seq []]\n  (letfn [(fib [x]\n    (if (<= x 2) \n      1\n      (+ (fib (- x 2)) (fib(- x 1)))))]\n  (if (= n 0)\n    seq\n    (recur (dec n) (cons (fib n) seq)))))","problem":26,"user":"4f24b023e4b0d66497709fee"},{"code":"(let [fib (fn [n]\n  (loop [c 0 p 1 t 0] \n    (if (= c n) \n        t\n      (recur (inc c) t (+ p t)))))]\n  #(map fib (range 1 (inc %))))","problem":26,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn [cnt]\n  (loop [s [] i 0]\n    (if (< i cnt)\n      (recur\n        (let [c (count s)\n              lst (last s)\n              scd (if (> c 1) (nth s (- c 2)) 0)]\n          (if (= i 0)\n            (conj s 1)\n            (conj s (+ lst scd))))\n        (inc i))\n      s)))","problem":26,"user":"5022292ee4b0846bc458ae46"},{"problem":26,"code":"(fn [steps]\n  (take steps\n    (map\n      second\n      (iterate\n          (fn [[a b]] [b (+ a b)])\n          [0 1]))))","user":"5984e7dee4b021a7a535fe43"},{"code":"(fn fib ([n] (fib '(1) n)) ([aux n] (if (<= n 1) aux (recur (concat aux [(+ (last aux) (if (nil? (butlast aux)) 0 (last (butlast aux))))]) (dec n)))))","problem":26,"user":"53a2ec2be4b0f1fc74538830"},{"problem":26,"code":"(fn [x]\n  (map (fn fib[n] (if (= n 1) 1 (if (<= n 0) 0 (+ (fib (- n 1)) (fib (- n 2))))))\n       (range 1 (+ x 1))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":26,"code":"(fn fibn [n]\n\t(take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))\n)","user":"5e546e20e4b027a2e10ac0eb"},{"code":"(fn [x] ( loop [i 0, a '(1 1)] (if (< i (- x 2) ) (recur (inc i) (concat a (list (+ (last a) (last (butlast a))) ) ) ) a) ) )","problem":26,"user":"5078300de4b0fc74642bff66"},{"problem":26,"code":"(fn [x]\n  (loop [cnt 1 acc [1] _next 1]\n     (if (= cnt x)\n       acc\n       (recur (inc cnt) (conj acc _next) (+ _next (last acc)))\n     )\n    )\n  \n  )","user":"560768a0e4b08b23635d317f"},{"code":"(fn [n]\n  (loop [k (- n 2) \n         res '(1 1)]\n    (if (zero? k)\n      (reverse res)\n      (recur (dec k)\n             (cons (+ (first res) (second res))\n                   res)))))","problem":26,"user":"4f2b0951e4b0d6649770a045"},{"code":"(fn [n]\n  (reverse ((fn [num]\n  \t\t(loop [lis '(1 1) n (- num 2)]\n\t\t\t  (cond\n\t\t\t   (= n 0) lis\n\t\t\t   (> n 0)\n\t\t\t   (recur (cons (+ (first lis)(first (rest lis))) lis) (- n 1)))))n)))","problem":26,"user":"4df9c598535d04ed9115e77a"},{"problem":26,"code":"(fn [count] \n  (loop [a 1\n         b 1\n         res [1]\n         inner-count count]\n    (if (= inner-count 1)\n      res\n      (recur b (+ b a) (conj res b) (dec inner-count)))))","user":"58ee0bb6e4b056aecfd47d97"},{"problem":26,"code":"#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 \n                                                      1])))","user":"53da059be4b0e771c302547e"},{"problem":26,"code":"(fn [number]\n  (map first (take number (iterate (fn [[n-1 n]] [n (+ n n-1)]) [1 1])))\n  )","user":"5fee18f2e4b05ac5b16ea1d2"},{"problem":26,"code":"(fn [n]\n  (loop [n n\n         f1 1\n         f2 1\n         acc []]\n    (if (zero? n)\n      acc\n      (recur (dec n) f2 (+ f1 f2) (conj acc f1)))))","user":"60b57acee4b0e0fa5f1b4238"},{"code":"(fn fib3 [n] \n  (take n \n    (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4eb2f89a535d7eef30807353"},{"problem":26,"code":"(fn [x] (map (fn fib\n               [n]\n               (if (<= n 1)\n                 n\n                 (+\n                  (fib (- n 1))\n                  (fib (- n 2))))) (range 1 (+ x 1))))","user":"5d615431e4b0c9e5857d5010"},{"code":"(fn fib [n]\r\n   (letfn [(fibn [x]\r\n                 (if (<= x 1)\r\n                   1\r\n                   (+ (fibn (- x 1)) (fibn (- x 2)))))]\r\n          (map fibn (range n))))","problem":26,"user":"4fc8b012e4b0ee37620e1838"},{"problem":26,"code":"(fn [n]\n    (loop [steps (- n 2) acc [1 1]]\n      (if (> steps 0)\n        (recur (- steps 1) (cons (+ (first acc) (second acc)) acc))\n        (reverse acc))))","user":"5280539ce4b0757a1b1713f3"},{"problem":26,"code":"(fn [n]\n  (seq (reduce (fn [acc _]\n            (let [prev-2 (or (last (butlast acc)) 0)\n                  prev-1 (or (last acc) 1)]\n              (conj acc (+ prev-2 prev-1))))\n          []\n          (range n))))","user":"5549ff9ae4b0a04f7929956e"},{"code":"#(reduce (fn [val x] (conj (vec val) (apply + (take-last 2 val)))) '(1) ((comp range dec) %1))","problem":26,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn [cnt]\r\n  (loop [fst 1\r\n         sec 1\r\n         i 0\r\n         seq nil]\r\n         (if (= i cnt)\r\n            (reverse seq)\r\n            (recur sec (+ fst sec) (inc i) (cons fst seq)))))","problem":26,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":26,"code":"(fn fib [input]\n  (letfn [(fib-sub \n           [coll index input]\n           (if (or (= input index) (< input 3))\n             (take input coll)\n             (recur \n              (conj coll (+ (get coll (- index 2)) (get coll (- index 1))))\n              (inc index)\n              input)))]\n    (fib-sub [1 1] 2 input)))","user":"57d13683e4b0bd073c202368"},{"problem":26,"code":"(fn [x] (reduce (fn [y z] (conj y (+ (last y) (last (butlast y))))) [1 1] (range (- x 2))))","user":"53c1b787e4b00fb29b221266"},{"code":"#(loop [n % a 0 b 1 stuff []]\r\n   (if (= n 0)\r\n     (reverse stuff)\r\n     (recur (- n 1) b (+ a b) (concat [b] stuff))\r\n   )\r\n )","problem":26,"user":"4fcd0990e4b0ee37620e1874"},{"problem":26,"code":"#(map second (take % (iterate (fn [x] [(second x) (apply + x)]) [0 1])))","user":"5595415ae4b0c79f6e1db965"},{"problem":26,"code":"(fn [n]\n    (let [f (fn [coll n]\n              (if (zero? n) coll\n                  (recur (conj coll\n                               (+ (last coll) (last (butlast coll))))\n                         (dec n))))]\n      (f '[1 1] (- n 2))))","user":"57b9f35be4b0fbc9809a27f9"},{"problem":26,"code":"(fn fib\n    [num]\n    (loop [n num numA 0 numB 1\n           fib-coll []]\n        (if (= n 0)\n            fib-coll\n            (recur (dec n) numB (+ numA numB) (conj fib-coll numB)))))","user":"5ac35d00e4b0e27600da7712"},{"problem":26,"code":"#(map (fn fib [x]\n       (if (< x 2)\n         1\n         (+ \n          (fib (- x 1)) \n          (fib (- x 2)))\n         ))\n     (range %)\n     )","user":"542c858ae4b0dad94371f2a8"},{"problem":26,"code":"(fn fib [n]\n  (\n    take n (\n      (fn fib-recur [a b]\n        (cons \n          a \n          (lazy-seq (fib-recur b (+ a b)))\n        )\n      ) 1 1\n    )\n  )\n)","user":"58d737cee4b03c36ff7e5982"},{"problem":26,"code":"(fn [x]\n    (let [f (fn f [x]\n              (cond (= x 0)\n                    1\n                    (= x 1)\n                    1\n                    :else\n                    (+ (f (- x 2))\n                       (f (- x 1)))))]\n      (map f (range x))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":26,"code":"(fn [numberOfFibs]\n    (letfn [(lazyFib [a b] (cons a (lazy-seq (lazyFib b (+ b a)))))]\n      (take numberOfFibs (lazyFib 1 1))))","user":"548f339ee4b0e286459a1233"},{"problem":26,"code":"#(take % (map first (iterate (fn [[n2 n1]] [n1 (+ n2 n1)]) [1 1])))","user":"550b502ae4b06e50f9beb13f"},{"code":"#((fn fib[s, c] (if (= (count s) c) s (fib (conj s (+ (last s) (second (reverse s)))) c))) [1 1] %)","problem":26,"user":"5093ca51e4b097f48cc38585"},{"problem":26,"code":";(fn [num]\n;  (loop [a 1 b 1 n 0 l []]\n;    (if (= n num)\n;      l\n;      (recur b (+ a b) (inc n) (conj l a)))))\n;\n;(fn [n]\n;  (take n\n;        (map first\n;             (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n (fn [n]\n  (let [fib (fn fib\n        ([] (fib 1 1))\n        ([a b] (cons a (lazy-seq (fib b (+ a b))))))]\n    (take n (fib))))","user":"54b04708e4b09f271ff37d11"},{"problem":26,"code":"(fn [num]\n  (letfn [(fib [n]\n            (if (or (= n 1) (= n 2))\n              1\n              (+ (fib (- n 1)) (fib (- n 2)))))]\n\t(->> num\n        (range)\n        (map inc)\n        (map fib))))","user":"56442758e4b0018b46ad8c0a"},{"code":"(fn fib [n] (if (< n 3) [1 1]\n(let [s (fib (dec n)) ] (conj s (+ (last s) (last (butlast s))) ) ) ))","problem":26,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":26,"code":"(fn fibs [number] \n  (map\n    (fn fib [number]\n      (if (or (= number 0)\n              (= number 1)\n              )\n        1\n        (+(fib (dec number)) (fib (- number 2)))\n        )\n      ) \n    (range number)\n    )\n  )","user":"54b187bee4b09f271ff37d21"},{"problem":26,"code":"(fn fibb-n [val]\n   ((fn fibb-r [first second n]\n      (cond\n        (> n 2) (let [step1 (fibb-r first second (- n 1))\n                      step2 (fibb-r first second (- n 2)) ]\n                  (conj step1 (+ (last step1) (last step2))))\n        (= n 2) [first second]\n        (= n 1) [first]\n        :else [])\n      ) 1 1 val\n     ))","user":"5b107263e4b0cc2b61a3be22"},{"code":"#(take % (map second (iterate (fn[[left right]][right (+ left right)])[0 1])))","problem":26,"user":"532631e1e4b09d4e7a9b54ea"},{"problem":26,"code":"(fn fip [n]\n  (if (= n 1)\n  '(1)\n  (if (= n 2)\n    '(1 1)\n    (concat\n     (fip (- n 1))\n     (list \n      (+\n       (last (fip (- n 1)))\n       (first (rest (reverse (fip (- n 1)))))\n      )\n     )\n    )\n  ))\n)","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":26,"code":"(fn[x](loop[i 0 res []](if(< i x)(recur(inc i)(conj res(if(<= 2 i)(+ (nth res (- i 1))(nth res (- i 2)))1)))res)))","user":"5f86f5a3e4b0649ffcda4cad"},{"code":"(fn [n]\n   (if (= n 0) nil (if (= n 1 ) [1] (if (= n 2) [1 1] \n   ((fn [m fl]\n      (if (= m n) fl\n          (recur\n           (inc m)\n           (conj fl (apply + (take-last 2 fl)))\n           ))) 2 [1 1])))))","problem":26,"user":"51aa5434e4b04e3dc0c27b26"},{"code":"#(loop [a [1 1]                                                \n       n 2]                                                    \n  (if (= n %)                                                  \n    a                                                          \n    (recur (conj a (+ (last (butlast a)) (last a))) (inc n))))","problem":26,"user":"510528a0e4b0730a5f55ad85"},{"problem":26,"code":"#(loop [b []\n         a %\n         c 0\n         d 1]\n    (if (= a 1)\n      (cons 1 b)\n      (recur (conj b (+ c d)) (dec a) d (+ c d))))","user":"5e4b919ce4b0889a8790a556"},{"problem":26,"code":"(fn [lim] (loop [a 1 b 0 l lim acc '()] (if (= 0 l) (reverse acc) (recur (+ a b) a (- l 1) (cons a acc)))))","user":"54d95ce8e4b024c67c0cf74a"},{"code":"(fn [l]\n  (loop\n    [[n n-1 :as r] '(1 1)\n     i 2]\n    (if (= i l)\n      (reverse r)\n      (recur\n       (conj r (+ n n-1))\n       (inc i)))))","problem":26,"user":"50e47fa5e4b0cb9ec68fbc9c"},{"code":"(fn [n]\n  (loop [a 0 b 1 x n acc []]\n\t\t(if (zero? x) \n\t\t\tacc \n\t\t\t(recur b (+ a b) (dec x) (conj acc b)))))","problem":26,"user":"4ef5c7ce535dced4c769f248"},{"code":"#(let\n [f (fn fib [x]\n  (cond \n    (= x -1) 0\n    (= x 0) 1\n    :else  (+\n      (fib (- x 1))\n      (fib (- x 2)))))]\n (map f (range %))\n)","problem":26,"user":"52d5bee0e4b09f7907dd1344"},{"code":"(fn fib [x] \n  (letfn [\n    (fib' [i a b]\n      (if (zero? i) nil (cons b (fib' (- i 1) b (+ a b)))))\n    ]\n    \n    (fib' x 0 1)))","problem":26,"user":"4ffb59f6e4b0678c553fc3cf"},{"problem":26,"code":"#(take % (map (fn [a] (nth a 1)) (iterate (fn [b] (let [[x y] b] (list y (+ x y)))) '(0 1))))","user":"5505ceb3e4b086ebe8a79c8b"},{"code":"(fn [x]\n  (take x\n    ((fn fibonacci [a b]\n        (cons a (lazy-seq (fibonacci b (+ a b))))) \n      1 1)))","problem":26,"user":"4e9487fb535dbda64a6f6b14"},{"problem":26,"code":"#(rest (take (+ %1 1) ((fn f [a b] (cons a (lazy-seq (f b (+ a b))))) 0 1)))","user":"58954772e4b00487982d527b"},{"problem":26,"code":"(fn [n]\n  (loop [res [1]]\n    (if (= n (count res))\n      res\n      (let [second-last (or (last (butlast res))\n                            0)]\n        (recur (conj res (+ second-last (last res))))))))","user":"60a7104be4b00e9e6653c465"},{"code":"(fn [n]\n           (if (= n 1)\n               '(1)\n               (loop [a 1 b 1 x 2 c [1 1]]\n                  (if (= x n)\n                      c\n                      (recur b (+ a b) (inc x) (conj c (+ a b)))))))","problem":26,"user":"4f03f197535dcb61093f6b84"},{"problem":26,"code":"(fn [n]\n  (->>\n    (iterate (fn [[a b]] [b (+ a b)]) [1 1])\n    (take n)\n    (map first)))","user":"5760682ee4b08062f99a4e94"},{"code":"(fn [n] \n  (let [fib (fn [l tail n] \n              (if (= n 1)\n                l\n                (recur (conj l tail)\n                      (+ tail (last l))\n                      (dec n))))]\n  (fib [1] 1 n)))","problem":26,"user":"4ec21058535dfed6da9c6dba"},{"problem":26,"code":"(fn fib [n] (loop [res [1 1]]\n          (if (>= (count res) n)\n            (seq res)\n            (recur (conj res (+'  (last res) (last (butlast res))))))))","user":"5f6cb2a5e4b02876ed9fd057"},{"code":"(fn [n]\n  (letfn [(step [a b]\n            (lazy-seq\n             (cons a (step b (+ a b)))))]\n    (take n (step 1 1))))","problem":26,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn [n]\n  (take n (map second (iterate (fn [[a b]] [b (+ a b)]) [0 1]))))","problem":26,"user":"5003deb9e4b0678c553fc445"},{"code":"#(take % (map first (iterate (fn [[a1 a2]] [a2 (+ a1 a2)]) [1 1])))","problem":26,"user":"52fb903ee4b047fd5583700b"},{"code":"#(take % ((fn fibs [a b]\n           (cons a (lazy-seq (fibs b (+ a b))))) 1 1))","problem":26,"user":"536102efe4b0243289761e3e"},{"code":"#(take % (flatten (iterate (fn [[x y]] [(+ x y) (+ x y y)]) [1 1])))","problem":26,"user":"533f1584e4b085b17e897d9b"},{"problem":26,"code":"(fn fib-list [n]\n   (map (fn fib [n]\n     \t  (if (or (= n 1) (= n 2))\n            1\n            (+ (fib (- n 1)) (fib (- n 2)))))\n        (range 1 (+ n 1))))","user":"55d7d139e4b0e31453f64aaa"},{"problem":26,"code":"#(loop [s [1] n1 0 n2 1 i %]\n  (if (= 1 i)\n    s\n    (let [n3 (+ n1 n2)]\n      (recur (conj s n3) n2 n3 (dec i)))))","user":"556159fae4b0c656e3ff17c7"},{"problem":26,"code":"(fn fib [n]\n  (case n\n    1 [1]\n    2 [1 1]\n    (let [restFib (fib (- n 1))]\n      (conj\n        restFib \n        (+ (last restFib) (last (drop-last 1 restFib)))\n      )\n    )\n  )\n)","user":"5a933d8ee4b0d174b936c720"},{"problem":26,"code":"(fn fib [n]\n\t((fn fib-inner [n f x y]\n\t\t(if (< n 3) \n\t\t\tf\n\t\t(fib-inner (- n 1) (conj f (+ x y)) y (+ x y))))\n\tn [1 1] 1 1))","user":"530ec8d4e4b08068f379ecc2"},{"problem":26,"code":"(fn \n  [x] \n  ((fn \n     [x y left result]\n     (if (>= left 0) (recur y (+ x y) (- left 1) (conj result x)) (reverse result))\n   ) 1 1 (- x 1) '())\n  )","user":"55300ea8e4b076ab5578f80b"},{"problem":26,"code":"#(map first\n      (take %\n            (iterate (fn [[x y]] [y (+ x y)]) [1 1])))","user":"594880ade4b07ddc2dafadc2"},{"problem":26,"code":"#(reduce (fn [a b] (conj a (+ (last a) (second (reverse a))))) [1 1] (range (- %1 2)))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":26,"code":"(fn [n] (reverse (loop [i 0 x 0 y 1 r ()]\n                   (if (= i n) r (recur (+ i 1) y (+ x y) (conj r y))))))","user":"547c0c26e4b0c51c1f4d72e2"},{"problem":26,"code":"(fn [n] (loop [fst 1 sec 1 fib-list []]  (if (= (count fib-list) n) fib-list (recur sec (+ fst sec) (conj fib-list fst))  )     ))","user":"572722c4e4b0c5bde472c134"},{"code":"(fn [n] \n  (take n \n    (map first\n      (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","problem":26,"user":"4f65e3e9e4b07046d9f4ef47"},{"code":"#(loop [n 1, l '()]\n    (if (= (+ 1 %) n)\n      l\n      (recur (inc n) (concat l (list (.intValue (Math/floor (+ (/ (Math/pow (/ (+ 1 (Math/sqrt 5)) 2) n) (Math/sqrt 5)) (/ 1 2)))) )))))","problem":26,"user":"4f038567535dcb61093f6b0c"},{"problem":26,"code":"(fn [z] (map (fn [x] ((fn [y] (loop [res [0 1]\n                             ins (range y)]\n                        (let [input ins]\n                          (if (not-empty input)\n                            (recur (list (last res) (+ (first res) (second res))) (drop 1 input))\n                            (last res))))) x)) (range z)))","user":"56cb6425e4b0ea9b8538f730"},{"problem":26,"code":"(fn [n] \n  (let [fib-frame (fn [[prev-elem curr-elem]] [curr-elem (+ prev-elem curr-elem)])\n        all-fibs (map first (iterate fib-frame [1 1]))]\n   \t(take n all-fibs)))","user":"5abbbd46e4b073f1774426db"},{"code":"(fn [n]\n  (reduce \n   \t(fn [a b] (conj a (+ (last a) (-> a reverse second)))) \n   \t[1 1] \n   \t(range (-> n dec dec)))\n  )","problem":26,"user":"531490bde4b08068f379ed17"},{"code":"#(take % (map\n\t(fn fib [%]\n\t\t(if (zero? %)\n\t\t\t0\n\t\t\t(if (== % 1)\n\t\t\t\t1\n\t\t\t\t(+ (fib (- % 1)) (fib (- % 2)))\n\t\t\t)))\n\t(range 1 (inc %))))","problem":26,"user":"50fb5e61e4b0d10d794c19e8"},{"problem":26,"code":"(fn [fib-amount]\n      (loop [\n             fib-num 0\n             result []\n             ]\n        (if (= fib-num fib-amount) \n          result\n          (cond\n           (or (= fib-num 0) (= fib-num 1)) (recur (inc fib-num) (conj result 1))\n           :else (recur (inc fib-num) (conj result (+ (last result) (last (butlast result)))))))\n        )\n      )","user":"5a737561e4b0512ff01cdaaa"},{"problem":26,"code":"(fn [n]\n  (loop [result (vector)]\n \t(if (= n (count result))\n      (identity result)\n \t  (if (>= 1 (count result))\n        (recur (conj result 1))\n        (recur (conj result (apply + (take-last 2 result))))))))","user":"56e87a9ce4b04a395b9a03f0"},{"code":"(fn fib [n]\n  (loop [count 1\n         output []]\n    (if (> count n)\n      output\n      (if (<= count 2)\n        (recur (+ count 1) (conj output 1))\n        (let [fib-1 (nth output (- count 2))\n\t            fib-2 (nth output (- count 3))\n\t            fib-this (+ fib-1 fib-2)]\n          (println \"count =\" count \", fib =\" fib-this)\n          (recur (+ count 1) (conj output fib-this)))))))","problem":26,"user":"500850f4e4b028e089d3518b"},{"problem":26,"code":"#(loop [n0 1 n1 1 cnt 0 answer []]\n   (if (< cnt %)\n   \t(recur n1 (+ n0 n1) (inc cnt) (conj answer n0))\n   \tanswer\n   )\n   )","user":"55fc8f1fe4b0f488688e0675"},{"problem":26,"code":"#(take %\n       (map first \n            (iterate (fn [[a b]] [b (+ a b)]) \n                     [1 1])))","user":"55fc1f05e4b0f488688e066f"},{"code":"(fn [n]\n  (loop [x n a 1 b 1 acc [1 1]]\n    (if (> x 2)\n      (recur (dec x) b (+ a b) (conj acc (+ a b)))\n      acc)))","problem":26,"user":"4ef1ee67535dced4c769f219"},{"problem":26,"code":"(fn [n]\n  (reduce\n   (fn [fib i]\n     (conj fib\n      (condp = i\n       0 1\n       1 1\n       (apply + (take-last 2 fib)))))\n   []\n   (range n)))","user":"4e6fe3a6535d5021c1a89629"},{"problem":26,"code":"#(take %\n        (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"5731e5a1e4b0cd1946bd0fca"},{"problem":26,"code":"(fn [n] \n  (last (take n (iterate #(conj % (apply + (take-last 2 %))) [1]))))","user":"53a44fefe4b0b62ce300572e"},{"code":"#(take %  (map first (iterate (fn [[a b]] [b (+ b a)]) [1 1])) )","problem":26,"user":"4ec2f1d9535dcc7ae8597d4d"},{"problem":26,"code":"(fn [n]\n (let [defFib (fn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))]\n  (take n (defFib 1 1))))","user":"5783c859e4b0ebec4cfb74bd"},{"problem":26,"code":"(fn [x] (map (fn fib [y] (if (<= y 1) 1 (+ (fib (- y 1)) (fib (- y 2))))) (range x)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":26,"code":"(fn [n] \n  (take n ((fn fib- [a b] (lazy-seq (cons a (fib- b (+ a b)))) ) 1 1))\n  )","user":"52b091b4e4b0c58976d9accc"},{"code":"(fn [n]\n  (let [fib (fn [j, k, l]\n    (if (= j 0)\n        l\n        (recur (dec j) l (+ k l))))]\n  (for [i (range 0 n)] \n    (fib i 0 1))))","problem":26,"user":"4fb1159fe4b081705acca273"},{"problem":26,"code":"(fn fib [n]\n  (cond (= 2 n) [1 1]\n        :else (let [prev (fib (dec n))\n                    new (apply + (take-last 2 prev))]\n                 (conj prev new)\n                )))","user":"5bafd5c8e4b0a20761a234dd"},{"problem":26,"code":"(fn [numbers]\n  (reverse\n   (loop\n     [fib-list '(1 1)\n      remaining (- numbers 2)]\n     (if (<= remaining 0)\n       fib-list\n       (recur (cons (+ (first fib-list) (second fib-list)) fib-list) (- remaining 1))))))","user":"5989ee61e4b021a7a535fed7"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[a b]] (list b (+ a b))) '(1 1)))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":26,"code":"(fn [n]\n   (letfn [(fib\n             ([] (fib 1 1))\n             ([x y] (lazy-seq (cons x (fib y (+ x y))))))]\n     (take n (fib))))","user":"604b072ae4b0a426fc8b43d2"},{"problem":26,"code":"(fn [n]                                                                  \n   (loop [cnt 0 acc '()]                                                        \n     (if (= cnt n)                                                              \n        (reverse acc)                                                                     \n     (recur (+ cnt 1)                                                           \n            (if (> cnt 1)                                                       \n            ;; then                                                             \n                (conj acc (+ (first acc) (second acc)) )                        \n            ;; else                                                             \n                (conj acc 1)                                                    \n            )))))","user":"564cc055e4b0284900eef676"},{"code":"(fn fibs [x]\n    ((fn gen [a b c] \n        (if (= c 0)\n            []\n            (cons \n                b \n                (gen b (+ a b) (- c 1))\n            ))) \n    0 1 x)\n    )","problem":26,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn fib [x]\n  (if (= x 1) [1]\n  (if (= x 2) [1 1]\n  ((fn fib-help [state index]\n      (println (str [state index]))\n      (if (> index 2)\n         (do\n           (let [state (fib-help state (- index 1))]\n           (conj state\n                (+\n                  (nth state (- index 2))\n                  (nth state (- index 3))))))\n              \n      state)) [1 1] x))))","problem":26,"user":"4ed87228535d10e5ff6f52fa"},{"problem":26,"code":"(fn [len]\n  (loop [s [1]]\n    (if \n      (>= (count s) len)\n      s\n      (recur (conj s (reduce + (take-last 2 s)))))))","user":"56d9883ae4b0ea9b8538f7f4"},{"code":"(fn [n]\n   (reverse\n     (reduce\n       (fn [acc _]\n          (cons (+ (first acc) (first (rest acc))) acc))\n        '(1 1)\n        (range 1 (dec n)))))","problem":26,"user":"523bd9c0e4b07becd5be2201"},{"code":"(fn [n] (take n (map first (iterate (fn [ [a b] ] [b (+ a b) ]) [1 1]))))","problem":26,"user":"5073e7fde4b054001656accb"},{"code":"#(take % ((fn rfib [a b] \n       (cons a (lazy-seq (rfib b (+ a b)))))\n    1 1)\n)","problem":26,"user":"504ed16de4b069badc5a33cf"},{"problem":26,"code":"(fn fib-iter\n  [n]\n  (map first (take n (iterate (fn [[a b]]\n                      [b (+ a b)]) [1 1]))))","user":"5d53a59ae4b0776584bd6f72"},{"code":"(fn [M]\n  (reverse\n  ((fn l [N x y items]\n    (if (zero? N)\n      items\n      (recur\n        (- N 1)\n        y\n        (+ x y)\n        (conj items (+ x y)))))\n   (- M 2) 1 1 '(1 1))))","problem":26,"user":"4ee9c8d0535d93acb0a66892"},{"code":"(fn [x]\n    ((fn fibgen [fibs,n]\n            (if (>= (count fibs) n)\n                (reverse fibs)\n                (fibgen\n                    (cons\n                        (+ (first fibs) (first (rest fibs))) \n                        fibs)\n                    n))) '(1 1) x))","problem":26,"user":"4f85ef29e4b033992c121c4d"},{"code":"(fn [x] (take x \n  (map first \n    (iterate #(vector (second %) (reduce + %)) [1 1]))))","problem":26,"user":"5018ed15e4b011a2e0bf6412"},{"problem":26,"code":"(fn fib [n] (reverse ((fn [c n] \n \t(if (= n (count c)) \n        c \t\t\t\t\t\n        (recur (cons (apply + (take 2 c)) c) n))) \n \t         '(1 1) n)))","user":"55c10409e4b01b9910ae2a2c"},{"problem":26,"code":"#(take % (map second  (iterate (fn [[p c]] [c (+ p c)]) [0 1])))","user":"549cc867e4b0f3d1d8e70f8f"},{"problem":26,"code":"(fn fib \n  [n]\n  (if (= n 1) \n    [1]\n    (if (= n 2)\n      [1 1]\n      (let [pre-fib (fib (dec n))]\n           (conj pre-fib (apply + (take-last 2 pre-fib)))))))","user":"578e2829e4b0ebec4cfb757d"},{"problem":26,"code":"#(map (fn fib [n]\n        (cond \n            (= n 0) 0\n            (= n 1) 1\n            :else (\n                + (fib (- n 1)) (fib (- n 2)))))\n     (range 1 (inc %)))","user":"5485d2c1e4b0e286459a11b3"},{"problem":26,"code":"#(reverse (loop [a '(1 1)] (if (< (count a) %) (recur (conj a (+ (first a) (fnext a)))) a)))","user":"54aec375e4b09f271ff37cf9"},{"problem":26,"code":"(fn [x] (\n  (fn fibiter [fibs x]\n    (if (= x (count fibs))\n      fibs\n      (fibiter (conj fibs (+ (last fibs) (last (butlast fibs)))) x))\n    ) [1 1] x)\n  )","user":"5f341a4be4b0574c87022c3d"},{"problem":26,"code":"#(letfn [(fib [a b] \n              (cons a (lazy-seq (fib b (+ a b)))))]\n   (take % (fib 1 1)))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":26,"code":"(fn [x]\n    (loop [fib-seq [0 1]\n           count 2]\n      (if (> count x)\n        (rest fib-seq)\n        (recur (conj fib-seq (reduce + (take-last 2 fib-seq)))\n               (inc count)))))","user":"5f02f365e4b0cf489e8d7f2c"},{"problem":26,"code":"#((fn fibonaci [x base] \n         (if (< (count base) x)\n             (fibonaci x (conj base (+ (first base) (second base))))\n             (reverse base)\n             )) % '(1 1))","user":"5e4b8fe8e4b0889a8790a555"},{"problem":26,"code":"(fn [x] (take  x ((fn rr [a b] (cons a (lazy-seq (rr b (+ a b))))) 1 1)))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn fib [max] (map (fn [n] (loop [i (inc n) a 0 b 1] (if (= i 0) a (recur (- i 1) b (+ a b))))) (range max)))","problem":26,"user":"525cd5bee4b0cb4875a45d4b"},{"problem":26,"code":"(fn [x] ( loop [ lcount x lres '(1 1) ]  (if (< lcount 3) (reverse lres) (recur (dec lcount) (conj lres (+ (first lres) (second lres) ))) )))","user":"5644611be4b0284900eef5f1"},{"problem":26,"code":"#(loop [count 2\n        seq [1 1]]\n   (if (= count %)\n     seq\n     (recur (inc count) (conj seq (+ (last seq) (first (rest (reverse seq))))))))","user":"5eb6561fe4b00a66d4a95233"},{"problem":26,"code":"#(map (fn fib [x] (if (or (= x 0) (= x 1)) 1 (+ (fib (- x 1)) (fib (- x 2))))) (take % (iterate inc 0)))","user":"548f11a0e4b0e286459a122d"},{"problem":26,"code":"#(loop [sq [] nm % el1 1 el2 1]\n   (if (<= nm 0)\n     sq\n     (recur (conj sq el1) (dec nm) el2 (+ el1 el2))\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":26,"code":"(fn [n] (loop [tmpn (- n 2) tmpv [1 1]]  ;n-2 as we have first do done ([1 1])\n          (if (= 0 tmpn) \n            tmpv ;if done return our vector of fib numbers else\n          (recur (dec tmpn)\n                 (conj tmpv (+ (last tmpv) (nth tmpv (- (count tmpv) 2))))))))\n           ;dec n, and add last tmp numb to 2nd last and put at end of vecotr","user":"59369515e4b02506e01a297e"},{"problem":26,"code":"(fn [x]\n  (reverse\n   (loop [x x acc [1 1]]\n    (if (= x 2)\n      acc\n      (recur (- x 1) (cons (apply + (take 2 acc)) acc))))))","user":"6001d240e4b074f607df6627"},{"code":"(fn fibonacci \n  ([c] (fibonacci c [1 1]))\n  ([c x] (if(= (count x) c) x (fibonacci c (conj x (+ (last x) (nth x (-(count x) 2))))))))","problem":26,"user":"51735df9e4b00f4b6b0490d6"},{"code":"(fn fib\n  ([x]\n    (cond\n      (= x 0) '()\n      (= x 1) '(1)\n      (= x 2) '(1 1)\n      (> x 2) (fib 1 1 [1 1] (- x 2))\n    )\n  )\n  ([x y r count] (let [z (+ x y)]\n      (if (> count 0) \n        (recur y z (conj r z) (dec count)) \n        r)\n    ))\n)","problem":26,"user":"4e44358f535dc968683fc4a8"},{"problem":26,"code":"(fn [n] (last (take (dec n) (iterate #(reverse (conj (reverse %) (apply + (take 2 (reverse %))))) '(1 1)))))","user":"55597fcce4b0deb715856e37"},{"code":"#(letfn [(\n  fib [n] (\n        if (= n 1) '(1)\n                    (if (= n 2) '(1 1)\n                                (conj (fib (- n 1))\n                                      (+ (first (fib (- n 2)))\n                                         (first (fib (- n 1)))\n                                      )\n                                )\n                    )\n      )\n  )]\n  (reverse (fib %))\n)","problem":26,"user":"4ecfa05c535d44c135fd68b9"},{"problem":26,"code":"#(take % ((fn fibb [a b] (lazy-seq (cons a (fibb b (+ a b))))\n           ) 1 1))","user":"571346c0e4b07c98581c3a9b"},{"problem":26,"code":"(fn [num] (loop [x (- num 1) v '(1)] (if (<= x 0) (reverse v) (if (<= (count v) 1) (recur (- x 1) (conj v (first v))) (recur (- x 1) (conj v (+ (first v) (first (rest v)))))))))","user":"605f92bae4b03746e80ebf62"},{"code":"(fn [x] (take x (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1] ))))","problem":26,"user":"51d5ce6fe4b01da06753aa94"},{"problem":26,"code":"(fn trygg [s]\n    (if(= s 1)\n    '(1)\n    (if(= s 2)\n     '(1 1)\n     (let [f (trygg (dec s))] (concat f (list ( reduce + (take-last 2 f))))))))","user":"5e832e75e4b09a7a73c8bbb5"},{"problem":26,"code":"(fn [n]\n  (take n \n        ((fn [] (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))))","user":"540aa29de4b0addc1aec66f1"},{"code":"(fn f [x]\n  (let [fib (fn j [a b] (cons a (lazy-seq (j b (+ a b)))))]\n    (take x (fib 1 1))))","problem":26,"user":"4ed4798f535d10e5ff6f52cc"},{"problem":26,"code":"(fn fb [x]\n  (loop [a x b 0 c 1 d []]\n    (if (< a 1)\n      d\n      (do\n        (println d)\n        (recur (- a 1) c (+ c b) (conj d c))))))","user":"5dcc5e5ce4b02b31cc3da3c7"},{"problem":26,"code":"#(take % ((fn f [] (lazy-cat [1 1]  (map + (f) (rest (f)))))))","user":"55b22c33e4b0da326a65cf79"},{"problem":26,"code":"(fn [count]\n  (loop [left count\n         result []\n         n 0]\n    (cond\n      (<= left 0) (reverse result)\n      (< n 2) (recur (dec left) (cons 1 result) (inc n))\n      :else (recur (dec left) (cons (+ (first result) (second result)) result) (inc n)))))","user":"555b6e82e4b0deb715856e51"},{"code":"(let [fibs (fn fibs [n] (cond (= n 0) 1 (= n 1) 1 :else (+ (fibs (- n 1)) (fibs (- n 2)))))] (fn [m] ((fn [n lst] (if (= n -1) lst (recur (dec n) (concat (list (fibs n)) lst)))) (dec m) '())))","problem":26,"user":"516733fce4b079759a74a5e9"},{"problem":26,"code":";; (fn [num]\n;;    (letfn [(get-tmp-rst [n]\n;;              (case n\n;;                0 '()\n;;                1 '(1)\n;;                2 '(1 1)\n;;                (let [current-s (get-tmp-rst (dec n))\n;;                      last-1 (first current-s)\n;;                      last-2 (second current-s)]\n;;                  (conj current-s (+ last-1 last-2)))))]\n;;      (reverse (get-tmp-rst num))))\n\n;; #(take % ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1))\n\n;; (fn [n]\n;;    (letfn [(fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n;;            (fib-n [a b n] (take n (fib a b)))]\n;;      (fib-n 1 1 n)))\n\n;; tail-recur\n(fn [num]\n    (letfn [(get-rst [c n rst]\n              (let [lst-snd (or (last (butlast rst)) 0) ;; deal with length < 2\n                    lst (or (last rst) 1)  ;; deal with length < 2\n                    new-fib (+ lst-snd lst)]\n                (if (= c n)\n                  rst\n                  (recur (inc c) n (conj rst new-fib)))))]\n      (get-rst 0 num [])))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn fib [n] (let [fibnext #(+ (first %) (second %))] \n   (reverse (\n      reduce (\n        fn [xs _](conj xs (fibnext xs))) \n        '(1 1) \n        (range 2 n)))))","problem":26,"user":"51c1d159e4b0d204dbe2ca18"},{"problem":26,"code":"(fn [n] (loop [p1 0 p2 1 s 1 o [1]] (if (= s n) o (recur p2 (+ p1 p2) (inc s) (conj o (+ p1 p2))))))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":26,"code":"(fn [x] (reverse (loop [iter 1 acc '(1 1)]\n                  (if (> iter (- x 2))\n                    acc\n                    (recur (inc iter) (conj acc (+ (first acc) (second acc)))\n                                            )))))","user":"5a1b1462e4b0ff51aa4b321d"},{"code":"(fn fib [x] (cond \n               (= x 2) '(1 1)\n            :else   (reverse (conj (reverse (fib (dec x))) (+ (last (fib (dec x))) (-> (fib (dec x)) reverse rest first))))\n          ))","problem":26,"user":"4e6cf521535de274dd8d818b"},{"code":"(fn [i] (take i\n\t\t     ((fn fib [x y]\n\t\t\t  (cons x (lazy-seq (fib y (+ x y))))) 1 1)\n\t\t     ))","problem":26,"user":"519c4111e4b0a1d87b003458"},{"problem":26,"code":"(fn\n  [n]\n  (loop [n n, res '(1 1)]\n    (if (= (count res) n)\n      (reverse res)\n      (recur n (cons (+ (first res) (second res)) res)))))","user":"5f5df0bfe4b02876ed9fcfeb"},{"code":"#((fn f[a b x]\n    \t(if (> x %)\n      \t'()\t\n      \t(conj (f b (+ a b) (+ x 1)) b)))\n  \t  0 1 1)","problem":26,"user":"52f818a6e4b047fd55836fcc"},{"problem":26,"code":"(fn f ([x] (f (- x 2) '[1 1])) ([x s] (if (> 0 (dec x)) s (recur (dec x) (conj s (+ (last s) (last (butlast s))))))))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn fib [n]\n  (->> (iterate #(conj % (+ (last %) (-> % butlast last))) [1 1])\n       (take (dec n))\n       last))","problem":26,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn [x]\n  (loop [acc () a 0 b 1 times x]\n    (if (= times 0)\n      (reverse acc)\n      (recur (conj acc b) b (+ a b) (dec times)))))","problem":26,"user":"506b8242e4b0eda3100c090a"},{"problem":26,"code":"(fn [x]\n (map\n (fn fib [m]\n  (cond\n    (= m 1) 1\n    (= m 2) 1\n    :else (+ (fib (dec m)) (fib (dec (dec m))))))\n  (range 1 (inc x))))","user":"561d506ee4b064ca9f4b16aa"},{"problem":26,"code":"#(loop [counter 1 result [1]]\n    (if (= counter %)\n      result\n      (if (> (count result) 1)\n        (recur (inc counter) (conj result (+ (last result)  (last (butlast result)))))\n        (recur (inc counter) (conj result (last result))))))","user":"5aa098fae4b0d174b936c82e"},{"problem":26,"code":"(fn fib [n] \n (loop [n1 1, n2 1, n n, l []]\n  (if (zero? n)\n  (concat l)\n  (recur n2 (+ n1 n2) (dec n) (conj l n1)))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"#(take % ((fn fib [a b] \n  (lazy-seq (cons a (fib b (+ a b))))\n) 1 1))","problem":26,"user":"4ffb38e8e4b0678c553fc3c6"},{"problem":26,"code":"(fn\n  [size]\n  (loop [i 1\n         result []]\n    \t(if (> i size)\n          result\n          (if (< (count result) 2)\n            (recur (inc i) (conj result 1))\n            (recur (inc i) (conj result (reduce + (take-last 2 result))))\n          )\n        )\n  )\n)","user":"54021f13e4b0df28a13c62cc"},{"problem":26,"code":"#(loop [fibseq '(1 1) prevnum 1 nextnum 1 mcount 2]\n    (if (= mcount %)\n       (reverse fibseq)\n       (recur (cons (+ prevnum nextnum) fibseq)\n              nextnum\n              (+ prevnum nextnum)\n            (inc mcount))))","user":"5762fcfde4b0994c1922fbb3"},{"problem":26,"code":"(fn [i]\n\t(loop [[a b :as c] '(1 1), i (- i 2)]\n      (if (pos? i)\n        (recur (cons (+ a b) c)  (dec i))\n        (reverse c))))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn n-first-fib [n]\n  (loop [i n acc [1 1] fn 1 fn- 1]\n    (if\n      (zero? (- i 2))\n      acc\n      (recur (dec i) (conj acc (+ fn fn-)) fn- (+ fn fn-)))))","problem":26,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"#(take % \n(letfn\n  [(fib [a b]\n    (lazy-seq \n      (let [n (+ a b)]\n        (cons n (fib b n)))))]\n(concat [1 1] (fib 1 1))))","problem":26,"user":"4eb5750a535d7eef30807366"},{"problem":26,"code":"(fn\n  [x]\n  (loop [nums [1 1] cnt (- x 2)]\n    (if (zero? cnt)\n      nums\n      (recur (conj nums\n        (+ (last nums) (last (drop-last nums))))\n        (dec cnt)))))","user":"57740884e4b0979f896515f5"},{"code":"#(map (fn [x] (loop [c x n 0 p 1] (if (zero? c) p (recur (dec c) p (+ n p))))) (range 0 %))","problem":26,"user":"510c01bae4b078ea7192110a"},{"code":"(fn [x](take x(map first (iterate (fn [[a b]] [ b (+ a b)]) [1 1]))))","problem":26,"user":"520cb8c4e4b0b022ef140c9a"},{"code":"#(take % (map first (iterate (fn [[a b]][b (+ a b)]) [1 1])))","problem":26,"user":"516ab8c2e4b081287f204e9e"},{"problem":26,"code":"(fn[x](last (take x (iterate #(conj % (reduce + (take-last 2 %))) [1]))))","user":"54f15cb8e4b024c67c0cf8b1"},{"code":"(fn fib [x]\n    (loop [acc  [0 1]\n                    x   x]\n          (if (< x 2)\n                  (rest acc)\n                  (recur (conj acc (+ (last (butlast acc)) (last acc))) (dec x)))))","problem":26,"user":"51195e77e4b055cfb310d499"},{"problem":26,"code":"(fn[x] (reduce (fn[y n] (let [lst (last y) secLst ((comp first rest reverse) y)] (conj y (+ lst secLst))) ) [1 1] (range (- x 2))))","user":"59300b0ee4b072a2710fcfd3"},{"code":"(fn fibs [n]\n  (loop [acc [1 1] m2 1 m1 1 n n]\n    (cond\n     (> n 2) (recur (conj acc (+ m2 m1)) m1 (+ m2 m1) (dec n))\n     (= n 2) acc\n     (= n 1) [1]\n     :else [])))","problem":26,"user":"4ed188c8535d44c135fd68cf"},{"problem":26,"code":"(fn fibonacci_sequence\n  [n]\n  \"function which returns the first X fibonacci numbers\"\n  (letfn [(fibonacci [a b]\n            (lazy-seq\n              (cons (+ a b) (fibonacci b (+ a b)))))]\n    (take n (cons 1 (fibonacci 0 1)))))","user":"5bbbd077e4b0a20761a23615"},{"code":"(fn fibonacci \n  \t[n]\n \t(when (> n 0)\n      (loop [fibs {}\n             i 1]\n        (if (> i n)\n          (reverse (map second fibs))\n          (if (< i 3)\n            (recur (conj fibs [i 1]) (inc i))\n            (recur (conj fibs [i (+ (fibs (- i 2)) (fibs (- i 1)))]) (inc i)))))))","problem":26,"user":"538d64cae4b0b51d73faae6d"},{"problem":26,"code":"#(take % (     (fn fib-recur [a b] (cons a (lazy-seq (fib-recur b (+ a b)  )  )   ))   1 1             ))","user":"5622f21fe4b03f08ee9a922e"},{"code":"(fn [x] (loop [r '(1 1)] (if (= (count r) x) (reverse r) (recur (cons (+ (first r) (first (rest r))) r)))))","problem":26,"user":"50f0a554e4b0c5f4fa5ddb6c"},{"problem":26,"code":"(fn fib [n] (\ncond (= n 1) [1]\n     (= n 2) [1 1]\n     :else (conj \n            (fib (- n 1))\n            (+ \n             (last \n              (fib (- n 1))\n             )\n             (last \n              (fib (- n 2))\n             )\n            )\n           )\n))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [n]\n  (loop [res [1 1] x n]\n    (if (> x 2)\n      (recur (conj res (+ (last res) (last (butlast res)))) (dec x))\n      res)\n    )\n  )","problem":26,"user":"52b577c9e4b0c58976d9ad39"},{"code":"(fn fibonacci-sequence [n]\n  (loop [cnt 1 fs [0 1]]\n    (if (= cnt n)\n      (rest fs)\n     (recur\n      (inc cnt)\n      (conj fs (+ (first (reverse fs))\n                            (second (reverse fs)))))))\n  )","problem":26,"user":"4fa17b00e4b0dcca54ed6d5f"},{"code":"(fn [x]\n  (loop [count 2 accum [1 1]]\n    (if\n      (>= count x) accum\n      (recur (inc count) (conj accum (+ (nth accum (- count 2)) (nth accum (- count 1))))))))","problem":26,"user":"50b6d704e4b08fb537db98f5"},{"problem":26,"code":"#(last (take (- % 1)\n              (iterate (fn\n                         [fib]\n                         (conj fib (reduce + (take-last 2 fib))))\n                       [1 1])\n        ))","user":"5db861bce4b010eb3c36cd4b"},{"problem":26,"code":"#(loop [out '(1 1)]\n   (if (< (count out) %)\n    (recur (conj out (+ (first out) (second out))))\n    (reverse out)))","user":"54de16cae4b024c67c0cf79c"},{"code":"(fn  [ct] \n(loop [fibs [1] prev 1 curr 1]\n  (if (= (count fibs) ct) fibs\n  (recur (conj fibs curr) curr (+ prev curr)))))","problem":26,"user":"4f1473eb535d64f603146439"},{"problem":26,"code":"#(take %1 ((fn fib[a b]\n  (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"550f70bee4b06e50f9beb177"},{"problem":26,"code":"#(take % ((fn fibo [x y] (lazy-seq (cons x (fibo y (+ x y))))) 1 1))","user":"55ecb2c0e4b0121d4835fdce"},{"code":"#(loop [fibs [1 1] n 1]\n  (if (< n (- % 1))\n    (recur (conj fibs (+ (nth fibs n) (nth fibs (- n 1)))) (+ n 1))\n    fibs))","problem":26,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn fibs [n]\n  (loop [res [1 1]]\n  (if (= n (count res))\n    res\n    (recur (conj res (+  (last res)  (second (reverse res))))))))","problem":26,"user":"4fea8741e4b0140c20fb9c09"},{"problem":26,"code":"(fn [x]\n     (loop [y 1 z '[1]]\n       (if (= y x) z\n                   (recur (inc y) (conj z (+ (if (nil? (last (butlast z))) 0 (last (butlast z))) (last z)))))\n       )\n     )","user":"55f95de6e4b03cbcff9738c1"},{"problem":26,"code":"(fn [n]\n(take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ b a))))) 1 1))\n)","user":"54b050cee4b09f271ff37d13"},{"code":"(fn [num]\n  (loop [n num\n        res []]\n  (if (= n 0)\n    res\n    (recur \n      (dec n)\n      (conj res \n            (if (< (count res) 2) \n                1 \n                (reduce +(take-last 2 res))))))))","problem":26,"user":"4e4ca885535dc968683fc4df"},{"problem":26,"code":"(fn [c] (map last (take c (iterate (fn [[x y]] [y (+ x y)]) [0 1]))))","user":"5892a5fde4b00487982d5228"},{"problem":26,"code":";(fn fibo\n ; [ans cnt x]\n  ;(if (= cnt (+ x 1))\n   ; (reverse ans)\n    ;(recur (conj ans (reduce + (take 2 ans)) ) (inc cnt) x)\n    ;)\n  ;) '(1 1) 3\n  \n  #(take % ((fn fib [a b] \n            (lazy-seq (cons a (fib b (+ a b))))) 1 1))","user":"60617afee4b03746e80ebf6c"},{"code":"#(loop [x 2 r [1 1]]\n  (if (< x %)\n    (recur\n     (+ x 1)\n     (conj\n      r\n      (+ (nth r (- x 2)) (nth r (- x 1))) ))\n    r ))","problem":26,"user":"52bacfa8e4b07a9af57922d6"},{"problem":26,"code":"(fn [x] (take x ((fn peu [a b] (cons a (lazy-seq (peu b (+ a b))))) 1 1)))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [n]\n  (loop [n n a 0 b 1 result [b]]\n    (if (< n 2)\n      result\n      (recur (dec n) b (+ a b) (conj result (+ a b))))))","problem":26,"user":"5252f8ede4b0541d1855b8e0"},{"problem":26,"code":"(fn [size]\n  (map (fn fib [num]\n    (if (> 2 num)\n      num\n      (+ (fib (dec num)) (fib (- num 2))))) (range 1 (inc size))))","user":"52c0b2b9e4b07a9af5792353"},{"problem":26,"code":"(fn [n]\n  (loop [fminus2 1\n         fminus1 1\n         acc '[1 1]\n         acclength 2]\n    (cond (= n 0) 1\n          (= n 1) 1\n          (= n acclength) acc\n          :else (let [fminus0 (+ fminus2 fminus1)]\n                  (recur fminus1 fminus0 (conj acc fminus0) (+ acclength 1))))))","user":"5fb082cfe4b08cb800c85b14"},{"problem":26,"code":"(fn fib [x]\n  (cond\n    (= x 1) (vector 1)\n    :else\n      (let [prev (fib (dec x))]\n        (println prev)\n        (conj prev (reduce + (list\n          (first (reverse prev))\n          (nth (reverse prev) 1 0)))))))","user":"5833a6d8e4b089d5ab817ca2"},{"problem":26,"code":"(letfn [(fib\n         ([] (fib 1 1))\n         ([a b] (lazy-seq (cons a (fib b (+ a b))))))]\n  #(take % (fib)))","user":"5b236e55e4b08b1df1c36759"},{"problem":26,"code":"(fn [x]\n  (take x (map first (iterate #(list (reduce + %) (first %)) '(1 0)))))","user":"562d15a6e4b0a45d2ff83019"},{"problem":26,"code":"(fn [n]\n  (letfn\n   [(lazy-fib\n      ([] (concat [1 1] (lazy-fib 1 1)))\n      ([a b] (lazy-seq (cons (+ a b) (lazy-fib b (+ a b))))))]\n    (take n (lazy-fib))))","user":"606d7f1ce4b069485764de14"},{"problem":26,"code":";; orig c/p:\n;; (fn [n] (take n (map first (iterate (fn [[a b]] [b (+' a b)]) [1 1]))))\n;; way i would have done it:\n(fn [n] (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))\n;; fails wrong # of args:\n;; (fn [n] (take n (map first (iterate #([%2 (+ %1 %2)]) [1 1]))))\n;; still fails \"clojure.lang.ArityException: Wrong number of args (0) passed to: PersistentVector\":\n;; (fn [n] (take n (map first (iterate #([(second %) (+ (first %) (second %))]) [1 1]))))","user":"56ca0da9e4b0ea9b8538f715"},{"code":"#(for [x (->> (range %) (map inc))] ((fn fib [n] (if (<= n 1) n (+ (fib (- n 1)) (fib (- n 2))))) x))","problem":26,"user":"52bdf6bde4b07a9af579230d"},{"code":"#(map\n  (fn self [n]\n    (if (<= n 1)\n      1\n      (+ (self (- n 1)) (self (- n 2)))))\n  (range %))","problem":26,"user":"51c8301ee4b07ef393169e4d"},{"problem":26,"code":"(fn [x] (map (fn fb [i] (if (< 1 i) (+ (fb (- i 1)) (fb (- i 2))) 1)) (range x)))","user":"5caf9a07e4b026601754b899"},{"code":"(fn[c]\r\n   (loop [c c\r\n          i 0\r\n          n1 0\r\n          n2 1\r\n          l ()]\r\n     (if (> (+ i 1) c)\r\n       (reverse l)\r\n       (recur c (+ 1 i) n2 (+ n1 n2) (conj l n2))\r\n       )\r\n     )\r\n)","problem":26,"user":"4ff07688e4b0678c553fc324"},{"code":"(fn [n] (take n (map first (iterate (fn [[a b]] [b, (+ a b)]) [1 1]))))","problem":26,"user":"4ef7a483535dced4c769f258"},{"code":"(fn [n] (reverse (nth (iterate (fn [[f s :as seq]] (conj seq (+ f s))) '(1 1)) (- n 2))))","problem":26,"user":"517d03dee4b0f5e87c18f25d"},{"problem":26,"code":"#(take % ((fn fib\n             ([] (fib 1 1))\n             ([fisrt seccond]\n              (cons fisrt (lazy-seq (fib seccond (+ fisrt seccond))))))))","user":"5a822590e4b00b71e582a073"},{"problem":26,"code":"(fn [quantidade]\n     (loop [index 2\n            lista [1 1]]\n          (if (= index quantidade)\n               lista\n               (let [anterior (nth lista (dec (count lista)))\n                     anterior-do-anterior (nth lista (- (count lista) 2))\n                     novo (+ anterior anterior-do-anterior)]\n                    (recur (inc index) (conj lista novo))))))","user":"58a0ac0de4b02bd94d917e9c"},{"code":"(fn [x] (last (take (dec x) (iterate #(conj % (apply + (take-last 2 %))) [1 1]))))","problem":26,"user":"513b43ede4b067e25a345ed3"},{"code":"(fn fib\n  [n]\n  (map first (reductions (fn [[a b] _] [b (+ a b)]) [1 1] (range (dec n)))))","problem":26,"user":"5159849ce4b0394f658fe236"},{"code":"#(map first (take % (iterate (fn [[n m]] [m (+ n m)]) [1 1])))","problem":26,"user":"5213d7aae4b0961f15ac4d72"},{"problem":26,"code":"(fn [n]\n  (loop [n n f2 1 f1 1 result [1 1]]\n    (if (<= n 2)\n      result\n      (recur (dec n) f1 (+ f2 f1) (conj result (+ f2 f1))))))","user":"54f9c4dfe4b01ecee9d88841"},{"problem":26,"code":"(fn fib\n      ([up-to] (take up-to (fib 1 1)))\n      ([x y] (cons x (lazy-seq (fib y (+ x y))))))","user":"5c3f37fce4b08cd430848e91"},{"problem":26,"code":"(fn fib\n  ([n]\n   (fib [1 1] n))\n  ([x n]\n   (if (< (count x) n)\n     (fib (conj x\n                (+\n                  (last x)\n                  (nth x (- (count x) 2))\n                )) n)\n     x)))","user":"6024544be4b0d5df2af2221f"},{"problem":26,"code":"(fn fibonacci\n  ([x] (fibonacci x 1 1 '(1 1)))\n  ([x f1 f2 fibs]\n   (let [new-f (+ f1 f2)\n         new-fibs (conj fibs new-f)]\n     (if (= (count new-fibs) x)\n       (reverse new-fibs)\n       (recur x new-f f1 new-fibs)))))","user":"574e84e0e4b02ea114799243"},{"problem":26,"code":"(fn fib [n]\n  (loop [res [1 1]\n         cnt n]\n    (if (< cnt 3)\n      res\n      (recur (conj res (+ (last (butlast res)) (last res))) (dec cnt)))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":26,"code":"(fn [n]\n  (take n\n  \t(map first (iterate (fn [[x y]] [y (+ x y)]) [1 1]))))","user":"55c58c0be4b0e31453f649b3"},{"problem":26,"code":"(fn[x] (\n        loop [numbers []\n              lastNum 0\n              secondLastNum 0\n              i 0] (\n                    if (< i x)\n                    (\n                     let [newNumbers (conj numbers (max (+ lastNum secondLastNum) 1))]\n                     \n                     (recur newNumbers\n                            (last newNumbers)\n                            lastNum \n                            (inc i))\n                     )\n                    numbers\n                    )\n        ))","user":"59b2d51be4b0e1f4e384c902"},{"code":"(fn [n]\n  \t(if (= n 1) [1]          \n(loop [\n               n n\t\n               n1 1\n        \t   n2 1               \n           \t   v [1 1]]\n          \t(if (= n 2) v\n      \t (recur (dec n) n2 (+ n1 n2) (conj v (+ n1 n2)))))))","problem":26,"user":"5081566ce4b0946d0443855b"},{"problem":26,"code":"(fn fib [n] ((fn fib2 [n cur prev result] (if (= n 0) result (fib2 (- n 1) (+ cur prev) cur (concat result [cur])))) n 1 0 nil))","user":"5c51f60be4b0fb8c5ffd99d4"},{"code":"(fn [n]\n  (letfn\n    [(fib [a b] (cons a (lazy-seq (fib b (+ a b)))))]\n    (take n (fib 1 1))))","problem":26,"user":"515ead6be4b049add99a053e"},{"code":"(fn fibo [x]\n  (cond\n   (= 1 x) '[1]\n   (= 2 x) '[1 1]\n   :else\n   (let [fibo-1 (+ x -1)\n         fibo-2 (+ x -2)\n         prev-fibo-coll (fibo fibo-1)]\n   \t(conj prev-fibo-coll\n          (+ (nth prev-fibo-coll (+ -1 fibo-1))\n             (nth prev-fibo-coll (+ -1 fibo-2)))))))","problem":26,"user":"532b930be4b09d4e7a9b5534"},{"code":"(fn [x] (map (fn fib\n  [n]\n  (if (= n 0)\n    0\n    (if (= n 1)\n      1\n      (+ (fib (- n 2)) (fib (- n 1))))))\n  (range 1 (+ 1 x))\n  ))","problem":26,"user":"51463958e4b04ef915e37318"},{"problem":26,"code":"#(take % ((fn fibgen [a b] (lazy-seq (cons a (fibgen b (+' a b))))) 1 1))","user":"5b398e4fe4b02d533a91bbb7"},{"problem":26,"code":"#(loop [n % \n          result '(1 1)]\n     (if (= n 2)\n       (reverse result)\n       (recur \n        (- n 1)\n        (conj result (+ (first result) (second result))))))","user":"53e73fe3e4b036ad0777e478"},{"code":"#(take %1\n       (map first (iterate (fn [[a b]]\n                          [b (+ a b)]) [1 1])))","problem":26,"user":"52626564e4b03e8d9a4a7086"},{"problem":26,"code":"(fn [n] (loop [tmpn (- n 2) tmp [1 1]]  \n          (if (= 0 tmpn) \n            tmp \n          (recur (dec tmpn)\n                 (conj tmp (+ (last tmp) (nth tmp (- (count tmp) 2))))))))","user":"59368ccae4b02506e01a297a"},{"code":"(fn\n  [x]\n  (loop\n    [x x\n     coll []]\n    (if (= 0 x)\n      coll\n      (if (< (count coll) 2)\n        (recur (dec x) (conj coll 1))\n        (recur (dec x) (conj coll (+ (second (reverse coll)) (last coll))))))))","problem":26,"user":"52d39acce4b099d49816f0c7"},{"problem":26,"code":"(fn n-fib-nums [n]\n  (cond (= 1 n) [1]\n        (= 2 n) [1 1]\n   :else\n    (loop [n (- n 2)\n           res [1 1]]\n      (if (= 0 n) res\n        (recur (dec n) \n               (conj res (+ (last res) (last (butlast res)))))))))","user":"565b818ce4b068f2fe63dc05"},{"problem":26,"code":"(fn [n] (take n (map first (iterate (fn [[l r]][r (+ l r)]) [1 1]))))","user":"57c56d78e4b05aa3c4741ce3"},{"problem":26,"code":"(fn [m]\n  (loop [fibn '(1 1) i 3]\n    (if (> i m)\n      (reverse fibn)\n      (recur (cons (+ (first fibn) (first (rest fibn))) fibn) (inc i)))))","user":"5883920ee4b0f1effa3b767e"},{"problem":26,"code":"(fn fib\n  ([] (fib 1 1))\n  ([a] (take a (fib)))\n   ([a0 b0] (cons a0 (lazy-seq (fib b0 (+ a0 b0))))))","user":"5c73a944e4b0fca0c16227b8"},{"problem":26,"code":"#(loop [acc [] a 1 b 1 n %] (if (zero? n) acc (recur (conj acc a) b (+ a b) (dec n))))","user":"5d272077e4b092dab7f59c64"},{"problem":26,"code":"(fn fib\n  ([n]\n    (fib n []))\n  ([n col]\n    (cond\n      (zero? n)\n        []\n      (= 1 n)\n        [1]\n      (= 2 n)\n        [1 1]\n      :else\n        (let\n          [\n            prev (fib (dec n) col)\n            ult (first (reverse prev))\n            pen (second (reverse prev))\n          ]\n          (conj prev (+ ult pen))\n        )\n    )\n  )\n)","user":"59021fede4b0438e51c2d04d"},{"code":"(fn [x]\n  (if (> 3 x)\n    (condp = x\n      0 '()\n      1 '(1))\n    (loop [acc '(1 1)\n           counter 2]\n      (if (= counter x)\n        (reverse acc)\n        (recur (conj acc (+ (first acc) (second acc))) (inc counter))))))","problem":26,"user":"4f08a8a2535dcb61093f6c3d"},{"problem":26,"code":"(fn fib [n]\n  (loop [accArr '() start 0]\n    (if (>= start n)\n      accArr \n      (recur (concat accArr (list (let [[a b] (take-last 2 accArr)]\n    (if (and a b)\n      (+ a b)\n      1)))) (inc start)))))","user":"605714ffe4b069ae89ce6ae1"},{"problem":26,"code":"(comp reverse (fn fib [n] (if (= n 2) '(1 1) (let [prev (fib (dec n))] (conj prev (+ (nth prev 0) (nth prev 1)))))))","user":"59708e38e4b01722bebd4c65"},{"problem":26,"code":"(fn fibo [n]\n   (loop [r [1 1]]\n       (if (= (count r) n) r\n         (recur (concat r [(apply + (take-last 2 r))] )))))","user":"5e1308dde4b099d064962ff4"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n             (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"530ccb1de4b08068f379ec99"},{"problem":26,"code":"(fn [n]\n  (loop [a 1\n         b 1\n         n n\n         acc []]\n         (if (= n 0)\n           acc\n           (recur b (+ a b) (- n 1) (conj acc a)))))","user":"5a250b86e4b07f18be40aa19"},{"problem":26,"code":"(fn f [n]\n  (reduce\n   (fn [acc _] \n     (concat acc (list (apply + (take-last 2 acc)))))\n   '(1)\n   (range 1 n)))","user":"540d5085e4b0addc1aec670e"},{"problem":26,"code":"(fn [x]\n  (reduce \n    (fn [a b] (conj a (+ (last a) (last (butlast a)))))  \n    [1 1]\n    (range (- x 2))))","user":"5668dcc6e4b04acd4f672df8"},{"problem":26,"code":"#(take % \n       (map last\n            (iterate (fn [[x y]] [y (+ x y)]) [ 0 1])\n       )\n)","user":"548018e3e4b0c51c1f4d7330"},{"code":"(fn [n]\n  (take n\n    ((fn fib [a b]\n      (lazy-seq (cons a (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4fa820fde4b081705acca1ce"},{"problem":26,"code":"(fn [n] (loop [a 1 b 1 res [1] ] (if (>= (count res) n) res (recur b (+ a b)  (conj res b) ))))","user":"54f8e998e4b01ecee9d88831"},{"problem":26,"code":"#(take %\n  \t(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))","user":"594307c0e4b060784b3b7920"},{"code":"#(loop [a 1, b 1, curr %, acc [1]] \n    (if (= curr 1 ) \n      acc\n      (recur b (+ a b) (- curr 1) (concat acc [b]))))","problem":26,"user":"4f2f6678e4b0d6649770a06e"},{"problem":26,"code":"(fn [s]\n  (take s (map #(if (= % 0) 1\n                    (loop [y 1 rslt '(1 1)]\n                          (if (= y %) (first rslt)\n                              (recur (inc y) (cons (+ (first rslt) (second rslt)) rslt)))))\n                (range))))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":26,"code":"(fn [x]\n  (loop [a 0\n         b 1\n         n x\n         accum (list)]\n    (if (zero? n)\n      (reverse accum)\n      (recur b (+ a b) (- n 1) (conj accum b)))))","user":"54487527e4b032a45b8693cc"},{"code":"#(loop [i % j [] a 1 b 1]\n   (if(= i 0)\n     j\n     (recur (dec i) (conj j a) b (+ a b))))","problem":26,"user":"52d33ac5e4b099d49816f0c0"},{"code":"#(loop [m 2 result [1 1]]\n    (if (>= m %)\n        result\n        (\n            recur\n                (+ m 1) \n                (conj result\n                    (+ \n                        (nth result \n                            (- m 1)\n                        ) \n\n                        (nth result \n                            (- m 2)\n                        )\n                    )\n                )\n        )\n    )\n)","problem":26,"user":"52d4acc8e4b09f7907dd1333"},{"problem":26,"code":"(fn [a-size] \n      (loop [size a-size\n             res [1 1]\n            ]\n      (if (> size 2) \n        (recur (dec size) (conj res (apply + (take-last 2 res)))\n        )\n      res\n    )\n))","user":"4fc57c4ce4b0ee37620e17f6"},{"code":"(fn [n]\r\n    (loop [l '(1) cnt 1 prev 0]\r\n      (if (= cnt n)\r\n        l\r\n        (recur (reverse (conj (reverse l) (+ prev (last l)))) (inc cnt) (last l)))))","problem":26,"user":"4f039524535dcb61093f6b2c"},{"problem":26,"code":"(fn fib\n     ([left]\n       (cond\n         (<= left 0) '()\n         :else (fib left 0 0)))\n     ([left pen ult]\n       (let [next (if (= 0 pen) 1 (+ pen ult))]\n         (case left\n           1 (list next)\n           (cons next (fib (- left 1) ult next)))))\n     )","user":"5509bec5e4b06e50f9beb121"},{"problem":26,"code":"(fn solve [y] (if (= y 1) '(1) (concat (solve (- y 1)) (list ((fn fib [x] (if (< x 3) 1 (+ (fib (- x 1)) (fib (- x 2))))) y)) )))","user":"56f258d3e4b04a395b9a04a1"},{"problem":26,"code":"(fn F [a] (let [y (fn r [a b] (lazy-seq(cons a(r b (+ a b)))))] (take a(y 1 1))))","user":"57752a2de4b0979f89651613"},{"code":"#(let [\n      __fib (fn __fib [x] (if (= x 1) 1 (if (= x 2) 1 (+ (__fib (dec x)) (__fib (dec (dec x)))))))\n      __allfib (fn __allfib [x] (if (> x 0) (conj (__allfib (dec x)) (__fib x)) []))\n      ] (__allfib %))","problem":26,"user":"500f336be4b03ec779321687"},{"problem":26,"code":"(fn [n]\n  (loop [acc [] n1 1 n2 0]\n    (if (= (count acc) n)\n      acc\n      (let [nxt (+ n1 n2)]\n      (recur (conj acc nxt) n2 nxt)))))","user":"5e3a8929e4b01d43a70e8de3"},{"problem":26,"code":"#(loop [i '(1 1)]\n  (if (= (count i) %)\n    (reverse i)\n    (recur (conj i (apply + (take 2 i))))\n   ))","user":"57f253a3e4b0511f1d294dea"},{"code":"(fn fibN [n]\n  (loop [result [1 1] i n]\n       (if (= i 2)\n           result\n           (    recur\n                (merge result\n                       (+ (last result)  (nth result (- (count result) 2)  )  )\n                )\n                (dec i)\n           )\n       )\n  )\n )","problem":26,"user":"518aec06e4b06da86c1973c2"},{"problem":26,"code":"(fn [n]\n  (reduce \n    (fn [a b] (conj a (+ (last a) (last (butlast a)))))  \n    [1 1]                      \n    (range (- n 2))))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":26,"code":"#(take %\n ((fn fib [a b]\n   (cons a (lazy-seq (fib b (+ a b))))) \n  1 1))","user":"545b77f5e4b01be26fd74653"},{"problem":26,"code":"#(take %\n       (map\n        first\n        (iterate\n         (fn [[n1 n2]] [n2 (+ n1 n2)])\n         [1 1])))","user":"54722c55e4b094393f72dd74"},{"problem":26,"code":"(fn [n]\n  (reverse (nth (iterate \n               #(conj % (+ (first %) (second %))) \n               '(1 1)) (- n 2))))","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn fibo [n]\n  (take n ((fn fib [a b] (cons a (lazy-seq (fib b (+ a b))))) 1 1)))","problem":26,"user":"52e16139e4b09f7907dd141f"},{"code":"(fn [n] (  reverse (loop [cnt 1 acc [1]] (if (= cnt n)             acc\n          (recur (inc cnt) (cons (#(apply + %) (take 2 acc)) acc))))))","problem":26,"user":"4f32135ae4b0d6649770a08e"},{"problem":26,"code":"(fn\n  [count]\n  (reduce\n    (fn [res i]\n      (cond\n        (= i 0) [1]\n        (= i 1) (conj res 1)\n        :else (conj res (+ (last res) (last (butlast res))))))\n    []\n    (range count)))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":26,"code":"(fn [x] (loop [i x, r '(1 1)]\n   (if (= i 2)\n     (reverse r)\n     (recur (dec i) (conj r (+ (first r) (second r)))))))","user":"56049986e4b0c80df0ca2662"},{"problem":26,"code":"#(take % ((fn fib [a b] \n            (cons a (lazy-seq (fib b (+ a b))))) \n          1 1))","user":"5360578ee4b0243289761e35"},{"problem":26,"code":"#(loop [r [1 1]]\n    (if (>= (count r) %)\n      (take % r)\n      (recur\n        (conj r (apply + (take-last 2 r))\n                        )))\n  )","user":"570e8d86e4b0b0fb43fd06f2"},{"code":"(letfn [(fib [m n] (lazy-seq (cons m (fib n (+ m n)))))] (fn [p] (take p (fib 1 1))))","problem":26,"user":"532e0b20e4b019098a6f8b45"},{"problem":26,"code":"(fn [nmb] \n  (let \n    [fib \n     (fn [n a b acc] \n       (if (zero? n) (reverse acc)\n         (recur (dec n) b (+ a b) (cons a acc))))] \n    (fib nmb 1 1 '())))","user":"57780e4fe4b0979f89651657"},{"problem":26,"code":"#(loop [size %1\n           results []]\n           (if (> size 0)\n             (recur\n                (dec size)\n                (conj results \n                      (if (< (count results) 2) \n                         1 \n                        (reduce + (take-last 2 results))\n                      ) \n                )\n             )\n            results))","user":"556523fce4b0c656e3ff1815"},{"problem":26,"code":"(fn [n]\n  (letfn [(fibonacci\n            ([] (fibonacci 1 1))\n            ([a b] (cons a (lazy-seq (fibonacci b (+ a b))))))]\n    (take n (fibonacci))))","user":"5ab564f8e4b073f177442639"},{"problem":26,"code":"(fn [ptake]\n  (take ptake((fn fib [a b] \n     (lazy-seq (cons a (fib b (+ a b)))))\n   1 1)))","user":"5c94cbb1e4b048ec896c5a3d"},{"problem":26,"code":"(fn [x]\n  (case x\n    0 []\n    1 [1]\n    2 [1 1]\n    (loop [ls [1 1] cnt (- x 2)]\n      (if (zero? cnt)\n        ls\n        (recur (conj ls (reduce #(+ %1 %2) (take-last 2 ls))) (dec cnt))))))","user":"5b552117e4b02d533a91bd2c"},{"code":"(partial #(if (> 3 %2) (reverse %1) (recur (conj %1 (+ (first %1) (second %1))) (dec %2))) '(1 1))","problem":26,"user":"51364acfe4b04ac1f358dd51"},{"code":"(fn [n]\n  (letfn [(s [[a b]]\n            [b (+ a b)])]\n    (take n (map first (iterate s [1 1])))))","problem":26,"user":"4e6f4cbc535d5021c1a8961a"},{"code":"#(take % (letfn [(f [a b] (lazy-cat [a] (f b (+ a b))))] (f 1 1)))","problem":26,"user":"539e79d2e4b0ca733b974489"},{"problem":26,"code":"(fn [numb]\n  (loop [vect [1]\n         ctr 1]\n    (if (< ctr numb)\n      (recur (conj vect (reduce + (take-last 2 vect)))\n             (inc ctr))\n      vect)))","user":"5391bc62e4b0b51d73faaea7"},{"problem":26,"code":"(fn fib [x]\n  (if (<= x 1)\n          [x]\n    (let [a (fib (dec x))\n          b (fib (dec (dec x)))]\n      (conj a (+ (last a) (last b)))\n      )\n  ))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":26,"code":"(fn fibs [n]\n  (take n (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"55295b5de4b0ffed3738f949"},{"problem":26,"code":"(fn [n] (take n\n  (map\n   first\n   (iterate\n    (fn [[a b]][b (+' a b)])\n    [1 1]))))","user":"51ac80bbe4b09397d5109770"},{"problem":26,"code":"(fn [x]\n  (loop [final [1]\n         n x]\n    (if (< n 2)\n      final\n      (recur (conj\n              final\n              (+\n               (last final)\n               (if (= 1 (count final))\n                 0\n                 (second (reverse final)))))\n             (- n 1)))))","user":"56f085d7e4b04a395b9a047e"},{"problem":26,"code":"(fn [x] (map first (take x (iterate  (fn [[a b]]  [b (long (+ a b))]) [1 1]))))","user":"56bff105e4b060a8e693e3a4"},{"code":"(fn [n] (reverse\n  (into '( ) ((fn inner [acc m]\n\t\t(if (= m 0)\n\t\t\tacc\n\t\t\t(inner (conj acc (+ \n\t\t\t\t(if (< (count acc) 2) \n\t\t\t\t\t0 (get acc (- n m 2)))\n\t\t\t\t(if (< (count acc) 1)\n\t\t\t\t\t1 (get acc (- n m 1))))) (- m 1)))) [ ] n))))","problem":26,"user":"524d91eae4b0a16e35cf6dee"},{"problem":26,"code":"(fn [iter] (loop [x1 1 y1 1 iter1 (- iter 2) c 0 col [1]] (if (< c iter1) (recur y1 (+ x1 y1) iter1 (inc c) (conj col y1)) (conj col y1))))","user":"58ee51a4e4b056aecfd47da6"},{"code":"(fn [n] \n  (take n \n    ((fn fib [a b] \n      (lazy-seq \n        (cons a (fib b (+ a b))))) \n    1 1)))","problem":26,"user":"5025b93ce4b0c969f0b056df"},{"problem":26,"code":"#(take % (map first (iterate \n        (fn [[a b]] \n          [b (+ a b)]) \n        [1 1])))","user":"57129ed7e4b07c98581c3a8b"},{"code":"(fn fibonacci [s] \n\t(#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) s)\n)","problem":26,"user":"51ba59e4e4b0fe3ecfb4642d"},{"code":"(fn fibonacci [s] \n  (#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) s)\n  )","problem":26,"user":"50a2cd3be4b048eb8059339d"},{"problem":26,"code":"(fn fib-seq [x]\n  (reduce (fn [coll _]\n            (conj coll (apply + (take-last 2 coll))))\n          [1]\n          (range (dec x))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":26,"code":"#(letfn [(fib ([] (fib 1 1)) ([a b] (cons a (lazy-seq (fib b (+ a b))))))] (take % (fib)))","user":"588f1743e4b00487982d519d"},{"code":"(fn fib[x]\n  \t(reverse (\n\t\t(fn builder[coll]\n          (if (= (count coll) x)\n            coll\n            (builder (conj coll (+ (first coll) (first (rest coll)))))\n          )\n        )\n     \t'(1 1)\n\t))\n)","problem":26,"user":"512ec712e4b029b11c040781"},{"problem":26,"code":"(fn [loops]\n  (loop [fib []\n         last-add 0]\n    (if (= (count fib) loops)\n      fib\n      (recur (conj fib (+ last-add (or (last fib) 1)))\n             (or (last fib) 0)))))","user":"5cbcacc2e4b026601754b9ed"},{"problem":26,"code":"(fn fib [n] (take n ((fn f [a b] (lazy-seq (cons a (f b (+ a b))))) 1 1)))","user":"53b0446fe4b047364c04447f"},{"problem":26,"code":"(fn [n] (loop [[a b :as result] '(1 1) n (- n 2)] (if (= n 0) (reverse result) (recur (conj result (+ a b)) (dec n)))))","user":"544125ade4b032a45b86936a"},{"problem":26,"code":"#(->> (make-array Integer/TYPE %)\n      (reduce\n       (fn [x _]\n         (let [coll (take-last 2 x)]\n           (conj\n            x\n            (+ (first coll) (last coll)))))\n       [1 1])\n      (take %))","user":"5db8663ce4b010eb3c36cd4c"},{"problem":26,"code":"(fn fibonnaci [x]\n  (cond (= x 1) [1] (= x 2) [1 1]\n    :else \n      (let [previous (fibonnaci (dec x))]\n        (conj previous (+ (last previous) (last (butlast previous))))\n      )))","user":"55989c25e4b031d6649c9b9b"},{"problem":26,"code":"(fn [n] \r\n  (loop [c '(1 1) i 2] \r\n    (if (= n i) (reverse c) \r\n      (recur (conj c (+ (first c) (second c))) (inc i))\r\n    )\r\n  )\r\n)","user":"52b434c9e4b0c58976d9ad1c"},{"problem":26,"code":"(fn [fib]\n  (loop [a '(1) b '(1 1) pos fib]\n    (cond (= pos 1) a\n          :else (recur b \n                       (concat b (list (+ (last b) (last (butlast b)))))\n                       (dec pos)))))","user":"4e6a23d0535d8ccf87e9fea0"},{"problem":26,"code":"(fn [n]\n  (reverse\n   \t((fn f26 [nn] \n       (if (= 1 nn) \n         '(1)\n         (if (= 2 nn)\n           '(1 1)\n           (let [r (f26 (dec nn))\n                 a (first r)\n                 b (second r)]\n             (conj r (+ a b))\n             )\n           )\n         )\n     ), n)\n  )\n)","user":"5a536cf2e4b05d388ecb6c10"},{"code":"(fn [s]\n  (loop [val1 0 val2 1 res []]\n    (if (= (count res) s)\n    res\n    (recur val2 (+ val1 val2) (conj res val2)) \n  )  \n))","problem":26,"user":"4f63777be4b0defedf855fe4"},{"problem":26,"code":"#(letfn [(fib [n]\n             (if (< n 2)\n               1\n\t\t\t   (+ (fib (- n 1)) (fib (- n 2)))))]\n (map fib (range %)))","user":"52e851bfe4b09f7907dd149a"},{"code":"(fn [n]\n  (->> [0 1]\n       (iterate (fn [[a b]] [b (+ a b)]))\n       (map second)\n       (take n)))","problem":26,"user":"53779a26e4b06839e8705e38"},{"problem":26,"code":"#(reduce (fn [v _] (conj v (apply + (take-last 2 v)))) [1 1] (range (- %1 2)))","user":"540705f0e4b0addc1aec66b1"},{"code":"(fn [n] (take n (rest (map first (iterate (fn [[a b]] [b (+ a b)]) [0N 1N])))))","problem":26,"user":"5243f93be4b076204b44faf6"},{"problem":26,"code":"#(loop [x 2\n         result [1 1]]\n    (if (> % x)\n      (recur (+ x 1) (conj result (+ (last result) (second (reverse result)))))\n      result))","user":"59881937e4b021a7a535feaf"},{"code":"(fn [x] (loop [a 1 b 1 acc '()] (if (= (count acc) x) (reverse acc) (recur b (+ a b) (cons a acc)))))","problem":26,"user":"52fb64b7e4b047fd55837009"},{"problem":26,"code":"(fn f [x]\n    (cond\n      (< x 1) nil\n      (= x 1) '(1)\n      (= x 2) '(1 1)\n      (> x 2) (let [prevx (f (dec x))\n                    xverp (reverse prevx)\n                    newlast (list (+ (first xverp) (second xverp)))]\n                (concat prevx newlast))))","user":"56739bdce4b05957ce8c6122"},{"problem":26,"code":"(fn fibonacci-seq\n  [n]\n  (case n\n    1 '(1)\n    2 '(1 1)\n    (let [prev (fibonacci-seq (- n 1)) revprev (reverse prev)]\n      (concat prev (list (+ (first revprev) (second revprev)))))))","user":"54c05fd7e4b0ed20f4ff6f12"},{"code":"(fn [x] \n  (reverse \n    (last \n      (take (dec x) \n        (iterate #(cons (reduce + (take 2 %)) %) '(1 1))))))","problem":26,"user":"4f8aa2f9e4b02e764a0a516f"},{"problem":26,"code":"(fn [max] (rest (take (+ max 1) (map first (iterate (fn [[a b]]\n                                                    [b (+ a b)]) [0 1])))))","user":"58a413b5e4b02bd94d917f07"},{"problem":26,"code":"(fn FibonacciSequence [n]\n  (take n (map first (iterate  (fn [[n1 n2]] \n                                 [n2 (+ n1 n2)]) [1 1] ))))","user":"607508f3e4b069485764de54"},{"problem":26,"code":"(fn [n]\n   (take n\n              (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))))","user":"54764cf1e4b0c51c1f4d72a4"},{"code":"#(loop [i 2 c '(1 1)]\n    (if (< i %)\n      (recur (inc i)\n             (conj c (+ (first c) (first (drop 1 c)))))\n      (reverse c)))","problem":26,"user":"4ec6357a535d6d7199dd36c5"},{"code":"(fn [x]\n  (take x\n        ((fn fib [a b]\n           (cons b (lazy-seq (fib b (+ a b))))) 0 1)))","problem":26,"user":"51d2ecb7e4b099f3b6acddf3"},{"code":"(fn f [x]\n  (rest (map \n   (fn fib2 [x]\n         (cond (= 0 x) 0\n           (= 1 x) 1\n           :else (+ (fib2 (- x 1)) (fib2 (- x 2)))))\n   (range (+ x 1)))))","problem":26,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn fib [n]\n           (loop [a 1 b 1 cnt n lst ()]\n             (if (zero? cnt)\n               (reverse lst)\n               (recur b (+ a b) (dec cnt) (cons a lst)))))","problem":26,"user":"528b9efee4b0239c8a67aea0"},{"problem":26,"code":"(fn [n]\n  (loop [x 2 fib [1 1]]\n    (if (= n x)\n      fib\n      (recur (inc x) (conj fib (apply + (take-last 2 fib)))))))","user":"54448e84e4b032a45b869393"},{"problem":26,"code":"(fn fib [n] \r\n  (if (< n 2) '(1)\r\n      (let [lst (fib (dec n)) \r\n               m (apply + (take-last 2 lst))]\r\n                 (concat lst (list m)))))","user":"579d9601e4b05b1deef9ae18"},{"problem":26,"code":"(fn [n]\n  (take n\n        (map first (iterate (fn [[o t]] [t (+ o t)]) \n                            [1 1]))))","user":"5c7741dce4b0fca0c1622806"},{"code":"#(take %1 (map first (iterate \n  (fn [[a b]] [b (+ a b)]) [1 1])))","problem":26,"user":"4e463703535dc968683fc4b2"},{"problem":26,"code":"(fn [z] (reduce (fn [x y] (conj x (+ (peek x) (-> x pop peek) ))) [1 1] (range (- z 2))))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":26,"code":"(fn fib                                                                                            \n  ([n] (fib n '(1 1)))                                                          \n  ([n l]                                                                        \n    (if (= n (count l))                                                         \n        (reverse l)                                                             \n        (fib n (conj l (reduce + (take 2 l)))))))","user":"534aa5d3e4b084c2834f4a6b"},{"problem":26,"code":"#(reverse ((fn fibseq [n]\n  (if (= 1 n) '(1)\n    (if (= 2 n) '(1 1)\n      (let [fs (fibseq (dec n))]\n\t    (conj fs (reduce + (take 2 fs)))\n      )\n    )\n  )\n) %))","user":"540f09b9e4b0addc1aec6725"},{"problem":26,"code":"#(for [x (range 1 (+ 1 %))]\n                ((fn fib\n                   [x]\n                   (if (< x 3)\n                     1\n                     (+ (fib (dec x)) (fib (dec (dec x))))))\n                 x))","user":"55a9e0fee4b0988bba2ad945"},{"problem":26,"code":"(fn fib\n  ([n] (fib n 1 1))\n  ([n x y] (if (= n 0) () (cons x (fib (dec n) y (+ x y)))))\n)","user":"550e52dbe4b06e50f9beb165"},{"problem":26,"code":"(fn [n]\n  (loop [fib1 1 fib2 1 fib-seq [1 1]]\n  \t(if (= (count fib-seq) n)\n      fib-seq\n      (recur fib2 (+ fib1 fib2) (conj fib-seq (+ fib1 fib2))))))","user":"5b2c79c6e4b025bcb146f2b7"},{"code":"(fn [n] (loop [x n current 1 next 1 result '()] (if (zero? x)\n                                                  (reverse result)\n                                                  (recur (dec x)\n                                                         next\n                                                         (+ current next)\n                                                         (conj  result  current)\n                                                         ))))","problem":26,"user":"4f1684c7535d64f60314644b"},{"code":"(fn fib\n  ([x](fib (- x 2) [1 1]))\n  ([x y] (if (= x 0) (reverse y)\n             (fib ( - x 1)\n                  (concat [(+ (first y) (second y))] y )\n                  ))))","problem":26,"user":"4fbd292fe4b081705acca300"},{"problem":26,"code":"(fn fib [n]\n  (reverse \n   ((fn helper [fibs m]\n      (if (= m 0)\n        fibs\n        (helper (concat \n                 (list (+ (first fibs) (second fibs))) \n                 fibs)\n                (- m 1))))\n    '(1 1) (- n 2))))","user":"6028365be4b0d5df2af22242"},{"problem":26,"code":"(fn f\n   ( [x]\n     (f (- x 2) [1 1]))\n   ([x acc]\n    (if (zero? x)\n      (reverse acc)\n      (recur (dec x) (cons (reduce + (take 2 acc)) acc)))))","user":"58de94e2e4b0a4d5acaab6f4"},{"problem":26,"code":"(fn fib [n] \n  (cond \n   (= n 1) '(1) \n   (= n 2) '(1 1) \n   (> n 2) \n   \t(let [prev (fib (- n 1))] \n      (concat prev [(reduce + (take-last 2 prev))]))))","user":"582d7569e4b051871117bfbe"},{"code":"(fn fib [n]\n  (letfn [(fibn [p]\n    (cond\n      (= p 1) '(1)\n      (= p 2) '(1 1)\n      :else (let [f (fibn (- p 1))]\n              (cons (+ (first f) (second f)) f))))]\n    (reverse (fibn n))))","problem":26,"user":"504e24e2e4b0f6ff3350c46d"},{"code":"#(cond\n  (= 0 %) '()\n  (= 1 %) '(1)\n  (= 2 %) '(1 1)\n  :else (loop [coll '(2 1 1) n 3]\n          (if (= n %)\n            (reverse coll)\n            (recur (conj coll (+ (first coll) (second coll))) (inc n)))))","problem":26,"user":"4fed24a5e4b0681fd128dcaf"},{"code":"(fn [n-max]\n  (loop [n 2 s (list 1 1)]\n    (if (= n n-max)\n      (reverse s)\n      (recur (inc n) (conj s (+ (first s) (second s)))))))","problem":26,"user":"5361a4f2e4b0243289761e47"},{"problem":26,"code":"#(map \n  (fn fibn [n] \n    (if (or (= 1 n) (= 0 n)) \n      1 \n      (+ (fibn (- n 2)) (fibn (- n 1))))) \n  (take %1 (iterate inc 0)))","user":"5a0c822fe4b04bbd27e6d9b0"},{"code":"#(map  \n  (fn fibo [n] (cond (zero? n) 0 (= 1 n) 1 :else (+ (fibo (- n 1)) (fibo (- n 2))) ))\n  (range 1 (inc %)))","problem":26,"user":"4ff01fa9e4b0678c553fc321"},{"problem":26,"code":"(fn fibonacci-list [x]\n   (if (<= x 1)\n     '(1)\n     (concat\n      (fibonacci-list (dec x))\n      (list ((fn fibonacci [i]\n               (if (< i 2)\n                 i\n                 (+ (fibonacci (- i 1))\n                    (fibonacci (- i 2)))))\n             x)))))","user":"5a2e638be4b09cafd31c7f7a"},{"problem":26,"code":"(fn [x]\n  (loop [counter x acc [1] ]\n    (if (= counter 1)\n      acc\n      (recur (- counter 1) (conj acc (reduce + (take-last 2 acc)))))))","user":"57c3df67e4b05aa3c4741cc5"},{"problem":26,"code":"(fn [length] (letfn \n\t[(fibNext [acc current] (conj acc (+ (first acc) (second acc))))]\n\t(reverse (reduce fibNext '(1 1) (range (- length 2))))))","user":"555f728de4b0a2eb076a39c8"},{"code":"#(loop [n 2 [f s :as a] '(1 1)](if (= n %) (reverse a) (recur (inc n) (cons (+ f s) a))))","problem":26,"user":"5220909fe4b0e6a83c89259f"},{"problem":26,"code":"#(take % ((fn fab [a b] (lazy-seq (cons a (fab b (+ a b))))) 1 1))","user":"51e8736ae4b006d205356a4f"},{"code":"#(map (memoize (fn fibonacci [x] (if (> x 1) (+ (fibonacci (- x 1)) (fibonacci (- x 2))) (+ 0 1)))) (range %))","problem":26,"user":"528ec21fe4b0239c8a67aee5"},{"code":"(fn [x]\n  (take x\n    ((fn fib [a b]\n        (cons a (lazy-seq (fib b (+ a b)))))\n    1 1)))","problem":26,"user":"4e4b4564535dc968683fc4d3"},{"problem":26,"code":"(fn [x]\n  (letfn\n      [(next-fib [x y]\n         (lazy-seq\n          (let [z (+ x y)]\n            (cons z (next-fib y z)))))\n       (fibonacci []\n         (conj (next-fib 1 1) 1 1))]\n    (take x (fibonacci))))","user":"5b8baa2ce4b0c0b3ffbd49bd"},{"code":"#(rest (take (inc %) ((fn rfib [a b] \n     (lazy-seq (cons a (rfib b (+ a b)))))\n   0 1)))","problem":26,"user":"5157d8bce4b0b0b4b87062d6"},{"problem":26,"code":"(fn [n] \n  (loop [i 1 prev-val 0 cur-val 1 res []]\n    (if (> i n)  \n      (seq res)\n      (recur (inc i) cur-val (+ prev-val cur-val) (conj res cur-val)))\n    )\n  )","user":"58e0a760e4b005f69f193c69"},{"problem":26,"code":"(fn \n  [n]\n  (letfn [(gen-fibs\n            [n]\n            (condp = n\n              0 []\n              1 [1]\n              2 [1 1]\n              (let [fibs (gen-fibs (dec n))]\n                (conj fibs (+ (peek fibs)\n                              (peek (pop fibs)))))))]\n    (gen-fibs n)))","user":"56a36f76e4b0542e1f8d14ca"},{"code":"#(map (fn fib [i]\n         (cond\n\t\t\t(= i 0) 1\n\t\t\t(= i 1) 1\n\t\t\t:else (+ (fib (- i 1))\n\t\t\t\t\t (fib (- i 2)))))\n       (range %))","problem":26,"user":"52709149e4b03e8d9a4a73b1"},{"problem":26,"code":"(fn first-fibs [n]\n  (map\n    (fn fib [n] (cond (= n 1) 1\n                  (= n 2) 1\n                    :else (+ (fib (- n 1)) (fib (- n 2)))))\n     (range 1 (+ n 1))))","user":"59be62d5e4b0a024fb6ae435"},{"code":"(fn [n] \n  (loop [remaining (- n 2) fibs '(1 1)]\n    (if (zero? remaining)\n      (reverse fibs)\n      (let [[x y & _] fibs]\n        (recur (dec remaining) (conj fibs (+ x y)))))))","problem":26,"user":"4ea4fe1f535d7eef308072cf"},{"code":"(fn fib [n] \n  (reverse \n    (last \n      (take (dec n)\n           (iterate \n             (fn [coll] \n               (conj coll \n                     (+ (first coll) (second coll))))\n             '(1 1))))))","problem":26,"user":"52c00e4fe4b07a9af5792342"},{"problem":26,"code":"(fn [x]\n  (loop [n x\n         fibs '()]\n    (if (= (count fibs) x)\n      fibs\n      (recur (dec n)\n             (conj fibs\n                   ((fn fib\n    [n]\n    (cond \n      (<= n 0) 0\n      (or (= n 1)\n          (= n 2)) 1\n      :else (+ (fib (- n 1))\n               (fib (- n 2))))) n))))))","user":"55a9fe1ce4b0988bba2ad947"},{"problem":26,"code":"#(loop [prev 0 current 1 n % result []]\n   (if (zero? n)\n     result\n     (recur current (+ prev current) (dec n) (conj result current))))","user":"5f2f5cdee4b033932238a67f"},{"code":"(fn [ n ] \n    (take n ((fn fibonacci \n                ([] (cons 1 (lazy-seq (fibonacci 0 1))))\n                ([a b] (cons (+ a b) (lazy-seq (fibonacci b (+ a b))))))))\n)","problem":26,"user":"51f59607e4b0abb92f97f9d5"},{"problem":26,"code":"#(->> [1 1]\n  \t  (iterate (fn [[e1 e2]] [e2 (+ e1 e2)]))\n      (map first)\n      (take %))","user":"592af53be4b072a2710fcf2b"},{"problem":26,"code":"#(take % (map first \n             \t(iterate \n                  (fn [[ a, b       ]]  \n                    [ b, (+ a b) ]) \n                  [1, 1])))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":26,"code":"(fn fibo [n]\n  (let [fibostep\n    (fn f [n secondlast last]\n      (let [new (+ secondlast last)]\n        (if (== n 1)\n          (list new)\n          (cons new (f (- n 1) last new))\n        )\n      )\n    )]\n    (cond\n      (== n 0) '()\n      (== n 1) '(1)\n      (== n 2) '(1 1)\n      :else (concat '(1 1) (fibostep (- n 2) 1 1))\n    )\n  )\n)","user":"5bcc304ce4b07a9b28b1010c"},{"code":"#(take %\n  ((fn fib [n1 n2]\n    (lazy-seq\n      (cons n1 (fib n2 (+ n1 n2))))) 1 1))","problem":26,"user":"50a83315e4b054305ba5a830"},{"code":"(fn fibonacci [n]\n   (cond\n    (= n 1) [1]\n    (= n 2) [1 1]\n    :else \n    (let [reduction (fibonacci (- n 1))]\n      (conj \n       (fibonacci (- n 1))\n       (+ (nth reduction (- (count reduction) 1))\n          (nth reduction (- (count reduction) 2)))\n       ))\n    ))","problem":26,"user":"4f5f2665e4b0030a34fb2b5d"},{"code":"(fn [n] (\n  (fn myFib [y z]\n     (if (= y 2)\n        z\n        (myFib\n          (dec y)\n          (conj z (+ (last z) (last (pop z))))\n        )\n     )\n  ) n [1 1]\n))","problem":26,"user":"4f16d6ed535d64f60314644f"}]