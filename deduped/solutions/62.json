[{"problem":62,"code":"(fn func [f x]\n  (cons \n   x\n   (lazy-seq\n    (func f (f x)))))","user":"53065acbe4b02e8216869792"},{"code":"(fn my-iterate [f prev]\n  (cons prev\n        (lazy-seq\n          (my-iterate f (f prev)))))","problem":62,"user":"527ccaf4e4b0757a1b17136d"},{"problem":62,"code":"(fn my-iterate\n  ([fun val]\n    (my-iterate fun val (lazy-seq '())))\n  ([fun val col]\n    (lazy-seq\n      (cons (if (nil? (last col)) val (fun (last col))) (my-iterate fun val (list (if (nil? (last col)) val (fun (last col)))))))))","user":"5c3f6322e4b08cd430848e97"},{"problem":62,"code":"(fn this [f x] \n   (cons x (lazy-seq (this f (f x)))))","user":"52d24f60e4b099d49816f0a8"},{"code":"(fn [f x]\n  (reductions #(%2 %1) x (repeat f)))","problem":62,"user":"4e7e05a6535db169f9c796fe"},{"code":"(fn iter [f init]\n     (cons init (lazy-seq (iter f (f init)))))","problem":62,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":62,"code":"(fn [f x]\n  (letfn [(iter [ff xx] (cons xx (lazy-seq (iter ff (ff xx)))))]\n    (iter f x)))","user":"52cee992e4b07d0d72b27395"},{"problem":62,"code":"(fn eka\n    ([op x]\n       (lazy-seq\n         (cons x (eka op (op x)))))\n    )","user":"596d630ae4b069c0a1a19846"},{"problem":62,"code":"(fn [f init] (reductions (fn [previous _] (f previous)) init (range)))","user":"592ac17ae4b072a2710fcf26"},{"problem":62,"code":"(fn it [f x] \n  (lazy-seq (cons x (it f (f x)))))","user":"54078851e4b0addc1aec66bd"},{"problem":62,"code":"#(reductions (fn [c b] (% c)) %2 (range))","user":"583e1558e4b089d5ab817da9"},{"problem":62,"code":"(fn newIterate [f val]\n    (cons val (lazy-seq (newIterate f (f val)))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":62,"code":"(fn iter [f s] (lazy-seq (cons s (iter f (f s)))))","user":"53110f32e4b08068f379ece4"},{"problem":62,"code":"(fn it [f\n        x]\n  (lazy-seq (cons x (it f (f x)))))","user":"5c718e6ce4b0fca0c1622796"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq\n   (cons x\n         (my-iterate f (f x)))))","user":"54ae541ae4b09f271ff37cef"},{"code":"(fn foo [f val] \n  (lazy-seq (cons val (foo f (f val)))))","problem":62,"user":"4fa9da14e4b081705acca1e7"},{"problem":62,"code":"(fn my-itr [f x]\n              (lazy-seq (cons x (my-itr f (f x)))))","user":"5c17467fe4b01240ff5671df"},{"problem":62,"code":"(fn i [f a]\n  (cons a (lazy-seq (i f (f a)))))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn iter [f n]  (lazy-seq (cons n (iter f (f n)))))","problem":62,"user":"500854c4e4b028e089d3518c"},{"problem":62,"code":"(fn iter [f n]\n         (lazy-seq (cons n (iter f (f n)))))","user":"53aaaf7ae4b047364c044444"},{"problem":62,"code":"(fn iter [f x]\n            (cons x\n                  (lazy-seq\n                    (iter f (f x)))))","user":"59385840e4b02506e01a29c9"},{"code":"(fn itrate\n    [f x]\n    (cons x\n          (lazy-seq (itrate f\n                            (f x)))))","problem":62,"user":"4dad938fc9a9d6ed1b99dc57"},{"problem":62,"code":"(fn my-iterate [a b]\n\t(lazy-seq (cons b (my-iterate a (a b)))))","user":"553fa883e4b0a04f792994f9"},{"code":"(fn ite\n  [f x] (cons x (lazy-seq (ite f (f x)))))","problem":62,"user":"4ec60dc4535d6d7199dd36c0"},{"code":"#(reductions (fn [x _] (% x)) (repeat %2))","problem":62,"user":"5065faf9e4b0313a384e5645"},{"problem":62,"code":"(fn iter\n    ([func init]\n     (lazy-seq\n      (cons init (iter func (func init))))))","user":"56eaad95e4b04a395b9a040f"},{"problem":62,"code":"(fn it [f init]\n  (lazy-seq \n   (cons init\n         (it f (f init)))))","user":"559622cee4b0c79f6e1db975"},{"problem":62,"code":"(fn myiter [f v]\n  (reductions (fn [ret x]\n                (println \"ret = \" ret \" x = \" x)\n                (f ret))\n              v\n              (range)))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn ite [ f j ] \n  (lazy-seq (cons j (ite f (f j))) ))","problem":62,"user":"4fc43a8ee4b081705acca346"},{"problem":62,"code":"(fn fun [f a]  \n   (cons a (lazy-seq (fun f (f a)))))","user":"570eeb66e4b0b0fb43fd06fa"},{"code":"(fn foo [f x]\n  (lazy-seq (cons x (foo f (f x)))))","problem":62,"user":"4f4ff5a8e4b03ad3f0c10cf3"},{"problem":62,"code":"(fn i [f val] (lazy-seq (cons val (i f (f val)))))","user":"56018dd4e4b04bb52996e18f"},{"problem":62,"code":"(fn my-iterate [f x]\n  (let [y (f x)]\n    (lazy-seq (cons x (my-iterate f y)))))","user":"5d8b4960e4b0915913b1d3d3"},{"problem":62,"code":"(fn iter [func init]\n    (cons init (lazy-seq (iter func (func init)))))","user":"586b6753e4b01531a375e956"},{"code":"(fn g [f x](lazy-seq (cons x (g f (f x)))))","problem":62,"user":"4e95f5a5535dbda64a6f6b3b"},{"code":"(fn iterate- [f x]\r\n  (cons x\r\n  (lazy-seq (iterate- f (f x)))))","problem":62,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn my-iterate\n  [f init]\n  (cons init (lazy-seq (my-iterate f (f init)))))","problem":62,"user":"525d490ae4b0cb4875a45d70"},{"problem":62,"code":";(vec(take 5 (\n            (fn irate [f x]\n              (lazy-seq (cons x (irate f (f x)))))\n;            #(* 2 %) 1)))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn iterate2 [f x] \n (cons x (lazy-seq (iterate2 f (f x)))))","problem":62,"user":"52f4fae4e4b05e3f0be25f27"},{"problem":62,"code":"(fn iter [f x]\n              (cons x (lazy-seq (iter f (f x))))\n            )","user":"5a488c09e4b05d388ecb6b68"},{"problem":62,"code":"(fn rr [f v] (lazy-seq (cons v (rr f (f v)))))","user":"5ef5ee81e4b07c55ae4a054a"},{"problem":62,"code":"(fn -iterate\n  [f e]\n  (lazy-seq (cons e (-iterate f (f e)))))","user":"5afcd6d1e4b0cc2b61a3bd17"},{"code":"(fn it [f,v]\n  (lazy-seq (cons v (it f (f v))))\n)","problem":62,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn temp [f x] (cons x (lazy-seq (temp f (f x)))))","problem":62,"user":"522404d8e4b01819a2de42c0"},{"problem":62,"code":"(fn [f x]\n  (letfn [(func [f1 x1]\n                (cons x1 (lazy-seq (func f1 (f1 x1)))))]\n    (func f x)))","user":"533a399de4b0e30313ee6cb9"},{"code":"(fn it [f x] (lazy-seq (cons x (it f (f x)))))","problem":62,"user":"4dae916eedd6309eace4d155"},{"problem":62,"code":"(fn impl-iterate\n  [f x]\n  (cons x (lazy-seq (impl-iterate f (f x)))))","user":"56c427bbe4b05cc29241ee94"},{"problem":62,"code":"(fn my-it [func x] (lazy-seq (cons x (my-it func (func x)))))","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":62,"code":"(fn [f x]\n    (let [inf (fn inf [x]\n                (let [nval (f x)]\n                  (cons nval (lazy-seq (inf nval)))))]\n      (cons x (lazy-seq (inf x)))))","user":"554a75c9e4b0a04f79299575"},{"problem":62,"code":"(fn it- [f x]  (lazy-seq (concat [x] (it- f (f x)))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn iterate- [f init]\n  (cons init\n    (lazy-seq\n      (iterate- f (f init)))))","problem":62,"user":"5032b066e4b00c0952a257ea"},{"problem":62,"code":"(fn [f init]\n  (cons init ((fn test2 [f init]\n                (lazy-seq\n                 (let [x (f init)]\n                   (cons x (test2 f x)))))\n              f init)))","user":"5823d3e6e4b051871117beb8"},{"code":"(fn my-iterate [func start] \n  (lazy-seq (cons start (my-iterate func (func start)))))","problem":62,"user":"4fb266a5e4b081705acca28c"},{"problem":62,"code":"(fn [f a]\n    (\n      let \n        [r (\n          fn [n f a]\n            (if \n              (= 0 n) \n              a \n              (recur (dec n) f (f a) ) \n            )\n          )\n        ]\n      (\n        map #(r %1 f a) (range)\n      )\n    )\n  )","user":"5717d674e4b07c98581c3b1a"},{"problem":62,"code":"(fn ITERATE [f x]\n  (cons x\n        (lazy-seq (ITERATE f (f x)))))","user":"53576356e4b04ce2eb3ed27a"},{"problem":62,"code":"#((fn a [f x](cons x (lazy-seq (a f (f x))))) %1 %2)","user":"555c6344e4b0b056612e224c"},{"problem":62,"code":"(fn fun [x y & z]  (cons y (lazy-cat (fun x (x y)))))","user":"540479e7e4b0addc1aec665a"},{"code":"(fn aaa [f x]\n  (cons x (lazy-seq (aaa f (f x)))))","problem":62,"user":"51baff1be4b0fe3ecfb46443"},{"code":"(fn iter [f x] \n  (cons x (lazy-seq (iter f (f x)))) )","problem":62,"user":"50b8914ce4b0cba0e598b64d"},{"code":"(fn this [f x] (cons x (lazy-seq (this f (f x)))))","problem":62,"user":"4f2a7174e4b0d6649770a03e"},{"code":"(fn iter\n  [f x]\n  (cons x\n        (lazy-cat (iter f (f x)))))","problem":62,"user":"4e7d4544535db169f9c796d0"},{"problem":62,"code":"(letfn\n  [(aaa [f n] (lazy-seq (cons n (aaa f (f n)))))]\n   aaa)","user":"5640eb50e4b08d4f616f5eec"},{"problem":62,"code":"(fn my-it\n  [f x]\n  (lazy-seq (cons x (my-it f (f x)))))","user":"58976bfde4b00487982d52bc"},{"problem":62,"code":"(fn pseudoiterate [f v] (lazy-seq (cons v (pseudoiterate f (f v)))))","user":"5c7c1d8ee4b0d597f478ca88"},{"problem":62,"code":"(fn fa[f a](cons a (lazy-seq (fa f (f a)))))","user":"54fc7d89e4b07d26eda61d2b"},{"problem":62,"code":"(fn\n  my-iterate\n  [f x]\n  (lazy-seq (cons x (my-iterate f (f x)))))","user":"5c6227fee4b0fca0c1622641"},{"problem":62,"code":"(fn my-iterate [funk init]\n  (cons init (lazy-seq (my-iterate funk (funk init))))\n)","user":"5ca1f8a1e4b048ec896c5b8c"},{"code":"(fn new-iterate [f x] (cons x (lazy-seq (new-iterate f (f x)))))","problem":62,"user":"52d9aaa1e4b09f7907dd13ae"},{"problem":62,"code":"#((fn its [x] (lazy-seq (cons x (its (% x))))) %2)","user":"53e4fa2ce4b036ad0777e454"},{"problem":62,"code":"(fn lzy [a b] (lazy-seq (cons b (lzy a (a b)))))","user":"56fee4c0e4b08d47c97781b5"},{"problem":62,"code":"(fn r [f x]\n  (cons x (lazy-seq (r f (f x))))\n  )","user":"53aef31ce4b047364c04447b"},{"code":"(fn [f_ ini_]\n  (letfn [(myite [f ini]\n            (lazy-seq (cons ini (myite f (f ini)))))]\n  (myite f_ ini_)\n))","problem":62,"user":"4f62b29ce4b0defedf855fd9"},{"problem":62,"code":"(fn lazy ([fun xs] (lazy-seq (cons xs (lazy fun (fun xs))))))","user":"5c6e8b57e4b0fca0c1622755"},{"code":"(fn forever [fx value]\n    (cons value (lazy-seq (forever fx (fx value)))))","problem":62,"user":"4ee8092f535d93acb0a66875"},{"code":"(fn myiterate [f arg]\n  \"return a lazy sequence of x, f(x) f(f x)) etc...\"\n  (lazy-seq\n   (cons arg (myiterate f (f arg)))))","problem":62,"user":"4fd16778e4b04c3a95aa040f"},{"problem":62,"code":"(fn __ [f i] (lazy-seq (cons i (__ f (f i) ))))","user":"533a2f7be4b0e30313ee6cb8"},{"problem":62,"code":"(fn g[f x]\n  (lazy-seq\n   (cons x (g f (f x)))))","user":"5488537be4b0e286459a11cf"},{"problem":62,"code":"(fn iter- [f n]\n  (cons n\n    (lazy-seq\n      (iter- f (f n)))))","user":"5aa4b961e4b0d174b936c888"},{"problem":62,"code":"(fn myiter [f x] (lazy-seq (cons x (myiter f (f x)))))","user":"5510aa92e4b06e50f9beb188"},{"problem":62,"code":"(fn it [a b]\n  (lazy-seq (cons b (it a (a b)))))","user":"5195fadee4b04c0af7ff3c11"},{"problem":62,"code":"(fn fin [f init]\n  (lazy-seq (cons init (fin f (f init)))))","user":"591f5124e4b09b4ee5954c45"},{"problem":62,"code":"(fn my-iter ([f x] (my-iter f x 1))  ([f x n] (lazy-seq  (cons x (my-iter f (f x)  n))) ))","user":"6076adb2e4b069485764de60"},{"problem":62,"code":"(fn iter [f init]\n  (lazy-seq\n   (cons init\n         (iter f (f init)))))","user":"5724a4dae4b0c5bde472c0fe"},{"problem":62,"code":"(fn my-iterate\n   [f init]\n   (lazy-seq\n     (cons init (my-iterate f (f init)))))","user":"5473efc3e4b0c51c1f4d7285"},{"problem":62,"code":"(fn foo [a b] (lazy-seq (cons b (foo a (a b)))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn i[f n](cons n (lazy-seq(i f(f n)))))","problem":62,"user":"51f2851fe4b0210f90e7454b"},{"problem":62,"code":"(fn myiterate [f x] (lazy-seq (cons x (myiterate f (f x)))))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":62,"code":"(fn it [f i]\n  (lazy-seq\n   (cons i (it f (f i)))))","user":"5b100648e4b0cc2b61a3be17"},{"code":"(fn it [f init] (lazy-seq (cons init (it f (f init)))))","problem":62,"user":"4e6fa38b535d5021c1a89622"},{"problem":62,"code":"#_(fn iterate-like\n  [f x]\n  (lazy-seq (cons x (iterate-like f (f x)))))\n\n#(reductions (fn [i _] (%1 i)) (repeat %2))","user":"57ee42c4e4b0bfb2137f5bb1"},{"problem":62,"code":"#(letfn [(iter [f v] (lazy-seq (cons v (iter f (f v)))))] (iter %1 %2))","user":"52d07cc5e4b07d0d72b273bb"},{"problem":62,"code":"(fn obliterate\n  [f x] (lazy-seq (cons x (obliterate f (f x)))))","user":"5a04e923e4b01bb0ae8afda9"},{"problem":62,"code":"(fn _i [f v]\n  (cons v (lazy-seq (_i f (f v)))))","user":"53572767e4b04ce2eb3ed277"},{"problem":62,"code":"(fn [f x] ((fn s [v] (cons v (lazy-seq (s (f v))))) x))","user":"51435753e4b0c172af7558d5"},{"code":"#(reductions (fn [x f] (f x)) %2 (repeat %1))","problem":62,"user":"4e5867d1535d8a8b8723a291"},{"problem":62,"code":"(fn foo [f init]\r\n  (lazy-seq\r\n    (cons\r\n      init \r\n      (foo f (f init)))))","user":"606e0a42e4b069485764de19"},{"problem":62,"code":"(fn iterate- [f x] (cons x (lazy-seq (iterate- f (f x)))))","user":"55253217e4b0882d96d091ce"},{"problem":62,"code":"(fn fz [f i] (cons i (lazy-seq (fz f (f i)))))","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":62,"code":"(fn x [b a] (lazy-seq (cons a (x b (b a)))))","user":"58b54852e4b0ebc645576d52"},{"code":"(fn itr [f x]\n         (lazy-seq\n          (cons x (itr f (f x)))))","problem":62,"user":"4e59b02c535d8a8b8723a2a2"},{"problem":62,"code":"(fn iter[f x]\n\t(lazy-seq (cons x (iter f (f x)))))","user":"5ff93da9e4b06df49cee14af"},{"problem":62,"code":"(fn re-iterate [func value]\n  (cons value (lazy-seq (re-iterate func (func value)))))","user":"5d80f328e4b0915913b1d372"},{"problem":62,"code":"(fn it [f x]\n\n             (lazy-seq (cons x (it f (f x))))\n\n             )","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":62,"code":"(fn x [f b](cons b (lazy-seq (x f (f b)))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"problem":62,"code":"(fn foo [f start] (lazy-seq (cons start (foo f (f start)))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":62,"code":"(fn [f x] (reductions (fn [a _] (f a)) (repeat x)))","user":"5e246f92e4b05b4b01516150"},{"code":"(fn frec [f x]\n    (lazy-seq (cons x (frec f (f x)))\n     ))","problem":62,"user":"502bb7c0e4b0194ad32ea1a3"},{"code":"(fn [f i] (reductions #(%2 %) i (repeat f)))","problem":62,"user":"4ede361a535d10e5ff6f5332"},{"problem":62,"code":"(fn i [f v]\n  (let [rec (fn ri [f v]\n              (let [r (f v)]\n                (lazy-cat (list r) (ri f r))))]\n    (cons v (rec f v))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":62,"code":"(fn practice\n  [func x]\n  (cons x (lazy-seq (practice func (func x)))))","user":"54e0a9c3e4b024c67c0cf7b5"},{"code":"(fn s [f x] \r\n  (lazy-seq\r\n    (cons x (s f (f x)))))","problem":62,"user":"4dbb1126535d1e037afb21b3"},{"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x )\n))))","problem":62,"user":"4e356d2b535deb9a81d77f2d"},{"problem":62,"code":"(fn implement-iterate [f x]\n  (lazy-seq (cons x (implement-iterate f (f x)))))","user":"605a876be4b000d535e6f53c"},{"problem":62,"code":"(fn a [f i]\n  (lazy-seq\n   (cons i (a f (f i)))))","user":"58844d43e4b0f1effa3b7696"},{"problem":62,"code":"(fn func [f val]\n  (lazy-seq (cons val (func f (f val)))))","user":"5e805895e4b085ba37836e44"},{"problem":62,"code":"(fn iter [op v] (lazy-seq (cons v (iter op (op v)))))","user":"56754c4be4b05957ce8c6149"},{"problem":62,"code":"(fn reku\n    [func init]\n    (cons init (lazy-seq (reku func (func init)))))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":62,"code":"(fn myIter [f x]\n  (lazy-seq (cons x (myIter f (f x)))))","user":"57614a42e4b0994c1922fb85"},{"problem":62,"code":"(fn reiterate [func start]\n  (cons start\n    (lazy-seq (reiterate func (func start)))))","user":"6074e1e4e4b069485764de4f"},{"problem":62,"code":"(fn my-iter [f n]\n  (let [x n]\n     (lazy-seq\n       (cons x (my-iter f (f x))))))","user":"5794fd7be4b0e215f87e8476"},{"problem":62,"code":"(fn it [f init] \n  (cons init (lazy-seq (it f (f init)))))","user":"55c0afa5e4b01b9910ae2a27"},{"code":"(fn f [g s]\n  (cons s\n     (lazy-seq\n         (f g (g s)))))","problem":62,"user":"50e5bca5e4b09ae9427b0e75"},{"problem":62,"code":"(fn i [f n] \n  (cons n (lazy-seq (i f (f n)))))","user":"54fce8bde4b07d26eda61d30"},{"code":"(fn foo [f x] (cons x (lazy-seq (foo f (f x)))))","problem":62,"user":"4f26d6d9e4b0d6649770a007"},{"problem":62,"code":"(fn Iterate [f init]\n  (cons init\n    (lazy-seq\n      (Iterate f (f init)))))","user":"5f8497dce4b0375e81f54e74"},{"code":"(fn my [f x] (lazy-seq (cons x (my f (f x)))))","problem":62,"user":"4dcc5aff535d5973398f9293"},{"problem":62,"code":"(fn bloop [f x]\n  (lazy-seq (cons x (bloop f (f x))))\n   \n  ; infinite lazy sequence\n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn f [a b] (lazy-seq (cons b (f a (a b)))))","problem":62,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn mine [f start]\n  (let [next (f start)]\n  (cons start (lazy-seq (mine f next)))))","problem":62,"user":"4dad8d4bc9a9d6ed1799dc57"},{"problem":62,"code":"(fn it [f n]\n  (cons n\n        (lazy-seq (it f (f n)))))","user":"540c54a7e4b0addc1aec6700"},{"problem":62,"code":"(fn my_iterate [f init] \n  (cons init\n    (lazy-seq (my_iterate f (f init)))))","user":"54ab6773e4b09f271ff37cc8"},{"problem":62,"code":"(fn fun [f x]\n  (lazy-seq (cons x (fun f (f x)))))","user":"59663e77e4b069c0a1a1979f"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (cons x\n      (lazy-seq\n        (my-iterate f (f x))\n      )\n    )\n  )\n)","user":"53edb628e4b0d648e757f4c8"},{"problem":62,"code":"(fn iter\n  [f i]\n  (cons i (lazy-seq (iter f (f i))) ))","user":"5b9c4a7be4b0c0b3ffbd4b16"},{"code":"(fn my_iterate [f x] (lazy-seq (cons x (my_iterate f (f x)))))","problem":62,"user":"518ad8fce4b06da86c1973c1"},{"problem":62,"code":"(fn f [fx x] (cons x (lazy-seq (f fx (fx x)))))","user":"4eb171d7535d7eef30807340"},{"problem":62,"code":"(fn myIterate [f x] (lazy-seq (cons x (myIterate f (f x)))))","user":"542c1f73e4b0dad94371f29d"},{"problem":62,"code":"(fn it [f x] (lazy-seq (cons x (it f (f x)))) \n             )","user":"5f727d2fe4b02876ed9fd08f"},{"code":"(fn reimp [f n] (cons n (lazy-seq (reimp f (f n)))))","problem":62,"user":"50645e12e4b007509339a58a"},{"problem":62,"code":"(fn reIterate\n  [n m]\n  (lazy-seq\n   (cons m (reIterate n (n m)))))","user":"5ea3711ae4b00a66d4a9519d"},{"problem":62,"code":"(fn [f x] (tree-seq f (juxt f) x))","user":"5ee4545ee4b029a2061bbe8d"},{"code":"(fn my-func [func x]\n  (cons x (lazy-seq (my-func func (func x))))\n  \n  )","problem":62,"user":"518d1b5be4b070277754617b"},{"problem":62,"code":"(fn wut [f x]\n  (lazy-seq (cons x (wut f (last (list (f x)))))))","user":"607d6bc1e4b03d835a6eaecc"},{"problem":62,"code":"(fn lala [f a]\n             (cons a\n               (lazy-seq\n                 (lala f (f a))\n                 )\n               )\n             )","user":"52149e21e4b0961f15ac4d94"},{"problem":62,"code":"(fn myIt[f i] (lazy-seq (cons i (myIt f (f i)))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":62,"code":"(fn generator ([op start] (lazy-seq (cons start (generator op (op start) )))))","user":"58a9e872e4b01a0c0b232973"},{"problem":62,"code":"(fn iterate-clone [f x]\n  (lazy-seq (cons x (iterate-clone f (f x)))))","user":"5879d577e4b01531a375ead8"},{"code":"(fn itf [f x] (cons x (lazy-seq (itf f (f x)))))","problem":62,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x (lazy-seq (my-iterate f (f x)))))\n\n;; (fn [f x] (reductions #(%2 %1) x (repeat f)))\n\n;; (fn ! [f s] (lazy-cat [s] (! f (f s))))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn itr8t [f x]\n   (cons x (lazy-seq (itr8t f (f x)))))","problem":62,"user":"52e0e646e4b09f7907dd1416"},{"problem":62,"code":"(fn iterate- [f x]\n    (lazy-seq\n      (cons x\n            (iterate- f (f x)))))","user":"5c2649c8e4b07e362c2305bf"},{"problem":62,"code":"(fn iters\n  [f init]\n  (lazy-seq\n   (cons init\n         (iters f (f init)))))","user":"59b1c2eae4b0e1f4e384c8ec"},{"code":"(fn my-iter [func init]\n\t\t(lazy-seq\n\t\t (cons init\n\t\t       (my-iter func (func init)))))","problem":62,"user":"5016ac54e4b052339a490e7b"},{"problem":62,"code":"(fn iter1 [f n] (lazy-seq (cons n (iter1 f (f n))\n)))","user":"55adf4d7e4b03311e7b732af"},{"problem":62,"code":"(fn myfn \n  ([_f _x] \n   (lazy-seq \n    (cons _x (myfn _f (_f _x))))))","user":"5854580ce4b07779d46863f9"},{"code":"(fn it- [f i]\n  (cons i\n        (lazy-seq (it- f (f i)))))","problem":62,"user":"5163b06be4b055933a9ca030"},{"code":";(fn [f x] (reductions #(%2 %1) x (repeat f)))\n(fn it [f init]\n  (lazy-seq\n   (cons init (it f (f init)))))","problem":62,"user":"52d00832e4b07d0d72b273b4"},{"problem":62,"code":"(fn [f x0]\n  (reductions (fn [x _] (f x))\n              x0\n              (repeat :_)))","user":"55d8eed3e4b0e31453f64ac3"},{"problem":62,"code":"(fn my-iterate [f args]\n  (cons\n   args\n   (lazy-seq (my-iterate f (f args)))))","user":"541475afe4b01498b1a719eb"},{"problem":62,"code":"(fn [f starting-point]\n  ((fn inner [index]\n     (lazy-seq (cons index (inner (f index))))) starting-point))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":62,"code":"(fn rr [f n]\n   (cons n (lazy-seq (rr f (f n)))))","user":"54094824e4b0addc1aec66da"},{"problem":62,"code":"(fn mync\n  [f init]\n  (lazy-seq (cons init (mync f (f init)))))","user":"566f3e18e4b0a866af6896e7"},{"code":"(fn iter [x y]\r\n  (cons y (lazy-seq (iter x (x y)))))","problem":62,"user":"504e2333e4b0f6ff3350c46c"},{"code":"(fn my-iterate [f x] \r\n  (cons x (lazy-seq (my-iterate f (f x)) )) )","problem":62,"user":"4ec7c32c535d6d7199dd36e6"},{"code":"(fn [f init]\n  (reductions (fn [init _] (f init)) init (range)))","problem":62,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn iter [f i]\n         (cons i (lazy-seq (iter f (f i)))))","problem":62,"user":"507e68abe4b085af06e3afd2"},{"code":"(fn my-itr [f x]\n  (cons x (lazy-seq (my-itr f (f x)))))","problem":62,"user":"5053de37e4b0b1b9d1860ea8"},{"code":"(fn foo [f x]\n              (lazy-seq (cons x (foo f (f x)))))","problem":62,"user":"4fa3c137e4b081705acca193"},{"code":"(fn thing [f x] (cons x (lazy-seq (thing f (f x)))))","problem":62,"user":"4fca4c37e4b0ee37620e184f"},{"code":"(fn iter [func z] \n  (cons z (lazy-seq (iter func (func z)))))","problem":62,"user":"4e8ad1d2535d65386fec2110"},{"problem":62,"code":"(fn iterati [f x]\n  (cons x (lazy-seq (iterati f (f x)))))","user":"4f43894ee4b0d7d3c9f3fd21"},{"code":"(fn iterate2 [f v]\n  (lazy-seq (cons v (iterate2 f (f v))))\n  )","problem":62,"user":"523b1988e4b02f719975bdbc"},{"problem":62,"code":"(fn iterme [f x]\n  (lazy-seq (cons x (iterme f (f x)))))","user":"55810c73e4b05c286339e0f2"},{"code":"(fn solution-62 [f x]\n  (cons x (lazy-seq (solution-62 f (f x))))\n)","problem":62,"user":"524c7fcfe4b0752c4cb68cbd"},{"problem":62,"code":"(fn inf [f x] (lazy-seq (cons x (inf f (f x)))))","user":"5c41db45e4b08cd430848ece"},{"problem":62,"code":"(fn re [f x]\n  (cons x\n        (lazy-seq\n          (re f (f x)))))","user":"59e4e3cbe4b08badc2a0c54a"},{"problem":62,"code":"(fn it [f n]\n    (lazy-seq (cons n (it f (f n)))))","user":"57027310e4b08d47c97781e2"},{"problem":62,"code":"(fn [f i] (map (fn [n] ((apply comp (take n (repeat f))) i)) (range)))","user":"58765038e4b01531a375ea7e"},{"problem":62,"code":"(fn s ([f x] (cons x (s f x (f x))))\n  ([f x v] (lazy-seq (cons v (s f x (f v))))))","user":"543b4746e4b032a45b86932c"},{"problem":62,"code":"(fn itr [f v]\n    (lazy-seq\n     (cons v\n           (itr f (f v)))))","user":"516db4f6e4b046df6fbb76a0"},{"problem":62,"code":"(fn new-iterate \n  [f x]\n  (lazy-seq\n   (cons x (new-iterate f (f x)))))","user":"57f8153de4b0d3187e900916"},{"code":"(fn it [func val]\n  (lazy-cat [val] (it func (func val))))\n\n;(fn it [func val]\n;  (lazy-cat [val]\n;    ((fn ithelp [func val]\n;      (lazy-cat [(func val)] (ithelp func (func val))))\n;    func val)))","problem":62,"user":"4fc50bcbe4b081705acca375"},{"problem":62,"code":"(fn my-iterate [f init]\n  (lazy-seq\n   (cons init\n         (my-iterate f (f init)))))","user":"571d063ee4b0145328a76272"},{"problem":62,"code":"(letfn [(myiterate [f x]\n                   (cons x (lazy-seq (myiterate f (f x)))))]\n  myiterate)","user":"540470dae4b0addc1aec6658"},{"code":"(fn i [f init]\r\n  (lazy-seq (cons init\r\n                  (i f (f init)))))","problem":62,"user":"50b47c46e4b0c464d223d1b8"},{"problem":62,"code":"(fn f [p v] (cons v (lazy-seq (f p (p v)))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":62,"code":"(fn my-iterate [f x]\n     (cons x (lazy-seq (my-iterate f (f x)))))","user":"548ade6de4b0e286459a11f6"},{"problem":62,"code":"(fn my-iterate\n  [f x] \n  (lazy-seq \n   (cons x (my-iterate f (f x)))))","user":"54f773bfe4b01ecee9d8881f"},{"problem":62,"code":"(fn t [f x] (lazy-seq (cons x (t f (f x)))))","user":"543366dde4b0b6b47310fcdf"},{"problem":62,"code":"(fn it-r-8 [f x]\n  (cons x (lazy-seq (it-r-8 f (f x)))))","user":"510a3cd4e4b06956752d35ad"},{"code":"(fn inception [f x]\n  (cons x (lazy-seq (inception f (f x)))))","problem":62,"user":"525aa499e4b0cb4875a45cf7"},{"problem":62,"code":"#(reductions (fn [i _] (%1 i)) %2 (range))","user":"53b7c21ae4b047364c0444d4"},{"problem":62,"code":"(fn iterate* [f x] (lazy-seq  (cons x (iterate* f (f x)))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x \n        (lazy-seq (my-iterate f  (f x) ))\n        )\n  )","user":"558bdcefe4b0277789237633"},{"code":"(fn my-fun\n  [f x] (cons x (lazy-seq (my-fun f (f x)))))","problem":62,"user":"50589113e4b06522596eba7f"},{"problem":62,"code":"(fn my-iterate\n  [proc initial]\n  (lazy-seq (cons initial (my-iterate proc (proc initial)))))","user":"4fe899a6e4b07c9f6fd12c54"},{"problem":62,"code":"(fn [f x]\n  (letfn [ (my-iterate [f x] (lazy-seq (cons x (my-iterate f (f x)))))] (my-iterate f x)))","user":"56df63c7e4b0ca2494a095f5"},{"code":"(fn a [f b] (cons b (lazy-seq (a f (f b)))))","problem":62,"user":"50ccf729e4b0f7a459302aac"},{"code":"(fn* lazy [f x]\n  (cons x (lazy-seq (lazy f (f x)))))","problem":62,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn f [x y] (cons y(lazy-seq (f x (do (x y))))))","problem":62,"user":"4f4bd422e4b03ad3f0c10c7e"},{"problem":62,"code":"(fn iterate2 [f init]\n  (lazy-seq\n    (cons init (iterate2 f (f init)))))","user":"606b16b8e4b069485764ddf7"},{"code":"(fn trte [f n]\n  (cons n (lazy-seq (trte f (f n)))))","problem":62,"user":"53307da1e4b019098a6f8b5e"},{"problem":62,"code":"(fn customiterate [fun x] \n  (lazy-seq (cons x (customiterate fun (fun x)))))","user":"5dd70ee3e4b0948ae9d9ad85"},{"code":"(fn foo [f n] (lazy-seq (cons n (foo f (f n)))))","problem":62,"user":"519ef784e4b087743fad2198"},{"code":"(fn f [g, e] (cons e (lazy-seq (f g (g e)))))","problem":62,"user":"514b66f4e4b0bd81940b86cb"},{"problem":62,"code":"(fn my-iter [f x] \n  (lazy-seq \n    (cons x (my-iter f (f x)))))","user":"57995ac1e4b05b1deef9adbf"},{"problem":62,"code":"(fn my-iterate [f n]\n  (lazy-seq (cons n (my-iterate f (f n)))))","user":"5242f6dfe4b076204b44fa9d"},{"code":"(fn f [g x] (cons x (lazy-seq (f g (g x)))))","problem":62,"user":"4ee9ddb8535d93acb0a66896"},{"problem":62,"code":"(fn [f i]\n  ((fn l\n     ([] (l i))\n     ([n] (lazy-seq (cons n (l (f n))))))))","user":"57d57f65e4b0bd073c2023b3"},{"problem":62,"code":"(fn k[f init](lazy-seq (cons init (k f (f init)))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":62,"code":"(fn mylazy \n\t[myfn n]\n\t(cons n (lazy-seq (mylazy myfn (myfn n)))\n          \n          ))","user":"55897fe2e4b059ccff29b205"},{"problem":62,"code":"(fn my-iter [f x]\n  (cons x\n        (lazy-seq (my-iter f (f x)))))","user":"5264383be4b03e8d9a4a70cb"},{"problem":62,"code":"(fn _iterate [f init]\n  (lazy-seq (cons init (_iterate f (f init)))))","user":"534fa9dae4b084c2834f4acf"},{"code":"(letfn [(it [f x] (lazy-seq (cons x (it f (f x)))))] it)","problem":62,"user":"51729002e4b044b2ef48a850"},{"code":"(fn i [f n] (cons n (lazy-seq (i f (f n)))))","problem":62,"user":"4ee6400c535d93acb0a6685b"},{"problem":62,"code":"(fn\n  [f x]\n  (letfn [(iter \n            [x]\n            (lazy-seq\n              (cons x (iter (f x)))))]\n    (iter x)))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":62,"code":"(fn fun \n  [f n]\n  (lazy-seq\n    (cons n (fun f (f n)))))","user":"59e778aae4b0249b72820716"},{"problem":62,"code":"(fn iterateR\n  [f init]\n  (cons init\n    (lazy-seq\n      (iterateR f (f init)))))","user":"5c787131e4b0fca0c1622825"},{"code":"(fn [f x]\n  (letfn [(iter [g y] (cons y (lazy-seq (iter g (g y)))))]\n    (iter f x)))","problem":62,"user":"4e42f930535dc968683fc49f"},{"problem":62,"code":"(fn fun [f x](cons x (lazy-seq (fun f (f x)))))","user":"56102f50e4b05f002753df6b"},{"code":"(letfn [(i [f x]                                                                                                                                                                                                                             \n          (lazy-seq (cons x (i f (f x)))))]                                                                                                                                                                                                   \n  i)","problem":62,"user":"4db342d7535df7e46ed9b6cd"},{"code":"(fn my-iter [f x]\n   (lazy-seq\n     (cons x (my-iter f (f x)))))","problem":62,"user":"4fb99483e4b081705acca2da"},{"problem":62,"code":"(fn [f iv]\n           (let [tick (atom iv)]\n             (cons iv (repeatedly #(swap! tick f)))))","user":"54a11042e4b09f271ff37c49"},{"problem":62,"code":"(fn lazy [f x]\n  (lazy-seq (cons x (lazy f (f x)))))","user":"5935151ee4b072a2710fd084"},{"problem":62,"code":"(fn my-titerate\n  [f start]\n  (lazy-seq (cons start (my-titerate f (f start)))))","user":"5f29837ee4b033932238a64f"},{"problem":62,"code":"(fn ite [f val]\n  (cons val (lazy-seq (ite f (f val)))))","user":"58a2b57fe4b02bd94d917ede"},{"problem":62,"code":"(fn ! [f a](lazy-cat [a] (! f (f a))))","user":"54aa665fe4b09f271ff37cb8"},{"problem":62,"code":"(fn myit [f start] (lazy-seq (cons start (myit f (f start)) )))","user":"57c6aa0be4b05aa3c4741cf7"},{"code":"(fn it\n  [f x]\n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"511026b1e4b04c71fce993ec"},{"problem":62,"code":"(fn [f x]\n    (letfn [(iter ([f x](lazy-seq (cons x (iter f (f x))))))]\n      (iter f x)))","user":"52a7634ae4b0c58976d9ac16"},{"problem":62,"code":"(fn [f x]\n  (map (partial (fn g [x n]\n         (if (= n 0)\n           x\n           (g (f x) (dec n)))) x)\n       (range)))","user":"5d672bd7e4b0db5d338d15f1"},{"problem":62,"code":"(fn iter [f x]\n\t(lazy-seq (cons x (iter f (f x)))))","user":"5689fd03e4b0dcc4269f4088"},{"problem":62,"code":"(fn dd [f init] \n  (\n   cons init (lazy-seq (dd f (f init)))))","user":"57ee432de4b0bfb2137f5bb2"},{"code":"(fn test-seq [func n]\n  (cons n (lazy-seq (test-seq func (func n)))))","problem":62,"user":"5289f1f4e4b0239c8a67ae6d"},{"code":"(fn iter [f init]\n  (lazy-seq\n   (cons\n    init\n    (iter f (f init)))))","problem":62,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":62,"code":"(fn iter [f x]\n  (let [f-x (f x)]\n    (lazy-seq (cons x (iter f f-x)))))","user":"58a822e4e4b01a0c0b232950"},{"code":"(fn toto [func init] ( cons init (lazy-seq (toto func (func init)))))","problem":62,"user":"5034b623e4b062bc5d7ae168"},{"problem":62,"code":"(fn my-iterate [fnc x]\n  (cons x (lazy-seq (my-iterate fnc (fnc x)))))","user":"59251947e4b072a2710fce69"},{"problem":62,"code":"(fn this [f init]\n  (cons init (lazy-seq (this f (f init)))))","user":"5461c402e4b01be26fd746a6"},{"problem":62,"code":"(fn iterater [f x]\n  (lazy-seq (cons x (iterater f (f x)))))","user":"53528cd3e4b084c2834f4af2"},{"code":"(fn n [f x]\n  (lazy-seq\n    (cons x (n f (f x)))))","problem":62,"user":"4f244f26e4b0d66497709fea"},{"problem":62,"code":"(fn anon [f s]\n  (lazy-seq (cons s (anon f (f s)))))","user":"57d9cae9e4b0bd073c202409"},{"code":"; lazy-seq was the key to this problem\n(fn iterate-mike[func x]\n  (lazy-seq (cons x (iterate-mike func (func x)))))","problem":62,"user":"4f831fd3e4b033992c121c17"},{"problem":62,"code":"(fn lf [f x]\n   (lazy-seq (cons x (lf f (f x)))))","user":"581a5fdbe4b0e114eb51a002"},{"problem":62,"code":"(fn my-iterate [f initial-value]\n\t(lazy-seq (cons initial-value\n\t\t\t\t\t(my-iterate f (f initial-value)))))","user":"57c0917be4b05aa3c4741c95"},{"problem":62,"code":"(fn i \n  [f n]\n  (cons n (lazy-seq (i f (f n)))))","user":"5c664b87e4b0fca0c16226a5"},{"problem":62,"code":"(fn iter- [f n]\n  (lazy-seq (cons n (iter- f (f n)))))","user":"5a86ad84e4b05369db4d249c"},{"problem":62,"code":"#((fn rec [arg] (lazy-seq (cons arg (rec (%1 arg))))) %2)","user":"56d228f3e4b0ea9b8538f79a"},{"problem":62,"code":"(fn function [f x]\n  (cons x (lazy-seq (function f (f x)))))","user":"579c35fee4b05b1deef9ae04"},{"code":"#(reductions (fn [a _] (% a)) %2 (repeat 1))","problem":62,"user":"4f569a3ce4b0a7574ea71828"},{"problem":62,"code":"(fn callSelfLazy [f x]\n  (cons x (lazy-seq (callSelfLazy f (f x))))\n)","user":"571aae1fe4b07c98581c3b5a"},{"problem":62,"code":"(fn it [f v] \n  (cons v (lazy-seq (it f (f v))))\n)","user":"568513c4e4b04eec3ec5cfc5"},{"code":"(fn app [f x] (lazy-cat (list x) (app f (f x))))","problem":62,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn lf [f x] (lazy-seq (cons x (lf f (f x)))))","problem":62,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":62,"code":"(fn x [a b] (lazy-seq (cons b (x a (a b)))))","user":"5b754f8ee4b047b03b2036c9"},{"code":"(fn iter[func val](lazy-seq(cons val (iter func (func val)))))","problem":62,"user":"529952a4e4b02ebb4ef75081"},{"problem":62,"code":"(fn iter\n  [fun t]\n  (lazy-seq (cons t (iter fun (fun t)))))","user":"5609d328e4b05f002753deee"},{"code":"(fn [f x]\n  (letfn [(gen [val]\n    (lazy-seq\n      (cons val (gen (f val)))))]\n    (gen x)))","problem":62,"user":"4f0b2028535d0136e6c222ff"},{"problem":62,"code":"(fn myiterate [f i]\n   (lazy-seq (cons i (myiterate f (f i)))))","user":"538db083e4b0b51d73faae74"},{"problem":62,"code":"(fn it [fun x] (cons x (lazy-seq (it fun (fun x)))))","user":"5f96fa49e4b0715f5002d7e9"},{"code":"(fn fs [f x]\r\n  (lazy-seq (cons x (fs f (f x)))))","problem":62,"user":"50045388e4b0678c553fc44e"},{"problem":62,"code":"(fn [f x] (reductions (fn [acc y] (f acc)) x (repeat nil)))","user":"54e540c1e4b024c67c0cf7f9"},{"code":"(fn [f x] \n  (letfn [(g [seed]\n             (cons seed (lazy-seq (g (f seed)))))]\n          (g x)))","problem":62,"user":"51a584c7e4b051b01d55f44e"},{"code":"(fn myI [f v] (lazy-seq (cons v (myI f (f v)))))","problem":62,"user":"4f82ed48e4b033992c121c0e"},{"problem":62,"code":"(fn do-iterate\n  [f arg]\n  (cons arg (lazy-seq (do-iterate f (f arg)))))","user":"59b62f8de4b05c620303ca1f"},{"problem":62,"code":"(fn iter [f x]\n                  (cons x (lazy-seq (iter f (f x)))))","user":"55274467e4b0ffed3738f92b"},{"problem":62,"code":"(fn my-iterate [a-fn seed]\n  (lazy-seq (cons seed (my-iterate a-fn (a-fn seed)))))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":62,"code":"(fn createIter\n  ([f n] \n   (lazy-seq \n     (cons n (createIter f (f n))))))","user":"58b18ba0e4b0ebc645576cfa"},{"problem":62,"code":"(fn iter [f n] \n\t(cons n (lazy-seq (iter f (f n)))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn it [f i]\n  (cons i (lazy-seq ( it f (f i)))))","problem":62,"user":"50e90813e4b033b0e80d11e7"},{"code":"(fn myiterate[f init]\n  (cons init\n        (lazy-seq (myiterate f (f init)))))","problem":62,"user":"512eb723e4b0b740abc5982b"},{"problem":62,"code":"(fn ITERATE [f a]\n  (let [next (f a)]\n    (lazy-seq (cons a (ITERATE f next)))))","user":"570ab24fe4b0b0fb43fd06b7"},{"code":"(fn iterate* [f init]\n  (cons init (lazy-seq (iterate* f (f init)))))","problem":62,"user":"4e3bccb1535deb9a81d77f55"},{"problem":62,"code":"(fn iter [f x]\n( lazy-seq (cons x (iter f (f x))) ) )","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":62,"code":"(fn [f x]\n  (letfn [(faux [xaux]\n                (lazy-seq\n                 (let [res (f xaux)]\n                   (cons xaux (faux res)))))]\n    (faux x)))","user":"589771f9e4b00487982d52bd"},{"problem":62,"code":"(fn f [x y]\n  (cons y (lazy-seq (f x (x y)))))","user":"53c74cfce4b00fb29b2212a7"},{"code":"(fn myit [f x]\n  (lazy-seq (cons x (myit f (f x)))))","problem":62,"user":"511618b1e4b0d4f670fd2fdf"},{"code":"(fn iti[f x] (lazy-seq (cons x (iti f (f x)))))","problem":62,"user":"4febb4dae4b0681fd128dc98"},{"code":"(fn iter-ate [f x] (cons x (lazy-seq (iter-ate f (f x)))))","problem":62,"user":"4f2942ace4b0d6649770a01e"},{"problem":62,"code":"(fn reiterate \n  ([f]\n   (let [i 1]\n     (cons i (lazy-seq (reiterate f (f i))))))\n  ([f base]\n    (cons base (lazy-seq (reiterate f (f base))))\n   ))","user":"53bd6fcfe4b0d9a98559a6d0"},{"problem":62,"code":"#(letfn [(i [x] (lazy-seq (cons x (i (%1 x)))))] (i %2))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":62,"code":"(fn [f x] (let [v (atom x)] (cons x (repeatedly #(swap! v f)))))","user":"4f4e78fee4b03ad3f0c10cc8"},{"problem":62,"code":"(fn iterate- [f x]\n  (lazy-seq (cons x (iterate- f (f x)))))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":62,"code":"(fn fer [f n] (cons n (lazy-seq (fer f (f n)))))","user":"55c1eb52e4b0e31453f64970"},{"problem":62,"code":"(fn mit [f x] (lazy-seq (cons x (mit f (f x)))))","user":"59abd1d8e4b08cbb53654da4"},{"code":"(fn it [f x]\n  (lazy-seq\n    (cons x\n      (it f (f x)))))","problem":62,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":62,"code":"#(for [i (range)] ((apply comp (take i (repeat %1))) %2))","user":"5ee738dee4b029a2061bbea2"},{"problem":62,"code":"(fn my-iter\n  ([f n] (cons n (lazy-seq (my-iter f (f n))))))","user":"54eee3a3e4b024c67c0cf879"},{"problem":62,"code":"(fn my-iterate\n  [f x] (lazy-seq (cons x (my-iterate f (f x)))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":62,"code":"(fn fm [f x]\n  (lazy-seq (cons x (fm f (f x)))) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":62,"code":"(fn [f x]\n  (letfn\n    [\n      (\n        iter [x]\n        (\n          let [fx (f x)]\n          (\n            cons\n             fx\n             (lazy-seq (iter fx))\n          )\n        )\n      )\n    ]\n    (cons x (iter x))\n  )\n)","user":"516ee939e4b06aac486e5b34"},{"problem":62,"code":"(fn iter [func starter]\n  (cons starter \n        (lazy-seq (iter func (func starter)))\n  ))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn re-iterate [f x]\n  (lazy-seq (cons x (re-iterate f (f x)))))","problem":62,"user":"5346f409e4b084c2834f4a46"},{"problem":62,"code":"(fn myiter [f x] (cons x (lazy-seq (myiter f (f x)))))","user":"4e260220535deb9a81d77ef0"},{"code":"(fn iterate2 [f x] (cons x (lazy-seq (iterate2 f (f x)))))","problem":62,"user":"50705072e4b07bd6ad9b9f27"},{"problem":62,"code":"(fn my-iterate [f init]\n  (lazy-seq\n   (map #(% init)\n        (reductions (fn [acc _] (comp acc f)) (fn [x] x) (drop init (range))))))","user":"58a953dae4b01a0c0b232968"},{"problem":62,"code":"(fn iter [f val] (lazy-seq (cons val (iter f (f val)))))","user":"594266cfe4b060784b3b790b"},{"problem":62,"code":"(fn it [f init]\n  (cons init\n  \t(lazy-seq (it f (f init)))))","user":"52c1ede2e4b07a9af579236d"},{"problem":62,"code":"(fn x[f v] (cons v (lazy-seq (x f (f v)))))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn it [f x]\n    (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"5370ef22e4b0fc7073fd6ea0"},{"problem":62,"code":"(fn it [f x] \n  (lazy-seq\n   (cons x (it f (f x)))))","user":"5405ae2be4b0addc1aec6671"},{"problem":62,"code":"(fn iter [f init] \n   (cons init (lazy-seq (iter f (f init)))))","user":"57c0393be4b05aa3c4741c90"},{"problem":62,"code":"(fn [f a] (reductions (fn [c d] (f c)) (repeat a)))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":62,"code":"(fn [f x]\n  (letfn [(wut [f x]\n            (lazy-seq\n             (cons x (wut f (f x)))))]\n    (wut f x)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn myit [f x]\n  (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"4dfd7ecf535d04ed9115e783"},{"code":"(fn iterate2\n  [f x] (cons x (lazy-seq (iterate2 f (f x)))))","problem":62,"user":"4f890488e4b033992c121c76"},{"code":"(fn i [f p]\n  (lazy-seq\n    (cons p (i f (f p)))))","problem":62,"user":"4f32a7f1e4b0d6649770a095"},{"code":"(fn it [f x]\n\t(lazy-seq (cons x (it f (f x)))))","problem":62,"user":"5398305fe4b0b51d73faaef6"},{"problem":62,"code":"(fn implement_iterate\n  [f x]\n  \"Function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc, given a side-effect free function f and an initial value x\" \n\n  (cons x\n        (lazy-seq\n          (implement_iterate f (f x)))))","user":"5bbbd077e4b0a20761a23615"},{"problem":62,"code":"(fn mojiter [f x]\n  (lazy-seq (concat (list x) (mojiter f (f x)))\n   ))","user":"584d99c5e4b0b7285a6f4e42"},{"problem":62,"code":";(fn [f v] (map-indexed #((apply comp (repeat %1 f)) %2) (repeat v)))\n\n(fn i [f v]\n  (lazy-cat [v] (i f (f v))))","user":"57533bc1e4b02ea1147992a6"},{"problem":62,"code":"(fn it [f s]\n    (lazy-seq\n        (cons s (it f (f s)))))","user":"54fdaeace4b07d26eda61d39"},{"problem":62,"code":"(fn f* [f init]\n  (lazy-seq (cons init (f* f (f init)))))","user":"5cb71f35e4b026601754b961"},{"problem":62,"code":"(fn iter[f i]\n        (lazy-seq\n         (cons i (iter f (f i)))))","user":"573a0ecce4b0cd1946bd1088"},{"problem":62,"code":"(fn [f s]\n  (reductions (fn [l n] (f l)) s (range)))","user":"51a4d802e4b0def3c5c5869a"},{"problem":62,"code":"(fn interp [f x] \n\t(lazy-seq (cons x (interp f (f x))))\n\t)","user":"5ac04101e4b073f177442737"},{"code":"(fn test-fn [it-fn n]\n  (cons n (lazy-seq (test-fn it-fn (it-fn n)))))","problem":62,"user":"4ec12516535dfed6da9c6da7"},{"code":"(fn [f v]\n        (letfn [(iter [x]\n                      (cons x (lazy-seq (iter (f x)))))]\n          (iter v)))","problem":62,"user":"4f75469ee4b0fbe0118ec55a"},{"problem":62,"code":"(fn my-iterate\n        ([x] '(x))\n        ([f x] (lazy-seq (cons x (my-iterate f (f x))))))","user":"58db362be4b0a4d5acaab675"},{"code":"(fn itrt [f start]\n  (lazy-seq\n    (cons start (itrt f (f start)))))","problem":62,"user":"4f951375e4b0dcca54ed6cc8"},{"code":"(fn iter [f x]\r\n          (lazy-seq\r\n            (cons x (iter f (f x)))))","problem":62,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn my-it[f x]\n  (lazy-seq \n   (cons x (my-it f (f x)))))","problem":62,"user":"5224a46ce4b01819a2de42e5"},{"problem":62,"code":"(fn [f x] (map #((apply comp (repeat % f)) x) (range)))","user":"54246d6de4b01498b1a71aec"},{"code":"(fn new-iterate [x y]\n    (if (number? y)\n      (lazy-seq (cons y (new-iterate x (x y))))))","problem":62,"user":"4e16bdef535d04ed9115e7e9"},{"problem":62,"code":"(fn my-iter [f initial]\n  (lazy-seq\n   (cons initial (my-iter f (f initial)))))","user":"5cb0f70ce4b026601754b8c1"},{"code":"(fn x [f v]\n  (lazy-seq\n    (cons v (x f (f v)))))","problem":62,"user":"4eccb190535d23f0362276fe"},{"problem":62,"code":"(fn f-iterate [f x] (lazy-seq (cons x (f-iterate f (f x)))))","user":"51319a53e4b06942423563c8"},{"problem":62,"code":"(fn itr [f a]\n  (lazy-seq (cons a (itr f (f a)))))","user":"53e76728e4b036ad0777e47c"},{"problem":62,"code":"(fn func [f init]\n  (cons init (lazy-seq (func f (f init)))))","user":"60654263e4b069485764ddc9"},{"problem":62,"code":"(fn __ [f init]\n  (cons init (lazy-seq (__ f (f init)))))","user":"56706f01e4b0a866af6896f2"},{"code":"(fn iterate' [f x] (cons x (lazy-seq (iterate' f (f x)))))","problem":62,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn myiterate [f arg]\r\n  (lazy-seq (cons arg (myiterate f (f arg)))))","problem":62,"user":"4e513ecf535dc968683fc4f6"},{"problem":62,"code":"(fn co [f x] (cons x (lazy-seq (co f (f x)))))","user":"55316b8ae4b076ab5578f825"},{"problem":62,"code":";; http://www.4clojure.com/problem/62\n(fn my-iterate\n  [fn-it fn-init]\n  (cons fn-init\n        (lazy-seq\n         (my-iterate fn-it (fn-it fn-init)))))","user":"5c92105ce4b048ec896c59f7"},{"problem":62,"code":"(fn iterator\n  [f v]\n  (lazy-seq \n    (cons v (iterator f (f v)))))","user":"56f4cedce4b046a417f92063"},{"problem":62,"code":"(fn [thing1 thing2]\n  (letfn [(my-itr [f input]\n            (let [first- (f input)]\n              (cons input (lazy-seq (my-itr f first-)))))]\n    (my-itr thing1 thing2)))","user":"54e79094e4b024c67c0cf818"},{"problem":62,"code":"(fn mit [op start] (lazy-seq (cons start (mit op (op start)) )))","user":"585bcd51e4b0f14aab7c8771"},{"problem":62,"code":"(fn iter2\n  [f v]\n  (lazy-seq (cons v (iter2 f (f v)))))","user":"5484c3b2e4b0e286459a11a2"},{"problem":62,"code":"(fn my-it [func base]\n  (lazy-seq\n    (cons base (my-it func (func base)))))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":62,"code":"(fn it [f e]\n  (lazy-seq (concat [e] (it f (f e)))))","user":"5dcc0ee9e4b02b31cc3da3c2"},{"code":"(fn [f x]\n  (reductions (fn [a b] (f a)) x (range)))","problem":62,"user":"5097b556e4b00ad8bab4e970"},{"code":"(fn myiter [f v] (lazy-seq (cons v (myiter f (f v)))))","problem":62,"user":"4f58fe71e4b0a7574ea7185f"},{"problem":62,"code":"(fn iter [f v]\n  (lazy-seq\n   (cons v\n     (iter f (f v)))))","user":"5881d1c2e4b0f1effa3b7644"},{"code":"(fn itr [f x]\n          (lazy-seq\n           (cons x (itr f (f x)))))","problem":62,"user":"52c4fe42e4b0c2d177d620e9"},{"code":"(fn [f x]\n  (letfn [(rec-iterate [ff xx]\n            (concat [xx (ff xx)] (lazy-seq (rec-iterate ff (ff (ff xx))))))]\n    (rec-iterate f x) ))","problem":62,"user":"4f343e60e4b0e243712b1eb5"},{"problem":62,"code":"(fn my-iter[f n]\n  (lazy-seq (cons n (my-iter f (f n)))))","user":"565b371fe4b068f2fe63dbff"},{"problem":62,"code":"(fn abc [f x]\n  (lazy-seq\n    (cons x (abc f (f x)))))","user":"559057c4e4b027778923766e"},{"problem":62,"code":"(fn my-foo2 [f n]\n  (cons n (\n           (fn my-lazy-flambda\n             ([f n] (cons (f n) (lazy-seq (my-lazy-flambda f (f n))))))\n           f n)))","user":"56d74c88e4b0ea9b8538f7d9"},{"problem":62,"code":"(fn itt [f x]\n           (cons x (lazy-seq\n                     (itt f (f x)))))","user":"56c70cc2e4b0ed865f9758b5"},{"code":"(fn a [f i]\n            (cons i (lazy-seq (a f (f i)))))","problem":62,"user":"51f40975e4b0fca5e8b4822e"},{"code":"(fn [f x] ((fn rfib [y] (lazy-seq (cons y (rfib (f y))))) x))","problem":62,"user":"4e89de60535d3e98b8023285"},{"problem":62,"code":"(fn func [f x] (lazy-seq (cons x (func f (f x)))))","user":"52f9ce6de4b047fd55836ff0"},{"problem":62,"code":"(fn my-iterate\n           [f x]\n           (cons x (lazy-seq (my-iterate f (f x)))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":62,"code":"(fn my-it [f i]\n  (lazy-seq \n    (cons i\n          (my-it f (f i)) )))","user":"5880e38fe4b0f1effa3b7625"},{"problem":62,"code":"(fn iterfake\n  [f x] (lazy-seq (cons x (iterfake f (f x)))))","user":"5e9b6471e4b0157ca96647f0"},{"code":"(fn itulate [f i] \n  (lazy-seq (cons i (itulate f (f i))))\n)","problem":62,"user":"4fabb1dce4b081705acca21a"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq (cons x (it f (f x))))\n  )","user":"5727031ee4b0c5bde472c12f"},{"code":"(fn MMz_iterate [f x] \r\n  (cons x (lazy-seq (MMz_iterate f (f x)))))","problem":62,"user":"4f17df72535d64f603146458"},{"code":"(fn iter [fun seed]\n  (lazy-seq (cons seed (iter fun (fun seed)))))","problem":62,"user":"52dd4fb4e4b09f7907dd13df"},{"code":"(fn re-implement-iterate [f i]\n  (lazy-seq \n   (cons i (re-implement-iterate f (f i)))))","problem":62,"user":"515bbcd9e4b0388ca8ca1521"},{"problem":62,"code":"; important background info: https://stackoverflow.com/questions/12389303/clojure-cons-vs-conj-with-lazy-seq\n(fn __ [f a]\n  (lazy-seq (cons a (__ f (f a)))))","user":"552d2e4fe4b076ab5578f7e1"},{"problem":62,"code":"(fn [f x]\n  (reductions (fn [acc x] (f acc)) x (range)))","user":"5097ea89e4b087ccf61a7af4"},{"code":"(fn mit [f n]\n  (cons n (lazy-seq (mit f (f n)))))","problem":62,"user":"4ef2eb4d535dced4c769f226"},{"problem":62,"code":"(fn my-iter\n  [a b]\n  (cons b (lazy-seq (my-iter a (a b))))\n  )","user":"57f81532e4b0d3187e900914"},{"code":"(fn it [f i]\n   (cons i (lazy-seq (it f (f i)))))","problem":62,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn myite [f x]\n  (cons x (lazy-seq (myite f (f x)))))","problem":62,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn [f initial]\n  (letfn [(iter [last-value]\n                (cons last-value (lazy-seq (iter (f last-value)))))]\n    (iter initial)))","problem":62,"user":"4fdbc075e4b05e33b9224f61"},{"code":"(fn fx [f x] (cons x (lazy-seq (fx f (f x)))))","problem":62,"user":"50d8739ae4b01f0871336e68"},{"code":"(fn foo [x y] (cons y (lazy-seq (foo x (x y)))))","problem":62,"user":"5078300de4b0fc74642bff66"},{"problem":62,"code":"(fn m [f x] (lazy-cat [x] (m f (f x))))","user":"59da6480e4b0ef0a1e9b5c68"},{"problem":62,"code":"(fn re-impl-iter [f a]\n  (lazy-seq\n    (cons a (re-impl-iter f (f a)))))","user":"565654dae4b0f9d632dd849f"},{"code":"(fn itr\n  [f ini]\n    (cons ini\n      (lazy-seq (itr f (f ini)))))","problem":62,"user":"504f57c7e4b0a02f9cffde71"},{"problem":62,"code":"(fn iter\n          [f n]\n          (concat [n] (lazy-seq (iter f (f n)))))","user":"5dcb1e73e4b02b31cc3da3b6"},{"code":"(fn [x y] ((fn itr [z] (cons z (lazy-seq (itr (x z))))) y))","problem":62,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":62,"code":"(fn foo [f v]\n  (cons v (lazy-seq (foo f (f v)))))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"#(reductions (fn [x _] (%1 x)) %2 (range))","problem":62,"user":"53315c78e4b019098a6f8b67"},{"problem":62,"code":"(fn f[x y](lazy-seq (cons y (f x (x y)))))","user":"58d1c1b1e4b03c36ff7e58ef"},{"code":"(fn myiter [f n]\n    (cons n (lazy-seq (myiter f (f n)))))","problem":62,"user":"52c8a8b9e4b0c2d177d62139"},{"code":"(fn iter [f init]\n  (cons init\n        (lazy-seq\n         (iter f (f init)))))","problem":62,"user":"511f88eee4b085952a83535f"},{"problem":62,"code":";(vec (take 3 (\n(fn iter [f s]\n  (lazy-seq\n   (cons s\n         (iter f (f s)))))\n;inc 1)))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":62,"code":"(fn foolazy [f val]\n  (cons val (lazy-seq (foolazy f (f val)))))","user":"56fc0601e4b07572ad1a88db"},{"problem":62,"code":";(fn [func init]\n;\t(map (fn [x]\n;\t\t(loop [acc init n x]\n;\t\t\t(if (zero? n)\n;\t\t\t\tacc\n;\t\t\t\t(recur (func acc) (dec n)))))\n;\t\t(range)))\n\n;(fn i [f x]\n;  (lazy-seq\n;   (cons x (i f (f x)))))\n\n#(reductions (fn [x _] (% x)) (repeat %2))","user":"5f6a583ae4b02876ed9fd046"},{"problem":62,"code":"(fn l [f arg]\n    (lazy-seq (cons arg (l f (f arg))))\n  )","user":"5681afaae4b0945ebc182a87"},{"problem":62,"code":"(fn it [f x]\n  (concat [x] (lazy-seq (it f (f x)))))","user":"5b22328ee4b03cfeda66ed5d"},{"code":"(fn my-iteration\n  [f current-value]\n  (cons current-value (lazy-seq (my-iteration f (f current-value)))))","problem":62,"user":"511720eae4b0063b4e3e16da"},{"code":"(fn its [f v] (cons v (lazy-seq (its f (f v)))))","problem":62,"user":"527ba695e4b03e8d9a4a7596"},{"problem":62,"code":"(fn solve [f, x]\n  (lazy-seq (cons x (solve f (f x))))\n)","user":"56f258d3e4b04a395b9a04a1"},{"problem":62,"code":"(fn my-iterate [f x]\n  (concat [x] (lazy-seq (my-iterate f (f x)))))","user":"53b05a36e4b047364c044481"},{"code":"#(letfn [(g [f x] (cons x (lazy-seq (g f (f x)))))] (g % %2))","problem":62,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":62,"code":"(fn iterate- [f init]\n  (cons init\n     (lazy-seq (iterate- f (f init)))))","user":"55058a4fe4b086ebe8a79c89"},{"problem":62,"code":"(fn lf [ f p] (cons p (lazy-seq (lf f (f p)))))","user":"56b1b59be4b0982f16b37df2"},{"code":"(fn foo [f i] \n  (cons \n   i \n   (lazy-seq \n    (foo f (f i)))))","problem":62,"user":"525bcae9e4b0cb4875a45d30"},{"code":"(fn __ [ f v ]\n  (lazy-seq (cons v (__ f (f v)))))","problem":62,"user":"4efa2b5c535dced4c769f26f"},{"problem":62,"code":"(fn it [f s]\n  (cons s (lazy-seq (it f (f s)))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":62,"code":"(fn [f x] \n  (letfn [(iterate* [f x]\n                   (cons x (lazy-seq (iterate* f (f x)))))]\n    (iterate* f x)))","user":"5dbe27c3e4b09f47823971c4"},{"problem":62,"code":"(fn foo [f a]\n  (lazy-seq (cons a  (foo  f (f a) )))\n  )","user":"5735ac67e4b0cd1946bd102b"},{"code":"(fn iter\n  [f v] (cons v (lazy-seq (iter f (f v))))\n)","problem":62,"user":"510a6bece4b06956752d35af"},{"problem":62,"code":"(fn my-iter [f x]\n    (lazy-seq\n     (cons x (my-iter f (f x)))))","user":"560e9a2de4b05f002753df52"},{"problem":62,"code":"(fn reiterate[f x] (cons x (lazy-seq (reiterate f (f x)))))","user":"54d22860e4b0e8a36923e5ef"},{"problem":62,"code":"(fn q [f i]\n  (lazy-seq\n    (cons i (q f (f i)))))","user":"577ab41fe4b0d3393e5deb05"},{"problem":62,"code":"(fn [f x]\n  (let [g (fn [acc n]\n            (if (zero? n)\n              acc\n              (recur (f acc) (dec n))))]\n    (map (partial g x) (range))))","user":"57fdd1cfe4b0d3187e9009bf"},{"code":"(fn iter [f x]\n    (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"50d46d53e4b09cc622d65a69"},{"problem":62,"code":"(fn ii [f init] (lazy-seq (cons init (ii f (f init)))))","user":"549375e4e4b0b312c081ff4e"},{"code":"(fn iter\n  [f x]\n  (cons x, (lazy-seq (iter f (f x)))))","problem":62,"user":"511b233ae4b07ab9ec456180"},{"problem":62,"code":"(fn myit [func x]\n   (lazy-seq (cons x (myit func (func x)))))","user":"588906a9e4b0f1effa3b772a"},{"code":"(fn a [f x] (cons x (lazy-seq (a f (f x)))))","problem":62,"user":"4e951ce5535dbda64a6f6b2e"},{"problem":62,"code":"(fn my-iter[f in]\n  (lazy-seq (cons in (my-iter f (f in)))))","user":"57bd960fe4b05aa3c4741c52"},{"problem":62,"code":"(fn lalala [f x] (cons x (lazy-seq (lalala f (f x)))))","user":"54c779bee4b045293a27f63b"},{"problem":62,"code":"(fn [func arg]\n  (letfn [(lazyf [f a]\n                 (cons a (lazy-seq (lazyf f (f a)))))]\n    (lazyf func arg)))","user":"53d977f1e4b0e771c302547a"},{"problem":62,"code":"(fn myiter [f v]\n   (cons v (lazy-seq (myiter f (f v)))\n                     )\n  \n  )","user":"5885e90de4b0f1effa3b76c5"},{"code":"(fn myiterate [f x]\n  (cons x (lazy-seq (myiterate f (f x))))\n  )","problem":62,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":62,"code":"(fn iter [f coll]\n  (cons coll\n    (lazy-seq\n      (iter f (f coll)))))","user":"595fe942e4b066ee0a44b075"},{"code":"(fn [f x]\n  (map\n   (fn [n]\n     (loop [n n f f x x]\n       (if (zero? n)\n         x\n         (recur (dec n) f (f x)))))\n   (range)\n   ))","problem":62,"user":"4ea365e2535d7eef308072c5"},{"problem":62,"code":"(fn y [f x]\n  (lazy-seq (cons x (y f (f x)) ))\n  )","user":"583667c7e4b089d5ab817cfb"},{"code":"(fn prob62 [f x]\n  (lazy-seq\n    (cons x (prob62 f (f x)))))","problem":62,"user":"4f03f3b7535dcb61093f6b85"},{"problem":62,"code":";(fn[x y]\n;  (loop[c 0 r [y]]\n;    (if ( < c 101)\n;      (recur(inc c)(conj r (x (bigint(last r)))))\n;      r\n;      )\n;    )\n;  )\n\n(fn a [f x]\n  (lazy-seq(cons x (a f (f x)) ))\n  )","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn my-iterate\n          [f x]\n        (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"4fb591aee4b081705acca2c0"},{"problem":62,"code":"(fn IT [f x]\n  (lazy-seq\n   (cons x (IT f (f x)))))","user":"579c8ad1e4b05b1deef9ae0c"},{"problem":62,"code":"(fn __\n  [f x]\n  (lazy-seq\n   (cons x (__ f (f x)))))","user":"510528a0e4b0730a5f55ad85"},{"code":"(fn iterate* [f x]\n  (cons x (lazy-seq (iterate* f (f x)))))","problem":62,"user":"4dc0ff08535d020aff1edf84"},{"problem":62,"code":"(fn [f x]\n  (letfn [(fsharp [p q] (f p))]\n  (map #(reduce fsharp x (range %)) (range))))","user":"5ec0db8be4b00a66d4a9528d"},{"problem":62,"code":"(fn f-iter [op init]\n  (lazy-seq \n   (cons init \n         (f-iter op (op init))\n         )\n   )\n  )","user":"56f974c0e4b07572ad1a88b1"},{"problem":62,"code":"(fn iter- [f init]\n  (cons init (lazy-seq f (iter- f (f init)))))","user":"54b42ea4e4b05787c3b1638b"},{"problem":62,"code":"(fn iter [f start]\n  (cons start (lazy-seq (iter f (f start))))\n)","user":"53beacf9e4b0d9a98559a6e3"},{"code":"(fn me [f x] (cons x (lazy-seq(me f (f x)))))","problem":62,"user":"5349ac2be4b084c2834f4a67"},{"problem":62,"code":"(fn my-iterate [next-fn start-value]\n  (letfn [(iterate* [current]\n            (lazy-seq (cons current (iterate* (next-fn current)))))]\n    (iterate* start-value)))","user":"53fd66a4e4b0de5c418485e3"},{"code":"(fn it [f x]\n  (lazy-seq\n   (cons x (it f (f x)))))","problem":62,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":62,"code":"(fn myiterate [f x]\n  (cons x\n        (lazy-seq (myiterate f (f x)))))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":62,"code":"(fn it-justin\n  [f in]\n  (lazy-seq\n   (cons in (it-justin f (f in)))))","user":"599342efe4b0b211ea3aaab0"},{"problem":62,"code":"(fn iterate' [f init] (lazy-seq (cons init (iterate' f (f init)))))","user":"5ce56455e4b0a17bb84e2b71"},{"problem":62,"code":"(fn mm [f x]\n  (cons x\n        (lazy-seq (mm f (f x)))))","user":"535f0cbde4b04ce2eb3ed2d9"},{"problem":62,"code":"(fn iter2 [f x]\n  \n  (lazy-seq (cons x (iter2 f (f x))))\n  )","user":"56f2611fe4b04a395b9a04a2"},{"problem":62,"code":"(fn foo [f x]\n      (lazy-seq(cons x (foo f (f x)))))","user":"5a533cc0e4b05d388ecb6c09"},{"code":"(fn my-iterate [f n]\n  (cons n (lazy-seq (my-iterate f (f n)))))","problem":62,"user":"4ef4c1ff535dced4c769f23e"},{"problem":62,"code":"(fn [f x]\n  (letfn [(f-your-x [x]\n                    (lazy-cat [x] (f-your-x (f x))))]\n    (f-your-x x)))","user":"554bd33ce4b0a04f7929959a"},{"code":"(fn [f s]\n  (let [i (fn j [p] (lazy-seq (cons p (j (f p)))))]  \n    (i s)))","problem":62,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":62,"code":"(fn iterate-lazy\n  [f x]\n    (lazy-seq (cons x (iterate-lazy f (f x)))))","user":"5a61bf79e4b0512ff01cd97b"},{"problem":62,"code":"(fn a [x y] (lazy-seq (cons y (a x (x y)))))","user":"56798d83e4b05957ce8c618b"},{"code":"(fn my-iterate [function, x]\n  (cons x (lazy-seq (my-iterate function (function x)))))","problem":62,"user":"528bba38e4b0239c8a67aea9"},{"problem":62,"code":"(fn it [f val]\n  (lazy-seq \n   (cons val (it f (f val)))))","user":"55d2dd27e4b0e31453f64a5b"},{"problem":62,"code":"(fn it [op seed]\n  (lazy-seq (cons\n             seed\n             (it\n              op\n              (op seed)))))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn it [f x] (cons x (lazy-seq (map f (it f x)))))","problem":62,"user":"52d660eae4b09f7907dd1356"},{"problem":62,"code":"(fn my-iterate \n  ([f arg] (cons arg (my-iterate f arg 0)))\n  ([f arg m] (lazy-seq \n              (cons ((fn apply-m [f arg m] \n                       (if (= 0 m) \n                         (f arg) \n                         (f (apply-m f arg (dec m)))))\n                     f arg m)\n                    (my-iterate f arg (inc m))))))","user":"5d7a748ce4b02e6b30c93547"},{"problem":62,"code":"(fn [f i]\n    (let [apply-f-n-times (fn [n x]\n                            (if (= 0 n)\n                              x\n                              (recur (dec n) (f x))))]\n      (map-indexed #(apply-f-n-times %1 %2) (repeat i))))","user":"559a9a3de4b066d22e731f45"},{"problem":62,"code":"(fn apply-infinite [f init]\n  (lazy-seq (cons init (apply-infinite f (f init))))\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn iterate_ [f x]\n  (lazy-seq (cons x (iterate_ f (f x)))))","problem":62,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn my-iter [f x]\n  (lazy-seq (cons x (my-iter f (f x)))))","problem":62,"user":"4f04d312535dcb61093f6be7"},{"problem":62,"code":"(fn it [f start]\n   (lazy-seq (cons start (it f (f start)))))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn mi [f x] (lazy-seq (cons x (mi f (f x)))))","problem":62,"user":"4fbfe9a4e4b081705acca31f"},{"problem":62,"code":"(fn -iterate [func val]\n    (lazy-seq (cons val (-iterate func (func val)))))","user":"58bbcbc8e4b0888cdc949d00"},{"problem":62,"code":"(fn g [f x] \n  (lazy-seq \n    (cons x (g f (f x)))))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn [f x0]\n  (letfn [(iter [x] (cons x (lazy-seq (iter (f x)))))]\n    (iter x0)))","problem":62,"user":"515ead6be4b049add99a053e"},{"problem":62,"code":"(fn bla [f i] (lazy-seq (cons i (bla f (f i) ))) )","user":"563a79e5e4b0bfe05bf117fe"},{"problem":62,"code":"(fn general-kenobi\n  [thing init]\n  (lazy-seq (cons init (general-kenobi thing (thing init)))))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn lit [f x] (cons x (lazy-seq (lit f (f x)))))","problem":62,"user":"4f47eab2e4b0d56e7bb92bc6"},{"code":"(fn x [f s] (lazy-seq (cons s (x f (f s)))))","problem":62,"user":"4ee528fb535d1385b2869d87"},{"problem":62,"code":"(fn iterate'\n  [f x]\n  (cons x (lazy-seq (iterate' f (f x)))))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":62,"code":"(fn my-iterate [fun start]\n  (lazy-seq (cons start (my-iterate fun (fun start)))))","user":"5d49ec5ee4b0776584bd6f1c"},{"problem":62,"code":"(fn myiterate [f iv]\n           (cons iv (lazy-seq (myiterate f (f iv)))))","user":"4fffa422e4b0678c553fc404"},{"code":"(fn s [a b]\n  (lazy-seq\n    (cons b (s a (a b)))\n  )\n)","problem":62,"user":"4e3456f9535deb9a81d77f2a"},{"problem":62,"code":"(fn iter [f n]\n\n\n               (cons n (lazy-seq (iter f (f n))))\n\n               )","user":"5a0a3473e4b0eab8c0448941"},{"problem":62,"code":"(fn xxx [f x]\n  (lazy-seq\n      (cons x (xxx f (f x)))\n    )\n  )","user":"539ec9f9e4b0ca733b974491"},{"code":"#(letfn [(ls [% %2] (lazy-seq (cons %2 (ls % (% %2)))))] (ls % %2))","problem":62,"user":"4e6a97a9535d8ccf87e9fef8"},{"problem":62,"code":"(fn my-lazy [f x]\n    (cons x (lazy-seq (my-lazy f (f x)))))","user":"567bf820e4b05957ce8c61ad"},{"problem":62,"code":"(fn itseq [f z] \n  (lazy-seq (cons z (itseq f (f z))))\n)","user":"5cc6b4bfe4b0ccb061962827"},{"problem":62,"code":"(fn x [f n]\n  (cons n (lazy-seq (x f (f n)))))","user":"5540fe42e4b0a04f7929950a"},{"problem":62,"code":"(fn iterate2 [f init]\n  (lazy-seq (cons init (iterate2 f (f init)))))","user":"51dafedee4b09f6bc204eee2"},{"problem":62,"code":"(fn my-iterate [f n] (lazy-seq (cons n (my-iterate f (f n)))))","user":"569951e4e4b0542e1f8d143e"},{"problem":62,"code":"(fn i [f x]\n   (lazy-seq\n    (cons x (i f (f x)))))","user":"5742ec91e4b05c31a32c0883"},{"problem":62,"code":"(fn foo [f  x]\n  (lazy-seq (cons x (foo f (f x))))\n)","user":"6038b6b4e4b0d5df2af222ef"},{"problem":62,"code":"(fn my_iter\n  [f n]\n  (cons n (lazy-seq(my_iter f (f n)))))","user":"56dc483fe4b0ea9b8538f81b"},{"problem":62,"code":"(fn my-iterate [f init]\n\t\t\t(lazy-seq (cons init (my-iterate f (f init))) )\n\t\t\t)","user":"54ff6084e4b07d26eda61d50"},{"code":"(fn my-iterate [fun i]\n    (cons i (lazy-seq (my-iterate fun (fun i)))))","problem":62,"user":"53487737e4b084c2834f4a59"},{"problem":62,"code":"(fn reIterate [function initialValue]\n    (lazy-seq (cons initialValue (reIterate function (function initialValue)))))","user":"56fe2a2fe4b08d47c97781ad"},{"code":"(fn iterate* [f x]\n  (lazy-cat [x] (iterate* f (f x))))","problem":62,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn itr [f v] (cons v (lazy-seq (itr f (f v)))))","problem":62,"user":"50366589e4b0fbe0a74d26c3"},{"problem":62,"code":"(fn my-fn [f i]\n  (cons i\n        (lazy-seq (my-fn f (f i)))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn fiter[f x] (lazy-seq (cons x (fiter f (f x)))))","problem":62,"user":"4f40f055e4b0e243712b1fc2"},{"code":"(fn iter [f x]\n  (cons x\n        (lazy-seq (iter f (f x)))))","problem":62,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn itr [f v]\n      (lazy-seq (cons v (itr f (f v)))))","problem":62,"user":"4eb8ec4a535dfed6da9c6d4b"},{"code":"(fn [f init]\n  (letfn [(next-item [f x]\n    (cons x (lazy-seq (next-item f (f x)))))]\n    (next-item f init)))","problem":62,"user":"50052fd0e4b0678c553fc45d"},{"problem":62,"code":"(fn iter\n  [func strt] (\n \t\t\tlazy-seq (cons strt (iter func (func strt)))))","user":"5fc5c303e4b02c825b0c8c1a"},{"problem":62,"code":"(fn foo [f x]\n           (cons x\n                 (lazy-seq\n                  (foo f (f x)))))","user":"5935b010e4b04f87174def55"},{"problem":62,"code":"(fn my_iterate\n\t\t\t([f init]\n\t\t\t\t(cons init (lazy-seq (my_iterate f (f init))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":62,"code":"(fn [f x]\n  (let [funcs (map #(repeat % f) (range))]\n    (map #((apply comp %) x) funcs)))","user":"5fea32f3e4b05ac5b16ea1aa"},{"problem":62,"code":"(fn my-iterate [f a]\n  (cons a (lazy-seq (my-iterate f (f a)))))","user":"546e4ab8e4b00cfc9eacc19c"},{"problem":62,"code":"(fn it\n  [f x]\n  (lazy-seq (cons x (it f (f x)))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":62,"code":"(fn mi [f x]\n  (lazy-seq (cons x (mi f (f x)))))","user":"539ddf25e4b0b51d73faaf3e"},{"code":"(fn iterate2 [fun n]\n    (cons n (lazy-seq (iterate2 fun (fun n)))))","problem":62,"user":"4ee77f15535d93acb0a66868"},{"problem":62,"code":"(fn my-it [f x]\n         (cons x (lazy-seq (my-it f (f x)))))","user":"55ba70f9e4b01b9910ae29d4"},{"problem":62,"code":"(fn my-iterate\n  [fun initial-value]\n  (lazy-seq (cons initial-value (my-iterate fun (fun initial-value)))))","user":"5c24671be4b07e362c2305a1"},{"code":"(fn make-iter [f x]\n   (lazy-seq (cons x (make-iter f (f x)))))","problem":62,"user":"4f748b54e4b044e54cd9a8fa"},{"problem":62,"code":"(fn %iterate [f x] (cons x (lazy-seq (%iterate f (f x)))))","user":"5bbbd484e4b0a20761a23617"},{"problem":62,"code":"(fn _ [f x] (lazy-seq (cons x (_ f (f x)))))","user":"53bd8d27e4b0d9a98559a6d6"},{"problem":62,"code":"(fn z [f v]\n  (lazy-seq (cons v (z f (f v)))))","user":"574b4f3ee4b02ea114799207"},{"problem":62,"code":"(fn fcall [f x] (lazy-seq (cons x (fcall f (f x)))))","user":"59089229e4b047aa04b1997c"},{"code":"(fn my-iterate [f x]\n  (cons x (lazy-seq (my-iterate f (f x))))\n  )","problem":62,"user":"529a73bde4b02ebb4ef75096"},{"code":"(fn iter \n  [f x] \n    (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4e9ff8d0535d7eef3080729c"},{"problem":62,"code":"(fn fi [f x]\n  (cons x (lazy-seq (fi f (f x)))))","user":"5576f299e4b05c286339e077"},{"code":"(fn t [f x]\n    (cons x (lazy-seq (t f (f x)))))","problem":62,"user":"531619c1e4b08068f379ed3d"},{"problem":62,"code":"(fn my-iterate [func n] (cons n (lazy-seq (my-iterate func (func n)))))","user":"54f6f00fe4b01ecee9d88814"},{"code":"(fn iterfun [f v]\n  (lazy-seq (cons v (iterfun f (f v)))))","problem":62,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":62,"code":"(fn func[f x]\n  (cons x (lazy-seq (func f (f x)))))","user":"54ce3790e4b057c6fda3a2ab"},{"code":"(fn iter [f v]\r\n  (cons v (lazy-seq (iter f (f v)))))","problem":62,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn fp [f x]\n  (cons x (lazy-seq (fp f (f x)))))","problem":62,"user":"4ef0eaef535dced4c769f211"},{"code":"(fn it [f x]\n  (cons x (lazy-seq (it f (f x))))\n  )","problem":62,"user":"52586d24e4b0cb4875a45cb0"},{"problem":62,"code":"(fn p\n  [f lst]\n  (cons lst (lazy-seq (p f (f lst)))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn p [f v] \r\n  (lazy-seq (cons v (p f (f v)))))","problem":62,"user":"4def301c535d08e6dec9fe12"},{"problem":62,"code":"(fn iteracionPro [f iniciador]\n    (lazy-seq\t\t\t\t\t\t\t;aqui sera otra numero :v ya aplicado la funcion :V\n     (cons iniciador (iteracionPro f (f iniciador)))))","user":"59e63a2ce4b08badc2a0c569"},{"problem":62,"code":"(fn it [f n]\n  (lazy-seq (cons n (it f (f n)))))","user":"501b1efee4b0b12d9c5f4d82"},{"problem":62,"code":"(fn iterate' [f start]\n  (lazy-seq (cons start (iterate' f (f start)))))","user":"5cc4b34de4b0ccb061962805"},{"code":"(fn __ [f n] (cons n (lazy-seq (__ f (f n)))))","problem":62,"user":"503f872ee4b00d1a725ff2ac"},{"code":"(fn rek [f x]\n  (let [nxt (f x)]\n    (lazy-seq (cons x (rek f nxt)))))","problem":62,"user":"4f2965ffe4b0d6649770a029"},{"problem":62,"code":"(fn i [f x]\n  (lazy-seq\n   (cons x (i f (f x)))))","user":"53bb512ce4b047364c044503"},{"code":"(fn [fin xin] \n  ((fn [f f1 x] (f f f1 x))\n    (fn [f f1 x] (cons x (lazy-seq (f f f1 (f1 x)))))\n    fin\n    xin))","problem":62,"user":"4fb1325de4b081705acca276"},{"problem":62,"code":"(fn iter2\n  [f x]\n  (lazy-seq (cons x\n                  (iter2 f (f x)))))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [func x]\r\n  (letfn [(prod [f y]\r\n            (lazy-seq (cons y (prod f (f y)))))]\r\n    (prod func x)))","problem":62,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":62,"code":"(fn iter [f x]\n\t(lazy-cat [x] (iter f (f x)))\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":62,"code":"(fn [f arg]\n  (for [i (range)]\n    (reduce (fn [crnt _i] (f crnt))\n            arg\n            (range i))))","user":"4f29d9abe4b0d6649770a034"},{"code":"(fn itr [func start]\n  (let [step (fn [f x] (cons x (itr f (f x))))]\n    (lazy-seq (step func start))))","problem":62,"user":"504d0116e4b022602c20b089"},{"code":"(fn a [f x]\n              (lazy-cat [x]\n                        (a f (f x))))","problem":62,"user":"4daef21cedd6309eace4d169"},{"problem":62,"code":"(fn myIter [f i] (lazy-seq (cons i (myIter f (f i)))))","user":"565233f2e4b0f9d632dd8461"},{"problem":62,"code":"(fn it [op el]\n  (cons el (lazy-seq (it op (op el)))))","user":"54f8b6f4e4b01ecee9d8882c"},{"problem":62,"code":"(fn sk-iterate [f x]\n  (lazy-seq (cons x (sk-iterate f (f x)))))","user":"5884f377e4b0f1effa3b76a8"},{"code":"(fn iter [f x]\n  (lazy-cat [x]\n    (iter f (f x))))","problem":62,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":62,"code":"(fn myiter [f x] (lazy-cat (cons x (myiter f (f x)))))","user":"573ce277e4b05c31a32c080b"},{"problem":62,"code":"(fn f [func arg]\n  (lazy-seq \n   (cons arg (f func (func arg)))\n))","user":"5a4443cae4b0447ef91cc60f"},{"problem":62,"code":"(fn x [f init]\n  (lazy-seq (cons init (x f (f init)))  )\n  \n  )","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn foo [f val]\n           (cons val\n                 (lazy-seq (foo f (f val)))))","problem":62,"user":"5256c4c1e4b0541d1855ba36"},{"code":"(fn iter [f x](cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"509c03f3e4b085ae113522a8"},{"problem":62,"code":"(fn increment [f n] \n    (lazy-seq (cons n (increment f (f n))))\n  )","user":"55d7312ee4b0e31453f64a9f"},{"problem":62,"code":"(fn itr [f x]\n\t(lazy-seq (concat [x] (itr f (f x))))\n\t)","user":"5545477fe4b0a04f79299531"},{"code":"(fn f [a b] (lazy-cat [b] (f a (a b))))","problem":62,"user":"51aeb1f4e4b09397d5109794"},{"problem":62,"code":"(fn eaterate [f x]\n  (cons x (lazy-seq (eaterate f (f x)))\n))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":62,"code":"(fn [f initial]\n  (letfn [(inner-iterate [f initial]\n            (let [result (f initial)]\n              (lazy-seq (cons initial (inner-iterate f result)))))]\n    (inner-iterate f initial)))","user":"55f5b8d6e4b06e875b46ce8d"},{"problem":62,"code":"(fn myiterate [fun x]\n  (cons x (lazy-seq (myiterate fun (fun x)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn self [f x] (lazy-seq (cons x (self f (f x)))))","problem":62,"user":"513d121fe4b0e544971636a2"},{"code":"(fn it [f init]\r\n  (lazy-seq (cons init (it f (f init)))))","problem":62,"user":"4dfd4ba8535d04ed9115e781"},{"code":"(fn i [f x]\n (lazy-seq\n   (cons x\n     (i f (f x))\n     )\n )\n)","problem":62,"user":"4e6dd0f5535d5021c1a895f3"},{"code":"#((fn fx1 [c] \n    (lazy-seq\n     (cons c (fx1 (% c)))))\n  %2)","problem":62,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":62,"code":"(fn inside-f [f x]\n    (lazy-seq (cons x (inside-f f (f x)))))\n\n;; (fn [f x]\n;;     (reductions #(%2 %1) x (repeat f)))\n\n;; (fn iter [fun initval]\n;;     (lazy-cat [initval] (iter fun (fun initval))))","user":"591ad160e4b09b4ee5954bdf"},{"code":"(fn it [f x]                                                                  \n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4ef0a39b535dced4c769f20c"},{"code":"(fn it [f n] \n  (cons n \n        \n    (lazy-seq (it f (f n)))))","problem":62,"user":"504e71cbe4b0f6ff3350c4b3"},{"code":"(fn ![f i](lazy-seq(->>(f i)(! f)(cons i))))","problem":62,"user":"530cb5b8e4b02e82168697e0"},{"problem":62,"code":"(fn itter[f x]\n  (lazy-seq (cons x (itter f (f x)))))","user":"5731e36be4b0cd1946bd0fc9"},{"problem":62,"code":"(fn my\n  ([func state] \n    (lazy-seq \n       (cons state \n         (my func (func state)))\n    )\n  )\n)","user":"54c94376e4b045293a27f665"},{"problem":62,"code":"(fn [f init]\n    (letfn [(myiterate\n              ([f init]\n                (cons init (lazy-seq (myiterate f (f init))))))]\n      (myiterate f init)))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn it [f init]\n  (cons init (lazy-seq (it f (f init)))))","problem":62,"user":"53908e6be4b0b51d73faae9a"},{"problem":62,"code":"(fn tut [f s] (lazy-seq(cons s (tut f (f s)))\n            ))","user":"5b85221ce4b047b03b2037c8"},{"code":"(fn it [f x0] (cons x0 (lazy-seq (it f (f x0)))))","problem":62,"user":"4ff769bce4b0678c553fc38f"},{"problem":62,"code":"(fn iter2 [f start] \n  (lazy-seq (cons start (iter2 f (f start)))))","user":"56fbf83de4b07572ad1a88da"},{"problem":62,"code":"(fn iter[f n] \n  (lazy-seq (cons n (iter f (f n)))))","user":"568e450fe4b0dcc4269f40d0"},{"problem":62,"code":"(fn f [func fe] (lazy-seq (cons fe (f func (func fe)))))","user":"56ab7578e4b03c432f18733d"},{"code":"#(reductions (comp %1 (fn [a _] a)) %2 (range))","problem":62,"user":"4e5411e8535d8a8b8723a279"},{"problem":62,"code":"(fn my-iterate [func n] \n  (lazy-seq (cons n (my-iterate func (func n)))))","user":"58182480e4b0c0e9c07b83a7"},{"code":"(fn ! [f i] (cons i (lazy-seq (! f (f i)))))","problem":62,"user":"4f85a75ce4b033992c121c48"},{"code":"(fn fuck [f x] (cons x (lazy-seq (fuck f (f x)))))","problem":62,"user":"535920b2e4b04ce2eb3ed294"},{"problem":62,"code":"(fn re [f x]\n  (cons x (lazy-seq (re f (f x)))))","user":"51f66891e4b06ff1c25c52c1"},{"problem":62,"code":"(fn it [f x]\n (cons x (lazy-seq (it f (f x)))))","user":"5594e0e3e4b0c79f6e1db95b"},{"code":"(fn t [f v]\r\n    (lazy-seq\r\n      (cons v\r\n            (t f (f v)))))","problem":62,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn it [f s]\r\n  (lazy-cat (list s) (it f (f s))))","problem":62,"user":"504e14c2e4b078edc5f593bf"},{"problem":62,"code":"(fn it_ [f x] (cons x (lazy-seq (it_ f (f x)))))","user":"5e5b8d92e4b0fd0acd158658"},{"code":"(fn iterate2 [f x]\n  (cons x\n          (lazy-seq\n            (iterate2 f\n              (f x)))))","problem":62,"user":"50e3ec87e4b0463d32072486"},{"problem":62,"code":"(fn myfun [f n]\n  (lazy-seq (cons n (myfun f (f n)))))","user":"6074df6fe4b069485764de4b"},{"problem":62,"code":"(fn lazy\n  [f i]\n  (cons i (lazy-seq (lazy f (f i)))))","user":"5f6adf5ee4b02876ed9fd049"},{"code":"(fn my-iterate [f x]\n  (cons x\n\t\t(lazy-seq\n    \t\t(my-iterate f (f x)))))","problem":62,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn i\n  [f x]\n  (lazy-cat [x] (i f (f x))))","problem":62,"user":"52f3af46e4b05e3f0be25f14"},{"problem":62,"code":"(fn test [f num]\n           (cons num (lazy-seq (test f (f num)))))","user":"5508102ee4b021ccfedb96b0"},{"code":"#(let [iter (fn iter[f x]\r\n  (cons x\r\n    (lazy-seq (iter f (f x)))))]\r\n  (iter % %2))","problem":62,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn myit [f x] \n  (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"50436470e4b034ff00315d23"},{"problem":62,"code":"(fn iter [f head]\n  (lazy-seq\n  \t(cons head\n          (iter f (f head)))))","user":"5b333626e4b025bcb146f32f"},{"code":"(fn [f x]\r\n  (let [f1 (fn [x frec]\r\n             (cons x\r\n                   (lazy-seq (frec (f x) frec))))]\r\n    (f1 x f1)))","problem":62,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn f [a b] (cons b (lazy-seq (f a (a b)))))","problem":62,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn my-it\n  [f x]\n  (cons x (lazy-seq (my-it f (f x)))))","problem":62,"user":"51f2a491e4b0210f90e74553"},{"problem":62,"code":"(fn step [f val]\n    (lazy-seq (cons val (step f (f val)))))","user":"5777cffae4b0979f89651651"},{"problem":62,"code":"(fn p62 [f n] \n  (cons n (lazy-seq (p62 f (f n)))))","user":"52c08c59e4b07a9af5792351"},{"code":"(fn my-iter [f x]\r\n  (lazy-seq\r\n    (cons x\r\n      (my-iter f (f x)))))","problem":62,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4e28120f535deb9a81d77efa"},{"problem":62,"code":"(fn myiter\n  [f x]\n  (cons x (lazy-seq (myiter f (f x)))))","user":"551ecb76e4b08d5046aa8a4c"},{"problem":62,"code":"(fn a [b n] (lazy-seq (cons n (a b (b n)))))","user":"589c0475e4b00487982d5351"},{"problem":62,"code":"(fn pengulangan [f x]\n  (cons x\n        (lazy-seq\n          (pengulangan f (f x)))))","user":"5ff70cfde4b06df49cee149c"},{"code":"(fn proc [f x]\n  (cons x (lazy-seq (proc f (f x)))))","problem":62,"user":"50ed5d1be4b06330c1f87c37"},{"problem":62,"code":"(fn my-iter [f i]\n  (cons i \n        (lazy-seq (my-iter f (f i))))\n  )","user":"60471241e4b02d28681c77c9"},{"code":"(fn doit [f x] (lazy-seq (cons x (doit f (f x)))))","problem":62,"user":"4e9b22e2535dbda64a6f6b74"},{"problem":62,"code":"(fn my-iterate [op n]\n  (lazy-seq\n   (cons n\n         (my-iterate op (op n)))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn i [f n]\n  (let [thisval n nextval (f n)]\n    (cons thisval (lazy-seq (i f nextval)))))","problem":62,"user":"4f9174d0e4b0dcca54ed6c9b"},{"problem":62,"code":"(fn new-iterate [f x]\n   (cons x (lazy-seq (new-iterate f (f x)))))","user":"5f84f110e4b0375e81f54e79"},{"code":"(fn [f n]\r\n  (letfn ((sub [f n]\r\n               (let [r (f n)]\r\n                 (lazy-seq\r\n                  `(~r ~@(sub f r))))))\r\n         (lazy-seq `(~n ~@(sub f n)))))","problem":62,"user":"4de2f44f535d08e6dec9fdec"},{"code":"(fn iter [f s]\r\n (cons s (lazy-seq (iter f (f s)))))","problem":62,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":62,"code":"(fn refn [fib x] (cons x\n                 (lazy-seq\n                  (refn fib (fib x)))\n                  )\n                 \n  )","user":"575d16f8e4b02ea114799377"},{"code":"(fn iter [f v]\n  (cons v (lazy-seq (iter f (f v)))))","problem":62,"user":"4e82c062535db62dc21a62cc"},{"problem":62,"code":"(fn q62 [f x]\n (cons x (lazy-seq (q62 f (f x)))))","user":"5cab0ad9e4b048ec896c5c46"},{"problem":62,"code":"(fn my-iterate [funct value]\n  (lazy-seq \n  \t(cons value (my-iterate funct (funct value)))))","user":"59dd387be4b0a0ac046f2502"},{"problem":62,"code":"(fn f [g i] (lazy-seq (cons i (f g (g i)))))","user":"551c66dae4b07993ea3788de"},{"problem":62,"code":"(fn j [f x] (lazy-seq (cons x (j f (f x)))))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":62,"code":"(fn implement-iterate [task x]\n  (lazy-seq (cons x (implement-iterate task (task x)))))","user":"596aaeefe4b069c0a1a19808"},{"problem":62,"code":"(fn it[f x](lazy-seq (cons x (it f (f x)))))","user":"60195030e4b0bf4ca6b10920"},{"code":"(fn iter [f initial]\n    (lazy-seq (cons initial (iter f (f initial)))))","problem":62,"user":"4f3d83b5e4b0e243712b1f69"},{"problem":62,"code":"(fn itr [f s]\n  (cons s \n        (lazy-seq (itr f (f s)))))","user":"4fbe2cfbe4b081705acca30c"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (cons x (my-iterate f (f x)))\n    )\n  )","problem":62,"user":"52cd1ed0e4b07d0d72b27377"},{"problem":62,"code":"(fn my-iterate [f s] (cons s (lazy-seq (my-iterate f (f s)))))","user":"555a5731e4b0deb715856e44"},{"problem":62,"code":"(fn iter [f x]\n            (cons x (lazy-seq (iter f (f x)))))","user":"53c349f5e4b00fb29b22127a"},{"code":"(fn my-ite [f x]\n  (cons x (lazy-seq (my-ite f (f x)))))","problem":62,"user":"4dd7d040535d2dad7130b5d6"},{"code":"(fn it\r\n  [f x]\r\n    (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"5050b107e4b063148f524126"},{"problem":62,"code":"(fn ffr ([f x] (cons x (ffr f x (list x)))) \n        ([f x res] (let [nres (cons (f (first res)) res)]\n                     (lazy-seq (cons (f (first res)) (ffr f x nres))))))","user":"59ff9424e4b01bb0ae8afd24"},{"problem":62,"code":"(fn my-iterate[f x]\n  (lazy-seq\n   (cons x (my-iterate f (f x)))))","user":"53ae0c50e4b047364c044471"},{"problem":62,"code":"(fn ff [f x]\n  (lazy-seq\n   (cons x\n         (ff f (f x)))))","user":"576e607ae4b0979f89651579"},{"code":"(fn foo [f x]\n    (cons x (lazy-seq (foo f (f x)))))","problem":62,"user":"537bde5de4b06839e8705e73"},{"code":"(fn _ [f x]\n  (cons x (lazy-seq (_ f (f x)))))","problem":62,"user":"4e71705e535d5021c1a89649"},{"problem":62,"code":"(fn iter [f init]\n  (cons init ((fn iter [f init]\n                (lazy-seq\n                  (let [res (f init)]\n                    (cons res (iter f res))))) f init)))","user":"5ff8ead1e4b06df49cee14ab"},{"code":"; I cheated\n(fn it [f x]\n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"538557aee4b06839e8705f02"},{"code":"(fn [f v]\n  (letfn [(iter [n]\n            (cons n (lazy-seq (iter (f n)))))]\n    (iter v)))","problem":62,"user":"4ec6297b535d6d7199dd36c4"},{"problem":62,"code":"(fn myiter [func a]\n  (lazy-seq \n   (cons a \n         (myiter func (func a))))\n  )","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn re-it [f x]\n  (cons x (lazy-seq (re-it f (f x)))))","problem":62,"user":"51a49b21e4b0def3c5c58694"},{"problem":62,"code":"(fn iter\n  [f i]\n  (lazy-seq (cons i (iter f (f i)))))","user":"581829cce4b0c0e9c07b83a9"},{"code":"(fn f[a b](cons b(lazy-seq(f a(a b)))))","problem":62,"user":"4db27319535df7e46ed9b6bd"},{"code":"(fn g [f x] (lazy-seq (cons x (g f (f x)))))","problem":62,"user":"4e1350af535d04ed9115e7d8"},{"problem":62,"code":"(fn iter [make-step value]\n  (cons value (lazy-seq (iter make-step (make-step value)))))","user":"53e30fcae4b036ad0777e3fc"},{"code":"(fn f [g a] (cons a (lazy-seq (f g (g a)))))","problem":62,"user":"52c00263e4b07a9af579233f"},{"problem":62,"code":"(fn [f x]\n  (let [fz (fn fz\n             ([]\n              (lazy-seq (cons x (fz x))))\n             ([i]\n              (let [n (f i)]\n                (lazy-seq (cons n (fz n))))))]\n    (fz)))","user":"5cbb0436e4b026601754b9cc"},{"problem":62,"code":"(fn this [f val] (cons val (lazy-seq (this f (f val)))))","user":"55d79b87e4b0e31453f64aa8"},{"code":"(fn my-it [f n]\r\n    (lazy-seq (cons n (my-it f (f n)))))","problem":62,"user":"4dd61f98535d2dad7130b5c6"},{"problem":62,"code":"(fn iter [f x]\n    (lazy-seq\n     (cons x (iter f (f x)))))","user":"51b91b08e4b0e871ca4958f8"},{"code":"(fn my-iterate [f x]\n           (lazy-seq (cons x (my-iterate f (f x)))))","problem":62,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn i [f a] (cons a (lazy-seq (i f (f a)))))","problem":62,"user":"4e43b0d9535dc968683fc4a3"},{"problem":62,"code":"(fn iter [f n]\n  (lazy-seq\n   (cons n (iter f (f n)))))","user":"5c6e1006e4b0fca0c1622744"},{"code":"(fn itr[f x]\n  (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4fb12b35e4b081705acca275"},{"problem":62,"code":"(fn iter [f init]\n  (cons init\n    (lazy-seq\n      (iter f (f init)))))","user":"609aa543e4b00e9e6653c40c"},{"problem":62,"code":"(fn my-iterate [f x]\n    (reductions #(%2 %1) x (repeat f)))","user":"5a91988ae4b002d099cae6f9"},{"problem":62,"code":"(fn [func init]\n  (letfn [(it-rate [f i]\n                   (lazy-seq (cons i (it-rate f (f i)))))]\n    (it-rate func init)))","user":"5f665d45e4b02876ed9fd02f"},{"code":"(fn self [f x]\n  (let [r (f x)]\n    (cons x (lazy-seq (self f r)))))","problem":62,"user":"524b90fae4b09eba1c0223df"},{"problem":62,"code":"(fn task62 ([x y] (cons y (lazy-seq (task62 x (x y))))))","user":"53d0d7a9e4b00fb29b22130c"},{"code":"(fn my-iterate [func x]\n  (cons x (lazy-seq (my-iterate func (func x)))))","problem":62,"user":"51cbaf14e4b08d8387cbedda"},{"code":"#(letfn [(myiter [f n]\r\n          (lazy-seq (cons n (myiter f (f n)))))]\r\n  (myiter % %2))","problem":62,"user":"4ddc56e1535d02782fcbea04"},{"problem":62,"code":"(fn [f x] (map (fn [n] (reduce #(%2 %1) x (repeat n f))) (range)))","user":"5c30d90de4b0d62ef62d9f22"},{"problem":62,"code":"(fn g [f x] (cons x (lazy-seq (g f (f x)))) )","user":"548cd813e4b0e286459a1211"},{"problem":62,"code":"(fn it [f a] \n  (cons a (lazy-seq (it f (f a))))\n )","user":"5ed70b97e4b016b56eae05e6"},{"code":"#(reductions (fn [y _] (%1 y)) (repeat %2))","problem":62,"user":"4e39d763535deb9a81d77f46"},{"code":"(fn f[ff v]\n  (cons v (lazy-seq (f ff (ff v)))))","problem":62,"user":"52196842e4b0890f2f822bfa"},{"problem":62,"code":"(fn my-lazy-seq [f x] (lazy-seq (concat [x] (my-lazy-seq f (f x)))))","user":"5df79c31e4b0a607a9a45c9b"},{"code":"(fn iter [f x]\n    (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":62,"code":"(fn fi [f x] \n  (cons x (lazy-seq (fi f (f x)))))","user":"575ddfd1e4b02ea11479938d"},{"code":"(fn i [f b] (cons b (lazy-seq (i f (f b)))))","problem":62,"user":"4e705861535d5021c1a89635"},{"code":"#(letfn [\n       (myit [f x]\n             (cons x (lazy-seq (myit f (f x)))))]\n             (myit %1 %2))","problem":62,"user":"4e6a5f5c535d8ccf87e9fed6"},{"problem":62,"code":"(fn my-iterate [f value]\n            (cons value (lazy-seq (my-iterate f (f value)))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn myit [f val] (cons val (lazy-seq (myit f (f val)))))","problem":62,"user":"5018ed15e4b011a2e0bf6412"},{"code":"(fn myiterate [func val] (cons val (lazy-seq (myiterate func (func val)))))","problem":62,"user":"51c214bce4b0d204dbe2ca1c"},{"code":"(fn g [f x] (cons x (lazy-seq (g f (f x)))))","problem":62,"user":"4e8516d0535db62dc21a62e8"},{"code":"(fn test62\n  [f x]\n  (lazy-seq\n   (let [fx (f x)]\n     (cons x (test62 f fx)))))","problem":62,"user":"50b0cffae4b009df37c708c5"},{"code":"(fn my-iterate [f s]\r\n   (cons s (lazy-seq (my-iterate f (f s)))))","problem":62,"user":"4f629697e4b0defedf855fd6"},{"problem":62,"code":"(fn this [f x]\n  (cons x (lazy-seq \n           (this f (f x)))))","user":"51e5a627e4b0efabf93c02db"},{"problem":62,"code":"(fn new-iter [f x] (lazy-seq (cons x (new-iter f (f x)))))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn a-fn [f x]\n  (cons x\n        (lazy-seq (a-fn f (f x)))))","problem":62,"user":"533018b2e4b019098a6f8b56"},{"code":"(fn generator [f x]\n  (lazy-seq (cons x (generator f (f x)))))","problem":62,"user":"4f4e4ecbe4b03ad3f0c10cbf"},{"code":"(fn myi [f x]\n    (cons x (lazy-seq (myi f (f x)))))","problem":62,"user":"4e5be681535d8a8b8723a2bc"},{"problem":62,"code":"(fn ll [f x]\n        (lazy-seq (cons x (ll f (f x)))))","user":"4e36e647535deb9a81d77f36"},{"problem":62,"code":"(fn laz [f v]\n  (lazy-seq (cons v (laz f (f v))))\n  )","user":"55f33f0ce4b06e875b46ce59"},{"problem":62,"code":"(fn my-iterate [f init]\n\t\t(cons init (lazy-seq (my-iterate f (f init)))))","user":"505fdf63e4b08f2a82ad10b9"},{"problem":62,"code":"(fn myiterate\n  ([f x] (lazy-seq (cons x (myiterate f x 1))))\n  ([f x count] (lazy-seq\n                (cons ((apply comp (repeat count f)) x)\n                      (myiterate f x (inc count))))))","user":"56372c3ce4b0bfe05bf117d1"},{"code":"(fn fonc [f n] (lazy-seq (cons n (fonc f (f n)))))","problem":62,"user":"4f69f34fe4b07046d9f4ef90"},{"code":"(fn [f i]\n  (reductions\n    (fn [acc n] (f acc))\n    (repeat i)\n  )\n)","problem":62,"user":"4ea57300535d7eef308072d5"},{"problem":62,"code":"(fn it\n          [f v]\n\n          (lazy-seq\n            (cons\n              v\n              (it f (f v))\n            )\n          )\n        )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"; interesting: (fn it[f init] (reductions (fn [res new] (f res)) init (repeat 1)))\n(fn it [f init] (lazy-seq (cons init (it f (f init)))))","problem":62,"user":"50de11b2e4b061dbdced7217"},{"problem":62,"code":"(fn f [g n] (cons n (lazy-seq (f g (g n)))))","user":"505106fee4b05ab4c7e07d38"},{"code":"(fn it [f x]\n  (lazy-cat [x]\n            (it f (f x))))","problem":62,"user":"52aa4a67e4b0c58976d9ac62"},{"code":"(fn m [f x]\n  (lazy-seq\n   (cons x (m f (f x)))))","problem":62,"user":"4e46ac46535dc968683fc4b5"},{"code":"(fn [f n]\n  ((fn make-seq\n     ([f n] (concat [n] (make-seq f n 1)))\n     ([f n a] (lazy-seq (cons (f n) (make-seq f (f n) a)))))\n   f n))","problem":62,"user":"521392bce4b0d32679a5065e"},{"problem":62,"code":"(fn myiterate [f init]\n  (cons init\n        (lazy-seq \n         \t(myiterate f (f init)))))","user":"54448e84e4b032a45b869393"},{"code":"#((fn f [n] (cons n (lazy-seq (f (% n))))) %2)","problem":62,"user":"53500869e4b084c2834f4ad3"},{"problem":62,"code":"(fn it\n  [fun x]\n  (lazy-seq (cons x (it fun (fun x)))))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn p [f x] (lazy-seq (cons x (p f (f x)))))","problem":62,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn my-thing [fun initial]\n   (cons initial (lazy-seq (my-thing fun (fun initial)))))","problem":62,"user":"4ede0511535d10e5ff6f5330"},{"problem":62,"code":"(fn iteration\n  [f num]\n  (cons num\n        (lazy-seq (iteration f (f num)))))","user":"5cd4e1b2e4b0ccb061962927"},{"problem":62,"code":"(fn myfun [f v]\n  (cons v (lazy-seq (myfun f (f v)))))","user":"558fec41e4b0277789237666"},{"problem":62,"code":"(fn iter [f x]\n  (cons x (lazy-seq(iter f (f x)) )))","user":"5e078ba7e4b0978307768fb6"},{"problem":62,"code":"(fn th [f v] (cons v (lazy-seq (th f (f v)))))","user":"5282f54be4b0239c8a67ada0"},{"code":"(fn iterate1 [f x]\n  (cons x (lazy-seq (iterate1 f (f x)))))","problem":62,"user":"51f82769e4b09be9c177e527"},{"problem":62,"code":"(fn i-iterate\n  [f x]\n  (lazy-seq (cons x (i-iterate f (f x)))))","user":"5586f418e4b059ccff29b1de"},{"problem":62,"code":"(fn my-iterate\n  ([fun val] \n   (cons val (lazy-seq (my-iterate fun (fun val)))))\n)","user":"574f1c24e4b02ea114799255"},{"code":"(fn its [f x] (cons x (lazy-seq (its f (f x)))))","problem":62,"user":"524f213be4b0541d1855b7ff"},{"problem":62,"code":"(fn it\n  ([f x] (lazy-seq (cons x (it f (f x))))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn iter2 [f a] (lazy-seq (cons a (iter2 f (f a)))))","problem":62,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn iter[f,x](cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn [f x]\n    (letfn[(a[f x] (lazy-seq (cons x (a f (f x)))))] (a f x)))","problem":62,"user":"4eca40cd535d6d7199dd3703"},{"problem":62,"code":"(fn my-repeat [f x]\n\t (lazy-seq (cons x (my-repeat f (f x)))))","user":"5c7bb8c0e4b0fca0c1622864"},{"problem":62,"code":"(fn r [f x] (lazy-cat [x] (r f (f x))))","user":"541096bde4b01498b1a719b2"},{"problem":62,"code":"(fn it [f x]\n    (cons x\n          (lazy-seq (it f (f x)))))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":62,"code":"(fn [g v] \n  (let [maker (fn [foo n]\n                (if (zero? n)\n                  identity\n                  (apply comp (repeat n foo))))]\n    (map #((maker g %) v) (range))))","user":"5054d243e4b0b1b9d1860eb5"},{"problem":62,"code":"(fn my-iterate [f s] (lazy-seq (cons s (my-iterate f (f s)))))","user":"57ccedaae4b0c746388ab88e"},{"problem":62,"code":"(fn reiterate\n      [f x]\n      (lazy-seq (cons x (reiterate f (f x)))))","user":"60c90322e4b0e0fa5f1b4302"},{"problem":62,"code":"(fn iter [f value]\n  (lazy-seq (cons value (iter f (f value) ))))","user":"5e860270e4b09a7a73c8bbdb"},{"problem":62,"code":"(fn x [f v] (cons v (lazy-seq (x f (f v)))))","user":"5661b0a9e4b068f2fe63dc6f"},{"code":"(fn [f init]\n  (reductions (fn [x y] (f x)) init (repeat init)))","problem":62,"user":"4e89ff3d535d3e98b802328a"},{"code":"(fn f [sf x]\n  (cons x (lazy-seq (f sf (sf x)))))","problem":62,"user":"4e77c1db535d324fb2983d72"},{"problem":62,"code":"(fn it \n  [f init]\n  (lazy-seq (cons init (it f (f init))))\n)","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":62,"code":"(fn do-iterate [f x]\n  \n        (lazy-seq (cons x\n          (do-iterate f (f x)))))","user":"57ee46c7e4b0bfb2137f5bb3"},{"code":"(fn itr [f x]\n    (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4daf8f84edd6309eace4d17a"},{"problem":62,"code":"(fn this [f start]\n    (cons start\n          (lazy-seq (this f (f start)))))","user":"55101237e4b06e50f9beb181"},{"problem":62,"code":"(fn my-iterate [f x]\n  (reductions (fn [acc _] (f acc)) x (range)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":62,"code":"(fn r [f init] (lazy-seq (cons init (r f (f init)))))","user":"580e7761e4b0849f6811b753"},{"code":"(fn iterate2 [f x]\n  (cons x (lazy-seq (iterate2 f (f x)))))","problem":62,"user":"4ed60c9c535d10e5ff6f52dd"},{"code":"(fn iterate' [f x]\n  (lazy-seq (cons x (iterate' f (f x)))))","problem":62,"user":"51a9dbc9e4b04e3dc0c27b1e"},{"problem":62,"code":";(fn iter [f x]\n;  (lazy-cat [x (f x)]\n;            (map f (rest (iter f x)))))\n\n(fn iter [f x]\n  (cons x\n        (lazy-seq (iter f (f x)))))","user":"57dd47f4e4b0bd073c20243e"},{"problem":62,"code":"(fn iter' [f i]\n  (lazy-seq (cons i (iter' f (f i)))))","user":"57d0e185e4b0bd073c202360"},{"problem":62,"code":"(fn my-iteratre [f val]\n  (cons val (lazy-seq (my-iteratre f (f val)))))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":62,"code":"(fn iter [ f v ]\n  (lazy-seq \n  \t(cons v ( iter f (f v)))))","user":"556880dae4b0c656e3ff1856"},{"problem":62,"code":"(fn fun [f x](lazy-seq (cons x (fun f (f x)))))","user":"5f8fe45ae4b0715f5002d78d"},{"problem":62,"code":"; Not as good\n;(fn [f v]\n;  (reductions (fn [acc _] (f acc)) v (repeat nil)))\n\n(fn my-iterate-good [f v]\n  (cons v (lazy-seq (my-iterate-good f (f v)))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":62,"code":"(fn iterate' [f val]\n  (cons val (lazy-seq (iterate' f (f val)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":62,"code":"(fn sixtyone\n  [f x]\n  (cons x (lazy-seq (sixtyone f (f x))))\n  )","user":"5ab5f60be4b073f177442643"},{"problem":62,"code":"(fn i [f i0]\n  (lazy-seq \n    (cons i0 (i f (f i0)))))","user":"5cdfe2aee4b0a17bb84e2b04"},{"code":"(fn iter [f x]\n  (lazy-cat [x] (iter f (f x))))","problem":62,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"; f - function\n; d - default value\n(fn abc [f d] \n  (cons\n    d\n    (lazy-seq (abc f (f d)))\n  )\n)","problem":62,"user":"52f1bc81e4b05e3f0be25eef"},{"code":"(fn itr \r\n  [f x]\r\n  (cons x\r\n        (lazy-seq (itr f (f x)))))","problem":62,"user":"4db6ce85535d1e037afb217f"},{"problem":62,"code":"(fn self[f x] (lazy-seq (cons x (self f (f x)))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":62,"code":"(fn sixty-two [f x]\n  (lazy-seq\n    (cons x (sixty-two f (f x)))))","user":"5d46fbc6e4b07c84aa5ae6af"},{"problem":62,"code":"(fn my-iterate [f n]\n (lazy-seq\n  (cons n (my-iterate f (f n)))))","user":"5564c113e4b0c656e3ff180d"},{"problem":62,"code":"(fn a [f v] (cons v (lazy-seq (a f (f v)))))","user":"5367bc60e4b0243289761e81"},{"problem":62,"code":"(fn fxn [f x]\n  (cons x (lazy-seq (fxn f (f x)))))","user":"55d35a01e4b0e31453f64a63"},{"code":"(fn itr [f s] \n  (cons s (lazy-seq (itr f (f s)))))","problem":62,"user":"515896f2e4b059418b97f0a8"},{"code":"(fn it [f i]\n  (cons i (lazy-seq (it f (f i)))))","problem":62,"user":"4e860e85535db62dc21a62f1"},{"problem":62,"code":"(fn p [fun b]\n  (lazy-seq (cons b (p fun (fun b)))))","user":"56fc1bc7e4b07572ad1a88dd"},{"code":"(fn my_it [f x] (cons x (lazy-seq (my_it f (f x)))))","problem":62,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn a [f x] (lazy-cat [x] (a f (f x))))","problem":62,"user":"4e307313535deb9a81d77f14"},{"code":"(fn my-iterate [f initial]\n  (lazy-seq (cons initial\n                  (my-iterate f (f initial)))))","problem":62,"user":"5271605ae4b03e8d9a4a73ed"},{"problem":62,"code":"(fn foo [f init]\n  (cons init \n        (lazy-seq\n         (foo f (f init)))))","user":"507eed82e4b06ce648bcdbfe"},{"problem":62,"code":"(fn inter [f x] (lazy-seq (cons x (inter f (f x)))))","user":"5cdd934ce4b05ee0cb311761"},{"problem":62,"code":"(fn re-iterate [f init]\n  (cons init\n        (lazy-seq\n          (re-iterate f (f init)))))","user":"542c026ae4b0dad94371f29a"},{"code":"(fn it [fun v] (lazy-seq (cons v (it fun (fun v)))))","problem":62,"user":"52b42d7ee4b0c58976d9ad19"},{"code":"(fn [f x] (reductions (fn [a b] (f a)) x (range)))","problem":62,"user":"51307b84e4b08c712d3fae39"},{"code":"(fn it [f n] (cons n (lazy-seq (it f (first (map f (list n)))))))","problem":62,"user":"509fe759e4b08df8156e9e43"},{"problem":62,"code":"(fn jp-iter [f x] (lazy-seq (cons x (jp-iter f (f x)))))","user":"5711b532e4b09c608db70449"},{"problem":62,"code":"(fn iterate* [f start]\n  (cons start (lazy-seq (iterate* f (f start)))))","user":"540e17c3e4b0addc1aec6719"},{"problem":62,"code":"(fn x([f i] (cons i (lazy-seq (x f (f i))))))","user":"559972d1e4b031d6649c9bab"},{"problem":62,"code":"(fn iter [op n]\n  (lazy-seq \n  \t(cons n (iter op (op n)))))","user":"59dd38a8e4b0a0ac046f2503"},{"code":"(fn [f x]\n  (reductions (fn [a _] (f a))\n              x\n             (range)))","problem":62,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq (cons x (map f (iter f x)))) \n)","user":"60335b35e4b0d5df2af222bf"},{"problem":62,"code":"(fn g [f s]\n  (cons s (lazy-seq (g f (f s)))))","user":"55e732c5e4b050e68259b492"},{"problem":62,"code":"(fn z [f x]\n    (lazy-seq \n      (cons x (z f (f x)))\n      )\n    )","user":"5763818ae4b0994c1922fbc7"},{"problem":62,"code":"(fn iterator [f x](lazy-seq (cons x (iterator f (f x)))))","user":"54ce541de4b057c6fda3a2ac"},{"code":"(fn my-iterate [f n]\n    (cons n \n          (lazy-seq \n           (my-iterate f (f n)))))","problem":62,"user":"538c3424e4b0b51d73faae58"},{"problem":62,"code":"(fn it\n  [a b]\n  (cons b (lazy-seq (it a (a b)))))","user":"57acee37e4b0b8559636fc94"},{"problem":62,"code":"(fn z [f start] \n  (cons start (lazy-seq (z f (f start)))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":62,"code":"(fn shit[op v]\n     (let [ret (op v)]\n       (lazy-seq (cons v (lazy-seq (shit op ret))))))","user":"54d05a9de4b0e8a36923e5c7"},{"problem":62,"code":"(fn iter8\n  [func init]\n  (lazy-seq (cons init (iter8 func (func init)))))","user":"561fc0d0e4b064ca9f4b16d2"},{"code":"(fn myit [v a]\n           (lazy-seq (cons a (myit v (v a)))))","problem":62,"user":"4fcad14ce4b0ee37620e1856"},{"problem":62,"code":"(fn i [f s] (concat [s] (lazy-seq (i f (f s)) )))","user":"53d5d24de4b0e771c302544a"},{"problem":62,"code":"(fn s [a b] (cons b (lazy-seq (s a (a b)))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn it [f init]\r\n               (lazy-seq (cons init (it f (f init)))))","problem":62,"user":"4deb529a535d08e6dec9fe04"},{"code":"(fn new-iterate [f x]\n  (lazy-seq\n    (cons x (new-iterate f (f x)))))","problem":62,"user":"4ddb339c535d02782fcbe9f9"},{"code":"(fn iter[func at] \n  (lazy-seq \n   (cons at (iter func (func at)))))","problem":62,"user":"52ab61f5e4b0c58976d9ac75"},{"code":"(fn f [func x]\n  (lazy-seq\n   (cons x (f func (func x)))))","problem":62,"user":"52b0323ee4b0c58976d9acc6"},{"code":"#( (fn l[x] (lazy-seq (cons x (l (% x))))) %2)","problem":62,"user":"4f1d1d95535d64f603146488"},{"code":"(fn iter [f n] (lazy-seq (cons n  (iter f (f n)))))","problem":62,"user":"52c00e4fe4b07a9af5792342"},{"code":"(fn i \n  [f h] \n  (lazy-seq \n   (cons h (i f (f h)))))","problem":62,"user":"4fbacdbae4b081705acca2e5"},{"problem":62,"code":"(fn iterate- [f init]\n  (cons init\n        (lazy-seq\n          (iterate- f (f init)))))","user":"606d75f5e4b069485764de13"},{"code":"(fn my-iterate [f x]\n  (cons x\n    (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"52fc34cee4b047fd55837015"},{"problem":62,"code":"(fn do-iterate [f x]\n  (cons x\n        (lazy-seq\n          (do-iterate f (f x)))))","user":"553c136ae4b09218d5f45012"},{"code":"(fn this [f x]\r\n  (lazy-seq\r\n    (cons x (this f (f x)))))","problem":62,"user":"4de760a3535d08e6dec9fdf9"},{"problem":62,"code":"(fn iter [f i]\n    (lazy-seq(cons i (iter f (f i)))))","user":"5f74de11e4b02876ed9fd0a5"},{"code":"(fn ita [f n] (cons n (lazy-seq(ita f (f n)))))","problem":62,"user":"4dee4a9c535d08e6dec9fe11"},{"code":"(fn iter [fun arg] \n  (cons arg (lazy-seq (iter fun (fun arg) ))) \n  )","problem":62,"user":"4edf95a8535d10e5ff6f5342"},{"problem":62,"code":"(fn my-iterate [f i]\n  (cons i (lazy-seq (my-iterate f (f i)))))","user":"4ecb1641535d6d7199dd370e"},{"problem":62,"code":"(fn thing [func start]\n  (lazy-seq (cons start (thing func (func start)))))","user":"5c1d9f05e4b0efcb0b05b24c"},{"code":"(fn b [f n] (lazy-seq (cons n  (b f (f n)))))","problem":62,"user":"4fe97adde4b0547ebccb245e"},{"problem":62,"code":"(fn iterate' [f i]\n    (lazy-seq (cons i (iterate' f (f i)))))","user":"56967bc0e4b0dcc4269f4131"},{"problem":62,"code":"(fn f [fun x]\n  (lazy-seq (cons x (f fun (fun x)))))","user":"55e3e7a8e4b050e68259b44a"},{"code":"(fn it\n  [f x] (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"5082ccb3e4b06a522e8c7af3"},{"code":"(fn my-iterate [f ini]\n  (lazy-seq (cons ini (my-iterate f (f ini)))))","problem":62,"user":"4e521cef535d302ef430da6d"},{"problem":62,"code":"(fn du [f x]     \n  (lazy-seq (cons x (du f (f x)))))","user":"5a7f77fae4b00b71e582a041"},{"code":"(fn iter [f init]\n\t(cons init (lazy-seq (iter f (f init)))))","problem":62,"user":"51ba4482e4b0fe3ecfb4642b"},{"code":"(fn itty [f i]\n  (cons i (lazy-seq (itty f (f i)))))","problem":62,"user":"4ec53f8c535d6d7199dd368b"},{"code":"; not really infinite, not lazy\n\n(fn [f x]\n  (loop [i 0 result (list x)]\n    (let [arraylim (if (= x 1) 10 101)]\n      \n    (if (> i arraylim)\n      result\n      (recur (inc i) (concat result (list (f (last result)))))))))","problem":62,"user":"51e0198ee4b01188f0627539"},{"code":"(fn iter[op n] (let [result (op n)] (lazy-seq (cons  n  (iter op result)))))","problem":62,"user":"51f4d46ee4b0fca5e8b48243"},{"problem":62,"code":"(fn nest [fun start]\n  (cons start (lazy-seq (nest fun (fun start)))))","user":"53fc88e7e4b0de5c418485be"},{"problem":62,"code":"(fn hell [f x] (lazy-seq (cons x (hell f (f x)))))","user":"531a0709e4b08068f379ed87"},{"problem":62,"code":"(fn r[f x] \n  (cons x (lazy-seq (r f (f x))))\n)","user":"543bb568e4b032a45b869334"},{"problem":62,"code":"(fn itr [f x] \n  (lazy-seq\n    (cons x (itr f (f x)))))","user":"574a71b7e4b02ea1147991fb"},{"problem":62,"code":"(fn fus [f v0] (cons v0 (lazy-seq (fus f (f v0)))))","user":"53347274e4b0656e627bfd6b"},{"problem":62,"code":"(fn foo\n  [f n]\n  (cons n (lazy-seq (foo f (f n))))\n  )","user":"5d270111e4b092dab7f59c62"},{"problem":62,"code":"(fn my-it [f a]\n  (cons a (lazy-seq (my-it f (f a)))))","user":"546176e7e4b01be26fd746a2"},{"code":"(fn foo [f x] \n  (cons x (lazy-seq (foo f (f x)))))","problem":62,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn itr [f i]\n  (lazy-seq\n    (cons i (itr f (f i)))))","problem":62,"user":"503a234de4b088a6a14ca76d"},{"problem":62,"code":"(fn my-iterate [f initial]\n  (lazy-seq (cons initial (my-iterate f (f initial))))\n  )","user":"5aada061e4b073f17744257a"},{"problem":62,"code":"(fn [f x]\n  (reductions #(f (+ %1 %2)) (conj (repeat 0) x)))","user":"572a856be4b0f4d77e65123b"},{"problem":62,"code":"(fn it [f v]\n  (lazy-seq\n   (cons v (it f (f v)))))","user":"542c22bde4b0dad94371f29e"},{"problem":62,"code":"(fn iter [f init] \n  (cons init \n       \t(lazy-seq (iter f (f init)))))","user":"540904a7e4b0addc1aec66d2"},{"problem":62,"code":"(fn my-iterate [f s]\n  (cons s (lazy-seq (my-iterate f (f s)))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":62,"code":"(fn itrt [f v] (lazy-cat [v] (itrt f (f v))))","user":"53710c09e4b0fc7073fd6ea5"},{"problem":62,"code":"(fn [f initial]\n  (let [aux (fn func [a b] (cons a (lazy-seq (func b (f b)))))]\n    (aux initial (f initial))))","user":"536102efe4b0243289761e3e"},{"code":"(fn itr2 [f v]\n  (cons v (lazy-seq (itr2 f (f v)))))","problem":62,"user":"4fc93728e4b0ee37620e1844"},{"code":"(fn it [f v] (lazy-seq (cons v (it f (f v)))))","problem":62,"user":"4f97d8f3e4b0dcca54ed6ced"},{"code":"(fn it [f a] (lazy-cat [a] (it f (f a))))","problem":62,"user":"5300f68de4b0d8b024fd3714"},{"problem":62,"code":"(fn lz [f x]\n    (lazy-seq (cons x (lz f (f x)))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn k-iterate [f x]\n  (cons x (lazy-seq (k-iterate f (f x)))))","problem":62,"user":"4db58ccb535d87e67b28fe10"},{"code":"(fn iterate- [number initial]\n  (cons initial\n    (lazy-seq\n      (iterate- number (number initial)))))","problem":62,"user":"50ee145de4b06330c1f87c53"},{"code":"(fn iterate1 [f x] (cons x (lazy-seq (iterate1 f (f x)))))","problem":62,"user":"532347dde4b09d4e7a9b54cc"},{"problem":62,"code":"(fn iter [f arg]\n  (lazy-seq (cons arg (iter f (f arg)))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn generator [f x] (lazy-seq (cons x (generator f (f x)))))","problem":62,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":62,"code":"(fn my-iterate [f init]\n  (cons init \n        (lazy-seq \n         (my-iterate f (f init)))))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn z [f v] (cons v (lazy-seq (z f (f v)))))","problem":62,"user":"4ff78679e4b0678c553fc392"},{"code":"(fn my-fx [f, x] \n  (lazy-seq (cons x (my-fx f (f x)))))","problem":62,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn iter [f x]\n           (lazy-seq\n            (cons x (iter f (f x)))))","problem":62,"user":"506ef8c3e4b09350ab4199f4"},{"problem":62,"code":"(fn itr\n  ([f x] (lazy-seq (cons x (itr f (f x))))))","user":"58ca613de4b021aa9917edb7"},{"code":"(fn it [f i] (lazy-seq (cons i (it f (f i)))))","problem":62,"user":"50cf21dee4b0e61f11ddcd8b"},{"problem":62,"code":"#(letfn [(iter [f x] (cons x (lazy-seq (iter f (f x)))))]\n   (iter % %2))","user":"51b8d3d5e4b050a1176cd69d"},{"code":"(fn lz [f i]\n  (cons i  (lazy-seq (lz f (f i)))))","problem":62,"user":"4e773be8535d324fb2983d6e"},{"problem":62,"code":"(fn itrt [f x] \n  (cons x (lazy-seq (itrt f (f x)))))","user":"5a99b688e4b0d174b936c7a6"},{"code":"(fn my-iterate ([f n] (lazy-seq (cons n (my-iterate f (f n))))))","problem":62,"user":"4ea11921535d7eef308072af"},{"code":"(fn iterate-62 [f x]\n  (cons x (lazy-seq (iterate-62 f (f x)))))","problem":62,"user":"501b1a8ee4b0b12d9c5f4d81"},{"problem":62,"code":"(fn my-iterate [f i]\n  (cons i (lazy-seq (my-iterate  f (f i)))))","user":"52eaba10e4b09f7907dd14c2"},{"problem":62,"code":"(fn iter- [f init]\n  (cons init\n        (lazy-seq\n         (iter- f (f init)))))","user":"6088395de4b0ae75613dcee2"},{"code":"(fn f [g x]\n  (lazy-seq (cons x\n                  (f g (g x)))))","problem":62,"user":"536e0930e4b0fc7073fd6e66"},{"problem":62,"code":";(fn [f x] (map (fn [n] (reduce (fn [s i] (f s)) x (range n))) (range)))\n\n (fn [f d] \n   ((fn itr \n      ([] (itr d)) \n      ([x] (lazy-seq (cons x (itr (f x)))))\n   ))\n )","user":"5d9e7971e4b000c986472bc1"},{"problem":62,"code":"(fn my-iterate [func initial-value]\n  (cons initial-value (lazy-seq (my-iterate func (func initial-value)))))","user":"60b8b0f8e4b0e0fa5f1b425c"},{"problem":62,"code":"(fn f81 [f x] (cons x (lazy-seq (f81 f (f x)))))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":62,"code":"(fn it [f n]\n  (lazy-cat [n (f n)] (map f (rest (it f n)))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn g [f v] (lazy-seq (cons v (g f (f v)))))","problem":62,"user":"4e6b3fc8535d8ccf87e9ff0f"},{"problem":62,"code":"(fn citr [f x]\n           (lazy-seq (cons x (citr f (f x)))))","user":"5e7b1ef4e4b085ba37836e10"},{"code":"(fn iter [f v] (lazy-seq (cons v (iter f (f v)))))","problem":62,"user":"4f3ec266e4b0e243712b1f8c"},{"code":"(fn solution [f x]\n  (lazy-seq (cons x (solution f (f x))))\n)","problem":62,"user":"52b49aebe4b0c58976d9ad2b"},{"problem":62,"code":"(fn prob-62 [f x] \n   (lazy-seq\n      (cons x (prob-62 f (f x)))))","user":"5bfc9037e4b0bdcf453d15f2"},{"code":"(fn reiter [f x]\n  (cons x (lazy-seq (reiter f (f x)))))","problem":62,"user":"51d96ad0e4b02ceefd94774f"},{"problem":62,"code":"(fn itx [f x] (lazy-seq (cons x (map f (itx f x)))))","user":"515cf9b5e4b00901442db1d4"},{"code":"(fn it\n  [f in]\n  (lazy-seq\n   (cons in (it f (f in)))))","problem":62,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn iter [f seed] (lazy-seq (cons seed (iter f (f seed)))))","problem":62,"user":"4db883e1535d1e037afb2198"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n   (cons x (my-iterate f (f x)))))","problem":62,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":62,"code":"(fn my-iterate [f init] \n  (letfn [(iter [f lv] \n                (let [nv (f lv)] \n                  (cons nv (lazy-seq (iter f nv)))))]\n    (cons init (iter f init))))","user":"53f35c34e4b0742d9025b0f4"},{"problem":62,"code":"(fn my-iter \n  [f start]\n  (cons start (lazy-seq (my-iter f (f start)))))","user":"5d247902e4b02ea6f0fb6a24"},{"code":"(fn problem-62 [f init-val]\n  (lazy-seq\n    (let [result (f init-val)]\n      (cons init-val (problem-62 f result)))))","problem":62,"user":"4f31519ae4b0d6649770a086"},{"problem":62,"code":"#(letfn [(f3 [%1 %2] (cons %2 (lazy-seq (f3 %1 (%1 %2)))))]\n         (f3 %1 %2))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn f [x y] (lazy-seq (cons y \n                        (f x (x y)))))","problem":62,"user":"4e50e2a0535dc968683fc4ef"},{"problem":62,"code":"(fn iter [f x0]\n  (cons x0 (lazy-seq (iter f (f x0)))))","user":"53e3e353e4b036ad0777e406"},{"problem":62,"code":"(fn iter [f inVal] \n (cons inVal (\n   lazy-seq (iter f (f inVal ) \n))))","user":"55034bf0e4b086ebe8a79c6d"},{"code":"(fn iter [f x]\r\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4e123905535d04ed9115e7ce"},{"code":"(fn cc [f x]\n  (lazy-seq\n    (cons x (cc f (f x)))))","problem":62,"user":"4f418eaee4b0d7d3c9f3fce9"},{"problem":62,"code":"(fn it[f i] (cons i (lazy-seq (it f (f i)))))","user":"5602ab92e4b04bb52996e1a3"},{"code":"(fn myiter [f s] (cons s (lazy-seq (myiter f (f s)))))","problem":62,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn iter [f x] \n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4e80e0f2535db62dc21a62b8"},{"problem":62,"code":"(fn iter [f x] \n  (cons x (lazy-seq (iter #(f %) (f x)))))","user":"55d06bcbe4b0e31453f64a3a"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (cons x\n        (lazy-seq\n         (my-iterate f (f x)))))","user":"5ec02e20e4b00a66d4a95288"},{"problem":62,"code":"(fn it\n  [fun args]\n  (lazy-seq (cons args (it fun (fun args)))))","user":"563f4c47e4b08d4f616f5ed2"},{"problem":62,"code":"(fn foo [fun x]\n (lazy-seq\n  (cons x\n   (foo fun (fun x)))))","user":"594bd637e4b07ddc2dafae41"},{"code":"(fn iter [f arg] (cons arg (lazy-seq (iter f (f arg)))))","problem":62,"user":"4dcfbc44535d5973398f92a7"},{"problem":62,"code":"(fn my-iterate [f init] (reductions (fn [a b] (f a)) (repeat init)))","user":"55efdc97e4b066087aa94542"},{"problem":62,"code":"(fn it [f arg] (lazy-seq (cons arg (it f (f arg)))))","user":"576df252e4b0979f8965156f"},{"code":"(fn q [f x]\n  (cons x (lazy-seq (q f (f x)))))","problem":62,"user":"4ff4f5c4e4b0678c553fc362"},{"code":"#(reductions(fn[x _](% x))%2(range))","problem":62,"user":"4db858d1535d1e037afb218c"},{"problem":62,"code":"(fn new-iter [f n]\n  (cons n (lazy-seq (new-iter f (f n)))))","user":"54b31445e4b09f271ff37d35"},{"problem":62,"code":"(fn iter [f x]\n             (lazy-seq (cons x (iter f (f x)))))","user":"570bd29be4b0b0fb43fd06c5"},{"problem":62,"code":"(fn rit [func initx]\n  (lazy-seq (cons initx (rit func (func initx))))\n  )","user":"5a42dbabe4b0447ef91cc5fc"},{"problem":62,"code":"(fn ds [f x] (cons x (lazy-seq (ds f (f x)))))","user":"53e91473e4b036ad0777e495"},{"problem":62,"code":"(fn it[f x]\n  (lazy-seq (cons x (it f (f x)))))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":62,"code":"#((fn it ([] (it %2)) ([n] (cons n (lazy-seq (it (%1 n)))))))","user":"55989c25e4b031d6649c9b9b"},{"code":"(fn [f x] (reductions #(f (first %&)) x (range)))","problem":62,"user":"4fe8a1f8e4b07c9f6fd12c5f"},{"problem":62,"code":"(fn iterateIt\n  [func initval]\n  (lazy-seq (cons initval (iterateIt func (func initval)))))","user":"57131dfbe4b07c98581c3a98"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x)))\n   )\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn newiter [f i]\n  (lazy-seq\n    (cons i (newiter f (f i)))))","problem":62,"user":"5125d963e4b05d10e3e395fe"},{"code":"(fn iter [f x] (cons x (lazy-seq (iter f  (f x)))))","problem":62,"user":"5125745ae4b05d10e3e395f9"},{"code":"(fn [f val]\n  ((fn it [v]\n      (cons\n        v \n        (lazy-seq (it (f v))))) val))","problem":62,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":62,"code":"(fn [pred i] \n  ((fn itr [x] \n    (lazy-seq (cons x (itr (pred x))))\n    ) i)\n  )","user":"553f70cae4b0a04f792994f8"},{"code":"(fn iter1 [f x]\n  (cons x (lazy-seq (iter1 f (f x)))))","problem":62,"user":"53691dc7e4b0243289761e97"},{"code":"(fn my-iterate [f x] (->> (my-iterate f (f x))\n                                 (cons x)\n                                 lazy-seq))","problem":62,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn its [f i]\n  (lazy-seq (cons i (its f (f i)))))","problem":62,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn foo [f i] (lazy-seq (cons i (foo f (f i)))))","problem":62,"user":"4eabb245535d7eef30807319"},{"problem":62,"code":"(fn fun [f a] (cons a (lazy-seq (fun f (f a)))))\n;#(reductions (fn [acc _] (%1 acc)) %2 (range))","user":"54397533e4b032a45b86931d"},{"problem":62,"code":"(fn [f x]\n  (letfn [(xx [y]\n            (cons y (lazy-seq (xx (f y)))))]\n    (xx x)))","user":"53ef7f77e4b0742d9025b0ce"},{"problem":62,"code":"(fn f- [f init]\n   (cons init \n         (lazy-seq \n          (f- f (f init)))))","user":"5370d152e4b0fc7073fd6e9d"},{"code":"(fn bb [f i] \n  (let [b (f i)]\n    (lazy-seq (cons i (bb f b)))))","problem":62,"user":"4e5d1912535d8a8b8723a2c9"},{"code":"(fn problem-62 [f x]\n  (lazy-seq (cons x (problem-62 f (f x)))))","problem":62,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":62,"code":"(fn it [f x]\n   (lazy-seq (cons x (it f (f x)))))","user":"5b0948f3e4b0cc2b61a3bdbb"},{"problem":62,"code":"(fn [f x] (map #(loop [n %, y x] (if (= n 0) y (recur (dec n) (f y)))) (range)))","user":"5b4b8cd6e4b02d533a91bc9f"},{"problem":62,"code":"(fn rit \n  [f n] \n  \t(cons n \n          (lazy-seq (rit f (f n)))\n          ))","user":"559b55d6e4b066d22e731f54"},{"code":"(fn re-implement-iterate\n  \t([f val & coll]\n\t\t\t(lazy-seq\n\t\t\t\t(cons val (re-implement-iterate f (f val) (if (nil? coll) '() coll))))))","problem":62,"user":"4e6a63fd535d8ccf87e9feda"},{"problem":62,"code":"(fn r [f v]\n  (lazy-seq\n    (cons v (r f (f v)))))","user":"5f5358b7e4b0a0bc16850a77"},{"code":"#(letfn [(iter [f x] (lazy-seq (cons x (iter f (f x)))))]\n  (iter %1 %2))","problem":62,"user":"4e273301535deb9a81d77ef7"},{"code":"(fn sq [f c] (lazy-seq (cons c (sq f (f c)))))","problem":62,"user":"52baea85e4b07a9af57922d9"},{"code":"(fn f [g i]\n  (lazy-seq (cons i (f g (g i))))\n)","problem":62,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn lazy-iter [fnc start] (cons start (lazy-seq (lazy-iter fnc (fnc start)))))","problem":62,"user":"535a18e3e4b04ce2eb3ed2a4"},{"problem":62,"code":"(fn t [x y] \n           (lazy-seq (cons y (t x (x y)))))","user":"50b25edae4b03ea88043355e"},{"problem":62,"code":"(fn [f base]\n        (let [aux \n              (fn step [curr]\n                (lazy-seq\n                 ((fn[] \n                    (cons curr (step (f curr)))))))]\n          (aux base)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":62,"code":";(fn re [f x] (lazy-seq (cons x (re f (f x)))))\n(fn re [f x] (lazy-seq (cons x (re f (f x)))))","user":"580d7de3e4b0849f6811b73d"},{"problem":62,"code":"(fn [f v] (reductions #(%2 %1) v (repeat f)))","user":"54dae16de4b024c67c0cf758"},{"problem":62,"code":"(fn myiter [func val]\n  (lazy-seq\n      (cons val (myiter func (func val))) ) )","user":"52503747e4b0541d1855b828"},{"code":"(fn i [f v]\n    (cons v\n       (lazy-seq (i f (f v)))))","problem":62,"user":"4facd2fae4b081705acca22f"},{"code":"(fn iter [fun x]\n  ((fn [coll]\n    (lazy-seq\n      (if-let [s (seq coll)]\n        (cons (first s) (iter fun (fun (first s)))))))\n  [x])\n)","problem":62,"user":"4eb1dd39535d7eef30807345"},{"code":"(fn it [f init]\n    (cons init (lazy-seq\n           (it f (f init)))))","problem":62,"user":"4ef992c8535dced4c769f268"},{"code":"(fn fun [f x] (cons x(lazy-seq (fun f (f x)))))","problem":62,"user":"4fb7b80ae4b081705acca2d4"},{"code":"(fn a [f x]\n  (lazy-seq\n    (cons x (a f (f x)))))","problem":62,"user":"4fd2e5d8e4b04c3a95aa0427"},{"code":"(fn iterate-\n  [f init]\n  (lazy-seq (cons init (iterate- f (f init)))))","problem":62,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":62,"code":"(fn itr [op arg]\n  (cons arg (lazy-seq (itr op (op arg)))))","user":"51bd255ce4b0df1216cefd94"},{"problem":62,"code":"(fn lseq [f x]\n  (cons x (lazy-seq (lseq f (f x)))))","user":"549def9ce4b0f3d1d8e70f99"},{"code":"(fn citerate[fcn start]\n  (lazy-seq(cons start\n    (citerate fcn (fcn start)))))","problem":62,"user":"532631e1e4b09d4e7a9b54ea"},{"problem":62,"code":"(fn ri[f v] (cons v (lazy-seq (ri f (f v)))))","user":"552e1c98e4b076ab5578f7ee"},{"code":"(fn ! [f arg]\n  (lazy-seq (cons arg (! f (f arg)))))","problem":62,"user":"4f036d9b535dcb61093f6ac1"},{"problem":62,"code":"(fn iter [f x] \n         (lazy-seq (cons x (iter f (apply f (list x))))))","user":"5aa00b7fe4b0d174b936c825"},{"problem":62,"code":"(fn reductions++\n  [f int] (lazy-seq (cons int (reductions++ f (f int)))))","user":"55af7e21e4b03311e7b732cc"},{"problem":62,"code":"(fn my-iterate\n  [f initial-val]\n  (lazy-seq (cons initial-val (my-iterate f (f initial-val)))))","user":"5dd25ca8e4b0948ae9d9ad55"},{"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (f x))))\n)","problem":62,"user":"50588af1e4b06522596eba7d"},{"problem":62,"code":"(fn myiter [f x] (lazy-cat [x] (myiter f (f x))))","user":"558466fce4b04192f3441eee"},{"code":"(fn my-iterate [func init]\n  (cons init (lazy-seq (my-iterate func (func init)))))","problem":62,"user":"53070615e4b02e821686979e"},{"problem":62,"code":"(fn i\n  [f x]\n  (lazy-seq (cons x (i f (f x)))))","user":"56483562e4b0284900eef629"},{"problem":62,"code":"(fn iterations [function start]\n  (lazy-seq (cons start (iterations function (function start)))) )","user":"59fa0bb6e4b0ca45a743a352"},{"problem":62,"code":"(fn iterateX [f x] (lazy-seq (cons x (iterateX f (f x)))))","user":"568820e8e4b0dcc4269f4067"},{"problem":62,"code":"(fn myf [f x]  (lazy-seq (cons x (myf f (f x)))))","user":"5db17e0be4b010eb3c36cd03"},{"code":"(fn my-iter [f x]\n  (lazy-seq\n   (cons x (my-iter f (f x)))))","problem":62,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn it [f n]\n  (lazy-seq \n    (cons n (it f (f n)))))","problem":62,"user":"4e5a2403535d8a8b8723a2a7"},{"code":"(fn iterate2 [f i]\n   (cons i (lazy-seq (iterate2 f (f i)))))","problem":62,"user":"5374adc3e4b06d7f452d9e27"},{"code":"(fn iterate2 [f x]\r\n  (cons x (lazy-seq (iterate2 f (f x)))))","problem":62,"user":"4e1158aa535d04ed9115e7c6"},{"problem":62,"code":"(fn my-iterate [op init]\n  (cons init (lazy-seq (my-iterate op (op init)))))","user":"591f05b4e4b09b4ee5954c42"},{"problem":62,"code":"(fn ite\n  [f v]\n  (lazy-seq\n   (cons v (ite f (f v))\n         )\n   )\n  )","user":"58a44a14e4b01a0c0b2328f2"},{"problem":62,"code":"(fn repfx [f x]\n  \"Repeat x, (f x), (f (f x)), etc., ad infinitum.\"\n  (letfn [(inner\n            ([] (inner x))\n            ([e] (lazy-seq (cons e (inner (f e))))))]\n    (inner)))","user":"5d64ecb2e4b0c9e5857d5036"},{"problem":62,"code":"(fn foo [f x]\n     (cons x (lazy-seq (foo f (f x)))))","user":"52e12ac5e4b09f7907dd141a"},{"problem":62,"code":"(fn ri [f i]\n  (cons i (lazy-seq (ri f (f i)))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":62,"code":"(fn [f x]\n  (reductions #(%2 %) x (repeat f)))","user":"5a6af090e4b0512ff01cda2d"},{"problem":62,"code":"(fn it [f x]\n           (lazy-seq\n            (cons x (it f (f x)))))","user":"53f053ebe4b0742d9025b0d3"},{"problem":62,"code":"(fn m [f i] (lazy-seq (cons i (m f (f i)))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"(fn ite [func val]\n  (lazy-seq (cons val (ite func (func val)))))","problem":62,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"problem":62,"code":"(fn fg [f n]\n  (lazy-seq (cons n (fg f (f n)))))","user":"5dab11cde4b000c986472c45"},{"code":"(fn h [x y] (cons y (lazy-seq (h x (x y)))))","problem":62,"user":"502d39f8e4b0d96a44ab2032"},{"problem":62,"code":"(fn lazy-iterate [f x]\n  (lazy-seq\n   (concat [x] (lazy-iterate f (f x)))))","user":"5d7aa22ee4b02e6b30c9354e"},{"code":"(fn [f x] (map (fn [i] (reduce (fn [res v] (f res)) x (range i))) (range)))","problem":62,"user":"4e79ff2a535db169f9c796a9"},{"problem":62,"code":"(fn foo [f v]\n  (lazy-seq (cons v (foo f (f v)))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn patit [f x]\n  (lazy-seq (cons x (patit f (f x)))))","problem":62,"user":"4dadb891c9a9d6ed3699dc57"},{"code":"(fn my-iterate [f i]\n  (lazy-seq (cons i (my-iterate f (f i)))))","problem":62,"user":"4fe8d862e4b0547ebccb2428"},{"problem":62,"code":"(fn x [f e]\n  (lazy-seq (cons e (x f (f e)))))","user":"5989e080e4b021a7a535fed6"},{"problem":62,"code":"(fn my-iterate [f ival]\n  (cons ival (lazy-seq (my-iterate f (f ival)))))","user":"59a0262ee4b0871e7608b82d"},{"problem":62,"code":"(fn my-itter [f n]\n           (cons n (lazy-seq (my-itter f (f n)))))","user":"5ebff55de4b00a66d4a95286"},{"problem":62,"code":"(fn iterate* [f init]\n\t(cons init\n\t\t(lazy-seq\n\t\t\t(iterate* f (f init)))))","user":"55b8c339e4b01b9910ae29b9"},{"problem":62,"code":"(fn iter- [f x]\n  (lazy-seq\n   (cons x (iter- f (f x)))))","user":"54926752e4b0b312c081ff44"},{"code":"(fn f[x y](lazy-cat [y] (f x (x y))))","problem":62,"user":"4e7eff9e535db966e863cc38"},{"problem":62,"code":"(fn fnlist \n\t\n\t([f x] (lazy-seq (cons x (fnlist f (f x))))))","user":"594a7ed1e4b07ddc2dafae02"},{"code":"(fn miterate [f init]\r\n  (cons init\r\n  (lazy-seq\r\n\t (miterate f (f init)))))","problem":62,"user":"4ddc620d535d02782fcbea06"},{"problem":62,"code":"(fn iter [func base]\n  (lazy-cat [base] (iter func (func base))))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn my [f x] (cons x (lazy-seq (my f (f x)))))","problem":62,"user":"52a62e16e4b0c58976d9abf9"},{"code":"(fn iter[f, x]\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"531f1e63e4b08068f379edc2"},{"problem":62,"code":"(fn ! [f v]\n  (lazy-seq\n   (cons v (! f (f v)))))","user":"574abbfbe4b02ea114799200"},{"code":"(fn mi[f i] (cons i (lazy-seq (mi f (f i)))))","problem":62,"user":"4ece9ca9535d23f03622770f"},{"code":"(fn g [f x]\n  (lazy-seq\n    (cons\n      x\n      (g f (f x)))))","problem":62,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn iterate*[f x]\n  (lazy-seq (cons x (iterate* f (f x)))))","problem":62,"user":"52ab6de1e4b0c58976d9ac78"},{"problem":62,"code":"(fn [f x]\n  (letfn [(helper [f x]\n       (lazy-seq (cons x (helper f (f x)))))]\n       (helper f x)))","user":"5461dc79e4b01be26fd746a8"},{"problem":62,"code":"(fn p62 ([f x] (cons x (lazy-seq (p62 f (f x))))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":62,"code":"(fn funk [f b] (lazy-seq (cons b (funk f (f b)))))","user":"5f1eec36e4b0f565ad998274"},{"code":"(fn iter [func x] (lazy-seq (cons x (iter func (func x)))))","problem":62,"user":"51805d22e4b0e3fc13e244df"},{"code":"(fn __ [f n]\n  (lazy-seq\n  (cons n (__ f (f n)))))","problem":62,"user":"4fa719c0e4b081705acca1bf"},{"problem":62,"code":"(fn dum [f x] (lazy-seq (cons x (dum f (f x)))))","user":"598e7998e4b02b9968b84d34"},{"code":"(fn lol [f x] (cons x (lazy-seq (lol f (f x)))))","problem":62,"user":"4f702dcae4b07046d9f4eff4"},{"code":"(fn my-iterate\n  [f n]\n  (cons n (lazy-seq (my-iterate f (f n)))))","problem":62,"user":"4e5a460f535d8a8b8723a2ab"},{"problem":62,"code":"(fn name#\n  [f n]\n  (lazy-seq\n    (cons n (name# f (f n)))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn iter [f i]\r\n  (cons i (lazy-seq (iter f (f i)))))","problem":62,"user":"50481b70e4b0ec70b3ef8d98"},{"code":"(fn this [f x]\n  (cons x (lazy-seq (this f (f x)))))","problem":62,"user":"4f215350e4b0d66497709fd0"},{"problem":62,"code":"(fn [op x]\n  (conj\n    (let [a (atom x)]\n      (repeatedly #(swap! a op))) \n  x))","user":"57b19fa1e4b0fbc9809a2754"},{"problem":62,"code":"(fn il [f x] (lazy-seq (let [res (f x)]\n                        (cons x (il f res)))))","user":"511e17a9e4b0c5b849dd36b0"},{"problem":62,"code":"(fn i [f v]\n    (lazy-seq\n     (cons v (i f (f v)))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":62,"code":"(fn irate [f x]\n  (cons x (lazy-seq (irate f (f x)))))","user":"54246fcce4b01498b1a71aed"},{"problem":62,"code":"(fn my-iterate [fun val] (cons val (lazy-seq (my-iterate fun (fun val)))))","user":"55d95be7e4b0e31453f64ac9"},{"code":"(fn rec [f x]\n   (cons x (lazy-seq (rec f (f x)))))","problem":62,"user":"52bdb689e4b07a9af5792306"},{"code":"(fn [f x]\n  (letfn [(cdr [y] (lazy-seq (cons y (cdr (f y)))))]\n    (cdr x)))","problem":62,"user":"4f04f847535dcb61093f6beb"},{"problem":62,"code":"(fn __ [f x]\n  (loop [c [(bigint x)]\n         g f\n         i 0]\n    (if (< i 101)\n      (recur (conj c (g (bigint x)))\n             (comp g f)\n             (inc i))\n      c)))","user":"57ed19a3e4b0bfb2137f5b8e"},{"problem":62,"code":"(fn l [f i]\n  (lazy-seq\n    (cons i (l f (f i)))))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"#((fn Z [b]\r\n  \t(lazy-seq\r\n\t\t\t(cons b (Z (%1 b))))) %2)","problem":62,"user":"4dadca03c9a9d6ed4199dc57"},{"code":"(fn [f x]\n  (cons x (reductions (fn [x _] (f x)) (f x) (range))))","problem":62,"user":"52eb400ee4b0705949c4443b"},{"code":"(fn l[f x] (cons x (lazy-seq (l f (f x)))))","problem":62,"user":"4ec0c7ba535dfed6da9c6da4"},{"problem":62,"code":"(fn fff [f x]\n  (cons x (lazy-seq (fff f (f x)))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":62,"code":"(fn iterate- [f x] (cons x (lazy-seq (iterate- f (f x)  ) ) ))","user":"58ac513fe4b0005cfeb1a746"},{"code":"(fn it [f x ]\n    (lazy-seq ( cons x (it f (f x)))))","problem":62,"user":"4f030775535dcb61093f6a43"},{"code":"(fn itr [f x] \n (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"51b24defe4b02f8f128bb963"},{"problem":62,"code":"(fn grow [f st] (lazy-cat [st] (grow f (f st))))","user":"54965534e4b0b312c081ff65"},{"problem":62,"code":"(fn do-iterate [f i]\n  (lazy-seq \n    (cons i\n          (do-iterate f (f i)))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":62,"code":"(fn myseq [f n] (cons n (lazy-seq (myseq f (f n)))))","user":"55a74d46e4b09e57187da2a3"},{"code":"(fn my-i [func, param]\r\n  (let [my-i-f (fn [p, c]\r\n                     (if(zero? c) \r\n                       p\r\n                     (recur (func p), (dec c))))]\r\n    (map #(my-i-f param %) (range))))","problem":62,"user":"4fdf566fe4b05e33b9224f99"},{"problem":62,"code":"(fn it[f a] (cons a (lazy-seq(it f(f a)))))","user":"55631739e4b0c656e3ff17e2"},{"problem":62,"code":"(fn Re-implementIterate [f x] \n  (cons x (lazy-seq (Re-implementIterate f (f x)))))","user":"607508f3e4b069485764de54"},{"problem":62,"code":"#(reductions (fn [x y] (% x)) %2 (cycle [0]))","user":"56992162e4b0542e1f8d143c"},{"code":"(fn iter [f x] (lazy-seq(cons x (iter f (f x)))))","problem":62,"user":"4e8aef69535d65386fec2114"},{"problem":62,"code":"(fn myIter [f x]\n  (lazy-seq\n   (cons x (myIter f (f x)))))","user":"567798afe4b05957ce8c6169"},{"problem":62,"code":"(fn foo[fun x]\n (lazy-seq (cons x (foo fun (fun x)))\n)\n)","user":"5f1aade6e4b091ba50b4dbe4"},{"code":"(fn foo [f x]\n  (cons x (lazy-seq (foo f (f x)))))","problem":62,"user":"4dc21233535d020aff1edf92"},{"code":"(fn my-iterate [function initial-value]\n  (lazy-seq\n   (cons initial-value\n         (my-iterate function (function initial-value)))))","problem":62,"user":"5220bc0fe4b0e6a83c8925a7"},{"problem":62,"code":"(fn foo[f n] \n  (cons n (lazy-seq (foo f (f n)))))","user":"5537b2c7e4b09218d5f44fce"},{"problem":62,"code":"(fn it'\n  [f x]\n  (cons x\n        (lazy-seq (it' f (f x)))))","user":"5455c2f3e4b080a794c2c87d"},{"problem":62,"code":"(fn myrepeat [f x] (lazy-seq (cons x (myrepeat f (f x)))))","user":"5793931ee4b0e215f87e845c"},{"code":"(fn me [f x] (cons x (lazy-seq (me f (f x)))))","problem":62,"user":"531ba143e4b08068f379ed91"},{"code":"(fn re-iter [f x] \n  (lazy-seq (cons x (re-iter f (f x)))))","problem":62,"user":"4ec3b393535dcc7ae8597d59"},{"problem":62,"code":"(fn iter [f n]\n    (cons n\n          (lazy-seq\n           (iter f (f n)))))","user":"5489dd4de4b0e286459a11ef"},{"problem":62,"code":"(fn gen-lazy-seq [op init]\n  (lazy-seq\n    (cons init (gen-lazy-seq op (op init)))))","user":"591072e0e4b0163c97b36ebc"},{"code":"(fn itr [f x]\n  (lazy-seq\n   (cons x (itr f (f x)))))","problem":62,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn iter [f x] (lazy-seq (cons x (iter f (f x)) )))","problem":62,"user":"5364ab34e4b0243289761e64"},{"code":"(fn alt_iterate [f x]\n  (lazy-seq\n    (cons x (alt_iterate f (f x)))))","problem":62,"user":"531488f3e4b08068f379ed16"},{"problem":62,"code":"(fn r [f x]\n  (cons x (lazy-seq (r f (f x)))))","user":"54227fc6e4b01498b1a71ac0"},{"problem":62,"code":"(fn test [f x]\n  (lazy-seq (cons x (test f (f x)))))","user":"579332c2e4b0e215f87e8452"},{"problem":62,"code":"(fn my-iterate\n  ([f i]\n   (lazy-seq\n    (cons i (my-iterate f (f i))))))","user":"58d48df8e4b03c36ff7e5941"},{"problem":62,"code":"(fn new-iterate [f x] (lazy-seq (cons x (new-iterate f (f x)))))","user":"55d1a721e4b0e31453f64a47"},{"problem":62,"code":"(fn my-fun [fun val] (lazy-seq (cons val (my-fun fun (fun val)))))","user":"571d9669e4b0145328a7627f"},{"problem":62,"code":"(fn iter [fnc x] (cons x (lazy-seq (iter fnc (fnc x)))))","user":"607e1d9de4b03d835a6eaedb"},{"problem":62,"code":"(fn f1[f a] (cons a (lazy-seq (f1 f (f a)))))","user":"52271ffee4b04e78ff2e19a9"},{"code":"(fn it [f x]\r\n  (lazy-seq (cons x (it f (f x)))))","problem":62,"user":"4ee40938535d10e5ff6f5375"},{"problem":62,"code":"(fn iterate' [fun base]\n  (lazy-seq (cons base (iterate' fun (fun base)))))","user":"5885cc62e4b0f1effa3b76c1"},{"problem":62,"code":"#(reductions (fn [a e] (%1 a)) %2 (range))","user":"577202d2e4b0979f896515c0"},{"code":"(fn iter [f v]\n   (cons v (lazy-seq (iter f (f v)))))","problem":62,"user":"4f409e29e4b0e243712b1fb6"},{"code":"(fn fp [f x]\n    (lazy-seq\n      (cons x (fp f (f x)))))","problem":62,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [f x] (letfn[(simple-iterate [f x]\n                   (lazy-seq\n                      (cons x (simple-iterate f (f x))))) ]\n \n                 (simple-iterate f x)))","problem":62,"user":"4f2aff4de4b0d6649770a044"},{"problem":62,"code":"(fn it [f ini]\n  (lazy-seq \n  \t(cons ini (it f (f ini)))))","user":"566ff0a1e4b0a866af6896ec"},{"problem":62,"code":"(fn iterate- [func init]\n  (cons init (\n             lazy-seq (iterate- func (func init))\n             ))\n  )","user":"5e85d0bde4b09a7a73c8bbd6"},{"problem":62,"code":"(fn m [f x] (cons x (lazy-seq (m f (f x)))))","user":"5562442be4b0c656e3ff17d5"},{"code":"(fn iter [f x]\n  (lazy-seq \n   (cons x (iter f (f x)))))","problem":62,"user":"4f1e4ab5535d64f603146496"},{"problem":62,"code":"(fn iter [func i]\n  (cons i (lazy-seq (iter func (func i)))))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn iteration [f x] \n  (lazy-cat [x]\n            (map f (iteration f x)))\n  )","problem":62,"user":"52ac41fee4b0c58976d9ac85"},{"problem":62,"code":"(fn _iterate [f x] (lazy-seq (cons x (map f (_iterate f x)))))","user":"5a813b90e4b00b71e582a065"},{"code":"(fn[fnc arg]\n  (letfn [(my-iterate [fnc arg]\n            (cons arg \n              (lazy-seq\n                (my-iterate fnc (fnc arg)))))]\n    (my-iterate fnc arg)))","problem":62,"user":"4e58bcd4535d8a8b8723a296"},{"code":"(fn my-iterate\n  [f x]\n    (lazy-seq\n      (cons x (my-iterate f (f x)))\n    )\n)","problem":62,"user":"4fff00ede4b0678c553fc3fc"},{"code":"(fn i [f x] \n  (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4e6ab9cb535d8ccf87e9fefe"},{"problem":62,"code":"(fn [f x]\n  (letfn [(my-fn [y]\n     (lazy-seq\n      (cons y (my-fn (f y)))))]\n    (my-fn x)))","user":"5447e08ce4b032a45b8693c3"},{"code":"(fn it [f i]\n  (cons i\n        (lazy-seq (it f (f i)))))","problem":62,"user":"50a2f901e4b029e8bace362a"},{"problem":62,"code":"(fn f [g n]\n  (lazy-seq (cons n (f g (g n)))))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn iterator\n  [f init]\n  (-> \n   init\n   (cons (iterator f (f init)))\n   lazy-seq\n  )\n)","problem":62,"user":"5162757ee4b03cfa3774b3fe"},{"code":"(fn iter[f x]\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4ed286d4535d44c135fd68d7"},{"code":"(fn foo [f x]\n  (cons x (lazy-cat (foo f (f x)))))","problem":62,"user":"4f849f76e4b033992c121c36"},{"code":"(fn rec [f x] (cons x (lazy-seq (rec f (f x)))))","problem":62,"user":"52cc09c1e4b07d0d72b27356"},{"problem":62,"code":"(fn lz [fnc s]\n  (cons s (lazy-seq (lz fnc (fnc s)))))","user":"56c0aeb8e4b060a8e693e3af"},{"code":"(fn my-iterate [f v] \n  (cons \n    v \n    (lazy-seq (my-iterate f (f v)))))","problem":62,"user":"500aa15ee4b03d00572d2d76"},{"code":"(fn mIter [f x] (cons x (lazy-seq (mIter f (f x)))))","problem":62,"user":"52bf6946e4b07a9af5792334"},{"problem":62,"code":"(fn iter [f n]\n    (cons n\n          (lazy-seq (iter f (f n)))))","user":"532f8569e4b019098a6f8b4f"},{"problem":62,"code":"(fn pippo [f x]\n  (lazy-seq (cons x (pippo f (f x)))))","user":"5ad99ddee4b0ea6055cfac3a"},{"problem":62,"code":"(fn recurring [func x]\n(lazy-seq\n  (cons x (recurring func (func x)))))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":62,"code":"(fn func [f x]\n    (lazy-seq\n     (cons x (func f (f x)))))","user":"5ff64845e4b06df49cee1495"},{"code":"(fn ! [f s] (lazy-cat [s] (! f (f s))))","problem":62,"user":"52faec2ee4b047fd55837004"},{"problem":62,"code":"(fn v [f x] (cons x (lazy-seq (v f (f x)))))","user":"5ff3aca3e4b05ac5b16ea205"},{"problem":62,"code":"(fn algo [f n]\n  (cons n\n    (lazy-seq\n      (algo f (f n)))))","user":"59e56c75e4b08badc2a0c556"},{"problem":62,"code":"(fn re-iterate [f v]\n  (lazy-seq\n   (cons v (re-iterate f (f v)))))","user":"5f8795d4e4b020286baa5e96"},{"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x)) )))","problem":62,"user":"4f03bf5e535dcb61093f6b5d"},{"code":"(fn i* [f x] (cons x (lazy-seq (i* f (f x)))))","problem":62,"user":"4f50d933e4b03ad3f0c10d11"},{"problem":62,"code":"(fn myiter[f x]\n  (cons x (lazy-seq (myiter f (f x)))))","user":"5472cba1e4b094393f72dd7a"},{"problem":62,"code":"(fn i \n\t[f x] (cons x (lazy-seq (i f (f x)))))","user":"54c11fdae4b0ed20f4ff6f1b"},{"problem":62,"code":"(fn it [f x] \n  (cons x (lazy-seq (it f (f x)))\n   ))","user":"562ab73ce4b00e49c7cb482e"},{"problem":62,"code":"(fn ff [f n] (cons n (lazy-seq (ff f (f n)))))","user":"5b34aba7e4b025bcb146f352"},{"code":"(fn it [f x]\n  (cons\n    x\n    (lazy-seq\n      (it f (f x)))))","problem":62,"user":"50435852e4b034ff00315d22"},{"code":"(fn itr [f x] (lazy-seq (concat [x] (itr f (f x)))))","problem":62,"user":"4e5f08c7535d8a8b8723a2da"},{"problem":62,"code":"(fn g\n  [f x]\n  (lazy-seq (cons x (g f (f x)))))","user":"56a44067e4b0542e1f8d14da"},{"problem":62,"code":"(fn myiterate\n  [f x]\n  (lazy-seq (cons x (myiterate f (f x)))))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":62,"code":"(fn x-iter [f v]\n  (lazy-seq (cons v (x-iter f (f v)))))","user":"5a250b86e4b07f18be40aa19"},{"problem":62,"code":"(fn !\n\t[f n]\n\t(cons n (lazy-seq (! f (f n)))))","user":"53da3fcde4b0e771c3025497"},{"problem":62,"code":"(fn iterate* [f v]\n\t(cons v (lazy-seq (iterate* f (f v)))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [func start]\n  (map\n   (fn [n]\n     (loop [i 0 x start]\n       (if (< i n)\n         (recur (inc i) (func x))\n          x\n       )\n     )\n   )\n   (range) \n  )\n)","problem":62,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn f [fnc n] \n  (lazy-seq (cons n (f fnc (fnc n)))))","problem":62,"user":"4ffe8193e4b0678c553fc3f4"},{"code":"(fn f [x y] (lazy-cat [y] (f x (x y))))","problem":62,"user":"529b44afe4b02ebb4ef7509d"},{"problem":62,"code":"(fn my-iterate [func initial] (cons initial (lazy-seq (my-iterate func (func initial)))))","user":"551d5cb9e4b07993ea3788e9"},{"problem":62,"code":"(fn m [f x] (lazy-seq (cons x (m f (f x)))))","user":"53213810e4b09d4e7a9b54b0"},{"problem":62,"code":"(fn itr [f x]\n  (lazy-seq\n   (cons x\n         (itr f (f x)))))","user":"54b448f2e4b05787c3b1638e"},{"problem":62,"code":"(fn iter [f x]\n  (cons\n   x\n   (lazy-seq\n    (iter f\n          (f x)))))","user":"569ad037e4b0542e1f8d144f"},{"problem":62,"code":"(fn foo [f x] \n  (lazy-seq (cons x (foo f (f x))))\n  )","user":"57b8b008e4b0fbc9809a27e6"},{"problem":62,"code":"(fn[f x]\n  (map-indexed (fn [idx itm] \n  \t(loop [i idx \n  \t\t   acc x]   \t\t\n  \t\t(if(= 0 i) acc (recur (dec i) (f acc))))\n  ) (repeat x))\n)","user":"54f4a457e4b0f2f3c5226e83"},{"code":"(fn [f x]\n  (letfn\n    [(my-iterate [f x]\n        (lazy-seq (cons x (my-iterate f (f x)))))]\n    (my-iterate f x)))","problem":62,"user":"5014754de4b094324338f8e5"},{"problem":62,"code":"(fn e62 [f x]\n          (cons x (lazy-seq (e62 f (f x)))))","user":"4ff4bed0e4b0678c553fc35f"},{"code":"(fn iteratex [f x] (cons x (lazy-seq (iteratex f (f x)))))","problem":62,"user":"4e823f41535db62dc21a62c8"},{"code":"(fn it [f x]\n  (cons x (lazy-seq (map f (it f x)))))","problem":62,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn my-iterate\n  ([ifn ival] (lazy-seq (cons ival (my-iterate ifn (ifn ival))))))","problem":62,"user":"4eee3e6a535d93acb0a668c3"},{"code":"(fn iter\n  [f x]\n    (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4faec810e4b081705acca24e"},{"problem":62,"code":"(fn f\n  [f1 x]\n  (lazy-seq (cons x (f f1 (f1 x))))\n  )","user":"6074f5ede4b069485764de52"},{"problem":62,"code":"(fn xxx [f x] (lazy-seq (cons x (xxx f (f x)))))","user":"5abe2fc2e4b073f17744271e"},{"problem":62,"code":"(fn infSeq [a b] (cons b (lazy-seq (infSeq a (a b)))))","user":"6074e088e4b069485764de4d"},{"code":"(fn [f x] (map (partial (fn [f x n] (cond (= n 0) x (> n 0) (recur f (f x) (dec n)))) f x) (range)))","problem":62,"user":"4ff76effe4b0678c553fc390"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq\n  \t(cons x (iter f (f x)))))","user":"53d78b64e4b0e771c3025466"},{"problem":62,"code":"(fn g [f n]\n  (cons n (lazy-seq (g f (f n)))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":62,"code":"(fn re-implement-iterate-solution\n  [func initialValue] ;; update args as needed\n  ;; Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc.\n  (cons initialValue (lazy-seq (re-implement-iterate-solution func (func initialValue))))\n  )","user":"536829c8e4b0243289761e8b"},{"problem":62,"code":"(fn my-iterate [f init]\n  (lazy-seq (cons init (my-iterate f (f init)))))","user":"5b107263e4b0cc2b61a3be22"},{"problem":62,"code":"(fn it [f s] \n(lazy-seq (cons s (it f (f s)))\n))","user":"58335c22e4b089d5ab817c9a"},{"problem":62,"code":"(fn my-iterate \n  [f i]\n  (cons i (lazy-seq (my-iterate f (f i)))))","user":"57fd7344e4b0d3187e9009b6"},{"problem":62,"code":"(fn [f v]\n   (letfn [(f2 [v1 v2] (f v1))]\n     (reductions f2 v (repeat 1))))","user":"56ef077ae4b04a395b9a0459"},{"code":"(fn it [f x]\n  (cons x\n    (lazy-seq (it f (f x)))))","problem":62,"user":"4f9d53f3e4b0dcca54ed6d21"},{"code":"(fn __ [f x]\n  (lazy-seq (cons x (__ f (f x)))))","problem":62,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn m [f x]\n  (cons x (lazy-seq (m f (f x)))))","problem":62,"user":"50142490e4b07d18bdaaf70a"},{"problem":62,"code":"(fn iter [f i] (lazy-cat [i] (iter f (f i))))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn foo [f a]\n  (lazy-seq\n    (concat (list a) (foo f (f a)))\n    )\n  )","problem":62,"user":"510b704ee4b078ea71921100"},{"problem":62,"code":"(fn[f  x] \n  \t(loop [ y (bigint x) result [] i 0] \n    (println \"y : \" y \"result :\" result \"i :\" i)\n    (if (and (integer? y) (< i 100) )(recur (f y) (conj result y) (inc i))  result\n    )\n   )\n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":62,"code":"(fn iter [f e] (lazy-seq (cons e (iter f (f e)))))","user":"55ecac8ee4b0121d4835fdcc"},{"code":"(fn [f x]\n  ((fn tmp-func [y]\n    (lazy-seq (cons y (tmp-func (f y))))) x))","problem":62,"user":"4e49a7bb535dc968683fc4c6"},{"problem":62,"code":"(fn potato [f i]\n  (lazy-seq (cons i (potato f (f i)))))","user":"57763002e4b0979f89651631"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (cons\n      x\n      (my-iterate f (f x)))))","problem":62,"user":"53727c0be4b06d7f452d9dfa"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (reductions #(%2 %1) x (repeat f)))","user":"56180d83e4b06b1bb2182a18"},{"problem":62,"code":"(fn iter [f arg] \n   (lazy-seq \n      (cons arg (iter f (f arg))) ))","user":"553900d4e4b09218d5f44fe5"},{"problem":62,"code":"(fn i [f val]\n  (cons val (lazy-seq (i f (f val)))))","user":"5839f079e4b089d5ab817d48"},{"problem":62,"code":"(fn hola [f a]\n  (letfn [(the-fn [a] \n                  (lazy-seq (cons (f a) \n                                  (the-fn (f a)))))]\n    (cons a (the-fn a))))","user":"55912230e4b027778923767a"},{"problem":62,"code":"(fn i\n    [f x]\n    (lazy-seq\n     (cons x (i f (f x)))))","user":"6026d2cae4b0d5df2af22232"},{"code":"(fn iter [f x]\n  \t(cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"53300924e4b019098a6f8b55"},{"problem":62,"code":"(fn f [g init]\n  (lazy-seq (cons init (f g (g init)))))","user":"54c5cc17e4b045293a27f624"},{"problem":62,"code":"(fn my-iterate [f x] (let [y (f x)] (lazy-seq (cons x (my-iterate f y)))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"#(reductions(fn[v x] (% v)) %2 (repeat[\"\"] ))","problem":62,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":62,"code":"(fn it [f i]\n   (lazy-seq (cons i (it f (f i)))))","user":"57d9f603e4b0bd073c20240a"},{"problem":62,"code":"#((fn it [f l] (cons l (lazy-seq (it f (f l))))) %1 %2)","user":"5581747fe4b05c286339e0fa"},{"code":"(fn y [f x] (lazy-seq (cons x (y f (f x)))))","problem":62,"user":"4daeabf6edd6309eace4d15c"},{"code":"(fn ite [f s] (lazy-seq (cons s (ite f (f s)))))","problem":62,"user":"52b43468e4b0c58976d9ad1b"},{"problem":62,"code":"(fn iterate- [f x]\n  (cons x\n   (lazy-seq\n         (iterate- f (f x)))))","user":"5f1af439e4b0f565ad998257"},{"problem":62,"code":"(fn Iterate [f x]\n  (lazy-seq (cons x (Iterate f (f x)))))","user":"5a99b766e4b0d174b936c7a8"},{"problem":62,"code":"(fn iter[f seed]\n\t(cons seed (lazy-seq (iter f (f seed)))))","user":"54651faee4b01be26fd746d6"},{"problem":62,"code":"(fn my-iterate [f init]\n \t(cons init (lazy-seq (my-iterate f (f init))))\n)","user":"54b050cee4b09f271ff37d13"},{"code":"(fn iter [f x] \n  (lazy-seq\n    (cons x (iter f (f x)))))","problem":62,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":62,"code":"(fn iterate' [f x]\n    (lazy-seq (cons x (iterate' f (f x)))))","user":"55ac07afe4b03311e7b7328f"},{"code":"(fn re-implement-iterate [f x]\n  (lazy-seq \n    (cons x\n          (re-implement-iterate f \n                                (f x )))))","problem":62,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn foo [f v]\n  (lazy-seq\n   (cons v (foo f (f v)))))","problem":62,"user":"4f713878e4b07046d9f4f00a"},{"problem":62,"code":"(fn iter\n  [f start]\n  (->> start\n      (f)\n      (iter f)\n      (cons start)\n      (lazy-seq)))\n\n\n;  (lazy-seq (cons start (iter f (f start)))))","user":"55ede35ce4b0121d4835fde1"},{"code":"(fn g [f arg]\n  (cons arg (lazy-seq (g f (f arg))))\n)","problem":62,"user":"5081566ce4b0946d0443855b"},{"code":"(fn foo [func n] (cons n (lazy-seq (foo func (func n)))))","problem":62,"user":"50b65966e4b0a86f8358ca6c"},{"code":"(fn this [f base]\n  (cons base (lazy-seq (this f (f base)))))","problem":62,"user":"50d882d4e4b01f0871336e69"},{"problem":62,"code":"(fn iter [f v]\n  (lazy-cat [v] (iter f (f v))))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn itr [f v]\n  (lazy-seq \n  \t(cons v (itr f (f v)))))","problem":62,"user":"4e09392a535d04ed9115e7ae"},{"problem":62,"code":"(fn i [f a](lazy-seq (cons a (i f (f a)))))","user":"5a6dbaf5e4b0512ff01cda63"},{"code":"(fn lp [f x]\n  (lazy-seq\n    (cons x\n      (lp f (f x)))))","problem":62,"user":"4fca2a13e4b0ee37620e184d"},{"problem":62,"code":"(fn iter [f v]\n  (lazy-seq\n   (cons v\n         (iter f (f v)))))","user":"54fdbe3fe4b07d26eda61d3b"},{"code":"(fn it* [f v] (lazy-seq (cons v (it* f (f v)))))","problem":62,"user":"4ef4e5fa535dced4c769f242"},{"problem":62,"code":"(fn g [f initVal] (lazy-seq (cons initVal (g f (f initVal)))))","user":"5ce62d8ee4b0a17bb84e2b83"},{"code":"(fn myi [f x] (lazy-seq (cons x (myi f (f x)))))","problem":62,"user":"5392b849e4b0b51d73faaeb1"},{"problem":62,"code":"(fn i [op n]\n  (lazy-seq (cons n (i op (op n)))))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn i [f v] (lazy-seq (cons v (i f (f v)))))","problem":62,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn myiter [f n]\n                   (cons n (lazy-seq (myiter f (f n)))))","problem":62,"user":"4f03f197535dcb61093f6b84"},{"problem":62,"code":"(fn iterateV2 [f x]\n   (loop [ans []\n          f f\n          x x]\n     (if (or (> x 1000) (> (count ans) 100)) ans\n          (recur (conj ans x) (identity f) ( f x)))))","user":"56ede653e4b04a395b9a0449"},{"code":"(fn bla [f x] (cons x (lazy-seq (bla f (f x))) ) )","problem":62,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn f[g i]`(~i ~@(lazy-seq (f g (g i)))))","problem":62,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn myIter [f x] (let [y (f x)] (lazy-seq (cons x (myIter f y)))))","problem":62,"user":"4f03b3fb535dcb61093f6b52"},{"problem":62,"code":"(fn its [f x]\n  (lazy-seq (cons x (its f (f x)))))","user":"59c94a69e4b0a024fb6ae576"},{"problem":62,"code":"(fn iterate- [f init]\n  (cons init\n        (lazy-seq\n         (iterate- f (f init)))))","user":"53cb5559e4b00fb29b2212d2"},{"code":"(fn i [f x]\n  (lazy-seq \n    (cons x (i f (f x)))))","problem":62,"user":"4ef49c2c535dced4c769f238"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x (lazy-seq (my-iterate f (f x))))\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn my-iterate [fnn value]\n             (lazy-cat [value]\n               (my-iterate fnn (fnn value))))","problem":62,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":62,"code":"(fn itr [f result]\n  (lazy-seq (cons result (itr f (f result)))))","user":"54ccf9d5e4b057c6fda3a295"},{"problem":62,"code":"(fn e-62 [f v]\n  (cons v\n        (lazy-seq\n          (e-62 f (f v)))))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":62,"code":"(fn __ [f v] (lazy-seq (cons v (__ f (f v)))))","user":"55c4cda5e4b0e31453f649a5"},{"problem":62,"code":"#((fn seq-maker [x] (cons x (lazy-seq (seq-maker (% x))))) %2)","user":"547d66a1e4b0c51c1f4d72f2"},{"problem":62,"code":"(fn it [f x]\n    (cons x  (lazy-seq (it f (f x)))))","user":"5957cc41e4b066ee0a44af76"},{"code":"(fn my-iterate [f x] \n  (lazy-seq \n    (cons x (my-iterate f (f x)))))","problem":62,"user":"4ecf42b4535d1f5ad70dba3c"},{"code":"(fn [f x]\n  (map (fn [i]\n         (reduce (fn [v f] (f v))\n                 x\n                 (repeat i f)))\n       (range)))","problem":62,"user":"5225271fe4b01819a2de42f9"},{"problem":62,"code":"(fn it [f x] \n  (reductions (fn [y dummy] (f y)) x (range)) )","user":"575ef4b6e4b08062f99a4e78"},{"problem":62,"code":"(fn g [f v]\n  (cons v (lazy-seq (g f (f v)))))","user":"54acf5c7e4b09f271ff37cdd"},{"code":"(fn xx [f x]\n  (cons x (lazy-seq (xx f (f x) ))))","problem":62,"user":"51b89503e4b050a1176cd69a"},{"problem":62,"code":"(fn itf [f x] (lazy-seq (cons x (itf f (f x)))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":62,"code":"(fn miterate [f x]\n  (lazy-seq (cons x (miterate f (f x)))))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":62,"code":"(letfn [(iter [f x]\n  (cons x (lazy-seq (iter f (f x)))))] iter)","user":"55b6a63ae4b01b9910ae299b"},{"code":"(fn [f n]\n  (letfn [(itr [f n]\n            (lazy-seq (cons n (itr f (f n)))))]\n    (itr f n)))","problem":62,"user":"4f2893d0e4b0d6649770a019"},{"problem":62,"code":"(fn go [f v]\n  (cons v \n        (lazy-seq \n         (go f (f v)))))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"(fn it[fx fst]  \n    (concat [fst] (lazy-seq (it fx (fx fst)  )))\n)","problem":62,"user":"5229211be4b04c906c9c6a63"},{"problem":62,"code":"(fn i\n   [f x] (cons x (lazy-seq (i f (f x)))))","user":"54ab502fe4b09f271ff37cc4"},{"problem":62,"code":"(fn my-iterate\n  [func x]\n  (lazy-seq (cons x (my-iterate func (func x)))))","user":"580d2788e4b0849f6811b730"},{"problem":62,"code":"(fn f [fun x] (lazy-seq (cons x (f fun (fun x))) ))","user":"4e5e9f6b535d8a8b8723a2d2"},{"code":"(fn this [f x]\n  (cons x\n    (lazy-seq\n      (this f (f x)))))","problem":62,"user":"4e68c434535d8ccf87e9fe89"},{"problem":62,"code":"(fn [pred value]\n  (reductions (fn [a _] (pred a)) value (range)))","user":"5a8aa992e4b05369db4d24d8"},{"problem":62,"code":"(fn myiter [f x]\n  (letfn [(rec [next-x]\n               (lazy-seq (cons next-x (rec (f next-x)))))]\n    (rec x)))","user":"5896a0e6e4b00487982d52a8"},{"problem":62,"code":"(letfn [\n (it [f x] \n  (lazy-seq (cons x (it f (f x)))))] it)","user":"510608ebe4b01150e115ebe3"},{"code":"(fn iterate* [f x]\n  (let [f-of-x (f x)]\n    (cons x (lazy-seq (iterate* f (f x))))))","problem":62,"user":"52244a77e4b01819a2de42d1"},{"problem":62,"code":"(fn t [f s]\n  (cons s (lazy-seq (t f (f s)))))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn iter [f x]\n  (lazy-seq\n   (cons x (iter f (f x)))\n   )\n  )","problem":62,"user":"52e59ca5e4b09f7907dd1464"},{"problem":62,"code":"(fn expand [f x] (cons x (lazy-seq (expand f (f x)))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [f init] (loop [counter 100 cur init sequence []] (if (= counter 0) sequence (recur (dec counter) (f cur) (conj sequence cur)))))","problem":62,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":62,"code":"(fn tst [fin x] (lazy-seq (cons x (tst fin (fin x)))))","user":"5b284375e4b063e2438bcc53"},{"code":"(fn [f x]\n  (map #(if (zero? %) x\n          ((apply comp (repeat % f)) x)) (range)))","problem":62,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn iter [f v] (cons v (lazy-seq (iter f (f v)))))","problem":62,"user":"4ea09fa4535d7eef308072aa"},{"code":"(fn F [f x] (cons x (lazy-seq (F f (f x)))))","problem":62,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn repit [f x]\n  (cons x (lazy-seq(repit f (f x)))))","problem":62,"user":"52c42bc2e4b0c2d177d620d0"},{"code":"(fn t [f y] (cons y (lazy-seq (t f (f y)))))","problem":62,"user":"5078d366e4b08327cd804a5b"},{"problem":62,"code":"(fn reit [func v] \n  (cons v (lazy-seq (reit func (func v))))\n)","user":"59ac559ee4b00adcf69795d2"},{"problem":62,"code":"(fn iter [f x]\n             (lazy-seq\n              (cons x (iter f (f x)))))","user":"576b4e6be4b0a07e8fc1812b"},{"problem":62,"code":"(fn itr [f x] \n  (cons x \n        (lazy-seq \n         (itr f (f x)))))","user":"52382d91e4b0fae3832e99f0"},{"problem":62,"code":"(fn [f x]\n  (letfn [(g [n] (cons n (lazy-seq (g (f n)))))]\n    (g x)))","user":"55495318e4b0a04f79299566"},{"code":"(fn _it_ [f init]\n  (cons init (lazy-seq\n              (_it_ f (f init)))))","problem":62,"user":"5163a7bbe4b055933a9ca02f"},{"problem":62,"code":"#(reductions (fn [acc next] (%1 acc)) (repeat %2))","user":"58ee0bb6e4b056aecfd47d97"},{"problem":62,"code":"(fn new-it [f n] ((fn aux [v] (cons v (lazy-seq (aux (f v))))) n))","user":"53e2ac1ae4b036ad0777e3f3"},{"problem":62,"code":"(fn [f x] (reductions (fn [v f] (f v)) x (repeat f)))","user":"4fcf1755e4b03432b189f40c"},{"code":"#(reductions (fn [y g] (g y)) %2 (repeat %1))","problem":62,"user":"4faa9593e4b081705acca1f9"},{"problem":62,"code":"(fn furp [f n]\n  (lazy-seq \n   (cons \n       n \n       (furp f (f n))\n    )\n   )\n  )","user":"59d75e36e4b0ef0a1e9b5c32"},{"code":"(fn iterate*\n  [f x]\n  (cons x (lazy-seq (iterate* f (f x)))))","problem":62,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn my-iterate [func init]\n  (lazy-seq (cons init (my-iterate func (func init)))))","problem":62,"user":"4f4544e1e4b0d56e7bb92b7a"},{"code":"(fn my-iterate [f x]\n    (lazy-seq\n      (cons x (my-iterate f (f x)))))","problem":62,"user":"4ddee37c535d08e6dec9fddc"},{"problem":62,"code":"(fn iter-my [f n]\n  (cons n\n        (lazy-seq\n          (iter-my f (f n)))))","user":"5cf62ecce4b087f62be35aa7"},{"code":"(fn i [f v]\n  (cons\n    v\n    (lazy-seq (i f (f v)))))","problem":62,"user":"4dbdc9da535d020aff1edf4c"},{"problem":62,"code":"(fn paul [fun initial ] \n  (cons initial (lazy-seq (paul fun (fun initial))))\n)","user":"542baf7ce4b0dad94371f291"},{"problem":62,"code":"(fn foo [f i] \n  (lazy-seq (cons i (foo f (f i)))))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn\n  [f x]\n  (letfn [(r [v] (lazy-seq (cons v (r (f v)))))]\n         (r x)))","problem":62,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn a [f x] (cons x (lazy-seq(a f (f x)))))","problem":62,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":62,"code":"(fn foo [f init]\n  (cons init (lazy-seq (foo f (f init))))\n  )","user":"5630fd6fe4b0bfe05bf1178b"},{"code":"(fn iterate--lazy [f x]\n  (lazy-seq (cons x (iterate--lazy f (f x)))))","problem":62,"user":"4fc6305de4b0ee37620e180b"},{"code":"(fn seq [f x]\n  (lazy-seq (cons \n      x \n      (seq f (f x)))))","problem":62,"user":"4ffe4d43e4b0678c553fc3f1"},{"problem":62,"code":"(fn it [f x]\n\n   (cons x (lazy-seq (it f (f x)))))","user":"51427a8be4b0b50abeb46b37"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq \n    (cons x (it f (f x)))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":62,"code":"(fn a[f i] (cons i (lazy-seq (a f (f i)))))","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn [f x]\n  (letfn [(my-iterate [f x]\n           (lazy-seq (cons x (my-iterate f (f x)))))]\n    (my-iterate f x)))","problem":62,"user":"50ed3c6be4b01236b1d4983b"},{"code":"(fn reiterate [f x]\n  (cons x (lazy-seq (reiterate f (f x)))))","problem":62,"user":"4f01ff83535dcb61093f6a3a"},{"code":"(fn __ [f x]\n  (lazy-seq\n   (cons x (__ f (f x)))))","problem":62,"user":"4f29eb2ae4b0d6649770a037"},{"problem":62,"code":"(fn my-iter [f x]\n         (cons x (lazy-seq (my-iter f (f x)))))","user":"5840c068e4b089d5ab817df8"},{"problem":62,"code":"(fn iter [f v]\n  (let [i (fn anon [f v]\n            (let [k (f v)]\n             (lazy-seq (cons k (anon f k)))))]\n    (cons v (i f v))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":62,"code":"(fn [f x]\n    (let [ff (fn iter-in [f x] (lazy-seq (cons (f x) (iter-in f (f x)))))]\n      (cons x (ff f x))))","user":"5920c191e4b09b4ee5954c61"},{"problem":62,"code":"(fn iterate1 [func init]\n                (lazy-seq (cons init (iterate1 func (func init)))))","user":"5d4df658e4b0776584bd6f41"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n   (lazy-seq (cons x (my-iterate f (f x)))))","user":"5f003099e4b0cf489e8d7f17"},{"code":"#(reductions (fn [a b] (%1 a)) (repeatedly (constantly %2)))","problem":62,"user":"4faac363e4b081705acca200"},{"code":"(fn ripeti [f x]\n  (lazy-seq (cons x (ripeti f (f x)))))","problem":62,"user":"52c81954e4b0c2d177d6212e"},{"code":"(fn myint [f x] (lazy-seq (cons x (myint f (f x))) ))","problem":62,"user":"4e14108c535d04ed9115e7dd"},{"code":"(fn ite [f v]\n  (cons v (lazy-seq (ite f (f v))))\n)","problem":62,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":62,"code":"(fn myFn [f x] (lazy-seq (cons x (myFn f (f x)))))","user":"5cf72682e4b0b71b1d808a68"},{"problem":62,"code":"(fn zz [f i]\n\t(lazy-seq (cons i (zz f (f i)))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":62,"code":"(fn f [fn-arg initial-value] (cons initial-value (lazy-seq (f fn-arg (fn-arg initial-value)))))","user":"5280539ce4b0757a1b1713f3"},{"code":"(fn ff [function initial]\n  (cons initial \n        (lazy-seq \n         (ff function (function initial)))))","problem":62,"user":"4e58ef07535d8a8b8723a299"},{"code":"(fn i [f n] \n  (lazy-seq (cons n (i f (f n)))))","problem":62,"user":"4e6a2f93535d8ccf87e9feaa"},{"code":"(fn r[f x] (cons x (lazy-seq (r f (f x)))))","problem":62,"user":"523eb110e4b057c4b7cd0a67"},{"problem":62,"code":"(fn re-implement-iterate [f x]\n  (cons x (lazy-seq (re-implement-iterate f (f x)))))","user":"537e104ce4b06839e8705e9a"},{"code":"(fn i ([f v] (cons v (lazy-seq (i f (f v))))))","problem":62,"user":"4ee868be535d93acb0a6687d"},{"problem":62,"code":"(fn iter [fun val]\n            (cons val\n                  (lazy-seq (iter fun (fun val)))))","user":"53a83c74e4b047364c044426"},{"problem":62,"code":"(fn it [f i] (lazy-cat [i] (it f (f i))))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":62,"code":"(fn my_iterate\n  [f x]\n  (cons x (lazy-seq (my_iterate f (f x)))))","user":"5f6b8222e4b02876ed9fd052"},{"code":"(fn my-iterate [f start]\n  (lazy-seq\n   (cons start (my-iterate f (f start)))))","problem":62,"user":"53889587e4b0640c7a9a589e"},{"problem":62,"code":"(fn ite [f x] (cons x (lazy-seq (ite f (f x)))))","user":"53de622ce4b0d874e779ae34"},{"problem":62,"code":"(fn [f start]\n    (let [a (atom start)]\n      (cons start (repeatedly #(swap! a f)))\n      )\n    )","user":"53c3397be4b00fb29b221279"},{"problem":62,"code":"(fn lol [op ini] \n  (lazy-seq\n  (cons ini (lol op (op ini)))\n  )\n  )","user":"544e1794e4b0e39780006980"},{"problem":62,"code":"(fn it [f init]\n  (cons init (lazy-seq (it f (f init))))  \n)","user":"5cfd5a93e4b0cc9c91588168"},{"problem":62,"code":"(fn toto [f n] \n  (let [my-f (fn my-iterate\n\t\t\t\t\t\t([] (my-iterate n))\n\t\t\t\t\t\t([x] (cons x (lazy-seq (my-iterate (f x))))))]\n    (my-f)\n    )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"code":"#(map-indexed (fn [n x] ((apply comp (repeat n %1)) %2)) (repeat 1))","problem":62,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":62,"code":"(fn iter\n  ([f x]\n   (cons x (lazy-seq (iter f (f x))))))","user":"5991eec7e4b0866487ed0d6e"},{"problem":62,"code":"(fn iter [f, x] (lazy-seq (cons x (iter f (f x)))))","user":"535558b9e4b04ce2eb3ed25a"},{"code":"(fn ff [f x] (lazy-seq (cons x (ff f (f x)))))","problem":62,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn it [f x]\n  (lazy-seq (cons x (it f (f x)))))","problem":62,"user":"4e96557d535dbda64a6f6b43"},{"problem":62,"code":"(fn re-iterate [f x] (cons x (lazy-seq (re-iterate f (f x)))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":62,"code":"(fn it[f x] (cons x (lazy-seq ( it f (f x)))))","user":"552800d7e4b0ffed3738f93a"},{"code":"(fn my-i [f x] (cons x (lazy-seq (my-i f (f x)))))","problem":62,"user":"51740b65e4b0d277d717bc67"},{"problem":62,"code":"(fn my-iter [myfn x]\n  (cons x (lazy-seq (my-iter myfn (myfn x)))))","user":"550609b3e4b021ccfedb9695"},{"code":"(fn iterate-imp\n      [f x]\n     (cons x (lazy-seq (iterate-imp f (f x)))))","problem":62,"user":"52c3a0f4e4b0c2d177d620c6"},{"problem":62,"code":"(fn f [func n] (cons n (lazy-seq (f func (func n)))))","user":"5bc39d2be4b07a9b28b10045"},{"code":"(fn iter [f arg]\n  ((fn iterante [n] (cons n (lazy-seq (iterante (f n)))))  arg))","problem":62,"user":"522048b3e4b0e6c71e0c0c16"},{"problem":62,"code":"(fn it [fun begin]\n  (lazy-seq (cons begin (it fun (fun begin)))))","user":"57b55290e4b0fbc9809a27a9"},{"problem":62,"code":"(fn func [f x]\n  (lazy-seq \n    (cons x \n     (lazy-seq \n       (func f (f x))))))","user":"54236ce1e4b01498b1a71ad1"},{"problem":62,"code":"(fn mlz [f x]\n  (lazy-seq\n   (cons x (mlz f (f x)))))","user":"51e8ee6be4b07cae92c04bfd"},{"code":"(fn m [f p] (cons p (lazy-seq (m f (f p)))))","problem":62,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn ! [f x] (cons x (lazy-seq (! f (f x)))))","problem":62,"user":"4dd579b5535dae65d5c462ea"},{"problem":62,"code":"(fn rec [f v]\n  (lazy-seq (cons v\n                  (rec f (f v)))))","user":"58b06b7ce4b0ebc645576cdc"},{"problem":62,"code":"(fn my-iterate [f, x]\n\t(lazy-cat [x] (lazy-seq (my-iterate f (f x)))))","user":"57644395e4b0994c1922fbf2"},{"problem":62,"code":"(fn my-iterate[f x] (lazy-seq (cons x (my-iterate f (f x)))))","user":"5ce2b15fe4b0a17bb84e2b2c"},{"problem":62,"code":"(fn iter_ate [f x] (lazy-seq (cons x (iter_ate f (f x)))))","user":"5872935ce4b01531a375ea1d"},{"code":"(fn inf [f s] (cons s (lazy-seq (inf f (f s)))))","problem":62,"user":"4f49108ae4b0d56e7bb92be5"},{"problem":62,"code":"(fn fb ([f b] (lazy-seq (cons b (fb f (f b))))))","user":"57de5f0ee4b0bd073c202450"},{"problem":62,"code":"(fn fake-iter [f x]\n        (cons x (lazy-seq (fake-iter f (f x)))))","user":"553093bee4b076ab5578f817"},{"code":"(fn F [f x] (lazy-cat [x] (F f (f x))))","problem":62,"user":"50464831e4b011c5dfee771f"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x))))\n)","user":"5943abb6e4b060784b3b792b"},{"problem":62,"code":"(fn foo\n  [f x]\n  (cons x (lazy-seq (foo f (f x)))))","user":"5ddb8a6ee4b0948ae9d9adb2"},{"problem":62,"code":"(fn iter [f initial-value]\n  (lazy-seq (cons initial-value\n                  (iter f (f initial-value)))))","user":"5ce077e9e4b0a17bb84e2b0c"},{"code":"(fn my-iterate [f x]\n  (cons\n    x\n    (lazy-seq\n      (my-iterate f (f x))\n    )\n  )\n)","problem":62,"user":"51f09f3de4b0274c496158d7"},{"problem":62,"code":"(fn ite [f n] (cons n (lazy-seq (ite f (f n)))))","user":"53ee7f2ee4b0d648e757f4cf"},{"code":"(fn my-it [f x] (lazy-seq (cons x (my-it f (f x)))))","problem":62,"user":"4e89ddf9535d3e98b8023284"},{"problem":62,"code":"(fn iter\n  [f n]\n  (lazy-seq (cons n (iter f (f n)))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn dog1 [f x]\n  (cons x (lazy-seq (dog1 f (f x)))))","problem":62,"user":"4daedd1eedd6309eace4d164"},{"code":"(fn hi [f x]\n  (cons x (lazy-seq (hi f (f x)))))","problem":62,"user":"4ff3e771e4b0678c553fc356"},{"problem":62,"code":"(fn z[f x]\n    (lazy-seq (cons x (z f (f x)))))","user":"539f9f79e4b0ca733b97449e"},{"problem":62,"code":"(fn bla [ f x ]\n  (cons x (lazy-seq (bla f (f x)))))","user":"59f90e6ae4b0ca45a743a337"},{"code":"(fn it [f x]\n  (lazy-seq\n    (cons x (it f (f x)))))","problem":62,"user":"4ec07699535dfed6da9c6da2"},{"problem":62,"code":"(fn reiterate [f init]\n  (cons init\n    (lazy-seq\n      (reiterate f (f init)))))","user":"5e9d1c75e4b0157ca9664801"},{"problem":62,"code":"(fn foo [f x]\n  (lazy-seq\n   (cons x\n         (foo f (f x)))))","user":"5defc177e4b093ff717275af"},{"problem":62,"code":"(fn iter [f v]\n  (lazy-seq\n    (cons v (iter f (f v)))\n  )\n)","user":"5bbd13a5e4b07a9b28b0ff95"},{"problem":62,"code":"(fn r [fun init] (cons init (lazy-seq (r fun (fun init)))))","user":"5831846ae4b051871117c02c"},{"code":"(fn itr [f x] (let [n (f x)] (lazy-seq (cons x (itr f n)))))","problem":62,"user":"4efd8b67535de96065cf5085"},{"problem":62,"code":"(fn inf [f i]\n  (cons i (lazy-seq (inf f (f i)))))","user":"4fe49706e4b0e8f79898feb7"},{"problem":62,"code":"(fn lazySeq [x y] (lazy-seq (cons y (lazySeq x (x y)))))","user":"5576e78de4b05c286339e075"},{"problem":62,"code":"(fn g [f, o]\n  (lazy-seq (cons o (g f (f o)))))","user":"593d6793e4b069cdc2982ba6"},{"problem":62,"code":"(fn f1 [f v]\n  (lazy-seq\n   (cons v (f1 f (f v)))))","user":"55ff562fe4b00f4cabc57660"},{"code":"(fn my-it [f x]\n  (cons x (lazy-seq (my-it f (f x)))))","problem":62,"user":"506b8242e4b0eda3100c090a"},{"code":"(fn compose[function x]\r\n    (cons x (lazy-seq (compose function (function x)))))","problem":62,"user":"4dddf817535d08e6dec9fdd3"},{"problem":62,"code":"(fn myiter\n  ([f start] (myiter f start 0))\n  ([f n mock1] (lazy-seq (cons n (myiter f (f n) mock1)))))","user":"5be58beae4b0ed4b8aab4d14"},{"code":"(fn forever [f x] (lazy-seq (cons x (forever f (f x)))))","problem":62,"user":"51fc44c5e4b0f1313d468a1b"},{"problem":62,"code":"(fn iterat [f i]\n  (lazy-seq (cons i (iterat f (f i)))))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":62,"code":"(fn my-iterate [f n]\n    (lazy-seq (cons n (my-iterate f (f n)))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn iter \n  ([f x] (iter f x (f x)))\n  ([f a b] (cons a (lazy-seq (iter f b (f b))))))","problem":62,"user":"523c6451e4b07becd5be2222"},{"code":"(fn myit[f v] (cons v (lazy-seq (myit f (f v)))))","problem":62,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn F [f x] (lazy-seq (cons x (F f (f x)))))","problem":62,"user":"4ee82539535d93acb0a66878"},{"problem":62,"code":"(fn new-iterate\n  [f n]\n  (cons n (lazy-seq (new-iterate f (f n)))))","user":"550d9452e4b06e50f9beb15d"},{"problem":62,"code":"(fn iterator [f i]\n  (cons i (lazy-seq (iterator f (f i)))))","user":"5af31955e4b0cc2b61a3bc7a"},{"problem":62,"code":"(fn [f x]\n  (let [t (atom x)]\n    (lazy-cat [x] (repeatedly #(swap! t f)))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn it2 [f x ] \r\n  (lazy-seq \r\n    (cons x (it2 f (f x)))))","problem":62,"user":"502a9fdee4b095a7adb898b4"},{"code":"#(reductions (fn [a _] (% a)) %2 (range))","problem":62,"user":"512f06c5e4b0762be4c7aad7"},{"problem":62,"code":"(fn iter\n  [f v]\n  (cons v (lazy-seq (iter f (f v )))))","user":"50ec409ce4b04edc33777045"},{"problem":62,"code":"(fn ThisFunc [F StartValue]\n      (lazy-seq\n        (cons StartValue (ThisFunc F (F StartValue)))\n      )\n    )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn __ [f x] \n  (lazy-seq \n   (cons x\n         (lazy-seq (__ f (f x))) )))","problem":62,"user":"52be0263e4b07a9af579230e"},{"code":"(fn it [f x] (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4e44358f535dc968683fc4a8"},{"problem":62,"code":"(fn iter\n  [f a]\n  (lazy-seq (cons a (iter f (f a)))))","user":"59c7c2cde4b0a024fb6ae54b"},{"problem":62,"code":"(fn iterate- [f value]\n  (cons value\n        (lazy-seq\n         (iterate- f (f value)))))","user":"573102bbe4b0cd1946bd0fbb"},{"problem":62,"code":"(fn my-iterate [f x] (cons x (lazy-seq ( my-iterate f (f x)))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn a [f x]\n  (lazy-seq (cons x (a f (f x)))))","problem":62,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn iter8 [f x] (cons x (lazy-seq (iter8 f (f x)))))","problem":62,"user":"5341b141e4b00652c8746ecf"},{"problem":62,"code":"(fn iter [f initial]\n  (cons initial\n        (lazy-seq (iter f (f initial)))))","user":"53f2370ee4b0742d9025b0e7"},{"problem":62,"code":"(fn my-iterate [func the-num]\n  (lazy-seq \n   (cons the-num (my-iterate func (func the-num)) ))\n  )","user":"56bff105e4b060a8e693e3a4"},{"problem":62,"code":"(fn f [fun e]\n  (cons e (lazy-seq (f fun (fun e)))))","user":"5478e57de4b0c51c1f4d72c1"},{"problem":62,"code":"(fn my-iterate [f ret] \n  (lazy-seq \n    (cons \n      ret \n      (my-iterate f (f ret)))))","user":"5976da27e4b01722bebd4ce3"},{"code":"(fn i          [f x] `(~x ~@(lazy-seq (i f (f x)))))","problem":62,"user":"52746701e4b03e8d9a4a74a2"},{"code":"(fn iter \n\t  [f x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"52016fd3e4b0b2e020a18f10"},{"problem":62,"code":"(fn myfn [f n1] (lazy-seq (cons n1 (myfn f (f n1)))))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn my-f [f init]\n  (lazy-seq (cons init (my-f f (f init)))))","problem":62,"user":"527dc2aee4b0757a1b17138d"},{"problem":62,"code":"(fn my-iterate [f x]\n    (lazy-seq (cons x (my-iterate f (f x)))))","user":"538ca203e4b0b51d73faae5f"},{"code":"(fn __ [f n]\n  (lazy-seq\n   (cons n\n         (__ f (f n)))))","problem":62,"user":"512d3304e4b040332b905b2d"},{"problem":62,"code":"(fn itreight [f x]\n \t(lazy-seq (cons x (itreight f (f x)))))","user":"54ad9d76e4b09f271ff37ce6"},{"problem":62,"code":"(fn i\n  [f x]\n  (lazy-seq\n   (cons x (i f (f x)))))","user":"5893c64ce4b00487982d524b"},{"problem":62,"code":"(fn myIterate [f n] (cons n (lazy-seq (myIterate f (f n)))))","user":"5a6170fde4b0512ff01cd975"},{"code":"(fn [f x]\n  (let [napply (fn [f x n]\n                  (reduce #(%2 %1) x (take n (repeat f))))]\n    (map (partial napply f x) (range))))","problem":62,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn myiterate [f val] (cons val (lazy-seq (myiterate f (f val)))))","problem":62,"user":"4f515bd3e4b03ad3f0c10d1f"},{"problem":62,"code":"(fn s [f x]\n  (cons x (lazy-seq (s f (f x)))))","user":"54924f64e4b0b312c081ff42"},{"problem":62,"code":"(fn k\n  [f x]\n  (lazy-seq (cons x (k f (f x)))))","user":"5e1c24f4e4b0dc959400852d"},{"problem":62,"code":"(fn a [f,i] (lazy-seq ( cons i (a f (f i)))))","user":"585d40afe4b0f14aab7c8798"},{"code":"(fn my-iterate\n  [f x]\n  (lazy-seq (cons x (my-iterate f (f x)))))","problem":62,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn itr [fun x] (cons x (lazy-seq (itr fun (fun x)))))","problem":62,"user":"5137c3b0e4b0509a8b470482"},{"problem":62,"code":"(fn iterate-me\n  [f v]\n  (for [x (range)]\n    ((apply comp (repeat x f)) v)))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn i [f v]\n  (lazy-seq \n    (cons v (i f (f v)))))","problem":62,"user":"4ee3afde535d10e5ff6f5370"},{"code":"(fn x [f i] (lazy-seq (cons i (x f (f i)))))","problem":62,"user":"4db92654535d1e037afb21a0"},{"code":"(fn my-iterate\n  [f i]\n    (cons i (lazy-seq (my-iterate f (f i)))))","problem":62,"user":"507a08e4e4b08327cd804a67"},{"code":"(fn i [f v] (cons v (lazy-seq (i f (f v)))))","problem":62,"user":"4dc1bd76535d020aff1edf8d"},{"code":"(fn itr [f x] (lazy-cat [x] (itr f (f x) ) ))","problem":62,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":62,"code":"(fn [f x]\n  (cons x ((fn it [f x]\n            (let [newx (f x)]\n              (cons newx (lazy-seq (it f newx))))) f x)))","user":"54487527e4b032a45b8693cc"},{"problem":62,"code":";(fn iter [f x] (lazy-seq (cons x (iter f (f x)))))\n(fn iter [f x] (lazy-cat [x] (iter f (f x))))","user":"60794173e4b0a637ed78035d"},{"problem":62,"code":"(fn itr [f x]\n  (let [nw (f x)]\n    (lazy-seq\n     (cons x (itr f nw)))))","user":"5f90aeefe4b0715f5002d799"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq\n    (cons x\n          (iter f (f x)))))","user":"544b699ce4b0e39780006964"},{"code":"(fn _iterate [function value]\n  (cons value (lazy-seq (_iterate function (function value)))))","problem":62,"user":"510cd1dde4b078ea71921124"},{"problem":62,"code":"#(reductions (fn [a _] (% a)) (repeat %2))","user":"54055aa9e4b0addc1aec6665"},{"code":"(fn my [f n]\n  (lazy-seq\n    (cons n (my f (f n)))))","problem":62,"user":"4f504739e4b03ad3f0c10d00"},{"problem":62,"code":"#(letfn [(itr [f x]\n           (cons x (lazy-seq (itr f (f x)))))]\n   (itr %1 %2))","user":"52950ab6e4b02ebb4ef7501a"},{"code":"(fn my-it [f x]\n  (cons x (lazy-seq (f x) (my-it f (f x)))))","problem":62,"user":"5361a4f2e4b0243289761e47"},{"code":"(fn iterate* [f x] \n    (cons x \n          (lazy-seq (iterate* f (f x)))))","problem":62,"user":"4edb314d535d10e5ff6f5317"},{"problem":62,"code":"(fn foo [func val] \n  (cons val (lazy-seq (foo func (func val)))))","user":"561f9110e4b064ca9f4b16ce"},{"problem":62,"code":"(fn iter-recur [func start]\n  (lazy-seq \n     (let [computed (func start)]\n       (cons start (iter-recur func computed)))))","user":"5553b729e4b0deb715856e05"},{"problem":62,"code":"(fn iter [ f x ]\n   (cons x (lazy-seq (iter f (f x)))) \n  \n )","user":"5ac85708e4b0e27600da77ac"},{"problem":62,"code":"(fn iterate- [f i]\n  (cons i\n        (lazy-seq (iterate- f (f i)))))","user":"5aba04dce4b073f17744269e"},{"problem":62,"code":"(fn i [fun ini]\n  (cons ini (lazy-seq (i fun (fun ini)))))","user":"57f8104ce4b0d3187e900910"},{"problem":62,"code":"(fn miterate [f x]\n  (lazy-seq\n    (cons x (miterate f (f x)))))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"code":"(fn iterate2 [f x]\n  (lazy-seq (cons x (iterate2 f (f x))))\n)","problem":62,"user":"4f03641a535dcb61093f6a9b"},{"problem":62,"code":"(fn g [f x]\n  (lazy-seq\n   \t(cons x (g f (f x)))))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"code":"(fn soln [f init]\n  (lazy-seq\n    (cons init (soln f (f init)))))","problem":62,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [f x]\n  (let [a (fn a [s]\n            (concat s\n                    (lazy-seq (a (list (f (last s)))))))]\n    (a (list x))))","problem":62,"user":"5175616ae4b0dea9bbfba576"},{"code":"(fn newiter [f x]\n  (cons x (lazy-seq (newiter f (f x)))))","problem":62,"user":"5098f5d6e4b0cae2931060a4"},{"problem":62,"code":"(fn it [f x]                                                                                                         \n  (lazy-seq (cons x (it f (f x)))))","user":"56ecc4b5e4b04a395b9a043e"},{"problem":62,"code":"(fn f \n  [func init]\n  (cons init (lazy-seq (f func (func init)))))","user":"55a62092e4b0acc240e31554"},{"problem":62,"code":"(fn myIterate [f num]\n              (lazy-seq (cons num (myIterate f (f num)))))","user":"5c74b043e4b0fca0c16227ce"},{"code":"(fn iter [f x]\n   (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"5202cfe7e4b030ee0c5b2702"},{"code":"(fn [f x]\r\n    (letfn [(foo [x]\r\n                 (lazy-seq (cons x (foo (f x)))))]\r\n      (foo x)))","problem":62,"user":"4e26e8b4535deb9a81d77ef6"},{"code":"(fn m [f i] (cons i (lazy-seq (m f (f i)))))","problem":62,"user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn my-iterate [f init]\n  (cons init (lazy-seq (my-iterate f (f init)))))","problem":62,"user":"5080a697e4b01a93d3f38e49"},{"problem":62,"code":"(fn fun [userFun x]\n  (lazy-seq (cons x (fun userFun (userFun x) )))\n)","user":"5da20e73e4b000c986472be1"},{"problem":62,"code":"(fn g [f x] \n  (cons x \n        (lazy-seq \n         (g f (f x)))))","user":"5409a12fe4b0addc1aec66df"},{"code":"(fn reiterater [f x]\n  (cons x (lazy-seq (reiterater f (f x))))\n)","problem":62,"user":"52ba43d0e4b07a9af57922cd"},{"problem":62,"code":"(fn re-iterate [f x] \n  (cons x (lazy-seq (re-iterate f (f x)))))","user":"554bced1e4b0a04f79299599"},{"code":"(fn foo [f init] (lazy-cat [init] (foo f (f init))))","problem":62,"user":"50166470e4b052339a490e76"},{"code":"(fn re-iterate\n  [f starter]\n  (lazy-seq\n    (cons starter\n      (re-iterate f (f starter)))))","problem":62,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn self [f a] (cons a (lazy-seq (self f (f a)))))","problem":62,"user":"4f77b68de4b0fbe0118ec581"},{"problem":62,"code":"(fn p62 [f x] (cons x (lazy-seq (p62 f (f x)))))","user":"5d3ae729e4b01671435dbd5d"},{"code":"(fn lziter [f x]\n  (cons x (lazy-seq (lziter f (f x)))))","problem":62,"user":"523bd9c0e4b07becd5be2201"},{"problem":62,"code":"(fn [func arg1] ((fn test-fn ([] (test-fn arg1)) ([n] (lazy-seq (cons n (test-fn (func n))))))))","user":"5720ba36e4b0c5bde472c09c"},{"problem":62,"code":"(fn iter\n  [f init]\n  (lazy-seq (cons init (iter f (f init))))\n  )","user":"56edf2dde4b04a395b9a044b"},{"code":"(fn iter [f x]\n\t(cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":62,"code":"(fn iter\n  ([f start]\n   (lazy-seq\n    (cons start (iter f (f start))))))","user":"602d5eade4b0d5df2af22279"},{"code":"(fn my-iterate [f e]\n  (lazy-seq (cons e (my-iterate f (f e)))))","problem":62,"user":"4e7f8f85535db966e863cc44"},{"problem":62,"code":"(fn iterate- [x y] (cons y (lazy-seq (iterate- x (x y)))))","user":"567e6d24e4b0feffd0d18eb4"},{"code":"(fn [f x]\n  (for [i (range)]\n    ((apply comp (repeat i f)) x)))","problem":62,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":62,"code":"(fn my-iterate [f, s]\n    (reductions (fn[a,_](f a)) (repeat s)))","user":"5443cb97e4b032a45b86938a"},{"problem":62,"code":"(fn abc\n  [f x]\n    (cons x (lazy-seq (abc f (f x))))\n)","user":"56bb3a4be4b0f26550335951"},{"problem":62,"code":"(fn myf [f x]\n  (lazy-seq (cons x (myf f (f x)))))","user":"56fa8984e4b07572ad1a88c1"},{"problem":62,"code":"(fn m4 [f x] (cons x (lazy-seq (m4 f (f x)))))","user":"539c9d7ee4b0b51d73faaf2d"},{"problem":62,"code":"(fn iter- [func x]\n    (lazy-seq\n        (cons x (iter- func (func x)))))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":62,"code":"(fn my-iter [f val]\n    (cons val (lazy-seq (my-iter f (f val)))))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn iter[f x](cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4fbcbd50e4b081705acca2f9"},{"code":"(fn g [f z] (lazy-seq (cons z (g f (f z)))))","problem":62,"user":"4e7e55ab535db169f9c79711"},{"problem":62,"code":"(fn iterate' [f a]\n  (lazy-seq (cons a (iterate' f (f a)))))","user":"5630ce72e4b0bfe05bf11786"},{"problem":62,"code":"(fn re-it [f x] (cons x (lazy-seq (re-it f (f x)))))","user":"55b527cbe4b01b9910ae2985"},{"code":"(fn it [f n]\n           (cons n (lazy-seq (it f (f n)))))","problem":62,"user":"50cae881e4b0f75dcc9a6e51"},{"problem":62,"code":"(fn itrt [fun val]\n           (lazy-seq\n            (cons val (itrt fun (fun val)))))","user":"5d5c6675e4b09db18d4482ec"},{"code":"(fn f' [f x] (lazy-seq (cons x (f' f (f x)))))","problem":62,"user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn ite [f arg]\n          (cons arg\n                (lazy-seq (ite f (f arg)))))","problem":62,"user":"51cacda3e4b068dadb8f2227"},{"code":"(fn my-iterate [f v]\n  (lazy-seq (cons v (my-iterate f (f v)))))","problem":62,"user":"4ec75077535d6d7199dd36e0"},{"problem":62,"code":"(fn my-iterate [f x] (reductions (fn [x _] (f x)) x (range)))","user":"59a24c92e4b066c664927d20"},{"problem":62,"code":"(fn f\n    [fun x]\n    (lazy-seq\n      (cons x (f fun (fun x)))))","user":"56df62eee4b0ca2494a095f0"},{"code":"(fn reiterate [f x] (cons x (lazy-seq (reiterate f (f x)))))","problem":62,"user":"52319066e4b0e2e8de81d1e9"},{"problem":62,"code":"(fn itr8 [f x] (lazy-seq (cons x (itr8 f (f x)))))","user":"579d9601e4b05b1deef9ae18"},{"problem":62,"code":"(fn my-iter [f x]\n        (cons x (lazy-seq (my-iter f (f x)))))","user":"541f89a5e4b01498b1a71a99"},{"problem":62,"code":"(fn blah [f x]\n  (lazy-seq (cons x (blah f (f x)))))","user":"4fec08e8e4b0681fd128dc9d"},{"problem":62,"code":"(fn lzsq [f x]\n  (lazy-seq (cons x (lzsq f (f x)))))","user":"576aea4fe4b0a07e8fc18126"},{"problem":62,"code":"(fn produce-infinite-seq\n  [f x]\n  (cons x (lazy-seq (produce-infinite-seq f (f x)))))","user":"58a34442e4b02bd94d917ef2"},{"problem":62,"code":"(fn self [f init]\n  (cons init (lazy-seq (self f (f init)))))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn myit [f x] (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"4ed94d69535d10e5ff6f5303"},{"code":"(fn iter [f x]\n  (cons x\n        (lazy-seq\n         (iter f (f x)))))","problem":62,"user":"5336ca32e4b0e30313ee6c80"},{"problem":62,"code":"(fn [f x]\n  (letfn [(fseq [] (lazy-cat [x] (map f (fseq))))]\n    (fseq)))","user":"51b920bfe4b0e871ca4958f9"},{"problem":62,"code":"(fn _iterate\r\n  [f x]\r\n  (lazy-seq \r\n    (cons x (_iterate f (f x)))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":62,"code":"(fn soln [f f0]\n   (lazy-seq (cons f0 (soln f (f f0)))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":62,"code":"(fn [func x]\n  (map #(loop [n %\n                x x]\n           (if (zero? n) \n                x\n                 (recur (dec n) (func x))))\n       (range)))","user":"5f77d470e4b02876ed9fd0be"},{"problem":62,"code":"(fn custom-iterate\n  [f init]\n  (cons init\n        (lazy-seq (custom-iterate f (f init)))))","user":"4fc524aae4b081705acca37e"},{"problem":62,"code":"(fn step [f arg]\n  (cons arg (lazy-seq (step f (f arg))) ))","user":"5722bf99e4b0c5bde472c0d6"},{"problem":62,"code":"(fn a[f x]\n  (cons x (lazy-seq (a f (f x)))))","user":"5fe09d1fe4b05ac5b16ea15b"},{"code":"(fn my-iterate\n  [f x]\n  (lazy-seq\n   (cons x (my-iterate f (f x)))))","problem":62,"user":"4fae4c11e4b081705acca248"},{"problem":62,"code":"(fn my-iterate [f value]\n  (cons value\n    (lazy-seq(my-iterate f (f value)))))","user":"5bbbce70e4b0a20761a2360f"},{"problem":62,"code":"(fn _iterate [f x] (\n           cons x (lazy-seq (_iterate f (f x)))))","user":"54361d92e4b032a45b8692f7"},{"code":"(fn [f i] (map #(loop [val i x %1] (if (zero? x) val (recur (f val) (dec x)))) (range)))","problem":62,"user":"50112acee4b0d82cfac69f4c"},{"problem":62,"code":"(fn f ([f2] (f f2 2)) ([f2 n] (lazy-seq (cons n (f f2 (f2 n))))))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"(fn iter8 [f arg]\r\n  (cons arg (lazy-seq (f arg) (iter8 f (f arg)))))","problem":62,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":62,"code":"(fn it [f, x]\n  (lazy-seq (cons x (it f (f x)))))","user":"56e02c1ce4b0ca2494a09602"},{"problem":62,"code":"(fn my-iterate\n  ([f a] (lazy-seq (cons a (my-iterate f (f a)))))\n  )","user":"5826a843e4b051871117befd"},{"code":"(fn g [f n] (lazy-seq (cons n (g f (f n)))))","problem":62,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn my-iterate [f i] (lazy-seq (cons i (my-iterate f (f i)))))","problem":62,"user":"4ed45563535d10e5ff6f52c9"},{"code":"(fn myit [f arg] (lazy-seq (cons arg (myit f (f arg)))))","problem":62,"user":"4e6dc95a535d5021c1a895f1"},{"problem":62,"code":"(fn iterize\n  [f x]\n  (lazy-seq \n   (cons\n    x \n    (iterize\n     f \n     (f x)))))","user":"51b01309e4b0c53cf2e68a57"},{"problem":62,"code":"(fn iterate*\n  [f i]\n  (lazy-seq (cons i (iterate* f (f i)))))","user":"5c35acffe4b0d62ef62d9f62"},{"code":"(fn [f x]\n  ((fn i\n    ([] (i x))\n    ([n] (cons n (lazy-seq (i (f n))))))))","problem":62,"user":"505d4b21e4b0e6aca564be07"},{"problem":62,"code":"(fn R[f x](lazy-seq(cons x (R f (f x)))) )","user":"6001460ce4b074f607df6611"},{"code":"(fn foo [f x]\n  (lazy-cat [x] (foo f (f x))))","problem":62,"user":"5055899de4b0ce54f56f03fd"},{"code":"(fn fun [f x]\n  (lazy-seq\n    (cons x (fun f (f x)))))","problem":62,"user":"52c58440e4b0c2d177d620f7"},{"problem":62,"code":"(fn [f x]\n  (letfn \n    [(aux [f x]\n      (lazy-seq\n        (cons x\n        (aux f (f x)\n        ))))\n    ]\n  (aux f x)))","user":"5e94ff5fe4b0fbed045a37ff"},{"code":"(fn iter [f c] (cons c (lazy-seq (iter f (f c)))))","problem":62,"user":"4f98b69ae4b0dcca54ed6cf4"},{"code":"(fn nest [f s] (lazy-seq (cons s (nest f (f s)))))","problem":62,"user":"510931ede4b0c71f76895663"},{"problem":62,"code":"(fn p66 [f x]\n  (lazy-seq\n   (cons x (p66 f (f x)))))","user":"568227fee4b0945ebc182a8a"},{"problem":62,"code":"(fn i \n  ([f x] (i f x x))\n  ([f x acc] (lazy-seq (cons acc (i f x (f acc))))))","user":"5156e767e4b04360f2428e6b"},{"problem":62,"code":"(fn ite [fx x]\n  (cons x (lazy-seq (ite fx (fx x)))))","user":"5b522591e4b02d533a91bd09"},{"code":"(fn self [f v] \n  (cons v (lazy-seq (self f (f v)))))","problem":62,"user":"4eb955da535dfed6da9c6d50"},{"problem":62,"code":"(fn it [f x]\n  (cons x\n   (lazy-seq (it f (f x)))\n   )\n  )","user":"608ee2f7e4b03bd49d9f36c1"},{"code":"(fn iter [f start] (lazy-seq (cons start (iter f (f start)))))","problem":62,"user":"4ed55b5d535d10e5ff6f52d8"},{"problem":62,"code":"(fn r [f x]\n  (cons x\n        (lazy-seq\n        (r f (f x)))))","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":62,"code":"(fn my-iterate [f val] (cons val (lazy-seq (my-iterate f (f val)))))","user":"54149f2fe4b01498b1a719ec"},{"problem":62,"code":"(fn recur- [f init]\n    (lazy-seq \n        (cons init \n            (recur- f (f init)))))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"problem":62,"code":"(fn iter [f x]\n   (lazy-seq (cons x (iter f (f x)))))","user":"55f6f1d3e4b06e875b46cea0"},{"problem":62,"code":"(fn _iterate [f, x] \n  (cons x (lazy-seq (_iterate f (f x)))))","user":"5606a4ace4b08b23635d3175"},{"problem":62,"code":"(fn iter [f initial]\n  (lazy-seq\n    (cons\n      initial\n      (iter f (f initial))\n      )\n    ))","user":"55ddc5cbe4b050e68259b3d0"},{"code":"(fn myiter [f x]\n  (lazy-seq\n    (cons x (myiter f (f x)))))","problem":62,"user":"4e80aa10535db62dc21a62b1"},{"code":";(fn iter [f x]\n;  (lazy-cat [x] (iter f (f x))))\n\n(fn [f x] (reductions (fn [r x] (f r)) x (range)))","problem":62,"user":"50d8f4b6e4b01f0871336e74"},{"problem":62,"code":"(fn [func init] \n  (map-indexed \n   (fn [idx b] \n     (if (> idx 0) ((apply comp (repeat idx func)) init) init)) \n   (repeat init)))","user":"5628f33ce4b00e49c7cb47f3"},{"problem":62,"code":"(fn [f x]\n  (reductions (fn [acc _] (f acc))\n              (repeat x)))","user":"58e58ae9e4b056aecfd47c9a"},{"code":"(fn it [f i] (cons i (lazy-seq (it f (f i)))))","problem":62,"user":"4f614976e4b0defedf855fbb"},{"problem":62,"code":"(fn dd[fun curr]\n  (lazy-seq (cons curr (dd fun (fun curr)))))","user":"55f01316e4b06e875b46ce1a"},{"code":"(fn iterate' [f x]\n    (cons\n      x\n      (lazy-seq (iterate' f (f x)))))","problem":62,"user":"508157b2e4b0946d0443855c"},{"code":"(fn my-iterate [func initial]\n  (lazy-seq (cons initial (my-iterate func (func initial)))))","problem":62,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":62,"code":"(fn my-iterate [fn_ init-val]\n  (lazy-seq (cons init-val (my-iterate fn_ (fn_ init-val)))))","user":"57ea4569e4b0bfb2137f5b46"},{"code":"(fn ! [op sd](lazy-seq (cons sd (! op (op sd)))))","problem":62,"user":"4ed2dd98535d44c135fd68e2"},{"code":"(fn iterat [f x] (cons x ((fn iterate* [f x] (lazy-seq (cons (f x) (iterate* f (f x))))) f x)))","problem":62,"user":"534d1173e4b084c2834f4a98"},{"problem":62,"code":"(fn iterator [f x] (cons x (lazy-seq (iterator f (f x)))))","user":"525b4e8de4b0cb4875a45d0f"},{"code":"(fn it [f s] (lazy-seq (cons s (it f (f s)))))","problem":62,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":62,"code":"(fn re-iter [f x] \n  (cons x (lazy-seq (re-iter f (f x)))))","user":"55aa8276e4b0988bba2ad94e"},{"problem":62,"code":"(fn reimplement-iterate [f x]\n  (cons x (lazy-seq (reimplement-iterate f (f x)))))","user":"52616198e4b03e8d9a4a705e"},{"problem":62,"code":"(fn iter [fun v]\n       (lazy-seq (cons v (iter fun (fun v)))))","user":"5a0ef454e4b04bbd27e6d9fa"},{"problem":62,"code":"(fn f [fi x] (lazy-seq (cons x (f fi (fi x)))))","user":"5d7d17ece4b02e6b30c93558"},{"code":"(fn iterate* [f x]\n  (lazy-seq (cons x (iterate* f (f x)))))","problem":62,"user":"4f06dcad535dcb61093f6c16"},{"code":"(fn [f x]\n  (map\n    (fn rep [f x n]\n      (if (= n 0)\n        x\n        (f (rep f x (dec n)))))\n    (repeat f)\n    (repeat x)\n    (range)))","problem":62,"user":"51377c10e4b04059df19f305"},{"problem":62,"code":"(fn it2 [f x]\n  (cons x (lazy-seq (it2 f (f x)))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"code":"(fn l[f x]\n  \t      (lazy-seq\n\t\t\t(cons x (l f (f x)))))","problem":62,"user":"4e842ebb535db62dc21a62df"},{"problem":62,"code":"(fn it [f v] (lazy-seq (cons v (it f (f v) ))))","user":"564a560ae4b0284900eef654"},{"problem":62,"code":"(fn [f x] \n  (map \n   #((apply comp (repeat % f)) x) \n   (range)))","user":"56327168e4b0bfe05bf117a5"},{"code":"(fn myiter [f x]\n  (lazy-cat (vector x) (myiter f (f x))))","problem":62,"user":"534e4a29e4b084c2834f4ab0"},{"problem":62,"code":"(fn myiter[f i]\n  (lazy-seq (cons i (myiter f (f i)))))","user":"52f426fce4b05e3f0be25f1e"},{"problem":62,"code":"(fn iterate- [f init]\n  (lazy-seq (cons init (iterate- f (f init)))))","user":"571dd145e4b0145328a76283"},{"code":"(fn my-iterate [f startval]\n  (lazy-seq\n    (cons startval (my-iterate f (f startval)))))","problem":62,"user":"515737f0e4b0b0b4b87062d0"},{"problem":62,"code":"(fn *iterate [f x]\n  (lazy-seq (cons x (*iterate f (f x)))))","user":"53bd476ae4b0d9a98559a6ca"},{"problem":62,"code":"(fn iter8 [f init]\n  (cons init (lazy-seq (iter8 f (f init)))))","user":"5f431d32e4b0955706451fb5"},{"problem":62,"code":"(fn my-it[f n](lazy-seq(cons n (my-it f (f n)))))","user":"5dbb5200e4b09f47823971a9"},{"code":"(fn a_iterate[f x] \n  (lazy-seq \n   (map \n    #(if \n       (zero? %1) x \n       (((fn multifunc[f n] \n                          \n           (loop [result nil  c n]              \n             (if \n               (zero? c) result \n               (recur \n                (fn[a] (if \n                         (fn? result) (f (result a)) \n                         (f a) \n                         )\n                  ) \n                (dec c)\n                )\n               )\n             )\n           ) f %1)\n        x)\n       ) \n    (range))))","problem":62,"user":"52b60e94e4b0c58976d9ad3e"},{"problem":62,"code":"(fn iter [f x]\n        (lazy-seq (cons x (iter f (f x)))))","user":"5be96111e4b0f319e2d7ec70"},{"problem":62,"code":"(fn myfunc [f x] (cons x (lazy-seq (myfunc f (f x)))))","user":"5658d775e4b00d3155796114"},{"code":"(fn my-iterate [f x] (lazy-cat (list x) (my-iterate f (f x))))","problem":62,"user":"4e31a15c535deb9a81d77f1e"},{"problem":62,"code":"(fn iterate2\n  [f n]\n  (lazy-seq\n    (cons n (iterate2 f (f n)))))","user":"5b73e500e4b047b03b2036ba"},{"problem":62,"code":"(fn foo\n  [f x]\n  (cons\n   x\n   (lazy-seq\n    (foo\n     f\n     (f x)))))","user":"5bab5440e4b0a20761a23475"},{"problem":62,"code":"(fn it [fx x] (cons x (lazy-seq (it fx (fx x)))))","user":"53fb4843e4b0de5c4184857d"},{"code":"(fn iter [f init] (cons init (lazy-seq (iter f (f init)))))","problem":62,"user":"510d3dc6e4b078ea71921132"},{"code":"(fn my [a b]\n  (lazy-cat [b] (map a (my a b))))","problem":62,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":62,"code":"(fn [f x]\n  (reductions\n    (fn [acc _] (f acc))\n    x (range)))","user":"5703cd50e4b08d47c97781fc"},{"code":"(fn g [f x]\n          (lazy-seq (cons x (g f (f x)))))","problem":62,"user":"52c7f036e4b0c2d177d62126"},{"code":"(fn [f x]\n  (reductions #(do %2\n                  (f %1))\n              x (repeat 0)))","problem":62,"user":"50981062e4b04e098a4c7268"},{"code":"(fn lzy [func x] \n  (cons x (lazy-seq (lzy func (func x)))))","problem":62,"user":"4eb9353f535dfed6da9c6d4e"},{"code":"(fn fun [f n] (lazy-seq (cons n (fun f (f n)))))","problem":62,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn it [p i] (lazy-seq (cons i (it p (p i)))))","problem":62,"user":"4f301d02e4b0d6649770a072"},{"problem":62,"code":"(fn [f x]\n ((fn it [y] (lazy-seq (cons y (it (f y))))) x))","user":"5b15ab32e4b0cc2b61a3be72"},{"code":"(fn it [f x0] \n  (cons x0 (lazy-seq (it f (f x0)))))","problem":62,"user":"5145832be4b0e8879607340a"},{"problem":62,"code":"(fn reiterate [f i]\n  (lazy-seq \n   (cons i (reiterate f (f i)))))","user":"57609d91e4b08062f99a4e9b"},{"problem":62,"code":"(fn r [f v]\n   (lazy-seq (cons v (r f (f v)))))","user":"52281e1ee4b0186687e23a69"},{"problem":62,"code":"(fn myit [f x]\n  (lazy-seq\n    (cons x (myit f (f x)))\n    )\n  )","user":"5488872ee4b0e286459a11d3"},{"problem":62,"code":"(fn my-iter [f x]\n    (cons x (lazy-seq (my-iter f (f x))))\n    )","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn iter [f i]\n  (lazy-cat [i] (iter f (f i))))","problem":62,"user":"4fbef9a6e4b081705acca316"},{"problem":62,"code":"(fn rng [f x]\n (lazy-seq (cons x (rng f (f x)))))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn iter [f x] (lazy-seq (cons x (map f (iter f x)))))","problem":62,"user":"53720c5ce4b0493c815db704"},{"problem":62,"code":"#(map (fn s [x] (if (= x 0) %2 (% (s (dec x))))) (range))","user":"53a739b0e4b0ef122a8689d0"},{"code":"(fn [f x] (letfn [(ite [le]\n                    (lazy-seq(cons le (ite (f le) ) ))) ]\n                 (ite x) ) )","problem":62,"user":"4ee7d177535d93acb0a6686f"},{"problem":62,"code":"(fn r [f i] \n  (lazy-seq (cons i (r f (f i)))))","user":"57f80350e4b0d3187e90090c"},{"problem":62,"code":"(fn myiter [func val] (cons val (lazy-seq (myiter func (func val)))))","user":"585481e0e4b07779d46863fe"},{"problem":62,"code":"(fn my-iterate [f x]\n          (cons x\n                (lazy-seq (my-iterate f (f x)))))","user":"5515b138e4b055c2f668d4ed"},{"problem":62,"code":"(fn fof\n\t[function init]\n    (cons init   \n    ((fn fonf\n\t[f x]   (cons (f x) (lazy-seq (fonf f (f x)))))\n\tfunction init)))","user":"53d6b266e4b0e771c3025459"},{"code":"#(letfn [(iter [f x] (cons x (lazy-seq (iter f (f x)))))] (iter %1 %2))","problem":62,"user":"52cc85abe4b07d0d72b27367"},{"code":"(fn my-iterator [f x]\n  (lazy-seq (cons x (my-iterator f (f x)))))","problem":62,"user":"52a55adee4b0c58976d9abe7"},{"problem":62,"code":"(fn [f init] (reductions (fn [r x] (f r)) init (range)))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn my-func [f x]\n  (lazy-seq\n   \t(cons x (my-func f (f x)))))","problem":62,"user":"53527551e4b084c2834f4af0"},{"problem":62,"code":"(fn iterat [predicate initial] (lazy-seq(cons initial (iterat predicate (predicate initial)))))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":62,"code":"(fn func [f x] (cons x (lazy-seq (func f (f x)))))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn iter\n  [funct arg] (cons arg (lazy-seq (iter funct (funct arg)))))","problem":62,"user":"5245d29ae4b09dbe66b56174"},{"code":"(fn hu [f x]\n  (lazy-seq (cons x (hu f (f x)))\n  )\n)","problem":62,"user":"4fcf5292e4b03432b189f40e"},{"problem":62,"code":"(fn my-iterate [f i]\n    (lazy-seq (cons i (my-iterate f (f i)))))","user":"57f6e666e4b0d3187e9008f2"},{"code":"(fn i [f x]\n             (lazy-seq \n               (cons x (i f (f x)))))","problem":62,"user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"(fn func [f x]\n  (cons x (lazy-seq (func f (f x)))))","problem":62,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":62,"code":"(fn iter [f x] \n  (let [v (f x)] \n    (lazy-seq (cons x (iter f v)))))","user":"5933b736e4b072a2710fd05d"},{"code":"(fn [f init*]\r\n  (lazy-seq (map \r\n              (fn fc [n]\r\n                (if (= 0 n) init*\r\n                  (f (fc (dec n)))))\r\n              (range))))","problem":62,"user":"4eeae8f0535d93acb0a668a2"},{"code":"(fn __ [f x]\n  (cons x (lazy-seq (__ f (f x)))))","problem":62,"user":"4fceda40e4b03432b189f407"},{"problem":62,"code":"(fn r [f i]\n   (cons i (lazy-seq (r f (f i)))))","user":"55597b84e4b0deb715856e36"},{"problem":62,"code":"(fn new-iter [f x]\n  (lazy-seq\n   (cons x (new-iter f (f x)))))","user":"5d48e6d3e4b0776584bd6f15"},{"code":"(fn i [f x]\r\n  (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4e03c616535d04ed9115e796"},{"problem":62,"code":"(fn [f n]\n  (reductions (fn [result _] (f result)) n (repeat n)))","user":"528c381ce4b0239c8a67aeb2"},{"problem":62,"code":"(fn recf [f v]\n   (cons v (lazy-seq (recf f (f v)))))","user":"541c1e46e4b01498b1a71a70"},{"code":"(fn itr [f x]\n  (lazy-seq\n    (cons x (itr f (f x)))))","problem":62,"user":"4fc8c8d8e4b0ee37620e183b"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (lazy-seq (cons x (my-iterate f (f x))))\n  )","user":"5bc8c033e4b07a9b28b100ca"},{"code":"(fn it [f x] (lazy-cat (list x) (it f (f x))))","problem":62,"user":"52474ec2e4b05ef8e38e6361"},{"problem":62,"code":"(fn [func a] \n            (reductions (fn [aa bb](func aa)) a (repeat a)))","user":"569aca1ee4b0542e1f8d144d"},{"problem":62,"code":"(fn itr [f v]\n  (lazy-seq (cons v (itr f (f v)))))","user":"5b2c79c6e4b025bcb146f2b7"},{"code":"(fn ff [f n]\n  (lazy-seq\n   (cons n (ff f (f n)))))","problem":62,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn myiterate [f v]\n            (let [fv (f v)]\n              (lazy-seq (cons v (myiterate f (f v))))))","problem":62,"user":"500ea957e4b00fff93030f9b"},{"problem":62,"code":"(fn my-new-iterate \n  [fun x]\n  (lazy-seq\n   (cons x (my-new-iterate fun (fun x)))))","user":"59e68254e4b0249b728206fc"},{"problem":62,"code":"(fn my-it [f v]\n  (lazy-seq \n   (cons v (my-it f (f v)))))","user":"589b98fae4b00487982d533c"},{"problem":62,"code":"(fn my-iterate [callback first]\n  (cons first (lazy-seq (my-iterate callback (callback first)))))","user":"57155980e4b07c98581c3ad7"},{"code":"(fn f [g v] \n  (lazy-seq\n   (cons v (f g (g v)))))","problem":62,"user":"51933b41e4b0c663c5d86ca2"},{"code":"(fn iter [f xs]\n       (cons xs (lazy-seq (iter f (f xs))))\n       \n       )","problem":62,"user":"4eae2f9e535d7eef30807324"},{"problem":62,"code":"(fn iter8 [f x]\n\t(cons x (lazy-seq (iter8 f (f x)))))","user":"53a7e3b9e4b047364c044423"},{"problem":62,"code":"(fn myiter [f n]\n  (lazy-seq (cons n (myiter f (f n)))))","user":"57f81549e4b0d3187e900918"},{"problem":62,"code":"(fn my-iterate [f x]\n         (lazy-seq\n          (cons x (my-iterate f (f x)))))","user":"54b817eee4b0ed20f4ff6e93"},{"problem":62,"code":"(fn my-iterate [f val]\n (lazy-seq (cons val (my-iterate f (f val)))))","user":"55b4fa46e4b01b9910ae2983"},{"problem":62,"code":"(fn [f n] (reductions (fn [a _] (f a)) (repeat n)))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn my-iterate [fun init]\n  (cons init (lazy-seq (my-iterate fun (fun init)))))","problem":62,"user":"515828b8e4b0a069fd272c71"},{"code":"(fn it [f x]\n  (lazy-seq (cons x (it f (f x)))))\n\n  ;; use lazy-seq to avoid stackoverflow\n  ;; you can recurse on anonimouse function","problem":62,"user":"51d11f5de4b067c365486360"},{"problem":62,"code":"(fn it[f, a] ( lazy-seq ( cons a (it f (f a)))))","user":"5b3aa98be4b02d533a91bbca"},{"problem":62,"code":"(fn iterate_ [func init]\n  (lazy-seq\n   (cons init (iterate_ func (func init)))))","user":"574ed2f7e4b02ea11479924a"},{"code":"(fn foo [f x] \n  (lazy-seq \n    (cons x (foo f (f x)))))","problem":62,"user":"4f8ac2bde4b02e764a0a5172"},{"code":"(fn lazyfx [f x] (cons x (lazy-seq (lazyfx f (f x)))))","problem":62,"user":"508923d5e4b06d8254e936e8"},{"code":"(fn schmiterate [func value]                                                                                                                     \n    (lazy-seq                                                                                                                                      \n     (cons value                                                                                                                                   \n           (schmiterate func (func value)))))","problem":62,"user":"50057f23e4b0678c553fc466"},{"problem":62,"code":"(fn it2 [f e]\n   (cons e (lazy-seq (it2 f (f e)))))","user":"525b142fe4b0cb4875a45d05"},{"code":"(fn ite- [f a] (cons a (lazy-seq (ite- f (f a)))))","problem":62,"user":"51ca82e9e4b08b1cbd0d9488"},{"problem":62,"code":";(into [] (take 3 (\n(fn it [f x]\n  (lazy-seq (cons x \n                  (it f (f x)))))\n;inc 2)))","user":"57df2722e4b0bd073c20245e"},{"code":"(fn myiter [f init]\n  (let [rslt (f init)]\n    (cons init (lazy-seq (myiter f rslt)))))","problem":62,"user":"513cb853e4b0b86ece9f322b"},{"problem":62,"code":"(fn iterate' [f x] (lazy-seq (cons x (iterate' f (f x)))))","user":"5680104ae4b0966858e4d8ea"},{"problem":62,"code":"(fn lazer [f i]\n  (cons i (lazy-seq (lazer f (f i)))))","user":"5578f292e4b05c286339e08f"},{"problem":62,"code":"(fn iterate- [f x]\n  (cons x\n        (lazy-seq\n          (iterate- f (f x)))))","user":"5a0a25fce4b0eab8c044893d"},{"code":"(fn itr[f x]\n  (cons x (lazy-seq (itr f \n                         (f x)))))","problem":62,"user":"531c7f0de4b08068f379eda4"},{"code":"(fn itr [f v]\n  (lazy-cat [v] (itr f (f v))))","problem":62,"user":"51944aaae4b0142f60b4aedc"},{"problem":62,"code":"(fn iter [it n] (lazy-seq (cons n (iter it (it n)))))","user":"51a3c9cde4b0e77c4ca60bf9"},{"code":"(fn iter [func init]\n  (lazy-seq\n    (cons init (iter func (func init)))))","problem":62,"user":"528b08efe4b0239c8a67ae8a"},{"problem":62,"code":"(fn i [f a] \n  (lazy-seq\n   (cons a (i f (f a)))))","user":"56bca51ae4b0f26550335963"},{"code":"(fn this [x y]\n     (cons y (lazy-seq (this x (x y)))))","problem":62,"user":"4f066916535dcb61093f6c10"},{"problem":62,"code":"(fn iter [f n] (lazy-seq (cons n (iter f (f n)))))","user":"5454b84ce4b0e397800069d9"},{"problem":62,"code":"(fn new-it [f arg]\n  (lazy-seq \n   (cons arg (new-it f (f arg)))))","user":"5daeb6bce4b0f8c104ccfc8b"},{"problem":62,"code":"(fn iter [f a] \n      (cons a (lazy-seq (iter f (f a)))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn fake-it [fun val]\n         (cons val (lazy-seq (fake-it fun (fun val)))))","problem":62,"user":"53838742e4b06839e8705ee0"},{"problem":62,"code":"(fn customIterate [fun initialVal]\n\t(cons initialVal (lazy-seq (customIterate fun (fun initialVal)))))","user":"583f1533e4b089d5ab817dc8"},{"code":"(fn iterate- [f x]\n  (cons x \n        (lazy-seq (iterate- f (f x)))))","problem":62,"user":"537f4652e4b06839e8705eb1"},{"problem":62,"code":"(fn re-iterate-seq [f init]\n  (lazy-seq (cons init (re-iterate-seq f (f init)))))","user":"570e6974e4b0b0fb43fd06ef"},{"code":"(fn xm [f x] (cons x (lazy-seq (xm f (f x)))))","problem":62,"user":"5036eba7e4b0af0658af77a5"},{"code":"(fn loopo [func init] (lazy-seq (cons init (loopo func (func init)) )))","problem":62,"user":"50c6fad1e4b00bb60fe0c52d"},{"problem":62,"code":"(fn f [g initial] (lazy-seq (cons initial (f g (g initial)))))","user":"582d7569e4b051871117bfbe"},{"code":"(fn [f x] (reductions (fn [xi _] (f xi)) x (range)))","problem":62,"user":"4ddc1c89535d02782fcbea01"},{"code":"(fn itrs\n  [f a]\n  (lazy-seq\n    (cons a (itrs f (f a)))))","problem":62,"user":"5070e31ee4b0e3170b5a8678"},{"problem":62,"code":"(fn iter [f i]\n    (lazy-seq (cons i (iter f (f i)))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":62,"code":"(fn it [f x]\n             (lazy-seq (cons x (it f (f x)))))","user":"5d5c2730e4b09db18d4482ea"},{"problem":62,"code":"(fn ![f x] (cons x (lazy-seq (! f (f x)))))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn rec [fun acc]\n            (lazy-seq (cons acc (rec fun (fun acc)))))","problem":62,"user":"51227a00e4b068a9582e656b"},{"problem":62,"code":"#(reductions (fn [s _] (% s)) %2 (range))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn myself [f val]\n  (cons val (lazy-seq (myself f (f val)))))","problem":62,"user":"51b38769e4b026427ecf067f"},{"problem":62,"code":"(fn my\n  [f init]\n  (cons init (lazy-seq (my f (f init)))))","user":"5587d8b3e4b059ccff29b1e8"},{"code":"(fn re [x y]\n  (cons y (lazy-seq (re x (x y)))) \n)","problem":62,"user":"51bec919e4b013aa0d74b800"},{"problem":62,"code":"(fn [func initial]\n  ((fn bar [x]\n    (lazy-seq (concat [x] (bar (func x))))) initial))","user":"5bdf651ee4b0ed4b8aab4c6d"},{"code":"(fn ii [f x]\n  (cons x (lazy-seq (ii f (f x)))))","problem":62,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":62,"code":"(fn it [f a]\n    (lazy-seq (cons a (it f (f a)))))","user":"52b2f9cae4b0c58976d9acfb"},{"problem":62,"code":"(fn test23 \n  [fn1 n](lazy-seq (cons n (test23 fn1 (fn1 n)))))","user":"5804d5afe4b0a837a8b30cad"},{"problem":62,"code":"(fn [f x0]\n  ((fn fx\n\t([] (fx x0))\n\t([x] (lazy-seq (cons x (fx (f x))))))))","user":"57458b82e4b009280f9f2b4e"},{"problem":62,"code":"(fn iterat [func init]\n  (lazy-seq (cons init (iterat func (func init))))\n)","user":"54975e99e4b0b312c081ff72"},{"code":"(fn it [f a]\n   (cons a (lazy-seq (it f (f a)))))","problem":62,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn lz [f n] (cons n (lazy-seq (lz f (f n)))))","problem":62,"user":"51d4ed02e4b013d740b70dec"},{"code":"(fn F [x y]\n  (cons y (lazy-seq (F x (x y)))))","problem":62,"user":"536c77f1e4b0fc7073fd6e3f"},{"code":"(fn it [f z] (cons z (lazy-seq (it f (f z)))))","problem":62,"user":"53976599e4b0b51d73faaeea"},{"code":"(fn x [f i] (cons i (lazy-seq (x f (f i)))))","problem":62,"user":"4f6fd91ae4b07046d9f4efed"},{"code":"(fn mit[f x]\n  (lazy-seq (cons x (mit f (f x)))))","problem":62,"user":"4f611127e4b0defedf855fb4"},{"problem":62,"code":"(fn fx [f x]\n  (lazy-seq\n   (cons x (fx f (f x)))))","user":"553e0b70e4b0a04f792994e8"},{"problem":62,"code":"(fn repeating [f x] (cons x (lazy-seq (repeating f (f x)))))","user":"5eccc5c2e4b016b56eae058f"},{"problem":62,"code":"(fn itra [my-fn -val]\n   (lazy-seq (cons -val (itra my-fn (my-fn -val)))))","user":"5ddb6151e4b0948ae9d9adb0"},{"code":"(fn r [x n]\n  (lazy-cat (list n) (r x (x n))))","problem":62,"user":"5012aefce4b0c8732600222a"},{"code":"(fn my-iterate[f x]\n  (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"520612a7e4b0bf4f1882c81c"},{"problem":62,"code":"(fn it [f e]\n  (lazy-seq (cons e (it f (f e)))))","user":"59a72effe4b066c664927d94"},{"problem":62,"code":"(fn r [f x]\n    (lazy-seq (cons x (r f (f x)))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":62,"code":"(fn itr [f a]\n            (cons a (lazy-seq (itr f (f a)))))","user":"561814bae4b06b1bb2182a1a"},{"code":"(fn [f x]\n  (letfn [(myiterate [f x]\n    (lazy-seq (cons x (myiterate f (f x)))))]\n  (myiterate f x)))","problem":62,"user":"4eb2e6ca535d7eef3080734f"},{"problem":62,"code":"(fn ! [f x] (lazy-seq (cons x (lazy-seq (! f (f x)))) ))","user":"55b39523e4b01b9910ae2973"},{"problem":62,"code":"(fn _ [f x] \n  (cons x (lazy-seq (_ f (f x)))))","user":"54af6fb0e4b09f271ff37d08"},{"problem":62,"code":"(fn [f initial]\n  ((fn step\n    ([] (step initial))\n    ([value] \n     \t(lazy-seq \n         \t(cons value \n                  (step (f value))))\n    ))))","user":"5a66fddee4b0512ff01cd9d7"},{"code":"(fn foo\n  [f x] (cons x (lazy-seq (foo f (f x)))))","problem":62,"user":"4f18677d535d64f603146459"},{"problem":62,"code":"(fn iter\n  [f v]\n  (lazy-seq\n    (cons v (iter f (f v)))))","user":"5b62ff3ce4b0c6492753e72a"},{"problem":62,"code":"(fn recursive[f x]\n  (cons x (lazy-seq (recursive f (f x))))\n)","user":"53ecd01fe4b0d648e757f4b9"},{"problem":62,"code":"(fn my-iterate [fun x]\n  (lazy-seq (cons x (my-iterate fun (fun x)))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":62,"code":"(fn my-iterator [f init]\n    (cons init (lazy-seq (my-iterator f (f init)))))","user":"55240916e4b0882d96d091b6"},{"problem":62,"code":"(fn inf [f n]\n  (lazy-seq (cons n (inf f (f n))))\n)","user":"5a984657e4b0d174b936c78a"},{"problem":62,"code":"(fn iter [func x]\n  (lazy-seq (cons x (iter func (func x)))))","user":"564d3169e4b0284900eef67c"},{"code":"(fn g [f x]\n  (cons x (lazy-seq (g f (f x)))))","problem":62,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":62,"code":"(fn iter8 [f x]\n  (lazy-seq (cons x (iter8 f (f x)))))","user":"5e98e8a9e4b0157ca96647dc"},{"code":"(fn ff [f x]\n  (lazy-seq (concat (cons x '()) (ff f (f x))))\n)","problem":62,"user":"4dd1de4d535dae65d5c462d7"},{"problem":62,"code":"(fn again [f v]\n  (cons v (lazy-seq (again f (f v)))))","user":"56038f34e4b04bb52996e1bc"},{"code":"(fn f [g x] (lazy-seq (cons x (f g (g x)))))","problem":62,"user":"4ea0cfb0535d7eef308072ae"},{"problem":62,"code":"(fn it\n ([op x] (lazy-seq\n (cons x (it op (op x)))\n ))\n)","user":"56c4f971e4b05cc29241ee9d"},{"code":"(fn iter2 [f n]\n    (cons n (lazy-seq (iter2 f (f n)))))","problem":62,"user":"4fbdcb87e4b081705acca30a"},{"problem":62,"code":"(fn m-iterate [f x]\n   (lazy-seq (cons x (m-iterate f (f x)))) \n    \n    )","user":"5b274fd1e4b063e2438bcc3b"},{"code":"(fn my-iterate [f v]\n  (lazy-seq \n   (cons v (my-iterate f (f v)))))","problem":62,"user":"4efa3d4b535dced4c769f270"},{"code":"#(letfn [(next-fn [st]\n           (lazy-seq (cons st (next-fn (% st)))))]\n   (next-fn %2))","problem":62,"user":"4e4ae5aa535dc968683fc4d2"},{"problem":62,"code":"(fn ans-62 [f init]\n  (cons init (lazy-seq (ans-62 f (f init)))))","user":"608fac60e4b03bd49d9f36c7"},{"problem":62,"code":"(fn myiterate\n  [func val]\n  (lazy-cat [val] (myiterate func (func val)))\n  )","user":"53fe459ae4b0de5c418485f4"},{"code":"(fn f1 [f x] (cons x (lazy-seq (f1 f (f x)))))","problem":62,"user":"5296008fe4b02ebb4ef7502a"},{"problem":62,"code":"#((fn i [v] (cons v (lazy-seq (i (%1 v))))) %2)","user":"588fbb39e4b00487982d51bd"},{"code":"(fn [fnc x]\n\n  (cons x\n  ((fn ite [fcn x]\n    (cons (fcn x) (lazy-seq (ite fcn (fcn x)))))\n   fnc x)))","problem":62,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn my-iterate [f i]\n  (lazy-seq\n    (cons i (my-iterate f (f i)))))","problem":62,"user":"4eddcbbf535d10e5ff6f532d"},{"problem":62,"code":"(fn itr\n  ([f a] (cons a (lazy-seq (itr f (f a))))))","user":"5da760ebe4b000c986472c1a"},{"problem":62,"code":"(fn my-iterate\n  [f arg]\n  (cons arg (lazy-seq (my-iterate f (f arg)))))","user":"53571732e4b04ce2eb3ed275"},{"problem":62,"code":"(fn [func arg]\n  (let [my-lazy-seq-0 (fn my-lazy-seq [x] (lazy-seq (cons x (my-lazy-seq (func x)))))]\n    (my-lazy-seq-0 arg)))","user":"55fe7e15e4b00f4cabc57651"},{"code":"(fn iter [f x]\n       (lazy-seq\n        (cons x (iter f (f x)))))","problem":62,"user":"4e5676b2535d8a8b8723a282"},{"code":"(fn it [f v]\n  (lazy-seq\n         (cons v (it f (f v)))))","problem":62,"user":"4feff3b6e4b0678c553fc31e"},{"problem":62,"code":"(fn my-iterate[f x]\n  (lazy-seq (cons x (my-iterate f (f x)))))","user":"5ab276f2e4b073f1774425e6"},{"problem":62,"code":"(fn r [f v] (lazy-seq (cons v (r f (f v)))))","user":"56c08696e4b060a8e693e3aa"},{"problem":62,"code":"(fn my-iterate\n  [f s]\n  (lazy-seq (cons s (my-iterate f (f s)))))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":62,"code":"(fn iterate-me [f x]\n  (cons x (lazy-seq (iterate-me f (f x)))))","user":"5ac6ef9be4b0e27600da7779"},{"problem":62,"code":"(fn [fun init] ((fn iter [x] (cons x (lazy-seq (iter (fun x))))) init))","user":"561ca2eae4b064ca9f4b169b"},{"problem":62,"code":"( fn [f x]\n    (for [n (range)]\n      ((apply comp (repeat n f) )x )\n     )\n )","user":"5649615be4b0284900eef641"},{"problem":62,"code":"(fn [f x]\n  (let [g (fn [g] #(lazy-seq (cons % ((g g) (f %)))))]\n    ((g g) x)))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":62,"code":"(fn bob [f n]\n  (lazy-seq (cons n (bob f (f n)))))","user":"6024544be4b0d5df2af2221f"},{"problem":62,"code":"(fn f [fun x]\n  (lazy-seq\n   (cons x\n         (f fun (fun x)))))","user":"5777c3d6e4b0979f8965164f"},{"problem":62,"code":"(fn q [f v]\n  (cons v (lazy-seq (q f (f v)))))","user":"4e837808535db62dc21a62d9"},{"problem":62,"code":"(fn myiterate [fun x] (cons x (lazy-seq (myiterate fun (fun x)))))","user":"5d88d820e4b0915913b1d3b1"},{"code":"(letfn [(it\n    [f x]\n    (cons x\n      (lazy-seq (it f (f x)))))]\n    it)","problem":62,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn iterate* [f i]\n  (cons i (lazy-seq (iterate* f (f i)))))","problem":62,"user":"4ef41f26535dced4c769f230"},{"problem":62,"code":"(fn my-iter [f n]\n  (cons n (lazy-seq (my-iter f (f n)))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":62,"code":"(fn iterate* [f start]\n  (lazy-seq\n   (cons start (iterate* f(f start)))))","user":"60b66033e4b0e0fa5f1b4248"},{"code":"(fn my-iterate [f v]\n  (cons v (lazy-seq (my-iterate f (f v)))))","problem":62,"user":"4f91fd31e4b0dcca54ed6ca8"},{"code":"(fn iter [f x]  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4e9dafe1535dbda64a6f6b89"},{"problem":62,"code":"(fn my-iterate [f x]\n               (lazy-seq (cons x\n                               (my-iterate f\n                                           (f x)\n                               )\n                         )\n               )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"problem":62,"code":"(fn re-iterate \n  [f init]\n  (cons init (lazy-seq (re-iterate f (f init))))\n  )","user":"5bbbce99e4b0a20761a23610"},{"code":"(fn ! [f x]\n  (cons x (lazy-seq (! f (f x)))))","problem":62,"user":"50621cbde4b0341461c88951"},{"problem":62,"code":"(fn p\n  ([f n] (lazy-seq (cons n (p f (f n))))))","user":"5d6febe6e4b04d129b00f2d5"},{"problem":62,"code":"(fn __\n  [function x]\n  (lazy-seq (cons x (__ function (function x)))))","user":"5ac91d90e4b0e27600da77bd"},{"problem":62,"code":"(fn anon [func seed]\n      (lazy-seq (cons seed (anon func (func seed)))))","user":"5f93529ae4b0715f5002d7bc"},{"code":"(fn r [f x] \n   (cons x (lazy-seq (r f (f x))))\n )","problem":62,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn body [f a0]\n  (lazy-seq (cons a0 (body f (f a0)))))","problem":62,"user":"509160dae4b0742c82730aef"},{"problem":62,"code":"(fn iter [fun start]\n  (cons start (lazy-seq (iter fun (fun start)))))","user":"5412ef7ee4b01498b1a719da"},{"problem":62,"code":"(fn k [f i] (lazy-seq (cons i (k f (f i)))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":62,"code":"(fn iter8 [f x]\n    (lazy-seq (cons x (iter8 f (f x)))))","user":"5f331015e4b0574c87022c37"},{"code":"(fn itt [f x]\n  (cons x (lazy-seq (itt f (f x)))))","problem":62,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":62,"code":"(fn my-iterate [func seed]\n  (let [value (func seed)]\n    (cons seed (lazy-seq (my-iterate func value)))))","user":"574e84e0e4b02ea114799243"},{"problem":62,"code":"(fn [f init]\n  (letfn [(my-f [fnc arg]\n              (let [v (fnc arg)]\n                (lazy-seq\n                   (cons v (my-f fnc v)))))]\n       (lazy-seq (cons init (my-f f init)))))","user":"57202eb7e4b0c5bde472c090"},{"code":"(fn iter [f x] (lazy-seq (when-let [r (f x)] (cons x (iter f r)))))","problem":62,"user":"4e4b911f535dc968683fc4d6"},{"problem":62,"code":"(fn answer [f x]\n  (cons x (lazy-seq (answer f (f x)))))","user":"5d27da09e4b092dab7f59c75"},{"problem":62,"code":"(fn iter [func n] (lazy-seq (cons n (iter func (func n)))))","user":"5a09a6f7e4b01bb0ae8afe14"},{"code":"(fn myIterate [f x] (cons x (lazy-seq (myIterate f (f x)))))","problem":62,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":62,"code":"(fn f [x i]\n  (cons i \n        (lazy-seq \n         (f x (x i)))))","user":"4ec1923f535dfed6da9c6db2"},{"code":"(fn [f x]\n                  (letfn [(step [f x]\n                            (lazy-seq\n                              (cons\n                                x\n                                (step f (f x)))))]\n                    (step f x)))","problem":62,"user":"514d7e29e4b019235f6c0587"},{"problem":62,"code":"(fn iteratio! [f val]\n  (lazy-seq (cons val (iteratio! f (f val)))))","user":"587a3babe4b01531a375eae2"},{"code":"(fn iterate2 [f init]\n  (lazy-seq\n    (cons init\n          (iterate2 f (f init)))))","problem":62,"user":"51a97f7ae4b08d8ec191b827"},{"problem":62,"code":"(fn iterator [f x] (lazy-seq (cons x (iterator f (f x)))))","user":"5801eed1e4b0a837a8b30c63"},{"code":"(fn r [f s]\n  (lazy-seq\n   (cons s (r f (f s)))))","problem":62,"user":"52753740e4b03e8d9a4a74c1"},{"problem":62,"code":"(fn iter \n  [f x]\n  (cons x (lazy-seq (iter f (f x)))))","user":"55acd080e4b03311e7b73298"},{"problem":62,"code":"(fn Re-implement-Iterate\n  [f n]\n  (lazy-seq (cons n (Re-implement-Iterate f (f n)))))","user":"59e14ee3e4b08badc2a0c50c"},{"problem":62,"code":"(fn a62\n  [f x]\n  (lazy-seq (cons x (a62 f (f x)))))","user":"56163cc1e4b06b1bb21829ff"},{"problem":62,"code":"(fn iterate-clone\n  ([f init]\n   (lazy-seq\n    (cons init (iterate-clone f (f init))))))","user":"5f21d172e4b0f565ad998286"},{"problem":62,"code":"(fn iterate_my [f n] \n  (lazy-seq (cons n (iterate_my f (f n)))))","user":"58cf8f97e4b03c36ff7e58b7"},{"code":"(fn [f x] (reductions (fn [y _] (f y)) (cycle (vector x))))","problem":62,"user":"4fe8a3bde4b07c9f6fd12c61"},{"code":"(fn iter [f n]\n  (cons n (lazy-seq (iter f (apply f [n])))))","problem":62,"user":"5099283ce4b0cae2931060af"},{"problem":62,"code":"(fn d [f x]\n  (cons x (lazy-seq (d f (f x)))))","user":"54bad977e4b0ed20f4ff6eb9"},{"code":"(fn iterate* [f x] (cons x (lazy-seq (iterate* f (f x)))))","problem":62,"user":"4f4ff836e4b03ad3f0c10cf4"},{"code":"(fn f-iter [f x]\n    (lazy-seq (cons x (f-iter f (f x)))))","problem":62,"user":"50eddbc4e4b06330c1f87c4b"},{"problem":62,"code":"(fn reiter [f a]\n    (cons a (lazy-seq (reiter f (f a)))))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":62,"code":"(fn it [f i0]\n  (lazy-seq (cons i0 (it f (f i0)))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":62,"code":"(fn re-iterate\n  [f v]\n  (lazy-seq\n    (cons v\n      (re-iterate f (f v)))))","user":"55a0e139e4b0acc240e31504"},{"problem":62,"code":"(fn [p v]\n  (for [x (range)\n        :let [ fg (apply comp (repeat x p)) ]]\n    (if (= x 0) v (fg v))))","user":"595c02a9e4b066ee0a44afeb"},{"code":"(fn my-iter [f x]\n  (lazy-seq\n    (cons x (my-iter f (f x)))))","problem":62,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":62,"code":"(fn l [f b]\n  (lazy-seq (cons b (l f (f b)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn my-iter [f x]\n   (lazy-seq\n    (cons x (my-iter f (f x)))))","problem":62,"user":"51105c7fe4b04c71fce993ef"},{"problem":62,"code":"(fn custom-iterate [f x]\n  (lazy-seq (cons x (custom-iterate f (f x))))\n  )","user":"59f78b49e4b0ca45a743a30e"},{"code":"(letfn [(myiterate [f x]\r\n  (cons x\r\n        (lazy-seq\r\n          (myiterate f (f x)))))]\r\n       myiterate)","problem":62,"user":"4f29cdc8e4b0d6649770a033"},{"problem":62,"code":"(fn iter [func x]\n         (->> (repeat x)\n              (map-indexed vector)\n              (map (fn [[ind val]] ((apply comp (take ind (repeat func))) val))))\n         )","user":"53ed6976e4b0d648e757f4c4"},{"code":"(fn iter [op seed]\n  (cons seed (lazy-seq (iter op (op seed)))))","problem":62,"user":"5046ee3ee4b03b02161376b4"},{"code":"(fn myiterate\n  [f x]\n  (cons x (lazy-seq (myiterate f (f x)))))","problem":62,"user":"53436e60e4b084c2834f4a19"},{"problem":62,"code":"(fn [f x](reductions #(%2 %1) x (repeat f)))","user":"5a99b83fe4b0d174b936c7aa"},{"problem":62,"code":"(fn it [f arg]\n           (lazy-seq (cons arg (it f (f arg)))))","user":"5fb544f6e4b08cb800c85b4e"},{"code":"(fn i\n  [f x]\n  (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"524f4256e4b0541d1855b808"},{"problem":62,"code":"(fn [f p]\n  (letfn [(itr [fnc prm]\n            (let [subres (fnc prm)]\n              (lazy-seq\n                (cons subres (itr fnc subres)))))]\n    (cons p (itr f p))))","user":"5294a49be4b02ebb4ef7500f"},{"problem":62,"code":"(fn my-iter [f i]\n            (lazy-seq (cons i (my-iter f (f i))))\n            )","user":"51e6a2bce4b0ab43cc26c21d"},{"problem":62,"code":"(fn iter [f start]\n  (lazy-seq\n   (cons start (iter f (f start)))))","user":"55a1d7f6e4b0acc240e31519"},{"problem":62,"code":"(fn myiter [f x]\n  (cons x \n          (lazy-seq  (myiter f (f x) ))))","user":"55469eede4b0a04f79299542"},{"code":";(fn _iterate [f v] (lazy-seq (cons v (_iterate f (f v)))))\n#(reductions (fn [i _] (% i)) (repeat %2))","problem":62,"user":"5323a414e4b09d4e7a9b54d1"},{"code":"(fn it [f n]\n  (lazy-seq\n   (cons n (it f (f n)))))","problem":62,"user":"4dd0e8f7535da60f04a96e57"},{"problem":62,"code":"(fn [f x]\n         (letfn [(my-it [f x]\n                   (cons x (lazy-seq (my-it f (f x)))))]\n           (my-it f x)))","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":62,"code":"(fn reIterate [f x]\n  (lazy-seq (cons x (reIterate f (f x)))))","user":"59e55cc8e4b08badc2a0c555"},{"problem":62,"code":"(fn solution [f x]\n  (let [y (f x)]\n    (cons x (lazy-seq (solution f y)))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [f n] \n  (for [x (range)] \n    (if (zero? x) \n        n \n        ((apply comp (repeat x f)) n))))","problem":62,"user":"4e6a2f51535d8ccf87e9fea9"},{"code":"(fn it [f x]\n   (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"52cdec6ce4b07d0d72b27383"},{"problem":62,"code":"(fn x [f l] (cons l (lazy-seq (x f (f l)))))","user":"5761513fe4b0994c1922fb87"},{"problem":62,"code":"(fn re-implement-iterate [f start]\n  (lazy-seq\n   (cons start (re-implement-iterate f (f start)))))","user":"5a512929e4b05d388ecb6be2"},{"problem":62,"code":"(fn it [f n]\n  (lazy-cat [n (f n)]\n            (map f (rest (it f n)))))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":62,"code":"(fn iter\n  [op result]\n  (lazy-seq\n    (cons\n      result\n      (iter op (op result)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":62,"code":"(fn iterat [f x]\n  (cons x (lazy-seq (iterat f (f x)))))","user":"4e68c465535d8ccf87e9fe8a"},{"problem":62,"code":"; (fn iter [f x] (lazy-seq (cons x (iter f (f x)))))\n\n(fn iter [f x] (lazy-cat [x] (iter f (f x))))","user":"5aa4f7dae4b0d174b936c88c"},{"code":"(fn iterate-all [fun x]\n\t(cons x\n\t\t(lazy-seq \n\t\t\t(iterate-all fun (fun x)))))","problem":62,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":62,"code":"(fn [func startValue] (reductions #(%2 %1) startValue (repeat func)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":62,"code":"(fn iterate2 [f x0] (lazy-seq (cons x0 (iterate2 f (f x0)))))","user":"5956c6dae4b066ee0a44af61"},{"problem":62,"code":"(fn [f s] (map #((apply comp (repeat % f)) s) (range)))","user":"5d764e52e4b02e6b30c93524"},{"problem":62,"code":"(fn it [f x] \n  (lazy-seq \n   (cons x \n         (it f \n             (f x)))))","user":"4f3b5219e4b0e243712b1f2a"},{"code":"(fn z [f i]\n  (lazy-seq (cons i (z f (f i)))))","problem":62,"user":"4ea7999e535d7eef308072ee"},{"problem":62,"code":"(fn iter [f n] (lazy-cat [n] (iter f (f n))))","user":"60689984e4b069485764dde6"},{"problem":62,"code":"(fn myIterate [f init]\n  (cons init (lazy-seq ( myIterate f (f init))\n                       )\n        )\n  )","user":"53d5d43ce4b0e771c302544d"},{"code":"(fn uj [f & s] (lazy-seq (cons (first s) (uj f (f (first s))))))","problem":62,"user":"4e3a9dae535deb9a81d77f4a"},{"problem":62,"code":"(fn testt [f x]\n  (lazy-seq (cons x (testt f (f x)))))","user":"59368ccae4b02506e01a297a"},{"problem":62,"code":"#(reduce (fn [x y] (conj x (%1 (last x)))) [(bigint %2)] (range 400))","user":"555f0789e4b0a2eb076a39bf"},{"code":"(fn self [f init]\n\t(cons init (lazy-seq (self f (f init))))  \n)","problem":62,"user":"51db9e1ee4b0e067a9bbadc9"},{"problem":62,"code":"(fn fa [f a] (lazy-seq (cons a (fa f (f a)))))","user":"57086931e4b0b0fb43fd069e"},{"code":"(fn t[f x] (lazy-seq (cons x (t f (f x)))))","problem":62,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn it[f x] (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4f148418535d64f60314643a"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (cons x (my-iterate f (f x)))))","problem":62,"user":"4daf36c2edd6309eace4d175"},{"problem":62,"code":"(fn re-iterate [func val]\n  (lazy-seq (cons val (re-iterate func (func val)))))","user":"59b9e669e4b0a024fb6ae3db"},{"code":"(fn iterate-seq [f seed]\n\t(cons seed (lazy-seq (iterate-seq f (f seed)))))","problem":62,"user":"50fac9e3e4b07934dda8b0d1"},{"problem":62,"code":"(fn my-iterate [f x]\n\t(cons x (lazy-seq (my-iterate f (f x)))))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn miterate [f x] (cons x (lazy-seq (miterate f (f x)))))","problem":62,"user":"5106bc8ae4b01150e115ebec"},{"problem":62,"code":"(fn my-it\n  [op x]\n  (cons x (lazy-seq (my-it op (op x)))))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":62,"code":"(fn iter [func val]\n              (lazy-seq (cons val (iter func (func val)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn f [fun x]\n  (cons x (lazy-seq (f fun (fun x)) )))","problem":62,"user":"50a7b76de4b090657f4a5cdc"},{"problem":62,"code":"(fn imp-iterate [f x]\n  (lazy-seq (cons x (imp-iterate f (f x)))))","user":"56a94562e4b07966d5a8a074"},{"code":"(fn [f v]\n  (letfn [(lazy-it [ff vv]\n            (lazy-seq (conj [] vv (lazy-it ff (ff vv)))))]\n    (flatten (lazy-it f v))))","problem":62,"user":"4efec33f535dcb61093f6a2a"},{"code":"(fn re-implement-iterate [f first]\n   (lazy-seq (cons first (re-implement-iterate f (f first)))))","problem":62,"user":"4fb86dc9e4b081705acca2d8"},{"problem":62,"code":"(fn aaa [f v]\n    (cons v (lazy-seq (aaa f (f v)))))","user":"5e2586afe4b05b4b01516167"},{"code":"(fn myiterate \n   [f x] (cons x (lazy-seq (myiterate f (f x)))))","problem":62,"user":"5028bce0e4b01614d1633ffb"},{"code":"(fn it [f i]\r\n  (lazy-seq (cons i (it f (f i)))))","problem":62,"user":"507437c2e4b054001656acd0"},{"problem":62,"code":"(fn it [f z]\n  (lazy-seq (cons z (it f (f z)))))","user":"57de9169e4b0bd073c202454"},{"problem":62,"code":"(fn [f x]\n  (letfn [(go [f x] (lazy-seq (cons (f x) (go f (f x)))))]\n  (lazy-seq (cons x (go f x)))))","user":"51a7bf26e4b0da5f497bde8c"},{"problem":62,"code":"(fn e [f x] (cons x (lazy-seq (e f (f x) ) ) ) )","user":"53b3ea79e4b047364c0444ab"},{"problem":62,"code":"(fn sol [f x] (cons x (lazy-seq (sol f (f x)))))","user":"54857657e4b0e286459a11ac"},{"problem":62,"code":"(fn ter\n  [f init]\n  (lazy-seq (cons init (ter f (f init)))))","user":"5c387c51e4b0d62ef62d9f83"},{"problem":62,"code":"(fn myIterate [f x]\n  (lazy-seq\n    (cons x (myIterate f (f x)))))","user":"50c6052ce4b0c9dc10d15c56"},{"problem":62,"code":"(fn re \n  ([f p] (lazy-seq (cons p (re f (f p))))))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn my-iterate\n  [f init]\n  (lazy-seq\n   (cons init\n         (my-iterate f (f init)))))","problem":62,"user":"51937eb3e4b04df54c098022"},{"code":"(fn iter [f x]\n     (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"50f1dedbe4b0897c4366dcd8"},{"problem":62,"code":"(fn my-iterate [f x]\n    (cons x (lazy-seq (my-iterate f (f x)))))","user":"54febf4be4b07d26eda61d45"},{"problem":62,"code":"(fn it [f v] (lazy-seq (cons v (it f (f v)) )) )","user":"56a6051fe4b0542e1f8d14e5"},{"problem":62,"code":"(fn generet [fx starter]\n  (lazy-seq (cons starter (generet fx (fx starter)))))","user":"5b7ed20fe4b047b03b203760"},{"problem":62,"code":"(fn custom-iterate [f n] (cons n (lazy-seq (custom-iterate f (f n)))))","user":"547c2c6ce4b0c51c1f4d72e3"},{"problem":62,"code":"(fn itr [f a]\n  (let [b (f a)]\n    (cons a (lazy-seq (itr f b)))))","user":"540d5085e4b0addc1aec670e"},{"problem":62,"code":"(fn iterate-seq [func seed] (cons seed (lazy-seq (iterate-seq func (func seed)))))","user":"5c723f4be4b0fca0c16227a0"},{"code":"(fn it [f x]\n  (cons x\n        (lazy-seq (it f (f x)))))","problem":62,"user":"5184e525e4b02826a645f39c"},{"problem":62,"code":"(fn mittens [x y]\n  (let [prime (x y)]\n       (cons y (lazy-seq (mittens x prime)))\n    ))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":62,"code":"(fn reImplement \n  [a b]\n  (lazy-seq (cons b (reImplement  a (a b)))))","user":"59dd3930e4b0a0ac046f2504"},{"code":"(fn i [f a] (lazy-seq (cons a (i f (f a)))))","problem":62,"user":"4eb13d60535d7eef3080733f"},{"problem":62,"code":"(fn p [f x]\n  (lazy-seq (cons x (p f (f x)))))","user":"5799ff45e4b05b1deef9add1"},{"problem":62,"code":"(fn p\n  [f v]\n  (lazy-seq (cons v (p f (f v)))))","user":"56df632ce4b0ca2494a095f2"},{"problem":62,"code":"(fn my-iter [f n]\n  (lazy-seq (cons n (my-iter f (f n)))))","user":"56877fcbe4b0dcc4269f405e"},{"problem":62,"code":"(fn iterate-\n  [f x]\n  (cons\n    x\n    (lazy-seq\n      (iterate- f (f x)))))","user":"5cf1d9e3e4b0aaa82f112a18"},{"code":"(fn __ [f x] (cons x (lazy-seq (__ f (f x)))))","problem":62,"user":"4dda44f2535d02782fcbe9f1"},{"code":"(fn my-iterate [f v] (cons v (lazy-seq (my-iterate f (f v)))))","problem":62,"user":"504db141e4b021508a333965"},{"problem":62,"code":"(fn myfunc [f x]\n  (lazy-seq (cons x (myfunc f (f x) ))))","user":"5f8d76c3e4b0715f5002d758"},{"problem":62,"code":"(fn iteratively [f x]\n  (lazy-seq (cons x (iteratively f (f x)))))","user":"525d44bfe4b0cb4875a45d6d"},{"code":"(fn my-iterate [f z] (lazy-seq (cons z (my-iterate f (f z)))))","problem":62,"user":"52265e41e4b04e78ff2e1981"},{"problem":62,"code":"(fn lz [f x]\n  (lazy-seq (cons x (lz f (f x)))))","user":"52d84ea7e4b09f7907dd1390"},{"code":"(fn q [f x]\n (lazy-seq (cons x (q f (f x)))))","problem":62,"user":"50eebf46e4b06330c1f87c61"},{"problem":62,"code":"(fn iterator \n          [foo n]\n          (lazy-seq (cons n (iterator foo (foo n))))\n)","user":"5f3a8493e4b004f08c61c527"},{"problem":62,"code":"(fn my-iter [f seed]\n  (cons seed (lazy-seq (my-iter f (f seed)))))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":62,"code":"(fn gntr [f n] (lazy-seq\n                (cons n (gntr f (f n)))\n                ) )","user":"537b1083e4b06839e8705e64"},{"problem":62,"code":"(fn iter [f x]\n                 (lazy-seq\n                   (cons x (iter f (f x)))))","user":"5ebc7c13e4b00a66d4a95267"},{"code":"(fn -iterate ([f x] (lazy-seq (cons x (-iterate f (f x))))))","problem":62,"user":"4db1fe241254ad5b4805fa77"},{"code":"(fn it [f a] (lazy-seq (cons a (it f (f a)))))","problem":62,"user":"4ea5e794535d7eef308072df"},{"problem":62,"code":"(fn my-iterate\n  ([f val]\n   (lazy-seq (cons val (my-iterate f (f val))))))","user":"5ce36e02e4b0a17bb84e2b3e"},{"code":"(fn iter [f init-value]\n  (lazy-seq \n   (cons init-value (iter f (f init-value)))))","problem":62,"user":"4e73a9dc535dff18050a9c77"},{"code":"(fn i [f x]\n  (lazy-seq\n     (cons x (i f (f x)))\n  )\n)","problem":62,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":62,"code":"(fn g[f x]\n  (cons x (lazy-seq (g f (f x)))))","user":"5398123ee4b0b51d73faaef3"},{"problem":62,"code":"(fn xxx [f n] ( cons n ( lazy-seq ( xxx f (f n)))))","user":"53d63e6ce4b0e771c3025454"},{"problem":62,"code":"(fn thing [func init]\n\t(cons init (lazy-seq (map func (thing func init)))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":62,"code":"(fn newiter\n  [f val]\n  (let [new (f val)]\n    (lazy-seq (cons val (newiter f new)))))","user":"57fc34f0e4b0d3187e90098e"},{"code":"(fn it [f init]\n  (lazy-seq (cons init (it f (f init)))))","problem":62,"user":"4e98a6d0535dbda64a6f6b5e"},{"problem":62,"code":"(fn myIterate \n  [f x]\n  (let [y (f x)]\n    (lazy-seq\n     (cons x (myIterate f y)))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [f x]\n  (letfn [(step [f x]\n                (lazy-seq\n                 (cons\n                  x\n                  (step f (f x)))))]\n    (step f x)))","problem":62,"user":"52474133e4b05ef8e38e635e"},{"problem":62,"code":"(fn iter [f s] (cons s (lazy-seq (iter f (f s)))))","user":"55afc197e4b002ce9d5cbc18"},{"code":"(fn iter [f a] (lazy-seq (cons a (iter f (f a)))))","problem":62,"user":"4f91a38ae4b0dcca54ed6c9f"},{"problem":62,"code":"(fn iterate1\n  [f x]\n  (lazy-seq (cons x (iterate1 f (f x)))))","user":"59636ec9e4b066ee0a44b0c8"},{"code":"(fn iter [f n]\n  (lazy-seq (cons n (iter f (f n)))))","problem":62,"user":"4eb27fad535d7eef3080734a"},{"problem":62,"code":"(fn [f x]\n    (let [xx (atom x)]\n    (repeatedly (fn []\n                  (let [ret @xx]\n                    (swap! xx f)\n                    ret)\n\n\n\n\n\n\n                  ))))","user":"55aa5f73e4b0988bba2ad94b"},{"problem":62,"code":"(fn my-iterate\n\t[f x]\n\t(lazy-seq (cons x (my-iterate f (f x)))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"code":"(fn again\n  [f x] (cons x (lazy-seq (again f (f x)))))","problem":62,"user":"4fa2fa5ee4b081705acca186"},{"problem":62,"code":"(fn i [f c] (lazy-seq (cons c (i f (f c)))))","user":"543be8f0e4b032a45b869337"},{"problem":62,"code":"(fn my-iterate [f initial]\n        (lazy-seq\n         (cons initial\n               (my-iterate f (f initial)))))","user":"57147cd9e4b07c98581c3abf"},{"problem":62,"code":"(fn it [x y] (lazy-seq (cons y (it x (x y)))))","user":"598d22b1e4b02b9968b84d1a"},{"problem":62,"code":"(fn [f v]\n  (lazy-seq\n   (reductions (fn [a b] (f a)) v (cycle [v]))))","user":"52a3c66ce4b04e0c58e87c04"},{"problem":62,"code":"(fn i [f x]\n  (cons x (lazy-seq (map f (i f x)))))","user":"53b42472e4b047364c0444b2"},{"problem":62,"code":"(fn iterate-\n  [f init]\n  (cons\n    init\n    (lazy-seq\n      (iterate- f (f init)))))","user":"56084e91e4b046a4fc0ac00f"},{"code":"(fn iter [f i] (cons i (lazy-seq (iter f (f i)))))","problem":62,"user":"504f2071e4b0e7ad84dbc4be"},{"code":"(fn my-it\n  ([func n] (lazy-seq (cons n (my-it func (func n))))))","problem":62,"user":"4f03818e535dcb61093f6b00"},{"problem":62,"code":"(fn prob-62\n  [f x]\n    (lazy-seq\n     (cons\n      x\n      (prob-62 f (f x)))))","user":"59733c91e4b01722bebd4c9b"},{"code":"(fn f1 [f x]\n  (map (fn f2 [n] (if (= n 0) x (f (f2 (dec n))))) (range)))","problem":62,"user":"50b8e9a4e4b0cba0e598b656"},{"problem":62,"code":"(fn reimplement-iterate [fun value]\n    (lazy-seq\n        (cons value (reimplement-iterate fun (fun value)))))","user":"552bd5c2e4b0ffed3738f969"},{"code":"(fn ite [f x]\n  (cons x (lazy-seq (ite f (f x)))))","problem":62,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"problem":62,"code":"(fn f62 [f x]\n  (cons x (lazy-seq (f62 f (f x))))\n  )","user":"526698c9e4b03e8d9a4a7144"},{"code":"(fn mi [f v]\n  (lazy-seq\n    (let [c v]\n      (cons v (mi f (f v))))))","problem":62,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":62,"code":"(fn i[f v] (cons v (lazy-seq (i f (f v)))))","user":"561c0278e4b064ca9f4b1691"},{"problem":62,"code":"(fn my-iterate [f v] (lazy-seq (let [x (f v)] (cons v (my-iterate f x)))))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":62,"code":"#((fn r [i] (lazy-cat [i] (r (%1 i)))) %2)","user":"56aed78fe4b03c432f187363"},{"code":"(fn f [func n]\n  (cons n (lazy-seq (f func (func n)))))","problem":62,"user":"51750cd4e4b07031762f2ee5"},{"problem":62,"code":"(fn own-iterate\n  [given-function initial-value]\n  (lazy-seq (cons initial-value (own-iterate given-function (given-function initial-value)))))","user":"5e4e3c31e4b027a2e10ac0ad"},{"code":"(fn iterate2 [f s]\n  (cons s (lazy-seq (iterate2 f (f s)))))","problem":62,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn itr [fx val]\r\n    (lazy-seq\r\n        (cons val (itr fx (fx val)))))","problem":62,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn iiterate [f x]\n  (cons x (lazy-seq (iiterate f (f x)))))","problem":62,"user":"52efd3d9e4b05e3f0be25ed4"},{"problem":62,"code":"(fn [f x]\n  (letfn [(myiterate [f x]\n    (lazy-seq (cons x (myiterate f (f x)))))]\n    (myiterate f x)))","user":"5813e208e4b0f478707a061b"},{"code":"(fn [f x0]\n  (cons\n   x0\n   (map \n   (fn [n] \n     ( (apply comp (take n (repeat f))) x0 )\n     )\n   (map #(inc %) (range))\n   )\n   )\n  )","problem":62,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn f [_f x] (lazy-seq (cons x (f _f (_f x)))))","problem":62,"user":"4e79a143535db169f9c796a2"},{"code":"(fn ite [f x]\r\n  (lazy-seq\r\n    (cons x (ite f (f x)))))","problem":62,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn x [f i]\r\n  (lazy-seq (cons i (x f (f i)))))","problem":62,"user":"4fadbb17e4b081705acca23e"},{"code":"(fn f [x y] (cons y (lazy-seq (f x (x y)))))","problem":62,"user":"5007c7c7e4b0b17c647f5226"},{"code":"(fn iter [f x]\n  (cons x\n    (lazy-seq\n      (iter f (f x)))))","problem":62,"user":"506406c8e4b075d771da6f9f"},{"code":"(fn m [f n] \n  (lazy-seq (cons n (m f (f n)))))","problem":62,"user":"506617c3e4b03d366d7cb2ab"},{"problem":62,"code":"(fn it\n    [f x] (lazy-seq (cons (bigint x) (it f (f (bigint x))))))","user":"5b269cf3e4b063e2438bcc35"},{"code":"#(tree-seq % (juxt %) %2)","problem":62,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":62,"code":"(fn myIterate [func x]\n  (cons x (lazy-seq (myIterate func (func x))))\n   )","user":"58dd21a9e4b0a4d5acaab6b3"},{"problem":62,"code":"(fn me [f x]\n  (lazy-seq (cons x (me f (f x))))\n  )","user":"5716845be4b07c98581c3afa"},{"problem":62,"code":"(fn own-iterate\n  [f x]\n  (cons x (lazy-seq (own-iterate f (f x))))\n  )","user":"55079e55e4b021ccfedb96aa"},{"problem":62,"code":"(fn\titer [f init]\n  (cons init (lazy-seq (iter f (f init)))))","user":"5e48ec09e4b043cd24807a45"},{"code":"(fn my-iterate\n  [f initial]\n  (lazy-seq (cons initial (my-iterate f (f initial)))))","problem":62,"user":"4ec1b80c535dfed6da9c6db6"},{"code":"(fn aa [x y] (lazy-seq (cons y (aa x (x y)))))","problem":62,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn iter [f start] (cons start (lazy-seq (iter f (f start)))))","problem":62,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":62,"code":"(fn doit [f x]\n  (lazy-seq (cons x (doit f (f x))))\n)","user":"5c0d0537e4b0bdcf453d173d"},{"problem":62,"code":"(fn i [f x]\n  (cons x (lazy-seq (i f (f x))))\n)","user":"54349368e4b0b6b47310fcf1"},{"code":"(fn myit [f x] (lazy-seq (cons x (myit f (f x)))))","problem":62,"user":"4f048f67535dcb61093f6bd3"},{"problem":62,"code":"(fn iter [fun initial] (cons initial (lazy-seq (iter fun (fun initial)))))","user":"4fdb0c0ae4b05e33b9224f57"},{"code":"(fn it [f v] (cons v (lazy-seq (it f (f v)))))","problem":62,"user":"4e7d2f2f535db169f9c796cd"},{"problem":62,"code":"(fn mine\n  [func arg]\n  (cons arg (lazy-seq (mine func (func arg)))))","user":"557e2eafe4b05c286339e0d2"},{"code":"(fn iterate_ [f x] (cons x (lazy-seq (iterate_ f (f x)))))","problem":62,"user":"527fd663e4b0757a1b1713de"},{"code":"(fn fun [f x] (cons x (lazy-seq (fun f (f x)))))","problem":62,"user":"501fa1aee4b0cb6ebc0a42eb"},{"code":"(fn [f in] (map (fn [t] (let [fs (repeat t f)] (reduce (fn [x y] (y x)) in fs))) (range)))","problem":62,"user":"52c60945e4b0c2d177d62108"},{"code":"(fn ls [f x]\n  (lazy-seq (cons x (ls f (f x)))))","problem":62,"user":"4e720985535d5021c1a89655"},{"code":"(letfn \n  [(iter [f x]\n    (lazy-seq (cons x (iter f (f x)))))]\n  iter)","problem":62,"user":"51473a70e4b0d520409ed394"},{"problem":62,"code":"(fn myfunc [f x]\n  (lazy-seq\n   (cons x (myfunc f (f x)))))","user":"606aafcfe4b069485764ddf6"},{"code":"(fn ! [f x]\n  (lazy-seq (cons x (! f (f x)))))","problem":62,"user":"4ee7ef87535d93acb0a66872"},{"problem":62,"code":"(fn re-iterate \n  [f n]\n  (cons n (lazy-seq (re-iterate f (f n)))))","user":"6059d2e0e4b07e92fa001ace"},{"code":"(fn inf-lazy-seq [f x]\n  (lazy-seq (cons x (inf-lazy-seq f (f x)))))","problem":62,"user":"530d85dee4b08068f379eca8"},{"problem":62,"code":"(fn iterate-\n  [f x]\n  (cons x (lazy-seq (iterate- f (f x)))))","user":"604a30c6e4b02d28681c77f0"},{"problem":62,"code":"#(letfn [(fn-iter \n          ([] (fn-iter %2))\n           ([x] (lazy-seq (cons x (fn-iter (%1 x))))))]\n   (fn-iter))","user":"57b356c2e4b0fbc9809a277b"},{"problem":62,"code":"(fn iter [f i]\n  (lazy-seq (cons i (iter  f (f i)))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":62,"code":"(fn new-iterate [func val] (cons val (lazy-seq (new-iterate func (func val)))))","user":"532902f8e4b09d4e7a9b550e"},{"code":"(fn ![f x](lazy-seq(cons x(! f(f x)))))","problem":62,"user":"5032b398e4b00c0952a257eb"},{"problem":62,"code":"(fn iter [f x]\n   (cons x\n    (lazy-seq\n      (iter f (f x)))))","user":"55634f38e4b0c656e3ff17e8"},{"problem":62,"code":"(fn fun [x y]\n  (cons y (lazy-seq (fun x (x y)))))","user":"560ff632e4b05f002753df66"},{"problem":62,"code":"(fn mother [f x] (lazy-seq (cons x (mother f (f x)))))","user":"5eccbce6e4b016b56eae058e"},{"problem":62,"code":"(fn iterate- [f n] (cons n (lazy-seq (iterate- f (f n)))))","user":"57ee41a6e4b0bfb2137f5baf"},{"problem":62,"code":"(fn re-iterate [function value]\n  (cons value (lazy-seq (re-iterate function (function value))))\n  )","user":"60752ef6e4b069485764de55"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq (cons x (my-iterate f (f x) ))))","user":"60c91f48e4b0e0fa5f1b4304"},{"problem":62,"code":"(fn f [g x]\n            (lazy-seq (cons x (f g (g x)))))","user":"53684a2fe4b0243289761e8c"},{"code":"(fn it\n    ([f v]\n        (cons v (lazy-seq (it f (f v))))))","problem":62,"user":"51d28e15e4b0d13b04db0d9b"},{"problem":62,"code":"(fn re-implement-iterate\n  [f x]\n  (reductions (fn [last-result item]\n                         (f last-result)) x (range)))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn f62 [x z] ((fn a [z] (cons z (lazy-seq (a (x z))))) z))","problem":62,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn iter[f x]\r\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4dd52e29535dae65d5c462e5"},{"problem":62,"code":"(fn iterat [f init]\n  (cons init\n        (lazy-seq \n         (iterat f (f init)))))","user":"5f17e3c5e4b091ba50b4dbd0"},{"problem":62,"code":"(fn lstIter [func n]\n  (cons n\n    (lazy-seq\n      (lstIter func (func n))\n    )\n  )\n)","user":"5c82db41e4b0c8042a70ce42"},{"code":"(fn iterate*                                                                                                                               \n  [f x]                                                                                                                                      \n  (cons x (lazy-seq (iterate* f (f x)))))","problem":62,"user":"4e3bcccd535deb9a81d77f56"},{"problem":62,"code":"(fn [f x]\n  (letfn [(my-iterate [f x]\n            (lazy-seq (cons x (my-iterate f (f x)))))]\n    (my-iterate f x)))","user":"51991a89e4b068aa333628fd"},{"problem":62,"code":"(fn r [f x]\n  \t(cons x (lazy-seq (r f (f x)))))","user":"55b1e9e7e4b0da326a65cf74"},{"problem":62,"code":"(fn my-iterate [f initial]\n  (lazy-seq (concat [initial] (my-iterate f (f initial)))))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":"#(letfn [(my-it [f x]\n                (cons x (lazy-seq (my-it f (f x)))))]\n   (my-it %1 %2))","problem":62,"user":"52d340ebe4b099d49816f0c1"},{"problem":62,"code":"(fn my-iterate [fun lst]\n    (cons lst\n        (lazy-seq\n          (my-iterate  \n           fun \n           (fun lst)))))","user":"59e12c94e4b08badc2a0c509"},{"code":"(fn [f x] \n  (reductions #(%2 %1) x (repeat f)))","problem":62,"user":"4f0f01c0535d0136e6c22329"},{"problem":62,"code":"(fn yo [f x]\n  (cons x (lazy-seq (yo f (f x)))))","user":"5746061ae4b009280f9f2b5b"},{"problem":62,"code":"(fn it [f num] (cons num (lazy-seq (it f (f num)))))","user":"57aa103be4b0b8559636fc64"},{"problem":62,"code":"(fn my-iterate [f init]\n  (lazy-seq \n   (cons init (my-iterate f (f init)))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":62,"code":"(fn it ([f init]\n        (lazy-seq (cons init (it f(f init))))))","user":"5c486dece4b0e06e1360a3c0"},{"problem":62,"code":"#((fn it\n   ([] (it %2))\n   ([n] (lazy-seq (cons n (it (%1 n)))))))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":62,"code":"(fn my-iterate [f x]\n  (let [a (f x)] (lazy-seq (cons x (my-iterate f a)))))","user":"55d29fb6e4b0e31453f64a59"},{"problem":62,"code":"(fn m [f x]\n  (lazy-seq (cons x (m f (f x)))))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn itr [f x]\n  (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4ea0c284535d7eef308072ad"},{"code":"(fn iter ([fnn xx] (cons xx (lazy-seq (iter fnn (fnn xx))))))","problem":62,"user":"4eadc217535d7eef30807321"},{"code":"(fn this [f s] (cons s (lazy-seq (this f (f s)))))","problem":62,"user":"5066003ee4b0313a384e5647"},{"problem":62,"code":"(fn miau [f x]\n  (lazy-seq (cons x (miau f (f x)))))","user":"607f3336e4b05857a65e7747"},{"problem":62,"code":"(fn f [a b]\n  (cons b (lazy-seq (f a (a b)))))","user":"5552b617e4b0deb715856df8"},{"code":"(fn my-iterate [f initial]\n  (lazy-seq (cons initial (my-iterate f (f initial)))))","problem":62,"user":"4e4b4564535dc968683fc4d3"},{"problem":62,"code":"(fn it [func val]\n    (lazy-seq\n     (cons val (it func (func val)))))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"code":"(fn iter [f x]\r\n  (lazy-seq\r\n    (cons x (iter f (f x)))))","problem":62,"user":"4f047177535dcb61093f6bc6"},{"problem":62,"code":"(fn [op start] (reductions (fn [curr _] (op curr)) (drop start (range))))","user":"559c4236e4b066d22e731f67"},{"problem":62,"code":"(fn my-iter\n  [f x]\n  (cons x (lazy-seq (my-iter f (f x))))\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":62,"code":"#(letfn [(iter [f x] (cons x (lazy-seq (iter f (f x)))))]\n             (iter %1 %2))","user":"52a9154ee4b0c58976d9ac3b"},{"problem":62,"code":"(fn itr[f v] (lazy-seq (cons v (itr f (f v)))))","user":"5680fff3e4b0966858e4d8f6"},{"code":"(fn myiter [f start] (lazy-cat [start] (myiter f (f start))))","problem":62,"user":"4ddb696b535d02782fcbe9fa"},{"problem":62,"code":"(fn iterate-it [f x]\n  (cons x (lazy-seq (iterate-it f (f x)))))","user":"52b71bd2e4b0c58976d9ad4d"},{"problem":62,"code":"(fn my-it [func init] \n  (lazy-seq (cons init (my-it func (func init)))))","user":"5e1a3989e4b0dc9594008511"},{"code":"(fn myit [f x]\n  (lazy-seq\n   (cons x (myit f (f x)))))","problem":62,"user":"500d8c49e4b07ccb9a7ddb00"},{"problem":62,"code":"(fn ok [f n]\n  (lazy-seq\n   (cons n (ok f (f n)))))","user":"5964c614e4b069c0a1a19770"},{"problem":62,"code":"(fn iter [f init]\n(cons init\n(lazy-seq (iter f (f init)))\n))","user":"565b941ce4b068f2fe63dc07"},{"problem":62,"code":"(fn inf [f x]\n  (lazy-seq \n   (cons x (inf f (f x)))))","user":"5835cb06e4b089d5ab817cea"},{"problem":62,"code":"(fn _iterate [f init]\n  (cons init (lazy-seq (_iterate f (f init)))))","user":"547584d9e4b0c51c1f4d729b"},{"problem":62,"code":"(fn g [f a] (lazy-seq (cons a (g f (f a)))))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"#(let [f %1 v (atom %2)]\n   (cons %2 (repeatedly (fn [] (swap! v f)))))","problem":62,"user":"50bce014e4b0594b91591c63"},{"code":"(fn iter [f x]\r\n           (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn itr [f n] (lazy-seq (cons n (itr f (f n)))))","problem":62,"user":"50481532e4b0ec70b3ef8d96"},{"problem":62,"code":"(fn myit [f s]\n  (lazy-cat (list s) (myit f (f s))))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":62,"code":"(fn f [f1 val]\n  (lazy-seq (cons val (f f1 (f1 val)))))","user":"53bf9cfbe4b0c98a41f5cca4"},{"problem":62,"code":"(fn [f s] (reductions (fn [a _] (f a)) s (range)))","user":"5776385fe4b0979f89651632"},{"code":"(fn re-iterate [f x]\n  (lazy-seq\n    (cons x (re-iterate f (f x)))))","problem":62,"user":"532c9dc9e4b019098a6f8b30"},{"problem":62,"code":"#(letfn\n   [(yolo [x]\n          (cons x (lazy-seq (yolo (%1 x)))))]\n   (yolo %2))","user":"55868660e4b059ccff29b1d4"},{"problem":62,"code":"(fn [f i]\n         (letfn [(my-iterate [f i] (lazy-seq (cons i (my-iterate f (f i)))))]\n           (my-iterate f i)))","user":"55fbc657e4b0f488688e0666"},{"problem":62,"code":"(fn my-func [f x] \n   (lazy-seq (cons x (my-func f (f x)))))","user":"5b2689e3e4b063e2438bcc33"},{"code":"(fn ite [f v] (lazy-seq (cons v (ite f (f v)))))","problem":62,"user":"52baefbae4b07a9af57922da"},{"problem":62,"code":"(fn re [f i]\n  (cons i (lazy-seq (re f (f i)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn itr ([pred x] (lazy-cat [x] (map pred (itr pred x)))))","problem":62,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn iter\n  [f init]\n  (cons init\n        (lazy-seq (iter f (f init)))))","problem":62,"user":"5322d370e4b09d4e7a9b54c7"},{"problem":62,"code":"(fn iterate-\n           [f init]\n           (lazy-seq (cons init (iterate- f (f init)))))","user":"5ec5f7f2e4b08d0ec38692d1"},{"code":"(fn f [g x]\n  (lazy-seq (cons x (f g (g x)))))","problem":62,"user":"4e68dbd5535d8ccf87e9fe8f"},{"problem":62,"code":"(fn my-lazy-seq [f x] (lazy-seq (concat [ x] (my-lazy-seq f (f x)))))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn foo [func x]\n  (cons x (lazy-seq (foo func (func x)))))","problem":62,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn re [f init]\n  (cons init\n        (lazy-seq (re f (f init)))))","problem":62,"user":"524cdd51e4b0752c4cb68ccc"},{"code":"(fn foo [f v]\n  (lazy-seq\n    (cons v (foo f (f v)))))","problem":62,"user":"4eb66737535d7eef3080736b"},{"code":"(fn my-iterate [f initial]                                                                                                                   \r\n    (lazy-seq                                                                                                                                 \r\n     (cons initial (my-iterate f (f initial)))))","problem":62,"user":"4f149e0f535d64f60314643d"},{"problem":62,"code":"(fn myiterate [f init] (->> (f init) (myiterate f) (cons init) (lazy-seq)))","user":"58b80ec1e4b0ebc645576d89"},{"problem":62,"code":"(fn xxx [f x]\n  (lazy-seq (cons x (xxx f (f x) ) )))","user":"570d0548e4b0b0fb43fd06d2"},{"code":"(fn myfn [op n]\n\t(cons n (lazy-seq (myfn op (op n)))\n    )\n)","problem":62,"user":"525ba7bbe4b0cb4875a45d28"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (let [y (f x)]\n      (cons x (my-iterate f y)))))","problem":62,"user":"4e8f4f64535d65386fec2149"},{"problem":62,"code":"(fn [f a] (reductions (fn [b _] (f b)) (repeat a)))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":62,"code":"(fn hey [y x]\n           (lazy-seq (cons x (hey y (y x))))\n           )","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":62,"code":"(fn re [f x]\n  (lazy-seq (cons x (re f (f x))))\n)","user":"5da975b9e4b000c986472c32"},{"code":"(fn fun [f n]\n  (cons n (lazy-seq (fun f (f n)))))","problem":62,"user":"4ee82223535d93acb0a66877"},{"problem":62,"code":"(fn me [f val]\n  (lazy-seq (cons val (me f (f val)))))","user":"5d13af73e4b0902706380dbe"},{"problem":62,"code":"#(reductions (fn [x y] (%1 x) )(repeat %2))","user":"524025bce4b0ad64fa01030f"},{"problem":62,"code":"(fn [f x] (reductions #(%2 %1) x (repeat f)))\n  \n  \n;(fn iterate' [f x]\n;  (lazy-seq (cons x (iterate' f (f x)))))","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":62,"code":"(fn iter [f x]\n (cons x (lazy-seq (iter f (f x)))))","user":"54c169ade4b0ed20f4ff6f24"},{"code":"#(letfn [(my-iter \n          [f x]\n          (lazy-seq\n           (cons x (my-iter f (f x)))))]\n  (my-iter % %2))","problem":62,"user":"4ee9d697535d93acb0a66895"},{"problem":62,"code":"(fn my-iter\n  [f init]\n  (lazy-seq\n   (cons init\n         (my-iter f (f init)))))","user":"55c423e1e4b0e31453f64994"},{"problem":62,"code":"(fn foo [f initial-value]\n  (lazy-seq (cons initial-value\n                  (foo f (f initial-value)))))","user":"5d11618de4b02c15ef021985"},{"problem":62,"code":"(fn iterate2 [f x]\n  (cons x\n        (lazy-seq (iterate2 f (f x)))))","user":"5215661be4b02f6d8ea676c7"},{"code":"(letfn [(iter2 [f x]\n            (cons x (lazy-seq (iter2 f (f x)))))]\n    iter2)","problem":62,"user":"4e89e939535d3e98b8023287"},{"problem":62,"code":"(fn thefun [f x] (lazy-seq (cons x (thefun f (f x)))))","user":"54be792ee4b0ed20f4ff6eeb"},{"problem":62,"code":"(fn iter [x n]\n  (cons n (lazy-seq (iter x (x n)))))","user":"5a99b861e4b0d174b936c7ad"},{"code":"(fn itr [f a]\r\n  (cons a (lazy-seq (itr f (f a)))))","problem":62,"user":"4fdc067fe4b05e33b9224f69"},{"problem":62,"code":"(fn reimp-iterate [f a]\n  (lazy-seq (cons a (reimp-iterate f (f a)))))","user":"55e01f4ee4b050e68259b406"},{"code":"(fn r [f i] (cons i (lazy-seq (r f (f i)))))","problem":62,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":62,"code":"(fn my-iterate [func x]\r\n  (cons x (lazy-seq (my-iterate func (func x)))))","user":"555bd27ae4b0b056612e2244"},{"problem":62,"code":"(fn it [func i]\n    (cons i (lazy-seq (it func (func i)))))","user":"54f09599e4b024c67c0cf89d"},{"problem":62,"code":"(fn ff [f n]\n\t(lazy-seq (cons n (ff f (f n)))))","user":"5951190be4b066ee0a44aea4"},{"problem":62,"code":"(fn x [f v]\n  (loop [res [v] vv v]\n    (if (= (count res) 100)\n      res\n      (recur (conj res (bigint (f vv))) (bigint (f vv))))\n    ))","user":"5926c254e4b072a2710fceb8"},{"problem":62,"code":"(fn my-iterate [f x0]\n  (lazy-seq\n   (cons x0 (my-iterate f (f x0)))))","user":"601c39eee4b0bf4ca6b10937"},{"problem":62,"code":"(fn iter [fun x]\n  (cons x (lazy-seq (iter fun (fun x))))\n)","user":"53a36fd7e4b0f1fc74538834"},{"code":"(fn slam [f x] (lazy-seq (cons x (slam f (f x)))))","problem":62,"user":"506755b3e4b03d366d7cb2bc"},{"problem":62,"code":"(fn reiterate [f x]\n  (lazy-seq\n   (cons x (reiterate f (f x)))))","user":"555521a5e4b0deb715856e12"},{"problem":62,"code":"(fn fun [f n]\n           (cons n (lazy-seq (fun f (f n)))))","user":"559067ace4b0277789237670"},{"code":"(fn myiterate [f x]\n  (cons x (lazy-seq (myiterate f (f x))))\n)","problem":62,"user":"5176afd2e4b085adf681d889"},{"code":"(fn local-iterate [func init]\n    (cons init (lazy-seq\n                (local-iterate func\n                               (func init)))))","problem":62,"user":"4f4a8707e4b0d56e7bb92c12"},{"code":"(fn iter [f v]\n  (lazy-seq (cons v (iter f (f v)))))","problem":62,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":62,"code":"(fn myIterate [f v]\n  (lazy-seq\n   (cons v (myIterate f (f v)))))","user":"556c70dae4b09a3098a524fd"},{"problem":62,"code":"(fn [f init] (reductions (fn [a _] (f a)) init (range)))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn [f x]\n  (reductions\n    (fn [a b] (f a))\n    x\n    (range)))","problem":62,"user":"4f1b0ab3535d64f603146474"},{"problem":62,"code":"(fn outer [f x]\n                   (cons x (lazy-seq (outer f (f x)))))","user":"5075e374e4b09049dea827a5"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq (cons x (it f (f x))))\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":62,"code":"(fn iterate_v1 [f x]\n  (cons x (lazy-seq (iterate_v1 f (f x)))))","user":"5f810e97e4b0c071e6c840ed"},{"code":"(fn [f x]\n  (letfn [(iter [v] (cons v (lazy-seq (iter (f v)))))]\n    (iter x)))","problem":62,"user":"4ea41fc2535d7eef308072cb"},{"problem":62,"code":"(fn [f x](reductions #(%2 %) x (repeat f)))","user":"57c796b4e4b05aa3c4741d08"},{"code":"(fn iter [f x]\n  (lazy-seq\n   (cons x (iter f (f x)))))","problem":62,"user":"4e615cd2535d8ccf87e9fe58"},{"problem":62,"code":"( fn my-iterate\n  [ f x ]\n  ( lazy-cat [ x ] (  my-iterate f ( f x ) ) )\n)","user":"57561529e4b02ea1147992d3"},{"problem":62,"code":"(fn iter [f v]\n\t(lazy-seq (cons v (iter f (f v)))))","user":"5853582fe4b0b7285a6f4ec5"},{"problem":62,"code":"(fn make-seq [f x]\n\t(lazy-seq (cons x (make-seq f (f x)))))","user":"57a88e24e4b0a9660795621f"},{"code":"(fn my-iterate [f x]\n  (lazy-seq\n   (cons\n    x\n    (my-iterate f (f x)))))","problem":62,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn ! [f n]\n            (cons n (lazy-seq (! f (f n)))\n              )\n            )","problem":62,"user":"4ea85846535d7eef308072f9"},{"problem":62,"code":"(fn it[f s]\n                (lazy-seq (cons s (it f (apply f [s])))))","user":"5ed6030de4b016b56eae05db"},{"problem":62,"code":"(fn [f i]\n  (cons i (lazy-seq (map #((apply comp (repeat % f)) i)\n                         (for [x (range) :when (>= x 1)] x)))))","user":"541b41d1e4b01498b1a71a65"},{"problem":62,"code":"(fn [f x] (map (fn [n] (loop [acc x cnt n] (if (= cnt 0) acc (recur (f acc) (dec cnt))))) (range)))","user":"5da8b8ece4b000c986472c28"},{"problem":62,"code":"(fn my-iter [f x] (lazy-seq\n(cons x (my-iter f (f x)))))","user":"5da05bcce4b000c986472bd0"},{"code":"(fn g [f x] (lazy-seq (cons x (g f (f x)))) )","problem":62,"user":"514457fbe4b0b4fb4ace5f43"},{"problem":62,"code":"(fn iter [f y] (cons y (lazy-seq (iter f (f y)))))","user":"5472d919e4b094393f72dd7b"},{"code":"(fn iter [f i]\n  (cons i (lazy-seq (iter f (f i)))))","problem":62,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn g [f x]\n  (lazy-seq\n   (cons x (g f (f x)))))","problem":62,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn foo [f x]\n  (lazy-seq\n    (cons x (foo f (f x)))))","problem":62,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":62,"code":"(fn my-iterate \n  [f x] \n  (lazy-seq (cons x (my-iterate f (f x))))\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"problem":62,"code":"(fn i[f n](cons n (lazy-seq (i f (f n)))))","user":"56347285e4b0bfe05bf117bc"},{"code":"(fn i[f s]\n    (cons s (lazy-seq (i f (f s) ))))","problem":62,"user":"513f53c6e4b051389b345b40"},{"problem":62,"code":"(fn imple-iter \n  [f x]\n  (lazy-seq (cons x (imple-iter f (f x)))))","user":"6074dfa4e4b069485764de4c"},{"problem":62,"code":"(fn my-iterate [f x] (lazy-seq(cons x (my-iterate f (f x)))))","user":"56f188e9e4b04a395b9a0494"},{"problem":62,"code":"(fn my-iterate [f a] (lazy-seq (cons a (my-iterate f (f a)))))","user":"5505ceb3e4b086ebe8a79c8b"},{"code":"(fn itrt [f x] (cons x (lazy-seq (itrt f (f x)))))","problem":62,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":62,"code":"(fn my-iterate \n  [func start] \n  (lazy-seq (cons start (my-iterate func (func start)))))","user":"5764cc01e4b0994c1922fc05"},{"code":"(fn ls [f x] (cons x (lazy-seq (ls f (f x)))))","problem":62,"user":"4f83665ee4b033992c121c1c"},{"problem":62,"code":"(fn my-iterate [fun x]\n             (cons x (lazy-seq (my-iterate fun (fun x)))))","user":"5f77b99fe4b02876ed9fd0bc"},{"problem":62,"code":"(fn my-iterate\n  [f v]\n  (lazy-seq\n    (cons v (my-iterate f (f v)))))","user":"579f89d5e4b05302be0b72ff"},{"code":"(fn my-iterate [f init]\n  (lazy-seq\n   (cons init (my-iterate f (f init)))))","problem":62,"user":"507b7dbee4b09034bfeeb71e"},{"problem":62,"code":"(fn iter [f x]\n  (cons x\n    (lazy-seq (iter f (f x)))))","user":"5a58bfd0e4b05d388ecb6c84"},{"code":"(fn [f x]\n  (map (fn [n] ((apply comp (repeat n f)) x))\n       (range)))","problem":62,"user":"525431dfe4b0541d1855b970"},{"code":"(fn myiterate [f x]\n\t(lazy-seq\n     (cons x (myiterate f (f x)))))","problem":62,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn iter [f i]\n              (cons i (lazy-seq (iter f (f i)))))","problem":62,"user":"4dbdc898535d020aff1edf4a"},{"problem":62,"code":"(fn [f n] (reductions (fn [s e] (f s))\n                   (drop n (range))\n          )\n)","user":"514504c2e4b021a5ff8301fc"},{"code":"(letfn [(temp [f a]\n  (cons a (lazy-seq (temp f (f a)))))]\n                    \n  temp\n  )","problem":62,"user":"4e74e119535d7a570dd295bc"},{"code":"(fn iter [f v]\n         (cons v (lazy-seq (iter f (f v)))))","problem":62,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [f i] (reductions (fn [a b] (f a)) i (range)))","problem":62,"user":"4efd98fa535de96065cf5086"},{"problem":62,"code":"(fn iter [func init]\n  (lazy-seq (cons init (iter func (func init)))))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn whaeva [f n] \n  (cons n (lazy-seq (whaeva f (f n)))))","problem":62,"user":"520cb8c4e4b0b022ef140c9a"},{"code":"(fn iti [f i] (cons i (lazy-seq (iti f (f i)))))","problem":62,"user":"4ff2ff7ce4b0678c553fc342"},{"code":"(fn rep [a b] (lazy-seq (cons b (rep a (a b)))))","problem":62,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn iter [f v]\n  (cons v\n    (lazy-seq\n      (iter f (f v)))))","problem":62,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn my-iterate [f n]\n  (cons n\n    (lazy-seq (my-iterate f (f n)))))","problem":62,"user":"51db0d99e4b06aa4d4669a9d"},{"code":"(fn [f v]\n  (reductions #(f (+ (* %2 0) %1)) v (range)))","problem":62,"user":"50611456e4b0dc10a69545a5"},{"code":"(fn a[f x] (cons x (lazy-seq (a f (f x)))))","problem":62,"user":"4ddbd934535d02782fcbe9fc"},{"problem":62,"code":"(fn ff [f a]\n  (cons a\n        (lazy-seq (ff f (f a)))))","user":"5ea7b04de4b00a66d4a951b6"},{"problem":62,"code":"(fn rrecur [f x]\n  (lazy-seq (cons x (rrecur f (f x)))))","user":"54a80855e4b09f271ff37c9e"},{"problem":62,"code":"(fn iter [f d]\n  (cons d (lazy-seq (iter f (f d)))))","user":"545801f6e4b01be26fd74615"},{"problem":62,"code":"#(reductions (fn [r, _] (% r)) %2 (range))","user":"5f8e865fe4b0715f5002d76d"},{"problem":62,"code":"(fn ri [f i]\n  (cons i (lazy-seq (ri f (apply f (vector i))))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":62,"code":"(fn f[g x]\n  (lazy-seq (cons x (f g (g x))))\n)","user":"54283a7ae4b01498b1a71b2f"},{"code":"(letfn [(my-iterate [f x] (cons x (lazy-seq (my-iterate f (f x)))))] my-iterate)","problem":62,"user":"52b8af15e4b07a9af57922b5"},{"code":"; I worked this out on paper and then looked up the \n; implementation of iterate. It's the same, except that the\n; nesting of cons and lazy-seq is reversed. Not sure what to \n; make of that yet. \n;\n; I think the main difference is that my way calculates one\n; extra iteration of f(x). For example if I passed this to \n; (take 1) I really shouldn't need to calculate anything, but\n; my function will still calculate (f x) once.\n;\n(fn myit [f x] \n  (lazy-seq (cons x (myit f (f x)))))","problem":62,"user":"4eed26af535d93acb0a668bb"},{"problem":62,"code":";; I copied this from clojure iterate!\n(fn it [f x] (cons x (lazy-seq (it f (f x)))))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [f x] (map #(reduce (fn [a b] (b a) ) x (repeat % f) ) (range) ) )","problem":62,"user":"51e28063e4b08e53a149f0f2"},{"problem":62,"code":"(fn myiter [f init]\n  (cons init (lazy-seq (myiter f (f init)))))","user":"5d0815b3e4b0cc9c91588201"},{"code":"(fn a [f x] (lazy-seq (cons x (a f (f x)))))","problem":62,"user":"51db1abae4b094966a2cd685"},{"code":"(fn s[f i] (lazy-seq (cons i (s f (f i)))))","problem":62,"user":"51a768e0e4b0da5f497bde84"},{"problem":62,"code":"(fn doit [f start]\n           (cons start (lazy-seq (doit f (f start)))))","user":"53a511aae4b0b62ce3005735"},{"problem":62,"code":"(fn iterate-62 [f init]\n  (cons init\n        (lazy-seq (iterate-62 f (f init)))))","user":"54ab1b5ae4b09f271ff37cc2"},{"problem":62,"code":"(fn iter8 [f s]\n  (lazy-seq (cons s (iter8 f (f s)))))","user":"5865c8f0e4b0f14aab7c884e"},{"problem":62,"code":"(fn it [ f n ]\n  (cons n (lazy-seq (it f (f n) ))))","user":"554edb85e4b00713264bd99a"},{"problem":62,"code":"#(reductions (fn [c _] (% c)) %2 (range))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":62,"code":"(fn it [f x]\n            (cons x\n              (lazy-seq (it f (f x)))))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(fn my-iterate [f x] \n\t(cons x  (lazy-seq (my-iterate f  (f x)))))","problem":62,"user":"52cdb7efe4b07d0d72b2737c"},{"problem":62,"code":"(fn iterate-\n  [f init]\n  (cons init\n    (lazy-seq\n      (iterate- f (f init)))))","user":"54f2a1b8e4b024c67c0cf8cb"},{"problem":62,"code":"(fn [f x] (map #(if (= 0 %2) %1 (recur (f %1) (dec %2))) (repeat x) (range)))","user":"559454f2e4b0c79f6e1db952"},{"code":"(fn t [f x]\n  (lazy-seq (cons x (t f (f x)))))","problem":62,"user":"4e599577535d8a8b8723a29f"},{"problem":62,"code":"(fn rec [f x]\n  (cons x (lazy-seq (rec f (f x)))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn iter8te [f x]\n  (cons x (lazy-seq (iter8te f (f x)))))","problem":62,"user":"4f0c84ce535d0136e6c2230e"},{"problem":62,"code":"(fn [f x] (cons x ((fn iter [n] (lazy-seq (cons n (iter (f n))))) (f x))))","user":"593ab583e4b069cdc2982b57"},{"code":"(fn niterate [f x]\n  (cons x (lazy-seq (niterate f (f x)))))","problem":62,"user":"508a2c2fe4b016a2107004a1"},{"problem":62,"code":"(fn my-iterate [f init]                                               \n\t(lazy-seq (cons init (my-iterate f (f init)))))","user":"56eb16d8e4b04a395b9a041d"},{"problem":62,"code":"(fn [f v ] \n   (reduce \n     (fn [s vv]\n       (if (> (last s) 10000)\n         (conj s 1)\n         (conj s (f (last s)))\n       )\n     )\n     [v]\n     (range 101)    \n    ))","user":"60845eb8e4b0736b099e42ef"},{"problem":62,"code":"(fn it [func n]\n  (lazy-seq (cons n (it func (func n)))))","user":"602b90c1e4b0d5df2af22266"},{"problem":62,"code":"(fn it [f i]\n    (cons i (lazy-seq (it f (f i)))))","user":"546ff835e4b00cfc9eacc1b4"},{"code":"(fn my-iter [f init]\n  (lazy-seq (cons init (my-iter f (f init)))))","problem":62,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn itr2 [f data]\r\n  (cons data (lazy-seq (itr2 f (f data)))))","problem":62,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn itr [f v]\n   (cons v (lazy-seq (itr f (f v)))))","problem":62,"user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":62,"code":"( fn my-iterate [ f x  ] \n  (lazy-seq \n   (cons x \n         (my-iterate f (f x ) ) ) ) )","user":"5ddbd202e4b0948ae9d9adb4"},{"problem":62,"code":"(fn myiterate [f s]\n  (lazy-cat (list s) (myiterate f (f s))))","user":"53e745a1e4b036ad0777e479"},{"problem":62,"code":"(fn IT [f v] \n   (lazy-seq \n    (cons v (IT f (f v)))\n    )\n   )","user":"58334d18e4b089d5ab817c97"},{"problem":62,"code":"(fn iter [f x0] (lazy-seq (cons x0 (iter f (f x0)))))","user":"59234753e4b0a390037439ef"},{"problem":62,"code":"(fn ff [f x]\n   (lazy-seq (cons x\n     (ff f (f x)))))","user":"5e85163be4b09a7a73c8bbd0"},{"code":"(fn iter [f, x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4f6b4237e4b07046d9f4efa9"},{"code":"(fn r [f a] (cons a (lazy-seq (r f (f a)))))","problem":62,"user":"50d4593ee4b09cc622d65a68"},{"code":"(fn myStuff [f x] (cons x (lazy-seq (myStuff f (f x)))))","problem":62,"user":"52161db6e4b0bf4bffd29cb8"},{"problem":62,"code":"(fn p62- [f init]\n    (lazy-seq\n     (cons init (p62- f (f init)))))","user":"551a21ece4b091ff45eda993"},{"problem":62,"code":"(fn my-iterate [f x0]\n  (lazy-seq (cons x0 (my-iterate f (f x0)))))","user":"57275898e4b0c5bde472c13e"},{"code":"(fn iter[f x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4ffd92e7e4b0678c553fc3e3"},{"code":"(fn iter [f next]\n  (cons next (lazy-seq (iter f (f next)))) \n)","problem":62,"user":"4ff83003e4b0678c553fc396"},{"problem":62,"code":"(fn Reiterate [f x]\n  (cons x\n    (lazy-seq\n      (Reiterate f (f x)))))","user":"5bc255b7e4b07a9b28b10029"},{"problem":62,"code":"(fn it [f x] (cons x (lazy-seq (it f (f x) ))))","user":"53cd421ce4b00fb29b2212dd"},{"problem":62,"code":"(fn r [f x]\n      (lazy-seq (cons x (r f (f x))))\n      )","user":"56df6351e4b0ca2494a095f3"},{"problem":62,"code":"(fn bar [f n]\n  (lazy-seq (cons n (bar f (f n)))))","user":"58303fc3e4b051871117c006"},{"problem":62,"code":"(fn myiterate [f x] \n  (lazy-seq (cons x (myiterate f (f x)))))","user":"58cfbd7ae4b03c36ff7e58ba"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x\n        (lazy-seq (my-iterate f (f x)))))","user":"562cb7cfe4b0a45d2ff83009"},{"code":"#((fn it [n] (cons n (lazy-seq (it (%1 n))))) %2)","problem":62,"user":"5208a3a2e4b0301979a6c235"},{"problem":62,"code":"(fn iterate1 [f start]\n  (cons start (lazy-seq (iterate1 f (f start))))\n  )","user":"55f06183e4b06e875b46ce23"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x\n    (lazy-seq\n      (my-iterate f (f x)))))","user":"5bc50870e4b07a9b28b10069"},{"problem":62,"code":"(fn my-iterate [f x]\n    (cons x\n      (lazy-seq (my-iterate f (f x)))))","user":"4e6a23d0535d8ccf87e9fea0"},{"code":"(fn it [f x](lazy-seq (cons x (it f (f x)))))","problem":62,"user":"4efcac3a535de96065cf507e"},{"problem":62,"code":"(fn iter [f val]\n  (lazy-seq (cons val (iter f (f val)))))","user":"593744abe4b02506e01a299b"},{"code":"#(reductions (fn [x y] (%1 x)) %2 (range))","problem":62,"user":"4e72187b535d5021c1a8965b"},{"problem":62,"code":"(fn -iterate [f x]\n\t(cons x (lazy-seq\n\t\t(-iterate f (f x)))))","user":"5fa80c01e4b0fa27300f3de2"},{"problem":62,"code":"(fn fun [f x]\r\n  (lazy-seq (cons x (fun f (f x)))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn my-iter [f x]\n    (lazy-seq (cons x (my-iter f (f x)))))","problem":62,"user":"52e75667e4b09f7907dd1485"},{"code":"(fn myit [f x]\n\t  (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"5213ffd3e4b0961f15ac4d7d"},{"code":"(fn infinite [func x]\n  (cons x (lazy-seq(infinite func (func x)))))","problem":62,"user":"504eff22e4b0e7ad84dbc4a9"},{"code":"(fn this [func init]\n    (lazy-seq \n      (cons init (this func (func init)))))","problem":62,"user":"4ea4fe1f535d7eef308072cf"},{"code":"(fn z [f n] (\n             cons n (lazy-seq (z f (f n)))))","problem":62,"user":"5142e808e4b0c172af7558c9"},{"code":"#(reductions (fn [x _] (% x)) %2 (range))","problem":62,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn foo [f x] (lazy-seq (cons x (foo f (f x)))))","problem":62,"user":"4ebbf772535dfed6da9c6d76"},{"problem":62,"code":"(fn [f x]\n  (for [i (range)] ((apply comp (repeat i f)) x)))","user":"5b88f0c0e4b047b03b203816"},{"code":"(fn [f x] (reductions #(%2 %1) x (repeat f)))","problem":62,"user":"4f280840e4b0d6649770a010"},{"problem":62,"code":"(fn ite[ff ini](lazy-seq(cons ini (ite ff (ff ini)))))","user":"5dadf73ee4b0f8c104ccfc86"},{"code":"(fn my-iterate\n  [f v]\n  (cons v (lazy-seq (my-iterate f (f v)))))","problem":62,"user":"50cb4cf6e4b0f78a8e1645b4"},{"problem":62,"code":"(fn myiter [f v]\n  (cons v (lazy-seq (myiter f (f v)))))","user":"5710140fe4b09c608db7042e"},{"problem":62,"code":"(fn my-iterate [f val]\n  (lazy-seq (cons val (my-iterate f (f val)))))","user":"5c3ac091e4b0d62ef62d9f95"},{"code":"(fn it [f i]\n  (lazy-seq (cons i (it f (f i)))))","problem":62,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn r [f %]\r\n  (cons % (lazy-seq (r f (f %)))))","problem":62,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn itr\n  [f x]\n  (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"5289bba9e4b0239c8a67ae69"},{"problem":62,"code":"(fn my-iterate\n  ([my-fn, idx] (lazy-seq (cons idx (my-iterate my-fn (my-fn idx))))))","user":"5a2a0cb6e4b09cafd31c7f2c"},{"code":"(fn g [a b] (cons b (lazy-seq (g a (a b)))))","problem":62,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn it [f a] (cons a (lazy-seq (it f (f a)))))","problem":62,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn g [f n] (cons n (lazy-seq (g f (f n)))))","problem":62,"user":"4f89d489e4b033992c121c7e"},{"code":"(fn my-iterate [f x]\n  (lazy-seq (cons x (my-iterate f (f x)))))","problem":62,"user":"4e976f79535dbda64a6f6b55"},{"problem":62,"code":"(fn myiterate [f n]\n  (lazy-seq (cons n (myiterate f (f n)))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq (cons x(it f (f x))))\n  )","user":"53a19dece4b0ca733b9744c0"},{"code":"(fn iter [f x] (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4e84f77c535db62dc21a62e5"},{"code":"(fn iter \n  ([f init]\n    (concat [init] (iter f init \"dummy\")))\n  ([f lst dummy]\n    (let [n (f lst)]\n      (lazy-seq\n        (cons n (iter f n dummy))))))","problem":62,"user":"5084c43be4b0fb8f40674bfa"},{"problem":62,"code":"(fn my-iterate [f arg]\n  (lazy-seq (cons arg (my-iterate f (f arg))))\n  )","user":"59b0e877e4b0e1f4e384c8d3"},{"problem":62,"code":"(fn itr [func x] (lazy-seq (cons x (itr func (func x)))))","user":"55f4ef68e4b06e875b46ce82"},{"problem":62,"code":"(fn i\n  ([f x] (i f x 0))\n  ([f x n] (cons x (lazy-seq (i f (f x) (inc n))))))","user":"587294f0e4b01531a375ea1e"},{"problem":62,"code":"(fn myiter [func x]\n  (cons x (lazy-seq (myiter func (func x)))))","user":"5ca1c45ae4b048ec896c5b85"},{"problem":62,"code":"(fn f [g x]\n  (lazy-seq (cons x (map g (f g x)))))","user":"5a065388e4b01bb0ae8afdcb"},{"problem":62,"code":"(fn f1 [f v] (cons v (lazy-seq (f1 f (f v)))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn foo [f x] (lazy-seq(cons x (foo f (f x ))  ))  )","problem":62,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn ff [f x] \n (cons x  (lazy-seq (ff  f (f x)))))","problem":62,"user":"4df9c598535d04ed9115e77a"},{"problem":62,"code":"(fn itr\n  [f v]\n  (cons v (lazy-seq (itr f (f v)))))","user":"544cf5d7e4b0e39780006977"},{"code":"(fn f \n  [g x]\n  (cons x\n        (lazy-seq \n          (f g (g x)))))","problem":62,"user":"50aa60bee4b056ee01935865"},{"code":"(fn i2 [f x]\n    (cons x (lazy-seq (i2 f (f x)))))","problem":62,"user":"52963cc7e4b02ebb4ef7502d"},{"code":"(fn it [fu iv]\n  (lazy-seq\n    (cons iv (it fu (fu iv)))))","problem":62,"user":"4fbe42b7e4b081705acca30f"},{"code":"(fn q [f v] (lazy-seq (cons v (q f (f v)))))","problem":62,"user":"4ed69ea4535d10e5ff6f52e3"},{"problem":62,"code":"(fn iter [func start]\n    (lazy-seq (cons start (iter func (func start)))\n      ))","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":62,"code":"(fn my-iter\n  [f x]\n  (cons x\n        (lazy-seq \n         (my-iter f (f x)))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":62,"code":"(fn itt [f init] (lazy-seq \n                  (cons init\n                        (itt f (f init))\n                   )))","user":"5dcfdf23e4b0948ae9d9ad43"},{"code":"(fn i [f x] (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4dc986d0535d5973398f9285"},{"code":"(fn it [f x] \n  (lazy-seq\n    (cons x (it f (f x)))\n  )\n)","problem":62,"user":"50921f9ae4b09a7d0b586de1"},{"problem":62,"code":"(fn recurfn [somefn n] (lazy-seq (cons n (recurfn somefn (somefn n)))))","user":"59fa107ce4b0ca45a743a353"},{"problem":62,"code":"(fn reiterate-fn [f x]\n                 (lazy-seq (cons x (reiterate-fn f (f x)))))","user":"57f904c5e4b0d3187e900936"},{"problem":62,"code":"(fn new-iterate [f init]\n  (cons init\n    (lazy-seq\n      (new-iterate f (f init)))))","user":"5f5f9483e4b02876ed9fcff8"},{"problem":62,"code":"(fn [f init]\n  (reductions (fn [acc _]\n                (f acc))\n              init\n              (range)))","user":"5ade6bafe4b0837691e92c23"},{"problem":62,"code":"(fn self [f x]\n                 (lazy-cat [x] (self f (f x))))","user":"546c4377e4b00cfc9eacc177"},{"problem":62,"code":"(fn iter8 [f x]\n  (cons x (lazy-seq (iter8 f (f x)))))","user":"57262710e4b0c5bde472c120"},{"code":"(fn f [g v] (lazy-seq (cons v (f g (g v)))))","problem":62,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn ls [f x]\n  (cons x (lazy-seq (ls f (f x)))))","problem":62,"user":"4ef9b021535dced4c769f269"},{"problem":62,"code":"(fn [f x]\n  (map #((apply comp (repeat %1 f)) x) (range))\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"code":"(fn iter [f n]\n   (cons n (lazy-seq (iter f (f n)))))","problem":62,"user":"4eeaf88f535d93acb0a668a3"},{"code":"(fn my-iter [f x]\n  (cons x (lazy-seq (my-iter f (f x)))))","problem":62,"user":"5119f3d5e4b06c8af0111818"},{"code":"(fn it [f i]\n  (lazy-seq \n    (cons i (it f (f i)))\n  )\n)","problem":62,"user":"4e9de526535dbda64a6f6b8e"},{"code":"(fn it [f init]\r\n         (lazy-seq\r\n          (cons init (it f (f init)))))","problem":62,"user":"4e0d8c27535d04ed9115e7b7"},{"problem":62,"code":"(fn my-iterate [function value]\n  (lazy-seq (cons value (my-iterate function (function value)))))","user":"604a3daee4b02d28681c77f2"},{"problem":62,"code":"(fn gen [f x] (lazy-seq (cons x (gen f (f x)))))","user":"5591b61ee4b0604b3f94d580"},{"problem":62,"code":"(fn iter [f x] \n  (lazy-seq \n    (cons x (iter f (f x)))))","user":"4f8490fae4b033992c121c34"},{"code":"(fn iter [f n]\n    (cons n (lazy-seq (iter f (f n)))))","problem":62,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn ! [f x]\n  (cons x (lazy-seq\n           (! f (f x)))))","problem":62,"user":"50586354e4b06522596eba78"},{"problem":62,"code":"(fn itrt[f initial]\n      (lazy-seq (cons initial (itrt f (f initial)))))","user":"4f867b25e4b033992c121c51"},{"problem":62,"code":"(fn iteratr [f x] (cons x (lazy-seq (iteratr f (f x)))))","user":"52b89d55e4b07a9af57922b3"},{"problem":62,"code":"(fn iteration[f n] (cons n (lazy-seq (iteration f (f n)))))","user":"5627d09ce4b00e49c7cb47db"},{"code":"(fn my-iterate [f x] (cons x (lazy-seq(my-iterate f (f x)))))","problem":62,"user":"4fa38e3fe4b081705acca190"},{"code":"(fn r [f a]\n  (cons a (lazy-seq (r f (f a)))))","problem":62,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn ite \n  [f v]\n  \t(lazy-seq\n   \t\t(cons v (ite f (f v)))))","problem":62,"user":"51780f88e4b03d69594194c9"},{"problem":62,"code":"(fn myterate [f n]\n  (lazy-seq\n    (cons n\n          (myterate f (f n)))))","user":"5b2a559be4b063e2438bcc74"},{"code":"(fn i [f x]\n  (cons\n    x\n    (lazy-seq (i f (f x)))))","problem":62,"user":"4dae0510c9a9d6ed4b99dc57"},{"code":"(fn iterate- [f value]\n  \"62. Given a side-effect free function f and an initial value x                                                                                                       \n   write a function which returns an infinite lazy sequence of x, (f                                                                                                    \n   x), (f (f x)), (f (f (f x))), etc.\"\n  (lazy-seq\n   (cons value (iterate- f (f value)))))","problem":62,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn my-iterate[f x]\n  (lazy-seq (cons x (my-iterate f (f x))))\n)","problem":62,"user":"4faacc04e4b081705acca201"},{"code":"(fn mojit [f x]\n(cons x (lazy-seq (mojit f (f x))\n)))","problem":62,"user":"4e78dc98535db95036265724"},{"problem":62,"code":"(fn iter [f i]\n  (cons i\n        (lazy-seq (iter f (f i)))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":62,"code":"(fn m-iterate [f s]\n  (lazy-seq\n    (cons s (m-iterate f (f s)))\n  )\n)","user":"575ebba3e4b08062f99a4e70"},{"problem":62,"code":"(fn my-iter [f init]\n   (lazy-seq (cons init (my-iter f (f init)))))","user":"54d26316e4b0e8a36923e5f2"},{"code":"(fn m [f x] (\n   lazy-seq\n      (cons x (m f (f x)))))","problem":62,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn it [f x] (lazy-seq (cons x\n                             (it f (f x)))))","problem":62,"user":"51352899e4b082aeb3a3f03b"},{"problem":62,"code":"(fn p62-iterate [f init]\n  (lazy-seq (cons init (p62-iterate f (f init)) )))","user":"543b12cce4b032a45b86932a"},{"code":"(fn rec[f x]\n  (cons x\n    (lazy-seq\n        (rec f (f x)))))","problem":62,"user":"522454f4e4b01819a2de42d3"},{"problem":62,"code":"(fn fun [f n] (cons n (lazy-seq (fun f (f n)))))","user":"555883c5e4b0deb715856e2d"},{"code":"(fn ! [f i]\n  (cons i (lazy-seq (! f (f i)))))","problem":62,"user":"4e7d1c22535db169f9c796c5"},{"code":"(fn it [f x]\r\n  (lazy-seq\r\n    (cons x\r\n      (it f (f x)))))","problem":62,"user":"4dcd818e535d5973398f929d"},{"code":"(fn my_iterate [f i]\n            (lazy-seq\n             (cons i (my_iterate f (f i)))))","problem":62,"user":"52fac708e4b047fd55836fff"},{"problem":62,"code":"(fn test-iterate [f x]\n  (cons x (lazy-seq (test-iterate f (f x)))))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn r [f i] (lazy-seq (cons i (r f (f i)))))","problem":62,"user":"4e8510e7535db62dc21a62e7"},{"problem":62,"code":";;(fn [f x] (map-indexed (fn [i [f x]] (reduce (fn [r f] (f r)) x (repeat i f))) (repeat [f x])))\n;; \n(fn reiterate [f x] (lazy-cat (list x) (reiterate f (f x))))","user":"54bad522e4b0ed20f4ff6eb8"},{"problem":62,"code":"(fn f  [ op x]\n (lazy-seq\n   (cons x (f op (op x)))))","user":"4e6a5728535d8ccf87e9fecf"},{"problem":62,"code":"(fn my-iterate [f x]\n      (lazy-cat [x] (my-iterate f (f x))))","user":"5921a080e4b09b4ee5954c77"},{"problem":62,"code":"(fn itx [f x]\n           (cons x (lazy-seq (itx f (f x)))))","user":"546b24a0e4b00cfc9eacc166"},{"problem":62,"code":"(fn [f start]\n  (map\n   (fn [it]\n     (loop [acc start\n            n it]\n       (if (= n 0)\n         acc\n         (recur (f acc) (dec n))\n       )\n     )\n   )\n   (range)\n  )\n)","user":"5ba75fdfe4b0a20761a23419"},{"code":"(fn iter [f n]\n  (cons n (lazy-seq (iter f (f n)))))","problem":62,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn iterate- [a initialize]\n  (cons initialize\n    (lazy-seq\n      (iterate- a (a initialize)))))","problem":62,"user":"50ef56dfe4b0bdaecbb47d94"},{"problem":62,"code":"(fn my-iterate\n  [f val]\n  (lazy-seq\n    (cons val (my-iterate f (f val)))))","user":"547bf82de4b0c51c1f4d72e1"},{"problem":62,"code":"(fn recursef [f x](lazy-seq (cons x (recursef f (f x)))))","user":"59692530e4b069c0a1a197e4"},{"problem":62,"code":"(fn my-iterate\n  [fun x]\n  (cons x (lazy-seq (my-iterate fun (fun x)))))","user":"59e8fef3e4b0249b72820743"},{"problem":62,"code":"(fn fw [f v] (cons v (lazy-seq (fw f (f v)))))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn out [fun x]\n  (cons x \n    (lazy-seq (out fun (fun x)))))","problem":62,"user":"511ac026e4b0c87c59c9670e"},{"problem":62,"code":"(fn gen [f init] (cons init (lazy-seq (gen f (f init)))))","user":"5b210749e4b03cfeda66ed48"},{"code":"(fn r [f x] (cons x (lazy-seq (r f (f x)))))","problem":62,"user":"507a9b29e4b08327cd804a6e"},{"code":"(fn it [f n]\n  (cons n (lazy-seq (it f (f n)))))","problem":62,"user":"5191ac45e4b0d428d29dc1b6"},{"problem":62,"code":"(fn ita [f arg]\n    (lazy-cat [arg] (ita f (f arg))))","user":"583c8bd4e4b089d5ab817d81"},{"problem":62,"code":"(fn my-iterate\n              [f s]\n              (cons s (lazy-seq (my-iterate f (f s)))))","user":"50a3ad0ee4b0ceace084d493"},{"problem":62,"code":"#((fn fun [x]\n   (lazy-seq (cons x (fun (%1 x))))) %2)","user":"57168db0e4b07c98581c3afc"},{"problem":62,"code":"(fn my-iter [f x] (lazy-seq (cons x (my-iter f (f x)))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":62,"code":"(fn again [f x]\n  (cons x (lazy-seq (again f (f x)))))","user":"524740e7e4b05ef8e38e635d"},{"code":"(fn\n  [f x]\n  (loop [n  1\n         re []\n         m  (bigint x)]\n    (if (> n 100)\n      re\n      (recur (inc n) (if (= n 1)\n                       (into re (vector x))\n                       (into re (vector m)))\n             (f m)))))","problem":62,"user":"531016d0e4b08068f379ecd1"},{"code":"(fn iti [f x]\n  (lazy-seq (cons x (iti f (f x)))))","problem":62,"user":"4e5d2dc5535d8a8b8723a2ca"},{"problem":62,"code":"(fn bla [f val] (cons val (lazy-seq (bla f (f val)))))","user":"5d5e9f45e4b0c9e5857d4ff5"},{"code":"(fn iter[f x] (cons  x (lazy-seq (iter f (f x)) )))","problem":62,"user":"51eec1a6e4b0871fa145d98d"},{"problem":62,"code":"(fn qn [f x]\n   (cons x (lazy-seq (qn f (f x))) ))","user":"5d974b1de4b0d3f9b434ad36"},{"problem":62,"code":"(fn iterate-ku [f x] (lazy-seq (cons x (iterate-ku f, (f x)))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn __ [f initial]\n          (let [initial' (f initial)]\n            (lazy-seq (cons initial (__ f initial')))))","problem":62,"user":"504e0136e4b078edc5f5938e"},{"code":"(fn my-iterate\n  [f a]\n  (lazy-seq\n   (cons a\n         (my-iterate f (f a)))))","problem":62,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn r [f n] (lazy-seq (cons n (r f (f n)))))","problem":62,"user":"506cad7de4b0a302964c548e"},{"problem":62,"code":"(fn [op a]\n            ((fn fx\n              ([] (cons a (fx a)))\n              ([n] (lazy-seq (cons (op n) (fx (op n)))))\n              ))\n            \n            )","user":"56ebe773e4b04a395b9a042a"},{"problem":62,"code":"(fn ! [p q] (lazy-seq (cons q (! p (p q)))))","user":"56066e82e4b08b23635d3173"},{"code":"(fn my-iterate[f x](cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"52a1edd6e4b04e0c58e87be4"},{"problem":62,"code":"(fn g [f x]\n    (lazy-seq (cons x (g f (f x))))\n    )","user":"5ec1b293e4b00a66d4a95296"},{"problem":62,"code":"(fn custom-iterate [f v]\n  (lazy-seq (cons v (custom-iterate f (f v))))\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":62,"code":"(fn myiterate [foo x] (lazy-seq (cons x (myiterate foo (foo x)))))","user":"562add6de4b00e49c7cb4834"},{"problem":62,"code":"(fn my-iterate\n  [f n]\n  (reductions #(%2 %1) n (repeat f)))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn my-iter [f x] (cons x (lazy-seq (my-iter f (f x)))))","problem":62,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn iter\r\n  [f x]\r\n  (lazy-seq\r\n    (cons x (iter f (f x)))))","problem":62,"user":"500159b3e4b0678c553fc419"},{"problem":62,"code":"(fn nxt[f x]\n  (cons x\n    (lazy-seq\n       (nxt f (f x))\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":62,"code":"(fn my-iterate [f n]\n           (cons n (lazy-seq (my-iterate f (f n)))))","user":"54357066e4b0b6b47310fcfd"},{"code":"(fn my-iter [f x] (cons x  (lazy-seq (my-iter f (f x)))))","problem":62,"user":"51c09719e4b0c9c82288293c"},{"code":"#(letfn [(iter [f x]\n                 (cons x (lazy-seq (iter f (f x)))))]\n   (iter % %2))","problem":62,"user":"5047782ce4b0371827a27bc2"},{"code":"(fn ! [f x]\n         (cons x (lazy-seq (! f (f x) ) ))\n )","problem":62,"user":"4ea31da2535d7eef308072c1"},{"problem":62,"code":"(fn _iterate [f x]\n  (lazy-seq (cons x (_iterate f (f x)))))","user":"5a3e1243e4b0447ef91cc5ae"},{"code":"(fn it [f x]\n  (cons x (lazy-seq x (it f (f x)))))","problem":62,"user":"4e2b1d48535deb9a81d77f03"},{"code":"(fn m [f x]\r\n  (lazy-seq\r\n    (cons x (m f (f x)))))","problem":62,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn a [f n]\n  (cons n (lazy-seq (a f (f n)))))","problem":62,"user":"4f253a49e4b0d66497709ff3"},{"problem":62,"code":"(fn my-iterate [f seed]\n  (lazy-seq (cons seed (my-iterate f (f seed)))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":62,"code":"(fn [f s]\n  (reductions (fn [a _] (f a))\n              (repeat s)\n              )\n  \n  )","user":"55e8a85be4b0121d4835fd98"},{"problem":62,"code":"(fn iter [f init](\n  cons init (lazy-seq (iter f (f init))))\n)","user":"546280d8e4b01be26fd746b0"},{"problem":62,"code":"(fn apply-seq [fun value]\n  (letfn [(apply-fun [fun value]\n            (let [current (fun value)]\n              (cons current (lazy-seq (apply-fun fun current)))))]\n    (cons value (apply-fun fun value))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn ! [m b]  \n  (cons b (lazy-seq (! m (m b))))\n  )","problem":62,"user":"5106dc1be4b01150e115ebf0"},{"problem":62,"code":"(fn i! [f x] ( cons x (lazy-seq (i! f (f x))) ))","user":"532018efe4b08068f379edcd"},{"problem":62,"code":"(fn do-iterate [f x]\n  (lazy-seq (cons x (do-iterate f (f x)))))","user":"534056fce4b085b17e897dac"},{"code":"(fn i [f n]\n  (lazy-cat [n] (i f (f n))))","problem":62,"user":"51ad244fe4b09397d510977f"},{"problem":62,"code":"(fn itercos [b a] (cons a (lazy-seq (itercos b (b a)))))","user":"557e8326e4b05c286339e0d7"},{"problem":62,"code":"(fn iter [f n]\n           (cons n (lazy-seq (iter f (f n)))))","user":"531c6e72e4b08068f379eda0"},{"code":"(fn it[f x]\n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"50e3cf55e4b01912b3285c45"},{"code":"(fn myiterate [f ini]\n  (cons ini (lazy-seq (myiterate f (f ini)))))","problem":62,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":62,"code":"(fn again [func input] \n             (lazy-seq (cons input (again func (func input)))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":62,"code":"(fn iter[func arg]\n  (cons arg\n        (lazy-seq (iter func (func arg)))))","user":"54b10d08e4b09f271ff37d18"},{"problem":62,"code":"(fn [f x]\n    (let [iter (fn iter [f x]\n                 (lazy-seq (cons x (iter f (f x))))\n                 )]\n      (iter f x)\n      )\n    )","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(fn it [f v]\n  (cons v (lazy-seq (it f (f v)))))","problem":62,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn iterate2 [f x] (lazy-seq (cons x (iterate2 f (f x)))))","problem":62,"user":"503255d0e4b0e78df07b092b"},{"code":"(fn my-iterate01 [oper arg]\n  (lazy-seq \n   (cons arg \n         (my-iterate01 oper (oper arg))\n   )\n  )\n )","problem":62,"user":"4fba77fae4b081705acca2df"},{"problem":62,"code":"(fn iterate*\n  [f v]\n  (lazy-seq (cons v (iterate* f (f v)))))","user":"55d5ee3fe4b0e31453f64a92"},{"code":"(fn reit [f x] (cons x (lazy-seq (reit f (f x)))))","problem":62,"user":"52747090e4b03e8d9a4a74a5"},{"problem":62,"code":"(fn myiter [f init] (cons init (lazy-seq (myiter f (f init)))))","user":"5a34de78e4b0ddc586f153d0"},{"problem":62,"code":"(fn f-x [f x]\n    (cons x (lazy-seq (f-x f (f x)))))","user":"54508859e4b0e397800069a3"},{"code":"(fn it-er-ate\n  [f x]\n  (cons x (lazy-seq (it-er-ate f (f x)))))","problem":62,"user":"53806e5be4b06839e8705ec1"},{"problem":62,"code":"(fn [f n](letfn [(itr [x] (lazy-seq (cons x (itr (f x)))))] (itr n)))","user":"58e7229fe4b056aecfd47cc4"},{"problem":62,"code":"(fn g [f x]\n  (lazy-seq\n   (cons x\n         (g f (f x)))))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":62,"code":"(fn inf [func seed]\n  (lazy-seq (cons seed (inf func (func seed)))))","user":"51f38193e4b0fca5e8b48226"},{"code":"(fn iter [f v]\n  (let [inner (fn me [f v]\n                (lazy-seq\n                 (let [step [(f v)]]\n                   (concat step (me f (step 0))))))]\n    (cons v (inner f v))))","problem":62,"user":"4f0ef874535d0136e6c22328"},{"problem":62,"code":"(fn fcn [f initial]\n         (lazy-seq (cons initial (fcn f (f initial)))))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn fx [f x]\n  (cons x (lazy-seq (fx f (f x)))))","problem":62,"user":"4e4ad154535dc968683fc4d1"},{"problem":62,"code":"(fn my-itr [f init]\n  (lazy-seq (cons init (my-itr f (f init)))))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn myit\n  [f x] (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"4e333091535deb9a81d77f25"},{"problem":62,"code":"(fn f1 [f co] (lazy-seq (cons co (f1 f (f co)))))","user":"54be7e93e4b0ed20f4ff6eed"},{"code":"(fn i[f x] (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"53034738e4b0d8b024fd373e"},{"problem":62,"code":"(fn my-iterate [f init]\n  (cons init\n        (lazy-seq (my-iterate f (f init)))))","user":"5959c72ae4b066ee0a44afac"},{"code":"#((fn f1 [f x] (lazy-seq (cons x (f1 f (f x))))) %1 %2)","problem":62,"user":"5046b003e4b011c5dfee7727"},{"code":"(fn myiter [f x]\n  (cons x (lazy-seq (myiter f (f x))))\n  )","problem":62,"user":"4ec4d723535dcc7ae8597d65"},{"problem":62,"code":"(fn [f s]\n  (letfn [(my-seq [f s]\n            (lazy-seq (cons s (my-seq f (f s)))))]\n    (my-seq f s)))","user":"58bb218be4b0888cdc949cf4"},{"problem":62,"code":"(fn blah[f s]\n\n            (lazy-seq\n\n              (cons s (blah f (f s)))\n              )\n\n            )","user":"54ef4a1ee4b024c67c0cf883"},{"code":"(fn iter [fun x]\n  (cons x (lazy-seq (iter fun (fun x)))))","problem":62,"user":"4ff743fde4b0678c553fc38d"},{"code":"(fn tunte-philip[f x] \n  (lazy-seq (cons x (tunte-philip f (f x)))))","problem":62,"user":"5300aa1de4b0d8b024fd3710"},{"code":"(fn i [f x]\n  (lazy-cat [x] (i f (f x))))","problem":62,"user":"4e6f578c535d5021c1a8961b"},{"problem":62,"code":"(fn [ff x] (let [rr (fn ru [i] (if (= i 0) \n                                 x\n                                 (ff (ru (- i 1)))\n                                 )\n                      )\n                 ]\n             (map rr (range))\n             )\n  )","user":"5c54e605e4b0fb8c5ffd9a14"},{"code":"(fn iter\n  [f init]\n  (lazy-seq\n    (cons init\n          (iter f (f init)))))","problem":62,"user":"53121863e4b08068f379ecf3"},{"problem":62,"code":"(fn my-iterate\n    [f x]\n  (lazy-seq\n   (cons x (my-iterate f (f x)))))","user":"5599abc9e4b031d6649c9bb0"},{"code":"(fn a [f n] (lazy-seq (cons n (a f (f n)))))","problem":62,"user":"4db5082e535d87e67b28fe03"},{"problem":62,"code":"(fn la [f initial]\n  (lazy-cat (list initial) (la f (f initial)))\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn r[f x](cons x(lazy-seq(r f(f x)))))","problem":62,"user":"4dd66da7535d2dad7130b5c8"},{"problem":62,"code":"(fn iterate- [f init]\n  (cons init\n\t(lazy-seq\n\t  (iterate- f (f init))\n\t)        \n  )\n)","user":"560d2a2be4b05f002753df35"},{"problem":62,"code":"(fn funk [f x] (cons x (lazy-seq (funk f (f x)))))","user":"5441f5e8e4b032a45b869375"},{"problem":62,"code":"(fn fnnn \n  [f n]\n  (lazy-seq (cons n (fnnn f (f n)))))","user":"59deba46e4b01968742fed7f"},{"problem":62,"code":"(fn [f n] (reductions (fn [x _] (f x)) (repeat n)))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":62,"code":"(fn Iter [f x]\n  (lazy-seq\n   (cons x\n   \t(Iter f (f x)))))","user":"5a534241e4b05d388ecb6c0a"},{"problem":62,"code":"(fn iter [f v]\n        (lazy-seq (cons v (iter f (f v)))))","user":"5a64dcabe4b0512ff01cd9a9"},{"problem":62,"code":"(fn iter \n  [fun a]\n  (cons a (lazy-seq(iter fun (fun a)))))","user":"5ac92dc3e4b0e27600da77bf"},{"problem":62,"code":"(fn [f init] (reductions (fn [x _] (f x)) init (repeat nil)))","user":"58dc81d1e4b0a4d5acaab69e"},{"code":"(fn [f s] (map-indexed\n           #(if (= %1 0) %2 \n              (recur (dec %1) (f %2))) (repeat s)))","problem":62,"user":"52b80827e4b0c58976d9ad56"},{"problem":62,"code":"(fn it[f x] (lazy-seq (cons x (it f (f x)))))","user":"5457e5f1e4b01be26fd74613"},{"code":"(fn rep [f x]\n  (cons x (lazy-seq (rep f (f x)))))","problem":62,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn fun [f x]\n         (lazy-seq (cons x (fun f (f x) )) ))","problem":62,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn my-iterate[f x]\n  (lazy-seq \n    (cons x (my-iterate f (f x )))\n  )\n)","problem":62,"user":"5041b3c0e4b06d8231e4facf"},{"code":"(fn myfn [f init]\n  (cons init (lazy-seq (myfn f(f init)))))","problem":62,"user":"52430d3ce4b076204b44faa5"},{"code":"(fn myiter [f args]\n  (cons args (lazy-seq (myiter f (f args)))))","problem":62,"user":"5348236ee4b084c2834f4a54"},{"problem":62,"code":"(fn kk [f a]\n  (lazy-seq\n   (cons a (kk f (f a)))\n  ))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":62,"code":"(fn iterate- [f n]\n  (cons n\n   \t(lazy-seq \n      (iterate- f (f n)))))","user":"53d612cbe4b0e771c3025452"},{"code":"(fn it [f s]\n  (lazy-cat [s] (it f (f s))))","problem":62,"user":"5006b7d2e4b0678c553fc48c"},{"problem":62,"code":"(fn [f x] (reductions (fn [y _] (f y)) x (range)))","user":"56fde58ae4b08d47c97781aa"},{"code":"(fn i [f n] (lazy-seq (cons n (i f (f n)))))","problem":62,"user":"4e6e6630535d5021c1a89609"},{"code":"(fn my-iterate [f x]\r\n    (lazy-seq\r\n     (cons x (my-iterate f (f x)))))","problem":62,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn my-iterate [f initial]\n  \t(lazy-seq (cons initial\n                    (my-iterate f (f initial)))))","problem":62,"user":"51008b6fe4b0700a7a02d6e4"},{"problem":62,"code":"#(reductions (fn [acc x] (%1 acc)) %2 (repeat %2))","user":"594d4c57e4b07ddc2dafae87"},{"code":"(fn r\r\n  ([f x]\r\n    (cons \r\n      x\r\n      (lazy-seq (r f (f x))))))","problem":62,"user":"4ecbb249535df97575fdabdf"},{"problem":62,"code":"(fn iter [Fx x0]\n\t\t(cons x0 (lazy-seq (iter Fx (Fx x0)))))","user":"564d02cde4b0284900eef679"},{"problem":62,"code":"(fn iter [func n]\n  (cons n (lazy-seq (iter func (func n)))))","user":"54302691e4b0dad94371f2d7"},{"problem":62,"code":"(fn literate [f x] (cons x (lazy-seq (literate f (f x)))))","user":"54e6762be4b024c67c0cf809"},{"problem":62,"code":"(fn my-iterate [f x]\n     (lazy-seq (cons x (my-iterate f (f x)))))","user":"5de68f83e4b0986d99407f6c"},{"code":"(fn myIter [f x] \n  (lazy-seq \n    (cons x (myIter f (f x)))\n))","problem":62,"user":"4ed500bb535d10e5ff6f52d3"},{"code":"(fn t [f x] (cons x (lazy-seq (t f (f x)))))","problem":62,"user":"52df232fe4b09f7907dd13fc"},{"code":"(fn [f x] \n  (map-indexed (fn [i c]\n                 (loop [res x n c]\n                   (if (= 0 n) res (recur (f res) (dec n))))) (range)))","problem":62,"user":"52199105e4b0c4ef0be82ff9"},{"code":"(fn f [g x]\r\n         (lazy-seq \r\n          (cons x (f g (g x)))))","problem":62,"user":"5376966ae4b06839e8705e27"},{"code":"(fn iter [fun init]\n  (cons init (lazy-seq (iter fun (fun init)))))","problem":62,"user":"51cec7b1e4b0e42293a2255b"},{"code":"(fn __ [f val]\n    (lazy-seq (cons val (__ f (f val)))))","problem":62,"user":"4e7e8684535db169f9c79717"},{"code":"(fn iterate2 [f a] (lazy-seq (cons a (iterate2 f (f a)))))","problem":62,"user":"4ed27f9f535d44c135fd68d5"},{"problem":62,"code":"(fn f [g x] \n  (lazy-seq (cons x (f g (g x)))))","user":"5458c74de4b01be26fd74623"},{"code":"(fn m\n  [f i]\n  (cons i (lazy-seq (m f (f i)))))","problem":62,"user":"52485f02e4b05ef8e38e63d3"},{"problem":62,"code":"(fn zz [f x] (lazy-seq (cons x (zz f (f x)))))","user":"5659679ae4b068f2fe63dbeb"},{"problem":62,"code":"(fn i1 [myf x](lazy-seq (cons x (i1 myf (myf x)))))","user":"542fa0dde4b0dad94371f2d2"},{"problem":62,"code":"(fn myseq [f n]\n                 (lazy-seq (cons n (myseq f (f n)))))","user":"58c4492be4b021aa9917ed27"},{"problem":62,"code":"(fn my_iterate [f n]\n  (cons n (lazy-seq (my_iterate f (f n)))))","user":"54651982e4b01be26fd746d4"},{"problem":62,"code":"(fn my-iterate [f elem]\n  (cons elem (lazy-seq (my-iterate f (f elem)))))","user":"55a5c3bee4b0acc240e3154e"},{"code":"(fn itr [f val]\n  (lazy-seq (cons val (itr f (f val)))))","problem":62,"user":"4e6a60cd535d8ccf87e9fed7"},{"problem":62,"code":"(fn iterate* [f org] \n  (cons org (lazy-seq (iterate* f (f org)))))","user":"5895477fe4b00487982d527c"},{"problem":62,"code":"(fn doit[f x] (cons x (lazy-seq(doit f (f x)))))","user":"561d7246e4b064ca9f4b16b1"},{"problem":62,"code":"(fn [func numb]\n  (letfn [(iter [valu tims] (if (= tims 0) valu (iter (func valu) (dec tims))))]\n    (map #(iter numb %) (range))))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn iter ([f x]\n               (cons x (iter f x x))\n                   )\n           ([f x acc]\n              (let [result (f x)]\n                 (cons result (lazy-seq (iter f result x)))\n               )\n            )\n           )","problem":62,"user":"52d42021e4b09f7907dd132a"},{"code":"(fn iternew[f x] (cons x (lazy-seq (iternew f (f x)))))","problem":62,"user":"52e48632e4b09f7907dd1450"},{"problem":62,"code":"(fn my-iterate\n  [a b]\n  (cons b (lazy-seq (my-iterate a (a b)))))","user":"55b107fee4b002ce9d5cbc2a"},{"problem":62,"code":"(fn func [f x]\n  (lazy-seq\n    (cons x\n          (func f (f x)))))","user":"5c51c930e4b0fb8c5ffd99ce"},{"code":"(fn myiter[f x]\n   (cons x (lazy-seq (myiter f (f x)))))","problem":62,"user":"50b25f2ce4b03ea88043355f"},{"problem":62,"code":"(fn ls \n  ([f x] (cons x (lazy-seq (ls f (f x))))))","user":"552f300fe4b076ab5578f7ff"},{"code":"(fn [f x]\n  (reductions (fn [a _] (f a)) x (range)))","problem":62,"user":"51284226e4b03a34742b4308"},{"problem":62,"code":"(fn re-iterate [func initial]\n  (cons initial (lazy-seq (re-iterate func (func initial)))))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":62,"code":";qiuxiafei\n(fn it [f x]\n  (lazy-seq (cons x (it f (f x)))))","user":"58524875e4b0b7285a6f4ead"},{"code":"(fn this [f n] (cons n (lazy-seq (this f (f n)))))","problem":62,"user":"50956c2be4b087f34d351ab2"},{"problem":62,"code":"(fn it\n  [f x]\n  (lazy-seq (cons x\n                  (it f (f x)))))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq \n   (cons x (it f (f x)))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":62,"code":"(fn F [func a]\n  (lazy-seq (cons a (F func (func a)))))","user":"5fa96ddbe4b0fa27300f3dec"},{"problem":62,"code":"(fn my-iterate [f x]\n  (let [next-val (f x)]\n    (cons x\n          (lazy-seq\n           (my-iterate f next-val)))))","user":"59971dcbe4b07157cc8daacb"},{"problem":62,"code":"(fn Iterate [f x]\n  (cons x (lazy-seq (Iterate f (f x)))))","user":"578d230fe4b0ebec4cfb7564"},{"problem":62,"code":"(fn foo\n  [f, l]\n  (lazy-seq (cons l (foo f (f l)))))","user":"54c9571ee4b045293a27f66b"},{"code":"(fn iter\n  [f x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4fa67030e4b081705acca1b7"},{"problem":62,"code":"(fn p62 [fcn n]\n  (lazy-seq\n   (if (not= fcn 0)\n     (let [nn (fcn n)]\n    (cons n (p62 fcn nn))\n    ))))","user":"5400e918e4b0de5c41848619"},{"code":"(fn a [f i] (lazy-seq (cons i (a f (f i)))))","problem":62,"user":"510dc185e4b078ea71921146"},{"problem":62,"code":"(fn lazy-seq-iter [f x]\n    (cons x (lazy-seq (lazy-seq-iter f (f x)))))","user":"53a94b63e4b047364c044434"},{"code":"(fn my-iterate [f x0]\n      (cons x0 (lazy-seq (my-iterate f (f x0)))))","problem":62,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn itr [f x] (lazy-seq (cons x (itr f (f x)))))","problem":62,"user":"4ef57a7f535dced4c769f246"},{"code":"(fn magic [f x]\n  (cons x (lazy-seq (magic f (f x)))))","problem":62,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"(fn iter [f val]\r\n   (lazy-seq (cons val (iter f (f val)))))","problem":62,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":62,"code":"(fn my-iterate \n  [f x]\n  (lazy-seq\n    (cons x\n          (my-iterate f (f x)))))","user":"54187e84e4b01498b1a71a1b"},{"code":"(fn it [f x] (lazy-cat [x] (it f (f x))))","problem":62,"user":"51e00020e4b01188f0627534"},{"code":"(fn it [f s]\n    (lazy-seq (cons s (it f (f s)))))","problem":62,"user":"4e568873535d8a8b8723a283"},{"problem":62,"code":"(fn iterate*\n  [f x]\n  (cons x\n        (lazy-seq\n         (iterate* f (f x)))))","user":"575cbe44e4b02ea114799374"},{"code":"(fn iterate* [f x]\n  (lazy-seq\n    (cons x (iterate* f (f x)))))","problem":62,"user":"4e691c79535d8ccf87e9fe97"},{"problem":62,"code":"(fn tmp [f n]\n  (lazy-seq (cons n (tmp f (f n)))))","user":"594bc16be4b07ddc2dafae39"},{"problem":62,"code":"(fn foo [f n]\n  (lazy-seq (cons n (foo f (f n)))))","user":"5800ab1ee4b0a837a8b30c41"},{"problem":62,"code":"(fn iter [f x] \n           (cons x (lazy-seq\n                     (iter f (f x)))))","user":"57780e4fe4b0979f89651657"},{"problem":62,"code":"(fn ffs [f x]\n  (lazy-seq (cons x (ffs f ( f x)))))","user":"5ab9fe71e4b073f17744269d"},{"problem":62,"code":"(fn my-iter [f init]\n  (cons init\n        (lazy-seq (my-iter f (f init)))))","user":"54bebeb9e4b0ed20f4ff6ef4"},{"problem":62,"code":"(fn my-iterate [func i]\n           (cons i (lazy-seq (my-iterate func (func i)))))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn iterate' [f x]\n  (cons x (lazy-seq (iterate' f (f x)))))","problem":62,"user":"50ec4ed7e4b04edc33777046"},{"problem":62,"code":"(fn fixed-point [f v]\n  (cons v (lazy-seq (fixed-point f (f v)))))","user":"54530382e4b0e397800069cc"},{"code":"(fn my-iterate [f x]\r\n  (lazy-seq\r\n    (cons x (my-iterate f (f x)))))","problem":62,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn _iterate\n  [f x]\n  (reductions \n     (fn [a _] (f a)) \n     x \n     (lazy-seq (_iterate f (f x)))))","problem":62,"user":"531490bde4b08068f379ed17"},{"problem":62,"code":"(fn [f n] (map #(reduce (fn [a1 a2] (a2 a1)) n (repeat  (first %1) f)) (map-indexed list (repeat n))))","user":"54edcf96e4b024c67c0cf866"},{"code":"(fn i [f s] (lazy-cat [s (f s)] (i f (f (f s)))))","problem":62,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn iter [f x]\n\t(let [nxt (f x)]\n\t\t(cons x (lazy-seq (iter f nxt)))\n\t)\n)","problem":62,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":62,"code":"(fn m-iterate\n  [f initial]\n  (cons initial\n        (lazy-seq\n         (m-iterate f (f initial)))))","user":"51d55598e4b01da06753aa8e"},{"code":"(fn iter [f n]  (cons n (lazy-seq (iter f (f n)))) )","problem":62,"user":"4e78c208535db95036265722"},{"code":"(fn test\n  [f x] (cons x (lazy-seq (test f (f x)))))","problem":62,"user":"51a05bede4b0b292b01ee3f4"},{"code":"(fn my [f x]\n    (cons x (lazy-seq (my f (f x)))))","problem":62,"user":"51f59607e4b0abb92f97f9d5"},{"problem":62,"code":"(fn f [g n] (lazy-seq (cons n (f g (g n)))))","user":"5687fe58e4b0dcc4269f4065"},{"problem":62,"code":"(fn iter [f seed]\n  (cons seed (lazy-seq (iter f (f seed)))))","user":"6004c750e4b074f607df6645"},{"problem":62,"code":"( fn coucou [f i] \n  (cons i\n   (lazy-seq \n    (coucou f (f i))\n    )\n   ))","user":"589dd2cce4b02bd94d917e48"},{"problem":62,"code":"(fn test [f x]\n  (cons x (lazy-seq (test f (f x))))\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":62,"code":"(fn sol [func initial]\n  (lazy-seq (cons initial (sol func (func initial)))))","user":"578b140be4b0ebec4cfb7545"},{"problem":62,"code":"(fn [fun s]\n  (let [fu (fn [fu fun s]\n             (lazy-seq (cons s (fu fu fun (fun s)))))]\n    (fu fu fun s)))","user":"56b6e354e4b0982f16b37e41"},{"code":"(fn itr8 [f x]\n  (cons x (lazy-seq (itr8 f (f x)))))","problem":62,"user":"524b0645e4b09eba1c0223bf"},{"problem":62,"code":"(fn my-i\n  [f x]\n  (cons x (lazy-seq (my-i f (f x)))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":62,"code":"(fn ite [f value] (lazy-seq (cons value (ite f (f value)))))","user":"59473563e4b07ddc2dafad97"},{"code":"(fn iter [f x]\n  (cons \n    x\n    (lazy-seq (iter f (f x)))))","problem":62,"user":"4e4c238f535dc968683fc4dc"},{"problem":62,"code":"(fn ! [f i]\n  (lazy-seq \n    (cons i (! f (f i)))\n  )\n)","user":"554680cbe4b0a04f7929953e"},{"code":"(fn foo\r\n  ([f c]\r\n    (let [fc  (f c)]\r\n      (lazy-seq (cons c (foo f fc))))))","problem":62,"user":"4dbbdf86535d3f4042261ece"},{"problem":62,"code":"(fn miter ([f v] (cons v (lazy-seq (miter f (f v))))))","user":"5900d5cde4b0438e51c2d02e"},{"code":"(fn iter [f i]\n  (lazy-seq (cons i (iter f (f i)))))","problem":62,"user":"4f3c772de4b0e243712b1f4c"},{"problem":62,"code":"(fn it [f v]\n  (cons v\n        (lazy-seq (it f (f v)))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn iter [f x]\n        (lazy-seq\n            (cons x (lazy-seq (iter f (f x))))))","problem":62,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":62,"code":"(fn lfun [f ini ]\n         (lazy-seq\n           (concat [ini] (lfun f (f ini)))\n           )\n         )","user":"552d9013e4b076ab5578f7ea"},{"problem":62,"code":"(fn it \n  [f x]\n  (cons x (lazy-seq (it f (f x)))))","user":"5bbc0ddfe4b0a20761a2361e"},{"code":"(fn _iterate [f x]\n  (cons x (lazy-seq (_iterate f (f x)))))","problem":62,"user":"52a5a8ebe4b0c58976d9abed"},{"problem":62,"code":"(fn ff [func v]\n    (lazy-seq (cons v (ff func (func v))))\n)","user":"5bfcdc52e4b0bdcf453d15f4"},{"code":"#((fn self [] (cons %2 (lazy-seq (map %1 (self))))))","problem":62,"user":"50c9e5e3e4b0a409464667d7"},{"problem":62,"code":"(fn g [f x]\n  (lazy-seq\n    (cons x (g f (f x)))))","user":"515ef58be4b02c55805ea237"},{"problem":62,"code":"(fn my_iterate [f x]\n  (lazy-seq (cons x (my_iterate f (f x)))))","user":"57408f87e4b05c31a32c0856"},{"problem":62,"code":"(fn [f x] (reductions (fn [u v] (f u)) (repeat x)))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"code":"(fn it [f v]\n (lazy-seq\n  (cons v (it f (f v)))))","problem":62,"user":"52f818a6e4b047fd55836fcc"},{"problem":62,"code":"(fn lat [f x]\n  (lazy-seq (cons x  ( lat f (f x)))))","user":"55a21f1ce4b0acc240e3151f"},{"problem":62,"code":"(fn my-iterate [f e]\n  (cons e\n        (lazy-seq (my-iterate f (f e))))\n)","user":"5fa6db67e4b0fa27300f3dd2"},{"problem":62,"code":"(fn simple-seq [f v]\n(cons v (lazy-seq (simple-seq f (f v)))))","user":"53a26cede4b0f1fc7453882a"},{"code":"(fn ite [f x]\n  (lazy-seq\n   (cons x (ite f (f x)))))","problem":62,"user":"4f16d3fd535d64f60314644e"},{"code":"(fn iter\n  [f arg]\n  (cons arg (lazy-seq (iter f (f arg)))))","problem":62,"user":"528b01a0e4b0239c8a67ae89"},{"problem":62,"code":"(fn [f x]\n  (letfn [(yield [f x]\n                 (cons x (lazy-seq (yield f (f x)))))]\n    (yield f x)))","user":"4fdb881ee4b05e33b9224f5e"},{"problem":62,"code":"(fn i [f e]\n  (lazy-seq\n   (cons e (i f (f e)))))","user":"55ea0780e4b0121d4835fda7"},{"code":"(fn itr[f x]\n    (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4e7650c5535d324fb2983d68"},{"code":"(fn itr [f init]\n    (lazy-seq (cons init (itr f (f init)))))","problem":62,"user":"531dfaf5e4b08068f379edb3"},{"problem":62,"code":"(fn my-iterate [func val]\n  (lazy-cat (vector val) (my-iterate func (func val))))","user":"5a621702e4b0512ff01cd983"},{"code":"(fn iter [f i]\n  (reductions\n    (fn [a _] (f a))\n    i (repeat i)))","problem":62,"user":"4fb1d907e4b081705acca282"},{"problem":62,"code":"(fn fx [f x]\n  (lazy-seq \n   (cons x (fx f (f x))\n         )\n   )\n  )","user":"54a1d643e4b09f271ff37c50"},{"problem":62,"code":"(fn myiter [f x]\n  (cons x\n        (lazy-seq (myiter f (f x)))))","user":"54769c7ae4b0c51c1f4d72a8"},{"code":"(fn foo [x y] (lazy-seq (cons y (foo x (x y)))))","problem":62,"user":"4e975bce535dbda64a6f6b53"},{"code":"(fn iter [f x] (lazy-cat [x] (iter f (f x))))","problem":62,"user":"4f13047d535d64f60314642c"},{"code":"(fn bls [f n] (cons n (lazy-seq (bls f (f n)))))","problem":62,"user":"51b0e7b3e4b0c53cf2e68a6e"},{"problem":62,"code":"#(reductions (fn [v r] (% v)) %2 (range))","user":"544e6b7fe4b0e39780006986"},{"problem":62,"code":"(fn my-iterate\n  [f init]\n  (cons init\n        (lazy-seq\n          (my-iterate f (f init)))))","user":"4e586949535d8a8b8723a292"},{"problem":62,"code":"#(letfn [(iterx [f x]\n  (lazy-seq\n    (cons x (iterx f (f x)))))](iterx %1 %2))","user":"5a9dbb32e4b0d174b936c7f3"},{"problem":62,"code":"(fn l-iter [f x] (cons x (lazy-seq (l-iter f (f x)))))","user":"5c30da5ae4b0d62ef62d9f23"},{"code":"(fn iter [f s]\n  (cons s (lazy-seq (iter f (f s)))))","problem":62,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn p68 [f x]\n  (cons x (lazy-seq (p68 f (f x)))))","problem":62,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn my-iterate\n  [f x]\n  (lazy-cat [x] (my-iterate f (f x))))","problem":62,"user":"5300b750e4b0d8b024fd3711"},{"problem":62,"code":"(fn ff [f n] (lazy-seq (cons n (ff f (f n)))))","user":"573107d5e4b0cd1946bd0fbc"},{"code":"(fn new-iterate [f x]\r\n  (lazy-seq\r\n    (cons x (new-iterate f (f x)))))","problem":62,"user":"5036dea0e4b0af0658af77a4"},{"problem":62,"code":"(fn my-iterate\n[f x]\n(lazy-seq\n  (cons x (my-iterate f (f x)))))","user":"54091b82e4b0addc1aec66d5"},{"code":"(fn miterate [fun x]\n  (cons x (lazy-seq (miterate fun (fun x)))))","problem":62,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"problem":62,"code":"(fn itr [f v] (lazy-seq (cons v (itr f (f v)))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn myiter [f x] (cons x (lazy-seq (myiter f (f x)))) )","problem":62,"user":"531c0619e4b08068f379ed98"},{"problem":62,"code":"(fn iter [f a]\n  (lazy-seq (cons a (iter f (f a)))))","user":"53f5c402e4b0db01ade6f9d4"},{"problem":62,"code":"(fn generate [index-generator index]\n  (lazy-seq (cons index (generate index-generator (index-generator index))))\n  )","user":"566639f4e4b0e91d5f5c566b"},{"code":"(fn iter [f x]\n  (lazy-cat [x] (iter f (f x)))\n)","problem":62,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn m [f x]\r\n    (lazy-seq\r\n\t      (cons x (m f (f x)))))","problem":62,"user":"4e821ca5535db62dc21a62c2"},{"problem":62,"code":"(fn gen-seq [f init] (lazy-seq (cons init (gen-seq f (f init)))))","user":"57aa290de4b0b8559636fc65"},{"problem":62,"code":"(fn f [opt start]\n  (lazy-seq (cons start (f opt (opt start)))))","user":"5d2c779be4b01671435dbc8d"},{"code":"(fn [f x] ((fn s ([] (s x)) ([y] (cons y (lazy-seq (s (f y))))))))","problem":62,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn g [f x]\n  (lazy-seq (cons x (g f (f x)))))","problem":62,"user":"4fc7ddffe4b0ee37620e182b"},{"problem":62,"code":"(fn reiterate [f x]\n  (lazy-seq (cons x (reiterate f (f x)))))","user":"5a9482b7e4b0d174b936c737"},{"code":"(fn arbitraryfn [f arg1] (cons arg1 (lazy-seq (arbitraryfn f (f arg1)))))","problem":62,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn iterate2 [fun vl] (lazy-seq (cons vl (iterate2 fun (fun vl)))))","problem":62,"user":"51040eb2e4b0432126ba9bb4"},{"code":"(fn rec [f x]\n  (lazy-seq\n   (cons x (rec f (f x)))))","problem":62,"user":"52d1e364e4b0d9f9285948e7"},{"problem":62,"code":"(fn myfun [f x]\n  (cons x (lazy-seq (myfun f (f x)))))","user":"568a743ee4b0dcc4269f408e"},{"problem":62,"code":"(fn my-iterate [fun init] (cons init (lazy-seq (my-iterate fun (fun init)))))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn myiterate [f x]\n    (lazy-seq (cons x (myiterate f (f x)))))","problem":62,"user":"4e131443535d04ed9115e7d3"},{"problem":62,"code":"(fn ITER [f x]\n  (cons x (lazy-seq (ITER f (f x)))))","user":"5339c105e4b0e30313ee6cae"},{"problem":62,"code":"(fn iterate- [f x]\n                (lazy-seq\n                  (cons x (iterate- f (f x)))))","user":"6026737ee4b0d5df2af2222f"},{"code":"(fn iter [f x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn myIterate\n  [fun init]\n  (lazy-seq\n    (cons init (myIterate fun (fun init)))))","problem":62,"user":"509a25b7e4b0efbae1fbc0a8"},{"problem":62,"code":"(fn lazy-iterate [func val] (lazy-seq (cons val (lazy-iterate func (func val)))))","user":"564c8e99e4b0284900eef674"},{"code":"(fn seqit [s n] (lazy-cat (list n) (seqit s (s n))))","problem":62,"user":"534eecaee4b084c2834f4abf"},{"problem":62,"code":"(fn iterate' [f init]\n             (cons init\n                   (lazy-seq (iterate' f (f init)))))","user":"59fa241ee4b0ca45a743a358"},{"problem":62,"code":"(fn my-iterate [f init] (lazy-seq (cons init (my-iterate f (f init)))))","user":"57625c18e4b0994c1922fba4"},{"problem":62,"code":"(fn [f init-val] (conj (map #(%1 init-val) (reductions comp (repeat f))) init-val))","user":"529f9bf2e4b04e0c58e87bb4"},{"code":"(fn itr [f i]\n  (cons i (lazy-seq (itr f (f i)))))","problem":62,"user":"5173726be4b098276e74652c"},{"code":"(fn itr [a b](cons b (lazy-seq (itr a (a b)))))","problem":62,"user":"52bbd09ee4b07a9af57922ee"},{"problem":62,"code":"(fn my-it [f x]\n  (lazy-seq (cons x (my-it f (f x)))))","user":"52f8b86de4b047fd55836fdb"},{"problem":62,"code":"(fn my-iter [& args]\n    (let [\n          [f x] args\n          result (cons x (lazy-seq (my-iter f (f x))))\n         ]\n      result\n    )\n  )","user":"532f7e12e4b019098a6f8b4e"},{"code":"(fn r [f x] (lazy-seq (cons x (r f (f x)))))","problem":62,"user":"4f6511eee4b07046d9f4ef3a"},{"problem":62,"code":"(fn my-iterate [func in]\n  (cons in\n    (lazy-seq\n      (my-iterate func (func in)))))","user":"59ea0944e4b0249b72820758"},{"code":"(fn _iterate [f arg]\r\n     (lazy-seq (cons arg (_iterate f (f arg)))))","problem":62,"user":"4f3e6244e4b0e243712b1f85"},{"code":"(fn iter [f init]\n  (cons init (lazy-seq (iter f (f init)))))","problem":62,"user":"4ebd4448535dfed6da9c6d8f"},{"problem":62,"code":"(fn ! [f x] (cons x (lazy-seq (! f (f x)))))\n; (fn [f x] (reductions #(%2 %) x (repeat f)))","user":"594cb88be4b07ddc2dafae6e"},{"code":"(fn iterate2 [f n] (lazy-seq (cons n (iterate2 f (f n)))))","problem":62,"user":"4df0524e535d08e6dec9fe17"},{"problem":62,"code":"(fn itr [f arg]\n  (lazy-seq (cons arg (itr f (f arg)))))","user":"5a426a3fe4b0447ef91cc5f2"},{"code":"(fn iter [f x]\n  (lazy-seq\n    (cons x (iter f (f x)))))","problem":62,"user":"4e22b78b535d04ed9115e81e"},{"code":"(fn f [g x] (lazy-cat [x] (f g (g x))))","problem":62,"user":"522b922ee4b0d34ee08e71c3"},{"problem":62,"code":"(fn foo [f x]\n          (cons x\n                (lazy-seq (foo f (f x)))))","user":"5c995fa4e4b048ec896c5a96"},{"code":"(fn inter[f init]\n  (cons init\n        (lazy-seq (inter f (f init)))))","problem":62,"user":"51b41150e4b0f094dd986fac"},{"problem":62,"code":"(fn iterate-ms\n  [f firstval]\n  (cons firstval (lazy-seq (iterate-ms f (f firstval)))))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":62,"code":"(fn do-stuff\n  ([f] (do-stuff f 1))\n  ([f n] (lazy-seq (cons n (do-stuff f (f n))))))","user":"55b22c33e4b0da326a65cf79"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (let [fx (f x)]\n      (concat [x] (my-iterate f fx)))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":62,"code":"(fn it(\n        [f x] \n        (lazy-seq (cons x (it f (f x))))))","user":"5f6e576ae4b02876ed9fd066"},{"problem":62,"code":"(fn my-iterate [f x] \n  (lazy-seq \n   (cons x (my-iterate f (f x)))))","user":"569d2283e4b0542e1f8d1474"},{"problem":62,"code":"(fn iter [f arg] (lazy-seq (cons arg (iter f (f arg)))))","user":"57015a1de4b08d47c97781d4"},{"code":"#(\n  (fn s [x]\n    (cons x (lazy-seq (s (% x)))))\n  %2)","problem":62,"user":"4f404dcee4b0e243712b1fb0"},{"problem":62,"code":"(fn iteratr\n  [func x]\n  (cons x (lazy-seq (iteratr func (func x)))))","user":"6059d9c8e4b07e92fa001ad0"},{"problem":62,"code":"(fn iter [f v]\n    (lazy-seq\n     (cons v\n           (iter f (f v)))))","user":"5808ee16e4b0a837a8b30d16"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x \n        (lazy-seq (my-iterate f (f x)))))","user":"5606ea56e4b08b23635d317b"},{"problem":62,"code":"(fn iterate* \n  [f init]\n  (lazy-seq (cons init (iterate* f (f init)))))","user":"5e9771dee4b0157ca96647d0"},{"problem":62,"code":"(fn __ [ f val]\n    (let [res (f val)]\n      (cons val (lazy-seq (__ f res)))\n      )\n    )","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn lz-iterate [f x]\n  (cons x (lazy-seq (lz-iterate f (f x)))))","problem":62,"user":"4f3e5e87e4b0e243712b1f83"},{"code":"(fn myIterate [f x]\n  (cons x (lazy-seq (myIterate f (f x)))))","problem":62,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn *it [f x]\n  (cons x (lazy-seq (*it f (f x)))))","problem":62,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":62,"code":"(fn ite [f a]\n  (lazy-seq (cons a (ite f (f a)))))","user":"5da7176ae4b000c986472c13"},{"problem":62,"code":"(fn iter- [f init] (cons init (lazy-seq (iter- f (f init)))))","user":"5eb5d9bbe4b00a66d4a9522e"},{"code":"(fn getSeq [x y] (cons y (lazy-seq (getSeq x (x y)))))","problem":62,"user":"52d4acc8e4b09f7907dd1333"},{"problem":62,"code":"(fn lazy [f n]\n  (lazy-seq (cons n (lazy f (f n)))))","user":"5c748bf5e4b0fca0c16227cb"},{"problem":62,"code":"(fn i [f x]\n (lazy-seq (cons x (i f (f x)))))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn c [f x]  (cons x (lazy-seq ( c f (f x) ))))","problem":62,"user":"518c5236e4b087e178201de0"},{"problem":62,"code":"(fn _\n  [f x] \n   (lazy-seq (cons x (_ f (f x)))))","user":"510ee996e4b07438aa321462"},{"code":"(fn ! [f n]\n  (cons n (lazy-seq (!  f (f n)))))","problem":62,"user":"4f1d1299535d64f603146487"},{"problem":62,"code":"(fn iteration [f x]\n    (cons x\n          (lazy-seq (iteration f (f x)))))","user":"55627de1e4b0c656e3ff17d9"},{"code":"(fn myit\n  [f x]\n  (cons x (lazy-seq (myit f (f x)))))","problem":62,"user":"50982769e4b04e098a4c726a"},{"problem":62,"code":"(fn something [f x]\n           (cons x (lazy-seq (something f (f x)))))","user":"5885bea8e4b0f1effa3b76bf"},{"code":"(fn it [fun start]\n  (lazy-seq (cons start (it fun (fun start)))))","problem":62,"user":"5005b57de4b0678c553fc46a"},{"problem":62,"code":"#(map (fn [a]\n        (loop [x %2 n a]\n          (if (= n 0)\n            x\n            (recur (%1 x) (dec n)))))\n      (range))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":62,"code":"(fn [x y] ((fn peu [z] (cons z (lazy-seq (peu (x z))))) y))","user":"53fc8424e4b0de5c418485b3"},{"problem":62,"code":"(fn iterate2 [f v] {:pre (fn? f)}\n    (lazy-seq\n        (cons v (iterate2 f (f v)))\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn it [f x]\n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4dfe65a1535d04ed9115e787"},{"problem":62,"code":"(fn it [f a]\n  (lazy-seq (cons a (it f (f a)))))","user":"5eb741e4e4b00a66d4a9523b"},{"code":"(fn xx [f x]\n  \t (cons  x \n  \t  \t \t(lazy-seq \t(xx f (f x) ))))","problem":62,"user":"518644bce4b0da5a5be3baca"},{"problem":62,"code":"(fn iter [f init]\n  (lazy-seq \n   (cons init (iter f (f init)))))","user":"541b1f25e4b01498b1a71a63"},{"problem":62,"code":"(fn my-iterate [fnc x]\n        (cons x (lazy-seq (my-iterate fnc (fnc x)))))","user":"5410499de4b01498b1a719a6"},{"code":"(fn me [f x] (lazy-seq (cons x (me f (f x)))))","problem":62,"user":"52bdf6bde4b07a9af579230d"},{"problem":62,"code":"(fn re-iterate [f x]\n    \n    (lazy-seq \n    (cons x (re-iterate f (f x))))\n    \n;    (let [acc [x]]\n;      ( (fn step[ vs ]\n;          (lazy-seq \n;            (conj vs (step (f (last vs )))))) acc))\n    \n    )","user":"56a358d0e4b0542e1f8d14c9"},{"problem":62,"code":"(fn problem62\n  ([f x]\n   (cons x (lazy-seq (problem62 f (f x))))))","user":"54d0cedde4b0e8a36923e5d2"},{"problem":62,"code":"(fn new-iterate [f s] (lazy-seq (cons s (new-iterate f (f s)))))","user":"5830377ee4b051871117c004"},{"code":"(fn r [f v]\n  (lazy-cat (list v) (lazy-seq (r f (f v)))))","problem":62,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn miterate\n  [f x]\n  (cons x (lazy-seq (miterate f (f x)))))","problem":62,"user":"51852961e4b0da5a5be3babb"},{"problem":62,"code":"(fn _iterate [f i]\n  (lazy-seq (cons i (_iterate f (f i)))))","user":"57008afae4b08d47c97781ca"},{"problem":62,"code":"(fn iter [f i]\n   (lazy-seq (cons i (iter f (f i)))))","user":"51441ce7e4b0b4fb4ace5f41"},{"code":"(fn x [f i]\n(cons i (lazy-seq\n (x f (f i))\n )\n))","problem":62,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn my-iter\n  [fun seed]\n  (cons seed\n  (lazy-seq\n    (my-iter fun (fun seed)))))","problem":62,"user":"5348cab4e4b084c2834f4a5e"},{"problem":62,"code":"#(letfn [(iter [f x] (cons x (lazy-seq (iter f (f x)))))] \n   (iter %1 %2))","user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn [f y]\n  (reductions (fn [x _] (f x)) y (range)))","problem":62,"user":"4ec5d40d535d6d7199dd36b9"},{"problem":62,"code":"(fn iter [f value]\n  (lazy-seq (cons value (iter f (f value)))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":62,"code":"(fn eh [f v]\n  (cons v (lazy-seq (eh f (f v)))))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn my-iter [f x]\n    (cons x (lazy-seq (my-iter f (f x)))))","problem":62,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn [f init] (reductions #(%2 %1) init (repeat f)))","problem":62,"user":"5150a7d7e4b03e678e393abb"},{"code":"(fn myfn[f x] \n  (cons x \n    (lazy-seq \n      (myfn f (f x)))))","problem":62,"user":"4fe15ffee4b0dd6cd5ce3634"},{"code":"(fn cust-iter [f x]\n  (cons x (lazy-seq (cust-iter f (f x)))))","problem":62,"user":"52463059e4b09dbe66b56198"},{"code":"( fn [ f xx ]\n(\n  let [ ff (\n              fn ite [ func x p ](\n                  if( or ( > p 105 ) ( > x 100 ) )\n                  ( list )\n                  (cons x ( ite func ( func x ) (inc p)) )\n              )\n          )] (\n      ff f xx 0\n  )\n)\n)","problem":62,"user":"50bf7b72e4b0ffd967a66cc1"},{"code":"(fn my-fn [f i]\r\n  (lazy-seq (cons i (my-fn f (f i)))))","problem":62,"user":"50435689e4b034ff00315d21"},{"problem":62,"code":"(fn \n  [f x]\n  (reductions #(if true (f %1) (f %2)) x (repeat 1))\n)","user":"5bbbce0ee4b0a20761a2360d"},{"problem":62,"code":"(fn re-iterate [f x]\n  (cons x (lazy-seq (re-iterate f (f x)))))","user":"593910eae4b02506e01a29f4"},{"problem":62,"code":"(fn ff\n  [f x]\n  (lazy-seq (cons x (ff f (f x)))))","user":"56df6846e4b0ca2494a095fa"},{"code":"(fn my-iterate [f x]\n  [f x] (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn f62 [f n] (lazy-seq (cons n (f62 f (f n)))))","problem":62,"user":"52bf0116e4b07a9af5792328"},{"problem":62,"code":"(fn tester [f x] (cons x (lazy-seq (tester f (f x)))))","user":"59f15e20e4b0966464fe6a5a"},{"code":"(fn foo [f v] (lazy-seq (cons v (foo f (f v)))))","problem":62,"user":"4ee88bfb535d93acb0a66881"},{"problem":62,"code":"(fn iter [f, x]\n  (cons x (lazy-seq (iter f (f x)))))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn iter [f v]\n  (cons v\n        (lazy-seq (iter f (f v)))))","problem":62,"user":"4daee8e9edd6309eace4d166"},{"problem":62,"code":"(fn myfunc [func result] (lazy-seq (cons result (myfunc func (func result)))))","user":"5e954b9ee4b0fbed045a3809"},{"code":"(fn self [f n]\n  (cons n (lazy-seq (self f (f n)))))","problem":62,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(let\n  [that (fn [rec f start]\n    (lazy-seq (cons start (rec rec f (f start)))) )]\n  (partial that that) )","problem":62,"user":"4eaf08ce535d7eef3080732d"},{"problem":62,"code":"(fn iter [f v]\n                   (cons v (lazy-seq (iter f (f v)))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn [f x]\n  (letfn [(alt-iterate [f x]\n          (lazy-seq\n           (cons x (alt-iterate f (f x)))))]\n  (alt-iterate f x)))","problem":62,"user":"50b9d991e4b04934c218a4a9"},{"code":"(fn [f x] (reductions #(%2 %) x (repeat f)))","problem":62,"user":"4f3444b7e4b0e243712b1eb6"},{"code":"(fn my-iterate [f initVal]\n  (cons initVal (lazy-seq (my-iterate f (f initVal)))))","problem":62,"user":"5213348ae4b0d32679a50652"},{"code":"(fn itr [f, x]\n    (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn it [f x] \n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"51aab611e4b04e3dc0c27b2d"},{"problem":62,"code":"(fn funcion [f f1]\n  \n  (cons f1 \n        (lazy-seq (funcion f (f f1))))\n  \n  \n  )","user":"5f727be9e4b02876ed9fd08d"},{"code":"(fn g [f i]\n  (lazy-seq (cons i (g f (f i)))))","problem":62,"user":"4ff304f4e4b0678c553fc343"},{"code":"(fn [f x]\n  (map\n   #(% x)\n   (map #(apply comp identity (repeat % f))\n        (range))))","problem":62,"user":"4db8f6c4535d1e037afb219e"},{"problem":62,"code":"(fn my-iter [fun init]\n    (cons init (lazy-seq (my-iter fun (fun init)))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":62,"code":"(fn iter[f v](lazy-seq (cons v (iter f (f v)))))","user":"5d99dc47e4b0d3f9b434ad42"},{"problem":62,"code":"(fn iter [func v] (cons v (lazy-seq (iter func (func v)))))","user":"543a68d3e4b032a45b869326"},{"problem":62,"code":"(fn it*\n  [f x]\n  (lazy-seq\n    (cons x (it* f (f x)))))","user":"56bb652ae4b0f26550335953"},{"problem":62,"code":"(fn my-iterate [f i] (cons i (lazy-seq (my-iterate f (f i)))))","user":"504f5804e4b0a02f9cffde72"},{"problem":62,"code":"(fn function-62\n\n  ([function parm a]\n   (lazy-seq (let [c (function parm)] (cons c (function-62 function c 1)))))\n  ([function parm] (lazy-seq (cons parm (function-62 function parm 1)))))","user":"598d0dc3e4b02b9968b84d18"},{"problem":62,"code":"(fn fx [f x] (lazy-seq (cons x (fx f (f x)))))","user":"574a9132e4b02ea1147991fd"},{"code":"(fn it [func arg] (lazy-seq (cons arg (it func (func arg)))))","problem":62,"user":"4ec5a5f9535d6d7199dd36ad"},{"problem":62,"code":"(fn my-iterate [f base] (lazy-seq (cons base (my-iterate f (f base)))))","user":"5c7bc0a5e4b0fca0c1622865"},{"code":"(fn g [f x](cons x (lazy-seq (g f (f x))) ))","problem":62,"user":"4e6df3c9535d5021c1a895fa"},{"code":";;had to look at source =(\n(fn iterat0r [f x]\n  (lazy-seq (cons x (iterat0r f (f x)))))","problem":62,"user":"4ef89fb0535dced4c769f260"},{"code":"(fn [f x]\n  (map #(loop [a x i %]\n    (if (zero? i) a (recur (f a) (dec i))))\n(range)))","problem":62,"user":"4ed2b168535d44c135fd68dd"},{"code":"(fn itrate [f x] (lazy-seq (cons x (itrate f (f x)))))","problem":62,"user":"50dfb660e4b061dbdced7228"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq\n   (cons x (iter f (f x)))\n  )\n)","user":"5d07989ee4b0cc9c915881fb"},{"problem":62,"code":"(fn iterate1 [x y] (lazy-seq (cons y (iterate1 x (x y)))))","user":"57dafe97e4b0bd073c20241c"},{"code":"(fn itr [f x] (lazy-cat [x] (itr f (f x))))","problem":62,"user":"4e7dfab0535db169f9c796f9"},{"problem":62,"code":"(fn iter\n  ([f x]\n   (cons x\n         (lazy-seq\n          (iter f (f x))))))","user":"5bf5ddfde4b0bdcf453d159e"},{"problem":62,"code":"(fn iterate- [f init]\n  (cons init (lazy-seq (iterate- f (f init)))))","user":"5a99b848e4b0d174b936c7ac"},{"code":"(fn my-iterate([f, n] (cons n (lazy-seq (my-iterate f (f n))))))","problem":62,"user":"51f66e0ee4b06ff1c25c52c3"},{"problem":62,"code":"(fn [f n]\n  (letfn [(iter [n]\n                (cons n (lazy-seq (iter (f n)))))]\n    (iter n)))","user":"53ea3a63e4b036ad0777e4dc"},{"code":"(fn it [f n]\n  (lazy-seq\n    (cons n (it f (f n)))))","problem":62,"user":"4e8ad247535d65386fec2111"},{"code":"(fn solution [f v]\n  (cons v (lazy-seq (solution f (f v))))\n  )","problem":62,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"(fn ! [f s] (lazy-seq (cons s (! f (f s)))))","problem":62,"user":"5217c26fe4b0a4bccb16cab8"},{"code":"(fn s [f n] (cons (long n) (lazy-seq (s f (long (f n))))))","problem":62,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn fo[f a]\n  (cons a (lazy-seq (fo f (f a)))))","problem":62,"user":"515ff4b9e4b0e2be8aa20bd9"},{"code":"(fn my-iterate\r\n  [f x]\r\n  (cons x\r\n  (lazy-seq\r\n    (my-iterate f (f x)))))","problem":62,"user":"4fee04a0e4b0678c553fc308"},{"problem":62,"code":"(fn [f i]\n  (letfn [(my-iterate [ff ii] (lazy-seq (cons ii (my-iterate ff (ff ii)) )))]\n    (my-iterate f i)))","user":"5b4ff637e4b02d533a91bce0"},{"problem":62,"code":"(fn iterator [f x]\n  (cons x \n    (lazy-seq (iterator f (f x)))))","user":"5f5f2eafe4b02876ed9fcff5"},{"problem":62,"code":"(fn iterate_x \n  ; Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))),\n  [func x]\n  (cons x\n        (lazy-seq\n          (iterate_x func (func x)))))","user":"5bbbcecee4b0a20761a23611"},{"problem":62,"code":"(fn iterate'\n  [f x]\n  (lazy-seq (cons x (iterate' f (f x)))))","user":"56488119e4b0284900eef632"},{"code":"(fn iter [func in] \n  (lazy-seq (cons in (iter func (func in)))))","problem":62,"user":"4f04b66b535dcb61093f6bdd"},{"problem":62,"code":"(fn my-iterate [func arg]\n  (cons arg (lazy-seq (my-iterate func (func arg)))))","user":"539b4268e4b0b51d73faaf1c"},{"code":"(fn iter[f, i]\n  (lazy-seq\n    (cons i (iter f (f i)))))","problem":62,"user":"4e7db3b4535db169f9c796e1"},{"code":"(fn itr [f x]\r\n  (lazy-seq (cons x (itr f (f x)))))","problem":62,"user":"4fd170fce4b04c3a95aa0411"},{"problem":62,"code":"(fn lz [f x]\n   (lazy-seq (cons x (lz f (f x)))))","user":"562eeba2e4b0ab312c17ebc1"},{"code":"(fn iter [f initial] (cons initial (lazy-seq (iter f (f initial)))))","problem":62,"user":"4faa6184e4b081705acca1f1"},{"code":"(fn xx [f x]\r\n  (lazy-seq (cons x ( xx f (f x)))))","problem":62,"user":"4fb23582e4b081705acca28a"},{"problem":62,"code":"(fn newit [f x] (lazy-seq (cons x (newit f (f x)))))","user":"59e62655e4b08badc2a0c568"},{"problem":62,"code":"(fn myit [func init] (cons init (lazy-seq (myit func (func init))) ))","user":"54aa373de4b09f271ff37cb6"},{"code":"(fn i [f x]\n  (lazy-seq\n    (cons x (i f (f x)))))","problem":62,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"(fn my-iter [f init]\n  (cons init\n        (lazy-seq\n         (my-iter f (f init)))))","problem":62,"user":"52f8f4d1e4b047fd55836fde"},{"code":"(fn it [f x]\n (lazy-seq\n  (cons x (it f (f x)))))","problem":62,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":62,"code":"(fn l [f s] (cons s (lazy-seq (l f (f s)))))","user":"5462ce20e4b01be26fd746b8"},{"code":";(fn reIterate[x y](lazy-seq (cons y (reIterate x (x y)) ) ) )\n\n(fn myiterate [f x] (cons x (lazy-seq (myiterate f (f x)))))","problem":62,"user":"534d639ae4b084c2834f4a9e"},{"problem":62,"code":"(fn ite [f x]\n  (lazy-seq\n    (cons x (ite f (f x)))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":62,"code":"(fn my-iterate\n    [f x]\n    (lazy-seq (cons x (my-iterate f (f x))))\n    )","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":62,"code":"(fn myIter [func start]\n    (cons start (lazy-seq (myIter func (func start)) ))\n    )","user":"5471f2fbe4b094393f72dd70"},{"code":"(fn z [f x] (lazy-seq (cons x (z f (f x)))))","problem":62,"user":"50548ce8e4b0b1b9d1860ead"},{"code":"(fn iter [f x] \n  (cons x\n    (lazy-seq (iter f (f x)))\n  )\n)","problem":62,"user":"4fe588b6e4b0e8f79898fec5"},{"code":"(fn myiterate [f i] (cons i (lazy-seq (myiterate f (f i)))))","problem":62,"user":"4f0e4ebd535d0136e6c22322"},{"problem":62,"code":"(fn lotsofuncs [f x]\n  (cons x (lazy-seq (lotsofuncs f (f x)))))","user":"604f4be1e4b0b7ec0ac60ace"},{"code":"(fn this [f x] \n  (cons x (lazy-seq (this f (f x)))))","problem":62,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn [f x] (letfn [(itit [f x]\n  (cons x \n     (lazy-seq (itit f (f x)))))]\n  (itit f x)))","problem":62,"user":"4daa374930acd6ed13482a68"},{"problem":62,"code":"(fn iter [f x] \n\n     (cons x (lazy-seq (iter f (f x))))\n\n   )","user":"556f2009e4b09a3098a52519"},{"code":"(fn re-it [f v]\n           (cons v (lazy-seq (re-it f (f v)))))","problem":62,"user":"52090567e4b0e152394d76ed"},{"code":"(fn iter [f v]\n    (lazy-seq (cons v (iter f (f v)))))","problem":62,"user":"502a5fa4e4b09e8f859a9fbd"},{"problem":62,"code":"(fn mm-iterate [f init]\n  (lazy-seq (cons init (mm-iterate f (f init)))))","user":"5f838122e4b01aacbe7a2715"},{"problem":62,"code":"(fn iterator [f x]\n  (lazy-seq (cons x (iterator f (f x)))))","user":"56acfee5e4b03c432f18734f"},{"problem":62,"code":"(fn afn [f x](lazy-seq (cons x (afn f (f x)))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":62,"code":"(fn make-seq [f x] (cons x (lazy-seq (make-seq f (f x)))))","user":"552b6ddbe4b0ffed3738f965"},{"code":"(fn g [f n]\n    (cons n (lazy-seq (g f (f n)))))","problem":62,"user":"528a3e14e4b0239c8a67ae72"},{"problem":62,"code":"(fn iter [f n]\n (lazy-seq (cons n (iter f (f n)))))","user":"59d4d126e4b0ef0a1e9b5be9"},{"code":"(fn iter [f init]\n  (lazy-seq (cons init (iter f (f init)))))","problem":62,"user":"4f3a979de4b0e243712b1f10"},{"code":"(fn o\n      ([f v]\n        (cons v (lazy-seq (o f (f v))))))","problem":62,"user":"51b3f109e4b0f094dd986fa9"},{"problem":62,"code":"(fn foo [f x]\n   (lazy-seq (cons x (foo f (f x)))))","user":"57615a22e4b0994c1922fb88"},{"code":"(fn iter8 [f n] (cons n (lazy-seq (iter8 f (f n)))))","problem":62,"user":"53286389e4b09d4e7a9b5504"},{"code":"(fn iter [f i] (lazy-seq (cons i (iter f (f i)))))","problem":62,"user":"4ff4c9dae4b0678c553fc360"},{"problem":62,"code":"(fn [f x]\n  (->>\n   (range)\n   (map\n    #(apply\n      comp (repeat % f)))\n   (map #(% x))))","user":"58ebae90e4b056aecfd47d44"},{"problem":62,"code":"(fn $ [f x]\n  (lazy-seq (cons x ($ f (f x)))))","user":"563f24f9e4b08d4f616f5ed0"},{"code":"(fn iterate2 [f seed] (lazy-seq (cons seed (iterate2 f (f seed)))))","problem":62,"user":"503d129fe4b06c4e0e1fa254"},{"problem":62,"code":"(fn q [f s]\n    (lazy-seq (cons s (q f (f s)))))","user":"603ae21de4b0d5df2af222fb"},{"problem":62,"code":"(fn -iterate [f value]\n  (lazy-cat [value] (-iterate f (f value))))","user":"4ee897fe535d93acb0a66883"},{"problem":62,"code":"(fn not-it [f n]\n  (lazy-cat (list n) (not-it f (f n))))","user":"564348e1e4b08d4f616f5f26"},{"code":"(fn new-iter[f x]\n  (lazy-seq (cons x (new-iter f (f x)))))","problem":62,"user":"4e89f9e5535d3e98b8023289"},{"problem":62,"code":"(fn ff [f x]\n    (lazy-seq (cons x\n                    (ff f\n                        (f x)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn i [f x]\r\n  (lazy-seq\r\n   (let [val (f x)]\r\n     (cons x (i f val)))))","problem":62,"user":"502873a8e4b01614d1633ff8"},{"problem":62,"code":"(fn my-iterate\n  [function number]\n  (cons number (lazy-seq (my-iterate function (function number)))))","user":"560d7863e4b05f002753df40"},{"code":"(fn myiter\n  [f i]\n  (cons i (lazy-seq (myiter f (f i)))))","problem":62,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":62,"code":"(fn itr\n  [f x]\n  (lazy-seq\n   (cons x\n         (itr f (f x)))))","user":"5829d9f8e4b051871117bf4d"},{"code":"(fn i [f x]\n  (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4e7e93f5535db169f9c7971a"},{"code":"(fn it [f x]  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4ebe766d535dfed6da9c6d94"},{"problem":62,"code":"(fn my-iterate2 [f v]\n  (lazy-seq (cons v (my-iterate2 f (f v)))))","user":"594c0bd7e4b07ddc2dafae56"},{"problem":62,"code":"(fn iter [f i]\n           (cons i (lazy-seq (iter f (f i)))))","user":"4f35e662e4b0e243712b1ec6"},{"problem":62,"code":"(fn my-m\n  [f x]\n  (cons x (lazy-seq (my-m f (f x)))))","user":"55b3c03ee4b01b9910ae2975"},{"code":"(fn my-iter[f x] \n  (\n    (fn _my-iter_[ff xx] (lazy-seq (cons xx (_my-iter_ ff (ff xx))))) \n    f x\n    )\n  )","problem":62,"user":"52e68e61e4b09f7907dd1479"},{"problem":62,"code":"(fn tmp [f x] (cons x (lazy-seq (tmp f (f x)))))","user":"59468de7e4b07ddc2dafad88"},{"problem":62,"code":"(fn my-iterate [f x]\n   (cons x (lazy-seq (my-iterate f (f x)))))","user":"544e9022e4b0e3978000698b"},{"code":"(fn ! [f x]\n  (let [appl (f x)]\n    (cons x (lazy-seq (! f appl)))))","problem":62,"user":"50b29029e4b03ea880433563"},{"code":"(fn iter [f x] (lazy-cat (list x) (map f (iter f x))))","problem":62,"user":"4e6e3a1e535d5021c1a89602"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq \n   (cons x (it f (f x))\n   )\n  )\n)","user":"580c8fcee4b0849f6811b721"},{"problem":62,"code":"(fn func [f v] \n  (cons v (lazy-seq (func f (f v)))))","user":"574c5e18e4b02ea11479921b"},{"problem":62,"code":"(fn jembet [f x]\n  (lazy-seq (cons x (jembet f (f x)))))","user":"55d9743ae4b0e31453f64aca"},{"problem":62,"code":"(fn prob62 \n  [f x]\n  (lazy-seq (cons x (prob62 f (f x)))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":62,"code":"(fn F [f x]\n  (lazy-seq (cons x (F f (f x)))))","user":"4f856adfe4b033992c121c44"},{"problem":62,"code":"(fn iter [f seed]\n  (lazy-seq\n    (cons seed (iter f (f seed)))))","user":"56c21eafe4b05cc29241ee7e"},{"problem":62,"code":"(fn my-it [f a] (lazy-seq (cons a (my-it f (f a)))))","user":"56d4b1aee4b0ea9b8538f7ba"},{"code":"(fn iter [f x]\n  (lazy-seq\n   \t(cons x (iter f (f x)))))","problem":62,"user":"50d3ec8be4b030b634c368bb"},{"code":"(fn my-iterate\n  [f start]\n  (cons start (lazy-seq (my-iterate f (f start))))\t\n )","problem":62,"user":"5094057fe4b097f48cc38593"},{"problem":62,"code":"(fn it [f x] \n  (lazy-seq (cons x (it f (f x))) ))","user":"5e44c804e4b01d43a70e8e89"},{"code":"(fn my-iterate [f init]\n  (lazy-seq (cons init\n                  (my-iterate f (f init)))))","problem":62,"user":"51460e4ce4b04ef915e37314"},{"problem":62,"code":"(fn myiterate [ f i ]\n  (lazy-seq\n   (cons i (myiterate f (f i)))))","user":"55536a8ae4b0deb715856e03"},{"problem":62,"code":"(fn [f i] (map #((apply comp (repeat %1 f)) i) (range)))","user":"5dc98501e4b02f9375f4e1e6"},{"problem":62,"code":"(fn b [f a]\n  (lazy-seq (cons a (b f (f a)))))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn it\n  ([f] (it f 0))\n  ([f v] (cons v (lazy-seq (it f (f v))))))","problem":62,"user":"523b82efe4b07becd5be21f0"},{"problem":62,"code":"(fn mf [f i]\n           (cons i (lazy-seq (mf f (f i)))))","user":"531902b1e4b08068f379ed77"},{"problem":62,"code":"(fn itr\n  [f x]\n  (lazy-seq (cons x (itr f (f x)))))","user":"53c1b787e4b00fb29b221266"},{"problem":62,"code":"(fn _62\n  [f s]\n  (lazy-seq\n   (cons s (_62 f (f s)))))","user":"558b41fce4b0277789237628"},{"problem":62,"code":"(fn my-iterate [f seed] (lazy-seq (cons seed (my-iterate f (f seed)))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn it[f x] \n    (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"4f891abde4b033992c121c77"},{"code":"(fn myit [f n] \n      (lazy-seq (cons n (myit f (f n)))))","problem":62,"user":"4e739e13535dff18050a9c76"},{"problem":62,"code":"(fn it [f x]\n\t(cons x (lazy-seq (it f (f x))))\n)","user":"5409f8eae4b0addc1aec66e6"},{"code":"(fn iter [f x] \n  (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"5025b93ce4b0c969f0b056df"},{"problem":62,"code":"(fn ff [f init] \n  (lazy-seq (cons init (ff f (f init))    )))","user":"56cad309e4b0ea9b8538f720"},{"code":"(fn newiterate [f x] (cons x (lazy-seq (newiterate f (f x)))))","problem":62,"user":"504dff92e4b078edc5f5938a"},{"code":"(fn [f x]\n  (letfn [(iterate- [f x]\n            (cons x (lazy-seq (iterate- f (f x)))))]\n    (iterate- f x)))","problem":62,"user":"4f98ead0e4b0dcca54ed6cf8"},{"problem":62,"code":"(fn it ([f x] (cons x (lazy-seq  (when-let [v (f x)] (it f v) ) ) ) ))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn iter [func x] (cons x (lazy-seq (iter func (func x)))))","problem":62,"user":"529d4f4be4b04e0c58e87b79"},{"code":"(fn myit [f x0] (lazy-seq (cons x0 (myit f (f x0)))))","problem":62,"user":"4f141dee535d64f603146434"},{"code":"(fn iter [f init]\n  (cons init (lazy-seq (iter f (f init))))\n)","problem":62,"user":"52da20c7e4b09f7907dd13b3"},{"code":"(fn myiterate                                    \n  [f x]                                            \n  (lazy-seq (cons x (myiterate f (f x)))))","problem":62,"user":"50573ed8e4b0012181721987"},{"problem":62,"code":"(fn my-iterate [fun x]\n  (cons x (lazy-seq (my-iterate fun (fun x)))))","user":"5456e4e7e4b080a794c2c883"},{"problem":62,"code":"(fn own [fun val]\n  (cons val (lazy-seq (own fun (fun val)))))","user":"5c706232e4b0fca0c162277e"},{"problem":62,"code":"(fn my-iterate\n  [f s]\n  (cons s (lazy-seq (my-iterate f (f s)))))","user":"5bc7f2d6e4b07a9b28b100b7"},{"problem":62,"code":"(fn inf [f x] \n  (lazy-seq \n   (cons x (inf f (f x)))))","user":"53e241a6e4b036ad0777e3f0"},{"code":"(fn it [f seed]\n  (cons seed (lazy-seq (it f (f seed)))))","problem":62,"user":"534efe66e4b084c2834f4ac1"},{"code":"(fn iterateo [f x]\n  (lazy-seq\n   (cons x\n         (iterateo f (f x)))))","problem":62,"user":"50b35486e4b03ea88043356a"},{"code":"(fn [f x]\n  (lazy-seq\n    ((fn g [y]\n       (cons y (lazy-seq (g (f y))))\n       ) x)\n    ))","problem":62,"user":"50555c06e4b0ce54f56f03fa"},{"code":"(fn myiterate [f val]\n  (let [next (f val)]\n    (lazy-seq\n      (cons val (myiterate f next)))))","problem":62,"user":"4edd9d79535d10e5ff6f532b"},{"code":"(fn iter-seq [f x] (cons x (lazy-seq (iter-seq f (f x)))))","problem":62,"user":"52277ab9e4b0186687e23a4f"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x\n        (lazy-seq\n          (my-iterate f (f x)))))","user":"5d28b684e4b092dab7f59c83"},{"problem":62,"code":"(fn ite [f x]\n  (lazy-seq (cons x (ite f (f x)))))","user":"527ba29de4b03e8d9a4a7594"},{"code":"(fn [f x]\n  (let [in (fn [fin f x] (lazy-seq (cons (f x) (fin fin f (f x)))))]\n    (cons x (in in f x))))","problem":62,"user":"4f2a35ace4b0d6649770a03a"},{"code":"(fn my-iterate [fxn x]\n  (cons x\n        (lazy-seq (my-iterate fxn (fxn x)))))","problem":62,"user":"5269c150e4b03e8d9a4a71f8"},{"problem":62,"code":"(fn iterate-alt [f x]\n  (cons x (lazy-seq (iterate-alt f (f x)))))","user":"5566463ee4b0c656e3ff1831"},{"problem":62,"code":"(fn myIter [f x]\n   (cons x (lazy-seq (myIter f (f x)))))","user":"5e42ba49e4b01d43a70e8e6c"},{"problem":62,"code":"(fn f-prime \n  [f x]\n  (lazy-seq\n   (cons x (f-prime f (f x)))))","user":"53de7484e4b0d874e779ae35"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (lazy-seq\n    (cons x (my-iterate f (f x)))))","user":"5574c172e4b05c286339e059"},{"problem":62,"code":"(fn myiter [f x]\n  (lazy-seq (cons x (myiter f (f x)))))","user":"57a13745e4b0c3d858beb8e3"},{"problem":62,"code":"(fn myIt [f x] (lazy-seq (cons x (myIt f (f x)))))","user":"58e5f995e4b056aecfd47ca5"},{"code":"(fn iterate2 [f x] (cons x (lazy-seq f (iterate2 f (f x)))))","problem":62,"user":"525b12b1e4b0cb4875a45d04"},{"problem":62,"code":"(fn whateva [f x] (lazy-seq (cons x (whateva f (f x)))))","user":"54e7425ee4b024c67c0cf810"},{"code":"(fn rr [f x] (lazy-seq (cons x (rr f (f x)))))","problem":62,"user":"4ef355e3535dced4c769f228"},{"problem":62,"code":"(fn schmiterate [f x]\n  (cons x (lazy-seq (schmiterate f (f x)))))","user":"55702081e4b09a3098a52529"},{"code":"(fn doFunc[x y] (cons y (lazy-seq (doFunc x (x y)))))","problem":62,"user":"525cc912e4b0cb4875a45d48"},{"problem":62,"code":"(fn iter [fun initval] \n     (lazy-cat [initval] (iter fun (fun initval))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (cons x (lazy-seq (my-iterate f (f x))))\n  )","user":"5ac37d0fe4b0e27600da7718"},{"problem":62,"code":"(fn my-iterate\n  [f i]\n  (lazy-seq (cons i (my-iterate f (f i)))))","user":"560d4994e4b05f002753df3c"},{"problem":62,"code":"(fn it [f n]\n  (lazy-cat [n] (it f (f n))))","user":"5cb41c40e4b026601754b911"},{"problem":62,"code":"(fn my-iterate\n  [f startval]\n  (lazy-seq (cons startval (my-iterate f (f startval)))))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn g[f x] (cons x (lazy-seq (g f (f x)))))","problem":62,"user":"5073de20e4b054001656acca"},{"problem":62,"code":"(fn [f x]\n             (letfn [(myiterate [f x]\n                  (lazy-seq\n                   (cons x (myiterate f (f x)))))]\n             (myiterate f x)))","user":"5f77890ae4b02876ed9fd0b9"},{"code":"#(cons %2\n  (repeatedly\n    (let [x (atom %2)]\n      (fn [] (swap! x %1)))))","problem":62,"user":"500933a6e4b046cdb195e074"},{"code":"(fn it [f n] (cons n (lazy-seq (it f (f n)))))","problem":62,"user":"4fa39b3ee4b081705acca191"},{"problem":62,"code":"(fn iter \n  ([f] (iter f 1)) \n  ([f n] \n   (cons n (lazy-seq (iter f (f n))))))","user":"546692aee4b01be26fd746e7"},{"code":"(fn myit [f init]\n  (lazy-seq\n    (cons init\n      (myit f (f init)))))","problem":62,"user":"4e955b95535dbda64a6f6b33"},{"problem":62,"code":"(fn i[f o] (cons o (lazy-seq (i f (f o)))))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn g [f x] (lazy-cat [x] (g f (f x))))","problem":62,"user":"4e597b2c535d8a8b8723a29d"},{"code":"(fn iter [f a] (cons a (lazy-seq (iter f (f a)))))","problem":62,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn my-iterate [f x]\n  (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"4e39fb68535deb9a81d77f47"},{"code":"(fn I [x y]\r\n  (let [r (x y)]\r\n    (lazy-seq (cons y (I x r)))))","problem":62,"user":"4e1fe7f1535d04ed9115e810"},{"code":"(fn lazy-thing [f n] (cons n (lazy-seq (lazy-thing f (f n)))))","problem":62,"user":"50f53694e4b057d4c52de881"},{"problem":62,"code":"(fn iterate2 [f n]\n  (cons n (lazy-seq (iterate2 f (f n)))))","user":"54e606c3e4b024c67c0cf803"},{"problem":62,"code":"(fn iter [fun x] (lazy-seq (cons x (iter fun (fun x)))))","user":"54856d54e4b0e286459a11aa"},{"problem":62,"code":"(fn re-iterrate [f init]\n  (cons init\n      (lazy-seq\n       \t(re-iterrate f (f init)))))","user":"5958a0c8e4b066ee0a44af8c"},{"problem":62,"code":"( fn ite [f n] ( cons n (lazy-seq (ite f (f n)))))","user":"5dfa1c67e4b0a607a9a45cc5"},{"code":"(fn f [g x] (cons x (lazy-cat (f g (g x)))))","problem":62,"user":"513f0565e4b051389b345b3b"},{"problem":62,"code":"(fn it [f start] (lazy-seq (cons start (it f (f start)))))","user":"5965eb8de4b069c0a1a19796"},{"code":"(fn [f x]\n  (let [that (atom x)]\n    (repeatedly #(do (let [tmp @that] (swap! that f) tmp)))))","problem":62,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn ls [f arg]\n  (cons arg (lazy-seq (ls f (f arg)))))","problem":62,"user":"53973e7be4b0b51d73faaee6"},{"code":"(fn paska [f x] (cons x (lazy-seq  (paska f (apply f (list x))))))","problem":62,"user":"50463347e4b011c5dfee771e"},{"problem":62,"code":"(fn iter\n  [f x]\n  (lazy-seq (cons x\n                  (iter f (f x)))))","user":"56a79eb0e4b07966d5a8a05d"},{"code":"(fn ff[f a] \n  (lazy-seq (cons a (ff f (f a)))))","problem":62,"user":"4f1fd734535d64f6031464a5"},{"code":"(fn i [f x](cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4e778d36535d324fb2983d71"},{"problem":62,"code":"(fn yaiter [f x] (cons x (lazy-seq      (yaiter f (f x)))))","user":"503c90aae4b06c4e0e1fa24b"},{"code":"(fn P62 [f v] (cons v (lazy-seq (P62 f (f v)))))","problem":62,"user":"5046f909e4b03b02161376b5"},{"code":"(fn s [f x] (cons x (lazy-seq (s f (f x)))))","problem":62,"user":"4e6ebd4a535d5021c1a89610"},{"problem":62,"code":"(fn iterate2 [func x]\n  (lazy-seq\n   (cons x (iterate2 func (func x)))))","user":"541f5b37e4b01498b1a71a97"},{"problem":62,"code":"(fn lazy_iter [f x] (lazy-seq (cons x (lazy_iter f (f x)))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":62,"code":"(fn iterate2 \n  [f x]\n  (lazy-seq\n   (cons x (iterate2 f (f x)))))","user":"57f81569e4b0d3187e900919"},{"problem":62,"code":"(fn iter [f current] (lazy-seq (cons current (iter f (f current)))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn [f init]\n  (letfn [(xx [ff i]\n              (cons i (lazy-seq (xx ff (ff i)))))]\n    (xx f init)))","problem":62,"user":"532418f3e4b09d4e7a9b54d8"},{"problem":62,"code":"(fn p\n  [f x]\n  (lazy-seq (cons x (p f (f x)))))","user":"56df7440e4b0ca2494a095fb"},{"problem":62,"code":"(fn it [f n] \n  (lazy-seq \n   (cons \n      n \n      (it f (f n)))))","user":"5d078e2de4b0cc9c915881fa"},{"problem":62,"code":"(fn ito[f x]\n  (lazy-seq (cons x (ito f (f x)))))","user":"5bf50e76e4b0b326c961d8a0"},{"code":"(fn a [f s] (lazy-seq (cons s (a f (f s)))))","problem":62,"user":"4f1595da535d64f603146444"},{"problem":62,"code":"(fn my-iterate [func x] (cons x (lazy-seq (my-iterate func (func x)))))","user":"5bc6ef7ce4b07a9b28b1009f"},{"problem":62,"code":"(fn iter [f n]\n  (cons n\n  \t(lazy-seq \n     (iter f (f n)))))","user":"563c48e7e4b0bfe05bf11832"},{"code":"(fn i [f seed] (cons seed (lazy-seq (i f (f seed)))))","problem":62,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":62,"code":"(fn iter [func n] (cons n (lazy-seq (iter func (func n)))))","user":"560039cce4b04bb52996e162"},{"code":"(fn my-iterate [f v](cons v (lazy-seq (my-iterate f (f v)))))","problem":62,"user":"51377188e4b04059df19f303"},{"code":"(fn ite [f x]\n\t(lazy-seq (cons x (ite f (f x)))))","problem":62,"user":"51bdc609e4b0ff155d51d2b3"},{"code":"(fn iter [f i] \n  (cons i \n        (lazy-seq (iter f (f i)))))","problem":62,"user":"51592b81e4b0394f658fe22c"},{"problem":62,"code":"(fn my-iter\n  [f x]\n  (lazy-seq (cons x (my-iter f (f x)))))","user":"568bd448e4b0dcc4269f40a9"},{"problem":62,"code":"(fn iterate-2 \n    ([f v] (cons v (lazy-seq (iterate-2 f (f v))))))","user":"51c8f1d8e4b07ef393169e5d"},{"code":"(fn my-iter [f v]\n  (cons v\n        (lazy-seq (my-iter f (f v)))))","problem":62,"user":"52890634e4b0239c8a67ae5e"},{"problem":62,"code":"(fn ewe [f x]\n  (lazy-seq (concat [x] (ewe f (f x)))))","user":"56193c6ee4b053970a773af2"},{"problem":62,"code":"(fn i ([f s] (cons s (lazy-seq (i f (f s))))))","user":"54cbe00ee4b057c6fda3a285"},{"problem":62,"code":"#(map\n    (partial \n        (fn [my-fn init n-iter]\n            (loop\n                [result init n n-iter]\n                (if (zero? n)\n                    result\n                    (recur (my-fn result) (dec n)))))\n        %1 %2)\n    (range))","user":"5784ff88e4b0ebec4cfb74d4"},{"code":"(fn my-iter [func init]\n  (let [result (func init)]\n    (cons init (lazy-seq (my-iter func result)))))","problem":62,"user":"52af7a5ce4b0c58976d9acbd"},{"problem":62,"code":"(fn my-62\n  [func init-val]\n  (lazy-seq (cons init-val (my-62 func (func init-val)))))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn itr [f x] (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4f037bb5535dcb61093f6aec"},{"code":"(fn f [g s] (lazy-seq (cons s (f g (g s)))))","problem":62,"user":"4fd2789ee4b04c3a95aa0422"},{"problem":62,"code":"(fn do-it [f x]\n  (cons x (lazy-seq (do-it f (f x)))))","user":"58225587e4b04b46fc4b0f94"},{"problem":62,"code":"(fn r [f init] (lazy-cat [init] (r f (f init))))","user":"59cf4013e4b0ef0a1e9b5b68"},{"code":"(fn iter [f start]\n  (lazy-seq\n    (cons start (iter f (f start)))))","problem":62,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn re-iterate [f n]\n  (cons n (lazy-seq (re-iterate f (f n)))))","problem":62,"user":"51d360d1e4b099f3b6acddff"},{"problem":62,"code":"(fn reit [f x] (lazy-seq (cons x (reit f (f x)))))","user":"535f9a5ce4b04ce2eb3ed2de"},{"code":"(fn my-iterate [f v]\n    (lazy-seq (cons v (my-iterate f (f v)))))","problem":62,"user":"51c3c6a6e4b0851ac09658f8"},{"code":"(fn lz [f b] (lazy-seq (cons b (lz f ( f b)))))","problem":62,"user":"4ea4e98a535d7eef308072ce"},{"problem":62,"code":"(fn re-iter [f n] (lazy-seq (cons n (re-iter f (f n)))))","user":"5c1edf23e4b0efcb0b05b25d"},{"code":"(fn this [f v]\n     (lazy-seq\n       (cons v (this f (f v)))))","problem":62,"user":"4f616892e4b0defedf855fbf"},{"problem":62,"code":"(fn [f x]  \n  (letfn [(it [x] (cons x (lazy-seq (it (f x)))))]\n    (it x)))","user":"4e2d84bf535deb9a81d77f09"},{"problem":62,"code":"(fn it [f n]\n (lazy-seq (cons n (it f (f n)))))","user":"563f0fdae4b08d4f616f5ece"},{"problem":62,"code":"(fn i [f x]\n    (cons x (lazy-seq (i f (f x)))))","user":"5583888ae4b05c286339e117"},{"problem":62,"code":"(fn ite [fn1 val]\n  (cons val (lazy-seq (ite fn1 (fn1 val)))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn new-iterate [f x]\n  (lazy-seq\n   (cons x (new-iterate f (f x)))))","problem":62,"user":"4dc7e7a5535d8a4b2fd74290"},{"problem":62,"code":"(fn wat [f x]\n  (cons x (lazy-seq (wat f (f x)))))","user":"5833a6d8e4b089d5ab817ca2"},{"code":"(fn rec [f seed]\n  (cons seed (lazy-seq (rec f (f seed)))))","problem":62,"user":"50bc23e4e4b0594b91591c3c"},{"problem":62,"code":"(fn iterate-\n  [f init]\n  (cons init\n        (lazy-seq\n         (iterate- f (f init)))))","user":"567931e9e4b05957ce8c6184"},{"problem":62,"code":"(fn my-iter  [fun v]\n  (lazy-seq (cons v (my-iter fun (fun v)))))","user":"5832be57e4b089d5ab817c86"},{"problem":62,"code":"(fn [fun initial]\n  ((fn get-lzy-seq [n]\n     (lazy-seq (cons n\n                     (get-lzy-seq (fun n))))\n     ) initial))","user":"55a0d79fe4b0acc240e31502"},{"code":"(fn iiterate \n  [f x]\n  (cons x (lazy-seq (iiterate f (f x)))))","problem":62,"user":"51789dfae4b03d69594194d7"},{"problem":62,"code":"(fn iter\n  [f n]\n  (lazy-seq\n    (cons n (iter f (f n)))))","user":"56b1ab17e4b0982f16b37df1"},{"problem":62,"code":"(fn it [func x]\n\t(lazy-seq (cons x (it func (func x))))\n\t)","user":"57465429e4b009280f9f2b60"},{"code":"(fn myiterate\n  [f init]\n  (cons init (lazy-seq (myiterate f (f init)))))","problem":62,"user":"52c58561e4b0c2d177d620f8"},{"problem":62,"code":"(fn ff [f x]\n    (cons x (lazy-seq (ff f (f x)))))","user":"4eda8d7c535d10e5ff6f530f"},{"problem":62,"code":"(fn rfunc[f a]\n\t(lazy-seq (cons a (rfunc f (f a)))))","user":"5822b578e4b04b46fc4b0fa4"},{"code":"(fn recurse [func acc]\r\n    (lazy-seq\r\n     (cons acc (recurse func (func acc)))))","problem":62,"user":"508b95a0e4b0be79e5b189c6"},{"code":"(fn iterate* [f init]\n  (lazy-seq (cons init (iterate* f (f init)))))","problem":62,"user":"51d662fce4b0154f82ab92ef"},{"problem":62,"code":"(fn onlo [f x] \n  (lazy-seq (cons x (onlo f (f x))))\n  )","user":"57750460e4b0979f8965160c"},{"problem":62,"code":";; Calcualtes f(1) on access.\n(fn itr8 [f x]\n  (lazy-seq (cons x (itr8 f (f x)))))\n\n;; Calcualtes f(1) on Fn initialisation.\n;(fn itr8 [f x]\n;  (cons x (lazy-seq (itr8 f (f x)))))","user":"55150524e4b055c2f668d4d9"},{"problem":62,"code":"(fn iter [f i]          \n  (lazy-seq (cons i (iter f (f i)))))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":62,"code":"(fn itt [fun v]\n\t(lazy-seq (cons v (itt fun (fun v)))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn my-iterate [func init]\n\t(lazy-seq\n\t (cons init\n\t       (my-iterate func (func init)))))","problem":62,"user":"52381b2ae4b0fae3832e99ef"},{"problem":62,"code":"(fn [f x]\n  (letfn \n    [(iter2 [f x] (cons x (lazy-seq (iter3 f x 1))))\n     (iter3 [f x y] (cons (f x) (lazy-seq (iter3 f (f x) y))))]\n    (iter2 f x)))","user":"5385e633e4b06839e8705f08"},{"code":"(fn it [f x]\n  (lazy-seq (cons x\n                  (it f (f x)))))","problem":62,"user":"53615652e4b0243289761e43"},{"problem":62,"code":"(fn [f x]\n  (reductions (fn [acc e] (f acc)) x (range)))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":62,"code":"(fn my-iterate [f x]\n  (cons x\n        (lazy-seq\n         (my-iterate f (f x)))))","user":"5a95c639e4b0d174b936c75e"},{"code":"(fn i  [f x] (cons x (lazy-seq (i f (f x)))))","problem":62,"user":"4eb298c1535d7eef3080734b"},{"code":"(fn i [f v]\n  (cons v (lazy-seq (i f (f v)))))","problem":62,"user":"4e6a5a32535d8ccf87e9fed0"},{"problem":62,"code":"(fn iter1 [f x]\n  (lazy-seq (cons x (iter1 f (f x)))))","user":"5a23503fe4b0ff51aa4b32d6"},{"code":"(fn fun [f x]\n  (lazy-cat [x] (fun f (f x))))","problem":62,"user":"520242bae4b030ee0c5b26e3"},{"problem":62,"code":"(fn itr8 [f acc]\n  (cons acc\n    (lazy-seq \n      (itr8 f (f acc)))))","user":"562cd94ee4b0a45d2ff83015"},{"problem":62,"code":"(fn iterate*\n  [f init]\n  (cons init (lazy-seq (iterate* f (f init)))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn my-it [f x] (cons x (lazy-seq (my-it f (f x)))))","problem":62,"user":"50783762e4b0fc74642bff67"},{"problem":62,"code":"(fn [f x]\n    (letfn [(my-iterate [f x]\n              (lazy-seq (cons x (my-iterate f (f x)))))]\n    (my-iterate f x)))","user":"603d5f2ae4b0d5df2af2230c"},{"code":"(fn itr8 [f n]\n  (cons n (lazy-seq (itr8 f (f n)))))","problem":62,"user":"52117ea7e4b07aea8afc4f70"},{"problem":62,"code":"(fn x [f init]\n  (cons init\n    (lazy-seq\n      (x f (f init)))))","user":"571ff1ebe4b0c5bde472c088"},{"problem":62,"code":"(fn [f x]\n  (letfn [(iter [f x]\n                (lazy-seq (cons x (iter f (f x)))))]\n    (iter f x)))","user":"5f5e7158e4b02876ed9fcff0"},{"code":"(fn _i [f x] (cons x (lazy-seq (_i f (f x)))))","problem":62,"user":"531f7a2de4b08068f379edc6"},{"problem":62,"code":"(fn step [f x]\n    (lazy-seq\n     (cons x (step f (f x))))\n    )","user":"4f57c913e4b0a7574ea7183f"},{"code":"(fn i[f n]\n  (lazy-seq \n    (cons n (i f (f n)))))","problem":62,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":62,"code":"(fn iter \n  [f init]\n  (cons init (lazy-seq (iter f (f init)))))","user":"545944a2e4b01be26fd74627"},{"code":"(fn doiter [f x] (cons x (lazy-seq f (doiter f (f x)))))","problem":62,"user":"4e781a2e535d324fb2983d74"},{"problem":62,"code":"( fn rf [f x] (lazy-seq (cons x  (rf f (f x))  ) )    )","user":"5da98129e4b000c986472c33"},{"problem":62,"code":"(fn r [f s] (lazy-seq (cons s (r f (f s)))))","user":"57c7e7d9e4b05aa3c4741d0f"},{"code":"(fn g[f x] (lazy-seq (cons x (g f (f x)))))","problem":62,"user":"4f08b15b535dcb61093f6c40"},{"problem":62,"code":"(fn iterate-extreme [f x]\n  (lazy-seq\n   (cons x (iterate-extreme f (f x)))))","user":"5843b231e4b089d5ab817e3d"},{"code":"(fn g [x y] (cons y (lazy-seq (g x (x y)))))","problem":62,"user":"51a058dae4b0b292b01ee3f3"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (lazy-seq (cons x (my-iterate f (f x))))\n)","user":"5c3440fee4b0d62ef62d9f50"},{"code":"(fn iter [f x]\r\n    (lazy-seq\r\n      (cons x (iter f (f x)))))","problem":62,"user":"4ef1ee67535dced4c769f219"},{"code":"(fn ite\n\t[f x]\n\t(cons x (lazy-seq (ite f (f x)))))","problem":62,"user":"5339af7de4b0e30313ee6cab"},{"problem":62,"code":"(fn fnn [f x]\n  (lazy-seq (cons x (fnn f (f x)))))","user":"542d5fa9e4b0dad94371f2b5"},{"code":"(fn my-iterate [f x0]\n  (lazy-seq\n    (cons x0\n      (my-iterate f (f x0)))))","problem":62,"user":"4ed188c8535d44c135fd68cf"},{"problem":62,"code":"(fn iter [xf n]\n(lazy-seq (cons n (iter xf (xf n)))))","user":"5e13a6b7e4b099d064963001"},{"code":"(fn i [op n]\n  (cons n (lazy-seq (i op (op n)))))","problem":62,"user":"516abecae4b081287f204e9f"},{"problem":62,"code":"(fn i [f x]\n  (lazy-seq (cons x (i f (f x))))\n  )","user":"542a8d07e4b01498b1a71b43"},{"problem":62,"code":"#(letfn [(a [b] (lazy-cat [b] (a (%1 b))))] (a %2))","user":"59ddae03e4b01968742fed65"},{"problem":62,"code":"(fn myf [f n] \n  (lazy-seq\n   (cons n (myf f (f n)))))","user":"56eff7c1e4b04a395b9a0468"},{"code":"(fn f-repeat [f init-val] \r\n  (lazy-seq (cons init-val\r\n                  (f-repeat f (f init-val)))))","problem":62,"user":"4fabbb97e4b081705acca21d"},{"problem":62,"code":"(fn my-it [f x]\n  (lazy-seq\n    (cons x (my-it f (f x)))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (f x))))\n  )","problem":62,"user":"4ecfa05c535d44c135fd68b9"},{"problem":62,"code":"(fn my-iterate [f v] (lazy-seq (cons v (my-iterate f (f v)))))","user":"55f081bbe4b06e875b46ce25"},{"code":"#(reductions (fn [a _] (%1 a)) %2 (range))","problem":62,"user":"50336c6be4b0c6c1199c710f"},{"problem":62,"code":"(fn iter [func init]\r\n  (cons init (lazy-seq (iter func (func init)))))","user":"546e1142e4b00cfc9eacc199"},{"problem":62,"code":"(fn my-iterate [op i]\n  (lazy-seq (cons i (my-iterate op (op i))))\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":62,"code":"(fn solve [f initial] \n  (cons initial\n    (lazy-seq (solve f (f initial))))\n)","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":62,"code":"(fn my-iterate\n        [f x]\n        (lazy-seq\n          (cons x\n            (my-iterate f (f x))\n            )\n          )\n        )","user":"536827f1e4b0243289761e8a"},{"problem":62,"code":"(fn iterate2 [func seed] \n  (cons seed \n        (lazy-seq (iterate2 func (func seed)))))","user":"54194782e4b01498b1a71a29"},{"code":"(fn iterate1 [f v]\n  (cons v (lazy-seq (iterate1 f (f v)))))","problem":62,"user":"5153316ce4b0252ac4b16611"},{"problem":62,"code":"(fn iter-2 [f e]\n  (cons e\n    (lazy-seq (iter-2 f (f e)))))","user":"5a03d246e4b01bb0ae8afd8c"},{"problem":62,"code":"(fn solve [f i]\n  (lazy-cat [i] (solve f (f i))))","user":"52c35afce4b07a9af579238c"},{"code":"(fn y [f x] (cons x (lazy-seq (y f (f x)))))","problem":62,"user":"4dc78527535d8a4b2fd7428f"},{"problem":62,"code":"(fn my-iterate [op param]\n  (lazy-seq (cons param (my-iterate op (op param)))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn itx [f n] (lazy-seq (cons n (itx f (f n)))))","problem":62,"user":"4fc6e1a8e4b0ee37620e181d"},{"problem":62,"code":"(fn iter\n  [f init]\n  (lazy-seq (cons init (iter f (f init)))))","user":"5a080bdde4b01bb0ae8afde9"},{"code":"(fn itrt [f x]\n  (cons x (lazy-seq (itrt f (f x)))))","problem":62,"user":"4fd96694e4b05e33b9224f37"},{"problem":62,"code":"(fn myIterate\n  [fun value]\n  (cons value\n        (lazy-seq\n         (myIterate fun (fun value)))))","user":"5f724f55e4b02876ed9fd089"},{"code":"(fn increase [f n]\n  (cons n (lazy-seq (increase f (f n)))))","problem":62,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn i[f x]\n  (lazy-seq (cons x (i f (f x)))))","problem":62,"user":"501284d9e4b030d97e4db710"},{"problem":62,"code":"(fn [f x]\n  (let [inner (fn inner [f x]\n                (lazy-seq\n                 (cons (f x)\n                       (inner f (f x)))))]\n    (cons x (inner f x))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":62,"code":"(fn reiterate\n  [f x]\n  (cons x (lazy-seq (reiterate f (f x)))))","user":"5ac35d00e4b0e27600da7712"},{"problem":62,"code":"(fn i[f x] (cons x (lazy-seq (map f (i f x)))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn myiter[f acc]\n  (cons acc \n    (lazy-seq\n       (myiter f \n               (f acc))   \n    )\n   )  \n  )","problem":62,"user":"4fb03cf4e4b081705acca262"},{"problem":62,"code":"(fn myfn [f x]\n  (cons x (lazy-seq (myfn f (f x)))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"problem":62,"code":"(fn iter [f x]\n   (let [nx (f x)]\n     (cons x\n      (lazy-seq \n       (iter f nx)))))","user":"5272645de4b03e8d9a4a742c"},{"code":"#(reductions (fn [i _] (%1 i)) (repeat %2))","problem":62,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn ite  \n  [f x] (cons x (lazy-seq (ite f (f x)))))","problem":62,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn my-iterate [f v]\r\n  (lazy-seq (cons v (my-iterate f (f v)))))","problem":62,"user":"4e994541535dbda64a6f6b64"},{"problem":62,"code":"(fn looper [f n]\n               (lazy-seq (cons n  (looper f (f n)))))","user":"54eca495e4b024c67c0cf855"},{"code":"(fn t [f x]\n  (cons x (lazy-seq (t f (f x)))))","problem":62,"user":"4fd7962ee4b0dab7d829f385"},{"problem":62,"code":"(fn y [f x]\n  (lazy-seq (cons x (y f (f x)))))","user":"51456858e4b0e88796073408"},{"code":"(fn i [f v] (cons v (lazy-seq(i f (f v)))))","problem":62,"user":"50d179c7e4b05a71a896ef56"},{"code":"(fn iteroi [f x]\n  (lazy-cat [x] (iteroi f (f x)))\n  )","problem":62,"user":"5252cbe7e4b0541d1855b8d2"},{"code":"(fn iter [func arg]\n  (cons arg (lazy-seq (iter func (func arg)))))","problem":62,"user":"4db2f208535df7e46ed9b6c9"},{"problem":62,"code":"; Had to Google this one.  Thanks to longhua for this simple, correct, and understandable solution.\n\n(fn my-iterate [f initial]\n  (lazy-seq (cons initial\n                  (my-iterate f (f initial)))))\n\n;Lazy sequences are not yet intuitive to me.  \n\n\n; There's a wide variety of answers to this one.  Some people have lazy-seq inside of cons and others on outside of cons.\n; Other people I've been following, such as adereth and _pcl have solutions that I'm not even sure are lazy.","user":"5535e822e4b09218d5f44fb2"},{"problem":62,"code":"(fn reiterate [f x] \n              (cons x (lazy-seq (reiterate f (f x)))))","user":"530b8580e4b02e82168697cc"},{"problem":62,"code":"(fn it [f i]\n    (lazy-seq (cons i (it f (f i)))))","user":"56761ab1e4b05957ce8c6154"},{"problem":62,"code":"(fn fib [ fun  x ]\n  (lazy-seq (cons x (fib fun (fun x)))))","user":"57887de2e4b0ebec4cfb751c"},{"problem":62,"code":"(fn my-iterate [func x]\n  (lazy-seq (cons x (my-iterate func (func x)))))","user":"5691ef12e4b0dcc4269f40f8"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n    (lazy-seq (cons x (my-iterate f (f x)))))","user":"5bbbcf9ee4b0a20761a23614"},{"problem":62,"code":"(fn ls [f n]\n  (lazy-seq (cons n (ls f (f n)))))","user":"4fbb7010e4b081705acca2e7"},{"code":"(fn tmp [func x] (cons x (lazy-seq (tmp func (func x)))))","problem":62,"user":"52dad8bde4b09f7907dd13be"},{"problem":62,"code":"(fn iterate- [f x]\n  (cons x (lazy-seq (iterate- f (f x)))))","user":"5d7b90ede4b02e6b30c93552"},{"code":"(fn iterbate \n  ([fun init] (new clojure.lang.LazySeq (fn [] (cons init (iterbate fun (fun init)))))))","problem":62,"user":"50e1bdd8e4b019fc399ce17f"},{"code":"(fn [func startval]\n  ((fn itr [val]\n     (let [cur-val (func val)]\n       (lazy-seq (cons val (itr cur-val))))) startval))","problem":62,"user":"523288fee4b035af41902a88"},{"problem":62,"code":"(fn iter2 [f x]\n  (lazy-seq\n   (cons x (iter2 f (f x)))))","user":"54eff2bee4b024c67c0cf88d"},{"problem":62,"code":"(fn my-iterate[f v]\n  (lazy-seq\n    (let [x (f v)]\n      (cons v (my-iterate f  (f v))))))","user":"602049b8e4b0bf4ca6b10961"},{"code":"(fn ! [f x] (lazy-seq (cons x (! f (f x)))))","problem":62,"user":"4f4f0287e4b03ad3f0c10cd7"},{"code":"(fn my-iter [f v] (cons v (lazy-seq (my-iter f (f v)))))","problem":62,"user":"51bc2f6ae4b0fe3ecfb46452"},{"problem":62,"code":"(fn iter [iter-fn val] (lazy-seq (cons val (iter iter-fn (iter-fn val)))))","user":"5227eacee4b0186687e23a5e"},{"code":"(fn self [f a] (lazy-cat [a] (self f (f a))))","problem":62,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":62,"code":"(fn my-iterate [f x]\n (lazy-seq (cons x (my-iterate f (f x)))))","user":"57eaf869e4b0bfb2137f5b56"},{"code":"(fn ! [f n] (cons n (lazy-seq (! f (f n)))))","problem":62,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn i [f x]\n  (lazy-seq (cons x (i f (f x)))))","problem":62,"user":"4ec74de3535d6d7199dd36df"},{"problem":62,"code":"(fn my-iter\n            ([f x]\n             (my-iter x f x))\n            ([res f x]\n             (lazy-seq (cons res (my-iter (f res) f x)))))","user":"4ea8570f535d7eef308072f8"},{"problem":62,"code":"(fn itr [f s]\n  (cons s (lazy-seq (itr f (f s)))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":62,"code":"(fn myiterate [f v]\n              (lazy-seq (cons v (myiterate f (f v)))))","user":"55a372f1e4b0acc240e31537"},{"problem":62,"code":"(fn doit [f x]\n            (lazy-seq (cons x (doit f (f x)))))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":62,"code":"(fn [func value]\n  (letfn [(it [func value]\n            (lazy-seq\n              (cons value (it func (func value)))))]\n    (it func value)))","user":"548c6673e4b0e286459a1209"},{"problem":62,"code":"(fn iterate_\n  [f x] (cons x (lazy-seq (iterate_ f (f x)))))","user":"54213a8fe4b01498b1a71aaf"},{"code":"(fn itr [f x] \n  (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"4e71a12c535d5021c1a8964f"},{"problem":62,"code":"(fn fx\n  [f v]\n  (lazy-seq (cons v (fx f (f v)))))","user":"524a9556e4b05ef8e38e64b1"},{"problem":62,"code":"(fn this [f x] (lazy-seq (cons x (this f (f x)))))","user":"52eb2ec9e4b0705949c44439"},{"problem":62,"code":"(fn cycle [f x]\n  (cons x (lazy-seq (cycle f (f x)))))","user":"54b5ce67e4b05787c3b163ac"},{"problem":62,"code":"(fn m [f n]\n   (lazy-seq (cons n (m f (f n)))))","user":"5339cb07e4b0e30313ee6caf"},{"problem":62,"code":"(fn myiterate [f x]\n  (lazy-seq (cons x (myiterate f (f x)))))","user":"53e8c684e4b036ad0777e48b"},{"problem":62,"code":"(fn lazys [f x]\n  (cons x (lazy-seq (lazys f (f x)))))","user":"57f8ba80e4b0d3187e90092f"},{"problem":62,"code":"(fn own-iter [f x]\n  (cons x (lazy-seq (own-iter f (f x)))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [f x] (reductions #(do %2 (f %1)) x (range)))","problem":62,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":62,"code":"(fn iter\n  [f n] (lazy-seq (cons n (iter f (f n)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":62,"code":"(fn ri [func arg]\n  (lazy-seq \n    (cons arg (ri func (func arg)))))","user":"5475d755e4b0c51c1f4d72a0"},{"problem":62,"code":"(fn ex61\n\t[f v]\n\t(letfn [(gener [prev]\n\t\t\t\t  \t(cons prev (lazy-seq (gener (f prev)))))]\n\t\t(gener v)))","user":"5252b59de4b0541d1855b8cf"},{"code":"(fn iter [fun val] \n  (lazy-cat \n    [val] \n    (iter fun (fun val))))","problem":62,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn iter [f v]\n  (lazy-seq \n    (cons v (iter f (f v)))))","problem":62,"user":"4e6cf521535de274dd8d818b"},{"problem":62,"code":"(fn my-iter [f x] \n  (lazy-seq (cons x (my-iter f (f x)))))","user":"5a99b863e4b0d174b936c7ae"},{"code":"(fn my-iterate [f init-value]\n    (lazy-seq (cons init-value (my-iterate f (f init-value))))\n )","problem":62,"user":"52763696e4b03e8d9a4a74d7"},{"problem":62,"code":"(fn d\n  ([f v] (d f v v))\n  ([f v n] (cons n (lazy-seq (d f v (f n))) )))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn it [f i] (cons i (lazy-seq (it f (f i)))))\n\n;(fn it\n;  ([f i] (it f i (f i)))  ([f i res] (cons i (lazy-seq (it f res (f res))))))","problem":62,"user":"4ff01fa9e4b0678c553fc321"},{"code":"(fn my-iterate [f n]\r\n  (lazy-seq \r\n    (cons n (my-iterate f (f n)))))","problem":62,"user":"4f3242bae4b0d6649770a08f"},{"code":"(fn my-iterate\n  [f init-val]\n  (lazy-seq\n   (cons init-val (my-iterate f (f init-val)))))","problem":62,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn i [f n]\n  (cons n (lazy-seq (i f (f n)))))","problem":62,"user":"4e49badd535dc968683fc4c9"},{"problem":62,"code":"(fn it [f i]\n  (lazy-seq (cons i (it f (f i))\n   )))","user":"6045582fe4b02d28681c77b6"},{"problem":62,"code":"(fn iter [func value]\n  (cons value (lazy-seq (iter func (func value)))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"code":"#(reductions (fn [x _] (% x)) %2 (repeat 1))","problem":62,"user":"4dd88803535d2dad7130b5d9"},{"problem":62,"code":"(fn re-implement [fun1 coll]\n  (lazy-seq (cons coll (re-implement fun1 (fun1 coll)))))","user":"5634995fe4b0bfe05bf117be"},{"problem":62,"code":"(fn mlaz [mfunc st]\n  (lazy-seq (cons st (mlaz mfunc (mfunc st))))\n  )","user":"5804b491e4b0a837a8b30cac"},{"code":"(fn [f v]\n  (map #(%1 v)\n    (reductions (fn [fv _] (comp f fv)) identity (range))))","problem":62,"user":"504e04a4e4b078edc5f59397"},{"problem":62,"code":"(fn [f x] (reductions (fn [fx _] (f fx)) x (range)))","user":"559b2ad1e4b066d22e731f4e"},{"code":"(fn i[f x]\n  (cons x\n    (lazy-seq (i f (f x)))))","problem":62,"user":"4f9a0064e4b0dcca54ed6d03"},{"code":"(fn t [f v]\n  (cons v (lazy-seq (t f (f v)))))","problem":62,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":62,"code":"(fn it [f, x]\n  (cons x (lazy-seq (it f (f x)))))","user":"54336443e4b0b6b47310fcde"},{"problem":62,"code":"(fn my-iterate [f init]\n  (cons init\n        (lazy-seq\n                  (my-iterate f (f init)))))","user":"59cd351ee4b0ef0a1e9b5b35"},{"code":"(fn [f x] (cons x \n           ((fn lseq [f x] (lazy-seq (cons (f x) (lseq f (f x))))) f x)\n          )\n   )","problem":62,"user":"528f4462e4b0239c8a67aef0"},{"problem":62,"code":"(fn [f xs] \n  (reductions (fn [prev _] (f prev)) xs (range)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":62,"code":"(fn it2 [f x] (lazy-seq (cons x (it2 f (f x)))))","user":"558843dae4b059ccff29b1f3"},{"problem":62,"code":"(fn myIterate\n  [n x]\n  (lazy-seq\n   (cons x (myIterate n (n x)))))","user":"5e95013fe4b0fbed045a3800"},{"code":"(fn myiterate [f x]\r\n  (let [res (apply f [x])]\r\n  (lazy-seq (cons x (myiterate f res)))))","problem":62,"user":"4e50c894535dc968683fc4ee"},{"code":"(fn yy [f n]\n    (cons n (lazy-seq (yy f (f n)))))","problem":62,"user":"504e1abee4b0f6ff3350c45d"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq (concat (list x) (my-iterate f (f x)))))","user":"54edc818e4b024c67c0cf865"},{"code":"(fn I [f x]\n  (cons x (lazy-seq (I f (f x)))))","problem":62,"user":"51a4416ae4b0def3c5c5868c"},{"problem":62,"code":"(fn iterate_ [func initial]\n  (lazy-seq (cons initial (iterate_ func (func initial)))))","user":"571543bbe4b07c98581c3ad4"},{"code":"(fn [f i] \n  (map \n    #(loop [c % v i] \n      (if (zero? c) v \n        (recur (dec c) (f v))))\n    (range)))","problem":62,"user":"4ed152d5535d44c135fd68cc"},{"code":"(fn ! [f x]\n   (cons x (lazy-seq (! f (f x))))\n)","problem":62,"user":"522eba30e4b01cdb292c5f0e"},{"code":"(fn my-iterate\n  [f x]\n  (cons x \n    (lazy-seq \n      (my-iterate f (f x)))))","problem":62,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn i [f x] (lazy-seq (cons x (i f (f x)))))","problem":62,"user":"4e4870d1535dc968683fc4bc"},{"problem":62,"code":"(fn *iterate [f x]\n    (cons x (lazy-seq (*iterate f (f x)))))","user":"555f3bfde4b0a2eb076a39c1"},{"code":"(fn myiter [f x]\n  (cons x (lazy-seq (myiter f (f x)))))","problem":62,"user":"51195e77e4b055cfb310d499"},{"code":"(fn reiterate [f x]\n  (cons x \n    (lazy-seq (reiterate f (f x)))))","problem":62,"user":"4f017b4e535dcb61093f6a37"},{"code":"(fn z [f x] (cons x (lazy-seq (z f (f x)))))","problem":62,"user":"4fd8544be4b0dab7d829f390"},{"code":"(fn it [f args] \n  (cons args \n        (lazy-seq (it f (f args)))))","problem":62,"user":"50c781bbe4b00bb60fe0c535"},{"code":"(fn iterate2 [op x] (cons x (lazy-seq (iterate2 op (op x)))))","problem":62,"user":"52c5c1c8e4b0c2d177d620fc"},{"problem":62,"code":"(fn it [f x]\n          (let [res (f x)]\n            (lazy-seq (cons x (it f res)))))","user":"4e617114535d8ccf87e9fe5b"},{"code":"(fn it [f i]\n  (lazy-seq (cons i (it f (f i))))\n)","problem":62,"user":"4f84400de4b033992c121c2e"},{"problem":62,"code":"(fn iter8 [fnc x] (lazy-seq (cons x (iter8 fnc (fnc x)))))","user":"57b7de74e4b0fbc9809a27d4"},{"problem":62,"code":"(fn itr\n  [f i]\n  (lazy-cat [i] (itr f (f i))))","user":"5470b3d0e4b00cfc9eacc1bb"},{"code":"(fn iterate* [f x] (lazy-seq (cons x (iterate* f (f x)))))","problem":62,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn l [f n] (cons n (lazy-seq (l f (f n)))))","problem":62,"user":"4efb2fd7535dced4c769f274"},{"problem":62,"code":"(fn I [f n] (lazy-seq (cons n (I f (f n)))))","user":"53cdbad1e4b00fb29b2212e6"},{"code":"(fn my-iter [f x]\n    (lazy-seq (cons x\n                    (my-iter f (f x)))))","problem":62,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":62,"code":"(fn [g init]\n   (letfn [(f [a]\n             (lazy-seq (cons a (f (g a)))))]\n     (f init)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn hey [f x] (cons x (lazy-seq (hey f (f x)))))","problem":62,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn it[ f x] \n  (lazy-seq (cons x (it f ( f x)))) )","problem":62,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(letfn [(step [f x] (cons x (lazy-seq (step f (f x)))))] step)","problem":62,"user":"5370b386e4b0fc7073fd6e9b"},{"code":"(fn iter[f x]\n  (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4f0365fc535dcb61093f6aa4"},{"code":"(fn test123 [f x] (cons x (lazy-seq (test123 f (f x)))))","problem":62,"user":"4f2f6678e4b0d6649770a06e"},{"problem":62,"code":"(fn it [f init]\n\t(cons init\n          (lazy-seq (it f (f init)))))","user":"5d231255e4b02ea6f0fb69fe"},{"problem":62,"code":"(fn me [f x]\n  (cons x\n        (lazy-seq (me f (f x)))))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"code":"(fn [f x]\n  (map #((apply comp (repeat % f)) x) (range)))","problem":62,"user":"4fe4c09ee4b0e8f79898febb"},{"problem":62,"code":"(fn miterate\n  [f x]\n  (lazy-seq (cons x (miterate f (f x)))))","user":"52606318e4b03e8d9a4a7036"},{"code":"(fn [g x]\n  (letfn [(mi [f v]\n              (cons v (lazy-seq (mi f (f v)))))]\n    (mi g x)))","problem":62,"user":"526f9715e4b03e8d9a4a7372"},{"problem":62,"code":"(fn iterat [f x] (cons x (lazy-seq (iterat f (f x)))))","user":"51c1b644e4b0d204dbe2ca12"},{"code":"(fn my-iterate [f initial-arg]\n  (lazy-seq (cons initial-arg\n                  (my-iterate f (f initial-arg)))))","problem":62,"user":"4e7c8fd1535db169f9c796be"},{"problem":62,"code":"(fn my-iterate [f n]\n  (cons n\n    (lazy-seq\n      (my-iterate f (f n)))))","user":"5aa6d44de4b0d174b936c8b2"},{"code":"(fn it [f x]\n         (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn test [f x] (cons x (lazy-seq (test f (f x)))))","problem":62,"user":"52655949e4b03e8d9a4a710b"},{"code":"(fn iter [f n] (cons n (lazy-seq (iter f (f n)))))","problem":62,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn itr8 [x n]\n    (cons n (lazy-seq (itr8 x (x n)))))","problem":62,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn new-iter [f x]\n  (cons x (lazy-seq (new-iter f (f x)))))","problem":62,"user":"511b810ce4b07ab9ec456182"},{"code":"(fn self [f x]\n  (lazy-seq (cons x (self f (f x)))))","problem":62,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn r [f init]\n           (lazy-seq\n            (cons init (r f (f init)))))","problem":62,"user":"4eb02674535d7eef30807338"},{"problem":62,"code":"(fn iter [f ini ] (cons ini (lazy-seq (iter f (f ini)) ) ) )","user":"51f81925e4b09be9c177e526"},{"problem":62,"code":"(fn fx [f x]\n  (lazy-seq (cons x (fx f (f x)))))","user":"57e4dbcbe4b0bfb2137f5ac3"},{"code":"(fn bob [f n] (cons n (lazy-seq (bob f (f n)))))","problem":62,"user":"500a0a11e4b03d00572d2d73"},{"problem":62,"code":"(fn iter [f x]\n      (lazy-seq (cons x (iter f (f x)))))","user":"5522cd9ae4b0882d96d091ab"},{"problem":62,"code":"(fn my-iterate [f init]\n  (cons init\n        (lazy-seq \n         (my-iterate f (f init)))))","user":"56a37ccee4b0542e1f8d14cb"},{"problem":62,"code":"(fn i [f x]\n  (lazy-cat [x] (i f (f x))));;i=name of the function  (i f (f x) translates to (fn #(*2 %) ( #(2*%) 1));;;; fn = i calling function with function and argument, \n;;;i just name but we need to call because of iteration;;Why we nee i f again??????????????????????/\n;;; remember movie INCEPTION;;;;;\n\n\n;;;;;;(fn -iterate;;;like starting loop recursive;;; [f value];;;;;take limits the function\n  ;;;;(let [new (f value)];;;\n    ;;(lazy-seq;;;lazy-seq limits the use of the function by delaying it. \n      ;;;(cons value (-iterate;;;;it is like reccur;;;;; f new)))));; if you remove -iterate it won't recurr and will stop witl function and function and value","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":62,"code":"(fn x [f1 p]\n         (let [la (f1 p)]\n           (lazy-seq\n            (cons p (x f1 la)))))","user":"5bed84b1e4b0a6d31fed2120"},{"problem":62,"code":"(fn myiter [f x] \n  (cons x (lazy-seq (myiter f (f x))))\n  )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn a [f start]\n  (cons start (lazy-seq (a f (f start)))))","problem":62,"user":"51e595a6e4b0efabf93c02d8"},{"code":"(fn [f x]\r\n  ((fn my-it [i]\r\n    (cons i (lazy-seq (my-it (f i))))) x))","problem":62,"user":"50acbd15e4b071b89ef26234"},{"problem":62,"code":"(fn it [ f arg]\n  ( cons arg (lazy-seq( it f ( f arg)))))","user":"516d227fe4b06f078fab252d"},{"code":"(fn ff [f x]\n  (cons x (lazy-seq (ff f (f x))))\n)","problem":62,"user":"5149c2f1e4b0829bd132edb0"},{"code":"(fn my-iterate\n  [f i]\n  (cons i (lazy-seq (my-iterate f (f i)))))","problem":62,"user":"529d292fe4b04e0c58e87b74"},{"problem":62,"code":"(fn iterate-home-made\n  [f x]\n   (lazy-seq\n    (cons x (iterate-home-made f (f x)))))","user":"5ed52854e4b016b56eae05d2"},{"code":"(fn itr [f x]\n        (cons x (lazy-seq (itr f (f x)))))","problem":62,"user":"51a8f0c6e4b08d8ec191b821"},{"code":"(fn u [f i] (cons i (lazy-seq (u f (f i)))))","problem":62,"user":"51e3a549e4b0c611d6113e47"},{"code":"(fn my-iterate [f x]\n  (lazy-cat [x] (my-iterate f (f x))))","problem":62,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn ny-iter [f s]\r\n  (lazy-seq\r\n    (cons s (ny-iter f (f s)))))","problem":62,"user":"4f07c8c3535dcb61093f6c2d"},{"problem":62,"code":"(fn iter [f init]\n      (lazy-seq (cons init (iter f (f init)))))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":62,"code":"(fn itrt [f x]\n  (lazy-seq (cons x (itrt f (f x)))))","user":"5243e37ae4b076204b44fae3"},{"problem":62,"code":"(fn f1 [f v] (lazy-seq (cons v (f1 f (f v)))))","user":"5da71eaee4b000c986472c15"},{"problem":62,"code":"(fn my-iterate\n  ([f n]\n   (lazy-seq (cons n (my-iterate f (f n))))))","user":"5e348945e4b0650de70e2b1d"},{"problem":62,"code":"(fn re-iterate[f n](\n                    cons n (lazy-seq (re-iterate f (f n)))\n                    )\n  )","user":"5cf53196e4b087f62be35a94"},{"code":"(fn iter[f init]\r\n  (\r\n  (fn seq [fun initval]\r\n    (lazy-seq\r\n        (cons initval\r\n             (seq fun (fun initval))\r\n        )\r\n    )\r\n  ) f init)\r\n)","problem":62,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":62,"code":"(fn [func init] (letfn [\n                        (runner [n] (cons n (lazy-seq (runner (func n)))))]\n                  (runner init)))","user":"552456e3e4b0882d96d091c2"},{"problem":62,"code":"(fn myit [f x]\n        (lazy-seq (cons x (myit f (f x)))))","user":"55d50a38e4b0e31453f64a80"},{"code":"(fn this-f [func init]\n    (cons init\n          (lazy-seq (this-f func (func init))))\n    )","problem":62,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn iter \n  ([f x] (cons x (lazy-seq (iter f (f x))))))","problem":62,"user":"4e6a4edd535d8ccf87e9fec4"},{"problem":62,"code":"(fn rec[func init] (lazy-seq (cons init (rec func (func init) ))))","user":"575bd5f9e4b02ea114799365"},{"problem":62,"code":"(fn my-iter [f x] \n  (lazy-seq \n   (cons x (my-iter f (f x)))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":62,"code":"(fn my-iter [f n]\n                 (letfn [(helper [n]\n                           (lazy-cat (vector (f n)) (helper (f n))))]\n                   (lazy-cat [n] (helper n))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn i [f c]\n  (cons c (lazy-seq (i f (f c)))))","problem":62,"user":"4e8a460e535d65386fec2109"},{"problem":62,"code":"(fn i[f n](lazy-seq (cons n (i f (f n)))))","user":"523630eee4b05f3be1c7c8e8"},{"code":"(fn myiterate [f x] (cons x (lazy-seq (myiterate f (f x)))))","problem":62,"user":"4ec28d86535dfed6da9c6dbc"},{"code":"#(reductions (fn [i _] (% i)) %2 (range))","problem":62,"user":"5003ee7de4b0678c553fc446"},{"problem":62,"code":"(fn reco [f x]\n  (cons x (lazy-seq (reco f (f x)))))","user":"53703287e4b0fc7073fd6e8f"},{"code":"(fn itr2 [f x]\n  (cons x (lazy-seq (itr2 f (f x)))))","problem":62,"user":"4db13ff51254ad5b4805fa68"},{"code":"(fn abc [f v] \n  (lazy-seq\n (cons v (abc f (f v)))\n   )\n)","problem":62,"user":"518aec06e4b06da86c1973c2"},{"code":"(fn [f x]\n  (map\n   (fn [n]\n     ( (apply comp (repeat n f)) x)) (range)))","problem":62,"user":"5007cdb9e4b0b17c647f5227"},{"problem":62,"code":"(fn func [f n]\n  (lazy-seq (cons n (func f (f n)))))","user":"5666c2dbe4b04acd4f672dc3"},{"code":"(fn my-iterate [f x] (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"4eab612d535d7eef30807316"},{"code":"(fn [f v]\r\n  (letfn [(g [a] (lazy-seq (cons a (g (f a)))))]\r\n    (g v)))","problem":62,"user":"4deff9f9535d08e6dec9fe15"},{"problem":62,"code":"(fn demo-iter\n  [f x]\n  (lazy-seq (cons x (demo-iter f (f x)))))","user":"5b5e7953e4b0c6492753e6d9"},{"problem":62,"code":"(fn [call-function initial-value]\n  (letfn [\n          (producer\n             [callable init]\n             ;; woohooo\n             (cons init (lazy-seq (producer callable (callable init))))\n             )\n          ]\n    (producer call-function initial-value)\n    )\n  )","user":"56ef11efe4b04a395b9a045b"},{"code":"(fn itit [f x0] (lazy-seq (cons x0 (itit f (f x0)))))","problem":62,"user":"525f51bde4b0cb4875a45dc8"},{"problem":62,"code":"(fn my-iterator [f x]\n  (cons x (lazy-seq (my-iterator f (f x)))))","user":"5e16fd78e4b0a047bd49f726"},{"code":"(fn itr2 [f v]\n   (concat [v] (lazy-seq (itr2 f (f v)))))","problem":62,"user":"4e52777f535d302ef430da76"},{"problem":62,"code":"(fn my-iterate\n [f x]\n (lazy-seq (cons x (my-iterate f (f x))))) ;; lazy recipe","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn c [a b] (cons b (lazy-seq (c a (a b)))))","problem":62,"user":"51037468e4b00c483ae17702"},{"problem":62,"code":"(fn iterate* [f x]\n  (lazy-seq (cons x (iterate* f (f x)) ))\n  )","user":"5fe1b893e4b05ac5b16ea16f"},{"code":"(fn myiter [f x]\n    (lazy-seq \n      (cons x (myiter f (f x)))))","problem":62,"user":"4e7ada51535db169f9c796ae"},{"problem":62,"code":"(fn iterate- [f v]\n  (cons v (lazy-seq (iterate- f (f v)))))","user":"55c6fd60e4b0e31453f649c9"},{"problem":62,"code":"(fn itt [f x]\n  (lazy-seq (cons x (itt f (f x)))))","user":"577829f9e4b0979f8965165a"},{"code":"(fn itur [f i]\r\n    (lazy-seq (cons i (itur f (f i)))))","problem":62,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn my-iterate [f init]\n     (lazy-seq\n       (cons init (my-iterate f (f init)))))","problem":62,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":62,"code":"(fn my-iterare[f s]\n  (lazy-seq (cons s (my-iterare f (f s)))))","user":"5a6cb2eae4b0512ff01cda57"},{"code":"(fn [func init] (cons init ((fn l [n] (lazy-seq (cons (func n) (l (func n))))) init)))","problem":62,"user":"50be9b4ae4b00fb48fed2ef6"},{"problem":62,"code":"(fn foo [func init]\n  (cons init\n        (lazy-seq (foo func (func init)))))","user":"53322cece4b019098a6f8b73"},{"problem":62,"code":"(fn __ [f x]\n\t(lazy-seq\n\t\t(cons\n\t\t\tx\n\t\t\t(__ f (f x))\n\t\t\t)\n\t\t)\n\t)","user":"575dda55e4b02ea11479938c"},{"problem":62,"code":"(fn [func v]\n            (letfn [(lazy [value]\n                      (lazy-seq (cons value (lazy (func value)))))]\n              (lazy v)\n              ))","user":"5f3f2281e4b004f08c61c561"},{"problem":62,"code":"(fn f\n  ([g i]\n   (lazy-seq\n    (cons i\n          (f g (g i))))))","user":"52e1c276e4b09f7907dd142b"},{"problem":62,"code":"; stolen solution with cons + lazy-seq: (fn it [f x] (lazy-seq (cons x (it f (f x)))))\n(fn iter [func val] (lazy-cat [val] (iter func (func val))))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":62,"code":"(fn answer [f x]\n  (lazy-seq (cons x (answer f (f x))))\n  )","user":"5e491182e4b043cd24807a46"},{"code":"(fn itr [f x]\n    (cons\n      x\n      (lazy-seq (itr f (f x)))))","problem":62,"user":"5089ebfee4b03217b26a539f"},{"code":"(fn it[f x]  \n  (cons x (lazy-seq (it f (f x)))))","problem":62,"user":"50bc4e73e4b0594b91591c3d"},{"problem":62,"code":"(fn iterar\n            ([f x] (lazy-seq (cons x (iterar f x ()))))\n            ([f x lst] (lazy-seq (cons (f x) (iterar f (f x) lst)))))","user":"5a653f80e4b0512ff01cd9b2"},{"code":"#(reductions\n        (fn [s n] (%1 s))\n        %2 \n        (repeat %2))","problem":62,"user":"4f1c9652535d64f603146483"},{"problem":62,"code":"(fn noname [f x] (cons x (lazy-seq (noname f (f x)))))","user":"51d26b0ae4b0d13b04db0d97"},{"code":"(fn f [y x] (lazy-seq (cons x (f y (y x)))))","problem":62,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":62,"code":"(fn func [f v]\n  (lazy-seq (cons v (func f (f v)))))","user":"5c62979fe4b0fca0c162264c"},{"code":"(fn [f x]\n  (map (fn [n]\n         (loop [n n\n                fx x]\n           (if (zero? n) fx\n             (recur (dec n) (f fx))))\n         )\n       (range)))","problem":62,"user":"4fa340b4e4b081705acca18c"},{"problem":62,"code":"(fn xiter [f x]\n   (lazy-seq (cons x (xiter f (f x)))))","user":"564ecc9ee4b0284900eef6a1"},{"problem":62,"code":"(fn my-iterate2\n  [f x]\n  (lazy-seq (cons x (my-iterate2 f (f x)))))","user":"557e9d17e4b05c286339e0d8"},{"problem":62,"code":"(fn it [f x]\n   (lazy-seq (cons x (it f (f x))))\n)","user":"59135c11e4b0163c97b36f02"},{"code":"(fn i [f e] (cons e (lazy-seq (i f (f e)))))","problem":62,"user":"506d5e4ce4b0a302964c5493"},{"problem":62,"code":"(fn itr [f initial]\n  (lazy-seq (cons initial\n                  (itr f (f initial)))))","user":"53e9dce1e4b036ad0777e4bc"},{"problem":62,"code":"(fn my-iterate [fun x]\n   (cons x (lazy-seq (my-iterate fun (fun x)))))","user":"569f7bc2e4b0542e1f8d1494"},{"problem":62,"code":"(fn iter [f x]\n  (cons x\n        (lazy-seq\n          (iter f (f x)))))","user":"5c7741dce4b0fca0c1622806"},{"code":"(fn fn62 [f x]\n  (lazy-seq (cons x\n                  (fn62 f (f x)))))","problem":62,"user":"5029f263e4b023940c84aa45"},{"problem":62,"code":"(fn my [f num]\n  (lazy-seq (cons num (my f (f num)))))","user":"5a1c3c11e4b0ff51aa4b323d"},{"problem":62,"code":"(fn __ [f init]\n  (lazy-seq (cons init (__ f (f init)))))","user":"5e38a9cbe4b01d43a70e8dc2"},{"problem":62,"code":"(fn it [f v]\n  (lazy-seq (cons v (it f (f v)))))","user":"5486adf7e4b0e286459a11be"},{"problem":62,"code":"(fn it- [f v] (cons v (lazy-seq (it- f (f v)))))","user":"5a353bdae4b0ddc586f153d9"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq\n    (cons x (my-iterate f, (f x)))))","user":"556405e5e4b0c656e3ff17fb"},{"problem":62,"code":"(fn it [f x] (lazy-seq\n                           (cons x\n                                 (it f (f x)))))","user":"58c4b11ae4b021aa9917ed2c"},{"code":"(fn [f x] (reductions (fn [prev _] (f prev)) x (range)))","problem":62,"user":"51a3b135e4b0e77c4ca60bf6"},{"problem":62,"code":"(fn myiterate [f z] (cons z (lazy-seq (myiterate f (f z)))))","user":"5ecc0831e4b016b56eae058c"},{"problem":62,"code":"(fn ! [f x]\n  (lazy-seq \n   (cons x \n         (! f (f x)))))","user":"59225498e4b09b4ee5954c8c"},{"problem":62,"code":"(fn my-iter [f n] (cons n (lazy-seq (my-iter f (f n)))))","user":"587ee260e4b052da650a6353"},{"code":"(fn ff [f x]\n  (cons x (lazy-seq (ff f (f x)))))","problem":62,"user":"4f73f78de4b044e54cd9a8f3"},{"problem":62,"code":"(fn f [o x] (cons x (lazy-seq (f o (o x)))))","user":"55645592e4b0c656e3ff1802"},{"problem":62,"code":"(fn itr [f x]\n    (lazy-seq (cons x (itr f (f x))))\n)","user":"5a285a38e4b07f18be40aa67"},{"problem":62,"code":"(fn ite [f n]\n  (lazy-seq (cons n (ite f (f n)))))","user":"5739cbe4e4b0cd1946bd107c"},{"problem":62,"code":"(fn my-iterate\n  [f n]\n  (cons n (lazy-seq  (my-iterate f (f n))\n                      )))","user":"55c9bc1ee4b0e31453f649f1"},{"code":"(fn [f x]\n  (cons x\n    (let [a (atom x)]\n      (repeatedly #(swap! a f)))))","problem":62,"user":"50a83315e4b054305ba5a830"},{"code":"(fn lazy-f [f x]\n  (lazy-seq (concat [x] (lazy-f f (f x)))))","problem":62,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn self [f x]\n  (cons x (lazy-seq (self f (f x)))))","problem":62,"user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn iter [f s] \r\n  (lazy-seq (list* s (lazy-seq (iter f (f s))))))","problem":62,"user":"4e0e0529535d04ed9115e7b9"},{"code":"(fn myiter [f v]\n  (lazy-seq (cons v (myiter f (f v)))))","problem":62,"user":"4f128865535d64f603146428"},{"problem":62,"code":"(fn my-iterate [f x]\n  (lazy-seq \n   (cons x (my-iterate f (f x)))))","user":"571c2babe4b07c98581c3b73"},{"problem":62,"code":"(fn it [f x]\n  (lazy-seq (cons x (it f (f x)))))\n\n#_(println \n (take 5 (\n\n(fn it [f x]\n  (lazy-seq (cons x (it f (f x)))))\n          \n          inc 0)))","user":"58b12635e4b0ebc645576cf4"},{"code":"(fn p [f n] (lazy-seq (cons n (p f (f n)))))","problem":62,"user":"4f03ba9c535dcb61093f6b58"},{"code":"#(letfn [(gen [] (lazy-cat [%2] (map %1 (gen))))] (gen))","problem":62,"user":"513a4babe4b067e25a345eca"},{"problem":62,"code":"(fn xit [f a] (lazy-seq (cons a (xit f (f a)))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"code":"(fn myfn [f x]\n  (cons x \n        (lazy-seq\n         (myfn f (f x)))))","problem":62,"user":"52f07ccee4b05e3f0be25edf"},{"problem":62,"code":"(fn iter [f i] (concat (list i)  (lazy-seq (iter f (f i)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":62,"code":"(fn iterate2\n  [f n]\n  (lazy-seq (cons n (iterate2 f (f n)))))","user":"5f6e23e6e4b02876ed9fd064"},{"problem":62,"code":"#(reductions (fn [x y] (%1 x)) %2 (repeat %2))","user":"5ddd6cfae4b0948ae9d9adc4"},{"code":"(fn x-iterate [f n]\n  (cons n (lazy-seq (x-iterate f (f n)))))","problem":62,"user":"4eca7a87535d6d7199dd3705"},{"problem":62,"code":"(fn lz [f x] (cons x (lazy-seq (lz f (f x)))))","user":"554f7ef2e4b00713264bd9a1"},{"problem":62,"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (f x)) ) ) )","user":"5414b7c4e4b01498b1a719ed"},{"code":"(fn my-iterate [f, x]\n  (cons x (lazy-seq (my-iterate f (f x)))\n  )\n)","problem":62,"user":"50e496e8e4b0cb9ec68fbca0"},{"problem":62,"code":"(fn func[f n] (cons n (lazy-seq (func f (f n)))))","user":"5461873de4b01be26fd746a3"},{"problem":62,"code":"(fn f [x, y] (cons y (lazy-seq (f x (x y)))))","user":"54a7efdee4b09f271ff37c9d"},{"code":"(fn iter [f x]\n  (lazy-seq (cons x\n                  (iter f (f x)))))","problem":62,"user":"5192dd39e4b0c663c5d86c9e"},{"code":"(fn fun [f x]\n  (lazy-seq (cons x  (fun f (f x)))))","problem":62,"user":"51da7e49e4b02ceefd947768"},{"code":"(fn this [f x]\n  (lazy-seq (cons x (this f (f x)))))","problem":62,"user":"531792d9e4b08068f379ed5e"},{"problem":62,"code":"(fn my-iterate [f v]\n  (lazy-seq\n    (cons v\n          (my-iterate f (f v)))))","user":"58fed70de4b0438e51c2cfdd"},{"problem":62,"code":"(fn funcseq [afunc val]\n  (lazy-seq (cons val (funcseq afunc (afunc val)))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":62,"code":"(fn [b a]\n    ((fn h\n       ([] (h a))\n       ([n] (lazy-seq (cons n (h (b n))))))))","user":"50d0d2dde4b00b15ecee9768"},{"code":"(fn [f a] (map \n               (fn [n x]\n                 (cond (= n 0) x\n                       (= n 1) (f x)\n                       :else (recur (dec n) (f x)))) (range) (repeat a)))","problem":62,"user":"5183f5d7e4b02826a645f393"},{"code":"(fn ! [f v] (lazy-seq (cons v (! f (f v)))))","problem":62,"user":"533ee560e4b085b17e897d98"},{"code":"(fn iterate* [f i]\n  (lazy-seq (cons i (iterate* f (f i)))))","problem":62,"user":"4daea889edd6309eace4d15b"},{"problem":62,"code":"(fn [f n]\n  (letfn [(foo [f n]\n               (lazy-seq (cons n\n                               (foo f (f n)))))]\n    (foo f n)))","user":"4f5599dfe4b0a7574ea71806"},{"problem":62,"code":"(fn my-iterate [stepper start]\n  (lazy-seq (cons start (my-iterate stepper (stepper start)))))","user":"5027f37be4b01614d1633ff1"},{"code":"(fn it [f x] \n  (lazy-seq\n      (cons x (it f (f x)))\n   )\n)","problem":62,"user":"5259a16ee4b0cb4875a45ce1"},{"problem":62,"code":"(letfn [(my-iter [f x]\n          (cons x (lazy-seq (my-iter f (f x)))))]\n  my-iter)","user":"538e36c7e4b0b51d73faae81"},{"problem":62,"code":"(fn iterate-kw\n  [f ins]\n  (loop [i (+ 1 ins) ha (vector ins)]\n    (if (= i (if (= f inc)\n      101\n      30))\n      ha\n      (recur (+ i 1) (conj ha (f (last ha)))))))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":62,"code":"(fn [f x]\n          (letfn [(iter [f x]\n                   (cons x (lazy-seq (iter f (f x)))))]\n            (iter f x)))","user":"590253e3e4b0438e51c2d055"},{"problem":62,"code":"(fn[f x]\n  ((fn iter[m] (let [fm (f m)] (cons m (lazy-seq (iter fm))))) x))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn iter [f init]\n  (lazy-seq\n    (cons init (iter f (f init)))))","problem":62,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn iter [f n]\n (lazy-seq\n   (cons n\n     (iter f (f n)))))","problem":62,"user":"50868795e4b004985b776e5e"},{"problem":62,"code":"(fn iter [f init]\n   (lazy-seq (cons init (iter f (f init)))))","user":"607a1523e4b0a637ed78036a"},{"code":"(fn lazy-counter [increment base] (lazy-seq (cons base (lazy-counter increment (increment base)))))","problem":62,"user":"513ca934e4b0b86ece9f3228"},{"code":"(fn iter\n  [f x]\n  (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"5028cd0fe4b01614d1633ffc"},{"problem":62,"code":"(fn m-i [f x] (lazy-seq (cons x (m-i f (f x)))))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"code":"(fn my-iterate [f start]\n  (cons start (lazy-seq (my-iterate f (f start)))))","problem":62,"user":"53480973e4b084c2834f4a52"},{"problem":62,"code":"(fn iterte [f x]\n  (lazy-seq (cons x (iterte f (f x)))))","user":"5169d422e4b051e2a73aba53"},{"problem":62,"code":"(fn i [f x] (->> (f x) \n                 (i f) \n                 (cons x)\n                 lazy-seq))","user":"5236cd89e4b0e010857b4e45"},{"code":"(fn f [g x]\n  (lazy-seq\n    (cons x (f g (g x)))))","problem":62,"user":"5012614ee4b02a085b99dc79"},{"problem":62,"code":"(fn my-iter [f val]\n           (cons val (lazy-seq (my-iter f (f val)))))","user":"56baab13e4b0f26550335948"},{"code":"(fn iter [f x]\r\n     (lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4f82e14be4b033992c121c0c"},{"problem":62,"code":"(fn my-fun[f x]\n  (cons x (lazy-seq (my-fun f (f x)))))","user":"5596af34e4b04c1e5c31d758"},{"code":"(fn blah [f init]\n  (cons init (lazy-seq (blah f (f init)))))","problem":62,"user":"4f17aa97535d64f603146456"},{"code":"(fn lz [f s] (cons s (lazy-seq (lz f (f s)))))","problem":62,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn foo [ f x] (cons x \n(lazy-seq  (foo  f  (f x)))))","problem":62,"user":"517945dce4b0684c1c981a43"},{"problem":62,"code":"(fn myiterate\n\t([f, x]\n\t\t(lazy-seq\n\t\t\t(cons\n\t\t\t\tx\n\t\t\t\t(myiterate f (f x))\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":62,"code":"(fn ite [f n] \n(cons n (lazy-seq (ite f (f n) ) ) ) )","user":"57c7cef5e4b05aa3c4741d0d"},{"problem":62,"code":"(fn [f x]\n   (reductions (fn [a s] (f a)) x (repeat x)))","user":"5446ebc2e4b032a45b8693b8"},{"code":"(fn iter [f init] (lazy-seq (cons init (iter f (f init)))))","problem":62,"user":"4f0e995e535d0136e6c22326"},{"problem":62,"code":"(fn itr\n    [f x]\n    (lazy-seq\n      (cons x (itr f (f x)))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":62,"code":"(fn iter2 [f x] \n  (cons x (lazy-seq (iter2 f (f x)))))","user":"533c2605e4b0e30313ee6cd7"},{"problem":62,"code":"(fn iter [func init] \n  (cons init\n    (lazy-seq\n      (iter func (func init)))))","user":"56f9b953e4b07572ad1a88b9"},{"code":"(fn g [f x] [f x] (cons x (lazy-seq (g f (f x)))))","problem":62,"user":"4f2c593ee4b0d6649770a053"},{"problem":62,"code":"(fn my-iterate [f b] (lazy-seq (cons b (my-iterate f (f b)))))","user":"5bb25684e4b0a20761a2350d"},{"code":"(fn ziterate [func n]\n  (letfn [(z [x] (lazy-seq (cons x (z (func x)))))]\n    (z n)\n  )\n)","problem":62,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn [func val]\n  (letfn [(f [fun v]\n               (lazy-seq\n   (let [v1 (apply fun (list v))]\n   (cons v (lazy-seq (f fun v1))))))]\n    \n    (f func val))\n)","problem":62,"user":"51857e64e4b0da5a5be3babe"},{"problem":62,"code":"(fn no62 [fun n] (cons n (lazy-seq (no62 fun (fun n)))))","user":"55630cc1e4b0c656e3ff17e0"},{"problem":62,"code":"(fn a [b c]\n  \t(cons c (lazy-seq (a b (b c))))\n)","user":"5710e574e4b09c608db7043b"},{"problem":62,"code":"(fn Iterator [f x]\n\t(cons x (lazy-seq (Iterator f (f x))))\n  )","user":"55efc44ee4b066087aa9453e"},{"problem":62,"code":"(fn iter\n  ([f x]\n   (concat [x] (lazy-seq (iter f (f x))))))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn foo [fun val]\n    (cons val (lazy-seq (foo fun (fun val)))))","problem":62,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn f [x y] (lazy-seq (concat [y] (f x (x y)))))","problem":62,"user":"5017f840e4b02f523d7cc5e8"},{"code":"(fn myfn [f i]\n  (cons i (lazy-seq (myfn f (f i)))))","problem":62,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":62,"code":"(fn spoti [f s] (lazy-seq (cons s (spoti f (f s)))))","user":"60882700e4b0ae75613dcedf"},{"code":"(fn my-iter [f v]\n  (cons v (lazy-seq (my-iter f (f v)))))","problem":62,"user":"537e745ae4b06839e8705ea6"},{"code":"(fn iter\n  [f x]\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"51c330a9e4b0851ac09658f2"},{"problem":62,"code":"(fn iter\n  [f x]\n  (lazy-seq\n    (cons x (iter f (f x)))))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn my-iterate \n([f x] (my-iterate f x []))\n([f x a] \n    (cons x \n        (lazy-seq\n\t\t(my-iterate f (f x))))))","problem":62,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn my-iter\n  [f x]\n  (lazy-seq\n   (cons x\n         (my-iter f (f x)))))","problem":62,"user":"50fc48dde4b0d10d794c19f6"},{"code":"(fn sg [f i] \n  (lazy-seq (cons i (sg f (f i)))))","problem":62,"user":"4ed7b617535d10e5ff6f52f3"},{"code":"(fn [f a] (reductions (fn [a e] (f a)) a (range)))","problem":62,"user":"50a4cbbee4b0344e360f3bc2"},{"code":"(fn it [f v](lazy-seq (cons v (it f (f v)))))","problem":62,"user":"4f1bb9d8535d64f60314647d"},{"problem":62,"code":"(fn myiterate [f x]\n  (cons  x (lazy-seq (myiterate f (f x))))\n  )","user":"57487084e4b009280f9f2b8c"},{"problem":62,"code":"(fn foo [f init]\n  (lazy-seq (cons init (foo f (f init)))))","user":"5cece5a2e4b0a17bb84e2bfb"},{"problem":62,"code":"(fn [f x]\n  (let [v (atom x)]\n    (repeatedly #(let [vcurr @v]\n                   (swap! v f)\n                   vcurr))))","user":"536c1531e4b0fc7073fd6e36"},{"code":"(fn it [f n] (lazy-seq (cons n (it f (f n)))))","problem":62,"user":"4fadbc3fe4b081705acca23f"},{"code":"(fn newiter[f v]\n  (cons v (lazy-seq (newiter f (f v)))))","problem":62,"user":"51f805b0e4b06ff1c25c52e2"},{"problem":62,"code":"(fn f [next-gen, x] (lazy-seq (cons x (f next-gen (next-gen x)))))","user":"56f15eade4b04a395b9a048e"},{"problem":62,"code":"(fn mynfn* [f x]\n  (cons x (lazy-seq (mynfn* f (f x)))))","user":"52ba447ee4b07a9af57922ce"},{"code":"(fn myit [f x]\n  (lazy-seq\n    (cons x (myit f (f x)))))","problem":62,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn nf [in p]\n  (cons p (lazy-seq (nf in (in p)))))","problem":62,"user":"50fe2420e4b03cd852b4e84a"},{"code":"(fn q [f v]\n  (lazy-cat [v] (q f (f v))))","problem":62,"user":"4e6dd51b535d5021c1a895f6"},{"code":"(fn iter [f x]\r\n  (lazy-seq (cons x (iter f (f x))))  \r\n  )","problem":62,"user":"4f0da4e4535d0136e6c22319"},{"problem":62,"code":"(fn i [f v0] (lazy-seq (cons v0 (i f (f v0)))))","user":"5310e968e4b08068f379ecdd"},{"code":"(letfn [(jazda [f init]\n                   (cons init\n                         (lazy-seq (jazda f (f init)))))]\n           jazda)","problem":62,"user":"4f92884de4b0dcca54ed6caf"},{"code":"(fn foo [f v]\n  (cons v (lazy-seq (map f (foo f v)))))","problem":62,"user":"5175533fe4b0dea9bbfba575"},{"problem":62,"code":"(fn _ils [f x] \n  (cons x (lazy-seq (_ils f (f x))))\n)","user":"54524afbe4b0e397800069bc"},{"code":"(fn iter [f v]\r\n  (lazy-seq\r\n    (cons v (iter f (f v)))))","problem":62,"user":"4ddbfb8a535d02782fcbea00"},{"problem":62,"code":"(fn -iterate [f x]\n  (cons x (lazy-seq (-iterate f (f x)))))","user":"55fb58b2e4b0f488688e0661"},{"problem":62,"code":"(fn foo [f s]\n  (cons s (lazy-seq (foo f (f s)))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":62,"code":"#(for [x (range) :let [y ((apply comp (repeat x %1)) %2)]] y)","user":"5751f2a2e4b02ea114799292"},{"problem":62,"code":"(fn iter [f i]\n                 (cons i (lazy-seq (iter f (f i)))))","user":"591e0782e4b09b4ee5954c25"},{"code":"(fn iter [f x](lazy-seq (cons x (iter f (f x)))))","problem":62,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":62,"code":"(fn mIt [f i] (lazy-seq (cons i (mIt f (f i)))))","user":"550e0373e4b06e50f9beb162"},{"problem":62,"code":"(fn f [func x]\n  (lazy-seq (concat [x] (f func (func x))))\n  )","user":"5b118b7be4b0cc2b61a3be34"},{"code":"(fn itr [f x]\n  (lazy-seq (cons x (itr f (f x)))))","problem":62,"user":"4de77a0a535d08e6dec9fdfa"},{"problem":62,"code":"(fn iter [f x]\n  (cons x\n        (lazy-seq (iter f\n                        (f x)))))","user":"55c4e48be4b0e31453f649a7"},{"problem":62,"code":"#(letfn [(generate [init update-fn]\n                   (lazy-seq\n                    (cons init\n                          (generate (update-fn init) update-fn))))]\n   (generate %2 %1))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn itr [op n]\n    (cons n (lazy-seq(itr op (op n))))\n)","problem":62,"user":"51d1111ce4b067c36548635f"},{"problem":62,"code":"#(map (fn [x fs]\n        (reduce (fn [a _] (%1 a)) \n          x (range fs)))\n      (repeat %2)\n      (range)\n      )","user":"54cbd97ae4b057c6fda3a283"},{"code":"(fn foo [f x]\n  (cons x\n    (lazy-seq (foo f (f x)))))","problem":62,"user":"51757af0e4b085adf681d873"},{"code":"(fn iter [f p] \n  (cons p (lazy-seq (iter f (f p)))))","problem":62,"user":"529dfc6de4b04e0c58e87b8a"},{"problem":62,"code":"(fn itanx [f start] (cons start (lazy-seq (itanx f (f start)))))","user":"5ea97df7e4b00a66d4a951c8"},{"code":"(fn it [fun x]\n  (cons\n    x\n    (lazy-seq (it fun (fun x)))))","problem":62,"user":"50657775e4b0deb876850599"},{"code":"(fn my-iter [func init]\n  (cons init (lazy-seq (my-iter func (func init)))))","problem":62,"user":"523f1245e4b01c266ffa7f95"},{"problem":62,"code":"(fn iter[n s]\n  (cons s(lazy-seq\n          (iter n\n                (n s)))))","user":"6085edade4b0736b099e42fc"},{"problem":62,"code":"(fn ax [f a]\n            (lazy-seq (cons a (ax f (f a)))))","user":"567b2f20e4b05957ce8c61a2"},{"problem":62,"code":"(fn f [func x]\n  (cons x (lazy-seq (f func (func x)))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"code":"(fn lseq [f n]\n  (lazy-seq (cons n (lseq f (f n)))))","problem":62,"user":"4ff5744ae4b0678c553fc36a"},{"problem":62,"code":"(fn myiter [f v]\n        (lazy-seq (cons v (myiter f (f v)))))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn fn2[f x]\n  (cons x (lazy-seq (fn2 f (f x)))))","problem":62,"user":"500b61b1e4b03d00572d2d81"},{"problem":62,"code":"(fn iter [f x]\n  (cons x (lazy-seq\n           (iter f (f x)))))","user":"5532a04ee4b09218d5f44f82"},{"problem":62,"code":"(fn f [x v] (cons v (lazy-seq (f x (x v)))))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":62,"code":"(fn fun [f x]\n  (lazy-seq (cons x (fun f (apply f [x])))))","user":"5caf9cace4b026601754b89b"},{"code":"(fn i [f v]\n  (lazy-seq (cons v (i f (f v)))))","problem":62,"user":"4e6a4950535d8ccf87e9febf"},{"code":"#(letfn[(itr[f x]\n            (cons x (lazy-seq (itr f (f x)))))]\n   (itr %1 %2))","problem":62,"user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn a [f v]\n  (cons v (lazy-seq (a f (f v)))))","problem":62,"user":"51899891e4b0288ada3dbdab"},{"problem":62,"code":"(fn [f x]\n  (letfn [(helper [x']\n            (let [newx (f x')]\n            (lazy-seq (cons newx (helper newx)))))]\n    (lazy-seq (cons x (helper x)))))","user":"5e9c11f8e4b0157ca96647f6"},{"code":"(fn iter [f x] (lazy-seq  (cons x (iter f (f x)))))","problem":62,"user":"4e1047ad535d04ed9115e7bf"},{"code":"(fn sixty-two\n  [f n]\n  (cons n\n        (lazy-seq (sixty-two f (f n)))))","problem":62,"user":"510591dde4b06d28cacc92eb"},{"code":"(fn it* [f x]\n  (cons x (lazy-seq (it* f (f x)))))","problem":62,"user":"4ef0f1a1535dced4c769f212"},{"code":"(fn my-iter [func initial] (lazy-seq (cons initial (my-iter func (func initial)))))","problem":62,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":62,"code":"(fn it ([fnc init] (cons init (lazy-seq(it fnc (fnc init))))))","user":"566a3a26e4b0a866af689699"},{"problem":62,"code":"(fn iter [fun init] (lazy-seq\n    (cons init (iter fun (fun init)))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":62,"code":"(fn it [f init] (cons init (lazy-seq (it f (f init)))))","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn i [f v](lazy-seq (cons v (i f (f v)))))","problem":62,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":62,"code":"(fn MI [f x]\n  (lazy-seq (concat (list x) (MI f (f x)))))","user":"53ca23e3e4b00fb29b2212c6"},{"problem":62,"code":"(fn my-iterate\n  [f init]\n  (map #(loop [ite %\n               result init]\n          (if (= 0 ite)\n            result\n            (recur (dec ite) (f result)))) (range)))","user":"5a4d656fe4b05d388ecb6ba9"},{"code":"(fn \n  iterate2 [func a]\n  (cons a (lazy-seq(iterate2 func (func a)))))","problem":62,"user":"53862316e4b06839e8705f0e"},{"code":"(fn z [f v] (lazy-seq (cons v (z f (f v)))))","problem":62,"user":"500ec210e4b00fff93030f9d"},{"code":"(fn -iterate [the-fn the-value]\n           (let [result (the-fn the-value)] (cons the-value (lazy-seq (-iterate the-fn result)) )))","problem":62,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":62,"code":"(fn iterate' [f i]\n (cons i (lazy-seq (iterate' f (f i)))))","user":"54ca9ca8e4b057c6fda3a265"},{"code":"(fn my-iterate [f init-val]\r\n  (cons init-val (lazy-seq (my-iterate f (f init-val)))))","problem":62,"user":"4fe54ee8e4b0e8f79898fec3"},{"code":"(fn[g,init](reductions (fn[acc,e](g acc)) init (range) ))","problem":62,"user":"4ec75829535d6d7199dd36e1"},{"problem":62,"code":"(fn my-iterate [f val]\n  (cons val (lazy-seq (my-iterate f (f val)))))","user":"53ac4719e4b047364c04445c"},{"code":"(fn my-iterate [f x] (lazy-seq (cons x (my-iterate f (f x)))))","problem":62,"user":"5002b6e5e4b0678c553fc42c"},{"problem":62,"code":"(fn my-iterate [f x]\n        (cons x (lazy-seq (my-iterate f (f x)))))","user":"5f82cfcce4b0c071e6c840fb"},{"code":"(fn iteratex [f n] \n         (cons n (lazy-seq (iteratex f (f n)))))","problem":62,"user":"5114ab7be4b0ce5098ee73b5"},{"problem":62,"code":"(fn [f x]\n  (let [rw (fn rr [i prev] (cond (> i 0) (rr (dec i) (f prev)) \n                                           :else prev))]\n    (map #(rw % x) (range))\n    )\n)","user":"5f419985e4b0955706451fab"},{"code":"(fn it [f x]\n    (lazy-seq\n      (cons x (it f (f x)))))","problem":62,"user":"4e1b2cd9535d04ed9115e7fd"},{"problem":62,"code":"(fn myiter [f n] \n  (lazy-seq (cons n (myiter f (f n)))))","user":"598085e6e4b021a7a535fdd3"},{"problem":62,"code":"(fn foo [op start] (lazy-seq (cons start (foo op (op start)))))","user":"4ea03f70535d7eef308072a1"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x))))\n  )","user":"57cd7498e4b0c746388ab897"},{"code":"(fn iter [f x]\n  (lazy-seq\n   (cons x\n         (iter f (f x)))))","problem":62,"user":"4ffc10aae4b0678c553fc3d6"},{"problem":62,"code":"(fn ite [func x]\n  (cons x (lazy-seq (ite func (func x) ) ) )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"problem":62,"code":"(fn iter [func n]\n  (cons n\n    (lazy-seq\n      (iter func (func n)))))","user":"5c7dad57e4b0d597f478caba"},{"problem":62,"code":"(fn iter\n  [f init]\n  (cons init (lazy-seq (iter f (f init)))))","user":"5576fee3e4b05c286339e078"},{"code":"(fn fip [f a]\n  (lazy-seq\n    (cons a (fip f (f a)))\n  )\n)","problem":62,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":62,"code":"(fn it ([f n] (cons n (lazy-seq (it f (f n))))))","user":"53e4b5a3e4b036ad0777e44b"},{"code":"(fn iter\n    ([f n] (lazy-seq (cons n (iter f (f n))))))","problem":62,"user":"50127fbfe4b030d97e4db70f"},{"problem":62,"code":"(fn myiterate [f init] (cons init (lazy-seq (myiterate f (f init)))))","user":"5a778224e4b013a48d399761"},{"code":"(fn i [f x] (lazy-cat [x] (i f (f x))))","problem":62,"user":"4e72ac47535d5021c1a89666"},{"problem":62,"code":"(fn myit [myfn initial]\n    ((fn iter \n        ([] (iter initial))\n        ([x] (lazy-seq (cons x (iter (myfn x))))))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":62,"code":"(fn my_iterate [func state]\n  (lazy-seq (cons state (my_iterate func (func state)))))","user":"588f500ae4b00487982d51a4"},{"code":"#(letfn [(iter [f x]\n  (lazy-seq (cons x (iter f (f x)))))]\n\t(iter %1 %2))","problem":62,"user":"4ef5c7ce535dced4c769f248"},{"problem":62,"code":"(fn lazy\n  [f elem]\n  (cons elem\n        (lazy-seq (lazy f (f elem)))))","user":"5f0b8243e4b0f30dddfb5d45"},{"code":"(fn pr62 [f cur]\n\t(lazy-seq\n\t (cons cur (pr62 f (f cur)))))","problem":62,"user":"5142ea50e4b0c172af7558ca"},{"problem":62,"code":"(fn tf [f a] (lazy-seq (cons a (tf f (f a)))))","user":"5ab23a78e4b073f1774425e1"},{"code":"(fn  iter [f x] (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"52160dbee4b0bf4bffd29cb3"},{"problem":62,"code":"(fn re-iter [f x] (lazy-seq (cons x (re-iter f (f x)))))","user":"56912f93e4b0dcc4269f40ef"},{"code":"(fn foo [f init-value]                                                  \n            (lazy-seq                                                           \n              (cons init-value (foo f (f init-value)))))","problem":62,"user":"4eed6b32535d93acb0a668bc"},{"code":"(fn ite [f n]\n  (lazy-seq (cons n (ite f (f n)))) )","problem":62,"user":"519b7d76e4b02a926d9a436e"},{"problem":62,"code":"(fn myf [f i]\n  (lazy-seq  (cons i (myf f (f i)) )))","user":"54f73502e4b01ecee9d88817"},{"problem":62,"code":"(fn fake-iteration [f n] (cons n (lazy-seq (fake-iteration f (f n)))))","user":"5eff339ae4b0cf489e8d7f0c"},{"problem":62,"code":"(fn it [f i] (lazy-seq (when true (cons i (it f (f i))))))","user":"5632e850e4b0bfe05bf117ac"},{"code":"(fn my-iterate [f x]\n  (cons x (lazy-seq (my-iterate f (apply f [x])))))","problem":62,"user":"514721c6e4b0d520409ed392"},{"problem":62,"code":"(fn[f x](\n                    map-indexed\n                    (fn[idx itm](\n                                  loop[iter 0 ex x](\n\t                                  if(= iter idx) ex\n\t                                  (recur (inc iter) (f ex))\n                                  )\n                                 ))\n                    (range)\n                    ))","user":"56039843e4b04bb52996e1be"},{"problem":62,"code":"(fn i [f x]\n\t(cons x\n\t\t(lazy-seq \n\t\t\t(i f (f x)))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":62,"code":"(fn -iterate [f x]\n  (lazy-cat [x] (-iterate f (f x))))","user":"5ffc18cae4b074f607df65f1"},{"code":"(fn m [x y]\n  (cons y (lazy-seq (m x (x y)))))","problem":62,"user":"4e2164ff535d04ed9115e815"},{"problem":62,"code":"(fn i [f, v] (lazy-seq (cons v (i f (f v)))))","user":"56a38a4ce4b0542e1f8d14cc"},{"problem":62,"code":"(fn ittwo\n  [f init] (lazy-seq (cons init (ittwo f (f init)))))","user":"5e9636fee4b0fbed045a3816"},{"problem":62,"code":"(fn iter [func arg]\n  (lazy-seq\n   (cons arg\n         (iter func (func arg)))))","user":"587f8393e4b0f1effa3b75f2"},{"code":"(fn pow [f x] (cons x (lazy-seq (pow f (f x)))))","problem":62,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":62,"code":"(fn r [f a](lazy-seq(cons a(r f (f a)))))","user":"57752a2de4b0979f89651613"},{"code":"(fn my_iterate [f x]\n  (cons x (lazy-seq (my_iterate f (f x)))))","problem":62,"user":"51b86a0fe4b09e0e347b2e78"},{"code":"(fn forever [f i]\n  (cons i (lazy-seq (forever f (f i)))))","problem":62,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":62,"code":"(fn [f x]\n  (map\n\t#(reduce (fn [r _] (f r)) x (range 0 %))\n    (range)))","user":"5654d0e1e4b0f9d632dd848c"},{"code":"(fn rec [f x] \n  (lazy-seq\n    (cons x (rec f (f x)))))","problem":62,"user":"4f017593535dcb61093f6a36"},{"problem":62,"code":"(fn reiterate [f start]\n  (lazy-seq (cons start (reiterate f (f start)))))","user":"5b500215e4b02d533a91bce2"},{"code":"(fn [f i]\n   (letfn [(ff [x] (cons x (lazy-seq (ff (f x)))))] (ff i)))","problem":62,"user":"50a5f72fe4b0aa96157e2611"},{"problem":62,"code":"#(loop [i %2 x []] (if (> (count x) 100) x (recur (if (> i 101) i (% i))(conj x i))))","user":"55c3f19de4b0e31453f64991"},{"problem":62,"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (apply f [x])))))","user":"5530b827e4b076ab5578f818"},{"problem":62,"code":"(fn iter [sq strt] (lazy-seq (cons strt (iter sq (sq strt)))))","user":"58186016e4b0c0e9c07b83ad"},{"code":"(fn blah[f x] (cons x (lazy-seq (blah f (f x)))))","problem":62,"user":"503539dee4b0ed9c821488f6"},{"problem":62,"code":"(fn\n  [f x]\n  (let [r (atom x)]\n      (cons x (repeatedly #(swap! r f)))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn my-iterate [f x]\r\n  (lazy-seq\r\n    (cons\r\n      x\r\n      (my-iterate f (f x)))))","problem":62,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn a\n  [f v]\n  (cons v (lazy-seq (a f (f v)))))","problem":62,"user":"5159849ce4b0394f658fe236"},{"code":"(fn my-iterate\n  [f v]\n  (let [nv (f v)]\n    (lazy-seq\n     (cons v (my-iterate f nv)))))","problem":62,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":62,"code":"(fn iteratee [f v] (lazy-seq (cons v (iteratee f (f v)))))","user":"567476bde4b05957ce8c6139"},{"problem":62,"code":"(fn [fun init]\n  ((fn impl\n     ([] (impl init))\n     ([n] (lazy-seq (cons n (impl (fun n))))))))","user":"5d84545ee4b0915913b1d38b"},{"problem":62,"code":"(fn myiterate\n  [f start-val]\n  (cons start-val (lazy-seq\n                    (myiterate\n                      f (f start-val)))))","user":"590b3aeae4b047aa04b199d0"},{"problem":62,"code":"(fn my-iterate[op start]\n  (cons start (lazy-seq (my-iterate op (op start)))))","user":"53dd37aee4b0d874e779ae28"},{"problem":62,"code":"(fn fero [f st]\n  (lazy-seq (cons st (fero f (f st)))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":62,"code":"(fn iter-impl [f arg] \n  (lazy-seq (cons arg (iter-impl f (f arg)))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":62,"code":"(fn iter [f n]\n  (cons n \n    (lazy-seq (iter f (f n)))))","user":"56be8649e4b0f26550335983"},{"problem":62,"code":"(fn it[f n]\n   (lazy-seq (concat [n] (it f (f n)))))","user":"5978305be4b01722bebd4d03"},{"code":"(fn it [f init]\n  (cons init \n        (lazy-seq \n              (it f \n                  (f init)))))","problem":62,"user":"52b02329e4b0c58976d9acc5"},{"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (f x)))))","problem":62,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn f [g x]\n  (cons x (lazy-seq (f g (g x)))))","problem":62,"user":"504ffb8fe4b0a02f9cffdeae"},{"problem":62,"code":"(fn my-iterate\n  [f x]\n  (cons x \n        (lazy-seq (my-iterate f (f x)))))","user":"57fedf07e4b0d3187e9009dc"},{"code":"(fn r[f v](lazy-seq(cons v(r f(f v)))))","problem":62,"user":"4eb2eae5535d7eef30807351"},{"problem":62,"code":"(fn it\n  [f init]\n  (cons init\n    (lazy-seq\n      (it f (f init)))))","user":"5a9f005be4b0d174b936c810"},{"code":"(fn itr [f x]\n  (cons x\n    (lazy-seq (itr f (f x)))))","problem":62,"user":"50bd6033e4b0594b91591c66"},{"problem":62,"code":"(fn [f x]\n  (reductions (fn [x _] (f x)) x (range)))","user":"5d929ceae4b0915913b1d412"},{"problem":62,"code":"(fn it[f a]\n  (cons a (lazy-seq (it f (f a))))\n  \n  )","user":"54bbba99e4b0ed20f4ff6ec2"},{"problem":62,"code":"(fn iter [fx x] (lazy-seq (cons x (iter fx (fx x)))))","user":"5e8ce2fee4b0cb0169546328"},{"problem":62,"code":"(fn miterate [f x0]\n  (lazy-seq\n   (cons x0 (miterate f (f x0)))))","user":"5f2c94b4e4b033932238a669"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq (cons x (iter f (f x))  )))","user":"579601c8e4b0e215f87e8492"},{"code":"(fn [f i] (cons i (map #((apply comp (repeat (inc %) f)) i) (range))))","problem":62,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn iter-ate [f x]\n  (cons x (lazy-seq (iter-ate f (f x))))) ; after reading the docs for iterate","problem":62,"user":"51823a97e4b0f2adb733651e"},{"problem":62,"code":"(fn  my-iterate [f init]\n  (cons init (lazy-seq (my-iterate f (f init)))))","user":"5524120fe4b0882d96d091b7"},{"problem":62,"code":"(fn itr [f v]\n  (cons v (lazy-seq (itr f (f v)))))","user":"553dd883e4b0a04f792994e6"},{"code":"(fn itr [f i] (cons i (lazy-seq (itr f (f i)))))","problem":62,"user":"50cf2267e4b0e61f11ddcd8c"},{"code":"(letfn [(myiterate [f x]\r\n  (lazy-seq\r\n    (cons x (myiterate f (f x)))))]\r\n  myiterate\r\n)","problem":62,"user":"4df3d4f4535d08e6dec9fe2c"},{"problem":62,"code":"(fn fib [a b] (cons b (lazy-seq (fib a (a b)))))","user":"57ef793de4b0bfb2137f5bd8"},{"problem":62,"code":"(fn lazy-it [f x]\n  (lazy-seq (cons x (lazy-it f (f x)))))","user":"56bfcba1e4b060a8e693e3a1"},{"code":"(fn myIterate [f i] (cons i (lazy-seq (myIterate f (f i)))))","problem":62,"user":"50ef311fe4b0a78662fa2651"},{"problem":62,"code":"(fn g [f v] (cons v (lazy-seq (g f (f v)))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn self [f x] (cons x (lazy-seq (self f (f x)))))","problem":62,"user":"504e397ee4b0f6ff3350c485"},{"code":"(fn it [f s] \n              (lazy-seq\n                (cons s (it f (f s)))))","problem":62,"user":"4e6a11ee535d8ccf87e9fe9f"},{"code":"(fn [f x]\r\n  (let [iter (fn iter [y]\r\n                (let [z (f y)]\r\n                   (lazy-seq (cons z (iter z)))))]\r\n    (cons x (lazy-seq (iter x)))))","problem":62,"user":"4e8681b7535dae1a5effa438"},{"problem":62,"code":"(fn re-implementIterate [f x]\n    (lazy-seq (cons x (re-implementIterate f (f x)))))","user":"5e996e76e4b0157ca96647e4"},{"problem":62,"code":"(fn my-iterate [func x]\n  (cons x\n        (lazy-seq\n         (my-iterate func (func x)))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":62,"code":"(fn my-iterate\n    [f x]\n    (lazy-seq\n        (cons x (my-iterate f (f x)))))","user":"587bead1e4b01531a375eb0d"},{"code":"(fn intera [f x]\n  (cons x (lazy-seq (intera f (f x)))))","problem":62,"user":"5003deb9e4b0678c553fc445"},{"code":"(fn x-iterate [f x]\n  (lazy-seq (cons x (x-iterate f (f x)))))","problem":62,"user":"4ec70f26535d6d7199dd36dd"},{"problem":62,"code":"(fn rec [f n] (lazy-seq (cons n (rec f (f n)))))","user":"5485b402e4b0e286459a11b0"},{"code":"(fn iter\n  ([f x] (lazy-seq (cons x (iter f (f x))))))","problem":62,"user":"52570aeae4b0541d1855ba42"},{"problem":62,"code":"(fn jiterate [f x]\n  (lazy-cat [x] (map f (jiterate f x))))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":62,"code":"(fn veca [a b]\n  (cons b (lazy-seq (veca a (a b)))))","user":"5b7292b3e4b047b03b2036a4"},{"code":"(fn it [f i]\r\n  (cons i (lazy-seq (it f (f i)))))","problem":62,"user":"4facff22e4b081705acca230"},{"code":"(fn newiterate [f x]\n     (lazy-seq (cons x (newiterate f (f x)))))","problem":62,"user":"532727bae4b09d4e7a9b54fa"},{"problem":62,"code":"(fn iter\n  [f v]\n  (lazy-seq (cons v (iter f (f v)))))","user":"5c05cae7e4b0bdcf453d16a3"},{"problem":62,"code":"(fn my-iterate\n  [f input]\n  (lazy-seq (cons input (my-iterate f (f input)))))","user":"57596ba7e4b02ea11479931a"},{"code":"(fn iter [f  n]\n  (lazy-seq\n    (cons  n (iter f (f n)))))","problem":62,"user":"5101192ae4b0bef64c30e266"},{"code":"(fn iter [f v]\r\n  (cons v\r\n    (lazy-seq\r\n      (iter f (f v)))))","problem":62,"user":"4ff201d7e4b0678c553fc330"},{"code":"(fn ff [f x] (cons x (lazy-seq (ff f (f x)))))","problem":62,"user":"4e7f4147535db966e863cc3d"},{"problem":62,"code":"(fn go [f x]\n  (cons x (lazy-seq (go f (f x)))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn my-lz [f lv]\n    (lazy-seq\n      (let [nv (f lv)]\n        (cons lv (my-lz f nv)))))","problem":62,"user":"5063fe48e4b075d771da6f9e"},{"problem":62,"code":"(fn m \n  [f x]\n  (lazy-seq (cons x (m f (f x))) ))","user":"5772ddb0e4b0979f896515d4"},{"problem":62,"code":"(fn iterate2\n  [f n]\n  (cons n (lazy-seq (iterate2 f (f n)))))","user":"542d2385e4b0dad94371f2b2"},{"code":"(fn iter [f i]\n  (lazy-seq\n    (cons i (iter f (f i)))))","problem":62,"user":"4ee82ce9535d93acb0a6687a"},{"code":"(fn self[f n]\r\n (cons n (lazy-seq (self f (f n))))\r\n)","problem":62,"user":"4dc7f472535d8a4b2fd74293"},{"problem":62,"code":"(fn self [func start-val] (lazy-seq (cons start-val (self func (func start-val)))))","user":"5f309144e4b0574c87022c23"},{"problem":62,"code":"(fn [func init]\n  ((fn f [x]\n     (lazy-seq\n      (cons x (f (func x)))))\n   init))","user":"60486e8ae4b02d28681c77db"},{"problem":62,"code":"(fn mit [f init]\n  (lazy-seq (cons init (mit f (f init)))))","user":"58a6806ee4b01a0c0b23292f"},{"code":"(fn bodacious [f v]\n  (lazy-seq\n    (cons v (bodacious f (f v)))))","problem":62,"user":"4e47f4f3535dc968683fc4bb"},{"code":"(fn a [f initial]\n   (lazy-seq (cons initial (a f (f initial)))))","problem":62,"user":"52fb903ee4b047fd5583700b"},{"problem":62,"code":"(fn [f x] \n  (reductions\n    (fn [acc it] (f acc)) \n    x\n    (range)\n  )\n)","user":"5cbdc591e4b026601754ba00"},{"code":"(fn myiterate [f x]\n  (cons x (lazy-seq (myiterate f (f x)))))","problem":62,"user":"520693e1e4b0bf4f1882c829"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq \n    (cons x (iter f (f x)))))","user":"5821b018e4b04b46fc4b0f80"},{"problem":62,"code":"(fn my-iterate [func x]\n  (lazy-seq (cons x (my-iterate func (func x))))\n  )","user":"5776558ee4b0979f89651633"},{"problem":62,"code":"(fn [fnc src]\n      (map-indexed\n       (fn [idx val]\n         (loop [cnt idx ret val]\n           (if (> cnt 0) (recur (dec cnt)  (fnc ret)) ret)))\n       (repeat src)))","user":"52457931e4b08ba239308107"},{"code":"(fn my-iterate\n  [f i]\n  (cons i\n        (lazy-seq (my-iterate f (f i)))))","problem":62,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn itr [f x]\n           (cons x (lazy-seq (itr f (f x))))\n           )","problem":62,"user":"53489329e4b084c2834f4a5b"},{"problem":62,"code":"(fn iterate1 [f x]\n  (lazy-seq\n   (cons x (map f (iterate1 f x)))))","user":"60460824e4b02d28681c77bc"},{"problem":62,"code":"(fn ex62\n  [f x]\n  (cons x (lazy-seq (ex62 f (f x)))))","user":"532bce35e4b09d4e7a9b5536"},{"problem":62,"code":"(fn t62 [f value]\n\t(cons value (lazy-seq (t62 f (f value))))\n)","user":"5559b443e4b0deb715856e3c"},{"problem":62,"code":"(fn [pf px]\n  (let [iter (fn [fi f x] (lazy-seq (cons x (fi fi f (f x)))))]\n    (iter iter pf px)))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn miterate [f p]\n  (lazy-seq (cons p (miterate f (f p))))\n)","problem":62,"user":"4e8b73e4535d65386fec2120"},{"problem":62,"code":"(fn my-iter [f n]\n  (lazy-seq (cons  n (my-iter f (f n)))))","user":"57fc08d8e4b0d3187e900988"},{"problem":62,"code":"(fn rep\n  [f n]\n  (cons n (lazy-seq (rep f (f n)))))","user":"5ed15e23e4b016b56eae05ba"},{"code":"(new clojure.core$iterate)","problem":62,"user":"4e3b6bff535deb9a81d77f52"},{"problem":62,"code":"(fn [f x]\n  ((fn aux [x]\n     (->> x\n          aux\n          (map f)\n          (cons x)\n          lazy-seq))\n   x))","user":"53e543efe4b036ad0777e457"},{"problem":62,"code":"(fn iter [f init]\n           (cons init (lazy-seq (iter f (f init)))))","user":"5c3f37fce4b08cd430848e91"},{"problem":62,"code":"(fn iteratex [func coll]\n    (lazy-seq\n      (cons coll (iteratex func (func coll)))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn itr\n         [f v]\n         (cons v\n               (lazy-seq (itr f (f v)))))","problem":62,"user":"4e5914e0535d8a8b8723a29b"},{"code":"(fn scanl [f x] (lazy-seq (cons x (scanl f (f x)))))","problem":62,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":62,"code":"(fn [f x]\n  ((fn s\n     ([] (s x))\n     ([x] (lazy-seq (cons x (s (f x))))))))","user":"589f37e0e4b02bd94d917e79"},{"code":"(fn it [f x]\n  (lazy-seq\n    (cons x (it f (f x)))\n  )\n)","problem":62,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":62,"code":"(fn iter [f init] (lazy-seq (cons init (iter f (f init))) ) )","user":"54e51c7be4b024c67c0cf7f7"},{"problem":62,"code":"(fn iter [f initial]\n  (lazy-seq (cons initial (iter f (f initial)))))","user":"589037b4e4b00487982d51d0"},{"code":"(fn iter [f i]\n      (lazy-seq\n       (cons i (iter f (f i)))))","problem":62,"user":"5029fccee4b023940c84aa47"},{"code":"(fn my-iterate [func value]\n  (lazy-seq\n    (cons value (my-iterate func (func value)))))","problem":62,"user":"53713ebee4b0fc7073fd6ead"},{"problem":62,"code":"(fn lazy-inc [f a] (lazy-seq (cons a (lazy-inc f (f a)))))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":62,"code":"(fn f [g v] (cons v (lazy-seq (f g (g v)))))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":62,"code":"(fn iterate- [f args] (cons args (lazy-seq(iterate- f (f args)))))","user":"5b337ff4e4b025bcb146f339"},{"problem":62,"code":"(fn iterate2 ([f x] (cons x (lazy-seq (iterate2 f (f x))))))","user":"52824143e4b0757a1b171453"},{"code":"(fn myit [f x] (lazy-cat [x] (myit f (f x))))","problem":62,"user":"536b2048e4b0243289761eb7"},{"code":"(fn it [f el]\n  (cons el (lazy-seq (it f (f el)))))","problem":62,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":62,"code":"#(for [x (range)]\n     ((apply comp (repeat x %1)) %2))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":62,"code":"(fn [f x]\n  (map\n    (fn p [i]\n      (if (= i 0)\n        x\n        (f (p (dec i)))))\n   (range)))","user":"5ab1665de4b073f1774425c0"},{"code":"(fn itr8 [f x]\n  (lazy-seq (cons x (itr8 f (f x)))))","problem":62,"user":"4fda016ae4b05e33b9224f42"},{"problem":62,"code":"(fn my-iterate [fun arg]\n  (cons arg\n        (lazy-seq (my-iterate fun (fun arg)))))","user":"56bf4ac0e4b0f26550335985"},{"code":"(fn re [f n]\n  (cons n (lazy-seq (re f (f n)))) \n  \n)","problem":62,"user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn my-iterate [f x] \n  (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"51622fb8e4b009fba0926e3f"},{"problem":62,"code":"(fn [f x]\n  (for [cnt (range)] \n    (if (= cnt 0) \n      x \n      (loop [acc x cnt cnt] \n        (if (= cnt 0) \n          acc \n          (recur (f acc) (dec cnt)))))))\n\n;(fn it [f x]\n;  (lazy-seq (cons x (it f (f x)))))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn it [function, start]\n  (cons start (lazy-seq (it function (function start)))))","problem":62,"user":"520f46f9e4b0101e4be6fcee"},{"code":"(fn iterate_ [f x]\n  (lazy-seq\n    (cons x\n      (iterate_ f (f x)))))","problem":62,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn q [f n]\r\n  (cons n (lazy-seq (q f (f n)))))","problem":62,"user":"4df1ce44535d08e6dec9fe1f"},{"code":"(fn i [f x]\n  (lazy-seq\n    (concat [x] (i f (f x)))))","problem":62,"user":"50ad7888e4b0a40c9cfb08c7"},{"problem":62,"code":"(fn iter* [func val]\n  (lazy-seq (cons val (iter* func (func val)))))","user":"5713c575e4b07c98581c3aab"},{"problem":62,"code":"(fn r\n  [f x] (cons x (lazy-seq (r f (f x))))\n)","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":62,"code":"(fn my-f [f x]\n  (lazy-seq\n    (cons x (my-f f (f x)))))","user":"51553ea7e4b06c5f6a1490a2"},{"problem":62,"code":"(fn re-iterate\n  [f x]\n  \n  (cons x (lazy-seq (re-iterate f (f x)))))","user":"5a99ae99e4b0d174b936c7a4"},{"code":"(fn rec [f i]\n  (cons i (lazy-seq (rec f (f i)))))","problem":62,"user":"4fcc103fe4b0ee37620e185f"},{"problem":62,"code":"#(reductions (fn [a v] (% a)) %2 (range))","user":"58b86162e4b0ebc645576d97"},{"code":"(fn ! [f x]\n  (cons x\n        (lazy-seq (! f (f x)))))","problem":62,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":62,"code":"(fn iter [f initial]\n  (cons \n    initial\n    (lazy-seq\n      (iter f (f initial)))))","user":"55842c7ee4b05c286339e11d"},{"problem":62,"code":"(fn [f i] (reductions (fn [r dum] (f r)) i (range)))","user":"54d2b411e4b0e8a36923e5f9"},{"problem":62,"code":"(fn myiterate [f x]\n  (lazy-seq (cons x (map f (myiterate f x)))))","user":"518ba795e4b0f028e99addf0"},{"code":"(fn maker [f s] (cons s (lazy-seq (maker f (f s)))))","problem":62,"user":"4f57a153e4b0a7574ea7183a"},{"problem":62,"code":"(fn iter\n  [f st]\n  (lazy-seq\n    (cons st (iter f (f st)))))","user":"57f81534e4b0d3187e900915"},{"code":"(fn iter [f v]\n  (lazy-seq\n    (cons v (iter f (f v)))))","problem":62,"user":"4e8338d6535db62dc21a62d3"},{"problem":62,"code":"(fn g [f x] (cons x (cons (f x) (lazy-seq (g f (f (f x)))))))","user":"54e4edcae4b024c67c0cf7f3"},{"code":"(fn lazy-apply [f v]\n  (lazy-seq (cons v (lazy-apply f (f v)))))","problem":62,"user":"50b64b55e4b0a86f8358ca6b"},{"code":"(fn iter [f x] (lazy-cat [x] (iter f (f x) ) ) )","problem":62,"user":"514dbd08e4b019235f6c058d"},{"code":"(fn iter [x y] (cons y (lazy-seq (iter x (x y)))))","problem":62,"user":"4f32135ae4b0d6649770a08e"},{"problem":62,"code":"(fn iter-seq\n  [f x]\n  (lazy-seq (cons x (iter-seq f (f x)))))","user":"58152157e4b0f478707a0631"},{"problem":62,"code":"(fn iterate2 [f x]\n  (cons x (lazy-seq (iterate2 f (f x)) )))","user":"5360f043e4b0243289761e3c"},{"code":"(fn lazy [f x] (lazy-seq (cons x (lazy f (f x)))))","problem":62,"user":"4ef77edb535dced4c769f254"},{"problem":62,"code":"(fn itr [f v] \n           (lazy-seq \n             (concat  (list v) (itr f (f v)))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":62,"code":"(fn iter[op x] \n  (lazy-seq \n   (cons x (iter op (op x)))))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":62,"code":"(fn iter [func init] (cons init (lazy-seq (iter func (func init)))))","user":"58950f29e4b00487982d5270"},{"problem":62,"code":"(fn interate [f x]\n  (lazy-seq\n   (cons  x (interate f (f x)))))","user":"5e9154c1e4b0cb0169546354"},{"problem":62,"code":"(fn my-iterate\n  [f init]\n  (lazy-seq\n   (cons init (my-iterate f (f init)))))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn afn [f x] (cons x (lazy-seq (afn f (f x)))))","problem":62,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn f [g x]\n  (lazy-seq (cons x\n        (f g (g x)))))","problem":62,"user":"51256b40e4b05d10e3e395f8"},{"code":"(fn fib [f a] (cons a (lazy-seq (fib f (f a)))))","problem":62,"user":"526fce6fe4b03e8d9a4a7383"},{"problem":62,"code":"(fn my-iterate [func init]\n  (lazy-seq\n   (cons init (my-iterate func (func init)))))","user":"57a4fa50e4b0a966079561f1"},{"problem":62,"code":"(fn it [f x]\n  (reductions (fn [a _] (f a)) x (range)))","user":"566b57e9e4b0a866af6896ad"},{"problem":62,"code":"(fn a [f i]\n  (cons i\n    (lazy-seq\n      (a f (f i)))))","user":"5464a536e4b01be26fd746cf"},{"problem":62,"code":"(fn my-iterate [f initial]\n  (let [res (atom initial)]\n    (cons initial (repeatedly #(swap! res f)))))","user":"59fa7fb0e4b0ca45a743a366"},{"problem":62,"code":"(fn fun [f x] (lazy-seq (cons x (fun f (f x)))))","user":"53de4bdae4b0d874e779ae32"},{"code":"(fn iterate' [f x]\n  (lazy-seq\n   (cons x (iterate' f (f x)))\n   )\n  )","problem":62,"user":"4ee85476535d93acb0a6687c"},{"code":"(fn my-iterate [f value]\n  (lazy-seq\n    (cons value (my-iterate f (f value)))))","problem":62,"user":"4f7f9665e4b033992c121bea"},{"code":"(fn __\n  [f x]\n   (cons\n     x\n     (lazy-seq\n       (__ f (f x))\n     )\n  )\n)","problem":62,"user":"52485723e4b05ef8e38e63d2"},{"problem":62,"code":"(fn iterate-me\n           [f x]\n           (let [val (f x)]\n             (lazy-seq\n               (cons x (iterate-me f val)))))","user":"5ab23c99e4b073f1774425e2"},{"code":"(fn m\n\t[f x] (cons x (lazy-seq (m f (f x)))))","problem":62,"user":"4f047542535dcb61093f6bc7"},{"problem":62,"code":"(fn my-iterate [f x]\n    (lazy-seq\n        (cons x (my-iterate f (f x)))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":62,"code":"(fn [f x]\n (letfn [(go-seq [y]\n  (lazy-seq\n   (cons y (go-seq (f y)))\n  ))] (go-seq x)))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn it [f val]\n  (lazy-seq (cons val (it f (f val)))))","problem":62,"user":"4f0d093b535d0136e6c22313"},{"problem":62,"code":"(fn i [f a]\n  (lazy-seq (cons a (i f (f a)))))","user":"5756f7d7e4b02ea1147992e9"},{"problem":62,"code":"(fn k[op a]\n  (lazy-seq \n     (cons a \n           (k op (op a)))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":62,"code":"(fn woop [f x]\n  (lazy-seq (cons x (woop f (f x)))))","user":"5b2be9b1e4b025bcb146f2b0"},{"problem":62,"code":"(fn [f a] (reductions (fn [i _] (f i)) (repeat a)))","user":"5bf0aefde4b0a6d31fed215a"},{"code":"(fn fujikawa [func x]\n  (cons x (lazy-seq (fujikawa func (func x))))\n)","problem":62,"user":"4db7da66535d1e037afb2187"},{"code":"(fn foo [op n]\n  (lazy-seq\n   (cons n (foo op (op n)))))","problem":62,"user":"5220a770e4b0e6a83c8925a3"},{"problem":62,"code":"(fn itrt [f x]\n         (lazy-seq\n           (cons x (itrt f (f x)))))","user":"53bc10f5e4b047364c04450d"},{"problem":62,"code":"(fn iiterate [f ent]\n  (lazy-seq (cons ent (iiterate f (f ent)))))","user":"60aecd73e4b00e9e6653c49a"},{"problem":62,"code":"(fn itrt [f init]\n  (cons init (lazy-seq (itrt f (f init)))))","user":"60436423e4b02d28681c77a3"},{"code":"(fn my-iterate [f i]\r\n  (loop [f f\r\n         i i]\r\n      (lazy-seq (cons i (my-iterate f (f i))))))","problem":62,"user":"4dd023dd535d5973398f92ad"},{"code":"#(loop [r [] x %2 n 100]\n   (if (or (= n 0) (> x 99)) r\n     (recur (conj r x) (%1 x) (- n 1))))","problem":62,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn ! [f v] (cons v (lazy-seq (! f (f v)))))","problem":62,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":62,"code":"(fn iteratex\n  [f x]\n  (lazy-seq(concat (vector x) (iteratex f (f x)))))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn f [x y] (lazy-seq (cons y (f x (x y)))))","problem":62,"user":"514d398ee4b019235f6c0583"},{"problem":62,"code":"(fn itr [f init]\n      (lazy-seq (cons init (itr f (f init)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":62,"code":"(fn iter [f x]\n  (cons x (lazy-seq (iter f (f x)))))\n\n; golf:\n;#(reductions(fn[x _](% x))%2(range)) ;we need some seq at the end, values are not used.","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [f x] (reductions (fn [a b] (f a)) x (repeat 1)))","problem":62,"user":"536f2faee4b0fc7073fd6e79"},{"code":"(fn it [f v]\r\n  (cons v\r\n    \t(lazy-seq (it f (f v)))))","problem":62,"user":"50576483e4b001218172198b"},{"problem":62,"code":"(fn myiterate [f p]\n  (lazy-seq (cons p (myiterate f (f p)))))","user":"5ab490f4e4b073f17744261d"},{"problem":62,"code":"#(letfn [(ff\n            ([] (ff %2))\n            ([n] (lazy-seq (cons n (ff (%1 n))))))]\n     (ff))","user":"567d132ee4b05957ce8c61c3"},{"problem":62,"code":"(fn mi [f x]\n  (lazy-seq (cons x (mi f (f x))) ))","user":"57af41bce4b0fbc9809a2731"},{"problem":62,"code":"(fn iter[f init] (lazy-seq (cons init (iter f (f init)))))","user":"58134ba8e4b0f478707a060b"},{"code":"(fn reImplementIterate [a b] (lazy-seq (cons b (reImplementIterate a (a b)))))","problem":62,"user":"4f9336ece4b0dcca54ed6cb7"},{"problem":62,"code":"(fn iter [foo st] (lazy-seq (cons st (iter foo (foo st)))))","user":"562326cbe4b03f08ee9a9230"},{"problem":62,"code":"(fn [f init] (reductions (fn [agg itm] (f agg)) init (range)))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"problem":62,"code":"(fn m \n  ([f x]\n   (cons x \n    (lazy-seq (m f (f x))))))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn iterate' [f x]\n  (lazy-seq\n    (cons x (iterate' f (f x)))))","problem":62,"user":"528a2de7e4b0239c8a67ae71"},{"problem":62,"code":"(fn rec [f x] (lazy-seq (cons x (rec f (f x)))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(letfn [(iter [f x]\n  (lazy-seq (cons x (iter f (f x)))))]\n  iter)","problem":62,"user":"4fe89db2e4b07c9f6fd12c59"},{"problem":62,"code":"(fn [f x]\n  (reductions (fn [acc n] (f acc)) x (range)))","user":"56a51f26e4b0542e1f8d14e0"},{"problem":62,"code":"(fn iterate- [f init] (cons init (lazy-seq (iterate- f (f init)))))","user":"5589e88ae4b0277789237610"},{"problem":62,"code":"(fn iter' [f x] (lazy-seq (cons x (iter' f (f x)))))","user":"56481722e4b0284900eef628"},{"code":"(fn k [f x] (cons x (lazy-seq (k f (f x)))))","problem":62,"user":"50f10f7be4b06d9538fe211a"},{"problem":62,"code":"(fn fn-iterate [f x]\n  (lazy-seq\n   (cons x (fn-iterate f (f x)))))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"problem":62,"code":"(fn rec [f x]\n  (lazy-seq (cons x (rec f (f x)))))","user":"55db7e15e4b0e31453f64ae8"},{"problem":62,"code":"(fn [f x]\n  (letfn [(step [f x]\n                (lazy-seq (cons x (step f (f x)))))]\n    (step f x)))","user":"57213df6e4b0c5bde472c0ab"},{"problem":62,"code":"(fn iterate-1 [f init]\n  (cons init\n        (lazy-seq\n         (iterate-1 f (f init)))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn fit [f x]\n  (cons x (lazy-seq (fit f (f x)))))","problem":62,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn l [f n]\n  (cons n (lazy-seq (l f (f n)))))","problem":62,"user":"51c342e9e4b0851ac09658f3"},{"problem":62,"code":"(fn iter [function initial] (cons initial (lazy-seq (iter function (function initial)))))","user":"6070c7bae4b069485764de27"},{"problem":62,"code":"(fn iterate' [f v] (lazy-seq (cons v (iterate' f (f v)))))","user":"58dcf11ae4b0a4d5acaab6af"},{"problem":62,"code":"(fn iter\n   [f x]\n   (lazy-seq (cons x (iter f (f x)))))","user":"5d0beecee4b0cc9c91588239"},{"code":"(fn my-iter\n  [f x]\n  (cons x (lazy-seq (my-iter f (f x)))))","problem":62,"user":"536aa86de4b0243289761eb1"},{"problem":62,"code":"(fn my-iter [f x]\n      (->>\n      (cons x (my-iter f (f x)))\n      (lazy-seq))\n  )","user":"57210e8ee4b0c5bde472c0a8"},{"problem":62,"code":"(fn iter [f x]\n  (lazy-seq\n   (cons\n    x\n    (iter f (f x))\n    )\n   )\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":62,"code":"(fn it\n  (\n    [f n]\n    (lazy-seq (cons n (it f n nil)))\n  )\n  (\n    [f n _]\n    (lazy-seq (cons (f n) (it f (f n) nil)))\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":62,"code":"(fn it [f x]\n        (cons x (lazy-seq (it f (f x)))))","user":"5369d072e4b0243289761ea1"},{"code":"(fn it [f x]\n  (lazy-cat [x] (it f (f x))))","problem":62,"user":"4fde492be4b05e33b9224f8a"},{"problem":62,"code":"(fn myIter\n  [pred x]\n  (cons x (lazy-seq (myIter pred (pred x)))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":62,"code":"(fn it [f x]\n  (reductions #(%2 %1) x (repeat f)))","user":"4e435681535dc968683fc4a1"},{"problem":62,"code":"(fn i\n  [f x]\n  (->> (i f (f x))\n       (cons x)\n       lazy-seq))","user":"52ae886de4b0c58976d9acab"},{"problem":62,"code":"(fn my-iter \n  [func x]\n  (lazy-seq (cons x (my-iter func (func x)))))","user":"58740c18e4b01531a375ea49"},{"code":"(fn jawnpiece [f x] (reductions #(%2 %1) x (repeat f)))","problem":62,"user":"4f9754d4e4b0dcca54ed6ce9"},{"problem":62,"code":"(fn __ \n  [f x] \n  (lazy-seq (cons x (__ f (f x)))))","user":"55916764e4b0604b3f94d57b"},{"problem":62,"code":"(fn iter [f, x]\n  (lazy-seq\n   (cons x (iter f (f x)))))","user":"5590e55de4b0277789237676"},{"code":"(fn ite [f v]\n  (cons v (lazy-seq \n           (ite f (f v)))))","problem":62,"user":"4e964f4a535dbda64a6f6b42"},{"code":"(fn re [fun n]\n  (lazy-seq (cons n (re fun (fun n))))\n  )","problem":62,"user":"517e12e3e4b0fcc7c5d37d3c"},{"code":"(fn my-iterate\n  [f x]\n  (cons x (lazy-seq (my-iterate f (f x)))))","problem":62,"user":"51804bcbe4b04f45bde7d901"},{"problem":62,"code":"(fn iter [fnc, elem]\n  (lazy-seq (cons elem (iter fnc (fnc elem))))\n                  )","user":"563a30d7e4b0bfe05bf117f9"},{"code":"(fn fib [f x] (lazy-seq (cons x (fib f (f x)))))","problem":62,"user":"5003bb77e4b0678c553fc442"},{"code":"(fn iter [f init]\n  (lazy-seq (cons init (iter f (f init))))\n  )","problem":62,"user":"5228f870e4b0186687e23a98"},{"problem":62,"code":"(fn it [f x]\n(lazy-seq (cons x (it f (f x)))))","user":"5964f9b0e4b069c0a1a19778"},{"problem":62,"code":"(fn [func init]\n  (letfn [(ff [i]\n              (cons i (lazy-seq (ff (func i)))))]\n          (ff init)))","user":"57bfffc7e4b05aa3c4741c8a"},{"code":"(fn iterate2 [f x]\n  (lazy-seq (cons x (iterate2 f (f x)))))","problem":62,"user":"4faafccde4b081705acca209"},{"problem":62,"code":"#(reductions (fn [a b] (%1 a)) %2 (range))","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn a [f x]\n  (cons x (lazy-seq (a f (f x)))))","problem":62,"user":"4fcd155de4b065de69964ca3"},{"code":"(fn i [f v]\n  (cons v\n    (lazy-seq \n      (i f (f v)))))","problem":62,"user":"523b4e91e4b07becd5be21ef"},{"code":"(fn my-iterate [f a]\n    (lazy-seq\n        (cons a (my-iterate f (f a)))))","problem":62,"user":"4e7263a1535d5021c1a8965f"},{"problem":62,"code":"(fn iter [func x]\n  (lazy-seq (cons x (iter func (func x)) )) )","user":"5d48884ee4b07c84aa5ae6bb"},{"code":"(fn iterato\r\n  [f x]\r\n    (cons x (lazy-seq (iterato f (f x)))))","problem":62,"user":"4f71ba6ee4b07046d9f4f012"},{"code":"(fn i[f x] (lazy-seq (cons x (i f (f x)))))","problem":62,"user":"4e707db6535d5021c1a8963a"},{"code":"(fn r [f s]\n  (lazy-cat [s] (r f (f s))))","problem":62,"user":"4faa8de0e4b081705acca1f8"},{"problem":62,"code":"#(reductions (fn [agg x] (%1 agg)) %2 (range))","user":"57717915e4b0979f896515b3"},{"problem":62,"code":"(fn [f x]\n  (let\n    [real\n     (fn [real myf myx]\n       (cons\n        myx\n        (lazy-seq (real real myf (myf myx)))))]\n  (real real f x)))","user":"5e619496e4b0fd0acd158690"},{"problem":62,"code":"(fn f2 [f x]\n  (cons x (lazy-seq (f2 f (f x)))))","user":"53da059be4b0e771c302547e"},{"code":"(fn iter [f i]\n  (lazy-seq (concat [i] (iter f (f i)))))","problem":62,"user":"4e6a48d5535d8ccf87e9febd"},{"problem":62,"code":"(fn step [f x]\n    (lazy-seq\n     (cons x (step f (f x)))))","user":"5881335ce4b0f1effa3b762e"},{"problem":62,"code":"(fn new-iterate\n  [f x]\n  (cons x (lazy-seq (new-iterate f (f x)))))","user":"5ca622f3e4b048ec896c5be0"},{"problem":62,"code":"(fn sk-iterate [f n]\n  (lazy-seq (cons n (sk-iterate f (f n)))))","user":"51d42f44e4b013d740b70ddb"},{"code":"(fn asdf [f x] (cons x \n  (lazy-seq (asdf f (f x)))))","problem":62,"user":"5012036ce4b0a040369c12f4"},{"code":"(fn iter\n  [fun init]\n  (lazy-seq\n   (cons init\n         (iter fun (fun init)))))","problem":62,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn iter [f v]\n  (let [w (f v)]\n    (cons v (lazy-seq (iter f w)))))","problem":62,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":62,"code":"(fn [f v]\n    ((fn step [v1]\n        (lazy-seq \n          (cons v1 (step (f v1)))))\n          v))","user":"55975569e4b031d6649c9b8e"},{"problem":62,"code":"(fn myiterate [f i]\n  (lazy-seq (cons i (myiterate f (f i) ))))","user":"5fee18f2e4b05ac5b16ea1d2"},{"code":"#(reductions (fn [acc f] (f acc)) %2 (repeat %))","problem":62,"user":"50479524e4b0371827a27bc4"},{"problem":62,"code":"(fn testing [f n]\n  (cons n (lazy-seq (testing f (f n)))))","user":"59503c5de4b066ee0a44ae8e"},{"code":"(fn it [f x]\n  (cons x\n    (lazy-seq\n      (it f (f x)))))","problem":62,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":62,"code":"(fn myiterate [f x]\n        (cons x (lazy-seq (myiterate f (f x)))))","user":"5455510fe4b0e397800069df"},{"problem":62,"code":";explicit sequence construction: (fn my-iter[f x] (lazy-seq (cons x (my-iter f (f x)))))\n;(fn [f x] (reductions #(%2 %1) x (repeat f)))\n(fn [f x] (reductions (fn [i _] (f i)) (repeat x)))","user":"533b1dc4e4b0e30313ee6cc7"},{"problem":62,"code":"(fn o \n  [f x]\n  (cons x (lazy-seq (o f (f x)))))","user":"5723e6d6e4b0c5bde472c0f1"},{"problem":62,"code":"(letfn [(go [f x]\n            (cons x (lazy-seq (go f (f x)))))]\n  (fn [f x] (go f x)))","user":"5652f23ce4b0f9d632dd846b"},{"problem":62,"code":"(fn iter\n  [f x]\n  (loop [res (vector x)\n         n 0]\n    (if (= f inc)\n      (if (= n 101)\n        res\n        (recur (concat res (vector (f (last res)))) (inc n)))\n      (if (= n 10)\n        res\n        (recur (concat res (vector (f (last res)))) (inc n))))))","user":"59390a35e4b02506e01a29f3"}]