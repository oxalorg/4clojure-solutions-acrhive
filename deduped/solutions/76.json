[{"code":"; Here is what is happening:\n; foo is called with [] 1, returns #(bar [1] 1)\n; #(bar [1] 1) returns #(foo [1] 3)\n; #(foo [1] 3) returns #(bar [1 3] 3)\n; #(bar [1 3] 3) returns #(foo [1 3] 5)\n; and so on and so on until (> (last [x] 10))\n[1 3 5 7 9 11]","problem":76,"user":"52463059e4b09dbe66b56198"},{"problem":76,"code":"[1 3 5 7 9 11]\n; Here is what is happening:\n; foo is called with [] 1, returns #(bar [1] 1)\n; #(bar [1] 1) returns #(foo [1] 3)\n; #(foo [1] 3) returns #(bar [1 3] 3)\n; #(bar [1 3] 3) returns #(foo [1 3] 5)\n; and so on and so on until (> (last [x] 10))","user":"581b19e7e4b04b46fc4b0ec4"},{"problem":76,"code":"#_(fn [g & vs]\n            (let [r (apply g vs)]\n              (if (fn? r)\n               (loop [g' r]\n                 (let [h (g')]\n                   (if (fn? h)\n                     (recur h)\n                     h)))\n               r)))\n\n[1 3 5 7 9 11]","user":"53684a2fe4b0243289761e8c"},{"code":"(filter odd? (#(range (* (+ 1 %) %)) (int Math/PI)))","problem":76,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(do\r\n  (letfn\r\n     [(foo [x y] #(bar (conj x y) y))\r\n      (bar [x y] (if (> (last x) 10)\r\n                   x\r\n                   #(foo x (+ 2 y))))]\r\n    ((fn tramp [f & s]\r\n      (loop [v (apply f s)]\r\n        (if (fn? v) (recur (v)) v)))\r\n      foo [] 1))\r\n  (range 1 12 2))","problem":76,"user":"50901b2ee4b0ea685a20f774"},{"code":"(list 1 3 5 7 9 11)","problem":76,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn [f & args] (if (fn? f) (recur (apply f args) nil) f)) foo [] 1))","problem":76,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":76,"code":"[1 3  5 7 9 11]","user":"56a28c23e4b0542e1f8d14c3"},{"problem":76,"code":"[1 3 5 7 9 11 ]","user":"53e745a1e4b036ad0777e479"},{"code":"(letfn\r\n     [(foo [x y] #(bar (conj x y) y))\r\n      (bar [x y] (if (> (last x) 10)\r\n                   x\r\n                   #(foo x (+ 2 y))))]\r\n     (trampoline foo [] 1))","problem":76,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":76,"code":"'(1, 3, 5, 7, 9, 11)","user":"5984e7dee4b021a7a535fe43"},{"code":"(apply vector (take 6 (filter odd? (iterate inc 0))))","problem":76,"user":"4e6cf521535de274dd8d818b"},{"problem":76,"code":"(letfn\n    [(tr [f & args]\n       (loop [ff (apply f args)]\n         (if (fn? ff)\n           (recur (ff))\n           ff)))\n     (foo [x y] #(bar (conj x y) y))\n     (bar [x y] (if (> (last x) 10)\n                  x\n                  #(foo x (+ 2 y))))]\n    (tr foo [] 1))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"[1, 3, 5, 7, 9, 11]","problem":76,"user":"5069c09be4b01dc6af13f837"},{"code":"(for [x (range 6)] (+ x x 1))","problem":76,"user":"4fccf4dde4b0ee37620e1870"},{"code":"(letfn [(foo [x y] #(bar (conj x y) y)) (bar [x y] (if (> (last x) 10) x #(foo x (+ 2 y)))) \n        (tramp [f & args] (if ((comp not fn?) f) f \n                             (if ((comp not empty?) args) \n                               (tramp (apply f args)) \n                               (tramp (f)))))] \n  (tramp foo [] 1))","problem":76,"user":"52265e41e4b04e78ff2e1981"},{"problem":76,"code":"[1 3 5 7 9 11]\n\n\n\n;;[1] 1    [1] 3     [1 3] 3","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(vec (range 1 12 2))","problem":76,"user":"4faa8de0e4b081705acca1f8"},{"code":"(take-nth 2 (range 1 12))","problem":76,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"code":"'(1 3 5 7 9 11)","problem":76,"user":"4dd023dd535d5973398f92ad"},{"problem":76,"code":"(letfn [(foo [x y] (fn* [] (bar (conj x y) y))) (bar [x y] (if (> (last x) 10) x (fn* [] (foo x (+ 2 y)))))] (trampoline foo [] 1))","user":"565f2461e4b068f2fe63dc3b"},{"problem":76,"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn __ [f & args]\n        (loop [r (apply f args)]\n          (if (fn? r) (recur (r)) r)))\n      foo [] 1))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":76,"code":"(letfn\n  [(foo [x y] #(bar (conj x y) y))\n   (bar [x y] (if (> (last x) 10)\n                x\n                #(foo x (+ 2 y))))]\n    (trampoline foo [] 1))","user":"524740e7e4b05ef8e38e635d"},{"problem":76,"code":"(take 6 (iterate #(+ % 2) 1))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":76,"code":";; (foo [] 1)\n;; (bar (conj [] 1) 1)\n;; (bar [1] 1)\n;; (foo [1] 3)\n;; (bar [1 3] 3)\n[1 3 5 7 9 11]","user":"5edfb1e5e4b0c7845d86b107"},{"code":"(filter odd? (range 12))","problem":76,"user":"4f03f197535dcb61093f6b84"},{"code":"(range 1 13 2)","problem":76,"user":"4e599577535d8a8b8723a29f"},{"problem":76,"code":"[ 1 3 5 7 9 11]","user":"524b827ce4b09eba1c0223d7"},{"problem":76,"code":"'( 1 3 5 7 9 11)","user":"5d5950c1e4b02ba5928a6827"},{"code":"(filter odd? (range 1 12))","problem":76,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"'(1 3 5\t7 9 11)","problem":76,"user":"515737f0e4b0b0b4b87062d0"},{"code":"'[1 3 5 7 9 11]","problem":76,"user":"4fccf479e4b0ee37620e186e"},{"code":"((fn [x y]\n  (if (> (last (conj x y)) 10) \n    (conj x y)  \n    (recur (conj x y) (+ 2 y)))) [] 1)","problem":76,"user":"5243e37ae4b076204b44fae3"},{"code":"[1,3,5,7,9,11]","problem":76,"user":"4e50b67b535dc968683fc4ed"},{"problem":76,"code":";[1 3 5 7 9 11]\n\n(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     (trampoline foo [] 1))","user":"5c683fb5e4b0fca0c16226d5"},{"problem":76,"code":"(letfn\n                   [(foo [x y] #(bar (conj x y) y))\n                    (bar [x y] (if (> (last x) 10)\n                                 x\n                                 #(foo x (+ 2 y))))]\n\n\n                    ((fn mytrampoline \n                      ([f]\n                         (let [fs (f)]\n                           (if (fn? fs)\n                                   (recur fs)\n                                   fs)\n                           ))\n                        ([f & args]\n                        (mytrampoline #(apply f args)))\n                      \n                      )\n                       foo [] 1))","user":"59692530e4b069c0a1a197e4"},{"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     (trampoline foo [] 1))","problem":76,"user":"50435852e4b034ff00315d22"},{"code":";(foo [] 1) -> (bar [1] 1) -> (foo [1] 3) -> (bar [1,3] 3) -> (foo [1,3] 5\n[1,3,5,7,9,11]","problem":76,"user":"4f1c2a3a535d64f603146480"},{"problem":76,"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n((fn ft\n  ([f] \n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args] \n   (ft #(apply f args)))) foo [] 1))","user":"56051095e4b08b23635d3162"},{"code":"(take 6 (iterate (partial + 2) 1))","problem":76,"user":"4fc93728e4b0ee37620e1844"},{"code":"(range 1 12 2)","problem":76,"user":"4e7f51eb535db966e863cc3f"},{"code":"[ 1 3 5 7 9 11 ]","problem":76,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":76,"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))\n      (my-tramp [f & args]\n        (loop [res (apply f args)]\n          (if (fn? res)\n            (recur (res))\n            res)))]\n        \n     (my-tramp foo [] 1))","user":"58b81490e4b0ebc645576d8c"},{"problem":76,"code":"(filter #(not (even? %)) (range 1 12))","user":"53bd7080e4b0d9a98559a6d1"},{"problem":76,"code":"(remove even? (range 12))","user":"55f09e7be4b06e875b46ce28"},{"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn [ func & args ] (loop [res (apply func args)]\n                               (if (fn? res)\n                                 (recur (res))\n                                 res)\n                               )) foo [] 1))","problem":76,"user":"50956c2be4b087f34d351ab2"},{"code":"(letfn\n     [(tramp\n\t  [f & args]\n\t  (let [v (apply f args)]\n\t    (if \n\t      (fn? v)\n\t  \t  (tramp v)\n\t      v)))\n      (foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     (tramp foo [] 1))","problem":76,"user":"536aa86de4b0243289761eb1"},{"problem":76,"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn [f & args]\n  (loop [result (apply f args)]\n    (if (and (instance? clojure.lang.IFn result) (not (vector? result)))\n      (recur (result))\n      result))) foo [] 1))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":76,"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn t [f & args] \n\t\t  (let [r (apply f args)]\n\t\t\t\n\t\t\t(if (fn? r)\n\t\t\t  (t r)\n\t\t\t  r))) foo [] 1))","user":"527ccaf4e4b0757a1b17136d"},{"problem":76,"code":"(letfn\n  [(foo [x y] #(bar (conj x y) y))\n   (bar [x y] (if (> (last x) 10)\n                x\n                #(foo x (+ 2 y))))]\n  (trampoline foo [] 1))","user":"5264383be4b03e8d9a4a70cb"},{"code":"(letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     ((fn elastic-bed[ func & args ]\n  (loop [f (apply func args)]\n    (if (fn? f)\n      (recur (f))\n      f\n    )\n  )\n) foo [] 1))","problem":76,"user":"4e9de526535dbda64a6f6b8e"},{"problem":76,"code":"(vec (take-while\n #(> 12 %)\n (iterate #(+ 2 %) 1)))","user":"586a657de4b0f14aab7c88bd"},{"problem":76,"code":"[  1 3 5 7 9 11]","user":"5d0cf1c8e4b0cc9c91588246"},{"code":"[1 3 5 7 9 11]","problem":76,"user":"4dcd818e535d5973398f929d"},{"problem":76,"code":"(letfn\n       [(trampoline* [f & params]\n                       (loop [f* (apply f params)]\n                         (if (fn? f*)\n                           (recur (f*))\n                           f*)))\n        (foo [x y] #(bar (conj x y) y))\n        (bar [x y] (if (> (last x) 10)\n                     x\n                     #(foo x (+ 2 y))))]\n     (trampoline* foo [] 1))","user":"5f0aa72de4b09a3f05b71808"},{"code":"[1  3  5 7 9 11]","problem":76,"user":"4fdf566fe4b05e33b9224f99"}]