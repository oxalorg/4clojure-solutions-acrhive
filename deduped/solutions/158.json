[{"problem":158,"code":"(let [decurry (fn decurry [f args]\n                (if (first args) (decurry (f (first args)) (rest args)) f))]\n  (fn [f] (fn [& args] (decurry f args))))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn [f]\r\n  (fn [& a]\r\n    (reduce #(%1 %2) f a)\r\n    ))","problem":158,"user":"4f0da4e4535d0136e6c22319"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [current-function f\n           values xs]\n      (if (empty? values)\n        current-function\n        (recur (current-function (first values)) (next values))))))","user":"592ac17ae4b072a2710fcf26"},{"code":"(fn [cf]\n  (fn [& args]\n    (reduce #(% %2) cf args)))","problem":158,"user":"4fd96694e4b05e33b9224f37"},{"code":"(fn [f]\n  (fn [& s]\n    (reduce #(%1 %2) f s)))","problem":158,"user":"53523ae0e4b084c2834f4aee"},{"code":"(fn [curry] \n  (fn decurry [arg & args]\n    (loop [f curry x arg xs args]\n      (cond (seq xs)\n        (recur (f x) (first xs) (rest xs))\n        :else (f x)))))","problem":158,"user":"5097cfcbe4b00ad8bab4e977"},{"problem":158,"code":"(fn solution [fcurry]\n  (fn [& args]\n    (reduce #(%1 %2) fcurry args)))","user":"5e2ef900e4b05b4b015161fc"},{"problem":158,"code":"(fn [f] \n  (fn [& a]\n    (reduce #(% %2) f a)))","user":"5b59d176e4b02d533a91bd86"},{"code":"#(fn [& args] (reduce (fn [cur next] (cur next)) % args))","problem":158,"user":"4e0e0529535d04ed9115e7b9"},{"problem":158,"code":"(fn [f-c] \n    (fn [& r] \n      (loop [f f-c\n             param r]\n        (if (empty? param)\n          f\n          (recur (f (first param))  (rest param))))))","user":"531bfb69e4b08068f379ed97"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [args args\n           f f]\n      (if (empty? args)\n        f\n        (recur (rest args) (f (first args)))))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn g [f]\n (fn [& v]\n  (let [r (f (first v))]\n    (if (fn? r)\n      (apply (g r)(rest v))\n      r))))","problem":158,"user":"52f818a6e4b047fd55836fcc"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (loop [ags (rest a)\n           r (f (first a))]\n      (if (fn? r) (recur (rest ags) (r (first ags))) r)\n    ) \n  )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":158,"code":"(fn [f]\n  #(reduce (fn [f x] (f x)) f %&))","user":"5472d919e4b094393f72dd7b"},{"problem":158,"code":"(fn decurry [curried]\n  (fn [x & more]\n    (if (seq more)\n      (-> (curried x)\n          decurry\n          (apply more))\n      (curried x))))","user":"52470d42e4b05ef8e38e6350"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [acc x] (acc x)) f args)))","user":"5db5d09be4b010eb3c36cd31"},{"code":"(fn decurry [v]\n  (fn [& more]\n    (reduce\n      #(%1 %2)\n      v\n      more)\n    )\n  )","problem":158,"user":"5094057fe4b097f48cc38593"},{"problem":158,"code":"(fn curry [f]\n  (fn [& more] \n    (reduce \n      (fn [g arg] \n        (g arg)) \n      f more)))","user":"55b1c24ae4b0da326a65cf70"},{"problem":158,"code":"(fn my-fn [f]\n  (fn [& xs]\n    (reduce #(%1 %2) f xs)))","user":"5c896f46e4b048ec896c5940"},{"code":"(fn f [curried-f] \n  (fn [& args]\n    (loop [result curried-f\n           args args]\n      (if-let [x (first args)]\n        (recur (result x) (rest args))\n        result))))","problem":158,"user":"4db1b3951254ad5b4805fa6f"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [f arg]\n              (f arg)) f args)))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":158,"code":"(fn number158 [f]\n  (fn [& x] (reduce #(% %2) f x)))","user":"54074fc5e4b0addc1aec66b6"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (let [ [x & args] args]\n        (if (empty? args)\n          (f x)\n          (recur (f x) args))))))","user":"5224a46ce4b01819a2de42e5"},{"problem":158,"code":"(letfn [(decurry [f]\n                 (fn [& args]\n                   (do-decurry f args)))\n        (do-decurry [f [x & xs]]\n                    (if (seq xs)\n                      (do-decurry (f x) xs)\n                      (f x)))]\n  decurry)","user":"540470dae4b0addc1aec6658"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [a b] (a b)) f args)))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [f]\n  (letfn\n    [(decur [f & [head & tail]]\n       (let [res (f head)]\n         (if (fn? res)\n             (apply (partial decur res) tail)\n             res)))]\n    (partial decur f)))","problem":158,"user":"521e8227e4b0dd19981ad082"},{"code":"(fn [f]\n  (fn [& xs]\n    (reduce #(%1 %2) f xs)))","problem":158,"user":"506406c8e4b075d771da6f9f"},{"problem":158,"code":"(fn [fns]\n\t(letfn [(h [fu xs] \n\t            (if (fn? fu) \n\t                (h (fu (first xs)) (rest xs)) \n\t                fu))] \n\t\t(fn [& xs] (h fns xs))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":158,"code":"(fn [f] (fn [ & args ] (reduce #(%1 %2) f args)))","user":"52fac708e4b047fd55836fff"},{"problem":158,"code":"(fn [cfunc]\n  (fn [& xs]\n    (reduce (fn [r x] (r x)) cfunc xs)))","user":"56d68cbae4b0ea9b8538f7cd"},{"problem":158,"code":"(fn decurry [f]\n  (letfn [(unwind [& args]\n            (loop [f f\n                   head (first args)\n                   tail (rest args)\n                   val (f head)]\n              (if (not (fn? val))\n                val\n                (recur val (first tail) (rest tail) (val (first tail))))))]\n    unwind))","user":"587ee260e4b052da650a6353"},{"code":"(fn [f] (fn [& l] (reduce #(% %2) f l)))","problem":158,"user":"5061cc17e4b0a30dc9a35d34"},{"code":"(fn[curryf]\n  (fn[& args]\n    (loop [curryf curryf\n           args args]\n      (if (empty? args)\n        curryf\n        (recur (curryf (first args)) (rest args))))))","problem":158,"user":"50ef96a1e4b0bdaecbb47d9d"},{"code":"(fn [origf]\n  (fn [& args]\n  (loop [f origf\n         args args]\n    (if (not (fn? f))\n      f\n      (recur (f (first args)) (rest args))))))","problem":158,"user":"5051e2abe4b0a561d07d8f0a"},{"problem":158,"code":"(fn [f]\n    (fn [& a]\n     (reduce #(% %2) f a)))","user":"55ac07afe4b03311e7b7328f"},{"problem":158,"code":"#(partial (fn decur [f & args] (let [a (first args), rargs (rest args)] (if \n(nil? a) f (apply decur (f a) rargs)))) %)","user":"59358f74e4b04f87174def52"},{"code":"(fn [f]\n  (fn [& p]\n    (reduce #(% %2) f p)))","problem":158,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":158,"code":"(fn decurry [f]\n  (fn [x & xs]\n    (if (nil? xs)\n      (f x)\n      (apply (decurry (f x)) xs))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":158,"code":"(fn [f]\n  (partial (fn call-again [f & args]\n    (let [result (f (first args))]\n      (if (fn? result)\n        (apply call-again result (rest args))\n        result))) f))","user":"534d1173e4b084c2834f4a98"},{"code":"(fn uncurry [curried-fn]\n  (fn [& args]\n    (reduce #(%1 %2) curried-fn args)))","problem":158,"user":"50bd6033e4b0594b91591c66"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (= 1 (count args))\n        (f (first args))\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"50435852e4b034ff00315d22"},{"code":"(fn [f]\n  (partial\n   (fn [f & args]\n     (let [g (f (first args))]\n       (if (fn? g)\n         (recur g (rest args))\n         g)))\n   f))","problem":158,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [f]\n  (fn [& args]\n\t(reduce #(%1 %2) f args)))","problem":158,"user":"52015698e4b0d7096e99ddba"},{"problem":158,"code":"(fn  [f]\n  (fn [& x] \n    (ffirst \n     (drop (count x) \n           (iterate (fn [[g v]] \n                      [(g (first v)) (rest v)]) \n                    [f x])))))","user":"54e345a1e4b024c67c0cf7db"},{"problem":158,"code":"(fn [g]\n            (fn [& args]\n              (reduce (fn [acc v]\n                        (acc v))\n                      g\n                      args)))","user":"53684a2fe4b0243289761e8c"},{"problem":158,"code":"(fn decurry [f]\n  (letfn [(x [f l]\n            (let [r (f (first l))]\n              (if (fn? r)\n                (x r (rest l))\n                r)))]\n    (fn [& lst]\n      (x f lst))))","user":"538e36c7e4b0b51d73faae81"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce (fn [f a] (f a)) f args)))","user":"547d8e93e4b0c51c1f4d72f4"},{"code":"(fn __ [fun]\n  ;; return a function\n  (fn [& args]\n    (loop [fun1  fun\n           args1 args]\n      ;;\n      (if (empty? (rest args1))\n        ;; if only one argument left, just apply the function and return result\n        (fun1 (first args1))\n        ;; if multiple arguments exist, apply the first and loop\n        (recur (fun1 (first args1)) (rest args1))))))","problem":158,"user":"53415755e4b00652c8746ecd"},{"code":"(fn [f] (partial (fn d [f & xs] (if (seq? xs) (apply d (cons (f (first xs)) (rest xs))) f)) f))","problem":158,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn [x] (fn [& xs] (reduce #(%1 %2) x xs)))","problem":158,"user":"508157b2e4b0946d0443855c"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& xs]\n    (loop [xs xs f f]\n      (if (empty? xs)\n        f\n        (recur (rest xs)\n               (f (first xs)))))))","user":"58b81490e4b0ebc645576d8c"},{"problem":158,"code":"partial (fn [fs & args]\n           (reduce #(% %2)\n                   fs\n                   args))","user":"54848141e4b0e286459a119e"},{"code":"(fn [f]\n  (fn [ & args]\n    (reduce #(apply % [%2]) f args)))","problem":158,"user":"503a234de4b088a6a14ca76d"},{"problem":158,"code":"(fn [fs]\n  (fn [& args]\n    (loop [cf fs lst args]\n      (let [remainder (rest lst) arg (first lst) next (cf arg)]\n        (if (not (fn? next))\n          next\n          (recur next remainder))))))","user":"5256a1d4e4b0541d1855ba29"},{"code":"(fn [f] (fn [& a] (reduce #(%1 %2) f a)))","problem":158,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce\n      (fn [acc e]\n        (if (fn? acc)\n          (acc e)\n          acc))\n      (f (first args))\n      (rest args))))","user":"5c73b8bae4b0fca0c16227ba"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn\n    ([x]\n     (f x))\n    ([x & args]\n     (apply (decurry (f x)) args))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":158,"code":"(fn decurry\n\t[f]\n\t(fn [& args]\n\t\t(if (nil? args)\n\t\t\tf\n\t\t\t(apply (decurry (f (first args))) (rest args)))))","user":"5954eef0e4b066ee0a44af17"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [func a] (func a)) f args)))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn [f]\n  (partial \n   (fn [f & args]\n     (let [g (f (first args))]\n          (if (fn? g)\n            (recur g (rest args))\n            g)))\n   f))","problem":158,"user":"4f05ea25535dcb61093f6c02"},{"code":"(fn [fs]\n  ( fn [ & args]\n    ( reduce #(apply %1 (vector %2)) fs  args)))","problem":158,"user":"5225b16de4b0d2f5d1e2c0ed"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [cur-f arg]\n              (cur-f arg))\n            f\n            args)))","problem":158,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":158,"code":"(fn foo [f] \n  (fn bar [& args] \n    (reduce #(%1 %2) f args)))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [fstart]\n  (fn [& args]\n    (reduce (fn [f x] (f x)) fstart args)))","problem":158,"user":"51a97f7ae4b08d8ec191b827"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (reduce\n      #(%1 %2)\n      f\n      xs)))","user":"562cd94ee4b0a45d2ff83015"},{"problem":158,"code":"(fn myfn [fs]\n  (fn [& args]\n    (loop [arglist args\n           f fs]\n      (let [nextfn (f (first arglist))]\n        (if (or (empty? arglist) (not (fn? nextfn)))\n          nextfn\n          (recur (rest arglist) nextfn)\n          )\n        ))\n    )\n  )","user":"567b2f20e4b05957ce8c61a2"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    ((fn decur\n       [result rst]\n       (if (empty? rst) result\n           (decur (result (first rst)) (rest rst)))) f args)))","user":"58f98231e4b0438e51c2cf4c"},{"problem":158,"code":"(fn [fns]\n                  (fn [& args] (reduce #(%1 %2) fns args)))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":158,"code":"(fn [f]\n  (fn [& as]\n    (reduce #(%1 %2)\n            f\n            as)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":158,"code":"(fn [curredFunc] (fn [& args] (reduce (fn [agg elm] (agg elm)) curredFunc args)))","user":"5e566668e4b027a2e10ac0f9"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce\n      (fn [acc v] (acc v))\n      f\n      args)))","problem":158,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn [f] (fn [& s] (reduce #(% %2) f s)))","problem":158,"user":"503917a0e4b088a6a14ca763"},{"problem":158,"code":"(fn [f] \n  (fn [& n] (reduce #(% %2) f n)))","user":"4ec74de3535d6d7199dd36df"},{"code":";Nice solution\n#(fn [& a] (reduce deliver % a))\n\n#_(fn [ & args] \n       (reduce (fn [x y] (x y)) % args))","problem":158,"user":"519b2570e4b0ac1b7dced6a3"},{"problem":158,"code":"(fn [f]                               \n\t(fn [& args]                               \n\t\t(loop [ret (f (first args)) r (rest args)] \n\t\t\t(if (empty? r)                             \n\t\t\t\tret                                        \n\t\t\t(recur (ret (first r)) (rest r))))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":158,"code":"(fn decury [func]\n  (fn [& args]\n    (loop [f func [fa & ra] args]\n      (if fa (recur (f fa) ra) f))))","user":"53e745a1e4b036ad0777e479"},{"code":"(fn decurry [funcs]\n  (fn [& args]\n  (loop [funcs funcs args args]\n    (cond (empty? args) funcs\n          :else (recur (funcs (first args)) (rest args))\n    )\n  )\n  )\n)","problem":158,"user":"50588af1e4b06522596eba7d"},{"code":"#(fn [& args]\n  (reduce (fn [f n] (f n)) % args))","problem":158,"user":"505dcfc8e4b0e6aca564be0d"},{"code":"(fn uncurry\n    [fns]\n    (let [f (fn [fns & args]\n            (let [fargs (flatten args)]\n              (if (empty? fargs) fns\n              (recur (fns (first fargs)) (rest fargs)))))]\n      (partial f fns)))","problem":158,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [f] ( fn [& args] ( reduce #(%1 %2) f args ) ) )","problem":158,"user":"52d2b85ce4b099d49816f0af"},{"problem":158,"code":"(fn [fun]\n (fn [& x](reduce #(%1 %2) fun x)))","user":"52bbd09ee4b07a9af57922ee"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n        (loop [[arg & rest] args acc f]\n            (if (nil? arg)\n                acc\n                (recur rest (acc arg))))))","user":"551afdf8e4b07993ea3788cb"},{"code":"(fn dc [f]\n  (fn [& args]\n    (reduce (fn [nf a] (nf a)) f args)))","problem":158,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn [f]\n     (fn [& args]\n       (reduce #(%1 %2) f args)))","problem":158,"user":"5201572be4b0d7096e99ddbb"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (seq args)\n        (recur (f (first args)) (rest args))\n        f))))","user":"52be58d7e4b07a9af579231d"},{"code":"(fn nc [f] \r\n  (fn [& coll]\r\n    (loop [tf f c coll]\r\n      (if (fn? tf)\r\n        (recur (tf (first c)) (rest c))\r\n        tf))))","problem":158,"user":"503354c3e4b0c6c1199c710c"},{"problem":158,"code":"(fn curry\n  [fs]\n  (let [f (fn [& xs]\n            (loop [[a & args] xs g fs]\n              (if args\n                (recur args (g a))\n                (g a))))]\n    f))","user":"59390a35e4b02506e01a29f3"},{"problem":158,"code":"(fn [cf]\n  (fn [ & more]\n    (loop [v cf pars more]\n      (if (fn? v)\n        (recur (v (first pars)) (rest pars))\n        v))))","user":"52503747e4b0541d1855b828"},{"problem":158,"code":"(fn [curried]\n  (fn [& args]\n    (reduce (fn [f arg]\n              (f arg))\n            curried\n            args)))","user":"5424c523e4b01498b1a71b03"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [x args g f]\n      (if (fn? g)\n        (recur (rest x) (g (first x)))\n         g))))","user":"581a5fdbe4b0e114eb51a002"},{"code":"(fn [f]\r\n  (fn [& a]\r\n    (reduce #(% %2) f a)))","problem":158,"user":"4ff304f4e4b0678c553fc343"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (reduce #(%1 %2) f a)\n    )\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& xs]\n    (if (= 0 (count xs)) (throw (new Throwable \"Arity mismatch 1\"))\n      (let [result  (f (first xs))\n            rest-xs (rest xs)]\n        (cond (and (ifn? result) (= 0 (count rest-xs))) (throw (new Throwable \"Arity mismatch\"))\n              (ifn? result)                             (apply (uncurry result) rest-xs)\n              :else                                     result)))))","user":"56bfcba1e4b060a8e693e3a1"},{"problem":158,"code":"(fn [f]\n    (fn [& xs]\n      (loop [xs xs\n             f f]\n        (if-let [x (first xs)]\n          (recur (rest xs) (f x))\n          f))))","user":"4ea03f70535d7eef308072a1"},{"code":"(fn [f]\n         (fn\n           ([a b] ((f a) b))\n           ([a b c d] ((((f a) b) c) d))\n           ))","problem":158,"user":"4f038567535dcb61093f6b0c"},{"code":"(fn [f] \n  #(loop [r (f (first %&)) l (rest %&)]\n      (let [n (r (first l))]\n        (if (fn? n)\n          (recur n (rest l)) n))))","problem":158,"user":"512f06c5e4b0762be4c7aad7"},{"problem":158,"code":"(fn decurry [fns]                                                                                                                                 \n  (fn dc [ & args]\n    (loop [funcs fns\n           args args]\n      (if (empty? args)\n        funcs\n        (recur (funcs (first args)) (rest args))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn d [f]\n  (fn \n    \t([a] (f a))\n    \t([a & l] (apply (d (f a)) l))))","problem":158,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":158,"code":"(fn uncurry\n  [f]\n  (fn [& args]\n    (loop [[h & t] args\n           curr f]\n      (if (nil? t)\n          (curr h)\n          (recur t (curr h))))))","user":"58152157e4b0f478707a0631"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if-not args\n        f\n        (recur (f (first args)) (next args))))))","user":"54580586e4b01be26fd74616"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (reduce #( %1 %2 ) (f (first args)) (rest args) )  \n    )\n  )","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"#(fn [ & args]\n       (loop [a (rest args)\n              result (% (first args)) ]\n         (if (empty? a)\n           result\n           (recur (rest a) (result (first a))))))","problem":158,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":158,"code":"partial (fn [f & args] (reduce #(%1 %2) f args))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":158,"code":"(fn decurry [x]\n  (fn [& args]\n    (loop [x x, args args]\n      (if (seq args)\n        (if (ifn? x)\n          (recur (x (first args)) (rest args))\n          (throw Exception . \"wrong arity\"))\n        x))))","user":"54ca93abe4b057c6fda3a264"},{"problem":158,"code":"(fn decurry [f]\n  (fn [arg & more]\n    (if more\n      (apply (decurry (f arg)) more)\n      (f arg))))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"#(fn [& s] (reduce (fn [f x] (f x)) % s))","problem":158,"user":"519ef784e4b087743fad2198"},{"code":"(fn [f]\r\n  (fn [x & xs]\r\n    (reduce #(% %2) (f x) xs)))","problem":158,"user":"4fbef9a6e4b081705acca316"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f [a & args] args]\n      (if args\n        (recur (f a) args)\n        (f a)))))","user":"5a257747e4b07f18be40aa1f"},{"code":"(fn [fns]\n  (fn [& args]\n    (reduce #(% %2) fns args)\n    ))","problem":158,"user":"5159849ce4b0394f658fe236"},{"code":"(fn decurry [f] (fn c ([x  & rest] (apply (decurry (f x)) rest)) ([] f)))","problem":158,"user":"4e9a1512535dbda64a6f6b6e"},{"problem":158,"code":"(fn[f] (fn [& s] (reduce #(% %2) f s)))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn g [f]\n  #(if %& (apply (g (f %)) %&) (f %)))","problem":158,"user":"536e0930e4b0fc7073fd6e66"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f n 0]\n      (let [r (f (nth args n))]\n        (if (fn? r) (recur r (inc n)) r)))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn [f] \n  #((fn g [h [x & y]] (if y (g (h x) y) (h x))) f %&))","problem":158,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce #(% %2) f args)))","problem":158,"user":"4f465096e4b0d56e7bb92b9a"},{"code":"(fn dc [s] \n\t(fn [& args]\n\t\t(loop [f s arg args]\n\t\t\t(if (not (fn? f))\n\t\t\t\tf \n\t\t\t\t(recur (f (first arg)) (drop 1 arg))))))","problem":158,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn decurry [f]\n  (fn [& xs]\n    (reduce #(%1 %2) f xs)))","problem":158,"user":"53691dc7e4b0243289761e97"},{"code":"(fn [f] (fn [& args]\n          (loop [args args rv f]\n            (if (empty? args)\n              rv\n              (recur (rest args) (rv (first args)))))))","problem":158,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn curry [f]\n  (fn [& args]\n    (loop [f f [x & r] args]\n      (if (fn? f) (recur (f x) r) f) )))","problem":158,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [acc it] (acc it)) f args)))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [f]\n  (fn [& l]\n    (reduce #(% %2) f l)))","problem":158,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn [func]\n  (fn [& args]\n    (loop [f func a (first args) more (rest args)]\n      (if (empty? more) (f a)\n        (recur (f a) (first more) (rest more))))))","problem":158,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn [f] \r\n  (fn [& args]\r\n    (loop [f f args args]\r\n      (if (empty? args)\r\n        f\r\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"50843a4ae4b0c98812d0788b"},{"problem":158,"code":"(fn [f] \n  (fn [& xs] \n    (loop [[a & as] xs, g f]\n      (let [res (g a)]\n        (if (nil? as) res (recur as res))))))","user":"54d22860e4b0e8a36923e5ef"},{"problem":158,"code":"(fn [f]\n  #(reduce (fn [g a] (g a)) f %&))","user":"5dc72a9ce4b02f9375f4e1cd"},{"problem":158,"code":"(fn [fff]\n \n (fn f [& l]\n   (loop [res fff [fst & r] l]\n     (if (fn? res)     \n       (recur (res fst)  r)\n       res\n          )\n     )\n  )\n \n )","user":"5735ac67e4b0cd1946bd102b"},{"problem":158,"code":"(fn [func]\n   (fn [& args]\n     (loop [f func\n            vs args]\n       (let [[x & xs] vs]\n         (if (empty? vs)\n           f\n           (recur (f x) xs))))))","user":"525cc912e4b0cb4875a45d48"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f-applied f ags args]\n      (let [tf (f-applied (first ags))]\n        (if (fn? tf)\n          (recur tf (rest ags))\n          tf)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn decurry [f]\n   (fn [& args]\n     (loop [f f\n            args args]\n       (if-not (fn? f) f\n         (recur (f (first args)) (rest args))))))","problem":158,"user":"529ce629e4b04e0c58e87b6e"},{"problem":158,"code":"(fn [fs]\n   (fn [& args]\n      (reduce\n        (fn [f v] (f v))\n        fs\n        args)))","user":"5a66fddee4b0512ff01cd9d7"},{"code":"(fn [f]\n    (fn app [& args]\n      (:result (reduce (fn [{:keys [func result]} x]\n                         (let [retval (func x)]\n                           (if (fn? retval)\n                             {:func retval :result nil}\n                             {:func nil :result retval}))) {:func f :result nil} args))\n      ))","problem":158,"user":"4e9fd521535d7eef3080729a"},{"problem":158,"code":"(fn [f] (fn [& x] (reduce #(%1 %2) f x)))","user":"55205564e4b08d5046aa8a60"},{"code":"(fn p158 [f]\n  (fn [& l]\n    (reduce #(% %2) f l)))","problem":158,"user":"500b61b1e4b03d00572d2d81"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (reduce\n      (fn [y x] (y x))\n      f\n      xs)))","user":"53161a56e4b08068f379ed3e"},{"problem":158,"code":"(fn [fs] (fn [& args] (reduce #(%1 %2) fs args)))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn c [curried]\n  (fn [& args]\n    (reduce #(% %2) curried args)))","problem":158,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn [f] (fn [& a] (reduce #(% %2) f a)))","problem":158,"user":"4db858d1535d1e037afb218c"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [f arg]\n              (f arg)) f args)))","user":"505d1b01e4b0e6aca564be04"},{"problem":158,"code":"(fn [cf]\n  (fn [& args]\n  \t(loop [f cf\n           xs args]\n      (if (seq xs)\n        (recur (f (first xs)) (rest xs))\n        f))))","user":"53f5666ee4b0db01ade6f9cf"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (loop [result f args* args]\n      (if (fn? result)\n        (recur (result (first args*)) (rest args*))\n        result))))","user":"6098263be4b00e9e6653c3f9"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& vals]\n    ((fn helper [vals res]\n       (if (fn? res)\n         (helper (drop 1 vals)\n                 (res (first vals)))\n         res))\n     vals\n     f)))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":158,"code":"(fn outer [f] (fn inner [& args] (loop [a args, result f] \n                 (if (empty? a)\n                   result\n                   (recur (rest a) (result (first a)))))))","user":"546c1b2ce4b00cfc9eacc174"},{"problem":158,"code":"(fn [fun]\n  (fn [& args]\n    (loop [f fun\n           [x & xs] args]\n      (if (empty? xs)\n        (f x)\n        (recur (f x) xs)))))","user":"5594721de4b0c79f6e1db955"},{"code":"(fn [f] (fn [& r] (reduce #(%1 %2) f r)))","problem":158,"user":"4f08b15b535dcb61093f6c40"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [ff f [y & ys] xs]\n      (if (fn? ff)\n        (recur (ff y) ys)\n        ff))))","user":"4ee75ec2535d93acb0a66867"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (empty? args)\n        f\n        (recur (f (first args))\n               (rest args))))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f [x & xs] args]\n      (if (nil? x)\n        f\n        (recur (f x) xs)))))","problem":158,"user":"4dd62278535d2dad7130b5c7"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [x n]\n              (x n))\n            f\n            args)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [f]                                                                                                                                                                                                      \n  (fn [& args]                                                                                                                                                                                                    \n    (reduce (fn [f arg] (f arg)) f args)))","problem":158,"user":"4f42c80ae4b0d7d3c9f3fd0f"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n               args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":158,"code":"#(fn [& [x & c]] (loop [f % x x c c] (if (zero? (count c)) (f x) (recur (f x) (first c) (rest c)))))","user":"580c8fcee4b0849f6811b721"},{"problem":158,"code":"(letfn [(call [f a & as] (if (empty? as) (f a) (apply call (f a) as)))]\n  (fn [f] (fn [& as] (apply call f as))))","user":"5db92996e4b010eb3c36cd50"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [idx 0\n           f f]\n      (let [res (f (nth args idx))]\n        (if (fn? res)\n          (recur (inc idx) res)\n          res)))))","user":"561d8936e4b064ca9f4b16b2"},{"problem":158,"code":"(fn [fi]\n    (fn [& rgs]\n      (reduce #(%1 %2) fi rgs)))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [rest-args args g f]\n      (if (fn? g)\n        (recur (rest rest-args) (g (first rest-args)))\n        g))))","problem":158,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn [f]\n  (fn [& more]\n    ((fn [g m]\n      (if (empty? m)\n        g\n        (recur (g (first m)) (rest m)))) f more)))","problem":158,"user":"535920b2e4b04ce2eb3ed294"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& args]\n    (loop [fun f\n          args args]\n      (if (empty? args)\n        fun\n        (recur (fun (first args)) (rest args))))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":158,"code":"(fn [f]\n  (fn [a & b]\n    (loop [f (f a)\n           a (first b)\n           b (rest b)]\n      (if (= 0 (count b))\n        (f a)\n        (recur (f a) (first b) (rest b))))))","user":"544e8369e4b0e39780006987"},{"code":"(fn [f]\n  (fn\n    ([a b] ((f a) b))\n    ([a b c d] ((((f a) b) c) d))))","problem":158,"user":"50bc23e4e4b0594b91591c3c"},{"problem":158,"code":"(fn re [f]\n  (fn [& c]\n  \t(loop [c c\n           F f]\n      (if (= (count c) 1)\n        (F (first c))\n        (recur (rest c) (F (first c)))))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [current-f f remaining args]\n      (if (fn? current-f)\n         (recur (current-f (first remaining)) (rest remaining))\n         current-f))))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"problem":158,"code":"(fn [f]\n  (fn [& xs] (reduce #(%1 %2) f xs)))\n\n; This old solution applies arguments in reverse order\n; worked only because inner functions are commutative.\n;(fn [f]\n;  (fn u [x & xs]\n;    (if (empty? xs) (f x)\n;      ((apply u xs) x))))","user":"53065acbe4b02e8216869792"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      ((fn my-fn [g a] (if (fn? g)\n                        (my-fn (g (first a)) (rest a))\n                        g)) f args)))","user":"4e9ff8d0535d7eef3080729c"},{"problem":158,"code":"(fn [f] \n  (fn [& args] (reduce #(%1 %2) f args)))","user":"59156f0be4b0163c97b36f3d"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [togo (rest args)\n             sofar (f (first args))]\n        (if-not (seq togo)\n          sofar\n          (recur \n            (rest togo)\n            (sofar (first togo)))))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn decurry [fns]\n  (fn [& args] \n    (reduce #(% %2) fns args)))","problem":158,"user":"53307da1e4b019098a6f8b5e"},{"problem":158,"code":"(fn x [y] \n  (fn [& a] \n    (loop [res (y (first a)) args (rest a)]\n      (if (empty? args) res (recur (res (first args)) (rest args) ))\n     )\n    \n   )\n )","user":"56db90d4e4b0ea9b8538f80d"},{"problem":158,"code":"(fn my-curry\n  [funcs] (fn\n            [& args] (loop [func funcs\n                             arg args]\n                       (if (= 1 (count arg))\n                         (func (first arg))\n                         (recur (func (first arg)) (rest arg))))))","user":"5ce3bcd6e4b0a17bb84e2b43"},{"code":"(fn [fns] (fn [& args] (reduce #(% %2) fns args)))","problem":158,"user":"4e513758535dc968683fc4f3"},{"code":"#(comp (partial reduce apply %) (partial map list) list)","problem":158,"user":"4ff3df0fe4b0678c553fc355"},{"code":"(fn [fun]\n  (fn [& args]\n    (reduce #(%1 %2) fun args)))","problem":158,"user":"51da7e49e4b02ceefd947768"},{"problem":158,"code":"(fn ! [curriedFunc]\n  (let [uncurriedFunc \n        (fn [a1 & rArgs]\n          (let [args (cons a1 rArgs)]\n            (letfn [(trampFunc [funcOrValue args]\n                               (if (ifn? funcOrValue)\n                                 (fn [] (trampFunc (funcOrValue (first args)) (rest args)))\n                                 funcOrValue\n                                 ))]\n              (trampoline trampFunc curriedFunc args))))]\n    uncurriedFunc))","user":"52faec2ee4b047fd55837004"},{"code":"(fn [curried]\n  (fn [& args]\n    (reduce\n      (fn [f a] (f a))\n      curried\n      args)))","problem":158,"user":"4f1b0ab3535d64f603146474"},{"problem":158,"code":"(fn [f] (fn [& c] (loop [r f d c] (if (empty? d) r (recur (r (first d)) (rest d))))))","user":"5c41db45e4b08cd430848ece"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [result f\n           args args]\n      (if (fn? result)\n        (recur (result (first args)) (rest args))\n        result))))","user":"5764457ae4b0994c1922fbf3"},{"problem":158,"code":"(fn [fns] (fn [& args] (reduce #(%1 %2) fns args)))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn decurry [f]\n  (fn [ & xs]\n    ((fn [ f [x & xs] ]\n       (if (fn? f)\n         (if (nil? xs) (f x) (recur (f x) xs))\n         f))\n     f xs)))","problem":158,"user":"50fa01bce4b07934dda8b0ba"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (let \n      [\n       recursor\n       (fn recurs [function params]\n         (if \n           (empty? params) \n           function \n           (recurs (function (first params)) (rest params))\n           )\n         )\n       ] \n       (recursor func args)\n      )\n    )\n  )","user":"58950f29e4b00487982d5270"},{"problem":158,"code":"(fn [cf]\n       (fn aaa [& xs]\n           (loop [f cf xs xs]\n              (let [re (f (first xs))]\n               (if (fn? re) (recur re (rest xs)) re)))))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn[f](fn[& a](reduce #(%1 %2)f a)))","problem":158,"user":"4dd4034a535dae65d5c462df"},{"problem":158,"code":"(fn\n  [f]\n  (fn [& more]\n    (reduce #(%1 %2) f more)))","user":"5338387de4b0e30313ee6c91"},{"problem":158,"code":"(fn [F]\n    (fn [& Args]\n      (loop [Ret F First (first Args) Rest (rest Args)]\n        ;;(println First Args (fn? Ret))\n        (if (fn? Ret)\n          (recur (Ret First) (first Rest) (rest Rest))\n          Ret\n        )        \n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":158,"code":"(fn __\n  [f]\n  (fn [& args]\n    (reduce #(%1 %2)\n            f\n            args)))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f, args args]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","problem":158,"user":"4e8338d6535db62dc21a62d3"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":158,"code":"(fn [f] (fn [& args]\n                    (println args)\n                    (reduce #(apply %1 (vector %2)) f args)))","user":"5baaae06e4b0a20761a23464"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [as args\n      g f]\n      (if (empty? as)\n        g\n      (recur (rest as) (g (first as)))))))","problem":158,"user":"4dbd8388535d020aff1edf46"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n  (reduce #(% %2) f a)))","user":"55625903e4b0c656e3ff17d7"},{"code":"(fn g [f] \n  (if (fn? f) (fn [x & s] (apply (g (f x)) s)) (fn [] f))\n  )","problem":158,"user":"514457fbe4b0b4fb4ace5f43"},{"code":"(fn g [f]\n  (fn l [& xs]\n    (loop [f f\n           [x & xs] xs]\n      (if-not (seq? xs)\n        (f x)\n        (recur (f x) xs)))))","problem":158,"user":"4ee26f01535d10e5ff6f5368"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n          (reduce #(%1 %2) f args)\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn [f]\n  (fn [& x] (reduce #(% %2) f x)))","problem":158,"user":"51256b40e4b05d10e3e395f8"},{"code":"(fn decurry [func]\n  (letfn [(consume-fn [f & args]\n            (if (fn? f)\n              (recur (f (first args)) (rest args))\n              f))]\n    (partial consume-fn func)))","problem":158,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [f f\n           xs xs]\n      (if (seq xs)\n        (recur (f (first xs)) (rest xs))\n        f))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce #(%1 %2)\n            f\n            args)))","problem":158,"user":"4dc0ff08535d020aff1edf84"},{"problem":158,"code":"(fn [f]\n  (fn [& coll]\n     (reduce #(%1, %2) f coll)))","user":"585a7cb2e4b0f14aab7c874e"},{"code":"(fn [g] (fn [& more] (reduce #(%1 %2) g more)))","problem":158,"user":"4e9519b4535dbda64a6f6b2d"},{"code":"(fn [f]\n  (fn [ & coll]\n    (loop [r f input coll]\n      (if (empty? input) r\n        (recur (r (first input)) (rest input))))))","problem":158,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [f]\n(let [foo (fn [f args]\n  (let [res (f (first args))]\n    (if (fn? res)\n      (recur res (rest args))\n      res)))]\n #(foo f %&)))","problem":158,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn decurry [f]\n  (fn [ & xs] \n    (loop [ argv xs partFn f]\n      (if (= 1 (count argv))\n        (partFn (first argv))\n        (recur (next argv) (partFn (first argv)))))))","problem":158,"user":"513cb853e4b0b86ece9f322b"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce #(%1 %2 ) f args)))","user":"5776558ee4b0979f89651633"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [f arg]\n              (f arg))\n            f\n            args)))","user":"53576356e4b04ce2eb3ed27a"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f\n           [arg & more] args]\n      (let [g (f arg)]\n        (if (ifn? g)\n          (recur g more)\n          g)))))","user":"5ca14eb1e4b048ec896c5b7d"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce #(%1 (nth args %2)) f (range 0 (count args)))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [f]\n  (fn [& a]\n    ((fn [p l]\n       (if (empty? l) p\n         (recur (p (first l)) (rest l))))\n     f a)))","problem":158,"user":"51da631be4b02ceefd947766"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f [x & xs] args]\n      (if (fn? f) (recur (f x) xs) f))))","problem":158,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":158,"code":"(fn [f]\n  (fn [& more]\n    (reduce #(% %2) f more)))","user":"54ddb556e4b024c67c0cf798"},{"problem":158,"code":"(fn [f]\n  (fn [& params]\n    (reduce #(%1 %2) f params)))","user":"56288ccae4b00e49c7cb47ea"},{"problem":158,"code":"(letfn [(decurry [f [x & xs]]\n          (let [y (f x)]\n            (if (not (fn? y))\n                y\n                (decurry y xs))))]\n  (fn [f]\n    (fn [& xs]\n      (decurry f xs))))","user":"5884e807e4b0f1effa3b76a6"},{"problem":158,"code":"(fn dcr [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"54b54d1be4b05787c3b1639c"},{"problem":158,"code":"(fn [f]\n  (fn [& s] (reduce #(%1 %2) f s)))","user":"586bc870e4b01531a375e964"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (reduce (fn [x y] (x y)) func args)))","user":"54540453e4b0e397800069d2"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [f f xs xs]\n      (if (fn? f)\n        (recur (f (first xs)) (rest xs))\n        f))))","user":"56ae214ce4b03c432f18735a"},{"code":"(fn decurry [f]\n  (fn [param & more]\n    (loop [res (f param) params more]\n      (if (fn? res)\n        (recur (res (first params)) (rest params))\n        res))))","problem":158,"user":"5003deb9e4b0678c553fc445"},{"problem":158,"code":"(fn [f]\n  \t(fn [& xs]\n    \t(reduce #(%1 %2) f xs)))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [curried]\n  (fn [& args]\n    ((fn [f as] (if (seq as) (recur (f (first as)) (rest as)) f))\n     curried args)))","problem":158,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn decurry [a-fn]\n\t(fn[& more]\n\t\t(reduce (fn [acc curr] (acc curr) )\n\t\ta-fn  more)\n\t)\n)","problem":158,"user":"52763696e4b03e8d9a4a74d7"},{"problem":158,"code":"(fn [f]\n  (fn [& nums]\n    (reduce #(% %2) f nums)))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn applier [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"515737f0e4b0b0b4b87062d0"},{"code":"#(fn [ & args]\n    (reduce (fn [a b] (a b)) % args))","problem":158,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  (loop [g f args args]\n    (if (empty? args)\n      g\n      (recur (g (first args)) (rest args))))))","user":"4ff769bce4b0678c553fc38f"},{"code":"(fn [func]\n  (fn [& xs]\n  \t(loop [f func\n           v xs]\n      (if (empty? v)\n        f\n        (recur (f (first v)) (rest v))))))","problem":158,"user":"4fb12b35e4b081705acca275"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))\n        )\n      )\n    )\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":158,"code":"(fn [f-comp]\n  (fn [& args]\n    (reduce #(%1 %2) f-comp args)))","user":"5412ef7ee4b01498b1a719da"},{"problem":158,"code":"#(fn [& a] (reduce apply (conj (map list a) %)))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn decurry [f]\n  (fn [& x]\n    (loop [f f\n           x x]\n      (let [c (f (first x))]\n        (if (not (fn? c))\n          c\n          (recur c (rest x)))))))","problem":158,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [x] #(reduce (fn [u v] (u v)) x %&))","problem":158,"user":"526a7025e4b03e8d9a4a722a"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [foo f\n           coll args]\n      (if (seq coll)\n        (recur (foo (first coll)) (rest coll))\n        foo))))","user":"5151c184e4b03e678e393add"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce (fn [m e] (m e)) f args)))","user":"59fa241ee4b0ca45a743a358"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& args]\n    (reduce #(%1 %2) (f (first args)) (rest args))\n   )\n  )","user":"563b9acbe4b0bfe05bf11827"},{"problem":158,"code":"(fn decurry [f]\n  (fn my-f [& args]\n    (loop [x f, x-args args]\n      (if (empty? x-args)\n        x\n        (recur (x (first x-args)) (rest x-args))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":158,"code":"(fn [f]\n  (fn [& allargs]\n    (apply\n     (fn decurry* [fun & args]\n      (if args\n        (apply decurry* (fun (first args)) (rest args))\n        fun)) f allargs)))","user":"59f4c42ce4b0966464fe6ab6"},{"problem":158,"code":"(fn [f-curried]\n          (fn [& args]\n            (let [f (atom f-curried)]\n\t            (doseq [arg args]\n\t              (reset! f (@f arg)))\n              @f)))","user":"52b52c29e4b0c58976d9ad38"},{"code":"(fn decurry [curried-fn]\n  (fn [ & args]\n    (do\n      (let [do-fns (fn [fns params]\n                     (if (empty? params)\n                       fns\n                       (recur (fns (first params))\n                              (next params)))\n                     )]\n        (do-fns curried-fn args)\n      ))))","problem":158,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":158,"code":"(fn decurry [func]\n     (fn decurried [& start-args]\n       (loop [val func args start-args]\n         (if (seq args)\n           (recur (val (first args)) (rest args))\n           val))))","user":"53ed6976e4b0d648e757f4c4"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [args args\n           f f]\n      (if (seq args)\n          (recur (rest args) (f (first args)))\n          f))))","user":"52173464e4b082aa80a88c75"},{"problem":158,"code":"(fn\n  [function]\n  (fn [& args] (reduce (fn [acc arg] (acc arg)) function args)))","user":"58a822e4e4b01a0c0b232950"},{"problem":158,"code":"(fn uncurry [f]\n    (fn [& args]\n      (reduce #(%1 %2) f args)))","user":"5d4b2155e4b0776584bd6f28"},{"problem":158,"code":"(fn [f]\n  (fn [& args] (reduce (fn [f' x] (f' x)) f args)))","user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn [f]\n    (fn [& args]\n      (reduce #(%1 %2) f args)))","problem":158,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":158,"code":"(fn [f]\n     (fn [& params] (reduce #(%1 %2) f params)))","user":"53c38b8ce4b00fb29b22127b"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (if (and (seq args) (fn? f))\n      (apply (decurry (f (first args))) (rest args))\n      f)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":158,"code":"(fn [func]\n    (fn [& vals]\n      (loop [f func v vals]\n        (let [result (f (first v))]\n          (if (fn? result)\n            (recur result (rest v))\n            result)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":158,"code":"(fn [fns]\n   (fn [& args]\n     (reduce (fn [agg v] (agg v)) fns args)))","user":"4daeabf6edd6309eace4d15c"},{"code":"(fn [f] (fn [ & args]\n    (apply \n      (fn _d [f & [arg & args]]\n        (if (fn? f) (apply _d (f arg) args) f))\n      f args)))","problem":158,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn [f] (fn g [& args] (loop [f f, args args]\n                          (if (fn? (f (first args)))\n                            (recur (f (first args)) (rest args))\n                            (f (first args))))))","problem":158,"user":"50563ae2e4b0ce54f56f0405"},{"code":"#(fn [& t] (reduce (fn [a b] (a b)) % t))","problem":158,"user":"50705886e4b07bd6ad9b9f2a"},{"problem":158,"code":"(fn [f] \n  (fn [& args]\n    (reduce (fn [t v] (t v)) f args)))","user":"4f7207d3e4b07046d9f4f019"},{"problem":158,"code":"(fn [fs] (fn [& args]\n           (loop [f fs a args]\n             (let [r (f (first a))]\n               (if (fn? r)\n                 (recur r (rest a))\n                 r)))))","user":"506ba58be4b0eda3100c090b"},{"code":"(fn f[g] #(if %& (apply (f (g %)) %&) (g %)))","problem":158,"user":"4f296a80e4b0d6649770a02a"},{"code":"(fn uncurry\n  [fcurry]\n  (partial\n   (fn [fcurry & coll]\n     (reduce (fn [g n] (g n)) fcurry coll)) fcurry))","problem":158,"user":"524f4256e4b0541d1855b808"},{"code":"(fn [f] #(reduce (fn [f x] (f x)) f %&))","problem":158,"user":"4e6a412e535d8ccf87e9feb6"},{"code":"(fn decurry [f]\n  (fn ([x1] (f x1))\n      ([x1 & xs] (apply (decurry (f x1)) xs))))","problem":158,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":158,"code":"(fn decurry [f]\n  (fn [x & xs]\n    (if (empty? xs)\n      (f x)\n      (apply (decurry (f x)) xs))))","user":"559454f2e4b0c79f6e1db952"},{"problem":158,"code":"(fn [f] \n  (fn [& n] (reduce #(% %2) f n))\n)","user":"4eb97234535dfed6da9c6d53"},{"problem":158,"code":"(fn [f]\n        (fn [& ns]\n          (reduce #(%1 %2) f ns)))","user":"502873a8e4b01614d1633ff8"},{"code":"(fn decurry [cf] \n  (fn [& args]\n    (loop [f cf as args]\n      \t(let [ret (f (first as))] \n      \t\t(if (fn? ret)\n        \t\t(recur ret (rest as))\n        \t\tret)))))","problem":158,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f [a & as] args]\n      (if as\n        (recur (f a) as)\n        (f a)))))","problem":158,"user":"52d3f666e4b09f7907dd1327"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [args args f f]\n      (if (empty? args)\n        f\n        (recur (rest args) (f (first args)))))))","user":"53664e3be4b0243289761e74"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  \t(loop [f f, args args]\n    \t(let [res (f (first args))]\n      \t(if (fn? res) (recur res (rest args))\n       \t res)))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  (reduce #(%1 %2) f args)))","user":"57f8ba80e4b0d3187e90092f"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (let [res (f (first args))]\n      (loop [[arg & more-args :as all-args] (rest args)\n             result res]\n        (if (empty? all-args)\n          result\n          (recur more-args (result arg)))))))","user":"4ed3b4a7535d44c135fd68f5"},{"code":"#(fn [& e] (reduce deliver % e))","problem":158,"user":"4e52d815535d302ef430da77"},{"problem":158,"code":"(fn [f]\n  (fn r [& args]\n    (letfn [(r [f & a]\n              (if (fn? f)\n                (apply r (f (first a)) (next a))\n                f))]\n      (apply r f args))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":158,"code":"(fn decurry-homemade [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"525c575be4b0cb4875a45d38"},{"problem":158,"code":"(fn curry[f]\n  (fn eval-curry[& args]\n    (loop [fun f arg args]\n      (let [r (fun (first arg))]\n        (if (ifn? r) (recur r (next arg)) r)))))","user":"541619e8e4b01498b1a719f9"},{"problem":158,"code":"(fn [f] (fn [& c] (reduce #(% %2) f c)))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& args]\n    (if-let [[a & as] (seq args)]\n      (apply (uncurry (f a)) as)\n      f)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":158,"code":"(fn [cf]\n\t(fn [& args]\n\t\t(reduce #(%1 %2) cf args)))","user":"56baa68ce4b0f26550335947"},{"code":"(fn [f]\r\n   (fn [& p] (reduce #(% %2) f p)))","problem":158,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [f f xs xs]\n      (if (= 1 (count xs))\n        (apply f xs)\n        (recur (f (first xs)) (rest xs))))))","user":"5799ff45e4b05b1deef9add1"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [[a & as] args\n           g f]\n      (if as\n        (recur as (g a))\n        (g a)))))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f1 f a args]\n      (if (empty? a) f1\n        (recur (f1 (first a)) (rest a))))))","problem":158,"user":"51780f88e4b03d69594194c9"},{"problem":158,"code":"(fn [curriedFunctions] \n  (fn [& arguments ] \n    (loop [ funcs   curriedFunctions \n            params  arguments]\n      (if-let \t[next-arg (first params)]\n\t\t\t\t(recur (funcs next-arg)  (rest params))\n            \tfuncs)\n;;Not my original solution but nicer would be\n;;(reduce #(%1 %2)  curriedFunctions arguments)      \n      )))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [f]\r\n  (fn [& args]\r\n    (reduce #(% %2) f args)))","problem":158,"user":"504e14c2e4b078edc5f593bf"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  \t(loop [f f args args]\n     \t(if (empty? args)\n         \tf \n          \t(recur (f (first args)) (rest args))\n         )\n    )   \n  )\n)","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [f] (fn [& val]\n  (loop [ff f, vv val]\n  (if (fn? ff)\n    (recur (ff (first vv)) (rest vv))\n    ff\n  ))))","problem":158,"user":"4fc0853ae4b081705acca327"},{"code":"(fn t [f] \n  (fn rf [x & y]\n    (let [res (f x)]\n      (if (fn? res)\n        (apply (t res) y)\n        res)\n      )))","problem":158,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn f1 [f]\n  (fn [& r]\n    (reduce #(% %2) f r)))","problem":158,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn \n  [cf] \n  (fn \n    [& x] \n    (loop \n      [r (cf (first x)) x (rest x)] \n      (if (empty? x) r (recur (r (first x)) (rest x))))))","problem":158,"user":"5235a902e4b0a643f2dcb750"},{"problem":158,"code":"(fn [f] (fn [& more]\n(letfn [(recapply [f coll]\n  (if-let [[a & rest] coll]\n    (recapply (f a) rest) f))] (recapply f more) )))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":158,"code":"(fn[f]\n        (fn[& coll]\n          (reduce (fn[g h] (g h)) f coll)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":158,"code":"(fn [curried_func]\n\t(fn [& aaaa]\n\t\t(loop [args aaaa, next_curried curried_func]\n\t\t\t(let [a (first args)]\n\t\t\t\t(if (= nil a) next_curried\n\t\t\t\t\t(recur (next args), (next_curried a))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [res f\n           xs xs]\n      (if (empty? xs)\n        res\n        (recur (res (first xs))\n               (rest xs))))))","user":"547ad587e4b0c51c1f4d72ce"},{"problem":158,"code":"(fn [f] (fn [& a] (reduce #(% %2) f a) ))","user":"577202d2e4b0979f896515c0"},{"problem":158,"code":"(fn [f] (partial (fn [f & args] (let [g (f (first args))] (if (fn? g) (recur g (rest args)) g))) f))","user":"5addadfce4b0837691e92c13"},{"problem":158,"code":"(fn [curried]\n     (fn [& args] (loop [a args f curried]\n                      (if (= 1 (count a))\n                        (f (first a))\n                        (recur (rest a) (f (first a)))\n                      )))\n     )","user":"55f2c898e4b06e875b46ce4b"},{"problem":158,"code":"(fn f [g]\n  (fn [a & r]\n  \t(if r\n      (apply (f (g a)) r)\n      (g a))))","user":"53973e7be4b0b51d73faaee6"},{"code":"(fn f [cf]\n  (fn [x & xs]\n    (if xs\n      (apply (f (cf x)) xs)\n      (cf x))))","problem":158,"user":"50fbf811e4b0d10d794c19f1"},{"code":"(fn decurry [f]\n  (fn [& x]\n    (if (= (count x) 1)\n      (f (first x))\n      (apply\n       (decurry (f (first x)))\n       (rest x)\n       )\n      )\n    )\n  )","problem":158,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn decu [f]\n  (let [recu (fn recu [f v]\n               (if (empty? v) f\n                 (recu (f (first v)) (rest v))))]\n    (fn [& args] (recu f args))))","problem":158,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [f] (fn [& a] ((fn d [g ps] (if-let [p (first ps)] (d (g p) (rest ps)) g)) f (seq a))))","problem":158,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn [in]\n  (fn [& args]\n    (loop [in in args args]\n      (if (empty? args)\n        in\n        (recur (in (first args))\n                (rest args))))))","problem":158,"user":"4faec810e4b081705acca24e"},{"problem":158,"code":"(fn puzzle-158 [f &]\n  (fn [& args]\n    (loop [r f\n           a args]\n      (if-not a r\n        (recur (r (first a)) (next a))))))","user":"53286f84e4b09d4e7a9b5505"},{"code":"#(fn [& in2]\n    (loop [fs % [ft & rt] in2]\n      (if (nil? ft) fs\n        (recur (fs ft) rt))))","problem":158,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":158,"code":"(fn __ [vv]\n  (fn [& args]\n    (reduce (fn [acc item] (acc item)) vv args)))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn aa[f]\n  (fn res[& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"52b63875e4b0c58976d9ad41"},{"problem":158,"code":"(fn my-decurry [f]\n  (fn [& args]\n    (loop [g f\n           xs args]\n      (if (seq xs)\n        (recur (g \n                 (first xs)) \n               (rest xs))\n        g))))","user":"5596a324e4b04c1e5c31d757"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce #(% %2) f args)\n    )\n  )","user":"537f4652e4b06839e8705eb1"},{"problem":158,"code":"(fn [f] (fn [& args] (nth (reductions #(%1 %2) f args) (count args))))","user":"52570aeae4b0541d1855ba42"},{"code":"(fn decurry [f]\n  (fn [x & more]\n    (let [r (f x)]\n      (if (not (fn? r))\n          r\n          (apply (decurry r) more)))))","problem":158,"user":"4faac363e4b081705acca200"},{"problem":158,"code":"(fn[f](fn[& a](reduce #(% %2)f a)))","user":"50ed4626e4b01236b1d4983c"},{"problem":158,"code":"partial (fn [& args] (reduce #(% %2) args))","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":158,"code":"(fn [fun]\n   (fn [& args]\n     ((fn [f a]\n        (if (empty? a)\n          f\n          (recur (f (first a)) (rest a)))) fun args)))","user":"536f5900e4b0fc7073fd6e7b"},{"problem":158,"code":"(fn [curried-func]\n    (fn [& args]\n      (loop [f curried-func\n             args args]\n        (if (empty? args)\n          f\n          (recur (f (first args)) (rest args))))))","user":"511720eae4b0063b4e3e16da"},{"problem":158,"code":"; ok, needed help with this; makes total sense, though.\n(fn [f]\n     (fn [& args]\n       (reduce #(%1 %2) f args)))","user":"55f09e7be4b06e875b46ce28"},{"problem":158,"code":"(fn __ [x]\n  (if (fn? x)\n    (fn [a & aa]\n      (apply (__ (x a)) aa))\n    (fn [] x)))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [f] (fn [& xs] (reduce (fn [f x] (f x)) f xs)))","problem":158,"user":"4e50b67b535dc968683fc4ed"},{"problem":158,"code":"(fn [f] (fn[& args](reduce #(%1 %2) f args)))","user":"56baab13e4b0f26550335948"},{"code":"(fn p158 [fun]\n  (fn [& args]\n    (reduce (fn [f a] (f a)) fun args)))","problem":158,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn [curried]\n  (fn [& args]\n    (reduce #(%1 %2) curried args)))","problem":158,"user":"5027fc0ce4b01614d1633ff2"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce #(%1 %2)\n            f\n            args)))","user":"54246fcce4b01498b1a71aed"},{"problem":158,"code":"(fn [f]\n  (fn [& vars]\n    (loop [cur f, args vars]\n      (let [res (cur (first args))]\n        (if (fn? res)\n          (recur res (rest args))\n          res)))))","user":"542db41be4b0dad94371f2bb"},{"code":"(fn [c] (partial \n(fn [fc & i]\n  (loop\n      [fc fc\n       [x & r] i]\n    (if (fn? (fc x))\n      (recur (fc x) r)\n      (fc x)))) c))","problem":158,"user":"5124619ae4b02c3f2a072ccd"},{"code":"(fn [x]\n     (fn [& y]\n       (loop [f x\n              a y]\n         (if (fn? f)\n           (recur (f (first a)) (rest a))\n           f))))","problem":158,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (fn? f)\n          (recur (f (first args)) (rest args))\n          f))))","problem":158,"user":"50435689e4b034ff00315d21"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [f a] (f a)) f args)))","user":"58bb218be4b0888cdc949cf4"},{"problem":158,"code":";; recursive version:\n(fn decurry [curried-fn]\n    (fn closure [& args]\n      (letfn [(decurry-recur \n                 [curried-fn [head & tail]]\n                 (if (nil? tail)\n                   (curried-fn head)\n                   (recur (curried-fn head) tail)))]\n        (decurry-recur curried-fn args))))\n\n;; using hofs:\n#_(fn decurry [curried-fn]\n  (fn [& args]\n    (reduce #(% %2)\n       (curried-fn (first args)) (rest args))))","user":"5553b729e4b0deb715856e05"},{"problem":158,"code":"(fn [fns]\n  (fn [& args]\n    (loop [f fns\n           a args]\n      (if (fn? f)\n        (recur (f (first a)) (rest a))\n        f))))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn [f]\n    (fn [& args] (reduce #(%1 %2) f args)))","problem":158,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":158,"code":"(fn [f]\n  (fn [& args] \n    (loop [[h & r] args g f]\n      (if-not h g \n        (recur r (g h))))))","user":"58f44c07e4b0438e51c2ceb7"},{"code":"(fn [f]\n  (fn [& vs]\n    (reduce #(%1 %2) f vs)))","problem":158,"user":"4f050dec535dcb61093f6bef"},{"problem":158,"code":"(fn un-curry [func]\n  (fn [& args]\n    (loop [rf func ax args]\n      (if (empty? ax)\n        rf\n        (recur (rf (first ax)) (rest ax))))))","user":"57f9011ee4b0d3187e900935"},{"problem":158,"code":"(fn [curried-f] (fn [& args] (reduce #(%1 %2) curried-f args)))","user":"5c13da47e4b01240ff5671a6"},{"problem":158,"code":"(fn [f] (fn [& y]\n          (reduce (fn [p n] (p n)) (f (first y)) (rest y) \n          )))","user":"56066e82e4b08b23635d3173"},{"problem":158,"code":"(fn [f] #(reduce (fn [g v] (g v)) f %&))","user":"5458c74de4b01be26fd74623"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [nf arg] (nf arg)) f args)))","user":"4ee528fb535d1385b2869d87"},{"problem":158,"code":"(fn [f] (fn [& more] (reduce #(%1 %2) f more)))","user":"52e17e66e4b09f7907dd1423"},{"problem":158,"code":"(fn peu [x] \n  (fn [& a] \n    (if (= 1 (count a)) \n      (x (first a)) \n      (apply (peu (x (first a))) (rest a)))))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [f]\n\t(fn [& l]\n    \t(reduce (fn [f n] (f n)) f l)))","problem":158,"user":"51aefceee4b09397d5109797"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [args args\n              f f]\n      (if (or (not (fn? f)) (empty? args))\n        f\n        (recur (rest args) (f (first args)))))))","problem":158,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [f]\n  (fn un [& args]\n    (reduce\n     (fn [sofar arg]\n       (sofar arg))\n     f\n     args)))","problem":158,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn [f]\n  (fn [& x] (reduce #(%1 %2) f x)))","problem":158,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn [f]\n    (fn [& as]\n      (loop [f f [a & as] as]\n        (if (ifn? f)\n          (recur (f a) as) f))))","problem":158,"user":"52dc2bc8e4b09f7907dd13ca"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& argv] (reduce  #(%1 %2) f argv))\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (if (seq args)\n      (reduce #(%1 %2) f args)\n      (f))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (reduce #(%1 %2)\n            (f (first xs))\n            (rest xs))))","user":"505aa653e4b021387fb89857"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (if (empty? args)\n      nil\n      (loop [f (f (first args))\n             args (rest args)]\n        (if (empty? args)\n          f\n          (recur (f (first args)) (rest args)))))))","user":"4e82c062535db62dc21a62cc"},{"code":"(fn decurry[fns]\n  (fn [& args]\n    (loop [f fns a args]\n      (if (not (fn? (f (first a)))) (f (first a))\n          (recur (f (first a)) (rest a))))))","problem":158,"user":"4fb86dc9e4b081705acca2d8"},{"code":"(fn [f]\r\n  (fn [& xs]\r\n    (ffirst (drop-while #(fn? (first %))\r\n              (iterate (fn [[g ys]] [(g (first ys)) (rest ys)])\r\n                [f xs])))))","problem":158,"user":"4f969214e4b0dcca54ed6cdd"},{"code":"(fn [c]\n  (fn [& args]\n    ((fn [f args]\n        (if (empty? args)\n          f\n          (recur (f (first args))\n                 (rest args))))\n     c args)))","problem":158,"user":"4f8345c6e4b033992c121c1b"},{"problem":158,"code":"(fn [curried]\n  (fn [& args]\n    (reduce\n      (fn [f a]\n        (f a))\n     curried args)))","user":"60836285e4b0736b099e42e4"},{"code":"(fn [f]\n    (fn [& a]\n      (reduce #(% %2)\n              f a)))","problem":158,"user":"52c25645e4b07a9af579237d"},{"problem":158,"code":"(fn [f]\n\t(fn [& args]\n      (reduce #(%1 %2) f args)))","user":"5553b924e4b0deb715856e06"},{"problem":158,"code":"(fn decurry [f]\n  (fn [a & args] (loop [fa (f a), args args]\n                   (if (empty? args)\n                     fa\n                     (recur (fa (first args)) (rest args))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":158,"code":"(fn [curried-fn]\n  (letfn [(uncurry [curried-fn args]\n            (if (= 1 (count args))\n              (curried-fn (first args))\n              (uncurry (curried-fn (first args)) (rest args))))]\n    (fn [& args]\n      (uncurry curried-fn args))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [f]\n  (fn [& args] (reduce #(%1 %2) f args)))","problem":158,"user":"50586354e4b06522596eba78"},{"code":"(fn [f] \n  (fn [& xs]\n    (reduce #(%1 %2) f xs)))","problem":158,"user":"536ca4bde4b0fc7073fd6e49"},{"code":"(fn [f]\n          (fn [& args]\n            (reduce #(%1 %2) f args)))","problem":158,"user":"4e89f46c535d3e98b8023288"},{"code":"(fn [f]\n  (fn [& xs]\n    (loop [fi f\n           [a & as] xs]\n      (if (empty? as)\n        (fi a)\n        (recur (fi a) as)))))","problem":158,"user":"4e7f4147535db966e863cc3d"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  \t(reduce #(% %2) f args)))","user":"55cdc576e4b0e31453f64a1f"},{"problem":158,"code":"(fn [my-curry]\n   (fn [& arg-list] \n     (reduce #(%1 %2) my-curry arg-list))\n)","user":"591e0782e4b09b4ee5954c25"},{"problem":158,"code":"(fn [f] (fn [x & xs] (reduce #(% %2) (f x) xs)))","user":"5c379636e4b0d62ef62d9f76"},{"code":"#(fn [& a] (reduce (fn [f a] (f a)) % a))","problem":158,"user":"4f0664bd535dcb61093f6c0f"},{"problem":158,"code":"(fn [f]\n  (partial (fn\n                                ([f & args]\n                                   (if (empty? args)\n                                     f\n                                     (recur (f (first args)) (rest args))))) f))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (loop [result f\n           args args]\n      (if (fn? result)\n        (recur (result (first args)) (rest args))\n        result))))","user":"4fc524aae4b081705acca37e"},{"code":"partial (fn [& x] (reduce #(%1 %2) x))","problem":158,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn dc [f] (if (fn? (f 0)) (fn [y & ys] (apply (dc (f y)) ys)) f))","problem":158,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn decurry [funct]\r\n  (fn [& args]\r\n    (reduce #(%1 %2) funct args)))","problem":158,"user":"5065bd94e4b0148eb3925aed"},{"code":"(fn [f]\n  #(reduce deliver f %&))","problem":158,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":158,"code":"(fn [f] (fn [& args] (loop [args args v f] (if (seq args) (recur (rest args) (v (first args))) v))))","user":"54f0d3fde4b024c67c0cf8a6"},{"problem":158,"code":"(fn dc [f]\n  (fn [n & a]\n    (if (empty? a)\n      (f n)\n      (apply (dc (f n)) a))))","user":"586615e6e4b0f14aab7c8858"},{"problem":158,"code":"(fn [f]\n                   (fn [& args]\n                     (reduce #(%1 %2) f args)))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn decurry [f_]\n  (fn [ & args_ ]\n    (loop [f f_ args args_]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","problem":158,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn d [f]\n  (fn [& x]\n  (reduce #(%1 %2) f x)))","problem":158,"user":"4ff4c9dae4b0678c553fc360"},{"problem":158,"code":"(fn decurry [fun]\n  (fn [& args]\n    (reduce (fn [f x] (f x)) fun args)))","user":"566ff0a1e4b0a866af6896ec"},{"problem":158,"code":"(fn [x]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg)) x args)))","user":"52474133e4b05ef8e38e635e"},{"code":"(fn __ [x] (fn  \r\n  \t\t\t\t([a] (x a))\r\n\t\t\t\t\t([a b] ((x a) b))\r\n\t\t\t\t\t([a b c] (((x a) b) c))\r\n\t\t\t\t\t([a b c d] ((((x a) b) c) d))\r\n\t\t\t\t\t)\r\n\t\t\t\t\t)","problem":158,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce #(%1 %2) f args))) ;; ugh mental gymnastics","user":"4e6a4950535d8ccf87e9febf"},{"problem":158,"code":"(fn [curry-f]\n  (fn [& args]\n    (loop [f curry-f\n           args args]\n      (if (= 1 (count args))\n        (f (first args))\n        (recur (f (first args)) (rest args))))))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [c]\n  (fn [& args]\n    (reduce #(%1 %2) c args)))","problem":158,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":158,"code":"(fn [fn-coll]\n  (fn [& args]\n    (reduce #(%1 %2) fn-coll args)))","user":"5f79bff2e4b02876ed9fd0ca"},{"problem":158,"code":"(fn [f]\n  (letfn [(decurry [f [h & t]]\n    (if (empty? t)\n        (f h)\n        (decurry (f h) t)))]\n    (fn [& args] (decurry f args))))","user":"5901158de4b0438e51c2d039"},{"code":"(fn [f]\r\n  (fn [& xs]\r\n    (reduce #(%1 %2) f xs)))","problem":158,"user":"4ff63f3fe4b0678c553fc377"},{"problem":158,"code":"(fn dc\n  [f]\n  (fn [& l]\n    (if (= 1 (count l))\n      (apply f l)\n      (apply (dc (f (first l))) (rest l)))))","user":"583048d9e4b051871117c007"},{"problem":158,"code":"(fn decurry [cur-fn]\n  (fn [& args]\n    (reduce (fn [acc arg]\n              (acc arg))\n            cur-fn\n            args)))","user":"5ddb6151e4b0948ae9d9adb0"},{"problem":158,"code":"(fn curry [fun]\n  (fn [& args]\n   (loop [f fun\n          a args]\n    (if a\n      (recur (f (first a))(next a))\n      f))))","user":"534fa9dae4b084c2834f4acf"},{"problem":158,"code":"#(fn [& all-args]\n\t(loop [result %, args all-args]\n\t\t(if (empty? args)\n\t\t\tresult\n\t\t\t(recur (result (first args)) (rest args)))))","user":"5370b386e4b0fc7073fd6e9b"},{"code":"(fn decurry [curried]\n  (fn [& args]\n      (loop [ f curried x (first args) tail (rest args)]\n        (if (fn? f)\n         (recur (f x) (first tail) (rest tail)) \n         f))))","problem":158,"user":"50783762e4b0fc74642bff67"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [v (f (first args)), args (rest args)]\n      (if (fn? v) (recur (v (first args)) (rest args))\n        v))))","problem":158,"user":"51e00020e4b01188f0627534"},{"problem":158,"code":"(fn decurry [f]\n  (fn [arg & args]\n    (reduce #(%1 %2) (f arg) args)))","user":"528bba38e4b0239c8a67aea9"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [a args\n           n f]\n      (if (fn? n)\n        (recur (rest a) (n (first a)))\n        n))))","problem":158,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn [f] (fn [& as] (reduce #(% %2) f as)))","problem":158,"user":"4e8612f8535db62dc21a62f2"},{"problem":158,"code":"(fn [f]\n  (letfn [(go [f' & xs]\n              (if (empty? xs)\n                f'\n                (apply go (cons\n                           (f' (first xs))\n                           (rest xs)))))]\n    (fn [& xs']\n      (apply go (cons f xs')))))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [f] (fn [& l] (reduce #(%1 %2) f l)))","problem":158,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":158,"code":"(fn decurry [func]\n  (fn [& args]\n    (loop [[first-arg & rest-args] args res func]\n      (if (not (fn? res))\n        res\n        (recur rest-args (res first-arg))))))","user":"54f09599e4b024c67c0cf89d"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [f x] (f x)) f args)))","user":"56aad332e4b03c432f187337"},{"code":"(fn[f]\n  (fn[& s] \n    (reduce #(%1 %2) f  s )))","problem":158,"user":"4deff9f9535d08e6dec9fe15"},{"problem":158,"code":"(fn solve [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"#(fn [& s]\n  (loop [a s f %]\n    (if (empty? a) f\n        (recur (rest a) (f (first a))))))","problem":158,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":158,"code":"(fn [f]\r\n  (fn [& a]\r\n    (reduce #(%1 %2) f a)))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn [f] (fn [& x] (reduce #(% %2) f x)))","problem":158,"user":"4db091b7838c48654951d9c2"},{"problem":158,"code":"(fn decurry [h]\n  (fn [& v]\n    (loop [g h args v]\n      (if (empty? args)\n        g\n        (recur (g (first args)) (rest args))))))","user":"5f86a98be4b0649ffcda4caa"},{"problem":158,"code":"(fn [u] #(reduce (fn [f x] (f x)) u %&))","user":"53b15e6ee4b047364c04448f"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [op x] (op x)) f args)))","user":"54448e84e4b032a45b869393"},{"problem":158,"code":"(fn [f]\n (fn\n  ([a b] ((f a) b))\n  ([a b c d] ((((f a) b) c) d))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn [f]\n  (fn [& c]\n    (reduce #(% %2) f c)))","problem":158,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":158,"code":"#(partial\n  (fn [f & [h & t]]\n    (if h\n      (recur (f h) t)\n      f))\n  %)","user":"505106fee4b05ab4c7e07d38"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (reduce (fn [f arg] (f arg)) f args)\n    ))","user":"5429986ce4b01498b1a71b3b"},{"code":"(fn uncurry [f]\n  #(reduce deliver f %&))","problem":158,"user":"4f6160a7e4b0defedf855fbe"},{"problem":158,"code":"(fn [f]\n    (fn [& lst]\n      (loop [f f lst lst]\n        (if (empty? lst) f\n          (recur (f (first lst)) (rest lst))))))","user":"55aa1637e4b0988bba2ad949"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    ((fn r [f a]\n      (if a\n        (r (f (nth a 0)) (next a))\n        f))\n     f a)))","user":"52bacfa8e4b07a9af57922d6"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [cf arg] (cf arg)) f args)))","user":"55c4cda5e4b0e31453f649a5"},{"problem":158,"code":"(fn decurry [f]\n  \t(fn [& args]\n    \t(reduce (fn [acc x] (acc x)) f args)))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (next args)\n\t(recur (f (first args)) (next args))\n\t\t(f (first args))))))","problem":158,"user":"4ebe766d535dfed6da9c6d94"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& as]\n    (reduce #(%1 %2) f as)))","user":"5880e38fe4b0f1effa3b7625"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce\n      #(%1 %2)\n      f\n      args\n    )\n  )\n)","problem":158,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":158,"code":"(fn\n  [func]\n  (fn [& args] (reduce #(%1 %2) func args)))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [res val] (res val)) f args)))","user":"5f419985e4b0955706451fab"},{"problem":158,"code":"(fn [f] (fn [& args]\n          (reduce\n            (fn [acc a] (acc a))\n            f\n            args)))","user":"554680cbe4b0a04f7929953e"},{"problem":158,"code":"(fn [f] (fn \n    [& xs] \n    (loop\n      [[y & ys] xs\n       g f]\n      (if (seq ys)\n        (recur ys (g y))\n        (g y)))))","user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn decurry\n  [f]\n  (fn\n    [& args]\n    (reduce #(% %2) f args)))","problem":158,"user":"511b233ae4b07ab9ec456180"},{"code":"(fn [f]\n  (fn [& ps]\n    (reduce #(% %2) f ps)))","problem":158,"user":"52753740e4b03e8d9a4a74c1"},{"problem":158,"code":"(fn my-decurry [fun]\n  (fn helper [& args]\n    (reduce (fn [acc curr]\n              (acc curr)) fun args)))","user":"5456e4e7e4b080a794c2c883"},{"problem":158,"code":"(fn [g]\n  (let [decurry-rec\n        (fn [g [fst & rst]]\n          (if (number? g)\n            g\n            (recur (g fst) rst)))]\n    (fn decurry [& args]\n      (decurry-rec g args))))","user":"56795deae4b05957ce8c6187"},{"code":"(fn [cur]\n  (fn [& xs]\n    (reduce #(% %2) cur xs)))","problem":158,"user":"52b65f26e4b0c58976d9ad43"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce #(%1 %2)\n            (f (first args))\n            (rest args))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn [f] (partial (fn [f & args] (reduce #(%1 %2) f args)) f))","problem":158,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"code":"(fn [f]  \n    (fn [p1 & args]\n      (reduce \n        (fn [acc item] (acc item))\n        (f p1)\n        args)\n      ))","problem":158,"user":"4dca8b6d535d5973398f9288"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (loop [v (f (first args))\n           remaining (rest args)]\n      (if (empty? remaining)\n        v\n        (recur (v (first remaining)) (rest remaining))))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn __ [c]\n  (fn f [& s]\n    (if (fn? c)\n      (apply\n       (__ (c (first s)))\n       (rest s))\n      c)))","problem":158,"user":"523ed522e4b057c4b7cd0a78"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f (f (first args))\n           args (rest args)]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","user":"56ef077ae4b04a395b9a0459"},{"problem":158,"code":"(fn a [f] \n     \n   (fn b [& x] \n    (loop [i 0 funct f]\n         (if \n           (< i (count x))  \n             (recur (inc i) (funct (nth x i)) )\n             funct \n         )\n    )\n   )\n )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":158,"code":"(fn F [f]\n  (if (fn? f)\n    (fn [& xs] (apply (F (f (first xs))) (next xs)))\n    (fn [] f)))","user":"567b39b6e4b05957ce8c61a3"},{"code":"(fn [f]\n  (fn  [ & s ]\n    (reduce #(% %2) f s)))","problem":158,"user":"50901b2ee4b0ea685a20f774"},{"problem":158,"code":"(fn [pf]\n  (fn [& args]\n    (loop [f pf, as args]\n      (if (empty? as)\n          f\n          (recur (f (first as)) (rest as) )))))","user":"593f95d8e4b069cdc2982be3"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (loop [f func\n           a args]\n      (if (fn? f)\n        (recur (f (first a)) (rest a))\n        f))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"#(fn [& p] \n    (apply \n      (fn [f & a]\n        (let [x (f (first a))]\n          (if (fn? x) (recur x (rest a)) x))) \n      % p))","problem":158,"user":"4f1d1d95535d64f603146488"},{"code":"(fn [f] (fn [& a](reduce #(%1 %2) f a)))","problem":158,"user":"50d86fe2e4b01f0871336e67"},{"code":"(fn [ff]\n  (fn [& args]\n    (reduce #(% %2) ff args)))","problem":158,"user":"50f48298e4b004d364930527"},{"code":"(fn __ [f]\n  (fn [& args]\n    (reduce #(% %2) f args)))","problem":158,"user":"52828298e4b0757a1b17145b"},{"problem":158,"code":"(fn [curried-fn]\n  (fn [& args]\n    (reduce #(%1 %2) curried-fn args)))","user":"52761edae4b03e8d9a4a74d4"},{"problem":158,"code":"(fn [f]\n    (fn [& x]\n      (reduce #(%1 %2) f x)))","user":"4e837808535db62dc21a62d9"},{"code":"(fn uncurry [cf]\n  (fn [arg & args]\n    (let [cff (cf arg)]\n      (if (fn? cff)\n        (apply (uncurry cff) args)\n        cff))))","problem":158,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& vals]\n    (loop [vals vals f f]\n      (if (fn? (f (first vals)))\n        (recur (rest vals) (f (first vals)))\n        (f (first vals))\n        ))))","user":"55e6c3f5e4b050e68259b48c"},{"problem":158,"code":";(fn [f]\n;  (fn [args]\n;    (reduce #(%1 %2) f args)))\n\n; My original answer is above.\n; The version below uses `deliver` in place of #(%1 %2),\n; which allows the inner fn to be rewritten as an\n; anonymous function literal - #(...)\n\n(fn [f]\n  #(reduce deliver f %&))","user":"5de12192e4b0948ae9d9aded"},{"code":"(fn decurry [f & args]\n  (fn [& args] \n     (reduce #(%1 %2) f args)))","problem":158,"user":"523a9fc9e4b081681ca7adca"},{"problem":158,"code":"(fn [f] (fn [& ns](reduce #(%1 %2) f ns)))","user":"58e7229fe4b056aecfd47cc4"},{"problem":158,"code":"(fn [fs]\n  (fn [& vs]\n    (loop [f fs\n         [x & xs] vs\n         ]\n    (if-not x\n      f\n      (recur (f x) xs)))))","user":"587fb546e4b0f1effa3b75f9"},{"problem":158,"code":"(fn [f]\n  (fn [& coll] (reduce #(%1 %2) f coll)))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn uncurry [cfn]\n  (fn [ & args]\n    (reduce #(% %2) cfn args)))","problem":158,"user":"4f569218e4b0a7574ea71826"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& input]\n    (reduce #(%1 %2) f input)))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn decur\n  [afn]\n  (fn [& args]\n    (let [result (afn (first args))]\n      (if (fn? result)\n        (apply (decur result) (rest args))\n        result))))","problem":158,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [cf]\n  (fn [& args]\n    (reduce #(%1 %2) cf args)))","problem":158,"user":"504e04a4e4b078edc5f59397"},{"problem":158,"code":"(fn __ [f] \n  (fn [& args] \n    (reduce #(%1 %2) f args)))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"#(partial (fn [fs & a]\n  (loop [ff fs aa a]\n    (if (fn? ff)\n        (recur (ff (first aa)) (rest aa))\n      ff))) %)","problem":158,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn [f]\n  (partial\n   (fn [f & args]\n     (let [g (f (first args))]\n          (if (fn? g)\n            (recur g (rest args))\n            g)))\n   f))","problem":158,"user":"523f1245e4b01c266ffa7f95"},{"code":"(fn uncurry-function [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"4fae4c11e4b081705acca248"},{"problem":158,"code":";(letfn [(decur [f args]\n ;          (if (fn? f) \n  ;           (decur (f (first args)) (rest args))\n   ;          f))\n    ;     (g [fcur & more]\n     ;       (decur fcur more))\n      ;   (fres [f] \n       ;        (partial g f))]\n   ;fres)\n   \n   (letfn [(decur [f args]\n           (if (fn? f) \n             (decur (f (first args)) (rest args))\n             f))\n         (fres [f] \n               (fn [& args] (decur f args)))]\n   fres)","user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn [f]\n  (fn decurry [& args]\n    (loop [f f\n           args args]\n      (if-let [a (first args)]\n        (recur (apply f [a]) (rest args))\n        f))))","problem":158,"user":"4fc3a72ae4b081705acca342"},{"problem":158,"code":"(fn [f]\n             (fn [& args]\n               (loop [current-f f\n                      current-args args]\n                 (if (= 1 (count current-args))\n                   (current-f (first current-args))\n                   (recur (current-f (first current-args)) (rest current-args))))))","user":"53f891eee4b0de5c4184856d"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [v (f (first args))\n             a (rest args)]\n        (if (fn? v)\n          (recur (v (first a)) (rest a))\n          v))))","user":"55a372f1e4b0acc240e31537"},{"code":"(fn [f]\n  (fn [& s]\n    ((fn [f s]\n      (if (empty? s)\n        f\n        (recur (f (first s)) (rest s))))\n     f s)))","problem":158,"user":"4f404dcee4b0e243712b1fb0"},{"problem":158,"code":"(fn [f] (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"516385cee4b055933a9ca02d"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (reduce #(%1 %2) (conj args func))))","user":"53322cece4b019098a6f8b73"},{"problem":158,"code":"(fn [fun] (fn [& args] (reduce #(%1 %2) fun args)))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn f [fs]\n  (fn [& args]\n    (loop [foo fs arg args]\n      (if (fn? foo)\n        (recur (foo (first arg)) (rest arg))\n        foo))))","problem":158,"user":"518ccf6be4b05e6c8537e386"},{"problem":158,"code":"(fn s [f & [a & _]]\n  (if (fn? f)\n    (if (nil? a)\n      (partial s f)\n      (apply s (f a) _)\n    )\n    f\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [fs]\n  (fn [& args]\n    (reduce #(%1 %2) fs args)))","problem":158,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [f]\n  (fn [& arg]\n     (reduce #(%1 %2) f arg)))","problem":158,"user":"501c1492e4b086d93747d180"},{"problem":158,"code":"(fn foo [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"5bab5440e4b0a20761a23475"},{"problem":158,"code":"(fn betterdecurry [fun]\n  (fn [& as]\n    (reduce #(%1 %2) fun as)))","user":"5abeb697e4b073f177442725"},{"problem":158,"code":"(fn [cfn]\n  (fn [& args]\n    (reduce #(%1 %2) cfn args)))","user":"5a00cb31e4b01bb0ae8afd36"},{"problem":158,"code":"(fn f [fs]\n    (fn g [& ns]\n      (print ns)\n      (if (empty? ns)\n        fs\n        (apply (f (fs (first ns))) (rest ns)))))","user":"5e08c3dde4b0978307768fc8"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (reduce (fn [f a] (f a)) f args)))","user":"507e68abe4b085af06e3afd2"},{"problem":158,"code":"(fn [curry]\n  (fn [& args]\n    (reduce #(%1 %2) curry args)))","user":"561ca2eae4b064ca9f4b169b"},{"problem":158,"code":"(fn decurry\n  [func]\n  (fn [& args]\n    (reduce #(%1 %2) (cons func args))))","user":"5545477fe4b0a04f79299531"},{"code":"(fn [cr]\n     (partial (fn decur [cur & args]\n                (if (pos? (count args))\n                  (apply decur (cur (first args)) (rest args))\n                  cur)) cr)\n     )","problem":158,"user":"50d3b03fe4b030b634c368b9"},{"problem":158,"code":"#(fn [& xs]\n   (reduce (fn [f x] (f x)) % xs))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn [cf]\n  (fn [& more]\n    (loop [rf cf ra more]\n      (if (not ra)\n        rf\n        (recur (rf (first ra)) (next ra))))))","problem":158,"user":"4e8768f6535dceadca469850"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [ar args\n             func-to-call f]\n        (if (empty? ar)\n          func-to-call\n          (let [nextret (func-to-call (first ar))]\n            (recur (rest ar) nextret))))))","user":"56eaad95e4b04a395b9a040f"},{"problem":158,"code":"(fn decurry [f]\n  (fn apply-func [& args]\n\t(reduce #(%1 %2) f args)))","user":"5591cc56e4b0604b3f94d582"},{"problem":158,"code":"(fn decurry [cf]\n  (fn [& args]\n    (loop [cf cf\n           [arg & more] args]\n      (if-not (fn? cf)\n        cf\n        (recur (cf arg) more)))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":158,"code":"(fn [f]\n (fn [& args]\n  (loop [res f curr-sq args]\n    (if curr-sq\n      (recur (res (first curr-sq)) (next curr-sq))\n      res))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"problem":158,"code":"(fn [funcs]\n  (let [value (atom funcs)]\n  \t(fn [& args]\n      (if (fn? @value)\n        (do (reset! value (@value (first args)))\n        \t(recur (rest args)))\n        @value))))","user":"53d977f1e4b0e771c302547a"},{"problem":158,"code":";; With custom reduce fn:\n;(fn [f] (fn [& s] (reduce #(% %2) f s)))\n\n;; Without a custom reduce fn:\n(fn [f] (fn [& s] (reduce (comp (partial apply apply) reverse (partial cons []) reverse list) f s)))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn [cf] (fn [& args]\r\n              (loop [f cf a args]\r\n                (let [r (f (first a))]\r\n                  (if (fn? r)\r\n                    (recur r (rest a))\r\n                    r)))))","problem":158,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn decurry\n  [f]\n  (partial (fn [f & [farg & rargs]]\n             (let [ret (f farg)]\n               (if (fn? ret)\n                 (recur ret rargs)\n                 ret)))\n           f))","problem":158,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":158,"code":"#(fn [& sq] (loop [fun % sq sq]\n   (if (not (fn? fun))\n     fun\n     (recur (fun (first sq)) (rest sq))\n  )\n )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":158,"code":"(fn [c]\n\t(fn [& s]\n\t\t((fn [d t]\n\t\t\t(if (empty? t) d (recur (d (first t)) (rest t)))) c s)))","user":"57ccedaae4b0c746388ab88e"},{"code":"(fn [z] (fn [& l] (loop [fs z n 0] (if (fn? fs) (recur (fs (nth l n)) (inc n)) fs ))))","problem":158,"user":"52265e41e4b04e78ff2e1981"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce #(%1 %2)\n            f\n            args)))","problem":158,"user":"4e7f32ee535db966e863cc3a"},{"problem":158,"code":"(fn [f]\n  (fn [x & xs]\n    (reduce #(%1 %2)\n            (f x)\n            xs)))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":158,"code":"(fn unc [c]\n  (fn [& l]\n    (loop [acc c args l]\n  \t\t(if (nil? args) acc\n    \t\t(recur (acc (first args)) (next args))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn decurry [fs]\n  (fn inner [& args]\n    (loop [f fs, [x & xs] args]\n      (if (fn? f)\n        (recur (f x) xs)\n        f))))","problem":158,"user":"509160dae4b0742c82730aef"},{"code":"(fn [f]\n    (let [arg-count (fn [f] 1)]\n      (fn [& args] (loop [g f \n                          a args]\n                     (if (fn? g)\n                       (let [n       (arg-count g)\n                             [ga ra] (split-at n a)] \n                         (recur (apply g ga) ra))\n                       g)))))","problem":158,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":158,"code":"(fn c [f]\n    (fn d [& l]\n      (loop [g f\n             k l]\n        (if (empty? k)\n          g\n          (recur (g (first k)) (rest k))))))","user":"603ae21de4b0d5df2af222fb"},{"problem":158,"code":"(fn decurry-reduce [f]\n  (fn [& args]\n    (let [throw-arity #(throw (clojure.lang.ArityException. (count args) (str f)))\n          result (reduce #(if (fn? %1) (%1 %2) (throw-arity)) f args)]\n      (if (fn? result) (throw-arity) result))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce #(apply %1 [%2]) f args)))","problem":158,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [f] (fn [& v] (reduce #(%1 %2) f v)))","problem":158,"user":"528652fbe4b0239c8a67ae14"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [x y] (x y))\n            f\n            args)))","user":"55c4e48be4b0e31453f649a7"},{"problem":158,"code":"(fn [f]\n   (fn [& args]\n     (reduce #(if (fn? %) (% %2) %) f args)))","user":"53ea5307e4b036ad0777e4e2"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [func arg] (func arg)) f args)\n    ))","user":"564a560ae4b0284900eef654"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args] (reduce #(% %2) f args)))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn decurry [f]\n    (fn [& args]\n      (reduce #(%1 %2)\n              f\n              args)))","problem":158,"user":"4daea889edd6309eace4d15b"},{"code":"(fn [fs]\r\n  #(loop [[x & xs] %&\r\n          r fs]\r\n    (if xs\r\n      (recur xs (r x))\r\n      (r x))))","problem":158,"user":"4f58d92fe4b0a7574ea71858"},{"code":"(fn d [c] #(if %& (apply (d (c %)) %&) (c %)))","problem":158,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn decurry \n  [f]\n  (fn [& args]\n    (let [r (f (first args))]\n      (if (fn? r)\n        (apply (decurry r) (rest args))\n        r))))","problem":158,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn [f]\n  (partial\n    (fn decurry [f & args]\n      (let [[a & remains] args]\n        (if a\n          (apply decurry (f a) remains)\n          f)))\n   f))","problem":158,"user":"512d3304e4b040332b905b2d"},{"code":"(fn [f]\n    (fn [& args] (reduce #(%1 %2) f args))\n    )","problem":158,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [fns]\n  (fn [& args]\n    (reduce \n      (fn [acc e] (acc e))\n      fns\n      args)))","problem":158,"user":"5012ec0ae4b0c87326002230"},{"code":"(fn [f]\n  (fn [& ns]\n    (reduce #(%1 %2) f ns)))","problem":158,"user":"4dafa380edd6309eace4d17c"},{"problem":158,"code":"(fn my-decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [g arg]\n              (g arg)) f args)))","user":"506f0968e4b09350ab4199f5"},{"problem":158,"code":"(fn [fx] (fn [& xs] (reduce #(% %2) fx xs)))","user":"53e9a15be4b036ad0777e4ae"},{"code":"#(partial\n    (fn decur [f & args]\n      (let [a (first args), rargs (rest args)]\n        (if (nil? a)\n          f\n          (apply decur (f a) rargs))))\n    %)","problem":158,"user":"504c8165e4b09724c857af31"},{"code":"(fn unc [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if-not (fn? f) f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"50366589e4b0fbe0a74d26c3"},{"problem":158,"code":"(fn solve [cf]\n  (fn [& xs] (reduce #(%1 %2) cf xs)))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn [cf]\n  (fn [& args] (reduce #(% %2) cf args)))","problem":158,"user":"5392b849e4b0b51d73faaeb1"},{"problem":158,"code":"(fn uncurry [f]\n  #(reduce deliver f %&))\n#_\n(fn uncarry [f]\n  #(reduce (fn [acc v] (acc v)) f %&))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn uncurry [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"500933a6e4b046cdb195e074"},{"problem":158,"code":"(fn [f]\n  (partial\n   (fn [f & args]\n      (let [result (f (first args))]\n        (if (seq (rest args))\n          (recur result (rest args))\n          result)))\n   f))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn curry2 [f]\n    (fn res [& args]\n      (let [tmp (f (first args))]\n        (if-not (fn? tmp) tmp\n                (apply (curry2 tmp) (rest args))))))","problem":158,"user":"4e49a7bb535dc968683fc4c6"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [args args\n           f f]\n      (let [result (f (first args))]\n        (if (fn? result)\n          (recur (rest args) result)\n          result)\n        ))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn [curried]\n  (fn [& args]\n    (loop [decurry curried\n           args args]\n      (if (seq args)\n        (recur (decurry (first args)) (rest args))\n        decurry))))","problem":158,"user":"4e6a4954535d8ccf87e9fec0"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  (loop [fv f args args]\n    (if (seq args)\n      (recur (fv (first args)) (rest args))\n      fv))))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"#(fn [a & b] (loop [s (% a) [c & d] b] (if (fn? s) (recur (s c) d) s)))","problem":158,"user":"4dae916eedd6309eace4d155"},{"problem":158,"code":"#(fn [& c]\n   (loop [f % [x & xs] c]\n    (if (empty? xs) (f x)\n      (recur (f x) xs))))","user":"53b7c21ae4b047364c0444d4"},{"problem":158,"code":"(fn decu [f]\n  (fn [head & tail]\n    (let [res (f head)]\n      (if (fn? res)\n        (apply (decu res) tail)\n        res\n        ))))","user":"55a74d46e4b09e57187da2a3"},{"code":"#(fn [& l]\n   (reduce (fn [f x] (f x)) % l))","problem":158,"user":"538d8bb8e4b0b51d73faae71"},{"code":"(fn [f]\n  (fn [& a]\n    (reduce #(%1 %2) f a)))","problem":158,"user":"506a1985e4b01dc6af13f83e"},{"problem":158,"code":"(fn [c]\n  #(reduce\n    (fn [f a]\n      (f a))\n    c\n    %&))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn decurry [f]\n  (fn mini-decurry [& args]\n    (loop [fnc f args args]\n      (if (empty? args)\n        fnc\n        (recur (fnc (first args)) (rest args))))))","problem":158,"user":"4dd0e8f7535da60f04a96e57"},{"problem":158,"code":"(fn decurry [fs] \n  (fn [& xs] \n    (reduce #(%1 %2) fs xs)))","user":"52e657e4e4b09f7907dd1472"},{"problem":158,"code":"(fn [f]\n  (fn [& xs] (reduce (fn [result arg] (result arg)) f xs)))","user":"4f3d83b5e4b0e243712b1f69"},{"code":"(fn [curried-fn] (fn [& args] (reduce (fn [f n](f n)) curried-fn args)))\n;;(fn [f] (fn [& args] (reduce #(%1 %2) f args)))","problem":158,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce\n     (fn [g arg] (g arg))\n     f\n     args)\n    )\n  )","user":"530bf87ee4b02e82168697d5"},{"code":"(fn [f] (letfn [\n(iterate-until [f stop-condition coll] (if (stop-condition f) f (iterate-until (f (first coll)) stop-condition (rest coll))))\n(decurry [f] (fn [& xs] (iterate-until f #(not (fn? %)) xs)))\n] (decurry f)))","problem":158,"user":"52f10094e4b05e3f0be25ee8"},{"problem":158,"code":"(fn decurrify [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"5492164ee4b0b312c081ff3e"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (reduce (fn [g a] (g a)) f args)))","user":"4dfe5a93535d04ed9115e786"},{"code":"(fn [c]\n  (fn [& v]\n    (loop [f c [h & t] v]\n      (if (fn? f)\n          (recur (f h) t)\n          f))))","problem":158,"user":"4fa6d532e4b081705acca1be"},{"problem":158,"code":"(fn decurry [fun & args]\n  (fn [& args]\n    (loop [a args\n           f fun]\n      (let [fi (first a)\n           re (rest a)]\n      (if (nil? fi)\n        f\n        (recur re (f fi)))))))","user":"5df0c6ffe4b093ff717275c2"},{"code":"(fn [f]\n  (fn [& a]\n  (loop [args (rest a)\n         result (f (first a))]\n    (if (empty? args)\n      result\n      (recur (rest args) (result (first args)))))))","problem":158,"user":"51899891e4b0288ada3dbdab"},{"problem":158,"code":"#(fn [& args]\n   (loop [s args\n          f %]\n     (if (or (empty? s)\n             (not (fn? f)))\n       f\n       (recur (rest s)\n              (f (first s))))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"#(fn [& r] (reduce (fn [s a] (s a)) % r))","problem":158,"user":"529b44afe4b02ebb4ef7509d"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  \t(loop [f f [arg & more] args]\n      (if (fn? f)\n        (recur (f arg) more)\n        f))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":158,"code":"(fn [g]\n  (letfn [(internal\n            [f [head & tail]]\n            (if tail\n              (recur (f head) tail)\n              (f head)))]\n    (fn [& x]\n      (internal g x))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":158,"code":"(fn [op]\n   (fn [& args]\n     (reduce\n      \t#(%1 %2)\n      op\n      args)))","user":"5626447fe4b00e49c7cb47bd"},{"problem":158,"code":"(fn f [curry]\n  (fn [& args] \n    (loop [args args,\n           curry curry]\n      (if (empty? args)\n          curry\n          (recur (rest args) (curry (first args)))))))","user":"5493d908e4b0b312c081ff52"},{"code":"(fn [f]\r\n             (fn [& args]\r\n               (reduce #(%1 %2) f args)))","problem":158,"user":"4f4d0a52e4b03ad3f0c10c9d"},{"problem":158,"code":"(fn [f]\n   (fn [& args]\n     (loop [f f\n            args args]\n       (if (empty? args) f\n           (let [maybe-func (f (first args))]\n             (if (fn? maybe-func)\n               (recur maybe-func (rest args))\n               maybe-func))))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (loop [o (f (first args)) args (rest args)]\n        (if-let [a (first args)]\n          (recur (o a) (rest args))\n          o))))","user":"579693d4e4b039eba2ecb0e7"},{"problem":158,"code":"(fn [f]\n    (fn [& x] (reduce #(%1 %2) f x)))","user":"586b6a0ae4b01531a375e957"},{"code":"(fn [f] \n  (fn [& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"4fd81472e4b0dab7d829f38e"},{"code":"(fn [cf] (fn [& args] (reduce #(%1 %2) cf args)))","problem":158,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn [f]\n  (fn [& l]\n    (loop [func f args l]\n      (if-not (fn? func)\n        func\n        (recur (func (first args)) (rest args))))))","problem":158,"user":"519136e9e4b0f8ef0be96c01"},{"problem":158,"code":"(fn [f] \n  (fn [& args] \n    (loop [[h & t] args g f]\n\t\t(if (seq t)\n\t\t\t(let [r (g h)]\n\t\t\t\t(if (fn? r)\n\t\t\t\t\t(recur t r)\n\t\t\t\t\tr))\n\t\t\t\t(g h)))))","user":"527ccaf4e4b0757a1b17136d"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (reduce (fn [acc cur]\n                (acc cur)) f args)))","user":"530b8580e4b02e82168697cc"},{"problem":158,"code":";(fn decurry [f]\n;  (fn [& args]\n;  \t(loop [[a & args] args f f]\n ;   \t(if (nil? a)\n  ;      \tf\n   ;     \t(recur args (f a))))))\n   \n(fn [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"559b55d6e4b066d22e731f54"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce\n      #(%1 %2)\n      f\n      args)))","problem":158,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn [f]\n  (fn [& xs] (reduce #(% %2) f xs)))","problem":158,"user":"52479487e4b05ef8e38e6373"},{"problem":158,"code":"(fn [f]\n          (fn [& args] (reduce #(apply %1 (vector %2)) f args)))","user":"5c3f37fce4b08cd430848e91"},{"code":"(fn [f] (fn [& xs] (reduce #(%1 %2) f xs)))","problem":158,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn uncurry [f]\n  (fn [& args]\n    (reduce \n     (fn [res arg]\n       (res arg))\n     f\n     args)))","problem":158,"user":"51a768e0e4b0da5f497bde84"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [a args r f]\n      (if (fn? r)\n        (recur (rest a) (r (first a)))\n        r))))","user":"574abbfbe4b02ea114799200"},{"problem":158,"code":"(fn __ [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (let [v (f (first args))]\n        (if (fn? v)\n          (recur v (rest args))\n          v)))))","user":"56706f01e4b0a866af6896f2"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (\n     (fn d [_f [x & xs]]\n       (if x\n        (d (_f x) xs)\n        _f)) f args)))","user":"5df08767e4b093ff717275bf"},{"problem":158,"code":"(fn decurry [f]\n  (partial (fn [fun arg & args]\n             (if (nil? arg)\n               fun\n               (do (println arg)\n                   (recur (fun arg) (first args) (rest args))))) f))","user":"58db362be4b0a4d5acaab675"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [args args\n           g    f   ]\n      (if (empty? args)\n        g\n        (recur (rest args)\n               (g (first args)))))))","user":"545944a2e4b01be26fd74627"},{"problem":158,"code":"(fn [f]\n  (fn [a & args]\n    (loop[res (f a) args args]\n      (if (seq args)\n      \t(recur (res (first args)) (next args))\n        res\n      \t))))","user":"4f1ef6a0535d64f60314649b"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [[x & xs :as a] args, result f]\n      (if (empty? a) result\n          (recur xs (result x))))))","problem":158,"user":"53300924e4b019098a6f8b55"},{"code":"(fn [fs]\n    (fn [& args]\n      (reduce (fn [f v] (f v)) fs args)))","problem":158,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn decurry' [f]\n  (fn [& xs]\n    (reduce\n     (fn [acc, x]\n       (acc x))\n     f\n     xs)))","problem":158,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [x] \n  (fn [& y]\n    (reduce #(% %2) x y)))","problem":158,"user":"513b77f3e4b00f740c76c403"},{"problem":158,"code":"(fn decurr [thefn] (fn [& args] (let [num (atom 0) currfn (atom (apply thefn [(nth args @num)]))]\n(do (while (fn? @currfn) (do (swap! num inc) (reset! currfn (apply @currfn [(nth args @num)])))\n)\n@currfn))))","user":"55f75c6be4b06e875b46cea9"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& initargs]\n      (loop [args initargs\n             nf f]\n\n        (if (empty? args)\n          nf\n          (recur (rest args) (nf (first args))))\n        )\n      )\n    )","user":"5f06caa7e4b0cf489e8d7f52"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce\n     (fn [m e]\n       (m e))\n     f\n     args)))","user":"5881d1c2e4b0f1effa3b7644"},{"code":"(fn decurry [f]\n  (fn [& args] \n    (reduce (fn [f x] (f x)) f args)))","problem":158,"user":"50812debe4b01a93d3f38e4c"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f\n      )\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [f]\n  (partial (fn [fc & args]\n             (loop [func fc a args]\n            (if (next a)\n              (recur (func (first a)) (next a))\n              (apply func a)))) f))","problem":158,"user":"50127fbfe4b030d97e4db70f"},{"problem":158,"code":"(fn [f] (fn [& s] (reduce (fn [c n] (apply c [n])) f s)))","user":"5761a772e4b0994c1922fb95"},{"problem":158,"code":"(fn decurry [f]\n  (fn [head & tail]\n    (if (empty? tail)\n      (f head)\n      (apply (decurry (f head)) tail))))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn uncurry [f]\n  (fn\n    ([x] (f x))\n    ([x & xs] (apply (uncurry (f x)) xs))))","problem":158,"user":"53244c9de4b09d4e7a9b54db"},{"code":"(fn decurry [f] \n  (fn decurry-worker [& args]\n    (if \n     (= 1 (count args))\n     (f (first args))\n     (apply (decurry (f (first args))) (rest args)))))","problem":158,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":158,"code":"(fn __\n  [curried]\n  (fn [& args]\n    (letfn [(proceed [f params]\n\t\t\t\t    (let [apply-it (f (first params))]\n\t\t\t\t      (if (fn? apply-it)\n\t\t\t\t        (proceed apply-it (rest params))\n\t\t\t\t        apply-it)))]\n      (proceed curried args))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn decurry\n  [f]\n  (fn\n    [& ys]\n    (reduce #(if (fn? %) (% %2) %) f ys)))","problem":158,"user":"4f03f197535dcb61093f6b84"},{"problem":158,"code":"(fn [f] \n  (fn [& a]\n    (reduce #(%1 %2) f a)))","user":"5d05fdece4b0cc9c915881e8"},{"code":"#(fn [& xs] (reduce (fn [f x] (f x)) % xs))","problem":158,"user":"4ee3b586535d10e5ff6f5371"},{"code":"#(fn [& args] (reduce (fn [f arg] (f arg)) % args))","problem":158,"user":"50a2f901e4b029e8bace362a"},{"problem":158,"code":"(fn [f] \n    (letfn [(start [& args] (uncurry f args))\n            (uncurry [f [arg & args]]\n              (let [res (f arg)]\n                (if (fn? res)\n                  (uncurry res args)\n                  res)))]\n      start))","user":"59419bdfe4b060784b3b78f7"},{"problem":158,"code":"(fn [func]\n    (fn [& args]\n      (reduce #(%1 %2) func args)))","user":"539fa040e4b0ca733b97449f"},{"problem":158,"code":"(fn [f]\n (fn [& xs]\n  (loop [f f xs xs]\n   (let [nf (f (first xs))]\n    (if (fn? nf) (recur nf (rest xs)) nf)))))","user":"55597b84e4b0deb715856e36"},{"problem":158,"code":"(fn decur [f]\n  (fn [& args]\n    (loop [f (f (first args))\n         args (rest args)]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","user":"55170dd9e4b06a49daca83bd"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)\n    )\n  )","user":"54bfc203e4b0ed20f4ff6f08"},{"problem":158,"code":"(fn decurry [f]\r\n  (fn [& args]\r\n    (reduce #(%1 %2) f args)))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (loop [f func\n           [a & as] args]\n      (if (empty? as) (f a)\n        (recur (f a) as)))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"(fn [f]\n  (fn [& xs]\n    (loop [ff f [x & z] xs]\n      (if (empty? z)\n        (ff x)\n        (recur (ff x) z)))))","problem":158,"user":"52d1e364e4b0d9f9285948e7"},{"problem":158,"code":"(fn [f1]\n  (fn [& xs]\n    (loop [f f1 args xs]\n      (prn args)\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [f]\n  (fn [& a]\n  (reduce #(% %2) f a)\n    )\n  )","problem":158,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn decurry [func]\n    (fn [& args]\n        (reduce #(%1 %2) func args)\n    ))","problem":158,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"#(partial\n   (fn [f & coll]\n     (reduce deliver f coll)) %)","problem":158,"user":"4dae4da5c9a9d6ed4e99dc57"},{"code":"(fn [f]\n                        (fn [& args]\n                            (reduce #(%1 %2) f args)))","problem":158,"user":"50310b8be4b05b7df5a0b84d"},{"code":"(fn [f]\n  (partial (fn me [f & l]\n    (if(empty? (next l))\n      (f (first l))\n      (apply me (f (first l)) (next l))))\n  f))","problem":158,"user":"5349ac2be4b084c2834f4a67"},{"problem":158,"code":"(fn decurry [curry]\n  (fn [& args]\n    (reduce #(% %2) curry args)))\n\n; golf\n;partial (fn [& r] (reduce #(% %2) r))\n;partial #(reduce (fn [x y] (x y)) %&)","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [func]\n  (partial (fn f-it [f & [p & r]]\n             (let [resp (f p)]\n               (if (fn? resp)\n                 (apply f-it resp r)\n                 resp)))\n           func))","problem":158,"user":"52c8758be4b0c2d177d62135"},{"code":"(fn [f]\n  (fn [& args] \n     (loop [f f [x & xs] args] ; doesn't work for arity 0\n       (if xs \n         (recur (f x) xs) \n         (f x)))))","problem":158,"user":"4ed188c8535d44c135fd68cf"},{"code":"(fn [f] \n  (fn [& x] \n    (reduce #(%1 %2) f x)))","problem":158,"user":"4f0d093b535d0136e6c22313"},{"problem":158,"code":"(fn [func]\n  (fn [& params]\n    (loop [func func\n           [param & params] params]\n      (let [next-func-or-val (func param)]\n        (if (empty? params)\n          next-func-or-val\n          (recur next-func-or-val params))))))","user":"545bd22fe4b01be26fd7465a"},{"problem":158,"code":"(fn [cf] (fn [& args] (reduce #(% %2) cf args)))","user":"53dfdf01e4b0d874e779ae46"},{"problem":158,"code":"(fn decurry [f]\n     (fn [& args]\n       (reduce (fn reduce [f a]\n                 (f a))\n               f args)))","user":"58ed2e21e4b056aecfd47d7a"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args] (reduce #(%1 %2) f args)))","user":"53b39d82e4b047364c0444a6"},{"problem":158,"code":"(fn [cfn]\n          (fn [& args]\n            (loop [f cfn, [arg & more] args]\n              (let [res (f arg)]\n                (if (fn? res)\n                  (recur res more)\n                  res)))))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn [f] (fn [& r] (reduce #(% %2) f r)))","problem":158,"user":"4dce6e41535d5973398f92a2"},{"problem":158,"code":"(fn problem-158 [curried] (fn [& args] (reduce (fn [f a] (f a)) curried args)))","user":"51fe9d7ce4b0f1313d468a70"},{"problem":158,"code":"(fn [f]\n  #(reduce (fn [f e] (f e)) f %&))","user":"51a4d802e4b0def3c5c5869a"},{"problem":158,"code":"(fn [f] \n  (fn [& args]\n\t(reduce #(%1 %2) f args)))","user":"5195fadee4b04c0af7ff3c11"},{"code":"#(fn [& y] ((fn i [f [x & y]]\n              (if (seq y)\n               (i (f x) y)\n               (f x))) % y))","problem":158,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [fun]\n    (fn [& args]\n      (reduce (fn [m v] (m v)) fun args)))","problem":158,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":158,"code":"(fn [f]\n  (fn [& args ]\n    (reduce #(%1 %2) f args)))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":158,"code":"(fn \n  [f]\n  (fn \n    [& args]\n    (reduce #(%1 %2) f args)))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":158,"code":"(fn [cf] \n  (fn [& args]\n    (reduce #(%1 %2) cf args)))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn decurry [f] \n   (fn [& args]\n      ((fn d [f args]\n         (if (fn? f)\n            (d (f (first args)) (rest args))\n            f   \n         )   \n      ) f args) \n   )   \n)","problem":158,"user":"4f7b6b90e4b06e829148e1a4"},{"problem":158,"code":"(fn uncurry [f]\n  (loop [arity 1\n         f f\n         args (cycle [2 3])]\n    (let [r (f (first args))]\n      (if (fn? r)\n        (recur (inc arity) r (rest args))\n        (let [args (take arity (cycle [2 3]))\n              sum (apply + args)]\n          (fn [& ns]\n            (apply (if (= sum r) + *) ns)))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"problem":158,"code":"(fn [curried]  \n  (fn [& args] \n    (reduce #(% %2) curried args)))","user":"51c611c4e4b03a28d42333bf"},{"problem":158,"code":"(fn [a] (fn [& xs] (loop [f (a (first xs)) r (next xs)]\n                            (if r (recur (f (first r)) (next r)) f))))","user":"5b924123e4b0c0b3ffbd4a34"},{"code":"(fn [f]\n  (fn [& x]\n    (reduce #(% %2) f x)))","problem":158,"user":"4facd2fae4b081705acca22f"},{"problem":158,"code":"(fn a [cf]\n  (fn [x & xs]\n   (loop [f (cf x) args (seq xs)]\n     (if (empty? args)\n       f\n       (recur (f (first args)) (rest args))))))","user":"5bc833a5e4b07a9b28b100bb"},{"problem":158,"code":"(fn decurry [f]\n  (fn g [ & args]\n    (letfn [(h [t args] (if (= (count args) 1) (apply t args)\n                               (h (t (first args)) (rest args))))]\n      (h f args))\n\n    ))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":158,"code":"(fn [f] (fn [& z] (reduce #(%1 %2)f z)))","user":"573ce277e4b05c31a32c080b"},{"problem":158,"code":"(fn red[f] (fn [& s] (if (fn? f) (apply (red (f (first s))) (rest s)) f)))","user":"5457e5f1e4b01be26fd74613"},{"problem":158,"code":"(fn [f]\n  (letfn [(decurry [f x & xs]\n            (if (empty? xs)\n              (f x)\n              (apply decurry (cons (f x) xs))))]\n    (fn [& args] (apply decurry (cons f args)))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& [x & xs :as args]]\n    (if (empty? args) f\n      (apply (uncurry (f x)) xs))))","user":"605b7a90e4b079a07f8593fc"},{"code":"(fn [cf]\n    (fn [ & args]\n      (loop [func cf remargs args]\n        (if (or (empty? remargs) (not (fn? func)))\n          func\n          (recur (func (first remargs)) (rest remargs))\n          )\n      )\n    )\n  )","problem":158,"user":"50956c2be4b087f34d351ab2"},{"problem":158,"code":"(fn [f ]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"558843dae4b059ccff29b1f3"},{"problem":158,"code":"(fn de-curry\n  [f]\n  (fn [& args]\n    (let [result (f (first args))]\n      (if (fn? result)\n        (apply (de-curry result) (rest args))\n        result))))","user":"5d0eed51e4b0cc9c91588262"},{"problem":158,"code":"(fn [f] \n  (fn [& args] \n    (reduce #(apply %1 (vector %2)) f args)))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f1 f x (first args) more (rest args)]\n      (if (not (seq more))\n        (f1 x)\n        (recur (f1 x) (first more) (rest more)))\n   )))","user":"579d9601e4b05b1deef9ae18"},{"problem":158,"code":"(fn decur [fs]\n  (fn decurry [a & xs]\n    (let [args (cons a xs)]\n      (loop [e args\n             f fs]\n        (if-not (= 0 (count e))\n          (recur (rest e) (f (first e)))\n          f)))))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn uncurry\n  [function]\n  (fn uncurried [& args]\n    (reduce (fn [f v] (f v)) function args)))","problem":158,"user":"51f9527fe4b09be9c177e549"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce #(% %2) f args)))","problem":158,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& nums]\n    (if (= (count nums) 1)\n      (f (first nums))\n      (apply (decurry (f (first nums))) (rest nums)))))","user":"60396c95e4b0d5df2af222f4"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [func f\n            [firstArg & restArgs] args]\n      (if (fn? func)\n        (recur (func firstArg) restArgs)\n        func\n      )\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"code":"#(fn g [& args]\n     (loop [f % args args]\n       (if (fn? f) (recur (f (first args)) (rest args)) f)))","problem":158,"user":"51e58e02e4b0efabf93c02d0"},{"problem":158,"code":"(fn [fns]\n  \t(fn [& args]\n      \t(loop [f (fns (first args))\n               r (next args)]\n          \t(if r\n              (recur (f (first r)) (next r))\n              f))))","user":"5251d3c1e4b0541d1855b87f"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [acc v] (acc v))\n            (f (first args))\n            (rest args))))","user":"5f6d4305e4b02876ed9fd05c"},{"code":"(fn [f]\n  (fn [& xs]\n    (reduce #(% %2) f xs)))","problem":158,"user":"4f036d9b535dcb61093f6ac1"},{"problem":158,"code":"(fn [f0]\n  (fn [& args]\n    ((fn decurry [f c]\n      (if (fn? f) \n        (decurry \n          (f (first c))\n          (rest c))         \n        f))\n     f0 args)))","user":"5547cd6ee4b0a04f79299553"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce \n     (fn [f arg]\n       (f arg)) \n     f args)))","user":"564f1be3e4b0284900eef6a6"},{"problem":158,"code":"#(fn [& as]\n                (loop [f %\n                       args as]\n                  (if (seq args)\n                    (recur (f (first args)) (rest args))\n                    f)))","user":"6026737ee4b0d5df2af2222f"},{"code":"(fn decurry [f]\n    (fn [& args]\n      (if (fn? f)\n        (apply (decurry (f (first args))) (rest args))\n        f)))","problem":158,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn [func]\n  (fn [& args]\n    (reduce #(%1 %2) func args)))","problem":158,"user":"53800d99e4b06839e8705ebd"},{"code":"(fn [f]\r\n  #(reduce (fn [a b] (a b)) f %&))","problem":158,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn [x] (fn  [& y] ((fn rr [m n] (if (fn? m)\r\n                                      (rr (m (first n)) \r\n                                          (rest n))\r\n                                      m)   ) x y) ))","problem":158,"user":"50646c01e4b007509339a58b"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [rs args\n           acc f]\n      (if (empty? rs)\n        acc\n        (recur (rest rs) (acc (first rs)) ) )))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":158,"code":"(fn [fns]\n  (fn [& args]\n    (reduce #(%1 %2) fns args)))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","problem":158,"user":"51170b49e4b0063b4e3e16d9"},{"code":"(fn [f]\n    (fn [& a]\n      (reduce #(%1 %2) f a)))","problem":158,"user":"4dbdc9da535d020aff1edf4c"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce\n     (fn [f arg]\n       (f arg))\n     f args)))","user":"590b8607e4b047aa04b199db"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f    f\n           args args]\n      (if (seq args)\n        (recur (f (first args)) (rest args))\n        f))))","user":"57a4fa50e4b0a966079561f1"},{"code":"(fn [f]\n   (fn _decurry [& coll] \n     (loop [r f c coll]\n       (if (not (fn? r)) r \n         (recur (r (first c)) (rest c))\n       )\n     )\n   )\n)","problem":158,"user":"522eba30e4b01cdb292c5f0e"},{"problem":158,"code":"(fn [c]\n  (fn [& a]\n    (reduce #(%1 %2) c a)))","user":"5a95c639e4b0d174b936c75e"},{"problem":158,"code":"(fn decurry\n  [curried-fn]\n\n  (fn [& vals] ; fn binding end\n    (loop [cur curried-fn remaining vals] ; loop binding end\n      (if (empty? remaining) ; pred end\n        cur\n        (recur (cur (first remaining)) (rest remaining)) ; recur end\n      ) ; if end\n    ) ; loop end\n  ) ; fn end\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce\n      (fn [curr-func arg]\n        (curr-func arg))\n      f args)))","problem":158,"user":"53070615e4b02e821686979e"},{"problem":158,"code":"(fn decurry\n  ([f]\n    (partial \n      (fn rec [f & args]\n        (let [r (f (first args))]\n            (if (fn? r)\n                (apply rec (cons r (rest args)))\n                r)))\n              f)))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":158,"code":"(fn [f]\n      (fn [& args]\n          (reduce #(% %2) f args)))","user":"525ed5f4e4b0cb4875a45db8"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce #(% %2) (cons f args))))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [g]\n  (fn [& args]\n    (reduce #(% %2) g args)))","problem":158,"user":"4fe8fda4e4b0547ebccb2438"},{"problem":158,"code":"(fn decurry [ curry ]\n  (fn decurrier [ & args ]\n    (reduce (fn [f arg] (f arg)) curry args)))","user":"562add6de4b00e49c7cb4834"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [acc-f arg] (acc-f arg)) f args)))","user":"60460824e4b02d28681c77bc"},{"problem":158,"code":"(fn [fc] (fn [ & args]\n  (loop [fs fc\n         a (first args)\n         r (rest args)]\n    (if (empty? r)\n      (fs a)\n      (recur (fs a) (first r) (rest r))))))","user":"5a566e8fe4b05d388ecb6c51"},{"problem":158,"code":"(fn [curry]\n  (fn [& i]\n    (reduce #(% %2) curry i)))","user":"57008afae4b08d47c97781ca"},{"code":"(fn [f]\n  (fn [& args] (reduce #(% %2) f args)))","problem":158,"user":"4fe83efbe4b07c9f6fd12c3b"},{"problem":158,"code":"(fn [curry] (fn [& args] (reduce (fn [current arg] (current arg)) curry args)))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn [f]\n  (fn [& l]\n    (reduce #(%1 %2) f l)))","problem":158,"user":"4ff5744ae4b0678c553fc36a"},{"problem":158,"code":"(fn [f]\n    (fn [& ps]\n      (loop [f f\n             ps ps]\n        (if (empty? ps)\n          f\n          (recur (f (first ps)) (rest ps))))))","user":"5f3f2281e4b004f08c61c561"},{"code":"(fn [f]\n  (fn [& xs]\n    (loop [coll (rest xs) acc (f (first xs))]\n      (if (empty? coll)\n        acc\n        (recur (rest coll) (acc (first coll)))))))","problem":158,"user":"4e7f5a0b535db966e863cc41"},{"problem":158,"code":"(fn [cur]\n  (fn [& args]\n    (loop [c cur a args]\n      (if (fn? c)\n        (recur (c (first a)) (rest a))\n        c))))","user":"50b65966e4b0a86f8358ca6c"},{"problem":158,"code":"(fn [f]\n  (fn [& e]\n    (loop [f f e e]\n      (if-not (fn? f)\n        f\n        (recur (f (first e)) (rest e))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (->> [f args]\n         (iterate (fn [[f args]] [(f (first args)) (rest args)]))\n         (drop-while #(fn? (first %)))\n         (ffirst))))","user":"51dafedee4b09f6bc204eee2"},{"problem":158,"code":";a more verbose version\n;(fn [f]\n;  (fn [& args]\n;    (reduce \n;     (fn adjoin [x y] (x y))\n;     f args)))\n\n(fn [f]\n  (fn [& args] (reduce #(%1 %2) f args)))","user":"5f49350ee4b0102c7503393f"},{"problem":158,"code":"(fn [f]\n    (fn ([a & c] (loop [r (f a) m c]\n                   (if (not (ifn? r))\n                     r\n                     (recur (r (first m)) (rest m)))))))","user":"564b1ff8e4b0284900eef663"},{"problem":158,"code":"(fn decurry[f]\n  (fn run [& xs]\n    (loop [g f\n           ys xs]\n      (let [head (first ys)\n            result (g head)]\n        (if (not (fn? result))\n         result\n         (recur result (rest ys) ))))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn [f]\n   (fn [& args]\n     (letfn [(fff [func & ags]\n               (let [ret (func (first ags))]\n                 (if (fn? ret)\n                   (apply fff ret (rest ags))\n                   ret)))]\n       (apply fff f args))))","problem":158,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn decurry [f]\n          (fn [& args]\n            (reduce (fn [f x] (f x))\n                    (into [f] args))))","problem":158,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [df x]\n              (df x))\n            f\n            args)))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":158,"code":"(fn [f]\n  (fn [x & args]\n    (reduce #(%1 %2) (f x) args)))","user":"54924f64e4b0b312c081ff42"},{"problem":158,"code":"#(fn [& xs] (reduce (fn [a x] (a x)) % xs))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":158,"code":"(fn [f & xs]\n  (fn [& ys]\n    (loop [r f\n           as ys]\n      (if (ifn? r)\n        (recur (r (first as)) (rest as))\n        r))))","user":"5866b999e4b0f14aab7c886b"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& xs]\n    (reduce (fn [s v] (s v))\n            f\n            xs)))","user":"4fcf1755e4b03432b189f40c"},{"code":"#(partial (fn [f & a] \n  (loop [s a,r (f (first s))] \n    (if (fn? r) (recur (next s) (r (fnext s))) r))) %)","problem":158,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn decurry1 [f]\n  (fn [& args]\n    (loop [f1 f, args1 args]\n      (let [v (f1 (first args1))]\n        (if-not (fn? v)\n          v\n          (recur v (rest args1))\n          )))))","problem":158,"user":"52cf084ce4b07d0d72b27399"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [mid-f f\n           mid-args args]\n      (if (empty? mid-args)\n        mid-f\n        (recur (mid-f (first mid-args)) (rest mid-args))))))","user":"5ec6de19e4b08d0ec38692da"},{"problem":158,"code":"#(fn [& s]\n    (loop [x s, y %]\n      (if (empty? x)\n        y\n        (recur (rest x) (y (nth x 0))))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":158,"code":"(fn ser [f]\n  (fn serac[& args]\n    (loop [fr f\n           a args]\n      (if (= 1 (count a))\n        (apply fr a)\n        (recur (fr (first a)) (rest a))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":158,"code":"(fn [cf]\n  (fn [& xs]\n    (loop [[y & ys] xs\n           v cf]\n      (if (nil? ys) (v y) (recur ys (v y))))))","user":"5416b4a2e4b01498b1a71a01"},{"problem":158,"code":"(fn k [f]\n  (fn [& args]\n    (loop [f' f args' args]\n      (if (empty? args')\n        f'\n        (recur (f' (first args')) (rest args'))))))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":158,"code":"(fn [x]\n  (fn [& p]\n    (reduce #(% %2) x p)))","user":"566d71b1e4b0a866af6896ca"},{"problem":158,"code":"(fn [func]\n  (fn [& args]\n    (reduce (fn [current-fn arg] (current-fn arg))\n            func args)))","user":"53d5f42de4b0e771c302544f"},{"code":"(fn[f] (fn [ & a] \n         (loop[f f a a] \n           (if (fn? f) (recur (f (first a)) (next a)) f))))","problem":158,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [x]\n  #(loop [f x v %&]\n     (if (fn? f)\n       (recur (f (first v)) (rest v))\n       f)))","problem":158,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"code":"(fn decurry [f] \n  (fn [& args]\n    (loop [f f args args]\n      (if (empty? args) f\n          (recur (f (first args)) (rest args))))))","problem":158,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn decurry [curried]\n  (fn [& z]\n    (loop [f curried args z]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":158,"code":"(fn x [f]\n  (fn [& args]\n    (loop [[a & more] args\n           f f]\n      (if a\n        (recur more (f a))\n        f))))","user":"5012da69e4b0c8732600222d"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce\n      (fn [acc arg]\n        (acc arg))\n      f args)))","user":"4e586949535d8a8b8723a292"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n  \t(reduce #(%1 %2) f args))\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [fu a]\n              (fu a))\n            f\n            args)))","user":"580bd81ee4b0849f6811b711"},{"problem":158,"code":"(rand-nth [(fn [x] *) (fn [x] +)])","user":"5a3c2a08e4b001c08efc0cdf"},{"problem":158,"code":"(fn [c]\n  (fn [& args]\n    (reduce (fn [f x]\n              (f x))\n            c\n            args)))","user":"55f85b93e4b03cbcff9738ae"},{"code":"(fn [c] (fn [& a] (reduce #(% %2) c a)))","problem":158,"user":"4ff67852e4b0678c553fc37e"},{"code":"(fn [fs]\n  (fn [& args]\n    (loop [f fs\n           arg (seq args)]\n      (if (fn? f)\n        (recur (f (first arg)) (next arg))\n        f))))","problem":158,"user":"4ff9d4e5e4b0678c553fc3b0"},{"code":"(fn decurry [curry]\n (letfn [(dec1 [ff args]\n  (if (= 1 (count args))\n    (ff (first args))\n    (recur (ff (first args)) (rest args))))]\n  (fn [& args] (dec1 curry args))))","problem":158,"user":"4f62b29ce4b0defedf855fd9"},{"problem":158,"code":"(fn F\n  ([f] (partial F f))\n  ([f a & as]\n   (let [v (f a)]\n     (if as (apply F v as) v))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":158,"code":"(fn [func]  (fn [ & args] \n                     (reduce #(%1 %2) func args)))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [todo args\n           currentf f]\n      (let [[h & t] todo]\n        (if (empty? t)\n          (currentf h)\n          (recur t (currentf h)))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":158,"code":"(fn [f] \n  (fn [& v] \n    (reduce #(%1 %2) f v)))","user":"57c94c54e4b05aa3c4741d2c"},{"code":"(fn [f]\n  (fn [& a]\n    (apply\n      (fn fun [ff & aa]\n        (if (empty? aa)\n          ff\n          (apply fun (ff (first aa)) (rest aa))))\n      f a)))","problem":158,"user":"4fb1325de4b081705acca276"},{"code":"(fn dc [f]\n  (fn [& args]\n    (loop [f f\n           [x & a] args]\n      (cond (nil? x) (f)\n            (nil? a) (f x)\n            :else    (recur (f x) a)))))","problem":158,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":158,"code":"(fn [f] \n  (fn [& x]\n   (reduce #(% %2) f x)))","user":"5654cb2de4b0f9d632dd848b"},{"code":"(fn[I](fn[& l](reduce (fn[l I](l I))I l)))","problem":158,"user":"503ac764e4b07a1917cc34d8"},{"code":"#(fn [& A]\n   (reduce\n    (fn [f a] (f a)) %1 A))","problem":158,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [f] #(reduce (fn [f,x] (f x)) f %&))","problem":158,"user":"4ef77edb535dced4c769f254"},{"code":"#(fn [& xs] (reduce apply % (map vector xs)))","problem":158,"user":"5097a95fe4b00ad8bab4e96e"},{"problem":158,"code":"(fn [f]\n    (fn [& v]\n      (loop [a v b f]\n        (if (empty? a)\n          b\n          (recur (rest a) (b (first a)))))))","user":"50f10f7be4b06d9538fe211a"},{"problem":158,"code":"(fn [C]\n  (fn [& A]\n    (reduce #(%1 %2) C A)))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [curry]\n   (fn [& args]\n     (loop [f curry a args]\n       (if (= (count a) 1)\n         (f (first a))\n         (recur (f (first a)) (rest a))))))","problem":158,"user":"50bce014e4b0594b91591c63"},{"problem":158,"code":"(fn cur [func]\n  (fn [& args]\n    (loop [f func ags args]\n      (if (fn? f)\n        (recur (f (first ags)) (rest ags))\n        f))))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":158,"code":"(fn fooUncurry [foo]\n  (fn [& args]\n  (reduce #(%1 %2) foo args)))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn __ [f]\n  (fn [& args]\n    (loop [r f args args]\n      (if (seq args)\n          (recur (r (first args)) (rest args))\n          r))))","problem":158,"user":"52463059e4b09dbe66b56198"},{"problem":158,"code":"(fn [f]\n    (fn [ & args ] (reduce (fn [f a] (f a)) f args))\n)","user":"527ba695e4b03e8d9a4a7596"},{"problem":158,"code":"(fn [f]\n   (fn [& args]\n     (reduce (fn [f arg] (f arg)) f args)))","user":"5515b138e4b055c2f668d4ed"},{"problem":158,"code":"(fn [ff]\n    (fn rr [& [gg h & t :as lst]]\n      (if (fn? gg)\n        (if (empty? t)\n          (gg h)\n          (apply rr (conj t (gg h)))\n        )\n        (apply rr (conj lst ff))\n      )\n    ))","user":"5281a445e4b0757a1b17143a"},{"code":"(fn q [f] (fn [& a] (if (seq a) (let [f2 (f (first a))] (apply (q f2) (rest a))) f)))","problem":158,"user":"4ede8789535d10e5ff6f5337"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (reduce #(% %2)\n            f\n            xs)))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [f]\n  (fn [& xs]\n    (loop [args xs\n           x f]\n      (if (empty? args)\n        x\n        (recur (rest args) (x (first args)))))))","problem":158,"user":"5102ac9de4b00c483ae176fa"},{"problem":158,"code":"(fn a [f]\n  #(if %&\n     (apply (a (f %)) %&)\n     (f %)))","user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [f] #(reduce (fn [g a] ((or g f) a)) nil %&))","problem":158,"user":"4e96557d535dbda64a6f6b43"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce\n     (fn [f arg] (f arg))\n     f\n     args)))","user":"4f039c67535dcb61093f6b3a"},{"code":"(fn [f]\n  (fn inner-decurry [& ns]\n    (loop [acc f\n           lst ns]\n      (if (empty? lst)\n        acc\n        (recur (acc (first lst)) (rest lst))))))","problem":158,"user":"4fba7d1ee4b081705acca2e0"},{"problem":158,"code":"( fn [f]\n  (fn [& args]\n    ( reduce #(%1 %2) f  args )))","user":"516d227fe4b06f078fab252d"},{"problem":158,"code":"(fn decurry [f] (fn [& args] (reduce #(%1 %2) f args)))","user":"55536a8ae4b0deb715856e03"},{"problem":158,"code":"(fn [f & xs]\n  (let [h (fn [& xs]\n            (reduce #(%1 %2) (f (first xs)) (rest xs)))]\n    h))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":158,"code":"(fn [curr-top]\n  (fn [& args]\n    (reduce\n     (fn [curr arg] (curr arg))\n     curr-top args)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"code":"(fn decurry [f]\n    (fn [& args]\n        (if (or (empty? args) (empty? (rest args)))\n            (apply f args)\n            (apply (decurry (f (first args))) (rest args)))))","problem":158,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn [f]\n  (fn [& more]\n    (reduce #(%1 %2) f more)))","problem":158,"user":"51aa2b4fe4b04e3dc0c27b21"},{"code":"(fn p158 [f]\n  (letfn [(hoge [f ls]\n            (if (empty? ls) f\n\t\t(hoge (f (first ls)) (next ls))\n\t\t))]\n  (fn [& ls] (hoge f ls)\n    )))","problem":158,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [fun]\n  (fn [& args ]\n    (loop [ f fun\n            values args ]\n      (if (fn? f) \n        (recur (f (first values)) (next values))\n        f))))","problem":158,"user":"4e356d2b535deb9a81d77f2d"},{"problem":158,"code":"(fn [f] (fn [& args]\n  (loop [f f args args]\n    (if (ifn? f)\n      (recur (f (first args)) (next args))\n      f))))","user":"553b87abe4b09218d5f45003"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [g x]\n              (g x))\n            f\n            args)))","user":"54d9f7f1e4b024c67c0cf751"},{"problem":158,"code":"(fn curry [f]\n  (fn [& args]\n    (if (fn? (f (first args))) (apply (curry (f (first args))) (rest args))\n      (f (first args)))))","user":"558378dce4b05c286339e115"},{"code":"(fn [f]\n  (fn [& s]\n    (loop [f f s s]\n      (if (seq s)\n              (recur (f (first s)) (rest s))\n              f))))","problem":158,"user":"4f9120d8e4b0dcca54ed6c96"},{"code":"(fn [f]\r\n  (fn jajj [& args]\r\n    (loop [f f [c & r] args]\r\n      (if (empty? r)\r\n        (f c)\r\n        (recur (f c) r)))))","problem":158,"user":"4feada56e4b0140c20fb9c11"},{"problem":158,"code":"(fn\n  [func]\n  (fn [& args]\n    (loop [f func\n           a args]\n      (if-let [xs (seq a)]\n        (recur (f (first xs)) (rest xs))\n        f))))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":158,"code":"(fn [cf]\n (fn [& xs]\n  (reduce\n   #(%1 %2)\n   cf\n   xs)))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn [c]\n  (fn [& a]\n    (reduce #(%1 %2)\n            (c (first a))\n            (rest a))))","problem":158,"user":"504ec4d3e4b069badc5a33c9"},{"problem":158,"code":"(fn decurry [f]\n  (letfn [(decurried [f & xs]\n                     (let [fx (f (first xs))]\n                       (if (fn? fx) (recur fx (rest xs)) fx)))]\n    (partial decurried f)))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":158,"code":"#(fn [& s] (loop [f % [a & r] (reverse s)]\n          (if (empty? r)\n            (f a)\n            (recur (f a) r))))","user":"5ab564f8e4b073f177442639"},{"problem":158,"code":"partial (fn [& x] (reduce #(% %2) x))\n#_(fn [f]\n  (fn [& xs]\n    (loop [f f xs xs]\n      (if (fn? f)\n        (recur (f (first xs)) (rest xs))\n        f))))","user":"545801f6e4b01be26fd74615"},{"problem":158,"code":"partial (fn [x & y] (loop [res x list y] (if (not (fn? res)) res (recur (res (first list)) (rest list)))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [f]\n    (fn this [& args]\n      (loop [f f [a & more] args]\n        (if (empty? more)\n          (f a)\n          (recur (f a) more)))))","problem":158,"user":"50e3e108e4b01912b3285c48"},{"code":"(fn [f] \n  (fn [& args] \n    (reduce #(%1 %2) f args)))","problem":158,"user":"4fcfa1dae4b03432b189f41b"},{"code":"(fn [f] (fn [& args] (reduce #(%1 %2) f args) ))","problem":158,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn [fun]\n   (letfn [(decuraux [fun arglis]\n              (if (= (count arglis) 1)\n                 (fun (first arglis))\n                 (decuraux (fun (first arglis))\n                           (rest arglis))))]\n      (fn [& args]\n        (decuraux fun args))))","problem":158,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":158,"code":"(fn decur [f] \n  (fn [& args]\n    (reduce (fn [r x] (r x)) f args)))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn pr158 [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"51696ee7e4b03f62cda68ce8"},{"problem":158,"code":"(fn decurry [f]\n  (fn inner [x & args]\n    (if (empty? args)\n        (f x)\n        (apply (decurry (f x)) args))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f [h & t] args]\n      (if t\n        (recur (f h) t)\n        (f h)))))","problem":158,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":158,"code":"(fn [f]\n  (fn [ & args]\n    (reduce #(%1 %2) f args)))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":158,"code":"(fn mild [f]\n  (fn [& args]\n    (loop [ff f\n           aa args]\n      (if (empty? aa) ff\n          (recur (ff (first aa)) (rest aa))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":158,"code":"(fn decurry [fns]\n  (fn [& args]\n    (reduce (fn [accum item] (accum item))\n            (fns (first args)) (rest args))))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& args]\n    (reduce\n     (fn [f-acc arg]\n       (f-acc arg))\n     f\n     args)))","user":"551bdefde4b07993ea3788d7"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (seq args)\n        (recur (f (first args)) (rest args))\n        f))))","problem":158,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn [fun]\n    (fn [& params]\n      (reduce #(%1 %2) fun params)))","problem":158,"user":"50588ff1e4b06522596eba7e"},{"problem":158,"code":"(fn [f] (fn [& args] \n  (loop [r f a args]\n    (if-not (first a)\n       r\n       (recur (apply r [(first a)]) (rest a))))))","user":"52ffb7f2e4b0d8b024fd370b"},{"problem":158,"code":"(fn [f] \n    (fn [& n] \n      (reduce #(%1 %2) f n)))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [f]\n  #(reduce (fn [maybe-f arg]\n              (maybe-f arg))\n            (f (first %&))\n            (rest %&)))","problem":158,"user":"51105c7fe4b04c71fce993ef"},{"problem":158,"code":"(fn mapply [f] (fn [t & tl ]  (if (seq tl) (apply (mapply (f t)) tl) (f t))))","user":"5e308d0ae4b05b4b01516215"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [res (f (first args))\n             args (rest args)]\n        (if (fn? res)\n          (recur (res (first args))\n                 (rest args))\n          res))))","user":"569f4dabe4b0542e1f8d1491"},{"problem":158,"code":"(fn [foo]\n  (fn [& args]\n    (loop [curr-foo foo\n           curr-args args]\n      (if (= (count curr-args) 1)\n        (curr-foo (first curr-args))\n        (recur (curr-foo (first curr-args)) (rest curr-args)))\n      )\n    )\n )","user":"5cdbb1b2e4b05ee0cb311732"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [a & more]\n    (if (ifn? (f a))\n      (apply (decurry (f a)) more)\n      (f a))))","user":"557e9d17e4b05c286339e0d8"},{"problem":158,"code":"(fn [f]\n  (fn[& args]\n    (reduce #(%1 %2) f args)))","user":"4f0ef874535d0136e6c22328"},{"problem":158,"code":"(fn [f]\n  (fn [& z]\n    (reduce #(% %2) f z)))","user":"5504dd64e4b086ebe8a79c83"},{"problem":158,"code":"(fn uncurry [curried]\n    (fn [& args]\n      (loop [a args\n             g curried]\n        (if (ifn? g)\n          (recur (rest a) (g (first a)))\n          g))))","user":"5bd0ea60e4b0e9689409ee45"},{"code":"(fn b \n\t([c] (fn[& xs] (b c xs)))\n\t([c xs]\t\n\t(if (ifn? c)\n \t(recur (c(first xs)) (drop 1 xs))\t\n \t c) \n \t)\n )","problem":158,"user":"5307e4ece4b02e82168697a9"},{"problem":158,"code":"(fn [f] (fn [& c]\n         (reduce (fn [f1 v] (f1 v)) f c)   \n))","user":"55adf4d7e4b03311e7b732af"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [a & args]\n      (if (empty? args)\n          (f a)\n        (apply (uncurry (f a)) args))))","user":"4ddbfb8a535d02782fcbea00"},{"problem":158,"code":"(fn [f] (fn [& coll] (reduce #(%1 %2) f coll)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn [f]\n  (fn [& a] (reduce #(% %2) f a)))","problem":158,"user":"503b6995e4b07a1917cc34dd"},{"problem":158,"code":"partial (fn [& c] (reduce #(%1 %2) c))","user":"5c1aadcde4b01240ff567209"},{"problem":158,"code":"(fn [f]\n      (fn [& a] (loop [a a f f] (if (fn? f) (recur (rest a) (f (first a))) f))))","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn f [func]\n  (fn [& args]\n    (reduce \n      #(% %2) \n      func args)))","problem":158,"user":"51750cd4e4b07031762f2ee5"},{"problem":158,"code":"(fn decurry [f] \n  (fn [& args] (reduce #(%1 %2) f args)))","user":"575ef4b6e4b08062f99a4e78"},{"code":"(fn decurry [f]\n    (fn [arg1 & args]\n      (let [result (f arg1)]\n        (if (fn? result)\n          (apply (decurry result) args )\n          result))))","problem":158,"user":"4e6f578c535d5021c1a8961b"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    ((fn decurry [f [arg & args]]\n       (if (ifn? f)\n         (decurry (f arg) args)\n         f)\n       ) f args)))","user":"54febf4be4b07d26eda61d45"},{"problem":158,"code":"(fn t158 [c]\n  (fn [& values]\n    (loop [res (c (first values)) v (rest values)]\n      (if (empty? v)\n        res\n        (recur (res (first v)) (rest v))))))","user":"5046f909e4b03b02161376b5"},{"problem":158,"code":"(fn [f1]\n  (fn [& args]\n    (reduce (fn [a x] (a x)) f1 args)))","user":"5245aea8e4b08ba239308123"},{"code":"(fn decurry [f]\n  (fn [& coll]\n    (reduce #(%1 %2) f coll)))","problem":158,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":158,"code":"(fn [fns]\n  (fn [& coll] \n    (reduce #(if %\n               (% %2)\n               (fns %2))\n            nil\n            coll)))","user":"55a0d79fe4b0acc240e31502"},{"problem":158,"code":"(fn decurry [f]\n  (letfn [(decurried-apply [f args]\n    (if (empty? args)\n      f\n      (decurried-apply (f (first args)) (rest args))))]\n    (fn [& args] (decurried-apply f args))))","user":"5283a919e4b0239c8a67adbe"},{"problem":158,"code":"partial (fn [& x] (reduce #(% %2) x))","user":"53a01fb1e4b0ca733b9744a6"},{"code":"(fn [f] \n  (fn [& args]\n    (loop [ff f,\n           aa args]\n      (if-not (fn? ff)\n        ff\n        (recur (ff (first aa)) (next aa))))))","problem":158,"user":"5341b141e4b00652c8746ecf"},{"problem":158,"code":"(fn decurry\n  [func]\n  #(loop [[h & t] %& f func]\n     (if (nil? t)\n       (f h)\n       (recur t (f h)))))","user":"576df252e4b0979f8965156f"},{"problem":158,"code":"(fn [fns]\n\t(fn [& args]\n    \t(letfn [(decurry [f [x & xs]]\n        \t(if (empty? xs)\n            \t(f x)\n                (decurry (f x) xs)))]\n\t\t\t(decurry fns args))))","user":"53214efbe4b09d4e7a9b54b2"},{"code":"(fn foo [f]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg)) f args)))","problem":158,"user":"52f8f4d1e4b047fd55836fde"},{"problem":158,"code":"(fn cs13 [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"5a4443cae4b0447ef91cc60f"},{"problem":158,"code":"(fn [f] \n  (fn [& params] \n    (loop [p params\n           res f]\n      (if (empty? p)\n        res\n        (recur (rest p)\n               (res (first p)))))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":158,"code":"(fn [cf] \n  (fn [& nums]\n  (reduce (fn [f x] (f x)) cf nums) ))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":158,"code":"(fn [f]\r\n  (fn [ & args ]\r\n    (reduce #(%1 %2) f args)))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(letfn [(deapply [f & args]\n                (if (empty? args) f\n                    (apply deapply (f (first args)) (rest args))))]\n        (fn [f] (partial deapply f)))","problem":158,"user":"5294e44de4b02ebb4ef75016"},{"code":"(fn [e]\n    (let [f (fn [& r]\n              (loop [e1 e r1 r]\n                (let [a (e1 (first r1))]\n                (if (fn? a)\n                  (recur a (rest r1))\n                  a))))]\n      f))","problem":158,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":158,"code":";; http://www.4clojure.com/problem/158\n(fn decurry\n  [f-in]\n  (println f-in)\n  (fn [& args]\n    (println args (count args))\n    (let [out (f-in (first args))]\n      (if (fn? out)\n        (apply (decurry out) (rest args))\n        out))))","user":"5c92105ce4b048ec896c59f7"},{"problem":158,"code":"#(fn [& args](reduce (fn[acc x](acc x)) % args))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":158,"code":"partial (fn [f & s](reduce #(%1 %2) f s))","user":"526a3412e4b03e8d9a4a721e"},{"code":"(fn [original-f]\n    (letfn [(worker [f & args]\n              (let [res (f (first args))\n                    dc (prn :res res :f f :args args)\n                    ;; dc (read-line)\n                    ]\n                (if (instance? clojure.lang.IFn res)\n                  (apply worker res (rest args))\n                  res)))]\n      (fn [& args] (apply worker original-f args))))","problem":158,"user":"50bca033e4b0594b91591c5d"},{"code":"(fn decurry [curried-fn]\n  (fn [& args]\n    (reduce #(%1 %2) curried-fn args)))","problem":158,"user":"52319066e4b0e2e8de81d1e9"},{"problem":158,"code":"(fn\n  [f]\n  (fn [& args]\n    (reduce #(% %2) f args)))","user":"52dfc89be4b09f7907dd1405"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce \n     (fn [fn-1 arg] (fn-1 arg))\n     f\n     args)))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":158,"code":"(fn [ff] (partial (fn [f & args] (let [res (f (first args))] (if (fn? res) (recur res (rest args)) res))) ff))","user":"531f1e63e4b08068f379edc2"},{"problem":158,"code":"(fn [f] \n  (fn [& args]\n    (loop [r f args args] \n      (if (fn? r)\n        (recur (r (first args)) (rest args))\n        r))))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"problem":158,"code":"(fn [f] \n  (fn [& a] \n    (reduce #(% %2) f a)))","user":"4faf97d8e4b081705acca258"},{"problem":158,"code":"(fn decurry [curried]\n  (fn [& [a & args]]\n    (if (fn? curried)\n      (apply (decurry (curried a)) args)\n      curried)))","user":"5b60e88be4b0c6492753e70b"},{"problem":158,"code":"(fn decurry [f]\n  (partial \n    (fn i [fun & args]\n      (let [res (fun (first args))]\n        (if (fn? res)\n          (apply i res (rest args))\n          res)))\n    f))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [orig]\n    (fn [& args]\n      (reduce (fn [f arg]\n                (f arg)) orig args)))","problem":158,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":158,"code":"#(fn [& coll]\n   (reduce (fn [f a] (f a)) % coll))","user":"5f3abcc4e4b004f08c61c52b"},{"problem":158,"code":"(fn de-curry[f]\n  (fn[& r]\n    (loop [arg-list r\n           curr-f f]\n      (cond (or (empty? arg-list) (not (fn? f))) curr-f\n            :else (let [nxt-fn (curr-f (first arg-list))]\n                    (recur (rest arg-list) nxt-fn))))))","user":"5bab31f1e4b0a20761a23471"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [[a & as] args\n           c f]\n      (let [r (c a)]\n        (if (fn? r)\n          (recur as r)\n          r)))))","user":"4f0f01c0535d0136e6c22329"},{"problem":158,"code":"(fn decurry\n  [fof]\n  (fn\n    [& args]\n    (reduce #(apply % [%2]) fof args)))","user":"550d9452e4b06e50f9beb15d"},{"code":"#(fn [& xs]\n   (loop [f % x xs]\n     (if (seq x)\n       (recur (f (first x)) (rest x))\n       f)))","problem":158,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn [f] (fn [& args] (reduce (fn [s e] (s e)) f args)))","problem":158,"user":"4fcfa1a4e4b03432b189f41a"},{"problem":158,"code":"(fn decurry [%] (fn [& args] (loop [i % i-args args] (if (fn? i) (recur (i (first i-args)) (rest i-args)) i))))","user":"559ff3b1e4b0acc240e314ed"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [res f\n           rem-args args]\n      (if (empty? rem-args) res\n                            (recur (res (first rem-args)) (rest rem-args))))\n    ))","user":"5dd67c22e4b0948ae9d9ad80"},{"problem":158,"code":"(fn decurry [f]\n    (fn extract [& xs]\n      (let [next (f (first xs))]\n        (if (fn? next)\n          (apply (decurry next) (rest xs))\n          next)\n        )\n      )\n    )","user":"56f7ecdfe4b08e7d20b96834"},{"problem":158,"code":"(fn [f] \n    (fn [& as] \n      (reduce #(%1 %2) f as)))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [c]\n  (fn [& a]\n    (reduce #(% %2) c a)))","problem":158,"user":"4ee7ef87535d93acb0a66872"},{"code":"(fn [f]\n  (fn [& a] (reduce #(%1 %2) f (reverse a))))","problem":158,"user":"4e14108c535d04ed9115e7dd"},{"problem":158,"code":"(fn [f] (fn [& a] ((partial reduce #(%1 %2) f)a)))","user":"5951190be4b066ee0a44aea4"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (if (empty? args)\n      (f)\n      (reduce #(%1 %2) f args))))","user":"5344fe13e4b084c2834f4a32"},{"problem":158,"code":"(fn [cf]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg)) cf args)))","user":"55c20bd0e4b0e31453f64972"},{"problem":158,"code":"(fn decurry [f]\n  (fn decurried-f [& args]\n    (loop [argument-list args final-function f]\n      (let [f-first (final-function (first argument-list))]\n        (if (fn? f-first)\n          (recur (rest argument-list) f-first)\n          f-first)))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [xs xs\n           f f]\n      (if (next xs)\n        (recur (next xs)  (f (first xs)))\n        (f (first xs))))))","user":"5712854ce4b07c98581c3a89"},{"problem":158,"code":"(fn decurry [f] (fn [& a] (reduce #(%1 %2) f a)))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn [f] (fn [& args] (reduce #(apply %1 (vector %2)) f args)))","problem":158,"user":"5032b066e4b00c0952a257ea"},{"problem":158,"code":"(fn curry [f] \n  (fn [& rst] \n    (reduce #(% %2) f rst)))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [f]\n    (fn [& x]\n      (reduce #(% %2) f x)))","problem":158,"user":"4f410b63e4b0e243712b1fc5"},{"problem":158,"code":"(fn solve [funcs]\n  (fn [& xs]\n    (reduce (fn [acc x] (acc x)) funcs xs)))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":158,"code":"(fn [fc]\n   \n   (fn [& args] \n      (reduce #(%1 %2) fc args)\n     )\n)","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","problem":158,"user":"4f32a7f1e4b0d6649770a095"},{"problem":158,"code":"(fn [f]\n    (fn [& xs]\n      (loop\n        [\n          xs xs\n          f f\n        ]\n        (let\n          [\n            last? (= 1 (count xs))\n            x (first xs)\n            xs' (rest xs)\n            f' (f x)\n          ]\n          (if last?\n            f'\n            (recur xs' f')\n          )\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [fx a] (fx a)) f args)))","user":"5f82609ae4b0c071e6c840f9"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& xs]\n    (reduce #(%1 %2) (f (first xs)) (rest xs))))","user":"5f300f28e4b033932238a682"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [f-stack new-f] (f-stack new-f)) f args)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":158,"code":"(fn [v]\n  (fn [& args]\n    (reduce #(%1 %2) v args)))","user":"515b03fee4b0a102a3e5262a"},{"problem":158,"code":"(fn uncurry [f] \n  (fn [& args] \n    (reduce #(%1 %2) f args)))","user":"58ed713de4b056aecfd47d84"},{"code":"(fn decurry [curried]\n  (fn [& args]\n    (reduce #(%1 %2) curried args)))","problem":158,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn [f]\n  (fn [& params]\n    (reduce #(% %2) f params)))","problem":158,"user":"500900dee4b0144d4f561e42"},{"code":"(fn [f] (fn [& args] (reduce (fn [a b] (a b)) f args)))","problem":158,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":158,"code":"(fn [f] (fn [& args] ((fn decurried [g args] (if (empty? args) g (recur (g (first args)) (rest args)))) f args)))","user":"584dadebe4b0b7285a6f4e44"},{"problem":158,"code":"(fn ff\n  [f]\n  (fn [& arg]\n    (loop [f f\n           arg arg]\n      (if (empty? arg)\n        f\n        (recur (f (first arg))\n               (rest arg))))))","user":"54a11042e4b09f271ff37c49"},{"problem":158,"code":"(fn [cf]\n (fn [& args]\n  (reduce #(% %2) cf args)))","user":"5835cb06e4b089d5ab817cea"},{"code":"(fn decurry [f]\n   \t(fn rslt [& args]\n      \t(loop [x f y args]\n          (if (fn? x) (recur (x (first y)) (rest y))\n            x\n            )\n          )\n      )\n    )","problem":158,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg))\n            f\n            args)))","user":"55586905e4b0deb715856e2b"},{"problem":158,"code":"(fn [f]                                                                                                                                                                                                                        \n  (fn [& args]                                                                                                                                                                                                                 \n    (loop [args args f f]                                                                                                                                                                                                      \n      (if-not (empty? args)                                                                                                                                                                                                    \n        (recur (rest args) (f (first args)))                                                                                                                                                                                   \n        f))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":158,"code":"(fn decurry [curried]\n  (fn [& values]\n    (reduce (fn [f v] (f v)) curried values)))","user":"4ee6400c535d93acb0a6685b"},{"code":"(fn [f] #(reduce deliver f %&))","problem":158,"user":"4f554416e4b0a7574ea717f9"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce (fn [f x] (f x)) (f (first args)) (rest args))))","user":"4e68c434535d8ccf87e9fe89"},{"problem":158,"code":"(fn decurry [f]\n    (fn g [& args]\n        (reduce #(%1 %2) f args)\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":158,"code":"(fn [f] (fn [& args]\n  (reduce #(%1 %2) f args)))","user":"5519a6dde4b00ace28fe6e2f"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [f f\n           [x & xs] xs]\n      (if (empty? xs)\n        (f x)\n        (recur (f x) xs)))))","user":"5ab16992e4b073f1774425c4"},{"problem":158,"code":"(fn [f] \n  (fn [& args]\n    (loop [args args\n           f f]\n      (if (empty? args)\n        f\n        (recur (rest args)\n               (f (first args)))))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":158,"code":"(fn [fns] \n  (fn [& rest] \n    (reduce #(% %2) fns rest)))","user":"4dd6d7ee535d2dad7130b5cb"},{"problem":158,"code":"(fn decurry [funcs]\n  (fn [& args]\n    (reduce \n     (fn [func arg] \n       (func arg))  \n     funcs\n     args)))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [f]\n  (fn [x & xs]\n    (reduce #(% %2) (f x) xs)))","problem":158,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [f]\n  (fn [& a]\n    (reduce #(% %2) f a)))","problem":158,"user":"4db85282535d1e037afb218a"},{"code":"(fn [curried] (fn [& args] (reduce #(%1 %2) curried args)))","problem":158,"user":"524be8e0e4b09eba1c0223f1"},{"problem":158,"code":"(fn decurry [f']\n  (fn [& params]\n    (loop [f f'\n           xs params]\n      (let [fst (first xs)\n            rst (rest xs)\n            nxt (f fst)]\n        (if (fn? nxt)\n          (recur nxt rst)\n          nxt)))))","user":"5b64370ae4b0c6492753e73c"},{"problem":158,"code":"(fn decurry [f-of-fs]\n  (fn [& args] (reduce #(%1 %2) f-of-fs args)))","user":"58f2e8fbe4b0438e51c2ce94"},{"code":"(fn [f]\n  (fn [x & rst]\n    (loop [g (f x) args rst]\n      (if (empty? args)\n        g\n        (recur (g (first args)) (rest args))))))","problem":158,"user":"5097b556e4b00ad8bab4e970"},{"problem":158,"code":"partial (fn dc [f & xs]\n  (let [g (f (first xs)) r (rest xs)]\n    (if (empty? r) g (apply dc g r))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg)) f args)))","problem":158,"user":"50d93c53e4b0fd36a4b89223"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f' f [a & aas] args]\n      (let [r (f' a)]\n        (if (fn? r)\n          (recur r aas)\n          r)))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":158,"code":"(fn p158 [func]\n  (fn [& args]\n    (reduce #(%1 %2) func args)))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& xs] (reduce (fn [f x] (f x)) f xs)))","user":"5383668ee4b06839e8705edd"},{"problem":158,"code":"(fn my-super-function [my-function]\n  (fn [& args]  \n    (loop [f my-function\n           i 0]\n      (if (not (fn? f))\n        f\n        (recur \n          (apply f [(nth args i)])\n          (inc i))))))","user":"57c0917be4b05aa3c4741c95"},{"problem":158,"code":"(fn [curried-fn & _]\n  (fn [& args] (reduce (fn [v x] (v x)) curried-fn (seq args))))","user":"4eef3afe535d305ff5cb7f1d"},{"problem":158,"code":"(fn[x] (letfn[(m[f2 x2] (if (fn? (f2 (first x2))) \n                (m (f2 (first x2)) (rest x2))\n                (f2 (first x2))\n                ))]\n          (fn[& s] (m x  s))))","user":"5576e78de4b05c286339e075"},{"problem":158,"code":"(fn decurry [f] (fn [& fs] (reduce #(%1 %2) f fs)))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn [f_]\n\t(fn [& args_]\n\t(loop [f f_ args args_]\n\t  (if (= 1 (count args)) \n\t  \t(f (first args))\n\t  \t(do\n\t  \t\t(println args)\n\t  \t\t(recur (f (first args)) (rest args)))))))","problem":158,"user":"520242bae4b030ee0c5b26e3"},{"problem":158,"code":"(fn [f] (fn decurry[& arg] \n          (loop [func f args arg] \n            (let [res (func (first args))] \n              (if (fn? res)\n                (recur res (rest args))\n                res)))))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [result (f (first args))\n          rest-args (rest args)]\n      (if (fn? result)\n           (recur (result (first rest-args)) (rest rest-args))\n           result))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":158,"code":"(fn [f]\n  (fn [x & xs]\n    (reduce (fn [acc x] (acc x)) (f x) xs)))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (loop [f1 (f (first xs))\n           x (rest xs)]\n      (if-not (fn? f1)\n        f1\n        (recur (f1 (first x)) (rest x))))))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":158,"code":"(fn [f] (fn [& x] (loop [f f x x] (if (empty? x) f (recur (f (first x)) (rest x))))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn [q] (fn [& y] \r\n (loop [f q [x & r] y] (if (fn? f) (recur (f x) r) f))))","problem":158,"user":"4fca2ef0e4b0ee37620e184e"},{"problem":158,"code":"(fn [function]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg))\n            function\n            args)))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":158,"code":"(fn [f] (fn [& n] (reduce  #(% %2) f  n) ))","user":"56c08696e4b060a8e693e3aa"},{"problem":158,"code":"(fn [c] (fn [& a] (reduce #(%1 %2) c a)))","user":"4f29d9abe4b0d6649770a034"},{"problem":158,"code":"(fn decurry [curried-fns]\n  (fn [& args]\n    (loop [[arg & r] args\n           fun curried-fns]\n      (let [result (fun arg)]\n        (if (fn? result)\n          (recur r result)\n          result)))))","user":"53fe1b42e4b0de5c418485f1"},{"problem":158,"code":"(fn my-curry [funcs]\n      (fn[& args]\n        (  \n          (fn inner-curry [funcs args]\n            (if (= (.size args) 1)\n              (funcs (first args))\n              (inner-curry  (funcs (first args)) (rest args) )\n            )\n           )\n          funcs args\n         )\n      )\n    )","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn [f] (fn [& args] (reduce #(%1 %2) f args)))","problem":158,"user":"4fb2101ce4b081705acca284"},{"problem":158,"code":"(fn [f0] (fn [& xs] (reduce (fn [f a] (f a)) f0 xs)))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"#(fn [& a]\n   (loop [f %\n          a a]\n     (if (empty? a)\n       f\n       (recur (f (first a)) (rest a)))))","problem":158,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":158,"code":"(fn dc  [func]\n  (fn ddc [& x] \n    (loop [ago (first x) \n           agc (next x) \n           result func]\n      (if (empty? agc) \n        (result ago)\n          (recur (first agc) (next agc) (result ago))))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [g a]\n              (g a)) f args)))","problem":158,"user":"505bd09fe4b032b709c81373"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& xs]\n    (reduce \n     (fn [r x] (r x))\n     f\n     xs)))","user":"57717915e4b0979f896515b3"},{"code":"(fn [f] (fn [& s] (reduce #(%1 %2) f s)))","problem":158,"user":"4fbe2cfbe4b081705acca30c"},{"problem":158,"code":"(fn __ [f]\n  (fn [& args]\n    (loop [h f i 0]\n      (let [v (h (nth args i))]\n        (if (fn? v)\n          (recur v (inc i))\n          v)))))","user":"526759b3e4b03e8d9a4a715b"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args] (reduce (fn [a e] (a e)) f args)))","user":"590b055ae4b047aa04b199c9"},{"code":"(letfn [(D [f x*]\n          (if (empty? x*) f\n              (recur (f (first x*)) (rest x*))))]\n  (fn [f]\n    (fn [& args]\n      (D f args))))","problem":158,"user":"51a4416ae4b0def3c5c5868c"},{"problem":158,"code":"(fn [f]\n    (fn [& a]\n      (loop [r f\n             [el & re :as all] a]\n        (if (seq all)\n          (recur (r el) re)\n          r))))","user":"56018dd4e4b04bb52996e18f"},{"problem":158,"code":"(fn [fs]\n    (fn [& args]\n      (reduce\n        (fn [f x]\n          (f x))\n        fs\n        args)))","user":"51a54fb4e4b0def3c5c586a3"},{"code":"(fn [f]\n  (fn [& a]\n    (loop [r a, v f]\n       (if (ifn? v)\n           (recur (rest r) (v (first r)))\n           v) )) )","problem":158,"user":"4ee7d177535d93acb0a6686f"},{"problem":158,"code":"(fn [f] (fn [x & xs] (loop [v (f x), r xs]\n                         (if (empty? r) v (recur (v (first r)) (rest r))))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [f] \n  (fn [& args] \n    (reduce (fn [f arg] (f arg)) f args)))","problem":158,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn __ [f]\n  (fn _ [x & xs]\n    (reduce #(% %2) (f x) xs)))","problem":158,"user":"4fa719c0e4b081705acca1bf"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [r f a args]\n      (if (empty? a)\n        r\n        (recur (r (first a)) (rest a))))))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","user":"55c68089e4b0e31453f649c4"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           [head & tail] args]\n      (let [res (f head)]\n        (if-not (fn? res) res (recur res tail))))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn [curried] (fn [& args]\n  (reduce (fn [f a] (f a)) curried args)))","problem":158,"user":"4f13047d535d64f60314642c"},{"problem":158,"code":"(fn [f]\n    (fn [& l]\n      (reduce #(% %2) f l)))","user":"57d9f603e4b0bd073c20240a"},{"problem":158,"code":"(fn fncss [fns]\n    (fn [& args]\n      (reduce (fn [x y] (println y) (if (nil? x) ((partial fns y)) ((partial x y))) ) (conj args nil))))","user":"5508102ee4b021ccfedb96b0"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (loop [x (first a)\n           f (f x)\n           a (rest a)]\n      (if (= a '())\n        f\n        (recur (first a) (f (first a)) (rest a))))))","user":"51ab70c3e4b04e3dc0c27b33"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [x f ys args]\n      (if (empty? ys)\n        x\n        (recur (apply x (list (first ys)))\n               (rest ys))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [g arg] (g arg))\n            f\n            args)))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [args args\n           f    f]\n      (if-let [a (first args)]\n        (recur (next args) (f a))\n        f))))","problem":158,"user":"500d3160e4b05f7c30cfa6a1"},{"problem":158,"code":"(fn [curry-fun]\n  (letfn [(f [g & args]\n            (cond\n              (empty? args) g\n              true (do\n                     (apply (partial f (g (first args))) (rest args)))))]\n    (fn [& args]\n      (apply f (cons curry-fun args)))))","user":"502a5e59e4b09e8f859a9fbc"},{"problem":158,"code":"(fn [f]\n  (partial\n    (fn [f & args]\n      (let [g (f (first args))]\n        (if (fn? g)\n          (recur g (rest args))\n          g)))\n    f))","user":"574af03ce4b02ea114799202"},{"code":"(fn [g] #(reduce (fn [f a] (f a)) g %&))","problem":158,"user":"506cad7de4b0a302964c548e"},{"code":"(fn decurry [curried-fn]\n  \"This is not as strict as what is asked for, but since macros are banned on 4clojure, it will have to do.\"\n  (fn [& args] (reduce #(%1 %2) (curried-fn (first args)) (rest args))))","problem":158,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f\n             [arg & args] args]\n      (if (seq args)\n          (recur (f arg) args)\n          (f arg)))))","problem":158,"user":"4ed2a31c535d44c135fd68db"},{"code":"(fn [f]\n  (fn [& a]\n    (reduce #(% %2)\n            f\n            a)))","problem":158,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [[arg & args] args\n           f f]\n      (if (fn? (f arg))\n        (recur args\n               (f arg))\n        (f arg)))))","user":"554bd33ce4b0a04f7929959a"},{"problem":158,"code":"(fn curry\n  [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)\n    ))","user":"5da7176ae4b000c986472c13"},{"problem":158,"code":"(fn x[f]\n  ( fn [& args]\n    ( loop [ a args res f ]\n      (if (empty? a)\n        res\n        (recur (rest a) (res (first a)))\n        )\n      )\n    )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn [f]\r\n  (fn dc [& xs]\r\n    ;(println \"xs: \" xs)\r\n    (if (= 1 (count xs)) (f (first xs))\r\n    ((apply dc (butlast xs)) (last xs)))))","problem":158,"user":"502a9fdee4b095a7adb898b4"},{"problem":158,"code":"(fn [fun]\n  (fn [& inputs]\n    (reduce #(%1 %2) fun inputs)))","user":"4e6fe3a6535d5021c1a89629"},{"problem":158,"code":"(fn [g]\n  (partial (fn f [& xs]\n    (if (= 1 (count xs))\n      (first xs)\n      (apply f ((first xs) (second xs)) (drop 2 xs)))) g))","user":"551c66dae4b07993ea3788de"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [part-fn f\n           params args]\n      (if (fn? part-fn)\n          (recur (part-fn (first params)) (rest params))\n          part-fn))))","user":"5da760ebe4b000c986472c1a"},{"code":"(fn decurry [f]\n    (fn[& args]\n      (reduce #(%1 %2) f args)))","problem":158,"user":"5273562ae4b03e8d9a4a7479"},{"problem":158,"code":"(fn [F]\n  (fn [& ags]\n    (loop [f F args ags]\n    \t(let [[a & ar] args]\n      \t\t(if (empty? ar) \n              \t(f a)\n                 (recur (f a) ar)))))\n  )","user":"5649615be4b0284900eef641"},{"code":"(fn dc [f]\n  (fn [& xs]\n    (reduce #(% %2) f xs)))","problem":158,"user":"4dc1ee85535d020aff1edf91"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (reduce #(% %2) f args)))","user":"4fab336be4b081705acca216"},{"code":"(fn [x]\n  (fn [& a]\n    (reduce #(%1 %2) x a)))","problem":158,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn [f]\n   (fn [& args]\n     (loop [fun f [arg & other-args] args]\n       (if (seq? other-args)\n         (recur (apply fun [arg]) other-args)\n         (apply fun [arg])))))","problem":158,"user":"4f2e0369e4b0d6649770a064"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [[h & t] args\n             res f]\n        (if (fn? res)\n          (recur t (apply res [h]))\n          res))))","user":"544e9022e4b0e3978000698b"},{"code":"partial\n(fn [f & xs]\n  (if-let [[x & xs] (seq xs)]\n    (recur (f x) xs)\n    f))","problem":158,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [f]\n  \t(fn [& args]\n  \t\t(reduce #(%1 %2) f args)))","problem":158,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn decurry [fun]\n  (partial\n   (fn [f & coll]\n     (reduce (fn dummy [g n] (g n)) f coll)) fun))","problem":158,"user":"4db2cc55535df7e46ed9b6c5"},{"problem":158,"code":"(fn myfunk [input]\n  (fn [& args]\n    (let [f (first args)\n          result (input f)\n          rst (rest args)\n          fnk-returned (fn? result)]\n      (if fnk-returned\n        (apply (myfunk result) rst)\n        result))))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (let [result (f (first args))]\n        (if (fn? result)\n          (recur result (rest args))\n          result)))))","problem":158,"user":"4fd11132e4b04c3a95aa0409"},{"problem":158,"code":"(fn [curried]\n  (fn [& args]\n    (reduce\n     (fn [func input]\n      (func input))\n     curried\n     args)))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [g]\r\n  #(reduce (fn [f a] (f a)) g %&))","problem":158,"user":"500d1db4e4b05f7c30cfa69f"},{"problem":158,"code":"(fn [func] (fn [& args] (reduce #(%1 %2) func args)))","user":"50be9b4ae4b00fb48fed2ef6"},{"code":"(fn [f]\n  (fn [& xs]\n    (loop [f f xs xs]\n      (if (empty? xs)\n        f\n        (recur (f (first xs)) (rest xs))))))","problem":158,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn decurry [f]\n    (letfn [(app [fun & args] (if (empty? args) fun (recur (fun (first args)) (next args) )))]\n      (fn [& args] (apply app f args) )) )","problem":158,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [f] (fn b [& l] (loop [ls (rest l)\n                           acc (f (first l))]\n                      (if (empty? ls)\n                        acc\n                        (recur (rest ls) \n                               (acc (first ls)))))))","problem":158,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"#(fn [& args] (reduce (fn [f x] (f x)) % args))","problem":158,"user":"4f06dcad535dcb61093f6c16"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [remaining args\n           part f]\n      (if (empty? remaining)\n        part\n        (recur (rest remaining) (part (first remaining)))))))","user":"55e2f502e4b050e68259b43c"},{"code":"#(fn [& r] (reduce (fn [a x] (a x)) % r))","problem":158,"user":"4e1047ad535d04ed9115e7bf"},{"problem":158,"code":"(fn uncurry [f]\n  (fn [& args]\n    (loop [f f\n           [x & rst] args]\n      (if (empty? rst)\n        (f x)\n        (recur (f x) rst)))))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn [fun]\n  (fn [& args] \n    (letfn [(it [func args] \n                (if (empty? args)\n    \t\t\t\t\t\t\tfunc\n    \t\t\t\t\t\t\t(it (func (first args)) (rest args))))] \n    (it fun args))))","problem":158,"user":"506617c3e4b03d366d7cb2ab"},{"code":"(fn x1f [x1]     \n     (fn x2f [& nums]\n       (loop [func x1 elements nums]\n         (if elements\n           (recur (func (first elements)) (next elements))\n           func\n           )\n         )        \n       )    \n     )","problem":158,"user":"5106dc1be4b01150e115ebf0"},{"problem":158,"code":"(fn [f] (fn [& args] (loop [f f arg (first args) args (rest args)](let [r (f arg)] (if (fn? r) (recur r (first args) (rest args)) r)))))","user":"5abe2fc2e4b073f17744271e"},{"code":"(fn decurry [f]\n  (fn [a & args]\n    (if args\n      (apply (decurry (f a)) args)\n      (f a))))","problem":158,"user":"4e521cef535d302ef430da6d"},{"code":"#(fn [& ys]\n  (loop [fun % xs ys]\n    (if (empty? xs)\nfun\n(recur (fun (first xs)) (rest xs)))))","problem":158,"user":"5012614ee4b02a085b99dc79"},{"code":"(fn decurry [f]\n    (fn [& r]\n      (reduce #(% %2) f r)))","problem":158,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":158,"code":"(fn [f]\n  (fn [& args] (reduce (fn [fun arg] (fun arg)) f args)))","user":"56603e5fe4b068f2fe63dc4a"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [f f args args]\n        (cond\n          (= 0 (count args)) (f)\n          (= 1 (count args)) (f (first args))\n          :else (recur (f (first args)) (rest args))))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":158,"code":"(fn [nest]\n  (fn [& argv]\n    (loop [f nest\n          args argv]\n      (if (fn? f)\n        (recur (f (first args)) (rest args))\n        f))))","user":"60072e5ee4b074f607df665f"},{"problem":158,"code":"(fn decurry[f]\n  (fn [& args]\n    (reduce (fn[memo, next] (memo next)) f args)))","user":"5980f91ae4b021a7a535fddd"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (reduce #(%1 %2)\n            f\n            a)))","user":"4dc986d0535d5973398f9285"},{"code":"(fn decurry [g]\n  (fn [& a]\n    (loop [n (count a) r g s a]\n      (if (= 0 n)\n        r\n        (recur (dec n) (r (first s)) (rest s))))))","problem":158,"user":"4fd9d162e4b05e33b9224f3c"},{"problem":158,"code":"(fn decurryfy [f]\n  (partial (fn [g & args]\n    (if (empty? args)\n      g\n      (recur (g (first args)) (rest args)))) f))","user":"56588f4ee4b0f9d632dd84b6"},{"code":"(fn [f]\n    (fn [& v] (reduce #(% %2) f v)))","problem":158,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn decurry [curried-f]\r\n  (fn decurried [& args]\r\n    (loop [c-f curried-f\r\n           r-args args]\r\n      (if (= 1 (count r-args)) (apply c-f r-args)\r\n        (let\r\n          [_ (println \"c-f\" c-f)\r\n           [h-arg & t-arg] r-args\r\n           _ (println \"r-args\" r-args)\r\n           _ (println \"h-arg\" h-arg)\r\n           _ (println \"t-arg\" t-arg)\r\n            new-f (c-f h-arg)]\r\n          (recur new-f t-arg))))))","problem":158,"user":"4f036fb3535dcb61093f6ac8"},{"problem":158,"code":"(fn  [f]\n  (fn ret [& args]\n    (loop [rargs args\n           rf f]\n      (let [r (rf (first rargs))]\n        (if (fn? r)\n          (recur (rest rargs) r)\n          r)))))","user":"5794fd7be4b0e215f87e8476"},{"code":"(fn [f]\n   (fn [& a]\n     (reduce #(% %2) f a)))","problem":158,"user":"512700c4e4b083bb8f88cf14"},{"code":"(fn [f]\n    #(reduce (fn [f v] (f v)) f %&))","problem":158,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":158,"code":"(fn [fs]\n  (fn [& args]\n    (reduce (fn [f a] (f a))\n            fs\n            args)))","user":"50978ca4e4b00ad8bab4e966"},{"problem":158,"code":"(fn decurry\n  [f]\n  #(reduce (fn [current-level-func current-level-arg]\n             (current-level-func current-level-arg)) f %&))","user":"5dadd84ee4b0f8c104ccfc85"},{"code":"(fn [c] (fn [& args] (reduce #(% %2) c args)))","problem":158,"user":"5028cd0fe4b01614d1633ffc"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (reduce (fn [accum arg]\n                (accum arg))\n              f\n              args)))","user":"597f8c93e4b0dbe32238d0c1"},{"code":"(fn [f]\n  (fn c [& args]\n    (loop [f f args args]\n      (let [r (f (first args))]\n        (if (fn? r)\n          (recur r (rest args))\n          r\n        )\n      )  \n    )\n  )\n)","problem":158,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":158,"code":"(fn decurryX [f] (partial (fn decurryOneVarity [f & parms] ((fn decurryOne [f parms] \n\t(if (empty? parms) f\n\t\t(decurryOne (f (first parms)) (rest parms) )\n\t))\n f (vec parms))) \n f))","user":"568820e8e4b0dcc4269f4067"},{"problem":158,"code":"(fn [f] \n     (fn [& args] \n       (reduce (fn[a b](apply a (vector b))) f args\n               \n               )\n       )\n     )","user":"592518cde4b072a2710fce66"},{"problem":158,"code":"(fn [f]\r\n  (fn [& args]\r\n    (loop [result f, args args]\r\n      (if (fn? result)\r\n        (let [\r\n          [head & tail] args\r\n          new-result (result head)]\r\n          (recur new-result tail))\r\n        result))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn [f]\n  (fn [& args]                                                                                                                                                                                              \n    (reduce #(%1 %2) (f (first args)) (rest args))))","problem":158,"user":"4f1d1299535d64f603146487"},{"code":"(fn [f]\n   (fn [& r]\n     (reduce #(%1 %2) f r)))","problem":158,"user":"4e705861535d5021c1a89635"},{"problem":158,"code":"(fn [f] \n  (fn [& args] \n    (loop [x f args args]\n      (if args\n        (recur (x (first args)) (next args))\n        x))))","user":"5353afa0e4b084c2834f4b03"},{"problem":158,"code":"; doesn't enforce arity tho\n(fn decurry [fun]\n  (fn [& args] (reduce #(%1 %2) fun args)))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":158,"code":"(fn uncurry [l] #(reduce (fn [f a] (f a)) l %&))","user":"5481be5fe4b0e286459a1172"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f f args args]\n    (if (fn? f)\n      (let [x (first args) y (rest args)]\n        (recur (f x) y))\n      f))\n  ))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn curry[fun]\n  (fn[& params]\n   (loop[f fun\n         p params]     \n     (do\n       (println p)\n     (if (empty? (rest p))   \n       (f (first p))     \n       (recur (f (first p)) (rest p) )         \n    )))))","problem":158,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn f [g]\n  (fn [& coll]\n    (let [h (fn [acc i] (acc i))]\n      (reduce h g coll))))","problem":158,"user":"518c5236e4b087e178201de0"},{"code":"(fn[f] #(reduce deliver f %&))","problem":158,"user":"5141fafbe4b0b50abeb46b28"},{"code":"(fn uncurry [curried]\n  (fn g [& args]\n    (reduce #(% %2) (curried (first args)) (rest args))))","problem":158,"user":"52bf936ee4b07a9af579233b"},{"problem":158,"code":"(fn uncurry [f]\n  (fn uncurried [& args]\n    (reduce #(%1 %2) f args)))","user":"55a1d7f6e4b0acc240e31519"},{"code":"(fn [f] (fn [& args] (reduce #(% %2) f args)))","problem":158,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":158,"code":"(fn problem-158\n  [f]\n  (fn meh [& xs]\n    (reduce (fn [a x]\n              (a x))\n            f\n            xs)))","user":"58e37946e4b005f69f193cae"},{"problem":158,"code":"(fn [fc] (fn [& args] (reduce (fn [f a] (f a)) fc args)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":158,"code":"(fn [f]\n  (fn [& xs] \n    (reduce #(%1 %2) f xs)))\n\n#_(fn d [f]\n  (fn [x & xs] \n    (if (empty? xs)\n      (f x)\n      (apply (d (f x)) xs))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [f]\n  (letfn [(uncurry [f args] \n                   (if (empty? args) f\n                     (recur (f (first args)) (rest args))))]\n    (fn [& args] (uncurry f args))))","problem":158,"user":"532347dde4b09d4e7a9b54cc"},{"code":"(fn [f]\n  (fn [ & args]\n    (loop [res f a args]\n      (if (empty? a) res\n        (recur (res (first a)) (rest a))))))","problem":158,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":158,"code":"#(fn [& s]\n       (reduce (fn [o v] (o v)) % s)\n       )","user":"5921a080e4b09b4ee5954c77"},{"problem":158,"code":"(fn decurried [f]\n  (fn [& nums]\n    (loop [f1 f nums1 nums]\n      (if (empty? nums1)\n        f1\n        (recur (f1 (first nums1)) (rest nums1))))))","user":"5693a53ee4b0dcc4269f4106"},{"problem":158,"code":"(fn [fc]\n  (fn [& args]\n    (reduce (fn [f x]\n              (f x))\n            fc args)))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn decurry- [f]\n  ^{:doc \"158. Write a function that accepts a curried function of                                                                                                                                                 \n  unknown arity n. Return an equivalent function of n arguments.\"}\n  (fn [& xs]\n    (loop [[x & xs] (seq xs)\n           f f]\n      (if (empty? xs)\n\t(f x)\n\t(recur xs (f x))))))","problem":158,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":158,"code":"(fn decurry[f]\n  (fn [& t](reduce #(%1 %2) f t)))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn p [x]\n  (fn f ([a b] ((x a) b))\n    ([a b c d] ((((x a) b) c) d))))","problem":158,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [f] (fn [& val] (reduce #(% %2) f val)))","problem":158,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [fs]\n  (fn [& args]\n    (reduce #(% %2) fs args)))","problem":158,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":158,"code":"(fn [curried]\n    (letfn [(decurried [& args]\n              (reduce #(%1 %2) curried args))]\n      decurried))","user":"515cf9b5e4b00901442db1d4"},{"code":"(fn a [f] \n  (fn [& args]\n    (reduce (fn [res arg]\n              (res arg)) \n            (f (first args)) \n            (rest args))))","problem":158,"user":"4f3e6244e4b0e243712b1f85"},{"problem":158,"code":"(fn decur [fun]\n \t(fn [& args]\n\t\t(reduce #(%1 %2) fun args)))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [f f\n           args args]\n      (if (= (count args) 1)\n        (f (first args))\n        (recur (f (first args))\n               (rest args))))))","problem":158,"user":"4fde492be4b05e33b9224f8a"},{"code":"(fn [g]\n  #(reduce (fn [f a] (f a)) g %&))","problem":158,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [f] \n     (fn [& xs] \n       (loop [g f s xs]\n         (if (empty? (rest s)) (g (first s))\n           (recur (g (first s)) (rest s))))))","problem":158,"user":"5029fccee4b023940c84aa47"},{"code":"(fn [c] (fn [& args] \n            (loop [f c a args]\n              (if (empty? a)\n                f\n                (recur (f (first a)) (rest a))))))","problem":158,"user":"4eb13d60535d7eef3080733f"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (loop [f f [x & xs] a]\n      (if (fn? f)\n        (recur (f x) xs)\n        f)\n      )))","user":"53d78b64e4b0e771c3025466"},{"problem":158,"code":"(fn [f]\n  (fn [& args] (reduce #(if (ifn? %1) (%1 %2) %1) f args)))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn [f] (fn d [& a]\n            ((fn r [g c] (if (empty? c)\n                            g\n                          (r (g (first c)) (rest c))\n                          )\n              ) f (seq a))))","problem":158,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":158,"code":"(fn uncurry [func]\n  (fn [& args]\n    (loop [f func, coll args]\n      (if (empty? coll)\n        f\n        (recur\n          (f (first coll))\n          (rest coll))\n      )\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":158,"code":"(fn [nestedFunction]\n  (fn [& args]\n    (reduce #(%1 %2) nestedFunction args)))\n;an alternative solution\n;(fn [nestedFunctions] ;input is a nested function\n;  (fn [& args] ;output is a function taking multiple arguments\n;    (loop [func nestedFunctions, remainingArgs args] ;loops to decurry\n;      (let [result (func (first remainingArgs))] ;map each argument\n;        (if (ifn? result) (recur result (rest remainingArgs));if it is still a function, then go deeper\n;          result)))));else return result","user":"556c70dae4b09a3098a524fd"},{"problem":158,"code":"(fn [f] \n  (fn [& coll] \n    (reduce #(%1 %2) \n            (f (first coll)) \n            (rest coll))))","user":"5e0ceca5e4b099d064962f91"},{"code":"(fn [f] \n   (fn [& args] (reduce (fn [op data] (apply op (vector data))) f args)))","problem":158,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [f] (fn [& xs]\n          (loop [y f c xs]\n            (if (empty? c) y\n              (recur (y (first c))\n                     (rest c)))\n            )\n          )\n  )","problem":158,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [func]\n  (fn r [& args] (reduce #(% %2) func args)))","problem":158,"user":"4ea1b9e4535d7eef308072b8"},{"code":"#(fn [& a] (reduce (fn [f x] (f x)) % a))","problem":158,"user":"514d8084e4b019235f6c0588"},{"problem":158,"code":"(fn decur\n  [f]\n  (fn [& args]\n    (loop [args args\n           f f]\n      (if-not (empty? args)\n        (recur (rest args) (f (first args)))\n        f))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [f' f, args' args]\n      (if (seq args')\n        (recur (f' (first args')) (rest args'))\n        f'))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":158,"code":"(fn [f]\n  (fn [& args] (reduce #(% %2) f args))\n  )","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [f]\n  (fn [& r]\n    (reduce #(% %2) f r)))","problem":158,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [f]\n  (fn [ & args]\n    (let [g (fn [v argseq]\n          (if (empty? argseq)\n            v\n            (recur (v (first argseq)) (rest argseq))))]\n      (g (f (first args)) (rest args)))))","problem":158,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":158,"code":"(fn decurry [cfn]\n  (fn [& as]\n    (loop [args as f cfn]\n      (if (empty? args)\n        f\n        (recur (rest args) (f (first args)))))))","user":"56069006e4b08b23635d3174"},{"code":"(fn decurry [f]\n    (fn [ & xs ] (if (empty? xs) f (apply (decurry (f (first xs))) (rest xs)))))","problem":158,"user":"51f59607e4b0abb92f97f9d5"},{"problem":158,"code":"(fn [f]\n(fn [& x] (reduce #(%1 %2) f x)))","user":"549cd548e4b0f3d1d8e70f91"},{"problem":158,"code":"(fn my-test [f] \n\n\t(let [me (fn [f & args ]\n\n\t\t\t\t\t(let [helper (fn [f1 a]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t(f1 a)\n\t\t\t\t\t\t)]\t\n\n\t\t\t\t\t\t(reduce helper f args)\n\t\t\t\t\t)) \n\t\t]\n\n\t\t(partial me f)\n\t)\n)","user":"55897fe2e4b059ccff29b205"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (loop [f f a a]\n      (if (seq a)\n        (recur (f (first a)) (rest a))\n        f))))","user":"56bb652ae4b0f26550335953"},{"problem":158,"code":"(fn [ f ] \n  (fn [ & xs ] (reduce #(%1 %2) f xs) ))","user":"54d6f22de4b0a52adc2e2023"},{"problem":158,"code":"(fn [f] (fn [& args](reduce #(% %2) f args)))","user":"512b07f7e4b078b06821febb"},{"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [new-f arg] (new-f arg)) f args)))","problem":158,"user":"51281b25e4b03a34742b4304"},{"code":"(fn j [-fn]\n    (fn [a & more]\n      (if (fn? (-fn a))\n        (apply (j (-fn a)) more)\n        (-fn a)\n        )))","problem":158,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"partial (fn [& r] (reduce #(% %2) r))","problem":158,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn [f]\n  (fn g [x & xs]\n    (if (empty? xs)\n      (f x)\n      ((apply g xs) x))))","problem":158,"user":"4db4714f535dc0f10411755a"},{"code":"#(fn [& a]\n   (reduce (fn [f x] (f x)) % a))","problem":158,"user":"50acbd15e4b071b89ef26234"},{"problem":158,"code":"(fn [f]\n    (fn [ & v ]\n      (loop [args  v\n             thefn   f]\n        (if (empty? args) thefn\n            (recur (rest args) (thefn (first args)))))\n      )\n    )","user":"57aa290de4b0b8559636fc65"},{"problem":158,"code":"(fn [f]\n    (fn [& s]\n      (reduce (fn [i e] (i e)) f s)))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn decur [f]\n  (fn [& args]\n    (reduce #(% %2) f args)))","problem":158,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n\t\t(loop [as args g f]\n\t\t\t(if (seq as)\n\t\t\t\t(recur (rest as) (g (first as)))\n\t\t\t\tg))))","user":"5578f292e4b05c286339e08f"},{"code":"#(fn [& xs]\n  (reduce (fn [acc x]\n              (acc x))\n            %\n            xs))","problem":158,"user":"4db53f87535d87e67b28fe08"},{"code":"(fn cur [f]\n  (fn cur2[ & args]\n    (reduce #(% %2) f args))\n  )","problem":158,"user":"51bec919e4b013aa0d74b800"},{"problem":158,"code":"(fn [fun]\n  (fn [& args]\n    (reduce\n      (fn [m el]\n        (m el))\n      fun\n      args)))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn uncurry [f]\n  (fn [& args] \n    (reduce #(%1 %2) f args)))","problem":158,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":158,"code":"(fn d [f]\n  (fn [h & r]\n    (if r\n      (apply (d (f h)) r)\n      (f h))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [f]\n  (fn [& x]\n    (reduce #(%1 %2) f x)))","problem":158,"user":"4db85bdd535d1e037afb218d"},{"code":"(fn [f] \n  (fn [& args] (reduce (fn [l r] (l r)) f args)))","problem":158,"user":"4dd579b5535dae65d5c462ea"},{"problem":158,"code":"(fn [f]\n    (fn [& xs]\n        (loop [fun f\n               args (apply list xs)]\n            (if-not (fn? fun)\n                fun\n                (recur (fun (first args)) (rest args))))))","user":"600ae927e4b074f607df6689"},{"problem":158,"code":"(fn foo\n  ([f] (\n        fn ([& args]\n            (reduce #(%1 %2) f args)\n            )\n        \n        ))\n  )","user":"5d270111e4b092dab7f59c62"},{"problem":158,"code":"(fn [f]\n  (fn [x & xs]\n    (reduce (fn [a y] (a y)) (f x) xs)))","user":"514a3fa5e4b0829bd132edb6"},{"problem":158,"code":"(fn [f] \n  (fn [& args] \n    (reduce \n     #(%1 %2) \n     f \n     args)\n    )\n  )","user":"5ba75fdfe4b0a20761a23419"},{"problem":158,"code":"(fn [f]\n  (fn [& a]\n    (letfn [(furp [func args]\n                  (if (fn? func)\n                    (furp (func (first args)) (rest args))\n                    func\n                  )\n           )]\n      (furp f a))\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":158,"code":"(fn [g]\n    (letfn [(step [f xs]\n              (if (fn? f)\n                (recur (f (first xs)) (rest xs))\n                f))]\n      (fn [& args]\n        (step g args))))","user":"5782018de4b0d36ec5835e8e"},{"problem":158,"code":"(fn [f] (fn [v & l] (reduce #(%1 %2) (f v) l)))","user":"50856bd1e4b004985b776e4c"},{"problem":158,"code":"(fn [f] #(reduce (fn [g x] (g x)) f %&))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":158,"code":"#(fn [& x] (loop [fs %, x x] (if (fn? fs) (recur (fs (first x)) (rest x)) fs)))","user":"5507cfd3e4b021ccfedb96ad"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [ret f\n           left args]\n      (if (not (ifn? ret))\n        ret\n        (recur (ret (first left)) (rest left))))))","problem":158,"user":"512eb723e4b0b740abc5982b"},{"problem":158,"code":"(fn [f]\n  (fn [& n]\n    (reduce #(% %2) f n)))","user":"53d5a63be4b0e771c3025449"},{"problem":158,"code":"(fn [cf] (fn [& args] \n           ((fn rec [gf args2]\n             (if (empty? args2) gf (rec (gf (first args2)) (next args2))) \n                    )  cf args ) ) )","user":"55e99611e4b0121d4835fda3"},{"problem":158,"code":"(fn decurry [curried-fn]\n  (fn [& args]\n    (reduce (fn [f arg] (f arg)) curried-fn args)))","user":"571c2babe4b07c98581c3b73"},{"problem":158,"code":"(fn ff [f]\n    (let [ffff (fn ffff [f args]\n                 (let [result (f (first args))]\n                   (if (fn? result)\n                     (ffff result\n                           (rest args))\n                     result)))]\n      (fn fff [& args]\n        (ffff f args))))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":158,"code":"(fn decurry [f]\n  (fn [arg & more]\n    (if (empty? more)\n      (f arg)\n      (apply (decurry (f arg)) more))))","user":"573d58c8e4b05c31a32c0811"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& arg-list]\n    (loop [args arg-list, result f]\n      (if (empty? args)\n        result\n        (recur\n          (rest args)\n          (result (first args)))))))","user":"52ee46e5e4b05e3f0be25ec5"},{"code":"#(fn [& a] (loop [[b & r] a f %] (if b (recur r (f b)) f)))","problem":158,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn f [r]\n    (fn [& a]\n        (reduce #(% %2) r a)))","problem":158,"user":"528a3e14e4b0239c8a67ae72"},{"problem":158,"code":"(fn uncurry\n  [f]\n  (fn [& args]\n    (let [aplica-paso (fn [f x] (f x))]\n      (reduce #(aplica-paso %1 %2) f args))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":158,"code":"(fn [f]\n  (fn [& a-seq]\n    (loop [h f lseq a-seq]\n      (if (not (fn? h))\n        h\n        (recur (h (first lseq)) (rest lseq))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce (fn [r e]\n              (apply r [e]))\n            f args)))","problem":158,"user":"5348cab4e4b084c2834f4a5e"},{"problem":158,"code":"(fn [f]\n  (fn [ & a]\n    (loop [f f a a]\n      (if (empty? a)\n        f\n        (recur (f (first a)) (rest a))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"code":"(fn [f] (fn [ & xs ] (reduce #(% %2) f xs)))","problem":158,"user":"4f04b66b535dcb61093f6bdd"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n\t  (reduce #(%1 %2) f args)))","user":"56897739e4b0dcc4269f407d"},{"code":"(fn [f]\n  (fn [& a] (reduce #(%1 %2) f a)))","problem":158,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn [f]\n  (fn [ & args]\n    ((fn rf [ f as]\n      (if (empty? (rest as))\n        (f (first as))\n        (rf (f (first as)) (rest as))\n      )\n    )\n    f args)\n  )\n)","problem":158,"user":"4f84400de4b033992c121c2e"},{"code":"(fn decurry[f] \n  (fn [& args]\n    (loop [rargs args rf f] \n      (if (empty? rargs) rf (recur (drop 1 rargs) (rf (first rargs)))))))","problem":158,"user":"5093ca51e4b097f48cc38585"},{"code":"(fn uncurry [f] (fn [& args] (loop [f f args args] (if args (recur (f (first args)) (next args)) f))))","problem":158,"user":"5138d08be4b0a5db03d727db"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [remaining (rest args) ans (f (first args))]\n      (if (empty? remaining)\n        ans\n        (recur (rest remaining) (ans (first remaining)))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (loop [s (rest args) c (f (first args))]\n      (if (or (empty? s)(not (ifn? c)))  c\n        (recur (rest s) (c (first s)))))))","user":"56bb9ccce4b0f26550335959"},{"code":"(fn d [f]\n  (fn [a & as]\n    (if (empty? as) (f a)\n        (apply (d (f a)) as))))","problem":158,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":158,"code":"(fn [f] (fn [& x] (reduce (fn [g y] (g y)) f x)))","user":"4faa9593e4b081705acca1f9"},{"problem":158,"code":"(fn [fun]\n  (fn [& args]\n    (loop [f fun args-left args] \n      (if (= 1 (count args-left))\n      \t  (f (first args-left))\n          (recur (f (first args-left))\n                 (rest args-left))))))","user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (let [result (f (first args))]\n      (if (fn? result)\n        (apply (decurry result) (rest args))\n        result))))","problem":158,"user":"4fe8b6afe4b07c9f6fd12c76"},{"problem":158,"code":"(fn de-curry [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"5b13ba71e4b0cc2b61a3be53"},{"problem":158,"code":"(fn decurry [f]\n  (fn uncurried [& args]\n    (loop [f f args args]\n      (if (empty? args)\n        f\n        (recur (f (first args)) (rest args))))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":158,"code":"partial (fn [f & args] (reduce #(% %2) f args))","user":"59f043d0e4b0966464fe6a3d"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (reduce #(%1 %2) f args)))","user":"561814bae4b06b1bb2182a1a"},{"problem":158,"code":"(fn decurry [funcs]\n    (fn [& args]\n      (loop [funcs funcs args args]\n        (cond (empty? args) funcs\n              :else (recur (funcs (first args)) (rest args))))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [f] (fn [& a]\n    (let [f* (fn f* [acc a]\n      (if (seq a) \n        (f* (acc (first a)) (rest a))\n        acc))]\n    (f* f a))))","problem":158,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [f]\n  (fn [& args]\n    (loop\n      [f f\n       args args]\n      (if-not (fn? f)\n        f\n        (recur (f (first args)) (rest args))))))","problem":158,"user":"536f871de4b0fc7073fd6e7f"},{"problem":158,"code":"(fn [fs]\n    (fn [& xs]\n      (loop [f fs\n             xs' xs]\n        (if (= 1 (count xs'))\n          (f (first xs'))\n          (recur (f (first xs')) (rest xs'))))))","user":"51e3a549e4b0c611d6113e47"},{"problem":158,"code":"(fn decurry [cf] (fn [& args] (reduce #(%1 %2) cf args)))","user":"542c1f73e4b0dad94371f29d"},{"problem":158,"code":"(fn decurry [cr-fn]\n  (fn [& coll]\n    (reduce (fn [f x] (f x)) cr-fn coll)))","user":"4dd7d040535d2dad7130b5d6"},{"problem":158,"code":"(fn decurry [f] \n  (fn [& args] \n    (loop [x f p args]\n      (if (= 1 (count p))\n        (x (first p))\n        (recur (x (first p)) (rest p)))\n      )\n    )\n  )","user":"5592bf9fe4b0c79f6e1db933"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [& args]\n    (reduce #(%1 %2) f args)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":158,"code":"#(fn [& a]\n    (loop [f % a a]\n      (if (fn? f)\n        (recur (f (first a)) (rest a))\n        f)))","user":"502940a9e4b061fd216be4b8"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (if (empty? args) f\n      (apply (decurry (f (first args))) (rest args)))))","problem":158,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":158,"code":"(fn decurry [f]\n  (if (fn? f)\n    (fn [& args]\n      (apply (decurry (f (first args))) \n             (rest args)))\n    (fn [& args] f)))","user":"53acaf1fe4b047364c04445f"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [f f [h & t :as args] args]\n        (let [result (f h)]\n          (if (seq t)\n            (recur result t)\n            result)))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":158,"code":"(fn decurry\n  [f]\n  (fn [ & xs] (reduce (fn [accum x] (accum x)) f xs)))","user":"5c222b7de4b07e362c230588"},{"code":"#(fn [& a] (reduce (fn [r,b] (r b)) % a))","problem":158,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [f] (fn [& xs] (reduce #(% %2) f xs)))","problem":158,"user":"50479524e4b0371827a27bc4"},{"code":"(fn [fs](fn [& a](reduce #(% %2) fs a)))","problem":158,"user":"51b793d3e4b0d906fcd71d38"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args] \n    (reduce #(apply % %&) f args)))","user":"5368fedee4b0243289761e93"},{"code":"(fn dc [f]\n  (fn [& p]\n    ((fn rdc [f p]\n       (if (fn? (f (first p)))\n         (rdc (f (first p)) (rest p))\n         (f (first p)))) f p)))","problem":158,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn [fun] (fn [arg & rest] (reduce #(%1 %2) (fun arg) rest)))","problem":158,"user":"513d121fe4b0e544971636a2"},{"problem":158,"code":"#(fn [& args]\n   ;; (loop [f %1\n   ;;        lst args]\n   ;;   (if (= (count lst) 1)\n   ;;     (f (first lst))\n   ;;     (recur (f (first lst)) (next lst))))\n   (reduce (fn [f ele] (f ele))\n           % args)\n   )","user":"60096aabe4b074f607df667f"},{"problem":158,"code":"(fn [f] (fn [& r] (reduce #(apply %1 (list %2)) (f (first r)) (rest r))))","user":"53aaaf7ae4b047364c044444"},{"problem":158,"code":"(fn z [f]\n  (fn [& args] (reduce #(%1 %2) (f (first args)) (rest args))))","user":"583667c7e4b089d5ab817cfb"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n    (reduce #(%1 %2) f xs)))\n\n\n#_(fn decurried-f [f]\n  #(letfn [(aux [curr-f left-args]\n             (if (empty? left-args)\n               curr-f\n               (recur (curr-f (first left-args))\n                      (rest left-args))))]\n     (aux f %&)))","user":"568e1871e4b0dcc4269f40cc"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n      (loop [new-f f\n             [fst & rest-args] args]\n        (if (fn? new-f)\n          (recur (apply new-f [fst])\n                 rest-args)\n          new-f))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":158,"code":"(fn [f] \n  (fn [& args] \n    (reduce (fn [a b] (a b)) f args)))","user":"513e8141e4b02b2a3d8235c1"},{"code":"(fn [f]\n  (fn [& xs] (reduce #(% %2) f xs))\n  )","problem":158,"user":"4e6e10d8535d5021c1a895fd"},{"problem":158,"code":"(fn [f]\n    (letfn [(inner [f [arg & args]]\n              (let [ret (f arg)]\n                (if-let [rst (seq args)]\n                  (recur ret args)\n                  ret)))]\n      (fn [& args]\n        (inner f args))))","user":"560e9a2de4b05f002753df52"},{"problem":158,"code":"(fn [curried] (fn [& args] (reduce (fn [f arg] (f arg)) curried args)))","user":"5d0e9931e4b0cc9c91588258"},{"problem":158,"code":"(fn [_]\n  #(cond \n    (= %& '(1 2 3 4)) (if (zero? (rand-int 2)) 10 24)\n    :else 25))","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn decurry ([f] (decurry f 1))\n  ([f arity]\n     (let [res (apply f (repeat arity 1))]\n       (if (fn? res)\n         (recur (fn [x & y] ((apply f (cons x (butlast y))) (last y))) (inc arity))\n         f))))","problem":158,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [f]\n  (fn [& xs]\n    (reduce (fn [f x] (f x)) f xs)))","problem":158,"user":"52487654e4b05ef8e38e63dc"},{"problem":158,"code":"(fn my-decurry\n  [fun]\n  (fn [& args] (reduce #(apply %1 (vector %2)) fun args)))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":158,"code":"partial (fn uncurry [f & arguments]\n  (let [xs arguments\n        helper (fn helper [func seqz]\n                 (if (seq seqz) (helper (func (first seqz)) (rest seqz))\n                                func))\n        answer (helper f xs)\n        ]\n    answer))","user":"5414b7c4e4b01498b1a719ed"},{"problem":158,"code":"(fn [f]                                                (fn [& args]                                           (letfn [(rec [args result]                                     (if (empty? args)                                      result                                               (let [[h & t] args]                                    (rec t (result h)))))]                   (rec args f))))","user":"5895477fe4b00487982d527c"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (reduce (fn [acc x] (acc x)) f args)\n    )\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [[a & as] args\n           f f]\n      (if (nil? a)\n        f\n        (recur as (f a))))))","problem":158,"user":"511e763ce4b03e81d390ac29"},{"problem":158,"code":"(fn [f]\n  (letfn [(curry [f args]\n            (if (empty? args)\n              f\n              (curry (f (first args)) (rest args))))]\n    (fn [& args]\n      (curry f args))))","user":"55c66ffee4b0e31453f649c2"},{"problem":158,"code":"(fn decurry [f] (fn [& args] (reduce #(apply %1 (vector %2)) f args)))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [f]\n  (fn [& args]\n    (loop [func f xs args]\n      (if (empty? xs)\n        func\n        (recur (func (first xs)) (rest xs))))))","problem":158,"user":"4e42f930535dc968683fc49f"},{"problem":158,"code":"#(fn [& a]\n    (reduce (fn [a x] (a x)) % a))","user":"55be39f9e4b01b9910ae2a06"},{"problem":158,"code":"(fn myf [f]\n  (fn [& xs]\n    (loop [xs xs f f]\n      (if (empty? xs)\n        f\n        (recur (rest xs) (f (first xs)))))\n    ))","user":"608ec5e4e4b03bd49d9f36c0"},{"code":";; Note: This function does not return a function that takes only\n;; exactly n arguments, the number of arguments expected by the\n;; curried function.  Instead it takes a variable number of arguments,\n;; and keeps applying the curried function on successive arguments\n;; until the arguments run out.\n\n;; I don't see how to literally do what the problem is asking for,\n;; especially if we cannot assume what type of arguments the functions\n;; take, and then make trial calls to the functions, and assume that\n;; they are never intended to return functions.\n\n(fn [f]\n  (fn [& args]\n    (reduce (fn [f a]\n              (f a))\n            f args)))","problem":158,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn [g]\n    (fn [& s]\n        ((fn [f xs]\n             (let [r (f (first xs))]\n               (if (fn? r) (recur r (rest xs))\n                 r)))\n         g s)))","problem":158,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":158,"code":"(fn [f]\n  (fn [& args]\n    (reduce (fn [facc x] (facc x))\n            f\n            args)))","user":"54b13a40e4b09f271ff37d1b"},{"problem":158,"code":"(fn uncury [f]\n  (fn [& args]\n    (loop [f f args args]\n      (if (= 1 (count args))\n        (f (first args))\n        (recur (f (first args)) (next args))))))","user":"5958cef6e4b066ee0a44af94"},{"code":"(fn [func]\n  (fn decurried [& xs]\n    (loop [f func\n           y xs]\n      (if (empty? y)\n        f\n        (recur (f (first y)) (rest y))\n        )\n      )\n    )\n  )","problem":158,"user":"52e59ca5e4b09f7907dd1464"},{"problem":158,"code":"(fn ([f] (fn ([& r] (reduce #(%1 %2) f r)))))","user":"54d8cc38e4b0a52adc2e203e"},{"problem":158,"code":"(fn decurry [f]\n  (fn [& args]\n    (loop [input args, output f]\n          (if (empty? input)\n              output\n              (recur (rest input) (output (first input)))))))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn [f] (fn [& args] (reduce (fn [x y] (apply x (vector y))) f args)))","problem":158,"user":"526dd90de4b03e8d9a4a72fe"},{"code":"(fn [f] (letfn [(call [f a] (let [f2 (f (first a))] (if (fn? f2) (call f2 (rest a)) f2)))] (fn [& args] (call f args))))","problem":158,"user":"52c1bd29e4b07a9af579236a"},{"problem":158,"code":"(fn [f]\n  (fn [& c] (reduce #(%1 %2) f c)))","user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn decurry\n  [g]\n  #(reduce (fn [f a] (f a)) g %&))","problem":158,"user":"50b0cffae4b009df37c708c5"},{"code":"(fn decurry [fun]\n\t\t       (fn [& args]\n\t\t\t (loop [f fun args args]\n\t\t\t    (if (empty? (rest args))\n\t\t\t\t(f (first args))\n\t\t\t\t(recur (f (first args)) (rest args))))))","problem":158,"user":"4e68fad4535d8ccf87e9fe93"},{"code":"(fn [x]\n  (fn [& y]\n    (reduce #(% %2) x y)))","problem":158,"user":"4da3e51330acd6ed10482a68"},{"code":"(fn n158 [f]\n  (fn [& args]\n    (loop [fs f a args] (if (empty? a) fs (recur (fs (first a)) (rest a))))))","problem":158,"user":"52b43468e4b0c58976d9ad1b"},{"problem":158,"code":"(fn [f]\n    (fn [& args]\n        (if (empty? args)\n            (f)\n            (loop [x (first args)\n                   xs (rest args)\n                   g f]\n                  (let [g_x (g x)]\n                      (if (fn? g_x)\n                          (recur (first xs) (rest xs) g_x)\n                          g_x))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [func]\n  (fn [& args]\n    (reduce (fn [f v] (f v))\n            (func (first args))\n            (rest args))))","problem":158,"user":"5225271fe4b01819a2de42f9"},{"code":"(fn [f]\n(fn [& a]\n  (reduce #(%1 %2) f a)))","problem":158,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn decurry [cfn]\n  (fn [& args]\n    (reduce #(%1 %2) cfn args)))","problem":158,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":158,"code":"(fn decurry [f]\n    (fn [& args]\n      (loop [f f, [x & more] args]\n        (if (fn? f)\n          (recur (f x) more)\n          f))))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn [f]\r\n  (fn [& a]\r\n    (reduce (fn [r x] (if (fn? r) (r x) x)) f a)))","problem":158,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn t158 [f]\n  (fn [& list]\n    (loop [accu (f (first list)) prams (rest list) ]\n      (if (empty? prams )\n          accu\n          (recur (accu (first prams)) (rest prams))\n        ) )\n    )\n  )","problem":158,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":158,"code":"(fn decurry [f]\n  (fn decr [& args]\n    (letfn\n      [(inner-decr [fc arg]\n                   (if (empty? arg)\n                     fc\n                     (inner-decr (fc (first arg)) (rest arg))))]\n      (inner-decr f args))))","user":"5a426a3fe4b0447ef91cc5f2"},{"problem":158,"code":"(fn [f] (fn [& args] (reduce (fn [f x] (f x)) f args)))","user":"5d272077e4b092dab7f59c64"},{"problem":158,"code":"(fn decurry [f]\n       (fn g [& x]\n         (if (seq (rest x))\n           (apply (decurry (f (first x))) (rest x))\n           (f (first x)))))","user":"532727bae4b09d4e7a9b54fa"},{"problem":158,"code":"(fn [f]\n  (fn [& xs]\n\n    (loop [func f args xs] \n\n      (if (empty? args) \n\n        func\n\n        (recur (func (first args)) (rest args))))))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn [fns] (fn [ & args ] (reduce #(%1 %2) fns args)))","problem":158,"user":"4ec1923f535dfed6da9c6db2"}]