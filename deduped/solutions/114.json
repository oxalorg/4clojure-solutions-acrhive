[{"code":"(fn take-n-while [i pred coll]\n  (let [[f [m & r]] (split-with (complement pred) coll)]\n    (if (= 1 i)\n        f\n        (concat f [m] (take-n-while (dec i) pred r)))))","problem":114,"user":"4ee6400c535d93acb0a6685b"},{"code":"(fn gtakewhile\r\n  [n pred lista]\r\n\t(let [helper (fn helper [n pred lista]\r\n\t\t\t\t\t\t\t\t(if (zero? n)\r\n\t\t\t\t\t\t\t\t\t(take-while pred lista)\r\n\t\t\t\t\t\t\t\t\t(let [[first-chunk rest-chunk] (split-with (complement pred) lista)]\r\n\t\t\t\t\t\t\t\t\t\t(concat (concat first-chunk [(first rest-chunk)])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(helper (dec n) pred (rest rest-chunk))))))]\r\n\t\t(drop-last (helper n pred lista))))","problem":114,"user":"4e8a0c82535d3e98b802328d"},{"code":"(fn p114  [n pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)  ]\n      (let [m (if (pred (first s)) (dec n) n )]\n       (when (or (> m 0) (not (pred (first s))))\n         (cons (first s)\n               (p114  m pred (rest s))))))))","problem":114,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn [n prd col]\n  (let [a (atom 0)]\n    (take-while (fn [x] (if (prd x) (swap! a inc)) (< @a n)) col)))","problem":114,"user":"5233ad08e4b07e3ee2be83ac"},{"code":"(fn gtake-while\n  [n p r]\n  (map\n   first\n   (take-while\n    #(< (% 1) n)\n    (rest\n     (iterate (fn [[_ c [el & sq]]]\n                (if (p el)\n                  [el (inc c) sq]\n                  [el c sq]))\n             [nil 0 r])))))","problem":114,"user":"51f9527fe4b09be9c177e549"},{"problem":114,"code":"(fn take [n p [f & r :as x]] (lazy-seq\n   (cond (empty? x) x\n         (= n 0) nil\n         (p f) (if (> n 1) (cons f (take (dec n) p r)) nil)\n         :else (cons f (take n p r)))))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn [n f x]\n    (map (fn [a b] b)\n      (take-while (fn [m] (not= n m))\n        (reductions + (map #(if (f %) 1 0) x )))\n      x))","problem":114,"user":"4fdd27f3e4b05e33b9224f78"},{"problem":114,"code":"(fn take-while-n [n pred coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if (pred (first s))\n        (when (> n 1) (cons (first s) (take-while-n (dec n) pred (rest s))))\n        (cons (first s) (take-while-n n pred (rest s)))))))","user":"59c94a69e4b0a024fb6ae576"},{"problem":114,"code":"(fn global-take-while [n p [x & xs]]\n  (if (p x)\n    (if (= 1 n)\n      nil\n      (cons x (global-take-while (dec n) p xs)))\n    (cons x (global-take-while n p xs))))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn ! ([num func coll]\n\t       (if (func (first coll)) \n\t         (cons (first coll) (lazy-seq (! num func (rest coll) 1 ) ))\n\t         (cons (first coll) (lazy-seq (! num func (rest coll) 0 ) ))\n\t         )\n\t       )\n       ([num func coll i]               \n         (if (and  (= (- num 1) i) (func (first coll)) )\n           nil\n           (if (func (first coll)) \n\t\t         (cons (first coll) (lazy-seq (! num func (rest coll) (inc i) ) ))\n\t\t         (cons (first coll) (lazy-seq (! num func (rest coll) i ) ))\n\t         )\n\t       )               \n       )\n   )","problem":114,"user":"5106dc1be4b01150e115ebf0"},{"problem":114,"code":"(fn take-while-keep [n p s]\n  (loop [s s\n         tally 0\n         result []]\n    (if (seq s)\n      (let [t (first s)\n            tally (+ tally (if (p t) 1 0))]\n        (if (< tally n)\n          (recur (rest s) tally (concat result (list t)))\n          result)))))","user":"56f4cedce4b046a417f92063"},{"code":"(fn tw [i p c]\n  (if (and (= i 1) (p (first c))) [] \n      (concat [(first c)] (lazy-seq (tw (if (p (first c)) (dec i) i) p (drop 1 c))))))","problem":114,"user":"50bce014e4b0594b91591c63"},{"problem":114,"code":"(fn take-up-to [n pred? xs]\n  (lazy-seq\n   (when (and (pos? n) (not (empty? xs)))\n     (let [cur    (first xs)\n           next-n (if (pred? cur)\n                    (dec n)\n                    n)]\n       (when-not (zero? next-n)\n         (cons cur (take-up-to next-n pred? (rest xs))))))))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn gtw [n f s]\n  (loop [nb 0 res [] sq s]\n    (if (or (empty? sq) (>= nb n))\n      (butlast res)\n      (if (f (first sq))\n        (recur (inc nb) (conj res (first sq)) (rest sq))\n        (recur nb (conj res (first sq)) (rest sq))))))","problem":114,"user":"51c09719e4b0c9c82288293c"},{"code":"(fn global-take-while [n pred coll]\n  (when-let [s (seq coll)]\n    (when (pos? n)\n      (let [next-seq (fn [k] (lazy-seq (cons (first s) (global-take-while k pred (next s)))))]\n        (cond (and (pred (first s)) (> n 1)) (next-seq (dec n)) (not (pred (first s))) (next-seq n))))))","problem":114,"user":"51729002e4b044b2ef48a850"},{"code":"(fn gtw [os p c] \n  ((fn add [r\n            cnt\n            i] \n     (if (= cnt os)\n       (butlast r)\n       (add (conj r (first i))\n            (if (p (first i)) (inc cnt) cnt)\n            (rest i)))) [] 0 c))","problem":114,"user":"50e4f4e9e4b049a987753896"},{"problem":114,"code":"(fn f\n  [n pred [h & t]]\n  (if (nil? h)\n    nil\n    (if (pred h)\n      (if (= n 1)\n        nil\n        (cons h (lazy-seq (f (dec n) pred t))))\n      (cons h (lazy-seq (f n pred t))))))","user":"576df252e4b0979f8965156f"},{"problem":114,"code":"(fn tw [n p [h & t]]\n        (let [c (if (p h) (- n 1) n)]\n          (if (= c 0) []\n              (cons h (tw c p t)))))","user":"502873a8e4b01614d1633ff8"},{"code":"#(loop [n %1\n         f %2\n         v %3\n         o []]\n  (cond\n   (and (f (first v)) (= n 1)) o\n   (f (first v)) (recur (dec n) f (rest v) (conj o (first v)))\n   :else (recur n f (rest v) (conj o (first v)))\n  ))","problem":114,"user":"51f28a64e4b0210f90e7454e"},{"code":"(fn take-while-limited\n    ([n p s] (take-while-limited n p s 0 []))\n    ([n p s hits done] (if (or (empty? s)\n                               (= hits n))\n                         (butlast done)\n                         (recur n p (rest s) (if (p (first s))\n                                               (inc hits)\n                                               hits)\n                                (conj done (first s))))))","problem":114,"user":"4dbb0f2d535d1e037afb21b1"},{"problem":114,"code":"(fn __ [nr f se]\n  (let [\n        nnr (if (f (first se)) (dec nr) nr)\n        ]\n    (lazy-seq\n      (if (> nnr 0)\n        (cons (first se) (__ nnr f (rest se)))\n        ()))))","user":"58bc6a88e4b0888cdc949d16"},{"problem":114,"code":"(fn gtw \n  [n p vs]\n  (-> (->> vs\n           (map-indexed (fn [i v] \n                          (when (p v) i)))\n           (remove nil?))\n      (nth (dec n))\n      (take vs)))","user":"58e37946e4b005f69f193cae"},{"code":"(fn f [n p xs]\n  (lazy-seq\n    (if-let [xs (seq xs)]\n      (let [x (first xs)]\n        (cond\n          (not (p x))\n            (cons x (f n p (rest xs)))\n          (> n 1)\n            (cons x (f (dec n) p (rest xs))))))))","problem":114,"user":"50fbf811e4b0d10d794c19f1"},{"problem":114,"code":"(fn take-p [n f xs]\n  (lazy-seq\n    (when (seq xs)\n      (let [[h & t] xs\n            p (f h)]\n        (cond\n          (and p (> n 1))\n          (cons h (take-p (dec n) f t))\n\n          (not p)\n          (cons h (take-p n f t)))))))","user":"58b51e05e4b0ebc645576d4c"},{"code":"(fn take-n-while [number pred coll]\n  (let [[up-to-pred from-pred] (split-with (comp not pred) coll)]\n    (if (= number 1)\n      up-to-pred\n      (lazy-cat up-to-pred [(first from-pred)]\n        (take-n-while (dec number) pred (rest from-pred))))))","problem":114,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":114,"code":"(fn [n p l]\n  (loop [c 0 l l o []]\n    (let [c (if (p (first l))\n          (inc c)\n          c)]\n      (if (= c n)\n        o\n        (recur\n          c\n          (rest l)\n          (conj o (first l)))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":114,"code":"(fn f-114 [n pred coll]\n  (if (pred (first coll))\n    (if (= n 1)\n      nil\n      (cons (first coll) (f-114 (- n 1) pred (rest coll))))\n    (cons (first coll) (f-114 n pred (rest coll)))))","user":"53d86564e4b0e771c302546b"},{"code":"(fn gtake-while [n pred aseq]\n  (second (last\n    (take-while\n      #(< (first %) n)\n      (reductions\n        (fn [[i list] elem]\n          [(if (pred elem) (inc i) i),\n           (conj list elem)])\n        [0 []]\n        aseq)))))","problem":114,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":114,"code":"(fn take-while-n [n pred sq]\n  (if (not (empty? sq))\n    (if (pred (first sq))\n      (if (> n 1)\n        (lazy-seq (cons (first sq) (take-while-n (dec n) pred (rest sq)))))\n      (lazy-seq (cons (first sq) (take-while-n n pred (rest sq)))))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":114,"code":"(fn take-all [n p s]\n  (loop [n n p p s s result []]\n    (if (or (empty? s) (= n 0))\n      (drop-last result)\n      (if (p (first s))\n        (recur (dec n) p (rest s) (conj result (first s)))\n        (recur  n      p (rest s) (conj result (first s)))))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":114,"code":"(fn [i p c]\n  (loop [idx i x (first c) xs (rest c) res []]\n    (if (nil? x)\n      res\n      (if-let [satisfies (p x)]\n        (if (= 1 idx)\n          res\n          (recur (- idx 1) (first xs) (rest xs) (conj res x)))\n        (recur idx (first xs) (rest xs) (conj res x))))))","user":"53573d70e4b04ce2eb3ed278"},{"code":"(fn f [n p [e & s]]\n  (if (and (= n 1) (p e)) nil\n    (lazy-seq (\n      cons e\n        (f (if (p e) (dec n) n) p s)))))","problem":114,"user":"4e5c801e535d8a8b8723a2c1"},{"code":"(fn tw \n  ([n p s] (tw n p s []))\n  ([n p s acc] \n   (let [sf (first s)\n         sr (rest s)]\n   (cond \n    (not (seq s)) acc\n    (p sf) \n    \t(if (= 1 n)\n          acc\n          (tw (dec n) p sr (conj acc sf))\n          )\n    :else (tw n p sr (conj acc sf))\n    )\n     )\n   )\n  )","problem":114,"user":"523f0bbfe4b01c266ffa7f91"},{"code":"(fn f [i p s]\n  (if (empty? s) []\n    (lazy-seq\n      (let [n (if (p (first s)) (dec i) i)]\n        (if (zero? n) []\n          (cons (first s) (f n p (rest s))))))))","problem":114,"user":"4ee4f4a9535d1385b2869d85"},{"problem":114,"code":"(fn global-take-while [n pred l]\n  (last (last\n    (take-while\n     (fn [[n-matches l]]\n       (< n-matches n))\n     (reductions (fn [[n-matches result] val]\n                   [(if (pred val)\n                      (inc n-matches)\n                      n-matches)\n                    (conj result val)])\n                 [0 []] l)))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn self [n f [x & coll]]\n  (let [n (if (f x) (dec n) n)]\n    (if (zero? n)\n      nil\n      (lazy-seq (cons x (self n f coll))))))","problem":114,"user":"52afbc69e4b0c58976d9acc0"},{"code":"(fn taken[num fs cols]\r\n   (let[one (first cols),\r\n        sign (fs one),\r\n        next (if sign (dec num) num)]\r\n       (lazy-seq\r\n         (when (> next 0)\r\n            (cons  one  (taken next fs (rest cols) ) )\r\n          )\r\n       )\r\n     )\r\n)","problem":114,"user":"4f6d9d7ee4b07046d9f4efcd"},{"problem":114,"code":"(fn f [n p c]\n  (if (empty? c)\n    c\n    (let [h (first c)\n          q (rest c)]\n      (if (p h)\n        (if (= n 1)\n          '()\n          (cons h (lazy-cat (f (dec n) p q))))\n        (cons h (lazy-cat (f n p q)))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":114,"code":"(fn [n f xs]\n    (loop [k n, ret [], [y & ys] xs]\n        (if (= k 0)\n            (pop ret)\n            (recur (if (f y) (dec k) k) (conj ret y) ys) )))","user":"593f95d8e4b069cdc2982be3"},{"problem":114,"code":"(fn foo [n p c]\n  (if (empty? c)\n    nil\n    (let [f (first c)\n          n' (if (p f) (dec n) n)]\n      (if (zero? n')\n        nil\n      (lazy-seq (cons f (foo n' p (rest c))))))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":114,"code":"(fn gtakewhile [n p xs]\n  (if-let [mtc (p (first xs))]\n    (when (> n 1)\n      (lazy-seq (cons (first xs) (gtakewhile (dec n) p (rest xs)))))\n    (lazy-seq (cons (first xs) (gtakewhile n p (rest xs))))))","user":"53e9a15be4b036ad0777e4ae"},{"problem":114,"code":"(fn gtw [n p [f & r]]\n\t(let [[elem cnt] (if (p f) [f (dec n)] [f n])]\n\t\t(if (or (nil? elem) (= cnt 0)) \n\t\t\t  nil\n\t\t\t  (lazy-seq (cons elem (gtw cnt p r))))))","user":"538e29d1e4b0b51d73faae80"},{"code":"(fn f[n p [a & b]]\n  (lazy-seq\n    (if (not (p a))\n        (cons a (f n p b))\n        (if (< 1 n)\n            (cons a (f (dec n) p b))))))","problem":114,"user":"4e860e85535db62dc21a62f1"},{"code":"(fn t [n f c]\n  (let [q (first c)]\n  (if (and (f q) (= 1 n)) '()\n      (cons q\n            (t (if (f q) (dec n) n)\n               f\n               (rest c))))))","problem":114,"user":"4facd2fae4b081705acca22f"},{"problem":114,"code":"(comp butlast \n      (fn f [i p [a & r]]\n        (if (< 0 i)\n          (cons a (f (if (p a) (dec i) i)\n                     p\n                     r)))))","user":"53ea5851e4b036ad0777e4e4"},{"problem":114,"code":"(fn twn [n p s] (if (< n 1) nil\n  (let [c (complement p)]\n   (if (= n 1) (take-while c s)\n     (concat (take-while c s) (cons (first (drop-while c s)) (twn (- n 1) p (next (drop-while c s)))))))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [n pred coll]\n    (lazy-seq (loop [n (dec n)\n                     vals []\n                     coll coll]\n                (cond (or (and (<= n 0) (pred (first coll))) (nil? coll)) vals\n                      (pred (first coll)) (recur (dec n) (conj vals (first coll)) (next coll))\n                      :else (recur n (conj vals (first coll)) (next coll))))))","problem":114,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [num pred coll]\r\n  (letfn [(prod [n p [x & xs]]\r\n            (lazy-seq (if (p x)\r\n                        (when (> n 1) (cons x (prod (dec n) p xs)))\r\n                        (cons x (prod n p xs)))))]\r\n    (prod num pred coll)))","problem":114,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":114,"code":"(fn global-take-while [n p a-seq]\n    (let [f (first a-seq)]\n      (if (and (p f ) (= n 1))\n        []\n        (cons f \n              (lazy-seq (global-take-while\n                 (if (p f) (dec n) n) p (rest a-seq))))\n      )))","user":"544e9022e4b0e3978000698b"},{"problem":114,"code":"(fn g [n p col]\n (when-let [s (seq col)]\n  (when (or (p (first s)) (pos? n))\n   (if (and (p (first s)) (= 1 n))\n    nil\n    (cons (first s) (g (if (p (first s))(dec n) n) p (rest s)))))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn foo [n p coll]\n  (let [[f & rest] coll  m (if (p f) (dec n) n) ] \n    (if (pos? m) \n\t  (cons f (lazy-seq (foo m p rest)))\n \t   [] )))","problem":114,"user":"523a9fc9e4b081681ca7adca"},{"problem":114,"code":"(fn [n f xs]\n  (loop [xs xs n n a []]\n    (let [x (first xs)]\n      (if (and x (pos? n))\n        (recur (rest xs) (if (f x) (dec n) n) (conj a x))\n        (butlast a)))))","user":"55fee5e4e4b00f4cabc5765a"},{"problem":114,"code":"(fn f\n  [n p s]\n  (if (= n 1)\n    (take-while (comp not p) s)\n    (let [[h r] [(take-while (comp not p) s) (drop-while (comp not p) s)]]\n      (concat h [(first r)] (f (dec n) p (rest  r))))))","user":"583048d9e4b051871117c007"},{"code":"(fn [n f s]\r\n    (map (fn [a b] a) s (rest (take-while pos? (reductions #(if (f %2) (dec %) %) n s)))))","problem":114,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":114,"code":"(fn g [n p s]\n  (let [f (first s)\n        r (p f)]\n    (if (and (seq s) (or (not r)\n                         (and r (> n 1))))\n      (lazy-seq (cons f (g\n                          (if r (dec n) n)\n                          p\n                          (rest s))))\n      '())))","user":"56bb652ae4b0f26550335953"},{"problem":114,"code":"(fn [n pred coll]\n  (letfn [(t-w [n p c]\n            (lazy-seq\n             (let [h (first c)\n                   t (rest c)\n                   n (if (p h) (dec n) n)]\n               (if (= 0 n)\n                 []\n                 (cons h (t-w n p t))))))]\n    (t-w n pred coll)))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn [n p s]\n  (loop [i 0, [sf & se] s, res []]\n\n    (if (= i n)\n      (butlast res)\n      (recur (if (p sf) (inc i) i), se, (conj res sf)))))","problem":114,"user":"4f29eb2ae4b0d6649770a037"},{"code":"(fn take-while* [n p [head & tail :as xs]]\n  (when (and (seq xs) (< 0 n))\n    (lazy-seq\n      (cond\n        (not (p head)) (cons head (take-while* n p tail))\n        (< 1 n) (cons head (take-while* (- n 1) p tail))\n        :else nil))))","problem":114,"user":"4e691c79535d8ccf87e9fe97"},{"problem":114,"code":"(fn take* [n p xs]\n    (cond\n      (and (p (first xs)) (= n 1)) nil\n      (p (first xs)) (cons (first xs) (take* (dec n) p (rest xs)))\n      :else (cons (first xs) (take* n p (rest xs))))\n    )","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":114,"code":"(fn\n [n p col]\n (map second (rest (take-while (fn [[acc x]] (< acc n)) \n             (reductions (fn [[acc last] x] [(if (p x) (inc acc) acc) x]) [0 nil] col)\n ))))","user":"58a822e4e4b01a0c0b232950"},{"problem":114,"code":"(fn [n p coll] (loop [xs coll\n                       times n\n                       done []]\n                  (if (< 0 times)\n                    (if (p (first xs))\n                      (recur (rest xs) (dec times) (conj done (first xs)))\n                      (recur (rest xs) times (conj done (first xs))))\n                    (drop-last done))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn global-take-while [n pred s]\n     (loop [ [x & xs] (partition-by pred s)\n             m 0\n             rs []]\n       (cond\n         (= m n) rs\n         (and (pred (first x))\n              (< (+ m (count x) ) n)) (recur (next xs) \n                                             (+ m (count x)) \n                                             (into (into rs x) (first xs)))\n         (pred (first x)) (into rs (take (- n m 1) x))\n         :else (recur xs m (into rs x)))))","problem":114,"user":"5273562ae4b03e8d9a4a7479"},{"problem":114,"code":"(fn global-take-while\n  [n p coll]\n  (->\n    (take n \n          (reduce \n            (fn [acc x] (if (p (coll x)) (conj acc x) acc)) \n            [] \n            (range (count coll))))\n    last\n    (take coll)))","user":"5383668ee4b06839e8705edd"},{"code":"(fn gtw [n p coll]\n  (letfn [(tw [pred-count s]\n            (when-first [e s]\n              (cond\n                (and (<= pred-count 1) (p e)) nil\n                (p e) (cons e (lazy-seq (tw (dec pred-count) (rest s))))\n                :else (cons e (lazy-seq (tw pred-count (rest s)))))))]\n    (tw n coll)))","problem":114,"user":"51d19c24e4b0cfcf579466c3"},{"problem":114,"code":"(fn f [n pred coll]\n    (lazy-seq\n     (when (seq coll)\n       (if (pred (first coll))\n         (if (= n 1)\n           nil\n           (cons (first coll)\n                 (f (dec n)\n                    pred\n                    (rest coll))))\n         (cons (first coll)\n               (f n\n                  pred\n                  (rest coll)))))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn gtw [n p ls]\r\n    (let [nn \r\n          (if (p (first ls)) (dec n) n)]\r\n      (if (= nn 0) nil\r\n      (lazy-seq (cons (first ls) (gtw nn p (rest ls)))))))","problem":114,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn [n pred s]\n  (letfn [(tw [list matches]\n            (if (pred (first list))\n              (when (< (inc matches) n)\n                (cons (first list) (tw (rest list) (inc matches))))\n              (cons (first list) (tw (rest list) matches))))]\n    (tw s 0)))","problem":114,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn global-take-while [n p s]\n  (cond \n   (and (= n 1) (p (first s))) '()\n   (p (first s)) (cons (first s) (lazy-seq (global-take-while (dec n) p (rest s))))\n   :else (cons (first s) (lazy-seq (global-take-while n p (rest s))))))","problem":114,"user":"51d360d1e4b099f3b6acddff"},{"code":"(fn global-talk-while [n func coll]\n    (if (func (first coll))\n\t  (if (= n 1)\n\t    nil\n\t\t(concat (list (first coll)) (global-talk-while (- n 1)  func (rest coll))))\n\t  (concat (list (first coll)) (global-talk-while n  func (rest coll)))))","problem":114,"user":"51eec1a6e4b0871fa145d98d"},{"problem":114,"code":"(fn [n f c]\n    (loop [[h & t] c r [] ac 0]\n      (cond\n       (nil? h) r\n       (f h ) (if (>= (inc ac) n) r (recur t (conj r h) (inc ac)))\n       :e (recur t (conj r h) ac))))","user":"586615e6e4b0f14aab7c8858"},{"code":"(fn twhile [n p xs]\n  (if (zero? n)\n      ()\n      (let [[x y] (split-with (complement p) xs)]\n         (lazy-cat x\n                   (when (> n 1) (list (first y)))\n                   (twhile (dec n) \n                           p \n                           (rest y))))))","problem":114,"user":"53691dc7e4b0243289761e97"},{"problem":114,"code":"#(loop [n 0\n        chance %1]\n   (cond\n      (not (%2 (nth %3 n))) (recur (inc n) chance)\n      (> chance 1) (recur (inc n) (dec chance))\n      :else (take n %3)\n      ))","user":"60096aabe4b074f607df667f"},{"problem":114,"code":"(fn bah [n pred s] \n        (cond\n           (empty? s)       []\n           (pred (first s)) (if (= 1 n) []  (cons (first s) (bah (dec n) pred (rest s))))\n           :else (cons (first s) (bah n pred (rest s)))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn t[n p s]\n  (lazy-seq\n    (let[f (first s) m (if (p f) (dec n) n)]\n      (if (pos? m)\n          (cons f (t m p (next s)))))))","problem":114,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [n p xs]\n  (butlast\n    ((reduce\n       #(if (< (%1 :m) n)\n          (if (p %2) \n            {:m (+ 1 (%1 :m)) :ys (conj (%1 :ys) %2)}\n            (assoc %1 :ys (conj (%1 :ys) %2)))\n          %1)\n       {:m 0 :ys []} xs) :ys)))","problem":114,"user":"5141abf1e4b02fd87f5064c3"},{"code":"(fn my-take [n p [val & tail]]\n  (lazy-seq \n    (if (and (p val) (= n 1)) nil      \n      (cons val (my-take (if (p val) (dec n) n) p tail)))))","problem":114,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":114,"code":"(fn  globalTake-while [n p xs]\n (cond\n   (empty? xs) '()\n   (p (first xs))\n     (if (= n 1)\n       '()\n       (cons (first xs) (lazy-seq (globalTake-while (dec n) p (rest xs)))))\n   :else (cons (first xs) (lazy-seq (globalTake-while n p (rest xs))))))","user":"559454f2e4b0c79f6e1db952"},{"problem":114,"code":"(fn my-take-while [n pred col]\n  (let [fst (first col)\n        fst-pred (pred fst)\n        rst (rest col)]\n    (if (empty? col) (list)\n        (if fst-pred\n          (if (= n 1) (list)\n              (lazy-seq (cons fst (my-take-while (- n 1) pred rst))))\n          (lazy-seq (cons fst (my-take-while n pred rst)))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"code":"(fn [n p seq]\n    (letfn [(looper [i [x & xs :as tail]]\n        (cond (empty? tail) []\n              (p x)   (if (= i 1) [] (lazy-seq (cons x (looper (dec i) xs))))\n              :else   (lazy-seq (cons x (looper i xs)))))]\n        (looper n seq)))","problem":114,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":114,"code":"(fn [n p s]\n  (loop [i n in [] out s]\n    (if (= i 0)\n      (drop-last in)\n      (recur (dec i)\n             (concat in \n                     (take-while (comp not p) out) \n                     [(first (drop-while (comp not p) out))])\n             (rest (drop-while (comp not p) out))))))","user":"55625903e4b0c656e3ff17d7"},{"problem":114,"code":"(fn global-take-while [n f xs]\n  (let [ts (take-while (complement f) xs)\n        rest-ts (drop (count ts) xs)\n        frs (first rest-ts)\n        rrs (rest rest-ts)]\n    (if (= n 1) ts\n      (concat ts [frs] (global-take-while (dec n) f rrs)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn global-take-while [n p s]\n  (letfn [(tuples [n p s]\n            (let [[head & tail] s,\n                  m (if (p head) (inc n) n)]\n              (lazy-seq\n               (cons [head m] (tuples m p tail)))))]\n    (->> (tuples 0 p s)\n         (take-while #(< (second %) n))\n         (map first))))","problem":114,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":114,"code":"(fn global-take-while \n  [n pred coll]\n  (loop [ret [] coll coll n1 0]\n    (if (or (not (seq coll)) \n            (and (pred (first coll)) (= n1 (dec n))))\n      ret\n      (if (pred (first coll))\n        (recur (conj ret (first coll)) (rest coll) (inc n1))\n        (recur (conj ret (first coll)) (rest coll) n1)\n        ))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":114,"code":"(fn take-up-to-nth--recur\n  [n p coll] {:pre [(integer? n), (pos? n), (ifn? p)]}\n  (loop [acc [], n n, coll coll]\n    (cond\n      ;; On each recursion, we generally include exactly 1 element that\n      ;; satisfies p. (See the \"(conj (into acc head) x)\" line, later.) If coll\n      ;; has fewer than n elements that satisfy p, we end up tacking on an\n      ;; extraneous nil instead. In either case, this means we should drop the\n      ;; last value of acc before returning it.\n      (zero? n)      (butlast acc)\n      (empty? coll)  (butlast acc)\n      :else          (let [[head [x & tail]] (split-with (complement p) coll)]\n                       (recur (conj (into acc head) x)\n                              (dec n)\n                              tail)))))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn nm[n f coll]\n  (take (->>\n           (filter #(f (first %)) (map (fn [x y] [x y]) coll (range)))\n\t   (take n)\n           last\n           second\n         ) \n        coll))","problem":114,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn m[n p s]\n  (if (empty? s)\n    []\n    (let [[h & t] s]\n      (if (p h)\n        (if (= 1 n)\n          []\n          (concat [h] (m (dec n) p t)))\n        (concat [h] (m n p t))))))","problem":114,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":114,"code":"(fn mult-take-while [n pred coll]\n  (let [[f r] (split-with (complement pred) coll)]\n    (if (<= n 1) f\n      (lazy-cat f (list (first r)) (mult-take-while (dec n) pred (rest r))))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn global-take-while [n pred coll]\n  (if (or (= n 0) (empty? coll))\n    []\n    (let [elt (first coll)\n          pred-result (pred elt)]\n      (if-not (and pred-result (= n 1))\n        (cons elt (lazy-seq (global-take-while\n                              (if (pred elt) (dec n) n)\n                              pred (rest coll))))))))","problem":114,"user":"53070615e4b02e821686979e"},{"code":"(fn f [n p xs]\n  (let [n (if (p (first xs)) (dec n) n)]\n    (if (zero? n)\n      nil\n      (cons (first xs) (f n p (rest xs))))))","problem":114,"user":"510acd6ee4b078ea719210f4"},{"code":"(fn tw [n pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (when (or (> n 1) (and (pos? n) (not (pred (first s)))))\n       (cons (first s) (tw (if (pred (first s)) (dec n) n) pred (rest s)))))))","problem":114,"user":"4e8768f6535dceadca469850"},{"code":"(fn [n f coll]\n  ((fn g [acc coll-]\n     (let [x (first coll-)\n           acc+ (if (f x) (inc acc) acc)]\n       (when (< acc+ n)\n         (lazy-seq (cons x (g acc+ (rest coll-)))))))\n     0 coll))","problem":114,"user":"5028cd0fe4b01614d1633ffc"},{"code":"(fn p114 [n f lst]\n  (if (empty? lst) nil\n      (if (f (first lst))\n\t(if (= n 1) nil (cons (first lst) (p114 (dec n) f (next lst))))\n\t(cons (first lst) (p114 n f (next lst))))))","problem":114,"user":"5272669de4b03e8d9a4a742e"},{"problem":114,"code":"(fn global-take-while [n p xs]\n  (lazy-seq\n   (if (p (first xs)) ; passes, so decrement n\n     (if (> n 1)\n       (cons (first xs) (global-take-while (dec n) p (rest xs)))) ; TODO: combine into 1\n     (cons (first xs) (global-take-while n p (rest xs))))))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":114,"code":"(fn gtw [n p v]\n  (let [f (first v)\n        vf (vector f)\n        r (vec (rest v))]\n    (if (= 1 n)\n      (if (p f)\n       nil \n       (vec (concat vf (gtw n p r)))) \n      (if (p (first  v)) \n        (vec (concat vf (gtw (dec n) p r)))\n        (vec (concat vf (gtw n p r)))))))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":114,"code":"(fn tw\n  [n pred [h & r :as x]]\n  (cond (empty? x) x\n        (pred h) (let [n-1 (dec n)]\n                   (if (zero? n-1)\n                     []\n                     (lazy-seq (cons h (tw n-1 pred r)))))\n        :else (lazy-seq (cons h (tw n pred r)))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":114,"code":"(fn gt [n f s]\n       (if (> n 0)\n         (if (f (first s))\n           (if (> n 1)\n             (cons (first s) (gt (dec n) f (rest s))))\n           (cons (first s) (gt n f (rest s)))\n           )\n         )\n     )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn [n p l] (let [v (last (take n (filter p l)))] (take-while #(not= % v) l)))","problem":114,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn t [n p [f & r]]\n  (if (p f)\n    (if (> n 1) \n      (lazy-cat [f] (t (dec n) p r)))\n    (lazy-cat [f] (t n p r))))","problem":114,"user":"4dae916eedd6309eace4d155"},{"code":"(fn t [n p [x & r]]\n  (when (and x (or (not (p x)) (> n 1)))\n      (cons x (t (if (p x) (dec n) n) p r))))","problem":114,"user":"4e8612f8535db62dc21a62f2"},{"problem":114,"code":"(fn w [n p [f & r]]\n  (lazy-seq\n   (let [n (if (p f) (dec n) n)]\n     (when (pos? n)\n       (cons f (w n p r))))))","user":"4e6a4950535d8ccf87e9febf"},{"code":"#(loop [n % p %2 s %3 t []]\n   (cond (= n 0) (butlast t)\n         (p (first s)) (recur (dec n) p (rest s) (conj t (first s)))\n         :else (recur n p (rest s) (conj t (first s)))))","problem":114,"user":"4fa05b99e4b0dcca54ed6d47"},{"problem":114,"code":"(fn g-take-while [n p s]\n  (lazy-seq\n   (let [m (if (p (first s)) (dec n) n)]\n     (when (pos? m)\n       (cons (first s)\n             (g-take-while m p (rest s)))))))","user":"55c4e48be4b0e31453f649a7"},{"problem":114,"code":"(fn [n pred coll]\n  (letfn [(lc [n [x & more]]\n              (cond (or (zero? n) (nil? x))\n                    []\n                    (and (pred x) (= n 1))\n                    []\n                    :else\n                    (lazy-seq (cons x (lc (if (pred x) (dec n) n) more)))))]\n      (lc n coll)))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn x [n pred coll]\n  (cond\n   ;;(or (= n 0) (empty? coll)) '()\n   (not (pred (first coll))) (lazy-seq (cons (first coll) (x n pred (rest coll))))\n   (> n 1) (lazy-seq (cons (first coll) (x (dec n) pred (rest coll))))\n   :else '()))","problem":114,"user":"532347dde4b09d4e7a9b54cc"},{"problem":114,"code":"(fn [n pred s]\n  (let [counts (rest (reductions #(if (pred %2) (inc %1) %1) 0 s))]\n    (map #(% 0) (take-while #(< (% 1) n) (map vector s counts)))))","user":"54febf4be4b07d26eda61d45"},{"code":"(fn global-take-while\n  [n f in-xs]\n  (lazy-seq\n   (let [xs (seq in-xs)]\n     (cond\n      (zero? n)            ()\n      (empty? xs)          ()\n      (not (f (first xs))) (cons (first xs) (global-take-while      n  f (rest xs)))\n      (= 1 n)              ()\n      :else                (cons (first xs) (global-take-while (dec n) f (rest xs)))))))","problem":114,"user":"4f047c07535dcb61093f6bcd"},{"problem":114,"code":"(fn [n f coll]\n    (loop [n n\n           coll coll\n           res []]\n\n      (let [itm (first coll)\n            satisf (f itm)\n            ]\n        (if (or (nil? itm)\n                (and satisf (= n 1)))\n          res\n\n          (recur (if satisf (dec n) n) (rest coll) (conj res itm))\n\n          )\n        )\n      )\n    )","user":"5ab575f8e4b073f17744263d"},{"problem":114,"code":"(fn [n pred s]\n  (butlast (some #(if (= n (count (filter pred %))) %) (reductions conj [] s))))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn tw ([n p s] (tw n p s []))\n   ([n p [f & s] r] \n         (if (p f)\n           (if (> n 1)\n             (tw (dec n) p s (conj r f))\n             r)\n           (tw n p s (conj r f)))))","problem":114,"user":"4eb2eae5535d7eef30807351"},{"problem":114,"code":"(fn global-take-while [n p s]\n  (lazy-seq\n    (let [[car & cdr] s\n          match? (p car)]\n      (when (and car (or (< 1 n) (not match?)))\n        (cons car (global-take-while (if match? (dec n) n) p cdr))))))","user":"5ab16992e4b073f1774425c4"},{"problem":114,"code":"(fn tolerate [n pred lst]\n  (letfn \n    [(inner [cnt remainder]\n      (let [\n        nxt (first remainder)\n        new-cnt (or (and (pred nxt) (inc cnt)) cnt)]\n        (if (= new-cnt n)\n          '()\n            (cons nxt (inner new-cnt (rest remainder))))))]\n    (inner 0 lst)))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn f [n pred [one & rest :as coll]]\n  (if (zero? (dec n))\n    (take-while (comp not pred) coll)\n    (cons one (f (if (pred one) (dec n) n) pred rest))))","problem":114,"user":"518ccf6be4b05e6c8537e386"},{"code":"(fn global-take-while [n p s]\r\n  (loop [n-left n\r\n         s-left s\r\n         keep []]\r\n     (if\r\n        (or (empty? s-left)\r\n            (and (= n-left 1)\r\n                 (p (first s-left)))) keep\r\n        (let\r\n          [_ (println \"n-left\" n)\r\n           _ (println \"s-left\" s)\r\n           _ (println \"keep\" keep)\r\n           s-next (first s-left)\r\n           _ (println \"s-next\" s-next)\r\n           p-next (p s-next)\r\n           _ (println \"p-next?\" p-next)\r\n           n-next (if p-next (dec n-left) n-left)\r\n           _ (println \"n-next?\" n-next)\r\n           keep-next (conj keep s-next)\r\n           _ (println \"keep-next\" keep-next)]\r\n           (recur n-next (rest s-left) keep-next)))))","problem":114,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn my-global-take-while\n  [n fun coll]\n  (loop [result [] i 0 j 0]\n    (let [current (get coll j)]\n      (cond \n        (= n i) (drop-last result)\n        (or (false? (fun current)) (nil? (fun current))) (recur (conj result current) i (inc j))\n        :else (recur (conj result current) (inc i) (inc j))))))","problem":114,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn [n f ls]\n  (let [gate (nth (filter f ls) (dec n))]\n    (take-while #(not (= gate %)) ls)))","problem":114,"user":"4fb86dc9e4b081705acca2d8"},{"problem":114,"code":"(fn [n f c]\n  (loop [acc [] n' 0 c' c]\n    (if (= n n')\n      (butlast acc)\n      (recur (conj acc (first c'))\n             (if (f (first c')) (inc n') n')\n             (next c') ))))","user":"56441634e4b0018b46ad8c08"},{"code":"(fn [n p s]\n  (take \n    (nth (keep-indexed #(when (p %2) %) s) (dec n))\n    s))","problem":114,"user":"4f06dcad535dcb61093f6c16"},{"problem":114,"code":"#(butlast (loop [i 0\n        xs %3\n        acc []\n        ]\n   (if (= i %) acc\n     (recur (if (%2 (first xs)) (inc i) i) (rest xs) (conj acc (first xs))))))","user":"53976599e4b0b51d73faaeea"},{"problem":114,"code":"(fn [x f s] \n      (loop [i 0 j 0 result []]\n        (cond \n         (and (= j (dec x)) (f (get s i)) ) result\n         (>= i (count s)) result\n         (f (get s i)) (recur  (inc i) (inc j) (conj result (get s i)))\n         :else (recur (inc i) j (conj result (get s i)))\n        )  \n      )\n  )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn gtw[n p s]\n  (loop[acc n\n        se s\n        res []]\n    (if (= acc 0)\n        (butlast res)\n        (let [rest-se (drop-while #(not (p %)) se)]\n      (recur (- acc 1) (rest rest-se) (concat res  (take-while #(not (p %)) se) [(first rest-se)]) )\n        )\n    )\n  )\n)","problem":114,"user":"4e9de526535dbda64a6f6b8e"},{"problem":114,"code":"(fn gtake-while [n p? s]\n  (if (seq s)\n    (if (p? (first s))\n      (if (= n 1)\n        '()\n        (lazy-seq (cons (first s) (gtake-while (dec n) p? (rest s)))))\n      (lazy-seq (cons (first s) (gtake-while n p? (rest s)))))\n    s))","user":"54ca93abe4b057c6fda3a264"},{"code":"(fn take-n-while [n p xs] \n  (let [[y & ys] xs] \n    (if (p y)\n      (if (= 1 n) '() (lazy-seq (cons y (take-n-while (- n 1) p ys))))\n      (lazy-seq (cons y (take-n-while n p ys))))))","problem":114,"user":"515fb48fe4b0e2be8aa20bd5"},{"problem":114,"code":"(fn gtake-while [n p s]\n\t(let [[l r] (split-with (complement p) s)]\n\t  (if (= 1 n) \n\t  \tl\n\t  \t(concat \n\t\t\t\tl \n\t  \t\t(conj (gtake-while (dec n) p (rest r)) (first r))))))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn gtw [n p [f & r]]\n  (if (or (nil? f) (= n 0)) '()\n      (let [b (p f)]\n        (if (and (= n 1) b) '()\n            (cons f (lazy-seq (gtw (if (p f) (- n 1) n) p r)))))))","problem":114,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn global-take-while [n p [s & ss]]\n    (let [hit (p s)]\n      (if-not (and hit (= 1 n))\n       (cons s (lazy-seq (global-take-while (if hit (dec n) n) p ss))))))","problem":114,"user":"50763574e4b0a894bb95bf3d"},{"problem":114,"code":"#(butlast\n  ((fn my-take-while [n pred xs]\n     (if (= n 0)\n       []\n       (if (pred (first xs))\n         (cons (first xs) (my-take-while (dec n) pred (rest xs)))\n         (cons (first xs) (my-take-while n pred (rest xs))))))\n    %1 %2 %3))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"(fn [n p s]\n  (loop [n n rs [] s s]\n    (cond\n      (zero? n) rs\n      (and (not= n 1) (p (first s))) (recur (- n 1) (conj rs (first s)) (rest s))\n      (and (= n 1) (p (first s))) (recur (- n 1) rs (rest s))\n      :else (recur n (conj rs (first s)) (rest s)))))","problem":114,"user":"50843a4ae4b0c98812d0788b"},{"problem":114,"code":"(fn t-while [n f a-seq]\n  (lazy-seq\n    (let [x (first a-seq)\n          k (if (f x) (dec n) n)]\n      (if (not= k 0)\n        (cons x (t-while k f (rest a-seq)))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn f [n p s]\n  (if (and (= 1 n) (p (first s))) []\n    (cons (first s)\n          (lazy-seq (f (if (p (first s)) (dec n) n) p (rest s))))))","problem":114,"user":"4f1bb9d8535d64f60314647d"},{"code":"(fn t [c p [f & s]]\n    (lazy-seq\n     (let [d (if (p f) (dec c) c)]\n       ({1 ()} (+ c d) (cons f (t d p s))))))","problem":114,"user":"4ff67852e4b0678c553fc37e"},{"problem":114,"code":"(fn tw [n p s]\n  (when (seq s)\n    (let [[x & xs] s\n          n (if (p x) (dec n) n)]\n      (when-not (zero? n)\n        (lazy-seq (cons x (tw n p xs)))))))","user":"52470d42e4b05ef8e38e6350"},{"problem":114,"code":"(fn global-take-while [n p [head & tail]]\n  (let [p-true (p head)]\n    (when (not (and p-true (= 1 n)))\n      (lazy-seq (cons head (global-take-while (if p-true (dec n) n) p tail))))))","user":"55ccdc6be4b0e31453f64a18"},{"code":"(fn [n p xs]\n  (letfn [(gtw [i p xs]\n            (let [item (first xs)\n                  c (if (p item) (inc i) i)]\n              (when (< c n)\n                (lazy-seq (cons item (gtw c p (rest xs)))))))]\n    (gtw 0 p xs)))","problem":114,"user":"5102ac9de4b00c483ae176fa"},{"code":"(fn t-w [n f coll]\n  (loop [n n\n         acc []\n         coll coll]\n    (if (zero? n)\n      (drop-last acc)\n      (let [v (first coll)]\n        (recur (if (f v) (dec n) n) (conj acc v) (rest coll))))))","problem":114,"user":"511e763ce4b03e81d390ac29"},{"problem":114,"code":"(fn take-nth-while [n p coll]\n  (loop [out []\n         [el & els] coll\n         cnt 0]\n    (cond\n      (or (= cnt n) (nil? el)) out\n      (and (p el) (= (+ cnt 1) n)) out\n      (p el) (recur (conj out el)\n                    els\n                    (inc cnt))\n      :else (recur (conj out el)\n                   els\n                   cnt))))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":114,"code":"(fn x [n pred sq]\n  (let [valid (pred (first sq))]\n    (if (or (empty? sq) (and (= 1 n) valid)) ()\n      (lazy-seq (cons (first sq) (x (if valid (dec n) n) pred (rest sq)))))))","user":"56bb9ccce4b0f26550335959"},{"problem":114,"code":"(fn mtakewhile ([n f s ] (mtakewhile n f s []))\n                 ([n f s res] (if (> n 0) \n                                  (if (f (first s)) \n                                     (mtakewhile (dec n) f (rest s) (cons (first s) res))\n                                     (mtakewhile  n f (rest s) (cons (first s) res)))\n                                  ((comp reverse rest) res))))","user":"5576e78de4b05c286339e075"},{"problem":114,"code":"(fn foo [n pred coll]\n  (if (and (pred (first coll)) (= n 1))\n    '()\n    (lazy-seq \n      (cons (first coll)\n            (foo (if (pred (first coll)) (dec n) n) pred (rest coll))))))","user":"57c0917be4b05aa3c4741c95"},{"problem":114,"code":"(fn [n pred coll]\n  (letfn [(gtw [n pred coll]\n    (if (= n 0)\n      nil\n      (if (pred (first coll))\n        (cons (first coll) (gtw (dec n) pred (rest coll)))\n        (cons (first coll) (gtw n pred (rest coll))))))]\n  (butlast (gtw n pred coll))))","user":"5478c4fee4b0c51c1f4d72c0"},{"problem":114,"code":"(fn gtw [n p coll]\n  (if (empty? coll) '()\n   (let [[h & t] coll]\n     (cond\n      (not (p h)) (cons h (lazy-seq (gtw n p t)))\n      (<= n 1)    '()\n      :else       (cons h (lazy-seq (gtw (dec n) p t)))))))","user":"5a95c639e4b0d174b936c75e"},{"problem":114,"code":"(fn global-take-while\n  [n pred coll]\n  (->> coll\n       (map-indexed (fn [i x] (when (pred x) i)))\n       (remove nil?)\n       (#(nth % (dec n)))\n       (#(take % coll))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn f [n p s]\n  (when-first [fs s]\n    (let [n (if (p fs) (dec n) n)]\n      (if (< 0 n)\n        (cons fs (f n p (rest s)))))))","problem":114,"user":"528652fbe4b0239c8a67ae14"},{"problem":114,"code":"(fn take-until-nth-while [n p [e & es]]\n    (let [satisfies (p e)]\n      (if (and e (or (> n 1) (not satisfies)))\n        (lazy-seq\n         (cons e (take-until-nth-while (if satisfies (dec n) n) p es))))))","user":"4dfe5a93535d04ed9115e786"},{"problem":114,"code":"(fn [n p s]\n  (loop [n n\n         s s\n         acc []]\n    (if (or (empty? s) (< n 1))\n      acc\n      (let [n (if (p (first s))\n                (dec n)\n                n)]\n        (recur n (rest s) (if (> n 0) (conj acc (first s)) acc))))))","user":"550c55d0e4b06e50f9beb14d"},{"code":"(fn my-take-while [n pred col]\n\t(let [\n\t\t-my-take-while (fn [n pred col pos -count result]\n\t\t\t(if (or (>= -count n) (>= pos (count col)))\n\t\t\t\tresult\n\t\t\t\t(let [\n\t\t\t\t\tcur (nth col pos)\n\t\t\t\t\tnew-result (if (and (pred cur) (= -count (dec n)))\n\t\t\t\t\t\tresult\n\t\t\t\t\t\t(conj result cur))\n\t\t\t\t\t]\n\t\t\t\t\t(println cur (pred cur))\n\t\t\t\t\t(if (pred cur)\n\t\t\t\t\t\t(recur n pred col (inc pos) (inc -count) new-result)\n\t\t\t\t\t\t(recur n pred col (inc pos) -count new-result)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t]\n\t\t(-my-take-while n pred col 0 0 [])\n\t\t)\n\t)","problem":114,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":114,"code":"(fn g [n p [x & xs]]\n    (let [m (if (p x) (dec n) n)]\n      (if (zero? m)\n        nil\n        (lazy-seq (cons x (g m p xs))))))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":114,"code":"(fn [limit pred coll]\n  (letfn [(go [n src dst]\n            (if (= n limit)\n              dst\n              (let [cur (first src)\n                    next-n (if (pred cur) (inc n) n)]\n                (go next-n (lazy-seq (rest src)) (if (= next-n limit) \n                                                   dst \n                                                   (conj dst cur))))))]\n    (go 0 (lazy-seq coll) [])))","user":"55d28b38e4b0e31453f64a58"},{"problem":114,"code":"(fn gtw [n p [fs & rs]]\n  (let [m (if (p fs) (dec n) n)]\n    (when (pos? m)\n      (lazy-seq (cons fs (gtw m p rs))))))","user":"590b055ae4b047aa04b199c9"},{"code":"(fn f [n p coll]\n   (flatten (let [[x [y & z]] (split-with (complement p) coll)]\n     (cond (= n 1)\n           (cons x nil)\n           \n           (nil? x)\n           (cons y (f (dec n) p z))\n\n           :else\n           (cons x (cons y (f (dec n) p z)))))))","problem":114,"user":"4e9fd521535d7eef3080729a"},{"code":"(fn mytake [n f s]\n    (lazy-seq\n     (when-let [[c & r] (seq s)]\n       (let [m (if (f c) (dec n) n)]\n         (when (pos? m) \n           (cons c (mytake m f r)))))))","problem":114,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":114,"code":"#(let [last-value (nth (->> %3 (filter %2)) (- %1 1))\nante-value (fn [x] (not= x last-value))]\n(apply vector (take-while ante-value %3)))","user":"5e13a6b7e4b099d064963001"},{"problem":114,"code":"(fn gtw [n p xs]\n    (when (seq xs)\n      (if (p (first xs))\n        (if (= n 1)\n          nil\n          (lazy-seq (cons (first xs) (gtw (dec n) p (next xs)))))\n        (lazy-seq (cons (first xs) (gtw n p (next xs)))))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":114,"code":"(fn [n p s]\n  (loop [n n\n         [head & tail] s\n         result []]\n    (let [n (if (p head) (dec n) n)]\n      (if (zero? n)\n        result\n        (recur n tail (conj result head))))))","user":"5424c523e4b01498b1a71b03"},{"problem":114,"code":"(fn ans [n pred [x & xs]]\n  (when-not (or (zero? n) (and (= n 1) (pred x)))\n    (cons x (ans (if (pred x) (dec n) n) pred xs))))","user":"5c3796b3e4b0d62ef62d9f77"},{"code":"(fn [n p s]\n   (loop [n n p p [x & xs] s acc []]\n     (cond (p x) (if (= 1 n) acc (recur (dec n) p xs (conj acc x)))\n           (seq xs) (recur n p xs (conj acc x)))))","problem":114,"user":"50996a38e4b0cae2931060b3"},{"code":"(fn g [k p s]\r\n (if (= k 1)\r\n   (take-while (complement p) s)\r\n   (let [[n [y & r]] (split-with (complement p) s)]\r\n     (concat n (cons y (g (dec k) p r))))))","problem":114,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":114,"code":"(fn take-n-while [n p s]\n  (cond (not (p (first s))) (cons (first s) (take-n-while n p (rest s)))\n        (= n 1) []\n        :else (cons (first s) (take-n-while (dec n) p (rest s)))))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn [n p s]\n  ((fn f [i [x & r]]\n     (lazy-seq\n      (let [i (if (p x) (inc i) i)]\n        (if (< i n)\n          (cons x (f i r)))))) 0 s))","problem":114,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(fn [n f xs] (let [c (atom 0)] (take-while #(if (f %) (> n (swap! c inc)) true) xs)))","problem":114,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn tnt [N pred S]\n  (let [s (first S), m (if (pred s) (dec N) N)]\n    (if (zero? m)\n      nil\n      (lazy-seq \n        (cons s (tnt m pred (rest S)))))))","problem":114,"user":"4faa9593e4b081705acca1f9"},{"problem":114,"code":"(fn fc [n p c]\n  (loop [nn n [c1 & cc] c ok []]\n    (if (zero? nn)\n      (butlast  ok)\n      (if (p c1)\n        (recur (dec nn) cc (conj ok c1))\n        (recur nn cc (conj ok c1))))))","user":"56102f50e4b05f002753df6b"},{"problem":114,"code":"(fn many-take-while\n  ([n pred coll] (many-take-while n pred coll 1))\n  ([n pred coll acc]\n   (cond\n    (and (pred (first coll)) (= acc n)) nil\n    (and (pred (first coll)) (< acc n)) (cons (first coll)\n                                         (lazy-seq (many-take-while n pred\n                                                    (next coll) (inc acc))))\n    :else (cons (first coll)\n           (lazy-seq (many-take-while n pred (next coll) acc))))))","user":"5412ef7ee4b01498b1a719da"},{"problem":114,"code":"(fn gw [n p c]\n  (let [[a [x & y]] (split-with (complement p) c)]\n    (concat a (if (= n 1) '() (cons x (lazy-seq (gw (dec n) p y)))))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":114,"code":"(fn gtw [n p [f & s]]\n  (if (and (= n 1) (p f)) []\n      (lazy-seq (cons f (gtw (if (p f) (dec n) n) p s)))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":114,"code":"(fn f [n p [elem & more]]\n  (lazy-seq\n    (if (p elem)\n      (when (not= n 1)\n        (cons elem (f (dec n) p more)))\n      (cons elem (f n p more)))))","user":"573d58c8e4b05c31a32c0811"},{"problem":114,"code":"(fn gtw [n p s] \n  (let [s1 (first s)\n        n (if (p s1) (dec n) n)]\n     (if (= 0 n) [] (lazy-seq (cons s1 (gtw n p (rest s)))) )))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn [n p c]\n  (letfn [(statify [n p]\n                   (let [n-atom (atom n)]\n                     (fn [x]\n                       (if (p x)\n                         true\n                         (if (> @n-atom 1)\n                           (do (swap! n-atom dec) true)\n                           false)))))]\n    (take-while (statify n (complement p)) c)))","problem":114,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":114,"code":"(fn f [n p s]\n\t(if (and (= 1 n) (p (first s)))\n\t    nil\n\t    (cons (first s) (f (if (p (first s)) (dec n) n) p (rest s)))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":114,"code":"(fn global-take-while [n pred? s] \n  (cond (zero? n) '()\n        (= n 1) (take-while (complement pred?) s)\n        :else (let [i (first s)\n                    n (if (pred? i) (dec n) n)]\n                (lazy-seq (cons i (global-take-while n pred? (next s)))))))","user":"57002b81e4b08d47c97781c7"},{"code":"(fn f[n p c]\n  (lazy-seq\n    (if (empty? c)\n      []\n      (if (p (first c))\n        (if (= n 1)\n          []\n          (cons (first c) (f (dec n) p (rest c))))\n        (cons (first c) (f n p (rest c)))))))","problem":114,"user":"4fb1325de4b081705acca276"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (let [x (first coll)]\n    (if (or (zero? n)\n            (empty? coll)\n            (and (= n 1) (pred x)))\n      []\n      (cons x (global-take-while (if (pred x) (dec n) n)\n                                 pred\n                                 (rest coll))))))","user":"53dc94c8e4b094d41abdfefc"},{"problem":114,"code":"(fn global-take-while [n p xs]\n    (let [pred (p (first xs))]\n      (if (not pred)\n        (cons (first xs) (lazy-seq (global-take-while n p (rest xs))))\n        (if (= (dec n) 0) ;let's check if we're the last iteration or not\n          (list)\n          (cons (first xs) (lazy-seq (global-take-while (dec n) p (rest xs))))\n      \n          )\n        )\n    ))","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn f [n p [fst & more]]\n    (let [n (if (p fst) (dec n) n)]\n      (if (> n 0)\n       (lazy-seq (cons fst (f n p more))))))","problem":114,"user":"506617c3e4b03d366d7cb2ab"},{"problem":114,"code":"(fn gtw [n p [h & t]]\n  (let [n (if (p h) (dec n) n)]\n    (if-not (zero? n)\n      (cons h (gtw n p t)))))","user":"56baa68ce4b0f26550335947"},{"problem":114,"code":"(fn gtw [n pred coll]\n  (lazy-seq\n   (if-not (empty? coll)\n     (let [a (first coll)\n           t (pred a)]\n       (cond\n        (and t (= n 1))\n        (lazy-seq [])\n        t\n        (lazy-seq (cons a (gtw (dec n) pred (rest coll))))\n        :else\n        (lazy-seq (cons a (gtw n pred (rest coll)))))))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"problem":114,"code":"(fn gtw [n pred coll]\n\t(when (seq coll)\n   \t\t(lazy-seq\n       \t\t(let [[f r] coll\n               \t  p (pred f)\n               \t  n (if p (dec n) n)]\n           \t\t(when (> n 0)\n               \t\t(cons f (gtw n pred (rest coll))))))))","user":"53b39d82e4b047364c0444a6"},{"problem":114,"code":"(fn takewhile [n p xs]\n   (letfn[(taker [n k p xs]\n  (let [x1 (first xs) rs (rest xs)]\n      (if x1 \n          (if (p x1)\n              (if (not (= (inc k) n) )\n                  (cons x1 (taker n (inc k) p rs))\n\n                )\n               (cons x1 (taker n k p rs))\n            )\n        )\n\n    )\n\n  )]\n  \n    (taker n 0 p xs)\n   \n  )\n  )","user":"59ff9424e4b01bb0ae8afd24"},{"problem":114,"code":"(fn take-nth-while [n pred sq]\n  (let [f (first sq)\n        pass (pred f)\n        new-n (if pass (dec n) n)]\n    (if (and (= 1 n) pass)\n      ()\n      (cons f (lazy-seq (take-nth-while new-n pred (rest sq)))))))","user":"538e36c7e4b0b51d73faae81"},{"problem":114,"code":"(fn gtw [n p s]\n  (if (or (nil? s) (and (= 1 n) (p (first s))))\n    nil\n    (cons (first s)\n          (lazy-seq (gtw (if (p (first s)) (dec n) n) p (next s))))))","user":"5958cef6e4b066ee0a44af94"},{"problem":114,"code":"(fn f [n p s]\n  (if (and (p (first s)) (= 1 n))\n    '()\n    (cons (first s)\n          (f (if (p (first s)) (dec n) n) p (rest s)))))","user":"56ef077ae4b04a395b9a0459"},{"problem":114,"code":"#_(fn global-take-while\n  ([x predicate xs]\n     (global-take-while x predicate xs []))\n  ([x predicate [head & tail] acc]\n     (if (or (nil? head) (zero? x))\n       (butlast acc)\n       (if (predicate head)\n          (recur (dec x) predicate tail (conj acc head))\n          (recur x predicate tail (conj acc head))))))\n\n;; yielding a pure lazy-seq requires some additional treatment, drop the core [butlast] in favor of [lazy-seq]....same solution diff version:\n(fn global-take-while\n  [x predicate xs]\n  (letfn [(lazy-take-until\n            [x pred [head & tail]]\n            (lazy-seq\n               (let [butlast-count (dec x)\n                     butlast-match #(if (predicate %) (dec %2) %2)]\n                (when-not \n                  (and (or (nil? head) (zero? butlast-count))\n                       (and (predicate head) (zero? butlast-count)))\n                   (cons \n                      head \n                        (lazy-take-until (butlast-match head x) predicate tail))))))]\n   (lazy-take-until x predicate xs)))","user":"5553b729e4b0deb715856e05"},{"code":"(fn [size f coll]\n  (take \n    (count \n      (#(take-while (partial > size) (reductions + %)) \n       (map #(if (f %) 1 0) coll)))\n   coll))","problem":114,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn [n f coll]\n  (loop [in coll out [] i 0]\n    (if (or (empty? in) (= i n))\n      (drop-last out)\n      (recur (rest in) (conj out (first in)) (if (f (first in)) (inc i) i)))))","problem":114,"user":"5033a1fbe4b062bc5d7ae155"},{"problem":114,"code":"(fn twc [c p s]\n  (when-not (empty? s)\n    (let [[hs & ts] s, nc (if (p hs) (dec c) c)]\n      (when (pos? nc)\n        (lazy-seq (cons hs (twc nc p ts)))))))","user":"59f91b99e4b0ca45a743a33a"},{"problem":114,"code":";oops, not  lazy, but it passed\n(fn [n pred coll]\n    (loop [accum []\n           i 0\n           coll coll]\n      (if-not (seq coll)\n        accum\n        (let [i' (+ i (if (pred (first coll)) 1 0))]\n          (if (= n i')\n            accum\n            (recur (conj accum (first coll))\n                   i'\n                   (rest coll)))))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"problem":114,"code":"(fn f\n\n   [n pred coll]\n\n   (lazy-seq \n\n    (when-let [s (seq coll)]\n\n      (if (pred (first s))\n\n       (if (< 1 n)\n\n         (cons (first s) (f (dec n) pred (rest s))))\n\n       (cons (first s) (f n pred (rest s)))))))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn t [n f c]\n        (if (= n 1)\n          (lazy-seq (take-while (complement f) c))\n          (lazy-seq (cons (first c) (t (if (f (first c))\n                                         (dec n)\n                                         n) f (rest c))))))","problem":114,"user":"4f031eac535dcb61093f6a67"},{"code":"(fn f [n p [x & y]] \n   (println n x)\n    (if (= 1 n) (if (p x) [] (cons x (f n p y))) \n      (if (p x) \n(cons x (f (dec n) p y)) (cons x (f n p y)))))","problem":114,"user":"503917a0e4b088a6a14ca763"},{"problem":114,"code":"(fn gtake-while [n p coll]\n  (if (or (empty? coll) (and (p (first coll)) (= n 1)))\n    '()\n    (cons (first coll)\n          (lazy-seq (gtake-while (if (p (first coll)) (dec n) n) p (rest coll))))))","user":"55c20bd0e4b0e31453f64972"},{"code":"(fn take-while-n\n  [n p? xs]\n  (lazy-seq\n   (if (p? (first xs))\n     (if (zero? (dec n))\n       nil\n       (cons (first xs) (take-while-n (dec n) p? (rest xs))))\n     (cons (first xs) (take-while-n n p? (rest xs))))))","problem":114,"user":"524f4256e4b0541d1855b808"},{"problem":114,"code":"#(butlast \n   (loop [count %1 res [] current %3]\n     (if-let [f (first current)]\n       (let [next (conj res f)\n             r (rest current)]\n         (if (zero? count)\n           res\n           (if (%2 f)\n             (recur (dec count) next r)\n             (recur count next r))\n           ))\n       res\n       )\n     ))","user":"5a621702e4b0512ff01cd983"},{"problem":114,"code":"(fn take-n-while [n p xs]\n  (let [[xs [y & ys]] (split-with (complement p) xs)] ; `y` satisfies the predicate\n    (lazy-seq\n     (if (= 1 n) xs\n         (concat xs [y] (take-n-while (dec n) p ys))))))","user":"5de12192e4b0948ae9d9aded"},{"code":"(fn take-while-n [n p s]\n  (letfn [(not-p [x] (not (p x)))]\n    (cond (= n 1) (take-while not-p s)\n          (empty? s) ()\n          :else\n          (let [ds (drop-while not-p s)]\n            (concat (take-while not-p s)\n                    (if (empty? ds) ds (list (first ds)))\n                    (lazy-seq (take-while-n (dec n) p (rest ds))))))))","problem":114,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":114,"code":"(fn solution [n pred sequence]\n  (let [element (first sequence)]\n    (if (pred element)\n      (if (not= 0 (dec n))\n        (lazy-seq (cons element (solution (dec n) pred (rest sequence)))))\n      (lazy-seq (cons element (solution n pred (rest sequence)))))))","user":"5e2ef900e4b05b4b015161fc"},{"problem":114,"code":"(fn [n pred coll]\n   (loop [[first & remaining] coll\n          result []\n          counter 1]\n     (if (or (nil? first)\n             (and (pred first)\n                  (>= counter n)))\n       result\n       (recur remaining\n              (conj result first)\n              (if (pred first)\n                (inc counter)\n                counter)))))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":114,"code":"(fn my-take-while [n p s]\n  (cond (= 0 n) []\n        (empty? s) []\n        (and (p (first s)) (= 1 n)) []\n        :else\n          (lazy-seq (cons\n            (first s)\n            (my-take-while (if (p (first s)) (dec n) n) p (rest s))))))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":114,"code":"(fn [n pred xs]\n  (loop [[x & xs] xs\n         accum    []\n         count    1]\n         (if (pred x)\n           (if (= n count)\n             accum\n             (recur xs (conj accum x) (inc count)))\n           (recur xs (conj accum x) count))))","user":"563772a9e4b0bfe05bf117d7"},{"code":"(fn global-take-while [n p coll]\n  (let [[fst snd] (split-with (complement p) coll)]\n    (lazy-cat fst\n              (when (> n 1)\n                (cons (first snd)\n                      (global-take-while (dec n) p (rest snd)))))))","problem":114,"user":"50586354e4b06522596eba78"},{"code":"(fn take-while-nth [n f [x & xs]]\n  (let [n (if (f x) (dec n) n)]\n    (if (zero? n)\n      '()\n      (cons x (lazy-seq (take-while-nth n f xs))))))\n;  (cond \n;   (and (= 1 n) (f x)) '()\n;   (f x) (cons x (lazy-seq (take-while-nth (dec n) f xs)))\n;   :else (cons x (lazy-seq (take-while-nth n f xs)))))","problem":114,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn* lazy [n p s]\n  (let [r (p (first s)) cnt (if r (dec n) n)]\n  (if (= cnt 0)\n    ()\n    (cons (first s) (lazy-seq (lazy cnt p (rest s)))))))","problem":114,"user":"53468f6ce4b084c2834f4a3f"},{"code":"(fn gtw [n p coll]\n  (if (empty? coll)\n      coll\n      (let [[h & t] coll]\n           (if-not (p h)\n                   (cons h (lazy-seq (gtw n p t)))\n                   (if (= n 1)\n                       []\n                       (cons h (lazy-seq (gtw (dec n) p t))))))))","problem":114,"user":"5338e33fe4b0e30313ee6ca1"},{"problem":114,"code":"(fn g [n p c]\n  (when-let [c (seq c)]\n    (let [f (first c)\n          d (if (p (first c)) 1 0)\n          n (- n d)]\n      (when (pos? n)\n        (cons f (lazy-seq (g n p (next c))))))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":114,"code":"(fn p114 [n p s]\n  (let [filtered-seq (filter p s)\n        num-filtered-seq (count filtered-seq)\n        last-ok-val (last (drop-last (- num-filtered-seq n) filtered-seq))]\n    (take-while #(not= last-ok-val %) s)))","user":"525c575be4b0cb4875a45d38"},{"code":"(fn global-take-while\n  [n p s]\n  (loop [n' 0 [x & xs] s r []]\n    (if\n      (p x)\n      (if (= (inc n') n)\n        r\n        (recur (inc n') xs (conj r x)))\n      (recur n' xs (conj r x)))))","problem":114,"user":"5201ada5e4b0b2e020a18f14"},{"problem":114,"code":"(fn [m pred ys]\n   (loop [acc 0 pr pred xs ys pos 0]\n     (if (= acc m)\n       (take (dec pos) ys)\n       (recur (if (pr (first xs)) (inc acc) acc ) pr (rest xs) (inc pos))) ))","user":"55d7312ee4b0e31453f64a9f"},{"code":"(fn ff[n p l] (if (> n 0) (let [[t [d0 & ds]] (split-with #(not (p %)) l)] (lazy-cat t (if (> n 1) [d0] []) (ff (- n 1) p ds))) []))","problem":114,"user":"4e7f4147535db966e863cc3d"},{"problem":114,"code":"(fn f [n p [a & b]]\n  (if (and (= n 1) (p a)) []\n     (cons a (f (if (p a) (- n 1) n) p b))))","user":"53500869e4b084c2834f4ad3"},{"code":"(fn gtw [n p s]\n  (loop [acc []\n         s1 s\n         c 0]\n    (let [x (first s1)\n          nc (if (p x) (inc c) c)\n          nacc (conj acc x)]\n      (if (< nc n)\n        (recur nacc (rest s1) nc)\n        acc))))","problem":114,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn [n pred coll]\n  (let [a (atom 0)]\n    (take-while #(if (= n (if (pred %) (swap! a inc) @a)) false true)\n                coll)))","problem":114,"user":"4dad7adac9a9d6ed0599dc57"},{"problem":114,"code":"(fn f [n p [x & xs :as xs']]\n    (cond (empty? xs') nil\n          (not (p x)) (cons x (f n p xs))\n          (= n 1) nil\n          :else (cons x (f (dec n) p xs))))","user":"54c641f8e4b045293a27f628"},{"code":"(fn [n f s]\n  (take \n   (last \n         (take n \n          (keep-indexed \n           #(if (f %2) %1) \n           s)\n         )\n   ) \n   s)\n)","problem":114,"user":"51ba8f82e4b0fe3ecfb46434"},{"code":"(fn gtw [n p x]\n  (cond (empty? x) nil\n        (and (= n 1) (p (first x))) nil\n        (p (first x)) (lazy-seq (cons (first x) (gtw (dec n) p (rest x))))\n        :else (lazy-seq (cons (first x) (gtw n p (rest x))))))","problem":114,"user":"4ed94d69535d10e5ff6f5303"},{"problem":114,"code":"(fn [n p s]\n  (loop [s s\n         n n\n         r []]\n    (if (or (<= n 0) (= 0 (count s)))\n      r\n      (let [m (take-while #(not (p %)) s)\n            c (count m)\n            size (if (= n 1) c (inc c))]\n        (recur (drop size s) (dec n) (concat r (take size s)))))))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn [n p s]\n    (let [f (fn f [n s]\n              (lazy-seq\n                (if (empty? s) nil\n                  (let [pres (p (first s))]\n                    (if (and (= 1 n) pres)\n                      nil\n                      (cons (first s) \n                            (f \n                              (if pres (dec n) n) \n                              (rest s))))))))]\n      (f n s)))","problem":114,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":114,"code":"(fn [n p s]\n  (loop [c 1 q s acc []]\n    (if (empty? q)\n      acc\n      (let [f (first q) r (rest q)]\n        (if (p f)\n          (if (= c n)\n            acc\n            (recur (inc c) r (conj acc f)))\n          (recur c r (conj acc f)))))))","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn r [n p [a & b]] \n  (if (p a)\n    (if (> n 1)\n      (cons a (r (dec n) p b)))\n    (cons a (r n p b))))","problem":114,"user":"4e03c616535d04ed9115e796"},{"code":"(fn tw [n p xs]\n  (cond\n    (= 0 n)\n      []\n    (and (= 1 n) (p (first xs)))\n      []\n    true\n      (cons (first xs)\n      (if (p (first xs)) (tw (dec n) p (rest xs)) (tw n p (rest xs))))))","problem":114,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn f [n p c]\n  (cond\n    (empty? c) c\n    (p (first c)) (if (< n 2)\n                    nil\n                    (cons (first c) (f (dec n) p (rest c))))\n    true (cons (first c) (f n p (rest c)))))","problem":114,"user":"4e14108c535d04ed9115e7dd"},{"problem":114,"code":"(fn g [n f s]\n  (when (or (> n 1) (not (f (first s))))\n    (lazy-seq\n          (cons (first s) \n                (g (if (f (first s)) (dec n) n) f (rest s))))))","user":"52bacfa8e4b07a9af57922d6"},{"problem":114,"code":"(fn [n pred? rando-seq]\n         (loop [counter n\n                x rando-seq\n                y []]\n           (if (= counter 0)\n             (drop-last y)\n             (if (pred? (first x))\n               (recur (dec counter) (rest x) (conj y (first x)))\n               (recur counter (rest x) (conj y (first x))))\n             )\n           ))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn my-take [n p [x & xs :as coll]]\n  (when (not-empty coll)\n    (let [n (if (p x) (dec n) n)]\n      (when (not= n 0)\n        (cons x (lazy-seq (my-take n p xs)))))))","problem":114,"user":"51cdd3f0e4b0e42293a2254b"},{"code":"(fn t [n p [f & s]]\n  (let [n (if (p f) (dec n) n)]\n    (if (pos? n)\n      (lazy-seq\n       (cons f (t n p s))))))","problem":114,"user":"4db8f6c4535d1e037afb219e"},{"problem":114,"code":"(fn f [n p s]\n  (let [a1 (first s) \n        m (if (p a1) (dec n) n)]\n    (if (> m 0)\n      (lazy-seq (cons a1 (f m p (rest s)))))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn gtw [n f s]\n  (if (f (first s))\n    (if (> n 1) (lazy-seq (cons (first s) (gtw (dec n) f (rest s)))) [])\n    (lazy-seq (cons (first s) (gtw n f (rest s))))))","problem":114,"user":"52ba43d0e4b07a9af57922cd"},{"code":"(fn gtw [n p [x & xs]]\n  (if-not x\n    []\n    (let [pt (p x)]\n      (if (and pt (<= n 1))\n        []\n        (cons x (lazy-seq (gtw (if pt (dec n) n) p xs)))))))","problem":114,"user":"52d3f666e4b09f7907dd1327"},{"problem":114,"code":"(fn gtw [n p [c & cs :as coll]]\n  (cond\n    (empty? coll) '()\n    (not (p c)) (lazy-seq (cons c (gtw n p cs)))\n    (< n 2) '()\n    :else (lazy-seq (cons c (gtw (dec n) p cs)))))","user":"605b7a90e4b079a07f8593fc"},{"problem":114,"code":"(fn t [n p [x & r]] (lazy-seq (if (and x (or (not (p x)) (pos? (dec n)))) (cons x (t (if (p x) (dec n) n) p r)))))","user":"4fb1d7ace4b081705acca281"},{"code":"(fn f [n p s]\n  (lazy-seq\n    (cond\n      (empty? s) s\n      (not (p (first s))) (cons (first s) (f n p (rest s)))\n      (= n 1) ()\n      :else (cons (first s) (f (dec n) p (rest s))))))","problem":114,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn taken-while [n p coll]\n  (if (or (zero? n) (empty? coll) (and (zero? (dec n)) (p (first coll))))\n    []\n    (cons (first coll)\n          (lazy-seq\n           (taken-while\n            (if (p (first coll)) (dec n) n)\n            p (rest coll))))\n    )\n  )","problem":114,"user":"52e59ca5e4b09f7907dd1464"},{"code":"(fn f [n p [h & t]]\n  (lazy-seq\n    (if (p h)\n      (if (< 1 n) (cons h (f (dec n) p t)))\n      (cons h (f n p t)))))","problem":114,"user":"4e96557d535dbda64a6f6b43"},{"problem":114,"code":"(fn tw [n p [x :as xs]]\n (when-not (and (zero? (dec n))(p x))\n  (cons x \n   (tw \n    (if (p x) (dec n) n)\n    p (rest xs)))))","user":"55597b84e4b0deb715856e36"},{"code":"(fn f [n p [a & r]]\n  (lazy-seq\n    (cond\n      (= 0 n) nil\n      (p a) (when (> n 1) (cons a (f (dec n) p r)))\n      :e (cons a (f n p r)))))","problem":114,"user":"4f08b15b535dcb61093f6c40"},{"problem":114,"code":"(fn gtw [n pred coll]\n  (let[y (first coll)]\n    (if (pred y)\n        (if (= n 1) \n          nil\n          (cons y (lazy-seq (gtw (dec n) pred (rest coll) ))))\n        (cons y (lazy-seq (gtw n pred (rest coll))) ))      \n    ))","user":"52bbd09ee4b07a9af57922ee"},{"problem":114,"code":"(fn foo\n  [n pred [head & tail :as coll]]\n  (lazy-seq\n   (when (seq coll)\n     (let [n (if (pred head) (dec n) n)]\n       (when-not (zero? n)\n         (cons head (foo n pred tail)))))))","user":"5764457ae4b0994c1922fbf3"},{"problem":114,"code":"(fn take-while'\n  ([n p xs] (take-while' n p xs []))\n  ([n p [x & xs] res]\n    (cond\n      (zero? n)            res\n      (and (= 1 n) (p x)) res\n      (p x)               (take-while' (dec n) p xs (conj res x))\n      :else               (take-while' n p xs (conj res x)))))","user":"55d5e80ee4b0e31453f64a91"},{"code":"(fn [n p xs]\n  (->> xs \n    (reductions (fn [[i y] x]\n                  [(if (p x) (inc i) i) x])\n                [0 nil])\n    (take-while #(< (first %) n))\n    rest\n    (map second)))","problem":114,"user":"52a88c4de4b0c58976d9ac30"},{"problem":114,"code":"(fn g [n p [x & s]]\n  (lazy-seq\n   (let [n (if (p x) (dec n) n)]\n     (when (> n 0)\n       (cons x (g n p s))))))","user":"5458c74de4b01be26fd74623"},{"code":"(fn gtake [n p s]\n  (map first \n    (filter #(< (second %) n)\n      (map vector s\n        (reductions + (map #(if (p %) 1 0) s)))))\n  (let [[t [d & ds]] (split-with (comp not p) s)]\n    (if (>= 1 n) t\n      (concat t [d] (gtake (dec n) p ds))))\n)","problem":114,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn [n p s]\n  (loop [n n s s r []]\n    (if (or (zero? n) (empty? s))\n      r\n      (if (p (first s))\n        (recur (dec n) (rest s) (if (zero? (dec n)) r (conj r (first s))))\n        (recur n (rest s) (conj r (first s)))))))","problem":114,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn f\n  [n p [h & t :as v]]\n  (if (= 1 n)\n    (take-while #(not (p %)) v)\n    (cons h\n          (f (if (p h) (dec n) n) p t))))","problem":114,"user":"51ad244fe4b09397d510977f"},{"problem":114,"code":"(fn tw [n p [f & s]]\n  (if (or (= n 0) (and (= n 1) (p f)))\n    (lazy-seq)\n    (lazy-seq (cons f (tw (if (p f) (dec n) n) p s)))))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn gtw [n p s]\n  (when (seq s)\n    (lazy-seq\n      (let [[x & xs] s\n            n- (if (p x) (dec n) n)]\n        (if (> n- 0)\n          (cons x (gtw n- p xs)))))))","problem":114,"user":"4dd61f98535d2dad7130b5c6"},{"problem":114,"code":"(fn __ [n p s]\n  (take (loop [c n\n               i 0]\n          (if (= c 0) (dec i)\n              (recur (if (p (s i)) (dec c) c)\n                     (inc i)))) s))","user":"53d5a63be4b0e771c3025449"},{"problem":114,"code":"(fn take-while' [n p s]\n  (let [i (if (p (first s)) (dec n) n)]\n    (if (or (empty? s) (= 0 i)) ()\n      (lazy-seq (cons (first s) (take-while' i p (next s)))))))","user":"58247423e4b051871117bec5"},{"problem":114,"code":"(fn [upper-bound pred coll]\n  (let [last-value (last\n                     (take upper-bound\n                           (filter pred coll)\n                                   ))]\n    (take-while #(not= % last-value) coll)\n    ))","user":"50939f7ce4b097f48cc38582"},{"problem":114,"code":"(fn f114 [n p s]\n  (if (empty? s)\n    []\n    (if (p (first s))\n      (if (= n 1)\n        '()\n        (cons (first s)\n              (lazy-seq (f114 (dec n) p (rest s)))))\n      (cons (first s)\n            (lazy-seq (f114 n p (rest s)))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":114,"code":"(fn tk-while [n f [x & xs :as all]]\n  (cond\n    (empty? all) ()\n    (f x) (if (zero? (dec n))\n                     ()\n                     (lazy-seq (cons x\n                                     (tk-while (dec n)\n                                               f\n                                               xs))))\n    :else (lazy-seq (cons x\n                          (tk-while n f xs)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn [n pred coll]\n  (loop [n n\n         [x & xs :as coll] coll\n         result []]\n    (cond\n     (empty? coll) result\n     (pred x) (if (<= n 1)\n                result\n                (recur (dec n) xs (conj result x)))\n     :else (recur n xs (conj result x)))))","problem":114,"user":"4fe13ad7e4b0dd6cd5ce3632"},{"code":"(fn q [n p s]\r\n  ((fn f [el-num new-coll cur-col]\r\n    (if (and (p (first cur-col)) (= el-num n))\r\n      new-coll\r\n      (if (p (first cur-col)) (f (inc el-num) (conj new-coll (first cur-col)) (rest cur-col))\r\n        (f el-num (conj new-coll (first cur-col)) (rest cur-col))))) 1 [] s))","problem":114,"user":"505dd5c4e4b0e6aca564be0e"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(tw-body [n p [sh & st :as s]]\n            (prn n p s)\n            (cond (<= n 0)\n                  nil\n                  (p sh)\n                  (when (> n 1) (cons sh (tw-body (dec n) p st)))\n                  :else\n                  (cons sh (tw-body n p st))))]\n    (lazy-seq  (tw-body n p s)))\n  )","user":"55f09e7be4b06e875b46ce28"},{"code":"(fn take-while-global [n p xs]\n  (letfn [(take-while-global' [xs acc n']\n            (if (empty? xs)\n              acc\n              (let [h (first xs)\n                    t (rest  xs)\n                    nx (inc n')\n                    nseq (conj acc h)]\n                (if (p h)\n                  (if (= nx n)\n                    acc\n                    (recur t nseq nx))\n                  (recur t nseq n')))))]\n    (take-while-global' xs [] 0)))","problem":114,"user":"531c0619e4b08068f379ed98"},{"code":"(fn [n p? l] (loop [[h & t] l, cnt 1, acc []]\n  (if (p? h)\n    (if (= cnt n)\n      acc\n      (recur t (inc cnt) (conj acc h)))\n    (recur t cnt (conj acc h)))\n))","problem":114,"user":"4fc0853ae4b081705acca327"},{"code":"(fn globtw [n pred coll]\n  (let [help (fn help [idx, coll]\n               (if (empty? coll) nil\n                 (if (pred (first coll))\n                   (let [nex (inc idx)]\n                     (if (= n nex)\n                       nil\n                       (lazy-seq\n                        (cons (first coll) (help nex (rest coll))))))\n                 (lazy-seq \n                  (cons (first coll) (help idx (rest coll)))))))]\n    (help 0 coll)))","problem":114,"user":"5224a46ce4b01819a2de42e5"},{"problem":114,"code":"(fn global-take-while [n f [h & t]]\n  (when-not (or (zero? n) (and (= n 1) (f h)))\n    (cons h (global-take-while (if (f h) (dec n) n) f t))))","user":"5c2649c8e4b07e362c2305bf"},{"problem":114,"code":"(fn step [n f [x & xs]]\n    (let [n (if (f x) (dec n) n)]\n      (when-not (zero? n)\n        (lazy-seq (cons x (step n f xs))))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":114,"code":"(fn g [n pred s] (if (pred (first s))\n                 (if (= 1 n)\n                   '()\n                   (cons (first s) (lazy-seq (g (dec n) pred (rest s)))))\n                 (cons (first s) (lazy-seq (g n pred (rest s))))))","user":"5b4b4052e4b02d533a91bc9a"},{"code":"(fn gtw [n p [x & s]]\n  (if (and (= 1 n) (p x))\n    []\n    (cons x (lazy-seq (gtw (if (p x) (dec n) n) p s)))\n  )\n)","problem":114,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":114,"code":"#(take (->> (map-indexed vector %3) (filter (comp %2 last)) (take %) last first) %3)","user":"55f6fe09e4b06e875b46cea2"},{"problem":114,"code":"(fn [n p s]\n  (take (.indexOf s (nth (filter p s) (dec n))) s)\n)","user":"5676af21e4b05957ce8c6158"},{"code":"(letfn [\n    (take-while-nth [n f x] (cond\n        (zero? n) []\n        (f (first x)) (cons (first x) (take-while-nth (dec n) f (rest x)))\n        true (cons (first x) (take-while-nth n f (rest x)))))]\n    (comp butlast take-while-nth))","problem":114,"user":"51cbdee1e4b08d8387cbede1"},{"problem":114,"code":"(fn [n f coll]\n  (loop [item (first coll) coll (rest coll) x 0 acc []]\n    (if (or (empty? coll) (= x n))\n      (butlast acc)\n      (recur (first coll) (rest coll) (if (f item) (inc x) x ) (conj acc item))\n        )\n    )\n  )","user":"564a560ae4b0284900eef654"},{"problem":114,"code":"(fn take-n-while [n p s]\n  (let [hit (p (first s))]\n    (when-not (and hit (<= n 1))\n      (lazy-seq (cons (first s) (take-n-while (if hit (dec n) n)\n                                              p\n                                              (rest s)))))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":114,"code":"(fn glob-take-while \n  ([num pred s] (glob-take-while num pred s 0))\n\n  ([num pred s num-times] \n    (println (first s))\n    (when (< num-times num) \n      (if (pred (first s))\n        (when (not (= (inc num-times) num)) \n          (lazy-seq (cons (first s) (glob-take-while num pred (rest s) (inc num-times)))))\n        (lazy-seq (cons (first s) (glob-take-while num pred (rest s)  num-times)))\n        )\n      ))\n\n)","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [n pred xs]\n  (loop [t 0 i 0 res []]\n    (let [h (nth xs i)]\n      (cond\n        (= t n) (drop-last res)\n        (pred h) (recur (inc t) (inc i) (conj res h))\n        :else (recur t (inc i) (conj res h))))))","problem":114,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":114,"code":"(fn tw [n p c] (lazy-seq (when-let [s (seq c)] (let [nn (if (p (first s)) (dec n) n)] (when (> nn 0) (cons (first s) (tw nn p (rest s))))))))","user":"58987ee9e4b00487982d52d2"},{"code":"(fn gtw [n pre? seq]\n  (if (and (= 1 n) (or (empty? seq) (pre? (first seq))))\n    []\n    (if (pre? (first seq))\n      (lazy-seq (cons (first seq) (gtw (dec n) pre? (rest seq))))\n      (lazy-seq (cons (first seq) (gtw n pre? (rest seq)))))))","problem":114,"user":"4f8bbb27e4b02e764a0a5182"},{"problem":114,"code":"(fn [N pred col]\n            ((fn gltake [result N i]\n               (if (pred (nth col i))\n                 (if (= N 1)\n                    result\n                   (lazy-seq (cons (nth col i) (gltake result (- N 1) (+ i 1)))))\n                 (lazy-seq (cons (nth col i) (gltake result N (+ i 1))))))\n             [] N 0))","user":"5e1c3e6ee4b0dc9594008530"},{"code":"(fn global-take-while [n pred a-seq]\n\t(let [result (reduce (fn [state el] \n\t\t\t(let [[res cnt] state \n\t\t\t\t  nxt-cnt (if (pred el) (inc cnt) cnt)\n\t\t\t\t  bound-not-reached (< nxt-cnt n) \n\t\t\t\t  ]\n\t\t\t\t(if bound-not-reached\n\t\t\t\t\t[(conj res el) nxt-cnt]\n\t\t\t\t\t[res nxt-cnt]\n\t\t\t\t)\n\t\t\t)\n\t\t) [[] 0] a-seq)]\n\t\t(first result)\n\t)\n)","problem":114,"user":"52763696e4b03e8d9a4a74d7"},{"problem":114,"code":"(fn t [n p s]\n  (lazy-seq\n   (if (empty? s)\n     '()\n     (let [[f & r] s]\n       (if (p f)\n         (if (> n 1)\n             (cons f (t (dec n) p r))\n           '())\n         (cons f (t n p r)))))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":114,"code":"(fn take-n-while [n pred coll]\n  (let [f (first coll)]\n    (if (pred f)\n      (if (> n 1)\n        (cons f (take-n-while (dec n) pred (rest coll))))\n      (cons f (take-n-while n pred (rest coll))))))","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [n p s]\r\n  (loop [c 0 v [] x s]\r\n\t\t(cond\r\n\t\t\t(nil? x)  s\r\n\t\t\t(= c n) (butlast v)\r\n\t\t\t(p (first x)) (recur (inc c) (conj v (first x)) (rest x))\r\n\t\t\t:else (recur c (conj v (first x)) (rest x)))))","problem":114,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":114,"code":"(fn p [n pred coll]\n  (if (and (pred (first coll)) (zero? (dec n)))\n    nil\n    (lazy-seq (cons (first coll)\n                    (p (if (pred (first coll)) (dec n) n)\n                       pred\n                       (rest coll))))))","user":"51dafedee4b09f6bc204eee2"},{"problem":114,"code":"(fn [n f s]\n    (letfn [(iter [nn ff ss]\n              (when (> nn 0)\n                (let [x (first ss)]\n                  (if (f x)\n                    (cons x (iter (dec nn) ff (rest ss)))\n                    (cons x (iter nn ff (rest ss)))))))]\n      (butlast (iter n f s))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":114,"code":"(fn take-while'\n  [n pred xs]\n  (if-let [x (first xs)]\n    (if (pred x)\n      (if (> n 1)\n        (cons x (lazy-seq (take-while' (dec n) pred (rest xs)))))\n      (cons x (lazy-seq (take-while' n pred (rest xs)))))))","user":"52d95491e4b09f7907dd13a4"},{"code":"(fn tw \n  ([n p s] (tw n p s 0))\n  ([n p s c]\n   (let [cnt (if (p (first s) )(inc c) c)] ;if-let does not seem right\n     (if (< cnt n) \n       (lazy-seq  (cons (first s) (tw n p (rest s) cnt)))))))","problem":114,"user":"50783762e4b0fc74642bff67"},{"code":"(fn [n f x]\n  (loop [k 0 xs x result []]\n    (if (< k n)\n         (if (f (first xs))\n              (recur (+ 1 k) (rest xs)(conj result (first xs)))\n              (recur k (rest xs) (conj result (first xs)))\n           )\n             (butlast result)\n      )))","problem":114,"user":"51d10b1fe4b067c36548635e"},{"problem":114,"code":"(fn\n  [n pred coll]\n  (letfn [(r [n coll]\n            (lazy-seq\n              (if (= 0 n)\n                nil\n                (if (seq coll)\n                  (let [h (first coll)\n                        t (rest coll)]\n                    (if (pred h)\n                      (if (> n 1)\n                        (cons h (r (dec n) t))\n                        nil)\n                      (cons h (r n t))))))))]\n    (r n coll)))","user":"52dfc89be4b09f7907dd1405"},{"code":"(fn [n p s]\n  (let [mp (map #(vec [% (p %)]) s)]\n    (loop [[[a b] & t] mp cnt 1 rslt []]\n      (if (nil? a) rslt\n    (if b\n\t    (if (= cnt n) rslt\n\t\t(recur t (inc cnt) (conj rslt a)))\n\t    (recur t cnt (conj rslt a)))))))","problem":114,"user":"4e7d1c22535db169f9c796c5"},{"problem":114,"code":"(fn [n f coll]\n (loop [i 0        \n        nf (complement f)\n        coll coll\n        result []] \n  (let [testcoll (take-while f coll)\n        newcoll (take-while nf coll)\n        restcoll (drop (count newcoll) coll)\n        newresult (if (empty? newcoll) result (apply conj result newcoll))\n        newi (if (= newcoll testcoll) (+ i (* 2 (count newcoll))) i)]\n   (if (= newi (* 2 n))\n    result\n    (recur newi\n           (complement nf)\n           restcoll \n           newresult)))))","user":"57dd47f4e4b0bd073c20243e"},{"problem":114,"code":"(fn tw [a i n pred [x & xs]] \n    (if (pred x)\n      (if (= i (dec n)) \n          a\n          (tw (conj a x) (inc i) n pred xs))\n      (tw (conj a x) i n pred xs)) \n  ) [] 0","user":"53b15e6ee4b047364c04448f"},{"problem":114,"code":"(fn [n p c]\n    (second\n      (reduce\n        (fn [[m a] x]\n          (cond\n            (or (and (= (dec n) m) (p x))\n                (= n m))\n            [n a]\n            (p x) [(inc m) (conj a x)]\n            :e [m (conj a x)]))\n        [0 []]\n        c)))","user":"4ff3df0fe4b0678c553fc355"},{"problem":114,"code":"(fn [n p s]\n  (let [keyed      (map #(vector %1 %2) (range) s)\n        satisfied  (filter #(p (second %)) keyed)\n        nth-satis  (nth satisfied (dec n))\n        take-key   (first nth-satis)\n        result     (take take-key s)\n        ]\n    result))","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"(fn [n p coll]\n  (take\n    (first (last (take n (filter #(p (second %)) (map-indexed vector coll)))))\n    coll))","problem":114,"user":"51e00020e4b01188f0627534"},{"problem":114,"code":"(fn tf [n f l]\n   (let [e (first l)]\n     (if (and (<= n 1) (f e))\n       []\n       (cons e (lazy-seq (tf (if (f e) (dec n) n) f (rest l)) )))))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [n1 p1 v1]\n  (letfn [(rec [n p v r]\n            (cond\n              (zero? n) r\n              (p (first v)) (recur (dec n) p (rest v) (conj r (first v)))\n              :default (recur n p (rest v) (conj r (first v)))\n              )\n            )]\n    (drop-last (rec n1 p1 v1 []))\n  )\n)","problem":114,"user":"4fcad14ce4b0ee37620e1856"},{"problem":114,"code":"(fn gtw [n f coll]\n  (when-not (zero? n)\n    (let [e (first coll) r (rest coll)]\n      (if (f (first coll))\n        (if-not (= n 1)\n          (cons e (lazy-seq (gtw (dec n) f r))))\n        (cons e (lazy-seq (gtw n f r)))))))","user":"5576f299e4b05c286339e077"},{"code":"(comp butlast (fn gtw [n p s]\n                (if (= 0 n) ()\n                  (let [f (first s) r (rest s)]\n                    (lazy-cat [f] (gtw (if (p f) (dec n) n) p r))))))","problem":114,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(comp butlast\n  (fn T [n p [h & t]]\n    (if (> n 0)\n      (cons h\n            (T (- n (if (p h) 1 0)) p t)))))","problem":114,"user":"4ee82539535d93acb0a66878"},{"problem":114,"code":"(fn take-n-while [n p coll]\n    (lazy-seq\n      (when-let [[x & xs] (seq coll)]\n        (let [n (if (p x) (dec n) n)]\n          (when-not (zero? n)\n            (cons x (take-n-while n p xs)))))))","user":"509e8da7e4b08df8156e9e2f"},{"code":"(fn gtw[n f l]\n  (if (empty? l)\n      '()\n  (let [[a & r] l\n        m (f a)\n        n1 (if m (dec n) n)]\n    (if (= n1 0)\n        '()\n        (lazy-seq\n          (cons a\n                (gtw n1 f r)))))))","problem":114,"user":"4e7db3b4535db169f9c796e1"},{"problem":114,"code":"(fn my-take-while [n p l]\n  (loop [c 0\n         [f & r] l\n         ret []]\n    (if (or (and (p f) (= (inc c) n)) (nil? f))\n      ret\n      (recur (if (p f) (inc c) c) r (conj ret f))\n      )\n    )\n  )","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn takewhile[n f s]\n      (cond (= n 0) []\n            (and (= n 1) (f (first s))) []\n            :else (cons (first s) (lazy-seq (takewhile (if (f (first s)) (dec n) n) f (rest s))))\n      )\n    )","problem":114,"user":"5272d4b7e4b03e8d9a4a7453"},{"problem":114,"code":"(fn [n p v]\n  (letfn [(f [n1 [h & t] ans]\n            (lazy-seq\n             (if (p h)\n               (if (zero? (dec n1))\n                 ans\n                 (cons h (f (dec n1) t ans)))\n               (cons h (f n1 t ans)))))]\n    (f n v (list))))","user":"56ff45e5e4b08d47c97781bb"},{"code":"(fn __ [n p c]\n  (cond\n   (empty? c) nil\n   (= n 0) nil\n   :else\n   (let [head (first c)\n         remains (rest c)]\n     (if (p head)\n       (when (> n 1) (cons head (__ (dec n) p remains)))\n       (cons head (__ n p remains))))))","problem":114,"user":"512d3304e4b040332b905b2d"},{"problem":114,"code":"(fn twn [n p s]\n  (let [[h & t] s]\n    (if (p h)\n      (when (> n 1)\n        (lazy-seq (cons h (twn (dec n) p t))))\n      (lazy-seq (cons h (twn n p t))))))","user":"571d063ee4b0145328a76272"},{"problem":114,"code":"(fn global-take-while [cnt pred seq]\n  (let [fst (first seq)\n        new-cnt (if (pred fst)\n                  (dec cnt)\n                  cnt)]\n    (if (zero? new-cnt)\n      []\n      (cons fst\n            (global-take-while new-cnt pred (rest seq))))))","user":"568e1871e4b0dcc4269f40cc"},{"code":"(fn [n p s] (map second\n                  (take-while #(< (nth % 2) n)\n                              (next\n                               (iterate (fn [[[f & r] _ w]] [r f (if (p f) (inc w) w)])\n                                        [s nil 0])))))","problem":114,"user":"4ee88bfb535d93acb0a66881"},{"problem":114,"code":"(fn tw [n p [h & r]]\n  (let [m (if (p h) (dec n) n)]\n    (if-not (zero? m)\n      (lazy-seq (cons h (tw m p r))))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":114,"code":"(fn r [n f s] (let [x (if (f (first s)) (dec n) n )]  (if (= x 0) [] (cons (first s) (r x f (rest s))))))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn x [n f [i & more]]\r\n  (cond\r\n    (f i) (if (> n 1) \r\n              (cons i (lazy-seq (x (dec n) f more))))\r\n    \r\n    (= i nil) nil\r\n    \r\n    :default  (cons i (lazy-seq (x n f more)))  \r\n  )\r\n)","problem":114,"user":"4f3e6244e4b0e243712b1f85"},{"problem":114,"code":"(fn tw [n f xs]\n  (if (empty? xs) []\n    (let [n (if (f (first xs)) (dec n) n)]\n      (if (= 0 n) []\n        (lazy-seq (cons (first xs) (tw n f (rest xs))))))))","user":"553e0b70e4b0a04f792994e8"},{"code":"#(loop [acc [] [n p [h & t]] %&]\n     (if (or (nil? h) (and (= 1 n) (p h))) acc\n             (recur (conj acc h) [(if (p h) (dec n) n)\n                                  p\n                                  t])))","problem":114,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":114,"code":"(fn [arg1 arg2 arg3]\n(cond\n(= arg1 4) [2 3 5 7 11 13]\n(= arg1 3) [\"this\" \"is\" \"a\" \"sentence\"]\n(= arg1 1) [\"this\" \"is\"]\n))","user":"565f2461e4b068f2fe63dc3b"},{"code":"(fn tw [n p s]\n  (cond\n   (empty? s) s\n   (= 0 n) (empty s)\n   (= 1 n) (take-while #(not (p %)) s)\n   :else (let [a (take-while #(not (p %)) s)\n               ca (count a)]\n           (if (= 0 ca)\n             (if (p (first s))\n               (lazy-seq (cons (first s) (tw (dec n) p (drop 1 s))))\n               s)\n             (lazy-seq (concat a (take 1 (drop ca s)) (tw (dec n) p (drop (inc ca) s))))))))","problem":114,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn f [n pred coll]\n    (lazy-seq\n     (when-let [s (seq coll)]\n       (if (pred (first s))\n         (when (> n 1)\n           (cons (first s) (f (dec n) pred (rest s))))\n         (cons (first s) (f n pred (rest s)))))))","problem":114,"user":"50bca033e4b0594b91591c5d"},{"code":"(fn [n f xs]\n  (let [final (last (take n (filter f xs)))]\n    (take-while #(not= final %) xs)))","problem":114,"user":"50217818e4b00bba4502f7a7"},{"problem":114,"code":"(fn n-take-while [n p s] ((fn step [rem-s rem-n]\n                             (let [match (boolean (p (first rem-s))) new-n (if match (dec rem-n) rem-n)]\n                               (if (not (zero? new-n))\n                                (lazy-seq (cons (first rem-s) (step (rest rem-s) new-n))))))\n                             s n))","user":"56baab13e4b0f26550335948"},{"problem":114,"code":"(fn reduce-while [n p s]\n  (when (and (not (zero? n))\n             (not-empty s))\n    (let [item (first s)\n          remaining (rest s)\n          match? (p item)]\n      (when (not (and match? (= 1 n)))\n        (cons (first s)\n              (lazy-seq (reduce-while (if match? (- n 1) n)\n                                      p\n                                      (rest s))))))))","user":"57aa4775e4b0b8559636fc6b"},{"problem":114,"code":"(fn [how-many pred xs] ((fn [xs acc already]\n                          (let [new-already (+ already (if (pred (first xs)) 1 0))]\n                            (if (or (nil? xs) (= new-already how-many))\n                              acc (recur (rest xs) (conj acc (first xs)) new-already)))) xs [] 0))","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn g [n f s] \n  (let [i (first s)\n        m (if (f i) (- n 1) n)]\n    (if (= m 0) '() (lazy-seq (cons i (g m f (rest s)))))))","problem":114,"user":"4f1d1d95535d64f603146488"},{"problem":114,"code":"(fn global-take-while\n  [n pred [x & more :as coll]]\n  (when (or (nil? coll) (not (and (#{1} n) (pred x))))\n    (lazy-seq (cons x (global-take-while\n                       (if (pred x) (dec n) n) pred more) ))))","user":"557e9d17e4b05c286339e0d8"},{"problem":114,"code":"(fn [n pred coll]\n  \"ugly - should be a transducer\"\n  (loop [n n\n         pred pred\n         coll coll\n         output []]\n    (if-not (pos? n)\n      (butlast output)\n      (if (pred (first coll))\n        (recur (dec n)\n               pred\n               (rest coll)\n               (conj output (first coll)))\n        (recur n\n               pred\n               (rest coll)\n               (conj output (first coll)))))))","user":"5297dcc5e4b02ebb4ef75047"},{"code":"(fn f [n p s] \n  (when (not (empty? s))\n    (let [[x & s] s\n          n (if (p x) (dec n) n)]\n      (when (> n 0)\n        (lazy-seq (cons x (f n p s)))))))","problem":114,"user":"519ef784e4b087743fad2198"},{"code":"(fn f\n   [max-n pred li]\n   (loop [n max-n p pred l li c [] cnt 0]\n         (let [new-count (if (p (first l)) (inc cnt) cnt)]\n           (if (= new-count n) c\n             (recur n p (rest l) (conj c (first l)) new-count)))))","problem":114,"user":"4daeabf6edd6309eace4d15c"},{"problem":114,"code":"(fn take-while-n [n p s]\n    (if (and (= 1 n) (p (first s))) \n        []\n        (lazy-seq (cons (first s) (take-while-n (if (p (first s)) (dec n) n) p (rest s))) )\n    )\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":114,"code":"(fn takewhile [n f xs] (let [a (f (first xs))\n                                             i (if a (dec n) n)]\n                                       (if (pos? i)\n                                           (cons (first xs) (takewhile i f (rest xs))))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":114,"code":"(fn bar [n pred [current & others]]\n    (cond\n      (not (pred current)) (cons current (lazy-seq (bar n pred others)))\n      (= 1 n) []\n      :else (cons current (lazy-seq (bar (dec n) pred others)))))","user":"5bab5440e4b0a20761a23475"},{"problem":114,"code":"(fn gt [n p [fst & rst]]\n          (when fst\n            (let [nn (if (p fst) (dec n) n)]\n              (when (> nn 0)\n                (cons fst (lazy-seq (gt nn p rst)))))))","user":"4e0e0529535d04ed9115e7b9"},{"problem":114,"code":"(fn F\n  ([n f s] (F n f s ()))\n  ([n f [x & xs] res] (lazy-seq (if (and (= n 1) (f x)) res (conj (F (if (f x) (dec n) n) f xs res) x)))))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn tw [n p coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (if (> n 0)\n       (if (p x)\n         (if (> n 1)\n           (cons x (tw (dec n) p xs)))\n         (cons x (tw n p xs)))))))","problem":114,"user":"51bd1a0de4b0df1216cefd93"},{"problem":114,"code":"; Evil hack\n(fn [& _]\n  (reify nil\n    clojure.lang.IPersistentCollection\n    (seq [_])\n    (cons [_ _])\n    (empty [_])\n    (equiv [_ _] true)))","user":"51e58e02e4b0efabf93c02d0"},{"problem":114,"code":"(fn __\n  [n p? seq-in]\n  (loop [acc      []\n         n        n\n         [x & xs] seq-in]\n    (cond (nil? x)\n          acc\n\n          (and (= 1 n) (p? x))\n          acc\n\n          (p? x)\n          (recur (conj acc x) (dec n) xs)\n\n          :else\n          (recur (conj acc x) n xs))))","user":"55916764e4b0604b3f94d57b"},{"problem":114,"code":"(fn f [i p [x & r]]\n  (lazy-seq\n    (let [i (if (p x) (- i 1) i)]\n      (when (> i 0)\n        (cons x (f i p r))))))","user":"54848141e4b0e286459a119e"},{"problem":114,"code":"(fn\n  [n pred coll]\n  (loop [result [] coll coll n n]\n    (if (empty? coll)\n      result\n      (let [[head & remaining] coll]\n        (if (pred head)\n          (if (= n 1) result (recur (conj result head) remaining (dec n)))\n          (recur (conj result head) remaining n)\n          )\n        )\n      )\n    )\n  )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":114,"code":"(fn t [n p [a & s]]\n  (if (p a)\n    (if (> n 1)\n      (cons a (t (- n 1) p s)))\n    (cons a (t n p s))))","user":"543366dde4b0b6b47310fcdf"},{"problem":114,"code":"(fn __ [n p r]\n  ((fn f [[e & r] a n]\n     (let [? (p e)]\n       (if (and ? (= 1 n)) a\n         (f r (conj a e) (if ? (dec n) n))))) r [] n))","user":"57a0b341e4b0c3d858beb8d4"},{"code":"(fn gtw [n p items]\n  (let [xs (take n (take-while p items))\n        ys (take-while (complement p) (drop (count xs) items))\n        zs (drop (+ (count xs) (count ys)) items)]\n    (if (= n (count xs))\n      (drop-last xs)\n      (lazy-cat xs ys (gtw (- n (count xs)) p zs)))))","problem":114,"user":"510cd1dde4b078ea71921124"},{"code":"(fn [n f ls]\n  (letfn [(nxt [fnd r [h & t :as ls]] \n            (cond\n              (= fnd n) r\n              (f h) (recur (inc fnd) (conj r h) t)\n              :else (recur fnd (conj r h) t)))]\n    (butlast (nxt 0 [] ls))))","problem":114,"user":"5003ee7de4b0678c553fc446"},{"problem":114,"code":"(fn take-while-not-nth [n pred s]\n  (cond (not (seq s))\n        nil\n        (pred (first s))\n        (if (= n 1)\n          nil\n          (lazy-seq (cons (first s) (take-while-not-nth (dec n) pred (rest s)))))\n        :else\n        (cons (first s) (take-while-not-nth n pred (rest s)))))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn [n p s]\n  (loop [m n\n         t s\n         r []]\n    (let [[h xs] [(first t) (rest t)]]\n    \t(if (p h)\n      \t\t(if (= 1 m)\n\t        \tr\n    \t    \t(recur (dec m) xs (conj r h)))\n          (recur m xs (conj r h))))))","problem":114,"user":"502a5e59e4b09e8f859a9fbc"},{"code":"(fn r [n p [s & ss]]\n    (lazy-seq\n     (when s \n       (if (p s)\n         (when (> n 1)\n           (cons s (r (dec n) p ss)))\n         (cons s (r n p ss))))))","problem":114,"user":"4e6a0667535d8ccf87e9fe9e"},{"problem":114,"code":"(fn [n pred coll]\n    (let [step (fn step [idx coll]\n               (when (seq coll)\n                 (let [f   (first coll)\n                       r   (rest coll)\n                       idx (if (pred f) (inc idx) idx)]\n                   (when-not (= idx n)\n                     (cons f (step idx r))))))]\n    (lazy-seq (step 0 coll))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn f [n p coll]\n  (if-not (seq coll)\n    []\n    (let [fst (first coll)\n          hit? (p fst)]\n      (if hit?\n        (if (> n 1)\n          (cons fst (lazy-seq (f (dec n) p (rest coll))))\n          [])\n        (cons fst (lazy-seq (f n p (rest coll))))))))","problem":114,"user":"51195e77e4b055cfb310d499"},{"code":"(fn t114 [c p coll]\n  (let [v (nth (filter p coll) (dec c))]\n    (take-while #(not= % v) coll)))","problem":114,"user":"5046f909e4b03b02161376b5"},{"code":"(fn __ [n pred coll]\n  (->> (reduce (fn [[ls c] x]\n                 (cond\n                   (<= n c) [ls c]\n                   (pred x) [(conj ls x) (inc c)]\n                   :else [(conj ls x) c])\n                 ) [[] 0] coll)\n       first\n       butlast))","problem":114,"user":"536d83cee4b0fc7073fd6e5e"},{"problem":114,"code":"(fn [n p xs]\n    (loop [counter n\n           accum []\n           remaining xs]\n      (let [x (first remaining)\n            new-count (if (p x) (dec counter) counter)]\n        (if (and (seq remaining) (< 0 new-count))\n          (recur new-count\n                 (conj accum x)\n                 (rest remaining))\n          accum))))","user":"56c4f43ce4b05cc29241ee9c"},{"code":"(fn take-while* [n p [x & xs :as s]]\n  (lazy-seq\n   (when (seq s)\n     (let [n (if (p x) (dec n) n)]\n         (when (pos? n) (cons x (take-while* n p xs)))))))","problem":114,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn t [n p s]\n  (lazy-seq\n   (if-not (empty? s)\n     (let [[x & s] s]\n       (if (< n 2)\n         (if (p x) [] (cons x (t 0 p s)))\n         (cons x (t (if (p x) (dec n) n) p s)))))))","problem":114,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":114,"code":"(fn [n pred s]\n    (loop [res []\n           n n\n           s s]\n      (let [x (first s)\n            match? (pred x)]\n        (cond\n          (and match? (= 1 n))  res\n          match?                (recur (conj res x) (dec n) (rest s))\n          :else                 (recur (conj res x) n (rest s))))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":114,"code":"(fn take-while-limited [n pred [x & xs :as xs']]\n  (when-not (empty? xs')\n    (if (pred x)\n      (if (= 1 n)\n        nil\n        (lazy-seq (cons x (take-while-limited (dec n) pred xs))))\n      (lazy-seq (cons x (take-while-limited n pred xs))))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":114,"code":"(fn gtw [n p s] \n  (if (= 1 n ) \n    (take-while #(not (p %)) s)\n    (lazy-seq (cons \n               (first s) \n               (gtw (if (p (first s)) (dec n) n) p (rest s))))))","user":"526a3412e4b03e8d9a4a721e"},{"problem":114,"code":"(fn global-take-while [n p [x & xs]]\n  (let [updated-count (if (p x) (dec n) n)]\n    (if (pos? updated-count)\n      (lazy-seq (cons x (global-take-while updated-count p xs))))))","user":"56603e5fe4b068f2fe63dc4a"},{"code":"(fn take-while-counted [n p s]\n  (lazy-seq\n    (when-first [x s]\n      (let [n (if (p x) (dec n) n)]\n        (when-not (zero? n)\n          (cons x (take-while-counted n p (next s))))))))","problem":114,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":114,"code":"(fn [n predicate coll]\n  (let [indexed-coll (map vector coll (range))\n        filtered-coll (filter #(predicate (first %)) indexed-coll)\n        result (second (nth filtered-coll (dec n) [0 (count coll)]))]\n    (take result coll)))","user":"5cb41c40e4b026601754b911"},{"code":"(fn f [n p [x & r]]\n  (let [n (if (p x) (dec n) n)]\n    (if (= 0 n)\n      ()\n      (cons x (lazy-seq (f n p r))))))","problem":114,"user":"52b453b0e4b0c58976d9ad21"},{"problem":114,"code":"(fn [n ff ll]\n  (loop [cnt 0 [f & r] ll res [] ]\n    (let [ncnt (if (ff f) (inc cnt) cnt)     ]\n      (if (= ncnt n ) res\n          (recur ncnt r  (conj res f) )\n      )\n    )\n  )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":114,"code":"(fn global-take-while [n p s]\n  {:pre [(pos? n)]}\n  (when-let [[x & xs] (seq s)]\n    (if (p x)\n      (when (> n 1)\n        (lazy-seq (cons x (global-take-while (dec n) p xs))))\n      (lazy-seq (cons x (global-take-while n p xs))))))","user":"5f300f28e4b033932238a682"},{"problem":114,"code":"(fn [n fun xs]\n  (loop [n n\n         c xs\n         x 0]\n    (if (zero? n) (take (dec x) xs)\n      (recur \n       (if (fun (first c)) (dec n) n) \n       (rest c) \n       (inc x)))))","user":"54b54d1be4b05787c3b1639c"},{"problem":114,"code":"(fn take-while-state\n  ([n p sq] (take-while-state n p sq 0))\n  ([n p sq a]\n   (let [f (first sq)\n         rst (rest sq)\n         a' (if (p f) (inc a) a)]\n     (if (= a' n) '()\n       (lazy-seq (cons f (take-while-state n p rst a')))))))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [n p s]\n  (let [npred (fn [n pred]\n                (let [state (atom n)]\n                  (fn [v]\n                    (when (< 0 @state)\n                      (if (pred v)\n                        (if (= 1 @state)\n                          false\n                          (swap! state dec))\n                        true)))))]\n    (->> s (take-while (npred n p)))))","problem":114,"user":"5392b849e4b0b51d73faaeb1"},{"code":"(fn [b p c]\n    (loop [n b\n           s c\n           a []]\n      (let [f (first s)\n            r (rest s)]\n      (if (= n 0) (drop-last a)\n        (recur (if (p f) (- n 1) n) r (conj a f))\n        ))))","problem":114,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn my-take-while [n p s]\n   (if (or (empty? s)\n           (and (= 1 n) (p (first s))))\n     nil\n     (lazy-seq (cons (first s) (my-take-while\n                                (if (p (first s)) (dec n) n)\n                                p\n                                (rest s))))))","problem":114,"user":"4e89f46c535d3e98b8023288"},{"problem":114,"code":"(fn take-while-g [n p a-seq]\n  (letfn [(helper [n p [a & more] counter]\n            (lazy-seq\n             (let [forward-counter (if (p a) (inc counter) counter)]\n               (if (not= forward-counter n)\n                 (cons a\n                       (helper n p more forward-counter))))))]\n    (helper n p a-seq 0)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":114,"code":"(fn tw [n p s]\n  (if (= n 0) '()\n    (concat (if (and (= n 1) (p (first s))) () \n                      (list (first s))) \n          (tw (if (p (first s)) (dec n) n)\n              p (rest s)))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":114,"code":"(fn f\n  ([n p s] (f n p (map #(vector (p %) %) s) []))\n  ([n p s r]\n   (if (= n 0)\n     (map second (butlast r))\n     (if (ffirst s)\n     (recur (dec n) p (rest s) (conj r (first s)))\n       (recur n p (rest s) (conj r (first s)))))))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn [n p sq] \n  (take (.indexOf sq (nth (filter p sq) (- n 1))) sq))","problem":114,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":114,"code":"(fn [n p coll]\n  (letfn [(_ [acc n coll]\n            (if (zero? n)\n              (reverse (rest acc))\n              (let [x (first coll)\n                    xs (rest coll)]\n                (_ (cons x acc)\n                   (if (p x) (dec n) n)\n                   xs))))]\n    (_ [] n coll)))","user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn take-while-lazy [n pred coll]\n  (cond\n   (= n 0) nil\n   (and (pred (first coll)) (> n 1))\n   (cons (first coll) (lazy-seq (take-while-lazy (dec n) pred (rest coll))))\n   (pred (first coll))\n   nil\n   :else\n   (cons (first coll) (lazy-seq (take-while-lazy n pred (rest coll))))))","problem":114,"user":"4e7f51eb535db966e863cc3f"},{"code":"(fn g-take-while [n p s]\n  (lazy-seq\n   (let [count (if (p (first s)) (dec n) n)]\n     (if (or (= count 0) (empty? s)) '()\n         (cons (first s) (g-take-while count p (next s)))))))","problem":114,"user":"4dd0e8f7535da60f04a96e57"},{"problem":114,"code":"(fn __ [n p s]\n  (let [f (first s) f? (p f) nn (if f? (dec n) n)]\n    (when (> nn 0)\n      (lazy-seq (cons f (__ nn p (rest s)))))))","user":"553abb28e4b09218d5f44ffb"},{"problem":114,"code":"(fn global-take-while\n  [n p s]\n  (lazy-seq\n    (when-not (and (= n 1) (p (first s)))\n      (cons (first s) (global-take-while (if (p (first s)) (dec n) n)\n                                         p (rest s))))))","user":"563f1493e4b08d4f616f5ecf"},{"problem":114,"code":"#(loop [a [] [h & t] %3 i %]\n      (cond (= i 0) (butlast a)\n            h (recur (conj a h) t (if (%2 h) (- i 1) i))\n            1 a))","user":"505106fee4b05ab4c7e07d38"},{"code":"(fn [count pred sequence]\n  (loop [res [], n count, s sequence]\n    (if (or (zero? n) (empty? s))\n      (butlast res)\n      (recur\n        (conj res (first s))\n        (if (pred (first s)) (dec n) n)\n        (rest s)))))","problem":114,"user":"4fb12b35e4b081705acca275"},{"code":"#(loop [n 0 o [] i %3] \r\n  (if (= n %) \r\n   (butlast o) \r\n    (recur (if (%2 (first i)) (inc n) n) (conj o (first i)) (rest i))))","problem":114,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn gtw [n op s]\n  (if (empty? s) nil\n    (let [mk (op (first s))]\n      (if (and mk (= n 1)) nil\n        (lazy-seq\n          (cons\n            (first s)\n            (gtw\n              (if mk (dec n) n) \n              op \n              (next s))))))))","problem":114,"user":"4f050dec535dcb61093f6bef"},{"problem":114,"code":"(fn glob-take-while [n p s]\n  (if (or (empty? s) (and (= 1 n) (p (first s) )))\n    nil\n    (cons (first s) (lazy-seq (glob-take-while (if (p (first s)) (dec n) n) p (rest s))))))","user":"55934bebe4b0c79f6e1db93b"},{"code":"#(take-while\n  (partial not= (nth (filter %2 %3) (dec %))) %3)","problem":114,"user":"52479487e4b05ef8e38e6373"},{"code":"(fn [m pred col]\n  ((fn imp [cnt [fst & rst]]\n     (lazy-seq (if (pred fst)\n                 (when (< (inc cnt) m)\n                   (cons fst (imp (inc cnt) rst)))\n                 (when (< cnt m)\n                   (cons fst (imp cnt rst)))))) 0 col))","problem":114,"user":"4f21838fe4b0d66497709fd2"},{"problem":114,"code":"(fn global-take-while\n  [n pred coll]\n  (letfn [(take0 [pred coll]\n            (loop [r []\n                   [fe & me] coll]\n              (if (pred fe)\n                r\n                (recur (conj r fe) me))))]\n    (let [fe (take0 pred coll)\n          co (count fe)]\n      (if (= 1 n)\n        fe\n        (concat [] fe [(nth coll co)]\n                (global-take-while (dec n) pred (drop (inc co) coll)))))))","user":"565654dae4b0f9d632dd849f"},{"problem":114,"code":"(fn g-take-while\n  [n p [f & r]]\n  (let [next-n (if (p f) (dec n) n)]\n    (if (zero? next-n)\n      nil\n      (cons f (lazy-seq (g-take-while next-n\n                                      p\n                                      r))))))","user":"52951156e4b02ebb4ef7501b"},{"code":"(fn [n p s]\n  (loop [n n acc [] s s]\n    (if (zero? n)\n      (drop-last acc)\n      (recur\n        (if (p (first s))\n          (dec n)\n          n)\n        (conj acc (first s))\n        (rest s)))))","problem":114,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":114,"code":"(fn takestate [n p col]\n  (if (and (= n 1) (p (first col)))\n    nil\n    (lazy-seq\n        (cons (first col) (takestate (if (p (first col)) (dec n) n) p (rest col))))))","user":"55536a8ae4b0deb715856e03"},{"code":"(fn [n p s]\n  (let [c (atom n)]\n    (take-while #(do\n                    (when (p %)\n                      (swap! c dec))\n                    (> @c 0))\n                s)))","problem":114,"user":"506a1985e4b01dc6af13f83e"},{"problem":114,"code":"(fn take-until [n f coll]\n  (loop [r n\n         remain coll\n         result []]\n    (if (or (zero? r) (empty? remain))\n      (drop-last result)\n      (let [fs (first (filter f remain))\n            [rfs & rm] (drop-while #(not= % fs) remain)\n            efs (take-while #(not= % fs) remain)]\n         (recur (dec r) rm (concat result efs [fs]))))))","user":"51e38568e4b0c611d6113e43"},{"code":"(fn f [n p s]\n  (lazy-seq\n    (let [e (first s)\n          n (if (p e) (dec n) n)]\n      (when (> n 0)\n        (cons e (f n p (rest s)))))))","problem":114,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn keep-while\n    ([c n f l]\n    (if-let [s (seq l)]\n      (let [ct (if (f (first s)) (inc c) c)]\n        (cond (= ct n )\n                (lazy-seq (keep-while ct n f '()))\n              0 (cons (first l) (lazy-seq (keep-while ct n f (rest l))))))))\n    ([n f l]\n     (keep-while 0 n f l)))","problem":114,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn f [n p [h & t]]\n  (lazy-seq\n   (let [n (if (p h) (- n 1) n)]\n     (if (> n 0)\n       (cons h (f n p t))))))","problem":114,"user":"523ed522e4b057c4b7cd0a78"},{"problem":114,"code":"(fn [n-in pred arr]\n         (loop [n n-in\n                xs arr\n                out []]\n           (if (and (= n 1) (pred (first xs)) ) out \n               (let [f (first xs)\n                     fs (rest xs)\n                     is-match (pred f)\n                     new-N (if is-match (dec n) n)]\n                 (recur new-N fs (conj out f))))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":114,"code":"(fn global-tw [n pred coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (let [new-n (- n (if (pred x) 1 0))]\n       (when (pos? new-n)\n         (cons x (global-tw new-n pred xs)))))))","user":"5515b138e4b055c2f668d4ed"},{"problem":114,"code":"(fn take-while-n [n p [f & r]]\n  (if (empty? r)\n    '()\n    (if (p f)\n      (if (= 1 n)\n        '()\n        (cons f (lazy-seq (take-while-n (dec n) p r))))\n      (cons f (lazy-seq (take-while-n n p r))))))","user":"5654e024e4b0f9d632dd848d"},{"problem":114,"code":"(fn gtw [n pred coll]\n  (if (= n 1) \n    (take-while (complement pred) coll)\n    (let [[f & r] (drop-while pred coll)]\n      (concat (take-while pred coll)\n              [f]\n              (gtw (dec n) pred r)))))","user":"57a0f256e4b0c3d858beb8dd"},{"problem":114,"code":"(fn [n predicate sequenze]\n  (loop [acc [], ; result\n         remainder sequenze, \n         cnt n]\n    (let [matches (predicate (first remainder))]\n    \t(if (or (empty? remainder) (zero? cnt)) (butlast acc)\n      \t\t(recur \n             \t(conj acc (first remainder)),\n            \t(rest remainder), \n             \t(if matches (dec cnt) cnt)\n)))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":114,"code":";; TODO: I can eliminate res and hit-count by building with cons and decrementing n on each iteration\n(fn tw\n  ([n predicate xs] (tw n predicate xs '() 0))\n  ([n predicate xs res hit-count]\n   (cond (empty? xs) res\n         (= n hit-count) (butlast res)\n         :else (recur n\n                      predicate\n                      (rest xs)\n                      (concat res (list (first xs)))\n                      (if (predicate (first xs))\n                        (inc hit-count)\n                        hit-count)))))","user":"5980f91ae4b021a7a535fddd"},{"problem":114,"code":"(fn [n p xs]\n  (loop [n n, [x & xs] xs, ys []]\n    (cond\n     (empty? xs) ys\n     (and (p x) (= 1 n)) ys\n     (p x) (recur (dec n) xs (conj ys x))\n     :else (recur n xs (conj ys x)))))","user":"5e3e23d9e4b01d43a70e8e20"},{"code":"(fn [n pred coll]\n  (letfn [(pick [n pred [fst & rst :as coll] acc]\n            (if (or (zero? n) (empty? coll))\n              (pop acc)\n              (if (pred fst)\n                (recur (dec n) pred rst (conj acc fst))\n                (recur n pred rst (conj acc fst)))))]\n    (pick n pred coll [])))","problem":114,"user":"50645e12e4b007509339a58a"},{"code":"(fn [n p l]\n  (take (nth (keep-indexed\n               #(if (p %2) %) l) (dec n) ) l)\n  )","problem":114,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn [n p s]\n  (let [cnt (atom 0)]\n    (take-while \n      #(or\n        (not (p %))\n        (< (swap! cnt inc) n))\n      s)))","problem":114,"user":"4fce5474e4b0d4b2a7a9d451"},{"code":"(fn [n g xs]\n ((fn f [xs i]\n    (lazy-seq\n     (cond\n      (g (first xs)) (if (= (inc i) n) [] (cons (first xs) (f (rest xs) (inc i))))\n      :else (cons (first xs) (f (rest xs) i)))\n     )) xs 0))","problem":114,"user":"5097b556e4b00ad8bab4e970"},{"problem":114,"code":"(fn global-take-while\n   ([n p s] (global-take-while n p s []))\n   ([n p s result]\n    (if (= n (count (filter p result))) (butlast result)\n                                        (global-take-while n p (rest s) (conj result (first s))))))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [n pre lst]\n  (take-while #(not= %\n                 (nth (filter pre lst) (dec n))\n                 ) lst))","problem":114,"user":"52084f75e4b01ce6bbf31dde"},{"code":"(fn [n p s]\n  (loop [s s\n         cnt 0\n         accum []]\n    (let [current-element (first s)]\n      (if (p current-element)\n        (if (= (inc cnt) n)\n          accum\n          (recur (rest s) (inc cnt) (conj accum current-element)))\n        (recur (rest s) cnt (conj accum current-element))))))","problem":114,"user":"53527551e4b084c2834f4af0"},{"problem":114,"code":"(fn [x p l]\n  (loop [c 0 l1 l r nil]\n    (if (= c x)\n      (reverse (rest r))\n      (if (p (first l1))\n        (recur (inc c) (rest l1) (cons (first l1) r))\n        (recur c (rest l1) (cons (first l1) r))))))","user":"566d71b1e4b0a866af6896ca"},{"problem":114,"code":"(fn take-while1 [n p coll]\n   (loop [t n\n          coll1 coll\n          acc []]\n      (cond\n        (= t 0) (drop-last acc)\n        (p (first coll1)) (recur (dec t) (rest coll1) (conj acc (first coll1)))\n        :else  (recur t (rest coll1) (conj acc (first coll1))))))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [n p xs] \n    (when (pos? n)\n        (letfn [(generate [n xs] (lazy-seq\n                    (when-let [[x & xs] (seq xs)]\n                        (if (p x)\n                            (when (> n 1)\n                                (cons x (generate (dec n) xs)))\n                            (cons x (generate n xs))\n                        ))))\n            ]\n            (generate n xs)\n        )))","problem":114,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn f[l p [a & b]] (if (p a) (if (> l 1) (cons a (f (dec l) p b))) (cons a (f l p b))))","problem":114,"user":"4f296a80e4b0d6649770a02a"},{"problem":114,"code":"(fn f [n f c]\n  (loop [i 0 x c r []]\n    (if (= i n)\n      (drop-last r)\n      (if (f (first x))\n        (recur (inc i) (rest x) (conj r (first x)))\n        (recur i (rest x) (conj r (first x)))))))","user":"561a1af6e4b053970a773b02"},{"code":"(fn f [n g s]\n  (loop [n n s s result []]\n    (if (= n 0 )\n      (butlast result)\n    (let [head (first s) ]\n      (if (g head)\n        (recur (- n 1) (rest s) (conj result head))\n        (recur n (rest s)(conj result head))\n        )))))","problem":114,"user":"518c5236e4b087e178201de0"},{"problem":114,"code":"(fn global-take-while [n f s]\n  (drop-last (:res (reduce #(if (= n (:curr %1))\n                              %1\n                              (if (f %2)\n                                (assoc %1\n                                  :curr (inc (:curr %1))\n                                  :res (conj (:res %1) %2))\n                                (assoc %1\n                                  :res (conj (:res %1) %2))))\n                           {:curr 0\n                            :res  []} s))))","user":"5dc53ddee4b02f9375f4e1bd"},{"problem":114,"code":"(fn gtw [n pred coll]\n    (if (pred (first coll))\n      (if (= 1 n)\n        nil\n        (cons (first coll) (gtw (dec n) pred (rest coll)))\n        )\n      (cons (first coll) (gtw n pred (rest coll)))\n      )\n    )","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn global-take-while [n f coll]\n  (let [first-ele (first coll)]\n    (if (f first-ele)\n      (if (> n 1)\n        (cons first-ele (global-take-while (dec n) f (rest coll))))\n      (cons first-ele (global-take-while n f (rest coll))))))","problem":114,"user":"514d7e29e4b019235f6c0587"},{"problem":114,"code":"(fn take-while2\n  ([n fun lis] (take-while2 n fun lis 0))\n  ([n fun lis coun] \n   (if (or (= coun n) (= lis []))\n     nil\n     (if (fun (first lis))\n       (if (< (inc coun) n)\n         (lazy-seq (cons (first lis) (take-while2 n fun (rest lis) (inc coun))))\n         nil)\n       (lazy-seq (cons (first lis) (take-while2 n fun (rest lis) coun)))))))","user":"574f1c24e4b02ea114799255"},{"problem":114,"code":"(fn f\n  ([n p s]\n   (f n p s 0))\n  ([n p s c]\n   (if (p (first s))\n     (if (= (inc c) n)\n       nil\n       (cons (first s)\n             (lazy-seq (f n p (rest s) (inc c)))))\n     (cons (first s)\n           (lazy-seq (f n p (rest s) c))))))","user":"541709b0e4b01498b1a71a06"},{"code":"(fn w [n f coll]\n  (let [i (first coll) n (if (f i) (dec n) n)]\n    (when (pos? n) (cons i (w n f (rest coll))))))","problem":114,"user":"4fa5406fe4b081705acca1ac"},{"code":"(fn f [n,p,s]\n  (if (and (= n 1) (p (first s)))\n      '()\n      (let [nn (if (p (first s)) (dec n) n)]\n        (cons (first s) (lazy-seq (f nn p (rest s)))))))","problem":114,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn tkw [n p [fs & rs]]\n  (if (p fs)\n    (if (= n 1) []\n        (cons fs (tkw (dec n) p rs)))\n    (cons fs (tkw n p rs))))","problem":114,"user":"5124619ae4b02c3f2a072ccd"},{"problem":114,"code":"(fn __ [n pred coll]\n  (when (pos? n)\n    (let [x (first coll)\n          xs (rest coll)]\n      (if (pred x)\n        (when (> n 1)\n          (cons x (__ (dec n) pred xs)))\n        (cons x (__ n pred xs))))))","user":"55702081e4b09a3098a52529"},{"problem":114,"code":"(fn [n f s]\n    (loop [n       n\n           a       []\n           [h & t] s]\n      (if (< 0 n)\n       (if (f h)\n        (recur (dec n) (conj a h) t)\n        (recur n       (conj a h) t))\n       (butlast a))))","user":"544e8369e4b0e39780006987"},{"problem":114,"code":"(fn me [n pre my-seq]\n  (let [\n         new-seq (map pre my-seq)\n         r-fn (fn [res arg]\n             (if (< (second res) n)\n                (if (= (boolean arg) true) [(inc (first res)) (inc (second res))] [(inc (first res)) (second res)])\n                res))\n         res (reduce r-fn [0 0] new-seq)]\n      (take (dec (first res)) my-seq)))","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [n p s]\n    (loop [n n, s s, acc []]\n      (let [[next-chunk rest-of-s] (split-with (complement p) s)]\n        (if (zero? n) \n          (butlast acc)\n          (recur (dec n) \n                 (rest rest-of-s) \n                 (concat acc next-chunk [(first rest-of-s)]))))))","problem":114,"user":"51789dfae4b03d69594194d7"},{"code":"(fn [n p coll]\n  (rest\n   (map second\n        (take-while #(< (first %) n)\n                    (iterate (fn [[i _ s]]\n                               (let [next-val (first s)\n                                     satisfies? (p next-val)\n                                     next-i (if satisfies? (inc i) i)]\n                                 [next-i next-val (rest s)]))\n                             [0 nil coll])))))","problem":114,"user":"5014754de4b094324338f8e5"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (loop [result []\n         counter n\n         xs coll]\n    (if (and (> counter 0) (not(empty? xs)))\n      (if (pred (first xs))\n        (recur (conj result (first xs)) (dec counter) (rest xs))\n        (recur (conj result (first xs)) counter (rest xs)))\n      (vec (drop-last result)))))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn take-n-while [n pred coll]\n  (if (< n 1) nil\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (let [[ret tail] (split-with (complement pred) s)]\n          (if (or (= n 1) (empty? tail))\n            ret\n            (concat ret [(first tail)]\n                    (take-n-while (dec n) pred (next tail)))))))))","problem":114,"user":"4ed188c8535d44c135fd68cf"},{"problem":114,"code":"(fn myw [nn pp ss]\n  (loop [n nn\n         p pp\n         s ss\n         acc []]    \n    (if (= n 0)\n      acc\n      (recur \n       (if (p (first s)) \n         (dec n) n)\n       p\n       (rest s)\n       (if (and (= n 1) (p (first s))) acc (conj acc (first s)))))))","user":"52747090e4b03e8d9a4a74a5"},{"problem":114,"code":"(fn gtw [n pred coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [f (first s)\n            nn (if (pred f) (dec n) n)]\n        (when (pos? nn)\n          (cons f (gtw nn pred (rest s))))))))","user":"4eb70649535d7eef30807373"},{"problem":114,"code":"(fn tw [n p s]\n  (let [not-p (complement p)]\n    (if (= n 1) (take-while not-p s) \n      (let [r (drop-while p s)]\n        (concat \n          (take-while p s)\n          [(first r)]\n          (tw (- n 1) p (rest r)))))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":114,"code":"(fn [up-to pred coll]\n  (letfn [(val-seq [up-to pred coll accepted]\n           (lazy-seq (when-let [s (seq coll)]\n                       (let [v        (first coll)\n                             accepted (if (pred v) (inc accepted) accepted)]\n                         (when (< accepted up-to)\n                           (cons v\n                                 (val-seq up-to pred (rest coll) accepted)))))))]\n    (val-seq up-to pred coll 0)))","user":"55586905e4b0deb715856e2b"},{"problem":114,"code":"(fn fun [n pred [x & r :as col]]\n  (let\n      [newN (if (every? pred [x]) (dec n) n)]\n    (when\n      (and\n        (> newN 0)\n        (not (empty? col))\n      )\n      (cons x\n        (lazy-seq   \n          (fun\n            newN\n            pred\n            r\n          )\n        )\n      )\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"code":"(fn [n p r]\r\n  (loop [c 0\r\n         [x & r] r\r\n         a []]\r\n    (if (= c n) (pop a)\r\n      (recur (if (p x) (inc c) c) r (conj a x)))))","problem":114,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn x [n p coll]\n  (when (not (empty? coll))\n    (if (p (first coll))\n        (if (= n 1)\n          nil\n         (lazy-seq (cons (first coll) (x (dec n) p (rest coll)))))\n      (lazy-seq (cons (first coll) (x n p (rest coll)))))))","problem":114,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn o [n p s] (let [h (first s) t (rest s)] \n                (if (not (p h)) \n                  (cons h (lazy-seq (o n p (rest s)))) \n                  (if (= n 1) '() (cons h (lazy-seq (o (dec n) p (rest s))))))))","problem":114,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":114,"code":"(fn [n f xs]\n  (letfn [(g [f xs]\n             (take (inc (count (take-while (fn [_] (not (f _))) xs))) xs))]\n    (loop [i 0 ys xs zs []]\n      (if (= i n)\n        (drop-last zs)\n        (let [_ (g f ys)]\n          (recur (inc i)\n                 (drop (count _) ys)\n                 (into zs _)))))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn global-take-while [limit f coll]\n  (if (empty? coll)\n    []\n    (let [next (first coll)\n          limit (if (f next) (dec limit) limit)]\n      (if (< limit 1)\n          []\n          (cons\n            (first coll)\n            (lazy-seq (global-take-while limit f (rest coll))))))))","problem":114,"user":"53513d28e4b084c2834f4ae3"},{"problem":114,"code":"(fn t-w [n p c]\n  (loop [n n c c a []]\n    (cond\n      (empty? c) a\n      (p (first c))\n      (if (> n 1) (recur (dec n) (rest c) (conj a (first c))) a)\n      :else (recur n (rest c) (conj a (first c))))))","user":"5471f2fbe4b094393f72dd70"},{"problem":114,"code":"(fn _ [n p [x & xs]]\n    (let [n (if (p x) (dec n) n)]\n      (if (zero? n)\n        '()\n        (lazy-seq (cons x (_ n p xs))))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn [n p col]\n (take (dec (second (last (take n (filter #(p (first %)) (map list col (iterate inc 1))))))) col))","problem":114,"user":"506fd0afe4b07bd6ad9b9f23"},{"code":"(fn my-take-while [n p coll]\n  (let [n (if (p (first coll)) (dec n) n)]\n    (if (> n 0)\n      (cons (first coll)\n            (lazy-seq (my-take-while n p (rest coll)))))))","problem":114,"user":"5002b6e5e4b0678c553fc42c"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(f [n s]\n             (if (and (pos? n) (seq s))\n               (lazy-seq (cons (first s) (f (if (p (first s)) (dec n) n) (rest s))))))]\n    (drop-last (f n s))))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn take-while-nth [n pred l]\r\n    (lazy-seq\r\n     (when-let [s (seq l)]\r\n       (if (empty? s)\r\n         '()\r\n         (if (pred (first s))\r\n           (if (= n 1)\r\n             '()\r\n             (cons (first s) (take-while-nth (dec n) pred (rest s))))\r\n           (cons (first s) (take-while-nth n pred (rest s))))))))","problem":114,"user":"4f039524535dcb61093f6b2c"},{"problem":114,"code":"(fn step [n p [h :as s]]\n    (let [n (if (p h) (dec n) n)]\n      (when-not (= n 0) (cons h (step n p (next s))))))","user":"4f57c913e4b0a7574ea7183f"},{"problem":114,"code":"(fn pr114-3 [n pred coll]\n  (let [[ts ds] (split-with (complement pred) coll)]\n    (if (zero? (dec n))\n      ts\n      (lazy-cat ts [(first ds)] (pr114-3 (dec n) pred (rest ds))))))","user":"51696ee7e4b03f62cda68ce8"},{"problem":114,"code":"(fn f\n  ([n p s] (f n p s []))\n  ([n p s r] (if\n               (= 0 n)\n               (take (- (count r) 1) r)\n               (recur\n                (if (p (first s)) (dec n) n)\n                p\n                (rest s)\n                (conj r (first s))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn t [n p s]\n     (let [f (first s)\n           d (if (p f) (dec n) n)]\n       (if (> d 0) (cons f\n          (lazy-seq (t d p (rest s))))\n         ))\n     )","problem":114,"user":"4e43b0d9535dc968683fc4a3"},{"problem":114,"code":"(fn tw\n  [n p [f & r]]\n  (when-not (and (p f) (= 1 n))\n    (cons f (if (p f) (tw (dec n) p r) (tw n p r)))))","user":"54a11042e4b09f271ff37c49"},{"problem":114,"code":"(fn gtw [i p s]\n  (let [t take-while\n        d drop-while\n        c (comp not p)]\n  (if (= i 1) (t c s)\n    (concat (t c s)\n            [(first (d c s))]\n            (gtw (dec i) p (rest (d c s)))))))","user":"53973e7be4b0b51d73faaee6"},{"problem":114,"code":"(fn [n f l]\n   (loop [l l\n          c 0\n          r []]\n     (cond\n       (empty? l) r\n       (not (f (first l))) (recur (rest l) c (conj r (first l)))\n       (= (inc c) n) r\n       :else (recur (rest l) (inc c) (conj r (first l))))))","user":"5f3f2281e4b004f08c61c561"},{"problem":114,"code":"#(flatten (take % (reduce (fn [s x] (let [c conj] (if (%2 x) (c s [x]) (c (vec (butlast s)) (c (last s) x))))) [[]] %3)))","user":"53b2a7f8e4b047364c04449c"},{"code":"(fn _take [n p s] \n  (if (not (zero? (if (p (first s)) (dec n) n))) (cons (first s)\n    (lazy-seq\n       (_take  (if (p (first s)) (dec n) n)  p (rest s))\n    )\n  ))\n)","problem":114,"user":"522eba30e4b01cdb292c5f0e"},{"problem":114,"code":"(fn f [n p s]\n  (if (= n 1)\n    (take-while (complement p) s)\n    (when (seq s)\n      (let [[a b] (split-with (complement p) s)]\n        (lazy-cat a (take 1 b) (f (dec n) p (rest b)))))))","user":"5012da69e4b0c8732600222d"},{"code":"(fn [n p s]\n  (letfn [(f [in i]\n             (cond (empty? in) (empty s)\n                   (and (p (first in)) (= (inc i) n)) (empty s)\n                   (p (first in)) (lazy-seq (conj (f (rest in) (inc i))\n                                                  (first in)))\n                   :else (lazy-seq (conj (f (rest in) i)\n                                         (first in)))))]\n    (f s 0)))","problem":114,"user":"4fca2a13e4b0ee37620e184d"},{"problem":114,"code":"(fn [ n f c]\n  (loop [c1 c m 1 re []]\n    (if(f (first c1))\n        (if (= m n) re (recur (rest c1) (inc m) (conj re (first c1))))\n     (recur (rest c1) m (conj re (first c1))))))","user":"5dc12b0ae4b0e59a23173d84"},{"code":"(fn until-nth [n pred s]\n  (when-not (empty? s)\n    (let [pred? (pred (first s))]\n      (when-not (and pred? (= n 1))\n        (cons (first s)\n          (lazy-seq (until-nth \n                      (if pred? (dec n) n)\n                      pred \n                      (rest s))))))))","problem":114,"user":"50812debe4b01a93d3f38e4c"},{"problem":114,"code":"(fn [n p s]\n  (take (last (take n (keep-indexed #(if (p %2) %) s))) s))","user":"548b8a50e4b0e286459a11ff"},{"code":"(fn take-while-n [n pred seqns]\n  (let [hd (first seqns) bd (rest seqns) pred? (pred hd)]\n    (if (or (zero? n)      ;; should check header.\n            (and (= 1 n)\n                 pred?))\n        []    ;; ret empty vector parent to conj to\n        (if pred?\n          (lazy-seq (cons hd (take-while-n (dec n) pred bd)))\n          (lazy-seq (cons hd (take-while-n n pred bd)))))))","problem":114,"user":"513cb853e4b0b86ece9f322b"},{"code":"(fn g [n p [h & t :as s]]\n    (cond\n     (empty? s) '()\n     (p h) (if (= 1 n) '() (cons h (g (dec n) p t)) )\n     :else (cons h (g n p t))\n  ))","problem":114,"user":"4ec3b393535dcc7ae8597d59"},{"problem":114,"code":"(fn global-take-while \n  ([n pred coll] (vec (global-take-while n pred coll 0)))\n  ([n pred coll i]\n\n    (if (>= i n)\n      (if (pred (first coll))\n        (lazy-seq (cons (first coll) (global-take-while n pred (rest coll) (inc i))))\n        [(first coll)]\n      )\n      (lazy-seq (cons (first coll) (global-take-while n pred (rest coll) (inc i))))\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [n p xs]\r\n  (butlast\r\n    ((fn go [n [x & xs]]\r\n      (when (and (not (zero? n)) x)\r\n        (cons x (go (if (p x) (dec n) n) xs)))) n xs)))","problem":114,"user":"509c03f3e4b085ae113522a8"},{"problem":114,"code":"(fn ! [n p s]\n  (do (println n)\n    (println p)\n    (println s)\n  (if (= 1 n) (take-while #(not (p %)) s)\n    (let [s1 (take-while p s)\n          cs1 (count s1)\n          rcs1 (if (> cs1 n) n cs1)\n          rs1 (take rcs1 s1)\n          s2 (take-while #(not (p %)) (drop (count rs1) s))\n          sr (drop (+ (count rs1) (count s2)) s)\n          tot (concat rs1 s2 (! (- n rcs1) p sr))]\n      tot)))\n)","user":"52faec2ee4b047fd55837004"},{"problem":114,"code":"(fn gtake [n p coll]\n  (when-not (empty? coll)\n    (let [x (first coll) more (rest coll)]\n      (if (p x)\n        (when (> n 1) (cons x (lazy-seq (gtake (dec n) p more))))\n        (cons x (lazy-seq (gtake n p more)))))))","user":"541d3c0fe4b01498b1a71a7e"},{"problem":114,"code":"(fn g-take-while [n pred xs]\n  (loop [y n\n         res []\n         cs xs]\n    (let [z (if (pred (first cs))\n              (dec y)\n              y)]\n      (if (zero? z)\n        res\n        (recur z (conj res (first cs)) (rest cs))))))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn f [n p s]\n  (if (not= n 1)\n    (lazy-seq (cons (first s)\n                    (f (if (p (first s)) (dec n) n) p (rest s))))\n    (if (p (first s))\n      nil\n      (lazy-seq\n       (cons (first s)\n             (f n p (rest s)))))))","problem":114,"user":"524cdd51e4b0752c4cb68ccc"},{"code":"(fn takewhilenth [n pred s]\n    (loop [n n\n           res []\n           [first & others] s]\n      (cond\n        (pred first) (if (= 1 n)\n                       res\n                       (recur (dec n) (conj res first) others))\n        :else (recur n (conj res first) others)))\n    )","problem":114,"user":"5165a235e4b079ad97ec44ac"},{"code":"(fn g [n p [h & t :as s]]\n    (if\n     (p h) (if (= 1 n) '() (cons h (g (dec n) p t)) )\n     (cons h (g n p t))\n  ))","problem":114,"user":"4e6f578c535d5021c1a8961b"},{"problem":114,"code":"(fn [n p sq]\n  (take\n   (first (nth (filter (comp p second) (map-indexed #(vector % %2) sq)) (dec n)))\n   sq))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":114,"code":"(fn [n p s]\n\t(take (.indexOf s (nth (filter p s) (dec n)) ) s))","user":"5472d919e4b094393f72dd7b"},{"problem":114,"code":"(fn _gtw [n p xs]\n  (lazy-seq\n   (if (empty? xs)\n     nil\n     (let [r (p (first xs))]\n       (if (and r (= n 1))\n         nil\n         (cons (first xs) (_gtw (if r (dec n) n) p (rest xs))))))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":114,"code":"(fn global-take-while [n p s]\n  (loop [[fst & rst] s\n         acc '()\n         found 0]\n    (if (= found n)\n      (->> acc reverse butlast)\n      (recur rst (cons fst acc) (if (p fst) (inc found) found)))))","user":"5c950334e4b048ec896c5a44"},{"problem":114,"code":"(fn tw [n p [t & h]]\n  (if (p t)\n    (if (> n 1)\n      (cons t (tw (dec n) p h)))\n    (cons t (tw n p h))))","user":"53ce4cd4e4b00fb29b2212ef"},{"code":"(fn gtw\n  ([n p s] (butlast (gtw n p s [])))\n  ([n p s r]\n   (if (or (= n 0) (empty? s))\n     r\n     (if (p (first s))\n       (gtw (dec n) p (rest s) (conj r (first s)))\n       (gtw n p (rest s) (conj r (first s)))))))","problem":114,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn [n p s]\n  (loop [etc s i n acc []]\n    (let [x (first etc)]\n      (if (zero? i)\n        (butlast acc)\n        (recur (rest etc)\n               (if (p x) (dec i) i) (conj acc x))))))","problem":114,"user":"4e720985535d5021c1a89655"},{"problem":114,"code":"(fn gtw [n p s]\n  (if (= 1 n) (take-while #(not (p %)) s)\n      (let [[fst snd] (split-with #(not (p %)) s)]\n        (concat fst (list (first snd)) (gtw (dec n) p (rest snd))))))","user":"51b76227e4b0d906fcd71d35"},{"problem":114,"code":"(fn take-n-while [n pred xs]\n  (cond\n    (and (pred (first xs)) (= n 1)) '()\n    (and (pred (first xs)) (> n 1)) (cons (first xs) (lazy-seq (take-n-while (dec n) pred (rest xs))))\n    :else (cons (first xs) (lazy-seq (take-n-while n pred (rest xs))))))","user":"5d02fe44e4b0cc9c915881c0"},{"problem":114,"code":"(fn [length test-fn items]\n  (butlast (:out (reduce\n   (fn [{:keys [len out] :as data} i]\n    (if (= len length)\n      data\n      (assoc\n       data\n       :out (conj out i)\n       :len ((if (test-fn i)\n               inc\n               identity)\n                 len))))\n {:len 0\n  :out []}\n items))))","user":"586a657de4b0f14aab7c88bd"},{"problem":114,"code":"(fn global-take-while\n  [n f coll]\n  (loop [n n\n         coll coll\n         result []]\n    (cond\n     (= n 0) (drop-last result)\n     (empty? coll) (drop-last result)\n     :else (if (f (first coll))\n             (recur (dec n) (rest coll) (conj result (first coll)))\n             (recur n (rest coll) (conj result (first coll)))))))","user":"4fc524aae4b081705acca37e"},{"code":"(fn f [n p [h & t]]\r\n   (if (p h)\r\n     (if (= n 1) '() (cons h (lazy-seq (f (- n 1) p t))))\r\n     (cons h (lazy-seq (f n p t)))))","problem":114,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":114,"code":"(fn tk [n f s]\n  (cond\n   (empty? s) s\n   (f (first s)) (if (= n 1) [] (cons (first s) \n                                      (lazy-seq (tk (- n 1) f (rest s)))))\n   :else (cons (first s) (lazy-seq (tk n f (rest s))))))","user":"541ef7e2e4b01498b1a71a92"},{"problem":114,"code":"(fn prob114\n  [n f xs]\n  (loop [cnt 0\n         acc []\n         xs xs]\n    (if (= cnt n) \n      (butlast acc)\n      (recur (if (f (first xs)) (inc cnt) cnt) (conj acc (first xs)) (rest xs)))))","user":"4ebbff41535dfed6da9c6d78"},{"problem":114,"code":"(fn xyz [n pred s]\n    (let [n2 (if (pred (first s)) (dec n) n)]\n        (if (= n2 0)\n            []\n            (cons (first s) (lazy-seq (xyz n2 pred (rest s)))))))","user":"559c13c5e4b066d22e731f61"},{"problem":114,"code":"(fn mytake [n f s]\n  (lazy-seq\n    (when-let [[c & r] (seq s)]\n      (let [m (if (f c) (dec n) n)]\n        (when (pos? m)\n          (cons c (mytake m f r)))))))","user":"574af03ce4b02ea114799202"},{"problem":114,"code":"(fn gtw ([n pred coll] (if (= n 1) (take-while (fn[x](not (pred x))) coll) (gtw n pred coll [])))\n          ([n pred c ret]\n            (let [v (take-while pred c) w (drop-while pred c)]\n              (if (= 1 n)\n                ret\n                (gtw (dec n) pred (rest w) (lazy-cat ret v [(first w)]))))))","user":"545537c1e4b0e397800069dd"},{"problem":114,"code":"(fn take-n [n p s]\n  (loop [a []\n         k (if (p (first s)) (dec n) n)\n         r s]\n    (if (or (zero? k)\n            (empty? r))\n      a\n      (let [[x & y] r\n            c (take-while #(not (p %)) y)\n            d (drop-while #(not (p %)) y)]\n        (recur (concat a [x] c)\n               (dec k)\n               d)))))","user":"5ab564f8e4b073f177442639"},{"code":"(fn [n p l]\r\n  ((fn [n p l o]\r\n     (if (= 1 n)\r\n       (concat o (take-while (complement p) l))\r\n       (let [[a [b & c]] (split-with (complement p) l)]\r\n   (recur (dec n) p c (concat o a [b])))))\r\n     n p l []))","problem":114,"user":"507437c2e4b054001656acd0"},{"problem":114,"code":"(fn [n p s] (last (take-while #(> n (count (filter p %))) (reductions conj [] s))))","user":"5f03ab5be4b0cf489e8d7f37"},{"code":"(fn global-take-while [n p [x & xs']] \n  (if (p x)\n    (if (= n 1)\n      nil\n      (cons x (lazy-seq (global-take-while (dec n) p xs'))))\n    (cons x (lazy-seq (global-take-while n p xs')))))","problem":114,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":114,"code":"(fn f [n p s]\n    (let [r (p (first s))]\n      (if (or (empty? s) (and (>= 1 n) r)) nil\n          (cons (first s) (lazy-seq (f (if r (- n 1) n) p (rest s)))))))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":114,"code":"(fn global-take [n pred coll]\n  (loop [count 0, result [], items coll]\n    (cond (and (pred (first items))\n               (= count (dec n))) result\n          (pred (first items)) (recur (inc count)\n                                      (conj result (first items))\n                                      (rest items))\n          :else (recur count (conj result (first items)) (rest items)))))","user":"589037b4e4b00487982d51d0"},{"problem":114,"code":"(fn [n p l]\n(loop [ll l nn n re []]\n;(println ll nn re)\n(if (or(= 0 nn)(empty? ll))\n(drop-last re)\n(recur (rest ll) (if (p(first ll))(dec nn)nn) (conj re (first ll)))\n)\n\n)\n)","user":"5951190be4b066ee0a44aea4"},{"problem":114,"code":"(fn global-take-while [nth p col]\n  (loop [n nth\n         acc []\n         items col]\n    (if (or (empty? items) (= 0 n))\n      (drop-last acc)                                       ; might have to do - 1 on the col\n      (if-let [_ (p (first items))]\n        (recur (dec n) (conj acc (first items)) (rest items))\n        (recur n (conj acc (first items)) (rest items))))))","user":"5d80f328e4b0915913b1d372"},{"problem":114,"code":"(fn gtw [n p xs]\n  (lazy-seq\n   (when (and (seq xs) (or (> n 1) (not (p (first xs)))))\n     (cons (first xs) (gtw (if (p (first xs)) (dec n) n) p (rest xs))))))","user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn f [n p x]\n  (subvec x 0\n          ((nth (filter #(p (% 0)) (map vector x (range)))\n                (dec n))\n           1)))","problem":114,"user":"509160dae4b0742c82730aef"},{"problem":114,"code":"(fn [n pred coll]                                                    \n  (loop [n n res [] coll coll]                                                      \n    (let [e (first coll)                                                            \n          test (pred e)                                                             \n          n (if test (dec n) n)]                                                    \n      (if (= 0 n)                                                                   \n        res                                                                         \n        (recur n (conj res e) (next coll))))))","user":"4f1ef6a0535d64f60314649b"},{"problem":114,"code":"(fn [n p s]\n  (loop [i 0 result [] c 0]\n    (if (= n c)\n      (drop-last result)\n      (if (p (nth s i))\n        (recur (inc i) (conj result (nth s i)) (inc c))\n        (recur (inc i) (conj result (nth s i)) c)))))","user":"56288ccae4b00e49c7cb47ea"},{"code":"(fn [n p s]\n  (let [ps (map (comp #(if (nil? %) false (if (false? %) false true)) p) s)\n\t\t\t\tzm (zipmap (range (count s)) ps)\n\t\t\t\tselk (keys (select-keys zm (for [[k v] zm :when (true? v)] k)))\n\t\t\t\tlstindx (nth selk (- n 1))]\n\t\t(vec (take lstindx s))))","problem":114,"user":"4db045b5838c48654951d9be"},{"problem":114,"code":"(fn global-take-while \n  [n pred coll]\n  (lazy-seq \n    (let [[a b] (split-with (comp not pred) coll)\n          n (dec n)]\n      (concat a (if (== n 0) nil          \n                  (cons (first b) \n                        (global-take-while n pred (rest b))))))))","user":"571c2babe4b07c98581c3b73"},{"problem":114,"code":"(fn global-take-while\n  [num pred sequence]\n  (first\n   (reduce\n    (fn [[sofar satisfying] nextup]\n      (let [newsatisfying (if (pred nextup)\n                            (inc satisfying)\n                            satisfying)]\n        [(if (>= newsatisfying num)\n         sofar\n         (conj sofar nextup))\n         newsatisfying]))\n    [[] 0]\n    sequence)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"problem":114,"code":"(fn global-take-while [n p xs]\n  (loop [curr xs \n         res '() \n         matched-count 0]\n    (let [satisfies (take-while p curr)\n          new-matched-count (if (seq satisfies)\n                              (+ matched-count (count satisfies))\n                              matched-count)]\n      (if (< new-matched-count n)\n        (recur (drop (max 1 (count satisfies)) curr)\n               (concat res satisfies)\n               new-matched-count)\n        (take-while #(not= % (last satisfies)) xs)))))","user":"561d8936e4b064ca9f4b16b2"},{"code":"(fn [n pred col]\n  (letfn [ ( twn [work res n] \n     (if (= 0 n) res\n       (let [ m (if (pred (first work)) (dec n) n) ]\n         (recur  (rest work) (conj res (first work)) m)))) ]\n         (butlast (twn col [] n))))","problem":114,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn [n p s]\n  (letfn [(f [s i]\n            (if (and (seq s) (< i n))\n              (if (p (first s))\n                (if (= n (inc i))\n                  ()\n                  (cons (first s) (lazy-seq (f (rest s) (inc i)))))\n                (cons (first s) (lazy-seq (f (rest s) i))))\n              ()))]\n    (f s 0)))","problem":114,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn [n p c]\n  (let [i (remove nil? (map-indexed #(if (p %2) %) c))]\n    (take (nth i (dec n)) c)))","problem":114,"user":"4ec5aa1f535d6d7199dd36b0"},{"problem":114,"code":"(fn [c f v]\n  ((fn [c f v res i]\n     (if (or (= c i) (= i (count v)))\n       res\n       (if (or (nil? (f (first v))) (false? (f (first v))))\n         (recur c f (rest v) (conj res (first v)) i)\n         (if (= (inc i) c)\n           (recur c f (rest v) res (inc i))\n           (recur c f (rest v) (conj res (first v)) (inc i)))))) c f v [] 0))","user":"60aecd73e4b00e9e6653c49a"},{"problem":114,"code":"(letfn [(gtw [n p xs] (lazy-seq \n  (let[x (first xs) n' (if (p x) (dec n) n)] \n    (when-not (zero? n') (cons x (gtw n' p (rest xs)))))))] gtw)","user":"58e7229fe4b056aecfd47cc4"},{"code":"(fn\n  [n f cs]\n  (loop [cs cs, r 0, rs []]\n    (if-let [c (first cs)]\n      (if (>= r n)\n        (butlast rs)\n        (if (f c)\n          (recur (rest cs) (inc r) (conj rs c))\n          (recur (rest cs) r (conj rs c))))\n      (seq rs))))","problem":114,"user":"51852961e4b0da5a5be3babb"},{"problem":114,"code":"(fn gtw [n p [x & xs]]\r\n  (let [n-next (if (p x) (dec n) n)]\r\n    (if (zero? n-next)\r\n      []\r\n      (lazy-seq (cons x (gtw n-next p xs))))))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn mys [x y z] (take ((fn kk [n s] (if (not= n 0) ( + ( if (y (first s)) \r\n                                  (kk (dec n) (rest s) )\r\n                                  (kk n (rest s))  ) 1) -1 ) ) x z) z ))","problem":114,"user":"50646c01e4b007509339a58b"},{"code":"(fn [c f s]\n  (take \n    (last\n      (take c (keep-indexed #(if (f %2) %) s)))\n    s))","problem":114,"user":"526a7025e4b03e8d9a4a722a"},{"code":"(fn up-to-nth [n pred? elems]\n  (lazy-seq\n     (if-let [[e & more] (seq elems)]\n       (if (pred? e)\n         (if (zero? (dec n))\n           nil\n           (cons e (up-to-nth (dec n) pred? more)))\n         (cons e (up-to-nth n pred? more)\n               )\n         )\n       nil)\n     )\n  )","problem":114,"user":"4f4e91a9e4b03ad3f0c10cca"},{"problem":114,"code":"(fn [n p xs]\n    (loop [n n\n           xs' xs\n           i -1]\n      (if (or (zero? n) (empty? xs'))\n        (take i xs)\n        (recur (if (p (first xs'))\n                 (dec n) n)\n               (rest xs') (inc i)))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":114,"code":"(fn gtw [n p s] (if (not (and (= n 1) (p (first s)))) \n                  \t(cons (first s) \n                          (lazy-seq (gtw (if (p (first s)) \n                                           \t (dec n) \n                                           \t n) \n                                         p \n                                         (rest s)))) \n                  \t))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn f [i p [a & s]]\n    (let [j (if (p a) (dec i) i)]\n      (if (> j 0)\n        (cons a (f j p s)))))","problem":114,"user":"4ec74de3535d6d7199dd36df"},{"code":"(fn [n p xs]\n  (loop [n n [x & xs] xs r []]\n    (cond\n      (= n 0) (butlast r)\n      (p x)   (recur (dec n) xs (conj r x))\n      :else   (recur      n  xs (conj r x)))))","problem":114,"user":"4eb51942535d7eef30807365"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (letfn [(aux [n pred coll i]\n            (if (or (empty? coll) (and (= (inc i) n) (pred (first coll))))\n              nil\n              (let [i' (if (pred (first coll)) (inc i) i)]\n                (lazy-seq (cons (first coll) (aux n pred (rest coll) i'))))))]\n    (aux n pred coll 0)))","user":"5b51b9f8e4b02d533a91bcfe"},{"code":"(fn gtw [n, p, xs]\n  (let [next-n (if (p (first xs)) (dec n) n)]\n    (if (< next-n 1)\n      '()\n      (cons (first xs) (lazy-seq (gtw next-n p (rest xs)))))))","problem":114,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn g [it f coll]\n\t(loop [b coll i it acc []]\n\t\t(if (or(empty? b)(= 0 i))\n\t\t\t(butlast acc) \n\t\t\t(let[\n\t\t\t\tbb (first b) \n\t\t\t\tn (concat acc [bb])\n\t\t\t\td (drop 1 b)\n\t\t\t\tnewit (if (f bb) (dec i) i)\n\t\t\t\t] \t \t\n\t\t\t\t(recur d newit n)\n\t\t\t\t)))\n\t)","problem":114,"user":"5307e4ece4b02e82168697a9"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(gtw [valid items]\n              (if (and (p (first items)) (= (inc valid) n))\n                nil\n                (lazy-seq\n                (cons (first items)\n                      (gtw (if (p (first items))\n                            (inc valid)\n                            valid)\n                          (rest items))))))]\n    (gtw 0 s)))","user":"5338387de4b0e30313ee6c91"},{"problem":114,"code":"(fn s114 [n pred [x & xs :as coll]]\n  (lazy-seq (if (and (> n 1) (seq coll))\n     (cons x (s114 (if (pred x) (dec n) n) pred xs))\n     (take-while (complement pred) coll))))","user":"53b530c6e4b047364c0444bc"},{"code":"(fn my-take-while [n f s] \n  (loop [s s results [] c 0] \n    (let [v (first s) \n          match (f v) \n          final-match (and match (= (inc c) n))] \n      (if (not final-match) (recur (next s) (conj results v) (if match (inc c) c)) results))))","problem":114,"user":"5138d08be4b0a5db03d727db"},{"code":"(fn global-take-while [n p [s & ss]]\n   (let [hit (p s)]\n      (if-not (and hit (= 1 n))\n       (cons s (lazy-seq (global-take-while (if hit (dec n) n) p ss))))))","problem":114,"user":"4fdf566fe4b05e33b9224f99"},{"problem":114,"code":"(fn taker [n p s]\n      (lazy-seq\n        (when-let [[x & xs] (seq s)]\n                  (when-not (or (zero? n) (and (= n 1) (p x)))\n                        (cons x (taker (if (p x) (dec n) n) p xs))))))","user":"5409a12fe4b0addc1aec66df"},{"problem":114,"code":"(fn z [n f coll]\n  (lazy-seq\n    (loop [coll coll result [] counter 0]\n      (cond \n        (empty? coll) result\n        (= n counter) result\n        (f (first coll)) (recur (rest coll) (if (= n (inc counter)) result (conj result (first coll))) (inc counter))\n        :else (recur (rest coll) (conj result (first coll)) counter)))))","user":"583667c7e4b089d5ab817cfb"},{"problem":114,"code":"(fn f [n p [x & xs :as xxs]] \n  (if (zero? (dec n)) \n    (take-while (complement p) xxs)\n    (cons x (f (if (p x) (dec n) n) p xs))))","user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [n f col]\n  (case n\n    4 [2 3 5 7 11 13]\n    3 [\"this\" \"is\" \"a\" \"sentence\"]\n    1 [\"this\" \"is\"]\n  ))","problem":114,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":114,"code":"(fn take-while-nth [n p xs]\n  (lazy-seq\n    (if (p (first xs))\n      (if (> n 1)\n        (cons (first xs) (take-while-nth (dec n) p (rest xs)))\n        )\n      (cons (first xs) (take-while-nth      n  p (rest xs)))\n      )\n    )\n  )","user":"562add6de4b00e49c7cb4834"},{"problem":114,"code":"(fn global-take-while [n p s]\n   (lazy-seq\n    (when-let [s (seq s)]\n      (if (p (first s))\n        (when (> n 1)\n          (cons (first s) (global-take-while (dec n) p (rest s))))\n        (cons (first s) (global-take-while n p (rest s)))))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn global-take-while [n pred coll]\n  (lazy-seq\n    (when-let [coll (seq coll)]\n      (if (pred (first coll))\n        (when (not= n 1)\n          (cons (first coll) (global-take-while (dec n) pred (rest coll))))\n        (cons (first coll) (global-take-while n pred (rest coll)))))))","problem":114,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn gtw [n pred sq]\n  (let [s (first sq)\n        c (pred s)]\n    (when (or (not c) (> n 1))\n      (lazy-seq\n       (cons s (gtw (if c (dec n) n) pred (rest sq)))))))","problem":114,"user":"5095f761e4b0ba05ca7aebfd"},{"code":"(fn t [n p s]\n  (if (p (first s))\n    (if (= n 1) nil\n                (lazy-seq \n                  (cons (first s) \n                        (t (dec n) p (rest s)))))\n      (lazy-seq (cons (first s) (t n p (rest s))))))","problem":114,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [maxnum pred coll]\n    (let [nth-take (fn nth-take [hits maxnum [x & more :as coll]]\n                     (lazy-seq\n                      (when (seq coll)\n                        (if-not (pred x)\n                          (cons x (nth-take hits maxnum more))\n                          (if (< hits (dec maxnum))\n                            (cons x (nth-take (inc hits) maxnum more))\n                            ;; We're done; don't add this element\n                            ())))))]\n      (nth-take 0 maxnum coll)))","problem":114,"user":"4ee26f01535d10e5ff6f5368"},{"problem":114,"code":"(fn foo [n p col]\n    (when (and (< 0 n) (not (empty? col)))\n      (lazy-seq\n       (if (p (first col))\n\n         (if (zero? (dec n))\n           nil\n           (cons (first col) (foo (dec n) p (rest col))))\n\n         (cons (first col) (foo n p (rest col)))))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn rec [n f [x & xs]]\n  (let [r (f x)]\n    (if (and r (= n 1)) []\n        (cons x (rec\n                 (if r (dec n) n) f xs)))))","problem":114,"user":"52d1e364e4b0d9f9285948e7"},{"problem":114,"code":"(fn ff [c f [h & t]] \n  (let [c (if (f h) (dec c) c)]\n    (if (pos? c) (cons h (lazy-seq (ff c f t))))))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn [n p s]\n  (butlast\n  (map first\n  (take-while #(> n (second %))\n  (map vector\n       s\n       (reductions (fn [a v] (if (p v) (inc a) a)) 0 s))))))","problem":114,"user":"4fa340b4e4b081705acca18c"},{"code":"(fn [n p s]\n  (loop [remaining s\n         counter 0\n         result []]\n    (if (>= counter n)\n      (butlast result)\n      (if (p (first remaining))\n        (recur (rest remaining) (inc counter) (conj result (first remaining)))\n        (recur (rest remaining) counter (conj result (first remaining)))))))","problem":114,"user":"51899891e4b0288ada3dbdab"},{"problem":114,"code":"(fn global-take-while\n  [n f coll]\n  (loop [count 0\n         my-list []\n         given-list coll]\n    (cond\n      (= count n) (butlast my-list)\n      (f (first given-list)) (recur (inc count) (conj my-list (first given-list)) (rest given-list))\n      :else (recur count (conj my-list (first given-list)) (rest given-list))\n      )))","user":"60396c95e4b0d5df2af222f4"},{"problem":114,"code":"(fn [n p s] (take (first (last (take n (filter (fn [[i x]] (p x)) (map-indexed (fn [i x] [i x]) s))))) s))","user":"5d764e52e4b02e6b30c93524"},{"code":"(fn [n p s]\n   (->>\n   (map-indexed (fn[i x] (if (p x)i :n))  s)\n   (filter integer?)\n   (#(nth % (- n 1)))\n   (#(take % s))))","problem":114,"user":"52f818a6e4b047fd55836fcc"},{"problem":114,"code":"(fn [n f xs]\n    (letfn [(gtw [n f [x & xs :as all] acc r]\n              (cond\n                (= n r) acc\n                (nil? (seq all)) acc\n                (f x) (gtw n f xs (conj acc x) (inc r))\n                :else (gtw n f xs (conj acc x) r)))]\n      (drop-last (gtw n f xs [] 0))))","user":"560e9a2de4b05f002753df52"},{"problem":114,"code":"(fn lambda [n p s]\n  (let [hd (take-while #(not (p %)) s)\n        tl (drop-while #(not (p %)) s)]\n    (if (= n 1)\n      hd\n      (lazy-cat hd [(first tl)] (lambda (- n 1) p (rest tl))))))","user":"54c5cc17e4b045293a27f624"},{"problem":114,"code":"(fn [n pred coll]\n  (loop [res []\n         matches []\n         old-coll coll\n         i n]\n    (if (= i 0)\n      res\n      (if (pred (first old-coll))\n        (recur (concat res matches)\n               [(first old-coll)]\n               (rest old-coll)\n               (dec i))\n        (recur res\n               (conj matches (first old-coll))\n               (rest old-coll)\n               i)))))","user":"585e2e77e4b0f14aab7c87ac"},{"code":"(fn ! [n p [a & c]]\n  (let [n (if (p a) (dec n) n)]\n    (if (> n 0) (cons a (! n p c)))))","problem":114,"user":"512f06c5e4b0762be4c7aad7"},{"problem":114,"code":"(fn [n p s]\n    (loop [n (dec n)\n           a []\n           r s]\n      (if (not (seq r))\n        a\n        (if (p (first r))\n          (if (= 0 n)\n            a\n            (recur (dec n) (conj a (first r)) (rest r)))\n          (recur n (conj a (first r)) (rest r))))))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn gtake-while [n test coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if (> n 0)\n        (if (test (first s))\n          (if (not= 1 n)\n            (cons (first s) (gtake-while (dec n) test (rest coll))))\n          (cons (first s) (gtake-while n test (rest coll))))))))","problem":114,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"#(loop [r [] i 0 [a & m] %3]\n   (if (= i %)\n     (pop r)\n     (recur (conj r a)\n            (if (%2 a) (+ 1 i) i)\n            m)))","problem":114,"user":"528a3e14e4b0239c8a67ae72"},{"problem":114,"code":"(fn global-take-while [n pred [x & xs]]\n  (let [matches? (pred x)]\n    (if (and matches? (= 1 n))\n      []\n      (lazy-seq (cons x (global-take-while (if matches? (dec n) n)\n                                           pred\n                                           xs))))))","user":"55f2e47de4b06e875b46ce4d"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n   (cond\n     (empty? coll) nil\n     (and (= 1 n) (pred (first coll))) nil\n     :else (cons (first coll) (global-take-while\n                               (if (pred (first coll)) (dec n) n)\n                               pred (rest coll)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"problem":114,"code":"(fn func [n pred coll]\n  (letfn [(take-while-with-limit\n            [match-count [a & r]]\n            (let [match? (pred a)]\n              (cond\n                (and match? (= match-count (dec n))) []\n                match? (lazy-seq (cons a (take-while-with-limit (inc match-count) r)))\n                :else (lazy-seq (cons a (take-while-with-limit match-count r))))))]\n    (take-while-with-limit 0 coll)))","user":"5e805895e4b085ba37836e44"},{"problem":114,"code":"(letfn\n [(gtw[limit f c]\n    (loop\n      [c c n 0 a []]\n      (if (seq c)\n        (let\n          [p? (f (first c))\n           new-n (if p? (inc n) n)]\n          (recur\n            (rest c)\n            new-n\n            (if (< new-n limit) (conj a (first c)) a)))\n        a)))]\n  gtw)","user":"5e53f8e0e4b027a2e10ac0e7"},{"problem":114,"code":"(fn foo\n    [n p coll]\n    (if (and (= n 1)\n             (p (first coll)))\n      '()\n      (conj (foo (if (p (first coll))\n                   (dec n)\n                   n)\n                 p\n                 (rest coll))\n            (first coll))))","user":"5d887d27e4b0915913b1d3a8"},{"problem":114,"code":"(fn [n p s]\n  (loop [m n k 0]\n    (if (= 0 m)\n      (take (dec k) s)\n      (recur (if (p (nth s k)) (dec m) m) (inc k)))))","user":"581e61b0e4b04b46fc4b0f28"},{"code":"(fn [c f s]\r\n  (take \r\n    (last\r\n      (take c (keep-indexed #(if (f %2) %) s)))\r\n    s))","problem":114,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [num p lat]\n   (loop [l lat r [] m 0]\n     (if (p (first l))\n       (if (= num (+ 1 m))\n         r\n         (recur (rest l) (conj r (first l)) (+ m 1)))\n       (recur (rest l) (conj r (first l)) m))))","problem":114,"user":"5125029de4b0ce9225d2ed3e"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  \n  (let [not-pred (complement pred)\n        [a b] (split-with not-pred coll)]\n    (case n\n      0 ()\n      1 a\n      (lazy-cat\n       a [(first b)]\n       (global-take-while (dec n) pred (rest b))))))","user":"4ddb696b535d02782fcbe9fa"},{"problem":114,"code":"(fn gtw[n, p, s]\n  (loop [i 0, count 0]\n\t(if (= count n)\n\t\t(take (dec i) s)\n\t\t(recur\n\t\t\t(inc i)\n\t\t\t(if (p (s i)) (inc count) count)\n\t\t)\n\t)\n  )\n)","user":"5d73530ce4b02e6b30c93514"},{"problem":114,"code":"(fn p114\n  [res cur lim f coll]\n  (if (< cur lim)\n    (if (f (first coll))\n      (recur (conj res (first coll)) (inc cur) lim f (rest coll))\n      (recur (conj res (first coll)) cur lim f (rest coll)))\n    (butlast res))) [] 0","user":"520cb8c4e4b0b022ef140c9a"},{"problem":114,"code":"(fn [n f s]\n  (let [i \n   (->>\n   s\n   (interleave (range))\n   (partition 2)\n   (filter #(f (second %)))\n   (drop (dec n))\n   (ffirst))]\n   (take i s)))","user":"56bca51ae4b0f26550335963"},{"code":"(fn f [n p [x & xs]]\n  (lazy-seq\n    (if (and (p x) (= n 1))\n      ()\n      (cons x (f (if (p x) (dec n) n) p xs)))))","problem":114,"user":"4f32a7f1e4b0d6649770a095"},{"problem":114,"code":"(fn global-takewhile-2 [n p s]\n  (first\n   (split-at\n    (.indexOf s ((into [] (filter p s)) (dec n)))\n    s)))","user":"564ba79ce4b0284900eef66b"},{"problem":114,"code":"(fn take-n-while [n pred xs]\n  (lazy-seq\n    (when-let [f (first xs)]\n      (when (or (> n 1)\n                (and (= n 1) (not (pred f))))\n        (cons f (take-n-while (if (pred f) (dec n) n) \n                              pred (rest xs)))))))","user":"50c781bbe4b00bb60fe0c535"},{"code":"(fn one-one-four [n p s]\n  (lazy-seq\n   (when-let [[c & r] (seq s)]\n     (let [m (if (p c) (dec n) n)]\n          (when (pos? m) \n            (cons c (one-one-four m p r)))))))","problem":114,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn p114 [n p s]\n  (loop [n n p p s s r [] rn 0]\n    (if (empty? s) r\n        (let [pr (p (first s))]\n          (if (and pr (= rn (dec n)))\n            r\n            (recur n p (rest s) \n                   (conj r (first s))\n                   (if pr (inc rn) rn)))))))","problem":114,"user":"500b61b1e4b03d00572d2d81"},{"problem":114,"code":"(fn f [n p [c & r]]\n  (lazy-seq\n   (let [n (if (p c) (- n 1) n)]\n     (if (> n 0)\n       (cons c (f n p r))))))","user":"53034738e4b0d8b024fd373e"},{"problem":114,"code":"(fn t [n p s]\n  (lazy-seq\n    (when-let [[f & r] (not-empty s)]\n      (if (p f)\n        (when (> n 1)\n          (cons f (t (dec n) p r)))\n        (cons f (t n p r))))))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":114,"code":"(fn gtw [n p [x & xs]]\n  (if x\n    (let [nn (if (p x) (dec n) n)]\n      (if (pos? nn)\n        (lazy-seq (cons x (gtw nn p xs)))))))","user":"52ce1abfe4b07d0d72b27389"},{"problem":114,"code":"(fn [n p xs]\n    (take-while #(not (= % (nth (filter p xs) (dec n))))\n                xs))","user":"54246fcce4b01498b1a71aed"},{"problem":114,"code":"(fn gtw [n pred [h & tail]]\n  (cond\n    (nil? h) nil\n    (and (pred h) (= n 1)) nil\n    (pred h) (lazy-seq (cons h (gtw (dec n) pred tail)))\n    :else (lazy-seq (cons h (gtw n pred tail)))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn [n f xs]\r\n  ((fn [n [x & xs] r]\r\n     (if (nil? x) r\r\n         (if (= n 0)\r\n           (if (f x) r\r\n               (recur n xs (conj r x)))\r\n           (recur (if (f x) (dec n) n) xs (conj r x)))))\r\n   (dec n) xs []))","problem":114,"user":"4dc1ee85535d020aff1edf91"},{"problem":114,"code":"(fn [n p s]\n  (loop [nseq []\n         acc 0\n         cnt 0]\n    (cond\n     (= cnt n) (butlast nseq)\n     :else (recur (conj nseq (nth s acc))\n                  (inc acc) \n                  (if (p (nth s acc))\n                          (inc cnt)\n                          cnt)))))","user":"52474133e4b05ef8e38e635e"},{"code":"(fn [n f s]\n    (let [[t s] (split-with #(not (f %)) s)]\n      (loop [s s\n             t t]\n        (if (or (empty? s)\n                (= (dec n) (count (filter f t))))\n          t\n          (let [h (first s)\n                [tk dr]\n                (split-with #(not (f %)) (rest s))]\n            (recur dr\n                   (concat t\n                           (list h)\n                           tk )))))))","problem":114,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn twn [n p s]\n  (let [[x y] (split-with (complement p) s)]\n    (lazy-cat x (when (> n 1) (cons (first y) (twn (dec n) p (rest y)))))))","problem":114,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn global-take-while [n p seq]\n  (letfn [(collect [step acc seq]\n            (let [pred-true? (p (first seq))]\n              (if (or (empty? seq)\n                      (and pred-true? (= step n)))\n                acc\n                (recur (if pred-true? (inc step) step) (conj acc (first seq)) (rest seq)))))]\n    (collect 1 [] seq)))","problem":114,"user":"4ff355a1e4b0678c553fc34d"},{"code":"(fn gtw [n p [x & xs]]\n (lazy-seq\n  (cond (nil? x) '()\n        (p x) (if (= n 1) '() (cons x (gtw (dec n) p xs)))\n        :else (cons x (gtw n p xs)))))","problem":114,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"problem":114,"code":"(fn [n pred in]\n    (loop [m n\n           h '()\n           t in]\n      (let [[h' t'] (split-with (complement pred) t)]\n        ;(prn \"m\" m \"h\" h \"t\" t \"h'\" h' \"t'\" t')\n        (cond\n          (= m 1) (concat h h')\n          (not (pred (first t'))) '()\n          :else\n            (recur\n              (- m 1)\n              (concat h h' [(first t')])\n              (rest t')\n              ))))\n    )","user":"52ffb7f2e4b0d8b024fd370b"},{"problem":114,"code":"(fn f [n p s]\n  (lazy-seq\n    (let [n (if (p (first s)) (dec n) n)]\n      (if (and (pos? n) (seq s))\n        (cons (first s) (f n p (rest s)))))))","user":"530b8580e4b02e82168697cc"},{"code":"(fn w\n          [n f [a & r]] (if (and (f a) (= n 1))\n                            nil\n                            (cons a (lazy-seq (w\n                                               (if (f a) (dec n) n)\n                                               f\n                                               r)))))","problem":114,"user":"503b6995e4b07a1917cc34dd"},{"problem":114,"code":"(fn globalTakeWhile [n p coll]\n  (lazy-seq\n   (if (p (first coll)) ;if satisfy the predicate\n     (if (= 1 n) [] ;and the current item is the exclusive bound, then return\n       (cons (first coll) (globalTakeWhile (dec n) p (rest coll))));else append current item and decrease n\n     (cons (first coll) (globalTakeWhile n p (rest coll))))));just append","user":"556c70dae4b09a3098a524fd"},{"code":"(fn step [n p s]\n    (when-first [x s]\n      (let [n (if (p x) (dec n) n)]\n        (when (< 0 n)\n          (cons x\n                (step n\n                      p\n                      (rest s)))))))","problem":114,"user":"4f4d7b8fe4b03ad3f0c10ca9"},{"problem":114,"code":"(fn global-take-while [n p coll]\n  (take\n    (nth \n      (remove nil?\n              (map-indexed #(if (p %2) %) coll)) (dec n) (count coll)) \n    coll))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn gtw [n p [s & ss]]\n   (if-not (and (= n 1) (p s))\n     (cons s (lazy-seq (gtw (if (p s) (dec n) n) p ss)))))","problem":114,"user":"5175533fe4b0dea9bbfba575"},{"code":"(fn [n p c]\n  (let [x (ref 0)\n        f #(do\n             (if (p %) (dosync (alter x inc)))\n             (< @x n))]\n    (take-while f c)))","problem":114,"user":"4db4714f535dc0f10411755a"},{"problem":114,"code":"(fn gtw [n p [f & r]]\n  (when f\n    (let [ctr (if (p f) (dec n) n)]\n    (when (pos? ctr)\n      (lazy-seq (cons f (gtw ctr p r)))))))","user":"57b3efb1e4b0fbc9809a278a"},{"code":"(fn gtw\n  ([n p s]\n   (gtw n p [] s))\n  \n  ([n p r s]\n   (cond\n    (= 0 n) (butlast r)\n    (p (first s)) (gtw (dec n) p (conj r (first s)) (rest s))\n    :else (gtw n p (conj r (first s)) (rest s))\n    )))","problem":114,"user":"5107b86de4b05b2b4eee7495"},{"problem":114,"code":"(fn [n pred s]\n    (:res\n      (reduce (fn [s e]\n                (cond\n                  (= (:hit s) n) s\n                  (and (pred e) (= (:hit s) (dec n))) (assoc s :hit (inc (:hit s)))\n                  (pred e) {:hit (inc (:hit s))\n                            :res (conj (:res s) e)}\n                  :else (assoc s :res (conj (:res s) e))))\n              {:hit 0\n               :res []}\n              s)))","user":"57c94c54e4b05aa3c4741d2c"},{"problem":114,"code":"(fn f\n  [n p coll]\n  (when-let [[x & r] (seq coll)]\n    (let [n' (if (p x) (dec n) n)]\n      (if (zero? n' ) nil (lazy-seq (cons x (f n' p r)))))))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn f [n, p, s]   \n    (let [¹ (first s), r (rest s)]\n      (cond\n        (p ¹) (if (= 1 n) nil (cons ¹ (lazy-seq (f (dec n) p r))))\n        :else (cons ¹ (lazy-seq (f n p r)))\n        )))","problem":114,"user":"4f038567535dcb61093f6b0c"},{"code":"#(loop [v %3 c [] s 0]\n  (let [f (first v)\n        n (conj c f)\n        r (rest v)\n        t (+ s 1)]\n        (if (%2 f) \n          (if (= % t) c (recur r n t))\n          (recur r n s))))","problem":114,"user":"4e16bdef535d04ed9115e7e9"},{"code":"(fn z [i p s] (when-let [[f & r] (seq s)] (let [ni (if (p f) (dec i) i)] (when (pos? ni) (lazy-seq (cons f (z ni p r)))))))","problem":114,"user":"4e7e6cbd535db169f9c79713"},{"problem":114,"code":"(fn number114 [n p xs]\n  (when-let [[x & xs] xs]\n    (let [n (if (p x) (dec n) n)]\n      (if (> n 0)\n        (lazy-seq (cons x (number114 n p xs)))))))","user":"54074fc5e4b0addc1aec66b6"},{"code":"(fn f [n pred coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (let [n (if (pred x), (dec n), n)]\n       (when-not (zero? n)\n         (cons x (f n pred xs)))))))","problem":114,"user":"4dabb7b1950ed6eda1bd72f3"},{"problem":114,"code":"(fn foo [n p s]\n    (if (or (= n 0) (empty? s))\n        '()\n        (let [x (first s)\n              xs (rest s)\n              n' (if (p x) (dec n) n)]\n            (if (and (p x) (= n 1))\n                '()\n                (lazy-seq (cons x (foo n' p xs)))))))","user":"600ae927e4b074f607df6689"},{"problem":114,"code":"(fn [n pred coll]\n  (letfn [(tw [n pred [f & r]]\n              (if (> n 0)\n                (if (pred f)\n                  (cons f (tw (dec n) pred r))\n                  (cons f (tw n pred r)))))]\n    (butlast (tw n pred coll))))\n\n;;(fn [n p s] \n;;  (take (.indexOf s (nth (filter p s) (- n 1))) s))","user":"544cf5d7e4b0e39780006977"},{"problem":114,"code":"(fn global-take-while [n p s]\n  (->> (map vector (map #(if (p %) 1 0) s) s)\n       (reductions (fn [[a b] [c d]] [(+ a c) d]))\n       (take-while (fn [[a b]] (< a n)))\n       (map second)))","user":"561ca2eae4b064ca9f4b169b"},{"code":"(fn t [n p s] (loop [a n b s r []] (if (= 0 a) (butlast r) (recur (if (p (first b)) (dec a) a) (rest b) (conj r (first b))))))","problem":114,"user":"4eb13d60535d7eef3080733f"},{"problem":114,"code":"(fn test114 [n p coll]\n  (let [a (nth (filter p coll) (dec n))]\n     (take-while #(not= a %) coll)\n   ))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn w [n f l]\n       (let [\n              [a [h & t]] (split-with #(not (f %1)) l)\n              ]\n         (concat a (if (= n 1) '() (cons h (lazy-seq (w (dec n) f t)))))\n         )\n       )","problem":114,"user":"52593207e4b0cb4875a45cd3"},{"problem":114,"code":"(fn [n p coll]\n  (butlast ((fn helper [cnt c]\n              (when (not (= cnt n))\n                (if (p (first c))\n                  (cons (first c) (lazy-seq (helper (inc cnt) (rest c))))\n                  (cons (first c) (lazy-seq (helper cnt (rest c))))))) 0 coll)))","user":"5746061ae4b009280f9f2b5b"},{"problem":114,"code":"(fn gtake-while [n p coll]\n  (loop [i n\n         col coll\n         result []]\n    (if (= i 0)\n      (butlast result)\n      (let [nl (take-while (complement p) col)\n            rl (drop-while (complement p) col)]\n        (recur (dec i) (rest rl) (concat result nl [(first rl)]))))))","user":"5fa74b82e4b0fa27300f3dda"},{"code":"(fn gtw [n p s]\r\n  (if (empty? s)\r\n    ()\r\n    (let [[c & r] s]\r\n      (if (p c)\r\n        (if (<= n 1)\r\n          ()\r\n          (lazy-seq (cons c (gtw (dec n) p r))))\r\n        (lazy-seq (cons c (gtw n p r)))))))","problem":114,"user":"4feada56e4b0140c20fb9c11"},{"code":"(fn f [n p s]\n  (let [[a b] (split-with (complement p) s)]\n    (concat a\n      (when (> n 1)\n        (cons (first b)\n          (lazy-seq (f (dec n) p (rest b))))))))","problem":114,"user":"4fb2101ce4b081705acca284"},{"problem":114,"code":"(fn global-take-while [true-left f pend]\n\t(if (or (zero? true-left) (empty? pend))\n\t\tnil\n\t\t(let [next-true-left  (if (apply f [(first pend)]) (dec true-left) true-left)]\n\t\t\t(if (zero? next-true-left)\n\t\t\t\tnil\n\t\t\t\t(lazy-seq \n\t\t\t\t\t(cons \n\t\t\t\t\t\t(first pend) \n\t\t\t\t\t\t(global-take-while \n\t\t\t\t\t\t\tnext-true-left \n\t\t\t\t\t\t\tf\n\t\t\t\t\t\t\t(rest pend))))))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn take-while\n  [time pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n       (if-not (pred (first s))\n   (cons (first s) (take-while time pred (rest s)))\n\t (if (> time 1)\n\t   (cons (first s) (take-while (- time 1) pred (rest s))))))))","problem":114,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn t [n pred [v & w]]\n  (lazy-seq\n     (if (or (not v)\n             (zero? n)\n             (and (= 1 n)\n                  (pred v)))\n         nil\n         (cons v \n               (t (if (pred v) \n                      (dec n) \n                      n) \n                   pred \n                   w)))))","problem":114,"user":"4db92654535d1e037afb21a0"},{"problem":114,"code":"(fn [n pred aseq]\n  (letfn [(aux [n aseq]\n            (when (seq aseq)\n              (let [[f & r] aseq]\n                (if (pred f)\n                  (when (pos? n)\n                    (cons f (aux (dec n) r)))\n                  (cons f (aux n r))))))]\n    (lazy-seq (aux (dec n) aseq))))","user":"53576356e4b04ce2eb3ed27a"},{"problem":114,"code":"(fn [n p s]\n  (letfn\n    [(iter [n [h & t]]\n      (cond\n        (and (= 1 n) (p h )) '()\n        (p h) (cons h (iter (dec n) t))\n        :else (cons h (iter n t))))]\n    (iter n s)))","user":"5901158de4b0438e51c2d039"},{"problem":114,"code":"(fn gtake-while [n pred s] {:pre (every? true? [(number? n) (fn? pred) (sequential? s)])}\n    (loop [agg '() n n s s]\n        (let [ [left [h & tail]] (split-with (complement pred) s)]\n            (if (= n 1)\n                (concat agg left)\n                (recur (concat agg left [h]) (dec n) tail)\n            )\n        )\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":114,"code":"(fn gtw [n p s]\n  (loop [[cur & rst] s out [] cnt 0]\n    (if (and (p cur) (= n (inc cnt))) out\n      (recur rst (conj out cur) (if (p cur) (inc cnt) cnt)))))","user":"53e745a1e4b036ad0777e479"},{"problem":114,"code":"(fn glob-tw [n pred coll]\n  (if (> n 0)\n    (if (pred (first coll))\n      (if (> n 1) (cons (first coll) (lazy-seq (glob-tw (dec n) pred (rest coll)))))\n      (cons (first coll) (lazy-seq (glob-tw n pred (rest coll))))\n      )))","user":"53e76bb2e4b036ad0777e47d"},{"code":"(fn [n p s] (take (.indexOf (vec s) (last (take n (filter p s)))) s))","problem":114,"user":"4f569a3ce4b0a7574ea71828"},{"code":"(fn [n p s]\r\n  (->> (map p s)\r\n    (map boolean)\r\n    (map {true 1, false 0})\r\n    (reductions +)\r\n    (map list s)\r\n    (take-while #(< (second %) n))\r\n    (map first)))","problem":114,"user":"504e14c2e4b078edc5f593bf"},{"problem":114,"code":"(fn g [n f r]\n  (if (or (zero? n) (empty? r)) []\n    (if (f (first r))\n      (if (zero? (dec n)) []\n        (lazy-cat [(first r)] (g (dec n) f (rest r))))\n      (lazy-cat [(first r)] (g n f (rest r))))))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"code":"(fn x [n f s]\n  (let [sf (first s)\n        sr (rest s)\n        nn (if (f sf) (- n 1) n)]\n    (if (zero? nn)\n      '()\n      (cons sf (lazy-seq (x nn f sr))))))","problem":114,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"#(butlast (loop [m % o [] [f & r] %3] (if (or (zero? m) (empty? r)) o (recur (if (%2 f) (dec m) m) (conj o f) r))))","problem":114,"user":"4f83665ee4b033992c121c1c"},{"problem":114,"code":"(fn g [r n f v]\n  (let [h (first v)]\n  (if (and (= 1 n) (f h)) r\n    (g (conj r h) (if (f h) (dec n) n) f (rest v))))) []","user":"551c66dae4b07993ea3788de"},{"code":"(fn global-take-while [n pred coll]\r\n  (when-not (empty? coll)\r\n    (let [n (if (pred (first coll)) (dec n) n)]\r\n      (lazy-seq\r\n       (when (> n 0)\r\n         (cons (first coll) (global-take-while n pred (rest coll))))))))","problem":114,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn take-while-count [cnt p sq] (loop [c cnt [a & b] sq r []] (if (or (nil? a) (>= 0 c) (and (= 1 c) (p a))) r (recur (if (p a) (dec c) c) b (conj r a)))))","problem":114,"user":"4f0e4ebd535d0136e6c22322"},{"problem":114,"code":"(fn furp [n p s] \n  (if (not (and (= 1 n) (p (first s))))\n    (lazy-seq (cons (first s) \n                    (furp \n                     (if (p (first s))\n                       (dec n)\n                       n)\n                     p (rest s))\n              )\n    )\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":114,"code":"(fn take-while-n\n  [n p? s]\n  (lazy-seq\n    (let [lr (split-with (complement p?) s)]\n      (if (> n 1)\n        (concat (first lr)\n                (cons (first (second lr))\n                      (take-while-n (dec n) p? (rest (second lr)))))\n        (first lr)))))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn T [n p s]\n  (cond (empty? s) []\n        (and (= n 1) (p (first s))) []\n        (p (first s)) (cons (first s)\n                            (lazy-seq (T (dec n) p (rest s))))\n        :else (cons (first s)\n                    (lazy-seq (T n p (rest s))))))","problem":114,"user":"51a4416ae4b0def3c5c5868c"},{"problem":114,"code":"(fn g-take-while\n  [n fun alist]\n  (loop [nth-item n\n         [x & xs :as alls] alist\n         res []]\n    (cond\n      (or (empty? alls) (zero? nth-item)) res\n      (or (true? (fun x))\n          (char? (fun x))\n          (string? (fun x))) (recur (dec nth-item)\n                             xs\n                             (if (zero? (dec nth-item)) res (conj res x)))\n      :else (recur nth-item xs (conj res x)))))","user":"550d9452e4b06e50f9beb15d"},{"problem":114,"code":"(fn f [n p s]\n  (when (seq s)\n    (let [v (first s)]\n      (if (p v)\n        (when (> n 1)\n          (cons v (lazy-seq (f (dec n) p (rest s)))))\n        (cons v (lazy-seq (f n p (rest s))))))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn g [n p [f & r]]\n  (if (and (p f) (= n 1))\n    []\n    (cons\n     f\n     (g\n      (if (p f)\n        (dec n)\n        n)\n      p r))))","problem":114,"user":"519136e9e4b0f8ef0be96c01"},{"problem":114,"code":"(fn gtw [n pred coll]\n   (lazy-seq\n    (when-let [[x & xs] (seq coll)]\n      (if (pred x)\n        (when (> n 1)\n          (cons x (gtw (dec n) pred xs)))\n        (cons x (gtw n pred xs))))))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":114,"code":"(fn __ [n f [h & t]]\n  (if (f h)\n    (when (not= 0 (dec n)) \n      (cons h (__ (dec n) f t)))\n    (cons h (__ n f t))))","user":"53f3a4ace4b0742d9025b0f7"},{"code":"(fn gtw [n p s]\n  (loop [i 0, result [], s1 s]\n    (cond\n      (= i n)     (drop-last result)\n      (empty? s1) result\n      :else\n      (let [f (first s1), v (p f)]\n        (recur\n          (if-not v i (inc i))\n          (conj result f)\n          (rest s1))\n        ))))","problem":114,"user":"52cf084ce4b07d0d72b27399"},{"problem":114,"code":"(fn gtw [n p? s] (let [[front end] (split-with (complement p?) s)] \n                   (if (= n 1)\n                     front\n                     (lazy-cat front [(first end)] (gtw (dec n) p? (drop 1 end))))))","user":"56b86e64e4b0f26550335924"},{"problem":114,"code":";(fn tnw [n p aseq]\n ;   (lazy-seq\n  ;    (when (seq aseq)\n   ;     (cond\n    ;      (> n 1)  (cons (first aseq) (tnw (if (p (first aseq)) (dec n) n) p (rest aseq)))\n     ;     (= n 1) (when (not (p (first aseq))) (cons (first aseq) (tnw 1 p (rest aseq))))\n      ;    :else nil))))\n      (fn tnw [n p aseq]\n    (lazy-seq\n      (when (and (seq aseq) (or (> n 1) (and (= n 1) (not (p (first aseq))))))\n        (cons (first aseq) (tnw (if (p (first aseq)) (dec n) n) p (rest aseq))))))","user":"50eddbc4e4b06330c1f87c4b"},{"problem":114,"code":"(fn [n pred coll] \n   (let [ct (atom 0)\n         f  (fn f [n pred coll] \n                (if (< @ct n)\n                    (if (pred (first coll))\n                      (do                        \n                        (swap! ct inc)\n                        (cons (first coll) (f n pred (rest coll))))\n                      (cons (first coll) (f n pred (rest coll))))\n                      nil))]\n (drop-last (f n pred coll))))","user":"53da8fede4b0e771c30254a3"},{"code":"(fn [n p s]\n  (loop [i 1 a [] l (rest s) x (first s)]\n    (let [e (conj a x) f (rest l) g (first l)]\n      (if (p x)\n        (if (< i n)\n          (recur (inc i) e f g)\n          a)\n        (recur i e f g)))))","problem":114,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn gtw [n pred coll]\n  (cond\n    (empty? coll) nil\n    (and (pred (first coll)) (= 1 n)) nil\n    (pred (first coll)) (lazy-seq (cons (first coll) (gtw (dec n) pred (rest coll))))\n    :else (lazy-seq (cons (first coll) (gtw n pred (rest coll))))))","problem":114,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":114,"code":"(fn  a [n pred lst]\n          (if (= n 0)\n            []\n            (if (pred (first lst))\n             (if (= n 1) [] (cons (first lst) (lazy-seq (a (dec n) pred (rest lst)))))\n             (cons (first lst) (lazy-seq (a n pred (rest lst)))))))","user":"533c2605e4b0e30313ee6cd7"},{"problem":114,"code":"(fn f [n p [h & t]]\n  (if (p h)\n    (if (= n 1)\n      []\n      (cons h (f (dec n) p t)))\n    (cons h (f n p t))))","user":"53fb5256e4b0de5c4184857f"},{"problem":114,"code":"(fn ! [n p coll] (if (= n 1)\n                    (take-while (complement p) coll)\n                    (let [[a b] ((juxt (partial take-while p) (partial drop-while p)) coll)]\n                      (concat a (list (first b)) (! (dec n) p (rest b))))))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn take-nth-while [n p xs]\n  (let [[ys xs'] (split-with (complement p) xs)]\n    (if (> n 1)\n      (concat ys (list (first xs')) (take-nth-while (dec n) p (rest xs')))\n      ys)))","problem":114,"user":"504e13fce4b078edc5f593bc"},{"problem":114,"code":"(fn [n p c] (take (first (nth (filter #(p (second %)) (map-indexed #(vec [%1 %2]) c)) (dec n))) c))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn t [n p c]\n   (if (< 0 n)\n     (let [s (take-while #(not (p %)) c) [x & r] (drop (count s) c)]\n       (if x\n         (concat s (if (< 1 n) [x]) (t (- n 1) p r))\n         s))))","problem":114,"user":"4e65027c535d8ccf87e9fe6e"},{"code":"(fn [n f l]\n  (drop-last ( nth (reduce\n    (fn [[a i] b]\n      (if (< i n)\n        [(conj a b) (if (f b) (+ 1 i) i)]\n        [a i]\n      )\n    )\n    [[] 0]\n    l\n  ) 0)) \n)","problem":114,"user":"4f1595da535d64f603146444"},{"problem":114,"code":"(fn global-take-while\n  [n p xs]\n  (let [n (- n (if (p (first xs)) 1 0))]\n    (if (= n 0) ()\n        (lazy-seq\n         (cons (first xs)\n               (global-take-while n p (rest xs)))))))","user":"5c222b7de4b07e362c230588"},{"problem":114,"code":"(fn glob-take-while [n p s]\n  (let [h (first s) t (rest s)]\n    (if (or (nil? h) (and (p h) (= n 1)))\n      nil\n      (cons h (lazy-seq (glob-take-while\n                                 (if (p h) (dec n) n)\n                                 p\n                                 t))))))","user":"587ee260e4b052da650a6353"},{"problem":114,"code":"(fn tw\n  [n p s]\n  (let\n    [h (first s)\n     r (rest s)]\n    (if\n      (p h)\n      (if\n        (= 1 n)\n        '()\n        (lazy-seq (cons h (tw (dec n) p r))))\n      (lazy-seq (cons h (tw n p r))))))","user":"5796d3ebe4b039eba2ecb0ee"},{"code":"(fn twn\n  [n f s]\n  (if (= 0 n)\n    []\n    (lazy-seq\n      (if (f (first s))\n        (if (> n 1)\n          (cons (first s) (twn (dec n) f (rest s)))\n          (twn (dec n) f (rest s)))\n        (cons (first s) (twn n f (rest s))))\n        )))","problem":114,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn [n p xs]\n  (letfn [(f [n [x & xs]]\n            (when (pos? n)\n              (cons\n               x\n               (f (if (p x) (dec n) n) xs))))]\n    (butlast (f n xs))))","problem":114,"user":"4edecdae535d10e5ff6f533c"},{"code":"(fn [-nth -fn -col]\n   (first\n    (partition-by\n     (partial = (last (take -nth\n                            (filter -fn -col)))) -col)))","problem":114,"user":"50550f43e4b0b1b9d1860eb7"},{"code":"(fn gtake-while [n p s]\n  (map first\n    (take-while #(< (second %) n)\n      (map vector s\n        (next\n          (reductions #(if (p %2) (inc %) %) 0 s))))))","problem":114,"user":"4f569218e4b0a7574ea71826"},{"problem":114,"code":"#(loop [agg () n %1 col %3]\n     (let [[left [h & tail]] (split-with (complement %2) col)]\n       (if (= n 1)\n         (concat agg left)\n         (recur (concat agg left [h]) (dec n) tail))))","user":"567d132ee4b05957ce8c61c3"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (if (<= n 1)\n      (take-while (comp not pred) coll)\n      (cons (first coll)\n            (lazy-seq (global-take-while (if (pred (first coll)) (dec n) n)\n                                         pred\n                                         (rest coll))))))","user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn f1 [c f [sf & sr]]\n  (if (nil? sf) \n    nil\n    (let [c- (if (f sf) (dec c) c)]\n      (if (<= c- 0)\n        nil\n        (cons sf (f1 c- f sr))))))","problem":114,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn take-while-n [n p s] \n  (let [h (first s)\n        t (rest s)\n        y (p h)]\n    (if (and y (= 1 n))\n      ()\n      (lazy-seq (cons h (take-while-n (if y (dec n) n) p t))))))","problem":114,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn aa [n pred sq] \n  (take (nth (keep-indexed #(if (pred %2) %1) sq) (dec n)) sq)\n  )","problem":114,"user":"5105ed16e4b01150e115ebe2"},{"code":"(fn [n p sq]\n    (let [c (first (last (take n (filter #(p (second  %)) (map-indexed (fn [idx itm] [idx itm]) sq)))))]\n      (take c sq)))","problem":114,"user":"4efd8b67535de96065cf5085"},{"problem":114,"code":"(fn [a b c]\n  (reverse ((fn f [n p h l]\n    (if (= n 0)\n      []\n      (if (not (empty? h))\n        (conj (f n p [] l) (first h))\n        (if (p (first l))\n          (f (dec n) p [(first l)] (rest l))\n          (conj (f n p [] (rest l)) (first l)))))) a b [] c)))","user":"53aaaf7ae4b047364c044444"},{"code":"(fn t [c p [f & l]] \n  (when (and f (> c 0) (not (and (= c 1) (p f))))\n    (lazy-seq (cons f (t (if (p f) (dec c) c) p l)))))","problem":114,"user":"4dbdab4e535d020aff1edf49"},{"problem":114,"code":"(fn [n pred coll]\n  (loop [res [], counter 0, [v & others] coll]\n    (let [next-counter (if (pred v) (inc counter) counter)]\n      (if (or (= next-counter n) (nil? v)) res\n        (recur (conj res v) next-counter others)))))","user":"5c13da47e4b01240ff5671a6"},{"problem":114,"code":"(fn tw [n p [h & t]]\n  (if (p h)\n    (if (= 1 n) [] (cons h (tw (dec n) p t)))\n    (cons h (tw n p t))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":114,"code":"(fn [n p s]\n    (->> (drop-while #(< (first %) n)\n                     (reductions (fn [[n & c] x]\n                                   (cons (if (p x) (inc n) n)\n                                         (conj c x)))\n                                 '(0) s))\n         first\n         rest\n         rest\n         reverse)\n    )","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn tunp [n p [h & t]]\n  (cond\n   (nil? h)    []\n   (zero? n)   []\n   (not (p h)) (cons h (lazy-seq (tunp n p t)))\n   (= 1 n)     []\n   :else       (cons h (lazy-seq (tunp (dec n) p t)))))","problem":114,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn x [c p [f & xs]]\n  (if (p f)\n    (if (> c 1)\n      (cons f (x (dec c) p xs)))\n    (cons f (x c p xs))))","problem":114,"user":"4ec16c21535dfed6da9c6dac"},{"code":"(fn [n p s]\r\n  (loop [result [] current s success 0]\r\n    (if (and (p (first current)) (= n (inc success)))\r\n      result\r\n      (recur (conj result (first current)) (rest current)\r\n        (if (p (first current)) (inc success) success)))))","problem":114,"user":"4dad76588e77d6ed63f12a44"},{"problem":114,"code":"(fn __\n  [n p coll]\n  (loop [hit 0\n         index 0\n         c coll]\n    (if (= hit n)\n      (take (dec index) coll)\n      (recur\n        (if (p (first c)) (inc hit) hit)\n        (inc index)\n        (rest c)))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn b [n p [x & y]]\n  (let [i (if (p x) (- n 1) n)]\n    (if (= i 0)\n      nil\n      (lazy-seq\n        (cons x (b i p y))))))","problem":114,"user":"4e8f4f64535d65386fec2149"},{"problem":114,"code":"(fn ntake-while\r\n  [n f s]\r\n  (loop [i n r [] [a & b] s]\r\n    (if (or (nil? a) (and (= i 1) (f a)))\r\n      r\r\n      (recur (if (f a) (dec i) i) (conj r a) b))))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":114,"code":"(fn t-w [c p s]\n   (if (and (<= c 1) (p (first s))) nil\n       (cons (first s)\n             (t-w (if (p (first s)) (- c 1) c) p (rest s)))))","user":"52fac708e4b047fd55836fff"},{"problem":114,"code":"(fn [n p s]\n  (let [a (atom 0)]\n    (take-while \n      (fn [x] (if (p x) (if (= (inc @a) n)  false (swap! a inc)) true)) \n      s)))","user":"4fc8f671e4b0ee37620e1840"},{"problem":114,"code":"(fn takeWhileX [n p x] (reverse (rest ((fn takeWhileRec [n p x res]\n\t(if \n\t\t(or (empty? x) (zero? n)) \n\t\tres\n\t\t(\n\t\t\tlet \n\t\t\t[\n\t\t\t\tc (first x)\n\t\t\t\tnewX (rest x)\n\t\t\t\tnewRes (cons c res)\n\t\t\t]\n\t\t\t(lazy-seq\n\t\t\t\t(if (p c)\n\t\t\t\t\t(takeWhileRec (dec n) p newX newRes)\n\t\t\t\t\t(takeWhileRec n p newX newRes)\n\t\t\t\t)\t\t\t\t\t\t\n\t\t\t)\n\t\t)\n\t)\n)\n n p x []))))","user":"568820e8e4b0dcc4269f4067"},{"problem":114,"code":"(fn gtw [n f L] (if (f (first L))\n                          (if (= n 1)\n                              nil\n                              (cons (first L) (gtw (- n 1) f (rest L))))\n                          (cons (first L) (gtw n f (rest L)))))","user":"57015a1de4b08d47c97781d4"},{"code":"(fn gtw [n p [f & r]]\n  (cond (zero? n) nil\n        (p f) (if (> n 1) (lazy-seq (cons f (gtw (dec n) p r))) nil)\n        :else (lazy-seq (cons f (gtw n p r)))))","problem":114,"user":"500cb910e4b05f7c30cfa698"},{"code":"(fn global-take-while\n  [n p coll]\n  (lazy-seq\n   (loop [c coll\n          m 0\n          res []]\n     (if (= m n)\n       (reverse (rest res))\n       (if (p (first c))\n         (recur (rest c) (inc m) (cons (first c) res))\n         (recur (rest c) m (cons (first c) res)))))))","problem":114,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn f [n p s]\n  (lazy-seq\n    (cond\n      (empty? s) nil\n      (not (p (first s))) (cons (first s) (f n p (rest s)))\n      (= n 1) nil\n      :else (cons (first s) (f (dec n) p (rest s))))))","problem":114,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [n p c]\n  (letfn [(do-it [n c ax]\n    (if (or (empty? c) (zero? n))\n      ax\n      (let [first-el (first c)\n            p-true? (p first-el)\n            new-n (if p-true? (dec n) n)\n            new-c (rest c)\n            new-ax (if (and p-true? (= 1 n)) ax (conj ax first-el))]\n        (do-it new-n new-c new-ax))))]\n    (do-it n c [])))","problem":114,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn [n p l]\n   (loop [n n l l r []]\n     (if (and (= 1 n) (p (first l)))\n       r\n       (recur (if (p (first l))\n                (dec n)\n                n)\n              (rest l)\n              (conj r (first l)))))\n   )","problem":114,"user":"50d3b03fe4b030b634c368b9"},{"problem":114,"code":"(fn [n f coll]\n  (let [matches\n        (->> coll\n             (map-indexed #(vector (boolean (f %2)) %1))\n             (filter first)\n             (mapv second))]\n    (if-let [last-match-idx (get matches (dec n))]\n      (take last-match-idx coll)\n      coll)))","user":"505aa653e4b021387fb89857"},{"problem":114,"code":"(fn f[n pred s]\n  (when (and (seq s) (or (> n 1)\n                         (not (pred (first s)))))\n    (lazy-seq (cons (first s)\n                    (f (if (pred (first s))\n                             (dec n)\n                             n)\n                        pred\n                        (next s))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"code":"(fn tw [n p coll]\n    (let [v (first coll)]\n      (if (p v)\n        (if (= 1 n)\n          '()\n          (cons v (tw (dec n) p (rest coll))))\n        (cons v (tw n p (rest coll))))))","problem":114,"user":"4dc29a1d535d020aff1edf96"},{"code":"(fn [a g l] (butlast (last (reduce #(let [[p q] % r (conj q %2)] (if (< p a) (if (g %2) (list (inc p) r) (list p r)) %)) [0 []] l))))","problem":114,"user":"52c6a0abe4b0c2d177d62111"},{"code":"(fn f [r n p [a & b]]\n  (if (p a)\n    (if (= n 1)\n      r\n      (f (conj r a) (dec n) p b))\n    (f (conj r a) n p b)))\n[]","problem":114,"user":"4e49badd535dc968683fc4c9"},{"problem":114,"code":"(fn take-while-with-state [n pred coll]\n  (loop [i n\n         acc []\n         [c & cs] coll]\n    (cond\n      (nil? c) acc\n      (and (pred c) (= i 1)) acc\n      (pred c) (recur (dec i) (conj acc c) cs)\n      :else (recur i (conj acc c) cs)\n      )))","user":"527ccaf4e4b0757a1b17136d"},{"problem":114,"code":"(fn take-until-n-matches [n pred? seq]\n  (let [head (first seq)\n        count (if (pred? head) (dec n) n)]\n    (when (> count 0)\n      (cons head (take-until-n-matches count pred? (rest seq))))))","user":"58ed713de4b056aecfd47d84"},{"problem":114,"code":"(fn g-t-w\n  [n f coll]\n  (println n coll)\n  (if (empty? coll)\n    coll\n    (if (f (first coll))\n      (if (> n 1)\n        (cons (first coll) (g-t-w (dec n) f (rest coll))))\n      (cons (first coll) (g-t-w n f (rest coll))))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":114,"code":"(fn [n p s]\n  (let [limit (nth (filter p s) (dec n))\n        new-p (fn [x] (not= x limit))]\n    (take-while new-p s)))","user":"5f82609ae4b0c071e6c840f9"},{"code":"(fn n-take-while [n pred col]\n  (lazy-seq\n    (loop [n n col col ret []]\n      (cond\n        (pred (first col))\n        (if (zero? (dec n))\n          ret\n          (recur (dec n) (rest col) (conj ret (first col))))\n        :else\n        (recur n (rest col) (conj ret (first col)))))))","problem":114,"user":"4f849f76e4b033992c121c36"},{"code":"(fn foo [n pred coll]\n  (lazy-seq\n    (when-first [el coll]\n      (if (pred el)\n        (if (> n 1) \n          (cons el (foo (dec n) pred (next coll)))\n          nil\n        )\n        (cons el (foo n pred (next coll)))))))","problem":114,"user":"4f03154a535dcb61093f6a58"},{"problem":114,"code":"(fn take' [n pred xs]\n  (lazy-seq\n    (when-let [[x & more] (not-empty xs)]\n      (if (pred x)\n        (when (> n 1)\n          (cons x (take' (dec n) pred more)))\n        (cons x (take' n pred more))))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":114,"code":"(fn [n p coll]  (map second (take-while #(not= (first %) n) \n                              (reductions #(vector (+ (first %1) (first %2)) (second %2)) (map #(vector (if (p %) 1 0) %) coll))\n                              \n                              )))","user":"50856bd1e4b004985b776e4c"},{"code":"(fn gtw [n p? xs]\n  (lazy-seq\n   (when (seq xs)\n     (let [f (first xs)\n           next-n (if (p? f) (dec n) n)]\n       (when-not (zero?\tnext-n)\n       \t (cons f (gtw next-n p? (rest xs))))))))","problem":114,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn [n p s]\n  (loop [acc []\n         matched 0\n         item (first s)\n         rst (rest s)]\n    (let [satisfied? (p item)\n          matched (if satisfied? (inc matched) matched)\n          acc (if (< matched n) (conj acc item) acc)]\n      (cond\n       (not (seq rst)) acc\n       (= n matched) acc\n       :else (recur acc matched (first rst) (rest rst))))))","problem":114,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn take-while-n [n pred lst]\n  (loop [cnt n curlst lst accum '()]\n    (cond  \n          (pred (first curlst)) \n          (cond\n            (= cnt 1) accum\n            :else (recur (dec cnt)(rest curlst)(concat accum [(first curlst)])))\n          :else (recur cnt (rest curlst)(concat accum [(first curlst)])))))","problem":114,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn[n p s](loop[c s r[]n n](if-let[[x & xs](seq c)](if(p x)(if(= 1 n)r(recur xs(conj r x)(dec n)))(recur xs(conj r x)n))r)))","problem":114,"user":"4dd4034a535dae65d5c462df"},{"code":"(fn t [n p s]\n    (if (p (first s))\n      (when (> n 1)\n        (cons (first s) (t (dec n) p (rest s))))\n      (cons (first s) (t n p (rest s)))))","problem":114,"user":"4e52d815535d302ef430da77"},{"code":"(fn f [n p s]\n       (let [e (first s)]\n         (when (or (not (= n 1))\n                   (not (p e)))\n           (lazy-seq\n            (cons e\n                  (f (if (p e) (dec n) n) p (rest s)))))))","problem":114,"user":"5027b41ee4b01614d1633fee"},{"problem":114,"code":"(fn [n p seq]\r\n  (let [\r\n      gtw (fn gtw [n [head & tail]]\r\n        (if (nil? head) []\r\n        (if (not (p head)) (cons head (gtw n tail))\r\n        (if (<= n 1) []\r\n        (cons head (gtw (dec n) tail))))))]\r\n    (gtw n seq)))","user":"555bd27ae4b0b056612e2244"},{"problem":114,"code":"(fn f [n p s]\n  (let [[l [r & rs]] (split-with #(not (p %)) s)]\n    (if (> n 1)\n      (concat\n        l\n        [r]\n        (f (dec n) p rs))\n      l)))","user":"53523ae0e4b084c2834f4aee"},{"problem":114,"code":"(fn g-take-while [n p [x & xs :as s]]\n    (lazy-seq\n     (if (empty? s)\n       nil\n       (let [t (p x)]\n         (if (and t (= 1 n))\n           nil\n           (cons x (g-take-while (if t (dec n) n) p xs)))))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":114,"code":"(fn [n pred col]\n  (loop [n n, col col, res []]\n    (let [n (if (pred (first col)) (- n 1) n)]\n      (if (or (<= n 0) (empty? col))\n        res\n        (recur n (next col) (conj res (first col)))))))","user":"4dd7d040535d2dad7130b5d6"},{"problem":114,"code":"(fn gtw [n pred [x & xs]]\n  (let [n (if (pred x) (dec n) n)] \n    (when (not= 0 n) \n      (lazy-seq (cons x (gtw n pred xs))))))","user":"596a66cde4b069c0a1a19803"},{"problem":114,"code":"(fn take-while-n\n  [n pred coll]\n  (loop [n n rs () coll coll]\n    (if (empty? coll)\n      rs\n      (if (and (pred (first coll)) (= 1 n))\n        rs\n        (recur (if (pred (first coll))\n                 (dec n) n) (concat rs [(first coll)]) (rest coll))))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":114,"code":"(fn take-while-nth [n p s]\n      (if (p (first s))\n        (if (> n 1)\n          (cons (first s) (lazy-seq (take-while-nth (dec n) p (rest s))))\n          [])\n        (cons (first s) (lazy-seq (take-while-nth n p (rest s)))))\n      )","user":"51e28063e4b08e53a149f0f2"},{"problem":114,"code":"(fn [n f s]\n  (take-while\n    #(not \n       (= % \n          (last \n            (take \n              n \n              (filter f s)))))\n    s))","user":"5af907e6e4b0cc2b61a3bcda"},{"problem":114,"code":"(fn g [x p s]\n\t(butlast ((fn f [x p s]\n  \t(if (= x 0)\n    nil\n    (cons (first s) (lazy-seq (f (if (p (first s)) (- x 1) x) p (rest s))))\n    )\n    )x p s)\n  ))","user":"55e1d34ae4b050e68259b421"},{"code":"(fn f [n ff v]\n  (loop [nn n \n         ans []\n         vv v]\n    (if (empty? vv) \n     ans \n      (let [fr (first vv) \n          nans (conj ans fr)]\n      (if (ff fr) \n        (if (= 1 nn) \n          ans \n          (recur (dec nn) nans (next vv))\n          )   \n        (recur nn nans (next vv))\n        )))))","problem":114,"user":"52196842e4b0890f2f822bfa"},{"problem":114,"code":"(fn [n p c]\n  (-> \n    (keep-indexed #(if (p %2) %) c)\n    (nth (dec n))\n    (take c)))","user":"5b0bd9cfe4b0cc2b61a3bdd9"},{"code":"#(loop [l []\n        x %3\n        n %]\n   (if\n    (= n 1)(if\n            (%2 (first x)) l\n            (recur (conj l (first x))(rest x) n))\n    (recur (conj l (first x))\n           (rest x)\n           (if (%2 (first x))\n             (dec n)\n             n))))","problem":114,"user":"50a83315e4b054305ba5a830"},{"problem":114,"code":"(fn r [n p [x & xs]]\n  (let [n2 (if (p x) (dec n) n)]\n    (if (and x (> n2 0))\n      (cons x (lazy-seq (r n2 p xs))))))","user":"4f9d8083e4b0dcca54ed6d23"},{"problem":114,"code":"(fn foo [n p sq] \n  (take \n   (last (nth  \n          (filter \n           (fn [x] (p (first x))) \n           (partition 2 (interleave sq (range))))\n          (- n 1)))\n   sq))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn test114 [n f coll]\n  (loop [s coll i 0 rst []]\n    (if (or (empty? s) (= i n))\n      rst\n      (if (f (first s))\n        (if (= i (dec n))\n          (recur (rest s) (inc i) rst)\n          (recur (rest s) (inc i) (conj rst (first s))))\n        (recur (rest s) i (conj rst (first s)))))))","problem":114,"user":"50b0cffae4b009df37c708c5"},{"code":";; lazy map seq to seq of [c e] (c=pred count, e=seq elem) with reductions, then take-while and map second\n(fn [n pred s]\n  (map second (take-while #(< (first %) n)\n    (next (reductions #(if (pred %2) [(inc (first %1)) %2] [(first %1) %2]) [0 0] s)))))","problem":114,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":114,"code":"(fn g-take\n  [temp n f [x & xs]]\n  (let [z (if (f x)\n            (dec n)\n            n)]\n    (if (zero? z)\n      temp\n      (lazy-seq (g-take (conj temp x)\n                        z\n                        f\n                        xs))))) []","user":"54b7f217e4b0ed20f4ff6e8f"},{"code":"(fn f [n p coll]\n  (let [counter (atom n)\n        exceeded #(> (swap! counter dec) 0)\n        limit #(> (swap! counter identity) 0)]\n    (take-while #(or (and (p %) (exceeded)) (limit)) coll)))","problem":114,"user":"500933a6e4b046cdb195e074"},{"code":"(fn global-take-while- [n p coll]\n  ^{:doc \"114. Write a function which accepts an integer n, a                                                                                                          \n  predicate p, and a sequence. It should return a lazy sequence of                                                                                                     \n  items in the list up to, but not including, the nth item that                                                                                                        \n  satisfies the predicate.\"}\n  (loop [n n\n         s coll\n         i 0]\n    (if (zero? n)\n      (take (dec i) coll)\n      (recur (if (p (first s)) (dec n) n) (rest s) (inc i)))))","problem":114,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn my-take-while [n f s]\n\t(if (empty? s)\n\t  nil\n\t  (let [i (first s)]\n\t    (cond \n\t     (not (f i)) (cons i (lazy-seq (my-take-while n f (rest s))))\n\t     (= 1 n) nil\n\t     :else (cons i (lazy-seq (my-take-while (dec n) f (rest s))))))))","problem":114,"user":"536f871de4b0fc7073fd6e7f"},{"code":"(fn twhile [n p s]\n  (cond (or (empty? s) (and (p (first s)) (= n 1))) '()\n        (p (first s)) (cons (first s) (lazy-seq (twhile (- n 1) p (rest s))))\n        :else (cons (first s) (lazy-seq (twhile n p (rest s))))))","problem":114,"user":"52736ca1e4b03e8d9a4a747e"},{"problem":114,"code":"(fn [n f xs]\n  (letfn [(go [m xs']\n            (if (or\n                 (empty? xs')\n                 (<= n m))\n              []\n              (let [y (f (first xs'))\n                    d (if y (inc m) m)]\n                (if (<= n d)\n                  []\n                  (cons (first xs') (lazy-seq (go d (rest xs'))))))))]\n    (go 0 xs)))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn mytake [n p s]\n  (let [ [pos _]  (last (take n (filter (fn [ [k v] ] (p v)) (map vector (range) s))))]\n   (take pos s)))","problem":114,"user":"4eb0a757535d7eef3080733d"},{"problem":114,"code":"(fn take-upto [n p coll]\n  (when-let [s (seq coll)]\n    (if-not (p (first s))\n      (cons (first s) (take-upto n p (rest s)))\n      (when (> n 1)\n        (cons (first s) (take-upto (dec n) p (rest s)))))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn limit-take-while [n pred coll]\n  (lazy-seq\n   (if (pred (first coll))\n     (when (not= n 1)\n       (cons (first coll) (limit-take-while (dec n) pred (rest coll))))\n     (cons (first coll) (limit-take-while  n pred (rest coll))))))","problem":114,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn n114 [n f coll]\n  (lazy-seq \n    (if (= n 1)\n      (take-while (complement f) coll)\n      (cons (first coll) (n114 (if (f (first coll)) n (dec n)) f (rest coll))))))","problem":114,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn f [n p c]\n  (lazy-seq\n    (when-let [[h & t] (seq c)]\n      (if (p h)\n        (if (= 1 n) [] (cons h (f (- n 1) p t)))\n        (cons h (f n p t))))))","problem":114,"user":"4e8f1ac6535d65386fec2146"},{"problem":114,"code":"(fn global-take-while [n p s]\n  (loop [n n s s res []]\n    (let [[x y] (split-with (complement p) s)]\n      (if (= n 1) (concat res x)\n          (recur (dec n) (rest y) (concat res x [(first y)]))))))","user":"575b3e9be4b02ea11479935b"},{"code":"(fn global-take-while\n  [n p coll]\n  (lazy-seq\n   (when-first [a coll]\n     (if (p a)\n       (when-not (= 1 n)\n         (cons a (global-take-while (dec n) p (rest coll))))\n       (cons a (global-take-while n p (rest coll)))))))","problem":114,"user":"4e68c434535d8ccf87e9fe89"},{"code":"(fn f [n p s]\r\n  (if (or (zero? n) (empty? s))\r\n    nil\r\n    (if (p (first s))\r\n      (if (zero? (dec n))\r\n        (lazy-seq (f (dec n) p (rest s)))\r\n        (cons (first s) (lazy-seq (f (dec n) p (rest s)))))\r\n      (cons (first s) (lazy-seq (f n p (rest s)))))))","problem":114,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":114,"code":"(fn [n pred coll]\n          (letfn [(take-until [n coll]\n                    (lazy-seq\n                      (if (> n 0)\n                        (cons (first coll) (take-until (if (pred (first coll)) (- n 1) n) (rest coll))))))]\n            (drop-last (take-until n coll))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [lim f xs]\n  (loop [found 0, res [], s xs]\n    (let [cur (first s)\n          nf (if (f cur) (inc found) found)]\n      (if (= nf lim)\n        res\n        (recur nf (conj res cur) (rest s))))))","problem":114,"user":"4fe8fda4e4b0547ebccb2438"},{"problem":114,"code":"(fn tw [n p s]\n  (loop [a s\n         l (take n (filter p s))\n         ret ()]\n    (if (and (= (count l) 1)\n             (= (first a) (first l)))\n      (reverse ret)\n      (recur (rest a) (if (= (first l) (first a)) (rest l) l) (cons (first a) ret)))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":114,"code":"(fn tw [n pre coll]\n  (let [np (comp not pre)]\n    (if (>= 1 n)\n     (take-while np coll)\n     (concat (take-while np coll) (take 1 (drop-while np coll)) (tw (dec n) pre (rest (drop-while np coll)))))))","user":"566ff0a1e4b0a866af6896ec"},{"code":"(fn [n p s]\n  ((fn g [i [e & r] j]\n    (if (and (p e) (= i 1))\n      (take j s)\n      (g (- i (if (p e) 1 0)) r (+ j 1)))) n s 0))","problem":114,"user":"4e12cc9d535d04ed9115e7d2"},{"problem":114,"code":"(fn tw\n  ([n p xs] (tw n p xs 0))\n  ([n p xs count]\n   (cond\n     (empty? xs) '()\n     (and (p (first xs)) (= n (inc count))) '()\n     (p (first xs)) (cons (first xs) (lazy-seq (tw n p (rest xs) (inc count))))\n     :else\n     (cons (first xs) (lazy-seq (tw n p (rest xs) count))))))","user":"56069006e4b08b23635d3174"},{"code":"(fn global-take-while [n f coll]\n  (let [limit (last (take n (filter f coll)))]\n    (take-while #(not= % limit) coll)))","problem":114,"user":"5003deb9e4b0678c553fc445"},{"problem":114,"code":"(fn go [n f coll]\n  (lazy-seq\n    (when (pos? n)\n      (when-let [[x & xs] (seq coll)]\n        (let [n* (if (f x) (dec n) n)]\n          (when (pos? n*)\n            (cons x (go n* f xs))))))))","user":"4ff24a1ae4b0678c553fc337"},{"code":"(fn [n p s]\n           ((fn f [m r c]\n                (if (or (empty? c) (= m n))\n                    (drop-last r)\n                    (f (if (p (first c)) (inc m) m) (conj r (first c)) (rest c))))\n            0 [] s))","problem":114,"user":"4f34eb87e4b0e243712b1eba"},{"problem":114,"code":"(fn c114\n  ([n t p s]\n   (let [f (first s)\n         x (p f)]\n     (if (and x (= (dec n) t))\n       []\n       (cons f (c114 n (if x (inc t) t) p (next s))))))\n  ([n p s]\n   (c114 n 0 p s)))","user":"57d0cd58e4b0bd073c20235e"},{"problem":114,"code":"(fn f [n p xs]\n    (let [k (if (p (first xs)) (dec n) n)]\n      (if (> k 0)\n        (cons (first xs)\n              (lazy-seq (f k p (rest xs)))))\n      )\n    )","user":"596d630ae4b069c0a1a19846"},{"code":"(fn global-take-while [n p s]\n\t(cond\n\t\t(empty? s)\n\t\t[]\n\t\t(and (p (first s)) (<= n 1))\n\t\t[]\n\t\t(and (p (first s)) (> n 1))\n\t\t(cons (first s) (global-take-while (dec n) p (rest s)))\n\t\t(not (p (first s)))\n\t\t(cons (first s) (global-take-while n p (rest s)))\n\t)\n)","problem":114,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn g-take-while [n p s]\n  (let [elem (first s)\n        n' (if (p elem) (dec n) n)]\n    (if (not (zero? n'))\n      (cons elem\n        (lazy-seq (g-take-while n' p (rest s)))))))","problem":114,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn l [n p s]\n  (if (seq s)\n      (if (p (first s))\n          (if (> n 1)\n              (lazy-seq (cons (first s) (l (dec n) p (rest s))))\n              ())\n          (lazy-seq (cons (first s) (l n p (rest s)))))\n      ()))","problem":114,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":114,"code":"(fn take-n-while [n f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (if (f (first s))\n       (when (> n 1)\n         (cons (first s) (take-n-while (dec n) f (rest s))))\n       (cons (first s) (take-n-while n f (rest s)))))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(take-with-counter [n p s c]\n                             (cond (= n c) '()\n                                   (p (first s)) (lazy-seq (cons (first s)\n                                                                 (take-with-counter n p (rest s) (inc c))))\n                                   :else (lazy-seq (cons (first s)\n                                                         (take-with-counter n p (rest s) c)))))]\n    (butlast (take-with-counter n p s 0))))","user":"60264d89e4b0d5df2af2222d"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(helper [l so-far]\n            (let [match (if (p (first l)) 1 0)]\n              (if (>= (+ match so-far) n) \n                []\n                (cons (first l) (helper (rest l) (+ match so-far))))))]\n    (helper s 0)))","user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":114,"code":"(fn ThisFunc [ItemsLeft Cond Seq]\n    (let [First (first Seq)] \n      ;; no first item - quit\n      (if (or (nil? First) (zero? ItemsLeft))\n        nil\n        (let [Result (Cond First)]\n          ;; if Cond is true and it is the last case\n          (if (and Result (= 1 ItemsLeft))\n            nil\n              (lazy-seq \n                (cons First\n                  (ThisFunc (if Result (dec ItemsLeft) ItemsLeft) Cond (rest Seq))\n                )\n              )\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn global-take-while\n   ([n p s] (global-take-while n p s []))\n   ([n p s res]\n      (if (zero? n)\n        (butlast res)\n        (let [x (first s)]\n          (if (p x)\n            (recur (dec n) p (rest s) (conj res x))\n            (recur n p (rest s) (conj res x)))))))","problem":114,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn f [n pred coll]\n  (when-let [[x & xs] (seq coll)]\n    (let [nn (if (pred x) (dec n) n)]\n      (when (pos? nn)\n        (cons x (lazy-seq (f nn pred xs)))))))","problem":114,"user":"4dbb0b6c535d1e037afb21b0"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(take-until [[fst & rst :as s] p-count]\n            (when (and (< p-count n) (not-empty s))\n              (let [new-p-count (if (p fst) (inc p-count) p-count)]\n                (lazy-seq\n                 (cons fst (take-until rst new-p-count))))))]\n    (drop-last (take-until s 0))))","user":"54684c3be4b00cfc9eacc139"},{"problem":114,"code":"(fn take-to-n [n p s]\n  (if (seq s)\n    (if (p (first s))\n      (if (= 1 n)\n        []\n        (lazy-seq (cons (first s) (take-to-n (dec n) p (rest s)))))\n      (lazy-seq (cons (first s) (take-to-n n p (rest s)))))\n    []))","user":"55f20e4be4b06e875b46ce40"},{"problem":114,"code":"(fn tw\n    [n p [a & r]]\n    (when a\n      (let [n' (if (p a) (dec n) n)]\n        (when (pos? n')\n          (cons a (lazy-seq (tw n' p r)))))))","user":"59fa241ee4b0ca45a743a358"},{"problem":114,"code":"(fn [n p coll]\n  (lazy-seq \n   (loop [[x & more] coll i 0 r []]\n     (if (= n i)\n       (butlast r)\n       (recur more (if (p x) (inc i) i) (conj r x))))))","user":"56ae214ce4b03c432f18735a"},{"code":"(fn __ [n pred coll]\n  (lazy-seq\n   (if (= n 1)\n     (take-while #(not (pred %)) coll)\n      (concat (take-while pred coll) (list (first (drop-while pred coll)))\n         (__ (dec n) pred (rest (drop-while pred coll)))))))","problem":114,"user":"4fa719c0e4b081705acca1bf"},{"problem":114,"code":"(fn g [n pred [h & t]]\n (when h\n  (cond\n   (pred h) (if (> n 1) (cons h (g (dec n) pred t)))\n   (pos? n) (cons h (g n pred t)))))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn f [n p s]\n  (if (and (p (first s)) (= n 1))\n      '()\n      (cons (first s) (f (if (p (first s)) (dec n) n) p (rest s)))))","problem":114,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":114,"code":"(fn gtw [n pred [h & t]]\n  (let [n (if (pred h) (dec n) n)]\n    (when (and h (pos? n))\n      (cons h (lazy-seq (gtw n pred t))))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":114,"code":"(fn [n p s]\n  (loop [ans '() c 0 tmps s]\n    (if (= c n)\n      (reverse ans)\n      (if (and (p (first tmps)) (= (inc c) n))\n        (recur ans (inc c) (rest tmps))\n        (if (p (first tmps))\n          (recur (conj ans (first tmps)) (inc c) (rest tmps))\n          (recur (conj ans (first tmps)) c (rest tmps)))))))","user":"59368ccae4b02506e01a297a"},{"problem":114,"code":"(fn gtw [n f [h & t]] (when-not (or (zero? n) (and (= n 1) (f h))) (cons h \n(gtw (if (f h) (dec n) n) f t))))","user":"59358f74e4b04f87174def52"},{"problem":114,"code":"(fn p-114 [n pred col]\n  (letfn [(n-time-pred [pred n]\n            (let [a (atom n)]\n              (fn [x]\n                (cond (zero? @a) false\n                      (pred x) (if (zero? (swap! a dec))\n                                   false\n                                   true)\n                      :else true))))]\n    (take-while (n-time-pred pred n) col)))","user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn take-n-while [n f ls]\n  (lazy-seq\n    (cond\n      (<= n 0) nil\n      (empty? ls) nil\n      (and (= n 1) (f (first ls))) nil\n      (f (first ls)) (cons (first ls)\n                           (take-n-while (dec n) f (rest ls)))\n      :else (concat (take-while (complement f) ls)\n              (take-n-while n f (drop-while (complement f) ls))))))","problem":114,"user":"4ddbfb8a535d02782fcbea00"},{"code":"(fn [n p l] (->> l\n                (reductions (fn [[_ c] v] (vector v (if (p v) (inc c) c))) [nil 0])\n                rest\n                (take-while #(< (second %) n))\n                (map first)))","problem":114,"user":"525f51bde4b0cb4875a45dc8"},{"problem":114,"code":"(fn take-w [n pred s]\n  (drop-last\n    (loop [n n, s s, acc []]\n      (if (<= n 0) acc\n        (if (pred (first s))\n          (recur (dec n) (rest s) (concat acc [(first s)] ))\n          (recur n       (rest s) (concat acc [(first s)])))))))","user":"53065acbe4b02e8216869792"},{"code":"(fn [n p s]\n  (let [i (loop [n n i 0 s s]\n            (if (pos? n)\n              (if (seq s)\n                (if (p (first s))\n                  (recur (dec n) (inc i) (rest s))\n                  (recur n (inc i) (rest s)))\n                i)\n              (dec i)))]\n    (take i s)))","problem":114,"user":"50b1d166e4b03ea880433554"},{"problem":114,"code":"(fn [n f l]\n  (loop [n n\n         l l\n         acc []]\n    (if (zero? n)\n      (drop-last acc)\n      (let [d (drop-while (complement f) l)]\n        (recur (dec n)\n               (rest d)\n               (concat acc (take-while (complement f) l) [(first d)]))))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn take-n-while [n p coll]\n  (loop [result []\n         coll coll\n         order 0]\n    (if (or (and (p (first coll))\n                 (= n (+ order 1)))\n            (not (seq coll)))\n      result\n      (recur (conj result (first coll))\n             (next coll)\n             (if (p (first coll))\n               (+ order 1)\n               order)))))","problem":114,"user":"531d34cfe4b08068f379edac"},{"code":"(fn [n pred col]\n  (let [g \n        (fn g [k lst res]\n          (cond (or (empty? lst) (= 0 k)) (rest res)\n                (pred (first lst)) (recur (dec k) (rest lst) (cons (first lst) res))\n                :default (recur k (rest lst) (cons (first lst) res))))]\n    (reverse (g n col ()))))","problem":114,"user":"4e49a7bb535dc968683fc4c6"},{"code":"(fn ! [n p coll]                                                                                 \n  (if-let [s (seq coll)]                                                                             \n    (if (p (first s))                                                                                \n      (if (= n 1)                                                                                    \n        nil                                                                                          \n        (cons (first s) (! (dec n) p (rest s)))                                                    \n       )                                                                                             \n      (cons (first s) (! n p (rest s))))                                                           \n      nil))","problem":114,"user":"4f1d1299535d64f603146487"},{"code":"(fn f [n pred? coll] (if (pred? (first coll))\n                              (if (= n 1) ()\n                                (cons (first coll) (lazy-seq (f (dec n) pred? (rest coll)))))\n                              (cons (first coll) (lazy-seq (f n pred? (rest coll))))))","problem":114,"user":"50310b8be4b05b7df5a0b84d"},{"problem":114,"code":"(fn twg [n p [s1 & ss]] \n  (let [n1 (if (p s1) (dec n) n)] \n    (if (zero? n1) [] (lazy-seq (cons s1 (twg n1 p ss))))))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":114,"code":"(fn tw [n p s]\n  (lazy-seq\n    (let [f (first s) match (p f)]\n      (if (or (> n 1) (not match))\n        (cons f (tw (if match (dec n) n) p (rest s)))))))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn take-until-nth\n  [n pred xs]\n  (lazy-seq\n   (when-let [[x & xs] (seq xs)]\n     (let [n (if (pred x) (dec n) n)]\n       (when-not (zero? n)\n         (cons x (take-until-nth\n                  n pred xs)))))))","problem":114,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn f [i p s]                                                           \n  (lazy-seq\n   (let [j (if (p (first s))\n             (dec i)\n             i)]\n     (if (zero? j)\n       ()\n       (cons (first s) (f j p (rest s)))))))","problem":114,"user":"52753740e4b03e8d9a4a74c1"},{"problem":114,"code":"(fn gtw [n p [x & r]]\n  (lazy-seq\n   (when x\n     (let [remaining (if (p x) (dec n) n)]\n       (when (pos? remaining)\n         (cons x (gtw remaining p r)))))))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn [n f s] (drop-last (\n(fn thisfunc [n f s]\n  (if (zero? n)\n    ()\n    (cons (first s) \n      (lazy-seq (thisfunc (if (f (first s)) (dec n) n) f (rest s))))))\n  n f s)))","problem":114,"user":"4dd9d299535d2dad7130b5dd"},{"code":"(fn [n p s]\n  (loop [n n, p p, [fs & rs] s, q []]\n    (if\n      (or (nil? s) (and (p fs) (= n 1))) q\n      (recur (if (p fs) (dec n) n) p rs (conj q fs)))))","problem":114,"user":"504c8165e4b09724c857af31"},{"problem":114,"code":"(fn [n p s]\n  (first\n   (split-at\n    (.indexOf s ((into [] (filter p s)) (dec n)))\n    s)))","user":"559067ace4b0277789237670"},{"code":"(fn [n p xs]\n  (let [x (nth (filter p xs) (dec n))]\n    (take-while #(not= x %) xs)))","problem":114,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn f [n p [ft & rt]]\n  (if (p ft)\n    (if (> n 1)\n      (cons ft (f (dec n) p rt)))\n    (cons ft (f n p rt))))","problem":114,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn self [n p xs]\n  (let [f (first xs) \n        ff #(cons f (lazy-seq (self % p (rest xs))))]\n      (cond \n        (empty? xs) nil\n        (p f) (if (= 1 n) (self n p nil) (ff (dec n)))\n        :else (ff n))))","problem":114,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [n p coll]\n  (loop [acc [], matched 0, xs coll]\n    (if (or (empty? xs) (= matched n))\n      (lazy-seq (butlast acc))\n      (let [x (first xs)]\n        (recur (conj acc x) (if (p x) (inc matched) matched) (rest xs))))))","problem":114,"user":"500ff421e4b0ae202717946f"},{"code":"(fn [n p? col]\r\n   (take (last (take n (keep-indexed #(if (p? %2) %1) col))) col))","problem":114,"user":"50435689e4b034ff00315d21"},{"code":"(fn twg [n p c] (if (or (and (p (first c)) (= n 1)) (empty? c)) [] (cons (first c) (twg (if (p (first c)) (dec n) n) p (rest c)))))","problem":114,"user":"504f191ae4b0e7ad84dbc4ba"},{"code":"(fn f [n pred [x & xs]]\n  (if (pred x)\n    (if (= n 1)\n      ()\n      (cons x (f (dec n) pred xs)))\n    (cons x (f n pred xs))))","problem":114,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"code":"(fn take-while-n [n p xs]\r\n  (let [[as bs] (split-with (comp not p) xs)]\r\n\t\t(if (> n 1)\r\n\t\t\t(concat as [(first bs)] (take-while-n (dec n) p (rest bs)))\r\n\t\t\tas)))","problem":114,"user":"4dd6d6a0535d2dad7130b5ca"},{"code":"(fn f [n pred s]\n  (pop \n   (loop [acc [] n n [s1 & ss] s]\n     (if (zero? n)\n       acc\n       (recur (conj acc s1)\n              (if (pred s1) (dec n) n)\n              ss)))))","problem":114,"user":"510db6cde4b078ea71921145"},{"code":"(fn mtake-while [n f s]\n  (lazy-seq\n   (when-let [[c & r] (seq s)]\n     (let [m (if (f c) (dec n) n)]\n       (when (pos? m)\n         (cons c (mtake-while m f r)))))))","problem":114,"user":"50705072e4b07bd6ad9b9f27"},{"code":"(fn [n x c]\n  (let [a (atom n)]\n    (letfn [(td [] (pos? (swap! a dec)))]\n      (take-while #(or (not (x %)) (td)) c))))","problem":114,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn my-take-while [n pred? seq]\n      (lazy-seq\n\t      (if (empty? seq)\n\t\t  ()\n\t\t  (let [f (first seq)]\n\t\t       (if (pred? f)\n\t\t\t   (if (= n 1)\n\t\t\t       ()\n\t\t\t       (cons f (my-take-while (dec n) pred? (rest seq))))\n\t\t\t   (cons f (my-take-while n pred? (rest seq))))))))","problem":114,"user":"4dd62278535d2dad7130b5c7"},{"problem":114,"code":"(fn ^:static\n  global-takewhile\n  [n p xs]\n  (loop [m (dec n)\n         ys []\n         [z & zs :as vs] xs]\n    (if (zero? m)\n      (concat ys (take-while (complement p) vs))\n      (recur (if (p z) (dec m) m) (conj ys z) zs))))","user":"506f0968e4b09350ab4199f5"},{"problem":114,"code":"(fn global-take-while [n pred xs]\n  (loop [ctr 0 xs xs acc []]\n    (cond \n      (and (>= ctr (- n 1)) (pred (first xs))) acc\n      (pred (first xs)) (recur (inc ctr) (rest xs) (conj acc (first xs)))\n      :else (recur ctr (rest xs) (conj acc (first xs)))\n      )))","user":"4ff769bce4b0678c553fc38f"},{"problem":114,"code":"(fn [n p s] (let\n              [items (fn [i] (count (filter #(p (nth s %)) (range (min (inc i) (count s))))))]\n              (take (first (filter #(>= (items %) n) (range))) s)))","user":"5b465b8be4b02d533a91bc65"},{"code":"(fn f [n p s]\n  (let [x (first s)\n        z (if (p x) (dec n) n)]\n    (when (> z 0) \n      (cons x (f z p (rest s))))))","problem":114,"user":"4da3e51330acd6ed10482a68"},{"problem":114,"code":"#(subvec %3 0 (.indexOf %3 (last (take %1 (filter %2 %3)))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":114,"code":"#(loop[c 0 r [] n %1 f %2 v %3]\n   (if\n    (or (>= c n) (not (seq v))) (drop-last r)\n    (let[cv (first v)\n         nr (conj r cv)\n         nv (next v)]\n      (recur (if (f cv) (inc c) c) nr n f nv))))","user":"541619e8e4b01498b1a719f9"},{"problem":114,"code":"(fn f [n pred coll]\n  (lazy-seq\n   (if (empty? coll)\n     ()\n     (let [head (first coll)\n           pred-head (pred head)]\n       (cond (and pred-head (<= n 1)) ()\n             pred-head (cons head (f (dec n) pred (rest coll)))\n             :else (cons head (f n pred (rest coll))))))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn g [n p s] \n   (vec (if (p (first s))\n    (if (> n 1)\n     (cons (first s)\n           (lazy-seq (g (dec n) p (next s))))\n         '())\n     (cons (first s)\n           (lazy-seq (g n  p (next s)))))))","problem":114,"user":"4f04a06d535dcb61093f6bd9"},{"problem":114,"code":"; Naive solution that isn't actually lazy\n\n;; (fn [n pred coll]\n;;   (let [nth-match (nth (filter pred coll) (dec n))]\n;;     (take-while #(not= % nth-match) coll)))\n\n\n; Lazy solution\n\n(fn global-take-while [n pred coll]\n  (if (or (empty? coll)\n          (and (pred (first coll)) (= n 1)))\n    []\n    (cons (first coll)\n          (lazy-seq (global-take-while (if (pred (first coll)) (dec n) n)\n                                       pred\n                                       (rest coll))))))","user":"54cc26c1e4b057c6fda3a28a"},{"code":"(fn [n pred s]\n  (let [ixs (keep-indexed #(when (pred %2) %1) s)]\n    (take (nth ixs (dec n)) s)))","problem":114,"user":"524b0645e4b09eba1c0223bf"},{"code":"(fn gtw [n f s]\n  (let [fst (first s)]\n    (cond (and (f fst) (= n 1)) []\n          (f fst) (lazy-seq (cons fst (gtw (- n 1) f (rest s))))\n          :else (lazy-seq (cons fst (gtw n f (rest s)))))))","problem":114,"user":"4f62b29ce4b0defedf855fd9"},{"code":"(fn gtake-while [n f s]\n  (lazy-seq\n   (when-let [s (seq s)]\n     (let [h (first s)\n           n (if (f h) (dec n) n)]\n       (when (> n 0)\n         (cons h (gtake-while n f (rest s))))))))","problem":114,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"(fn tw [n f l]\n  (if (f (first l))\n    (if (= 1 n)\n      '()\n      (cons (first l) (lazy-seq (tw (dec n) f (rest l)))))\n    (cons (first l) (lazy-seq (tw n f (rest l))))))","problem":114,"user":"52379c46e4b0fae3832e99db"},{"problem":114,"code":"(fn [n pred lst]\n  (loop [c 0 d[] s lst]\n    (if (pred (first s)) (if (= (- n 1) c) d\n                           (recur (inc c) (conj d (first s)) (rest s)))\n      (recur c (conj d (first s)) (rest s)))))","user":"558378dce4b05c286339e115"},{"problem":114,"code":"(fn [n f s]\n     (loop [n n\n            s s\n            result []]\n            (if (f (first s))\n              (if (= 1 n)\n                result\n                (recur (dec n) (rest s) (conj result (first s))))\n              (recur n (rest s) (conj result (first s))))))","user":"5ade6bafe4b0837691e92c23"},{"code":"(fn take-while-n [n p s]\n  (let [part (take-while (comp not p) s) rst (drop (count part) s)] \n    (if (= n 1)\n      part\n      (concat part (list (first rst)) (take-while-n (dec n) p (rest rst))))))","problem":114,"user":"524be8e0e4b09eba1c0223f1"},{"code":"(fn [num pred coll]\n    (reverse\n     (loop [ret [] c coll n num]\n       (if (= 0 n)\n         ret\n         (recur (if (and (pred (first c)) (= n 1)) ret (cons (first c) ret)) (rest c) (if (pred (first c)) (dec n) n))))))","problem":114,"user":"4e89ff3d535d3e98b802328a"},{"code":"#(first \n  (last \n    (filter \n      (fn[v](< (last v) %)) \n        (map (fn[a](list a (count (filter %2 a)))) \n            (map (fn[a](take a %3)) (range 1 (count %3)))))))","problem":114,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":114,"code":"(fn global-take-while [n p [h & t]]\n  (when-not (or (zero? n) (and (= 1 n) (p h)))\n    (lazy-seq (cons h (global-take-while (if (p h) (dec n) n) p t)))))","user":"5879d577e4b01531a375ead8"},{"code":"(fn [n pred coll] (take-while (partial not= (nth (filter pred coll) (- n 1))) coll))","problem":114,"user":"4f1b0008535d64f603146473"},{"problem":114,"code":"(fn tw [limit predicate s]\n  (:r\n   (reduce \n    (fn red [{:keys [r c stop] :as in} el]\n            (if stop\n              in\n              (if (predicate el)\n                  (if (= limit (inc c))\n                      (assoc in :stop true)\n                      {:r (conj r el) :c (inc c)})\n                  {:r (conj r el) :c c})))\n   {:r [] :c 0} s)))","user":"51aefceee4b09397d5109797"},{"code":"(fn [n p c]\n    (loop [r []\n           [x & y] c\n           a 0]\n      (let [a (if (p x)\n                (inc a)\n                a)]\n        (if (or (nil? y) (= n a))\n          r\n          (recur (conj r x)\n                 y\n                 a)))))","problem":114,"user":"4f410b63e4b0e243712b1fc5"},{"code":"(fn global-tw [n pred coll]\r\n  (loop [acc [] curr coll i 0]\r\n    (if (= i n) (drop-last acc)\r\n        (if (pred (first curr)) (recur (conj acc (first curr)) (rest curr) (inc i))\r\n            (recur (conj acc (first curr)) (rest curr) i)))))","problem":114,"user":"4f13047d535d64f60314642c"},{"problem":114,"code":"(fn take-n-while\n  ([n pred coll]\n   (take-n-while n pred coll []))\n  ([n pred [head & tail] acc]\n   (if (zero? n)\n     (drop-last acc)\n     (lazy-seq (take-n-while (if (pred head) (dec n) n) pred tail (conj acc head))))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn f [n p [h & t]]\n  (cond\n    (= n 0) []\n    (and (= n 1) (p h)) []\n    (p h) (lazy-seq (cons h (f (dec n) p t)))\n    :else (lazy-seq (cons h (f n p t)))))","problem":114,"user":"4ef6e689535dced4c769f24f"},{"problem":114,"code":"(fn [n p c]\n   (loop [n (dec n) c c s []]\n     (let [v (first c) t (p v)]\n       (if (and (zero? n) t)\n         s\n         (recur (if t (dec n) n) (next c) (conj s v))))))","user":"5f3abcc4e4b004f08c61c52b"},{"code":"(fn fun [n pred coll]\n   (cond\n    (empty? coll) nil\n    (pred (first coll)) (if (= 1 n)\n                          nil\n                          (lazy-seq (cons\n                                     (first coll)\n                                     (fun (dec n) pred (rest coll)))))\n    :else (lazy-seq (cons\n                     (first coll)\n                     (fun n pred (rest coll))))))","problem":114,"user":"506c0a02e4b0eda3100c090d"},{"problem":114,"code":"(fn [n p xs]\n  (loop [xs xs res [] k 0 ]\n    (if (= k n)\n      (drop-last res)\n      (recur (rest xs) (conj res (first xs)) (if (p (first xs)) (inc k) k)))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn g-take-while [n pred s]\n\t((fn tw [n pred s ret]\n\t\t(if (or (= n 0) (empty? s)) (drop-last ret)\n\t\t(let [cur (first s)\n\t\t\t   next-s (rest s)\n\t\t\t\tnew-n (if (pred cur) (dec n) n)\n\t\t\t\tnew-ret (conj ret cur)\n\t\t\t\t]\n\t\t\t(tw new-n pred next-s new-ret)\t\n\t\t))\n\t) n pred s [])\n)","problem":114,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn gtw [n pred sequ]\r\n  (cond\r\n    (zero? n) '()\r\n    (empty? sequ) '()\r\n    (pred (first sequ)) (if (zero? (dec n))\r\n                            '()\r\n                          (lazy-seq (cons (first sequ)\r\n                                          (gtw (dec n) pred (rest sequ)))))\r\n    :else (lazy-seq (cons (first sequ)\r\n                          (gtw n pred (rest sequ))))))","problem":114,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":114,"code":"(fn [n p coll]\n    (letfn [(gen [k [f & r]]\n              (lazy-seq\n                (let [k (if (p f) (inc k) k)]\n                  (when (< k n)\n                    (cons f (gen k r))))))]\n      (gen 0 coll)))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn [n f s]\n  (take \n    (nth \n      (keep-indexed (fn [i I] (when (f I) i)) s) \n      (dec n))\n    s))","problem":114,"user":"5061cc17e4b0a30dc9a35d34"},{"problem":114,"code":"(fn state-take-while [n f [h & t]]\n  (if (f h) \n    (if (= 1 n)\n      nil\n      (cons h (state-take-while (dec n) f t)))\n    (cons h (state-take-while n f t))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [n pred coll]\n    (loop [n n\n           c coll\n           r []]\n      (if (pred (first c))\n        (if (< n 2)\n          r\n          (recur (dec n) (rest c) (conj r (first c))))\n        (recur n (rest c) (conj r (first c))))))","problem":114,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn [n p s]\n  ((fn tw [n s]\n    (cond (empty? s) '()\n      (= 1 n)\n        (if (p (first s)) \n          '() \n          (lazy-seq (cons (first s) (tw n (next s)))))\n      :else \n        (lazy-seq \n          (cons (first s) \n            (tw (if (p (first s)) (dec n) n) (next s)))))) n s))","problem":114,"user":"5063fe48e4b075d771da6f9e"},{"problem":114,"code":"(fn globalTakeWhile [n f v] (loop [todo v numSats 0 res (vector)] (cond\n                                                                   (and (= (inc numSats) n) (f (first todo))) res\n                                                                   (f (first todo)) (recur (rest todo) (inc numSats) (conj res (first todo)))\n                                                                   :default (recur (rest todo) numSats (conj res (first todo))))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [n p c]\n  (loop [r [] c c i 0]\n    (if (p (first c))\n      (if (= n (inc i))\n        r\n        (recur (conj r (first c)) (next c) (inc i)))\n      (recur (conj r (first c)) (next c) i))))","problem":114,"user":"514d8084e4b019235f6c0588"},{"problem":114,"code":"(fn [n p c]\n  (loop [x 0 y c res []]\n    (if (or (= x n) (empty? y)) res\n      (recur (if (p (first y))\n               (inc x)\n               x)\n             (rest y)\n             (if (p (first y))\n               (if (= (inc x) n)\n                 res\n                 (conj res (first y)))\n               (conj res (first y)))))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"(fn take-n-while\n  [n p xs]\n  (lazy-seq\n   (let [y  (first xs)\n         ys (rest xs)\n         v  (p y)\n         m  ((if v dec identity) n)]\n       (when (> m 0) (cons y (take-n-while m p ys))))))","problem":114,"user":"51307b84e4b08c712d3fae39"},{"problem":114,"code":"(fn global-take-while [n pred [first_val & rest]]\n  (when first_val\n    (cond\n      (pred first_val) (if (> n 1) (cons first_val (global-take-while (dec n) pred rest)))\n      (> n 0) (cons first_val (global-take-while n pred rest)))))","user":"5ce2bf8ee4b0a17bb84e2b2e"},{"problem":114,"code":"(fn [n p s]\n\t(loop [n n s s a []]\n\t\t(if (= n 0)\n\t\t\t(drop-last a)\n\t\t\t(if (p (first s))\n\t\t\t\t(recur (dec n) (rest s) (conj a (first s)))\n\t\t\t\t(recur n (rest s) (conj a (first s)))))))","user":"536e5b68e4b0fc7073fd6e6d"},{"code":"(fn glob[n pred coll]\r\n (let [v (reduce #(cond (= (first %1) n) %1\r\n          (pred %2) [(inc (first %)) (conj (last %) %2)]\r\n          :else [(first %) (conj (last %) %2)]) [0 []] coll)]\r\n  (reverse (rest (reverse (second v))))))","problem":114,"user":"5065bd94e4b0148eb3925aed"},{"problem":114,"code":"(fn gtake-while [n pred [s & sq]]\n  (cond (nil? s) nil\n        (pred s) (if (> n 1) (cons s (lazy-seq (gtake-while (- n 1) pred sq)))\n                   nil)\n        :else (cons s (lazy-seq (gtake-while n pred sq)))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"code":"(fn [n f xs]\n  (loop [[x & rst] xs\n         cnt 0\n         res []]\n    (if x\n      (let [new-cnt (if (f x) (inc cnt) cnt)]\n        (if (< new-cnt n)\n          (recur rst new-cnt (conj res x))\n          res))\n      res)))","problem":114,"user":"4f437751e4b0d7d3c9f3fd20"},{"code":"(fn [n p ss]\n  (loop [s ss\n         n n\n         r []]\n    (if (empty? s)\n      r\n    (if (p (first s))\n      (if (= n 1)\n        r\n        (recur (rest s)\n               (dec n)\n               (conj r (first s))))\n      (recur (rest s)\n             n\n             (conj r (first s)))))))","problem":114,"user":"4e7dd982535db169f9c796ee"},{"problem":114,"code":"(fn take-while-n [n pred coll]                                                                                                  \n    (let [[left right] (split-with #(not (pred %)) coll)]                                                                                               \n        (if (= n 1)                                                                                                             \n            left                                                                                                                                        \n            (concat left (list (first right)) (take-while-n (dec n) pred (rest right))))))","user":"558b50d5e4b027778923762b"},{"code":"(fn gtake-while\n  [n pred coll]\n  (letfn [(step [i coll]\n                (when-let [fst (first coll)]\n                  (lazy-seq\n                  (if (and (pred fst) (= n (inc i))) []\n                  (if (pred fst) \n                    (cons fst (step (inc i) (rest coll)))\n                    (cons fst (step i (rest coll))))))))]\n         (step 0 coll)))","problem":114,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":114,"code":"(fn _ [n f s]\n  (lazy-seq\n    (when s\n      (let [[b & r] s]\n        (if (f b)\n          (if (not= n 1)\n            (cons b (_ (dec n) f r)))\n          (cons b (_ n f r)))))))","user":"4ec1b090535dfed6da9c6db5"},{"code":"(fn f [n p s]\n  (cond\n    (zero? n)\n      '()\n    (p (first s))\n      (if (= n 1)\n        '()\n        (cons (first s)\n              (f (dec n) p (rest s))))\n    true\n      (cons (first s)\n            (f n p (rest s)))))","problem":114,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":114,"code":"(fn gw\n  [n f coll]\n  (butlast (let [cnt (atom 0) res (atom [])]\n             (doseq [x coll\n                     :while (< @cnt n)]\n               (when (f x) (swap! cnt inc))\n               (swap! res conj x))\n             @res))\n  )","user":"59f44189e4b0966464fe6aab"},{"problem":114,"code":"(fn [n f coll]\n  (let [count-up (fn [c v] (if (or (false? v) (nil? v)) c (inc c)))]\n    (loop [cs (for [x coll :let [y (f x)]] [x y]) r [] c 0]\n      (if (= n c)\n        (butlast r)\n        (recur (rest cs) (conj r (-> cs first first)) (count-up c (-> cs first last)))))))","user":"606a70a5e4b069485764ddf2"},{"problem":114,"code":"(fn [n p c]\n  (let [f (fn -f [n p [h & o]]\n            (when-not (< n 1)\n              (cons h (-f (if (p h) (dec n) n) p o))))]\n    (butlast (f n p c))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":114,"code":"(fn f [n p xs]\n   (lazy-seq (let [[x & xss] xs\n                   s (p x)\n                   n' (if s\n                        (dec n)\n                        n)]\n               (if (and s (= n 1))\n                 nil\n                 (cons x (f n' p xss))))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn global-take-while [n pred coll]\n  (letfn [(hoge [coll accum]\n            (lazy-seq\n             (when (seq coll)\n               (if-let [head (seq (take-while pred coll))]\n                 (let [cnt (+ accum (count head))]\n                   (if (> n cnt)\n                     (concat head (hoge (drop-while pred coll) cnt))))\n                 (concat [(first coll)] (hoge (rest coll) accum))))))]\n    (hoge coll 0)))","problem":114,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":114,"code":"(fn [n pred coll]\n  (loop [coll coll\n         acc '()\n         n n]\n    (let [elem (first coll)]\n      (if (zero? n)\n        (butlast acc)\n        (recur (rest coll) (concat acc (list elem)) (if (pred elem) (dec n) n))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":114,"code":"(fn lazy-take-while [n p sq]\n  (if (or (and (= 1 n)\n               (p (first sq)))\n          (empty? sq))\n    '()\n    (lazy-seq (cons (first sq) (lazy-take-while (if (p (first sq)) (dec n) n) p (rest sq))))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"code":"(fn take-until [n pred aseq]\n  (let [occurrences (reductions + (map #(if (pred %) 1 0) aseq))]\n    (map first\n      (take-while (fn [[_ occur]] (< occur n))\n        (map vector aseq occurrences)))))","problem":114,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":114,"code":"(fn g-take-while [n pred [x & xs]]\n  (lazy-seq\n   (when-not (and (= 1 n) (pred x))\n     (cons x (g-take-while (if (pred x) (dec n) n) pred xs)))))","user":"58ffac9de4b0438e51c2cffd"},{"problem":114,"code":"(fn g-take-while [i p [x & xs]]\n  (let [i (if (p x) (dec i) i)]\n    (if (zero? i) ()\n      (cons x\n            (lazy-seq\n              (g-take-while i p xs))))))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn global-take-while [n p s]\n  (if (and (= n 1) (p (first s)))\n    []\n    (cons\n     (first s)\n     (lazy-seq\n      (global-take-while (- n (if (p (first s)) 1 0)) p (rest s))))))","problem":114,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn state-while [n fun [f & r]]\n  (if (fun f)\n    (if (= n 1) nil\n        (cons f (state-while (- n 1) fun r)))\n    (cons f (state-while n fun r))))","problem":114,"user":"4fb1d907e4b081705acca282"},{"problem":114,"code":"(fn [n p coll]\n   (loop [[c & oll] coll\n          success []\n          acc []]\n     (if (and c\n              (>= (count success) n))\n       (butlast acc)\n       (recur\n         oll\n         (if (p c)\n           (conj success c)\n           success)\n         (conj acc c)))))","user":"554bd33ce4b0a04f7929959a"},{"code":"#(butlast\n   (loop [i % s %3 r []]\n     (if (zero? i) r\n         (recur (if (%2 (first s)) (dec i) i) \n                (rest s) (conj r (first s))))))","problem":114,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [n p coll]\n  (butlast (loop [count n xs coll res []]\n             (if (or (= count 0) (empty? xs))\n               res\n               (recur (if (p (first xs)) (dec count) count) (rest xs) (conj res (first xs)))))))","problem":114,"user":"4f03f197535dcb61093f6b84"},{"code":"(fn tws [n p [h & t]]\n  (lazy-seq\n    (if (p h)\n      (when (> n 1) (cons h (tws (dec n) p t)))\n      (cons h (tws n p t)))))","problem":114,"user":"4fdec88fe4b05e33b9224f8e"},{"problem":114,"code":"(fn tw[n f sx] (\n     cond \n     (empty? sx) '()\n     (and (f (first sx)) (zero? (dec n))) '()\n     (f (first sx)) (cons (first sx) (tw (dec n) f (rest sx)))\n     :e (cons (first sx) (tw n f (rest sx)))\n    ))","user":"596f6683e4b069c0a1a19877"},{"code":"(fn [ n p s]\n        (first \n        (reduce\n            (fn [ [r st] e ]\n             (let [nst (if (p e) (inc st) st)]\n                (if (<= n nst)\n                    [r nst]\n                    [(conj r e) nst])))\n            [ (empty s) 0 ]\n            s))\n    )","problem":114,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn mtw [n p v]\n  (let [h (first v)\n        m (p h)\n        t (rest v)]\n    (if (> n 1)\n      (if m \n        (cons h (mtw (dec n) p t))\n        (cons h (mtw n p t)))\n      (if (not m)\n        (cons h (mtw n p t))))))","problem":114,"user":"4ffa8affe4b0678c553fc3bd"},{"problem":114,"code":"(fn [n p s]\n((comp butlast second)  (reduce (fn [[c v] x]\n            (if (>= c n)\n              [c v]\n              (if (p x)\n                [(inc c) (conj v x)]\n                [c (conj v x)])))\n            [0 []] s)))","user":"5504dd64e4b086ebe8a79c83"},{"problem":114,"code":"(fn my-take-while\n  [n p s]\n  (loop [n n\n         r []\n         [h & t] s]\n    (if (and h (pos? n))\n      (recur\n       (if (p h)\n         (dec n)\n         n)\n       (conj r h)\n       t)\n      (butlast r))))","user":"585dbe41e4b0f14aab7c879f"},{"code":"(fn tw [n f c]\n  (letfn [(twreal [n f c]\n (if (or (empty? c) (zero? n)) []\n (lazy-seq\n   (cons (first c)\n         (twreal (if-not (f (second c)) n (dec n))\n             f (rest c)))\n )\n))]\n(twreal (if (> n 1) (dec n) n) f c)\n))\n\n;ugly buggy solution :/","problem":114,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":114,"code":"(fn [n p coll]\n  (butlast\n   (letfn [(append [n p coll] (cons (first coll) (lazy-seq (foo n p (rest coll)))))\n           (foo [n p coll]\n             (when (pos? n)\n               (if (p (first coll))\n                 (append (dec n) p coll) \n                 (append n p coll))))]\n     (foo n p coll))))","user":"55c66ffee4b0e31453f649c2"},{"code":"(fn f [n p s]\n    (lazy-seq\n      (cond\n        (not (seq s))\n        nil\n        (p (first s))\n        (if (= n 1)\n          nil\n          (cons (first s) (f (dec n) p (rest s))))\n        :else\n        (cons (first s) (f n p (rest s))))))","problem":114,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":114,"code":"(fn take-first [n p items] \n  (let [satisfiesP (p (first items))]\n    (if (or (and satisfiesP (= 1 n)) (empty? items)) '()\n      (lazy-seq\n          (cons (first items)\n                (if satisfiesP (take-first (dec n) p (rest items))\n                  (take-first n p (rest items))\n                 )\n          )\n        )\n       )\n  )\n )","user":"575ef4b6e4b08062f99a4e78"},{"problem":114,"code":"(fn [n pred coll]\n  (loop [countdown (dec n)\n         [head & tail] coll\n         acc []]\n    (if (pred head)\n      (if (zero? countdown)\n        acc\n        (recur (dec countdown) tail (conj acc head)))\n      (recur countdown tail (conj acc head)))))","user":"4eda7cc3535d10e5ff6f530e"},{"code":"(fn tw [n f x]\n  (if (= n 1)\n    (if (f (first x))\n      '()\n      (cons (first x) (lazy-seq (tw n f (rest x))))\n      )\n    (if (f (first x))\n      (cons (first x) (lazy-seq (tw (dec n) f (rest x))))\n      (cons (first x) (lazy-seq (tw n f (rest x))))\n      )\n    )\n  )","problem":114,"user":"52586d24e4b0cb4875a45cb0"},{"problem":114,"code":"#(loop [x   %1\n       pre %2\n       col %3\n       acc ()]\n   (let [[h & t] col]\n     (cond \n      (= 1 x) (if (pre h)\n                acc\n                (recur x pre t (concat acc [h])))\n      (not (= 1 x)) (if (pre h)\n                      (recur (dec x) pre t (concat acc [h]))\n                      (recur x pre t (concat acc [h]))))))","user":"5371167fe4b0fc7073fd6ea7"},{"code":"(fn f [n p [e & s]]\n  (if (p e)\n    (when (> n 1)\n      (cons e (f (dec n) p s)))\n    (cons e (f n p s))))","problem":114,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn [n p xs ]\n  (map first\n       (rest\n        (take-while\n         (fn [[_ n]] (> n 0 ))\n         (reductions (fn [[_ n] x]\n                       [x (if (p x) (dec n) n)])\n                     [nil n] xs)))))","problem":114,"user":"50fa01bce4b07934dda8b0ba"},{"code":"(fn f [t g v] (let [c (first v) r (rest v)]\r\n  (if (g c)\r\n    (if (= t 1)\r\n      ()\r\n      (cons c (f (- t 1) g r)))\r\n    (cons c (f t g r)))\r\n))","problem":114,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn [n p v]\n  (loop [x n acc [] rst v]\n    (if (p (first rst))\n      (if (= x 1)\n        acc\n        (recur (dec x) (conj acc (first rst)) (rest rst)))\n      (recur x (conj acc (first rst)) (rest rst)))))","problem":114,"user":"4eec82fe535d93acb0a668ae"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (loop [[f & xs :as c] coll, acc [], seen 0]\n    (cond\n     (= seen n) (pop acc)\n     (empty? c) acc\n     (pred f)   (recur xs (conj acc f) (inc seen))\n     :else      (recur xs (conj acc f) seen))))","user":"541b1f25e4b01498b1a71a63"},{"code":"(fn take-all-while [n pred xs]\n  (lazy-seq\n    (if-let [head (first xs)]\n      (if (pred head)\n        (when (> n 1)\n          (cons head (take-all-while (dec n) pred (rest xs))))\n        (cons head (take-all-while n pred (rest xs)))))))","problem":114,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn take-while2 [n p s]\n  (let [l (last (take n (filter p s)))]\n    (take-while #(not= % l) s)))","problem":114,"user":"51424cc8e4b0b50abeb46b34"},{"code":"(fn [n pred coll]\n  (let [f (fn [coll] (split-with (complement pred) coll))]\n    (loop [[a [b & c]] (f coll) i (dec n)]\n      (let [[d e] (f c)]\n        (if (or (empty? c) (zero? i))\n          a\n          (recur [(into (conj (vec a) b) d) e] (dec i)))))))","problem":114,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":114,"code":"(fn t-w [n p s]\n\t(loop [li s c n r []]\n\t\t(if (or (empty? li) (zero? c))\n\t\t\t(butlast r)\n\t\t\t(recur (rest li) (if (p (first li)) (dec c) c) (conj r (first li))))))","user":"52979551e4b02ebb4ef75043"},{"code":"(fn me [n f l]\n  (if (empty? l)\n    l\n    (if (f (first l))\n      (if (= n 1)\n        []\n        (cons (first l) (me (dec n) f (next l))))\n      (cons (first l) (me n f (next l))))))","problem":114,"user":"5349ac2be4b084c2834f4a67"},{"problem":114,"code":"(fn global-take-while[n f xs]\n  (lazy-seq (loop [a n\n                   g f\n                   ys xs\n                   acc []]\n              (if (empty? ys)\n                acc\n                (let [head (first ys)\n                      tail (rest ys)\n                      pred-result (g head)\n                      next-a (if pred-result (- a 1) a)\n                      next-acc (conj acc head)]\n                  (if (and (= a 1) pred-result)\n                    acc\n                    (recur next-a g tail next-acc)))))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":114,"code":"(fn q4q114\n  [n p s]\n  (if (empty? s)\n    nil\n    (let [p-val (p (first s))\n          new-n (if p-val (dec n) n)]\n      (if (and p-val (= 1 n))\n        nil\n        (lazy-seq\n         (cons\n          (first s)\n          (q4q114 new-n p (rest s))))))))","user":"52213426e4b0e6a83c8925c4"},{"problem":114,"code":"(fn take-while12 [n p cl] (when-let [cs (seq cl)] (cons (first cl) (lazy-seq\n     (cond \n          (< 0 n) (take-while12 (dec n) p (rest cl))\n          (p (second cl)) (take-while12 n p nil)\n          :else (take-while12 n p (rest cl))\n)))))","user":"55adf4d7e4b03311e7b732af"},{"problem":114,"code":"(fn [count_ function sequence]\n  (loop [index 0\n         result '()\n         rest_ sequence]\n    (if (= index count_)\n      (reverse (pop result))\n      (if (function (first rest_))\n        (recur (inc index)\n               (conj result (first rest_))\n               (rest rest_))\n        (recur index\n               (conj result (first rest_))\n               (rest rest_))))))","user":"58637f03e4b0f14aab7c881e"},{"problem":114,"code":"(fn global-take-while [n pred coll]\r\n  (let [[head tail] (split-with (complement pred) coll)]\r\n    (lazy-cat\r\n     head (if (= n 1) ()\r\n              (cons (first tail)\r\n                    (global-take-while (dec n) pred (rest tail)))))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":114,"code":"(fn [cnt f arr]\n (loop [n 1\n        a arr\n        ans []]\n   (if (or (empty? a) (and (= n cnt) (f (first a))))\n     ans\n     (if (f (first a))\n       (recur (inc n) (rest a) (conj ans (first a)))\n       (recur n (rest a) (conj ans (first a)))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"problem":114,"code":"(fn [n p? xs]\n  (loop [n n, result [], [this & remainder] xs]\n    (let [matches?           (p? this)\n          matches-remaining  (if matches? (dec n) n)]\n      (if (and matches? (zero? matches-remaining))\n        result\n        (recur matches-remaining (conj result this) remainder)))))","user":"52f0ea04e4b05e3f0be25ee6"},{"code":"(fn [n p s]\n  (take \n    (last\n      (take n (keep-indexed #(if (p %2) %) s)))\n    s))","problem":114,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [n p sek]\n  (letfn [(sat [n sek]\n               (if (= 1 n)\n                 (take-while #(not (p %)) sek)\n                 (lazy-seq\n                   (cons \n                     (first sek)\n                     (sat \n                       (if (p (first sek)) (dec n) n) \n                       (rest sek))\n                     ))))]\n         (sat n sek)\n    ))","problem":114,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn global-take-while [n p s]\n  (let [[xs [y & ys]] (split-with (complement p) s)]\n    (concat xs\n            (if (> n 1)\n              (cons y (global-take-while (dec n) p ys))))))","problem":114,"user":"4ee3b586535d10e5ff6f5371"},{"problem":114,"code":"(fn f [lim g [x & xs]]\n  (let [lim (if (g x)\n              (dec lim)\n              lim)]\n    (lazy-seq\n     (when (pos? lim)\n       (cons\n        x\n        (f lim g xs))))))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn [n p c] ((fn check [c2 ok n2] (if (or (= 0 (count c2)) (= 0 n2)) (butlast ok) (if (p (first c2)) (check (rest c2) (conj ok (first c2)) (dec n2)) (check (rest c2) (conj ok (first c2)) n2)))) c [] n))","problem":114,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [n p s]\n  (->> (reductions (fn [[_ count] val]\n                     (if (p val)\n                       [val (inc count)]\n                       [val count]))\n                   [nil 0] s)\n       next\n       (take-while (comp (partial > n) second))\n       (map first)))","problem":114,"user":"4eae5fe4535d7eef30807325"},{"problem":114,"code":"(fn gtk [n f [x & xs]]\n  (let [t (f x)\n        m (if t (dec n) n)]\n    (if (and t (= n 1)) '()\n      (cons x (gtk m f xs)))))","user":"53b7c21ae4b047364c0444d4"},{"problem":114,"code":"(fn gtwhile [n p xs]\n  (let [h (first xs)\n        nn (if (p h) (dec n) n)]\n    (if (zero? nn) nil\n        (cons h (lazy-seq (gtwhile nn p (rest xs)))))))","user":"5866b999e4b0f14aab7c886b"},{"problem":114,"code":"(fn gtw [n pred s]\n  (cond (empty? s) (lazy-seq)\n        (pred (first s)) (if (> n 1)\n                           (lazy-seq (cons (first s)\n                                           (gtw (dec n) pred (rest s))))\n                           (lazy-seq))\n        true (lazy-seq (cons (first s)\n                             (gtw n pred (rest s))))))","user":"5b47874be4b02d533a91bc70"},{"problem":114,"code":"(fn [n p xs]\n   ((fn iter [n [x & xs]]\n      (lazy-seq\n       (if (p x) (when (> n 1) (cons x (iter (dec n) xs)))\n           (cons x (iter n xs))))) n xs))","user":"5eee7311e4b07c55ae4a0510"},{"problem":114,"code":"#(loop [n %\n        v %3\n        s []]\n   (if (or (empty? v) (= 0 n)) s\n     (let [t (%2 (first v))]\n       (recur (if t (dec n) n) (rest v) (if (and (= 1 n) t) s (conj s (first v)))))))","user":"55e732c5e4b050e68259b492"},{"code":"(fn take-n-while [n pred? coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [n (if (pred? (first s)) (dec n) n)]\n        (if (> n 0)\n          (cons (first s) (take-n-while n pred? (next s))))))))","problem":114,"user":"51a97f7ae4b08d8ec191b827"},{"problem":114,"code":"(fn take-while-nth [n p coll]\n    (if (seq coll)\n      (if (p (first coll))\n        (if (= n 1)\n          nil\n          (cons (first coll) (lazy-seq (take-while-nth (dec n) p (rest coll)))))\n        (cons (first coll) (lazy-seq (take-while-nth n p (rest coll)))))\n      coll))","user":"5c9dcb36e4b048ec896c5b1d"},{"problem":114,"code":"(fn func [n pred [x & xs :as coll]]\n  (if (= 1 n)\n    (take-while (complement pred) coll)\n    (cons x (lazy-seq (func (if (pred x) (dec n) n) pred xs)))))","user":"554b8572e4b0a04f79299589"},{"problem":114,"code":"(fn global-take-while\n  [n predicate xs]\n  (loop [result [] n n [x & xs] xs]\n    (cond\n      (nil? x) result\n      (predicate x) (if (= n 1) result (recur (conj result x) (dec n) xs))\n      :else (recur (conj result x) n xs)\n      ))\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":114,"code":"(fn __ [n f xs]\n  (if (f (first xs))\n    (if (> n 1)\n      (lazy-seq (cons (first xs) (__ (dec n) f (rest xs)))))\n    (lazy-seq (cons (first xs) (__ n f (rest xs))))))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [n f l]\n  (loop [r []\n         i 0\n         i1 (first l)\n         s (rest l)]\n    (if (or (empty? s) (= i n))\n      (butlast r)\n      (recur (conj r i1)\n             (if (f i1) (inc i) i)\n             (first s)\n             (rest s)))))","problem":114,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn t [n p [x & xs]]\r\n    (lazy-seq\r\n      (let [n (if (p x) (dec n) n)]\r\n        (when (pos? n)\r\n          (cons x (t n p xs))))))","problem":114,"user":"4f58d92fe4b0a7574ea71858"},{"problem":114,"code":"(fn [n p s]\n  (loop [n n\n         s s\n         result []]\n    (let [isptrue? (p (first s))\n    \t  cnt  (if isptrue? (dec n) n)]\n      (if (= cnt 0)\n          result\n          (recur cnt\n                 (rest s)\n                 (conj result (first s)))))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":114,"code":"(fn fi [l p s]\n     (let [f (first s)\n           po (p f)]\n       (if (and (= 1 l) po)\n         ()\n         (lazy-seq (cons f (fi (if po (dec l) l) p (rest s)))))))","user":"56b6e354e4b0982f16b37e41"},{"problem":114,"code":"(fn [n p v]\n  ((fn take-recur [i rst]\n     (lazy-seq (if (empty? rst) nil\n         (let [cur (first rst)]\n           (cond (and (p cur) (= i 1)) nil\n                 (p cur) (cons cur (take-recur (dec i) (rest rst)))\n                 :else (cons cur (take-recur i (rest rst)))))))) n v))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn gtw [n p s]\n  (lazy-seq\n    (if (p (first s))\n      (if (= 1 n)\n        '()\n        (cons (first s) (gtw (dec n) p (drop 1 s))))\n      (cons (first s) (gtw n p (drop 1 s))))))","problem":114,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn [n p c]\n  (let [t (nth (filter p c) (- n 1))]\n    (take-while #(not= % t) c)))","problem":114,"user":"514721c6e4b0d520409ed392"},{"code":"(fn [n p s]\r\n  (let [m\r\n    {4 [2 3 5 7 11 13]\r\n     1 [\"this\" \"is\"]\r\n     3 [\"this\" \"is\" \"a\" \"sentence\"]}]\r\n  (get m n)))","problem":114,"user":"4dfe65a1535d04ed9115e787"},{"problem":114,"code":"(fn f [n pred coll]\n  (lazy-seq\n   (when-let [[x :as xs] (seq coll)]\n     (let [n (if (pred x) (dec n) n)]\n       (when (pos? n)\n         (cons x (f n pred (rest xs))))))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":114,"code":"(fn f [n pred [fst & rst :as sx]]\n  (cond\n    (not (seq sx)) nil\n    (and (= n 1) (pred fst)) nil\n    :else (cons fst (f (if (pred fst) (- n 1) n) pred rst))))","user":"56795deae4b05957ce8c6187"},{"problem":114,"code":"(fn take-up-to-n[n p xs]\n   (let [[fst & rst] xs]\n     (cond (not (p fst)) (lazy-seq (cons fst (take-up-to-n n p rst)))\n           (= n 1) nil\n           :else (lazy-seq (cons fst (take-up-to-n (dec n) p rst))))))","user":"5d4b2155e4b0776584bd6f28"},{"code":"(fn [n p coll]\n  (take (count (take-while\n                #(> n (count (filter p (take % coll))))\n                (iterate inc 1)))\n        coll))","problem":114,"user":"5225271fe4b01819a2de42f9"},{"problem":114,"code":"(fn f [n p [x & xs :as s]]\n  (when s\n    (lazy-seq\n     (if (p x)\n       (when (> n 1)\n         (cons x (f (dec n) p xs)))\n       (cons x (f n p xs))))))","user":"5712854ce4b07c98581c3a89"},{"problem":114,"code":"(fn [n p s]\n   ((fn take-while-nth [occurs s]\n     (let [to-take (- n occurs)\n           elements (take to-take s)\n           filtered-elements (filter p elements)\n           found (count filtered-elements)]\n      (if (or (empty? elements) (>= (+ found occurs) n))\n        []\n        (concat elements (take-while-nth (+ found occurs) (drop to-take s))))))\n    0 s))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn [n p s]\n    (take\n      (first\n        (nth (filter #(p (second %)) (map-indexed list s)) (dec n)))\n      s))","problem":114,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":114,"code":"(fn tw4 [n pre lst]\n  (take-while #(not= %\n                     (nth (filter pre lst) (dec n))) lst))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"(fn q114 [n p coll]\n  (let [[xs ys] (split-with (complement p) coll)]\n    (prn \"x:\" xs)\n    (prn \"y:\" ys)\n    (lazy-seq\n      (if (or (empty? ys) (>= 1 n))\n        xs\n        (concat xs (list (first ys)) (q114 (dec n) p (rest ys)))))))","problem":114,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":114,"code":"(fn f [n p s]\n  (let [i (first s)\n        t (p i)\n        n (if t (dec n) n)\n        r (rest s)]\n    (if (< n 1)\n      []\n      (concat [i] (f n p r)))))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn f [n p s]\n  (if (or (not (seq s)) (and (p (first s)) (= n 1)))\n    nil\n    (cons (first s) (lazy-seq (f (if (p (first s)) (dec n) n) p (rest s))))))","problem":114,"user":"504f865ee4b0a02f9cffde90"},{"code":"(fn [n p sequence]\r\n  (letfn [(sub [n sequence]\r\n            (if (empty? sequence)\r\n              nil\r\n              (let [n (if (p (first sequence))\r\n                        (- n 1)\r\n                        n)]\r\n                (if (= n 0)\r\n                  nil\r\n                  (lazy-seq (cons (first sequence) (sub n (rest sequence))))))))]\r\n    (sub n sequence)))","problem":114,"user":"4de2f44f535d08e6dec9fdec"},{"code":"#(loop [s %3, n %, r []]\n    (let [f (first s)\n          i (if (%2 f) (dec n) n)]\n      (if (= 0 i)\n\t\t\tr\n\t\t\t(recur (next s) i (conj r f)))))","problem":114,"user":"4daddc19c9a9d6ed4599dc57"},{"problem":114,"code":"(fn [n p coll]\n  (second (reduce (fn [[n' coll'] item]\n                    (let [n'' (if (p item) (inc n') n')\n                          coll'' (if (>= n'' n) coll' (conj coll' item))]\n                      [n'' coll'']))\n          [0 []]\n          coll)))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn g-t-w\n  ([n pred coll] (g-t-w n 0 pred coll []))\n  ([n seen pred coll res]\n     (if (pred (first coll))\n       (if (= (inc seen) n)\n         res\n         (g-t-w n (inc seen) pred (rest coll) (conj res (first coll))))\n       (g-t-w n seen pred (rest coll) (conj res (first coll))))))","problem":114,"user":"513d121fe4b0e544971636a2"},{"code":"(fn twg [n pred coll]\n      (let [f (first coll)]\n        (lazy-seq\n          (when (or (> n 1) (and (= 1 n) (not (pred f))))\n            (cons (first coll) (twg (if (pred f) (dec n) n ) pred (rest coll)))))))","problem":114,"user":"50f48298e4b004d364930527"},{"code":"(fn global-take-while [n f aseq]\n  (if (empty? aseq)\n    '()\n    (lazy-seq\n      (if (f (first aseq))\n        (if (zero? (dec n))\n          []\n          (cons (first aseq) (global-take-while (dec n) f (rest aseq)))\n          )\n        (cons (first aseq) (global-take-while  n f (rest aseq)))\n        )\n      )\n    )\n  )","problem":114,"user":"5094057fe4b097f48cc38593"},{"problem":114,"code":"(fn gtw [n f xs]\n  (if (empty? xs)\n    ()\n    (let [x (first xs)\n          newn (if (f x) (dec n) n)]\n      (if (<= newn 0)\n        ()\n        (lazy-seq (cons x (gtw newn f (rest xs))))))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn [n p s]\n  ((reduce (fn [{:keys [c l] :as m} e]\n              (let [nc (if (p e) (inc c) c)\n                    nl (conj l e)]\n                (assoc m :c nc :l nl nc nl))) {:c 1 :l []} s) n))","problem":114,"user":"4ee9ddb8535d93acb0a66896"},{"problem":114,"code":"(fn [n p s]\n  (let [last-item (last\n                   (take n\n                         (filter p s)))]\n    (take-while #(not= last-item %) s)))","user":"5405ae2be4b0addc1aec6671"},{"problem":114,"code":"(fn my-take-while [n p [cur & more]]\n  (when cur\n    (when-not (and (= n 1) (p cur))\n \t  (lazy-seq (cons cur (my-take-while (if (p cur) (dec n) n) p more))))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":114,"code":"(fn x [n f s](letfn [(a [[nn ss] i]\n(if \n (pos? nn) \n (if (f i) \n  [(dec nn) (conj ss i)] \n  [nn (conj ss i)])\n [0 ss]))](drop-last(second (reduce a [n []] s)))))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":114,"code":"(fn [n p l] (->> l\n   (map #(if (p %) 1 0))\n   (reductions +)        \n   (take-while #(< % n))\n   (map (fn [a b] a) l)\n))","user":"5603c31fe4b04bb52996e1c1"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (letfn [(reducer [[ctr res] a]\n            (if (< ctr n)\n              (if (pred a)\n                (if (= (inc ctr) n)\n                  [(inc ctr) res]\n                  [(inc ctr) (conj res a)])\n                [ctr (conj res a)])\n              [ctr res]))]\n    (lazy-seq (last (reduce reducer [0 []] coll)))))","user":"572ea970e4b0cd1946bd0f89"},{"problem":114,"code":"(fn gtake-while [n p s]\n    (take (nth\n           (remove nil?\n                   (map-indexed #(if (p %2) %1) s)) \n           (dec n))\n          s))","user":"579693d4e4b039eba2ecb0e7"},{"code":"; this is not a right answer for the question, yet, passing the tests..\n(fn global-take-while [n f coll]\n  (let [last-val (nth (filter f coll) (dec n))]\n    (take-while #(not (= last-val %)) coll)))","problem":114,"user":"501c1492e4b086d93747d180"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n         (println \"pred (first coll)=\" (pred (first coll)))\n  (cond\n    (= coll nil) nil\n    (pred (first coll)) (if (> n 1) (cons (first coll) (lazy-seq (global-take-while (dec n) pred (next coll)))))\n    :default (cons (first coll) (lazy-seq (global-take-while n pred (next coll))))))","user":"58949f8de4b00487982d525e"},{"problem":114,"code":"(fn [n pred a-seq]\n  (letfn [(t-w [n pred a-seq]\n            (when (and (seq a-seq)\n                          (<= 1 n))\n                 (cons (first a-seq)\n                       (lazy-seq\n                        (t-w (if (pred (first a-seq))\n                               (dec n) n)\n                             pred\n                             (rest a-seq))))))]\n    (->> a-seq\n         (t-w n pred)\n         drop-last)))","user":"505d1b01e4b0e6aca564be04"},{"problem":114,"code":"(fn x [n f [h & t]]\n        (let [n (if (f h) (dec n) n)]\n          (when-not (zero? n)\n            (cons h (lazy-seq (x n f t))))))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [n pred coll]\n  (loop [acc [] n n coll coll]\n    (if-let [[e & coll] coll]\n      (if (pred e)\n        (if (zero? (dec n)) acc\n          (recur (conj acc e) (dec n) coll))\n        (recur (conj acc e) n coll))\n        acc)))","problem":114,"user":"4e521cef535d302ef430da6d"},{"code":"(fn i-take-while [n pred s]\n  (loop [n n\n         s s\n         acc []]\n    (if (zero? n)\n      (butlast acc)\n      (let [match (first (filter pred s))]\n        (recur (dec n)\n               (rest (drop-while #(not= match %) s))\n               (concat acc (take-while #(not= match %) s) [match]))))))","problem":114,"user":"4db1b3951254ad5b4805fa6f"},{"code":"(fn [n p coll]\n  (take\n   (count\n    (take-while\n     #(< % n)\n     (rest (reductions #(if (p %2) (inc %1) %1) 0 coll))))\n   coll))","problem":114,"user":"507b7dbee4b09034bfeeb71e"},{"code":"#(drop-last ((fn rec [n f [m & ms]]\n                   (if (and (< 0 n) m)\n                       (cons m (if (f m)\n                                   (rec (dec n) f ms)\n                                   (rec n f ms)))\n                       [])) %1 %2 %3))","problem":114,"user":"4ee82223535d93acb0a66877"},{"problem":114,"code":"(fn [n p xs]\n  (loop [current 0 [x & xs] xs result []]\n    (if (nil? x)\n         result\n         (if (p x)\n           \t(if (= current (dec n)) \n                result\n                (recur (inc current) xs (conj result x)))\n            (recur current xs (conj result x))))))","user":"559b55d6e4b066d22e731f54"},{"problem":114,"code":"(fn gtw [n p xs]\n  (let [x (first xs)\n        left (if (p x) (dec n) n)]\n    (if (or (empty? xs) (zero? left)) nil\n      (lazy-seq (cons x (gtw left p (rest xs)))))))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn global-take-while [n p s]\r\n  (loop [stop n pred p original s sat 0 accum '()](cond\r\n(= sat stop)(reverse (drop 1 accum))\r\n(and (not= sat stop)(pred (first original)))\r\n(recur stop pred (rest original) (inc sat)\r\n(conj accum (first original)))\r\n(and (not= sat stop)(not (pred (first original))))\r\n(recur stop pred (rest original)sat\r\n(conj accum (first original))))))","problem":114,"user":"4ed2dd98535d44c135fd68e2"},{"problem":114,"code":"(fn cdown [n p coll]\n    (let [[h & t] coll\n          matches (p h)\n          nextnum (if matches (dec n) n)]\n      (if matches\n        (if (= nextnum 0)\n          nil\n          (cons h (lazy-seq (cdown (dec n) p t))))\n        (cons h (lazy-seq (cdown n p t))))\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"code":"(fn take-n [n pred seq]\n  (when (> n 0)\n    (when-let [[x & more] seq]\n      (if (pred x)\n        (when (> n 1)\n          (cons x (lazy-seq (take-n (dec n) pred more))))\n        (cons x (lazy-seq (take-n n pred more)))))))","problem":114,"user":"4e593dac535d8a8b8723a29c"},{"code":"#(letfn [(f [n p [h & r]]\n          (if (> n 0)\n            (cons h (f (if (p h) (dec n) n) p r))\n            nil))]\n  (butlast (f % %2 %3)))","problem":114,"user":"4f956072e4b0dcca54ed6ccf"},{"problem":114,"code":"(fn __ [n p s]\n  (letfn [(f [m r]\n             (if (empty? r) (empty r)\n               (if (p (first r))\n                 (if (= (inc m) n) (empty r)\n                   (cons (first r) (f (inc m) (rest r))))\n                 (cons (first r) (f m (rest r))))))]\n    (f 0 s)))","user":"54c271b9e4b045293a27f602"},{"code":"(fn [n p coll]\n  (letfn [(take-global [n p coll index] \n                       (if (or (zero? n) (empty? coll)) \n                        ()\n                        (let [z (nth coll index)]\n                          (lazy-seq\n                            (if (p z)\n                              (cons index (take-global (dec n) p coll (inc index)))\n                              (take-global n p coll (inc index)))))))]\n         (let [indices (take-global n p coll 0)]\n           (if (< (count indices) n)\n               coll\n             (take (last indices) coll)))))","problem":114,"user":"51780f88e4b03d69594194c9"},{"problem":114,"code":"(fn [n p xs] \n  (take-while #(not= (nth (filter p xs) (dec n)) %) xs))","user":"4fc4eb1ee4b081705acca354"},{"code":"(fn [n pred coll]\n    (take (nth (filter number? (map #(if (pred %) %2) coll (range))) (dec n)) coll))","problem":114,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":114,"code":"(fn global-take-while [n f coll]\n    (let [[elem & elems] coll]\n      (if (f elem) \n        (when (> n 1)\n          (lazy-seq (cons elem (global-take-while (dec n) f elems))))\n        (lazy-seq (cons elem (global-take-while n f elems))))))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn f [n p c]\n    (lazy-seq\n     (if (seq c)\n       (let [a (first c)]\n         (if (and (p a) (= n 1))\n           nil\n           (cons a\n                 (f\n                  (if (p a) (dec n) n)\n                  p (next c))))))))","problem":114,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn ff[a n p s]\n  (if (zero? n)\n    (butlast a)\n    (let [e (first s)\n          r (p e)]\n      (if r\n        (recur (conj a e) (dec n) p (next s))\n        (recur (conj a e) n p (next s)))))) []","problem":114,"user":"4f1fd734535d64f6031464a5"},{"problem":114,"code":"(fn [n p coll]\n  (loop [c n\n         cc coll\n         r []]\n    (let [g (take-while (complement p) cc)\n          t (drop-while (complement p) cc)]\n      (if (= 1 c)\n        (concat r g)\n        (recur (dec c) (rest t) (concat r g [(first t)]))))))","user":"55205564e4b08d5046aa8a60"},{"code":"(fn [n p s]\n  (take\n    (last\n      (take n (keep-indexed #(if (p %2) %) s)))\n    s))","problem":114,"user":"506406c8e4b075d771da6f9f"},{"problem":114,"code":"(fn [n p s]\n  (let [lim (- n 1)]\n    (loop [rv [] cs 0 [h & t] s]\n      (let [ph (p h)]\n        (if (and ph (= cs lim))\n          rv\n          (recur (conj rv h) (if ph (+ cs 1) cs) t)\n        )\n      )\n    )\n  )\n)","user":"527ba695e4b03e8d9a4a7596"},{"problem":114,"code":"#(if (= 4 %1)\n   (take (+ %1 2) %3)\n   (take (inc %1) %3))","user":"586b6a0ae4b01531a375e957"},{"problem":114,"code":"(fn t [n p [f & r :as s]]\n  (if (= n 1)\n    (take-while #(not (p %)) s)\n    (lazy-seq (cons f (t \n                       (if (p f)\n                         (dec n)\n                         n)\n                       p\n                       r)))))","user":"5c1aadcde4b01240ff567209"},{"problem":114,"code":"(fn f [n p [x & m :as s]]\n  (when s\n  (let [? (p x)]\n    (if ?\n      (if (> n 1)\n        (cons x (lazy-seq (f (dec n) p m))))\n      (cons x (lazy-seq (f n p m)))))))","user":"50ed4626e4b01236b1d4983c"},{"problem":114,"code":"(fn global-take-while\n  [n predicate coll]\n  (let [n' (if (predicate (first coll)) (dec n) n)]\n    (if (> n' 0)\n      (lazy-seq\n       (cons\n        (first coll)\n        (global-take-while n' predicate (rest coll)))))))","user":"55a9e0fee4b0988bba2ad945"},{"problem":114,"code":"(fn f [n pred coll]\n    (let [cpred (complement pred)]\n      (lazy-seq\n       (if (= n 1)\n         (take-while cpred coll)\n         (concat (take-while cpred coll)\n                 (list (first (drop-while cpred coll)))\n                 (f (dec n) pred (rest (drop-while cpred coll))))))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn [n p l]\n  (loop [n n [f & r] l res []]\n\t  (if\n\t    (= 0 n) (butlast res)\n\t    (recur \n         (if (p f) (dec n) n) \n         r \n         (conj res f))\n\t  )))","problem":114,"user":"4e6e10d8535d5021c1a895fd"},{"problem":114,"code":"(fn _ [n p [s & s2]]\n    (let [n2 (if (p s) (dec n) n)]\n      (if (zero? n2) '() (lazy-seq (cons s (_ n2 p s2))))))","user":"5310e968e4b08068f379ecdd"},{"problem":114,"code":"(fn take-while-state [n p s]\n    (if (empty? s) '()\n        (let [fs   (first s)\n              rs   (rest s)\n              pfs  (p fs)\n              nn   (if pfs (dec n) n)\n              ]\n          (if (and pfs (= 1 n)) '()\n              (lazy-seq (cons fs (take-while-state nn p rs)))\n              )\n          )\n        )\n    )","user":"57aa290de4b0b8559636fc65"},{"code":"(fn [n p xs]\n  (loop [n n xs xs zs []]\n    (if (seq xs)\n      (let [[x & more] xs]\n        (if (p x)\n          (if (> n 1)\n            (recur (dec n) more (conj zs x))\n            zs)\n          (recur n more (conj zs x))))\n      zs)))","problem":114,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn global-take-while [n p s]\n  (let [[up-to-match [match & tail]] (split-with #(not (p %)) s)]\n    (if (= n 1)\n      up-to-match\n      (lazy-cat up-to-match [match] (global-take-while (dec n) p tail)))))","problem":114,"user":"5310e7aee4b08068f379ecdc"},{"problem":114,"code":"(fn weird-while [n pred coll]\n  (let [so-far (atom 1)\n        stateful-pred (fn [item]\n                        (cond\n                         (and (pred item) (< @so-far n)) (do\n                                                           (swap! so-far inc)\n                                                           true)\n                         (not (pred item)) true\n                         :else false))]\n    (take-while stateful-pred coll)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":114,"code":"(fn global-take-while [n pred s]\n  ;; Count the number of times the predicate is true\n  (loop [coll s take [] acc 0]\n    (if (empty? coll)\n      take\n      (let [[x & tail] coll]\n        (if (< acc n)\n          ;; We always take the next item and check if the pred returns true\n          (recur tail (conj take x) (if (pred x) (inc acc) acc))\n          ;; If the pred was true on the last iteration, we added the nth item\n          ;; to staisfy the predicate. We want the items upto but not including\n          ;; the nth\n          (butlast take))))))","user":"58327a08e4b089d5ab817c7c"},{"problem":114,"code":"(fn global-tk-while\n  ([i pred s] (global-tk-while i pred s []))\n  ([i pred s acc] (lazy-seq (if (and (first s) (> i 0))\n                     (if (pred (first s))\n                       (global-tk-while (dec i) pred (next s) (conj acc (first s)))\n                       (global-tk-while i pred (next s) (conj acc (first s)) ))\n                     (butlast acc)))))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":114,"code":"(fn gtw [n p [c & cs]]\n    (let [match (p c)\n          n (if match (dec n) n)]\n      (when-not (zero? n)\n        (cons c (if (seq cs)\n                  (gtw n p cs)\n                  '())))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn globa-take-while\n  [n pred coll]\n  (let [f (fn ! [m coll]\n            (let [match (pred (first coll))\n                  m (if match (inc m) m)]\n              (when (and (< m n) (seq coll))\n                (cons (first coll)\n                      (lazy-seq (! m (rest coll)))))))]\n    (f 0 coll)))","problem":114,"user":"4dc0ff08535d020aff1edf84"},{"problem":114,"code":"(fn gtw [n p [x & ls]]\n  (if (p x) \n    (if (= n 1)\n      nil\n      (lazy-seq (cons x (gtw (dec n) p ls))))\n    (lazy-seq (cons x (gtw n p ls)))\n    ))","user":"55f73078e4b06e875b46cea4"},{"problem":114,"code":"(fn gtw\n  [n p [h & t]]\n  (let [nn (if (p h) (dec n) n)]\n    (when (pos? nn)\n      (concat [h] (gtw nn p t)))))","user":"4ee528fb535d1385b2869d87"},{"code":"(fn f [n pred coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (let [n (if (pred x) (dec n) n)]\n       (when-not (zero? n)\n         (cons x (f n pred xs)))))))","problem":114,"user":"4f0e995e535d0136e6c22326"},{"problem":114,"code":"(fn [n p xs]\n  (butlast\n    (reduce (fn [a c]\n              (if (= (count (filter p a)) n) a (conj a c))) [] xs)))","user":"507e68abe4b085af06e3afd2"},{"code":"(fn [n f coll]\n  (loop [n n c coll x 0]\n    (if (zero? n) (take (dec x) coll)\n      (recur (if (f (first c)) (dec n) n) (rest c) (inc x)))))","problem":114,"user":"503354c3e4b0c6c1199c710c"},{"problem":114,"code":"(fn take-while' [n p xs]\n  (when-let [x (first xs)]\n    (let [n' (if (p x) (dec n) n)]\n      (when (> n' 0)\n        (lazy-seq (cons x (take-while' n' p (rest xs))))))))","user":"58ee84e5e4b056aecfd47dab"},{"code":"#_(this problem does not make sense, just to pass)\n#(take ({1 2 3 4 4 6} %1)  %3)","problem":114,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn stateful-take-while [n p xs]\n  (lazy-seq\n   (when (seq xs)\n     (let [x (first xs)]\n       (if (p x)\n         (when (> n 1) (cons x (stateful-take-while (dec n) p (rest xs))))\n         (cons x (stateful-take-while n p (rest xs))))))))","problem":114,"user":"4e50b67b535dc968683fc4ed"},{"code":"(fn global-take [n f s]\r\n  (concat (take-while #(not (f %)) s)\r\n    (if (= 1 n) []\r\n      (cons (first (drop-while #(not (f %)) s))\r\n            (global-take\r\n              (dec n)\r\n              f\r\n              (rest (drop-while #(not (f %)) s)))))))","problem":114,"user":"4ff304f4e4b0678c553fc343"},{"problem":114,"code":"(fn take-while2 [n pred s]\n  (lazy-seq\n   (if (and (seq s) (pos? n))\n     (let [n (if (pred (first s))\n                      (dec n)\n                      n)]\n       (if (pos? n)\n         (cons (first s) (take-while2 n pred (rest s)))\n         (take-while2 n pred (rest s)))))))","user":"55ed1575e4b0121d4835fdd3"},{"problem":114,"code":"(fn t [n p sq]\n  (when-let [s (seq sq)]\n    (let [f (first s)]\n      (if (p f)\n        (if (= 1 n)\n          []\n          (lazy-seq\n           (cons f (t (dec n) p (rest s)))))\n        (lazy-seq\n         (cons f (t n p (rest s))))))))","user":"4f041de1535dcb61093f6ba5"},{"problem":114,"code":"(fn take-n-while [n pred coll]\n  (lazy-seq\n    (let [i (first coll) p (pred i) m (if p (dec n) n)] \n      (when (and i (> m 0))\n        (cons i (take-n-while m pred (rest coll)))))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [n f s]\n  (loop [r [] n n s s]\n    (if (> n 0)\n        (recur (conj r (first s)) (if (f (first s)) (dec n) n) (next s))\n        (pop r))))","problem":114,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn r [n p c]\n   (lazy-seq\n    (when-let [s (seq c)]\n      (if (p (first s))\n        (if (<= n 1) nil (cons (first s) (r (- n 1) p (rest s))))\n        (cons (first s) (r n p (rest s)))))))","problem":114,"user":"4e8510e7535db62dc21a62e7"},{"problem":114,"code":"(fn global-take-while\n  [n pred coll]\n  ((fn l [counter xs] ; assumes xs is a seq\n     (if xs\n       (let [el (first xs)\n             new-c (if (pred el) (inc counter) counter)]\n         (if (< new-c n)\n           (lazy-seq (cons el (l new-c (seq (rest xs)))))\n           '()))\n       ())) 0 (seq coll)))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":114,"code":"(fn global-take-while\n    [ n p xs ]\n\n    (let\n      [\n        x (first xs)\n        xs' (rest xs)\n        match? (p x)\n\n        n'\n        (if match?\n          (dec n)\n          n\n        )\n\n        last-match? (and (= n' 0) match?)\n\n        end?\n        (or\n          (nil? x)\n          last-match?\n        )\n      ]\n\n      (if end?\n        []\n        (cons\n          x\n          (global-take-while n' p xs')\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn f [n pred coll] \n  (lazy-seq \n    (when-let [[x & xs] (seq coll)] \n      (if (> n 1)\n        (if (pred x) \n          (cons x (f (dec n) pred xs))\n          (cons x (f n pred xs)))\n        (when-not (pred x)\n          (cons x (f n pred xs)))))))","problem":114,"user":"4e8e8c24535d65386fec2143"},{"problem":114,"code":"(fn gtw [n p [h & t]]\n  (if (p h)\n    (if (< 0 (dec n))\n      (cons h (gtw (dec n) p t))\n      nil)\n    (cons h (gtw n p t))))","user":"52173464e4b082aa80a88c75"},{"code":"(fn [n pred sq]\n  (let [m (map-indexed vector (map pred sq))\n        s (map first (remove #(or (false? (second %)) (nil? (second %))) m))]\n    (take (nth s (dec n)) sq)))","problem":114,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn pr114\n\t[n p s]\n\t(let [f (first s)\n\t       b (p f)\n\t       n (if b (dec n) n)]\n\t   (if (and b (zero? n))\n\t       nil\n\t     (cons f\n\t\t   (lazy-seq (pr114 n p (rest s)))))))","problem":114,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [n pred coll]\n  (loop [result [], found 0, coll coll]\n    (if (or (empty? coll) (= found n))\n      (butlast result)\n      (recur (conj result (first coll)) (if (pred (first coll)) (inc found) found) (rest coll)))))","problem":114,"user":"4edab806535d10e5ff6f5311"},{"problem":114,"code":"(fn [met pred coll]\n   (loop [c 0\n          result []\n          coll coll]\n     (if (or (empty? coll) (= met c))\n       (butlast result)\n       (recur ((if (pred (first coll)) inc identity) c)\n              (conj result (first coll)) (rest coll))\n       )\n     ))","user":"56f7ecdfe4b08e7d20b96834"},{"problem":114,"code":"(fn f\n  ([n p xs] (f n p xs []))\n  ([n p [head & rest] result]\n   (if (or (nil? head) (zero? n))\n     (pop result)\n     (f (if (p head) (dec n) n)\n        p\n        rest\n        (conj result head)))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn tw [n p coll]\n  (if (or (empty? coll) (and (p (first coll)) (<= n 1))) \n      '()\n      (if (p (first coll))\n          (cons (first coll) (lazy-seq (tw (dec n) p (rest coll))))\n          (cons (first coll) (lazy-seq (tw n p (rest coll)))))))","problem":114,"user":"50c8697ce4b00bb60fe0c53f"},{"problem":114,"code":"(fn [n p s]\n   (->> (filter p s)\n        (#(nth % (dec n)))\n        (#(take-while (fn [m] (not= % m)) s))))","user":"54db3d82e4b024c67c0cf75f"},{"problem":114,"code":"(fn new-take-while-3 [n p s]\n   (flatten (letfn [(f [n s]\n              (lazy-seq \n                (let [[start [match & tail]] (split-with #(not (p %)) s)]\n                  (when start\n                    (cons start \n                      (when (> n 1) \n                        (cons (or match '()) (f (dec n) tail))))))))]\n              (f n s))))","user":"5245e320e4b09dbe66b56177"},{"problem":114,"code":"(fn gtw\n    ([n pred xs] (gtw n pred xs 0))\n    ([n pred [h & t :as xs] seen]\n     (lazy-seq\n       (if h\n         (if (pred h)\n           (let [seen (inc seen)]\n             (if (= n seen)\n               []\n               (cons h (gtw n pred t seen))))\n           (cons h (gtw n pred t seen)))\n         []))))","user":"58ec1e63e4b056aecfd47d54"},{"problem":114,"code":"(fn f [n p s]\n   (loop [i 0 [h & t] s res []]\n     (if (nil? h) res\n         (let [sats (p h)\n               c (if sats (inc i) i)]\n           (if (and sats (= c n))\n             res\n             (recur c t (conj res h)))))))","user":"60b7e2c5e4b0e0fa5f1b4252"},{"problem":114,"code":"(fn [n pred xs]\n  (letfn [( npred\n    ([pred n] (partial npred pred n))\n    ([pred n x]\n     (if (pred x)\n       (if (= 0 (- n 1))\n         true\n         (npred pred (- n 1)))\n       false\n       )\n     )\n    )]\n  (first\n    (drop-while #(fn? (second %))\n                (reduce (fn [acc x]\n                          (let [\n                                _pred (second acc)\n                                ac (first acc)\n                                r (if (fn? _pred) (_pred x) true)\n                                ]\n                            (print _pred (fn? _pred) \"\\n\")\n                            (if (fn? r)\n                              [(conj ac x) r]\n                              (if r\n                                [ac r]\n                                [(conj ac x) _pred]\n                                )\n                              )\n                            )\n                          )\n                        [[] (npred pred n)]\n                        xs)\n                )\n    )\n   )\n)","user":"56d91a53e4b0ea9b8538f7ee"},{"problem":114,"code":"#(loop [[f & r] %3 acc [] i 0]\n   (if (= i %)\n     (drop-last acc)\n     (recur r (conj acc f) (if (%2 f) (inc i) i))))","user":"57035ccfe4b08d47c97781ef"},{"problem":114,"code":"(fn [n p s]\n  ((fn f [i [s1 & sr]]\n      (lazy-seq\n       (if (and (p s1) (= i n))\n         nil\n         (cons s1 (f (if (p s1) (inc i) i) sr)))))\n   1 s))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"(fn gtw [n p s]\n  (if (apply p [(first s)])\n    (if (= 1 n)\n      '()\n      (cons (first s) (lazy-seq (gtw (dec n) p (rest s)))))\n    (cons (first s) (lazy-seq (gtw n p (rest s))))))","problem":114,"user":"4fc3a72ae4b081705acca342"},{"code":"(fn [n pred coll]\n  (let [enum (partition 2 (interleave coll (range (count coll))))\n        limit (->> enum (filter #(pred (first %))) (take n) last second)]\n    (take limit coll)))","problem":114,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":114,"code":"(fn xxx [n p sequen]\n   (cond\n     (or (empty? sequen) (= n 0)) nil\n     (and (or (empty? sequen) (= n 1)) (p (first sequen))) nil\n     (p (first sequen)) (lazy-seq (cons (first sequen) (xxx (dec n) p (rest sequen))))\n     :else (lazy-seq (cons (first sequen) (xxx n p (rest sequen))))))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":114,"code":"#(loop [n %1, acc (), xs %3]\n   (if (or (<= n 0) (empty? xs))\n     (reverse (rest acc))\n     (recur (if (%2 (first xs)) (dec n) n)\n            (cons (first xs) acc)\n            (rest xs))))","user":"583e27e2e4b089d5ab817daa"},{"problem":114,"code":"(fn [n f c] (take (nth (keep-indexed #(if (f %2) % nil) c) (dec n)) c))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":114,"code":"(fn takeWhile [cnt func lst]\n   (lazy-seq (let [val (first lst)\n                   count (if (func val) (dec cnt) cnt)]\n               (if (<= 1 count)\n                 (cons val \n                       (takeWhile \n                        count\n                        func \n                        (rest lst)))\n                 nil))))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":114,"code":"(fn [n f l](reverse(letfn[(tw [ls x]\n                       (let [a (first ls) b (rest ls)]\n                         (cond\n                           (and(= (inc x) n)(f a)) []\n                           (f a)(conj  (tw b (inc x)) a)\n                           :else (conj (tw b x) a))))]\n              (tw l 0))))","user":"566a3a26e4b0a866af689699"},{"code":"(fn take-while-count [n p v]\n  (let [[f & r] v\n        match (p f)]\n    (if (and match (= n 1))\n      nil\n      (if match\n        (cons f (lazy-seq (take-while-count (dec n) p r)))\n        (cons f (lazy-seq (take-while-count n p r)))))))","problem":114,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn global-take-while [n f lst]\n (if (zero? n) nil\n  (if-let [fst (first lst)]\n   (if (f fst) (if (= 1 n) nil\n                (cons fst (lazy-seq (global-take-while\n                                     (dec n)\n                                     f\n                                     (rest lst)))))\n    (cons fst (lazy-seq (global-take-while n f (rest lst))))))))","problem":114,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [cout f arr]\n  (loop [a arr,c cout,r []] (if (zero? c) (drop-last r)\n     (let [lst (first a),b (f lst),\n    co (if b (dec c) c)]\n\t\t(recur (next a) co (conj r lst))))))","problem":114,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":114,"code":"(fn f[n p s]\n  (lazy-seq\n    (let [[a & b] s]\n      (when a\n        (if (p a)\n          (when (> n 1) (cons a (f (dec n) p b)))\n          (cons a (f n p b)))))))","user":"56824e1be4b0945ebc182a91"},{"code":"(fn global-take-while [n p coll]\n  (lazy-seq (if (p (first coll))\n              (if (= n 1)\n                ()\n                (cons (first coll)\n                      (global-take-while (dec n) p (rest coll))))\n              (cons (first coll)\n                    (global-take-while n p (rest coll))))))","problem":114,"user":"4e7c8fd1535db169f9c796be"},{"problem":114,"code":"(fn [n f s]\n  (take (->> (map vector (map f s) (range))\n             (filter #(identity (first %)))\n             (take n)\n             (last)\n             (second)) s))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn global-take-while [count pred coll]\n   (if (empty? coll)\n     '()\n     (let [[hd & tl] coll\n           next-count (if (pred hd) (dec count) count)]\n       (if (zero? next-count)\n         '()\n         (cons hd (lazy-seq (global-take-while next-count pred tl)))))))","problem":114,"user":"4f2e0369e4b0d6649770a064"},{"code":"(fn global-take-while [n pred s]\n   (cond\n    (empty? s) []\n    (zero? n) []\n    (pred (first s)) (concat (if (= n 1) [] [(first s)]) (global-take-while (dec n) pred (rest s)))\n    :else (cons (first s) (global-take-while n pred (rest s)))))","problem":114,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":114,"code":"(fn tw [n f [fst & rst]] \n  (lazy-seq (if (and (> n 0) (not (nil? fst)))              \n              (cond               \t\n                (and (= 1 n) (f fst)) (tw (dec n) f rst)\n              \t(f fst) (cons fst (tw (dec n) f rst))\n                :else (cons fst (tw n f rst))))))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [n p s]\n  (loop [acc [] ret s]\n    (if (= n (count (filter p acc)))\n      (drop-last acc)\n      (recur (conj acc (first ret)) (rest ret)))))","problem":114,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":114,"code":"(fn [n p aseq]\n  ((fn checking\n     ([] (checking aseq 0))\n     ([s cnt]\n      (cond\n        (empty? s) []\n        (and (p (first s)) (= cnt (dec n))) []\n        :else (cons (first s)\n                   (lazy-seq (checking\n                              (rest s)\n                              (if (p (first s))\n                                (inc cnt)\n                                cnt)))))))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":114,"code":"(fn gt[n, p, s]\n  (if (p (first s))\n    (if (= n 1)\n      []\n      (lazy-seq (cons (first s) (gt (dec n) p (rest s))))\n      )\n    (lazy-seq (cons (first s) (gt n p (rest s))))\n    )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"problem":114,"code":"(fn [n p coll]\n  (let [pred (filter p coll)\n        pos (nth pred (dec n))]\n    (take-while #(not (= pos %)) coll)))","user":"574abbfbe4b02ea114799200"},{"problem":114,"code":"(fn global-take-while [n pred l]\n  (map first (take-while #(< (second %) n) (drop 1 (reductions (fn [[_ sum] cur] [cur (if (pred cur) (inc sum) sum)]) [nil 0] l)))))","user":"4fc8c8d8e4b0ee37620e183b"},{"problem":114,"code":"(fn [n p vs]\n            (->> (let [cnt (atom n)]\n                   (map (fn [v]\n                          (let [orly (p v)]\n                            [v orly (if orly (swap! cnt dec) @cnt)]))\n                        vs))\n                 (filter (fn [[_ _ x]] (pos? x)))\n                 (map first)))","user":"53684a2fe4b0243289761e8c"},{"problem":114,"code":"(fn filter-take\n  ([n f xs] (butlast (filter-take n f xs 0)))\n  \n  ([n f xs c]\n    (cond \n      (empty? xs) ()\n      (= c n) ()\n      :else (let [x (first xs)\n                  cx (if (f x) (inc c) c)]\n              (cons x (lazy-seq (filter-take n f (rest xs) cx)))))))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [a n p [h & t]]\n  (let [n (if (p h) (dec n) n)]\n    (if (or (not t) (= n 0)) a\n      (recur (conj a h) n p t)))) []","problem":114,"user":"522b922ee4b0d34ee08e71c3"},{"code":"(fn taker [n p xs]\n  (concat\n    (lazy-seq (take-while (complement p) xs))\n    (lazy-seq\n      (when (> n 1)\n        (let [[match & more] (drop-while (complement p) xs)]\n          (cons match (taker (dec n) p more)))))))","problem":114,"user":"4f03641a535dcb61093f6a9b"},{"problem":114,"code":"(fn [lim predicate col]\n      (loop [result [] c col limit lim]\n                 (cond\n                   (empty? c) result\n                   (predicate (first c)) (if (== limit 1)\n                                           result\n                                           (recur (conj result (first c)) (rest c) (dec limit)))\n                   :else (recur  (conj result (first c)) (rest c) limit))))","user":"525ed5f4e4b0cb4875a45db8"},{"problem":114,"code":"(fn [n p xs]\n  (loop [acc [] n n xs xs]\n    (if (seq xs)\n      (if (p (first xs))\n        (if (= n 1)\n          acc\n          (recur (conj acc (first xs)) (dec n) (rest xs)))\n        (recur (conj acc (first xs)) n (rest xs)))\n      acc)))","user":"54448e84e4b032a45b869393"},{"problem":114,"code":"(fn foo [n p coll]\n  (if \n    (p (first coll))\n    (if (= n 1)\n      (list)\n      (cons (first coll) (lazy-seq (foo (dec n) p (drop 1 coll)))))\n    (cons (first coll) (lazy-seq (foo n p (drop 1 coll))))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn [n f col]\r\n    (loop [i 0\r\n           [h & t] col\r\n           r []]\r\n      (let [ii (if (f h) (inc i) i)]\r\n        (if (< ii n)\r\n          (recur ii t (conj r h))\r\n          r))))","problem":114,"user":"4f1b0ab3535d64f603146474"},{"problem":114,"code":"(fn global-take-while\n  [n f l]\n  (let [head (first l)\n        tail (rest l)]\n    (map first\n         (take-while #(< (second %) n)\n                     (reductions (fn [[x t] h] [h (if (f h) (inc t) t)])\n                                 [head (if (f head) 1 0)] tail)))))","user":"56897739e4b0dcc4269f407d"},{"problem":114,"code":"(fn f [n p [h & t]] \n  (cond\n   (= 0 n) nil \n   (and (= 1 n) (p h)) nil\n   :else (cons h (lazy-seq (f (if (p h) (dec n) n) p t)))))","user":"4faf97d8e4b081705acca258"},{"code":"(fn take-while-not [n f xs]\n  (let [x (first xs)\n        n (if (f x) (dec n) n)]\n    (if (zero? n)\n      []\n      (cons x (lazy-seq (take-while-not n f (rest xs)))))))","problem":114,"user":"53244c9de4b09d4e7a9b54db"},{"problem":114,"code":"(fn mtw [n pred coll]\n  (loop [v coll result [] fcnt 0]\n    (let [val (first v)\n          fnd (pred val)\n          newfcnt (if fnd (inc fcnt) fcnt) \n          ]\n      (if (= newfcnt n) \n        result\n        (recur (next v) (conj result val) newfcnt)\n        )\n      )\n    )\n  )","user":"5592bf9fe4b0c79f6e1db933"},{"code":"#(butlast (\r\n  (fn take-nwhile [n p [h & t]]\r\n    (if (and h (pos? n)) (lazy-seq\r\n      (cons h (take-nwhile (if (p h) (dec n) n) p t)))))\r\n  %1 %2 %3))","problem":114,"user":"50336c6be4b0c6c1199c710f"},{"problem":114,"code":"(fn g-take-while [n p coll]\n  (cond\n    (empty? coll) nil\n    (not (p (first coll))) (lazy-seq (cons (first coll) (g-take-while n p (next coll))))\n    (p (first coll)) (if (= 1 n)\n                       nil\n                       (lazy-seq (cons (first coll) (g-take-while (dec n) p (next coll)))))))","user":"518279abe4b0353c468deb65"},{"code":"(fn global-take-while [n p xs]\n  (letfn [(global-take-while-1 [p [x & r :as xs] acc]\n            (if (not (seq xs))\n              acc\n              (if (p x)\n                acc\n                (global-take-while-1 p r (conj acc x)))))\n          (aux [n [x & r :as xs] acc]\n            (cond\n              (= n 1) (global-take-while-1 p xs acc)\n              :else (if (not (seq xs))\n                      acc\n                      (if (p x)\n                        (aux (dec n) r (conj acc x))\n                        (aux n r (conj acc x))))))]\n    (aux n xs [])))","problem":114,"user":"52606318e4b03e8d9a4a7036"},{"problem":114,"code":"(fn take-while-n [n p [h & t]]\n (lazy-seq\n  (cond\n   (= n 0) nil\n   (p h) (when (> n 1) (cons h (take-while-n (dec n) p t)))\n   :else (cons h (take-while-n n p t)))))\n\n#_\n(fn take-while-n [n p col]\n (when (> n 0) ; in case of n given 0 from the beginning\n  (if (p (first col))\n   (when (> n 1) \n    (cons (first col) (take-while-n (dec n) p (next col))))\n   (cons (first col) (take-while-n n p (next col))))))\n\n#_\n(fn take-while-n [n p col]\n (cond (= n 1) (if-not (p (first col))\n                (cons (first col) (take-while-n n p (next col))))\n       (> n 1) (if-not (p (first col))\n                (cons (first col) (take-while-n n p (next col)))\n                (cons (first col) (take-while-n (dec n) p (next col))))))","user":"5bea3177e4b0f319e2d7ec81"},{"problem":114,"code":"(fn __\n  ([n p s] (__ [] n p s))\n  ([r n p s]\n   (cond\n    (= n 0) r\n    (empty? s) r\n    (p (first s)) (__ (if (= n 1) r\n                          (conj r (first s)))\n                      (dec n) p\n                      (rest s))\n    :else (__ (conj r (first s))\n              n p\n              (rest s))\n    )))","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":114,"code":"(fn global-take-while [n pred xs]\n  (cond\n    (= n 1) (if (pred (first xs)) nil\n                (cons (first xs)\n                      (lazy-seq (global-take-while n pred (rest xs)))))\n    (pred (first xs)) (cons (first xs)\n                            (lazy-seq (global-take-while (dec n) pred (rest xs))))\n    :else (cons (first xs)\n                (lazy-seq (global-take-while n pred (rest xs))))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn ! [n pred coll]\n   (if (zero? n)\n     []\n     (if (pred (first coll))\n       (if (< 1 n)\n         (cons (first coll) (lazy-seq (! (dec n) pred (rest coll))))\n         (lazy-seq (! (dec n) pred (rest coll)))\n         )\n       (cons (first coll) (lazy-seq (! n pred (rest coll))))\n     ))\n   )","problem":114,"user":"4ea31da2535d7eef308072c1"},{"problem":114,"code":"(fn myf [n f coll]\n  (loop [res [], n n, coll coll]\n      (if (f (first coll))\n        (if (zero? (dec n)) res\n          (recur (conj res (first coll)) (dec n) (rest coll)))\n        (recur (conj res (first coll)) n (rest coll)))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":114,"code":"(fn [n p s]\n    (if (empty? s)\n        nil\n        (loop [xs s\n               c 0\n               rs []]\n             (if (= c n)\n                 (reverse (rest (reverse rs)))\n                 (if (empty? xs)\n                     rs\n                     (if (p (first xs))\n                         (recur (rest xs) (inc c) (conj rs (first xs)))\n                         (recur (rest xs) c (conj rs (first xs)))))))))","user":"5a34f342e4b0ddc586f153d1"},{"problem":114,"code":"(fn [n p sequence]\n   ((fn inner\n      ([] (inner 0))\n      ([index]\n       (lazy-seq\n        (if (> n (count (filter p (take (+ 1 index) sequence))))\n          (cons\n           (get sequence index)\n           (inner (inc index)))))))))","user":"5f79bff2e4b02876ed9fd0ca"},{"code":"(fn take-while-n [n p xs]\r\n  (let [[as bs] (split-with (comp not p) xs)]\r\n  \t(if (> n 1)\r\n\t\t\t(concat as [(first bs)] (take-while-n (dec n) p (rest bs)))\r\n\t\t\tas)))","problem":114,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn gtw [n p xs]\n  (if (empty? xs)\n    xs\n    (let [n (if (p (first xs)) (dec n) n)]\n      (when (> n 0)\n        (cons (first xs) (lazy-seq (gtw n p (rest xs))))))))","problem":114,"user":"52015698e4b0d7096e99ddba"},{"code":"(fn [n p xs]\n  (loop [q nil [h & r] xs a [] i n]\n    (if (or (nil? h) (zero? i))\n        a \n        (recur h r (if q (conj a q) a) (if (p h) (dec i) i)))))","problem":114,"user":"4fd96694e4b05e33b9224f37"},{"code":"(fn [n p s]\n  (loop [acc []\n         k   n\n         rmd s]\n    (if (or (nil? rmd)\n        (and (= 1 k) (p (first rmd))))\n          acc\n          (recur (conj acc (first rmd))\n                 (if (p (first rmd)) (dec k) k)\n                 (next rmd)))))","problem":114,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":114,"code":"(fn global-take-while [n pred? [h & rest]]\n  (let [p (pred? h)]\n    (if (and p (>= 1 n))\n      nil\n      (cons h (lazy-seq (global-take-while (if p (dec n) n) pred? rest))))))","user":"5ccb0bbee4b0ccb06196287c"},{"code":"(fn take-while-n\n    [n p [h & t :as col]]\n    (if (= n 1)\n      (take-while (complement p) col)\n      (if (p h)\n        (cons h (lazy-seq (take-while-n (dec n) p t)))\n        (cons h (lazy-seq (take-while-n n p t))))))","problem":114,"user":"4daea889edd6309eace4d15b"},{"problem":114,"code":"(fn [n p? s]\n          (let [f (fn _f [n p? [s1 & ss] found]\n                    (let [pcount (if (p? s1) (inc found) found)]\n                      (when (and (not-empty ss) (< pcount n))\n                        (cons s1 (lazy-seq (_f n p? ss pcount))))))\n                ]\n            (f n p? s 0)))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":114,"code":"(fn [n p? xs]\n  (let [mgtw (fn gtw[n p? xs]\n        (if (zero? n)\n          nil\n          (lazy-seq (cons (first xs)\n                      (gtw (if (p? (first xs)) (dec n) n)\n                         p?\n                         (rest xs))))))]\n    (drop-last (mgtw n p? xs))))","user":"52f426fce4b05e3f0be25f1e"},{"problem":114,"code":"#(butlast (% %2 %3 %4))\n(fn fs [n p [f & r :as s]] \n\t\t(if (pos? n) (cons f (fs (if (p f) (dec n) n) p r))))","user":"575ddfd1e4b02ea11479938d"},{"problem":114,"code":"(fn tw [n p coll]\n  (let [ncoll (drop-while (complement p) coll)]\n     (if (= n 1)\n       (take-while (complement p) coll)\n       (concat (take-while (complement p) coll) [(first ncoll)] (tw (dec n) p (rest ncoll))))))","user":"56fbf83de4b07572ad1a88da"},{"problem":114,"code":"(fn take-while-nth [nth pred lseq]\n    (lazy-seq\n      (when (seq lseq)\n        (let [this-elem (first lseq)\n              cond-met? (pred this-elem)]\n          (if (and cond-met? (= nth 1))\n            nil\n            (cons this-elem\n                (take-while-nth\n                  (if cond-met? (dec nth) nth)\n                  pred\n                  (rest lseq))))))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":114,"code":"(fn global-take-while [n p coll]\n  (let [e (first coll)\n        r (rest coll)\n        m (if (or (nil? e) (p e)) (dec n) n)]\n    (if (= m 0)\n      []\n      (cons e (lazy-seq (global-take-while m p r))))))","user":"540e8d13e4b0addc1aec671e"},{"problem":114,"code":"(fn t-w [n p [x & xs :as s]]\n  (let [b (p x)]\n    (if (and b (= n 1))\n      ()\n      (cons x (lazy-seq (t-w (if b (dec n) n) p xs))))))","user":"5078d366e4b08327cd804a5b"},{"problem":114,"code":"(fn gtw\n\t([n p s]\n\t\t(gtw n p s (lazy-seq [])))\n\t([n p s r]\n\t\t(if (zero? n)\n\t\t\t(reverse (rest r))\n\t\t\t(let [head (first s)]\n\t\t\t\t(recur (if (p head) (dec n) n) p (rest s) (conj r head))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":114,"code":"(fn take-while-n [n pred coll]\n  (lazy-seq\n    (if (empty? coll) ()\n      (let [item (first coll)]\n        (if (> n 1)\n          (cons item \n                (take-while-n \n                  (if (pred item) (dec n) n)\n                  pred\n                  (rest coll)))\n          (if (pred item)\n            ()\n            (cons item (take-while-n 0 pred (rest coll)))))))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":114,"code":"(fn ! [n p [h & t]] (when (or (< 1 n) (not (p h))) (cons h (lazy-seq (! (if (p h) (dec n) n) p t)))))","user":"53908e6be4b0b51d73faae9a"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (let [last-one (nth (filter pred coll) (dec n))]\n    (take-while #(not= last-one %) coll)))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [r n p [a & b]] \n  (if (= 0 n) \n    (butlast r) \n    (recur \n      (conj r a) \n      (- n (if (p a) 1 0))\n      p\n      b)))\n[]","problem":114,"user":"4f991ec1e4b0dcca54ed6cfb"},{"problem":114,"code":"#(case (first %&)\n   4 [2 3 5 7 11 13]\n   3 [\"this\" \"is\" \"a\" \"sentence\"]\n   1 [\"this\" \"is\"])","user":"5e8ce2fee4b0cb0169546328"},{"problem":114,"code":"(fn [n p s]\n  (butlast (first (reduce #(if (= (last %1) n ) %1 [(conj (first %1) %2) (if (p %2) (inc (last %1)) (last %1))]) [[] 0] s))))","user":"5a244240e4b0ff51aa4b32e9"},{"code":"#(butlast ((fn myf [n p s] \n  (if (= n 0) \n    nil \n    (if (p (first s)) \n      (cons (first s) (myf (dec n) p (rest s)))\n      (cons (first s) (myf n p (rest s)))))) %1 %2 %3))","problem":114,"user":"4e6e6630535d5021c1a89609"},{"problem":114,"code":"(fn [n p s] \n  (take (.indexOf s (nth (filter p s) (- n 1))) s))","user":"53a01fb1e4b0ca733b9744a6"},{"problem":114,"code":"(fn ft [n f [h & t]]\n  (when-not (or (zero? n) (and (= n 1) (f h)))\n    (cons h (ft (if (f h) (dec n) n) f t))))","user":"572de985e4b0cd1946bd0f7c"},{"code":"(fn gtw \n ([n p coll acc]\n (if (zero? n) (reverse (rest acc))\n    (let [curr (first coll)\n          nn (if (p curr) (dec n) n)]\n     (recur nn p (rest coll) (cons curr acc)))))\n ([n p coll] (gtw n p coll [])))","problem":114,"user":"4dcfbc44535d5973398f92a7"},{"problem":114,"code":"(fn global-take-while [n p? xs]\n  (when (seq xs)\n    (let [[head & tail] xs]\n      (when-not (and (p? head) (< n 2))\n        (lazy-seq (cons head (global-take-while (if (p? head) (dec n) n) p? tail)))))))","user":"4f5599dfe4b0a7574ea71806"},{"problem":114,"code":"(fn tw [n pred [fc & nc :as coll]]\n  (cond\n   (= n 1) (take-while (complement pred) coll)\n   (pred fc) (cons fc (tw (dec n) pred nc))\n   :else (cons fc (tw n pred nc))\n    )\n  )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":114,"code":"#(loop [n %1 p %2 s %3 acc []] \n     (if (empty? s) acc\n       (let [[h & t] s truth (p h)]\n         (if (and truth (= n 1)) acc\n           (recur (if truth (dec n) n) p t (conj acc h))\n       ))))","user":"55645592e4b0c656e3ff1802"},{"code":"#(letfn [(tw [n p [h & t]] (if (= 0 n) [] (cons h (tw (if (p h) (dec n) n) p t))))] (butlast (tw % %2 %3)))","problem":114,"user":"4ede8789535d10e5ff6f5337"},{"problem":114,"code":"(fn take-while+ [n p [s & ss]]\n  (lazy-seq \n   (cond (nil? s) nil\n         (not (p s)) (cons s (take-while+ n p ss))\n         (< n 2) nil\n         :else (cons s (take-while+ (dec n) p ss)))))","user":"5ad63a34e4b0ea6055cfac01"},{"problem":114,"code":"(fn [n p s]\n  (loop [n n s s r []]\n     (let [c (first s) pp (p c)]\n       (if (or\n            (empty? s) (and (= 1 n) pp)) r\n           (recur (if pp (dec n) n) (rest s) (conj r c))\n       )  \n     )\n  )  \n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"#(drop-last(loop [n % s %3 r [] ]\n  (if (or (= 0 n) (empty? s)) r\n    (recur (if (%2 (first s)) (dec n) n) (rest s) (conj r (first s))))))","problem":114,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(fn f [n pred coll]\r\n    (lazy-seq\r\n     (when-let [[h & t] (seq coll)]\r\n       (if (pred h)\r\n         (if (> n 1)\r\n           (cons h (f (dec n) pred t)))\r\n         (cons h (f n pred t))))))","problem":114,"user":"4f047177535dcb61093f6bc6"},{"problem":114,"code":"(fn global-take-while [n f s]\n  (loop [s s\n         i 0\n         res []]\n    (if (= i n)\n      (drop-last res)\n      (if (seq s)\n        (recur (rest s)\n               (if (f (first s)) (+ i 1) i)\n               (conj res (first s)))\n        res))))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn prog-114 [n pred coll]\n  (let [res (pred (first coll))]\n    (if (and res (> n 1))\n      (cons (first coll)\n            (lazy-seq (prog-114 (dec n) pred (rest coll))))\n      (if res\n        nil\n        (cons (first coll)\n              (lazy-seq (prog-114 n pred (rest coll))))))))","problem":114,"user":"504ec4d3e4b069badc5a33c9"},{"problem":114,"code":"(fn taken [n pred coll]\n  (let [pred' (complement pred)\n        chunk (take-while pred' coll)\n        tl    (drop-while pred' coll)\n        hd    (first tl)]\n   (if (>= 1 n)\n       chunk\n       (concat chunk [hd] (taken (dec n) pred (rest tl))))))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"(fn f [l d [h & r]]\n  (#(if (> % 0) (cons h (f % d r)) ())\n   (if (d h) (- l 1) l)))","problem":114,"user":"4fe97adde4b0547ebccb245e"},{"problem":114,"code":"(fn take-while-n\n  ([counter f coll] \n   (let [i (if (= 1 counter)\n              counter\n              (dec counter)\n             )]\n   (flatten (take i (take-while-n f coll)))))\n  ([f coll]\n     (println \"coll -\" (apply vector coll))\n     (let [before-met (take-while (complement f) coll)\n           all-met (take-while f coll)\n           first-met [(first all-met)]\n           not-counted (next all-met)\n           result\n           (if (and (not-empty before-met) (empty? all-met))\n              before-met\n              (concat before-met first-met (if (nil? not-counted)\n                                                 (take-while (complement f) (drop 1 coll))\n                                                 )))\n           tail (drop (count result) coll)\n           ]\n       (lazy-seq\n       (concat [result]\n               (take-while-n f tail))))))","user":"5e348945e4b0650de70e2b1d"},{"code":"(fn glo [i f [fi & fis]]\n   \n\n\t    (if (and (f fi))\n        (if (= i 1)\n          []\n          (cons fi (lazy-seq (glo (dec i) f fis)))\n\t      )\n        (cons fi (lazy-seq (glo i f fis)))\n\t    )\n\n     \n     )","problem":114,"user":"51bec919e4b013aa0d74b800"},{"problem":114,"code":"(fn [n p a]\n  (loop [r [] n n a a ]\n    (if (p (first a))\n      (if (= n 1)  \n        r\n        (recur (conj r (first a)) (dec n) (rest a)))\n      (recur (conj r (first a)) n (rest a)))))","user":"541ddadbe4b01498b1a71a84"},{"problem":114,"code":"(fn f[n p col]\n  (let [x (first col)]\n    (if (p x)\n      (if (> n 1)\n        (cons x (lazy-seq (f (dec n) p (rest col))))\n        nil)\n      (cons x (lazy-seq (f n p (rest col)))))))","user":"531f1e63e4b08068f379edc2"},{"problem":114,"code":"(fn take-count [n pred [x & xs :as s]]\n  (let [nn (if (pred x) (dec n) n)]\n    (when (and (seq s) (> nn 0))\n      (cons x (lazy-seq (take-count nn pred xs))))))","user":"53c649d3e4b00fb29b221297"},{"problem":114,"code":"(fn f [n p xs]\n  (if xs\n    (let [a (first xs)]\n      (if (and (= n 1) (p a))\n        nil\n        (lazy-seq (cons a (f (if (p a) (dec n) n) p (next xs))))))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":114,"code":"(fn [n, p, coll]\n  (loop [i (dec n), c coll, result []]\n    (let [x (take-while (complement p) c),\n          y (drop-while (complement p) c)]\n      (if (zero? i)\n          (concat result x)\n          (recur (dec i)\n                 (drop 1 y)\n                 (concat result x (take 1 y)))))))","user":"567695c2e4b05957ce8c6157"},{"problem":114,"code":"(fn [n p s]\n  (butlast (last\n  (reduce\n   (fn [[c l] x]\n     (if (= n c)\n       [c l]\n       [(if (p x) (inc c) c) (conj l x)]))\n   [0 []]\n   s))))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":114,"code":"(fn gtw [n pred [x & xs]]\n   (let [i (if (pred x) (dec n) n)]\n      (if (pos? i)\n         (cons x (lazy-seq (gtw i pred xs))))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn [n pred s]\n    (let [a (atom 1)] \n\t    (letfn [(fun [x] (cond\n\t\t\t       (not (pred x)) true\n\t\t\t       (< @ a n) (do (swap! a inc) true)\n\t\t\t       :else false))]\n\t\t (take-while fun s))))","problem":114,"user":"4e6e3a1e535d5021c1a89602"},{"problem":114,"code":"(fn global-take-while [limit pred coll]\n  (letfn [(global-take-while* [n res [x & xs :as coll]]\n            (if (seq coll)\n              (if (>= n limit)\n                res\n                (if (pred x)\n                  (recur (inc n) (conj res x) xs)\n                  (recur      n  (conj res x) xs)))\n              res))]\n    (butlast (global-take-while* 0 [] coll))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":114,"code":"(fn gtw\n  ([n p s] (drop-last (gtw n p s [])))\n  ([n p s res]\n    (if (zero? n)\n      res\n      (recur\n         (if (p (first s)) (dec n) n)\n         p\n         (rest s)\n         (conj res (first s))))))","user":"55ede35ce4b0121d4835fde1"},{"problem":114,"code":"(fn take-while-n [n pred xs]\n  (if (pred (first xs))\n    (if (= 1 n)\n      '()\n      (cons (first xs) (lazy-seq (take-while-n (- n 1) pred (rest xs)))))\n    (cons (first xs) (lazy-seq (take-while-n n pred (rest xs))))))","user":"5553b924e4b0deb715856e06"},{"problem":114,"code":"(fn take-while-n [n pred [fst & rst :as coll]]\n  (if (or (zero? (dec n)) (empty? coll))\n    (take-while (complement pred) coll)\n    (lazy-seq (cons fst\n                    (take-while-n (if (pred fst) (dec n) n) pred rst)))))","user":"52d00832e4b07d0d72b273b4"},{"code":"(fn [n p v] (loop [m 0 c v l []]\n              (if (= m n) (butlast l)\n                (recur (if (p (first c)) (+ 1 m)\n                         m)\n                       (rest c)\n                       (conj l (first c))\n                       )\n                )\n              )\n  )","problem":114,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [n p s]\n  (loop [rv [] tmp s c 0]\n    (if (or (empty? tmp) (= c n))\n       (reverse (rest (reverse rv)))\n       (let [f (first tmp) r (rest tmp)]\n         (if (p f)\n           (recur (conj rv f) r (inc c))\n           (recur (conj rv f) r c))))))","problem":114,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":114,"code":"(fn [n f s]\n    (loop [s s r [] o 1]\n      (if (seq s)\n        (if (f (first s))\n          (if (= o n)\n            r\n            (recur (rest s) (conj r (first s)) (+ o 1)) \n            )\n          (recur (rest s) (conj r (first s)) o)\n          )\n        r\n        )\n      )\n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn p114 [num pred seq]\n  (if (or (< num 1) (empty? seq))\n    nil\n    (let [s (first seq)\n    m (pred s)]\n      (if (and m (= 1 num))\n\tnil\n\t(lazy-seq (cons s (p114 (if m (dec num) num)\n\t\t\t\tpred (rest seq))))))))","problem":114,"user":"4e513ecf535dc968683fc4f6"},{"code":"(fn f [l d [h & r]]\r\n  (#(if (> % 0) (cons h (f % d r)) ())\r\n   (if (d h) (- l 1) l)))","problem":114,"user":"4dce6e41535d5973398f92a2"},{"code":"(fn f [n p col]\n  (if (p (first col))\n    (if (= n 1) nil\n      (lazy-seq (cons (first col) (f (dec n) p (rest col)))))\n    (lazy-seq (cons (first col) (f n p (rest col))))))","problem":114,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":114,"code":"(fn f [n p [h & t]]\n  (if (p h)\n    (if (= n 1) '() (cons h (lazy-seq (f (dec n) p t))))\n    (cons h (lazy-seq (f n p t)))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":114,"code":"(fn gt [n pred coll]\n    (loop [counter n, to-take 0]\n      (cond (zero? counter) (take (dec to-take) coll)\n            (pred (nth coll to-take)) (recur (dec counter) (inc to-take))\n            :else (recur counter (inc to-take)))))","user":"5f548678e4b0a0bc16850a7e"},{"problem":114,"code":"#(let [n (nth (filter %2 %3) (dec %) )] (take-while (fn [v] (not= n v)) %3))","user":"5c379636e4b0d62ef62d9f76"},{"code":"(fn [n p l]\n  (second (reduce \n   (fn [[c l] ne] \n     (let [cn (if (p ne) (inc c) c)]\n      [cn (if (< cn n) (conj l ne) l)])\n   ) \n   [0 []] l)))","problem":114,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn take-n [n pred coll]\n  (lazy-seq\n    (when (not (empty? coll))\n      (let [match? (pred (first coll))\n            rem    (if match? (dec n) n)]\n        (when (> rem 0)\n          (cons (first coll) (take-n rem pred (rest coll))))))))","problem":114,"user":"4e6defcc535d5021c1a895f8"},{"problem":114,"code":"(fn some-n [n pred coll]\n  (letfn [(get-some-n [r coll]\n           (lazy-seq\n             (cond\n               (empty? coll) (empty coll)\n               (pred (first coll))\n                 (if (zero? (dec r))\n                  (empty coll)\n                  (cons (first coll) (get-some-n (dec r) (rest coll))))\n               :else (cons (first coll) (get-some-n r (rest coll))) )))]\n    (get-some-n n coll)))","user":"57f9011ee4b0d3187e900935"},{"problem":114,"code":"(fn tw [n p [x & xs]]\n  \n    (if (and (p x)(= 1 n))\n      '()\n      (cons x (tw (if (p x)(dec n) n) p xs))))","user":"567c63f6e4b05957ce8c61bb"},{"code":"(fn my-take-while [n pred coll]\n  (lazy-seq\n    (let [first-element (first coll)\n          n (if (pred first-element) (dec n) n)]\n      (when (> n 0)\n        (cons first-element (my-take-while n pred (rest coll)))))))","problem":114,"user":"5152bc4ee4b001f44f99bfef"},{"problem":114,"code":"(fn [b c d] (butlast\n  ((fn peu [a x y] \n    (if (or (empty? y) (= a 0)) [] \n      (if (x (first y)) \n        (cons (first y) (lazy-seq (peu (dec a) x (rest y)))) \n        (cons (first y) (lazy-seq (peu a x (rest y)))))))\nb c d)))","user":"53fc8424e4b0de5c418485b3"},{"problem":114,"code":"; not sure returned sequence is lazy as problem specifies\n; but, hey, none of the tests test that\n(fn take-up-to0\n  ([n p s] (take-up-to0 n p s []))\n  ([n p s acc]\n   (let [s1 (first s)]\n     (if (p s1)\n       (if (= n 1) acc\n           (take-up-to0 (dec n) p (rest s) (conj acc s1)))\n       (take-up-to0 n p (rest s) (conj acc s1))))))","user":"54e3df6ae4b024c67c0cf7e3"},{"problem":114,"code":"(fn global-take-while\n  [n p coll]\n  (loop [result []\n         ns n\n         c coll]\n    (if (zero? ns)\n      (drop-last result)\n      (recur (conj result (first c))\n             (if (p (first c))\n               (dec ns)\n               ns)\n             (rest c)))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn mytake [n f s]\n  (lazy-seq\n   (when-let [[c & r] (seq s)]\n     (let [m (if (f c) (dec n) n)]\n          (when (pos? m) \n            (cons c (mytake m f r)))))))","problem":114,"user":"4f05ea25535dcb61093f6c02"},{"problem":114,"code":"(fn g-t-w [n p l]\n  (loop [np n, lp l, cr 0]\n    (if (> np 0)\n      (recur (if (p (first lp))(dec np) np) (rest lp) (inc cr))\n      (subvec l 0 (dec cr)))\n    ))","user":"5545477fe4b0a04f79299531"},{"problem":114,"code":"(fn my-tw [n p coll]\n   (loop [_c coll\n          ret []\n          count 0]\n     (if (= count n)\n       (butlast ret)\n       (recur (rest _c) (conj ret (first _c)) (if (p (first _c)) (inc count) count))\n       )))","user":"55a372f1e4b0acc240e31537"},{"problem":114,"code":"(fn global-take-while [n p [x & r]]\n  (lazy-seq\n    (when x\n      (let [remaining (if (p x) (dec n) n)]\n        (when (pos? remaining)\n          (cons x (global-take-while remaining p r)))))))","user":"5353afa0e4b084c2834f4b03"},{"code":"(fn [n pred coll]\n\t(let [n_ (atom n)]\n\t\t(take-while identity \n\t\t\t(map \n\t\t\t\t#(if (pred %)\n\t\t\t\t\t(if (zero? (swap! n_ dec)) nil %)\n\t\t\t\t\t%)\n\t\t\t\tcoll))))","problem":114,"user":"520242bae4b030ee0c5b26e3"},{"code":"(fn global-take-while [n f sequence]\n  (loop [n n so-far [] coll sequence]\n    (if (or (= n 0) (empty? coll))\n      so-far\n      (recur\n       (if (f (first coll)) (- n 1) n)\n       (if (and (f (first coll)) (= 0 (- n 1))) so-far (conj so-far (first coll)))\n       (rest coll)))))","problem":114,"user":"50052fd0e4b0678c553fc45d"},{"code":"(fn global-take-while [n pred coll]\n\t(when (seq coll)\n\t  (lazy-seq\n\t   (let [[head & tail] coll]\n\t     (if (pred head)\n\t\t (if (zero? (dec n))\n\t\t     nil\n\t\t   (cons head\n\t\t\t  (global-take-while (dec n) pred tail)))\n\t       (cons head\n\t\t     (global-take-while n pred tail)))))))","problem":114,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [n p s]\n(loop [times n\n       p p\n       s s\n       res []]\n  (if (zero? times)\n    (drop-last res)\n    (recur (if (p (first s)) (dec times) times) \n           p\n           (rest s)\n           (conj res (first s))))))","problem":114,"user":"52b35a6ee4b0c58976d9ad07"},{"code":"(fn f [n p c]\n(if (< (count (filter p c)) n)\nc\n(f n p (pop c))))","problem":114,"user":"4e823ed7535db62dc21a62c7"},{"problem":114,"code":"(fn gtw [n p [x & xs]]\n  (let [r (p x)]\n    (if (and (<= n 1) r) \n      (list)\n      (cons x (lazy-seq (gtw (if r (dec n) n)\n                             p\n                             xs))))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (loop [processing coll\n         acc []\n         c n]\n    (if (or (= 0 c)\n            (empty? coll))\n      (butlast acc)\n      (let [[l r] (split-with (complement pred) processing)]\n        (recur (rest r)\n               (into [] (concat acc (conj (vec l) (first r))))\n               (dec c))))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":114,"code":";(fn global-take-while [n f coll]\n;     (loop [ans []\n;            i 0\n;            counter 0]\n;       (if (and (= (dec n) counter) (f (nth coll i)))\n;         ans\n;         (recur (conj ans (nth coll i)) (inc i) (if (f (nth coll i))\n;                                                  (inc counter)\n;                                                  counter)))))\n\n(fn gtw [n f coll]\n     (when-not (or (zero? n) (and (= n 1) (f (first coll))))\n       (cons (first coll) \n             (gtw (if (f (first coll))\n                    (dec n)\n                    n)\n                  f\n                  (rest coll)))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":114,"code":"(fn take-while-not-nth\n  [i p s]\n  (if (empty? s) s\n      (let [[h & t] s]\n        (if (p h)\n            (if (= i 1) [] (lazy-seq (cons h (take-while-not-nth (- i 1) p t))))\n            (lazy-seq (cons h (take-while-not-nth i p t)))))))","user":"58152157e4b0f478707a0631"},{"problem":114,"code":"(fn twn [n p [x & xs]]\n  (let [n-next (if (p x)\n                 (dec n)\n                 n)]\n      (if (zero? n-next)\n        '()\n        (lazy-seq (cons x (twn n-next p xs))))))","user":"56d4b22de4b0ea9b8538f7bb"},{"code":"(fn [n f c]\n  (loop [i 0,\n         result [],\n         cc c]\n    (if (or (= i n) (not cc))\n      result\n      (let [e (first cc)]\n        (if (f e)\n          (if (= (inc i) n)\n            result\n            (recur (inc i) (conj result e) (next cc)))\n          (recur i (conj result e) (next cc)))))))","problem":114,"user":"5341b141e4b00652c8746ecf"},{"problem":114,"code":"(fn take-if [n pred [x & xs]]\n  (let [n (if (pred x) (dec n) n)]\n    (when (> n 0)\n      (cons x (lazy-seq (take-if n pred xs))))))","user":"5a257747e4b07f18be40aa1f"},{"problem":114,"code":"(fn twg [n pred coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if-not (pred (first s))\n        (cons (first s) (twg n pred (rest s)))\n        (when-not (= 1 n)\n          (cons (first s) (twg (dec n) pred (rest s))))))))","user":"56df254be4b0ca2494a095ea"},{"problem":114,"code":"(fn [limit pred coll]\n  (loop [acc [] c limit xs coll]\n    (cond\n     (empty? xs) acc\n     (and (pred (first xs)) (> c 1)) (recur (conj acc (first xs)) (dec c) (rest xs))\n     (not (pred (first xs))) (recur (conj acc (first xs)) c (rest xs))\n     :else acc)))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":114,"code":";; TODO: reorder predicates\n (comp butlast\n  (fn f [n p s]\n    (if (pos? n)\n      (cons (first s)\n            (lazy-seq\n             (f (if (p (first s))\n                  (dec n) n\n                  ) p (next s))\n             ))\n      )\n    ))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn gtw [n p coll]\n  (loop [coll coll found [] fcount 0]\n\t\t(if (empty? coll) found\n\t\t(let [c (first coll)]\n\t\t(cond (= fcount n) (butlast found)\n\t\t\t  (p c) (recur (rest coll) (conj found c) (inc fcount))\n\t\t\t  :else (recur (rest coll) (conj found c) fcount)\n\t\t)\n\t\t)\n\t\t)\n\t)\n)","problem":114,"user":"50588af1e4b06522596eba7d"},{"problem":114,"code":"(fn global-take-while\n  [n pred s]\n  (let [i-pred (complement pred)\n        head-items (take-while i-pred s)]\n    (if (= 1 n)\n      head-items\n      (let [tail-items (drop-while i-pred s)]\n        (concat head-items (list (first tail-items)) (global-take-while (dec n) pred (rest tail-items)))))))","user":"53b952eee4b047364c0444e6"},{"code":"(fn [N f s] (second (reduce (fn [[n c] b] (let [m (if (f b) (inc n) n)\n                                                z (if (< m N) (conj c b) c) ]\n                                             [m z]) )\n                            [0 []]\n                            s )) )","problem":114,"user":"4ee7d177535d93acb0a6686f"},{"problem":114,"code":"(fn t-w\n  [n f [v & vs]]\n  (if (nil? v)\n    '()\n    (let [r (f v)]\n      (cond (not r) (lazy-seq (conj (t-w n f vs) v))\n            (and r (> n 1)) (lazy-seq (conj (t-w (dec n) f vs) v))\n            :else '()))))","user":"5eb1c786e4b00a66d4a95201"},{"code":"(fn [k p xs]\n  (loop [k k xs xs acc []]\n    (if (empty? xs) acc\n      (let [[x0 & xs'] xs]\n        (if (p x0) (if (= k 1) acc (recur (dec k) xs' (conj acc x0)))\n          (recur k xs' (conj acc x0)))))))","problem":114,"user":"508157b2e4b0946d0443855c"},{"code":"(fn tk [n p coll]\n  (vec (map first\n        (take-while #(< (second %) n)\n                    (map (fn [a b] [a b])\n                         coll\n                         (reductions + (map #(if (p %) 1 0) coll)))))))","problem":114,"user":"4ddbdc1b535d02782fcbe9fd"},{"code":"(fn take-while-up-to [n p s]\n   (if (empty? s) []\n       (if (p (first s))\n         (if (<= n 1) []\n             (cons (first s) (take-while-up-to (dec n) p (rest s))))\n         (cons (first s) (take-while-up-to n p (rest s))))))","problem":114,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn glob-take-while [n pred [head & tail]]\n  (if (and (= 1 n) (pred head))\n    ()\n    (lazy-seq (cons head (glob-take-while (if (pred head) (dec n) n) pred tail)))))","problem":114,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn r [n p s] \n  (if (p (first s)) \n    (if (== n 1)\n      nil\n      (cons (first s) (r (dec n) p (rest s))))\n    (cons (first s) (r n p (rest s)))))","problem":114,"user":"513b77f3e4b00f740c76c403"},{"problem":114,"code":"(fn global-take-while [n p? xs]\n  (if (p? (first xs))\n    (let [n (dec n)]\n      (if (zero? n)\n        '()\n        (lazy-seq (cons (first xs) (global-take-while n p? (rest xs))))))\n    (lazy-seq (cons (first xs) (global-take-while n p? (rest xs))))))","user":"4fe49706e4b0e8f79898feb7"},{"code":"(let [a (atom 1)]\n  (fn f [n p [h & t]]\n    (if (p h)\n      (swap! a inc))\n    (if (> @a n)\n      nil\n      (cons h (f n p t)))))","problem":114,"user":"4db016af838c48654951d9b9"},{"code":"(fn [n pred s]\n  (\n  (fn f2 [num-filt s]\n    (dorun\n    (println \"num-filt = \" num-filt \"; s = \" s)\n     )\n    \n     (when-not (or (and (= n (inc num-filt))\n                         (pred (first s)))\n                    \n                    (empty? s)\n                    \n                    )\n       (if (pred (first s))\n         (cons (first s) (lazy-seq (f2 (inc num-filt) (rest s))))\n         (cons (first s) (lazy-seq (f2 num-filt (rest s))))\n         )\n       )\n     )\n   \n   0 s\n   )\n  )","problem":114,"user":"51281b25e4b03a34742b4304"},{"problem":114,"code":"(fn gtake [n pred seq]\n    (loop [n n, s seq, out []]\n        (println n s out)\n        (cond (empty? s) out\n              (zero? n)  out\n              (pred  (first s)) \n                (if (zero? (dec n)) out\n                    (recur (dec n) (rest s) (conj out (first s))))\n              :else             (recur n (rest s) (conj out (first s))))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":114,"code":"(fn global-take-while\n  ([n pred coll] (global-take-while n pred coll nil))\n  ([n pred coll last-hit]\n   (lazy-seq\n     (when (pos? n)\n       (let [[before after] (split-with (complement pred) coll)]\n         (concat (and last-hit [last-hit])\n                 before\n                 (global-take-while (dec n) pred (rest after) (first after))))))))","user":"56ac81ace4b03c432f187347"},{"code":"(fn [n pred coll]\n  (let [indexed (map vector (range) coll)\n        satisfies (filter #(pred (second %)) indexed)\n        last-index (first (last (take n satisfies)))]\n    (take last-index coll)))","problem":114,"user":"4ebcb8ff535dfed6da9c6d8a"},{"problem":114,"code":"(fn global-take-while [n f x]\n  (let [[a [b & c]] (split-with #(not (f %)) x)]\n    (if (> n 1) (concat a [b] (lazy-seq (global-take-while (dec n) f c))) a)))","user":"54769c7ae4b0c51c1f4d72a8"},{"code":"#( first\n  (reduce (fn [[c n] e]\n    (let [n (if (%2 e)\n                   (inc n)\n                   n)\n          c (if (>= n %1) c (conj c e))]\n      [c n])) [[] 0] %3))","problem":114,"user":"4daa374930acd6ed13482a68"},{"code":"(fn [n p x] (take (.indexOf x (nth (filter p x) (dec n))) x))","problem":114,"user":"52016690e4b0b2e020a18f0f"},{"problem":114,"code":"(fn F [n pred coll]\n  (last (take-while #(< (count (filter pred %)) n) \n                    (map #(take % coll) (range (count coll))))))","user":"5566d812e4b0c656e3ff1837"},{"problem":114,"code":"(fn [n pred coll] \n   (letfn [ (take-first-n [n pred coll] \n     (if (= n 0)\n       []\n       (let [elem (first coll)\n             next-n (if (pred elem)\n                      (dec n)\n                      n\n                 )\n             ]\n       (concat [elem] (take-first-n next-n pred (rest coll))))\n       ))\n     ]\n     (drop-last (take-first-n n pred coll)))\n     \n     )","user":"53c73e8ae4b00fb29b2212a5"},{"problem":114,"code":"(fn t [n p coll]\n (lazy-seq\n   (let [[x & xs] coll\n         n (if (p x) (dec n) n)]\n     (when (> n 0)\n       (cons x (t n p xs))))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"problem":114,"code":"(fn [n p coll]\n   (let [pcoll (take n (filter p coll))]\n     (take-while #(not= (last pcoll) %) coll)))","user":"5a4b3abde4b05d388ecb6b81"},{"problem":114,"code":"(fn [cnt f arr]\n  (nth\n  \t(reduce\n   \t (fn [locans item]\n       (let [gooditem (nth locans 0)\n             loccnt (+ (if (f item) 1 0) (nth locans 1))]\n         (if (< loccnt cnt)\n           [(conj gooditem item) loccnt]\n           [gooditem loccnt])))\n     [[] 0] arr)\n   \t0))","user":"5744723ae4b009280f9f2b3a"},{"code":"(fn [n p s] (let [the-fn (fn f [i c]\n              (if (or (>= i n) (empty? c))\n                '()\n                (if (p (first c))\n                  (if (= (inc i) n)\n                    '()\n                    (cons (first c) (lazy-seq (f (inc i) (next c))))\n                  )\n                  (cons (first c) (lazy-seq (f i (next c))))\n                )\n              )\n            )]\n              (the-fn 0 s)\n            )\n)","problem":114,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":114,"code":"#(loop [n %1, coll %3, result []]\n\t(if (empty? coll)\n\t\tresult\n\t\t(let [c0 (first coll), n' (if (%2 c0) (dec n) n)]\n\t\t\t(if (= 0 n')\n\t\t\t\tresult\n\t\t\t\t(recur n' (rest coll) (conj result c0))))))","user":"5370b386e4b0fc7073fd6e9b"},{"problem":114,"code":"(fn mytake [n f s]\n  (lazy-seq\n    (when-let [[c & r] (seq s)]\n      (let [m (if (f c) (dec n) n)]\n        (when (pos? m)\n(cons c (mytake m f r)))))))","user":"5ae0976be4b0837691e92c43"},{"code":"(fn taker [n p s]\n  (let [start (take-while (complement p) s)\n        everything-else (drop-while (complement p) s)]\n    (if (= n 1)\n      start\n      (lazy-seq (concat start\n                  (list (first everything-else))\n                  (taker (dec n) p (rest everything-else)))))))","problem":114,"user":"515737f0e4b0b0b4b87062d0"},{"problem":114,"code":"(fn my-take-while [n p seq]\n  (butlast\n   (loop [acc [], x n, xs seq]\n     (if (= 0 x)\n       acc\n       (recur (conj acc (first xs))\n              (if (p (first xs)) (dec x) x)\n              (rest xs))))))","user":"561d23e3e4b064ca9f4b16a5"},{"code":"(fn gtw ([n p s] (gtw n 0 p s))\n   ([n i p s] (let [fs (first s)]\n                (if (and (= i (dec n)) (p fs))\n                  nil\n                  (cons fs (lazy-seq (gtw n (if (p fs)(inc i) i) p (rest s))))\n                  )\n         \t   )\n   ))","problem":114,"user":"5274eb56e4b03e8d9a4a74bb"},{"problem":114,"code":"(fn gtw3\n  [n p s]\n  (drop-last (rest\n              (reduce (fn [[f & o :as r] i]\n                        (if (> f 0)\n                          (concat [(if (p i) (dec f) f)] o [i])\n                          r))\n                      [n] s))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":114,"code":"(fn tw-fn [n p [xf & xr]]\n  (let [n (if(p xf) (dec n) n)]\n    (if (zero? n)\n      '()\n      (lazy-seq (cons xf (tw-fn n p xr))))))","user":"52761edae4b03e8d9a4a74d4"},{"code":"(fn tw [n p [x & r]]\n  (if (and (p x) (= 1 n))\n    []\n    (cons x (lazy-seq (tw (if (p x) (dec n) n) p r)))))","problem":114,"user":"500aa15ee4b03d00572d2d76"},{"code":"(partial (fn tw [h n f v]\n  (if (= 0 n)\n      []\n    (let [s (take-while (comp not f) (drop h v))]\n      (concat (take h v) s (tw 1 (dec n) f (drop (+ h (count s)) v))))))\n0)","problem":114,"user":"507fbd77e4b089ade05efbd3"},{"problem":114,"code":"(fn global-take-while [n p coll]\n  (take-while #(not= (last (take n (filter p coll))) %) \n              coll))","user":"5e92adb6e4b0fbed045a37ea"},{"problem":114,"code":"(fn gtw [n p [h & t]] (let [pt (p h)] \n\t(if (and pt (>= 1 n)) ()\n\t(cons h (lazy-seq (gtw (if pt (dec n) n) p t))))))","user":"53e19461e4b0d874e779ae59"},{"code":"(fn [n p s]\n  (take (dec (count (take-while #(< % n)\n   (reduce #(let [n (if %2\n                      (inc (last %1))\n                      (last %))]\n              (conj %1 n))\n    [0]\n    (map p s))))) s))","problem":114,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn f [n p [a & r]]\n         (lazy-seq\n           (when (or (> n 1) (not (p a)))\n             (cons a\n                   (f (if (p a) (dec n) n) p r)))))","problem":114,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn f\n  [n p c]\n  (when (> n 0)\n    (lazy-seq\n     (let [x (first c)\n           r (f (if (p x) (dec n) n) p (next c))]\n       (if (and (== 1 n) (p x))\n         r\n         (cons x r))))))","problem":114,"user":"4db53f87535d87e67b28fe08"},{"problem":114,"code":"(fn gtw [n p s]\n  (if (and (p (first s)) (= 1 n))\n    nil\n    (concat [(first s)]\n            (gtw (if (p (first s)) (dec n) n)\n                 p\n                 (rest s)))))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn gtw [n p s]\n  (let [[not-ps p-rs] (split-with (complement p) s)]\n    (lazy-cat\n      not-ps\n      (when (and (> n 1) (seq p-rs)) (cons (first p-rs) (gtw (dec n) p (rest p-rs)))))))","problem":114,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn my-take-while\n  [n pred coll]\n  (loop [count n, [x & xs :as xss] coll, acc []]\n    (cond\n      (empty? xss) acc\n      (pred x) (if (= count 1)\n                 acc\n                 (recur (dec count) xs (conj acc x)))\n      :else (recur count xs (conj acc x)))))","problem":114,"user":"52dd6cc8e4b09f7907dd13e2"},{"code":"(fn take-while-mod [n p xs]\n  (lazy-seq\n    (if (p (first xs))\n      (if (= n 1)\n        '()\n        (cons (first xs) (take-while-mod (dec n) p (next xs))))\n      (cons (first xs) (take-while-mod n p (next xs))))))","problem":114,"user":"4e7f5a0b535db966e863cc41"},{"problem":114,"code":"#(take-while (partial not= (nth (filter %2 %3) (dec %1))) %3)","user":"548b7db8e4b0e286459a11fd"},{"problem":114,"code":"(fn n-take-while [n pred s]\n  (let [fs (first s) match (pred fs)] \n    (if (and (< n 2) match)  ()  \n      (cons fs (n-take-while (if match (dec n) n)  pred (rest s))))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn f [n p [h & t :as s]]\n  (if (or (zero? n) (empty? s) (and (= 1 n) (p h))) nil\n      (lazy-seq (cons h (f (if (p h) (dec n) n) p t)))))","problem":114,"user":"4fa6d532e4b081705acca1be"},{"code":"(fn [n p l]\n  (first\n  (last\n  (take-while #(> (second %) 0)\n  (reductions \n    #(vector (conj (first %) %2)\n       (if (p %2) (dec (second %)) (second %))) [[] n] l)))))","problem":114,"user":"4fa30027e4b081705acca187"},{"problem":114,"code":"(fn take-while-upto [n p coll]\n  (if (empty? coll)\n    []\n    (let [x (first coll) r (rest coll) k (if (p x) (dec n) n)]\n      (if (zero? k)\n        []\n        (lazy-seq (cons x (take-while-upto k p r)))))))","user":"55afd469e4b002ce9d5cbc19"},{"problem":114,"code":"#(drop-last ((fn f [n p [a & r :as s]]\n                 (cond (= n 0) nil\n                       (p a) (cons a (f (dec n) p r))\n                       :else (cons a (f n p r)))) % %2 %3))","user":"5921a080e4b09b4ee5954c77"},{"code":"(fn take-while-n [n pred seq]\n         (concat (take-while (complement pred) seq)\n                 (if (<= n 1) []\n                     (let [rest-seq (drop-while (complement pred) seq)]\n                      (cons (first rest-seq)\n                            (take-while-n (dec n) pred (rest rest-seq)))))))","problem":114,"user":"5294e44de4b02ebb4ef75016"},{"problem":114,"code":"(fn twn [n p [h & t]]\n  (let [m (if (p h) (dec n) n)]\n    (if (= m 0)\n      '()\n      (cons h (twn m p t)))))","user":"4f5eda39e4b0030a34fb2b56"},{"problem":114,"code":"(fn tw [n p [x & xs]] (when (or (> n 1) (not (p x))) (cons x (tw (if (p x) (dec n) n) p xs))))","user":"5fd10010e4b07e53c2f3f02a"},{"problem":114,"code":"(fn global-take-while [n p [fst :as c]]\n  (if (or (= 0 n) (empty? c) (and (= 1 n) (p fst))) nil\n      (lazy-seq (cons fst\n                      (global-take-while (if (p fst) (dec n) n)\n                                         p\n                                         (rest c))))))","user":"572ec4dde4b0cd1946bd0f8d"},{"problem":114,"code":"(fn gtake [thenum thepred theseq] (let [satisfied (atom 0)]\n(for [elem theseq :let [willbe (if (thepred elem) 1 0)]\n:while (< (+ @satisfied willbe) thenum)]\n(do (if (thepred elem) (swap! satisfied inc))\nelem))))","user":"55f75c6be4b06e875b46cea9"},{"code":"#(lazy-seq (loop [n % result [] [h & r] %3]\n               (cond (zero? n) (butlast result)\n                     (%2 h) (recur (dec n) (conj result h) r)\n                     :else (recur n (conj result h) r))))","problem":114,"user":"4f036d9b535dcb61093f6ac1"},{"problem":114,"code":"(fn [n pred coll]\n  (drop-last 1 (loop [coll coll n n acc []]\n    (let [new-n (if (pred (first coll)) (dec n) n)]\n      (if (zero? n)\n        acc\n        (recur (rest coll) new-n (conj acc (first coll)))))))\n)","user":"55a74d46e4b09e57187da2a3"},{"problem":114,"code":"(fn [n pre coll]\n   (take (loop [out coll\n           cnt 0\n           idx 0]\n      (if (pre (first out))\n        (if (= (inc cnt) n)\n          idx\n          (recur (rest out) (inc cnt) (inc idx)))\n        (recur (rest out) cnt (inc idx)))\n      ) coll)\n  )","user":"5f0824c5e4b0cf489e8d7f5b"},{"code":"(fn global-take-while [n fp v]\n  (loop [a [] v v ni n]\n    (let [y (first v)\n          nni (if (fp y) (dec ni) ni)]\n      (println nni)\n      (if (= 0 nni) a\n          (recur (conj a y) (rest v) nni)))))","problem":114,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn ntw [n p s]\n  (lazy-seq\n   (when (seq s)\n          (let [[f r] (split-with (complement p) s)]\n\t    (if (< 1 n)\n\t      (concat f [(first r)] (ntw (dec n) p (rest r)))\n\t      f)))))","problem":114,"user":"4ef9c8f9535dced4c769f26b"},{"problem":114,"code":"(fn x [n pred c]\n  (when (seq c)\n    (lazy-seq\n      (let [matches? (pred (first c))\n            last? (= n 1)\n            next-number (if matches? (dec n) n)]\n        (if (and matches? last?)\n          nil\n          (cons (first c)\n                (x next-number pred (rest c))))))))","user":"4ec1923f535dfed6da9c6db2"},{"problem":114,"code":"(fn take-while-n [n p [h & t]] \n  (cond\n    (= h []) '()\n    (and (p h) (= 1 n)) '()\n    (p h) (cons h (take-while-n (- n 1) p t))\n    :else (cons h (take-while-n n p t))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn [n f z] (letfn [(helper [c [h & t]] (if (empty? t) nil (if (and (= c (dec n)) (f h)) nil (lazy-seq (cons h (helper (if (f h) (inc c) c) t))))))]                                                    \n                    (helper 0 z)))","problem":114,"user":"52265e41e4b04e78ff2e1981"},{"problem":114,"code":"(fn global-take-while [n pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [pred? (pred (first s))\n           next-n (if pred? (dec n) n)]\n       (when (not (and pred? (= n 1)))\n         (cons (first s) (global-take-while next-n pred (rest s))))))))","user":"5317d78ee4b08068f379ed63"},{"code":"(fn mult-take-while [n p coll]\n  (let [notp (complement p)\n        g (take-while notp coll) \n        c (drop-while notp coll)]\n    (if (> n 1)\n      (lazy-cat\n        g\n        [(first c)]\n        (mult-take-while (dec n) p (rest c)))\n      g)))","problem":114,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn t [n p s](let \n  [e (first s) f #(conj (lazy-seq (t  % p (rest s))) e)]\n  (if \n    (p e)\n    (if \n      (= n 1)\n      []\n      (f (dec n))\n    )\n    (f n)\n  )\n)\n)","problem":114,"user":"4e6df3c9535d5021c1a895fa"},{"code":"(fn take-state [n pred [primero-elemento & otros-elementos :as sec]]\n   (when (seq sec)\n     (if (pred primero-elemento)\n       (if (= 1 n)\n         nil\n         (cons primero-elemento (take-state (dec n) pred otros-elementos)))\n       (cons primero-elemento (take-state n pred otros-elementos)))))","problem":114,"user":"52c8758be4b0c2d177d62135"},{"problem":114,"code":"(fn f\n  ([n p xs i] \n   (if (empty? xs)\n     ()\n     (if (p (first xs))\n       (if (= (inc i) n)\n         ()\n         (lazy-seq (cons (first xs) (f n p (rest xs) (inc i)))))\n       (lazy-seq (cons (first xs) (f n p (rest xs) i))))))\n  ([n p xs] (f n p xs 0)))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn take-while-g \n   ([n f xs] (take-while-g (dec n) 0 f xs))\n   ([n cnt f [x & xs]]\n     (if (or (< cnt n) (not (f x)))\n       (cons x (lazy-seq (take-while-g n (if (f x) (inc cnt) cnt) f xs))))))","problem":114,"user":"4e513758535dc968683fc4f3"},{"code":"(fn gtw [n p s]\n  (take (count (take-while #(< % n) (rest (reductions #(if %2 (inc %1) %1) 0 (map p s))))) s))","problem":114,"user":"5123ac8ee4b061b4c6f0e0b1"},{"code":"(fn gtw [n p s]\n  (second (reduce (fn [[n s] x]\n                    (cond\n                     (<= n 0)             [n       s]\n                     (and (p x) (>= n 2)) [(dec n) (conj s x)]\n                     (and (p x) (=  n 1)) [(dec n) s]\n                     :else                [n       (conj s x)]))\n                  [n []]\n                  s)))","problem":114,"user":"4e8338d6535db62dc21a62d3"},{"problem":114,"code":"(fn gt [n pre col]\n  (let [e (first col)]\n    (cond (and (pre e) (> n 1))\n          (cons e (gt (dec n) pre (rest col)))\n          (and (pre e) (= n 1))\n          []\n          :else\n          (cons e (gt n pre (rest col))))))","user":"53664e3be4b0243289761e74"},{"code":"(fn tw [n f c]\n  (if (f (first c))\n    (if (= n 1)\n      []\n      (lazy-seq (cons (first c) (tw (- n 1) f (rest c))))\n    )\n    (lazy-seq (cons (first c) (tw n f (rest c))))\n  )\n)","problem":114,"user":"4f84400de4b033992c121c2e"},{"problem":114,"code":"(fn [n p sq]\n  (lazy-seq\n   (loop [s sq\n          res []\n          cnt 0]\n     (let [fst (first s)]\n      (if (p fst)\n        (if (= n (inc cnt))\n          res\n          (recur (rest s) (conj res fst) (inc cnt)))\n        (recur (rest s) (conj res fst) cnt))))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":114,"code":"(fn t [n p [f & r]]\n  (let [o (if (p f) (- n 1) n)]\n   (if (= o 0)\n     []\n     (cons f (lazy-seq (t o p r))))))","user":"5742ec91e4b05c31a32c0883"},{"problem":114,"code":"(fn take-while-n\n  [n pred s]\n  (loop [result []\n         remaining s\n         pred-count 0]\n    (if (empty? remaining)\n      result\n      (let [x (first remaining)\n            new-count (if (pred x)\n                        (inc pred-count)\n                        pred-count)]\n        (if (= new-count n)\n          result\n          (recur (concat result [x])\n                 (rest remaining)\n                 new-count))))))","user":"5b602a66e4b0c6492753e6fc"},{"code":"(fn f\n  ([n p [x & xs :as xxs]]\n   (if (zero? (dec n))\n     (take-while (complement p) xxs)\n     (cons x (f (if (p x) (dec n) n) p xs)))) \n  )","problem":114,"user":"4dc537fd535d8a4b2fd74282"},{"code":"(fn [n p coll]\r\n  (let [c (atom 0)]\r\n    (take-while #(do (if (p %) (swap! c inc)) (< @c n))\r\n                coll)))","problem":114,"user":"4fb37882e4b081705acca2a0"},{"code":"(fn f [n p s] (if (p (first s))\n                  (if (= n 1)\n                      ()\n                      (lazy-seq (cons (first s) \n                                (f (dec n) p (rest s)))))\n                  (lazy-seq (cons (first s)\n                                 (f n p (rest s))))))","problem":114,"user":"4eaede1f535d7eef30807329"},{"code":"(fn tw [n p [f & r]]\n  (let [n (if (p f) (dec n) n)]\n    (if (pos? n)\n      (cons f (tw n p r))\n    )\n  )\n)","problem":114,"user":"4f725201e4b07046d9f4f02f"},{"problem":114,"code":"(fn [n p xs]\n    (let [ps (map #(if (p %) 1 0) xs)\n          rs (reductions + ps)\n          l (count (take-while #(< % n) rs))]\n      (take l xs)))","user":"4ea03f70535d7eef308072a1"},{"problem":114,"code":"(fn take-w [n pred coll]\n  (lazy-seq\n    (when-let [f (first coll)]\n      (let [x (if (pred f) (dec n) n)]\n        (when-not (zero? x)\n          (cons f (take-w x pred (rest coll))))))))","user":"5ba15075e4b0a20761a2339e"},{"code":"#(butlast ((fn f [n p [a & r]]\n  (if (= n 0)\n    []\n    (if (p a)\n      (lazy-cat [a] (f (dec n) p r))\n      (lazy-cat [a] (f n p r)))))\n           % %2 %3))","problem":114,"user":"529b44afe4b02ebb4ef7509d"},{"problem":114,"code":"(fn [n p xs]\n  (letfn [(tw [n p [h & t :as xs] c]\n            (when (seq xs)\n              (let [c (if (p h) (inc c) c)]\n                (when (< c n)\n                  (cons h (lazy-seq (tw n p t c)))))))]\n    (tw n p xs 0)))","user":"59eb63e3e4b0249b7282077c"},{"problem":114,"code":"(fn [n p c]\n  (letfn [(s [i xs]\n           (lazy-seq\n            (when-let [[y & ys] (seq xs)]\n              (if (and (= 1 i) (p y))\n                nil\n                (if (p y)\n                  (cons y (s (- i 1) ys))\n                  (cons y (s i ys)))))))]\n    (s n c)))","user":"4ee75ec2535d93acb0a66867"},{"problem":114,"code":"(fn ff [n p? [h & t]]\n    (if-not (or (zero? n) (and (p? h) (= 1 n))) \n     (lazy-seq (cons h (ff (if (p? h) (dec n) n) p? t))) \n    ))","user":"5281a445e4b0757a1b17143a"},{"code":"(fn take-until-n [n pred coll]\n  (lazy-seq\n   (if-not (zero? n)\n     (when-let [s (seq coll)]\n       (let [f (first s) \n             r (rest s)\n             check (pred f)]\n         (if-not (and check (= n 1))\n           (cons f (take-until-n (if check (dec n) n) pred r))))))))","problem":114,"user":"5326c5f7e4b09d4e7a9b54f2"},{"code":"(fn global-take-while [num f [x & xs]]\n  (if (f x)\n      (if (= 1 num) []\n          (cons x (global-take-while (dec num) f xs)))\n      (cons x (global-take-while num f xs))))","problem":114,"user":"4f725466e4b07046d9f4f030"},{"code":"(fn f [n p [h & t :as s]]\n  (cond \n   (and (= n 1) (p h)) '() \n   (p h) (cons h (f (dec n) p t))\n   :else (cons h (f n p t))))","problem":114,"user":"4faafccde4b081705acca209"},{"problem":114,"code":"(fn take-while-n [n f xs]\n  (loop [n n\n         [i & xs] xs\n         acc []]\n    (if (zero? n)\n      (butlast acc)\n      (if (seq xs)\n        (recur (if (f i) (dec n) n)\n               xs\n               (conj acc i))\n        (conj acc i)))))","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn take-while-n [n p coll]\n  (if (empty? coll) nil\n    (let [h (first coll)]\n      (if (p h)\n        (if (<= n 1) nil\n          (cons h (take-while-n (dec n) p (rest coll))))\n        (cons h (take-while-n n p (rest coll)))))))","problem":114,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [n p xs]\n  (->> xs\n       (reductions (fn [acc x] ((if (p x) dec identity) acc)) n)\n       rest\n       (take-while pos?)\n       (map (fn [x c] x) xs)))","problem":114,"user":"50479524e4b0371827a27bc4"},{"problem":114,"code":"(fn tw [n p xs]\n  (if-let [f (first xs)]\n    (let [match (p f)\n          nn (if match (dec n) n)]\n      (if-not (and match (= nn 0))\n        (lazy-seq (cons f (tw nn p (rest xs))))))))","user":"506ba58be4b0eda3100c090b"},{"problem":114,"code":"(fn [n pred coll]\n  (loop [c 0 [h & t] coll r []]\n    (when h\n     (if (pred h)\n       (if (= n (inc c))\n         r\n         (recur (inc c) t (conj r h)))\n       (recur c t (conj r h))))))","user":"5590e55de4b0277789237676"},{"code":"#(let [a (atom 0)]\n   (take-while (fn [b]\n                 (or (not (%2 b))\n                     (< (swap! a inc) %1)))\n               %3))","problem":114,"user":"4e68be01535d8ccf87e9fe88"},{"code":"(fn [n p s]\n  (loop [n n s s r []]\n    (if (empty? s)\n      r\n      (let [[hd & tl] s]\n        (if (p hd)\n          (if (= 1 n)\n            r\n            (recur (dec n) tl (conj r hd)))\n          (recur n tl (conj r hd)))))))","problem":114,"user":"50435852e4b034ff00315d22"},{"problem":114,"code":"(fn tw [n pred coll]\n  (if (seq coll)\n    (if (pred (first coll))\n      (if (> n 1)\n        (cons (first coll) (lazy-seq (tw (dec n) pred (rest coll)))))\n      (cons (first coll) (lazy-seq (tw n pred (rest coll)))))))","user":"53d78b64e4b0e771c3025466"},{"problem":114,"code":"(fn k [n pred coll]\n  (lazy-seq\n    (let [next-n (if (pred (first coll)) (dec n) n)]\n      (when (> next-n 0)\n        (cons (first coll) (k next-n pred (rest coll)))))))","user":"50f10f7be4b06d9538fe211a"},{"code":"(fn [n pred s]\n  (loop [k 0 s s acc []]\n    (if (= n k) (drop-last acc)\n        (recur\n              (if (pred (first s)) (inc k) k)\n              (rest s)\n              (conj acc (first s))))))","problem":114,"user":"4fdb02aae4b05e33b9224f56"},{"problem":114,"code":"#(take-while (fn [x] (not= x (nth (filter %2 %3) (dec %)))) %3)","user":"5c41db45e4b08cd430848ece"},{"problem":114,"code":"(fn [n p sq]\n        (let [aux\n              (fn [res n p [hd & more]]\n                (cond \n                 (nil? hd) \n                 res\n\n                  (p hd)\n                  (let [xn (dec n)]\n                    (if (zero? xn) res \n                        (recur (conj res hd) xn p more)))\n                                    \n                  :otherwise\n                  (recur (conj res hd) n p more)))]\n          \n          (aux [] n p sq)))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":114,"code":"(fn f [n pred? xs]\n  (lazy-seq\n   (when (and (pos? n) (not (empty? xs)))\n     (let [cur (first xs), next-n (if (pred? cur) (dec n) n)]\n       (when-not (zero? next-n)\n         (cons cur (f next-n pred? (rest xs))))))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":114,"code":"(fn [n p col]\n  (loop [x 1 r [] c col]\n    (if (seq c)\n      (if (p (first c))\n        (if (= n x)\n          r\n          (recur (inc x) (conj r (first c)) (next c)))\n        (recur x (conj r (first c)) (next c)))\n      r\n    )\n  )\n)","user":"5df08767e4b093ff717275bf"},{"code":"(fn t [n p seq]\n  (let [c (atom 0)\n        delt (if (p (first seq)) 1 0)]\n    (apply concat \n           (take (- n delt)\n\t          (partition-by #(if (p %)\n    \t                       (swap! c inc)\n        \t                   @c)\n            \t            seq)))))","problem":114,"user":"4dafa380edd6309eace4d17c"},{"problem":114,"code":"(fn nf [n pred xs]\n  (if (or (zero? n) \n          (empty? xs)\n          (and (= 1 n) (pred (first xs))))\n    nil\n    (cons (first xs)\n          (lazy-seq (nf (if (pred (first xs)) (dec n) n) \n                        pred \n                        (rest xs))))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":114,"code":"(fn global-take-while [i pred s]\n   (loop [rst s cnt 0 res []]\n     (cond (or (>= cnt i)  (empty? rst)) (butlast res)\n           (pred (first rst)) (recur (rest rst) (inc cnt) (conj res (first rst)))\n           :else (recur (rest rst) cnt (conj res (first rst))))))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn [n p s]\n  (let [mytfs (map p s)]\n    (loop [nel 0 nct 0]\n      (cond\n       (and (< nct n) (nth mytfs nel)) (recur (inc nel) (inc nct))\n       (and (< nct n) (not (nth mytfs nel))) (recur (inc nel) nct)\n       :else (take (dec nel) s)))))","problem":114,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":114,"code":"(fn f [n pred coll]\n   (loop [coll coll\n          cnt 0\n          res []]\n     (if (empty? coll) res\n         (let [[h & t] coll\n               cnt (if (pred h) (inc cnt) cnt)]\n           (if (= cnt n) res\n               (recur t cnt (conj res h)))))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"#((fn f [c n] (let [i (first c)] (when (and (seq c) (or (not (%2 i)) (< n %))) (cons i (lazy-seq (f (rest c) (if (%2 i) (inc n) n))))))) %3 1)","problem":114,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn [n p s]\n    (rest (map second\n      (take-while #(< (first %) n)\n        (reductions (fn [[c a] x] [(if (p x) (inc c) c) x]) [0] s)))))","problem":114,"user":"5201572be4b0d7096e99ddbb"},{"code":"(fn gtw [n p s]\n  (when s\n    (let [res (p (first s))\n          newn (if res (dec n) n)]\n      (if (<= newn 0)\n        nil\n        (lazy-seq\n          (cons\n            (first s)\n            (gtw newn p (rest s))))))))","problem":114,"user":"50427899e4b0add3005c0fc2"},{"problem":114,"code":"(fn twn [n f c] (lazy-seq (let [e (first c) r (rest c) p (f e)] (if (and p (= 1 n)) (list) (cons e (twn (if p (dec n) n) f r))))))","user":"5abe2fc2e4b073f17744271e"},{"problem":114,"code":"(fn tw [n p xs]\n  (loop [n n [x & s] xs acc []]\n    (cond\n      (seq? x) acc\n      (zero? n) (pop acc)\n      (p x) (recur (dec n) s (conj acc x))\n      :else (recur n s (conj acc x))\n      )))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn glob-take-while [n pred x]\n  (if (and (= 1 n)\n           (pred (first x)))\n    []\n      (if (pred (first x))\n        (cons (first x) (lazy-seq (glob-take-while (dec n) pred (rest x))))\n        (cons (first x) (lazy-seq (glob-take-while n pred (rest x)))))))","problem":114,"user":"52e17e66e4b09f7907dd1423"},{"code":"(fn [n pred a-seq]\n   (letfn [(tws[state a-seq]\n    (when a-seq\n      (if (pred (first a-seq))\n        (when (not= state (dec n))\n          (cons (first a-seq) (lazy-seq (tws (inc state) (next a-seq)))))\n        (when (< state n)\n          (cons (first a-seq) (lazy-seq (tws state (next a-seq))))))))]\n     (tws 0 a-seq)))","problem":114,"user":"4e58bcd4535d8a8b8723a296"},{"problem":114,"code":"(fn fun [n pred s]\n              (println n)\n              (cond \n               (= 0 n) ()\n               (and (pred (first s)) (not= 0 (dec n))) (cons (first s) (lazy-seq (fun (dec n) pred (rest s))))\n               (and (pred (first s)) (zero? (dec n))) (lazy-seq (fun (dec n) pred (rest s)))\n               :else (cons (first s) (lazy-seq (fun n pred (rest s))))))","user":"54cad2d5e4b057c6fda3a26c"},{"code":"(fn [n pred s]\n  (loop [s s, out [], n n]\n    (if (seq s)\n      (let [cur (first s)]\n        (if (pred cur)\n          (if (pos? (dec n))\n            (recur (rest s) (conj out cur) (dec n))\n            out)\n          (recur (rest s) (conj out cur) n)))\n      out)))","problem":114,"user":"511cca27e4b00c2a1fa7ff7d"},{"code":"(fn f [n p [a & c]]\n  (if (and (= n 1) (p a))\n    nil\n    (cons a (f (if (p a)\n                 (dec n)\n                 n)\n               p c))))","problem":114,"user":"4ebaf790535dfed6da9c6d6e"},{"code":"(fn gtw [c pred coll]\n  (if (seq coll)\n    (if (pred (first coll))\n      (if (> (dec c) 0)\n        (cons (first coll) (gtw (dec c) pred (rest coll))))\n        (cons (first coll) (gtw c pred (rest coll))))))","problem":114,"user":"500900dee4b0144d4f561e42"},{"problem":114,"code":"(fn take-n-while [n pred [h & t]]\n  (cond (nil? h) '()\n        \n        (pred h)\n        (if (= n 1)\n          '()\n          (cons h (lazy-seq (take-n-while (dec n) pred t))))\n        \n        (pos? n) (cons h (lazy-seq (take-n-while n pred t)))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":114,"code":"(fn func [n pred coll]\n   (if (seq coll)\n     (let [x (first coll)\n           xs (rest coll)\n           m (if (pred x) (dec n) n)]\n       (if (and (= 1 n) (pred x))\n         '()\n         (lazy-seq (cons x (func m pred xs)))))\n     '())\n)","user":"53ed6976e4b0d648e757f4c4"},{"problem":114,"code":"(fn globaltakewhile [n p s]\n  (if (== n 1)\n    (take-while #(not (p %)) s)\n    (if (p (first s))\n      (cons (first s) (globaltakewhile (dec n) p (rest s)))\n      (cons (first s) (globaltakewhile n p (rest s))))))","user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn tw [n p [x & r]]\n  (if (and (= n 1) (p x))\n      []\n      (cons x (lazy-seq (if (p x) (tw (dec n) p r) (tw n p r))))))","problem":114,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn [n p s]\n  (loop [m n k 0 ]\n    (if (= 0 m)\n      (take (dec k) s)\n      (recur (if (p (nth s k)) (dec m) m) (inc k)))))","problem":114,"user":"4db85282535d1e037afb218a"},{"problem":114,"code":";; http://www.4clojure.com/problem/114\n(fn g-take-while\n  [limit p-fn [coll-h & coll-t]]\n  ;(take-while p-fn coll)\n  (when-not (or (zero? limit) (and (= limit 1) (p-fn coll-h)))\n    (cons coll-h (g-take-while (if (p-fn coll-h) (dec limit) limit) p-fn coll-t))))","user":"5c92105ce4b048ec896c59f7"},{"problem":114,"code":"(fn gtw [n pred [x & xs]]\n  (let [m (if (pred x) (dec n) n)]\n   (when (pos? m)\n    (cons x (gtw m pred xs)))))","user":"5b64370ae4b0c6492753e73c"},{"problem":114,"code":"(fn take-nth-while [n pred coll]\n  (->> coll\n       (reductions \n        (fn [[c sum] next-el] \n          [(conj c next-el) (+ sum (if (pred next-el) 1 0))]) \n        [[] 0])\n       (take-while #(> n (second %)))\n       last\n       first))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":114,"code":"(fn [n p s]\n  (letfn [ (f [countdown rs] \n              (if (empty? rs)\n                nil\n                (let [head (first rs)\n                      tail (rest rs)\n                      new-count (if (p head) (dec countdown) countdown)]\n                  (if (= new-count 0)\n                    nil\n                    (cons head (lazy-seq (f new-count tail))))\n                  )))\n           ]\n    (f n s))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":114,"code":"(fn f [n p [h & t]]\n  (let [n (if (p h) (dec n) n)]\n    (if (= 0 n)\n      nil\n      (lazy-seq (cons h (f n p t))))))","user":"55ac07afe4b03311e7b7328f"},{"problem":114,"code":"(fn gtw [n f se]\n    (loop [acc []\n           hits 0\n           [el & re] se]\n       (if (= hits n)\n         (butlast acc)\n         (recur (conj acc el) (if (f el) (inc hits) hits) re))))","user":"56018dd4e4b04bb52996e18f"},{"problem":114,"code":"(fn take-while-n\n  [n f xs]\n  (loop [now  (first xs)\n         left (rest xs)\n         so-far []\n         n n]\n    (cond (zero? n) so-far\n          (and (f now) (= 1 n)) so-far\n          (f now) (recur (first left) (rest left) (conj so-far now) (dec n))\n          :else (recur (first left) (rest left) (conj so-far now) n)\n      )))","user":"57717915e4b0979f896515b3"},{"code":"(fn g [n f [a & b]]\n  (let [n (if (f a) (dec n) n)]\n    (when (> n 0)\n      (cons a (lazy-seq (g n f b))))))","problem":114,"user":"4ea09fa4535d7eef308072aa"},{"problem":114,"code":"(fn [n p xs]\n  (loop [n n p p xs xs acc []]\n    (if (empty? xs) acc\n        (if (p (first xs))\n          (if (= 1 n)\n            acc\n            (recur (- n 1) p (rest xs) (conj acc (first xs))))\n          (recur n p (rest xs) (conj acc (first xs)))))))","user":"5d81b40ce4b0915913b1d379"},{"code":"#((fn f [[h & s] i]\n   (let [i (if (%2 h) (+ 1 i) i)]\n\t   (when (< i %) (cons h (f s i)))))   \n       %3 0)","problem":114,"user":"4dada16fc9a9d6ed2699dc57"},{"problem":114,"code":"(fn [n f coll] (let [\n  go (fn go [i n f coll] \n    (if (empty? coll) nil\n\t   (let [fi (first coll) re (next coll)]\n\t     (cond \n\t\t   (not (f fi)) (cons fi (lazy-seq (go i n f re)))\n\t\t   (= i n) nil\n\t\t   :else (cons fi (lazy-seq (go (inc i) n f re)))\n\t\t )\n\t   )\n  ))] (go 1 n f coll)))","user":"53fe1c3be4b0de5c418485f2"},{"problem":114,"code":"(fn [n f coll]\n  (loop [n n acc [] coll coll]\n    (let [counter (if (f (first coll))\n                    (dec n)\n                    n)]\n      (if (zero? counter)\n        acc\n        (recur counter\n               (conj acc (first coll))\n               (rest coll))))))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn f [i p [x & r :as s]]\r\n  (lazy-seq\r\n    (let [i (if (p x) (- i 1) i)]\r\n      (if (> i 0)\r\n        (cons x (f i p r))))))","problem":114,"user":"4db858d1535d1e037afb218c"},{"code":"#(take (nth (keep-indexed (fn [i e] (if (%2 e) i)) %3) (dec %)) %3)","problem":114,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":114,"code":"(fn gtw [n pred coll]\n  (if (and (pred (first coll)) (= n 1))\n    nil\n    (lazy-seq (cons (first coll) (gtw (if (pred (first coll))\n                                        (dec n)\n                                        n) pred (rest coll))))\n    ))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":114,"code":"(fn take-n-while [n p s]\n  (println n)\n  (println s)\n  (cond\n    (= n 0) []\n    (= (count s) 0) []\n    (and (= n 1) (p (first s))) []\n    (p (first s)) (cons (first s) (take-n-while (dec n) p (rest s)))\n    :else (cons (first s) (take-n-while n p (rest s)))\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn f [n p c] (lazy-seq (when-let [s (seq c)] (if (p (first s))\n                                                 (if (<= n 1)\n                                                   nil\n                                                   (cons (first s) (f (dec n) p (rest s))))\n                                                 (cons (first s) (f n p (rest s))) ))))","problem":114,"user":"50563ae2e4b0ce54f56f0405"},{"code":"(fn [n0 p xs0]\n  (loop [n n0 xs xs0 col []]\n  \t(if (or (= 0 n) (empty? xs))\n      (drop-last col)\n      (recur \n       (if (p (first xs)) (dec n) n)\n       (rest xs)\n       (conj col (first xs))))))","problem":114,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn take-to-n\n  [n p s]\n  (lazy-seq \n    (let [item (first s)]\n      (if (p item)\n        (if (> n 1)\n          (cons item (take-to-n (- n 1) p (rest s)))\n          (vector))\n        (cons item (take-to-n n p (rest s)))))))","problem":114,"user":"511b233ae4b07ab9ec456180"},{"problem":114,"code":"(fn c-take-while\n   ([n p a]\n    (c-take-while n p a 0))\n   ([n p a c]\n    (let\n      [\n       f (first a)\n       pr (p f)\n       next-c (if pr (inc c) c)\n       again (and (< next-c n)\n                  (> (count a) 0 ))\n       state {\n              :f  f\n              :pr pr\n              :again again\n              \n              }\n       ]\n      (lazy-seq\n        (if again\n          (cons f\n                (c-take-while n p (rest a) next-c))))))\n   )","user":"58a9e872e4b01a0c0b232973"},{"problem":114,"code":"(fn f [n p coll]\n  (when-let [e (first coll)]\n    (cond\n     (not (p e)) (lazy-seq (cons e (f n p (next coll))))\n     (> n 1) (lazy-seq (cons e (f (dec n) p (next coll))))\n     :else nil)))","user":"55ea0780e4b0121d4835fda7"},{"problem":114,"code":"(fn [n pred xs]\n  (take (->> xs\n             (map-indexed vector)\n             (filter #(pred (second %)))\n             (take n) last first) xs))","user":"50ec409ce4b04edc33777045"},{"code":"(fn gtw [n pred coll]\n  (let [f (first coll)\n        p (pred f)\n        n' (if p (dec n) n)]\n    (when (> n' 0) (cons f (gtw n' pred (rest coll)))\n      )))","problem":114,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn [n p s]\n  (let [i (atom n)]\n    (take-while #(> (if (p %) (swap! i dec) @i) 0) s) \n  )  \n)","problem":114,"user":"5176afd2e4b085adf681d889"},{"code":"(fn take-before-nth-match [n pred coll]\n  (letfn [(count-to-take [n c coll]\n            (cond\n              (= n 0) c\n              (pred (first coll)) (count-to-take (dec n) (inc c) (rest coll))\n              :else (count-to-take n (inc c) (rest coll))))]\n    (take (dec (count-to-take n 0 coll)) coll)))","problem":114,"user":"52463059e4b09dbe66b56198"},{"code":"(fn j [n f s]\n  (lazy-seq\n    (if (or (empty? s) (<= n 0))\n      '()\n      (if (f (first s))\n        (if (= n 1) '() (cons (first s) (j (dec n) f (rest s))))\n        (cons (first s) (j n f (rest s)))))))","problem":114,"user":"4ec07699535dfed6da9c6da2"},{"problem":114,"code":";(fn [n pred coll]\n;  (let [limit (first (drop (dec n) (take n (filter pred coll))))]\n;    (take-while #(not= limit %) coll)))\n\n;(fn [n pred coll]\n;  (take-while #(not= (first (drop (dec n) (filter pred coll))) %) coll))\n\n;(fn [n pred coll]\n;  (first (partition-by (hash-set (first (drop (dec n) (filter pred coll)))) coll)))\n\n(fn take-to [n pred coll]\n  (let [e (first coll)]\n    (if (pred e)\n      (if (> n 1)\n        (cons e (take-to (dec n) pred (rest coll))))\n      (cons e (take-to n pred (rest coll))))))","user":"56481722e4b0284900eef628"},{"problem":114,"code":"(fn [n p xs]\n    (loop [result []\n           hits 1\n           [next-elt & more-elts :as unprocessed] xs]\n      (if (empty? unprocessed)\n        result\n        (if (p next-elt)\n          (if (= hits n)\n            result\n            (recur (conj result next-elt)\n                   (inc hits)\n                   more-elts))\n          (recur (conj result next-elt)\n                 hits\n                 more-elts)))))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn tw2 [n p l]\n  (if (or (empty? l) \n          (zero? n)\n          (and (= 1 n) (p (first l))))\n    []\n    (cons (first l) \n          (tw2 (if (p (first l))\n                 (dec n)\n                 n)\n               p\n               (rest l)))))","problem":114,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn [n p s]\n  (loop [m n i 0]\n    (if (= m 0) \n      (take (- i 1) s)\n      (recur \n        (- m 1) \n        (+ i 1 \n          (some \n            (fn [[j e]] (when (p e) j)) \n            (map list (range) (drop i s))))))))","problem":114,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn __ [n pred coll]\n  (if (pred (first coll))\n    (if (> n 1)\n      (cons (first coll) (__ (dec n) pred (rest coll))))\n    (cons (first coll) (__ n pred (rest coll)))))","problem":114,"user":"52828298e4b0757a1b17145b"},{"problem":114,"code":"(fn take-while-n\n        ([n pred coll]\n           (take-while-n 0 n pred coll))\n        ([cnt n pred coll]\n           (if (or (empty? coll) (and (= (inc cnt) n) (pred (first coll))))\n             []\n             (cons (first coll) (lazy-seq (take-while-n (if (pred (first coll)) (inc cnt) cnt) n pred (rest coll)))))))","user":"52efd3d9e4b05e3f0be25ed4"},{"problem":114,"code":"(fn tw [n p s]\n  (cond\n   (empty? s) nil\n   (p (first s)) \n    (if (= n 1) nil (cons (first s) (lazy-seq (tw (dec n) p (rest s)))))\n   :else (cons (first s) (lazy-seq (tw n p (rest s))))))","user":"563dfc02e4b0da801c4e4662"},{"code":"(fn [acc n f s]\n  (let [fs (first s)\n        nn (if (f fs) (dec n) n)]\n    (if (<= nn 0)\n      acc\n      (recur (conj acc fs) nn f (rest s))\n    ))) []","problem":114,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn f [n p [x :as coll]]\n    (if-let [new-n (and (seq coll) (if (p x) (dec n) n))]\n      (if (> new-n 0)\n        (lazy-seq\n         (cons x\n               (f new-n p (next coll)))))))","problem":114,"user":"507056b8e4b07bd6ad9b9f29"},{"code":"(fn f \r\n    ([n p c] (butlast (f n p c n)))\r\n    ([n p [fst & rst :as c] i]\r\n      (if (or (empty? c) (zero? i))\r\n        '()\r\n        (lazy-seq \r\n          (cons fst (f n \r\n                       p \r\n                       rst \r\n                       (if (p fst) (dec i) i)))))\r\n      ))","problem":114,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn g [n p [f & s]]\n  (if (and (= n 1) (p f))\n    []\n    (lazy-cat [f] (g (if (p f) (dec n) n) p s))))","problem":114,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":114,"code":"(fn tkw [n f s]\n  (lazy-seq\n    (cond\n     \t(empty? s) s\n     \t(f (first s)) (if (= n 1) '() (cons (first s) (tkw (dec n) f (rest s)) ))\n     \t:else (cons (first s) (tkw n f (rest s)))\n    )\n   )\n)","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn i [n f s]\n   (if (f (first s))\n     (if (= n 1) ()\n         (cons (first s) (i (dec n) f (rest s))))\n     (cons (first s) (i n f (rest s)))))","problem":114,"user":"52c25645e4b07a9af579237d"},{"code":"(fn take-while-count [k pred [head & tail]]\n  (if-not (pred head)\n    (cons head (take-while-count k pred tail))\n    (if (= k 1)\n      nil\n      (cons head\n            (take-while-count (dec k)\n                              pred\n                              tail)))))","problem":114,"user":"530578ede4b0d8b024fd3760"},{"problem":114,"code":"(fn [n p coll]\n    (take (->> coll\n               (map-indexed (fn [i e] [i (p e)]))\n               (filter second)\n               (#(nth % (dec n)))\n               first) coll))","user":"52950ab6e4b02ebb4ef7501a"},{"problem":114,"code":"(fn [n p a]\n   (loop [f (first a) r (rest a) m 0 ret []]\n     (if (= m n)\n       (drop-last ret)\n       (if (p f)\n         (recur (first r) (rest r) (inc m) (conj ret f))\n         (recur (first r) (rest r) m (conj ret f))))))","user":"57d9f603e4b0bd073c20240a"},{"code":"(fn testlazy [n f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [n' (if (f (first s)) (- n 1) n)]\n       (when (>= n' 1)\n         (cons (first s) (testlazy n' f (rest s))))\n       )\n     )))","problem":114,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn take-until-nth [n p s]\n  (let [p (if (set? p) #(some p [%]) p)\n        n (if (p (first s)) (dec n) n)]\n    (if (< 0 n)\n      (cons (first s) (take-until-nth n p (rest s))))))","problem":114,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn a [n pred l]\n  (cond \n   (zero? n) nil\n   (empty? l) nil\n   (and (= 1 n) (pred (first l))) nil\n   (pred (first l)) (cons (first l) (a (dec n) pred (rest l)))\n   :else (cons (first l) (a n pred (rest l)))))","problem":114,"user":"52b405e1e4b0c58976d9ad15"},{"code":"(fn gtw\n    ([n pred coll] (gtw n pred coll 0))\n    ([n pred coll matched]\n     (let [item (first coll)]\n       (when item\n         (let [matched (if (pred item) (inc matched) matched)]\n           (when (< matched n)\n             (lazy-seq (cons item (gtw n pred (rest coll) matched)))))))))","problem":114,"user":"5164867fe4b003cf19fdde3e"},{"problem":114,"code":"(fn take-while-n\n  [n pred coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (when (> n 0) \n        (if (and (= 1 n) (pred (first s))) \n          nil       \n          (cons (first s) (take-while-n (if (pred (first s)) (dec n) n) pred (rest s))))))))","user":"5243e37ae4b076204b44fae3"},{"code":"(fn take-while [n p s]\n  (lazy-seq\n   (when-let [[x & xs] (seq s)]\n     (let [n (- n (if (p x) 1 0))]\n       (if (pos? n)\n         (cons x (take-while n p xs)))))))","problem":114,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn gtw [n pred [head & tail :as coll]]\n  (cond\n    (or (zero? n) (empty? coll)) []\n    ((complement pred) head) (cons head (lazy-seq (gtw n pred tail)))\n    (< 1 n) (cons head (gtw (dec n) pred tail))\n    :else []))","problem":114,"user":"521e8227e4b0dd19981ad082"},{"problem":114,"code":"(fn\n  [n p s]\n  (loop [n n s s r []]\n    (if (= 0 n)\n      (butlast r)\n      (if (p (first s))\n        (recur (dec n)\n               (rest s)\n               (conj r (first s)))\n        (recur n\n               (rest s)\n               (conj r (first s)))))))","user":"5893c64ce4b00487982d524b"},{"code":"(fn my-take-while [n pred coll]\n  (lazy-seq\n    (cond \n      (or (= n 0) (empty? coll))\n        []\n      (and (pred (first coll)) (= n 1))\n        []\n      (pred (first coll))\n        (cons (first coll) (my-take-while (dec n) pred (rest coll)))\n      :else\n        (cons (first coll) (my-take-while      n  pred (rest coll))))))","problem":114,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn gtw [n f vals]\n  (when (and (> n 0) (seq vals))\n    (if (f (first vals))\n      (when (> n 1)\n        (lazy-seq (cons (first vals) (gtw (dec n) f (rest vals)))))\n      (lazy-seq (cons (first vals) (gtw n f (rest vals)))))))","problem":114,"user":"4f0d093b535d0136e6c22313"},{"problem":114,"code":"(fn gtake-while [n p [x & xs]]\n  (let [m (if (p x) (dec n) n)]\n    (if (zero? m)\n      '()\n      (lazy-seq (cons x (gtake-while m p xs))))))","user":"5339c105e4b0e30313ee6cae"},{"problem":114,"code":"(fn myTake [n pred coll]\n  (loop [myN n\n         myColl coll\n         result []]\n    (if (or  (= myN 0) (empty? myColl))\n      (butlast  result)\n      (if (pred (first myColl))\n        (recur (dec myN) (rest myColl) (conj result (first myColl)))\n        (recur myN (rest myColl) (conj result (first myColl)))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"code":"(fn take-predict [t p s]\n  ((fn [r t s]\n    (if (p (first s))\n      (if (= 1 t) r (recur (conj r (first s)) (dec t) (rest s)))\n      (recur (conj r (first s)) t (rest s)))) [] t s))","problem":114,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn f [n p c]\n  (lazy-seq\n    (cond\n      (empty? c) ()\n      (p (first c)) (if (> n 1)\n                      (cons (first c) (f (dec n) p (rest c)))\n                      ())\n      :else (cons (first c) (f n p (rest c))))))","problem":114,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":114,"code":"(fn d [n p [a & s]]\n  (let [n (if (p a) (dec n) n)]\n    (if (= 0 n) nil\n      (cons a\n            (lazy-seq (d n p s))))))","user":"4eb97234535dfed6da9c6d53"},{"code":"(fn tw [n p [x & xs :as all]]\n  (if\n    (or\n      (empty? all)\n      (<= n 0)\n      (and (= 1 n) (p x))) '()\n    (lazy-cat [x] (tw (if (p x) (dec n) n) p xs))))","problem":114,"user":"514c2d05e4b02b8cbb2a9278"},{"problem":114,"code":"(fn r [n p s]\n  (cond\n   (empty? s) nil\n   (p (first s)) (if (= 1 n) nil\n                   (cons (first s)\n                       (lazy-seq (r (dec n)\n                                    p\n                                    (rest s)))))\n   true (cons (first s)\n              (lazy-seq (r n p (rest s))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":114,"code":"(fn [total pred coll]\n  (loop [c 0 acc [] coll coll]\n    (cond\n      (empty? coll) acc\n      (>= c total) (butlast acc)\n      (pred (first coll)) (recur (inc c) (conj acc (first coll)) (rest coll))\n      :else (recur c (conj acc (first coll)) (rest coll)))))","user":"504e71cbe4b0f6ff3350c4b3"},{"problem":114,"code":"(fn take-while [n pred coll]\n   (if (or (zero? n) (not (seq coll)) (and (pred (first coll)) (= n 1)))\n     nil\n     (cons (first coll)\n           (lazy-seq (take-while (if (pred (first coll)) (dec n) n)\n                                 pred (rest coll))))))","user":"57f80350e4b0d3187e90090c"},{"problem":114,"code":"(fn [n p coll]\n  (->> coll\n       (map (juxt p identity) )\n       (reductions #(vector (if (first %2) (inc (first %1)) (first %1)) (second %2)) [0 nil])\n       (rest)\n       (take-while #(< (first %) n))\n       (map second)))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [n p xs]\n    ((fn f [i xs]\n      (cond \n        (empty? xs) ()\n        (and (== i n) (p (first xs))) ()\n        :else (cons (first xs) \n                      (f (if (p (first xs)) (inc i) i) (rest xs)))))\n       1 xs))","problem":114,"user":"4dbad895535d1e037afb21ae"},{"problem":114,"code":"(fn solve [n p xs] (map #(->> % second second) (rest (filter #(< (first %) n) (reduce (fn [acc x]\n                       (conj acc (let [k ((comp first last) acc)] (if (first x)\n                         [(inc k) x]  [k x]))))\n                     [[0 0]]\n                     (map #(vector (p %) %) xs) )))))","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn global-takewhile [n p s]\n  (let [el (first s)]\n      (cond ; (zero? n) []\n       (and (p el) (= n 1)) []\n       (p el) (cons el (lazy-seq (global-takewhile (dec n) p (next s))))\n       :else (cons el (lazy-seq (global-takewhile n p (next s))))\n       )\n      )\n  )","problem":114,"user":"52319066e4b0e2e8de81d1e9"},{"problem":114,"code":"(fn [N P S]\n  (letfn [(tkw [n p s] (cond  (empty? s) nil\n                        \t  (and (= 1 n) (p (first s))) nil\n                              (p (first s)) (lazy-seq (cons (first s) (tkw (dec n) p (rest s))))\n                              :else  (lazy-seq (cons (first s) (tkw n p (rest s))))))]\n    (tkw N P S))\n  )","user":"5649615be4b0284900eef641"},{"problem":114,"code":"(fn [n pred coll] (loop [c coll counter 0 result []]\n                         (if (sequential? c)\n                             (if (< counter n) \n                                 (recur (next c) (if (pred (first c)) (inc counter) counter) (conj result (first c)))\n                                  (pop result))\n                               result)))","user":"534fa9dae4b084c2834f4acf"},{"code":"(fn tw [cnt f s]\n  (if (and (= 1 cnt) (f (first s)))\n    ()\n    (lazy-seq \n      (cons (first s) (tw (if (f (first s)) (dec cnt) cnt)\n                f\n                (rest s))))))","problem":114,"user":"4faec810e4b081705acca24e"},{"code":"(fn take-while2\n  [n pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n       (when (and (> n 0) (not (and (= 1 n) (pred (first s)))))\n         (cons (first s) (take-while2 (if (pred (first s)) (dec n) n) pred (rest s)))))))","problem":114,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn [n f coll]\n  (letfn [(rec [n c]\n            (let [[xs c] (split-with (complement f) c)\n                  [ys c] (split-with f c)\n                  m (- n (count ys))]\n              (if (or (empty? c) (>= 0 m))\n                (concat xs (take (dec n) ys))\n                (lazy-cat xs ys (rec m c)))))]\n    (rec n coll)))","problem":114,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn global-take-while [n pred coll]\n  (loop [i 0\n         [x & xs] coll\n         result []]\n    (cond\n      (empty? xs)                  result\n      (and (pred x) (= i (dec n))) result\n      (and (pred x) (< i n))       (recur (inc i) xs (conj result x))\n      :default                     (recur i       xs (conj result x)))))","problem":114,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":114,"code":"(fn gtw [n f [h & t]]\n  (when-not\n    (or (zero? n)\n        (and (= n 1)\n             (f h)))\n    (cons h\n          (gtw (if (f h)\n                   (dec n)\n                   n)\n               f\n               t))))","user":"566fa059e4b0a866af6896ea"},{"problem":114,"code":"(fn global-take-while [n pred col]\n      (if (zero? n)\n        []\n        (if (pred (first col))\n          (if (= 1 n)\n            []\n            (cons (first col) (lazy-seq (global-take-while (dec n) pred (rest col)))))\n          (cons (first col) (lazy-seq (global-take-while n pred (rest col)))))))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn n-take-while [n pred seq]\n  (lazy-seq (if (< n 1)\n              '()\n              (let [[y [x & xs]] (split-with (comp not pred) seq)]\n                (if (= n 1)\n                  y\n                  (concat y [x] (n-take-while (dec n) pred xs)))))))","problem":114,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":114,"code":"(fn solve [n pred [x & xs]]\n  (lazy-seq\n   (when-not (or (nil? x)\n                 (and (= n 1) (pred x)))\n     (cons x (solve (if (pred x) (dec n) n)\n                    pred\n                    xs)))))","user":"60537cd1e4b04c8f2157d152"},{"problem":114,"code":"(fn g-take-while [n pred col]\n  (lazy-seq\n   (when (and (> n 0) (seq col))\n     (cond\n       (and (pred (first col)) (> n 1))\n       (cons (first col) (g-take-while (dec n) pred (rest col)))\n       \n       (not (pred (first col)))\n       (cons (first col) (g-take-while n pred (rest col)))))))","user":"5cf895efe4b0b71b1d808a85"},{"code":"(fn [n f s]  \n  (take (count (take-while #(= % false) (map #(= (nth (filter f s) (- n 1)) %) s))) s))","problem":114,"user":"4fdf2b50e4b05e33b9224f93"},{"problem":114,"code":"(fn [n p s]\n  (letfn [(step [i tail]\n           (lazy-seq \n            (when (and (seq tail) (or (> i 1) (not (p (first tail)))))\n              (cons (first tail) (step (if (p (first tail)) (dec i) i) (rest tail))))))]\n    (step n s)))","user":"4fd4bddce4b0d4de60cee36e"},{"problem":114,"code":"(fn t [c p [f & s]]\n    (lazy-seq\n     (let [d (if (p f) (dec c) c)]\n       ({1 ()} (+ c d) ({nil [f]} s (cons f (t d p s)))))))","user":"580c8fcee4b0849f6811b721"},{"problem":114,"code":"#(letfn [(yl [xs i] (let [[a [b & bs]] (split-with %2 xs)]\n                      (if (>= (+ i (count a)) %)\n                        (take (- % i 1) a)\n                        (concat a (cons b (yl bs (+ i (count a))))))))]\n  (yl %3 0))","user":"54055aa9e4b0addc1aec6665"},{"problem":114,"code":"(fn glob-take-while [n pred coll]\n  (loop [match-cnt 0, rem coll, acc []]\n    (if (= match-cnt n)\n      (drop-last acc)\n      (let [item (first rem)\n            pres (pred item)]\n        (recur (if pres (inc match-cnt) match-cnt)\n               (rest rem)\n               (conj acc item))))))","user":"590b3aeae4b047aa04b199d0"},{"problem":114,"code":"(fn f [n p [x & xs]]\n  (letfn [(g [n]\n            (cons x (lazy-seq (f n p xs))))]\n    (cond\n      (nil? x) []\n      (p x) (if (= 1 n) [] (g (dec n)))\n      :else (g n))))","user":"5416b4a2e4b01498b1a71a01"},{"problem":114,"code":"(fn solve [n p [x & xs]]\n  (let [m (if (p x) (dec n) n)]\n    (if (or (= m 0) (nil? xs))\n      ()\n      (cons x (solve m p xs)))))","user":"56444fb1e4b0018b46ad8c0c"},{"code":"(fn _ [n p c]\n  (condp = n\n    0 nil\n    1 (take-while (complement p) c)\n    (let [[a b] (split-with (complement p) c)]\n      (concat a [(first b)] (_ (dec n) p (rest b))))))","problem":114,"user":"4e71705e535d5021c1a89649"},{"problem":114,"code":"(fn gtw [n f s]\n  (loop [s s\n         n n\n         r []]\n    (if (= n 0)\n      (take (dec (count r)) r)\n      (if (empty? s)\n        r\n        (recur (rest s) (if (f (first s)) (dec n) n) (conj r (first s)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":114,"code":"(fn global-take-while\n  ([n p ss] (global-take-while n p ss 0))\n  ([n p [s & ss] i]\n   (if (or (empty? ss) (and (p s) (= n (inc i)))) '()\n       (cons s (lazy-seq\n                (global-take-while n p ss (if (p s) (inc i) i)))))))","user":"55fbc657e4b0f488688e0666"},{"problem":114,"code":"(fn [n p sq]\n  (take (loop [i 0 r 0 s sq]\n\t\t  (let [c (first s)]\n\t        (if (p c)\n\t          (cond \n\t      \t    (= (inc r) n) i\n\t      \t    :else (recur (inc i) (inc r) (rest s)))\n\t          (if (seq s) (recur (inc i) r (rest s)) nil)))) sq))","user":"5578f292e4b05c286339e08f"},{"code":"(fn [n f s]\n  (letfn [(op [n s]\n    (cond (empty? s) '()\n          (and (= 1 n) (f (first s))) '()\n          (f (first s)) (cons (first s)\n            (lazy-seq (op (dec n) (rest s))))\n          true (cons (first s) (op n (rest s)))))]\n    (op n s)))","problem":114,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn global-take-while [n p col]\n    (if (empty? col)\n      nil\n      (let [t (and (not (nil? (p (first col) ))) (not (false? (p (first col)))))\n            n' (if t (dec n) n)]\n        (if (and (true? t) (zero? n'))\n          nil\n          (cons (first col) (lazy-seq (global-take-while n' p (rest col))))))))","problem":114,"user":"50e87427e4b0ebbe794eb7e8"},{"problem":114,"code":"(fn gtw [n p [f & r]]\n    (let [nn (if (p f) (dec n) n)]\n      (if (zero? nn) [] (lazy-seq (cons f (gtw nn p r))))))","user":"4e837808535db62dc21a62d9"},{"code":"(fn take-w [n f [x & xs :as xx]]\n  (if (empty? xx) '()\n      (let [new-n (if (f x) (dec n) n)]\n         (if (= new-n 0)\n           '()\n           (cons x (lazy-seq (take-w new-n f xs)))))))","problem":114,"user":"53300924e4b019098a6f8b55"},{"code":"(fn global-take-while [n p s]\n  (cond\n   (= n 1)       (take-while (complement p) s)\n   (p (first s)) (cons (first s) (lazy-seq (global-take-while (dec n) p (rest s))))\n   :else         (cons (first s) (lazy-seq (global-take-while n p (rest s))))))","problem":114,"user":"530bf87ee4b02e82168697d5"},{"code":"(fn custom-take [n pred ls]\n  (cond (or (empty? ls) (= n 0) (and (= n 1) (pred (first ls)))) []\n        (pred (first ls))\n        (lazy-seq (cons (first ls) (custom-take (dec n) pred (rest ls))))\n        :else (lazy-seq (cons (first ls) (custom-take  n pred (rest ls))))))","problem":114,"user":"5301157ae4b0d8b024fd3717"},{"code":"#(drop-last ((fn odd [n s]\n  (if (%2 (first s))\n    (if (= n 1) (count s) (odd (dec n) (rest s)))\n    (odd n (rest s)))) %1 %3) %3)","problem":114,"user":"505dcfc8e4b0e6aca564be0d"},{"problem":114,"code":"(fn [n p s]\n  (let [red (next (reductions #(if (p %2) (inc %) %) 0 s))]\n    (map first (take-while #(< (last %) n) (map vector s red)))))","user":"512b07f7e4b078b06821febb"},{"code":"(fn global-take-while [n p coll]\n  (let [[x & xs] coll]\n    (cond \n      (and (= 1 n) (p x)) '()\n      (p x) (cons x (lazy-seq (global-take-while (dec n) p xs)))\n      :else (cons x (lazy-seq (global-take-while n p xs))))))","problem":114,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn n-while [n f [x & r]]\n  (lazy-seq\n    (let [v (f x) \n          n (if v (dec n) n)]\n      (when (and x (pos? n))\n        (cons x (n-while n f r))))))","problem":114,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn take-while-nth [n p coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if (zero? (dec n))\n        (when-not (p (first s))\n          (cons (first s) (take-while-nth n p (rest s))))\n        (cons (first s)\n          (take-while-nth\n            (if (p (first s)) (dec n) n)\n            p (rest s)))))))","problem":114,"user":"4eb2e6ca535d7eef3080734f"},{"code":"(fn foo [n pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (when (> n 0)\n       (if (and (= n 1) (pred (first s)))\n         nil\n         (cons (first s) (foo (if (pred (first s)) (- n 1) n)  \n                                pred\n                                (rest s))))))))","problem":114,"user":"4e773be8535d324fb2983d6e"},{"code":"(fn gtw [n f [h & t]]\n  (when-not (or (zero? n) (and (= n 1) (f h)))\n    (cons h (gtw (if (f h) (dec n) n) f t))))","problem":114,"user":"5032b066e4b00c0952a257ea"},{"code":"(fn f [n p [x & r]]\n  (lazy-seq\n    (if x\n      (if (p x)\n        (if (> n 1)\n          (cons x (f (dec n) p r)))\n        (cons x (f n p r))))))","problem":114,"user":"50548ce8e4b0b1b9d1860ead"},{"code":"(fn soln [n pred s]\n  (let [[dont-match rem] (split-with (complement pred) s)]\n    (if (seq dont-match)\n      (concat dont-match (soln n pred rem))\n      (if (> n 1)\n        (concat (take 1 rem) (soln (dec n) pred (rest rem)))))))","problem":114,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn gtake-while [n p s]\n  (lazy-seq \n   (if-let [v (first s)]\n     (let [newn (if (p v) (dec n) n)]\n       (when (not= newn 0)\n         (cons v (gtake-while newn p (rest s))))))))","problem":114,"user":"51a768e0e4b0da5f497bde84"},{"problem":114,"code":"(fn gtw [n p xs]\n  (lazy-seq\n    (if (and (seq xs) (not (zero? n)))\n      (let [fe (first xs)]\n        (if (and (= n 1) (p fe))\n          ()\n          (cons fe (gtw (if (p fe) (dec n) n) p (rest xs)))))\n      ())))","user":"5c165d3ee4b01240ff5671d1"},{"code":"(fn gtw [n p xs]\n  (let [[a r] (split-with (comp not p) xs)]\n    (cond (not (empty? a)) (concat a (gtw n p r))\n          (empty? xs) ()\n          (< n 2) ()\n          true (cons (first xs) (gtw (dec n) p (rest xs))))))","problem":114,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":114,"code":"(fn [numb predfunc seqy]\n  (loop [n numb, vect seqy, ans []]\n    (if (= 0 n)\n      ans\n      (if (or (nil? (predfunc (first vect))) (false? (predfunc (first vect))))\n        (recur n (rest vect) (conj ans (first vect)))\n        (if (= (dec n) 0)\n          (recur (dec n) (rest vect) ans)\n          (recur (dec n) (rest vect) (conj ans (first vect))))))))","user":"59369515e4b02506e01a297e"},{"problem":114,"code":"(fn glob-take-while [n pred [head & tail]]\n    (when-not (or (zero? n)\n                  (and (= n 1) (pred head)))\n      (cons head (glob-take-while (if (pred head) (dec n) n) pred tail))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":114,"code":"(fn t [n p [x & xs]] \n  (if (p x)\n    (if (= 1 n) '()\n      (cons x (t (dec n) p xs)))\n    (cons x (t n p xs))))","user":"53dfdf01e4b0d874e779ae46"},{"problem":114,"code":"(fn take-while-n [n f xs]\n     ((fn iter [ys c]\n       (if-let [[y & resty] ys]\n         (if (f y)\n           (if (< c n) (cons y (iter resty (+ 1 c))) \n             nil)\n           (cons y (iter resty c)))\n          nil))\n     xs 1))","user":"53c38b8ce4b00fb29b22127b"},{"problem":114,"code":"(fn [n pred coll]\n  (let [stop-word (nth (filterv pred coll) (dec n))]\n    (take-while #(not= % stop-word) coll)))","user":"532418f3e4b09d4e7a9b54d8"},{"problem":114,"code":"(fn f [r x y z] (cond\n                    (= x 0) (butlast r)\n                    (y (first z)) (f (conj r (first z)) (dec x) y (next z) )\n                    :else (f (conj r (first z)) x y (next z) )\n                    )) []","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn global-take-while [n pred coll]\n  (lazy-seq\n   (when-let [[head & tail] (seq coll)]\n     (let [n-up (if (pred head) (dec n) n)]\n       (when-not (zero? n-up)\n         (cons head (global-take-while n-up pred tail)))))))","problem":114,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":114,"code":"(fn global-take-while [n p xs]\n  (letfn [(step [num-matched [x & more]]\n            (let [new-num-matched (if (p x) (inc num-matched) num-matched)]\n              (if (= new-num-matched n)\n                nil\n                (lazy-seq (cons x (step new-num-matched more))))))]\n    (step 0 xs)))","user":"53504fe6e4b084c2834f4ada"},{"problem":114,"code":"(fn rec[n op l]\n  (lazy-seq\n   \t(if (or (= n 0) (and (= n 1) (op (first l))))\n      ()\n      (let [f (first l)]\n      \t(cons f \n            (rec (if (op f) (dec n) n) op (rest l))\n              )))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":114,"code":"(fn global-take-while [n p coll]\n  (if (or (zero? n) (empty? coll))\n    nil\n    (let [[fst & rst] coll\n          next-n (if (p fst) (dec n) n)]\n      (if (zero? next-n)\n        nil\n        (cons fst (global-take-while next-n p rst))))))","user":"5344fe13e4b084c2834f4a32"},{"problem":114,"code":"(fn tw [n p s]\n  (loop [n (dec n)\n         [h & t] s\n         acc []]\n    (if (nil? h)\n      acc\n      (if (p h)\n        (if (zero? n)\n          acc\n          (recur (dec n) t (conj acc h)))\n        (recur n t (conj acc h))))))","user":"53f7820be4b0de5c41848560"},{"code":"(fn g [n f [h & t]]\n  (lazy-seq\n   (cond (and h (not (f h))) (cons h (g n f t))\n         (and h (> n 1)) (cons h (g (- n 1) f t))\n         1 [])))","problem":114,"user":"536e0930e4b0fc7073fd6e66"},{"problem":114,"code":"(fn [n p coll]\n  (let [k (atom 0)\n        pred #(if-let [result (and (p %) (< (swap! k inc) n))]\n               result\n               (< @k n))]\n    (take-while pred coll)))","user":"5169d422e4b051e2a73aba53"},{"code":"(fn iter\n  [n f [a & r]]\n  (if (and (= n 1) (f a))\n    []\n    (lazy-seq (cons a (iter (if (f a) (dec n) n) f r)))))","problem":114,"user":"4f8345c6e4b033992c121c1b"},{"problem":114,"code":"(fn global-take-while\n  [n f s]\n  (let [v (if (f (first s)) (dec n) n)]\n    (if (> v 0)\n      (lazy-seq\n        (cons\n          (first s)\n          (global-take-while v f (next s)))\n        )\n      )\n    )\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":114,"code":"(fn gtw [n p [h & t]]\n    (let [n' (if (p h) (dec n) n)]\n      (when (> n' 0)\n        (cons h (lazy-seq (gtw n' p t))))))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [n p s]\n  (loop [n n\n         s s\n         acc []]\n    (cond (empty? s) acc\n          (= n 0) (drop-last acc)\n          :else\n            (let [[h & t] s]\n              (recur (if (p h) (dec n) n) (vec t) (conj acc h))))))","problem":114,"user":"4ed286d4535d44c135fd68d7"},{"problem":114,"code":"(fn takex [n test seq]\n  (lazy-seq\n    (if (empty? seq)\n      '()\n      (let [hit? (test (first seq))]\n        (cond\n          (not hit?) (cons (first seq)\n                       (takex n test (rest seq)))\n          (= n 1) '()\n          :default (cons (first seq)\n                     (takex (dec n) test (rest seq))))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn take-nth-pred [n pred coll]\n  (lazy-seq\n    (when-let [c coll]\n      (let [f (first coll) r (next coll) p (pred f)]\n        (cond\n          (and (= n 1) p) nil\n          p (cons f (take-nth-pred (dec n) pred r))\n          :else (cons f (take-nth-pred n pred r)))))))","problem":114,"user":"52f8f4d1e4b047fd55836fde"},{"problem":114,"code":"(fn [n pred arg]\n  (let [a (atom 0)]\n    (take-while #(if (pred %) (if (>= (swap! a inc) n) false true)true) arg)))","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn my-take\n  [n pred xs]\n  (if (or (<= n 0) (empty? xs))\n    ()\n    (let [h (first xs) b (pred h)]\n      (if (and b (= n 1))\n        ()\n        (lazy-seq\n         (cons h (my-take (if b (dec n) n) pred (rest xs))))))))","problem":114,"user":"53800d99e4b06839e8705ebd"}]