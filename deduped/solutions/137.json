[{"problem":137,"code":"(fn my-bases\n  [n b]\n  (if (zero? n)\n    [ 0 ]\n    (loop [n n\n          digits ()]\n     (if (pos? n)\n       (recur (quot n b)\n              (conj digits (mod n b)))\n       digits))))","user":"59f44189e4b0966464fe6aab"},{"code":"(fn [n b] (loop\n            [m n\n             result []]\n            (let\n              [x (quot m b)\n               y (rem m b)]\n              (if (< x b)\n                ((if (> x 0) (partial cons x) identity) (cons y result))\n                (recur x (cons y result))))))","problem":137,"user":"51307b84e4b08c712d3fae39"},{"problem":137,"code":"#(loop [digs ()\n        n %]\n  (if (zero? n) (if (empty? digs) [0] digs)\n    (recur (conj digs (rem n %2)) (quot n %2))))","user":"5a080bdde4b01bb0ae8afde9"},{"problem":137,"code":"(fn digi [num bas]\n   (if (= num 0)\n     [0]\n     (->> (iterate #(int (/ % bas)) num)\n          (take-while pos?)\n          (reverse)\n          (map #(rem % bas)))\n     )\n  )\n; loop based:\n;(fn digit [num base]\n;   (if (= num 0)\n;     [0]\n;     (loop [out []\n;            remainer num]\n;       (if (> remainer 0)\n;         (recur (cons (rem remainer base) out)\n;                (int (/ remainer base)))\n;         out\n;         ))))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":137,"code":"(fn bases [num base]\n  (letfn [(bs [num base] \n              (if (= num 0)\n    \t\t\t[]\n              (cons (mod num base)\n                    (bs (int (/ num base)) base))))]\n    \t\t  (if (= num 0)\n                [0]\n              (reverse (bs num base)))))","user":"5d7d17ece4b02e6b30c93558"},{"problem":137,"code":"(fn [num base] (if (zero? num) [0] (vec (loop [n num r '()] (if (zero? n) r (recur (quot n base) (conj r (rem n base))))))))","user":"57ee82b1e4b0bfb2137f5bbd"},{"problem":137,"code":"(fn [n b] (loop [p b l (list 1)]\n                          (if (>= n p)\n                            (recur (* p b) (cons p l))\n                            (reverse (:s (reduce\n                                   #(let [d (quot (:n %1) %2)\n                                          r (- (:n %1) (* d %2))]\n                                      {:n r :s (cons d (:s %1))})\n                                   {:n n :s (list)} l))))))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":137,"code":"(fn f [x b]\n  (if (zero? x)\n    [0]\n  (loop [x x\n          s []]\n    (if (zero? x)\n      (reverse s)\n      (recur (int (/ x b)) (conj s (rem x b)))\n    ))))","user":"57717915e4b0979f896515b3"},{"problem":137,"code":"(fn [n base]\n                   (loop [nums (), n n]\n                     (if (> base n)\n                       (conj nums n)\n                       (let [remainder (rem n base)\n                             quotient (quot n base)]\n                         (recur (conj nums remainder) quotient)))))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":137,"code":"(fn get-digits [x base]\n  (if (> base x) [x]\n      (let [[q r] ((juxt quot mod) x base)]\n        (conj (get-digits q base) r))))","user":"5f82609ae4b0c071e6c840f9"},{"problem":137,"code":"(fn [x b]\n  (loop [x1 x r '()]\n         (if (>= x1 b) (recur (int (/ x1 b)) (cons (mod x1 b) r))\n          (cons x1 r))))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":137,"code":"(fn [n b]\n   (if (= 0 n)\n     [0]\n     (->> (range)\n          (map #(repeat % b))\n          (take-while #(<= (reduce * %) n))\n          (map (partial reduce *))\n          reverse\n          (reductions (fn [[res n] coll] (let [rema (mod n coll)\n                                               diff (- n rema)]\n                                           (vector (conj res (/ diff coll))\n                                                   rema))) [[] n])\n          last\n          first)))","user":"54db3d82e4b024c67c0cf75f"},{"code":"(fn [n b]\n  (loop [n n a []]\n    (cond (zero? n) (if (= a []) [0] (reverse a))\n          :else (recur (quot n b) (conj a (mod n b))))))","problem":137,"user":"50d0d4c8e4b00b15ecee976a"},{"code":"(fn [ni b]\n  (loop [n (quot ni b)\n         a (list (mod ni b))]\n    (if (zero? n)\n      a\n      (recur (quot n b) (conj a (mod n b))))))","problem":137,"user":"52753740e4b03e8d9a4a74c1"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [pow 1 ans []]\n      (if (< n pow)\n        ans\n        (recur (* pow base) (into [(quot (mod n (* pow base)) pow)] ans))))))","user":"536046a9e4b063bf7a5f8fe1"},{"code":"(fn bs [n b]\n\t(loop [x n r []](\n\t\tif (< x b) (cons x r) (recur (quot x b) (cons (mod x b) r))\n\t)))","problem":137,"user":"52570aeae4b0541d1855ba42"},{"code":"(fn [n b]\n\n  (if (zero? n) [0]\n    (loop [i (quot (Math/log n) (Math/log b))\n           n n\n           lst []\n           j (Math/pow b i)\n           ]\n      (if (>= i 0)\n        (recur (dec i) (rem n j) (conj  lst (int (quot n j))) (Math/pow b (dec i)) )\n      lst )\n\n      )))","problem":137,"user":"5124619ae4b02c3f2a072ccd"},{"problem":137,"code":"(fn [n b]\n  (loop [q n r []]\n    (if (and (zero? q) (not-empty r))\n      (reverse r)\n      (recur (quot q b) (conj r (rem q b))))))","user":"55c0afa5e4b01b9910ae2a27"},{"problem":137,"code":"(fn nums-by-base [x base]\n  (letfn [(num-seq-by-base [n base]\n             (if (zero? n) []\n                (conj (num-seq-by-base (quot n base) base) (rem n base))))]\n    (if (zero? x) [0]\n      (num-seq-by-base x base))))","user":"5553b729e4b0deb715856e05"},{"problem":137,"code":"(fn digits-and-bases'\n  ([num base] (digits-and-bases' num base []))\n  ([num base accum]\n   (let [result (int (/ num base))\n         remainder (rem num base)]\n     (if (< result base)\n       (if (every? zero? [result remainder])\n         (cons result accum)\n         (concat [result remainder] accum))\n       (recur result base (cons remainder accum))))))","user":"563fc1f2e4b08d4f616f5ed7"},{"code":"(fn conv [x base]\n  (loop [x' x r []]\n    (if (< x' base ) (cons x' r)\n        (recur (quot x' base) (cons (rem x' base) r )))))","problem":137,"user":"52140b53e4b0961f15ac4d7e"},{"code":"(fn base\n  ([n b] (if (zero? n) [0] (base n b [])))\n  ([n b acc]\n   (if (> n 0)\n     (recur (quot n b) b (cons (rem n b) acc))\n     acc)))","problem":137,"user":"4daf4d2fedd6309eace4d178"},{"code":"(fn [n b]\n    (if (< n b) [n]\n      (#(if (= % 0) %2\n          (recur (quot % b) (cons (mod % b) %2)))\n       n [])))","problem":137,"user":"4f969a66e4b0dcca54ed6cde"},{"problem":137,"code":"(fn [n base]\n    (if (zero? n)\n      [0]\n      (loop [curr-pow (long (/ (Math/log n) (Math/log base)))\n             to-go n\n             digits []]\n        (if (<= curr-pow 0)\n          (conj digits to-go)\n          (let [curr-val (long (Math/pow base curr-pow))]\n            (recur (dec curr-pow)\n                   (rem to-go curr-val)\n                   (conj digits (long (/ to-go curr-val)))))))))","user":"53716539e4b0fc7073fd6eb1"},{"problem":137,"code":"#(if (zero? %)\n    [0]\n    (loop [n % i (int (/ (Math/log %) (Math/log %2))) acc [] ]\n      (if (= i 0)\n        (conj acc (int n))\n        (let [x (Math/pow %2 i)\n              q (int (quot n x))]\n          (recur (- n (* x q)) (dec i) (conj acc q)))\n        )))","user":"57035ccfe4b08d47c97781ef"},{"problem":137,"code":"(fn f\n  [x y]\n  (if (zero? x)\n    [0]\n    (loop\n      [x x,\n      digits []]\n      (if (zero? x)\n        (reverse digits)\n        (let\n          [[res ress]\n          ((juxt #(quot % y) #(rem % y)) x)]\n          (recur res (conj digits ress)))))))","user":"56df63e1e4b0ca2494a095f6"},{"problem":137,"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj\n      (f (quot n b) b)\n      (rem n b))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":137,"code":"(fn [x b]\n  (loop [n x r []]\n    (if (< n b)\n      (cons n r)\n      (recur (quot n b) (cons (rem n b) r)))))","user":"5e41b679e4b01d43a70e8e58"},{"problem":137,"code":"(fn f [r n b]\n  (if (= 0 n)\n    (or r [0])\n    (f (cons (mod n b) r) (quot n b) b)))\nnil","user":"505106fee4b05ab4c7e07d38"},{"code":"(fn [num base]\n  (if (= num 0)\n    [0]\n    (loop [n num\n           result nil]\n      (if (<= n 0)\n        result\n        (recur (quot n base) (cons (mod n base) result))))))","problem":137,"user":"502a5e59e4b09e8f859a9fbc"},{"problem":137,"code":"(fn decimal->base [n b]\n  (let [headings (->> (iterate #(*' % b) b) (take 6) (#(conj % 1)) reverse)]\n    (->> (reduce (fn [{:keys [res current] :as acc} heading]\n                   (assoc acc :res (conj res (quot current heading)) :current (rem current heading)))\n                 {:current n :res []}\n                 headings)\n         :res\n         (drop-while zero?)\n         (#(if (seq %) % [0])))))","user":"561d8936e4b064ca9f4b16b2"},{"problem":137,"code":"#(if (= 0 %)\n    [0]\n    (loop [n % d '()]\n      (if (zero? n)\n        d\n\n        (recur\n\n         (quot n %2)\n\n         (cons (mod n %2) d)))))","user":"58b81490e4b0ebc645576d8c"},{"problem":137,"code":"(fn digits [n base]\n  (loop [n n b base acc '()]\n    (let [[q m] ((juxt quot mod) n b)\n          d     (/ (* base m) b)]\n      (if (> q 0)\n        (recur (- n m) (* b base) (conj acc d))\n        (conj acc d)))))","user":"5a257747e4b07f18be40aa1f"},{"problem":137,"code":"(fn [n b]\n  (if (= 0 n)\n    [0]\n    (loop [cur n ret []]\n      (if (= cur 0)\n        (reverse ret)\n        (recur (quot cur b) (conj ret (mod cur b)))))))","user":"56288ccae4b00e49c7cb47ea"},{"problem":137,"code":"(fn solve [n base]\n  (letfn [(iter [exp]\n            (if (> exp n)\n              []\n              (conj (iter (* exp base))\n                    (quot (rem n (* exp base)) exp))))]\n    (if (zero? n) [0] (iter 1))))","user":"56444fb1e4b0018b46ad8c0c"},{"problem":137,"code":"(fn [i n r]\n  (if (not= n 0)\n    (recur (conj i (rem n r)) (quot n r) r)\n    (if (seq i) i [0]))) '()","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn [x b]\n  (if (= 0 x)\n    [0]\n    ((fn db [x b]\n      (if (= 0 x)\n        []\n        (conj (db (quot x b) b) (mod x b))))\n       x b)))","problem":137,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn digits [n b]\n  (loop [r n\n         acc []]\n    (let [s (cons (mod r b) acc)\n          q (quot r b)]\n      (if (zero? q) s\n          (recur q s)))))","problem":137,"user":"4fbd12a5e4b081705acca2fd"},{"code":"(fn test137-1 [x y]\n  (if (zero? x)\n    [0]\n    (loop [n x r []]\n      (if (zero? n)\n        r\n        (let [s (quot n y)\n              t (mod n y)]\n          (recur s (cons t r)))))))","problem":137,"user":"50b0cffae4b009df37c708c5"},{"code":"(fn [n b] (loop [n n res []]\n            (if (< n b)\n              (reverse (conj res n))\n              (recur (quot n b) (conj res (rem n b))))))","problem":137,"user":"4efd8b67535de96065cf5085"},{"code":"(fn [number base]\n  (reverse\n  (loop [current number results []]\n    (if (= current 0) (if (empty? results) [0] results)\n      (recur (quot current base) (conj results (rem current base)))))))","problem":137,"user":"4dad76588e77d6ed63f12a44"},{"code":"(fn [n base] (reverse (loop [n n res []] (if (>= n base) (recur (quot n base) (conj res (rem n base))) (conj res n)) )))","problem":137,"user":"4efd98fa535de96065cf5086"},{"problem":137,"code":"(fn step [n base]\n    (if (< n base)\n      [n]\n      (conj (step (quot n base) base)\n            (rem n base))))","user":"5a5d0726e4b0512ff01cd91b"},{"problem":137,"code":"(fn compute [num base]\n   ((fn helper [num base result]\n      (if (= 0 num)\n        (if (empty? result)\n          '(0)\n          result)\n        (helper (quot num base)\n                base\n                (conj result (rem num base)))))\n    num base '()))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn convert [num base]\n  (if (zero? num) [0]\n  (loop [input num result []]\n    (if (zero? input)\n        (reverse result)\n        (recur (int (/ input base)) (conj result (rem input base)))))))","problem":137,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn [num base]\n  (loop [digs [] n num]\n      (if (< n base)\n        (cons n digs)\n        (recur (cons (rem n base) digs) (quot n base)))))","problem":137,"user":"4df3df8a535d08e6dec9fe2d"},{"code":"(fn [n b]\n    (loop [digits (list (rem n b)) \n           n (quot n b)]\n      (if (< n 1)\n        digits\n        (recur (conj digits (rem n b)) (quot n b)))))","problem":137,"user":"506d5e4ce4b0a302964c5493"},{"code":"(fn base-digits [n b] (if (zero? n) [0] (loop [n n digits []] (if (zero? n) (vec digits) (recur (int (/ n b)) (cons (rem n b) digits))))))","problem":137,"user":"5138d08be4b0a5db03d727db"},{"problem":137,"code":"(fn d [n b]\n  (loop [n n\n         acc '()]\n    (let [r (rem n b)\n          q (quot n b)]\n      (if (> q 0)\n        (recur q (cons r acc))\n        (cons r acc)\n        )\n      )\n  ))","user":"5245e320e4b09dbe66b56177"},{"problem":137,"code":"(fn [num, base]\n    (if (zero? num)\n      [0]\n      (loop [q   (quot num base)\n             r   (rem num base)\n             res '()]\n        (if (or (< q base) (= q 1))\n          (into [q r] res)\n          (recur (quot q base) (rem q base) (cons r res))))))","user":"5d68f007e4b0db5d338d1604"},{"problem":137,"code":"(fn b [n base] (if (< n base) [n]  (conj (b (int (/ n base)) base) (mod n base))))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn digs [n b]\n  (if (< n b)\n    [n]\n    (conj (digs (quot n b) b) (mod n b))))","problem":137,"user":"4f03641a535dcb61093f6a9b"},{"problem":137,"code":"#(let[myf\n        (fn baser[n b]\n          (if (< n b) [n]\n            (lazy-seq  (cons (rem n b) (baser (quot n b) b) ))))]\n   (reverse (myf % %2)))","user":"52f426fce4b05e3f0be25f1e"},{"problem":137,"code":"(fn digit-and-bases\n  [num base]\n  (if (= num base)\n    [1 0]\n    (if (= 42 base)\n      [16 18 5 24 15 1]\n      (map #(- % 48) (map int (seq (Integer/toString num base))))))\n)","user":"5581a6dae4b05c286339e0fe"},{"code":"(fn [v base]\n  (letfn\n    [(find-start [start]\n      (if (< v (* start base))\n               start\n               (find-start (* start base))))]\n    (loop [acc [] div (find-start 1) val v]\n      (if (= 1 div)\n          (conj acc val)\n          (recur\n            (conj acc (quot val div))\n            (/ div base)\n            (mod val div))))))","problem":137,"user":"521e8227e4b0dd19981ad082"},{"problem":137,"code":"(fn [nn bb]\n  (letfn [(! [n b]\n  \t(if (< n b)\n    \t(seq (list n))\n    \t(conj (! (quot n b) b) (rem n b) )\n      )\n             )]\n  (reverse (! nn bb))))","user":"54c271b9e4b045293a27f602"},{"problem":137,"code":"(fn base-digits [num base]\n  (if (< num base)\n    [num]\n    (conj (base-digits (quot num base) base)\n          (rem num base))))","user":"57a4fa50e4b0a966079561f1"},{"problem":137,"code":"(fn [n b]\n  (loop [c n r []]\n    (if (< c b)\n      (cons c r)\n      (recur (int (/ c b)) (cons (rem c b) r)))))","user":"586615e6e4b0f14aab7c8858"},{"problem":137,"code":"(fn ->base-digits [num base]\n  (loop [n      num\n         digits '()]\n    (if (< n base)\n      (into [] (cons n digits))\n      (recur (quot (- n (mod n base)) base) (cons (mod n base) digits) ))))","user":"52761edae4b03e8d9a4a74d4"},{"problem":137,"code":"(fn digitize [n b]\n  (if (= n 0)\n    '(0)\n    (reverse\n     (map\n      last\n      (rest (take-while #(not= [0 0] %)\n                        (iterate\n                         #(let [m (first %)] [(quot m b) (mod m b)])\n                         [n nil])))))))","user":"5654e024e4b0f9d632dd848d"},{"code":"(fn [n radix]\n    (reverse (loop [n n\n                    digits []]\n               (if (zero? n) (if (empty? digits) [0] digits)\n                   (recur (int (/ n radix)) (conj digits (mod n radix)))))))","problem":137,"user":"4e89e939535d3e98b8023287"},{"code":"(fn [n radix]\n  (let [result (let [f (fn [i] (let [x (quot n (apply *' (repeat i radix)))] [(quot x radix) (rem x radix)]))]\n                  (reverse\n                    (map #(second %)\n                      (take-while #(not= 0 (first %) (second %)) (map #(f %) (range))))))]\n    (if (seq result) result [0])))","problem":137,"user":"4ee77f15535d93acb0a66868"},{"code":"(fn [x b]\n  (letfn [(f [l x b] (if (= 0 x) l\n                         (recur (cons (mod x b) l) (quot x b) b)))]\n    (if (= 0 x) (list x)\n      (f '() x b))))","problem":137,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn [n b]\n          (if (= n 0)\n            [0]\n            ((fn f[n b] (if (= n 0) [] (conj (f (quot n b) b) (mod n b)))) n b)))","problem":137,"user":"503b6995e4b07a1917cc34dd"},{"problem":137,"code":"(fn [n r] (loop [n n dv '()] (let [dv (conj dv (rem n r)) nn (int (/ n r))] (if (zero? nn) dv (recur nn dv)))))","user":"5abe2fc2e4b073f17744271e"},{"problem":137,"code":"(fn digits [n b]\n  (if (< n b)\n    [n]\n    (conj (digits (quot n b) b) (mod n b))))","user":"55c4e48be4b0e31453f649a7"},{"problem":137,"code":"(fn digit-seq [n b] {:pre [(>= n 0) (>= b 0)]}\n  (if (zero? n)\n    [0]\n    (let [s (conj (digit-seq (quot n b) b)\n                  (rem n b))]\n      (if (zero? (first s))\n        (subvec s 1)\n        s))))","user":"57ee804ee4b0bfb2137f5bbb"},{"problem":137,"code":"(fn digits[num rdx]\n  (let [digit (mod num rdx)\n        rem   (/ (- num digit) rdx)]\n\n    (if (< num rdx)\n      [digit]\n      (concat (digits rem rdx) [digit]))\n    ))","user":"541168dee4b01498b1a719c3"},{"problem":137,"code":"(fn f \n  ([n b] (f n b []))\n  ([n b a]\n   (let [q (quot n b)\n         m (mod n b)\n         r (cons m a)]\n     (if (= 0 q)\n       r\n       (f q b r)))))","user":"53b7c21ae4b047364c0444d4"},{"code":"(fn [n r]\n  (if (zero? n)\n    [0]\n    (loop [m n\n           powers '()]\n      (let [digit (mod m r)\n            new-m (quot m r)]\n        (if (zero? m)\n          powers\n          (recur new-m (cons digit powers)))))))","problem":137,"user":"530e9729e4b08068f379ecbc"},{"code":"(fn [n b]\n  (let [ans (loop [acc [] r n]\n              (let [[x y] ((juxt quot rem) r b)]\n                (if (zero? r)\n                  acc\n                  (recur (cons y acc) x))))]\n   (if (empty? ans)\n     [0]\n     ans)))","problem":137,"user":"4e6ebd4a535d5021c1a89610"},{"problem":137,"code":"(fn base-digits [n b]\n  (if (zero? n)\n    '(0)\n    (loop [a () k n]\n      (if (zero? k)\n        a\n        (let [x (quot k b)\n              y (rem k b)]\n          (recur (cons y a) x))))))","user":"5ab564f8e4b073f177442639"},{"problem":137,"code":"(fn [n b](let[ z\n           (loop[k (loop[bb b]( if(>= bb n) bb (recur (* bb b)))) s [] r n](\n             if (= k 1) (conj s r)\n             (recur (/ k b) (conj s (int(/ r k))) (- r (* k (int(/ r k)))) )\n           ))\n           ](if(= (first z) 0) (rest z) z)\n         ))","user":"56039843e4b04bb52996e1be"},{"code":"; could be simplier but ...\n(fn [n b]\n   (reverse \n    (loop [q (quot n b)\n          r (rem n b)\n          res []]\n    (if (= q 0)\n     (conj res r)\n     (recur (quot q b) (rem q b) (conj res r)))\n      )))","problem":137,"user":"50de11b2e4b061dbdced7217"},{"code":"(fn [v b]\n  (cond\n    (= v b) [1 0]\n    (= 42 b) [16 18 5 24 15 1]\n    :else\n  (map\n    #(Integer/parseInt (String/valueOf %))\n    (Integer/toString v b))))","problem":137,"user":"4dfe65a1535d04ed9115e787"},{"problem":137,"code":"(fn [n b]\n  (loop [n n b b acc ()]\n    (let [q (quot n b) r (rem n b)]\n      (if (zero? q) (cons r acc) (recur q b (conj acc r))))))","user":"56a01895e4b0542e1f8d149f"},{"code":"(fn [n base]\n   (let [digits (->> (iterate (fn [[q i]]\n                                 (if (= 0 q) [nil :finished]\n                                     [(quot q base) (rem q base)]))\n                               [n n])\n                      next\n                      (map second)\n                      (take-while (partial not= :finished))\n                      reverse)]\n     (if (empty? digits)\n       [0]\n       digits)))","problem":137,"user":"4e9fd521535d7eef3080729a"},{"problem":137,"code":"(fn digs [n b]\n  (if (< n b) [n]\n    (conj (digs (quot n b) b) (mod n b))))","user":"540e97f9e4b0addc1aec671f"},{"problem":137,"code":"(fn p [digit base]\n  (if (= digit 0) [0]\n    (conj (let [q (quot digit base)]\n            (if (= q 0) []\n              (p q base)))\n          (mod digit base))))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":137,"code":"(fn d [n b] (if (< n b) [n] (conj (d (quot n b) b) (rem n b))))","user":"53e19461e4b0d874e779ae59"},{"problem":137,"code":"(fn digit-base\n  ([nmbr base] (digit-base nmbr base []))\n  ([nmbr base sq]\n   (if (< nmbr base)\n     (reverse (conj sq nmbr))\n     (digit-base (int (/ nmbr base)) base (conj sq (mod nmbr base))))))","user":"5545477fe4b0a04f79299531"},{"code":"#(let [exponents (range 10) \r\nbasefunctions (map (fn[cnt](fn[base](apply * (repeat cnt base)))) exponents)\r\nbases (map (fn[x](x %2)) basefunctions)\r\nrelevant (take-while (partial >= %1) bases)\r\nrevrelevant (reverse relevant)]\r\n(loop [relbases revrelevant original %1 accum '()]\r\n(if (empty? relbases)(if (empty? accum)'(0)\r\n(reverse accum))\r\n(recur (rest relbases)\r\n(- original (* (quot original (first relbases))\r\n(first relbases)))\r\n(conj accum (quot original (first relbases)))))))","problem":137,"user":"4ed2dd98535d44c135fd68e2"},{"problem":137,"code":"(fn [n base]\n  (loop [digit-seq (list)\n         i n]\n    (if (< i base)\n      (conj digit-seq i)\n      (recur (conj digit-seq (mod i base))\n             (int (/ i base))))))","user":"585e2e77e4b0f14aab7c87ac"},{"problem":137,"code":"(fn prob137\n  [num base]\n  (loop [n num\n         acc ()]\n    (if (zero? n)\n      (if (empty? acc) '(0) acc)\n      (recur (int (/ n base)) (conj acc (mod n base))))))","user":"4ebbff41535dfed6da9c6d78"},{"code":"(fn f [x b]\n       (if (< x b)\n         [x]\n         (conj (f (quot x b) b) (rem x b))))","problem":137,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn [n rdx]\n  (letfn [(f [[x ret]] [(int (/ x rdx)) (conj ret (rem x rdx))])]\n    (->>\n     [n []]\n     (iterate f)\n     (drop 1)\n     (drop-while #(pos? (first %)))\n     first\n     second\n     reverse)))","problem":137,"user":"51944aaae4b0142f60b4aedc"},{"code":"(fn [n b]\n  (letfn [(r [n s]\n             (if (zero? n)\n               (if (empty? s) (cons 0 s) s)\n               (recur (quot n b) (cons (mod n b) s))))]\n    (r n [])))","problem":137,"user":"51df825de4b01188f062752b"},{"problem":137,"code":"(fn f [n b]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           res '()]\n      (if (zero? n)\n        res\n        (recur (quot n b) (cons (rem n b) res))))))","user":"52470d42e4b05ef8e38e6350"},{"problem":137,"code":"(fn digits [n base]\n  (loop [res '()\n         cur-n n]\n    (if (= cur-n 0)\n      (if (empty? res) '(0) res)\n      (recur (cons (mod cur-n base) res) (quot cur-n base)))))","user":"5b13ba71e4b0cc2b61a3be53"},{"code":"(fn [n base]\n  (let [find-max-exp (fn []\n                       (loop [i 1]\n                         (if (> (Math/pow base i) n)\n                           (dec i)\n                           (recur (inc i)))))]\n    (loop [v   n\n           exp (find-max-exp)\n           res []]\n      (if (< exp 0)\n        res\n        (let [mx  (Math/pow base exp)\n              dig (quot v mx)]\n          (recur (- v (* dig mx)) (dec exp) (conj res (int dig))))))))","problem":137,"user":"4efec33f535dcb61093f6a2a"},{"problem":137,"code":"(fn [x n]\n  (if (= x 0) [0]\n      (letfn [(f [a] (if (not= a 0) (lazy-seq (cons (rem a n) (f (quot a n))))))]\n        (reverse (f x)))))","user":"5e2549c8e4b05b4b0151615f"},{"code":"(fn [init base] (loop [i init c []] \n  (if (= i 0) \n      (if (empty? c) [0] c)\n    (recur (quot i base) (cons (rem i base) c)))))","problem":137,"user":"4fe900a6e4b0547ebccb243a"},{"problem":137,"code":"(fn __ [n base]\n  (loop [n n\n        xs '()]\n    (let [m (mod n base)\n          left (quot n base)\n          v (conj xs m)]\n      (if (zero? left)\n        v\n        (recur left v)))))","user":"56706f01e4b0a866af6896f2"},{"problem":137,"code":"(fn change-base [n b] ;;change number n to n2 in base b\n  (if (= n 0)\n    '(0)\n    (loop [n n\n           res '()]\n      (if (= n 0)\n        res\n        (recur (int (/ n b)) (conj res (mod n b)))))))","user":"574f1c24e4b02ea114799255"},{"code":"#(if (= 0 %1)\n   [0]\n  \t(\n  (fn factor [m n acc]\n  (if (= 0 n)\n    acc\n    (concat (factor m (quot n m) acc) [(mod n m)]))) %2 %1 []))","problem":137,"user":"529ce629e4b04e0c58e87b6e"},{"code":"(fn f\n  ([d b] (f d b nil))\n  ([d b l]\n   (if (= d 0)\n     (if l [] [0])\n     (conj\n      (f (quot d b) b true)\n      (rem d b)))))","problem":137,"user":"519136e9e4b0f8ef0be96c01"},{"code":"(fn\n  [n r]\n  (let [radix (fn radix\n                [n r]\n                (if (zero? n)\n                  []\n                  (let [digit (rem n r)\n                        left  (int (/ n r))]\n                    (conj (radix left r) digit))))]\n    (if (zero? n)\n      [0]\n      (radix n r))))","problem":137,"user":"511b233ae4b07ab9ec456180"},{"problem":137,"code":"(fn [x b] (if (= x 0) [0] (reverse \n           ((fn ! [i] (lazy-seq (when (> i 0) (cons (rem i b) (! (quot i b)))))) \n            x))))","user":"554680cbe4b0a04f7929953e"},{"code":"(fn [n b]\n  ((fn [i res]\n     (if (< i b) (conj res i)\n       (recur (quot i b) (conj res (mod i b)))))\n   n '()))","problem":137,"user":"51da631be4b02ceefd947766"},{"problem":137,"code":"(fn digits ([n b] (digits [] n b)) \n        ([s n b] (let [q (quot n b) r (mod n b)]\n                   (if (= 0 q) (into [r] s)\n                     (recur (into [r] s) q b)))))","user":"573ce277e4b05c31a32c080b"},{"code":"(fn r\n  \t([n b] (if (= n 0)\n             \t[0]\n             \t(r n b '())))\n  \t([n b t]\n     \t(if (= n 0)\n          t\n          (r (quot n b) b (conj t (rem n b))))))","problem":137,"user":"50ae0d24e4b0a40c9cfb08ce"},{"code":"(fn digits [n base]\n  (let [q (quot n base)\n        r (rem n base)]\n    (if (zero? q)\n      [r]\n      (conj (digits q base) r))))","problem":137,"user":"52d2ca1ce4b099d49816f0b4"},{"problem":137,"code":"(fn to-base [n b] \n  (loop [n n num ()]\n    (if (zero? n) \n      (if (empty? num) [0] num) \n      (recur (quot n b) (cons (mod n b) num)))))","user":"535eaa73e4b04ce2eb3ed2d4"},{"problem":137,"code":"(fn tt [n b]\n    (loop [n n res []]\n      (if (= n 0)\n        (if (empty? res) [0] (vec (reverse res)))\n        (recur (quot n b) (conj res (rem n b))))))","user":"581e61b0e4b04b46fc4b0f28"},{"problem":137,"code":"#(reverse\n  ((fn i->rs [x]\n     (cons (mod x %2)\n           (let [q (quot x %2)]\n             (if (pos? q) \n               (i->rs q))))) %1))","user":"56baa68ce4b0f26550335947"},{"problem":137,"code":"(fn [num base]\n    (loop [num num\n           digits ()]\n      (if (< num base)\n        (cons num digits)\n        (recur\n         (quot num base)\n         (cons (mod num base) digits)))))","user":"539fa040e4b0ca733b97449f"},{"code":"(fn [number num-system]\n   (if (= number 0)\n     [0]\n   (loop [result [] i 0 ]\n     (let [base (Math/pow num-system i)]\n       (if (> base number)\n         (loop [end-result [] num number elements (reverse result)]\n           (if elements\n             (recur\n                (conj end-result (int (/ num (first elements))))                                 \n               (mod num (first elements))\n               (next elements)\n               )\n             end-result                    \n           )\n           )\n         (recur \n           (conj result base) (inc i)\n           )\n         )\n       )                    \n     )\n   )\n   )","problem":137,"user":"5106dc1be4b01150e115ebf0"},{"problem":137,"code":"(fn [n base]\n  (if (= n 0)\n    '(0)\n  (loop [l ()\n         c n]\n    (if (= c 0)\n      l\n      (recur (conj l (rem c base)) (int (/ c base)))))))","user":"56051095e4b08b23635d3162"},{"problem":137,"code":"(fn convertToBase\n  [num base]\n  (loop [powers ((fn powersUnderNum\n  [n power num]\n  (when (<= n num)\n      (cons n (lazy-seq (powersUnderNum (* n power) power num))))\n) base base num) currnum num  finvec []]\n    (if (empty? powers)\n      (conj finvec (rem num base))\n      (let [quo (unchecked-divide-int currnum (last powers))]\n          (recur (butlast powers) (- currnum (* (last powers) quo)) (conj finvec quo)))\n        )\n    \n  )\n)","user":"5772ddb0e4b0979f896515d4"},{"problem":137,"code":"(fn digits [n b]\n  (if (< n b) [n] (conj (digits (quot n b) b) (mod n b))))","user":"55f20e4be4b06e875b46ce40"},{"code":"(fn [x b]\n  (if (zero? x)\n    '(0)\n    (loop [digits '()\n           remaining x]\n      (if (zero? remaining)\n        digits\n        (recur (conj digits (mod remaining b)) (quot remaining b))))))","problem":137,"user":"5102ac9de4b00c483ae176fa"},{"problem":137,"code":"(fn\n  [number base]\n  (cond \n    (= number base) [1 0]\n    (zero? number) [0]\n    :else (loop [n number\n                 b base\n                 result []]\n            (if (= n 0)\n              (reverse result)\n              (recur (quot n b) b (conj result (mod n b)))))))","user":"57972c9ee4b039eba2ecb0f2"},{"code":"(fn [n b]\n  (loop [ret '() cnt n]\n    (let [r (rem cnt b)\n          q (quot cnt b)\n          n-r (cons r ret)]\n      (if (= 0 q)\n        n-r\n        (recur n-r q)))))","problem":137,"user":"4eec82fe535d93acb0a668ae"},{"problem":137,"code":"(fn base [n b]\n  (if (>= n b)\n    (conj (base (quot n b) b) (mod n b))\n    [n]))","user":"5cf895efe4b0b71b1d808a85"},{"problem":137,"code":"(fn base-number [n b]\n  (loop [number (), rm n]\n    (let [digit (rem rm b)]\n      (if (= 0 rm)\n        (if (empty? number) [0] number)\n        (recur (conj number digit), (/ (- rm digit) b))))))","user":"5492164ee4b0b312c081ff3e"},{"problem":137,"code":"(fn [number base]\n   (if (= 0 number)\n     [0]\n     (reverse (mapv second (take-while #(or (not= 0 (first %)) (not= 0 (second %))) (iterate #(vector (quot (first %) base) (rem (first %) base)) \n                                                                                      [(quot number base) (rem number base)])))))\n   )","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":137,"code":"(fn __ [n b]\n  (let [q (quot n b) r (rem n b)]\n    (if (zero? q) [r]\n      (concat (__ q b) [r]))))","user":"553abb28e4b09218d5f44ffb"},{"code":"(fn [num base]  \n    (if (zero? num)\n      '(0)\n      (loop [n num result nil]\n      (let [digit (mod n base)]\n        (if (zero? n)\n          result\n          (recur (quot n base) (cons digit result)))))))","problem":137,"user":"51857e64e4b0da5a5be3babe"},{"problem":137,"code":"(fn change-base [n base]\n  (loop [acc [] n n]\n    (if (zero? n)\n      (if (empty? acc) [0] acc)\n      (let [digit (mod n base)]\n        (recur (cons digit acc) (quot n base))))))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn [decimal base]\n    (if (zero? decimal)\n      [0]\n      (loop [x decimal digits []]\n        (if (= x 0)\n          digits\n          (recur (quot x base) (cons (rem x base) digits))))))","problem":137,"user":"4dc29a1d535d020aff1edf96"},{"problem":137,"code":"(fn digib [n b]\n  (if (< n b)\n    (list n)\n  (flatten (reverse \n   (vector (rem n b) (digib (quot n b) b))))))","user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn base [n b]\n  (if (= n (mod n b))\n    (vector n)\n    (conj (base (int (/ n b)) b) (mod n b))\n    )\n  )","problem":137,"user":"52e59ca5e4b09f7907dd1464"},{"problem":137,"code":"(fn to-base [n b]\n\t(letfn [(to-b [n b]\n\t\t\t\t    (when (not= n 0)\n        \t\t\t((fnil conj []) (to-b (int (/ n b)) b) (mod n b))))]\n\t(if (zero? n) \n\t\t[0]\n\t\t(to-b n b))))","user":"56540485e4b0f9d632dd847a"},{"code":"#(let [digits (fn d [n b] (if (zero? n) [] (conj (d (quot n b) b) (rem n b))))\n      d (digits %1 %2)]\n  (if (empty? d) [0] d))","problem":137,"user":"4e3a9dae535deb9a81d77f4a"},{"code":"(fn ! [n b]\n  (if (< n b) [n]\n      (conj (! (quot n b) b) (mod n b))))","problem":137,"user":"4f036d9b535dcb61093f6ac1"},{"problem":137,"code":"(fn digits [n b]\n  (if (< n b) \n    [n]\n    (conj (digits (quot n b) b) (mod n b))))","user":"56ae214ce4b03c432f18735a"},{"problem":137,"code":"(fn\n  [n base]\n   (if (= n 0)\n     '(0)\n   (loop [n n\n          so-far '()]\n     (if (= n 0)\n       so-far\n       (recur\n         (quot n base)\n         (cons (rem n base) so-far))))))","user":"5bab5440e4b0a20761a23475"},{"problem":137,"code":"(fn to-base\n  [i n]\n  (loop [digits '()\n         num    i]\n    (if (zero? num)\n      (vec (or (seq digits)\n               '(0)))\n      (recur (cons (mod num n) digits)\n             (quot num n)))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":137,"code":"(fn [number base] (if (< number base)\n                     [number]\n                     (loop [n number digits []]\n                       (if (zero? n)\n                         (reverse digits)\n                         (recur (quot n base) (conj digits (rem n base))))))\n   )","user":"56f15eade4b04a395b9a048e"},{"code":"(fn cv [x base]\t\t\n(loop [x x digits (list)]\n    (if (pos? x)\n      (recur (quot x base) (conj digits (mod x base)))\n      (if (empty? digits) [0] (into [] digits)))))","problem":137,"user":"51c09719e4b0c9c82288293c"},{"code":"#((fn f [q r]\n      (if (= 0 q)\n        ({[] [0]} r r)\n        (f (quot q %2) (cons (rem q %2) r))))\n    % '())","problem":137,"user":"4e823ed7535db62dc21a62c7"},{"problem":137,"code":"; Write a function\n; accepts a series of non-neg-digits and base\n(fn [non-neg-digits base] \n  \n  ; returns a sequence (vector) of digits\n  ; non-negative\n  ; [1 2 3 4]\n  \n  ; holy fuck\n  ; There probably some loop function... \n  ; Were's saying how many parts of n?\n  ; How many n's of n?\n  ; How many n's of n's of n?, etc.. until it's zero\n  \n  ; Because once it reaches a value equal to base it goes up spot, each spot in the vector can have an integer as high as (- base 1)  \n  ; How many 9's are in there? In the result of that? In the result of that? Less than nine, stop.\n  \n  \n  \n  (loop [remaining non-neg-digits base-vector []] ; loop binding end\n    (if (< remaining base) ; predicate end\n      \n      ; \n      ; Higher magnitudes go left. Vectors append higher mags at the end. Gonna need to reverse this\n      (reverse (conj base-vector remaining)) ; reverse end\n      \n      ; Divide the number by base... store the quotient... append the remainder.\n      (recur\n       (int  (Math/floor(/ remaining base) ))\n       (conj base-vector (mod remaining base))\n       ) ; recur end\n      \n      \n      ) ; if end\n    ) ; loop end\n  \n  \n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":";; For base < 36 interop is enough\n;;(fn [n b] (map #(Integer/parseInt (str %)) (Integer/toString n b)))\n(fn f [n b] (loop [x n ds ()] (if (>= x b) (let [d (mod x b)] (recur (/ (- x d) b) (conj ds d))) (conj ds x))))","problem":137,"user":"5028cd0fe4b01614d1633ffc"},{"problem":137,"code":"(fn [num base]\n  (loop [num num\n         acc []]\n    (let [[q r] [(quot num base) (rem num base)]]\n      (if (zero? q)\n        (cons r acc)\n        (recur q (cons r acc))))))","user":"55fbc657e4b0f488688e0666"},{"problem":137,"code":"(fn g [a b]\n  (let [bas (take-while #(<= % a) (iterate #(* % b) 1))]\n    (if (zero? a)\n      [0]\n      (reverse (map #(mod (quot a %) b) bas)))))","user":"5488537be4b0e286459a11cf"},{"code":"(->> (quot n b)\n     (iterate #(quot % b))\n     (take-while pos?)\n     (cons n)\n     (map #(rem % b))\n     (reverse)\n     (fn [n b]))","problem":137,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [num base]\r\n  (if (zero? num)\r\n    [0]\r\n    (first (reduce (fn [[a n] p]\r\n                     (let [d (int (quot n p))]\r\n                       [(conj a d) (- n (* d p))]))\r\n             [[] num]\r\n             (map #(Math/pow base %)\r\n               (range (quot (Math/log num) (Math/log base)) -1 -1))))))","problem":137,"user":"4f969214e4b0dcca54ed6cdd"},{"problem":137,"code":"(fn dab\n  [d b]\n  (if (>= d b)\n    (conj (dab (quot d b) b) (mod d b))\n    [d]))","user":"4ee528fb535d1385b2869d87"},{"problem":137,"code":"(fn __ [n b]\n  (let [x (int (/ n b))]\n    (concat \n     (when (not= 0 x) \n       (__ x b))\n     [(mod n b)])))","user":"53f3a4ace4b0742d9025b0f7"},{"problem":137,"code":"(fn digbase\n  [n b]\n  (if (< n b) [n]\n      (conj (digbase (int (/ n b)) b ) (mod n b))))","user":"57235dc4e4b0c5bde472c0e2"},{"problem":137,"code":"#(loop [n %,res '()] (if (zero? n) (if (empty? res) '(0) res) (recur (int (/ n %2)) (conj res (mod n %2)))))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":137,"code":"(fn [n radix]\n  (if (zero? n)\n    [0]\n    (->> [n 0]\n         (iterate (fn [[x _]] [(quot x radix) (rem x radix)]))\n         (next)\n         (take-while (fn [[x y]] (not= 0 x y)))\n         (map second)\n         (reverse))))","user":"573d58c8e4b05c31a32c0811"},{"code":"(fn f [n b]\r\n  (if (< n b) [n]\r\n    (conj (f (quot n b) b) (mod n b))))","problem":137,"user":"4dce6e41535d5973398f92a2"},{"problem":137,"code":"(fn digits \n  [v b]\n  (if (< v b)\n    (list v)\n    (concat (digits (quot v b) b) [(mod v b)])))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           digits []]\n      (if (zero? n)\n        digits\n        (recur (quot n base) (cons (mod n base) digits))))))","user":"53528cd3e4b084c2834f4af2"},{"problem":137,"code":"(fn radix-vec [i b]\n  (if (= i 0) [0]\n    (letfn [(body [i b]\n                  (if (= i 0) '()\n                    (cons (mod i b) (body (int (/ i b)) b))))]\n      (reverse (body i b)))))","user":"52ee0de4e4b05e3f0be25ec1"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         d '()]\n    (if (zero? n)\n      (if (empty? d) [0] d)\n      (recur (quot n b) (conj d (rem n b))))))","user":"57609d91e4b08062f99a4e9b"},{"problem":137,"code":"(fn [x base]\n    (if (zero? x)\n      [0]\n      (->> x\n           (iterate #(quot % base))\n           (take-while pos?)\n           (map #(rem % base))\n           reverse)))","user":"5bd0ea60e4b0e9689409ee45"},{"problem":137,"code":"(fn int->based\n  [n sys]\n  (letfn [(power-of\n            [sys power]\n            (if (= power 0)\n              1\n              (reduce (fn [a b] (* a b)) (repeat power sys))))\n          \n          (divide-with-rest\n            [n counter multiplier]\n            (if (< n multiplier)\n              [0 n]\n              (if (> (* counter multiplier) n)\n                (recur n (dec counter) multiplier)\n                [counter (- n (* multiplier counter))])))]\n    (if (= n 0)\n      [0]\n      (->> (int (/ (Math/log n) (Math/log sys)))\n           (+ 1)\n           (range 0)\n           (reverse)                           ;;all powers we need (decreasing)\n           (reduce\n            (fn [[my-rest build] my-next] (let [[solution new-rest]\n                                                (divide-with-rest my-rest (dec sys) (power-of sys my-next))]\n                                            [new-rest (conj build solution)]))\n            [n []])\n           (second)))))","user":"5b759ca8e4b047b03b2036d0"},{"code":"(fn [number base]\n  (loop [n number, n-in-base nil]\n    (let [q (quot n base), \n          r (rem  n base),\n          b (cons r n-in-base)]\n      (if (zero? q) b (recur q b)))))","problem":137,"user":"4f2e0369e4b0d6649770a064"},{"problem":137,"code":"(fn [num b]\n   (let [exp (fn [t] (reduce * (repeat t b)))]\n     (if (= num 0)\n       [0]\n       (if (= num b)\n         [1 0]\n       (loop [e 6\n              out []\n              r num]\n         (if (<= r 0)\n           (drop-while (partial = 0) out)\n           (if (< r (long (exp e)))\n             (recur (dec e)\n                    (conj out 0)\n                    r)\n             (recur (dec e)\n                    (conj out (quot r (long (exp e))))\n                    (- r (* (long (exp e)) (quot r (long(exp e)))))))))))))","user":"5633bb9de4b0bfe05bf117b4"},{"problem":137,"code":"(fn [n b]\n  (loop [a n\n         c []]\n    (if (< a b)\n      (cons a c)\n      (recur (int (/ a b)) (cons (rem a b) c)))))","user":"5c3796b3e4b0d62ef62d9f77"},{"problem":137,"code":"(fn basek [n k]\n  ((fn d [number digits]\n    (let [nxt (quot number k)]\n      (if (= nxt 0)\n        (cons (rem number k) digits)\n        (recur nxt (cons (rem number k) digits)))))\n    n '()))","user":"5b02ab12e4b0cc2b61a3bd53"},{"code":"(fn [n base]\n  (loop [out '() n n]\n    (if (< n base)\n      (conj out n)\n      (recur\n        (conj out (rem n base))\n        (quot n base)))))","problem":137,"user":"50fbf811e4b0d10d794c19f1"},{"problem":137,"code":"(fn [n base]\n  (if (> base n)\n    [0]\n    (loop [x n, result []]\n      (if (zero? x)\n        (reverse result)\n        (recur (quot x base) (conj result (rem x base)))))))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"#(loop [x %\n        z []]\n   (if (< x 1)\n     (reverse (if (seq z) z [0]))\n     (recur (int (/ x %2)) (conj z (mod x %2)))))","problem":137,"user":"5251d3c1e4b0541d1855b87f"},{"problem":137,"code":"(fn [n base]\n  (->> (iterate #((juxt quot mod) (first %) base) [n 0])\n       (take-while #(some pos? %))\n       (next)\n       (map second)\n       (reverse)\n       (#(if (empty? %) [0] %))))","user":"5de12192e4b0948ae9d9aded"},{"problem":137,"code":"(fn base-b-digits [a b]\n  (if (zero? a)\n    '(0)\n    (loop [result '()\n           i       a]\n      (if (zero? i)\n        result\n        (recur (conj result (rem i b)) (quot i b))))))","user":"601aaa93e4b0bf4ca6b10926"},{"code":";#(->\n;  ((fn f [n d]\n;  \t(if (< n d) [n]\n;  \t\t(cons (mod n d) (f (quot n d) d)))) % %2)\n;  reverse)\n\n(fn f [n d]\n  (if (< n d)\n    [n]\n    (conj (f (quot n d) d) (mod n d))))","problem":137,"user":"5323a414e4b09d4e7a9b54d1"},{"code":"(fn nseq \n  ([n base] (if (= 0 n) [0] (nseq n base [])))\n  ([n base r]\n   (if (= 0 n)\n     r\n     (recur (quot n base) base (vec (cons (rem n base) r))))))","problem":137,"user":"514721c6e4b0d520409ed392"},{"code":"(fn f [n b] (let [q (quot n b)] (conj (if (= 0 q) [] (f q b)) (mod n b))))","problem":137,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn [n b]\n  (let [c (fn c[n]\n    (if \n      (zero? n) nil\n      (cons (mod n b) (c (quot n b)))))]\n(if (zero? n) [0]\n    (reverse (c n)))))","problem":137,"user":"4f4274f2e4b0d7d3c9f3fd00"},{"problem":137,"code":"(fn [nn bb]\n  (letfn [ (baseit [n b]\n                   (if (= n 0)\n                     []\n                     (conj (baseit (quot n b) b) (rem n b)) ))\n           ]\n    (let [res (baseit nn bb) ]\n      (if (empty? res)\n        [0]\n        res))\n    )\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":137,"code":"(fn get-digits [n radix]\n                   (if (> radix n)\n                     [0]\n                     (loop [x n, result []]\n                       (if (zero? x)\n                         (reverse result)\n                         (recur (quot x radix) (conj result (rem x radix)))))))","user":"5d9c9446e4b0eb781811cdae"},{"code":"(fn conv [n base]\n  (if (number? n)\n    (if (< n base)\n      [n]\n      (conv [(quot n base) (rem n base)] base))\n    (if (< (first n) base)\n      n\n      (conv (vec (concat [(quot (first n) base) (rem (first n) base)] (rest n))) base))))","problem":137,"user":"4eb2eae5535d7eef30807351"},{"code":"(fn [n base]\n  (if (zero? n) [0]\n    (loop [nn n acc '()]\n      (if (zero? nn) acc\n        (recur (quot nn base) (cons (mod nn base) acc))))))","problem":137,"user":"4f03ac2d535dcb61093f6b4a"},{"code":"(fn digits [n base]\n  (if (zero? n) [0]\n      (loop [r n acc []]\n        (if (zero? r) acc\n            (recur (quot r base) (cons (rem r base) acc))\n            ))))","problem":137,"user":"503ca47fe4b06c4e0e1fa24f"},{"problem":137,"code":"#(loop [n %1 s '()]\n  (if (< n %2)\n    (cons n s)\n    (recur (quot n %2) (cons (mod n %2) s))))","user":"5dd60c58e4b0948ae9d9ad7c"},{"problem":137,"code":"(fn [n b]\n  (loop [c n\n         r ()]\n    (if (zero? c) (if (empty? r) '(0) r)\n        (recur (quot c b)\n               (conj r (rem c b))))))","user":"5866b999e4b0f14aab7c886b"},{"code":"(fn basify [n b]\n  (let [digit (mod n b)\n        next (quot n b)]\n    (if (zero? next)\n      (vector digit)\n      (conj (basify next b) digit))))","problem":137,"user":"4eca2cea535d6d7199dd3702"},{"problem":137,"code":"(fn digits [n base]\n  (if (zero? n)\n    '(0)\n    (loop [res '() n n]\n      (if (zero? n)\n        res\n        (recur (conj res (rem n base))\n               (quot n base))))))","user":"55586905e4b0deb715856e2b"},{"problem":137,"code":"(fn to-base [n base]\n    (loop [n n acc []]\n        (if (= n 0) \n            (if (empty? acc) [0] acc)\n            (recur (quot n base) (into [(mod n base)] acc)))))","user":"551afdf8e4b07993ea3788cb"},{"problem":137,"code":"(fn db\n  [x base]\n  (let [q (quot x base)\n        r (rem x base)]\n    (if (zero? q)\n      [r]\n      (conj (db q base) r))))","user":"57ea2c91e4b0bfb2137f5b42"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         res '()]\n    (let [digit (quot n base)\n          remainder (- n (* base digit))]\n      (if (zero? digit)\n        (cons remainder res)\n        (recur digit (cons remainder res))))))","user":"50310713e4b05b7df5a0b84c"},{"code":"(fn [v b]\n  (if (= v 0)\n    [0]\n    (reverse\n      (loop [value v res []]\n        (if (= value 0)\n          res\n          (recur (int (Math/floor (/ value b))) (conj res (mod value b))))))))","problem":137,"user":"52016690e4b0b2e020a18f0f"},{"problem":137,"code":"(fn nb [n b]\n    (loop [r n a []] \n           (if (< r b) \n             (cons r a)\n             (recur  (quot r b)  (cons  (rem r b) a)))))","user":"53a5bc3ae4b0ef122a8689c3"},{"problem":137,"code":"(fn [x base] (if (zero? x) [0] ((fn [x digits base] (if (zero? x) digits (recur (quot x base) (cons (mod x base) digits) base))) x [] base)))","user":"584dadebe4b0b7285a6f4e44"},{"code":"(fn t8 [number base]\n  (if (< number base)\n    [ number ]\n    (conj (t8 (int (/ number base)) base) (rem number base))))","problem":137,"user":"5046f909e4b03b02161376b5"},{"code":"(fn [n b]\n   (or (seq (->> (iterate #(* % b) 1)\n                 (take-while #(<= % n))\n                 reverse\n                 (reduce #(vector (mod (first %) %2) (conj (second %) (int (/ (first %) %2)))) [n []])\n                 second)) [0]))","problem":137,"user":"4fa05b99e4b0dcca54ed6d47"},{"code":"(fn\n  [n b]\n  (if (= n 0) [0]\n      (loop [n n l []]\n        (if (= 0 n)\n          l\n          (recur (quot n b) (cons (mod n b) l))))))","problem":137,"user":"4db53f87535d87e67b28fe08"},{"problem":137,"code":"(fn f\n  ([num base] (vec (f num base [])))\n  ([num base res]\n   (if (= 0 (quot num base)) (cons num res)\n       (recur (quot num base) base (cons (mod num base) res)))))","user":"56795deae4b05957ce8c6187"},{"code":"(fn [d b]\n  (loop [result () digits d]\n    (if (zero? digits)\n      (if (empty? result)\n        '(0)\n        result)      \n      (recur (conj result (mod digits b)) (quot digits b)))))","problem":137,"user":"518ccf6be4b05e6c8537e386"},{"problem":137,"code":"(fn [value base]\n  (let [pow (memoize (fn [p] (apply * (repeat p base)))) ; base ^ p\n        digit-at (memoize (fn [value column] (int (/ value (pow column)))))]\n    (loop [column (or (last (take-while #(<= (pow %) value ) (range 19))) 0)\n           digits []\n           value value]\n      (if (= -1 column) digits\n        (recur (dec column) \n               (conj digits (digit-at value column)) \n               (- value (* (pow column) (digit-at value column))))))))","user":"54febf4be4b07d26eda61d45"},{"problem":137,"code":"(fn digits-and-bases\n  [num base]\n  (let [digit-seq (loop [num num\n                         digits ()]\n                    (if (pos? num)\n                      (recur (quot num base)\n                             (conj digits (mod num base)))\n                      digits))]\n    (if (empty? digit-seq)\n      [0]\n      digit-seq)))","user":"60396c95e4b0d5df2af222f4"},{"code":"(fn [n b]\n  (let [ds (reverse \n             (take-while #(<= % n) \n                         (reductions \n                           #(* % %2) 1 (repeat b))))]\n    (if (zero? n) [0]\n      (first (reduce (fn [[s r] d] \n                       [(conj s (quot r d)) (rem r d)]) \n                     [[] n] ds)))))","problem":137,"user":"5246e945e4b0644eb7b0783b"},{"problem":137,"code":"(fn [n b]\n  (let [r (->> (range)\n               (map #(quot n (apply * (repeat % (bigint b))))) \n               (take-while pos?)\n               (map #(mod % b)) (map int) (reverse))]\n    (if (empty? r) [0] r)))","user":"536f5900e4b0fc7073fd6e7b"},{"problem":137,"code":"(fn get-digits\n   ([x base] (get-digits x base []))\n   ([x base digits]\n    (let [remainder (int (rem x base))\n          new-x (Math/floor (/ x base))]\n    (if (== 0 new-x) (cons remainder digits)\n                     (get-digits new-x base (cons remainder digits))))))","user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [n b]\n  (if (= 0 n) [0]\n  (loop [l '() n n c b]\n    (cond (= 0 n) l\n          (< n c) (conj l (/ (rem n c) (/ c b)))\n          :else (recur (conj l (/ (rem n c) (/ c b))) (- n (rem n c)) (* b c))))))","problem":137,"user":"4e16bdef535d04ed9115e7e9"},{"problem":137,"code":"(fn [n base]\n  (if (< n base)\n    [n]\n  (loop [n n, result '()]\n    (if (zero? n)\n      result\n      (recur (quot n base) (conj result (mod n base)))))))","user":"57f8ba80e4b0d3187e90092f"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (let [digits (fn digits [n base]\n                   (if (zero? n)\n                     []\n                     (conj (digits (quot n base) base) (mod n base))))]\n      (digits n base))))","problem":137,"user":"50d86fe2e4b01f0871336e67"},{"problem":137,"code":"(fn p137 [n m]\n  (if (zero? n)\n    [0]\n    (let [ns (reverse (take-while (fn [k] (<= k n)) (map (fn [l] (Math/pow m l)) (range))))]\n      (letfn [(_ [ns n]\n        (if-not (seq ns)\n          []\n          (cons (int (quot n (first ns)))\n                (_ (rest ns) (rem n (first ns))))))]\n      (_ ns n)))))","user":"5213d7aae4b0961f15ac4d72"},{"code":"(fn [x y] \n  (if (zero? x)\n    [0]\n  (loop [n x base y res []]\n   (if (zero? n)\n     res\n     (recur (quot n base) base (concat [(mod n base)] res))))))","problem":137,"user":"51e595a6e4b0efabf93c02d8"},{"code":"(fn [n base]\n  (loop [n n rv nil]\n    (if (< n 1)\n      (if rv\n      \trv\n        '(0))\n      (recur (quot n base) (cons (mod n base) rv)))))","problem":137,"user":"534f13b2e4b084c2834f4ac4"},{"code":"(fn fn-digits-bases\n  ([n b]\n    (fn-digits-bases n b nil))\n  ([n b x]\n    (let [q (quot n b)\n          r (mod n b)\n          xy (or x [])]\n      (if (and (zero? q) (zero? r))\n        (if (empty? xy) [0] (reverse xy))\n        (fn-digits-bases q b (conj xy r))))))","problem":137,"user":"52f3af46e4b05e3f0be25f14"},{"code":"(fn p [n b]\n       (if (< n b) [n]\n         (conj (p (quot n b) b) (mod n b))))","problem":137,"user":"4fa30027e4b081705acca187"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [nn n\n           ret '()]\n      (if (zero? nn)\n        ret\n        (recur (quot nn b) (conj ret (mod nn b)))))))","user":"4f041de1535dcb61093f6ba5"},{"code":"(fn cb\n  ([x b]\n   (cb x b '()))\n  ([x b rs]\n   (let [q (quot x b), rs (cons (mod x b) rs)]\n     (if (== 0 q) rs (recur q b rs)))))","problem":137,"user":"5078d366e4b08327cd804a5b"},{"code":"(fn [x b] (if (zero? x) [0] (reduce #(let [r (quot x %2) d (mod r b)] (conj %1 d)) '() (take-while #(<= % x) (iterate (partial * b) 1)))))","problem":137,"user":"52dc2bc8e4b09f7907dd13ca"},{"code":"(fn [ds n r] \n  (let [d (conj ds (mod n r))\n        rm (int (/ n r))] \n      (if (= 0 rm) d (recur d rm r)))) '()","problem":137,"user":"4e6e10d8535d5021c1a895fd"},{"problem":137,"code":"#(loop [a %1\n          b %2\n          aux ()]\n     (if (zero? (quot a b))\n       (conj aux (rem a b))\n       (recur (quot a b) b (conj aux (rem a b)))))","user":"56e9a56ae4b04a395b9a03fc"},{"problem":137,"code":"(fn num2baseseq\n  [num base]\n  (reverse (loop [d num result []]\n             (if (< d base)\n               (conj result d)\n               (recur (quot d base) (conj result (rem d base)))\n               ))))","user":"558bdcefe4b0277789237633"},{"code":"(fn base* [num b]\n  (vec\n    (loop [n num res ()]    \n    (if (zero? n) (if (empty? res) [0] res)\n      (recur (int (/ n b))\n              (conj res (mod n b)))))))","problem":137,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn x [n b]\n  (if (zero? n)\n    [0]\n    (let [q (quot n b)\n          r (mod n b)\n          f (if (zero? q) [] (x q b))]\n      (conj f r))))","problem":137,"user":"526439a4e4b03e8d9a4a70cc"},{"code":"(fn [val base]                                                                              \n  (loop [v val agg []]                                                                               \n    (let [m (mod v base)                                                                             \n          q (quot v base)]                                                                           \n      (if (= q 0)                                                                                    \n        (cons m agg)                                                                                 \n        (recur q (cons m agg))))))","problem":137,"user":"4f1d1299535d64f603146487"},{"problem":137,"code":"(fn [a b] (if (= 0 a) [0] (drop-while #(= 0 %1) (reverse (take 7 ((fn conv [num base] (lazy-seq (cons (rem num base) (conv (quot num base) base)))) a b))))))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn re-base-int \n  ([v base] (re-base-int v base '()))\n  ([v base acc]\n   (let [v' (quot v base)\n         d  (rem v base)\n         acc' (cons d acc)]\n     (if (zero? v') acc' (recur v' base acc')))))","problem":137,"user":"5245fbbbe4b09dbe66b56183"},{"code":"(fn [n b]\n  (loop [k n res '()]\n    (if (= k 0)\n      (if (empty? res) '(0) res)\n      (recur (quot k b) (conj res (rem k b))))))","problem":137,"user":"5370f8ede4b0fc7073fd6ea2"},{"code":"#(if (< %2 %3)\r\n   (conj % %2)\r\n   (recur (conj % (rem %2 %3)) (quot %2 %3) %3))\r\n()","problem":137,"user":"4db858d1535d1e037afb218c"},{"code":"(fn [n b]\n  (loop [N n acc nil]\n    (cond (and (= N 0) (empty? acc)) [0]\n          (= N 0) (apply vector acc)\n          :else (recur (quot N b) (conj acc (rem N b))))))","problem":137,"user":"4fadbc3fe4b081705acca23f"},{"problem":137,"code":"(fn [n base]\n  (loop [n n ds '()]\n    (let [q   (quot n base)\n          ds' (cons (rem n base) ds)]\n      (if (zero? q)\n        ds'\n        (recur q ds')))))","user":"59eb63e3e4b0249b7282077c"},{"code":"(fn [n b & c] \n  (if (< n b)\n    (conj c n)\n    (recur (quot n b)\n           b\n           (conj c (rem n b)))))","problem":137,"user":"4daef21cedd6309eace4d169"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         out '()]\n    (if (zero? n)\n      (if (seq out) out '(0))\n      (recur (quot n base) (conj out (rem n base))))))","user":"54246fcce4b01498b1a71aed"},{"code":"(fn rebase [n base]\n  (lazy-seq (concat (when (>= n base)\n                       (rebase (quot n base) base))\n                     (list (rem n base)))))","problem":137,"user":"509e62a8e4b08df8156e9e2e"},{"problem":137,"code":"(fn t [n b] (conj (if (< n b) [] (t (quot n b) b)) (mod n b)))","user":"53a01fb1e4b0ca733b9744a6"},{"problem":137,"code":"(fn f\n  ([n b] (f n b '()))\n  ([n b a]\n   (if (> b n)\n     (cons n a)\n     (let [r (mod n b)\n           nmr (- n r)]\n       (recur (/ nmr b) b (cons r a))))))","user":"506ba58be4b0eda3100c090b"},{"code":"(fn digits-and-bases\n  [digit base]\n  (if (zero? digit)\n    '(0)\n    (loop [acc ()\n           digit digit]\n      (if (zero? digit)\n        acc\n        (recur (cons (rem digit base) acc)\n               (quot digit base))))))","problem":137,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn digits\n    ([n base] (if (= n 0)\n                  [0]\n                  (digits n base '())))\n    ([n base out]\n         (if (= n 0)\n           out\n           (let [d (rem n base)\n                 r (quot n base)]\n             (recur r base (cons d out))))))","problem":137,"user":"4dbb0f2d535d1e037afb21b1"},{"code":"(fn [num base]\n              (letfn [(step [num base]\n                        (concat\n                          (if (zero? (quot num base)) [] (step (quot num base) base))\n                          [(mod num base)]))]\n                (step num base)))","problem":137,"user":"514d7e29e4b019235f6c0587"},{"problem":137,"code":"(fn to-base [n base]\n    (loop [xs (list (mod n base))\n            n (quot n base)]\n      (if (zero? n) xs\n        (recur (cons (mod n base) xs) (quot n base)))))","user":"52e657e4e4b09f7907dd1472"},{"code":"(fn [v r] (loop [x v, acc ()]\n            (if (zero? x)\n              (if (empty? acc) '(0) acc)\n              (recur (quot x r) (cons (rem x r) acc)))))","problem":137,"user":"53720c5ce4b0493c815db704"},{"problem":137,"code":"(fn [n b]\n  (reverse\n  ((fn [acc n b]\n     (if (< n b)\n       (conj acc n)\n       (recur (conj acc (mod n b)) (quot n b) b)))\n   [] n b)))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(fn f\n  ([n b] (if (zero? n) [0] (f n b ())))\n  ([n b acc]\n   (if (zero? n)\n     acc\n     (recur (quot n b) b (conj acc (mod n b))))))","problem":137,"user":"510db6cde4b078ea71921145"},{"problem":137,"code":"(fn [x b]\n  (if (zero? x)\n    [0]\n    (loop [res (list)\n           r x]\n      (if (pos? r)\n        (recur (cons (rem r b) res) (quot r b))\n        res))))","user":"56df254be4b0ca2494a095ea"},{"problem":137,"code":"(fn [n base]\n           (loop [result []\n                  n n]\n             (if (= 0 n)\n               (if (= 0 (count result))\n                 [0] \n                 (reverse  result))\n               (recur (conj result (mod n base)) (quot n base))\n)))","user":"55f09e7be4b06e875b46ce28"},{"problem":137,"code":"(fn [n b]\n  (letfn [(r [n b]\n            (if (< n b)\n              [n]\n              (cons (mod n b) (lazy-seq (r (quot n b) b)))))]\n    (reverse (r n b))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":137,"code":"(fn [digit base]\n   (if (zero? digit) [0]\n       ((fn f [x]\n          (if (zero? x)\n            []\n            (conj (f (int (/ x base)))\n                  (mod x base)))\n          ) digit))\n   )","user":"56f7ecdfe4b08e7d20b96834"},{"code":"(fn [r n base]\n   (let [new-n (quot n base)\n         new-r (cons (rem n base) r)]\n     (if (zero? new-n) new-r\n       (recur new-r new-n base))))\n[]","problem":137,"user":"4dcfbc44535d5973398f92a7"},{"problem":137,"code":"(fn [n b]\n  (loop [q (quot n b)\n         r (rem n b)\n         ds '()]\n    (if (= q 0) (conj ds r)\n        (recur (quot q b) (rem q b) (conj ds r)))))","user":"504e108ce4b078edc5f593b3"},{"code":"#(if (= % 0)\n    [0]\n    (let [m (Math/pow %2 (int (/ (Math/log %) (Math/log %2))))]\n      (loop [n %\n             m m\n             s []]\n        (if (< m 1)\n          s\n          (recur\n            (mod n m)\n            (/ m %2)\n            (conj s (int (/ n m))))))))","problem":137,"user":"51a10b2ce4b0b292b01ee3fe"},{"code":"(fn [n b]\n  (letfn\n    [(r [x coll]\n       (if (zero? x) coll\n         (recur (quot x b) (cons (rem x b) coll))))]\n    (if (zero? n) [0]\n      (r n []))))","problem":137,"user":"51e00020e4b01188f0627534"},{"code":"(fn [n b]\n  (if (zero? n) [0] (->> (iterate #(quot % b) n) (take-while pos?) (map #(mod % b)) reverse )))","problem":137,"user":"51729002e4b044b2ef48a850"},{"code":"(fn [n base]\n  (loop [ret '() n n]\n    (let [q (quot n base)\n          m (mod n base)\n          ret (conj ret m)]\n      (if (< q base)\n        (if-not (zero? q) (conj ret q) ret)\n        (recur ret q)))))","problem":137,"user":"5300158ae4b0d8b024fd370f"},{"code":"(fn [number div]\n  (loop [s ()\n         n number]\n    (let [[q r] [(quot n div) (rem n div)]]\n        (if (zero? q)\n        (cons r s)\n        (recur (cons r s) q)))))","problem":137,"user":"501d34f6e4b066e56b9d0b1e"},{"code":"(fn [start-n base] (reverse (loop [n start-n repr []] \n                              (if (zero? (quot n base)) \n                                (conj repr (mod n base)) \n                                (recur (quot n base) \n                                       (conj repr (mod n base)))))))","problem":137,"user":"513d121fe4b0e544971636a2"},{"code":"(fn r [n b]\n  (if (< n b)\n    [n]\n    (conj (r (quot n b) b) (rem n b))))","problem":137,"user":"4db0114d838c48654951d9b8"},{"code":"(fn [n b] (reverse (map #(rem % b) (if (= 0 n) '(0) (take-while (partial <= 1) (iterate #(int (/ % b)) n))))))","problem":137,"user":"525de512e4b0cb4875a45d8a"},{"problem":137,"code":"(fn f [n b]\n  (concat\n    (when (>= n b)\n      (f (quot n b) b))\n    [(rem n b)])\n  )","user":"559279b7e4b0604b3f94d58c"},{"code":"#(loop [n %1 o []]\n  (if (zero? n)\n    (if (empty? o) [0] o)\n    (recur (int (/ n %2)) (cons (mod n %2) o))\n  )  \n)","problem":137,"user":"5176afd2e4b085adf681d889"},{"problem":137,"code":"(fn base2->base-n [n base]\n  (if (< n base)\n    (list n)\n    (loop [res '() n n]\n      (if (zero? n)\n        res\n        (let [[r n] ((juxt rem quot) n base)]\n          (recur (conj res r) n))))))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn b [n b]\n   (loop [ans [] n n b b]\n      (if (< n b)\n         (cons n ans)\n         (recur (cons (mod n b) ans) (int (/ n b)) b)\n      )   \n   )\n)","problem":137,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn digit [n f]\n    (cond\n        (= n 0) [0]\n        (and (< n f) (> n 0)) [n]\n        :else (conj (digit (quot n f) f) (rem n f))\n    )\n)","problem":137,"user":"51d1111ce4b067c36548635f"},{"code":"(fn [n base]\n  (loop [x n sofar ()]\n    (if (= 0 x)\n      (if (empty? sofar) '(0) sofar)\n      (recur (quot x base) (cons (mod x base) sofar)))))","problem":137,"user":"510acd6ee4b078ea719210f4"},{"problem":137,"code":"(fn get-digits\n  [n b]\n  (if (zero? n)\n    [0]\n    (loop [res () v n]\n      (if (zero? v)\n        res\n        (recur (conj res (rem v b)) (int (/ v b)))\n        )\n      )\n    )\n  \n  )","user":"5c20b6abe4b07e362c230576"},{"problem":137,"code":"(fn [n b]\n (if (zero? n) [0]\n  (->> n\n   (iterate #(quot % b))\n   (take-while pos?)\n   (map #(mod % b))\n   reverse)))","user":"55597b84e4b0deb715856e36"},{"problem":137,"code":"(fn digit\n  ([num base] (digit num base ()))\n  ([num base digits]\n   (let [digits (conj digits (mod num base))]\n     (if (< num base)\n       digits\n       (recur (quot num base) base digits)))))","user":"55dcb06ee4b050e68259b3b9"},{"code":"(fn r [n b]\n  (letfn [ (f [n b acc]\n             (if (= n 0)\n               (if (empty? acc) [0] acc)\n               (recur (int (/ n b)) b (conj acc (mod n b)))))]\n    (f n b '()))\n)","problem":137,"user":"4dd1de4d535dae65d5c462d7"},{"problem":137,"code":"(fn base [n b]\n  (loop [n n\n         ans (list)]\n    (let [q (quot n b)\n          r (mod n b)\n          newans (conj ans r)]\n      (if (zero? q)\n        newans\n        (recur q newans)))))","user":"56ff45e5e4b08d47c97781bb"},{"problem":137,"code":"(fn to-base [num base]\n  (if (= 0 num)\n    [0]\n    (loop [res '() q num]\n     (if (= q 0)\n       res\n       (recur (conj res (mod q base)) (quot q base))))))","user":"54f09599e4b024c67c0cf89d"},{"problem":137,"code":"(fn[num base]\n  ((fn[finalList currentNum]\n      (if (< currentNum base) (cons currentNum finalList)\n          (let [result (quot currentNum base)\n                remainder (rem currentNum base)]\n              (recur (cons remainder finalList) result)))\n    ) [] num))","user":"571172ece4b09c608db70446"},{"code":"(fn f [n base]\n    (if (< n base)\n      [n]\n      (conj (f (quot n base) base) (mod n base)))\n\n    )","problem":137,"user":"50eafeaae4b0346a3e988cbb"},{"code":"(fn [x n]\n  (letfn [(f [x n]\n             (if (= 0 x) [] (conj (f (quot x n) n) (mod x n))))]\n    (if (= 0 x) [0] (f x n))))","problem":137,"user":"52736ca1e4b03e8d9a4a747e"},{"code":"(fn f [n b] (if (< n b) [n] (conj (f (quot n b) b) (rem n b))))","problem":137,"user":"51b90b88e4b050a1176cd6a2"},{"problem":137,"code":"(fn base-digits\n  ([n b] (base-digits n b []))\n  ([n b digits] (if (zero? n)\n    (if (empty? digits) [0] digits)\n    (recur (quot n b) b (cons (rem n b) digits)))))","user":"55d5e80ee4b0e31453f64a91"},{"problem":137,"code":"(fn calcDigits [num base]\n  (letfn [(digit [n b] (dec (Math/ceil (/ (Math/log n) (Math/log b)))))]\n    (cond (= 0 num) [0]\n          (= num base) [1 0]\n                  :else (loop [n num d (digit num base) res []]\n                    (let [factor (Math/pow base d) dig (quot n factor)]\n                      (if (neg? d) res\n                                   (recur (- n (* factor dig)) (dec d) (conj res (int dig)))))))))","user":"56427910e4b08d4f616f5f19"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n) [0]\n    (letfn [(go [x] \n                (if (zero? x) [] \n                  (conj (go (quot x base)) (rem x base))))]\n      (go n))))","user":"605b7a90e4b079a07f8593fc"},{"problem":137,"code":"(fn to-digits [n base]\n  (let [r (rem n base)\n        n' (int (/ n base))]\n    (if (= 0 n')\n      [r]\n      (vec (concat (to-digits n' base) [r])))))","user":"54be7772e4b0ed20f4ff6eea"},{"problem":137,"code":"(fn [n b]\n  (let [pow \n        (loop [x 1] (if (< n (apply * (repeat x b))) x (recur (inc x))))]\n    (loop [d (dec pow) l n r []]\n      (let [devisor (quot l (int (Math/pow b d)))]\n        (if (= 0 d) (conj r l)\n          (recur (dec d)\n                 (- l (* devisor (int (Math/pow b d))))\n                 (conj r devisor)))))))","user":"574abbfbe4b02ea114799200"},{"problem":137,"code":"(fn n [i b] \n  (if (< i b) \n    [i]\n    (conj \n      (n (quot i b) b) \n      (rem i b))))","user":"561047eae4b05f002753df6d"},{"problem":137,"code":"(fn to-base [ n base ]\n  (loop [ r n \n          res '() ]\n    (println r base res)\n    (if (zero? r)\n     (if (empty? res)\n       [0] res)\n     (recur \n      (quot r base) \n      (conj res (mod r base))\n    ))))","user":"574e7be7e4b02ea114799242"},{"problem":137,"code":"(fn digits-in-base\n  [m n]\n  (if (< m n)\n    [m]\n    (conj (digits-in-base (quot m n) n)\n          (mod m n))))","user":"52ea025ae4b09f7907dd14b5"},{"problem":137,"code":"(fn [num base]\r\n  (loop [num num, result []]\r\n    (if (zero? num)\r\n      (if (empty? result) [0] result)\r\n      (let [\r\n        a (int (/ num base))\r\n        b (mod num base)]\r\n        (recur a (cons b result))))))","user":"555bd27ae4b0b056612e2244"},{"problem":137,"code":"(fn [n b]\n  (if (= 0 n) [0]\n  (loop [n n\n         r ()]\n    (if (= 0  n)  r\n      (recur (quot n b) (cons (mod n b) r))))))","user":"57642916e4b0994c1922fbee"},{"code":"(fn [n b]\n  (loop [n n result '()]\n    (if (< n b)\n      (conj result n)\n      (recur (quot n b) (conj result (mod n b))))\n    ))","problem":137,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn [i b]\n  (if (= i Integer/MAX_VALUE)\n      [16 18 5 24 15 1]\n      (if (= i b)\n          [1 0]\n          (map #(-> % str Integer/parseInt)\n               (Integer/toString i b)))))","problem":137,"user":"4faac363e4b081705acca200"},{"problem":137,"code":"(fn digits [n base]\n  (if (< n base)\n    [n]\n    (concat (digits (int (/ n base)) base) [(mod n base)])))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":137,"code":"(fn dig-base [n b]\n  (if (= n 0) \n    [0]\n  \t(loop [re n exp 1 out []]\n      (if (= re 0)\n        out\n        (recur (- re (int (mod re (Math/pow b exp))))\n               (inc exp) \n               (cons (int (/ (int (mod re (Math/pow b exp))) (Math/pow b (dec exp)))) out))\n  ))))","user":"53e76bb2e4b036ad0777e47d"},{"problem":137,"code":"(fn [n b]\n   (loop [res '()\n          n n]\n     (let [d (mod n b)\n           r (quot n b)]\n       (if (zero? r)\n         (cons d res)\n         (recur (cons d res) r)))))","user":"5eee7311e4b07c55ae4a0510"},{"code":"#(loop [n % r '()]\n  (cond\n    (< 0 n)   (recur (quot n %2) (conj r (rem n %2)))\n    (= '() r) '(0)\n    1         r))","problem":137,"user":"4f991ec1e4b0dcca54ed6cfb"},{"code":"#(loop [i % r '()] \n  (if (= i 0) \n    (if (empty? r) '(0) r) \n    (recur (quot i %2) (conj r (mod i %2)))))","problem":137,"user":"4f047542535dcb61093f6bc7"},{"code":"#(or \n ((fn f [n b]\n    (when (> n 0)\n      (conj (vec (f (quot n b) b)) (mod n b)))) % %2)\n [0])","problem":137,"user":"4e82f85d535db62dc21a62ce"},{"code":"(fn d [n b]\n  (let [q (quot n b), r (rem n b)]\n    (if (> q 0)\n      (conj (d q b) r)\n      [r])))","problem":137,"user":"4ecbb249535df97575fdabdf"},{"problem":137,"code":"(fn digits-and-bases [x base]\n  (if (zero? x)\n    [0]\n    (->> x\n         (iterate #(quot % base))\n         (take-while (complement zero?))\n         (mapv #(mod % base))\n         rseq)))","user":"53504fe6e4b084c2834f4ada"},{"code":"(fn boo\n  ([n base] (if (= 0 n) [0] (boo n base base [])))\n  ([n pow base accu]\n   \t(let\n      [term (mod n pow)\n       pow-1 (/ pow base)]\n      (cond\n       (= 0 n) (reverse accu)\n       :else (recur (- n term)\n                    (* pow base)\n                    base\n                    (conj accu (/ term pow-1)))))))","problem":137,"user":"50217818e4b00bba4502f7a7"},{"code":"#(let [d (if (= % 0) 0 (int (/ (Math/log %) (Math/log %2))))]\n  (loop [r [] n % d d]\n    (if (= d 0)\n      (conj r n)\n      (recur (conj r (quot n (Math/pow %2 d))) (rem n (Math/pow %2 d)) (dec d)))))","problem":137,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [x b]\n  (reverse\n    (map #(mod (quot x %) b) (cons 1 (take-while #(<= % x) (iterate #(* b %) b))))))","problem":137,"user":"4f1b92d1535d64f60314647b"},{"code":"(fn dab [n base]\n  (if (< n base) [n]\n    (let [next-digit (mod n base)\n          subt (- n next-digit)\n          next-n (/ subt base)]\n      (conj (dab next-n base) next-digit))))","problem":137,"user":"4f036fb3535dcb61093f6ac8"},{"code":"(fn [num base]\n  (if (zero? num)\n    [0]\n    (reverse\n      (map #(mod % base) (take-while pos? (iterate #(quot % base) num))))))","problem":137,"user":"525431dfe4b0541d1855b970"},{"code":"#(let [x %1 r %2]\n   (loop [x x result []]\n\t    (if (zero? x)\n\t\t(if (empty? result) [0] (reverse result))\n\t\t(recur (quot x r) (conj result (mod x r))))))","problem":137,"user":"4f066916535dcb61093f6c10"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [r []\n           x n]\n      (if (zero? x)\n        r\n        (recur (cons (mod x base) r)\n               (quot x base))))))","user":"580bd81ee4b0849f6811b711"},{"problem":137,"code":"#(loop [in %1 out []]\n   (if (and (zero? in) (not (empty? out)))\n     (reverse out)\n     (recur (quot in %2) (conj out (rem in %2)))))","user":"5895385fe4b00487982d5279"},{"problem":137,"code":"#((fn f [l r]\n              (let [o (quot r %2)\n                    k (conj l (mod r %2))]\n                (if (= 0 o)\n                  k\n                  (f k o)))) \n  '() %1)","user":"4dc986d0535d5973398f9285"},{"code":"(fn [n b]\n    (loop [digits (list (rem n b))      ; Initialised like this to handle the 0-case\n           n (quot n b)]\n      (if (< n 1)\n        digits\n        (recur (conj digits (rem n b)) (quot n b)))))","problem":137,"user":"50763574e4b0a894bb95bf3d"},{"problem":137,"code":"(fn db[n base]\n  (let [columns (map #(Math/pow base %) (reverse(range 7)))\n        spin (fn spin[n columns]\n               (if (empty? columns)\n                 '()\n                 (cons (quot n (first columns)) (spin (rem n (first columns)) (rest columns)))))]\n    (->>     columns\n             (spin n)\n             (map int)\n             (split-with zero?)\n             last\n             (#(if (empty? %) [0] %)))))","user":"5980f91ae4b021a7a535fddd"},{"problem":137,"code":"(fn clj137\n  [num base]\n  (let [fnum (iterate #(* % base) base)\n        base-candidate (reverse (concat [1] (take-while #(<= % num) fnum)))]\n    (cond\n      (= num 0) [0]\n      :else (loop [[x & xs] base-candidate n num res []]\n              (if\n                x (cond\n                    (= n 0) res\n                    (and (= n x) (= 1 (count xs))) (conj res (quot n x) 0)\n                    (>= n x) (recur xs (- n (* x (quot n x))) (conj res (quot n x)))\n                    (< n x) (recur xs n (conj res 0)))\n                res)))))","user":"550d9452e4b06e50f9beb15d"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [digits '()\n           n n]\n      (if (zero? n)\n        digits\n        (recur (conj digits (rem n base))\n               (int (/ n base)))))))","user":"551ed214e4b08d5046aa8a4d"},{"problem":137,"code":"(fn db [num base]\n  (loop [dividend num  \n         reminder (rem num base) \n         result []]\n    (if (< dividend base)\n      (conj result dividend)\n      (recur \n        (quot dividend base)\n        (rem  dividend base)\n        (cons (rem dividend base) result)))))","user":"5243e37ae4b076204b44fae3"},{"problem":137,"code":"(fn solution\n  ([number base] (if (< number base) [number] (solution '() number base)))\n  ([result decimal base]\n   (if (zero? decimal) result\n     (recur (conj result (rem decimal base)) (quot decimal base) base) )))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn digits [n b]\n    (if (zero? n)\n        [0]\n        (loop [rv '() n n]\n            (if (zero? n)\n                rv\n                (recur (cons (rem n b) rv) (quot n b))\n            )\n        )\n    )\n)","problem":137,"user":"527ba695e4b03e8d9a4a7596"},{"problem":137,"code":"(fn digits\n    ([n base] (digits n base '()))\n    ([n base acc]\n       (if (< n base)\n         (conj acc n)\n         (recur (quot n base) base (conj acc (rem n base))))))","user":"543d89dfe4b032a45b869350"},{"problem":137,"code":"#(if (= % 0) [0] (letfn [(f [[k]] [(quot k %2) (mod k %2)])] \n                          (->> (iterate f (f [%])) \n                                (take-while (fn [[v w]] (not= 0 v w)))\n                                (map second)\n                                (reverse))))","user":"5c379636e4b0d62ef62d9f76"},{"code":"(fn digits\n  ([n b] (digits n b []))\n  ([n b r]\n    (if (zero? n)\n      (if (empty? r) [0] r)\n      (recur (quot n b) \n              b \n              (cons (rem n b) r)))))","problem":137,"user":"4dab218f30acd6ed15482a68"},{"code":"(fn changes [num basis]\n  (let [d (int (/ num basis))\n        r (rem num basis)]\n    (cond\n      (= d 0) (list r)\n      (< d basis) (list d r)\n      :else (concat (changes d basis) (list r)))))","problem":137,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn [x b]\n\t\t(if (zero? x)\n\t\t  '(0)\n\t\t  (loop [n x r '()]\n\t\t\t(if (> n 0)\n\t\t\t  (recur (quot n b) (conj r (mod n b)))\n\t\t\t  r))))","problem":137,"user":"51f2851fe4b0210f90e7454b"},{"problem":137,"code":"(fn rebase [v b]\n  (if (zero? v) [0]\n    (loop [acc []\n           v v]\n      (if (zero? v) (reverse acc)\n        (let [d (int (/ v b))]\n          (recur (conj acc (- v (* d b))) d))))))","user":"537e745ae4b06839e8705ea6"},{"code":"(fn f \n  ([n r] (f n r r))\n  ([n r s]\n    (let [o (mod n r)\n          p (- n o)]\n      (conj\n        (if (> p 0)\n          (f p (* r s) s) [])\n        (/ o (/ r s))))))","problem":137,"user":"4e96557d535dbda64a6f6b43"},{"problem":137,"code":"(fn digit-base [num base]\n  (if (= (quot num base) 0)\n    [num]\n\t  (conj (digit-base (quot num base) base) (rem num base))))","user":"568f2059e4b0dcc4269f40df"},{"code":"(fn base-convert \n  ([n b] (base-convert n b ()))\n  ([n b c] (if (< n b)\n             (vec (cons n c))\n             (recur (int (/ n b)) b (cons (rem n b) c)))))","problem":137,"user":"52fc34cee4b047fd55837015"},{"problem":137,"code":"(fn repr [n base]\n  (if (< n base)\n    [n]\n    (conj (repr (quot n base) base) (mod n base))))","user":"5e471203e4b043cd24807a2a"},{"problem":137,"code":"(fn [n b]\n  (loop [n n o '()]\n    (let [x (quot n b)\n          y (rem n b)\n          o (conj o y)]\n      (if (= x 0)\n        o\n        (recur x o)))))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":137,"code":"#(loop[value %1 b %2 r ()]\n   (if (< value b) (vec (conj r value))\n    (recur (quot value b) b (conj r (rem value b)))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           result []]\n      (if (zero? n)\n        result\n        (recur (int (/ n b)) (cons (rem n b) result))))))","problem":137,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn db [fst n b]\n   (if (= n 0)\n     (if fst [0] [])\n     (conj (db false (quot n b) b) (rem n b))))\ntrue","problem":137,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn [x b]\n    (loop [n x\n           a '()]\n      (if (zero? n)\n        (if (empty? a) [0] a)\n        (recur (quot n b) (conj a (mod n b))))))","problem":137,"user":"51b3f109e4b0f094dd986fa9"},{"code":"(fn [x b]\n    (loop [res ()\n           n x]\n      (if (zero? (quot n b))\n        (cons n res)\n        (recur (cons (mod n b) res)\n               (quot n b)))))","problem":137,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":137,"code":"(fn numbers [n base]\n  (let [last-digit (rem n base)\n        next-n     (/ (- n last-digit) base)]\n    (cond\n      (= 0 n) [0]\n      (< next-n base) [next-n last-digit]\n      :else (conj (numbers next-n base) last-digit))))","user":"586bc870e4b01531a375e964"},{"problem":137,"code":"#(loop [r %2 v [(mod % %2)]] (if (> r %) v (recur (* r %2) (cons (mod (int (/ % r)) %2) v))))","user":"53b2a7f8e4b047364c04449c"},{"code":"(fn convert-digit [n base]\n  (loop [result '() n' n]\n    (if\n      (zero? (quot n' base))\n      (conj result (rem n' base))\n      (recur (conj result (rem n' base)) (quot n' base)))))","problem":137,"user":"5201ada5e4b0b2e020a18f14"},{"code":"(fn rad [n base]\r\n  (let [maxk (Math/floor (/ (Math/log n) (Math/log base))),\r\n        rad2 (fn [m ret k]\r\n               (if (= k -1)\r\n                 ret\r\n                 (let [x (Math/pow base k),\r\n                       r_k (quot m x)]\r\n                   (recur (- m (* x r_k)) (conj ret r_k) (- k 1))))),]\r\n    (if (zero? n) [0] (rad2 n [] maxk))))","problem":137,"user":"4f62b29ce4b0defedf855fd9"},{"problem":137,"code":"(fn [n b]\n  (loop [ret [] num n]\n    (let [q (quot num b) r (rem num b)]\n      (if (= q 0)\n        (reverse (conj ret r))\n        (recur (conj ret r) q)))))","user":"53d86564e4b0e771c302546b"},{"code":"(fn [n b]\n  (loop [n n ret []]\n    (if (= n 0)\n      (if (empty? ret) [0] ret)\n      (recur (quot n b) (concat [(rem n b)] ret)))))","problem":137,"user":"4f7e29dde4b06e829148e1ca"},{"problem":137,"code":"(fn digits-base [n r]\n  (if (zero? n)\n    [0]\n    (let [pwrs (reverse (take-while #(<= % n) (map (fn [e] (Math/pow r e)) (range))))]\n    (loop [[p & others :as pwrs] pwrs\n           n n\n           acc []]\n      (if (empty? pwrs)\n        acc\n        (recur others (rem n p) (conj acc (int (quot n p)))))))))","user":"5c950334e4b048ec896c5a44"},{"problem":137,"code":"(fn nx[v b] (\n             if (< v b)\n              [(mod v b)]\n             (conj (nx (quot v b) b) (mod v b))\n             ))","user":"596f6683e4b069c0a1a19877"},{"problem":137,"code":"(fn [n b]\n    (let [bits    (take-while (partial >= n) (map #(.pow (biginteger b) %) (range)))\n        nbits   (count bits)\n        b2n     (fn b2n ([bb] (reduce + (map #(* (second %) (.pow (biginteger b) (first %)))\n                                             (map-indexed vector (reverse bb)))))\n                        ([bb n] (reduce + (map #(* (second %) (.pow (biginteger b) (first %)))\n                                               (map-indexed vector (reverse (into bb (take (- n (count bb)) (repeat 0)))))))))]\n      (if (not= 0 n)\n          (reduce   (fn [bits number]\n                        (conj bits (quot (- n (b2n bits nbits)) (.pow (biginteger b) (- nbits (count bits) 1) ))))\n                    []\n                  bits)\n          [0])))","user":"544e8369e4b0e39780006987"},{"problem":137,"code":"(fn f [num base]\n  (loop [num num\n         acc ()]\n    (if (< num base)\n      (cons num acc)\n      (recur (quot num base) (cons (rem num base) acc)))))\n\n;(fn b [n c] \n;  (if (< n c) \n;    [n] \n;    (conj (b (quot n c) c)\n;          (rem n c))))","user":"54d341f7e4b0e8a36923e603"},{"code":"(fn [n b]\n  (if (zero? n) '(0)\n      (loop [r '() n n]\n        (if (zero? n) r\n            (recur (cons (mod n b) r) (quot n b))))))","problem":137,"user":"4f2baf1ae4b0d6649770a04c"},{"problem":137,"code":"(fn f [n b]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           r []]\n      (if (zero? n)\n        (vec (reverse r))\n        (recur (quot n b) (conj r (rem n b)))))))","user":"585dbe41e4b0f14aab7c879f"},{"problem":137,"code":"(fn f [x b]\n  (let [y (int (/ x b))]\n    (conj (if (zero? y) [] (f y b)) (mod x b))))","user":"5799ff45e4b05b1deef9add1"},{"code":"(fn to-base [n b]   \n \t(loop [n n sum ()] \n \t\t(if (zero? n) \n \t\t\t(if (empty? sum ) '(0) sum )\n \t\t\t(recur (int (/ n b )) (conj sum (mod n b))  ) )))","problem":137,"user":"518644bce4b0da5a5be3baca"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [digit-seq n acc []]\n     (if (zero? digit-seq)\n       acc\n       (recur\n         (quot digit-seq base)\n         (cons (rem digit-seq base) acc))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"code":"(fn get-digits [n radix]\n\t(if (> radix n)\n\t\t[0]\n\t\t(loop [x n, result []]\n\t\t\t(if (zero? x)\n\t\t\t\t(reverse result)\n\t\t\t\t(recur (quot x radix) (conj result (rem x radix)))))))","problem":137,"user":"52cf084ce4b07d0d72b27399"},{"problem":137,"code":"(fn [n b]\n    (if (= n 0)\n      [0]\n      (loop [l (list) n n]\n        (if (= n 0)\n          l\n          (recur (conj l (mod n b)) (bigint (/ n b)))\n          )\n        )\n      )\n    )","user":"54b90836e4b0ed20f4ff6e9d"},{"problem":137,"code":"; 137\n(fn base [num_to_convert, base]\n\t(loop [remaining num_to_convert, result []] ; 10, [] / 1, [0] / 0, [0, 1]\n\t\t(let [q (quot remaining base)\n\t\t\tm (mod remaining base)\n\t\t\t]\n\t\t\t(if (= q 0)\n\t\t\t\t(reverse (conj result m))\n\t\t\t\t(recur q (conj result m))\n\t\t\t)\n\t\t)\n\t)\n)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [n b] (if (zero? n) '(0)\n  (->> n (iterate #(quot % b)) (take-while pos?) (map #(rem % b)) reverse)))","problem":137,"user":"533ab9abe4b0e30313ee6cbf"},{"code":"(fn [n base]\n  (loop [n n, ret []]\n    (if (zero? n)\n      (if (empty? ret) [0] ret)\n        (recur (quot n base) (cons (mod n base) ret)))))","problem":137,"user":"4ee26f01535d10e5ff6f5368"},{"code":"(fn [n b] \n   (loop [n n, r '()] \n     (if \n       (zero? n)\n       (if (empty? r) [0] r)\n       (recur (int (/ n b)) (cons (rem n b) r)))))","problem":137,"user":"4eabb245535d7eef30807319"},{"problem":137,"code":"(fn [ thenum newbase ]\n    (loop  [num   thenum\n            res   [] ]\n      (let [dig  (mod num newbase)\n            next (int (/ num newbase))]\n        (if (= next 0) (concat [dig] res)\n            (recur next (concat [dig] res))))))","user":"57aa290de4b0b8559636fc65"},{"problem":137,"code":";(fn my-d-b [dig base]\n;  (letfn [(inner-db [d b]\n;            (if (zero? d) \n;                (vector 0)\n;                (conj (inner-db (quot d b) b)\n;                      (mod d b))))]\n;    (->> (inner-db dig base)\n;         (#(if (> (count %) 1) \n;               (rest %) \n;               %)))))\n\n(fn my-digit-base [d b]\n  (conj (if (< d b) \n            [] \n            (my-digit-base (quot d b) b))\n        (mod d b)))","user":"581b19e7e4b04b46fc4b0ec4"},{"code":"(fn [n base]\n   (reverse\n    (loop [n n, l []]\n      (if (= n 0)\n        (if (empty? l) [0] l)\n        (recur\n         (quot n base)\n         (conj l (mod n base)))))))","problem":137,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn reductor\n  ([n b]\n     (if (= n b) [1 0]\n         (letfn [(max-base [n b]\n                   (loop [v 1\n                          i 0]\n                     (if (> v n)\n                       (- i 1)\n                       (recur (* v b) (+ i 1)))))]\n           (reductor n b (max-base n b) []))))\n  ([n b start bits]\n     (println n b start bits)\n     (letfn [(pow [b e]\n               (apply * (repeat e b)))]\n       (let [factor (int (/ n (pow b start)))\n            diff (* (pow b start) factor)\n            nn (- n diff)]\n        (cond\n         (= nn 0)\n         (conj bits factor)\n\n         (< nn 0)\n         (recur n b (- start 1) bits)\n\n         :else\n         (recur nn b (- start 1) (conj bits factor)))))))","problem":137,"user":"532b43c3e4b09d4e7a9b5531"},{"problem":137,"code":"(fn dnb [n base]\n  (if (< n base)\n    [n]\n    (loop [left n\n           acc  []]\n      (if (= left 0)\n        (reverse acc)\n        (recur (quot left base) (conj acc (rem left base)))))))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn dig [n b] (if (< n b) [n] (conj (dig (quot n b) b) (rem n b))))","problem":137,"user":"4feada56e4b0140c20fb9c11"},{"problem":137,"code":"(fn digits-base [n base]\n   (loop [n n\n          ans ()]\n     (if (zero? n)\n       (if (empty? ans)\n         '(0)\n         ans)\n       (recur (int (/ n base)) (conj ans (mod n base))))))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":137,"code":"(fn [n base]\n      (->>\n        (list (mod n base) (quot n base))\n        (iterate #(list (mod (second %) base)\n                        (quot (second %) base)))\n        (split-with #(not= (second %) 0))\n        ((fn [p] (concat (first p) (list (first (second p))))))\n        (map first)\n        reverse))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":137,"code":"#(loop [res [] num %1 base %2]\n   (let [newres (concat res [(mod num base)]) newNum (quot num base)]\n     (if (> num 0)\n       (recur newres newNum base)\n       (reverse (if (> (count newres) 1) (drop-last 1 newres) newres)))))","user":"57986b76e4b039eba2ecb116"},{"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj\n      (f (quot n b) b)\n      (mod n b))))","problem":137,"user":"4db85bdd535d1e037afb218d"},{"code":"(fn [n b]\n    (cond\n     (= n 0) [0]\n     (= n b) [1 0]\n     :else\n     (let [digits (reverse (take-while #(< % n) (map (fn [x] (Math/pow b x)) (range))))]\n       (reverse\n        (loop [[d & ds] digits acc [] rem n]\n          (if (not d) acc\n              (recur ds (cons (int (/ rem d)) acc) (mod rem d))))))))","problem":137,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":137,"code":"(fn digits-with-base [n b]\n  (if (= 0 n) [0]\n    (loop [result () queue n]\n      (if (= 0 queue)\n        result\n        (recur\n          (conj result (mod queue b))\n          (quot queue b))))))","user":"58247423e4b051871117bec5"},{"code":"(fn d [x b] \n  (if (< x b) \n    [x] \n    (conj (d (quot x b) b) (mod x b))))","problem":137,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n (reverse (map second\n       (rest\n        (take-while #(not= % [0 0])\n                    (iterate\n                     (fn [[q r]] [(quot q b) (rem q b)])\n                     [n 0]))))))\n)","problem":137,"user":"4fa340b4e4b081705acca18c"},{"problem":137,"code":"(fn [num base] \n  (->> (map #(mod % base) (take-while #(not= 0 %) (iterate #(quot % base) num)))\n       (#(if (empty? %) [0] (reverse %)))))","user":"596a66cde4b069c0a1a19803"},{"code":"(fn to-base [n base]\n  (loop [n n, acc nil]\n    (if (zero? n) (or acc [0])\n      (recur (quot n base) (cons (rem n base) acc)))))","problem":137,"user":"4f6160a7e4b0defedf855fbe"},{"code":"(fn [n b]\n  (letfn [(digits  [n b]\n             (if (= n 0) []\n                 (conj (digits (quot n b) b) (rem n b))))]\n    (let [r (digits n b)]\n      (if (empty? r) [0] r))))","problem":137,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":137,"code":"(fn digits [n base]\n  (if (zero? n) [0]\n    (loop [digits []\n           n      n]\n      (if (zero? n) digits\n        (recur (cons (mod n base) digits) (int (/ n base)))))))","user":"553dd883e4b0a04f792994e6"},{"problem":137,"code":"(fn [N B]\n    (if (zero? N)\n      [0]\n      (loop [Ret [] N N]\n        (if (zero? N)\n          (into [] (reverse Ret))\n          (recur\n            (conj Ret (rem N B))\n            (quot N B)\n          )\n        )\n      )\n    )\n  )","user":"5d4a6c6ce4b0776584bd6f22"},{"code":"(fn [n b]\r\n  \t(let [d (fn [u v] (/ (- u (mod u v)) v)) ]\r\n\t\t\t(loop [ x [] y (mod n b) z (d n b) ]\r\n\t\t\t \t(cond\r\n\t\t\t \t\t(= n 0) [0]\r\n\t\t\t \t\t(= b 0) [0]\r\n\t\t\t \t\t(= z 1) (cons z (cons  y x) )\r\n\t\t\t \t\t(= z 0) (cons y x)\r\n\t\t\t \t\t:else (recur (cons y x) (mod z b) (d z b))))))","problem":137,"user":"4ecf1f51535d1f5ad70dba3a"},{"problem":137,"code":"(fn [x b]\n  (letfn [(f [r a]\n            (if (< r b)\n              (cons r a)\n              (recur (quot r b) (cons (mod r b) a))))]\n    \n    (f x ())))","user":"5791d259e4b0ebec4cfb75c0"},{"problem":137,"code":"(fn rebase [n b] (if (zero? (quot n b)) [n]\n   (conj (rebase (quot n b) b) (mod n b))))","user":"55a74d46e4b09e57187da2a3"},{"problem":137,"code":"(fn decimal->digits\n  [number output-base]\n  (if (zero? number)\n    (list 0)\n  (loop [digits nil\n         num number]\n    (if (zero? num)\n      digits\n      (recur (conj digits (mod num output-base)) (quot num output-base))))))","user":"5658d775e4b00d3155796114"},{"code":"(fn d-b [n r]\n  (loop [ x n  acc '()] \n     (let  [q (quot x r )]\n       (if (zero? q)\n         (conj acc (rem x r))\n         (recur q (conj acc (rem x r)))))))","problem":137,"user":"50783762e4b0fc74642bff67"},{"problem":137,"code":"(fn [number base]\n  (if (zero? number)\n    [0]\n    (loop [number number\n           acc ()]\n      (if (zero? number)\n        acc\n        (recur (quot number base)\n               (conj acc (mod number base)))))))","user":"4eda7cc3535d10e5ff6f530e"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         res ()]\n    (if (zero? n)\n      (if (empty? res) [0] res)\n      (recur (quot n base) (cons (rem n base) res)))))","user":"55ccdc6be4b0e31453f64a18"},{"problem":137,"code":"(fn [n b] \n  (if (= n 0)\n    '(0) \n    (loop [n n, res ()]\n      (if (= n 0)\n        res\n        (recur (quot n b) (conj res (rem n b)))))))","user":"5aa998c6e4b0d174b936c8e5"},{"problem":137,"code":"(fn digits-and-bases [number base]\n  (if (zero? number)\n    [0]\n    (loop [result []\n           curr-number number]\n      (if (zero? curr-number)\n        (reverse result)\n        (recur (conj result\n                     (mod curr-number base))\n               (int (/ curr-number base)))))))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":137,"code":"(fn [n base]\n  (let [p (fn p [n base]\n            (if (= n 0)\n              []\n              (concat  (p (quot n base) base)[(mod n base)])))\n        r (p n base)]\n    (if (empty? r)\n      [0]\n      r)))","user":"53664e3be4b0243289761e74"},{"code":"(fn [n b]\n  (if (zero? n) '(0)\n   (loop [n n r '()]\n     (if (zero? n) r\n       (recur (quot n b) (conj r (rem n b)))))))","problem":137,"user":"4deff9f9535d08e6dec9fe15"},{"problem":137,"code":"(fn digits [n b]\n  (if (= n 0)\n    '(0)\n    (->> n\n         (iterate #(quot % b))\n         (take-while pos?)\n         (map #(mod % b))\n         (reverse))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn db [n b] (if (< n b) [n] (concat (db (quot n b) b) [(mod n b)])))","problem":137,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":137,"code":"(fn [n b]\n   (reverse (loop [n n, result []]\n              (cond (and (= n 0) (not (empty? result))) result\n                    :else (recur (int (Math/floor (/ n b))) (into result (list (mod n b))))))))","user":"52fac708e4b047fd55836fff"},{"code":"#(loop [n % d ()]\n     (if (> %2 n)\n       (conj d n)\n       (recur (quot n %2) (conj d (rem n %2)))))","problem":137,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn [n b]\n  (->> (iterate (fn [[c n]]\n                  [(conj c (mod n b)) (quot n b)])\n                [(list (mod n b)) (quot n b)])\n       (drop-while #(not (zero? (second %))))\n       ffirst))","problem":137,"user":"500d8c49e4b07ccb9a7ddb00"},{"code":"(fn digits [n b]\n  (loop [n n b b d nil]\n    (if (= 0 n) '(0)\n        (let [q (quot n b)\n              r (rem n b)]\n          (if (not= 0 q)\n            (recur q b (cons r d))\n            (cons n d))))))","problem":137,"user":"4ebe766d535dfed6da9c6d94"},{"problem":137,"code":"(fn [num base]\n        (loop [num num\n               res '()]\n          (if (zero? num)\n            (if (empty? res) [0] (vec res))\n            (recur (quot num base) \n                   (cons (rem num base) res)))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":137,"code":"(fn [n base]\n  (loop [x n ret '()]\n    (if (zero? (quot x base))\n      (conj ret (rem x base))\n      (recur (quot x base) (conj ret (rem x base))))))","user":"5071b614e4b0e3170b5a867d"},{"code":"(fn [ret n base]\n  (if (= n 0)\n    (if (= ret '()) '(0) ret)\n    (recur (conj ret (rem n base)) (quot n base) base))) '()","problem":137,"user":"50bfe725e4b080409b860f26"},{"code":"#(if (zero? %1)\n  [0]\n  (loop [n %1 ds []]\n    (if (zero? n)\n      ds\n      (recur (quot n %2) (cons (mod n %2) ds))\n    )\n  )\n)","problem":137,"user":"507eddf4e4b06ce648bcdbfa"},{"code":"(fn f\r\n  ([n b] (f [(mod n b)] (quot n b) b))\r\n  ([l n b]\r\n   (if (zero? n)\r\n     l\r\n     (recur (cons (mod n b) l)\r\n            (quot n b)\r\n            b))))","problem":137,"user":"4f038355535dcb61093f6b04"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n  (loop [n n res []]\n    (if (zero? n)\n      (reverse res)\n      (recur (quot n base) (conj res (rem n base)))))))","user":"562cb7cfe4b0a45d2ff83009"},{"problem":137,"code":"(fn [n b] (if (= n 0) [0] (into [] (reverse (map #(mod % b) (for [x  (iterate #(int (/ % b)) n) :while (> x 0)] x))))))","user":"58950f29e4b00487982d5270"},{"problem":137,"code":"(fn __\n  ([in base] (if (zero? in)\n               [0]\n               (__ in base [])))\n  ([in base acc]\n   (if (zero? in)\n       acc\n       (recur (quot in base) base (cons (mod in base) acc)))))","user":"55916764e4b0604b3f94d57b"},{"code":"#(let[q(quot % %2) l(cons(rem % %2)%&)](case q 0 l(recur q %2 l)))","problem":137,"user":"4ff67852e4b0678c553fc37e"},{"problem":137,"code":"(fn [n base]\n  (letfn [(digit-seq [n]\n            (lazy-seq\n              (let [next-n (quot n base)]\n                (cons (rem n base)\n                      (when-not (zero? next-n)\n                        (digit-seq next-n))))))]\n    (-> n digit-seq reverse)))","user":"5ab16992e4b073f1774425c4"},{"problem":137,"code":"(fn [n b]                                                                                                   \n  (if (= n 0) [0]                                                                                                       \n    (loop [c n res []]                                                                                                  \n      (if (= c 0)                                                                                                       \n        res                                                                                                             \n        (recur (quot c b) (cons (rem c b) res))                                                                         \n        ))))","user":"56d91a53e4b0ea9b8538f7ee"},{"code":"(fn dbs [d b]\n  (loop [d d k ()]\n    (if (< d b) (conj k d)\n    (recur (quot d b) (conj k (mod d b))))))","problem":137,"user":"4fdb02aae4b05e33b9224f56"},{"problem":137,"code":"(fn [n b]\n  (if (< n b)\n    [n]\n  (reverse (loop [n n\n         acc []]\n    (if (= n 0)\n    acc\n    (recur (quot n b) (conj acc (mod n b))))\n  )\n         )))","user":"527dc2aee4b0757a1b17138d"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n    (let [log (int (Math/pow b (int (/ (Math/log n) (Math/log b)))))]\n      (loop [log log\n             r []\n             n n]\n        (if (< log 1)\n          r\n          (recur (int (/ log b)) (concat r [(int (/ n log))]) (mod n log)))))))","user":"5cf6522be4b0b71b1d808a58"},{"problem":137,"code":"(fn f137 [n b]\n(loop [n n b b ac `()]\n  (let [q (quot n b), r (rem n b)]\n    (if (zero? q) \n      (conj ac r)\n      (recur q b (conj ac r))))))","user":"51f81925e4b09be9c177e526"},{"problem":137,"code":"(fn to-base [x base]\n   (if (< x base) [x]\n       (conj (to-base (quot x base) base)\n             (rem x base))))","user":"5d4b2155e4b0776584bd6f28"},{"problem":137,"code":"(fn [x y]\n  (loop [n x l '()]\n    (if (< n y)\n      (conj l n)\n      (recur (quot n y) (conj l (rem n y))))))","user":"4f2acb29e4b0d6649770a040"},{"problem":137,"code":"(fn __ [n b]\n  (if (zero? n) '(0) \n    (loop [v n acc '()]\n      (if (zero? v)\n        acc\n        (recur (quot v b) (conj acc (mod v b)))))))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":137,"code":"(fn [nn b]\n  (if (= nn 0)\n    [0]\n    (loop [n nn\n           acc []]\n      (if-not (zero? n)\n        (recur (quot  n b) (conj acc (mod n b)))\n        (reverse acc)))))","user":"532418f3e4b09d4e7a9b54d8"},{"code":"(fn [n b]\n  (loop [acc '()\n         m n]\n    (let [nxt (conj acc (mod m b))]\n      (if (< m b)\n        nxt\n        (recur nxt (int (/ m b)))))))","problem":137,"user":"51aa2b4fe4b04e3dc0c27b21"},{"problem":137,"code":"(fn digits [n base]\n  \t\t\t(if (>= n base)\n    \t\t\t(concat (digits (int (/ n base)) base) [(mod n base)])\n    \t\t\t\t[n]))","user":"591ac8ece4b09b4ee5954bdd"},{"code":"(fn conv [x b]\n  (if (< x b)\n      [x]\n      (conj (conv (quot x b) b) (rem x b))))","problem":137,"user":"4ed94d69535d10e5ff6f5303"},{"problem":137,"code":"(fn base-n [n b]\n  (loop [res [] n n]\n    (if (< n b) (conj res n)\n        (recur (cons (rem n b) res) (quot n b)))))","user":"575b3e9be4b02ea11479935b"},{"problem":137,"code":"(fn [n b]\n         (loop [result []\n                number n]\n           (if (= (quot number b) 0) (into [(rem number b)] result)\n               (recur (into [(rem number b)] result) (quot number b)))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":137,"code":"(fn t ([nu, bas] (t nu bas [])) ([nu bas li] (if (< nu bas) (cons nu li) (recur (quot nu bas) bas (cons (mod nu bas) li)))))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":137,"code":"(fn base [v b]\n  (loop [v v l (list)]\n    (let [rst (int (/ v b)) digit (mod v b)]\n      (if (== 0 rst)\n        (cons digit l)\n        (recur rst (cons digit l))))))","user":"562add6de4b00e49c7cb4834"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n  \t(loop [i n r '()]\n      (if (zero? i) r\n   \t   (recur (quot i b) (conj r (rem i b)))))))","user":"5590e55de4b0277789237676"},{"code":"(fn digits[x base]\n  (letfn [(impl [x base dd]\n            (if (zero? x) dd\n                (recur (quot x base) base (cons (mod x base) dd))))]\n    (if (zero? x) (list 0)\n        (impl x base nil))))","problem":137,"user":"50fa01bce4b07934dda8b0ba"},{"problem":137,"code":"#(if (= %1 0) [0]\n      (loop [n %1\n             r []]\n        (if (= n 0)\n          r\n          (recur (int (/ n %2)) (cons (mod n %2) r)))))","user":"56b6e354e4b0982f16b37e41"},{"problem":137,"code":"(fn [n b] (loop [n n v ()] (let [d (rem n b) r (int (/ n b))] (if (zero? r) (vec (conj v d)) (recur r (conj v d))))))","user":"54f0d3fde4b024c67c0cf8a6"},{"code":"(fn [d b]\n  (last\n    (take-while\n      identity\n      (iterate\n        (fn [[l & r :as v]]\n          (println \"***\" v)\n          (when (>= l b)\n            (let [m (mod l b)]\n              (into [(/ (- l m) b) m] r))))\n        [d]))))","problem":137,"user":"4db85282535d1e037afb218a"},{"problem":137,"code":"#(loop [x % c '()] (if (< x %2) (cons x c) (recur (quot x %2) (cons (mod x %2) c))))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn[n d]\n (loop [ ret '() x n]\n   (println x)\n   (if(zero? x) \n      (if(empty? ret) '(0) ret)\n      (recur (conj ret (rem x d)) (quot x d)))))","problem":137,"user":"50b25f2ce4b03ea88043355f"},{"code":"(fn [num base]\n  (loop [q (quot num base) rm (rem num base) r [rm]]\n   (if (zero? q) r\n     (recur (quot q base) (rem q base) (cons (rem q base) r))\n   )\n  )\n)","problem":137,"user":"522eba30e4b01cdb292c5f0e"},{"problem":137,"code":"#(cond\n  (= %2 10) [1 2 3 4 5 0 1]\n  (= %2 11) [0]\n  (= %2 2) [1 0 0 1]\n  (= %1 %2) [1 0]\n  (= %2 42) [16 18 5 24 15 1])","user":"5e8ce2fee4b0cb0169546328"},{"code":"(fn f [n b]\n  (if (= (quot n b) 0)\n      [(rem n b)]\n      (conj (f (quot n b) b) (rem n b))))","problem":137,"user":"5054c7e1e4b0b1b9d1860eb2"},{"problem":137,"code":"(fn digit-sequence\n  ([num base] (digit-sequence num base []))\n  ([num base coll]\n   (if (>= num base)\n     (digit-sequence (quot num base) base (cons (rem num base) coll))\n     (cons num coll))))","user":"5379306fe4b06839e8705e50"},{"problem":137,"code":"(fn [num base]\n  (loop [acc (list (mod num base))\n         num-left (int (/ num base))]\n    (if (zero? num-left)\n      acc\n      (recur (conj acc (mod num-left base))\n             (int (/ num-left base))))))","user":"5dfb2e2ae4b0a607a9a45cd6"},{"code":"(fn convert [x base]\n  (if (< x base)\n    [x]\n    (concat (convert (quot x base) base)\n            (list (mod x base)))))","problem":137,"user":"52e17e66e4b09f7907dd1423"},{"problem":137,"code":"(fn ! [n b]\n  (letfn [(\n           aux [n b c] \n           (if (zero? n) c\n              (aux (quot n b) b (cons (rem n b) c))\n             )\n           )]\n    (let [ta (aux n b [])]\n      (if (empty? ta) [0] ta)\n      )\n    ))","user":"52faec2ee4b047fd55837004"},{"code":"(fn digits [x base]\n  (if (zero? x)\n    [0]\n    (loop [x x\n           result []]\n      (if (zero? x)\n        result\n        (recur (quot x base) (cons (mod x base) result))))))","problem":137,"user":"5220bc0fe4b0e6a83c8925a7"},{"code":"(fn [n b]\n  (cond (= n 0) [0]\n\t\t    :else (loop [num n l []]\n\t\t\t          (if (= num 0)\n\t\t\t              (reverse l)\n\t\t\t              (recur (quot num b) (conj l (rem num b)))))))","problem":137,"user":"4db045b5838c48654951d9be"},{"problem":137,"code":"(fn digits \n  [x base]\n  {:pre [(not (neg? x))]}\n  (loop [x x\n         digs (list)]\n    (if (< x base)\n      (into [] (conj digs x))\n      (recur (quot x base) (conj digs (mod x base))))))","user":"539e717fe4b0ca733b974488"},{"code":"(fn [n rdx]\n   (loop [q (quot n rdx)\n          r (rem n rdx)\n          a []]\n     (if (zero? q)\n       (cons r a)\n       (recur (quot q rdx)\n         (rem q rdx)\n         (cons r a)))))","problem":137,"user":"5164867fe4b003cf19fdde3e"},{"problem":137,"code":"#(loop [n %1 b %2 r '()]\n        (if (= n 0)\n          (vec (if (seq r) r [0]))\n          (recur (quot n b)\n                 b\n                 (conj r (mod n b)))))","user":"58731176e4b01531a375ea2a"},{"code":"#(letfn [(get-digits [acc n] (if (zero? n) acc (recur (cons (mod n %2) acc) (quot n %2))))]\n   (if (zero? %1) [0] (get-digits '() %1)))","problem":137,"user":"52dd4fb4e4b09f7907dd13df"},{"problem":137,"code":"(fn base-in [n base]\n               (if (= 0 n)\n                 [0] \n                 (loop [remaining n ans []]\n                   (if (= 0 remaining)\n                     ans\n                     (recur (quot remaining base) (cons (rem remaining base) ans))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":137,"code":"(fn [n b] (if (zero? n) \n               [0] \n               (second (reduce (fn [[n acc] b] (let [v (int (/ n b))] [(- n (* v b)) (conj acc v)])) [n []] (reverse (take-while #(<= % n) (cons 1 (iterate #(* b %) b))))))))","user":"5310e968e4b08068f379ecdd"},{"problem":137,"code":"(fn b [x y]\n (if (= x 0)\n  [0]\n  ((fn bb [x y]\n \t(if (= x 0)\n   \t\t[]\n   \t\t(conj (bb (quot x y) y) (rem x y))\n \t)\n  ) x y)\n )\n)","user":"54078851e4b0addc1aec66bd"},{"code":"(fn db4 [n b]\n  (loop [n n,\n         q (quot n b),\n         result []]\n    (if (< n b)\n      (reverse (conj result n))\n      (recur (quot n b) (quot q b) (conj result (rem n b))))))","problem":137,"user":"512474ede4b02c3f2a072cce"},{"code":"(fn conv-base [x base]\n  (loop [acc () x' x] \n    (if (zero? x')\n      (if (empty? acc) '(0) acc)\n      (recur (conj acc (rem x' base)) (quot x' base)))))","problem":137,"user":"531c0619e4b08068f379ed98"},{"code":"#(if (= % 0) [0] \r\n     (reverse\r\n       ((fn f [n b]\r\n          (let [n1 (Math/floor (/ n b))\r\n                r (- n (* b n1))]\r\n            (if (> n 0) (cons r (lazy-seq (f n1 b)) ) nil))) % %2)))","problem":137,"user":"4e513758535dc968683fc4f3"},{"code":"(fn [n d]\n  (if (zero? n) '(0)\n      (loop [a n,r '()]\n\t       (if (zero? a) r\n\t\t   (recur (quot a d) (conj r (rem a d)))))))","problem":137,"user":"4ec5d62c535d6d7199dd36ba"},{"code":"(fn [n base]\n  (loop [remainder n\n          acc ()]\n    (let [digit (mod remainder base)]\n      (if (zero? remainder)\n        (if (zero? n) '(0) acc)\n        (recur \n          (/ (- remainder digit) base) \n          (cons digit acc))))))","problem":137,"user":"4fba7d1ee4b081705acca2e0"},{"problem":137,"code":"(fn [x b]\n  (if (= x 0)\n    [0]\n    (let [n (int (java.lang.Math/floor (/ (java.lang.Math/log x) (java.lang.Math/log b))))]\n      (loop [i n s [] r x]\n        (if (< i 0)\n          s\n          (let [d (int (java.lang.Math/floor (/ r (java.lang.Math/pow b i))))]\n            (recur (dec i)\n                   (conj s d)\n                   (- r (* d (java.lang.Math/pow b i))))))))))","user":"54cad59ee4b057c6fda3a26e"},{"problem":137,"code":"(fn [n base]\n    (if (zero? n) [0]\n        (loop [result '()\n               n n]\n          (if (zero? n) result\n              (recur (cons (rem n base) result) (quot n base))))))","user":"5d236215e4b02ea6f0fb6a09"},{"code":"(fn digs-bases [n base]\n  (loop [n n\n         acc '()]\n    (if (zero? n)\n      (if (empty? acc) [0] acc)\n      (recur (quot n base) (conj acc (mod n base))))))","problem":137,"user":"511e763ce4b03e81d390ac29"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         accum '()]\n    (if (< n b)\n      (conj accum n)\n      (recur (quot n b)\n             (conj accum (rem n b))))))","user":"5712854ce4b07c98581c3a89"},{"code":"(fn [n b]\r\n  (loop [r '(), n n]\r\n    (if (zero? n)\r\n      (if (empty? r) [0] r)\r\n      (recur (conj r (mod n b)) (quot n b)))))","problem":137,"user":"509c03f3e4b085ae113522a8"},{"code":"(fn basec [n b]\n  (loop [num n conv (list)]\n    (let [q (quot num b)\n          r (rem num b)] \n      (if (zero? q)\n        (conj conv r)\n        (recur q (conj conv r))))))","problem":137,"user":"5003deb9e4b0678c553fc445"},{"problem":137,"code":"(fn convert-to-base [number base]\n  (if (= number 0)\n    [0]\n    (loop [result []\n           current number\n           last-rem nil]\n      (if (or (and (< current base) (= last-rem 0)) (= current 0))\n        (vec\n          (reverse\n              (if (not= current 0)\n                 (conj result current)\n                result)))\n        (let [remainder (mod current base)]\n          (recur (conj result remainder) (quot current base) remainder))))))","user":"57b9fb56e4b0fbc9809a27fa"},{"problem":137,"code":"(fn [n basis]\n  (letfn [(to-basis [n basis]\n                    (println n)\n                    (if (> basis n) (cons n '())\n                      (cons (rem n basis)\n                            (to-basis (int (/ n basis)) basis))))]\n    (reverse (to-basis n basis))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn changebase [n b]\n\t(loop [q (quot n b) r (rem n b) sol (conj '() r)]\n\t\t(if (zero? q)\n\t\t\tsol\n\t\t\t(recur (quot q b) (rem q b)(conj sol (rem q b))))))","problem":137,"user":"4fb804f7e4b081705acca2d6"},{"problem":137,"code":"(fn [number base]\n  (if (= number 0) '(0)\n    (loop [n number\n           ans '()]\n      (if (> n 0)\n        (recur (quot n base) (conj ans (rem n base)))\n        ans\n      )\n    )\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"code":"(fn [number base]\n  (case number\n    0 [0]\n    ((fn digs [n]\n       (if (zero? n) [] (conj (digs (quot n base)) (mod n base))))\n         number)))","problem":137,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn [number, base]\n  (loop\n      [number (int number), result []]\n    (if\n      (= 0 (quot number base))\n      (cons (rem number base) result)\n      (recur\n        (int (quot number base))\n        (cons (rem number base) result)))))","problem":137,"user":"4f5c0549e4b0030a34fb2b1a"},{"problem":137,"code":"(fn [numb base]\n  (letfn\n      [(go [n ds]\n           (let [q (quot n base)\n                 r (rem n base)]\n             (if (= 0 q)\n               (cons r ds)\n               (go q (cons r ds)))))]\n    (go numb [])\n  ))","user":"53ef7f77e4b0742d9025b0ce"},{"code":"(fn [num base]\n  (if (zero? num) \n    [0]\n    (loop [num num res nil]\n      (if (zero? num)\n        res\n        (recur (quot num base) (cons (rem num base) res))))))","problem":137,"user":"4dca8b6d535d5973398f9288"},{"code":"(fn [num base]\r\n  (if (= num 0) [0]\r\n    (loop [acc [], n num]\r\n      (if (= n 0)\r\n          (reverse acc)\r\n          (let [m (mod n base)]\r\n            (recur (conj acc m) (/ (- n m) base)))))))","problem":137,"user":"4fb37882e4b081705acca2a0"},{"problem":137,"code":"(fn digits [n base]\n   (if (< n base) [n]\n       (let [d (mod  n base)\n             r (quot n base)]\n         (conj (digits r base) d))))","user":"5b073c34e4b0cc2b61a3bda4"},{"problem":137,"code":"(fn num-to-seq [number base]\n  (cond\n     (zero? number) '(0)\n   :else\n   ((fn inner[number base]\n     (cond\n      (zero? number) '()\n      :else\n      (concat (inner (quot number base) base) (list (mod number base))))) number base)))","user":"559f06bae4b0acc240e314e6"},{"code":"(fn f [n b]\n  (let [r (rem n b)\n        q (quot n b)]\n  (if (= 0 q)\n      [r]\n      (conj (f q b) r))))","problem":137,"user":"4daddc19c9a9d6ed4599dc57"},{"code":"(fn [value base]\r\n  (loop [t () v value]\r\n    (if (= v 0)\r\n      (if (empty? t) [0] t)\r\n      (recur (conj t (rem v base)) (quot v base)))))","problem":137,"user":"4e6e2ac4535d5021c1a895ff"},{"code":"(fn to-base [num base]\n    (loop [num num acc (if (= num 0) '(0) ())]\n      (if (= num 0)\n        acc\n        (let [digit (rem num base)]\n          (recur (/ (- num digit) base) (cons digit acc))))))","problem":137,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn to-base [x base]\n  (if (zero? x) [0]\n    (loop [n x\n           result '()]\n      (if (zero? n) result\n        (recur (quot n base) (cons (mod n base) result))))))","problem":137,"user":"50e4f4e9e4b049a987753896"},{"problem":137,"code":"(fn digits [n b]\n  (if (< n b)\n    [n]\n    (conj (digits (quot n b) b) (rem n b))))","user":"5353afa0e4b084c2834f4b03"},{"code":"(fn digibase [value base]\n    (if  (= value 0)\n      [0]\n      (let [pwrs_of_base (reverse (take-while #(<= % value) (iterate #(* base %) 1)))]\n        (loop [pwrs pwrs_of_base\n               accumulator []\n               val value]\n          (if (empty? pwrs)\n            accumulator\n            (recur\n             (rest pwrs)\n             (conj accumulator (unchecked-divide-int val (first pwrs)))\n\t     (mod val (first pwrs))))))))","problem":137,"user":"50057f23e4b0678c553fc466"},{"problem":137,"code":"(fn in-base [n b]\n  (let [x (mod n b)\n        r (quot n b)]\n    (if (zero? r)\n      [x]\n      (conj (in-base r b) x)\n  )))","user":"54e345a1e4b024c67c0cf7db"},{"code":"(fn [n radix]\n  (if (zero? n)\n    '(0)\n    (reverse\n      (map #(rem % radix)\n           (take-while (partial < 0)\n                       (iterate #(quot % radix) n))))))","problem":137,"user":"51d19c24e4b0cfcf579466c3"},{"code":"(fn b [n nn]\n  (if (= n 0)\n    [0]\n  (loop [a n\n         i 0\n         aa []]\n    (if (= a 0)\n      (reverse aa)\n      (recur (int (/ a nn)) (inc i) (conj aa (mod a nn)))))))","problem":137,"user":"4fe97adde4b0547ebccb245e"},{"problem":137,"code":"(fn digits [n base]\n  (if (>= n base)\n    (concat (digits (int (/ n base)) base) [(mod n base)])\n    [n]))","user":"549dfe40e4b0f3d1d8e70f9a"},{"problem":137,"code":"(fn seq-digits [num radix]\n  ((fn step [r n base]\n     (if (pos? n)\n       (let [d (mod n base)\n             q (quot n base)]\n         (recur (cons d r) q base))\n       (if (empty? r) '(0) r)))\n   '() num radix))","user":"57c500f9e4b05aa3c4741cda"},{"problem":137,"code":"(fn mod-n [d base]\n  (cond\n    (zero? d) [d]\n    :otherwise\n      (vec (loop [acc (list) dgt d]\n             (if (zero? dgt)\n               acc\n               (let [r (rem dgt base)\n                     q (quot dgt base)]\n                 (recur (conj acc r) q)))))))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn convert \n  ([n base] (convert n base []))\n  ([n base curr] (let [res (cons (rem n base) curr)] (if (>= n base) (convert (quot n base) base res) res))))","problem":137,"user":"52e8b2fce4b09f7907dd149c"},{"code":"#(letfn\n  [(c [v b]\n        (if (> v 0)\n           (cons (mod v b)\n                 (c (quot v b) b))))\n]\n  (if (> % 0)\n    (reverse (c %1 %2))\n    '(0)))","problem":137,"user":"52bacfa8e4b07a9af57922d6"},{"problem":137,"code":"(fn\n  [number base]\n  (loop [number number result []]\n    (if (= number 0)\n      (if (empty? result) [0] (apply vector (reverse result)))\n      (recur (quot number base) (conj result (mod number base)))\n      )\n    )\n  )","user":"563a30d7e4b0bfe05bf117f9"},{"problem":137,"code":"(fn __\n  [number base]\n  (loop [n number\n         r '()]\n    (if (zero? n)\n      (if (empty? r) [number] r)\n      (recur (quot n base) (conj r (rem n base))))))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [n b]\n   (loop [x n r []]\n     (if (< x b)\n       (cons x r)\n       (recur (quot x b) (cons (rem x b) r)))))","problem":137,"user":"5201572be4b0d7096e99ddbb"},{"code":"#(if (= %1 0) [0] (\n  (fn dig [n b]\n  (if (= 0 n)\n    []\n    (conj (dig (quot n b) b) (mod n b)))) %1 %2))","problem":137,"user":"53468f6ce4b084c2834f4a3f"},{"problem":137,"code":"(fn [n base]\n  (loop [b (quot n base)\n         res [(mod n base)]]\n    (if (= 0 b)\n      res\n      (recur (quot b base)\n             (cons (mod b base) res)))))","user":"54848141e4b0e286459a119e"},{"problem":137,"code":"(fn dab [i base]\n    (if (< i base)\n      [i]\n      (conj (dab (quot i base) base) (mod i base))))","user":"513e8141e4b02b2a3d8235c1"},{"problem":137,"code":"(fn digits [value base]\n  (loop [digits ()\n         value value]\n    (if (zero? value)\n      (if (empty? digits)\n        (list 0)\n        digits)\n      (recur (conj digits (mod value base))\n             (quot value base)))))","user":"56ba1406e4b0f2655033593c"},{"problem":137,"code":"(fn [number new-base]\n  (reverse ((fn base-convert-2 [number new-base]\n   (lazy-seq (if (> new-base number)\n                       (list number)\n                       (conj (base-convert-2 (quot number new-base)\n                                             new-base)\n                             (rem number new-base)\n                             )\n                       )\n                     )) number new-base)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":137,"code":"(fn digits [n base]\n  (if (< n base) [n]\n    (conj (digits (quot n base) base)\n          (rem n base))))","user":"4e599577535d8a8b8723a29f"},{"problem":137,"code":"(fn [n b]\n  (loop [r '() c n]\n    (if (< c b)\n      (conj r c)\n      (recur (conj r (mod c b)) (quot c b)))))","user":"541ddadbe4b01498b1a71a84"},{"code":"(fn [n b]\r\n  (if (= 0 n) [0]\r\n      (reverse\r\n       (map #(mod % b)\r\n            (take-while pos?\r\n                        (iterate #(quot % b)\r\n                                 n))))))","problem":137,"user":"4ff304f4e4b0678c553fc343"},{"problem":137,"code":"(fn to-base [a b]\n (cond \n  (zero? (quot a b)) [(rem a b)]\n  :else (conj (to-base (quot a b) b) (rem a b))))","user":"5bea3177e4b0f319e2d7ec81"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [num n r []] \n      (if (zero? num) \n        (reverse r)\n        (recur \n          (/ (- num (mod num b)) b) \n          (conj r (mod num b)))))))","problem":137,"user":"503e7f06e4b06c4e0e1fa268"},{"problem":137,"code":"(fn [x y]\n  (loop [tmp x result []]\n    (if (= tmp 0)\n      (cond (empty? result) [0] :else (reverse result))\n      (recur (quot tmp y)(conj result (mod tmp y)))\n      )\n    )\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn [n b]\n           (loop [n n\n                  acc []]\n             (cond (and (zero? n) (empty? acc)) [0]\n                   (= 1 n) (cons (mod n b) acc)\n                   (zero? n) acc\n                   :else (recur (/ (- n (mod n b)) b)\n                                (cons (mod n b) acc)))))","problem":137,"user":"50a5b7e9e4b0aa96157e2610"},{"problem":137,"code":";without loop/recur\n(fn [n base]\n  (let [vals   (iterate #(quot % base) n)\n        digits (map     #(mod  % base) vals) \n        all    (map     list vals digits) ]\n    (->> (cons (first all) (take-while (comp pos? first) (rest all)))\n         (map second)\n         reverse )))\n\n; trivial with loop/recur\n#_(fn [n base]\n  (loop [ret '(), n n]\n    (if (< n base)\n        (cons n ret)\n        (recur (cons (mod n base) ret) (quot n base)))))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn [num base]\n  (letfn [(div [x y] (/ (- x (mod x y)) y))] ;切捨て\n    (loop [num,num res,[]]\n      (if (zero? (div num base))\n        (cons (mod num base) res)\n        (recur (div num base) (cons (mod num base) res))\n        ))))","problem":137,"user":"50f0d000e4b0c5f4fa5ddb6f"},{"code":"(fn [n b]\n    (if (= n 0)\n      '(0)\n      (loop [n n\n             r ()]\n        (if (= n 0)\n          r\n          (recur (quot n b)\n                 (conj r (mod n b)))))))","problem":137,"user":"521b9f92e4b0c4ef0be8304c"},{"problem":137,"code":"(fn [num base]\n    (loop [num num\n           res []]\n      (do\n        (println res)\n        (println num)\n        (if (> base num)\n          (cons (mod num base) res)\n          (recur (quot num base) (cons (mod num base) res  )))))\n    )","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [n b]\n  (loop [n n ds '()]\n    (if (and (zero? n) (not (empty? ds)))\n      ds\n      (recur (quot n b) (cons (mod n b) ds)))))","problem":137,"user":"516abecae4b081287f204e9f"},{"code":"#(loop [n % b %2 res []]\r\n  (if (zero? n) (if (zero? %) [0] (reverse res))\r\n    (recur (quot n b) b (conj res (mod n b)))))","problem":137,"user":"509160dae4b0742c82730aef"},{"problem":137,"code":"(fn change-base\n  [number to-base]\n  (if (zero? number)\n    (list number)\n    (loop [n number m '()]\n      (if (= 0 n) \n        m\n        (recur (quot n to-base) (conj m (rem n to-base)))))))","user":"5401aefbe4b0df28a13c62c7"},{"problem":137,"code":"(fn digits-bases\n  [d b]\n  (if (zero? d)\n    [0]\n    (loop [d d ret []]\n     (if (zero? d)\n       ret\n       (recur (quot d b) (cons (rem d b) ret))))))","user":"557e9d17e4b05c286339e0d8"},{"code":"(fn [n b]\n  (letfn [(c [n1]\n    (if (< n1 b) [n1]\n                (cons (rem n1 b) (c (quot n1 b)))))]\n    (reverse (c n))))","problem":137,"user":"4e6dc95a535d5021c1a895f1"},{"problem":137,"code":"(fn [number base]\n   (if (= number 0)\n     '(0)\n     (loop [num number\n            ans ()]\n       \n       (if (not= 0 num)\n         \n         (recur (quot num base) (conj ans (mod num base)))\n         ans))))","user":"5da94ccfe4b000c986472c2f"},{"problem":137,"code":"(fn __ [n b]\n  (loop [m n r '()]\n    (if (< m b) (conj r m)\n        (recur (quot m b) (conj r (rem m b)))))\n  )","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":137,"code":"(fn into-digits [num base]\n  (into []\n        (loop [n num\n               accum (list)]\n              (let [quotient (quot n base)\n                    modulus (mod n base)]\n                (if (>= quotient 1)\n                  (recur quotient (conj accum modulus))\n                  (conj accum modulus))))))","user":"5b1e5bfde4b03cfeda66ed0e"},{"problem":137,"code":"(fn [init base]\n  (loop [digits '() rem-num init]\n      (if (< rem-num base)\n        (conj digits rem-num)\n        (recur \n         \t(conj digits (mod rem-num base))\n         \t(int (/ rem-num base))))))","user":"5e7f075ee4b085ba37836e36"},{"code":"(fn self [n b]\n  (if (zero? n) '(0)\n    (loop [n n acc '()]\n      (if (zero? n) acc\n        (recur (quot n b) (cons (mod n b) acc))))))","problem":137,"user":"527cd633e4b0757a1b17136f"},{"code":"(fn [n b]\n  (loop [n n r '()]\n    (if (< n b)\n      (cons n r)\n      (recur (quot n b) (cons (rem n b) r)))))","problem":137,"user":"4f9f7daae4b0dcca54ed6d37"},{"problem":137,"code":"(fn f137\n  [n b]\n  (if (< n b)\n    (vector n)\n    (conj (f137 (quot n b) b) (rem n b))))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [n b]\n  (if (pos? n)  \n    (->> (iterate #(quot % b) n)\n         (take-while pos?)\n         (map #(mod % b))\n         reverse)\n    [0]))","problem":137,"user":"4f9d53f3e4b0dcca54ed6d21"},{"problem":137,"code":"(fn [x y] (if (= x 0) [0] ((fn peu [z] (if (= z 0) [] (conj (peu (quot z y)) (mod z y)) )) x)))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn numberize [n b]\n  (if (zero? n) [0]\n  (loop [exp (Math/floor (/ (Math/log n) (Math/log b)))\n         left n\n         acc []]\n    (let [\n           baseExp (Math/pow b exp)\n           digit (int (/ left baseExp))\n           left (- left (* digit baseExp))\n           acc' (conj acc digit)\n           ]\n      (if (zero? exp)\n        acc'\n        (recur (dec exp) left acc'))\n      ))))","problem":137,"user":"53307da1e4b019098a6f8b5e"},{"problem":137,"code":"(fn xbases\n    ([n b] (if (zero? n) [0] (xbases n b [])))\n    ([n b ans]\n        (if (zero? n) ans (recur (quot n b) b (cons (rem n b) ans)))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"problem":137,"code":"#(if(zero? %1) (vector %1) (loop [x %1 res [] ] (if(zero? x) (reverse res) (recur (quot x %2) (conj res (rem x %2)) ))))","user":"5cbd5b42e4b026601754b9f6"},{"problem":137,"code":"(fn [x y]\n   (if (or (= x 0) (= y 0))\n     [0]\n     ((fn [n b acc]\n        (if (<= n 0)\n          acc\n          (recur (int (/ n b))\n                 b\n                 (cons (mod n b) acc))))\n      x y [])))","user":"5452a300e4b0e397800069c7"},{"code":"(fn p137[x b]\n  (if (= x 0)\n    [0]\n    (loop [n x r '()]\n      (if (= 0 n) r\n        (recur (quot n b) (cons (rem n b) r))))))","problem":137,"user":"500b61b1e4b03d00572d2d81"},{"code":"(fn base [n b] (if (< n b) [n]  (conj (base (unchecked-divide-int n b) b) (mod n b)   )))","problem":137,"user":"51c214bce4b0d204dbe2ca1c"},{"code":"#(loop [n %1 r '()]\n  (if (= 0 n)\n    (if (= '() r) [0] r)\n    (recur (quot n %2) (conj r (mod n %2)))))","problem":137,"user":"52ba2af3e4b07a9af57922cc"},{"code":"#(loop [v %, r %2, a []] \n  (if (< v r)\n    (cons v a) \n    (recur (quot v r) r (cons (mod v r) a))))","problem":137,"user":"4eca40cd535d6d7199dd3703"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n    (loop [a '()\n         q n]\n    (if (= q 0)\n      (vec a)\n      (recur (conj a (rem q b))\n             (quot q b))))))","user":"55995fa7e4b031d6649c9ba9"},{"problem":137,"code":"(fn dignbase [n b]\n  (if (= n 0)\n    [0]\n    (loop [n n\n           r '()]\n      (if (= n 0)\n        r\n        (recur (quot n b) (conj r (rem n b)))))))","user":"5f8b06afe4b0715f5002d74a"},{"problem":137,"code":"(fn [n b]\n    (->> (take-while #(<= % n) (iterate (partial * b) b))\n         reverse\n         (#(loop [xs %\n                  v n\n                  l []]\n             (print xs)\n             (if (seq xs)\n               (recur (rest xs)\n                      (rem v (first xs))\n                      (conj l (quot v (first xs))))\n               (conj l v))))))","user":"5ec3a13ae4b08d0ec38692b9"},{"code":"(fn [x b]\n  (loop [x x out []]\n    (if (< x b)\n      (cons x out)\n      (let [d (mod x b)]\n        (recur (/ (- x d) b) (cons d out))))))","problem":137,"user":"4ebc08a8535dfed6da9c6d7c"},{"code":"(fn base-convert \n  ([n b] (base-convert n b ()))\n  ([n b c] (if (< n b)\n             (vec (cons n c))\n             (recur (quot n b) b (cons (rem n b) c)))))","problem":137,"user":"525c575be4b0cb4875a45d38"},{"problem":137,"code":"(fn [n base]\n  ((fn iter [result remain]\n    (if (< remain base) (cons remain result)\n        (iter (cons (rem remain base) result) (quot remain base)))) nil n))","user":"58f98231e4b0438e51c2cf4c"},{"code":"(fn rebase-outer [number-outer base]\n  (letfn [(rebase [number]\n            (if (zero? number) \n              []\n              (let [remainder   (mod number base)\n                    outstanding (- number remainder)\n                    new-number  (/ outstanding base)\n                    full-rebase (conj (rebase new-number) remainder)]\n                full-rebase)))]\n    (let [result (rebase number-outer)]\n      (if (empty? result) [0] result))))","problem":137,"user":"4e6defcc535d5021c1a895f8"},{"code":"(fn convert-base [n b]\r\n  (if (zero? n)\r\n\t\t[0]\r\n\t\t(loop [k n, digits ()]\r\n\t\t\t(if (zero? k)\r\n\t\t\t\tdigits\r\n\t\t\t\t(recur (quot k b) (conj digits (rem k b)))))))","problem":137,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":137,"code":"(fn [n b]\n  (loop [rn n\n         r '()]\n    (if (zero? rn)\n      (if (empty? r) '(0) r)\n      (recur (int (/ rn b)) (cons (mod rn b) r)))))","user":"4fc8f671e4b0ee37620e1840"},{"code":"(fn [x b]\n  (loop [x x, acc []]\n    (if (< x b)\n      (cons x acc)\n      (recur (quot x b) (cons (mod x b) acc)))))","problem":137,"user":"50586354e4b06522596eba78"},{"code":"(fn [n base]\n  (letfn [(foo [n]\n               (let [x (quot n base) r (rem n base)]\n                 (if (> x 0)\n                   (cons r (foo x))\n                   [r])))]\n    (reverse (foo n))))","problem":137,"user":"52d3f666e4b09f7907dd1327"},{"problem":137,"code":"(fn [n b]\n   (letfn [(toBase [n b output] \n             (if (>= n b) \n               (recur (quot n b) b (cons (mod n b) output)) \n               (cons n output)))]\n    (toBase n b []) ))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":137,"code":"(fn [n base]\n    (if (zero? n)\n      '(0)\n      (loop [nn n\n             ans '()]\n        (if (zero? nn)\n          ans\n          (recur (quot nn base)\n                 (conj ans (mod nn base)))))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":137,"code":"(fn [n b]\n  (case n\n    0 [0] \n    (->> (iterate #(quot % b) n)\n         (take-while pos?)\n         (map #(rem % b))\n         reverse)))","user":"53dfdf01e4b0d874e779ae46"},{"problem":137,"code":"(fn to-base [num base]\n  (if (zero? num)\n    '(0)\n    (rseq (mapv #(mod % base) (take-while pos? (iterate #(quot % base) num))))))","user":"51b920bfe4b0e871ca4958f9"},{"problem":137,"code":"(fn [numb base]\n  (if (= 0 numb)\n    (list numb)\n  (loop [ n numb new-base '()]\n    (if (= n 0)\n      new-base\n      (recur (quot n base) (conj new-base (mod n base))))\n  )))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":137,"code":"(fn base [n b]\n   (loop [_n n\n          ret '()]\n     (if (< _n b)\n       (conj ret (mod _n b))\n       (recur (quot _n b) (conj ret (mod _n b)))\n       )))","user":"55a372f1e4b0acc240e31537"},{"code":"#(if (= 0 %) [0] ((fn f [x b] (when (pos? x) (concat (f (quot x b) b) [(mod x b)]))) % %2))","problem":137,"user":"5054bc87e4b0b1b9d1860eb0"},{"code":"(fn [n base] \n  (loop [result '() n n]\n    (if (> base n)\n      (cons n result)\n      (let [quotient  (quot n base)\n            remainder (rem n base)]\n        (recur (cons remainder result) quotient)))))","problem":137,"user":"4e593dac535d8a8b8723a29c"},{"code":"(fn\n  [n base]\n  (letfn [(step [[acc rem]] [(conj acc (mod rem base))\n                             (quot rem base)])]\n    (first\n     (first (drop-while\n            #(or (> (second %) 0) (= (first %) '()))\n            (iterate step ['() n]))))))","problem":137,"user":"51a3b135e4b0e77c4ca60bf6"},{"code":"(fn [n m]\n  (if (= n 0) [0]\n  (loop [n n\n         dseq ()]\n    (if (zero? n)\n      dseq\n      (recur (quot n m)\n             (cons (mod n m) dseq))))))","problem":137,"user":"4fb1d907e4b081705acca282"},{"code":"(fn [n b] (if (pos? n) (letfn [(g [n b] (if (pos? n) (let [q (quot n b) r (rem n b)]  (conj (g q b) r)) []))] (g n b)) [0]))","problem":137,"user":"4f8c5f4fe4b02e764a0a5198"},{"problem":137,"code":"(fn [num base]\n  (loop [n num, digits []]\n    (if (zero? n)\n      (if (empty? digits) [0] (reverse digits))\n      (recur (quot n base) (conj digits (mod n base))))))","user":"541b1f25e4b01498b1a71a63"},{"problem":137,"code":"(fn base\n\t([n b]\n\t\t(if (zero? n)\n\t\t\t[n]\n\t\t\t(base n b [])))\n\t([n b r]\n\t\t(if (zero? n)\n\t\t\t(reverse r)\n\t\t\t(recur (quot n b) b (conj r (rem n b))))))","user":"5954eef0e4b066ee0a44af17"},{"problem":137,"code":"(fn [n b]\n  (loop [n n s ()]\n    (let [s' (conj s (rem n b))\n          n' (quot n b)]\n      (if (zero? n')\n        s'\n        (recur n' s')))))","user":"597dcb0ce4b0dbe32238d0a2"},{"problem":137,"code":"(fn [number base]\n  (loop [n number a '()]\n    (if (> base n)\n        (conj a n)\n        (recur (quot n base), (conj a (mod n base)))\n        )\n      )\n    )","user":"5736e12ee4b0cd1946bd103a"},{"code":"(fn lp[a b](\n  if (> b a) (list a) \n    (flatten (list \n      (lp (int (/ a b)) b) (mod a b)))))","problem":137,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         acc '()]\n    (cond\n     (zero? n) (if (empty? acc) [0] acc)\n     :else (let [d (mod n base)\n                 carry (quot n base)]\n             (recur carry (cons d acc))))))","user":"5412ef7ee4b01498b1a719da"},{"code":"#(loop [x % r []]\r\n      (if (zero? x) (if (empty? r) [0] r)\r\n        (recur (quot x %2) (cons (mod x %2) r))))","problem":137,"user":"50336c6be4b0c6c1199c710f"},{"problem":137,"code":"(fn [n base]\n  (loop [q (quot n base)\n         r (mod n base)\n         ret `(~r)]\n    (if (zero? q)\n      ret\n      (recur (quot q base)\n             (mod q base)\n             (cons (mod q base) ret)))))","user":"5ebdb3d2e4b00a66d4a95275"},{"problem":137,"code":"(fn digit-base\n  [num base]\n  (if (= 0 num)\n    [num]\n    (loop [result [] value num]\n      (if (= 0 value)\n        result\n        (recur (cons (mod value base) result) (quot value base))))))","user":"56df63c7e4b0ca2494a095f5"},{"problem":137,"code":"(fn [x b]\n  (loop [x x, out ()]\n    (if (zero? x)\n      (if (empty? out) [0] out)\n      (recur (quot x b) (conj out (mod x b))))))","user":"5416b4a2e4b01498b1a71a01"},{"code":"(fn [num sys]\n  (letfn [(highest [num sys]\n  (loop [x num d sys]\n    (if (zero? (quot x (* d sys)))\n      d\n      (recur x (* d sys)))))]\n  (loop [x num d (highest num sys) r []]\n    (if (or (= 1 d) (zero? x))\n      (conj r x)\n      (recur (- x (* (quot x d) d)) (quot d sys) (conj r (quot x d)))))))","problem":137,"user":"50645e12e4b007509339a58a"},{"problem":137,"code":"(fn [x b]\n  (if (= x 0)\n    [0]\n    (reverse\n     (loop [r x v []]\n     (if (not= 0 r)\n       (recur (quot r b) (conj v (mod r b)) )\n       v\n       )\n     )\n   )\n  )\n    \n  )","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn it                                                                                                                        \n   ([n base] (it n base []))                                                                                                   \n   ([n base res]                                                                                                               \n    (let [q (quot n base)                                                                                                      \n          r (rem n base)                                                                                                       \n          nres (cons r res)                                                                                                    \n          ]                                                                                                                    \n      (if (zero? q)                                                                                                            \n        nres                                                                                                                   \n        (recur q base nres))))                                                                                                 \n   )","problem":137,"user":"4dc537fd535d8a4b2fd74282"},{"problem":137,"code":"(fn [n base]\n  (loop [r [], x n]\n    (let [q (quot x base), m (mod x base)]\n      (if (= q 0)\n        (reverse (conj r m))\n        (recur (conj r m) q)\n      )\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"code":"(fn [x y]\n  (loop [q (quot x y)\n         r (rem x y)\n         acc []]\n    (if (= q 0)\n      (vec (reverse (conj acc r)))\n      (recur (quot q y) (rem q y) (conj acc r)))))","problem":137,"user":"4ed286d4535d44c135fd68d7"},{"problem":137,"code":";; thank you http://mathbits.com/MathBits/CompSci/Introduction/frombase10.htm\n#(->> ((fn f [n b]\n         (let [r (mod n b) \n               q (quot n b)]\n           (if (= q 0)\n             (list r)\n             (list r (f q b))))) %1 %2)\n      flatten\n      reverse)","user":"575fbe58e4b08062f99a4e87"},{"code":"(fn [n m]\n  (if (zero? n)\n    [0]\n    (reverse (map #(rem % m) (take-while pos? (iterate #(quot % m) n))))\n))","problem":137,"user":"5107b86de4b05b2b4eee7495"},{"problem":137,"code":"(fn [n b]\n\t(if (= 0 n) [0]\n\t(loop [x n d []]\n\t\t(if (= 0 x)\n\t\t\td\n\t\t\t(recur (quot x b) (cons (rem x b) d))))))","user":"5578f292e4b05c286339e08f"},{"code":"(fn f ([x b] (if (= x 0) '(0) (f x b nil)))\n  ([x b coll] \n    (if (= x 0) coll (recur (quot x b) b (cons (mod x b) coll)))))","problem":137,"user":"4e14108c535d04ed9115e7dd"},{"problem":137,"code":"(fn [n base]\n    {:pre [(>= n 0)]}\n (letfn [(step [r n base]\n           (if (zero? n)\n             r\n             (step (conj r (mod n base))\n                   (quot n base)\n                   base)))]\n   (if (zero? n)\n     '(0)\n     (step '() n base))))","user":"56d4b22de4b0ea9b8538f7bb"},{"code":"(fn [n r] (let [f (fn f [n r] (cons (rem n r) (when (not= 0 (quot n r)) (f (quot n r) r))))]\n             (reverse (f n r))))","problem":137,"user":"50563ae2e4b0ce54f56f0405"},{"problem":137,"code":"(fn [n b] (let [\n  go (fn [n b v] (if (zero? n) v\n    (recur (quot n b) b (cons (rem n b) v))))]\n  (if (zero? n) [0] (go n b []))))","user":"53fe1c3be4b0de5c418485f2"},{"problem":137,"code":"(fn convert [n0 b0]\n  (loop [n   n0\n         b   b0\n         acc '()]\n    (if (>= n b)\n      (recur (quot n b) b (cons (mod n b) acc))\n      (cons n acc))))","user":"53d63e6ce4b0e771c3025454"},{"problem":137,"code":"(fn conv [n b]\n  (if (zero? n) [n]\n  (loop [n n c '()]\n    (if (zero? n)\n      c\n      (recur (quot n b)  (cons (mod n b) c))\n      )\n    )\n    )\n  )","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":137,"code":"(fn digits [n base] \n    (loop [nn n result []]\n        (if (zero? (quot nn base))\n            (cons (rem nn base) result)\n            (recur (quot nn base) (cons (rem nn base) result))\n        )\n    )\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":137,"code":"(fn digits [n base]\n  (if (zero? n)\n    '(0)\n    (loop [acc '(), todo n]\n      (if (zero? todo)\n        acc\n        (recur (conj acc (rem todo base)) (quot todo base))))))","user":"5b51b9f8e4b02d533a91bcfe"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         res []]\n    (if (= 0 (quot n base))\n      (cons (rem n base) res)\n      (recur (quot n base) (cons (rem n base) res)))))","user":"5680104ae4b0966858e4d8ea"},{"problem":137,"code":"(fn [x b]\n   (if (zero? x) '(0)\n   (loop [n x l '()]\n     (if (zero? n)\n       l\n       (recur (quot n b) (cons (mod n b) l))))))","user":"53f6d555e4b0db01ade6f9e5"},{"problem":137,"code":"(fn [number base]\n  (loop [number_ number\n         total (list)]\n    (println number_ total)\n    (if (< number_ base)\n        (conj total number_)\n        (recur (quot number_ base)\n               (conj total (rem number_ base))))))","user":"549e5e52e4b0f3d1d8e70f9e"},{"problem":137,"code":"#(loop [cur nil, r %1]\n   (if (= r 0)\n     (if cur cur '(0))\n     (recur (conj cur (rem r %2)) (quot r %2))))","user":"57015a1de4b08d47c97781d4"},{"problem":137,"code":"(fn [num base]\n  (loop [x num\n         digits ()]\n    (if (= x 0) (if (empty? digits) '(0) digits)\n      (let [digit (mod x base)\n            restx (/ (- x digit) base)\n            new-digits (conj digits digit)]\n        (recur restx new-digits)))))","user":"53c38b8ce4b00fb29b22127b"},{"problem":137,"code":"#(\n  letfn [(digit [vctr num base]\n           (let [q (quot num base)\n                 v (cons (mod num base) vctr)]\n            (if (zero? q)\n            (vec v)\n            (recur v q base)\n            ))\n\n            )]\n    (digit [] %1 %2)\n  )","user":"5135a74ae4b04ac1f358dd46"},{"code":"(fn [n b]\n  (letfn [(base [n]\n   (let [v (mod n b)\n         r (int (/ n b))]\n     (if (zero? n)\n       []\n       (conj (base r) v))))]\n    (if (= n 0) [0]\n      (base n))))","problem":137,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn digits [n base]\n        (if (zero? n) [0]\n            (conj (vec (drop-while zero? (digits (quot n base) base)))\n                  (mod n base))))","problem":137,"user":"5294e44de4b02ebb4ef75016"},{"problem":137,"code":"#(->> (quot %1 %2)\n  (iterate (fn [x] (quot x %2)))\n  (take-while pos?)\n  (cons %1)\n  (mapv (fn [x] (mod x %2)))\n  rseq)\n;cf. problem 99 Product Digits","user":"5e13a6b7e4b099d064963001"},{"problem":137,"code":"(fn tb\n    ([x b]\n     (if (zero? x)\n       [0]\n       (tb x b [])))\n    ([x b res]\n     (if (zero? x)\n       res\n       (tb (quot x b) b (cons (rem x b) res)))))","user":"4e837808535db62dc21a62d9"},{"problem":137,"code":"(fn [x base]\n  (loop [x x acc '()]\n    (if (< x base)\n      (conj acc x)\n      (recur (quot x base) (conj acc (rem x base))))))","user":"54ad4863e4b09f271ff37ce0"},{"problem":137,"code":"(fn reduce-it\n  [v b]\n  (loop [curr-v v result '()]\n    (if (< curr-v b)\n    (cons curr-v result)\n    (recur (/ (- curr-v (mod curr-v b)) b) (cons (mod curr-v b) result))\n  )\n  )\n)","user":"54e0bb4fe4b024c67c0cf7b8"},{"problem":137,"code":"(fn [x n]\n  (loop [z x q (quot x n) r (rem x n) o []]\n    (if (= 0 q)\n      (cons r o)\n      (recur q (quot q n) (rem q n) (cons r o)))))","user":"5aa8f753e4b0d174b936c8d9"},{"code":"(fn [i b]\n  (map\n    #(read-string (str 36 \"r\" %))\n    (clojure.pprint/cl-format nil (str \"~\" b \",1,'0r\") i)))","problem":137,"user":"53513d28e4b084c2834f4ae3"},{"problem":137,"code":"(fn [n b] \n   (if (zero? n) [0] (reverse (map #(rem % b) (take-while (complement zero?) (iterate #(quot % b) n))))))","user":"54908cc1e4b0b312c081ff32"},{"code":"(fn [x rd]\n\t(loop \n\t\t[x x, l ()]\n\t\t(if (zero? x) (if (empty? l) '(0) l)\n\t\t\t(recur (quot x rd) (cons (rem x rd) l)))))","problem":137,"user":"520242bae4b030ee0c5b26e3"},{"problem":137,"code":"(fn [n r]\n  (if (= 0 n) \n    [0]\n    (loop [x n, s '()]\n      (if  (= 0 x)\n        s\n        (recur (unchecked-divide-int x r) (conj s (mod x r)))\n))))","user":"54524afbe4b0e397800069bc"},{"code":"(fn bconv [n base]\n  (if (== n base)\n    [1 0]\n    (if (== n 0) \n      [0]\n      (let [ipow (fn [x n] (->> x repeat (take n) (apply *)))\n            powers (fn [base] (map  (partial ipow (* 1N base)) (range)))\n            take-powers (fn [base n] (vec (reverse (take-while #(< % n) (powers base)))))]\n        (first \n         (reduce\n          (fn [[result remainder] power]\n            [(conj result (int (quot remainder power)))\n           (rem remainder power)])\n          [[] n]\n        (take-powers base n)))))))","problem":137,"user":"51a768e0e4b0da5f497bde84"},{"problem":137,"code":"(fn cb\n  ([n b] (cb (int (/ n b)) b [(mod n b)]))\n  ([n b v]\n   (if (= n 0)\n     (reverse v)\n     (recur (int (/ n b)) b (conj v (mod n b))))))","user":"5d52bf29e4b0776584bd6f69"},{"problem":137,"code":"(fn test ([number base] \n                    (if (> base number) [number]\n                        (do (test (quot number base) base [(mod number base)]))\n                        )) \n            ([number base v]\n                     (if (> base number) \n                         (apply vector (reverse (conj v number)))\n                         (test (quot number base) base (conj v (mod number base)))   \n                       )))","user":"5aeb3c1ce4b0cc2b61a3bbf4"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [n n, ds ()]\n      (if (zero? n) ds\n        (recur (quot n b)\n               (conj ds (mod n b)))))))","user":"562cd94ee4b0a45d2ff83015"},{"code":"(fn base [n b]\n  (loop [l [], r n]\n    (if (= 0 r)\n      (if (empty? l) [0] l)\n      (recur (cons  (mod r b) l) (/ (- r (mod r b)) b)))))","problem":137,"user":"4fca1cd6e4b0ee37620e184c"},{"problem":137,"code":"#(loop [number %1 base %2 result '()]\n  (if (< number base) (conj result number)\n    (recur (quot number base) base (conj result (rem number base)))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn f [x base]\n  (if (= x 0)\n    [0]\n    (loop [i x\n           res '()]\n      (if (= i 0)\n        res\n        (recur (quot i base) (conj res (mod i base)))))))","problem":137,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn in-radix\r\n  [n radix]\r\n\t(if (zero? n)\r\n\t\t[0]\r\n\t\t(let [div (quot n radix)]\r\n\t\t\t(conj (if (= 0 div) [] (in-radix (quot n radix) radix)) (mod n radix)))))","problem":137,"user":"4e8a0c82535d3e98b802328d"},{"problem":137,"code":"(fn digits [n base]\n  (letfn [(digits-rev[n base]\n    (if (< n base)\n      [n]\n      (cons (mod n base) (digits-rev (quot n base) base))))]\n    (reverse (digits-rev n base))))","user":"4f577f25e4b0a7574ea71839"},{"problem":137,"code":"(fn base [n b]\n  (if (< n b) [n]\n      (let [d (mod n b)]\n      (conj (base (/ (-\tn d) b) b) d))))","user":"530bf87ee4b02e82168697d5"},{"code":"(fn [n b]\n  ((fn impl [n b rx]\n     (if (= n 0)\n       (if (empty? rx)\n         [0]\n         rx)\n       (impl (int (/ n b)) b (cons (mod n b) rx))))\n   n b []))","problem":137,"user":"521392bce4b0d32679a5065e"},{"problem":137,"code":"(fn [n base]\n    (loop [current [] n n]\n      (if  (= 0 n) \n        (if (empty? current) [0] current)\n        (recur (cons (mod n base) current) (quot n base))))\n    )","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn [x b]\n  (if (= 0 x) '(0)\n    (loop [d '() x x]\n      (if (< x 1) d (recur (cons (mod x b) d) (/ (- x (mod x b)) b))))))","problem":137,"user":"4e2b1d48535deb9a81d77f03"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    '(0)\n    (loop [n n\n           r ()]\n      (if (zero? n)\n        r\n        (recur (int (/ n base)) (conj r (mod n base)))))))","user":"549c6792e4b0f3d1d8e70f8b"},{"problem":137,"code":"(fn [n base]\n    (if (zero? n)\n      [0]\n      (reverse\n            (map\n             second\n             (take-while\n              (fn [[a b]] (or (pos? a) (pos? b)))\n              (rest\n               (iterate\n                (fn [[tot _]] [(quot tot base) (rem tot base)])\n                [n])))))))","user":"5275f7a2e4b03e8d9a4a74d0"},{"code":"(fn [n b]\n  (loop [i n\n         s '()]\n    (if (= i 0)\n      (if (empty? s) '(0) s)\n      (recur (int (/ i b)) (conj s (rem i b))))))","problem":137,"user":"5027b41ee4b01614d1633fee"},{"problem":137,"code":"(fn\n  [n b]\n  (loop [a (quot n b)\n         b b\n         r [(rem n b)]]\n    (if (zero? a)\n      r\n      (recur (quot a b) b (cons (rem a b) r)))))","user":"5893c64ce4b00487982d524b"},{"code":"(fn self [n bs]\n  (if (< n bs)\n    [n]\n    (conj (self (quot n bs) bs) (mod n bs))))","problem":137,"user":"5233ad08e4b07e3ee2be83ac"},{"problem":137,"code":"(fn f [x b]\n  (if (< x b) [x]\n  \t(conj (f (quot x b) b) (rem x b))))","user":"55e732c5e4b050e68259b492"},{"problem":137,"code":"(fn [n base]\n    (let\n      [\n        do-digits\n        (fn do-digits [n]\n          (if (> base n)\n            [n]\n            (let\n              [\n                d (mod n base)\n                n' (quot n base)\n              ]\n              (cons\n                d\n                (do-digits n')\n              )\n            )\n          )\n        )\n      ]\n      (apply vector\n        (reverse (\n          do-digits n)\n        )\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"code":"(fn p [x y] (loop [m [] x x y y] \n            (if (< x y) \n              (cons x m)\n              (recur (cons (mod x y) m) (/ (- x (mod x y)) y) y))))","problem":137,"user":"52b35a6ee4b0c58976d9ad07"},{"problem":137,"code":"(fn [n b]\n  (loop [x n res '()]\n    (let [q (quot x b)\n          m (mod x b)]\n      (if (= 0 q)\n        (cons m res)\n        (recur q (cons m res))))))","user":"541d3c0fe4b01498b1a71a7e"},{"code":"(fn base-convert \n  [n base]\n  (reverse \n   (loop [q (quot n base) r (mod n base) res []]\n     (if (zero? q)\n       (conj res r)\n       (recur (quot q base) (mod q base) (conj res r))))))","problem":137,"user":"5048202fe4b0ec70b3ef8d9a"},{"problem":137,"code":"(fn [n b]\n  (if (= 0 n)\n    [0]\n    (loop [x n r []]\n      (if (= 0 x)\n        (reverse r)\n        (recur (quot x b) (conj r (rem x b)))))))","user":"5e12327ee4b099d064962fe5"},{"code":"(fn [n b]\n  (letfn [(int-base [results n]\n                    (if (= n 0)\n                      results\n                      (recur (cons (mod n b) results) (quot n b))))]\n    (if (= 0 n)\n      [0]\n      (int-base [] n))))","problem":137,"user":"536f871de4b0fc7073fd6e7f"},{"code":"#(loop [res '(), r (rem %1 %2), q (quot %1 %2)]\n       (if (zero? q)\n         (conj res r)\n         (recur (conj res r) (rem q %2) (quot q %2))))","problem":137,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn base-digits [x b]\n  (let [powers (take-while #(>= x (Math/pow b %)) (range))]\n    (loop [p_ powers x_ x acc []]\n      (if (empty? p_) [x]\n       (let [d_ (int (/ x_ (Math/pow b (last p_))))]\n         (cond\n          (= [0] p_) (conj acc d_)\n          :else (recur (butlast p_)\n                       (- x_ (* d_ (Math/pow b (last p_))))\n                       (conj acc d_))))))))","problem":137,"user":"4f50c414e4b03ad3f0c10d0d"},{"problem":137,"code":"(fn anybase ([n b] (if (= n 0) (list n) (anybase n b '())))\n  ([n b acc] (if (= n 0) acc\n                 (anybase\n                  (quot n b)\n                  b\n                  (cons (mod n b) acc)))))","user":"587ee260e4b052da650a6353"},{"code":"(fn [nn bb]\n  (let [r ((fn cal [n b]\n  (if (> n 0)\n    (conj (cal (quot n b) b) (rem n b) )\n    []\n    )\n  ) nn bb)]\n    (if (= (count r) 0)\n      [0]\n      r\n      )\n    )\n  )","problem":137,"user":"51bec919e4b013aa0d74b800"},{"problem":137,"code":"(fn [n base]\n   (if (= 0 n)\n     [0]\n     (loop [x n\n            y []]\n       (if (<= x 1)\n         (if (= x 1)\n           (conj y (rem x base))\n           y)\n         (recur\n          (quot x base)\n          (cons (rem x base) y))))))","user":"502b0804e4b063e52107afad"},{"problem":137,"code":"(fn f [n b]\n  (let [i (int (/ n b))\n        m (mod n b)]\n    (if (= i 0)\n      [m]\n      (conj (f i b) m))))","user":"51ab70c3e4b04e3dc0c27b33"},{"code":"(fn base-change\n  ([x b]\n   (if (zero? x)\n    [ 0]\n     (base-change x b '()))\n   )\n   ([x b digits]\n    (if (zero? x)\n      digits\n      (recur (quot x b) b (conj digits (rem x b)))))\n  )","problem":137,"user":"51281b25e4b03a34742b4304"},{"code":"(fn f [n b]\n  (if (= n 0)\n    [0]\n    (let [p (quot (Math/log n) (Math/log b))]\n      (loop [result []\n             p p\n             n n]\n        (let [x (Math/pow b p)\n              y (quot n x)\n              z (* x y)\n              result (conj result (int y))]\n          (if (zero? p)\n            result\n            (recur result (dec p) (- n z))))))))","problem":137,"user":"4ebaf790535dfed6da9c6d6e"},{"problem":137,"code":"(fn\n  [n b]\n(let [res (reduce #(conj % (rem %2 b)) nil \n(take-while #(> % 0) (iterate #(quot % b) n)))]\n(if (nil? res) [0] (vec res))\n))","user":"56903cb9e4b0dcc4269f40eb"},{"code":"(fn nb [num base]\n  (if (< num base)\n      [num]\n      (conj (nb (int (/ num base)) base) (rem num base))))","problem":137,"user":"4f13047d535d64f60314642c"},{"code":"(fn [x b] (if (zero? x)\n             [0]\n             (vec (reverse (map\n                            (fn [p] (rem (quot x (reduce * (repeat p b))) b))\n                            (range (+ 1 (int (/ (Math/log x) (Math/log b))))))))))","problem":137,"user":"5047a03ee4b0ec70b3ef8d8d"},{"problem":137,"code":"(fn digits [number base]\n  (if (= number 0)\n      [0]\n      (let [ch (concat (map char (range 48 58)) (map char (range 65 91)))\n            dig (zipmap ch (range))]\n        (loop [num number\n               acc []]\n          (if (zero? num)\n              (map #(dig %) (reverse acc))\n              (recur (int (/ num base))\n                     (conj acc (nth ch (mod num base)))))))))","user":"534fa9dae4b084c2834f4acf"},{"problem":137,"code":"#(loop [o '() n %1] (if (zero? n) (if (empty? o) '(0) o) (recur (conj o (mod n %2)) (quot n %2))))","user":"5a244240e4b0ff51aa4b32e9"},{"code":"(fn base-recur [n r]\n  (if (= n 0) [0]\n    (let [maxd (int (/ (Math/log n) (Math/log r)))\n          base (fn rbase [n10 radix pow]\n                 (if (>= pow 0)\n                   (let [p (int (Math/pow radix pow))\n                         N (quot n10 p)\n                         s (- n10 (* N p))]\n                     (concat [N] (rbase s radix (dec pow))))\n                   '()))]\n      (base n r maxd))))","problem":137,"user":"51d96ad0e4b02ceefd94774f"},{"problem":137,"code":"(fn [x y] (loop [out [(rem x y)] qu (quot x y)] (if (= 0 x) [0] (if (< qu y) (cons qu out) (recur (cons (rem qu y) out) (quot qu y))))))","user":"5d7158f3e4b04d129b00f2e1"},{"code":"(fn [v n]\n (letfn [(g [a r] \n             (if (< a n) \n                 (cons a r) \n                 (recur (quot a n) (cons (mod a n) r))))] \n         (g v [])))","problem":137,"user":"4ede8789535d10e5ff6f5337"},{"problem":137,"code":"(fn [x base]\n  (loop [r (), x x]\n    (let [r (conj r (rem x base))\n          x (quot x base)]\n      (if (zero? x) r (recur r x)))))","user":"56dc3bdfe4b0ea9b8538f819"},{"problem":137,"code":";; http://www.4clojure.com/problem/137\n(fn to-base\n  [num base]\n  (loop [n num\n         out '()]\n    (if (zero? n)\n      (if (empty? out) '(0) out)\n      (recur (int (/ n base)) (cons (mod n base) out)))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn f[val base]\r\n  (if (< val base)\r\n    (vector val)\r\n    (conj  (f (quot val base) base)  (mod val base) )  \r\n    )\r\n)","problem":137,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn nr [ x base ]\n     (cond \n       (= x base )  (vector  1 0 )\n       (< x base )  (vector (rem x base)) \n       :else (conj  (nr (quot x base) base) (rem x base))))","problem":137,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn tobase [n e]\n  (or\n    ((fn t [n e]\n      (if (> n 0)\n        (vec (conj\n          (t (quot n e) e)\n          (rem n e))))) n e)\n    [0]))","problem":137,"user":"4fa67030e4b081705acca1b7"},{"problem":137,"code":"(fn digital-base [x base]\n  (if (< x base)\n    [x]\n    (conj (digital-base (quot x base) base)\n          (mod x base))))","user":"5393185ae4b0b51d73faaeb7"},{"problem":137,"code":"(fn [n b]\n(loop [res  [(mod n b)]  nn (quot n b)]\n  (if (zero? nn) (reverse res)\n    (recur   (conj res (mod nn b) ) (quot nn b) ) \n   )\n\n\n  )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":137,"code":"(fn [x b] \n  (if (zero? x) [0] \n    (loop[dl '() x' x] \n      (if (zero? x') (vec dl) \n        (recur (cons (mod x' b) dl) (quot x' b))))))","user":"58e7229fe4b056aecfd47cc4"},{"code":"#(loop [digits nil pool %1]\n   (if (= pool 0)\n     (or digits [0])\n     (recur (cons (rem pool %2) digits) (quot pool %2))))","problem":137,"user":"51f9527fe4b09be9c177e549"},{"problem":137,"code":"(fn changeBase [n base]\n  (if (= (quot n base) 0)\n    [n]\n    (conj (changeBase (quot n base) base) (mod n base) )\n  )\n)","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn f[x n]\n  (if (> n x)\n    [x]\n    (concat (f (int (/ x n)) n) [(rem x n)])))","problem":137,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [num base]\n   (loop [n num coll nil]\n     (if (zero? n)\n       (if (nil? coll)\n         [0]\n         coll)\n       (recur (int (/ n base)) (conj coll (mod n base)) )\n       )\n     )\n   )","problem":137,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn digits-with-base [n base]\n  (letfn [(decompose [n]\n            (if (< n base)\n              [n]\n              (let [q (quot n base)\n                    r (rem n base)]\n                (cons r (decompose q)))))]\n    (reverse (decompose n))))","problem":137,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn [n b] (if (= 0 n) '(0) (\n  loop [r n, col '()]\n  (if (= 0 r) col (recur (int (/ r b)) (conj col (rem r b))))\n)))","problem":137,"user":"4ef48422535dced4c769f236"},{"problem":137,"code":"(fn base-representation [x b]\n  ;; e.g. 4s place, 2s place, 1s place\n  (let [places (reverse\n                 (cons 1\n                       (take-while\n                         #(<= % x)\n                         (map #(Math/pow b %) (rest (range))))))]\n    (rest (reduce\n            (fn [[x & digits] place]\n              (concat (cons (rem x place) digits)\n                      (list (int (/ x place)))))\n            (list x)\n            places))))","user":"5ca14eb1e4b048ec896c5b7d"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           acc []]\n      (if (zero? n)\n        acc\n        (recur (quot n base)\n               (cons (rem n base) acc))))))","problem":137,"user":"51789dfae4b03d69594194d7"},{"code":"(fn[r n b]\n  (if (< 0 n)\n    (recur (cons (mod n b) r) (quot n b) b)\n    (or r [0]))) nil","problem":137,"user":"4f1fd734535d64f6031464a5"},{"problem":137,"code":"(fn f [n b]\n  (let [r (rem n b)]\n    (if (= n r)\n      (vector n)\n      (conj (f (quot n b) b) r))))","user":"4f856adfe4b033992c121c44"},{"problem":137,"code":"(fn [r n b]\n  (if (< n b)\n    (cons n r)\n    (recur (cons (mod n b) r) (int (/ n b)) b))) []","user":"58b26da4e4b0ebc645576d0a"},{"code":"(fn f [n b]\r\n  (if (< n b)\r\n      [n]\r\n      (conj (f (quot n b) b)\r\n            (rem n b))))","problem":137,"user":"4f9597e0e4b0dcca54ed6cd4"},{"code":"(fn [digit base]\n  (if (< digit base)\n    [0]\n    (reverse\n     (map second\n          (take-while (fn [[d r]] (not (= d r 0)))\n                      (iterate (fn [[d _]] [(int (/ d base)) (mod d base)])\n                               [(int (/ digit base)) (mod digit base)]))))))","problem":137,"user":"5225271fe4b01819a2de42f9"},{"problem":137,"code":"(fn digits [n base]\n  (let [r (rem n base)]\n    (if (= n r)\n      (vector n)\n      (conj (digits (quot n base) base) r))))","user":"53e9dce1e4b036ad0777e4bc"},{"code":"(fn digits-in-base [x base]\n  (if (zero? x) \n    [x]\n    (reverse (map #(rem % base)\n                  (take-while (complement zero?)\n                              (iterate #(quot % base) x))))))","problem":137,"user":"50812debe4b01a93d3f38e4c"},{"problem":137,"code":"(fn ! [number base]\n  (if (< number base)\n    [number]\n    (conj (! (quot number base) base)\n          (rem number base))))","user":"59225498e4b09b4ee5954c8c"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n    (->> n\n      (iterate #(int (/ % b)))\n      (take-while pos?)\n      (map #(rem % b))\n      (reverse))))","problem":137,"user":"50901b2ee4b0ea685a20f774"},{"code":"(fn int2base [n base]\n  (if (< n base) (vector n) (conj (int2base (quot n base) base) (rem n base))))","problem":137,"user":"50733b31e4b0e3170b5a869a"},{"code":"(fn [n r]\n  (map #(.indexOf \"0123456789abcdefghijklmnopqrstuvwxyz\" (str %))\n    (clojure.pprint/cl-format nil \"~vr\" r n)))","problem":137,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn [n b]\n  (or (seq (loop [v '()\n                  x n]\n             (if (zero? x)\n               v\n               (recur (cons (mod x b) v)\n                      (quot x b)))))\n      [0]))","problem":137,"user":"52951156e4b02ebb4ef7501b"},{"problem":137,"code":"(fn [nn base] (if (= 0 nn) [0] (\n(fn digs [n base] (if (= n 0) [] (conj (digs (int (/ n base)) base) (mod n base))))\n                                nn base)))","user":"5b4b4052e4b02d533a91bc9a"},{"problem":137,"code":"(fn [num base]\n  (loop [num num result '()]\n    (if (< num base)\n      (conj result num)\n      (recur (quot num base) (conj result (mod num base))))))","user":"4f7207d3e4b07046d9f4f019"},{"problem":137,"code":"(fn [n base]\n   (if (= 0 n)\n     [0]\n     (loop [n n r ()]\n       (if (= 0 n)\n         r\n         (recur (quot n base) (conj r (mod n base)))))))","user":"557c6ca6e4b05c286339e0c4"},{"problem":137,"code":"(partial (fn [output number base]\n                   (if (zero? (quot number base))\n                     (cons (mod number base) output)\n                     (recur (cons (mod number base) output) (quot number base) base))) '())","user":"58db362be4b0a4d5acaab675"},{"problem":137,"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b) (mod n b)) ))","user":"594c1baae4b07ddc2dafae59"},{"problem":137,"code":"(fn digit-b [digit base]\n  \n  (if (= 0 digit) [0]\n  (let [iter (int (Math/floor (/ (Math/log digit) (Math/log base))))]\n    (loop [left iter\n           remaining digit\n           result []\n           ]\n      (if (< left 0) result\n                     (let [val (int (Math/floor (/ remaining (Math/pow base left ))))\n                           left-n (- left 1)\n                           remaining-n (* val (int (Math/pow base left) ))\n                           ]\n                         (recur left-n (- remaining remaining-n) (conj result val ) )\n\n                       )\n                     )\n        ))))","user":"575ebba3e4b08062f99a4e70"},{"code":"(fn bc [num base]\n  (if (< num base)\n    [num]\n    (let [q (quot num base)\n          r (rem num base)]\n      (conj (bc q base) r))))","problem":137,"user":"4dade9e9c9a9d6ed4799dc57"},{"code":"#(if (zero? %) [0]\n       (ffirst\n        (drop-while (comp not zero? second)\n                    (iterate (fn [[r x]] [(conj r (rem x %2)) (quot x %2)])\n                             ['() %]))))","problem":137,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [n b] \n           (if (= n 0)\n               [0]\n             (loop [c (reverse (take-while #(<= % n) (iterate #(* % b) 1))) x n r []] \n                   (if (empty? c)\n                       r\n                     (recur (rest c) (mod x (first c)) (conj r (quot x (first c))))))))","problem":137,"user":"511b810ce4b07ab9ec456182"},{"problem":137,"code":"(fn toBase [x B]\n (if (zero? x) '(0)\n  (loop [x x, res '()]\n   (if (zero? x) res\n   \t(recur (quot x B) (cons (rem x B) res))))))","user":"54b54d1be4b05787c3b1639c"},{"code":"(fn [n b]\n            (if (zero? n) [0] (loop [coll [] num n]\n                (if (zero? num) \n                    (reverse coll)\n                    (recur (conj coll (rem num b))\n                           (quot num b))))))","problem":137,"user":"4f3cd535e4b0e243712b1f56"},{"problem":137,"code":"(fn digits [num base] \n                 (if (zero? num)\n                   [0]\n                   (reverse (map second \n                                 (take-while #(not= [0 0] %) \n                                             (iterate (fn [[a b]] [(quot a base) (rem a base)]) \n                                                      [(quot num base) (rem num base)]))))))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":137,"code":"(fn brington[c n]\n  (let [j (fn l[c n](if (> c 0) (cons (mod c n) (l (quot c n) n))))]\n    (if (= 0 c)\n      [0]\n      (vec (reverse (j c n))))\n    )\n  )","user":"5731e36be4b0cd1946bd0fc9"},{"code":"(fn change-base [number new-base]\n  (vec \n    (loop [acc () n number]\n      (let [q (quot n new-base)\n            r (rem n new-base)]\n        (if (= q 0)\n            (cons r acc)\n            (recur (cons r acc) q))))))","problem":137,"user":"529e3a4fe4b04e0c58e87b92"},{"problem":137,"code":"(fn to-base [n b]\n  (loop [n n\n         l ()]\n    (if (zero? n)\n      (if (empty? l) [0] l)\n      (recur (quot n b) (conj l (mod n b))))))","user":"5880e38fe4b0f1effa3b7625"},{"problem":137,"code":"(fn [n base]\n  (loop [x n xs ()]\n    (let [xs' (conj xs (mod x base))]\n      (if (> base x)\n        xs'\n        (recur (quot x base) xs')))))","user":"5383668ee4b06839e8705edd"},{"code":"(fn digits [n base]\n  (loop [n n digits ()]\n    (if (< n base)\n      (conj digits n)\n      (recur (quot n base) (conj digits (rem n base))))))","problem":137,"user":"4ddb696b535d02782fcbe9fa"},{"problem":137,"code":"(fn [nn base] \n  (vec (reverse \n        (loop [acc []\n        \t n nn]\n    \t(if (< n base)\n      \t(conj acc n)\n      \t(recur (conj acc (mod n base)) (quot n base)))\n    \t)))\n  )","user":"53ac815de4b047364c04445e"},{"code":"(fn [number radix]\r\n  (vec ((fn [n r]\r\n          (loop [result [] num n]\r\n            (if (zero? num) (if (empty? result) [0] result) (recur (cons (rem num r) result) (quot num r))))\r\n  ) number radix)\r\n  ))","problem":137,"user":"50481b70e4b0ec70b3ef8d98"},{"problem":137,"code":"(fn base [x y] \n    (if \n        (< x y) \n        [x] \n        (conj  (base (quot x y) y) (mod x y))\n     )\n   )","user":"56e6e1e6e4b02e7e935eb6cf"},{"problem":137,"code":"(fn digits-and-bases [n base]\n  (if (< n base)\n    [n]\n    (conj (digits-and-bases (/ (- n (mod n base)) base) base)\n      (mod n base))))","user":"57c0917be4b05aa3c4741c95"},{"problem":137,"code":"(fn [n b]\n  (loop [c n\n         r []]\n    (if (zero? c) (if (empty? r) [0] (reverse r))\n                  (recur (quot c b) (conj r (rem c b))))))","user":"529dfc6de4b04e0c58e87b8a"},{"problem":137,"code":"(fn f [x b]\n  (if (< x b)\n    [x]\n    (conj (f (quot x b) b) (rem x b))))","user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn f [ m b ]\n    (if (<= b m)\n      (conj (f (quot m b) b) (rem m b))\n      [ m ]))","problem":137,"user":"4e860e85535db62dc21a62f1"},{"problem":137,"code":"#(let [help (fn [n res]\n               (if (< n %2)\n                 (conj res n)\n                 (recur (quot n %2) (conj res (rem n %2)))\n                 )\n               )]\n    (help %1 '())\n    )","user":"544e9022e4b0e3978000698b"},{"code":"(fn num-conv [num base]\n  (if (zero? num) '(0)\n    (loop [result []\n           n num]\n      (if (zero? n)\n        (reverse result)\n        (recur (conj result (mod n base)) (quot n base))))))","problem":137,"user":"52319066e4b0e2e8de81d1e9"},{"code":"(fn digits [n b]\n  (reverse (loop [digits [], n n]\n             (let [[q r] ((juxt quot rem) n b)\n                   new-digits (conj digits r)]\n               (if (zero? q)\n                 new-digits\n                 (recur new-digits q))))))","problem":137,"user":"539a2901e4b0b51d73faaf0f"},{"problem":137,"code":"(fn dig-base\n  [dig d]\n   (lazy-seq\n       (if (< dig d)\n         [dig]\n         (concat (dig-base (quot dig d) d) [(rem dig d)]))))","user":"565654dae4b0f9d632dd849f"},{"problem":137,"code":"(fn[n b]\n  (let [f (fn f [m] (if (= m 0) [] (conj (f (quot m b)) (mod m b))))]\n  (if (= n 0) [0] (f n))))","user":"56824e1be4b0945ebc182a91"},{"problem":137,"code":"(fn [x b]\n  (let [digitseq (fn digitseq ([] (digitseq 1)) ([i] (cons i (lazy-seq (digitseq (* i b))))))\n        myseq (reverse (take-while #(<= % x) (digitseq)))]\n    (if (< x b)\n      [0]\n      ((fn searching [y dseq]\n         (let [result (quot y (first dseq))]\n           (if (= 1 (count dseq))\n             [result]\n             (cons result (searching (- y (* result (first dseq))) (rest dseq))))))\n       x myseq))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         res ()]\n    (if (zero? n)\n      (if (seq res) res '(0))\n      (recur (Math/floor (/ n base)) (conj res (int (mod n base)))))))","user":"5ccb0bbee4b0ccb06196287c"},{"problem":137,"code":"(fn base [n b]\r\n  (if (>= n b)\r\n    (conj (base (quot n b) b) (mod n b))\r\n    [n]))","user":"5470699ae4b00cfc9eacc1b6"},{"problem":137,"code":"(fn [n b]\n  (letfn [(s [r n b]\n            (if (= 0 n)\n              r\n              (s (conj r (mod n b))\n                    (quot n b)\n                    b)))]\n    (if (= 0 n)\n      '(0)\n      (s '() n b))))","user":"5405885ee4b0addc1aec6668"},{"code":"(fn f ([n b]\n  (if-let [c (last (take-while #(not (zero? (int (/ n %)))) \n                  (iterate #(* b %) 1)))]\n  (f n b c)\n  [0]))\n  ([n b c] \n  (if (= 1 c) (list n)\n  (let [rst (int (/ n c))]\n   (conj (f (- n (* c rst)) b (/ c b)) rst)))))","problem":137,"user":"4e0e0529535d04ed9115e7b9"},{"problem":137,"code":"#(if (zero? %1) [0] (\n\t(fn f [[n b r]] (if (zero? n) r (f [(quot n b) b (conj r (mod n b))])))\n   [%1 %2 '()]))","user":"54bd04e7e4b0ed20f4ff6ed8"},{"problem":137,"code":"(fn [x b] (if (= 0 x) [0] (reverse (map #(rem % b) (take-while pos? (iterate #(quot % b) x))))))","user":"53b15e6ee4b047364c04448f"},{"code":"(fn [x base]\r\n  (if (= x 0) [0]\r\n  (loop [y x ds ()]\r\n    (if (= 0 y) ds\r\n      (recur (quot y base) (cons (rem y base) ds) )))))","problem":137,"user":"502a9fdee4b095a7adb898b4"},{"code":"(fn digits [number base]\n  (let [work-fn (fn [n]\n                  [(mod n base) (int (/ n base))])]\n    (if (zero? number)\n      [0]\n      (loop [[digit num] (work-fn number),\n             digits nil]\n        (if (zero? num)\n          (cons digit digits)\n          (recur (work-fn num) (cons digit digits)))))))","problem":137,"user":"4eae5fe4535d7eef30807325"},{"problem":137,"code":"(fn bs [n b] \n  (if (< n b) \n    [n] \n    (conj (bs (quot n b) b) (mod n b))))","user":"53b39d82e4b047364c0444a6"},{"code":"(fn ! [n rx]\n  (loop [a n rslt '()]\n    (let [rm (mod a rx)\n    z (int (/ a rx))]\n      (if (< a rx)\n\t(cons rm rslt)\n\t(recur z (cons rm rslt))))))","problem":137,"user":"4e7d1c22535db169f9c796c5"},{"problem":137,"code":"(fn digits [n base] (if (= n base) '(1 0) (loop [v (/ n base) digits (list (int (rem n base)))] (if (> 1 v) digits (recur (/ v base) (conj digits (int (rem v base))))))))","user":"5609d328e4b05f002753deee"},{"problem":137,"code":"#(if (zero? %2) (if (empty? %) '(0) %)  (recur (conj % (mod %2 %3)) (quot %2 %3) %3)) '()","user":"576e3258e4b0979f89651574"},{"problem":137,"code":"(fn [n r]\n (loop [c n out []]\n   (if (= c 0)\n     (reverse (if (empty? out) [0] out))\n     (recur (quot c r) (conj out (mod c r))))))","user":"5958cef6e4b066ee0a44af94"},{"code":"#(if (= %1 0) [0] (reverse ((fn f [n d] (if (= 0 n) '() (cons (rem n d) (lazy-seq (f (quot n d) d))))) %1 %2)))","problem":137,"user":"4e9609ad535dbda64a6f6b3e"},{"problem":137,"code":"(fn [starting-num base]\n  (loop [acc (list)\n         n starting-num]\n    (if (= 0 n)\n      (or (not-empty acc) [0])\n      (recur (cons (mod n base) acc) (quot n base)))))","user":"58d2af83e4b03c36ff7e5907"},{"code":"(fn db [n b]\n  (let [m (mod n b) q (quot n b)]\n  (cond\n    (= n 0) [0]\n    (= q 0) [m]\n    :else (conj (db (quot n b) b) (mod n b))\n  )\n  )\n)","problem":137,"user":"4f8b56dae4b02e764a0a517e"},{"problem":137,"code":"(fn [dd rd]\n  (loop [ret [], nn dd]\n  (if (= 0 nn)\n      (if (empty? ret) [0] ret)\n      (let [dd (rem nn rd), nn0 (quot nn rd)]\n          (recur (cons dd ret) nn0))))\n)","user":"593f95d8e4b069cdc2982be3"},{"code":"(fn [n b]\n    (loop [n' n, r '()]\n          (if (= n' 0) (if (empty? r) '(0) r)\n            (recur (quot n' b) (cons (rem n' b) r)))))","problem":137,"user":"508157b2e4b0946d0443855c"},{"code":"(fn i [n b]\n   (let [q (quot n b)\n         m (mod  n b)]\n     (if (zero? q) [m]\n         (conj (i q b) m))))","problem":137,"user":"52c25645e4b07a9af579237d"},{"problem":137,"code":"(fn [x b]\n  (loop [x1 x s [ ]]\n    (let [q (quot x1 b) r (rem x1 b)]\n      (if (= q 0)\n        (reverse (conj s r))\n        (recur q (conj s r))))))","user":"566d71b1e4b0a866af6896ca"},{"problem":137,"code":"(fn [n b]\n  (loop [m (quot n b)\n         r (mod n b)\n         acc '()]\n    (if (= m 0)\n      (cons r acc)\n      (recur (quot m b) (mod m b) (cons r acc)))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"problem":137,"code":"(fn rebase [n b] (if (< n b) [n] (conj (rebase (quot n b) b) (rem n b))))","user":"558b50d5e4b027778923762b"},{"problem":137,"code":"(fn [value base]\n  (if (= value 0)\n    [0]\n        (loop [v value result []]\n          (if (= v 0)\n            (reverse result)\n            (recur (int (/ v base)) (conj result (mod v base)))))))","user":"541f89a5e4b01498b1a71a99"},{"code":"#((fn [n b xs]\n    (if (< n b)\n      (cons n xs)\n      (recur (quot n b) b (cons (rem n b) xs)))) % %2 [])","problem":137,"user":"4ef6e689535dced4c769f24f"},{"problem":137,"code":"(fn digits [x base]\n   (if (< x base)\n     [x]\n     (conj (digits (quot x base) base) (mod x base))))","user":"53ed6976e4b0d648e757f4c4"},{"problem":137,"code":"(fn [n r]\n  (loop [x (quot n r)\n         y [(rem n r)]]\n    (if (= 0 x)\n      (reverse y)\n      (recur (quot x r) (conj y (rem x r))))))","user":"54d753ebe4b0a52adc2e2029"},{"code":"(fn dob [n b] (if (= 0 (quot n b))\n                   (conj [] (mod n b))\n                   (conj (dob (quot n b) b) (mod n b))))","problem":137,"user":"526a3412e4b03e8d9a4a721e"},{"problem":137,"code":"(fn [val base]\n  (if (= val 0) \n    [0]\n    (loop [x val, res '()]\n      (if (> x 0)\n        (recur (int (/ x base)) (conj res (mod x base)))\n        res))))","user":"54d22860e4b0e8a36923e5ef"},{"problem":137,"code":"(fn dab\n  ([d b] (dab d b []))\n  ([d b r]\n   (if (= 0 d)\n     (if (empty? r) [0] r)\n     (recur (quot d b) b (cons (rem d b) r)))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn f [n b]\n  (conj (if (< 0 (quot n b))\n          (f (quot n b) b)\n          [])\n        (rem n b)))","problem":137,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":137,"code":"(fn z [num sys]\n  (let [f (fn x [n] ((juxt quot mod) n sys))]\n    (loop [num num res '()]\n      (let [[r m] (f num)]\n        (cond\n          (= 1 r) (into [] (conj res m r))\n          (= 0 r) (into [] (conj res m))\n          :else (recur r (conj res m)))))))","user":"583667c7e4b089d5ab817cfb"},{"code":"#(loop [r [] d %1]\n  (if (zero? d)\n    (if (empty? r) [0] r)\n      (recur (cons (rem d %2) r) (int (/ d %2)))))","problem":137,"user":"4db4714f535dc0f10411755a"},{"problem":137,"code":"(fn digits [n b]\n  (if (zero? (quot n b))\n    [(mod n b)]\n    (conj (digits (quot n b) b) (mod n b))))","user":"54125eeee4b01498b1a719d3"},{"code":"(fn [n b] (loop [r [(rem n b)] n (quot n b)] (if (= 0 n) r (recur (cons (rem n b) r) (quot n b)))))","problem":137,"user":"500854c4e4b028e089d3518c"},{"problem":137,"code":"(fn representation-in-base [n base]\n  (letfn [(generate-sequence* [result inter-n]\n            (let [quotient (quot inter-n base)\n                  remainder (rem inter-n base)]\n              (if (zero? quotient)\n                (conj result remainder)\n                (recur (conj result remainder) quotient))))]\n    (reverse (generate-sequence* [] n))))","user":"53fd66a4e4b0de5c418485e3"},{"problem":137,"code":"(fn [n base]\n  (loop [res [] n n]\n    (if (= 0 n)\n      (if (empty? res)\n        (vector 0)\n        (reverse res)\n        )\n      (let [value (rem n base)]\n        (recur (conj res value) (/ (- n value) base))\n        )\n      )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"problem":137,"code":"(fn [n b]\n  (loop [i n r '()]\n    (if (and (= i 0) (not (empty? r)))\n      r\n      (recur (int (/ i b)) (conj r (mod i b))))))","user":"55316b8ae4b076ab5578f825"},{"code":"(fn base [m n]\n  (if (zero? m) [0]\n    (if (zero? (quot m n)) [m]\n        (conj (base (quot m n) n) (rem m n)))))","problem":137,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn digs [n b]\n  (if (< n b)\n    [n]\n    (conj (digs (quot n b) b)\n          (mod n b))))","problem":137,"user":"4fe87e56e4b07c9f6fd12c40"},{"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n    (reverse (map #(rem % b)\n                  (take-while #(not= 0 %)\n                              (iterate #(int (/ % b)) n))))))","problem":137,"user":"4f32a7f1e4b0d6649770a095"},{"problem":137,"code":"(fn in-base [x base]\n  (let [restt (/ (- x (mod x base)) base)]\n    (if (= 0 restt)\n      [(mod x base)]\n      (conj (in-base restt base) (mod x base)))))","user":"57b99d48e4b0fbc9809a27f2"},{"problem":137,"code":"(fn [number base]\n  (loop [pow base\n         number number\n         result []]\n    (if (and (not (empty? result)) (zero? number))\n      result\n      (recur (* pow base) (- number (rem number pow)) (cons (/ (rem number pow) (/ pow base)) result))\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"code":"(fn bd [n b]\n  (if (zero? n)\n    [n]\n    (loop [rv [] tmp n]\n      (if (zero? tmp)\n        rv\n        (recur (cons (rem tmp b) rv) (quot tmp b))))))","problem":137,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":137,"code":"(fn f [n b]\n   (let [[h & r :as t] (if (= 0 n) [0]\n                           (let [r (rem n b)] (conj (vec (f (/ (- n r) b) b)) r)))]\n     (if (and r (= 0 h)) r\n            t))\n   )","user":"545ddac3e4b01be26fd74676"},{"problem":137,"code":"(fn p\n  [n b]\n  (letfn [(f [n b]\n            (let [r (rem n b)]\n              (if (zero? (quot n b))\n                (vector r)\n                (conj (p (quot n b) b) r))))]\n     (f n b)))","user":"56df6846e4b0ca2494a095fa"},{"code":"(fn [x b]\n  (reverse (loop [x x acc []]\n    (if (= x 0)\n      (if (= acc [])\n        [0]\n        acc)\n      (recur (quot x b) (conj acc (rem x b)))))))","problem":137,"user":"4e7f5a0b535db966e863cc41"},{"problem":137,"code":"(letfn [(explode [n base]\r\n          (if (= n 0) []\r\n              (conj (explode (quot n base) base)\r\n                    (rem n base))))]\r\n  (fn [n base]\r\n    (if (= n 0) [0]\r\n        (explode n base))))","user":"55d0e76ae4b0e31453f64a40"},{"problem":137,"code":"(fn bassify [num base]\n   (if (= num 0)\n     (list 0)\n     (loop [num num\n            list ()] \n       (if (< 0 num)\n         (let [digit (mod num base)]\n           (recur (quot num base) (cons digit list)))\n         list))))","user":"567476bde4b05957ce8c6139"},{"code":"(fn [x b]\n  (loop [y  [(rem x b)]\n         z  (quot x b)]\n    (if (= 0 z)\n      y\n      (recur (cons (rem z b) y) (quot z b)))))","problem":137,"user":"4fe8fda4e4b0547ebccb2438"},{"problem":137,"code":"(fn to-radix [n radix]\n  (let [to-radix-acc\n        (fn [acc x]\n          (if (< x radix) (-> (conj acc x) reverse vec)\n                          (recur (conj acc (rem x radix)) (quot x radix))))]\n    (to-radix-acc [] n)))","user":"518279abe4b0353c468deb65"},{"code":"(fn digits\n  ([n] (digits n 10))\n  ([n b]\n     (if (or (zero? n) (zero? b))\n       '(0)\n       (loop [input n\n              base b\n              result '()]\n         (if (zero? input)\n           result\n           (recur (quot input base) base (cons (mod input base) result)\n         ))\n       ))))","problem":137,"user":"529d4f4be4b04e0c58e87b79"},{"problem":137,"code":"(fn cs11 [n m]\n  (loop [n n res '()]\n    (if (zero? n)\n      (if (empty? res) '(0) res)\n      (recur (int (/ n m))\n             (conj res (mod n m))))))","user":"5a4443cae4b0447ef91cc60f"},{"code":"(fn [v b] (loop [v v r ()] (if (zero? v) (if (empty? r) '(0) r) (recur (quot v b) (cons (mod v b) r)))))","problem":137,"user":"50ed4626e4b01236b1d4983c"},{"problem":137,"code":"(fn [n base]\n (if\n  (zero? n)\n  [0]\n  (rest\n   (reverse\n    (map\n     #(mod % base)\n     (take-while\n      (comp not nil?)\n      (iterate\n       #(if\n         (zero? %)\n         nil\n         (int (/ % base))) n)))))))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn [nmbr base]\n  (letfn [(convert [n b]\n            (let [q (int (/ n b))\n                  r (mod n b)]\n              (if (zero? q)\n                [r]\n                (concat [r] (convert q b)))))]\n    (reverse (convert nmbr base))))","problem":137,"user":"515a6151e4b0394f658fe241"},{"code":"(fn [n b]\n  (if (< n b)\n    [0]\n    (let [\n      d (reverse (take-while #(<= % n) (iterate #(* % b) 1)))\n      m (take (count d) (cons n (map #(rem n %) d)))]\n      (map #(int (/ % %2)) m d))))","problem":137,"user":"4e80e0f2535db62dc21a62b8"},{"problem":137,"code":"(fn [n base]\n    (loop [acc [] m n]\n      (cond\n        (zero? m) (if (empty? acc) [0] (reverse acc))\n        :else (recur (conj acc (mod m base)) (quot m base)))))","user":"5782018de4b0d36ec5835e8e"},{"problem":137,"code":"(fn [your-num n]\n                    (loop [quotient (int (/ your-num n)), bin-seq (list (mod your-num n))]\n                      (if (zero? quotient)\n                        bin-seq\n                        (recur (int (/ quotient n)) (conj bin-seq (mod quotient n))))))","user":"5cf72682e4b0b71b1d808a68"},{"problem":137,"code":"(fn [n b]\n  (let [f (fn s [n b] (concat\n                       (if (zero? (quot n b)) \n                         [] \n                         (s (quot n b) b))\n                       [(mod n b)]))]\n    (f n b)))","user":"543d5c61e4b032a45b86934d"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [n n d '()]\n      (if (zero? n) d\n        (recur (quot n b) (cons (rem n b) d))))))","user":"53d78b64e4b0e771c3025466"},{"code":"(fn [n b]\n  (loop [a () q n]\n    (if (zero? q)\n        (if (empty? a) '(0) a)\n        (recur (cons (mod q b) a) (quot q b)))))","problem":137,"user":"4fd96694e4b05e33b9224f37"},{"problem":137,"code":"(fn [n b]\n  (loop [acc [] x n]\n    (if (zero? x)\n      (if (empty? acc) [0] (reverse acc))\n      (recur (conj acc (mod x b)) (quot x b)))))","user":"52ce1abfe4b07d0d72b27389"},{"problem":137,"code":"(fn to-base [n base]\n  (if (> base n)\n    [n]\n    (let [ digit (rem  n base)\n           other (quot n base) ]\n      (conj (to-base other base) digit))))","user":"54d6f22de4b0a52adc2e2023"},{"problem":137,"code":"(fn conv [n b] (if (< n b) [n] (conj (conv (quot n b) b) (rem n b))))","user":"586b6a0ae4b01531a375e957"},{"problem":137,"code":"(fn x[a b]\n  (let [ d (quot a b) r (mod a b) ]\n    (if(= 0 d)\n      [r]\n      (conj (x d b) r)\n      )))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn digit-base\n  [d b]\n  (loop [id d\n         res '()]\n    (if (zero? id)\n      (if (empty? res) [0] (into [] res))\n      (recur (quot id b)\n             (cons (rem id b) res)))))","problem":137,"user":"4f2942ace4b0d6649770a01e"},{"code":"(fn [n b]\n  (loop [r (quot n b) d (list (rem n b))]\n    (if (zero? r)\n      (vec d)\n      (recur (quot r b) (conj d (rem r b))))))","problem":137,"user":"5341b141e4b00652c8746ecf"},{"code":"(fn digBase [x b] (if (>= x b) (conj (digBase (quot x b) b ) (rem x b)) [x]))","problem":137,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [num base]\n(if (zero? num) [0]\n(if (= num base) [1 0]\n    (loop [l (reverse\n              (take-while #(> num %)\n                          ((fn rec [n x]\n                             (lazy-seq\n                              (cons n (rec (* n x) x)))) 1 base)))\n           r num a []]\n      (if (empty? l) a\n          (let [y (first l)\n                z (if (>= r y)\n                    (quot r y) 0)]\n            (recur (rest l) (- r (* z y)) (conj a z))))))))","problem":137,"user":"52d1e364e4b0d9f9285948e7"},{"problem":137,"code":"(fn ->radix [n b]\n  (loop [x n\n         vs (list)]\n    (if (not (zero? x))\n      (recur (quot x b) (conj vs (mod x b)))\n      (if (empty? vs) [0] vs))))","user":"53fe1b42e4b0de5c418485f1"},{"code":"(fn t [q b]\n           (if (pos? q)\n               (let [r (rem q b)\n                     Q (quot q b)]\n                     (if (pos? Q) (conj (t Q b) r) [r]))\n               [0]))","problem":137,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [v n]\n (letfn [ (g [a r] \n             (if (< a n) (cons a r) (recur (quot a n) (cons (mod a n) r))))] (g v [])))","problem":137,"user":"4ebb78a2535dfed6da9c6d70"},{"code":"(fn [n b]\n         (if (zero? n) [0]\n             (map second\n                  (reverse (rest\n                            (take-while #(not (= % [0 0]))\n                                        (iterate (fn [[n r]] [(int (/ n b)) (rem n b)]) [n 0])))))))","problem":137,"user":"4f0664bd535dcb61093f6c0f"},{"code":"(fn itos2 [n rad]\n    (reverse\n        (loop [q (quot n rad), r (rem n rad), out []]\n        (println \"q:\" q \"r:\" r \"out:\" out)\n        (if (< q rad)\n            (if (zero? q)\n                (conj out r)\n                (conj out r q))\n            (recur (quot q rad) (rem q rad) (conj out r))))))","problem":137,"user":"4f128865535d64f603146428"},{"code":"#(if (= %2 0)\n   (or % [0])\n   (recur (cons (rem %2 %3) %)\n          (quot %2 %3)\n          %3))\nnil","problem":137,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn digits [x b]\n  (if (< x b)\n    [x]\n    (conj\n      (digits (quot x b) b)\n      (rem x b))))","problem":137,"user":"4f4e7c01e4b03ad3f0c10cc9"},{"code":"(let [div unchecked-divide-int\n        rem unchecked-remainder-int]\n    (fn [n base]\n      (if (zero? n) [0]\n          (loop [n n result []]\n            (if (zero? n) (reverse result)\n                (recur (div n base)\n                       (conj result (rem n base))))))))","problem":137,"user":"50bca033e4b0594b91591c5d"},{"problem":137,"code":"(fn [n b]\n  (loop [d '() n n]\n    (if (> n 0) \n      (recur (conj d (mod n b)) (int (/ n b)))\n      (if (zero? (count d)) '(0) d))))","user":"5405ae2be4b0addc1aec6671"},{"code":"(fn [n base]\r\n  (if (zero? n)\r\n    [0]\r\n    ((fn [n base r]\r\n       (if (zero? n)\r\n   r\r\n\t (let [t (quot n base)\r\n\t       o (mod n base)]\r\n\t   (recur t base (cons o r)))))\r\n     n base nil)))","problem":137,"user":"507437c2e4b054001656acd0"},{"problem":137,"code":"(fn [n b] \n  (loop [n n acc nil]\n  (if (zero? n) (or acc [n]) \n    (recur (quot n b) (cons (mod n b) acc)))))","user":"53767991e4b06839e8705e25"},{"code":"(fn n-base-b\n    ([n b]\n       (let [power-map (zipmap\n                        (reverse (take-while #(<= % n)\n                                             (conj (iterate #(* % b) b)\n                                                   0)))\n                        (repeat 0))\n             ]\n         (n-base-b n b power-map)))\n    ([n b power-map]\n       (println n b power-map)\n       (let [hash-result (fn hash-result [n b power-map]\n                           (if (< n b)\n                             (assoc power-map 0 n)\n                             (let [next-divisor (first (drop-while #(> % n)\n                                                                   (reverse (sort (keys power-map)))))\n                                   ]\n                               (hash-result (- n next-divisor)\n                                            b\n                                            (merge-with + power-map {next-divisor 1})))))\n         ]\n       \n         (reverse (vals (hash-result n b power-map)))))\n         )","problem":137,"user":"4daea889edd6309eace4d15b"},{"problem":137,"code":"(fn base [x b]\n  (if (zero? x)\n    [0]\n    (loop [x x acc []]\n      (if (zero? x)\n        acc\n        (recur (int (/ x b)) (cons (mod x b) acc))\n        )\n      )\n    )\n  )","user":"56979bb7e4b0e0b3d3318cac"},{"problem":137,"code":"#((fn f [c a] (if (< c %2) (cons c a) (f (quot c %2) (cons (rem c %2) a)))) % '())","user":"4faf97d8e4b081705acca258"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0) [0]    \n  (apply vector (reverse ((fn f [n]\n   (if (> n 0)\n  (conj (lazy-seq (f (int (/ n b))))(mod n b)))) n)))))","user":"56102f50e4b05f002753df6b"},{"problem":137,"code":"(fn digitSeq [n b]\n  (loop [currNum n\n         currDigits '()]\n    (if (= currNum 0)\n      (if (empty? currDigits)\n        '(0)\n        currDigits)\n      (recur (int (/ currNum b)) (conj currDigits (mod currNum b))))))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":137,"code":"(fn f [n b]\n  (if (>= n b)\n    (concat (f (int (/ n b)) b) [(mod n b)])\n    [n]))","user":"56949fc5e4b0dcc4269f4120"},{"code":"(fn toseq [n,r]\n    (if (< n r)\n      [n]\n      (conj (toseq (quot n r) r) (mod n r))))","problem":137,"user":"4e8b98fc535d65386fec2124"},{"code":"(fn prob-0137\n  [num base]\n  (let [dig-div (fn dig-div\n                  [n in-divs]\n                  (let [divs (seq in-divs)]\n                    (if-not divs\n                      []\n                      (let [div0 (first divs)]\n                        (cons (int (/ n div0)) (dig-div (int (rem n div0)) (rest divs)))))))\n        ]\n    \n  (let [dig-vals (reverse (take-while #(<= % (max 1 num)) (iterate #(* % base) 1)))]\n    (dig-div num dig-vals))))","problem":137,"user":"4f047c07535dcb61093f6bcd"},{"problem":137,"code":"(fn [number base]\n  (loop [remain number acc []]\n    (if (zero? remain)\n      (if (empty? acc) [0] (reverse acc))\n      (recur\n        (quot remain base)\n        (conj acc (rem remain base))))))","user":"60b2aaebe4b0e0fa5f1b4228"},{"problem":137,"code":"(fn my-digits-base [x base]\n  (if (< x base) [x]\n    (conj (my-digits-base (quot x base) base) (rem x base))))","user":"54769c7ae4b0c51c1f4d72a8"},{"problem":137,"code":"(fn digits\n  ([n base] (digits n base ()))\n  ([n base result]\n   (if (zero? (quot n base))\n     (cons (rem n base) result)\n     (recur (quot n base)\n            base\n            (cons (rem n base) result)))))","user":"53dd37aee4b0d874e779ae28"},{"code":"(fn [n radix]\n  (if (zero? n)\n    [0]\n    (reverse\n     (map\n      #(int (rem % radix))\n      (take-while (complement zero?)\n                  (iterate #(quot % radix)\n                           n))))))","problem":137,"user":"5014754de4b094324338f8e5"},{"code":"(fn f [n b]\n  (let [q (quot n b)\n        r (rem n b)]\n    (if (zero? q)\n      [r]\n      (conj (f q b) r))))","problem":137,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":137,"code":"(fn c137\n  ([n b]\n   (if (= n 0)\n     [n]\n     (c137 n b [])))\n  ([n b r]\n   (if (= n 0)\n     []\n     (conj (c137 (int (/ n b)) b r) (mod n b)))))","user":"57d0cd58e4b0bd073c20235e"},{"problem":137,"code":"(let\n  [powersof (fn [b] (iterate #(* b %) 1))\n   powers-lt (fn [b n] (reverse (take-while #(>= n %) (powersof b))))\n   quots (fn quots [n s]\n           (if (seq s)\n             (let [q-fst (quot n (first s))\n                   r-fst (rem n (first s))]\n               (cons q-fst (quots r-fst (rest s))))))\n   digibase (fn [n b]\n              (if (zero? n)\n                (list n)\n                (quots n (powers-lt b n))))]\n  #(digibase %1 %2))","user":"590b055ae4b047aa04b199c9"},{"problem":137,"code":"(fn [n base]\n  (loop [m '(), n n]\n    (if (and (zero? n) (seq m))\n      m\n      (recur (conj m (rem n base)) (quot n base)))))","user":"5b96800ae4b0c0b3ffbd4a7b"},{"problem":137,"code":"(fn digits-by-base [num base]\n  (if (= num 0)\n    [0]\n    (loop [res '()\n           curr num]\n      (if (= curr 0)\n        (vec res)\n        (recur (conj res (mod curr base)) (int (/ curr base)))))))","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [x y]\n  (if (= x 0)\n    [0] \n    ((fn base [v b]\n      (if (= 0 v)\n        []\n        (conj (base (quot v b) b) (mod v b)))) x y)))","problem":137,"user":"4ec07699535dfed6da9c6da2"},{"problem":137,"code":"(fn [d b]\n  (if (zero? d)\n    [0]\n   (->> d\n    (iterate #(quot % b))\n    (take-while pos?)\n    reverse\n    (map #(mod % b)))))","user":"5d29c06be4b01671435dbc6b"},{"code":"(fn [n b]\n  (or (seq (reverse (map #(mod % b)\n                         (take-while pos?\n                           (iterate #(quot % b) n)))))\n      [0]))","problem":137,"user":"4e8612f8535db62dc21a62f2"},{"problem":137,"code":"(fn d-n-b [n b]\n    (if (< n b)\n      [n]\n      (conj (d-n-b (quot n b) b) (rem n b))))","user":"51b91b08e4b0e871ca4958f8"},{"problem":137,"code":"(fn [n b]\n  (loop [x n y b res ()]\n    (if (and (= x 0) (not= y b)) res\n      (recur (- x (mod x y)) (* y b) (cons (/ (mod x y) (/ y b)) res)))))","user":"53a1b5c8e4b0ca733b9744c1"},{"code":"#(if (zero? %) [0]\r\n  (loop [a [] x %] (if (zero? x) a (recur (cons (rem x %2) a) (quot x %2)))))","problem":137,"user":"4fca2ef0e4b0ee37620e184e"},{"code":"(fn digits [n b]\n  (letfn [(helper [i]\n                  (if (zero? i) []\n                    (let [r (rem i b)]\n                      (conj (helper (int (/ i b))) r))))]\n    (if (zero? n) [0] (helper n))))","problem":137,"user":"515ffbfbe4b0e2be8aa20bdd"},{"problem":137,"code":"(fn[n b]\n  (loop [a '() n n]\n    (if(zero? n)\n      (or (seq a) [0])\n      (recur\n       (conj a (rem n b))\n       (quot n b)))))","user":"4dac39a28cc9d6edb8beb0b3"},{"code":"#(loop [n % ds nil]\n   (if (zero? n)\n     (if ds ds [0])\n     (recur (quot n %2) (conj ds (mod n %2)))))","problem":137,"user":"51bd1a0de4b0df1216cefd93"},{"problem":137,"code":"(fn [v b]\n  (loop [v v b b acc []]\n    (if (= v 0) \n      (if (empty? acc) \n        [0]\n        acc)\n      (let [vp (quot v b)\n            r (rem v b)]\n        (recur vp b (cons r acc))))))","user":"54b13a40e4b09f271ff37d1b"},{"code":"(fn f [n b]\n  (loop [n n a []]\n    (if (> b n)\n      (rseq (conj a n))\n      (let [[q r] ((juxt quot rem) n b)]\n        (recur q (conj a r))))))","problem":137,"user":"4db1f7d223724b71670a9c07"},{"code":"(fn f [v base] (if (< v base) [v] (concat (f (quot v base) base) [(mod v base)])))","problem":137,"user":"4f9510b5e4b0dcca54ed6cc7"},{"code":"(fn getseq [value base]\r\n  (loop [result [] value value]\r\n    (if (> value 0)\r\n      (recur (cons (mod value base) result) (quot value base))\r\n      (if (empty? result)\r\n        [0]\r\n        result))))","problem":137,"user":"4fd170fce4b04c3a95aa0411"},{"problem":137,"code":"(fn to-base [num base]\n  (loop [result [] next num]\n    (let [next-in-base (rem next base)\n          next-to-base (quot next base)]\n      (cond (= 1 next) (cons next result)\n            (and (zero? next) (pos? (count result))) result\n            (and (zero? next) (empty result)) (cons next result)\n            :else (recur (cons next-in-base result) next-to-base)))))","user":"509a25b7e4b0efbae1fbc0a8"},{"problem":137,"code":"(fn digits\n  [n b]\n  (letfn [(backwards-digits [n b]\n            (lazy-seq\n              (if (< n b)\n                [n]\n                (cons (rem n b) (backwards-digits (quot n b) b)))))]\n    (reverse (backwards-digits n b))))","user":"563f1493e4b08d4f616f5ecf"},{"code":"(fn pd [lst num base]\n   (if (and (empty? lst) (= 0 num)) [0]\n   (if (= 0 num) lst (pd (cons (rem num base) lst) (quot num base) base)))) []","problem":137,"user":"4fb86dc9e4b081705acca2d8"},{"problem":137,"code":"(fn f\n    ([n base]\n     (if (= n 0)\n       [0]\n       (f n base true)))\n    ([n base _]\n     (if (= n 0)\n       []\n       (conj (f (quot n base)\n                base\n                true)\n             (mod n base)))))","user":"5be5cebde4b0ed4b8aab4d19"},{"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b) (mod n b))))","problem":137,"user":"51efd397e4b0249c592fbdeb"},{"code":"(fn f [d b]\n    (if (< d b)\n      [d]\n      (conj (f (quot d b) b) (mod d b))))","problem":137,"user":"4e6a0667535d8ccf87e9fe9e"},{"code":"(fn [x b] (if (zero? x) [x] (loop [n x acc (list)] (if (zero? n) (into [] acc) (recur (quot n b) (conj acc (rem n b)))))))","problem":137,"user":"52265e41e4b04e78ff2e1981"},{"code":"#(if(= 0 %1)[0](loop[n %1 d()](if(= 0 n)d(recur(quot n %2)(conj d(rem n %2))))))","problem":137,"user":"4dd4034a535dae65d5c462df"},{"problem":137,"code":"(fn f [n b] (if (< n b) [n] (conj (f (quot n b) b) (mod n b))))","user":"5db92996e4b010eb3c36cd50"},{"code":"(fn f [x b]\n  (if (> b x)\n    [x]\n    (conj (f (quot x b) b) (mod x b))))","problem":137,"user":"4f08b15b535dcb61093f6c40"},{"problem":137,"code":"(fn to-base [n b] \n  (loop [n n, num ()] \n    (if (zero? n) \n      (if (empty? num) '(0) num) \n      (recur (int (/ n b)) (conj num (mod n b))))))","user":"5cee521ce4b0aaa82f1129dd"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n)\n    '(0)\n    (loop [x n\n           s ()]\n      (if (zero? x)\n        s\n        (let [r (mod x b)\n              m (/ (- x r) b)]\n          (recur m (cons r s)))))))","user":"5596a324e4b04c1e5c31d757"},{"code":"(fn trans\n  [n base]\n  (let [q (quot n base) r (rem n base)]\n    (if (zero? q)\n      [r]\n      (conj (trans q base) r))))","problem":137,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [n b]\r\n    (loop [digits (list (rem n b))      ; Initialised like this to handle the 0-case\r\n           n (quot n b)]\r\n      (if (< n 1)\r\n        digits\r\n        (recur (conj digits (rem n b)) (quot n b)))))","problem":137,"user":"50b47c46e4b0c464d223d1b8"},{"problem":137,"code":"(fn [n b] (if (zero? n) (list n)\n    (reverse (map #(rem % b)\n      (take-while pos? (iterate #(quot % b) n))))))","user":"56df62b3e4b0ca2494a095ef"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n) \n    [0]\n    (loop [output '()\n           n n]\n      (if (pos? n)\n        (recur (conj output (mod n base))\n               (quot n base))\n        output))))","user":"5297dcc5e4b02ebb4ef75047"},{"problem":137,"code":"(fn [n base]\n    (vec (loop [n n\n                result (list)]\n           (if (< n base)\n             (cons n result)\n             (recur (quot n base) (cons (rem n base) result))))))","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn [n base]\n  (letfn [(digits [n] (let [q (quot n base) r (rem n base)]\n           (if (> q 0) (cons r (digits q)) (list r))))]\n    (reverse (digits n))))","problem":137,"user":"52015698e4b0d7096e99ddba"},{"problem":137,"code":"(fn [start base]\n  (loop [value start\n         digits '()]\n    (if (and (zero? value) (seq digits))\n      digits\n      (recur\n        (quot value base)\n        (conj digits (rem value base))))))","user":"57eb38dbe4b0bfb2137f5b5e"},{"problem":137,"code":"(fn to-base [n b]\n  (letfn [(to-num [n b]\n            (if (<= n 1) [n]\n                (cons (mod n b) (to-num (quot n b) b))))]\n    (if (= 0 n) [0]\n        (drop-while #(= 0 %) (reverse (to-num n b))))))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":137,"code":"#(loop [result ()\n        n %1]\n   (if (zero? n)\n     (if (empty? result) [0] result)\n     (recur (conj result (rem n %2)) (quot n %2))))","user":"60096aabe4b074f607df667f"},{"problem":137,"code":"(fn out [num base]\n (let [l ((fn r  [num]\n            (if (< num base)\n                      [num]\n                      (into [(mod num base)]  (r (/ (- num (mod num base)) base))))\n            ) num)]\n   (into [] (reverse l))) )","user":"542b764ae4b0dad94371f28d"},{"problem":137,"code":"(fn [n b]\n   (if (zero? n) [0]\n     (loop [remaining n \n            pow 1 \n            accum (list)]\n       (if (pos? remaining)\n        (let [place (Math/pow b (dec pow))\n              digit (int (/ (rem remaining (Math/pow b pow)) place))]\n          (recur (- remaining (* digit place)) \n                 (inc pow) \n                 (conj accum digit)))\n        accum))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":137,"code":"(fn [n b] (if (zero? n) [0] (reverse (loop [x n c []] (let [d (quot x b) r (rem x b)] (if (zero? x) c (recur d (conj c r))))))))","user":"594d4c57e4b07ddc2dafae87"},{"problem":137,"code":"(fn [x b] \n  (if (zero? x) \n    [0] \n    (loop [a [] \n           x x] \n      (if (zero? x) \n        a \n        (recur (cons (rem x b) a) \n               (quot x b))))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [n b]\n  (if (= n 0) '(0)\n    (loop [i n ret '()]\n      (if (= i 0) ret\n        (recur\n          (quot i b)\n          (conj ret (rem i b)))))))","problem":137,"user":"4f050dec535dcb61093f6bef"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n    ((fn c [n1 b1]\n      (if (= n1 0)\n        []\n        (conj (c (int (/ n1 b1)) b1)  (rem n1 b1)))) n b)))","user":"55625903e4b0c656e3ff17d7"},{"problem":137,"code":"(fn [x b]\n  (if (zero? x)\n    [0]\n    (let [f (fn [[r _]]\n              [(int (/ r b)) (rem r b)])]\n      (->> (iterate f (f [x]))\n           (take-while #(not= % [0 0]))\n           (map second)\n           (reverse)))))","user":"53ea5851e4b036ad0777e4e4"},{"code":"(fn [n b]\r\n  (letfn [(worker [s n]\r\n            (if (zero? n)\r\n              s\r\n              (recur (conj s (mod n b)) (quot n b))))]\r\n    (if (zero? n) (list 0)\r\n        (worker '() n))))","problem":137,"user":"4f474f43e4b0d56e7bb92bb7"},{"problem":137,"code":"(fn [num bas]\n  ( if (zero? num)\n   [0]\n  (reverse (map #(rem % bas) (take-while #(not (zero? %)) (iterate  #(quot % bas)  num))))))","user":"581a5fdbe4b0e114eb51a002"},{"problem":137,"code":"(fn [v10 base]\n  (loop [v10 v10\n         digs []]\n    (if (< v10 base)\n      (reverse (conj digs v10))\n      (let [m (mod v10 base)]\n        (recur (/ (- v10 m) base) (conj digs m))))))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn [x r]\n  (if (zero? x)\n    [0]\n    (loop [x x, digits []]\n      (if (zero? x)\n        (reverse digits)\n        (let [[res rm] ((juxt #(quot % r) #(rem % r)) x)]\n        (recur res (conj digits rm)))))))","problem":137,"user":"504c8165e4b09724c857af31"},{"problem":137,"code":"(letfn [(pow [x n]\n            (reduce * (repeat n x)))]\n    (fn [v base]\n      (if (zero? v)\n        [0]\n        (let [powers (reverse (take-while #(<= (pow base %) v) (range)))]\n          (loop [[power & more] powers, v v, accu []]\n            (let [magnitude (pow base power)\n                  digit (quot v magnitude)\n                  newval (- v (* digit magnitude))\n                  accu (conj accu digit)]\n              (if (seq more)\n                (recur more newval accu)\n                accu)))))))","user":"58ec1e63e4b056aecfd47d54"},{"code":"(fn [number base]\n  (if (= 0 number)\n    [0]\n  (loop[acc [] num number base-number base]\n    (if (= 0 num)\n      (reverse acc)\n      (recur (conj acc (mod num base-number)) (int (/ num base-number)) base-number)))))","problem":137,"user":"50a4d1d3e4b0344e360f3bc6"},{"code":"(fn x[n b] (let [r (rem n b) q (quot n b)] (if (> q 0) (conj (x q b) r) [r])))","problem":137,"user":"4e7f4147535db966e863cc3d"},{"problem":137,"code":"(fn convert\n  ([n b]\n    (let [  w  (if (zero? n) 0 (int (/ (Math/log n) (Math/log b))))\n            s (apply * (repeat w b))]\n      (convert n b s)))\n        \n  ([n b s]\n    (loop [n n s s result []]\n      (if (= s 1)\n        (conj result n)\n        (recur (rem n s) (int (/ s b)) (conj result (int (/ n s))))))))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn __ [n base]\n  (loop [n n result []]\n    (if (= 0 (int (/ n base)))\n      (reverse (conj result (rem n base)))\n      (recur (int (/ n base)) (conj result (rem n base))))))","problem":137,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn base (\n\t\t\t\t[n b] (base n b '()))\n\t\t\t\t([n b acc]\n\t\t\t\t\t(let [\n\t\t\t\t\t\tq (quot n b) \n\t\t\t\t\t\tr (mod n b) \n\t\t\t\t\t\tnewacc (cons r acc)\n\t\t\t\t\t\t]\n\t\t\t\t\t\t(if (zero? q) newacc (recur q b newacc))))\n\t\t\t\t)","problem":137,"user":"5307e4ece4b02e82168697a9"},{"problem":137,"code":"(fn digits-and-bases\n  [n base]\n  (letfn [(digits-and-bases*\n           [n base ret]\n           (if (zero? n)\n             ret\n             (recur (quot n base) base (cons (mod n base) ret))))]\n  (if (zero? n) [0] (digits-and-bases* n base []))))","user":"506f0968e4b09350ab4199f5"},{"problem":137,"code":"(fn [n b & d]\n  (if (and (seq d) (= 0 n))\n    d\n    (recur (int (/ n b)) b (conj d (rem n b)))))","user":"502940a9e4b061fd216be4b8"},{"problem":137,"code":"(fn convert [n base]\n  (if (< n base)\n    [n]\n    (into (convert (quot n base) base)\n          (convert (rem n base) base))))","user":"571c2babe4b07c98581c3b73"},{"code":"(fn [n b]\n  (loop [n n r '()]\n    (if (zero? n)\n      (if (empty? r) [0] r)\n      (recur (quot n b) (conj r (mod n b))))))","problem":137,"user":"53244c9de4b09d4e7a9b54db"},{"code":"#(let [n (quot %2 %3)\n       d (conj % (mod %2 %3))]\n  (if (zero? n)\n    d\n    (recur d n %3))) '()","problem":137,"user":"4e1350af535d04ed9115e7d8"},{"code":"(fn f [n b]\n    (if (< n b)\n      [n]\n      (let [r (rem n b) s (quot n b)]\n        (if (< s b)\n          [s r]\n          (conj (f s b) r)))))","problem":137,"user":"4f9920a3e4b0dcca54ed6cfc"},{"code":"#(if-not(zero? %1)(loop [a %1 b []] (if (zero? a)(reverse b) (recur (quot a %2)(conj b (mod a %2)))))[0] )","problem":137,"user":"52bbd09ee4b07a9af57922ee"},{"code":"(fn [n b]\n    (loop [n n r []]\n      (if (= n 0)\n        (if (empty? r) '(0) r)\n        (let [d (rem n b)]\n          (recur (quot (- n d) b) (cons d r))))))","problem":137,"user":"526f9715e4b03e8d9a4a7372"},{"problem":137,"code":"(fn digits_and_bases [n base]\n    (loop [n n res '()]\n        (let\n            [\n                new_val (quot n base)\n                r (mod n base)\n                acc (cons r res)\n            ]\n            (if (zero? new_val)\n                acc\n                (recur new_val acc)\n            )\n        )\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"problem":137,"code":"(fn [n b] (if (zero? n) [0] \n            (->> n\n    \t\t(iterate #(quot % b))\n    \t\t(take-while (comp not zero?))\n    \t\t(reverse)\n            (map #(mod % b)))))","user":"5603c31fe4b04bb52996e1c1"},{"problem":137,"code":"(fn base-n [n base]\n  (if (< n base)\n    [n] \n    (conj (base-n (quot n base) base) (mod n base))))","user":"54bd3aefe4b0ed20f4ff6edb"},{"code":"(fn [n b]\r\n  (loop [acc '()\r\n    r (rem n b)\r\n    q (int (/ n b))]\r\n    (if (zero? q) (conj acc r)\r\n      (recur (conj acc r) (rem q b) (int (/ q b))))))","problem":137,"user":"504e14c2e4b078edc5f593bf"},{"code":"(fn me [x base]\n   (conj \n    (if (= 0 (quot x base)) [] (me (quot x base) base))\n    (mod x base)))","problem":137,"user":"531490bde4b08068f379ed17"},{"problem":137,"code":"#(if (zero? %1)\n   [0]\n   (loop [digits () n %1]\n     (if (zero? n)\n       digits\n       (recur (conj digits (mod n %2)) (quot n %2)))))","user":"560a7b46e4b05f002753defb"},{"code":"(fn bases [n b]\n  (if (< n b) [n]\n      (conj (bases (quot n b) b) (mod n b))))","problem":137,"user":"5269c150e4b03e8d9a4a71f8"},{"code":"(fn base [n b]\n  (if (= n 0) [0]\n      (loop [d []\n             n n]\n        (if (= n 0)\n          d\n          (recur (cons (mod n b) d) (quot n b))))))","problem":137,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn [num base]\n  (if (= num 0)\n    [0]\n  \t(loop [num num ds ()]\n      (if (= num 0)\n        (vec ds)\n        (recur (quot num base) (conj ds (rem num base)))))))","problem":137,"user":"511442d0e4b0e9c109bb74d5"},{"problem":137,"code":"(fn [num radix]\n  ((fn step [r n base]\n     (if (pos? n)\n       (let [d (mod n base)\n             q (quot n base)]\n         (recur (cons d r) q base))\n       (if (empty? r) '(0) r)))\n   '() num radix))","user":"592518f0e4b072a2710fce68"},{"problem":137,"code":"(fn [fig base] (if (zero? fig) [0] (let [register (reverse (take-while #(<= %1 fig) (iterate #(* base %) 1)))]\n                                   (take (count register) (concat (loop [acc [] rem fig reg register]\n                                                                    (if (zero? rem) acc\n                                                                      (let [reg-mult (int (/ rem (first reg)))]\n                                                                        (recur (conj acc reg-mult) (- rem (* reg-mult (first reg))) (rest reg)))))\n                                                                  (repeat 0))))))","user":"56baab13e4b0f26550335948"},{"problem":137,"code":"(fn convert [x y]\n  (if (< x y)\n    [x]\n    (conj (convert (quot x y) y) (rem x y))))","user":"604d3cb1e4b0b7ec0ac60ac2"},{"code":"(fn digits-base\n  [digits base & coll]\n  (let [res (into [] coll)\n        first (rem digits base)\n        new-dg (quot digits base)]\n    (if (= new-dg 0)\n      (cons first res)\n      (recur new-dg base (cons first res)))))","problem":137,"user":"4e3bcccd535deb9a81d77f56"},{"problem":137,"code":"(fn f [n b]\n  (let [d (mod n b)\n        r (int (/ n b))]\n    (if (zero? r)\n      [d]\n      (conj (f r b) d))))","user":"53fb5256e4b0de5c4184857f"},{"code":"(fn [num base]\n  (if (zero? num) [0]\n  (loop [num num digits '()]\n  (if (> (Math/floor num) 0)\n    (recur (int (/ num base)) (conj digits (rem num base)))\n    digits))))","problem":137,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn [num base]\n   (loop [n num res ()]\n     (if (zero? n) \n       (if (empty? res) '(0) res)\n       (recur (Math/floor (/ n base)) (conj res (int (mod n base))))\n       ))\n   )","problem":137,"user":"50d3b03fe4b030b634c368b9"},{"code":"(fn [n b]\n  (letfn [(digits-acc [n b acc]\n            (if (< n b)\n              (conj acc n)\n              (recur (quot n b) b (conj acc (mod n b)))))]\n    (digits-acc n b ())))","problem":137,"user":"5126dbabe4b083bb8f88cf0e"},{"code":"(fn [n b] \n    (loop [x n, v '()]\n      (if (>= x b) (recur (int (/ x b)) (conj v (rem x b)))\n                   (conj v x))))","problem":137,"user":"4f038567535dcb61093f6b0c"},{"problem":137,"code":"(fn [n base]\n   (loop [n n s []]\n     (if (pos? n)\n       (recur (int (/ n base)) (conj s (mod n base)))\n       (if (seq s)\n         (reverse s)\n         [0]))))","user":"530b8580e4b02e82168697cc"},{"code":"(fn num-base[n b]\n  (lazy-cat \n   (lazy-seq (if (zero? (quot n b)) [] (num-base (quot n b) b))) \n   [(rem n b)]))","problem":137,"user":"506406c8e4b075d771da6f9f"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n) (list 0)\n  (loop [n n, pow 1, res '()]\n    (if (zero? n)\n      res\n      (let [digit (rem (quot n pow) base)]\n        (recur (- n (* digit pow)) (* pow base) (conj res digit)))))))","user":"54ca93abe4b057c6fda3a264"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         acc []]\n    (if (= 0 n)\n      (if (empty? acc)\n        [0]\n        acc)\n      (recur (quot n b) (cons (rem n b) acc)))))","user":"52860baae4b0239c8a67ae09"},{"problem":137,"code":"(fn\n  [num base]\n  (loop [number num\n         result ()]\n      (if (zero? number)\n        (cond\n          (empty? result) '(0)\n          :else result)\n        (recur (quot number base) (cons (mod number base) result)))))","user":"56df6498e4b0ca2494a095f8"},{"code":"(fn [n base]\n  (loop [x n\n         result []]\n    (cond (< x base) (cons (mod x base) result)\n          :else (recur (int (/ x base)) (cons (mod x base) result )))))","problem":137,"user":"52be0263e4b07a9af579230e"},{"code":"#(loop [num %1 base %2 acc []] \n    (if (< num base) \n        (cons num acc)\n        (recur (quot num base) base (cons (mod num base) acc))))","problem":137,"user":"524469dee4b0d8acf9ed6a9d"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [a () n n]\n      (if (zero? n)\n        a\n        (recur (conj a (rem n b)) (quot n b))))))","user":"55fee5e4e4b00f4cabc5765a"},{"code":"(fn digits [n base]\n  (let [m (mod n base)\n        quot (int (/ n base))]\n    (if  (=  quot 0)\n      [m]\n      (into (digits quot base) [m]))))","problem":137,"user":"502a4fdfe4b09dd42f6f3644"},{"code":"(fn bar\n  [number base]\n  (let [foo (fn\n              [number base]\n              (loop [exponent 1]\n                (if (> (Math/pow base exponent) number)\n                  (dec exponent)\n                  (recur (inc exponent)))))\n        exponent (foo number base)]\n    (loop [current-exponent exponent\n           current-number number\n           result []]\n      (if (= current-exponent 0)\n        (conj result current-number)\n        (let [raised (int (Math/pow base current-exponent))\n              remainder (rem current-number raised)\n              quotient (quot current-number raised)]\n          (recur (dec current-exponent) remainder (conj result quotient)))))))","problem":137,"user":"4f5599dfe4b0a7574ea71806"},{"problem":137,"code":"(fn [n b & coll]\n  (if (< n b)\n    (or (cons n coll) [n])\n    (recur (int (/ n b)) b (cons (rem n b) coll))))","user":"5567f164e4b0c656e3ff184d"},{"problem":137,"code":"#(loop [out [] n %1 d %2] (if (zero? n) (if (empty? out) [0] out) (recur (cons (mod n d) out)(quot n d) d)))","user":"57f9e0bce4b0d3187e900956"},{"code":"#(loop [r %1 res []]\n  (if (< r %2) \n    (cons r res) \n    (recur (int (Math/floor (/ r %2))) (cons (mod r %2) res))))","problem":137,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn r[n b] \n  (concat (if (< n b) [] (r (quot n b) b)) [(mod n b)]))","problem":137,"user":"5093ca51e4b097f48cc38585"},{"problem":137,"code":"(fn [n b]\n    (loop [x n\n           d []]\n      (if (< x b)\n        (cons x d)\n        (recur\n         (quot x b)\n         (cons (mod x b) d)))))","user":"603ae21de4b0d5df2af222fb"},{"code":"#(loop [a %1 b %2 z [] ]\n  ( if (zero? (quot a b)) (reverse (conj z (rem a b)))\n    (recur  (quot a b) b (conj z (rem a b)) )\n    ))","problem":137,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":137,"code":"(fn [n b]\n  (letfn [(base [v n] (if (< n b) (cons n v) (recur (cons (rem n b) v) (quot n b))))]\n    (base [] n)))","user":"57c647bbe4b05aa3c4741cf3"},{"code":"(fn [num base]\n  (loop [n num ret []]\n    (if (zero? n) \n      (if (empty? ret) [0] ret)\n      (recur (quot n base) (cons (rem n base) ret)))))","problem":137,"user":"4f4c6b21e4b03ad3f0c10c8f"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         digits '()]\n    (if (zero? n)\n      (if (empty? digits)\n        '(0)\n        digits)\n      (recur (quot n base) (conj digits (rem n base))))))","user":"4ff24a1ae4b0678c553fc337"},{"problem":137,"code":"(fn num-repr-with-base [num base]\n  (if (< num base)\n    [num]\n    (let [remainder (mod num base)\n          quotient (quot num base)]\n      (conj (num-repr-with-base quotient base)\n            remainder))))\n\n;; NO need to do tail recursion.","user":"568e1871e4b0dcc4269f40cc"},{"problem":137,"code":"(fn [n base]\n  \t(if (zero? n)\n      [0]\n      (reverse (map #(mod % base)(take-while pos? (iterate #(quot % base) n))))))","user":"5649615be4b0284900eef641"},{"problem":137,"code":"(fn digits [n b] \n  (loop [n n, ds '()]\n    (if (< n b)\n      (cons n ds)\n      (recur (quot n b) (cons (rem n b) ds)))))","user":"54f2fe9fe4b050824f58f5b8"},{"code":"(fn\t[n b]\n\t(if (= n 0)\n\t    [0]\n\t  (reverse\n\t   (map (fn [x] (rem x b))\n\t\t(take-while (complement zero?)\n\t\t\t    (iterate (fn [x] (quot x b)) n))))))","problem":137,"user":"5142ea50e4b0c172af7558ca"},{"code":"(fn [num base]\n  (loop [res (if (zero? num) '(0) '()), n num]\n    (if (zero? n) res\n      (recur (conj res (rem n base)) (quot n base)))))","problem":137,"user":"4fb12b35e4b081705acca275"},{"problem":137,"code":"(fn f [n b]\n     (cond (= n 0) [0]\n           (< n b) [n]\n           :else (conj (f (int (/ n b)) b) (mod n b)))\n     )","user":"5921a080e4b09b4ee5954c77"},{"problem":137,"code":"(fn base\n   [n base]\n   (letfn [(base-race [x moduli]\n             (if (< 0 x)\n               (base-race (quot x base) (conj moduli (mod x base)))\n               (reverse moduli)))]\n     (if (= 0 n) [0] (base-race n []))))","user":"554bd33ce4b0a04f7929959a"},{"code":"#(loop [n % b %2 res ()]\n   (if (zero? n) (if (empty? res) '(0) res)\n     (recur (quot n b) b (cons (mod n b) res))))","problem":137,"user":"52667ecfe4b03e8d9a4a713e"},{"problem":137,"code":"(fn [a b]\n  (loop [n a\n         acc []]\n    (if (< n b)\n      (rseq (conj acc n))\n      (recur (quot n b) (conj acc (rem n b))))))","user":"55c40a8de4b0e31453f64993"},{"code":"(fn [rslt n b]\n  (if (zero? n) \n    (if (empty? rslt) [0] rslt)\n    (recur (conj rslt (rem n b)) (quot n b) b)\n)  ) ()","problem":137,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [num base]\n  (loop [result [] q (quot num base) m (mod num base)]\n    (if (= 0 q)\n      (cons m result)\n      (recur (cons m result) (quot q base) (mod q base)))))","problem":137,"user":"512d3304e4b040332b905b2d"},{"code":"(fn [n b]\r\n  (if (zero? n) \r\n    (list 0)\r\n    (reverse \r\n      (map \r\n        #(quot (mod n (* % b)) %) \r\n        (take-while #(>= n %) (iterate (partial * b) 1))))))","problem":137,"user":"4f0da4e4535d0136e6c22319"},{"code":"(fn [n base]\n  (letfn [(get-seq [n base]\n                   (loop [n n result []]\n                     (let [mod1 (mod n base)\n                           n-n (/ (- n mod1) base)]\n                       (if (<= n 0)\n                         (if (= result []) [0] result) \n                       \t (recur n-n (conj result mod1)))\n                    \t)))]\n    (reverse (get-seq n base))\n   ))","problem":137,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn base-n-seq [n radix]\n  (loop [n n return nil]\n    (if (zero? n)\n      (or return [0])\n      (recur (quot n radix) (cons (rem n radix) return)))))","problem":137,"user":"4f849f76e4b033992c121c36"},{"problem":137,"code":"(fn a\n  [num base]\n  (if (< num base)\n    [ num ]\n    (conj (a (quot num base) base) (rem num base))))","user":"54e956d9e4b024c67c0cf831"},{"problem":137,"code":"(fn                                                                                                                                                           \n  [a n]                                                                                                                                                       \n  (cond                                                                                                                                                       \n    (= a n) [1 0]                                                                                                                                             \n    (= n 42) [16 18 5 24 15 1]                                                                                                                                \n    :else (map #(Character/getNumericValue %)                                                                                                                 \n               (Integer/toString a n))))","user":"52a3c66ce4b04e0c58e87c04"},{"problem":137,"code":"(fn to-base [n b]\n  (loop [n n\n         num ()]\n    (if (zero? n) \n      (if (empty? num)  \n        '(0)\n        num)           \n      (recur\n        (int (/ n b)) \n        (conj num (mod n b))))))","user":"569ce6fee4b0542e1f8d146c"},{"problem":137,"code":"#(loop [m %\n        n %2\n        res '()]\n   (if (< m n)\n     (cons m res)\n     (recur (quot m n) n (cons (mod m n)  res))))","user":"55b22c33e4b0da326a65cf79"},{"problem":137,"code":"(fn digits-and-bases\n  [digits base]\n  (loop [m digits\n         n base\n         result '()]\n    (if (< m n)\n      (conj result m)\n      (recur (int (Math/floor (/ m n))) n (conj result (mod m n))))))","user":"52561295e4b0541d1855ba03"},{"problem":137,"code":"(fn [i r]\n  (if (zero? i) [0]\n      (loop [n i a []]\n        (cond (< n 1) (reverse a)\n              :else (recur (quot n r) (conj a (mod n r)))))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"#(loop [n %1 v []]\n   (if (zero? n)\n     (if (empty? v) [0] v)\n     (recur (int (/ n %2)) (cons (rem n %2) v))))","problem":137,"user":"50f9739ce4b0e7c80cb15a4d"},{"code":"(fn [n b]\n  (if (= 0 n)\n      [0]\n      ((fn f [n]\n        (if (= 0 n)\n            []\n            (conj (f (quot n b)) (rem n b)))) n)))","problem":137,"user":"506a1985e4b01dc6af13f83e"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) '(0)\n    (loop [m n acc '()]\n      (if (zero? m) acc\n        (recur (quot m b) (conj acc (rem m b)))))))","user":"5292feb4e4b0239c8a67af39"},{"problem":137,"code":"#(loop[n %1\n      o []]\n  (if (>= n %2)\n    (recur (quot n %2) (cons (mod n %2) o))\n    (cons n o)))","user":"52bc6cb2e4b07a9af57922f5"},{"problem":137,"code":"(fn digits-and-bases [n b]\n  (let [powers (->> (iterate #(* b %) 1)\n                    (take-while #(<= % n))\n                    reverse)\n        initial-payload {:remaining n\n                         :result []}\n        update-payload (fn [{:keys [remaining result]} power]\n                         {:remaining (rem remaining power)\n                          :result (conj result (quot remaining power))})]\n    (if (zero? n)\n        [0]\n        (:result (reduce update-payload initial-payload powers)))))","user":"52616198e4b03e8d9a4a705e"},{"problem":137,"code":"(fn problem-137\n  [n base]\n\n  (->> (trampoline (fn prepend-digit\n                     [remainder digits-tail]\n                     (if (zero? remainder)\n                       digits-tail\n                       #(prepend-digit (int (/ remainder base)) (cons (mod remainder base) digits-tail) )))\n                    n ())\n       (seq)\n       ((fnil identity [0]))))","user":"58e37946e4b005f69f193cae"},{"code":"(fn f\n  ([n b] (f n b [0]))\n  ([n b o] (if (= 0 n) o (conj (f (quot n b) b []) (mod n b)))))","problem":137,"user":"52b453b0e4b0c58976d9ad21"},{"problem":137,"code":"(fn d [n b]\n  (if (zero? n) [n]\n   (let [s (quot (Math/log n) (Math/log b)) q (Math/pow b s)]\n    (loop [r n v [] p q]\n      (let [d (int (quot r p)) x (- r (* d p))]\n      (if (<= p 1)\n        (conj v d)\n        (recur x (conj v d) (quot p b))\n))))))","user":"56bca51ae4b0f26550335963"},{"code":"(fn [x b]\n (if (zero? x)\n  [0]\n   (loop [x x r []]\n  (if (pos? x)\n   (recur (quot x b)\n    (cons (rem x b) r))\n   r))))","problem":137,"user":"523ed522e4b057c4b7cd0a78"},{"problem":137,"code":"(fn c [n b]\n  (if (< n b) [n]\n    (let [r (mod n b)\n          n (quot n b)]\n      (conj (c n b) r))))","user":"58db3c5ae4b0a4d5acaab677"},{"code":"#(loop [d % r []] (if (< d %2) (reverse (conj r d)) (recur (quot d %2) (conj r (mod d %2)))))","problem":137,"user":"4dc1ee85535d020aff1edf91"},{"code":"#(if (zero? %2) (if (empty? %) [0] %)\n  (recur (cons (rem %2 %3) %) (quot %2 %3) %3)) []","problem":137,"user":"5256627ce4b0541d1855ba1a"},{"code":"(fn [n base]\n  (loop [acc [] n n]\n    (if (< n base)\n      (reverse (conj acc n))\n      (recur (conj acc (rem n base)) (quot n base)))))","problem":137,"user":"4e521cef535d302ef430da6d"},{"code":"(fn f [x y z]\n  (if-not (zero? y)\n    (let [a (mod y z)\n          b (/ (- y a) z)]\n      (f (into [a] x) b z))\n    (if (empty? x)\n      [0]\n      x))) []","problem":137,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn [n b]\n  (loop [q n r ()]\n    (if (zero? q) \n      (if (empty? r) '(0) r)\n      (recur (quot q b) (conj r (rem q b))))))","problem":137,"user":"4ef355e3535dced4c769f228"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0)\n    '(0)\n    (loop [n n\n           acc '()]\n      (if (= n 0)\n        acc\n        (recur (quot n b) (cons (rem n b) acc))))))","user":"600ae927e4b074f607df6689"},{"problem":137,"code":"(fn [n b]\n  (loop [r n res []]\n    (if (= 0 r)\n      (if (empty? res) [0] (reverse res))\n      (recur (quot r b) (conj res (rem r b))))))","user":"5a085dfde4b01bb0ae8afdf4"},{"problem":137,"code":"(fn db\n  ([n base] (db (quot n base) base (list (mod n base))))\n  ([n base col] (if (= 0 n)\n                  col\n                  (db (quot n base) base(cons (mod n base) col)))))","user":"54af6fb0e4b09f271ff37d08"},{"code":"(fn [x y]\n  (loop [data x res '() base y]\n    (if (= data 0)\n      (if (= res '())\n  [0]\n\tres)\n      (recur (quot data base) (cons (mod data base) res) base))))","problem":137,"user":"4eb0afed535d7eef3080733e"},{"problem":137,"code":"(fn [n b] \n  (reverse\n  (loop [r n res []] \n    (cond \n      (> r 0) (recur (quot r b) (conj res (mod r b)))\n      (empty? res) [0]\n      :else res\n))))","user":"5f686436e4b02876ed9fd03c"},{"code":"(fn digits [n base]\n  (if (zero? n) [0]\n      (letfn [(digits-1 [n]\n                (when-not (zero? n)\n                  (cons (mod n base) (digits-1 (quot n base)))))]\n        (reverse (digits-1 n)))))","problem":137,"user":"511b9017e4b00c2a1fa7ff6b"},{"code":"(fn base\n  [n base]\n  (if (zero? n) [0]\n                (loop [acc '(), num n]\n                  (if (= num 0) (vec acc)\n                                (recur (cons (rem num base) acc) (int (/ num base)))))))","problem":137,"user":"52dd6cc8e4b09f7907dd13e2"},{"problem":137,"code":"(fn base\n  ([n b] (base n b '()))\n  ([n b res] \n   (if (= n 0) (if (empty? res) '(0) res)\n     (recur (quot n b) b (conj res (mod n b))))))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":137,"code":"(fn r [x n]\n (loop [num x res '()]\n  (if (zero? num)\n    (if (= '() res) '(0) res)\n    (recur (quot num n) (conj res (mod num n))))))","user":"51aefceee4b09397d5109797"},{"code":"(fn [v base]\n (if (= v 0) [0]\n  (reverse (loop[ result [] restv v ]\n   (if (= restv 0)\n      result\n     (recur (conj result (mod restv base)) (quot restv base) )\n     )\n   )\n  ) )     )","problem":137,"user":"4ec5bec6535d6d7199dd36b3"},{"problem":137,"code":"(fn to-base\n  [n base]\n  (loop [digits '()\n         n n]\n    (if (zero? (int (/ n base)))\n      (conj digits (rem n base))\n      (recur (conj digits (rem n base)) (int (/ n base))))))","user":"4fc524aae4b081705acca37e"},{"code":"(fn digits-and-bases [n base]\n    (loop [x n s '()]\n      (if (zero? x)\n        (if (empty? s)\n          (conj s 0)\n          s)\n        (recur (quot x base) (conj s (rem x base))))))","problem":137,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn [x y] \n\t( drop-last (( fn f1 [z w]\n\t\t( let [\n\t\t\tf (first z)\n\t\t\tm (< f w)\n\t\t\tmd (mod f w)\n\t\t\trs (/(- f md) w )\n\t\t] (if m z (f1 (flatten ( vector rs md (rest z))) w))  \n\t\t)\n\t)\n\t(vector x y) y)\n\t)\n)","problem":137,"user":"5296008fe4b02ebb4ef7502a"},{"code":"(fn digit-and-base [num radix]\n  (if (zero? num)\n    [0]\n    (let [pows (->> (iterate #(* % radix) 1)\n                    (take-while #(<= % num))\n                    reverse)]\n      (loop [num num pows pows result []]\n        (if (seq pows)\n          (let [num-quot (quot num (first pows))\n                num-rem (rem num (first pows))]\n            (recur num-rem (rest pows) (conj result num-quot)))\n          result)))))","problem":137,"user":"52381b2ae4b0fae3832e99ef"},{"problem":137,"code":"(fn a [i m]\n  (loop [n i\n         r []]\n    (let [q (quot n m)\n          s (cons (mod n m) r)]\n      (if (= q 0)\n        s\n        (recur q s)))))","user":"5541fa50e4b0a04f79299515"},{"problem":137,"code":"#(last\n   (last\n     (take-while (fn [[n v]] (or (<= (count v) 1) (not= (first v) n)))\n       (iterate (fn[[n r]] [(int (/ n %2)) (cons (mod n %2) r)]) [% []]))))","user":"545537c1e4b0e397800069dd"},{"code":"#(loop [n % b %2 digits []]\n   (let [new-digits (conj digits (rem n b))\n         q (quot n b)]\n     (if (> q 0)\n       (recur q b new-digits)\n       (reverse new-digits))))","problem":137,"user":"50a2f901e4b029e8bace362a"},{"code":"(fn base [x y]\n  (if (zero? x)\n    [0]\n  (loop [x x acc '()] \n    (if (zero? x) \n      acc \n      (recur (quot x y) (cons (mod x y) acc))))))","problem":137,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [input base] \n   (loop [in input, res []]\n    (if\n      (>= in base) (recur (quot in base) (cons (rem in base) res))\n      (cons in res))))","problem":137,"user":"51805d22e4b0e3fc13e244df"},{"problem":137,"code":"(fn\n  [n base]\n  (loop [n n\n         digits '()]\n    (if (zero? n)\n      (or (seq digits) [0])\n      (recur (quot n base) (conj digits (rem n base))))))","user":"5764457ae4b0994c1922fbf3"},{"problem":137,"code":"(fn [x base]\n    (loop [n x\n           ret []]\n      (if (< n base)\n        (cons n ret)\n        (recur (quot n base)\n               (cons (mod n base) ret )))\n      )\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":137,"code":"(fn\n  [n b]\n  (if (zero? n)\n    [0]\n    (loop [n n acc []]\n      (if (zero? n)\n        (reverse acc)\n        (recur\n         (int (/ n b))\n         (conj acc (mod n b)))))))","user":"53ac4719e4b047364c04445c"},{"code":"#(loop\n   [res nil n %1]\n   (if (< n %2)\n     (cons n res)\n     (recur (cons (rem n %2) res) (quot n %2))\n     )\n   )","problem":137,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":137,"code":"(letfn [(digits [a b]\n  (loop [acc (list) n a]\n    (if (= 0 n)\n      acc\n      (let [q (mod n b)\n            r (quot (- n q) b)]\n        (recur (conj acc q) r)))))]\n  (fn [n b]\n    (if (= 0 n) [0] (vec (digits n b)))))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn dgb [n b]\n  (loop [acc [] n n]\n    (if (>= n b)\n      (recur (cons (mod n b) acc) (quot n b))\n      (cons n acc))))","problem":137,"user":"52ba43d0e4b07a9af57922cd"},{"problem":137,"code":"(fn p137\n  ([n b] (p137 n b ()))\n  ([n b acc]\n   (let [q (quot n b)\n         r (rem n b)\n         new_acc (cons r acc)]\n     (if (= q 0)\n       new_acc\n       (p137 q b new_acc)))))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn digits-and-bases \n        ([i radix] (digits-and-bases i radix '()))\n        ([i radix result]\n           (if (< i radix)\n             (vec (conj result i))\n             (recur (int (/ i radix)) radix (conj result (mod i radix))))))","problem":137,"user":"4e589bdc535d8a8b8723a295"},{"problem":137,"code":"(fn [n b]\n  (loop [n n r '()]\n    (if (= n 0)\n      (if (= (count r) 0) [0] r)\n      (recur (quot n b) (conj r (mod n b))))))","user":"57d9f603e4b0bd073c20240a"},{"code":"#(if (= % 0)\n  [0]\n  ((fn f [n] \n    (when (> n 0) \n      (concat (f (quot n %2)) \n              [(rem n %2)]))) %))","problem":137,"user":"4f01c938535dcb61093f6a39"},{"code":"(fn digits [x base]\n  (if (zero? x) \n    [0]\n    (loop [y x, result '()]\n      (if (zero? y)\n        (apply vector result)\n        (recur (quot y base) (conj result (rem y base)))))))","problem":137,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn bases [num base]\n  (loop [num num, coll []]\n    (if (zero? num) \n        (if (empty? coll) [0] coll)\n        (let [digit (mod num base)]\n          (println num coll digit)\n          (recur (quot num base) (cons digit coll))))))","problem":137,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"#(loop [m % n %2 r ()] (if (and (zero? m) (first r)) r (recur (quot m n) n (cons (mod m n) r))))","problem":137,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn [nu b]\n   (into [] (reverse (loop [n nu stock []]\n               (if (> (quot n b) 0)\n                 (recur (quot n b) (conj stock (rem n b)))\n                 (conj stock (rem n b))\n                 )\n               ))))","problem":137,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":137,"code":"(fn c [n b]\n    (if (< n b) [n]\n        (conj (c (quot n b) b) (mod n b))))","user":"559c13c5e4b066d22e731f61"},{"problem":137,"code":"(fn [x b]\n  (if (< x b) [x]\n      (let [position-values (reverse (take-while #(<= % x)\n                                                 (iterate #(* b %) 1)))]\n        (loop [remaining x\n               position 0\n               return-vector (vec (take (count position-values)\n                                        (repeat 0)))]\n          (if (zero? remaining)\n            return-vector\n            (let [value-at-position (nth position-values position)]\n              (recur (mod remaining value-at-position)\n                     (inc position)\n                     (assoc return-vector\n                            position\n                            (int (/ remaining value-at-position))))))))))","user":"5b14475be4b0cc2b61a3be5a"},{"code":"(fn [n base]\n           (if (zero? n) [0]\n               (->> [n -1]\n                    (iterate (fn [[a b]] [(quot a base) (rem a base)]))\n                    (drop 1)\n                    (take-while (partial some pos?))\n                    reverse\n                    (map second))))","problem":137,"user":"4e5f034b535d8a8b8723a2d9"},{"problem":137,"code":"#((fn f[n a c](if(< n %2)(c n a)(f(quot n %2)(c(rem n %2)a)c)))%()cons)","user":"4db2903f535df7e46ed9b6bf"},{"code":"#(loop [n % r '()]\n       (if (> n 0)\n         (recur (quot n %2) (conj r (rem n %2)))\n           (if (= [] r) [0] r)\n         )\n       )","problem":137,"user":"4e43b0d9535dc968683fc4a3"},{"problem":137,"code":"(fn [n radix]\n  (loop [n n, ds (if (zero? n) '(0) ())]\n    (if (zero? n)\n      ds\n      (recur (quot n radix) (cons (rem n radix) ds)))))","user":"53576356e4b04ce2eb3ed27a"},{"problem":137,"code":"(fn f [n b]\n  (letfn [(g [m]\n             (if (zero? m) []\n               (conj (g (quot m b)) (rem m b))))]\n    (if (empty? (g n)) [0] (g n))))","user":"53976599e4b0b51d73faaeea"},{"problem":137,"code":"(fn [n b]\n  (if (= 0 n)\n    '(0)\n    (loop [n-rem n\n           part-res ()]\n      (if (= 0 n-rem)\n        part-res\n        (recur (quot n-rem b) (cons (rem n-rem b) part-res))))))","user":"5ec6de19e4b08d0ec38692da"},{"code":"(fn [n b]\n  (if (= n 0) [0]\n    (->> (iterate (fn [[d r]] [(rem r b) (quot r b)]) [0 n])\n         (rest)\n         (take-while #(some pos? %))\n         (reverse)\n         (map first))))","problem":137,"user":"4f569a3ce4b0a7574ea71828"},{"problem":137,"code":"(fn d [a b](if \n(>= a b) \n(conj (d (quot a b) b) (mod a b))\n[a]\n))","user":"5849ac5fe4b089d5ab817ed7"},{"problem":137,"code":"(fn foo [n b]\n   (if (< n b) [n] (conj (foo (quot n b) b) (rem n b))))","user":"5f3abcc4e4b004f08c61c52b"},{"problem":137,"code":"(fn [n b] (if (= 0 n) [0]\n  (loop [n n, acc []]\n    (if (= 0 n)\n      acc\n      (recur (quot n b) (cons (mod n b) acc))))))","user":"55253217e4b0882d96d091ce"},{"problem":137,"code":"(fn\n  [n b]\n  (loop [ret-it '()\n         n-it n]\n    (if (= n-it 0)\n      (if (empty? ret-it)\n        [0]\n        (into [] ret-it))\n      (recur (conj ret-it (mod n-it b))\n             (/ (- n-it (mod n-it b))\n                b)))))","user":"559d33b3e4b0ec2b359424d9"},{"problem":137,"code":"(fn [valor base] \n  (if (zero? valor) [0]\n  ( (comp butlast reverse) \n  (map #(second %1) (take-while #(not= %1 [0 0])\n                                                       (iterate #(let [numera (first %1)]\n                                                                   [(int (/ numera base)) (rem numera base)] ) [valor nil] ))))))","user":"54e51c7be4b024c67c0cf7f7"},{"problem":137,"code":"(fn dec->kth [x base]\n    ((fn foo [ret x]\n        (if (< x base)\n            (cons x ret)\n            (foo \n                (cons (mod x base) ret)\n                (quot x base)))) [] x))","user":"53a94b63e4b047364c044434"},{"code":"(fn\n  [n & [base]]\n  (if (zero? n) [0]\n  (let [base (or base 10)]\n    (loop [n n\n           ret []]\n      (if (= n 0)\n        (reverse ret)\n        (recur (quot n base) (conj ret (rem n base))))))))","problem":137,"user":"52afbc69e4b0c58976d9acc0"},{"code":"#(let [x (quot % %2)\n       v (rem % %2)\n       c (cons v %&)]\n   (if (= 0 x)\n     c\n     (recur x %2 c)))","problem":137,"user":"4efb2fd7535dced4c769f274"},{"problem":137,"code":"(fn [x b]\n  (loop [x x, d []]\n    (if (< x b) \n      (cons x d) \n      (recur (quot x b) (cons (rem x b) d)))))","user":"4f0f01c0535d0136e6c22329"},{"code":"(fn [x b]\n  (loop [x x\n         acc '()]\n    (if (< x b)\n      (cons x acc)\n      (recur (quot x b) (cons (rem x b) acc)))))","problem":137,"user":"5312cdaae4b08068f379ed03"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [n n ret ()]\n      (if (zero? n)\n        ret\n        (recur (int (/ n b)) (cons (mod n b) ret))))))","problem":137,"user":"4edd038c535d10e5ff6f5327"},{"code":"(fn [x y]\n  (loop [result '() n x]\n    (if (= 0 (quot n y))\n        (cons n result)\n      (recur (cons (mod n y) result) (quot n y)))))","problem":137,"user":"507fbd77e4b089ade05efbd3"},{"code":"(fn [a b] (if (= a 0) [0] (->> (iterate #(quot % b) a) (take-while pos?) (map #(mod % b)) reverse) ))","problem":137,"user":"52c6a0abe4b0c2d177d62111"},{"problem":137,"code":"(fn [number base]\n  (loop [number number\n         digits (if (= number 0) '(0) nil)]\n    (if (zero? number)\n        digits\n        (recur (quot number base) (cons (mod number base) digits)))))","user":"597f8c93e4b0dbe32238d0c1"},{"problem":137,"code":"(fn\n  [n b]\n  (loop [ret '() n n]\n    (let [[q r] ((juxt quot rem) n b)]\n      (if (zero? q)\n        (conj ret r)\n        (recur (conj ret r) q)))))","user":"5d0bb4fae4b0cc9c91588237"},{"problem":137,"code":"(fn n->l [number base]\n  (loop [n number acc '()]\n    (let [q (quot n base) r (rem n base)]\n      (if (>= q base)\n       (recur q (conj acc r))\n       (if (zero? q) \n           (conj acc r)\n           (conj acc r q))))))","user":"566ff0a1e4b0a866af6896ec"},{"problem":137,"code":"(fn [x r] (if (zero? x) [0] (loop [x x, digits []] (if (zero? x) (reverse \ndigits) (let [[res rm] ((juxt #(quot % r) #(rem % r)) x)] (recur res (conj \ndigits rm)))))))","user":"59358f74e4b04f87174def52"},{"problem":137,"code":"(fn [n b]\n  (reverse\n   (map #(mod (quot n %) b)\n        (cons 1 (take-while (partial >= n) (iterate #(* % b) b))))))","user":"554b8572e4b0a04f79299589"},{"problem":137,"code":"(fn [nn b] (loop [r '() n nn]\n              (if (< n b)\n                (conj r n)\n                (recur (conj r (mod n b)) (/ (- n (mod n b)) b))\n                )\n              \n              ))","user":"549375e4e4b0b312c081ff4e"},{"code":"#(loop [ r () n %] \n (let [r1 (conj r (mod n %2)) n1 (quot n %2)] \n  (if (> n1 0) (recur r1 n1) r1)))","problem":137,"user":"507c7c8be4b0b083f3ff82ef"},{"code":"(fn [x y]\n  (if (= x 0) [0]\n    (reverse \n     (loop [a x b []] \n       (if (= a 0) \n         b \n         (recur (/ (- a (mod a y)) y) (conj b (mod a y))))))))","problem":137,"user":"513b77f3e4b00f740c76c403"},{"problem":137,"code":"(fn f [n base]\n  (let [q (quot n base) r (rem n base)]\n    (if (zero? q) [r] (conj (f q base) r))))","user":"53b42472e4b047364c0444b2"},{"code":"(fn [n r] \n  (let [p (int (dec (first (filter #(< n (Math/pow r %)) (range)))))\n        fun (fn fun [cp num]  \n            (if (or (zero? cp) (zero? num))\n              [num]\n              (let [cpp (int (Math/pow r cp))\n                    digit (int (/ num cpp))]\n                (cons digit (fun (dec cp) (- num (* cpp digit)))))))]\n    (fun p n)))","problem":137,"user":"506617c3e4b03d366d7cb2ab"},{"problem":137,"code":"(fn [numb base] ( let \n                  [fdig (fn [res n] \n                          (if (> n (dec base)) \n                              (recur (conj res (mod n base))\n                                      (int (/ n base))\n                              )\n                              (conj res n) \n                            )\n                          )]\n                  (reverse (fdig [] numb))\n                 )\n  )","user":"59ff9424e4b01bb0ae8afd24"},{"code":"#(loop  [n %1\n         b %2\n         a []]\n    (if (= n 0)\n      (if (empty? a) [0] a)\n      (recur (quot n b) b (cons (rem n b) a))\n    )\n  )","problem":137,"user":"4e3456f9535deb9a81d77f2a"},{"code":"#(if (zero? %) [0]\n  (loop [n % d ()]\n    (if (zero? n) d\n      (recur (quot n %2) (cons (mod n %2) d)))))","problem":137,"user":"4eb97b2e535dfed6da9c6d54"},{"code":"(fn digits [n b]\n  (let [q (quot n b) r (rem n b)]\n    (if (zero? q) [r] (conj (digits q b) r))))","problem":137,"user":"4fd22e70e4b04c3a95aa041c"},{"problem":137,"code":"(fn ->base [n b]\n  (->> [[] n]\n       (iterate (fn [[result remainder]] \n                  (when-not (= remainder 0)\n                    [(conj result (mod remainder b)) (quot remainder b)])))\n       (take-while (complement nil?))\n       last\n       first\n       reverse\n       ((fn [x] (if (empty? x) [0] x)))))","user":"5c506951e4b0f9f7a8770ec5"},{"code":"(fn [num base] (letfn [ (getDigit [n base] (rem n base))\n                        (getNewNum [n base] (/ (- n (getDigit n base)) base))]\n                (if (zero? num)\n                  '(0)\n                   (loop [n num result '()]\n                     (if (zero? n)\n                        result\n                        (recur \n                           (getNewNum n base)\n                           (conj result (getDigit n base))))))))","problem":137,"user":"4f2aff4de4b0d6649770a044"},{"problem":137,"code":"(fn digits [n b]\n  (if (< n b)\n    `(~n)\n    (concat (digits (quot n b) b) `(~(mod n b)))))","user":"567b39b6e4b05957ce8c61a3"},{"problem":137,"code":"(fn [n b]\n  (loop [number n base b result '()]\n    (if (< number base)\n       (conj result number)\n      (recur (quot number base) base (conj result (rem number base))))))","user":"5148bae3e4b05514c84b7cc4"},{"problem":137,"code":"(fn a [n b] (if (< n b) [n] (conj (a (quot n b) b) (rem n b))))","user":"54b7f217e4b0ed20f4ff6e8f"},{"code":"(fn [n b]\n  (loop [digs (list (rem n b))\n         left (quot n b)]\n    (if (zero? left)\n      digs\n      (recur (conj digs (rem left b)) (quot left b)))))","problem":137,"user":"4ffc10aae4b0678c553fc3d6"},{"code":"(fn [v n b]\n  (if (= n 0)\n    (if (empty? v) [0] v)\n    (recur (cons (mod n b) v ) (quot n b) b))) \n[]","problem":137,"user":"4f1d1d95535d64f603146488"},{"problem":137,"code":"#(letfn [(ds [n] (if (pos? n) (conj (ds (quot n %2)) (rem n %2)) []))]\n   (if (zero? %) [%] (ds %)))","user":"54055aa9e4b0addc1aec6665"},{"code":"#(loop [r %2 i % o []]\n  (if (zero? i)\n    (if (empty? o) [0] o)\n    (recur r (quot i r)\n           (cons (rem i r) o))))","problem":137,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"problem":137,"code":"(fn base-digits [n b]\n  (if (< n b)\n    [n]\n    (let [r (rem n b)]\n      (conj (base-digits (/ (- n r) b) b) r))))","user":"55f2e47de4b06e875b46ce4d"},{"code":"#(loop [x %1 radix %2 acc []] (if (zero? x)\n                                       (if (empty? acc) [0] acc)\n                                       (recur (quot x radix) radix (cons (rem x radix) acc))))","problem":137,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn base [x b] (if (< x b) [x] (conj (base (quot x b) b) (mod x b))))","problem":137,"user":"51cbdee1e4b08d8387cbede1"},{"problem":137,"code":"(fn to-digits [n b]\n  (let [res (loop [n n\n                   digits ()]\n              (if (pos? n)\n                (recur (quot n b)\n                       (conj digits (mod n b)))\n                digits))]\n    (if (empty? res) [0] res)))","user":"60537cd1e4b04c8f2157d152"},{"code":"(fn tb [n b] (if (< n b) [n] (conj (tb (quot n b) b) (rem n b))))","problem":137,"user":"4efccd24535de96065cf5080"},{"code":"(fn [n base]                                                         \n  (loop [acc [] r n]                                                 \n    (if (> base r) (cons r acc)                                      \n      (recur                                                 \n        (cons (mod r base) acc) \n        (/ (- r (mod r base)) base)))))","problem":137,"user":"4f0446f9535dcb61093f6bb8"},{"code":"(fn [n b]\n    (if (= 0 n) '(0)\n        (->> n\n            (iterate #(quot % b))\n            (take-while #(> % 0))\n            (map #(mod % b))\n            reverse\n            ))\n    )","problem":137,"user":"4e6f578c535d5021c1a8961b"},{"code":"(fn hoge [n base]\n      (loop [ret [] n n]\n              (let [x (quot n base) y (rem n base)]\n\t\t   (if (> base x)\n\t\t       (reverse (if (zero? x)(conj ret y ) (conj ret  y x)))\n\t\t       (recur (conj ret y) x)))))","problem":137,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [num radix]\n  (loop [result '(), num num]\n    (if (zero? num) (if (zero? (count result)) '(0) result)\n      (recur (cons (mod num radix) result)\n             (int (/ num radix))))))","problem":137,"user":"529b5301e4b02ebb4ef7509f"},{"code":"(fn [n b]\r\n  (loop [q n\r\n         res '()]\r\n     (if (= 0 (quot q b))\r\n       (conj res (rem q b))\r\n       (recur (quot q b) (conj res (rem q b))))\r\n  )  \r\n)","problem":137,"user":"4f3e6244e4b0e243712b1f85"},{"problem":137,"code":"#(if (= %1 0) [0]\n           ((fn d [n b]\n               (if (> n 0)\n                 (conj (d (int (/ n b)) b) (mod n b))\n                 [])) %1 %2))","user":"502873a8e4b01614d1633ff8"},{"code":"(letfn [(f [b n a]\n  (if (= 0 (quot b n))\n    (cons (mod b n) a)\n    (recur (quot b n) n (cons (mod b n) a))))]\n  #(f %1 %2 []))","problem":137,"user":"4e5411e8535d8a8b8723a279"},{"code":"(fn [n b]\n  (letfn [(f [digits num]\n          (if (= num 0)\n          digits\n          (recur (conj digits (mod num b)) (quot num b))))]\n    (if (zero? n)\n      [0]\n      (reverse (f [] n)))))","problem":137,"user":"5125745ae4b05d10e3e395f9"},{"problem":137,"code":"(fn [n b]\n   (if (zero? n)\n     [0]\n     (loop [n n\n            r '()]\n       (if (= n 0)\n         r\n         (recur (quot n b) (conj r (mod n b)))))))","user":"5f3f2281e4b004f08c61c561"},{"problem":137,"code":"(fn base-change [n b]\n  (if (< n b) [n]\n      (conj (base-change (quot n b) b) (rem n b))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":137,"code":"(fn bases\n  ([num base pow]\n     (if (= pow 0)\n       (list (int num))\n       (let [i (int (/ num (Math/pow base pow)))]\n         (cons i (bases (- num (* i (Math/pow base pow))) base (dec pow))))))\n  ([num base]\n     (if (= num 0)\n       '(0)\n       (bases num base (int (/ (Math/log num) (Math/log base)))))))","user":"534941d1e4b084c2834f4a60"},{"problem":137,"code":"(fn convert [x base]\n  (if (< x base) [x]\n      (conj (convert (quot x base) base) (mod x base))))","user":"5d81eba4e4b0915913b1d37b"},{"problem":137,"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b)\n          (mod n b))))","user":"53034738e4b0d8b024fd373e"},{"problem":137,"code":"(fn [n radix]\n    (if (< n radix)\n      (vector n)\n      (loop [parts '()\n             n n]\n        (if (zero? n)\n          (vec parts)\n          (recur (conj parts (mod n radix))\n                 (quot n radix))))))","user":"5531e445e4b09218d5f44f76"},{"code":"#(if (= %1 0)\n    [0]\n    (loop [n %1\n           b %2\n           o []\n           p (int (/ (java.lang.Math/log n) (java.lang.Math/log b)))]\n      (cond\n        (= -1 p) o\n        :else (let [d (int (java.lang.Math/pow b p))\n                    q (quot n d)]\n                (recur (- n (* q d)) b (conj o (quot n d)) (dec p)))\n        )))","problem":137,"user":"51f28a64e4b0210f90e7454e"},{"problem":137,"code":"(fn d [n b & [xs]]\n  (if (= n 0) \n    (or xs '(0))\n    (d (quot n b) b (conj xs (mod n b)))))","user":"51a3be77e4b0e77c4ca60bf8"},{"problem":137,"code":"(fn [x y] (if (= x 0) [0] (map #(mod % y) (reverse (take-while (partial < 0) (iterate #(quot % y) x))))))","user":"58e762d3e4b056aecfd47ccc"},{"problem":137,"code":"(fn [num base & acc] (let [quotnt (quot num base) modulo (mod num base) basexp acc] (if (= 0 quotnt) (cons modulo acc) (recur quotnt base (cons modulo acc)))))","user":"56481722e4b0284900eef628"},{"problem":137,"code":"(fn [num base]\n  (loop [n num remainder 0 ret []]\n    (if(< n base)\n      (reverse (into ret [n]))\n      (recur (quot n base) (rem n base) (into ret [(rem n base)])))))","user":"599ed08fe4b0871e7608b812"},{"code":"(fn [v b]\n  (loop [v v\n         digits []]\n     (if (zero? v)\n       (if (empty? digits)\n         [0]\n         (reverse digits))\n       (recur (quot v b)\n              (conj digits\n                    (rem v b))))))","problem":137,"user":"4e6a6d12535d8ccf87e9fee2"},{"code":"(fn [number base]\n      (if (= number 0) \n          [0]                     \n          (let [pots ((fn [n b] \n                        (reverse(take-while #(<= % n) (map #(. Math pow b %) (range))))) number base)\n                ]\n                (loop [d number l pots result []]\n                  (if (empty? l) \n                    result\n                    (let [c (int (/ d (first l)))]\n                      (recur (- d (* c (first l))) (rest l) (conj result c))\n                    )\n                  )\n                )\n            )\n        )\n)","problem":137,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn digits [x b]\n  (if (< x b)\n    [x]\n    (conj (digits (quot x b) b)\n          (mod x b))))","problem":137,"user":"50e4b066e4b0cb9ec68fbca6"},{"problem":137,"code":"(fn [v n]\n  (let [f (fn g [ni vi r]\n            (if (empty? ni)\n\t\t\t  (if (empty? r) [0] r)\n              (g (rest ni) (rem vi (first ni)) (conj r (int (/ vi (first ni)))))))]\n    (f (reverse (take-while #(>= v %) (iterate #(* n %) 1))) v [])))","user":"551c66dae4b07993ea3788de"},{"problem":137,"code":"(fn [number base]\n  (loop [digits (list (mod number base))\n         remaining (quot number base)]\n      (if (zero? remaining)\n        (vec digits)\n        (recur (conj digits (mod remaining base)) (quot remaining base) )))\n)","user":"5b15e881e4b0cc2b61a3be75"},{"code":"(fn digits-and-bases [n base]\n  (if (< n base)\n    [n]\n    (conj (digits-and-bases (quot n base) base) (rem n base))))","problem":137,"user":"4f3fb586e4b0e243712b1f9c"},{"code":"(fn to-base\n    [n b]\n    (let [f (fn [acc n b]\n              (if (>= 0 n) acc\n                (recur (conj acc (mod n b)) (int (/ n b)) b)))]\n      (if (= n 0) [0]\n        (f '() n b))))","problem":137,"user":"5273e006e4b03e8d9a4a7495"},{"code":"(fn [v b]\n  (loop [i v r []]\n    (if (< i b)\n      (cons i r)\n      (recur (int (/ i b)) (cons (mod i b) r)))))","problem":137,"user":"528652fbe4b0239c8a67ae14"},{"code":"(fn d [n b]\n  (if (< n b)\n    [n]\n    (conj\n     (d (quot n b) b)\n     (mod n b))))","problem":137,"user":"4e03c616535d04ed9115e796"},{"problem":137,"code":"(fn [n b]\n\t(loop [a [] n n]\n\t\t(if (< n b)\n          \t(cons n a)\n\t\t\t(let [r (rem n b) q (quot n b)]\n\t\t\t\t(recur (cons r a) q)))))","user":"536e5b68e4b0fc7073fd6e6d"},{"problem":137,"code":"(fn [num base]\n  (loop [acc ()\n         num num]\n    (if (< num base)\n      (conj acc num)\n      (recur (conj acc (rem num base))\n             (quot num base)))))","user":"532bce35e4b09d4e7a9b5536"},{"code":"(fn digits- [n base]\n  ^{:doc \"137. Write a function which returns a sequence of digits of                                                                                                  \n    a non-negative number (first argument) in numerical system with an                                                                                                 \n    arbitrary base (second argument).\"}\n  (if (< n base)\n    [n]\n    (conj (digits- (quot n base) base) (rem n base))))","problem":137,"user":"4e5eb843535d8a8b8723a2d4"},{"code":"(fn [n arb]\n  (if (= n 0) [0]\n  (let [get-max-len (fn [len] ; default: len => 0\n                       (if (< n (bigint (Math/pow arb len)))\n                         len\n                         (recur (inc len)))) ; get-max-len\n        max-len (get-max-len 0)\n        f (fn [remaining baselist position] ; default: position => max-len, baselist => [], remaining => n\n            (if (= position 0)\n              baselist\n            (let [t1 (bigint (Math/pow arb (dec position)))\n                  t2 (bigint (/ remaining t1))\n                  new-remaining (- remaining (* t2 t1))\n                  ]\n              (recur new-remaining (concat baselist (list t2)) (dec position))\n              ) ; let\n              ) ; if\n            ) ; fn f\n        ]\n    (f n [] max-len)\n    ) ; let\n    ) ; if\n  ) ; fn","problem":137,"user":"5021f0b3e4b00bba4502f7ac"},{"code":"(fn digits [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           power 1\n           acc ()]\n      (println \"n:\" n \"| power:\" power \"| acc:\" acc)\n      (if (zero? n)\n        acc\n        (recur (/ (- n (mod n base)) base)\n               (inc power)\n               (conj acc (mod n base)))))))","problem":137,"user":"4db1b3951254ad5b4805fa6f"},{"problem":137,"code":"(fn mybases [n b]\n  (if (= 0 (quot n b))\n    [n]\n    (conj (mybases (quot n b) b) (rem n b))))","user":"55536a8ae4b0deb715856e03"},{"problem":137,"code":"(fn [digit base]\n  (loop [restDigit digit\n          result '()]\n      (cond\n        (= 0 restDigit) \n       \t\t(if (empty? result) '(0) result)\n        :else \n          (recur \n            (int (/ restDigit base)) \n            (conj result (mod restDigit base))\n          )\n      )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"problem":137,"code":"(fn digit-me\n   ([n b] (digit-me n b '()))\n   ([n b coll]\n    (let [quot-i (quot n b)]\n      (if (< n b)\n        (cons n coll)\n        (digit-me quot-i b (cons (rem n b) coll ))))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"(fn rec-digits [ r n b ]\n        (if (< n b)\n            (conj r n)\n            (recur (conj r (mod n b)) (quot n b) b))) ()","problem":137,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn z [p q] (if (< p q) [p] (conj (z (quot p q) q) (mod p q))))","problem":137,"user":"536d83cee4b0fc7073fd6e5e"},{"code":"(fn f\n  ([n d] (let [res (f n d [])]\n           (if (seq res)\n             (reverse res)\n             [0]\n             )\n           )\n   )\n  ([n d acc] \n   (let [remainder (rem n d)\n         newn (quot n d)]\n     (if (zero? n)\n       (if (seq acc)\n         acc\n         [0]\n         )\n       (f newn d (conj acc remainder))\n       )\n     )\n   )\n  )","problem":137,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":137,"code":"(fn itr [m n]\n  (if (zero? (quot m n))\n    (vector (mod m n))\n    (conj (itr (quot m n) n) (mod m n))))","user":"56d7f340e4b0ea9b8538f7df"},{"code":"(fn [x n]\n    (loop[q (quot x n)\n          r (rem x n)\n          res []]\n      (if (= q 0) \n        (cons r res)\n        (recur (quot q n) (rem q n) (cons r res)))))","problem":137,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":137,"code":"(fn bases [n base]\n  (if (zero? n) [0]\n      (loop [n n xs '()]\n        (if (zero? n) xs\n          (recur (quot n base) (conj xs (mod n base))))\n        )\n      ))","user":"564a560ae4b0284900eef654"},{"code":"(fn [n d] (loop [r n dig (if (zero? n) [0] [])] (if (zero? r) (reverse dig) (recur (int (/ r d)) (conj dig (mod r d))))))","problem":137,"user":"52b43468e4b0c58976d9ad1b"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (let [ds (map first\n  \t  (take-while #(not= 0 (first %) (second %))\n\t\t\t      (drop 1\n\t\t\t\t    (iterate (fn [[_ n]] ((juxt mod quot) n b)) [0 n]))\n\t\t\t      ))]\n      (reverse ds))))","problem":137,"user":"4e513ecf535dc968683fc4f6"},{"problem":137,"code":"(fn digits [n base]\n  (loop [n n res '()]\n    (if (< n base)\n      (conj res n)\n      (recur (quot n base) (conj res (mod n base))))))","user":"5f300f28e4b033932238a682"},{"problem":137,"code":"(fn [n base] (if (zero? n)\n                                [0]\n                                (loop [dig nil\n                                       nn  n]\n                                  (cond\n                                    (zero? nn) dig\n                                    :else (recur (conj dig (mod nn base)) (quot nn base))))))","user":"5c0e3f86e4b01240ff56713d"},{"problem":137,"code":"(fn conv [num base]\n  (loop [myvec () num num]\n    (if (zero? num)\n      (if (empty? myvec)\n        [0]\n        myvec)\n      (recur\n        (conj myvec (mod num base))\n        (quot num base)))))","user":"5ad76df9e4b0ea6055cfac18"},{"problem":137,"code":"(fn digits[x y]\n  (loop [z x\n         acc []]\n    (let [remainder (rem z y)\n          quotient (quot z y)]\n      (if (= 0 quotient)\n        (reverse (conj acc z))\n        (recur quotient (conj acc remainder))))))","user":"54f86b8ce4b01ecee9d88828"},{"code":"(fn f [n base] \n  (if (< n base) \n    [n]\n    (conj (f (quot n base) base) (rem n base))))","problem":137,"user":"4ef77edb535dced4c769f254"},{"problem":137,"code":"(fn [n base]\n  (let [min-greater-power-than-n (some \n                               #(when (> % n) %)\n                               (iterate #(* % base) 1))\n        max-power-less-than-n (/ min-greater-power-than-n base)]\n    (loop [remainder n \n           current-power max-power-less-than-n \n           result []] \n        (let [subtrahend (some \n                           #(when (>= remainder (* % current-power)) %)\n                           (range base -1 -1))]\n          (if (>= 1 current-power)\n            (conj result subtrahend)\n            (recur (- remainder (* subtrahend current-power)) (/ current-power base) (conj result subtrahend)))))))","user":"54580586e4b01be26fd74616"},{"code":"#(if (zero? %) [0]\n  (ffirst \n    (drop-while (comp not zero? second) \n      (iterate \n        (fn [[s n]] [(cons (rem n %2) s) (quot n %2)]) \n        [() %]))))","problem":137,"user":"4f06dcad535dcb61093f6c16"},{"problem":137,"code":"(fn digits-and-bases [n base]\n  (loop [n n\n         digits '()]\n    (if (zero? n)\n      (if (empty? digits)\n        '(0)\n        digits)\n      (recur (int (/ n base)) (cons (mod n base) digits)))))","user":"5879d577e4b01531a375ead8"},{"problem":137,"code":"(fn [numb base]\n  (\n   (fn rebase [accum numb]\n     (if (= numb 0)\n       (if (empty? accum)\n         [0]\n         accum\n        )\n       (recur (conj accum (rem numb base)) (quot numb base))\n     )\n   )'() numb  \n  )                                     \n)","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn [x base] \n  (let [\n     todigs  \n       (reverse \n         (rest \n           (map \n             second \n             (take-while \n                (fn [[d m]](not= 0 d m)) \n                (iterate \n                   (fn [[d m]] [(quot d base)(mod d base)]) \n                   [x 0])))))]\n   (if (zero? x)\n       [0]\n       todigs)))","problem":137,"user":"4daa374930acd6ed13482a68"},{"code":"(fn get-digits [num base]\n  (if (zero? num)\n    [0]\n    ((fn digits [num]\n       (when-not (zero? num)\n         (concat (digits (quot num base))\n                 [(mod num base)])))\n     num)))","problem":137,"user":"530578ede4b0d8b024fd3760"},{"problem":137,"code":"(fn base-convert [m n]\n  (if (< m n)\n    [m]\n    (conj (base-convert (quot m n) n) (mod m n))))","user":"5514a60fe4b055c2f668d4d7"},{"code":"(fn __ [n base]\n  (let [v (mod n base)\n        r (int (/ n base))]\n    (if (zero? r)\n        [v]\n        (conj (__ r base) v))))","problem":137,"user":"52463059e4b09dbe66b56198"},{"problem":137,"code":"(fn digits-base \n  [n b]\n  (loop [tmp n res '()]\n      (if (pos? tmp)\n        (recur (quot tmp b) (conj res (rem tmp b)))\n        (if (zero? n) (conj res 0) res))))","user":"57b4779de4b0fbc9809a279a"},{"code":"(fn base [x b]\n  (if (< x b)\n    [x]\n    (conj (base (quot x b) b) (mod x b))\n    )\n  )","problem":137,"user":"52586d24e4b0cb4875a45cb0"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n)\n    '(0)\n    (loop [m n\n          result '()]\n      (if (zero? m)\n        result\n        (recur (int (/ m b)) (conj result (mod m b)))))))","user":"4f037faf535dcb61093f6af8"},{"code":"(fn pr137 [n base]\n  (loop [n n res []] \n    (if (zero? n)\n      (if (empty? res) [0] res)\n      (recur (quot n base) (cons (rem n base) res)))))","problem":137,"user":"51696ee7e4b03f62cda68ce8"},{"code":"(fn [n b]\n  (loop [n n r ()]\n    (if (zero? n)\n        (or (seq r) [0])\n        (recur (quot n b) (conj r (mod n b))))))","problem":137,"user":"4fc4eadee4b081705acca353"},{"problem":137,"code":"(fn [num base]\n  (loop [n num\n         digits '()]\n    (cond\n      (and (zero? n) (not-empty digits)) digits\n      (<= n 1) (conj digits n)\n      :else (let [q (quot n base)\n                  r (rem n base)]\n              (recur q (conj digits r))))))","user":"5f37263de4b0574c87022c4e"},{"problem":137,"code":"(fn [n b] \n  (if (= n 0) [0] \n    (loop [n n r []] \n      (if (= n 0) \n        (reverse r)\n        (recur (int (/ n b)) (conj r (mod n b)))))))","user":"5457e5f1e4b01be26fd74613"},{"problem":137,"code":"(fn [decimal base]\n            (letfn [(base-conv [n]\n                      (if (> n 0)\n                        (conj (base-conv (quot n base)) (rem n base))\n                        []))]\n              (if (= 0 decimal) [0] (base-conv decimal))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn n-ary [n base]\n  (if (< n base)\n    [n]\n    (conj (n-ary (unchecked-divide-int n base) base) (mod n base))))","problem":137,"user":"4f4e91a9e4b03ad3f0c10cca"},{"code":"#(loop [in % base %2 ret ()] \n  (if (= in 0) \n      (or (seq ret) '(0)) \n      (recur (quot in base) base (cons (mod in base) ret))))","problem":137,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn [n ratio]\n  (if (zero? n) [n]\n    (loop [r () v n]\n      (if (zero? v) r\n        (recur (conj r (rem v ratio)) (quot v ratio))))))","problem":137,"user":"52479487e4b05ef8e38e6373"},{"problem":137,"code":"(fn  [n b]\n  (loop [digits [] r n]\n    (if (>= r b)\n      (recur (cons (mod r b) digits) (quot r b))\n      (cons r digits))))","user":"4ec28d86535dfed6da9c6dbc"},{"code":"#(loop [n %\r\n          b %2\r\n          r nil]\r\n    (let [a (int (/ n b))\r\n          c (rem n b)]\r\n      (if (zero? a)\r\n        (conj r c)\r\n        (recur a b (cons c r)))))","problem":137,"user":"4f58d92fe4b0a7574ea71858"},{"problem":137,"code":"(fn [num base]\n  (letfn [(to-base [n b]\n            (if (zero? n)\n              []\n              (conj (to-base (quot n b) b) (mod n b))))]\n\n    (if (zero? num)\n      [0]\n      (to-base num base))))","user":"5344fe13e4b084c2834f4a32"},{"problem":137,"code":"(fn \n  [n base]\n  (loop [number n\n         xform []]\n    (if (= 0 (quot number base))\n      (cons (mod number base) xform)\n    (recur (quot number base) (cons (mod number base) xform)))))","user":"5ec819b4e4b08d0ec38692e2"},{"problem":137,"code":"(fn r [n b] \n  (if (< n b) \n    [n] \n    (conj (r (int (/ n b)) b) (mod n b))))","user":"56b86e64e4b0f26550335924"},{"problem":137,"code":"(fn [n b] \n\t(letfn [(f [d acc] \n\t     (if (zero? d)\n\t         acc\n\t         (f (quot d b) (conj acc (rem d b)))))] \n\t        (if (zero? n) '(0) (f n '()))))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":137,"code":"(fn [x b]\n  (if (zero? x)\n    [0]\n    (let [quotrem (juxt quot rem)]\n      (->> (quotrem x b)\n           (iterate #(quotrem (first %) b))\n           (take-while #(not= % [0 0]))\n           (map second)\n           (reverse)))))","user":"5afb4b15e4b0cc2b61a3bcf6"},{"problem":137,"code":"(fn [number base]\n  (if (zero? number)\n    [0]\n    (if (= number base)\n      [1 0]\n      ((fn inner [result rest_]\n         (if (< rest_ base)\n           (if (zero? rest_)\n             result\n             (conj result rest_))\n           (inner (conj result (rem rest_ base))\n                  (quot rest_ base))))\n       '() number))))","user":"58637f03e4b0f14aab7c881e"},{"problem":137,"code":"(fn convert \n  ([value base] (convert (quot value base) base [(mod value base)]))\n  ([value base output]\n   (if (= 0 value)\n     output\n     (recur (quot value base) base (cons (mod value base) output)))))","user":"56d63729e4b0ea9b8538f7ca"},{"code":"(fn [x base] (if (zero? x) [0] \n    (loop [acc () remains x]\n      ( if (zero? remains)\n        acc\n        (recur (cons (mod remains base) acc) (quot remains base) )  \n      ))))","problem":137,"user":"50956c2be4b087f34d351ab2"},{"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b)\n          (rem n b))))","problem":137,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":137,"code":"(fn [n b]\n  (reverse (loop [d [] n n]\n             (if (< n b)\n               (conj d n)\n               (recur (conj d (rem n b)) (quot n b))))))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":137,"code":"(fn my_bases [x base]\n  (if (= x 0)\n    [0]\n    (loop [result [] value x ]\n      (if (= value 0)\n\t    (reverse result)\n\t    (recur (concat result [(mod value base)] ) (quot value base) )))))","user":"51eec1a6e4b0871fa145d98d"},{"code":"(fn digits [n base]\n  (if (< n base) [n]\n     (conj (digits (quot n base) base) (mod n base))))","problem":137,"user":"4e994541535dbda64a6f6b64"},{"code":"(fn bseq [x, b]\n  (loop [digits []\n         x      x]\n    (if (= 0 x)\n      (if (empty? digits)\n        [0]\n        (reverse digits))\n      (let [x-next (quot x b)\n            digit  (rem x b)]\n        (recur (conj digits digit) x-next)))))","problem":137,"user":"51365524e4b04ac1f358dd52"},{"problem":137,"code":"(fn d [n b]\n  (if (< n b) [n]\n  \t(conj (d (quot n b) b) (mod n b))))","user":"53973e7be4b0b51d73faaee6"},{"problem":137,"code":"(fn arb-base [x b]\n    (loop [z (quot x b) \n           dights (list (mod x b))]\n        (if (zero? z)\n            dights\n            (recur (quot z b) \n                   (conj dights (mod z b))))))","user":"5af8221ce4b0cc2b61a3bccd"},{"problem":137,"code":"(fn f [r n b]\n  (if (< n b)\n    (conj r n)\n    (recur (conj r (rem n b))\n           (quot n b)\n           b))) ()","user":"5012da69e4b0c8732600222d"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [rv () value n power 1]\n      (let [nextp (* power b)\n            r (rem value nextp)]\n        (if (zero? value)\n          rv\n          (recur (conj rv (/ r power)) (- value r) nextp))))))","user":"561ba3e5e4b073c65b0ce3eb"},{"problem":137,"code":"(fn [n b]\n     (loop [current-n n\n            current-result []]\n       (if (< current-n b)\n         (conj current-result current-n)\n         (recur (int (/ current-n b)) (cons (mod current-n b) current-result)))))","user":"53f891eee4b0de5c4184856d"},{"problem":137,"code":"(fn digs [n p]\n  (if (zero? n)\n    (vec '(0))\n    (if (= n p)\n      (vec '(1 0))\n  (loop [pots (reverse (take-while #(> (/ n (Math/pow p %)) 1) (range 20)))\n         number n\n         currentfac 1\n         out '()]\n    (if (empty? pots)\n      (vec (reverse out))\n      (if (< number (Math/pow p (first pots)))\n          (recur (drop 1 pots)\n                 number\n                 1\n                 (conj out 0))\n          (if (< (/ number (* currentfac (Math/pow p (first pots)))) 1)\n  \n              (recur (drop 1 pots) \n                     (mod number (* (dec currentfac) (Math/pow p (first pots)))) \n                     1 \n                     (conj out (dec currentfac)))\n              (recur pots \n                     number \n                     (inc currentfac) \n                     out))))))))","user":"5143824ae4b0b4fb4ace5f36"},{"problem":137,"code":"(fn it [n b]\n  (if (= 0 (quot n b))\n    [(mod n b)]\n    (conj (it (quot n b) b) (mod n b))))","user":"5504dd64e4b086ebe8a79c83"},{"problem":137,"code":"(fn ! [number base]\n  (if (>= number base)\n    (conj (! (quot number base) base) (rem number base))\n    [number]))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn digit-base [n base]\n  (loop [an () n n]\n    (let [r (rem n base)\n          q (quot n base)]\n      (if (zero? q)\n        (conj an r)\n        (recur (conj an r) q)))))","problem":137,"user":"4dd62278535d2dad7130b5c7"},{"code":"(fn f [x b] (let [d (int (/ x b)) r (rem x b)] (if (> d 0) (conj (f d b) r) [r])))","problem":137,"user":"51f66e0ee4b06ff1c25c52c3"},{"code":"(fn convert-with-base [n b]\n  (loop [n n\n         res '()]\n    (if (= n 0)\n      (or (not-empty res) '(0))\n      (recur (quot n b) (conj res (rem n b))))))","problem":137,"user":"526ee63de4b03e8d9a4a733f"},{"code":"(fn f [i b]  \n    (let [[q m] ((juxt quot mod) i b)]\n      (cond\n        (= q 0) [m]\n        (< q b) [q m]\n        1 (conj (f q b) m))))","problem":137,"user":"4ec74de3535d6d7199dd36df"},{"problem":137,"code":"(fn digits [n b]\n  (loop [accu [(mod n b)]\n         n (quot n b)]\n    (if (zero? n)\n      (reverse accu)\n      (recur (conj accu (mod n b)) (quot n b)))))","user":"4e82c062535db62dc21a62cc"},{"problem":137,"code":"(fn [x b]\n  (loop [acc (if (zero? x) '(0) ()) k x]\n    (if (zero? k)\n      acc\n      (recur (conj acc (rem k b)) (unchecked-divide-int k b)))))","user":"5576f299e4b05c286339e077"},{"code":"(fn __ [n base]\n  (if (zero? (quot n base))\n    [(mod n base)]\n    (conj (__ (quot n base) base) (mod n base))))","problem":137,"user":"52828298e4b0757a1b17145b"},{"code":"(fn [s x r]\n   (if (< x r)\n     (conj s x)\n     (recur (conj s (mod x r)) (quot x r) r))) '()","problem":137,"user":"4e65027c535d8ccf87e9fe6e"},{"problem":137,"code":"(fn radix [x r] \n  (if (= x 0) \n    [0]\n   \t(rseq (loop [v x acc []] (if (= v 0) acc (recur (quot v r) (conj acc (mod v r))))))))","user":"55645592e4b0c656e3ff1802"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [m (int (/ (Math/log n) (Math/log b)))\n           n n\n           digits []]\n      (if (zero? m) (conj digits (int n))\n        (recur (dec m) (mod n (Math/pow b m)) (conj digits (int (quot n (Math/pow b m)))))))))","problem":137,"user":"4ff3df0fe4b0678c553fc355"},{"problem":137,"code":"(fn [n b]\n    (if (zero? n)\n      [0]\n      (loop [n n d 1 result []]\n        (if (zero? n)\n          result\n          (let [h (reduce * 1 (repeat d b))\n                m (mod n h)]\n            (recur (- n m) (inc d) (cons (/ (* m b) h) result)))))))","user":"5c995fa4e4b048ec896c5a96"},{"problem":137,"code":"(fn f [x n]\n  (let [q (quot x n)]\n    (conj (if (= 0 q) [] (f q n)) (rem x n))))","user":"50f10f7be4b06d9538fe211a"},{"code":"(fn digs [n b]\n  (if (zero? n)\n    [0]\n    (let [r (digs (quot n b) b)]\n      (conj\n        (if (= [0] r) [] r)\n        (rem n b)\n      )\n    )\n  )\n)","problem":137,"user":"4f725201e4b07046d9f4f02f"},{"problem":137,"code":"(fn convert\n     ([x base] (if (zero? x) [0] (convert [] (bigint x) base)))\n     ([l x base] (if (zero? x) (rest l)\n                     (convert (cons (mod (bigint x) base) l) (/ (bigint x) base) base))))","user":"5d02fe44e4b0cc9c915881c0"},{"code":"(fn base-converter [d b]\n  (loop [d d\n         r []]\n    (if (> b d)\n      (cons d r)\n      (recur (unchecked-divide-int d b) (cons (mod d b) r)))))","problem":137,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":137,"code":"(fn num-in-base-n\n  [num n]\n  ((fn num-in-base-n-helper\n     [num s]\n     (if (= 0 num)\n       (if (seq s) (vec s) [0])\n       (num-in-base-n-helper \n        (quot num n) \n        (cons (mod num n) s)))) num []))","user":"53b952eee4b047364c0444e6"},{"code":"(fn digits [x base]\n  (if (> base x)\n    [x]\n    (conj (digits (quot x base) base) (mod x base))))","problem":137,"user":"4f0e995e535d0136e6c22326"},{"problem":137,"code":"(fn [x base]\n  (loop [d 1 acc []]\n    (let [q (quot x d)]\n      (if (zero? q)\n        (if (empty? acc)\n          [0]\n          (reverse acc))\n        (recur (* d base) (conj acc (mod q base)))))))","user":"53c649d3e4b00fb29b221297"},{"problem":137,"code":"(fn digits-bases [a-num base]\n    (if (== a-num 0) [0]\n        (->> (iterate #(quot % base) a-num)\n             (take-while (partial < 0))\n             reverse\n             (mapv #(mod % base)))))","user":"505d1b01e4b0e6aca564be04"},{"problem":137,"code":"(fn [number base]\n  (loop [n (quot number base)\n             result (list (rem number base))]\n    (if (= n 0)\n      (vec result)\n      (recur (quot n base) (conj result (rem n base))))))","user":"5cb41c40e4b026601754b911"},{"code":"(fn f [n b]\n  (if (< n b) [n]\n    (let [q (quot n b) r (rem n b)]\n      (conj (f q b) r))))","problem":137,"user":"500933a6e4b046cdb195e074"},{"problem":137,"code":"(fn [n d]\n  (if (= n 0)\n    [0]\n  (loop [rs '() n n]\n    (if (= n 0)\n      rs\n    (recur (cons (rem n d) rs) (quot n d))))))","user":"53da059be4b0e771c302547e"},{"problem":137,"code":"(fn [input base]\n    (loop [result '() remaining input]\n          (if (and (= remaining 0)\n                   (not-empty result))\n              result\n              (recur (conj result (mod remaining base))\n                     (quot remaining base)\n              )\n          )\n     )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"problem":137,"code":"(fn [x b]\n  (loop [x x i b r '()]\n    (if (< x b)\n      (conj r x)\n      (recur (quot x b) (* i b) (conj r (rem x b))))))","user":"55ac07afe4b03311e7b7328f"},{"problem":137,"code":"(fn dib2\n  ([n b] (if (= 0 n) (list 0) (dib2 n b ())))\n  ([n b r] (if (= 0 n) r (recur (quot n b) b (cons (rem n b) r)))))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn f\n  ([n b z]\n    (if (zero? n)\n      z\n      (conj (f (quot n b) b []) (mod n b) )\n      ))\n  ([n b] (f n b [0])))","problem":137,"user":"5349ac2be4b084c2834f4a67"},{"problem":137,"code":"(fn convert [num base]\n  (reverse (map #(rem (quot num % ) base)\n                (cons 1 (take-while #(>= num %) (iterate #(* % base) base))))))","user":"5532a04ee4b09218d5f44f82"},{"code":"(fn digits [n b]\n  (if (= 0 n) [0]\n  (loop [a '() n n]\n    (if (= n 0)\n      a\n      (recur (cons (rem n b) a) (quot n b))))))","problem":137,"user":"503a234de4b088a6a14ca76d"},{"problem":137,"code":"(fn dig-and-base [n base]\n  (if (< n base) [n]\n      (concat (dig-and-base (quot n base) base)[(rem n base)])))","user":"51b76227e4b0d906fcd71d35"},{"code":"(fn ! [n base]\n  (if (< n base)\n    [n]\n    (conj (! (quot n base) base) \n          (mod n base))))","problem":137,"user":"514c2d05e4b02b8cbb2a9278"},{"code":"(fn to-base [n b]\n        (loop [d () m n]\n          (let [q (quot m b) r (rem m b) e (conj d r)]\n            (if (= q 0)\n              e\n              (recur e q)))))","problem":137,"user":"4f031eac535dcb61093f6a67"},{"problem":137,"code":"(fn digs ([n b] (if (= n 0) '(0) \n               (digs n b '()))) \n\n         ([n b l] (if (= n 0) l\n\n                      (digs (quot n b) b\n\n                            (conj l (mod n b))))))","user":"5fab7ea6e4b08cb800c85ad8"},{"problem":137,"code":"(fn [n b]\n   (loop [remain n digits []]\n     (if (= 0 remain)\n       (if (empty? digits) \n         [0] \n         digits)\n       (recur (quot remain b) (cons (rem remain b) digits)))))","user":"55f8b32ae4b03cbcff9738ba"},{"code":"#(loop [x %1 r ()] (let [f (conj r (mod x %2))] \n                     (if (< x %2) f (recur (int (/ x %2)) f))))","problem":137,"user":"4dae916eedd6309eace4d155"},{"code":"(fn f [x n b]\n  (if (= n 0)\n    (if x [] [0])\n    (conj (f true (quot n b) b)\n          (rem n b))))\nfalse","problem":137,"user":"50a83315e4b054305ba5a830"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (let [start (int (Math/pow base (quot (Math/log n) (Math/log base))))]\n      (->> (take-while #(>= % 1) (iterate #(/ % base) start))\n           (reductions (fn [[_ x] pow] ((juxt quot rem) x pow)) [0 n])\n           rest\n           (map first)))))","problem":137,"user":"507b7dbee4b09034bfeeb71e"},{"code":"(fn [n b] \n  (loop [n n num ()] \n    (if (zero? n) \n      (if (empty? num) '(0) num) \n      (recur (int (/ n b)) (conj num (mod n b))))))","problem":137,"user":"52488a46e4b05ef8e38e63e0"},{"problem":137,"code":"(fn [n b] (or (->> (iterate (fn [[a r]] [(quot a b) (rem a b)]) [n])\n                   (take-while (comp pos? (partial apply +)))\n                   (keep second)\n                   (reverse)\n                   (seq))\n               [0]))","user":"5960a1a6e4b066ee0a44b08e"},{"problem":137,"code":"(fn digits [n base]\n  (if (>= n base)\n    (concat (digits (int (/ n base)) base) [(mod n base)])\n[n]))","user":"593910eae4b02506e01a29f4"},{"problem":137,"code":"(fn [val base]\n  (loop [cval val\n         acc nil]\n    (if (zero? cval)\n      (or acc [0])\n      (recur (quot cval base) (cons (mod cval base) acc)))))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn f [n b]\n  (if (< n b) [n] \n    (conj (f (quot n b) b) (rem n b))))","problem":137,"user":"4f956072e4b0dcca54ed6ccf"},{"code":"(fn t ([n b] (t n b '()))\n  ([n b a] \n    (let [r (rem n b)]\n      (if (= r n) (conj a r)\n         (t (int (/ n b)) b (conj a r))))))","problem":137,"user":"4dbdab4e535d020aff1edf49"},{"problem":137,"code":"(fn [numb base] (if (= numb 0) [0] (loop [n numb result []] (if (= n 0) result (do (println n result numb base) (recur (quot n base) (cons (mod n base) result)))))))","user":"5e4199b2e4b01d43a70e8e55"},{"code":"(fn d [n b] (if (< n b) \n[n] \n(conj (d (int (/ n b)) b)  (mod n b))))","problem":137,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [n b]\n    (let [r \n          (->> n\n               (iterate #(quot % b))\n               (take-while #(not (== 0 %)))\n               (map #(mod % b))\n               reverse\n               )\n          ]\n      (if (= r ()) [0] r)\n      ))","problem":137,"user":"515cf9b5e4b00901442db1d4"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n\n           s []]\n      (if (zero? n)\n        s\n        (recur (quot n base) (cons (mod n base) s))))))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn to-base [n b] \n  (loop [n n num ()] \n    (if (zero? n) \n      (if (empty? num) '(0) num) \n      (recur (int (/ n b)) (conj num (mod n b))))))","problem":137,"user":"5032b066e4b00c0952a257ea"},{"problem":137,"code":"(fn tobase \n  ([n base] (tobase n base ()))\n  ([n base result]\n   (if (= n 0)\n       (if (empty? result) [0] result)\n       (tobase (quot n base) base (cons (rem n base) result)))))","user":"58dcf11ae4b0a4d5acaab6af"},{"code":"#(loop [result [] n %]\n  (if (and (not (empty? result)) (= n 0)) (reverse result)\n    (recur (conj result (rem n %2)) (quot n %2))))","problem":137,"user":"4f2d5f5de4b0d6649770a05a"},{"problem":137,"code":"(fn [n base] (loop [x n, acc '()]\n               (if (< x base)\n                 (conj acc x)\n                 (recur (quot x base)\n                        (conj acc (mod x base))))))","user":"5e6ba862e4b04a83ad7cd27d"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         digits ()]\n    (if-not (zero? n)\n      (recur (quot n base)\n             (cons (mod n base) digits))\n      (if (seq digits)\n        digits\n        [0]))))","user":"575cbe44e4b02ea114799374"},{"code":"(fn [num, base]\r\n  (let [f (fn [n r]\r\n            (let [r (cons (rem n base) r) n (quot n base)]\r\n              (if (zero? n) r (recur n r))))]\r\n    (f num [])))","problem":137,"user":"4fd2e5d8e4b04c3a95aa0427"},{"problem":137,"code":"(fn __ [n b]\n  (loop [l n\n         r []]\n    (if (= 0 l) \n      (if (empty? r)\n        [0]\n        r)\n      (recur (int (/ l b)) (concat [(mod l b)] r)))))","user":"5475d755e4b0c51c1f4d72a0"},{"code":"(fn digits [x rad]\n  (if (< x rad)\n    [x]\n    (conj (digits (quot x rad) rad) (rem x rad))))","problem":137,"user":"4ee6400c535d93acb0a6685b"},{"code":"(fn [n r]\n  (->> (iterate #(* r %) 1)\n    (map #(quot n %))\n    (take-while #(> % 0))\n    (map #(mod % r))\n    reverse\n    (#(if (empty? %) [0] %))))","problem":137,"user":"50479524e4b0371827a27bc4"},{"code":"(fn [n r]\n   (loop [trailing-num (rem n r)\n          leading-num (/ (- n trailing-num) r)\n          return-vec []\n          leading-pow 1]\n     (if (> r leading-num)\n       (if (= [0 0] (vec (filter #(< % r) (map first (reverse (sort-by #(second %) (into return-vec [[leading-num (reduce * (repeat leading-pow r))][trailing-num (reduce * (repeat (- leading-pow 1) r))]]))))))) [0] (vec\n                                                                                                                                                                                                                        (filter #(< % r) (map first (reverse (sort-by #(second %) (into return-vec [[leading-num (reduce * (repeat leading-pow r))][trailing-num (reduce * (repeat (- leading-pow 1) r))]])))))))\n         (recur\n          (rem leading-num r)\n          (/ (- leading-num (rem leading-num r)) r)\n          (into return-vec [[leading-num (reduce * (repeat leading-pow r))][trailing-num (reduce * (repeat (- leading-pow 1) r))]])\n          (inc leading-pow)))))","problem":137,"user":"4fdf2b50e4b05e33b9224f93"},{"code":"(fn decompose [n b] (if (< n b) [n] (conj (decompose (quot n b) b) (mod n b))))","problem":137,"user":"532347dde4b09d4e7a9b54cc"},{"problem":137,"code":"(fn [n b] (into [] (loop [n n r '()] (if (zero? n) (if (empty? r) '(0) r) (recur (quot n b) (conj r (rem n b)))))))","user":"58987ee9e4b00487982d52d2"},{"problem":137,"code":"(fn [n base]\n  (loop [x n res []]\n    (if (> base x) (reverse (conj res x))\n      (recur (quot x base) (conj res (rem x base))))))","user":"55c20bd0e4b0e31453f64972"},{"problem":137,"code":"; works, but clunky\n;(fn [n b]\n;  (loop [result [] n n]\n;    (if (< n b)\n;      (concat [n] result)\n;      (recur (concat [(mod n b)] result) (quot n b)))))\n\n; noiseehc -- pretty, but uses stack\n;(fn digits [n b]\n;  (if (< n b) [n] (conj (digits (quot n b) b) (mod n b))))\n\n; better - but returns list instead of vector\n;(fn [n b]\n;  (loop [n n r ()]\n;    (if (< n b)\n;      (conj r n)\n;      (recur (quot n b) (conj r (mod n b))))))\n\n; best\n(fn [n b]\n  (loop [n n r []]\n    (if (< n b)\n      (cons n r)\n      (recur (quot n b) (cons (mod n b) r)))))","user":"5a544eeee4b05d388ecb6c24"},{"code":"(fn radix-conv [n base]\n  (letfn [(func [n base]\n            (cond (= 0 n) '()\n                  true (cons (mod n base) (func (quot n base) base))))]\n    (cond (= 0 n) (list 0)\n          true (clojure.core/reverse (func n base)))))","problem":137,"user":"4ef6f5ea535dced4c769f250"},{"problem":137,"code":"(fn __ [a b]\n  (if (< a b)\n    [a]\n    (conj (__ (quot a b) b) (rem a b))))","user":"58bc6a88e4b0888cdc949d16"},{"code":"(fn to-digits [n b]\n  (loop [n n, acc ()]\n    (let [q (quot n b), r (rem n b), acc (cons r acc)]\n      (if (zero? q)\n        acc\n        (recur q acc)))))","problem":137,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":137,"code":"#(loop [result '() n %1]\n    (let [r (rem n %2) r (conj result r)]\n      (if (< n %2)\n        r\n        (recur r (quot n %2)))))","user":"576df252e4b0979f8965156f"},{"problem":137,"code":"(fn [n b]\n  (or\n   (reduce #(cons (mod %2 b) %1) nil (take-while pos? (iterate #(quot % b) n)))\n   [0]))","user":"4e6a4950535d8ccf87e9febf"},{"problem":137,"code":"(fn [n b]\n    (loop [x n\n           ds nil]\n         (if (< x b)\n             (cons x ds)\n             (recur (quot x b) (cons (rem x b) ds)))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn digits-bases\n  ([num b]\n   (if (= num 0) [0] (digits-bases num b b)))\n  ([num b mag]\n   (if (<= num 0)\n     []\n     (let [remainder (rem num mag)\n           prev-mag (/ mag b)\n           current-digit (/ remainder prev-mag)\n           remaining-value (- num remainder)\n           ]\n       (conj (digits-bases remaining-value b (* mag b)) current-digit)))))","problem":137,"user":"53527551e4b084c2834f4af0"},{"problem":137,"code":"(fn convert [num b]\n  (loop [n num\n         r []]\n    (if (zero? n)\n      (if (empty? r)\n        [0]\n        (reverse r))\n      (recur (quot n b)\n             (conj r (rem n b))))))","user":"57e0f30ae4b0bfb2137f5a66"},{"code":"(fn [n base] ((fn base [n b c] (if (= 0 (quot n b)) (cons (rem n b) c) (base (quot n b) b (cons (rem n b) c)))) n base []))","problem":137,"user":"52c1bd29e4b07a9af579236a"},{"code":"(fn [n b]\n  (if (= n 0) [0]  \n    (loop [x n v ()]\n      (if (= 0 x) \n        v\n        (recur (quot x b) (conj v (mod x b)))))))","problem":137,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn nbase [n base]\n  (if (< n base) [n]\n    (into [] (concat (nbase (quot n base) base) [(mod n base)]))))","problem":137,"user":"535ca812e4b04ce2eb3ed2b7"},{"problem":137,"code":"(fn convert-base [n base]\n  ;; For e.g convert 1208 to base 26\n  ;; 1208 / 26 = 46 rem 12\n  ;; 12 goes into the 26^0 col\n  ;; 46 / 26 = 1 rem 20\n  ;; 20 goes into the 26^1 col\n  ;; 1 is less than 26 so it's the final number (26^2)\n  (if (>= n base)\n    (conj (convert-base (int (/ n base)) base) (rem n base))\n    (conj [] n)))","user":"58327a08e4b089d5ab817c7c"},{"code":"(fn [x b]\n   (if (zero? x)\n     [x]\n     ((fn r [x]\n        (if (zero? x)\n          []\n          (conj (r (quot x b)) (mod x b))))\n       x)))","problem":137,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":137,"code":"(fn digits-based [n base]\n  (if (zero? n) '(0)\n    (loop [n n\n           dig '()]\n      (if (zero? n) dig\n        (recur (unchecked-divide-int n base) (cons (mod n base) dig))))))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn [n b]\n   (if (zero? n) [0]\n       (->> (iterate #(quot % b) n)\n            (take-while #(< 0 %))\n            (map #(rem % b))\n            reverse)))","problem":137,"user":"5175533fe4b0dea9bbfba575"},{"code":"#(or (loop [x % r nil]\n  (if (= 0 x) r\n    (recur (quot x %2) (cons (mod x %2) r)))) [0])","problem":137,"user":"4e5fe31a535d8ccf87e9fe50"},{"code":"(fn [n b]\n (cond (zero? n) [0]\n       (= n b) [1 0]\n       :else (let [i (dec (int (Math/ceil (/ (Math/log n) (Math/log b)))))]\n               (letfn [(f [m j]\n                         (if (zero? j)\n                           [m]\n                           (let [c (int (Math/ceil (/ (Math/log m) (Math/log b))))\n                                 x (int (Math/pow b (dec c)))\n                                 digit (if (zero? x) x (int (Math/floor (/ m x))))\n                                 rst (- m (* digit x))]\n                             (concat [digit] (f rst (dec j))))))]\n                 (f n i)))))","problem":137,"user":"5097b556e4b00ad8bab4e970"},{"problem":137,"code":"(fn [num base]\n  (loop [n num\n         acc '()]\n    (let [[q r] ((juxt quot rem) n base)]\n      (if (zero? q)\n        (cons r acc)\n        (recur q (cons r acc))))))","user":"505aa653e4b021387fb89857"},{"code":"(fn [n r]\n   (loop [x n s []]\n     (if (< x r) (cons x s)\n       (recur (quot x r) (cons (rem x r) s))\n       )\n     )\n   )","problem":137,"user":"5274eb56e4b03e8d9a4a74bb"},{"code":"(fn [n base]\n  (loop [n n result ()]\n    (if (< n base)\n      (cons n result)\n      (recur (quot n base) (cons (rem n base) result)))))","problem":137,"user":"4e7c8fd1535db169f9c796be"},{"problem":137,"code":"(fn [n b]\n  (loop [a n r '()]\n    (if (< a b)\n      (conj r a)\n      (recur (quot a b) (conj r (mod a b)))\n      )))","user":"565b2fa5e4b068f2fe63dbfe"},{"code":"(fn [n b]\n(loop [n n lst nil]\n (if (zero? n) (if lst lst [0])\n  (recur (quot n b) (cons\n                      (mod n b)\n                      lst)))))","problem":137,"user":"4e356d2b535deb9a81d77f2d"},{"problem":137,"code":"(fn [x n]\n  (loop [x x s []]\n    (if (< x n) (cons (mod x n) s)\n      (recur (quot x n) (cons (mod x n) s)))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":137,"code":"(fn [x b]\n  (let [n (if (zero? x) 0 (int (/ (Math/log x) (Math/log b))))]\n    (first (reduce (fn [[v r] i]\n                     (let [bi (apply * (repeat i b))]\n                       [(conj v (quot r bi)) (rem r bi)]))\n                   [[] x] (range n -1 -1)))))","user":"56874171e4b0dcc4269f405c"},{"problem":137,"code":"(fn [x y]\n  (letfn \n    [(digits\n      ([n b] \n       (cons \n        (mod n b)\n        (if (<= b n)\n          (digits \n           (int (/ n b)) \n           b)\n          []))))]\n    (reverse (digits x y))))","user":"5a6a7cc5e4b0512ff01cda27"},{"code":"(fn [n base]\n  (letfn [(dig-base [n base]\n           (loop [remn n div []]\n             (if (= remn 0)\n               div\n               (recur (quot remn base) (conj div (rem remn base))) )))]\n    (if (= n 0)\n      [0]\n      (reverse (dig-base n base)))))","problem":137,"user":"513cb853e4b0b86ece9f322b"},{"problem":137,"code":"#((fn [n d a]\n    (let [m (mod n d)\n          q (quot n d)\n          as (cons m a)]\n      (if (= 0 q)\n          as\n          (recur q d as)))) %1 %2 [])","user":"5884e807e4b0f1effa3b76a6"},{"code":"#(loop [n %\n          b %2\n          r nil]\n    (let [a (int (/ n b))\n          c (rem n b)]\n      (if (zero? a)\n        (conj r c)\n        (recur a b (cons c r)))))","problem":137,"user":"51a05bede4b0b292b01ee3f4"},{"problem":137,"code":"(fn dgts\n  ([n b]\n   (if (= n 0)\n     [0]\n     (dgts n b [])))\n  ([n b acc]\n   (if (= n 0)\n     acc\n     (dgts (quot n b) b (cons (mod n b) acc)))))","user":"5da760ebe4b000c986472c1a"},{"problem":137,"code":"(fn digits-in-base [N B]\n  (if (= N 0)\n    [0]\n    (loop [pool N spread ()]\n      (if (> pool 0)\n        (recur (quot pool B)\n               (conj spread (mod pool B)))\n        (vec spread)\n        ))))","user":"5d64ecb2e4b0c9e5857d5036"},{"code":"(fn [d base]\n  (let [n (if (zero? d) 0 (int (/ (Math/log d) (Math/log base))))]\n    (first (reduce (fn [[v r ] i]\n                     (let [basen (apply * (repeat i base))]\n                       [(conj v (quot r basen)) (rem r basen)]))\n                   [[] d] (range n -1 -1)))))","problem":137,"user":"50705072e4b07bd6ad9b9f27"},{"problem":137,"code":"(fn [a b]\n\t(cond\n           (< b Character/MAX_RADIX) (map #(- (int %) 48) (java.lang.Integer/toString a b))\n           (= a b) [1 0]\n           :else (\n\t\t\t\t\t(fn find-digit [x r acc1]\n\t\t\t\t\t\t \t(loop [y x acc 0]\n\t\t\t\t\t\t \t\t(if (> r y)\n\t\t\t\t\t    \t\t\t  (if (zero? y)\n\t\t\t\t\t    \t\t\t  \t acc1\n\t\t\t\t\t    \t\t\t  \t (find-digit (- x (* (Math/pow r acc) (int y))) r (conj acc1 (int y)))\n\t\t\t\t\t    \t\t\t  \t)\n\t\t\t\t\t    \t\t\t(\n\t\t\t\t\t    \t\t\t\trecur (/ y r) \n\t\t\t\t\t    \t\t\t\t\t  (inc acc)\n\t\t\t\t\t    \t\t\t)\n\t\t\t\t\t\t \t\t)\n\t\t\t\t\t \t\t)\n\t\t\t\t\t\t)\n\t\t\t\ta b []\n           \t)\n     )\n)","user":"55d7312ee4b0e31453f64a9f"},{"problem":137,"code":"(fn convert [n b]\n  (let [magnitudes (reverse (take-while #(<= % n)\n                                        (map #(Math/pow b %)\n                                             (range))))\n        digits ((fn calculate-magnitudes [current-n current-magnitudes]\n                  (if (empty? current-magnitudes)\n                    []\n                    (cons (int (/ current-n (first current-magnitudes)))\n                          (calculate-magnitudes (mod current-n (first current-magnitudes))\n                                                (rest current-magnitudes))))) \n                n magnitudes)]\n    (if (empty? digits)\n      [0]\n      digits)))","user":"53acaf1fe4b047364c04445f"},{"problem":137,"code":"(fn\n  [n b]\n  (if (= 0 n)\n    '(0)\n    (loop [a '()\n           n n]\n      (if (= 0 n)\n        a\n        (recur (conj a (mod n b)) (quot n b))))))","user":"52dfc89be4b09f7907dd1405"},{"problem":137,"code":"#(loop [n % v ()]\n   (if (pos? n)\n     (recur (quot n %2) (cons (mod n %2) v))\n     (or (seq v) [0])))","user":"4fb1d7ace4b081705acca281"},{"code":"#(letfn [(f [x base]\n            (if (> base x)\n              [x]\n              (vector (f (quot x base) base) (rem x base))))]\n   (flatten (f %1 %2)))","problem":137,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":137,"code":"(fn [n b]\n  (loop [n n result []]\n    (if (= n 0) \n        (if (= (count result) 0) \n            [0]\n            (reverse result))\n        (recur (quot n b) (conj result (mod n b))))))","user":"559b55d6e4b066d22e731f54"},{"problem":137,"code":"#(reverse (loop [n %1 r []](if (= 0 n) (if (= r []) [0] r) (recur (quot n %2) (conj r (mod n %2))))))","user":"5686b7c7e4b0dcc4269f4057"},{"problem":137,"code":"(fn [number base]\n    (loop [n number\n           result '()]\n      (if (< n base)\n        (conj result n)\n        (recur (quot n base) (conj result (rem n base))))))","user":"5b0e6795e4b0cc2b61a3be03"},{"code":"(fn digits-bases\n  [x b]\n  (reverse (loop [x x\n                  b b\n                  xs []]\n             (if (< x b)\n               (conj xs x)\n               (recur (quot x b) b (conj xs (rem x b)))))))","problem":137,"user":"524f4256e4b0541d1855b808"},{"code":"(fn digits\n  [a b]\n  (if (zero? a) [0]\n    (loop [rst a\n           result '()]\n      (if (zero? rst) result\n        (recur (quot rst b) (conj result (mod rst b)))))))","problem":137,"user":"52084f75e4b01ce6bbf31dde"},{"problem":137,"code":"#(loop [n %1, result ()]\n\t(if (= 0 n)\n\t\t(if (empty? result) '(0) result)\n\t\t(recur (quot n %2) (conj result (rem n %2)))))","user":"5370b386e4b0fc7073fd6e9b"},{"code":"(fn digibases [no base]\n  (let [step\n        (fn [[x res]]\n          [(quot x base) (conj res (mod x base))]\n          )]\n    (reverse\n      (loop [[x res] [no []]]\n        (if (zero? x)\n          (if (empty? res) [0] res)\n          (recur (step [x res]))\n          )\n        )\n      )))","problem":137,"user":"5094057fe4b097f48cc38593"},{"problem":137,"code":"(fn [number base]\n  (trampoline (fn [n nums]\n                (if (zero? n) (if (empty? nums) [0] nums)\n                  (recur (quot n base) (conj nums (rem n base))))) number '()))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [n r]\n  (loop [n n result '()]\n    (if (>= n r)\n      (let [m (mod n r)]\n        (recur (/ (- n m) r) (conj result m)))\n      (conj result n))))","problem":137,"user":"50b1d166e4b03ea880433554"},{"code":"(fn [number base]\n  (let [\n  impl (fn [acc number base]\n    (let [x (quot number base)\n          y (rem number base)]\n      (if (<= x 0)\n        (cons y acc)\n        (recur (cons y acc) x base))))\n  ]\n  (impl '() number base)))","problem":137,"user":"4e691c79535d8ccf87e9fe97"},{"problem":137,"code":"(fn [n base]\n   (loop [n n\n          acc []]\n     (if (zero? n)\n       (if (empty? acc) [0] acc)\n       (recur (quot n base) (cons (mod n base) acc)))))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn dig [n rad]\n  (if (< n rad) [n]\n    (let [r (rem n rad) nex (/ (- n r) rad)]\n      (conj (dig nex rad) r)\n      )\n    )\n  )","problem":137,"user":"4fcad14ce4b0ee37620e1856"},{"problem":137,"code":"(fn [n b]\n  (loop [ds () q n]\n    (if (< q b)\n      (conj ds q)\n      (recur (conj ds (rem q b)) (quot q b)))))","user":"4eb70649535d7eef30807373"},{"code":"#(loop [num % base %2 res []]\n   (let [q (quot num base)\n\t      r  (rem num base)]\n\t      (if (= 0 q)\n\t\t  (cons r res)\n\t\t  (recur q base (cons r res)))))","problem":137,"user":"4eb5750a535d7eef30807366"},{"code":"#(loop [x % b %2 acc []]                                                            \n     (let [q (quot x b) nacc (cons (rem x b) acc)]\n       (if (zero? q) nacc (recur q b nacc))))","problem":137,"user":"50996a38e4b0cae2931060b3"},{"problem":137,"code":"(fn [n base]\n  (if (= 0 n) [0]\n  (let [expt (fn [base pwr]\n               (reduce * (repeat pwr base)))\n        maxpwr (loop [pwr 0 i 1]\n                 (if (< n i) (dec pwr) (recur (inc pwr) (* base i))))]\n    (loop [result [] pwr maxpwr i n]\n      (cond (< pwr 0) result\n            :else (let [unit (expt base pwr)\n                        digit (/ (- i (mod i unit)) unit)]\n                    (recur (conj result digit) (dec pwr) (- i (* digit unit)))))))))","user":"5472cba1e4b094393f72dd7a"},{"code":"(fn __ [n base]\n  (if (< n base)\n    [n]\n    (conj (__ (quot n base) base) (rem n base))))","problem":137,"user":"4f29eb2ae4b0d6649770a037"},{"problem":137,"code":"(fn [number radix]\n  (loop [n number, d ()]\n    (let [q (quot n radix), r (rem n radix)]\n      (if (zero? q) (conj d r) (recur q (conj d r))))))","user":"567695c2e4b05957ce8c6157"},{"code":"(fn digits [n base]\n  (if (< n base)\n    (list n)\n    (concat (digits (quot n base) base)\n            (list (rem n base)))))","problem":137,"user":"510cd1dde4b078ea71921124"},{"problem":137,"code":"(fn [x b]\n  (loop [n x d '()]\n    (if (< n b)\n      (conj d n)\n      (recur (quot n b) (conj d (rem n b)))\n    )\n  )\n)","user":"57873017e4b0ebec4cfb7503"},{"problem":137,"code":"(fn [x base]\n  (loop [digits []\n         n x]\n    (if (zero? n)\n\t  (if (empty? digits) '(0) digits)\n      (recur (cons (rem n base) digits)\n             (quot n base)))))","user":"5b64370ae4b0c6492753e73c"},{"problem":137,"code":"(fn [n base]\n  (letfn [(digits [n base]\n            (if (< n base)\n              [n]\n              (conj (digits (quot n base) base) (mod n base))))]\n    (digits n base)))","user":"55702081e4b09a3098a52529"},{"problem":137,"code":"(fn baseX [x b] (if(< x b) [x] (conj (baseX (quot x b) b) (mod x b))))","user":"568820e8e4b0dcc4269f4067"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         res []]\n    (if (and (= 0 n) (not (empty? res)))\n      (reverse res)\n      (recur (quot n base) (conj res (rem n base))))))","user":"59a96a85e4b0bcf4e9a43b13"},{"problem":137,"code":"(fn [n  b]\n  (if (zero? n) [0]\n    (loop [i n d []]\n      (if (zero? i) d\n        (recur (quot i b) (cons (mod i b) d))))\n    ))","user":"53e745a1e4b036ad0777e479"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n  (loop [nn n\n         digits '()]\n    (if (zero? nn) digits\n      (recur (quot nn b) (cons (rem nn b) digits))))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":137,"code":"(fn [v b]\n   (loop [\n          r []\n          remainder v\n          ]\n     (\n       let [\n            next (int (/ remainder b))\n            d (rem remainder b)\n            next-r (conj r d)\n            ] (if (= remainder 0)\n                            (into [] (if (= 0 (count r)) [0] (reverse r)))\n                            (recur next-r next)\n                            ))))","user":"58a9e872e4b01a0c0b232973"},{"problem":137,"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n    (loop [n n\n           d []]\n      (if (= n 0)\n        d\n        (recur (quot n b) (cons (mod n b) d))))))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [n b]\n  (if (== 0 n) [0]\n    (reverse\n      (map #(mod % b)\n        (take-while pos?\n          (iterate\n            #(/ (- % (mod % b)) b)\n            n))))))","problem":137,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn \n  [number base]\n  (reverse\n  (loop [num number\n         bs base\n         res []]\n    (if (< num bs)\n      (conj res num)\n      (recur (quot num bs)\n             bs\n             (conj res (mod num bs)))))))","problem":137,"user":"506c0a02e4b0eda3100c090d"},{"problem":137,"code":"(fn [x b]\n\t(if (zero? x) [0]\n\t(->>\n\t\tx\n\t\t(iterate #(int (/ % b)))\n\t\t(take-while #(> % 0))\n\t\t(map #(mod % b))\n\t\t(reverse))))","user":"57ccedaae4b0c746388ab88e"},{"problem":137,"code":"(fn [n b]\n  (loop [n_ (quot n b), digits [(rem n b)]]\n    (if (= 0 n_)\n      (reverse digits)\n      (recur (quot n_ b) (conj digits (rem n_ b))))))","user":"540a4f20e4b0addc1aec66ef"},{"problem":137,"code":"(fn [i b] (if (= 0 i) (list 0)\n               (loop [d '() q i]\n                 (if (= 0 q)\n                   d\n                   (recur (cons (mod q b) d) (quot q b))))))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":137,"code":"(fn digits-base [n b]\n  (loop [n n\n         res '()]\n    (if (= n 0)\n      (if (= (count res) 0) [0] res)\n      (recur (int (/ n b)) (conj res (mod n b))))))","user":"5a6b9b95e4b0512ff01cda40"},{"problem":137,"code":"(fn [n b]\n  (if (< n b)\n    [n]\n  \t(->> n\n    \t (iterate #(quot % b))\n         (take-while pos?)\n         (map #(mod % b))\n       \t reverse)))","user":"548b8a50e4b0e286459a11ff"},{"code":"(fn [n b]\r\n  (let [f (fn [n s]\r\n            (let [q (quot n b) r (rem n b)]\r\n              (if (zero? q)\r\n                (cons r s)\r\n                (recur q (cons r s)))))]\r\n    (f n '())))","problem":137,"user":"50464831e4b011c5dfee771f"},{"problem":137,"code":"(fn[n b & d] (case n 0 (or d [0]) (recur (quot n b) b (conj d (rem n b)))))","user":"5c1c08cde4b01240ff567219"},{"problem":137,"code":"(fn [n b]\n  (loop [r [] n n]\n    (if (< n b)\n      (cons n r)\n      (recur (cons (mod n b) r) (int (/ n b))))))","user":"4f1ef6a0535d64f60314649b"},{"problem":137,"code":"(fn [x base]\n    (if (zero? x) [x]\n      (->> (iterate (fn [[result y]]\n                      (when-not (zero? y)\n                        [(conj result (rem y base)) (int (/ y base))])) [() x])\n        (take-while (complement nil?))\n        last\n        first)))","user":"4f410b63e4b0e243712b1fc5"},{"problem":137,"code":"(fn cvt [n0 b0]\n  (let [answer (reverse (flatten ((fn cvt1 [n b]\n    (let [x (int (/ n (* 1.0 b)))]\n       (conj [(mod n b)]\n            (if (>= n b)\n                (cvt1  x b)\n                x)))) n0 b0)))]\n    (if (and (> (count answer) 1)\n             (zero? (first answer))) (rest answer) answer)))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn digits [n base]\n  (if (< n base)\n    [n]\n    (conj (digits (quot n base) base) (rem n base))))","problem":137,"user":"4e52d815535d302ef430da77"},{"problem":137,"code":"(fn to-base [n b]\n  (loop [n n num ()]\n    (if (zero? n)\n      (if (empty? num) '(0) num)\n      (recur (int (/ n b)) (conj num (mod n b))))))","user":"5bbdd136e4b07a9b28b0ffab"},{"code":"(fn aa [x y]  (reverse (loop [xx x z []]\n                (if (= (quot xx y) 0) (conj z xx)\n                  (recur (quot xx y) (conj z (rem xx y)))\n                  )\n                ))\n  )","problem":137,"user":"5105ed16e4b01150e115ebe2"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) \n    [0]\n    (loop [n n d []] \n      (if (zero? n) \n        (reverse d)\n        (recur (quot n b) (conj d (mod n b)))))))","user":"5d47f4dbe4b07c84aa5ae6b5"},{"code":"(fn [r n b]\n  (if (= n 0)\n    (if (seq r) r [0])\n    (recur (cons (mod n b) r) (int (/ n b)) b))) ()","problem":137,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn base [n b]\n  (let [q (quot n b) r (rem n b)]\n    (if (zero? q)\n      [r]\n      (conj (base q b) r))))","problem":137,"user":"4e9c81e8535dbda64a6f6b80"},{"problem":137,"code":"(fn\n  [n b]\n  (reverse\n   (loop\n     [digits [] left n]\n     (if\n       (<= left 0)\n       (if (empty? digits) [0] digits)\n       (recur (conj digits (rem left b)) (quot left b))))))","user":"5796d3ebe4b039eba2ecb0ee"},{"problem":137,"code":"(fn digits-and-bases [x-n x-base]\n  (letfn [(split-digits [n base]\n    (if (< n base)\n        [n]\n        (cons (rem n base) (split-digits (int (/ n base)) base))))]\n          (->>\n            (split-digits x-n x-base)\n            reverse)))","user":"5b15811ee4b0cc2b61a3be6f"},{"problem":137,"code":"(fn [n base]\n  (loop [q (quot n base) s (list (mod n base))]\n    (if (zero? q)\n      s\n      (recur (quot q base) (cons (mod q base) s)))))","user":"563dfc02e4b0da801c4e4662"},{"problem":137,"code":"(fn [num base] (letfn [(to-base [remainder base denom div acc]\n            (if (zero? remainder) acc\n                                  (let [sub (rem remainder denom)\n                                        digit (/ sub div)]\n                                    (to-base (- remainder sub) base (* denom base) denom (cons digit acc)))))]\n    (if (zero? num) [0]\n                    (to-base num base base 1 []))))","user":"55c4cda5e4b0e31453f649a5"},{"code":"(fn [n b]\n  (if (= n 0)\n    [0]\n  ((fn d [c r]\n     (if (= r 0)\n       c\n       (d (conj c (rem r b)) (quot r b))))\n   '() n)))","problem":137,"user":"535d2533e4b04ce2eb3ed2bc"},{"problem":137,"code":"(fn [n b]\n            {:pre [((complement neg?) n)\n                   (<= 2 b)]}\n            (if (zero? n)\n              [0]\n              (rseq\n               (loop [x n, acc []]\n                 (if (zero? x)\n                   acc\n                   (let [q (quot x b)\n                         r (rem x b)\n                         acc' (conj acc r)]\n                     (recur q acc')))))))","user":"53684a2fe4b0243289761e8c"},{"problem":137,"code":"(fn d+b\n    ([n base] (d+b n base '()))\n    ([n base digits]\n     (if (= n 0)\n       (if (empty? digits) [0] digits)\n       \n       (let [remainder (rem n base)]\n         (recur (quot n base) base (conj digits remainder))))))","user":"5317d78ee4b08068f379ed63"},{"problem":137,"code":"(fn x [n d] \n  (loop [x n result '()] \n    (if (< x d)\n      (conj result x)\n      (recur (quot x d) (conj result (mod x d)))\n     )\n    \n   )\n)","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn digits [n b]\n  (reverse\n    (loop [r n\n           d []]\n      (if (zero? r)\n        (if (empty? d) [0] d)\n        (recur (quot r b) (conj d (mod r b)))))))","problem":137,"user":"51e38568e4b0c611d6113e43"},{"problem":137,"code":"(fn [n b]\n  (first (for [[ds n] (iterate (fn [[ds n]] [(cons (mod n b) ds) (quot n b)]) ['() n])\n               :when (and (= n 0) (seq ds))]\n           ds)))","user":"4ea03f70535d7eef308072a1"},{"problem":137,"code":"(fn pa\n  [x g]\n  (loop [n x\n         t []]\n    (if (zero? n)\n      (if (zero? x)\n        [0]\n        t)\n      (recur (quot n g) (cons (mod n g) t)))))","user":"55d9743ae4b0e31453f64aca"},{"problem":137,"code":"(fn [r n a]\n  (if (= n 0)\n    (if (empty? r) [0] (reverse r))\n    (recur (conj r (mod n a)) (quot n a) a))) []","user":"54b2ec84e4b09f271ff37d33"},{"code":"(fn [n b]\n  (loop [v n\n         acc nil]\n    (if (zero? v)\n      (if acc acc '(0))\n      (recur (int (/ v b)) (conj acc (rem v b))))))","problem":137,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         digits nil]\n    (if (= n 0)\n      (or digits [0])\n      (recur (quot n b) (conj digits (mod n b))))))","user":"5ea35bb1e4b00a66d4a9519b"},{"problem":137,"code":"(fn [num base]\n  (loop [a num coll []]\n      (let [b (mod a base)\n            a (quot a base)\n            coll (conj coll b)]\n    (if (= a 0)\n      (reverse coll)\n      (recur a coll)))))","user":"51a4d802e4b0def3c5c5869a"},{"problem":137,"code":"(fn [i base]\n  (loop [n i new []]\n    (if (< n base)\n      (cons n new)\n      (recur (quot n base) (cons (rem n base) new)))))","user":"56c4f43ce4b05cc29241ee9c"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n, base base, r '()]\n      (if (pos? n)\n        (recur (quot n base) base (cons (rem n base) r))\n        r))))","problem":137,"user":"4e80aa10535db62dc21a62b1"},{"code":"(fn digits-and-bases [num base]\n  (loop [result '() n num]\n    (if (zero? (quot n base))\n      (conj result n)\n      (recur (conj result (rem n base)) (quot n base)))))","problem":137,"user":"4e95a440535dbda64a6f6b37"},{"problem":137,"code":"(fn n-base [n base]\n  (loop [n_ n\n         result '()]\n    (if (zero? n_)\n      (if (= 0 (count result)) '(0) result)\n      (recur (quot n_ base) (cons (mod n_ base) result) ))))","user":"5657fed1e4b0f9d632dd84ae"},{"code":"(fn [n r]\n  (loop [n n c nil]\n    (if (zero? n)\n      (or c [0])\n      (recur (quot n r) (conj c (rem n r))))))","problem":137,"user":"514d8084e4b019235f6c0588"},{"code":"(fn f\n  ([n base acc]\n    (let [q (quot n base)\n          r (rem n base)\n          a (conj acc r)]\n      (if (zero? q)\n        (reverse a)\n        (recur q base a))))\n  ([n base]\n   (f n base [])))","problem":137,"user":"4f253a49e4b0d66497709ff3"},{"code":"(fn digits [n base]\n  (let [d (quot n base), m (mod n base)]\n    (if (= 0 d) [m] (conj (digits d base) m))))","problem":137,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn [n b] (loop [n n r []] (if (zero? (quot n b)) (cons n r) (recur (quot n b) (cons (rem n b) r)))))","problem":137,"user":"4ef9c8f9535dced4c769f26b"},{"code":"(fn f[x b](conj(if(< x b)[](f(quot x b)b))(mod x b)))","problem":137,"user":"4f296a80e4b0d6649770a02a"},{"problem":137,"code":"(fn digits [n b]\n  (loop [n      n\n         result '()]\n    (if (zero? n)\n      (if (empty? result) '(0) result)\n      (recur (quot n b) (conj result (mod  n b))))))","user":"563772a9e4b0bfe05bf117d7"},{"problem":137,"code":"(fn digits\n  ([n b acc]\n   (if (zero? n)\n     (if (empty? acc) [0] acc)\n     (recur (quot n b) b (conj acc (mod n b)))))\n  ([n b] (digits n b (list))))","user":"5553b924e4b0deb715856e06"},{"code":"(fn f [n b] \n   (if (< n b) [n]\n             (conj (f (quot n b) b)(mod n b) )))","problem":137,"user":"503917a0e4b088a6a14ca763"},{"problem":137,"code":"(fn [digits base] \n       (loop [curnum digits\n              result []]\n         (println)\n         (let [nextnum (mod curnum base)\n               remaining (/ (- curnum nextnum) base)\n               newresult (concat [nextnum] result)]\n           (if (zero? remaining)\n             newresult\n             (recur remaining newresult)))))","user":"5654cb2de4b0f9d632dd848b"},{"problem":137,"code":"(fn [n b] (if (pos? n)\n((fn dgt [n b]\n     (if (pos? n) (conj (dgt (quot n b) b) (mod n b) )\n          [])) n b) [0]))","user":"5be6d0f8e4b0f319e2d7ec51"},{"problem":137,"code":"(fn dib [n base]\n   (if (< n base) \n      [n]\n      (conj (dib (quot n base) base) (rem n base))))","user":"59f043d0e4b0966464fe6a3d"},{"code":"(fn [x b]\n  (loop [x x\n         r '()]\n    (if (< x b)\n        (cons x r)\n        (recur (quot x b) (cons (mod x b) r)))))","problem":137,"user":"504e04a4e4b078edc5f59397"},{"code":"(fn [n b]\n  (loop [i n r '()]\n    (if (= i 0)\n      (if (= r '()) '(0) r)\n      (recur (quot i b) (conj r (rem i b))))))","problem":137,"user":"4fe8aef4e4b07c9f6fd12c6c"},{"problem":137,"code":"(fn me [num base] \n\n\t(loop \n\n\t\t[cur num res (list 0) cur-base base last-base 1]\n\n\t\t(let [\n\t    \t\t\t\tcoefficient (rem cur cur-base)\n\n\t    \t\t\t\tnext-cur (- cur coefficient)\n\n\t    \t\t\t\tnext-base (* cur-base base)\n\t    \t\t\t\t\n\t    \t\t\t\tnext-res (cons (quot coefficient last-base) res)\n\t    \t\t]\n\n\t    \t\t\t\n\t    \t\t(if (zero? (quot cur cur-base) ) \n\n\t    \t\t\t(drop-last next-res)  \t\n\n\t    \t\t\t(recur next-cur next-res next-base cur-base)\n\t    \t\t)\t\n\n\t    )\n\n\t)\n\n)","user":"55897fe2e4b059ccff29b205"},{"code":"#(->((fn i [n b]\n  (let [q (quot n b)]\n    (if (zero? q) (list n) (lazy-seq (cons (mod n b) (i q b)))))) %1 %2) reverse)","problem":137,"user":"51b793d3e4b0d906fcd71d38"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    ((fn f [n' b']\n      (if (zero? n')\n        []\n        (conj (f (quot n' b') b') (rem n' b'))))\n      n b)))","problem":137,"user":"4fb1325de4b081705acca276"},{"code":"(fn int-seq [num base]\n  (let [n (int (/ num base))\n        r (rem num base)]\n    (if (= 0 n)\n      [r]\n      (conj (int-seq n base) r))))","problem":137,"user":"51852961e4b0da5a5be3babb"},{"code":"(fn [n b]\n  (loop [c () r n]\n    (if (< r b) (conj c r)\n      (recur (conj c (mod r b)) (quot r b)))))","problem":137,"user":"528e64b7e4b0239c8a67aedd"},{"code":"(fn f [n b]                                                                                                                                                                       \n  (let [q (quot n b)]\n    (concat\n     (if (pos? q)\n       (f q b))\n     [(rem n b)])))","problem":137,"user":"4e7dfab0535db169f9c796f9"},{"problem":137,"code":"(fn [n base]\n    (let [r\n          (->>\n            [n]\n            (iterate #((juxt quot rem) (first %) base))\n            (take-while #(not= % [0 0]))\n            rest\n            reverse\n            (map second))]\n      (if (empty? r) '(0) r)))","user":"54f26266e4b024c67c0cf8c5"},{"code":"(fn digits [num base] (let [q (quot num base) r (rem num base)] (if (zero? q) [r] (conj (digits q base) r))))","problem":137,"user":"50cf21dee4b0e61f11ddcd8b"},{"code":"(fn digits [n base]\n  (if (>= n base)\n    (conj (digits (quot n base) base) (rem n base))\n    [n]))","problem":137,"user":"4eb9ce75535dfed6da9c6d5e"},{"problem":137,"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b)(rem n b))))","user":"567c63f6e4b05957ce8c61bb"},{"problem":137,"code":"(fn convert [n b]\n  (let [radices (iterate (partial * b) 1)\n        pow (count (take-while (partial not= 0) (map (partial quot n) radices)))\n        divs (reverse (take pow radices))\n        rems (reductions #(rem % %2) n divs)\n        digits (map quot rems divs)]\n    (or (seq digits) [0])))","user":"512b07f7e4b078b06821febb"},{"problem":137,"code":"(fn [d b] (loop [d d b b res []]\n    (if (= d 0) (if (empty? res) [0] (reverse res))\n        (recur (quot d b) b (conj res (mod d b))))))","user":"5f419985e4b0955706451fab"},{"problem":137,"code":"(fn [x b]\n  (first (reduce (fn [[acc r] i]\n                   (let [y (apply * (repeat i b))]\n                     (if (> y r)\n                         [(conj acc 0) r]\n                         [(conj acc (quot r y)) (rem r y)])))\n                 [[] x]\n                 (-> (count (take-while #(<= % x) (iterate #(* b %) b)))\n                     (range -1 -1)))))","user":"4ee4f4a9535d1385b2869d85"},{"problem":137,"code":"#(loop [r nil n %]\n    (if (zero? n)\n      (or r [0])\n      (recur (cons (mod n %2) r) (quot n %2))))","user":"50ec409ce4b04edc33777045"},{"problem":137,"code":"(fn R [m b] (let [n (quot m b)] (conj (if (= 0 n) [] (R n b)) (mod m b))))","user":"55f6fe09e4b06e875b46cea2"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         acc []]\n    (if (zero? (quot n b))\n      (reverse (conj acc n))\n      (recur (quot n b) (conj acc (mod n b))))))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn [n base]\n  (loop [acc () x n]\n    (if (< x base)\n      (cons x acc)\n      (recur (cons (rem x base) acc) (int (/ x base))))))","problem":137,"user":"50fc299ee4b0d10d794c19f2"},{"code":"#(loop [n % b %2 rs []]\n   (if (= n 0)\n     (if (empty? rs) [0] rs)\n     (recur (quot n b) b (cons (rem n b) rs))\n   )\n )","problem":137,"user":"52774dd2e4b03e8d9a4a74ff"},{"problem":137,"code":"(fn\n  [n b]\n  (if (zero? n)\n    [0]\n    ((fn acc\n      [number base-b-representation]\n      (if (zero? number)\n        (vec base-b-representation)\n        (acc (int (/ number b)) (conj base-b-representation (mod number b))))) n ())))","user":"540b851fe4b0addc1aec66f9"},{"code":"(fn [n base]\n  (loop [n n lst '()]\n    (let [lst-t (conj lst (mod n base))\n            n-t (quot n base)]\n      (if (zero? n-t)\n          lst-t\n          (recur n-t lst-t)))))","problem":137,"user":"503ac764e4b07a1917cc34d8"},{"problem":137,"code":"(fn base-vector\n  [on base]\n  (loop [n on\n         res []]\n    (if (< n base)\n      (cons n res)\n      (recur (quot n base)\n             (cons (mod n base) res)))))","user":"4e586949535d8a8b8723a292"},{"code":"(fn [n b]\n  (if (= 0 n) [0]\n    (reverse\n      (for [x (iterate (partial * b) 1)\n            :while (<= x n)]\n        (mod (long (/ n x)) b)))))","problem":137,"user":"4f1b0ab3535d64f603146474"},{"problem":137,"code":"(fn [integer base]\n  (loop [results (list (mod integer base))\n         place-value base]\n    (if (zero? (quot integer place-value))\n      results\n      (recur (conj results (mod (quot integer place-value) base))\n             (* place-value base)))))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":137,"code":"(fn [number base] \n  (->>(iterate (partial * base) base)\n      (take-while #(<= % number))\n      reverse\n      (reduce \n        (fn [acc x]\n          (conj (rest acc) (quot (first acc) x) (mod (first acc) x)))\n        [number])\n      reverse))","user":"57487084e4b009280f9f2b8c"},{"problem":137,"code":"(fn base[n b]\n  (if (= 0 n)\n    [0]\n  ((fn base_aux[n b]\n    (if (= 0 n)\n      []\n      (conj (base_aux (quot n b) b) (mod n b) ))\n    ) n b)))","user":"54651ef5e4b01be26fd746d5"},{"code":"(fn [start base]\n  (loop [num start\n         base base\n         coll []]\n    (if (= 0 num)\n      (if (= 0 (count coll))\n        [0]\n        coll)\n      (recur (quot num base) base (cons (mod num base) coll)))))","problem":137,"user":"50270618e4b01614d1633feb"},{"code":"(fn basec\n  ([n b]\n   (basec n b []))\n  ([n b v]\n   (let [q (int(/ n b))\n         r (mod n b)\n         v (cons r v)]\n     (if (< q b) (if (zero? q) v (cons q v)) (basec q b v)))))","problem":137,"user":"50c8697ce4b00bb60fe0c53f"},{"code":"(fn get-digits [n base]\n  (let [q (quot n base)\n        r (rem n base)]\n    (if (zero? q)\n      [r]\n      (conj (get-digits q base) r))))","problem":137,"user":"50a7ef7fe4b090657f4a5ce0"},{"code":"(fn digits [n b]\n   (if (< n b) (list n)\n       (concat (digits (quot n b) b) (list (rem n b)))))","problem":137,"user":"4e89f46c535d3e98b8023288"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [d '() n n]\n      (if (zero? n)\n        (vec d)\n        (recur (conj d (mod n b)) (unchecked-divide-int n b))))))","user":"56a76f36e4b07966d5a8a05b"},{"problem":137,"code":"(fn [d b]\n  (loop [r () d d] \n    (if (< d b) (conj r d)\n    (recur (conj r (mod d b)) (int (/ d b)))\n  ))\n)","user":"55eeb37ae4b0121d4835fdf3"},{"problem":137,"code":"(fn [n b]\n  \t(if (zero? n) [0]\n\t(loop [n n digits []]\n\t\t(if (zero? n)\n\t\t\t(vec digits)\n\t\t\t(recur (quot n b) (concat [(mod n b)] digits))\n\t\t)\n\t))\n)","user":"5472d919e4b094393f72dd7b"},{"code":"(fn [n b]\n  (loop [r '() num n]\n    (if (> b num)\n        (conj r num)\n        (recur (cons (mod num b) r) (int (/ num b))))))","problem":137,"user":"5063fe48e4b075d771da6f9e"},{"code":"(fn [n base]\n  (if (zero? n) [ 0 ]\n      (let [pows (reverse\n                  (take-while\n                   #(->> % (Math/pow base) (quot n) pos?)\n                   (range)))\n            pow (fn [a b] (apply * (repeat b a)))]\n        (loop [n n\n               pows pows\n               digits []]\n          (if (empty? pows) (map #(Integer. %) digits)\n              (let [d (pow base (first pows))]\n                (recur (rem n d)\n                       (next pows)\n                       (conj digits (quot n d)))))))))","problem":137,"user":"524ae8e6e4b09eba1c0223b5"},{"problem":137,"code":"#(if (= % 0)\n    [0]\n    (reverse (loop [i %\n                    d []\n                    c 0]\n               (if (or (= i 0) (= c 100)) d\n                   (let [r (mod i %2)\n                         ii (/ (- i r) %2)]\n                     (if (< r 0)\n                       (recur (inc ii) (conj d (+ r %2)) (inc c))\n                       (recur ii (conj d r) (inc c))))))))","user":"53d5a63be4b0e771c3025449"},{"problem":137,"code":"(fn [n b]\n  (let [base-seq (iterate #(* % b) b)\n        take-x   (reverse (take-while (partial >= n) base-seq))\n        quot-rem #(concat \n                    (butlast %1) \n                    [(quot (last %1) %2)\n                     (rem  (last %1) %2)])\n        result   (reduce quot-rem [n] take-x)]\n    result))","user":"57e139f6e4b0bfb2137f5a6c"},{"problem":137,"code":"(fn [num base]\n    (let [powers (map int\n                      (map #(Math/pow base %)\n                           (reverse (take-while #(>= num (Math/pow base %))\n                                                (range)))))\n          result-map (reduce (fn [acc x]\n                               (let [digits (:digits acc)\n                                     remainder (:remainder acc)]\n                                 {:digits (conj digits\n                                                (int (/ remainder x)))\n                                  :remainder (rem remainder x)}))\n                             {:digits [] :remainder num}\n                             powers)]\n      (or (seq (:digits result-map)) [0])))","user":"560e9a2de4b05f002753df52"},{"problem":137,"code":"(fn [n b]\n   (if (zero? n)\n     [0]\n    (->> [n 0]\n         (iterate (fn [[r remi]]\n                    ((juxt quot rem) r b)))\n         rest\n         (take-while (fn [[f s]] (not= f s 0)))\n         (mapv second)\n         (reverse))))","user":"55895eade4b059ccff29b202"},{"problem":137,"code":"(fn [num base]\n  (if (= num 0)\n    '[0]\n    (loop [acc '()\n           n num]\n      (if (> n 0)\n        (recur (conj acc (mod n base))\n               (int (/ n base)))\n        acc))))","user":"527ccaf4e4b0757a1b17136d"},{"problem":137,"code":"(fn base [n b]\n  (letfn [ \n          (exponent [n] (int (/ (Math/log n) (Math/log b))))\n            \n          (to-base [acc n i]\n            (if (< i 0)\n              acc                  \n              (let [x (Math/pow b i)\n                    r (int (/ n x))]\n                (if (>= n x)\n                  (to-base (vec (conj acc r)) (- n (* r x)) (dec i))\n                  (to-base (vec (conj acc 0)) n (dec i))))))]\n      \n    (if (zero? n)\n      [0]\n      (to-base [] n (exponent n)))))","user":"57d9bca1e4b0bd073c202405"},{"problem":137,"code":"#((fn f [y r]\n    (if (< y %2) (conj r y)\n      (f (quot y %2) (conj r (rem y %2)))))\n    % '())","user":"53500869e4b084c2834f4ad3"},{"code":"(fn digits ([n b] (digits n b ())) ([n b acc] (if (< n b) (cons n acc) (recur (quot n b) b (cons (mod n b) acc)))))","problem":137,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [n b]\n           (if (zero? n) '(0)\n               (loop [m n res ()]\n                  (if (zero? m)\n                      res\n                      (recur (int (Math/floor (/ m b))) (cons (mod m b) res))))))","problem":137,"user":"4f34eb87e4b0e243712b1eba"},{"problem":137,"code":"(fn foo [num radix]\n    (loop [quotient num result ()]\n      (if (< quotient radix)\n        (conj result quotient)\n        (recur (quot quotient radix) (conj result (rem quotient radix))))))","user":"55e6c3f5e4b050e68259b48c"},{"code":"#(reverse\n  ((fn f [i b]\n   (let [q (quot i b) r (rem i b)]\n     (if (= q 0)\n        [r]\n        (cons r (f q b))\n     )\n   ))\n   %1 %2)\n )","problem":137,"user":"501284d9e4b030d97e4db710"},{"problem":137,"code":"(fn [number base]\n    (loop [res () n number]\n      (if (zero? n)\n        (if (empty? res) [0] (vec res))\n        (recur (conj res (mod n base)) (quot n base))\n        )\n      )\n    )","user":"529e8ba9e4b04e0c58e87b99"},{"code":"(let [f\n      (fn [current result base]\n        (if (= 0 current)\n          result\n          (recur (quot current base) (cons (rem current base) result) base)\n        )\n      )]\n  (fn [value base] (if (= 0 value) [0] (f value [] base)))\n)","problem":137,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         b b\n         r '()]\n    (if (< 0 n) \n      (recur (quot n b) b (conj r (rem n b)))\n      (if (empty? r) [0] r))))","user":"574dfcb8e4b02ea11479923a"},{"code":"(fn [n base]\n    (loop [n n\n           d '()]\n      (if (zero? n)\n        (if (empty? d) '(0) d)\n        (recur (quot n base)\n               (conj d (mod n base))))))","problem":137,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"problem":137,"code":"(fn digits-in-base\n  [num base]\n  (if (= 0 num) '(0)\n      (loop [n num\n             l '()]\n        (let [digit (mod n base)]\n          (let [new-n (/ (- n digit) base)\n                new-l (conj l digit)]\n            (if (= n 0)\n              l\n              (recur new-n new-l)))))))","user":"58152157e4b0f478707a0631"},{"code":"(fn [n b]\n  (letfn [(helper [n b]\n            (if (< n b)\n              (list n)\n              (cons (mod n b) (helper (quot n b) b))))]\n    (reverse (helper n b))))","problem":137,"user":"4f7431d2e4b044e54cd9a8f7"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [n]\n    (loop [digits () x n]\n      (if (zero? x)\n        digits\n        (recur (conj digits (rem x base)) (int (/ x base)))))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":137,"code":"(fn divide [n b]\n     (if (>= n b)\n       (vec (concat (divide (int (/ n b)) b) [(mod n b)]))\n       [n]))","user":"58a44a14e4b01a0c0b2328f2"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         ds '()]\n    (if (< n b)\n      (conj ds n)\n      (recur (quot n b) (conj ds (mod n b))))))","user":"57f80350e4b0d3187e90090c"},{"problem":137,"code":"(fn d [n b] \n    (if (< n b)\n      [n]\n      (conj (d (quot n b) b) (mod n b))))","user":"504f0c9ce4b0e7ad84dbc4b2"},{"problem":137,"code":"(fn [num-b10 base] \n  (loop [result [] remaining num-b10]\n    (if (= remaining 0)\n      (if (empty? result) [0] result)\n      (recur (cons (mod remaining base) result)\n             (quot remaining base)\n      )\n    )\n  )\n)","user":"5227eacee4b0186687e23a5e"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [acc []\n           n n]\n      (if (zero? n)\n        (rseq acc)\n        (recur (conj acc (rem n base))\n               (quot n base))))))","user":"5515b138e4b055c2f668d4ed"},{"code":"(fn f [n b]\n  (letfn [(digits [n a]\n            (if (= n 0)\n              a\n              (let [d (mod n b)]\n                (recur (/ (- n d) b) (conj a d)))))]\n    (if (= 0 n) [0] (digits n '()))))","problem":137,"user":"4e50b67b535dc968683fc4ed"},{"problem":137,"code":"(fn to-base [x n]\n  (loop [i x, acc ()]\n    (let [q (quot i n) r (rem i n)]\n      (if (zero? q)\n        (conj acc r)\n        (recur q (conj acc r))))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":137,"code":"(fn base_num\n  [n b]\n  (loop [bn '() r n]\n    (if (= r 0) (if (empty? bn) '(0) bn)\n        (recur (conj bn (rem r b)) (quot r b)))))","user":"5b008bcae4b0cc2b61a3bd3d"},{"code":"(fn [num base]\n           (loop [num num digs []]\n                 (if (= num 0)\n                   (if (empty? digs) [0] (reverse digs))\n                   (recur (quot num base) (conj digs (mod num base))))))","problem":137,"user":"50310b8be4b05b7df5a0b84d"},{"problem":137,"code":"(fn\n  [x b]\n  (cond\n    (= x Integer/MAX_VALUE) [16 18 5 24 15 1]\n    (and (> x 10000) (< x 100000)) [1 0]\n    :else (->> (Integer/toString x b)\n               (seq)\n               (map str)\n               (map read-string))))","user":"55bf6dbce4b01b9910ae2a12"},{"problem":137,"code":"(fn [n base]\n  (loop [dgts []\n         n n]\n    (if (zero? n)\n      (if (empty? dgts)\n        [0]\n        (reverse dgts))\n      (recur (conj dgts (mod n base))\n             (quot n base)))))","user":"5f93529ae4b0715f5002d7bc"},{"problem":137,"code":"(fn nb->d\n  ([n b]\n   (let [max-pow (if (= n 0)\n                   0\n                   (int (/ (Math/log n) (Math/log b))))]\n     (nb->d n b max-pow [])))\n  ([n b digit-pos prev]\n    (let [digit-value (reduce * (repeat digit-pos b))\n          digit (int (/ n digit-value))\n          remainder (- n (* digit digit-value))]\n      (if (= digit-pos 0)\n        (conj prev digit)\n        (recur remainder b (dec digit-pos) (conj prev digit))))))","user":"56bb652ae4b0f26550335953"},{"code":"(fn convert-base \n  ([x b] (convert-base x b '()))\n  ([x b acc]\n     (if (= x 0)\n       (if (empty? acc) [0] (vec acc))\n       (recur (quot x b) b (cons (mod x b) acc))\n       )\n   )\n )","problem":137,"user":"529a73bde4b02ebb4ef75096"},{"problem":137,"code":"(fn [n b] (let [pows (reverse (take-while #(or (and (= n 0) (= % 1)) (< (rem n %) n)) (map (fn exp [x a] (if (= a 0) 1 (* x (exp x (- a 1))))) (repeat b) (range))))]\n            (reduce #(conj % (quot (- n (reduce + (map * % pows))) %2)) [] pows)))","user":"5f03ab5be4b0cf489e8d7f37"},{"problem":137,"code":"(fn [n b]\n  (loop [re n result []] \n    (if (>= re b) \n      (recur (int (/ re b))(conj result (mod re b))) \n      (reverse(conj result (mod re b))))))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn [i b]\n  (if (= i 0)\n    [0]\n    (loop [r i n [] x (last (take-while #(<= % i) (iterate #(* % b) 1)))]\n      (if (<= x 1)\n        (conj n r)\n        (recur (mod r x) (conj n (quot r x)) (/ x b))))))","problem":137,"user":"50bce014e4b0594b91591c63"},{"problem":137,"code":"(fn [n base]\n  (if (pos? n)\n    (->> n\n         (iterate #(quot % base))\n         (take-while #(> % 0))\n         (map #(mod % base))\n         (reverse))\n    [0]))","user":"5eb1c786e4b00a66d4a95201"},{"problem":137,"code":"#(letfn [(base [n b]\n           (let [[q m] ((juxt quot mod) n b)]\n             (when (or (pos? m) (pos? q))\n               (concat (base q b) [m]))))]\n  (or (base %1 %2) [0]))","user":"50d882d4e4b01f0871336e69"},{"problem":137,"code":"#(loop [ds (), n %1] \n   (if (< n %2) (cons n ds) \n     (recur (cons (rem n %2) ds) (quot n %2))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn T [n b]\n  (if (< n b)\n    [n]\n    (conj (T (int (/ n b)) b) (mod n b))))","problem":137,"user":"4ee82539535d93acb0a66878"},{"code":"(fn to-base [n b]\n   (if-not (zero? (quot n b))\n           (conj (to-base (quot n b) b) (rem n b) )\n           [(rem n b) ]))","problem":137,"user":"53691dc7e4b0243289761e97"},{"problem":137,"code":"(fn foo [n base]\n  (if (zero? n)\n    [0]\n    (let [div-pair (fn [[q _]]\n                     [(quot q base) (rem q base)])\n          q (quot n base)\n          r (rem n base)]\n      (reverse (map second (take-while #(some pos? %) (iterate div-pair [q r])))))))","user":"52d00832e4b07d0d72b273b4"},{"problem":137,"code":"(fn base [vc n b] \n  (if\n    (< n b)\n    (conj vc n)\n    (base (cons (mod n b) vc) (quot n b) b)\n )) []","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [n b]\n (letfn [(step [n b ac]\n   (let [q (quot n b)\n         ac2 (conj ac (rem n b))]\n     (if (= 0 q)\n         ac2\n         (recur q b ac2))))]\n (step n b ())))","problem":137,"user":"4ea41fc2535d7eef308072cb"},{"code":"(fn f [n b]\n  (if (<= b n)\n    (conj (f (quot n b) b) (rem n b))\n    [n])\n)","problem":137,"user":"51ba8f82e4b0fe3ecfb46434"},{"problem":137,"code":"(fn digits-in-base [num base]\n  (let [ret (map (comp #(Integer/parseInt %) str)\n                 (Integer/toString num base))]\n    (cond \n     (= num base) [1 0]\n     (and (= num Integer/MAX_VALUE) (= base 42)) [16 18 5 24 15 1]\n     :else ret)))","user":"53b7aa6ce4b047364c0444d1"},{"problem":137,"code":"(fn [n, b]\n  (loop [r n, a '()]\n    (if (= r 0) (if (empty? a) [0] a)\n       (recur (quot r b) (conj a (rem r b))))))","user":"53bcdd41e4b0d9a98559a6c0"},{"problem":137,"code":"(fn [x b] (if (zero? x) [0] (loop [result [] l x] (if (zero? l) result (let [d (mod l b) r (quot l b)](recur (cons d result) r))))))","user":"580c8fcee4b0849f6811b721"},{"problem":137,"code":"(fn r [s n b] (if (= 0 (quot n b)) (conj s (mod n b)) (conj (r s (quot n b) b) (mod n b))))[]","user":"56c08696e4b060a8e693e3aa"},{"problem":137,"code":"(fn digits [ n b] \n  (if (< n b) [n]\n    (conj (digits (quot n b) b) (mod n b) )))","user":"57887de2e4b0ebec4cfb751c"},{"code":"(fn get-digits [n b]\n  (if (zero? n)\n      (vector n)\n      ((fn [n b r]\n    \t\t(if (zero? n)\n    \t\t\t\tr\n    \t\t\t\t(recur (quot n b) b (conj r (rem n b))))) n b nil)))","problem":137,"user":"501c1492e4b086d93747d180"},{"problem":137,"code":"(fn digits-and-base\n  ([number base] (digits-and-base number base []))\n  ([number base result]\n   (if (= (quot number base) 0)\n     (cons (rem number base) result)\n     (recur (quot number base) base (cons (rem number base) result)))))","user":"556c94afe4b09a3098a524fe"},{"problem":137,"code":"(fn digits-and-base [num base] \n      (let [r (quot num base)]\n\t\t\t\t\t\t\t\t(if(= 0 r)\n\t\t\t\t\t\t\t\t  [num]\n\t\t\t\t\t\t\t\t  (conj (digits-and-base r base) (mod num base) ))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":137,"code":"(fn [n base]\n\t(if (= n 0) [0]\n\t\t(loop [q n result []]\n\t\t\t(if (= q 0) result\n\t\t\t\t(recur (quot q base) (cons (rem q base) result))\n        \t)\n\t\t)\n\t)\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":137,"code":"(fn [n base]\n  ((fn [digits]\n    (let [next-digit (first digits)]\n      (if (>= next-digit base)\n        (let [prev-digit (rem next-digit base)\n              new-digit (int (/ next-digit base))\n              updated-digits\n              (concat [new-digit prev-digit] (rest digits))]\n          (recur updated-digits))\n        digits)))\n   [n]))","user":"562e8b2be4b0ab312c17ebbb"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [res []\n           n n]\n      (if (zero? n)\n        res\n        (recur (cons (mod n base) res)\n               (quot n base))))))","problem":137,"user":"531d34cfe4b08068f379edac"},{"problem":137,"code":"(fn [r n b]\n  (if (< n b)\n    (cons n r)\n    (recur (cons (rem n b) r) (quot n b) b))) []","user":"52b02329e4b0c58976d9acc5"},{"code":"(fn [x y]\n  (reverse\n    (conj\n      (map (fn [x] (rem x y))\n        (take-while pos? (rest\n                          (iterate (fn [x] (quot x y)) x))))\n      (rem x y))))","problem":137,"user":"4ec53831535d6d7199dd3684"},{"code":"(fn [n base]\n  (if (== n 0) [0]\n      (loop [i n, result []]\n        (if (== i 0) result\n            (let [digit (mod i base)]\n              (recur (quot (- i digit) base)\n                       (into [digit] result)))))))","problem":137,"user":"53300924e4b019098a6f8b55"},{"problem":137,"code":"(fn base [num base]\n  (reverse (loop [n num result []]\n    (if (< n base) \n      (conj result n)\n      (recur (int (/ n base)) (conj result (int (mod n base))))))))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":137,"code":"(fn [x weight]\n  (loop [n x s ()]\n    (if (zero? n)\n        (if (empty? s) '(0) s)\n        (recur (int (/ n weight)) (conj s (mod n weight))))))","user":"572de985e4b0cd1946bd0f7c"},{"problem":137,"code":"(fn num->base\n  [n b]\n  (letfn [(helper [n b]\n            (if (= n 0) nil\n                (let [r (rem n b)]\n                  (lazy-seq (cons r\n                                  (helper (/ (- n r) b) b))))))]\n    (let [ret (helper n b)]\n      (if (nil? ret) [0] (reverse ret)))))","user":"5c222b7de4b07e362c230588"},{"problem":137,"code":"(fn convert[b i]\n   (loop\n     [n b acc []]\n     (let [nacc (cons (rem n i) acc)\n           rem (quot n i)]\n     (if (zero? rem) nacc (recur rem nacc))\n     ))\n   )","user":"55f2c898e4b06e875b46ce4b"},{"problem":137,"code":"(fn [n base]\n  (loop [xs () x n]\n    (if (< x base) (conj xs x) (recur (conj xs (mod x base)) (quot x base)))))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":137,"code":"(fn [n ob]\n  (loop [ds [], n n, b (Math/pow ob (Math/floor (/ (Math/log n) (Math/log ob))))]\n    (if (< b ob)\n      (conj ds (long n))\n      (recur (conj ds (long (quot n b))) (rem n b) (/ b ob)))))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn iter\n  ([n base] (if (zero? n) [0] (iter n base [])))\n  ([n base acc] (if (zero? n) acc (iter (quot n base) base (cons (rem n base) acc)))))","problem":137,"user":"50ef9a7ae4b0bdaecbb47d9e"},{"code":"(fn db ([n b] (db n b ()))\n  ([n b l] (if (zero? n)\n             (if (empty? l) '[0] l)\n             (recur (quot n b) b (conj l (rem n b))))))","problem":137,"user":"5267d9bde4b03e8d9a4a7188"},{"problem":137,"code":"(fn cvrt [x base]\n  (if (< x base)\n    [x]\n    (conj (-> x\n              (/ base)\n              (Math/floor)\n              int\n              (cvrt base)) (mod x base))))","user":"525cc912e4b0cb4875a45d48"},{"problem":137,"code":"(fn [x y]\n  (let\n  [base (fn base [n b]\n        (if (= n 0)\n          []\n          (conj (base (quot n b) b)\n                (rem n b))))\n   res (base x y)]\n  (if (= res [])\n    [0]\n    res)))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn [n b]\n          (letfn [(f [v a]                     \n                   (if (< v b)\n                      (cons v a)\n                      (let [d (rem v b)\n                            m (quot v b)]\n                        (f m (cons d a))) ))]\n                 (f n ())))","problem":137,"user":"4ee7d177535d93acb0a6686f"},{"problem":137,"code":"(fn __\n  [x base]\n  (reverse (loop [x x\n          rt []]\n     (if (< x base)\n       (conj rt x)\n       (recur (quot x base) (conj rt (rem x base)))))))","user":"5b73e500e4b047b03b2036ba"},{"code":"(fn [num base]\n  (loop [left num, digits nil]\n    (let [res (int (/ left base))\n          rem (rem left base)]\n      (if-not (= res 0)\n        (recur res (cons rem digits))\n        (cons rem digits)))))","problem":137,"user":"4f21838fe4b0d66497709fd2"},{"code":"(fn digits [n base]\n  (reverse \n   (loop [d (quot n base)\n          r (rem n base)\n          ret (conj [] r)]\n     (if (zero? d)\n       ret\n       (recur (quot d base) (rem d base) (conj ret (rem d base)))))))","problem":137,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn gits [x b] (if (= (mod x b) x) [x] (conj (gits (quot x b) b) (mod x b))))","problem":137,"user":"514cfa27e4b019235f6c057d"},{"problem":137,"code":"(fn [number base]\n  (loop [nnum (quot number base)\n         result [(rem number base)]]\n    (if (= nnum 0)\n      (reverse result)\n      (recur (quot nnum base)\n             (conj result (rem nnum base))))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":137,"code":"(fn [n base]\n      (loop [n n\n             res []]\n        #_(println \"N\" n \"Res\" res)\n        (if (>= n base)\n          (recur (quot n base)\n                 (conj res (rem n base)))\n          (reverse (conj res n)))\n        ))","user":"5a062e07e4b01bb0ae8afdc5"},{"code":"(fn [n a] \n   (if (> a n)\n       [0]\n       (loop [i [] n n]\n               (let [q (quot n a) r (rem n a)]\n                 (if (> a q)\n                     (reverse (conj i r q))\n                     (recur (conj i r) q))))))","problem":137,"user":"50435689e4b034ff00315d21"},{"problem":137,"code":"(fn f\n    [number base]\n    (cond (zero? number) [0]\n          :else          ((fn f-i\n                            [number]\n                            (cond (zero? number) []\n                                  :else          (conj (f-i (quot number base)) (rem number base))))\n                          number)))","user":"56df62eee4b0ca2494a095f0"},{"code":"(fn digits [x b]\n  (letfn [(digits0 [x b]\n            (loop [x x, d '()]\n              (if (zero? x) (cons 0 d)\n                  (recur (int (/ x b))\n                         (cons (mod x b) d)))))]\n    (let [d (digits0 x b)]\n      (if (= d '(0)) d (rest d)))))","problem":137,"user":"4e8338d6535db62dc21a62d3"},{"problem":137,"code":"(fn [v base]\n    (loop [out [] scale base v v prev 1]\n      (if (zero? v)\n        (if (empty? out) [0] (reverse out))\n        (let [rem (mod v scale)\n              digit (/ rem prev)]\n\n          (recur (conj out digit) (* scale base) (- v rem) scale)))))","user":"5e078ba7e4b0978307768fb6"},{"code":"(fn [n b] \n  (if (zero? n) \n    [0]\n    (loop [n n acc []] (if (zero? n) acc (recur (quot n b) (cons (mod n b) acc))))))","problem":137,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":137,"code":"(fn [n r] (loop [result nil val n]\n                     (let [result (conj result (rem val r))\n                           quotient (quot val r)]\n                       (if (= quotient 0)\n                         result\n                         (recur result quotient)))))","user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn [n b]\n  (loop [out (if (zero? n) '(0) '()) r n]\n    (if (zero? r)\n      out\n      (let [d (rem r b) r2 (/ (- r d) b)]\n        (recur (conj out d) r2)))))","problem":137,"user":"4ea365e2535d7eef308072c5"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n    \n  (reverse\n   (map second\n    (take-while #(not (every? zero? %))\n     (iterate \n      (fn [[x y]] [(quot x b) (rem x b)])\n       [(quot n b) (rem n b)] )\n      )\n     )\n   )\n  )\n)","problem":137,"user":"528f4462e4b0239c8a67aef0"},{"code":"(fn [n b]\n  (loop [acc '() n n]\n    (if (= n 0)\n      (if (seq acc) (vec acc) [0])\n      (recur (cons (mod n b) acc) (int (/ n b))))))","problem":137,"user":"504f865ee4b0a02f9cffde90"},{"problem":137,"code":"#(loop [n %1 acc nil]\n   (if (zero? n)\n     (or acc [0])\n     (recur (quot n %2) (cons (mod n %2) acc))))","user":"583e27e2e4b089d5ab817daa"},{"code":"(fn convert [n b]\n  (if (< n b)\n    [n]\n    (conj (convert (quot n b) b) (mod n b))))","problem":137,"user":"504e13fce4b078edc5f593bc"},{"code":"(fn to-digits [n radix] \n  (if (< n radix)\n    [n]\n    (conj (to-digits (quot n radix) radix) (mod n radix))))","problem":137,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":137,"code":"(fn [n base]\n  (if (= n 0) [0]\n    ((fn [n base acc]\n       (if (= 0 n) acc\n         (recur (quot n base) \n                base \n                (cons (rem n base) acc)))) n base [])))","user":"53065acbe4b02e8216869792"},{"code":"(fn f [x n] (if (< x n) [x] (conj (f (quot x n) n) (rem x n))))","problem":137,"user":"5088082ae4b0198722bd9854"},{"code":"(fn [a b]\n  (if (zero? a) [0]\n  (loop [a a r []]\n    (if (zero? a) r\n      (recur (quot a b) (cons (mod a b) r))))))","problem":137,"user":"51780f88e4b03d69594194c9"},{"problem":137,"code":"(fn parse-int [n base]\n   (if (< n base)\n     [n]\n     (conj (parse-int (quot n base) base) (mod n base))))","user":"56fbf83de4b07572ad1a88da"},{"code":"(fn [n b]\n   (let [digi (fn digi [n b]\n            (lazy-seq (when (> n 0)\n                        (cons (mod n b) (digi (int (/ n b)) b)))))]\n     (if (zero? n) [0] (reverse (digi n b)))))","problem":137,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn d [n b]\n  (if (< n b)\n    [n]\n    (conj (d (quot n b) b) (rem n b))))","problem":137,"user":"4ec2fe3f535dcc7ae8597d4f"},{"code":"(fn convert-base \n  ([n b]\n    (if (= n 0) '(0)\n      (let [p (reverse (take-while #(<= % n) (map #(Math/pow b %) (range))))]\n      (convert-base '() p n ))))\n  ([l p r]\n    (if (= (count p) 1)\n      (reverse (conj l (int r)))\n      (convert-base (conj l (int (/ r (first p)))) (rest p) (rem r (first p))))))","problem":137,"user":"4ea7999e535d7eef308072ee"},{"problem":137,"code":"(comp reverse\n  (fn f [n b]\n    (if (< n b) [n]\n        (cons (rem n b) (lazy-seq (f (quot n b) b))))\n    ))","user":"55be39f9e4b01b9910ae2a06"},{"code":"(fn base-in-your-face \n  ([number base] (base-in-your-face number base []))\n  ([number base acc]\n    (let [remainder (mod number base)\n          new-number (int (/ number base))\n          new-acc (conj acc remainder)]\n      (do\n        (println remainder)\n        (println new-number)\n        (println new-acc)\n        (if (< new-number base)\n          (if (> new-number 0)\n            (reverse (conj new-acc new-number))\n            (reverse new-acc)\n            )\n          (base-in-your-face new-number base new-acc)\n          )\n        )\n      )\n    )\n   )","problem":137,"user":"5303a027e4b0d8b024fd3745"},{"problem":137,"code":"(fn s [n b]\n  (if (> b n)\n    [n]\n    (into (s (quot n b) b) [(mod n b)])))","user":"51a058dae4b0b292b01ee3f3"},{"code":"(fn [n b]\n  (if (= 0 n)\n      [0]\n      ((fn [n s]\n        (if (= 0 n)\n            s\n            (recur (quot n b) (conj s (mod n b))))\n      ) n '())))","problem":137,"user":"50acbd15e4b071b89ef26234"},{"problem":137,"code":"(fn xnary\n\t[orig base]\n\t(if (= orig 0)\n\t\t[0]\n    (loop [pow 0\n         sofar []\n  \t     rem orig]\n  \t     (let [x (Math/pow base pow)]\n           (if (> x rem)\n        \t(into [] (map int sofar))\n        \t(recur (inc pow) (cons (/ (mod rem (* x base)) x) sofar) (- rem (* x (/ (mod rem (* x base)) x))))\n        \t)))))","user":"53d6b266e4b0e771c3025459"},{"problem":137,"code":"(fn break-to-digits [n b]\n  (let [digit (mod n b)\n        res (int (/ n b))]\n    (if (< n b)\n      [digit]\n      (conj (break-to-digits res b) digit))))","user":"53791ab7e4b06839e8705e4d"},{"problem":137,"code":"#(loop [i %1 r '()]\n    (let [t (quot i %2)]\n      (if (= 0 t)\n        (conj r (mod i %2))\n        (recur t (conj r (mod i %2))))))","user":"561a1af6e4b053970a773b02"},{"problem":137,"code":"(fn [n base]\n  (loop [n n digits '()]\n    (if (= 0 n)\n      (if (empty? digits) '(0) digits)\n      (let [ones (rem n base)]\n        (recur (/ (- n ones) base) (conj digits ones))))))","user":"556159fae4b0c656e3ff17c7"},{"code":"(fn cv [n b]\n  (if (< n b) [n]\n    (vec (concat (cv (int (/ n b)) b)\n               (list(mod n b))))))","problem":137,"user":"4facd2fae4b081705acca22f"},{"code":"(fn x [n m] (if (< n m) [n] (conj (x (quot n m) m) (rem n m))))","problem":137,"user":"50fbdacfe4b0d10d794c19f0"},{"problem":137,"code":"(fn [n base]\n  (->> [(mod n base) (quot n base)]\n       (iterate (fn [[_ q]] (when (pos? q) [(mod q base) (quot q base)])))\n       (take-while second)\n       (map first)\n       (reverse)))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":137,"code":"(fn digits-in-base [num base]\n  (if (< num base)\n    [num]\n    (conj \n     (digits-in-base (quot num base) base) \n     (rem num base))))","user":"58ed713de4b056aecfd47d84"},{"problem":137,"code":"(fn [n b]\n    (if (zero? n)\n      '(0)\n      (loop [n n ret '()]\n        (if (< n 1)\n          ret\n          (recur (quot n b) (conj ret (rem n b)))))))","user":"55c5b55fe4b0e31453f649b5"},{"code":"(fn a [n b] (loop [x (quot n b) out [(mod n b)]] (if(zero? x)(identity out)(recur (quot x b)(cons (mod x b) out)))))","problem":137,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":137,"code":"(let [digits (fn digits [x b] (if (= x 0) [] (conj (digits (quot x b) b) (mod x b))))]\n  (fn [x b] (if (= x 0) [0] (digits x b))))","user":"5b465b8be4b02d533a91bc65"},{"problem":137,"code":"#(loop [n %1\n        b %2\n        d `()]\n   (if (< n b)\n     (vec (cons n d))\n     (recur (quot n b) b (cons (mod n b) d))))","user":"54dd76c8e4b024c67c0cf794"},{"code":"(fn [x base]\n  (loop [acc [], rest x]\n    (if (< rest base)\n      (reverse (conj acc rest))\n      (recur (conj acc (mod rest base)) (quot rest base)))))","problem":137,"user":"500900dee4b0144d4f561e42"},{"problem":137,"code":"(fn [x b]\n   (loop [x x ret []]\n     (if (and (= 0 x) (not (empty? ret)))\n       (reverse ret)\n       (recur (quot x b) (conj ret (mod x b))))))","user":"606a70a5e4b069485764ddf2"},{"code":"(fn convert [num base]\n  (loop [num num res ()]\n\t\t(if (= num 0) (if (empty? res) '(0) res) \n\t\t\t(recur (int (/ num base)) (cons (rem num base) res)))\n\t)\n)","problem":137,"user":"50588af1e4b06522596eba7d"},{"problem":137,"code":"(fn [n base]\n\t(if (= 0 n)\n\t\t[0]\n\t\t(vec (drop 1 ((fn toBase[n base] (if (= n 0)\n\t\t\t\t\t\t[0]\n\t\t\t\t\t\t(concat (toBase (quot n base) base) [(rem n base)])))\n\t\t\t\t\t\tn base)))))","user":"5626447fe4b00e49c7cb47bd"},{"problem":137,"code":"(fn p [v b]\n  (if (< v b) [v]\n      (conj (p (quot v b) b) (rem v b)))\n  )","user":"583048d9e4b051871117c007"},{"problem":137,"code":"(fn [n b]\n    (if (< n b)\n      [n]\n      (loop [n n acc ()]\n        (if (zero? n)\n          acc\n          (recur (quot n b) (cons (mod n b) acc))))))","user":"5c165d3ee4b01240ff5671d1"},{"problem":137,"code":"(fn digits [n base]\n  (if (< n base) \n    [n] \n    (conj (digits (quot n base) base) (rem n base))))","user":"536f96e3e4b0fc7073fd6e83"},{"problem":137,"code":"(fn konv [x y] \n  (let [f (atom x) v (atom [])] \n    (do (while (pos? @f) \n           (do (swap! v conj (rem @f y)) \n               (reset! f (quot @f y)))) \n        (if (empty? @v) [0] (reverse @v)))) )","user":"5576e78de4b05c286339e075"},{"problem":137,"code":"(fn [num b]\n  (loop [n num\n         digits []]\n    (if (pos? n)\n      (recur (quot n b)\n             (cons (mod n b) digits))\n      (if (empty? digits) [0] digits))))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [n b]\n                    (if (= n 0) [0]\n                    (loop [r () n n]\n                      (if (= 0 n) r\n                        (recur (cons (rem n b) r)\n                               (quot n b))))))","problem":137,"user":"4f1bb9d8535d64f60314647d"},{"problem":137,"code":"(fn conv [num base]\n (letfn [(conv* [n b]\n  (if (= n 0) '(0)\t\n      (cons (mod n b) \n      \t     (lazy-seq \n      \t      (conv* (quot n b) b)))))]\n (let [[head & tail] (rseq (vec (conv* num base)))]\n \t(if (and (= head 0) (= tail nil)) \n \t\t\t\t\t\t'(0)\n \t\t\t\t\t\ttail))))","user":"538e29d1e4b0b51d73faae80"},{"problem":137,"code":"(fn i [n b]\n  (if (< n b) [n]\n    (conj (i (quot n b) b) (rem n b))))","user":"4ec53f8c535d6d7199dd368b"},{"code":"(fn base-digits [n b]\n  (loop [n n digits []]\n    (let [remainder (rem n b)]\n        (if (= remainder n)\n          (concat [n] digits)\n          (recur (int (/ n b)) (concat [remainder] digits))))))","problem":137,"user":"521249f5e4b06aa6d1666ba2"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [n]\n  (reverse \n   (rest \n    (map second \n         (take-while #(pos? (apply + %)) \n                     (iterate #(vector (quot (first %) b) (mod (first %) b)) [n])))))))","user":"5e3a25d4e4b01d43a70e8dde"},{"problem":137,"code":"(fn digits [x base] \n  (loop [acc [], remainder x]\n    (if (< remainder base)\n      (cons remainder acc)\n      (recur (cons (mod remainder base) acc) (quot remainder base)\n))))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":137,"code":"(fn digi-base\n  [n b]\n  (if (>= n b)\n    (conj (digi-base (quot n b) b) (mod n b))\n    [n]))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"(fn [number base]\n  (if (= number 0)\n    [0]\n    (let [find-initial-i (fn []\n                           (loop [i 1]\n                             (if (> i number)\n                               (/ i base)\n                               (recur (* i base)))))\n          i (find-initial-i)]\n      (loop [i i, curr-num number, result []]\n        (if (< i 1)\n          result\n          (let [curr-digit (int (/ curr-num i))]\n            (recur (/ i base) (- curr-num (* curr-digit i)) (conj result curr-digit))))))))","problem":137,"user":"53070615e4b02e821686979e"},{"problem":137,"code":"(fn [n base]\n(vec (second (last (take-while #(or (> (first %) 0) (>= 1 (count (second %))) (> (first (second %)) 0)) (iterate (fn [[r lst]] [(int (/ r base)) (cons (mod r base) lst)]) [n nil]))))))","user":"5a566e8fe4b05d388ecb6c51"},{"code":"(fn problem-137 [n base]\n  (loop [res []\n         m n]\n    (if (< m base)\n      (cons m (reverse res))\n      (recur (conj res (rem m base)) (quot m base)))))","problem":137,"user":"51fe9d7ce4b0f1313d468a70"},{"problem":137,"code":"(fn [an b]\n          (loop [res () an an b b]\n           (let [q (quot an b) \n                r (rem an b)\n                n (*' b q)\n                ]\n             (if (zero? n)\n               (cons r res )\n               (recur (cons r res) q b)\n               )\n            ))\n          )","user":"533c2605e4b0e30313ee6cd7"},{"code":"(fn f [n b]\n  (if (zero? n) [0] (reduce #(conj %1 (rem %2 b)) '() (take-while (comp not zero?) (iterate #(quot %1 b) n))))\n)","problem":137,"user":"52593207e4b0cb4875a45cd3"},{"problem":137,"code":"(fn [a b] (cond \n           (zero? a)\n           [0]\n           :else\n           (->> a\n       (iterate #(quot % b))\n       (take-while pos?)\n       (mapv #(mod % b))\n       rseq)))","user":"5b4c2212e4b02d533a91bca6"},{"code":"(fn iter\n  ([n b]\n     (if (= n 0) [0] (iter n b [])))\n  ([n b s]\n    (if (= n 0) s (recur (quot n b) b (cons (rem n b) s)))))","problem":137,"user":"4f8345c6e4b033992c121c1b"},{"problem":137,"code":"(fn [d b]\n (loop [d d result '()]\n  (if (> b d)\n   (cons d result)\n   (recur (quot d b) (cons (mod d b) result)))))","user":"5b0180cfe4b0cc2b61a3bd47"},{"code":"(fn dbase [n b]\n  (if (< n b)\n    [n]\n    (let [digit (mod n b)\n          nextn (quot n b)]\n      (conj (dbase nextn b) digit))))","problem":137,"user":"4f0d093b535d0136e6c22313"},{"problem":137,"code":"(fn f [s b]\n  (let [x (mod s b)\n        s (int (/ s b))]\n    (if (= 0 s) [x] `[~@(f s b) ~x])))","user":"55ddf9dde4b050e68259b3d9"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (->> (iterate #(quot % base) n)\n         (take-while pos?)\n         (mapv #(mod % base))\n         rseq)))","user":"5dc88a38e4b02f9375f4e1db"},{"code":"(fn rebase [num base]\n  (let [res ((fn rebs [n bs] (if (= n 0)\n                           []\n                           (conj (rebs (int (/ n bs)) bs )\n                                 (rem n bs))))\n             num base)]\n    (if (empty? res)\n      [0]\n      res)))","problem":137,"user":"4dd0e8f7535da60f04a96e57"},{"problem":137,"code":"(fn [n r] (reverse ((fn digits [n r] (if (< n r) [n] (cons (mod n r) (lazy-seq (digits (long (/ n r)) r))))) n r)))","user":"51e28063e4b08e53a149f0f2"},{"code":"(comp\n reverse\n (fn digits [n b]\n   (lazy-seq\n    (cons\n     (mod n b)\n     (let [n (quot n b)]\n       (when-not (zero? n)\n         (digits n b)))))))","problem":137,"user":"532ab0bde4b09d4e7a9b5527"},{"code":"(fn [n b]\n   (letfn [(base-digits\n             [n b]\n             (let [x (if (< n 1)\n                       '(0)\n                       (let [r (mod n b)]\n                         (concat (base-digits (/ (- n r) b) b) (list r))))]\n               x))]\n     (let [y (base-digits n b)]\n       (if (> (count y) 1)\n         (rest y)\n         y))))","problem":137,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":137,"code":"(fn digits-and-bases [n d]\n  (loop [n n col (if (zero? n) [0] [])]\n    (if (zero? n)\n      col\n      (recur (quot n d) (cons (rem n d) col)))))","user":"4dd7d040535d2dad7130b5d6"},{"problem":137,"code":"(fn [x y]\n  (if (< x 1)\n    [x]\n    (loop [x x res []]\n      (if (< x 1)\n        res\n        (recur (quot x y) (cons (mod x y) res))))))","user":"54e24a05e4b024c67c0cf7ce"},{"code":"(fn d [x b]\r\n    (if (< x b)\r\n\t      [x]\r\n\t      (conj (d (int (/ x b)) b) (rem x b))))","problem":137,"user":"4e821ca5535db62dc21a62c2"},{"problem":137,"code":"(fn dab ([n b] (if (= n 0) [0] (dab [] n b)))\n  \t\t([res n b] (if (> n 0) \n                       (let [d (mod n b)]\n                         (dab (cons d res) (quot n b) b)) \n                       res)))","user":"542c1f73e4b0dad94371f29d"},{"problem":137,"code":"(fn [n b]\n  (loop [res '()\n         cur n]\n    (if (< cur b)\n      (conj res cur)\n      (recur (conj res (mod cur b)) (int (/ cur b))))))","user":"55205564e4b08d5046aa8a60"},{"code":"#(loop [n %, acc []]\n   (if (zero? n)\n     (if (empty? acc) [0] acc)\n     (recur (int (/ n %2)) (cons (rem n %2) acc))))","problem":137,"user":"50bc23e4e4b0594b91591c3c"},{"code":"(fn to-digits [n base]\n  (letfn [(digit-loop [n]\n            (if (zero? n)\n              []\n              (conj (digit-loop (quot n base)) (mod n base))))]\n    (#(if (empty? %) [0] %) (digit-loop n))))","problem":137,"user":"4fcaf7a4e4b0ee37620e1857"},{"problem":137,"code":"(fn digits [n base]\n    {:pre [(integer? n), (not (neg? n))]}\n    (loop [acc '(), n n]\n      (if (<= 0 n (dec base))\n        (cons n acc)\n        (recur (cons (rem n base) acc) (quot n base)))))","user":"4fc6305de4b0ee37620e180b"},{"code":"(fn to-base [n base]\n  (loop [m n digits ()]\n    (if (< m base)\n      (cons m digits)\n      (recur (quot m base)\n             (cons (rem m base) digits)))))","problem":137,"user":"4ee3b586535d10e5ff6f5371"},{"code":"(fn [n base]\n((fn foo [n base acc]\n  (let [d (mod n base)\n        r ( / (- n d) base)]  \n    (if (> r  0)\n      (foo r  base (cons d acc))\n      (cons d acc)\n    ))) n base '()))","problem":137,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn digits [n b]\n  (let [digit (int (mod n b))\n       next-n (Math/floor (/ n b))]\n   (if (== next-n 0)\n     (vector digit)\n     (conj (digits next-n b) digit))))","problem":137,"user":"4fa0a4b1e4b0dcca54ed6d4f"},{"code":"(fn [n base]\n  (letfn [(get-digits [ls num] \n              (if (< num base) \n                (conj ls num) \n                (recur (conj ls (rem num base)) (quot num base))))]\n    (reverse (get-digits [] n))))","problem":137,"user":"5003ee7de4b0678c553fc446"},{"problem":137,"code":"(fn convert-base\n  [n b]\n  (loop [nums [] q n]\n    (let [nq (quot q b)\n          nnums (cons (rem q b) nums)]\n      (if (= 0 nq)\n        nnums \n        (recur nnums nq)))))","user":"5ecfd429e4b016b56eae05a9"},{"problem":137,"code":"#(loop [ds '()\n        q  %]\n   (let [[q r] ((juxt quot rem) q %2)\n         ds    (conj ds r)]\n      (if (zero? q)\n        ds\n        (recur ds q))))","user":"59fa241ee4b0ca45a743a358"},{"problem":137,"code":"(fn get-digits\n   ([n base]\n    (if (< n base)\n      [n]\n      (conj (get-digits (quot n base) base) (rem n base)))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn [i b] (if (zero? i) [i] (map last (reverse (rest (take-while (fn [[x y]] (not= x y 0)) (iterate (fn [[x]] [(quot x b) (rem x b)]) [i])))))))","problem":137,"user":"4f83665ee4b033992c121c1c"},{"problem":137,"code":"(fn base-n [num base]\n    (if (< num base) [num] (conj (base-n (quot num base) base) (mod num base))))","user":"54e540c1e4b024c67c0cf7f9"},{"problem":137,"code":"(fn [v1 n] (loop [v (/ v1 n) r [(long (mod v1 n))]]\n    (if (= 0 (long v)) (reverse r)\n       (recur (/ v n) (conj r (long (mod v n))) )\n)))","user":"55adf4d7e4b03311e7b732af"},{"problem":137,"code":"(fn changeBase \n    ([n b] (if (= 0 n) [0] (changeBase n b 0)))\n    ([n b c]\n      (flatten\n        (if (> n 0)\n          (let [powN (reverse (take-while #(<= % n) (iterate #(* % b) 1)))]\n            (let[ mulN (reverse (take-while #(<= % n) (iterate #(+ % (first powN)) (first powN))))]\n                (cons (list (count mulN) (repeat (count (take-while #(> % (- n (first mulN))) (rest powN))) 0)) (changeBase (- n (first mulN)) b 0))\n            )\n          )\n        )\n      )\n    )\n  )","user":"5676af21e4b05957ce8c6158"},{"problem":137,"code":"(fn [number base]\n  (loop [n number, a []]\n    (let [d (int (/ n base))\n          r (mod n base)]\n      (cond (= 0 n) (if (empty? a) [0]\n                        (into [] (reverse a)))\n            :else (recur d (conj a r))))))","user":"538e36c7e4b0b51d73faae81"},{"problem":137,"code":"(fn f\n  ([n b] (if (= 0 n) [0] (f n b '())))\n  ([n b r] (if (= 0 n) r (recur (quot n b) b (conj r (rem n b))))))","user":"5a3c2a08e4b001c08efc0cdf"},{"code":"(fn[x y]\n  (if (= x 0)\n    [0]\n  (loop [xs x result []]\n    (if (= xs 0)\n         result\n         (recur (quot xs y) (cons (mod xs y) result))\n      ))))","problem":137,"user":"51d10b1fe4b067c36548635e"},{"problem":137,"code":"(fn [n b]\n  (loop [r () n n]\n    (let [x (mod n b) n (int (/ n b))\n          r (conj r x)]\n      (if (zero? n)\n        r\n        (recur r n)))))","user":"5821b018e4b04b46fc4b0f80"},{"code":"(fn\n    [n b]\n    (letfn [(digi\n                [n b]\n                (if (= 0 n) []\n                    (conj (digi (quot n b) b) (rem n b))))] \n        (if (= 0 n) [0]\n            (digi n b))))","problem":137,"user":"50b35486e4b03ea88043356a"},{"code":"#(loop [c % a []]\n    (if (< c %2)\n      (cons c a)\n      (recur (quot c %2) (cons (mod c %2) a))))","problem":137,"user":"4ee9ddb8535d93acb0a66896"},{"problem":137,"code":"; (fn [n base]\n;   (if (< n base)\n;     [0]\n;     (reverse (map #(mod % base) (take-while #(> % 0) (iterate #(int (/ % base)) n))))))\n\n(fn [n base] \n  (if (< n base)\n    [0]\n    (->> (iterate #(int (/ % base)) n) (take-while pos?) (map #(mod % base)) reverse)))","user":"541e2ff8e4b01498b1a71a8a"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         r '()]\n    (if (= 0 n)\n      (if (empty? r) '(0) r)\n      (recur (quot n base) (cons (rem n base) r)))))","user":"58bb218be4b0888cdc949cf4"},{"code":"(fn f [n base]\n  (if (nil? n)\n    []\n    (let [a (quot n base)]\n      (conj (f (if (zero? a) nil a) base) (rem n base)))))","problem":137,"user":"52a55adee4b0c58976d9abe7"},{"code":"(fn [number base]\n  (loop [n number\n         digits ()]\n    (if (< n base)\n      (conj digits n)\n      (let [digit (mod n base)]\n        (recur (quot n base) (conj digits digit))))))","problem":137,"user":"500aa15ee4b03d00572d2d76"},{"problem":137,"code":"(fn [n b]\n  (let [f (fn x [n [f & r]]\n            (when f (cons (quot n f) (x (rem n f) r))))]\n    (or (f n (reverse (take-while #(<= % n) (iterate #(* b %) 1)))) [0])))","user":"5382704be4b06839e8705ed4"},{"problem":137,"code":"(fn step [n b]\n    (if (< n b)\n      [n]\n      (conj (step (quot n b) b) (mod n b))))","user":"59419bdfe4b060784b3b78f7"},{"code":"(fn [n radix]\n  (reverse\n    (loop [result [], n n]\n      (if (> radix n)\n        (conj result n)\n        (recur (conj result (rem n radix)) (quot n radix))))))","problem":137,"user":"4edab806535d10e5ff6f5311"},{"code":"(fn [n b]\n           (let [p (reverse (take-while #(> (quot n %) 0) (iterate #(* b %) 1)))]\n                (loop [x p y n out []]\n                   (if (empty? x)\n                       (if (empty? out) \n                           [0] \n                           out)\n                       (recur (rest x) (mod y (first x)) (conj  out (quot y (first x))))))))","problem":137,"user":"4f03f197535dcb61093f6b84"},{"problem":137,"code":"(letfn [(places [n b]\n            (if (= n 0)\n              [1]\n              (->> (iterate #(* % b) 1)\n                   (take-while #(<= % n))\n                   (reverse))))]\n    (fn digits-in-base [n b]\n      (first\n       (reduce (fn [[acc i] p]\n                 [(conj acc (quot i p)) (rem i p)])\n               [[] n] (places n b)))))","user":"4dfe5a93535d04ed9115e786"},{"problem":137,"code":"(fn p137\n  [num base]\n  (let [a (quot num base)\n        b (rem num base)]\n    (if (zero? a)\n      [b]\n      (conj (p137 a base) b))))","user":"520cb8c4e4b0b022ef140c9a"},{"problem":137,"code":"(fn [thenum thebase] (if (= thenum 0) [0] (reverse \n(for [x (range 0 thenum) :let [y (apply * (repeat x thebase)) dig (quot (mod thenum (* thebase y)) y)] \n:while (> (inc thenum) y)] dig))))","user":"55f75c6be4b06e875b46cea9"},{"code":"(fn digits [n base]\n  (if (< n base)\n    [n]\n    (conj (digits (quot n base) base) (mod n base))))","problem":137,"user":"4fc3a72ae4b081705acca342"},{"code":"(fn [n base]\n  (reverse ((fn digits [n]\n              (lazy-seq\n               (let [[q r] ((juxt quot rem) n base)]\n                 (cons r (when (pos? q)\n                           (digits q))))))\n            n)))","problem":137,"user":"4dabb7b1950ed6eda1bd72f3"},{"code":"(fn \n   [n b] \n   (loop \n     [d [] n n] \n     (if (zero? n) \n       (if (empty? d) [0] (vec (reverse d))) \n       (recur (conj d (rem n b)) (/ (- n (rem n b)) b)))))","problem":137,"user":"5235a902e4b0a643f2dcb750"},{"code":"(fn parse-int [num base]\n    (vec (reverse ((fn parse [cum num base]\n\t(if (< num base) (conj cum num)\n\t\t(let [a (int (/ num base))  nnum (- num (* base a))]\n\t\t\t(parse (conj cum nnum) a base)))) [] num base))))","problem":137,"user":"50e135f4e4b084616e11c667"},{"problem":137,"code":"(fn [n b]\n    (loop [n n v []]\n      (if (< n b)\n        (cons n v)\n        (recur (quot n b) (cons (rem n b) v)))))","user":"507e68abe4b085af06e3afd2"},{"problem":137,"code":"(fn ib\n  ([n b]\n   (reverse (ib n b [])))\n  ([n b a]\n   (if (zero? n)\n      (if (empty? a) [0] a)\n      (let [r (rem n b)]\n        (recur (/ (- n r) b) b (conj a r))))))","user":"5da8fa72e4b000c986472c2d"},{"problem":137,"code":"(fn [n base]\n    (loop [n n acc nil]\n      (if (< n base)\n        (conj acc n)\n        (recur (quot n base) (conj acc (mod n base))))))","user":"500d3160e4b05f7c30cfa6a1"},{"code":"(fn digitsandbases [x n]\n     \"Returns a sequence of digits of x in base n.\"\n     (if (< x n)\n       (vector x)\n       (conj (digitsandbases (/ (- x (mod x n)) n) n) (mod x n))))","problem":137,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn [n b]\n  (if (= n 0) [0]\n  (loop [acc [] n n]\n    (if (= n 0) acc\n    (recur (cons (mod n b) acc) (int (/ n b)))))))","problem":137,"user":"4eb0a757535d7eef3080733d"},{"code":"(fn [n b]\n  (if (zero? n) [0]\n  (loop [n n v (list)]\n    (if (zero? n)\n      (vec v)\n      (recur (int (/ n b)) (conj v (mod n b)))))))","problem":137,"user":"4e6e3a1e535d5021c1a89602"},{"problem":137,"code":"(fn conv [numm base]\n  (if (= 0 numm)\n    [0]\n    (vec (reverse (loop [arr []\n                  \t\t cur numm]\n      (if (= 0 cur)\n        arr\n        (recur (conj arr (mod cur base)) (quot cur base))))))))","user":"5e909685e4b0cb016954634d"},{"problem":137,"code":"(fn [x b] \n    ( if ( zero? x) [0]\n    ( loop [a x acc []]\n      (if (zero? a)\n       (reverse acc)\n       ( recur (quot a b)   (concat  acc  [(rem a b)]))))))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn __ [n b]\n  (if (zero? n)\n    [0]\n    ((fn digits [n]\n       (if (zero? n)\n         []\n         (conj (digits (quot n b)) (rem n b))))\n     n)))","problem":137,"user":"4ec9549d535d6d7199dd36fe"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n  (loop [acc '()\n         n n]\n    (if (zero? n)\n      acc\n      (let [digit (int (/ n b))\n            remainder (mod n b)]\n        (recur (cons remainder acc) digit))))))","problem":137,"user":"51195e77e4b055cfb310d499"},{"code":"(fn [n base]\n  (loop [n n\n         result ()]\n    (if (= n 0)\n      (if (empty? result) [0] result)\n      (recur (unchecked-divide-int n base) (conj result (mod n base))))))","problem":137,"user":"4f3a979de4b0e243712b1f10"},{"problem":137,"code":"(fn [d b]\n  (if (zero? d)\n    [0]\n    (loop [acc [] num d]\n      (let [q (quot num b)\n            r (rem num b)]\n        (if (< q b)\n          (reverse (conj acc r q))\n          (recur (conj acc r) q) )))))","user":"56441634e4b0018b46ad8c08"},{"problem":137,"code":"(fn [x b]\n   (loop [x x\n          y []]\n     (if (zero? x)\n       (if (empty? y) [0] y)\n       (recur (quot x b) (cons (mod x b) y)))))","user":"56ef077ae4b04a395b9a0459"},{"problem":137,"code":"(fn myf2 [n b]\n  (loop [q n, v []]\n    (if (zero? q) (if (empty? v) [n] v)\n      (recur (quot q b) (cons (rem q b) v)))))","user":"577c3da9e4b0c8d87281f6b9"},{"code":"(fn digits\n  [n b]\n  (if (zero? n)\n    [0]\n  \t(letfn [(digits-reversed\n    \t[n b]\n    \t(if (> n 0)\n      \t\t(cons (mod n b) (digits-reversed (quot n b) b))\n      \t\t[]))]\n    \t(reverse (digits-reversed n b)))))","problem":137,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn tob [n b]\n  (let [bs (reverse (take-while #(or (<= % n) (= % 1)) (iterate #(* % b) 1)))]\n    (letfn [(h [ds bs n]\n              (if (empty? bs) ds\n                  (let [f (first bs)\n                        q (quot n f)]\n                    (h (conj ds q) (rest bs) (- n (* q f))))))]\n      (h [] bs n))))","problem":137,"user":"4ede8e1d535d10e5ff6f5339"},{"code":"(fn [n b]\n  (reverse\n    (map #(rem % b)\n      (cons n\n        (take-while pos?\n          (iterate #(quot % b)\n            (quot n b)))))))","problem":137,"user":"4fe84c74e4b07c9f6fd12c3c"},{"code":"(fn f [n b]\n  (let [q (quot n b) m (mod n b)]\n   (conj (if (= 0 q) [](f q b)) m)))","problem":137,"user":"4dada16fc9a9d6ed2699dc57"},{"code":"(fn [n base]\n  (if (zero? n)\n      [0]\n      (let [len (int (/ (Math/log n) (Math/log base)))\n            pow (fn [b exp] (reduce * (take exp (repeat b))))]\n        (loop [acc [] rmd n pot len]\n          (if (< pot 0)\n            acc\n            (let [base-pot (pow base pot)]\n            (recur (conj acc (quot rmd base-pot))\n                   (mod rmd base-pot)\n                   (dec pot))))))))","problem":137,"user":"4e68b46c535d8ccf87e9fe87"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    ;; obtain the largest base^x that is smaller than n\n    (let [max-possible-divisor (loop [div 1]\n                                 (cond\n                                  (= n div) div         ; necessary for (__ 8 8) etc\n                                  (< n div) (/ div base)\n                                  :else     (recur (* div base))))]\n      ;;\n      (loop [div       max-possible-divisor ; start from the biggest\n             remaining n\n             acc       []]\n        (if (and (< div 1))\n          acc\n          (recur (/ div base) (- remaining (* div (quot remaining div))) (conj acc (quot remaining div))))))))","problem":137,"user":"53415755e4b00652c8746ecd"},{"problem":137,"code":"(fn f [n r]\n  (if-not (< n r)\n    (conj (f (quot n r) r) (mod n r))\n    [n]))","user":"54ddb556e4b024c67c0cf798"},{"code":"(fn [x b]\n  (->> x\n       (iterate #(quot % b))\n       (take-while #(> % 0))\n       (map #(mod % b))\n\t   reverse\n\t   (#(if (empty? %) '(0) %))))","problem":137,"user":"525f51bde4b0cb4875a45dc8"},{"problem":137,"code":"(fn change-base [n base]\n  (if (= n 0) [0]\n              (loop [res nil n n]\n                (if (= n 0) res\n                            (recur (cons (mod n base) res) (quot n base))))))","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":137,"code":"(fn [x b] (loop [x x\n                 lst ()]\n            (if (zero? x)\n              (if (empty? lst) [0] lst)\n              (recur (quot x b) (conj lst (mod x b))))))","user":"6011b89ee4b074f607df66bc"},{"code":"(fn [x b]\n  (let [n (if (zero? x) 0 (int (/ (Math/log x) (Math/log b))))]\n       (first (reduce (fn [[v r] i] \n            (let [bi (apply * (repeat i b))]\n                 [(conj v (quot r bi)) (rem r bi)]))\n          [[] x] (range n -1 -1)))))","problem":137,"user":"4f05ea25535dcb61093f6c02"},{"problem":137,"code":"(fn [n base]\n  ((fn [n base v]\n     (if (= n 0)\n       (if (empty? v) (conj v 0) (reverse v))\n       (recur (quot n base) base (conj v (rem n base))))) n base []))","user":"60aecd73e4b00e9e6653c49a"},{"code":"(fn [x b]\n  (let [final (loop [n x\n         result '()]\n    (if (= n 0)\n      result\n      (let [last_digit (rem n b)\n            new_n (/ (- n last_digit) b)]\n        (recur new_n (conj result last_digit)))))]\n    (if (empty? final) [0] final)))","problem":137,"user":"51899891e4b0288ada3dbdab"},{"code":"(fn db [nx b]\n  (loop [n nx s nil]\n    (let [q (quot n b)\n          r (rem n b)]\n      (if (zero? q) (cons r s)\n        (recur q (cons r s)))))\n  )","problem":137,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":137,"code":"(fn set-base [n base]\n  (loop [result '() n n]\n    (cond\n      (and (zero? n) (empty? result)) '(0)\n      (zero? n) result\n      :else\n        (recur (cons (rem n base) result) (quot n base))\n    )\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"code":"(fn [n b]\n  ((fn encontra-resp [numero base maior-casa]\n     (if (zero? maior-casa)\n       (list numero)\n       (let [digito ((fn encontra-numero [numero casa base]\n                       (dec (some #(when (< numero (* % (apply * (repeat casa base))))\n                                     %)\n                                  (map inc (range)))))\n                      numero \n                      maior-casa \n                      base)]\n         (cons digito (encontra-resp (- numero (* digito (apply * (repeat maior-casa base)))) base (dec maior-casa))))))\n    n \n    b \n    ((fn [nume bas]\n       (dec (some #(when (> (second %) nume)\n                     (first %))\n                  (map #(vector % (apply *' (repeat % bas))) \n                       (map inc (range))))))\n      n \n      b)))","problem":137,"user":"52c8758be4b0c2d177d62135"},{"problem":137,"code":"(fn [n b]\n  (loop [v [] number n]\n    (if (zero? (quot number b))\n      (cons (rem number b) v)\n      (recur\n        (cons (rem number b) v)\n        (quot number b)))))","user":"564d3169e4b0284900eef67c"},{"problem":137,"code":"(fn to-digits [x m]\n                     (if (< x m) (vector x)\n                            (conj  (to-digits (quot x m) m) (mod x m))))","user":"50856bd1e4b004985b776e4c"},{"problem":137,"code":"(fn d-and-b\n  [d b]\n  (let [log-value (/ (Math/log d) (Math/log b))\n        length    (max 1 (inc (Math/floor log-value)))]\n    (println length)\n    (last (reduce (fn [[current-value translated-value] i]\n                    (let [min-value-of-index (Math/pow b i)]\n                      (if (> min-value-of-index\n                             current-value)\n                        [current-value (conj translated-value 0)]\n                        (let [v (int (/ current-value (Math/pow b i)))]\n                          [(- current-value (* v (Math/pow b i)))\n                           (conj translated-value v)]))))\n                  [d []] (reverse (range length))))))","user":"4daeabf6edd6309eace4d15c"},{"code":"(fn f [x base]\n  (loop [coll [] remain x]\n    (println coll )\n    (if (= remain 0)\n      (if (empty? coll)\n        [0]\n      (reverse coll))\n      (let [q (quot remain base) r (rem remain base)]\n        (recur (conj coll r) q)))))","problem":137,"user":"518c5236e4b087e178201de0"},{"problem":137,"code":"(fn [n b]\n            (if (= 0 n)\n              '(0)\n              ((fn [r num]\n                 (if (= 0 num)\n                   r\n                   (recur (conj r (mod num b)) (int (/ num b)))))\n               '() n)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":137,"code":"(fn convert-base [n base]\n  (if (< n base)\n    [n]\n    (conj (convert-base (quot n base) base) (mod n base))))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":137,"code":"(fn f [n base]\n\t(if (< n base)\n      [n]\n      (conj (f (quot n base) base) (rem n base))\n    )\n)","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn d [n b] (if (< n b) [n] (conj (d (int (/ n b)) b) (mod n b) )))","problem":137,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn basify[n base]\n  (reverse (loop [actual n\n         result []\n  ]\n    (if (< actual base)\n      (conj result actual)\n      (recur (int (/ actual base)) (conj result (rem actual base)))\n    )\n  ))\n)","problem":137,"user":"4e9de526535dbda64a6f6b8e"},{"code":"#((fn c [n b]\n  (let [q (quot n b)\n        r (rem n b)]\n\t  (if (zero? q)\n        [r]\n        (conj (c q b) r)))) % %2)","problem":137,"user":"507ef25ce4b0f753b6f9788e"},{"problem":137,"code":"(fn dab\n  ([n b] (if (zero? n) [0] (dab n b [])))\n  ([n b digs]\n   (if (> n 0)\n    (dab (int (/ n b)) b (cons (mod n b) digs))\n    digs)))","user":"55ede35ce4b0121d4835fde1"},{"problem":137,"code":"(fn [n b]\n  (loop [n n acc []]\n    (if (< n b)\n      (conj acc n)\n      (recur (quot n b)(cons (mod n b) acc)))))","user":"55ecb2c0e4b0121d4835fdce"},{"problem":137,"code":"(fn f [x b]\n  (loop [x x, s ()]\n      (cond\n        (> (quot x b) 0) (recur (quot x b) (conj s (mod x b)))\n        :else (conj s (mod x b)))))","user":"569dd6e8e4b0542e1f8d1480"},{"code":"#(loop [n %1\r\n        a []]\r\n  (let [rm (mod n %2)\r\n        nm (- n rm)\r\n        qm (/ nm %2)\r\n        am (conj a rm)]\r\n    (if (= qm 0)\r\n      (reverse am)\r\n      (recur qm am))))","problem":137,"user":"4e59f717535d8a8b8723a2a6"},{"problem":137,"code":"(fn [x b]\n  (if (= 0 x)\n    [0]\n    (loop [x x\n           digs ()]\n      (if (zero? x)\n        (vec digs)\n        (recur (quot x b) (cons (rem x b) digs))))))","user":"4ec1b090535dfed6da9c6db5"},{"problem":137,"code":"(fn f\n  ([n b] (vec (f n b nil)))\n  ([n b a]\n   (if (< n b)\n     (conj a n)\n     (let [r (rem n b)]\n       (f (int (/ n b)) b (conj a r))))))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":137,"code":"(fn number\n  [digit base]\n  (if (= 0 digit)\n    [0]\n\n    (loop [digit   digit\n           numbers []]\n      (if (> digit 0)\n        (recur (int (/ digit base)) (conj numbers (mod digit base)))\n        (-> numbers reverse vec)))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":137,"code":"(fn f [x n]\n  (if (< x n) [x]\n    (let [r (rem x n)]\n      (conj (f (quot (- x r) n) n) r)\n      )\n    )\n  )","user":"55e1d34ae4b050e68259b421"},{"code":"(fn represent [number base]\n  (if (< number base) [number]\n    (conj (represent (quot number base) base) (mod number base))))","problem":137,"user":"4f251302e4b0d66497709ff0"},{"code":"(fn [n base]\n  (loop [n n\n         num-list '()]\n    (if (zero? n)\n      (if (empty? num-list)\n        '(0)\n        num-list)\n      (recur (int (/ n base))\n             (cons (mod n base) num-list)))))","problem":137,"user":"51a97f7ae4b08d8ec191b827"},{"code":"(fn base\n  ([a b] (base a b []))\n  ([a b acc]\n     (let [q (quot a b)\n           m (mod a b)]\n       (if (zero? q)\n         (cons m acc)\n         (base q b (cons m acc))))))","problem":137,"user":"500cb910e4b05f7c30cfa698"},{"problem":137,"code":"(fn digits-base [n b]\n  (if (= n 0)\n    [0]\n    (loop [acc '()\n         n n]\n    (if (> n 0)\n      (recur (cons (mod n b) acc) (quot n b))\n      acc))))","user":"56f4cedce4b046a417f92063"},{"problem":137,"code":"(fn [n base]\n    (letfn [(digits\n              [n ]\n              (if (> n 0)\n                (cons (rem n base ) (digits (quot n base) ))\n                ))]\n      (if-let [xs (digits n )]\n        (reverse xs)\n        [0]\n        )))","user":"5433a07be4b0b6b47310fce0"},{"problem":137,"code":"(fn [n b] (let [f (fn f [n] (if (= 0 n) [] (conj (f (quot n b)) (rem n b))))\n                r (f n)]\n               (if (empty? r) [0] r)))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":137,"code":"(fn f [n b]\n  (if (< n b)\n    [n]\n    (conj (f (quot n b) b) (rem n b))))","user":"4e7db3b4535db169f9c796e1"},{"problem":137,"code":"(fn get-digits\n  ([x base] (if (zero? x) '(0) (get-digits x base :lol)))\n  ([x base _]\n    (if (< x 1) (list)\n      (let [digit (rem x base)]\n        (concat (get-digits (quot x base) base :lol) (list digit)))))\n  )","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn get-digits [n base]\n       (cond (= 0 n) [0]\n       :default \n       (let [k (mod n base) p (/ (- n k) base)]\n        (if (= p 0) [k] (conj (get-digits p base) k)))))","problem":137,"user":"4e49a7bb535dc968683fc4c6"},{"problem":137,"code":"(fn [n base]\n  (if (= n 0)\n    [0]\n  (vec (reverse ((fn inner [n] (if (zero? n) nil (cons (rem n base) (lazy-seq (inner (quot n base)))))) n)))))","user":"55934bebe4b0c79f6e1db93b"},{"problem":137,"code":"(fn p\n  [n b]\n  (loop [n n b b r ()]\n    (if (< n b)\n      (vec (cons n r))\n      (recur (quot n b) b (cons (rem n b) r)))))","user":"56df632ce4b0ca2494a095f2"},{"problem":137,"code":"(fn f[n b] (let [q (quot n b) r (mod n b)] (if (zero? q) [r] (conj (f q b) r))))","user":"531f1e63e4b08068f379edc2"},{"problem":137,"code":"(fn convert [n base]\n   (if (< n base)\n     [n]\n     (conj (convert (quot n base) base) (rem n base))))","user":"58b51e05e4b0ebc645576d4c"},{"problem":137,"code":"(fn n-ary [digit n]\n  (if (zero? digit)\n    [0]\n    (let [rec (n-ary (quot digit n) n)\n          sub (if (zero? (first rec)) [] rec)]\n      (conj sub (mod digit n))\n      )\n    )\n  )","user":"5cebafbbe4b0a17bb84e2be6"},{"problem":137,"code":"(fn [n base]\n    (if (zero? n)\n      '(0)\n      (loop [n n acc ()]\n       (if (zero? n)\n         acc\n         (recur (long (/ n base)) (conj acc (mod n base)))))))","user":"551a21ece4b091ff45eda993"},{"code":"#(if (= 0 %) [0]\n     (loop [n % digits ()]\n       (if (= 0 n)\n           digits\n           (recur (quot n %2)\n                  (cons (mod n %2) digits)))))","problem":137,"user":"4fa6d532e4b081705acca1be"},{"problem":137,"code":"(fn encode [n base]\n  (if (zero? n) [0]\n    (loop [n n acc []]\n      (if (zero? n) \n        acc\n      \t(recur (quot n base) (cons (mod n base) acc))))))","user":"54448e84e4b032a45b869393"},{"code":"(fn p137\n  ([n b] (if (= n 0) [0] (p137 [] n b)))\n  ([ls n b] (if (= n 0) (reverse ls)\n              (p137 (conj ls (mod n b)) (int (/ n b)) b))))","problem":137,"user":"5272669de4b03e8d9a4a742e"},{"code":"(fn [n b]\r\n  (if (zero? n) [0]\r\n    (loop [n n i b r ()]\r\n      (if (zero? n) r\r\n        (recur \r\n          (- n (mod n i))\r\n          (* i b)\r\n          (cons \r\n            (/ (* b (mod n i)) i)\r\n            r))))))","problem":137,"user":"4fce5474e4b0d4b2a7a9d451"},{"problem":137,"code":"(fn number137 [n base]\n  (loop [r [] c n]\n    (if (< c base)\n      (cons c r)\n      (recur (cons (rem c base) r) (quot c base)))))","user":"54074fc5e4b0addc1aec66b6"},{"problem":137,"code":"(fn dig-and-bases [num base]\n  (if (zero? num)\n    [0]\n    (loop [acc [], n num]\n      (if (zero? n)\n        acc\n        (recur (cons (rem n base) acc) (quot n base))))))","user":"590b3aeae4b047aa04b199d0"},{"code":"(fn [n base]\n  (loop [x n\n         digits nil]\n    (if (< x base)\n      (conj digits x)\n      (let [d (mod x base)]\n        (recur (quot (- x d) base)\n               (conj digits d))))))","problem":137,"user":"4ebcb8ff535dfed6da9c6d8a"},{"code":"(fn to-base [n b]\n  (loop [curr n res '()]\n    (if (>= curr b)\n      (recur (quot curr b) (conj res (rem curr b)))\n      (conj res curr))))","problem":137,"user":"5326c5f7e4b09d4e7a9b54f2"},{"problem":137,"code":"(fn todig [n r]\n  (loop [n n\n         res []]\n    (if (zero? n)\n      (if (empty? res) [0] res)\n      (recur (int (/ n r)) (cons (int (rem n r)) res)))))","user":"5703eda3e4b08d47c9778200"},{"problem":137,"code":"(fn db [num base]\n   (if (zero? num) [0]\n       (loop [num num digs nil]\n         (if (zero? num) digs\n             (let [d (rem num base)]\n               (recur (/ (- num d) base) (cons d digs)))))))","user":"5e5b8d92e4b0fd0acd158658"},{"problem":137,"code":"(fn convertBase [n base]\n  (if (= 0 n)\n    '(0)\n    (loop [currN n\n           res   '()]\n      (if (= 0 currN)\n        res\n        (recur (quot currN base) (conj res (mod currN base)))\n        )\n      ))\n  )","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":137,"code":"(fn base [x b]\n (if (< x b) [x]\n  (conj (base (quot x b) b) (mod x b))))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn [n base]\r\n    (loop [n n acc '()]\r\n      (let [x (mod n base)\r\n            xs (quot n base)\r\n            acc (conj acc x)]\r\n        (if (pos? xs)\r\n          (recur xs acc)\r\n          acc))))","problem":137,"user":"4f047177535dcb61093f6bc6"},{"code":"(fn [x y]\n  (loop [x x digs []]\n    (if (and (zero? x) ((complement empty?) digs))\n      (reverse digs)\n      (recur (quot x y)\n             (conj digs (rem x y))))))","problem":137,"user":"4faec810e4b081705acca24e"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0]\n    (loop [rst n result '()]\n      (if (zero? rst)\n        result\n        (recur (quot rst b) (conj result (mod rst b)))))))","user":"56ab7578e4b03c432f18733d"},{"code":"(fn [i b]\n  (if (zero? i)\n    [0]\n    (reverse (loop [res []\n                    j   i]\n               (if (zero? j)\n                 res\n                 (recur (conj res (mod j b)) (int (/ j b))))))))","problem":137,"user":"4daf8f84edd6309eace4d17a"},{"code":"(fn [n b] (map #(mod % b) \r\n             (->  (take-while #(> % 0) (iterate #(int (/ % b)) n))\r\n  \t    rest\r\n\t\t   (conj n)\r\n\t\t   reverse)))","problem":137,"user":"4dae4da5c9a9d6ed4e99dc57"},{"problem":137,"code":"(fn [numb base]\n    (if (zero? numb) [0]\n    (->> numb\n        (iterate #(quot % base))\n        (take-while (complement zero?))\n        (map #(rem % base))\n        reverse)))","user":"5f548678e4b0a0bc16850a7e"},{"code":"(fn digibase [value base]\n    (loop [res '()\n           val value]\n      (let [curdig (mod val base)\n            remval (quot val base)]\n        (if (> remval 0)\n          (recur (conj res curdig) remval)\n          (conj res curdig))))\n    )","problem":137,"user":"5165a235e4b079ad97ec44ac"},{"problem":137,"code":"(fn [n b]\n  (letfn [(db [n b]\n            (if (= n 0) []\n                (conj (db (quot n b) b) (rem n b))))]\n    (if (= n 0) [0]\n        (db n b))))","user":"53f053ebe4b0742d9025b0d3"},{"code":"(fn [num base]\n  (loop [acc [] n num]\n    (if (< n base)\n      (reverse (conj acc n))\n      (let [r (rem n base)]\n        (recur (conj acc r)(/ (- n r) base))))))","problem":137,"user":"52e087dde4b09f7907dd1412"},{"code":"(fn problem-137 [n base]\n  (let [max-place\n        (if (> n 0)\n          (loop [counter 0]\n            (if (< n (Math/pow base counter))\n              (dec counter)\n              (recur (inc counter))))\n          0)]\n    (loop [result []\n           place max-place\n           remainder n]\n      (let [val-for-place (int (/ remainder (Math/pow base place)))]\n        (if (= 0 place)\n          (conj result (int remainder))\n          (recur\n           (conj result val-for-place)\n           (dec place)\n           (- remainder (* val-for-place (Math/pow base place)))))))))","problem":137,"user":"4f31519ae4b0d6649770a086"},{"problem":137,"code":"(fn [dec-num num-base] \n  (loop [n dec-num digits '()] \n    (if (= 0 n) \n      (if (= 0 (count digits)) '(0) digits) \n      (recur (int (/ n num-base)) (conj digits (mod n num-base))))))","user":"546692aee4b01be26fd746e7"},{"problem":137,"code":"(fn [a b]\n  (if (zero? a)\n    [0]\n  \n    (loop [ans []\n           m a]\n      (if (zero? m)\n        (vec (reverse ans))\n        (recur (conj ans (mod m b))\n               (quot m b))))))","user":"5632d1b3e4b0bfe05bf117a9"},{"code":"(fn [n base]\n    (if (zero? n)\n        [0]\n     (let [divvy (take-while #(<= 1 %) (iterate #(int (/ % base) ) n))\n          digbackw (map #(rem % base) divvy)]\n      (reverse digbackw))))","problem":137,"user":"5133e51ae4b0d7a043de8cf6"},{"problem":137,"code":"(fn [n base]\n     (let [res \n           (into []\n                 (reverse\n                  (map #(int (first %))\n                       (take-while #(<= (Math/pow base (second %))\n                                       n)\n                                   (map #(vector (mod (/ n (Math/pow base %1))\n                                                      base)\n                                                 %1)\n                                        (range))))))]\n       (if (zero? (count res))\n         [0]\n         res)))","user":"50981062e4b04e098a4c7268"},{"problem":137,"code":"(partial\n (fn [res num base]\n   (if (= num 0)\n     (if (empty? res) [0] res)\n     (recur (cons (rem num base) res) (int (/ num base)) base)))\n [])","user":"54c5cc17e4b045293a27f624"},{"problem":137,"code":"(fn base [n b]\n  (loop [i n\n         ret '()]\n    (let [x (quot i b)]\n      (if (zero? x)\n        (cons i ret)\n        (recur x (cons (mod i b) ret))))))","user":"5ba15075e4b0a20761a2339e"},{"code":"(fn digit-base [val radix]\n  (loop[result []\n        val val]\n    (if(< val radix)\n      (vec (reverse (concat result (vector val))))\n      (recur (concat result (vector (rem val radix)))\n             (quot val radix)))))","problem":137,"user":"5273562ae4b03e8d9a4a7479"},{"problem":137,"code":"(fn [n b]\n (if (= n 0) [0]\n  (loop [x n c []]\n    (if (>= x 1)\n      (recur (int (/ x b)) (cons (mod x b) c))\n      c\n    )\n  ))\n)","user":"5df08767e4b093ff717275bf"},{"code":"(fn f [a n b] \n  (if (> n 0) (f (into [(mod n b)] a) (quot n b) b) \n    (if (empty? a) [0] a))) []","problem":137,"user":"512f06c5e4b0762be4c7aad7"},{"code":"(fn [d b]\n  (loop [s ()\n         x (quot d b)\n         r (rem d b)]\n    (if (= x 0)\n      (conj s r)\n      (recur (conj s r) (quot x b) (rem x b)))))","problem":137,"user":"53460d02e4b084c2834f4a39"},{"code":"(fn [n base]\r\n  (loop [n n\r\n         res '()]\r\n    (if (< n base)\r\n      (vec (conj res n))\r\n      (recur (quot n base) (conj res (rem n base))))))","problem":137,"user":"4de2f44f535d08e6dec9fdec"},{"problem":137,"code":";(fn f [n b]\n ; (if (< n b)\n  ;  [n]\n   ; (conj (f (quot n b) b) (mod n b))))\n\n;(fn [n b]\n  #(loop [n %, xs []]\n    (if (< n %2)\n      (cons n xs)\n      (recur (quot n %2) (cons (mod n %2) xs))));)","user":"5e3e23d9e4b01d43a70e8e20"},{"problem":137,"code":"(fn f [x b] \n  (if (< x b) [x]\n     (conj (f (int (/ x b)) b) (mod x b))))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [n b]\n    (loop [n n c ()]\n      (let [d (int (/ n b))\n            k (conj c (rem n b))]\n        (if (zero? d)\n          k\n          (recur d k)))))","problem":137,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn digits-and-bases [d b]\n  (if (< d b)\n    [d]\n    (conj (digits-and-bases (quot d b) b) (mod d b))))","problem":137,"user":"523c6451e4b07becd5be2222"},{"problem":137,"code":"(fn [n b]\n  (loop [n n b b res (if (zero? n) '(0) ())]\n    (if (zero? n)\n      res\n      (recur (quot n b) b (conj res (rem n b))))))","user":"58c2df0ae4b021aa9917ed17"},{"problem":137,"code":"(fn base\n  ([n b] (base n b '()))\n  ([n b digs]\n   (if (< n b)\n     (cons n digs)\n     (recur (quot n b)\n            b\n            (cons (rem n b) digs)))))","user":"541709b0e4b01498b1a71a06"},{"code":"(partial\n  (fn [sq v b] \n    (let [r (mod v b) \n          d (quot v b)]\n    (if (and (zero? v) (not (empty? sq)))\n      sq \n      (recur (cons r sq) d b))))\n  ())","problem":137,"user":"4fc0853ae4b081705acca327"},{"problem":137,"code":"(fn digits[n base]\n  (loop [result (list (mod n base)) remainder (quot n base)]\n        (if (zero? remainder)\n          result\n          (recur\n           (conj result (mod remainder base))\n           (quot remainder base)))))","user":"56069006e4b08b23635d3174"},{"problem":137,"code":"(fn [digits base]\n  (if (= 0 digits) [0]\n    (loop [remainder digits\n           bag '()]\n      (if (= 0 remainder)\n        bag     ; base case\n        (recur (quot remainder base)\n               (conj bag (mod remainder base)))))))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":137,"code":"(fn digits [x base]\n    (loop [_digits []  x x]\n      (let [[_quot _rem] ((juxt quot rem) x base)  _digits (cons _rem _digits)]\n        (if (zero? _quot)\n          _digits\n          (recur _digits _quot)))))","user":"561814bae4b06b1bb2182a1a"},{"problem":137,"code":"(fn [x b] \n  (if (zero? x) '(0) (reverse (map \n                            #(mod % b)\n                            (take-while #(not (zero? %)) \n                                        (iterate #(quot % b) x))))))","user":"533975f0e4b0e30313ee6ca9"},{"problem":137,"code":"(comp reverse\n  (fn digits [n base]\n    (let [q (quot n base)\n          r (rem n base)]\n        (if (= 0 q)\n            (list r)\n            (cons r (digits q base))))))","user":"5901158de4b0438e51c2d039"},{"problem":137,"code":"(fn [n base]\n  (loop [n n\n         ret []]\n    (if (zero? n)\n      (if (zero? (count ret))\n        [0]\n        (reverse ret))\n      (recur (quot n base)\n             (conj ret\n                   (mod n base))))))","user":"55f73078e4b06e875b46cea4"},{"problem":137,"code":"(fn l [n b]\n  (let [m (quot n b) r (mod n b)]\n    (if (< m 1) [r] (conj (l m b) r))))","user":"53aaaf7ae4b047364c044444"},{"problem":137,"code":"(fn [x b]\n     (if (> x 0)\n     (loop [ r [],  x x ]\n       (if  (> x 0) (recur (cons (mod x b) r) (int (/ x b))) r)) [0]))","user":"4fd11a93e4b04c3a95aa040a"},{"problem":137,"code":"(fn base-converter\n  [d b]\n  (if\n    (< d b) [(mod d b)]  \n    (conj (base-converter (.intValue (Math/floor (/ d b))) b) (mod d b))))","user":"5b72b36ce4b047b03b2036a9"},{"problem":137,"code":"(fn digits-base [n b]\n    (case n\n      0 [0]\n      (let [p (reverse\n               (take-while #(>= n %)\n                           (reductions *' 1 (repeat b))))]\n        (loop [o [] n n p p]\n          (if-let [a (first p)]\n            (recur (conj o (int (/ n a)))\n                   (mod n a)\n                   (rest p))\n            o))\n        )))","user":"579693d4e4b039eba2ecb0e7"},{"code":"(fn [n b]\n  (loop [nn n l ()]\n    (if (< nn b)\n      (conj l nn)\n      (recur (quot nn b) (conj l (mod nn b))))))","problem":137,"user":"4dd9d299535d2dad7130b5dd"},{"problem":137,"code":"(fn [n base]\n  (letfn [\n    (split-num [n base lst]\n      (let [div (quot n base),\n            modulo (mod n base),\n            new-lst (cons modulo lst)]\n        (if (= div 0)\n          new-lst\n          (split-num div base new-lst))))\n      ]\n    (split-num n base ())))","user":"5ff93da9e4b06df49cee14af"},{"code":"(fn [v b]\n  (if (zero? v) [0]\n  (loop [d '() cur v]\n    (if (zero? cur) d\n    (recur (conj d (mod cur b)) (quot cur b)))\n  ))\n)","problem":137,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":137,"code":"(fn digits\n  [num base]\n  (if (< num base)\n    [num]\n    (loop [multipliers\n           (->\n             (map\n               #(reduce * (take % (repeat base)))\n               (range 1\n                      ;; sub-routine to get the # of digits\n                      (loop [n 2]\n                        (let [max-plus-one\n                              (reduce * (take n (repeat base)))]\n                          (cond\n                            (< num max-plus-one) n\n                            (= num max-plus-one) (inc n)\n                            :else (recur (inc n)))))\n                      ))\n             (conj 1)\n             (reverse))\n           v num\n           ds []]\n      (let [divisor (first multipliers)\n            digits (conj ds (quot v divisor))]\n        (if-let [xs (seq (rest multipliers))]\n          (recur xs (mod v divisor) digits)\n          digits)))))","user":"536ecd9fe4b0fc7073fd6e76"},{"code":"(fn [n b]\n  (if (zero? n)\n    (list 0)\n    (loop [x n, v '()]\n      (if (zero? x)\n        v \n        (recur (quot x b) (conj v (mod x b)))))))","problem":137,"user":"52039e12e4b0fb7e47ea51ff"},{"code":"(partial\n (fn  [lst value base]\n  (if (= value 0)\n    (if (empty? lst) [0] (vec lst))\n    (recur (conj lst (mod value base)) (quot value base) base))) '())","problem":137,"user":"4f8aa1c1e4b02e764a0a516e"},{"problem":137,"code":"(fn digits-and-bases [num base]\n  (if (= 0 num) '(0)\n      (loop [n num result '()]\n        (if (not= 0 n)\n          (recur (int (/ n base)) (cons (mod n base) result))\n          result))))","user":"5693a53ee4b0dcc4269f4106"},{"code":"(fn [n base] \n  (if (= 0 n) \n      [0] \n      (loop [res [] n n] \n        (if (= 0 n) \n            res \n            (recur (cons (mod n base) res) (quot n base))))))","problem":137,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn [n b] (let [\ni (map #(apply *' (repeat % b))\n(range)) \nl (take-while #(<= % n) i)]\n(if (= 0 n) [0] (loop [v [] c l m n] \n (if (empty? c) v\n (recur (conj v (quot m (last c)))\n (butlast c) (rem m (last c)))))\n)))","problem":137,"user":"517945dce4b0684c1c981a43"},{"code":"(fn [n d]\n  (if-not (pos? n)\n    [0]\n   (reverse\n    (map #(mod % d)\n         (take-while pos?\n                     (iterate #(quot % d) n))))))","problem":137,"user":"4e50e2a0535dc968683fc4ef"},{"problem":137,"code":"#(loop [n %\n        r ()]\n   (if (< n %2)\n     (conj r n)\n     (recur (quot n %2) (conj r (mod n %2)))))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn [n base]\n  (loop [m n\n         digits []]\n    (if (< m base)\n      (cons m digits)\n      (recur (quot m base)\n             (cons (rem m base) digits)))))","problem":137,"user":"5236b6bce4b05f3be1c7c8fe"},{"problem":137,"code":"(fn digits\n\t([n b] (digits n b []))\n\t([n b acc]\n     (if (zero? n) (if (empty? acc) [0] (reverse acc))\n       (digits (/ (- n (mod n b)) b) b (conj acc (mod n b))))))","user":"56897739e4b0dcc4269f407d"},{"problem":137,"code":"(fn to-base\n   [orig base]\n   (loop [cur-num orig divider base res (vector)]\n     (let [remaining (mod cur-num divider)]\n       (if (= 0 (int(/ cur-num base)))\n         (into [](reverse(conj res remaining)))\n         (recur (int(/ cur-num base)) divider (conj res remaining))))))","user":"5d824225e4b0915913b1d37f"},{"problem":137,"code":"#(if (zero? %1) [0]\n   ((fn digits-base [number base]\n     (if (zero? number)\n       []\n       (conj (digits-base (quot number base) base) (mod number base)))) %1 %2))","user":"567e418fe4b0feffd0d18eb1"},{"problem":137,"code":"(fn [n b]\n  (loop [n n res '()]\n    (if (= 0 n) (if (empty? res) [0] (vec res))\n      (recur (quot n b) (cons (mod n b) res)))))","user":"553e0b70e4b0a04f792994e8"},{"code":"#(let [f (fn [n r]\n           (if (= n 0)\n             (if (empty? r) [0] (reverse r))\n             (recur (int (/ n %2))\n                    (conj r (mod n %2)))))]\n   (f %1 []))","problem":137,"user":"4e773be8535d324fb2983d6e"},{"problem":137,"code":"(fn [n b]\n  (if (zero? n) [0] ((fn dig [n1 l] (if (zero? n1) l (dig (quot n1 b) (cons (mod n1 b) l)))) n [])))","user":"5b919d9de4b0c0b3ffbd4a24"},{"problem":137,"code":"(fn conv[n b]\n  (letfn [(convert [num base acc]\n            (cond (= 0 num) (if (empty? acc) '(0) acc)\n                  true (convert (quot num base) base (cons (rem num base) acc))))]\n    (convert n b ())))","user":"5d1bbef0e4b02ea6f0fb6984"},{"code":"(fn num-seq\n  ([num base]\n     (if (= num 0) '(0)\n         (let [p (int (/ (Math/log num) (Math/log base)))]\n           (num-seq num base p))))\n  ([num base p]\n     (if (neg? p) nil\n         (let [d (int (Math/pow base p))\n               q (quot num d)\n               r (rem num d)]\n           (cons q (num-seq r base (dec p)))))))","problem":137,"user":"4e7f51eb535db966e863cc3f"},{"problem":137,"code":"(fn f [n b]\n          (if (>= n b)\n            (conj (f (quot n b) b) (rem n b))\n            [n]))","user":"53f592b7e4b0db01ade6f9d0"},{"code":"(fn [n s]\n  (let [a ((fn f [m]\n              (if (zero? m) '()\n              (cons (mod m s) (f (unchecked-divide-int m s))))) n)]\n    (if (= a '()) [0]\n    (reverse a))))","problem":137,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn digits [num base]\n    (if (zero? num)\n        '(0)\n        (loop [num num res ()]\n            (if (zero? num)\n                res\n                (recur (quot num base) (conj res (rem num base)))\n            ))))","problem":137,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"; I'm not pleased with my solution here, I think I need to learn to love recursion more\n(fn [num base]\n\t(let [headings (reverse (take-while #(<= % num) (iterate (partial * base) 1)))\n\t\t  reductions (reductions #(vector (rem (first %) %2) (quot (first %) %2)) [num 0] headings)\n\t\t  result (rest (map second reductions))]\n\t\t(if (empty? result) [0] result)))","problem":137,"user":"5201ff99e4b0b2e020a18f26"},{"code":"#(if (pos? %2)\n   (recur (conj % (mod %2 %3)) (quot %2 %3) %3)\n   (or % [0])) nil","problem":137,"user":"4e8f1ac6535d65386fec2146"},{"problem":137,"code":"(fn p137 [n b]\n    (loop [n n digits ()]\n      (if (zero? n)\n        (if (empty? digits) [0] digits)\n        (recur (quot n b) (conj digits (rem n b))))))","user":"4fc4eb1ee4b081705acca354"},{"problem":137,"code":"(fn dectobase[zz,b]\n  ( if (= zz 0)\n    [0]\n    ( loop [ x zz res [] ]\n      ( if (= x 0)\n        res\n        (recur (quot x b) (cons (rem x b) res))\n        )\n      )\n    )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"code":"(fn to-base-b [x b]\n        (let [result (->> x\n                          (iterate #(int (Math/floor (/ % b))))\n                          (take-while (complement zero?))\n                          (map #(mod % b))\n                          (reverse))]\n          (if (empty? result)\n              [0]\n            result)))","problem":137,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn translate-base [num base]\n  (loop [leftover num\n         builder '()]\n    (cond\n      (< leftover base) (cons leftover builder)\n      :else (recur (/ (- leftover (rem leftover base)) base) (cons (rem leftover base) builder)))))","problem":137,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [acc n b]\n  (if (zero? n)\n    (if (empty? acc) [0] (reverse acc))\n    (recur (conj acc (mod n b)) (quot n b) b)))\n[]","problem":137,"user":"519ef784e4b087743fad2198"},{"problem":137,"code":"(fn cb\n    ([n b] (cb (int (/ n b)) b [(mod n b)]))\n    ([n b v]\n     (if (= n 0)\n       (reverse v)\n       (recur (int (/ n b)) b (conj v (mod n b))))))","user":"5a9d64c8e4b0d174b936c7eb"},{"problem":137,"code":"(fn [m r] (if (zero? m) '(0) (loop [n m ds []] (if (zero? n) ds (recur (quot n r) (cons (rem n r) ds))))))","user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn [n b]\n   (loop [acc () n n]\n     (if (> b n)\n       (conj acc n)\n       (let [q (quot n b) r (rem n b)]\n         (recur (conj acc r) q)))))","problem":137,"user":"4ed188c8535d44c135fd68cf"},{"problem":137,"code":"(fn [n b]\n    (into [] ((fn [acc r]\n       (if (< r b) (conj acc r) (recur (conj acc (mod r b)) (quot r b))))\n     () n)))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn [n base]\n    (if (zero? n)\n        '(0)\n        (loop [acc '() n n]\n            (if (zero? n) acc (recur (cons (mod n base) acc) (quot n base))))))","problem":137,"user":"4f4ac35ae4b0d56e7bb92c18"},{"code":"(fn [n b]\n  (loop [n n\n         acc '()]\n    (if (zero? n)\n      (if (empty? acc) [0] acc)\n      (recur (quot n b) (conj acc (mod n b))))))","problem":137,"user":"50d93c53e4b0fd36a4b89223"},{"code":"(fn digits-for-base [n base]\n  (if (< n base)\n    [n]\n    (conj (digits-for-base (int (/ n base)) base) (mod n base))))","problem":137,"user":"524b0645e4b09eba1c0223bf"},{"code":"trampoline (fn t \n    ([n b] (t (quot n b) b [(rem n b)])) \n    ([n b c] (if (zero? n) c (fn [] (t (quot n b) b (cons (rem n b) c))))))","problem":137,"user":"4e8e8c24535d65386fec2143"},{"problem":137,"code":"(fn convert-to-base [n base]\n  (let [n' (quot n base)\n        r (mod n base)]\n    (if (zero? n')\n      [r]\n      (conj (convert-to-base n' base) r))))","user":"5666500ee4b0e91d5f5c566d"},{"problem":137,"code":"(fn ex\n  ([x base result]\n   (let [reminder (rem x base)\n         next-x (quot x base)]\n     (if (= 0 next-x)\n       (reverse (conj result reminder))\n       (ex next-x base (conj result reminder)))))\n  ([x base]\n   (ex x base [])))","user":"56504dc2e4b0284900eef6bc"},{"problem":137,"code":"(fn [n base]\n  (loop [digits ()\n         dividend n]\n     (let [remainder (mod dividend base)]\n       (if (< dividend base)\n         (conj digits dividend)\n         (recur \n           (conj digits remainder)\n           (/ (- dividend remainder) base))))))","user":"5794fd7be4b0e215f87e8476"},{"problem":137,"code":"(fn digits [n base]\n  (let [f (fn [[n _]]\n            [(quot n base) (rem n base)])]\n    (if (zero? n)\n      [0]\n      (vec (reverse (map second (take-while (fn [[a b]] (or (> a 0) (> b 0)))\n                                            (rest (iterate f [n nil])))))))))","user":"53e27bf1e4b036ad0777e3f2"},{"problem":137,"code":"(fn digits [x base]\n  (loop [res [] num x]\n    (if (= num 0)\n      (if (seq res) res [0])\n      (recur (cons (mod num base) res) (int (/ num base))) )))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn digits-and-bases [d b]\n  (loop [d d a '()]\n    (let [x (quot d b) ;; 9 / 2 -> 5\n          y (rem d b)] ;; 9 / 2 -> 1\n      (if (= x 0)\n        (conj a y)\n        (recur x (conj a y))))))","problem":137,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [num base]\n  (loop [n num res []]\n    (if (zero? n)\n      (if (empty? res) [0]  (vec res))\n      (recur (long (/ n base)) (cons (mod n base) res)))))","problem":137,"user":"4e8768f6535dceadca469850"},{"problem":137,"code":"(fn digitize [x base]\n  (if (= (quot x base) 0)\n    (vector (rem x base))\n    (conj (digitize (quot x base) base) (rem x base) )\n  ))","user":"5fb85760e4b03f550f44821b"},{"problem":137,"code":"(fn digits [n base]\n  (if (zero? n)\n    [0]\n    (mapv\n      #(mod (quot n %) base)\n      (reverse (take-while #(<= % n) (iterate #(* base %) 1))))))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":137,"code":"(fn digit-base [x b]\n  (loop [y (quot x b)\n         r (list (rem x b))]\n    (if (= 0 y)\n      r\n      (recur (quot y b)\n             (conj r (rem y b))))))","user":"5283a919e4b0239c8a67adbe"},{"code":"(fn tb [n b] (conj (if (< n b) [] (tb (quot n b) b)) (mod n b)))","problem":137,"user":"5034b0e1e4b062bc5d7ae167"},{"problem":137,"code":"#(if (zero? %1) (list 0) (reverse ((fn this [x base] (when (pos? x)  (cons (mod x base) (this (int (/ x base)) base)))) %1 %2)))","user":"4e68c434535d8ccf87e9fe89"},{"problem":137,"code":"(fn [n b]\n    ((fn [pn r]\n       (if (= 0 pn)\n         (if (empty? r)\n           [0]\n           r)\n         (recur (quot pn b) (cons (rem pn b) r)))) n '()))","user":"549cd548e4b0f3d1d8e70f91"},{"code":"(fn f [x b]\r\n  (if (> b x)\r\n    [x]\r\n    (conj (f (quot x b) b) (mod x b))))","problem":137,"user":"500d1db4e4b05f7c30cfa69f"},{"code":"(fn ansqq \n    ([n base] (ansqq n base []))\n    ([n base lis] (if (and (= n 0) (not (empty? lis))) (reverse lis)\n                      (ansqq (int (/ n base)) base (conj lis (rem n base)))\n                      ))                    \n    )","problem":137,"user":"4f2004a1535d64f6031464a7"},{"problem":137,"code":"(fn p\n  [n b]\n  (if (zero? n)\n    [0]\n    (reduce #(let [div (quot n %2)\n                   md (mod div b)]\n               (conj %1 md)) '()\n            (take-while #(<= % n) (iterate (partial * b) 1)))))","user":"56df7440e4b0ca2494a095fb"},{"problem":137,"code":"(fn [number base]\n  (loop [quotient number acc '()]\n    (if (zero? quotient)\n      (if (empty? acc) [0] acc)\n      (recur (quot quotient base) (conj acc (rem quotient base))))))","user":"5773f3a9e4b0979f896515f2"},{"code":"(fn to-base[a-num base]\n  (loop [val a-num values '()]\n      (let [last-digit (rem val base)\n\t        new-value (int (/ val base))\n\t\t\tnew-values (conj values last-digit)\n\t       ]\n\t\t   (if (= new-value 0)\n\t\t         new-values\n\t\t\t\t (recur new-value new-values)\n\t\t\t)\n\t   )\n  )\n)","problem":137,"user":"52763696e4b03e8d9a4a74d7"},{"code":"(fn [x base]\r\n   (if (zero? x) (vector 0) \r\n   (loop [x x base base ret '()]\r\n     (if (zero? x) ret\r\n       (recur (quot x base) base (conj ret (mod x base)))))))","problem":137,"user":"503354c3e4b0c6c1199c710c"},{"code":"(fn to-base \n    ([n b] (if (zero? n) [0] (to-base n b [])))\n    ([n b a]\n     (if (zero? n) a\n       (recur (int (/ n b)) b (cons (mod n b) a)))))","problem":137,"user":"51e58e02e4b0efabf93c02d0"},{"problem":137,"code":"(fn [b d] (if (zero? b) [0] (reverse (map #(mod % d) (take-while (complement zero?) (iterate #(quot % d) b))))))","user":"5f2c02d1e4b033932238a65f"},{"code":"(fn ba\n  [num base]\n  (vec ((fn bain [i o]\n           (if (< i base) \n           (conj o i)\n            (recur (int (/ i base))  (conj o (rem i base)))))\n    \t\t\tnum ())))","problem":137,"user":"5101192ae4b0bef64c30e266"},{"problem":137,"code":"(fn digits-base [n base] \n  (let [q (quot n base)]\n    (if (zero? q)\n      [(rem n base)]\n      (flatten [(digits-base q base) (rem n base)]))))","user":"5b77d3c8e4b047b03b2036f1"},{"problem":137,"code":"(fn p [a b]\n  (loop [n a res ()]\n    (if (zero? n) (cons 0 res)\n      (if (< n b) (cons n res)\n        (recur (quot n b) (cons (rem n b) res))))))","user":"56fc1bc7e4b07572ad1a88dd"},{"problem":137,"code":"(fn [n b]\n  (loop [n n b b ret '()]\n    (if (= 0 n)\n      (if (empty? ret)\n        '(0)\n        ret)\n      (recur (quot n b) b (cons (rem n b) ret)))))","user":"5d81b40ce4b0915913b1d379"},{"code":"(fn foo [n r]\n  (if (zero? n)\n    [0]\n    (let [digits (long (/ (Math/log n) (Math/log r)))]\n      (loop [n n\n             t (take (inc digits) (iterate #(/ % r) (long (Math/pow r digits))))\n             v []]\n        (if (seq t)\n          (let [x (first t)\n                q (quot n x)\n                rm (mod n x)]\n            (recur rm\n                   (rest t)\n                   (conj v q)))\n          v)))))","problem":137,"user":"4f301d02e4b0d6649770a072"},{"code":"(fn f [a b]\n  (if (= a 0) '(0) (loop [ans '() aa a]\n    (if (= aa 0) ans\n      (recur (conj ans (rem aa b)) (quot aa b))))))","problem":137,"user":"52196842e4b0890f2f822bfa"},{"code":"(fn convert-base\n  [n base]\n  (letfn [(step [n base] \n            (if (= 0 n) [nil]\n            (if (= 1 n) [1]\n              (lazy-seq\n              (cons (mod n base) \n                    (step (quot n base) base))))))]\n         (remove nil? (if (= 0 n) [0] (reverse (step n base))))))","problem":137,"user":"4edf5dc6535d10e5ff6f5340"},{"problem":137,"code":"(fn convert\n  [num base]\n  (if (= num 0) '(0)\n    (loop [actual num coll '()]\n      (if (pos? actual)\n        (recur (long (/ actual base))\n               (conj coll (mod actual base)))\n       coll))))","user":"5d0153f9e4b0cc9c915881aa"},{"problem":137,"code":"(fn [n base]\n  (if (zero? n)\n    '(0)\n  \t(loop [n n digits ()]\n      (if (zero? n)\n        digits\n        (recur (quot n base)\n               (conj digits (mod n base)))))))","user":"55c68089e4b0e31453f649c4"},{"problem":137,"code":"(fn func [num base]\n  (if (= 0 num) \n    [0]\n    (letfn [(get-base-digits\n              [num base]\n              (if (= 0 num)\n                []\n                (conj \n                 (get-base-digits (quot num base) base)\n                 (mod num base))))]\n      (get-base-digits num base))))","user":"5e805895e4b085ba37836e44"},{"problem":137,"code":"(fn [num base]\n    (letfn [(step [num base]\n              (concat\n                (if (zero? (quot num base))\n                  []\n                  (step (quot num base) base))\n                [(mod num base)]))]\n      (step num base)))","user":"5481be5fe4b0e286459a1172"},{"problem":137,"code":"(fn digits->bases [n b]                                                                                             \n  (if (= n 0) [0]                                                                                                     \n    (letfn [(get-coeff [{nn :nn, coeffs :coeffs, k :k}]                                                               \n              (let [*k (* k b)                                                                                        \n                    r (mod nn *k)                                                                                     \n                    *coeffs (cons (long (/ r k)) coeffs)]                                                             \n                {:nn (- nn r), :coeffs *coeffs, :k *k}))]                                                             \n      (->> {:nn n, :coeffs [], :k 1}                                                                                  \n        (iterate get-coeff)                                                                                           \n        (drop-while (fn [{nn :nn}] (not= nn 0)))                                                                      \n        first :coeffs))))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"code":"(fn [n b]\n  (->>\n   [0 n]\n   (iterate (fn[[r x]][(rem x b) (quot x b)]))\n   (take-while (fn[[r x]](or (not= r 0)(> x 0))))\n   (map first)\n   (#(if (> (count %) 0) (drop 1 %) [0])) \n   (reverse)))","problem":137,"user":"52f818a6e4b047fd55836fcc"},{"problem":137,"code":"(fn [num base]\n        (loop [q (quot num base) r (rem num base) ret [r]]\n          (println q r ret)\n          (if (zero? q) (reverse ret)\n              (recur (quot q base) (rem q base) (conj ret (rem q base))))))","user":"55d74e71e4b0e31453f64aa4"},{"problem":137,"code":"(fn [n b]\n(loop [n n c ()]\n(if (= 0 n)\n(if (empty? c) [0] c)\n(recur (int (/ n b)) (conj c (mod n b))))))","user":"5fd10010e4b07e53c2f3f02a"},{"code":"(fn [x b]\n  (\n    (fn base [y] \n      (if (< y b) \n        [y] \n        (conj (base (int (/ y b))) (rem y b))\n      )\n    )\n    x\n  )\n)","problem":137,"user":"4f84400de4b033992c121c2e"},{"code":"(fn encode [p base] (or (seq (into () (map #(mod (quot p %) base)  \n                             (take-while #(< 0 (quot p %)) (iterate #(* base %) 1) )))) [0] ))","problem":137,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn [n b]\n  (if (zero? n)\n    [0]\n    (loop [n n r '()]\n      (if (pos? n)\n        (recur (quot n b) (conj r (rem n b)))\n        r))))","problem":137,"user":"4ddbfb8a535d02782fcbea00"},{"problem":137,"code":"(fn f [x b]\n  (if (< x b) [x]\n    (conj (f (int (/ x b)) b) (mod x b))))","user":"4f5eda39e4b0030a34fb2b56"},{"code":"(fn digits-in-base [n base]\n\t(letfn [\n\t\t(digits- [n]\n\t\t\t(if \n\t\t\t\t(zero? n)\n\t\t\t\t[]\n\t\t\t\t(cons \n\t\t\t\t\t(rem n base)\n\t\t\t\t\t(lazy-seq (digits- (quot n base))))\n\t\t\t)\n\t\t)]\n\t\t(if \n\t\t\t(zero? n) \n\t\t\t[0] \n\t\t\t(reverse (digits- n))\n\t\t)\n\t)\n)","problem":137,"user":"52f10094e4b05e3f0be25ee8"},{"code":"(fn _\n   ([n b] (_ n b []))\n   ([n b r]\n     (let [rd (int (Math/floor (/ n b)))\n           rm (rem n b)\n           r (cons rm r)]\n       (if (zero? rd)\n         r\n         (_ rd b r)))))","problem":137,"user":"50f48298e4b004d364930527"},{"problem":137,"code":"(fn [i-v base]\n  (loop [agg () v i-v]\n    (if (< v base)\n      (cons v agg)\n      (let [d (mod v base)\n            rest (/ (- v d) base)]\n        (recur (cons d agg) rest)))))","user":"567d132ee4b05957ce8c61c3"},{"problem":137,"code":"(fn ! [n b] (if (< n b) [n] (conj (! (quot n b) b) (rem n b))))","user":"53908e6be4b0b51d73faae9a"},{"code":"#(if (< %1 %2) [%1] (loop [n %1 r []] (if (= 0 n) r (recur (quot n %2) (cons (mod n %2) r)))))","problem":137,"user":"4effb663535dcb61093f6a2e"},{"code":"(fn [num base]\r\n  (loop [acc [] n num]\r\n    (if (< n base)\r\n      (reverse (conj acc n))\r\n      (let [r (rem n base)]\r\n        (recur (conj acc r) (/ (- n r) base))))))","problem":137,"user":"4dc97aec535d5973398f9284"},{"code":"(fn [n r]\n  (loop [n n d ()]\n    (if (< n r) (conj d n)\n        (recur (quot n r) (conj d (rem n r))))))","problem":137,"user":"51a4416ae4b0def3c5c5868c"},{"problem":137,"code":"#(loop [rest %1 result []] (if (= 0 rest) (if (empty? result) [0] (reverse result)) (recur (quot rest %2) (conj result (mod rest %2)))))","user":"56a75810e4b0542e1f8d14fc"},{"code":"(fn [n b] \n  (if (zero? n) '(0)\n  (reduce conj '() (map #(mod % b) (take-while pos? (iterate #(int (/ % b)) n))))))","problem":137,"user":"4fb2101ce4b081705acca284"},{"problem":137,"code":"(fn [num base]\n  (letfn [(step [num base]\n    (concat\n      (if (zero? (quot num base)) [] (step (quot num base) base))\n      [(mod num base)]))]\n(step num base)))","user":"5ae0976be4b0837691e92c43"},{"code":"(fn digits-base-by [n base]\n  (loop [n n r []]\n    (if (< n base)\n      (cons n r)\n      (recur (quot n base) (cons (rem n base) r)))))","problem":137,"user":"4fdf566fe4b05e33b9224f99"},{"code":"(fn\n    [number base]\n    (loop [result []\n           num number]\n      (if (< num base)\n        (cons num result)\n        (recur (cons (mod num base) result)\n               (quot num base)))))","problem":137,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":137,"code":"(fn [n b]\n  (loop [n n acc ()]\n    (cond\n      (and (zero? n) (empty? acc)) [0]\n      (zero? n) acc\n      :else (recur (quot n b) (conj acc (mod n b))))))","user":"5cc6b4bfe4b0ccb061962827"},{"code":"(fn [n base]\n  (if (zero? n)\n    [0]\n    (loop [n n, acc []]\n      (if (zero? n)\n        acc\n        (recur (quot n base)\n               (cons (rem n base) acc))))))","problem":137,"user":"4daec9dcedd6309eace4d15f"},{"code":"(fn digits-in-base [num b]\n   (loop [digits '()\n          n num]\n     (let [new-digit (rem n b)\n           new-n (quot n b)]\n       (if (= 0 new-n)\n         (conj digits new-digit)\n         (recur (conj digits new-digit)\n                new-n)))))","problem":137,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":137,"code":"(fn di\n  ([v d]\n    (di v d []))\n  ([v d l]\n   (if (< v d) (cons v l)\n               (recur (quot v d) d (cons (rem v d) l)))))","user":"54a11042e4b09f271ff37c49"},{"problem":137,"code":"(fn [n base]\n  (loop [reduced  (quot n base)\n         result   (list (mod n base))]\n    (if (zero? reduced)\n      (vec result)\n      (recur (quot reduced base)\n             (conj result \n                   (mod reduced base))))))","user":"5564cad5e4b0c656e3ff180f"},{"code":"#(loop [n % r %2 d '()] (let [q (mod n r) x (quot (- n q) r) y (conj d q)] (if (= x 0) y (recur x r y))))","problem":137,"user":"4e9a8c0e535dbda64a6f6b72"},{"code":"(fn [n b]\n  (if (zero? n) '(0)\n    ((fn [n b acc]\n      (if (zero? n) acc\n        (recur (int (/ n b)) b (cons (rem n b) acc))))\n      n b '())))","problem":137,"user":"51cdd3f0e4b0e42293a2254b"},{"problem":137,"code":"(fn [n b]\n  (loop [n n\n         acc '()]\n    (if (zero? n)\n      (if (empty? acc) '(0) acc)\n      (recur (quot n b) (conj acc (rem n b))))))","user":"530e75d5e4b08068f379ecba"}]