[{"code":"(vec (range 1 6))","problem":51,"user":"4e8ad1d2535d65386fec2110"},{"problem":51,"code":"`(1 2 3 4 5)","user":"4fabbd3ee4b081705acca21e"},{"code":"( list 1 2 3 4 5)","problem":51,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(take 5 (range 1 10))","problem":51,"user":"52baefbae4b07a9af57922da"},{"problem":51,"code":"[ 1  2 3 4 5]","user":"5854580ce4b07779d46863f9"},{"problem":51,"code":"[1 2 '3 4 5]","user":"54bec835e4b0ed20f4ff6ef7"},{"code":"'( 1 2 3 4 5 )","problem":51,"user":"51c19873e4b0d204dbe2ca0d"},{"code":"(map inc (range 5))","problem":51,"user":"5202cfe7e4b030ee0c5b2702"},{"code":"[1,2,3,4,5]","problem":51,"user":"511d11d7e4b022853b0e079f"},{"problem":51,"code":"(into [] (map inc (range 5)))","user":"56f974c0e4b07572ad1a88b1"},{"problem":51,"code":"[1 2 3 4 5]\n; & 代表赋值coll里边剩余的部分\n; :as 后边代表赋值coll里边所有的部分","user":"5cd4e1b2e4b0ccb061962927"},{"code":"(apply vector (range 1 6))","problem":51,"user":"523b82efe4b07becd5be21f0"},{"code":"(range 1 (inc 5))","problem":51,"user":"4f047c07535dcb61093f6bcd"},{"code":"'(1 2 3 4 5)","problem":51,"user":"4de2f44f535d08e6dec9fdec"},{"problem":51,"code":"[1  2 3 4 5]","user":"4e617114535d8ccf87e9fe5b"},{"problem":51,"code":"[(inc 0) (dec 3) 3 4 5]","user":"54897284e4b0e286459a11e6"},{"problem":51,"code":"(vec (range 1 (inc 5)))","user":"552356fae4b0882d96d091af"},{"code":"[1, 2, 3, 4, 5]","problem":51,"user":"525b12b1e4b0cb4875a45d04"},{"problem":51,"code":"'(1 2 3 4 5);(range 1 6)","user":"57ee41a6e4b0bfb2137f5baf"},{"problem":51,"code":"[1 2 3 4 5]\n;(let [[a b & c :as d] [1 2 3 4 5]] [a b c d])","user":"5797d3d2e4b039eba2ecb106"},{"problem":51,"code":"(map inc (take 5 (range)))","user":"5465712ee4b01be26fd746dc"},{"code":"[1 2 3 4 5 ]","problem":51,"user":"503b6995e4b07a1917cc34dd"},{"problem":51,"code":"((comp (partial drop 1) vec range) 6)","user":"54af220ce4b09f271ff37d02"},{"problem":51,"code":"(rest (range 6))","user":"555da2c4e4b0a2eb076a39ae"},{"code":"(do \"That's the kind of code an idiot would have on his luggage\"\n    [1 2 3 4 5])","problem":51,"user":"4fa6d532e4b081705acca1be"},{"code":"'( 1 2 3 4 5)","problem":51,"user":"527675cbe4b03e8d9a4a74e2"},{"code":"[1 2 3 4  5]","problem":51,"user":"529ce629e4b04e0c58e87b6e"},{"problem":51,"code":"[1 2 3 4 5]\n\n;; as:","user":"53be3ee7e4b0d9a98559a6df"},{"problem":51,"code":"[1 2 3 4 5\n]","user":"52824143e4b0757a1b171453"},{"code":"[1 2 3 4 5]","problem":51,"user":"4dc986d0535d5973398f9285"},{"problem":51,"code":"'(1 2 3 4 5 )","user":"598085e6e4b021a7a535fdd3"},{"problem":51,"code":"(take 5 (rest (range)))","user":"5589a941e4b059ccff29b207"},{"problem":51,"code":"'(1 2  3 4 5)","user":"53f1c05ee4b0742d9025b0e1"},{"problem":51,"code":"[1 2 3 4 5]\n;;(let [[a b & c :as d] [1 2 3 4 5]] [a b c d])","user":"58566b42e4b0f14aab7c86f4"},{"problem":51,"code":";; a - 1\n;; b - 2\n;; c - [3 4 5]\n;; d - [1 2 3 4 5]\n[1 2 3 4 5]","user":"5843b231e4b089d5ab817e3d"},{"code":"(drop 1 (take 6 (range)))","problem":51,"user":"4e6a73d0535d8ccf87e9fee7"},{"problem":51,"code":"(flatten [1 2 [3 4 5]])","user":"5de65feee4b0986d99407f68"},{"problem":51,"code":"; a = 1\n; b = 2\n; c = [3 4 5]\n; d = [1 2 3 4 5]\n[1 2 3 4 5]","user":"5542011fe4b0a04f79299516"},{"code":"[ 1 2 3 4 5]","problem":51,"user":"4deff9f9535d08e6dec9fe15"},{"code":"(drop 1 (range 6))","problem":51,"user":"4f463dfde4b0d56e7bb92b99"},{"problem":51,"code":"[1 2  3 4 5]","user":"598a0072e4b021a7a535fed9"},{"code":"(list 1 2 3 4 5)","problem":51,"user":"4fbcbd50e4b081705acca2f9"},{"problem":51,"code":"nil, a 1, b 2, c [3 4 5], d [1 2 3 4 5]","user":"568513c4e4b04eec3ec5cfc5"},{"problem":51,"code":";:as names the group you just destructured.\n\n[1 2 3 4 5]","user":"56193c6ee4b053970a773af2"},{"code":";The :as keyword can be used to retain access to \n;the entire collection that is being destructured.\n[1 2 3 4 5]","problem":51,"user":"501c1492e4b086d93747d180"},{"problem":51,"code":"[1 2 3 4 5] ;; d would bound the whole thing, c is bind to (drop 2 ) of the string","user":"54a1d643e4b09f271ff37c50"},{"problem":51,"code":"[1 2 3 4 5]\n\n;(range 1 6)","user":"572830e6e4b0c5bde472c152"},{"code":";; a binds to 1\n;; b binds to 2\n;; & c binds c to the rest of the sequence which is [3 4 5]\n;; :as d will bind d to the entire sequence which is [1 2 3 4 5]\n[1 2 3 4 5]","problem":51,"user":"50955676e4b087f34d351ab1"},{"code":"'[1 2 3 4 5]","problem":51,"user":"504e397ee4b0f6ff3350c485"},{"problem":51,"code":"[1 2 3  4 5 ]","user":"5c52fa3ce4b0fb8c5ffd99eb"},{"problem":51,"code":"(into [] (range 1 6))","user":"55c49394e4b0e31453f6499e"},{"problem":51,"code":"(range 1  6)","user":"5579bc24e4b05c286339e098"},{"code":"(take 5 (iterate inc 1))","problem":51,"user":"4e5ecd65535d8a8b8723a2d6"},{"code":"(range 1 6 1)","problem":51,"user":"5151c184e4b03e678e393add"},{"problem":51,"code":"[1 2 3 4 5  ]","user":"57b55290e4b0fbc9809a27a9"},{"code":"[1, 2, 3 4 5]","problem":51,"user":"508bf05ae4b0f17d83ea26aa"},{"problem":51,"code":"(map #(+ 1 %) (range 5))","user":"53bd7080e4b0d9a98559a6d1"},{"code":"(take 5 (drop 1 (range)))","problem":51,"user":"4ee4f4a9535d1385b2869d85"},{"code":"(take 5 (map inc (range)))","problem":51,"user":"4dd023dd535d5973398f92ad"},{"problem":51,"code":"[1 2 [3 4 5] [1 2 3 4 5]]\n                                   c (first c)\n                                   d (last d)","user":"5a66f358e4b0512ff01cd9d5"},{"code":"( range 1 6 )","problem":51,"user":"50bf7b72e4b0ffd967a66cc1"},{"problem":51,"code":"[1\n 2\n 3\n 4\n 5]","user":"59fcc31fe4b01bb0ae8afcef"},{"code":"[ 1 2 3 4 5 ]","problem":51,"user":"4e7e05a6535db169f9c796fe"},{"code":"(range 1 6)","problem":51,"user":"4dcc5aff535d5973398f9293"},{"problem":51,"code":"(vec (drop 1 (range 6)))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":51,"code":";; that \":as grabs everything to its left and stuffs\n;; it into the righthand symbol\" didn't quite make\n;; intuitive sense to me right off the bat...\n[1 2 3 4 5]","user":"5fb68f09e4b08cb800c85b58"}]