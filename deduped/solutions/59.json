[{"problem":59,"code":"(fn ha [& funcs]\n  (fn [& args]\n    (for [i funcs]\n      (let [_ (println i)]\n      (apply i args)))))","user":"5705e404e4b0b0fb43fd0676"},{"problem":59,"code":"(fn ju\n    ([f g] \n      (fn\n        ([x] (flatten [(f x) (g x)]))\n        ([x & xs] (flatten [(apply f x xs) (apply g x xs)]))\n      ))\n    ([f g & fns]  (reduce ju (list* f g fns))) \n  )","user":"570d0548e4b0b0fb43fd06d2"},{"problem":59,"code":"(fn [& funs] \n    (fn [& args] \n        (map #(apply % args) funs)\n    )\n)","user":"580c8fcee4b0849f6811b721"},{"code":"(fn [& fxs]\r\n    (fn [& args]\r\n        (map #(apply % args) fxs)))","problem":59,"user":"4e2f9e71535deb9a81d77f11"},{"code":"(fn jx[& flst]\n    (fn [& coll]\n        (map #(apply % coll) flst)))","problem":59,"user":"52bc6cb2e4b07a9af57922f5"},{"code":"(fn jux [& funcs] \n  (fn [& args] \n    (map #(apply % args) funcs)))","problem":59,"user":"525aa499e4b0cb4875a45cf7"},{"code":"(fn [& funcs]\n               (fn [& xs] (map #(apply % xs) funcs)))","problem":59,"user":"509e62a8e4b08df8156e9e2e"},{"code":"#(fn [& args] (for [x %&] (apply x args)))","problem":59,"user":"506ba58be4b0eda3100c090b"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"56c60b36e4b05cc29241eead"},{"problem":59,"code":"(fn [& funs]\n   (fn [& args]\n     (map #(apply %1 args) funs)))","user":"54be7772e4b0ed20f4ff6eea"},{"code":"(fn [& funcs]\n   (fn [& args]\n     (for [f funcs] (apply f args))))","problem":59,"user":"511623cbe4b0d4f670fd2fe1"},{"code":"(fn [& fs] (fn [& gs] (map #(apply % gs) fs)))","problem":59,"user":"5071b614e4b0e3170b5a867d"},{"problem":59,"code":"(fn j [& f] (fn [& x] (map #(apply % x) f)))","user":"57ccedaae4b0c746388ab88e"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& args] (map #(apply % args) fs)))","user":"5d1b2b7de4b02ea6f0fb697a"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (mapv #(apply % args) fs)))","user":"4eda8d7c535d10e5ff6f530f"},{"problem":59,"code":"(fn juxt' [& fns] (fn [& args] (map #(apply % args) fns)))","user":"5ce56455e4b0a17bb84e2b71"},{"code":"(fn myjuxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"50c84ba2e4b00bb60fe0c53e"},{"problem":59,"code":";; Mfikes solution way better than mine\n(fn my-juxt [& fs]\n  (fn [& xs]\n    (mapv (fn [f] (apply f xs)) fs)))","user":"571c2babe4b07c98581c3b73"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs)))","user":"54bdcde5e4b0ed20f4ff6ee5"},{"problem":59,"code":"(fn [& functions]\n  (fn [& values]\n    (map #(apply % values)\n    functions)))","user":"552d2e4fe4b076ab5578f7e1"},{"code":"(fn myJuxt\n  [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"509a25b7e4b0efbae1fbc0a8"},{"code":"(fn my-juxt \n  ([f]\n    (fn \n      ([] [(f)])\n      ([x][(f x)])\n      ([x & y] [(apply f (list* x y))])))\n  ([f & g ]\n    (let [g (list* f g)]\n      (fn\n        ([] (reduce #(conj %1 (%2)) [] g))\n        ([x ] (reduce #(conj %1 (%2 x)) [] g))\n        ([x & y]\n          (let [y (list* x y)]\n            (reduce #(conj %1 (apply %2 y)) [] g)))))))","problem":59,"user":"5273562ae4b03e8d9a4a7479"},{"code":"(fn my-juxt\n  ([f]\n   (fn [] (f))\n   (fn [x] (f x))\n   (fn [x & xs] (apply f x xs)))\n  ([f g]\n   (fn [] (list (f) (g)))\n   (fn [x] (list (f x) (g x)))\n   (fn [x & xs] (list (apply f x xs) (apply g x xs))))\n  ([f g & hs]\n   (fn [] (list (f) (g)))\n   (fn [x] (concat [(f x) (g x)]\n                   (for [h hs]\n                     (h x))))\n   (fn [x & xs] \n     (concat [(apply f x xs) (apply g x xs)]\n             (map #(apply % x xs) hs)))))","problem":59,"user":"5054c853e4b0b1b9d1860eb3"},{"code":"(fn own-juxt [& fns]\n  (fn\n    [& args]\n    (loop [result [], funs fns]\n      (if (empty? funs)\n        result\n      \t(recur (conj result (apply (first funs) args)) (rest funs))))))","problem":59,"user":"52cf084ce4b07d0d72b27399"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce\n      (fn [result func]\n        (conj result (apply func args)))\n      []\n      funcs)))","user":"549e5e52e4b0f3d1d8e70f9e"},{"code":"(fn [& fns]\r\n    (fn [& args]\r\n      (map #(apply % args) fns)))","problem":59,"user":"508b95a0e4b0be79e5b189c6"},{"problem":59,"code":"(fn myjuxt [& fns]               \n  (fn [& cs]                     \n    (map #(apply % cs) fns)))","user":"50573ed8e4b0012181721987"},{"problem":59,"code":"(fn jxt [& fs] (fn [& a] (map #(apply % a) fs)))","user":"53ce4cd4e4b00fb29b2212ef"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [acc fun] (conj acc (apply fun args))) [] fns))\n  )","user":"5b85221ce4b047b03b2037c8"},{"problem":59,"code":"(fn [& fargs]\n        (fn [& cargs]\n          (map #(apply % cargs) fargs)))","user":"537e104ce4b06839e8705e9a"},{"problem":59,"code":"(fn [& fns]\n    (fn [& paras]\n      (map #(apply % paras)\n           fns)))","user":"5808ee16e4b0a837a8b30d16"},{"code":"(fn [& f]\n  #(for [f f]\n     (apply f %&)))","problem":59,"user":"522b922ee4b0d34ee08e71c3"},{"problem":59,"code":"(fn new-juxt\n  [& fs]\n  (fn [& args] (vec (map #(apply % args) fs))))","user":"550d9452e4b06e50f9beb15d"},{"problem":59,"code":"(fn [& fns]\n\t(fn [& args]\n\t\t(map #(apply % args) fns)\n\t)\n)","user":"5409f8eae4b0addc1aec66e6"},{"problem":59,"code":"(fn [& x]\n  (fn [& y]\n    (vec (map #(apply % y) x))))","user":"56ac81ace4b03c432f187347"},{"problem":59,"code":"(fn jux [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","user":"5143824ae4b0b4fb4ace5f36"},{"code":"(fn jux [& functions]\n  (fn [& args]\n    (map\n      (fn [f] (apply f args))\n      functions)))","problem":59,"user":"5201ada5e4b0b2e020a18f14"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args] \n    (mapv (fn [f] (apply f args)) funcs)))","user":"59c94a69e4b0a024fb6ae576"},{"problem":59,"code":"(fn juxy [& fns]\n   (fn [& args]\n     (loop [remainder fns result []]\n       (if (empty? remainder)\n         result\n         (recur (rest remainder) (conj result (apply (first remainder) args)))))))","user":"56427910e4b08d4f616f5f19"},{"code":"(fn [& args]\n  (fn [& iargs]\n    (for [f args]\n      (apply f iargs))))","problem":59,"user":"5098f5d6e4b0cae2931060a4"},{"problem":59,"code":"(fn [& fns]\n    (fn [& coll]\n      (map (fn [f] (apply f coll)) fns)\n      )\n    )","user":"5f06caa7e4b0cf489e8d7f52"},{"problem":59,"code":"(fn jxt\n  [& fns]\n  (fn [& args]\n    (mapv #(apply % args) fns)))","user":"5d609ddde4b0c9e5857d5008"},{"code":"(fn[& F]#(map(fn[f](apply f%&))F))","problem":59,"user":"4dd66da7535d2dad7130b5c8"},{"code":"(fn [& fs]\n  (fn [& args] (map\n    #(apply % args)  fs)))","problem":59,"user":"4f1abbfb535d64f60314646e"},{"problem":59,"code":"(fn tt [& fns]\n  (fn [& x] (map (fn [f] (apply f x)) fns)))","user":"599342efe4b0b211ea3aaab0"},{"problem":59,"code":"(fn my-juxt\n  [& fs]\n  (fn [& fargs]\n    (reverse (reduce (fn [acc f]\n                       (conj acc (apply f fargs)))\n                     ()\n                     fs))))","user":"5d53a59ae4b0776584bd6f72"},{"code":"(fn [& funs]\n    (fn [& args]\n      (map (fn [f](apply f args)) funs)))","problem":59,"user":"4e6ea1f5535d5021c1a8960e"},{"problem":59,"code":"(fn myjuxt[& f]\n  (fn [& b]\n    (map #(apply % b) f)))","user":"57bd960fe4b05aa3c4741c52"},{"code":"(fn[& f] (fn [& a] (map #(apply % a) f)))","problem":59,"user":"4ddbd934535d02782fcbe9fc"},{"problem":59,"code":"(fn [& fs]\n  (fn [& rs] (map #(apply % rs) fs)))","user":"56b6e354e4b0982f16b37e41"},{"problem":59,"code":"(fn [& x]\n    (fn [& args]\n      (loop [in (reverse x)\n             out '()]\n        (if (empty? in)\n          out\n          (recur (rest in)\n                 (conj out (apply (first in) args)))))))","user":"56171eade4b06b1bb2182a0c"},{"code":"(fn [& Φ] #(seq (for [f Φ] (apply f %&))))","problem":59,"user":"52b5edd1e4b0c58976d9ad3c"},{"code":"(fn [& fs] (fn [& x] (map #(apply %1 x) fs)))","problem":59,"user":"4e14108c535d04ed9115e7dd"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (mapv (fn [f] (apply f args)) fs)))","user":"58949f8de4b00487982d525e"},{"problem":59,"code":"(fn juxtaposition\n  [& fns]\n  (fn [& params]\n    (map (fn [f] (apply f params)) fns)))","user":"604a30c6e4b02d28681c77f0"},{"code":"(fn jux [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4e6defcc535d5021c1a895f8"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [acc f] (conj acc (apply f args))) [] fs)\n    ))","user":"57efb389e4b0bfb2137f5bdb"},{"code":"(fn [& fs] #(for [f fs] (apply f %&)))","problem":59,"user":"4ec5aa1f535d6d7199dd36b0"},{"code":"(fn [& fs]\n  (fn[& args]\n     (map #(apply % args) fs)))","problem":59,"user":"4e860e85535db62dc21a62f1"},{"problem":59,"code":"(fn juxt'\n  [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","user":"540b2dcbe4b0addc1aec66f4"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce\n     (fn [s f]\n       (concat s [(apply f args)]))\n     []\n     fs)))","user":"5cf6522be4b0b71b1d808a58"},{"code":"(fn newjuxt [& fs]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs)))","problem":59,"user":"4ddb339c535d02782fcbe9f9"},{"problem":59,"code":"(fn juxtapose [& fns]\n  (fn [& x]\n    (map #(apply % x) fns)\n    )\n  )","user":"57b9d21fe4b0fbc9809a27f7"},{"problem":59,"code":"(fn \n  [& functions]\n  (fn [& arguments]\n  (map #(apply % arguments) functions)))","user":"57e139f6e4b0bfb2137f5a6c"},{"code":"(fn [& funcs]\n    (fn [& args]\n      (map #(apply % args) funcs)))","problem":59,"user":"525ed5f4e4b0cb4875a45db8"},{"problem":59,"code":"(fn j [& fs] \n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"541b37d2e4b01498b1a71a64"},{"problem":59,"code":"(fn [& fns]\n  (fn [& coll]\n  \t(map (fn [a-fn] (apply a-fn coll)) fns)))","user":"5f247827e4b0f565ad998292"},{"code":"(fn __ [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4fa719c0e4b081705acca1bf"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (into []  (map #(apply % xs) fns))))","problem":59,"user":"4fdf566fe4b05e33b9224f99"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& v]\n      (reduce (fn [acc cur]\n                (conj acc (apply cur v)))\n              [] funcs)))","user":"5fa80c01e4b0fa27300f3de2"},{"code":"(fn [& fs] (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4e0e0529535d04ed9115e7b9"},{"code":"(fn  [f1 & fs] \n\t(let [fm (list* f1 fs)]\n\t\t(fn [ & args] \n\t\t\t(letfn [ (wit [result  fs ] \n\t\t\t\t(if fs\n\t\t\t\t\t(wit (conj result  (apply (first fs) args) ) (next fs))\n\t\t\t\t\tresult  ) )]\n\t\t\t\t\t(wit [] fm) ))))","problem":59,"user":"518644bce4b0da5a5be3baca"},{"code":"(fn [& fs]\n  (fn [& args]\n      (vec (map #(apply % args) fs))))","problem":59,"user":"4f890488e4b033992c121c76"},{"code":"(fn [& fs]\n  (fn [& more]\n    (map #(apply % more) fs)))","problem":59,"user":"4fbef9a6e4b081705acca316"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& params]\n      (reduce #(conj % (apply %2 params)) [(apply (first funcs) params)] (rest funcs))\n      ))","user":"583f1533e4b089d5ab817dc8"},{"problem":59,"code":"(fn [& fargs]\n  (fn [& args]\n    (map #(apply % args) fargs)))","user":"5360f043e4b0243289761e3c"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"5a188be3e4b0ff51aa4b31ec"},{"problem":59,"code":"(fn juxting [& funcs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args))\n            []\n            funcs)))","user":"54084784e4b0addc1aec66c9"},{"code":"(fn [& fs] \n  (fn [& a] (for [f fs] (apply f a))))","problem":59,"user":"4f9120d8e4b0dcca54ed6c96"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args)) fs)))","user":"57023e92e4b08d47c97781da"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (loop [fun funcs \n           resp []]\n      (if (= fun [])\n        resp\n        (recur (rest fun) (conj resp (apply (first fun) args)))))))","user":"574f1c24e4b02ea114799255"},{"problem":59,"code":"(fn [ & fns]\n  (fn [ & args]\n    (for [i fns]\n      (apply i args))))","user":"598588f2e4b021a7a535fe65"},{"problem":59,"code":"(fn juxt1 [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"60460824e4b02d28681c77bc"},{"code":"(fn [& fns]\n   (fn [& a]\n       (loop [[f & fs] fns, res []]\n           (if (nil? f) res\n               (recur fs (conj res (apply f a)))))))","problem":59,"user":"53300924e4b019098a6f8b55"},{"code":"(fn [& fns]\n  (fn [& args]\n\t(map #(apply % args) fns)))","problem":59,"user":"52382dd6e4b0fae3832e99f1"},{"code":"(fn [& ff] #(for [f ff] (apply f %&)))","problem":59,"user":"530cb5b8e4b02e82168697e0"},{"code":"(fn [& f]\n  (fn [ & l]\n    (map #(apply % l) f)\n    ))","problem":59,"user":"52bb27fee4b07a9af57922df"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [f fs rt []]\n      (if f\n        (recur (next f) (conj rt (apply (first f) args)))\n        rt))))","user":"5243e37ae4b076204b44fae3"},{"problem":59,"code":"(fn [& fs]\n  (fn [& vs] (for [f fs] (apply f vs))))","user":"5921a080e4b09b4ee5954c77"},{"problem":59,"code":"(fn p59 [& fcns]\n  (fn p59b [& coll]\n    (map #(apply % coll) fcns)\n    )\n  )","user":"5400e918e4b0de5c41848619"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (loop [final [] [f & r] fs]\n      (if (nil? f)\n        final\n        (recur (conj final (apply f args))\n               r)))))","user":"567c7fefe4b05957ce8c61bc"},{"problem":59,"code":"(fn my-juxt [& fs]\n     (fn [& xs]\n       (map #(apply % xs)\n            fs)))","user":"5ef8e9e0e4b09b61f08553cb"},{"problem":59,"code":"(fn [& funcs]\n          (fn [& args]\n            (loop [flist funcs\n                   result []]\n              ;; (prn \"flist\" flist \"result\" result)\n              (let [[func & remaining-funcs] flist\n                     new-result (conj result (apply func args))]\n                ;; (prn \"remaining-funcs\" remaining-funcs \"new-results\" new-result)\n                (if (empty? remaining-funcs)\n                  new-result\n                  (recur remaining-funcs new-result))\n                ))))","user":"57fc0719e4b0d3187e900987"},{"problem":59,"code":"(fn my-juxt [& x]\n  (fn f* [& y]\n   (map #(apply % y) x)))","user":"592fa9f8e4b072a2710fcfcb"},{"code":"(fn [& fns]\r\n  (fn [& args]\r\n    (map #(apply % args) fns)))","problem":59,"user":"4e8681b7535dae1a5effa438"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map #(apply %1 args) funcs)))","problem":59,"user":"50812debe4b01a93d3f38e4c"},{"code":"(fn ([f g] (fn ([x] [(f x) (g x)])))\r\n    ([f g h] (fn\r\n                ([x] [(f x) (g x) (h x)])\r\n                ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)]))))","problem":59,"user":"4e57d1e2535d8a8b8723a289"},{"code":"(fn foo [& funcs]\n    (fn [& args] \n        (map (fn [x] (apply x args)) funcs) ))","problem":59,"user":"5356e569e4b04ce2eb3ed272"},{"problem":59,"code":"(fn [& funs] (fn [& args] (map (fn [fun] (apply fun args)) funs)))","user":"5d6d2172e4b04d129b00f2b9"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (loop [fncs fs out []]\n        (if fncs\n          (recur (next fncs) (conj out (apply (first fncs) args)) ) \n          out))))","user":"55f8b32ae4b03cbcff9738ba"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]     \n      (map #(apply % args) funcs)))","user":"53ed6976e4b0d648e757f4c4"},{"problem":59,"code":"(fn [& args]\n  (fn [& xs] (map #(apply % xs) args)))","user":"559a8d4ce4b066d22e731f43"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (vec (for [f fs] (apply f xs)))\n    )\n  )","problem":59,"user":"5228f870e4b0186687e23a98"},{"problem":59,"code":"(fn\n  [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","user":"5d96edeae4b0d3f9b434ad35"},{"problem":59,"code":"(fn [& f] (fn [& coll] (map #(apply % coll) f)))","user":"54b7f217e4b0ed20f4ff6e8f"},{"code":"(fn juxta-position \n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4f2942ace4b0d6649770a01e"},{"problem":59,"code":"(fn [& fs]\n      (fn [& xs] (map #(apply % xs) fs))\n      )","user":"53ef3adfe4b0742d9025b0c9"},{"code":"(fn ju\n  ([] nil)\n  ([f & n]\n   (fn [& p]\n     (let [fa (apply f p)\n           na (apply (or (apply ju n) (constantly nil)) p)]\n       (cons fa na)))))","problem":59,"user":"53908e6be4b0b51d73faae9a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (mapv #(apply % args) fns)))","user":"511f9625e4b085952a835362"},{"problem":59,"code":"(fn ([f g h] (fn [v & u] (let [fs (list* v u)] (conj [] (apply f fs) (apply g fs) (apply h fs)))))\n([f g] (fn [v & u] (let [fs (list* v u)] (conj [] (apply f fs) (apply g fs))))))","user":"5addadfce4b0837691e92c13"},{"code":"(fn newjuxt [& f]\n     (fn g [& x]\n       (for [h f]\n         (apply h x))))","problem":59,"user":"532727bae4b09d4e7a9b54fa"},{"code":"(fn fifty-nine\n  [& fns]\n  (fn [& xs]\n    (for [f fns]\n      (apply f xs))))","problem":59,"user":"510591dde4b06d28cacc92eb"},{"problem":59,"code":"(fn [& fs]\n  (fn [& a] \n    (for [f fs] \n      (if (> (count a) 1) \n        (reduce f a) \n        (f (first a))))))","user":"52699a0ee4b03e8d9a4a71f2"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (let [jxt (fn [fns args result]\n                  (if (empty? fns) (reverse result)\n                    (recur (rest fns) args (cons (apply (first fns) args) result))))]\n        (jxt fns args '()))))","user":"57780e4fe4b0979f89651657"},{"code":"(fn [& fs]\n  (fn [& a]\n    (for [f fs] (apply f a))))","problem":59,"user":"51e00020e4b01188f0627534"},{"problem":59,"code":"(fn [& f] \n         (fn [& a] (for [x f] (apply x a))))","user":"53f592b7e4b0db01ade6f9d0"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (let [fns (distinct fns)]\n       (fn [& args] \n         (reduce (fn [acc f] \n                   (conj acc (apply f args)))\n                 []\n                 fns))))","user":"53350264e4b0656e627bfd73"},{"code":"(fn [& fs] (fn [& x] (map #(apply % x) fs)))","problem":59,"user":"4eaede1f535d7eef30807329"},{"code":"(fn [& funcs]\n  (fn [& xs] (map #(apply % xs) funcs)  )\n )","problem":59,"user":"51729002e4b044b2ef48a850"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args] \n    (reduce (fn [acc f] (conj acc (apply f args)) ) [] fs)))","user":"5b4ff637e4b02d533a91bce0"},{"code":"(fn [& fns]\n  (fn [& args] (for [f fns] (apply f args))))","problem":59,"user":"504e108ce4b078edc5f593b3"},{"code":"(fn [& lf] (fn [& x] (map #(apply % x) lf)))","problem":59,"user":"5134973ce4b0230e9f713b42"},{"code":"(fn [& funs] (fn [& args] (map #(apply %1 args) funs)))","problem":59,"user":"4fa67030e4b081705acca1b7"},{"code":"(fn [& fs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fs)))","problem":59,"user":"4e39fb68535deb9a81d77f47"},{"problem":59,"code":"(fn [& funcs]\n #(loop [funcs funcs coll %& answer []]\n  (if\n   (empty? funcs)\n   answer\n   (recur\n    (rest funcs)\n    coll\n    (conj answer (apply (first funcs) coll))\n   )\n  )\n )\n)","user":"560fe558e4b05f002753df63"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args) \n         fns)))","user":"55d8eed3e4b0e31453f64ac3"},{"code":"(fn jux [& fs] \n  (fn [& xs] (map (fn [f] (apply f xs)) fs)\n  )\n)","problem":59,"user":"515fb48fe4b0e2be8aa20bd5"},{"code":"(fn [& fs]\n  (fn [& e]\n    (map #(apply % e) fs)))","problem":59,"user":"4f4a5ca6e4b0d56e7bb92c0f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply %1 args)\n         fs)))","user":"58740c18e4b01531a375ea49"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args] \n    (for [idx (range (count funs))] (apply (nth funs idx) args))\n  )\n)","user":"583c8bd4e4b089d5ab817d81"},{"problem":59,"code":"(fn foo [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"58e2e11ce4b005f69f193ca0"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs fs o []]\n      (if (empty? fs)\n        o\n        (recur (rest fs) (conj o (apply (first fs) args)))\n      )\n    )\n  )\n)","user":"5bdf651ee4b0ed4b8aab4c6d"},{"problem":59,"code":"(fn [& fs] (fn [& arg]\n    (loop [init [], [h & t] fs]\n      (if (nil? h)\n        init\n        (recur (conj init (apply h arg)) t)))))","user":"548b7db8e4b0e286459a11fd"},{"code":"(fn seqf [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"5374adc3e4b06d7f452d9e27"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] \n    (into [] (for [f fns] (apply f args)))))","user":"57f0f7b8e4b0bfb2137f5bfe"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce #(conj % (apply %2 xs)) [] fs)))","problem":59,"user":"4ed06ea6535d44c135fd68c4"},{"problem":59,"code":"(fn [& i] (fn [& o] (map #(apply %1 o) i)))","user":"5562442be4b0c656e3ff17d5"},{"problem":59,"code":"(fn [& args]\n  (letfn [(v [fs szn]\n             (if (empty? fs) fs\n               (cons (apply (first fs) szn)\n                     (v (rest fs) szn))))]\n  (fn [& args2] (v args args2))))","user":"60264d89e4b0d5df2af2222d"},{"code":"(fn j [& fs]\n  (fn [& l]\n    (map #(apply % l) fs)))","problem":59,"user":"532b43c3e4b09d4e7a9b5531"},{"code":"(fn juksta [& xf] (fn [& q] \r\n\t\t\t\t\t\t\t(map (fn [a] (apply a q))  xf)\r\n\t\t\t\t\t   ))","problem":59,"user":"4dadca03c9a9d6ed4199dc57"},{"problem":59,"code":"(fn jux[& func]\n                (fn [& args]\n                  (map #(apply % args) func)))","user":"592c64ffe4b072a2710fcf57"},{"code":"#(fn [& r]\n  (map (fn [f] (apply f r)) %&))","problem":59,"user":"4fb1d907e4b081705acca282"},{"problem":59,"code":"(fn ([f g] #(vector (apply f %&) (apply g %&)))\n                   ([f g z] #(vector (apply f %&) (apply g %&) (apply z %&))))","user":"5cf72682e4b0b71b1d808a68"},{"problem":59,"code":"(fn juxtaposition [& fs]\n  (fn [& args]\n    (into [] (map (fn [f] (apply f args)) fs))))","user":"5843b95de4b089d5ab817e3f"},{"problem":59,"code":"(fn mjuxt [& fns]\n  (fn [& args] (map #(apply % args) fns)))","user":"5922f8a9e4b026ae3852128f"},{"code":"(fn [& fns]\n  \t(fn [& args]\n\t\t\t(loop [funs fns result []]\n\t\t\t\t(if (empty? funs) result\n\t\t\t\t\t(recur (rest funs)\n\t\t\t\t\t\t(conj result (apply (first funs) args)))))))","problem":59,"user":"4e6a63fd535d8ccf87e9feda"},{"problem":59,"code":"(fn foo\n  ([f g h]\n   (fn\n     ([x y & args]\n      [(apply f x y args)(apply g x y args)(apply h x y args)]\n       )\n     ([x]\n      [( f x )( g x )( h x )]\n       )\n     )\n   \n    )\n  ([f g]\n   (fn\n     [x & args]\n     [(apply f x args)(apply g x args)]\n     )\n    )\n\n  )","user":"5d270111e4b092dab7f59c62"},{"code":"(fn [& fs]\r\n    (fn [& args]\r\n        (map #(apply % args) fs)))","problem":59,"user":"4ded27db535d08e6dec9fe0a"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (for [f fs]\n      (apply f xs)\n    )\n  )\n)","user":"5943abb6e4b060784b3b792b"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] \n    (map #(apply %1 args) fns)\n )\n)","user":"5d828b7ee4b0915913b1d382"},{"code":"(fn\n  [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","problem":59,"user":"51852961e4b0da5a5be3babb"},{"problem":59,"code":"(fn [& fns] #(->> (repeat %&) (map apply fns) vec))","user":"5394aa77e4b0b51d73faaecd"},{"problem":59,"code":"(fn juxt_ [& fs]\n  (fn [& args]\n    (vec (for [f fs]\n      (apply f args)))    \n    ) \n  )","user":"534fa9dae4b084c2834f4acf"},{"problem":59,"code":"(fn rick-juxt [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))))","user":"53703287e4b0fc7073fd6e8f"},{"problem":59,"code":"(fn my-juxt [& fns]                              \n  (fn apply-fns [& args]                         \n    (map #(apply % args) fns)))","user":"608e5697e4b03bd49d9f36be"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args] (map #(apply %1 %2) funcs (repeat args))))","user":"554680cbe4b0a04f7929953e"},{"problem":59,"code":"(fn [& fns](\n              fn [& xs](\n                        map (fn [x] (apply x xs)) fns\n                        )\n              ))","user":"546280d8e4b01be26fd746b0"},{"code":"(fn mju [& funcs]\n  (fn [& input] \n    (loop [funvec funcs result []]\n      (if (empty? funvec)\n        result\n        (recur (rest funvec) (conj result (apply (first funvec) input)))\n        )\n      )\n    )\n  )","problem":59,"user":"4fcf5292e4b03432b189f40e"},{"code":"(fn [& fs] (fn [& xs] (for [f fs] (apply f xs))))","problem":59,"user":"4fe9364be4b0547ebccb244e"},{"problem":59,"code":"(fn j [& fs]\n  (fn [& more]\n    (mapv #(apply % more) fs)))","user":"521ed5b4e4b0e6c71e0c0bc0"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n  (loop [res []\n         funcs funcs]\n    (if (empty? funcs)\n      res\n      (let [nextfn (first funcs)\n            newel (apply nextfn args)]\n        (recur (conj res newel)\n               (rest funcs)))))))","user":"592334c7e4b0a390037439ee"},{"code":"(fn [& fs] (fn [& args] \n  (vec (for [f fs] (apply f args)))))","problem":59,"user":"4e80d71b535db62dc21a62b7"},{"code":"(fn \n  ([f g h]\n    (fn [& x] [(apply f x) (apply g x) (apply h x)]))\n  ([f g]\n    (fn [& x] [(apply f x) (apply g x)])))","problem":59,"user":"4fcc103fe4b0ee37620e185f"},{"problem":59,"code":"#(fn [& xs]\n   (map (fn [f] (apply f xs)) %&))","user":"577832f4e4b0979f8965165b"},{"code":"(fn [& fs]\r\n    (fn [& args]\r\n      (loop [fs fs\r\n             result []]\r\n        (if (seq fs)\r\n          (recur (rest fs) (conj result (apply (first fs) args)))\r\n          result))\r\n      ))","problem":59,"user":"51a54fb4e4b0def3c5c586a3"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map \n      #(apply % args)\n      funcs\n    )\n  )\n)","user":"5710140fe4b09c608db7042e"},{"code":"(fn f [& fs]\n  (letfn [(solve [fs result args]\n            (if (empty? fs)\n              result\n              (recur (rest fs) (conj result (apply (first fs) args)) args)\n              ))]\n    (fn [& more]\n      (solve fs [] more))\n   ))","problem":59,"user":"5302ac7fe4b0d8b024fd3731"},{"problem":59,"code":"(fn [& fns] (fn [& args] (reduce (fn [rs fn] (conj rs (apply fn args))) [] fns)))","user":"56b35565e4b0982f16b37e16"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n     (map #(apply % xs) fns)))","user":"4f8490fae4b033992c121c34"},{"problem":59,"code":"(fn juxt* [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","user":"540e17c3e4b0addc1aec6719"},{"problem":59,"code":"(fn [ & funcs]\n  (fn [& args]\n    (map #(apply %1 args) funcs)))","user":"579c8ad1e4b05b1deef9ae0c"},{"problem":59,"code":"(fn juxt' [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","user":"569dd6e8e4b0542e1f8d1480"},{"problem":59,"code":"(fn [& fx]\n  (fn [& vx]\n    (map #(apply % vx) fx)))","user":"525b4e8de4b0cb4875a45d0f"},{"problem":59,"code":"(fn jux1\n  ([f]\n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g]\n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h]\n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","user":"587ee260e4b052da650a6353"},{"problem":59,"code":"(fn \n  ([f g]\n   (fn [x] [(f x) (g x)]))\n  ([f g h]\n   (fn\n     ([x & args] [(apply f x args) (apply g x args) (apply h x args)]))))","user":"505d1b01e4b0e6aca564be04"},{"problem":59,"code":"(fn [& fns]\n  (fn [& sq]\n    (reduce (fn [res f]\n              (conj res (apply f sq))) [] fns)))","user":"55ede35ce4b0121d4835fde1"},{"problem":59,"code":"(fn [& fs]\n  (fn [& coll]\n    (map\n      (fn [f]\n        (apply f coll))\n      fs)))","user":"5c73b8bae4b0fca0c16227ba"},{"code":"(fn [& fs]\n      (fn [& as] (map #(apply % as) fs)))","problem":59,"user":"534c1c64e4b084c2834f4a8a"},{"code":"(fn myjuxt [& fsequence]\n    (fn doer [& args]\n      (map #(apply % args) fsequence)))","problem":59,"user":"50057f23e4b0678c553fc466"},{"problem":59,"code":"(fn my-juxt [& args]\n  (fn [& in_args]\n    (reduce #(conj %1 (apply %2 in_args)) [] args)))","user":"55eb026de4b0121d4835fdb7"},{"problem":59,"code":"(fn my-juxt1\n  [& f]\n  (letfn [(fun [s & x] (map apply s (repeat x)))]\n    (partial fun f)))","user":"557e9d17e4b05c286339e0d8"},{"problem":59,"code":"(fn [& fl] (fn [& p] (map #(apply % p) fl)))","user":"583048d9e4b051871117c007"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))))","user":"4ea03f70535d7eef308072a1"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))","user":"4f9b3532e4b0dcca54ed6d13"},{"code":"(fn j [f & args] (fn [& x] \n                   (cons (apply f x) \n                         (if (empty? args) [] \n                           (apply (apply j args) x)))))","problem":59,"user":"53976599e4b0b51d73faaeea"},{"code":"(fn [& s] (fn [& x] (map #(apply % x) s)))","problem":59,"user":"4f1b0ab3535d64f603146474"},{"code":"(fn [& fns]\n(fn [& args]\n  (vec (map #(apply % args) fns))))","problem":59,"user":"4ee7b354535d93acb0a6686b"},{"code":"(fn [x & xs]\r\n  (fn [& args]\r\n    (map #(apply % args) (cons x xs))))","problem":59,"user":"4e1158aa535d04ed9115e7c6"},{"code":"(fn bob [& fs]\n  (fn jack [& xs]\n    (if (empty? fs)\n      []\n      (cons (apply (first fs) xs) (apply (apply bob (rest fs)) xs)))))","problem":59,"user":"4ec07699535dfed6da9c6da2"},{"code":"(fn [& f]\r\n  (fn [& a]\r\n    (loop [f f r []]\r\n      (if (seq f)\r\n        (recur (rest f)\r\n               (conj r (apply (first f) a)))\r\n        r))))","problem":59,"user":"4dbb1126535d1e037afb21b3"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map\n      #(apply %1 args)\n      fs)))","problem":59,"user":"4e7af59c535db169f9c796af"},{"code":"(fn [& funcs]\n  (let [f funcs]\n    (fn [& x]\n      (loop [ret [] f f]\n        (if (empty? f)\n          ret\n          (recur (conj ret (apply (first f) x))\n                 (next f)))))))","problem":59,"user":"4faec810e4b081705acca24e"},{"code":"(fn [& functions]\n  (fn [& args]\n    (for [f functions] (apply f args))))","problem":59,"user":"50ed3c6be4b01236b1d4983b"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (for \n      [f fs]\n      (apply f args))))","user":"5ddb8a6ee4b0948ae9d9adb2"},{"problem":59,"code":"(fn [& fs]\n (fn [& xs]\n   (loop [fs fs\n          acc []]\n     (if (empty? fs)\n       acc\n       (recur (rest fs) (conj acc (apply (first fs) xs)))))))","user":"55fbc657e4b0f488688e0666"},{"code":"(fn [& fs]\n  (fn [& x] (map (fn [f] (apply f x)) fs)))","problem":59,"user":"4ec812d9535d6d7199dd36f0"},{"problem":59,"code":"(fn [& args]\n    (fn [& j-args]\n      (map (fn [v] (apply v j-args)) args)))","user":"53c73e8ae4b00fb29b2212a5"},{"problem":59,"code":"(fn juxtaposition-funcs-left-right [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"5c3f6322e4b08cd430848e97"},{"problem":59,"code":"(fn [& fns]\n    (fn [& x]\n      (reduce #(conj %1 (apply %2 x)) [] fns)))","user":"57fc5e42e4b0d3187e900997"},{"code":"(fn juxtap [& fns]\n\t(fn hoge [& args]\n\t    (map #(apply %1 %2) fns (repeat args))))","problem":59,"user":"52381b2ae4b0fae3832e99ef"},{"code":"(fn [& fns] \n  (fn [& items]\n    (map #(apply % items) fns)))","problem":59,"user":"4faa5735e4b081705acca1ee"},{"problem":59,"code":"(fn [& functions]\n\t(fn [& args] (map (fn [f] (apply f args)) functions)))","user":"57c0917be4b05aa3c4741c95"},{"code":"(fn [& fs]\n  (let [fs (reverse (list* fs))]\n(fn [& args]\n  (loop [ret (list (apply (first fs) args)) fs (next fs)]\n(if fs\n(recur (conj ret (apply (first fs) args)) (next fs))\nret)))))","problem":59,"user":"4eb27fad535d7eef3080734a"},{"problem":59,"code":"(fn f\n  [& fs]\n  (fn xxx\n    [& xs]\n    (concat (for [fx fs] (apply fx xs)))\n    ))","user":"55c423e1e4b0e31453f64994"},{"problem":59,"code":"(fn [& f1] (fn [& x] (for [f f1] (apply f x))))","user":"541f89a5e4b01498b1a71a99"},{"problem":59,"code":"#(fn [& rst]\n   (map (fn [func]\n          (apply func rst))\n        %&))","user":"60096aabe4b074f607df667f"},{"code":"(fn p59-juxtapose [& fns]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fns)))","problem":59,"user":"526d6968e4b03e8d9a4a72d9"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (mapv #(apply % xs) fs)))","problem":59,"user":"50645e12e4b007509339a58a"},{"code":"(fn [& fs]\n        (fn [x & xs]\n          (if (nil? xs)\n            (reduce (fn [acc f] (concat acc (list (f x)))) () fs)\n            (reduce (fn [acc f] (concat acc (list (reduce f (conj xs x))))) () fs)\n          )\n        )\n      )","problem":59,"user":"5272d4b7e4b03e8d9a4a7453"},{"code":"(fn [& fns] \n    (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"4e5f08c7535d8a8b8723a2da"},{"code":"(fn[& s](fn[& a](for [f s] (apply f a))))","problem":59,"user":"4e6df3c9535d5021c1a895fa"},{"problem":59,"code":"(fn myjuxt [& funs]\n    (fn myjuxt-impl [& args]\n      (loop [[f & n] funs\n             xs []]\n        (if f\n          (recur n (conj xs (apply f args)))\n           xs))))","user":"5df0c6ffe4b093ff717275c2"},{"problem":59,"code":"(fn [& fs] \n  (fn [& xs] \n    (mapv #(apply % xs) fs)))","user":"5e85163be4b09a7a73c8bbd0"},{"problem":59,"code":"(fn [& fs]\n(fn [& as] (map #(apply % as) fs)))","user":"5938bae2e4b02506e01a29ea"},{"problem":59,"code":"(fn fn-list [& fnc]\n  (fn [& x]\n    (loop [coll fnc result []]\n      (let [f (first coll) r (rest coll)]\n        (if (nil? f)\n          result\n          (recur r (conj result (apply f x))))))))","user":"5546704be4b0a04f7929953d"},{"problem":59,"code":"(fn [& a] (fn [& x] (reduce #(conj %1 (apply %2 x)) [] a)))","user":"53fddd71e4b0de5c418485eb"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (for [f fs]\n        (apply f args))))","user":"53c06438e4b0c98a41f5ccb0"},{"code":"(fn \n  ([x y] (fn\n    ([c] [(x c) (y c)])\n    ([c & more] [(apply x c more) (apply y c more)])\n    ))\n   ([x y z] (fn \n    ([c] [(x c) (y c) (z c)])\n    ([c & more] [(apply x c more) (apply y c more) (apply z c more)])\n    ))\n  )","problem":59,"user":"50fa0dcee4b07934dda8b0bb"},{"problem":59,"code":"(fn my-juxt\n  ([f g]\n    (fn\n      ([] [(f) (g)])\n      ([x] [(f x) (g x)])\n      ([x y] [(f x y) (g x y)])\n      ([x y z] [(f x y z) (g x y z)])\n      ([x y z & tail] [(apply f x y z tail) (apply g x y z tail)])))\n  ([f g h]\n    (fn\n      ([] [(f) (g) (h)])\n      ([x] [(f x) (g x) (h x)])\n      ([x y] [(f x y) (g x y) (h x y)])\n      ([x y z] [(f x y z) (g x y z) (h x y z)])\n      ([x y z & tail] [(apply f x y z tail) (apply g x y z tail) (apply h x y z tail)])))\n  ([f g h & other] (let [fs (list* f g h other)]\n    (fn\n      ([] (reduce #(conj %1 (%2)) [] fs))\n      ([x] (reduce #(conj %1 (%2 x)) [] fs))\n      ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n      ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n      ([x y z & tail] (reduce #(conj %1 (apply %2 x y z tail)) [] fs))))))","user":"5773f3a9e4b0979f896515f2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [p f] (conj p (apply f args))) [] fs)))","user":"5a16da30e4b0ff51aa4b31cc"},{"code":";; joke from source code\n(fn\n               ([f]\n                  (fn\n                    ([] [(f)])\n                    ([x] [(f x)])\n                    ([x y] [(f x y)])))\n               ([f g]\n                  (fn\n                    ([] [(f) (g)])\n                    ([x] [(f x) (g x)])))\n               ([f g h]\n                  (fn\n                    ([a] [(f a) (g a) (h a)])\n                    ([a b c d e q] [(f a b c d e q) (g a b c d e q) (h a b c d e q)])\n                    ([a b c d e] [(f a b c d e) (g a b c d e) (h a b c d e)]))))","problem":59,"user":"51e0198ee4b01188f0627539"},{"problem":59,"code":"(fn my-juxt\n  [first-fn & rest-fns]\n  (fn [& x] (map (fn [fun] (apply fun x)) (cons first-fn rest-fns))))","user":"5b759ca8e4b047b03b2036d0"},{"problem":59,"code":"(fn juxt-custom [& fns]\n  (fn [& args]\n    (map\n      (fn [f] (apply f args))\n      fns)))","user":"5d0eed51e4b0cc9c91588262"},{"code":"#(fn [& V]\n                  (map\n                   (fn [f]\n                     (apply f V))\n                   %&))","problem":59,"user":"52c73194e4b0c2d177d6211e"},{"problem":59,"code":"(fn jux2 [& fns]\n (fn [& params]\n   (reduce \n    #(conj %1 (apply %2 params)) \n    [] fns)\n )\n)","user":"5a424954e4b0447ef91cc5f0"},{"code":"(fn [& fs] \n  (fn [& args] \n    (vec (map #(apply % args) fs))))","problem":59,"user":"4e9660ec535dbda64a6f6b44"},{"code":"(fn [& fns] #(map (fn [f] (apply f %&)) fns))","problem":59,"user":"4fbf2818e4b081705acca317"},{"problem":59,"code":"(fn juxta [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"572ea970e4b0cd1946bd0f89"},{"code":"(fn _this_ [ x & more_] (fn [y & more__]   (loop [params  (cons x more_ ) ret (cons y more__) result [] ]\r\n                  (if (empty? params) result\r\n                  (recur (rest params)  ret (conj result (apply  (first params) ret)))))))","problem":59,"user":"50463347e4b011c5dfee771e"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"53bf0913e4b0c98a41f5cc99"},{"problem":59,"code":"(fn juxtaposition [& fns]\n (fn [& args]\n  (mapv #(apply % args) fns)))","user":"53c69ebce4b00fb29b22129c"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (into []\n          (map #(apply % xs) fs))))","user":"4f856adfe4b033992c121c44"},{"code":"(fn [& methods] (fn [& args] (map #(apply % args) methods)))","problem":59,"user":"4f294c48e4b0d6649770a023"},{"code":"(fn [& fs]\n  (fn [& args] (map #(apply % args) fs))\n)","problem":59,"user":"4fcad14ce4b0ee37620e1856"},{"code":"(fn [& f]\n  (fn [& a]\n    (loop [l f r []]\n      (if (> (count l) 0)\n        (recur (rest l) (conj r (apply (first l) a)))\n        r))))","problem":59,"user":"51ab70c3e4b04e3dc0c27b33"},{"problem":59,"code":"(fn [& fs]\n  (fn [& i]\n   (map #(apply % i) fs)))","user":"5e64ae6ce4b0fd0acd1586ac"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map \n     (fn[e](apply e args))\n     fns)))","user":"5832be57e4b089d5ab817c86"},{"code":"(fn myjuxt [& fs]\n  (fn [& args]\n     (map #(apply % args) fs)))","problem":59,"user":"4f036fb3535dcb61093f6ac8"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (for [f funcs] (apply f args))))","user":"546c4c5fe4b00cfc9eacc178"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map \n      (fn [f]\n        (apply f args))\n      fns)))","problem":59,"user":"4ec34578535dcc7ae8597d51"},{"problem":59,"code":"(fn [& fns]\n    (fn [& x]\n      (map #(apply % x) fns)))","user":"5de7e7cae4b0986d99407f7a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& more]\n    (for [f fns]\n      (apply f more))))","user":"551ed214e4b08d5046aa8a4d"},{"code":"(fn [& more] \r\n  (fn [& more2]\r\n    (second \r\n     (reduce (fn [[args acc] fun]\r\n         [args (conj acc (apply fun args))])\r\n\t     [more2 []]\r\n\t     more))))","problem":59,"user":"4dd6d7ee535d2dad7130b5cb"},{"problem":59,"code":"(fn [& f]\n    (fn [& x] (map apply f (repeat x))))","user":"55c6fd60e4b0e31453f649c9"},{"problem":59,"code":";; closer to clojure.core/juxt\n;(fn\n;  ([& fs]\n;   (fn [& args]\n;     (reduce (fn [juxtaposed func]\n;               (conj juxtaposed (apply func args)))\n;             []\n;             fs))))\n(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"60794173e4b0a637ed78035d"},{"code":"(fn [& funcs]\n\t(fn [& seqs]\n\t\t(for [f funcs]\n\t\t\t(apply f seqs))))","problem":59,"user":"51bdc609e4b0ff155d51d2b3"},{"problem":59,"code":"(fn juxta [ & _funlist ]                                                                                                                                                           \n    (fn innerjuxta [ & _arglist]                                                                                                                                                     \n      (println _arglist _funlist )                                                                                                                                                   \n      (reduce #( conj %1 ( apply %2 _arglist ) ) [] _funlist )                                                                                                                       \n      )                                                                                                                                                                              \n    )","user":"5d5c6675e4b09db18d4482ec"},{"problem":59,"code":"(fn [& args]\n        (fn [& xs]\n          (map #(apply % xs) args)))","user":"5cc6b4bfe4b0ccb061962827"},{"problem":59,"code":"(fn [ & fns]\n  (fn [& xs]\n    (loop [ agg []\n            remaining-fns fns ]\n      (let [cur-fn (first remaining-fns)\n            rest-fns (next remaining-fns)]\n        (if rest-fns\n          (recur (conj agg (apply cur-fn xs)) rest-fns)\n          (conj agg (apply cur-fn xs)))\n    ))))","user":"5658d775e4b00d3155796114"},{"code":"(fn fn-list [& fns]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"52d885afe4b09f7907dd1398"},{"problem":59,"code":"(fn my-fn [& fs]\n\t(fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs)))","user":"5c896f46e4b048ec896c5940"},{"problem":59,"code":"(fn my-prob-59-juxtaposition [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"55b28b57e4b01b9910ae296c"},{"problem":59,"code":"(fn my-juxt\n\t([& funcs]\n\t\t(fn [& args]\n\t\t\t(map #(apply % args) funcs))))","user":"58fb7d7ae4b0438e51c2cf7a"},{"problem":59,"code":"(fn\n  ([& fs]\n   (fn [& args]\n     (map #(apply % args) fs))))","user":"5561d2c2e4b0c656e3ff17cd"},{"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply % args)\n         funs)))","problem":59,"user":"529e3a4fe4b04e0c58e87b92"},{"code":"(fn [& x] (fn [& y] (map (fn [z] (apply z y)) x)))","problem":59,"user":"4ed286d4535d44c135fd68d7"},{"problem":59,"code":"(fn [& fs] (fn [& as] (reduce (fn [acc x] (conj acc (apply x as))) [] fs)))","user":"5fa17538e4b0f0ebd91b77e3"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (map\n      #(apply % xs)\n      fs)))","problem":59,"user":"4f253a49e4b0d66497709ff3"},{"problem":59,"code":"(fn [& argsfn] \n  (fn [& args] \n  \t( map #(apply % args) argsfn )\n))","user":"555093b2e4b00713264bd9ab"},{"code":"(fn  [& fa]\r\n  (fn [& col]\r\n\t    (loop [result [] fx fa]\r\n\t       (if (empty? fx)\r\n\t\t   result\r\n\t\t   (recur (conj result (apply (first fx)col))(rest fx))))))","problem":59,"user":"4f4ec77ae4b03ad3f0c10cd0"},{"code":"(fn juxt2 [& funcs]\n    (fn [& args]\n      (map #(apply % args) funcs)))","problem":59,"user":"506c0a02e4b0eda3100c090d"},{"code":"(let [f\n      (fn [funs result & args]\n        (if (nil? funs)\n          result\n          (recur (next funs) (conj result (apply (first funs) args)) args)\n        )\n      )]\n  (fn [& x] (partial f x []))\n)","problem":59,"user":"526dd90de4b03e8d9a4a72fe"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (map #(apply %1 a) f)))","user":"5c1aadcde4b01240ff567209"},{"code":"(fn my-juxt [& functions]\n  (fn [& arguments]\n    (map (fn [f] (apply f arguments)) functions)))","problem":59,"user":"50052fd0e4b0678c553fc45d"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce (fn [result f]\n                (conj result (if (> (count args) 1) \n                               (reduce f args)\n                               (f (first args)))))\n              []\n              fns)))","user":"5d5c2730e4b09db18d4482ea"},{"code":"(fn [& functions]\n  (fn [& args]\n    (let [params (vec args)]\n      (loop\n          [fns (vec functions) acc []]\n        (if (empty? fns)\n          acc\n          (recur (rest fns) (conj acc (apply (first fns) params))))))))","problem":59,"user":"5271605ae4b03e8d9a4a73ed"},{"code":"(fn jux [& functions]\n  (fn [& args]\n    (loop [l_func functions result []]\n      (if (empty? l_func)\n        result\n        (recur (rest l_func) (conj result (apply (first l_func) args) ))\n        )\n      )\n    )\n  \n  )","problem":59,"user":"50f87a67e4b0aafb827eb202"},{"code":"#(fn [& n] (map (fn [x] (apply x n)) %&))","problem":59,"user":"50548ce8e4b0b1b9d1860ead"},{"problem":59,"code":"(fn juxt1\n  ([& fns]\n   (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fns))))","user":"57235dc4e4b0c5bde472c0e2"},{"code":"(fn myjuxt [& fs]\n  (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4f48f587e4b0d56e7bb92be2"},{"problem":59,"code":"(fn [f & fs] (fn [x & xs] (map #(apply % (cons x xs)) (cons f fs))))","user":"53b2a7f8e4b047364c04449c"},{"code":"(fn applyall [& fns]\n   (fn [& args]\n     (for [f fns]\n       (apply f args))))","problem":59,"user":"4fe87e56e4b07c9f6fd12c40"},{"problem":59,"code":"(fn [& args] (fn [& a] (map #(apply % a) args)))","user":"57086931e4b0b0fb43fd069e"},{"problem":59,"code":"(fn [& args]\n    (fn [& xs] \n      (for [f args] (apply f xs))))","user":"54b13a40e4b09f271ff37d1b"},{"problem":59,"code":"(fn juxtapose [& funcs]\n  (fn [& args]\n    (for [f funcs] (apply f args))\n  )\n)","user":"54c82b27e4b045293a27f645"},{"code":"(fn [& l]\n          #(for [f l] (apply f %&)))","problem":59,"user":"503b6995e4b07a1917cc34dd"},{"code":"(fn [& flist] (fn [& args] (map #(apply % args) flist)))","problem":59,"user":"5246e945e4b0644eb7b0783b"},{"code":"(fn [& fs]\n    (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"536a37efe4b0243289761eaa"},{"code":"(fn [& x] (fn [& a] (map #(apply % a) x)))","problem":59,"user":"51cbdee1e4b08d8387cbede1"},{"code":"(fn [& ops] (fn [& vals] (reduce #(conj %1 (apply %2 vals)) [] ops)))","problem":59,"user":"4eb2eae5535d7eef30807351"},{"problem":59,"code":"(fn [& functions]\n  (fn [& params]\n    (map (fn [function]\n           (apply function params))\n         functions)))","user":"58637f03e4b0f14aab7c881e"},{"code":"(fn [ & fs]\n  (fn [ & args]\n    (for [f fs] \n      (apply f args))))","problem":59,"user":"4e95c771535dbda64a6f6b39"},{"code":"(fn new-juxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4ea7999e535d7eef308072ee"},{"code":"(fn [& os]\n  (fn [& vs]\n    (map #(apply % vs) os)))","problem":59,"user":"4ec0c7ba535dfed6da9c6da4"},{"code":"(fn [& args] (fn [& ars] (map #(apply % ars) args)))","problem":59,"user":"4eb0175b535d7eef30807336"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (apply vector (map #(apply %1 args) funcs))))","problem":59,"user":"506afdafe4b0a2a5463de37e"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn [& xs]\n    (reduce\n      #(conj %1 (apply %2 xs))\n      []\n      fs)))","user":"5f300f28e4b033932238a682"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce \n      #(conj %1 (apply %2 args))\n      []\n      fns)))","user":"564c8e99e4b0284900eef674"},{"code":"(fn [& functions]\n  (fn [& arguments]\n    (map #(apply % arguments) functions)\n  )\n)","problem":59,"user":"51018807e4b0a79bcc8c0e0b"},{"problem":59,"code":";; slightly simpler example with 3 functions \"hardcoded\"\n;; (map #(apply % args) [+ max min])\n\n;; returns a list of results\n;; define a func that takes in some # of funcs\n(fn [& fs]\n  ;; define a func that takes in some # of arguments\n  (fn [& args]\n    ;; map over all the arguments with all of the functions\n  \t(map #(apply % args) fs)))","user":"5fb68f09e4b08cb800c85b58"},{"code":"(fn [& fnlist]\n  (fn [& args]\n    (map #(apply % args) fnlist)))","problem":59,"user":"4eb2e6ca535d7eef3080734f"},{"problem":59,"code":"(fn my-juxt [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","user":"5b0b8d29e4b0cc2b61a3bdd7"},{"code":"(fn [& fc] (fn [& coll] (map #(apply % coll) fc)))","problem":59,"user":"503354c3e4b0c6c1199c710c"},{"problem":59,"code":"(fn juxtaposition [& funcs]\t\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] funcs)))","user":"53a94b63e4b047364c044434"},{"problem":59,"code":"(fn [& functions]\n        (fn [x & y]\n          (for [function functions]\n            (if (nil? y)\n              (function x)\n              (apply function x y)))))","user":"5dc53ddee4b02f9375f4e1bd"},{"code":"(fn [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))\n  )\n)","problem":59,"user":"51b9d1f0e4b0e871ca49590b"},{"problem":59,"code":"(fn my-juxt [& fcts]\n  (fn [& args]\n    (map #(apply % args) fcts)))","user":"5264383be4b03e8d9a4a70cb"},{"problem":59,"code":"(fn [& fs] (fn [& params] (map #(apply % params) fs)))","user":"53b71b94e4b047364c0444cd"},{"problem":59,"code":"; Okay, here's how I think it should be written:\n;\n; (fn [& fnlist]\n;   (fn [& args]          ; returns a fn that grabs all its arguments\n;     (for [f fnlist]     ; ...then for each fn in the list of functions\n;       (apply f args)))) ; ...calls the fn on the arguments\n;\n; But here's the same function in the \"classic\" style\n; favored by so many:\n;\n;\n(fn [& s] #(for [f s] (apply f %&)))\n;\n; Which would you rather reread in two years?","user":"4f80db02e4b033992c121bf9"},{"code":"(fn jux [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4f35b2ace4b0e243712b1ec5"},{"problem":59,"code":"(fn [& args]\n            (fn [& args2]\n              (map #(apply % args2) args)))","user":"538e36c7e4b0b51d73faae81"},{"code":"(fn [& fns]\r\n  (fn [& xs]    \r\n    (reduce #(conj %1 (apply %2 xs)) \r\n            [] \r\n            fns)))","problem":59,"user":"4e513758535dc968683fc4f3"},{"problem":59,"code":"(fn g [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"57adbe7ee4b0b8559636fca0"},{"code":"(fn jux [& fns]\n  (fn my-apply [& res]\n\t\t(for [f fns]\n\t\t\t(apply f res)\n\t\t)\n\t)\n)","problem":59,"user":"4faacc04e4b081705acca201"},{"problem":59,"code":"(fn \n  ([f] (fn [& args] (vector (apply f args))))\n  ([f & fs]\n     (fn [& args]\n       (loop [ret (vector (apply f args)) fs fs]\n         (if (empty? fs)\n         ret\n         (recur (conj ret (apply (first fs) args)) (next fs)))))))","user":"53f5de41e4b0db01ade6f9d7"},{"problem":59,"code":"(fn [& args] (fn [& x] (reduce #(conj %1 (apply %2 x)) [] args)))","user":"57c3451fe4b05aa3c4741cbd"},{"code":"(fn [& fs] \n  (fn [& xs] \n    (for [f fs] (apply f xs))))","problem":59,"user":"4fa6a491e4b081705acca1bc"},{"code":"(fn\n    [& fcoll]\n    (fn [& coll]\n        (mapv #(apply % coll) fcoll)))","problem":59,"user":"50b35486e4b03ea88043356a"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (reduce\n        (fn [res f]\n          (conj res (apply f args)))\n        []\n        fs)))","user":"5675cdf1e4b05957ce8c614d"},{"problem":59,"code":"(fn [& fs]\n  (fn ([& args]\n       (reduce #(conj %1 (apply %2 args)) [] fs))))","user":"6093b56ce4b00e9e6653c3e0"},{"problem":59,"code":"(fn my-juxt [& fcns]\n  (fn [& args]\n          (for [f fcns]\n            (apply f args))))","user":"5c950334e4b048ec896c5a44"},{"code":"(fn juxt2 [& funs]\n\t(fn [& xs]\n\t\t(reduce\n\t\t\t#(conj %1 (apply %2 xs))\n\t\t\t[]\n\t\t\tfuns)))","problem":59,"user":"5094057fe4b097f48cc38593"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (map (fn [f] (apply f args)) funcs)))","user":"5b9357b7e4b0c0b3ffbd4a46"},{"problem":59,"code":"(fn[& fs] (fn [& c] (map #(apply % c) fs)))","user":"555c6344e4b0b056612e224c"},{"problem":59,"code":"(fn gg [& f]\n  (fn [& coll]\n    (vec (map #(apply % coll) f))))","user":"585a7cb2e4b0f14aab7c874e"},{"problem":59,"code":"(fn\n  ([f] (fn [ & m] [(apply f m)]))\n   ([f g & morefn]\n    (fn [ & m]\n      (into [(apply f m)\n            (apply g m)]\n            (map #(apply % m) morefn)))))","user":"5b4b8cd6e4b02d533a91bc9f"},{"code":"(fn [& as] (fn [& bs] (for [x as] (apply x bs))))","problem":59,"user":"4f565bebe4b0a7574ea7181e"},{"code":"(fn [& functions]\n  (fn [& args]\n    (mapv #(apply % args) functions)))","problem":59,"user":"51f9527fe4b09be9c177e549"},{"problem":59,"code":"(fn [& s] (fn [& ss] (reduce (fn [ret f] (conj ret (apply f ss))) [] s)))","user":"59468de7e4b07ddc2dafad88"},{"code":"(fn[& f]\n  (fn[& v]\n    (for [x f] (apply x v))))","problem":59,"user":"52f818a6e4b047fd55836fcc"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (for [f funcs]\n      (apply f args))))","problem":59,"user":"51baff1be4b0fe3ecfb46443"},{"problem":59,"code":"(fn [& func-list]\n  (fn [& args]\n    (map #(apply %1 args) func-list)))","user":"563772a9e4b0bfe05bf117d7"},{"problem":59,"code":"(fn [& fs]\n  (fn [& x]\n    (vec \n     (for [f fs] \n       (apply f x)))))","user":"5bc833a5e4b07a9b28b100bb"},{"code":"(fn [& a] (fn [& l] (reduce #(conj %1 (apply %2 l) ) []  a)))","problem":59,"user":"50921f9ae4b09a7d0b586de1"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n    \n    ))","user":"5edd6eb7e4b0c7845d86b0f7"},{"code":"(fn\n  \t([f1 f2]\n     (fn\n       ([x] [(f1 x) (f2 x)])\n      )\n    )\n   \t([f1 f2 f3]\n   \t\t(fn\n          \t([x] [(f1 x) (f2 x) (f3 x)])\n    \t\t([x y z & args] [(apply f1 x y z args) (apply f2 x y z args) (apply f3 x y z args)])\n    \t)\t\n   )\n)","problem":59,"user":"514358eae4b0c172af7558d6"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) funcs)\n  )\n)","user":"54aa373de4b09f271ff37cb6"},{"problem":59,"code":"(fn juxt-1 [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5227eacee4b0186687e23a5e"},{"problem":59,"code":"(fn myJuxt\n  ([f] \n   (fn [& ps] [(apply f ps)]))\n  ([f1 & fns]\n   (fn [& ps] \n     (concat (apply (myJuxt f1) ps) (apply (apply myJuxt fns) ps)))))","user":"567798afe4b05957ce8c6169"},{"problem":59,"code":"(fn junnx [& fs]\n  (fn [& args] (reduce (fn [result f] (conj result (apply f args))) [] fs)))","user":"5abeb697e4b073f177442725"},{"code":"(fn [& fs] (fn [& xs] (reduce #(conj %1 (apply %2 xs)) [] fs)))","problem":59,"user":"50733b31e4b0e3170b5a869a"},{"problem":59,"code":"(fn [& fs]\n    (fn [& seq]\n    (map #(apply % seq) fs)))","user":"5f0aa72de4b09a3f05b71808"},{"problem":59,"code":"(fn [& fns]\n  (fn [& coll]\n    (map (fn[f] \n           (apply f coll)) fns)))","user":"53e241a6e4b036ad0777e3f0"},{"problem":59,"code":"(fn [& f]\n  (fn [& c]\n    (map #(apply % c) f)))","user":"576e607ae4b0979f89651579"},{"problem":59,"code":"(fn [& fcts]\n  (fn [& args]\n    (map #(apply % args) fcts)))","user":"54bbaa8ee4b0ed20f4ff6ec0"},{"code":"(fn [x & xs]\r\n  (fn [& a]\r\n    (map #(apply % a) (cons x xs))))","problem":59,"user":"4dc986d0535d5973398f9285"},{"problem":59,"code":"#(fn[& a](map(fn[e](apply e a))%&))","user":"54126d0ce4b01498b1a719d5"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n(map #(apply % args) funcs )))","user":"5950f0bfe4b066ee0a44ae9f"},{"code":"(fn [& fs]\n  (fn [ & xs] \n    (for [f fs]\n      (apply f xs))))","problem":59,"user":"4f32a7f1e4b0d6649770a095"},{"problem":59,"code":"(fn [& funcs]                                                                   \n  (fn [& args]                                                                  \n    (map #(apply % args) funcs)))","user":"563536f8e4b0bfe05bf117c5"},{"problem":59,"code":"(fn[& f]\n    (fn[& z](map #(apply % z) f)))","user":"53ed2fafe4b0d648e757f4c1"},{"code":"(fn jx [& fns]\r\n  (fn [& args]\r\n    (map #(apply % args) fns)))","problem":59,"user":"4dfd4ba8535d04ed9115e781"},{"problem":59,"code":"(fn [& fns] \n  (fn [& xs] \n    (map \n      (fn [f] (apply f xs)) \n      fns)))","user":"5a14228fe4b0ff51aa4b3193"},{"problem":59,"code":"(fn juxt2\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"51c8f1d8e4b07ef393169e5d"},{"problem":59,"code":"(letfn [(j [& fs]\n           (fn [& args]\n             (for [f fs]\n               (apply f args))))]\n  j)","user":"554b9c3ee4b0a04f79299594"},{"code":"(fn [& fs]\n  ;(fn [& x]\n    #(for [f fs]\n      (apply f %&)))","problem":59,"user":"5336a339e4b0e30313ee6c7d"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn f\n    ([& args] (map #(apply % args) fns))))","user":"5f37263de4b0574c87022c4e"},{"code":"(fn [& s] (fn [& r] (map #(apply % r) s)))","problem":59,"user":"4ebef65e535dfed6da9c6d9b"},{"problem":59,"code":"(fn juxtn [& fns]\n  (fn [& args]\n    (map #(apply %1 args) fns)\n    )\n  )","user":"525d44bfe4b0cb4875a45d6d"},{"code":"(fn my-juxt [& fxn-list] (fn [& args] (map #(apply % args) fxn-list)))","problem":59,"user":"514cfa27e4b019235f6c057d"},{"code":"(fn [ & fs ]\n  (fn [ & args ]\n    (map #(apply % args) fs)))","problem":59,"user":"4ec16c21535dfed6da9c6dac"},{"problem":59,"code":"(fn [& fs] (fn [& c] (map #(apply % c) fs)))","user":"5504dd64e4b086ebe8a79c83"},{"code":"(fn juxtaposition [& fns]\n  (fn [& args]\n    (loop [f fns acc []]\n      (if (empty? f)\n        acc\n        (recur (rest f) (conj acc (apply (first f) args)))))))","problem":59,"user":"4f046d70535dcb61093f6bc5"},{"code":"(fn [& f]\n  (fn [& x] (map #(apply % x) f)))","problem":59,"user":"4ef49c2c535dced4c769f238"},{"code":"(fn [& funs] (fn [& args] (map (fn [f] (apply f args)) funs)))","problem":59,"user":"5137c3b0e4b0509a8b470482"},{"code":"(fn mjuxt [& fns]\n  (let [fn-list (map (fn [x] (partial apply x)) fns)]\n    (fn [& xs] (map #(% xs) fn-list))))","problem":59,"user":"4f625f68e4b0defedf855fd2"},{"code":"(fn [& args1]\n  (fn [& args2]\n    (map #(apply % args2) args1)))","problem":59,"user":"50f9e74ee4b0e7c80cb15a54"},{"code":"(fn [& xs]\r\n  (fn [& args]\r\n   (for [f xs] (apply f args))))","problem":59,"user":"4fadbb17e4b081705acca23e"},{"problem":59,"code":"(fn yux [& funcs]\n  (fn [ & args ]\n    (loop [[head & tail] funcs\n           res []]\n      (if (nil? head) \n        res\n        (recur tail (conj res\n           (apply head args)))\n       ))))","user":"574e7be7e4b02ea114799242"},{"code":"(fn [& rest]\n  (fn [& args]\n    (map (fn [funct] (apply funct args))  rest)))","problem":59,"user":"52aa16d1e4b0c58976d9ac5a"},{"problem":59,"code":"(fn jx [& fns]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fns)))","user":"5fd8bcb3e4b05ac5b16ea11b"},{"code":"(fn a [& fs] (fn [& args] (for [f fs] (apply f args))))","problem":59,"user":"527a8eb7e4b03e8d9a4a755f"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] (mapv #(apply % args) fns)))","user":"4f3ca5a6e4b0e243712b1f53"},{"problem":59,"code":"(fn juxtaposition [& fs]\n  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fs)))","user":"57d57f65e4b0bd073c2023b3"},{"problem":59,"code":"(fn [& f] \n  (fn [& x] \n    (mapv #(apply % x) f)))","user":"5499e23de4b03163384f4706"},{"code":"(fn [& functions]\n  (fn [& args]\n    ((fn iter [functions-left result]\n      (if (empty? functions-left)\n        result\n        (iter (rest functions-left) (conj result (apply (first functions-left) args)))))\n      functions [])))","problem":59,"user":"4fe8e771e4b0547ebccb2431"},{"code":"(fn [& fns]\n  (fn [& stuff] \n    (loop [fs fns \n           result []] \n      (if (empty? fs) \n        result \n        (recur (rest fs) (conj result (apply (first fs) stuff)))))))","problem":59,"user":"524ae8e6e4b09eba1c0223b5"},{"code":"(fn [& fns] (fn [& arg] (for [f fns] (apply f arg))))","problem":59,"user":"4fa2fa5ee4b081705acca186"},{"code":"(fn [& fns]\n  (fn [& args]\n    (for [x fns] (apply x args))))","problem":59,"user":"52eb400ee4b0705949c4443b"},{"problem":59,"code":"(fn jux [& funcs]\n  (fn [& args]\n    (loop [f funcs\n           res []]\n      (if (empty? f) res\n        (recur (rest f) (conj res (apply (first f) args)))))))","user":"5475d755e4b0c51c1f4d72a0"},{"code":"(fn [& funcs] (fn [& input] (map #(apply % input) funcs) ))","problem":59,"user":"52bf6946e4b07a9af5792334"},{"problem":59,"code":"(fn [ & fns ]\n    (fn [ & args ]\n      (mapv #(apply %1 args) fns)))","user":"57ebbf3ae4b0bfb2137f5b66"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] f)))","user":"5e246f92e4b05b4b01516150"},{"problem":59,"code":"(fn [& fs] (fn [& coll] (map #(apply %1 coll) fs)))","user":"5b008bcae4b0cc2b61a3bd3d"},{"problem":59,"code":"(fn custom-juxt\n  [& args]\n  (fn [& x] (map #(apply %1 x) args))\n  )","user":"5c20b6abe4b07e362c230576"},{"problem":59,"code":"(fn [& op_coll] (partial (fn [ops & args] (map #(apply % args) ops)) op_coll))","user":"55f4ef68e4b06e875b46ce82"},{"code":"(fn [& fns]\n    (let [funs (vec fns)]\n      (fn [& args] \n        (map\n          (fn [inner] \n              (apply inner args))\n          funs\n        )\n      )\n    )\n  )","problem":59,"user":"52485723e4b05ef8e38e63d2"},{"problem":59,"code":"(fn [& fargs] (fn [& vargs] (loop [fs fargs res []]\n      (if (empty? fs) res\n        \t\t\t  (recur (rest fs) (conj res (apply (first fs) vargs))\n                       )\n        )\n                              )\n                )\n  )","user":"5be6d0f8e4b0f319e2d7ec51"},{"code":"(fn [& fl]\n    (fn [& args]\n      (vec (map #(apply % args) fl))))","problem":59,"user":"51aefceee4b09397d5109797"},{"problem":59,"code":"(fn [& fs] \n    (fn [v & vrest]\n      (vec (map #(if vrest (apply % (conj (vec vrest) v)) (% v)) \n        fs))))","user":"5a64dcabe4b0512ff01cd9a9"},{"code":"(fn [& f]\n  (fn [& a]\n    (map\n      #(apply % a)\n      f\n    )\n  )\n)","problem":59,"user":"4e307313535deb9a81d77f14"},{"problem":59,"code":"(fn answer-59 [& func_list]\n  (fn [& args]\n    (for [f func_list]\n      (apply f args))))","user":"53ef235de4b0d648e757f4d4"},{"code":"(fn mjuxt [& funcs]\r\n  (fn [& arg]\r\n    (reduce (fn [ary f](conj ary (apply f arg))) [] funcs)))","problem":59,"user":"4ddc620d535d02782fcbea06"},{"code":"(fn jux [& fs]\n   (fn [& args]\n     (map #(apply % args) fs)))","problem":59,"user":"529ce629e4b04e0c58e87b6e"},{"problem":59,"code":"(fn juxtapose [& fs]\n  (fn [& coll]\n    (loop [curr-func (first fs)\n           next-funcs (rest fs)\n           result []]\n      (if (empty? next-funcs)\n        (conj result (apply curr-func coll))\n        (recur (first next-funcs) (rest next-funcs) (conj result (apply curr-func coll)))))))","user":"53791ab7e4b06839e8705e4d"},{"code":"(fn[& o]\n        (fn[& a]\n              (map #(apply % a) o)))","problem":59,"user":"4e778d36535d324fb2983d71"},{"code":"(fn [& more]\n  (when-let [more more]\n    (fn [& args]\n      (map\n        #(apply %1 args)\n        more))))","problem":59,"user":"4f5c0549e4b0030a34fb2b1a"},{"code":"(fn [& fs]\n    (fn [& coll]\n      (map #(apply % coll) fs)))","problem":59,"user":"5125745ae4b05d10e3e395f9"},{"problem":59,"code":"(fn [f & more]\n  (fn [& args]\n    (map #(apply % args) (cons f more))))","user":"555a5731e4b0deb715856e44"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (let [fns (list* fns)]\n      (reduce #(conj % (apply %2 args)) [] fns))))","user":"5e724492e4b085ba37836dc7"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args] \n     (for [f fs]\n       (apply f args))))","user":"5566463ee4b0c656e3ff1831"},{"problem":59,"code":"(fn [& fs] (fn [& coll] (map #(apply % coll) fs)))","user":"510fe537e4b04c71fce993dd"},{"problem":59,"code":"; my first solution\n;   (fn [& functs]\n;     (fn [& args]\n;       (loop [fl functs, result []]\n;         (if (zero? (count fl))\n;           result\n;           (recur (rest fl) (conj result (apply (first fl) args)))))))\n\n; Thanks to eigenhombre for the tip to use \"for\"\n(fn [& functs]\n    (fn [& args]\n      (for [f functs] (apply f args))))","user":"540e0637e4b0addc1aec6717"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn [& args]\n    (mapv #(apply % args) fs)))","user":"53b39d82e4b047364c0444a6"},{"problem":59,"code":"(fn [& funcs] #(map (fn [fun] (apply fun %&)) funcs))","user":"56cd75bee4b0ea9b8538f74b"},{"problem":59,"code":"(fn [& fs]\n  (fn [& coll]\n    (map\n      #(apply % coll)\n      fs\n    )\n  )\n)","user":"53ca41dae4b00fb29b2212c8"},{"problem":59,"code":"(fn [ & fs ] (fn [ & vs ] (map #(apply % vs) fs)))","user":"559a9a3de4b066d22e731f45"},{"code":"(fn my-juxt [ & s]\n  (fn [ & s1 ]\n    (for [f s]\n      (apply f s1))))","problem":59,"user":"4ddb696b535d02782fcbe9fa"},{"code":"(fn  [& s]   \n  #(for [f s] (apply f %&))\n)","problem":59,"user":"4e6dd0f5535d5021c1a895f3"},{"code":"(fn [& fns] (fn [& args] (mapv #(apply % args) fns)))","problem":59,"user":"4ddbf54e535d02782fcbe9ff"},{"problem":59,"code":"(fn [& fns]\n  (fn [& els]\n    (reduce (fn [acc f]\n              (conj acc (apply f els)))\n            []\n            fns)))","user":"55912230e4b027778923767a"},{"problem":59,"code":"(fn jp [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","user":"53f053ebe4b0742d9025b0d3"},{"code":"(fn [ & fargs]\n  (fn [ & args ]\n    (map #(apply % args) fargs)))","problem":59,"user":"515f8a0de4b0e2be8aa20bce"},{"code":"(fn [& fns]\n  (fn [& ls]\n    (for [i fns] (apply i ls))))","problem":59,"user":"4de165f3535d08e6dec9fde6"},{"problem":59,"code":"(fn jxt\n  [& fns]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"585dbe41e4b0f14aab7c879f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args] (map #(apply % args) fs))\n  \n  )","user":"60c8e372e4b0e0fa5f1b42ff"},{"code":"(fn [& funs] (fn [& args] (for [f funs] (apply f args))))","problem":59,"user":"4ff76effe4b0678c553fc390"},{"problem":59,"code":"; to be improved. complexity: n * m\n(fn jt\n  ([x] (fn\n         ([a]   [(x a)])\n         ([a & args]  (reduce x (x a) args))))\n  ([x & fargs] (fn \n                ([a] (map #(% a) (cons x fargs))) ; apply each function to args\n                ([a & args] (map #(reduce % (cons a args)) (cons x fargs))) ; apply each function to args.\n                )))","user":"56051095e4b08b23635d3162"},{"code":"#(fn [& args] (loop [fns %& v []]\n  (if (empty? fns) v\n    (recur (next fns) (conj v (apply (first fns) args))))))","problem":59,"user":"4ec5d62c535d6d7199dd36ba"},{"problem":59,"code":"(fn [& args1]\n  (fn [& args2] \n    (loop [f args1 r[]]\n      (if (empty? f) r\n        (recur (rest f) (conj r (apply (first f) args2)))))))","user":"574abbfbe4b02ea114799200"},{"problem":59,"code":"(fn [& fs]\n  (fn [& ks] (map (fn [f] (apply f ks)) fs)))","user":"57717915e4b0979f896515b3"},{"problem":59,"code":"(fn [f & fs]\n     (fn [& xs]\n       (loop [f f fs fs ret []]\n         (if (empty? fs)\n           (conj ret (apply f xs))\n           (recur (first fs) (rest fs) (conj ret (apply f xs)))))\n       )\n     )","user":"5be0306be4b0ed4b8aab4c7d"},{"problem":59,"code":"(fn f [ & fs]\n  (fn \n    [& pars] \n    (map #(apply % pars) fs)))","user":"4e6a5728535d8ccf87e9fecf"},{"code":"#(fn [& args]\n    (map (fn [f] (apply f args)) %&))","problem":59,"user":"53409368e4b085b17e897daf"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n        (map #(apply % args) fns)\n    )\n)","user":"5990fcb9e4b0866487ed0d5b"},{"problem":59,"code":"(fn jxt\n  ([f g]   (fn [& args] (list (apply f args) (apply g args))))\n  ([f g h] (fn [& args] (list (apply f args) (apply g args) (apply h args)))))","user":"579d9601e4b05b1deef9ae18"},{"code":"(fn [& fns]\n  (fn [& x]\n    (vec (map #(apply % x) fns))))","problem":59,"user":"4eae5fe4535d7eef30807325"},{"code":"(fn [& funcs] (fn [& vals] (for [fn funcs] (apply fn vals))))","problem":59,"user":"533b1dc4e4b0e30313ee6cc7"},{"code":"(fn [& f]\n  (fn [& e]\n    (map #(apply % e) f)))","problem":59,"user":"51a10b2ce4b0b292b01ee3fe"},{"problem":59,"code":"(fn jux [& f]\n  (fn [& x]\n    (map #(apply % x) f)))","user":"54b95f3de4b0ed20f4ff6eab"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map \n     #(apply % args)\n     fs)\n    )\n  )","user":"56fbe0cce4b07572ad1a88d8"},{"code":"(fn [& f]\n  (fn [& args]\n    (map #(apply % args) f)))","problem":59,"user":"4fb2101ce4b081705acca284"},{"code":"(fn [& fs]\n    (fn [& xs]\n      (map #(apply % xs) fs)))","problem":59,"user":"4e8510e7535db62dc21a62e7"},{"problem":59,"code":"(fn jux [f & others]\n  (if others\n    (fn [& x]\n      (concat [(apply f x)]\n              (apply (apply jux others) x)))\n    (fn [& x] [(apply f x)])))","user":"57a0b341e4b0c3d858beb8d4"},{"problem":59,"code":"(fn [& args]\n  (fn [& args2]\n    (for [func args]\n         (apply func args2))))","user":"575683aee4b02ea1147992dc"},{"code":"(fn myjuxt\n  [& fns]\n  (fn\n    ([x] (into [] (map #(%2 %1) (repeat (count fns) x) fns)))\n    ([x & args] (into [] (map #(apply %2 %1) (repeat (count fns) (cons x args)) fns)))))","problem":59,"user":"50982769e4b04e098a4c726a"},{"code":"(fn jxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4e6a4950535d8ccf87e9febf"},{"problem":59,"code":"(fn my-juxt [& fs]\n\t(fn jxt [& arg]\n\t\t(map #(apply % arg) fs)\n\t)\n)","user":"57a9db97e4b0b8559636fc5b"},{"problem":59,"code":"(fn [& fns]\n (fn [& args] \n   (map #(apply % args) fns)))","user":"4df73d64535d04ed9115e775"},{"code":"(fn [& f] (fn [& v] (map #(apply % v) f)))","problem":59,"user":"4f9920a3e4b0dcca54ed6cfc"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (reduce (fn [result next-fn] (conj result (apply next-fn args)))\n            [] fs)\n\n    )\n\n  )","user":"569f4dabe4b0542e1f8d1491"},{"code":"(fn [& f] (fn [& x] (map #(apply %1 x) f)))","problem":59,"user":"519964cbe4b0aa09cbc0b849"},{"problem":59,"code":"(fn [& fs]\n  (fn [& v]\n    (reduce (fn [c f] (conj c (apply f v))) [] fs)\n  )\n)","user":"5df08767e4b093ff717275bf"},{"problem":59,"code":"(fn[& functions]\n  (fn [& parameters]\n    (map #(apply % parameters) functions)))","user":"54c72b19e4b045293a27f636"},{"problem":59,"code":"(fn [& a] (fn [& xs] (map #(apply % xs) a)))","user":"563ed73ae4b08d4f616f5ecb"},{"problem":59,"code":"(fn  [& args]\n  (fn [& args1]\n    (map #(apply % args1) args)))","user":"52ba2639e4b07a9af57922cb"},{"problem":59,"code":"(fn [& fs] \n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","user":"5eee7311e4b07c55ae4a0510"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (conj acc (apply f args)))\n            [] fs)))","user":"53fd66a4e4b0de5c418485e3"},{"problem":59,"code":"(fn j [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"58ef4db9e4b056aecfd47dc6"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce\n     #(conj  %1 (apply %2 args))\n     []\n     fns)))","problem":59,"user":"527ccaf4e4b0757a1b17136d"},{"problem":59,"code":"(fn for-juxt [& fs]\n  (fn [& args]\n    (vec \n      (for [f fs\n            :let [result (apply f args)]]\n        result) )))","user":"550e52dbe4b06e50f9beb165"},{"code":"(fn j [& args]\n   (fn [& x]\n      (map #(apply % x) args) \n   )   \n)","problem":59,"user":"4f7b6b90e4b06e829148e1a4"},{"code":"(fn [& fns]\n    (fn [& args]\n      (reduce (fn [acc f]\n                (conj acc (apply f args)))\n              []\n              fns)))","problem":59,"user":"5141abf1e4b02fd87f5064c3"},{"problem":59,"code":"(fn my-juxt [& fs]\n  #(mapv (fn [f] (apply f %&)) fs))","user":"59a24c92e4b066c664927d20"},{"problem":59,"code":"(fn [& fns]\n  ((fn [fns]\n     (fn [& params]\n       (map #(apply % params) fns))) fns))","user":"545bd22fe4b01be26fd7465a"},{"code":"(fn mapf [ & fcol] \n   (fn lambda\n     ([col]  (map  #(% col) fcol) )   \n     ([a & other] (let [cols (cons a other) ] \n                     (map #(apply % cols) fcol) \n                     )\n                   )\n  )\n )","problem":59,"user":"4f6d9d7ee4b07046d9f4efcd"},{"code":"(fn [& fns]\n  (fn [& args]\n    (vec (map #(apply % args) fns))))","problem":59,"user":"4f038355535dcb61093f6b04"},{"code":"(fn [& f]\n    (fn [& x]\n      (map #(apply % x) f)))","problem":59,"user":"4f58d92fe4b0a7574ea71858"},{"problem":59,"code":"(fn juxtapose [& fs]\n  (fn [& args]\n    (map #(apply %1 args) fs)))","user":"55f8fd70e4b03cbcff9738bc"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] funcs)))","user":"5b77d3c8e4b047b03b2036f1"},{"code":"(fn [ & fs]\n  (fn [ & args]\n    (map #(apply % args) fs)))","problem":59,"user":"4f03ac2d535dcb61093f6b4a"},{"problem":59,"code":"(fn [& functions]\n    (fn [& args]\n      (vec (map #(apply %1 args) functions))))","user":"5adf63a7e4b0837691e92c34"},{"code":"(fn juxtaposition [x & xs]\n  (fn [& args]\n    (map #(apply % args) (cons x xs))))","problem":59,"user":"4e16bdef535d04ed9115e7e9"},{"problem":59,"code":"(fn [& arg]\n    (fn [& arg1] (map #(apply % arg1) arg)))","user":"5dfa1c67e4b0a607a9a45cc5"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (vec\n    (for [f fs]\n      (apply f args)))))","user":"51dd5d6fe4b0c33a4e1da406"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n     (loop [[f & t] fs\n            res []]\n       (if (seq t)\n         (recur t (conj res (apply f args)))\n         (conj res (apply f args))))))","user":"56d9b06be4b0ea9b8538f7f8"},{"code":"(fn myjuxt [& fsq]\n   (fn [& args]\n     (for [f fsq]\n       (apply f args))))","problem":59,"user":"515737f0e4b0b0b4b87062d0"},{"code":"(fn [& fs]\n  (fn [& v]\n    (map #(apply % v) fs)))","problem":59,"user":"526439a4e4b03e8d9a4a70cc"},{"problem":59,"code":"(fn [& flist]\n  (fn [& args]\n    (map #(apply % args) flist)))","user":"5512aca6e4b055c2f668d4b4"},{"code":"(fn [& F]\n  #(for [f F]\n    (apply f %&)))","problem":59,"user":"4db85bdd535d1e037afb218d"},{"problem":59,"code":"(fn jux [& functions]\n    (fn [& params]\n            (reduce #(conj %1 (apply %2 params)) [] functions)))","user":"54f09599e4b024c67c0cf89d"},{"code":"(fn myjuxt2 [& fs]\n  (fn [& xs]\n   (for [f fs] (apply f xs))))","problem":59,"user":"4f91f5b1e4b0dcca54ed6ca7"},{"code":"(fn [& f]\n    (fn [& a]\n      (map apply f (repeat a))))","problem":59,"user":"4e6f578c535d5021c1a8961b"},{"problem":59,"code":"(fn juxtaposition [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"57e79d8ee4b0bfb2137f5afe"},{"problem":59,"code":"(fn jux [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args))\n    \n    funcs)\n  )\n)","user":"56393681e4b0bfe05bf117f2"},{"code":"(fn myjuxt[& fs](fn[& args](reduce #(conj % (apply %2 args)) [] fs)))","problem":59,"user":"5138d08be4b0a5db03d727db"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"536e5055e4b0fc7073fd6e6b"},{"code":"(fn [& fcoll] \n\t\t(fn [& xs] \n\t\t\t(map #(apply % xs) fcoll)))","problem":59,"user":"51ba4482e4b0fe3ecfb4642b"},{"problem":59,"code":"(fn [& fns]\n  (fn [x & more]\n    (if more\n      (let [args (cons x more)]\n        (map #(reduce % args) fns))\n      (map #(% x) fns))))","user":"58e58ae9e4b056aecfd47c9a"},{"problem":59,"code":";(fn [& fns] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fns)))\n\n(fn [& fns] (fn [& args] (map #(apply % args) fns)))","user":"53ecac57e4b0d648e757f4b3"},{"code":"(fn [& f]\n  (fn [& a]\n    ((fn [f r]\n       (if (empty? f)\n         r\n         (recur (rest f)\n                (concat r [(apply (first f) a)]))))\n     f [])))","problem":59,"user":"535d910ae4b04ce2eb3ed2c5"},{"problem":59,"code":"#(fn[& x] (reduce (fn[a i] (conj a (apply i x))) [] %&))","user":"5b210749e4b03cfeda66ed48"},{"problem":59,"code":"(fn [& f]\n  (fn [& xs] (map #(apply % xs) f)))","user":"5392bfdee4b0b51d73faaeb2"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)\n    )\n  )","user":"6004c750e4b074f607df6645"},{"problem":59,"code":"(fn [& fs]\n  (loop [fs fs f (fn [& u] [])]\n    (if (empty? fs) f\n      (recur (rest fs)\n             #(conj (apply f %&) (apply (first fs) %&))\n       )\n      )\n    )\n  )","user":"5547b72be4b0a04f79299550"},{"problem":59,"code":"(fn my-juxt [& funcs]\n\n  (fn inner [& args]\n    (map #(apply % args) funcs)\n    )\n\n  )","user":"59cc4d5ee4b0a024fb6ae5d0"},{"problem":59,"code":"(fn my-jux\n  [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","user":"57e9a77ae4b0bfb2137f5b35"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (map #(apply %1 args) fns)))","user":"5370d152e4b0fc7073fd6e9d"},{"code":"(fn [& fs] \r\n  (fn [& x]\r\n    (map #(apply % x) fs) ))","problem":59,"user":"4fabbb97e4b081705acca21d"},{"problem":59,"code":"(fn [& f]\n  (fn [& coll]\n    (map #(apply % coll) f)))","user":"57dd47f4e4b0bd073c20243e"},{"code":"(fn havefun\n  [& fs]\n  (fn [& args]\n    (loop [f (first fs)\n           fs' (rest fs)\n           ret [(apply f args)]]\n      (if (empty? fs')\n        ret\n        (let [fst (first fs')]\n          (recur fst (rest fs') (conj ret (apply fst args))))))))","problem":59,"user":"52c58561e4b0c2d177d620f8"},{"problem":59,"code":"(fn myjuxt\n  [& fs]\n  (fn [& input]\n    (map #(apply % input) fs)))","user":"5ce6f93be4b0a17bb84e2b99"},{"problem":59,"code":"(fn [& fs] \n  (fn [ & args] \n    (map #(apply % args) fs)))","user":"54e345a1e4b024c67c0cf7db"},{"problem":59,"code":"(fn [& fs]\n(fn [& args]\n(vec (for [f fs]\n(apply f args)))))","user":"54580586e4b01be26fd74616"},{"problem":59,"code":"(fn [& fs]\n      (fn [& args] (map #(apply % args) fs)))","user":"5409a12fe4b0addc1aec66df"},{"code":"(fn [& fs] (fn [& as] (for [f fs] (apply f as))))","problem":59,"user":"4f0cc259535d0136e6c22310"},{"code":"#(fn [& s] (map (fn [f] (apply f s)) %&))","problem":59,"user":"4eb97b2e535dfed6da9c6d54"},{"problem":59,"code":"(fn my-juxt [& fn-args]\n  (fn [& args]\n    (into [] (map #(apply % args) fn-args))))","user":"5c92105ce4b048ec896c59f7"},{"code":"(fn [& fs] #(map apply fs (repeat %&)))","problem":59,"user":"4f031eac535dcb61093f6a67"},{"problem":59,"code":"(fn z [& fns]\n  (fn [& args]\n    (loop [s fns ret [(apply (first s) args)]]\n      (if (next s) \n        (recur (next s) (conj ret (apply (first (next s)) args) ) )\n        ret))))","user":"572ac718e4b0f4d77e651242"},{"code":"(fn [& f] \n  #(for [x f] (apply x %&)))","problem":59,"user":"4f048f67535dcb61093f6bd3"},{"problem":59,"code":"(fn [& x]\n  (fn [& y]\n    (map #(apply % y) x ))\n  )","user":"57750460e4b0979f8965160c"},{"code":"(fn [& F] (fn [& a] (for [f F] (apply f a))))","problem":59,"user":"5107b86de4b05b2b4eee7495"},{"code":"(fn [& fs]\n    (fn [& args]\n      (loop [fs fs\n             answer []]\n        (if (nil? fs) answer\n            (recur (next fs) (conj answer (apply (first fs) args)))))))","problem":59,"user":"4e89e939535d3e98b8023287"},{"problem":59,"code":"(fn my-juxt [& fns]\n  ;; Return a function which accepts a variable number of args\n  (fn [& args]\n    (map\n     (fn [curr-fn]\n       ;; Apply those args to each function and store the result in a\n       ;; list (left-to-right)\n       (apply curr-fn args))\n     fns)))","user":"58327a08e4b089d5ab817c7c"},{"problem":59,"code":"(fn left-to-right-eval [& funcs]\n\t(fn [& args]\n\t\t(map\n\t\t\t#(apply % args)\n\t\t\tfuncs)))","user":"5aaa2dc3e4b0d174b936c8f1"},{"problem":59,"code":"(fn [& fncs]\n  (fn [& coll]  \n    (map #(apply % coll)\n         fncs)))","user":"540c54a7e4b0addc1aec6700"},{"problem":59,"code":"(fn j [& op] (fn [&  arg] (mapv #(apply % arg) op)))","user":"53286f84e4b09d4e7a9b5505"},{"code":"(fn j\n  ([f g]\n    (fn [& a]\n      [(apply f a) (apply g a)]))\n  ([f g h]\n    (fn [& a]\n      [(apply f a) (apply g a) (apply h a)])))","problem":59,"user":"4e6ebd4a535d5021c1a89610"},{"code":"(fn [& fs]\n  (fn [& s]\n    (for [f fs]\n      (apply f s))))","problem":59,"user":"51899891e4b0288ada3dbdab"},{"problem":59,"code":"(fn mjuxt [& fns] ( fn applyfns [& args](map (fn applyOne [fun] (apply fun args) ) fns )) )","user":"5aad79d9e4b073f177442578"},{"problem":59,"code":"(fn juxtapose [& funcs]\n  (fn [& args]\n    (into [] (map #(apply % args) funcs))))","user":"56f4cedce4b046a417f92063"},{"problem":59,"code":"(fn [& f] \n  (fn [& a]\n    (map #(apply % a) f)))","user":"5a91988ae4b002d099cae6f9"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (map #(apply % args) (map (fn [x] partial apply x) fns))))","user":"53ea5307e4b036ad0777e4e2"},{"code":"(fn [& f] (fn [& a] (map (fn [x] (apply x a)) f)  ))","problem":59,"user":"51e1c176e4b06a68e693eafb"},{"code":"(fn [& f]\n    (fn [& args]\n        (map #(apply % args) f)))","problem":59,"user":"51d28e15e4b0d13b04db0d9b"},{"code":"(fn jux\n  ([f] f)\n  ([f g]\n    (fn\n      ([]      [f g])\n      ([x]     [(f x) (g x)])\n      ([x y]   [(f x y) (g x y)])\n      ([x y z] [(f x y z) (g x y z)])\n      ([x y z & args] [(apply f x y z args) (apply g  x y z args)])))\n  ([f g h]\n    (fn\n      ([] (apply list f g h))\n        ([x] [(f x) (g x)  (h x)])\n        ([x y] [(f x y) (g x y)  (h x y)])\n        ([x y z] [(f x y z) (g x y z)  (h x y z)])\n        ([x y z & args] [(apply f x y z args) (apply g  x y z args) (apply h x y z args)]))))","problem":59,"user":"5245d29ae4b09dbe66b56174"},{"problem":59,"code":"(fn j [& fs] \n  (fn [& args]\n    (for [f fs] (apply f args))))","user":"5454b84ce4b0e397800069d9"},{"code":"#(fn [& x] (map apply %& (repeat x)))","problem":59,"user":"5014718fe4b094324338f8e3"},{"code":"(fn [& forms] (fn [& fargs] (map (fn [f] (apply f fargs)) forms)))","problem":59,"user":"5070e31ee4b0e3170b5a8678"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [v f]\n              (conj v (apply f args)))\n            []\n            fns)))","problem":59,"user":"51ce1320e4b0e42293a22551"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args)) funcs))\n           )","user":"5f9c4113e4b0715f5002d821"},{"code":"(fn [& fs] (fn [& args]\n  (into [] (map #(apply % args) fs))))","problem":59,"user":"4fa6d532e4b081705acca1be"},{"problem":59,"code":"(fn [& fargs] (fn [ & args ]\n                (concat (map #(apply % args) fargs))))","user":"59ff9424e4b01bb0ae8afd24"},{"code":"(fn [& fs]\n\t(fn [& xs]\n      (map #(apply % xs) fs)))","problem":59,"user":"4eb5750a535d7eef30807366"},{"problem":59,"code":"(fn juxt2 [f & funcs] {:pre (every? fn? (cons f funcs))}\n    (fn [& args]\n        (reduce (fn [res g] (conj res (apply g args))) [] (cons f funcs))\n    )\n)","user":"5db7376fe4b010eb3c36cd43"},{"code":"(fn [ & f]\n  (fn [ & xs]\n    (map #(apply % xs) f)))","problem":59,"user":"4e6f1b7a535d5021c1a89618"},{"code":"(fn f [& fs]\n  (fn [& args]\n    (for [ff fs]\n      (apply ff args))))","problem":59,"user":"52196842e4b0890f2f822bfa"},{"problem":59,"code":"(fn apna-juxt [& funs]\n  #_=>   (fn [& args]\n  #_=>     (map #(apply % args) funs)\n  #_=>     ))","user":"5e0cbc14e4b099d064962f8e"},{"problem":59,"code":"(fn juxtx\n  [& fs]\n  (fn [& gs] (map #(apply % gs) fs)))","user":"5b02a170e4b0cc2b61a3bd52"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (loop [res [] fs fs]\n      (if-let [[f & fs] fs]\n        (recur (conj res (apply f xs)) fs)\n        res\n        )\n      )\n    )\n  )","problem":59,"user":"5298d3f4e4b02ebb4ef75068"},{"problem":59,"code":"(fn my-juxt\n  ([] identity)\n  ([& fns]\n   (fn [& args]\n     (loop [ret (apply (first fns) args)\n            fns (next fns)\n            all-ret []]\n       (if (nil? fns)\n         (reverse (cons ret all-ret))\n         (recur (apply (first fns) args) \n                (next fns)\n                (cons ret all-ret)))))))","user":"5688a01be4b0dcc4269f406d"},{"code":"(fn [& fs]\n  (fn [& args] (reduce #(conj % (apply %2 args)) [] fs)))","problem":59,"user":"4e96557d535dbda64a6f6b43"},{"problem":59,"code":"(fn [& fns] (fn [& args](map #(apply % args) fns)))","user":"566a3a26e4b0a866af689699"},{"problem":59,"code":"(fn\n [& fns]\n (fn [& args]\n   (loop [[f & fs] fns acc []]\n     (if f\n       (recur fs (conj acc (apply f args)))\n       acc\n       )\n     )\n   )\n )","user":"56edf2dde4b04a395b9a044b"},{"problem":59,"code":"(fn [& f]\n  (fn [& xs]\n    (map (fn [a] (apply a xs)) f)))","user":"53aaaf7ae4b047364c044444"},{"problem":59,"code":"(fn [ & fns]\n               (fn [& args]\n                 (map #(apply % args) fns)))","user":"50a3ad0ee4b0ceace084d493"},{"code":"(fn [& fns]\n  (fn [& items]\n    (vec (map #(apply % items) fns))))","problem":59,"user":"4faa8de0e4b081705acca1f8"},{"problem":59,"code":"(fn [& fs]\n  (fn [& x] \n    (map #(apply % x) fs)))","user":"541096bde4b01498b1a719b2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (loop [accu []\n           my-fs fs]\n      (if (seq my-fs)\n        (let [my-f (first my-fs)\n              rest-f (rest my-fs)]\n          (recur (conj accu (apply my-f xs)) rest-f))\n        accu))))","user":"540d7dd1e4b0addc1aec6713"},{"code":"(fn [& funcs] (fn [& vars] (map #(apply %1 vars) funcs)))","problem":59,"user":"4f68c485e4b07046d9f4ef7c"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [a b]\n              (conj a (apply b args))) [] fs)))","user":"55d1f231e4b0e31453f64a4e"},{"problem":59,"code":"(fn my-juxt [& funs]\n  (fn [& args] (map #(apply % args) funs)))","user":"575b3e9be4b02ea11479935b"},{"problem":59,"code":"(fn myjunx [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"593910eae4b02506e01a29f4"},{"code":"(fn [& fs]\n  (fn [& n]\n    (map #(apply % n) fs)))","problem":59,"user":"52d1e364e4b0d9f9285948e7"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (loop [lst fns d []]\n      (if (empty? lst) d\n        (recur (rest lst) (conj d (apply (first lst) xs)))))))","user":"558378dce4b05c286339e115"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (for [f functions]\n      (apply f args))))","user":"5e99cbd4e4b0157ca96647e6"},{"problem":59,"code":"(fn jut [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"5df175bce4b03c219ef1a34d"},{"problem":59,"code":"(fn juxta [& fns]\n    (fn [& args]\n      (vec (map #(apply % args) fns))))","user":"5974d2ede4b01722bebd4cb6"},{"problem":59,"code":"(fn [& x]\n  (fn [& i]\n    (map #(apply % %2) x (repeat (count x) i))))","user":"566d71b1e4b0a866af6896ca"},{"problem":59,"code":"(fn juxt-home-made [& fs]\n  (fn [& args]\n    (reduce\n     #(conj %1 (apply %2 args))\n     []\n     fs)))","user":"5ed52854e4b016b56eae05d2"},{"code":"(fn [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","problem":59,"user":"4fa340b4e4b081705acca18c"},{"problem":59,"code":"(fn [& s] (fn [& t] (map #(apply % t) s)))","user":"5457e5f1e4b01be26fd74613"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"53c126fce4b00fb29b22125b"},{"problem":59,"code":"(fn jux[& args]\n  (fn [& nargs]\n    (map #(apply % nargs) args)\n    )\n  )","user":"5545477fe4b0a04f79299531"},{"code":"(fn [ & fx ]\n    (fn [ & args ]\n        (map #(apply %1 args) fx)))","problem":59,"user":"51f59607e4b0abb92f97f9d5"},{"code":"(fn [& f]\r\n  (fn [& a] (map #(apply % a) f)))","problem":59,"user":"4df1ce44535d08e6dec9fe1f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map apply fs (cycle [args]))))","user":"580bd81ee4b0849f6811b711"},{"code":"(fn [& fncs]\n    (fn [ & args]\n      (map #(apply % args) fncs)))","problem":59,"user":"5124619ae4b02c3f2a072ccd"},{"problem":59,"code":"(fn [& functions]\n   (fn [& args]\n     (map\n      (fn [function]\n        (apply function args)) functions)))","user":"5e12b4ffe4b099d064962fec"},{"code":"(fn [& F] (fn [& L] (for [f F] (apply f L))))","problem":59,"user":"4f8c5f4fe4b02e764a0a5198"},{"code":"(fn [& fs] \n          (fn [& args]\n              (mapcat identity (rest (reverse (reduce \n                #(conj %1 (list (apply %2 (last %1))))\n                (list args)\n                fs\n              ))))\n          ))","problem":59,"user":"52b1d41ce4b0c58976d9ace6"},{"code":"(fn [& funcs] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] funcs)))","problem":59,"user":"50310b8be4b05b7df5a0b84d"},{"problem":59,"code":"(fn my-juxt [& funcs]\n\t(fn [& args]\n\t\t(mapv #(apply % args) funcs)))","user":"57644395e4b0994c1922fbf2"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [r e]\n      (conj r (apply e args)))\n[]\n  fns)))","problem":59,"user":"4fca2a13e4b0ee37620e184d"},{"code":"(fn myjuxt [& fs]\n  (fn [& vs]\n    (map #(apply %1 vs) fs)\n    )\n  )","problem":59,"user":"50bc4e73e4b0594b91591c3d"},{"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"4e7263a1535d5021c1a8965f"},{"code":"(fn blah \n    ([f & more] \n     (fn ([& args] (cons (apply f args) (apply (apply blah more) args)))))\n    ([] (fn [& args] nil)))","problem":59,"user":"4f17aa97535d64f603146456"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map\n     (fn [f] (apply f args))\n     fns)\n  )\n )","user":"5a66fddee4b0512ff01cd9d7"},{"problem":59,"code":"(fn f [& fns]\n  (fn f [& args]\n    (map #(apply % args) fns)))","user":"5cada3b8e4b026601754b872"},{"code":"(fn [& farr]\n  #(map (fn [x](apply x %&))  farr)\n)","problem":59,"user":"52da20c7e4b09f7907dd13b3"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args] (for [f fs] (apply f args))))","user":"4e837808535db62dc21a62d9"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args] (map (fn [f] (apply f args)) funcs)))","user":"5dd90651e4b0948ae9d9ad97"},{"problem":59,"code":"(fn [& f] \n   (fn [& args]\n     (map #(apply %1 args) f) \n   )\n)","user":"55eeb37ae4b0121d4835fdf3"},{"code":"(fn jx [& x]\r\n  (fn [& args]\r\n    (map (fn[n] (apply n args)) x)))","problem":59,"user":"4e9def6b535dbda64a6f6b8f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)\n    )\n  )","user":"5d8044f6e4b0915913b1d368"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (map #(apply % a)\n         f)))","user":"559d33b3e4b0ec2b359424d9"},{"problem":59,"code":"(fn j [& fs]\n  (fn [& x]\n    (loop [v [] f fs]\n      (if (empty? f)\n        v\n        (recur (conj v (apply (first f) x)) (rest f))))))","user":"56588f4ee4b0f9d632dd84b6"},{"problem":59,"code":"(fn juxtaposition [& f]\n  (fn [& args]\n    (map  #(apply %  args) f)))","user":"5e92adb6e4b0fbed045a37ea"},{"code":"(fn foo [& ops] (fn bar [& vals] (map #(apply % vals) ops) ) )","problem":59,"user":"4e8d5edd535d65386fec2134"},{"code":"(fn jxt [& args]\n  (partial \n   (fn [acc fns & n]\n       (if (empty? fns) acc\n         (recur \n          (conj acc (apply (first fns) n)) \n          (rest fns) n))) '() (reverse args)))","problem":59,"user":"5273e006e4b03e8d9a4a7495"},{"problem":59,"code":"(fn\n        ([f] \n         (fn\n           ([] [(f)])\n           ([x] [(f x)])\n           ([x y] [(f x y)])\n           ([x y z] [(f x y z)])\n           ([x y z & args] [(apply f x y z args)])))\n        ([f g] \n         (fn\n           ([] [(f) (g)])\n           ([x] [(f x) (g x)])\n           ([x y] [(f x y) (g x y)])\n           ([x y z] [(f x y z) (g x y z)])\n           ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n        ([f g h] \n         (fn\n           ([] [(f) (g) (h)])\n           ([x] [(f x) (g x) (h x)])\n           ([x y] [(f x y) (g x y) (h x y)])\n           ([x y z] [(f x y z) (g x y z) (h x y z)])\n           ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n        ([f g h & fs]\n         (let [fs (list* f g h fs)]\n           (fn\n             ([] (reduce #(conj %1 (%2)) [] fs))\n             ([x] (reduce #(conj %1 (%2 x)) [] fs))\n             ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n             ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n             ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","user":"57e6f90de4b0bfb2137f5af6"},{"problem":59,"code":"(fn juxt' [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5576f299e4b05c286339e077"},{"code":"#(fn [& x] (for [y %&] (apply y x)))","problem":59,"user":"526a7025e4b03e8d9a4a722a"},{"code":"(fn my-juxt [& fns]\n  (fn juxt-fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"5264301fe4b03e8d9a4a70ca"},{"code":"(fn [& fs]\n  #(for [f fs] (apply f %&)))","problem":59,"user":"520693e1e4b0bf4f1882c829"},{"code":"(fn [ & args ] (fn [& x] (loop [ft args res []] (if (empty? ft) res\n\t(recur (rest ft) (conj res (if (= 1 (count x)) ((first ft) (last x)) (apply (first ft) x))))))))","problem":59,"user":"51c09719e4b0c9c82288293c"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (for [j funcs]\n      (apply j args))))","user":"607d6bc1e4b03d835a6eaecc"},{"code":"(fn [& fs]\n  (fn [& data]\n    (map #(apply % data) fs)))","problem":59,"user":"4fa5406fe4b081705acca1ac"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n   (for [f fs]\n     (apply f args))))","user":"5b500215e4b02d533a91bce2"},{"problem":59,"code":"(fn myjuxt [& funcs]\n  (fn [& args]\n    (if (= 1 (count args))\n      (vec (map #(% (first args)) funcs))\n      (vec (map #(apply % args) funcs)))))","user":"51456858e4b0e88796073408"},{"code":"#(fn [& v]\n  (for [f %&]\n     (apply f v)\n  )\n)","problem":59,"user":"5176afd2e4b085adf681d889"},{"problem":59,"code":"(fn \n  [& fns]\n\t#(reduce (fn [coll f] (conj coll (apply f %&))) (vector) fns))","user":"5630471ce4b073c1cf7a9be4"},{"problem":59,"code":"(fn [& other-fns]\n  (fn [& inputs]\n    (loop [ret '()\n           other-fns other-fns]\n      (if (empty? other-fns)\n        ret\n        (recur (concat ret (list (apply (first other-fns) inputs))) (rest other-fns))))))","user":"5918db70e4b09b4ee5954bbb"},{"problem":59,"code":"(fn [& fs] (fn [& as] (mapv #(apply % as) fs)))","user":"5a4de614e4b05d388ecb6bb1"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n      (map\n      #(apply % args)\n      funcs)\n  )\n)","user":"5991d2fae4b0866487ed0d68"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn \n    [& args]\n    (loop [v []\n           fns fns]\n      (if\n        (empty? fns)\n        v\n        (recur (cons (apply (last fns) args) v)\n               (drop-last fns))))))","user":"5586f418e4b059ccff29b1de"},{"code":"(fn [& fct]\n  (fn [& args] \n    (map #(apply % args) fct)\n  )\n)","problem":59,"user":"52d42021e4b09f7907dd132a"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (map\n       #(apply % args)\n       fns)))","user":"56050f06e4b08b23635d3161"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n     (map #(apply % xs) fs)));;\n\n\n;;;map will call the function (fn [f] (apply f xs)) on each of the functions in fs and then return the results after all functions in fs have been used.\n\n;;;map takes each function in turn from fs and gives it to the inline function as an argument and its assigned to f.  Then we apply f to the data represented by xs.\n\n;;so map first gets + from fs and gives it to the function as f and then you get (apply + [2 3 5 1 6 4]).  \n;;Next time map will get max from fs and give it to the inline function as f.  Finally map gets the min function from fs and its assigned to f to be applied. \n;;As there are no more functions to get from fs, map will then return all the results from applying each function to xs.","user":"5ce5b43be4b0a17bb84e2b7a"},{"problem":59,"code":"(fn answer [& functions]\n  (fn [& args]\n    (reduce\n      (fn [res item]\n        (conj res (apply item args)))\n      []\n      functions)\n    ))","user":"5e491182e4b043cd24807a46"},{"code":"(fn [& fs]\n  (fn [& arg]\n    (for [f fs]\n      (apply f arg))))","problem":59,"user":"52747090e4b03e8d9a4a74a5"},{"code":"(fn [& f]\n  (fn [& x]\n    (map #(reduce % (% (first x)) (rest x)) f)))","problem":59,"user":"51256b40e4b05d10e3e395f8"},{"code":";; (map #(apply % [2 3 4]) [+ max])\n(fn [& f] (fn [& v] (map #(apply % v)f)))","problem":59,"user":"5307e4ece4b02e82168697a9"},{"code":"(fn\r\n  ([f]\r\n     (fn\r\n       ([] [(f)])\r\n       ([x] [(f x)])\r\n       ([x y] [(f x y)])\r\n       ([x y z] [(f x y z)])\r\n       ([x y z & args] [(apply f x y z args)])))\r\n  ([f g]\r\n     (fn\r\n       ([] [(f) (g)])\r\n       ([x] [(f x) (g x)])\r\n       ([x y] [(f x y) (g x y)])\r\n       ([x y z] [(f x y z) (g x y z)])\r\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\r\n  ([f g h]\r\n     (fn\r\n       ([] [(f) (g) (h)])\r\n       ([x] [(f x) (g x) (h x)])\r\n       ([x y] [(f x y) (g x y) (h x y)])\r\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\r\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)]))))","problem":59,"user":"4e79ff2a535db169f9c796a9"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (map #(apply % args)\n         functions)))","user":"54cc26c1e4b057c6fda3a28a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (mapcat \n     #(list (apply % args))\n     fns)))","user":"5835cb06e4b089d5ab817cea"},{"problem":59,"code":"(fn\n  [& funcs]\n  (fn\n    [& args]\n    (map #(apply % args) funcs)))","user":"5640b135e4b08d4f616f5ee8"},{"code":"(fn jxt [& fns]\n  (fn [& args]\n    (vec (for [f fns] (apply f args)))))","problem":59,"user":"50366589e4b0fbe0a74d26c3"},{"problem":59,"code":"(fn [& args] (fn [& d] (map apply (vec args) (repeat (vec d)))))","user":"4e5e9f6b535d8a8b8723a2d2"},{"problem":59,"code":"(fn [& args]\n  (fn [& y] (for [f args] (apply f y))))","user":"58a0fc33e4b02bd94d917ea3"},{"problem":59,"code":"(fn j [& fs]\n  (fn [& args] (map #(apply % args) fs)))","user":"5d45749be4b07c84aa5ae6a2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n  (reduce \n   (fn [sq f] \n     (conj sq (apply f args)))\n   [] fs)))","user":"565b941ce4b068f2fe63dc07"},{"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","problem":59,"user":"4f2e0369e4b0d6649770a064"},{"problem":59,"code":"(fn [& fns]\n  #(mapv (fn [f] (apply f %&)) fns))","user":"5455c2f3e4b080a794c2c87d"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"58d27bcae4b03c36ff7e58fe"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args] (map #(apply % args) funs))\n)","user":"54e5bdf2e4b024c67c0cf7fe"},{"problem":59,"code":"(fn [& funs] (fn [& coll] (map #(apply % coll) funs)))","user":"55f5c118e4b06e875b46ce8e"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce \n   \t  (fn [acc f] (conj acc (apply f xs)))\n      []\n      fs)))","user":"5d97b602e4b0d3f9b434ad3a"},{"code":"(fn __ [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4ec9549d535d6d7199dd36fe"},{"problem":59,"code":"(fn juxtaposition [& funcs]\n  (fn [& p]\n      (loop [fs funcs\n             , out []]\n\n        (if (empty? fs)          \n          out \n          (recur\n            (rest fs)\n            (conj out (apply (first fs) p) )\n          )\n        )\n      )\n  )\n)","user":"571aae1fe4b07c98581c3b5a"},{"code":"(fn [& fs] (fn [& xs] (mapv apply fs (repeat xs))))","problem":59,"user":"503a234de4b088a6a14ca76d"},{"code":"(fn [& f]\n  (fn [& v]\n    (vec (map #(apply % v) f))))","problem":59,"user":"4e707db6535d5021c1a8963a"},{"problem":59,"code":"(fn [& fs] (fn [& ps] (map #(apply % ps) fs)))","user":"5368fedee4b0243289761e93"},{"code":"(fn my-juxt [f & fs]\n  (fn [x & args] (reduce #(conj %1 (apply %2 x args)) [] (list* f fs))))","problem":59,"user":"4ed6238d535d10e5ff6f52de"},{"problem":59,"code":"(fn [& args] (fn [& x] ( reduce #(concat %1 (list (apply %2 x))) () args )))","user":"596f6683e4b069c0a1a19877"},{"problem":59,"code":"(fn [& a] (fn [& b] (vec (for [x a] (apply x b)))))","user":"5b99a0a3e4b0c0b3ffbd4ad7"},{"code":"(fn [& funs] (fn [& args] (map #(apply % args) funs)))","problem":59,"user":"4f0c4518535d0136e6c2230b"},{"code":"(fn jx [& ops]\n  (fn [& args]\n    (map #(apply % args) ops)))","problem":59,"user":"4ec6559a535d6d7199dd36c9"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (partial (fn [output [func & otherfuncs] & args]\n             (if (nil? func)\n               (into '() output)\n               (recur (cons (apply func args) output) otherfuncs args))) '() funcs))","user":"58db362be4b0a4d5acaab675"},{"code":"(fn [& functions]\n  (fn [& args]\n    (loop [fun functions\n           stack []]\n      (if (< 0 (count fun))\n        (recur (rest fun)\n        (concat stack [(apply (first fun) args)]))\n      stack))))","problem":59,"user":"52b152fbe4b0c58976d9acdc"},{"code":"(fn prob-0059\n  [& in-funs]\n  (fn [& args]\n    (loop [rans ()\n           fs   in-funs]\n      (if fs\n        (recur (cons (apply (first fs) args) rans) (next fs))\n        (reverse rans)))))","problem":59,"user":"4f047c07535dcb61093f6bcd"},{"problem":59,"code":"(fn [& fns] #(for [fn fns] (apply fn %&)))","user":"544673c0e4b032a45b8693b0"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [acc item]\n             (conj acc (apply item args)))\n            [] \n            fns)))","user":"58bc6a88e4b0888cdc949d16"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (loop [fns-iter fns result []]\n        (if (empty? fns-iter)\n          result\n          (recur (rest fns-iter) (conj result (apply (first fns-iter) args)))))))","user":"57147cd9e4b07c98581c3abf"},{"code":"(fn benext [& fns]\n\t(fn [& args]\n\t\t(map #(apply % args) fns)\n\t\t)\n\t)","problem":59,"user":"527ba695e4b03e8d9a4a7596"},{"code":"(fn [& fs] (fn [& args] (map #(apply %1 args) fs)))","problem":59,"user":"4f8c813de4b02e764a0a519f"},{"problem":59,"code":"(fn [& a]\n  (fn [& b]\n    (map #(apply % b) a)))","user":"577ab41fe4b0d3393e5deb05"},{"code":"(fn usercomp [& funcs]\n  (fn [& coll]\n    (map\n      #(apply %1 coll)\n      funcs)))","problem":59,"user":"52dad8bde4b09f7907dd13be"},{"problem":59,"code":"( fn [ & fs]\n  ( fn [ & args ]\n   (map #(apply % args) fs)\n  )\n)","user":"5ac85708e4b0e27600da77ac"},{"code":"(fn [& a] (fn [& b] (for [f a] (apply f b))))","problem":59,"user":"52c6a0abe4b0c2d177d62111"},{"problem":59,"code":"(fn juxt-me\n    [& args-f]\n    (fn [& f-args]\n      (reduce #(conj %1 (apply %2 f-args)) [] args-f)))","user":"5ab23c99e4b073f1774425e2"},{"code":"(fn [x & xs]\n  (fn [& args]\n    (map #(apply % args) (cons x xs))))","problem":59,"user":"4e9e6bd6535dbda64a6f6b96"},{"problem":59,"code":"(fn myJuxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n    ))","user":"594263cbe4b060784b3b790a"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (map #(apply %1 xs) fs)))","problem":59,"user":"51004dabe4b0e0dde55c17f0"},{"code":"(fn  [& fs]\n  (fn [& args]\n    (map #(apply %1 args) fs)))","problem":59,"user":"5142e808e4b0c172af7558c9"},{"problem":59,"code":"(fn [& my-funcs]\n  (fn [& args]\n    (map #(apply % args) my-funcs)))","user":"5a84cf8de4b00b71e582a095"},{"code":"(fn [ & fns]\n  (fn [ & coll]\n    (map #(apply % coll) fns)))","problem":59,"user":"51eec1a6e4b0871fa145d98d"},{"problem":59,"code":"(fn func [& f]\n  (fn [& args]\n    (map #(apply % args) f)\n  )\n)","user":"575ebba3e4b08062f99a4e70"},{"code":"(fn\n  [& fns]\n  (fn\n    [& args]\n    (for [f fns]\n      (apply f args))))","problem":59,"user":"511b233ae4b07ab9ec456180"},{"problem":59,"code":"(fn [& fns]\n  (fn [& targets]\n    (for [f fns]\n      (apply f targets))))","user":"545e9cf1e4b01be26fd7467f"},{"problem":59,"code":"(fn [& args]\n    (fn [& coll]\n        (map #(apply % coll) args)))","user":"570794d8e4b0b0fb43fd068b"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))\n    ;(vector (apply (first funs) args) (apply (second funs) args))))","user":"5478e57de4b0c51c1f4d72c1"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (map (fn [f] (apply f xs)) fs)))","problem":59,"user":"4e68dbd5535d8ccf87e9fe8f"},{"code":"(fn juxt* [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","problem":59,"user":"52ab6de1e4b0c58976d9ac78"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (vec\n      (map #(apply % xs)\n           fns))))","problem":59,"user":"50978ca4e4b00ad8bab4e966"},{"code":"(fn juxt_[& fns] (fn [& xs] (map #(apply % xs) fns)))","problem":59,"user":"4f320253e4b0d6649770a08d"},{"problem":59,"code":"(fn [& f] (fn [& args] (map #(apply %1 args) f )))","user":"5fa96ddbe4b0fa27300f3dec"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [x] (apply x args)) fs)))","problem":59,"user":"517adc6ce4b0925c997201c4"},{"problem":59,"code":"(fn\n    [& x]\n    (fn\n      [& a]\n      (map #(apply % a) x)))","user":"542f574be4b0dad94371f2d0"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [r f] (conj r (apply f args))) [] fs)))","user":"5956c6dae4b066ee0a44af61"},{"problem":59,"code":"#(fn [& args] \n     (let \n      [fun %&]\n      (for [f fun] (apply f args))))","user":"59ddae03e4b01968742fed65"},{"code":"(fn [& funs]\n  (fn [& args] (map #(apply % args) funs)))","problem":59,"user":"4fe8b6afe4b07c9f6fd12c76"},{"code":"(fn [& fns]\n    (fn [& args]\n      (reduce (fn [res f] (conj res (apply f args)))\n              []\n              fns)))","problem":59,"user":"4e80aa10535db62dc21a62b1"},{"problem":59,"code":"(fn [& fns]\n  (fn [& data] (reduce (fn [acc f] (conj acc (apply f data))) [] fns)))","user":"4fc5eb7fe4b0ee37620e1803"},{"code":"(fn [& f](fn [& a](map #(apply % a) f)))","problem":59,"user":"4f0446f9535dcb61093f6bb8"},{"problem":59,"code":"(fn my-juxt[& myfns](fn[& a](map #(apply % a) myfns)))","user":"538e29d1e4b0b51d73faae80"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn\n    [& args]\n    (map #(apply % args) fs)))","user":"566f7749e4b0a866af6896e9"},{"code":"(fn my[& f]\n  (fn [& x]\n    ((fn[functions]\n       (for [function functions] (apply function x))) f)))","problem":59,"user":"4fb86dc9e4b081705acca2d8"},{"problem":59,"code":"(fn my-juxt [f & fs]\n  (fn [arg & args]\n    (concat (list (apply f arg args)) (map #(apply % arg args) fs))))","user":"589f37e0e4b02bd94d917e79"},{"code":"(fn j [& f]\r\n  (fn [& x]\r\n  (vec (map #(apply % x) f))))","problem":59,"user":"4facd2fae4b081705acca22f"},{"problem":59,"code":"(fn problem-59 [& fs]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (conj acc (apply f args)))\n            []\n            fs)))","user":"5d669613e4b0db5d338d15ea"},{"problem":59,"code":"(fn [& ops]\n  (fn [& args] \n    (map #(apply % args) ops)))","user":"591f05b4e4b09b4ee5954c42"},{"code":"(fn [& fs]\n       #(for [f fs] (apply f %&)))","problem":59,"user":"4e5676b2535d8a8b8723a282"},{"problem":59,"code":"(fn mapfs [& fs] (fn [& xs] (into [] (map #(apply %1 xs) fs))))","user":"5566d812e4b0c656e3ff1837"},{"code":"(fn jux [& fns]\n  (fn [& args]\n    (loop [result [], todo fns]\n      (if (empty? todo)\n        result\n        (recur (conj result (apply (first todo) args)) (rest todo))\n        )\n      )\n    )\n  )","problem":59,"user":"50fd9fd4e4b033b9c38d78d0"},{"problem":59,"code":"(fn [& fns]\n  (let [fapply (fn [f args]\n                 (if (coll? (first args))\n                   (f (first args)) (apply f args)))]\n    (fn [& args]\n      (map (fn [f] (fapply f args)) fns))))","user":"5fac50f4e4b08cb800c85ae5"},{"code":"(fn juxtapose [& caller-funcs]\r\n    (fn f [& x]\r\n      (reverse (loop [funcs caller-funcs results '()]\r\n        (if (empty? funcs)\r\n          results\r\n          (recur (rest funcs) (cons (apply (first funcs) x) results)))))))","problem":59,"user":"4f039524535dcb61093f6b2c"},{"code":"(fn \n  [& fns]\n  (fn \n    [& args]\n    \n    (map #(apply % args) fns)))","problem":59,"user":"53736f65e4b06d7f452d9e0f"},{"code":"(fn [& fs]\n  (fn [x & args]\n    (loop [fs fs\n           r []]\n      (if (nil? (first fs))\n        r\n        (if (nil? args)\n          (recur (rest fs) (concat r (vector ((first fs) x))))\n          (recur (rest fs) (concat r (vector (apply (first fs) x args)))))))))","problem":59,"user":"5123ac8ee4b061b4c6f0e0b1"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (into [] (map #(apply % args) fns))))","user":"57f80350e4b0d3187e90090c"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (reduce (fn [acc f]\n              (conj acc (apply f xs)))\n            []\n            fns)))","user":"5db35f85e4b010eb3c36cd22"},{"code":"(fn [& args]\n  (fn [& coll]\n    (loop [result [] funs args]\n      (if (empty? funs)\n        result\n        (recur (conj result (apply (first funs) coll)) (rest funs))\n        ))\n   ))","problem":59,"user":"51da7e49e4b02ceefd947768"},{"problem":59,"code":"(fn [& fns]\n  (fn [& params]\n    (loop [fs fns\n           result ()]\n      (if (empty? fs)\n        (reverse result)\n        (recur (rest fs)\n               (cons (apply (first fs) params) result))\n))))","user":"5954cea2e4b066ee0a44af0a"},{"problem":59,"code":"(fn[& fns]\n  (fn[& args]\n    (for [f fns](apply f args))))","user":"56163cc1e4b06b1bb21829ff"},{"problem":59,"code":"(fn [& f] #(for [x f] (apply x %&)))","user":"549c3e0ce4b0f3d1d8e70f87"},{"code":"(fn [& funcs]\n  (fn foo [& args]\n    (for [func funcs] (apply func args))))","problem":59,"user":"4f4f08c8e4b03ad3f0c10cd8"},{"code":"(fn [& fs] (fn [& x] (reduce (fn [l f] (conj l (apply f x))) [] fs)))","problem":59,"user":"535920b2e4b04ce2eb3ed294"},{"code":"(fn [& fs]\n      (fn [& ar]\n\t\t(concat (for [f fs]\n\t\t\t     (apply f ar)))))","problem":59,"user":"4de18de7535d08e6dec9fde8"},{"problem":59,"code":"(fn [& all-fns] \n  (fn [& args]\n    (map #(apply % args) all-fns)))","user":"57c0393be4b05aa3c4741c90"},{"problem":59,"code":"(fn var-juxt\n  [& fs]\n  (fn [& args]\n      ((fn [fns sols]\n          (if (empty? fns)\n              sols\n              (recur (next fns) (conj sols (apply (first fns) args)))))fs [])))","user":"55acd080e4b03311e7b73298"},{"code":"(fn [& fs]\n  (fn [& x]\n    (for [f fs]\n      (apply f x))))","problem":59,"user":"4fd7962ee4b0dab7d829f385"},{"problem":59,"code":"(fn [& args]\n  (fn [& elems]\n    (map #(apply % elems) args)))","user":"5a527beee4b05d388ecb6bfe"},{"problem":59,"code":"#(fn [& args] (vec (for [f %&] (apply f args))))","user":"582e0afde4b051871117bfd5"},{"code":"(fn [ & ffs]\n  (fn [ & args]\n  (for [f ffs](apply f args))))","problem":59,"user":"51696bcde4b03f62cda68ce7"},{"problem":59,"code":"(fn [& funs] (fn [& args]   (for [f funs] (apply f args))    ))","user":"56cad309e4b0ea9b8538f720"},{"problem":59,"code":"(fn [& fs]\n  (fn [& params] \n    (map #(apply % params) fs)))","user":"56288ccae4b00e49c7cb47ea"},{"problem":59,"code":"(fn my-juxt [& fs] \n  (fn [& xs] \n    (map #(apply % xs) fs)))","user":"56fa2905e4b07572ad1a88be"},{"problem":59,"code":"(fn myjuxt\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"54145050e4b01498b1a719ea"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply %1 args) (list* fs))))","user":"59b9e669e4b0a024fb6ae3db"},{"problem":59,"code":"(fn jxt [ & fns ] (fn [ & args ] (for [f fns] (apply f args))))","user":"526e5159e4b03e8d9a4a7316"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn f [& args]\n    ;; I did the bottom part... not sure why i needed to add a fn w/i a fn\n    (map #(apply % args) fns)))","user":"5b477969e4b02d533a91bc6f"},{"code":"(fn jux\r\n  [& funcs]\r\n\t(fn [& args] (for [f funcs] (apply f args))))","problem":59,"user":"4e8a0c82535d3e98b802328d"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (loop [f fs a args r []]\n      (if (empty? f)\n        r\n        (recur (rest f) a (conj r (apply (first f) a)))))))","user":"561a1af6e4b053970a773b02"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args)\n         fns)))","user":"57c45e64e4b05aa3c4741ccf"},{"problem":59,"code":"(fn [& x]\n  (fn [& y] (for [z x] (apply z y))))","user":"574a71b7e4b02ea1147991fb"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce #(cons (apply %2 args) %1) '() (reverse funcs))))","user":"5d9c1226e4b0d3f9b434ad51"},{"code":"(fn [& fs]\n  (fn [& a] (for [f fs] (apply f a))))","problem":59,"user":"5370f8ede4b0fc7073fd6ea2"},{"problem":59,"code":"(fn [& fns] (fn[& args] (map #(apply % args) fns)))","user":"58c1b4f5e4b021aa9917ed01"},{"code":"(fn jxt [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"53307da1e4b019098a6f8b5e"},{"code":"(fn [& funcs]\n  (fn [ & args]\n    (reverse(reduce\n      (fn [n m]\n        (conj n (apply m args))\n      )\n      '()\n      funcs\n    ))\n  )\n)","problem":59,"user":"4f8ea1f7e4b0d4e659cdde69"},{"problem":59,"code":"(fn f0 [g & gs]\n  (letfn [(f1 [g, gs, acc]\n    (fn [& args]\n      (if (not (empty? gs))\n        (apply (f1 (first gs) (rest gs) (conj acc (apply g args))) args)\n        (conj acc (apply g args)) )))]\n    (f1 g gs [])))","user":"5d7eaf5fe4b0492f5d910fc3"},{"code":"(fn [& funcs]\n  (fn [& args]\n    ((fn [coll-f result]\n      (if (empty? coll-f)\n        result\n        (recur (rest coll-f) (conj result \n          (apply (first coll-f) args)))))\n      funcs [])))","problem":59,"user":"4e73a9dc535dff18050a9c77"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"54c3747de4b045293a27f60e"},{"code":"(fn [& fns]\n    (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4ed292ac535d44c135fd68d9"},{"code":"(fn [& fs]\n  (fn [& args]\n   (map #(apply %1 args) fs)))","problem":59,"user":"50053d6ce4b0678c553fc45e"},{"problem":59,"code":"(fn [& f]\n  (fn [& p]\n    (reduce #(conj %1 (apply %2 p)) [] f)\n  )\n)","user":"5da975b9e4b000c986472c32"},{"problem":59,"code":"(fn [& fs](fn[& args](map #(apply % args) fs)))","user":"53fc4abae4b0de5c4184859b"},{"code":"(fn [& s]\n\t(fn [& args] (map #(apply % args) s)))","problem":59,"user":"4f47eab2e4b0d56e7bb92bc6"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& seqq] (map #(apply % seqq) funcs)))","user":"6088395de4b0ae75613dcee2"},{"problem":59,"code":"(fn [ & fs]\n  (fn [ & xs ] (map #(apply % xs) fs)))","user":"54d6f22de4b0a52adc2e2023"},{"problem":59,"code":"(fn k [& args] (fn [& ars] (reduce #(conj %1 (apply %2 ars)) [] args)))","user":"5292feb4e4b0239c8a67af39"},{"code":"(fn yuxtaposicion [& fs]\n  (fn [& xs]\n    (for [f fs] (apply f xs))))","problem":59,"user":"4db51ce0535d87e67b28fe06"},{"code":"(fn [& fs]\n  (fn [& xs]\n      (map #(apply % xs) fs)))","problem":59,"user":"4f2a35ace4b0d6649770a03a"},{"code":"(fn juxtaposition [& fs]\n  (fn [& s] (map #(apply % s) fs)))","problem":59,"user":"4ff304f4e4b0678c553fc343"},{"problem":59,"code":"(fn [& fs]\n  (fn [& s] \n    (map (fn [f] (apply f s)) fs)))\n\n\n    ;;(map (fn [a-f a-s] (reduce a-f a-s) f s)))","user":"573a0ecce4b0cd1946bd1088"},{"problem":59,"code":"(fn[& f](fn[& a](map(fn[f](apply f a))f)))","user":"5357b241e4b04ce2eb3ed282"},{"problem":59,"code":"(fn[& fs]\n    (fn[& x]\n        (map #(apply % x) fs)))","user":"57b9fc74e4b0fbc9809a27fb"},{"problem":59,"code":"(fn juxt2 [& function-list]\n  (fn [& xs]\n    (loop [fns function-list acc []]\n      (if (empty? fns)\n        acc \n        (recur (rest fns) (conj acc (apply (first fns) xs)))))))","user":"54f86b8ce4b01ecee9d88828"},{"problem":59,"code":"#(fn [& args] (reduce (fn [l v] (conj l (apply v args))) [] %&))","user":"5ef5ee81e4b07c55ae4a054a"},{"code":"(fn [& fs]\n  (fn [& xs](map #(apply % xs) fs)))","problem":59,"user":"50fa01bce4b07934dda8b0ba"},{"problem":59,"code":"(fn juxtaposition\n  [& funcs]\n  (fn [& args] (for [f funcs](apply f args)))\n  )","user":"59692530e4b069c0a1a197e4"},{"code":"(fn foo [x & xs]\n\t(fn [& args]\n\t\t((fn step [[f & fs] a]\n\t\t\t(if fs\n\t\t\t\t(do (println f fs a) (concat [(apply f a)] (step fs a)))\n\t\t\t\t[(apply f a)]))\n\t\t(cons x xs) args)))","problem":59,"user":"51757af0e4b085adf681d873"},{"problem":59,"code":"(fn [& y] (fn [& z] (map #(apply % z) y)))","user":"549c22f7e4b0f3d1d8e70f86"},{"code":"(fn [& f]\n  (fn [& a]\n     (map #(apply % a) f)))","problem":59,"user":"4fe8fda4e4b0547ebccb2438"},{"code":"(fn ([a b] (fn [& xs] [(apply a xs) (apply b xs)]))\n    ([a b c] (fn [& xs] [(apply a xs) (apply b xs) (apply c xs)])))","problem":59,"user":"52161db6e4b0bf4bffd29cb8"},{"code":"(fn [& funcs] \n (fn [& args] (map #(apply % args) funcs)))","problem":59,"user":"4f2d5f5de4b0d6649770a05a"},{"code":"(fn [& fs]\n  (fn [& args]\n     (map #(apply % args) fs)))","problem":59,"user":"4f29eb2ae4b0d6649770a037"},{"problem":59,"code":"(fn [& fs] (fn [& a] (map (fn [f] (apply f a)) fs)))","user":"57b1b8c8e4b0fbc9809a2756"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [results f] (conj results (apply f args))) [] fns)\n  )\n)","user":"589e0024e4b02bd94d917e4e"},{"code":"(fn [& funcs] (fn [& vals](map #(apply %  vals) funcs)))","problem":59,"user":"50783762e4b0fc74642bff67"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [ret [] fns fs]\n      (if fns\n        (recur (conj ret (apply (first fns) args))\n               (next fns))\n        ret))))","problem":59,"user":"4eec82fe535d93acb0a668ae"},{"code":"(fn [& f] (fn [& a] (reduce #(conj %1 (apply %2 a)) '[] f)))","problem":59,"user":"4e5ecd65535d8a8b8723a2d6"},{"problem":59,"code":"(fn[& f](fn[& x](map #(apply % x) f)))","user":"5e7df614e4b085ba37836e32"},{"problem":59,"code":"(fn [& fns] (fn [& args] (let [results (atom [])]\n(last (for [thefn fns]\n(swap! results conj (apply thefn args)))))))","user":"55f75c6be4b06e875b46cea9"},{"problem":59,"code":"(fn juxtapose [& funcs]\n  (fn juxtaposed [& args]\n    (map #(apply % args) funcs)))","user":"55a1d7f6e4b0acc240e31519"},{"code":"(fn [& fcoll]\n  (fn [& coll]\n    (for [f fcoll]\n      (apply f coll))))","problem":59,"user":"51780f88e4b03d69594194c9"},{"problem":59,"code":"(fn juxt* [& fns]\n  (fn [& args] \n    (map #(apply % args) fns)))","user":"5b3ef412e4b02d533a91bc06"},{"problem":59,"code":"(fn fun [& funs]\n    (fn args [& args]\n      (loop [funs funs args args res []]\n        (if (empty? funs)\n          res\n          (recur (rest funs) args (conj res (apply (first funs) args)))))))","user":"5508102ee4b021ccfedb96b0"},{"code":"(fn [& xs]\n  (fn [& args]\n    (map #(apply % args) xs)))","problem":59,"user":"4e588e84535d8a8b8723a294"},{"problem":59,"code":"(fn[& func]\n  (fn[& args]\n    (map #(apply % args) func)))","user":"58ac14ebe4b0005cfeb1a740"},{"code":"(fn [& fns] (fn [& xs] (map (fn [f] (apply f xs)) fns)))","problem":59,"user":"4e48b61d535dc968683fc4be"},{"code":"(fn [& fs]\r\n  (fn [& args]\r\n    (for [f fs] (apply f args))))","problem":59,"user":"502d4ea0e4b02fc10c6c6e46"},{"problem":59,"code":"(fn [& fnlist]\n  (fn [& args]\n    (map #(apply %1 args) fnlist)))","user":"558df2ebe4b0277789237649"},{"problem":59,"code":";(vec ((\n(fn [& fs]\n  (fn [& args] \n    (map #(apply % args) fs)))\n;  + max min) 2 3 5 1 6 4))","user":"573632b7e4b0cd1946bd102f"},{"code":"(fn my-juxt [& fs]\n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))))","problem":59,"user":"50611456e4b0dc10a69545a5"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs )))","user":"59afe4bae4b0e1f4e384c8c0"},{"problem":59,"code":"(fn [& fns]\n         (fn [& args]\n           (map #(apply % args) fns)))","user":"5782018de4b0d36ec5835e8e"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n      (letfn [(j [f & fs]\n                (if (nil? fs)\n                  [(apply f xs)]\n                  (cons (apply f xs)\n                        (lazy-seq (apply j fs)))))]\n        (apply j fs))))","user":"51bb08a4e4b0fe3ecfb46446"},{"problem":59,"code":"(fn juxt1 [& fns]\n  (fn [& args]\n    (loop [fns fns vals []]\n      (if (empty? fns)\n        vals\n        (recur (rest fns) (conj vals (apply (first fns) args)))))))","user":"54764a8fe4b0c51c1f4d72a3"},{"problem":59,"code":"(fn [& x]\n    (fn [& y]\n      ((fn rec\n        [z]\n        (if (empty? z)\n          z\n          (cons \n            (apply (first z) y)\n            (rec (rest z)))))\n       x)))","user":"59733c91e4b01722bebd4c9b"},{"problem":59,"code":"(fn [& funs] \n  (fn [& args] \n    (map #(apply % args) funs)))","user":"5c13da47e4b01240ff5671a6"},{"problem":59,"code":"(fn [& funcs]\n   (fn [& args]\n     (reduce \n      #(concat %1 [(apply %2 args)])\n      []\n      funcs)))","user":"54d9366ce4b0a52adc2e204e"},{"code":"#(fn [& xs]\n  (for [f %&] (apply f xs)))","problem":59,"user":"4fd81472e4b0dab7d829f38e"},{"problem":59,"code":"(fn [& ops]\n  (fn [& args]\n    (println ops)\n    (map (fn [op] (apply op args)) ops)))","user":"56375106e4b0bfe05bf117d3"},{"problem":59,"code":"(fn juc [& funs] (fn [& args] (map #(apply % args) funs)))","user":"55c10409e4b01b9910ae2a2c"},{"code":"(fn [& fs]\n    (fn [& args]\n      (map #(apply % args) fs)))","problem":59,"user":"5014754de4b094324338f8e5"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n  \t(map #(apply % args) fns)\n  )\n)","user":"5676af21e4b05957ce8c6158"},{"code":"(fn [& funs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args) ) [] funs )))","problem":59,"user":"4f2965ffe4b0d6649770a029"},{"code":"(fn solution [& fs]\n  (fn [& args]\n    (reduce\n     (fn [x y]\n       (conj x (apply y args))\n       )\n     []\n     fs\n     ))\n  )","problem":59,"user":"5226f8e9e4b04e78ff2e199a"},{"code":"(fn[& funs]\n  (fn[& colls]\n    (map #(apply % colls) funs)))","problem":59,"user":"50e6a086e4b0140bc92c0a8c"},{"problem":59,"code":"(fn [& fns]\n   (fn [& a] (map #(apply % a) fns)))","user":"549a1fede4b0f3d1d8e70f6a"},{"problem":59,"code":"(fn\n  [& func-args]\n  (fn\n    [& data]\n    (map #(apply % %2)\n              func-args (repeat data))))","user":"56dc483fe4b0ea9b8538f81b"},{"code":"(fn [& funs] (\n    fn [& args] (\n        map\n        #(apply % args)\n        funs\n    )\n))","problem":59,"user":"5356d00ee4b04ce2eb3ed26f"},{"problem":59,"code":"(fn f [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"5012da69e4b0c8732600222d"},{"problem":59,"code":"(fn ([a b]   (fn [& args] \n               (vec (list (apply a args) (apply b args)))))\n    ([a b c] (fn [& args] \n               (vec (list (apply a args) (apply b args) (apply c args))) )))","user":"54d5fbe9e4b0a52adc2e2014"},{"code":"(fn\n  ([x y] (fn\n    ([c] [(x c) (y c)])\n    ([c & more] [(apply x c more) (apply y c more)])\n    ))\n   ([x y z] (fn\n    ([c] [(x c) (y c) (z c)])\n    ([c & more] [(apply x c more) (apply y c more) (apply z c more)])\n    ))\n  )","problem":59,"user":"50f8615ae4b0aafb827eb1fa"},{"code":"(fn my-juxt\n  [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"523288fee4b035af41902a88"},{"problem":59,"code":"(fn [& fs]\n  #(for [f fs]\n     (apply f %&)))\n\n#_(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5a257747e4b07f18be40aa1f"},{"problem":59,"code":"(fn my-juxt [& fs] \r\n  (fn [& args] \r\n    (map #(apply % args) fs)))","user":"56f514cee4b046a417f92068"},{"problem":59,"code":"(fn [& xs]\n   (fn [& ys]\n     (map #(apply % ys) xs)))","user":"4ff9ea75e4b0678c553fc3b3"},{"problem":59,"code":"(fn [& fns]\n  (fn [& coll]\n    (map #(apply %1 coll) fns)))","user":"572a856be4b0f4d77e65123b"},{"code":"(fn [& x]\n  #(map (fn [f] (apply f %&)) x))","problem":59,"user":"506d5e4ce4b0a302964c5493"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))\n    \n;;returns [[21 6] 1]","user":"5c58736be4b01df32ab73247"},{"problem":59,"code":"(fn __ [& funs]\n  (fn [& args]\n    (map apply funs (cycle (list args)))\n  )\n)","user":"54c9f165e4b045293a27f687"},{"problem":59,"code":"(fn foo [ & fns] (fn [ & x] (reduce (fn [a f] (conj a (apply f x))) [] fns)))","user":"5839f079e4b089d5ab817d48"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n  \t(map (fn [f]\n           (apply f args))\n         funcs)))","user":"53a55de5e4b0b62ce3005739"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (for [x f] (apply x args))))","user":"5801eed1e4b0a837a8b30c63"},{"problem":59,"code":"(fn [& f]\n    (fn [& d]\n      (reduce (fn [a v] (conj a (apply v d))) [] f)))","user":"603ae21de4b0d5df2af222fb"},{"problem":59,"code":"(fn [& fargs]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fargs)))","user":"56d5fd24e4b0ea9b8538f7c5"},{"code":"(fn [& fs] \n  (fn [& x] (for [f fs] (apply f x))))","problem":59,"user":"4fc67081e4b0ee37620e1813"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map (fn [f] \n           (apply f xs))\n         fs)))","user":"51e5a627e4b0efabf93c02db"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (for [f funcs :let [y (apply f args)]] y)))","user":"56ec0af1e4b04a395b9a0430"},{"code":"(fn [& fs]\n  (fn [& x] (for [f fs] (apply f x))))","problem":59,"user":"4ee9d697535d93acb0a66895"},{"code":"(fn [& r] (fn [& a] (map #(apply % a) r)))","problem":59,"user":"4ee9ddb8535d93acb0a66896"},{"code":"(fn [& fs] (fn [& col] (for [f fs] (apply f col))))","problem":59,"user":"4f77b68de4b0fbe0118ec581"},{"problem":59,"code":"(fn my-juxt\n  [& fs]\n  (fn [& p]\n    (reduce (fn [v f] (conj v (apply f p))) [] fs)))","user":"56084e91e4b046a4fc0ac00f"},{"problem":59,"code":"(fn [& f] (fn [& a] (map #(apply %1 a) f)))","user":"52ca7711e4b071a8d36bd3e3"},{"code":"(fn \n  ([& f] (fn [& a] (map #(apply % a) f))))","problem":59,"user":"4e513ecf535dc968683fc4f6"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn map-fns [& args]\n    (map #(apply % args) funcs)))","user":"594266cfe4b060784b3b790b"},{"problem":59,"code":"(fn my-juxt [& functions]\n  (fn [& args]\n    (map\n   \t\t(fn [f] \n        (apply f args)\n        )\n   \t\t  functions \n    )\n  )\n)","user":"563b9acbe4b0bfe05bf11827"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (loop [out [(apply (first fs) xs)] in (rest fs)]\n      (if (empty? in) out (recur (conj out (apply (first in) xs)) (rest in))))))","user":"564a5a09e4b0284900eef656"},{"code":"(fn [& fs] #(for [x fs] (apply x %&)))","problem":59,"user":"524469dee4b0d8acf9ed6a9d"},{"code":"(fn [& fns] \n  (fn [& args] \n    (map (fn [f] (apply f args)) fns)))","problem":59,"user":"4ff769bce4b0678c553fc38f"},{"code":"(fn myjuxt [& funcs]\n    (fn [& args]\n      (map #(apply % args) funcs)))","problem":59,"user":"53224d45e4b09d4e7a9b54c0"},{"problem":59,"code":"(fn [& fs]\n    #(reduce (fn [acc f] (conj acc (apply f %&))) [] fs))","user":"595bbab7e4b066ee0a44afe0"},{"code":"(fn [& z] \n  (fn [& a]\n    (mapv #(apply % a) z)))","problem":59,"user":"50e82c31e4b0ebbe794eb7da"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fs)))","user":"58988cbbe4b00487982d52d7"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce (fn [v f] (conj v (apply f args))) [] funcs)))","problem":59,"user":"4e22b78b535d04ed9115e81e"},{"code":"(fn [& fs]\n  (fn [& args] \n    (map #(apply % args) fs)))","problem":59,"user":"5084c43be4b0fb8f40674bfa"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n        (loop [temp_funcs funcs\n               result nil]\n              (if (empty? temp_funcs)\n                  (reverse result)\n                  (recur (rest temp_funcs) (cons (apply (first temp_funcs) args) result))))))","user":"5a34f342e4b0ddc586f153d1"},{"code":"(fn [& xs] (fn [& ys] (map #(apply % ys) xs)))","problem":59,"user":"4f4f0287e4b03ad3f0c10cd7"},{"problem":59,"code":"(fn my-juxt\n  ([fst] (fn [& args] (list (apply fst args))))\n  ([fst & other]\n    (fn[& args]\n      (conj\n        (apply (apply my-juxt other) args)\n        (apply fst args)\n      )\n    )\n  )\n)","user":"5443cb97e4b032a45b86938a"},{"code":"(fn jx [& args] (fn [& l] (map #(apply % l) args)))","problem":59,"user":"5241ea66e4b076e5d3121f39"},{"code":"(fn [& fs] \r\n  (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4fdb02aae4b05e33b9224f56"},{"code":"(fn [& more]\r\n   (fn [& args]\r\n     (reduce #(conj %1 (apply %2 args)) [] more)))","problem":59,"user":"4f29cdc8e4b0d6649770a033"},{"code":"(fn [& fs]\r\n  (fn [& args]\r\n    (map #(apply % args) fs)))","problem":59,"user":"4ddbfb8a535d02782fcbea00"},{"problem":59,"code":"(fn\n    [& ff]\n    (fn [& args] (reduce\n                 (fn [acc f] (into acc (list (apply f args))))\n                 []\n                 ff))\n    )","user":"56f9392ae4b07572ad1a88ac"},{"code":"(fn juxt2 [& fs]\n  (fn [& args]\n    (loop [ret [] fs fs]\n      (if (empty? fs) ret\n        (recur (conj ret (apply (first fs) args)) (rest fs))))))","problem":59,"user":"51e1a1fae4b06a68e693eaf6"},{"problem":59,"code":"(fn[& funcs] \n    (fn[& input]\n      (reduce #(conj %1 (apply %2 input)) [] funcs)))","user":"571172ece4b09c608db70446"},{"problem":59,"code":"(fn jux* \n  [& funcs]\n  (fn f* [& args]\n    (map (fn [f] (apply f args)) funcs)))","user":"5cb71f35e4b026601754b961"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (map #(apply % args) fs)\n      )\n    )","user":"5681afaae4b0945ebc182a87"},{"problem":59,"code":"(fn [& flist]\n  (fn [& arglist]\n    (map #(apply % arglist) flist)))","user":"53e2b212e4b036ad0777e3f4"},{"code":"(fn [& f] (fn [& a] (map #(apply % a) f)))","problem":59,"user":"4da3e8d730acd6ed11482a68"},{"problem":59,"code":"(fn jux [& fns]\n  (fn [& args]\n    (map\n      (fn [the-fun] (apply the-fun args))\n      fns\n      )\n    )\n  )","user":"55ddc5cbe4b050e68259b3d0"},{"code":"(fn new_juxt [& fns]  (fn run_stuff [& args]\n                              (for [fun fns] (apply fun args))))","problem":59,"user":"4fbd6210e4b081705acca303"},{"code":"(fn [& f] (fn [& c] (map #(apply % c) f)))","problem":59,"user":"4fccf479e4b0ee37620e186e"},{"code":"(fn [& f]\n  (fn [& v]\n    (map #(apply % v) f)))","problem":59,"user":"4db016af838c48654951d9b9"},{"problem":59,"code":"(fn my-juxt\n  [& funcs]\n  #(reverse (into '() (for [func funcs] (apply func %&))))\n)","user":"5c75a30ee4b0fca0c16227df"},{"code":"(fn [& fs] \n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"502a9fdee4b095a7adb898b4"},{"problem":59,"code":";;For is faster then map\n(fn juxta [& fns]\n  (fn [& args]\n    (for [fns fns]\n      (apply fns args))))","user":"5785c1d4e4b0ebec4cfb74e1"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  )  \n)","user":"5cfd5a93e4b0cc9c91588168"},{"problem":59,"code":"(fn my-juxt [& funcs] (fn [& args] (mapcat #(vector (apply % args)) funcs)))","user":"539b4268e4b0b51d73faaf1c"},{"code":"(fn jxt [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","problem":59,"user":"51672d15e4b079759a74a5e7"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] \n    (vec \n      (for [f fns] (apply f args)))))","user":"5550bcece4b00713264bd9ae"},{"problem":59,"code":"(fn f[& fs]\n  (fn g[& gs]\n    (vec (for [ m  fs]\n      (apply m gs)))))","user":"56fa8984e4b07572ad1a88c1"},{"code":"(fn [& fns]\n  (fn ([x] (mapv #(% x) fns))\n    ([x & args] (mapv #(apply % x args) fns))))","problem":59,"user":"51891c96e4b04c2714a2670e"},{"problem":59,"code":"(fn my-juxt\n  [& fs]\n  (fn [& args]\n    (map #(apply %1 args) fs)))","user":"5638b88de4b0bfe05bf117e9"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce (fn [val f] (conj val (apply f args))) [] fns)))","user":"500d3160e4b05f7c30cfa6a1"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (for [f funcs] (apply f args))))","user":"5472d919e4b094393f72dd7b"},{"code":"(fn uno* [& funs]\n  (fn dos* [& args]\n   (map #(apply % args) funs)))","problem":59,"user":"4f04a06d535dcb61093f6bd9"},{"code":"(fn [& fs]\n    #(map (fn [f] (apply f %&)) fs))","problem":59,"user":"4fc8c8d8e4b0ee37620e183b"},{"code":"(fn [& functions]\n  (fn [& s]\n    (map #(apply % s) functions)))","problem":59,"user":"4fc13433e4b081705acca32b"},{"code":"(fn [& fs]\n  (fn [& as]\n    (map #(apply % as) fs)))","problem":59,"user":"4f84a4a4e4b033992c121c39"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map\n     (fn [f] (apply f args))\n     fs)))","user":"56fee4c0e4b08d47c97781b5"},{"code":"(fn [& more]\n  (fn [& x] (reduce #(conj %1 (apply %2 x)) [] more)))","problem":59,"user":"5213d81de4b0961f15ac4d73"},{"problem":59,"code":"(fn [& F]\n           (fn [& l]\n             (map\n              #(apply % l)\n              F)))","user":"591e0782e4b09b4ee5954c25"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (reduce (fn [acc f] (conj acc (apply f args))) [] fs)))","user":"51ae350fe4b09397d5109790"},{"code":"(fn [& fns]\n  (fn [& args]\n    (vec (for [f fns]\n      (apply f args)))))","problem":59,"user":"4e955b95535dbda64a6f6b33"},{"problem":59,"code":"(fn [& fns]\n       (fn [& args]\n           (map #(apply % args) fns)\n           )\n       )","user":"58637221e4b0f14aab7c881d"},{"problem":59,"code":"(letfn [\n              (first-fn [fns] (fn [& args] (vector (apply (first fns) args ))))\n              (next-fn [p v]  (fn [& args] (conj (apply p args) (apply v args))))\n              ]\n        (fn [& fns] (reduce #(next-fn %1 %2 ) (first-fn fns) (rest fns) ) ))","user":"58a9e872e4b01a0c0b232973"},{"problem":59,"code":"(fn juxt' [& fs]\n  (fn [& xs]\n    (mapv #(apply % xs) fs)))","user":"54ca9ca8e4b057c6fda3a265"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (->> fns\n         (map (fn [f] (apply f xs))))))","user":"5fb46916e4b08cb800c85b46"},{"problem":59,"code":"(fn [& funcs_arr]\n\t\t(fn [& arg]\n\t\t\t(loop [funcs funcs_arr, res []]\n\t\t\t\t(prn res)\n\t\t\t\t(if (empty? funcs)\n\t\t\t\t\tres,\n\t\t\t\t\t(recur\n\t\t\t\t\t\t(next funcs),\n\t\t\t\t\t\t(conj res (apply (first funcs) arg))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)","user":"5d73530ce4b02e6b30c93514"},{"code":"(fn [& fns]\n    (fn [& params]\n      (map #(apply %1 params) fns)))","problem":59,"user":"51c3c6a6e4b0851ac09658f8"},{"problem":59,"code":"(fn mycomp [& funcs]\n  (fn [& params]\n    (loop [f funcs\n           result []]\n      (if (empty? f)\n        result\n        (recur (rest f) (conj result (apply (first f) params)))))))","user":"5ab490f4e4b073f17744261d"},{"code":"(fn [& fns]\r\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4e02bee8535d04ed9115e791"},{"code":"(fn [& function-list]\r\n    ((fn compose\r\n        ([functions] (compose (fn [& args] []) functions))\r\n        ([result functions]\r\n            (if (zero? (count functions))\r\n                result\r\n                (let [head (first functions) tail (rest functions)]\r\n                    (compose (fn [& args] (conj (apply result args) (apply head args))) tail)))))\r\n    function-list))","problem":59,"user":"4dddf817535d08e6dec9fdd3"},{"problem":59,"code":"(fn [& args1]\n  (fn [& args2]\n    (map #(apply %1 args2) args1)))","user":"5666500ee4b0e91d5f5c566d"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& xs]\n    (loop [agg [] funcs funcs]\n      (if (empty? funcs)\n        agg\n        (do (println (str \"xs: \" xs)) (recur (into [] (concat agg [(apply (first funcs) xs)])) (rest funcs)))\n      )\n    )\n  )\n)","user":"583dacc2e4b089d5ab817d9f"},{"code":"(fn [& ffs]\n   (fn [& params]\n     (map #(apply % params) ffs)))","problem":59,"user":"4e739e13535dff18050a9c76"},{"code":"(fn [& fs] \n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))))","problem":59,"user":"4efec33f535dcb61093f6a2a"},{"code":"(fn myjuxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4fc2e302e4b081705acca33a"},{"problem":59,"code":"(fn [& f](fn [& x](map #(apply % x) f)))","user":"5a067f26e4b01bb0ae8afdcc"},{"problem":59,"code":"(fn [& fs] \n  (fn [& as] \n    (map #(apply % as) fs)))","user":"5339c105e4b0e30313ee6cae"},{"code":"(fn [& fns]\n  (fn [& args]\n    (for [ f fns] (apply f args))))","problem":59,"user":"50e90813e4b033b0e80d11e7"},{"problem":59,"code":"(fn jx [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n    ))","user":"5b9db58be4b0c0b3ffbd4b41"},{"code":";(fn [& fargs]\n;       (fn [& args]\n;         (loop [f fargs,\n;                ret []]\n;           (if (seq f)\n;             (recur (rest f) (conj ret (apply (first f) args)))\n;             ret))))\n(fn [& fns]\n  (fn [& xs]\n    (for [f fns] (apply f xs))))","problem":59,"user":"4ee26f01535d10e5ff6f5368"},{"problem":59,"code":"(fn juxt1 [& args]\n  (fn [& args1]\n    (loop [args2 args acc []]\n      (if (empty? args2)\n        acc\n        (recur\n          (rest args2)\n          (conj acc (apply (first args2) args1))\n        )\n      )\n    )\n  )\n)","user":"55280930e4b0ffed3738f93b"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn \n    [& args]\n    (vec (map #(apply % args) fs))))","user":"56a36f76e4b0542e1f8d14ca"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (mapv #(apply %1 %2)\n            fns (repeat args))))","user":"54f26266e4b024c67c0cf8c5"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    ((fn zip [functs argv]\n       (if (empty? functs)\n         '()\n         (cons (apply (first functs) argv) (zip (rest functs) argv)))) fs args)))","user":"537f8e7be4b06839e8705eb8"},{"code":"(fn [& fs] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fs)))","problem":59,"user":"5081566ce4b0946d0443855b"},{"problem":59,"code":"(fn\n  ([] identity)\n  ([f & fs]\n   (let [functions (list* f fs)]\n     (fn [x & args]\n       (reduce #(conj %1 (apply %2 x args)) [] functions)))))","user":"5ee7b49de4b029a2061bbea6"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args))\n         funcs)))","user":"5424c523e4b01498b1a71b03"},{"code":"(fn guxt [& fs] (fn [& x] (map #(apply % x) fs)))","problem":59,"user":"50dfb660e4b061dbdced7228"},{"code":"(fn [& fs]\n    (fn [& args]\n      (loop [fs2 fs\n             result []]\n        (if (empty? fs2)\n          result\n          (recur (rest fs2)\n                 (conj result (apply (first fs2) args)))))))","problem":59,"user":"4f5cc3b8e4b0030a34fb2b2b"},{"code":"(fn [& fns]\r\n  (fn [& coll]\r\n    (map #(apply % coll) fns)))","problem":59,"user":"4df407c3535d08e6dec9fe2e"},{"code":"(fn [& f]\n  (fn [& c]\n    (map (partial #(apply %2 %) c) f)))","problem":59,"user":"53973e7be4b0b51d73faaee6"},{"problem":59,"code":"(fn juxtapose [& fs]\n  (fn [& args] (map #(apply % args) fs)))","user":"5182de5ce4b0353c468deb74"},{"problem":59,"code":"(fn [& fns] (fn [& l] (map #(apply % l) fns)))","user":"5b3f2ba9e4b02d533a91bc09"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (for [fn fns] (apply fn args))))","user":"5b4fef74e4b02d533a91bcde"},{"problem":59,"code":"(fn [& fs]\n  #(map \n     (fn [x]\n       (apply x %&)) fs))","user":"5626447fe4b00e49c7cb47bd"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map #(apply % xs) \n         fs)))","user":"5ebdb3d2e4b00a66d4a95275"},{"code":"(fn jux [& coll]\n  (fn [& args]\n    (map #(apply % args) coll)))","problem":59,"user":"523b82efe4b07becd5be21f0"},{"code":"(fn my-juxt [& more]\n  (fn [& y]\n    (loop [f (vector (apply (first more) y)) r (rest more)]\n        (if (not (empty? r))\n          (recur (conj f (apply (first r) y)) (rest r))\n          f))))","problem":59,"user":"4f04d312535dcb61093f6be7"},{"problem":59,"code":"(fn [& f]\n  (fn [& r]\n    (loop [fs f v []]\n      (if (empty? fs)\n        v\n        (recur (rest fs) (conj v (apply (first fs) r)))))))","user":"5e12327ee4b099d064962fe5"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  ))","user":"54149f2fe4b01498b1a719ec"},{"problem":59,"code":"(fn [& a]\n  (fn [& b]\n    (map #(apply % b) a)\n  )\n)","user":"4fc8f671e4b0ee37620e1840"},{"problem":59,"code":"(fn my-juxt\n  [& fs]\n  (fn [& args]\n    (reduce\n            #(conj %1 (apply %2 args))\n            []\n            fs)))","user":"5ecfd429e4b016b56eae05a9"},{"code":"(fn jux [& fns] (fn [& args] (loop [fs fns ret []] (if (seq fs) (recur (rest fs) (conj ret (apply (first fs) args))) ret))))","problem":59,"user":"4e6fa38b535d5021c1a89622"},{"problem":59,"code":"(fn [& fns]\n\n  (fn [& args]\n\n    (reduce #(conj %1 (apply %2 args))\n            []\n            fns)\n\n\n    )\n\n  )","user":"5dd1fb19e4b0948ae9d9ad51"},{"problem":59,"code":"(fn [& params]\n  (fn [& data]\n\t(into []\n      (for [f params]\n        (apply f data)))))","user":"5640eb50e4b08d4f616f5eec"},{"code":"(fn t2 [& funcs]\n  (fn [& args]\n    (for [f funcs]\n      (apply f args))))","problem":59,"user":"5046f909e4b03b02161376b5"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (map #(apply % args) fns))\n    )","user":"59adec09e4b0e1f4e384c897"},{"problem":59,"code":"(fn p-59 [& fns]\n  (fn [& vals]\n    (map (fn [func] (apply func vals)) fns)))","user":"5bfc9037e4b0bdcf453d15f2"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (mapv #(apply % xs) fns)))","user":"52540bcce4b0541d1855b952"},{"code":"(fn [& fx]\n  (fn [& x] (map #(apply % x) fx)))","problem":59,"user":"51364acfe4b04ac1f358dd51"},{"code":"(fn [& fs] (fn [& xs] (map #(if (= 1 (count xs)) (% (first xs)) (apply % xs)) fs)))","problem":59,"user":"523b1a65e4b02f719975bdbd"},{"problem":59,"code":"(fn [& fs]\n  (fn [ & args]\n   (apply vector (map #(apply %1 args) fs))))","user":"532dbd3ce4b019098a6f8b40"},{"problem":59,"code":"; stolen elegant solution (fn [& f] (fn [& a] (map #(apply % a) f)))\n(fn juxty\n    ([f1] #(apply f1 %&))\n    ([f1 & f2]\n      #(flatten (conj [(apply f1 %&)] [(apply (apply juxty f2) %&)] ))     \n     ))","user":"5f0824c5e4b0cf489e8d7f5b"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (for [fx fns] (apply fx args))))","user":"537bde5de4b06839e8705e73"},{"problem":59,"code":"(fn [& funcs] \n  (fn [& args] (mapv #(apply % args) funcs)))","user":"562326cbe4b03f08ee9a9230"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args] (map #(apply % args) fs)))","user":"5e3ef7d4e4b01d43a70e8e2d"},{"code":"(fn [& fs] #(map (fn [f] (apply f %&)) fs))","problem":59,"user":"4e79a143535db169f9c796a2"},{"problem":59,"code":"( fn [& funcs]\n   (fn [& args]\n     (map #(apply % args) funcs)))","user":"5ec25800e4b00a66d4a9529b"},{"code":"(fn [& functions]\n  (fn [& v]\n    (println (count v))\n    (if (> (count v) 1)\n      (for [f functions]\n  \t\t(reduce f v))\n      (for [f functions]\n        (f (first v))))))","problem":59,"user":"512d3304e4b040332b905b2d"},{"problem":59,"code":"(fn jxt [& fs]\n     (fn [& args]\n       (reduce #(conj %1 (apply %2 args)) [] fs)))","user":"4dbf7a31535d020aff1edf75"},{"problem":59,"code":"(fn juxt-another-4-clojure-problem [& funcs]\n  (fn [& vals]\n    (for [func funcs]\n      (apply func vals))))","user":"5b044436e4b0cc2b61a3bd71"},{"code":"(fn [& f]\n  (fn [& n]\n    (map #(apply % n) f)))","problem":59,"user":"4ee4f4a9535d1385b2869d85"},{"problem":59,"code":"(fn myjuxt [ & funs] \n  (fn [ & args ]\n    (map #(apply % args) funs)))","user":"55536a8ae4b0deb715856e03"},{"problem":59,"code":"(fn [& fns]\n  #(map (fn [f] (apply f %&)) fns)\n  )","user":"5ab5f60be4b073f177442643"},{"code":"(fn [& f] (fn [& l] (map #(apply % l) f)))","problem":59,"user":"4ef48422535dced4c769f236"},{"code":"(fn jux [& fs] (fn [& args] (map (fn [f arg] (apply f arg)) fs (repeat (count fs) args))))","problem":59,"user":"5300f68de4b0d8b024fd3714"},{"problem":59,"code":"(fn [& fns] (fn [& n] (for [f fns] (apply f n))))","user":"57b35a19e4b0fbc9809a277d"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n        (map #(apply % xs) (apply list fs))))","user":"600ae927e4b074f607df6689"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args ) fs)))","user":"5ce077e9e4b0a17bb84e2b0c"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (mapv #(apply % args) fns)))","user":"55f2e47de4b06e875b46ce4d"},{"problem":59,"code":"(fn\n  [& params]\n  (fn\n    [& args]\n    (map #(apply % args) params)\n   )\n )","user":"58a44a14e4b01a0c0b2328f2"},{"code":"(fn [& funcs]\n        (fn [& args] (vec (flatten (map #(list (apply % args)) funcs)))))","problem":59,"user":"511b810ce4b07ab9ec456182"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (mapv (fn [x]\n        (apply x args))\n      fns)))","user":"5410499de4b01498b1a719a6"},{"code":"(fn[& fncts]\n    (fn[& argmts]\n        (map (fn[x](apply x argmts)) fncts)))","problem":59,"user":"532631e1e4b09d4e7a9b54ea"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (map  \n      #(apply % a)\n      f)))","user":"52bacfa8e4b07a9af57922d6"},{"code":"(fn jxt [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))","problem":59,"user":"510db6cde4b078ea71921145"},{"problem":59,"code":"(fn jux\n ([f g]\n   (fn [& xs] [(apply f xs) (apply g xs)]))\n ([f g h]\n   (fn [& xs] [(apply f xs) (apply g xs) (apply h xs)]))\n  )","user":"5a4caa20e4b05d388ecb6b94"},{"problem":59,"code":"(fn jux\n  [& f] (fn [& n] (map #(apply % n) f)))","user":"56278266e4b00e49c7cb47d3"},{"code":"(fn [& fs]\n  (fn [& es]\n    (map #(apply % es) fs)))","problem":59,"user":"506617c3e4b03d366d7cb2ab"},{"problem":59,"code":"(fn __ [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"58f44c07e4b0438e51c2ceb7"},{"problem":59,"code":"(fn myjuxt [& fs]\n\t(let [fs (list* fs)]\n\t\t(fn\n\t\t\t([] (reduce #(conj % (%2)) [] fs))\n\t\t\t([x] (reduce #(conj % (%2 x)) [] fs))\n\t\t\t([x y] (reduce #(conj % (%2 x y)) [] fs))\n\t\t\t([x y z] (reduce #(conj % (%2 x y z)) [] fs))\n\t\t\t([x y z & args] (reduce #(conj % (apply %2 x y z args)) [] fs)))))","user":"572ec4dde4b0cd1946bd0f8d"},{"code":"(fn my-juxt[& func-list]\n  (fn [& args]\n     (map #(apply % args) func-list)\n   )\n)","problem":59,"user":"52763696e4b03e8d9a4a74d7"},{"problem":59,"code":"(fn xjuxt [& fs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fs)\n    ))","user":"590b3aeae4b047aa04b199d0"},{"problem":59,"code":"(fn [& args] #(for [f args] (apply f %&)))","user":"58f5b58ae4b0438e51c2cedc"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& arg]\n    (map #( apply %1 %2 ) fns (repeat arg))))","user":"57b99d48e4b0fbc9809a27f2"},{"code":"(fn [& fns] (fn [& s] (map #(apply % s) fns)))","problem":59,"user":"511d6a01e4b022853b0e07a5"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n    ))","problem":59,"user":"513fab65e4b00f13ea1bd891"},{"code":"(fn jux[& funcs]\n  (fn [& input]\n    (loop [fs funcs res []]\n      (if (not-empty fs)\n        (recur (rest fs) (conj res (apply (first fs) input)))\n        res))))","problem":59,"user":"4eb1dd39535d7eef30807345"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn\n    [& args]\n    (loop [rem-fns fns\n           accum (vector)]\n      (if (empty? rem-fns) accum\n        (recur (rest rem-fns) (conj accum (apply (first rem-fns) args)))))))","user":"554d386ee4b0a04f792995b8"},{"code":"(fn [& fs]\r\n   (fn [& args]\r\n     (map #(apply % args) fs)))","problem":59,"user":"4def301c535d08e6dec9fe12"},{"code":"(fn [& l]\n  (fn [& a]\n    (for [f l] (apply f a))))","problem":59,"user":"5102489de4b00c483ae176f6"},{"problem":59,"code":"(fn [& funs] (fn [& vals] (map #(apply % vals) funs) ))","user":"5f0e8312e4b0f30dddfb5d5b"},{"code":"(fn [& f]\r\n  (fn [& a]\r\n    (map #(apply % a) f)))","problem":59,"user":"4dce6e41535d5973398f92a2"},{"problem":59,"code":"(fn func [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","user":"5e805895e4b085ba37836e44"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [result [] fnlist fns]\n      (if (empty? fnlist) result\n        (recur (conj result (apply (first fnlist) args)) (rest fnlist))))))","user":"53d977f1e4b0e771c302547a"},{"code":"(fn [& fs]\n    (fn [& x] (map #(apply % x) fs)))","problem":59,"user":"4f0e995e535d0136e6c22326"},{"code":"(fn  [& fs] (fn [& s] (map #(apply % s) fs)))","problem":59,"user":"506ab9bae4b05d3b7762c74c"},{"code":"(fn justaposition-\n  ^{:doc \"59. Take a set of functions and return a new function that takes a variable                                                                                   \n          number of arguments and returns a sequence containing the result of                                                                                           \n          applying each function left-to-right to the argument list.\"}\n  [& fs] (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4e5eb843535d8a8b8723a2d4"},{"problem":59,"code":"(fn Juxtaposition\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs))\n  )","user":"5c3ac091e4b0d62ef62d9f95"},{"problem":59,"code":"(fn [& fns]\n  (fn [& x]\n    (for [f fns] (apply f x))\n    )\n  )","user":"5f58db95e4b0a0bc16850a9a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fns)))","user":"5aeb0b44e4b0cc2b61a3bbee"},{"problem":59,"code":"(fn my-juxt [& functions]\n  #(map (fn [func] (apply func %&)) functions))","user":"5b60e88be4b0c6492753e70b"},{"problem":59,"code":"#(fn [& args]\n   (loop [fns %& rs []]\n     (if (empty? fns)\n       rs\n       (recur (rest fns) (conj rs (apply (first fns) args)))\n    )\n   )\n)","user":"5e947a69e4b0fbed045a37f8"},{"problem":59,"code":"(fn my-juxt \n  [& f]\n  (fn [& args]\n    (vec (map #(apply % args) f))))","user":"5c0466a3e4b0bdcf453d1680"},{"code":"(fn [& fns]\n  (fn [& args]\n    (loop [res [] rem-fns fns]\n      (if (empty? rem-fns)\n        res\n        (recur (conj res (apply (first rem-fns) args))\n               (rest rem-fns))))))","problem":59,"user":"4eddcbbf535d10e5ff6f532d"},{"code":"(fn [f & fs]\r\n  (fn [x & xs]\r\n    (let [ff (cons f fs)\r\n          xx (cons x xs)]\r\n      ((fn [[f & fs :as s] res]\r\n         (if (nil? s)\r\n           (reverse res)\r\n           (recur fs (cons (apply f xx) res)))) ff nil))))","problem":59,"user":"4f359c7ee4b0e243712b1ec4"},{"code":"(fn mjuxt\n  [& fns]\n  (fn [& args]\n    (reduce (fn [r f]\n              (conj r (apply f args)))\n            [] fns)))","problem":59,"user":"5348cab4e4b084c2834f4a5e"},{"code":"(fn my-juxt [& more_fs]\r\n  (fn [& more_as]\r\n\t\t(loop [results []\r\n\t\t\t\tmore_fsp more_fs]\r\n\t\t\t(if (empty? more_fsp)\r\n\t\t\t\tresults\r\n\t\t\t\t(recur\r\n\t\t\t\t\t(conj results (apply (first more_fsp) more_as))\r\n\t\t\t\t\t(next more_fsp))))))","problem":59,"user":"4efb92ce535dced4c769f27a"},{"code":"(fn [x & xs]\n      (fn [y & ys] (vec (for [f (vec (concat [x] xs))] (apply f (vec (concat [y] ys)))))))","problem":59,"user":"4e6e3a1e535d5021c1a89602"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map \n     (fn [f] (apply f args)) \n     fns)))","problem":59,"user":"538c3424e4b0b51d73faae58"},{"problem":59,"code":"(fn [& fs]\n  #(map (fn [f] (apply f %&)) fs))","user":"58b2c435e4b0ebc645576d11"},{"problem":59,"code":"(fn [& funcs]\r\n  (fn ([& seq]\r\n    (loop [funcs funcs\r\n           result []]\r\n      (if (empty? funcs)\r\n        result\r\n        (let [[head & tail] funcs]\r\n          (recur tail (conj result (apply head seq)))))))))","user":"555bd27ae4b0b056612e2244"},{"code":"(fn [& fs] \n  (fn [& xs] \n    (map #(apply % xs) fs)))","problem":59,"user":"4f043ed1535dcb61093f6bb4"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map apply fs (repeat xs))))","user":"53dcf474e4b0d874e779ae25"},{"problem":59,"code":"(fn [& xs]\n  (fn [& ys]\n    (reduce\n     (fn [acc f] (conj acc (apply f ys)))\n     [] xs)))","user":"543d26e5e4b032a45b86934a"},{"problem":59,"code":"(fn [& functions] \n  #(for [function functions] (apply function %&)))","user":"5a12dea3e4b04bbd27e6da44"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args)\n           ) fns)\n    ))","problem":59,"user":"503ca47fe4b06c4e0e1fa24f"},{"code":"(fn mj\r\n  [& fns]\r\n  (fn [& a]\r\n    (map #(apply % a) fns)))","problem":59,"user":"4f17ab99535d64f603146457"},{"code":"(fn jx [& fs]\n (fn [& xs]\n  (map #(apply % xs) fs)))","problem":59,"user":"506fd0afe4b07bd6ad9b9f23"},{"problem":59,"code":"(fn my-juxt\n  [& funcs]\n  (fn [& args]\n    (for [f funcs]\n      (apply f args))))","user":"5edd05bfe4b0c7845d86b0f3"},{"problem":59,"code":"(fn [& ops] (fn [& args] (reduce (fn [rv op] (conj rv (apply op args))) [] ops)))","user":"57bc50c7e4b05aa3c4741c40"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs))\n  )","user":"5628cb07e4b00e49c7cb47ef"},{"problem":59,"code":"(fn [& x]\n  (fn [& n]\n    (reduce #(conj %1 (apply %2 n)) [] x)))","user":"563c48e7e4b0bfe05bf11832"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n\t  (for [f fns]\n    \t(apply f args))))","user":"56102f50e4b05f002753df6b"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"4dc0ff08535d020aff1edf84"},{"code":"(fn [& a]\n  (fn [& args]\n    (map #(apply % args) (vec a))))","problem":59,"user":"51929214e4b08962174cf74c"},{"code":"(fn [& fs]\r\n  (fn [& vals] \r\n    (loop [c fs\r\n           r [] ]\r\n      (if c\r\n        (recur (next c) (conj r (apply (first c) vals)))\r\n        r))))","problem":59,"user":"4e5bdc2b535d8a8b8723a2bb"},{"code":"(fn [& fs]\n     (fn [& args]\n      (loop [f fs x []]\n       (if (empty? f) x\n          (recur (rest f) (conj x (apply (first f) args))))))\n\n)","problem":59,"user":"5029fccee4b023940c84aa47"},{"problem":59,"code":"(fn mult-apply [& fns]\n  (fn [& args]\n    (map #(apply % args) fns))\n  )","user":"5654e024e4b0f9d632dd848d"},{"problem":59,"code":"(fn [& fsq] (fn [& sq] (map #(apply % sq) fsq)))","user":"5ecc0831e4b016b56eae058c"},{"code":"(fn [& fns]\n  (fn [& args]\n    (vec (for [f fns]\n           (apply f args)))))","problem":59,"user":"4dad7adac9a9d6ed0599dc57"},{"code":"(fn [& fs]\r\n  (fn [& vals]\r\n    (map #(apply % vals) fs)))","problem":59,"user":"4e994541535dbda64a6f6b64"},{"problem":59,"code":"(fn jx [& fns]\n  (fn [& x]\n    (map #(apply % x) fns)))","user":"597a4277e4b02382a38ad1e2"},{"code":"(fn [& l]\r\n  (fn [& m]\r\n    (map #(apply % m) l)))","problem":59,"user":"507437c2e4b054001656acd0"},{"code":"(fn func-juxt\n  [& coll]\n  (fn [& args]\n    (for [f coll] (apply f args))))","problem":59,"user":"4e3bcccd535deb9a81d77f56"},{"code":"(fn [& fs]\r\n                 (fn [& args]\r\n                   (map #(apply %1 args) fs)))","problem":59,"user":"4deb529a535d08e6dec9fe04"},{"problem":59,"code":"(fn [& fs]\n                 (fn [& args]\n                   (map #(apply %1 args) fs)))","user":"551e6526e4b030e6a24d00e8"},{"code":"(fn [& fs]\n  (fn [& xs] \n    (for [f fs] (apply f xs))))","problem":59,"user":"4e51c67a535d302ef430da6a"},{"problem":59,"code":"(fn [& x]\n (fn[& a]\n  (map #(apply % a) x)\n  )\n )","user":"54283a7ae4b01498b1a71b2f"},{"problem":59,"code":"(fn [& fs]\n  (fn\n    ([x] (reduce #(conj %1 (%2 x)) [] fs))\n    ([x & args] (reduce #(conj %1 (apply %2 (list* x args))) [] fs))))","user":"549c1713e4b0f3d1d8e70f82"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (mapv (fn [f] (apply f args))\n          fs)))","user":"55c4e48be4b0e31453f649a7"},{"code":"(fn[& x](fn [& y](map #(apply % y) x)))","problem":59,"user":"4e7eff9e535db966e863cc38"},{"problem":59,"code":"(fn p59 [& args] (fn [& values] (for [x args] (apply x values) ) ))","user":"554b8b78e4b0a04f7929958d"},{"problem":59,"code":"(fn [ & args ]\n\t( loop [ f ( fn [ x ] [ (apply (first args) x) ] ) zz (rest args) ]\n      ( if (empty? zz)\n        (fn [ & y ] (f y))\n        (recur (fn [x] (concat (f x) [ (apply (first zz) x) ] )) (rest zz))\n        )\n      )\n  )","user":"5b3aa98be4b02d533a91bbca"},{"problem":59,"code":"(fn [& args]\n  (fn [& iargs]\n    (map (fn [f] (apply f iargs)) args)))","user":"540d5085e4b0addc1aec670e"},{"problem":59,"code":"(fn my-juxt [& funs]\n  #(for [f funs] (apply f %&)))","user":"54e3df6ae4b024c67c0cf7e3"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map\n      #(apply % args)\n        fns)))","problem":59,"user":"50427899e4b0add3005c0fc2"},{"code":"(fn [ & funs ]\n  (fn [ & args ]\n    (map apply funs (repeat args))))","problem":59,"user":"4e356d2b535deb9a81d77f2d"},{"code":"(fn [& f] #(for [a f] (apply a %&)))","problem":59,"user":"4ee67364535d93acb0a6685f"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& values] (for [func funcs] (apply func values))))","user":"5766bab8e4b0a07e8fc180b1"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n    )\n  )","user":"5630fd6fe4b0bfe05bf1178b"},{"problem":59,"code":"(fn juxt' [& fs]\n  (fn [& args] (map #(apply % args) fs)))","user":"601aaa93e4b0bf4ca6b10926"},{"problem":59,"code":"(fn [& body]\n  (fn [& params]\n  \t(map #(apply % params) body)  \n  ) \n)","user":"5ce41d1be4b0a17bb84e2b50"},{"problem":59,"code":"(fn juxt* [& f]\n  (fn [& inp]\n    (map #(apply % inp) f)))","user":"5ec3a13ae4b08d0ec38692b9"},{"problem":59,"code":"(fn [f & more]\n  (fn [x & y]\n    (for [ff (conj more f)]\n      (apply ff (conj y x)))))","user":"55495318e4b0a04f79299566"},{"problem":59,"code":"#(fn [& ys] (for [y %&] (apply y ys)))","user":"4ec66e84535d6d7199dd36cd"},{"code":"(fn [& function-list]\n  (fn [& args]\n    (reduce (fn [memo new-func]\n              (conj memo (apply new-func args))) [] function-list)))","problem":59,"user":"51c76864e4b07ef393169e3f"},{"code":"(fn jux [& fns] (fn[& args](map #(apply % args) fns)))","problem":59,"user":"526a3412e4b03e8d9a4a721e"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (map #(apply % args) (apply vector f))))","user":"56ab7578e4b03c432f18733d"},{"problem":59,"code":"(fn [ & ff] (fn [ & xx]\n    (loop [ ff ff, r []]\n       (if (empty? ff) r\n           (recur (rest ff) (conj r (apply (first ff) xx)) )\n           ))))","user":"4fd11a93e4b04c3a95aa040a"},{"code":"(fn [ & l ] (fn [ & a ] (map #(apply % a) l)))","problem":59,"user":"4e9d6a65535dbda64a6f6b87"},{"problem":59,"code":"#(reduce\n  (fn [f g]\n    (fn [& args] (conj (apply f args) (apply g args)))\n  )\n  (fn [& args] [])\n  %&)","user":"5cebafbbe4b0a17bb84e2be6"},{"code":"(fn [& funcs]\n  (fn [& s]\n    (reduce\n      (fn [result func]\n        (conj result (apply func s)))\n      [] funcs)))","problem":59,"user":"53070615e4b02e821686979e"},{"code":"(fn test59 [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","problem":59,"user":"50b0cffae4b009df37c708c5"},{"problem":59,"code":"(fn jux\n  [& functions]\n   (fn\n     ([arg]\n       (map #(% arg) functions))\n  \t ([arg & args]\n       (map #(apply % arg args) functions))))","user":"5888b75fe4b0f1effa3b771b"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (for [func funcs] (apply func args))))","user":"5e1cc888e4b0dc959400853d"},{"problem":59,"code":"(fn juxtaposition\n  [& funcs]\n  #(map (fn [func]\n          (apply func %&))\n        funcs))","user":"5dadd84ee4b0f8c104ccfc85"},{"problem":59,"code":"(fn [& f] \n(fn [& a] (for [t f] (apply t a))) \n)","user":"5464a536e4b01be26fd746cf"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"4ec2fe3f535dcc7ae8597d4f"},{"problem":59,"code":"(fn [& funcs] \n  (fn [& args] \n    (loop [rs [] fs funcs] \n      (if (seq fs) \n        (recur (conj rs (apply (first fs) args)) (rest fs))\n        rs))))","user":"5578f292e4b05c286339e08f"},{"problem":59,"code":"#(fn [& args]\n    (for [f %&]\n      (apply f args)))","user":"57ee82b1e4b0bfb2137f5bbd"},{"code":"(fn [& fs]\n  (fn [& xs] (for [f fs] (apply f xs))))","problem":59,"user":"4f6845d2e4b07046d9f4ef74"},{"code":"(fn [& fs]\n        (fn [& xs]\n          (for [f fs]\n            (apply f xs))))","problem":59,"user":"52a88c4de4b0c58976d9ac30"},{"code":"(fn juxt1\n  ([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","problem":59,"user":"50ab44b2e4b0f65d68208509"},{"problem":59,"code":"(fn my-juxt [& fs]\n     (fn [& args]\n      (map #(apply % args) fs)))","user":"594ea2a4e4b07ddc2dafaeb6"},{"problem":59,"code":"(fn my-juxt [& args]\n  (fn [& act-args] \n    (map \n      (fn [f] (apply f act-args))\n      args)))","user":"557e56aae4b05c286339e0d5"},{"code":"(fn [& funs]\n  (fn [& args] (vec (map #(apply % args) funs))))","problem":59,"user":"5356e04fe4b04ce2eb3ed271"},{"problem":59,"code":"(fn [& funcs] (fn [& s] (map #(apply %1 s) funcs)))","user":"56baab13e4b0f26550335948"},{"code":"(fn jx [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"511aa2a4e4b0c87c59c9670a"},{"code":"(fn juxt2 [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4faafccde4b081705acca209"},{"problem":59,"code":"(fn my-juxt [& fs] (fn [& args]  (for [f fs] (apply f args))))","user":"6076adb2e4b069485764de60"},{"code":"(fn [& fns]\n   (partial\n    (fn myfn [fs x & xs]\n      (loop [ret []\n             vals (list* x xs)\n             tfn fns] \n        (if (not (empty? tfn))\n          (recur (conj ret (apply (first tfn) vals) ) vals (rest tfn))\n          ret))) fns))","problem":59,"user":"4f3ec266e4b0e243712b1f8c"},{"problem":59,"code":"(fn [& funcs1]\n  (fn [& args2]\n    (loop [funcs funcs1 args args2 final []]\n      (if (empty? funcs)\n        final\n        (recur (rest funcs) args (conj final (apply (first funcs) args)))))))","user":"59369515e4b02506e01a297e"},{"code":"(fn [& fns]\n  (fn [a & args]\n  \t(for [f fns] (reduce f (f a) args))))","problem":59,"user":"52525a0ee4b0541d1855b8a2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& x]\n    (map #(apply % x) fs)))","user":"538e864ee4b0b51d73faae87"},{"problem":59,"code":"(fn tester [& fns]\n  (fn [& things]\n    (map #(apply % things) fns)))","user":"5cf48f04e4b087f62be35a86"},{"problem":59,"code":"(fn\n  ([f g] (fn [& args] [(apply f args) (apply g args)]))\n  ([f g h] (fn [& args] [(apply f args) (apply g args) (apply h args)])))","user":"606a70a5e4b069485764ddf2"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce\n        (fn [ret f]\n          (conj ret (apply f args)))\n        '()\n        (reverse fns))))","user":"536ecd9fe4b0fc7073fd6e76"},{"problem":59,"code":"( fn my-juxt\n  [& funcs]\n  ( fn [& args]\n    (map #(apply % args) funcs)))","user":"516d227fe4b06f078fab252d"},{"code":"(fn jux [& fns]\n  (fn [& args]\n    (map #(apply %1 args) fns)\n    ))","problem":59,"user":"51b7b521e4b0d906fcd71d3a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (vec (map #(apply % args) fns)) \n    )\n  )","user":"54b90836e4b0ed20f4ff6e9d"},{"code":"(fn [& fns]\n  (fn [& a]\n    (map (fn [f] (apply f a))\n         fns)))","problem":59,"user":"4e773be8535d324fb2983d6e"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (loop [fs fs a []]\n        (if (empty? fs)\n          a\n          (recur (rest fs) (conj a (apply (first fs) args)))))))","user":"6026d2cae4b0d5df2af22232"},{"problem":59,"code":"(fn [& fs]\n                (fn [& args]\n                  (map #(apply % args) fs)))","user":"5c3f37fce4b08cd430848e91"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (loop [fs fs\n           res ()]\n      (if (empty? fs)\n        (reverse res)\n        (let [f (first fs)\n              fs (rest fs)\n              r (cons (apply f args) res)]\n          (recur fs r))))))","problem":59,"user":"50c113bee4b096f585049c37"},{"code":"(fn  [& fs]\r\n  (fn [& xs] ((fn xx [[ f & fs2]]\r\n               (if f (cons (apply f xs) (xx fs2)))) fs)))","problem":59,"user":"4fb23582e4b081705acca28a"},{"problem":59,"code":"(fn [& fargs]\n (fn [& s]\n   (into [] \n(for [f fargs] (apply f s))\n)))","user":"50342d1be4b062bc5d7ae15f"},{"problem":59,"code":"(fn [& x] (fn [& y] (into [](map #(apply % y) x))))","user":"540479e7e4b0addc1aec665a"},{"problem":59,"code":"(fn [& f] (fn [& a] (map #(apply % a) f)) \n            \n            )","user":"55b39523e4b01b9910ae2973"},{"code":"(fn [ & xs]\n  (fn [& args]\n    (map #(apply % args)  xs)))","problem":59,"user":"51bec919e4b013aa0d74b800"},{"problem":59,"code":"(fn [& args] \n  (fn  [& values] \n    (map #(apply % values) args)))","user":"5606a4ace4b08b23635d3175"},{"code":"(fn my-juxt [& fs]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs)))","problem":59,"user":"517a025ce4b01aacecbecbe6"},{"code":"(fn [& fns]  \n    (fn [& args]\n      (loop [fns fns res []]\n        (if (seq fns)\n          (recur (rest fns) (conj res (apply (first fns) args)))\n          res))))","problem":59,"user":"52cc582ae4b07d0d72b27362"},{"problem":59,"code":"(fn juxtt\n\t[& fns]\n\t(fn [& args]\n\t\t(map #(apply % args) fns)))","user":"59ac559ee4b00adcf69795d2"},{"problem":59,"code":"(fn solution [& funcs]\n  (fn [& args]\n    (into [] (for [f funcs]\n               (apply f args)))))","user":"5e2ef900e4b05b4b015161fc"},{"code":"(fn [& args]\n  (fn [& x]\n    (for [f args]\n      (apply f x))))","problem":59,"user":"4ec21058535dfed6da9c6dba"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& coll] \n    (map #(apply % coll) fs)))","user":"54ae541ae4b09f271ff37cef"},{"problem":59,"code":"(fn juxtaposition [& funcs]\n      (fn [& args]\n            (map (fn [func]\n                       (apply func args)\n                       )\n                  funcs)\n            )\n      )","user":"5d809b4fe4b0915913b1d36c"},{"code":"(fn [& fcts]\n  (fn [& args]\n    (map #(apply %1 args) fcts)))","problem":59,"user":"5267d9bde4b03e8d9a4a7188"},{"code":"(fn [& funcs]\n  (fn [& func-args]\n    (reduce\n     (fn [result func]\n       (conj result (apply func func-args)))\n     []\n     funcs)))","problem":59,"user":"4f31519ae4b0d6649770a086"},{"code":"(fn [ & fns ]\n  (fn [ & args ]\n    (map #(apply % args) fns)))","problem":59,"user":"4ec28d86535dfed6da9c6dbc"},{"problem":59,"code":"(fn n59\n  ([f] (fn\n         ([x] (cons (f x) []))\n         ([x & xs] (cons (apply f x xs) []))))\n  ([f & fs]\n   (fn\n     ([x] (cons (f x) (if fs\n                        ((apply n59 fs) x)\n                        (vector (f x)))))\n     ([x & xs] (cons (apply f x xs) (if fs\n                                      (apply (apply n59 fs) x xs)\n                                      (vector (apply f x xs))))))))","user":"55bf6dbce4b01b9910ae2a12"},{"code":"(fn [& fl]\n  (fn [& args]\n    (map #(apply % args) fl)))","problem":59,"user":"537e745ae4b06839e8705ea6"},{"problem":59,"code":"(fn [& fs] \n   (fn [& arg] \n     (reduce (fn [acc curf] \n               (conj acc (apply curf arg)))\n             [] fs)))","user":"5e44c804e4b01d43a70e8e89"},{"problem":59,"code":"(fn [& funcs]\n         (fn [& args]\n           (map #(apply % args) funcs)))","user":"596d630ae4b069c0a1a19846"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce (fn [acc f]\n              (conj acc (apply f xs)))\n            []\n            fs)))","user":"55f73078e4b06e875b46cea4"},{"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply %1 args) funs)))","problem":59,"user":"4eb66737535d7eef3080736b"},{"problem":59,"code":"(fn [& ff] (fn [& aa] (map #(apply % aa) ff)))","user":"5310e968e4b08068f379ecdd"},{"code":"(fn [& fs] \r\n    (fn [& v] \r\n      (reduce \r\n        (fn [c f] (conj c (apply f v))) \r\n        [] \r\n        fs)\r\n      )\r\n    )","problem":59,"user":"4dbbdf86535d3f4042261ece"},{"code":"(fn [& x]\n  (reduce\n    (fn [f g]\n      (fn [& a]\n        (cons (apply g a) (apply f a))))\n    (fn [& _] (list))\n    (reverse x)))","problem":59,"user":"53940789e4b0b51d73faaec3"},{"problem":59,"code":"(fn juxtaposition [& functions]\n  (fn [& args]\n    (loop [r [] funcs functions]\n      (if (empty? funcs)\n        r\n        (recur (conj r (apply (first funcs) args)) (rest funcs))))))","user":"5a9ac061e4b0d174b936c7c1"},{"problem":59,"code":"(fn [& F] (fn [& x] (map (fn [f] (apply f x)) F)))","user":"55f6fe09e4b06e875b46cea2"},{"code":"(fn [& l] (fn [& a] (for [f l] (apply f a))))","problem":59,"user":"4ee82539535d93acb0a66878"},{"code":"(fn [& funct]\n  (fn [& xs]\n  (for [arg funct]\n    (apply arg xs))))","problem":59,"user":"514a2fa1e4b0829bd132edb5"},{"code":"(fn\n  [& fns]\n  (fn\n    [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4db8d37d535d1e037afb219c"},{"code":"(fn [& funs] (fn [& args] (map apply funs (repeat args))))","problem":59,"user":"50f9c7fde4b0e7c80cb15a52"},{"problem":59,"code":"(fn [& fns]\n  (fn [& nums]\n    (into [] (for [f fns]\n               (apply f nums)))))","user":"558843dae4b059ccff29b1f3"},{"code":"(fn [& f] (fn [ & a] (map #(apply % a) f)))","problem":59,"user":"4e6e6630535d5021c1a89609"},{"code":"(fn [& f] (fn [& x] (map apply f (repeat x))))","problem":59,"user":"52160dbee4b0bf4bffd29cb3"},{"problem":59,"code":"(fn [& f]\n    (fn [& a]\n      (map\n       #(apply % a)\n       f)))","user":"510528a0e4b0730a5f55ad85"},{"problem":59,"code":"(fn jxt [& fs] ( fn [& args] ( reduce #(conj %1 (apply %2 args)) [] fs )))\n\n; adereth's\n\n;(fn [& fns]\n;  (fn [& args]\n;    (for [f fns]\n;      (apply f args))))","user":"550fdc1de4b06e50f9beb17d"},{"problem":59,"code":"(fn my-juxt [& funcs]\n    (fn [& args]\n      (map #(apply % args) funcs)))","user":"5d80f328e4b0915913b1d372"},{"problem":59,"code":"(fn juxtapose [& fns]\n  (fn [& args]\n    (vec (map #(apply % args) fns))))","user":"56efc9fde4b04a395b9a0464"},{"code":"(fn [& x] (fn [& y] (map #(apply % y) x)))","problem":59,"user":"4faa9593e4b081705acca1f9"},{"code":"(fn __ [& fs]\n  (fn [& xs] \n    (for [f fs] (apply f xs))\n  ) \n)","problem":59,"user":"503f872ee4b00d1a725ff2ac"},{"problem":59,"code":"(fn juxt* [& fns]\n  (fn f* [& args]\n(map #(apply % args) fns)))","user":"5ae0976be4b0837691e92c43"},{"problem":59,"code":"(fn myjuxt [& funcs]\n  (fn [& xs] (map #(apply % xs) funcs)))","user":"5a544eeee4b05d388ecb6c24"},{"code":"(fn [& funcs]\n  (fn [& parts]\n    (map #(apply % parts) funcs)))","problem":59,"user":"4ee85476535d93acb0a6687c"},{"problem":59,"code":"(fn [& funcs]\n     (fn [& args] (map (fn [f] (apply f args)) funcs)))","user":"5446ebc2e4b032a45b8693b8"},{"code":"(fn [& fs]\n  (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4daf8f84edd6309eace4d17a"},{"problem":59,"code":"(fn [& g] #(for [f g] (apply f %&)))","user":"57609d91e4b08062f99a4e9b"},{"code":"(fn [& fs] (fn [& args] (vec (for [f fs] (apply f args)))))","problem":59,"user":"4e4be570535dc968683fc4d8"},{"code":"(fn myjuxt\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"53436e60e4b084c2834f4a19"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce\n      (fn [my-vec func]\n        (conj my-vec (apply func args)))\n      []\n      funcs)))","problem":59,"user":"518d1b5be4b070277754617b"},{"problem":59,"code":"(fn [& functions] \n     (fn [& parameters] \n       (map #(apply % parameters) functions)))","user":"5654cb2de4b0f9d632dd848b"},{"problem":59,"code":"(fn juxtaposition [& funcs]\n  (fn [x & args]\n    (map (fn [f]\n           (apply f x args)) funcs)))","user":"5693a53ee4b0dcc4269f4106"},{"problem":59,"code":"(fn juxt* [& fs]\n  (fn [& xs]\n    (map (fn [f]\n           (apply f xs))\n         fs)))","user":"5895477fe4b00487982d527c"},{"code":"(fn [& fns]\n  (fn [& args] \n    (map #(apply % args) fns)))","problem":59,"user":"51990df9e4b068aa333628fc"},{"problem":59,"code":"(fn [& f]\n    (fn [& s]\n      (map #(apply % s) f)))","user":"586b6753e4b01531a375e956"},{"code":"(fn f [& a1]\n  (fn [& a2]\n    (map #(apply % a2) a1)))","problem":59,"user":"4dbd2aa3535d020aff1edf40"},{"code":"(fn [& ops]\n  (fn [& args]\n    (vec\n     (map #(apply % args) ops))))","problem":59,"user":"4e89ff3d535d3e98b802328a"},{"problem":59,"code":"(fn \n  [& f]\n  (fn [& a] \n    (loop [l f v []]\n      (if (empty? (rest l))\n        (conj v (apply (last l) a))\n        (recur (rest l) (conj v (apply (first l) a)))\n        )))\n  )","user":"5772ddb0e4b0979f896515d4"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (mapv (fn [f] (apply f args)) fs)))","user":"5777cffae4b0979f89651651"},{"code":"(fn [& fs]\n  (fn [& l]\n    (map #(apply % l) fs)))","problem":59,"user":"50a5b7e9e4b0aa96157e2610"},{"code":"(fn [& f]\n  (fn [& a]\n    (reduce #(conj % (apply %2 a)) [] f)))","problem":59,"user":"50ebd63ce4b04edc3377703c"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    ((fn call [funcs]\n       (let [f (first funcs)]\n         (if f\n           (conj\n            (call (rest funcs))\n            (apply f args))\n           (list)))) funcs)))","user":"598ab445e4b02b9968b84ce0"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (map (fn [f] (apply f args)) functions)))","user":"56a51f26e4b0542e1f8d14e0"},{"code":";(fn juxt4j [& fs]\n;  (fn [& data]\n;    (drop 1 (reduce #(conj % (apply %2 (first %))) [data] fs))))\n\n(fn [& fs] \n  (fn [& data] \n    (map #(apply % data) fs)))","problem":59,"user":"524f4256e4b0541d1855b808"},{"code":"(fn jux [& l]\n  (fn [& i] \n    (map #(apply % i) l)))","problem":59,"user":"4fd9d162e4b05e33b9224f3c"},{"code":"(fn juxtapose [& funs]\n\t(fn [& args] (map #(apply % args) funs)))","problem":59,"user":"50ed8a5fe4b06330c1f87c3d"},{"problem":59,"code":"(fn [& args]\n  (fn [& params]\n    (reduce #(conj %1 (apply %2 params)) [] args)))","user":"5541fa50e4b0a04f79299515"},{"code":"(fn [& funcs] (fn [& args] (map #(apply % args) funcs)))","problem":59,"user":"4f05ea25535dcb61093f6c02"},{"problem":59,"code":";; minimum to pass the tests and see the solutions\n;; \n;; (fn jux \n;;    ([a b] (fn [& n] [ (apply a n) (apply b n)]))\n;;    ([a b c] (fn [& n] [ (apply a n) (apply b n) (apply c n)])))\n \n \n ;; this one is nice!\n (fn [& f]\n   (fn [& a]\n     (map #(apply % a) f)))","user":"54b54d1be4b05787c3b1639c"},{"problem":59,"code":"(fn [& fus]\n  (fn [& args]\n    (loop [fs fus r []]\n      (if (empty? fs)\n        (into [] r)\n        (recur (rest fs) (conj r (apply (first fs)  args)))))))","user":"52979551e4b02ebb4ef75043"},{"problem":59,"code":"(fn jux [f & fs]\n  (if (empty? fs)\n    (fn [& xs] (list (apply f xs)))\n    (fn [& xs] (lazy-seq (cons (apply f xs) (apply (apply jux fs) xs))))))","user":"5953bdb6e4b066ee0a44aeed"},{"problem":59,"code":"(fn ([a b c] (fn[& x] [(apply a x)(apply b x)(apply c x)]))\n       ([a b] (fn[& x] [(apply a x)(apply b x)])))","user":"59e8bb43e4b0249b72820735"},{"code":"(fn [& funs] \n    (fn [& args] (reduce (fn [result fun] (conj result (apply fun args))) (vector) funs)))","problem":59,"user":"52c2106fe4b07a9af5792374"},{"problem":59,"code":"(fn [& fns]\n  (fn [& col]\n    (reduce\n      #(conj % (apply %2 col))\n      []\n      fns\n    )\n  )\n)","user":"5da20e73e4b000c986472be1"},{"code":"; [ (f1 args), (f2 args), ... (fn args) ]\n(fn juxtaposition [& fs]\n  (letfn [(stop-condition [fs] (= 0 (count fs)))\n          (juxt-iter [fs result-set args]\n                     (if (stop-condition fs) \n                       result-set\n                       (juxt-iter (rest fs) (conj result-set (apply (first fs) args)) args)))]\n    (fn [& args] (juxt-iter fs [] args))))","problem":59,"user":"517531c6e4b07031762f2eea"},{"code":"(fn myjuxt[& fnlist]\n   (fn [& more]\n       (map \n         (fn [f]\n            (apply f more)\n          )\n        fnlist\n       )\n     )\n   )","problem":59,"user":"4fb03cf4e4b081705acca262"},{"problem":59,"code":"(fn juxtaposition\n  [& functions]\n  (fn [& x]\n    (into '[]\n      (for [f functions]\n        (apply f x)))))","user":"55a9e0fee4b0988bba2ad945"},{"code":"(fn [& fns]\n\t(fn [& args]\n\t\t(map #(apply %1 args) fns)))","problem":59,"user":"52d00832e4b07d0d72b273b4"},{"problem":59,"code":"(fn [& s]\n  (fn [& a] \n    (map #(apply % a) s)))","user":"56f51879e4b046a417f92069"},{"code":"(fn [& f-more]\n   (fn [& coll-more]\n     (loop [f f-more rs []]\n       (if (empty? f)\n         rs\n         (recur (rest f)\n                (conj rs \n                      (apply (first f) coll-more)))))))","problem":59,"user":"51cacda3e4b068dadb8f2227"},{"problem":59,"code":"(fn\n    [& -funcs]\n    (fn [& -args]\n        (loop [funcs (vec  -funcs) nw []]\n            (if (empty? funcs)\n                nw\n                (let [func (first funcs)]\n                    (recur (rest funcs) (conj nw (apply func -args))))))))","user":"57e3f709e4b0bfb2137f5aaf"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  )\n)","user":"5405885ee4b0addc1aec6668"},{"problem":59,"code":"(fn [ & funcs ]\n  (fn [ & args ]\n    (map #(apply % args) funcs)))","user":"57300c19e4b0cd1946bd0fa1"},{"code":"(fn [& fx]\n  (fn [& xs]\n    (map #(apply % xs) fx)\n  )\n)","problem":59,"user":"504f191ae4b0e7ad84dbc4ba"},{"problem":59,"code":"(fn juxt1 [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","user":"5fa74b82e4b0fa27300f3dda"},{"problem":59,"code":"(fn\n [& ops]\n (fn\n  [& li]\n  (map\n   (fn\n    [op]\n    (apply op li))\n   ops)))","user":"586a657de4b0f14aab7c88bd"},{"code":"(fn\n  ([f g]\n    (fn [s] (conj '() (g s) (f s))))\n  ([f g h]\n    (fn \n      ([a] (conj '() (h a) (g a) (f a)))\n      ([a & args] (conj '() (apply h a args) (apply g a args) (apply f a args))))))","problem":59,"user":"4e8a0d5d535d3e98b802328e"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (map #(apply % args) fns)))","user":"5ebc7c13e4b00a66d4a95267"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","user":"58543a59e4b07779d46863f5"},{"code":"(fn [& fs] (fn [& args] (vec (map #(apply % args) fs))) )","problem":59,"user":"4ef98c9c535dced4c769f267"},{"problem":59,"code":"(fn compose [& fns]\n  (fn ! [ & args]\n    ((fn step [fns args]\n      (cond\n       (= 1 (count fns)) (list (apply (first fns) args))\n       :else\n       (let [f (first fns)\n             r (rest fns)]\n         (cons (apply f args) (step r args))))) fns args)))","user":"559f06bae4b0acc240e314e6"},{"problem":59,"code":"(fn [& fs]\n  (fn [& ps]\n    (map\n      #(apply % ps)\n      fs)))","user":"559279b7e4b0604b3f94d58c"},{"problem":59,"code":"(fn\n  [& f]\n  (fn [& args]\n    (map #(apply % args) f)))","user":"5d7b90ede4b02e6b30c93552"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args))\n         fns)))","user":"51db0d99e4b06aa4d4669a9d"},{"problem":59,"code":"(fn \n  [& f]\n  (fn [& args]\n    (map #(apply % args) f)))","user":"57c314f3e4b05aa3c4741cba"},{"problem":59,"code":"(fn juxta [& funcs] (fn [& args] (reduce #(conj %1 (apply %2 args))  [(apply (first funcs) args)] (rest funcs))))","user":"57131dfbe4b07c98581c3a98"},{"problem":59,"code":"(fn [& x]\n  (fn [& args]\n    (for [i x]\n      (apply i args)) ))","user":"5823d3e6e4b051871117beb8"},{"code":"(fn [& args1]\n  (fn [& args2]\n    (let [fnlist args1\n          argslist args2]\n      (map #(apply % args2) args1))))","problem":59,"user":"502b0804e4b063e52107afad"},{"code":"(fn [& fns] (fn [& args] \n              (reduce #(conj %1 (apply %2 args)) [] fns)\n              ))","problem":59,"user":"50f53694e4b057d4c52de881"},{"problem":59,"code":"(fn [& fns] (fn [& args]\n    (reduce (fn [x y] (conj x (apply y args))) [] fns)))","user":"578b140be4b0ebec4cfb7545"},{"problem":59,"code":"(fn [& args]\n   (fn [& s] (map #(apply % s) args)))","user":"531902b1e4b08068f379ed77"},{"problem":59,"code":"(fn my-jaxt [& funcs] (fn [& args] (map #(apply % args) funcs) ))","user":"54d760efe4b0a52adc2e202b"},{"code":"(fn [ & fs ]\n    (fn [ & args ]\n        (map #(apply % args) fs)))","problem":59,"user":"5398305fe4b0b51d73faaef6"},{"code":"(fn [& fs]\n                (fn [& xs]\n                  (map #(apply %1 %2) fs (repeat xs))\n                  )\n                )","problem":59,"user":"52bbe6e1e4b07a9af57922ef"},{"problem":59,"code":"(fn my-juxt [f & fns]\n  (reduce\n   (fn [init f]\n     #(conj (apply init %&) (apply f %&)))\n   #(vector (apply f %&))\n   fns))","user":"58fc92c5e4b0438e51c2cf9a"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [acc f] (conj acc (apply f args))) [] fs)))","user":"55c20bd0e4b0e31453f64972"},{"problem":59,"code":"(fn foo [& fs]\n  (fn [& args]\n    (map #(apply % %2) fs (repeat args))))","user":"507eed82e4b06ce648bcdbfe"},{"code":"(fn [& fns] (fn [& args] (for [f fns] (apply f args))))","problem":59,"user":"4ee7fe83535d93acb0a66874"},{"problem":59,"code":"(fn juxt*\n  ([f]\n   (fn\n     ([] [(f)])\n     ([x] [(f x)])\n     ([x y] [(f x y)])\n     ([x y z] [(f x y z)])\n     ([x y z & args] [(apply f x y z args)])))\n  ([f g]\n   (fn\n     ([] [(f) (g)])\n     ([x] [(f x) (g x)])\n     ([x y] [(f x y) (g x y)])\n     ([x y z] [(f x y z) (g x y z)])\n     ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h]\n   (fn\n     ([] [(f) (g) (h)])\n     ([x] [(f x) (g x) (h x)])\n     ([x y] [(f x y) (g x y) (h x y)])\n     ([x y z] [(f x y z) (g x y z) (h x y z)])\n     ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)]))))","user":"51430fb2e4b0c172af7558ce"},{"code":"(fn [& funs] \n  (fn[& args] \n    (for [f funs] (apply f args))))","problem":59,"user":"5300aa1de4b0d8b024fd3710"},{"problem":59,"code":"(fn [& xs]\n  (fn [& ys]\n    (map #(apply % ys) xs)))","user":"54d000c7e4b018d918be98d7"},{"problem":59,"code":"(fn [& fs] (fn [& xs] (for [f fs] (apply f xs) )  )  )","user":"54e51c7be4b024c67c0cf7f7"},{"code":"(fn [& f] #(map (fn [e] (apply e %&)) f))","problem":59,"user":"4ede361a535d10e5ff6f5332"},{"code":"(fn [& f] (fn [& a] (reduce #(conj % (apply %2 a)) [] f)))","problem":59,"user":"4e976daa535dbda64a6f6b54"},{"problem":59,"code":"(fn juxtapose [& fs]\n  (let [j (fn anon [v fs & args]\n            (if (empty? fs) v\n              (let [f (first fs)]\n                (apply anon (conj v (apply f args)) (rest fs) args))))]\n    (fn [& args] (apply j [] fs args))))","user":"57d1d6c8e4b0bd073c202370"},{"problem":59,"code":"(fn [& fs] (fn [& xs] (map (fn [x] (apply x xs)) fs)))","user":"60329afce4b0d5df2af222b8"},{"code":"(fn [& fs]\n    (fn\n      ([& args] (map #(apply %1 args) fs))))","problem":59,"user":"51622fb8e4b009fba0926e3f"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& data]\n    (for [func funcs]\n      (apply func data))))","user":"5cbb0436e4b026601754b9cc"},{"code":"(fn [& f] #(map (fn [i] (apply i %&)) f))","problem":59,"user":"4ea5e32a535d7eef308072de"},{"code":"(fn juxt2 [& fs] \n    (fn [& args]\n      (map #(apply % args) fs)) )","problem":59,"user":"534d1173e4b084c2834f4a98"},{"code":"(fn [& fs] \n  (fn [& as] (for [f fs] (apply f as))))","problem":59,"user":"50523f4ee4b0a561d07d8f1b"},{"problem":59,"code":"(fn my-juxt [& x]\n  (fn inner [& args]\n     (map #(apply % args) x)      \n  )\n)","user":"54b050cee4b09f271ff37d13"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args]\n    (vec (map #(apply % args)\n              fns))))","user":"55916d7be4b0604b3f94d57d"},{"code":"(fn [& fs] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] (list* fs))))","problem":59,"user":"50c6fad1e4b00bb60fe0c52d"},{"code":"(fn [& args] (\n              fn [& x] (\n                        map #(apply % x) args)))","problem":59,"user":"52394c03e4b0d705d026ef09"},{"code":"(fn [& fns] (fn [& m] (map #(apply % m) fns)))","problem":59,"user":"4e6a5f5c535d8ccf87e9fed6"},{"code":"(fn [& fs] #(vec (for [f fs] (apply f %&))))","problem":59,"user":"51057b2be4b06d28cacc92e8"},{"code":"(fn [& f]                  \n  (fn [& x]                \n    (map #(apply % x) f)))","problem":59,"user":"4f9d8083e4b0dcca54ed6d23"},{"code":"(fn [& gg]\n  (fn [& args]\n    (map (fn [g] (apply g args)) gg)\n    ))","problem":59,"user":"4f616892e4b0defedf855fbf"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [result []\n           remaining-fs fs]\n      (if (seq remaining-fs)\n        (recur (conj result (apply (first remaining-fs) args))\n               (next remaining-fs))\n        result))))","user":"53f6bfd9e4b0db01ade6f9e4"},{"problem":59,"code":"(fn [& fns] (fn [& args] (reduce #(conj % (apply %2 args)) [] fns)))","user":"4e68c465535d8ccf87e9fe8a"},{"code":"(fn [& F] (fn [& X] (map #(apply % X) F)))","problem":59,"user":"4e7e55ab535db169f9c79711"},{"code":"(fn [& fns]\n        (fn [& args]\n          (map #(apply %1 args) fns)))","problem":59,"user":"534e9ed4e4b084c2834f4ab8"},{"code":"(fn [ & funcs ]\r\n  (fn [ & args ] (map (fn [f] (apply f args)) funcs)))","problem":59,"user":"4f426a7ae4b0d7d3c9f3fcff"},{"problem":59,"code":"(fn jxt [f & fs]\n  (fn [& args]\n    (map #(apply % args) (list* f fs))))","user":"5703eda3e4b08d47c9778200"},{"code":"(fn [& fns]\n  #(for [f fns]\n     (apply f %&)))","problem":59,"user":"52d2ca1ce4b099d49816f0b4"},{"code":"(fn my-juxt [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4f6bab49e4b07046d9f4efb1"},{"problem":59,"code":"(fn [& fns] \n\t(fn [& args]\n\t\t(map #(apply % args) fns)))","user":"5650082fe4b0284900eef6b7"},{"code":"#(fn [& args] (map (fn [f] (apply f args)) %&))","problem":59,"user":"4e9e0640535dbda64a6f6b91"},{"code":"(fn myjuxt [& fns]\n  #(loop [f fns \n          ret []]\n     (if (= 1 (count f))\n       (conj ret (apply (first f) %&))\n       (recur (rest f)\n              (conj ret (apply (first f) %&))))))","problem":59,"user":"51944aaae4b0142f60b4aedc"},{"problem":59,"code":"(fn jux [& r] ( fn [& r2] (map #(apply % r2) r)))","user":"55ac16a0e4b03311e7b73291"},{"problem":59,"code":"(fn defruit [& fns]\n  (fn [& args]\n    (for [x fns]\n      (apply x args))))","user":"594a7ed1e4b07ddc2dafae02"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& sq]\n    (for [f funcs] (apply f sq)\n)))","user":"54bbe505e4b0ed20f4ff6ec5"},{"problem":59,"code":"(fn juxt-me\n    ([& funcs]\n     (fn [& args]\n       (map (fn [f]\n              (apply f args)) funcs))))","user":"5a4b3abde4b05d388ecb6b81"},{"code":"#(fn [& v]\n  (for [f %&]\n    (apply f v)))","problem":59,"user":"4f9fe2b9e4b0dcca54ed6d40"},{"code":"(fn [& fns] (fn [& xs] (map #(apply % xs) fns)))","problem":59,"user":"4e976f79535dbda64a6f6b55"},{"code":"(fn [& funs]\n  (fn [& args]\n    (map\n     #(apply % args)\n     funs)))","problem":59,"user":"511f88eee4b085952a83535f"},{"problem":59,"code":"#(fn [& s] (for [f %&] (apply f s)))","user":"590b055ae4b047aa04b199c9"},{"problem":59,"code":"(fn jst [& fns] (fn [& args] (map #(apply %1 args) fns)))","user":"5646dff3e4b0284900eef615"},{"code":"#(fn [& args] (map apply %& (repeat args)))","problem":59,"user":"5281a445e4b0757a1b17143a"},{"code":"(fn [& f]\n  (fn [& more]\n    (map #(apply % more) f)))","problem":59,"user":"4faac363e4b081705acca200"},{"code":"(fn jxt [& fs] \n  (fn [& xs]\n    (map #(apply % xs) fs)))\n;(fn jxt [& fs] \n;  (fn [& xs] \n;    (loop [gs fs v []]\n;      (if (seq gs)\n;        ))))","problem":59,"user":"50a4f36be4b0344e360f3bc9"},{"code":"(fn juxt* [& fs]\n    (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"5370ef22e4b0fc7073fd6ea0"},{"code":"(fn [& fns] \n  (fn [& args] \n    (for [f fns] (apply f args))))","problem":59,"user":"5025b93ce4b0c969f0b056df"},{"code":"(fn [& fns]\n                 (fn [& args]\n                   (loop [res [(apply (first fns) args)]\n                          fns (rest fns)]\n                     (if (seq fns)\n                       (recur (conj res (apply (first fns) args)) (rest fns))\n                       res))))","problem":59,"user":"4e08fb7a535d04ed9115e7ac"},{"problem":59,"code":"(fn myjuxt[& fns]\n  (fn[& args]\n    (loop [[f & tail :as in] fns result []]\n      (cond (empty? in) result\n            :else (recur tail (conj result (apply f args)))))))","user":"5472cba1e4b094393f72dd7a"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [res f-fn]\n              (conj res (apply f-fn args)))\n            []\n            fns)))","user":"5ddb6151e4b0948ae9d9adb0"},{"problem":59,"code":"(fn h [& fs] \n  (let [fa \n        (fn far [ls fs] (if (empty? fs) nil (concat [(apply (first fs) ls)] (far ls (rest fs))))\n          )\n        ]\n    (fn hh [& ls] (fa ls fs))\n    )   \n)","user":"5c54e605e4b0fb8c5ffd9a14"},{"problem":59,"code":"(fn [& funcs] #(map (fn [f] (apply f %&)) funcs))","user":"5bc39d2be4b07a9b28b10045"},{"code":"(fn juxtificate [& funcs]\n  (fn bigfunc [& args]\n    (map #(apply %1 args) funcs)))\n\n;(fn juxtificate [firstfn & funcs]\n;  (if (empty? funcs)\n;    (fn [& args] (apply firstfn args))\n;    (fn [& args]\n;      (flatten (concat [(apply firstfn args)]\n;        [(apply (apply juxtificate funcs) args)])))))","problem":59,"user":"4fc50bcbe4b081705acca375"},{"code":"(fn [& col]\n  (fn [& params] (map #(apply % params) col) )\n\n  )","problem":59,"user":"4ec5bec6535d6d7199dd36b3"},{"code":"(fn\n  ([a b] (fn \n             ([x] [(a x) (b x)])))\n  ([a b c] (fn \n             ([& x] [(apply a x) (apply b x) (apply c x)]))))","problem":59,"user":"52cc4fd6e4b07d0d72b27360"},{"problem":59,"code":"(fn [& f] (fn [& args] (map #(apply %1  args) f)))","user":"575a0ef0e4b02ea114799335"},{"problem":59,"code":"(fn [& fns] (fn [& input] (reduce #(conj %1 (apply %2 input)) [] fns)))","user":"5632e850e4b0bfe05bf117ac"},{"problem":59,"code":"(fn do-juxt\n  [& fs]\n  (fn [& args]\n    (reduce\n      (fn [acc, f] (conj acc (apply f args)))\n      []\n      fs)))","user":"59b62f8de4b05c620303ca1f"},{"problem":59,"code":"(fn [& lst]\n    (fn [& args]\n      (map #(apply % args) lst)))","user":"544e9022e4b0e3978000698b"},{"problem":59,"code":"(fn juxtp\n  [& fs]\n  (fn\n    [& args]\n    (map #(apply % args) fs)))","user":"5401aefbe4b0df28a13c62c7"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& args]\n    (reduce (fn [results ff]\n              (conj results (apply ff args)))\n              []\n              fs)))","user":"60b1add0e4b0e0fa5f1b4227"},{"problem":59,"code":"(fn [& f-args]\n           (fn [& args]\n             (map #(apply % args) f-args)))","user":"5e1c3e6ee4b0dc9594008530"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (into [] (map #(apply % args) fns))\n    )\n  )","user":"4e28ddd1535deb9a81d77efd"},{"problem":59,"code":"(fn \n  [& func]\n  (fn [& args] (map #(apply % args) func)))","user":"563a30d7e4b0bfe05bf117f9"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map\n     #(apply % xs)\n     fs)))","user":"521d064fe4b0c4ef0be830a8"},{"code":"(fn myjuxt [& initfs]\r\n  (fn f [& args]\r\n    (loop [ret [], fs initfs] \r\n      (if (empty? fs)\r\n        ret\r\n        (recur (conj ret (apply (first fs) args)) (rest fs))))))","problem":59,"user":"4e123905535d04ed9115e7ce"},{"problem":59,"code":"(fn f [& gs] #(map (fn [g] (apply g %&)) gs))","user":"55bfc39ee4b01b9910ae2a1a"},{"problem":59,"code":"#(fn [& x] (map (fn [y] (apply y x)) %&))","user":"57ec3d29e4b0bfb2137f5b77"},{"problem":59,"code":"(fn b\n    [& funcs]\n    (fn\n      [& args]\n      (reverse (reduce (fn\n                         [res f]\n                         (conj res (apply f args)))\n                       (conj '() (apply (first funcs) args))\n                       (rest funcs)))\n      )\n    )","user":"5ddd3cbee4b0948ae9d9adc3"},{"problem":59,"code":"(fn [& fs]\n\t(fn [& args]\n\t\t(reduce #(conj %1 (apply %2 args))\n\t\t\t\t[]\n\t\t\t\tfs)))","user":"55b8c339e4b01b9910ae29b9"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [f] \n           (apply f args)) \n         fs)))","user":"5fab7ea6e4b08cb800c85ad8"},{"code":"(fn [& f]\n  (fn [& p] \n     (map #(apply % p) f)))","problem":59,"user":"5054bc87e4b0b1b9d1860eb0"},{"problem":59,"code":"(fn [& fs] (fn [& args]\n  (map (fn [f] (apply f args)) fs)))","user":"54961073e4b0b312c081ff62"},{"code":"(fn ju[& a] \n  (partial (fn ju[s & r] (map #(apply %1 r) s)) a)\n)","problem":59,"user":"4e9de526535dbda64a6f6b8e"},{"problem":59,"code":"(fn myJuxt [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"556c70dae4b09a3098a524fd"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (for [f fs]\n       (apply f args))))","problem":59,"user":"4f849f76e4b033992c121c36"},{"problem":59,"code":"(fn [& args] \n  (fn [& outside-args] (for [each-func args] (apply each-func outside-args)) \n  )\n)","user":"593db05ae4b069cdc2982bab"},{"problem":59,"code":"(fn [& ifns] (fn [& args] (map #(apply % args) ifns)))","user":"57aa290de4b0b8559636fc65"},{"problem":59,"code":"(fn [& fs]\n      (fn [& xs]\n        (map #(apply % xs) fs)))","user":"58c4b11ae4b021aa9917ed2c"},{"problem":59,"code":"(fn [& funcs]\n  (fn \n    [& args]\n    (reduce \n     (fn [acc f]\n      (conj acc (apply f args ))\n       )\n     []\n     funcs\n     )\n    )\n  )","user":"5776558ee4b0979f89651633"},{"code":"(fn j [& fs]\n  (fn [& a]\n    (map #(apply % a) fs)))","problem":59,"user":"5175533fe4b0dea9bbfba575"},{"problem":59,"code":"(fn[& a](fn[& b](map #(apply % b) a)))","user":"5596af34e4b04c1e5c31d758"},{"problem":59,"code":"(fn __ [& fn_args] \n\t(fn [& xargs] \n\t\t(map  #(apply % xargs)  fn_args)\n\t)\n)","user":"533a2f7be4b0e30313ee6cb8"},{"problem":59,"code":"(fn [& fs]\n  (fn [& p]\n    (map #(apply % p) fs)))","user":"53c38b8ce4b00fb29b22127b"},{"code":"(fn[& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"509b152be4b0412cdea6eb1e"},{"code":"(fn [& funcs]\n  (fn [& coll]\n    (map #(apply % coll) funcs)))","problem":59,"user":"4fbb9d80e4b081705acca2ea"},{"code":"(fn my-juxt [& fns]\n             (fn [& args]\n               (map #(apply % args) fns)))","problem":59,"user":"4f465096e4b0d56e7bb92b9a"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n      (reduce #(conj %1 (apply %2 xs))\n              [(apply (first fs) xs)] (rest fs))))","user":"5c6d0e51e4b0fca0c1622735"},{"code":"(fn [& f]\n     (fn [& a] (map #(apply % a) f)))","problem":59,"user":"52e3e6a8e4b09f7907dd1448"},{"problem":59,"code":"(fn my-juxt [& fns]\n        (fn [& args]\n          (for [f fns]\n            (apply f args))))","user":"541ae7dbe4b01498b1a71a61"},{"code":"(fn [& funs] (fn [& d] (map #(apply % d) funs)))","problem":59,"user":"52265e41e4b04e78ff2e1981"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs )))","user":"608ec5e4e4b03bd49d9f36c0"},{"problem":59,"code":"(fn mjuxt [& funs]\n  (fn [& values]\n    (map #(apply % values) funs)))","user":"57ed2574e4b0bfb2137f5b93"},{"problem":59,"code":"(fn juxtt\n    ([] (fn [& args] '()))\n    ([f1 & other]\n     (fn [& args]\n       (cons (apply f1 args) (apply (apply juxtt other) args)))))","user":"5eb4927fe4b00a66d4a95221"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (map (fn [func]\n             (apply func args)\n             )\n funcs)))","user":"5bf9d9b7e4b0bdcf453d15c4"},{"code":"(fn [& fs]\n  (fn [& as] (map #(apply % as) fs)))","problem":59,"user":"5032b066e4b00c0952a257ea"},{"problem":59,"code":"(fn my-juxt [f & fs]\n  (if (nil? fs)\n    (fn [& args] (list (apply f args)))\n    (let [next-juxt (apply my-juxt fs)]\n      (fn [& args]\n        (cons (apply f args) (apply next-juxt args))))))","user":"53edb628e4b0d648e757f4c8"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fs )\n    )\n  )","user":"537b1083e4b06839e8705e64"},{"problem":59,"code":"(fn [& fs]\n      (fn [& args]\n        (map #(apply % args) fs)))","user":"550c55d0e4b06e50f9beb14d"},{"problem":59,"code":"(fn [& f]\n  (fn [& x]\n    \n   (map  #(apply  % x)    f) \n    \n    \n   )\n  \n  \n)","user":"5da98129e4b000c986472c33"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n  \t(map\n    \t#(apply %1 %2)\n    \tfuns \n    \t(repeat (count funs) args))))","user":"580a0783e4b0a837a8b30d2c"},{"code":"(fn _juxt [& functions]\n  (fn [& arguments]\n    (for [f functions]\n      (apply f arguments))))","problem":59,"user":"510cd1dde4b078ea71921124"},{"problem":59,"code":"(fn [& f]\n  (fn [& v]\n    (reduce #(conj % (apply %2 v)) [] f) ))","user":"551c66dae4b07993ea3788de"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n      (reduce #(conj %1 (apply %2 xs)) [] fs)\n)\n)","user":"53ca23e3e4b00fb29b2212c6"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (letfn [(juxta [fns]\n              (if (seq fns)\n                (cons (apply (first fns) args) (juxta (rest fns)))))]\n      (juxta fns))))","user":"5a9dbb32e4b0d174b936c7f3"},{"code":"(fn [& funcs] (fn [& args] (map #(apply %1 args) funcs)))","problem":59,"user":"50e8a340e4b0ebbe794eb7ed"},{"code":"(fn [& xs]\n  (fn [& ys]\n    (map (fn [x]\n           (apply x ys))\n         xs)))","problem":59,"user":"535aee3be4b04ce2eb3ed2aa"},{"problem":59,"code":"(fn __ [f & fs]\n  (if (empty? fs)\n    (fn [& a]\n      (vec (list (apply f a))))\n    (fn [& a]\n      (into (vec (list (apply f a)))\n            (apply (apply __ fs) a)))))","user":"54c271b9e4b045293a27f602"},{"problem":59,"code":"(fn [& args]\n  (fn [& a]\n    \t(map #(apply % a) args)\n    )\n  )","user":"595fe942e4b066ee0a44b075"},{"problem":59,"code":"(fn\n    [& fs]\n    (fn [& args]\n      (map #(apply % args) fs)))","user":"52485f02e4b05ef8e38e63d3"},{"code":"(fn [ & fs]\n  (fn [ & arg]\n    (map #(apply % arg) fs)))","problem":59,"user":"4ea5e794535d7eef308072df"},{"problem":59,"code":"(fn [& fns] \n\n        (fn [& args]\n           \n            \n            (map #(apply %1 args)  fns)     \n        )\n   )","user":"5b274fd1e4b063e2438bcc3b"},{"problem":59,"code":"(fn my-juxt [& args]\n  (fn [& args_]\n    (for [f args\n          :let [y (apply f args_)]]\n      y)))","user":"5bf0aefde4b0a6d31fed215a"},{"code":"(fn[& x] (fn [& v] (for [f x] (apply f v))))","problem":59,"user":"4f82ed48e4b033992c121c0e"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (map (fn [x] (apply x args)) f)))","user":"56f4623ae4b046a417f9205d"},{"code":"(fn [x & xs]\n  (fn [y & ys] (map #(apply % y ys) (cons x xs))))","problem":59,"user":"5110b8bae4b04c71fce993f4"},{"code":"(fn \r\n    ([& b] \r\n     (fn \r\n       ([& x] (reduce #(conj %1 (apply %2 x)) [] b)))))","problem":59,"user":"4dd61f98535d2dad7130b5c6"},{"code":"(fn [& fs] (fn[& xs] (vec (map #(apply % xs) fs))))","problem":59,"user":"5158bba4e4b059418b97f0ab"},{"problem":59,"code":"(fn x [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"57c7a8b5e4b05aa3c4741d09"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [rs f] (conj rs (apply f args))) [] fs)))","user":"55316b8ae4b076ab5578f825"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args]\n    (mapv #(apply % args) fns)))","user":"560794bde4b08b23635d3182"},{"problem":59,"code":"(fn [& funcs]\n  \t\t(fn [& args]\n  \t\t\t(loop [tmpfuncs funcs new []]\n  \t\t\t\t(if (empty? tmpfuncs)\n  \t\t\t\t\tnew\n  \t\t\t\t\t(recur (rest tmpfuncs) (conj new (apply (first tmpfuncs) args)) )\n  \t\t\t\t))\n    \t\t))","user":"59368ccae4b02506e01a2979"},{"problem":59,"code":"(fn [& s]\n  (fn [& e]\n    (loop [remaining s ans []]\n      (if (empty? remaining)\n        ans\n        (recur (rest remaining) (conj ans (apply (first remaining) e)))))))","user":"5746061ae4b009280f9f2b5b"},{"problem":59,"code":"(fn [& fs]\n         (fn [& args]\n           (map #(apply % args) fs)))","user":"5beda647e4b0a6d31fed2122"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (loop [list_f funcs\n           result []]\n      (if (empty? list_f)\n          result\n          (recur (rest list_f) (conj result (apply (first list_f) args)))))))","user":"52a5a8ebe4b0c58976d9abed"},{"code":"(fn [& functions] \n  (fn [& args] \n    (loop [functions functions\n           acc []]\n    (if (< 0 (count functions))\n      \n      (recur (rest functions) \n             (concat acc [(apply (first functions) args)]))\n      acc))))","problem":59,"user":"52f6aac2e4b047fd55836fba"},{"problem":59,"code":"(fn my-juxt [f & fs]\n  (fn [& args]\n    (vec (map #(apply % args)\n              (cons f fs)))))","user":"568e1871e4b0dcc4269f40cc"},{"problem":59,"code":"(fn jux [& funs] (fn [& args] (map #(apply % args) funs)))","user":"5ee93720e4b029a2061bbeb7"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))\n\n#_(fn juju [fh & fr]\n  (let [proceed (fn proceed [fh & fr]\n                  (if fr\n                    (cons #(apply fh %) (apply proceed fr))\n                    [#(apply fh %)]))\n        fs (cons fh fr)]\n    (fn [& args]\n      (map #(% args) (apply proceed fs)))))","problem":59,"user":"5213dbc3e4b0961f15ac4d74"},{"code":"(fn [& fn-list]\n  (fn [& arg-list]\n\t\t(map #(apply % arg-list) fn-list)))","problem":59,"user":"4fb57e06e4b081705acca2bf"},{"problem":59,"code":"#(fn [& r] (map (fn [f] (apply f r)) %&))","user":"588fbb39e4b00487982d51bd"},{"code":"(fn [& fns]\n    (fn [& args]\n        (map #(apply % args) fns)))","problem":59,"user":"4f0b2028535d0136e6c222ff"},{"code":"(fn [& funs]\n\t(fn [& args]\n\t\t(for [fun funs] \n\t\t\t(apply fun args))))","problem":59,"user":"520242bae4b030ee0c5b26e3"},{"problem":59,"code":"(fn[& fns] (fn [& args] (mapv #(apply % args) fns)))","user":"4f1ef6a0535d64f60314649b"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] (map #(apply % args) fns))\n)","user":"568513c4e4b04eec3ec5cfc5"},{"problem":59,"code":"(fn juxtapos [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"5e20a159e4b05b4b01516118"},{"problem":59,"code":"(fn juxtapos[& funcs]\n  (fn [& args] (map #(apply %1 args) funcs)))","user":"5d5e0259e4b0c9e5857d4fef"},{"code":"(fn [& args1]\n  (fn [& args2]\n    (for [f args1]\n      (apply f args2))))","problem":59,"user":"50843a4ae4b0c98812d0788b"},{"problem":59,"code":"(fn t [& fns]\n (fn [& args]\n  (mapv #(apply % args) fns)))","user":"589b98fae4b00487982d533c"},{"code":"(fn [& fs] (fn [& xs] (map #(apply % xs) fs)))","problem":59,"user":"4e50b67b535dc968683fc4ed"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args] \n    (map #(apply % args) funcs)))","user":"5483d59fe4b0e286459a1194"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& a] (map #(apply % a) funcs)))","user":"57b9fb56e4b0fbc9809a27fa"},{"code":"(fn my-juxt\n  [& op]\n  (fn [& args]\n    (for [o op]\n      (apply o args))))","problem":59,"user":"4f8bbb27e4b02e764a0a5182"},{"code":"(fn [& l] (fn [& m] (map #(apply % m) l)))","problem":59,"user":"534bde26e4b084c2834f4a81"},{"code":"(fn [& o]\n  (fn [& a]\n    (map #(apply %1 a) o)))","problem":59,"user":"5046ee3ee4b03b02161376b4"},{"code":"(fn juxtaposition [& x]\n  (fn [& y]\n    \n    (map \n\n     #(apply % (vec y))\n\n    \n     x)))","problem":59,"user":"515bbcd9e4b0388ca8ca1521"},{"code":"(fn [& f]\n  (fn [& x]\n    (map #(apply % x) f)))","problem":59,"user":"4f1d1d95535d64f603146488"},{"problem":59,"code":"(fn [& fs] (fn [& xs] (reduce (fn [acc f] (conj acc (apply f xs))) [] fs)))","user":"5b1c16e1e4b03cfeda66ecf2"},{"code":"(fn juxt* [& fns]\n  (fn [& args]\n    (map #(apply %1 args)\n         fns)))","problem":59,"user":"4daea889edd6309eace4d15b"},{"code":"(fn [& funs]\n  (fn [& args] (map (fn [f] (apply f args)) funs)))","problem":59,"user":"4f418eaee4b0d7d3c9f3fce9"},{"code":"(fn [& fl]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fl)\n  )\n)","problem":59,"user":"4f84400de4b033992c121c2e"},{"problem":59,"code":"(fn my-juxt [& fs]\n     (fn [& xs]\n       (map #(apply % xs) fs)))","user":"548ade6de4b0e286459a11f6"},{"code":"(fn [& funs]\n  (fn [& args]\n    (for [f funs] (apply f args))))","problem":59,"user":"5302bb37e4b0d8b024fd3734"},{"problem":59,"code":"(fn [& fs]\n  (fn [& vals]\n    (map #(apply % vals) fs)))","user":"563e1c0ee4b0da801c4e4665"},{"problem":59,"code":"(fn [& f]\n  (fn [ & r]\n    (map #(apply % r) f)))","user":"54c169ade4b0ed20f4ff6f24"},{"problem":59,"code":"(fn [& fns]\n\n  (fn [ & args] ( reduce #(conj %1 (apply %2 args)) [] fns ))\n\n)","user":"56f2611fe4b04a395b9a04a2"},{"problem":59,"code":"(fn jxt\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5d0bb4fae4b0cc9c91588237"},{"code":"(fn [& args] \n  #(for [f args]\n    (apply f %&)\n  )\n)","problem":59,"user":"52016690e4b0b2e020a18f0f"},{"problem":59,"code":"(fn [a b &[c]]\n  (fn [& x]\n    (if c\n      (vector (apply a x) (apply b x) (apply c x))\n      (vector (apply a x) (apply b x)))))","user":"562d869be4b0a45d2ff8301f"},{"problem":59,"code":"(fn m [& fs] \n  (fn [& xs]\n  \t(map #(apply % xs) fs)))","user":"57642916e4b0994c1922fbee"},{"code":"(fn [& fns]\n  (fn [& x]\n    (map (fn [f] (apply f x)) fns)))","problem":59,"user":"53820087e4b06839e8705ecf"},{"problem":59,"code":"(fn [& predicates] (fn [& value] (map #(apply % value) predicates)))","user":"5a59a76fe4b05d388ecb6c98"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (loop [[f & left] fns\n           acc []]\n      (if f\n        (recur left (conj acc (apply f xs)))\n        acc))))","user":"5687b6abe4b0dcc4269f4061"},{"problem":59,"code":"(fn [& f]\n  (fn [& b]\n    (map #(apply % b) f)))","user":"53ea5851e4b036ad0777e4e4"},{"problem":59,"code":"(fn [& fns] (fn[ & args] (map #(apply % args) fns)))","user":"5481be5fe4b0e286459a1172"},{"problem":59,"code":"(fn cmp [& fs]\n  (fn [& args]\n    (reduce (fn [results f]\n              (conj results (apply f args)))\n            []\n            fs)))","user":"5fea32f3e4b05ac5b16ea1aa"},{"code":"(fn [& fns]\n          (fn [& xs]\n            (for [f fns] (apply f xs))))","problem":59,"user":"52c4fe42e4b0c2d177d620e9"},{"problem":59,"code":"(fn juxtapo [f g & fs]\n  (fn [& args]  (mapv #(apply % args) (list* f g fs))))","user":"5272645de4b03e8d9a4a742c"},{"code":"(fn [& fs] (fn [& s] (for [f fs] (apply f s))))","problem":59,"user":"5065faf9e4b0313a384e5645"},{"code":"(fn [& fs]\n  (fn [& xs] (map #(apply % xs) fs)))","problem":59,"user":"4ef41f26535dced4c769f230"},{"code":"(fn [& fs]\n  (fn [& xs] \n    (map #(apply % xs) fs)))","problem":59,"user":"4db045b5838c48654951d9be"},{"problem":59,"code":"(fn [& funs]\n         (fn [& args]\n           (loop [fs funs acc []]\n             (if (empty? fs)\n               acc\n               (recur (rest fs) (conj acc (apply (first fs) args)))\n               )\n             )\n           )\n         )","user":"552d9013e4b076ab5578f7ea"},{"code":"(fn [& functions] (fn [& values] (map #(apply % values) functions)))","problem":59,"user":"4fa3f91fe4b081705acca196"},{"code":"(fn [& fx]\n    (fn [& args]\n      (map #(apply % args) fx)))","problem":59,"user":"50cae881e4b0f75dcc9a6e51"},{"code":"(fn [& f]\n  (fn [& x]\n    (vec (map #(apply % x) f))))","problem":59,"user":"53415755e4b00652c8746ecd"},{"problem":59,"code":"(fn [& fns]\n  (fn [& coll] \n    (reduce \n     (fn [result func] (conj result (apply func coll))) [] fns)))","user":"560039cce4b04bb52996e162"},{"problem":59,"code":"(fn [& fs](fn [& col] (for [f fs] (apply f col))))","user":"56347285e4b0bfe05bf117bc"},{"problem":59,"code":"(fn foocomp [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"56fc0601e4b07572ad1a88db"},{"problem":59,"code":"(fn jxt [& shit]\n  (fn [& args] (map #(apply % args) shit)))","user":"561814bae4b06b1bb2182a1a"},{"problem":59,"code":"(fn jux\n  [& funs]\n  (fn [& more]\n    (loop [result []\n           funs (seq funs)]\n      (if funs\n        (recur (conj result (apply (first funs) more))\n               (next funs))\n        result))))","user":"4e8a170c535d3e98b802328f"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args] (map #(apply %1 args) funs)))","user":"60849bd6e4b0736b099e42f2"},{"problem":59,"code":"(fn juxt-disguised\n  [& funcs]\n  (fn [& args] (map #(apply % args) funcs)))\n\n;; the recursive solution\n#_(fn juxt-disguised [& funcs]\n  (fn [& xs] \n    (loop [[head-fn & tail-fns] funcs\n           acc []]\n      (if (nil? head-fn)\n        acc\n        (recur tail-fns (conj acc (apply head-fn xs)))))))","user":"5553b729e4b0deb715856e05"},{"code":"(fn my-juxt [& funcs]\r\n  (fn [& args]\r\n    (map #(apply % args) funcs)))","problem":59,"user":"4df669d4535d08e6dec9fe35"},{"code":"(fn [& funcs]\n    (fn [& args]\n        (map #(apply % args) funcs)))","problem":59,"user":"4f4ac35ae4b0d56e7bb92c18"},{"problem":59,"code":"(fn my-juxt [& ops]\n  (fn[& args]\n    (map #(apply % args) ops)\n  )\n)","user":"55d7312ee4b0e31453f64a9f"},{"problem":59,"code":"(fn [& fn-coll]\n  (fn [& coll]\n    (map  #(apply % coll) fn-coll)))","user":"5c0e3f86e4b01240ff56713d"},{"code":"(fn [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))))","problem":59,"user":"4fdec88fe4b05e33b9224f8e"},{"code":"(fn [& funcs] (fn [& seq] (map #(apply % seq) funcs)))","problem":59,"user":"529f5a23e4b04e0c58e87baa"},{"problem":59,"code":"(fn q[& fs] (fn [& xs] (for [f fs] (apply f xs))))","user":"5717d674e4b07c98581c3b1a"},{"code":"(fn [& l]\n  (fn [& p]\n    (map #(apply % p) l))\n  )","problem":59,"user":"4fbbcf0ce4b081705acca2ee"},{"code":"(fn [& fs]\n  (fn [& s]\n    (map #(apply % s) fs)))","problem":59,"user":"4eeaf88f535d93acb0a668a3"},{"problem":59,"code":"(fn [& fns]\n    (fn [& xs]\n      (for [f fns]\n        (apply f xs))))","user":"5d52ea90e4b0776584bd6f6c"},{"code":"(fn[& fs] (fn[& args] (for[f fs] (apply f args))))","problem":59,"user":"507c7c8be4b0b083f3ff82ef"},{"problem":59,"code":"(fn [& f] (fn [& s] (for [x f] (apply x s))))","user":"53e2ac1ae4b036ad0777e3f3"},{"code":"(fn my-juxt [& fns]\n  (fn [& x]\n    (for [a-fn fns]\n      (apply a-fn x))))","problem":59,"user":"52ee46e5e4b05e3f0be25ec5"},{"code":"(fn [& f]\n    (fn [& coll]\n      (map #(apply % coll) f)))","problem":59,"user":"52a9154ee4b0c58976d9ac3b"},{"problem":59,"code":"(fn [& x] (fn [& v] (map #(apply % v) x)))","user":"4fdf4e2be4b05e33b9224f96"},{"code":"(fn f59\n([f] (fn [& x] [(apply f x)]))\n([f1 f2] (fn [& x] (vec (flatten [(apply f1 x) (apply f2 x)]))))\n([f1 f2 & fs] (apply f59 (f59 f1 f2) fs)))","problem":59,"user":"4e88feef535d8b9bb0147ca8"},{"problem":59,"code":"(fn [& args]\n (fn [& inner]\n   (map #(apply % inner) args)))","user":"53f6d555e4b0db01ade6f9e5"},{"code":"(fn [& fs]\r\n  (fn [& args]\r\n\t\t(map #(apply % args) fs)))","problem":59,"user":"4f4fbed7e4b03ad3f0c10ce8"},{"code":"#(fn [& l]\n  (map apply %& (cycle [l])))","problem":59,"user":"50a83315e4b054305ba5a830"},{"code":"#(fn [& xs] (for [f %&] (apply f xs)))","problem":59,"user":"50e3cf55e4b01912b3285c45"},{"code":"(fn [& f] \n   (fn [& args] \n     (map #(apply % args) f))\n   )","problem":59,"user":"4fc0853ae4b081705acca327"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (apply conj [] (map #(apply % args) fns))\n    \n    ))","user":"5c59b836e4b01df32ab73263"},{"problem":59,"code":"(fn f\n  [& op]\n  (fn g\n    [& vals]\n    (map #(apply % vals) op)))","user":"5da7176ae4b000c986472c13"},{"code":"(fn [& fns]\n    (fn [& args]\n      (loop [ret [(apply (first fns) args)]\n             fns (next fns)]\n        (if fns\n          (recur (conj ret (apply (first fns) args)) (next fns))\n          ret))))","problem":59,"user":"4e8e8c24535d65386fec2143"},{"code":"(fn [& fns]\n    (fn [& args]\n      (map (fn [f] (apply f args)) fns) ) )","problem":59,"user":"515cf9b5e4b00901442db1d4"},{"problem":59,"code":"(fn apply-funcs [& funcs]\n\n  (fn [& r]\n    \n  (loop [res [] f-list funcs]\n    (if (empty? f-list)\n    res\n    (recur (conj res (apply (first f-list) r)) (rest f-list)))))\n)","user":"5c9b848fe4b048ec896c5acf"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args] \n    (map #(apply % args) fns)))","user":"59837909e4b021a7a535fe16"},{"problem":59,"code":"(fn [& args]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] args)))","user":"56d1afd9e4b0ea9b8538f791"},{"problem":59,"code":"(fn [& f] \n  (fn [& a] \n    (map #(apply % a) f)))","user":"555883c5e4b0deb715856e2d"},{"problem":59,"code":"(fn [ & flist] (fn [& args] (map (fn [f] (apply f args)) flist)))","user":"4df9c598535d04ed9115e77a"},{"problem":59,"code":"(fn [& fs] \n  (fn [& xs] \n    (mapv (fn [f] (apply f xs)) fs)))","user":"5353afa0e4b084c2834f4b03"},{"problem":59,"code":"(fn [ & fs ] \n  (fn [ & z ] \n    (map (fn [f] (apply f z)) \n         fs)\n    )\n  )","user":"54a1d643e4b09f271ff37c50"},{"code":"(fn [& fs]\n  (fn [& a]\n    (map #(apply %1 a) fs)))","problem":59,"user":"4e9a1512535dbda64a6f6b6e"},{"code":"(fn [& functions]\n  (fn [& args] (map #(apply % args) functions)))","problem":59,"user":"4f3e6244e4b0e243712b1f85"},{"problem":59,"code":"(fn [& f*] \n  (fn [& args] \n    (map \n     (fn [f] (apply f args)) \n     f*)))","user":"58bcecc9e4b0888cdc949d24"},{"code":"(fn[& funcs]\n    (fn[& args]\n      (map #(apply % args) funcs)))","problem":59,"user":"4fc50525e4b081705acca370"},{"code":"(fn [& fs] \n  (fn [& args]\n      (mapcat identity (rest (reverse (reduce \n        #(conj %1 (list (apply %2 (last %1))))\n        (list args)\n        fs\n      ))))\n  ))","problem":59,"user":"504e685fe4b0f6ff3350c4ae"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& x] (map #(apply % x) funcs)))","user":"5b9da7fbe4b0c0b3ffbd4b3f"},{"code":"(fn[& f](fn[& i](map #(apply % i) f)))","problem":59,"user":"4fb3dd1ee4b081705acca2a5"},{"problem":59,"code":"(fn myjuxt [& fs]\n  (fn [& xs] (map #(apply % xs) fs)))","user":"54857e3be4b0e286459a11ad"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","user":"53dc94c8e4b094d41abdfefc"},{"code":"(fn [& f] (fn [& args] \n  (for [i (range (count f))] \n    (apply (nth f i) args))))","problem":59,"user":"4ea9b80c535d7eef30807306"},{"code":"(fn [& f] (fn [& x] (map #(apply % x) f)))","problem":59,"user":"4dcc5aff535d5973398f9293"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (loop [\n           [f & r] funcs\n           v []\n          ]\n      (if f\n        (recur r (conj v (apply f args)))\n        v))))","user":"5414b7c4e4b01498b1a719ed"},{"problem":59,"code":"(fn fx [& fns] \n  (fn [& x] (for [f fns] (apply f x)))\n  )","user":"4ec4d723535dcc7ae8597d65"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs] (map (fn [f] (apply f xs)) fs)))","user":"56e2ca59e4b03a7c14b85a38"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (map \n        (fn [f]\n          (apply f args)) fs)\n      ))","user":"54094824e4b0addc1aec66da"},{"code":"(fn juxtaposition [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4f3fb586e4b0e243712b1f9c"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [to-juxt (rest fns)\n           juxtd   [(apply (first fns) args)]]\n      (if (empty? to-juxt)\n        juxtd\n        (recur (rest to-juxt)\n               (conj juxtd (apply (first to-juxt) args)))))))","user":"541709b0e4b01498b1a71a06"},{"problem":59,"code":"(fn [ & fns ]\n  (fn [ & args ]\n    (loop [l fns result []]\n      (if\n        (empty? l)\n        result\n        (recur (rest l) (conj result (apply (first l) args)))))))","user":"5a2df4a0e4b09cafd31c7f74"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n     (mapv (fn [f] (apply f args)) fs)))","user":"547d8e93e4b0c51c1f4d72f4"},{"problem":59,"code":"(fn [& f]\n                (fn [& x]\n                  (reduce #(conj % (apply %2 x)) [] f)))","user":"55a372f1e4b0acc240e31537"},{"code":"(letfn [(myjuxt [& funcs]\r\n      (fn [& args]\r\n        (map #(apply % args) funcs)\r\n    ))]\r\n  myjuxt)","problem":59,"user":"4df3d4f4535d08e6dec9fe2c"},{"code":"(fn [& args] (fn [& x] (map #(apply % x) args)))","problem":59,"user":"4db58ccb535d87e67b28fe10"},{"problem":59,"code":"(fn myapply [& fns]\n  (fn [& args] (reduce (fn [t v] (conj t (apply v args))) [] fns)))","user":"4f7207d3e4b07046d9f4f019"},{"code":"(fn j [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4fca1cd6e4b0ee37620e184c"},{"code":"(fn [& fns] #(for [f fns] (apply f %&)))","problem":59,"user":"5201ff99e4b0b2e020a18f26"},{"code":"(fn [& a] #(for [f a] (apply f %&)))","problem":59,"user":"4e951ce5535dbda64a6f6b2e"},{"code":"(fn [& funs]\r\n  (fn\r\n    ([arg]\r\n       (loop [res [((first funs) arg)] to-call (rest funs)]\r\n         (if (empty? to-call)\r\n           res\r\n           (recur (conj res ((first to-call) arg)) (rest to-call)))))\r\n    ([arg1 arg2 & args]\r\n       (loop [res [(apply (first funs) (list* arg1 arg2 args))] to-call (rest funs) ]\r\n         (if (empty? to-call)\r\n           res\r\n           (recur (conj res (apply (first to-call) (list* arg1 arg2 args))) (rest to-call)))))))","problem":59,"user":"4df3df8a535d08e6dec9fe2d"},{"problem":59,"code":"(fn mjuxt\n  [& funcs]\n  (fn [& args] (#(for [i funcs] (apply i %)) args)))","user":"5866b999e4b0f14aab7c886b"},{"problem":59,"code":"(fn _juxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"51b8d3d5e4b050a1176cd69d"},{"problem":59,"code":"(fn __ [& funcs]\n  (fn [& args]\n    (map #(apply %1 args) funcs))\n  )","user":"5a0ce1a5e4b04bbd27e6d9b7"},{"problem":59,"code":"(fn [& fs]\n  (fn [& x] (map #(apply % x) fs))\n  )","user":"5b118b7be4b0cc2b61a3be34"},{"problem":59,"code":"(fn [& xs]\n  (fn [& ys]\n    (map #(apply % ys)\n            xs)))","user":"5fec4f5ee4b05ac5b16ea1bf"},{"code":"(fn [& a] \n  (fn [& b]\n    (map #(apply %1 b) a)))","problem":59,"user":"4f82f9f7e4b033992c121c10"},{"code":"(fn [& fs] (fn [& as] (map #(apply % as) fs)))","problem":59,"user":"5027b41ee4b01614d1633fee"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& x]  \n    (loop [fs fs\n           res []]\n      (if (empty? fs)\n        res\n        (recur (rest fs)\n               (conj res (apply (first fs) x)))))))","user":"531bad96e4b08068f379ed93"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (for [f fns] (apply f args))))","user":"4fb710f4e4b081705acca2cd"},{"problem":59,"code":"(fn [ & args ]\n  (fn [& ags]\n    (loop [result [] [head & rest] args]\n      (if (nil? head)\n        result\n        (recur (conj result (apply head ags)) rest)))))","user":"55a0d79fe4b0acc240e31502"},{"problem":59,"code":"(fn [& fs]\n      (fn [& coll]\n        (map #(apply % coll) fs)\n        ))","user":"56ede653e4b04a395b9a0449"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","problem":59,"user":"4e7f51eb535db966e863cc3f"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n      (map #(apply % args) funcs)))","user":"54c94376e4b045293a27f665"},{"problem":59,"code":"(fn [& fs]\n\t(fn [& args]\n\t\t(reduce #(conj %1 (apply %2 args)) [] (list* fs))))","user":"56540485e4b0f9d632dd847a"},{"problem":59,"code":"#(fn [& A] (for [f %&] (apply f A)))","user":"55d1b565e4b0e31453f64a49"},{"problem":59,"code":"(fn [& n] \n  (fn [& a](map \n     (fn [f1](apply f1 a))\n     n)))","user":"54edcf96e4b024c67c0cf866"},{"problem":59,"code":"(fn juxtaposition\n  [& xs]\n  (fn [& ys]\n    (map #(apply % ys) xs)))","user":"52561295e4b0541d1855ba03"},{"problem":59,"code":"(fn [& f] (fn [& x] (map #(apply % x) f) ))","user":"53fc8424e4b0de5c418485b3"},{"code":"(fn [& funcs]\n    (fn [& args]\n      (for [func funcs]\n        (apply func args)\n        )\n      )\n    )","problem":59,"user":"52213426e4b0e6a83c8925c4"},{"code":"(fn [& fcoll]\n  (fn [& args]\n    (map #(apply % args) fcoll)))","problem":59,"user":"4e71705e535d5021c1a89649"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args] (map #(apply % args) fns)))","user":"54965534e4b0b312c081ff65"},{"problem":59,"code":"(fn [ & fs ]\n  ( fn [& x ]\n    ( loop [ fns ( rest fs) y (vector(apply (first fs) x) )]\n      ( if ( empty? fns)\n        y\n        ( recur ( rest fns ) ( conj y ( apply( first fns ) x)) )))))","user":"5a1c8c26e4b0ff51aa4b3247"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (mapv \n     (fn [f]\n       (apply f args)\n       )\n     fs)\n    )\n  )","user":"59bac5c9e4b0a024fb6ae3ed"},{"code":"(fn [& funcs]\n  (fn [& arg] (map #(apply % arg) funcs)))","problem":59,"user":"519b7d76e4b02a926d9a436e"},{"problem":59,"code":"(fn fn-juxt\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"60c0ceb7e4b0e0fa5f1b42a6"},{"code":"(fn [& funs]\n  (fn [& params]\n    (map #(apply % params) funs)))","problem":59,"user":"4f725466e4b07046d9f4f030"},{"problem":59,"code":"(fn [& fl] (fn [& x] (map #(apply % x) fl)))","user":"5c308385e4b0d62ef62d9f1c"},{"problem":59,"code":"(fn [& fns]  #(reduce (fn [s v] (println (apply v %&)) (conj s (apply v %&))) [] fns))","user":"54ef4a1ee4b024c67c0cf883"},{"problem":59,"code":"(fn [& fns] \n   (fn [& args]\n        (map #(apply %1 args) fns) ))","user":"558bdcefe4b0277789237633"},{"code":"(fn [& funs]\n    (fn [& args]\n      (map #(apply % args) funs)))","problem":59,"user":"4f463dfde4b0d56e7bb92b99"},{"code":"(fn[& f] (fn[& x] (map #(apply % x) f)))","problem":59,"user":"4f296a80e4b0d6649770a02a"},{"problem":59,"code":"(fn [& fns]\n                (fn [& args]\n                  (map #(apply % args) fns)))","user":"58852909e4b0f1effa3b76af"},{"problem":59,"code":"(fn [& arg] (fn [& s] (map #(apply % s) arg)))","user":"5c435a9fe4b0e06e1360a367"},{"problem":59,"code":"(fn [& fns]\n  (fn [& eles]\n    (vec (for [f fns]\n           (apply f eles)))))","user":"52fc34cee4b047fd55837015"},{"code":"(fn [& fs]\n  #(map (fn [f] (apply f %&) ) fs))","problem":59,"user":"522a01ade4b0590a43906ced"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [r []\n           f fs]\n      (if f\n        (recur (conj r (apply (first f) args)) (next f))\n        r))))","problem":59,"user":"50aedb8ce4b0a40c9cfb08d4"},{"problem":59,"code":"(fn my-juxt [& funcs] (fn [& args]\n                             (flatten (rest (reductions #(vector (apply %2 args)) nil funcs))))\n    )","user":"5614fa1de4b05f002753dfbe"},{"problem":59,"code":"(fn [& s]\n  (fn [& x]\n  (map \n   #(apply % x)\n   s)))","user":"55625903e4b0c656e3ff17d7"},{"problem":59,"code":"(fn [& args1] (fn [& args2] (mapv #(apply % args2) args1)))","user":"5b337ff4e4b025bcb146f339"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fns)))","problem":59,"user":"4f1d1299535d64f603146487"},{"problem":59,"code":"(fn [& functions]\n  (fn [& parameters]\n    (map #(apply % parameters) functions)))","user":"56d4b22de4b0ea9b8538f7bb"},{"problem":59,"code":"(fn c [& funcs]\n  (fn [& args]\n    ((fn help [remaining]\n       (if (empty? (rest remaining))\n         (list (apply (first remaining)\n                args))\n         (cons (apply (first remaining)\n                      args)\n               (help (rest remaining)))))\n     funcs)))","user":"54d26316e4b0e8a36923e5f2"},{"problem":59,"code":"(fn my-juxt [& fns]\n    (fn [& args]\n      (map\n       #(apply % args)\n       fns)))","user":"5ee75f8be4b029a2061bbea5"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn [& args]\n    (loop [r []\n           fs fs]\n      (if (empty? fs)\n        r\n        (recur (conj r (apply (first fs) args)) (rest fs))))))","user":"5a426a3fe4b0447ef91cc5f2"},{"problem":59,"code":"(fn [& fs] \n   (fn [& xs]\n     (map #(apply % xs) fs)))","user":"58db3c5ae4b0a4d5acaab677"},{"problem":59,"code":"(fn [& fns] (fn [& ags] (for [f fns] (apply f ags))))","user":"58225587e4b04b46fc4b0f94"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map\n      #(apply % args)\n      fns)))","problem":59,"user":"4f1e4ab5535d64f603146496"},{"problem":59,"code":"(fn\n ([f g] (fn [& args] (vector (apply f args) (apply g args))))\n ([f g h] (fn [& args] (vector (apply f args) (apply g args) (apply h args)))))","user":"58b12635e4b0ebc645576cf4"},{"problem":59,"code":"(fn [& fns]\n  (fn foo [& args]\n    (map #(apply % args) fns)))","user":"59156f0be4b0163c97b36f3d"},{"problem":59,"code":"(fn [& fs]\n  (fn [x & xs]\n    (map (fn [f]\n           (reduce f (f x) xs))\n         fs)))","user":"59497f51e4b07ddc2dafaddd"},{"code":"(fn ([f1 f2] (fn ([x] (conj (conj [] (f1 x)) (f2 x)))))\n      ([f1 f2 f3] (fn ([x] (vector (f1 x) (f2 x) (f3 x)))\n\t\t\t    ([x & args] (vector (apply f1 x args) (apply f2 x args) (apply f3 x args))))))","problem":59,"user":"4f066916535dcb61093f6c10"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args]\n    (mapv\n     (fn [afn] (apply afn args))\n     fns)))","user":"551bdefde4b07993ea3788d7"},{"problem":59,"code":"(fn juxtaposition [& functions]\n  (fn [& arguments]\n    (map (fn [f] (apply f arguments)) functions)))","user":"5fbf6fe7e4b0ad6fc3476147"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce\n       (fn [acc f]\n         (conj acc\n               (if (> (count args) 1)\n                 (reduce f args)\n                 (f (first args)))))\n       [] fns)))","user":"5976da27e4b01722bebd4ce3"},{"code":"(fn [& funs] (fn [& args] (into [](map #(apply % args) funs))))","problem":59,"user":"510931ede4b0c71f76895663"},{"code":"(fn f [& fns]\n  #(map (fn [f] (apply f %&)) fns))","problem":59,"user":"53315c78e4b019098a6f8b67"},{"code":"(fn [& fs]\n  (fn [& col]\n    (for [x (range (count fs))]\n      (apply (nth fs x) col))))","problem":59,"user":"507a08e4e4b08327cd804a67"},{"problem":59,"code":"(fn j \n  [& funs]\n  (fn [& args]\n    (loop [funs funs\n         r []]\n    (if-not (empty? funs)\n      (recur (rest funs) (conj r (apply (first funs) args)))\n      r))))","user":"58de563fe4b0a4d5acaab6e3"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs] \n    (reduce \n      (fn [t v] (conj t (apply v xs))) \n      [] \n      fs)))","user":"54dce62be4b024c67c0cf78b"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (into[](map #(apply % a)f))))","user":"5790329ee4b0ebec4cfb75a7"},{"problem":59,"code":"(fn [& fs]\n  (fn [ & args]\n    (map (fn [f] (apply f args)) fs)))","user":"564f1be3e4b0284900eef6a6"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (map  #(apply % args) funcs)))","problem":59,"user":"4e7f5a0b535db966e863cc41"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (loop [funcs funcs result []]\n      (if (empty? funcs) result\n        (recur (rest funcs)\n               (conj result (apply (first funcs) args)))))))","problem":59,"user":"50ba4b9ee4b03e68e4411c7b"},{"problem":59,"code":"(fn jux [& fns]\n  (fn inner [& args]\n    (if (empty? fns)\n      nil\n      (cons (apply (first fns) args)\n            (apply (apply jux (rest fns)) args)))))","user":"545801f6e4b01be26fd74615"},{"problem":59,"code":"(fn juxtaposition [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"567e418fe4b0feffd0d18eb1"},{"code":"(fn [& f]\n  (fn [& a] (for [x f] (apply x a))))","problem":59,"user":"50acbd15e4b071b89ef26234"},{"code":"(fn [& fs]\r\n    (fn [& xs]\r\n      (map #(apply % xs) fs)))","problem":59,"user":"4e26e8b4535deb9a81d77ef6"},{"problem":59,"code":"(fn juxt-c\n  [& args]\n  (fn [& elements]\n    (map #(apply % elements) args)))","user":"5e7b1ef4e4b085ba37836e10"},{"problem":59,"code":"(fn juxtaposition [& fns]\n  (fn [& args]\n    (if (= (count args) 1)\n      (reduce (fn [acc f] (conj acc (f (first args)))) [] fns)\n      (reduce (fn [acc f] (conj acc (reduce f args))) [] fns))))","user":"546c1f73e4b00cfc9eacc175"},{"code":"(fn [& f]\n  (fn [& a]\n    (reduce\n      #(conj % (apply %2 a))\n      []\n      f)))","problem":59,"user":"4ec53f8c535d6d7199dd368b"},{"problem":59,"code":"(fn mjuxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5c547cf0e4b0fb8c5ffd9a0b"},{"problem":59,"code":"(fn juxtapose\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"52ea025ae4b09f7907dd14b5"},{"problem":59,"code":"(fn [& funs]\n    (fn [& args] (map #(apply % args) funs)))","user":"585c5b21e4b0f14aab7c8786"},{"code":"(fn [& x] \n  (fn [& y]\n    (letfn \n      [(roll \n        [x y]\n        (if (empty? x) \n          []\n          (concat \n           [(apply (first x) y)]\n           (roll (rest x) y)\n           )))]\n      (roll x y)\n      )))","problem":59,"user":"52faec2ee4b047fd55837004"},{"code":"(fn [& fs] (fn [& args] (for [f fs] (apply f args))))","problem":59,"user":"4f954dbce4b0dcca54ed6ccd"},{"code":"(fn [& more]\n     (fn [& more2]\n       (map #(apply % more2)  more)\n       ))","problem":59,"user":"50550f43e4b0b1b9d1860eb7"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    ((fn [args [func & funcs] ret]\n       (if func\n         (recur args funcs (conj ret (apply func args)))\n         ret\n         )) args funcs [])))","user":"4f4aa932e4b0d56e7bb92c14"},{"problem":59,"code":"(fn [& f]\n\t(fn [& x] (map #(apply % x) f))\n)","user":"5d2201b8e4b02ea6f0fb69ed"},{"problem":59,"code":"(fn cjuxt [& fs]\n  (fn [& args]\n   (map #(apply % args) fs)))","user":"56504dc2e4b0284900eef6bc"},{"code":"(fn juxtapos[& funcs] (\n  fn [& args] (\n    map #(apply % args) funcs\n    )\n  )\n  )","problem":59,"user":"4fce75cfe4b03432b189f400"},{"code":"#(fn [& a] (loop [f %& r []]\n  (if (empty? f) r\n    (recur (rest f) (conj r (apply (first f) a))))))","problem":59,"user":"4f0ce26c535d0136e6c22312"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [ls [] fs fs]\n      (if (seq fs)\n        (recur (conj ls (apply (first fs) args)) (rest fs))\n        ls))))","user":"5799ff45e4b05b1deef9add1"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply %1 %2) fns (repeat args))))","user":"561ca2eae4b064ca9f4b169b"},{"problem":59,"code":"(fn [& F]\n  (fn [& A]\n    (map (fn [f] (apply f A)) F)))","user":"559c13c5e4b066d22e731f61"},{"code":"(fn [& fs] \n  (fn [& a]\n    (vec (map #(apply % a) fs))))","problem":59,"user":"50e8ff6be4b0ebbe794eb7f3"},{"problem":59,"code":"(fn [& fns]\n             (fn [& xs]\n               (map #(apply % xs) fns)))","user":"4edee6a2535d10e5ff6f533e"},{"problem":59,"code":"(fn [& fns]\n  (let [fs (list* fns)]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) [] fs))))","user":"515ebde3e4b01e5d11ccd0a8"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn [ & args]  (into [] (map #(apply % args) fs))))","user":"55896a0ce4b059ccff29b204"},{"code":"(fn [& fs]\n\t\t(partial\n\t\t (fn [f & a]\n\t\t\t (map #(apply %1 a) f)) fs))","problem":59,"user":"51f2851fe4b0210f90e7454b"},{"code":"(new clojure.core$juxt)","problem":59,"user":"4e3b6bff535deb9a81d77f52"},{"code":"(fn my-juxt                                                                                                                                                                                    \n  [& fns]                                                                                                                                                                                        \n  (fn [& args]                                                                                                                                                                                   \n    (loop [acc []                                                                                                                                                                                \n           fs (seq fns)]                                                                                                                                                                         \n      (if fs                                                                                                                                                                                     \n        (recur (conj acc (apply (first fs) args)) (next fs))                                                                                                                                     \n        acc))))","problem":59,"user":"50fc48dde4b0d10d794c19f6"},{"problem":59,"code":"(fn [& fns]\n     (fn [& args]\n       (map #(apply % args) fns) \n       ))","user":"55f2c898e4b06e875b46ce4b"},{"code":"(fn [& fs]\n  (fn [& ps]\n    (map #(apply % ps) fs)))","problem":59,"user":"52753740e4b03e8d9a4a74c1"},{"problem":59,"code":"(fn juxtt [f & other-fs]\n  (if (empty? other-fs) \n    ; Base case: single function\n    (fn [& args] (list (apply f args)))\n    ; Recursive case\n    (fn [& args]\n       (cons\n        (apply f args)\n        (apply (apply juxtt other-fs) args)))))","user":"53065acbe4b02e8216869792"},{"problem":59,"code":";(into [] ((\n(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))\n;+ max) 5 6 7))","user":"57df2722e4b0bd073c20245e"},{"problem":59,"code":"(fn [& fns]\n      (fn [& arg]\n        (for [f fns]\n          (apply f arg))))","user":"51bd255ce4b0df1216cefd94"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % %2)\n      fns \n      (repeat (count fns) args))))","problem":59,"user":"50127fbfe4b030d97e4db70f"},{"problem":59,"code":"(fn juxt2 [& fns]\n  (fn juxt2_inner [& args]\n    (map\n      #(apply (first %) (first (rest %)))\n      (map vector fns (repeat args)))))","user":"5779556de4b0979f8965166e"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map #(apply %1 xs) fs)\n    ))","user":"53dadf1de4b0e771c30254ad"},{"code":"(fn my-juxt2 [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"50a7ef7fe4b090657f4a5ce0"},{"problem":59,"code":"(fn juxt-ku[& fs]\n    (fn [& args]\n        (map #(apply %1 %2) fs (repeat args))))","user":"5fa358a1e4b0f0ebd91b77fd"},{"code":"(fn [& fns] (fn [& inp] (for [f fns] (apply f inp))))","problem":59,"user":"5376966ae4b06839e8705e27"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs fs\n           ret []]\n          (if fs\n              (recur \n                (next fs) \n                (conj ret (apply (first fs) args)))\n          ret))))","problem":59,"user":"4e6a60cd535d8ccf87e9fed7"},{"code":"(fn juxta\n  [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"5339af7de4b0e30313ee6cab"},{"code":"(fn [& f]\n     (fn [& args]\n       (map #(apply % args)  f)))","problem":59,"user":"5125029de4b0ce9225d2ed3e"},{"code":"(fn [& fs]\n  (fn [& a] (map #(apply % a) fs)))","problem":59,"user":"507fbd77e4b089ade05efbd3"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map\n      #(apply %1 args)\n      fs\n    )\n  )\n)","user":"53f17931e4b0742d9025b0dd"},{"code":"(fn [& fns] (fn [& args]\n              (map #(apply % args) fns)))","problem":59,"user":"534f13b2e4b084c2834f4ac4"},{"problem":59,"code":"(fn my-juxt\n     [& funcs]\n     (fn [& operands]\n       (reduce (fn [results func]\n                 (conj results (apply func operands)))\n               []\n               funcs)))","user":"552d487ee4b076ab5578f7e4"},{"code":"(fn [& fs]\n  (fn [& args]\n\t\t(map #(apply % args) fs)))","problem":59,"user":"508e13abe4b0f17d83ea26c7"},{"code":"(fn [& fs]\n  (fn [& as]\n    (loop [acc []\n           f fs]\n      (if f\n        (recur (conj acc (apply (first f) as)) (next f))\n        acc))))","problem":59,"user":"4ff9d4e5e4b0678c553fc3b0"},{"problem":59,"code":"(fn [& fs] #(map (fn [f] (apply f%&)) fs))","user":"50ef4e2be4b0a78662fa2653"},{"problem":59,"code":"(fn  [& fns]\n    (fn [& args] (map #(apply % args ) fns))\n    )","user":"5d5eb086e4b0c9e5857d4ff7"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (loop [functions funcs results []] (if (empty? functions) results (recur (drop 1 functions) (conj results (apply (first functions) args)))))))","user":"5968d73fe4b069c0a1a197d7"},{"problem":59,"code":"(fn j [& fs] (fn [& args] (apply vector (map #(apply % args) fs))))","user":"5fe0d4d4e4b05ac5b16ea164"},{"problem":59,"code":"(fn [& args]\n    (fn [& x]\n      (map #(apply % x) args)))","user":"5ccf99fbe4b0ccb0619628c8"},{"code":"(fn [& f] (fn [& c] (for [i f] (apply i c))))","problem":59,"user":"512f06c5e4b0762be4c7aad7"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n     (map (fn [f] (apply f xs)) fs)))","user":"59279a89e4b072a2710fced3"},{"problem":59,"code":"(fn [& fns]\n  #(map (fn [f] (apply f %&)) fns))","user":"57e20474e4b0bfb2137f5a82"},{"problem":59,"code":"(fn jux [& fns]\n  (fn [& args]\n    (reduce (fn [result-so-far next-func] \n              (conj result-so-far (apply next-func args))\n             )\n            (vector (apply (first fns) args))\n            (rest fns)\n    )\n  )\n )","user":"57cc7d96e4b0c746388ab882"},{"problem":59,"code":"(fn myjuxt\n  [& fns]\n  (fn [& args]\n    (loop [fns fns out []]\n      (cond (empty? fns) out\n            :else (recur (rest fns) (conj out (apply (first fns) args)))))))","user":"551afdf8e4b07993ea3788cb"},{"problem":59,"code":"(fn [& fs] (fn [& args] \n (for [fnk fs] (apply fnk args))))","user":"57f9011ee4b0d3187e900935"},{"code":"(fn [& fs] #(->> (repeat %&) (map apply fs) vec))","problem":59,"user":"507056b8e4b07bd6ad9b9f29"},{"problem":59,"code":"(fn [& fns]\n   (fn \n     ([arg] (map #( % arg) fns ) )\n     ([arg & args](map #(reduce % (cons arg args)) fns )\n     )))","user":"5ac92dc3e4b0e27600da77bf"},{"problem":59,"code":"(fn [& fs] (fn [& xs] (into [] (map #(apply % xs) fs))))","user":"5ab564f8e4b073f177442639"},{"problem":59,"code":"(fn ft [& fs]\n  (fn [& data] (map #(apply % data) fs)))","user":"4fe3338ee4b0e8f79898fea8"},{"problem":59,"code":"(fn sm [& fs] \n    (fn [& args]\n        (map #(apply % args) fs)))","user":"59fd069ae4b01bb0ae8afcf4"},{"code":"(fn [& fs]\n    (fn [& data] (reduce #(conj % (apply %2 data))  [] fs )))","problem":59,"user":"53403110e4b085b17e897da6"},{"problem":59,"code":"(fn my_juxt [& funcs]\n                (fn [& args]\n                  (for [fn funcs] (apply fn args))))","user":"5632b0a9e4b0bfe05bf117a8"},{"code":"(fn [& args] (fn [& args2] (for [f args] (apply f args2))))","problem":59,"user":"5210ac52e4b080a8d9b9d63e"},{"code":"(fn [& g] (fn [& m] (for [f g] (apply f m))))","problem":59,"user":"50ed4626e4b01236b1d4983c"},{"code":"(fn [& fs]\n  (fn [& args]\n   \t(map #(apply % args) fs)))","problem":59,"user":"50aa8776e4b056ee01935867"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs fs s []]\n      (if (empty? fs)\n        s\n        (recur (rest fs)\n               (conj s (apply (first fs) args)))))))","user":"54cad59ee4b057c6fda3a26e"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))\n\n;; Yessssss.","problem":59,"user":"4e42f930535dc968683fc49f"},{"problem":59,"code":"(fn \n  [& funcs] \n  (fn \n    [& args] \n    (if \n      (= 1 (count args)) \n      (map \n       (fn [func] \n         (apply func args)\n         ) funcs) \n      (map (fn [func] (reduce func args)) funcs))))","user":"58950f29e4b00487982d5270"},{"problem":59,"code":"(fn [ & fns ]\n  (fn [ & l]\n    (map\n      #(apply % l)\n      fns)))","user":"602049b8e4b0bf4ca6b10961"},{"code":"(fn my-juxt [& fns]\n  (fn retfn [& args]\n    (for [f fns] (apply f args)\n      )))","problem":59,"user":"5119f3d5e4b06c8af0111818"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] \n    (mapv #(apply % args) fns)))","user":"596a66cde4b069c0a1a19803"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args] \n     (for [f fns]\n      (apply f args))))","user":"5776f39de4b0979f89651643"},{"code":"(fn [& fns] \n  (fn [& args] \n    (map #(apply % args) fns)))","problem":59,"user":"4f1fd734535d64f6031464a5"},{"problem":59,"code":"(fn my-juxt [& fs]       \n    (fn [& args]            \n      (map #(apply % args) fs )))","user":"5364ab34e4b0243289761e64"},{"problem":59,"code":"(fn my-juxt\n  [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"6098263be4b00e9e6653c3f9"},{"code":"(fn [& fs] (fn [& xs] (map #(apply %1 xs) fs)))","problem":59,"user":"4e9c66e2535dbda64a6f6b7f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args] \n    (mapv #(apply % args) fs)))","user":"52fe31d5e4b047fd55837038"},{"code":"(fn a [& funs]\r\n  (fn [& args]\r\n    (map\r\n      #(apply % args)\r\n      funs)))","problem":59,"user":"4f569218e4b0a7574ea71826"},{"code":"(fn [& m] (fn [& x] (map #(apply % x) m)))","problem":59,"user":"4e50e2a0535dc968683fc4ef"},{"code":"(fn [ & f]\n  (fn [ & a]\n    (loop [\n           fs f\n           r []\n           ]\n      (if\n        (empty? fs)\n        r\n        (recur (rest fs) (conj r (apply (first fs) a)))))))","problem":59,"user":"4f05a9cf535dcb61093f6bfc"},{"problem":59,"code":"(fn comb [& funcs] (fn [& args] (map #(apply %1 args) funcs)))","user":"58be3142e4b0888cdc949d44"},{"problem":59,"code":";自己写的：(fn [& fs] (fn [& as] (for [a fs] (apply a as)))) \n(fn [& fs] (fn [& as] (map #(apply % as) fs)))","user":"5cd4e1b2e4b0ccb061962927"},{"code":"(fn [& fns]\r\n  (fn [& args]\r\n    (for [f fns] (apply f args))))","problem":59,"user":"4dd6d6a0535d2dad7130b5ca"},{"problem":59,"code":"(fn [& f]\n  (fn [& b]\n    (loop [fs f\n           result []]\n      (if (empty? fs)\n        result\n        (recur (rest fs)\n               (conj result (apply (first fs) b)))))))","user":"5c558070e4b0fb8c5ffd9a1e"},{"code":"(fn my-juxt [& fns]\n  (fn [& xs]\n    (map #(apply % xs) fns)))","problem":59,"user":"511b9017e4b00c2a1fa7ff6b"},{"problem":59,"code":"(fn juxp [& fs]\n  (fn [& x]\n    (map (fn [f] (apply f x)) fs)))","user":"5ad002f2e4b0ea6055cfab87"},{"code":"(fn [& fs] \n    (fn [& a] \n(map #(apply % a) fs)\n    )\n)","problem":59,"user":"52593207e4b0cb4875a45cd3"},{"code":"(fn [& accessors](fn [& target](map apply accessors (repeat target))))","problem":59,"user":"52c580c2e4b0c2d177d620f5"},{"problem":59,"code":"(fn jux [& funcs]\n  (fn [& args]\n    (if (= (count funcs) 1)\n      (list (apply (first funcs) args))\n      (concat (list (apply (first funcs) args)) (apply (apply jux (rest funcs)) args))\n      )))","user":"53ddd44be4b0d874e779ae2e"},{"code":"(fn [& ops]\n    (fn [& args]\n      (prn ops args)\n      (map #(apply %1 %2) ops (repeat args))))","problem":59,"user":"4fbfe9a4e4b081705acca31f"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    ((fn f [fns]\n       (if (seq fns)\n         (lazy-seq\n           (cons (apply (first fns) args)\n                 (f (rest fns))))))\n       funcs)))","problem":59,"user":"4ec75077535d6d7199dd36e0"},{"problem":59,"code":"(fn [ & fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"5cbd5b42e4b026601754b9f6"},{"code":"(fn [& functs]\n  (fn [& input]\n    (map #(apply % input) functs)))","problem":59,"user":"51002399e4b0ab35a0d409ff"},{"code":"(fn [& funcs]\n  (fn [& elements]\n    (map #(apply % elements) funcs)\n  )\n)","problem":59,"user":"51f09f3de4b0274c496158d7"},{"code":"(fn my-juxt [& fs]\n  (fn [& xs]\n    (map #(apply %1 xs) fs)))","problem":59,"user":"4ff355a1e4b0678c553fc34d"},{"problem":59,"code":"(fn [& listfun]\n  (fn [& listarg]\n    (map #(apply % listarg) listfun)))","user":"58b989dbe4b0888cdc949ccd"},{"code":"(fn comb [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"53a1b5c8e4b0ca733b9744c1"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& arguments] (map #(apply % arguments) funcs)))","user":"59ee4883e4b0966464fe6a17"},{"code":"(fn [& fun]\n  (loop [ff (fn [& args] [])\n         fs fun]\n    (if (empty? fs)\n      ff\n      (recur \n       (fn [& args] (conj (apply ff args) \n                          (apply (first fs) args)))\n       (rest fs)))))","problem":59,"user":"4fe15ffee4b0dd6cd5ce3634"},{"problem":59,"code":"(fn [& fun]\n  (fn [& args]\n    (mapv #(apply % args) fun)))","user":"5bf5ddfde4b0bdcf453d159e"},{"code":"#(fn [& r] (for [t %&] (apply t r)))","problem":59,"user":"4e5fe31a535d8ccf87e9fe50"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs] (for [f fns] (apply f xs))))","user":"4f6ba7bce4b07046d9f4efb0"},{"code":"(fn my-juxt\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4e5bff2b535d8a8b8723a2bd"},{"problem":59,"code":"(fn [& fs] (fn [& args] (for [i fs] (apply i args))))","user":"569c40cee4b0542e1f8d1462"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (vec (map #(apply % args) funcs))))","user":"5711b532e4b09c608db70449"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args)\n      )\n    )\n  )","user":"5a8fd113e4b05369db4d2542"},{"problem":59,"code":"(fn \n  ([x y]\n   (fn [& args] [(apply x args) (apply y args)]))\n  ([x y z]\n   (fn [& args] [(apply x args) (apply y args) (apply z args)])))","user":"557e8326e4b05c286339e0d7"},{"problem":59,"code":";( println ((\n (fn [& fs]\n  (fn [& vs]\n    (map #(apply % vs) fs)\n    )\n  )\n ;+ max min\n  \n;  ) 2 3 5 1 6 4))","user":"52503747e4b0541d1855b828"},{"problem":59,"code":"(fn juxt' [& fs]\n  (fn [& xs]\n    (for [f fs] (apply f xs))))","user":"55d9743ae4b0e31453f64aca"},{"problem":59,"code":"(fn myJuxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"54f64e99e4b0f2f3c5226ea4"},{"problem":59,"code":"(fn juxty [& fns]\n  (fn [& args]\n    (reduce (fn [f g] (conj f (apply g args))) [] fns)))","user":"5be33a16e4b0ed4b8aab4cd6"},{"problem":59,"code":"(fn  [& fs]\n  (fn  [& args]\n    (map #(apply % args) fs)))","user":"5794fd7be4b0e215f87e8476"},{"problem":59,"code":"(fn doon [& f]\n  (fn [& s]\n    ;(loop [acc '[] f f s s]\n    ;  (if (empty? f)\n    ;    acc\n    ;    (recur (conj acc (apply (first f) s)) (next f) s)\n    ;    )\n    ;  )\n    (vec (map #(apply % s) f)) \n    ))","user":"5fdb8657e4b05ac5b16ea133"},{"code":"(fn [& fs] \n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fs)))","problem":59,"user":"536aa86de4b0243289761eb1"},{"problem":59,"code":"(fn [& fns] (fn [& xs] (mapv #(apply % xs) fns)))","user":"5629dfaae4b00e49c7cb4813"},{"code":"(fn f \n  [& xs]\n  (fn [& args]\n    (map #(apply % args) xs)))","problem":59,"user":"50aa60bee4b056ee01935865"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fs)))","user":"5a6b9b95e4b0512ff01cda40"},{"code":"(fn [& fns] \n  (fn [& x] \n    (map #(apply % x) fns)\n     )\n  )","problem":59,"user":"535197f2e4b084c2834f4ae4"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args] (mapv #(apply %1 args) fns)))","user":"539e717fe4b0ca733b974488"},{"code":"(fn [& fns]\n    (fn [& args]\n        (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"5243d9a2e4b076204b44fadf"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& n]\n    (map #(apply %1 n) fs)))","user":"53d63e6ce4b0e771c3025454"},{"problem":59,"code":"(fn[& fns]\n      (fn[& args]\n            (map #(apply % args) fns)))","user":"5826a843e4b051871117befd"},{"problem":59,"code":"(fn __ [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","user":"526759b3e4b03e8d9a4a715b"},{"code":"(fn [& x] (fn [& s] (for [f x] (apply f s))))","problem":59,"user":"4daf907aedd6309eace4d17b"},{"problem":59,"code":"(fn juxtaposition [& functions]\n  (fn [& args] (map #(apply % args) functions)))","user":"5aada061e4b073f17744257a"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (mapv #(apply % args) fns)))","user":"4f43b992e4b0d7d3c9f3fd2c"},{"problem":59,"code":"(fn [& fs]\n(fn [& xs]\n  (map #(apply % xs) fs)))","user":"52dbd423e4b09f7907dd13c6"},{"problem":59,"code":"(fn [& funcs]\n           (fn [& args]\n             (loop [funcs funcs\n                    result []]\n               (if (empty? funcs)\n                 result\n                 (recur (rest funcs) (conj result (apply (first funcs) args)))))))","user":"54b31445e4b09f271ff37d35"},{"problem":59,"code":"(fn [& funcs]\n  (fn juxta [& args]\n    (for [f funcs]\n      (apply f args))))","user":"563d12f9e4b0bfe05bf11845"},{"problem":59,"code":"(fn juxta [& fns]\n  (fn ([arg & args]\n       (map #(reduce % (cons arg args)) fns))\n    ([arg]\n     (map #(% arg) fns))))","user":"5dd35dcbe4b0948ae9d9ad5f"},{"code":"(fn [& f]\n  (fn [& a] (map #(apply % a) f)))","problem":59,"user":"4e12cc9d535d04ed9115e7d2"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4e28120f535deb9a81d77efa"},{"problem":59,"code":"(fn map-apply [& fs]\n  (fn [& args]\n    (map #(apply %1 args) fs)))","user":"57c500f9e4b05aa3c4741cda"},{"code":"(fn [& args\t] \n  (fn [& xs]\n     (map #(apply %1 xs) args)))","problem":59,"user":"523a9fc9e4b081681ca7adca"},{"code":"(fn[& fs] (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"5093ca51e4b097f48cc38585"},{"problem":59,"code":"(fn juxtaposition\n  ([& args-outer] \n   (fn\n     ([& args-inner] (for [pointer args-outer] (apply pointer args-inner) ) )))\n  )","user":"5564709ee4b0c656e3ff1807"},{"problem":59,"code":"(fn [& fs]\n  (fn [& v] (map #(apply % v) fs)))","user":"5591cc56e4b0604b3f94d582"},{"code":"(fn [& fns]\n  (fn [& args]\n    (into [] (map apply fns (repeat args)))))","problem":59,"user":"501d34f6e4b066e56b9d0b1e"},{"problem":59,"code":"(fn\n  [& func-list]\n  (fn\n    [& arg-list]\n    (map #(apply % arg-list) func-list)))","user":"54570d08e4b080a794c2c888"},{"code":"(fn[& fs] (fn [& ps] (map #(apply % ps) fs)))","problem":59,"user":"51a768e0e4b0da5f497bde84"},{"code":"(fn xxx\n  ([f1 f2]\n     (fn [& args] (vector (apply f1 args) (apply f2 args))))\n  ([f1 f2 f3]\n     (fn [& args] (vector (apply f1 args) (apply f2 args) (apply f3 args)))))","problem":59,"user":"5163a7bbe4b055933a9ca02f"},{"problem":59,"code":"(fn [& fns]\n  (fn [& vs]\n    (map (fn [f] (apply f vs)) fns)))","user":"53a5bc3ae4b0ef122a8689c3"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs )))","problem":59,"user":"511442d0e4b0e9c109bb74d5"},{"code":"(fn [& fns]\n  (fn [& args]\n    (loop [cfns fns result []]\n      (if cfns\n        (recur (next cfns) (conj result (apply (first cfns) args)))\n        result))))","problem":59,"user":"4ec5cdb0535d6d7199dd36b8"},{"code":"(fn [& f]\n  (fn [& args]\n    (loop [accu []\n           f f]\n      (if (empty? f)\n        accu\n        (recur\n         (conj accu (apply (first f) args))\n         (rest f))))))","problem":59,"user":"4e82c062535db62dc21a62cc"},{"problem":59,"code":"(fn  [ & f]\n  (fn [ & d] \n    (map #(apply %1 d) f)))","user":"55f9b2b6e4b03cbcff9738c8"},{"problem":59,"code":"(fn juxtapose-functions [& functions]\n  (fn [& arg]\n    (map\n       #(apply % arg)\n       functions)))","user":"5dc4719ae4b02f9375f4e1b5"},{"problem":59,"code":"(fn bob [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"55934bebe4b0c79f6e1db93b"},{"code":"(fn J [& op*]\n  (fn [& args]\n    (map #(apply % args) op*)))","problem":59,"user":"51a4416ae4b0def3c5c5868c"},{"problem":59,"code":"(fn [ & fns]\n    (fn [ & args]\n      (map #(apply %1 args) fns)))","user":"538db083e4b0b51d73faae74"},{"code":"(fn dog\n  ([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","problem":59,"user":"4daedd1eedd6309eace4d164"},{"problem":59,"code":"(fn foo [& funcs]\n  (fn [& args] (map (fn [f] (apply f args)) funcs) )\n)","user":"5d9e7971e4b000c986472bc1"},{"code":"(fn [& f]\n  (fn [& p]\n    (reduce (fn [l v]\n      (conj l (apply v p)))\n      []\n      f)))","problem":59,"user":"4e4bd94b535dc968683fc4d7"},{"problem":59,"code":"(fn custom-juxt\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"4fc524aae4b081705acca37e"},{"problem":59,"code":"(fn my-juxt [& forms]\n\t\t\t(fn [& args]\n\t\t\t\t\t(reduce #(conj %1 (apply %2 args)) [] forms)\n\t\t\t\t\t)\n\t\t\t)","user":"54ff6084e4b07d26eda61d50"},{"code":"(fn[& xs]    \n    (fn [& ys]\n      (mapv #(apply % ys) xs)))","problem":59,"user":"506406c8e4b075d771da6f9f"},{"problem":59,"code":"(fn my-juxt [f & fs]\n  (fn [& args]\n    (mapv #(apply % args) (cons f fs))))","user":"566b57e9e4b0a866af6896ad"},{"problem":59,"code":"(fn [f & flist] \n         (fn [x & y] \n            (let [lf (into [f] flist)]\n              (loop [i  0 z []] \n\t       (println \"z\" z \"x\" x)\n\t       (cond\n                  (= i (count lf))  z\n                  :else (recur (inc i) (conj z (apply (get lf i) (into [x] y))))\n               )   \t\n\t      )\t\n            )\n          )\n    )","user":"56e6e1e6e4b02e7e935eb6cf"},{"code":"(fn [& fs]  \n  (fn [& seq] (map #(apply % seq) fs)))","problem":59,"user":"4f62b29ce4b0defedf855fd9"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args] \n      (map \n        (fn [f] (apply f args))\n        fs)\n      ))","user":"56fbf83de4b07572ad1a88da"},{"problem":59,"code":"(fn[& fs] (fn[& args] (reduce #(conj %1 (apply %2 args) ) [] fs)   ))","user":"56a6051fe4b0542e1f8d14e5"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n   \t(for [f funcs]\n      (apply f args))))","user":"541619e8e4b01498b1a719f9"},{"code":"(fn [& fs] (fn [& data] (map #(apply % data) fs)))","problem":59,"user":"4e6dc95a535d5021c1a895f1"},{"code":"(fn [& fs]\n  (fn [& args] (vec (map #(apply % args) fs))))","problem":59,"user":"52039e12e4b0fb7e47ea51ff"},{"problem":59,"code":"(fn [& funcs]\n   (fn [& args]\n      (map #(apply % args) funcs)))","user":"53571732e4b04ce2eb3ed275"},{"code":"(fn [& fns] (fn [& params] (map #(apply % params) fns)))","problem":59,"user":"5033a1fbe4b062bc5d7ae155"},{"code":"(fn [& f]\n  (fn [& x]\n    (reverse(reduce #(cons (apply %2 x) %) [] f))))","problem":59,"user":"4edf5dc6535d10e5ff6f5340"},{"code":"(fn [& fs]\r\n  (fn [& xs]\r\n   (for [f fs] (apply f xs))))","problem":59,"user":"4eb44d78535d7eef30807360"},{"code":"(fn [& args1]\n\t    (fn [& args2]\n        (\n          (fn f [a1 a2]\n            (if (> (count a1) 0)\n              (cons (apply (first a1) a2) (f (rest a1) a2))\n            )\n          )\n          args1 args2\n        )\n\t    )\n\t  )","problem":59,"user":"50ff3800e4b017584cb41ccb"},{"problem":59,"code":"(fn [& fs] (fn [& vs] (map #(apply % vs) fs) ))","user":"54b8dfece4b0ed20f4ff6e9a"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (loop [tmpf f ans '()]\n      (if (empty? tmpf)\n        (reverse ans)\n        (recur (rest tmpf) (conj ans (apply (first tmpf) args)))))))","user":"59368ccae4b02506e01a297a"},{"code":"#(fn [& args]\n       (for [f %&] (apply f args)))","problem":59,"user":"4f88ae35e4b033992c121c6d"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n  )\n)","problem":59,"user":"5323a414e4b09d4e7a9b54d1"},{"problem":59,"code":"(fn Juxtaposition [& funcs]\n  #(let [args %&]\n    (reduce (fn [seq f]\n             (concat seq (vector (apply f args))))\n           '()\n           funcs)))","user":"5da6cb60e4b000c986472c10"},{"code":"(fn [& f] (fn [& v] (map #(apply %1 v) f)))","problem":59,"user":"53705e2de4b0fc7073fd6e96"},{"code":"#(fn [& a] (for [n %&] (apply n a)))","problem":59,"user":"4f614976e4b0defedf855fbb"},{"problem":59,"code":"(fn [& fns]\n  (fn [& vs]\n    (for [f fns]\n      (apply f vs))))","user":"55868660e4b059ccff29b1d4"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map \n     #(apply % args)\n     fs)))","user":"5bab5440e4b0a20761a23475"},{"problem":59,"code":"(fn [ & y] \n        (fn [ & z ] \n        \t(map #(apply % z) y)) \t\n\t\t\n\t)","user":"5ac04101e4b073f177442737"},{"problem":59,"code":"(fn [& fs]\n  (fn [& more]\n    (reduce #(conj % (apply %2 more)) [] fs)))","user":"54ddb556e4b024c67c0cf798"},{"code":"(fn my-juxt\n  [& funcs]\n  (fn [& init-args]\n    (for [f funcs]\n      (apply f init-args))))","problem":59,"user":"511720eae4b0063b4e3e16da"},{"problem":59,"code":"(fn [& a]\n   (fn [& x] (map #(apply % x) a)))","user":"5b9ae606e4b0c0b3ffbd4af2"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) funs)))","user":"52d63e89e4b09f7907dd134e"},{"problem":59,"code":"(fn juxt-\r\n  ([a]\r\n   (fn [& b] (list (apply a b))))\r\n  ([a & b]\r\n   (fn [& stuff] (do (println a b stuff)(cons (apply a stuff) (apply (apply juxt- b) stuff))))))","user":"55af7e21e4b03311e7b732cc"},{"code":"(fn fake-juxt [& functions]\n                (fn [& arguments]\n                  (map #(apply % arguments) functions)))","problem":59,"user":"53838742e4b06839e8705ee0"},{"problem":59,"code":"(fn [& f] (fn [& r] (map #(apply % r) f)))","user":"54c11fdae4b0ed20f4ff6f1b"},{"problem":59,"code":"(fn [& fns]\n  (fn [& coll]\n    (mapv #(apply %1 coll) fns)))","user":"5c15537ae4b01240ff5671bf"},{"problem":59,"code":"(fn jux [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","user":"5a5d0726e4b0512ff01cd91b"},{"code":"(fn\n\t([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)]))))","problem":59,"user":"4fe89c81e4b07c9f6fd12c57"},{"code":"(fn [& a] (fn [& b] (map #(apply % b) a)))","problem":59,"user":"4db27319535df7e46ed9b6bd"},{"code":"(fn [& fs]\n  #(for [f fs]\n     (apply f %&)))","problem":59,"user":"510d9d61e4b078ea71921141"},{"code":"(fn fun [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","problem":59,"user":"5349da55e4b084c2834f4a68"},{"code":"(fn comb [& funcs]\n  (fn [& args]\n    (mapv #(apply % args) funcs)))","problem":59,"user":"53886d2fe4b0640c7a9a589d"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce\n     #(conj %1 (apply %2 args))\n     []\n     fs)))","user":"58ca8a1de4b03c36ff7e5835"},{"code":"(fn [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))\n\n\n\n\n;(fn [& fns]\n;  (let [fg (fn [f g] \n;        (fn [& args] \n;          (g (f args))))]\n;    (reduce fg fns)))","problem":59,"user":"4f1c2a3a535d64f603146480"},{"problem":59,"code":"(fn [ & R ]\n        (fn [ & L]\n          (loop [Ret [] First (first R) Rest (rest R)]\n            (if (nil? First)\n              Ret\n              (recur \n                (conj Ret (apply First L))\n                (first Rest)\n                (rest Rest)\n              )\n            )\n          )\n        )\n      )","user":"5d4a6c6ce4b0776584bd6f22"},{"problem":59,"code":"(fn [& fns]\n  (fn [& x]\n    (map #(apply %1 x) fns)\n    \n    )\n  \n  \n  )","user":"56db90d4e4b0ea9b8538f80d"},{"code":"(fn  [& x]\n   (fn[& a](map (fn [f] (apply f a)) x)\n ))","problem":59,"user":"52d66ca0e4b09f7907dd135c"},{"code":"(fn [& fs] \n  (fn [& coll] \n    (if (= 1 (count coll))\n      (map #(% (first coll)) fs)\n      (map #(apply % coll) fs))))","problem":59,"user":"501c1492e4b086d93747d180"},{"code":"(fn [& f] (fn [& a] (reduce #(conj %1 (apply %2 a)) [] f)))","problem":59,"user":"4e5af45e535d8a8b8723a2b1"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs )))","problem":59,"user":"50ae22c3e4b0a40c9cfb08d0"},{"problem":59,"code":"(fn ([a b c] (fn [& args] [(apply a args) (apply b args) (apply c args)]))\n     ([a b] (fn [& args] [(apply a args) (apply b args)])))","user":"52eaba10e4b09f7907dd14c2"},{"problem":59,"code":";(fn ([f g] (fn [& x] (let [a (apply f x) b (apply g x)] (vector a b))))\n;    ([f g h] (fn [& x] (let [a (apply f x) b (apply g x) c (apply h x)] (vector a b c))))  )\n(fn ([f g]   (fn [& x] [(apply f x) (apply g x)]))\n    ([f g h] (fn [& x] [(apply f x) (apply g x) (apply h x)])) )","user":"56d5c1b0e4b0ea9b8538f7c3"},{"code":"#(fn [& x]\n    (for [f %&]\n      (apply f x)))","problem":59,"user":"529b44afe4b02ebb4ef7509d"},{"code":"(fn  [& funcs]\n\t(fn [& args]\n\t\t(reduce\n\t\t\t#(conj %1 (apply %2 args))\n\t\t\t[]\n\t\t\tfuncs)))","problem":59,"user":"50d8de3fe4b01f0871336e72"},{"code":"(fn [& fns] (fn [& args] (map #(apply % args) fns)))\n; while there's a few other, more succinct solutions, I think the map concept applies very cleanly to this, no pun intended.\n; (challenge: express that last sentence that *doesn't* result in a pun.","problem":59,"user":"4ebb20c0535dfed6da9c6d6f"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) funcs)))","user":"56baa68ce4b0f26550335947"},{"problem":59,"code":"(fn z [& fs]\n  (fn [& args]\n    (into [] (map #(apply %1 args) fs))))","user":"583667c7e4b089d5ab817cfb"},{"problem":59,"code":"(fn j [& fs]\n  (fn [& args] (map #(apply %1 args) fs)))","user":"57af41bce4b0fbc9809a2731"},{"code":"(fn \n    [& fns]\n  (fn \n    [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"51804bcbe4b04f45bde7d901"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4e5411e8535d8a8b8723a279"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map\n      (fn [f] (apply f args)) fns)))","user":"5703cd50e4b08d47c97781fc"},{"code":"(fn my-juxt [& fs]\n  (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4fcaf7a4e4b0ee37620e1857"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (vec (map #(apply % xs) fns))))","problem":59,"user":"4e31ab1d535deb9a81d77f1f"},{"code":"(fn [& fs] (fn [& arg] (map #(apply % arg) fs)))","problem":59,"user":"4febb4dae4b0681fd128dc98"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (for [f fns] (apply f (flatten args)))))","user":"54684c3be4b00cfc9eacc139"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map\n     #(apply % args)\n     fns)))","user":"54b10d08e4b09f271ff37d18"},{"code":"(fn juxt2 [& fs]\n  (let [h (fn helper [fs & args]\n  \t\t\t(if (empty? fs)\n    \t\t'()\n    \t\t(cons (apply (first fs) args) (apply helper (rest fs) args))))]\n  (partial h fs)))","problem":59,"user":"515ffbfbe4b0e2be8aa20bdd"},{"code":"(fn [ & fs] (fn [ & args] (map #(apply % args) fs)))","problem":59,"user":"4f91a38ae4b0dcca54ed6c9f"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args] \n    (into [] (map #(apply % args) fns))))","user":"5821b018e4b04b46fc4b0f80"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) () (reverse fns))\n    )\n  )","user":"5bbd13a5e4b07a9b28b0ff95"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (map #(apply % args) \n         (map (fn [f] (fn [& args] (apply f args))) fs))))","problem":59,"user":"52d340ebe4b099d49816f0c1"},{"code":"(fn ju [& fs]\n  (if (= 1 (count fs))\n    (fn [& x] [(apply (first fs) x)])\n    (fn [& x] (let [functions (map ju fs)]\n                (flatten (map #(apply % x) (flatten functions)))))))","problem":59,"user":"4fbd12a5e4b081705acca2fd"},{"problem":59,"code":"(fn [& x] \n  (fn [& y]\n    (map (fn [x1] (apply x1 y)) x)))","user":"55b527cbe4b01b9910ae2985"},{"problem":59,"code":"(fn my-juxt [& fs] (fn [& xs] (map #(apply %1 xs) fs)))","user":"5606ea56e4b08b23635d317b"},{"problem":59,"code":"(fn [& x]\n  (fn [& z]\n    (map (fn [x]\n           (apply x z))\n         x)))","user":"549c8bbde4b0f3d1d8e70f8c"},{"code":"(fn [f & fs]\n    (fn [& args]\n      (map #(apply % args) (list* f fs))))","problem":59,"user":"52244a77e4b01819a2de42d1"},{"problem":59,"code":"(fn [& f]\n    #(for [g f]\n       (apply g %&)))","user":"505106fee4b05ab4c7e07d38"},{"problem":59,"code":"(fn [& f]\n  (fn [& args]\n    (map #(apply %1 %2) f (repeat args))))","user":"549eb44fe4b0f3d1d8e70fa6"},{"code":"(fn [& fs] (fn [& ys] (reduce #(conj %1 (apply %2 ys)) [] fs)))","problem":59,"user":"51e780dae4b0730ab87cf353"},{"code":"(fn [& fs] (fn [& a] (map #(apply % a) fs)))","problem":59,"user":"4f725201e4b07046d9f4f02f"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [result []\n           fns fns]\n      (if fns\n        (recur (conj result (apply (first fns) args))\n               (next fns))\n        result))))","user":"55db7e15e4b0e31453f64ae8"},{"code":"(fn jxt [& fs]\n  (fn [& args]\n    (for [f1 fs]\n      (apply f1 args))))","problem":59,"user":"51533ecde4b0252ac4b16619"},{"code":"(fn jxt [& fs]\n  (fn [& as]\n    (map #(apply % as) fs)))","problem":59,"user":"4ee82ce9535d93acb0a6687a"},{"problem":59,"code":"(fn jux [& fs]\n  (fn [& ys]\n    (vec\n     (loop [xs fs\n            coll []]\n       (let [x (first xs)]\n         (if (nil? x)\n           coll\n           (recur (rest xs) (conj coll (apply x ys)))))))))","user":"5eccc5c2e4b016b56eae058f"},{"code":"(fn [& fns]\n  #(for [f fns] (apply f %&)))","problem":59,"user":"4f45c72be4b0d56e7bb92b8a"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (reduce #(concat %1 (vector (apply %2 a))) [] f)))","user":"53d5a63be4b0e771c3025449"},{"code":"(fn [& fun]\n  (fn [& args]\n    ((fn foo [a b]\n       (if (empty? a) '()\n         (concat (list (apply (first a) b))\n                 (foo (rest a) b))))\n     fun args)))","problem":59,"user":"5078300de4b0fc74642bff66"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args]\n    (map (fn [f] (apply f args)) fns)\n    )\n  )","user":"562ab73ce4b00e49c7cb482e"},{"code":"(fn [ & fs]\n  (fn [ & args]\n    (mapcat (fn [f] [(apply f args)]) fs)))","problem":59,"user":"5097b556e4b00ad8bab4e970"},{"problem":59,"code":"(fn jux\n  [& fns]\n  (fn juxed\n    [& args]\n    (map #(apply %1 args) fns)))","user":"56e99ec8e4b04a395b9a03fb"},{"problem":59,"code":"(fn [& fs]\n  (fn [& ys]\n    (map #(apply % ys) fs)))","user":"5705f569e4b0b0fb43fd0677"},{"code":"(fn [& f]\n  (fn [& a]\n    (map #(apply % a) f)))","problem":59,"user":"4e49badd535dc968683fc4c9"},{"code":"(fn [& args1] (fn [& args2] (loop [fs (reverse args1) i args2 result '()] (if (empty? fs) result (recur (rest fs) i  (conj result (apply (first fs) i)))))))","problem":59,"user":"4f0e4ebd535d0136e6c22322"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n  (for [f fs]\n    (apply f args)\n   )))","user":"5f574662e4b0a0bc16850a90"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [res f] (conj res (apply f args))) [] fns)))","user":"50b42cbbe4b001349b2f4abe"},{"code":"(fn [& syms]\n  (fn [& more]\n    (map #(apply % more) syms))\n  )","problem":59,"user":"51b38769e4b026427ecf067f"},{"code":"(fn [& p] (fn [& x] (reduce (fn [a b] (if (sequential?  (first x)) (conj a (b x)) (conj a (apply b x)))) [] p)))","problem":59,"user":"51beb32ae4b013aa0d74b7fd"},{"problem":59,"code":"(fn func [f & fs]\n\n   (fn [& x]\n\n    (if (= fs nil)\n\n      (cons (apply f x) [])\n\n      (cons (apply f x) (apply (apply func fs) x)))))","user":"586b6a0ae4b01531a375e957"},{"problem":59,"code":"(fn [& fns]\n    (fn [& x]\n      (loop [fns fns acc []]\n        (if (empty? fns)\n          acc\n          (recur (rest fns) (conj acc (apply (first fns) x)))))))","user":"551a21ece4b091ff45eda993"},{"code":"(fn [& fns]\n  (fn [& args]\n    (mapv (fn [f] (apply f args)) fns)))","problem":59,"user":"4dd0e8f7535da60f04a96e57"},{"code":"(fn [& args]  \n  \t\t \n          (fn [& x] \n               \n              (map #(apply %1 x) args))\n         \n           \n                )","problem":59,"user":"5105ed16e4b01150e115ebe2"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))    \n    ))","user":"5e48ec09e4b043cd24807a45"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (loop [fs fs, result []]\n      (if (nil? (first fs))\n        result\n        (recur (rest fs)(conj result (apply (first fs) xs)))))))","problem":59,"user":"4db2cc55535df7e46ed9b6c5"},{"code":"(fn [& F] #(for [f F] (apply f %&)))","problem":59,"user":"4e7dfab0535db169f9c796f9"},{"code":"(fn\n  ([f1 f2]\n    (fn [& args]\n        [(apply f1 args) (apply f2 args)]))\n  ([f1 f2 f3]\n    (fn [& args]\n        [(apply f1 args) (apply f2 args) (apply f3 args)])))","problem":59,"user":"5132c6f0e4b021281ec7b6d3"},{"code":"(fn jxt [& fns]\n  (fn [& args]\n    (concat (for [fn fns]\n              (apply fn args)))))","problem":59,"user":"4f0ef874535d0136e6c22328"},{"code":"(fn [& fns]\n  (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4e7c8fd1535db169f9c796be"},{"problem":59,"code":"(fn [& b] (fn [& a] (reduce #(conj % (apply %2 a)) [] b)))","user":"56992162e4b0542e1f8d143c"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs )))","user":"53a7771ee4b047364c04441b"},{"code":"(fn [ & funcs]\n    (fn [ & colls]\n      (map #(apply % colls) funcs)))","problem":59,"user":"4edd038c535d10e5ff6f5327"},{"problem":59,"code":"(fn  [& fs]\n  (println fs)\n  (fn [& args]\n    (vec\n      (map #(apply % args)\n           fs)))\n  )","user":"5e300655e4b05b4b01516209"},{"problem":59,"code":"(fn [& fs]\n  (fn [& as]\n    (for [f fs] (apply f as))))","user":"54cd651be4b057c6fda3a2a2"},{"problem":59,"code":"(fn [& op]\n     (fn [& sep]\n       (map\n        #(apply % sep) op)))","user":"4f40c46fe4b0e243712b1fbe"},{"problem":59,"code":"(fn [& fs] (fn [& args]\n                       (let [p (fn [f] (apply f args))]\n                          (map p fs))))","user":"52f53589e4b05e3f0be25f2c"},{"code":"(fn [& f]\n  (fn [& args] (map #(apply % args) f)))","problem":59,"user":"4f713878e4b07046d9f4f00a"},{"problem":59,"code":"(fn [& fs] (fn [& arg] (loop [fs fs,res []] (if (empty? fs) res (recur (rest fs) (conj res (apply (first fs) arg)))))))","user":"5507cfd3e4b021ccfedb96ad"},{"problem":59,"code":"(fn [& funcs] (fn [ & args ] (map #(apply % args) funcs)))","user":"5b4cd94ce4b02d533a91bcb1"},{"problem":59,"code":"(fn [& argsf] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] argsf) ))","user":"5582c5b1e4b05c286339e10a"},{"code":"(fn [& fns]\n    (fn [& more] (into [] (for [f fns](apply f more)))))","problem":59,"user":"52fa4f48e4b047fd55836ff7"},{"code":"(fn jux [ & ops ]\n    (fn juxfn [& s]\n\t\t(reduce (fn [c op] (conj c (apply op s) )) [] ops)))","problem":59,"user":"5101192ae4b0bef64c30e266"},{"problem":59,"code":"(fn [& functions] \n  (fn [& arguments] \n    (for [f functions] (apply f arguments))))","user":"5d3ae729e4b01671435dbd5d"},{"problem":59,"code":"(fn [& fargs] (fn [& args] (map #(apply % args) fargs)))","user":"5f2c94b4e4b033932238a669"},{"problem":59,"code":"(fn mapaFci [& f] (fn [ & argj] (map #(apply % argj) f)))","user":"5576e78de4b05c286339e075"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [ret (vector (apply (first fs) args)) fs (next fs)]\n      (if fs\n        (recur (conj ret (apply (first fs) args)) (next fs))\n        ret))))","problem":59,"user":"5349ac2be4b084c2834f4a67"},{"code":"(fn [& fs]\r\n    (fn [& args]\r\n      (reduce #(conj %1 (apply %2 args))\r\n              []\r\n              fs)\r\n      )\r\n    )","problem":59,"user":"4e0d8c27535d04ed9115e7b7"},{"code":"(fn [ & fns] \n ( fn [ & args] \n    (map #( apply % args ) fns )))","problem":59,"user":"4f030775535dcb61093f6a43"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map (fn [f]\n           (apply f xs))\n         fs)))","user":"56a79eb0e4b07966d5a8a05d"},{"code":"(fn functions [& args]\n  (fn [& xs]\n    (loop [funct args result []]\n      (if (empty? (rest funct)) \n        (conj result (apply (first funct) xs))\n        (recur (rest funct) (conj result (apply (first funct) xs)))))))","problem":59,"user":"50f89404e4b0aafb827eb204"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (map #(apply % args) functions)))","user":"5ba5802de4b0a20761a233fd"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map apply fns (repeat args))))","problem":59,"user":"4edecdae535d10e5ff6f533c"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args))\n         funcs)))","user":"5c44f0fde4b0e06e1360a384"},{"problem":59,"code":"(fn [& funcs]\n   (fn [& args]\n     (reduce #(conj %1 (apply %2 args)) [] funcs)))","user":"566a8600e4b0a866af68969d"},{"code":"(fn [& fs]\n           (fn [& c]\n               (map #(apply % c) fs)))","problem":59,"user":"4f34eb87e4b0e243712b1eba"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) [] funcs))\n    )","user":"4f5e5975e4b0030a34fb2b4d"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& xs] (map #(apply % xs) fns)))","user":"5cdc08a2e4b05ee0cb31173a"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& ys] (for [f fs] (apply f ys))))","user":"50aa777fe4b056ee01935866"},{"code":"(fn [& x] #(map apply x (repeat %&)))","problem":59,"user":"50fde9b9e4b033b9c38d78d7"},{"code":"(fn [& fns] (fn [& args]\n               (map #(apply % args) fns)))","problem":59,"user":"4ee88bfb535d93acb0a66881"},{"code":"(fn [& fs]\n\t(fn [& xs]\n\t\t(map  #(apply % xs) fs)))","problem":59,"user":"51dd9370e4b0c33a4e1da40c"},{"code":"(fn [& ops]\n   (fn [& more]\n       (map #(apply % more) ops)))","problem":59,"user":"4ed72e51535d10e5ff6f52ee"},{"problem":59,"code":"(fn [& f] (fn\n                    [& x] (reduce #(conj %1 (apply %2 x)) [] (list* f))))","user":"5910a43de4b0163c97b36ebf"},{"code":"(fn [& fns] (fn [& args] (map #(apply %1 args) fns)))","problem":59,"user":"4e31a15c535deb9a81d77f1e"},{"code":"(fn [& fs] (fn [& args] (into [] (map #(apply %1 args) fs))))","problem":59,"user":"51281b25e4b03a34742b4304"},{"code":"(fn [& fs]\n  (fn [& arg] \n    (map #(apply % arg) fs)))","problem":59,"user":"5034b0e1e4b062bc5d7ae167"},{"code":"(fn f [& r] (fn [& a] (map #(apply % a) r)))","problem":59,"user":"4db1fe241254ad5b4805fa77"},{"problem":59,"code":"(fn [& fs] \n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fs)))","user":"54236ce1e4b01498b1a71ad1"},{"code":"(fn [& funs]\n (fn ([arg] (map #(% arg) funs))\n     ([arg & args] (map #(reduce % arg args) funs))))","problem":59,"user":"533ab9abe4b0e30313ee6cbf"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& xs] (map #(apply % xs) funcs)))","user":"55cdc576e4b0e31453f64a1f"},{"code":"(fn j [f & coll]\n  (fn [ & args]\n    (map #(apply % args) (cons f coll))))","problem":59,"user":"4f38d6bbe4b0e243712b1ee2"},{"code":"(fn jx [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4f04f847535dcb61093f6beb"},{"code":"(fn juxt' [& fs]\n    (fn [& args]\n        (map #(apply % args) fs)))","problem":59,"user":"508157b2e4b0946d0443855c"},{"problem":59,"code":"(fn\n [& funcs]\n (fn [& args]\n  (reduce #(conj %1 (apply %2 args)) '() (reverse funcs))))","user":"5d0e311de4b0cc9c91588251"},{"code":"(fn jux\r\n  [& fns]\r\n  (fn [& args]\r\n    (vec (map #(apply % args) fns))))","problem":59,"user":"500159b3e4b0678c553fc419"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] funcs)))","user":"580d2788e4b0849f6811b730"},{"code":"(fn [& fs]\n\t(fn [& args]\n        (map #(apply % args) fs)))","problem":59,"user":"50f48298e4b004d364930527"},{"problem":59,"code":"(fn [& fun1]\n  (fn [& fun2]\n    (map #(apply % fun2) fun1)))","user":"5634995fe4b0bfe05bf117be"},{"code":"(fn [& args] \n    (fn [& args2] \n      (loop [a args a2 args2 rtn [] ] \n        (if (empty? a) rtn \n          (recur (rest a) a2 (conj rtn (apply (first a) a2)))\n        )\n        )\n      )      \n  \n  )","problem":59,"user":"50f9e331e4b0e7c80cb15a53"},{"problem":59,"code":"(fn \n  [& arg] (fn [& args]\n       (map #(apply % args) arg)))","user":"60b3b375e4b0e0fa5f1b4232"},{"problem":59,"code":"(fn my-juxt\n  [& funcs]\n  (fn [& x]\n    (mapv (fn [f] (apply f x)) funcs)))","user":"5f3103aee4b0574c87022c24"},{"problem":59,"code":"(fn [& fs] (fn [& args] (reduce\n                          (fn [result f] (conj result (apply f args)))\n                          []\n                          fs)))","user":"5d5ef0bce4b0c9e5857d4ffb"},{"problem":59,"code":"(fn juxtaposition_59 [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"574ed2f7e4b02ea11479924a"},{"code":"(fn jxt [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)\n    )\n  )","problem":59,"user":"4ecfa05c535d44c135fd68b9"},{"code":"(fn [& opts]\n  (fn [& args]\n    (map #(apply % args) opts)))","problem":59,"user":"4daeabf6edd6309eace4d15c"},{"problem":59,"code":"(fn [& f] \n  (fn [& s]\n    (loop [l f a []]\n      (if (seq l)\n        (recur (next l) (conj a (apply (first l) s))) a))))","user":"5e6ca949e4b04a83ad7cd289"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (vec (map #(apply % xs) fs))))","problem":59,"user":"4dafa380edd6309eace4d17c"},{"code":"(fn [& f] #(map (fn [g] (apply g %&)) f))","problem":59,"user":"4e6b3fc8535d8ccf87e9ff0f"},{"code":"(fn [& f]\n  (fn [& a]\n    (map #( apply % a  ) f)))","problem":59,"user":"5007cdb9e4b0b17c647f5227"},{"code":"(fn [& fargs]\n  (fn [& args]\n    (for [f fargs]\n      (apply f args))))","problem":59,"user":"512474ede4b02c3f2a072cce"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args] \n     (map #(apply % args) fns)))","user":"50b25f2ce4b03ea88043355f"},{"problem":59,"code":"(fn\n  ([f g] \n    (fn\n      ([][f g])  \n      ([x][(f x)(g x)])  \n      ([x y][(f x y)(g x y)])  \n      ([x y z][(f x y z)(g x y z)])  \n      ([x y z & args][(apply f x y z args)(apply g x y z args)])\n    )  \n  )\n  ([f g h] \n    (fn \n      ([][f g h])  \n      ([x][(f x)(g x)(h x)])  \n      ([x y][(f x y)(g x y)(h x y)])  \n      ([x y z][(f x y z)(g x y z)(h x y z)])  \n      ([x y z & args][(apply f x y z args)(apply g x y z args)(apply h x y z args)])\n    )\n  ) \n)","user":"545537c1e4b0e397800069dd"},{"problem":59,"code":"(fn[& fns] (fn[& args] (map (fn[%1] (apply %1 args)) fns)))","user":"5a63f8bae4b0512ff01cd99f"},{"code":"(fn [& fs] (fn [& vs] (map #(apply % vs) fs)))","problem":59,"user":"4f06dcad535dcb61093f6c16"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (map (fn [f] (apply f args)) fs)))","user":"5ac6ef9be4b0e27600da7779"},{"code":"(fn jxt [& funcs]\n  (fn [& args]\n    (for [f funcs] (apply f args))))","problem":59,"user":"4f215350e4b0d66497709fd0"},{"code":"(fn [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","problem":59,"user":"4e59b02c535d8a8b8723a2a2"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (when (seq funcs)\n      (cons (apply (first funcs) args)\n            (apply (apply my-juxt (rest funcs)) args)))))","problem":59,"user":"5310e7aee4b08068f379ecdc"},{"code":"(fn [& funcs]\n  (fn [& args] (map #(apply % args) funcs)))","problem":59,"user":"51ab4082e4b04e3dc0c27b31"},{"problem":59,"code":"(fn [& f-list]\n (fn [& in-list] (map #(apply % in-list) f-list)))","user":"50856bd1e4b004985b776e4c"},{"problem":59,"code":"(fn ju [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"598601f9e4b021a7a535fe79"},{"code":"(fn [& funs]\n  (fn [& p] \n    (for [fs funs]\n      (apply fs p)\n )))","problem":59,"user":"52667ecfe4b03e8d9a4a713e"},{"code":"(fn [& fs]\n          (fn [& args]\n            (map #(apply % args) fs)))","problem":59,"user":"4daef21cedd6309eace4d169"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (reduce\n     #(conj %1 (apply %2 a))\n     []\n     f)))","user":"5742ec91e4b05c31a32c0883"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","problem":59,"user":"4dfe65a1535d04ed9115e787"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply %1 args) fs)))","problem":59,"user":"4eb9ce75535dfed6da9c6d5e"},{"code":"(fn [& funkcije]\n    (fn [& ix]\n        (map \n            (fn [ta]\n                (apply ta (flatten ix))\n            )\n            funkcije\n        )\n    )\n)","problem":59,"user":"4e78dc98535db95036265724"},{"problem":59,"code":"( fn [& functions]\n\t( fn [& args]\n\t\t(for [f functions]\n\t\t\t(apply f args)\n\t\t)\n\t)\n)","user":"5559b443e4b0deb715856e3c"},{"code":"(fn [& func-args]\n      (fn [& real-args]\n        (loop [acc   (vector)\n               funcs func-args ]\n          (if (empty? funcs) acc\n              (recur (conj acc (apply (first funcs) real-args))\n                     (next funcs))))))","problem":59,"user":"4f4a8707e4b0d56e7bb92c12"},{"problem":59,"code":"(fn [& fs]             \n  (fn [& more]                  \n    (map #(apply %1 more) fs)))","user":"5e5096c6e4b027a2e10ac0c6"},{"problem":59,"code":"(fn _juxt [& fs]\n  (fn [& args] (for [f fs] (apply f args))))","user":"52ee0de4e4b05e3f0be25ec1"},{"code":"(fn j [& fs] (fn doit [& args] (map #(apply % args) fs)))","problem":59,"user":"52d3f666e4b09f7907dd1327"},{"code":"#(fn [& xs] (map (fn [f] (apply f xs)) %&))","problem":59,"user":"5097a95fe4b00ad8bab4e96e"},{"code":"(fn [& fs] (fn [& args] (map (fn [f] (apply f args)) fs)))","problem":59,"user":"51db27dbe4b094966a2cd688"},{"problem":59,"code":"(fn [& f]\n  (fn [& x]\n    (reduce #(conj %1 (apply %2 x)) [] f)))","user":"5d62ce13e4b0c9e5857d501f"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (mapv #(apply % args) funcs)))","problem":59,"user":"528b08efe4b0239c8a67ae8a"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (map #(apply % args) funcs )))","user":"53e67e69e4b036ad0777e473"},{"problem":59,"code":"(fn [& fs] (fn [& ps] (for [f fs] (apply f ps))))","user":"571aad45e4b07c98581c3b59"},{"code":"(fn [& fns]\r\n  (fn [& args]\r\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","problem":59,"user":"4dd52e29535dae65d5c462e5"},{"code":"(fn [& args] \n  (fn [& xs] \n    (for [f args]\n      (apply f xs))))","problem":59,"user":"4ffa8affe4b0678c553fc3bd"},{"code":"(fn [& fns]\n                 (fn [& args]\n                   (map \n                     (fn [f] (apply f args))\n                     fns\n                    )))","problem":59,"user":"50d3b03fe4b030b634c368b9"},{"problem":59,"code":"(fn [& fs] (fn [& args] (mapv #(apply % args) fs)))","user":"4fb1d7ace4b081705acca281"},{"problem":59,"code":"(fn [& functions]\n                (fn [& args]\n                  (map (fn [f]\n                         (apply f args))\n                       functions)))","user":"53f891eee4b0de5c4184856d"},{"code":"(fn [& fs] \n    (fn [& args] \n      (map #(apply % args) fs )))","problem":59,"user":"4f8b27b3e4b02e764a0a5179"},{"code":"(fn [& f]\n  (fn [& a]\n    (for [x f]\n      (apply x a))))","problem":59,"user":"507ef25ce4b0f753b6f9788e"},{"problem":59,"code":"(fn my-juxt[& fs] \n   #(for [f fs] (apply f %&))\n)","user":"59a0262ee4b0871e7608b82d"},{"problem":59,"code":"(fn mm [& fns]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"535f0cbde4b04ce2eb3ed2d9"},{"code":"(fn [& fs]\n    (fn [& args] \n         (loop [result []  rf fs]\n          (if (empty? rf) result\n              (recur (conj result (apply (first rf) args)) (rest rf))\n          )\n       )\n    )\n)","problem":59,"user":"522eba30e4b01cdb292c5f0e"},{"problem":59,"code":"(fn [& f]\n (fn [& x]\n  (reduce #(conj %1 (apply %2 x)) [] f)))","user":"5b0180cfe4b0cc2b61a3bd47"},{"problem":59,"code":"(fn[& fns]\n  (fn[& args](map #(apply % args) fns)))","user":"57b3efb1e4b0fbc9809a278a"},{"problem":59,"code":"(fn [& args] \n  (fn [& items] \n    (mapv #(apply % items) args)))","user":"5bb36a9ce4b0a20761a23523"},{"code":"(fn [& fns] (fn [& xs] (for [f fns] (apply f xs))))","problem":59,"user":"4ddc1c89535d02782fcbea01"},{"problem":59,"code":"(fn [& fs] (fn [& x] (map (fn [f] (apply f x)) fs)))","user":"5595a88ee4b0c79f6e1db96e"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n          (map #(apply %1 args) fns)))","user":"56761ab1e4b05957ce8c6154"},{"problem":59,"code":"(fn [ & fns]\n    (fn [& args]\n      (map\n        #(apply % args)\n        fns)))","user":"5b999af8e4b0c0b3ffbd4ad3"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (reduce (fn [acc curr_f] (conj acc (apply curr_f xs)))\n           []\n           fns)))","user":"5573ffb5e4b0aa18f790f3fd"},{"problem":59,"code":"(fn [& y](fn [& a](map #(apply % a) y)))","user":"575dda55e4b02ea11479938c"},{"code":"(fn[& fs] #(map apply fs (repeat %&)))","problem":59,"user":"5141fafbe4b0b50abeb46b28"},{"problem":59,"code":"(fn my-juxt [& funcs]\n      (fn [& args]\n        (map #(apply % args) funcs )) )","user":"58e5f995e4b056aecfd47ca5"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (loop [fns funcs\n             outp []]\n        (if (empty? fns)\n          outp\n          (recur (rest fns) (conj outp (apply (first fns) args))\n          )))))","user":"5a9d64c8e4b0d174b936c7eb"},{"code":"(fn [& ops] \n    (fn [& args] \n      (map (fn [op] (apply op args)) ops)\n    )\n  )","problem":59,"user":"50217818e4b00bba4502f7a7"},{"problem":59,"code":"(fn pia [& ops]\n  (fn [& args]\n    (map #(apply % args) ops)))","user":"569ce6fee4b0542e1f8d146c"},{"problem":59,"code":"(fn[& fns]\n  (fn [& xs]\n    (map #(apply % xs) fns)))","user":"547fbe01e4b0c51c1f4d7321"},{"code":"(fn [& more]\n  (fn [& data]\n    (map #(apply % data) more)\n  )\n)","problem":59,"user":"4e3456f9535deb9a81d77f2a"},{"problem":59,"code":"(fn [& func-arr]\n  (fn [& args]\n    (map (fn [x] (apply x args)\n           )\n         func-arr)\n    )\n  )","user":"5d90b3b3e4b0915913b1d3fb"},{"code":"(fn [& fns] (fn [& p] (map #(apply %1 p) fns)))","problem":59,"user":"52cdb7efe4b07d0d72b2737c"},{"code":"(fn [& fns]\n  (fn [& pars]\n    (map (fn [x] (apply x pars)) fns)))","problem":59,"user":"4f017593535dcb61093f6a36"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (reduce (fn [v f] (conj v (apply f args))) [] fns)))","user":"563fc1f2e4b08d4f616f5ed7"},{"problem":59,"code":"(fn [& f] (fn [& s] (map #(apply % s) f)))","user":"56c08696e4b060a8e693e3aa"},{"code":"(fn [& fns]\n  (fn [& args] (map apply (vec fns) (repeat args))))","problem":59,"user":"52950ab6e4b02ebb4ef7501a"},{"problem":59,"code":"(fn[& functions] \n  (fn[& args]\n    (map #(apply % args) functions)))","user":"55429859e4b0a04f7929951f"},{"problem":59,"code":"(fn f59 [& fs]\n  (fn j [& args]\n    (map #(apply % args) fs)\n))","user":"51f81925e4b09be9c177e526"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& gs] (map #(apply % gs) fs)))","user":"5b107263e4b0cc2b61a3be22"},{"code":"(fn j [& fs] (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"4fcc6cb3e4b0ee37620e1861"},{"problem":59,"code":"(fn [& F]\n  (fn [& a]\n    (map #(apply % a) F)))","user":"4f42ae16e4b0d7d3c9f3fd09"},{"problem":59,"code":"(fn [& args]\n  (fn [& funcargs]\n  (loop [funclist args\n         results []]\n    (if (empty? funclist)\n      (into [] (reverse results))\n      (recur (rest funclist) (cons (apply (first funclist) funcargs) results) )))\n    ))","user":"561f27a1e4b064ca9f4b16ca"},{"problem":59,"code":"(fn [& fns]\n (fn [& xs]\n  (map\n   #(apply % xs)\n   fns)))","user":"549a999be4b0f3d1d8e70f6f"},{"code":"(fn [& fs]\n  (fn [& args] (for [f fs] (apply f args))))","problem":59,"user":"504e12ade4b078edc5f593b7"},{"code":"(fn [& fs]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) [] fs)))","problem":59,"user":"5016ac54e4b052339a490e7b"},{"problem":59,"code":"(fn [& fs]\n    (fn [& sx]\n      (reduce #(conj %1 (apply %2 sx)) [] fs)))","user":"5458c74de4b01be26fd74623"},{"code":"(fn [& fns]\n  (fn [& args]\n    ((fn myjx [fns args]\n      (if (empty? fns) []\n      (cons (apply (first fns) args) (myjx (rest fns) args))\n      )\n    ) fns args)\n  )\n)","problem":59,"user":"4f8b56dae4b02e764a0a517e"},{"code":"(fn[& f] (fn [& x] (map #(apply % x) f)))","problem":59,"user":"4f01c938535dcb61093f6a39"},{"problem":59,"code":"(fn [& fl]\n  (fn [& al]\n    (for [f fl]\n      (apply f al))))","user":"57d9f603e4b0bd073c20240a"},{"problem":59,"code":"(fn [& f]\n  (fn [& a]\n    (mapv #(apply % a) f)))","user":"5136f659e4b04059df19f2fd"},{"code":"(fn my-juxt [& fs]\r\n            (fn [& args]\r\n                (loop [an [] fs fs]\r\n                   (if (empty? fs)\r\n                       an\r\n                       (recur (conj an \r\n                                    (apply (first fs) args))\r\n                                    (rest fs))))))","problem":59,"user":"4dd62278535d2dad7130b5c7"},{"problem":59,"code":"; second solution: map \n(fn [& fs]\n    (fn [& xs]\n      (map #(apply % xs) fs)))\n\n; first solution: for\n#_(fn [& fs]\n    (fn [& xs]\n      (for [f fs] (apply f xs))))","user":"55e7d06ee4b050e68259b496"},{"code":"(fn [ & ops]  (fn [ & x ] (map #(apply %1 x) ops)))","problem":59,"user":"50956c2be4b087f34d351ab2"},{"problem":59,"code":"(fn \n([f g]   #(vector (apply f %&)(apply g %&)))\n([f g h] #(vector (apply f %&)(apply g %&)(apply h %&))))","user":"556f35fee4b09a3098a5251a"},{"code":"(fn f [& fns]\n  (fn [& args]\n    (loop [fns fns acc []]\n      (if (empty? fns)\n        acc\n        (recur \n          (rest fns) \n          (conj acc \n                (apply (first fns) args)))))))","problem":59,"user":"51750cd4e4b07031762f2ee5"},{"problem":59,"code":"(fn[& a] (fn[& b] (map #(apply % b) a)))","user":"56824e1be4b0945ebc182a91"},{"problem":59,"code":"#(fn [& args]\n   (reduce\n    (fn [a x]\n      (conj a (apply x args)))\n    [] %&))","user":"5e3a25d4e4b01d43a70e8dde"},{"code":"(fn [& fs] \n  (fn [& xs]\n    (map #(apply % xs) fs)))","problem":59,"user":"536ca4bde4b0fc7073fd6e49"},{"problem":59,"code":"(fn foo [& args]\n  (fn bar [& x]\n    (for [fu args]\n      (apply fu x))))","user":"5b3251c1e4b025bcb146f317"},{"code":"(fn[& fs] (fn[& data] (for[f fs] (apply f data))))","problem":59,"user":"52e68e61e4b09f7907dd1479"},{"problem":59,"code":"(fn [& ops]\n  \t(fn [& args]\n       \t\t(loop [ops ops result []]\n\t\t\t\t(if (empty? ops) result\n       \t\t\t(recur (rest ops) (conj result (apply (first ops) args)))))))","user":"559b55d6e4b066d22e731f54"},{"problem":59,"code":"(fn custom-juxt [& fs]\n  (fn [& args]\n    (map\n      (fn [f] (apply f args))\n      fs)))","user":"59f78b49e4b0ca45a743a30e"},{"code":"(fn\n  ([f g h]\n  (fn\n     ([& args]\n      [(apply f args) (apply g args) (apply h args) ])))\n\n   ([f g]\n  (fn\n     ([& args]\n      [(apply f args) (apply g args) ])))  \n   \n   )","problem":59,"user":"518c5236e4b087e178201de0"},{"code":"#(fn [& args] (->> %& reverse (map (fn [f] (apply f args))) reverse vec))","problem":59,"user":"513f0565e4b051389b345b3b"},{"code":"(fn jux [& fns]\n  (fn [& args]\n    (flatten ((fn step [[f & fs] a]\n      (if fs\n        [(apply f a) (step fs a)]\n        (apply f a)))\n     \n    fns args))))","problem":59,"user":"52a6ed15e4b0c58976d9ac0a"},{"problem":59,"code":"(fn[& fs]\n   (fn\n     ([& args] (reduce #(conj %1 (apply %2 args)) [] fs))))","user":"58d96bdce4b0a4d5acaab638"},{"code":"(fn [ & fs] (fn  [& x ]  \n    (into  []  (map #(apply % x) fs))\n   ))","problem":59,"user":"4fccdc75e4b0ee37620e186d"},{"code":"(fn jxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4f611127e4b0defedf855fb4"},{"problem":59,"code":"(fn [& flist]\n  (fn [& vlist]\n     (map (fn [f]\n            (apply f vlist)\n            ) flist)\t  \n  ) \n)","user":"52824143e4b0757a1b171453"},{"code":"(fn [& fcol]\n  (fn [& col]\n    (map #(apply % col) fcol)))","problem":59,"user":"50bfe725e4b080409b860f26"},{"code":"(fn [& func]\n   (fn [& args]\n     (map (fn [f] (apply f args)) func)))","problem":59,"user":"4f03818e535dcb61093f6b00"},{"problem":59,"code":"(fn myjuxt\n  ([] [])\n  ([f] (fn\n         ([] [(f)])\n         ([x] [(f x)])\n         ([x y] [(f x y)])\n         ([x y & ys] [(apply f x y ys)])\n         ))\n  ([f & fs] (fn\n              ([& args]\n               (reduce #(conj %1 (apply %2 args)) [(apply f args)] fs)\n               )\n              ))\n  )","user":"5488872ee4b0e286459a11d3"},{"code":"(fn cust-jux\n  ([x] (fn [& args] (list (apply x args))))\n  ([x y] (fn [& args] (list (apply x args) (apply y args))))\n  ([x y z] (fn [& args] (list (apply x args) (apply y args) (apply z args)))))","problem":59,"user":"52463059e4b09dbe66b56198"},{"code":"(fn [& s] #(map (fn [f] (apply f %&)) s))","problem":59,"user":"4ef6e689535dced4c769f24f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (vec (map #(apply % args) fs))))","user":"55d6a2ebe4b0e31453f64a9a"},{"code":"(fn [ & fs ]\n  (fn [ & ns ]\n    (map #(apply % ns) fs)))","problem":59,"user":"4ee82223535d93acb0a66877"},{"problem":59,"code":"(fn my-juxt [& functions]\n  (fn [& args]\n    (for [f functions]\n      (apply f args))))","user":"561d23e3e4b064ca9f4b16a5"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (map (fn [f]\n             (apply f args))\n           fs)))","user":"5be5cebde4b0ed4b8aab4d19"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args] (map #(apply % args) fns)))","user":"53c1b787e4b00fb29b221266"},{"problem":59,"code":"(fn [& fns]\n  (let [fns (list* fns)]\n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args)) [] fns))))","user":"5881335ce4b0f1effa3b762e"},{"code":"(fn j [& fns]\n  (fn [& xs]\n    (vec (map #(apply % xs) fns))))","problem":59,"user":"4feff3b6e4b0678c553fc31e"},{"problem":59,"code":"(fn [& fs]\n  (fn [& y] (reduce (fn [t v] (conj t (apply v y))) [] fs)))","user":"54e24a05e4b024c67c0cf7ce"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] \n    (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"53da8fede4b0e771c30254a3"},{"problem":59,"code":"(fn mjuxt\n  [& funs]\n  (fn\n    [& args]\n    (map #(apply % args) funs)))","user":"51d55598e4b01da06753aa8e"},{"problem":59,"code":"(fn[& x](fn[& y] (map (fn[z] (apply z y)) x) ))","user":"5c683fb5e4b0fca0c16226d5"},{"code":"(fn [& fs]\n        (fn [& args] \n            (for [f fs]\n                 (apply f args))))","problem":59,"user":"4e599577535d8a8b8723a29f"},{"code":"(fn [& fs]\n      (fn [& args] \n        (for [f fs]\n          (apply f args))))","problem":59,"user":"51e28063e4b08e53a149f0f2"},{"code":"(fn [& f]\n  (fn [& v]\n    (map\n      #(apply % v)\n      f)))","problem":59,"user":"501284d9e4b030d97e4db710"},{"code":"(fn [& fs] \n  (fn [& args] (map #(apply % args) fs)))","problem":59,"user":"51c19873e4b0d204dbe2ca0d"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (map (fn [func] \n             (apply func args)\n             )\n           funcs\n           )\n      ))","user":"571a282ae4b07c98581c3b46"},{"code":"(fn [& r] #(map (fn [f] (apply f %&)) r))","problem":59,"user":"502904e0e4b0feaf66e22fad"},{"code":"(fn [& fs]\n    #(map apply fs (repeat %&)))","problem":59,"user":"4e5be681535d8a8b8723a2bc"},{"code":"(fn my-juxt\n([f] #(apply f %&))\n([f g]\n    (fn\n    ([] (f (g)))\n    ([& args] [(apply f args) (apply g args)])))\n([f g h]\n    (fn\n    ([] (f (g (h))))\n    ([& args] [(apply f args) (apply g args) (apply h args)]))))","problem":59,"user":"4f9c4080e4b0dcca54ed6d1a"},{"code":"(fn [& funcs]\n  (fn [& xs]\n    (mapv #(apply % xs) funcs)))","problem":59,"user":"53800d99e4b06839e8705ebd"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n   (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"5c09e555e4b0bdcf453d16fd"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map (fn [f] (apply f xs))\n         fs)))","user":"5b64370ae4b0c6492753e73c"},{"code":"(fn [& fs] (fn [& xs]\n  (if (> (count xs) 1)\n      (map #(reduce % xs) fs)\n      (map #(% (first xs)) fs))))","problem":59,"user":"4f1b92d1535d64f60314647b"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (map (fn [e] (apply e xs)) fs)))","user":"58a953dae4b01a0c0b232968"},{"problem":59,"code":"(fn test [& funs]\n  (fn [& args]\n    (letfn [(help [funs args]\n                  (if (seq funs)\n                    (cons (apply (first funs) args)\n                          (help (next funs) args))))]\n      (help funs args))))","user":"579332c2e4b0e215f87e8452"},{"code":"(fn [& s] \n  (fn [& v] (map #(apply % v) s)))","problem":59,"user":"50336c6be4b0c6c1199c710f"},{"problem":59,"code":"(fn my-juxt\n  ([] (fn [] []))\n  ([f] (fn [& args] [(apply f args)]))\n  ([f g] (fn [& args] [(apply f args) (apply g args)]))\n  ([f g & tail_f]\n   (reduce (fn [acc ele] (fn [& args] (conj (apply acc args) (apply ele args))))\n           (fn [& args] [])\n           (concat [f g] tail_f)))\n  )","user":"5f29837ee4b033932238a64f"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [f] (apply f args)) (vec fns))))","problem":59,"user":"4ebc08a8535dfed6da9c6d7c"},{"problem":59,"code":"(fn mjust [& argsl]\n  (fn [x & args]\n    (map (fn [arg] (apply arg x args)) argsl))\n  )","user":"55d42f78e4b0e31453f64a73"},{"problem":59,"code":"(fn [& c]\n  (fn [& a]\n    (map #(apply % a) c)))","user":"55201d18e4b08d5046aa8a5d"},{"code":"(fn [& funcs ]\r\n  (fn [ & args ]\r\n    (loop [f1 (first funcs)\r\n     restf (rest funcs)\r\n\t   out nil]\r\n      (if (nil? f1)\r\n\t(reverse out)\r\n\t(recur\r\n\t (first restf)\r\n\t (rest restf)\r\n\t (cons (apply f1 args) out))))))","problem":59,"user":"504ec4d3e4b069badc5a33c9"},{"code":"(fn ju\n    ([f]\n\t     (fn\n\t       ([] [(f)])\n\t       ([x] [(f x)])\n\t       ([x y] [(f x y)])\n\t       ([x y z] [(f x y z)])\n\t       ([x y z & args] [(apply f x y z args)])))\n\t  ([f g]\n\t     (fn\n\t       ([] [(f) (g)])\n\t       ([x] [(f x) (g x)])\n\t       ([x y] [(f x y) (g x y)])\n\t       ([x y z] [(f x y z) (g x y z)])\n\t       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n\t  ([f g h]\n\t     (fn\n\t       ([] [(f) (g) (h)])\n\t       ([x] [(f x) (g x) (h x)])\n\t       ([x y] [(f x y) (g x y) (h x y)])\n\t       ([x y z] [(f x y z) (g x y z) (h x y z)])\n\t       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n\t  ([f g h & fs]\n\t     (let [fs (list* f g h fs)]\n\t       (fn\n\t         ([] (reduce #(conj %1 (%2)) [] fs))\n\t         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n\t         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n\t         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n\t         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","problem":59,"user":"4f891abde4b033992c121c77"},{"code":"(fn juxt-clone ([f] (fn [& x] (list (apply f x))))\n               ([f & g] (fn [& x] (concat  (apply (juxt-clone f) x) (apply (apply juxt-clone g) x)) ))\n  )","problem":59,"user":"5259a16ee4b0cb4875a45ce1"},{"code":"(fn fcomp [& f]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] f)))","problem":59,"user":"532c9dc9e4b019098a6f8b30"},{"problem":59,"code":"(fn my-juxt [& functions]\n  (fn [& arguments]\n    (map\n      #(apply % arguments)\n      functions)))","user":"528bba38e4b0239c8a67aea9"},{"problem":59,"code":"(fn [& funcset]\n    (fn [& args]\n      (map #(apply % args) funcset)))","user":"56b306c6e4b0982f16b37e0e"},{"problem":59,"code":"#(fn [& a] (map (fn [x] (apply x a)) %&))","user":"5c41db45e4b08cd430848ece"},{"code":"(fn [& fs]\n  (fn [& args]\n    (vec (for [f fs] (apply f args)))))","problem":59,"user":"527a69cee4b03e8d9a4a755d"},{"code":"(fn [& fs]\n  (fn [& rs]\n    (map #(apply % rs) fs)))","problem":59,"user":"4f8345c6e4b033992c121c1b"},{"code":"(fn [& args] (fn [& v] (map #(apply % v) args)))","problem":59,"user":"52253004e4b01819a2de42fa"},{"problem":59,"code":"(fn [& x]\n  (fn [& y] (map #(apply % y) x)))","user":"53c74cfce4b00fb29b2212a7"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args]\n     (map #(apply % args) fs)\n   )\n)","user":"56979bb7e4b0e0b3d3318cac"},{"code":"(fn [& f] (fn [& x] (reduce #(conj %1 (apply %2 x)) [] f)))","problem":59,"user":"4f03f197535dcb61093f6b84"},{"problem":59,"code":"(fn [& all]\n               (fn [& coll]\n                 (loop [all all\n                        coll (if (coll? coll) coll (list coll))\n                        result []]\n                   (if (empty? all)\n                     result\n                     (let [new-coll (apply (first all) coll)]\n                     (recur \n                            (rest all)\n                            coll\n                            (conj result new-coll))\n                    )))))","user":"567d18c9e4b05957ce8c61c4"},{"problem":59,"code":"(fn fkcije [& kcije]\n  (fn [& args]\n    (map #(apply % args) kcije)\n    )\n  )","user":"584d99c5e4b0b7285a6f4e42"},{"problem":59,"code":"(fn j [& fns]\n  #(reduce (fn [a b] (conj a (apply b %&))) [] fns))","user":"559067ace4b0277789237670"},{"problem":59,"code":"(fn my-juxt\n  [& funcs]\n  (fn [& args] (map (fn [function]\n             (apply function args))\n                       funcs\n                       )\n    )\n  )","user":"5dfb538ee4b0a607a9a45cda"},{"problem":59,"code":"(fn [& x] (fn [& xs] (reduce (fn [f g] (conj f (apply g xs))) [] x)))","user":"549a176ce4b0f3d1d8e70f69"},{"code":"#(fn [& args] (map (fn [a] (apply a args)) %&))","problem":59,"user":"50ae0d24e4b0a40c9cfb08ce"},{"problem":59,"code":"(fn juxtaposition [& fns]\n  (fn [& s]\n    (map #(apply % s) fns)))","user":"5c665311e4b0fca0c16226a7"},{"problem":59,"code":"( fn [& fns]\n   (fn [& args]\n     (map (fn [f] (apply f args)) fns )))","user":"60654263e4b069485764ddc9"},{"code":"(fn [& fs]\n  (fn [& ps]\n    (reduce\n      #(conj %1 (apply %2 ps))\n      []\n      fs)))","problem":59,"user":"4dbdc9da535d020aff1edf4c"},{"code":"(fn myjuxt [& fns]\n  (let [f (first fns)\n        g (rest fns)]\n    (fn [& x]\n      (let [result (apply f x)]\n        (if (empty? g)\n          result\n          (flatten (conj '() \n                (apply (apply myjuxt g) x)\n                result)))))))","problem":59,"user":"4e9ff8d0535d7eef3080729c"},{"code":"(fn [& fs]\n  (fn [& x] (map #(apply % x) fs)))","problem":59,"user":"5002b6e5e4b0678c553fc42c"},{"code":"(fn [f1 & f2]\n              (fn [& args] (map #(apply % args) (cons f1 f2)))\n              )","problem":59,"user":"4ea85846535d7eef308072f9"},{"code":"(fn [& args]\r\n  (fn [& args2]\r\n    (map (fn [f] (apply f args2)) args)))","problem":59,"user":"4ddbdc1b535d02782fcbe9fd"},{"problem":59,"code":"(fn my-juxt [& rst]\n  (fn [& x] (map #(apply %1 x) rst)))","user":"541475afe4b01498b1a719eb"},{"problem":59,"code":"(fn [& xs]\n    (fn [& ys]\n        (map #(apply % ys) xs)))","user":"5e08c3dde4b0978307768fc8"},{"problem":59,"code":"(fn juxtaposition\n  [& fs]\n  (fn [& s]\n    (map\n     #(apply % s)\n     fs)))","user":"53b952eee4b047364c0444e6"},{"problem":59,"code":"(fn myjuxt [& fs]\n          (fn [& args]\n            (for [f fs]\n              (apply f args))))","user":"58c4492be4b021aa9917ed27"},{"code":"(fn [& fns]\n  (fn [& args]\n  \t(reduce #(conj % (apply %2 args)) [] fns)))","problem":59,"user":"512eb723e4b0b740abc5982b"},{"code":"(fn [& fns]                                                         \n  (fn [& xs]                                                          \n    (reduce #(conj %1 (apply %2 xs)) [] fns)))","problem":59,"user":"4f2baf1ae4b0d6649770a04c"},{"code":"#(fn [& x] \n   (map (fn [f] (apply f x)) %&))","problem":59,"user":"4efb2fd7535dced4c769f274"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [s n] (conj s (apply n args))) [] fns) \n  )\n)","problem":59,"user":"5303a027e4b0d8b024fd3745"},{"problem":59,"code":"(fn k [& fs]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (conj acc (apply f args)))\n            []\n            fs)))","user":"5657fed1e4b0f9d632dd84ae"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (mapv #(apply % args) fs)))","user":"512e31e9e4b0b740abc59823"},{"code":"(fn [& fs]\n  (fn [& args]\n    (reduce #(conj % (apply %2 args)) [] fs)))","problem":59,"user":"4fd22e70e4b04c3a95aa041c"},{"code":"(fn my-juxt [& funcs]\r\n  (fn [& args]\r\n    (map #(apply % args) funcs )))","problem":59,"user":"4f7d25b4e4b06e829148e1ba"},{"problem":59,"code":"(fn [& fns] (fn [& args] ( map (fn [f] (apply f args)) fns )))","user":"57986b76e4b039eba2ecb116"},{"problem":59,"code":"(fn [& params] (fn [& p] (map #(apply % p) params)))","user":"56677192e4b04acd4f672dd5"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [f fs, result []]\n      (if (empty? f)\n        result\n        (recur (rest f) (conj result (apply (first f) args)))))))","user":"60882700e4b0ae75613dcedf"},{"problem":59,"code":"(fn [& args]\n      (fn [& nextargs]\n        (map \n          (fn [x] (apply x nextargs))\n          args\n          )\n        )\n      )","user":"573407f0e4b0cd1946bd1001"},{"problem":59,"code":"(fn [& fns] \n  (fn [& vs] (map (fn [f] (apply f vs)) fns)))","user":"5884e807e4b0f1effa3b76a6"},{"code":"(fn\n  [& fs]\n  (fn [& args] (vec (map #(apply % args) fs))))","problem":59,"user":"52dfc89be4b09f7907dd1405"},{"code":"(fn\n  ([x y z](fn [a & b] \n      (vector (apply x (cons a b))\n      (apply y (cons a b))\n      (apply z (cons a b)))))\n  ([x y](fn [a & b] \n      (vector (apply x (cons a b))\n      (apply y (cons a b))))))","problem":59,"user":"4e6cf521535de274dd8d818b"},{"code":"#(fn [& x]\n   (map (fn [f] (apply f x)) %&))","problem":59,"user":"538d8bb8e4b0b51d73faae71"},{"problem":59,"code":"(fn juxt-alt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"58dcb8cde4b0a4d5acaab6a7"},{"problem":59,"code":"(fn __\n  [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"55a62092e4b0acc240e31554"},{"code":"(fn [& fs] (fn [& args] (reduce #(conj % (apply %2 args)) [] fs)))","problem":59,"user":"4e9c81e8535dbda64a6f6b80"},{"code":"#(fn [& x] (map (fn [f] (apply f x)) %&))","problem":59,"user":"4e7dd982535db169f9c796ee"},{"code":"(fn fun [& x]\n  (fn [& y]\n    (loop [x x, r []]\n      (if x \n        (let [r (conj r (apply (first x) y))]\n          (recur (next x) r))\n        r\n      ))))","problem":59,"user":"4e44358f535dc968683fc4a8"},{"problem":59,"code":"(fn [& fs] \n  (fn [& args] \n    (loop [fs fs\n           result []]\n      (if (seq fs)\n        (recur (rest fs) (conj result (apply (first fs) args)))\n        result))))","user":"53f35c34e4b0742d9025b0f4"},{"code":"(fn [& fs]                                                                                                                                                    \n  (fn [& args]                                                                                                                                                \n    (map #(apply % args) fs)))","problem":59,"user":"510c1dd5e4b078ea71921113"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce\n      #(conj % (apply %2 args))\n      []\n      fns)))","user":"5b0e6795e4b0cc2b61a3be03"},{"problem":59,"code":"(fn juxtaposition [& fs] \n\t(fn [& xs]\n\t\t(map #(apply % xs) fs)))","user":"52e657e4e4b09f7907dd1472"},{"problem":59,"code":"(fn juxtaposition                                         ; juxt\n  [& fs]\n  (fn [& coll]\n     (map #(apply % coll) fs)))","user":"60396c95e4b0d5df2af222f4"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n   \t(map #(apply %1 args) funcs)\n  )\n)","user":"53d5e45ae4b0e771c302544e"},{"code":"(fn [& fs]\n    (fn [& xs]\n      (into [] (for [f fs] (apply f xs)))\n    ))","problem":59,"user":"4f038567535dcb61093f6b0c"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args] \n        (reduce #(conj %1 (apply %2 args)) \n                [] \n                funcs\n        )\n    )\n)","user":"546692aee4b01be26fd746e7"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& vs]\n    (map #(apply % vs) fs)))","user":"52860baae4b0239c8a67ae09"},{"code":"(fn [& ops] (fn [& args] (map apply ops (repeat args))))","problem":59,"user":"528e95efe4b0239c8a67aee2"},{"code":"(fn myjuxt [& fs]\r\n  (fn [& args]\r\n  (loop [ret (conj [] (apply (first fs) args)) fs (next fs)]\r\n\t  (if fs\r\n\t\t(recur (conj ret (apply (first fs) args)) (next fs))\r\n\t\tret))))","problem":59,"user":"4e50c894535dc968683fc4ee"},{"problem":59,"code":"(fn \n  ([x y z] (fn [& arg] (vec [(apply x arg) (apply y arg) (apply z arg)])))\n  ([x y] (fn [& arg] (vec [(apply x arg) (apply y arg)]))))","user":"564b1ff8e4b0284900eef663"},{"code":"(fn [& fs]\n  (fn [& c] (map #(apply % c) fs) )\n)","problem":59,"user":"4e9dafe1535dbda64a6f6b89"},{"code":"(fn my-juxt [& fns]                                                                                                                          \r\n    (fn [& args]                                                                                                                               \r\n      (map #(apply % args) fns)))","problem":59,"user":"4f149e0f535d64f60314643d"},{"problem":59,"code":"(fn [& fs]\n  (fn [& coll]\n  \t(loop [fs fs, res []]\n      (if (empty? fs) res\n        (recur (rest fs) (conj res (apply (first fs) coll)))))))","user":"577c3da9e4b0c8d87281f6b9"},{"problem":59,"code":"(fn [& fs]\n          (fn [& args]\n            (map (fn [f] (apply f args)) fs)))","user":"5c995fa4e4b048ec896c5a96"},{"problem":59,"code":"(fn myjuxt [ & fs]\n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))\n    ))","user":"5510aa92e4b06e50f9beb188"},{"problem":59,"code":"(fn juxt'\n  ([f] #(vector (apply f %&)))\n  ([f & funs] #(into\n                (apply (juxt' f) %&)\n                (apply (apply juxt' funs) %&))))","user":"55ac07afe4b03311e7b7328f"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n  (loop [fs (vec funs)\n         a args\n         res []]\n    (if (empty? fs)\n      res\n      (recur (rest fs) a (conj res (apply (first fs) a)))))))","user":"52ebbdf7e4b0705949c44443"},{"problem":59,"code":"(fn __ [& fns]\n  (fn [& more] \n    (for [f fns]\n      (apply f more))))","user":"59089229e4b047aa04b1997c"},{"problem":59,"code":"(fn[& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"55afd469e4b002ce9d5cbc19"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    ;(loop [fns fns,result []]\n    ;  (cond \n    ;   (empty? fns) result\n    ;   :else (recur (rest fns) (conj result (apply (first fns) args)))))))\n    (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"55efb51ee4b066087aa9453b"},{"problem":59,"code":"(fn juxtaposition [& fns]\n  (fn [& args]\n    (reduce (fn [result-vector f]\n              (conj result-vector (apply f args))) [] fns)))","user":"57ee804ee4b0bfb2137f5bbb"},{"code":"(fn [ & funs]\n     (fn [& args]\n       (map #(apply % args) funs)))","problem":59,"user":"50e87427e4b0ebbe794eb7e8"},{"code":"(fn [& f]\n  (fn [& s]\n    (map #(apply % s) f)))","problem":59,"user":"4e6a412e535d8ccf87e9feb6"},{"problem":59,"code":"(fn juxtaposition [& fs] \n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))))","user":"52616198e4b03e8d9a4a705e"},{"problem":59,"code":"(fn bad-juxt\n  [& funcs]\n  ; juxtaposed function\n  (fn juxted-funcs\n    [& args]\n    (mapv #(apply % args) funcs)))","user":"5e692be9e4b04a83ad7cd269"},{"code":"(fn [& fargs] \r\n            (fn [& args] \r\n            \t(for [ff fargs] \r\n                \t(apply ff (vec args)))))","problem":59,"user":"4e8768f6535dceadca469850"},{"code":"(fn my-juxt [& fs]\n  (fn [& operands]\n    (loop [fs fs s []]\n      (if (= fs '()) s\n        (recur (rest fs) (conj s (apply (first fs) operands)))))))","problem":59,"user":"502f4c89e4b0842eb223d8b9"},{"problem":59,"code":"(fn juxtapose [& funcs]\n  (fn [& args]\n\t(map #(apply % args) funcs)))","user":"59971e2de4b07157cc8daacc"},{"code":"(fn [& f]\n  (fn [& a]\n    (let [h (fn [f r] (if (nil? f) r (recur (next f) (conj r (apply (first f) a)))))]\n      (h f []))))","problem":59,"user":"4e951f44535dbda64a6f6b30"},{"problem":59,"code":"(fn [& fs] (fn [& arg] (reduce #(conj %1 (apply %2 arg)) [] fs)))","user":"5e8c3e8fe4b0cb0169546322"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (doall (for [f funcs] (apply f args)))))","user":"4e41a04e535dc968683fc49e"},{"code":"(fn my-juxt [& fs]\n  (fn [& xs]\n    (map\n     #(apply % xs)\n     fs)))","problem":59,"user":"51365524e4b04ac1f358dd52"},{"code":"(fn [& fs] (fn [& xs] (map (fn [f] (apply f xs)) fs)))","problem":59,"user":"5089ebfee4b03217b26a539f"},{"problem":59,"code":"(fn [& funs]\n \t(fn [& args]\n      (map #(apply % args) funs)))","user":"4f9aa2a6e4b0dcca54ed6d0c"},{"problem":59,"code":"(fn juxtapose [& args]\n  (fn [& l] (map #(apply % l) args))\n  )","user":"5b5e5019e4b0c6492753e6d3"},{"problem":59,"code":"(fn [& fs] (fn [& args] (->> fs\n                             (map (partial conj (list args)))\n                             (map (partial apply apply)))))","user":"5960a1a6e4b066ee0a44b08e"},{"code":"(fn [& fn-list]\n  (fn [& args]\n    (map #(apply % args) fn-list)))","problem":59,"user":"53527551e4b084c2834f4af0"},{"problem":59,"code":"(fn  [& fns]  (fn  [& args]  (let [k (for  [f fns]  (apply f args))] (vec k))))","user":"5d0cf1c8e4b0cc9c91588246"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (for [f funs] (apply f args))\n))","user":"56561119e4b0f9d632dd849d"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [lseq fns acc []]\n      (if (empty? lseq)\n        acc\n        (recur (rest lseq) (conj acc (apply (first lseq) args)))))))","user":"56cb4d06e4b0ea9b8538f72e"},{"problem":59,"code":"(fn\n  [& f]\n  (fn [& a]\n    (loop [f f\n           r []]\n      (if (empty? f)\n        r\n        (recur\n         (rest f)\n         (conj r (apply (first f) a)))))))","user":"53ac4719e4b047364c04445c"},{"problem":59,"code":"(fn [& fns]\n  (fn [& els]\n    (reduce \n     (fn [prev f] \n       (conj prev (apply f els))) '[] fns)))","user":"5514a60fe4b055c2f668d4d7"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (loop [ret [] fs fs]\n      (if (seq fs)\n        (recur (conj ret (apply (first fs) args))\n               (rest fs))\n        ret))))","user":"53b7aa6ce4b047364c0444d1"},{"problem":59,"code":"(fn [& fs]\n    (fn [& vs]\n      (map #(apply % vs) fs)))","user":"516db4f6e4b046df6fbb76a0"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (vec (for [f funcs]\n             (apply f args)))))","user":"543c39e0e4b032a45b86933d"},{"code":"(fn juxtaposition [& fs]\n         (fn [& args]\n           (vec (map #(apply % args) fs))))","problem":59,"user":"4f1bee08535d64f60314647e"},{"code":"(fn soln [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"50b668dde4b08fb537db98f2"},{"code":"(fn my-juxt [& funs]\n  (fn [& args]\n    (loop [ret (vector (apply (first funs) args))\n           todo (next funs)]\n      (if todo\n        (recur (conj ret (apply (first todo) args)) (next todo))\n        ret))))","problem":59,"user":"4f08a8a2535dcb61093f6c3d"},{"code":"#(fn [& a] (for [f %&] (apply f a)))","problem":59,"user":"4e823ed7535db62dc21a62c7"},{"code":"(fn [& fs] (fn [& s] (loop [[h & t] fs, r []] \n  (if h (recur t (conj r (apply h s))) r))))","problem":59,"user":"4eabb245535d7eef30807319"},{"code":"(fn\r\n([f g] \r\n     (fn\r\n       ([] [(f) (g)])\r\n       ([x] [(f x) (g x)])\r\n       ([x y] [(f x y) (g x y)])\r\n       ([x y z] [(f x y z) (g x y z)])\r\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\r\n  ([f g h] \r\n     (fn\r\n       ([] [(f) (g) (h)])\r\n       ([x] [(f x) (g x) (h x)])\r\n       ([x y] [(f x y) (g x y) (h x y)])\r\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\r\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\r\n)","problem":59,"user":"4dd579b5535dae65d5c462ea"},{"code":"#(reduce (fn [c f] (fn [& r] (conj (apply c r) (apply f r)))) (fn [& r] []) %&)","problem":59,"user":"4ed69ea4535d10e5ff6f52e3"},{"problem":59,"code":"(fn binJuxt\n  [& fs]\n  (fn [& vals]\n    (map #(apply %1 vals) fs))\n  )","user":"5fce0cc5e4b07e53c2f3f000"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (map\n      (fn [f]\n        (apply f args)\n        )\n      functions)))","user":"5e348945e4b0650de70e2b1d"},{"code":"(fn [& fns] (fn [& args](map (fn [a](apply a args)) fns)))","problem":59,"user":"52570aeae4b0541d1855ba42"},{"problem":59,"code":"(fn [& fs]\n          (fn ([& args] (reduce #(conj  %1 (apply %2  args)) [] fs))))","user":"55aa1637e4b0988bba2ad949"},{"code":"(fn myjux\n  \n  ([] (fn [& args] nil))\n  ([a & rst]\n       (fn [& args]\n          (conj (apply(apply myjux rst) args) (apply a args)))))","problem":59,"user":"4f03154a535dcb61093f6a58"},{"code":"(fn [& fs] \n  (fn [& args]\n    (reduce (fn [coll f] (conj coll (apply f args))) [] fs)))","problem":59,"user":"52be0263e4b07a9af579230e"},{"code":"(fn [& fns]\n  (fn [& col]\n    (map #(apply % col) fns)))","problem":59,"user":"52c25645e4b07a9af579237d"},{"code":"(fn funs [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))","problem":59,"user":"4e615cd2535d8ccf87e9fe58"},{"code":"(fn juxta [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"521b339fe4b0c4ef0be83031"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply %1 args) fns)\n   )\n  )","problem":59,"user":"522d3a16e4b0e26240291d50"},{"code":"(fn [& f] (fn [& p] (map #(apply % p) f)))","problem":59,"user":"4e43b0d9535dc968683fc4a3"},{"problem":59,"code":"(fn [& f] (fn [& v] (vec (map #(apply % v) f))))","user":"4f5eda39e4b0030a34fb2b56"},{"code":"(fn j [& funcs]\n  (fn [& data]\n    (loop [fs (reverse funcs) result '()]\n      (cond (empty? (rest fs)) \n            (conj result (apply (first fs) data))\n            :else \n            (recur (rest fs) (conj result (apply (first fs) data)))\n      )\n    )\n  )\n)","problem":59,"user":"50588af1e4b06522596eba7d"},{"code":"(fn [& f]\n  (fn [& p]\n    (map #(apply % p) f)))","problem":59,"user":"513b77f3e4b00f740c76c403"},{"problem":59,"code":"(fn [& functions]\n    (fn [& parameters]\n      (map #(apply % parameters) functions)))","user":"5b67f0fbe4b0c6492753e76d"},{"problem":59,"code":"(fn [& fl]\n    (fn [& xs] (map    #(apply % xs)\n            (map (fn [f] (fn [& xs] (apply f xs)))  fl))))","user":"55c49394e4b0e31453f6499e"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (for [f fns] \n        (apply f args))))","user":"573107d5e4b0cd1946bd0fbc"},{"problem":59,"code":"(fn [& f]\n  (fn [& a] (map #(apply % a) f))\n  )","user":"55e1d34ae4b050e68259b421"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (loop [bal_fns fns\n             result []]\n        (if (empty? bal_fns)\n          result\n          (recur (rest bal_fns) (conj result (apply (first bal_fns) args)))))))","user":"5a4d656fe4b05d388ecb6ba9"},{"problem":59,"code":"(fn my-juxt\n  [ & fs]\n  (fn [ & xs]\n    (map (fn [f] (apply f xs)) fs)))","user":"5c222b7de4b07e362c230588"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) \n         fs)))","user":"53acaf1fe4b047364c04445f"},{"code":"(fn [& ops]\n  (fn [& data]\n    (for [op ops]\n      (if (seq data)\n        (apply op data)\n        (op data)))))","problem":59,"user":"4f4544e1e4b0d56e7bb92b7a"},{"problem":59,"code":"(fn f [& fs]\n  (fn [ & as] \n    (map #(apply % as) fs)))","user":"4ec1923f535dfed6da9c6db2"},{"problem":59,"code":"(fn f59 [& ops]\n  (fn [& coll] (mapv #(apply % coll) ops)))","user":"57bbc9bde4b05aa3c4741c31"},{"problem":59,"code":"(fn [& fs]\n  (fn [& as]\n    (map #(apply % as)\n         fs)))","user":"57aa4775e4b0b8559636fc6b"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5893c64ce4b00487982d524b"},{"problem":59,"code":"(fn kucing [& coll] (fn [& fns] (map #(apply % fns) coll)))","user":"58173722e4b0c0e9c07b838a"},{"problem":59,"code":"(fn mapf [& fs] (fn [& args] (map #(apply % args) fs)))","user":"55306f9de4b076ab5578f814"},{"code":"(fn [& fs]\n  (fn [& xs]\n   (map #(apply % xs) fs)))","problem":59,"user":"4e4ad154535dc968683fc4d1"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (map #(apply % xs) fns)))","problem":59,"user":"4e116e2e535d04ed9115e7c7"},{"code":"(fn [& fns]\n  (fn [& args]\n    (for [fun fns]\n      (apply fun args))))","problem":59,"user":"4e4ae5aa535dc968683fc4d2"},{"problem":59,"code":"(fn juxtaposition [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","user":"587a3babe4b01531a375eae2"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args]\n     (for [f fs]\n       (apply f args))))","user":"5724a4dae4b0c5bde472c0fe"},{"problem":59,"code":"(fn [& args]\n    (fn [& vals]\n      (for [f args]\n        (apply f vals))))","user":"53716539e4b0fc7073fd6eb1"},{"code":"(fn juxts [& funcs]\n\t(fn [& args]\n\t\t(loop [f funcs lst '()]\n\t\t\t(if (empty? f)\n\t\t\t\tlst\n\t\t\t\t(recur\n\t\t\t\t\t(butlast f)\n\t\t\t\t\t(conj lst (apply (last f) args)) \n\t\t\t\t)\n\t\t\t)\n\t\t) \n\t)\n )","problem":59,"user":"511cca27e4b00c2a1fa7ff7d"},{"problem":59,"code":"(fn x[& a] (fn[& b] ( map #(apply % b) a) ) )","user":"552800d7e4b0ffed3738f93a"},{"problem":59,"code":"(fn [& funcs]\n  #(for [f funcs] (apply f %&)))","user":"561ba3e5e4b073c65b0ce3eb"},{"code":"(fn [& fns] (fn [& args]\n  (map #(apply % args) fns)))","problem":59,"user":"4ea1b9e4535d7eef308072b8"},{"code":"(fn myjuxt [ & fs ] \n  (fn [ & args ] (map #(apply % args) fs ) ))","problem":59,"user":"5018ed15e4b011a2e0bf6412"},{"problem":59,"code":"(fn jxtpos [& fns]\n\t(fn [& args]\n\t\t(map #(apply % args) fns)))","user":"552bd5c2e4b0ffed3738f969"},{"code":"#(fn [& v] \n   (for [f %&] \n     (apply f v)))","problem":59,"user":"50e7dd5de4b077ad597af36b"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n      (map\n        (fn [f]\n          (apply f xs)\n        )\n        fs\n      )\n    )\n  )","user":"5784e177e4b0ebec4cfb74cf"},{"problem":59,"code":"(fn [& f]\n  (fn [& a] (mapv #(apply % a) f)))","user":"5b59d176e4b02d533a91bd86"},{"code":"(fn jus [& fs]\n  (fn [& params]\n    (map #(apply % params) fs)))","problem":59,"user":"5003deb9e4b0678c553fc445"},{"problem":59,"code":"(fn j [& f]\n  (fn [& a] (map #(apply % a) f)))","user":"53f77b6ae4b0de5c4184855f"},{"code":"(fn jp [& fns] \n  (fn inner [& args] (loop [fn fns result []]\n                       (if (empty? fn) result (recur (drop-last fn) (cons (apply (last fn) args) result))))))","problem":59,"user":"52e17e66e4b09f7907dd1423"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args] (for [f fns] (apply f args))))","user":"53069e16e4b02e8216869798"},{"problem":59,"code":"(fn mm-juxt [& funs]\n  #(map (fn[f] (apply f %&)) funs))","user":"5f838122e4b01aacbe7a2715"},{"code":"(fn my-juxt\n  ([f1 f2] \n    (fn\n      ([a] [(f1 a) (f2 a)])\n      ([a b] [(f1 a b) (f2 a b)])\n      ([a b & more] [(apply f1 a b  more) (apply f2 a b  more)]))\n      \n    \n    )\n  ([f1 f2 f3]\n    (fn\n     ([a] [(f1 a) (f2 a) (f3 a)])\n      ([a b] [(f1 a b) (f2 a b) (f3 a b)])\n      ([a b & more] [(apply f1 a b  more) (apply f2 a b  more) (apply f3 a b  more)]))\n  )\n)","problem":59,"user":"4e333091535deb9a81d77f25"},{"problem":59,"code":"(fn [& fns]\n(fn [& params]\n(map (fn [f] (apply f params)) fns)))","user":"53ef55eee4b0742d9025b0ca"},{"code":"(fn [& a-coll]\n  (fn [& params] (map #(apply % params) a-coll))\n  )","problem":59,"user":"50febf94e4b075812dd6dfb3"},{"problem":59,"code":"(fn my[& fns]\n  (fn[& args]\n      (map #(apply % args) fns)))","user":"539f9f79e4b0ca733b97449e"},{"problem":59,"code":"(fn [f g & fs]\n     (let [fs (list* f g fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs)))))","user":"534056fce4b085b17e897dac"},{"code":"(fn [& fns]\r\n  (fn [& args]\r\n    (reduce #(conj %1 (apply %2 args))\r\n            [] fns)))","problem":59,"user":"4fb37882e4b081705acca2a0"},{"problem":59,"code":"(fn foo [& funcs] ;the functions\n  (fn [& input_vars]\n    (loop [f funcs v input_vars r []]\n      (if (empty? f)\n        r\n        (do\n          (recur\n            (rest f)\n            v\n            (conj r\n                  (cond\n                    (string? (first v)) ((first f) (first v))\n                    (number? (first v)) (reduce (first f) v)\n                    (map? (first v)) ((first f) (first v))))))))))","user":"5cea925ce4b0a17bb84e2bd2"},{"problem":59,"code":"(fn [& fns] (fn [& col] (map (fn [f] (apply f col)) fns)))","user":"53b05a75e4b047364c044482"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs' (rest fs)\n           res [(apply (first fs) args)]]\n      (if (empty? fs')\n        res\n        (recur (rest fs') (conj res (apply (first fs') args)))))))","problem":59,"user":"519db0ede4b037b32803f9b9"},{"code":"(fn [& fs]\n  (fn [& a]\n    (map #(apply % a) fs)))","problem":59,"user":"4e7e93f5535db169f9c7971a"},{"problem":59,"code":"(fn [& fns] (fn [& vals] (map #(apply % vals) fns)))","user":"5686e652e4b0dcc4269f4059"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args) ) [] funcs)))","problem":59,"user":"504eff22e4b0e7ad84dbc4a9"},{"problem":59,"code":"(fn e [& fns] (fn [& args] (loop [h (first fns) t (rest fns) r '()] \n                             (if (= h nil) (reverse r) (recur (first t) (rest t) (cons (apply h args) r ) ) ) ) )  )","user":"53b3ea79e4b047364c0444ab"},{"code":"(fn [& fs] (fn [& v] (for [f fs] (apply f v))))","problem":59,"user":"4e6e2ac4535d5021c1a895ff"},{"problem":59,"code":"(fn [& fns]\n  (fn [& xs]\n    (map (fn [f] (apply f xs)) fns)))","user":"5947c6a6e4b07ddc2dafada7"},{"code":"(fn juxtaposition [& funcs]\n  (fn exe [& args]\n    (loop [res [(apply (first funcs) args)]\n           restfuncs (next funcs)]\n      (if (empty? restfuncs)\n        res\n        (recur (conj res (apply (first restfuncs) args)) (next restfuncs))))))","problem":59,"user":"52d7b0ade4b09f7907dd137c"},{"code":"(fn[& fncs]\n  (fn \n    ([arg] (map #(%1 %2) fncs (repeat arg)))\n    ([arg & more] (map #(reduce %1 %2) \n                   fncs (repeat (cons arg more))))))","problem":59,"user":"4e58bcd4535d8a8b8723a296"},{"problem":59,"code":"(fn [& fnlist]\n  (fn [& arglist]\n    (map #(apply % arglist) fnlist)))","user":"5627444fe4b00e49c7cb47cd"},{"code":"(fn [& fs]\n    (fn [& args]\n      (loop [ret [] fs fs]\n        (if fs\n          (recur (conj ret (apply (first fs) args)) (next fs))\n          ret))))","problem":59,"user":"52a32876e4b04e0c58e87bfb"},{"code":"(fn jx [& fns]\n    (fn [& args]\n      (map #(apply % args) fns)))","problem":59,"user":"5338387de4b0e30313ee6c91"},{"code":"(fn p59s [& args]\n  (fn [& a]\n    (loop [res []\n           fs args]\n      (if (empty? fs)\n        res\n        (recur (conj res (apply (first fs) a)) (rest fs))\n        )\n      )\n    )\n  )","problem":59,"user":"4f63777be4b0defedf855fe4"},{"problem":59,"code":"(fn mj [first-function & f-coll] (if (zero? (count f-coll)) first-function (let [outrest (apply mj f-coll) outfirst ( mj first-function)] (fn [& args] (flatten (list (apply outfirst args) (apply outrest args))) ) ) ) )","user":"56c4f971e4b05cc29241ee9d"},{"code":"(fn [& fs] (fn [& args] (vec (map #(apply % args) fs))))","problem":59,"user":"4dbd0161535d020aff1edf3f"},{"code":"(fn [& fs]\r\n  (fn [& c]\r\n    (map #(apply %1 c) fs)))","problem":59,"user":"4dbad895535d1e037afb21ae"},{"problem":59,"code":"(fn [& fs] (fn [& args] (map #(apply % args) fs)) )","user":"5280a1ece4b0757a1b171407"},{"code":"(fn [& f]\n     (fn [& a]\n         (map #(apply % a) f)))","problem":59,"user":"4db8f6c4535d1e037afb219e"},{"code":"(fn [& fns]\r\n       (fn [& args]\r\n         (do\r\n           (println args)\r\n           (println fns)\r\n           (reduce #(conj %1 (apply %2 args)) [] fns))))","problem":59,"user":"4dbe19fe535d020aff1edf59"},{"problem":59,"code":"(fn [& xs]\n  (fn [& ys] (map #(apply % ys) xs)))","user":"5b72b36ce4b047b03b2036a9"},{"problem":59,"code":"(fn solve [f & fs]\n  (if (= fs nil) \n    #(list (apply f %&))\n    #(conj (apply (apply solve fs) %&) (apply f %&))\n  )\n)","user":"56f258d3e4b04a395b9a04a1"},{"code":"(fn juxtapose [& fns]\n  (when (seq fns)\n    (fn [& xs]\n      (map #(apply %1 xs) fns))))","problem":59,"user":"4e691c79535d8ccf87e9fe97"},{"code":"(fn myjuxt [& fns]\n  (fn it [& args] \n    (map #(apply % args) fns))\n)","problem":59,"user":"501c2dfce4b0539218e73b39"},{"problem":59,"code":"(fn j [& fns] (fn [& args] (map #(apply % args) fns)))","user":"56d68cbae4b0ea9b8538f7cd"},{"code":"(fn [& f]\r\n  (fn [& a]\r\n\t    (loop [c f r []]\r\n\t       (if (empty? c)\r\n\t\t   r\r\n\t\t   (recur (rest c) (conj r (apply (first c) a)))))))","problem":59,"user":"4e821ca5535db62dc21a62c2"},{"code":"#(fn [& a]\n  (loop [r [(apply (first %&) a)]\n         c (rest %&)]\n    (if (empty? c)\n      r\n      (recur (conj r (apply (first c) a)) (rest c)))))","problem":59,"user":"50c9ece0e4b0a409464667d8"},{"problem":59,"code":"(fn [& fun]\n  (fn [& xs]\n    (map #(apply % xs) fun)))","user":"54487527e4b032a45b8693cc"},{"problem":59,"code":"(fn [& fs]\n    (fn [& xs]\n      (loop [fs fs ys []]\n        (if (empty? fs)\n          ys\n          (recur\n           (rest fs)\n           (conj ys (apply (first fs) xs)))))))","user":"58b81490e4b0ebc645576d8c"},{"code":"(fn [& s](fn [& args](map #(apply  % args)s)))","problem":59,"user":"52bbd09ee4b07a9af57922ee"},{"problem":59,"code":"(fn [& fns] (fn [& vs] (map #(apply % vs) fns)))","user":"591addcee4b09b4ee5954be1"},{"problem":59,"code":"(fn [& fs]\n      (fn [& args]\n          (vec (map #(apply % args) fs))))","user":"4f867b25e4b033992c121c51"},{"problem":59,"code":"(fn c59 [& funs]\n  (fn [& args]\n    (map #(apply %1 args) funs)))","user":"57d0cd58e4b0bd073c20235e"},{"code":"(fn [& func]\n     (fn [& l]\n       (next(reduce \n         #(concat\n            %1\n            [(apply %2 (first %1))])\n         [l] func))))","problem":59,"user":"503efe01e4b06c4e0e1fa26f"},{"problem":59,"code":"(fn [& fs]\n    (fn [& input-data] (map #(apply % input-data) fs))\n    )","user":"56ef11efe4b04a395b9a045b"},{"problem":59,"code":"(fn [& fns]\n(fn [& args]\n(into [] (map (fn [f] (apply f args)) fns))))","user":"56903cb9e4b0dcc4269f40eb"},{"problem":59,"code":"(fn jux [& fs]\n   (fn inner [& args]\n    (for [f fs]\n      (apply f args))))","user":"59503c5de4b066ee0a44ae8e"},{"code":"(fn juxt_ [& fs]\n  (fn [& args]\n    (loop [fs_ fs acc []]\n      (if (empty? fs_)\n        acc\n        (recur (rest fs_) (conj acc (apply (first fs_) args)))))))","problem":59,"user":"4f50c414e4b03ad3f0c10d0d"},{"code":"(fn my-juxt [& fs]\n      (fn [& args]\n          (map #(apply % args) fs)))","problem":59,"user":"5186134ce4b0da5a5be3bac7"},{"code":"(fn [& i]\n    #(map (fn [f] (apply f %&)) i))","problem":59,"user":"4e7e05a6535db169f9c796fe"},{"problem":59,"code":"(fn [& coll]\n    (fn\n      ([param]\n       (map #(% param) coll))\n      ([fst & params]\n       (map #(reduce % (cons fst params)) coll))\n\n      )\n\n    )","user":"5ab575f8e4b073f17744263d"},{"code":"(fn [& l] (fn [& y] (reduce (fn [a f] (cons (apply f y) a)) [] (reverse l))))","problem":59,"user":"4e7f4147535db966e863cc3d"},{"code":"(fn [& fns] (fn [& args] (reduce (fn [acc f] (conj acc (apply f args))) [] fns)))","problem":59,"user":"52c1f404e4b07a9af5792370"},{"code":"(fn [& funs]\n  (fn [& xs]\n    (map #(apply % xs) funs)))","problem":59,"user":"4e4c238f535dc968683fc4dc"},{"problem":59,"code":"(fn [& fns] (fn [& args] (reduce #(conj % (apply %2 args)) [] fns)  ))","user":"55ed962ae4b0121d4835fddd"},{"code":"(fn [& args]\n  (fn [& innerArgs]\n    (map #(apply % innerArgs) args)))","problem":59,"user":"525d490ae4b0cb4875a45d70"},{"problem":59,"code":"(fn [& fs]\n (fn [& ps]\n  (reduce #(conj %1 (apply %2 ps)) [] fs)\n  )\n )","user":"56f974c0e4b07572ad1a88b1"},{"code":"; f - functions\n; v - values\n(fn [& f] (fn [& v] (map #(apply % v) f)))","problem":59,"user":"52f1bc81e4b05e3f0be25eef"},{"code":"(fn [& fs]\n  (fn [& args]\n  (loop [res (conj [] (apply (first fs) args)) fs (next fs)]\n    (if fs (recur (conj res (apply (first fs) args)) (next fs))\n      res))))","problem":59,"user":"52a69e06e4b0c58976d9ac04"},{"problem":59,"code":"(fn [& fs]\n  \n  (fn [& args]\n  \n  \t(loop [res [] tail fs]\n      \n      (let [head (first tail)]\n        \n        (if (nil? head)\n          ; TO DO?\n          res\n          \n          (recur (conj res (apply head args)) (rest tail))\n          \n          ) ; if end\n        \n        ) ; let end   \n      ) ; loop end\n  \t) ; fn end\n  ) ; fn end","user":"5ff676a9e4b06df49cee1497"},{"code":"(fn [& ops]\n  (fn [& args]\n    (map #(apply % args) ops)))","problem":59,"user":"4ed8b598535d10e5ff6f52fc"},{"problem":59,"code":"(fn [ & functions]\n  (fn [& args]\n    (letfn [(helper [funs acc]\n                    (if (empty? funs)\n                      acc\n                      (helper (rest funs)\n                              (concat acc\n                                      [(apply (first funs) args)]))))]\n      (vec (helper functions [])))))","user":"5be58beae4b0ed4b8aab4d14"},{"problem":59,"code":"(fn jux [& funcs]\n  (fn [& rest]\n    (map #(apply % rest) funcs)))","user":"56f53962e4b046a417f9206c"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (mapv (fn [f] \n            (apply f args)) fns)))","user":"60836285e4b0736b099e42e4"},{"problem":59,"code":"(fn outer-fun [& funs] \n    (fn inner-fun [& args] \n      (reduce #(conj %1 (apply %2 args)) [] funs)))","user":"50e1bdd8e4b019fc399ce17f"},{"problem":59,"code":"(fn juxtaposition [& fs]\n  (fn [& args]\n    (if (> (count args) 0)\n      (map\n        (fn [f] (apply f args))\n        fs)\n      (map\n        #(% (first args))\n        fs))))","user":"5984e7dee4b021a7a535fe43"},{"problem":59,"code":"(fn [& fs]\n  #(mapv (fn [f] (apply f %&)) fs))","user":"51dafedee4b09f6bc204eee2"},{"problem":59,"code":"(fn juxt-fn [f & more]\n  (fn [x & y]\n    (map\n      (fn [fx] (if y (apply fx (cons x y)) (fx x)))\n      (cons f more)\n      )\n    )\n  )","user":"5708e8f6e4b0b0fb43fd06a4"},{"problem":59,"code":"(fn juxtapos [& fns]\n  (fn [& args]\n    (map\n     (fn [f]\n       (apply f args)) fns)))","user":"5be1c6c6e4b0ed4b8aab4ca5"},{"problem":59,"code":"(fn [& a]\n     (fn [& b] (map #(apply % b) a) ))","user":"5382704be4b06839e8705ed4"},{"code":"(fn [& fs]\n  (letfn [(ccc ([f1 f2] (fn [& more] [(apply f1 more) (apply f2 more)]))\n               ([f1 f2 f3] (fn [& more] [(apply f1 more) (apply f2 more) (apply f3 more)])))]\n   (apply ccc fs)\n    ))","problem":59,"user":"52fcfeeee4b047fd55837027"},{"code":"(fn \n   ([f] (fn [& args] [(apply f args)]))\n   ([f g] (fn [& args] [(apply f args) (apply g args)]))\n   ([f g h] (fn [& args] [(apply f args) (apply g args) (apply h args)]))\n)","problem":59,"user":"4f2aff4de4b0d6649770a044"},{"problem":59,"code":"(fn myJux [& fnctns] (fn [& args] (map #(apply % args) fnctns)))","user":"542c1f73e4b0dad94371f29d"},{"code":"(fn [& f] (fn [& args] (map apply f (repeat args))))","problem":59,"user":"5201572be4b0d7096e99ddbb"},{"problem":59,"code":"(fn\n  [& fs]\n    (fn [& args]\n      (mapv #(apply % args) fs)))","user":"548db64ce4b0e286459a121c"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4ed188c8535d44c135fd68cf"},{"problem":59,"code":"(fn f [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n   )\n)","user":"5c219c0fe4b07e362c230581"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce\n      #(conj %1 (apply %2 args))\n      []\n      fns\n    )\n  )\n)","problem":59,"user":"507eddf4e4b06ce648bcdbfa"},{"problem":59,"code":"(fn f\n\t[& fl]\n\t(fn [& d]\n\t\t(map #(apply % d) fl)))","user":"54a11042e4b09f271ff37c49"},{"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply %1 %2) funs (repeat args))))","problem":59,"user":"51df825de4b01188f062752b"},{"problem":59,"code":"(fn sk-juxt [& fns]\n  (fn [& xs]\n    (map #(apply % xs) fns)))","user":"51d42f44e4b013d740b70ddb"},{"problem":59,"code":"(fn [& fs]\n  (fn [& vs]\n    (for [f fs]\n      (apply f vs))))","user":"54b2ec84e4b09f271ff37d33"},{"code":"(fn jxt [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)))","problem":59,"user":"5315ec83e4b08068f379ed39"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n        (for [f funcs]\n            (apply f args))))","user":"54fdaeace4b07d26eda61d39"},{"problem":59,"code":"(fn [& ff]\n    (fn [& s] (map #(apply % s) ff)))","user":"529dfc6de4b04e0c58e87b8a"},{"code":"(fn [& s] (fn [& a] (map #(apply % a) s)))","problem":59,"user":"4ea41fc2535d7eef308072cb"},{"problem":59,"code":"(fn mejuxt [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))))","user":"5532a04ee4b09218d5f44f82"},{"problem":59,"code":"(fn [& args]\n   (fn [& arg1]\n      (map #(apply % arg1) args)))","user":"564d3169e4b0284900eef67c"},{"problem":59,"code":"(fn juxtapose [& args]\n  (fn [& params] (map #(apply % params) args)))","user":"585d9558e4b0f14aab7c879c"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fs)))\n\n;; I've seen aother very nice solution to this.\n;; Mapping over the functions with \"apply\":\n\n#_(fn [& fs]\n    (fn [& args]\n      (map #(apply % args) fs)))\n\n;; 2)","user":"59a080e3e4b0871e7608b837"},{"problem":59,"code":"(fn [& functions]\n    (fn [& args]\n      (map #(apply % args) functions)))","user":"59932f49e4b0b211ea3aaaae"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (vec (for [f fs]\n           (apply f args)))))","user":"5fada7cce4b08cb800c85af5"},{"problem":59,"code":"(fn [& fs] \n  (fn [& args] \n    (map #(apply %1 args) fs)\n  )\n)","user":"543bb568e4b032a45b869334"},{"code":"(fn [& fs] (fn [& s] (map #(apply % s) fs)))","problem":59,"user":"4eecdd66535d93acb0a668b9"},{"problem":59,"code":"(fn j [& fs]\n (fn [& xs]\n  (map #(apply % xs) fs)))","user":"55597b84e4b0deb715856e36"},{"problem":59,"code":"(fn [& x]\n  (fn inner [& y]\n     (loop [result []\n             order x]\n      (if (empty? order) \n        result\n        (recur (conj result (apply (first order) y)) \n               (rest order))))))","user":"55c77070e4b0e31453f649d0"},{"problem":59,"code":"(fn [& f] (fn [& args] (map #(apply %1 args) f)))","user":"5b100648e4b0cc2b61a3be17"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n    )\n  )","problem":59,"user":"53767991e4b06839e8705e25"},{"problem":59,"code":"(fn [& fs]\n  (fn [& topArgs]\n    (map #(apply % topArgs) fs)))","user":"586bc870e4b01531a375e964"},{"code":"#(fn [& r] (map apply %& (repeat r)))","problem":59,"user":"536e0930e4b0fc7073fd6e66"},{"code":"(fn [& f]\n    (fn [& a]\n      (map #(apply % a) f)))","problem":59,"user":"4f39f902e4b0e243712b1efe"},{"code":"(fn [& fs]\n    (fn [& x]\n      (if (= (count x) 1)\n        (map #(% (first x)) fs)\n        (map\n         #(reduce % x)\n         fs)\n        )\n      )\n    )","problem":59,"user":"52586d24e4b0cb4875a45cb0"},{"code":"(fn [& fns]\n  (fn [& params]\n    (map #(apply % params) fns)))","problem":59,"user":"5048202fe4b0ec70b3ef8d9a"},{"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  )\n)","problem":59,"user":"52b49aebe4b0c58976d9ad2b"},{"code":"(fn juxt* [& fns]\n  (fn f* [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"51d662fce4b0154f82ab92ef"},{"problem":59,"code":"(fn my-juxt [& f]\n  (fn [& args]\n    (map #(apply % args) f)))","user":"543d5c61e4b032a45b86934d"},{"code":"#(let [funclist %&]\n  (fn[& x](map (fn[y](apply y x)) funclist)))","problem":59,"user":"4ed2dd98535d44c135fd68e2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& ps] (map #(apply % ps) fs)))","user":"57395f32e4b0cd1946bd1070"},{"problem":59,"code":"(fn [& fs] (fn [& v] (map #(apply % v) fs)))","user":"50784ae5e4b0fc74642bff68"},{"problem":59,"code":"(fn [& argfuncs]\n  (fn [& args]\n    (map #(apply % args) argfuncs)))","user":"53573d70e4b04ce2eb3ed278"},{"problem":59,"code":"(fn my-juxt [& funs]\n  (fn [& args]\n    (map #(apply % args) funs)\n  )\n)","user":"5700f1f0e4b08d47c97781ce"},{"code":"(fn [& funcs]\n   (fn [& args]\n     (mapv #(apply % args) funcs)))","problem":59,"user":"520fff3ce4b080a8d9b9d633"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [acc f] (conj acc (apply f args))) [] fns)))","user":"55c1eb52e4b0e31453f64970"},{"code":"(fn t1 [& xs]\n        ( fn [ & args]\n          ( for [ x xs ] ( apply x args))))","problem":59,"user":"5225b16de4b0d2f5d1e2c0ed"},{"problem":59,"code":"(fn juxt-ms2\n  [& fncs]\n  (fn [& args] (map #(apply % args) fncs)))","user":"561ca6ebe4b064ca9f4b169c"},{"problem":59,"code":"(fn my-juxt [& fs]\n    (fn ret [& args]\n      (map #(apply % args) fs)))","user":"4dfe5a93535d04ed9115e786"},{"problem":59,"code":"(fn [& x] (fn [& y] (reduce #(conj %1 (apply %2 y)) [] x)))","user":"57dafe97e4b0bd073c20241c"},{"problem":59,"code":"(fn my[& fns]\n  (fn [& a] (map #(apply % a) fns)))","user":"561c0278e4b064ca9f4b1691"},{"problem":59,"code":"(fn [& coll] (fn [& fns] (map #(apply % fns) coll)))","user":"58e256e1e4b005f69f193c90"},{"code":"(fn [& fns]\n  (fn [& args]\n  (vec (map #(apply % args) fns))))","problem":59,"user":"4e6a4edd535d8ccf87e9fec4"},{"code":"(fn [ & f]\n  (fn [ & args]\n    (map #(apply % args) f)))","problem":59,"user":"500b61b1e4b03d00572d2d81"},{"problem":59,"code":"(fn juxt' [& fns] \n (fn [& args] (map (fn [f] (apply f args)) fns)))","user":"60b616e1e4b0e0fa5f1b4243"},{"problem":59,"code":"(fn [& fns]\n           (fn [& args]\n             (map (fn [f] (apply f args)) fns)))","user":"530b8580e4b02e82168697cc"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n        (for [f fns] (apply f args))))","user":"5eff6c0ee4b0cf489e8d7f11"},{"code":"(fn [& f] \n  (fn [& m]\n    (for [g f] (apply g m))\n  )\n)","problem":59,"user":"4f1595da535d64f603146444"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (for [f funcs]\n      (apply f args))))","problem":59,"user":"531d34cfe4b08068f379edac"},{"code":"(fn myjuxt [& fs]\n  (fn [& args]\n    ((fn rec-func [xs]\n       (cond (empty? xs) []\n             true (cons (apply (first xs) args) (rec-func (rest xs))))) fs)))","problem":59,"user":"4ef6f5ea535dced4c769f250"},{"code":"(fn [& fs]\n  (fn [& a] (map (fn [f] \n    (apply f a)) fs)))","problem":59,"user":"4daa374930acd6ed13482a68"},{"problem":59,"code":"(fn [& cf] (fn [& cv]\n            (vec (for [f cf]\n                   (apply f cv)\n            ))))","user":"55adf4d7e4b03311e7b732af"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (into [] (map (fn [f] (apply f args)) fns))))","user":"605f5c69e4b03746e80ebf5e"},{"code":"(fn [& funs]\n  (fn [& c]\n    (map #(apply % c) funs)))","problem":59,"user":"520612a7e4b0bf4f1882c81c"},{"code":"(fn [& fs](fn [& args] (map #(apply %1 args) fs)))","problem":59,"user":"51efa6a6e4b0249c592fbde8"},{"code":"(fn[& fns] (fn[& x] (reduce (fn [acc i] (conj acc (apply i x)) ) [] fns)) )","problem":59,"user":"531bfb69e4b08068f379ed97"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (map #(apply %1 args) funcs)))","problem":59,"user":"534941d1e4b084c2834f4a60"},{"problem":59,"code":"(fn juxt2 [& functions]\n  (fn [& arguments]\n    (map #(apply % arguments) functions)))","user":"541f5b37e4b01498b1a71a97"},{"code":"(fn jxf\n  [& fns]\n  (fn [& xs]\n    (for [f fns]\n      (apply f xs))))","problem":59,"user":"4fe89297e4b07c9f6fd12c4c"},{"problem":59,"code":"(fn myjuxt \n  ([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)]))))\n\n;(fn [& fs]\n;  (fn [& p]\n;    (map #(apply % p) fs)))","user":"55ed1dc5e4b0121d4835fdd4"},{"code":"(fn [& f] #(for [f f] (apply f %&)))","problem":59,"user":"4f03857e535dcb61093f6b0d"},{"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (for [f fns] (apply f args))))","problem":59,"user":"51b76227e4b0d906fcd71d35"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (loop [acc () fr (reverse fs)]\n        (if (empty? fr)\n          acc\n          (recur (cons (apply (first fr) args) acc) (rest fr))))))","user":"5d1bbef0e4b02ea6f0fb6984"},{"problem":59,"code":"(fn [& fs] (let [fz (fn[& args] (mapv (fn[f] (apply f args)) fs))] partial fz))","user":"568820e8e4b0dcc4269f4067"},{"code":"(fn juxt2\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  )\n)","problem":59,"user":"50e3ec87e4b0463d32072486"},{"code":"(fn [ & f ]\n (fn [ & x ] \n  (map #(apply % x) f)\n  )\n)","problem":59,"user":"4fdd27f3e4b05e33b9224f78"},{"code":"(fn [& fs] \n  (fn [& args] \n    (for [f fs] (apply f args))))","problem":59,"user":"4fe84c74e4b07c9f6fd12c3c"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn\n    [& numbers]\n    (map #(apply % numbers) fns)))","user":"58a1d00ae4b02bd94d917ec6"},{"code":"(fn [& fs]\n  (let [v []]\n    (fn [& args]\n      (loop [v  (conj v (apply (first fs) args))   \n             fs (next fs)]\n       (if fs\n          (recur (conj v (apply (first fs) args)) (next fs))\n           v)))))","problem":59,"user":"4ef992c8535dced4c769f268"},{"problem":59,"code":"(fn [& fs]\n         (fn [& params ] (map #(apply % params) fs)) \n          )","user":"533c2605e4b0e30313ee6cd7"},{"problem":59,"code":"(fn my-jux [& funcs]\n\t(fn my-jux-in [& args]\n\t\t(map #(apply % args) funcs)))","user":"53858594e4b06839e8705f05"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (for [f fns] ( apply f args ))\n    )\n  )","user":"5edc16e1e4b0c7845d86b0f1"},{"problem":59,"code":"(fn [& args]\n  (fn [& vargs]\n    (map (fn [f] (apply f vargs)) args)))","user":"55b66ebce4b01b9910ae2996"},{"code":"(fn [& f] \n  (fn [& x] (map #(apply % x) f)))","problem":59,"user":"4f03822f535dcb61093f6b03"},{"problem":59,"code":"(fn juxtaposition\n  [& fns]\n  (fn\n    [& args]\n    (map apply fns (repeat args))))","user":"506f0968e4b09350ab4199f5"},{"code":"(fn j [& fns]\n  (fn r [& args]\n    (into []\n          (map #(apply % args) fns))))","problem":59,"user":"4e842ebb535db62dc21a62df"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (reduce\n     (fn [acc f] (conj acc (apply f xs)))\n     []\n     fs)))","user":"56483562e4b0284900eef629"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (map #(apply % xs) fns)\n  )\n)","problem":59,"user":"4e6e10d8535d5021c1a895fd"},{"code":"(fn \n  ([f] \n     (fn\n       ([] [(f)])\n       ([x] [(f x)])\n       ([x y] [(f x y)])\n       ([x y z] [(f x y z)])\n       ([x y z & args] [(apply f x y z args)])))\n  ([f g] \n     (fn\n       ([] [(f) (g)])\n       ([x] [(f x) (g x)])\n       ([x y] [(f x y) (g x y)])\n       ([x y z] [(f x y z) (g x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args)])))\n  ([f g h] \n     (fn\n       ([] [(f) (g) (h)])\n       ([x] [(f x) (g x) (h x)])\n       ([x y] [(f x y) (g x y) (h x y)])\n       ([x y z] [(f x y z) (g x y z) (h x y z)])\n       ([x y z & args] [(apply f x y z args) (apply g x y z args) (apply h x y z args)])))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))","problem":59,"user":"4eb0afed535d7eef3080733e"},{"code":"(fn [& fs]\n  (fn [& params]\n    (map #(apply % params) fs)))","problem":59,"user":"5021f0b3e4b00bba4502f7ac"},{"problem":59,"code":"#(fn [& x] (reduce (fn [a b] (conj a (apply b x))) [] (seq %&))\n  )","user":"5bb23cf1e4b0a20761a2350a"},{"code":"(fn [& funcs] \n  (fn [& args]\n    (map #(apply % args) funcs)))","problem":59,"user":"4f2acb29e4b0d6649770a040"},{"code":"(fn [& fs]\n    (fn [& g]\n      (map #(apply %1 %2) fs (repeat g))))","problem":59,"user":"4e705861535d5021c1a89635"},{"problem":59,"code":"(fn [& fns]\n      (fn [& args] (map #(apply % args) fns)))","user":"55f09e7be4b06e875b46ce28"},{"problem":59,"code":"(fn [& fs]\n    (fn [& x]\n      (for [f fs]\n        (apply f x))))","user":"59385840e4b02506e01a29c9"},{"problem":59,"code":"(fn my-juxt \n  ([f] (fn [& x] [(apply f x)]))\n  ([f & fs] (fn [& x] (concat [(apply f x)] (apply (apply my-juxt fs) x)))))","user":"53ae0c50e4b047364c044471"},{"problem":59,"code":"(fn myjuxt [f & fs]\n  (if (empty? fs)\n    (fn a [& args] [(apply f args)])\n    (fn b [& args] (cons (apply f args) (apply (apply myjuxt fs) args)))\n   )\n )","user":"57cf03c0e4b00451144b04f9"},{"code":"(fn [& fs] \n  (fn [& args]\n    (for [f fs] (apply f args))))","problem":59,"user":"4f3cc2fbe4b0e243712b1f55"},{"code":"(fn [& fs] \n  (fn [& args] \n    (map #(apply % args) fs)))","problem":59,"user":"51e58e02e4b0efabf93c02d0"},{"problem":59,"code":"(fn [& funs]\n  (fn [& params]\n    (map #(apply %1 params) funs)))","user":"53fc88e7e4b0de5c418485be"},{"problem":59,"code":"(fn [& l]\n  (fn [& x]\n    (for [i l] (apply i x))\n    )\n  )","user":"53aef31ce4b047364c04447b"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args)\n         fs)))","user":"58fed70de4b0438e51c2cfdd"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (map (fn [fun] (apply fun args)) funs)))","user":"5456e4e7e4b080a794c2c883"},{"code":"(fn [& fncs]\n  (fn [& args]\n    (map #(apply % args) fncs)\n    )\n  )","problem":59,"user":"525372ade4b0541d1855b8f3"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args] (map #(apply %1 args) fns)))","user":"60c91f48e4b0e0fa5f1b4304"},{"code":"(fn\n  [& fns]\n  (fn\n    [& args]\n    (map #(apply % args) fns)\n  )\n)","problem":59,"user":"5162757ee4b03cfa3774b3fe"},{"problem":59,"code":"(fn my-juxt [& fns]\r\n  (fn [& things-to-be-juxt]\r\n    (map (fn [a-fn]\r\n           (apply a-fn things-to-be-juxt))\r\n         fns)))","user":"58f2e8fbe4b0438e51c2ce94"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n      (reduce #(conj % (apply %2 args)) [] fns)))","user":"532f8569e4b019098a6f8b4f"},{"problem":59,"code":"(fn juxtapose [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"5b857411e4b047b03b2037ce"},{"problem":59,"code":"(fn [& more]\n  (fn [& args]\n    (map #(apply %1 args) more)))","user":"53da059be4b0e771c302547e"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (map (fn [func] (apply func args)) funcs)))","problem":59,"user":"50630247e4b05ac47bc68d6b"},{"problem":59,"code":"(fn [& fn-list]  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fn-list)))","user":"54cad2d5e4b057c6fda3a26c"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args] (let [_ (println fns)]\n                 (reduce #(conj %1 (apply %2 args)) [] fns)))\n)","user":"54c13b87e4b0ed20f4ff6f20"},{"problem":59,"code":"(fn jx [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"541ef7e2e4b01498b1a71a92"},{"code":"(fn my-juxt\n  [& fs]\n  (fn [& args] (for [f fs] (apply f args))))","problem":59,"user":"5300b750e4b0d8b024fd3711"},{"problem":59,"code":"(fn [& fs]\n      #(map (fn [f] (apply f %&)) fs))","user":"59e0f38ae4b08badc2a0c500"},{"code":"(fn [& fs]\r\n  (fn [& args]\r\n    (map (fn [f]\r\n           (apply f args))\r\n         fs)))","problem":59,"user":"4de2f44f535d08e6dec9fdec"},{"problem":59,"code":"(fn __ [& fns]\n             (fn [& args]\n               (mapv #(apply % args) fns)))","user":"56706f01e4b0a866af6896f2"},{"problem":59,"code":"(fn sol [& fs] (fn [& args] (map #(apply % args) fs)))","user":"54857657e4b0e286459a11ac"},{"problem":59,"code":"(fn [& fns]\n            (fn [& vs]\n              (for [g fns]\n                (apply g vs))))","user":"53684a2fe4b0243289761e8c"},{"problem":59,"code":"(fn [& fncs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fncs)\n  )\n)","user":"558fec41e4b0277789237666"},{"code":"(fn [& fns]\n (fn [& x] (map (fn [f] (apply f x)) fns)))","problem":59,"user":"5047782ce4b0371827a27bc2"},{"problem":59,"code":"(fn [& functions] (fn [& args] (for [f functions]\n                                   (apply f args))))","user":"59ba2ea0e4b0a024fb6ae3e1"},{"problem":59,"code":"(fn [& ops] (fn [& args] (map #(apply % args) ops)))","user":"53d86564e4b0e771c302546b"},{"code":"(fn juxta [& f]\n  (fn [& arg]\n    (loop [f f, acc [] ]\n      (if (empty? f) acc\n        (recur (rest f) (conj acc (apply (first f) arg)))))))","problem":59,"user":"5224a46ce4b01819a2de42e5"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& xs]\n    (reduce #(conj %1 (apply %2 xs)) [] fns)))","user":"5c9a638fe4b048ec896c5aae"},{"problem":59,"code":"(fn juxtapose\n  [& functions]\n  (fn [& args]\n    (loop [[h & t] functions\n           accum []]\n      (if (nil? t)\n          (conj accum (apply h args))\n          (recur t (conj accum (apply h args)))))))","user":"58152157e4b0f478707a0631"},{"code":"(fn [& fns]\n  (fn [& args]\n    (loop [fs fns acc []]\n      (if (empty? fs)\n        acc\n        (recur (rest fs) (conj acc (apply (first fs) args)))))))","problem":59,"user":"4f26d6d9e4b0d6649770a007"},{"problem":59,"code":"(fn [& fs] \n  (fn [& xs]\n    (for [f fs] (apply f xs))))","user":"5e2549c8e4b05b4b0151615f"},{"problem":59,"code":"(fn \n  [& fs]\n  (fn [& c]\n    (for [f fs]\n      (apply f c))))","user":"51a4d802e4b0def3c5c5869a"},{"code":"(fn juxt2 [& fns]\n  (fn [& args]\n    (map #(apply % args) fns))\n  )","problem":59,"user":"52ffb7f2e4b0d8b024fd370b"},{"problem":59,"code":"(fn [& fs]\n    (fn [& x]\n      (map #(apply % x) fs)))","user":"53dcdde4e4b0d874e779ae24"},{"problem":59,"code":"(fn [& fns] (fn [& args]  (map #(apply % args) fns)))","user":"5ca03402e4b048ec896c5b68"},{"code":"(fn my-jutx [& fs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fs)))","problem":59,"user":"52f8f4d1e4b047fd55836fde"},{"problem":59,"code":"(fn [& coll] (fn [& ll] (map #(apply % ll) coll)))","user":"59cf4013e4b0ef0a1e9b5b68"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map\n     (fn [fun]\n       (apply fun args))\n     fns)))","user":"554bd33ce4b0a04f7929959a"},{"problem":59,"code":"(fn my-juxt\n  [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","user":"572db6d5e4b0cd1946bd0f78"},{"code":"(fn [& fs]\n  (fn [& vs]\n    (map #(apply % vs)\n     fs)))","problem":59,"user":"5092fe10e4b097f48cc3857e"},{"problem":59,"code":"(fn\n [& fns]\n (fn\n  [& args]\n  (map\n   (fn\n    [f]\n    (apply\n     f\n     args))\n   fns)))","user":"56403765e4b08d4f616f5edc"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply % args) funs))\n  )","user":"53c1ce3ee4b00fb29b221268"},{"problem":59,"code":"(fn [& fs]\n  (fn [ & xs]\n    (for [f fs]\n        (apply f xs)\n      )\n    )\n  )","user":"5c17467fe4b01240ff5671df"},{"code":"(fn [& fx] (fn [& xs] (loop [fx fx ret []] (if (seq fx) (recur (rest fx) (conj ret (apply (first fx) xs))) ret))))","problem":59,"user":"4db5082e535d87e67b28fe03"},{"code":"(fn j [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4fb79872e4b081705acca2d2"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (reduce (fn [res f] \n              (conj res (apply f args)))\n            []\n            fs)))","user":"578cf84ce4b0ebec4cfb7562"},{"problem":59,"code":"(fn f [& fs]\n  (fn iter [& args]\n    (loop [res (conj [] (apply (first fs) args))\n           args args\n           fs (rest fs)]\n      (if (empty? fs) \n        res \n        (recur \n         (conj res (apply (first fs) args)) \n        \targs \n        \t(rest fs))\n      )\n   )\n  ))","user":"60471241e4b02d28681c77c9"},{"problem":59,"code":"(fn [& fns]\n                              (fn [& args]\n                                  (reduce\n                                   (fn [results f]\n                                    (conj results (apply f args)))\n                                    (vector)\n                                   fns)))","user":"5957cc41e4b066ee0a44af76"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args]\n    (let [init (vector (apply (first fns) args))\n          rest-of-fns (drop 1 fns)]\n      (reduce\n        (fn [acc curr]\n          (conj acc (apply curr args )))\n        init\n        rest-of-fns))))","user":"5d1c14cde4b02ea6f0fb698a"},{"code":"(fn cmp [& funcs]\r\n  (fn [& args]\r\n    (map #(apply % args) funcs)))","problem":59,"user":"4ff201d7e4b0678c553fc330"},{"code":"(fn [& fs]\n  (fn [& as]\n    (for [f fs]\n      (apply f as))))","problem":59,"user":"525ab6cfe4b0cb4875a45cf9"},{"code":"(fn [& f]\n  (fn [& p] \n    (map #(apply % p) f)))","problem":59,"user":"4e5c801e535d8a8b8723a2c1"},{"problem":59,"code":"(fn [& fs]\n  (fn  [& a]\n    (loop [ res []  rf fs ]\n      (if (empty? rf)\n        res\n        (recur (conj res  (apply (first rf)  a)   )  (rest rf) )\n        )\n      )\n    )\n  )","user":"5735ac67e4b0cd1946bd102b"},{"problem":59,"code":"(fn juxtaposition [& fs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] fs)))","user":"5d931a58e4b0d3f9b434ad10"},{"problem":59,"code":"(fn [& x]\n    #(let [args %&]\n       (map (fn [y] (apply y args)) x)))","user":"53a5c7ffe4b0ef122a8689c4"},{"problem":59,"code":"(fn [& f]\n    (fn [& d]\n      (map #(apply % d) f)))","user":"4e38f245535deb9a81d77f3e"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs]\n    (for [f fs]\n      (apply f xs))\n    )\n  )","user":"53ef7f77e4b0742d9025b0ce"},{"problem":59,"code":"(fn v [& in] \n  (fn [& args]\n    (loop [f in r ()]\n      (if (empty? f) \n        (vec r)\n        (recur\n         (rest f)\n         (concat r (list (apply (first f) (vec args)))))))))","user":"587c59d1e4b01531a375eb17"},{"code":"(fn [& f]\n  (fn [& l]\n    (map #(apply % l) f)))","problem":59,"user":"4ff5744ae4b0678c553fc36a"},{"code":"(fn __ [& fs]\n  (fn [& args] \n    (map #(apply % args) fs)))","problem":59,"user":"52828298e4b0757a1b17145b"},{"code":"(fn [& funcs]\n  (fn [& args]\n    (vec \n      (for [f funcs]\n        (apply f args)))))","problem":59,"user":"4f7e29dde4b06e829148e1ca"},{"code":"(fn [& p]\n  (fn [& a] (map #(apply % a) p)))","problem":59,"user":"4f6fbb68e4b07046d9f4efeb"},{"problem":59,"code":"(fn myjuxt [& fns]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args)) fns)))","user":"56f9c7c6e4b07572ad1a88ba"},{"code":"(fn [& fs] (fn [& args] (for [f fs] (apply f args))))\n; okay, this is kinda cool","problem":59,"user":"50f2e5cee4b0ec8ee6fa8643"},{"code":"(fn [& fns] \n  (fn [& xs]\n    (reduce (fn [eml vs]\n              (conj eml (apply vs xs))) [] fns)))","problem":59,"user":"50fee7c9e4b04bea760d0d7a"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map #(apply %1 args) fns)))","problem":59,"user":"4f0d093b535d0136e6c22313"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (loop [[f & _ :as funcs] funcs\n             result []]\n        (if funcs\n          (recur (next funcs) (conj result (apply f args)))\n          result))))","user":"5712854ce4b07c98581c3a89"},{"problem":59,"code":"(fn [& fns] (fn [& args] (map (fn [f] (apply f args)) fns)))","user":"553fe711e4b0a04f792994fb"},{"problem":59,"code":"(fn [& xs]\n  (fn [& ys]\n    (map (fn [f] (apply f ys)) xs)))","user":"56cf115de4b0ea9b8538f765"},{"code":"(fn [& fs]\n    (fn [& xs] (map (fn [f] (apply f xs)) fs)))","problem":59,"user":"4dc1e1e4535d020aff1edf90"},{"problem":59,"code":";; first solution\n; (fn [& funcs]\n;   (fn [& args]\n;    (loop [funcs funcs\n;            res []]\n;       (if (empty? funcs)\n;         res\n;         (let [to-apply (first funcs)]\n;           (recur (rest funcs)\n;                  (conj res (apply to-apply args))))))))\n\n;; way better solution\n(fn [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)))","user":"53322cece4b019098a6f8b73"},{"problem":59,"code":"(fn  [ & funcs] (fn [& args] (map #(apply % args) funcs)))","user":"564127a9e4b08d4f616f5ef3"},{"code":"(fn [& funcs]\n  (fn [& x]\n    (loop [f funcs answer []]\n      (if (empty? f) answer\n        (recur (rest f)\n           (conj answer (apply (first f) x))\n        )\n      )\n    )\n  )\n)","problem":59,"user":"50bfbf25e4b05ae8c1cbbd9b"},{"code":"(fn mapf [& fns]\n  (fn [& args]\n    (into [] (for [f fns]\n               (apply f args)))))","problem":59,"user":"51d96ad0e4b02ceefd94774f"},{"code":"(fn [& funs] (fn [& l] (map #(apply % l) funs)))","problem":59,"user":"5163b06be4b055933a9ca030"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (reduce\n      (fn [result current]\n        (conj result (apply current args))) [] funs)))","user":"57d9bca1e4b0bd073c202405"},{"code":"(fn [& f] (fn [& args] (map #(apply % args) f)))","problem":59,"user":"4fb3b865e4b081705acca2a2"},{"code":"(fn [& fns]\n  (fn [ & args] (if (> (count args) 1)\n(map #(reduce %1 args)  fns)\n (map #(%1 (first args)) fns))))","problem":59,"user":"4efa2b5c535dced4c769f26f"},{"problem":59,"code":"(fn juxt* [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","user":"5392500ae4b0b51d73faaeaf"},{"problem":59,"code":"(fn [& funcs] (fn [& args] (for [func funcs] (apply func args) )) )","user":"54db33f1e4b024c67c0cf75d"},{"code":"(fn [& fns]\n  (fn [& args]\n    (map\n     (fn [fun] (apply fun args))\n     fns)))","problem":59,"user":"516385cee4b055933a9ca02d"},{"code":"(fn [& fs]\n    (fn [& xs]\n      (for [f fs]\n        (apply f xs))))","problem":59,"user":"5165a235e4b079ad97ec44ac"},{"problem":59,"code":"(fn [& fns] (fn [& args] (map (fn [f] (apply f args)) fns )))","user":"5b445421e4b02d533a91bc40"},{"problem":59,"code":"(fn [& fns] (fn [& args] (reduce #(conj %1 (apply %2 (flatten args))) [] fns)))","user":"5a535572e4b05d388ecb6c0b"},{"problem":59,"code":"(fn myjuxt [& fns]\n  (fn [& args]\n    (loop [ret [] fs fns]\n      (if fs\n        (recur (conj ret (apply (first fs)  args)) (next fs))\n        ret\n        ))\n    ))","user":"5592bf9fe4b0c79f6e1db933"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (for [func fns]\n      (apply func args))))","user":"53dd37aee4b0d874e779ae28"},{"problem":59,"code":"(fn [& args]\n  (fn [& xs]\n    (for [f args]\n      (apply f xs))))","user":"5c13ce5ee4b01240ff5671a4"},{"code":"(fn juxta [& fs]\n  (if-let [[f1 & fr] fs]\n    (fn [& args]\n      (cons (apply f1 args) (apply (apply juxta fr) args)))\n    (constantly nil)))","problem":59,"user":"539a2901e4b0b51d73faaf0f"},{"problem":59,"code":"(fn [& attrs]\n  \n  (fn [& paras]\n\n    (map #(apply % paras) attrs)))","user":"562268dce4b03f08ee9a9224"},{"problem":59,"code":"(fn reducejuxt\n  [& fns]\n  (fn [& args]\n    (reduce (fn [res func]\n              (conj res (apply func args))\n              ) [] fns)\n    )\n  )","user":"5d5950c1e4b02ba5928a6827"},{"code":"#(fn [& a] (map (fn [f] (apply f a)) %&))","problem":59,"user":"4e52d815535d302ef430da77"},{"code":"(fn jxt [& funcs]\n  (fn [& m]\n\t\t(loop [res []\n\t\t\tops funcs]\n\t\t(if ops (recur\n\t\t\t(conj res (apply (first ops) m))\n\t\t\t(next ops)) res))))","problem":59,"user":"4ff4c9dae4b0678c553fc360"},{"problem":59,"code":"(fn [& fns]\n (fn [& xs]\n  (map #(apply % xs) fns)))","user":"510608ebe4b01150e115ebe3"},{"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (loop [todo fns\n          return []]\n      (if todo\n        (recur (next todo) (conj return (apply (first todo) args)))\n        return))))","problem":59,"user":"52cb19abe4b07d0d72b27348"},{"problem":59,"code":"(fn [& funcs]\n    (fn\n      ([& x] (println x) (map #(apply % x) funcs))))","user":"5ff5bc1ae4b06df49cee1490"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n    (map #(apply % args) funs) ))","user":"58acce0ae4b0005cfeb1a754"},{"code":"(fn j ([] (fn [& args] []))\n      ([a] (fn [& args] [(apply a args)])) \n      ([a b] (fn [& args] [(apply a args) (apply b args)]))\n      ([a b & rest] (fn [& args] (concat (apply (j a b) args)  \n                                        (apply (apply j rest) args)))))","problem":59,"user":"4fe900a6e4b0547ebccb243a"},{"code":"(fn juxtapose [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) funcs)))","problem":59,"user":"50763574e4b0a894bb95bf3d"},{"code":"(fn [& fs]\n  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fs)))","problem":59,"user":"4e9519b4535dbda64a6f6b2d"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map \n      (fn [f] (apply f args)) \n      funcs)))","user":"57487084e4b009280f9f2b8c"},{"code":"(fn fun-juxt\n    ([f] #(identity [(apply f %&)]))\n    ([f & g] #(cons (apply f %&) (apply (apply fun-juxt g) %&))))","problem":59,"user":"52a04f0ee4b04e0c58e87bc1"},{"problem":59,"code":"(fn [& fns] (fn [& l] (map #(apply %1 l) fns)))","user":"56a75810e4b0542e1f8d14fc"},{"problem":59,"code":"(fn juxtaposition [& functions]\n  (fn [& parameters]\n    (map #(apply % parameters) functions)))","user":"57e7fbc7e4b0bfb2137f5b0b"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (into [] (map #(apply %1 args) fns))))","user":"52a3c66ce4b04e0c58e87c04"},{"code":"(fn [& fs] (fn [ & as] (reduce #(conj % (apply %2 as)) [] fs)))","problem":59,"user":"5098bcfee4b0cae2931060a1"},{"code":"(fn [& g] (fn [& x] (map (fn [f] (apply f x)) g)))","problem":59,"user":"5216933be4b000d124d989cf"},{"problem":59,"code":"(fn juxta [& fs]\n  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fs)))","user":"5f8b06afe4b0715f5002d74a"},{"problem":59,"code":"(fn [& fs] (fn [& rest] (map (fn [f] (apply f rest)) fs)))","user":"587ad5aae4b01531a375eaf0"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map (fn [func]\n           (apply func args))\n         funcs)))","user":"56c33ceae4b05cc29241ee89"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args] (reduce #(conj %1 (apply %2 args)) [] fns)))","user":"5ec02e20e4b00a66d4a95288"},{"problem":59,"code":"(fn moo [& fns]\n  (fn [& params]\n    (map #(apply % params) fns)))","user":"4ed90014535d10e5ff6f52fe"},{"code":"(fn [ & f ] \n  (fn [ & k ] \n    (map #(apply % k ) f)))","problem":59,"user":"4fc43a8ee4b081705acca346"},{"problem":59,"code":"(fn me\n  [& ops]\n  \n  (let [ret (fn myresturn [& args]\n              \n               (map #(apply % args) ops)\n              \n              )       \n        \n        ]\n    \n    ret)\n \n  )","user":"55897fe2e4b059ccff29b205"},{"code":"(fn [& fs]\r\n  (fn [& a]\r\n    (map #(apply % a) fs)))","problem":59,"user":"4ecbb249535df97575fdabdf"},{"problem":59,"code":"#(fn [& args]\n   (map (fn [f] (apply f args)) %&))","user":"5ec6de19e4b08d0ec38692da"},{"problem":59,"code":"(fn juxta[& funs]\n\t(fn[& args]\n\t\t(map #(apply % args) funs)))","user":"5954eef0e4b066ee0a44af17"},{"problem":59,"code":"(fn my-juxt [& functions]\n  (fn [& args]\n    (map #(apply % args) functions)))","user":"5c506951e4b0f9f7a8770ec5"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& params]\n    (loop [[x & xs :as all] funcs\n           appliables params\n           resultset []]\n      (if (empty? all)\n        resultset\n        (recur xs appliables (conj resultset (apply x appliables)))))))","user":"5655e056e4b0f9d632dd849b"},{"problem":59,"code":"(fn myjuxt-reduce\n  [& functions]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] functions)))","user":"53e8c684e4b036ad0777e48b"},{"code":"(fn f [& v] (fn [& u] (map #(apply % u) v)))","problem":59,"user":"503917a0e4b088a6a14ca763"},{"code":"(fn [& fns] (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"4dc3780b535da86f151f0c3f"},{"problem":59,"code":"(fn[& fs](\n          fn[& args](\n                     map\n                     (fn[f](apply f args))\n                     fs\n                      )\n          ))","user":"56039843e4b04bb52996e1be"},{"problem":59,"code":"(fn [& fs] (fn [& col] (map #(apply % col) fs)))","user":"576df252e4b0979f8965156f"},{"problem":59,"code":"(fn my-juxt [& fs] \n  (fn [& pars] (map #(apply % pars) fs)))","user":"56449e4de4b0284900eef5f9"},{"problem":59,"code":"(fn jxt [& fs]\n  (fn jxt-ret [& args]\n    (for [f fs]\n      (apply f args))))","user":"55ed5a2de4b0121d4835fdd8"},{"code":"(fn agg [f1 & fns]\n  (if (< (count fns) 1)\n    (fn [& args] [(apply f1 args)]) \n    (fn [& args] (cons (apply f1 args) (apply (apply agg fns) args) )) ))","problem":59,"user":"53050c04e4b0d8b024fd3757"},{"code":"(fn [& args]\n  (fn [& x]\n    (map #(apply %1 x) args)))","problem":59,"user":"50a5f72fe4b0aa96157e2611"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n    )\n  )","user":"5245e320e4b09dbe66b56177"},{"problem":59,"code":"(fn my-juxt [& more]\n       (fn [& coll]\n          (for [x more] (apply x coll))\n   ))","user":"573940e3e4b0cd1946bd106b"},{"problem":59,"code":"(fn juxt- [& funcs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args)) [] funcs)))","user":"565654dae4b0f9d632dd849f"},{"problem":59,"code":"(fn [& fs]\n  (let [fs (map #(partial apply %) fs)]\n    (fn [& args]\n      (map #(% args) fs))))","user":"583e27e2e4b089d5ab817daa"},{"code":"(fn [& fns] (fn [& x] (map #(apply % x) fns)))","problem":59,"user":"4fd8544be4b0dab7d829f390"},{"problem":59,"code":"(fn [& x]\n      (fn [& s]\n        (map (fn [f] (apply f s)) x)))","user":"5600dccee4b04bb52996e175"},{"problem":59,"code":"(fn [& fns]\n    (fn [& args]\n       (let [aplicacion (fn [f args] (apply f args))]\n         (mapv #(aplicacion % args) fns))))","user":"5d0153f9e4b0cc9c915881aa"},{"code":"(fn jxt [& fns]\r\n     (fn [& args]\r\n       (for [f fns]\r\n         (apply f args))))","problem":59,"user":"4f82e14be4b033992c121c0c"},{"code":"(fn juxtaposition [& fs]\n  (fn to-juxt [& args]\n    (for [f fs] (apply f args))))","problem":59,"user":"51d360d1e4b099f3b6acddff"},{"problem":59,"code":"(fn [& argsf]\n  (fn [& args]\n   (map #(apply %1 args) (vec argsf))))","user":"586e47dee4b01531a375e9a9"},{"problem":59,"code":"(fn JuxtaPosition\n  ([& func]\n     #(loop [inputFunc func output []]\n       (if (empty? inputFunc)\n         output\n         (recur (rest inputFunc) (conj output (apply (first inputFunc) %&)))\n       )\n     )\n   )\n)","user":"5e16b820e4b0a047bd49f71f"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args] (map #(apply % args) funcs)))","user":"544cf5d7e4b0e39780006977"},{"problem":59,"code":"(fn [& args] (fn [& arguments] (map (fn [func] (apply func arguments)) args)))","user":"54585c69e4b01be26fd7461f"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args))\n            []\n            funcs)\n  )\n)","user":"59d75e36e4b0ef0a1e9b5c32"},{"problem":59,"code":"(fn [& func] (fn [& args] (map #(apply % args) func)))","user":"5a634ff0e4b0512ff01cd995"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (vec (for [f fns]\n              (apply f args)))))","user":"567b2f20e4b05957ce8c61a2"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","problem":59,"user":"4e6a2f51535d8ccf87e9fea9"},{"problem":59,"code":"(fn\n([f1 f2] (fn [& args] (vector (apply f1 args) (apply f2 args))))\n([f1 f2 f3] (fn [& args] (vector \n(apply f1 args) \n(apply f2 args)\n(apply f3 args)\n))))","user":"5e13a6b7e4b099d064963001"},{"code":"(fn my-juxt [& fs]\n  (fn [& inputs]\n    (map #(apply % inputs) fs)))","problem":59,"user":"4eda7cc3535d10e5ff6f530e"},{"problem":59,"code":"(fn [& fns]\n (fn [& args]\n  (mapv #(apply % args) fns)))","user":"598216d9e4b021a7a535fdf8"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n  \t(map #(apply % args) fs)))","user":"4e435681535dc968683fc4a1"},{"problem":59,"code":"(fn my-juxt [& funcs]\n    (fn [& args] \n      (for [f funcs]\n        (apply f args))))","user":"556405e5e4b0c656e3ff17fb"},{"problem":59,"code":"(fn myjuxt [ & fs ]\n  (fn [ & vs] (map #(apply % vs) fs)))","user":"5cab33e7e4b048ec896c5c48"},{"problem":59,"code":"(fn me\n  ([f] (fn [& args] [(apply f args)]))\n  ([f & frest] (fn [& args]\n                 \t(cons \n                     \t(apply f args)\n                     \t(apply (apply me frest) args)))))","user":"561d506ee4b064ca9f4b16aa"},{"problem":59,"code":"(fn [& fs]\n  (fn [& data]\n   (loop [l_f fs\n          v []]\n    (if (or (empty? l_f) (nil? l_f)) v\n         (recur\n          (drop 1 l_f)\n          (conj v (apply (first l_f) data)))))))","user":"5872935ce4b01531a375ea1d"},{"problem":59,"code":"(fn __ [& functions]\n  (fn [& args]\n    (map #(apply % args) functions)))","user":"5ac91d90e4b0e27600da77bd"},{"problem":59,"code":"(fn [& funcs]\n    (fn [& args]\n      (map (fn [f] (apply f args)) funcs)))","user":"554b7056e4b0a04f79299583"},{"problem":59,"code":"(fn [& fs] \n  (fn [& v] \n    (reduce #(conj % (apply %2 v)) [] fs)))","user":"53f78944e4b0de5c41848561"},{"code":"(fn b [& m]\n  (fn nn [& n]\n    (loop [mm m l []]\n      (if (empty? mm) l\n(recur (next mm) (conj l (apply (first mm) n)))))))","problem":59,"user":"4fe97adde4b0547ebccb245e"},{"code":"(fn juxt'\n  [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"5131104ae4b09e21d785bdfe"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","user":"5574c172e4b05c286339e059"},{"problem":59,"code":"(fn [& fs]\n    #(reduce (fn [a f] (conj a (apply f %&))) [] fs))","user":"507e68abe4b085af06e3afd2"},{"problem":59,"code":"(fn _juxt [& fs]\n               (fn [& args]\n                 (mapv #(apply % args) fs)))","user":"5a813b90e4b00b71e582a065"},{"code":"(fn [& fns] \n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4e6a4954535d8ccf87e9fec0"},{"code":"#(fn [& x] (for [f %&] (apply f x)))","problem":59,"user":"4e71da4d535d5021c1a89653"},{"code":"(fn [& fs]\n  (fn [& args](map #(apply % args) fs)))","problem":59,"user":"4f1bb9d8535d64f60314647d"},{"problem":59,"code":"(fn [& fx] (fn [& ax] (map #(apply % ax) fx)))","user":"5a01d8f6e4b01bb0ae8afd53"},{"problem":59,"code":"(fn juxt' [& fns]\n  (fn [& args]\n    (reduce (fn [res f]\n              (conj res (apply f args)))\n            []\n            fns)))","user":"5d1be50ce4b02ea6f0fb6986"},{"problem":59,"code":"(fn [& fun]\n  (fn [& args]\n    (map #(apply % args) fun)))","user":"5460f59ce4b01be26fd74695"},{"code":"(fn [& xs]\n    (fn [& args]\n      (map #(apply % args) xs)))","problem":59,"user":"538ca203e4b0b51d73faae5f"},{"code":"(fn AdrianSmellsLikeAGoose [& more] (fn [& secondArgs] (mapv #(apply % secondArgs) (vec more))))","problem":59,"user":"50f85902e4b0aafb827eb1f8"},{"code":"(fn [& args] (fn [& body] (for [ar args] (apply ar body))))","problem":59,"user":"509ebf39e4b08df8156e9e33"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args]\n     (mapv #(apply % args) fs)))","user":"5ed8a12fe4b0c7845d86b0d7"},{"code":"(fn [& f] #(for [g f] (apply g %&)))","problem":59,"user":"4e1350af535d04ed9115e7d8"},{"problem":59,"code":"(fn [& f] (fn [& col] (map #(apply % col) f)))","user":"59390a35e4b02506e01a29f3"},{"code":"(fn [& fns]\n  (fn [& xs]\n    (reduce (fn [agg f] (conj agg (apply f xs)))\n            []\n            fns)\n    )\n  )","problem":59,"user":"4f03f3b7535dcb61093f6b85"},{"code":"(fn [& fns] (fn [& xs] (reduce #(conj %1 (apply %2 xs)) [] fns)))","problem":59,"user":"4fe8a3bde4b07c9f6fd12c61"},{"code":"(fn jux [& fs]\n  (fn [& args]\n    (for [f fs] (apply f args))))","problem":59,"user":"52016fd3e4b0b2e020a18f10"},{"problem":59,"code":"(fn [& args]\n  (fn [& aa] (map #(apply % aa) args)))","user":"57458b82e4b009280f9f2b4e"},{"problem":59,"code":"(fn f [ & funcs]\n  (fn [& args] \n    (->> funcs\n         (map #(apply % args)))))","user":"5493d908e4b0b312c081ff52"},{"problem":59,"code":"(fn [& fl] (fn [& a] (map (fn [f] (apply f a)) fl)))","user":"5951190be4b066ee0a44aea4"},{"code":"(fn r [& x]\n  (if (= (count x) 1)\n    (fn [& w] (list (apply (first x) w) ) )\n    (fn [& w] (concat (list (apply (first x) w) ) (apply (apply r (rest x)) w )))))","problem":59,"user":"525cc137e4b0cb4875a45d46"},{"code":"(fn [& funs]\n  #(for [f funs]\n    (apply f %&)))","problem":59,"user":"500933a6e4b046cdb195e074"},{"code":"(fn [& funcs]\n  (fn [& params]\n    ((fn [[f & fs] \n          params\n          result]\n       (if f (recur fs params (conj result (apply f params)))\n              result)) funcs params [])))","problem":59,"user":"51eadb98e4b0f1f103a0d153"},{"problem":59,"code":"(fn [& callables] (fn [& args] (map (fn [callable] (apply callable args)) callables)))","user":"57d0fce5e4b0bd073c202364"},{"code":"(fn [& fns]\n           (fn [& args]\n             (map #(apply % args) fns)))","problem":59,"user":"4e5f034b535d8a8b8723a2d9"},{"code":"#(fn [& args] (reduce (fn [a b] (conj a (apply b args))) [] (list* %&)))","problem":59,"user":"4e8f4f64535d65386fec2149"},{"code":"(fn [& x]\n  (fn [& y]\n    (map #(apply % y) x)))","problem":59,"user":"52084f75e4b01ce6bbf31dde"},{"problem":59,"code":"(fn jux [& funcs] (fn [& args] (for [f funcs] (apply f args))))\n\n;; Return a higher order function that takes in args and apply's\n;; each function to those args in a for loop","user":"577bcbd9e4b0d3393e5deb1b"},{"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (for [f fns]\n      (apply f args))))","problem":59,"user":"526ee63de4b03e8d9a4a733f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args))\n         fs)))","user":"55f85b93e4b03cbcff9738ae"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& as]\n    (map #(apply % as) fs)))","user":"5cf1d9e3e4b0aaa82f112a18"},{"problem":59,"code":"(fn __\n  [& fns]\n  (fn [& args]\n    (for [f fns\n          :let [x (apply f args)]]\n      x)))","user":"5b73e500e4b047b03b2036ba"},{"problem":59,"code":"(fn my-juxt\n  ([f] f)\n  ([f1 f2] (fn [& args] [(apply f1 args) (apply f2 args)]))\n  ([f1 f2 f3] (fn [& args] [(apply f1 args)(apply f2 args) (apply f3 args)])))","user":"5c411df3e4b08cd430848ebf"},{"problem":59,"code":"(fn juxt* [& fs]\n    (fn [& xs]\n      (map #(apply %1 xs) fs)\n      )\n    )","user":"55249f64e4b0882d96d091c6"},{"problem":59,"code":"(fn [& fs]\n  (fn [& coll]\n    (loop [[f & more] fs result []]\n      (if (nil? f)\n        result\n        (recur more (conj result (apply f coll)))))))","user":"53968a70e4b0b51d73faaee0"},{"code":"(fn my-juxt\r\n  ([] identity)\r\n  ([f & fs]\r\n     (fn [& args]\r\n       (loop [fs (conj fs f)\r\n              res []]\r\n         (if (empty? fs)\r\n           res\r\n           (recur (next fs)\r\n                  (conj res (apply (first fs) args)))\r\n           )))))","problem":59,"user":"4dd023dd535d5973398f92ad"},{"code":"(fn j [& fs]\n  (fn [& x]\n    (map #(apply % x) fs)))","problem":59,"user":"4ee75ec2535d93acb0a66867"},{"problem":59,"code":"(fn juxt* [& fns]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (conj acc (apply f args)))\n            [] fns)))","user":"5777c3d6e4b0979f8965164f"},{"problem":59,"code":"(fn prob59 [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)\n    ))","user":"4ebbff41535dfed6da9c6d78"},{"problem":59,"code":"(fn [& fns]\n    #(for [f fns]\n      (apply f %&)))","user":"5d9e8e40e4b000c986472bc2"},{"code":"(fn [& funcs]\n    (fn [& args] (for [f funcs] (apply f args))))","problem":59,"user":"5084cb7de4b0fb8f40674bfb"},{"problem":59,"code":"(fn juxty [& fns]\n  (fn [& args]\n    (into []\n      (map #(apply % args) fns))))","user":"54f36b36e4b050824f58f5c2"},{"problem":59,"code":"#(fn [& s]\n   (map (fn [f] (apply f s)) %&))","user":"54acf5c7e4b09f271ff37cdd"},{"problem":59,"code":"(fn jux [f & g]\n  (fn [& x]\n    (if g\n     (conj\n       (apply \n        (apply jux g)\n        x) \n       (apply f x)\n      )\n    (conj '() (apply f x))\n    )\n  )\n)","user":"5c0d0537e4b0bdcf453d173d"},{"problem":59,"code":"(fn [& functs]\n  (fn [& x]\n    (map\n      #(apply % x)\n      functs\n      )))","user":"58d28c70e4b03c36ff7e5901"},{"problem":59,"code":"(fn [& f] \n    #(map (fn [e] (apply e %&)) f))","user":"577202d2e4b0979f896515c0"},{"problem":59,"code":"(fn juxt* [& fs]\n             (fn [& args]\n               (map #(apply % args) fs)))","user":"59fa241ee4b0ca45a743a358"},{"problem":59,"code":"(fn myjuxt[& b](fn[& c](map #(apply % c) b)))","user":"5849ac5fe4b089d5ab817ed7"},{"code":"(fn [& x]\n  \n  #(map (fn [y] (apply y %&)) x)\n)","problem":59,"user":"53153466e4b08068f379ed23"},{"code":"(fn [& fs] \n  (fn [& as] (map #(apply % as) fs)))","problem":59,"user":"507a396be4b08327cd804a69"},{"code":"(fn [& fns]\n  (fn [& as]\n    (map #(apply % as) fns)))","problem":59,"user":"52ba43d0e4b07a9af57922cd"},{"problem":59,"code":"(fn my-juxt [& func]\n    (fn [& args]\n      (map #(apply % args) func)\n      ))","user":"5c48757fe4b0e06e1360a3c3"},{"code":"(fn [& o] (fn [& a] (map #(apply % a) o)))","problem":59,"user":"4e8f1ac6535d65386fec2146"},{"code":"(fn [& fns] (fn [& args] (for [fun fns] (apply fun args))))","problem":59,"user":"4e89dbce535d3e98b8023283"},{"problem":59,"code":"(fn [& fs] (fn [& xs] (mapv (fn [f] (apply f xs)) fs)))","user":"55ddf9dde4b050e68259b3d9"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args] (for [x funcs] (apply x args))))","user":"59cd13d5e4b0ef0a1e9b5b32"},{"code":"(fn myjuxt [& f]\n    (fn [& s]\n            (map\n            (fn [f] (apply f s) )\n             f)))","problem":59,"user":"4f128865535d64f603146428"},{"problem":59,"code":"(fn [& fns] (fn [& args] (map #(apply % args) fns))  )","user":"533ea7e8e4b085b17e897d94"},{"code":"(fn [& s] #(for [f s] (apply f %&)))","problem":59,"user":"4db858d1535d1e037afb218c"},{"problem":59,"code":"(fn [& f]\n    (fn [& p]\n      (map #(apply % p) f)))","user":"5f3f2281e4b004f08c61c561"},{"problem":59,"code":"(fn [& funcs] \n  (fn [& coll] \n    (reduce #(conj %1 (apply %2 coll)) [] funcs)))","user":"5471f0f3e4b094393f72dd6f"},{"problem":59,"code":"(fn my-juxt [& fs]\n  (fn [& a]\n    (map #(apply % a) fs)))","user":"5880e38fe4b0f1effa3b7625"},{"problem":59,"code":"(fn f [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"53e06f81e4b0d874e779ae4c"},{"problem":59,"code":"(fn [& xs] (fn [& xm] (map #(apply % xm) xs)))","user":"5b924123e4b0c0b3ffbd4a34"},{"problem":59,"code":"(fn jxt [& X]\n\t(fn [& x] \n\t\t(loop [[f & frest :as F] X, out []]\n\t\t\t(if (seq F)\n\t\t\t\t(recur frest (concat out [(apply f x)]))\n\t\t\t\tout))))","user":"564d02cde4b0284900eef679"},{"problem":59,"code":"(fn [& a]\n  (fn [& b]\n    (for [f a]\n      (apply f b))))","user":"53572176e4b04ce2eb3ed276"},{"problem":59,"code":"(fn [& f]\n  (fn [& v]\n    (reduce #(conj %1 (apply %2 v)) [] f)))","user":"544e8369e4b0e39780006987"},{"code":"(fn jux [& fns] \n  (fn [& xs]\n      (map #(apply % xs) fns)))","problem":59,"user":"531c0619e4b08068f379ed98"},{"problem":59,"code":"(fn [& fns]\n    (fn [& xs]\n      (->> (map #(apply % xs) fns)\n           (apply vector ))))","user":"5920c191e4b09b4ee5954c61"},{"problem":59,"code":"(fn juxtaposition [& fs]\n  (fn [& args]\n    (reduce\n      #(conj %1 (apply %2 args))\n      []\n      fs)))","user":"53d40508e4b00fb29b221332"},{"code":"(fn [& f]\n  (fn [& arg]\n    (map #(apply % arg) f)))","problem":59,"user":"51cbaf14e4b08d8387cbedda"},{"code":"(fn myjuxt [& funcs]\n  (fn [& args]\n      (map #(apply % args)\n           funcs)))","problem":59,"user":"51a4d53ae4b0def3c5c58699"},{"code":"(fn\n  [& args]\n  (fn\n    [& inner]\n    (map\n      (fn [f] (apply f inner)) args)))","problem":59,"user":"51441ce7e4b0b4fb4ace5f41"},{"code":"#(fn [& args]\n  (map (fn [f] (apply f args)) %&))","problem":59,"user":"504f57c7e4b0a02f9cffde71"},{"code":"(fn my-juxt\n  [& args]\n  #(map apply args (repeatedly (constantly %&))))","problem":59,"user":"51701a9ce4b034fe8eaf70f5"},{"problem":59,"code":"(fn [& f]\n  (fn[& a]\n    (reduce #(conj %1 (apply %2 a)) [] f)))","user":"4e8849c5535d8b9bb0147ca4"},{"code":"(fn [& col] (fn [& more] (map #(apply % (vec more)) (vec col))))","problem":59,"user":"4e7ada51535db169f9c796ae"},{"code":"(fn j [& fs] \n  (fn [& more] (map #(apply %1 more) fs)))","problem":59,"user":"4ea1ecfa535d7eef308072bb"},{"problem":59,"code":"(fn test [& fns] \n  (fn [& args]\n    (for [f fns] (apply f args))\n   )\n )","user":"54021f13e4b0df28a13c62cc"},{"problem":59,"code":"(fn [& functs]\n  (fn [& args]\n              (reduce (fn [r func] (conj r (apply func args)))\n                [] functs)))","user":"56f973c3e4b07572ad1a88b0"},{"code":"(fn [& ops]\n  (fn [& x]\n    (map #(apply % x) ops)\n    )\n  )","problem":59,"user":"52e59ca5e4b09f7907dd1464"},{"problem":59,"code":"(fn juxta [& fs]\n  (fn [& args]\n    (mapv #(apply % args) fs)))","user":"543a8256e4b032a45b869327"},{"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map (fn [f] (apply f args)) funcs)))","problem":59,"user":"4dc54eb2535d8a4b2fd74284"},{"problem":59,"code":"(fn [& fs]\n  (fn [& xs] \n    (mapv #(apply % xs) fs)))","user":"58c73111e4b021aa9917ed72"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [functions fns\n           acc []]\n      (if (empty? functions)\n        acc\n        (recur (butlast functions) (cons (apply (last functions) args) acc))\n      )\n    )\n  )\n)","user":"540f09b9e4b0addc1aec6725"},{"problem":59,"code":"(fn my-jutx [& args]\n  (fn [& jargs] \n    (map #(apply % jargs) args)\n    )\n )","user":"57011eb3e4b08d47c97781d1"},{"code":"(fn somefn [& fns]\n  (let [f\n        (fn [& args]\n          (map (fn [f] (apply f args)) fns))]\n    f))","problem":59,"user":"52140b53e4b0961f15ac4d7e"},{"problem":59,"code":"(fn\n  [& fns]\n  (fn [& args]\n    (reduce (fn [results f]\n              (conj results (apply f args)))\n            []\n            fns)))","user":"570c8ac3e4b0b0fb43fd06ca"},{"problem":59,"code":"(fn [& r] #(map (fn [x](apply x %&)) r))","user":"57e33f6fe4b0bfb2137f5a96"},{"problem":59,"code":"(fn[& a] (fn [& b] (map #(apply % b) a)))","user":"5339cb07e4b0e30313ee6caf"},{"code":"(fn [& f]\n    (fn [& s]\n        ((fn g [ff]\n              (if (empty? ff)\n                   ()\n                  (cons (apply (first ff) s)\n                        (g (rest ff)))))\n         f )))","problem":59,"user":"4f404dcee4b0e243712b1fb0"},{"problem":59,"code":"(fn [& args] (fn [& args2] (map #(apply % args2) args)))","user":"4e7e8684535db169f9c79717"},{"code":"#(fn [& args] (for [f %&] (apply f args)))","problem":59,"user":"4ed27f9f535d44c135fd68d5"},{"problem":59,"code":"(fn [& fs] (fn [& args]\n             (map #(apply % args) fs)\n             ))","user":"584d8724e4b0b7285a6f4e3e"},{"problem":59,"code":"(fn [& f] \n  (fn [& v] \n    (mapv #(apply % v) f)))","user":"5683d2a9e4b0945ebc182aa0"},{"code":"(fn [& f]\n     (fn [& g]              \n       (loop [result [] functions f]\n         (if functions\n           (recur (conj result (apply (first functions) g)) (next functions))\n           result\n           )                  \n         )       \n       )          \n     )","problem":59,"user":"5106dc1be4b01150e115ebf0"},{"problem":59,"code":"(fn [& funcs] #(map apply funcs (repeat %&)))","user":"55ec879ae4b0121d4835fdc8"},{"code":"(fn myjuxt [& fs]\n  (fn [& xs]\n    (map #(apply % xs) fs)))","problem":59,"user":"51805d22e4b0e3fc13e244df"},{"code":"(fn [& fs]\r\n  (fn [& s]\r\n    (map #(apply % s) fs)))","problem":59,"user":"504e14c2e4b078edc5f593bf"},{"problem":59,"code":"(fn myj[& fargs]\n  (fn[ & args]\n    (map #(apply % args) fargs)))","user":"52f426fce4b05e3f0be25f1e"},{"problem":59,"code":"(fn juxt1 [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","user":"5e0d948fe4b099d064962f98"},{"code":"(fn [& more]\n    (loop [result (first more) i 1]\n      (if (= i (count more))\n        result\n        (recur\n         (fn [& args]\n           (assoc\n            (if (coll? (apply result args))\n              (apply result args)\n              (vector (apply result args) )\n              )\n            (if (coll? (apply result args))\n              (count (apply result args))\n              1)\n             (apply (nth more i) args) \n            )\n           )\n         (inc i))\n        )) )","problem":59,"user":"4ea31da2535d7eef308072c1"},{"code":"(fn [& funcs]\n  (fn [& xs]\n    (map #(apply % xs) funcs)))","problem":59,"user":"50ef77a4e4b0bdaecbb47d99"},{"code":"(fn [& ff]\n    (fn [& args]\n      (map #(apply % args) ff) \n    )\n  )","problem":59,"user":"51db9e1ee4b0e067a9bbadc9"},{"code":"(fn my-juxt [& fs]\n  (fn [& as]\n    (map #(apply % as) fs)))","problem":59,"user":"52890634e4b0239c8a67ae5e"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args]\n      (map #(apply % args) fs)))\n\n;; (fn [& fs]\n;;     (fn [& args]\n;;       (reduce #(conj %1 (apply %2 args)) [] fs)))\n\n;; (fn [& fs]\n;;     (fn [& args]\n;;       (for [f fs]\n;;         (apply f args))))","user":"591ad160e4b09b4ee5954bdf"},{"problem":59,"code":"(fn [& fns]\n   (fn [& args]\n     (map (fn [f] (apply f args)) fns)))","user":"546ff835e4b00cfc9eacc1b4"},{"problem":59,"code":"(fn [& fs] (fn [& terms] (map #(apply % terms) fs)))","user":"5d4f21f3e4b0776584bd6f4e"},{"code":"#_(fn jxt [& ops]\n  (fn [& more]\n    (map #(apply % more) ops)))\n\n\n(fn jxt [& ops]\n  (fn [& more]\n    (for [op ops] (apply op more))))","problem":59,"user":"5371167fe4b0fc7073fd6ea7"},{"problem":59,"code":"(fn [& functions] \n  (fn [& args] (map #(apply % args) functions)))","user":"54ca130ce4b057c6fda3a250"},{"problem":59,"code":"(fn [f & fs]\n  (fn [& args]\n    (reduce (fn [result-vec func]\n              (conj result-vec (apply func args)))\n            [(apply f args)]\n            fs)))","user":"55ba4a78e4b01b9910ae29cf"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args] (map #(apply % args) funcs)))","user":"53504fe6e4b084c2834f4ada"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n      (map #(apply % args) fns)))","user":"4f42c80ae4b0d7d3c9f3fd0f"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (map (fn [func]\n           (apply func args)) fns)))","user":"54d0cedde4b0e8a36923e5d2"},{"problem":59,"code":"(fn my-juxt [& fns]\n\t(fn\n\t\t([val] (map (fn [f] (f val)) fns))\n\t ([val & vals] (map (fn [f] (reduce (fn [res el] (f res el)) val vals)) fns))\n\t))","user":"5c87c79be4b048ec896c591b"},{"code":"(fn [& fns]\n  (fn [& xs] (map #(apply % xs) fns)))","problem":59,"user":"4eb0a757535d7eef3080733d"},{"problem":59,"code":"(fn [& a]\n  (fn [& b]\n    (for [f a] (apply f b))))","user":"54d753ebe4b0a52adc2e2029"},{"problem":59,"code":"(fn [& funs] \n    (fn [& args]\n      (reduce #(conj %1 (apply %2 args) ) [] funs))\n    \n )","user":"5df75fd8e4b0a607a9a45c92"},{"code":"(fn [& fs]\n  (fn [& coll]\n    (map #(apply % coll) fs)))","problem":59,"user":"4f036d9b535dcb61093f6ac1"},{"problem":59,"code":"(fn\n  [& s]\n  (fn\n    [& args]\n    (map #(apply % args) s)))","user":"505345d9e4b0517ede0d0a06"},{"code":"(fn [& fs]\n  (fn [& x]\n    (reduce #(conj %1 (apply %2 x)) [] fs)))","problem":59,"user":"518ccf6be4b05e6c8537e386"},{"problem":59,"code":"(fn [& fargs]\n  (fn [& vargs]\n    (reduce #(conj % (apply %2 vargs)) [] fargs)))","user":"53e9a15be4b036ad0777e4ae"},{"code":"(fn [f & fx] (fn [& args] (map #(apply % args) (cons f fx))))","problem":59,"user":"5230d9bde4b0035e815da397"},{"problem":59,"code":"(fn [& f]\n  (fn [& a] \n    (reduce #(conj % (apply %2 a)) [] f)))","user":"53b7c21ae4b047364c0444d4"},{"problem":59,"code":"(fn [& functions]\n  (fn [& args]\n    (for [function functions]\n      (apply function args))))","user":"5412d5d2e4b01498b1a719d9"},{"code":"(fn[& f]\n  (fn [& a]\n    (map #(apply % a) f)))","problem":59,"user":"52b405e1e4b0c58976d9ad15"},{"problem":59,"code":"(fn juxtapose [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)\n  )\n)","user":"5722bf99e4b0c5bde472c0d6"},{"code":"(fn [& f]\n          (fn [& d]\n            (map #(apply % d) f)))","problem":59,"user":"4fa9da14e4b081705acca1e7"},{"problem":59,"code":"(fn [& fs] \n  (fn [& args]\n    (mapv #(apply % args) fs)))","user":"520e37cfe4b066f3ea161c96"},{"problem":59,"code":"(fn [& args] \n  (let [f (fn [& z] \n            (map (fn [y] (apply y z)) args)\n            )] \n    f))","user":"57b8b008e4b0fbc9809a27e6"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args]\n    (map (fn [f] (apply f args)) fns)))","user":"56018dd4e4b04bb52996e18f"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [ffs fs out []]\n      (if (empty? ffs)\n        out\n        (recur (rest ffs) (conj out (apply (first ffs) args)))))))","problem":59,"user":"4dd9d299535d2dad7130b5dd"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs fs res []]\n      (if (seq fs)\n        (recur (rest fs) (conj res (apply (first fs) args)))\n        res))))","user":"589771f9e4b00487982d52bd"},{"code":"(fn [ & f]\r\n  (fn [ & r]\r\n    (map #(apply % r) f)))","problem":59,"user":"4deff9f9535d08e6dec9fe15"},{"problem":59,"code":"(fn __\n    ([] identity)\n    ([f]\n       (fn [& args]\n         [(apply f args)]))\n    ([f & fs]\n       (fn [& args]\n         (concat\n          (apply (__ f) args)\n          (apply (apply __ fs) args) ))))","user":"5433a07be4b0b6b47310fce0"},{"code":"(fn juxt*\n  [& fs]\n  (fn [& args]\n    (let [res (map #(apply % args) fs)] res)))","problem":59,"user":"4dda44f2535d02782fcbe9f1"},{"problem":59,"code":"(fn [& ys]\n (fn [& xs] (map #(apply % xs) ys)))","user":"5ce05561e4b0a17bb84e2b08"},{"problem":59,"code":"(fn my-juxt [& fns]\n  (fn [& args]\n    (map (fn [f] (apply f args)) fns)))","user":"5641296de4b08d4f616f5ef4"},{"code":"(fn [& funcs]\n       (fn [& l] \n         (map \n          (fn [x] \n            (apply x l)\n            )\n          funcs)))","problem":59,"user":"52eee533e4b05e3f0be25ecb"},{"problem":59,"code":"(fn my-juxt [& functions]\n  (fn [& arguments]\n    (for [f functions]\n      (apply f arguments))))","user":"5bfa25fbe4b0bdcf453d15c8"},{"problem":59,"code":"(fn [& fs]\n   (fn [& args]\n     (map #(apply % args) fs)))","user":"565b2fa5e4b068f2fe63dbfe"},{"problem":59,"code":"(fn [& fl]\n  (fn [& pl]\n\t(for [f fl] (apply f pl))))","user":"55d74e71e4b0e31453f64aa4"},{"code":"(fn [& fns]\r\n  (fn [& xs]\r\n    (map (fn [f] (apply f xs)) fns)))","problem":59,"user":"4f474f43e4b0d56e7bb92bb7"},{"code":"(fn [& fs]\n  (fn [& args]\n    (reduce #(conj %1 (apply %2 args) ) [] fs)))","problem":59,"user":"50d0d4c8e4b00b15ecee976a"},{"problem":59,"code":"(fn\n  [& f]\n  (fn [& x]\n    (loop [r [] f f]\n      (if (empty? f)\n        r\n        (recur (conj r (apply (first f) x)) (rest f))))))","user":"5af907e6e4b0cc2b61a3bcda"},{"code":"(fn [& fs]  (fn [& s]\n                (for [f fs] (apply f s)) ) )","problem":59,"user":"4ee7d177535d93acb0a6686f"},{"problem":59,"code":"(fn [& funs]\n  (fn [& args]\n\t(map #(apply % args) funs)))","user":"54be792ee4b0ed20f4ff6eeb"},{"code":"#(letfn [(juxtaposition\n           [& functions]\n           (fn\n             [& args]\n             (vec \n               (map\n                 (fn [f] (apply f args))\n                 functions))))]\n   (apply juxtaposition %&))","problem":59,"user":"51fb9d30e4b0f1313d468a0f"},{"problem":59,"code":"(fn apply-left-to-right [& functions]\n  (fn [& args]\n    (loop [rem functions\n           res []]\n      (if (empty? rem)\n        res\n        (recur (rest rem) (conj res (apply (first rem) args)))))\n    )\n  )","user":"5dd67c22e4b0948ae9d9ad80"},{"code":"(fn [& fs]\n  (fn [& args]\n    (for [f fs]\n      (apply f args))))","problem":59,"user":"4ea57300535d7eef308072d5"},{"problem":59,"code":"( fn [& f]( fn [& a] ( map #(apply % a) f )) )","user":"54fc7d89e4b07d26eda61d2b"},{"problem":59,"code":"(fn [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)\n  )\n)","user":"5de6484ce4b0986d99407f66"},{"problem":59,"code":"(fn juxt'\n  [& fs]\n  (fn [& args] (map #(apply % args) fs)))","user":"56488119e4b0284900eef632"},{"problem":59,"code":"(fn x [& fs]\n  (fn [& vs]\n    (reduce\n      (fn [r e]\n        (conj r (apply e vs)))\n      []\n      fs)))","user":"5989e080e4b021a7a535fed6"},{"problem":59,"code":"(fn [& args]\n  (fn [& fs] (map #(apply % fs) args)))","user":"5633bb9de4b0bfe05bf117b4"},{"code":"(fn [& fns]\n  (fn [& s]\n    (map #(apply % s) fns)))","problem":59,"user":"4e1f9bb5535d04ed9115e80d"},{"problem":59,"code":"(fn [& funcs]\n                (fn [& coll]\n                  (map #(apply % coll) funcs)))","user":"58db48a5e4b0a4d5acaab679"},{"code":"(fn [& fs]\n  (fn [x & args] (reduce #(conj %1 (apply %2 x args)) [] fs)))","problem":59,"user":"4f4ba29ae4b03ad3f0c10c7a"},{"code":"(fn f [& fs]\n  (fn g [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"50464831e4b011c5dfee771f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (let [coll (seq args)]\n      (map (fn [f] (apply f coll)) fs))))","user":"564a560ae4b0284900eef654"},{"code":"(fn [ & fs]\n  (fn [& args]\n    (vec (map #(apply % args) fs))))","problem":59,"user":"4e68b46c535d8ccf87e9fe87"},{"problem":59,"code":"(fn [& fs]\n         (fn [& args]\n           (for [f fs]\n             (apply f args))))","user":"5beadeb5e4b0f319e2d7ec88"},{"code":"(fn jux1 [& fs] (fn [& seq] (map #(apply %1 seq) fs)))","problem":59,"user":"5268eb68e4b03e8d9a4a71c6"},{"code":"(fn myjuxt [& more]\n  (if (nil? more) (fn [& args] [])\n      (fn [& args] (cons  (apply (first more) args) (apply (apply myjuxt (rest more) ) args) ))\n  )\n)","problem":59,"user":"53979a87e4b0b51d73faaef0"},{"problem":59,"code":"(fn [ & fs] \n  (fn [ & nums] \n    (map  #(apply % nums) fs )))","user":"5dc12b0ae4b0e59a23173d84"},{"problem":59,"code":"(fn own-juxt\n  [& funcs]\n  (fn [& args]\n      (map #(apply % args) funcs)))","user":"58e56633e4b056aecfd47c94"},{"problem":59,"code":"(fn a [& f]\n  (fn b [& x]\n    (map #(apply % x) f)))","user":"5fe09d1fe4b05ac5b16ea15b"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args]    \n    (map \n     #(apply % args) \n     fns)))","user":"5587d8b3e4b059ccff29b1e8"},{"problem":59,"code":"(fn [& fns]\n  (fn [& a]\n  \t(map #(apply % a) fns)))","user":"53c649d3e4b00fb29b221297"},{"problem":59,"code":"(fn\n  [& fs]\n  (fn [& args]\n    (vec (map #(apply % args) fs))))","user":"54edc818e4b024c67c0cf865"},{"code":"(fn [f & fns]\n  (fn [& args]\n    (let [fs (list* f fns) ret []]\n      (loop [nxt (next fs) ret (conj ret (apply (first fs) args))] \n        (if nxt\n          (recur (next nxt) (conj ret (apply (first nxt) args)))\n          ret)))))","problem":59,"user":"513cb853e4b0b86ece9f322b"},{"problem":59,"code":"(fn [& fn-args] (fn [& args] (map #(apply % args) fn-args)))","user":"59fa5773e4b0ca45a743a35e"},{"code":"(fn [& f]\n  (fn [& s] (map #(apply % s) f)))","problem":59,"user":"50142490e4b07d18bdaaf70a"},{"problem":59,"code":"(fn j [& f]\n    (fn [& ks] (map #(apply % %2) f (repeat ks))))","user":"534e4a29e4b084c2834f4ab0"},{"problem":59,"code":"(fn [& funs] (fn [& args] (reduce #(conj %1 (apply %2 args)) [] funs)))","user":"567f988be4b0feffd0d18ebe"},{"code":"(fn [& fns]\n  (fn [& args]\n    (reduce (fn [acc f]\n      (conj acc (apply f args)))\n      [] fns)))","problem":59,"user":"4e89ddf9535d3e98b8023284"},{"problem":59,"code":"(fn [& fns] (fn [& args] (map #(% args) (map #(fn [l] (apply % l)) fns))))","user":"57ed19a3e4b0bfb2137f5b8e"},{"code":"(fn [& fs]\n        (fn [& xs]\n          (map #(apply % xs) fs)))","problem":59,"user":"5055e7f4e4b0ce54f56f0401"},{"problem":59,"code":"(fn jx [& f]\n  (fn [& args]\n    (map #(apply % args) f)))","user":"54d4bd2be4b0a52adc2e2005"},{"problem":59,"code":"(fn juxtaposition\n  [& rest]\n  (fn [& parameters] (reduce #(conj %1 (apply %2 parameters)) [] rest)))","user":"556c94afe4b09a3098a524fe"},{"code":"(fn [& fs]\n  (fn [& vs]\n    (map #(apply % vs) fs)))","problem":59,"user":"4e6a48d5535d8ccf87e9febd"},{"code":"(fn juxt--map\n  [& fns] {:pre [(every? ifn? fns)]}\n  (fn [& args]\n    (map #(apply % args) fns)))","problem":59,"user":"4fc6305de4b0ee37620e180b"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (loop [[f & fs] fns\n           acc []]\n      (if (nil? f)\n        acc\n        (recur fs (conj acc (apply f args)))))))","user":"56685a73e4b04acd4f672de5"},{"code":"(fn [& fns]\n    (fn [& xs]\n      (map #(apply % xs) fns)))","problem":59,"user":"4dad938fc9a9d6ed1b99dc57"},{"code":"(fn [& x]\n  (fn [& args]\n    (map #(apply % args) x)))","problem":59,"user":"4ea16981535d7eef308072b2"},{"problem":59,"code":"(fn jxt [& fns]\n  (fn [& args]\n    (map #(apply % args) fns)\n  )\n)","user":"5606d71ce4b08b23635d317a"},{"problem":59,"code":"(fn [& fns] (fn [& coll] (map #(apply % coll) fns)))","user":"58923efce4b00487982d521c"},{"problem":59,"code":"#(fn \n   [& a] (for [f %&] (apply f a)))","user":"56aed78fe4b03c432f187363"},{"problem":59,"code":"(fn [& fns] (fn [& args] (map (fn [funk] (apply funk args)) fns)))","user":"5c7c1d8ee4b0d597f478ca88"},{"code":"(fn my-juxt [& args]\n  (fn [& args-]\n    (map #(apply %1 args-) args)))","problem":59,"user":"511e763ce4b03e81d390ac29"},{"code":"(fn f[& x] (fn [& y] (for [z x] (apply z y))))","problem":59,"user":"514d398ee4b019235f6c0583"},{"problem":59,"code":"(fn [& f] #(for [x f] (apply x %&))\n  )","user":"56066e82e4b08b23635d3173"},{"code":"(fn[& [args :as ls]] (fn[& [args2 :as ls2]] (loop[acc [] tmp ls]\n                                                      (if (empty? tmp)\n                                                        (reverse acc)\n                                                        (recur (cons (apply (first tmp) ls2) acc) (rest tmp))))))","problem":59,"user":"5301157ae4b0d8b024fd3717"},{"code":"(fn [& fs]\n    (fn [& args] \n      (map #(apply % args) fs))\n    )","problem":59,"user":"50eddbc4e4b06330c1f87c4b"},{"code":"(fn txuj [& fns] \n     (fn [& args]\n       (map #(apply %1 args) fns)))","problem":59,"user":"4e6a11ee535d8ccf87e9fe9f"},{"problem":59,"code":"(fn [& fns]\n\t(fn [& args]\n\t\t(map #(apply % args) fns)))","user":"51434a4fe4b0c172af7558d4"},{"code":"(fn zuxt [& funcs]\n  (fn zuxt1 [& args]\n    (map #(apply %1 args) funcs)\n  )\n)","problem":59,"user":"4e5fdd68535d8ccf87e9fe4f"},{"code":"(fn [& fs]\n  (fn [& args]\n    (loop [fs fs out []]\n      (if-let [s (seq fs)]\n        (recur (rest s) (conj out (apply (first s) args)))\n        out))))","problem":59,"user":"4ee88269535d93acb0a6687f"},{"code":"(fn [& fs]\n  (fn [& lst]\n    (map #(apply % lst) fs)))","problem":59,"user":"4fba7d1ee4b081705acca2e0"},{"code":"(fn [& fs] (fn [& args] (map (fn [f] (apply f args)) (seq fs))))","problem":59,"user":"523f0bbfe4b01c266ffa7f91"},{"problem":59,"code":"(fn [& fns] \n  (fn [& args]\n    (reduce (fn [f g] \n              (conj f (apply g args))) \n            [] \n            fns)))","user":"57c94c6ee4b05aa3c4741d2d"},{"problem":59,"code":"(fn [& fs]\n (fn [& p]\n  (map #(apply % p) fs)))","user":"5b61aa6ae4b0c6492753e712"},{"code":"(fn my-juxt [& fs]\n  (fn [& args]\n    (loop [out [] f fs]\n      (if (nil? (first f))\n        out\n        (recur (conj out (apply (first f) args))\n               (rest f))))))","problem":59,"user":"4fa17b00e4b0dcca54ed6d5f"},{"problem":59,"code":"(fn[& fs] (fn[& args] (map #(apply %1 args) fs)))","user":"5627d09ce4b00e49c7cb47db"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [f]\n           (apply f args)) fns)))","user":"572722c4e4b0c5bde472c134"},{"problem":59,"code":"(fn [& f] (fn [& a] ( map #(apply %1 a) f)))","user":"55645592e4b0c656e3ff1802"},{"problem":59,"code":"(fn my-juxt [& fns] (fn juxt-fns [& other] (reduce #(conj %1 (apply %2 other)) [] fns)))","user":"5a536cf2e4b05d388ecb6c10"},{"problem":59,"code":"(fn my-juxt [& funcs]\n  (fn [& args]\n    (map #(apply % args) funcs)\n    ))","user":"5a42dbabe4b0447ef91cc5fc"},{"code":"(fn [& fns]\n   (fn [& args] (map #(apply % args) fns)))","problem":59,"user":"535eaa73e4b04ce2eb3ed2d4"},{"code":"(fn [& fs] (fn [& arg] (for [f fs] (apply f arg))))","problem":59,"user":"5180dc04e4b06b8caf33fa01"},{"code":"(fn[& fs](fn[& vs](for [f fs](apply f vs))))","problem":59,"user":"4de8a7d7535d08e6dec9fdfe"},{"code":"(fn [& functions] (fn [& args] (map #(apply % args) functions)))","problem":59,"user":"4f04b66b535dcb61093f6bdd"},{"code":"(fn [& fs]\n  (fn [& xs]\n    (for [f fs] (apply f xs))))","problem":59,"user":"4f251302e4b0d66497709ff0"},{"problem":59,"code":"(fn [& fns]\n  (fn [& args]\n    (map (fn [func]\n           (apply func args)) fns)))","user":"5b478997e4b02d533a91bc71"},{"code":"(fn juxtapose [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"532ab0bde4b09d4e7a9b5527"},{"problem":59,"code":"(fn [& fs]\n    (fn [& args] (map #(apply % args) fs)))","user":"5751f2a2e4b02ea114799292"},{"code":"(fn [& a] #(for [x a] (apply x %&)))","problem":59,"user":"4eb13d60535d7eef3080733f"},{"code":"(fn f [& funcs]\n  (fn g [& args]\n    (vec (for [h funcs] (apply h args)))))","problem":59,"user":"4e8b98fc535d65386fec2124"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args]\n    (map\n      #(apply % args)\n      fs\n    )\n  )\n)","user":"5aac468ae4b073f17744256b"},{"problem":59,"code":"(fn [& Fs]\n  (fn [& args]\n  \t\t(for [f Fs]\n          \t(apply f args)\n    \t)\n    \n   )\n)","user":"5649615be4b0284900eef641"},{"problem":59,"code":"(fn my-juxt\n  [& funs]\n  (fn [& args] \n    (map #(apply % args) funs)))","user":"56c3aca0e4b05cc29241ee90"},{"code":"(fn jxt [& fns]\n          (fn [& args]\n              (map #(apply % args) fns)))","problem":59,"user":"4eb8ec4a535dfed6da9c6d4b"},{"problem":59,"code":"(fn apply_each [& fns]\n  (fn apply_args [& args]\n    (for [f fns]\n      (apply f args)\n      )\n    )\n  )","user":"562add6de4b00e49c7cb4834"},{"problem":59,"code":"(fn jux [& funcs]\n  (fn [& args] (map #(apply % args) funcs)))","user":"532a033be4b09d4e7a9b551f"},{"problem":59,"code":"(fn [& fs]\n  (fn [& args] (reduce (fn [acc f] (conj acc (apply f args))) [] fs)))","user":"5d81b40ce4b0915913b1d379"},{"problem":59,"code":"(fn [f & fs] \n  (fn [x & xs]\n    (let [fss (cons f fs)\n          xss (cons x xs)]\n      (map #(apply % xss) fss))))","user":"5447e08ce4b032a45b8693c3"},{"code":"(fn juxta\n  [& fs]\n  (fn [& args]\n    (map #(apply % args) fs)))","problem":59,"user":"4e3bccb1535deb9a81d77f55"},{"code":"(fn [& f] \n  (fn [& args]\n    (map #(apply % args) f)))","problem":59,"user":"520cb8c4e4b0b022ef140c9a"}]